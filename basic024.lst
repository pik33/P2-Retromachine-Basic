00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic024.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 68 59 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 14 22 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 0C 20 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 1C 10 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 0C 0F 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 EC 12 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 48 8C 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 2C 1A 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 80 AD 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 30 D5 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa E8 D2 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb C0 E4 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F4 04 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     8C 86 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     64 86 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     3C 86 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     48 7C B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     98 7C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     88 7C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     EC 7B B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     40 01 00 FF 
00ab4     76 17 06 F6 | 	mov	arg03, ##@LR__4317
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     18 A5 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     50 A4 B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     40 01 00 FF 
00b14     77 1F 06 F6 | 	mov	local01, ##@LR__4318
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     7C E4 05 F1 | 	add	objptr, ##62588
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     7C E4 85 F1 | 	sub	objptr, ##62588
00b64     1C 26 90 AD |  if_e	jmp	#LR__0147
00b68     7A 00 00 FF 
00b6c     80 E4 05 F1 | 	add	objptr, ##62592
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     24 A1 B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     40 01 00 FF 
00bdc     78 15 06 F6 | 	mov	arg02, ##@LR__4319
00be0     18 80 B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     80 E4 05 F1 | 	add	objptr, ##62592
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     80 E4 85 F1 | 	sub	objptr, ##62592
00c00     7A 00 00 AF 
00c04     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     C0 A0 B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     40 01 00 FF 
00c40     7A 15 06 F6 | 	mov	arg02, ##@LR__4320
00c44     B4 7F B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     80 E4 85 F1 | 	sub	objptr, ##62592
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     20 A0 B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     40 01 00 FF 
00ce0     7C 31 06 F6 | 	mov	local10, ##@LR__4321
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     10 7F B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     7C E4 05 F1 | 	add	objptr, ##62588
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     7C E4 85 F1 | 	sub	objptr, ##62588
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     7C E4 05 F1 | 	add	objptr, ##62588
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     7C E4 85 F1 | 	sub	objptr, ##62588
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     C0 9E B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     64 A2 B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     9C A1 B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     84 E4 05 F1 | 	add	objptr, ##62596
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     FC 9D B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     28 A2 B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     60 A1 B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     40 01 00 FF 
00e10     7E 1F 06 F6 | 	mov	local01, ##@LR__4322
00e14     7A 00 00 FF 
00e18     84 E4 05 F1 | 	add	objptr, ##62596
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     84 E4 85 F1 | 	sub	objptr, ##62596
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     84 E4 05 F1 | 	add	objptr, ##62596
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     84 E4 85 F1 | 	sub	objptr, ##62596
00e5c     40 01 00 FF 
00e60     7F 15 06 F6 | 	mov	arg02, ##@LR__4323
00e64     94 7D B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     84 E4 05 F1 | 	add	objptr, ##62596
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     84 E4 85 F1 | 	sub	objptr, ##62596
00eb8     40 01 00 FF 
00ebc     80 15 06 F6 | 	mov	arg02, ##@LR__4324
00ec0     38 7D B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     84 E4 05 F1 | 	add	objptr, ##62596
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     84 E4 85 F1 | 	sub	objptr, ##62596
00f10     40 01 00 FF 
00f14     81 15 06 F6 | 	mov	arg02, ##@LR__4325
00f18     E0 7C B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     84 E4 05 F1 | 	add	objptr, ##62596
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     84 E4 85 F1 | 	sub	objptr, ##62596
00f68     40 01 00 FF 
00f6c     82 15 06 F6 | 	mov	arg02, ##@LR__4326
00f70     88 7C B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     34 9D B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     88 E4 05 F1 | 	add	objptr, ##62600
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     88 E4 85 F1 | 	sub	objptr, ##62600
00fdc     B0 24 B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##62588
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##62588
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     90 E4 05 F1 | 	add	objptr, ##62608
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     90 E4 85 F1 | 	sub	objptr, ##62608
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     90 E4 85 F1 | 	sub	objptr, ##62608
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     28 9C B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     98 E4 05 F1 | 	add	objptr, ##62616
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     98 E4 85 F1 | 	sub	objptr, ##62616
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     40 01 00 FF 
010ec     83 15 06 F6 | 	mov	arg02, ##@LR__4327
010f0     08 7B B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     98 E4 85 F1 | 	sub	objptr, ##62616
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     90 E4 85 F1 | 	sub	objptr, ##62608
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     88 9B B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     98 E4 05 F1 | 	add	objptr, ##62616
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     98 E4 85 F1 | 	sub	objptr, ##62616
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     40 01 00 FF 
0118c     84 15 06 F6 | 	mov	arg02, ##@LR__4328
01190     68 7A B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     98 E4 85 F1 | 	sub	objptr, ##62616
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     40 01 00 FF 
011f4     85 15 06 F6 | 	mov	arg02, ##@LR__4329
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     F8 79 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     BC 79 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     98 E4 05 F1 | 	add	objptr, ##62616
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     98 E4 85 F1 | 	sub	objptr, ##62616
0131c     40 01 00 FF 
01320     87 15 06 F6 | 	mov	arg02, ##@LR__4330
01324     D4 78 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     98 E4 05 F1 | 	add	objptr, ##62616
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     98 E4 85 F1 | 	sub	objptr, ##62616
01348     40 01 00 FF 
0134c     89 15 06 F6 | 	mov	arg02, ##@LR__4331
01350     A8 78 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     D4 98 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     40 01 00 FF 
0139c     8B 15 06 F6 | 	mov	arg02, ##@LR__4332
013a0     58 78 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     04 98 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     40 01 00 FF 
013e4     8D 15 06 F6 | 	mov	arg02, ##@LR__4333
013e8     10 78 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     EC 97 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     A4 77 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A0 E4 85 F1 | 	sub	objptr, ##62624
01590     40 01 00 FF 
01594     8F 15 06 F6 | 	mov	arg02, ##@LR__4334
01598     60 76 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A0 E4 05 F1 | 	add	objptr, ##62624
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A0 E4 85 F1 | 	sub	objptr, ##62624
015b8     40 01 00 FF 
015bc     91 15 06 F6 | 	mov	arg02, ##@LR__4335
015c0     38 76 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A0 E4 05 F1 | 	add	objptr, ##62624
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A0 E4 85 F1 | 	sub	objptr, ##62624
015e0     40 01 00 FF 
015e4     93 15 06 F6 | 	mov	arg02, ##@LR__4336
015e8     10 76 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A0 E4 05 F1 | 	add	objptr, ##62624
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A0 E4 85 F1 | 	sub	objptr, ##62624
01608     40 01 00 FF 
0160c     95 35 06 F6 | 	mov	local12, ##@LR__4337
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     E4 75 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A0 E4 05 F1 | 	add	objptr, ##62624
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A0 E4 85 F1 | 	sub	objptr, ##62624
01634     40 01 00 FF 
01638     97 33 06 F6 | 	mov	local11, ##@LR__4338
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     B4 75 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A0 E4 05 F1 | 	add	objptr, ##62624
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A0 E4 85 F1 | 	sub	objptr, ##62624
01664     40 01 00 FF 
01668     99 33 06 F6 | 	mov	local11, ##@LR__4339
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     88 75 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A0 E4 05 F1 | 	add	objptr, ##62624
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A0 E4 85 F1 | 	sub	objptr, ##62624
01690     40 01 00 FF 
01694     9B 39 06 F6 | 	mov	local14, ##@LR__4340
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     5C 75 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     A4 E4 05 F1 | 	add	objptr, ##62628
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     A4 E4 85 F1 | 	sub	objptr, ##62628
016bc     40 01 00 FF 
016c0     9D 4D 06 F6 | 	mov	local24, ##@LR__4341
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     2C 75 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A0 E4 05 F1 | 	add	objptr, ##62624
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A0 E4 85 F1 | 	sub	objptr, ##62624
016ec     40 01 00 FF 
016f0     9F 4D 06 F6 | 	mov	local24, ##@LR__4342
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     00 75 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     A4 E4 05 F1 | 	add	objptr, ##62628
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     A4 E4 85 F1 | 	sub	objptr, ##62628
01718     40 01 00 FF 
0171c     A1 47 06 F6 | 	mov	local21, ##@LR__4343
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     D0 74 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A0 E4 05 F1 | 	add	objptr, ##62624
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A0 E4 85 F1 | 	sub	objptr, ##62624
01748     40 01 00 FF 
0174c     A3 47 06 F6 | 	mov	local21, ##@LR__4344
01750     23 15 02 F6 | 	mov	arg02, local21
01754     A4 74 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     A4 E4 05 F1 | 	add	objptr, ##62628
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     A4 E4 85 F1 | 	sub	objptr, ##62628
01774     40 01 00 FF 
01778     A5 4F 06 F6 | 	mov	local25, ##@LR__4345
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     74 74 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A0 E4 05 F1 | 	add	objptr, ##62624
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A0 E4 85 F1 | 	sub	objptr, ##62624
017a4     40 01 00 FF 
017a8     A7 51 06 F6 | 	mov	local26, ##@LR__4346
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     44 74 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     A4 E4 05 F1 | 	add	objptr, ##62628
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     A4 E4 85 F1 | 	sub	objptr, ##62628
017d4     40 01 00 FF 
017d8     A9 53 06 F6 | 	mov	local27, ##@LR__4347
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     14 74 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     A4 E4 85 F1 | 	sub	objptr, ##62628
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     04 74 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     E8 96 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     20 96 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 31 02 F6 | 	mov	local10, local04
0194c     18 29 02 F6 | 	mov	local06, local10
01950     03 28 66 F0 | 	shl	local06, #3
01954     53 00 00 FF 
01958     E0 E5 05 F1 | 	add	objptr, ##42976
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     53 00 00 FF 
01968     E0 E5 85 F1 | 	sub	objptr, ##42976
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     53 00 00 FF 
019cc     E0 E5 05 F1 | 	add	objptr, ##42976
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     53 00 00 FF 
01a34     E0 E5 85 F1 | 	sub	objptr, ##42976
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     53 00 00 FF 
01a78     E0 E5 05 F1 | 	add	objptr, ##42976
01a7c     F2 28 02 F1 | 	add	local06, objptr
01a80     14 13 02 FB | 	rdlong	arg01, local06
01a84     01 14 06 F6 | 	mov	arg02, #1
01a88     53 00 00 FF 
01a8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01a90     4C 91 B1 FD | 	call	#__system__Left_S
01a94     FD 12 02 F6 | 	mov	arg01, result1
01a98     40 01 00 FF 
01a9c     AB 15 06 F6 | 	mov	arg02, ##@LR__4348
01aa0     58 71 B1 FD | 	call	#__system___string_cmp
01aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
01aa8     40 00 90 5D |  if_ne	jmp	#LR__0086
01aac     1D 2B 02 F6 | 	mov	local07, local15
01ab0     03 2A 66 F0 | 	shl	local07, #3
01ab4     53 00 00 FF 
01ab8     E0 E5 05 F1 | 	add	objptr, ##42976
01abc     F2 2A 02 F1 | 	add	local07, objptr
01ac0     15 13 02 FB | 	rdlong	arg01, local07
01ac4     01 14 06 F6 | 	mov	arg02, #1
01ac8     53 00 00 FF 
01acc     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad0     94 91 B1 FD | 	call	#__system__Right_S
01ad4     FD 12 02 F6 | 	mov	arg01, result1
01ad8     40 01 00 FF 
01adc     AD 15 06 F6 | 	mov	arg02, ##@LR__4349
01ae0     18 71 B1 FD | 	call	#__system___string_cmp
01ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ae8     38 00 90 AD |  if_e	jmp	#LR__0087
01aec                 | LR__0086
01aec     1D 31 02 F6 | 	mov	local10, local15
01af0     03 30 66 F0 | 	shl	local10, #3
01af4     53 00 00 FF 
01af8     E0 E5 05 F1 | 	add	objptr, ##42976
01afc     F2 30 02 F1 | 	add	local10, objptr
01b00     1D 39 02 F6 | 	mov	local14, local15
01b04     03 38 66 F0 | 	shl	local14, #3
01b08     F2 36 02 F6 | 	mov	local13, objptr
01b0c     F2 38 02 F1 | 	add	local14, objptr
01b10     1C 13 02 FB | 	rdlong	arg01, local14
01b14     53 00 00 FF 
01b18     E0 E5 85 F1 | 	sub	objptr, ##42976
01b1c     74 93 B1 FD | 	call	#__system__LCase_S
01b20     18 FB 61 FC | 	wrlong	result1, local10
01b24                 | LR__0087
01b24     01 3A 06 F1 | 	add	local15, #1
01b28     38 FF 9F FD | 	jmp	#LR__0085
01b2c                 | LR__0088
01b2c                 | ' 
01b2c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b2c                 | ' 
01b2c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b2c     00 24 06 F6 | 	mov	local04, #0
01b30     1E 5D 02 F6 | 	mov	local32, local16
01b34     01 5C 06 F1 | 	add	local32, #1
01b38     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b3c                 | LR__0089
01b3c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b40     30 00 90 3D |  if_ae	jmp	#LR__0091
01b44     12 31 02 F6 | 	mov	local10, local04
01b48     03 30 66 F0 | 	shl	local10, #3
01b4c     53 00 00 FF 
01b50     E0 E5 05 F1 | 	add	objptr, ##42976
01b54     F2 30 02 F1 | 	add	local10, objptr
01b58     04 30 06 F1 | 	add	local10, #4
01b5c     FF FF FF FF 
01b60     18 FF 6B FC | 	wrlong	##-1, local10
01b64     01 24 06 F1 | 	add	local04, #1
01b68     53 00 00 FF 
01b6c     E0 E5 85 F1 | 	sub	objptr, ##42976
01b70     C8 FF 9F FD | 	jmp	#LR__0089
01b74                 | LR__0090
01b74                 | LR__0091
01b74                 | ' 
01b74                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b74                 | ' 
01b74                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b74     53 00 00 FF 
01b78     E0 E5 05 F1 | 	add	objptr, ##42976
01b7c     F2 12 02 FB | 	rdlong	arg01, objptr
01b80     53 00 00 FF 
01b84     E0 E5 85 F1 | 	sub	objptr, ##42976
01b88     09 2D 02 F6 | 	mov	local08, arg01
01b8c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b90                 | LR__0092
01b90     16 FB C9 FA | 	rdbyte	result1, local08 wz
01b94     01 2C 06 51 |  if_ne	add	local08, #1
01b98     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01b9c                 | LR__0093
01b9c     09 2D 8A F1 | 	sub	local08, arg01 wz
01ba0     E0 15 90 AD |  if_e	jmp	#LR__0147
01ba4                 | ' 
01ba4                 | ' 
01ba4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01ba4     53 00 00 FF 
01ba8     E0 E5 05 F1 | 	add	objptr, ##42976
01bac     F2 12 02 FB | 	rdlong	arg01, objptr
01bb0     53 00 00 FF 
01bb4     E0 E5 85 F1 | 	sub	objptr, ##42976
01bb8     98 2D B0 FD | 	call	#_isdec
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     7A 00 00 5F 
01bc4     A8 E4 05 51 |  if_ne	add	objptr, ##62632
01bc8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bcc     7A 00 00 FF 
01bd0     A8 E4 E5 F3 | 	sumnz	objptr, ##62632
01bd4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bd8     7A 00 00 AF 
01bdc     A8 E4 85 A1 |  if_e	sub	objptr, ##62632
01be0     7A 00 00 FF 
01be4     A8 E4 05 F1 | 	add	objptr, ##62632
01be8     F2 28 02 FB | 	rdlong	local06, objptr
01bec     03 28 66 F0 | 	shl	local06, #3
01bf0     26 00 00 FF 
01bf4     C8 E4 85 F1 | 	sub	objptr, ##19656
01bf8     F2 28 02 F1 | 	add	local06, objptr
01bfc     14 35 02 FB | 	rdlong	local12, local06
01c00     26 00 00 FF 
01c04     CC E4 05 F1 | 	add	objptr, ##19660
01c08     F2 34 62 FC | 	wrlong	local12, objptr
01c0c     04 E4 85 F1 | 	sub	objptr, #4
01c10     F2 34 02 FB | 	rdlong	local12, objptr
01c14     03 34 66 F0 | 	shl	local12, #3
01c18     26 00 00 FF 
01c1c     C8 E4 85 F1 | 	sub	objptr, ##19656
01c20     F2 32 02 F6 | 	mov	local11, objptr
01c24     F2 34 02 F1 | 	add	local12, objptr
01c28     1A 15 02 FB | 	rdlong	arg02, local12
01c2c     40 01 00 FF 
01c30     AF 17 06 F6 | 	mov	arg03, ##@LR__4350
01c34     01 12 06 F6 | 	mov	arg01, #1
01c38     53 00 00 FF 
01c3c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c40     88 94 B1 FD | 	call	#__system__Instr
01c44     7A 00 00 FF 
01c48     B0 E4 05 F1 | 	add	objptr, ##62640
01c4c     F2 FA 61 FC | 	wrlong	result1, objptr
01c50                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c50     FD 1E 02 F6 | 	mov	local01, result1
01c54     7A 00 00 FF 
01c58     B0 E4 85 F1 | 	sub	objptr, ##62640
01c5c     01 1E 56 F2 | 	cmps	local01, #1 wc
01c60     DC 01 90 CD |  if_b	jmp	#LR__0100
01c64     7A 00 00 FF 
01c68     A8 E4 05 F1 | 	add	objptr, ##62632
01c6c     F2 32 02 FB | 	rdlong	local11, objptr
01c70     03 32 66 F0 | 	shl	local11, #3
01c74     26 00 00 FF 
01c78     C8 E4 85 F1 | 	sub	objptr, ##19656
01c7c     F2 38 02 F6 | 	mov	local14, objptr
01c80     F2 32 02 F1 | 	add	local11, objptr
01c84     19 13 02 FB | 	rdlong	arg01, local11
01c88     53 00 00 FF 
01c8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c90     09 2D 02 F6 | 	mov	local08, arg01
01c94     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01c98                 | LR__0094
01c98     16 FB C9 FA | 	rdbyte	result1, local08 wz
01c9c     01 2C 06 51 |  if_ne	add	local08, #1
01ca0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01ca4                 | LR__0095
01ca4     09 2D 82 F1 | 	sub	local08, arg01
01ca8     16 31 02 F6 | 	mov	local10, local08
01cac     7A 00 00 FF 
01cb0     B0 E4 05 F1 | 	add	objptr, ##62640
01cb4     F2 28 02 FB | 	rdlong	local06, objptr
01cb8     7A 00 00 FF 
01cbc     B0 E4 85 F1 | 	sub	objptr, ##62640
01cc0     18 29 52 F2 | 	cmps	local06, local10 wc
01cc4     78 01 90 3D |  if_ae	jmp	#LR__0100
01cc8     01 3C 06 F1 | 	add	local16, #1
01ccc                 | '   k+=1
01ccc                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ccc     1E 25 02 F6 | 	mov	local04, local16
01cd0     7A 00 00 FF 
01cd4     A8 E4 05 F1 | 	add	objptr, ##62632
01cd8     F2 5E 02 FB | 	rdlong	local33, objptr
01cdc     01 5E 06 F1 | 	add	local33, #1
01ce0     26 00 00 FF 
01ce4     C8 E4 85 F1 | 	sub	objptr, ##19656
01ce8     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cec                 | LR__0096
01cec     12 2B 02 F6 | 	mov	local07, local04
01cf0     01 2A 86 F1 | 	sub	local07, #1
01cf4     03 2A 66 F0 | 	shl	local07, #3
01cf8     F2 2A 02 F1 | 	add	local07, objptr
01cfc     15 27 02 FB | 	rdlong	local05, local07
01d00     12 35 02 F6 | 	mov	local12, local04
01d04     01 34 86 F1 | 	sub	local12, #1
01d08     03 34 66 F0 | 	shl	local12, #3
01d0c     F2 34 02 F1 | 	add	local12, objptr
01d10     04 34 06 F1 | 	add	local12, #4
01d14     1A 31 02 FB | 	rdlong	local10, local12
01d18     12 35 02 F6 | 	mov	local12, local04
01d1c     03 34 66 F0 | 	shl	local12, #3
01d20     F2 34 02 F1 | 	add	local12, objptr
01d24     1A 27 62 FC | 	wrlong	local05, local12
01d28     12 4D 02 F6 | 	mov	local24, local04
01d2c     03 4C 66 F0 | 	shl	local24, #3
01d30     F2 4C 02 F1 | 	add	local24, objptr
01d34     04 4C 06 F1 | 	add	local24, #4
01d38     26 31 62 FC | 	wrlong	local10, local24
01d3c     01 24 86 F1 | 	sub	local04, #1
01d40     2F 25 52 F2 | 	cmps	local04, local33 wc
01d44     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d48                 | LR__0097
01d48     26 00 00 FF 
01d4c     C8 E4 05 F1 | 	add	objptr, ##19656
01d50     F2 4C 02 FB | 	rdlong	local24, objptr
01d54     26 29 02 F6 | 	mov	local06, local24
01d58     01 28 06 F1 | 	add	local06, #1
01d5c     03 28 66 F0 | 	shl	local06, #3
01d60     26 00 00 FF 
01d64     C8 E4 85 F1 | 	sub	objptr, ##19656
01d68     F2 28 02 F1 | 	add	local06, objptr
01d6c     03 4C 66 F0 | 	shl	local24, #3
01d70     F2 4C 02 F1 | 	add	local24, objptr
01d74     26 35 02 FB | 	rdlong	local12, local24
01d78     26 00 00 FF 
01d7c     C8 E4 05 F1 | 	add	objptr, ##19656
01d80     F2 46 02 FB | 	rdlong	local21, objptr
01d84     23 49 02 F6 | 	mov	local22, local21
01d88     03 48 66 F0 | 	shl	local22, #3
01d8c     26 00 00 FF 
01d90     C8 E4 85 F1 | 	sub	objptr, ##19656
01d94     F2 4E 02 F6 | 	mov	local25, objptr
01d98     F2 48 02 F1 | 	add	local22, objptr
01d9c     24 13 02 FB | 	rdlong	arg01, local22
01da0     53 00 00 FF 
01da4     E0 E5 85 F1 | 	sub	objptr, ##42976
01da8     09 2D 02 F6 | 	mov	local08, arg01
01dac     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db0                 | LR__0098
01db0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01db4     01 2C 06 51 |  if_ne	add	local08, #1
01db8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dbc                 | LR__0099
01dbc     09 2D 82 F1 | 	sub	local08, arg01
01dc0     16 15 02 F6 | 	mov	arg02, local08
01dc4     7A 00 00 FF 
01dc8     B0 E4 05 F1 | 	add	objptr, ##62640
01dcc     F2 4C 02 FB | 	rdlong	local24, objptr
01dd0     7A 00 00 FF 
01dd4     B0 E4 85 F1 | 	sub	objptr, ##62640
01dd8     26 15 82 F1 | 	sub	arg02, local24
01ddc     1A 13 02 F6 | 	mov	arg01, local12
01de0     84 8E B1 FD | 	call	#__system__Right_S
01de4     14 FB 61 FC | 	wrlong	result1, local06
01de8     7A 00 00 FF 
01dec     A8 E4 05 F1 | 	add	objptr, ##62632
01df0     F2 36 02 FB | 	rdlong	local13, objptr
01df4     1B 29 02 F6 | 	mov	local06, local13
01df8     03 28 66 F0 | 	shl	local06, #3
01dfc     26 00 00 FF 
01e00     C8 E4 85 F1 | 	sub	objptr, ##19656
01e04     F2 28 02 F1 | 	add	local06, objptr
01e08     1B 4D 02 F6 | 	mov	local24, local13
01e0c     03 4C 66 F0 | 	shl	local24, #3
01e10     F2 44 02 F6 | 	mov	local20, objptr
01e14     F2 4C 02 F1 | 	add	local24, objptr
01e18     26 13 02 FB | 	rdlong	arg01, local24
01e1c     26 00 00 FF 
01e20     D0 E4 05 F1 | 	add	objptr, ##19664
01e24     F2 38 02 FB | 	rdlong	local14, objptr
01e28     7A 00 00 FF 
01e2c     B0 E4 85 F1 | 	sub	objptr, ##62640
01e30     1C 33 02 F6 | 	mov	local11, local14
01e34     19 15 02 F6 | 	mov	arg02, local11
01e38     A4 8D B1 FD | 	call	#__system__Left_S
01e3c     14 FB 61 FC | 	wrlong	result1, local06
01e40                 | LR__0100
01e40                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e40     7A 00 00 FF 
01e44     A8 E4 05 F1 | 	add	objptr, ##62632
01e48     F2 2A 02 FB | 	rdlong	local07, objptr
01e4c     03 2A 66 F0 | 	shl	local07, #3
01e50     26 00 00 FF 
01e54     C8 E4 85 F1 | 	sub	objptr, ##19656
01e58     F2 2A 02 F1 | 	add	local07, objptr
01e5c     15 13 02 FB | 	rdlong	arg01, local07
01e60     01 14 06 F6 | 	mov	arg02, #1
01e64     53 00 00 FF 
01e68     E0 E5 85 F1 | 	sub	objptr, ##42976
01e6c     70 8D B1 FD | 	call	#__system__Left_S
01e70     FD 12 02 F6 | 	mov	arg01, result1
01e74     40 01 00 FF 
01e78     B1 15 06 F6 | 	mov	arg02, ##@LR__4351
01e7c     7C 6D B1 FD | 	call	#__system___string_cmp
01e80     00 FA 0D F2 | 	cmp	result1, #0 wz
01e84     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e88     7A 00 00 FF 
01e8c     A8 E4 05 F1 | 	add	objptr, ##62632
01e90     F2 34 02 FB | 	rdlong	local12, objptr
01e94     03 34 66 F0 | 	shl	local12, #3
01e98     26 00 00 FF 
01e9c     C8 E4 85 F1 | 	sub	objptr, ##19656
01ea0     F2 32 02 F6 | 	mov	local11, objptr
01ea4     F2 34 02 F1 | 	add	local12, objptr
01ea8     1A 13 02 FB | 	rdlong	arg01, local12
01eac     53 00 00 FF 
01eb0     E0 E5 85 F1 | 	sub	objptr, ##42976
01eb4     09 2D 02 F6 | 	mov	local08, arg01
01eb8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ebc                 | LR__0101
01ebc     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ec0     01 2C 06 51 |  if_ne	add	local08, #1
01ec4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ec8                 | LR__0102
01ec8     09 2D 82 F1 | 	sub	local08, arg01
01ecc     02 2C 56 F2 | 	cmps	local08, #2 wc
01ed0     50 01 90 CD |  if_b	jmp	#LR__0107
01ed4     01 3C 06 F1 | 	add	local16, #1
01ed8                 | '   k+=1
01ed8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ed8     1E 25 02 F6 | 	mov	local04, local16
01edc     7A 00 00 FF 
01ee0     A8 E4 05 F1 | 	add	objptr, ##62632
01ee4     F2 60 02 FB | 	rdlong	local34, objptr
01ee8     01 60 06 F1 | 	add	local34, #1
01eec     26 00 00 FF 
01ef0     C8 E4 85 F1 | 	sub	objptr, ##19656
01ef4     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01ef8                 | LR__0103
01ef8     12 2B 02 F6 | 	mov	local07, local04
01efc     01 2A 86 F1 | 	sub	local07, #1
01f00     03 2A 66 F0 | 	shl	local07, #3
01f04     F2 2A 02 F1 | 	add	local07, objptr
01f08     15 27 02 FB | 	rdlong	local05, local07
01f0c     12 35 02 F6 | 	mov	local12, local04
01f10     01 34 86 F1 | 	sub	local12, #1
01f14     03 34 66 F0 | 	shl	local12, #3
01f18     F2 34 02 F1 | 	add	local12, objptr
01f1c     04 34 06 F1 | 	add	local12, #4
01f20     1A 31 02 FB | 	rdlong	local10, local12
01f24     12 35 02 F6 | 	mov	local12, local04
01f28     03 34 66 F0 | 	shl	local12, #3
01f2c     F2 34 02 F1 | 	add	local12, objptr
01f30     1A 27 62 FC | 	wrlong	local05, local12
01f34     12 4D 02 F6 | 	mov	local24, local04
01f38     03 4C 66 F0 | 	shl	local24, #3
01f3c     F2 4C 02 F1 | 	add	local24, objptr
01f40     04 4C 06 F1 | 	add	local24, #4
01f44     26 31 62 FC | 	wrlong	local10, local24
01f48     01 24 86 F1 | 	sub	local04, #1
01f4c     30 25 52 F2 | 	cmps	local04, local34 wc
01f50     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f54                 | LR__0104
01f54     26 00 00 FF 
01f58     C8 E4 05 F1 | 	add	objptr, ##19656
01f5c     F2 4C 02 FB | 	rdlong	local24, objptr
01f60     26 29 02 F6 | 	mov	local06, local24
01f64     01 28 06 F1 | 	add	local06, #1
01f68     03 28 66 F0 | 	shl	local06, #3
01f6c     26 00 00 FF 
01f70     C8 E4 85 F1 | 	sub	objptr, ##19656
01f74     F2 28 02 F1 | 	add	local06, objptr
01f78     03 4C 66 F0 | 	shl	local24, #3
01f7c     F2 4C 02 F1 | 	add	local24, objptr
01f80     26 35 02 FB | 	rdlong	local12, local24
01f84     26 00 00 FF 
01f88     C8 E4 05 F1 | 	add	objptr, ##19656
01f8c     F2 44 02 FB | 	rdlong	local20, objptr
01f90     22 4D 02 F6 | 	mov	local24, local20
01f94     26 47 02 F6 | 	mov	local21, local24
01f98     23 49 02 F6 | 	mov	local22, local21
01f9c     03 48 66 F0 | 	shl	local22, #3
01fa0     26 00 00 FF 
01fa4     C8 E4 85 F1 | 	sub	objptr, ##19656
01fa8     F2 4E 02 F6 | 	mov	local25, objptr
01fac     F2 48 02 F1 | 	add	local22, objptr
01fb0     24 13 02 FB | 	rdlong	arg01, local22
01fb4     53 00 00 FF 
01fb8     E0 E5 85 F1 | 	sub	objptr, ##42976
01fbc     09 2D 02 F6 | 	mov	local08, arg01
01fc0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fc4                 | LR__0105
01fc4     16 FB C9 FA | 	rdbyte	result1, local08 wz
01fc8     01 2C 06 51 |  if_ne	add	local08, #1
01fcc     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd0                 | LR__0106
01fd0     09 2D 82 F1 | 	sub	local08, arg01
01fd4     16 37 02 F6 | 	mov	local13, local08
01fd8     1B 39 02 F6 | 	mov	local14, local13
01fdc     01 38 86 F1 | 	sub	local14, #1
01fe0     1C 33 02 F6 | 	mov	local11, local14
01fe4     1A 13 02 F6 | 	mov	arg01, local12
01fe8     19 15 02 F6 | 	mov	arg02, local11
01fec     78 8C B1 FD | 	call	#__system__Right_S
01ff0     14 FB 61 FC | 	wrlong	result1, local06
01ff4     7A 00 00 FF 
01ff8     A8 E4 05 F1 | 	add	objptr, ##62632
01ffc     F2 28 02 FB | 	rdlong	local06, objptr
02000     03 28 66 F0 | 	shl	local06, #3
02004     26 00 00 FF 
02008     C8 E4 85 F1 | 	sub	objptr, ##19656
0200c     F2 28 02 F1 | 	add	local06, objptr
02010     40 01 00 FF 
02014     B3 35 06 F6 | 	mov	local12, ##@LR__4352
02018     14 35 62 FC | 	wrlong	local12, local06
0201c     53 00 00 FF 
02020     E0 E5 85 F1 | 	sub	objptr, ##42976
02024                 | LR__0107
02024     7A 00 00 FF 
02028     A8 E4 05 F1 | 	add	objptr, ##62632
0202c     F2 28 02 FB | 	rdlong	local06, objptr
02030     03 28 66 F0 | 	shl	local06, #3
02034     26 00 00 FF 
02038     C8 E4 85 F1 | 	sub	objptr, ##19656
0203c     F2 28 02 F1 | 	add	local06, objptr
02040     14 35 02 FB | 	rdlong	local12, local06
02044     26 00 00 FF 
02048     CC E4 05 F1 | 	add	objptr, ##19660
0204c     F2 34 62 FC | 	wrlong	local12, objptr
02050                 | ' 
02050                 | ' ' process the case when simple load or save is called without ""
02050                 | ' 
02050                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02050     7A 00 00 FF 
02054     AC E4 85 F1 | 	sub	objptr, ##62636
02058     40 01 00 FF 
0205c     B5 15 06 F6 | 	mov	arg02, ##@LR__4353
02060     1A 13 02 F6 | 	mov	arg01, local12
02064     94 6B B1 FD | 	call	#__system___string_cmp
02068     00 FA 0D F2 | 	cmp	result1, #0 wz
0206c     50 00 90 AD |  if_e	jmp	#LR__0108
02070     7A 00 00 FF 
02074     AC E4 05 F1 | 	add	objptr, ##62636
02078     F2 12 02 FB | 	rdlong	arg01, objptr
0207c     7A 00 00 FF 
02080     AC E4 85 F1 | 	sub	objptr, ##62636
02084     40 01 00 FF 
02088     BB 15 06 F6 | 	mov	arg02, ##@LR__4354
0208c     6C 6B B1 FD | 	call	#__system___string_cmp
02090     00 FA 0D F2 | 	cmp	result1, #0 wz
02094     28 00 90 AD |  if_e	jmp	#LR__0108
02098     7A 00 00 FF 
0209c     AC E4 05 F1 | 	add	objptr, ##62636
020a0     F2 12 02 FB | 	rdlong	arg01, objptr
020a4     7A 00 00 FF 
020a8     AC E4 85 F1 | 	sub	objptr, ##62636
020ac     40 01 00 FF 
020b0     C2 15 06 F6 | 	mov	arg02, ##@LR__4355
020b4     44 6B B1 FD | 	call	#__system___string_cmp
020b8     00 FA 0D F2 | 	cmp	result1, #0 wz
020bc     94 01 90 5D |  if_ne	jmp	#LR__0111
020c0                 | LR__0108
020c0     7A 00 00 FF 
020c4     A8 E4 05 F1 | 	add	objptr, ##62632
020c8     F2 34 02 FB | 	rdlong	local12, objptr
020cc     01 34 06 F1 | 	add	local12, #1
020d0     1A 33 02 F6 | 	mov	local11, local12
020d4     03 32 66 F0 | 	shl	local11, #3
020d8     26 00 00 FF 
020dc     C8 E4 85 F1 | 	sub	objptr, ##19656
020e0     F2 38 02 F6 | 	mov	local14, objptr
020e4     F2 32 02 F1 | 	add	local11, objptr
020e8     04 32 06 F1 | 	add	local11, #4
020ec     19 4D 02 FB | 	rdlong	local24, local11
020f0     04 32 86 F1 | 	sub	local11, #4
020f4     26 37 02 F6 | 	mov	local13, local24
020f8     01 00 00 FF 
020fc     04 36 0E F2 | 	cmp	local13, ##516 wz
02100     53 00 00 FF 
02104     E0 E5 85 F1 | 	sub	objptr, ##42976
02108     48 01 90 5D |  if_ne	jmp	#LR__0111
0210c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
0210c     7A 00 00 FF 
02110     A8 E4 05 F1 | 	add	objptr, ##62632
02114     F2 2A 02 FB | 	rdlong	local07, objptr
02118     01 2A 06 F1 | 	add	local07, #1
0211c     03 2A 66 F0 | 	shl	local07, #3
02120     26 00 00 FF 
02124     C8 E4 85 F1 | 	sub	objptr, ##19656
02128     F2 2A 02 F1 | 	add	local07, objptr
0212c     15 13 02 FB | 	rdlong	arg01, local07
02130     40 01 00 FF 
02134     C8 15 06 F6 | 	mov	arg02, ##@LR__4356
02138     53 00 00 FF 
0213c     E0 E5 85 F1 | 	sub	objptr, ##42976
02140     B8 6A B1 FD | 	call	#__system___string_cmp
02144     00 FA 0D F2 | 	cmp	result1, #0 wz
02148     60 00 90 5D |  if_ne	jmp	#LR__0109
0214c     7A 00 00 FF 
02150     A8 E4 05 F1 | 	add	objptr, ##62632
02154     F2 28 02 FB | 	rdlong	local06, objptr
02158     01 28 06 F1 | 	add	local06, #1
0215c     03 28 66 F0 | 	shl	local06, #3
02160     26 00 00 FF 
02164     C8 E4 85 F1 | 	sub	objptr, ##19656
02168     F2 28 02 F1 | 	add	local06, objptr
0216c     40 01 00 FF 
02170     CB 35 06 F6 | 	mov	local12, ##@LR__4357
02174     14 35 62 FC | 	wrlong	local12, local06
02178     26 00 00 FF 
0217c     C8 E4 05 F1 | 	add	objptr, ##19656
02180     F2 28 02 FB | 	rdlong	local06, objptr
02184     01 28 06 F1 | 	add	local06, #1
02188     03 28 66 F0 | 	shl	local06, #3
0218c     26 00 00 FF 
02190     C8 E4 85 F1 | 	sub	objptr, ##19656
02194     F2 28 02 F1 | 	add	local06, objptr
02198     04 28 06 F1 | 	add	local06, #4
0219c     01 00 80 FF 
021a0     14 01 68 FC | 	wrlong	##512, local06
021a4     53 00 00 FF 
021a8     E0 E5 85 F1 | 	sub	objptr, ##42976
021ac                 | LR__0109
021ac                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021ac     7A 00 00 FF 
021b0     A8 E4 05 F1 | 	add	objptr, ##62632
021b4     F2 2A 02 FB | 	rdlong	local07, objptr
021b8     01 2A 06 F1 | 	add	local07, #1
021bc     03 2A 66 F0 | 	shl	local07, #3
021c0     26 00 00 FF 
021c4     C8 E4 85 F1 | 	sub	objptr, ##19656
021c8     F2 34 02 F6 | 	mov	local12, objptr
021cc     F2 2A 02 F1 | 	add	local07, objptr
021d0     15 13 02 FB | 	rdlong	arg01, local07
021d4     40 01 00 FF 
021d8     CD 15 06 F6 | 	mov	arg02, ##@LR__4358
021dc     53 00 00 FF 
021e0     E0 E5 85 F1 | 	sub	objptr, ##42976
021e4     14 6A B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     64 00 90 5D |  if_ne	jmp	#LR__0110
021f0     7A 00 00 FF 
021f4     A8 E4 05 F1 | 	add	objptr, ##62632
021f8     F2 28 02 FB | 	rdlong	local06, objptr
021fc     01 28 06 F1 | 	add	local06, #1
02200     03 28 66 F0 | 	shl	local06, #3
02204     26 00 00 FF 
02208     C8 E4 85 F1 | 	sub	objptr, ##19656
0220c     F2 28 02 F1 | 	add	local06, objptr
02210     40 01 00 FF 
02214     D1 35 06 F6 | 	mov	local12, ##@LR__4359
02218     14 35 62 FC | 	wrlong	local12, local06
0221c     26 00 00 FF 
02220     C8 E4 05 F1 | 	add	objptr, ##19656
02224     F2 28 02 FB | 	rdlong	local06, objptr
02228     01 28 06 F1 | 	add	local06, #1
0222c     03 28 66 F0 | 	shl	local06, #3
02230     26 00 00 FF 
02234     C8 E4 85 F1 | 	sub	objptr, ##19656
02238     F2 28 02 F1 | 	add	local06, objptr
0223c     09 34 C6 F9 | 	decod	local12, #9
02240     04 28 06 F1 | 	add	local06, #4
02244     01 00 80 FF 
02248     14 01 68 FC | 	wrlong	##512, local06
0224c     53 00 00 FF 
02250     E0 E5 85 F1 | 	sub	objptr, ##42976
02254                 | LR__0110
02254                 | LR__0111
02254                 | ' if (lp$="mode" orelse lp$="m.") then 
02254     7A 00 00 FF 
02258     AC E4 05 F1 | 	add	objptr, ##62636
0225c     F2 12 02 FB | 	rdlong	arg01, objptr
02260     7A 00 00 FF 
02264     AC E4 85 F1 | 	sub	objptr, ##62636
02268     40 01 00 FF 
0226c     D3 15 06 F6 | 	mov	arg02, ##@LR__4360
02270     88 69 B1 FD | 	call	#__system___string_cmp
02274     00 FA 0D F2 | 	cmp	result1, #0 wz
02278     28 00 90 AD |  if_e	jmp	#LR__0112
0227c     7A 00 00 FF 
02280     AC E4 05 F1 | 	add	objptr, ##62636
02284     F2 12 02 FB | 	rdlong	arg01, objptr
02288     7A 00 00 FF 
0228c     AC E4 85 F1 | 	sub	objptr, ##62636
02290     40 01 00 FF 
02294     D8 15 06 F6 | 	mov	arg02, ##@LR__4361
02298     60 69 B1 FD | 	call	#__system___string_cmp
0229c     00 FA 0D F2 | 	cmp	result1, #0 wz
022a0     48 02 90 5D |  if_ne	jmp	#LR__0118
022a4                 | LR__0112
022a4                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022a4     7A 00 00 FF 
022a8     A8 E4 05 F1 | 	add	objptr, ##62632
022ac     F2 2A 02 FB | 	rdlong	local07, objptr
022b0     01 2A 06 F1 | 	add	local07, #1
022b4     03 2A 66 F0 | 	shl	local07, #3
022b8     26 00 00 FF 
022bc     C8 E4 85 F1 | 	sub	objptr, ##19656
022c0     F2 2A 02 F1 | 	add	local07, objptr
022c4     15 13 02 FB | 	rdlong	arg01, local07
022c8     40 01 00 FF 
022cc     DB 15 06 F6 | 	mov	arg02, ##@LR__4362
022d0     53 00 00 FF 
022d4     E0 E5 85 F1 | 	sub	objptr, ##42976
022d8     20 69 B1 FD | 	call	#__system___string_cmp
022dc     00 FA 0D F2 | 	cmp	result1, #0 wz
022e0     34 00 90 5D |  if_ne	jmp	#LR__0113
022e4     7A 00 00 FF 
022e8     A8 E4 05 F1 | 	add	objptr, ##62632
022ec     F2 28 02 FB | 	rdlong	local06, objptr
022f0     01 28 06 F1 | 	add	local06, #1
022f4     03 28 66 F0 | 	shl	local06, #3
022f8     26 00 00 FF 
022fc     C8 E4 85 F1 | 	sub	objptr, ##19656
02300     F2 28 02 F1 | 	add	local06, objptr
02304     40 01 00 FF 
02308     E1 35 06 F6 | 	mov	local12, ##@LR__4363
0230c     14 35 62 FC | 	wrlong	local12, local06
02310     53 00 00 FF 
02314     E0 E5 85 F1 | 	sub	objptr, ##42976
02318                 | LR__0113
02318                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02318     7A 00 00 FF 
0231c     A8 E4 05 F1 | 	add	objptr, ##62632
02320     F2 2A 02 FB | 	rdlong	local07, objptr
02324     01 2A 06 F1 | 	add	local07, #1
02328     03 2A 66 F0 | 	shl	local07, #3
0232c     26 00 00 FF 
02330     C8 E4 85 F1 | 	sub	objptr, ##19656
02334     F2 2A 02 F1 | 	add	local07, objptr
02338     15 13 02 FB | 	rdlong	arg01, local07
0233c     40 01 00 FF 
02340     E3 15 06 F6 | 	mov	arg02, ##@LR__4364
02344     53 00 00 FF 
02348     E0 E5 85 F1 | 	sub	objptr, ##42976
0234c     AC 68 B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     34 00 90 5D |  if_ne	jmp	#LR__0114
02358     7A 00 00 FF 
0235c     A8 E4 05 F1 | 	add	objptr, ##62632
02360     F2 28 02 FB | 	rdlong	local06, objptr
02364     01 28 06 F1 | 	add	local06, #1
02368     03 28 66 F0 | 	shl	local06, #3
0236c     26 00 00 FF 
02370     C8 E4 85 F1 | 	sub	objptr, ##19656
02374     F2 28 02 F1 | 	add	local06, objptr
02378     40 01 00 FF 
0237c     EC 35 06 F6 | 	mov	local12, ##@LR__4365
02380     14 35 62 FC | 	wrlong	local12, local06
02384     53 00 00 FF 
02388     E0 E5 85 F1 | 	sub	objptr, ##42976
0238c                 | LR__0114
0238c                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
0238c     7A 00 00 FF 
02390     A8 E4 05 F1 | 	add	objptr, ##62632
02394     F2 2A 02 FB | 	rdlong	local07, objptr
02398     01 2A 06 F1 | 	add	local07, #1
0239c     03 2A 66 F0 | 	shl	local07, #3
023a0     26 00 00 FF 
023a4     C8 E4 85 F1 | 	sub	objptr, ##19656
023a8     F2 2A 02 F1 | 	add	local07, objptr
023ac     15 13 02 FB | 	rdlong	arg01, local07
023b0     40 01 00 FF 
023b4     EE 15 06 F6 | 	mov	arg02, ##@LR__4366
023b8     53 00 00 FF 
023bc     E0 E5 85 F1 | 	sub	objptr, ##42976
023c0     38 68 B1 FD | 	call	#__system___string_cmp
023c4     00 FA 0D F2 | 	cmp	result1, #0 wz
023c8     34 00 90 5D |  if_ne	jmp	#LR__0115
023cc     7A 00 00 FF 
023d0     A8 E4 05 F1 | 	add	objptr, ##62632
023d4     F2 28 02 FB | 	rdlong	local06, objptr
023d8     01 28 06 F1 | 	add	local06, #1
023dc     03 28 66 F0 | 	shl	local06, #3
023e0     26 00 00 FF 
023e4     C8 E4 85 F1 | 	sub	objptr, ##19656
023e8     F2 28 02 F1 | 	add	local06, objptr
023ec     40 01 00 FF 
023f0     F7 35 06 F6 | 	mov	local12, ##@LR__4367
023f4     14 35 62 FC | 	wrlong	local12, local06
023f8     53 00 00 FF 
023fc     E0 E5 85 F1 | 	sub	objptr, ##42976
02400                 | LR__0115
02400                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02400     7A 00 00 FF 
02404     A8 E4 05 F1 | 	add	objptr, ##62632
02408     F2 2A 02 FB | 	rdlong	local07, objptr
0240c     01 2A 06 F1 | 	add	local07, #1
02410     03 2A 66 F0 | 	shl	local07, #3
02414     26 00 00 FF 
02418     C8 E4 85 F1 | 	sub	objptr, ##19656
0241c     F2 2A 02 F1 | 	add	local07, objptr
02420     15 13 02 FB | 	rdlong	arg01, local07
02424     40 01 00 FF 
02428     F9 15 06 F6 | 	mov	arg02, ##@LR__4368
0242c     53 00 00 FF 
02430     E0 E5 85 F1 | 	sub	objptr, ##42976
02434     C4 67 B1 FD | 	call	#__system___string_cmp
02438     00 FA 0D F2 | 	cmp	result1, #0 wz
0243c     34 00 90 5D |  if_ne	jmp	#LR__0116
02440     7A 00 00 FF 
02444     A8 E4 05 F1 | 	add	objptr, ##62632
02448     F2 28 02 FB | 	rdlong	local06, objptr
0244c     01 28 06 F1 | 	add	local06, #1
02450     03 28 66 F0 | 	shl	local06, #3
02454     26 00 00 FF 
02458     C8 E4 85 F1 | 	sub	objptr, ##19656
0245c     F2 28 02 F1 | 	add	local06, objptr
02460     41 01 00 FF 
02464     02 34 06 F6 | 	mov	local12, ##@LR__4369
02468     14 35 62 FC | 	wrlong	local12, local06
0246c     53 00 00 FF 
02470     E0 E5 85 F1 | 	sub	objptr, ##42976
02474                 | LR__0116
02474                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02474     7A 00 00 FF 
02478     A8 E4 05 F1 | 	add	objptr, ##62632
0247c     F2 2A 02 FB | 	rdlong	local07, objptr
02480     01 2A 06 F1 | 	add	local07, #1
02484     03 2A 66 F0 | 	shl	local07, #3
02488     26 00 00 FF 
0248c     C8 E4 85 F1 | 	sub	objptr, ##19656
02490     F2 34 02 F6 | 	mov	local12, objptr
02494     F2 2A 02 F1 | 	add	local07, objptr
02498     15 13 02 FB | 	rdlong	arg01, local07
0249c     41 01 00 FF 
024a0     04 14 06 F6 | 	mov	arg02, ##@LR__4370
024a4     53 00 00 FF 
024a8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ac     4C 67 B1 FD | 	call	#__system___string_cmp
024b0     00 FA 0D F2 | 	cmp	result1, #0 wz
024b4     34 00 90 5D |  if_ne	jmp	#LR__0117
024b8     7A 00 00 FF 
024bc     A8 E4 05 F1 | 	add	objptr, ##62632
024c0     F2 28 02 FB | 	rdlong	local06, objptr
024c4     01 28 06 F1 | 	add	local06, #1
024c8     03 28 66 F0 | 	shl	local06, #3
024cc     26 00 00 FF 
024d0     C8 E4 85 F1 | 	sub	objptr, ##19656
024d4     F2 28 02 F1 | 	add	local06, objptr
024d8     41 01 00 FF 
024dc     07 34 06 F6 | 	mov	local12, ##@LR__4371
024e0     14 35 62 FC | 	wrlong	local12, local06
024e4     53 00 00 FF 
024e8     E0 E5 85 F1 | 	sub	objptr, ##42976
024ec                 | LR__0117
024ec                 | LR__0118
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' 
024ec                 | ' ' 2a find part types 
024ec                 | ' 
024ec                 | ' for i=0 to k-1
024ec     00 24 06 F6 | 	mov	local04, #0
024f0     1E 63 02 F6 | 	mov	local35, local16
024f4                 | LR__0119
024f4     31 25 52 F2 | 	cmps	local04, local35 wc
024f8     74 05 90 3D |  if_ae	jmp	#LR__0128
024fc     12 31 02 F6 | 	mov	local10, local04
02500     03 30 66 F0 | 	shl	local10, #3
02504     53 00 00 FF 
02508     E0 E5 05 F1 | 	add	objptr, ##42976
0250c     F2 30 02 F1 | 	add	local10, objptr
02510     12 37 02 F6 | 	mov	local13, local04
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 4C 02 F6 | 	mov	local24, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     1B 13 02 FB | 	rdlong	arg01, local13
02524     53 00 00 FF 
02528     E0 E5 85 F1 | 	sub	objptr, ##42976
0252c     60 0F B0 FD | 	call	#_isseparator
02530     FD FA E1 F8 | 	getbyte	result1, result1, #0
02534     04 30 06 F1 | 	add	local10, #4
02538     18 FB 61 FC | 	wrlong	result1, local10
0253c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
0253c     12 31 02 F6 | 	mov	local10, local04
02540     03 30 66 F0 | 	shl	local10, #3
02544     53 00 00 FF 
02548     E0 E5 05 F1 | 	add	objptr, ##42976
0254c     F2 30 02 F1 | 	add	local10, objptr
02550     04 30 06 F1 | 	add	local10, #4
02554     18 35 02 FB | 	rdlong	local12, local10
02558     01 34 56 F2 | 	cmps	local12, #1 wc
0255c     53 00 00 FF 
02560     E0 E5 85 F1 | 	sub	objptr, ##42976
02564     00 05 90 3D |  if_ae	jmp	#LR__0127
02568     12 31 02 F6 | 	mov	local10, local04
0256c     03 30 66 F0 | 	shl	local10, #3
02570     53 00 00 FF 
02574     E0 E5 05 F1 | 	add	objptr, ##42976
02578     F2 30 02 F1 | 	add	local10, objptr
0257c     12 37 02 F6 | 	mov	local13, local04
02580     03 36 66 F0 | 	shl	local13, #3
02584     F2 4C 02 F6 | 	mov	local24, objptr
02588     F2 36 02 F1 | 	add	local13, objptr
0258c     1B 13 02 FB | 	rdlong	arg01, local13
02590     53 00 00 FF 
02594     E0 E5 85 F1 | 	sub	objptr, ##42976
02598     14 0C B0 FD | 	call	#_isoperator
0259c     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a0     04 30 06 F1 | 	add	local10, #4
025a4     18 FB 61 FC | 	wrlong	result1, local10
025a8                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025a8     12 31 02 F6 | 	mov	local10, local04
025ac     03 30 66 F0 | 	shl	local10, #3
025b0     53 00 00 FF 
025b4     E0 E5 05 F1 | 	add	objptr, ##42976
025b8     F2 30 02 F1 | 	add	local10, objptr
025bc     04 30 06 F1 | 	add	local10, #4
025c0     18 35 02 FB | 	rdlong	local12, local10
025c4     01 34 56 F2 | 	cmps	local12, #1 wc
025c8     53 00 00 FF 
025cc     E0 E5 85 F1 | 	sub	objptr, ##42976
025d0     94 04 90 3D |  if_ae	jmp	#LR__0127
025d4     12 31 02 F6 | 	mov	local10, local04
025d8     03 30 66 F0 | 	shl	local10, #3
025dc     53 00 00 FF 
025e0     E0 E5 05 F1 | 	add	objptr, ##42976
025e4     F2 30 02 F1 | 	add	local10, objptr
025e8     12 37 02 F6 | 	mov	local13, local04
025ec     03 36 66 F0 | 	shl	local13, #3
025f0     F2 4C 02 F6 | 	mov	local24, objptr
025f4     F2 36 02 F1 | 	add	local13, objptr
025f8     1B 13 02 FB | 	rdlong	arg01, local13
025fc     53 00 00 FF 
02600     E0 E5 85 F1 | 	sub	objptr, ##42976
02604                 | ' 
02604                 | ' select case s
02604     41 01 00 FF 
02608     BD 14 06 F6 | 	mov	arg02, ##@LR__4424
0260c     EC 65 B1 FD | 	call	#__system___string_cmp
02610     00 FA 0D F2 | 	cmp	result1, #0 wz
02614     1B FA 05 A6 |  if_e	mov	result1, #27
02618     00 FA 05 56 |  if_ne	mov	result1, #0
0261c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02620     04 30 06 F1 | 	add	local10, #4
02624     18 FB 61 FC | 	wrlong	result1, local10
02628                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02628     12 31 02 F6 | 	mov	local10, local04
0262c     03 30 66 F0 | 	shl	local10, #3
02630     53 00 00 FF 
02634     E0 E5 05 F1 | 	add	objptr, ##42976
02638     F2 30 02 F1 | 	add	local10, objptr
0263c     04 30 06 F1 | 	add	local10, #4
02640     18 35 02 FB | 	rdlong	local12, local10
02644     01 34 56 F2 | 	cmps	local12, #1 wc
02648     53 00 00 FF 
0264c     E0 E5 85 F1 | 	sub	objptr, ##42976
02650     14 04 90 3D |  if_ae	jmp	#LR__0127
02654     12 31 02 F6 | 	mov	local10, local04
02658     03 30 66 F0 | 	shl	local10, #3
0265c     53 00 00 FF 
02660     E0 E5 05 F1 | 	add	objptr, ##42976
02664     F2 30 02 F1 | 	add	local10, objptr
02668     12 37 02 F6 | 	mov	local13, local04
0266c     03 36 66 F0 | 	shl	local13, #3
02670     F2 4C 02 F6 | 	mov	local24, objptr
02674     F2 36 02 F1 | 	add	local13, objptr
02678     1B 13 02 FB | 	rdlong	arg01, local13
0267c     53 00 00 FF 
02680     E0 E5 85 F1 | 	sub	objptr, ##42976
02684     08 10 B0 FD | 	call	#_iscommand
02688     FD FA E1 F8 | 	getbyte	result1, result1, #0
0268c     04 30 06 F1 | 	add	local10, #4
02690     18 FB 61 FC | 	wrlong	result1, local10
02694                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02694     12 31 02 F6 | 	mov	local10, local04
02698     03 30 66 F0 | 	shl	local10, #3
0269c     53 00 00 FF 
026a0     E0 E5 05 F1 | 	add	objptr, ##42976
026a4     F2 30 02 F1 | 	add	local10, objptr
026a8     04 30 06 F1 | 	add	local10, #4
026ac     18 35 02 FB | 	rdlong	local12, local10
026b0     01 34 56 F2 | 	cmps	local12, #1 wc
026b4     53 00 00 FF 
026b8     E0 E5 85 F1 | 	sub	objptr, ##42976
026bc     A8 03 90 3D |  if_ae	jmp	#LR__0127
026c0     12 31 02 F6 | 	mov	local10, local04
026c4     03 30 66 F0 | 	shl	local10, #3
026c8     53 00 00 FF 
026cc     E0 E5 05 F1 | 	add	objptr, ##42976
026d0     F2 30 02 F1 | 	add	local10, objptr
026d4     12 33 02 F6 | 	mov	local11, local04
026d8     19 39 02 F6 | 	mov	local14, local11
026dc     1C 37 02 F6 | 	mov	local13, local14
026e0     03 36 66 F0 | 	shl	local13, #3
026e4     F2 4C 02 F6 | 	mov	local24, objptr
026e8     F2 36 02 F1 | 	add	local13, objptr
026ec     1B 13 02 FB | 	rdlong	arg01, local13
026f0     53 00 00 FF 
026f4     E0 E5 85 F1 | 	sub	objptr, ##42976
026f8     14 19 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 30 06 F1 | 	add	local10, #4
02704     18 FB 61 FC | 	wrlong	result1, local10
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     12 31 02 F6 | 	mov	local10, local04
0270c     03 30 66 F0 | 	shl	local10, #3
02710     53 00 00 FF 
02714     E0 E5 05 F1 | 	add	objptr, ##42976
02718     F2 30 02 F1 | 	add	local10, objptr
0271c     04 30 06 F1 | 	add	local10, #4
02720     18 35 02 FB | 	rdlong	local12, local10
02724     01 34 56 F2 | 	cmps	local12, #1 wc
02728     53 00 00 FF 
0272c     E0 E5 85 F1 | 	sub	objptr, ##42976
02730     34 03 90 3D |  if_ae	jmp	#LR__0127
02734     12 29 02 F6 | 	mov	local06, local04
02738     03 28 66 F0 | 	shl	local06, #3
0273c     53 00 00 FF 
02740     E0 E5 05 F1 | 	add	objptr, ##42976
02744     F2 28 02 F1 | 	add	local06, objptr
02748     14 13 02 FB | 	rdlong	arg01, local06
0274c     53 00 00 FF 
02750     E0 E5 85 F1 | 	sub	objptr, ##42976
02754     CC 1D B0 FD | 	call	#_isnum
02758     FD 1E 02 F6 | 	mov	local01, result1
0275c     7A 00 00 FF 
02760     B4 E4 05 F1 | 	add	objptr, ##62644
02764     F2 1E 62 FC | 	wrlong	local01, objptr
02768     12 29 02 F6 | 	mov	local06, local04
0276c     03 28 66 F0 | 	shl	local06, #3
02770     26 00 00 FF 
02774     D4 E4 85 F1 | 	sub	objptr, ##19668
02778     F2 28 02 F1 | 	add	local06, objptr
0277c     14 13 02 FB | 	rdlong	arg01, local06
02780     53 00 00 FF 
02784     E0 E5 85 F1 | 	sub	objptr, ##42976
02788     70 20 B0 FD | 	call	#_isint
0278c     FD 1E 02 F6 | 	mov	local01, result1
02790     7A 00 00 FF 
02794     B8 E4 05 F1 | 	add	objptr, ##62648
02798     F2 1E 62 FC | 	wrlong	local01, objptr
0279c     12 29 02 F6 | 	mov	local06, local04
027a0     03 28 66 F0 | 	shl	local06, #3
027a4     26 00 00 FF 
027a8     D8 E4 85 F1 | 	sub	objptr, ##19672
027ac     F2 2A 02 F6 | 	mov	local07, objptr
027b0     F2 28 02 F1 | 	add	local06, objptr
027b4     14 13 02 FB | 	rdlong	arg01, local06
027b8     53 00 00 FF 
027bc     E0 E5 85 F1 | 	sub	objptr, ##42976
027c0     90 21 B0 FD | 	call	#_isdec
027c4     7A 00 00 FF 
027c8     BC E4 05 F1 | 	add	objptr, ##62652
027cc     F2 FA 61 FC | 	wrlong	result1, objptr
027d0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
027d0     08 E4 85 F1 | 	sub	objptr, #8
027d4     F2 1E 0A FB | 	rdlong	local01, objptr wz
027d8     7A 00 00 FF 
027dc     B4 E4 85 F1 | 	sub	objptr, ##62644
027e0     60 00 90 AD |  if_e	jmp	#LR__0120
027e4     7A 00 00 FF 
027e8     B8 E4 05 F1 | 	add	objptr, ##62648
027ec     F2 30 0A FB | 	rdlong	local10, objptr wz
027f0     7A 00 00 FF 
027f4     B8 E4 85 F1 | 	sub	objptr, ##62648
027f8     48 00 90 AD |  if_e	jmp	#LR__0120
027fc     7A 00 00 FF 
02800     BC E4 05 F1 | 	add	objptr, ##62652
02804     F2 34 0A FB | 	rdlong	local12, objptr wz
02808     7A 00 00 FF 
0280c     BC E4 85 F1 | 	sub	objptr, ##62652
02810     30 00 90 AD |  if_e	jmp	#LR__0120
02814     12 27 02 F6 | 	mov	local05, local04
02818     13 31 02 F6 | 	mov	local10, local05
0281c     03 30 66 F0 | 	shl	local10, #3
02820     53 00 00 FF 
02824     E0 E5 05 F1 | 	add	objptr, ##42976
02828     F2 30 02 F1 | 	add	local10, objptr
0282c     04 30 06 F1 | 	add	local10, #4
02830     01 00 80 FF 
02834     18 01 68 FC | 	wrlong	##512, local10
02838     53 00 00 FF 
0283c     E0 E5 85 F1 | 	sub	objptr, ##42976
02840     24 02 90 FD | 	jmp	#LR__0127
02844                 | LR__0120
02844                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02844     7A 00 00 FF 
02848     B4 E4 05 F1 | 	add	objptr, ##62644
0284c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02850     7A 00 00 FF 
02854     B4 E4 85 F1 | 	sub	objptr, ##62644
02858     64 00 90 AD |  if_e	jmp	#LR__0121
0285c     7A 00 00 FF 
02860     B8 E4 05 F1 | 	add	objptr, ##62648
02864     F2 30 0A FB | 	rdlong	local10, objptr wz
02868     7A 00 00 FF 
0286c     B8 E4 85 F1 | 	sub	objptr, ##62648
02870     7A 00 00 5F 
02874     BC E4 05 51 |  if_ne	add	objptr, ##62652
02878     F2 34 02 5B |  if_ne	rdlong	local12, objptr
0287c     7A 00 00 5F 
02880     BC E4 85 51 |  if_ne	sub	objptr, ##62652
02884     1A 2B 22 56 |  if_ne	not	local07, local12
02888     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0288c     30 00 90 AD |  if_e	jmp	#LR__0121
02890     12 27 02 F6 | 	mov	local05, local04
02894     13 31 02 F6 | 	mov	local10, local05
02898     03 30 66 F0 | 	shl	local10, #3
0289c     53 00 00 FF 
028a0     E0 E5 05 F1 | 	add	objptr, ##42976
028a4     F2 30 02 F1 | 	add	local10, objptr
028a8     04 30 06 F1 | 	add	local10, #4
028ac     01 00 80 FF 
028b0     18 03 68 FC | 	wrlong	##513, local10
028b4     53 00 00 FF 
028b8     E0 E5 85 F1 | 	sub	objptr, ##42976
028bc     A8 01 90 FD | 	jmp	#LR__0127
028c0                 | LR__0121
028c0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
028c0     7A 00 00 FF 
028c4     B4 E4 05 F1 | 	add	objptr, ##62644
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7A 00 00 FF 
028d0     B4 E4 85 F1 | 	sub	objptr, ##62644
028d4     7A 00 00 5F 
028d8     B8 E4 05 51 |  if_ne	add	objptr, ##62648
028dc     F2 30 02 5B |  if_ne	rdlong	local10, objptr
028e0     7A 00 00 5F 
028e4     B8 E4 85 51 |  if_ne	sub	objptr, ##62648
028e8     18 31 22 56 |  if_ne	not	local10, local10
028ec     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
028f0     7A 00 00 5F 
028f4     BC E4 05 51 |  if_ne	add	objptr, ##62652
028f8     F2 34 02 5B |  if_ne	rdlong	local12, objptr
028fc     7A 00 00 5F 
02900     BC E4 85 51 |  if_ne	sub	objptr, ##62652
02904     1A 2B 22 56 |  if_ne	not	local07, local12
02908     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
0290c     30 00 90 AD |  if_e	jmp	#LR__0122
02910     12 27 02 F6 | 	mov	local05, local04
02914     13 31 02 F6 | 	mov	local10, local05
02918     03 30 66 F0 | 	shl	local10, #3
0291c     53 00 00 FF 
02920     E0 E5 05 F1 | 	add	objptr, ##42976
02924     F2 30 02 F1 | 	add	local10, objptr
02928     04 30 06 F1 | 	add	local10, #4
0292c     01 00 80 FF 
02930     18 05 68 FC | 	wrlong	##514, local10
02934     53 00 00 FF 
02938     E0 E5 85 F1 | 	sub	objptr, ##42976
0293c     28 01 90 FD | 	jmp	#LR__0127
02940                 | LR__0122
02940                 | ' 
02940                 | ' if isstring(lparts(i).part$) then 
02940     12 29 02 F6 | 	mov	local06, local04
02944     03 28 66 F0 | 	shl	local06, #3
02948     53 00 00 FF 
0294c     E0 E5 05 F1 | 	add	objptr, ##42976
02950     F2 28 02 F1 | 	add	local06, objptr
02954     14 13 02 FB | 	rdlong	arg01, local06
02958     53 00 00 FF 
0295c     E0 E5 85 F1 | 	sub	objptr, ##42976
02960     B0 20 B0 FD | 	call	#_isstring
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     A0 00 90 AD |  if_e	jmp	#LR__0125
0296c     12 31 02 F6 | 	mov	local10, local04
02970     03 30 66 F0 | 	shl	local10, #3
02974     53 00 00 FF 
02978     E0 E5 05 F1 | 	add	objptr, ##42976
0297c     F2 30 02 F1 | 	add	local10, objptr
02980     04 30 06 F1 | 	add	local10, #4
02984     01 00 80 FF 
02988     18 07 68 FC | 	wrlong	##515, local10
0298c     12 27 02 F6 | 	mov	local05, local04
02990     13 31 02 F6 | 	mov	local10, local05
02994     03 30 66 F0 | 	shl	local10, #3
02998     F2 30 02 F1 | 	add	local10, objptr
0299c     12 39 02 F6 | 	mov	local14, local04
029a0     03 38 66 F0 | 	shl	local14, #3
029a4     F2 38 02 F1 | 	add	local14, objptr
029a8     1C 2B 02 FB | 	rdlong	local07, local14
029ac     02 34 06 F6 | 	mov	local12, #2
029b0     12 4D 02 F6 | 	mov	local24, local04
029b4     26 45 02 F6 | 	mov	local20, local24
029b8     22 47 02 F6 | 	mov	local21, local20
029bc     03 46 66 F0 | 	shl	local21, #3
029c0     F2 48 02 F6 | 	mov	local22, objptr
029c4     F2 46 02 F1 | 	add	local21, objptr
029c8     23 13 02 FB | 	rdlong	arg01, local21
029cc     53 00 00 FF 
029d0     E0 E5 85 F1 | 	sub	objptr, ##42976
029d4     09 2D 02 F6 | 	mov	local08, arg01
029d8     97 06 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
029dc                 | LR__0123
029dc     16 FB C9 FA | 	rdbyte	result1, local08 wz
029e0     01 2C 06 51 |  if_ne	add	local08, #1
029e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0123
029e8                 | LR__0124
029e8     09 2D 82 F1 | 	sub	local08, arg01
029ec     16 37 02 F6 | 	mov	local13, local08
029f0     1B 17 02 F6 | 	mov	arg03, local13
029f4     02 16 86 F1 | 	sub	arg03, #2
029f8     15 13 02 F6 | 	mov	arg01, local07
029fc     1A 15 02 F6 | 	mov	arg02, local12
02a00     F4 82 B1 FD | 	call	#__system__Mid_S
02a04     18 FB 61 FC | 	wrlong	result1, local10
02a08     5C 00 90 FD | 	jmp	#LR__0127
02a0c                 | LR__0125
02a0c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02a0c     12 27 02 F6 | 	mov	local05, local04
02a10     13 29 02 F6 | 	mov	local06, local05
02a14     03 28 66 F0 | 	shl	local06, #3
02a18     53 00 00 FF 
02a1c     E0 E5 05 F1 | 	add	objptr, ##42976
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     14 13 02 FB | 	rdlong	arg01, local06
02a28     53 00 00 FF 
02a2c     E0 E5 85 F1 | 	sub	objptr, ##42976
02a30     7C 18 B0 FD | 	call	#_isname
02a34     00 FA 0D F2 | 	cmp	result1, #0 wz
02a38     2C 00 90 AD |  if_e	jmp	#LR__0126
02a3c     12 27 02 F6 | 	mov	local05, local04
02a40     13 31 02 F6 | 	mov	local10, local05
02a44     03 30 66 F0 | 	shl	local10, #3
02a48     53 00 00 FF 
02a4c     E0 E5 05 F1 | 	add	objptr, ##42976
02a50     F2 30 02 F1 | 	add	local10, objptr
02a54     04 30 06 F1 | 	add	local10, #4
02a58     01 00 80 FF 
02a5c     18 09 68 FC | 	wrlong	##516, local10
02a60     53 00 00 FF 
02a64     E0 E5 85 F1 | 	sub	objptr, ##42976
02a68                 | LR__0126
02a68                 | LR__0127
02a68     01 24 06 F1 | 	add	local04, #1
02a6c     84 FA 9F FD | 	jmp	#LR__0119
02a70                 | LR__0128
02a70     1E 31 02 F6 | 	mov	local10, local16
02a74     03 30 66 F0 | 	shl	local10, #3
02a78     53 00 00 FF 
02a7c     E0 E5 05 F1 | 	add	objptr, ##42976
02a80     F2 30 02 F1 | 	add	local10, objptr
02a84     04 30 06 F1 | 	add	local10, #4
02a88     18 FD 6B FC | 	wrlong	#510, local10
02a8c     1E 31 02 F6 | 	mov	local10, local16
02a90     03 30 66 F0 | 	shl	local10, #3
02a94     F2 28 02 F6 | 	mov	local06, objptr
02a98     F2 30 02 F1 | 	add	local10, objptr
02a9c     41 01 00 FF 
02aa0     09 2A 06 F6 | 	mov	local07, ##@LR__4372
02aa4     18 2B 62 FC | 	wrlong	local07, local10
02aa8     10 00 00 FF 
02aac     54 E4 05 F1 | 	add	objptr, ##8276
02ab0     F2 3C 62 FC | 	wrlong	local16, objptr
02ab4                 | ' 
02ab4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ab4                 | ' 
02ab4                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ab4                 | '  
02ab4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ab4     16 00 00 FF 
02ab8     78 E4 05 F1 | 	add	objptr, ##11384
02abc     F2 12 02 FB | 	rdlong	arg01, objptr
02ac0     7A 00 00 FF 
02ac4     AC E4 85 F1 | 	sub	objptr, ##62636
02ac8     41 01 00 FF 
02acc     0A 30 06 F6 | 	mov	local10, ##@LR__4373
02ad0     18 15 02 F6 | 	mov	arg02, local10
02ad4     24 61 B1 FD | 	call	#__system___string_cmp
02ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
02adc     EC 00 90 AD |  if_e	jmp	#LR__0129
02ae0     7A 00 00 FF 
02ae4     AC E4 05 F1 | 	add	objptr, ##62636
02ae8     F2 12 02 FB | 	rdlong	arg01, objptr
02aec     7A 00 00 FF 
02af0     AC E4 85 F1 | 	sub	objptr, ##62636
02af4     41 01 00 FF 
02af8     0F 28 06 F6 | 	mov	local06, ##@LR__4374
02afc     14 31 02 F6 | 	mov	local10, local06
02b00     18 15 02 F6 | 	mov	arg02, local10
02b04     F4 60 B1 FD | 	call	#__system___string_cmp
02b08     00 FA 0D F2 | 	cmp	result1, #0 wz
02b0c     BC 00 90 AD |  if_e	jmp	#LR__0129
02b10     7A 00 00 FF 
02b14     AC E4 05 F1 | 	add	objptr, ##62636
02b18     F2 12 02 FB | 	rdlong	arg01, objptr
02b1c     7A 00 00 FF 
02b20     AC E4 85 F1 | 	sub	objptr, ##62636
02b24     41 01 00 FF 
02b28     14 2A 06 F6 | 	mov	local07, ##@LR__4375
02b2c     15 29 02 F6 | 	mov	local06, local07
02b30     14 15 02 F6 | 	mov	arg02, local06
02b34     C4 60 B1 FD | 	call	#__system___string_cmp
02b38     FD 30 0A F6 | 	mov	local10, result1 wz
02b3c     8C 00 90 AD |  if_e	jmp	#LR__0129
02b40     7A 00 00 FF 
02b44     AC E4 05 F1 | 	add	objptr, ##62636
02b48     F2 12 02 FB | 	rdlong	arg01, objptr
02b4c     7A 00 00 FF 
02b50     AC E4 85 F1 | 	sub	objptr, ##62636
02b54     41 01 00 FF 
02b58     19 34 06 F6 | 	mov	local12, ##@LR__4376
02b5c     1A 2B 02 F6 | 	mov	local07, local12
02b60     15 15 02 F6 | 	mov	arg02, local07
02b64     94 60 B1 FD | 	call	#__system___string_cmp
02b68     FD 28 0A F6 | 	mov	local06, result1 wz
02b6c     5C 00 90 AD |  if_e	jmp	#LR__0129
02b70     7A 00 00 FF 
02b74     AC E4 05 F1 | 	add	objptr, ##62636
02b78     F2 12 02 FB | 	rdlong	arg01, objptr
02b7c     7A 00 00 FF 
02b80     AC E4 85 F1 | 	sub	objptr, ##62636
02b84     41 01 00 FF 
02b88     1D 34 06 F6 | 	mov	local12, ##@LR__4377
02b8c     1A 15 02 F6 | 	mov	arg02, local12
02b90     68 60 B1 FD | 	call	#__system___string_cmp
02b94     FD 2A 0A F6 | 	mov	local07, result1 wz
02b98     30 00 90 AD |  if_e	jmp	#LR__0129
02b9c     7A 00 00 FF 
02ba0     AC E4 05 F1 | 	add	objptr, ##62636
02ba4     F2 12 02 FB | 	rdlong	arg01, objptr
02ba8     7A 00 00 FF 
02bac     AC E4 85 F1 | 	sub	objptr, ##62636
02bb0     41 01 00 FF 
02bb4     20 38 06 F6 | 	mov	local14, ##@LR__4378
02bb8     1C 33 02 F6 | 	mov	local11, local14
02bbc     19 15 02 F6 | 	mov	arg02, local11
02bc0     38 60 B1 FD | 	call	#__system___string_cmp
02bc4     FD 34 0A F6 | 	mov	local12, result1 wz
02bc8     9C 00 90 5D |  if_ne	jmp	#LR__0130
02bcc                 | LR__0129
02bcc     7A 00 00 FF 
02bd0     A8 E4 05 F1 | 	add	objptr, ##62632
02bd4     F2 38 02 FB | 	rdlong	local14, objptr
02bd8     1C 33 02 F6 | 	mov	local11, local14
02bdc     01 32 06 F1 | 	add	local11, #1
02be0     19 37 02 F6 | 	mov	local13, local11
02be4     1B 4D 02 F6 | 	mov	local24, local13
02be8     03 4C 66 F0 | 	shl	local24, #3
02bec     26 00 00 FF 
02bf0     C8 E4 85 F1 | 	sub	objptr, ##19656
02bf4     F2 44 02 F6 | 	mov	local20, objptr
02bf8     F2 4C 02 F1 | 	add	local24, objptr
02bfc     04 4C 06 F1 | 	add	local24, #4
02c00     26 49 02 FB | 	rdlong	local22, local24
02c04     04 4C 86 F1 | 	sub	local24, #4
02c08     24 47 02 F6 | 	mov	local21, local22
02c0c     01 00 00 FF 
02c10     04 46 0E F2 | 	cmp	local21, ##516 wz
02c14     53 00 00 FF 
02c18     E0 E5 85 F1 | 	sub	objptr, ##42976
02c1c     48 00 90 5D |  if_ne	jmp	#LR__0130
02c20     7A 00 00 FF 
02c24     A8 E4 05 F1 | 	add	objptr, ##62632
02c28     F2 30 02 FB | 	rdlong	local10, objptr
02c2c     01 30 06 F1 | 	add	local10, #1
02c30     18 29 02 F6 | 	mov	local06, local10
02c34     03 28 66 F0 | 	shl	local06, #3
02c38     26 00 00 FF 
02c3c     C8 E4 85 F1 | 	sub	objptr, ##19656
02c40     F2 2A 02 F6 | 	mov	local07, objptr
02c44     F2 28 02 F1 | 	add	local06, objptr
02c48     01 00 00 FF 
02c4c     03 34 06 F6 | 	mov	local12, ##515
02c50     04 28 06 F1 | 	add	local06, #4
02c54     01 00 80 FF 
02c58     14 07 68 FC | 	wrlong	##515, local06
02c5c     04 28 86 F1 | 	sub	local06, #4
02c60     53 00 00 FF 
02c64     E0 E5 85 F1 | 	sub	objptr, ##42976
02c68                 | LR__0130
02c68                 | ' 
02c68                 | ' ' abbreviated command has to be at the position addptr
02c68                 | ' 
02c68                 | ' 
02c68                 | ' 
02c68                 | ' '2b determine a type of the line
02c68                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02c68     53 00 00 FF 
02c6c     E0 E5 05 F1 | 	add	objptr, ##42976
02c70     F2 12 02 FB | 	rdlong	arg01, objptr
02c74     53 00 00 FF 
02c78     E0 E5 85 F1 | 	sub	objptr, ##42976
02c7c     D4 1C B0 FD | 	call	#_isdec
02c80     00 FA 0D F2 | 	cmp	result1, #0 wz
02c84     20 00 90 AD |  if_e	jmp	#LR__0131
02c88     53 00 00 FF 
02c8c     E0 E5 05 F1 | 	add	objptr, ##42976
02c90     F2 12 02 FB | 	rdlong	arg01, objptr
02c94     53 00 00 FF 
02c98     E0 E5 85 F1 | 	sub	objptr, ##42976
02c9c     00 14 06 F6 | 	mov	arg02, #0
02ca0     90 90 B1 FD | 	call	#__system____builtin_atoi
02ca4     FD 20 02 F6 | 	mov	local02, result1
02ca8                 | LR__0131
02ca8                 | ' 
02ca8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02ca8     01 20 16 F2 | 	cmp	local02, #1 wc
02cac     2C 00 90 CD |  if_b	jmp	#LR__0132
02cb0     01 3C 0E F2 | 	cmp	local16, #1 wz
02cb4     55 00 00 AF 
02cb8     F8 E5 05 A1 |  if_e	add	objptr, ##44024
02cbc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
02cc0     55 00 00 AF 
02cc4     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
02cc8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02ccc     0C 00 90 5D |  if_ne	jmp	#LR__0132
02cd0     10 13 02 F6 | 	mov	arg01, local02
02cd4     A0 1D B0 FD | 	call	#_deleteline
02cd8     C8 04 90 FD | 	jmp	#LR__0148
02cdc                 | LR__0132
02cdc                 | ' 
02cdc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02cdc     01 20 16 F2 | 	cmp	local02, #1 wc
02ce0     E0 00 90 CD |  if_b	jmp	#LR__0135
02ce4     55 00 00 FF 
02ce8     F8 E5 05 F1 | 	add	objptr, ##44024
02cec     F2 1E 0A FB | 	rdlong	local01, objptr wz
02cf0     55 00 00 FF 
02cf4     F8 E5 85 F1 | 	sub	objptr, ##44024
02cf8     20 00 90 AD |  if_e	jmp	#LR__0133
02cfc     55 00 00 FF 
02d00     F8 E5 05 F1 | 	add	objptr, ##44024
02d04     F2 28 02 FB | 	rdlong	local06, objptr
02d08     55 00 00 FF 
02d0c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d10     14 31 02 F6 | 	mov	local10, local06
02d14     03 30 0E F2 | 	cmp	local10, #3 wz
02d18     A8 00 90 5D |  if_ne	jmp	#LR__0135
02d1c                 | LR__0133
02d1c     53 00 00 FF 
02d20     F4 E5 05 F1 | 	add	objptr, ##42996
02d24     F2 34 02 FB | 	rdlong	local12, objptr
02d28     53 00 00 FF 
02d2c     F4 E5 85 F1 | 	sub	objptr, ##42996
02d30     1A 2B 02 F6 | 	mov	local07, local12
02d34     1B 2A 0E F2 | 	cmp	local07, #27 wz
02d38     88 00 90 AD |  if_e	jmp	#LR__0135
02d3c     55 00 00 FF 
02d40     F8 E5 05 F1 | 	add	objptr, ##44024
02d44     F2 16 02 FB | 	rdlong	arg03, objptr
02d48     55 00 00 FF 
02d4c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d50     10 13 02 F6 | 	mov	arg01, local02
02d54     00 14 06 F6 | 	mov	arg02, #0
02d58     E0 2F B0 FD | 	call	#_compile
02d5c     FD 22 0A F6 | 	mov	local03, result1 wz
02d60                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02d60                 | '   if err<>0 then printerror(err): goto 104
02d60     0C 00 90 AD |  if_e	jmp	#LR__0134
02d64     11 13 02 F6 | 	mov	arg01, local03
02d68     44 29 B1 FD | 	call	#_printerror
02d6c     34 04 90 FD | 	jmp	#LR__0148
02d70                 | LR__0134
02d70                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02d70     7A 00 00 FF 
02d74     84 E4 05 F1 | 	add	objptr, ##62596
02d78     F2 12 02 FB | 	rdlong	arg01, objptr
02d7c     7A 00 00 FF 
02d80     84 E4 85 F1 | 	sub	objptr, ##62596
02d84     41 01 00 FF 
02d88     24 14 06 F6 | 	mov	arg02, ##@LR__4379
02d8c     6C 5E B1 FD | 	call	#__system___string_cmp
02d90     00 FA 0D F2 | 	cmp	result1, #0 wz
02d94     0C 04 90 AD |  if_e	jmp	#LR__0148
02d98     7A 00 00 FF 
02d9c     84 E4 05 F1 | 	add	objptr, ##62596
02da0     F2 1E 02 FB | 	rdlong	local01, objptr
02da4     24 00 00 FF 
02da8     94 E4 85 F1 | 	sub	objptr, ##18580
02dac     F2 1E 62 FC | 	wrlong	local01, objptr
02db0     08 E4 05 F1 | 	add	objptr, #8
02db4     F2 08 68 FC | 	wrlong	#4, objptr
02db8     55 00 00 FF 
02dbc     F8 E5 85 F1 | 	sub	objptr, ##44024
02dc0     A4 DC 9F FD | 	jmp	#LR__0020
02dc4                 | LR__0135
02dc4                 | '       							
02dc4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02dc4     01 20 16 F2 | 	cmp	local02, #1 wc
02dc8     E4 00 90 CD |  if_b	jmp	#LR__0138
02dcc     55 00 00 FF 
02dd0     F8 E5 05 F1 | 	add	objptr, ##44024
02dd4     F2 1E 02 FB | 	rdlong	local01, objptr
02dd8     55 00 00 FF 
02ddc     F8 E5 85 F1 | 	sub	objptr, ##44024
02de0     01 1E 0E F2 | 	cmp	local01, #1 wz
02de4     20 00 90 AD |  if_e	jmp	#LR__0136
02de8     55 00 00 FF 
02dec     F8 E5 05 F1 | 	add	objptr, ##44024
02df0     F2 28 02 FB | 	rdlong	local06, objptr
02df4     55 00 00 FF 
02df8     F8 E5 85 F1 | 	sub	objptr, ##44024
02dfc     14 31 02 F6 | 	mov	local10, local06
02e00     02 30 0E F2 | 	cmp	local10, #2 wz
02e04     A8 00 90 5D |  if_ne	jmp	#LR__0138
02e08                 | LR__0136
02e08     53 00 00 FF 
02e0c     EC E5 05 F1 | 	add	objptr, ##42988
02e10     F2 34 02 FB | 	rdlong	local12, objptr
02e14     53 00 00 FF 
02e18     EC E5 85 F1 | 	sub	objptr, ##42988
02e1c     1A 2B 02 F6 | 	mov	local07, local12
02e20     1B 2A 0E F2 | 	cmp	local07, #27 wz
02e24     88 00 90 AD |  if_e	jmp	#LR__0138
02e28     55 00 00 FF 
02e2c     F8 E5 05 F1 | 	add	objptr, ##44024
02e30     F2 16 02 FB | 	rdlong	arg03, objptr
02e34     55 00 00 FF 
02e38     F8 E5 85 F1 | 	sub	objptr, ##44024
02e3c     10 13 02 F6 | 	mov	arg01, local02
02e40     00 14 06 F6 | 	mov	arg02, #0
02e44     F4 2E B0 FD | 	call	#_compile
02e48     FD 22 0A F6 | 	mov	local03, result1 wz
02e4c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02e4c                 | '   if err<>0 then printerror(err): goto 104
02e4c     0C 00 90 AD |  if_e	jmp	#LR__0137
02e50     11 13 02 F6 | 	mov	arg01, local03
02e54     58 28 B1 FD | 	call	#_printerror
02e58     48 03 90 FD | 	jmp	#LR__0148
02e5c                 | LR__0137
02e5c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02e5c     7A 00 00 FF 
02e60     84 E4 05 F1 | 	add	objptr, ##62596
02e64     F2 12 02 FB | 	rdlong	arg01, objptr
02e68     7A 00 00 FF 
02e6c     84 E4 85 F1 | 	sub	objptr, ##62596
02e70     41 01 00 FF 
02e74     25 14 06 F6 | 	mov	arg02, ##@LR__4380
02e78     80 5D B1 FD | 	call	#__system___string_cmp
02e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e80     20 03 90 AD |  if_e	jmp	#LR__0148
02e84     7A 00 00 FF 
02e88     84 E4 05 F1 | 	add	objptr, ##62596
02e8c     F2 1E 02 FB | 	rdlong	local01, objptr
02e90     24 00 00 FF 
02e94     94 E4 85 F1 | 	sub	objptr, ##18580
02e98     F2 1E 62 FC | 	wrlong	local01, objptr
02e9c     08 E4 05 F1 | 	add	objptr, #8
02ea0     F2 08 68 FC | 	wrlong	#4, objptr
02ea4     55 00 00 FF 
02ea8     F8 E5 85 F1 | 	sub	objptr, ##44024
02eac     B8 DB 9F FD | 	jmp	#LR__0020
02eb0                 | LR__0138
02eb0                 | ' 							 
02eb0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02eb0     01 20 16 F2 | 	cmp	local02, #1 wc
02eb4     C0 00 90 CD |  if_b	jmp	#LR__0139
02eb8     55 00 00 FF 
02ebc     F8 E5 05 F1 | 	add	objptr, ##44024
02ec0     F2 1E 0A FB | 	rdlong	local01, objptr wz
02ec4     55 00 00 FF 
02ec8     F8 E5 85 F1 | 	sub	objptr, ##44024
02ecc     55 00 00 5F 
02ed0     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02ed4     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02ed8     55 00 00 5F 
02edc     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02ee0     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02ee4     53 00 00 AF 
02ee8     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02eec     F2 34 02 AB |  if_e	rdlong	local12, objptr
02ef0     53 00 00 AF 
02ef4     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02ef8     1A 2B 02 A6 |  if_e	mov	local07, local12
02efc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02f00     74 00 90 5D |  if_ne	jmp	#LR__0139
02f04     55 00 00 FF 
02f08     F8 E5 05 F1 | 	add	objptr, ##44024
02f0c     F2 16 02 FB | 	rdlong	arg03, objptr
02f10     55 00 00 FF 
02f14     F8 E5 85 F1 | 	sub	objptr, ##44024
02f18     10 13 02 F6 | 	mov	arg01, local02
02f1c     00 14 06 F6 | 	mov	arg02, #0
02f20     E8 2E B0 FD | 	call	#_compile_assign
02f24                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02f24                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02f24     7A 00 00 FF 
02f28     84 E4 05 F1 | 	add	objptr, ##62596
02f2c     F2 12 02 FB | 	rdlong	arg01, objptr
02f30     7A 00 00 FF 
02f34     84 E4 85 F1 | 	sub	objptr, ##62596
02f38     41 01 00 FF 
02f3c     26 14 06 F6 | 	mov	arg02, ##@LR__4381
02f40     B8 5C B1 FD | 	call	#__system___string_cmp
02f44     00 FA 0D F2 | 	cmp	result1, #0 wz
02f48     58 02 90 AD |  if_e	jmp	#LR__0148
02f4c     7A 00 00 FF 
02f50     84 E4 05 F1 | 	add	objptr, ##62596
02f54     F2 1E 02 FB | 	rdlong	local01, objptr
02f58     24 00 00 FF 
02f5c     94 E4 85 F1 | 	sub	objptr, ##18580
02f60     F2 1E 62 FC | 	wrlong	local01, objptr
02f64     08 E4 05 F1 | 	add	objptr, #8
02f68     F2 08 68 FC | 	wrlong	#4, objptr
02f6c     55 00 00 FF 
02f70     F8 E5 85 F1 | 	sub	objptr, ##44024
02f74     F0 DA 9F FD | 	jmp	#LR__0020
02f78                 | LR__0139
02f78                 | '     							 
02f78                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02f78     01 20 16 F2 | 	cmp	local02, #1 wc
02f7c     C0 00 90 CD |  if_b	jmp	#LR__0140
02f80     55 00 00 FF 
02f84     F8 E5 05 F1 | 	add	objptr, ##44024
02f88     F2 1E 02 FB | 	rdlong	local01, objptr
02f8c     55 00 00 FF 
02f90     F8 E5 85 F1 | 	sub	objptr, ##44024
02f94     01 1E 0E F2 | 	cmp	local01, #1 wz
02f98     55 00 00 5F 
02f9c     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02fa0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02fa4     55 00 00 5F 
02fa8     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02fac     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
02fb0     53 00 00 AF 
02fb4     EC E5 05 A1 |  if_e	add	objptr, ##42988
02fb8     F2 34 02 AB |  if_e	rdlong	local12, objptr
02fbc     53 00 00 AF 
02fc0     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02fc4     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02fc8     74 00 90 5D |  if_ne	jmp	#LR__0140
02fcc     55 00 00 FF 
02fd0     F8 E5 05 F1 | 	add	objptr, ##44024
02fd4     F2 16 02 FB | 	rdlong	arg03, objptr
02fd8     55 00 00 FF 
02fdc     F8 E5 85 F1 | 	sub	objptr, ##44024
02fe0     10 13 02 F6 | 	mov	arg01, local02
02fe4     00 14 06 F6 | 	mov	arg02, #0
02fe8     20 2E B0 FD | 	call	#_compile_assign
02fec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02fec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02fec     7A 00 00 FF 
02ff0     84 E4 05 F1 | 	add	objptr, ##62596
02ff4     F2 12 02 FB | 	rdlong	arg01, objptr
02ff8     7A 00 00 FF 
02ffc     84 E4 85 F1 | 	sub	objptr, ##62596
03000     41 01 00 FF 
03004     27 14 06 F6 | 	mov	arg02, ##@LR__4382
03008     F0 5B B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     90 01 90 AD |  if_e	jmp	#LR__0148
03014     7A 00 00 FF 
03018     84 E4 05 F1 | 	add	objptr, ##62596
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     24 00 00 FF 
03024     94 E4 85 F1 | 	sub	objptr, ##18580
03028     F2 1E 62 FC | 	wrlong	local01, objptr
0302c     08 E4 05 F1 | 	add	objptr, #8
03030     F2 08 68 FC | 	wrlong	#4, objptr
03034     55 00 00 FF 
03038     F8 E5 85 F1 | 	sub	objptr, ##44024
0303c     28 DA 9F FD | 	jmp	#LR__0020
03040                 | LR__0140
03040                 | ' 
03040                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03040     53 00 00 FF 
03044     E4 E5 05 F1 | 	add	objptr, ##42980
03048     F2 1E 02 FB | 	rdlong	local01, objptr
0304c     53 00 00 FF 
03050     E4 E5 85 F1 | 	sub	objptr, ##42980
03054     01 00 00 FF 
03058     04 1E 0E F2 | 	cmp	local01, ##516 wz
0305c     53 00 00 AF 
03060     EC E5 05 A1 |  if_e	add	objptr, ##42988
03064     F2 30 02 AB |  if_e	rdlong	local10, objptr
03068     53 00 00 AF 
0306c     EC E5 85 A1 |  if_e	sub	objptr, ##42988
03070     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
03074     14 00 90 5D |  if_ne	jmp	#LR__0141
03078     00 12 06 F6 | 	mov	arg01, #0
0307c     00 14 06 F6 | 	mov	arg02, #0
03080     00 16 06 F6 | 	mov	arg03, #0
03084     84 2D B0 FD | 	call	#_compile_assign
03088     90 00 90 FD | 	jmp	#LR__0143
0308c                 | LR__0141
0308c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0308c     53 00 00 FF 
03090     E4 E5 05 F1 | 	add	objptr, ##42980
03094     F2 1E 02 FB | 	rdlong	local01, objptr
03098     53 00 00 FF 
0309c     E4 E5 85 F1 | 	sub	objptr, ##42980
030a0     01 00 00 FF 
030a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
030a8     53 00 00 AF 
030ac     EC E5 05 A1 |  if_e	add	objptr, ##42988
030b0     F2 30 02 AB |  if_e	rdlong	local10, objptr
030b4     53 00 00 AF 
030b8     EC E5 85 A1 |  if_e	sub	objptr, ##42988
030bc     14 30 0E A2 |  if_e	cmp	local10, #20 wz
030c0     44 00 90 5D |  if_ne	jmp	#LR__0142
030c4     00 12 06 F6 | 	mov	arg01, #0
030c8     08 B4 B1 FD | 	call	#__system___getiolock_0417
030cc     FD 12 02 F6 | 	mov	arg01, result1
030d0     00 5B B1 FD | 	call	#__system___lockmem
030d4     41 01 00 FF 
030d8     28 14 06 F6 | 	mov	arg02, ##@LR__4383
030dc     00 12 06 F6 | 	mov	arg01, #0
030e0     00 16 06 F6 | 	mov	arg03, #0
030e4     DC 67 B1 FD | 	call	#__system___basic_print_string
030e8     00 12 06 F6 | 	mov	arg01, #0
030ec     0A 14 06 F6 | 	mov	arg02, #10
030f0     00 16 06 F6 | 	mov	arg03, #0
030f4     74 67 B1 FD | 	call	#__system___basic_print_char
030f8     00 12 06 F6 | 	mov	arg01, #0
030fc     D4 B3 B1 FD | 	call	#__system___getiolock_0417
03100     FD 00 68 FC | 	wrlong	#0, result1
03104     7C 00 90 FD | 	jmp	#LR__0147
03108                 | LR__0142
03108     00 12 06 F6 | 	mov	arg01, #0
0310c     00 14 06 F6 | 	mov	arg02, #0
03110     00 16 06 F6 | 	mov	arg03, #0
03114     24 2C B0 FD | 	call	#_compile
03118     FD 22 02 F6 | 	mov	local03, result1
0311c                 | LR__0143
0311c                 | ' 
0311c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0311c                 | ' 
0311c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0311c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0311c                 | ' if err=0 then execute_line() else printerror(err)
0311c     00 22 0E F2 | 	cmp	local03, #0 wz
03120     0C 00 90 5D |  if_ne	jmp	#LR__0144
03124     00 12 06 F6 | 	mov	arg01, #0
03128     0C 66 B0 FD | 	call	#_execute_line
0312c     08 00 90 FD | 	jmp	#LR__0145
03130                 | LR__0144
03130     11 13 02 F6 | 	mov	arg01, local03
03134     78 25 B1 FD | 	call	#_printerror
03138                 | LR__0145
03138                 | ' if rest$<>"" then line$=rest$:  goto 108 
03138     7A 00 00 FF 
0313c     84 E4 05 F1 | 	add	objptr, ##62596
03140     F2 12 02 FB | 	rdlong	arg01, objptr
03144     7A 00 00 FF 
03148     84 E4 85 F1 | 	sub	objptr, ##62596
0314c     41 01 00 FF 
03150     57 14 06 F6 | 	mov	arg02, ##@LR__4384
03154     A4 5A B1 FD | 	call	#__system___string_cmp
03158     00 FA 0D F2 | 	cmp	result1, #0 wz
0315c     24 00 90 AD |  if_e	jmp	#LR__0146
03160     7A 00 00 FF 
03164     84 E4 05 F1 | 	add	objptr, ##62596
03168     F2 1E 02 FB | 	rdlong	local01, objptr
0316c     24 00 00 FF 
03170     94 E4 85 F1 | 	sub	objptr, ##18580
03174     F2 1E 62 FC | 	wrlong	local01, objptr
03178     55 00 00 FF 
0317c     F0 E5 85 F1 | 	sub	objptr, ##44016
03180     E4 D8 9F FD | 	jmp	#LR__0020
03184                 | LR__0146
03184                 | LR__0147
03184     41 01 00 FF 
03188     58 12 06 F6 | 	mov	arg01, ##@LR__4385
0318c                 | ' 
0318c                 | ' write(text)
0318c     1C 4A B1 FD | 	call	#_hg010b_spin2_write
03190                 | ' crlf
03190     78 4B B1 FD | 	call	#_hg010b_spin2_crlf
03194     41 01 00 FF 
03198     59 12 06 F6 | 	mov	arg01, ##@LR__4386
0319c                 | ' 
0319c                 | ' write(text)
0319c     0C 4A B1 FD | 	call	#_hg010b_spin2_write
031a0                 | ' crlf
031a0     68 4B B1 FD | 	call	#_hg010b_spin2_crlf
031a4                 | LR__0148
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _interpret_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' 
031b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
031b0                 | ' 
031b0                 | ' function isoperator(s as string) as ubyte
031b0                 | _isoperator
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     41 01 00 FF 
031c0     5F 14 06 F6 | 	mov	arg02, ##@LR__4387
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     30 5A B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     FC 01 90 AD |  if_e	jmp	#LR__0150
031d4     41 01 00 FF 
031d8     61 14 06 F6 | 	mov	arg02, ##@LR__4388
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     18 5A B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     EC 01 90 AD |  if_e	jmp	#LR__0151
031ec     41 01 00 FF 
031f0     63 14 06 F6 | 	mov	arg02, ##@LR__4389
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     00 5A B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     DC 01 90 AD |  if_e	jmp	#LR__0152
03204     41 01 00 FF 
03208     66 14 06 F6 | 	mov	arg02, ##@LR__4390
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     E8 59 B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     CC 01 90 AD |  if_e	jmp	#LR__0153
0321c     41 01 00 FF 
03220     6A 14 06 F6 | 	mov	arg02, ##@LR__4391
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     D0 59 B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     BC 01 90 AD |  if_e	jmp	#LR__0154
03234     41 01 00 FF 
03238     6C 14 06 F6 | 	mov	arg02, ##@LR__4392
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     B8 59 B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     AC 01 90 AD |  if_e	jmp	#LR__0155
0324c     41 01 00 FF 
03250     6E 14 06 F6 | 	mov	arg02, ##@LR__4393
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     A0 59 B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     9C 01 90 AD |  if_e	jmp	#LR__0156
03264     41 01 00 FF 
03268     72 14 06 F6 | 	mov	arg02, ##@LR__4394
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     88 59 B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     8C 01 90 AD |  if_e	jmp	#LR__0157
0327c     41 01 00 FF 
03280     76 14 06 F6 | 	mov	arg02, ##@LR__4395
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     70 59 B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     7C 01 90 AD |  if_e	jmp	#LR__0158
03294     41 01 00 FF 
03298     7A 14 06 F6 | 	mov	arg02, ##@LR__4396
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     58 59 B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     6C 01 90 AD |  if_e	jmp	#LR__0159
032ac     41 01 00 FF 
032b0     7E 14 06 F6 | 	mov	arg02, ##@LR__4397
032b4     0F 13 02 F6 | 	mov	arg01, local01
032b8     40 59 B1 FD | 	call	#__system___string_cmp
032bc     00 FA 0D F2 | 	cmp	result1, #0 wz
032c0     5C 01 90 AD |  if_e	jmp	#LR__0160
032c4     41 01 00 FF 
032c8     82 14 06 F6 | 	mov	arg02, ##@LR__4398
032cc     0F 13 02 F6 | 	mov	arg01, local01
032d0     28 59 B1 FD | 	call	#__system___string_cmp
032d4     00 FA 0D F2 | 	cmp	result1, #0 wz
032d8     4C 01 90 AD |  if_e	jmp	#LR__0161
032dc     41 01 00 FF 
032e0     84 14 06 F6 | 	mov	arg02, ##@LR__4399
032e4     0F 13 02 F6 | 	mov	arg01, local01
032e8     10 59 B1 FD | 	call	#__system___string_cmp
032ec     00 FA 0D F2 | 	cmp	result1, #0 wz
032f0     3C 01 90 AD |  if_e	jmp	#LR__0162
032f4     41 01 00 FF 
032f8     88 14 06 F6 | 	mov	arg02, ##@LR__4400
032fc     0F 13 02 F6 | 	mov	arg01, local01
03300     F8 58 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     2C 01 90 AD |  if_e	jmp	#LR__0163
0330c     41 01 00 FF 
03310     8A 14 06 F6 | 	mov	arg02, ##@LR__4401
03314     0F 13 02 F6 | 	mov	arg01, local01
03318     E0 58 B1 FD | 	call	#__system___string_cmp
0331c     00 FA 0D F2 | 	cmp	result1, #0 wz
03320     1C 01 90 AD |  if_e	jmp	#LR__0164
03324     41 01 00 FF 
03328     8C 14 06 F6 | 	mov	arg02, ##@LR__4402
0332c     0F 13 02 F6 | 	mov	arg01, local01
03330     C8 58 B1 FD | 	call	#__system___string_cmp
03334     00 FA 0D F2 | 	cmp	result1, #0 wz
03338     0C 01 90 AD |  if_e	jmp	#LR__0165
0333c     41 01 00 FF 
03340     8F 14 06 F6 | 	mov	arg02, ##@LR__4403
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     B0 58 B1 FD | 	call	#__system___string_cmp
0334c     00 FA 0D F2 | 	cmp	result1, #0 wz
03350     FC 00 90 AD |  if_e	jmp	#LR__0166
03354     41 01 00 FF 
03358     92 14 06 F6 | 	mov	arg02, ##@LR__4404
0335c     0F 13 02 F6 | 	mov	arg01, local01
03360     98 58 B1 FD | 	call	#__system___string_cmp
03364     00 FA 0D F2 | 	cmp	result1, #0 wz
03368     EC 00 90 AD |  if_e	jmp	#LR__0167
0336c     41 01 00 FF 
03370     94 14 06 F6 | 	mov	arg02, ##@LR__4405
03374     0F 13 02 F6 | 	mov	arg01, local01
03378     80 58 B1 FD | 	call	#__system___string_cmp
0337c     00 FA 0D F2 | 	cmp	result1, #0 wz
03380     DC 00 90 AD |  if_e	jmp	#LR__0168
03384     41 01 00 FF 
03388     96 14 06 F6 | 	mov	arg02, ##@LR__4406
0338c     0F 13 02 F6 | 	mov	arg01, local01
03390     68 58 B1 FD | 	call	#__system___string_cmp
03394     00 FA 0D F2 | 	cmp	result1, #0 wz
03398     CC 00 90 AD |  if_e	jmp	#LR__0169
0339c     41 01 00 FF 
033a0     99 14 06 F6 | 	mov	arg02, ##@LR__4407
033a4     0F 13 02 F6 | 	mov	arg01, local01
033a8     50 58 B1 FD | 	call	#__system___string_cmp
033ac     00 FA 0D F2 | 	cmp	result1, #0 wz
033b0     BC 00 90 AD |  if_e	jmp	#LR__0170
033b4     41 01 00 FF 
033b8     9C 14 06 F6 | 	mov	arg02, ##@LR__4408
033bc     0F 13 02 F6 | 	mov	arg01, local01
033c0     38 58 B1 FD | 	call	#__system___string_cmp
033c4     00 FA 0D F2 | 	cmp	result1, #0 wz
033c8     AC 00 90 AD |  if_e	jmp	#LR__0171
033cc     B0 00 90 FD | 	jmp	#LR__0172
033d0                 | LR__0150
033d0     01 FA 05 F6 | 	mov	result1, #1
033d4     AC 00 90 FD | 	jmp	#LR__0173
033d8                 | LR__0151
033d8     02 FA 05 F6 | 	mov	result1, #2
033dc     A4 00 90 FD | 	jmp	#LR__0173
033e0                 | LR__0152
033e0     03 FA 05 F6 | 	mov	result1, #3
033e4     9C 00 90 FD | 	jmp	#LR__0173
033e8                 | LR__0153
033e8     04 FA 05 F6 | 	mov	result1, #4
033ec     94 00 90 FD | 	jmp	#LR__0173
033f0                 | LR__0154
033f0     05 FA 05 F6 | 	mov	result1, #5
033f4     8C 00 90 FD | 	jmp	#LR__0173
033f8                 | LR__0155
033f8     06 FA 05 F6 | 	mov	result1, #6
033fc     84 00 90 FD | 	jmp	#LR__0173
03400                 | LR__0156
03400     07 FA 05 F6 | 	mov	result1, #7
03404     7C 00 90 FD | 	jmp	#LR__0173
03408                 | LR__0157
03408     08 FA 05 F6 | 	mov	result1, #8
0340c     74 00 90 FD | 	jmp	#LR__0173
03410                 | LR__0158
03410     09 FA 05 F6 | 	mov	result1, #9
03414     6C 00 90 FD | 	jmp	#LR__0173
03418                 | LR__0159
03418     0A FA 05 F6 | 	mov	result1, #10
0341c     64 00 90 FD | 	jmp	#LR__0173
03420                 | LR__0160
03420     0B FA 05 F6 | 	mov	result1, #11
03424     5C 00 90 FD | 	jmp	#LR__0173
03428                 | LR__0161
03428     0C FA 05 F6 | 	mov	result1, #12
0342c     54 00 90 FD | 	jmp	#LR__0173
03430                 | LR__0162
03430     0D FA 05 F6 | 	mov	result1, #13
03434     4C 00 90 FD | 	jmp	#LR__0173
03438                 | LR__0163
03438     0E FA 05 F6 | 	mov	result1, #14
0343c     44 00 90 FD | 	jmp	#LR__0173
03440                 | LR__0164
03440     1B FA 05 F6 | 	mov	result1, #27
03444     3C 00 90 FD | 	jmp	#LR__0173
03448                 | LR__0165
03448     27 FA 05 F6 | 	mov	result1, #39
0344c     34 00 90 FD | 	jmp	#LR__0173
03450                 | LR__0166
03450     26 FA 05 F6 | 	mov	result1, #38
03454     2C 00 90 FD | 	jmp	#LR__0173
03458                 | LR__0167
03458     10 FA 05 F6 | 	mov	result1, #16
0345c     24 00 90 FD | 	jmp	#LR__0173
03460                 | LR__0168
03460     0F FA 05 F6 | 	mov	result1, #15
03464     1C 00 90 FD | 	jmp	#LR__0173
03468                 | LR__0169
03468     2A FA 05 F6 | 	mov	result1, #42
0346c     14 00 90 FD | 	jmp	#LR__0173
03470                 | LR__0170
03470     28 FA 05 F6 | 	mov	result1, #40
03474     0C 00 90 FD | 	jmp	#LR__0173
03478                 | LR__0171
03478     29 FA 05 F6 | 	mov	result1, #41
0347c     04 00 90 FD | 	jmp	#LR__0173
03480                 | LR__0172
03480     00 FA 05 F6 | 	mov	result1, #0
03484                 | LR__0173
03484     A7 F0 03 F6 | 	mov	ptra, fp
03488     B2 00 A0 FD | 	call	#popregs_
0348c                 | _isoperator_ret
0348c     2D 00 64 FD | 	ret
03490                 | 
03490                 | ' 
03490                 | ' function isseparator(s as string) as ubyte
03490                 | _isseparator
03490     01 4A 05 F6 | 	mov	COUNT_, #1
03494     A8 00 A0 FD | 	call	#pushregs_
03498                 | ' 
03498                 | ' select case s
03498     09 1F 02 F6 | 	mov	local01, arg01
0349c     41 01 00 FF 
034a0     9F 14 06 F6 | 	mov	arg02, ##@LR__4409
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     50 57 B1 FD | 	call	#__system___string_cmp
034ac     00 FA 0D F2 | 	cmp	result1, #0 wz
034b0     54 01 90 AD |  if_e	jmp	#LR__0180
034b4     41 01 00 FF 
034b8     A1 14 06 F6 | 	mov	arg02, ##@LR__4410
034bc     0F 13 02 F6 | 	mov	arg01, local01
034c0     38 57 B1 FD | 	call	#__system___string_cmp
034c4     00 FA 0D F2 | 	cmp	result1, #0 wz
034c8     44 01 90 AD |  if_e	jmp	#LR__0181
034cc     41 01 00 FF 
034d0     A3 14 06 F6 | 	mov	arg02, ##@LR__4411
034d4     0F 13 02 F6 | 	mov	arg01, local01
034d8     20 57 B1 FD | 	call	#__system___string_cmp
034dc     00 FA 0D F2 | 	cmp	result1, #0 wz
034e0     34 01 90 AD |  if_e	jmp	#LR__0182
034e4     41 01 00 FF 
034e8     A5 14 06 F6 | 	mov	arg02, ##@LR__4412
034ec     0F 13 02 F6 | 	mov	arg01, local01
034f0     08 57 B1 FD | 	call	#__system___string_cmp
034f4     00 FA 0D F2 | 	cmp	result1, #0 wz
034f8     24 01 90 AD |  if_e	jmp	#LR__0183
034fc     41 01 00 FF 
03500     A7 14 06 F6 | 	mov	arg02, ##@LR__4413
03504     0F 13 02 F6 | 	mov	arg01, local01
03508     F0 56 B1 FD | 	call	#__system___string_cmp
0350c     00 FA 0D F2 | 	cmp	result1, #0 wz
03510     14 01 90 AD |  if_e	jmp	#LR__0184
03514     41 01 00 FF 
03518     A9 14 06 F6 | 	mov	arg02, ##@LR__4414
0351c     0F 13 02 F6 | 	mov	arg01, local01
03520     D8 56 B1 FD | 	call	#__system___string_cmp
03524     00 FA 0D F2 | 	cmp	result1, #0 wz
03528     04 01 90 AD |  if_e	jmp	#LR__0185
0352c     41 01 00 FF 
03530     AB 14 06 F6 | 	mov	arg02, ##@LR__4415
03534     0F 13 02 F6 | 	mov	arg01, local01
03538     C0 56 B1 FD | 	call	#__system___string_cmp
0353c     00 FA 0D F2 | 	cmp	result1, #0 wz
03540     F4 00 90 AD |  if_e	jmp	#LR__0186
03544     41 01 00 FF 
03548     AD 14 06 F6 | 	mov	arg02, ##@LR__4416
0354c     0F 13 02 F6 | 	mov	arg01, local01
03550     A8 56 B1 FD | 	call	#__system___string_cmp
03554     00 FA 0D F2 | 	cmp	result1, #0 wz
03558     E4 00 90 AD |  if_e	jmp	#LR__0187
0355c     41 01 00 FF 
03560     AF 14 06 F6 | 	mov	arg02, ##@LR__4417
03564     0F 13 02 F6 | 	mov	arg01, local01
03568     90 56 B1 FD | 	call	#__system___string_cmp
0356c     00 FA 0D F2 | 	cmp	result1, #0 wz
03570     D4 00 90 AD |  if_e	jmp	#LR__0188
03574     41 01 00 FF 
03578     B1 14 06 F6 | 	mov	arg02, ##@LR__4418
0357c     0F 13 02 F6 | 	mov	arg01, local01
03580     78 56 B1 FD | 	call	#__system___string_cmp
03584     00 FA 0D F2 | 	cmp	result1, #0 wz
03588     C4 00 90 AD |  if_e	jmp	#LR__0189
0358c     41 01 00 FF 
03590     B3 14 06 F6 | 	mov	arg02, ##@LR__4419
03594     0F 13 02 F6 | 	mov	arg01, local01
03598     60 56 B1 FD | 	call	#__system___string_cmp
0359c     00 FA 0D F2 | 	cmp	result1, #0 wz
035a0     B4 00 90 AD |  if_e	jmp	#LR__0190
035a4     41 01 00 FF 
035a8     B5 14 06 F6 | 	mov	arg02, ##@LR__4420
035ac     0F 13 02 F6 | 	mov	arg01, local01
035b0     48 56 B1 FD | 	call	#__system___string_cmp
035b4     00 FA 0D F2 | 	cmp	result1, #0 wz
035b8     A4 00 90 AD |  if_e	jmp	#LR__0191
035bc     41 01 00 FF 
035c0     B7 14 06 F6 | 	mov	arg02, ##@LR__4421
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     30 56 B1 FD | 	call	#__system___string_cmp
035cc     00 FA 0D F2 | 	cmp	result1, #0 wz
035d0     94 00 90 AD |  if_e	jmp	#LR__0192
035d4     41 01 00 FF 
035d8     B9 14 06 F6 | 	mov	arg02, ##@LR__4422
035dc     0F 13 02 F6 | 	mov	arg01, local01
035e0     18 56 B1 FD | 	call	#__system___string_cmp
035e4     00 FA 0D F2 | 	cmp	result1, #0 wz
035e8     84 00 90 AD |  if_e	jmp	#LR__0193
035ec     41 01 00 FF 
035f0     BB 14 06 F6 | 	mov	arg02, ##@LR__4423
035f4     0F 13 02 F6 | 	mov	arg01, local01
035f8     00 56 B1 FD | 	call	#__system___string_cmp
035fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03600     74 00 90 AD |  if_e	jmp	#LR__0194
03604     78 00 90 FD | 	jmp	#LR__0195
03608                 | LR__0180
03608     01 FA 05 F6 | 	mov	result1, #1
0360c     74 00 90 FD | 	jmp	#LR__0196
03610                 | LR__0181
03610     02 FA 05 F6 | 	mov	result1, #2
03614     6C 00 90 FD | 	jmp	#LR__0196
03618                 | LR__0182
03618     1B FA 05 F6 | 	mov	result1, #27
0361c     64 00 90 FD | 	jmp	#LR__0196
03620                 | LR__0183
03620     11 FA 05 F6 | 	mov	result1, #17
03624     5C 00 90 FD | 	jmp	#LR__0196
03628                 | LR__0184
03628     05 FA 05 F6 | 	mov	result1, #5
0362c     54 00 90 FD | 	jmp	#LR__0196
03630                 | LR__0185
03630     06 FA 05 F6 | 	mov	result1, #6
03634     4C 00 90 FD | 	jmp	#LR__0196
03638                 | LR__0186
03638     12 FA 05 F6 | 	mov	result1, #18
0363c     44 00 90 FD | 	jmp	#LR__0196
03640                 | LR__0187
03640     13 FA 05 F6 | 	mov	result1, #19
03644     3C 00 90 FD | 	jmp	#LR__0196
03648                 | LR__0188
03648     0C FA 05 F6 | 	mov	result1, #12
0364c     34 00 90 FD | 	jmp	#LR__0196
03650                 | LR__0189
03650     14 FA 05 F6 | 	mov	result1, #20
03654     2C 00 90 FD | 	jmp	#LR__0196
03658                 | LR__0190
03658     15 FA 05 F6 | 	mov	result1, #21
0365c     24 00 90 FD | 	jmp	#LR__0196
03660                 | LR__0191
03660     16 FA 05 F6 | 	mov	result1, #22
03664     1C 00 90 FD | 	jmp	#LR__0196
03668                 | LR__0192
03668     FF FB 05 F6 | 	mov	result1, #511
0366c     14 00 90 FD | 	jmp	#LR__0196
03670                 | LR__0193
03670     0F FA 05 F6 | 	mov	result1, #15
03674     0C 00 90 FD | 	jmp	#LR__0196
03678                 | LR__0194
03678     10 FA 05 F6 | 	mov	result1, #16
0367c     04 00 90 FD | 	jmp	#LR__0196
03680                 | LR__0195
03680     00 FA 05 F6 | 	mov	result1, #0
03684                 | LR__0196
03684     A7 F0 03 F6 | 	mov	ptra, fp
03688     B2 00 A0 FD | 	call	#popregs_
0368c                 | _isseparator_ret
0368c     2D 00 64 FD | 	ret
03690                 | 
03690                 | ' 
03690                 | ' 
03690                 | ' function iscommand(s as string) as ubyte
03690                 | _iscommand
03690     01 4A 05 F6 | 	mov	COUNT_, #1
03694     A8 00 A0 FD | 	call	#pushregs_
03698                 | ' 
03698                 | ' select case s
03698     09 1F 02 F6 | 	mov	local01, arg01
0369c     41 01 00 FF 
036a0     BF 14 06 F6 | 	mov	arg02, ##@LR__4425
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     50 55 B1 FD | 	call	#__system___string_cmp
036ac     00 FA 0D F2 | 	cmp	result1, #0 wz
036b0     F4 06 90 AD |  if_e	jmp	#LR__0200
036b4     41 01 00 FF 
036b8     C4 14 06 F6 | 	mov	arg02, ##@LR__4426
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     38 55 B1 FD | 	call	#__system___string_cmp
036c4     00 FA 0D F2 | 	cmp	result1, #0 wz
036c8     E4 06 90 AD |  if_e	jmp	#LR__0201
036cc     41 01 00 FF 
036d0     C7 14 06 F6 | 	mov	arg02, ##@LR__4427
036d4     0F 13 02 F6 | 	mov	arg01, local01
036d8     20 55 B1 FD | 	call	#__system___string_cmp
036dc     00 FA 0D F2 | 	cmp	result1, #0 wz
036e0     D4 06 90 AD |  if_e	jmp	#LR__0202
036e4     41 01 00 FF 
036e8     CB 14 06 F6 | 	mov	arg02, ##@LR__4428
036ec     0F 13 02 F6 | 	mov	arg01, local01
036f0     08 55 B1 FD | 	call	#__system___string_cmp
036f4     00 FA 0D F2 | 	cmp	result1, #0 wz
036f8     C4 06 90 AD |  if_e	jmp	#LR__0203
036fc     41 01 00 FF 
03700     D0 14 06 F6 | 	mov	arg02, ##@LR__4429
03704     0F 13 02 F6 | 	mov	arg01, local01
03708     F0 54 B1 FD | 	call	#__system___string_cmp
0370c     00 FA 0D F2 | 	cmp	result1, #0 wz
03710     B4 06 90 AD |  if_e	jmp	#LR__0204
03714     41 01 00 FF 
03718     D4 14 06 F6 | 	mov	arg02, ##@LR__4430
0371c     0F 13 02 F6 | 	mov	arg01, local01
03720     D8 54 B1 FD | 	call	#__system___string_cmp
03724     00 FA 0D F2 | 	cmp	result1, #0 wz
03728     A4 06 90 AD |  if_e	jmp	#LR__0205
0372c     41 01 00 FF 
03730     DB 14 06 F6 | 	mov	arg02, ##@LR__4431
03734     0F 13 02 F6 | 	mov	arg01, local01
03738     C0 54 B1 FD | 	call	#__system___string_cmp
0373c     00 FA 0D F2 | 	cmp	result1, #0 wz
03740     94 06 90 AD |  if_e	jmp	#LR__0206
03744     41 01 00 FF 
03748     DF 14 06 F6 | 	mov	arg02, ##@LR__4432
0374c     0F 13 02 F6 | 	mov	arg01, local01
03750     A8 54 B1 FD | 	call	#__system___string_cmp
03754     00 FA 0D F2 | 	cmp	result1, #0 wz
03758     84 06 90 AD |  if_e	jmp	#LR__0207
0375c     41 01 00 FF 
03760     E5 14 06 F6 | 	mov	arg02, ##@LR__4433
03764     0F 13 02 F6 | 	mov	arg01, local01
03768     90 54 B1 FD | 	call	#__system___string_cmp
0376c     00 FA 0D F2 | 	cmp	result1, #0 wz
03770     74 06 90 AD |  if_e	jmp	#LR__0208
03774     41 01 00 FF 
03778     E9 14 06 F6 | 	mov	arg02, ##@LR__4434
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     78 54 B1 FD | 	call	#__system___string_cmp
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     64 06 90 AD |  if_e	jmp	#LR__0209
0378c     41 01 00 FF 
03790     EF 14 06 F6 | 	mov	arg02, ##@LR__4435
03794     0F 13 02 F6 | 	mov	arg01, local01
03798     60 54 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     54 06 90 AD |  if_e	jmp	#LR__0210
037a4     41 01 00 FF 
037a8     F2 14 06 F6 | 	mov	arg02, ##@LR__4436
037ac     0F 13 02 F6 | 	mov	arg01, local01
037b0     48 54 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     44 06 90 AD |  if_e	jmp	#LR__0211
037bc     41 01 00 FF 
037c0     F8 14 06 F6 | 	mov	arg02, ##@LR__4437
037c4     0F 13 02 F6 | 	mov	arg01, local01
037c8     30 54 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     34 06 90 AD |  if_e	jmp	#LR__0212
037d4     41 01 00 FF 
037d8     FC 14 06 F6 | 	mov	arg02, ##@LR__4438
037dc     0F 13 02 F6 | 	mov	arg01, local01
037e0     18 54 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     24 06 90 AD |  if_e	jmp	#LR__0213
037ec     41 01 00 FF 
037f0     03 15 06 F6 | 	mov	arg02, ##@LR__4439
037f4     0F 13 02 F6 | 	mov	arg01, local01
037f8     00 54 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     14 06 90 AD |  if_e	jmp	#LR__0214
03804     41 01 00 FF 
03808     0A 15 06 F6 | 	mov	arg02, ##@LR__4440
0380c     0F 13 02 F6 | 	mov	arg01, local01
03810     E8 53 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     04 06 90 AD |  if_e	jmp	#LR__0215
0381c     41 01 00 FF 
03820     11 15 06 F6 | 	mov	arg02, ##@LR__4441
03824     0F 13 02 F6 | 	mov	arg01, local01
03828     D0 53 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F4 05 90 AD |  if_e	jmp	#LR__0216
03834     41 01 00 FF 
03838     1B 15 06 F6 | 	mov	arg02, ##@LR__4442
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     B8 53 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     E4 05 90 AD |  if_e	jmp	#LR__0217
0384c     41 01 00 FF 
03850     1F 15 06 F6 | 	mov	arg02, ##@LR__4443
03854     0F 13 02 F6 | 	mov	arg01, local01
03858     A0 53 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D4 05 90 AD |  if_e	jmp	#LR__0218
03864     41 01 00 FF 
03868     23 15 06 F6 | 	mov	arg02, ##@LR__4444
0386c     0F 13 02 F6 | 	mov	arg01, local01
03870     88 53 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 05 90 AD |  if_e	jmp	#LR__0219
0387c     41 01 00 FF 
03880     27 15 06 F6 | 	mov	arg02, ##@LR__4445
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     70 53 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B4 05 90 AD |  if_e	jmp	#LR__0220
03894     41 01 00 FF 
03898     2C 15 06 F6 | 	mov	arg02, ##@LR__4446
0389c     0F 13 02 F6 | 	mov	arg01, local01
038a0     58 53 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     A4 05 90 AD |  if_e	jmp	#LR__0221
038ac     41 01 00 FF 
038b0     30 15 06 F6 | 	mov	arg02, ##@LR__4447
038b4     0F 13 02 F6 | 	mov	arg01, local01
038b8     40 53 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     94 05 90 AD |  if_e	jmp	#LR__0222
038c4     41 01 00 FF 
038c8     35 15 06 F6 | 	mov	arg02, ##@LR__4448
038cc     0F 13 02 F6 | 	mov	arg01, local01
038d0     28 53 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     84 05 90 AD |  if_e	jmp	#LR__0223
038dc     41 01 00 FF 
038e0     3D 15 06 F6 | 	mov	arg02, ##@LR__4449
038e4     0F 13 02 F6 | 	mov	arg01, local01
038e8     10 53 B1 FD | 	call	#__system___string_cmp
038ec     00 FA 0D F2 | 	cmp	result1, #0 wz
038f0     74 05 90 AD |  if_e	jmp	#LR__0224
038f4     41 01 00 FF 
038f8     41 15 06 F6 | 	mov	arg02, ##@LR__4450
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     F8 52 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     64 05 90 AD |  if_e	jmp	#LR__0225
0390c     41 01 00 FF 
03910     46 15 06 F6 | 	mov	arg02, ##@LR__4451
03914     0F 13 02 F6 | 	mov	arg01, local01
03918     E0 52 B1 FD | 	call	#__system___string_cmp
0391c     00 FA 0D F2 | 	cmp	result1, #0 wz
03920     54 05 90 AD |  if_e	jmp	#LR__0226
03924     41 01 00 FF 
03928     4A 15 06 F6 | 	mov	arg02, ##@LR__4452
0392c     0F 13 02 F6 | 	mov	arg01, local01
03930     C8 52 B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     44 05 90 AD |  if_e	jmp	#LR__0227
0393c     41 01 00 FF 
03940     4F 15 06 F6 | 	mov	arg02, ##@LR__4453
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     B0 52 B1 FD | 	call	#__system___string_cmp
0394c     00 FA 0D F2 | 	cmp	result1, #0 wz
03950     34 05 90 AD |  if_e	jmp	#LR__0228
03954     41 01 00 FF 
03958     53 15 06 F6 | 	mov	arg02, ##@LR__4454
0395c     0F 13 02 F6 | 	mov	arg01, local01
03960     98 52 B1 FD | 	call	#__system___string_cmp
03964     00 FA 0D F2 | 	cmp	result1, #0 wz
03968     24 05 90 AD |  if_e	jmp	#LR__0229
0396c     41 01 00 FF 
03970     56 15 06 F6 | 	mov	arg02, ##@LR__4455
03974     0F 13 02 F6 | 	mov	arg01, local01
03978     80 52 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     14 05 90 AD |  if_e	jmp	#LR__0230
03984     41 01 00 FF 
03988     5C 15 06 F6 | 	mov	arg02, ##@LR__4456
0398c     0F 13 02 F6 | 	mov	arg01, local01
03990     68 52 B1 FD | 	call	#__system___string_cmp
03994     00 FA 0D F2 | 	cmp	result1, #0 wz
03998     04 05 90 AD |  if_e	jmp	#LR__0231
0399c     41 01 00 FF 
039a0     60 15 06 F6 | 	mov	arg02, ##@LR__4457
039a4     0F 13 02 F6 | 	mov	arg01, local01
039a8     50 52 B1 FD | 	call	#__system___string_cmp
039ac     00 FA 0D F2 | 	cmp	result1, #0 wz
039b0     F4 04 90 AD |  if_e	jmp	#LR__0232
039b4     41 01 00 FF 
039b8     65 15 06 F6 | 	mov	arg02, ##@LR__4458
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     38 52 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     E4 04 90 AD |  if_e	jmp	#LR__0233
039cc     41 01 00 FF 
039d0     68 15 06 F6 | 	mov	arg02, ##@LR__4459
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     20 52 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     D4 04 90 AD |  if_e	jmp	#LR__0234
039e4     41 01 00 FF 
039e8     6B 15 06 F6 | 	mov	arg02, ##@LR__4460
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     08 52 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     C4 04 90 AD |  if_e	jmp	#LR__0235
039fc     41 01 00 FF 
03a00     6F 15 06 F6 | 	mov	arg02, ##@LR__4461
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     F0 51 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     B4 04 90 AD |  if_e	jmp	#LR__0236
03a14     41 01 00 FF 
03a18     72 15 06 F6 | 	mov	arg02, ##@LR__4462
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     D8 51 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     A4 04 90 AD |  if_e	jmp	#LR__0237
03a2c     41 01 00 FF 
03a30     77 15 06 F6 | 	mov	arg02, ##@LR__4463
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     C0 51 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     94 04 90 AD |  if_e	jmp	#LR__0238
03a44     41 01 00 FF 
03a48     7A 15 06 F6 | 	mov	arg02, ##@LR__4464
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     A8 51 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     84 04 90 AD |  if_e	jmp	#LR__0239
03a5c     41 01 00 FF 
03a60     7F 15 06 F6 | 	mov	arg02, ##@LR__4465
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     90 51 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     74 04 90 AD |  if_e	jmp	#LR__0240
03a74     41 01 00 FF 
03a78     83 15 06 F6 | 	mov	arg02, ##@LR__4466
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     78 51 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     64 04 90 AD |  if_e	jmp	#LR__0241
03a8c     41 01 00 FF 
03a90     88 15 06 F6 | 	mov	arg02, ##@LR__4467
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     60 51 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     54 04 90 AD |  if_e	jmp	#LR__0242
03aa4     41 01 00 FF 
03aa8     8B 15 06 F6 | 	mov	arg02, ##@LR__4468
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     48 51 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     44 04 90 AD |  if_e	jmp	#LR__0243
03abc     41 01 00 FF 
03ac0     91 15 06 F6 | 	mov	arg02, ##@LR__4469
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     30 51 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     34 04 90 AD |  if_e	jmp	#LR__0244
03ad4     41 01 00 FF 
03ad8     95 15 06 F6 | 	mov	arg02, ##@LR__4470
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     18 51 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     24 04 90 AD |  if_e	jmp	#LR__0245
03aec     41 01 00 FF 
03af0     9A 15 06 F6 | 	mov	arg02, ##@LR__4471
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     00 51 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     14 04 90 AD |  if_e	jmp	#LR__0246
03b04     41 01 00 FF 
03b08     9D 15 06 F6 | 	mov	arg02, ##@LR__4472
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     E8 50 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     04 04 90 AD |  if_e	jmp	#LR__0247
03b1c     41 01 00 FF 
03b20     A3 15 06 F6 | 	mov	arg02, ##@LR__4473
03b24     0F 13 02 F6 | 	mov	arg01, local01
03b28     D0 50 B1 FD | 	call	#__system___string_cmp
03b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b30     F4 03 90 AD |  if_e	jmp	#LR__0248
03b34     41 01 00 FF 
03b38     A6 15 06 F6 | 	mov	arg02, ##@LR__4474
03b3c     0F 13 02 F6 | 	mov	arg01, local01
03b40     B8 50 B1 FD | 	call	#__system___string_cmp
03b44     00 FA 0D F2 | 	cmp	result1, #0 wz
03b48     E4 03 90 AD |  if_e	jmp	#LR__0249
03b4c     41 01 00 FF 
03b50     AF 15 06 F6 | 	mov	arg02, ##@LR__4475
03b54     0F 13 02 F6 | 	mov	arg01, local01
03b58     A0 50 B1 FD | 	call	#__system___string_cmp
03b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b60     D4 03 90 AD |  if_e	jmp	#LR__0250
03b64     41 01 00 FF 
03b68     B5 15 06 F6 | 	mov	arg02, ##@LR__4476
03b6c     0F 13 02 F6 | 	mov	arg01, local01
03b70     88 50 B1 FD | 	call	#__system___string_cmp
03b74     00 FA 0D F2 | 	cmp	result1, #0 wz
03b78     C4 03 90 AD |  if_e	jmp	#LR__0251
03b7c     41 01 00 FF 
03b80     BB 15 06 F6 | 	mov	arg02, ##@LR__4477
03b84     0F 13 02 F6 | 	mov	arg01, local01
03b88     70 50 B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b90     B4 03 90 AD |  if_e	jmp	#LR__0252
03b94     41 01 00 FF 
03b98     C4 15 06 F6 | 	mov	arg02, ##@LR__4478
03b9c     0F 13 02 F6 | 	mov	arg01, local01
03ba0     58 50 B1 FD | 	call	#__system___string_cmp
03ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ba8     A4 03 90 AD |  if_e	jmp	#LR__0253
03bac     41 01 00 FF 
03bb0     CE 15 06 F6 | 	mov	arg02, ##@LR__4479
03bb4     0F 13 02 F6 | 	mov	arg01, local01
03bb8     40 50 B1 FD | 	call	#__system___string_cmp
03bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc0     94 03 90 AD |  if_e	jmp	#LR__0254
03bc4     41 01 00 FF 
03bc8     D7 15 06 F6 | 	mov	arg02, ##@LR__4480
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     28 50 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     84 03 90 AD |  if_e	jmp	#LR__0255
03bdc     41 01 00 FF 
03be0     DC 15 06 F6 | 	mov	arg02, ##@LR__4481
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     10 50 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     74 03 90 AD |  if_e	jmp	#LR__0256
03bf4     41 01 00 FF 
03bf8     E1 15 06 F6 | 	mov	arg02, ##@LR__4482
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     F8 4F B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     64 03 90 AD |  if_e	jmp	#LR__0257
03c0c     41 01 00 FF 
03c10     E5 15 06 F6 | 	mov	arg02, ##@LR__4483
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     E0 4F B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     54 03 90 AD |  if_e	jmp	#LR__0258
03c24     41 01 00 FF 
03c28     EE 15 06 F6 | 	mov	arg02, ##@LR__4484
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     C8 4F B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     44 03 90 AD |  if_e	jmp	#LR__0259
03c3c     41 01 00 FF 
03c40     F3 15 06 F6 | 	mov	arg02, ##@LR__4485
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     B0 4F B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     34 03 90 AD |  if_e	jmp	#LR__0260
03c54     41 01 00 FF 
03c58     F9 15 06 F6 | 	mov	arg02, ##@LR__4486
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     98 4F B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     24 03 90 AD |  if_e	jmp	#LR__0261
03c6c     41 01 00 FF 
03c70     FB 15 06 F6 | 	mov	arg02, ##@LR__4487
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     80 4F B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     14 03 90 AD |  if_e	jmp	#LR__0262
03c84     41 01 00 FF 
03c88     FF 15 06 F6 | 	mov	arg02, ##@LR__4488
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     68 4F B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     04 03 90 AD |  if_e	jmp	#LR__0263
03c9c     42 01 00 FF 
03ca0     04 14 06 F6 | 	mov	arg02, ##@LR__4489
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     50 4F B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     F4 02 90 AD |  if_e	jmp	#LR__0264
03cb4     42 01 00 FF 
03cb8     07 14 06 F6 | 	mov	arg02, ##@LR__4490
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     38 4F B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     E4 02 90 AD |  if_e	jmp	#LR__0265
03ccc     42 01 00 FF 
03cd0     0E 14 06 F6 | 	mov	arg02, ##@LR__4491
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     20 4F B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     D4 02 90 AD |  if_e	jmp	#LR__0266
03ce4     42 01 00 FF 
03ce8     12 14 06 F6 | 	mov	arg02, ##@LR__4492
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     08 4F B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     C4 02 90 AD |  if_e	jmp	#LR__0267
03cfc     42 01 00 FF 
03d00     17 14 06 F6 | 	mov	arg02, ##@LR__4493
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     F0 4E B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     B4 02 90 AD |  if_e	jmp	#LR__0268
03d14     42 01 00 FF 
03d18     1E 14 06 F6 | 	mov	arg02, ##@LR__4494
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     D8 4E B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     A4 02 90 AD |  if_e	jmp	#LR__0269
03d2c     42 01 00 FF 
03d30     28 14 06 F6 | 	mov	arg02, ##@LR__4495
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     C0 4E B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     94 02 90 AD |  if_e	jmp	#LR__0270
03d44     42 01 00 FF 
03d48     2C 14 06 F6 | 	mov	arg02, ##@LR__4496
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     A8 4E B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     84 02 90 AD |  if_e	jmp	#LR__0271
03d5c     42 01 00 FF 
03d60     34 14 06 F6 | 	mov	arg02, ##@LR__4497
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     90 4E B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     74 02 90 AD |  if_e	jmp	#LR__0272
03d74     42 01 00 FF 
03d78     38 14 06 F6 | 	mov	arg02, ##@LR__4498
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     78 4E B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     64 02 90 AD |  if_e	jmp	#LR__0273
03d8c     42 01 00 FF 
03d90     3E 14 06 F6 | 	mov	arg02, ##@LR__4499
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     60 4E B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     54 02 90 AD |  if_e	jmp	#LR__0274
03da4     58 02 90 FD | 	jmp	#LR__0275
03da8                 | LR__0200
03da8     5C FA 05 F6 | 	mov	result1, #92
03dac     54 02 90 FD | 	jmp	#LR__0276
03db0                 | LR__0201
03db0     5C FA 05 F6 | 	mov	result1, #92
03db4     4C 02 90 FD | 	jmp	#LR__0276
03db8                 | LR__0202
03db8     47 FA 05 F6 | 	mov	result1, #71
03dbc     44 02 90 FD | 	jmp	#LR__0276
03dc0                 | LR__0203
03dc0     59 FA 05 F6 | 	mov	result1, #89
03dc4     3C 02 90 FD | 	jmp	#LR__0276
03dc8                 | LR__0204
03dc8     59 FA 05 F6 | 	mov	result1, #89
03dcc     34 02 90 FD | 	jmp	#LR__0276
03dd0                 | LR__0205
03dd0     45 FA 05 F6 | 	mov	result1, #69
03dd4     2C 02 90 FD | 	jmp	#LR__0276
03dd8                 | LR__0206
03dd8     45 FA 05 F6 | 	mov	result1, #69
03ddc     24 02 90 FD | 	jmp	#LR__0276
03de0                 | LR__0207
03de0     69 FA 05 F6 | 	mov	result1, #105
03de4     1C 02 90 FD | 	jmp	#LR__0276
03de8                 | LR__0208
03de8     40 FA 05 F6 | 	mov	result1, #64
03dec     14 02 90 FD | 	jmp	#LR__0276
03df0                 | LR__0209
03df0     49 FA 05 F6 | 	mov	result1, #73
03df4     0C 02 90 FD | 	jmp	#LR__0276
03df8                 | LR__0210
03df8     49 FA 05 F6 | 	mov	result1, #73
03dfc     04 02 90 FD | 	jmp	#LR__0276
03e00                 | LR__0211
03e00     50 FA 05 F6 | 	mov	result1, #80
03e04     FC 01 90 FD | 	jmp	#LR__0276
03e08                 | LR__0212
03e08     50 FA 05 F6 | 	mov	result1, #80
03e0c     F4 01 90 FD | 	jmp	#LR__0276
03e10                 | LR__0213
03e10     68 FA 05 F6 | 	mov	result1, #104
03e14     EC 01 90 FD | 	jmp	#LR__0276
03e18                 | LR__0214
03e18     73 FA 05 F6 | 	mov	result1, #115
03e1c     E4 01 90 FD | 	jmp	#LR__0276
03e20                 | LR__0215
03e20     74 FA 05 F6 | 	mov	result1, #116
03e24     DC 01 90 FD | 	jmp	#LR__0276
03e28                 | LR__0216
03e28     6C FA 05 F6 | 	mov	result1, #108
03e2c     D4 01 90 FD | 	jmp	#LR__0276
03e30                 | LR__0217
03e30     6C FA 05 F6 | 	mov	result1, #108
03e34     CC 01 90 FD | 	jmp	#LR__0276
03e38                 | LR__0218
03e38     72 FA 05 F6 | 	mov	result1, #114
03e3c     C4 01 90 FD | 	jmp	#LR__0276
03e40                 | LR__0219
03e40     5D FA 05 F6 | 	mov	result1, #93
03e44     BC 01 90 FD | 	jmp	#LR__0276
03e48                 | LR__0220
03e48     43 FA 05 F6 | 	mov	result1, #67
03e4c     B4 01 90 FD | 	jmp	#LR__0276
03e50                 | LR__0221
03e50     43 FA 05 F6 | 	mov	result1, #67
03e54     AC 01 90 FD | 	jmp	#LR__0276
03e58                 | LR__0222
03e58     5A FA 05 F6 | 	mov	result1, #90
03e5c     A4 01 90 FD | 	jmp	#LR__0276
03e60                 | LR__0223
03e60     46 FA 05 F6 | 	mov	result1, #70
03e64     9C 01 90 FD | 	jmp	#LR__0276
03e68                 | LR__0224
03e68     46 FA 05 F6 | 	mov	result1, #70
03e6c     94 01 90 FD | 	jmp	#LR__0276
03e70                 | LR__0225
03e70     71 FA 05 F6 | 	mov	result1, #113
03e74     8C 01 90 FD | 	jmp	#LR__0276
03e78                 | LR__0226
03e78     71 FA 05 F6 | 	mov	result1, #113
03e7c     84 01 90 FD | 	jmp	#LR__0276
03e80                 | LR__0227
03e80     60 FA 05 F6 | 	mov	result1, #96
03e84     7C 01 90 FD | 	jmp	#LR__0276
03e88                 | LR__0228
03e88     4A FA 05 F6 | 	mov	result1, #74
03e8c     74 01 90 FD | 	jmp	#LR__0276
03e90                 | LR__0229
03e90     4A FA 05 F6 | 	mov	result1, #74
03e94     6C 01 90 FD | 	jmp	#LR__0276
03e98                 | LR__0230
03e98     48 FA 05 F6 | 	mov	result1, #72
03e9c     64 01 90 FD | 	jmp	#LR__0276
03ea0                 | LR__0231
03ea0     48 FA 05 F6 | 	mov	result1, #72
03ea4     5C 01 90 FD | 	jmp	#LR__0276
03ea8                 | LR__0232
03ea8     4E FA 05 F6 | 	mov	result1, #78
03eac     54 01 90 FD | 	jmp	#LR__0276
03eb0                 | LR__0233
03eb0     4E FA 05 F6 | 	mov	result1, #78
03eb4     4C 01 90 FD | 	jmp	#LR__0276
03eb8                 | LR__0234
03eb8     58 FA 05 F6 | 	mov	result1, #88
03ebc     44 01 90 FD | 	jmp	#LR__0276
03ec0                 | LR__0235
03ec0     5F FA 05 F6 | 	mov	result1, #95
03ec4     3C 01 90 FD | 	jmp	#LR__0276
03ec8                 | LR__0236
03ec8     5F FA 05 F6 | 	mov	result1, #95
03ecc     34 01 90 FD | 	jmp	#LR__0276
03ed0                 | LR__0237
03ed0     4C FA 05 F6 | 	mov	result1, #76
03ed4     2C 01 90 FD | 	jmp	#LR__0276
03ed8                 | LR__0238
03ed8     4C FA 05 F6 | 	mov	result1, #76
03edc     24 01 90 FD | 	jmp	#LR__0276
03ee0                 | LR__0239
03ee0     52 FA 05 F6 | 	mov	result1, #82
03ee4     1C 01 90 FD | 	jmp	#LR__0276
03ee8                 | LR__0240
03ee8     52 FA 05 F6 | 	mov	result1, #82
03eec     14 01 90 FD | 	jmp	#LR__0276
03ef0                 | LR__0241
03ef0     61 FA 05 F6 | 	mov	result1, #97
03ef4     0C 01 90 FD | 	jmp	#LR__0276
03ef8                 | LR__0242
03ef8     61 FA 05 F6 | 	mov	result1, #97
03efc     04 01 90 FD | 	jmp	#LR__0276
03f00                 | LR__0243
03f00     63 FA 05 F6 | 	mov	result1, #99
03f04     FC 00 90 FD | 	jmp	#LR__0276
03f08                 | LR__0244
03f08     41 FA 05 F6 | 	mov	result1, #65
03f0c     F4 00 90 FD | 	jmp	#LR__0276
03f10                 | LR__0245
03f10     4B FA 05 F6 | 	mov	result1, #75
03f14     EC 00 90 FD | 	jmp	#LR__0276
03f18                 | LR__0246
03f18     4B FA 05 F6 | 	mov	result1, #75
03f1c     E4 00 90 FD | 	jmp	#LR__0276
03f20                 | LR__0247
03f20     5E FA 05 F6 | 	mov	result1, #94
03f24     DC 00 90 FD | 	jmp	#LR__0276
03f28                 | LR__0248
03f28     5E FA 05 F6 | 	mov	result1, #94
03f2c     D4 00 90 FD | 	jmp	#LR__0276
03f30                 | LR__0249
03f30     7C FA 05 F6 | 	mov	result1, #124
03f34     CC 00 90 FD | 	jmp	#LR__0276
03f38                 | LR__0250
03f38     7E FA 05 F6 | 	mov	result1, #126
03f3c     C4 00 90 FD | 	jmp	#LR__0276
03f40                 | LR__0251
03f40     7D FA 05 F6 | 	mov	result1, #125
03f44     BC 00 90 FD | 	jmp	#LR__0276
03f48                 | LR__0252
03f48     7F FA 05 F6 | 	mov	result1, #127
03f4c     B4 00 90 FD | 	jmp	#LR__0276
03f50                 | LR__0253
03f50     80 FA 05 F6 | 	mov	result1, #128
03f54     AC 00 90 FD | 	jmp	#LR__0276
03f58                 | LR__0254
03f58     55 FA 05 F6 | 	mov	result1, #85
03f5c     A4 00 90 FD | 	jmp	#LR__0276
03f60                 | LR__0255
03f60     75 FA 05 F6 | 	mov	result1, #117
03f64     9C 00 90 FD | 	jmp	#LR__0276
03f68                 | LR__0256
03f68     42 FA 05 F6 | 	mov	result1, #66
03f6c     94 00 90 FD | 	jmp	#LR__0276
03f70                 | LR__0257
03f70     42 FA 05 F6 | 	mov	result1, #66
03f74     8C 00 90 FD | 	jmp	#LR__0276
03f78                 | LR__0258
03f78     81 FA 05 F6 | 	mov	result1, #129
03f7c     84 00 90 FD | 	jmp	#LR__0276
03f80                 | LR__0259
03f80     81 FA 05 F6 | 	mov	result1, #129
03f84     7C 00 90 FD | 	jmp	#LR__0276
03f88                 | LR__0260
03f88     44 FA 05 F6 | 	mov	result1, #68
03f8c     74 00 90 FD | 	jmp	#LR__0276
03f90                 | LR__0261
03f90     44 FA 05 F6 | 	mov	result1, #68
03f94     6C 00 90 FD | 	jmp	#LR__0276
03f98                 | LR__0262
03f98     4D FA 05 F6 | 	mov	result1, #77
03f9c     64 00 90 FD | 	jmp	#LR__0276
03fa0                 | LR__0263
03fa0     51 FA 05 F6 | 	mov	result1, #81
03fa4     5C 00 90 FD | 	jmp	#LR__0276
03fa8                 | LR__0264
03fa8     51 FA 05 F6 | 	mov	result1, #81
03fac     54 00 90 FD | 	jmp	#LR__0276
03fb0                 | LR__0265
03fb0     6D FA 05 F6 | 	mov	result1, #109
03fb4     4C 00 90 FD | 	jmp	#LR__0276
03fb8                 | LR__0266
03fb8     6D FA 05 F6 | 	mov	result1, #109
03fbc     44 00 90 FD | 	jmp	#LR__0276
03fc0                 | LR__0267
03fc0     5B FA 05 F6 | 	mov	result1, #91
03fc4     3C 00 90 FD | 	jmp	#LR__0276
03fc8                 | LR__0268
03fc8     56 FA 05 F6 | 	mov	result1, #86
03fcc     34 00 90 FD | 	jmp	#LR__0276
03fd0                 | LR__0269
03fd0     70 FA 05 F6 | 	mov	result1, #112
03fd4     2C 00 90 FD | 	jmp	#LR__0276
03fd8                 | LR__0270
03fd8     70 FA 05 F6 | 	mov	result1, #112
03fdc     24 00 90 FD | 	jmp	#LR__0276
03fe0                 | LR__0271
03fe0     57 FA 05 F6 | 	mov	result1, #87
03fe4     1C 00 90 FD | 	jmp	#LR__0276
03fe8                 | LR__0272
03fe8     57 FA 05 F6 | 	mov	result1, #87
03fec     14 00 90 FD | 	jmp	#LR__0276
03ff0                 | LR__0273
03ff0     77 FA 05 F6 | 	mov	result1, #119
03ff4     0C 00 90 FD | 	jmp	#LR__0276
03ff8                 | LR__0274
03ff8     78 FA 05 F6 | 	mov	result1, #120
03ffc     04 00 90 FD | 	jmp	#LR__0276
04000                 | LR__0275
04000     00 FA 05 F6 | 	mov	result1, #0
04004                 | LR__0276
04004     A7 F0 03 F6 | 	mov	ptra, fp
04008     B2 00 A0 FD | 	call	#popregs_
0400c                 | _iscommand_ret
0400c     2D 00 64 FD | 	ret
04010                 | 
04010                 | ' 
04010                 | ' function isfunction(s as string) as ubyte
04010                 | _isfunction
04010     01 4A 05 F6 | 	mov	COUNT_, #1
04014     A8 00 A0 FD | 	call	#pushregs_
04018                 | ' 
04018                 | ' select case s
04018     09 1F 02 F6 | 	mov	local01, arg01
0401c     42 01 00 FF 
04020     44 14 06 F6 | 	mov	arg02, ##@LR__4500
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     D0 4B B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     CC 01 90 AD |  if_e	jmp	#LR__0280
04034     42 01 00 FF 
04038     49 14 06 F6 | 	mov	arg02, ##@LR__4501
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     B8 4B B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     BC 01 90 AD |  if_e	jmp	#LR__0281
0404c     42 01 00 FF 
04050     4E 14 06 F6 | 	mov	arg02, ##@LR__4502
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     A0 4B B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     AC 01 90 AD |  if_e	jmp	#LR__0282
04064     42 01 00 FF 
04068     52 14 06 F6 | 	mov	arg02, ##@LR__4503
0406c     0F 13 02 F6 | 	mov	arg01, local01
04070     88 4B B1 FD | 	call	#__system___string_cmp
04074     00 FA 0D F2 | 	cmp	result1, #0 wz
04078     9C 01 90 AD |  if_e	jmp	#LR__0283
0407c     42 01 00 FF 
04080     56 14 06 F6 | 	mov	arg02, ##@LR__4504
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     70 4B B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     8C 01 90 AD |  if_e	jmp	#LR__0284
04094     42 01 00 FF 
04098     5F 14 06 F6 | 	mov	arg02, ##@LR__4505
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     58 4B B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     7C 01 90 AD |  if_e	jmp	#LR__0285
040ac     42 01 00 FF 
040b0     63 14 06 F6 | 	mov	arg02, ##@LR__4506
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     40 4B B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     6C 01 90 AD |  if_e	jmp	#LR__0286
040c4     42 01 00 FF 
040c8     6B 14 06 F6 | 	mov	arg02, ##@LR__4507
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     28 4B B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     5C 01 90 AD |  if_e	jmp	#LR__0287
040dc     42 01 00 FF 
040e0     72 14 06 F6 | 	mov	arg02, ##@LR__4508
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     10 4B B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     4C 01 90 AD |  if_e	jmp	#LR__0288
040f4     42 01 00 FF 
040f8     79 14 06 F6 | 	mov	arg02, ##@LR__4509
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     F8 4A B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     3C 01 90 AD |  if_e	jmp	#LR__0289
0410c     42 01 00 FF 
04110     80 14 06 F6 | 	mov	arg02, ##@LR__4510
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     E0 4A B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     2C 01 90 AD |  if_e	jmp	#LR__0290
04124     42 01 00 FF 
04128     87 14 06 F6 | 	mov	arg02, ##@LR__4511
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     C8 4A B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     1C 01 90 AD |  if_e	jmp	#LR__0291
0413c     42 01 00 FF 
04140     8F 14 06 F6 | 	mov	arg02, ##@LR__4512
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     B0 4A B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     0C 01 90 AD |  if_e	jmp	#LR__0292
04154     42 01 00 FF 
04158     95 14 06 F6 | 	mov	arg02, ##@LR__4513
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     98 4A B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     FC 00 90 AD |  if_e	jmp	#LR__0293
0416c     42 01 00 FF 
04170     9B 14 06 F6 | 	mov	arg02, ##@LR__4514
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     80 4A B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     EC 00 90 AD |  if_e	jmp	#LR__0294
04184     42 01 00 FF 
04188     9F 14 06 F6 | 	mov	arg02, ##@LR__4515
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     68 4A B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     DC 00 90 AD |  if_e	jmp	#LR__0295
0419c     42 01 00 FF 
041a0     A3 14 06 F6 | 	mov	arg02, ##@LR__4516
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     50 4A B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     CC 00 90 AD |  if_e	jmp	#LR__0296
041b4     42 01 00 FF 
041b8     A7 14 06 F6 | 	mov	arg02, ##@LR__4517
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     38 4A B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     BC 00 90 AD |  if_e	jmp	#LR__0297
041cc     42 01 00 FF 
041d0     AD 14 06 F6 | 	mov	arg02, ##@LR__4518
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     20 4A B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     AC 00 90 AD |  if_e	jmp	#LR__0298
041e4     42 01 00 FF 
041e8     B3 14 06 F6 | 	mov	arg02, ##@LR__4519
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     08 4A B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     9C 00 90 AD |  if_e	jmp	#LR__0299
041fc     A0 00 90 FD | 	jmp	#LR__0300
04200                 | LR__0280
04200     85 FA 05 F6 | 	mov	result1, #133
04204     9C 00 90 FD | 	jmp	#LR__0301
04208                 | LR__0281
04208     84 FA 05 F6 | 	mov	result1, #132
0420c     94 00 90 FD | 	jmp	#LR__0301
04210                 | LR__0282
04210     86 FA 05 F6 | 	mov	result1, #134
04214     8C 00 90 FD | 	jmp	#LR__0301
04218                 | LR__0283
04218     82 FA 05 F6 | 	mov	result1, #130
0421c     84 00 90 FD | 	jmp	#LR__0301
04220                 | LR__0284
04220     6F FA 05 F6 | 	mov	result1, #111
04224     7C 00 90 FD | 	jmp	#LR__0301
04228                 | LR__0285
04228     6F FA 05 F6 | 	mov	result1, #111
0422c     74 00 90 FD | 	jmp	#LR__0301
04230                 | LR__0286
04230     62 FA 05 F6 | 	mov	result1, #98
04234     6C 00 90 FD | 	jmp	#LR__0301
04238                 | LR__0287
04238     66 FA 05 F6 | 	mov	result1, #102
0423c     64 00 90 FD | 	jmp	#LR__0301
04240                 | LR__0288
04240     67 FA 05 F6 | 	mov	result1, #103
04244     5C 00 90 FD | 	jmp	#LR__0301
04248                 | LR__0289
04248     64 FA 05 F6 | 	mov	result1, #100
0424c     54 00 90 FD | 	jmp	#LR__0301
04250                 | LR__0290
04250     65 FA 05 F6 | 	mov	result1, #101
04254     4C 00 90 FD | 	jmp	#LR__0301
04258                 | LR__0291
04258     7B FA 05 F6 | 	mov	result1, #123
0425c     44 00 90 FD | 	jmp	#LR__0301
04260                 | LR__0292
04260     76 FA 05 F6 | 	mov	result1, #118
04264     3C 00 90 FD | 	jmp	#LR__0301
04268                 | LR__0293
04268     7A FA 05 F6 | 	mov	result1, #122
0426c     34 00 90 FD | 	jmp	#LR__0301
04270                 | LR__0294
04270     54 FA 05 F6 | 	mov	result1, #84
04274     2C 00 90 FD | 	jmp	#LR__0301
04278                 | LR__0295
04278     6B FA 05 F6 | 	mov	result1, #107
0427c     24 00 90 FD | 	jmp	#LR__0301
04280                 | LR__0296
04280     87 FA 05 F6 | 	mov	result1, #135
04284     1C 00 90 FD | 	jmp	#LR__0301
04288                 | LR__0297
04288     6A FA 05 F6 | 	mov	result1, #106
0428c     14 00 90 FD | 	jmp	#LR__0301
04290                 | LR__0298
04290     6E FA 05 F6 | 	mov	result1, #110
04294     0C 00 90 FD | 	jmp	#LR__0301
04298                 | LR__0299
04298     83 FA 05 F6 | 	mov	result1, #131
0429c     04 00 90 FD | 	jmp	#LR__0301
042a0                 | LR__0300
042a0     00 FA 05 F6 | 	mov	result1, #0
042a4                 | LR__0301
042a4     A7 F0 03 F6 | 	mov	ptra, fp
042a8     B2 00 A0 FD | 	call	#popregs_
042ac                 | _isfunction_ret
042ac     2D 00 64 FD | 	ret
042b0                 | 
042b0                 | ' 
042b0                 | ' function isname(s as string) as boolean
042b0                 | _isname
042b0     0D 4A 05 F6 | 	mov	COUNT_, #13
042b4     A8 00 A0 FD | 	call	#pushregs_
042b8     09 1F 02 F6 | 	mov	local01, arg01
042bc     09 21 02 F6 | 	mov	local02, arg01
042c0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
042c4                 | LR__0310
042c4     10 FB C9 FA | 	rdbyte	result1, local02 wz
042c8     01 20 06 51 |  if_ne	add	local02, #1
042cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
042d0                 | LR__0311
042d0     09 21 82 F1 | 	sub	local02, arg01
042d4     10 FB 01 F6 | 	mov	result1, local02
042d8     FD 22 0A F6 | 	mov	local03, result1 wz
042dc     00 FA 05 A6 |  if_e	mov	result1, #0
042e0     34 02 90 AD |  if_e	jmp	#LR__0323
042e4     0F 13 02 F6 | 	mov	arg01, local01
042e8     01 14 06 F6 | 	mov	arg02, #1
042ec     01 16 06 F6 | 	mov	arg03, #1
042f0     04 6A B1 FD | 	call	#__system__Mid_S
042f4     FD 24 02 F6 | 	mov	local04, result1
042f8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
042f8     42 01 00 FF 
042fc     B7 14 06 F6 | 	mov	arg02, ##@LR__4520
04300     12 13 02 F6 | 	mov	arg01, local04
04304     F4 48 B1 FD | 	call	#__system___string_cmp
04308     00 FA 55 F2 | 	cmps	result1, #0 wc
0430c     18 00 90 CD |  if_b	jmp	#LR__0312
04310     42 01 00 FF 
04314     B9 14 06 F6 | 	mov	arg02, ##@LR__4521
04318     12 13 02 F6 | 	mov	arg01, local04
0431c     DC 48 B1 FD | 	call	#__system___string_cmp
04320     01 FA 55 F2 | 	cmps	result1, #1 wc
04324     1C 00 90 CD |  if_b	jmp	#LR__0313
04328                 | LR__0312
04328     42 01 00 FF 
0432c     BB 14 06 F6 | 	mov	arg02, ##@LR__4522
04330     12 13 02 F6 | 	mov	arg01, local04
04334     C4 48 B1 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     00 FA 05 56 |  if_ne	mov	result1, #0
04340     D4 01 90 5D |  if_ne	jmp	#LR__0323
04344                 | LR__0313
04344                 | ' if l>2 then 
04344     03 22 56 F2 | 	cmps	local03, #3 wc
04348     C8 01 90 CD |  if_b	jmp	#LR__0322
0434c                 | '   for i=2 to l
0434c     02 26 06 F6 | 	mov	local05, #2
04350     11 29 02 F6 | 	mov	local06, local03
04354     01 28 06 F1 | 	add	local06, #1
04358                 | LR__0314
04358     14 27 52 F2 | 	cmps	local05, local06 wc
0435c     B4 01 90 3D |  if_ae	jmp	#LR__0321
04360     0F 13 02 F6 | 	mov	arg01, local01
04364     13 15 02 F6 | 	mov	arg02, local05
04368     01 16 06 F6 | 	mov	arg03, #1
0436c     88 69 B1 FD | 	call	#__system__Mid_S
04370     FD 24 02 F6 | 	mov	local04, result1
04374                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04374     11 27 52 F2 | 	cmps	local05, local03 wc
04378     9C 00 90 3D |  if_ae	jmp	#LR__0317
0437c     42 01 00 FF 
04380     BD 14 06 F6 | 	mov	arg02, ##@LR__4523
04384     12 13 02 F6 | 	mov	arg01, local04
04388     70 48 B1 FD | 	call	#__system___string_cmp
0438c     00 FA 55 F2 | 	cmps	result1, #0 wc
04390     18 00 90 CD |  if_b	jmp	#LR__0315
04394     42 01 00 FF 
04398     BF 14 06 F6 | 	mov	arg02, ##@LR__4524
0439c     12 13 02 F6 | 	mov	arg01, local04
043a0     58 48 B1 FD | 	call	#__system___string_cmp
043a4     01 FA 55 F2 | 	cmps	result1, #1 wc
043a8     6C 00 90 CD |  if_b	jmp	#LR__0317
043ac                 | LR__0315
043ac     42 01 00 FF 
043b0     C1 14 06 F6 | 	mov	arg02, ##@LR__4525
043b4     12 13 02 F6 | 	mov	arg01, local04
043b8     40 48 B1 FD | 	call	#__system___string_cmp
043bc     00 FA 55 F2 | 	cmps	result1, #0 wc
043c0     18 00 90 CD |  if_b	jmp	#LR__0316
043c4     42 01 00 FF 
043c8     C3 14 06 F6 | 	mov	arg02, ##@LR__4526
043cc     12 13 02 F6 | 	mov	arg01, local04
043d0     28 48 B1 FD | 	call	#__system___string_cmp
043d4     01 FA 55 F2 | 	cmps	result1, #1 wc
043d8     3C 00 90 CD |  if_b	jmp	#LR__0317
043dc                 | LR__0316
043dc     42 01 00 FF 
043e0     C5 2A 06 F6 | 	mov	local07, ##@LR__4527
043e4     12 13 02 F6 | 	mov	arg01, local04
043e8     15 15 02 F6 | 	mov	arg02, local07
043ec     0C 48 B1 FD | 	call	#__system___string_cmp
043f0     00 FA 0D F2 | 	cmp	result1, #0 wz
043f4     20 00 90 AD |  if_e	jmp	#LR__0317
043f8     42 01 00 FF 
043fc     C7 2C 06 F6 | 	mov	local08, ##@LR__4528
04400     12 13 02 F6 | 	mov	arg01, local04
04404     16 15 02 F6 | 	mov	arg02, local08
04408     F0 47 B1 FD | 	call	#__system___string_cmp
0440c     FD 2E 0A F6 | 	mov	local09, result1 wz
04410     00 FA 05 56 |  if_ne	mov	result1, #0
04414     00 01 90 5D |  if_ne	jmp	#LR__0323
04418                 | LR__0317
04418                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04418     11 27 0A F2 | 	cmp	local05, local03 wz
0441c     EC 00 90 5D |  if_ne	jmp	#LR__0320
04420     42 01 00 FF 
04424     C9 30 06 F6 | 	mov	local10, ##@LR__4529
04428     12 13 02 F6 | 	mov	arg01, local04
0442c     18 15 02 F6 | 	mov	arg02, local10
04430     C8 47 B1 FD | 	call	#__system___string_cmp
04434     FD 32 02 F6 | 	mov	local11, result1
04438     00 32 56 F2 | 	cmps	local11, #0 wc
0443c     1C 00 90 CD |  if_b	jmp	#LR__0318
04440     42 01 00 FF 
04444     CB 14 06 F6 | 	mov	arg02, ##@LR__4530
04448     12 13 02 F6 | 	mov	arg01, local04
0444c     AC 47 B1 FD | 	call	#__system___string_cmp
04450     FD 30 02 F6 | 	mov	local10, result1
04454     01 30 56 F2 | 	cmps	local10, #1 wc
04458     B0 00 90 CD |  if_b	jmp	#LR__0320
0445c                 | LR__0318
0445c     42 01 00 FF 
04460     CD 14 06 F6 | 	mov	arg02, ##@LR__4531
04464     12 13 02 F6 | 	mov	arg01, local04
04468     90 47 B1 FD | 	call	#__system___string_cmp
0446c     00 FA 55 F2 | 	cmps	result1, #0 wc
04470     1C 00 90 CD |  if_b	jmp	#LR__0319
04474     42 01 00 FF 
04478     CF 2E 06 F6 | 	mov	local09, ##@LR__4532
0447c     12 13 02 F6 | 	mov	arg01, local04
04480     17 15 02 F6 | 	mov	arg02, local09
04484     74 47 B1 FD | 	call	#__system___string_cmp
04488     01 FA 55 F2 | 	cmps	result1, #1 wc
0448c     7C 00 90 CD |  if_b	jmp	#LR__0320
04490                 | LR__0319
04490     42 01 00 FF 
04494     D1 2E 06 F6 | 	mov	local09, ##@LR__4533
04498     12 13 02 F6 | 	mov	arg01, local04
0449c     17 15 02 F6 | 	mov	arg02, local09
044a0     58 47 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 4D F2 | 	cmps	result1, #0 wz
044a8     60 00 90 AD |  if_e	jmp	#LR__0320
044ac     42 01 00 FF 
044b0     D3 2C 06 F6 | 	mov	local08, ##@LR__4534
044b4     12 13 02 F6 | 	mov	arg01, local04
044b8     16 15 02 F6 | 	mov	arg02, local08
044bc     3C 47 B1 FD | 	call	#__system___string_cmp
044c0     FD 2E 0A F6 | 	mov	local09, result1 wz
044c4     44 00 90 AD |  if_e	jmp	#LR__0320
044c8     42 01 00 FF 
044cc     D5 34 06 F6 | 	mov	local12, ##@LR__4535
044d0     1A 2D 02 F6 | 	mov	local08, local12
044d4     12 13 02 F6 | 	mov	arg01, local04
044d8     16 15 02 F6 | 	mov	arg02, local08
044dc     1C 47 B1 FD | 	call	#__system___string_cmp
044e0     FD 2A 0A F6 | 	mov	local07, result1 wz
044e4     24 00 90 AD |  if_e	jmp	#LR__0320
044e8     42 01 00 FF 
044ec     D7 36 06 F6 | 	mov	local13, ##@LR__4536
044f0     1B 35 02 F6 | 	mov	local12, local13
044f4     12 13 02 F6 | 	mov	arg01, local04
044f8     1A 15 02 F6 | 	mov	arg02, local12
044fc     FC 46 B1 FD | 	call	#__system___string_cmp
04500     FD 2C 0A F6 | 	mov	local08, result1 wz
04504     00 FA 05 56 |  if_ne	mov	result1, #0
04508     0C 00 90 5D |  if_ne	jmp	#LR__0323
0450c                 | LR__0320
0450c     01 26 06 F1 | 	add	local05, #1
04510     44 FE 9F FD | 	jmp	#LR__0314
04514                 | LR__0321
04514                 | LR__0322
04514                 | ' return true
04514     01 FA 65 F6 | 	neg	result1, #1
04518                 | LR__0323
04518     A7 F0 03 F6 | 	mov	ptra, fp
0451c     B2 00 A0 FD | 	call	#popregs_
04520                 | _isname_ret
04520     2D 00 64 FD | 	ret
04524                 | 
04524                 | ' 
04524                 | ' function isnum(s as string) as boolean
04524                 | _isnum
04524     0D 4A 05 F6 | 	mov	COUNT_, #13
04528     A8 00 A0 FD | 	call	#pushregs_
0452c     09 1F 02 F6 | 	mov	local01, arg01
04530     00 20 06 F6 | 	mov	local02, #0
04534     00 22 06 F6 | 	mov	local03, #0
04538     0F 13 02 F6 | 	mov	arg01, local01
0453c     09 25 02 F6 | 	mov	local04, arg01
04540     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
04544                 | LR__0330
04544     12 FB C9 FA | 	rdbyte	result1, local04 wz
04548     01 24 06 51 |  if_ne	add	local04, #1
0454c     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
04550                 | LR__0331
04550     09 25 82 F1 | 	sub	local04, arg01
04554     12 FB 01 F6 | 	mov	result1, local04
04558     FD 26 0A F6 | 	mov	local05, result1 wz
0455c     00 FA 05 A6 |  if_e	mov	result1, #0
04560     8C 02 90 AD |  if_e	jmp	#LR__0342
04564     0F 13 02 F6 | 	mov	arg01, local01
04568     01 14 06 F6 | 	mov	arg02, #1
0456c     01 16 06 F6 | 	mov	arg03, #1
04570     84 67 B1 FD | 	call	#__system__Mid_S
04574     FD 28 02 F6 | 	mov	local06, result1
04578                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04578     42 01 00 FF 
0457c     D9 14 06 F6 | 	mov	arg02, ##@LR__4537
04580     14 13 02 F6 | 	mov	arg01, local06
04584     74 46 B1 FD | 	call	#__system___string_cmp
04588     00 FA 55 F2 | 	cmps	result1, #0 wc
0458c     18 00 90 CD |  if_b	jmp	#LR__0332
04590     42 01 00 FF 
04594     DB 14 06 F6 | 	mov	arg02, ##@LR__4538
04598     14 13 02 F6 | 	mov	arg01, local06
0459c     5C 46 B1 FD | 	call	#__system___string_cmp
045a0     01 FA 55 F2 | 	cmps	result1, #1 wc
045a4     78 00 90 CD |  if_b	jmp	#LR__0333
045a8                 | LR__0332
045a8     42 01 00 FF 
045ac     DD 14 06 F6 | 	mov	arg02, ##@LR__4539
045b0     14 13 02 F6 | 	mov	arg01, local06
045b4     44 46 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     60 00 90 AD |  if_e	jmp	#LR__0333
045c0     42 01 00 FF 
045c4     DF 2A 06 F6 | 	mov	local07, ##@LR__4540
045c8     14 13 02 F6 | 	mov	arg01, local06
045cc     15 15 02 F6 | 	mov	arg02, local07
045d0     28 46 B1 FD | 	call	#__system___string_cmp
045d4     00 FA 0D F2 | 	cmp	result1, #0 wz
045d8     44 00 90 AD |  if_e	jmp	#LR__0333
045dc     42 01 00 FF 
045e0     E1 2C 06 F6 | 	mov	local08, ##@LR__4541
045e4     16 2B 02 F6 | 	mov	local07, local08
045e8     14 13 02 F6 | 	mov	arg01, local06
045ec     15 15 02 F6 | 	mov	arg02, local07
045f0     08 46 B1 FD | 	call	#__system___string_cmp
045f4     00 FA 4D F2 | 	cmps	result1, #0 wz
045f8     24 00 90 AD |  if_e	jmp	#LR__0333
045fc     42 01 00 FF 
04600     E3 2E 06 F6 | 	mov	local09, ##@LR__4542
04604     17 2D 02 F6 | 	mov	local08, local09
04608     14 13 02 F6 | 	mov	arg01, local06
0460c     16 15 02 F6 | 	mov	arg02, local08
04610     E8 45 B1 FD | 	call	#__system___string_cmp
04614     FD 2A 0A F6 | 	mov	local07, result1 wz
04618     00 FA 05 56 |  if_ne	mov	result1, #0
0461c     D0 01 90 5D |  if_ne	jmp	#LR__0342
04620                 | LR__0333
04620                 | ' if m$="." then ds=1
04620     42 01 00 FF 
04624     E5 14 06 F6 | 	mov	arg02, ##@LR__4543
04628     14 13 02 F6 | 	mov	arg01, local06
0462c     CC 45 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     01 20 06 A6 |  if_e	mov	local02, #1
04638                 | ' if l>1 then 
04638     02 26 56 F2 | 	cmps	local05, #2 wc
0463c     AC 01 90 CD |  if_b	jmp	#LR__0341
04640                 | '   for i=2 to l
04640     02 30 06 F6 | 	mov	local10, #2
04644     13 33 02 F6 | 	mov	local11, local05
04648     01 32 06 F1 | 	add	local11, #1
0464c                 | LR__0334
0464c     19 31 52 F2 | 	cmps	local10, local11 wc
04650     98 01 90 3D |  if_ae	jmp	#LR__0340
04654     0F 13 02 F6 | 	mov	arg01, local01
04658     18 15 02 F6 | 	mov	arg02, local10
0465c     01 16 06 F6 | 	mov	arg03, #1
04660     94 66 B1 FD | 	call	#__system__Mid_S
04664     FD 28 02 F6 | 	mov	local06, result1
04668                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04668     42 01 00 FF 
0466c     E7 14 06 F6 | 	mov	arg02, ##@LR__4544
04670     14 13 02 F6 | 	mov	arg01, local06
04674     84 45 B1 FD | 	call	#__system___string_cmp
04678     00 FA 55 F2 | 	cmps	result1, #0 wc
0467c     18 00 90 CD |  if_b	jmp	#LR__0335
04680     42 01 00 FF 
04684     E9 14 06 F6 | 	mov	arg02, ##@LR__4545
04688     14 13 02 F6 | 	mov	arg01, local06
0468c     6C 45 B1 FD | 	call	#__system___string_cmp
04690     01 FA 55 F2 | 	cmps	result1, #1 wc
04694     98 00 90 CD |  if_b	jmp	#LR__0336
04698                 | LR__0335
04698     42 01 00 FF 
0469c     EB 14 06 F6 | 	mov	arg02, ##@LR__4546
046a0     14 13 02 F6 | 	mov	arg01, local06
046a4     54 45 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     80 00 90 AD |  if_e	jmp	#LR__0336
046b0     42 01 00 FF 
046b4     ED 2A 06 F6 | 	mov	local07, ##@LR__4547
046b8     14 13 02 F6 | 	mov	arg01, local06
046bc     15 15 02 F6 | 	mov	arg02, local07
046c0     38 45 B1 FD | 	call	#__system___string_cmp
046c4     00 FA 4D F2 | 	cmps	result1, #0 wz
046c8     64 00 90 AD |  if_e	jmp	#LR__0336
046cc     42 01 00 FF 
046d0     EF 2C 06 F6 | 	mov	local08, ##@LR__4548
046d4     16 2B 02 F6 | 	mov	local07, local08
046d8     14 13 02 F6 | 	mov	arg01, local06
046dc     15 15 02 F6 | 	mov	arg02, local07
046e0     18 45 B1 FD | 	call	#__system___string_cmp
046e4     FD 34 0A F6 | 	mov	local12, result1 wz
046e8     44 00 90 AD |  if_e	jmp	#LR__0336
046ec     42 01 00 FF 
046f0     F1 2E 06 F6 | 	mov	local09, ##@LR__4549
046f4     17 2D 02 F6 | 	mov	local08, local09
046f8     14 13 02 F6 | 	mov	arg01, local06
046fc     16 15 02 F6 | 	mov	arg02, local08
04700     F8 44 B1 FD | 	call	#__system___string_cmp
04704     FD 2A 0A F6 | 	mov	local07, result1 wz
04708     24 00 90 AD |  if_e	jmp	#LR__0336
0470c     42 01 00 FF 
04710     F3 36 06 F6 | 	mov	local13, ##@LR__4550
04714     1B 2F 02 F6 | 	mov	local09, local13
04718     14 13 02 F6 | 	mov	arg01, local06
0471c     17 15 02 F6 | 	mov	arg02, local09
04720     D8 44 B1 FD | 	call	#__system___string_cmp
04724     FD 2C 0A F6 | 	mov	local08, result1 wz
04728     00 FA 05 56 |  if_ne	mov	result1, #0
0472c     C0 00 90 5D |  if_ne	jmp	#LR__0342
04730                 | LR__0336
04730                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04730     42 01 00 FF 
04734     F5 14 06 F6 | 	mov	arg02, ##@LR__4551
04738     14 13 02 F6 | 	mov	arg01, local06
0473c     BC 44 B1 FD | 	call	#__system___string_cmp
04740     00 FA 0D F2 | 	cmp	result1, #0 wz
04744     38 00 90 5D |  if_ne	jmp	#LR__0337
04748     18 15 02 F6 | 	mov	arg02, local10
0474c     01 14 86 F1 | 	sub	arg02, #1
04750     0F 13 02 F6 | 	mov	arg01, local01
04754     01 16 06 F6 | 	mov	arg03, #1
04758     9C 65 B1 FD | 	call	#__system__Mid_S
0475c     FD 12 02 F6 | 	mov	arg01, result1
04760     30 67 B1 FD | 	call	#__system__LCase_S
04764     FD 12 02 F6 | 	mov	arg01, result1
04768     42 01 00 FF 
0476c     F7 14 06 F6 | 	mov	arg02, ##@LR__4552
04770     88 44 B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     00 FA 05 56 |  if_ne	mov	result1, #0
0477c     70 00 90 5D |  if_ne	jmp	#LR__0342
04780                 | LR__0337
04780                 | '     if m$="." then ds+=1: if ds>1 then return false
04780     42 01 00 FF 
04784     F9 14 06 F6 | 	mov	arg02, ##@LR__4553
04788     14 13 02 F6 | 	mov	arg01, local06
0478c     6C 44 B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     01 20 06 A1 |  if_e	add	local02, #1
04798     02 20 56 A2 |  if_e	cmps	local02, #2 wc
0479c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
047a0     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0342
047a4                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
047a4     42 01 00 FF 
047a8     FB 14 06 F6 | 	mov	arg02, ##@LR__4554
047ac     14 13 02 F6 | 	mov	arg01, local06
047b0     48 44 B1 FD | 	call	#__system___string_cmp
047b4     00 FA 4D F2 | 	cmps	result1, #0 wz
047b8     18 00 90 AD |  if_e	jmp	#LR__0338
047bc     42 01 00 FF 
047c0     FD 14 06 F6 | 	mov	arg02, ##@LR__4555
047c4     14 13 02 F6 | 	mov	arg01, local06
047c8     30 44 B1 FD | 	call	#__system___string_cmp
047cc     00 FA 4D F2 | 	cmps	result1, #0 wz
047d0     10 00 90 5D |  if_ne	jmp	#LR__0339
047d4                 | LR__0338
047d4     01 22 06 F1 | 	add	local03, #1
047d8     02 22 56 F2 | 	cmps	local03, #2 wc
047dc     00 FA 05 36 |  if_ae	mov	result1, #0
047e0     0C 00 90 3D |  if_ae	jmp	#LR__0342
047e4                 | LR__0339
047e4     01 30 06 F1 | 	add	local10, #1
047e8     60 FE 9F FD | 	jmp	#LR__0334
047ec                 | LR__0340
047ec                 | LR__0341
047ec                 | ' return true
047ec     01 FA 65 F6 | 	neg	result1, #1
047f0                 | LR__0342
047f0     A7 F0 03 F6 | 	mov	ptra, fp
047f4     B2 00 A0 FD | 	call	#popregs_
047f8                 | _isnum_ret
047f8     2D 00 64 FD | 	ret
047fc                 | 
047fc                 | '   
047fc                 | ' function isint(s as string) as boolean
047fc                 | _isint
047fc     05 4A 05 F6 | 	mov	COUNT_, #5
04800     A8 00 A0 FD | 	call	#pushregs_
04804     09 1F 02 F6 | 	mov	local01, arg01
04808     09 21 02 F6 | 	mov	local02, arg01
0480c     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
04810                 | LR__0350
04810     10 FB C9 FA | 	rdbyte	result1, local02 wz
04814     01 20 06 51 |  if_ne	add	local02, #1
04818     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
0481c                 | LR__0351
0481c     09 21 82 F1 | 	sub	local02, arg01
04820     10 FB 01 F6 | 	mov	result1, local02
04824     FD 20 0A F6 | 	mov	local02, result1 wz
04828     00 FA 05 A6 |  if_e	mov	result1, #0
0482c     18 01 90 AD |  if_e	jmp	#LR__0359
04830     0F 13 02 F6 | 	mov	arg01, local01
04834     01 14 06 F6 | 	mov	arg02, #1
04838     01 16 06 F6 | 	mov	arg03, #1
0483c     B8 64 B1 FD | 	call	#__system__Mid_S
04840     FD 22 02 F6 | 	mov	local03, result1
04844                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04844     42 01 00 FF 
04848     FF 14 06 F6 | 	mov	arg02, ##@LR__4556
0484c     11 13 02 F6 | 	mov	arg01, local03
04850     A8 43 B1 FD | 	call	#__system___string_cmp
04854     00 FA 55 F2 | 	cmps	result1, #0 wc
04858     18 00 90 CD |  if_b	jmp	#LR__0352
0485c     42 01 00 FF 
04860     01 15 06 F6 | 	mov	arg02, ##@LR__4557
04864     11 13 02 F6 | 	mov	arg01, local03
04868     90 43 B1 FD | 	call	#__system___string_cmp
0486c     01 FA 55 F2 | 	cmps	result1, #1 wc
04870     4C 00 90 CD |  if_b	jmp	#LR__0353
04874                 | LR__0352
04874     42 01 00 FF 
04878     03 15 06 F6 | 	mov	arg02, ##@LR__4558
0487c     11 13 02 F6 | 	mov	arg01, local03
04880     78 43 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     34 00 90 AD |  if_e	jmp	#LR__0353
0488c     42 01 00 FF 
04890     05 15 06 F6 | 	mov	arg02, ##@LR__4559
04894     11 13 02 F6 | 	mov	arg01, local03
04898     60 43 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     1C 00 90 AD |  if_e	jmp	#LR__0353
048a4     42 01 00 FF 
048a8     07 15 06 F6 | 	mov	arg02, ##@LR__4560
048ac     11 13 02 F6 | 	mov	arg01, local03
048b0     48 43 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     00 FA 05 56 |  if_ne	mov	result1, #0
048bc     88 00 90 5D |  if_ne	jmp	#LR__0359
048c0                 | LR__0353
048c0                 | ' 
048c0                 | ' if l>1 then 
048c0     02 20 56 F2 | 	cmps	local02, #2 wc
048c4     7C 00 90 CD |  if_b	jmp	#LR__0358
048c8                 | '   for i=2 to l
048c8     02 24 06 F6 | 	mov	local04, #2
048cc     10 27 02 F6 | 	mov	local05, local02
048d0     01 26 06 F1 | 	add	local05, #1
048d4                 | LR__0354
048d4     13 25 52 F2 | 	cmps	local04, local05 wc
048d8     68 00 90 3D |  if_ae	jmp	#LR__0357
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     12 15 02 F6 | 	mov	arg02, local04
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     0C 64 B1 FD | 	call	#__system__Mid_S
048ec     FD 22 02 F6 | 	mov	local03, result1
048f0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
048f0     42 01 00 FF 
048f4     09 15 06 F6 | 	mov	arg02, ##@LR__4561
048f8     11 13 02 F6 | 	mov	arg01, local03
048fc     FC 42 B1 FD | 	call	#__system___string_cmp
04900     00 FA 55 F2 | 	cmps	result1, #0 wc
04904     18 00 90 CD |  if_b	jmp	#LR__0355
04908     42 01 00 FF 
0490c     0B 15 06 F6 | 	mov	arg02, ##@LR__4562
04910     11 13 02 F6 | 	mov	arg01, local03
04914     E4 42 B1 FD | 	call	#__system___string_cmp
04918     01 FA 55 F2 | 	cmps	result1, #1 wc
0491c     1C 00 90 CD |  if_b	jmp	#LR__0356
04920                 | LR__0355
04920     42 01 00 FF 
04924     0D 15 06 F6 | 	mov	arg02, ##@LR__4563
04928     11 13 02 F6 | 	mov	arg01, local03
0492c     CC 42 B1 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     00 FA 05 56 |  if_ne	mov	result1, #0
04938     0C 00 90 5D |  if_ne	jmp	#LR__0359
0493c                 | LR__0356
0493c     01 24 06 F1 | 	add	local04, #1
04940     90 FF 9F FD | 	jmp	#LR__0354
04944                 | LR__0357
04944                 | LR__0358
04944                 | ' return true
04944     01 FA 65 F6 | 	neg	result1, #1
04948                 | LR__0359
04948     A7 F0 03 F6 | 	mov	ptra, fp
0494c     B2 00 A0 FD | 	call	#popregs_
04950                 | _isint_ret
04950     2D 00 64 FD | 	ret
04954                 | 
04954                 | ' 
04954                 | ' function isdec(s as string) as boolean
04954                 | _isdec
04954     05 4A 05 F6 | 	mov	COUNT_, #5
04958     A8 00 A0 FD | 	call	#pushregs_
0495c     09 1F 02 F6 | 	mov	local01, arg01
04960     09 21 02 F6 | 	mov	local02, arg01
04964     97 06 48 FB | 	callpa	#(@LR__0361-@LR__0360)>>2,fcache_load_ptr_
04968                 | LR__0360
04968     10 FB C9 FA | 	rdbyte	result1, local02 wz
0496c     01 20 06 51 |  if_ne	add	local02, #1
04970     F4 FF 9F 5D |  if_ne	jmp	#LR__0360
04974                 | LR__0361
04974     09 21 82 F1 | 	sub	local02, arg01
04978     10 FB 01 F6 | 	mov	result1, local02
0497c     FD 20 0A F6 | 	mov	local02, result1 wz
04980     00 FA 05 A6 |  if_e	mov	result1, #0
04984     80 00 90 AD |  if_e	jmp	#LR__0366
04988                 | ' for i=1 to l
04988     01 22 06 F6 | 	mov	local03, #1
0498c     10 25 02 F6 | 	mov	local04, local02
04990     01 24 06 F1 | 	add	local04, #1
04994                 | LR__0362
04994     12 23 52 F2 | 	cmps	local03, local04 wc
04998     68 00 90 3D |  if_ae	jmp	#LR__0365
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     11 15 02 F6 | 	mov	arg02, local03
049a4     01 16 06 F6 | 	mov	arg03, #1
049a8     4C 63 B1 FD | 	call	#__system__Mid_S
049ac     FD 26 02 F6 | 	mov	local05, result1
049b0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
049b0     42 01 00 FF 
049b4     0F 15 06 F6 | 	mov	arg02, ##@LR__4564
049b8     13 13 02 F6 | 	mov	arg01, local05
049bc     3C 42 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 55 F2 | 	cmps	result1, #0 wc
049c4     18 00 90 CD |  if_b	jmp	#LR__0363
049c8     42 01 00 FF 
049cc     11 15 06 F6 | 	mov	arg02, ##@LR__4565
049d0     13 13 02 F6 | 	mov	arg01, local05
049d4     24 42 B1 FD | 	call	#__system___string_cmp
049d8     01 FA 55 F2 | 	cmps	result1, #1 wc
049dc     1C 00 90 CD |  if_b	jmp	#LR__0364
049e0                 | LR__0363
049e0     42 01 00 FF 
049e4     13 15 06 F6 | 	mov	arg02, ##@LR__4566
049e8     13 13 02 F6 | 	mov	arg01, local05
049ec     0C 42 B1 FD | 	call	#__system___string_cmp
049f0     00 FA 0D F2 | 	cmp	result1, #0 wz
049f4     00 FA 05 56 |  if_ne	mov	result1, #0
049f8     0C 00 90 5D |  if_ne	jmp	#LR__0366
049fc                 | LR__0364
049fc     01 22 06 F1 | 	add	local03, #1
04a00     90 FF 9F FD | 	jmp	#LR__0362
04a04                 | LR__0365
04a04                 | ' return true
04a04     01 FA 65 F6 | 	neg	result1, #1
04a08                 | LR__0366
04a08     A7 F0 03 F6 | 	mov	ptra, fp
04a0c     B2 00 A0 FD | 	call	#popregs_
04a10                 | _isdec_ret
04a10     2D 00 64 FD | 	ret
04a14                 | 
04a14                 | ' 
04a14                 | ' function isstring(s as string) as boolean
04a14                 | _isstring
04a14     01 4A 05 F6 | 	mov	COUNT_, #1
04a18     A8 00 A0 FD | 	call	#pushregs_
04a1c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04a1c     09 1F 02 F6 | 	mov	local01, arg01
04a20     01 14 06 F6 | 	mov	arg02, #1
04a24     B8 61 B1 FD | 	call	#__system__Left_S
04a28     FD 12 02 F6 | 	mov	arg01, result1
04a2c     42 01 00 FF 
04a30     15 15 06 F6 | 	mov	arg02, ##@LR__4567
04a34     C4 41 B1 FD | 	call	#__system___string_cmp
04a38     00 FA 4D F2 | 	cmps	result1, #0 wz
04a3c     28 00 90 5D |  if_ne	jmp	#LR__0370
04a40     0F 13 02 F6 | 	mov	arg01, local01
04a44     01 14 06 F6 | 	mov	arg02, #1
04a48     1C 62 B1 FD | 	call	#__system__Right_S
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     42 01 00 FF 
04a54     17 15 06 F6 | 	mov	arg02, ##@LR__4568
04a58     A0 41 B1 FD | 	call	#__system___string_cmp
04a5c     00 FA 4D F2 | 	cmps	result1, #0 wz
04a60     01 FA 65 A6 |  if_e	neg	result1, #1
04a64     04 00 90 AD |  if_e	jmp	#LR__0371
04a68                 | LR__0370
04a68     00 FA 05 F6 | 	mov	result1, #0
04a6c                 | LR__0371
04a6c     A7 F0 03 F6 | 	mov	ptra, fp
04a70     B2 00 A0 FD | 	call	#popregs_
04a74                 | _isstring_ret
04a74     2D 00 64 FD | 	ret
04a78                 | 
04a78                 | ' 
04a78                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
04a78                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04a78                 | ' 
04a78                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04a78                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
04a78                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
04a78                 | ' 
04a78                 | ' '----- delete a line from a program
04a78                 | ' 
04a78                 | ' function deleteline(aline as ulong) as integer
04a78                 | _deleteline
04a78     03 4A 05 F6 | 	mov	COUNT_, #3
04a7c     A8 00 A0 FD | 	call	#pushregs_
04a80     2C F0 07 F1 | 	add	ptra, #44
04a84     04 4E 05 F1 | 	add	fp, #4
04a88     A7 12 62 FC | 	wrlong	arg01, fp
04a8c     69 00 00 FF 
04a90     58 E4 05 F1 | 	add	objptr, ##53848
04a94     F2 1E 02 FB | 	rdlong	local01, objptr
04a98     0C 4E 05 F1 | 	add	fp, #12
04a9c     A7 1E 62 FC | 	wrlong	local01, fp
04aa0     10 4E 85 F1 | 	sub	fp, #16
04aa4                 | ' 
04aa4                 | ' 
04aa4                 | ' searchptr=programstart
04aa4                 | ' 
04aa4                 | ' do
04aa4     5D 00 00 FF 
04aa8     98 E5 85 F1 | 	sub	objptr, ##48024
04aac                 | LR__0380
04aac     14 4E 05 F1 | 	add	fp, #20
04ab0     A7 12 02 F6 | 	mov	arg01, fp
04ab4     04 4E 85 F1 | 	sub	fp, #4
04ab8     A7 14 02 FB | 	rdlong	arg02, fp
04abc     10 4E 85 F1 | 	sub	fp, #16
04ac0     18 16 06 F6 | 	mov	arg03, #24
04ac4     1C 36 B1 FD | 	call	#_psram_spin2_read1
04ac8     10 4E 05 F1 | 	add	fp, #16
04acc     A7 1E 02 FB | 	rdlong	local01, fp
04ad0     08 4E 85 F1 | 	sub	fp, #8
04ad4     A7 1E 62 FC | 	wrlong	local01, fp
04ad8     20 4E 05 F1 | 	add	fp, #32
04adc     A7 1E 02 FB | 	rdlong	local01, fp
04ae0     18 4E 85 F1 | 	sub	fp, #24
04ae4     A7 1E 62 FC | 	wrlong	local01, fp
04ae8     04 4E 05 F1 | 	add	fp, #4
04aec     A7 1E 02 FB | 	rdlong	local01, fp
04af0     10 4E 85 F1 | 	sub	fp, #16
04af4     A7 16 02 FB | 	rdlong	arg03, fp
04af8     04 4E 85 F1 | 	sub	fp, #4
04afc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04b00     28 4E 05 C1 |  if_b	add	fp, #40
04b04     A7 20 02 CB |  if_b	rdlong	local02, fp
04b08     28 4E 85 C1 |  if_b	sub	fp, #40
04b0c     FF FF 3F CF 
04b10     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04b14     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0380
04b18     0B 00 00 FF 
04b1c     C0 E4 85 F1 | 	sub	objptr, ##5824
04b20                 | ' 
04b20                 | ' 
04b20                 | ' if header(0)<>aline then return -1
04b20     14 4E 05 F1 | 	add	fp, #20
04b24     A7 1E 02 FB | 	rdlong	local01, fp
04b28     10 4E 85 F1 | 	sub	fp, #16
04b2c     A7 22 02 FB | 	rdlong	local03, fp
04b30     04 4E 85 F1 | 	sub	fp, #4
04b34     11 1F 0A F2 | 	cmp	local01, local03 wz
04b38     01 FA 65 56 |  if_ne	neg	result1, #1
04b3c     4C 03 90 5D |  if_ne	jmp	#LR__0386
04b40     08 4E 05 F1 | 	add	fp, #8
04b44     A7 12 02 FB | 	rdlong	arg01, fp
04b48     08 4E 85 F1 | 	sub	fp, #8
04b4c     01 14 66 F6 | 	neg	arg02, #1
04b50     01 16 06 F6 | 	mov	arg03, #1
04b54     00 18 06 F6 | 	mov	arg04, #0
04b58     0B 00 00 FF 
04b5c     C0 E4 05 F1 | 	add	objptr, ##5824
04b60                 | '     return fill(addr, pattern, count, listPtr, 4)
04b60     04 1A 06 F6 | 	mov	arg05, #4
04b64     B4 36 B1 FD | 	call	#_psram_spin2_fill
04b68     0B 00 00 FF 
04b6c     C0 E4 85 F1 | 	sub	objptr, ##5824
04b70                 | ' 
04b70                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04b70                 | ' 
04b70                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04b70     28 4E 05 F1 | 	add	fp, #40
04b74     A7 1E 02 FB | 	rdlong	local01, fp
04b78     28 4E 85 F1 | 	sub	fp, #40
04b7c     FF FF 3F FF 
04b80     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04b84     24 4E 05 A1 |  if_e	add	fp, #36
04b88     A7 22 02 AB |  if_e	rdlong	local03, fp
04b8c     24 4E 85 A1 |  if_e	sub	fp, #36
04b90     FF FF 7F AF 
04b94     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
04b98     90 00 90 5D |  if_ne	jmp	#LR__0381
04b9c     69 00 00 FF 
04ba0     58 E4 05 F1 | 	add	objptr, ##53848
04ba4     F2 00 68 FC | 	wrlong	#0, objptr
04ba8     07 00 00 FF 
04bac     28 E4 85 F1 | 	sub	objptr, ##3624
04bb0     F2 00 68 FC | 	wrlong	#0, objptr
04bb4     07 00 00 FF 
04bb8     2C E4 05 F1 | 	add	objptr, ##3628
04bbc     F2 00 68 FC | 	wrlong	#0, objptr
04bc0     04 E4 05 F1 | 	add	objptr, #4
04bc4     FF FF FF FF 
04bc8     F2 FE 6B FC | 	wrlong	##-1, objptr
04bcc     00 12 06 F6 | 	mov	arg01, #0
04bd0     10 E4 85 F1 | 	sub	objptr, #16
04bd4     F2 00 68 FC | 	wrlong	#0, objptr
04bd8     01 14 66 F6 | 	neg	arg02, #1
04bdc     01 16 06 F6 | 	mov	arg03, #1
04be0     00 18 06 F6 | 	mov	arg04, #0
04be4     5D 00 00 FF 
04be8     90 E5 85 F1 | 	sub	objptr, ##48016
04bec                 | '     return fill(addr, pattern, count, listPtr, 4)
04bec     04 1A 06 F6 | 	mov	arg05, #4
04bf0     28 36 B1 FD | 	call	#_psram_spin2_fill
04bf4     10 12 06 F6 | 	mov	arg01, #16
04bf8     01 14 66 F6 | 	neg	arg02, #1
04bfc     01 16 06 F6 | 	mov	arg03, #1
04c00     00 18 06 F6 | 	mov	arg04, #0
04c04                 | '     return fill(addr, pattern, count, listPtr, 4)
04c04     04 1A 06 F6 | 	mov	arg05, #4
04c08     10 36 B1 FD | 	call	#_psram_spin2_fill
04c0c     14 12 06 F6 | 	mov	arg01, #20
04c10     1E 14 CE F9 | 	bmask	arg02, #30
04c14     01 16 06 F6 | 	mov	arg03, #1
04c18     00 18 06 F6 | 	mov	arg04, #0
04c1c                 | '     return fill(addr, pattern, count, listPtr, 4)
04c1c     04 1A 06 F6 | 	mov	arg05, #4
04c20     F8 35 B1 FD | 	call	#_psram_spin2_fill
04c24     0B 00 00 FF 
04c28     C0 E4 85 F1 | 	sub	objptr, ##5824
04c2c                 | LR__0381
04c2c                 | ' 
04c2c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04c2c     28 4E 05 F1 | 	add	fp, #40
04c30     A7 1E 02 FB | 	rdlong	local01, fp
04c34     28 4E 85 F1 | 	sub	fp, #40
04c38     FF FF 3F FF 
04c3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04c40     88 00 90 5D |  if_ne	jmp	#LR__0382
04c44     24 4E 05 F1 | 	add	fp, #36
04c48     A7 22 02 FB | 	rdlong	local03, fp
04c4c     24 4E 85 F1 | 	sub	fp, #36
04c50     FF FF 7F FF 
04c54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04c58     70 00 90 AD |  if_e	jmp	#LR__0382
04c5c     24 4E 05 F1 | 	add	fp, #36
04c60     A7 12 02 FB | 	rdlong	arg01, fp
04c64     24 4E 85 F1 | 	sub	fp, #36
04c68     14 12 06 F1 | 	add	arg01, #20
04c6c     1E 14 CE F9 | 	bmask	arg02, #30
04c70     01 16 06 F6 | 	mov	arg03, #1
04c74     00 18 06 F6 | 	mov	arg04, #0
04c78     0B 00 00 FF 
04c7c     C0 E4 05 F1 | 	add	objptr, ##5824
04c80                 | '     return fill(addr, pattern, count, listPtr, 4)
04c80     04 1A 06 F6 | 	mov	arg05, #4
04c84     94 35 B1 FD | 	call	#_psram_spin2_fill
04c88     24 4E 05 F1 | 	add	fp, #36
04c8c     A7 1E 02 FB | 	rdlong	local01, fp
04c90     5D 00 00 FF 
04c94     A0 E5 05 F1 | 	add	objptr, ##48032
04c98     F2 1E 62 FC | 	wrlong	local01, objptr
04c9c     69 00 00 FF 
04ca0     60 E4 85 F1 | 	sub	objptr, ##53856
04ca4     A7 12 02 FB | 	rdlong	arg01, fp
04ca8     24 4E 85 F1 | 	sub	fp, #36
04cac     BC 0B B1 FD | 	call	#_pslpeek
04cb0     69 00 00 FF 
04cb4     5C E4 05 F1 | 	add	objptr, ##53852
04cb8     F2 FA 61 FC | 	wrlong	result1, objptr
04cbc     69 00 00 FF 
04cc0     5C E4 85 F1 | 	sub	objptr, ##53852
04cc4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04cc4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04cc4                 | '   lastline=pslpeek(header(4))
04cc4                 | '   return 0
04cc4     00 FA 05 F6 | 	mov	result1, #0
04cc8     C0 01 90 FD | 	jmp	#LR__0386
04ccc                 | LR__0382
04ccc                 | ' 
04ccc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04ccc     28 4E 05 F1 | 	add	fp, #40
04cd0     A7 1E 02 FB | 	rdlong	local01, fp
04cd4     28 4E 85 F1 | 	sub	fp, #40
04cd8     FF FF 3F FF 
04cdc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04ce0     6C 00 90 AD |  if_e	jmp	#LR__0383
04ce4     24 4E 05 F1 | 	add	fp, #36
04ce8     A7 22 02 FB | 	rdlong	local03, fp
04cec     24 4E 85 F1 | 	sub	fp, #36
04cf0     FF FF 7F FF 
04cf4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04cf8     54 00 90 5D |  if_ne	jmp	#LR__0383
04cfc     28 4E 05 F1 | 	add	fp, #40
04d00     A7 12 02 FB | 	rdlong	arg01, fp
04d04     28 4E 85 F1 | 	sub	fp, #40
04d08     10 12 06 F1 | 	add	arg01, #16
04d0c     01 14 66 F6 | 	neg	arg02, #1
04d10     01 16 06 F6 | 	mov	arg03, #1
04d14     00 18 06 F6 | 	mov	arg04, #0
04d18     0B 00 00 FF 
04d1c     C0 E4 05 F1 | 	add	objptr, ##5824
04d20                 | '     return fill(addr, pattern, count, listPtr, 4)
04d20     04 1A 06 F6 | 	mov	arg05, #4
04d24     F4 34 B1 FD | 	call	#_psram_spin2_fill
04d28     28 4E 05 F1 | 	add	fp, #40
04d2c     A7 1E 02 FB | 	rdlong	local01, fp
04d30     28 4E 85 F1 | 	sub	fp, #40
04d34     5D 00 00 FF 
04d38     98 E5 05 F1 | 	add	objptr, ##48024
04d3c     F2 1E 62 FC | 	wrlong	local01, objptr
04d40     69 00 00 FF 
04d44     58 E4 85 F1 | 	sub	objptr, ##53848
04d48                 | ' '   print "deleted first line"
04d48                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04d48                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04d48                 | '   return 0
04d48     00 FA 05 F6 | 	mov	result1, #0
04d4c     3C 01 90 FD | 	jmp	#LR__0386
04d50                 | LR__0383
04d50                 | ' 
04d50                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04d50     28 4E 05 F1 | 	add	fp, #40
04d54     A7 1E 02 FB | 	rdlong	local01, fp
04d58     28 4E 85 F1 | 	sub	fp, #40
04d5c     FF FF 3F FF 
04d60     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04d64     24 4E 05 51 |  if_ne	add	fp, #36
04d68     A7 22 02 5B |  if_ne	rdlong	local03, fp
04d6c     24 4E 85 51 |  if_ne	sub	fp, #36
04d70     FF FF 7F 5F 
04d74     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04d78     68 00 90 AD |  if_e	jmp	#LR__0384
04d7c     28 4E 05 F1 | 	add	fp, #40
04d80     A7 12 02 FB | 	rdlong	arg01, fp
04d84     10 12 06 F1 | 	add	arg01, #16
04d88     04 4E 85 F1 | 	sub	fp, #4
04d8c     A7 14 02 FB | 	rdlong	arg02, fp
04d90     24 4E 85 F1 | 	sub	fp, #36
04d94     01 16 06 F6 | 	mov	arg03, #1
04d98     00 18 06 F6 | 	mov	arg04, #0
04d9c     0B 00 00 FF 
04da0     C0 E4 05 F1 | 	add	objptr, ##5824
04da4                 | '     return fill(addr, pattern, count, listPtr, 4)
04da4     04 1A 06 F6 | 	mov	arg05, #4
04da8     70 34 B1 FD | 	call	#_psram_spin2_fill
04dac     24 4E 05 F1 | 	add	fp, #36
04db0     A7 12 02 FB | 	rdlong	arg01, fp
04db4     14 12 06 F1 | 	add	arg01, #20
04db8     04 4E 05 F1 | 	add	fp, #4
04dbc     A7 14 02 FB | 	rdlong	arg02, fp
04dc0     28 4E 85 F1 | 	sub	fp, #40
04dc4     01 16 06 F6 | 	mov	arg03, #1
04dc8     00 18 06 F6 | 	mov	arg04, #0
04dcc                 | '     return fill(addr, pattern, count, listPtr, 4)
04dcc     04 1A 06 F6 | 	mov	arg05, #4
04dd0     48 34 B1 FD | 	call	#_psram_spin2_fill
04dd4     0B 00 00 FF 
04dd8     C0 E4 85 F1 | 	sub	objptr, ##5824
04ddc                 | '    pslpoke(header(5)+16,header(4))  
04ddc                 | '    pslpoke(header(4)+20, header(5))
04ddc                 | '    return 0
04ddc     00 FA 05 F6 | 	mov	result1, #0
04de0     A8 00 90 FD | 	jmp	#LR__0386
04de4                 | LR__0384
04de4     10 4E 05 F1 | 	add	fp, #16
04de8     A7 1E 02 FB | 	rdlong	local01, fp
04dec     08 4E 85 F1 | 	sub	fp, #8
04df0     A7 1E 62 FC | 	wrlong	local01, fp
04df4     69 00 00 FF 
04df8     58 E4 05 F1 | 	add	objptr, ##53848
04dfc     F2 1E 02 FB | 	rdlong	local01, objptr
04e00     08 4E 05 F1 | 	add	fp, #8
04e04     A7 1E 62 FC | 	wrlong	local01, fp
04e08     10 4E 85 F1 | 	sub	fp, #16
04e0c                 | ' 
04e0c                 | ' 
04e0c                 | ' 
04e0c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04e0c                 | ' 
04e0c                 | ' lineptr2=searchptr
04e0c                 | ' searchptr=programstart
04e0c                 | ' 
04e0c                 | ' do
04e0c     5D 00 00 FF 
04e10     98 E5 85 F1 | 	sub	objptr, ##48024
04e14                 | LR__0385
04e14     14 4E 05 F1 | 	add	fp, #20
04e18     A7 12 02 F6 | 	mov	arg01, fp
04e1c     04 4E 85 F1 | 	sub	fp, #4
04e20     A7 14 02 FB | 	rdlong	arg02, fp
04e24     10 4E 85 F1 | 	sub	fp, #16
04e28     18 16 06 F6 | 	mov	arg03, #24
04e2c     B4 32 B1 FD | 	call	#_psram_spin2_read1
04e30     10 4E 05 F1 | 	add	fp, #16
04e34     A7 1E 02 FB | 	rdlong	local01, fp
04e38     08 4E 85 F1 | 	sub	fp, #8
04e3c     A7 1E 62 FC | 	wrlong	local01, fp
04e40     20 4E 05 F1 | 	add	fp, #32
04e44     A7 1E 02 FB | 	rdlong	local01, fp
04e48     18 4E 85 F1 | 	sub	fp, #24
04e4c     A7 1E 62 FC | 	wrlong	local01, fp
04e50     04 4E 05 F1 | 	add	fp, #4
04e54     A7 1E 02 FB | 	rdlong	local01, fp
04e58     10 4E 85 F1 | 	sub	fp, #16
04e5c     A7 22 02 FB | 	rdlong	local03, fp
04e60     04 4E 85 F1 | 	sub	fp, #4
04e64     11 1F 12 F2 | 	cmp	local01, local03 wc
04e68     28 4E 05 C1 |  if_b	add	fp, #40
04e6c     A7 20 02 CB |  if_b	rdlong	local02, fp
04e70     28 4E 85 C1 |  if_b	sub	fp, #40
04e74     FF FF 3F CF 
04e78     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04e7c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0385
04e80     0B 00 00 FF 
04e84     C0 E4 85 F1 | 	sub	objptr, ##5824
04e88     00 FA 05 F6 | 	mov	result1, #0
04e8c                 | LR__0386
04e8c     A7 F0 03 F6 | 	mov	ptra, fp
04e90     B2 00 A0 FD | 	call	#popregs_
04e94                 | _deleteline_ret
04e94     2D 00 64 FD | 	ret
04e98                 | 
04e98                 | ' 
04e98                 | ' sub save_line
04e98                 | _save_line
04e98     03 4A 05 F6 | 	mov	COUNT_, #3
04e9c     A8 00 A0 FD | 	call	#pushregs_
04ea0     69 00 00 FF 
04ea4     50 E4 05 F1 | 	add	objptr, ##53840
04ea8     F2 16 02 FB | 	rdlong	arg03, objptr
04eac     01 16 06 F1 | 	add	arg03, #1
04eb0     05 00 00 FF 
04eb4     18 E4 85 F1 | 	sub	objptr, ##2584
04eb8     F2 14 02 FB | 	rdlong	arg02, objptr
04ebc     0B 15 02 FD | 	qmul	arg02, arg03
04ec0     0E 00 00 FF 
04ec4     44 E4 85 F1 | 	sub	objptr, ##7236
04ec8     F2 12 02 FB | 	rdlong	arg01, objptr
04ecc     55 00 00 FF 
04ed0     F4 E5 85 F1 | 	sub	objptr, ##44020
04ed4     09 1F 02 F6 | 	mov	local01, arg01
04ed8     18 20 62 FD | 	getqx	local02
04edc     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04ee0                 | LR__0390
04ee0     0F FB C9 FA | 	rdbyte	result1, local01 wz
04ee4     01 1E 06 51 |  if_ne	add	local01, #1
04ee8     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04eec                 | LR__0391
04eec     09 1F 82 F1 | 	sub	local01, arg01
04ef0     03 1E CE F7 | 	test	local01, #3 wz
04ef4     02 1E 46 50 |  if_ne	shr	local01, #2
04ef8     01 1E 06 51 |  if_ne	add	local01, #1
04efc     02 1E 66 50 |  if_ne	shl	local01, #2
04f00     10 23 02 F6 | 	mov	local03, local02
04f04     0F 23 02 F1 | 	add	local03, local01
04f08     62 00 00 FF 
04f0c     30 E4 05 F1 | 	add	objptr, ##50224
04f10     F2 16 02 FB | 	rdlong	arg03, objptr
04f14     10 17 02 F1 | 	add	arg03, local02
04f18     04 00 00 FF 
04f1c     28 E4 05 F1 | 	add	objptr, ##2088
04f20     F2 16 62 FC | 	wrlong	arg03, objptr
04f24     04 E4 05 F1 | 	add	objptr, #4
04f28     F2 1E 62 FC | 	wrlong	local01, objptr
04f2c     0C E4 85 F1 | 	sub	objptr, #12
04f30     F2 12 02 F6 | 	mov	arg01, objptr
04f34     04 00 00 FF 
04f38     20 E4 85 F1 | 	sub	objptr, ##2080
04f3c     F2 14 02 FB | 	rdlong	arg02, objptr
04f40     10 17 02 F6 | 	mov	arg03, local02
04f44     56 00 00 FF 
04f48     70 E5 85 F1 | 	sub	objptr, ##44400
04f4c     30 32 B1 FD | 	call	#_psram_spin2_write
04f50     4A 00 00 FF 
04f54     34 E5 05 F1 | 	add	objptr, ##38196
04f58     F2 12 02 FB | 	rdlong	arg01, objptr
04f5c     0C 00 00 FF 
04f60     3C E4 05 F1 | 	add	objptr, ##6204
04f64     F2 14 02 FB | 	rdlong	arg02, objptr
04f68     10 15 02 F1 | 	add	arg02, local02
04f6c     0F 17 02 F6 | 	mov	arg03, local01
04f70     56 00 00 FF 
04f74     70 E5 85 F1 | 	sub	objptr, ##44400
04f78     04 32 B1 FD | 	call	#_psram_spin2_write
04f7c     56 00 00 FF 
04f80     70 E5 05 F1 | 	add	objptr, ##44400
04f84     F2 1E 02 FB | 	rdlong	local01, objptr
04f88     11 1F 02 F1 | 	add	local01, local03
04f8c     F2 1E 62 FC | 	wrlong	local01, objptr
04f90     62 00 00 FF 
04f94     30 E4 85 F1 | 	sub	objptr, ##50224
04f98     A7 F0 03 F6 | 	mov	ptra, fp
04f9c     B2 00 A0 FD | 	call	#popregs_
04fa0                 | _save_line_ret
04fa0     2D 00 64 FD | 	ret
04fa4                 | 
04fa4                 | ' 
04fa4                 | ' 
04fa4                 | ' function insertline(aline as ulong) as integer
04fa4                 | _insertline
04fa4     02 4A 05 F6 | 	mov	COUNT_, #2
04fa8     A8 00 A0 FD | 	call	#pushregs_
04fac     28 F0 07 F1 | 	add	ptra, #40
04fb0     04 4E 05 F1 | 	add	fp, #4
04fb4     A7 12 62 FC | 	wrlong	arg01, fp
04fb8     69 00 00 FF 
04fbc     58 E4 05 F1 | 	add	objptr, ##53848
04fc0     F2 1E 02 FB | 	rdlong	local01, objptr
04fc4     04 4E 05 F1 | 	add	fp, #4
04fc8     A7 1E 62 FC | 	wrlong	local01, fp
04fcc     08 4E 85 F1 | 	sub	fp, #8
04fd0                 | ' 
04fd0                 | ' do
04fd0     5D 00 00 FF 
04fd4     98 E5 85 F1 | 	sub	objptr, ##48024
04fd8                 | LR__0400
04fd8     10 4E 05 F1 | 	add	fp, #16
04fdc     A7 12 02 F6 | 	mov	arg01, fp
04fe0     08 4E 85 F1 | 	sub	fp, #8
04fe4     A7 14 02 FB | 	rdlong	arg02, fp
04fe8     08 4E 85 F1 | 	sub	fp, #8
04fec     18 16 06 F6 | 	mov	arg03, #24
04ff0     F0 30 B1 FD | 	call	#_psram_spin2_read1
04ff4     08 4E 05 F1 | 	add	fp, #8
04ff8     A7 1E 02 FB | 	rdlong	local01, fp
04ffc     04 4E 05 F1 | 	add	fp, #4
05000     A7 1E 62 FC | 	wrlong	local01, fp
05004     18 4E 05 F1 | 	add	fp, #24
05008     A7 1E 02 FB | 	rdlong	local01, fp
0500c     1C 4E 85 F1 | 	sub	fp, #28
05010     A7 1E 62 FC | 	wrlong	local01, fp
05014     08 4E 05 F1 | 	add	fp, #8
05018     A7 1E 02 FB | 	rdlong	local01, fp
0501c     0C 4E 85 F1 | 	sub	fp, #12
05020     A7 16 02 FB | 	rdlong	arg03, fp
05024     04 4E 85 F1 | 	sub	fp, #4
05028     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0502c     24 4E 05 C1 |  if_b	add	fp, #36
05030     A7 20 02 CB |  if_b	rdlong	local02, fp
05034     24 4E 85 C1 |  if_b	sub	fp, #36
05038     FF FF 3F CF 
0503c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05040     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0400
05044     0B 00 00 FF 
05048     C0 E4 85 F1 | 	sub	objptr, ##5824
0504c                 | ' 
0504c                 | ' if header(0)=aline then return -1 ' delete it first
0504c     10 4E 05 F1 | 	add	fp, #16
05050     A7 1E 02 FB | 	rdlong	local01, fp
05054     0C 4E 85 F1 | 	sub	fp, #12
05058     A7 20 02 FB | 	rdlong	local02, fp
0505c     04 4E 85 F1 | 	sub	fp, #4
05060     10 1F 0A F2 | 	cmp	local01, local02 wz
05064     01 FA 65 A6 |  if_e	neg	result1, #1
05068     74 01 90 AD |  if_e	jmp	#LR__0403
0506c                 | ' if header(0)<aline then return -2 ' end of program reached
0506c     10 4E 05 F1 | 	add	fp, #16
05070     A7 1E 02 FB | 	rdlong	local01, fp
05074     0C 4E 85 F1 | 	sub	fp, #12
05078     A7 16 02 FB | 	rdlong	arg03, fp
0507c     04 4E 85 F1 | 	sub	fp, #4
05080     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05084     02 FA 65 C6 |  if_b	neg	result1, #2
05088     54 01 90 CD |  if_b	jmp	#LR__0403
0508c                 | ' 
0508c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0508c     20 4E 05 F1 | 	add	fp, #32
05090     A7 1E 02 FB | 	rdlong	local01, fp
05094     20 4E 85 F1 | 	sub	fp, #32
05098     FF FF 7F FF 
0509c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
050a0     84 00 90 5D |  if_ne	jmp	#LR__0401
050a4     62 00 00 FF 
050a8     30 E4 05 F1 | 	add	objptr, ##50224
050ac     F2 1E 02 FB | 	rdlong	local01, objptr
050b0     07 00 00 FF 
050b4     28 E4 05 F1 | 	add	objptr, ##3624
050b8     F2 1E 62 FC | 	wrlong	local01, objptr
050bc     0C 4E 05 F1 | 	add	fp, #12
050c0     A7 12 02 FB | 	rdlong	arg01, fp
050c4     0C 4E 85 F1 | 	sub	fp, #12
050c8     10 12 06 F1 | 	add	arg01, #16
050cc     07 00 00 FF 
050d0     28 E4 85 F1 | 	sub	objptr, ##3624
050d4     F2 14 02 FB | 	rdlong	arg02, objptr
050d8     01 16 06 F6 | 	mov	arg03, #1
050dc     00 18 06 F6 | 	mov	arg04, #0
050e0     56 00 00 FF 
050e4     70 E5 85 F1 | 	sub	objptr, ##44400
050e8                 | '     return fill(addr, pattern, count, listPtr, 4)
050e8     04 1A 06 F6 | 	mov	arg05, #4
050ec     2C 31 B1 FD | 	call	#_psram_spin2_fill
050f0     5A 00 00 FF 
050f4     A0 E5 05 F1 | 	add	objptr, ##46496
050f8     FF FF FF FF 
050fc     F2 FE 6B FC | 	wrlong	##-1, objptr
05100     0C 4E 05 F1 | 	add	fp, #12
05104     A7 1E 02 FB | 	rdlong	local01, fp
05108     0C 4E 85 F1 | 	sub	fp, #12
0510c     04 E4 05 F1 | 	add	objptr, #4
05110     F2 1E 62 FC | 	wrlong	local01, objptr
05114     66 00 00 FF 
05118     64 E4 85 F1 | 	sub	objptr, ##52324
0511c     78 FD BF FD | 	call	#_save_line
05120                 | '   programstart=programptr
05120                 | '   pslpoke(lineptr2+16,programptr)
05120                 | '   ucompiledline(4)=$FFFF_FFFF
05120                 | '   ucompiledline(5)=lineptr2
05120                 | '   save_line
05120                 | '   return 0
05120     00 FA 05 F6 | 	mov	result1, #0
05124     B8 00 90 FD | 	jmp	#LR__0403
05128                 | LR__0401
05128                 | ' 
05128                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05128     20 4E 05 F1 | 	add	fp, #32
0512c     A7 1E 02 FB | 	rdlong	local01, fp
05130     20 4E 85 F1 | 	sub	fp, #32
05134     FF FF 7F FF 
05138     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0513c     9C 00 90 AD |  if_e	jmp	#LR__0402
05140     20 4E 05 F1 | 	add	fp, #32
05144     A7 1E 02 FB | 	rdlong	local01, fp
05148     66 00 00 FF 
0514c     60 E4 05 F1 | 	add	objptr, ##52320
05150     F2 1E 62 FC | 	wrlong	local01, objptr
05154     14 4E 85 F1 | 	sub	fp, #20
05158     A7 1E 02 FB | 	rdlong	local01, fp
0515c     04 E4 05 F1 | 	add	objptr, #4
05160     F2 1E 62 FC | 	wrlong	local01, objptr
05164     A7 12 02 FB | 	rdlong	arg01, fp
05168     0C 4E 85 F1 | 	sub	fp, #12
0516c     10 12 06 F1 | 	add	arg01, #16
05170     04 00 00 FF 
05174     34 E4 85 F1 | 	sub	objptr, ##2100
05178     F2 14 02 FB | 	rdlong	arg02, objptr
0517c     01 16 06 F6 | 	mov	arg03, #1
05180     00 18 06 F6 | 	mov	arg04, #0
05184     56 00 00 FF 
05188     70 E5 85 F1 | 	sub	objptr, ##44400
0518c                 | '     return fill(addr, pattern, count, listPtr, 4)
0518c     04 1A 06 F6 | 	mov	arg05, #4
05190     88 30 B1 FD | 	call	#_psram_spin2_fill
05194     20 4E 05 F1 | 	add	fp, #32
05198     A7 12 02 FB | 	rdlong	arg01, fp
0519c     20 4E 85 F1 | 	sub	fp, #32
051a0     14 12 06 F1 | 	add	arg01, #20
051a4     56 00 00 FF 
051a8     70 E5 05 F1 | 	add	objptr, ##44400
051ac     F2 14 02 FB | 	rdlong	arg02, objptr
051b0     01 16 06 F6 | 	mov	arg03, #1
051b4     00 18 06 F6 | 	mov	arg04, #0
051b8     56 00 00 FF 
051bc     70 E5 85 F1 | 	sub	objptr, ##44400
051c0                 | '     return fill(addr, pattern, count, listPtr, 4)
051c0     04 1A 06 F6 | 	mov	arg05, #4
051c4     54 30 B1 FD | 	call	#_psram_spin2_fill
051c8     0B 00 00 FF 
051cc     C0 E4 85 F1 | 	sub	objptr, ##5824
051d0     C4 FC BF FD | 	call	#_save_line
051d4                 | '   ucompiledline(4)=header(4)
051d4                 | '   ucompiledline(5)=lineptr2
051d4                 | '   pslpoke(lineptr2+16,programptr)
051d4                 | '   pslpoke(header(4)+20,programptr)
051d4                 | '   save_line
051d4                 | '   return 0
051d4     00 FA 05 F6 | 	mov	result1, #0
051d8     04 00 90 FD | 	jmp	#LR__0403
051dc                 | LR__0402
051dc     00 FA 05 F6 | 	mov	result1, #0
051e0                 | LR__0403
051e0     A7 F0 03 F6 | 	mov	ptra, fp
051e4     B2 00 A0 FD | 	call	#popregs_
051e8                 | _insertline_ret
051e8     2D 00 64 FD | 	ret
051ec                 | 
051ec                 | ' 
051ec                 | ' sub add_line_at_end(aline) 
051ec                 | _add_line_at_end
051ec     69 00 00 FF 
051f0     5C E4 05 F1 | 	add	objptr, ##53852
051f4     F2 12 62 FC | 	wrlong	arg01, objptr
051f8     04 E4 05 F1 | 	add	objptr, #4
051fc     F2 14 02 FB | 	rdlong	arg02, objptr
05200     03 00 00 FF 
05204     00 E4 85 F1 | 	sub	objptr, ##1536
05208     F2 14 62 FC | 	wrlong	arg02, objptr
0520c     03 00 00 FF 
05210     00 E4 05 F1 | 	add	objptr, ##1536
05214     F2 12 02 FB | 	rdlong	arg01, objptr
05218     14 12 06 F1 | 	add	arg01, #20
0521c     07 00 00 FF 
05220     30 E4 85 F1 | 	sub	objptr, ##3632
05224     F2 14 02 FB | 	rdlong	arg02, objptr
05228     01 16 06 F6 | 	mov	arg03, #1
0522c     00 18 06 F6 | 	mov	arg04, #0
05230     56 00 00 FF 
05234     70 E5 85 F1 | 	sub	objptr, ##44400
05238                 | '     return fill(addr, pattern, count, listPtr, 4)
05238     04 1A 06 F6 | 	mov	arg05, #4
0523c     DC 2F B1 FD | 	call	#_psram_spin2_fill
05240     56 00 00 FF 
05244     70 E5 05 F1 | 	add	objptr, ##44400
05248     F2 14 02 FB | 	rdlong	arg02, objptr
0524c     07 00 00 FF 
05250     30 E4 05 F1 | 	add	objptr, ##3632
05254     F2 14 62 FC | 	wrlong	arg02, objptr
05258     02 00 00 FF 
0525c     FC E5 85 F1 | 	sub	objptr, ##1532
05260     FF FF BF FF 
05264     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05268                 | ' 
05268                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05268                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05268     04 00 00 FF 
0526c     34 E4 85 F1 | 	sub	objptr, ##2100
05270     F2 14 0A FB | 	rdlong	arg02, objptr wz
05274     62 00 00 FF 
05278     30 E4 85 F1 | 	sub	objptr, ##50224
0527c     66 00 00 AF 
05280     60 E4 05 A1 |  if_e	add	objptr, ##52320
05284     FF FF FF AF 
05288     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0528c     66 00 00 AF 
05290     60 E4 85 A1 |  if_e	sub	objptr, ##52320
05294     00 FC BF FD | 	call	#_save_line
05298     62 00 00 FF 
0529c     30 E4 05 F1 | 	add	objptr, ##50224
052a0     F2 12 02 FB | 	rdlong	arg01, objptr
052a4     01 14 66 F6 | 	neg	arg02, #1
052a8     01 16 06 F6 | 	mov	arg03, #1
052ac     00 18 06 F6 | 	mov	arg04, #0
052b0     56 00 00 FF 
052b4     70 E5 85 F1 | 	sub	objptr, ##44400
052b8                 | '     return fill(addr, pattern, count, listPtr, 4)
052b8     04 1A 06 F6 | 	mov	arg05, #4
052bc     5C 2F B1 FD | 	call	#_psram_spin2_fill
052c0     0B 00 00 FF 
052c4     C0 E4 85 F1 | 	sub	objptr, ##5824
052c8                 | _add_line_at_end_ret
052c8     2D 00 64 FD | 	ret
052cc                 | 
052cc                 | ' 
052cc                 | ' function compile_immediate(linetype as ulong) as integer
052cc                 | _compile_immediate
052cc     09 4A 05 F6 | 	mov	COUNT_, #9
052d0     A8 00 A0 FD | 	call	#pushregs_
052d4                 | _compile_immediate_enter
052d4     09 25 0A F6 | 	mov	local04, arg01 wz
052d8     00 26 06 F6 | 	mov	local05, #0
052dc     00 28 06 F6 | 	mov	local06, #0
052e0                 | ' 
052e0                 | ' ' linetype=cont+1, linetype=0 immediate
052e0                 | ' '  : 1: this is the first part of the line that will continue
052e0                 | ' ' 2 - this is the continuation of the line
052e0                 | ' ' 3 - this is the last continued line
052e0                 | ' ' 4 - this is the one and only part
052e0                 | ' 
052e0                 | ' err=0
052e0                 | ' cmd=0
052e0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
052e0     2C 00 90 5D |  if_ne	jmp	#LR__0410
052e4     53 00 00 FF 
052e8     E4 E5 05 F1 | 	add	objptr, ##42980
052ec     F2 28 02 FB | 	rdlong	local06, objptr
052f0     02 00 00 FF 
052f4     34 E4 05 F1 | 	add	objptr, ##1076
052f8     F2 02 68 FC | 	wrlong	#1, objptr
052fc     13 00 00 FF 
05300     38 E4 05 F1 | 	add	objptr, ##9784
05304     F2 00 68 FC | 	wrlong	#0, objptr
05308     69 00 00 FF 
0530c     50 E4 85 F1 | 	sub	objptr, ##53840
05310                 | LR__0410
05310                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05310     02 24 0E F2 | 	cmp	local04, #2 wz
05314     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05318     53 00 00 AF 
0531c     E4 E5 05 A1 |  if_e	add	objptr, ##42980
05320     F2 28 02 AB |  if_e	rdlong	local06, objptr
05324     02 00 00 AF 
05328     34 E4 05 A1 |  if_e	add	objptr, ##1076
0532c     F2 02 68 AC |  if_e	wrlong	#1, objptr
05330     56 00 00 AF 
05334     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05338                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05338     04 24 0E F2 | 	cmp	local04, #4 wz
0533c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05340     2C 00 90 5D |  if_ne	jmp	#LR__0411
05344     53 00 00 FF 
05348     EC E5 05 F1 | 	add	objptr, ##42988
0534c     F2 28 02 FB | 	rdlong	local06, objptr
05350     02 00 00 FF 
05354     2C E4 05 F1 | 	add	objptr, ##1068
05358     F2 04 68 FC | 	wrlong	#2, objptr
0535c     13 00 00 FF 
05360     38 E4 05 F1 | 	add	objptr, ##9784
05364     F2 04 68 FC | 	wrlong	#2, objptr
05368     69 00 00 FF 
0536c     50 E4 85 F1 | 	sub	objptr, ##53840
05370                 | LR__0411
05370                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05370     05 24 0E F2 | 	cmp	local04, #5 wz
05374     40 00 90 5D |  if_ne	jmp	#LR__0412
05378     56 00 00 FF 
0537c     18 E4 05 F1 | 	add	objptr, ##44056
05380     F2 2A 02 FB | 	rdlong	local07, objptr
05384     15 29 02 F6 | 	mov	local06, local07
05388     03 28 66 F0 | 	shl	local06, #3
0538c     02 00 00 FF 
05390     38 E4 85 F1 | 	sub	objptr, ##1080
05394     F2 28 02 F1 | 	add	local06, objptr
05398     04 28 06 F1 | 	add	local06, #4
0539c     14 29 02 FB | 	rdlong	local06, local06
053a0     01 2A 06 F1 | 	add	local07, #1
053a4     02 00 00 FF 
053a8     38 E4 05 F1 | 	add	objptr, ##1080
053ac     F2 2A 62 FC | 	wrlong	local07, objptr
053b0     56 00 00 FF 
053b4     18 E4 85 F1 | 	sub	objptr, ##44056
053b8                 | LR__0412
053b8     00 2C 06 F6 | 	mov	local08, #0
053bc                 | ' vars=0
053bc                 | ' 'print  "In compile_immediate cmd=:", cmd
053bc                 | ' 451 select case cmd
053bc     40 28 0E F2 | 	cmp	local06, #64 wz
053c0     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
053c4     44 03 90 AD |  if_e	jmp	#LR__0460
053c8     4C 28 0E F2 | 	cmp	local06, #76 wz
053cc     84 01 90 AD |  if_e	jmp	#LR__0413
053d0     73 28 0E F2 | 	cmp	local06, #115 wz
053d4     88 01 90 AD |  if_e	jmp	#LR__0414
053d8     74 28 0E F2 | 	cmp	local06, #116 wz
053dc     8C 01 90 AD |  if_e	jmp	#LR__0415
053e0     75 28 0E F2 | 	cmp	local06, #117 wz
053e4     90 01 90 AD |  if_e	jmp	#LR__0416
053e8     4D 28 0E F2 | 	cmp	local06, #77 wz
053ec     1C 03 90 AD |  if_e	jmp	#LR__0460
053f0     42 28 0E F2 | 	cmp	local06, #66 wz
053f4     8C 01 90 AD |  if_e	jmp	#LR__0417
053f8     43 28 0E F2 | 	cmp	local06, #67 wz
053fc     90 01 90 AD |  if_e	jmp	#LR__0418
05400     45 28 0E F2 | 	cmp	local06, #69 wz
05404     94 01 90 AD |  if_e	jmp	#LR__0419
05408     46 28 0E F2 | 	cmp	local06, #70 wz
0540c     98 01 90 AD |  if_e	jmp	#LR__0420
05410     47 28 0E F2 | 	cmp	local06, #71 wz
05414     9C 01 90 AD |  if_e	jmp	#LR__0421
05418     48 28 0E F2 | 	cmp	local06, #72 wz
0541c     A0 01 90 AD |  if_e	jmp	#LR__0422
05420     49 28 0E F2 | 	cmp	local06, #73 wz
05424     A4 01 90 AD |  if_e	jmp	#LR__0423
05428     44 28 0E F2 | 	cmp	local06, #68 wz
0542c     A8 01 90 AD |  if_e	jmp	#LR__0424
05430     4E 28 0E F2 | 	cmp	local06, #78 wz
05434     AC 01 90 AD |  if_e	jmp	#LR__0425
05438     50 28 0E F2 | 	cmp	local06, #80 wz
0543c     C0 01 90 AD |  if_e	jmp	#LR__0427
05440     51 28 0E F2 | 	cmp	local06, #81 wz
05444     C0 01 90 AD |  if_e	jmp	#LR__0428
05448     52 28 0E F2 | 	cmp	local06, #82 wz
0544c     C0 01 90 AD |  if_e	jmp	#LR__0429
05450     59 28 0E F2 | 	cmp	local06, #89 wz
05454     C0 01 90 AD |  if_e	jmp	#LR__0430
05458     55 28 0E F2 | 	cmp	local06, #85 wz
0545c     C0 01 90 AD |  if_e	jmp	#LR__0431
05460     56 28 0E F2 | 	cmp	local06, #86 wz
05464     C0 01 90 AD |  if_e	jmp	#LR__0432
05468     57 28 0E F2 | 	cmp	local06, #87 wz
0546c     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
05470     98 02 90 AD |  if_e	jmp	#LR__0460
05474     58 28 0E F2 | 	cmp	local06, #88 wz
05478     B4 01 90 AD |  if_e	jmp	#LR__0433
0547c     4A 28 0E F2 | 	cmp	local06, #74 wz
05480     B4 01 90 AD |  if_e	jmp	#LR__0434
05484     4B 28 0E F2 | 	cmp	local06, #75 wz
05488     B4 01 90 AD |  if_e	jmp	#LR__0435
0548c     5A 28 0E F2 | 	cmp	local06, #90 wz
05490     B4 01 90 AD |  if_e	jmp	#LR__0436
05494     5C 28 0E F2 | 	cmp	local06, #92 wz
05498     B4 01 90 AD |  if_e	jmp	#LR__0437
0549c     5D 28 0E F2 | 	cmp	local06, #93 wz
054a0     68 02 90 AD |  if_e	jmp	#LR__0460
054a4     5E 28 0E F2 | 	cmp	local06, #94 wz
054a8     B0 01 90 AD |  if_e	jmp	#LR__0438
054ac     5F 28 0E F2 | 	cmp	local06, #95 wz
054b0     B0 01 90 AD |  if_e	jmp	#LR__0439
054b4     60 28 0E F2 | 	cmp	local06, #96 wz
054b8     B0 01 90 AD |  if_e	jmp	#LR__0440
054bc     61 28 0E F2 | 	cmp	local06, #97 wz
054c0     B0 01 90 AD |  if_e	jmp	#LR__0441
054c4     63 28 0E F2 | 	cmp	local06, #99 wz
054c8     B0 01 90 AD |  if_e	jmp	#LR__0442
054cc     68 28 0E F2 | 	cmp	local06, #104 wz
054d0     B0 01 90 AD |  if_e	jmp	#LR__0443
054d4     69 28 0E F2 | 	cmp	local06, #105 wz
054d8     B0 01 90 AD |  if_e	jmp	#LR__0444
054dc     6D 28 0E F2 | 	cmp	local06, #109 wz
054e0     B0 01 90 AD |  if_e	jmp	#LR__0445
054e4     6C 28 0E F2 | 	cmp	local06, #108 wz
054e8     B0 01 90 AD |  if_e	jmp	#LR__0446
054ec     71 28 0E F2 | 	cmp	local06, #113 wz
054f0     B0 01 90 AD |  if_e	jmp	#LR__0447
054f4     79 28 0E F2 | 	cmp	local06, #121 wz
054f8     B0 01 90 AD |  if_e	jmp	#LR__0448
054fc     77 28 0E F2 | 	cmp	local06, #119 wz
05500     B0 01 90 AD |  if_e	jmp	#LR__0449
05504     78 28 0E F2 | 	cmp	local06, #120 wz
05508     B0 01 90 AD |  if_e	jmp	#LR__0450
0550c     7C 28 0E F2 | 	cmp	local06, #124 wz
05510     B0 01 90 AD |  if_e	jmp	#LR__0451
05514     7D 28 0E F2 | 	cmp	local06, #125 wz
05518     B0 01 90 AD |  if_e	jmp	#LR__0452
0551c     7E 28 0E F2 | 	cmp	local06, #126 wz
05520     B0 01 90 AD |  if_e	jmp	#LR__0453
05524     7F 28 0E F2 | 	cmp	local06, #127 wz
05528     B0 01 90 AD |  if_e	jmp	#LR__0454
0552c     80 28 0E F2 | 	cmp	local06, #128 wz
05530     B0 01 90 AD |  if_e	jmp	#LR__0455
05534     72 28 0E F2 | 	cmp	local06, #114 wz
05538     B0 01 90 AD |  if_e	jmp	#LR__0456
0553c     81 28 0E F2 | 	cmp	local06, #129 wz
05540     B0 01 90 AD |  if_e	jmp	#LR__0457
05544     01 00 00 FF 
05548     04 28 0E F2 | 	cmp	local06, ##516 wz
0554c     AC 01 90 AD |  if_e	jmp	#LR__0458
05550     B0 01 90 FD | 	jmp	#LR__0459
05554                 | LR__0413
05554     B4 0F B0 FD | 	call	#_compile_fun_varp
05558     FD 2C 02 F6 | 	mov	local08, result1
0555c     AC 01 90 FD | 	jmp	#LR__0460
05560                 | LR__0414
05560     A8 0F B0 FD | 	call	#_compile_fun_varp
05564     FD 2C 02 F6 | 	mov	local08, result1
05568     A0 01 90 FD | 	jmp	#LR__0460
0556c                 | LR__0415
0556c     9C 0F B0 FD | 	call	#_compile_fun_varp
05570     FD 2C 02 F6 | 	mov	local08, result1
05574     94 01 90 FD | 	jmp	#LR__0460
05578                 | LR__0416
05578     90 0F B0 FD | 	call	#_compile_fun_varp
0557c     FD 2C 02 F6 | 	mov	local08, result1
05580     88 01 90 FD | 	jmp	#LR__0460
05584                 | LR__0417
05584     A4 0B B0 FD | 	call	#_compile_fun_2p
05588     FD 26 02 F6 | 	mov	local05, result1
0558c     7C 01 90 FD | 	jmp	#LR__0460
05590                 | LR__0418
05590     98 0B B0 FD | 	call	#_compile_fun_2p
05594     FD 26 02 F6 | 	mov	local05, result1
05598     70 01 90 FD | 	jmp	#LR__0460
0559c                 | LR__0419
0559c     00 0C B0 FD | 	call	#_compile_fun_3p
055a0     FD 26 02 F6 | 	mov	local05, result1
055a4     64 01 90 FD | 	jmp	#LR__0460
055a8                 | LR__0420
055a8     F4 0B B0 FD | 	call	#_compile_fun_3p
055ac     FD 26 02 F6 | 	mov	local05, result1
055b0     58 01 90 FD | 	jmp	#LR__0460
055b4                 | LR__0421
055b4     B4 0C B0 FD | 	call	#_compile_fun_4p
055b8     FD 26 02 F6 | 	mov	local05, result1
055bc     4C 01 90 FD | 	jmp	#LR__0460
055c0                 | LR__0422
055c0     A8 0C B0 FD | 	call	#_compile_fun_4p
055c4     FD 26 02 F6 | 	mov	local05, result1
055c8     40 01 90 FD | 	jmp	#LR__0460
055cc                 | LR__0423
055cc     BC 2D B0 FD | 	call	#_expr
055d0                 | ' 
055d0                 | ' 
055d0                 | ' expr()
055d0                 | ' return 0
055d0     00 26 06 F6 | 	mov	local05, #0
055d4     34 01 90 FD | 	jmp	#LR__0460
055d8                 | LR__0424
055d8     5C 10 B0 FD | 	call	#_compile_print
055dc     FD 26 02 F6 | 	mov	local05, result1
055e0     E4 01 90 FD | 	jmp	#LR__0461
055e4                 | LR__0425
055e4     01 24 16 F2 | 	cmp	local04, #1 wc
055e8     08 00 90 CD |  if_b	jmp	#LR__0426
055ec     3C 2A B0 FD | 	call	#_compile_goto
055f0     D4 01 90 FD | 	jmp	#LR__0461
055f4                 | LR__0426
055f4     19 12 06 F6 | 	mov	arg01, #25
055f8     B4 00 B1 FD | 	call	#_printerror
055fc     C8 01 90 FD | 	jmp	#LR__0461
05600                 | LR__0427
05600     88 2D B0 FD | 	call	#_expr
05604                 | ' 
05604                 | ' 
05604                 | ' expr()
05604                 | ' return 0
05604     04 01 90 FD | 	jmp	#LR__0460
05608                 | LR__0428
05608     80 2D B0 FD | 	call	#_expr
0560c                 | ' 
0560c                 | ' 
0560c                 | ' expr()
0560c                 | ' return 0
0560c     FC 00 90 FD | 	jmp	#LR__0460
05610                 | LR__0429
05610     78 2D B0 FD | 	call	#_expr
05614                 | ' 
05614                 | ' 
05614                 | ' expr()
05614                 | ' return 0
05614     F4 00 90 FD | 	jmp	#LR__0460
05618                 | LR__0430
05618     70 2D B0 FD | 	call	#_expr
0561c                 | ' 
0561c                 | ' 
0561c                 | ' expr()
0561c                 | ' return 0
0561c     EC 00 90 FD | 	jmp	#LR__0460
05620                 | LR__0431
05620     94 0F B0 FD | 	call	#_compile_int_fun_2p
05624     E4 00 90 FD | 	jmp	#LR__0460
05628                 | LR__0432
05628     18 0A B0 FD | 	call	#_compile_converttoint
0562c                 | ' return err
0562c     DC 00 90 FD | 	jmp	#LR__0460
05630                 | LR__0433
05630     DC 16 B0 FD | 	call	#_compile_if
05634     90 01 90 FD | 	jmp	#LR__0461
05638                 | LR__0434
05638     18 20 B0 FD | 	call	#_compile_for
0563c     88 01 90 FD | 	jmp	#LR__0461
05640                 | LR__0435
05640     38 28 B0 FD | 	call	#_compile_next
05644     80 01 90 FD | 	jmp	#LR__0461
05648                 | LR__0436
05648     04 18 B0 FD | 	call	#_compile_else
0564c     78 01 90 FD | 	jmp	#LR__0461
05650                 | LR__0437
05650     D8 0A B0 FD | 	call	#_compile_fun_2p
05654     FD 26 02 F6 | 	mov	local05, result1
05658     B0 00 90 FD | 	jmp	#LR__0460
0565c                 | LR__0438
0565c     2C 2D B0 FD | 	call	#_expr
05660                 | ' 
05660                 | ' 
05660                 | ' expr()
05660                 | ' return 0
05660     A8 00 90 FD | 	jmp	#LR__0460
05664                 | LR__0439
05664     24 2D B0 FD | 	call	#_expr
05668                 | ' 
05668                 | ' 
05668                 | ' expr()
05668                 | ' return 0
05668     A0 00 90 FD | 	jmp	#LR__0460
0566c                 | LR__0440
0566c     1C 2D B0 FD | 	call	#_expr
05670                 | ' 
05670                 | ' 
05670                 | ' expr()
05670                 | ' return 0
05670     98 00 90 FD | 	jmp	#LR__0460
05674                 | LR__0441
05674     14 2D B0 FD | 	call	#_expr
05678                 | ' 
05678                 | ' 
05678                 | ' expr()
05678                 | ' return 0
05678     90 00 90 FD | 	jmp	#LR__0460
0567c                 | LR__0442
0567c     0C 2D B0 FD | 	call	#_expr
05680                 | ' 
05680                 | ' 
05680                 | ' expr()
05680                 | ' return 0
05680     88 00 90 FD | 	jmp	#LR__0460
05684                 | LR__0443
05684     04 2D B0 FD | 	call	#_expr
05688                 | ' 
05688                 | ' 
05688                 | ' expr()
05688                 | ' return 0
05688     80 00 90 FD | 	jmp	#LR__0460
0568c                 | LR__0444
0568c     FC 2C B0 FD | 	call	#_expr
05690                 | ' 
05690                 | ' 
05690                 | ' expr()
05690                 | ' return 0
05690     78 00 90 FD | 	jmp	#LR__0460
05694                 | LR__0445
05694     08 0B B0 FD | 	call	#_compile_fun_3p
05698     70 00 90 FD | 	jmp	#LR__0460
0569c                 | LR__0446
0569c     F0 0C B0 FD | 	call	#_compile_fun_5p
056a0     68 00 90 FD | 	jmp	#LR__0460
056a4                 | LR__0447
056a4     C4 0B B0 FD | 	call	#_compile_fun_4p
056a8     60 00 90 FD | 	jmp	#LR__0460
056ac                 | LR__0448
056ac     7C 0A B0 FD | 	call	#_compile_fun_2p
056b0     58 00 90 FD | 	jmp	#LR__0460
056b4                 | LR__0449
056b4     74 0A B0 FD | 	call	#_compile_fun_2p
056b8     50 00 90 FD | 	jmp	#LR__0460
056bc                 | LR__0450
056bc     6C 0A B0 FD | 	call	#_compile_fun_2p
056c0     48 00 90 FD | 	jmp	#LR__0460
056c4                 | LR__0451
056c4     C4 2C B0 FD | 	call	#_expr
056c8                 | ' 
056c8                 | ' 
056c8                 | ' expr()
056c8                 | ' return 0
056c8     40 00 90 FD | 	jmp	#LR__0460
056cc                 | LR__0452
056cc     BC 2C B0 FD | 	call	#_expr
056d0                 | ' 
056d0                 | ' 
056d0                 | ' expr()
056d0                 | ' return 0
056d0     38 00 90 FD | 	jmp	#LR__0460
056d4                 | LR__0453
056d4     B4 2C B0 FD | 	call	#_expr
056d8                 | ' 
056d8                 | ' 
056d8                 | ' expr()
056d8                 | ' return 0
056d8     30 00 90 FD | 	jmp	#LR__0460
056dc                 | LR__0454
056dc     8C 0B B0 FD | 	call	#_compile_fun_4p
056e0     28 00 90 FD | 	jmp	#LR__0460
056e4                 | LR__0455
056e4     A4 2C B0 FD | 	call	#_expr
056e8                 | ' 
056e8                 | ' 
056e8                 | ' expr()
056e8                 | ' return 0
056e8     20 00 90 FD | 	jmp	#LR__0460
056ec                 | LR__0456
056ec     88 18 B0 FD | 	call	#_compile_dim
056f0     D4 00 90 FD | 	jmp	#LR__0461
056f4                 | LR__0457
056f4     34 0A B0 FD | 	call	#_compile_fun_2p
056f8     10 00 90 FD | 	jmp	#LR__0460
056fc                 | LR__0458
056fc     20 01 B0 FD | 	call	#_compile_array_assign
05700     C4 00 90 FD | 	jmp	#LR__0461
05704                 | LR__0459
05704     80 08 B0 FD | 	call	#_compile_unknown
05708     BC 00 90 FD | 	jmp	#LR__0461
0570c                 | LR__0460
0570c     14 23 02 F6 | 	mov	local03, local06
05710     16 1F 02 F6 | 	mov	local01, local08
05714     0F 2B 02 F6 | 	mov	local07, local01
05718     10 2F 02 F6 | 	mov	local09, local02
0571c     11 1F 02 F6 | 	mov	local01, local03
05720     69 00 00 FF 
05724     50 E4 05 F1 | 	add	objptr, ##53840
05728     F2 2C 02 FB | 	rdlong	local08, objptr
0572c     16 29 02 F6 | 	mov	local06, local08
05730     01 28 66 F0 | 	shl	local06, #1
05734     16 29 02 F1 | 	add	local06, local08
05738     02 28 66 F0 | 	shl	local06, #2
0573c     03 00 00 FF 
05740     00 E4 85 F1 | 	sub	objptr, ##1536
05744     F2 28 02 F1 | 	add	local06, objptr
05748     14 2B 62 FC | 	wrlong	local07, local06
0574c     03 00 00 FF 
05750     00 E4 05 F1 | 	add	objptr, ##1536
05754     F2 2C 02 FB | 	rdlong	local08, objptr
05758     16 2B 02 F6 | 	mov	local07, local08
0575c     01 2A 66 F0 | 	shl	local07, #1
05760     16 2B 02 F1 | 	add	local07, local08
05764     02 2A 66 F0 | 	shl	local07, #2
05768     03 00 00 FF 
0576c     00 E4 85 F1 | 	sub	objptr, ##1536
05770     F2 2A 02 F1 | 	add	local07, objptr
05774     04 2A 06 F1 | 	add	local07, #4
05778     15 2F 62 FC | 	wrlong	local09, local07
0577c     03 00 00 FF 
05780     00 E4 05 F1 | 	add	objptr, ##1536
05784     F2 2E 02 FB | 	rdlong	local09, objptr
05788     17 2D 02 F6 | 	mov	local08, local09
0578c     01 2C 66 F0 | 	shl	local08, #1
05790     17 2D 02 F1 | 	add	local08, local09
05794     02 2C 66 F0 | 	shl	local08, #2
05798     03 00 00 FF 
0579c     00 E4 85 F1 | 	sub	objptr, ##1536
057a0     F2 2C 02 F1 | 	add	local08, objptr
057a4     08 2C 06 F1 | 	add	local08, #8
057a8     16 1F 62 FC | 	wrlong	local01, local08
057ac     03 00 00 FF 
057b0     00 E4 05 F1 | 	add	objptr, ##1536
057b4     F2 2A 02 FB | 	rdlong	local07, objptr
057b8     01 2A 06 F1 | 	add	local07, #1
057bc     F2 2A 62 FC | 	wrlong	local07, objptr
057c0     69 00 00 FF 
057c4     50 E4 85 F1 | 	sub	objptr, ##53840
057c8                 | LR__0461
057c8                 | ' 
057c8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
057c8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
057c8     00 24 0E F2 | 	cmp	local04, #0 wz
057cc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
057d0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
057d4     38 00 90 5D |  if_ne	jmp	#LR__0462
057d8     69 00 00 FF 
057dc     50 E4 05 F1 | 	add	objptr, ##53840
057e0     F2 2E 02 FB | 	rdlong	local09, objptr
057e4     17 1F 02 F6 | 	mov	local01, local09
057e8     01 1E 66 F0 | 	shl	local01, #1
057ec     17 1F 02 F1 | 	add	local01, local09
057f0     02 1E 66 F0 | 	shl	local01, #2
057f4     03 00 00 FF 
057f8     00 E4 85 F1 | 	sub	objptr, ##1536
057fc     F2 1E 02 F1 | 	add	local01, objptr
05800     08 1E 06 F1 | 	add	local01, #8
05804     0F FD 6B FC | 	wrlong	#510, local01
05808     66 00 00 FF 
0580c     50 E4 85 F1 | 	sub	objptr, ##52304
05810                 | LR__0462
05810                 | ' 
05810                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05810                 | ' return err
05810     13 FB 01 F6 | 	mov	result1, local05
05814     A7 F0 03 F6 | 	mov	ptra, fp
05818     B2 00 A0 FD | 	call	#popregs_
0581c                 | _compile_immediate_ret
0581c     2D 00 64 FD | 	ret
05820                 | 
05820                 | ' 
05820                 | ' sub compile_array_assign
05820                 | _compile_array_assign
05820     0A 4A 05 F6 | 	mov	COUNT_, #10
05824     A8 00 A0 FD | 	call	#pushregs_
05828     00 24 06 F6 | 	mov	local04, #0
0582c     56 00 00 FF 
05830     18 E4 05 F1 | 	add	objptr, ##44056
05834     F2 26 02 FB | 	rdlong	local05, objptr
05838     13 FB 01 F6 | 	mov	result1, local05
0583c     01 FA 85 F1 | 	sub	result1, #1
05840     03 FA 65 F0 | 	shl	result1, #3
05844     02 00 00 FF 
05848     38 E4 85 F1 | 	sub	objptr, ##1080
0584c     F2 FA 01 F1 | 	add	result1, objptr
05850     FD 28 02 FB | 	rdlong	local06, result1
05854                 | ' numpar=0
05854                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05854                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05854                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05854                 | ' if lparts(ct).token=token_lpar then
05854     03 26 66 F0 | 	shl	local05, #3
05858     F2 26 02 F1 | 	add	local05, objptr
0585c     04 26 06 F1 | 	add	local05, #4
05860     13 27 02 FB | 	rdlong	local05, local05
05864     15 26 0E F2 | 	cmp	local05, #21 wz
05868     53 00 00 FF 
0586c     E0 E5 85 F1 | 	sub	objptr, ##42976
05870     D4 01 90 5D |  if_ne	jmp	#LR__0474
05874     56 00 00 FF 
05878     18 E4 05 F1 | 	add	objptr, ##44056
0587c     F2 2A 02 FB | 	rdlong	local07, objptr
05880     01 2A 06 F1 | 	add	local07, #1
05884     F2 2A 62 FC | 	wrlong	local07, objptr
05888     56 00 00 FF 
0588c     18 E4 85 F1 | 	sub	objptr, ##44056
05890                 | '   ct+=1 											' omit this lpar, this is for expr list
05890                 | '   do
05890                 | LR__0470
05890     F8 2A B0 FD | 	call	#_expr
05894     56 00 00 FF 
05898     18 E4 05 F1 | 	add	objptr, ##44056
0589c     F2 26 02 FB | 	rdlong	local05, objptr
058a0     01 26 06 F1 | 	add	local05, #1
058a4     F2 26 62 FC | 	wrlong	local05, objptr
058a8     01 24 06 F1 | 	add	local04, #1
058ac     01 26 86 F1 | 	sub	local05, #1
058b0     03 26 66 F0 | 	shl	local05, #3
058b4     02 00 00 FF 
058b8     38 E4 85 F1 | 	sub	objptr, ##1080
058bc     F2 26 02 F1 | 	add	local05, objptr
058c0     04 26 06 F1 | 	add	local05, #4
058c4     13 2B 02 FB | 	rdlong	local07, local05
058c8     14 2A 0E F2 | 	cmp	local07, #20 wz
058cc     53 00 00 FF 
058d0     E0 E5 85 F1 | 	sub	objptr, ##42976
058d4     34 00 90 AD |  if_e	jmp	#LR__0471
058d8     56 00 00 FF 
058dc     18 E4 05 F1 | 	add	objptr, ##44056
058e0     F2 2A 02 FB | 	rdlong	local07, objptr
058e4     03 2A 66 F0 | 	shl	local07, #3
058e8     02 00 00 FF 
058ec     38 E4 85 F1 | 	sub	objptr, ##1080
058f0     F2 2A 02 F1 | 	add	local07, objptr
058f4     04 2A 06 F1 | 	add	local07, #4
058f8     15 2B 02 FB | 	rdlong	local07, local07
058fc     FE 2B 0E F2 | 	cmp	local07, #510 wz
05900     53 00 00 FF 
05904     E0 E5 85 F1 | 	sub	objptr, ##42976
05908     84 FF 9F 5D |  if_ne	jmp	#LR__0470
0590c                 | LR__0471
0590c     56 00 00 FF 
05910     18 E4 05 F1 | 	add	objptr, ##44056
05914     F2 2A 02 FB | 	rdlong	local07, objptr
05918     01 2A 06 F1 | 	add	local07, #1
0591c     F2 2A 62 FC | 	wrlong	local07, objptr
05920     56 00 00 FF 
05924     18 E4 85 F1 | 	sub	objptr, ##44056
05928     60 2A B0 FD | 	call	#_expr
0592c     01 2C 66 F6 | 	neg	local08, #1
05930     00 2E 06 F6 | 	mov	local09, #0
05934                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05934                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05934                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05934                 | ' ct+=1 : expr()
05934                 | ' ' now find the vae
05934                 | ' 
05934                 | ' j=-1 : i=0 : do : 
05934                 | LR__0472
05934                 | '   if variables(i).name=varname$ then j=i: exit loop
05934     17 27 02 F6 | 	mov	local05, local09
05938     04 26 66 F0 | 	shl	local05, #4
0593c     33 00 00 FF 
05940     DC E5 05 F1 | 	add	objptr, ##26588
05944     F2 26 02 F1 | 	add	local05, objptr
05948     13 13 02 FB | 	rdlong	arg01, local05
0594c     14 15 02 F6 | 	mov	arg02, local06
05950     33 00 00 FF 
05954     DC E5 85 F1 | 	sub	objptr, ##26588
05958     A0 32 B1 FD | 	call	#__system___string_cmp
0595c     00 FA 0D F2 | 	cmp	result1, #0 wz
05960     17 2D 02 A6 |  if_e	mov	local08, local09
05964     20 00 90 AD |  if_e	jmp	#LR__0473
05968     01 2E 06 F1 | 	add	local09, #1
0596c     53 00 00 FF 
05970     DC E5 05 F1 | 	add	objptr, ##42972
05974     F2 2A 02 FB | 	rdlong	local07, objptr
05978     53 00 00 FF 
0597c     DC E5 85 F1 | 	sub	objptr, ##42972
05980     15 2F 5A F2 | 	cmps	local09, local07 wcz
05984     AC FF 9F ED |  if_be	jmp	#LR__0472
05988                 | LR__0473
05988     16 1F 02 F6 | 	mov	local01, local08
0598c     12 21 02 F6 | 	mov	local02, local04
05990     17 22 06 F6 | 	mov	local03, #23
05994     0F 2B 02 F6 | 	mov	local07, local01
05998     10 31 02 F6 | 	mov	local10, local02
0599c     11 2D 02 F6 | 	mov	local08, local03
059a0     69 00 00 FF 
059a4     50 E4 05 F1 | 	add	objptr, ##53840
059a8     F2 1E 02 FB | 	rdlong	local01, objptr
059ac     0F 2F 02 F6 | 	mov	local09, local01
059b0     01 2E 66 F0 | 	shl	local09, #1
059b4     0F 2F 02 F1 | 	add	local09, local01
059b8     02 2E 66 F0 | 	shl	local09, #2
059bc     03 00 00 FF 
059c0     00 E4 85 F1 | 	sub	objptr, ##1536
059c4     F2 2E 02 F1 | 	add	local09, objptr
059c8     17 2B 62 FC | 	wrlong	local07, local09
059cc     03 00 00 FF 
059d0     00 E4 05 F1 | 	add	objptr, ##1536
059d4     F2 1E 02 FB | 	rdlong	local01, objptr
059d8     0F 2F 02 F6 | 	mov	local09, local01
059dc     01 2E 66 F0 | 	shl	local09, #1
059e0     0F 2F 02 F1 | 	add	local09, local01
059e4     02 2E 66 F0 | 	shl	local09, #2
059e8     03 00 00 FF 
059ec     00 E4 85 F1 | 	sub	objptr, ##1536
059f0     F2 2E 02 F1 | 	add	local09, objptr
059f4     04 2E 06 F1 | 	add	local09, #4
059f8     17 31 62 FC | 	wrlong	local10, local09
059fc     03 00 00 FF 
05a00     00 E4 05 F1 | 	add	objptr, ##1536
05a04     F2 30 02 FB | 	rdlong	local10, objptr
05a08     18 1F 02 F6 | 	mov	local01, local10
05a0c     01 1E 66 F0 | 	shl	local01, #1
05a10     18 1F 02 F1 | 	add	local01, local10
05a14     02 1E 66 F0 | 	shl	local01, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 1E 02 F1 | 	add	local01, objptr
05a24     08 1E 06 F1 | 	add	local01, #8
05a28     0F 2D 62 FC | 	wrlong	local08, local01
05a2c     03 00 00 FF 
05a30     00 E4 05 F1 | 	add	objptr, ##1536
05a34     F2 2A 02 FB | 	rdlong	local07, objptr
05a38     01 2A 06 F1 | 	add	local07, #1
05a3c     F2 2A 62 FC | 	wrlong	local07, objptr
05a40     69 00 00 FF 
05a44     50 E4 85 F1 | 	sub	objptr, ##53840
05a48                 | LR__0474
05a48     A7 F0 03 F6 | 	mov	ptra, fp
05a4c     B2 00 A0 FD | 	call	#popregs_
05a50                 | _compile_array_assign_ret
05a50     2D 00 64 FD | 	ret
05a54                 | 
05a54                 | ' 
05a54                 | ' 
05a54                 | ' sub compile_immediate_assign(linetype as ulong)
05a54                 | _compile_immediate_assign
05a54     09 4A 05 F6 | 	mov	COUNT_, #9
05a58     A8 00 A0 FD | 	call	#pushregs_
05a5c     09 25 0A F6 | 	mov	local04, arg01 wz
05a60     FF 22 06 F6 | 	mov	local03, #255
05a64     01 26 66 F6 | 	neg	local05, #1
05a68                 | ' 
05a68                 | ' t1.result_type=result_error : t1.result.uresult=0
05a68                 | ' i=-1: j=-1
05a68                 | ' 
05a68                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
05a68     2C 00 90 5D |  if_ne	jmp	#LR__0480
05a6c     53 00 00 FF 
05a70     E0 E5 05 F1 | 	add	objptr, ##42976
05a74     F2 28 02 FB | 	rdlong	local06, objptr
05a78     02 00 00 FF 
05a7c     38 E4 05 F1 | 	add	objptr, ##1080
05a80     F2 04 68 FC | 	wrlong	#2, objptr
05a84     13 00 00 FF 
05a88     38 E4 05 F1 | 	add	objptr, ##9784
05a8c     F2 00 68 FC | 	wrlong	#0, objptr
05a90     69 00 00 FF 
05a94     50 E4 85 F1 | 	sub	objptr, ##53840
05a98                 | LR__0480
05a98                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
05a98     02 24 0E F2 | 	cmp	local04, #2 wz
05a9c     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05aa0     53 00 00 AF 
05aa4     E0 E5 05 A1 |  if_e	add	objptr, ##42976
05aa8     F2 28 02 AB |  if_e	rdlong	local06, objptr
05aac     02 00 00 AF 
05ab0     38 E4 05 A1 |  if_e	add	objptr, ##1080
05ab4     F2 04 68 AC |  if_e	wrlong	#2, objptr
05ab8     56 00 00 AF 
05abc     18 E4 85 A1 |  if_e	sub	objptr, ##44056
05ac0                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
05ac0     04 24 0E F2 | 	cmp	local04, #4 wz
05ac4     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05ac8     2C 00 90 5D |  if_ne	jmp	#LR__0481
05acc     53 00 00 FF 
05ad0     E8 E5 05 F1 | 	add	objptr, ##42984
05ad4     F2 28 02 FB | 	rdlong	local06, objptr
05ad8     02 00 00 FF 
05adc     30 E4 05 F1 | 	add	objptr, ##1072
05ae0     F2 06 68 FC | 	wrlong	#3, objptr
05ae4     13 00 00 FF 
05ae8     38 E4 05 F1 | 	add	objptr, ##9784
05aec     F2 04 68 FC | 	wrlong	#2, objptr
05af0     69 00 00 FF 
05af4     50 E4 85 F1 | 	sub	objptr, ##53840
05af8                 | LR__0481
05af8                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
05af8     05 24 0E F2 | 	cmp	local04, #5 wz
05afc     3C 00 90 5D |  if_ne	jmp	#LR__0482
05b00     56 00 00 FF 
05b04     18 E4 05 F1 | 	add	objptr, ##44056
05b08     F2 FA 01 FB | 	rdlong	result1, objptr
05b0c     FD 28 02 F6 | 	mov	local06, result1
05b10     03 28 66 F0 | 	shl	local06, #3
05b14     02 00 00 FF 
05b18     38 E4 85 F1 | 	sub	objptr, ##1080
05b1c     F2 28 02 F1 | 	add	local06, objptr
05b20     14 29 02 FB | 	rdlong	local06, local06
05b24     02 FA 05 F1 | 	add	result1, #2
05b28     02 00 00 FF 
05b2c     38 E4 05 F1 | 	add	objptr, ##1080
05b30     F2 FA 61 FC | 	wrlong	result1, objptr
05b34     56 00 00 FF 
05b38     18 E4 85 F1 | 	sub	objptr, ##44056
05b3c                 | LR__0482
05b3c     14 13 02 F6 | 	mov	arg01, local06
05b40     01 14 06 F6 | 	mov	arg02, #1
05b44     20 51 B1 FD | 	call	#__system__Right_S
05b48     40 28 B0 FD | 	call	#_expr
05b4c                 | '  
05b4c                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05b4c                 | ' 
05b4c                 | ' suffix2$=right$(varname2$,1)
05b4c                 | ' expr()
05b4c                 | ' 
05b4c                 | ' 
05b4c                 | ' if varnum>0 then
05b4c     53 00 00 FF 
05b50     DC E5 05 F1 | 	add	objptr, ##42972
05b54     F2 2A 02 FB | 	rdlong	local07, objptr
05b58     53 00 00 FF 
05b5c     DC E5 85 F1 | 	sub	objptr, ##42972
05b60     01 2A 56 F2 | 	cmps	local07, #1 wc
05b64     58 00 90 CD |  if_b	jmp	#LR__0485
05b68                 | '   for i=0 to varnum-1
05b68     00 2C 06 F6 | 	mov	local08, #0
05b6c     53 00 00 FF 
05b70     DC E5 05 F1 | 	add	objptr, ##42972
05b74     F2 2E 02 FB | 	rdlong	local09, objptr
05b78     53 00 00 FF 
05b7c     DC E5 85 F1 | 	sub	objptr, ##42972
05b80                 | LR__0483
05b80     17 2D 52 F2 | 	cmps	local08, local09 wc
05b84     38 00 90 3D |  if_ae	jmp	#LR__0484
05b88                 | '     if variables(i).name=varname2$ then j=i : exit
05b88     16 2B 02 F6 | 	mov	local07, local08
05b8c     04 2A 66 F0 | 	shl	local07, #4
05b90     33 00 00 FF 
05b94     DC E5 05 F1 | 	add	objptr, ##26588
05b98     F2 2A 02 F1 | 	add	local07, objptr
05b9c     15 13 02 FB | 	rdlong	arg01, local07
05ba0     14 15 02 F6 | 	mov	arg02, local06
05ba4     33 00 00 FF 
05ba8     DC E5 85 F1 | 	sub	objptr, ##26588
05bac     4C 30 B1 FD | 	call	#__system___string_cmp
05bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bb4     16 27 02 A6 |  if_e	mov	local05, local08
05bb8     01 2C 06 51 |  if_ne	add	local08, #1
05bbc     C0 FF 9F 5D |  if_ne	jmp	#LR__0483
05bc0                 | LR__0484
05bc0                 | LR__0485
05bc0                 | ' if  j=-1 andalso varnum<maxvars then   
05bc0     FF FF 7F FF 
05bc4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
05bc8     60 00 90 5D |  if_ne	jmp	#LR__0486
05bcc     53 00 00 FF 
05bd0     DC E5 05 F1 | 	add	objptr, ##42972
05bd4     F2 2A 02 FB | 	rdlong	local07, objptr
05bd8     53 00 00 FF 
05bdc     DC E5 85 F1 | 	sub	objptr, ##42972
05be0     01 00 00 FF 
05be4     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
05be8     40 00 90 3D |  if_ae	jmp	#LR__0486
05bec     53 00 00 FF 
05bf0     DC E5 05 F1 | 	add	objptr, ##42972
05bf4     F2 2E 02 FB | 	rdlong	local09, objptr
05bf8     04 2E 66 F0 | 	shl	local09, #4
05bfc     20 00 00 FF 
05c00     00 E4 85 F1 | 	sub	objptr, ##16384
05c04     F2 2E 02 F1 | 	add	local09, objptr
05c08     17 29 62 FC | 	wrlong	local06, local09
05c0c     20 00 00 FF 
05c10     00 E4 05 F1 | 	add	objptr, ##16384
05c14     F2 2A 02 FB | 	rdlong	local07, objptr
05c18     15 27 02 F6 | 	mov	local05, local07
05c1c     01 2A 06 F1 | 	add	local07, #1
05c20     F2 2A 62 FC | 	wrlong	local07, objptr
05c24     53 00 00 FF 
05c28     DC E5 85 F1 | 	sub	objptr, ##42972
05c2c                 | LR__0486
05c2c     13 1F 02 F6 | 	mov	local01, local05
05c30     17 22 06 F6 | 	mov	local03, #23
05c34     0F 2B 02 F6 | 	mov	local07, local01
05c38     10 2F 02 F6 | 	mov	local09, local02
05c3c     11 1F 02 F6 | 	mov	local01, local03
05c40     69 00 00 FF 
05c44     50 E4 05 F1 | 	add	objptr, ##53840
05c48     F2 2C 02 FB | 	rdlong	local08, objptr
05c4c     16 29 02 F6 | 	mov	local06, local08
05c50     01 28 66 F0 | 	shl	local06, #1
05c54     16 29 02 F1 | 	add	local06, local08
05c58     02 28 66 F0 | 	shl	local06, #2
05c5c     03 00 00 FF 
05c60     00 E4 85 F1 | 	sub	objptr, ##1536
05c64     F2 28 02 F1 | 	add	local06, objptr
05c68     14 2B 62 FC | 	wrlong	local07, local06
05c6c     03 00 00 FF 
05c70     00 E4 05 F1 | 	add	objptr, ##1536
05c74     F2 2C 02 FB | 	rdlong	local08, objptr
05c78     16 2B 02 F6 | 	mov	local07, local08
05c7c     01 2A 66 F0 | 	shl	local07, #1
05c80     16 2B 02 F1 | 	add	local07, local08
05c84     02 2A 66 F0 | 	shl	local07, #2
05c88     03 00 00 FF 
05c8c     00 E4 85 F1 | 	sub	objptr, ##1536
05c90     F2 2A 02 F1 | 	add	local07, objptr
05c94     04 2A 06 F1 | 	add	local07, #4
05c98     15 2F 62 FC | 	wrlong	local09, local07
05c9c     03 00 00 FF 
05ca0     00 E4 05 F1 | 	add	objptr, ##1536
05ca4     F2 2E 02 FB | 	rdlong	local09, objptr
05ca8     17 2D 02 F6 | 	mov	local08, local09
05cac     01 2C 66 F0 | 	shl	local08, #1
05cb0     17 2D 02 F1 | 	add	local08, local09
05cb4     02 2C 66 F0 | 	shl	local08, #2
05cb8     03 00 00 FF 
05cbc     00 E4 85 F1 | 	sub	objptr, ##1536
05cc0     F2 2C 02 F1 | 	add	local08, objptr
05cc4     08 2C 06 F1 | 	add	local08, #8
05cc8     16 1F 62 FC | 	wrlong	local01, local08
05ccc     03 00 00 FF 
05cd0     00 E4 05 F1 | 	add	objptr, ##1536
05cd4     F2 2A 02 FB | 	rdlong	local07, objptr
05cd8     01 2A 06 F1 | 	add	local07, #1
05cdc     F2 2A 62 FC | 	wrlong	local07, objptr
05ce0     69 00 00 FF 
05ce4     50 E4 85 F1 | 	sub	objptr, ##53840
05ce8                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
05ce8                 | ' 
05ce8                 | ' 
05ce8                 | ' 
05ce8                 | ' 
05ce8                 | ' 
05ce8                 | ' 
05ce8                 | ' compiledline(lineptr)=t1:  lineptr+=1 
05ce8                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
05ce8     00 24 0E F2 | 	cmp	local04, #0 wz
05cec     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05cf0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05cf4     38 00 90 5D |  if_ne	jmp	#LR__0487
05cf8     69 00 00 FF 
05cfc     50 E4 05 F1 | 	add	objptr, ##53840
05d00     F2 1E 02 FB | 	rdlong	local01, objptr
05d04     0F 2F 02 F6 | 	mov	local09, local01
05d08     01 2E 66 F0 | 	shl	local09, #1
05d0c     0F 2F 02 F1 | 	add	local09, local01
05d10     02 2E 66 F0 | 	shl	local09, #2
05d14     03 00 00 FF 
05d18     00 E4 85 F1 | 	sub	objptr, ##1536
05d1c     F2 2E 02 F1 | 	add	local09, objptr
05d20     08 2E 06 F1 | 	add	local09, #8
05d24     17 FD 6B FC | 	wrlong	#510, local09
05d28     66 00 00 FF 
05d2c     50 E4 85 F1 | 	sub	objptr, ##52304
05d30                 | LR__0487
05d30     A7 F0 03 F6 | 	mov	ptra, fp
05d34     B2 00 A0 FD | 	call	#popregs_
05d38                 | _compile_immediate_assign_ret
05d38     2D 00 64 FD | 	ret
05d3c                 | 
05d3c                 | ' 
05d3c                 | ' ' ------------------ compile the line that is calling a command 
05d3c                 | ' 
05d3c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05d3c                 | _compile
05d3c     04 4A 05 F6 | 	mov	COUNT_, #4
05d40     A8 00 A0 FD | 	call	#pushregs_
05d44     09 1F 0A F6 | 	mov	local01, arg01 wz
05d48     0A 21 02 F6 | 	mov	local02, arg02
05d4c     0B 23 02 F6 | 	mov	local03, arg03
05d50                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05d50                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05d50                 | '  
05d50                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05d50                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05d50     0C 00 90 5D |  if_ne	jmp	#LR__0490
05d54     00 12 06 F6 | 	mov	arg01, #0
05d58     70 F5 BF FD | 	call	#_compile_immediate
05d5c     A0 00 90 FD | 	jmp	#LR__0497
05d60                 | LR__0490
05d60     66 00 00 FF 
05d64     50 E4 05 F1 | 	add	objptr, ##52304
05d68     F2 1E 62 FC | 	wrlong	local01, objptr
05d6c     04 E4 05 F1 | 	add	objptr, #4
05d70     F2 20 62 FC | 	wrlong	local02, objptr
05d74     66 00 00 FF 
05d78     54 E4 85 F1 | 	sub	objptr, ##52308
05d7c     11 13 02 F6 | 	mov	arg01, local03
05d80     01 12 06 F1 | 	add	arg01, #1
05d84     44 F5 BF FD | 	call	#_compile_immediate
05d88     FD 24 0A F6 | 	mov	local04, result1 wz
05d8c                 | ' 
05d8c                 | ' ucompiledline(0)=alinemajor
05d8c                 | ' ucompiledline(1)=alineminor
05d8c                 | ' 
05d8c                 | ' 
05d8c                 | ' ' cont: 0: this is the first part of the line that will continue
05d8c                 | ' ' 1 - this is the continuation of the line
05d8c                 | ' ' 2 - this is the last continued line
05d8c                 | ' ' 3 - this is the ome and only part
05d8c                 | ' 
05d8c                 | ' 
05d8c                 | ' err=compile_immediate(cont+1) 
05d8c                 | ' if err=0 then
05d8c     6C 00 90 5D |  if_ne	jmp	#LR__0496
05d90                 | '   if cont=3 orelse cont=2 then 
05d90     03 22 0E F2 | 	cmp	local03, #3 wz
05d94     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05d98     60 00 90 5D |  if_ne	jmp	#LR__0495
05d9c                 | '     if alinemajor >lastline then 
05d9c     69 00 00 FF 
05da0     5C E4 05 F1 | 	add	objptr, ##53852
05da4     F2 16 02 FB | 	rdlong	arg03, objptr
05da8     69 00 00 FF 
05dac     5C E4 85 F1 | 	sub	objptr, ##53852
05db0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05db4     0C 00 90 ED |  if_be	jmp	#LR__0491
05db8     0F 13 02 F6 | 	mov	arg01, local01
05dbc     2C F4 BF FD | 	call	#_add_line_at_end
05dc0     38 00 90 FD | 	jmp	#LR__0494
05dc4                 | LR__0491
05dc4     0F 13 02 F6 | 	mov	arg01, local01
05dc8     AC EC BF FD | 	call	#_deleteline
05dcc                 | '       deleteline(alinemajor)  
05dcc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05dcc     69 00 00 FF 
05dd0     5C E4 05 F1 | 	add	objptr, ##53852
05dd4     F2 16 02 FB | 	rdlong	arg03, objptr
05dd8     69 00 00 FF 
05ddc     5C E4 85 F1 | 	sub	objptr, ##53852
05de0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05de4     0C 00 90 ED |  if_be	jmp	#LR__0492
05de8     0F 13 02 F6 | 	mov	arg01, local01
05dec     FC F3 BF FD | 	call	#_add_line_at_end
05df0     08 00 90 FD | 	jmp	#LR__0493
05df4                 | LR__0492
05df4     0F 13 02 F6 | 	mov	arg01, local01
05df8     A8 F1 BF FD | 	call	#_insertline
05dfc                 | LR__0493
05dfc                 | LR__0494
05dfc                 | LR__0495
05dfc                 | LR__0496
05dfc                 | ' return err
05dfc     12 FB 01 F6 | 	mov	result1, local04
05e00                 | LR__0497
05e00     A7 F0 03 F6 | 	mov	ptra, fp
05e04     B2 00 A0 FD | 	call	#popregs_
05e08                 | _compile_ret
05e08     2D 00 64 FD | 	ret
05e0c                 | 
05e0c                 | ' 
05e0c                 | ' ' ------------------ compile the line that is assigning to a variable
05e0c                 | ' 
05e0c                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05e0c                 | _compile_assign
05e0c     03 4A 05 F6 | 	mov	COUNT_, #3
05e10     A8 00 A0 FD | 	call	#pushregs_
05e14     09 1F 0A F6 | 	mov	local01, arg01 wz
05e18     0A 21 02 F6 | 	mov	local02, arg02
05e1c     0B 23 02 F6 | 	mov	local03, arg03
05e20                 | ' 
05e20                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05e20                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05e20     0C 00 90 5D |  if_ne	jmp	#LR__0500
05e24     00 12 06 F6 | 	mov	arg01, #0
05e28     28 FC BF FD | 	call	#_compile_immediate_assign
05e2c     94 00 90 FD | 	jmp	#LR__0506
05e30                 | LR__0500
05e30     66 00 00 FF 
05e34     50 E4 05 F1 | 	add	objptr, ##52304
05e38     F2 1E 62 FC | 	wrlong	local01, objptr
05e3c     04 E4 05 F1 | 	add	objptr, #4
05e40     F2 20 62 FC | 	wrlong	local02, objptr
05e44     66 00 00 FF 
05e48     54 E4 85 F1 | 	sub	objptr, ##52308
05e4c     11 13 02 F6 | 	mov	arg01, local03
05e50     01 12 06 F1 | 	add	arg01, #1
05e54     FC FB BF FD | 	call	#_compile_immediate_assign
05e58                 | ' 
05e58                 | ' ucompiledline(0)=alinemajor
05e58                 | ' ucompiledline(1)=alineminor
05e58                 | ' 
05e58                 | ' compile_immediate_assign(cont+1) 
05e58                 | ' 
05e58                 | ' if cont=3 orelse cont=2 then 
05e58     03 22 0E F2 | 	cmp	local03, #3 wz
05e5c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05e60     60 00 90 5D |  if_ne	jmp	#LR__0505
05e64                 | '   if alinemajor >lastline then 
05e64     69 00 00 FF 
05e68     5C E4 05 F1 | 	add	objptr, ##53852
05e6c     F2 16 02 FB | 	rdlong	arg03, objptr
05e70     69 00 00 FF 
05e74     5C E4 85 F1 | 	sub	objptr, ##53852
05e78     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05e7c     0C 00 90 ED |  if_be	jmp	#LR__0501
05e80     0F 13 02 F6 | 	mov	arg01, local01
05e84     64 F3 BF FD | 	call	#_add_line_at_end
05e88     38 00 90 FD | 	jmp	#LR__0504
05e8c                 | LR__0501
05e8c     0F 13 02 F6 | 	mov	arg01, local01
05e90     E4 EB BF FD | 	call	#_deleteline
05e94                 | '     deleteline(alinemajor)  
05e94                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05e94     69 00 00 FF 
05e98     5C E4 05 F1 | 	add	objptr, ##53852
05e9c     F2 16 02 FB | 	rdlong	arg03, objptr
05ea0     69 00 00 FF 
05ea4     5C E4 85 F1 | 	sub	objptr, ##53852
05ea8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05eac     0C 00 90 ED |  if_be	jmp	#LR__0502
05eb0     0F 13 02 F6 | 	mov	arg01, local01
05eb4     34 F3 BF FD | 	call	#_add_line_at_end
05eb8     08 00 90 FD | 	jmp	#LR__0503
05ebc                 | LR__0502
05ebc     0F 13 02 F6 | 	mov	arg01, local01
05ec0     E0 F0 BF FD | 	call	#_insertline
05ec4                 | LR__0503
05ec4                 | LR__0504
05ec4                 | LR__0505
05ec4                 | LR__0506
05ec4     A7 F0 03 F6 | 	mov	ptra, fp
05ec8     B2 00 A0 FD | 	call	#popregs_
05ecc                 | _compile_assign_ret
05ecc     2D 00 64 FD | 	ret
05ed0                 | 
05ed0                 | ' 
05ed0                 | ' sub compile_error(errno)
05ed0                 | _compile_error
05ed0     FF 04 06 F6 | 	mov	_var03, #255
05ed4     01 07 02 F6 | 	mov	_var04, _var02
05ed8     02 09 02 F6 | 	mov	_var05, _var03
05edc     69 00 00 FF 
05ee0     50 E4 05 F1 | 	add	objptr, ##53840
05ee4     F2 0A 02 FB | 	rdlong	_var06, objptr
05ee8     05 0D 02 F6 | 	mov	_var07, _var06
05eec     01 0C 66 F0 | 	shl	_var07, #1
05ef0     05 0D 02 F1 | 	add	_var07, _var06
05ef4     02 0C 66 F0 | 	shl	_var07, #2
05ef8     03 00 00 FF 
05efc     00 E4 85 F1 | 	sub	objptr, ##1536
05f00     F2 0C 02 F1 | 	add	_var07, objptr
05f04     06 13 62 FC | 	wrlong	arg01, _var07
05f08     03 00 00 FF 
05f0c     00 E4 05 F1 | 	add	objptr, ##1536
05f10     F2 0C 02 FB | 	rdlong	_var07, objptr
05f14     06 0B 02 F6 | 	mov	_var06, _var07
05f18     01 0A 66 F0 | 	shl	_var06, #1
05f1c     06 0B 02 F1 | 	add	_var06, _var07
05f20     02 0A 66 F0 | 	shl	_var06, #2
05f24     03 00 00 FF 
05f28     00 E4 85 F1 | 	sub	objptr, ##1536
05f2c     F2 0A 02 F1 | 	add	_var06, objptr
05f30     04 0A 06 F1 | 	add	_var06, #4
05f34     05 07 62 FC | 	wrlong	_var04, _var06
05f38     03 00 00 FF 
05f3c     00 E4 05 F1 | 	add	objptr, ##1536
05f40     F2 0C 02 FB | 	rdlong	_var07, objptr
05f44     06 0B 02 F6 | 	mov	_var06, _var07
05f48     01 0A 66 F0 | 	shl	_var06, #1
05f4c     06 0B 02 F1 | 	add	_var06, _var07
05f50     02 0A 66 F0 | 	shl	_var06, #2
05f54     03 00 00 FF 
05f58     00 E4 85 F1 | 	sub	objptr, ##1536
05f5c     F2 0A 02 F1 | 	add	_var06, objptr
05f60     08 0A 06 F1 | 	add	_var06, #8
05f64     05 09 62 FC | 	wrlong	_var05, _var06
05f68     03 00 00 FF 
05f6c     00 E4 05 F1 | 	add	objptr, ##1536
05f70     F2 12 02 FB | 	rdlong	arg01, objptr
05f74     01 12 06 F1 | 	add	arg01, #1
05f78     F2 12 62 FC | 	wrlong	arg01, objptr
05f7c     69 00 00 FF 
05f80     50 E4 85 F1 | 	sub	objptr, ##53840
05f84                 | _compile_error_ret
05f84     2D 00 64 FD | 	ret
05f88                 | 
05f88                 | ' 
05f88                 | ' 
05f88                 | ' sub compile_unknown() 
05f88                 | _compile_unknown
05f88     FF 04 06 F6 | 	mov	_var03, #255
05f8c     17 00 06 F6 | 	mov	_var01, #23
05f90     01 07 02 F6 | 	mov	_var04, _var02
05f94     02 01 02 F6 | 	mov	_var01, _var03
05f98     69 00 00 FF 
05f9c     50 E4 05 F1 | 	add	objptr, ##53840
05fa0     F2 08 02 FB | 	rdlong	_var05, objptr
05fa4     04 0B 02 F6 | 	mov	_var06, _var05
05fa8     01 0A 66 F0 | 	shl	_var06, #1
05fac     04 0B 02 F1 | 	add	_var06, _var05
05fb0     02 0A 66 F0 | 	shl	_var06, #2
05fb4     03 00 00 FF 
05fb8     00 E4 85 F1 | 	sub	objptr, ##1536
05fbc     F2 0A 02 F1 | 	add	_var06, objptr
05fc0     05 2F 68 FC | 	wrlong	#23, _var06
05fc4     03 00 00 FF 
05fc8     00 E4 05 F1 | 	add	objptr, ##1536
05fcc     F2 0A 02 FB | 	rdlong	_var06, objptr
05fd0     05 09 02 F6 | 	mov	_var05, _var06
05fd4     01 08 66 F0 | 	shl	_var05, #1
05fd8     05 09 02 F1 | 	add	_var05, _var06
05fdc     02 08 66 F0 | 	shl	_var05, #2
05fe0     03 00 00 FF 
05fe4     00 E4 85 F1 | 	sub	objptr, ##1536
05fe8     F2 08 02 F1 | 	add	_var05, objptr
05fec     04 08 06 F1 | 	add	_var05, #4
05ff0     04 07 62 FC | 	wrlong	_var04, _var05
05ff4     03 00 00 FF 
05ff8     00 E4 05 F1 | 	add	objptr, ##1536
05ffc     F2 0A 02 FB | 	rdlong	_var06, objptr
06000     05 09 02 F6 | 	mov	_var05, _var06
06004     01 08 66 F0 | 	shl	_var05, #1
06008     05 09 02 F1 | 	add	_var05, _var06
0600c     02 08 66 F0 | 	shl	_var05, #2
06010     03 00 00 FF 
06014     00 E4 85 F1 | 	sub	objptr, ##1536
06018     F2 08 02 F1 | 	add	_var05, objptr
0601c     08 08 06 F1 | 	add	_var05, #8
06020     04 01 62 FC | 	wrlong	_var01, _var05
06024     03 00 00 FF 
06028     00 E4 05 F1 | 	add	objptr, ##1536
0602c     F2 0A 02 FB | 	rdlong	_var06, objptr
06030     01 0A 06 F1 | 	add	_var06, #1
06034     F2 0A 62 FC | 	wrlong	_var06, objptr
06038     69 00 00 FF 
0603c     50 E4 85 F1 | 	sub	objptr, ##53840
06040                 | _compile_unknown_ret
06040     2D 00 64 FD | 	ret
06044                 | 
06044                 | ' 
06044                 | ' function compile_converttoint() as integer
06044                 | _compile_converttoint
06044     06 4A 05 F6 | 	mov	COUNT_, #6
06048     A8 00 A0 FD | 	call	#pushregs_
0604c     00 1E 06 F6 | 	mov	local01, #0
06050     38 23 B0 FD | 	call	#_expr
06054     FD 24 0A F6 | 	mov	local04, result1 wz
06058                 | ' err=0
06058                 | ' t1.result.uresult=0
06058                 | ' err=expr()
06058                 | ' if err=0 then
06058     C0 00 90 5D |  if_ne	jmp	#LR__0510
0605c     16 22 06 F6 | 	mov	local03, #22
06060     0F 27 02 F6 | 	mov	local05, local01
06064     10 29 02 F6 | 	mov	local06, local02
06068     11 25 02 F6 | 	mov	local04, local03
0606c     69 00 00 FF 
06070     50 E4 05 F1 | 	add	objptr, ##53840
06074     F2 1E 02 FB | 	rdlong	local01, objptr
06078     0F FB 01 F6 | 	mov	result1, local01
0607c     01 FA 65 F0 | 	shl	result1, #1
06080     0F FB 01 F1 | 	add	result1, local01
06084     02 FA 65 F0 | 	shl	result1, #2
06088     03 00 00 FF 
0608c     00 E4 85 F1 | 	sub	objptr, ##1536
06090     F2 FA 01 F1 | 	add	result1, objptr
06094     FD 26 62 FC | 	wrlong	local05, result1
06098     03 00 00 FF 
0609c     00 E4 05 F1 | 	add	objptr, ##1536
060a0     F2 26 02 FB | 	rdlong	local05, objptr
060a4     13 1F 02 F6 | 	mov	local01, local05
060a8     01 1E 66 F0 | 	shl	local01, #1
060ac     13 1F 02 F1 | 	add	local01, local05
060b0     02 1E 66 F0 | 	shl	local01, #2
060b4     03 00 00 FF 
060b8     00 E4 85 F1 | 	sub	objptr, ##1536
060bc     F2 1E 02 F1 | 	add	local01, objptr
060c0     04 1E 06 F1 | 	add	local01, #4
060c4     0F 29 62 FC | 	wrlong	local06, local01
060c8     03 00 00 FF 
060cc     00 E4 05 F1 | 	add	objptr, ##1536
060d0     F2 28 02 FB | 	rdlong	local06, objptr
060d4     14 27 02 F6 | 	mov	local05, local06
060d8     01 26 66 F0 | 	shl	local05, #1
060dc     14 27 02 F1 | 	add	local05, local06
060e0     02 26 66 F0 | 	shl	local05, #2
060e4     03 00 00 FF 
060e8     00 E4 85 F1 | 	sub	objptr, ##1536
060ec     F2 26 02 F1 | 	add	local05, objptr
060f0     08 26 06 F1 | 	add	local05, #8
060f4     13 25 62 FC | 	wrlong	local04, local05
060f8     03 00 00 FF 
060fc     00 E4 05 F1 | 	add	objptr, ##1536
06100     F2 26 02 FB | 	rdlong	local05, objptr
06104     01 26 06 F1 | 	add	local05, #1
06108     F2 26 62 FC | 	wrlong	local05, objptr
0610c     69 00 00 FF 
06110     50 E4 85 F1 | 	sub	objptr, ##53840
06114                 | '   t1.result_type=fun_converttoint
06114                 | '   compiledline(lineptr)=t1: lineptr+=1 
06114                 | '   return 0
06114     00 FA 05 F6 | 	mov	result1, #0
06118     04 00 90 FD | 	jmp	#LR__0511
0611c                 | LR__0510
0611c                 | '   return err
0611c     12 FB 01 F6 | 	mov	result1, local04
06120                 | LR__0511
06120     A7 F0 03 F6 | 	mov	ptra, fp
06124     B2 00 A0 FD | 	call	#popregs_
06128                 | _compile_converttoint_ret
06128     2D 00 64 FD | 	ret
0612c                 | 
0612c                 | ' 
0612c                 | ' 
0612c                 | ' function compile_fun_2p() as ulong
0612c                 | _compile_fun_2p
0612c     01 4A 05 F6 | 	mov	COUNT_, #1
06130     A8 00 A0 FD | 	call	#pushregs_
06134     54 22 B0 FD | 	call	#_expr
06138                 | ' 
06138                 | ' expr()
06138                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06138     56 00 00 FF 
0613c     18 E4 05 F1 | 	add	objptr, ##44056
06140     F2 1E 02 FB | 	rdlong	local01, objptr
06144     03 1E 66 F0 | 	shl	local01, #3
06148     02 00 00 FF 
0614c     38 E4 85 F1 | 	sub	objptr, ##1080
06150     F2 1E 02 F1 | 	add	local01, objptr
06154     04 1E 06 F1 | 	add	local01, #4
06158     0F 1F 02 FB | 	rdlong	local01, local01
0615c     11 1E 0E F2 | 	cmp	local01, #17 wz
06160     53 00 00 FF 
06164     E0 E5 85 F1 | 	sub	objptr, ##42976
06168     15 FA 05 56 |  if_ne	mov	result1, #21
0616c     24 00 90 5D |  if_ne	jmp	#LR__0520
06170     56 00 00 FF 
06174     18 E4 05 F1 | 	add	objptr, ##44056
06178     F2 1E 02 FB | 	rdlong	local01, objptr
0617c     01 1E 06 F1 | 	add	local01, #1
06180     F2 1E 62 FC | 	wrlong	local01, objptr
06184     56 00 00 FF 
06188     18 E4 85 F1 | 	sub	objptr, ##44056
0618c     FC 21 B0 FD | 	call	#_expr
06190     00 FA 05 F6 | 	mov	result1, #0
06194                 | LR__0520
06194     A7 F0 03 F6 | 	mov	ptra, fp
06198     B2 00 A0 FD | 	call	#popregs_
0619c                 | _compile_fun_2p_ret
0619c     2D 00 64 FD | 	ret
061a0                 | 
061a0                 | ' 
061a0                 | ' function compile_fun_3p() as ulong
061a0                 | _compile_fun_3p
061a0     01 4A 05 F6 | 	mov	COUNT_, #1
061a4     A8 00 A0 FD | 	call	#pushregs_
061a8     E0 21 B0 FD | 	call	#_expr
061ac                 | ' 
061ac                 | ' expr()
061ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
061ac     56 00 00 FF 
061b0     18 E4 05 F1 | 	add	objptr, ##44056
061b4     F2 1E 02 FB | 	rdlong	local01, objptr
061b8     03 1E 66 F0 | 	shl	local01, #3
061bc     02 00 00 FF 
061c0     38 E4 85 F1 | 	sub	objptr, ##1080
061c4     F2 1E 02 F1 | 	add	local01, objptr
061c8     04 1E 06 F1 | 	add	local01, #4
061cc     0F 1F 02 FB | 	rdlong	local01, local01
061d0     11 1E 0E F2 | 	cmp	local01, #17 wz
061d4     53 00 00 FF 
061d8     E0 E5 85 F1 | 	sub	objptr, ##42976
061dc     15 FA 05 56 |  if_ne	mov	result1, #21
061e0     7C 00 90 5D |  if_ne	jmp	#LR__0530
061e4     56 00 00 FF 
061e8     18 E4 05 F1 | 	add	objptr, ##44056
061ec     F2 1E 02 FB | 	rdlong	local01, objptr
061f0     01 1E 06 F1 | 	add	local01, #1
061f4     F2 1E 62 FC | 	wrlong	local01, objptr
061f8     56 00 00 FF 
061fc     18 E4 85 F1 | 	sub	objptr, ##44056
06200     88 21 B0 FD | 	call	#_expr
06204                 | ' expr()
06204                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06204     56 00 00 FF 
06208     18 E4 05 F1 | 	add	objptr, ##44056
0620c     F2 1E 02 FB | 	rdlong	local01, objptr
06210     03 1E 66 F0 | 	shl	local01, #3
06214     02 00 00 FF 
06218     38 E4 85 F1 | 	sub	objptr, ##1080
0621c     F2 1E 02 F1 | 	add	local01, objptr
06220     04 1E 06 F1 | 	add	local01, #4
06224     0F 1F 02 FB | 	rdlong	local01, local01
06228     11 1E 0E F2 | 	cmp	local01, #17 wz
0622c     53 00 00 FF 
06230     E0 E5 85 F1 | 	sub	objptr, ##42976
06234     15 FA 05 56 |  if_ne	mov	result1, #21
06238     24 00 90 5D |  if_ne	jmp	#LR__0530
0623c     56 00 00 FF 
06240     18 E4 05 F1 | 	add	objptr, ##44056
06244     F2 1E 02 FB | 	rdlong	local01, objptr
06248     01 1E 06 F1 | 	add	local01, #1
0624c     F2 1E 62 FC | 	wrlong	local01, objptr
06250     56 00 00 FF 
06254     18 E4 85 F1 | 	sub	objptr, ##44056
06258     30 21 B0 FD | 	call	#_expr
0625c     00 FA 05 F6 | 	mov	result1, #0
06260                 | LR__0530
06260     A7 F0 03 F6 | 	mov	ptra, fp
06264     B2 00 A0 FD | 	call	#popregs_
06268                 | _compile_fun_3p_ret
06268     2D 00 64 FD | 	ret
0626c                 | 
0626c                 | ' 
0626c                 | ' function compile_fun_4p() as ulong
0626c                 | _compile_fun_4p
0626c     01 4A 05 F6 | 	mov	COUNT_, #1
06270     A8 00 A0 FD | 	call	#pushregs_
06274     14 21 B0 FD | 	call	#_expr
06278                 | ' 
06278                 | ' expr()
06278                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06278     56 00 00 FF 
0627c     18 E4 05 F1 | 	add	objptr, ##44056
06280     F2 1E 02 FB | 	rdlong	local01, objptr
06284     03 1E 66 F0 | 	shl	local01, #3
06288     02 00 00 FF 
0628c     38 E4 85 F1 | 	sub	objptr, ##1080
06290     F2 1E 02 F1 | 	add	local01, objptr
06294     04 1E 06 F1 | 	add	local01, #4
06298     0F 1F 02 FB | 	rdlong	local01, local01
0629c     11 1E 0E F2 | 	cmp	local01, #17 wz
062a0     53 00 00 FF 
062a4     E0 E5 85 F1 | 	sub	objptr, ##42976
062a8     15 FA 05 56 |  if_ne	mov	result1, #21
062ac     D4 00 90 5D |  if_ne	jmp	#LR__0540
062b0     56 00 00 FF 
062b4     18 E4 05 F1 | 	add	objptr, ##44056
062b8     F2 1E 02 FB | 	rdlong	local01, objptr
062bc     01 1E 06 F1 | 	add	local01, #1
062c0     F2 1E 62 FC | 	wrlong	local01, objptr
062c4     56 00 00 FF 
062c8     18 E4 85 F1 | 	sub	objptr, ##44056
062cc     BC 20 B0 FD | 	call	#_expr
062d0                 | ' expr()
062d0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062d0     56 00 00 FF 
062d4     18 E4 05 F1 | 	add	objptr, ##44056
062d8     F2 1E 02 FB | 	rdlong	local01, objptr
062dc     03 1E 66 F0 | 	shl	local01, #3
062e0     02 00 00 FF 
062e4     38 E4 85 F1 | 	sub	objptr, ##1080
062e8     F2 1E 02 F1 | 	add	local01, objptr
062ec     04 1E 06 F1 | 	add	local01, #4
062f0     0F 1F 02 FB | 	rdlong	local01, local01
062f4     11 1E 0E F2 | 	cmp	local01, #17 wz
062f8     53 00 00 FF 
062fc     E0 E5 85 F1 | 	sub	objptr, ##42976
06300     15 FA 05 56 |  if_ne	mov	result1, #21
06304     7C 00 90 5D |  if_ne	jmp	#LR__0540
06308     56 00 00 FF 
0630c     18 E4 05 F1 | 	add	objptr, ##44056
06310     F2 1E 02 FB | 	rdlong	local01, objptr
06314     01 1E 06 F1 | 	add	local01, #1
06318     F2 1E 62 FC | 	wrlong	local01, objptr
0631c     56 00 00 FF 
06320     18 E4 85 F1 | 	sub	objptr, ##44056
06324     64 20 B0 FD | 	call	#_expr
06328                 | ' expr()
06328                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06328     56 00 00 FF 
0632c     18 E4 05 F1 | 	add	objptr, ##44056
06330     F2 1E 02 FB | 	rdlong	local01, objptr
06334     03 1E 66 F0 | 	shl	local01, #3
06338     02 00 00 FF 
0633c     38 E4 85 F1 | 	sub	objptr, ##1080
06340     F2 1E 02 F1 | 	add	local01, objptr
06344     04 1E 06 F1 | 	add	local01, #4
06348     0F 1F 02 FB | 	rdlong	local01, local01
0634c     11 1E 0E F2 | 	cmp	local01, #17 wz
06350     53 00 00 FF 
06354     E0 E5 85 F1 | 	sub	objptr, ##42976
06358     15 FA 05 56 |  if_ne	mov	result1, #21
0635c     24 00 90 5D |  if_ne	jmp	#LR__0540
06360     56 00 00 FF 
06364     18 E4 05 F1 | 	add	objptr, ##44056
06368     F2 1E 02 FB | 	rdlong	local01, objptr
0636c     01 1E 06 F1 | 	add	local01, #1
06370     F2 1E 62 FC | 	wrlong	local01, objptr
06374     56 00 00 FF 
06378     18 E4 85 F1 | 	sub	objptr, ##44056
0637c     0C 20 B0 FD | 	call	#_expr
06380     00 FA 05 F6 | 	mov	result1, #0
06384                 | LR__0540
06384     A7 F0 03 F6 | 	mov	ptra, fp
06388     B2 00 A0 FD | 	call	#popregs_
0638c                 | _compile_fun_4p_ret
0638c     2D 00 64 FD | 	ret
06390                 | 
06390                 | ' 
06390                 | ' 
06390                 | ' function compile_fun_5p() as ulong
06390                 | _compile_fun_5p
06390     01 4A 05 F6 | 	mov	COUNT_, #1
06394     A8 00 A0 FD | 	call	#pushregs_
06398     F0 1F B0 FD | 	call	#_expr
0639c                 | ' 
0639c                 | ' expr()
0639c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0639c     56 00 00 FF 
063a0     18 E4 05 F1 | 	add	objptr, ##44056
063a4     F2 1E 02 FB | 	rdlong	local01, objptr
063a8     03 1E 66 F0 | 	shl	local01, #3
063ac     02 00 00 FF 
063b0     38 E4 85 F1 | 	sub	objptr, ##1080
063b4     F2 1E 02 F1 | 	add	local01, objptr
063b8     04 1E 06 F1 | 	add	local01, #4
063bc     0F 1F 02 FB | 	rdlong	local01, local01
063c0     11 1E 0E F2 | 	cmp	local01, #17 wz
063c4     53 00 00 FF 
063c8     E0 E5 85 F1 | 	sub	objptr, ##42976
063cc     15 FA 05 56 |  if_ne	mov	result1, #21
063d0     2C 01 90 5D |  if_ne	jmp	#LR__0550
063d4     56 00 00 FF 
063d8     18 E4 05 F1 | 	add	objptr, ##44056
063dc     F2 1E 02 FB | 	rdlong	local01, objptr
063e0     01 1E 06 F1 | 	add	local01, #1
063e4     F2 1E 62 FC | 	wrlong	local01, objptr
063e8     56 00 00 FF 
063ec     18 E4 85 F1 | 	sub	objptr, ##44056
063f0     98 1F B0 FD | 	call	#_expr
063f4                 | ' expr()
063f4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
063f4     56 00 00 FF 
063f8     18 E4 05 F1 | 	add	objptr, ##44056
063fc     F2 1E 02 FB | 	rdlong	local01, objptr
06400     03 1E 66 F0 | 	shl	local01, #3
06404     02 00 00 FF 
06408     38 E4 85 F1 | 	sub	objptr, ##1080
0640c     F2 1E 02 F1 | 	add	local01, objptr
06410     04 1E 06 F1 | 	add	local01, #4
06414     0F 1F 02 FB | 	rdlong	local01, local01
06418     11 1E 0E F2 | 	cmp	local01, #17 wz
0641c     53 00 00 FF 
06420     E0 E5 85 F1 | 	sub	objptr, ##42976
06424     15 FA 05 56 |  if_ne	mov	result1, #21
06428     D4 00 90 5D |  if_ne	jmp	#LR__0550
0642c     56 00 00 FF 
06430     18 E4 05 F1 | 	add	objptr, ##44056
06434     F2 1E 02 FB | 	rdlong	local01, objptr
06438     01 1E 06 F1 | 	add	local01, #1
0643c     F2 1E 62 FC | 	wrlong	local01, objptr
06440     56 00 00 FF 
06444     18 E4 85 F1 | 	sub	objptr, ##44056
06448     40 1F B0 FD | 	call	#_expr
0644c                 | ' expr()
0644c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0644c     56 00 00 FF 
06450     18 E4 05 F1 | 	add	objptr, ##44056
06454     F2 1E 02 FB | 	rdlong	local01, objptr
06458     03 1E 66 F0 | 	shl	local01, #3
0645c     02 00 00 FF 
06460     38 E4 85 F1 | 	sub	objptr, ##1080
06464     F2 1E 02 F1 | 	add	local01, objptr
06468     04 1E 06 F1 | 	add	local01, #4
0646c     0F 1F 02 FB | 	rdlong	local01, local01
06470     11 1E 0E F2 | 	cmp	local01, #17 wz
06474     53 00 00 FF 
06478     E0 E5 85 F1 | 	sub	objptr, ##42976
0647c     15 FA 05 56 |  if_ne	mov	result1, #21
06480     7C 00 90 5D |  if_ne	jmp	#LR__0550
06484     56 00 00 FF 
06488     18 E4 05 F1 | 	add	objptr, ##44056
0648c     F2 1E 02 FB | 	rdlong	local01, objptr
06490     01 1E 06 F1 | 	add	local01, #1
06494     F2 1E 62 FC | 	wrlong	local01, objptr
06498     56 00 00 FF 
0649c     18 E4 85 F1 | 	sub	objptr, ##44056
064a0     E8 1E B0 FD | 	call	#_expr
064a4                 | ' expr()
064a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
064a4     56 00 00 FF 
064a8     18 E4 05 F1 | 	add	objptr, ##44056
064ac     F2 1E 02 FB | 	rdlong	local01, objptr
064b0     03 1E 66 F0 | 	shl	local01, #3
064b4     02 00 00 FF 
064b8     38 E4 85 F1 | 	sub	objptr, ##1080
064bc     F2 1E 02 F1 | 	add	local01, objptr
064c0     04 1E 06 F1 | 	add	local01, #4
064c4     0F 1F 02 FB | 	rdlong	local01, local01
064c8     11 1E 0E F2 | 	cmp	local01, #17 wz
064cc     53 00 00 FF 
064d0     E0 E5 85 F1 | 	sub	objptr, ##42976
064d4     15 FA 05 56 |  if_ne	mov	result1, #21
064d8     24 00 90 5D |  if_ne	jmp	#LR__0550
064dc     56 00 00 FF 
064e0     18 E4 05 F1 | 	add	objptr, ##44056
064e4     F2 1E 02 FB | 	rdlong	local01, objptr
064e8     01 1E 06 F1 | 	add	local01, #1
064ec     F2 1E 62 FC | 	wrlong	local01, objptr
064f0     56 00 00 FF 
064f4     18 E4 85 F1 | 	sub	objptr, ##44056
064f8     90 1E B0 FD | 	call	#_expr
064fc     00 FA 05 F6 | 	mov	result1, #0
06500                 | LR__0550
06500     A7 F0 03 F6 | 	mov	ptra, fp
06504     B2 00 A0 FD | 	call	#popregs_
06508                 | _compile_fun_5p_ret
06508     2D 00 64 FD | 	ret
0650c                 | 
0650c                 | ' 
0650c                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
0650c                 | _compile_fun_varp
0650c     02 4A 05 F6 | 	mov	COUNT_, #2
06510     A8 00 A0 FD | 	call	#pushregs_
06514     00 1E 06 F6 | 	mov	local01, #0
06518                 | ' i=0
06518                 | ' if lparts(ct).token<>token_end then
06518     56 00 00 FF 
0651c     18 E4 05 F1 | 	add	objptr, ##44056
06520     F2 20 02 FB | 	rdlong	local02, objptr
06524     03 20 66 F0 | 	shl	local02, #3
06528     02 00 00 FF 
0652c     38 E4 85 F1 | 	sub	objptr, ##1080
06530     F2 20 02 F1 | 	add	local02, objptr
06534     04 20 06 F1 | 	add	local02, #4
06538     10 21 02 FB | 	rdlong	local02, local02
0653c     FE 21 0E F2 | 	cmp	local02, #510 wz
06540     53 00 00 FF 
06544     E0 E5 85 F1 | 	sub	objptr, ##42976
06548     5C 00 90 AD |  if_e	jmp	#LR__0562
0654c                 | '   do
0654c                 | LR__0560
0654c     3C 1E B0 FD | 	call	#_expr
06550     01 1E 06 F1 | 	add	local01, #1
06554                 | '   expr()
06554                 | '    i+=1
06554                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06554     56 00 00 FF 
06558     18 E4 05 F1 | 	add	objptr, ##44056
0655c     F2 20 02 FB | 	rdlong	local02, objptr
06560     03 20 66 F0 | 	shl	local02, #3
06564     02 00 00 FF 
06568     38 E4 85 F1 | 	sub	objptr, ##1080
0656c     F2 20 02 F1 | 	add	local02, objptr
06570     04 20 06 F1 | 	add	local02, #4
06574     10 21 02 FB | 	rdlong	local02, local02
06578     11 20 0E F2 | 	cmp	local02, #17 wz
0657c     53 00 00 FF 
06580     E0 E5 85 F1 | 	sub	objptr, ##42976
06584     20 00 90 5D |  if_ne	jmp	#LR__0561
06588     56 00 00 FF 
0658c     18 E4 05 F1 | 	add	objptr, ##44056
06590     F2 20 02 FB | 	rdlong	local02, objptr
06594     01 20 06 F1 | 	add	local02, #1
06598     F2 20 62 FC | 	wrlong	local02, objptr
0659c     56 00 00 FF 
065a0     18 E4 85 F1 | 	sub	objptr, ##44056
065a4     A4 FF 9F FD | 	jmp	#LR__0560
065a8                 | LR__0561
065a8                 | LR__0562
065a8                 | ' return i
065a8     0F FB 01 F6 | 	mov	result1, local01
065ac     A7 F0 03 F6 | 	mov	ptra, fp
065b0     B2 00 A0 FD | 	call	#popregs_
065b4                 | _compile_fun_varp_ret
065b4     2D 00 64 FD | 	ret
065b8                 | 
065b8                 | ' 
065b8                 | ' 
065b8                 | ' function compile_int_fun_2p() as ulong
065b8                 | _compile_int_fun_2p
065b8     01 4A 05 F6 | 	mov	COUNT_, #1
065bc     A8 00 A0 FD | 	call	#pushregs_
065c0     80 FA BF FD | 	call	#_compile_converttoint
065c4     FD 1E 02 F6 | 	mov	local01, result1
065c8                 | ' err=compile_converttoint() : if err>0 then return err
065c8     01 1E 56 F2 | 	cmps	local01, #1 wc
065cc     0F FB 01 36 |  if_ae	mov	result1, local01
065d0     58 00 90 3D |  if_ae	jmp	#LR__0570
065d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
065d4     56 00 00 FF 
065d8     18 E4 05 F1 | 	add	objptr, ##44056
065dc     F2 1E 02 FB | 	rdlong	local01, objptr
065e0     03 1E 66 F0 | 	shl	local01, #3
065e4     02 00 00 FF 
065e8     38 E4 85 F1 | 	sub	objptr, ##1080
065ec     F2 1E 02 F1 | 	add	local01, objptr
065f0     04 1E 06 F1 | 	add	local01, #4
065f4     0F 1F 02 FB | 	rdlong	local01, local01
065f8     11 1E 0E F2 | 	cmp	local01, #17 wz
065fc     53 00 00 FF 
06600     E0 E5 85 F1 | 	sub	objptr, ##42976
06604     15 FA 05 56 |  if_ne	mov	result1, #21
06608     20 00 90 5D |  if_ne	jmp	#LR__0570
0660c     56 00 00 FF 
06610     18 E4 05 F1 | 	add	objptr, ##44056
06614     F2 1E 02 FB | 	rdlong	local01, objptr
06618     01 1E 06 F1 | 	add	local01, #1
0661c     F2 1E 62 FC | 	wrlong	local01, objptr
06620     56 00 00 FF 
06624     18 E4 85 F1 | 	sub	objptr, ##44056
06628     18 FA BF FD | 	call	#_compile_converttoint
0662c                 | ' err=compile_converttoint() 
0662c                 | ' return err
0662c                 | LR__0570
0662c     A7 F0 03 F6 | 	mov	ptra, fp
06630     B2 00 A0 FD | 	call	#popregs_
06634                 | _compile_int_fun_2p_ret
06634     2D 00 64 FD | 	ret
06638                 | 
06638                 | ' 
06638                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06638                 | _compile_print
06638     0B 4A 05 F6 | 	mov	COUNT_, #11
0663c     A8 00 A0 FD | 	call	#pushregs_
06640     00 1E 06 F6 | 	mov	local01, #0
06644     1D 22 06 F6 | 	mov	local03, #29
06648                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06648                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06648     56 00 00 FF 
0664c     18 E4 05 F1 | 	add	objptr, ##44056
06650     F2 24 02 FB | 	rdlong	local04, objptr
06654     03 24 66 F0 | 	shl	local04, #3
06658     02 00 00 FF 
0665c     38 E4 85 F1 | 	sub	objptr, ##1080
06660     F2 24 02 F1 | 	add	local04, objptr
06664     04 24 06 F1 | 	add	local04, #4
06668     12 25 02 FB | 	rdlong	local04, local04
0666c     FE 25 0E F2 | 	cmp	local04, #510 wz
06670     53 00 00 FF 
06674     E0 E5 85 F1 | 	sub	objptr, ##42976
06678     68 01 90 5D |  if_ne	jmp	#LR__0580
0667c     20 22 06 F6 | 	mov	local03, #32
06680     0F 27 02 F6 | 	mov	local05, local01
06684     10 29 02 F6 | 	mov	local06, local02
06688     11 2B 02 F6 | 	mov	local07, local03
0668c     69 00 00 FF 
06690     50 E4 05 F1 | 	add	objptr, ##53840
06694     F2 2C 02 FB | 	rdlong	local08, objptr
06698     16 2F 02 F6 | 	mov	local09, local08
0669c     01 2E 66 F0 | 	shl	local09, #1
066a0     16 2F 02 F1 | 	add	local09, local08
066a4     02 2E 66 F0 | 	shl	local09, #2
066a8     03 00 00 FF 
066ac     00 E4 85 F1 | 	sub	objptr, ##1536
066b0     F2 2E 02 F1 | 	add	local09, objptr
066b4     17 27 62 FC | 	wrlong	local05, local09
066b8     03 00 00 FF 
066bc     00 E4 05 F1 | 	add	objptr, ##1536
066c0     F2 26 02 FB | 	rdlong	local05, objptr
066c4     13 31 02 F6 | 	mov	local10, local05
066c8     01 30 66 F0 | 	shl	local10, #1
066cc     13 31 02 F1 | 	add	local10, local05
066d0     02 30 66 F0 | 	shl	local10, #2
066d4     03 00 00 FF 
066d8     00 E4 85 F1 | 	sub	objptr, ##1536
066dc     F2 30 02 F1 | 	add	local10, objptr
066e0     04 30 06 F1 | 	add	local10, #4
066e4     18 29 62 FC | 	wrlong	local06, local10
066e8     03 00 00 FF 
066ec     00 E4 05 F1 | 	add	objptr, ##1536
066f0     F2 26 02 FB | 	rdlong	local05, objptr
066f4     13 33 02 F6 | 	mov	local11, local05
066f8     01 32 66 F0 | 	shl	local11, #1
066fc     13 33 02 F1 | 	add	local11, local05
06700     02 32 66 F0 | 	shl	local11, #2
06704     03 00 00 FF 
06708     00 E4 85 F1 | 	sub	objptr, ##1536
0670c     F2 32 02 F1 | 	add	local11, objptr
06710     08 32 06 F1 | 	add	local11, #8
06714     19 2B 62 FC | 	wrlong	local07, local11
06718     03 00 00 FF 
0671c     00 E4 05 F1 | 	add	objptr, ##1536
06720     F2 26 02 FB | 	rdlong	local05, objptr
06724     01 26 06 F1 | 	add	local05, #1
06728     F2 26 62 FC | 	wrlong	local05, objptr
0672c     44 22 06 F6 | 	mov	local03, #68
06730     0F 27 02 F6 | 	mov	local05, local01
06734     10 29 02 F6 | 	mov	local06, local02
06738     11 2B 02 F6 | 	mov	local07, local03
0673c     F2 2C 02 FB | 	rdlong	local08, objptr
06740     16 2F 02 F6 | 	mov	local09, local08
06744     01 2E 66 F0 | 	shl	local09, #1
06748     16 2F 02 F1 | 	add	local09, local08
0674c     02 2E 66 F0 | 	shl	local09, #2
06750     03 00 00 FF 
06754     00 E4 85 F1 | 	sub	objptr, ##1536
06758     F2 2E 02 F1 | 	add	local09, objptr
0675c     17 27 62 FC | 	wrlong	local05, local09
06760     03 00 00 FF 
06764     00 E4 05 F1 | 	add	objptr, ##1536
06768     F2 32 02 FB | 	rdlong	local11, objptr
0676c     19 31 02 F6 | 	mov	local10, local11
06770     01 30 66 F0 | 	shl	local10, #1
06774     19 31 02 F1 | 	add	local10, local11
06778     02 30 66 F0 | 	shl	local10, #2
0677c     03 00 00 FF 
06780     00 E4 85 F1 | 	sub	objptr, ##1536
06784     F2 30 02 F1 | 	add	local10, objptr
06788     04 30 06 F1 | 	add	local10, #4
0678c     18 29 62 FC | 	wrlong	local06, local10
06790     03 00 00 FF 
06794     00 E4 05 F1 | 	add	objptr, ##1536
06798     F2 30 02 FB | 	rdlong	local10, objptr
0679c     18 33 02 F6 | 	mov	local11, local10
067a0     01 32 66 F0 | 	shl	local11, #1
067a4     18 33 02 F1 | 	add	local11, local10
067a8     02 32 66 F0 | 	shl	local11, #2
067ac     03 00 00 FF 
067b0     00 E4 85 F1 | 	sub	objptr, ##1536
067b4     F2 32 02 F1 | 	add	local11, objptr
067b8     08 32 06 F1 | 	add	local11, #8
067bc     19 2B 62 FC | 	wrlong	local07, local11
067c0     03 00 00 FF 
067c4     00 E4 05 F1 | 	add	objptr, ##1536
067c8     F2 26 02 FB | 	rdlong	local05, objptr
067cc     01 26 06 F1 | 	add	local05, #1
067d0     F2 26 62 FC | 	wrlong	local05, objptr
067d4     69 00 00 FF 
067d8     50 E4 85 F1 | 	sub	objptr, ##53840
067dc     00 FA 05 F6 | 	mov	result1, #0
067e0     20 05 90 FD | 	jmp	#LR__0587
067e4                 | LR__0580
067e4                 | ' do
067e4                 | LR__0581
067e4     A4 1B B0 FD | 	call	#_expr
067e8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
067e8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
067e8     56 00 00 FF 
067ec     18 E4 05 F1 | 	add	objptr, ##44056
067f0     F2 24 02 FB | 	rdlong	local04, objptr
067f4     03 24 66 F0 | 	shl	local04, #3
067f8     02 00 00 FF 
067fc     38 E4 85 F1 | 	sub	objptr, ##1080
06800     F2 24 02 F1 | 	add	local04, objptr
06804     04 24 06 F1 | 	add	local04, #4
06808     12 2D 02 FB | 	rdlong	local08, local04
0680c     11 2C 0E F2 | 	cmp	local08, #17 wz
06810     53 00 00 FF 
06814     E0 E5 85 F1 | 	sub	objptr, ##42976
06818     60 01 90 5D |  if_ne	jmp	#LR__0582
0681c     21 22 06 F6 | 	mov	local03, #33
06820     0F 27 02 F6 | 	mov	local05, local01
06824     10 29 02 F6 | 	mov	local06, local02
06828     11 2B 02 F6 | 	mov	local07, local03
0682c     69 00 00 FF 
06830     50 E4 05 F1 | 	add	objptr, ##53840
06834     F2 2C 02 FB | 	rdlong	local08, objptr
06838     16 2F 02 F6 | 	mov	local09, local08
0683c     01 2E 66 F0 | 	shl	local09, #1
06840     16 2F 02 F1 | 	add	local09, local08
06844     02 2E 66 F0 | 	shl	local09, #2
06848     03 00 00 FF 
0684c     00 E4 85 F1 | 	sub	objptr, ##1536
06850     F2 2E 02 F1 | 	add	local09, objptr
06854     17 27 62 FC | 	wrlong	local05, local09
06858     03 00 00 FF 
0685c     00 E4 05 F1 | 	add	objptr, ##1536
06860     F2 32 02 FB | 	rdlong	local11, objptr
06864     19 31 02 F6 | 	mov	local10, local11
06868     01 30 66 F0 | 	shl	local10, #1
0686c     19 31 02 F1 | 	add	local10, local11
06870     02 30 66 F0 | 	shl	local10, #2
06874     03 00 00 FF 
06878     00 E4 85 F1 | 	sub	objptr, ##1536
0687c     F2 30 02 F1 | 	add	local10, objptr
06880     04 30 06 F1 | 	add	local10, #4
06884     18 29 62 FC | 	wrlong	local06, local10
06888     03 00 00 FF 
0688c     00 E4 05 F1 | 	add	objptr, ##1536
06890     F2 26 02 FB | 	rdlong	local05, objptr
06894     13 33 02 F6 | 	mov	local11, local05
06898     01 32 66 F0 | 	shl	local11, #1
0689c     13 33 02 F1 | 	add	local11, local05
068a0     02 32 66 F0 | 	shl	local11, #2
068a4     03 00 00 FF 
068a8     00 E4 85 F1 | 	sub	objptr, ##1536
068ac     F2 32 02 F1 | 	add	local11, objptr
068b0     08 32 06 F1 | 	add	local11, #8
068b4     19 2B 62 FC | 	wrlong	local07, local11
068b8     03 00 00 FF 
068bc     00 E4 05 F1 | 	add	objptr, ##1536
068c0     F2 26 02 FB | 	rdlong	local05, objptr
068c4     01 26 06 F1 | 	add	local05, #1
068c8     F2 26 62 FC | 	wrlong	local05, objptr
068cc     44 22 06 F6 | 	mov	local03, #68
068d0     0F 27 02 F6 | 	mov	local05, local01
068d4     10 29 02 F6 | 	mov	local06, local02
068d8     11 2B 02 F6 | 	mov	local07, local03
068dc     F2 2C 02 FB | 	rdlong	local08, objptr
068e0     16 2F 02 F6 | 	mov	local09, local08
068e4     01 2E 66 F0 | 	shl	local09, #1
068e8     16 2F 02 F1 | 	add	local09, local08
068ec     02 2E 66 F0 | 	shl	local09, #2
068f0     03 00 00 FF 
068f4     00 E4 85 F1 | 	sub	objptr, ##1536
068f8     F2 2E 02 F1 | 	add	local09, objptr
068fc     17 27 62 FC | 	wrlong	local05, local09
06900     03 00 00 FF 
06904     00 E4 05 F1 | 	add	objptr, ##1536
06908     F2 32 02 FB | 	rdlong	local11, objptr
0690c     19 31 02 F6 | 	mov	local10, local11
06910     01 30 66 F0 | 	shl	local10, #1
06914     19 31 02 F1 | 	add	local10, local11
06918     02 30 66 F0 | 	shl	local10, #2
0691c     03 00 00 FF 
06920     00 E4 85 F1 | 	sub	objptr, ##1536
06924     F2 30 02 F1 | 	add	local10, objptr
06928     04 30 06 F1 | 	add	local10, #4
0692c     18 29 62 FC | 	wrlong	local06, local10
06930     03 00 00 FF 
06934     00 E4 05 F1 | 	add	objptr, ##1536
06938     F2 30 02 FB | 	rdlong	local10, objptr
0693c     18 33 02 F6 | 	mov	local11, local10
06940     01 32 66 F0 | 	shl	local11, #1
06944     18 33 02 F1 | 	add	local11, local10
06948     02 32 66 F0 | 	shl	local11, #2
0694c     03 00 00 FF 
06950     00 E4 85 F1 | 	sub	objptr, ##1536
06954     F2 32 02 F1 | 	add	local11, objptr
06958     08 32 06 F1 | 	add	local11, #8
0695c     19 2B 62 FC | 	wrlong	local07, local11
06960     03 00 00 FF 
06964     00 E4 05 F1 | 	add	objptr, ##1536
06968     F2 26 02 FB | 	rdlong	local05, objptr
0696c     01 26 06 F1 | 	add	local05, #1
06970     F2 26 62 FC | 	wrlong	local05, objptr
06974     69 00 00 FF 
06978     50 E4 85 F1 | 	sub	objptr, ##53840
0697c                 | LR__0582
0697c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0697c     56 00 00 FF 
06980     18 E4 05 F1 | 	add	objptr, ##44056
06984     F2 24 02 FB | 	rdlong	local04, objptr
06988     03 24 66 F0 | 	shl	local04, #3
0698c     02 00 00 FF 
06990     38 E4 85 F1 | 	sub	objptr, ##1080
06994     F2 24 02 F1 | 	add	local04, objptr
06998     04 24 06 F1 | 	add	local04, #4
0699c     12 2D 02 FB | 	rdlong	local08, local04
069a0     12 2C 0E F2 | 	cmp	local08, #18 wz
069a4     53 00 00 FF 
069a8     E0 E5 85 F1 | 	sub	objptr, ##42976
069ac     60 01 90 5D |  if_ne	jmp	#LR__0583
069b0     22 22 06 F6 | 	mov	local03, #34
069b4     0F 27 02 F6 | 	mov	local05, local01
069b8     10 29 02 F6 | 	mov	local06, local02
069bc     11 2B 02 F6 | 	mov	local07, local03
069c0     69 00 00 FF 
069c4     50 E4 05 F1 | 	add	objptr, ##53840
069c8     F2 2C 02 FB | 	rdlong	local08, objptr
069cc     16 2F 02 F6 | 	mov	local09, local08
069d0     01 2E 66 F0 | 	shl	local09, #1
069d4     16 2F 02 F1 | 	add	local09, local08
069d8     02 2E 66 F0 | 	shl	local09, #2
069dc     03 00 00 FF 
069e0     00 E4 85 F1 | 	sub	objptr, ##1536
069e4     F2 2E 02 F1 | 	add	local09, objptr
069e8     17 27 62 FC | 	wrlong	local05, local09
069ec     03 00 00 FF 
069f0     00 E4 05 F1 | 	add	objptr, ##1536
069f4     F2 32 02 FB | 	rdlong	local11, objptr
069f8     19 31 02 F6 | 	mov	local10, local11
069fc     01 30 66 F0 | 	shl	local10, #1
06a00     19 31 02 F1 | 	add	local10, local11
06a04     02 30 66 F0 | 	shl	local10, #2
06a08     03 00 00 FF 
06a0c     00 E4 85 F1 | 	sub	objptr, ##1536
06a10     F2 30 02 F1 | 	add	local10, objptr
06a14     04 30 06 F1 | 	add	local10, #4
06a18     18 29 62 FC | 	wrlong	local06, local10
06a1c     03 00 00 FF 
06a20     00 E4 05 F1 | 	add	objptr, ##1536
06a24     F2 26 02 FB | 	rdlong	local05, objptr
06a28     13 33 02 F6 | 	mov	local11, local05
06a2c     01 32 66 F0 | 	shl	local11, #1
06a30     13 33 02 F1 | 	add	local11, local05
06a34     02 32 66 F0 | 	shl	local11, #2
06a38     03 00 00 FF 
06a3c     00 E4 85 F1 | 	sub	objptr, ##1536
06a40     F2 32 02 F1 | 	add	local11, objptr
06a44     08 32 06 F1 | 	add	local11, #8
06a48     19 2B 62 FC | 	wrlong	local07, local11
06a4c     03 00 00 FF 
06a50     00 E4 05 F1 | 	add	objptr, ##1536
06a54     F2 26 02 FB | 	rdlong	local05, objptr
06a58     01 26 06 F1 | 	add	local05, #1
06a5c     F2 26 62 FC | 	wrlong	local05, objptr
06a60     44 22 06 F6 | 	mov	local03, #68
06a64     0F 27 02 F6 | 	mov	local05, local01
06a68     10 29 02 F6 | 	mov	local06, local02
06a6c     11 2B 02 F6 | 	mov	local07, local03
06a70     F2 2C 02 FB | 	rdlong	local08, objptr
06a74     16 2F 02 F6 | 	mov	local09, local08
06a78     01 2E 66 F0 | 	shl	local09, #1
06a7c     16 2F 02 F1 | 	add	local09, local08
06a80     02 2E 66 F0 | 	shl	local09, #2
06a84     03 00 00 FF 
06a88     00 E4 85 F1 | 	sub	objptr, ##1536
06a8c     F2 2E 02 F1 | 	add	local09, objptr
06a90     17 27 62 FC | 	wrlong	local05, local09
06a94     03 00 00 FF 
06a98     00 E4 05 F1 | 	add	objptr, ##1536
06a9c     F2 32 02 FB | 	rdlong	local11, objptr
06aa0     19 31 02 F6 | 	mov	local10, local11
06aa4     01 30 66 F0 | 	shl	local10, #1
06aa8     19 31 02 F1 | 	add	local10, local11
06aac     02 30 66 F0 | 	shl	local10, #2
06ab0     03 00 00 FF 
06ab4     00 E4 85 F1 | 	sub	objptr, ##1536
06ab8     F2 30 02 F1 | 	add	local10, objptr
06abc     04 30 06 F1 | 	add	local10, #4
06ac0     18 29 62 FC | 	wrlong	local06, local10
06ac4     03 00 00 FF 
06ac8     00 E4 05 F1 | 	add	objptr, ##1536
06acc     F2 30 02 FB | 	rdlong	local10, objptr
06ad0     18 33 02 F6 | 	mov	local11, local10
06ad4     01 32 66 F0 | 	shl	local11, #1
06ad8     18 33 02 F1 | 	add	local11, local10
06adc     02 32 66 F0 | 	shl	local11, #2
06ae0     03 00 00 FF 
06ae4     00 E4 85 F1 | 	sub	objptr, ##1536
06ae8     F2 32 02 F1 | 	add	local11, objptr
06aec     08 32 06 F1 | 	add	local11, #8
06af0     19 2B 62 FC | 	wrlong	local07, local11
06af4     03 00 00 FF 
06af8     00 E4 05 F1 | 	add	objptr, ##1536
06afc     F2 26 02 FB | 	rdlong	local05, objptr
06b00     01 26 06 F1 | 	add	local05, #1
06b04     F2 26 62 FC | 	wrlong	local05, objptr
06b08     69 00 00 FF 
06b0c     50 E4 85 F1 | 	sub	objptr, ##53840
06b10                 | LR__0583
06b10                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06b10     56 00 00 FF 
06b14     18 E4 05 F1 | 	add	objptr, ##44056
06b18     F2 24 02 FB | 	rdlong	local04, objptr
06b1c     03 24 66 F0 | 	shl	local04, #3
06b20     02 00 00 FF 
06b24     38 E4 85 F1 | 	sub	objptr, ##1080
06b28     F2 24 02 F1 | 	add	local04, objptr
06b2c     04 24 06 F1 | 	add	local04, #4
06b30     12 2D 02 FB | 	rdlong	local08, local04
06b34     FE 2D 0E F2 | 	cmp	local08, #510 wz
06b38     53 00 00 FF 
06b3c     E0 E5 85 F1 | 	sub	objptr, ##42976
06b40     B8 00 90 5D |  if_ne	jmp	#LR__0584
06b44     44 22 06 F6 | 	mov	local03, #68
06b48     0F 27 02 F6 | 	mov	local05, local01
06b4c     10 29 02 F6 | 	mov	local06, local02
06b50     11 2B 02 F6 | 	mov	local07, local03
06b54     69 00 00 FF 
06b58     50 E4 05 F1 | 	add	objptr, ##53840
06b5c     F2 2C 02 FB | 	rdlong	local08, objptr
06b60     16 2F 02 F6 | 	mov	local09, local08
06b64     01 2E 66 F0 | 	shl	local09, #1
06b68     16 2F 02 F1 | 	add	local09, local08
06b6c     02 2E 66 F0 | 	shl	local09, #2
06b70     03 00 00 FF 
06b74     00 E4 85 F1 | 	sub	objptr, ##1536
06b78     F2 2E 02 F1 | 	add	local09, objptr
06b7c     17 27 62 FC | 	wrlong	local05, local09
06b80     03 00 00 FF 
06b84     00 E4 05 F1 | 	add	objptr, ##1536
06b88     F2 32 02 FB | 	rdlong	local11, objptr
06b8c     19 31 02 F6 | 	mov	local10, local11
06b90     01 30 66 F0 | 	shl	local10, #1
06b94     19 31 02 F1 | 	add	local10, local11
06b98     02 30 66 F0 | 	shl	local10, #2
06b9c     03 00 00 FF 
06ba0     00 E4 85 F1 | 	sub	objptr, ##1536
06ba4     F2 30 02 F1 | 	add	local10, objptr
06ba8     04 30 06 F1 | 	add	local10, #4
06bac     18 29 62 FC | 	wrlong	local06, local10
06bb0     03 00 00 FF 
06bb4     00 E4 05 F1 | 	add	objptr, ##1536
06bb8     F2 30 02 FB | 	rdlong	local10, objptr
06bbc     18 33 02 F6 | 	mov	local11, local10
06bc0     01 32 66 F0 | 	shl	local11, #1
06bc4     18 33 02 F1 | 	add	local11, local10
06bc8     02 32 66 F0 | 	shl	local11, #2
06bcc     03 00 00 FF 
06bd0     00 E4 85 F1 | 	sub	objptr, ##1536
06bd4     F2 32 02 F1 | 	add	local11, objptr
06bd8     08 32 06 F1 | 	add	local11, #8
06bdc     19 2B 62 FC | 	wrlong	local07, local11
06be0     03 00 00 FF 
06be4     00 E4 05 F1 | 	add	objptr, ##1536
06be8     F2 26 02 FB | 	rdlong	local05, objptr
06bec     01 26 06 F1 | 	add	local05, #1
06bf0     F2 26 62 FC | 	wrlong	local05, objptr
06bf4     69 00 00 FF 
06bf8     50 E4 85 F1 | 	sub	objptr, ##53840
06bfc                 | LR__0584
06bfc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
06bfc     56 00 00 FF 
06c00     18 E4 05 F1 | 	add	objptr, ##44056
06c04     F2 24 02 FB | 	rdlong	local04, objptr
06c08     03 24 66 F0 | 	shl	local04, #3
06c0c     02 00 00 FF 
06c10     38 E4 85 F1 | 	sub	objptr, ##1080
06c14     F2 24 02 F1 | 	add	local04, objptr
06c18     04 24 06 F1 | 	add	local04, #4
06c1c     12 2D 02 FB | 	rdlong	local08, local04
06c20     11 2C 0E F2 | 	cmp	local08, #17 wz
06c24     53 00 00 FF 
06c28     E0 E5 85 F1 | 	sub	objptr, ##42976
06c2c     6C 00 90 AD |  if_e	jmp	#LR__0585
06c30     56 00 00 FF 
06c34     18 E4 05 F1 | 	add	objptr, ##44056
06c38     F2 2C 02 FB | 	rdlong	local08, objptr
06c3c     03 2C 66 F0 | 	shl	local08, #3
06c40     02 00 00 FF 
06c44     38 E4 85 F1 | 	sub	objptr, ##1080
06c48     F2 2C 02 F1 | 	add	local08, objptr
06c4c     04 2C 06 F1 | 	add	local08, #4
06c50     16 2D 02 FB | 	rdlong	local08, local08
06c54     12 2C 0E F2 | 	cmp	local08, #18 wz
06c58     53 00 00 FF 
06c5c     E0 E5 85 F1 | 	sub	objptr, ##42976
06c60     38 00 90 AD |  if_e	jmp	#LR__0585
06c64     56 00 00 FF 
06c68     18 E4 05 F1 | 	add	objptr, ##44056
06c6c     F2 32 02 FB | 	rdlong	local11, objptr
06c70     03 32 66 F0 | 	shl	local11, #3
06c74     02 00 00 FF 
06c78     38 E4 85 F1 | 	sub	objptr, ##1080
06c7c     F2 32 02 F1 | 	add	local11, objptr
06c80     04 32 06 F1 | 	add	local11, #4
06c84     19 33 02 FB | 	rdlong	local11, local11
06c88     FE 33 0E F2 | 	cmp	local11, #510 wz
06c8c     53 00 00 FF 
06c90     E0 E5 85 F1 | 	sub	objptr, ##42976
06c94     16 FA 05 56 |  if_ne	mov	result1, #22
06c98     68 00 90 5D |  if_ne	jmp	#LR__0587
06c9c                 | LR__0585
06c9c     56 00 00 FF 
06ca0     18 E4 05 F1 | 	add	objptr, ##44056
06ca4     F2 24 02 FB | 	rdlong	local04, objptr
06ca8     01 24 06 F1 | 	add	local04, #1
06cac     F2 24 62 FC | 	wrlong	local04, objptr
06cb0     03 24 66 F0 | 	shl	local04, #3
06cb4     02 00 00 FF 
06cb8     38 E4 85 F1 | 	sub	objptr, ##1080
06cbc     F2 24 02 F1 | 	add	local04, objptr
06cc0     04 24 06 F1 | 	add	local04, #4
06cc4     12 2D 02 FB | 	rdlong	local08, local04
06cc8     FE 2D 0E F2 | 	cmp	local08, #510 wz
06ccc     53 00 00 FF 
06cd0     E0 E5 85 F1 | 	sub	objptr, ##42976
06cd4     28 00 90 AD |  if_e	jmp	#LR__0586
06cd8     56 00 00 FF 
06cdc     18 E4 05 F1 | 	add	objptr, ##44056
06ce0     F2 32 02 FB | 	rdlong	local11, objptr
06ce4     0E 00 00 FF 
06ce8     1C E4 05 F1 | 	add	objptr, ##7196
06cec     F2 30 02 FB | 	rdlong	local10, objptr
06cf0     64 00 00 FF 
06cf4     34 E4 85 F1 | 	sub	objptr, ##51252
06cf8     18 33 52 F2 | 	cmps	local11, local10 wc
06cfc     E4 FA 9F CD |  if_b	jmp	#LR__0581
06d00                 | LR__0586
06d00                 | ' return 0
06d00     00 FA 05 F6 | 	mov	result1, #0
06d04                 | LR__0587
06d04     A7 F0 03 F6 | 	mov	ptra, fp
06d08     B2 00 A0 FD | 	call	#popregs_
06d0c                 | _compile_print_ret
06d0c     2D 00 64 FD | 	ret
06d10                 | 
06d10                 | ' 
06d10                 | ' function compile_if() as ulong  
06d10                 | _compile_if
06d10     05 4A 05 F6 | 	mov	COUNT_, #5
06d14     A8 00 A0 FD | 	call	#pushregs_
06d18                 | _compile_if_enter
06d18     28 F3 BF FD | 	call	#_compile_converttoint
06d1c                 | ' return err
06d1c     56 00 00 FF 
06d20     18 E4 05 F1 | 	add	objptr, ##44056
06d24     F2 FA 01 FB | 	rdlong	result1, objptr
06d28     01 FA 05 F1 | 	add	result1, #1
06d2c     F2 FA 61 FC | 	wrlong	result1, objptr
06d30     58 22 06 F6 | 	mov	local03, #88
06d34     0F 25 02 F6 | 	mov	local04, local01
06d38     10 27 02 F6 | 	mov	local05, local02
06d3c     11 1F 02 F6 | 	mov	local01, local03
06d40     13 00 00 FF 
06d44     38 E4 05 F1 | 	add	objptr, ##9784
06d48     F2 12 02 FB | 	rdlong	arg01, objptr
06d4c     09 FB 01 F6 | 	mov	result1, arg01
06d50     01 FA 65 F0 | 	shl	result1, #1
06d54     09 FB 01 F1 | 	add	result1, arg01
06d58     02 FA 65 F0 | 	shl	result1, #2
06d5c     03 00 00 FF 
06d60     00 E4 85 F1 | 	sub	objptr, ##1536
06d64     F2 FA 01 F1 | 	add	result1, objptr
06d68     FD 24 62 FC | 	wrlong	local04, result1
06d6c     03 00 00 FF 
06d70     00 E4 05 F1 | 	add	objptr, ##1536
06d74     F2 12 02 FB | 	rdlong	arg01, objptr
06d78     09 25 02 F6 | 	mov	local04, arg01
06d7c     01 24 66 F0 | 	shl	local04, #1
06d80     09 25 02 F1 | 	add	local04, arg01
06d84     02 24 66 F0 | 	shl	local04, #2
06d88     03 00 00 FF 
06d8c     00 E4 85 F1 | 	sub	objptr, ##1536
06d90     F2 24 02 F1 | 	add	local04, objptr
06d94     04 24 06 F1 | 	add	local04, #4
06d98     12 27 62 FC | 	wrlong	local05, local04
06d9c     03 00 00 FF 
06da0     00 E4 05 F1 | 	add	objptr, ##1536
06da4     F2 24 02 FB | 	rdlong	local04, objptr
06da8     12 27 02 F6 | 	mov	local05, local04
06dac     01 26 66 F0 | 	shl	local05, #1
06db0     12 27 02 F1 | 	add	local05, local04
06db4     02 26 66 F0 | 	shl	local05, #2
06db8     03 00 00 FF 
06dbc     00 E4 85 F1 | 	sub	objptr, ##1536
06dc0     F2 26 02 F1 | 	add	local05, objptr
06dc4     08 26 06 F1 | 	add	local05, #8
06dc8     13 1F 62 FC | 	wrlong	local01, local05
06dcc     03 00 00 FF 
06dd0     00 E4 05 F1 | 	add	objptr, ##1536
06dd4     F2 24 02 FB | 	rdlong	local04, objptr
06dd8     01 24 06 F1 | 	add	local04, #1
06ddc     F2 24 62 FC | 	wrlong	local04, objptr
06de0                 | ' 
06de0                 | ' 'print "In compile_if"
06de0                 | ' compile_int_fun_1p()
06de0                 | ' cmd=lparts(ct).token : ct+=1
06de0                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06de0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06de0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06de0     13 00 00 FF 
06de4     38 E4 85 F1 | 	sub	objptr, ##9784
06de8     F2 26 02 FB | 	rdlong	local05, objptr
06dec     01 26 06 F1 | 	add	local05, #1
06df0     03 26 66 F0 | 	shl	local05, #3
06df4     02 00 00 FF 
06df8     38 E4 85 F1 | 	sub	objptr, ##1080
06dfc     F2 26 02 F1 | 	add	local05, objptr
06e00     13 13 02 FB | 	rdlong	arg01, local05
06e04     53 00 00 FF 
06e08     E0 E5 85 F1 | 	sub	objptr, ##42976
06e0c                 | ' 
06e0c                 | ' select case s
06e0c     41 01 00 FF 
06e10     BD 14 06 F6 | 	mov	arg02, ##@LR__4424
06e14     E4 1D B1 FD | 	call	#__system___string_cmp
06e18     00 FA 0D F2 | 	cmp	result1, #0 wz
06e1c     1B FA 05 A6 |  if_e	mov	result1, #27
06e20     00 FA 05 56 |  if_ne	mov	result1, #0
06e24     00 FA 0D F2 | 	cmp	result1, #0 wz
06e28     0C 00 90 AD |  if_e	jmp	#LR__0590
06e2c     05 12 06 F6 | 	mov	arg01, #5
06e30     20 EC BF FD | 	call	#_compile_immediate_assign
06e34     08 00 90 FD | 	jmp	#LR__0591
06e38                 | LR__0590
06e38     05 12 06 F6 | 	mov	arg01, #5
06e3c     8C E4 BF FD | 	call	#_compile_immediate
06e40                 | LR__0591
06e40                 | ' 
06e40                 | ' 
06e40                 | ' return 0
06e40     00 FA 05 F6 | 	mov	result1, #0
06e44     A7 F0 03 F6 | 	mov	ptra, fp
06e48     B2 00 A0 FD | 	call	#popregs_
06e4c                 | _compile_if_ret
06e4c     2D 00 64 FD | 	ret
06e50                 | 
06e50                 | ' 
06e50                 | ' function compile_else() as ulong  
06e50                 | _compile_else
06e50     05 4A 05 F6 | 	mov	COUNT_, #5
06e54     A8 00 A0 FD | 	call	#pushregs_
06e58                 | _compile_else_enter
06e58     5A 22 06 F6 | 	mov	local03, #90
06e5c     0F 25 02 F6 | 	mov	local04, local01
06e60     10 27 02 F6 | 	mov	local05, local02
06e64     11 1F 02 F6 | 	mov	local01, local03
06e68     69 00 00 FF 
06e6c     50 E4 05 F1 | 	add	objptr, ##53840
06e70     F2 12 02 FB | 	rdlong	arg01, objptr
06e74     09 FB 01 F6 | 	mov	result1, arg01
06e78     01 FA 65 F0 | 	shl	result1, #1
06e7c     09 FB 01 F1 | 	add	result1, arg01
06e80     02 FA 65 F0 | 	shl	result1, #2
06e84     03 00 00 FF 
06e88     00 E4 85 F1 | 	sub	objptr, ##1536
06e8c     F2 FA 01 F1 | 	add	result1, objptr
06e90     FD 24 62 FC | 	wrlong	local04, result1
06e94     03 00 00 FF 
06e98     00 E4 05 F1 | 	add	objptr, ##1536
06e9c     F2 FA 01 FB | 	rdlong	result1, objptr
06ea0     FD 24 02 F6 | 	mov	local04, result1
06ea4     01 24 66 F0 | 	shl	local04, #1
06ea8     FD 24 02 F1 | 	add	local04, result1
06eac     02 24 66 F0 | 	shl	local04, #2
06eb0     03 00 00 FF 
06eb4     00 E4 85 F1 | 	sub	objptr, ##1536
06eb8     F2 24 02 F1 | 	add	local04, objptr
06ebc     04 24 06 F1 | 	add	local04, #4
06ec0     12 27 62 FC | 	wrlong	local05, local04
06ec4     03 00 00 FF 
06ec8     00 E4 05 F1 | 	add	objptr, ##1536
06ecc     F2 24 02 FB | 	rdlong	local04, objptr
06ed0     12 27 02 F6 | 	mov	local05, local04
06ed4     01 26 66 F0 | 	shl	local05, #1
06ed8     12 27 02 F1 | 	add	local05, local04
06edc     02 26 66 F0 | 	shl	local05, #2
06ee0     03 00 00 FF 
06ee4     00 E4 85 F1 | 	sub	objptr, ##1536
06ee8     F2 26 02 F1 | 	add	local05, objptr
06eec     08 26 06 F1 | 	add	local05, #8
06ef0     13 1F 62 FC | 	wrlong	local01, local05
06ef4     03 00 00 FF 
06ef8     00 E4 05 F1 | 	add	objptr, ##1536
06efc     F2 24 02 FB | 	rdlong	local04, objptr
06f00     01 24 06 F1 | 	add	local04, #1
06f04     F2 24 62 FC | 	wrlong	local04, objptr
06f08                 | ' 
06f08                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06f08                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06f08     13 00 00 FF 
06f0c     38 E4 85 F1 | 	sub	objptr, ##9784
06f10     F2 26 02 FB | 	rdlong	local05, objptr
06f14     01 26 06 F1 | 	add	local05, #1
06f18     03 26 66 F0 | 	shl	local05, #3
06f1c     02 00 00 FF 
06f20     38 E4 85 F1 | 	sub	objptr, ##1080
06f24     F2 26 02 F1 | 	add	local05, objptr
06f28     13 13 02 FB | 	rdlong	arg01, local05
06f2c     53 00 00 FF 
06f30     E0 E5 85 F1 | 	sub	objptr, ##42976
06f34                 | ' 
06f34                 | ' select case s
06f34     41 01 00 FF 
06f38     BD 14 06 F6 | 	mov	arg02, ##@LR__4424
06f3c     BC 1C B1 FD | 	call	#__system___string_cmp
06f40     00 FA 0D F2 | 	cmp	result1, #0 wz
06f44     1B FA 05 A6 |  if_e	mov	result1, #27
06f48     00 FA 05 56 |  if_ne	mov	result1, #0
06f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f50     0C 00 90 AD |  if_e	jmp	#LR__0600
06f54     05 12 06 F6 | 	mov	arg01, #5
06f58     F8 EA BF FD | 	call	#_compile_immediate_assign
06f5c     08 00 90 FD | 	jmp	#LR__0601
06f60                 | LR__0600
06f60     05 12 06 F6 | 	mov	arg01, #5
06f64     64 E3 BF FD | 	call	#_compile_immediate
06f68                 | LR__0601
06f68                 | ' 
06f68                 | ' 
06f68                 | ' return 0
06f68     00 FA 05 F6 | 	mov	result1, #0
06f6c     A7 F0 03 F6 | 	mov	ptra, fp
06f70     B2 00 A0 FD | 	call	#popregs_
06f74                 | _compile_else_ret
06f74     2D 00 64 FD | 	ret
06f78                 | 
06f78                 | ' 
06f78                 | ' 
06f78                 | ' function compile_dim() as ulong  
06f78                 | _compile_dim
06f78     11 4A 05 F6 | 	mov	COUNT_, #17
06f7c     A8 00 A0 FD | 	call	#pushregs_
06f80     01 1E 06 F6 | 	mov	local01, #1
06f84     01 20 06 F6 | 	mov	local02, #1
06f88     01 22 06 F6 | 	mov	local03, #1
06f8c                 | ' 
06f8c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06f8c                 | ' 
06f8c                 | ' if isname(lparts(ct).part$) then 
06f8c     56 00 00 FF 
06f90     18 E4 05 F1 | 	add	objptr, ##44056
06f94     F2 14 02 FB | 	rdlong	arg02, objptr
06f98     03 14 66 F0 | 	shl	arg02, #3
06f9c     02 00 00 FF 
06fa0     38 E4 85 F1 | 	sub	objptr, ##1080
06fa4     F2 14 02 F1 | 	add	arg02, objptr
06fa8     0A 13 02 FB | 	rdlong	arg01, arg02
06fac     53 00 00 FF 
06fb0     E0 E5 85 F1 | 	sub	objptr, ##42976
06fb4     F8 D2 BF FD | 	call	#_isname
06fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
06fbc     30 05 90 AD |  if_e	jmp	#LR__0634
06fc0     56 00 00 FF 
06fc4     18 E4 05 F1 | 	add	objptr, ##44056
06fc8     F2 24 02 FB | 	rdlong	local04, objptr
06fcc     03 24 66 F0 | 	shl	local04, #3
06fd0     02 00 00 FF 
06fd4     38 E4 85 F1 | 	sub	objptr, ##1080
06fd8     F2 24 02 F1 | 	add	local04, objptr
06fdc     12 27 02 FB | 	rdlong	local05, local04
06fe0     01 28 66 F6 | 	neg	local06, #1
06fe4                 | '   varname2$=lparts(ct).part$ 
06fe4                 | '   j=-1
06fe4                 | '   if varnum>0 then
06fe4     04 E4 85 F1 | 	sub	objptr, #4
06fe8     F2 2A 02 FB | 	rdlong	local07, objptr
06fec     53 00 00 FF 
06ff0     DC E5 85 F1 | 	sub	objptr, ##42972
06ff4     01 2A 56 F2 | 	cmps	local07, #1 wc
06ff8     58 00 90 CD |  if_b	jmp	#LR__0612
06ffc                 | '  '   print "in dim, varnum=";varnum
06ffc                 | '     for i=0 to varnum-1
06ffc     00 2C 06 F6 | 	mov	local08, #0
07000     53 00 00 FF 
07004     DC E5 05 F1 | 	add	objptr, ##42972
07008     F2 2E 02 FB | 	rdlong	local09, objptr
0700c     53 00 00 FF 
07010     DC E5 85 F1 | 	sub	objptr, ##42972
07014                 | LR__0610
07014     17 2D 52 F2 | 	cmps	local08, local09 wc
07018     38 00 90 3D |  if_ae	jmp	#LR__0611
0701c                 | '       if variables(i).name=varname2$ then j=i : exit
0701c     16 25 02 F6 | 	mov	local04, local08
07020     04 24 66 F0 | 	shl	local04, #4
07024     33 00 00 FF 
07028     DC E5 05 F1 | 	add	objptr, ##26588
0702c     F2 24 02 F1 | 	add	local04, objptr
07030     12 13 02 FB | 	rdlong	arg01, local04
07034     13 15 02 F6 | 	mov	arg02, local05
07038     33 00 00 FF 
0703c     DC E5 85 F1 | 	sub	objptr, ##26588
07040     B8 1B B1 FD | 	call	#__system___string_cmp
07044     00 FA 0D F2 | 	cmp	result1, #0 wz
07048     16 29 02 A6 |  if_e	mov	local06, local08
0704c     01 2C 06 51 |  if_ne	add	local08, #1
07050     C0 FF 9F 5D |  if_ne	jmp	#LR__0610
07054                 | LR__0611
07054                 | LR__0612
07054                 | '   if j<>-1 then printerror (42) : return 42
07054     FF FF 7F FF 
07058     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0705c     10 00 90 AD |  if_e	jmp	#LR__0613
07060     2A 12 06 F6 | 	mov	arg01, #42
07064     48 E6 B0 FD | 	call	#_printerror
07068     2A FA 05 F6 | 	mov	result1, #42
0706c     D8 05 90 FD | 	jmp	#LR__0636
07070                 | LR__0613
07070                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07070     56 00 00 FF 
07074     18 E4 05 F1 | 	add	objptr, ##44056
07078     F2 14 02 FB | 	rdlong	arg02, objptr
0707c     01 14 06 F1 | 	add	arg02, #1
07080     03 14 66 F0 | 	shl	arg02, #3
07084     02 00 00 FF 
07088     38 E4 85 F1 | 	sub	objptr, ##1080
0708c     F2 14 02 F1 | 	add	arg02, objptr
07090     0A 13 02 FB | 	rdlong	arg01, arg02
07094     42 01 00 FF 
07098     19 15 06 F6 | 	mov	arg02, ##@LR__4569
0709c     53 00 00 FF 
070a0     E0 E5 85 F1 | 	sub	objptr, ##42976
070a4     54 1B B1 FD | 	call	#__system___string_cmp
070a8     00 FA 0D F2 | 	cmp	result1, #0 wz
070ac     50 00 90 AD |  if_e	jmp	#LR__0614
070b0     56 00 00 FF 
070b4     18 E4 05 F1 | 	add	objptr, ##44056
070b8     F2 2E 02 FB | 	rdlong	local09, objptr
070bc     01 2E 06 F1 | 	add	local09, #1
070c0     03 2E 66 F0 | 	shl	local09, #3
070c4     02 00 00 FF 
070c8     38 E4 85 F1 | 	sub	objptr, ##1080
070cc     F2 2E 02 F1 | 	add	local09, objptr
070d0     17 13 02 FB | 	rdlong	arg01, local09
070d4     42 01 00 FF 
070d8     1B 15 06 F6 | 	mov	arg02, ##@LR__4570
070dc     53 00 00 FF 
070e0     E0 E5 85 F1 | 	sub	objptr, ##42976
070e4     14 1B B1 FD | 	call	#__system___string_cmp
070e8     00 FA 0D F2 | 	cmp	result1, #0 wz
070ec     10 00 90 AD |  if_e	jmp	#LR__0614
070f0     2B 12 06 F6 | 	mov	arg01, #43
070f4     B8 E5 B0 FD | 	call	#_printerror
070f8     2B FA 05 F6 | 	mov	result1, #43
070fc     48 05 90 FD | 	jmp	#LR__0636
07100                 | LR__0614
07100                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07100     56 00 00 FF 
07104     18 E4 05 F1 | 	add	objptr, ##44056
07108     F2 14 02 FB | 	rdlong	arg02, objptr
0710c     01 14 06 F1 | 	add	arg02, #1
07110     03 14 66 F0 | 	shl	arg02, #3
07114     02 00 00 FF 
07118     38 E4 85 F1 | 	sub	objptr, ##1080
0711c     F2 14 02 F1 | 	add	arg02, objptr
07120     0A 13 02 FB | 	rdlong	arg01, arg02
07124     42 01 00 FF 
07128     1E 15 06 F6 | 	mov	arg02, ##@LR__4571
0712c     53 00 00 FF 
07130     E0 E5 85 F1 | 	sub	objptr, ##42976
07134     C4 1A B1 FD | 	call	#__system___string_cmp
07138     00 FA 0D F2 | 	cmp	result1, #0 wz
0713c     56 00 00 AF 
07140     18 E4 05 A1 |  if_e	add	objptr, ##44056
07144     F2 30 02 AB |  if_e	rdlong	local10, objptr
07148     56 00 00 AF 
0714c     18 E4 85 A1 |  if_e	sub	objptr, ##44056
07150     01 30 06 A1 |  if_e	add	local10, #1
07154     7C 01 90 AD |  if_e	jmp	#LR__0620
07158     56 00 00 FF 
0715c     18 E4 05 F1 | 	add	objptr, ##44056
07160     F2 30 02 FB | 	rdlong	local10, objptr
07164     56 00 00 FF 
07168     18 E4 85 F1 | 	sub	objptr, ##44056
0716c     02 30 06 F1 | 	add	local10, #2
07170     00 32 06 F6 | 	mov	local11, #0
07174                 | '   l=ct+2 : m=0 : do
07174                 | LR__0615
07174                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07174                 | '     if isdec(lparts(l).part$) then 
07174     18 25 02 F6 | 	mov	local04, local10
07178     03 24 66 F0 | 	shl	local04, #3
0717c     53 00 00 FF 
07180     E0 E5 05 F1 | 	add	objptr, ##42976
07184     F2 24 02 F1 | 	add	local04, objptr
07188     12 13 02 FB | 	rdlong	arg01, local04
0718c     53 00 00 FF 
07190     E0 E5 85 F1 | 	sub	objptr, ##42976
07194     BC D7 BF FD | 	call	#_isdec
07198     00 FA 0D F2 | 	cmp	result1, #0 wz
0719c     44 00 90 AD |  if_e	jmp	#LR__0616
071a0     19 35 02 F6 | 	mov	local12, local11
071a4     0F 35 06 F1 | 	add	local12, #local01
071a8     18 2F 02 F6 | 	mov	local09, local10
071ac     03 2E 66 F0 | 	shl	local09, #3
071b0     53 00 00 FF 
071b4     E0 E5 05 F1 | 	add	objptr, ##42976
071b8     F2 2E 02 F1 | 	add	local09, objptr
071bc     17 13 02 FB | 	rdlong	arg01, local09
071c0     00 14 06 F6 | 	mov	arg02, #0
071c4     53 00 00 FF 
071c8     E0 E5 85 F1 | 	sub	objptr, ##42976
071cc     64 4B B1 FD | 	call	#__system____builtin_atoi
071d0     FD 36 02 F6 | 	mov	local13, result1
071d4                 | 	'.live	local13
071d4                 | 	'.live	local12
071d4     00 34 8E F9 | 	altd	local12, #0
071d8     1B 35 02 F6 | 	mov	local12, local13
071dc     01 32 06 F1 | 	add	local11, #1
071e0     10 00 90 FD | 	jmp	#LR__0617
071e4                 | LR__0616
071e4     11 12 06 F6 | 	mov	arg01, #17
071e8     C4 E4 B0 FD | 	call	#_printerror
071ec                 | '       printerror (17)  : return(17)
071ec     11 FA 05 F6 | 	mov	result1, #17
071f0     54 04 90 FD | 	jmp	#LR__0636
071f4                 | LR__0617
071f4                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
071f4     18 25 02 F6 | 	mov	local04, local10
071f8     01 24 06 F1 | 	add	local04, #1
071fc     03 24 66 F0 | 	shl	local04, #3
07200     53 00 00 FF 
07204     E0 E5 05 F1 | 	add	objptr, ##42976
07208     F2 24 02 F1 | 	add	local04, objptr
0720c     12 13 02 FB | 	rdlong	arg01, local04
07210     42 01 00 FF 
07214     21 15 06 F6 | 	mov	arg02, ##@LR__4572
07218     53 00 00 FF 
0721c     E0 E5 85 F1 | 	sub	objptr, ##42976
07220     D8 19 B1 FD | 	call	#__system___string_cmp
07224     00 FA 0D F2 | 	cmp	result1, #0 wz
07228     48 00 90 AD |  if_e	jmp	#LR__0618
0722c     18 37 02 F6 | 	mov	local13, local10
07230     01 36 06 F1 | 	add	local13, #1
07234     03 36 66 F0 | 	shl	local13, #3
07238     53 00 00 FF 
0723c     E0 E5 05 F1 | 	add	objptr, ##42976
07240     F2 36 02 F1 | 	add	local13, objptr
07244     1B 13 02 FB | 	rdlong	arg01, local13
07248     42 01 00 FF 
0724c     23 15 06 F6 | 	mov	arg02, ##@LR__4573
07250     53 00 00 FF 
07254     E0 E5 85 F1 | 	sub	objptr, ##42976
07258     A0 19 B1 FD | 	call	#__system___string_cmp
0725c     00 FA 0D F2 | 	cmp	result1, #0 wz
07260     10 00 90 AD |  if_e	jmp	#LR__0618
07264     2C 12 06 F6 | 	mov	arg01, #44
07268     44 E4 B0 FD | 	call	#_printerror
0726c     2C FA 05 F6 | 	mov	result1, #44
07270     D4 03 90 FD | 	jmp	#LR__0636
07274                 | LR__0618
07274     02 30 06 F1 | 	add	local10, #2
07278     18 25 02 F6 | 	mov	local04, local10
0727c     01 24 86 F1 | 	sub	local04, #1
07280     03 24 66 F0 | 	shl	local04, #3
07284     53 00 00 FF 
07288     E0 E5 05 F1 | 	add	objptr, ##42976
0728c     F2 24 02 F1 | 	add	local04, objptr
07290     12 13 02 FB | 	rdlong	arg01, local04
07294     42 01 00 FF 
07298     25 15 06 F6 | 	mov	arg02, ##@LR__4574
0729c     53 00 00 FF 
072a0     E0 E5 85 F1 | 	sub	objptr, ##42976
072a4     54 19 B1 FD | 	call	#__system___string_cmp
072a8     00 FA 0D F2 | 	cmp	result1, #0 wz
072ac     03 32 56 52 |  if_ne	cmps	local11, #3 wc
072b0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0615
072b4                 | '   if m>3 then printerror(45): return(45)
072b4     04 32 56 F2 | 	cmps	local11, #4 wc
072b8     10 00 90 CD |  if_b	jmp	#LR__0619
072bc     2D 12 06 F6 | 	mov	arg01, #45
072c0     EC E3 B0 FD | 	call	#_printerror
072c4     2D FA 05 F6 | 	mov	result1, #45
072c8     7C 03 90 FD | 	jmp	#LR__0636
072cc                 | LR__0619
072cc     00 39 06 F6 | 	mov	local14, #256
072d0     0C 3A 06 F6 | 	mov	local15, #12
072d4                 | LR__0620
072d4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
072d4                 | '   arraytype=array_no_type : esize=12
072d4                 | ' 1350 
072d4                 | '   if lparts(l).part$="as" then
072d4     18 25 02 F6 | 	mov	local04, local10
072d8     03 24 66 F0 | 	shl	local04, #3
072dc     53 00 00 FF 
072e0     E0 E5 05 F1 | 	add	objptr, ##42976
072e4     F2 24 02 F1 | 	add	local04, objptr
072e8     12 13 02 FB | 	rdlong	arg01, local04
072ec     42 01 00 FF 
072f0     27 15 06 F6 | 	mov	arg02, ##@LR__4575
072f4     53 00 00 FF 
072f8     E0 E5 85 F1 | 	sub	objptr, ##42976
072fc     FC 18 B1 FD | 	call	#__system___string_cmp
07300     00 FA 0D F2 | 	cmp	result1, #0 wz
07304     F8 01 90 5D |  if_ne	jmp	#LR__0635
07308                 | '     select case lparts(l+1).part$
07308     18 35 02 F6 | 	mov	local12, local10
0730c     01 34 06 F1 | 	add	local12, #1
07310     03 34 66 F0 | 	shl	local12, #3
07314     53 00 00 FF 
07318     E0 E5 05 F1 | 	add	objptr, ##42976
0731c     F2 34 02 F1 | 	add	local12, objptr
07320     1A 3D 02 FB | 	rdlong	local16, local12
07324     42 01 00 FF 
07328     2A 15 06 F6 | 	mov	arg02, ##@LR__4576
0732c     1E 13 02 F6 | 	mov	arg01, local16
07330     53 00 00 FF 
07334     E0 E5 85 F1 | 	sub	objptr, ##42976
07338     C0 18 B1 FD | 	call	#__system___string_cmp
0733c     00 FA 0D F2 | 	cmp	result1, #0 wz
07340     0C 01 90 AD |  if_e	jmp	#LR__0621
07344     42 01 00 FF 
07348     2F 15 06 F6 | 	mov	arg02, ##@LR__4577
0734c     1E 13 02 F6 | 	mov	arg01, local16
07350     A8 18 B1 FD | 	call	#__system___string_cmp
07354     00 FA 0D F2 | 	cmp	result1, #0 wz
07358     00 01 90 AD |  if_e	jmp	#LR__0622
0735c     42 01 00 FF 
07360     35 15 06 F6 | 	mov	arg02, ##@LR__4578
07364     1E 13 02 F6 | 	mov	arg01, local16
07368     90 18 B1 FD | 	call	#__system___string_cmp
0736c     00 FA 0D F2 | 	cmp	result1, #0 wz
07370     F4 00 90 AD |  if_e	jmp	#LR__0623
07374     42 01 00 FF 
07378     3B 15 06 F6 | 	mov	arg02, ##@LR__4579
0737c     1E 13 02 F6 | 	mov	arg01, local16
07380     78 18 B1 FD | 	call	#__system___string_cmp
07384     00 FA 0D F2 | 	cmp	result1, #0 wz
07388     E8 00 90 AD |  if_e	jmp	#LR__0624
0738c     42 01 00 FF 
07390     42 15 06 F6 | 	mov	arg02, ##@LR__4580
07394     1E 13 02 F6 | 	mov	arg01, local16
07398     60 18 B1 FD | 	call	#__system___string_cmp
0739c     00 FA 0D F2 | 	cmp	result1, #0 wz
073a0     DC 00 90 AD |  if_e	jmp	#LR__0625
073a4     42 01 00 FF 
073a8     47 15 06 F6 | 	mov	arg02, ##@LR__4581
073ac     1E 13 02 F6 | 	mov	arg01, local16
073b0     48 18 B1 FD | 	call	#__system___string_cmp
073b4     00 FA 0D F2 | 	cmp	result1, #0 wz
073b8     D0 00 90 AD |  if_e	jmp	#LR__0626
073bc     42 01 00 FF 
073c0     4F 15 06 F6 | 	mov	arg02, ##@LR__4582
073c4     1E 13 02 F6 | 	mov	arg01, local16
073c8     30 18 B1 FD | 	call	#__system___string_cmp
073cc     00 FA 0D F2 | 	cmp	result1, #0 wz
073d0     C4 00 90 AD |  if_e	jmp	#LR__0627
073d4     42 01 00 FF 
073d8     55 15 06 F6 | 	mov	arg02, ##@LR__4583
073dc     1E 13 02 F6 | 	mov	arg01, local16
073e0     18 18 B1 FD | 	call	#__system___string_cmp
073e4     00 FA 0D F2 | 	cmp	result1, #0 wz
073e8     B8 00 90 AD |  if_e	jmp	#LR__0628
073ec     42 01 00 FF 
073f0     5B 15 06 F6 | 	mov	arg02, ##@LR__4584
073f4     1E 13 02 F6 | 	mov	arg01, local16
073f8     00 18 B1 FD | 	call	#__system___string_cmp
073fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07400     AC 00 90 AD |  if_e	jmp	#LR__0629
07404     42 01 00 FF 
07408     62 15 06 F6 | 	mov	arg02, ##@LR__4585
0740c     1E 13 02 F6 | 	mov	arg01, local16
07410     E8 17 B1 FD | 	call	#__system___string_cmp
07414     00 FA 0D F2 | 	cmp	result1, #0 wz
07418     A0 00 90 AD |  if_e	jmp	#LR__0630
0741c     42 01 00 FF 
07420     69 15 06 F6 | 	mov	arg02, ##@LR__4586
07424     1E 13 02 F6 | 	mov	arg01, local16
07428     D0 17 B1 FD | 	call	#__system___string_cmp
0742c     00 FA 0D F2 | 	cmp	result1, #0 wz
07430     94 00 90 AD |  if_e	jmp	#LR__0631
07434     42 01 00 FF 
07438     70 15 06 F6 | 	mov	arg02, ##@LR__4587
0743c     1E 13 02 F6 | 	mov	arg01, local16
07440     B8 17 B1 FD | 	call	#__system___string_cmp
07444     00 FA 0D F2 | 	cmp	result1, #0 wz
07448     88 00 90 AD |  if_e	jmp	#LR__0632
0744c     90 00 90 FD | 	jmp	#LR__0633
07450                 | LR__0621
07450     01 39 06 F6 | 	mov	local14, #257
07454     01 3A 06 F6 | 	mov	local15, #1
07458     A4 00 90 FD | 	jmp	#LR__0635
0745c                 | LR__0622
0745c     02 39 06 F6 | 	mov	local14, #258
07460     01 3A 06 F6 | 	mov	local15, #1
07464     98 00 90 FD | 	jmp	#LR__0635
07468                 | LR__0623
07468     03 39 06 F6 | 	mov	local14, #259
0746c     02 3A 06 F6 | 	mov	local15, #2
07470     8C 00 90 FD | 	jmp	#LR__0635
07474                 | LR__0624
07474     04 39 06 F6 | 	mov	local14, #260
07478     02 3A 06 F6 | 	mov	local15, #2
0747c     80 00 90 FD | 	jmp	#LR__0635
07480                 | LR__0625
07480     05 39 06 F6 | 	mov	local14, #261
07484     04 3A 06 F6 | 	mov	local15, #4
07488     74 00 90 FD | 	jmp	#LR__0635
0748c                 | LR__0626
0748c     05 39 06 F6 | 	mov	local14, #261
07490     04 3A 06 F6 | 	mov	local15, #4
07494     68 00 90 FD | 	jmp	#LR__0635
07498                 | LR__0627
07498     06 39 06 F6 | 	mov	local14, #262
0749c     04 3A 06 F6 | 	mov	local15, #4
074a0     5C 00 90 FD | 	jmp	#LR__0635
074a4                 | LR__0628
074a4     07 39 06 F6 | 	mov	local14, #263
074a8     08 3A 06 F6 | 	mov	local15, #8
074ac     50 00 90 FD | 	jmp	#LR__0635
074b0                 | LR__0629
074b0     08 39 06 F6 | 	mov	local14, #264
074b4     08 3A 06 F6 | 	mov	local15, #8
074b8     44 00 90 FD | 	jmp	#LR__0635
074bc                 | LR__0630
074bc     09 39 06 F6 | 	mov	local14, #265
074c0     04 3A 06 F6 | 	mov	local15, #4
074c4     38 00 90 FD | 	jmp	#LR__0635
074c8                 | LR__0631
074c8     0A 39 06 F6 | 	mov	local14, #266
074cc     08 3A 06 F6 | 	mov	local15, #8
074d0     2C 00 90 FD | 	jmp	#LR__0635
074d4                 | LR__0632
074d4     0B 39 06 F6 | 	mov	local14, #267
074d8     04 3A 06 F6 | 	mov	local15, #4
074dc     20 00 90 FD | 	jmp	#LR__0635
074e0                 | LR__0633
074e0     2F 12 06 F6 | 	mov	arg01, #47
074e4     C8 E1 B0 FD | 	call	#_printerror
074e8     2F FA 05 F6 | 	mov	result1, #47
074ec     58 01 90 FD | 	jmp	#LR__0636
074f0                 | LR__0634
074f0     2E 12 06 F6 | 	mov	arg01, #46
074f4     B8 E1 B0 FD | 	call	#_printerror
074f8                 | '   printerror(46): return 46
074f8     2E FA 05 F6 | 	mov	result1, #46
074fc     48 01 90 FD | 	jmp	#LR__0636
07500                 | LR__0635
07500     0F 3B 02 FD | 	qmul	local15, local01
07504     18 2A 62 FD | 	getqx	local07
07508     10 2B 02 FD | 	qmul	local07, local02
0750c     18 3C 62 FD | 	getqx	local16
07510     11 3D 02 FD | 	qmul	local16, local03
07514     7A 00 00 FF 
07518     4C E4 05 F1 | 	add	objptr, ##62540
0751c     F2 3E 02 FB | 	rdlong	local17, objptr
07520     1C 15 02 F6 | 	mov	arg02, local14
07524     01 16 06 F6 | 	mov	arg03, #1
07528     00 18 06 F6 | 	mov	arg04, #0
0752c                 | '     return fill(addr, pattern, count, listPtr, 4)
0752c     04 1A 06 F6 | 	mov	arg05, #4
07530     18 3C 62 FD | 	getqx	local16
07534     1E 3F 82 F1 | 	sub	local17, local16
07538     10 3E 86 F1 | 	sub	local17, #16
0753c     F2 3E 62 FC | 	wrlong	local17, objptr
07540     1F 13 02 F6 | 	mov	arg01, local17
07544     6E 00 00 FF 
07548     8C E5 85 F1 | 	sub	objptr, ##56716
0754c     CC 0C B1 FD | 	call	#_psram_spin2_fill
07550     1F 13 02 F6 | 	mov	arg01, local17
07554     02 12 06 F1 | 	add	arg01, #2
07558     1D 15 02 F6 | 	mov	arg02, local15
0755c     01 16 06 F6 | 	mov	arg03, #1
07560     00 18 06 F6 | 	mov	arg04, #0
07564                 | '     return fill(addr, pattern, count, listPtr, 1)
07564     01 1A 06 F6 | 	mov	arg05, #1
07568     B0 0C B1 FD | 	call	#_psram_spin2_fill
0756c     1F 13 02 F6 | 	mov	arg01, local17
07570     04 12 06 F1 | 	add	arg01, #4
07574     0F 15 02 F6 | 	mov	arg02, local01
07578     01 16 06 F6 | 	mov	arg03, #1
0757c     00 18 06 F6 | 	mov	arg04, #0
07580                 | '     return fill(addr, pattern, count, listPtr, 4)
07580     04 1A 06 F6 | 	mov	arg05, #4
07584     94 0C B1 FD | 	call	#_psram_spin2_fill
07588     1F 13 02 F6 | 	mov	arg01, local17
0758c     08 12 06 F1 | 	add	arg01, #8
07590     10 15 02 F6 | 	mov	arg02, local02
07594     01 16 06 F6 | 	mov	arg03, #1
07598     00 18 06 F6 | 	mov	arg04, #0
0759c                 | '     return fill(addr, pattern, count, listPtr, 4)
0759c     04 1A 06 F6 | 	mov	arg05, #4
075a0     78 0C B1 FD | 	call	#_psram_spin2_fill
075a4     1F 13 02 F6 | 	mov	arg01, local17
075a8     0C 12 06 F1 | 	add	arg01, #12
075ac     11 15 02 F6 | 	mov	arg02, local03
075b0     01 16 06 F6 | 	mov	arg03, #1
075b4     00 18 06 F6 | 	mov	arg04, #0
075b8                 | '     return fill(addr, pattern, count, listPtr, 4)
075b8     04 1A 06 F6 | 	mov	arg05, #4
075bc     5C 0C B1 FD | 	call	#_psram_spin2_fill
075c0     48 00 00 FF 
075c4     1C E5 05 F1 | 	add	objptr, ##37148
075c8     F2 24 02 FB | 	rdlong	local04, objptr
075cc     04 24 66 F0 | 	shl	local04, #4
075d0     20 00 00 FF 
075d4     00 E4 85 F1 | 	sub	objptr, ##16384
075d8     F2 24 02 F1 | 	add	local04, objptr
075dc     12 27 62 FC | 	wrlong	local05, local04
075e0     20 00 00 FF 
075e4     00 E4 05 F1 | 	add	objptr, ##16384
075e8     F2 24 02 FB | 	rdlong	local04, objptr
075ec     04 24 66 F0 | 	shl	local04, #4
075f0     20 00 00 FF 
075f4     00 E4 85 F1 | 	sub	objptr, ##16384
075f8     F2 24 02 F1 | 	add	local04, objptr
075fc     04 24 06 F1 | 	add	local04, #4
07600     12 3F 62 FC | 	wrlong	local17, local04
07604     20 00 00 FF 
07608     00 E4 05 F1 | 	add	objptr, ##16384
0760c     F2 24 02 FB | 	rdlong	local04, objptr
07610     04 24 66 F0 | 	shl	local04, #4
07614     20 00 00 FF 
07618     00 E4 85 F1 | 	sub	objptr, ##16384
0761c     F2 24 02 F1 | 	add	local04, objptr
07620     0C 24 06 F1 | 	add	local04, #12
07624     12 39 62 FC | 	wrlong	local14, local04
07628     20 00 00 FF 
0762c     00 E4 05 F1 | 	add	objptr, ##16384
07630     F2 2A 02 FB | 	rdlong	local07, objptr
07634     01 2A 06 F1 | 	add	local07, #1
07638     F2 2A 62 FC | 	wrlong	local07, objptr
0763c     53 00 00 FF 
07640     DC E5 85 F1 | 	sub	objptr, ##42972
07644                 | ' 'print dims(0),dims(1),dims(2),arraytype
07644                 | ' 
07644                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
07644                 | ' arrayptr=memtop-arraysize-16
07644                 | ' memtop=arrayptr
07644                 | ' 
07644                 | ' pslpoke arrayptr,arraytype
07644                 | ' pspoke arrayptr+2,esize
07644                 | ' pslpoke arrayptr+4,dims(0)
07644                 | ' pslpoke arrayptr+8,dims(1)
07644                 | ' pslpoke arrayptr+12,dims(2)
07644                 | ' 
07644                 | ' variables(varnum).name=varname2$
07644                 | ' variables(varnum).value.uresult=arrayptr
07644                 | ' variables(varnum).vartype=arraytype
07644                 | ' varnum+=1
07644                 | ' 
07644                 | ' return 0
07644     00 FA 05 F6 | 	mov	result1, #0
07648                 | LR__0636
07648     A7 F0 03 F6 | 	mov	ptra, fp
0764c     B2 00 A0 FD | 	call	#popregs_
07650                 | _compile_dim_ret
07650     2D 00 64 FD | 	ret
07654                 | 
07654                 | ' 
07654                 | ' 
07654                 | ' function compile_for() as ulong  
07654                 | _compile_for
07654     07 4A 05 F6 | 	mov	COUNT_, #7
07658     A8 00 A0 FD | 	call	#pushregs_
0765c                 | ' 
0765c                 | ' 
0765c                 | ' 
0765c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0765c     56 00 00 FF 
07660     18 E4 05 F1 | 	add	objptr, ##44056
07664     F2 14 02 FB | 	rdlong	arg02, objptr
07668     01 14 06 F1 | 	add	arg02, #1
0766c     03 14 66 F0 | 	shl	arg02, #3
07670     02 00 00 FF 
07674     38 E4 85 F1 | 	sub	objptr, ##1080
07678     F2 14 02 F1 | 	add	arg02, objptr
0767c     0A 13 02 FB | 	rdlong	arg01, arg02
07680     53 00 00 FF 
07684     E0 E5 85 F1 | 	sub	objptr, ##42976
07688                 | ' 
07688                 | ' select case s
07688     41 01 00 FF 
0768c     BD 14 06 F6 | 	mov	arg02, ##@LR__4424
07690     68 15 B1 FD | 	call	#__system___string_cmp
07694     00 FA 0D F2 | 	cmp	result1, #0 wz
07698     1B FA 05 A6 |  if_e	mov	result1, #27
0769c     00 FA 05 56 |  if_ne	mov	result1, #0
076a0     00 FA 0D F2 | 	cmp	result1, #0 wz
076a4     0C 00 90 AD |  if_e	jmp	#LR__0640
076a8     05 12 06 F6 | 	mov	arg01, #5
076ac     A4 E3 BF FD | 	call	#_compile_immediate_assign
076b0     10 00 90 FD | 	jmp	#LR__0641
076b4                 | LR__0640
076b4     20 12 06 F6 | 	mov	arg01, #32
076b8     14 E8 BF FD | 	call	#_compile_error
076bc     20 FA 05 F6 | 	mov	result1, #32
076c0     E8 02 90 FD | 	jmp	#LR__0647
076c4                 | LR__0641
076c4     69 00 00 FF 
076c8     50 E4 05 F1 | 	add	objptr, ##53840
076cc     F2 12 02 FB | 	rdlong	arg01, objptr
076d0     09 25 02 F6 | 	mov	local04, arg01
076d4     01 24 86 F1 | 	sub	local04, #1
076d8     12 15 02 F6 | 	mov	arg02, local04
076dc     01 14 66 F0 | 	shl	arg02, #1
076e0     12 15 02 F1 | 	add	arg02, local04
076e4     02 14 66 F0 | 	shl	arg02, #2
076e8     03 00 00 FF 
076ec     00 E4 85 F1 | 	sub	objptr, ##1536
076f0     F2 14 02 F1 | 	add	arg02, objptr
076f4     0A 1F 02 FB | 	rdlong	local01, arg02
076f8     04 14 06 F1 | 	add	arg02, #4
076fc     0A 27 02 FB | 	rdlong	local05, arg02
07700     01 12 86 F1 | 	sub	arg01, #1
07704     09 29 02 F6 | 	mov	local06, arg01
07708     01 28 66 F0 | 	shl	local06, #1
0770c     09 29 02 F1 | 	add	local06, arg01
07710     02 28 66 F0 | 	shl	local06, #2
07714     F2 28 02 F1 | 	add	local06, objptr
07718     08 28 06 F1 | 	add	local06, #8
0771c     14 13 02 FB | 	rdlong	arg01, local06
07720     13 21 02 F6 | 	mov	local02, local05
07724     09 23 02 F6 | 	mov	local03, arg01
07728                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07728                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07728     17 22 0E F2 | 	cmp	local03, #23 wz
0772c     66 00 00 FF 
07730     50 E4 85 F1 | 	sub	objptr, ##52304
07734     10 00 90 AD |  if_e	jmp	#LR__0642
07738     22 12 06 F6 | 	mov	arg01, #34
0773c     90 E7 BF FD | 	call	#_compile_error
07740     22 FA 05 F6 | 	mov	result1, #34
07744     64 02 90 FD | 	jmp	#LR__0647
07748                 | LR__0642
07748     0F 2B 02 F6 | 	mov	local07, local01
0774c                 | ' varnum=t1.result.uresult
0774c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0774c     56 00 00 FF 
07750     18 E4 05 F1 | 	add	objptr, ##44056
07754     F2 24 02 FB | 	rdlong	local04, objptr
07758     03 24 66 F0 | 	shl	local04, #3
0775c     02 00 00 FF 
07760     38 E4 85 F1 | 	sub	objptr, ##1080
07764     F2 24 02 F1 | 	add	local04, objptr
07768     12 13 02 FB | 	rdlong	arg01, local04
0776c     42 01 00 FF 
07770     77 15 06 F6 | 	mov	arg02, ##@LR__4588
07774     53 00 00 FF 
07778     E0 E5 85 F1 | 	sub	objptr, ##42976
0777c     7C 14 B1 FD | 	call	#__system___string_cmp
07780     00 FA 0D F2 | 	cmp	result1, #0 wz
07784     10 00 90 AD |  if_e	jmp	#LR__0643
07788     21 12 06 F6 | 	mov	arg01, #33
0778c     40 E7 BF FD | 	call	#_compile_error
07790     21 FA 05 F6 | 	mov	result1, #33
07794     14 02 90 FD | 	jmp	#LR__0647
07798                 | LR__0643
07798     56 00 00 FF 
0779c     18 E4 05 F1 | 	add	objptr, ##44056
077a0     F2 24 02 FB | 	rdlong	local04, objptr
077a4     01 24 06 F1 | 	add	local04, #1
077a8     F2 24 62 FC | 	wrlong	local04, objptr
077ac     56 00 00 FF 
077b0     18 E4 85 F1 | 	sub	objptr, ##44056
077b4     D4 0B B0 FD | 	call	#_expr
077b8                 | ' ct+=1
077b8                 | ' expr()  ' there is "to" value pushed on the stack
077b8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="st."then 
077b8     56 00 00 FF 
077bc     18 E4 05 F1 | 	add	objptr, ##44056
077c0     F2 24 02 FB | 	rdlong	local04, objptr
077c4     03 24 66 F0 | 	shl	local04, #3
077c8     02 00 00 FF 
077cc     38 E4 85 F1 | 	sub	objptr, ##1080
077d0     F2 24 02 F1 | 	add	local04, objptr
077d4     12 13 02 FB | 	rdlong	arg01, local04
077d8     42 01 00 FF 
077dc     7A 15 06 F6 | 	mov	arg02, ##@LR__4589
077e0     53 00 00 FF 
077e4     E0 E5 85 F1 | 	sub	objptr, ##42976
077e8     10 14 B1 FD | 	call	#__system___string_cmp
077ec     00 FA 0D F2 | 	cmp	result1, #0 wz
077f0     3C 00 90 AD |  if_e	jmp	#LR__0644
077f4     56 00 00 FF 
077f8     18 E4 05 F1 | 	add	objptr, ##44056
077fc     F2 28 02 FB | 	rdlong	local06, objptr
07800     03 28 66 F0 | 	shl	local06, #3
07804     02 00 00 FF 
07808     38 E4 85 F1 | 	sub	objptr, ##1080
0780c     F2 28 02 F1 | 	add	local06, objptr
07810     14 13 02 FB | 	rdlong	arg01, local06
07814     42 01 00 FF 
07818     7F 15 06 F6 | 	mov	arg02, ##@LR__4590
0781c     53 00 00 FF 
07820     E0 E5 85 F1 | 	sub	objptr, ##42976
07824     D4 13 B1 FD | 	call	#__system___string_cmp
07828     00 FA 0D F2 | 	cmp	result1, #0 wz
0782c     24 00 90 5D |  if_ne	jmp	#LR__0645
07830                 | LR__0644
07830     56 00 00 FF 
07834     18 E4 05 F1 | 	add	objptr, ##44056
07838     F2 28 02 FB | 	rdlong	local06, objptr
0783c     01 28 06 F1 | 	add	local06, #1
07840     F2 28 62 FC | 	wrlong	local06, objptr
07844     56 00 00 FF 
07848     18 E4 85 F1 | 	sub	objptr, ##44056
0784c     3C 0B B0 FD | 	call	#_expr
07850     78 00 90 FD | 	jmp	#LR__0646
07854                 | LR__0645
07854     69 00 00 FF 
07858     50 E4 05 F1 | 	add	objptr, ##53840
0785c     F2 28 02 FB | 	rdlong	local06, objptr
07860     14 27 02 F6 | 	mov	local05, local06
07864     01 26 66 F0 | 	shl	local05, #1
07868     14 27 02 F1 | 	add	local05, local06
0786c     02 26 66 F0 | 	shl	local05, #2
07870     03 00 00 FF 
07874     00 E4 85 F1 | 	sub	objptr, ##1536
07878     F2 26 02 F1 | 	add	local05, objptr
0787c     08 26 06 F1 | 	add	local05, #8
07880     13 39 68 FC | 	wrlong	#28, local05
07884     03 00 00 FF 
07888     00 E4 05 F1 | 	add	objptr, ##1536
0788c     F2 28 02 FB | 	rdlong	local06, objptr
07890     14 27 02 F6 | 	mov	local05, local06
07894     01 26 66 F0 | 	shl	local05, #1
07898     14 27 02 F1 | 	add	local05, local06
0789c     02 26 66 F0 | 	shl	local05, #2
078a0     03 00 00 FF 
078a4     00 E4 85 F1 | 	sub	objptr, ##1536
078a8     F2 26 02 F1 | 	add	local05, objptr
078ac     13 03 68 FC | 	wrlong	#1, local05
078b0     03 00 00 FF 
078b4     00 E4 05 F1 | 	add	objptr, ##1536
078b8     F2 28 02 FB | 	rdlong	local06, objptr
078bc     01 28 06 F1 | 	add	local06, #1
078c0     F2 28 62 FC | 	wrlong	local06, objptr
078c4     69 00 00 FF 
078c8     50 E4 85 F1 | 	sub	objptr, ##53840
078cc                 | LR__0646
078cc     69 00 00 FF 
078d0     50 E4 05 F1 | 	add	objptr, ##53840
078d4     F2 28 02 FB | 	rdlong	local06, objptr
078d8     14 27 02 F6 | 	mov	local05, local06
078dc     01 26 66 F0 | 	shl	local05, #1
078e0     14 27 02 F1 | 	add	local05, local06
078e4     02 26 66 F0 | 	shl	local05, #2
078e8     03 00 00 FF 
078ec     00 E4 85 F1 | 	sub	objptr, ##1536
078f0     F2 26 02 F1 | 	add	local05, objptr
078f4     08 26 06 F1 | 	add	local05, #8
078f8     13 39 68 FC | 	wrlong	#28, local05
078fc     03 00 00 FF 
07900     00 E4 05 F1 | 	add	objptr, ##1536
07904     F2 28 02 FB | 	rdlong	local06, objptr
07908     14 27 02 F6 | 	mov	local05, local06
0790c     01 26 66 F0 | 	shl	local05, #1
07910     14 27 02 F1 | 	add	local05, local06
07914     02 26 66 F0 | 	shl	local05, #2
07918     03 00 00 FF 
0791c     00 E4 85 F1 | 	sub	objptr, ##1536
07920     F2 26 02 F1 | 	add	local05, objptr
07924     13 2B 62 FC | 	wrlong	local07, local05
07928     03 00 00 FF 
0792c     00 E4 05 F1 | 	add	objptr, ##1536
07930     F2 2A 02 FB | 	rdlong	local07, objptr
07934     01 2A 06 F1 | 	add	local07, #1
07938     F2 2A 62 FC | 	wrlong	local07, objptr
0793c     15 29 02 F6 | 	mov	local06, local07
07940     01 28 66 F0 | 	shl	local06, #1
07944     15 29 02 F1 | 	add	local06, local07
07948     02 28 66 F0 | 	shl	local06, #2
0794c     03 00 00 FF 
07950     00 E4 85 F1 | 	sub	objptr, ##1536
07954     F2 28 02 F1 | 	add	local06, objptr
07958     08 28 06 F1 | 	add	local06, #8
0795c     14 95 68 FC | 	wrlong	#74, local06
07960     03 00 00 FF 
07964     00 E4 05 F1 | 	add	objptr, ##1536
07968     F2 2A 02 FB | 	rdlong	local07, objptr
0796c     15 29 02 F6 | 	mov	local06, local07
07970     01 28 66 F0 | 	shl	local06, #1
07974     15 29 02 F1 | 	add	local06, local07
07978     02 28 66 F0 | 	shl	local06, #2
0797c     03 00 00 FF 
07980     00 E4 85 F1 | 	sub	objptr, ##1536
07984     F2 28 02 F1 | 	add	local06, objptr
07988     14 01 68 FC | 	wrlong	#0, local06
0798c     03 00 00 FF 
07990     00 E4 05 F1 | 	add	objptr, ##1536
07994     F2 2A 02 FB | 	rdlong	local07, objptr
07998     01 2A 06 F1 | 	add	local07, #1
0799c     F2 2A 62 FC | 	wrlong	local07, objptr
079a0     69 00 00 FF 
079a4     50 E4 85 F1 | 	sub	objptr, ##53840
079a8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
079a8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
079a8                 | ' 
079a8                 | ' 
079a8                 | ' return 0
079a8     00 FA 05 F6 | 	mov	result1, #0
079ac                 | LR__0647
079ac     A7 F0 03 F6 | 	mov	ptra, fp
079b0     B2 00 A0 FD | 	call	#popregs_
079b4                 | _compile_for_ret
079b4     2D 00 64 FD | 	ret
079b8                 | 
079b8                 | ' 
079b8                 | ' 
079b8                 | ' sub do_for()
079b8                 | _do_for
079b8     05 4A 05 F6 | 	mov	COUNT_, #5
079bc     A8 00 A0 FD | 	call	#pushregs_
079c0     78 00 00 FF 
079c4     AC E5 05 F1 | 	add	objptr, ##61868
079c8     F2 24 02 FB | 	rdlong	local04, objptr
079cc     01 24 06 F1 | 	add	local04, #1
079d0     F2 24 62 FC | 	wrlong	local04, objptr
079d4     78 00 00 FF 
079d8     AC E5 85 F1 | 	sub	objptr, ##61868
079dc     5C 1E B0 FD | 	call	#_pop
079e0     FD 1E 02 F6 | 	mov	local01, result1
079e4     FE 20 02 F6 | 	mov	local02, result2
079e8     FF 22 02 F6 | 	mov	local03, result3
079ec     78 00 00 FF 
079f0     AC E5 05 F1 | 	add	objptr, ##61868
079f4     F2 24 02 FB | 	rdlong	local04, objptr
079f8     12 27 02 F6 | 	mov	local05, local04
079fc     02 26 66 F0 | 	shl	local05, #2
07a00     12 27 02 F1 | 	add	local05, local04
07a04     02 26 66 F0 | 	shl	local05, #2
07a08     07 00 00 FF 
07a0c     40 E5 85 F1 | 	sub	objptr, ##3904
07a10     F2 26 02 F1 | 	add	local05, objptr
07a14     08 26 06 F1 | 	add	local05, #8
07a18     13 1F 62 FC | 	wrlong	local01, local05
07a1c     71 00 00 FF 
07a20     6C E4 85 F1 | 	sub	objptr, ##57964
07a24     14 1E B0 FD | 	call	#_pop
07a28     FD 1E 02 F6 | 	mov	local01, result1
07a2c     FE 20 02 F6 | 	mov	local02, result2
07a30     FF 22 02 F6 | 	mov	local03, result3
07a34     78 00 00 FF 
07a38     AC E5 05 F1 | 	add	objptr, ##61868
07a3c     F2 24 02 FB | 	rdlong	local04, objptr
07a40     12 27 02 F6 | 	mov	local05, local04
07a44     02 26 66 F0 | 	shl	local05, #2
07a48     12 27 02 F1 | 	add	local05, local04
07a4c     02 26 66 F0 | 	shl	local05, #2
07a50     07 00 00 FF 
07a54     40 E5 85 F1 | 	sub	objptr, ##3904
07a58     F2 26 02 F1 | 	add	local05, objptr
07a5c     0C 26 06 F1 | 	add	local05, #12
07a60     13 1F 62 FC | 	wrlong	local01, local05
07a64     71 00 00 FF 
07a68     6C E4 85 F1 | 	sub	objptr, ##57964
07a6c     CC 1D B0 FD | 	call	#_pop
07a70     FD 1E 02 F6 | 	mov	local01, result1
07a74     FE 20 02 F6 | 	mov	local02, result2
07a78     FF 22 02 F6 | 	mov	local03, result3
07a7c     78 00 00 FF 
07a80     AC E5 05 F1 | 	add	objptr, ##61868
07a84     F2 24 02 FB | 	rdlong	local04, objptr
07a88     12 27 02 F6 | 	mov	local05, local04
07a8c     02 26 66 F0 | 	shl	local05, #2
07a90     12 27 02 F1 | 	add	local05, local04
07a94     02 26 66 F0 | 	shl	local05, #2
07a98     07 00 00 FF 
07a9c     40 E5 85 F1 | 	sub	objptr, ##3904
07aa0     F2 26 02 F1 | 	add	local05, objptr
07aa4     10 26 06 F1 | 	add	local05, #16
07aa8     13 1F 62 FC | 	wrlong	local01, local05
07aac                 | ' fortop+=1
07aac                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
07aac                 | ' 'if i> maxfor then printerror(36) : return
07aac                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
07aac                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
07aac                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
07aac                 | ' if compiledline(lineptr_e).result_type=token_end then
07aac     08 00 00 FF 
07ab0     18 E4 85 F1 | 	sub	objptr, ##4120
07ab4     F2 1E 02 FB | 	rdlong	local01, objptr
07ab8     0F 27 02 F6 | 	mov	local05, local01
07abc     01 26 66 F0 | 	shl	local05, #1
07ac0     0F 27 02 F1 | 	add	local05, local01
07ac4     02 26 66 F0 | 	shl	local05, #2
07ac8     03 00 00 FF 
07acc     04 E4 85 F1 | 	sub	objptr, ##1540
07ad0     F2 26 02 F1 | 	add	local05, objptr
07ad4     08 26 06 F1 | 	add	local05, #8
07ad8     13 27 02 FB | 	rdlong	local05, local05
07adc     FE 27 0E F2 | 	cmp	local05, #510 wz
07ae0     66 00 00 FF 
07ae4     50 E4 85 F1 | 	sub	objptr, ##52304
07ae8     70 00 90 5D |  if_ne	jmp	#LR__0650
07aec     78 00 00 FF 
07af0     AC E5 05 F1 | 	add	objptr, ##61868
07af4     F2 1E 02 FB | 	rdlong	local01, objptr
07af8     0F 27 02 F6 | 	mov	local05, local01
07afc     02 26 66 F0 | 	shl	local05, #2
07b00     0F 27 02 F1 | 	add	local05, local01
07b04     02 26 66 F0 | 	shl	local05, #2
07b08     07 00 00 FF 
07b0c     40 E5 85 F1 | 	sub	objptr, ##3904
07b10     F2 26 02 F1 | 	add	local05, objptr
07b14     07 00 00 FF 
07b18     18 E5 05 F1 | 	add	objptr, ##3864
07b1c     F2 1E 02 FB | 	rdlong	local01, objptr
07b20     13 1F 62 FC | 	wrlong	local01, local05
07b24     28 E4 05 F1 | 	add	objptr, #40
07b28     F2 1E 02 FB | 	rdlong	local01, objptr
07b2c     0F 27 02 F6 | 	mov	local05, local01
07b30     02 26 66 F0 | 	shl	local05, #2
07b34     0F 27 02 F1 | 	add	local05, local01
07b38     02 26 66 F0 | 	shl	local05, #2
07b3c     07 00 00 FF 
07b40     40 E5 85 F1 | 	sub	objptr, ##3904
07b44     F2 26 02 F1 | 	add	local05, objptr
07b48     04 26 06 F1 | 	add	local05, #4
07b4c     13 01 68 FC | 	wrlong	#0, local05
07b50     71 00 00 FF 
07b54     6C E4 85 F1 | 	sub	objptr, ##57964
07b58     7C 00 90 FD | 	jmp	#LR__0651
07b5c                 | LR__0650
07b5c     78 00 00 FF 
07b60     AC E5 05 F1 | 	add	objptr, ##61868
07b64     F2 1E 02 FB | 	rdlong	local01, objptr
07b68     0F 27 02 F6 | 	mov	local05, local01
07b6c     02 26 66 F0 | 	shl	local05, #2
07b70     0F 27 02 F1 | 	add	local05, local01
07b74     02 26 66 F0 | 	shl	local05, #2
07b78     07 00 00 FF 
07b7c     40 E5 85 F1 | 	sub	objptr, ##3904
07b80     F2 26 02 F1 | 	add	local05, objptr
07b84     07 00 00 FF 
07b88     20 E5 05 F1 | 	add	objptr, ##3872
07b8c     F2 1E 02 FB | 	rdlong	local01, objptr
07b90     13 1F 62 FC | 	wrlong	local01, local05
07b94     20 E4 05 F1 | 	add	objptr, #32
07b98     F2 1E 02 FB | 	rdlong	local01, objptr
07b9c     0F 27 02 F6 | 	mov	local05, local01
07ba0     02 26 66 F0 | 	shl	local05, #2
07ba4     0F 27 02 F1 | 	add	local05, local01
07ba8     02 26 66 F0 | 	shl	local05, #2
07bac     07 00 00 FF 
07bb0     40 E5 85 F1 | 	sub	objptr, ##3904
07bb4     F2 26 02 F1 | 	add	local05, objptr
07bb8     08 00 00 FF 
07bbc     18 E4 85 F1 | 	sub	objptr, ##4120
07bc0     F2 1E 02 FB | 	rdlong	local01, objptr
07bc4     69 00 00 FF 
07bc8     54 E4 85 F1 | 	sub	objptr, ##53844
07bcc     01 1E 06 F1 | 	add	local01, #1
07bd0     04 26 06 F1 | 	add	local05, #4
07bd4     13 1F 62 FC | 	wrlong	local01, local05
07bd8                 | LR__0651
07bd8     A7 F0 03 F6 | 	mov	ptra, fp
07bdc     B2 00 A0 FD | 	call	#popregs_
07be0                 | _do_for_ret
07be0     2D 00 64 FD | 	ret
07be4                 | 
07be4                 | ' 
07be4                 | ' ' now do_next todo
07be4                 | ' 
07be4                 | ' sub do_next()
07be4                 | _do_next
07be4     04 4A 05 F6 | 	mov	COUNT_, #4
07be8     A8 00 A0 FD | 	call	#pushregs_
07bec     4C 1C B0 FD | 	call	#_pop
07bf0     FD 1E 02 F6 | 	mov	local01, result1
07bf4     FE 20 02 F6 | 	mov	local02, result2
07bf8     FF 22 02 F6 | 	mov	local03, result3
07bfc                 | ' 
07bfc                 | ' t1=pop() :varnum=t1.result.uresult
07bfc                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
07bfc     78 00 00 FF 
07c00     AC E5 05 F1 | 	add	objptr, ##61868
07c04     F2 12 02 FB | 	rdlong	arg01, objptr
07c08     09 25 02 F6 | 	mov	local04, arg01
07c0c     02 24 66 F0 | 	shl	local04, #2
07c10     09 25 02 F1 | 	add	local04, arg01
07c14     02 24 66 F0 | 	shl	local04, #2
07c18     07 00 00 FF 
07c1c     40 E5 85 F1 | 	sub	objptr, ##3904
07c20     F2 24 02 F1 | 	add	local04, objptr
07c24     08 24 06 F1 | 	add	local04, #8
07c28     12 25 02 FB | 	rdlong	local04, local04
07c2c     0F 25 0A F2 | 	cmp	local04, local01 wz
07c30     71 00 00 FF 
07c34     6C E4 85 F1 | 	sub	objptr, ##57964
07c38     0C 00 90 AD |  if_e	jmp	#LR__0660
07c3c     25 12 06 F6 | 	mov	arg01, #37
07c40     6C DA B0 FD | 	call	#_printerror
07c44     28 02 90 FD | 	jmp	#LR__0664
07c48                 | LR__0660
07c48     78 00 00 FF 
07c4c     AC E5 05 F1 | 	add	objptr, ##61868
07c50     F2 12 02 FB | 	rdlong	arg01, objptr
07c54     09 25 02 F6 | 	mov	local04, arg01
07c58     02 24 66 F0 | 	shl	local04, #2
07c5c     09 25 02 F1 | 	add	local04, arg01
07c60     02 24 66 F0 | 	shl	local04, #2
07c64     07 00 00 FF 
07c68     40 E5 85 F1 | 	sub	objptr, ##3904
07c6c     F2 24 02 F1 | 	add	local04, objptr
07c70     0C 24 06 F1 | 	add	local04, #12
07c74     12 25 02 FB | 	rdlong	local04, local04
07c78     0F 13 02 F6 | 	mov	arg01, local01
07c7c     04 12 66 F0 | 	shl	arg01, #4
07c80     3D 00 00 FF 
07c84     90 E4 85 F1 | 	sub	objptr, ##31376
07c88     F2 12 02 F1 | 	add	arg01, objptr
07c8c     0F FF 01 F6 | 	mov	result3, local01
07c90     04 FE 65 F0 | 	shl	result3, #4
07c94     F2 FE 01 F1 | 	add	result3, objptr
07c98     04 FE 05 F1 | 	add	result3, #4
07c9c     FF FE 01 FB | 	rdlong	result3, result3
07ca0     12 FF 01 F1 | 	add	result3, local04
07ca4     04 12 06 F1 | 	add	arg01, #4
07ca8     09 FF 61 FC | 	wrlong	result3, arg01
07cac                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
07cac                 | ' if fortable(fortop).stepval>=0 then
07cac     44 00 00 FF 
07cb0     D0 E5 05 F1 | 	add	objptr, ##35280
07cb4     F2 12 02 FB | 	rdlong	arg01, objptr
07cb8     09 25 02 F6 | 	mov	local04, arg01
07cbc     02 24 66 F0 | 	shl	local04, #2
07cc0     09 25 02 F1 | 	add	local04, arg01
07cc4     02 24 66 F0 | 	shl	local04, #2
07cc8     07 00 00 FF 
07ccc     40 E5 85 F1 | 	sub	objptr, ##3904
07cd0     F2 24 02 F1 | 	add	local04, objptr
07cd4     0C 24 06 F1 | 	add	local04, #12
07cd8     12 25 02 FB | 	rdlong	local04, local04
07cdc     00 24 56 F2 | 	cmps	local04, #0 wc
07ce0     71 00 00 FF 
07ce4     6C E4 85 F1 | 	sub	objptr, ##57964
07ce8     78 00 90 CD |  if_b	jmp	#LR__0661
07cec                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
07cec     04 1E 66 F0 | 	shl	local01, #4
07cf0     33 00 00 FF 
07cf4     DC E5 05 F1 | 	add	objptr, ##26588
07cf8     F2 1E 02 F1 | 	add	local01, objptr
07cfc     44 00 00 FF 
07d00     D0 E5 05 F1 | 	add	objptr, ##35280
07d04     F2 24 02 FB | 	rdlong	local04, objptr
07d08     12 13 02 F6 | 	mov	arg01, local04
07d0c     02 12 66 F0 | 	shl	arg01, #2
07d10     12 13 02 F1 | 	add	arg01, local04
07d14     02 12 66 F0 | 	shl	arg01, #2
07d18     07 00 00 FF 
07d1c     40 E5 85 F1 | 	sub	objptr, ##3904
07d20     F2 12 02 F1 | 	add	arg01, objptr
07d24     04 1E 06 F1 | 	add	local01, #4
07d28     0F 25 02 FB | 	rdlong	local04, local01
07d2c     10 12 06 F1 | 	add	arg01, #16
07d30     09 13 02 FB | 	rdlong	arg01, arg01
07d34     09 25 5A F2 | 	cmps	local04, arg01 wcz
07d38     71 00 00 FF 
07d3c     6C E4 85 F1 | 	sub	objptr, ##57964
07d40     9C 00 90 ED |  if_be	jmp	#LR__0663
07d44     78 00 00 FF 
07d48     AC E5 05 F1 | 	add	objptr, ##61868
07d4c     F2 24 02 FB | 	rdlong	local04, objptr
07d50     01 24 86 F1 | 	sub	local04, #1
07d54     F2 24 62 FC | 	wrlong	local04, objptr
07d58     78 00 00 FF 
07d5c     AC E5 85 F1 | 	sub	objptr, ##61868
07d60     0C 01 90 FD | 	jmp	#LR__0664
07d64                 | LR__0661
07d64                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07d64     0F 13 02 F6 | 	mov	arg01, local01
07d68     04 12 66 F0 | 	shl	arg01, #4
07d6c     33 00 00 FF 
07d70     DC E5 05 F1 | 	add	objptr, ##26588
07d74     F2 12 02 F1 | 	add	arg01, objptr
07d78     44 00 00 FF 
07d7c     D0 E5 05 F1 | 	add	objptr, ##35280
07d80     F2 24 02 FB | 	rdlong	local04, objptr
07d84     12 1F 02 F6 | 	mov	local01, local04
07d88     02 1E 66 F0 | 	shl	local01, #2
07d8c     12 1F 02 F1 | 	add	local01, local04
07d90     02 1E 66 F0 | 	shl	local01, #2
07d94     07 00 00 FF 
07d98     40 E5 85 F1 | 	sub	objptr, ##3904
07d9c     F2 1E 02 F1 | 	add	local01, objptr
07da0     04 12 06 F1 | 	add	arg01, #4
07da4     09 13 02 FB | 	rdlong	arg01, arg01
07da8     10 1E 06 F1 | 	add	local01, #16
07dac     0F 1F 02 FB | 	rdlong	local01, local01
07db0     0F 13 52 F2 | 	cmps	arg01, local01 wc
07db4     71 00 00 FF 
07db8     6C E4 85 F1 | 	sub	objptr, ##57964
07dbc     20 00 90 3D |  if_ae	jmp	#LR__0662
07dc0     78 00 00 FF 
07dc4     AC E5 05 F1 | 	add	objptr, ##61868
07dc8     F2 24 02 FB | 	rdlong	local04, objptr
07dcc     01 24 86 F1 | 	sub	local04, #1
07dd0     F2 24 62 FC | 	wrlong	local04, objptr
07dd4     78 00 00 FF 
07dd8     AC E5 85 F1 | 	sub	objptr, ##61868
07ddc     90 00 90 FD | 	jmp	#LR__0664
07de0                 | LR__0662
07de0                 | LR__0663
07de0     78 00 00 FF 
07de4     AC E5 05 F1 | 	add	objptr, ##61868
07de8     F2 1E 02 FB | 	rdlong	local01, objptr
07dec     0F 25 02 F6 | 	mov	local04, local01
07df0     02 24 66 F0 | 	shl	local04, #2
07df4     0F 25 02 F1 | 	add	local04, local01
07df8     02 24 66 F0 | 	shl	local04, #2
07dfc     07 00 00 FF 
07e00     40 E5 85 F1 | 	sub	objptr, ##3904
07e04     F2 24 02 F1 | 	add	local04, objptr
07e08     12 25 02 FB | 	rdlong	local04, local04
07e0c     07 00 00 FF 
07e10     18 E5 05 F1 | 	add	objptr, ##3864
07e14     F2 24 62 FC | 	wrlong	local04, objptr
07e18     28 E4 05 F1 | 	add	objptr, #40
07e1c     F2 1E 02 FB | 	rdlong	local01, objptr
07e20     0F 25 02 F6 | 	mov	local04, local01
07e24     02 24 66 F0 | 	shl	local04, #2
07e28     0F 25 02 F1 | 	add	local04, local01
07e2c     02 24 66 F0 | 	shl	local04, #2
07e30     07 00 00 FF 
07e34     40 E5 85 F1 | 	sub	objptr, ##3904
07e38     F2 24 02 F1 | 	add	local04, objptr
07e3c     04 24 06 F1 | 	add	local04, #4
07e40     12 25 02 FB | 	rdlong	local04, local04
07e44     07 00 00 FF 
07e48     1C E5 05 F1 | 	add	objptr, ##3868
07e4c     F2 24 62 FC | 	wrlong	local04, objptr
07e50     0F 00 00 FF 
07e54     38 E5 85 F1 | 	sub	objptr, ##7992
07e58     F2 24 02 FB | 	rdlong	local04, objptr
07e5c     01 24 86 F1 | 	sub	local04, #1
07e60     04 E4 05 F1 | 	add	objptr, #4
07e64     F2 24 62 FC | 	wrlong	local04, objptr
07e68     69 00 00 FF 
07e6c     54 E4 85 F1 | 	sub	objptr, ##53844
07e70                 | LR__0664
07e70     A7 F0 03 F6 | 	mov	ptra, fp
07e74     B2 00 A0 FD | 	call	#popregs_
07e78                 | _do_next_ret
07e78     2D 00 64 FD | 	ret
07e7c                 | 
07e7c                 | ' 
07e7c                 | ' 
07e7c                 | ' function compile_next() as ulong
07e7c                 | _compile_next
07e7c     04 4A 05 F6 | 	mov	COUNT_, #4
07e80     A8 00 A0 FD | 	call	#pushregs_
07e84     56 00 00 FF 
07e88     18 E4 05 F1 | 	add	objptr, ##44056
07e8c     F2 12 02 FB | 	rdlong	arg01, objptr
07e90     03 12 66 F0 | 	shl	arg01, #3
07e94     02 00 00 FF 
07e98     38 E4 85 F1 | 	sub	objptr, ##1080
07e9c     F2 12 02 F1 | 	add	arg01, objptr
07ea0     09 1F 02 FB | 	rdlong	local01, arg01
07ea4                 | ' 
07ea4                 | ' varname$=lparts(ct).part$ 
07ea4                 | ' 'suffix$=right$(varname$,1)
07ea4                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07ea4                 | ' if varnum=0 then compile_error(35)  : return 35
07ea4     04 E4 85 F1 | 	sub	objptr, #4
07ea8     F2 14 0A FB | 	rdlong	arg02, objptr wz
07eac     53 00 00 FF 
07eb0     DC E5 85 F1 | 	sub	objptr, ##42972
07eb4     10 00 90 5D |  if_ne	jmp	#LR__0670
07eb8     23 12 06 F6 | 	mov	arg01, #35
07ebc     10 E0 BF FD | 	call	#_compile_error
07ec0     23 FA 05 F6 | 	mov	result1, #35
07ec4     58 01 90 FD | 	jmp	#LR__0674
07ec8                 | LR__0670
07ec8     01 20 66 F6 | 	neg	local02, #1
07ecc                 | ' j=-1
07ecc                 | ' for i=0 to varnum-1
07ecc     00 22 06 F6 | 	mov	local03, #0
07ed0     53 00 00 FF 
07ed4     DC E5 05 F1 | 	add	objptr, ##42972
07ed8     F2 24 02 FB | 	rdlong	local04, objptr
07edc     53 00 00 FF 
07ee0     DC E5 85 F1 | 	sub	objptr, ##42972
07ee4                 | LR__0671
07ee4     12 23 12 F2 | 	cmp	local03, local04 wc
07ee8     38 00 90 3D |  if_ae	jmp	#LR__0672
07eec                 | '   if variables(i).name=varname$ then j=i : exit
07eec     11 15 02 F6 | 	mov	arg02, local03
07ef0     04 14 66 F0 | 	shl	arg02, #4
07ef4     33 00 00 FF 
07ef8     DC E5 05 F1 | 	add	objptr, ##26588
07efc     F2 14 02 F1 | 	add	arg02, objptr
07f00     0A 13 02 FB | 	rdlong	arg01, arg02
07f04     0F 15 02 F6 | 	mov	arg02, local01
07f08     33 00 00 FF 
07f0c     DC E5 85 F1 | 	sub	objptr, ##26588
07f10     E8 0C B1 FD | 	call	#__system___string_cmp
07f14     00 FA 0D F2 | 	cmp	result1, #0 wz
07f18     11 21 02 A6 |  if_e	mov	local02, local03
07f1c     01 22 06 51 |  if_ne	add	local03, #1
07f20     C0 FF 9F 5D |  if_ne	jmp	#LR__0671
07f24                 | LR__0672
07f24                 | ' if j=-1 then compile_error(35) : return 35
07f24     FF FF 7F FF 
07f28     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07f2c     10 00 90 5D |  if_ne	jmp	#LR__0673
07f30     23 12 06 F6 | 	mov	arg01, #35
07f34     98 DF BF FD | 	call	#_compile_error
07f38     23 FA 05 F6 | 	mov	result1, #35
07f3c     E0 00 90 FD | 	jmp	#LR__0674
07f40                 | LR__0673
07f40     69 00 00 FF 
07f44     50 E4 05 F1 | 	add	objptr, ##53840
07f48     F2 24 02 FB | 	rdlong	local04, objptr
07f4c     12 23 02 F6 | 	mov	local03, local04
07f50     01 22 66 F0 | 	shl	local03, #1
07f54     12 23 02 F1 | 	add	local03, local04
07f58     02 22 66 F0 | 	shl	local03, #2
07f5c     03 00 00 FF 
07f60     00 E4 85 F1 | 	sub	objptr, ##1536
07f64     F2 22 02 F1 | 	add	local03, objptr
07f68     08 22 06 F1 | 	add	local03, #8
07f6c     11 39 68 FC | 	wrlong	#28, local03
07f70     03 00 00 FF 
07f74     00 E4 05 F1 | 	add	objptr, ##1536
07f78     F2 24 02 FB | 	rdlong	local04, objptr
07f7c     12 23 02 F6 | 	mov	local03, local04
07f80     01 22 66 F0 | 	shl	local03, #1
07f84     12 23 02 F1 | 	add	local03, local04
07f88     02 22 66 F0 | 	shl	local03, #2
07f8c     03 00 00 FF 
07f90     00 E4 85 F1 | 	sub	objptr, ##1536
07f94     F2 22 02 F1 | 	add	local03, objptr
07f98     11 21 62 FC | 	wrlong	local02, local03
07f9c     03 00 00 FF 
07fa0     00 E4 05 F1 | 	add	objptr, ##1536
07fa4     F2 24 02 FB | 	rdlong	local04, objptr
07fa8     01 24 06 F1 | 	add	local04, #1
07fac     F2 24 62 FC | 	wrlong	local04, objptr
07fb0     12 23 02 F6 | 	mov	local03, local04
07fb4     01 22 66 F0 | 	shl	local03, #1
07fb8     12 23 02 F1 | 	add	local03, local04
07fbc     02 22 66 F0 | 	shl	local03, #2
07fc0     03 00 00 FF 
07fc4     00 E4 85 F1 | 	sub	objptr, ##1536
07fc8     F2 22 02 F1 | 	add	local03, objptr
07fcc     08 22 06 F1 | 	add	local03, #8
07fd0     11 97 68 FC | 	wrlong	#75, local03
07fd4     03 00 00 FF 
07fd8     00 E4 05 F1 | 	add	objptr, ##1536
07fdc     F2 24 02 FB | 	rdlong	local04, objptr
07fe0     12 23 02 F6 | 	mov	local03, local04
07fe4     01 22 66 F0 | 	shl	local03, #1
07fe8     12 23 02 F1 | 	add	local03, local04
07fec     02 22 66 F0 | 	shl	local03, #2
07ff0     03 00 00 FF 
07ff4     00 E4 85 F1 | 	sub	objptr, ##1536
07ff8     F2 22 02 F1 | 	add	local03, objptr
07ffc     11 01 68 FC | 	wrlong	#0, local03
08000     03 00 00 FF 
08004     00 E4 05 F1 | 	add	objptr, ##1536
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     01 24 06 F1 | 	add	local04, #1
08010     F2 24 62 FC | 	wrlong	local04, objptr
08014     69 00 00 FF 
08018     50 E4 85 F1 | 	sub	objptr, ##53840
0801c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0801c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0801c                 | ' return 0
0801c     00 FA 05 F6 | 	mov	result1, #0
08020                 | LR__0674
08020     A7 F0 03 F6 | 	mov	ptra, fp
08024     B2 00 A0 FD | 	call	#popregs_
08028                 | _compile_next_ret
08028     2D 00 64 FD | 	ret
0802c                 | 
0802c                 | ' 
0802c                 | ' 
0802c                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
0802c                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
0802c                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
0802c                 | ' 
0802c                 | ' 
0802c                 | ' function compile_goto( ) as ulong
0802c                 | _compile_goto
0802c     03 4A 05 F6 | 	mov	COUNT_, #3
08030     A8 00 A0 FD | 	call	#pushregs_
08034     28 F0 07 F1 | 	add	ptra, #40
08038                 | ' 
08038                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08038     56 00 00 FF 
0803c     18 E4 05 F1 | 	add	objptr, ##44056
08040     F2 16 02 FB | 	rdlong	arg03, objptr
08044     03 16 66 F0 | 	shl	arg03, #3
08048     02 00 00 FF 
0804c     38 E4 85 F1 | 	sub	objptr, ##1080
08050     F2 16 02 F1 | 	add	arg03, objptr
08054     04 16 06 F1 | 	add	arg03, #4
08058     0B 17 02 FB | 	rdlong	arg03, arg03
0805c     01 00 00 FF 
08060     00 16 0E F2 | 	cmp	arg03, ##512 wz
08064     53 00 00 FF 
08068     E0 E5 85 F1 | 	sub	objptr, ##42976
0806c     CC 02 90 5D |  if_ne	jmp	#LR__0685
08070     56 00 00 FF 
08074     18 E4 05 F1 | 	add	objptr, ##44056
08078     F2 16 02 FB | 	rdlong	arg03, objptr
0807c     01 16 06 F1 | 	add	arg03, #1
08080     03 16 66 F0 | 	shl	arg03, #3
08084     02 00 00 FF 
08088     38 E4 85 F1 | 	sub	objptr, ##1080
0808c     F2 16 02 F1 | 	add	arg03, objptr
08090     04 16 06 F1 | 	add	arg03, #4
08094     0B 17 02 FB | 	rdlong	arg03, arg03
08098     FE 17 0E F2 | 	cmp	arg03, #510 wz
0809c     53 00 00 FF 
080a0     E0 E5 85 F1 | 	sub	objptr, ##42976
080a4     94 02 90 5D |  if_ne	jmp	#LR__0685
080a8     56 00 00 FF 
080ac     18 E4 05 F1 | 	add	objptr, ##44056
080b0     F2 16 02 FB | 	rdlong	arg03, objptr
080b4     03 16 66 F0 | 	shl	arg03, #3
080b8     02 00 00 FF 
080bc     38 E4 85 F1 | 	sub	objptr, ##1080
080c0     F2 16 02 F1 | 	add	arg03, objptr
080c4     0B 13 02 FB | 	rdlong	arg01, arg03
080c8     00 14 06 F6 | 	mov	arg02, #0
080cc     53 00 00 FF 
080d0     E0 E5 85 F1 | 	sub	objptr, ##42976
080d4     5C 3C B1 FD | 	call	#__system____builtin_atoi
080d8     04 4E 05 F1 | 	add	fp, #4
080dc     A7 FA 61 FC | 	wrlong	result1, fp
080e0     69 00 00 FF 
080e4     50 E4 05 F1 | 	add	objptr, ##53840
080e8     F2 1E 02 FB | 	rdlong	local01, objptr
080ec     0F 21 02 F6 | 	mov	local02, local01
080f0     01 20 66 F0 | 	shl	local02, #1
080f4     0F 21 02 F1 | 	add	local02, local01
080f8     02 20 66 F0 | 	shl	local02, #2
080fc     03 00 00 FF 
08100     00 E4 85 F1 | 	sub	objptr, ##1536
08104     F2 20 02 F1 | 	add	local02, objptr
08108     08 20 06 F1 | 	add	local02, #8
0810c     10 9D 68 FC | 	wrlong	#78, local02
08110     03 00 00 FF 
08114     08 E4 05 F1 | 	add	objptr, ##1544
08118     F2 22 02 FB | 	rdlong	local03, objptr
0811c     69 00 00 FF 
08120     58 E4 85 F1 | 	sub	objptr, ##53848
08124     04 4E 05 F1 | 	add	fp, #4
08128     A7 22 62 FC | 	wrlong	local03, fp
0812c     08 4E 85 F1 | 	sub	fp, #8
08130                 | ' 
08130                 | '   gotoline=val%(lparts(ct).part$) 
08130                 | '   compiledline(lineptr).result_type=token_fast_goto
08130                 | ' ' now find a pointer to goto
08130                 | '   gotoptr=programstart
08130                 | '   do
08130                 | LR__0680
08130     10 4E 05 F1 | 	add	fp, #16
08134     A7 12 02 F6 | 	mov	arg01, fp
08138     08 4E 85 F1 | 	sub	fp, #8
0813c     A7 14 02 FB | 	rdlong	arg02, fp
08140     08 4E 85 F1 | 	sub	fp, #8
08144     18 16 06 F6 | 	mov	arg03, #24
08148     0B 00 00 FF 
0814c     C0 E4 05 F1 | 	add	objptr, ##5824
08150     90 FF B0 FD | 	call	#_psram_spin2_read1
08154     0B 00 00 FF 
08158     C0 E4 85 F1 | 	sub	objptr, ##5824
0815c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0815c                 | '     if gotoheader(0)<>$FFFFFFFF then
0815c     10 4E 05 F1 | 	add	fp, #16
08160     A7 22 02 FB | 	rdlong	local03, fp
08164     10 4E 85 F1 | 	sub	fp, #16
08168     FF FF 7F FF 
0816c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08170     24 00 90 AD |  if_e	jmp	#LR__0681
08174     08 4E 05 F1 | 	add	fp, #8
08178     A7 22 02 FB | 	rdlong	local03, fp
0817c     04 4E 05 F1 | 	add	fp, #4
08180     A7 22 62 FC | 	wrlong	local03, fp
08184     18 4E 05 F1 | 	add	fp, #24
08188     A7 22 02 FB | 	rdlong	local03, fp
0818c     1C 4E 85 F1 | 	sub	fp, #28
08190     A7 22 62 FC | 	wrlong	local03, fp
08194     08 4E 85 F1 | 	sub	fp, #8
08198                 | LR__0681
08198     24 4E 05 F1 | 	add	fp, #36
0819c     A7 22 02 FB | 	rdlong	local03, fp
081a0     24 4E 85 F1 | 	sub	fp, #36
081a4     FF FF 3F FF 
081a8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
081ac     10 4E 05 51 |  if_ne	add	fp, #16
081b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
081b4     10 4E 85 51 |  if_ne	sub	fp, #16
081b8     FF FF 7F 5F 
081bc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
081c0     1C 00 90 AD |  if_e	jmp	#LR__0682
081c4     10 4E 05 F1 | 	add	fp, #16
081c8     A7 22 02 FB | 	rdlong	local03, fp
081cc     0C 4E 85 F1 | 	sub	fp, #12
081d0     A7 20 02 FB | 	rdlong	local02, fp
081d4     04 4E 85 F1 | 	sub	fp, #4
081d8     10 23 0A F2 | 	cmp	local03, local02 wz
081dc     50 FF 9F 5D |  if_ne	jmp	#LR__0680
081e0                 | LR__0682
081e0                 | '   if gotoheader(0)=gotoline then
081e0     10 4E 05 F1 | 	add	fp, #16
081e4     A7 22 02 FB | 	rdlong	local03, fp
081e8     0C 4E 85 F1 | 	sub	fp, #12
081ec     A7 1E 02 FB | 	rdlong	local01, fp
081f0     04 4E 85 F1 | 	sub	fp, #4
081f4     0F 23 0A F2 | 	cmp	local03, local01 wz
081f8     7C 00 90 5D |  if_ne	jmp	#LR__0683
081fc     69 00 00 FF 
08200     50 E4 05 F1 | 	add	objptr, ##53840
08204     F2 1E 02 FB | 	rdlong	local01, objptr
08208     0F 21 02 F6 | 	mov	local02, local01
0820c     01 20 66 F0 | 	shl	local02, #1
08210     0F 21 02 F1 | 	add	local02, local01
08214     02 20 66 F0 | 	shl	local02, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 20 02 F1 | 	add	local02, objptr
08224     0C 4E 05 F1 | 	add	fp, #12
08228     A7 22 02 FB | 	rdlong	local03, fp
0822c     10 23 62 FC | 	wrlong	local03, local02
08230     03 00 00 FF 
08234     00 E4 05 F1 | 	add	objptr, ##1536
08238     F2 1E 02 FB | 	rdlong	local01, objptr
0823c     0F 21 02 F6 | 	mov	local02, local01
08240     01 20 66 F0 | 	shl	local02, #1
08244     0F 21 02 F1 | 	add	local02, local01
08248     02 20 66 F0 | 	shl	local02, #2
0824c     03 00 00 FF 
08250     00 E4 85 F1 | 	sub	objptr, ##1536
08254     F2 20 02 F1 | 	add	local02, objptr
08258     08 4E 85 F1 | 	sub	fp, #8
0825c     A7 22 02 FB | 	rdlong	local03, fp
08260     04 4E 85 F1 | 	sub	fp, #4
08264     04 20 06 F1 | 	add	local02, #4
08268     10 23 62 FC | 	wrlong	local03, local02
0826c     66 00 00 FF 
08270     50 E4 85 F1 | 	sub	objptr, ##52304
08274     A4 00 90 FD | 	jmp	#LR__0684
08278                 | LR__0683
08278     69 00 00 FF 
0827c     50 E4 05 F1 | 	add	objptr, ##53840
08280     F2 1E 02 FB | 	rdlong	local01, objptr
08284     0F 21 02 F6 | 	mov	local02, local01
08288     01 20 66 F0 | 	shl	local02, #1
0828c     0F 21 02 F1 | 	add	local02, local01
08290     02 20 66 F0 | 	shl	local02, #2
08294     03 00 00 FF 
08298     00 E4 85 F1 | 	sub	objptr, ##1536
0829c     F2 20 02 F1 | 	add	local02, objptr
082a0     00 00 C0 FF 
082a4     10 01 68 FC | 	wrlong	##-2147483648, local02
082a8     03 00 00 FF 
082ac     00 E4 05 F1 | 	add	objptr, ##1536
082b0     F2 1E 02 FB | 	rdlong	local01, objptr
082b4     0F 21 02 F6 | 	mov	local02, local01
082b8     01 20 66 F0 | 	shl	local02, #1
082bc     0F 21 02 F1 | 	add	local02, local01
082c0     02 20 66 F0 | 	shl	local02, #2
082c4     03 00 00 FF 
082c8     00 E4 85 F1 | 	sub	objptr, ##1536
082cc     F2 20 02 F1 | 	add	local02, objptr
082d0     04 4E 05 F1 | 	add	fp, #4
082d4     A7 22 02 FB | 	rdlong	local03, fp
082d8     04 4E 85 F1 | 	sub	fp, #4
082dc     04 20 06 F1 | 	add	local02, #4
082e0     10 23 62 FC | 	wrlong	local03, local02
082e4     03 00 00 FF 
082e8     00 E4 05 F1 | 	add	objptr, ##1536
082ec     F2 1E 02 FB | 	rdlong	local01, objptr
082f0     0F 21 02 F6 | 	mov	local02, local01
082f4     01 20 66 F0 | 	shl	local02, #1
082f8     0F 21 02 F1 | 	add	local02, local01
082fc     02 20 66 F0 | 	shl	local02, #2
08300     03 00 00 FF 
08304     00 E4 85 F1 | 	sub	objptr, ##1536
08308     F2 20 02 F1 | 	add	local02, objptr
0830c     08 20 06 F1 | 	add	local02, #8
08310     10 A7 68 FC | 	wrlong	#83, local02
08314     66 00 00 FF 
08318     50 E4 85 F1 | 	sub	objptr, ##52304
0831c                 | LR__0684
0831c     69 00 00 FF 
08320     50 E4 05 F1 | 	add	objptr, ##53840
08324     F2 22 02 FB | 	rdlong	local03, objptr
08328     01 22 06 F1 | 	add	local03, #1
0832c     F2 22 62 FC | 	wrlong	local03, objptr
08330     69 00 00 FF 
08334     50 E4 85 F1 | 	sub	objptr, ##53840
08338     40 00 90 FD | 	jmp	#LR__0686
0833c                 | LR__0685
0833c                 | '    print "We have a slow goto, todo  "
0833c     00 12 06 F6 | 	mov	arg01, #0
08340     90 61 B1 FD | 	call	#__system___getiolock_0417
08344     FD 12 02 F6 | 	mov	arg01, result1
08348     88 08 B1 FD | 	call	#__system___lockmem
0834c     42 01 00 FF 
08350     83 15 06 F6 | 	mov	arg02, ##@LR__4591
08354     00 12 06 F6 | 	mov	arg01, #0
08358     00 16 06 F6 | 	mov	arg03, #0
0835c     64 15 B1 FD | 	call	#__system___basic_print_string
08360     00 12 06 F6 | 	mov	arg01, #0
08364     0A 14 06 F6 | 	mov	arg02, #10
08368     00 16 06 F6 | 	mov	arg03, #0
0836c     FC 14 B1 FD | 	call	#__system___basic_print_char
08370     00 12 06 F6 | 	mov	arg01, #0
08374     5C 61 B1 FD | 	call	#__system___getiolock_0417
08378     FD 00 68 FC | 	wrlong	#0, result1
0837c                 | LR__0686
0837c                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0837c                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0837c                 | ' return 0
0837c     00 FA 05 F6 | 	mov	result1, #0
08380     A7 F0 03 F6 | 	mov	ptra, fp
08384     B2 00 A0 FD | 	call	#popregs_
08388                 | _compile_goto_ret
08388     2D 00 64 FD | 	ret
0838c                 | 
0838c                 | ' 
0838c                 | ' 
0838c                 | ' 
0838c                 | ' 
0838c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0838c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0838c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0838c                 | ' 
0838c                 | ' 
0838c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0838c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0838c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0838c                 | ' 
0838c                 | ' 
0838c                 | ' function expr() as integer 
0838c                 | _expr
0838c     07 4A 05 F6 | 	mov	COUNT_, #7
08390     A8 00 A0 FD | 	call	#pushregs_
08394                 | _expr_enter
08394     56 00 00 FF 
08398     18 E4 05 F1 | 	add	objptr, ##44056
0839c     F2 24 02 FB | 	rdlong	local04, objptr
083a0     03 24 66 F0 | 	shl	local04, #3
083a4     02 00 00 FF 
083a8     38 E4 85 F1 | 	sub	objptr, ##1080
083ac     F2 24 02 F1 | 	add	local04, objptr
083b0     04 24 06 F1 | 	add	local04, #4
083b4     12 27 02 FB | 	rdlong	local05, local04
083b8                 | ' 
083b8                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
083b8     FE 27 0E F2 | 	cmp	local05, #510 wz
083bc     53 00 00 FF 
083c0     E0 E5 85 F1 | 	sub	objptr, ##42976
083c4     C4 00 90 5D |  if_ne	jmp	#LR__0690
083c8     1D 1E 06 F6 | 	mov	local01, #29
083cc     FF 22 06 F6 | 	mov	local03, #255
083d0     0F 29 02 F6 | 	mov	local06, local01
083d4     10 2B 02 F6 | 	mov	local07, local02
083d8     11 1F 02 F6 | 	mov	local01, local03
083dc     69 00 00 FF 
083e0     50 E4 05 F1 | 	add	objptr, ##53840
083e4     F2 26 02 FB | 	rdlong	local05, objptr
083e8     13 25 02 F6 | 	mov	local04, local05
083ec     01 24 66 F0 | 	shl	local04, #1
083f0     13 25 02 F1 | 	add	local04, local05
083f4     02 24 66 F0 | 	shl	local04, #2
083f8     03 00 00 FF 
083fc     00 E4 85 F1 | 	sub	objptr, ##1536
08400     F2 24 02 F1 | 	add	local04, objptr
08404     12 29 62 FC | 	wrlong	local06, local04
08408     03 00 00 FF 
0840c     00 E4 05 F1 | 	add	objptr, ##1536
08410     F2 28 02 FB | 	rdlong	local06, objptr
08414     14 27 02 F6 | 	mov	local05, local06
08418     01 26 66 F0 | 	shl	local05, #1
0841c     14 27 02 F1 | 	add	local05, local06
08420     02 26 66 F0 | 	shl	local05, #2
08424     03 00 00 FF 
08428     00 E4 85 F1 | 	sub	objptr, ##1536
0842c     F2 26 02 F1 | 	add	local05, objptr
08430     04 26 06 F1 | 	add	local05, #4
08434     13 2B 62 FC | 	wrlong	local07, local05
08438     03 00 00 FF 
0843c     00 E4 05 F1 | 	add	objptr, ##1536
08440     F2 2A 02 FB | 	rdlong	local07, objptr
08444     15 29 02 F6 | 	mov	local06, local07
08448     01 28 66 F0 | 	shl	local06, #1
0844c     15 29 02 F1 | 	add	local06, local07
08450     02 28 66 F0 | 	shl	local06, #2
08454     03 00 00 FF 
08458     00 E4 85 F1 | 	sub	objptr, ##1536
0845c     F2 28 02 F1 | 	add	local06, objptr
08460     08 28 06 F1 | 	add	local06, #8
08464     14 1F 62 FC | 	wrlong	local01, local06
08468     03 00 00 FF 
0846c     00 E4 05 F1 | 	add	objptr, ##1536
08470     F2 28 02 FB | 	rdlong	local06, objptr
08474     01 28 06 F1 | 	add	local06, #1
08478     F2 28 62 FC | 	wrlong	local06, objptr
0847c     69 00 00 FF 
08480     50 E4 85 F1 | 	sub	objptr, ##53840
08484     1D FA 05 F6 | 	mov	result1, #29
08488     54 01 90 FD | 	jmp	#LR__0693
0848c                 | LR__0690
0848c     00 1E 06 F6 | 	mov	local01, #0
08490     58 01 B0 FD | 	call	#_addsub
08494     56 00 00 FF 
08498     18 E4 05 F1 | 	add	objptr, ##44056
0849c     F2 24 02 FB | 	rdlong	local04, objptr
084a0     03 24 66 F0 | 	shl	local04, #3
084a4     02 00 00 FF 
084a8     38 E4 85 F1 | 	sub	objptr, ##1080
084ac     F2 24 02 F1 | 	add	local04, objptr
084b0     04 24 06 F1 | 	add	local04, #4
084b4     12 27 02 FB | 	rdlong	local05, local04
084b8                 | ' t3.result.uresult=0
084b8                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
084b8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
084b8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
084b8     53 00 00 FF 
084bc     E0 E5 85 F1 | 	sub	objptr, ##42976
084c0                 | LR__0691
084c0     1B 26 0E F2 | 	cmp	local05, #27 wz
084c4     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
084c8     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
084cc     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
084d0     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
084d4     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
084d8     00 01 90 5D |  if_ne	jmp	#LR__0692
084dc     56 00 00 FF 
084e0     18 E4 05 F1 | 	add	objptr, ##44056
084e4     F2 28 02 FB | 	rdlong	local06, objptr
084e8     01 28 06 F1 | 	add	local06, #1
084ec     F2 28 62 FC | 	wrlong	local06, objptr
084f0     56 00 00 FF 
084f4     18 E4 85 F1 | 	sub	objptr, ##44056
084f8     F0 00 B0 FD | 	call	#_addsub
084fc     13 23 02 F6 | 	mov	local03, local05
08500     0F 29 02 F6 | 	mov	local06, local01
08504     10 2B 02 F6 | 	mov	local07, local02
08508     11 27 02 F6 | 	mov	local05, local03
0850c     69 00 00 FF 
08510     50 E4 05 F1 | 	add	objptr, ##53840
08514     F2 24 02 FB | 	rdlong	local04, objptr
08518     12 FB 01 F6 | 	mov	result1, local04
0851c     01 FA 65 F0 | 	shl	result1, #1
08520     12 FB 01 F1 | 	add	result1, local04
08524     02 FA 65 F0 | 	shl	result1, #2
08528     03 00 00 FF 
0852c     00 E4 85 F1 | 	sub	objptr, ##1536
08530     F2 FA 01 F1 | 	add	result1, objptr
08534     FD 28 62 FC | 	wrlong	local06, result1
08538     03 00 00 FF 
0853c     00 E4 05 F1 | 	add	objptr, ##1536
08540     F2 28 02 FB | 	rdlong	local06, objptr
08544     14 25 02 F6 | 	mov	local04, local06
08548     01 24 66 F0 | 	shl	local04, #1
0854c     14 25 02 F1 | 	add	local04, local06
08550     02 24 66 F0 | 	shl	local04, #2
08554     03 00 00 FF 
08558     00 E4 85 F1 | 	sub	objptr, ##1536
0855c     F2 24 02 F1 | 	add	local04, objptr
08560     04 24 06 F1 | 	add	local04, #4
08564     12 2B 62 FC | 	wrlong	local07, local04
08568     03 00 00 FF 
0856c     00 E4 05 F1 | 	add	objptr, ##1536
08570     F2 2A 02 FB | 	rdlong	local07, objptr
08574     15 29 02 F6 | 	mov	local06, local07
08578     01 28 66 F0 | 	shl	local06, #1
0857c     15 29 02 F1 | 	add	local06, local07
08580     02 28 66 F0 | 	shl	local06, #2
08584     03 00 00 FF 
08588     00 E4 85 F1 | 	sub	objptr, ##1536
0858c     F2 28 02 F1 | 	add	local06, objptr
08590     08 28 06 F1 | 	add	local06, #8
08594     14 27 62 FC | 	wrlong	local05, local06
08598     03 00 00 FF 
0859c     00 E4 05 F1 | 	add	objptr, ##1536
085a0     F2 28 02 FB | 	rdlong	local06, objptr
085a4     01 28 06 F1 | 	add	local06, #1
085a8     F2 28 62 FC | 	wrlong	local06, objptr
085ac     13 00 00 FF 
085b0     38 E4 85 F1 | 	sub	objptr, ##9784
085b4     F2 24 02 FB | 	rdlong	local04, objptr
085b8     03 24 66 F0 | 	shl	local04, #3
085bc     02 00 00 FF 
085c0     38 E4 85 F1 | 	sub	objptr, ##1080
085c4     F2 24 02 F1 | 	add	local04, objptr
085c8     04 24 06 F1 | 	add	local04, #4
085cc     12 27 02 FB | 	rdlong	local05, local04
085d0     53 00 00 FF 
085d4     E0 E5 85 F1 | 	sub	objptr, ##42976
085d8     E4 FE 9F FD | 	jmp	#LR__0691
085dc                 | LR__0692
085dc                 | ' return 0  
085dc     00 FA 05 F6 | 	mov	result1, #0
085e0                 | LR__0693
085e0     A7 F0 03 F6 | 	mov	ptra, fp
085e4     B2 00 A0 FD | 	call	#popregs_
085e8                 | _expr_ret
085e8     2D 00 64 FD | 	ret
085ec                 | 
085ec                 | ' 
085ec                 | ' 
085ec                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
085ec                 | ' 
085ec                 | ' function addsub() as integer 
085ec                 | _addsub
085ec     07 4A 05 F6 | 	mov	COUNT_, #7
085f0     A8 00 A0 FD | 	call	#pushregs_
085f4                 | _addsub_enter
085f4     00 1E 06 F6 | 	mov	local01, #0
085f8     50 01 B0 FD | 	call	#_muldiv
085fc     56 00 00 FF 
08600     18 E4 05 F1 | 	add	objptr, ##44056
08604     F2 24 02 FB | 	rdlong	local04, objptr
08608     03 24 66 F0 | 	shl	local04, #3
0860c     02 00 00 FF 
08610     38 E4 85 F1 | 	sub	objptr, ##1080
08614     F2 24 02 F1 | 	add	local04, objptr
08618     04 24 06 F1 | 	add	local04, #4
0861c     12 27 02 FB | 	rdlong	local05, local04
08620                 | ' t3.result.uresult=0
08620                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08620                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08620                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08620     53 00 00 FF 
08624     E0 E5 85 F1 | 	sub	objptr, ##42976
08628                 | LR__0700
08628     01 26 0E F2 | 	cmp	local05, #1 wz
0862c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08630     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08634     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08638     00 01 90 5D |  if_ne	jmp	#LR__0701
0863c     56 00 00 FF 
08640     18 E4 05 F1 | 	add	objptr, ##44056
08644     F2 24 02 FB | 	rdlong	local04, objptr
08648     01 24 06 F1 | 	add	local04, #1
0864c     F2 24 62 FC | 	wrlong	local04, objptr
08650     56 00 00 FF 
08654     18 E4 85 F1 | 	sub	objptr, ##44056
08658     F0 00 B0 FD | 	call	#_muldiv
0865c     13 23 02 F6 | 	mov	local03, local05
08660     0F 29 02 F6 | 	mov	local06, local01
08664     10 2B 02 F6 | 	mov	local07, local02
08668     11 27 02 F6 | 	mov	local05, local03
0866c     69 00 00 FF 
08670     50 E4 05 F1 | 	add	objptr, ##53840
08674     F2 24 02 FB | 	rdlong	local04, objptr
08678     12 FB 01 F6 | 	mov	result1, local04
0867c     01 FA 65 F0 | 	shl	result1, #1
08680     12 FB 01 F1 | 	add	result1, local04
08684     02 FA 65 F0 | 	shl	result1, #2
08688     03 00 00 FF 
0868c     00 E4 85 F1 | 	sub	objptr, ##1536
08690     F2 FA 01 F1 | 	add	result1, objptr
08694     FD 28 62 FC | 	wrlong	local06, result1
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 28 02 FB | 	rdlong	local06, objptr
086a4     14 25 02 F6 | 	mov	local04, local06
086a8     01 24 66 F0 | 	shl	local04, #1
086ac     14 25 02 F1 | 	add	local04, local06
086b0     02 24 66 F0 | 	shl	local04, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 24 02 F1 | 	add	local04, objptr
086c0     04 24 06 F1 | 	add	local04, #4
086c4     12 2B 62 FC | 	wrlong	local07, local04
086c8     03 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1536
086d0     F2 2A 02 FB | 	rdlong	local07, objptr
086d4     15 29 02 F6 | 	mov	local06, local07
086d8     01 28 66 F0 | 	shl	local06, #1
086dc     15 29 02 F1 | 	add	local06, local07
086e0     02 28 66 F0 | 	shl	local06, #2
086e4     03 00 00 FF 
086e8     00 E4 85 F1 | 	sub	objptr, ##1536
086ec     F2 28 02 F1 | 	add	local06, objptr
086f0     08 28 06 F1 | 	add	local06, #8
086f4     14 27 62 FC | 	wrlong	local05, local06
086f8     03 00 00 FF 
086fc     00 E4 05 F1 | 	add	objptr, ##1536
08700     F2 28 02 FB | 	rdlong	local06, objptr
08704     01 28 06 F1 | 	add	local06, #1
08708     F2 28 62 FC | 	wrlong	local06, objptr
0870c     13 00 00 FF 
08710     38 E4 85 F1 | 	sub	objptr, ##9784
08714     F2 24 02 FB | 	rdlong	local04, objptr
08718     03 24 66 F0 | 	shl	local04, #3
0871c     02 00 00 FF 
08720     38 E4 85 F1 | 	sub	objptr, ##1080
08724     F2 24 02 F1 | 	add	local04, objptr
08728     04 24 06 F1 | 	add	local04, #4
0872c     12 27 02 FB | 	rdlong	local05, local04
08730     53 00 00 FF 
08734     E0 E5 85 F1 | 	sub	objptr, ##42976
08738     EC FE 9F FD | 	jmp	#LR__0700
0873c                 | LR__0701
0873c                 | '   return 0
0873c     00 FA 05 F6 | 	mov	result1, #0
08740     A7 F0 03 F6 | 	mov	ptra, fp
08744     B2 00 A0 FD | 	call	#popregs_
08748                 | _addsub_ret
08748     2D 00 64 FD | 	ret
0874c                 | 
0874c                 | ' 
0874c                 | ' sub muldiv()
0874c                 | _muldiv
0874c     08 4A 05 F6 | 	mov	COUNT_, #8
08750     A8 00 A0 FD | 	call	#pushregs_
08754                 | _muldiv_enter
08754     00 1E 06 F6 | 	mov	local01, #0
08758     58 01 B0 FD | 	call	#_getvalue
0875c     56 00 00 FF 
08760     18 E4 05 F1 | 	add	objptr, ##44056
08764     F2 24 02 FB | 	rdlong	local04, objptr
08768     03 24 66 F0 | 	shl	local04, #3
0876c     02 00 00 FF 
08770     38 E4 85 F1 | 	sub	objptr, ##1080
08774     F2 24 02 F1 | 	add	local04, objptr
08778     04 24 06 F1 | 	add	local04, #4
0877c     12 27 02 FB | 	rdlong	local05, local04
08780                 | ' t3.result.uresult=0
08780                 | ' getvalue()    
08780                 | ' op = lparts(ct).token
08780                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08780     53 00 00 FF 
08784     E0 E5 85 F1 | 	sub	objptr, ##42976
08788                 | LR__0710
08788     05 26 0E F2 | 	cmp	local05, #5 wz
0878c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08790     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08794     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
08798     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0879c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
087a0     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
087a4     00 01 90 5D |  if_ne	jmp	#LR__0711
087a8     56 00 00 FF 
087ac     18 E4 05 F1 | 	add	objptr, ##44056
087b0     F2 24 02 FB | 	rdlong	local04, objptr
087b4     01 24 06 F1 | 	add	local04, #1
087b8     F2 24 62 FC | 	wrlong	local04, objptr
087bc     56 00 00 FF 
087c0     18 E4 85 F1 | 	sub	objptr, ##44056
087c4     EC 00 B0 FD | 	call	#_getvalue
087c8     13 23 02 F6 | 	mov	local03, local05
087cc     0F 29 02 F6 | 	mov	local06, local01
087d0     10 2B 02 F6 | 	mov	local07, local02
087d4     11 27 02 F6 | 	mov	local05, local03
087d8     69 00 00 FF 
087dc     50 E4 05 F1 | 	add	objptr, ##53840
087e0     F2 24 02 FB | 	rdlong	local04, objptr
087e4     12 2D 02 F6 | 	mov	local08, local04
087e8     01 2C 66 F0 | 	shl	local08, #1
087ec     12 2D 02 F1 | 	add	local08, local04
087f0     02 2C 66 F0 | 	shl	local08, #2
087f4     03 00 00 FF 
087f8     00 E4 85 F1 | 	sub	objptr, ##1536
087fc     F2 2C 02 F1 | 	add	local08, objptr
08800     16 29 62 FC | 	wrlong	local06, local08
08804     03 00 00 FF 
08808     00 E4 05 F1 | 	add	objptr, ##1536
0880c     F2 2C 02 FB | 	rdlong	local08, objptr
08810     16 29 02 F6 | 	mov	local06, local08
08814     01 28 66 F0 | 	shl	local06, #1
08818     16 29 02 F1 | 	add	local06, local08
0881c     02 28 66 F0 | 	shl	local06, #2
08820     03 00 00 FF 
08824     00 E4 85 F1 | 	sub	objptr, ##1536
08828     F2 28 02 F1 | 	add	local06, objptr
0882c     04 28 06 F1 | 	add	local06, #4
08830     14 2B 62 FC | 	wrlong	local07, local06
08834     03 00 00 FF 
08838     00 E4 05 F1 | 	add	objptr, ##1536
0883c     F2 2C 02 FB | 	rdlong	local08, objptr
08840     16 2B 02 F6 | 	mov	local07, local08
08844     01 2A 66 F0 | 	shl	local07, #1
08848     16 2B 02 F1 | 	add	local07, local08
0884c     02 2A 66 F0 | 	shl	local07, #2
08850     03 00 00 FF 
08854     00 E4 85 F1 | 	sub	objptr, ##1536
08858     F2 2A 02 F1 | 	add	local07, objptr
0885c     08 2A 06 F1 | 	add	local07, #8
08860     15 27 62 FC | 	wrlong	local05, local07
08864     03 00 00 FF 
08868     00 E4 05 F1 | 	add	objptr, ##1536
0886c     F2 28 02 FB | 	rdlong	local06, objptr
08870     01 28 06 F1 | 	add	local06, #1
08874     F2 28 62 FC | 	wrlong	local06, objptr
08878     13 00 00 FF 
0887c     38 E4 85 F1 | 	sub	objptr, ##9784
08880     F2 24 02 FB | 	rdlong	local04, objptr
08884     03 24 66 F0 | 	shl	local04, #3
08888     02 00 00 FF 
0888c     38 E4 85 F1 | 	sub	objptr, ##1080
08890     F2 24 02 F1 | 	add	local04, objptr
08894     04 24 06 F1 | 	add	local04, #4
08898     12 27 02 FB | 	rdlong	local05, local04
0889c     53 00 00 FF 
088a0     E0 E5 85 F1 | 	sub	objptr, ##42976
088a4     E0 FE 9F FD | 	jmp	#LR__0710
088a8                 | LR__0711
088a8     A7 F0 03 F6 | 	mov	ptra, fp
088ac     B2 00 A0 FD | 	call	#popregs_
088b0                 | _muldiv_ret
088b0     2D 00 64 FD | 	ret
088b4                 | 
088b4                 | ' 
088b4                 | ' sub getvalue() 
088b4                 | _getvalue
088b4     0B 4A 05 F6 | 	mov	COUNT_, #11
088b8     A8 00 A0 FD | 	call	#pushregs_
088bc                 | _getvalue_enter
088bc     01 24 06 F6 | 	mov	local04, #1
088c0     00 1E 06 F6 | 	mov	local01, #0
088c4     1D 22 06 F6 | 	mov	local03, #29
088c8     56 00 00 FF 
088cc     18 E4 05 F1 | 	add	objptr, ##44056
088d0     F2 16 02 FB | 	rdlong	arg03, objptr
088d4     03 16 66 F0 | 	shl	arg03, #3
088d8     02 00 00 FF 
088dc     38 E4 85 F1 | 	sub	objptr, ##1080
088e0     F2 16 02 F1 | 	add	arg03, objptr
088e4     04 16 06 F1 | 	add	arg03, #4
088e8     0B 27 02 FB | 	rdlong	local05, arg03
088ec                 | ' m=1
088ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
088ec                 | ' op=lparts(ct).token
088ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
088ec     02 26 0E F2 | 	cmp	local05, #2 wz
088f0     53 00 00 FF 
088f4     E0 E5 85 F1 | 	sub	objptr, ##42976
088f8     38 00 90 5D |  if_ne	jmp	#LR__0720
088fc     01 24 66 F6 | 	neg	local04, #1
08900     56 00 00 FF 
08904     18 E4 05 F1 | 	add	objptr, ##44056
08908     F2 26 02 FB | 	rdlong	local05, objptr
0890c     01 26 06 F1 | 	add	local05, #1
08910     F2 26 62 FC | 	wrlong	local05, objptr
08914     03 26 66 F0 | 	shl	local05, #3
08918     02 00 00 FF 
0891c     38 E4 85 F1 | 	sub	objptr, ##1080
08920     F2 26 02 F1 | 	add	local05, objptr
08924     04 26 06 F1 | 	add	local05, #4
08928     13 27 02 FB | 	rdlong	local05, local05
0892c     53 00 00 FF 
08930     E0 E5 85 F1 | 	sub	objptr, ##42976
08934                 | LR__0720
08934                 | ' select case op
08934     01 00 00 FF 
08938     00 26 0E F2 | 	cmp	local05, ##512 wz
0893c     3C 00 90 AD |  if_e	jmp	#LR__0721
08940     01 00 00 FF 
08944     01 26 0E F2 | 	cmp	local05, ##513 wz
08948     88 01 90 AD |  if_e	jmp	#LR__0724
0894c     01 00 00 FF 
08950     02 26 0E F2 | 	cmp	local05, ##514 wz
08954     84 02 90 AD |  if_e	jmp	#LR__0725
08958     01 00 00 FF 
0895c     03 26 0E F2 | 	cmp	local05, ##515 wz
08960     E8 03 90 AD |  if_e	jmp	#LR__0728
08964     01 00 00 FF 
08968     04 26 0E F2 | 	cmp	local05, ##516 wz
0896c     E0 05 90 AD |  if_e	jmp	#LR__0733
08970     15 26 0E F2 | 	cmp	local05, #21 wz
08974     00 06 90 AD |  if_e	jmp	#LR__0734
08978     70 06 90 FD | 	jmp	#LR__0735
0897c                 | LR__0721
0897c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
0897c     01 24 0E F2 | 	cmp	local04, #1 wz
08980     3C 00 90 5D |  if_ne	jmp	#LR__0722
08984     56 00 00 FF 
08988     18 E4 05 F1 | 	add	objptr, ##44056
0898c     F2 26 02 FB | 	rdlong	local05, objptr
08990     03 26 66 F0 | 	shl	local05, #3
08994     02 00 00 FF 
08998     38 E4 85 F1 | 	sub	objptr, ##1080
0899c     F2 26 02 F1 | 	add	local05, objptr
089a0     13 13 02 FB | 	rdlong	arg01, local05
089a4     00 14 06 F6 | 	mov	arg02, #0
089a8     53 00 00 FF 
089ac     E0 E5 85 F1 | 	sub	objptr, ##42976
089b0     80 33 B1 FD | 	call	#__system____builtin_atoi
089b4     FD 24 02 FD | 	qmul	local04, result1
089b8     18 1E 62 FD | 	getqx	local01
089bc     1D 22 06 F6 | 	mov	local03, #29
089c0                 | LR__0722
089c0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
089c0     FF FF 7F FF 
089c4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
089c8     3C 00 90 5D |  if_ne	jmp	#LR__0723
089cc     56 00 00 FF 
089d0     18 E4 05 F1 | 	add	objptr, ##44056
089d4     F2 26 02 FB | 	rdlong	local05, objptr
089d8     03 26 66 F0 | 	shl	local05, #3
089dc     02 00 00 FF 
089e0     38 E4 85 F1 | 	sub	objptr, ##1080
089e4     F2 26 02 F1 | 	add	local05, objptr
089e8     13 13 02 FB | 	rdlong	arg01, local05
089ec     00 14 06 F6 | 	mov	arg02, #0
089f0     53 00 00 FF 
089f4     E0 E5 85 F1 | 	sub	objptr, ##42976
089f8     38 33 B1 FD | 	call	#__system____builtin_atoi
089fc     FD 24 02 FD | 	qmul	local04, result1
08a00     18 1E 62 FD | 	getqx	local01
08a04     1C 22 06 F6 | 	mov	local03, #28
08a08                 | LR__0723
08a08     0F 29 02 F6 | 	mov	local06, local01
08a0c     10 2B 02 F6 | 	mov	local07, local02
08a10     11 27 02 F6 | 	mov	local05, local03
08a14     69 00 00 FF 
08a18     50 E4 05 F1 | 	add	objptr, ##53840
08a1c     F2 1E 02 FB | 	rdlong	local01, objptr
08a20     0F 25 02 F6 | 	mov	local04, local01
08a24     01 24 66 F0 | 	shl	local04, #1
08a28     0F 25 02 F1 | 	add	local04, local01
08a2c     02 24 66 F0 | 	shl	local04, #2
08a30     03 00 00 FF 
08a34     00 E4 85 F1 | 	sub	objptr, ##1536
08a38     F2 24 02 F1 | 	add	local04, objptr
08a3c     12 29 62 FC | 	wrlong	local06, local04
08a40     03 00 00 FF 
08a44     00 E4 05 F1 | 	add	objptr, ##1536
08a48     F2 28 02 FB | 	rdlong	local06, objptr
08a4c     14 1F 02 F6 | 	mov	local01, local06
08a50     01 1E 66 F0 | 	shl	local01, #1
08a54     14 1F 02 F1 | 	add	local01, local06
08a58     02 1E 66 F0 | 	shl	local01, #2
08a5c     03 00 00 FF 
08a60     00 E4 85 F1 | 	sub	objptr, ##1536
08a64     F2 1E 02 F1 | 	add	local01, objptr
08a68     04 1E 06 F1 | 	add	local01, #4
08a6c     0F 2B 62 FC | 	wrlong	local07, local01
08a70     03 00 00 FF 
08a74     00 E4 05 F1 | 	add	objptr, ##1536
08a78     F2 2A 02 FB | 	rdlong	local07, objptr
08a7c     15 29 02 F6 | 	mov	local06, local07
08a80     01 28 66 F0 | 	shl	local06, #1
08a84     15 29 02 F1 | 	add	local06, local07
08a88     02 28 66 F0 | 	shl	local06, #2
08a8c     03 00 00 FF 
08a90     00 E4 85 F1 | 	sub	objptr, ##1536
08a94     F2 28 02 F1 | 	add	local06, objptr
08a98     08 28 06 F1 | 	add	local06, #8
08a9c     14 27 62 FC | 	wrlong	local05, local06
08aa0     03 00 00 FF 
08aa4     00 E4 05 F1 | 	add	objptr, ##1536
08aa8     F2 28 02 FB | 	rdlong	local06, objptr
08aac     01 28 06 F1 | 	add	local06, #1
08ab0     F2 28 62 FC | 	wrlong	local06, objptr
08ab4     13 00 00 FF 
08ab8     38 E4 85 F1 | 	sub	objptr, ##9784
08abc     F2 28 02 FB | 	rdlong	local06, objptr
08ac0     01 28 06 F1 | 	add	local06, #1
08ac4     F2 28 62 FC | 	wrlong	local06, objptr
08ac8     56 00 00 FF 
08acc     18 E4 85 F1 | 	sub	objptr, ##44056
08ad0     3C 05 90 FD | 	jmp	#LR__0736
08ad4                 | LR__0724
08ad4     56 00 00 FF 
08ad8     18 E4 05 F1 | 	add	objptr, ##44056
08adc     F2 28 02 FB | 	rdlong	local06, objptr
08ae0     03 28 66 F0 | 	shl	local06, #3
08ae4     02 00 00 FF 
08ae8     38 E4 85 F1 | 	sub	objptr, ##1080
08aec     F2 28 02 F1 | 	add	local06, objptr
08af0     14 13 02 FB | 	rdlong	arg01, local06
08af4     00 14 06 F6 | 	mov	arg02, #0
08af8     53 00 00 FF 
08afc     E0 E5 85 F1 | 	sub	objptr, ##42976
08b00     30 32 B1 FD | 	call	#__system____builtin_atoi
08b04     FD 24 02 FD | 	qmul	local04, result1
08b08     69 00 00 FF 
08b0c     50 E4 05 F1 | 	add	objptr, ##53840
08b10     F2 28 02 FB | 	rdlong	local06, objptr
08b14     14 2D 02 F6 | 	mov	local08, local06
08b18     01 2C 66 F0 | 	shl	local08, #1
08b1c     14 2D 02 F1 | 	add	local08, local06
08b20     02 2C 66 F0 | 	shl	local08, #2
08b24     03 00 00 FF 
08b28     00 E4 85 F1 | 	sub	objptr, ##1536
08b2c     F2 2C 02 F1 | 	add	local08, objptr
08b30     03 00 00 FF 
08b34     00 E4 05 F1 | 	add	objptr, ##1536
08b38     18 1E 62 FD | 	getqx	local01
08b3c     1C 22 06 F6 | 	mov	local03, #28
08b40     0F 29 02 F6 | 	mov	local06, local01
08b44     10 2B 02 F6 | 	mov	local07, local02
08b48     16 29 62 FC | 	wrlong	local06, local08
08b4c     11 2D 02 F6 | 	mov	local08, local03
08b50     F2 28 02 FB | 	rdlong	local06, objptr
08b54     14 27 02 F6 | 	mov	local05, local06
08b58     01 26 66 F0 | 	shl	local05, #1
08b5c     14 27 02 F1 | 	add	local05, local06
08b60     02 26 66 F0 | 	shl	local05, #2
08b64     03 00 00 FF 
08b68     00 E4 85 F1 | 	sub	objptr, ##1536
08b6c     F2 26 02 F1 | 	add	local05, objptr
08b70     04 26 06 F1 | 	add	local05, #4
08b74     13 2B 62 FC | 	wrlong	local07, local05
08b78     03 00 00 FF 
08b7c     00 E4 05 F1 | 	add	objptr, ##1536
08b80     F2 2A 02 FB | 	rdlong	local07, objptr
08b84     15 29 02 F6 | 	mov	local06, local07
08b88     01 28 66 F0 | 	shl	local06, #1
08b8c     15 29 02 F1 | 	add	local06, local07
08b90     02 28 66 F0 | 	shl	local06, #2
08b94     03 00 00 FF 
08b98     00 E4 85 F1 | 	sub	objptr, ##1536
08b9c     F2 28 02 F1 | 	add	local06, objptr
08ba0     08 28 06 F1 | 	add	local06, #8
08ba4     14 2D 62 FC | 	wrlong	local08, local06
08ba8     03 00 00 FF 
08bac     00 E4 05 F1 | 	add	objptr, ##1536
08bb0     F2 28 02 FB | 	rdlong	local06, objptr
08bb4     01 28 06 F1 | 	add	local06, #1
08bb8     F2 28 62 FC | 	wrlong	local06, objptr
08bbc     13 00 00 FF 
08bc0     38 E4 85 F1 | 	sub	objptr, ##9784
08bc4     F2 28 02 FB | 	rdlong	local06, objptr
08bc8     01 28 06 F1 | 	add	local06, #1
08bcc     F2 28 62 FC | 	wrlong	local06, objptr
08bd0     56 00 00 FF 
08bd4     18 E4 85 F1 | 	sub	objptr, ##44056
08bd8     34 04 90 FD | 	jmp	#LR__0736
08bdc                 | LR__0725
08bdc                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
08bdc     01 24 0E F2 | 	cmp	local04, #1 wz
08be0     48 00 90 5D |  if_ne	jmp	#LR__0726
08be4     00 C0 1F FF 
08be8     00 28 06 F6 | 	mov	local06, ##1065353216
08bec     56 00 00 FF 
08bf0     18 E4 05 F1 | 	add	objptr, ##44056
08bf4     F2 2C 02 FB | 	rdlong	local08, objptr
08bf8     03 2C 66 F0 | 	shl	local08, #3
08bfc     02 00 00 FF 
08c00     38 E4 85 F1 | 	sub	objptr, ##1080
08c04     F2 2C 02 F1 | 	add	local08, objptr
08c08     16 13 02 FB | 	rdlong	arg01, local08
08c0c     53 00 00 FF 
08c10     E0 E5 85 F1 | 	sub	objptr, ##42976
08c14     8C 32 B1 FD | 	call	#__system____builtin_atof
08c18     FD 14 02 F6 | 	mov	arg02, result1
08c1c     14 13 02 F6 | 	mov	arg01, local06
08c20     98 2A B1 FD | 	call	#__system___float_mul
08c24     FD 1E 02 F6 | 	mov	local01, result1
08c28     1E 22 06 F6 | 	mov	local03, #30
08c2c                 | LR__0726
08c2c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08c2c     FF FF 7F FF 
08c30     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08c34     48 00 90 5D |  if_ne	jmp	#LR__0727
08c38     00 C0 5F FF 
08c3c     00 28 06 F6 | 	mov	local06, ##-1082130432
08c40     56 00 00 FF 
08c44     18 E4 05 F1 | 	add	objptr, ##44056
08c48     F2 2C 02 FB | 	rdlong	local08, objptr
08c4c     03 2C 66 F0 | 	shl	local08, #3
08c50     02 00 00 FF 
08c54     38 E4 85 F1 | 	sub	objptr, ##1080
08c58     F2 2C 02 F1 | 	add	local08, objptr
08c5c     16 13 02 FB | 	rdlong	arg01, local08
08c60     53 00 00 FF 
08c64     E0 E5 85 F1 | 	sub	objptr, ##42976
08c68     38 32 B1 FD | 	call	#__system____builtin_atof
08c6c     FD 14 02 F6 | 	mov	arg02, result1
08c70     14 13 02 F6 | 	mov	arg01, local06
08c74     44 2A B1 FD | 	call	#__system___float_mul
08c78     FD 1E 02 F6 | 	mov	local01, result1
08c7c     1E 22 06 F6 | 	mov	local03, #30
08c80                 | LR__0727
08c80     0F 29 02 F6 | 	mov	local06, local01
08c84     10 2B 02 F6 | 	mov	local07, local02
08c88     11 27 02 F6 | 	mov	local05, local03
08c8c     69 00 00 FF 
08c90     50 E4 05 F1 | 	add	objptr, ##53840
08c94     F2 1E 02 FB | 	rdlong	local01, objptr
08c98     0F 2D 02 F6 | 	mov	local08, local01
08c9c     01 2C 66 F0 | 	shl	local08, #1
08ca0     0F 2D 02 F1 | 	add	local08, local01
08ca4     02 2C 66 F0 | 	shl	local08, #2
08ca8     03 00 00 FF 
08cac     00 E4 85 F1 | 	sub	objptr, ##1536
08cb0     F2 2C 02 F1 | 	add	local08, objptr
08cb4     16 29 62 FC | 	wrlong	local06, local08
08cb8     03 00 00 FF 
08cbc     00 E4 05 F1 | 	add	objptr, ##1536
08cc0     F2 2C 02 FB | 	rdlong	local08, objptr
08cc4     16 29 02 F6 | 	mov	local06, local08
08cc8     01 28 66 F0 | 	shl	local06, #1
08ccc     16 29 02 F1 | 	add	local06, local08
08cd0     02 28 66 F0 | 	shl	local06, #2
08cd4     03 00 00 FF 
08cd8     00 E4 85 F1 | 	sub	objptr, ##1536
08cdc     F2 28 02 F1 | 	add	local06, objptr
08ce0     04 28 06 F1 | 	add	local06, #4
08ce4     14 2B 62 FC | 	wrlong	local07, local06
08ce8     03 00 00 FF 
08cec     00 E4 05 F1 | 	add	objptr, ##1536
08cf0     F2 2C 02 FB | 	rdlong	local08, objptr
08cf4     16 2B 02 F6 | 	mov	local07, local08
08cf8     01 2A 66 F0 | 	shl	local07, #1
08cfc     16 2B 02 F1 | 	add	local07, local08
08d00     02 2A 66 F0 | 	shl	local07, #2
08d04     03 00 00 FF 
08d08     00 E4 85 F1 | 	sub	objptr, ##1536
08d0c     F2 2A 02 F1 | 	add	local07, objptr
08d10     08 2A 06 F1 | 	add	local07, #8
08d14     15 27 62 FC | 	wrlong	local05, local07
08d18     03 00 00 FF 
08d1c     00 E4 05 F1 | 	add	objptr, ##1536
08d20     F2 28 02 FB | 	rdlong	local06, objptr
08d24     01 28 06 F1 | 	add	local06, #1
08d28     F2 28 62 FC | 	wrlong	local06, objptr
08d2c     13 00 00 FF 
08d30     38 E4 85 F1 | 	sub	objptr, ##9784
08d34     F2 28 02 FB | 	rdlong	local06, objptr
08d38     01 28 06 F1 | 	add	local06, #1
08d3c     F2 28 62 FC | 	wrlong	local06, objptr
08d40     56 00 00 FF 
08d44     18 E4 85 F1 | 	sub	objptr, ##44056
08d48     C4 02 90 FD | 	jmp	#LR__0736
08d4c                 | LR__0728
08d4c     1F 22 06 F6 | 	mov	local03, #31
08d50     56 00 00 FF 
08d54     18 E4 05 F1 | 	add	objptr, ##44056
08d58     F2 16 02 FB | 	rdlong	arg03, objptr
08d5c     03 16 66 F0 | 	shl	arg03, #3
08d60     02 00 00 FF 
08d64     38 E4 85 F1 | 	sub	objptr, ##1080
08d68     F2 16 02 F1 | 	add	arg03, objptr
08d6c     0B 13 02 FB | 	rdlong	arg01, arg03
08d70     53 00 00 FF 
08d74     E0 E5 85 F1 | 	sub	objptr, ##42976
08d78     09 2F 02 F6 | 	mov	local09, arg01
08d7c     97 06 48 FB | 	callpa	#(@LR__0730-@LR__0729)>>2,fcache_load_ptr_
08d80                 | LR__0729
08d80     17 FB C9 FA | 	rdbyte	result1, local09 wz
08d84     01 2E 06 51 |  if_ne	add	local09, #1
08d88     F4 FF 9F 5D |  if_ne	jmp	#LR__0729
08d8c                 | LR__0730
08d8c     09 2F 82 F1 | 	sub	local09, arg01
08d90     17 FB 01 F6 | 	mov	result1, local09
08d94     7A 00 00 FF 
08d98     7C E4 05 F1 | 	add	objptr, ##62588
08d9c     F2 FA 61 FC | 	wrlong	result1, objptr
08da0     30 E4 85 F1 | 	sub	objptr, #48
08da4     F2 12 02 FB | 	rdlong	arg01, objptr
08da8     FD 12 82 F1 | 	sub	arg01, result1
08dac     04 12 86 F1 | 	sub	arg01, #4
08db0     03 12 26 F5 | 	andn	arg01, #3
08db4     F2 12 62 FC | 	wrlong	arg01, objptr
08db8     30 E4 05 F1 | 	add	objptr, #48
08dbc     F2 14 02 FB | 	rdlong	arg02, objptr
08dc0     01 16 06 F6 | 	mov	arg03, #1
08dc4     00 18 06 F6 | 	mov	arg04, #0
08dc8     6E 00 00 FF 
08dcc     BC E5 85 F1 | 	sub	objptr, ##56764
08dd0                 | '     return fill(addr, pattern, count, listPtr, 4)
08dd0     04 1A 06 F6 | 	mov	arg05, #4
08dd4     44 F4 B0 FD | 	call	#_psram_spin2_fill
08dd8                 | '     pslpoke memtop,l
08dd8                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08dd8     01 30 06 F6 | 	mov	local10, #1
08ddc     6E 00 00 FF 
08de0     BC E5 05 F1 | 	add	objptr, ##56764
08de4     F2 32 02 FB | 	rdlong	local11, objptr
08de8     7A 00 00 FF 
08dec     7C E4 85 F1 | 	sub	objptr, ##62588
08df0     01 32 06 F1 | 	add	local11, #1
08df4                 | LR__0731
08df4     19 31 52 F2 | 	cmps	local10, local11 wc
08df8     78 00 90 3D |  if_ae	jmp	#LR__0732
08dfc     7A 00 00 FF 
08e00     4C E4 05 F1 | 	add	objptr, ##62540
08e04     F2 2A 02 FB | 	rdlong	local07, objptr
08e08     03 2A 06 F1 | 	add	local07, #3
08e0c     18 2B 02 F1 | 	add	local07, local10
08e10     24 00 00 FF 
08e14     34 E4 85 F1 | 	sub	objptr, ##18484
08e18     F2 2C 02 FB | 	rdlong	local08, objptr
08e1c     03 2C 66 F0 | 	shl	local08, #3
08e20     02 00 00 FF 
08e24     38 E4 85 F1 | 	sub	objptr, ##1080
08e28     F2 2C 02 F1 | 	add	local08, objptr
08e2c     16 13 02 FB | 	rdlong	arg01, local08
08e30     18 15 02 F6 | 	mov	arg02, local10
08e34     01 16 06 F6 | 	mov	arg03, #1
08e38     53 00 00 FF 
08e3c     E0 E5 85 F1 | 	sub	objptr, ##42976
08e40     B4 1E B1 FD | 	call	#__system__Mid_S
08e44     FD 14 C2 FA | 	rdbyte	arg02, result1
08e48     15 13 02 F6 | 	mov	arg01, local07
08e4c     01 16 06 F6 | 	mov	arg03, #1
08e50     00 18 06 F6 | 	mov	arg04, #0
08e54     0B 00 00 FF 
08e58     C0 E4 05 F1 | 	add	objptr, ##5824
08e5c                 | '     return fill(addr, pattern, count, listPtr, 1)
08e5c     01 1A 06 F6 | 	mov	arg05, #1
08e60     B8 F3 B0 FD | 	call	#_psram_spin2_fill
08e64     0B 00 00 FF 
08e68     C0 E4 85 F1 | 	sub	objptr, ##5824
08e6c     01 30 06 F1 | 	add	local10, #1
08e70     80 FF 9F FD | 	jmp	#LR__0731
08e74                 | LR__0732
08e74     7A 00 00 FF 
08e78     4C E4 05 F1 | 	add	objptr, ##62540
08e7c     F2 1E 02 FB | 	rdlong	local01, objptr
08e80     2B 22 06 F6 | 	mov	local03, #43
08e84     0F 29 02 F6 | 	mov	local06, local01
08e88     10 2B 02 F6 | 	mov	local07, local02
08e8c     11 33 02 F6 | 	mov	local11, local03
08e90     10 00 00 FF 
08e94     FC E5 85 F1 | 	sub	objptr, ##8700
08e98     F2 30 02 FB | 	rdlong	local10, objptr
08e9c     18 2D 02 F6 | 	mov	local08, local10
08ea0     01 2C 66 F0 | 	shl	local08, #1
08ea4     18 2D 02 F1 | 	add	local08, local10
08ea8     02 2C 66 F0 | 	shl	local08, #2
08eac     03 00 00 FF 
08eb0     00 E4 85 F1 | 	sub	objptr, ##1536
08eb4     F2 2C 02 F1 | 	add	local08, objptr
08eb8     16 29 62 FC | 	wrlong	local06, local08
08ebc     03 00 00 FF 
08ec0     00 E4 05 F1 | 	add	objptr, ##1536
08ec4     F2 30 02 FB | 	rdlong	local10, objptr
08ec8     18 2D 02 F6 | 	mov	local08, local10
08ecc     01 2C 66 F0 | 	shl	local08, #1
08ed0     18 2D 02 F1 | 	add	local08, local10
08ed4     02 2C 66 F0 | 	shl	local08, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 2C 02 F1 | 	add	local08, objptr
08ee4     04 2C 06 F1 | 	add	local08, #4
08ee8     16 2B 62 FC | 	wrlong	local07, local08
08eec     03 00 00 FF 
08ef0     00 E4 05 F1 | 	add	objptr, ##1536
08ef4     F2 30 02 FB | 	rdlong	local10, objptr
08ef8     18 2D 02 F6 | 	mov	local08, local10
08efc     01 2C 66 F0 | 	shl	local08, #1
08f00     18 2D 02 F1 | 	add	local08, local10
08f04     02 2C 66 F0 | 	shl	local08, #2
08f08     03 00 00 FF 
08f0c     00 E4 85 F1 | 	sub	objptr, ##1536
08f10     F2 2C 02 F1 | 	add	local08, objptr
08f14     08 2C 06 F1 | 	add	local08, #8
08f18     16 33 62 FC | 	wrlong	local11, local08
08f1c     03 00 00 FF 
08f20     00 E4 05 F1 | 	add	objptr, ##1536
08f24     F2 28 02 FB | 	rdlong	local06, objptr
08f28     01 28 06 F1 | 	add	local06, #1
08f2c     F2 28 62 FC | 	wrlong	local06, objptr
08f30     13 00 00 FF 
08f34     38 E4 85 F1 | 	sub	objptr, ##9784
08f38     F2 28 02 FB | 	rdlong	local06, objptr
08f3c     01 28 06 F1 | 	add	local06, #1
08f40     F2 28 62 FC | 	wrlong	local06, objptr
08f44     56 00 00 FF 
08f48     18 E4 85 F1 | 	sub	objptr, ##44056
08f4c     C0 00 90 FD | 	jmp	#LR__0736
08f50                 | LR__0733
08f50     12 13 02 F6 | 	mov	arg01, local04
08f54     B8 03 B0 FD | 	call	#_getvar
08f58     56 00 00 FF 
08f5c     18 E4 05 F1 | 	add	objptr, ##44056
08f60     F2 28 02 FB | 	rdlong	local06, objptr
08f64     01 28 06 F1 | 	add	local06, #1
08f68     F2 28 62 FC | 	wrlong	local06, objptr
08f6c     56 00 00 FF 
08f70     18 E4 85 F1 | 	sub	objptr, ##44056
08f74     98 00 90 FD | 	jmp	#LR__0736
08f78                 | LR__0734
08f78     56 00 00 FF 
08f7c     18 E4 05 F1 | 	add	objptr, ##44056
08f80     F2 28 02 FB | 	rdlong	local06, objptr
08f84     01 28 06 F1 | 	add	local06, #1
08f88     F2 28 62 FC | 	wrlong	local06, objptr
08f8c     56 00 00 FF 
08f90     18 E4 85 F1 | 	sub	objptr, ##44056
08f94     F4 F3 BF FD | 	call	#_expr
08f98                 | '     ct+=1
08f98                 | '     expr() 
08f98                 | '     if lparts(ct).token=token_rpar then ct+=1
08f98     56 00 00 FF 
08f9c     18 E4 05 F1 | 	add	objptr, ##44056
08fa0     F2 32 02 FB | 	rdlong	local11, objptr
08fa4     03 32 66 F0 | 	shl	local11, #3
08fa8     02 00 00 FF 
08fac     38 E4 85 F1 | 	sub	objptr, ##1080
08fb0     F2 32 02 F1 | 	add	local11, objptr
08fb4     04 32 06 F1 | 	add	local11, #4
08fb8     19 33 02 FB | 	rdlong	local11, local11
08fbc     14 32 0E F2 | 	cmp	local11, #20 wz
08fc0     53 00 00 FF 
08fc4     E0 E5 85 F1 | 	sub	objptr, ##42976
08fc8     44 00 90 5D |  if_ne	jmp	#LR__0736
08fcc     56 00 00 FF 
08fd0     18 E4 05 F1 | 	add	objptr, ##44056
08fd4     F2 28 02 FB | 	rdlong	local06, objptr
08fd8     01 28 06 F1 | 	add	local06, #1
08fdc     F2 28 62 FC | 	wrlong	local06, objptr
08fe0     56 00 00 FF 
08fe4     18 E4 85 F1 | 	sub	objptr, ##44056
08fe8     24 00 90 FD | 	jmp	#LR__0736
08fec                 | LR__0735
08fec     12 13 02 F6 | 	mov	arg01, local04
08ff0     28 00 B0 FD | 	call	#_getfun
08ff4     56 00 00 FF 
08ff8     18 E4 05 F1 | 	add	objptr, ##44056
08ffc     F2 28 02 FB | 	rdlong	local06, objptr
09000     01 28 06 F1 | 	add	local06, #1
09004     F2 28 62 FC | 	wrlong	local06, objptr
09008     56 00 00 FF 
0900c     18 E4 85 F1 | 	sub	objptr, ##44056
09010                 | LR__0736
09010     A7 F0 03 F6 | 	mov	ptra, fp
09014     B2 00 A0 FD | 	call	#popregs_
09018                 | _getvalue_ret
09018     2D 00 64 FD | 	ret
0901c                 | 
0901c                 | ' 
0901c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0901c                 | _getfun
0901c     0A 4A 05 F6 | 	mov	COUNT_, #10
09020     A8 00 A0 FD | 	call	#pushregs_
09024                 | _getfun_enter
09024     09 25 02 F6 | 	mov	local04, arg01
09028     56 00 00 FF 
0902c     18 E4 05 F1 | 	add	objptr, ##44056
09030     F2 26 02 FB | 	rdlong	local05, objptr
09034     13 29 02 F6 | 	mov	local06, local05
09038     00 2A 06 F6 | 	mov	local07, #0
0903c                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0903c                 | ' oldct=ct
0903c                 | ' numpar=0
0903c                 | '   
0903c                 | ' if lparts(ct+1).token=token_lpar then
0903c     01 26 06 F1 | 	add	local05, #1
09040     03 26 66 F0 | 	shl	local05, #3
09044     02 00 00 FF 
09048     38 E4 85 F1 | 	sub	objptr, ##1080
0904c     F2 26 02 F1 | 	add	local05, objptr
09050     04 26 06 F1 | 	add	local05, #4
09054     13 27 02 FB | 	rdlong	local05, local05
09058     15 26 0E F2 | 	cmp	local05, #21 wz
0905c     53 00 00 FF 
09060     E0 E5 85 F1 | 	sub	objptr, ##42976
09064     08 01 90 5D |  if_ne	jmp	#LR__0744
09068     56 00 00 FF 
0906c     18 E4 05 F1 | 	add	objptr, ##44056
09070     F2 2C 02 FB | 	rdlong	local08, objptr
09074     01 2C 06 F1 | 	add	local08, #1
09078     F2 2C 62 FC | 	wrlong	local08, objptr
0907c     56 00 00 FF 
09080     18 E4 85 F1 | 	sub	objptr, ##44056
09084                 | '   ct+=1 											' omit this lpar, this is for expr list
09084                 | '   do
09084                 | LR__0740
09084     56 00 00 FF 
09088     18 E4 05 F1 | 	add	objptr, ##44056
0908c     F2 26 02 FB | 	rdlong	local05, objptr
09090     01 26 06 F1 | 	add	local05, #1
09094     F2 26 62 FC | 	wrlong	local05, objptr
09098                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09098                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09098     03 26 66 F0 | 	shl	local05, #3
0909c     02 00 00 FF 
090a0     38 E4 85 F1 | 	sub	objptr, ##1080
090a4     F2 26 02 F1 | 	add	local05, objptr
090a8     04 26 06 F1 | 	add	local05, #4
090ac     13 2D 02 FB | 	rdlong	local08, local05
090b0     15 2C 0E F2 | 	cmp	local08, #21 wz
090b4     53 00 00 FF 
090b8     E0 E5 85 F1 | 	sub	objptr, ##42976
090bc     40 00 90 5D |  if_ne	jmp	#LR__0741
090c0     56 00 00 FF 
090c4     18 E4 05 F1 | 	add	objptr, ##44056
090c8     F2 2C 02 FB | 	rdlong	local08, objptr
090cc     01 2C 06 F1 | 	add	local08, #1
090d0     F2 2C 62 FC | 	wrlong	local08, objptr
090d4     56 00 00 FF 
090d8     18 E4 85 F1 | 	sub	objptr, ##44056
090dc     AC F2 BF FD | 	call	#_expr
090e0     56 00 00 FF 
090e4     18 E4 05 F1 | 	add	objptr, ##44056
090e8     F2 2C 02 FB | 	rdlong	local08, objptr
090ec     01 2C 06 F1 | 	add	local08, #1
090f0     F2 2C 62 FC | 	wrlong	local08, objptr
090f4     56 00 00 FF 
090f8     18 E4 85 F1 | 	sub	objptr, ##44056
090fc     04 00 90 FD | 	jmp	#LR__0742
09100                 | LR__0741
09100     88 F2 BF FD | 	call	#_expr
09104                 | LR__0742
09104     01 2A 06 F1 | 	add	local07, #1
09108     56 00 00 FF 
0910c     18 E4 05 F1 | 	add	objptr, ##44056
09110     F2 26 02 FB | 	rdlong	local05, objptr
09114     03 26 66 F0 | 	shl	local05, #3
09118     02 00 00 FF 
0911c     38 E4 85 F1 | 	sub	objptr, ##1080
09120     F2 26 02 F1 | 	add	local05, objptr
09124     04 26 06 F1 | 	add	local05, #4
09128     13 2D 02 FB | 	rdlong	local08, local05
0912c     14 2C 0E F2 | 	cmp	local08, #20 wz
09130     53 00 00 FF 
09134     E0 E5 85 F1 | 	sub	objptr, ##42976
09138     34 00 90 AD |  if_e	jmp	#LR__0743
0913c     56 00 00 FF 
09140     18 E4 05 F1 | 	add	objptr, ##44056
09144     F2 2C 02 FB | 	rdlong	local08, objptr
09148     03 2C 66 F0 | 	shl	local08, #3
0914c     02 00 00 FF 
09150     38 E4 85 F1 | 	sub	objptr, ##1080
09154     F2 2C 02 F1 | 	add	local08, objptr
09158     04 2C 06 F1 | 	add	local08, #4
0915c     16 2D 02 FB | 	rdlong	local08, local08
09160     FE 2D 0E F2 | 	cmp	local08, #510 wz
09164     53 00 00 FF 
09168     E0 E5 85 F1 | 	sub	objptr, ##42976
0916c     14 FF 9F 5D |  if_ne	jmp	#LR__0740
09170                 | LR__0743
09170                 | LR__0744
09170     15 1F 02 F6 | 	mov	local01, local07
09174     03 28 66 F0 | 	shl	local06, #3
09178     53 00 00 FF 
0917c     E0 E5 05 F1 | 	add	objptr, ##42976
09180     F2 28 02 F1 | 	add	local06, objptr
09184     04 28 06 F1 | 	add	local06, #4
09188     14 23 02 FB | 	rdlong	local03, local06
0918c     0F 2D 02 F6 | 	mov	local08, local01
09190     10 2B 02 F6 | 	mov	local07, local02
09194     11 29 02 F6 | 	mov	local06, local03
09198     15 00 00 FF 
0919c     70 E4 05 F1 | 	add	objptr, ##10864
091a0     F2 26 02 FB | 	rdlong	local05, objptr
091a4     13 13 02 F6 | 	mov	arg01, local05
091a8     01 12 66 F0 | 	shl	arg01, #1
091ac     13 13 02 F1 | 	add	arg01, local05
091b0     02 12 66 F0 | 	shl	arg01, #2
091b4     03 00 00 FF 
091b8     00 E4 85 F1 | 	sub	objptr, ##1536
091bc     F2 12 02 F1 | 	add	arg01, objptr
091c0     09 2D 62 FC | 	wrlong	local08, arg01
091c4     03 00 00 FF 
091c8     00 E4 05 F1 | 	add	objptr, ##1536
091cc     F2 2C 02 FB | 	rdlong	local08, objptr
091d0     16 2F 02 F6 | 	mov	local09, local08
091d4     01 2E 66 F0 | 	shl	local09, #1
091d8     16 2F 02 F1 | 	add	local09, local08
091dc     02 2E 66 F0 | 	shl	local09, #2
091e0     03 00 00 FF 
091e4     00 E4 85 F1 | 	sub	objptr, ##1536
091e8     F2 2E 02 F1 | 	add	local09, objptr
091ec     04 2E 06 F1 | 	add	local09, #4
091f0     17 2B 62 FC | 	wrlong	local07, local09
091f4     03 00 00 FF 
091f8     00 E4 05 F1 | 	add	objptr, ##1536
091fc     F2 2C 02 FB | 	rdlong	local08, objptr
09200     16 31 02 F6 | 	mov	local10, local08
09204     01 30 66 F0 | 	shl	local10, #1
09208     16 31 02 F1 | 	add	local10, local08
0920c     02 30 66 F0 | 	shl	local10, #2
09210     03 00 00 FF 
09214     00 E4 85 F1 | 	sub	objptr, ##1536
09218     F2 30 02 F1 | 	add	local10, objptr
0921c     08 30 06 F1 | 	add	local10, #8
09220     18 29 62 FC | 	wrlong	local06, local10
09224     03 00 00 FF 
09228     00 E4 05 F1 | 	add	objptr, ##1536
0922c     F2 2C 02 FB | 	rdlong	local08, objptr
09230     01 2C 06 F1 | 	add	local08, #1
09234     F2 2C 62 FC | 	wrlong	local08, objptr
09238     69 00 00 FF 
0923c     50 E4 85 F1 | 	sub	objptr, ##53840
09240                 | ' 
09240                 | ' t2.result.uresult=numpar
09240                 | ' 
09240                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09240                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09240                 | ' 
09240                 | '   
09240                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09240     FF FF 7F FF 
09244     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09248     B8 00 90 5D |  if_ne	jmp	#LR__0745
0924c     15 22 06 F6 | 	mov	local03, #21
09250     0F 2D 02 F6 | 	mov	local08, local01
09254     10 2B 02 F6 | 	mov	local07, local02
09258     11 29 02 F6 | 	mov	local06, local03
0925c     69 00 00 FF 
09260     50 E4 05 F1 | 	add	objptr, ##53840
09264     F2 26 02 FB | 	rdlong	local05, objptr
09268     13 13 02 F6 | 	mov	arg01, local05
0926c     01 12 66 F0 | 	shl	arg01, #1
09270     13 13 02 F1 | 	add	arg01, local05
09274     02 12 66 F0 | 	shl	arg01, #2
09278     03 00 00 FF 
0927c     00 E4 85 F1 | 	sub	objptr, ##1536
09280     F2 12 02 F1 | 	add	arg01, objptr
09284     09 2D 62 FC | 	wrlong	local08, arg01
09288     03 00 00 FF 
0928c     00 E4 05 F1 | 	add	objptr, ##1536
09290     F2 30 02 FB | 	rdlong	local10, objptr
09294     18 2F 02 F6 | 	mov	local09, local10
09298     01 2E 66 F0 | 	shl	local09, #1
0929c     18 2F 02 F1 | 	add	local09, local10
092a0     02 2E 66 F0 | 	shl	local09, #2
092a4     03 00 00 FF 
092a8     00 E4 85 F1 | 	sub	objptr, ##1536
092ac     F2 2E 02 F1 | 	add	local09, objptr
092b0     04 2E 06 F1 | 	add	local09, #4
092b4     17 2B 62 FC | 	wrlong	local07, local09
092b8     03 00 00 FF 
092bc     00 E4 05 F1 | 	add	objptr, ##1536
092c0     F2 2E 02 FB | 	rdlong	local09, objptr
092c4     17 31 02 F6 | 	mov	local10, local09
092c8     01 30 66 F0 | 	shl	local10, #1
092cc     17 31 02 F1 | 	add	local10, local09
092d0     02 30 66 F0 | 	shl	local10, #2
092d4     03 00 00 FF 
092d8     00 E4 85 F1 | 	sub	objptr, ##1536
092dc     F2 30 02 F1 | 	add	local10, objptr
092e0     08 30 06 F1 | 	add	local10, #8
092e4     18 29 62 FC | 	wrlong	local06, local10
092e8     03 00 00 FF 
092ec     00 E4 05 F1 | 	add	objptr, ##1536
092f0     F2 2C 02 FB | 	rdlong	local08, objptr
092f4     01 2C 06 F1 | 	add	local08, #1
092f8     F2 2C 62 FC | 	wrlong	local08, objptr
092fc     69 00 00 FF 
09300     50 E4 85 F1 | 	sub	objptr, ##53840
09304                 | LR__0745
09304     A7 F0 03 F6 | 	mov	ptra, fp
09308     B2 00 A0 FD | 	call	#popregs_
0930c                 | _getfun_ret
0930c     2D 00 64 FD | 	ret
09310                 | 
09310                 | '   
09310                 | '   
09310                 | ' sub getvar(m as integer) 
09310                 | _getvar
09310     0A 4A 05 F6 | 	mov	COUNT_, #10
09314     A8 00 A0 FD | 	call	#pushregs_
09318                 | _getvar_enter
09318     09 25 02 F6 | 	mov	local04, arg01
0931c     56 00 00 FF 
09320     18 E4 05 F1 | 	add	objptr, ##44056
09324     F2 14 02 FB | 	rdlong	arg02, objptr
09328     03 14 66 F0 | 	shl	arg02, #3
0932c     02 00 00 FF 
09330     38 E4 85 F1 | 	sub	objptr, ##1080
09334     F2 14 02 F1 | 	add	arg02, objptr
09338     0A 27 02 FB | 	rdlong	local05, arg02
0933c     13 13 02 F6 | 	mov	arg01, local05
09340     01 14 06 F6 | 	mov	arg02, #1
09344     53 00 00 FF 
09348     E0 E5 85 F1 | 	sub	objptr, ##42976
0934c     18 19 B1 FD | 	call	#__system__Right_S
09350     FD 28 02 F6 | 	mov	local06, result1
09354     01 2A 66 F6 | 	neg	local07, #1
09358                 | ' 
09358                 | ' varname$=lparts(ct).part$
09358                 | ' suffix$=right$(varname$,1)
09358                 | ' j=-1
09358                 | ' 
09358                 | ' for i=0 to varnum-1
09358     00 2C 06 F6 | 	mov	local08, #0
0935c     53 00 00 FF 
09360     DC E5 05 F1 | 	add	objptr, ##42972
09364     F2 2E 02 FB | 	rdlong	local09, objptr
09368     53 00 00 FF 
0936c     DC E5 85 F1 | 	sub	objptr, ##42972
09370                 | LR__0750
09370     17 2D 52 F2 | 	cmps	local08, local09 wc
09374     38 00 90 3D |  if_ae	jmp	#LR__0751
09378                 | '   if variables(i).name=varname$ then j=i : exit
09378     16 15 02 F6 | 	mov	arg02, local08
0937c     04 14 66 F0 | 	shl	arg02, #4
09380     33 00 00 FF 
09384     DC E5 05 F1 | 	add	objptr, ##26588
09388     F2 14 02 F1 | 	add	arg02, objptr
0938c     0A 13 02 FB | 	rdlong	arg01, arg02
09390     13 15 02 F6 | 	mov	arg02, local05
09394     33 00 00 FF 
09398     DC E5 85 F1 | 	sub	objptr, ##26588
0939c     5C F8 B0 FD | 	call	#__system___string_cmp
093a0     00 FA 0D F2 | 	cmp	result1, #0 wz
093a4     16 2B 02 A6 |  if_e	mov	local07, local08
093a8     01 2C 06 51 |  if_ne	add	local08, #1
093ac     C0 FF 9F 5D |  if_ne	jmp	#LR__0750
093b0                 | LR__0751
093b0                 | ' if  j=-1 andalso varnum<maxvars then   
093b0     FF FF 7F FF 
093b4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
093b8     A8 00 90 5D |  if_ne	jmp	#LR__0752
093bc     53 00 00 FF 
093c0     DC E5 05 F1 | 	add	objptr, ##42972
093c4     F2 2E 02 FB | 	rdlong	local09, objptr
093c8     53 00 00 FF 
093cc     DC E5 85 F1 | 	sub	objptr, ##42972
093d0     01 00 00 FF 
093d4     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
093d8     88 00 90 3D |  if_ae	jmp	#LR__0752
093dc     53 00 00 FF 
093e0     DC E5 05 F1 | 	add	objptr, ##42972
093e4     F2 2E 02 FB | 	rdlong	local09, objptr
093e8     04 2E 66 F0 | 	shl	local09, #4
093ec     20 00 00 FF 
093f0     00 E4 85 F1 | 	sub	objptr, ##16384
093f4     F2 2E 02 F1 | 	add	local09, objptr
093f8     17 27 62 FC | 	wrlong	local05, local09
093fc     20 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##16384
09404     F2 2E 02 FB | 	rdlong	local09, objptr
09408     04 2E 66 F0 | 	shl	local09, #4
0940c     20 00 00 FF 
09410     00 E4 85 F1 | 	sub	objptr, ##16384
09414     F2 2E 02 F1 | 	add	local09, objptr
09418     04 2E 06 F1 | 	add	local09, #4
0941c     17 01 68 FC | 	wrlong	#0, local09
09420     20 00 00 FF 
09424     00 E4 05 F1 | 	add	objptr, ##16384
09428     F2 2E 02 FB | 	rdlong	local09, objptr
0942c     04 2E 66 F0 | 	shl	local09, #4
09430     20 00 00 FF 
09434     00 E4 85 F1 | 	sub	objptr, ##16384
09438     F2 2E 02 F1 | 	add	local09, objptr
0943c     0C 2E 06 F1 | 	add	local09, #12
09440     17 39 68 FC | 	wrlong	#28, local09
09444     20 00 00 FF 
09448     00 E4 05 F1 | 	add	objptr, ##16384
0944c     F2 2E 02 FB | 	rdlong	local09, objptr
09450     17 2B 02 F6 | 	mov	local07, local09
09454     01 2E 06 F1 | 	add	local09, #1
09458     F2 2E 62 FC | 	wrlong	local09, objptr
0945c     53 00 00 FF 
09460     DC E5 85 F1 | 	sub	objptr, ##42972
09464                 | LR__0752
09464     00 2E 06 F6 | 	mov	local09, #0
09468                 | ' numpar=0
09468                 | ' ' check if it is an array
09468                 | ' 
09468                 | ' if lparts(ct+1).token=token_lpar then
09468     56 00 00 FF 
0946c     18 E4 05 F1 | 	add	objptr, ##44056
09470     F2 2C 02 FB | 	rdlong	local08, objptr
09474     01 2C 06 F1 | 	add	local08, #1
09478     03 2C 66 F0 | 	shl	local08, #3
0947c     02 00 00 FF 
09480     38 E4 85 F1 | 	sub	objptr, ##1080
09484     F2 2C 02 F1 | 	add	local08, objptr
09488     04 2C 06 F1 | 	add	local08, #4
0948c     16 2D 02 FB | 	rdlong	local08, local08
09490     15 2C 0E F2 | 	cmp	local08, #21 wz
09494     53 00 00 FF 
09498     E0 E5 85 F1 | 	sub	objptr, ##42976
0949c     08 01 90 5D |  if_ne	jmp	#LR__0757
094a0     56 00 00 FF 
094a4     18 E4 05 F1 | 	add	objptr, ##44056
094a8     F2 30 02 FB | 	rdlong	local10, objptr
094ac     01 30 06 F1 | 	add	local10, #1
094b0     F2 30 62 FC | 	wrlong	local10, objptr
094b4     56 00 00 FF 
094b8     18 E4 85 F1 | 	sub	objptr, ##44056
094bc                 | '   ct+=1 											' omit this lpar, this is for expr list
094bc                 | '   do
094bc                 | LR__0753
094bc     56 00 00 FF 
094c0     18 E4 05 F1 | 	add	objptr, ##44056
094c4     F2 2C 02 FB | 	rdlong	local08, objptr
094c8     01 2C 06 F1 | 	add	local08, #1
094cc     F2 2C 62 FC | 	wrlong	local08, objptr
094d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
094d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
094d0     03 2C 66 F0 | 	shl	local08, #3
094d4     02 00 00 FF 
094d8     38 E4 85 F1 | 	sub	objptr, ##1080
094dc     F2 2C 02 F1 | 	add	local08, objptr
094e0     04 2C 06 F1 | 	add	local08, #4
094e4     16 31 02 FB | 	rdlong	local10, local08
094e8     15 30 0E F2 | 	cmp	local10, #21 wz
094ec     53 00 00 FF 
094f0     E0 E5 85 F1 | 	sub	objptr, ##42976
094f4     40 00 90 5D |  if_ne	jmp	#LR__0754
094f8     56 00 00 FF 
094fc     18 E4 05 F1 | 	add	objptr, ##44056
09500     F2 30 02 FB | 	rdlong	local10, objptr
09504     01 30 06 F1 | 	add	local10, #1
09508     F2 30 62 FC | 	wrlong	local10, objptr
0950c     56 00 00 FF 
09510     18 E4 85 F1 | 	sub	objptr, ##44056
09514     74 EE BF FD | 	call	#_expr
09518     56 00 00 FF 
0951c     18 E4 05 F1 | 	add	objptr, ##44056
09520     F2 30 02 FB | 	rdlong	local10, objptr
09524     01 30 06 F1 | 	add	local10, #1
09528     F2 30 62 FC | 	wrlong	local10, objptr
0952c     56 00 00 FF 
09530     18 E4 85 F1 | 	sub	objptr, ##44056
09534     04 00 90 FD | 	jmp	#LR__0755
09538                 | LR__0754
09538     50 EE BF FD | 	call	#_expr
0953c                 | LR__0755
0953c     01 2E 06 F1 | 	add	local09, #1
09540     56 00 00 FF 
09544     18 E4 05 F1 | 	add	objptr, ##44056
09548     F2 2C 02 FB | 	rdlong	local08, objptr
0954c     03 2C 66 F0 | 	shl	local08, #3
09550     02 00 00 FF 
09554     38 E4 85 F1 | 	sub	objptr, ##1080
09558     F2 2C 02 F1 | 	add	local08, objptr
0955c     04 2C 06 F1 | 	add	local08, #4
09560     16 31 02 FB | 	rdlong	local10, local08
09564     14 30 0E F2 | 	cmp	local10, #20 wz
09568     53 00 00 FF 
0956c     E0 E5 85 F1 | 	sub	objptr, ##42976
09570     34 00 90 AD |  if_e	jmp	#LR__0756
09574     56 00 00 FF 
09578     18 E4 05 F1 | 	add	objptr, ##44056
0957c     F2 30 02 FB | 	rdlong	local10, objptr
09580     03 30 66 F0 | 	shl	local10, #3
09584     02 00 00 FF 
09588     38 E4 85 F1 | 	sub	objptr, ##1080
0958c     F2 30 02 F1 | 	add	local10, objptr
09590     04 30 06 F1 | 	add	local10, #4
09594     18 31 02 FB | 	rdlong	local10, local10
09598     FE 31 0E F2 | 	cmp	local10, #510 wz
0959c     53 00 00 FF 
095a0     E0 E5 85 F1 | 	sub	objptr, ##42976
095a4     14 FF 9F 5D |  if_ne	jmp	#LR__0753
095a8                 | LR__0756
095a8                 | LR__0757
095a8     17 21 02 F6 | 	mov	local02, local09
095ac     11 22 06 F6 | 	mov	local03, #17
095b0     15 1F 02 F6 | 	mov	local01, local07
095b4     0F 31 02 F6 | 	mov	local10, local01
095b8     10 2F 02 F6 | 	mov	local09, local02
095bc     11 2D 02 F6 | 	mov	local08, local03
095c0     69 00 00 FF 
095c4     50 E4 05 F1 | 	add	objptr, ##53840
095c8     F2 2A 02 FB | 	rdlong	local07, objptr
095cc     15 29 02 F6 | 	mov	local06, local07
095d0     01 28 66 F0 | 	shl	local06, #1
095d4     15 29 02 F1 | 	add	local06, local07
095d8     02 28 66 F0 | 	shl	local06, #2
095dc     03 00 00 FF 
095e0     00 E4 85 F1 | 	sub	objptr, ##1536
095e4     F2 28 02 F1 | 	add	local06, objptr
095e8     14 31 62 FC | 	wrlong	local10, local06
095ec     03 00 00 FF 
095f0     00 E4 05 F1 | 	add	objptr, ##1536
095f4     F2 30 02 FB | 	rdlong	local10, objptr
095f8     18 27 02 F6 | 	mov	local05, local10
095fc     01 26 66 F0 | 	shl	local05, #1
09600     18 27 02 F1 | 	add	local05, local10
09604     02 26 66 F0 | 	shl	local05, #2
09608     03 00 00 FF 
0960c     00 E4 85 F1 | 	sub	objptr, ##1536
09610     F2 26 02 F1 | 	add	local05, objptr
09614     04 26 06 F1 | 	add	local05, #4
09618     13 2F 62 FC | 	wrlong	local09, local05
0961c     03 00 00 FF 
09620     00 E4 05 F1 | 	add	objptr, ##1536
09624     F2 30 02 FB | 	rdlong	local10, objptr
09628     18 FB 01 F6 | 	mov	result1, local10
0962c     01 FA 65 F0 | 	shl	result1, #1
09630     18 FB 01 F1 | 	add	result1, local10
09634     02 FA 65 F0 | 	shl	result1, #2
09638     03 00 00 FF 
0963c     00 E4 85 F1 | 	sub	objptr, ##1536
09640     F2 FA 01 F1 | 	add	result1, objptr
09644     08 FA 05 F1 | 	add	result1, #8
09648     FD 2C 62 FC | 	wrlong	local08, result1
0964c     03 00 00 FF 
09650     00 E4 05 F1 | 	add	objptr, ##1536
09654     F2 30 02 FB | 	rdlong	local10, objptr
09658     01 30 06 F1 | 	add	local10, #1
0965c     F2 30 62 FC | 	wrlong	local10, objptr
09660     69 00 00 FF 
09664     50 E4 85 F1 | 	sub	objptr, ##53840
09668                 | ' 
09668                 | ' t2.result.twowords(1)=numpar
09668                 | ' 
09668                 | ' 
09668                 | ' 
09668                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09668                 | ' 
09668                 | ' 
09668                 | '  
09668                 | ' 
09668                 | ' 701 
09668                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09668                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09668     FF FF 7F FF 
0966c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09670     B8 00 90 5D |  if_ne	jmp	#LR__0758
09674     15 22 06 F6 | 	mov	local03, #21
09678     0F 31 02 F6 | 	mov	local10, local01
0967c     10 2F 02 F6 | 	mov	local09, local02
09680     11 2D 02 F6 | 	mov	local08, local03
09684     69 00 00 FF 
09688     50 E4 05 F1 | 	add	objptr, ##53840
0968c     F2 2A 02 FB | 	rdlong	local07, objptr
09690     15 29 02 F6 | 	mov	local06, local07
09694     01 28 66 F0 | 	shl	local06, #1
09698     15 29 02 F1 | 	add	local06, local07
0969c     02 28 66 F0 | 	shl	local06, #2
096a0     03 00 00 FF 
096a4     00 E4 85 F1 | 	sub	objptr, ##1536
096a8     F2 28 02 F1 | 	add	local06, objptr
096ac     14 31 62 FC | 	wrlong	local10, local06
096b0     03 00 00 FF 
096b4     00 E4 05 F1 | 	add	objptr, ##1536
096b8     F2 1E 02 FB | 	rdlong	local01, objptr
096bc     0F 27 02 F6 | 	mov	local05, local01
096c0     01 26 66 F0 | 	shl	local05, #1
096c4     0F 27 02 F1 | 	add	local05, local01
096c8     02 26 66 F0 | 	shl	local05, #2
096cc     03 00 00 FF 
096d0     00 E4 85 F1 | 	sub	objptr, ##1536
096d4     F2 26 02 F1 | 	add	local05, objptr
096d8     04 26 06 F1 | 	add	local05, #4
096dc     13 2F 62 FC | 	wrlong	local09, local05
096e0     03 00 00 FF 
096e4     00 E4 05 F1 | 	add	objptr, ##1536
096e8     F2 1E 02 FB | 	rdlong	local01, objptr
096ec     0F FB 01 F6 | 	mov	result1, local01
096f0     01 FA 65 F0 | 	shl	result1, #1
096f4     0F FB 01 F1 | 	add	result1, local01
096f8     02 FA 65 F0 | 	shl	result1, #2
096fc     03 00 00 FF 
09700     00 E4 85 F1 | 	sub	objptr, ##1536
09704     F2 FA 01 F1 | 	add	result1, objptr
09708     08 FA 05 F1 | 	add	result1, #8
0970c     FD 2C 62 FC | 	wrlong	local08, result1
09710     03 00 00 FF 
09714     00 E4 05 F1 | 	add	objptr, ##1536
09718     F2 30 02 FB | 	rdlong	local10, objptr
0971c     01 30 06 F1 | 	add	local10, #1
09720     F2 30 62 FC | 	wrlong	local10, objptr
09724     69 00 00 FF 
09728     50 E4 85 F1 | 	sub	objptr, ##53840
0972c                 | LR__0758
0972c     A7 F0 03 F6 | 	mov	ptra, fp
09730     B2 00 A0 FD | 	call	#popregs_
09734                 | _getvar_ret
09734     2D 00 64 FD | 	ret
09738                 | 
09738                 | ' 
09738                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09738                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09738                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09738                 | ' 
09738                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09738                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09738                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09738                 | ' 
09738                 | ' function execute_line (astart=0 as integer) as integer
09738                 | _execute_line
09738     04 4A 05 F6 | 	mov	COUNT_, #4
0973c     A8 00 A0 FD | 	call	#pushregs_
09740     78 00 00 FF 
09744     88 E5 05 F1 | 	add	objptr, ##61832
09748     F2 00 68 FC | 	wrlong	#0, objptr
0974c                 | ' runptr2=0
0974c                 | ' for lineptr_e=astart to lineptr-1
0974c     0F 00 00 FF 
09750     34 E5 85 F1 | 	sub	objptr, ##7988
09754     F2 12 62 FC | 	wrlong	arg01, objptr
09758     04 E4 85 F1 | 	sub	objptr, #4
0975c     F2 1E 02 FB | 	rdlong	local01, objptr
09760     69 00 00 FF 
09764     50 E4 85 F1 | 	sub	objptr, ##53840
09768                 | LR__0760
09768     69 00 00 FF 
0976c     54 E4 05 F1 | 	add	objptr, ##53844
09770     F2 FA 01 FB | 	rdlong	result1, objptr
09774     69 00 00 FF 
09778     54 E4 85 F1 | 	sub	objptr, ##53844
0977c     0F FB 51 F2 | 	cmps	result1, local01 wc
09780     98 00 90 3D |  if_ae	jmp	#LR__0761
09784     69 00 00 FF 
09788     54 E4 05 F1 | 	add	objptr, ##53844
0978c     F2 FA 01 FB | 	rdlong	result1, objptr
09790     FD 20 02 F6 | 	mov	local02, result1
09794     01 20 66 F0 | 	shl	local02, #1
09798     FD 20 02 F1 | 	add	local02, result1
0979c     02 20 66 F0 | 	shl	local02, #2
097a0     03 00 00 FF 
097a4     04 E4 85 F1 | 	sub	objptr, ##1540
097a8     F2 20 02 F1 | 	add	local02, objptr
097ac     08 20 06 F1 | 	add	local02, #8
097b0     10 21 02 FB | 	rdlong	local02, local02
097b4     10 21 E2 F8 | 	getbyte	local02, local02, #0
097b8     02 20 66 F0 | 	shl	local02, #2
097bc     04 00 00 FF 
097c0     1C E4 85 F1 | 	sub	objptr, ##2076
097c4     F2 20 02 F1 | 	add	local02, objptr
097c8     10 21 02 FB | 	rdlong	local02, local02
097cc     10 23 02 F6 | 	mov	local03, local02
097d0     13 20 46 F7 | 	zerox	local02, #19
097d4     14 22 46 F0 | 	shr	local03, #20
097d8     02 22 66 F0 | 	shl	local03, #2
097dc     ED 22 02 F1 | 	add	local03, __methods__
097e0     11 23 02 FB | 	rdlong	local03, local03
097e4     62 00 00 FF 
097e8     34 E4 85 F1 | 	sub	objptr, ##50228
097ec     F2 24 02 F6 | 	mov	local04, objptr
097f0     10 E5 01 F6 | 	mov	objptr, local02
097f4     2D 22 62 FD | 	call	local03
097f8     12 E5 01 F6 | 	mov	objptr, local04
097fc     69 00 00 FF 
09800     54 E4 05 F1 | 	add	objptr, ##53844
09804     F2 24 02 FB | 	rdlong	local04, objptr
09808     01 24 06 F1 | 	add	local04, #1
0980c     F2 24 62 FC | 	wrlong	local04, objptr
09810     69 00 00 FF 
09814     54 E4 85 F1 | 	sub	objptr, ##53844
09818     4C FF 9F FD | 	jmp	#LR__0760
0981c                 | LR__0761
0981c                 | ' return runptr2
0981c     78 00 00 FF 
09820     88 E5 05 F1 | 	add	objptr, ##61832
09824     F2 FA 01 FB | 	rdlong	result1, objptr
09828     78 00 00 FF 
0982c     88 E5 85 F1 | 	sub	objptr, ##61832
09830     A7 F0 03 F6 | 	mov	ptra, fp
09834     B2 00 A0 FD | 	call	#popregs_
09838                 | _execute_line_ret
09838     2D 00 64 FD | 	ret
0983c                 | 
0983c                 | ' 
0983c                 | ' 
0983c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0983c                 | ' 
0983c                 | ' function pop() as expr_result
0983c                 | _pop
0983c                 | ' 
0983c                 | ' if stackpointer=0 then
0983c     62 00 00 FF 
09840     2C E4 05 F1 | 	add	objptr, ##50220
09844     F2 FA 09 FB | 	rdlong	result1, objptr wz
09848     62 00 00 FF 
0984c     2C E4 85 F1 | 	sub	objptr, ##50220
09850     FF 04 06 A6 |  if_e	mov	_var03, #255
09854     18 00 06 A6 |  if_e	mov	_var01, #24
09858     68 00 90 AD |  if_e	jmp	#LR__0770
0985c     62 00 00 FF 
09860     2C E4 05 F1 | 	add	objptr, ##50220
09864     F2 FA 01 FB | 	rdlong	result1, objptr
09868     01 FA 85 F1 | 	sub	result1, #1
0986c     F2 FA 61 FC | 	wrlong	result1, objptr
09870     FD FE 01 F6 | 	mov	result3, result1
09874     01 FE 65 F0 | 	shl	result3, #1
09878     FD FE 01 F1 | 	add	result3, result1
0987c     02 FE 65 F0 | 	shl	result3, #2
09880     0C 00 00 FF 
09884     0C E4 85 F1 | 	sub	objptr, ##6156
09888     F2 FE 01 F1 | 	add	result3, objptr
0988c     FF 00 02 FB | 	rdlong	_var01, result3
09890     04 FE 05 F1 | 	add	result3, #4
09894     FF FE 01 FB | 	rdlong	result3, result3
09898     FD FC 01 F6 | 	mov	result2, result1
0989c     01 FC 65 F0 | 	shl	result2, #1
098a0     FD FC 01 F1 | 	add	result2, result1
098a4     02 FC 65 F0 | 	shl	result2, #2
098a8     F2 FC 01 F1 | 	add	result2, objptr
098ac     08 FC 05 F1 | 	add	result2, #8
098b0     FE FA 01 FB | 	rdlong	result1, result2
098b4     FF 02 02 F6 | 	mov	_var02, result3
098b8     FD 04 02 F6 | 	mov	_var03, result1
098bc     56 00 00 FF 
098c0     20 E4 85 F1 | 	sub	objptr, ##44064
098c4                 | LR__0770
098c4                 | ' return t1
098c4     01 FD 01 F6 | 	mov	result2, _var02
098c8     02 FF 01 F6 | 	mov	result3, _var03
098cc     00 FB 01 F6 | 	mov	result1, _var01
098d0                 | _pop_ret
098d0     2D 00 64 FD | 	ret
098d4                 | 
098d4                 | ' 
098d4                 | ' sub push(t1 as expr_result )
098d4                 | _push
098d4                 | ' 
098d4                 | ' 'print "In push: "; t1.result_type
098d4                 | ' 'print "In push: "; t1.result.uresult
098d4                 | ' 
098d4                 | ' if stackpointer<maxstack then 
098d4     62 00 00 FF 
098d8     2C E4 05 F1 | 	add	objptr, ##50220
098dc     F2 00 02 FB | 	rdlong	_var01, objptr
098e0     62 00 00 FF 
098e4     2C E4 85 F1 | 	sub	objptr, ##50220
098e8     01 00 00 FF 
098ec     00 00 56 F2 | 	cmps	_var01, ##512 wc
098f0     BC 00 90 3D |  if_ae	jmp	#LR__0780
098f4     09 01 02 FB | 	rdlong	_var01, arg01
098f8     04 12 06 F1 | 	add	arg01, #4
098fc     09 03 02 FB | 	rdlong	_var02, arg01
09900     04 12 06 F1 | 	add	arg01, #4
09904     09 13 02 FB | 	rdlong	arg01, arg01
09908     62 00 00 FF 
0990c     2C E4 05 F1 | 	add	objptr, ##50220
09910     F2 04 02 FB | 	rdlong	_var03, objptr
09914     02 07 02 F6 | 	mov	_var04, _var03
09918     01 06 66 F0 | 	shl	_var04, #1
0991c     02 07 02 F1 | 	add	_var04, _var03
09920     02 06 66 F0 | 	shl	_var04, #2
09924     0C 00 00 FF 
09928     0C E4 85 F1 | 	sub	objptr, ##6156
0992c     F2 06 02 F1 | 	add	_var04, objptr
09930     03 01 62 FC | 	wrlong	_var01, _var04
09934     0C 00 00 FF 
09938     0C E4 05 F1 | 	add	objptr, ##6156
0993c     F2 06 02 FB | 	rdlong	_var04, objptr
09940     03 05 02 F6 | 	mov	_var03, _var04
09944     01 04 66 F0 | 	shl	_var03, #1
09948     03 05 02 F1 | 	add	_var03, _var04
0994c     02 04 66 F0 | 	shl	_var03, #2
09950     0C 00 00 FF 
09954     0C E4 85 F1 | 	sub	objptr, ##6156
09958     F2 04 02 F1 | 	add	_var03, objptr
0995c     04 04 06 F1 | 	add	_var03, #4
09960     02 03 62 FC | 	wrlong	_var02, _var03
09964     0C 00 00 FF 
09968     0C E4 05 F1 | 	add	objptr, ##6156
0996c     F2 06 02 FB | 	rdlong	_var04, objptr
09970     03 05 02 F6 | 	mov	_var03, _var04
09974     01 04 66 F0 | 	shl	_var03, #1
09978     03 05 02 F1 | 	add	_var03, _var04
0997c     02 04 66 F0 | 	shl	_var03, #2
09980     0C 00 00 FF 
09984     0C E4 85 F1 | 	sub	objptr, ##6156
09988     F2 04 02 F1 | 	add	_var03, objptr
0998c     08 04 06 F1 | 	add	_var03, #8
09990     02 13 62 FC | 	wrlong	arg01, _var03
09994     0C 00 00 FF 
09998     0C E4 05 F1 | 	add	objptr, ##6156
0999c     F2 00 02 FB | 	rdlong	_var01, objptr
099a0     01 00 06 F1 | 	add	_var01, #1
099a4     F2 00 62 FC | 	wrlong	_var01, objptr
099a8     62 00 00 FF 
099ac     2C E4 85 F1 | 	sub	objptr, ##50220
099b0                 | LR__0780
099b0                 | _push_ret
099b0     2D 00 64 FD | 	ret
099b4                 | 
099b4                 | ' 
099b4                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
099b4                 | ' 
099b4                 | ' sub do_push
099b4                 | _do_push
099b4                 | ' if stackpointer<maxstack then 
099b4     62 00 00 FF 
099b8     2C E4 05 F1 | 	add	objptr, ##50220
099bc     F2 00 02 FB | 	rdlong	_var01, objptr
099c0     62 00 00 FF 
099c4     2C E4 85 F1 | 	sub	objptr, ##50220
099c8     01 00 00 FF 
099cc     00 00 56 F2 | 	cmps	_var01, ##512 wc
099d0     F8 00 90 3D |  if_ae	jmp	#LR__0790
099d4     69 00 00 FF 
099d8     54 E4 05 F1 | 	add	objptr, ##53844
099dc     F2 02 02 FB | 	rdlong	_var02, objptr
099e0     01 05 02 F6 | 	mov	_var03, _var02
099e4     01 04 66 F0 | 	shl	_var03, #1
099e8     01 05 02 F1 | 	add	_var03, _var02
099ec     02 04 66 F0 | 	shl	_var03, #2
099f0     03 00 00 FF 
099f4     04 E4 85 F1 | 	sub	objptr, ##1540
099f8     F2 04 02 F1 | 	add	_var03, objptr
099fc     02 01 02 FB | 	rdlong	_var01, _var03
09a00     04 04 06 F1 | 	add	_var03, #4
09a04     02 07 02 FB | 	rdlong	_var04, _var03
09a08     01 05 02 F6 | 	mov	_var03, _var02
09a0c     01 04 66 F0 | 	shl	_var03, #1
09a10     01 05 02 F1 | 	add	_var03, _var02
09a14     02 04 66 F0 | 	shl	_var03, #2
09a18     F2 04 02 F1 | 	add	_var03, objptr
09a1c     08 04 06 F1 | 	add	_var03, #8
09a20     02 03 02 FB | 	rdlong	_var02, _var03
09a24     04 00 00 FF 
09a28     24 E4 85 F1 | 	sub	objptr, ##2084
09a2c     F2 04 02 FB | 	rdlong	_var03, objptr
09a30     02 09 02 F6 | 	mov	_var05, _var03
09a34     01 08 66 F0 | 	shl	_var05, #1
09a38     02 09 02 F1 | 	add	_var05, _var03
09a3c     02 08 66 F0 | 	shl	_var05, #2
09a40     0C 00 00 FF 
09a44     0C E4 85 F1 | 	sub	objptr, ##6156
09a48     F2 08 02 F1 | 	add	_var05, objptr
09a4c     04 01 62 FC | 	wrlong	_var01, _var05
09a50     0C 00 00 FF 
09a54     0C E4 05 F1 | 	add	objptr, ##6156
09a58     F2 08 02 FB | 	rdlong	_var05, objptr
09a5c     04 05 02 F6 | 	mov	_var03, _var05
09a60     01 04 66 F0 | 	shl	_var03, #1
09a64     04 05 02 F1 | 	add	_var03, _var05
09a68     02 04 66 F0 | 	shl	_var03, #2
09a6c     0C 00 00 FF 
09a70     0C E4 85 F1 | 	sub	objptr, ##6156
09a74     F2 04 02 F1 | 	add	_var03, objptr
09a78     04 04 06 F1 | 	add	_var03, #4
09a7c     02 07 62 FC | 	wrlong	_var04, _var03
09a80     0C 00 00 FF 
09a84     0C E4 05 F1 | 	add	objptr, ##6156
09a88     F2 08 02 FB | 	rdlong	_var05, objptr
09a8c     04 07 02 F6 | 	mov	_var04, _var05
09a90     01 06 66 F0 | 	shl	_var04, #1
09a94     04 07 02 F1 | 	add	_var04, _var05
09a98     02 06 66 F0 | 	shl	_var04, #2
09a9c     0C 00 00 FF 
09aa0     0C E4 85 F1 | 	sub	objptr, ##6156
09aa4     F2 06 02 F1 | 	add	_var04, objptr
09aa8     08 06 06 F1 | 	add	_var04, #8
09aac     03 03 62 FC | 	wrlong	_var02, _var04
09ab0     0C 00 00 FF 
09ab4     0C E4 05 F1 | 	add	objptr, ##6156
09ab8     F2 00 02 FB | 	rdlong	_var01, objptr
09abc     01 00 06 F1 | 	add	_var01, #1
09ac0     F2 00 62 FC | 	wrlong	_var01, objptr
09ac4     62 00 00 FF 
09ac8     2C E4 85 F1 | 	sub	objptr, ##50220
09acc                 | LR__0790
09acc                 | _do_push_ret
09acc     2D 00 64 FD | 	ret
09ad0                 | 
09ad0                 | ' 
09ad0                 | '   
09ad0                 | ' sub csave_block(address as ulong)
09ad0                 | _csave_block
09ad0     09 01 02 F6 | 	mov	_var01, arg01
09ad4                 | ' 
09ad4                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
09ad4                 | ' ' we enter it at the state of playing 1 kHz header tone
09ad4                 | ' 
09ad4                 | ' for i=0 to 63 step 2
09ad4     00 02 06 F6 | 	mov	_var02, #0
09ad8                 | LR__0800
09ad8                 | '   do: loop until lpeek(base+32*7)>32768
09ad8     55 00 00 FF 
09adc     E4 E5 05 F1 | 	add	objptr, ##44004
09ae0     97 0C 48 FB | 	callpa	#(@LR__0802-@LR__0801)>>2,fcache_load_ptr_
09ae4                 | LR__0801
09ae4     F2 12 02 FB | 	rdlong	arg01, objptr
09ae8     E0 12 06 F1 | 	add	arg01, #224
09aec     09 FB 01 FB | 	rdlong	result1, arg01
09af0     40 00 00 FF 
09af4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09af8     E8 FF 9F CD |  if_b	jmp	#LR__0801
09afc                 | LR__0802
09afc     00 13 02 F6 | 	mov	arg01, _var01
09b00     01 05 02 F6 | 	mov	_var03, _var02
09b04     02 04 66 F0 | 	shl	_var03, #2
09b08     02 13 02 F1 | 	add	arg01, _var03
09b0c     09 07 02 FB | 	rdlong	_var04, arg01
09b10     24 00 00 FF 
09b14     B8 E4 05 F1 | 	add	objptr, ##18616
09b18     F2 06 62 FC | 	wrlong	_var04, objptr
09b1c     7A 00 00 FF 
09b20     9C E4 85 F1 | 	sub	objptr, ##62620
09b24                 | '   q=lpeek(address+4*i)
09b24                 | '      for bit=0 to 31
09b24     00 08 06 F6 | 	mov	_var05, #0
09b28     97 84 48 FB | 	callpa	#(@LR__0807-@LR__0803)>>2,fcache_load_ptr_
09b2c                 | LR__0803
09b2c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09b2c     7A 00 00 FF 
09b30     9C E4 05 F1 | 	add	objptr, ##62620
09b34     F2 06 02 FB | 	rdlong	_var04, objptr
09b38     7A 00 00 FF 
09b3c     9C E4 85 F1 | 	sub	objptr, ##62620
09b40     04 05 C2 F9 | 	decod	_var03, _var05
09b44     02 07 CA F7 | 	test	_var04, _var03 wz
09b48     60 00 90 AD |  if_e	jmp	#LR__0804
09b4c     04 05 02 F6 | 	mov	_var03, _var05
09b50     02 04 66 F0 | 	shl	_var03, #2
09b54     76 00 00 FF 
09b58     80 E4 05 F1 | 	add	objptr, ##60544
09b5c     F2 04 02 F1 | 	add	_var03, objptr
09b60     02 FF 48 FC | 	wrbyte	#127, _var03
09b64     04 05 02 F6 | 	mov	_var03, _var05
09b68     02 04 66 F0 | 	shl	_var03, #2
09b6c     01 04 06 F1 | 	add	_var03, #1
09b70     F2 04 02 F1 | 	add	_var03, objptr
09b74     02 01 49 FC | 	wrbyte	#128, _var03
09b78     04 05 02 F6 | 	mov	_var03, _var05
09b7c     02 04 66 F0 | 	shl	_var03, #2
09b80     02 04 06 F1 | 	add	_var03, #2
09b84     F2 04 02 F1 | 	add	_var03, objptr
09b88     02 FF 48 FC | 	wrbyte	#127, _var03
09b8c     04 05 02 F6 | 	mov	_var03, _var05
09b90     02 04 66 F0 | 	shl	_var03, #2
09b94     03 04 06 F1 | 	add	_var03, #3
09b98     F2 04 02 F1 | 	add	_var03, objptr
09b9c     02 01 49 FC | 	wrbyte	#128, _var03
09ba0     76 00 00 FF 
09ba4     80 E4 85 F1 | 	sub	objptr, ##60544
09ba8     5C 00 90 FD | 	jmp	#LR__0805
09bac                 | LR__0804
09bac     04 05 02 F6 | 	mov	_var03, _var05
09bb0     02 04 66 F0 | 	shl	_var03, #2
09bb4     76 00 00 FF 
09bb8     80 E4 05 F1 | 	add	objptr, ##60544
09bbc     F2 04 02 F1 | 	add	_var03, objptr
09bc0     02 01 49 FC | 	wrbyte	#128, _var03
09bc4     04 05 02 F6 | 	mov	_var03, _var05
09bc8     02 04 66 F0 | 	shl	_var03, #2
09bcc     01 04 06 F1 | 	add	_var03, #1
09bd0     F2 04 02 F1 | 	add	_var03, objptr
09bd4     02 01 49 FC | 	wrbyte	#128, _var03
09bd8     04 05 02 F6 | 	mov	_var03, _var05
09bdc     02 04 66 F0 | 	shl	_var03, #2
09be0     02 04 06 F1 | 	add	_var03, #2
09be4     F2 04 02 F1 | 	add	_var03, objptr
09be8     02 FF 48 FC | 	wrbyte	#127, _var03
09bec     04 05 02 F6 | 	mov	_var03, _var05
09bf0     02 04 66 F0 | 	shl	_var03, #2
09bf4     03 04 06 F1 | 	add	_var03, #3
09bf8     F2 04 02 F1 | 	add	_var03, objptr
09bfc     02 FF 48 FC | 	wrbyte	#127, _var03
09c00     76 00 00 FF 
09c04     80 E4 85 F1 | 	sub	objptr, ##60544
09c08                 | LR__0805
09c08     01 08 06 F1 | 	add	_var05, #1
09c0c     20 08 56 F2 | 	cmps	_var05, #32 wc
09c10     18 FF 9F CD |  if_b	jmp	#LR__0803
09c14                 | '   do: loop until lpeek(base+32*7)<32768
09c14     55 00 00 FF 
09c18     E4 E5 05 F1 | 	add	objptr, ##44004
09c1c                 | LR__0806
09c1c     F2 12 02 FB | 	rdlong	arg01, objptr
09c20     E0 12 06 F1 | 	add	arg01, #224
09c24     09 FB 01 FB | 	rdlong	result1, arg01
09c28     40 00 00 FF 
09c2c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09c30     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09c34                 | LR__0807
09c34     00 13 02 F6 | 	mov	arg01, _var01
09c38     04 12 06 F1 | 	add	arg01, #4
09c3c     01 05 02 F6 | 	mov	_var03, _var02
09c40     02 04 66 F0 | 	shl	_var03, #2
09c44     02 13 02 F1 | 	add	arg01, _var03
09c48     09 07 02 FB | 	rdlong	_var04, arg01
09c4c     24 00 00 FF 
09c50     B8 E4 05 F1 | 	add	objptr, ##18616
09c54     F2 06 62 FC | 	wrlong	_var04, objptr
09c58     7A 00 00 FF 
09c5c     9C E4 85 F1 | 	sub	objptr, ##62620
09c60                 | '   q=lpeek(address+4+4*i)
09c60                 | '      for bit=0 to 31
09c60     00 08 06 F6 | 	mov	_var05, #0
09c64     97 94 48 FB | 	callpa	#(@LR__0811-@LR__0808)>>2,fcache_load_ptr_
09c68                 | LR__0808
09c68                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
09c68     7A 00 00 FF 
09c6c     9C E4 05 F1 | 	add	objptr, ##62620
09c70     F2 06 02 FB | 	rdlong	_var04, objptr
09c74     7A 00 00 FF 
09c78     9C E4 85 F1 | 	sub	objptr, ##62620
09c7c     04 05 C2 F9 | 	decod	_var03, _var05
09c80     02 07 CA F7 | 	test	_var04, _var03 wz
09c84     80 00 90 AD |  if_e	jmp	#LR__0809
09c88     04 0B 02 F6 | 	mov	_var06, _var05
09c8c     02 0A 66 F0 | 	shl	_var06, #2
09c90     80 04 06 F6 | 	mov	_var03, #128
09c94     05 05 02 F1 | 	add	_var03, _var06
09c98     76 00 00 FF 
09c9c     80 E4 05 F1 | 	add	objptr, ##60544
09ca0     F2 04 02 F1 | 	add	_var03, objptr
09ca4     02 FF 48 FC | 	wrbyte	#127, _var03
09ca8     04 0B 02 F6 | 	mov	_var06, _var05
09cac     02 0A 66 F0 | 	shl	_var06, #2
09cb0     80 04 06 F6 | 	mov	_var03, #128
09cb4     05 05 02 F1 | 	add	_var03, _var06
09cb8     01 04 06 F1 | 	add	_var03, #1
09cbc     F2 04 02 F1 | 	add	_var03, objptr
09cc0     02 01 49 FC | 	wrbyte	#128, _var03
09cc4     04 0B 02 F6 | 	mov	_var06, _var05
09cc8     02 0A 66 F0 | 	shl	_var06, #2
09ccc     80 04 06 F6 | 	mov	_var03, #128
09cd0     05 05 02 F1 | 	add	_var03, _var06
09cd4     02 04 06 F1 | 	add	_var03, #2
09cd8     F2 04 02 F1 | 	add	_var03, objptr
09cdc     02 FF 48 FC | 	wrbyte	#127, _var03
09ce0     04 0B 02 F6 | 	mov	_var06, _var05
09ce4     02 0A 66 F0 | 	shl	_var06, #2
09ce8     80 04 06 F6 | 	mov	_var03, #128
09cec     05 05 02 F1 | 	add	_var03, _var06
09cf0     03 04 06 F1 | 	add	_var03, #3
09cf4     F2 04 02 F1 | 	add	_var03, objptr
09cf8     02 01 49 FC | 	wrbyte	#128, _var03
09cfc     76 00 00 FF 
09d00     80 E4 85 F1 | 	sub	objptr, ##60544
09d04     7C 00 90 FD | 	jmp	#LR__0810
09d08                 | LR__0809
09d08     04 0B 02 F6 | 	mov	_var06, _var05
09d0c     02 0A 66 F0 | 	shl	_var06, #2
09d10     80 04 06 F6 | 	mov	_var03, #128
09d14     05 05 02 F1 | 	add	_var03, _var06
09d18     76 00 00 FF 
09d1c     80 E4 05 F1 | 	add	objptr, ##60544
09d20     F2 04 02 F1 | 	add	_var03, objptr
09d24     02 01 49 FC | 	wrbyte	#128, _var03
09d28     04 0B 02 F6 | 	mov	_var06, _var05
09d2c     02 0A 66 F0 | 	shl	_var06, #2
09d30     80 04 06 F6 | 	mov	_var03, #128
09d34     05 05 02 F1 | 	add	_var03, _var06
09d38     01 04 06 F1 | 	add	_var03, #1
09d3c     F2 04 02 F1 | 	add	_var03, objptr
09d40     02 01 49 FC | 	wrbyte	#128, _var03
09d44     04 0B 02 F6 | 	mov	_var06, _var05
09d48     02 0A 66 F0 | 	shl	_var06, #2
09d4c     80 04 06 F6 | 	mov	_var03, #128
09d50     05 05 02 F1 | 	add	_var03, _var06
09d54     02 04 06 F1 | 	add	_var03, #2
09d58     F2 04 02 F1 | 	add	_var03, objptr
09d5c     02 FF 48 FC | 	wrbyte	#127, _var03
09d60     04 0B 02 F6 | 	mov	_var06, _var05
09d64     02 0A 66 F0 | 	shl	_var06, #2
09d68     80 04 06 F6 | 	mov	_var03, #128
09d6c     05 05 02 F1 | 	add	_var03, _var06
09d70     03 04 06 F1 | 	add	_var03, #3
09d74     F2 04 02 F1 | 	add	_var03, objptr
09d78     02 FF 48 FC | 	wrbyte	#127, _var03
09d7c     76 00 00 FF 
09d80     80 E4 85 F1 | 	sub	objptr, ##60544
09d84                 | LR__0810
09d84     01 08 06 F1 | 	add	_var05, #1
09d88     20 08 56 F2 | 	cmps	_var05, #32 wc
09d8c     D8 FE 9F CD |  if_b	jmp	#LR__0808
09d90                 | LR__0811
09d90     02 02 06 F1 | 	add	_var02, #2
09d94     40 02 56 F2 | 	cmps	_var02, #64 wc
09d98     3C FD 9F CD |  if_b	jmp	#LR__0800
09d9c                 | ' do: loop until lpeek(base+32*7)>32768
09d9c     55 00 00 FF 
09da0     E4 E5 05 F1 | 	add	objptr, ##44004
09da4     97 84 48 FB | 	callpa	#(@LR__0820-@LR__0812)>>2,fcache_load_ptr_
09da8                 | LR__0812
09da8     F2 12 02 FB | 	rdlong	arg01, objptr
09dac     E0 12 06 F1 | 	add	arg01, #224
09db0     09 FB 01 FB | 	rdlong	result1, arg01
09db4     40 00 00 FF 
09db8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09dbc     E8 FF 9F CD |  if_b	jmp	#LR__0812
09dc0     55 00 00 FF 
09dc4     E4 E5 85 F1 | 	sub	objptr, ##44004
09dc8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09dc8     00 02 06 F6 | 	mov	_var02, #0
09dcc                 | LR__0813
09dcc     01 07 52 F6 | 	abs	_var04, _var02 wc
09dd0     07 06 06 F5 | 	and	_var04, #7
09dd4     03 07 82 F6 | 	negc	_var04, _var04
09dd8     04 06 56 F2 | 	cmps	_var04, #4 wc
09ddc     20 00 90 3D |  if_ae	jmp	#LR__0814
09de0     01 0B 02 F6 | 	mov	_var06, _var02
09de4     76 00 00 FF 
09de8     80 E4 05 F1 | 	add	objptr, ##60544
09dec     F2 0A 02 F1 | 	add	_var06, objptr
09df0     05 FF 48 FC | 	wrbyte	#127, _var06
09df4     76 00 00 FF 
09df8     80 E4 85 F1 | 	sub	objptr, ##60544
09dfc     1C 00 90 FD | 	jmp	#LR__0815
09e00                 | LR__0814
09e00     01 0B 02 F6 | 	mov	_var06, _var02
09e04     76 00 00 FF 
09e08     80 E4 05 F1 | 	add	objptr, ##60544
09e0c     F2 0A 02 F1 | 	add	_var06, objptr
09e10     05 01 49 FC | 	wrbyte	#128, _var06
09e14     76 00 00 FF 
09e18     80 E4 85 F1 | 	sub	objptr, ##60544
09e1c                 | LR__0815
09e1c     01 02 06 F1 | 	add	_var02, #1
09e20     80 02 56 F2 | 	cmps	_var02, #128 wc
09e24     A4 FF 9F CD |  if_b	jmp	#LR__0813
09e28                 | ' 
09e28                 | ' do: loop until lpeek(base+32*7)<32768
09e28     55 00 00 FF 
09e2c     E4 E5 05 F1 | 	add	objptr, ##44004
09e30                 | LR__0816
09e30     F2 12 02 FB | 	rdlong	arg01, objptr
09e34     E0 12 06 F1 | 	add	arg01, #224
09e38     09 FB 01 FB | 	rdlong	result1, arg01
09e3c     40 00 00 FF 
09e40     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09e44     E8 FF 9F 3D |  if_ae	jmp	#LR__0816
09e48     55 00 00 FF 
09e4c     E4 E5 85 F1 | 	sub	objptr, ##44004
09e50                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09e50     80 02 06 F6 | 	mov	_var02, #128
09e54                 | LR__0817
09e54     01 07 52 F6 | 	abs	_var04, _var02 wc
09e58     07 06 06 F5 | 	and	_var04, #7
09e5c     03 07 82 F6 | 	negc	_var04, _var04
09e60     04 06 56 F2 | 	cmps	_var04, #4 wc
09e64     20 00 90 3D |  if_ae	jmp	#LR__0818
09e68     01 0B 02 F6 | 	mov	_var06, _var02
09e6c     76 00 00 FF 
09e70     80 E4 05 F1 | 	add	objptr, ##60544
09e74     F2 0A 02 F1 | 	add	_var06, objptr
09e78     05 FF 48 FC | 	wrbyte	#127, _var06
09e7c     76 00 00 FF 
09e80     80 E4 85 F1 | 	sub	objptr, ##60544
09e84     1C 00 90 FD | 	jmp	#LR__0819
09e88                 | LR__0818
09e88     01 0B 02 F6 | 	mov	_var06, _var02
09e8c     76 00 00 FF 
09e90     80 E4 05 F1 | 	add	objptr, ##60544
09e94     F2 0A 02 F1 | 	add	_var06, objptr
09e98     05 01 49 FC | 	wrbyte	#128, _var06
09e9c     76 00 00 FF 
09ea0     80 E4 85 F1 | 	sub	objptr, ##60544
09ea4                 | LR__0819
09ea4     01 02 06 F1 | 	add	_var02, #1
09ea8     00 03 16 F2 | 	cmp	_var02, #256 wc
09eac     A4 FF 9F CD |  if_b	jmp	#LR__0817
09eb0                 | LR__0820
09eb0                 | _csave_block_ret
09eb0     2D 00 64 FD | 	ret
09eb4                 | 
09eb4                 | ' 
09eb4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09eb4                 | _csave_addtoblock
09eb4     04 4A 05 F6 | 	mov	COUNT_, #4
09eb8     A8 00 A0 FD | 	call	#pushregs_
09ebc     09 1F 02 F6 | 	mov	local01, arg01
09ec0                 | ' 
09ec0                 | ' 
09ec0                 | ' if force=0 then
09ec0     07 14 4E F7 | 	zerox	arg02, #7 wz
09ec4     78 00 90 5D |  if_ne	jmp	#LR__0830
09ec8     78 00 00 FF 
09ecc     80 E5 05 F1 | 	add	objptr, ##61824
09ed0     F2 14 02 FB | 	rdlong	arg02, objptr
09ed4     02 00 00 FF 
09ed8     00 E4 85 F1 | 	sub	objptr, ##1024
09edc     F2 14 02 F1 | 	add	arg02, objptr
09ee0     0A 1F 42 FC | 	wrbyte	local01, arg02
09ee4     02 00 00 FF 
09ee8     00 E4 05 F1 | 	add	objptr, ##1024
09eec     F2 1E 02 FB | 	rdlong	local01, objptr
09ef0     01 1E 06 F1 | 	add	local01, #1
09ef4     F2 1E 62 FC | 	wrlong	local01, objptr
09ef8                 | '   block(blockptr)=d
09ef8                 | '   blockptr+=1
09ef8                 | '   if blockptr>=255 then
09ef8     78 00 00 FF 
09efc     80 E5 85 F1 | 	sub	objptr, ##61824
09f00     FF 1E 16 F2 | 	cmp	local01, #255 wc
09f04     E4 00 90 CD |  if_b	jmp	#LR__0834
09f08     76 00 00 FF 
09f0c     80 E5 05 F1 | 	add	objptr, ##60800
09f10     F2 12 02 F6 | 	mov	arg01, objptr
09f14     76 00 00 FF 
09f18     80 E5 85 F1 | 	sub	objptr, ##60800
09f1c     B0 FB BF FD | 	call	#_csave_block
09f20     78 00 00 FF 
09f24     80 E5 05 F1 | 	add	objptr, ##61824
09f28     F2 00 68 FC | 	wrlong	#0, objptr
09f2c     78 00 00 FF 
09f30     80 E5 85 F1 | 	sub	objptr, ##61824
09f34     2C 13 06 F6 | 	mov	arg01, #300
09f38     8C EF B0 FD | 	call	#__system___waitms
09f3c     AC 00 90 FD | 	jmp	#LR__0834
09f40                 | LR__0830
09f40     78 00 00 FF 
09f44     80 E5 05 F1 | 	add	objptr, ##61824
09f48     F2 20 02 FB | 	rdlong	local02, objptr
09f4c     02 00 00 FF 
09f50     00 E4 85 F1 | 	sub	objptr, ##1024
09f54     F2 20 02 F1 | 	add	local02, objptr
09f58     10 1F 42 FC | 	wrbyte	local01, local02
09f5c                 | '   block(blockptr)=d
09f5c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09f5c     02 00 00 FF 
09f60     00 E4 05 F1 | 	add	objptr, ##1024
09f64     F2 22 02 FB | 	rdlong	local03, objptr
09f68     78 00 00 FF 
09f6c     80 E5 85 F1 | 	sub	objptr, ##61824
09f70     FF 22 16 F2 | 	cmp	local03, #255 wc
09f74     40 00 90 3D |  if_ae	jmp	#LR__0833
09f78     78 00 00 FF 
09f7c     80 E5 05 F1 | 	add	objptr, ##61824
09f80     F2 24 02 FB | 	rdlong	local04, objptr
09f84     78 00 00 FF 
09f88     80 E5 85 F1 | 	sub	objptr, ##61824
09f8c                 | LR__0831
09f8c     00 25 56 F2 | 	cmps	local04, #256 wc
09f90     24 00 90 3D |  if_ae	jmp	#LR__0832
09f94     12 21 02 F6 | 	mov	local02, local04
09f98     76 00 00 FF 
09f9c     80 E5 05 F1 | 	add	objptr, ##60800
09fa0     F2 20 02 F1 | 	add	local02, objptr
09fa4     10 01 48 FC | 	wrbyte	#0, local02
09fa8     01 24 06 F1 | 	add	local04, #1
09fac     76 00 00 FF 
09fb0     80 E5 85 F1 | 	sub	objptr, ##60800
09fb4     D4 FF 9F FD | 	jmp	#LR__0831
09fb8                 | LR__0832
09fb8                 | LR__0833
09fb8     76 00 00 FF 
09fbc     80 E5 05 F1 | 	add	objptr, ##60800
09fc0     F2 12 02 F6 | 	mov	arg01, objptr
09fc4     76 00 00 FF 
09fc8     80 E5 85 F1 | 	sub	objptr, ##60800
09fcc     00 FB BF FD | 	call	#_csave_block
09fd0     78 00 00 FF 
09fd4     80 E5 05 F1 | 	add	objptr, ##61824
09fd8     F2 00 68 FC | 	wrlong	#0, objptr
09fdc     78 00 00 FF 
09fe0     80 E5 85 F1 | 	sub	objptr, ##61824
09fe4     2C 13 06 F6 | 	mov	arg01, #300
09fe8     DC EE B0 FD | 	call	#__system___waitms
09fec                 | LR__0834
09fec     A7 F0 03 F6 | 	mov	ptra, fp
09ff0     B2 00 A0 FD | 	call	#popregs_
09ff4                 | _csave_addtoblock_ret
09ff4     2D 00 64 FD | 	ret
09ff8                 | 
09ff8                 | ' 
09ff8                 | ' sub test_csave
09ff8                 | _test_csave
09ff8     04 4A 05 F6 | 	mov	COUNT_, #4
09ffc     A8 00 A0 FD | 	call	#pushregs_
0a000     C0 F0 07 F1 | 	add	ptra, #192
0a004                 | ' 'dim fileheader,savestart, saveptr as ulong
0a004                 | ' 
0a004                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a004     69 00 00 FF 
0a008     58 E4 05 F1 | 	add	objptr, ##53848
0a00c     F2 12 02 FB | 	rdlong	arg01, objptr
0a010     69 00 00 FF 
0a014     58 E4 85 F1 | 	sub	objptr, ##53848
0a018     50 B8 B0 FD | 	call	#_pslpeek
0a01c     FF FF 7F FF 
0a020     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a024     0C 00 90 5D |  if_ne	jmp	#LR__0840
0a028     1B 12 06 F6 | 	mov	arg01, #27
0a02c     80 B6 B0 FD | 	call	#_printerror
0a030     0C 03 90 FD | 	jmp	#LR__0852
0a034                 | LR__0840
0a034     04 F8 BF FD | 	call	#_pop
0a038     FF 1E 02 F6 | 	mov	local01, result3
0a03c     90 4E 05 F1 | 	add	fp, #144
0a040     A7 FA 61 FC | 	wrlong	result1, fp
0a044     04 4E 05 F1 | 	add	fp, #4
0a048     A7 FC 61 FC | 	wrlong	result2, fp
0a04c     04 4E 05 F1 | 	add	fp, #4
0a050     A7 1E 62 FC | 	wrlong	local01, fp
0a054                 | ' t1=pop()
0a054                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a054     98 4E 85 F1 | 	sub	fp, #152
0a058     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a05c     42 01 00 5F 
0a060     9F 1F 06 56 |  if_ne	mov	local01, ##@LR__4592
0a064     8C 4E 05 51 |  if_ne	add	fp, #140
0a068     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a06c     8C 4E 85 51 |  if_ne	sub	fp, #140
0a070     90 4E 05 A1 |  if_e	add	fp, #144
0a074     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a078     04 4E 85 A1 |  if_e	sub	fp, #4
0a07c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a080     8C 4E 85 A1 |  if_e	sub	fp, #140
0a084                 | ' 
0a084                 | ' ' prepare 1 kHz header wave
0a084                 | ' 
0a084                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a084     A7 00 68 FC | 	wrlong	#0, fp
0a088     97 34 48 FB | 	callpa	#(@LR__0844-@LR__0841)>>2,fcache_load_ptr_
0a08c                 | LR__0841
0a08c     A7 1E 02 FB | 	rdlong	local01, fp
0a090     0F 1F 52 F6 | 	abs	local01, local01 wc
0a094     07 1E 06 F5 | 	and	local01, #7
0a098     0F 1F 82 F6 | 	negc	local01, local01
0a09c     04 1E 56 F2 | 	cmps	local01, #4 wc
0a0a0     20 00 90 3D |  if_ae	jmp	#LR__0842
0a0a4     A7 1E 02 FB | 	rdlong	local01, fp
0a0a8     76 00 00 FF 
0a0ac     80 E4 05 F1 | 	add	objptr, ##60544
0a0b0     F2 1E 02 F1 | 	add	local01, objptr
0a0b4     0F FF 48 FC | 	wrbyte	#127, local01
0a0b8     76 00 00 FF 
0a0bc     80 E4 85 F1 | 	sub	objptr, ##60544
0a0c0     1C 00 90 FD | 	jmp	#LR__0843
0a0c4                 | LR__0842
0a0c4     A7 1E 02 FB | 	rdlong	local01, fp
0a0c8     76 00 00 FF 
0a0cc     80 E4 05 F1 | 	add	objptr, ##60544
0a0d0     F2 1E 02 F1 | 	add	local01, objptr
0a0d4     0F 01 49 FC | 	wrbyte	#128, local01
0a0d8     76 00 00 FF 
0a0dc     80 E4 85 F1 | 	sub	objptr, ##60544
0a0e0                 | LR__0843
0a0e0     A7 1E 02 FB | 	rdlong	local01, fp
0a0e4     01 1E 06 F1 | 	add	local01, #1
0a0e8     A7 1E 62 FC | 	wrlong	local01, fp
0a0ec     00 1F 56 F2 | 	cmps	local01, #256 wc
0a0f0     98 FF 9F CD |  if_b	jmp	#LR__0841
0a0f4                 | LR__0844
0a0f4     76 00 00 FF 
0a0f8     80 E4 05 F1 | 	add	objptr, ##60544
0a0fc     F2 14 02 F6 | 	mov	arg02, objptr
0a100     07 12 06 F6 | 	mov	arg01, #7
0a104     0F 00 00 FF 
0a108     40 17 06 F6 | 	mov	arg03, ##8000
0a10c     0E 18 C6 F9 | 	decod	arg04, #14
0a110     00 1B 06 F6 | 	mov	arg05, #256
0a114     00 1C 06 F6 | 	mov	arg06, #0
0a118     6A 00 00 FF 
0a11c     C0 E5 85 F1 | 	sub	objptr, ##54720
0a120     14 E7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0a124     0B 00 00 FF 
0a128     C0 E4 85 F1 | 	sub	objptr, ##5824
0a12c     05 00 00 FF 
0a130     B8 13 06 F6 | 	mov	arg01, ##3000
0a134     90 ED B0 FD | 	call	#__system___waitms
0a138     78 00 00 FF 
0a13c     80 E5 05 F1 | 	add	objptr, ##61824
0a140     F2 00 68 FC | 	wrlong	#0, objptr
0a144     78 00 00 FF 
0a148     80 E5 85 F1 | 	sub	objptr, ##61824
0a14c     72 12 06 F6 | 	mov	arg01, #114
0a150     00 14 06 F6 | 	mov	arg02, #0
0a154     5C FD BF FD | 	call	#_csave_addtoblock
0a158     62 12 06 F6 | 	mov	arg01, #98
0a15c     00 14 06 F6 | 	mov	arg02, #0
0a160     50 FD BF FD | 	call	#_csave_addtoblock
0a164     61 12 06 F6 | 	mov	arg01, #97
0a168     00 14 06 F6 | 	mov	arg02, #0
0a16c     44 FD BF FD | 	call	#_csave_addtoblock
0a170     0D 12 06 F6 | 	mov	arg01, #13
0a174     00 14 06 F6 | 	mov	arg02, #0
0a178     38 FD BF FD | 	call	#_csave_addtoblock
0a17c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a17c                 | ' waitms 3000 
0a17c                 | ' 
0a17c                 | ' blockptr=0
0a17c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a17c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a17c     A7 02 68 FC | 	wrlong	#1, fp
0a180     8C 4E 05 F1 | 	add	fp, #140
0a184     A7 12 02 FB | 	rdlong	arg01, fp
0a188     8C 4E 85 F1 | 	sub	fp, #140
0a18c     09 21 02 F6 | 	mov	local02, arg01
0a190     97 06 48 FB | 	callpa	#(@LR__0846-@LR__0845)>>2,fcache_load_ptr_
0a194                 | LR__0845
0a194     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a198     01 20 06 51 |  if_ne	add	local02, #1
0a19c     F4 FF 9F 5D |  if_ne	jmp	#LR__0845
0a1a0                 | LR__0846
0a1a0     09 21 82 F1 | 	sub	local02, arg01
0a1a4     10 23 02 F6 | 	mov	local03, local02
0a1a8     01 22 06 F1 | 	add	local03, #1
0a1ac                 | LR__0847
0a1ac     A7 1E 02 FB | 	rdlong	local01, fp
0a1b0     11 1F 52 F2 | 	cmps	local01, local03 wc
0a1b4     34 00 90 3D |  if_ae	jmp	#LR__0848
0a1b8     8C 4E 05 F1 | 	add	fp, #140
0a1bc     A7 12 02 FB | 	rdlong	arg01, fp
0a1c0     8C 4E 85 F1 | 	sub	fp, #140
0a1c4     A7 14 02 FB | 	rdlong	arg02, fp
0a1c8     01 16 06 F6 | 	mov	arg03, #1
0a1cc     28 0B B1 FD | 	call	#__system__Mid_S
0a1d0     FD 12 C2 FA | 	rdbyte	arg01, result1
0a1d4     00 14 06 F6 | 	mov	arg02, #0
0a1d8     D8 FC BF FD | 	call	#_csave_addtoblock
0a1dc     A7 1E 02 FB | 	rdlong	local01, fp
0a1e0     01 1E 06 F1 | 	add	local01, #1
0a1e4     A7 1E 62 FC | 	wrlong	local01, fp
0a1e8     C0 FF 9F FD | 	jmp	#LR__0847
0a1ec                 | LR__0848
0a1ec     00 12 06 F6 | 	mov	arg01, #0
0a1f0     00 14 06 F6 | 	mov	arg02, #0
0a1f4     BC FC BF FD | 	call	#_csave_addtoblock
0a1f8     72 12 06 F6 | 	mov	arg01, #114
0a1fc     00 14 06 F6 | 	mov	arg02, #0
0a200     B0 FC BF FD | 	call	#_csave_addtoblock
0a204     62 12 06 F6 | 	mov	arg01, #98
0a208     00 14 06 F6 | 	mov	arg02, #0
0a20c     A4 FC BF FD | 	call	#_csave_addtoblock
0a210     73 12 06 F6 | 	mov	arg01, #115
0a214     00 14 06 F6 | 	mov	arg02, #0
0a218     98 FC BF FD | 	call	#_csave_addtoblock
0a21c     0D 12 06 F6 | 	mov	arg01, #13
0a220     00 14 06 F6 | 	mov	arg02, #0
0a224     8C FC BF FD | 	call	#_csave_addtoblock
0a228     69 00 00 FF 
0a22c     58 E4 05 F1 | 	add	objptr, ##53848
0a230     F2 1E 02 FB | 	rdlong	local01, objptr
0a234     69 00 00 FF 
0a238     58 E4 85 F1 | 	sub	objptr, ##53848
0a23c     9C 4E 05 F1 | 	add	fp, #156
0a240     A7 1E 62 FC | 	wrlong	local01, fp
0a244     9C 4E 85 F1 | 	sub	fp, #156
0a248                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0a248                 | ' 
0a248                 | ' saveptr=programstart
0a248                 | ' do
0a248                 | LR__0849
0a248     A0 4E 05 F1 | 	add	fp, #160
0a24c     A7 12 02 F6 | 	mov	arg01, fp
0a250     04 4E 85 F1 | 	sub	fp, #4
0a254     A7 14 02 FB | 	rdlong	arg02, fp
0a258     9C 4E 85 F1 | 	sub	fp, #156
0a25c     18 16 06 F6 | 	mov	arg03, #24
0a260     0B 00 00 FF 
0a264     C0 E4 05 F1 | 	add	objptr, ##5824
0a268     78 DE B0 FD | 	call	#_psram_spin2_read1
0a26c     0C 4E 05 F1 | 	add	fp, #12
0a270     A7 12 02 F6 | 	mov	arg01, fp
0a274     9C 4E 05 F1 | 	add	fp, #156
0a278     A7 14 02 FB | 	rdlong	arg02, fp
0a27c     04 4E 05 F1 | 	add	fp, #4
0a280     A7 16 02 FB | 	rdlong	arg03, fp
0a284     AC 4E 85 F1 | 	sub	fp, #172
0a288     58 DE B0 FD | 	call	#_psram_spin2_read1
0a28c     0B 00 00 FF 
0a290     C0 E4 85 F1 | 	sub	objptr, ##5824
0a294     AC 4E 05 F1 | 	add	fp, #172
0a298     A7 12 02 FB | 	rdlong	arg01, fp
0a29c     AC 4E 85 F1 | 	sub	fp, #172
0a2a0     00 14 06 F6 | 	mov	arg02, #0
0a2a4     0C FC BF FD | 	call	#_csave_addtoblock
0a2a8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0a2a8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0a2a8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0a2a8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0a2a8     A7 00 68 FC | 	wrlong	#0, fp
0a2ac     AC 4E 05 F1 | 	add	fp, #172
0a2b0     A7 24 02 FB | 	rdlong	local04, fp
0a2b4     AC 4E 85 F1 | 	sub	fp, #172
0a2b8                 | LR__0850
0a2b8     A7 1E 02 FB | 	rdlong	local01, fp
0a2bc     12 1F 52 F2 | 	cmps	local01, local04 wc
0a2c0     2C 00 90 3D |  if_ae	jmp	#LR__0851
0a2c4     A7 22 02 FB | 	rdlong	local03, fp
0a2c8     0C 4E 05 F1 | 	add	fp, #12
0a2cc     A7 22 02 F1 | 	add	local03, fp
0a2d0     11 13 C2 FA | 	rdbyte	arg01, local03
0a2d4     00 14 06 F6 | 	mov	arg02, #0
0a2d8     0C 4E 85 F1 | 	sub	fp, #12
0a2dc     D4 FB BF FD | 	call	#_csave_addtoblock
0a2e0     A7 22 02 FB | 	rdlong	local03, fp
0a2e4     01 22 06 F1 | 	add	local03, #1
0a2e8     A7 22 62 FC | 	wrlong	local03, fp
0a2ec     C8 FF 9F FD | 	jmp	#LR__0850
0a2f0                 | LR__0851
0a2f0     B4 4E 05 F1 | 	add	fp, #180
0a2f4     A7 1E 02 FB | 	rdlong	local01, fp
0a2f8     18 4E 85 F1 | 	sub	fp, #24
0a2fc     A7 1E 62 FC | 	wrlong	local01, fp
0a300     18 4E 05 F1 | 	add	fp, #24
0a304     A7 1E 02 FB | 	rdlong	local01, fp
0a308     B4 4E 85 F1 | 	sub	fp, #180
0a30c     FF FF 3F FF 
0a310     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a314     30 FF 9F 5D |  if_ne	jmp	#LR__0849
0a318     00 12 06 F6 | 	mov	arg01, #0
0a31c     01 14 06 F6 | 	mov	arg02, #1
0a320     90 FB BF FD | 	call	#_csave_addtoblock
0a324     55 00 00 FF 
0a328     E4 E5 05 F1 | 	add	objptr, ##44004
0a32c     F2 12 02 FB | 	rdlong	arg01, objptr
0a330     55 00 00 FF 
0a334     E4 E5 85 F1 | 	sub	objptr, ##44004
0a338     F4 12 06 F1 | 	add	arg01, #244
0a33c     09 01 58 FC | 	wrword	#0, arg01
0a340                 | LR__0852
0a340     A7 F0 03 F6 | 	mov	ptra, fp
0a344     B2 00 A0 FD | 	call	#popregs_
0a348                 | _test_csave_ret
0a348     2D 00 64 FD | 	ret
0a34c                 | 
0a34c                 | ' 
0a34c                 | ' ' ----------------- Save the program
0a34c                 | ' 
0a34c                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a34c                 | _do_save
0a34c     02 4A 05 F6 | 	mov	COUNT_, #2
0a350     A8 00 A0 FD | 	call	#pushregs_
0a354     01 00 00 FF 
0a358     BC F0 07 F1 | 	add	ptra, ##700
0a35c     01 00 00 FF 
0a360     10 4E 05 F1 | 	add	fp, ##528
0a364     B1 B0 86 FF 
0a368     A7 E4 68 FC | 	wrlong	##224486002, fp
0a36c     01 00 00 FF 
0a370     10 4E 85 F1 | 	sub	fp, ##528
0a374     C4 F4 BF FD | 	call	#_pop
0a378     FF 16 02 F6 | 	mov	arg03, result3
0a37c     A7 FA 61 FC | 	wrlong	result1, fp
0a380     04 4E 05 F1 | 	add	fp, #4
0a384     A7 FC 61 FC | 	wrlong	result2, fp
0a388     04 4E 05 F1 | 	add	fp, #4
0a38c     A7 16 62 FC | 	wrlong	arg03, fp
0a390     08 4E 85 F1 | 	sub	fp, #8
0a394                 | ' 
0a394                 | ' fileheader=$0D616272' rba+ver'
0a394                 | ' 
0a394                 | ' t1=pop() 
0a394                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a394     69 00 00 FF 
0a398     58 E4 05 F1 | 	add	objptr, ##53848
0a39c     F2 12 02 FB | 	rdlong	arg01, objptr
0a3a0     69 00 00 FF 
0a3a4     58 E4 85 F1 | 	sub	objptr, ##53848
0a3a8     C0 B4 B0 FD | 	call	#_pslpeek
0a3ac     FF FF 7F FF 
0a3b0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a3b4     0C 00 90 5D |  if_ne	jmp	#LR__0860
0a3b8     1B 12 06 F6 | 	mov	arg01, #27
0a3bc     F0 B2 B0 FD | 	call	#_printerror
0a3c0     68 02 90 FD | 	jmp	#LR__0866
0a3c4                 | LR__0860
0a3c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a3c4     08 4E 05 F1 | 	add	fp, #8
0a3c8     A7 16 02 FB | 	rdlong	arg03, fp
0a3cc     08 4E 85 F1 | 	sub	fp, #8
0a3d0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a3d4     18 00 90 5D |  if_ne	jmp	#LR__0861
0a3d8     A7 12 02 FB | 	rdlong	arg01, fp
0a3dc     64 25 B0 FD | 	call	#_convertstring
0a3e0     A7 FA 61 FC | 	wrlong	result1, fp
0a3e4     08 4E 05 F1 | 	add	fp, #8
0a3e8     A7 3E 68 FC | 	wrlong	#31, fp
0a3ec     08 4E 85 F1 | 	sub	fp, #8
0a3f0                 | LR__0861
0a3f0                 | ' if t1.result_type=result_string then
0a3f0     08 4E 05 F1 | 	add	fp, #8
0a3f4     A7 1E 02 FB | 	rdlong	local01, fp
0a3f8     08 4E 85 F1 | 	sub	fp, #8
0a3fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a400     28 02 90 5D |  if_ne	jmp	#LR__0865
0a404                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a404     A7 12 02 FB | 	rdlong	arg01, fp
0a408     42 01 00 FF 
0a40c     AA 15 06 F6 | 	mov	arg02, ##@LR__4593
0a410     E8 E7 B0 FD | 	call	#__system___string_cmp
0a414     00 FA 0D F2 | 	cmp	result1, #0 wz
0a418     42 01 00 AF 
0a41c     AB 1F 06 A6 |  if_e	mov	local01, ##@LR__4594
0a420     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a424                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a424     09 12 06 F6 | 	mov	arg01, #9
0a428     D8 36 B1 FD | 	call	#__system__close
0a42c     09 1E 06 F6 | 	mov	local01, #9
0a430     71 00 00 FF 
0a434     68 E4 05 F1 | 	add	objptr, ##57960
0a438     F2 12 02 FB | 	rdlong	arg01, objptr
0a43c     71 00 00 FF 
0a440     68 E4 85 F1 | 	sub	objptr, ##57960
0a444     42 01 00 FF 
0a448     B6 15 06 F6 | 	mov	arg02, ##@LR__4595
0a44c     E0 E7 B0 FD | 	call	#__system___string_concat
0a450     FD 12 02 F6 | 	mov	arg01, result1
0a454     A7 14 02 FB | 	rdlong	arg02, fp
0a458     D4 E7 B0 FD | 	call	#__system___string_concat
0a45c     FD 14 02 F6 | 	mov	arg02, result1
0a460     0F 13 02 F6 | 	mov	arg01, local01
0a464     0D 16 06 F6 | 	mov	arg03, #13
0a468     68 F3 B0 FD | 	call	#__system___basic_open_string
0a46c     01 00 00 FF 
0a470     0C 4E 05 F1 | 	add	fp, ##524
0a474     A7 0A 68 FC | 	wrlong	#5, fp
0a478     69 00 00 FF 
0a47c     58 E4 05 F1 | 	add	objptr, ##53848
0a480     F2 1E 02 FB | 	rdlong	local01, objptr
0a484     69 00 00 FF 
0a488     58 E4 85 F1 | 	sub	objptr, ##53848
0a48c     0C 4E 05 F1 | 	add	fp, #12
0a490     A7 1E 62 FC | 	wrlong	local01, fp
0a494     01 00 00 FF 
0a498     18 4E 85 F1 | 	sub	fp, ##536
0a49c                 | ' '  put #9,1,fileheader,1
0a49c                 | '   i=5
0a49c                 | '   saveptr=programstart
0a49c                 | '   do
0a49c                 | LR__0862
0a49c     01 00 00 FF 
0a4a0     1C 4E 05 F1 | 	add	fp, ##540
0a4a4     A7 12 02 F6 | 	mov	arg01, fp
0a4a8     04 4E 85 F1 | 	sub	fp, #4
0a4ac     A7 14 02 FB | 	rdlong	arg02, fp
0a4b0     01 00 00 FF 
0a4b4     18 4E 85 F1 | 	sub	fp, ##536
0a4b8     18 16 06 F6 | 	mov	arg03, #24
0a4bc     0B 00 00 FF 
0a4c0     C0 E4 05 F1 | 	add	objptr, ##5824
0a4c4     1C DC B0 FD | 	call	#_psram_spin2_read1
0a4c8     01 00 00 FF 
0a4cc     34 4E 05 F1 | 	add	fp, ##564
0a4d0     A7 12 02 F6 | 	mov	arg01, fp
0a4d4     10 4E 85 F1 | 	sub	fp, #16
0a4d8     A7 14 02 FB | 	rdlong	arg02, fp
0a4dc     04 4E 05 F1 | 	add	fp, #4
0a4e0     A7 16 02 FB | 	rdlong	arg03, fp
0a4e4     01 00 00 FF 
0a4e8     28 4E 85 F1 | 	sub	fp, ##552
0a4ec     F4 DB B0 FD | 	call	#_psram_spin2_read1
0a4f0     0B 00 00 FF 
0a4f4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a4f8     42 01 00 FF 
0a4fc     B8 1F 06 F6 | 	mov	local01, ##@LR__4596
0a500     01 00 00 FF 
0a504     B4 4E 05 F1 | 	add	fp, ##692
0a508     A7 1E 62 FC | 	wrlong	local01, fp
0a50c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a50c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a50c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a50c     A8 4E 85 F1 | 	sub	fp, #168
0a510     A7 02 68 FC | 	wrlong	#1, fp
0a514     1C 4E 05 F1 | 	add	fp, #28
0a518     A7 20 02 FB | 	rdlong	local02, fp
0a51c     01 00 00 FF 
0a520     28 4E 85 F1 | 	sub	fp, ##552
0a524     01 20 06 F1 | 	add	local02, #1
0a528                 | LR__0863
0a528     01 00 00 FF 
0a52c     0C 4E 05 F1 | 	add	fp, ##524
0a530     A7 1E 02 FB | 	rdlong	local01, fp
0a534     01 00 00 FF 
0a538     0C 4E 85 F1 | 	sub	fp, ##524
0a53c     10 1F 52 F2 | 	cmps	local01, local02 wc
0a540     64 00 90 3D |  if_ae	jmp	#LR__0864
0a544     01 00 00 FF 
0a548     B4 4E 05 F1 | 	add	fp, ##692
0a54c     A7 1E 02 FB | 	rdlong	local01, fp
0a550     A8 4E 85 F1 | 	sub	fp, #168
0a554     A7 16 02 FB | 	rdlong	arg03, fp
0a558     01 16 86 F1 | 	sub	arg03, #1
0a55c     28 4E 05 F1 | 	add	fp, #40
0a560     A7 16 02 F1 | 	add	arg03, fp
0a564     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a568     01 00 00 FF 
0a56c     34 4E 85 F1 | 	sub	fp, ##564
0a570     30 08 B1 FD | 	call	#__system__Chr_S
0a574     FD 14 02 F6 | 	mov	arg02, result1
0a578     0F 13 02 F6 | 	mov	arg01, local01
0a57c     B0 E6 B0 FD | 	call	#__system___string_concat
0a580     01 00 00 FF 
0a584     B4 4E 05 F1 | 	add	fp, ##692
0a588     A7 FA 61 FC | 	wrlong	result1, fp
0a58c     A8 4E 85 F1 | 	sub	fp, #168
0a590     A7 1E 02 FB | 	rdlong	local01, fp
0a594     01 1E 06 F1 | 	add	local01, #1
0a598     A7 1E 62 FC | 	wrlong	local01, fp
0a59c     01 00 00 FF 
0a5a0     0C 4E 85 F1 | 	sub	fp, ##524
0a5a4     80 FF 9F FD | 	jmp	#LR__0863
0a5a8                 | LR__0864
0a5a8                 | '  '   put #9,i,header(3),1 : i+=4
0a5a8                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a5a8                 | '      print #9, saveline$
0a5a8     09 12 06 F6 | 	mov	arg01, #9
0a5ac     24 3F B1 FD | 	call	#__system___getiolock_0417
0a5b0     FD 12 02 F6 | 	mov	arg01, result1
0a5b4     1C E6 B0 FD | 	call	#__system___lockmem
0a5b8     01 00 00 FF 
0a5bc     B4 4E 05 F1 | 	add	fp, ##692
0a5c0     A7 14 02 FB | 	rdlong	arg02, fp
0a5c4     01 00 00 FF 
0a5c8     B4 4E 85 F1 | 	sub	fp, ##692
0a5cc     09 12 06 F6 | 	mov	arg01, #9
0a5d0     00 16 06 F6 | 	mov	arg03, #0
0a5d4     EC F2 B0 FD | 	call	#__system___basic_print_string
0a5d8     09 12 06 F6 | 	mov	arg01, #9
0a5dc     0A 14 06 F6 | 	mov	arg02, #10
0a5e0     00 16 06 F6 | 	mov	arg03, #0
0a5e4     84 F2 B0 FD | 	call	#__system___basic_print_char
0a5e8     09 12 06 F6 | 	mov	arg01, #9
0a5ec     E4 3E B1 FD | 	call	#__system___getiolock_0417
0a5f0     FD 00 68 FC | 	wrlong	#0, result1
0a5f4     01 00 00 FF 
0a5f8     30 4E 05 F1 | 	add	fp, ##560
0a5fc     A7 1E 02 FB | 	rdlong	local01, fp
0a600     18 4E 85 F1 | 	sub	fp, #24
0a604     A7 1E 62 FC | 	wrlong	local01, fp
0a608     18 4E 05 F1 | 	add	fp, #24
0a60c     A7 1E 02 FB | 	rdlong	local01, fp
0a610     01 00 00 FF 
0a614     30 4E 85 F1 | 	sub	fp, ##560
0a618     FF FF 3F FF 
0a61c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a620     78 FE 9F 5D |  if_ne	jmp	#LR__0862
0a624                 | '   close #9  
0a624     09 12 06 F6 | 	mov	arg01, #9
0a628     D8 34 B1 FD | 	call	#__system__close
0a62c                 | LR__0865
0a62c                 | LR__0866
0a62c     A7 F0 03 F6 | 	mov	ptra, fp
0a630     B2 00 A0 FD | 	call	#popregs_
0a634                 | _do_save_ret
0a634     2D 00 64 FD | 	ret
0a638                 | 
0a638                 | ' 
0a638                 | ' '----------------- Load the program
0a638                 | ' 'lo todo: errors while loading
0a638                 | ' sub do_load
0a638                 | _do_load
0a638     01 4A 05 F6 | 	mov	COUNT_, #1
0a63c     A8 00 A0 FD | 	call	#pushregs_
0a640     A4 F0 07 F1 | 	add	ptra, #164
0a644     A0 4E 05 F1 | 	add	fp, #160
0a648     A7 12 02 F6 | 	mov	arg01, fp
0a64c     80 4E 85 F1 | 	sub	fp, #128
0a650     A7 14 02 F6 | 	mov	arg02, fp
0a654     20 4E 85 F1 | 	sub	fp, #32
0a658     09 15 62 FC | 	wrlong	arg02, arg01
0a65c     DC F1 BF FD | 	call	#_pop
0a660     FF 1A 02 F6 | 	mov	arg05, result3
0a664     A7 FA 61 FC | 	wrlong	result1, fp
0a668     04 4E 05 F1 | 	add	fp, #4
0a66c     A7 FC 61 FC | 	wrlong	result2, fp
0a670     04 4E 05 F1 | 	add	fp, #4
0a674     A7 1A 62 FC | 	wrlong	arg05, fp
0a678                 | ' 
0a678                 | ' lpoke varptr(line2$),varptr(line2)
0a678                 | ' t1=pop() 
0a678                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a678                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a678     08 4E 85 F1 | 	sub	fp, #8
0a67c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a680     18 00 90 5D |  if_ne	jmp	#LR__0870
0a684     A7 12 02 FB | 	rdlong	arg01, fp
0a688     B8 22 B0 FD | 	call	#_convertstring
0a68c     A7 FA 61 FC | 	wrlong	result1, fp
0a690     08 4E 05 F1 | 	add	fp, #8
0a694     A7 3E 68 FC | 	wrlong	#31, fp
0a698     08 4E 85 F1 | 	sub	fp, #8
0a69c                 | LR__0870
0a69c                 | ' if t1.result_type=result_string then
0a69c     08 4E 05 F1 | 	add	fp, #8
0a6a0     A7 1E 02 FB | 	rdlong	local01, fp
0a6a4     08 4E 85 F1 | 	sub	fp, #8
0a6a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a6ac     40 03 90 5D |  if_ne	jmp	#LR__0877
0a6b0     2C 1D B0 FD | 	call	#_do_new
0a6b4                 | '   do_new
0a6b4                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a6b4     A7 12 02 FB | 	rdlong	arg01, fp
0a6b8     42 01 00 FF 
0a6bc     B9 15 06 F6 | 	mov	arg02, ##@LR__4597
0a6c0     38 E5 B0 FD | 	call	#__system___string_cmp
0a6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6c8     42 01 00 AF 
0a6cc     BA 1F 06 A6 |  if_e	mov	local01, ##@LR__4598
0a6d0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a6d4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a6d4     09 12 06 F6 | 	mov	arg01, #9
0a6d8     28 34 B1 FD | 	call	#__system__close
0a6dc     09 1E 06 F6 | 	mov	local01, #9
0a6e0     71 00 00 FF 
0a6e4     68 E4 05 F1 | 	add	objptr, ##57960
0a6e8     F2 12 02 FB | 	rdlong	arg01, objptr
0a6ec     71 00 00 FF 
0a6f0     68 E4 85 F1 | 	sub	objptr, ##57960
0a6f4     42 01 00 FF 
0a6f8     C5 15 06 F6 | 	mov	arg02, ##@LR__4599
0a6fc     30 E5 B0 FD | 	call	#__system___string_concat
0a700     FD 12 02 F6 | 	mov	arg01, result1
0a704     A7 14 02 FB | 	rdlong	arg02, fp
0a708     24 E5 B0 FD | 	call	#__system___string_concat
0a70c     FD 14 02 F6 | 	mov	arg02, result1
0a710     0F 13 02 F6 | 	mov	arg01, local01
0a714     00 16 06 F6 | 	mov	arg03, #0
0a718     B8 F0 B0 FD | 	call	#__system___basic_open_string
0a71c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a720     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a724     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a728     10 4E 05 F1 | 	add	fp, #16
0a72c     A7 FA 61 FC | 	wrlong	result1, fp
0a730                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a730     10 4E 85 F1 | 	sub	fp, #16
0a734     9C 00 90 AD |  if_e	jmp	#LR__0871
0a738     00 12 06 F6 | 	mov	arg01, #0
0a73c     94 3D B1 FD | 	call	#__system___getiolock_0417
0a740     FD 12 02 F6 | 	mov	arg01, result1
0a744     8C E4 B0 FD | 	call	#__system___lockmem
0a748     42 01 00 FF 
0a74c     C7 15 06 F6 | 	mov	arg02, ##@LR__4600
0a750     00 12 06 F6 | 	mov	arg01, #0
0a754     00 16 06 F6 | 	mov	arg03, #0
0a758     68 F1 B0 FD | 	call	#__system___basic_print_string
0a75c     10 4E 05 F1 | 	add	fp, #16
0a760     A7 14 02 FB | 	rdlong	arg02, fp
0a764     10 4E 85 F1 | 	sub	fp, #16
0a768     00 12 06 F6 | 	mov	arg01, #0
0a76c     00 16 06 F6 | 	mov	arg03, #0
0a770     0A 18 06 F6 | 	mov	arg04, #10
0a774     90 F1 B0 FD | 	call	#__system___basic_print_integer
0a778     42 01 00 FF 
0a77c     D5 15 06 F6 | 	mov	arg02, ##@LR__4601
0a780     00 12 06 F6 | 	mov	arg01, #0
0a784     00 16 06 F6 | 	mov	arg03, #0
0a788     38 F1 B0 FD | 	call	#__system___basic_print_string
0a78c     10 4E 05 F1 | 	add	fp, #16
0a790     A7 12 02 FB | 	rdlong	arg01, fp
0a794     10 4E 85 F1 | 	sub	fp, #16
0a798     34 0A B1 FD | 	call	#__system___strerror
0a79c     FD 14 02 F6 | 	mov	arg02, result1
0a7a0     00 12 06 F6 | 	mov	arg01, #0
0a7a4     00 16 06 F6 | 	mov	arg03, #0
0a7a8     18 F1 B0 FD | 	call	#__system___basic_print_string
0a7ac     00 12 06 F6 | 	mov	arg01, #0
0a7b0     0A 14 06 F6 | 	mov	arg02, #10
0a7b4     00 16 06 F6 | 	mov	arg03, #0
0a7b8     B0 F0 B0 FD | 	call	#__system___basic_print_char
0a7bc     00 12 06 F6 | 	mov	arg01, #0
0a7c0     10 3D B1 FD | 	call	#__system___getiolock_0417
0a7c4     FD 00 68 FC | 	wrlong	#0, result1
0a7c8     09 12 06 F6 | 	mov	arg01, #9
0a7cc     34 33 B1 FD | 	call	#__system__close
0a7d0     24 02 90 FD | 	jmp	#LR__0879
0a7d4                 | LR__0871
0a7d4     0C 4E 05 F1 | 	add	fp, #12
0a7d8     A7 0A 68 FC | 	wrlong	#5, fp
0a7dc                 | '   i=5
0a7dc                 | '   get #9,1,header,1
0a7dc     0C 4E 05 F1 | 	add	fp, #12
0a7e0     A7 16 02 F6 | 	mov	arg03, fp
0a7e4     18 4E 85 F1 | 	sub	fp, #24
0a7e8     09 12 06 F6 | 	mov	arg01, #9
0a7ec     01 14 06 F6 | 	mov	arg02, #1
0a7f0     01 18 06 F6 | 	mov	arg04, #1
0a7f4     04 1A 06 F6 | 	mov	arg05, #4
0a7f8     D8 F1 B0 FD | 	call	#__system___basic_get
0a7fc                 | '   
0a7fc                 | '   if header<>$0D616272 then 
0a7fc     18 4E 05 F1 | 	add	fp, #24
0a800     A7 1E 02 FB | 	rdlong	local01, fp
0a804     18 4E 85 F1 | 	sub	fp, #24
0a808     B1 B0 06 FF 
0a80c     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a810     F0 00 90 AD |  if_e	jmp	#LR__0874
0a814                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a814     09 12 06 F6 | 	mov	arg01, #9
0a818     E8 32 B1 FD | 	call	#__system__close
0a81c     09 1E 06 F6 | 	mov	local01, #9
0a820     71 00 00 FF 
0a824     68 E4 05 F1 | 	add	objptr, ##57960
0a828     F2 12 02 FB | 	rdlong	arg01, objptr
0a82c     71 00 00 FF 
0a830     68 E4 85 F1 | 	sub	objptr, ##57960
0a834     42 01 00 FF 
0a838     D8 15 06 F6 | 	mov	arg02, ##@LR__4602
0a83c     F0 E3 B0 FD | 	call	#__system___string_concat
0a840     FD 12 02 F6 | 	mov	arg01, result1
0a844     A7 14 02 FB | 	rdlong	arg02, fp
0a848     E4 E3 B0 FD | 	call	#__system___string_concat
0a84c     FD 14 02 F6 | 	mov	arg02, result1
0a850     0F 13 02 F6 | 	mov	arg01, local01
0a854     00 16 06 F6 | 	mov	arg03, #0
0a858     78 EF B0 FD | 	call	#__system___basic_open_string
0a85c                 | '     do
0a85c                 | LR__0872
0a85c     09 12 06 F6 | 	mov	arg01, #9
0a860     7C E5 B0 FD | 	call	#__system___basic_read_line
0a864     55 00 00 FF 
0a868     F0 E5 05 F1 | 	add	objptr, ##44016
0a86c     F2 FA 61 FC | 	wrlong	result1, objptr
0a870                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a870     55 00 00 FF 
0a874     F0 E5 85 F1 | 	sub	objptr, ##44016
0a878     FD 12 02 F6 | 	mov	arg01, result1
0a87c     01 14 06 F6 | 	mov	arg02, #1
0a880     5C 03 B1 FD | 	call	#__system__Left_S
0a884     FD 12 02 F6 | 	mov	arg01, result1
0a888     42 01 00 FF 
0a88c     DA 15 06 F6 | 	mov	arg02, ##@LR__4603
0a890     68 E3 B0 FD | 	call	#__system___string_cmp
0a894     00 FA 55 F2 | 	cmps	result1, #0 wc
0a898     34 00 90 CD |  if_b	jmp	#LR__0873
0a89c     55 00 00 FF 
0a8a0     F0 E5 05 F1 | 	add	objptr, ##44016
0a8a4     F2 12 02 FB | 	rdlong	arg01, objptr
0a8a8     55 00 00 FF 
0a8ac     F0 E5 85 F1 | 	sub	objptr, ##44016
0a8b0     01 14 06 F6 | 	mov	arg02, #1
0a8b4     28 03 B1 FD | 	call	#__system__Left_S
0a8b8     FD 12 02 F6 | 	mov	arg01, result1
0a8bc     42 01 00 FF 
0a8c0     DC 15 06 F6 | 	mov	arg02, ##@LR__4604
0a8c4     34 E3 B0 FD | 	call	#__system___string_cmp
0a8c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0a8cc     4C 61 BF CD |  if_b	call	#_interpret
0a8d0                 | LR__0873
0a8d0     55 00 00 FF 
0a8d4     F0 E5 05 F1 | 	add	objptr, ##44016
0a8d8     F2 12 02 FB | 	rdlong	arg01, objptr
0a8dc     55 00 00 FF 
0a8e0     F0 E5 85 F1 | 	sub	objptr, ##44016
0a8e4     42 01 00 FF 
0a8e8     DE 15 06 F6 | 	mov	arg02, ##@LR__4605
0a8ec     0C E3 B0 FD | 	call	#__system___string_cmp
0a8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8f4     64 FF 9F 5D |  if_ne	jmp	#LR__0872
0a8f8                 | '     close #9
0a8f8     09 12 06 F6 | 	mov	arg01, #9
0a8fc     04 32 B1 FD | 	call	#__system__close
0a900     F4 00 90 FD | 	jmp	#LR__0878
0a904                 | LR__0874
0a904                 | '   'printerror(26) : close #9 : return
0a904                 | '     do
0a904                 | LR__0875
0a904                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a904     0C 4E 05 F1 | 	add	fp, #12
0a908     A7 14 02 FB | 	rdlong	arg02, fp
0a90c     10 4E 05 F1 | 	add	fp, #16
0a910     A7 16 02 F6 | 	mov	arg03, fp
0a914     1C 4E 85 F1 | 	sub	fp, #28
0a918     09 12 06 F6 | 	mov	arg01, #9
0a91c     01 18 06 F6 | 	mov	arg04, #1
0a920     04 1A 06 F6 | 	mov	arg05, #4
0a924     AC F0 B0 FD | 	call	#__system___basic_get
0a928     14 4E 05 F1 | 	add	fp, #20
0a92c     A7 FA 61 FC | 	wrlong	result1, fp
0a930     08 4E 85 F1 | 	sub	fp, #8
0a934     A7 1E 02 FB | 	rdlong	local01, fp
0a938     04 1E 06 F1 | 	add	local01, #4
0a93c     A7 1E 62 FC | 	wrlong	local01, fp
0a940     10 4E 05 F1 | 	add	fp, #16
0a944     A7 1E 02 FB | 	rdlong	local01, fp
0a948     04 4E 05 F1 | 	add	fp, #4
0a94c     A7 1E 02 F1 | 	add	local01, fp
0a950     0F 01 48 FC | 	wrbyte	#0, local01
0a954                 | '       if amount=1 then  
0a954     0C 4E 85 F1 | 	sub	fp, #12
0a958     A7 1E 02 FB | 	rdlong	local01, fp
0a95c     14 4E 85 F1 | 	sub	fp, #20
0a960     01 1E 0E F2 | 	cmp	local01, #1 wz
0a964     68 00 90 5D |  if_ne	jmp	#LR__0876
0a968                 | '         get #9,i,line2(0),linelength : i+=linelength
0a968     0C 4E 05 F1 | 	add	fp, #12
0a96c     A7 14 02 FB | 	rdlong	arg02, fp
0a970     14 4E 05 F1 | 	add	fp, #20
0a974     A7 16 02 F6 | 	mov	arg03, fp
0a978     04 4E 85 F1 | 	sub	fp, #4
0a97c     A7 18 02 FB | 	rdlong	arg04, fp
0a980     1C 4E 85 F1 | 	sub	fp, #28
0a984     09 12 06 F6 | 	mov	arg01, #9
0a988     01 1A 06 F6 | 	mov	arg05, #1
0a98c     44 F0 B0 FD | 	call	#__system___basic_get
0a990     0C 4E 05 F1 | 	add	fp, #12
0a994     A7 1E 02 FB | 	rdlong	local01, fp
0a998     10 4E 05 F1 | 	add	fp, #16
0a99c     A7 1A 02 FB | 	rdlong	arg05, fp
0a9a0     0D 1F 02 F1 | 	add	local01, arg05
0a9a4     10 4E 85 F1 | 	sub	fp, #16
0a9a8     A7 1E 62 FC | 	wrlong	local01, fp
0a9ac     94 4E 05 F1 | 	add	fp, #148
0a9b0     A7 1E 02 FB | 	rdlong	local01, fp
0a9b4     A0 4E 85 F1 | 	sub	fp, #160
0a9b8     55 00 00 FF 
0a9bc     F0 E5 05 F1 | 	add	objptr, ##44016
0a9c0     F2 1E 62 FC | 	wrlong	local01, objptr
0a9c4     55 00 00 FF 
0a9c8     F0 E5 85 F1 | 	sub	objptr, ##44016
0a9cc     4C 60 BF FD | 	call	#_interpret
0a9d0                 | LR__0876
0a9d0     14 4E 05 F1 | 	add	fp, #20
0a9d4     A7 1E 02 FB | 	rdlong	local01, fp
0a9d8     14 4E 85 F1 | 	sub	fp, #20
0a9dc     01 1E 56 F2 | 	cmps	local01, #1 wc
0a9e0     20 FF 9F 3D |  if_ae	jmp	#LR__0875
0a9e4                 | '     close #9 
0a9e4     09 12 06 F6 | 	mov	arg01, #9
0a9e8     18 31 B1 FD | 	call	#__system__close
0a9ec     08 00 90 FD | 	jmp	#LR__0878
0a9f0                 | LR__0877
0a9f0     1E 12 06 F6 | 	mov	arg01, #30
0a9f4     B8 AC B0 FD | 	call	#_printerror
0a9f8                 | LR__0878
0a9f8                 | LR__0879
0a9f8     A7 F0 03 F6 | 	mov	ptra, fp
0a9fc     B2 00 A0 FD | 	call	#popregs_
0aa00                 | _do_load_ret
0aa00     2D 00 64 FD | 	ret
0aa04                 | 
0aa04                 | ' 
0aa04                 | ' '----------------- Run the program 
0aa04                 | ' 
0aa04                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0aa04                 | ' 
0aa04                 | ' sub do_run
0aa04                 | _do_run
0aa04     01 4A 05 F6 | 	mov	COUNT_, #1
0aa08     A8 00 A0 FD | 	call	#pushregs_
0aa0c     69 00 00 FF 
0aa10     58 E4 05 F1 | 	add	objptr, ##53848
0aa14     F2 1C 02 FB | 	rdlong	arg06, objptr
0aa18     0F 00 00 FF 
0aa1c     2C E5 05 F1 | 	add	objptr, ##7980
0aa20     F2 1C 62 FC | 	wrlong	arg06, objptr
0aa24     04 E4 05 F1 | 	add	objptr, #4
0aa28     F2 00 68 FC | 	wrlong	#0, objptr
0aa2c     04 E4 05 F1 | 	add	objptr, #4
0aa30     FF FF FF FF 
0aa34     F2 FE 6B FC | 	wrlong	##-1, objptr
0aa38                 | ' if inrun>0 then 
0aa38     04 E4 05 F1 | 	add	objptr, #4
0aa3c     F2 1C 02 FB | 	rdlong	arg06, objptr
0aa40     78 00 00 FF 
0aa44     90 E5 85 F1 | 	sub	objptr, ##61840
0aa48     01 1C 16 F2 | 	cmp	arg06, #1 wc
0aa4c     30 00 90 CD |  if_b	jmp	#LR__0880
0aa50     78 00 00 FF 
0aa54     94 E5 05 F1 | 	add	objptr, ##61844
0aa58     F2 12 02 F6 | 	mov	arg01, objptr
0aa5c     10 E4 85 F1 | 	sub	objptr, #16
0aa60     F2 14 02 FB | 	rdlong	arg02, objptr
0aa64     18 16 06 F6 | 	mov	arg03, #24
0aa68     6D 00 00 FF 
0aa6c     C4 E4 85 F1 | 	sub	objptr, ##56004
0aa70     70 D6 B0 FD | 	call	#_psram_spin2_read1
0aa74     0B 00 00 FF 
0aa78     C0 E4 85 F1 | 	sub	objptr, ##5824
0aa7c                 | '   psram.read1(varptr(runheader),runptr,24)  
0aa7c                 | '   return
0aa7c     9C 02 90 FD | 	jmp	#LR__0886
0aa80                 | LR__0880
0aa80     78 00 00 FF 
0aa84     90 E5 05 F1 | 	add	objptr, ##61840
0aa88     F2 02 68 FC | 	wrlong	#1, objptr
0aa8c     04 E4 05 F1 | 	add	objptr, #4
0aa90     F2 12 02 F6 | 	mov	arg01, objptr
0aa94     10 E4 85 F1 | 	sub	objptr, #16
0aa98     F2 14 02 FB | 	rdlong	arg02, objptr
0aa9c     18 16 06 F6 | 	mov	arg03, #24
0aaa0     6D 00 00 FF 
0aaa4     C4 E4 85 F1 | 	sub	objptr, ##56004
0aaa8     38 D6 B0 FD | 	call	#_psram_spin2_read1
0aaac                 | ' inrun=1
0aaac                 | ' psram.read1(varptr(runheader),runptr,24) 
0aaac                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0aaac     6D 00 00 FF 
0aab0     D4 E4 05 F1 | 	add	objptr, ##56020
0aab4     F2 1E 02 FB | 	rdlong	local01, objptr
0aab8     78 00 00 FF 
0aabc     94 E5 85 F1 | 	sub	objptr, ##61844
0aac0     FF FF 7F FF 
0aac4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0aac8     78 00 00 AF 
0aacc     90 E5 05 A1 |  if_e	add	objptr, ##61840
0aad0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0aad4     78 00 00 AF 
0aad8     90 E5 85 A1 |  if_e	sub	objptr, ##61840
0aadc     3C 02 90 AD |  if_e	jmp	#LR__0886
0aae0                 | ' do 
0aae0                 | LR__0881
0aae0                 | '   if runptr<>oldrunptr then
0aae0     78 00 00 FF 
0aae4     84 E5 05 F1 | 	add	objptr, ##61828
0aae8     F2 1E 02 FB | 	rdlong	local01, objptr
0aaec     08 E4 05 F1 | 	add	objptr, #8
0aaf0     F2 1C 02 FB | 	rdlong	arg06, objptr
0aaf4     78 00 00 FF 
0aaf8     8C E5 85 F1 | 	sub	objptr, ##61836
0aafc     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0ab00     CC 00 90 AD |  if_e	jmp	#LR__0882
0ab04     78 00 00 FF 
0ab08     94 E5 05 F1 | 	add	objptr, ##61844
0ab0c     F2 12 02 F6 | 	mov	arg01, objptr
0ab10     10 E4 85 F1 | 	sub	objptr, #16
0ab14     F2 14 02 FB | 	rdlong	arg02, objptr
0ab18     18 16 06 F6 | 	mov	arg03, #24
0ab1c     6D 00 00 FF 
0ab20     C4 E4 85 F1 | 	sub	objptr, ##56004
0ab24     BC D5 B0 FD | 	call	#_psram_spin2_read1
0ab28     5A 00 00 FF 
0ab2c     90 E5 05 F1 | 	add	objptr, ##46480
0ab30     F2 12 02 F6 | 	mov	arg01, objptr
0ab34     12 00 00 FF 
0ab38     34 E5 05 F1 | 	add	objptr, ##9524
0ab3c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab40     14 00 00 FF 
0ab44     4C E5 85 F1 | 	sub	objptr, ##10572
0ab48     F2 1E 02 FB | 	rdlong	local01, objptr
0ab4c     01 1E 66 F0 | 	shl	local01, #1
0ab50     0F 15 02 F1 | 	add	arg02, local01
0ab54     14 00 00 FF 
0ab58     64 E5 05 F1 | 	add	objptr, ##10596
0ab5c     F2 16 02 FB | 	rdlong	arg03, objptr
0ab60     18 E4 85 F1 | 	sub	objptr, #24
0ab64     F2 1E 02 FB | 	rdlong	local01, objptr
0ab68     0F 17 82 F1 | 	sub	arg03, local01
0ab6c     6D 00 00 FF 
0ab70     C4 E4 85 F1 | 	sub	objptr, ##56004
0ab74     6C D5 B0 FD | 	call	#_psram_spin2_read1
0ab78     6D 00 00 FF 
0ab7c     DC E4 05 F1 | 	add	objptr, ##56028
0ab80     F2 1E 02 FB | 	rdlong	local01, objptr
0ab84     18 E4 85 F1 | 	sub	objptr, #24
0ab88     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab8c     0E 1F 82 F1 | 	sub	local01, arg06
0ab90     14 00 00 FF 
0ab94     4C E5 85 F1 | 	sub	objptr, ##10572
0ab98     F2 1C 02 FB | 	rdlong	arg06, objptr
0ab9c     0E 1F 12 FD | 	qdiv	local01, arg06
0aba0     05 00 00 FF 
0aba4     18 E4 05 F1 | 	add	objptr, ##2584
0aba8     18 1E 62 FD | 	getqx	local01
0abac     03 1E 86 F1 | 	sub	local01, #3
0abb0     F2 1E 62 FC | 	wrlong	local01, objptr
0abb4     0F 00 00 FF 
0abb8     34 E5 05 F1 | 	add	objptr, ##7988
0abbc     F2 1E 02 FB | 	rdlong	local01, objptr
0abc0     08 E4 05 F1 | 	add	objptr, #8
0abc4     F2 1E 62 FC | 	wrlong	local01, objptr
0abc8     78 00 00 FF 
0abcc     8C E5 85 F1 | 	sub	objptr, ##61836
0abd0                 | LR__0882
0abd0     78 00 00 FF 
0abd4     A8 E5 05 F1 | 	add	objptr, ##61864
0abd8     F2 1E 02 FB | 	rdlong	local01, objptr
0abdc     24 E4 85 F1 | 	sub	objptr, #36
0abe0     F2 1E 62 FC | 	wrlong	local01, objptr
0abe4     04 E4 05 F1 | 	add	objptr, #4
0abe8     F2 12 02 FB | 	rdlong	arg01, objptr
0abec     78 00 00 FF 
0abf0     88 E5 85 F1 | 	sub	objptr, ##61832
0abf4     40 EB BF FD | 	call	#_execute_line
0abf8     78 00 00 FF 
0abfc     88 E5 05 F1 | 	add	objptr, ##61832
0ac00     F2 FA 61 FC | 	wrlong	result1, objptr
0ac04     04 E4 85 F1 | 	sub	objptr, #4
0ac08     F2 1E 02 FB | 	rdlong	local01, objptr
0ac0c     78 00 00 FF 
0ac10     84 E5 85 F1 | 	sub	objptr, ##61828
0ac14     FF FF 3F FF 
0ac18     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ac1c     0C 00 90 AD |  if_e	jmp	#LR__0883
0ac20     50 D8 B0 FD | 	call	#_usbnew_spin2_get_key
0ac24     06 FB 0D F2 | 	cmp	result1, #262 wz
0ac28     B4 FE 9F 5D |  if_ne	jmp	#LR__0881
0ac2c                 | LR__0883
0ac2c                 | ' if runheader(5)<>$7FFF_FFFF then 
0ac2c     78 00 00 FF 
0ac30     A8 E5 05 F1 | 	add	objptr, ##61864
0ac34     F2 1E 02 FB | 	rdlong	local01, objptr
0ac38     78 00 00 FF 
0ac3c     A8 E5 85 F1 | 	sub	objptr, ##61864
0ac40     FF FF 3F FF 
0ac44     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ac48     BC 00 90 AD |  if_e	jmp	#LR__0885
0ac4c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0ac4c     78 00 00 FF 
0ac50     B4 E5 05 F1 | 	add	objptr, ##61876
0ac54     F2 1E 02 FB | 	rdlong	local01, objptr
0ac58     78 00 00 FF 
0ac5c     B4 E5 85 F1 | 	sub	objptr, ##61876
0ac60     01 1E 0E F2 | 	cmp	local01, #1 wz
0ac64     3C 00 90 5D |  if_ne	jmp	#LR__0884
0ac68     7A 00 00 FF 
0ac6c     58 E4 05 F1 | 	add	objptr, ##62552
0ac70     F2 14 02 FB | 	rdlong	arg02, objptr
0ac74     04 E4 85 F1 | 	sub	objptr, #4
0ac78     F2 1A 02 FB | 	rdlong	arg05, objptr
0ac7c     07 12 06 F6 | 	mov	arg01, #7
0ac80     56 00 00 FF 
0ac84     44 16 06 F6 | 	mov	arg03, ##44100
0ac88     0E 18 C6 F9 | 	decod	arg04, #14
0ac8c     01 1C 66 F6 | 	neg	arg06, #1
0ac90     6E 00 00 FF 
0ac94     94 E5 85 F1 | 	sub	objptr, ##56724
0ac98     00 DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0ac9c     0B 00 00 FF 
0aca0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aca4                 | LR__0884
0aca4                 | '   print "Stopped at line ";runheader(0)
0aca4     00 12 06 F6 | 	mov	arg01, #0
0aca8     28 38 B1 FD | 	call	#__system___getiolock_0417
0acac     FD 12 02 F6 | 	mov	arg01, result1
0acb0     20 DF B0 FD | 	call	#__system___lockmem
0acb4     42 01 00 FF 
0acb8     DF 15 06 F6 | 	mov	arg02, ##@LR__4606
0acbc     00 12 06 F6 | 	mov	arg01, #0
0acc0     00 16 06 F6 | 	mov	arg03, #0
0acc4     FC EB B0 FD | 	call	#__system___basic_print_string
0acc8     78 00 00 FF 
0accc     94 E5 05 F1 | 	add	objptr, ##61844
0acd0     F2 14 02 FB | 	rdlong	arg02, objptr
0acd4     78 00 00 FF 
0acd8     94 E5 85 F1 | 	sub	objptr, ##61844
0acdc     00 12 06 F6 | 	mov	arg01, #0
0ace0     00 16 06 F6 | 	mov	arg03, #0
0ace4     0A 18 06 F6 | 	mov	arg04, #10
0ace8     5C EC B0 FD | 	call	#__system___basic_print_unsigned
0acec     00 12 06 F6 | 	mov	arg01, #0
0acf0     0A 14 06 F6 | 	mov	arg02, #10
0acf4     00 16 06 F6 | 	mov	arg03, #0
0acf8     70 EB B0 FD | 	call	#__system___basic_print_char
0acfc     00 12 06 F6 | 	mov	arg01, #0
0ad00     D0 37 B1 FD | 	call	#__system___getiolock_0417
0ad04     FD 00 68 FC | 	wrlong	#0, result1
0ad08                 | LR__0885
0ad08     78 00 00 FF 
0ad0c     90 E5 05 F1 | 	add	objptr, ##61840
0ad10     F2 00 68 FC | 	wrlong	#0, objptr
0ad14     78 00 00 FF 
0ad18     90 E5 85 F1 | 	sub	objptr, ##61840
0ad1c                 | LR__0886
0ad1c     A7 F0 03 F6 | 	mov	ptra, fp
0ad20     B2 00 A0 FD | 	call	#popregs_
0ad24                 | _do_run_ret
0ad24     2D 00 64 FD | 	ret
0ad28                 | 
0ad28                 | ' 
0ad28                 | ' sub do_defenv
0ad28                 | _do_defenv
0ad28     05 4A 05 F6 | 	mov	COUNT_, #5
0ad2c     A8 00 A0 FD | 	call	#pushregs_
0ad30     84 F0 07 F1 | 	add	ptra, #132
0ad34     69 00 00 FF 
0ad38     54 E4 05 F1 | 	add	objptr, ##53844
0ad3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0ad40     0D 19 02 F6 | 	mov	arg04, arg05
0ad44     01 18 66 F0 | 	shl	arg04, #1
0ad48     0D 19 02 F1 | 	add	arg04, arg05
0ad4c     02 18 66 F0 | 	shl	arg04, #2
0ad50     03 00 00 FF 
0ad54     04 E4 85 F1 | 	sub	objptr, ##1540
0ad58     F2 18 02 F1 | 	add	arg04, objptr
0ad5c     0C 1B 02 FB | 	rdlong	arg05, arg04
0ad60     A7 1A 62 FC | 	wrlong	arg05, fp
0ad64                 | ' 
0ad64                 | ' numpar=compiledline(lineptr_e).result.uresult
0ad64                 | ' 
0ad64                 | ' 
0ad64                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ad64                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ad64                 | ' ' Every 5 ms added 
0ad64                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0ad64                 | ' 
0ad64                 | ' 
0ad64                 | ' if numpar<2 then return
0ad64     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ad68     66 00 00 FF 
0ad6c     50 E4 85 F1 | 	sub	objptr, ##52304
0ad70     40 0A 90 CD |  if_b	jmp	#LR__0917
0ad74                 | ' 
0ad74                 | '  
0ad74                 | ' if numpar=2 then
0ad74     A7 1A 02 FB | 	rdlong	arg05, fp
0ad78     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ad7c     AC 04 90 5D |  if_ne	jmp	#LR__0900
0ad80     B8 EA BF FD | 	call	#_pop
0ad84     FF 1A 02 F6 | 	mov	arg05, result3
0ad88     28 4E 05 F1 | 	add	fp, #40
0ad8c     A7 FA 61 FC | 	wrlong	result1, fp
0ad90     04 4E 05 F1 | 	add	fp, #4
0ad94     A7 FC 61 FC | 	wrlong	result2, fp
0ad98     04 4E 05 F1 | 	add	fp, #4
0ad9c     A7 1A 62 FC | 	wrlong	arg05, fp
0ada0                 | '   t1=pop()
0ada0                 | '   if t1.result_type=result_string2 then 
0ada0     30 4E 85 F1 | 	sub	fp, #48
0ada4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ada8     20 00 90 5D |  if_ne	jmp	#LR__0890
0adac     28 4E 05 F1 | 	add	fp, #40
0adb0     A7 12 02 FB | 	rdlong	arg01, fp
0adb4     28 4E 85 F1 | 	sub	fp, #40
0adb8     88 1B B0 FD | 	call	#_convertstring
0adbc     34 4E 05 F1 | 	add	fp, #52
0adc0     A7 FA 61 FC | 	wrlong	result1, fp
0adc4     34 4E 85 F1 | 	sub	fp, #52
0adc8     40 00 90 FD | 	jmp	#LR__0893
0adcc                 | LR__0890
0adcc     30 4E 05 F1 | 	add	fp, #48
0add0     A7 1A 02 FB | 	rdlong	arg05, fp
0add4     30 4E 85 F1 | 	sub	fp, #48
0add8     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0addc     18 00 90 5D |  if_ne	jmp	#LR__0891
0ade0     28 4E 05 F1 | 	add	fp, #40
0ade4     A7 1A 02 FB | 	rdlong	arg05, fp
0ade8     0C 4E 05 F1 | 	add	fp, #12
0adec     A7 1A 62 FC | 	wrlong	arg05, fp
0adf0     34 4E 85 F1 | 	sub	fp, #52
0adf4     14 00 90 FD | 	jmp	#LR__0892
0adf8                 | LR__0891
0adf8     42 01 00 FF 
0adfc     F0 1B 06 F6 | 	mov	arg05, ##@LR__4607
0ae00     34 4E 05 F1 | 	add	fp, #52
0ae04     A7 1A 62 FC | 	wrlong	arg05, fp
0ae08     34 4E 85 F1 | 	sub	fp, #52
0ae0c                 | LR__0892
0ae0c                 | LR__0893
0ae0c                 | ' 
0ae0c                 | '     
0ae0c                 | '   if s<>"" then 
0ae0c     34 4E 05 F1 | 	add	fp, #52
0ae10     A7 12 02 FB | 	rdlong	arg01, fp
0ae14     34 4E 85 F1 | 	sub	fp, #52
0ae18     42 01 00 FF 
0ae1c     F1 15 06 F6 | 	mov	arg02, ##@LR__4608
0ae20     D8 DD B0 FD | 	call	#__system___string_cmp
0ae24     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae28     9C 02 90 AD |  if_e	jmp	#LR__0898
0ae2c     0C EA BF FD | 	call	#_pop
0ae30     FF 1A 02 F6 | 	mov	arg05, result3
0ae34     28 4E 05 F1 | 	add	fp, #40
0ae38     A7 FA 61 FC | 	wrlong	result1, fp
0ae3c     04 4E 05 F1 | 	add	fp, #4
0ae40     A7 FC 61 FC | 	wrlong	result2, fp
0ae44     04 4E 05 F1 | 	add	fp, #4
0ae48     A7 1A 62 FC | 	wrlong	arg05, fp
0ae4c     08 4E 85 F1 | 	sub	fp, #8
0ae50     A7 12 02 F6 | 	mov	arg01, fp
0ae54     28 4E 85 F1 | 	sub	fp, #40
0ae58     70 5E B0 FD | 	call	#_converttoint
0ae5c     10 4E 05 F1 | 	add	fp, #16
0ae60     A7 FA 61 FC | 	wrlong	result1, fp
0ae64     10 4E 85 F1 | 	sub	fp, #16
0ae68                 | '     t1=pop()
0ae68                 | '     channel=converttoint(t1) 
0ae68                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0ae68     09 12 06 F6 | 	mov	arg01, #9
0ae6c     94 2C B1 FD | 	call	#__system__close
0ae70     09 1E 06 F6 | 	mov	local01, #9
0ae74     42 01 00 FF 
0ae78     F2 13 06 F6 | 	mov	arg01, ##@LR__4609
0ae7c     34 4E 05 F1 | 	add	fp, #52
0ae80     A7 14 02 FB | 	rdlong	arg02, fp
0ae84     34 4E 85 F1 | 	sub	fp, #52
0ae88     A4 DD B0 FD | 	call	#__system___string_concat
0ae8c     FD 14 02 F6 | 	mov	arg02, result1
0ae90     0F 13 02 F6 | 	mov	arg01, local01
0ae94     00 16 06 F6 | 	mov	arg03, #0
0ae98     38 E9 B0 FD | 	call	#__system___basic_open_string
0ae9c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0aea0     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0aea4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0aea8     7A 00 00 FF 
0aeac     CC E4 05 F1 | 	add	objptr, ##62668
0aeb0     F2 FA 61 FC | 	wrlong	result1, objptr
0aeb4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0aeb4     7A 00 00 FF 
0aeb8     CC E4 85 F1 | 	sub	objptr, ##62668
0aebc     B0 00 90 AD |  if_e	jmp	#LR__0894
0aec0     00 12 06 F6 | 	mov	arg01, #0
0aec4     0C 36 B1 FD | 	call	#__system___getiolock_0417
0aec8     FD 12 02 F6 | 	mov	arg01, result1
0aecc     04 DD B0 FD | 	call	#__system___lockmem
0aed0     42 01 00 FF 
0aed4     FF 15 06 F6 | 	mov	arg02, ##@LR__4610
0aed8     00 12 06 F6 | 	mov	arg01, #0
0aedc     00 16 06 F6 | 	mov	arg03, #0
0aee0     E0 E9 B0 FD | 	call	#__system___basic_print_string
0aee4     7A 00 00 FF 
0aee8     CC E4 05 F1 | 	add	objptr, ##62668
0aeec     F2 14 02 FB | 	rdlong	arg02, objptr
0aef0     7A 00 00 FF 
0aef4     CC E4 85 F1 | 	sub	objptr, ##62668
0aef8     00 12 06 F6 | 	mov	arg01, #0
0aefc     00 16 06 F6 | 	mov	arg03, #0
0af00     0A 18 06 F6 | 	mov	arg04, #10
0af04     00 EA B0 FD | 	call	#__system___basic_print_integer
0af08     43 01 00 FF 
0af0c     0D 14 06 F6 | 	mov	arg02, ##@LR__4611
0af10     00 12 06 F6 | 	mov	arg01, #0
0af14     00 16 06 F6 | 	mov	arg03, #0
0af18     A8 E9 B0 FD | 	call	#__system___basic_print_string
0af1c     00 1E 06 F6 | 	mov	local01, #0
0af20     7A 00 00 FF 
0af24     CC E4 05 F1 | 	add	objptr, ##62668
0af28     F2 12 02 FB | 	rdlong	arg01, objptr
0af2c     7A 00 00 FF 
0af30     CC E4 85 F1 | 	sub	objptr, ##62668
0af34     98 02 B1 FD | 	call	#__system___strerror
0af38     FD 14 02 F6 | 	mov	arg02, result1
0af3c     0F 13 02 F6 | 	mov	arg01, local01
0af40     00 16 06 F6 | 	mov	arg03, #0
0af44     7C E9 B0 FD | 	call	#__system___basic_print_string
0af48     00 12 06 F6 | 	mov	arg01, #0
0af4c     0A 14 06 F6 | 	mov	arg02, #10
0af50     00 16 06 F6 | 	mov	arg03, #0
0af54     14 E9 B0 FD | 	call	#__system___basic_print_char
0af58     00 12 06 F6 | 	mov	arg01, #0
0af5c     74 35 B1 FD | 	call	#__system___getiolock_0417
0af60     FD 00 68 FC | 	wrlong	#0, result1
0af64     09 12 06 F6 | 	mov	arg01, #9
0af68     98 2B B1 FD | 	call	#__system__close
0af6c     44 08 90 FD | 	jmp	#LR__0917
0af70                 | LR__0894
0af70                 | '     get #9,17,envbuf8(channel,0),256
0af70     10 4E 05 F1 | 	add	fp, #16
0af74     A7 1A 02 FB | 	rdlong	arg05, fp
0af78     10 4E 85 F1 | 	sub	fp, #16
0af7c     0D 17 02 F6 | 	mov	arg03, arg05
0af80     09 16 66 F0 | 	shl	arg03, #9
0af84     0D 17 02 F1 | 	add	arg03, arg05
0af88     2B 00 00 FF 
0af8c     CC E5 05 F1 | 	add	objptr, ##22476
0af90     F2 16 02 F1 | 	add	arg03, objptr
0af94     09 12 06 F6 | 	mov	arg01, #9
0af98     11 14 06 F6 | 	mov	arg02, #17
0af9c     00 19 06 F6 | 	mov	arg04, #256
0afa0     01 1A 06 F6 | 	mov	arg05, #1
0afa4     2B 00 00 FF 
0afa8     CC E5 85 F1 | 	sub	objptr, ##22476
0afac     24 EA B0 FD | 	call	#__system___basic_get
0afb0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0afb0     04 4E 05 F1 | 	add	fp, #4
0afb4     A7 FE 69 FC | 	wrlong	#255, fp
0afb8     04 4E 85 F1 | 	sub	fp, #4
0afbc     2B 00 00 FF 
0afc0     CC E5 05 F1 | 	add	objptr, ##22476
0afc4     97 34 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0afc8                 | LR__0895
0afc8     10 4E 05 F1 | 	add	fp, #16
0afcc     A7 1A 02 FB | 	rdlong	arg05, fp
0afd0     0D 19 02 F6 | 	mov	arg04, arg05
0afd4     08 18 66 F0 | 	shl	arg04, #8
0afd8     0D 19 02 F1 | 	add	arg04, arg05
0afdc     01 18 66 F0 | 	shl	arg04, #1
0afe0     F2 18 02 F1 | 	add	arg04, objptr
0afe4     0C 4E 85 F1 | 	sub	fp, #12
0afe8     A7 16 02 FB | 	rdlong	arg03, fp
0afec     0B 15 02 F6 | 	mov	arg02, arg03
0aff0     01 14 66 F0 | 	shl	arg02, #1
0aff4     0C 15 02 F1 | 	add	arg02, arg04
0aff8     0D 19 02 F6 | 	mov	arg04, arg05
0affc     09 18 66 F0 | 	shl	arg04, #9
0b000     0D 19 02 F1 | 	add	arg04, arg05
0b004     F2 18 02 F1 | 	add	arg04, objptr
0b008     0C 17 02 F1 | 	add	arg03, arg04
0b00c     0B 1B C2 FA | 	rdbyte	arg05, arg03
0b010     00 1B 06 FA | 	mul	arg05, #256
0b014     0A 1B 52 FC | 	wrword	arg05, arg02
0b018     A7 1A 02 FB | 	rdlong	arg05, fp
0b01c     01 1A 86 F1 | 	sub	arg05, #1
0b020     A7 1A 62 FC | 	wrlong	arg05, fp
0b024     04 4E 85 F1 | 	sub	fp, #4
0b028     00 1A 56 F2 | 	cmps	arg05, #0 wc
0b02c     98 FF 9F 3D |  if_ae	jmp	#LR__0895
0b030                 | LR__0896
0b030     2B 00 00 FF 
0b034     CC E5 85 F1 | 	sub	objptr, ##22476
0b038                 | '     close #9
0b038     09 12 06 F6 | 	mov	arg01, #9
0b03c     C4 2A B1 FD | 	call	#__system__close
0b040                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b040     04 4E 05 F1 | 	add	fp, #4
0b044     A7 00 68 FC | 	wrlong	#0, fp
0b048                 | LR__0897
0b048     A7 1E 02 FB | 	rdlong	local01, fp
0b04c     0F 13 02 F6 | 	mov	arg01, local01
0b050     0C 4E 05 F1 | 	add	fp, #12
0b054     A7 1A 02 FB | 	rdlong	arg05, fp
0b058     0D 19 02 F6 | 	mov	arg04, arg05
0b05c     08 18 66 F0 | 	shl	arg04, #8
0b060     0D 19 02 F1 | 	add	arg04, arg05
0b064     01 18 66 F0 | 	shl	arg04, #1
0b068     2B 00 00 FF 
0b06c     CC E5 05 F1 | 	add	objptr, ##22476
0b070     F2 18 02 F1 | 	add	arg04, objptr
0b074     01 1E 66 F0 | 	shl	local01, #1
0b078     0C 1F 02 F1 | 	add	local01, arg04
0b07c     0F 1F E2 FA | 	rdword	local01, local01
0b080     0F 1F 52 F6 | 	abs	local01, local01 wc
0b084     90 1F 16 FD | 	qdiv	local01, #400
0b088     10 4E 85 F1 | 	sub	fp, #16
0b08c     2B 00 00 FF 
0b090     CC E5 85 F1 | 	sub	objptr, ##22476
0b094     20 15 06 F6 | 	mov	arg02, #288
0b098     28 16 06 F6 | 	mov	arg03, #40
0b09c     18 1E 62 FD | 	getqx	local01
0b0a0     0F 15 A2 F3 | 	sumnc	arg02, local01
0b0a4     DC BB B0 FD | 	call	#_hg010b_spin2_putpixel
0b0a8     04 4E 05 F1 | 	add	fp, #4
0b0ac     A7 1E 02 FB | 	rdlong	local01, fp
0b0b0     01 1E 06 F1 | 	add	local01, #1
0b0b4     A7 1E 62 FC | 	wrlong	local01, fp
0b0b8     00 1F 56 F2 | 	cmps	local01, #256 wc
0b0bc     88 FF 9F CD |  if_b	jmp	#LR__0897
0b0c0     04 4E 85 F1 | 	sub	fp, #4
0b0c4                 | '     return
0b0c4     EC 06 90 FD | 	jmp	#LR__0917
0b0c8                 | LR__0898
0b0c8     28 4E 05 F1 | 	add	fp, #40
0b0cc     A7 12 02 F6 | 	mov	arg01, fp
0b0d0     28 4E 85 F1 | 	sub	fp, #40
0b0d4     F4 5B B0 FD | 	call	#_converttoint
0b0d8     FD 1E 02 F6 | 	mov	local01, result1
0b0dc     0C 4E 05 F1 | 	add	fp, #12
0b0e0     A7 1E 62 FC | 	wrlong	local01, fp
0b0e4     0C 4E 85 F1 | 	sub	fp, #12
0b0e8                 | '   
0b0e8                 | '   par=converttoint(t1)  : print par
0b0e8     00 12 06 F6 | 	mov	arg01, #0
0b0ec     E4 33 B1 FD | 	call	#__system___getiolock_0417
0b0f0     FD 12 02 F6 | 	mov	arg01, result1
0b0f4     DC DA B0 FD | 	call	#__system___lockmem
0b0f8     0C 4E 05 F1 | 	add	fp, #12
0b0fc     A7 14 02 FB | 	rdlong	arg02, fp
0b100     0C 4E 85 F1 | 	sub	fp, #12
0b104     00 12 06 F6 | 	mov	arg01, #0
0b108     00 16 06 F6 | 	mov	arg03, #0
0b10c     0A 18 06 F6 | 	mov	arg04, #10
0b110     F4 E7 B0 FD | 	call	#__system___basic_print_integer
0b114     00 12 06 F6 | 	mov	arg01, #0
0b118     0A 14 06 F6 | 	mov	arg02, #10
0b11c     00 16 06 F6 | 	mov	arg03, #0
0b120     48 E7 B0 FD | 	call	#__system___basic_print_char
0b124     00 12 06 F6 | 	mov	arg01, #0
0b128     A8 33 B1 FD | 	call	#__system___getiolock_0417
0b12c     FD 00 68 FC | 	wrlong	#0, result1
0b130     08 E7 BF FD | 	call	#_pop
0b134     FF 1E 02 F6 | 	mov	local01, result3
0b138     28 4E 05 F1 | 	add	fp, #40
0b13c     A7 FA 61 FC | 	wrlong	result1, fp
0b140     04 4E 05 F1 | 	add	fp, #4
0b144     A7 FC 61 FC | 	wrlong	result2, fp
0b148     04 4E 05 F1 | 	add	fp, #4
0b14c     A7 1E 62 FC | 	wrlong	local01, fp
0b150     08 4E 85 F1 | 	sub	fp, #8
0b154     A7 12 02 F6 | 	mov	arg01, fp
0b158     28 4E 85 F1 | 	sub	fp, #40
0b15c     6C 5B B0 FD | 	call	#_converttoint
0b160     10 4E 05 F1 | 	add	fp, #16
0b164     A7 FA 61 FC | 	wrlong	result1, fp
0b168                 | '   t1=pop()
0b168                 | '   channel=converttoint(t1)  
0b168                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b168     04 4E 85 F1 | 	sub	fp, #4
0b16c     A7 1E 0A FB | 	rdlong	local01, fp wz
0b170     0C 4E 85 F1 | 	sub	fp, #12
0b174     3C 06 90 5D |  if_ne	jmp	#LR__0917
0b178     04 4E 05 F1 | 	add	fp, #4
0b17c     A7 00 68 FC | 	wrlong	#0, fp
0b180     04 4E 85 F1 | 	sub	fp, #4
0b184                 | LR__0899
0b184     10 4E 05 F1 | 	add	fp, #16
0b188     A7 1E 02 FB | 	rdlong	local01, fp
0b18c     0B 1E 66 F0 | 	shl	local01, #11
0b190     0B 00 00 FF 
0b194     CC E5 05 F1 | 	add	objptr, ##6092
0b198     F2 1E 02 F1 | 	add	local01, objptr
0b19c     0C 4E 85 F1 | 	sub	fp, #12
0b1a0     A7 12 02 FB | 	rdlong	arg01, fp
0b1a4     09 21 02 F6 | 	mov	local02, arg01
0b1a8     01 20 66 F0 | 	shl	local02, #1
0b1ac     0F 21 02 F1 | 	add	local02, local01
0b1b0     04 4E 85 F1 | 	sub	fp, #4
0b1b4     0B 00 00 FF 
0b1b8     CC E5 85 F1 | 	sub	objptr, ##6092
0b1bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b1c0     1F 22 C6 C9 |  if_b	decod	local03, #31
0b1c4     00 22 06 36 |  if_ae	mov	local03, #0
0b1c8     EC 00 B1 FD | 	call	#__system___float_fromuns
0b1cc     11 FB 61 F5 | 	xor	result1, local03
0b1d0     FD 14 02 F6 | 	mov	arg02, result1
0b1d4     87 E4 1D FF 
0b1d8     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b1dc     DC 04 B1 FD | 	call	#__system___float_mul
0b1e0     FD 12 02 F6 | 	mov	arg01, result1
0b1e4     10 0E B1 FD | 	call	#__system____builtin_sinf
0b1e8     FD 14 02 F6 | 	mov	arg02, result1
0b1ec     58 7F 23 FF 
0b1f0     00 12 06 F6 | 	mov	arg01, ##1191096320
0b1f4     C4 04 B1 FD | 	call	#__system___float_mul
0b1f8     FD 12 02 F6 | 	mov	arg01, result1
0b1fc     01 14 06 F6 | 	mov	arg02, #1
0b200     80 09 B1 FD | 	call	#__system___float_tointeger
0b204     10 FB 51 FC | 	wrword	result1, local02
0b208     04 4E 05 F1 | 	add	fp, #4
0b20c     A7 20 02 FB | 	rdlong	local02, fp
0b210     01 20 06 F1 | 	add	local02, #1
0b214     A7 20 62 FC | 	wrlong	local02, fp
0b218     04 4E 85 F1 | 	sub	fp, #4
0b21c     02 00 00 FF 
0b220     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b224     5C FF 9F CD |  if_b	jmp	#LR__0899
0b228                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b228                 | '   return
0b228     88 05 90 FD | 	jmp	#LR__0917
0b22c                 | LR__0900
0b22c                 | ' for i=0 to 15 : harm(i)=0: next i  
0b22c     04 4E 05 F1 | 	add	fp, #4
0b230     A7 00 68 FC | 	wrlong	#0, fp
0b234     97 16 48 FB | 	callpa	#(@LR__0902-@LR__0901)>>2,fcache_load_ptr_
0b238                 | LR__0901
0b238     A7 1E 02 FB | 	rdlong	local01, fp
0b23c     02 1E 66 F0 | 	shl	local01, #2
0b240     34 4E 05 F1 | 	add	fp, #52
0b244     A7 1E 02 F1 | 	add	local01, fp
0b248     0F 01 68 FC | 	wrlong	#0, local01
0b24c     34 4E 85 F1 | 	sub	fp, #52
0b250     A7 1E 02 FB | 	rdlong	local01, fp
0b254     01 1E 06 F1 | 	add	local01, #1
0b258     A7 1E 62 FC | 	wrlong	local01, fp
0b25c     10 1E 56 F2 | 	cmps	local01, #16 wc
0b260     D4 FF 9F CD |  if_b	jmp	#LR__0901
0b264                 | LR__0902
0b264     04 4E 85 F1 | 	sub	fp, #4
0b268                 | ' for i=numpar to 2 step -1 
0b268     A7 1E 02 FB | 	rdlong	local01, fp
0b26c     04 4E 05 F1 | 	add	fp, #4
0b270     A7 1E 62 FC | 	wrlong	local01, fp
0b274     04 4E 85 F1 | 	sub	fp, #4
0b278                 | LR__0903
0b278     C0 E5 BF FD | 	call	#_pop
0b27c     28 4E 05 F1 | 	add	fp, #40
0b280     A7 FA 61 FC | 	wrlong	result1, fp
0b284     04 4E 05 F1 | 	add	fp, #4
0b288     A7 FC 61 FC | 	wrlong	result2, fp
0b28c     04 4E 05 F1 | 	add	fp, #4
0b290     A7 FE 61 FC | 	wrlong	result3, fp
0b294     2C 4E 85 F1 | 	sub	fp, #44
0b298     A7 1E 02 FB | 	rdlong	local01, fp
0b29c     02 1E 86 F1 | 	sub	local01, #2
0b2a0     02 1E 66 F0 | 	shl	local01, #2
0b2a4     34 4E 05 F1 | 	add	fp, #52
0b2a8     A7 1E 02 F1 | 	add	local01, fp
0b2ac     10 4E 85 F1 | 	sub	fp, #16
0b2b0     A7 12 02 F6 | 	mov	arg01, fp
0b2b4     28 4E 85 F1 | 	sub	fp, #40
0b2b8     BC 5A B0 FD | 	call	#_converttofloat
0b2bc     0F FB 61 FC | 	wrlong	result1, local01
0b2c0     04 4E 05 F1 | 	add	fp, #4
0b2c4     A7 1E 02 FB | 	rdlong	local01, fp
0b2c8     01 1E 86 F1 | 	sub	local01, #1
0b2cc     A7 1E 62 FC | 	wrlong	local01, fp
0b2d0     04 4E 85 F1 | 	sub	fp, #4
0b2d4     02 1E 56 F2 | 	cmps	local01, #2 wc
0b2d8     9C FF 9F 3D |  if_ae	jmp	#LR__0903
0b2dc     5C E5 BF FD | 	call	#_pop
0b2e0     FF 1E 02 F6 | 	mov	local01, result3
0b2e4     28 4E 05 F1 | 	add	fp, #40
0b2e8     A7 FA 61 FC | 	wrlong	result1, fp
0b2ec     04 4E 05 F1 | 	add	fp, #4
0b2f0     A7 FC 61 FC | 	wrlong	result2, fp
0b2f4     04 4E 05 F1 | 	add	fp, #4
0b2f8     A7 1E 62 FC | 	wrlong	local01, fp
0b2fc     08 4E 85 F1 | 	sub	fp, #8
0b300     A7 12 02 F6 | 	mov	arg01, fp
0b304     28 4E 85 F1 | 	sub	fp, #40
0b308     C0 59 B0 FD | 	call	#_converttoint
0b30c     FD 1E 02 F6 | 	mov	local01, result1
0b310     10 4E 05 F1 | 	add	fp, #16
0b314     A7 1E 62 FC | 	wrlong	local01, fp
0b318     10 4E 85 F1 | 	sub	fp, #16
0b31c                 | ' t1=pop()
0b31c                 | ' channel=converttoint(t1) : print channel
0b31c     00 12 06 F6 | 	mov	arg01, #0
0b320     B0 31 B1 FD | 	call	#__system___getiolock_0417
0b324     FD 12 02 F6 | 	mov	arg01, result1
0b328     A8 D8 B0 FD | 	call	#__system___lockmem
0b32c     10 4E 05 F1 | 	add	fp, #16
0b330     A7 14 02 FB | 	rdlong	arg02, fp
0b334     10 4E 85 F1 | 	sub	fp, #16
0b338     00 12 06 F6 | 	mov	arg01, #0
0b33c     00 16 06 F6 | 	mov	arg03, #0
0b340     0A 18 06 F6 | 	mov	arg04, #10
0b344     C0 E5 B0 FD | 	call	#__system___basic_print_integer
0b348     00 12 06 F6 | 	mov	arg01, #0
0b34c     0A 14 06 F6 | 	mov	arg02, #10
0b350     00 16 06 F6 | 	mov	arg03, #0
0b354     14 E5 B0 FD | 	call	#__system___basic_print_char
0b358     00 12 06 F6 | 	mov	arg01, #0
0b35c     74 31 B1 FD | 	call	#__system___getiolock_0417
0b360     FD 00 68 FC | 	wrlong	#0, result1
0b364                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b364     08 4E 05 F1 | 	add	fp, #8
0b368     02 00 80 FF 
0b36c     A7 00 68 FC | 	wrlong	##1024, fp
0b370     08 4E 85 F1 | 	sub	fp, #8
0b374     0B 00 00 FF 
0b378     CC E5 05 F1 | 	add	objptr, ##6092
0b37c     97 18 48 FB | 	callpa	#(@LR__0906-@LR__0904)>>2,fcache_load_ptr_
0b380                 | LR__0904
0b380     02 00 00 FF 
0b384     00 14 DC FC | 	rep	@LR__0907, ##1024
0b388                 | LR__0905
0b388     10 4E 05 F1 | 	add	fp, #16
0b38c     A7 20 02 FB | 	rdlong	local02, fp
0b390     0B 20 66 F0 | 	shl	local02, #11
0b394     F2 20 02 F1 | 	add	local02, objptr
0b398     0C 4E 85 F1 | 	sub	fp, #12
0b39c     A7 1E 02 FB | 	rdlong	local01, fp
0b3a0     04 4E 85 F1 | 	sub	fp, #4
0b3a4     01 1E 66 F0 | 	shl	local01, #1
0b3a8     10 1F 02 F1 | 	add	local01, local02
0b3ac     0F 01 58 FC | 	wrword	#0, local01
0b3b0                 | LR__0906
0b3b0                 | LR__0907
0b3b0     0B 00 00 FF 
0b3b4     CC E5 85 F1 | 	sub	objptr, ##6092
0b3b8     1C 4E 05 F1 | 	add	fp, #28
0b3bc     A7 00 68 FC | 	wrlong	#0, fp
0b3c0                 | ' max=0
0b3c0                 | ' if harm(0)<0 then
0b3c0     1C 4E 05 F1 | 	add	fp, #28
0b3c4     A7 12 02 FB | 	rdlong	arg01, fp
0b3c8     38 4E 85 F1 | 	sub	fp, #56
0b3cc     00 14 06 F6 | 	mov	arg02, #0
0b3d0     01 16 06 F6 | 	mov	arg03, #1
0b3d4     18 07 B1 FD | 	call	#__system___float_cmp
0b3d8     00 FA 55 F2 | 	cmps	result1, #0 wc
0b3dc     04 01 90 3D |  if_ae	jmp	#LR__0910
0b3e0     38 4E 05 F1 | 	add	fp, #56
0b3e4     A7 FA 01 FB | 	rdlong	result1, fp
0b3e8     1F FA 05 F4 | 	bitl	result1, #31
0b3ec     24 4E 85 F1 | 	sub	fp, #36
0b3f0     A7 FA 61 FC | 	wrlong	result1, fp
0b3f4     28 4E 05 F1 | 	add	fp, #40
0b3f8     A7 FA 01 FB | 	rdlong	result1, fp
0b3fc     1F FA 05 F4 | 	bitl	result1, #31
0b400     24 4E 85 F1 | 	sub	fp, #36
0b404     A7 FA 61 FC | 	wrlong	result1, fp
0b408     20 4E 05 F1 | 	add	fp, #32
0b40c     00 C0 9F FF 
0b410     A7 00 68 FC | 	wrlong	##1065353216, fp
0b414     24 4E 85 F1 | 	sub	fp, #36
0b418     A7 1E 02 FB | 	rdlong	local01, fp
0b41c     28 4E 05 F1 | 	add	fp, #40
0b420     A7 1E 62 FC | 	wrlong	local01, fp
0b424     24 4E 85 F1 | 	sub	fp, #36
0b428     A7 1E 02 FB | 	rdlong	local01, fp
0b42c     28 4E 05 F1 | 	add	fp, #40
0b430     A7 1E 62 FC | 	wrlong	local01, fp
0b434                 | '   harm(0)=1
0b434                 | '   harm(1)=even
0b434                 | '   harm(2)=odd
0b434                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b434     3C 4E 85 F1 | 	sub	fp, #60
0b438     A7 06 68 FC | 	wrlong	#3, fp
0b43c                 | LR__0908
0b43c     A7 1A 02 FB | 	rdlong	arg05, fp
0b440     0D 25 02 F6 | 	mov	local04, arg05
0b444     02 24 66 F0 | 	shl	local04, #2
0b448     34 4E 05 F1 | 	add	fp, #52
0b44c     A7 24 02 F1 | 	add	local04, fp
0b450     02 1A 86 F1 | 	sub	arg05, #2
0b454     02 1A 66 F0 | 	shl	arg05, #2
0b458     A7 1A 02 F1 | 	add	arg05, fp
0b45c     0D 13 02 FB | 	rdlong	arg01, arg05
0b460     24 4E 85 F1 | 	sub	fp, #36
0b464     A7 14 02 FB | 	rdlong	arg02, fp
0b468     14 4E 85 F1 | 	sub	fp, #20
0b46c     4C 02 B1 FD | 	call	#__system___float_mul
0b470     12 FB 61 FC | 	wrlong	result1, local04
0b474     04 4E 05 F1 | 	add	fp, #4
0b478     A7 26 02 FB | 	rdlong	local05, fp
0b47c     02 26 06 F1 | 	add	local05, #2
0b480     A7 26 62 FC | 	wrlong	local05, fp
0b484     10 26 56 F2 | 	cmps	local05, #16 wc
0b488     B0 FF 9F CD |  if_b	jmp	#LR__0908
0b48c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b48c     A7 08 68 FC | 	wrlong	#4, fp
0b490                 | LR__0909
0b490     A7 26 02 FB | 	rdlong	local05, fp
0b494     13 25 02 F6 | 	mov	local04, local05
0b498     02 24 66 F0 | 	shl	local04, #2
0b49c     34 4E 05 F1 | 	add	fp, #52
0b4a0     A7 24 02 F1 | 	add	local04, fp
0b4a4     02 26 86 F1 | 	sub	local05, #2
0b4a8     02 26 66 F0 | 	shl	local05, #2
0b4ac     A7 26 02 F1 | 	add	local05, fp
0b4b0     13 13 02 FB | 	rdlong	arg01, local05
0b4b4     20 4E 85 F1 | 	sub	fp, #32
0b4b8     A7 14 02 FB | 	rdlong	arg02, fp
0b4bc     18 4E 85 F1 | 	sub	fp, #24
0b4c0     F8 01 B1 FD | 	call	#__system___float_mul
0b4c4     12 FB 61 FC | 	wrlong	result1, local04
0b4c8     04 4E 05 F1 | 	add	fp, #4
0b4cc     A7 26 02 FB | 	rdlong	local05, fp
0b4d0     02 26 06 F1 | 	add	local05, #2
0b4d4     A7 26 62 FC | 	wrlong	local05, fp
0b4d8     0F 26 56 F2 | 	cmps	local05, #15 wc
0b4dc     B0 FF 9F CD |  if_b	jmp	#LR__0909
0b4e0     04 4E 85 F1 | 	sub	fp, #4
0b4e4                 | LR__0910
0b4e4                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b4e4     38 4E 05 F1 | 	add	fp, #56
0b4e8     A7 12 02 FB | 	rdlong	arg01, fp
0b4ec     38 4E 85 F1 | 	sub	fp, #56
0b4f0     00 14 06 F6 | 	mov	arg02, #0
0b4f4     01 16 66 F6 | 	neg	arg03, #1
0b4f8     F4 05 B1 FD | 	call	#__system___float_cmp
0b4fc     00 FA 55 F2 | 	cmps	result1, #0 wc
0b500     B0 02 90 CD |  if_b	jmp	#LR__0916
0b504                 | '   for i=0 to 1023
0b504     04 4E 05 F1 | 	add	fp, #4
0b508     A7 00 68 FC | 	wrlong	#0, fp
0b50c     04 4E 85 F1 | 	sub	fp, #4
0b510                 | LR__0911
0b510     20 4E 05 F1 | 	add	fp, #32
0b514     A7 00 68 FC | 	wrlong	#0, fp
0b518                 | '     spl=0
0b518                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b518     18 4E 85 F1 | 	sub	fp, #24
0b51c     A7 00 68 FC | 	wrlong	#0, fp
0b520                 | LR__0912
0b520     A7 24 02 FB | 	rdlong	local04, fp
0b524     02 24 66 F0 | 	shl	local04, #2
0b528     30 4E 05 F1 | 	add	fp, #48
0b52c     A7 24 02 F1 | 	add	local04, fp
0b530     12 27 02 FB | 	rdlong	local05, local04
0b534     87 E4 1D FF 
0b538     DB 25 06 F6 | 	mov	local04, ##1003032539
0b53c     34 4E 85 F1 | 	sub	fp, #52
0b540     A7 12 02 FB | 	rdlong	arg01, fp
0b544     04 4E 85 F1 | 	sub	fp, #4
0b548     09 13 52 F6 | 	abs	arg01, arg01 wc
0b54c     1F 22 C6 C9 |  if_b	decod	local03, #31
0b550     00 22 06 36 |  if_ae	mov	local03, #0
0b554     60 FD B0 FD | 	call	#__system___float_fromuns
0b558     11 FB 61 F5 | 	xor	result1, local03
0b55c     FD 14 02 F6 | 	mov	arg02, result1
0b560     12 13 02 F6 | 	mov	arg01, local04
0b564     54 01 B1 FD | 	call	#__system___float_mul
0b568     FD 24 02 F6 | 	mov	local04, result1
0b56c     08 4E 05 F1 | 	add	fp, #8
0b570     A7 12 02 FB | 	rdlong	arg01, fp
0b574     08 4E 85 F1 | 	sub	fp, #8
0b578     01 12 06 F1 | 	add	arg01, #1
0b57c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b580     1F 22 C6 C9 |  if_b	decod	local03, #31
0b584     00 22 06 36 |  if_ae	mov	local03, #0
0b588     2C FD B0 FD | 	call	#__system___float_fromuns
0b58c     11 FB 61 F5 | 	xor	result1, local03
0b590     FD 14 02 F6 | 	mov	arg02, result1
0b594     12 13 02 F6 | 	mov	arg01, local04
0b598     20 01 B1 FD | 	call	#__system___float_mul
0b59c     FD 12 02 F6 | 	mov	arg01, result1
0b5a0     54 0A B1 FD | 	call	#__system____builtin_sinf
0b5a4     FD 14 02 F6 | 	mov	arg02, result1
0b5a8     13 13 02 F6 | 	mov	arg01, local05
0b5ac     0C 01 B1 FD | 	call	#__system___float_mul
0b5b0     FD 14 02 F6 | 	mov	arg02, result1
0b5b4     20 4E 05 F1 | 	add	fp, #32
0b5b8     A7 12 02 FB | 	rdlong	arg01, fp
0b5bc     20 4E 85 F1 | 	sub	fp, #32
0b5c0     28 FD B0 FD | 	call	#__system___float_add
0b5c4     20 4E 05 F1 | 	add	fp, #32
0b5c8     A7 FA 61 FC | 	wrlong	result1, fp
0b5cc     18 4E 85 F1 | 	sub	fp, #24
0b5d0     A7 16 02 FB | 	rdlong	arg03, fp
0b5d4     01 16 06 F1 | 	add	arg03, #1
0b5d8     A7 16 62 FC | 	wrlong	arg03, fp
0b5dc     10 16 56 F2 | 	cmps	arg03, #16 wc
0b5e0     3C FF 9F CD |  if_b	jmp	#LR__0912
0b5e4                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b5e4     18 4E 05 F1 | 	add	fp, #24
0b5e8     A7 12 02 FB | 	rdlong	arg01, fp
0b5ec     1F 12 06 F4 | 	bitl	arg01, #31
0b5f0     04 4E 85 F1 | 	sub	fp, #4
0b5f4     A7 14 02 FB | 	rdlong	arg02, fp
0b5f8     1C 4E 85 F1 | 	sub	fp, #28
0b5fc     01 16 66 F6 | 	neg	arg03, #1
0b600     EC 04 B1 FD | 	call	#__system___float_cmp
0b604     01 FA 55 F2 | 	cmps	result1, #1 wc
0b608     18 00 90 CD |  if_b	jmp	#LR__0913
0b60c     20 4E 05 F1 | 	add	fp, #32
0b610     A7 FA 01 FB | 	rdlong	result1, fp
0b614     1F FA 05 F4 | 	bitl	result1, #31
0b618     04 4E 85 F1 | 	sub	fp, #4
0b61c     A7 FA 61 FC | 	wrlong	result1, fp
0b620     1C 4E 85 F1 | 	sub	fp, #28
0b624                 | LR__0913
0b624     04 4E 05 F1 | 	add	fp, #4
0b628     A7 26 02 FB | 	rdlong	local05, fp
0b62c     01 26 06 F1 | 	add	local05, #1
0b630     A7 26 62 FC | 	wrlong	local05, fp
0b634     04 4E 85 F1 | 	sub	fp, #4
0b638     02 00 00 FF 
0b63c     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b640     CC FE 9F CD |  if_b	jmp	#LR__0911
0b644                 | '   for i=0 to 1023
0b644     04 4E 05 F1 | 	add	fp, #4
0b648     A7 00 68 FC | 	wrlong	#0, fp
0b64c     04 4E 85 F1 | 	sub	fp, #4
0b650                 | LR__0914
0b650     20 4E 05 F1 | 	add	fp, #32
0b654     A7 00 68 FC | 	wrlong	#0, fp
0b658                 | '     spl=0
0b658                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b658     18 4E 85 F1 | 	sub	fp, #24
0b65c     A7 00 68 FC | 	wrlong	#0, fp
0b660                 | LR__0915
0b660     A7 26 02 FB | 	rdlong	local05, fp
0b664     02 26 66 F0 | 	shl	local05, #2
0b668     30 4E 05 F1 | 	add	fp, #48
0b66c     A7 26 02 F1 | 	add	local05, fp
0b670     13 27 02 FB | 	rdlong	local05, local05
0b674     1C 4E 85 F1 | 	sub	fp, #28
0b678     A7 14 02 FB | 	rdlong	arg02, fp
0b67c     1C 4E 85 F1 | 	sub	fp, #28
0b680     58 7F 23 FF 
0b684     00 12 06 F6 | 	mov	arg01, ##1191096320
0b688     34 02 B1 FD | 	call	#__system___float_div
0b68c     FD 14 02 F6 | 	mov	arg02, result1
0b690     13 13 02 F6 | 	mov	arg01, local05
0b694     24 00 B1 FD | 	call	#__system___float_mul
0b698     FD 26 02 F6 | 	mov	local05, result1
0b69c     87 E4 1D FF 
0b6a0     DB 25 06 F6 | 	mov	local04, ##1003032539
0b6a4     04 4E 05 F1 | 	add	fp, #4
0b6a8     A7 12 02 FB | 	rdlong	arg01, fp
0b6ac     04 4E 85 F1 | 	sub	fp, #4
0b6b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0b6b4     1F 22 C6 C9 |  if_b	decod	local03, #31
0b6b8     00 22 06 36 |  if_ae	mov	local03, #0
0b6bc     F8 FB B0 FD | 	call	#__system___float_fromuns
0b6c0     11 FB 61 F5 | 	xor	result1, local03
0b6c4     FD 14 02 F6 | 	mov	arg02, result1
0b6c8     12 13 02 F6 | 	mov	arg01, local04
0b6cc     EC FF B0 FD | 	call	#__system___float_mul
0b6d0     FD 24 02 F6 | 	mov	local04, result1
0b6d4     08 4E 05 F1 | 	add	fp, #8
0b6d8     A7 12 02 FB | 	rdlong	arg01, fp
0b6dc     08 4E 85 F1 | 	sub	fp, #8
0b6e0     01 12 06 F1 | 	add	arg01, #1
0b6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b6e8     1F 22 C6 C9 |  if_b	decod	local03, #31
0b6ec     00 22 06 36 |  if_ae	mov	local03, #0
0b6f0     C4 FB B0 FD | 	call	#__system___float_fromuns
0b6f4     11 FB 61 F5 | 	xor	result1, local03
0b6f8     FD 14 02 F6 | 	mov	arg02, result1
0b6fc     12 13 02 F6 | 	mov	arg01, local04
0b700     B8 FF B0 FD | 	call	#__system___float_mul
0b704     FD 12 02 F6 | 	mov	arg01, result1
0b708     EC 08 B1 FD | 	call	#__system____builtin_sinf
0b70c     FD 14 02 F6 | 	mov	arg02, result1
0b710     13 13 02 F6 | 	mov	arg01, local05
0b714     A4 FF B0 FD | 	call	#__system___float_mul
0b718     FD 14 02 F6 | 	mov	arg02, result1
0b71c     20 4E 05 F1 | 	add	fp, #32
0b720     A7 12 02 FB | 	rdlong	arg01, fp
0b724     20 4E 85 F1 | 	sub	fp, #32
0b728     C0 FB B0 FD | 	call	#__system___float_add
0b72c     20 4E 05 F1 | 	add	fp, #32
0b730     A7 FA 61 FC | 	wrlong	result1, fp
0b734     18 4E 85 F1 | 	sub	fp, #24
0b738     A7 26 02 FB | 	rdlong	local05, fp
0b73c     01 26 06 F1 | 	add	local05, #1
0b740     A7 26 62 FC | 	wrlong	local05, fp
0b744     10 26 56 F2 | 	cmps	local05, #16 wc
0b748     14 FF 9F CD |  if_b	jmp	#LR__0915
0b74c     08 4E 05 F1 | 	add	fp, #8
0b750     A7 26 02 FB | 	rdlong	local05, fp
0b754     0B 26 66 F0 | 	shl	local05, #11
0b758     0B 00 00 FF 
0b75c     CC E5 05 F1 | 	add	objptr, ##6092
0b760     F2 26 02 F1 | 	add	local05, objptr
0b764     0C 4E 85 F1 | 	sub	fp, #12
0b768     A7 20 02 FB | 	rdlong	local02, fp
0b76c     01 20 66 F0 | 	shl	local02, #1
0b770     13 21 02 F1 | 	add	local02, local05
0b774     1C 4E 05 F1 | 	add	fp, #28
0b778     A7 12 02 FB | 	rdlong	arg01, fp
0b77c     20 4E 85 F1 | 	sub	fp, #32
0b780     0B 00 00 FF 
0b784     CC E5 85 F1 | 	sub	objptr, ##6092
0b788     01 14 06 F6 | 	mov	arg02, #1
0b78c     F4 03 B1 FD | 	call	#__system___float_tointeger
0b790     10 FB 51 FC | 	wrword	result1, local02
0b794     04 4E 05 F1 | 	add	fp, #4
0b798     A7 26 02 FB | 	rdlong	local05, fp
0b79c     01 26 06 F1 | 	add	local05, #1
0b7a0     A7 26 62 FC | 	wrlong	local05, fp
0b7a4     04 4E 85 F1 | 	sub	fp, #4
0b7a8     02 00 00 FF 
0b7ac     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b7b0     9C FE 9F CD |  if_b	jmp	#LR__0914
0b7b4                 | LR__0916
0b7b4                 | LR__0917
0b7b4     A7 F0 03 F6 | 	mov	ptra, fp
0b7b8     B2 00 A0 FD | 	call	#popregs_
0b7bc                 | _do_defenv_ret
0b7bc     2D 00 64 FD | 	ret
0b7c0                 | 
0b7c0                 | ' 
0b7c0                 | ' sub do_defsnd
0b7c0                 | _do_defsnd
0b7c0     05 4A 05 F6 | 	mov	COUNT_, #5
0b7c4     A8 00 A0 FD | 	call	#pushregs_
0b7c8     84 F0 07 F1 | 	add	ptra, #132
0b7cc     69 00 00 FF 
0b7d0     54 E4 05 F1 | 	add	objptr, ##53844
0b7d4     F2 1A 02 FB | 	rdlong	arg05, objptr
0b7d8     0D 19 02 F6 | 	mov	arg04, arg05
0b7dc     01 18 66 F0 | 	shl	arg04, #1
0b7e0     0D 19 02 F1 | 	add	arg04, arg05
0b7e4     02 18 66 F0 | 	shl	arg04, #2
0b7e8     03 00 00 FF 
0b7ec     04 E4 85 F1 | 	sub	objptr, ##1540
0b7f0     F2 18 02 F1 | 	add	arg04, objptr
0b7f4     0C 1B 02 FB | 	rdlong	arg05, arg04
0b7f8     A7 1A 62 FC | 	wrlong	arg05, fp
0b7fc                 | ' 
0b7fc                 | ' numpar=compiledline(lineptr_e).result.uresult
0b7fc                 | ' 
0b7fc                 | ' 
0b7fc                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b7fc                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b7fc                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b7fc                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b7fc                 | ' 
0b7fc                 | ' if numpar<2 then return
0b7fc     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b800     66 00 00 FF 
0b804     50 E4 85 F1 | 	sub	objptr, ##52304
0b808     2C 09 90 CD |  if_b	jmp	#LR__0944
0b80c                 | ' 
0b80c                 | '  
0b80c                 | ' if numpar=2 then
0b80c     A7 1A 02 FB | 	rdlong	arg05, fp
0b810     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b814     98 03 90 5D |  if_ne	jmp	#LR__0927
0b818     20 E0 BF FD | 	call	#_pop
0b81c     FF 1A 02 F6 | 	mov	arg05, result3
0b820     28 4E 05 F1 | 	add	fp, #40
0b824     A7 FA 61 FC | 	wrlong	result1, fp
0b828     04 4E 05 F1 | 	add	fp, #4
0b82c     A7 FC 61 FC | 	wrlong	result2, fp
0b830     04 4E 05 F1 | 	add	fp, #4
0b834     A7 1A 62 FC | 	wrlong	arg05, fp
0b838                 | '   t1=pop()
0b838                 | '   if t1.result_type=result_string2 then 
0b838     30 4E 85 F1 | 	sub	fp, #48
0b83c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b840     20 00 90 5D |  if_ne	jmp	#LR__0920
0b844     28 4E 05 F1 | 	add	fp, #40
0b848     A7 12 02 FB | 	rdlong	arg01, fp
0b84c     28 4E 85 F1 | 	sub	fp, #40
0b850     F0 10 B0 FD | 	call	#_convertstring
0b854     34 4E 05 F1 | 	add	fp, #52
0b858     A7 FA 61 FC | 	wrlong	result1, fp
0b85c     34 4E 85 F1 | 	sub	fp, #52
0b860     40 00 90 FD | 	jmp	#LR__0923
0b864                 | LR__0920
0b864     30 4E 05 F1 | 	add	fp, #48
0b868     A7 1A 02 FB | 	rdlong	arg05, fp
0b86c     30 4E 85 F1 | 	sub	fp, #48
0b870     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b874     18 00 90 5D |  if_ne	jmp	#LR__0921
0b878     28 4E 05 F1 | 	add	fp, #40
0b87c     A7 1A 02 FB | 	rdlong	arg05, fp
0b880     0C 4E 05 F1 | 	add	fp, #12
0b884     A7 1A 62 FC | 	wrlong	arg05, fp
0b888     34 4E 85 F1 | 	sub	fp, #52
0b88c     14 00 90 FD | 	jmp	#LR__0922
0b890                 | LR__0921
0b890     43 01 00 FF 
0b894     10 1A 06 F6 | 	mov	arg05, ##@LR__4612
0b898     34 4E 05 F1 | 	add	fp, #52
0b89c     A7 1A 62 FC | 	wrlong	arg05, fp
0b8a0     34 4E 85 F1 | 	sub	fp, #52
0b8a4                 | LR__0922
0b8a4                 | LR__0923
0b8a4                 | ' 
0b8a4                 | '     
0b8a4                 | '   if s<>"" then 
0b8a4     34 4E 05 F1 | 	add	fp, #52
0b8a8     A7 12 02 FB | 	rdlong	arg01, fp
0b8ac     34 4E 85 F1 | 	sub	fp, #52
0b8b0     43 01 00 FF 
0b8b4     11 14 06 F6 | 	mov	arg02, ##@LR__4613
0b8b8     40 D3 B0 FD | 	call	#__system___string_cmp
0b8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8c0     88 01 90 AD |  if_e	jmp	#LR__0925
0b8c4     74 DF BF FD | 	call	#_pop
0b8c8     FF 1A 02 F6 | 	mov	arg05, result3
0b8cc     28 4E 05 F1 | 	add	fp, #40
0b8d0     A7 FA 61 FC | 	wrlong	result1, fp
0b8d4     04 4E 05 F1 | 	add	fp, #4
0b8d8     A7 FC 61 FC | 	wrlong	result2, fp
0b8dc     04 4E 05 F1 | 	add	fp, #4
0b8e0     A7 1A 62 FC | 	wrlong	arg05, fp
0b8e4     08 4E 85 F1 | 	sub	fp, #8
0b8e8     A7 12 02 F6 | 	mov	arg01, fp
0b8ec     28 4E 85 F1 | 	sub	fp, #40
0b8f0     D8 53 B0 FD | 	call	#_converttoint
0b8f4     10 4E 05 F1 | 	add	fp, #16
0b8f8     A7 FA 61 FC | 	wrlong	result1, fp
0b8fc     10 4E 85 F1 | 	sub	fp, #16
0b900                 | '     t1=pop()
0b900                 | '     channel=converttoint(t1) 
0b900                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b900     09 12 06 F6 | 	mov	arg01, #9
0b904     FC 21 B1 FD | 	call	#__system__close
0b908     09 1E 06 F6 | 	mov	local01, #9
0b90c     43 01 00 FF 
0b910     12 12 06 F6 | 	mov	arg01, ##@LR__4614
0b914     34 4E 05 F1 | 	add	fp, #52
0b918     A7 14 02 FB | 	rdlong	arg02, fp
0b91c     34 4E 85 F1 | 	sub	fp, #52
0b920     0C D3 B0 FD | 	call	#__system___string_concat
0b924     FD 14 02 F6 | 	mov	arg02, result1
0b928     0F 13 02 F6 | 	mov	arg01, local01
0b92c     00 16 06 F6 | 	mov	arg03, #0
0b930     A0 DE B0 FD | 	call	#__system___basic_open_string
0b934     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b938     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b93c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b940     7A 00 00 FF 
0b944     CC E4 05 F1 | 	add	objptr, ##62668
0b948     F2 FA 61 FC | 	wrlong	result1, objptr
0b94c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b94c     7A 00 00 FF 
0b950     CC E4 85 F1 | 	sub	objptr, ##62668
0b954     B0 00 90 AD |  if_e	jmp	#LR__0924
0b958     00 12 06 F6 | 	mov	arg01, #0
0b95c     74 2B B1 FD | 	call	#__system___getiolock_0417
0b960     FD 12 02 F6 | 	mov	arg01, result1
0b964     6C D2 B0 FD | 	call	#__system___lockmem
0b968     43 01 00 FF 
0b96c     1F 14 06 F6 | 	mov	arg02, ##@LR__4615
0b970     00 12 06 F6 | 	mov	arg01, #0
0b974     00 16 06 F6 | 	mov	arg03, #0
0b978     48 DF B0 FD | 	call	#__system___basic_print_string
0b97c     7A 00 00 FF 
0b980     CC E4 05 F1 | 	add	objptr, ##62668
0b984     F2 14 02 FB | 	rdlong	arg02, objptr
0b988     7A 00 00 FF 
0b98c     CC E4 85 F1 | 	sub	objptr, ##62668
0b990     00 12 06 F6 | 	mov	arg01, #0
0b994     00 16 06 F6 | 	mov	arg03, #0
0b998     0A 18 06 F6 | 	mov	arg04, #10
0b99c     68 DF B0 FD | 	call	#__system___basic_print_integer
0b9a0     43 01 00 FF 
0b9a4     2D 14 06 F6 | 	mov	arg02, ##@LR__4616
0b9a8     00 12 06 F6 | 	mov	arg01, #0
0b9ac     00 16 06 F6 | 	mov	arg03, #0
0b9b0     10 DF B0 FD | 	call	#__system___basic_print_string
0b9b4     00 1E 06 F6 | 	mov	local01, #0
0b9b8     7A 00 00 FF 
0b9bc     CC E4 05 F1 | 	add	objptr, ##62668
0b9c0     F2 12 02 FB | 	rdlong	arg01, objptr
0b9c4     7A 00 00 FF 
0b9c8     CC E4 85 F1 | 	sub	objptr, ##62668
0b9cc     00 F8 B0 FD | 	call	#__system___strerror
0b9d0     FD 14 02 F6 | 	mov	arg02, result1
0b9d4     0F 13 02 F6 | 	mov	arg01, local01
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     E4 DE B0 FD | 	call	#__system___basic_print_string
0b9e0     00 12 06 F6 | 	mov	arg01, #0
0b9e4     0A 14 06 F6 | 	mov	arg02, #10
0b9e8     00 16 06 F6 | 	mov	arg03, #0
0b9ec     7C DE B0 FD | 	call	#__system___basic_print_char
0b9f0     00 12 06 F6 | 	mov	arg01, #0
0b9f4     DC 2A B1 FD | 	call	#__system___getiolock_0417
0b9f8     FD 00 68 FC | 	wrlong	#0, result1
0b9fc     09 12 06 F6 | 	mov	arg01, #9
0ba00     00 21 B1 FD | 	call	#__system__close
0ba04     30 07 90 FD | 	jmp	#LR__0944
0ba08                 | LR__0924
0ba08                 | '     get #9,17,samplebuf(channel,0),1024
0ba08     10 4E 05 F1 | 	add	fp, #16
0ba0c     A7 16 02 FB | 	rdlong	arg03, fp
0ba10     10 4E 85 F1 | 	sub	fp, #16
0ba14     0B 16 66 F0 | 	shl	arg03, #11
0ba18     0B 00 00 FF 
0ba1c     CC E5 05 F1 | 	add	objptr, ##6092
0ba20     F2 16 02 F1 | 	add	arg03, objptr
0ba24     09 12 06 F6 | 	mov	arg01, #9
0ba28     11 14 06 F6 | 	mov	arg02, #17
0ba2c     0A 18 C6 F9 | 	decod	arg04, #10
0ba30     02 1A 06 F6 | 	mov	arg05, #2
0ba34     0B 00 00 FF 
0ba38     CC E5 85 F1 | 	sub	objptr, ##6092
0ba3c     94 DF B0 FD | 	call	#__system___basic_get
0ba40                 | '     close #9
0ba40     09 12 06 F6 | 	mov	arg01, #9
0ba44     BC 20 B1 FD | 	call	#__system__close
0ba48                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ba48                 | '     return
0ba48     EC 06 90 FD | 	jmp	#LR__0944
0ba4c                 | LR__0925
0ba4c     28 4E 05 F1 | 	add	fp, #40
0ba50     A7 12 02 F6 | 	mov	arg01, fp
0ba54     28 4E 85 F1 | 	sub	fp, #40
0ba58     70 52 B0 FD | 	call	#_converttoint
0ba5c     FD 1E 02 F6 | 	mov	local01, result1
0ba60     0C 4E 05 F1 | 	add	fp, #12
0ba64     A7 1E 62 FC | 	wrlong	local01, fp
0ba68     0C 4E 85 F1 | 	sub	fp, #12
0ba6c                 | '   
0ba6c                 | '   par=converttoint(t1)  : print par
0ba6c     00 12 06 F6 | 	mov	arg01, #0
0ba70     60 2A B1 FD | 	call	#__system___getiolock_0417
0ba74     FD 12 02 F6 | 	mov	arg01, result1
0ba78     58 D1 B0 FD | 	call	#__system___lockmem
0ba7c     0C 4E 05 F1 | 	add	fp, #12
0ba80     A7 14 02 FB | 	rdlong	arg02, fp
0ba84     0C 4E 85 F1 | 	sub	fp, #12
0ba88     00 12 06 F6 | 	mov	arg01, #0
0ba8c     00 16 06 F6 | 	mov	arg03, #0
0ba90     0A 18 06 F6 | 	mov	arg04, #10
0ba94     70 DE B0 FD | 	call	#__system___basic_print_integer
0ba98     00 12 06 F6 | 	mov	arg01, #0
0ba9c     0A 14 06 F6 | 	mov	arg02, #10
0baa0     00 16 06 F6 | 	mov	arg03, #0
0baa4     C4 DD B0 FD | 	call	#__system___basic_print_char
0baa8     00 12 06 F6 | 	mov	arg01, #0
0baac     24 2A B1 FD | 	call	#__system___getiolock_0417
0bab0     FD 00 68 FC | 	wrlong	#0, result1
0bab4     84 DD BF FD | 	call	#_pop
0bab8     FF 1E 02 F6 | 	mov	local01, result3
0babc     28 4E 05 F1 | 	add	fp, #40
0bac0     A7 FA 61 FC | 	wrlong	result1, fp
0bac4     04 4E 05 F1 | 	add	fp, #4
0bac8     A7 FC 61 FC | 	wrlong	result2, fp
0bacc     04 4E 05 F1 | 	add	fp, #4
0bad0     A7 1E 62 FC | 	wrlong	local01, fp
0bad4     08 4E 85 F1 | 	sub	fp, #8
0bad8     A7 12 02 F6 | 	mov	arg01, fp
0badc     28 4E 85 F1 | 	sub	fp, #40
0bae0     E8 51 B0 FD | 	call	#_converttoint
0bae4     10 4E 05 F1 | 	add	fp, #16
0bae8     A7 FA 61 FC | 	wrlong	result1, fp
0baec                 | '   t1=pop()
0baec                 | '   channel=converttoint(t1)  
0baec                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0baec     04 4E 85 F1 | 	sub	fp, #4
0baf0     A7 1E 0A FB | 	rdlong	local01, fp wz
0baf4     0C 4E 85 F1 | 	sub	fp, #12
0baf8     3C 06 90 5D |  if_ne	jmp	#LR__0944
0bafc     04 4E 05 F1 | 	add	fp, #4
0bb00     A7 00 68 FC | 	wrlong	#0, fp
0bb04     04 4E 85 F1 | 	sub	fp, #4
0bb08                 | LR__0926
0bb08     10 4E 05 F1 | 	add	fp, #16
0bb0c     A7 1E 02 FB | 	rdlong	local01, fp
0bb10     0B 1E 66 F0 | 	shl	local01, #11
0bb14     0B 00 00 FF 
0bb18     CC E5 05 F1 | 	add	objptr, ##6092
0bb1c     F2 1E 02 F1 | 	add	local01, objptr
0bb20     0C 4E 85 F1 | 	sub	fp, #12
0bb24     A7 12 02 FB | 	rdlong	arg01, fp
0bb28     09 21 02 F6 | 	mov	local02, arg01
0bb2c     01 20 66 F0 | 	shl	local02, #1
0bb30     0F 21 02 F1 | 	add	local02, local01
0bb34     04 4E 85 F1 | 	sub	fp, #4
0bb38     0B 00 00 FF 
0bb3c     CC E5 85 F1 | 	sub	objptr, ##6092
0bb40     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb44     1F 22 C6 C9 |  if_b	decod	local03, #31
0bb48     00 22 06 36 |  if_ae	mov	local03, #0
0bb4c     68 F7 B0 FD | 	call	#__system___float_fromuns
0bb50     11 FB 61 F5 | 	xor	result1, local03
0bb54     FD 14 02 F6 | 	mov	arg02, result1
0bb58     87 E4 1D FF 
0bb5c     DB 13 06 F6 | 	mov	arg01, ##1003032539
0bb60     58 FB B0 FD | 	call	#__system___float_mul
0bb64     FD 12 02 F6 | 	mov	arg01, result1
0bb68     8C 04 B1 FD | 	call	#__system____builtin_sinf
0bb6c     FD 14 02 F6 | 	mov	arg02, result1
0bb70     58 7F 23 FF 
0bb74     00 12 06 F6 | 	mov	arg01, ##1191096320
0bb78     40 FB B0 FD | 	call	#__system___float_mul
0bb7c     FD 12 02 F6 | 	mov	arg01, result1
0bb80     01 14 06 F6 | 	mov	arg02, #1
0bb84     FC FF B0 FD | 	call	#__system___float_tointeger
0bb88     10 FB 51 FC | 	wrword	result1, local02
0bb8c     04 4E 05 F1 | 	add	fp, #4
0bb90     A7 20 02 FB | 	rdlong	local02, fp
0bb94     01 20 06 F1 | 	add	local02, #1
0bb98     A7 20 62 FC | 	wrlong	local02, fp
0bb9c     04 4E 85 F1 | 	sub	fp, #4
0bba0     02 00 00 FF 
0bba4     00 20 56 F2 | 	cmps	local02, ##1024 wc
0bba8     5C FF 9F CD |  if_b	jmp	#LR__0926
0bbac                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0bbac                 | '   return
0bbac     88 05 90 FD | 	jmp	#LR__0944
0bbb0                 | LR__0927
0bbb0                 | ' for i=0 to 15 : harm(i)=0: next i  
0bbb0     04 4E 05 F1 | 	add	fp, #4
0bbb4     A7 00 68 FC | 	wrlong	#0, fp
0bbb8     97 16 48 FB | 	callpa	#(@LR__0929-@LR__0928)>>2,fcache_load_ptr_
0bbbc                 | LR__0928
0bbbc     A7 1E 02 FB | 	rdlong	local01, fp
0bbc0     02 1E 66 F0 | 	shl	local01, #2
0bbc4     34 4E 05 F1 | 	add	fp, #52
0bbc8     A7 1E 02 F1 | 	add	local01, fp
0bbcc     0F 01 68 FC | 	wrlong	#0, local01
0bbd0     34 4E 85 F1 | 	sub	fp, #52
0bbd4     A7 1E 02 FB | 	rdlong	local01, fp
0bbd8     01 1E 06 F1 | 	add	local01, #1
0bbdc     A7 1E 62 FC | 	wrlong	local01, fp
0bbe0     10 1E 56 F2 | 	cmps	local01, #16 wc
0bbe4     D4 FF 9F CD |  if_b	jmp	#LR__0928
0bbe8                 | LR__0929
0bbe8     04 4E 85 F1 | 	sub	fp, #4
0bbec                 | ' for i=numpar to 2 step -1 
0bbec     A7 1E 02 FB | 	rdlong	local01, fp
0bbf0     04 4E 05 F1 | 	add	fp, #4
0bbf4     A7 1E 62 FC | 	wrlong	local01, fp
0bbf8     04 4E 85 F1 | 	sub	fp, #4
0bbfc                 | LR__0930
0bbfc     3C DC BF FD | 	call	#_pop
0bc00     28 4E 05 F1 | 	add	fp, #40
0bc04     A7 FA 61 FC | 	wrlong	result1, fp
0bc08     04 4E 05 F1 | 	add	fp, #4
0bc0c     A7 FC 61 FC | 	wrlong	result2, fp
0bc10     04 4E 05 F1 | 	add	fp, #4
0bc14     A7 FE 61 FC | 	wrlong	result3, fp
0bc18     2C 4E 85 F1 | 	sub	fp, #44
0bc1c     A7 1E 02 FB | 	rdlong	local01, fp
0bc20     02 1E 86 F1 | 	sub	local01, #2
0bc24     02 1E 66 F0 | 	shl	local01, #2
0bc28     34 4E 05 F1 | 	add	fp, #52
0bc2c     A7 1E 02 F1 | 	add	local01, fp
0bc30     10 4E 85 F1 | 	sub	fp, #16
0bc34     A7 12 02 F6 | 	mov	arg01, fp
0bc38     28 4E 85 F1 | 	sub	fp, #40
0bc3c     38 51 B0 FD | 	call	#_converttofloat
0bc40     0F FB 61 FC | 	wrlong	result1, local01
0bc44     04 4E 05 F1 | 	add	fp, #4
0bc48     A7 1E 02 FB | 	rdlong	local01, fp
0bc4c     01 1E 86 F1 | 	sub	local01, #1
0bc50     A7 1E 62 FC | 	wrlong	local01, fp
0bc54     04 4E 85 F1 | 	sub	fp, #4
0bc58     02 1E 56 F2 | 	cmps	local01, #2 wc
0bc5c     9C FF 9F 3D |  if_ae	jmp	#LR__0930
0bc60     D8 DB BF FD | 	call	#_pop
0bc64     FF 1E 02 F6 | 	mov	local01, result3
0bc68     28 4E 05 F1 | 	add	fp, #40
0bc6c     A7 FA 61 FC | 	wrlong	result1, fp
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 FC 61 FC | 	wrlong	result2, fp
0bc78     04 4E 05 F1 | 	add	fp, #4
0bc7c     A7 1E 62 FC | 	wrlong	local01, fp
0bc80     08 4E 85 F1 | 	sub	fp, #8
0bc84     A7 12 02 F6 | 	mov	arg01, fp
0bc88     28 4E 85 F1 | 	sub	fp, #40
0bc8c     3C 50 B0 FD | 	call	#_converttoint
0bc90     FD 1E 02 F6 | 	mov	local01, result1
0bc94     10 4E 05 F1 | 	add	fp, #16
0bc98     A7 1E 62 FC | 	wrlong	local01, fp
0bc9c     10 4E 85 F1 | 	sub	fp, #16
0bca0                 | ' t1=pop()
0bca0                 | ' channel=converttoint(t1) : print channel
0bca0     00 12 06 F6 | 	mov	arg01, #0
0bca4     2C 28 B1 FD | 	call	#__system___getiolock_0417
0bca8     FD 12 02 F6 | 	mov	arg01, result1
0bcac     24 CF B0 FD | 	call	#__system___lockmem
0bcb0     10 4E 05 F1 | 	add	fp, #16
0bcb4     A7 14 02 FB | 	rdlong	arg02, fp
0bcb8     10 4E 85 F1 | 	sub	fp, #16
0bcbc     00 12 06 F6 | 	mov	arg01, #0
0bcc0     00 16 06 F6 | 	mov	arg03, #0
0bcc4     0A 18 06 F6 | 	mov	arg04, #10
0bcc8     3C DC B0 FD | 	call	#__system___basic_print_integer
0bccc     00 12 06 F6 | 	mov	arg01, #0
0bcd0     0A 14 06 F6 | 	mov	arg02, #10
0bcd4     00 16 06 F6 | 	mov	arg03, #0
0bcd8     90 DB B0 FD | 	call	#__system___basic_print_char
0bcdc     00 12 06 F6 | 	mov	arg01, #0
0bce0     F0 27 B1 FD | 	call	#__system___getiolock_0417
0bce4     FD 00 68 FC | 	wrlong	#0, result1
0bce8                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0bce8     08 4E 05 F1 | 	add	fp, #8
0bcec     02 00 80 FF 
0bcf0     A7 00 68 FC | 	wrlong	##1024, fp
0bcf4     08 4E 85 F1 | 	sub	fp, #8
0bcf8     0B 00 00 FF 
0bcfc     CC E5 05 F1 | 	add	objptr, ##6092
0bd00     97 18 48 FB | 	callpa	#(@LR__0933-@LR__0931)>>2,fcache_load_ptr_
0bd04                 | LR__0931
0bd04     02 00 00 FF 
0bd08     00 14 DC FC | 	rep	@LR__0934, ##1024
0bd0c                 | LR__0932
0bd0c     10 4E 05 F1 | 	add	fp, #16
0bd10     A7 20 02 FB | 	rdlong	local02, fp
0bd14     0B 20 66 F0 | 	shl	local02, #11
0bd18     F2 20 02 F1 | 	add	local02, objptr
0bd1c     0C 4E 85 F1 | 	sub	fp, #12
0bd20     A7 1E 02 FB | 	rdlong	local01, fp
0bd24     04 4E 85 F1 | 	sub	fp, #4
0bd28     01 1E 66 F0 | 	shl	local01, #1
0bd2c     10 1F 02 F1 | 	add	local01, local02
0bd30     0F 01 58 FC | 	wrword	#0, local01
0bd34                 | LR__0933
0bd34                 | LR__0934
0bd34     0B 00 00 FF 
0bd38     CC E5 85 F1 | 	sub	objptr, ##6092
0bd3c     1C 4E 05 F1 | 	add	fp, #28
0bd40     A7 00 68 FC | 	wrlong	#0, fp
0bd44                 | ' max=0
0bd44                 | ' if harm(0)<0 then
0bd44     1C 4E 05 F1 | 	add	fp, #28
0bd48     A7 12 02 FB | 	rdlong	arg01, fp
0bd4c     38 4E 85 F1 | 	sub	fp, #56
0bd50     00 14 06 F6 | 	mov	arg02, #0
0bd54     01 16 06 F6 | 	mov	arg03, #1
0bd58     94 FD B0 FD | 	call	#__system___float_cmp
0bd5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0bd60     04 01 90 3D |  if_ae	jmp	#LR__0937
0bd64     38 4E 05 F1 | 	add	fp, #56
0bd68     A7 FA 01 FB | 	rdlong	result1, fp
0bd6c     1F FA 05 F4 | 	bitl	result1, #31
0bd70     24 4E 85 F1 | 	sub	fp, #36
0bd74     A7 FA 61 FC | 	wrlong	result1, fp
0bd78     28 4E 05 F1 | 	add	fp, #40
0bd7c     A7 FA 01 FB | 	rdlong	result1, fp
0bd80     1F FA 05 F4 | 	bitl	result1, #31
0bd84     24 4E 85 F1 | 	sub	fp, #36
0bd88     A7 FA 61 FC | 	wrlong	result1, fp
0bd8c     20 4E 05 F1 | 	add	fp, #32
0bd90     00 C0 9F FF 
0bd94     A7 00 68 FC | 	wrlong	##1065353216, fp
0bd98     24 4E 85 F1 | 	sub	fp, #36
0bd9c     A7 1E 02 FB | 	rdlong	local01, fp
0bda0     28 4E 05 F1 | 	add	fp, #40
0bda4     A7 1E 62 FC | 	wrlong	local01, fp
0bda8     24 4E 85 F1 | 	sub	fp, #36
0bdac     A7 1E 02 FB | 	rdlong	local01, fp
0bdb0     28 4E 05 F1 | 	add	fp, #40
0bdb4     A7 1E 62 FC | 	wrlong	local01, fp
0bdb8                 | '   harm(0)=1
0bdb8                 | '   harm(1)=even
0bdb8                 | '   harm(2)=odd
0bdb8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0bdb8     3C 4E 85 F1 | 	sub	fp, #60
0bdbc     A7 06 68 FC | 	wrlong	#3, fp
0bdc0                 | LR__0935
0bdc0     A7 1A 02 FB | 	rdlong	arg05, fp
0bdc4     0D 25 02 F6 | 	mov	local04, arg05
0bdc8     02 24 66 F0 | 	shl	local04, #2
0bdcc     34 4E 05 F1 | 	add	fp, #52
0bdd0     A7 24 02 F1 | 	add	local04, fp
0bdd4     02 1A 86 F1 | 	sub	arg05, #2
0bdd8     02 1A 66 F0 | 	shl	arg05, #2
0bddc     A7 1A 02 F1 | 	add	arg05, fp
0bde0     0D 13 02 FB | 	rdlong	arg01, arg05
0bde4     24 4E 85 F1 | 	sub	fp, #36
0bde8     A7 14 02 FB | 	rdlong	arg02, fp
0bdec     14 4E 85 F1 | 	sub	fp, #20
0bdf0     C8 F8 B0 FD | 	call	#__system___float_mul
0bdf4     12 FB 61 FC | 	wrlong	result1, local04
0bdf8     04 4E 05 F1 | 	add	fp, #4
0bdfc     A7 26 02 FB | 	rdlong	local05, fp
0be00     02 26 06 F1 | 	add	local05, #2
0be04     A7 26 62 FC | 	wrlong	local05, fp
0be08     10 26 56 F2 | 	cmps	local05, #16 wc
0be0c     B0 FF 9F CD |  if_b	jmp	#LR__0935
0be10                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0be10     A7 08 68 FC | 	wrlong	#4, fp
0be14                 | LR__0936
0be14     A7 26 02 FB | 	rdlong	local05, fp
0be18     13 25 02 F6 | 	mov	local04, local05
0be1c     02 24 66 F0 | 	shl	local04, #2
0be20     34 4E 05 F1 | 	add	fp, #52
0be24     A7 24 02 F1 | 	add	local04, fp
0be28     02 26 86 F1 | 	sub	local05, #2
0be2c     02 26 66 F0 | 	shl	local05, #2
0be30     A7 26 02 F1 | 	add	local05, fp
0be34     13 13 02 FB | 	rdlong	arg01, local05
0be38     20 4E 85 F1 | 	sub	fp, #32
0be3c     A7 14 02 FB | 	rdlong	arg02, fp
0be40     18 4E 85 F1 | 	sub	fp, #24
0be44     74 F8 B0 FD | 	call	#__system___float_mul
0be48     12 FB 61 FC | 	wrlong	result1, local04
0be4c     04 4E 05 F1 | 	add	fp, #4
0be50     A7 26 02 FB | 	rdlong	local05, fp
0be54     02 26 06 F1 | 	add	local05, #2
0be58     A7 26 62 FC | 	wrlong	local05, fp
0be5c     0F 26 56 F2 | 	cmps	local05, #15 wc
0be60     B0 FF 9F CD |  if_b	jmp	#LR__0936
0be64     04 4E 85 F1 | 	sub	fp, #4
0be68                 | LR__0937
0be68                 | ' if harm(0)>=0 then ' synthesize with harmonics
0be68     38 4E 05 F1 | 	add	fp, #56
0be6c     A7 12 02 FB | 	rdlong	arg01, fp
0be70     38 4E 85 F1 | 	sub	fp, #56
0be74     00 14 06 F6 | 	mov	arg02, #0
0be78     01 16 66 F6 | 	neg	arg03, #1
0be7c     70 FC B0 FD | 	call	#__system___float_cmp
0be80     00 FA 55 F2 | 	cmps	result1, #0 wc
0be84     B0 02 90 CD |  if_b	jmp	#LR__0943
0be88                 | '   for i=0 to 1023
0be88     04 4E 05 F1 | 	add	fp, #4
0be8c     A7 00 68 FC | 	wrlong	#0, fp
0be90     04 4E 85 F1 | 	sub	fp, #4
0be94                 | LR__0938
0be94     20 4E 05 F1 | 	add	fp, #32
0be98     A7 00 68 FC | 	wrlong	#0, fp
0be9c                 | '     spl=0
0be9c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0be9c     18 4E 85 F1 | 	sub	fp, #24
0bea0     A7 00 68 FC | 	wrlong	#0, fp
0bea4                 | LR__0939
0bea4     A7 24 02 FB | 	rdlong	local04, fp
0bea8     02 24 66 F0 | 	shl	local04, #2
0beac     30 4E 05 F1 | 	add	fp, #48
0beb0     A7 24 02 F1 | 	add	local04, fp
0beb4     12 27 02 FB | 	rdlong	local05, local04
0beb8     87 E4 1D FF 
0bebc     DB 25 06 F6 | 	mov	local04, ##1003032539
0bec0     34 4E 85 F1 | 	sub	fp, #52
0bec4     A7 12 02 FB | 	rdlong	arg01, fp
0bec8     04 4E 85 F1 | 	sub	fp, #4
0becc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bed0     1F 22 C6 C9 |  if_b	decod	local03, #31
0bed4     00 22 06 36 |  if_ae	mov	local03, #0
0bed8     DC F3 B0 FD | 	call	#__system___float_fromuns
0bedc     11 FB 61 F5 | 	xor	result1, local03
0bee0     FD 14 02 F6 | 	mov	arg02, result1
0bee4     12 13 02 F6 | 	mov	arg01, local04
0bee8     D0 F7 B0 FD | 	call	#__system___float_mul
0beec     FD 24 02 F6 | 	mov	local04, result1
0bef0     08 4E 05 F1 | 	add	fp, #8
0bef4     A7 12 02 FB | 	rdlong	arg01, fp
0bef8     08 4E 85 F1 | 	sub	fp, #8
0befc     01 12 06 F1 | 	add	arg01, #1
0bf00     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf04     1F 22 C6 C9 |  if_b	decod	local03, #31
0bf08     00 22 06 36 |  if_ae	mov	local03, #0
0bf0c     A8 F3 B0 FD | 	call	#__system___float_fromuns
0bf10     11 FB 61 F5 | 	xor	result1, local03
0bf14     FD 14 02 F6 | 	mov	arg02, result1
0bf18     12 13 02 F6 | 	mov	arg01, local04
0bf1c     9C F7 B0 FD | 	call	#__system___float_mul
0bf20     FD 12 02 F6 | 	mov	arg01, result1
0bf24     D0 00 B1 FD | 	call	#__system____builtin_sinf
0bf28     FD 14 02 F6 | 	mov	arg02, result1
0bf2c     13 13 02 F6 | 	mov	arg01, local05
0bf30     88 F7 B0 FD | 	call	#__system___float_mul
0bf34     FD 14 02 F6 | 	mov	arg02, result1
0bf38     20 4E 05 F1 | 	add	fp, #32
0bf3c     A7 12 02 FB | 	rdlong	arg01, fp
0bf40     20 4E 85 F1 | 	sub	fp, #32
0bf44     A4 F3 B0 FD | 	call	#__system___float_add
0bf48     20 4E 05 F1 | 	add	fp, #32
0bf4c     A7 FA 61 FC | 	wrlong	result1, fp
0bf50     18 4E 85 F1 | 	sub	fp, #24
0bf54     A7 16 02 FB | 	rdlong	arg03, fp
0bf58     01 16 06 F1 | 	add	arg03, #1
0bf5c     A7 16 62 FC | 	wrlong	arg03, fp
0bf60     10 16 56 F2 | 	cmps	arg03, #16 wc
0bf64     3C FF 9F CD |  if_b	jmp	#LR__0939
0bf68                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0bf68     18 4E 05 F1 | 	add	fp, #24
0bf6c     A7 12 02 FB | 	rdlong	arg01, fp
0bf70     1F 12 06 F4 | 	bitl	arg01, #31
0bf74     04 4E 85 F1 | 	sub	fp, #4
0bf78     A7 14 02 FB | 	rdlong	arg02, fp
0bf7c     1C 4E 85 F1 | 	sub	fp, #28
0bf80     01 16 66 F6 | 	neg	arg03, #1
0bf84     68 FB B0 FD | 	call	#__system___float_cmp
0bf88     01 FA 55 F2 | 	cmps	result1, #1 wc
0bf8c     18 00 90 CD |  if_b	jmp	#LR__0940
0bf90     20 4E 05 F1 | 	add	fp, #32
0bf94     A7 FA 01 FB | 	rdlong	result1, fp
0bf98     1F FA 05 F4 | 	bitl	result1, #31
0bf9c     04 4E 85 F1 | 	sub	fp, #4
0bfa0     A7 FA 61 FC | 	wrlong	result1, fp
0bfa4     1C 4E 85 F1 | 	sub	fp, #28
0bfa8                 | LR__0940
0bfa8     04 4E 05 F1 | 	add	fp, #4
0bfac     A7 26 02 FB | 	rdlong	local05, fp
0bfb0     01 26 06 F1 | 	add	local05, #1
0bfb4     A7 26 62 FC | 	wrlong	local05, fp
0bfb8     04 4E 85 F1 | 	sub	fp, #4
0bfbc     02 00 00 FF 
0bfc0     00 26 56 F2 | 	cmps	local05, ##1024 wc
0bfc4     CC FE 9F CD |  if_b	jmp	#LR__0938
0bfc8                 | '   for i=0 to 1023
0bfc8     04 4E 05 F1 | 	add	fp, #4
0bfcc     A7 00 68 FC | 	wrlong	#0, fp
0bfd0     04 4E 85 F1 | 	sub	fp, #4
0bfd4                 | LR__0941
0bfd4     20 4E 05 F1 | 	add	fp, #32
0bfd8     A7 00 68 FC | 	wrlong	#0, fp
0bfdc                 | '     spl=0
0bfdc                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0bfdc     18 4E 85 F1 | 	sub	fp, #24
0bfe0     A7 00 68 FC | 	wrlong	#0, fp
0bfe4                 | LR__0942
0bfe4     A7 26 02 FB | 	rdlong	local05, fp
0bfe8     02 26 66 F0 | 	shl	local05, #2
0bfec     30 4E 05 F1 | 	add	fp, #48
0bff0     A7 26 02 F1 | 	add	local05, fp
0bff4     13 27 02 FB | 	rdlong	local05, local05
0bff8     1C 4E 85 F1 | 	sub	fp, #28
0bffc     A7 14 02 FB | 	rdlong	arg02, fp
0c000     1C 4E 85 F1 | 	sub	fp, #28
0c004     58 7F 23 FF 
0c008     00 12 06 F6 | 	mov	arg01, ##1191096320
0c00c     B0 F8 B0 FD | 	call	#__system___float_div
0c010     FD 14 02 F6 | 	mov	arg02, result1
0c014     13 13 02 F6 | 	mov	arg01, local05
0c018     A0 F6 B0 FD | 	call	#__system___float_mul
0c01c     FD 26 02 F6 | 	mov	local05, result1
0c020     87 E4 1D FF 
0c024     DB 25 06 F6 | 	mov	local04, ##1003032539
0c028     04 4E 05 F1 | 	add	fp, #4
0c02c     A7 12 02 FB | 	rdlong	arg01, fp
0c030     04 4E 85 F1 | 	sub	fp, #4
0c034     09 13 52 F6 | 	abs	arg01, arg01 wc
0c038     1F 22 C6 C9 |  if_b	decod	local03, #31
0c03c     00 22 06 36 |  if_ae	mov	local03, #0
0c040     74 F2 B0 FD | 	call	#__system___float_fromuns
0c044     11 FB 61 F5 | 	xor	result1, local03
0c048     FD 14 02 F6 | 	mov	arg02, result1
0c04c     12 13 02 F6 | 	mov	arg01, local04
0c050     68 F6 B0 FD | 	call	#__system___float_mul
0c054     FD 24 02 F6 | 	mov	local04, result1
0c058     08 4E 05 F1 | 	add	fp, #8
0c05c     A7 12 02 FB | 	rdlong	arg01, fp
0c060     08 4E 85 F1 | 	sub	fp, #8
0c064     01 12 06 F1 | 	add	arg01, #1
0c068     09 13 52 F6 | 	abs	arg01, arg01 wc
0c06c     1F 22 C6 C9 |  if_b	decod	local03, #31
0c070     00 22 06 36 |  if_ae	mov	local03, #0
0c074     40 F2 B0 FD | 	call	#__system___float_fromuns
0c078     11 FB 61 F5 | 	xor	result1, local03
0c07c     FD 14 02 F6 | 	mov	arg02, result1
0c080     12 13 02 F6 | 	mov	arg01, local04
0c084     34 F6 B0 FD | 	call	#__system___float_mul
0c088     FD 12 02 F6 | 	mov	arg01, result1
0c08c     68 FF B0 FD | 	call	#__system____builtin_sinf
0c090     FD 14 02 F6 | 	mov	arg02, result1
0c094     13 13 02 F6 | 	mov	arg01, local05
0c098     20 F6 B0 FD | 	call	#__system___float_mul
0c09c     FD 14 02 F6 | 	mov	arg02, result1
0c0a0     20 4E 05 F1 | 	add	fp, #32
0c0a4     A7 12 02 FB | 	rdlong	arg01, fp
0c0a8     20 4E 85 F1 | 	sub	fp, #32
0c0ac     3C F2 B0 FD | 	call	#__system___float_add
0c0b0     20 4E 05 F1 | 	add	fp, #32
0c0b4     A7 FA 61 FC | 	wrlong	result1, fp
0c0b8     18 4E 85 F1 | 	sub	fp, #24
0c0bc     A7 26 02 FB | 	rdlong	local05, fp
0c0c0     01 26 06 F1 | 	add	local05, #1
0c0c4     A7 26 62 FC | 	wrlong	local05, fp
0c0c8     10 26 56 F2 | 	cmps	local05, #16 wc
0c0cc     14 FF 9F CD |  if_b	jmp	#LR__0942
0c0d0     08 4E 05 F1 | 	add	fp, #8
0c0d4     A7 26 02 FB | 	rdlong	local05, fp
0c0d8     0B 26 66 F0 | 	shl	local05, #11
0c0dc     0B 00 00 FF 
0c0e0     CC E5 05 F1 | 	add	objptr, ##6092
0c0e4     F2 26 02 F1 | 	add	local05, objptr
0c0e8     0C 4E 85 F1 | 	sub	fp, #12
0c0ec     A7 20 02 FB | 	rdlong	local02, fp
0c0f0     01 20 66 F0 | 	shl	local02, #1
0c0f4     13 21 02 F1 | 	add	local02, local05
0c0f8     1C 4E 05 F1 | 	add	fp, #28
0c0fc     A7 12 02 FB | 	rdlong	arg01, fp
0c100     20 4E 85 F1 | 	sub	fp, #32
0c104     0B 00 00 FF 
0c108     CC E5 85 F1 | 	sub	objptr, ##6092
0c10c     01 14 06 F6 | 	mov	arg02, #1
0c110     70 FA B0 FD | 	call	#__system___float_tointeger
0c114     10 FB 51 FC | 	wrword	result1, local02
0c118     04 4E 05 F1 | 	add	fp, #4
0c11c     A7 26 02 FB | 	rdlong	local05, fp
0c120     01 26 06 F1 | 	add	local05, #1
0c124     A7 26 62 FC | 	wrlong	local05, fp
0c128     04 4E 85 F1 | 	sub	fp, #4
0c12c     02 00 00 FF 
0c130     00 26 56 F2 | 	cmps	local05, ##1024 wc
0c134     9C FE 9F CD |  if_b	jmp	#LR__0941
0c138                 | LR__0943
0c138                 | LR__0944
0c138     A7 F0 03 F6 | 	mov	ptra, fp
0c13c     B2 00 A0 FD | 	call	#popregs_
0c140                 | _do_defsnd_ret
0c140     2D 00 64 FD | 	ret
0c144                 | 
0c144                 | ' 
0c144                 | ' ' ---------------  List the program. 
0c144                 | ' 
0c144                 | ' sub do_list
0c144                 | _do_list
0c144     02 4A 05 F6 | 	mov	COUNT_, #2
0c148     A8 00 A0 FD | 	call	#pushregs_
0c14c     B8 F0 07 F1 | 	add	ptra, #184
0c150     04 4E 05 F1 | 	add	fp, #4
0c154     A7 00 68 FC | 	wrlong	#0, fp
0c158     04 4E 05 F1 | 	add	fp, #4
0c15c     FF FF BF FF 
0c160     A7 FE 6B FC | 	wrlong	##2147483647, fp
0c164     08 4E 85 F1 | 	sub	fp, #8
0c168     69 00 00 FF 
0c16c     54 E4 05 F1 | 	add	objptr, ##53844
0c170     F2 1E 02 FB | 	rdlong	local01, objptr
0c174     0F 17 02 F6 | 	mov	arg03, local01
0c178     01 16 66 F0 | 	shl	arg03, #1
0c17c     0F 17 02 F1 | 	add	arg03, local01
0c180     02 16 66 F0 | 	shl	arg03, #2
0c184     03 00 00 FF 
0c188     04 E4 85 F1 | 	sub	objptr, ##1540
0c18c     F2 16 02 F1 | 	add	arg03, objptr
0c190     0B 17 02 FB | 	rdlong	arg03, arg03
0c194     A7 16 62 FC | 	wrlong	arg03, fp
0c198                 | ' 
0c198                 | ' startline=0 : endline=$7FFFFFFF
0c198                 | ' numpar=compiledline(lineptr_e).result.uresult
0c198                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0c198     01 16 0E F2 | 	cmp	arg03, #1 wz
0c19c     66 00 00 FF 
0c1a0     50 E4 85 F1 | 	sub	objptr, ##52304
0c1a4     3C 00 90 5D |  if_ne	jmp	#LR__0950
0c1a8     90 D6 BF FD | 	call	#_pop
0c1ac     FF 1E 02 F6 | 	mov	local01, result3
0c1b0     0C 4E 05 F1 | 	add	fp, #12
0c1b4     A7 FA 61 FC | 	wrlong	result1, fp
0c1b8     04 4E 05 F1 | 	add	fp, #4
0c1bc     A7 FC 61 FC | 	wrlong	result2, fp
0c1c0     04 4E 05 F1 | 	add	fp, #4
0c1c4     A7 1E 62 FC | 	wrlong	local01, fp
0c1c8     08 4E 85 F1 | 	sub	fp, #8
0c1cc     A7 12 02 F6 | 	mov	arg01, fp
0c1d0     0C 4E 85 F1 | 	sub	fp, #12
0c1d4     F4 4A B0 FD | 	call	#_converttoint
0c1d8     04 4E 05 F1 | 	add	fp, #4
0c1dc     A7 FA 61 FC | 	wrlong	result1, fp
0c1e0     04 4E 85 F1 | 	sub	fp, #4
0c1e4                 | LR__0950
0c1e4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0c1e4     A7 16 02 FB | 	rdlong	arg03, fp
0c1e8     02 16 0E F2 | 	cmp	arg03, #2 wz
0c1ec     7C 00 90 5D |  if_ne	jmp	#LR__0951
0c1f0     48 D6 BF FD | 	call	#_pop
0c1f4     FF 1E 02 F6 | 	mov	local01, result3
0c1f8     0C 4E 05 F1 | 	add	fp, #12
0c1fc     A7 FA 61 FC | 	wrlong	result1, fp
0c200     04 4E 05 F1 | 	add	fp, #4
0c204     A7 FC 61 FC | 	wrlong	result2, fp
0c208     04 4E 05 F1 | 	add	fp, #4
0c20c     A7 1E 62 FC | 	wrlong	local01, fp
0c210     08 4E 85 F1 | 	sub	fp, #8
0c214     A7 12 02 F6 | 	mov	arg01, fp
0c218     0C 4E 85 F1 | 	sub	fp, #12
0c21c     AC 4A B0 FD | 	call	#_converttoint
0c220     FD 1E 02 F6 | 	mov	local01, result1
0c224     08 4E 05 F1 | 	add	fp, #8
0c228     A7 1E 62 FC | 	wrlong	local01, fp
0c22c     08 4E 85 F1 | 	sub	fp, #8
0c230     08 D6 BF FD | 	call	#_pop
0c234     FF 1E 02 F6 | 	mov	local01, result3
0c238     0C 4E 05 F1 | 	add	fp, #12
0c23c     A7 FA 61 FC | 	wrlong	result1, fp
0c240     04 4E 05 F1 | 	add	fp, #4
0c244     A7 FC 61 FC | 	wrlong	result2, fp
0c248     04 4E 05 F1 | 	add	fp, #4
0c24c     A7 1E 62 FC | 	wrlong	local01, fp
0c250     08 4E 85 F1 | 	sub	fp, #8
0c254     A7 12 02 F6 | 	mov	arg01, fp
0c258     0C 4E 85 F1 | 	sub	fp, #12
0c25c     6C 4A B0 FD | 	call	#_converttoint
0c260     04 4E 05 F1 | 	add	fp, #4
0c264     A7 FA 61 FC | 	wrlong	result1, fp
0c268     04 4E 85 F1 | 	sub	fp, #4
0c26c                 | LR__0951
0c26c                 | ' 
0c26c                 | ' 
0c26c                 | ' print
0c26c     00 12 06 F6 | 	mov	arg01, #0
0c270     60 22 B1 FD | 	call	#__system___getiolock_0417
0c274     FD 12 02 F6 | 	mov	arg01, result1
0c278     58 C9 B0 FD | 	call	#__system___lockmem
0c27c     00 12 06 F6 | 	mov	arg01, #0
0c280     0A 14 06 F6 | 	mov	arg02, #10
0c284     00 16 06 F6 | 	mov	arg03, #0
0c288     E0 D5 B0 FD | 	call	#__system___basic_print_char
0c28c     00 12 06 F6 | 	mov	arg01, #0
0c290     40 22 B1 FD | 	call	#__system___getiolock_0417
0c294     FD 00 68 FC | 	wrlong	#0, result1
0c298     69 00 00 FF 
0c29c     58 E4 05 F1 | 	add	objptr, ##53848
0c2a0     F2 20 02 FB | 	rdlong	local02, objptr
0c2a4     11 00 00 FF 
0c2a8     6C E4 05 F1 | 	add	objptr, ##8812
0c2ac     F2 20 62 FC | 	wrlong	local02, objptr
0c2b0     7A 00 00 FF 
0c2b4     C4 E4 85 F1 | 	sub	objptr, ##62660
0c2b8                 | ' do 
0c2b8                 | LR__0952
0c2b8     20 4E 05 F1 | 	add	fp, #32
0c2bc     A7 12 02 F6 | 	mov	arg01, fp
0c2c0     20 4E 85 F1 | 	sub	fp, #32
0c2c4     7A 00 00 FF 
0c2c8     C4 E4 05 F1 | 	add	objptr, ##62660
0c2cc     F2 14 02 FB | 	rdlong	arg02, objptr
0c2d0     18 16 06 F6 | 	mov	arg03, #24
0c2d4     6F 00 00 FF 
0c2d8     04 E4 85 F1 | 	sub	objptr, ##56836
0c2dc     04 BE B0 FD | 	call	#_psram_spin2_read1
0c2e0     0B 00 00 FF 
0c2e4     C0 E4 85 F1 | 	sub	objptr, ##5824
0c2e8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0c2e8                 | '   if header(0)<> $FFFFFFFF then
0c2e8     20 4E 05 F1 | 	add	fp, #32
0c2ec     A7 20 02 FB | 	rdlong	local02, fp
0c2f0     20 4E 85 F1 | 	sub	fp, #32
0c2f4     FF FF 7F FF 
0c2f8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0c2fc     A8 00 90 AD |  if_e	jmp	#LR__0954
0c300     38 4E 05 F1 | 	add	fp, #56
0c304     3F 16 06 F6 | 	mov	arg03, #63
0c308     28 16 62 FD | 	setq	arg03
0c30c     A7 00 68 FC | 	wrlong	#0, fp
0c310     A7 12 02 F6 | 	mov	arg01, fp
0c314     10 4E 85 F1 | 	sub	fp, #16
0c318     A7 14 02 FB | 	rdlong	arg02, fp
0c31c     04 4E 05 F1 | 	add	fp, #4
0c320     A7 16 02 FB | 	rdlong	arg03, fp
0c324     2C 4E 85 F1 | 	sub	fp, #44
0c328     0B 00 00 FF 
0c32c     C0 E4 05 F1 | 	add	objptr, ##5824
0c330     B0 BD B0 FD | 	call	#_psram_spin2_read1
0c334     0B 00 00 FF 
0c338     C0 E4 85 F1 | 	sub	objptr, ##5824
0c33c                 | '     longfill(linebuf,0,64)
0c33c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c33c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c33c     20 4E 05 F1 | 	add	fp, #32
0c340     A7 20 02 FB | 	rdlong	local02, fp
0c344     1C 4E 85 F1 | 	sub	fp, #28
0c348     A7 1E 02 FB | 	rdlong	local01, fp
0c34c     04 4E 85 F1 | 	sub	fp, #4
0c350     0F 21 52 F2 | 	cmps	local02, local01 wc
0c354     30 00 90 CD |  if_b	jmp	#LR__0953
0c358     20 4E 05 F1 | 	add	fp, #32
0c35c     A7 20 02 FB | 	rdlong	local02, fp
0c360     18 4E 85 F1 | 	sub	fp, #24
0c364     A7 16 02 FB | 	rdlong	arg03, fp
0c368     08 4E 85 F1 | 	sub	fp, #8
0c36c     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c370     14 00 90 1D |  if_a	jmp	#LR__0953
0c374     38 4E 05 F1 | 	add	fp, #56
0c378     A7 12 02 F6 | 	mov	arg01, fp
0c37c     38 4E 85 F1 | 	sub	fp, #56
0c380                 | ' 
0c380                 | ' write(text)
0c380     28 B8 B0 FD | 	call	#_hg010b_spin2_write
0c384                 | ' crlf
0c384     84 B9 B0 FD | 	call	#_hg010b_spin2_crlf
0c388                 | LR__0953
0c388     34 4E 05 F1 | 	add	fp, #52
0c38c     A7 20 02 FB | 	rdlong	local02, fp
0c390     34 4E 85 F1 | 	sub	fp, #52
0c394     7A 00 00 FF 
0c398     C4 E4 05 F1 | 	add	objptr, ##62660
0c39c     F2 20 62 FC | 	wrlong	local02, objptr
0c3a0     7A 00 00 FF 
0c3a4     C4 E4 85 F1 | 	sub	objptr, ##62660
0c3a8                 | LR__0954
0c3a8     34 4E 05 F1 | 	add	fp, #52
0c3ac     A7 20 02 FB | 	rdlong	local02, fp
0c3b0     34 4E 85 F1 | 	sub	fp, #52
0c3b4     FF FF 3F FF 
0c3b8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c3bc     20 4E 05 51 |  if_ne	add	fp, #32
0c3c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c3c4     20 4E 85 51 |  if_ne	sub	fp, #32
0c3c8     FF FF 7F 5F 
0c3cc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c3d0     E4 FE 9F 5D |  if_ne	jmp	#LR__0952
0c3d4     A7 F0 03 F6 | 	mov	ptra, fp
0c3d8     B2 00 A0 FD | 	call	#popregs_
0c3dc                 | _do_list_ret
0c3dc     2D 00 64 FD | 	ret
0c3e0                 | 
0c3e0                 | ' 
0c3e0                 | ' '---------------- Clear the program
0c3e0                 | ' 
0c3e0                 | ' sub do_new
0c3e0                 | _do_new
0c3e0     03 4A 05 F6 | 	mov	COUNT_, #3
0c3e4     A8 00 A0 FD | 	call	#pushregs_
0c3e8     00 12 06 F6 | 	mov	arg01, #0
0c3ec     01 14 66 F6 | 	neg	arg02, #1
0c3f0     01 16 06 F6 | 	mov	arg03, #1
0c3f4     00 18 06 F6 | 	mov	arg04, #0
0c3f8     0B 00 00 FF 
0c3fc     C0 E4 05 F1 | 	add	objptr, ##5824
0c400                 | '     return fill(addr, pattern, count, listPtr, 4)
0c400     04 1A 06 F6 | 	mov	arg05, #4
0c404     14 BE B0 FD | 	call	#_psram_spin2_fill
0c408     48 00 00 FF 
0c40c     1C E5 05 F1 | 	add	objptr, ##37148
0c410     F2 00 68 FC | 	wrlong	#0, objptr
0c414     15 00 00 FF 
0c418     7C E4 05 F1 | 	add	objptr, ##10876
0c41c     F2 00 68 FC | 	wrlong	#0, objptr
0c420     0F 00 00 FF 
0c424     2C E5 05 F1 | 	add	objptr, ##7980
0c428     F2 00 68 FC | 	wrlong	#0, objptr
0c42c     04 E4 05 F1 | 	add	objptr, #4
0c430     F2 00 68 FC | 	wrlong	#0, objptr
0c434     16 00 00 FF 
0c438     5C E5 85 F1 | 	sub	objptr, ##11612
0c43c     F2 00 68 FC | 	wrlong	#0, objptr
0c440     07 00 00 FF 
0c444     24 E4 05 F1 | 	add	objptr, ##3620
0c448     F2 00 68 FC | 	wrlong	#0, objptr
0c44c     07 00 00 FF 
0c450     20 E4 85 F1 | 	sub	objptr, ##3616
0c454     F2 00 68 FC | 	wrlong	#0, objptr
0c458     0F 00 00 FF 
0c45c     34 E4 05 F1 | 	add	objptr, ##7732
0c460     F2 00 68 FC | 	wrlong	#0, objptr
0c464     08 00 00 FF 
0c468     08 E4 85 F1 | 	sub	objptr, ##4104
0c46c     F2 00 68 FC | 	wrlong	#0, objptr
0c470     04 E4 05 F1 | 	add	objptr, #4
0c474     FF FF FF FF 
0c478     F2 FE 6B FC | 	wrlong	##-1, objptr
0c47c     0F 00 00 FF 
0c480     4C E5 05 F1 | 	add	objptr, ##8012
0c484     F2 00 68 FC | 	wrlong	#0, objptr
0c488                 | ' 
0c488                 | ' pslpoke(0,$FFFFFFFF)
0c488                 | ' varnum=0
0c488                 | ' programstart=0 :runptr=0 : runptr2=0
0c488                 | ' stackpointer=0
0c488                 | ' lineptr=0 
0c488                 | ' programptr=0 : stringptr=0
0c488                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c488                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c488     00 1E 06 F6 | 	mov	local01, #0
0c48c     07 00 00 FF 
0c490     40 E5 85 F1 | 	sub	objptr, ##3904
0c494     97 16 48 FB | 	callpa	#(@LR__0961-@LR__0960)>>2,fcache_load_ptr_
0c498                 | LR__0960
0c498     0F 21 02 F6 | 	mov	local02, local01
0c49c     02 20 66 F0 | 	shl	local02, #2
0c4a0     0F 21 02 F1 | 	add	local02, local01
0c4a4     02 20 66 F0 | 	shl	local02, #2
0c4a8     F2 20 02 F1 | 	add	local02, objptr
0c4ac     08 20 06 F1 | 	add	local02, #8
0c4b0     FF FF FF FF 
0c4b4     10 FF 6B FC | 	wrlong	##-1, local02
0c4b8     01 1E 06 F1 | 	add	local01, #1
0c4bc     81 1E 56 F2 | 	cmps	local01, #129 wc
0c4c0     D4 FF 9F CD |  if_b	jmp	#LR__0960
0c4c4                 | LR__0961
0c4c4     71 00 00 FF 
0c4c8     6C E4 85 F1 | 	sub	objptr, ##57964
0c4cc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c4cc     00 1E 06 F6 | 	mov	local01, #0
0c4d0                 | LR__0962
0c4d0     0F 21 02 F6 | 	mov	local02, local01
0c4d4     02 20 66 F0 | 	shl	local02, #2
0c4d8     7A 00 00 FF 
0c4dc     08 E4 05 F1 | 	add	objptr, ##62472
0c4e0     F2 20 02 F1 | 	add	local02, objptr
0c4e4     10 21 0A FB | 	rdlong	local02, local02 wz
0c4e8     7A 00 00 FF 
0c4ec     08 E4 85 F1 | 	sub	objptr, ##62472
0c4f0     34 00 90 AD |  if_e	jmp	#LR__0963
0c4f4     0F 13 02 F6 | 	mov	arg01, local01
0c4f8     00 14 06 F6 | 	mov	arg02, #0
0c4fc     00 16 06 F6 | 	mov	arg03, #0
0c500     34 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c504     0F 21 02 F6 | 	mov	local02, local01
0c508     02 20 66 F0 | 	shl	local02, #2
0c50c     7A 00 00 FF 
0c510     08 E4 05 F1 | 	add	objptr, ##62472
0c514     F2 20 02 F1 | 	add	local02, objptr
0c518     10 13 02 FB | 	rdlong	arg01, local02
0c51c     7A 00 00 FF 
0c520     08 E4 85 F1 | 	sub	objptr, ##62472
0c524     9C 05 B1 FD | 	call	#__system___gc_free
0c528                 | LR__0963
0c528     F2 22 02 FB | 	rdlong	local03, objptr
0c52c     7A 00 00 FF 
0c530     4C E4 05 F1 | 	add	objptr, ##62540
0c534     F2 22 62 FC | 	wrlong	local03, objptr
0c538     7A 00 00 FF 
0c53c     4C E4 85 F1 | 	sub	objptr, ##62540
0c540     11 12 06 F6 | 	mov	arg01, #17
0c544     08 14 06 F6 | 	mov	arg02, #8
0c548     10 16 06 F6 | 	mov	arg03, #16
0c54c     E8 A6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c550     01 1E 06 F1 | 	add	local01, #1
0c554     10 1E 56 F2 | 	cmps	local01, #16 wc
0c558     74 FF 9F CD |  if_b	jmp	#LR__0962
0c55c     A7 F0 03 F6 | 	mov	ptra, fp
0c560     B2 00 A0 FD | 	call	#popregs_
0c564                 | _do_new_ret
0c564     2D 00 64 FD | 	ret
0c568                 | 
0c568                 | ' 
0c568                 | ' '----------------------- goto
0c568                 | ' sub do_fast_goto
0c568                 | _do_fast_goto
0c568     02 4A 05 F6 | 	mov	COUNT_, #2
0c56c     A8 00 A0 FD | 	call	#pushregs_
0c570                 | _do_fast_goto_enter
0c570     69 00 00 FF 
0c574     54 E4 05 F1 | 	add	objptr, ##53844
0c578     F2 12 02 FB | 	rdlong	arg01, objptr
0c57c     09 1F 02 F6 | 	mov	local01, arg01
0c580     01 1E 66 F0 | 	shl	local01, #1
0c584     09 1F 02 F1 | 	add	local01, arg01
0c588     02 1E 66 F0 | 	shl	local01, #2
0c58c     03 00 00 FF 
0c590     04 E4 85 F1 | 	sub	objptr, ##1540
0c594     F2 1E 02 F1 | 	add	local01, objptr
0c598     0F 21 02 FB | 	rdlong	local02, local01
0c59c     10 13 02 F6 | 	mov	arg01, local02
0c5a0     66 00 00 FF 
0c5a4     50 E4 85 F1 | 	sub	objptr, ##52304
0c5a8     C0 92 B0 FD | 	call	#_pslpeek
0c5ac     FD 12 02 F6 | 	mov	arg01, result1
0c5b0                 | ' 
0c5b0                 | ' testptr=compiledline(lineptr_e).result.uresult
0c5b0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c5b0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c5b0     69 00 00 FF 
0c5b4     54 E4 05 F1 | 	add	objptr, ##53844
0c5b8     F2 FA 01 FB | 	rdlong	result1, objptr
0c5bc     FD 1E 02 F6 | 	mov	local01, result1
0c5c0     01 1E 66 F0 | 	shl	local01, #1
0c5c4     FD 1E 02 F1 | 	add	local01, result1
0c5c8     02 1E 66 F0 | 	shl	local01, #2
0c5cc     03 00 00 FF 
0c5d0     04 E4 85 F1 | 	sub	objptr, ##1540
0c5d4     F2 1E 02 F1 | 	add	local01, objptr
0c5d8     04 1E 06 F1 | 	add	local01, #4
0c5dc     0F 1F 02 FB | 	rdlong	local01, local01
0c5e0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c5e4     66 00 00 FF 
0c5e8     50 E4 85 F1 | 	sub	objptr, ##52304
0c5ec     58 00 90 5D |  if_ne	jmp	#LR__0970
0c5f0     78 00 00 FF 
0c5f4     84 E5 05 F1 | 	add	objptr, ##61828
0c5f8     F2 20 62 FC | 	wrlong	local02, objptr
0c5fc     0F 00 00 FF 
0c600     34 E5 85 F1 | 	sub	objptr, ##7988
0c604     F2 20 02 FB | 	rdlong	local02, objptr
0c608     01 20 86 F1 | 	sub	local02, #1
0c60c     04 E4 05 F1 | 	add	objptr, #4
0c610     F2 20 62 FC | 	wrlong	local02, objptr
0c614                 | '   runptr=testptr
0c614                 | '   lineptr_e=lineptr-1
0c614                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c614     0F 00 00 FF 
0c618     54 E5 05 F1 | 	add	objptr, ##8020
0c61c     F2 20 02 FB | 	rdlong	local02, objptr
0c620     78 00 00 FF 
0c624     A8 E5 85 F1 | 	sub	objptr, ##61864
0c628     FF FF 3F FF 
0c62c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c630     78 00 00 AF 
0c634     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0c638     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c63c     78 00 00 AF 
0c640     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0c644     04 00 90 FD | 	jmp	#LR__0971
0c648                 | LR__0970
0c648     0C 00 B0 FD | 	call	#_do_find_goto
0c64c                 | LR__0971
0c64c     A7 F0 03 F6 | 	mov	ptra, fp
0c650     B2 00 A0 FD | 	call	#popregs_
0c654                 | _do_fast_goto_ret
0c654     2D 00 64 FD | 	ret
0c658                 | 
0c658                 | ' 
0c658                 | ' 
0c658                 | ' 
0c658                 | ' 
0c658                 | ' sub do_find_goto
0c658                 | _do_find_goto
0c658     03 4A 05 F6 | 	mov	COUNT_, #3
0c65c     A8 00 A0 FD | 	call	#pushregs_
0c660     24 F0 07 F1 | 	add	ptra, #36
0c664                 | _do_find_goto_enter
0c664     69 00 00 FF 
0c668     54 E4 05 F1 | 	add	objptr, ##53844
0c66c     F2 1E 02 FB | 	rdlong	local01, objptr
0c670     0F 21 02 F6 | 	mov	local02, local01
0c674     01 20 66 F0 | 	shl	local02, #1
0c678     0F 21 02 F1 | 	add	local02, local01
0c67c     02 20 66 F0 | 	shl	local02, #2
0c680     03 00 00 FF 
0c684     04 E4 85 F1 | 	sub	objptr, ##1540
0c688     F2 20 02 F1 | 	add	local02, objptr
0c68c     04 20 06 F1 | 	add	local02, #4
0c690     10 21 02 FB | 	rdlong	local02, local02
0c694     A7 20 62 FC | 	wrlong	local02, fp
0c698     03 00 00 FF 
0c69c     08 E4 05 F1 | 	add	objptr, ##1544
0c6a0     F2 22 02 FB | 	rdlong	local03, objptr
0c6a4     69 00 00 FF 
0c6a8     58 E4 85 F1 | 	sub	objptr, ##53848
0c6ac     04 4E 05 F1 | 	add	fp, #4
0c6b0     A7 22 62 FC | 	wrlong	local03, fp
0c6b4     04 4E 85 F1 | 	sub	fp, #4
0c6b8                 | ' 
0c6b8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c6b8                 | '  ' print "find goto"                                                                     'print gotoline 
0c6b8                 | ' gotoptr=programstart
0c6b8                 | ' do
0c6b8                 | LR__0980
0c6b8     0C 4E 05 F1 | 	add	fp, #12
0c6bc     A7 12 02 F6 | 	mov	arg01, fp
0c6c0     08 4E 85 F1 | 	sub	fp, #8
0c6c4     A7 14 02 FB | 	rdlong	arg02, fp
0c6c8     04 4E 85 F1 | 	sub	fp, #4
0c6cc     18 16 06 F6 | 	mov	arg03, #24
0c6d0     0B 00 00 FF 
0c6d4     C0 E4 05 F1 | 	add	objptr, ##5824
0c6d8     08 BA B0 FD | 	call	#_psram_spin2_read1
0c6dc     0B 00 00 FF 
0c6e0     C0 E4 85 F1 | 	sub	objptr, ##5824
0c6e4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c6e4                 | '   if gotoheader(0)<>$FFFFFFFF then
0c6e4     0C 4E 05 F1 | 	add	fp, #12
0c6e8     A7 22 02 FB | 	rdlong	local03, fp
0c6ec     0C 4E 85 F1 | 	sub	fp, #12
0c6f0     FF FF 7F FF 
0c6f4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c6f8     24 00 90 AD |  if_e	jmp	#LR__0981
0c6fc     04 4E 05 F1 | 	add	fp, #4
0c700     A7 22 02 FB | 	rdlong	local03, fp
0c704     04 4E 05 F1 | 	add	fp, #4
0c708     A7 22 62 FC | 	wrlong	local03, fp
0c70c     18 4E 05 F1 | 	add	fp, #24
0c710     A7 22 02 FB | 	rdlong	local03, fp
0c714     1C 4E 85 F1 | 	sub	fp, #28
0c718     A7 22 62 FC | 	wrlong	local03, fp
0c71c     04 4E 85 F1 | 	sub	fp, #4
0c720                 | LR__0981
0c720     20 4E 05 F1 | 	add	fp, #32
0c724     A7 22 02 FB | 	rdlong	local03, fp
0c728     20 4E 85 F1 | 	sub	fp, #32
0c72c     FF FF 3F FF 
0c730     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c734     0C 4E 05 51 |  if_ne	add	fp, #12
0c738     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c73c     0C 4E 85 51 |  if_ne	sub	fp, #12
0c740     FF FF 7F 5F 
0c744     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c748     18 00 90 AD |  if_e	jmp	#LR__0982
0c74c     0C 4E 05 F1 | 	add	fp, #12
0c750     A7 22 02 FB | 	rdlong	local03, fp
0c754     0C 4E 85 F1 | 	sub	fp, #12
0c758     A7 20 02 FB | 	rdlong	local02, fp
0c75c     10 23 0A F2 | 	cmp	local03, local02 wz
0c760     54 FF 9F 5D |  if_ne	jmp	#LR__0980
0c764                 | LR__0982
0c764                 | ' 
0c764                 | ' if gotoheader(0)=gotoline then
0c764     0C 4E 05 F1 | 	add	fp, #12
0c768     A7 22 02 FB | 	rdlong	local03, fp
0c76c     0C 4E 85 F1 | 	sub	fp, #12
0c770     A7 1E 02 FB | 	rdlong	local01, fp
0c774     0F 23 0A F2 | 	cmp	local03, local01 wz
0c778     D8 00 90 5D |  if_ne	jmp	#LR__0983
0c77c     69 00 00 FF 
0c780     54 E4 05 F1 | 	add	objptr, ##53844
0c784     F2 1E 02 FB | 	rdlong	local01, objptr
0c788     0F 21 02 F6 | 	mov	local02, local01
0c78c     01 20 66 F0 | 	shl	local02, #1
0c790     0F 21 02 F1 | 	add	local02, local01
0c794     02 20 66 F0 | 	shl	local02, #2
0c798     03 00 00 FF 
0c79c     04 E4 85 F1 | 	sub	objptr, ##1540
0c7a0     F2 20 02 F1 | 	add	local02, objptr
0c7a4     08 4E 05 F1 | 	add	fp, #8
0c7a8     A7 22 02 FB | 	rdlong	local03, fp
0c7ac     10 23 62 FC | 	wrlong	local03, local02
0c7b0     03 00 00 FF 
0c7b4     04 E4 05 F1 | 	add	objptr, ##1540
0c7b8     F2 1E 02 FB | 	rdlong	local01, objptr
0c7bc     0F 21 02 F6 | 	mov	local02, local01
0c7c0     01 20 66 F0 | 	shl	local02, #1
0c7c4     0F 21 02 F1 | 	add	local02, local01
0c7c8     02 20 66 F0 | 	shl	local02, #2
0c7cc     03 00 00 FF 
0c7d0     04 E4 85 F1 | 	sub	objptr, ##1540
0c7d4     F2 20 02 F1 | 	add	local02, objptr
0c7d8     08 20 06 F1 | 	add	local02, #8
0c7dc     10 9D 68 FC | 	wrlong	#78, local02
0c7e0     03 00 00 FF 
0c7e4     04 E4 05 F1 | 	add	objptr, ##1540
0c7e8     F2 20 02 FB | 	rdlong	local02, objptr
0c7ec     10 13 02 F6 | 	mov	arg01, local02
0c7f0     01 12 66 F0 | 	shl	arg01, #1
0c7f4     10 13 02 F1 | 	add	arg01, local02
0c7f8     02 12 66 F0 | 	shl	arg01, #2
0c7fc     03 00 00 FF 
0c800     04 E4 85 F1 | 	sub	objptr, ##1540
0c804     F2 12 02 F1 | 	add	arg01, objptr
0c808     12 00 00 FF 
0c80c     3C E5 05 F1 | 	add	objptr, ##9532
0c810     F2 14 02 FB | 	rdlong	arg02, objptr
0c814     02 22 06 F6 | 	mov	local03, #2
0c818     10 23 02 F1 | 	add	local03, local02
0c81c     14 00 00 FF 
0c820     54 E5 85 F1 | 	sub	objptr, ##10580
0c824     F2 16 02 FB | 	rdlong	arg03, objptr
0c828     0B 23 02 FD | 	qmul	local03, arg03
0c82c     08 4E 85 F1 | 	sub	fp, #8
0c830     58 00 00 FF 
0c834     78 E5 85 F1 | 	sub	objptr, ##45432
0c838     18 22 62 FD | 	getqx	local03
0c83c     11 15 02 F1 | 	add	arg02, local03
0c840     3C B9 B0 FD | 	call	#_psram_spin2_write
0c844     0B 00 00 FF 
0c848     C0 E4 85 F1 | 	sub	objptr, ##5824
0c84c     18 FD BF FD | 	call	#_do_fast_goto
0c850     08 00 90 FD | 	jmp	#LR__0984
0c854                 | LR__0983
0c854     26 12 06 F6 | 	mov	arg01, #38
0c858     54 8E B0 FD | 	call	#_printerror
0c85c                 | LR__0984
0c85c     A7 F0 03 F6 | 	mov	ptra, fp
0c860     B2 00 A0 FD | 	call	#popregs_
0c864                 | _do_find_goto_ret
0c864     2D 00 64 FD | 	ret
0c868                 | 
0c868                 | ' 
0c868                 | ' sub do_slow_goto
0c868                 | _do_slow_goto
0c868                 | _do_slow_goto_ret
0c868     2D 00 64 FD | 	ret
0c86c                 | 
0c86c                 | ' 
0c86c                 | ' '----------------------- Error processing
0c86c                 | ' 
0c86c                 | ' sub do_error
0c86c                 | _do_error
0c86c     01 4A 05 F6 | 	mov	COUNT_, #1
0c870     A8 00 A0 FD | 	call	#pushregs_
0c874     69 00 00 FF 
0c878     54 E4 05 F1 | 	add	objptr, ##53844
0c87c     F2 18 02 FB | 	rdlong	arg04, objptr
0c880     0C 17 02 F6 | 	mov	arg03, arg04
0c884     01 16 66 F0 | 	shl	arg03, #1
0c888     0C 17 02 F1 | 	add	arg03, arg04
0c88c     02 16 66 F0 | 	shl	arg03, #2
0c890     03 00 00 FF 
0c894     04 E4 85 F1 | 	sub	objptr, ##1540
0c898     F2 16 02 F1 | 	add	arg03, objptr
0c89c     0B 1F 02 FB | 	rdlong	local01, arg03
0c8a0                 | ' r=compiledline(lineptr_e).result.uresult
0c8a0                 | ' print "Error ";r;": ";errors$(r)
0c8a0     00 12 06 F6 | 	mov	arg01, #0
0c8a4     66 00 00 FF 
0c8a8     50 E4 85 F1 | 	sub	objptr, ##52304
0c8ac     24 1C B1 FD | 	call	#__system___getiolock_0417
0c8b0     FD 12 02 F6 | 	mov	arg01, result1
0c8b4     1C C3 B0 FD | 	call	#__system___lockmem
0c8b8     43 01 00 FF 
0c8bc     30 14 06 F6 | 	mov	arg02, ##@LR__4617
0c8c0     00 12 06 F6 | 	mov	arg01, #0
0c8c4     00 16 06 F6 | 	mov	arg03, #0
0c8c8     F8 CF B0 FD | 	call	#__system___basic_print_string
0c8cc     00 12 06 F6 | 	mov	arg01, #0
0c8d0     0F 15 02 F6 | 	mov	arg02, local01
0c8d4     00 16 06 F6 | 	mov	arg03, #0
0c8d8     0A 18 06 F6 | 	mov	arg04, #10
0c8dc     68 D0 B0 FD | 	call	#__system___basic_print_unsigned
0c8e0     43 01 00 FF 
0c8e4     37 14 06 F6 | 	mov	arg02, ##@LR__4618
0c8e8     00 12 06 F6 | 	mov	arg01, #0
0c8ec     00 16 06 F6 | 	mov	arg03, #0
0c8f0     D0 CF B0 FD | 	call	#__system___basic_print_string
0c8f4     02 1E 66 F0 | 	shl	local01, #2
0c8f8     64 00 00 FF 
0c8fc     50 E4 05 F1 | 	add	objptr, ##51280
0c900     F2 1E 02 F1 | 	add	local01, objptr
0c904     0F 15 02 FB | 	rdlong	arg02, local01
0c908     00 12 06 F6 | 	mov	arg01, #0
0c90c     00 16 06 F6 | 	mov	arg03, #0
0c910     64 00 00 FF 
0c914     50 E4 85 F1 | 	sub	objptr, ##51280
0c918     A8 CF B0 FD | 	call	#__system___basic_print_string
0c91c     00 12 06 F6 | 	mov	arg01, #0
0c920     0A 14 06 F6 | 	mov	arg02, #10
0c924     00 16 06 F6 | 	mov	arg03, #0
0c928     40 CF B0 FD | 	call	#__system___basic_print_char
0c92c     00 12 06 F6 | 	mov	arg01, #0
0c930     A0 1B B1 FD | 	call	#__system___getiolock_0417
0c934     FD 00 68 FC | 	wrlong	#0, result1
0c938     A7 F0 03 F6 | 	mov	ptra, fp
0c93c     B2 00 A0 FD | 	call	#popregs_
0c940                 | _do_error_ret
0c940     2D 00 64 FD | 	ret
0c944                 | 
0c944                 | ' 
0c944                 | ' 
0c944                 | ' '------------------ Assigning to a variable  
0c944                 | ' 
0c944                 | ' function  convertstring(psaddr as ulong) as string
0c944                 | _convertstring
0c944     04 4A 05 F6 | 	mov	COUNT_, #4
0c948     A8 00 A0 FD | 	call	#pushregs_
0c94c     09 1F 02 F6 | 	mov	local01, arg01
0c950     18 8F B0 FD | 	call	#_pslpeek
0c954     FD 20 02 F6 | 	mov	local02, result1
0c958     43 01 00 FF 
0c95c     3A 22 06 F6 | 	mov	local03, ##@LR__4619
0c960                 | ' 'print "in convertstring: psaddr=";psaddr
0c960                 | ' l=pslpeek(psaddr)
0c960                 | ' 'print "in convertstring: len=";l
0c960                 | ' s="" 
0c960                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0c960     01 24 06 F6 | 	mov	local04, #1
0c964     01 20 06 F1 | 	add	local02, #1
0c968                 | LR__0990
0c968     10 25 52 F2 | 	cmps	local04, local02 wc
0c96c     30 00 90 3D |  if_ae	jmp	#LR__0991
0c970     0F 13 02 F6 | 	mov	arg01, local01
0c974     03 12 06 F1 | 	add	arg01, #3
0c978     12 13 02 F1 | 	add	arg01, local04
0c97c     94 8E B0 FD | 	call	#_pspeek
0c980     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0c984     1C E4 B0 FD | 	call	#__system__Chr_S
0c988     FD 14 02 F6 | 	mov	arg02, result1
0c98c     11 13 02 F6 | 	mov	arg01, local03
0c990     9C C2 B0 FD | 	call	#__system___string_concat
0c994     FD 22 02 F6 | 	mov	local03, result1
0c998     01 24 06 F1 | 	add	local04, #1
0c99c     C8 FF 9F FD | 	jmp	#LR__0990
0c9a0                 | LR__0991
0c9a0                 | ' 'print "in convertstring: str=";s
0c9a0                 | ' return s
0c9a0     11 FB 01 F6 | 	mov	result1, local03
0c9a4     A7 F0 03 F6 | 	mov	ptra, fp
0c9a8     B2 00 A0 FD | 	call	#popregs_
0c9ac                 | _convertstring_ret
0c9ac     2D 00 64 FD | 	ret
0c9b0                 | 
0c9b0                 | ' 
0c9b0                 | ' sub do_assign
0c9b0                 | _do_assign
0c9b0     05 4A 05 F6 | 	mov	COUNT_, #5
0c9b4     A8 00 A0 FD | 	call	#pushregs_
0c9b8     44 F0 07 F1 | 	add	ptra, #68
0c9bc     69 00 00 FF 
0c9c0     54 E4 05 F1 | 	add	objptr, ##53844
0c9c4     F2 16 02 FB | 	rdlong	arg03, objptr
0c9c8     0B 15 02 F6 | 	mov	arg02, arg03
0c9cc     01 14 66 F0 | 	shl	arg02, #1
0c9d0     0B 15 02 F1 | 	add	arg02, arg03
0c9d4     02 14 66 F0 | 	shl	arg02, #2
0c9d8     03 00 00 FF 
0c9dc     04 E4 85 F1 | 	sub	objptr, ##1540
0c9e0     F2 14 02 F1 | 	add	arg02, objptr
0c9e4     0A 15 02 FB | 	rdlong	arg02, arg02
0c9e8     18 4E 05 F1 | 	add	fp, #24
0c9ec     A7 14 62 FC | 	wrlong	arg02, fp
0c9f0                 | ' 
0c9f0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0c9f0                 | ' 
0c9f0                 | ' if variables(varnum).vartype<array_no_type then 
0c9f0     18 4E 85 F1 | 	sub	fp, #24
0c9f4     04 14 66 F0 | 	shl	arg02, #4
0c9f8     32 00 00 FF 
0c9fc     74 E4 85 F1 | 	sub	objptr, ##25716
0ca00     F2 14 02 F1 | 	add	arg02, objptr
0ca04     0C 14 06 F1 | 	add	arg02, #12
0ca08     0A 17 02 FB | 	rdlong	arg03, arg02
0ca0c     00 17 16 F2 | 	cmp	arg03, #256 wc
0ca10     33 00 00 FF 
0ca14     DC E5 85 F1 | 	sub	objptr, ##26588
0ca18     18 01 90 3D |  if_ae	jmp	#LR__1000
0ca1c     1C CE BF FD | 	call	#_pop
0ca20     A7 FA 61 FC | 	wrlong	result1, fp
0ca24     04 4E 05 F1 | 	add	fp, #4
0ca28     A7 FC 61 FC | 	wrlong	result2, fp
0ca2c     04 4E 05 F1 | 	add	fp, #4
0ca30     A7 FE 61 FC | 	wrlong	result3, fp
0ca34     08 4E 85 F1 | 	sub	fp, #8
0ca38     A7 16 02 FB | 	rdlong	arg03, fp
0ca3c     04 4E 05 F1 | 	add	fp, #4
0ca40     A7 14 02 FB | 	rdlong	arg02, fp
0ca44     14 4E 05 F1 | 	add	fp, #20
0ca48     A7 12 02 FB | 	rdlong	arg01, fp
0ca4c     04 12 66 F0 | 	shl	arg01, #4
0ca50     33 00 00 FF 
0ca54     DC E5 05 F1 | 	add	objptr, ##26588
0ca58     F2 12 02 F1 | 	add	arg01, objptr
0ca5c     04 12 06 F1 | 	add	arg01, #4
0ca60     09 17 62 FC | 	wrlong	arg03, arg01
0ca64     A7 16 02 FB | 	rdlong	arg03, fp
0ca68     04 16 66 F0 | 	shl	arg03, #4
0ca6c     F2 16 02 F1 | 	add	arg03, objptr
0ca70     08 16 06 F1 | 	add	arg03, #8
0ca74     0B 15 62 FC | 	wrlong	arg02, arg03
0ca78     A7 16 02 FB | 	rdlong	arg03, fp
0ca7c     04 16 66 F0 | 	shl	arg03, #4
0ca80     F2 16 02 F1 | 	add	arg03, objptr
0ca84     10 4E 85 F1 | 	sub	fp, #16
0ca88     A7 14 02 FB | 	rdlong	arg02, fp
0ca8c     0C 16 06 F1 | 	add	arg03, #12
0ca90     0B 15 62 FC | 	wrlong	arg02, arg03
0ca94                 | '   t1=pop() 
0ca94                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ca94                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ca94                 | '   if variables(varnum).vartype<>result_string2 then return
0ca94     10 4E 05 F1 | 	add	fp, #16
0ca98     A7 16 02 FB | 	rdlong	arg03, fp
0ca9c     18 4E 85 F1 | 	sub	fp, #24
0caa0     04 16 66 F0 | 	shl	arg03, #4
0caa4     F2 16 02 F1 | 	add	arg03, objptr
0caa8     0C 16 06 F1 | 	add	arg03, #12
0caac     0B 17 02 FB | 	rdlong	arg03, arg03
0cab0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cab4     33 00 00 FF 
0cab8     DC E5 85 F1 | 	sub	objptr, ##26588
0cabc     9C 05 90 5D |  if_ne	jmp	#LR__1021
0cac0     18 4E 05 F1 | 	add	fp, #24
0cac4     A7 16 02 FB | 	rdlong	arg03, fp
0cac8     0B 1F 02 F6 | 	mov	local01, arg03
0cacc     04 1E 66 F0 | 	shl	local01, #4
0cad0     33 00 00 FF 
0cad4     DC E5 05 F1 | 	add	objptr, ##26588
0cad8     F2 1E 02 F1 | 	add	local01, objptr
0cadc     18 4E 85 F1 | 	sub	fp, #24
0cae0     04 16 66 F0 | 	shl	arg03, #4
0cae4     F2 16 02 F1 | 	add	arg03, objptr
0cae8     04 16 06 F1 | 	add	arg03, #4
0caec     0B 13 02 FB | 	rdlong	arg01, arg03
0caf0     33 00 00 FF 
0caf4     DC E5 85 F1 | 	sub	objptr, ##26588
0caf8     48 FE BF FD | 	call	#_convertstring
0cafc     04 1E 06 F1 | 	add	local01, #4
0cb00     0F FB 61 FC | 	wrlong	result1, local01
0cb04     18 4E 05 F1 | 	add	fp, #24
0cb08     A7 1E 02 FB | 	rdlong	local01, fp
0cb0c     18 4E 85 F1 | 	sub	fp, #24
0cb10     04 1E 66 F0 | 	shl	local01, #4
0cb14     33 00 00 FF 
0cb18     DC E5 05 F1 | 	add	objptr, ##26588
0cb1c     F2 1E 02 F1 | 	add	local01, objptr
0cb20     0C 1E 06 F1 | 	add	local01, #12
0cb24     0F 3F 68 FC | 	wrlong	#31, local01
0cb28                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0cb28                 | '   variables(varnum).vartype=result_string
0cb28                 | '   return
0cb28     33 00 00 FF 
0cb2c     DC E5 85 F1 | 	sub	objptr, ##26588
0cb30     28 05 90 FD | 	jmp	#LR__1021
0cb34                 | LR__1000
0cb34                 | ' for i=0 to 2 : arrid(i)=0 : next i
0cb34     1C 4E 05 F1 | 	add	fp, #28
0cb38     A7 00 68 FC | 	wrlong	#0, fp
0cb3c     97 16 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0cb40                 | LR__1001
0cb40     A7 1E 02 FB | 	rdlong	local01, fp
0cb44     02 1E 66 F0 | 	shl	local01, #2
0cb48     18 4E 05 F1 | 	add	fp, #24
0cb4c     A7 1E 02 F1 | 	add	local01, fp
0cb50     0F 01 68 FC | 	wrlong	#0, local01
0cb54     18 4E 85 F1 | 	sub	fp, #24
0cb58     A7 1E 02 FB | 	rdlong	local01, fp
0cb5c     01 1E 06 F1 | 	add	local01, #1
0cb60     A7 1E 62 FC | 	wrlong	local01, fp
0cb64     03 1E 16 F2 | 	cmp	local01, #3 wc
0cb68     D4 FF 9F CD |  if_b	jmp	#LR__1001
0cb6c                 | LR__1002
0cb6c     69 00 00 FF 
0cb70     54 E4 05 F1 | 	add	objptr, ##53844
0cb74     F2 16 02 FB | 	rdlong	arg03, objptr
0cb78     0B 1F 02 F6 | 	mov	local01, arg03
0cb7c     01 1E 66 F0 | 	shl	local01, #1
0cb80     0B 1F 02 F1 | 	add	local01, arg03
0cb84     02 1E 66 F0 | 	shl	local01, #2
0cb88     03 00 00 FF 
0cb8c     04 E4 85 F1 | 	sub	objptr, ##1540
0cb90     F2 1E 02 F1 | 	add	local01, objptr
0cb94     04 1E 06 F1 | 	add	local01, #4
0cb98     0F 21 02 FB | 	rdlong	local02, local01
0cb9c     04 4E 05 F1 | 	add	fp, #4
0cba0     A7 20 62 FC | 	wrlong	local02, fp
0cba4     20 4E 85 F1 | 	sub	fp, #32
0cba8     66 00 00 FF 
0cbac     50 E4 85 F1 | 	sub	objptr, ##52304
0cbb0     88 CC BF FD | 	call	#_pop
0cbb4     A7 FA 61 FC | 	wrlong	result1, fp
0cbb8     04 4E 05 F1 | 	add	fp, #4
0cbbc     A7 FC 61 FC | 	wrlong	result2, fp
0cbc0     04 4E 05 F1 | 	add	fp, #4
0cbc4     A7 FE 61 FC | 	wrlong	result3, fp
0cbc8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0cbc8                 | ' t1=pop() ' var value
0cbc8                 | ' if numpar>0 then
0cbc8     18 4E 05 F1 | 	add	fp, #24
0cbcc     A7 22 02 FB | 	rdlong	local03, fp
0cbd0     20 4E 85 F1 | 	sub	fp, #32
0cbd4     01 22 16 F2 | 	cmp	local03, #1 wc
0cbd8     70 00 90 CD |  if_b	jmp	#LR__1005
0cbdc                 | '   for i=numpar to 1 step -1
0cbdc     20 4E 05 F1 | 	add	fp, #32
0cbe0     A7 24 0A FB | 	rdlong	local04, fp wz
0cbe4     04 4E 85 F1 | 	sub	fp, #4
0cbe8     A7 24 62 FC | 	wrlong	local04, fp
0cbec     1C 4E 85 F1 | 	sub	fp, #28
0cbf0     58 00 90 AD |  if_e	jmp	#LR__1004
0cbf4                 | LR__1003
0cbf4     44 CC BF FD | 	call	#_pop
0cbf8     0C 4E 05 F1 | 	add	fp, #12
0cbfc     A7 FA 61 FC | 	wrlong	result1, fp
0cc00     04 4E 05 F1 | 	add	fp, #4
0cc04     A7 FC 61 FC | 	wrlong	result2, fp
0cc08     04 4E 05 F1 | 	add	fp, #4
0cc0c     A7 FE 61 FC | 	wrlong	result3, fp
0cc10     08 4E 05 F1 | 	add	fp, #8
0cc14     A7 22 02 FB | 	rdlong	local03, fp
0cc18     01 22 86 F1 | 	sub	local03, #1
0cc1c     02 22 66 F0 | 	shl	local03, #2
0cc20     18 4E 05 F1 | 	add	fp, #24
0cc24     A7 22 02 F1 | 	add	local03, fp
0cc28     28 4E 85 F1 | 	sub	fp, #40
0cc2c     A7 24 02 FB | 	rdlong	local04, fp
0cc30     11 25 62 FC | 	wrlong	local04, local03
0cc34     10 4E 05 F1 | 	add	fp, #16
0cc38     A7 24 02 FB | 	rdlong	local04, fp
0cc3c     01 24 8E F1 | 	sub	local04, #1 wz
0cc40     A7 24 62 FC | 	wrlong	local04, fp
0cc44     1C 4E 85 F1 | 	sub	fp, #28
0cc48     A8 FF 9F 5D |  if_ne	jmp	#LR__1003
0cc4c                 | LR__1004
0cc4c                 | LR__1005
0cc4c     18 4E 05 F1 | 	add	fp, #24
0cc50     A7 1E 02 FB | 	rdlong	local01, fp
0cc54     04 1E 66 F0 | 	shl	local01, #4
0cc58     33 00 00 FF 
0cc5c     DC E5 05 F1 | 	add	objptr, ##26588
0cc60     F2 1E 02 F1 | 	add	local01, objptr
0cc64     04 1E 06 F1 | 	add	local01, #4
0cc68     0F 13 02 FB | 	rdlong	arg01, local01
0cc6c     0C 4E 05 F1 | 	add	fp, #12
0cc70     A7 12 62 FC | 	wrlong	arg01, fp
0cc74     24 4E 85 F1 | 	sub	fp, #36
0cc78     33 00 00 FF 
0cc7c     DC E5 85 F1 | 	sub	objptr, ##26588
0cc80     E8 8B B0 FD | 	call	#_pslpeek
0cc84     FD 24 32 F9 | 	getword	local04, result1, #0
0cc88     28 4E 05 F1 | 	add	fp, #40
0cc8c     A7 24 62 FC | 	wrlong	local04, fp
0cc90     04 4E 85 F1 | 	sub	fp, #4
0cc94     A7 12 02 FB | 	rdlong	arg01, fp
0cc98     24 4E 85 F1 | 	sub	fp, #36
0cc9c     02 12 06 F1 | 	add	arg01, #2
0cca0     70 8B B0 FD | 	call	#_pspeek
0cca4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cca8     2C 4E 05 F1 | 	add	fp, #44
0ccac     A7 FA 61 FC | 	wrlong	result1, fp
0ccb0     08 4E 85 F1 | 	sub	fp, #8
0ccb4     A7 12 02 FB | 	rdlong	arg01, fp
0ccb8     09 25 02 F6 | 	mov	local04, arg01
0ccbc     10 24 06 F1 | 	add	local04, #16
0ccc0     24 4E 85 F1 | 	sub	fp, #36
0ccc4     04 12 06 F1 | 	add	arg01, #4
0ccc8     A0 8B B0 FD | 	call	#_pslpeek
0cccc     FD 1E 02 F6 | 	mov	local01, result1
0ccd0     38 4E 05 F1 | 	add	fp, #56
0ccd4     A7 20 02 FB | 	rdlong	local02, fp
0ccd8     10 1F 02 FD | 	qmul	local01, local02
0ccdc     04 4E 85 F1 | 	sub	fp, #4
0cce0     A7 22 02 FB | 	rdlong	local03, fp
0cce4     10 4E 85 F1 | 	sub	fp, #16
0cce8     A7 12 02 FB | 	rdlong	arg01, fp
0ccec     24 4E 85 F1 | 	sub	fp, #36
0ccf0     08 12 06 F1 | 	add	arg01, #8
0ccf4     18 20 62 FD | 	getqx	local02
0ccf8     10 23 02 F1 | 	add	local03, local02
0ccfc     6C 8B B0 FD | 	call	#_pslpeek
0cd00     FD 20 02 F6 | 	mov	local02, result1
0cd04     24 4E 05 F1 | 	add	fp, #36
0cd08     A7 12 02 FB | 	rdlong	arg01, fp
0cd0c     24 4E 85 F1 | 	sub	fp, #36
0cd10     04 12 06 F1 | 	add	arg01, #4
0cd14     54 8B B0 FD | 	call	#_pslpeek
0cd18     FD 20 02 FD | 	qmul	local02, result1
0cd1c     3C 4E 05 F1 | 	add	fp, #60
0cd20     A7 20 02 FB | 	rdlong	local02, fp
0cd24     18 1E 62 FD | 	getqx	local01
0cd28     10 1F 02 FD | 	qmul	local01, local02
0cd2c     10 4E 85 F1 | 	sub	fp, #16
0cd30     A7 20 02 FB | 	rdlong	local02, fp
0cd34     18 1E 62 FD | 	getqx	local01
0cd38     0F 23 02 F1 | 	add	local03, local01
0cd3c     11 21 02 FD | 	qmul	local02, local03
0cd40     04 4E 05 F1 | 	add	fp, #4
0cd44                 | ' esize=pspeek(arrptr+2)
0cd44                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0cd44                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0cd44                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0cd44                 | ' 
0cd44                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0cd44                 | ' select case arrtype
0cd44     18 22 62 FD | 	getqx	local03
0cd48     11 25 02 F1 | 	add	local04, local03
0cd4c     A7 24 62 FC | 	wrlong	local04, fp
0cd50     08 4E 85 F1 | 	sub	fp, #8
0cd54     A7 26 02 FB | 	rdlong	local05, fp
0cd58     28 4E 85 F1 | 	sub	fp, #40
0cd5c     00 27 86 F1 | 	sub	local05, #256
0cd60     0C 26 26 F3 | 	fle	local05, #12
0cd64     30 26 62 FD | 	jmprel	local05
0cd68                 | LR__1006
0cd68     30 00 90 FD | 	jmp	#LR__1007
0cd6c     58 00 90 FD | 	jmp	#LR__1008
0cd70     88 00 90 FD | 	jmp	#LR__1009
0cd74     B8 00 90 FD | 	jmp	#LR__1010
0cd78     10 01 90 FD | 	jmp	#LR__1011
0cd7c     68 01 90 FD | 	jmp	#LR__1012
0cd80     98 01 90 FD | 	jmp	#LR__1013
0cd84     C8 01 90 FD | 	jmp	#LR__1014
0cd88     F8 01 90 FD | 	jmp	#LR__1015
0cd8c     28 02 90 FD | 	jmp	#LR__1016
0cd90     58 02 90 FD | 	jmp	#LR__1017
0cd94     88 02 90 FD | 	jmp	#LR__1018
0cd98     B8 02 90 FD | 	jmp	#LR__1019
0cd9c                 | LR__1007
0cd9c     A7 12 02 F6 | 	mov	arg01, fp
0cda0     30 4E 05 F1 | 	add	fp, #48
0cda4     A7 14 02 FB | 	rdlong	arg02, fp
0cda8     30 4E 85 F1 | 	sub	fp, #48
0cdac     0C 16 06 F6 | 	mov	arg03, #12
0cdb0     0B 00 00 FF 
0cdb4     C0 E4 05 F1 | 	add	objptr, ##5824
0cdb8     C4 B3 B0 FD | 	call	#_psram_spin2_write
0cdbc     0B 00 00 FF 
0cdc0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cdc4     94 02 90 FD | 	jmp	#LR__1020
0cdc8                 | LR__1008
0cdc8     30 4E 05 F1 | 	add	fp, #48
0cdcc     A7 12 02 FB | 	rdlong	arg01, fp
0cdd0     30 4E 85 F1 | 	sub	fp, #48
0cdd4     A7 14 02 FB | 	rdlong	arg02, fp
0cdd8     01 16 06 F6 | 	mov	arg03, #1
0cddc     00 18 06 F6 | 	mov	arg04, #0
0cde0     0B 00 00 FF 
0cde4     C0 E4 05 F1 | 	add	objptr, ##5824
0cde8                 | '     return fill(addr, pattern, count, listPtr, 1)
0cde8     01 1A 06 F6 | 	mov	arg05, #1
0cdec     2C B4 B0 FD | 	call	#_psram_spin2_fill
0cdf0     0B 00 00 FF 
0cdf4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cdf8     60 02 90 FD | 	jmp	#LR__1020
0cdfc                 | LR__1009
0cdfc     30 4E 05 F1 | 	add	fp, #48
0ce00     A7 12 02 FB | 	rdlong	arg01, fp
0ce04     30 4E 85 F1 | 	sub	fp, #48
0ce08     A7 14 02 FB | 	rdlong	arg02, fp
0ce0c     01 16 06 F6 | 	mov	arg03, #1
0ce10     00 18 06 F6 | 	mov	arg04, #0
0ce14     0B 00 00 FF 
0ce18     C0 E4 05 F1 | 	add	objptr, ##5824
0ce1c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce1c     01 1A 06 F6 | 	mov	arg05, #1
0ce20     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0ce24     0B 00 00 FF 
0ce28     C0 E4 85 F1 | 	sub	objptr, ##5824
0ce2c     2C 02 90 FD | 	jmp	#LR__1020
0ce30                 | LR__1010
0ce30     30 4E 05 F1 | 	add	fp, #48
0ce34     A7 12 02 FB | 	rdlong	arg01, fp
0ce38     30 4E 85 F1 | 	sub	fp, #48
0ce3c     A7 14 02 FB | 	rdlong	arg02, fp
0ce40     01 16 06 F6 | 	mov	arg03, #1
0ce44     00 18 06 F6 | 	mov	arg04, #0
0ce48     0B 00 00 FF 
0ce4c     C0 E4 05 F1 | 	add	objptr, ##5824
0ce50                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce50     01 1A 06 F6 | 	mov	arg05, #1
0ce54     C4 B3 B0 FD | 	call	#_psram_spin2_fill
0ce58     30 4E 05 F1 | 	add	fp, #48
0ce5c     A7 12 02 FB | 	rdlong	arg01, fp
0ce60     30 4E 85 F1 | 	sub	fp, #48
0ce64     01 12 06 F1 | 	add	arg01, #1
0ce68     A7 14 02 FB | 	rdlong	arg02, fp
0ce6c     08 14 46 F0 | 	shr	arg02, #8
0ce70     01 16 06 F6 | 	mov	arg03, #1
0ce74     00 18 06 F6 | 	mov	arg04, #0
0ce78                 | '     return fill(addr, pattern, count, listPtr, 1)
0ce78     01 1A 06 F6 | 	mov	arg05, #1
0ce7c     9C B3 B0 FD | 	call	#_psram_spin2_fill
0ce80     0B 00 00 FF 
0ce84     C0 E4 85 F1 | 	sub	objptr, ##5824
0ce88     D0 01 90 FD | 	jmp	#LR__1020
0ce8c                 | LR__1011
0ce8c     30 4E 05 F1 | 	add	fp, #48
0ce90     A7 12 02 FB | 	rdlong	arg01, fp
0ce94     30 4E 85 F1 | 	sub	fp, #48
0ce98     A7 14 02 FB | 	rdlong	arg02, fp
0ce9c     01 16 06 F6 | 	mov	arg03, #1
0cea0     00 18 06 F6 | 	mov	arg04, #0
0cea4     0B 00 00 FF 
0cea8     C0 E4 05 F1 | 	add	objptr, ##5824
0ceac                 | '     return fill(addr, pattern, count, listPtr, 1)
0ceac     01 1A 06 F6 | 	mov	arg05, #1
0ceb0     68 B3 B0 FD | 	call	#_psram_spin2_fill
0ceb4     30 4E 05 F1 | 	add	fp, #48
0ceb8     A7 12 02 FB | 	rdlong	arg01, fp
0cebc     30 4E 85 F1 | 	sub	fp, #48
0cec0     01 12 06 F1 | 	add	arg01, #1
0cec4     A7 14 02 FB | 	rdlong	arg02, fp
0cec8     08 14 46 F0 | 	shr	arg02, #8
0cecc     01 16 06 F6 | 	mov	arg03, #1
0ced0     00 18 06 F6 | 	mov	arg04, #0
0ced4                 | '     return fill(addr, pattern, count, listPtr, 1)
0ced4     01 1A 06 F6 | 	mov	arg05, #1
0ced8     40 B3 B0 FD | 	call	#_psram_spin2_fill
0cedc     0B 00 00 FF 
0cee0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cee4     74 01 90 FD | 	jmp	#LR__1020
0cee8                 | LR__1012
0cee8     30 4E 05 F1 | 	add	fp, #48
0ceec     A7 12 02 FB | 	rdlong	arg01, fp
0cef0     30 4E 85 F1 | 	sub	fp, #48
0cef4     A7 14 02 FB | 	rdlong	arg02, fp
0cef8     01 16 06 F6 | 	mov	arg03, #1
0cefc     00 18 06 F6 | 	mov	arg04, #0
0cf00     0B 00 00 FF 
0cf04     C0 E4 05 F1 | 	add	objptr, ##5824
0cf08                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf08     04 1A 06 F6 | 	mov	arg05, #4
0cf0c     0C B3 B0 FD | 	call	#_psram_spin2_fill
0cf10     0B 00 00 FF 
0cf14     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf18     40 01 90 FD | 	jmp	#LR__1020
0cf1c                 | LR__1013
0cf1c     30 4E 05 F1 | 	add	fp, #48
0cf20     A7 12 02 FB | 	rdlong	arg01, fp
0cf24     30 4E 85 F1 | 	sub	fp, #48
0cf28     A7 14 02 FB | 	rdlong	arg02, fp
0cf2c     01 16 06 F6 | 	mov	arg03, #1
0cf30     00 18 06 F6 | 	mov	arg04, #0
0cf34     0B 00 00 FF 
0cf38     C0 E4 05 F1 | 	add	objptr, ##5824
0cf3c                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf3c     04 1A 06 F6 | 	mov	arg05, #4
0cf40     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0cf44     0B 00 00 FF 
0cf48     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf4c     0C 01 90 FD | 	jmp	#LR__1020
0cf50                 | LR__1014
0cf50     30 4E 05 F1 | 	add	fp, #48
0cf54     A7 12 02 FB | 	rdlong	arg01, fp
0cf58     30 4E 85 F1 | 	sub	fp, #48
0cf5c     A7 14 02 FB | 	rdlong	arg02, fp
0cf60     01 16 06 F6 | 	mov	arg03, #1
0cf64     00 18 06 F6 | 	mov	arg04, #0
0cf68     0B 00 00 FF 
0cf6c     C0 E4 05 F1 | 	add	objptr, ##5824
0cf70                 | '     return fill(addr, pattern, count, listPtr, 4)
0cf70     04 1A 06 F6 | 	mov	arg05, #4
0cf74     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0cf78     0B 00 00 FF 
0cf7c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cf80     D8 00 90 FD | 	jmp	#LR__1020
0cf84                 | LR__1015
0cf84     30 4E 05 F1 | 	add	fp, #48
0cf88     A7 12 02 FB | 	rdlong	arg01, fp
0cf8c     30 4E 85 F1 | 	sub	fp, #48
0cf90     A7 14 02 FB | 	rdlong	arg02, fp
0cf94     01 16 06 F6 | 	mov	arg03, #1
0cf98     00 18 06 F6 | 	mov	arg04, #0
0cf9c     0B 00 00 FF 
0cfa0     C0 E4 05 F1 | 	add	objptr, ##5824
0cfa4                 | '     return fill(addr, pattern, count, listPtr, 4)
0cfa4     04 1A 06 F6 | 	mov	arg05, #4
0cfa8     70 B2 B0 FD | 	call	#_psram_spin2_fill
0cfac     0B 00 00 FF 
0cfb0     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfb4     A4 00 90 FD | 	jmp	#LR__1020
0cfb8                 | LR__1016
0cfb8     30 4E 05 F1 | 	add	fp, #48
0cfbc     A7 12 02 FB | 	rdlong	arg01, fp
0cfc0     30 4E 85 F1 | 	sub	fp, #48
0cfc4     A7 14 02 FB | 	rdlong	arg02, fp
0cfc8     01 16 06 F6 | 	mov	arg03, #1
0cfcc     00 18 06 F6 | 	mov	arg04, #0
0cfd0     0B 00 00 FF 
0cfd4     C0 E4 05 F1 | 	add	objptr, ##5824
0cfd8                 | '     return fill(addr, pattern, count, listPtr, 4)
0cfd8     04 1A 06 F6 | 	mov	arg05, #4
0cfdc     3C B2 B0 FD | 	call	#_psram_spin2_fill
0cfe0     0B 00 00 FF 
0cfe4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cfe8     70 00 90 FD | 	jmp	#LR__1020
0cfec                 | LR__1017
0cfec     30 4E 05 F1 | 	add	fp, #48
0cff0     A7 12 02 FB | 	rdlong	arg01, fp
0cff4     30 4E 85 F1 | 	sub	fp, #48
0cff8     A7 14 02 FB | 	rdlong	arg02, fp
0cffc     01 16 06 F6 | 	mov	arg03, #1
0d000     00 18 06 F6 | 	mov	arg04, #0
0d004     0B 00 00 FF 
0d008     C0 E4 05 F1 | 	add	objptr, ##5824
0d00c                 | '     return fill(addr, pattern, count, listPtr, 4)
0d00c     04 1A 06 F6 | 	mov	arg05, #4
0d010     08 B2 B0 FD | 	call	#_psram_spin2_fill
0d014     0B 00 00 FF 
0d018     C0 E4 85 F1 | 	sub	objptr, ##5824
0d01c     3C 00 90 FD | 	jmp	#LR__1020
0d020                 | LR__1018
0d020     30 4E 05 F1 | 	add	fp, #48
0d024     A7 12 02 FB | 	rdlong	arg01, fp
0d028     30 4E 85 F1 | 	sub	fp, #48
0d02c     A7 14 02 FB | 	rdlong	arg02, fp
0d030     01 16 06 F6 | 	mov	arg03, #1
0d034     00 18 06 F6 | 	mov	arg04, #0
0d038     0B 00 00 FF 
0d03c     C0 E4 05 F1 | 	add	objptr, ##5824
0d040                 | '     return fill(addr, pattern, count, listPtr, 4)
0d040     04 1A 06 F6 | 	mov	arg05, #4
0d044     D4 B1 B0 FD | 	call	#_psram_spin2_fill
0d048     0B 00 00 FF 
0d04c     C0 E4 85 F1 | 	sub	objptr, ##5824
0d050     08 00 90 FD | 	jmp	#LR__1020
0d054                 | LR__1019
0d054     2F 12 06 F6 | 	mov	arg01, #47
0d058     54 86 B0 FD | 	call	#_printerror
0d05c                 | LR__1020
0d05c                 | LR__1021
0d05c     A7 F0 03 F6 | 	mov	ptra, fp
0d060     B2 00 A0 FD | 	call	#popregs_
0d064                 | _do_assign_ret
0d064     2D 00 64 FD | 	ret
0d068                 | 
0d068                 | ' 
0d068                 | ' 
0d068                 | ' ' --------------------- Read a variable and push to the stack
0d068                 | ' 
0d068                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0d068                 | ' 
0d068                 | ' sub do_getvar
0d068                 | _do_getvar
0d068     04 4A 05 F6 | 	mov	COUNT_, #4
0d06c     A8 00 A0 FD | 	call	#pushregs_
0d070     3C F0 07 F1 | 	add	ptra, #60
0d074                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0d074                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0d074     69 00 00 FF 
0d078     54 E4 05 F1 | 	add	objptr, ##53844
0d07c     F2 1E 02 FB | 	rdlong	local01, objptr
0d080     0F 17 02 F6 | 	mov	arg03, local01
0d084     01 16 66 F0 | 	shl	arg03, #1
0d088     0F 17 02 F1 | 	add	arg03, local01
0d08c     02 16 66 F0 | 	shl	arg03, #2
0d090     03 00 00 FF 
0d094     04 E4 85 F1 | 	sub	objptr, ##1540
0d098     F2 16 02 F1 | 	add	arg03, objptr
0d09c     04 16 06 F1 | 	add	arg03, #4
0d0a0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0d0a4     66 00 00 FF 
0d0a8     50 E4 85 F1 | 	sub	objptr, ##52304
0d0ac     C4 00 90 5D |  if_ne	jmp	#LR__1031
0d0b0     69 00 00 FF 
0d0b4     54 E4 05 F1 | 	add	objptr, ##53844
0d0b8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0bc     0F 13 02 F6 | 	mov	arg01, local01
0d0c0     01 12 66 F0 | 	shl	arg01, #1
0d0c4     0F 13 02 F1 | 	add	arg01, local01
0d0c8     02 12 66 F0 | 	shl	arg01, #2
0d0cc     03 00 00 FF 
0d0d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d0d4     F2 12 02 F1 | 	add	arg01, objptr
0d0d8     09 1F 02 FB | 	rdlong	local01, arg01
0d0dc     04 1E 66 F0 | 	shl	local01, #4
0d0e0     32 00 00 FF 
0d0e4     74 E4 85 F1 | 	sub	objptr, ##25716
0d0e8     F2 1E 02 F1 | 	add	local01, objptr
0d0ec     04 1E 06 F1 | 	add	local01, #4
0d0f0     0F 13 02 FB | 	rdlong	arg01, local01
0d0f4     04 1E 06 F1 | 	add	local01, #4
0d0f8     0F 1F 02 FB | 	rdlong	local01, local01
0d0fc     A7 12 62 FC | 	wrlong	arg01, fp
0d100     04 4E 05 F1 | 	add	fp, #4
0d104     A7 1E 62 FC | 	wrlong	local01, fp
0d108     35 00 00 FF 
0d10c     78 E4 05 F1 | 	add	objptr, ##27256
0d110     F2 1E 02 FB | 	rdlong	local01, objptr
0d114     0F 13 02 F6 | 	mov	arg01, local01
0d118     01 12 66 F0 | 	shl	arg01, #1
0d11c     0F 13 02 F1 | 	add	arg01, local01
0d120     02 12 66 F0 | 	shl	arg01, #2
0d124     03 00 00 FF 
0d128     04 E4 85 F1 | 	sub	objptr, ##1540
0d12c     F2 12 02 F1 | 	add	arg01, objptr
0d130     09 1F 02 FB | 	rdlong	local01, arg01
0d134     04 1E 66 F0 | 	shl	local01, #4
0d138     32 00 00 FF 
0d13c     74 E4 85 F1 | 	sub	objptr, ##25716
0d140     F2 1E 02 F1 | 	add	local01, objptr
0d144     0C 1E 06 F1 | 	add	local01, #12
0d148     0F 1F 02 FB | 	rdlong	local01, local01
0d14c     04 4E 05 F1 | 	add	fp, #4
0d150     A7 1E 62 FC | 	wrlong	local01, fp
0d154                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0d154                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0d154                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0d154     08 4E 85 F1 | 	sub	fp, #8
0d158     00 1F 16 F2 | 	cmp	local01, #256 wc
0d15c     33 00 00 FF 
0d160     DC E5 85 F1 | 	sub	objptr, ##26588
0d164     0C 00 90 3D |  if_ae	jmp	#LR__1030
0d168     A7 12 02 F6 | 	mov	arg01, fp
0d16c     64 C7 BF FD | 	call	#_push
0d170     88 04 90 FD | 	jmp	#LR__1052
0d174                 | LR__1030
0d174                 | LR__1031
0d174     69 00 00 FF 
0d178     54 E4 05 F1 | 	add	objptr, ##53844
0d17c     F2 16 02 FB | 	rdlong	arg03, objptr
0d180     0B 15 02 F6 | 	mov	arg02, arg03
0d184     01 14 66 F0 | 	shl	arg02, #1
0d188     0B 15 02 F1 | 	add	arg02, arg03
0d18c     02 14 66 F0 | 	shl	arg02, #2
0d190     03 00 00 FF 
0d194     04 E4 85 F1 | 	sub	objptr, ##1540
0d198     F2 14 02 F1 | 	add	arg02, objptr
0d19c     0A 17 02 FB | 	rdlong	arg03, arg02
0d1a0     04 16 66 F0 | 	shl	arg03, #4
0d1a4     32 00 00 FF 
0d1a8     74 E4 85 F1 | 	sub	objptr, ##25716
0d1ac     F2 16 02 F1 | 	add	arg03, objptr
0d1b0     04 16 06 F1 | 	add	arg03, #4
0d1b4     0B 13 02 FB | 	rdlong	arg01, arg03
0d1b8     0C 4E 05 F1 | 	add	fp, #12
0d1bc     A7 12 62 FC | 	wrlong	arg01, fp
0d1c0     0C 4E 85 F1 | 	sub	fp, #12
0d1c4     33 00 00 FF 
0d1c8     DC E5 85 F1 | 	sub	objptr, ##26588
0d1cc     9C 86 B0 FD | 	call	#_pslpeek
0d1d0     FD FA 31 F9 | 	getword	result1, result1, #0
0d1d4     10 4E 05 F1 | 	add	fp, #16
0d1d8     A7 FA 61 FC | 	wrlong	result1, fp
0d1dc     69 00 00 FF 
0d1e0     54 E4 05 F1 | 	add	objptr, ##53844
0d1e4     F2 16 02 FB | 	rdlong	arg03, objptr
0d1e8     0B 15 02 F6 | 	mov	arg02, arg03
0d1ec     01 14 66 F0 | 	shl	arg02, #1
0d1f0     0B 15 02 F1 | 	add	arg02, arg03
0d1f4     02 14 66 F0 | 	shl	arg02, #2
0d1f8     03 00 00 FF 
0d1fc     04 E4 85 F1 | 	sub	objptr, ##1540
0d200     F2 14 02 F1 | 	add	arg02, objptr
0d204     04 14 06 F1 | 	add	arg02, #4
0d208     0A 17 02 FB | 	rdlong	arg03, arg02
0d20c     04 4E 05 F1 | 	add	fp, #4
0d210     A7 16 62 FC | 	wrlong	arg03, fp
0d214     08 4E 85 F1 | 	sub	fp, #8
0d218     A7 12 02 FB | 	rdlong	arg01, fp
0d21c     0C 4E 85 F1 | 	sub	fp, #12
0d220     02 12 06 F1 | 	add	arg01, #2
0d224     66 00 00 FF 
0d228     50 E4 85 F1 | 	sub	objptr, ##52304
0d22c     E4 85 B0 FD | 	call	#_pspeek
0d230     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d234     18 4E 05 F1 | 	add	fp, #24
0d238     A7 FA 61 FC | 	wrlong	result1, fp
0d23c     0C 4E 85 F1 | 	sub	fp, #12
0d240     A7 12 02 FB | 	rdlong	arg01, fp
0d244     0C 4E 85 F1 | 	sub	fp, #12
0d248     04 12 06 F1 | 	add	arg01, #4
0d24c     1C 86 B0 FD | 	call	#_pslpeek
0d250     1C 4E 05 F1 | 	add	fp, #28
0d254     A7 FA 61 FC | 	wrlong	result1, fp
0d258     10 4E 85 F1 | 	sub	fp, #16
0d25c     A7 12 02 FB | 	rdlong	arg01, fp
0d260     0C 4E 85 F1 | 	sub	fp, #12
0d264     08 12 06 F1 | 	add	arg01, #8
0d268     00 86 B0 FD | 	call	#_pslpeek
0d26c     20 4E 05 F1 | 	add	fp, #32
0d270     A7 FA 61 FC | 	wrlong	result1, fp
0d274     14 4E 85 F1 | 	sub	fp, #20
0d278     A7 12 02 FB | 	rdlong	arg01, fp
0d27c     0C 4E 85 F1 | 	sub	fp, #12
0d280     0C 12 06 F1 | 	add	arg01, #12
0d284     E4 85 B0 FD | 	call	#_pslpeek
0d288     24 4E 05 F1 | 	add	fp, #36
0d28c     A7 FA 61 FC | 	wrlong	result1, fp
0d290                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0d290                 | ' esize=pspeek(arrptr+2)
0d290                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0d290                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0d290                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0d290                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0d290     10 4E 85 F1 | 	sub	fp, #16
0d294     A7 16 02 FB | 	rdlong	arg03, fp
0d298     14 4E 85 F1 | 	sub	fp, #20
0d29c     03 16 16 F2 | 	cmp	arg03, #3 wc
0d2a0     30 00 90 CD |  if_b	jmp	#LR__1032
0d2a4     94 C5 BF FD | 	call	#_pop
0d2a8     A7 FA 61 FC | 	wrlong	result1, fp
0d2ac     04 4E 05 F1 | 	add	fp, #4
0d2b0     A7 FC 61 FC | 	wrlong	result2, fp
0d2b4     04 4E 05 F1 | 	add	fp, #4
0d2b8     A7 FE 61 FC | 	wrlong	result3, fp
0d2bc     08 4E 85 F1 | 	sub	fp, #8
0d2c0     A7 16 02 FB | 	rdlong	arg03, fp
0d2c4     30 4E 05 F1 | 	add	fp, #48
0d2c8     A7 16 62 FC | 	wrlong	arg03, fp
0d2cc     30 4E 85 F1 | 	sub	fp, #48
0d2d0     0C 00 90 FD | 	jmp	#LR__1033
0d2d4                 | LR__1032
0d2d4     30 4E 05 F1 | 	add	fp, #48
0d2d8     A7 00 68 FC | 	wrlong	#0, fp
0d2dc     30 4E 85 F1 | 	sub	fp, #48
0d2e0                 | LR__1033
0d2e0                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0d2e0     14 4E 05 F1 | 	add	fp, #20
0d2e4     A7 16 02 FB | 	rdlong	arg03, fp
0d2e8     14 4E 85 F1 | 	sub	fp, #20
0d2ec     02 16 16 F2 | 	cmp	arg03, #2 wc
0d2f0     30 00 90 CD |  if_b	jmp	#LR__1034
0d2f4     44 C5 BF FD | 	call	#_pop
0d2f8     A7 FA 61 FC | 	wrlong	result1, fp
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 FC 61 FC | 	wrlong	result2, fp
0d304     04 4E 05 F1 | 	add	fp, #4
0d308     A7 FE 61 FC | 	wrlong	result3, fp
0d30c     08 4E 85 F1 | 	sub	fp, #8
0d310     A7 16 02 FB | 	rdlong	arg03, fp
0d314     2C 4E 05 F1 | 	add	fp, #44
0d318     A7 16 62 FC | 	wrlong	arg03, fp
0d31c     2C 4E 85 F1 | 	sub	fp, #44
0d320     0C 00 90 FD | 	jmp	#LR__1035
0d324                 | LR__1034
0d324     2C 4E 05 F1 | 	add	fp, #44
0d328     A7 00 68 FC | 	wrlong	#0, fp
0d32c     2C 4E 85 F1 | 	sub	fp, #44
0d330                 | LR__1035
0d330                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0d330     14 4E 05 F1 | 	add	fp, #20
0d334     A7 16 02 FB | 	rdlong	arg03, fp
0d338     14 4E 85 F1 | 	sub	fp, #20
0d33c     01 16 16 F2 | 	cmp	arg03, #1 wc
0d340     30 00 90 CD |  if_b	jmp	#LR__1036
0d344     F4 C4 BF FD | 	call	#_pop
0d348     A7 FA 61 FC | 	wrlong	result1, fp
0d34c     04 4E 05 F1 | 	add	fp, #4
0d350     A7 FC 61 FC | 	wrlong	result2, fp
0d354     04 4E 05 F1 | 	add	fp, #4
0d358     A7 FE 61 FC | 	wrlong	result3, fp
0d35c     08 4E 85 F1 | 	sub	fp, #8
0d360     A7 16 02 FB | 	rdlong	arg03, fp
0d364     28 4E 05 F1 | 	add	fp, #40
0d368     A7 16 62 FC | 	wrlong	arg03, fp
0d36c     28 4E 85 F1 | 	sub	fp, #40
0d370     0C 00 90 FD | 	jmp	#LR__1037
0d374                 | LR__1036
0d374     28 4E 05 F1 | 	add	fp, #40
0d378     A7 00 68 FC | 	wrlong	#0, fp
0d37c     28 4E 85 F1 | 	sub	fp, #40
0d380                 | LR__1037
0d380     0C 4E 05 F1 | 	add	fp, #12
0d384     A7 20 02 FB | 	rdlong	local02, fp
0d388     1C 4E 05 F1 | 	add	fp, #28
0d38c     A7 22 02 FB | 	rdlong	local03, fp
0d390     04 4E 05 F1 | 	add	fp, #4
0d394     A7 FE 01 FB | 	rdlong	result3, fp
0d398     10 4E 85 F1 | 	sub	fp, #16
0d39c     A7 FC 01 FB | 	rdlong	result2, fp
0d3a0     FE FE 01 FD | 	qmul	result3, result2
0d3a4     10 20 06 F1 | 	add	local02, #16
0d3a8     14 4E 05 F1 | 	add	fp, #20
0d3ac     A7 FE 01 FB | 	rdlong	result3, fp
0d3b0     18 FA 61 FD | 	getqx	result1
0d3b4     FE FE 01 FD | 	qmul	result3, result2
0d3b8     FD 22 02 F1 | 	add	local03, result1
0d3bc     10 4E 85 F1 | 	sub	fp, #16
0d3c0     A7 FC 01 FB | 	rdlong	result2, fp
0d3c4     18 FE 61 FD | 	getqx	result3
0d3c8     FE FE 01 FD | 	qmul	result3, result2
0d3cc     08 4E 85 F1 | 	sub	fp, #8
0d3d0     A7 FC 01 FB | 	rdlong	result2, fp
0d3d4     18 FE 61 FD | 	getqx	result3
0d3d8     FF 22 02 F1 | 	add	local03, result3
0d3dc     FE 22 02 FD | 	qmul	local03, result2
0d3e0     1C 4E 05 F1 | 	add	fp, #28
0d3e4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d3e4                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d3e4                 | ' 
0d3e4                 | ' select case vartype
0d3e4     18 FE 61 FD | 	getqx	result3
0d3e8     FF 20 02 F1 | 	add	local02, result3
0d3ec     A7 20 62 FC | 	wrlong	local02, fp
0d3f0     24 4E 85 F1 | 	sub	fp, #36
0d3f4     A7 24 02 FB | 	rdlong	local04, fp
0d3f8     10 4E 85 F1 | 	sub	fp, #16
0d3fc     00 25 86 F1 | 	sub	local04, #256
0d400     0C 24 26 F3 | 	fle	local04, #12
0d404     30 24 62 FD | 	jmprel	local04
0d408                 | LR__1038
0d408     30 00 90 FD | 	jmp	#LR__1039
0d40c     58 00 90 FD | 	jmp	#LR__1040
0d410     8C 00 90 FD | 	jmp	#LR__1041
0d414     AC 00 90 FD | 	jmp	#LR__1042
0d418     E8 00 90 FD | 	jmp	#LR__1043
0d41c     08 01 90 FD | 	jmp	#LR__1044
0d420     24 01 90 FD | 	jmp	#LR__1045
0d424     40 01 90 FD | 	jmp	#LR__1046
0d428     50 01 90 FD | 	jmp	#LR__1047
0d42c     60 01 90 FD | 	jmp	#LR__1048
0d430     7C 01 90 FD | 	jmp	#LR__1049
0d434     8C 01 90 FD | 	jmp	#LR__1050
0d438     B8 01 90 FD | 	jmp	#LR__1051
0d43c                 | LR__1039
0d43c     A7 12 02 F6 | 	mov	arg01, fp
0d440     34 4E 05 F1 | 	add	fp, #52
0d444     A7 14 02 FB | 	rdlong	arg02, fp
0d448     34 4E 85 F1 | 	sub	fp, #52
0d44c     0C 16 06 F6 | 	mov	arg03, #12
0d450     0B 00 00 FF 
0d454     C0 E4 05 F1 | 	add	objptr, ##5824
0d458     88 AC B0 FD | 	call	#_psram_spin2_read1
0d45c     0B 00 00 FF 
0d460     C0 E4 85 F1 | 	sub	objptr, ##5824
0d464     8C 01 90 FD | 	jmp	#LR__1051
0d468                 | LR__1040
0d468     08 4E 05 F1 | 	add	fp, #8
0d46c     A7 38 68 FC | 	wrlong	#28, fp
0d470     2C 4E 05 F1 | 	add	fp, #44
0d474     A7 12 02 FB | 	rdlong	arg01, fp
0d478     34 4E 85 F1 | 	sub	fp, #52
0d47c     94 83 B0 FD | 	call	#_pspeek
0d480     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d484     A7 FA 61 FC | 	wrlong	result1, fp
0d488     80 FA 15 F2 | 	cmp	result1, #128 wc
0d48c     00 1F 66 36 |  if_ae	neg	local01, #256
0d490     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d494     11 1F 42 35 |  if_ae	or	local01, local03
0d498     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d49c     54 01 90 FD | 	jmp	#LR__1051
0d4a0                 | LR__1041
0d4a0     08 4E 05 F1 | 	add	fp, #8
0d4a4     A7 3A 68 FC | 	wrlong	#29, fp
0d4a8     2C 4E 05 F1 | 	add	fp, #44
0d4ac     A7 12 02 FB | 	rdlong	arg01, fp
0d4b0     34 4E 85 F1 | 	sub	fp, #52
0d4b4     5C 83 B0 FD | 	call	#_pspeek
0d4b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d4bc     A7 FA 61 FC | 	wrlong	result1, fp
0d4c0     30 01 90 FD | 	jmp	#LR__1051
0d4c4                 | LR__1042
0d4c4     08 4E 05 F1 | 	add	fp, #8
0d4c8     A7 38 68 FC | 	wrlong	#28, fp
0d4cc     2C 4E 05 F1 | 	add	fp, #44
0d4d0     A7 12 02 FB | 	rdlong	arg01, fp
0d4d4     34 4E 85 F1 | 	sub	fp, #52
0d4d8     90 83 B0 FD | 	call	#_pslpeek
0d4dc     FD FA 31 F9 | 	getword	result1, result1, #0
0d4e0     A7 FA 61 FC | 	wrlong	result1, fp
0d4e4     40 00 00 FF 
0d4e8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d4ec     FF 7F 00 3F 
0d4f0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d4f4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d4f8     11 1F 42 35 |  if_ae	or	local01, local03
0d4fc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d500     F0 00 90 FD | 	jmp	#LR__1051
0d504                 | LR__1043
0d504     08 4E 05 F1 | 	add	fp, #8
0d508     A7 3A 68 FC | 	wrlong	#29, fp
0d50c     2C 4E 05 F1 | 	add	fp, #44
0d510     A7 12 02 FB | 	rdlong	arg01, fp
0d514     34 4E 85 F1 | 	sub	fp, #52
0d518     50 83 B0 FD | 	call	#_pslpeek
0d51c     FD FA 31 F9 | 	getword	result1, result1, #0
0d520     A7 FA 61 FC | 	wrlong	result1, fp
0d524     CC 00 90 FD | 	jmp	#LR__1051
0d528                 | LR__1044
0d528     08 4E 05 F1 | 	add	fp, #8
0d52c     A7 38 68 FC | 	wrlong	#28, fp
0d530     2C 4E 05 F1 | 	add	fp, #44
0d534     A7 12 02 FB | 	rdlong	arg01, fp
0d538     34 4E 85 F1 | 	sub	fp, #52
0d53c     2C 83 B0 FD | 	call	#_pslpeek
0d540     A7 FA 61 FC | 	wrlong	result1, fp
0d544     AC 00 90 FD | 	jmp	#LR__1051
0d548                 | LR__1045
0d548     08 4E 05 F1 | 	add	fp, #8
0d54c     A7 3A 68 FC | 	wrlong	#29, fp
0d550     2C 4E 05 F1 | 	add	fp, #44
0d554     A7 12 02 FB | 	rdlong	arg01, fp
0d558     34 4E 85 F1 | 	sub	fp, #52
0d55c     0C 83 B0 FD | 	call	#_pslpeek
0d560     A7 FA 61 FC | 	wrlong	result1, fp
0d564     8C 00 90 FD | 	jmp	#LR__1051
0d568                 | LR__1046
0d568     08 4E 05 F1 | 	add	fp, #8
0d56c     A7 FE 69 FC | 	wrlong	#255, fp
0d570     08 4E 85 F1 | 	sub	fp, #8
0d574     A7 60 68 FC | 	wrlong	#48, fp
0d578     78 00 90 FD | 	jmp	#LR__1051
0d57c                 | LR__1047
0d57c     08 4E 05 F1 | 	add	fp, #8
0d580     A7 FE 69 FC | 	wrlong	#255, fp
0d584     08 4E 85 F1 | 	sub	fp, #8
0d588     A7 60 68 FC | 	wrlong	#48, fp
0d58c     64 00 90 FD | 	jmp	#LR__1051
0d590                 | LR__1048
0d590     08 4E 05 F1 | 	add	fp, #8
0d594     A7 3C 68 FC | 	wrlong	#30, fp
0d598     2C 4E 05 F1 | 	add	fp, #44
0d59c     A7 12 02 FB | 	rdlong	arg01, fp
0d5a0     34 4E 85 F1 | 	sub	fp, #52
0d5a4     C4 82 B0 FD | 	call	#_pslpeek
0d5a8     A7 FA 61 FC | 	wrlong	result1, fp
0d5ac     44 00 90 FD | 	jmp	#LR__1051
0d5b0                 | LR__1049
0d5b0     08 4E 05 F1 | 	add	fp, #8
0d5b4     A7 FE 69 FC | 	wrlong	#255, fp
0d5b8     08 4E 85 F1 | 	sub	fp, #8
0d5bc     A7 60 68 FC | 	wrlong	#48, fp
0d5c0     30 00 90 FD | 	jmp	#LR__1051
0d5c4                 | LR__1050
0d5c4     08 4E 05 F1 | 	add	fp, #8
0d5c8     A7 3E 68 FC | 	wrlong	#31, fp
0d5cc     2C 4E 05 F1 | 	add	fp, #44
0d5d0     A7 12 02 FB | 	rdlong	arg01, fp
0d5d4     34 4E 85 F1 | 	sub	fp, #52
0d5d8     90 82 B0 FD | 	call	#_pslpeek
0d5dc     A7 FA 61 FC | 	wrlong	result1, fp
0d5e0     00 04 00 FF 
0d5e4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d5e8     08 4E 05 31 |  if_ae	add	fp, #8
0d5ec     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d5f0     08 4E 85 31 |  if_ae	sub	fp, #8
0d5f4                 | LR__1051
0d5f4     A7 12 02 F6 | 	mov	arg01, fp
0d5f8     D8 C2 BF FD | 	call	#_push
0d5fc                 | LR__1052
0d5fc     A7 F0 03 F6 | 	mov	ptra, fp
0d600     B2 00 A0 FD | 	call	#popregs_
0d604                 | _do_getvar_ret
0d604     2D 00 64 FD | 	ret
0d608                 | 
0d608                 | ' 
0d608                 | ' '------------------------ Operators 
0d608                 | ' 
0d608                 | ' sub do_plus 
0d608                 | _do_plus
0d608     05 4A 05 F6 | 	mov	COUNT_, #5
0d60c     A8 00 A0 FD | 	call	#pushregs_
0d610     18 F0 07 F1 | 	add	ptra, #24
0d614     24 C2 BF FD | 	call	#_pop
0d618     FD 1E 02 F6 | 	mov	local01, result1
0d61c     FE 20 02 F6 | 	mov	local02, result2
0d620     FF 22 02 F6 | 	mov	local03, result3
0d624     0C 4E 05 F1 | 	add	fp, #12
0d628     A7 1E 62 FC | 	wrlong	local01, fp
0d62c     04 4E 05 F1 | 	add	fp, #4
0d630     A7 20 62 FC | 	wrlong	local02, fp
0d634     04 4E 05 F1 | 	add	fp, #4
0d638     A7 22 62 FC | 	wrlong	local03, fp
0d63c     14 4E 85 F1 | 	sub	fp, #20
0d640     F8 C1 BF FD | 	call	#_pop
0d644     FF 22 02 F6 | 	mov	local03, result3
0d648     A7 FA 61 FC | 	wrlong	result1, fp
0d64c     04 4E 05 F1 | 	add	fp, #4
0d650     A7 FC 61 FC | 	wrlong	result2, fp
0d654     04 4E 05 F1 | 	add	fp, #4
0d658     A7 22 62 FC | 	wrlong	local03, fp
0d65c                 | ' 
0d65c                 | ' t2=pop()
0d65c                 | ' t1=pop()
0d65c                 | ' 
0d65c                 | ' 
0d65c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d65c     08 4E 85 F1 | 	sub	fp, #8
0d660     1D 22 0E F2 | 	cmp	local03, #29 wz
0d664     14 4E 05 A1 |  if_e	add	fp, #20
0d668     A7 24 02 AB |  if_e	rdlong	local04, fp
0d66c     14 4E 85 A1 |  if_e	sub	fp, #20
0d670     12 23 02 A6 |  if_e	mov	local03, local04
0d674     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d678     1C 00 90 5D |  if_ne	jmp	#LR__1060
0d67c     A7 1E 02 FB | 	rdlong	local01, fp
0d680     0C 4E 05 F1 | 	add	fp, #12
0d684     A7 20 02 FB | 	rdlong	local02, fp
0d688     0C 4E 85 F1 | 	sub	fp, #12
0d68c     10 1F 02 F1 | 	add	local01, local02
0d690     A7 1E 62 FC | 	wrlong	local01, fp
0d694     48 04 90 FD | 	jmp	#LR__1075
0d698                 | LR__1060
0d698                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d698     08 4E 05 F1 | 	add	fp, #8
0d69c     A7 1E 02 FB | 	rdlong	local01, fp
0d6a0     08 4E 85 F1 | 	sub	fp, #8
0d6a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6a8     14 4E 05 A1 |  if_e	add	fp, #20
0d6ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0d6b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d6b4     12 23 02 A6 |  if_e	mov	local03, local04
0d6b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d6bc     28 00 90 5D |  if_ne	jmp	#LR__1061
0d6c0     A7 1E 02 FB | 	rdlong	local01, fp
0d6c4     0C 4E 05 F1 | 	add	fp, #12
0d6c8     A7 20 02 FB | 	rdlong	local02, fp
0d6cc     0C 4E 85 F1 | 	sub	fp, #12
0d6d0     10 1F 02 F1 | 	add	local01, local02
0d6d4     A7 1E 62 FC | 	wrlong	local01, fp
0d6d8     08 4E 05 F1 | 	add	fp, #8
0d6dc     A7 38 68 FC | 	wrlong	#28, fp
0d6e0     08 4E 85 F1 | 	sub	fp, #8
0d6e4     F8 03 90 FD | 	jmp	#LR__1075
0d6e8                 | LR__1061
0d6e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d6e8     08 4E 05 F1 | 	add	fp, #8
0d6ec     A7 1E 02 FB | 	rdlong	local01, fp
0d6f0     08 4E 85 F1 | 	sub	fp, #8
0d6f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6f8     14 4E 05 A1 |  if_e	add	fp, #20
0d6fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d700     14 4E 85 A1 |  if_e	sub	fp, #20
0d704     12 23 02 A6 |  if_e	mov	local03, local04
0d708     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d70c     30 00 90 5D |  if_ne	jmp	#LR__1062
0d710     A7 12 02 FB | 	rdlong	arg01, fp
0d714     A0 DB B0 FD | 	call	#__system___float_fromuns
0d718     FD 12 02 F6 | 	mov	arg01, result1
0d71c     0C 4E 05 F1 | 	add	fp, #12
0d720     A7 14 02 FB | 	rdlong	arg02, fp
0d724     0C 4E 85 F1 | 	sub	fp, #12
0d728     C0 DB B0 FD | 	call	#__system___float_add
0d72c     A7 FA 61 FC | 	wrlong	result1, fp
0d730     08 4E 05 F1 | 	add	fp, #8
0d734     A7 3C 68 FC | 	wrlong	#30, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     A0 03 90 FD | 	jmp	#LR__1075
0d740                 | LR__1062
0d740                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d740     08 4E 05 F1 | 	add	fp, #8
0d744     A7 1E 02 FB | 	rdlong	local01, fp
0d748     08 4E 85 F1 | 	sub	fp, #8
0d74c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d750     14 4E 05 A1 |  if_e	add	fp, #20
0d754     A7 24 02 AB |  if_e	rdlong	local04, fp
0d758     14 4E 85 A1 |  if_e	sub	fp, #20
0d75c     12 23 02 A6 |  if_e	mov	local03, local04
0d760     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d764     1C 00 90 5D |  if_ne	jmp	#LR__1063
0d768     A7 1E 02 FB | 	rdlong	local01, fp
0d76c     0C 4E 05 F1 | 	add	fp, #12
0d770     A7 20 02 FB | 	rdlong	local02, fp
0d774     0C 4E 85 F1 | 	sub	fp, #12
0d778     10 1F 02 F1 | 	add	local01, local02
0d77c     A7 1E 62 FC | 	wrlong	local01, fp
0d780     5C 03 90 FD | 	jmp	#LR__1075
0d784                 | LR__1063
0d784                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d784     08 4E 05 F1 | 	add	fp, #8
0d788     A7 1E 02 FB | 	rdlong	local01, fp
0d78c     08 4E 85 F1 | 	sub	fp, #8
0d790     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d794     14 4E 05 A1 |  if_e	add	fp, #20
0d798     A7 24 02 AB |  if_e	rdlong	local04, fp
0d79c     14 4E 85 A1 |  if_e	sub	fp, #20
0d7a0     12 23 02 A6 |  if_e	mov	local03, local04
0d7a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d7a8     1C 00 90 5D |  if_ne	jmp	#LR__1064
0d7ac     A7 1E 02 FB | 	rdlong	local01, fp
0d7b0     0C 4E 05 F1 | 	add	fp, #12
0d7b4     A7 20 02 FB | 	rdlong	local02, fp
0d7b8     0C 4E 85 F1 | 	sub	fp, #12
0d7bc     10 1F 02 F1 | 	add	local01, local02
0d7c0     A7 1E 62 FC | 	wrlong	local01, fp
0d7c4     18 03 90 FD | 	jmp	#LR__1075
0d7c8                 | LR__1064
0d7c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d7c8     08 4E 05 F1 | 	add	fp, #8
0d7cc     A7 1E 02 FB | 	rdlong	local01, fp
0d7d0     08 4E 85 F1 | 	sub	fp, #8
0d7d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7d8     14 4E 05 A1 |  if_e	add	fp, #20
0d7dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7e4     12 23 02 A6 |  if_e	mov	local03, local04
0d7e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7ec     40 00 90 5D |  if_ne	jmp	#LR__1065
0d7f0     A7 12 02 FB | 	rdlong	arg01, fp
0d7f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7f8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d7fc     00 26 06 36 |  if_ae	mov	local05, #0
0d800     B4 DA B0 FD | 	call	#__system___float_fromuns
0d804     13 FB 61 F5 | 	xor	result1, local05
0d808     FD 12 02 F6 | 	mov	arg01, result1
0d80c     0C 4E 05 F1 | 	add	fp, #12
0d810     A7 14 02 FB | 	rdlong	arg02, fp
0d814     0C 4E 85 F1 | 	sub	fp, #12
0d818     D0 DA B0 FD | 	call	#__system___float_add
0d81c     A7 FA 61 FC | 	wrlong	result1, fp
0d820     08 4E 05 F1 | 	add	fp, #8
0d824     A7 3C 68 FC | 	wrlong	#30, fp
0d828     08 4E 85 F1 | 	sub	fp, #8
0d82c     B0 02 90 FD | 	jmp	#LR__1075
0d830                 | LR__1065
0d830                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d830     08 4E 05 F1 | 	add	fp, #8
0d834     A7 1E 02 FB | 	rdlong	local01, fp
0d838     08 4E 85 F1 | 	sub	fp, #8
0d83c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d840     14 4E 05 A1 |  if_e	add	fp, #20
0d844     A7 24 02 AB |  if_e	rdlong	local04, fp
0d848     14 4E 85 A1 |  if_e	sub	fp, #20
0d84c     12 23 02 A6 |  if_e	mov	local03, local04
0d850     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d854     28 00 90 5D |  if_ne	jmp	#LR__1066
0d858     A7 1E 02 FB | 	rdlong	local01, fp
0d85c     0C 4E 05 F1 | 	add	fp, #12
0d860     A7 12 02 FB | 	rdlong	arg01, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     4C DA B0 FD | 	call	#__system___float_fromuns
0d86c     FD 14 02 F6 | 	mov	arg02, result1
0d870     0F 13 02 F6 | 	mov	arg01, local01
0d874     74 DA B0 FD | 	call	#__system___float_add
0d878     A7 FA 61 FC | 	wrlong	result1, fp
0d87c     60 02 90 FD | 	jmp	#LR__1075
0d880                 | LR__1066
0d880                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0d880     08 4E 05 F1 | 	add	fp, #8
0d884     A7 1E 02 FB | 	rdlong	local01, fp
0d888     08 4E 85 F1 | 	sub	fp, #8
0d88c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d890     14 4E 05 A1 |  if_e	add	fp, #20
0d894     A7 24 02 AB |  if_e	rdlong	local04, fp
0d898     14 4E 85 A1 |  if_e	sub	fp, #20
0d89c     12 23 02 A6 |  if_e	mov	local03, local04
0d8a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8a4     38 00 90 5D |  if_ne	jmp	#LR__1067
0d8a8     A7 1E 02 FB | 	rdlong	local01, fp
0d8ac     0C 4E 05 F1 | 	add	fp, #12
0d8b0     A7 12 02 FB | 	rdlong	arg01, fp
0d8b4     0C 4E 85 F1 | 	sub	fp, #12
0d8b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0d8c0     00 26 06 36 |  if_ae	mov	local05, #0
0d8c4     F0 D9 B0 FD | 	call	#__system___float_fromuns
0d8c8     13 FB 61 F5 | 	xor	result1, local05
0d8cc     FD 14 02 F6 | 	mov	arg02, result1
0d8d0     0F 13 02 F6 | 	mov	arg01, local01
0d8d4     14 DA B0 FD | 	call	#__system___float_add
0d8d8     A7 FA 61 FC | 	wrlong	result1, fp
0d8dc     00 02 90 FD | 	jmp	#LR__1075
0d8e0                 | LR__1067
0d8e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0d8e0     08 4E 05 F1 | 	add	fp, #8
0d8e4     A7 1E 02 FB | 	rdlong	local01, fp
0d8e8     08 4E 85 F1 | 	sub	fp, #8
0d8ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d8f0     14 4E 05 A1 |  if_e	add	fp, #20
0d8f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d8fc     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0d900     1C 00 90 5D |  if_ne	jmp	#LR__1068
0d904     A7 12 02 FB | 	rdlong	arg01, fp
0d908     0C 4E 05 F1 | 	add	fp, #12
0d90c     A7 14 02 FB | 	rdlong	arg02, fp
0d910     0C 4E 85 F1 | 	sub	fp, #12
0d914     D4 D9 B0 FD | 	call	#__system___float_add
0d918     A7 FA 61 FC | 	wrlong	result1, fp
0d91c     C0 01 90 FD | 	jmp	#LR__1075
0d920                 | LR__1068
0d920                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d920     08 4E 05 F1 | 	add	fp, #8
0d924     A7 1E 02 FB | 	rdlong	local01, fp
0d928     08 4E 85 F1 | 	sub	fp, #8
0d92c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d930     24 00 90 5D |  if_ne	jmp	#LR__1069
0d934     14 4E 05 F1 | 	add	fp, #20
0d938     A7 22 02 FB | 	rdlong	local03, fp
0d93c     14 4E 85 F1 | 	sub	fp, #20
0d940     1F 22 0E F2 | 	cmp	local03, #31 wz
0d944     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d948     08 4E 05 51 |  if_ne	add	fp, #8
0d94c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d950     08 4E 85 51 |  if_ne	sub	fp, #8
0d954     88 01 90 5D |  if_ne	jmp	#LR__1075
0d958                 | LR__1069
0d958                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d958     14 4E 05 F1 | 	add	fp, #20
0d95c     A7 1E 02 FB | 	rdlong	local01, fp
0d960     14 4E 85 F1 | 	sub	fp, #20
0d964     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d968     24 00 90 5D |  if_ne	jmp	#LR__1070
0d96c     08 4E 05 F1 | 	add	fp, #8
0d970     A7 22 02 FB | 	rdlong	local03, fp
0d974     08 4E 85 F1 | 	sub	fp, #8
0d978     1F 22 0E F2 | 	cmp	local03, #31 wz
0d97c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d980     08 4E 05 51 |  if_ne	add	fp, #8
0d984     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d988     08 4E 85 51 |  if_ne	sub	fp, #8
0d98c     50 01 90 5D |  if_ne	jmp	#LR__1075
0d990                 | LR__1070
0d990                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0d990     08 4E 05 F1 | 	add	fp, #8
0d994     A7 1E 02 FB | 	rdlong	local01, fp
0d998     08 4E 85 F1 | 	sub	fp, #8
0d99c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d9a0     14 4E 05 A1 |  if_e	add	fp, #20
0d9a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9b0     1C 00 90 5D |  if_ne	jmp	#LR__1071
0d9b4     A7 12 02 FB | 	rdlong	arg01, fp
0d9b8     0C 4E 05 F1 | 	add	fp, #12
0d9bc     A7 14 02 FB | 	rdlong	arg02, fp
0d9c0     0C 4E 85 F1 | 	sub	fp, #12
0d9c4     68 B2 B0 FD | 	call	#__system___string_concat
0d9c8     A7 FA 61 FC | 	wrlong	result1, fp
0d9cc     10 01 90 FD | 	jmp	#LR__1075
0d9d0                 | LR__1071
0d9d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 1E 02 FB | 	rdlong	local01, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d9e0     14 4E 05 A1 |  if_e	add	fp, #20
0d9e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9f0     30 00 90 5D |  if_ne	jmp	#LR__1072
0d9f4     A7 12 02 FB | 	rdlong	arg01, fp
0d9f8     48 EF BF FD | 	call	#_convertstring
0d9fc     FD 12 02 F6 | 	mov	arg01, result1
0da00     0C 4E 05 F1 | 	add	fp, #12
0da04     A7 14 02 FB | 	rdlong	arg02, fp
0da08     0C 4E 85 F1 | 	sub	fp, #12
0da0c     20 B2 B0 FD | 	call	#__system___string_concat
0da10     A7 FA 61 FC | 	wrlong	result1, fp
0da14     08 4E 05 F1 | 	add	fp, #8
0da18     A7 3E 68 FC | 	wrlong	#31, fp
0da1c     08 4E 85 F1 | 	sub	fp, #8
0da20     BC 00 90 FD | 	jmp	#LR__1075
0da24                 | LR__1072
0da24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0da24     08 4E 05 F1 | 	add	fp, #8
0da28     A7 1E 02 FB | 	rdlong	local01, fp
0da2c     08 4E 85 F1 | 	sub	fp, #8
0da30     1F 1E 0E F2 | 	cmp	local01, #31 wz
0da34     14 4E 05 A1 |  if_e	add	fp, #20
0da38     A7 22 02 AB |  if_e	rdlong	local03, fp
0da3c     14 4E 85 A1 |  if_e	sub	fp, #20
0da40     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0da44     28 00 90 5D |  if_ne	jmp	#LR__1073
0da48     A7 1E 02 FB | 	rdlong	local01, fp
0da4c     0C 4E 05 F1 | 	add	fp, #12
0da50     A7 12 02 FB | 	rdlong	arg01, fp
0da54     0C 4E 85 F1 | 	sub	fp, #12
0da58     E8 EE BF FD | 	call	#_convertstring
0da5c     FD 14 02 F6 | 	mov	arg02, result1
0da60     0F 13 02 F6 | 	mov	arg01, local01
0da64     C8 B1 B0 FD | 	call	#__system___string_concat
0da68     A7 FA 61 FC | 	wrlong	result1, fp
0da6c     70 00 90 FD | 	jmp	#LR__1075
0da70                 | LR__1073
0da70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0da70     08 4E 05 F1 | 	add	fp, #8
0da74     A7 1E 02 FB | 	rdlong	local01, fp
0da78     08 4E 85 F1 | 	sub	fp, #8
0da7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0da80     14 4E 05 A1 |  if_e	add	fp, #20
0da84     A7 22 02 AB |  if_e	rdlong	local03, fp
0da88     14 4E 85 A1 |  if_e	sub	fp, #20
0da8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0da90     3C 00 90 5D |  if_ne	jmp	#LR__1074
0da94     A7 12 02 FB | 	rdlong	arg01, fp
0da98     A8 EE BF FD | 	call	#_convertstring
0da9c     FD 1E 02 F6 | 	mov	local01, result1
0daa0     0C 4E 05 F1 | 	add	fp, #12
0daa4     A7 12 02 FB | 	rdlong	arg01, fp
0daa8     0C 4E 85 F1 | 	sub	fp, #12
0daac     94 EE BF FD | 	call	#_convertstring
0dab0     FD 14 02 F6 | 	mov	arg02, result1
0dab4     0F 13 02 F6 | 	mov	arg01, local01
0dab8     74 B1 B0 FD | 	call	#__system___string_concat
0dabc     A7 FA 61 FC | 	wrlong	result1, fp
0dac0     08 4E 05 F1 | 	add	fp, #8
0dac4     A7 3E 68 FC | 	wrlong	#31, fp
0dac8     08 4E 85 F1 | 	sub	fp, #8
0dacc     10 00 90 FD | 	jmp	#LR__1075
0dad0                 | LR__1074
0dad0     A7 08 68 FC | 	wrlong	#4, fp
0dad4     08 4E 05 F1 | 	add	fp, #8
0dad8     A7 FE 69 FC | 	wrlong	#255, fp
0dadc     08 4E 85 F1 | 	sub	fp, #8
0dae0                 | LR__1075
0dae0     A7 12 02 F6 | 	mov	arg01, fp
0dae4     EC BD BF FD | 	call	#_push
0dae8     A7 F0 03 F6 | 	mov	ptra, fp
0daec     B2 00 A0 FD | 	call	#popregs_
0daf0                 | _do_plus_ret
0daf0     2D 00 64 FD | 	ret
0daf4                 | 
0daf4                 | ' 
0daf4                 | ' sub do_minus
0daf4                 | _do_minus
0daf4     05 4A 05 F6 | 	mov	COUNT_, #5
0daf8     A8 00 A0 FD | 	call	#pushregs_
0dafc     18 F0 07 F1 | 	add	ptra, #24
0db00     38 BD BF FD | 	call	#_pop
0db04     FD 1E 02 F6 | 	mov	local01, result1
0db08     FE 20 02 F6 | 	mov	local02, result2
0db0c     FF 22 02 F6 | 	mov	local03, result3
0db10     0C 4E 05 F1 | 	add	fp, #12
0db14     A7 1E 62 FC | 	wrlong	local01, fp
0db18     04 4E 05 F1 | 	add	fp, #4
0db1c     A7 20 62 FC | 	wrlong	local02, fp
0db20     04 4E 05 F1 | 	add	fp, #4
0db24     A7 22 62 FC | 	wrlong	local03, fp
0db28     14 4E 85 F1 | 	sub	fp, #20
0db2c     0C BD BF FD | 	call	#_pop
0db30     FF 22 02 F6 | 	mov	local03, result3
0db34     A7 FA 61 FC | 	wrlong	result1, fp
0db38     04 4E 05 F1 | 	add	fp, #4
0db3c     A7 FC 61 FC | 	wrlong	result2, fp
0db40     04 4E 05 F1 | 	add	fp, #4
0db44     A7 22 62 FC | 	wrlong	local03, fp
0db48                 | ' 
0db48                 | ' t2=pop()
0db48                 | ' t1=pop()
0db48                 | ' 
0db48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0db48     08 4E 85 F1 | 	sub	fp, #8
0db4c     1D 22 0E F2 | 	cmp	local03, #29 wz
0db50     14 4E 05 A1 |  if_e	add	fp, #20
0db54     A7 24 02 AB |  if_e	rdlong	local04, fp
0db58     14 4E 85 A1 |  if_e	sub	fp, #20
0db5c     12 23 02 A6 |  if_e	mov	local03, local04
0db60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0db64     5C 00 90 5D |  if_ne	jmp	#LR__1081
0db68                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0db68     0C 4E 05 F1 | 	add	fp, #12
0db6c     A7 1E 02 FB | 	rdlong	local01, fp
0db70     0C 4E 85 F1 | 	sub	fp, #12
0db74     A7 22 02 FB | 	rdlong	local03, fp
0db78     11 1F 12 F2 | 	cmp	local01, local03 wc
0db7c     1C 00 90 3D |  if_ae	jmp	#LR__1080
0db80     A7 1E 02 FB | 	rdlong	local01, fp
0db84     0C 4E 05 F1 | 	add	fp, #12
0db88     A7 20 02 FB | 	rdlong	local02, fp
0db8c     0C 4E 85 F1 | 	sub	fp, #12
0db90     10 1F 82 F1 | 	sub	local01, local02
0db94     A7 1E 62 FC | 	wrlong	local01, fp
0db98     F4 02 90 FD | 	jmp	#LR__1090
0db9c                 | LR__1080
0db9c     A7 1E 02 FB | 	rdlong	local01, fp
0dba0     0C 4E 05 F1 | 	add	fp, #12
0dba4     A7 20 02 FB | 	rdlong	local02, fp
0dba8     0C 4E 85 F1 | 	sub	fp, #12
0dbac     10 1F 82 F1 | 	sub	local01, local02
0dbb0     A7 1E 62 FC | 	wrlong	local01, fp
0dbb4     08 4E 05 F1 | 	add	fp, #8
0dbb8     A7 38 68 FC | 	wrlong	#28, fp
0dbbc     08 4E 85 F1 | 	sub	fp, #8
0dbc0     CC 02 90 FD | 	jmp	#LR__1090
0dbc4                 | LR__1081
0dbc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0dbc4     08 4E 05 F1 | 	add	fp, #8
0dbc8     A7 1E 02 FB | 	rdlong	local01, fp
0dbcc     08 4E 85 F1 | 	sub	fp, #8
0dbd0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dbd4     14 4E 05 A1 |  if_e	add	fp, #20
0dbd8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbdc     14 4E 85 A1 |  if_e	sub	fp, #20
0dbe0     12 23 02 A6 |  if_e	mov	local03, local04
0dbe4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbe8     28 00 90 5D |  if_ne	jmp	#LR__1082
0dbec     A7 1E 02 FB | 	rdlong	local01, fp
0dbf0     0C 4E 05 F1 | 	add	fp, #12
0dbf4     A7 20 02 FB | 	rdlong	local02, fp
0dbf8     0C 4E 85 F1 | 	sub	fp, #12
0dbfc     10 1F 82 F1 | 	sub	local01, local02
0dc00     A7 1E 62 FC | 	wrlong	local01, fp
0dc04     08 4E 05 F1 | 	add	fp, #8
0dc08     A7 38 68 FC | 	wrlong	#28, fp
0dc0c     08 4E 85 F1 | 	sub	fp, #8
0dc10     7C 02 90 FD | 	jmp	#LR__1090
0dc14                 | LR__1082
0dc14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dc14     08 4E 05 F1 | 	add	fp, #8
0dc18     A7 1E 02 FB | 	rdlong	local01, fp
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc24     14 4E 05 A1 |  if_e	add	fp, #20
0dc28     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc2c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc30     12 23 02 A6 |  if_e	mov	local03, local04
0dc34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc38     34 00 90 5D |  if_ne	jmp	#LR__1083
0dc3c     A7 12 02 FB | 	rdlong	arg01, fp
0dc40     74 D6 B0 FD | 	call	#__system___float_fromuns
0dc44     FD 12 02 F6 | 	mov	arg01, result1
0dc48     0C 4E 05 F1 | 	add	fp, #12
0dc4c     A7 14 02 FB | 	rdlong	arg02, fp
0dc50     0C 4E 85 F1 | 	sub	fp, #12
0dc54     1F 14 E6 F4 | 	bitnot	arg02, #31
0dc58     90 D6 B0 FD | 	call	#__system___float_add
0dc5c     A7 FA 61 FC | 	wrlong	result1, fp
0dc60     08 4E 05 F1 | 	add	fp, #8
0dc64     A7 3C 68 FC | 	wrlong	#30, fp
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     20 02 90 FD | 	jmp	#LR__1090
0dc70                 | LR__1083
0dc70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0dc70     08 4E 05 F1 | 	add	fp, #8
0dc74     A7 1E 02 FB | 	rdlong	local01, fp
0dc78     08 4E 85 F1 | 	sub	fp, #8
0dc7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc80     14 4E 05 A1 |  if_e	add	fp, #20
0dc84     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc88     14 4E 85 A1 |  if_e	sub	fp, #20
0dc8c     12 23 02 A6 |  if_e	mov	local03, local04
0dc90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dc94     1C 00 90 5D |  if_ne	jmp	#LR__1084
0dc98     A7 1E 02 FB | 	rdlong	local01, fp
0dc9c     0C 4E 05 F1 | 	add	fp, #12
0dca0     A7 20 02 FB | 	rdlong	local02, fp
0dca4     0C 4E 85 F1 | 	sub	fp, #12
0dca8     10 1F 82 F1 | 	sub	local01, local02
0dcac     A7 1E 62 FC | 	wrlong	local01, fp
0dcb0     DC 01 90 FD | 	jmp	#LR__1090
0dcb4                 | LR__1084
0dcb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0dcb4     08 4E 05 F1 | 	add	fp, #8
0dcb8     A7 1E 02 FB | 	rdlong	local01, fp
0dcbc     08 4E 85 F1 | 	sub	fp, #8
0dcc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dcc4     14 4E 05 A1 |  if_e	add	fp, #20
0dcc8     A7 24 02 AB |  if_e	rdlong	local04, fp
0dccc     14 4E 85 A1 |  if_e	sub	fp, #20
0dcd0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0dcd4     1C 00 90 5D |  if_ne	jmp	#LR__1085
0dcd8     A7 1E 02 FB | 	rdlong	local01, fp
0dcdc     0C 4E 05 F1 | 	add	fp, #12
0dce0     A7 20 02 FB | 	rdlong	local02, fp
0dce4     0C 4E 85 F1 | 	sub	fp, #12
0dce8     10 1F 82 F1 | 	sub	local01, local02
0dcec     A7 1E 62 FC | 	wrlong	local01, fp
0dcf0     9C 01 90 FD | 	jmp	#LR__1090
0dcf4                 | LR__1085
0dcf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 1E 02 FB | 	rdlong	local01, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd04     14 4E 05 A1 |  if_e	add	fp, #20
0dd08     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd0c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd14     44 00 90 5D |  if_ne	jmp	#LR__1086
0dd18     A7 12 02 FB | 	rdlong	arg01, fp
0dd1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd20     1F 26 C6 C9 |  if_b	decod	local05, #31
0dd24     00 26 06 36 |  if_ae	mov	local05, #0
0dd28     8C D5 B0 FD | 	call	#__system___float_fromuns
0dd2c     13 FB 61 F5 | 	xor	result1, local05
0dd30     FD 12 02 F6 | 	mov	arg01, result1
0dd34     0C 4E 05 F1 | 	add	fp, #12
0dd38     A7 14 02 FB | 	rdlong	arg02, fp
0dd3c     0C 4E 85 F1 | 	sub	fp, #12
0dd40     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd44     A4 D5 B0 FD | 	call	#__system___float_add
0dd48     A7 FA 61 FC | 	wrlong	result1, fp
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 3C 68 FC | 	wrlong	#30, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     34 01 90 FD | 	jmp	#LR__1090
0dd5c                 | LR__1086
0dd5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0dd5c     08 4E 05 F1 | 	add	fp, #8
0dd60     A7 1E 02 FB | 	rdlong	local01, fp
0dd64     08 4E 85 F1 | 	sub	fp, #8
0dd68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dd6c     14 4E 05 A1 |  if_e	add	fp, #20
0dd70     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd74     14 4E 85 A1 |  if_e	sub	fp, #20
0dd78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd7c     2C 00 90 5D |  if_ne	jmp	#LR__1087
0dd80     A7 1E 02 FB | 	rdlong	local01, fp
0dd84     0C 4E 05 F1 | 	add	fp, #12
0dd88     A7 12 02 FB | 	rdlong	arg01, fp
0dd8c     0C 4E 85 F1 | 	sub	fp, #12
0dd90     24 D5 B0 FD | 	call	#__system___float_fromuns
0dd94     FD 14 02 F6 | 	mov	arg02, result1
0dd98     0F 13 02 F6 | 	mov	arg01, local01
0dd9c     1F 14 E6 F4 | 	bitnot	arg02, #31
0dda0     48 D5 B0 FD | 	call	#__system___float_add
0dda4     A7 FA 61 FC | 	wrlong	result1, fp
0dda8     E4 00 90 FD | 	jmp	#LR__1090
0ddac                 | LR__1087
0ddac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0ddac     08 4E 05 F1 | 	add	fp, #8
0ddb0     A7 1E 02 FB | 	rdlong	local01, fp
0ddb4     08 4E 85 F1 | 	sub	fp, #8
0ddb8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ddbc     14 4E 05 A1 |  if_e	add	fp, #20
0ddc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddc4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddc8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ddcc     3C 00 90 5D |  if_ne	jmp	#LR__1088
0ddd0     A7 1E 02 FB | 	rdlong	local01, fp
0ddd4     0C 4E 05 F1 | 	add	fp, #12
0ddd8     A7 12 02 FB | 	rdlong	arg01, fp
0dddc     0C 4E 85 F1 | 	sub	fp, #12
0dde0     09 13 52 F6 | 	abs	arg01, arg01 wc
0dde4     1F 26 C6 C9 |  if_b	decod	local05, #31
0dde8     00 26 06 36 |  if_ae	mov	local05, #0
0ddec     C8 D4 B0 FD | 	call	#__system___float_fromuns
0ddf0     13 FB 61 F5 | 	xor	result1, local05
0ddf4     FD 14 02 F6 | 	mov	arg02, result1
0ddf8     0F 13 02 F6 | 	mov	arg01, local01
0ddfc     1F 14 E6 F4 | 	bitnot	arg02, #31
0de00     E8 D4 B0 FD | 	call	#__system___float_add
0de04     A7 FA 61 FC | 	wrlong	result1, fp
0de08     84 00 90 FD | 	jmp	#LR__1090
0de0c                 | LR__1088
0de0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0de0c     08 4E 05 F1 | 	add	fp, #8
0de10     A7 1E 02 FB | 	rdlong	local01, fp
0de14     08 4E 85 F1 | 	sub	fp, #8
0de18     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de1c     14 4E 05 A1 |  if_e	add	fp, #20
0de20     A7 22 02 AB |  if_e	rdlong	local03, fp
0de24     14 4E 85 A1 |  if_e	sub	fp, #20
0de28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0de2c     20 00 90 5D |  if_ne	jmp	#LR__1089
0de30     A7 12 02 FB | 	rdlong	arg01, fp
0de34     0C 4E 05 F1 | 	add	fp, #12
0de38     A7 14 02 FB | 	rdlong	arg02, fp
0de3c     0C 4E 85 F1 | 	sub	fp, #12
0de40     1F 14 E6 F4 | 	bitnot	arg02, #31
0de44     A4 D4 B0 FD | 	call	#__system___float_add
0de48     A7 FA 61 FC | 	wrlong	result1, fp
0de4c     40 00 90 FD | 	jmp	#LR__1090
0de50                 | LR__1089
0de50                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0de50     08 4E 05 F1 | 	add	fp, #8
0de54     A7 1E 02 FB | 	rdlong	local01, fp
0de58     08 4E 85 F1 | 	sub	fp, #8
0de5c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0de60     14 4E 05 51 |  if_ne	add	fp, #20
0de64     A7 22 02 5B |  if_ne	rdlong	local03, fp
0de68     14 4E 85 51 |  if_ne	sub	fp, #20
0de6c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0de70     A7 06 68 AC |  if_e	wrlong	#3, fp
0de74     08 4E 05 A1 |  if_e	add	fp, #8
0de78     A7 FE 69 AC |  if_e	wrlong	#255, fp
0de7c     08 4E 85 A1 |  if_e	sub	fp, #8
0de80     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0de84     08 4E 05 51 |  if_ne	add	fp, #8
0de88     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0de8c     08 4E 85 51 |  if_ne	sub	fp, #8
0de90                 | LR__1090
0de90     A7 12 02 F6 | 	mov	arg01, fp
0de94     3C BA BF FD | 	call	#_push
0de98     A7 F0 03 F6 | 	mov	ptra, fp
0de9c     B2 00 A0 FD | 	call	#popregs_
0dea0                 | _do_minus_ret
0dea0     2D 00 64 FD | 	ret
0dea4                 | 
0dea4                 | ' 
0dea4                 | ' sub do_and 
0dea4                 | _do_and
0dea4     03 4A 05 F6 | 	mov	COUNT_, #3
0dea8     A8 00 A0 FD | 	call	#pushregs_
0deac     18 F0 07 F1 | 	add	ptra, #24
0deb0     88 B9 BF FD | 	call	#_pop
0deb4     FD 12 02 F6 | 	mov	arg01, result1
0deb8     FE 1E 02 F6 | 	mov	local01, result2
0debc     FF 20 02 F6 | 	mov	local02, result3
0dec0     0C 4E 05 F1 | 	add	fp, #12
0dec4     A7 12 62 FC | 	wrlong	arg01, fp
0dec8     04 4E 05 F1 | 	add	fp, #4
0decc     A7 1E 62 FC | 	wrlong	local01, fp
0ded0     04 4E 05 F1 | 	add	fp, #4
0ded4     A7 20 62 FC | 	wrlong	local02, fp
0ded8     14 4E 85 F1 | 	sub	fp, #20
0dedc     5C B9 BF FD | 	call	#_pop
0dee0     FF 22 02 F6 | 	mov	local03, result3
0dee4     A7 FA 61 FC | 	wrlong	result1, fp
0dee8     04 4E 05 F1 | 	add	fp, #4
0deec     A7 FC 61 FC | 	wrlong	result2, fp
0def0     04 4E 05 F1 | 	add	fp, #4
0def4     A7 22 62 FC | 	wrlong	local03, fp
0def8                 | ' 
0def8                 | ' t2=pop()
0def8                 | ' t1=pop()
0def8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0def8     08 4E 85 F1 | 	sub	fp, #8
0defc     1C 22 0E F2 | 	cmp	local03, #28 wz
0df00     A7 22 02 AB |  if_e	rdlong	local03, fp
0df04     A7 22 62 AC |  if_e	wrlong	local03, fp
0df08     08 4E 05 A1 |  if_e	add	fp, #8
0df0c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0df10     08 4E 85 A1 |  if_e	sub	fp, #8
0df14                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0df14     14 4E 05 F1 | 	add	fp, #20
0df18     A7 22 02 FB | 	rdlong	local03, fp
0df1c     14 4E 85 F1 | 	sub	fp, #20
0df20     1C 22 0E F2 | 	cmp	local03, #28 wz
0df24     18 00 90 5D |  if_ne	jmp	#LR__1100
0df28     0C 4E 05 F1 | 	add	fp, #12
0df2c     A7 22 02 FB | 	rdlong	local03, fp
0df30     A7 22 62 FC | 	wrlong	local03, fp
0df34     08 4E 05 F1 | 	add	fp, #8
0df38     A7 3A 68 FC | 	wrlong	#29, fp
0df3c     14 4E 85 F1 | 	sub	fp, #20
0df40                 | LR__1100
0df40                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0df40     08 4E 05 F1 | 	add	fp, #8
0df44     A7 22 02 FB | 	rdlong	local03, fp
0df48     08 4E 85 F1 | 	sub	fp, #8
0df4c     1F 22 0E F2 | 	cmp	local03, #31 wz
0df50     14 4E 05 51 |  if_ne	add	fp, #20
0df54     A7 20 02 5B |  if_ne	rdlong	local02, fp
0df58     14 4E 85 51 |  if_ne	sub	fp, #20
0df5c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0df60     08 4E 05 51 |  if_ne	add	fp, #8
0df64     A7 22 02 5B |  if_ne	rdlong	local03, fp
0df68     08 4E 85 51 |  if_ne	sub	fp, #8
0df6c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0df70     14 4E 05 51 |  if_ne	add	fp, #20
0df74     14 4E 85 51 |  if_ne	sub	fp, #20
0df78     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0df7c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0df80     08 4E 05 A1 |  if_e	add	fp, #8
0df84     A7 FE 69 AC |  if_e	wrlong	#255, fp
0df88     08 4E 85 A1 |  if_e	sub	fp, #8
0df8c     18 00 90 AD |  if_e	jmp	#LR__1101
0df90     A7 22 02 FB | 	rdlong	local03, fp
0df94     0C 4E 05 F1 | 	add	fp, #12
0df98     A7 1E 02 FB | 	rdlong	local01, fp
0df9c     0C 4E 85 F1 | 	sub	fp, #12
0dfa0     0F 23 02 F5 | 	and	local03, local01
0dfa4     A7 22 62 FC | 	wrlong	local03, fp
0dfa8                 | LR__1101
0dfa8     A7 12 02 F6 | 	mov	arg01, fp
0dfac     24 B9 BF FD | 	call	#_push
0dfb0     A7 F0 03 F6 | 	mov	ptra, fp
0dfb4     B2 00 A0 FD | 	call	#popregs_
0dfb8                 | _do_and_ret
0dfb8     2D 00 64 FD | 	ret
0dfbc                 | 
0dfbc                 | ' 
0dfbc                 | ' sub do_or 
0dfbc                 | _do_or
0dfbc     03 4A 05 F6 | 	mov	COUNT_, #3
0dfc0     A8 00 A0 FD | 	call	#pushregs_
0dfc4     18 F0 07 F1 | 	add	ptra, #24
0dfc8     70 B8 BF FD | 	call	#_pop
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     FE 1E 02 F6 | 	mov	local01, result2
0dfd4     FF 20 02 F6 | 	mov	local02, result3
0dfd8     0C 4E 05 F1 | 	add	fp, #12
0dfdc     A7 12 62 FC | 	wrlong	arg01, fp
0dfe0     04 4E 05 F1 | 	add	fp, #4
0dfe4     A7 1E 62 FC | 	wrlong	local01, fp
0dfe8     04 4E 05 F1 | 	add	fp, #4
0dfec     A7 20 62 FC | 	wrlong	local02, fp
0dff0     14 4E 85 F1 | 	sub	fp, #20
0dff4     44 B8 BF FD | 	call	#_pop
0dff8     FF 22 02 F6 | 	mov	local03, result3
0dffc     A7 FA 61 FC | 	wrlong	result1, fp
0e000     04 4E 05 F1 | 	add	fp, #4
0e004     A7 FC 61 FC | 	wrlong	result2, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 22 62 FC | 	wrlong	local03, fp
0e010                 | ' 
0e010                 | ' t2=pop()
0e010                 | ' t1=pop()
0e010                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e010     08 4E 85 F1 | 	sub	fp, #8
0e014     1C 22 0E F2 | 	cmp	local03, #28 wz
0e018     A7 22 02 AB |  if_e	rdlong	local03, fp
0e01c     A7 22 62 AC |  if_e	wrlong	local03, fp
0e020     08 4E 05 A1 |  if_e	add	fp, #8
0e024     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e028     08 4E 85 A1 |  if_e	sub	fp, #8
0e02c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e02c     14 4E 05 F1 | 	add	fp, #20
0e030     A7 22 02 FB | 	rdlong	local03, fp
0e034     14 4E 85 F1 | 	sub	fp, #20
0e038     1C 22 0E F2 | 	cmp	local03, #28 wz
0e03c     18 00 90 5D |  if_ne	jmp	#LR__1110
0e040     0C 4E 05 F1 | 	add	fp, #12
0e044     A7 22 02 FB | 	rdlong	local03, fp
0e048     A7 22 62 FC | 	wrlong	local03, fp
0e04c     08 4E 05 F1 | 	add	fp, #8
0e050     A7 3A 68 FC | 	wrlong	#29, fp
0e054     14 4E 85 F1 | 	sub	fp, #20
0e058                 | LR__1110
0e058                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0e058     08 4E 05 F1 | 	add	fp, #8
0e05c     A7 22 02 FB | 	rdlong	local03, fp
0e060     08 4E 85 F1 | 	sub	fp, #8
0e064     1F 22 0E F2 | 	cmp	local03, #31 wz
0e068     14 4E 05 51 |  if_ne	add	fp, #20
0e06c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e070     14 4E 85 51 |  if_ne	sub	fp, #20
0e074     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e078     08 4E 05 51 |  if_ne	add	fp, #8
0e07c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e080     08 4E 85 51 |  if_ne	sub	fp, #8
0e084     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e088     14 4E 05 51 |  if_ne	add	fp, #20
0e08c     14 4E 85 51 |  if_ne	sub	fp, #20
0e090     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e094     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e098     08 4E 05 A1 |  if_e	add	fp, #8
0e09c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e0a0     08 4E 85 A1 |  if_e	sub	fp, #8
0e0a4     18 00 90 AD |  if_e	jmp	#LR__1111
0e0a8     A7 22 02 FB | 	rdlong	local03, fp
0e0ac     0C 4E 05 F1 | 	add	fp, #12
0e0b0     A7 1E 02 FB | 	rdlong	local01, fp
0e0b4     0C 4E 85 F1 | 	sub	fp, #12
0e0b8     0F 23 42 F5 | 	or	local03, local01
0e0bc     A7 22 62 FC | 	wrlong	local03, fp
0e0c0                 | LR__1111
0e0c0     A7 12 02 F6 | 	mov	arg01, fp
0e0c4     0C B8 BF FD | 	call	#_push
0e0c8     A7 F0 03 F6 | 	mov	ptra, fp
0e0cc     B2 00 A0 FD | 	call	#popregs_
0e0d0                 | _do_or_ret
0e0d0     2D 00 64 FD | 	ret
0e0d4                 | 
0e0d4                 | ' 
0e0d4                 | ' sub do_mul
0e0d4                 | _do_mul
0e0d4     05 4A 05 F6 | 	mov	COUNT_, #5
0e0d8     A8 00 A0 FD | 	call	#pushregs_
0e0dc     18 F0 07 F1 | 	add	ptra, #24
0e0e0     58 B7 BF FD | 	call	#_pop
0e0e4     FD 1E 02 F6 | 	mov	local01, result1
0e0e8     FE 20 02 F6 | 	mov	local02, result2
0e0ec     FF 22 02 F6 | 	mov	local03, result3
0e0f0     0C 4E 05 F1 | 	add	fp, #12
0e0f4     A7 1E 62 FC | 	wrlong	local01, fp
0e0f8     04 4E 05 F1 | 	add	fp, #4
0e0fc     A7 20 62 FC | 	wrlong	local02, fp
0e100     04 4E 05 F1 | 	add	fp, #4
0e104     A7 22 62 FC | 	wrlong	local03, fp
0e108     14 4E 85 F1 | 	sub	fp, #20
0e10c     2C B7 BF FD | 	call	#_pop
0e110     FF 22 02 F6 | 	mov	local03, result3
0e114     A7 FA 61 FC | 	wrlong	result1, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 FC 61 FC | 	wrlong	result2, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 22 62 FC | 	wrlong	local03, fp
0e128                 | ' 
0e128                 | ' t2=pop()
0e128                 | ' t1=pop()
0e128                 | ' 
0e128                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0e128     08 4E 85 F1 | 	sub	fp, #8
0e12c     1D 22 0E F2 | 	cmp	local03, #29 wz
0e130     14 4E 05 A1 |  if_e	add	fp, #20
0e134     A7 24 02 AB |  if_e	rdlong	local04, fp
0e138     14 4E 85 A1 |  if_e	sub	fp, #20
0e13c     12 23 02 A6 |  if_e	mov	local03, local04
0e140     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e144     20 00 90 5D |  if_ne	jmp	#LR__1120
0e148     A7 20 02 FB | 	rdlong	local02, fp
0e14c     0C 4E 05 F1 | 	add	fp, #12
0e150     A7 22 02 FB | 	rdlong	local03, fp
0e154     11 21 02 FD | 	qmul	local02, local03
0e158     0C 4E 85 F1 | 	sub	fp, #12
0e15c     18 1E 62 FD | 	getqx	local01
0e160     A7 1E 62 FC | 	wrlong	local01, fp
0e164     C4 02 90 FD | 	jmp	#LR__1129
0e168                 | LR__1120
0e168                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0e168     08 4E 05 F1 | 	add	fp, #8
0e16c     A7 1E 02 FB | 	rdlong	local01, fp
0e170     08 4E 85 F1 | 	sub	fp, #8
0e174     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e178     14 4E 05 A1 |  if_e	add	fp, #20
0e17c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e180     14 4E 85 A1 |  if_e	sub	fp, #20
0e184     12 23 02 A6 |  if_e	mov	local03, local04
0e188     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e18c     2C 00 90 5D |  if_ne	jmp	#LR__1121
0e190     A7 20 02 FB | 	rdlong	local02, fp
0e194     0C 4E 05 F1 | 	add	fp, #12
0e198     A7 22 02 FB | 	rdlong	local03, fp
0e19c     11 21 02 FD | 	qmul	local02, local03
0e1a0     0C 4E 85 F1 | 	sub	fp, #12
0e1a4     18 1E 62 FD | 	getqx	local01
0e1a8     A7 1E 62 FC | 	wrlong	local01, fp
0e1ac     08 4E 05 F1 | 	add	fp, #8
0e1b0     A7 38 68 FC | 	wrlong	#28, fp
0e1b4     08 4E 85 F1 | 	sub	fp, #8
0e1b8     70 02 90 FD | 	jmp	#LR__1129
0e1bc                 | LR__1121
0e1bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e1bc     08 4E 05 F1 | 	add	fp, #8
0e1c0     A7 1E 02 FB | 	rdlong	local01, fp
0e1c4     08 4E 85 F1 | 	sub	fp, #8
0e1c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1cc     14 4E 05 A1 |  if_e	add	fp, #20
0e1d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1d8     12 23 02 A6 |  if_e	mov	local03, local04
0e1dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e1e0     30 00 90 5D |  if_ne	jmp	#LR__1122
0e1e4     A7 12 02 FB | 	rdlong	arg01, fp
0e1e8     CC D0 B0 FD | 	call	#__system___float_fromuns
0e1ec     FD 12 02 F6 | 	mov	arg01, result1
0e1f0     0C 4E 05 F1 | 	add	fp, #12
0e1f4     A7 14 02 FB | 	rdlong	arg02, fp
0e1f8     0C 4E 85 F1 | 	sub	fp, #12
0e1fc     BC D4 B0 FD | 	call	#__system___float_mul
0e200     A7 FA 61 FC | 	wrlong	result1, fp
0e204     08 4E 05 F1 | 	add	fp, #8
0e208     A7 3C 68 FC | 	wrlong	#30, fp
0e20c     08 4E 85 F1 | 	sub	fp, #8
0e210     18 02 90 FD | 	jmp	#LR__1129
0e214                 | LR__1122
0e214                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0e214     08 4E 05 F1 | 	add	fp, #8
0e218     A7 1E 02 FB | 	rdlong	local01, fp
0e21c     08 4E 85 F1 | 	sub	fp, #8
0e220     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e224     14 4E 05 A1 |  if_e	add	fp, #20
0e228     A7 24 02 AB |  if_e	rdlong	local04, fp
0e22c     14 4E 85 A1 |  if_e	sub	fp, #20
0e230     12 23 02 A6 |  if_e	mov	local03, local04
0e234     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e238     20 00 90 5D |  if_ne	jmp	#LR__1123
0e23c     A7 20 02 FB | 	rdlong	local02, fp
0e240     0C 4E 05 F1 | 	add	fp, #12
0e244     A7 22 02 FB | 	rdlong	local03, fp
0e248     11 21 02 FD | 	qmul	local02, local03
0e24c     0C 4E 85 F1 | 	sub	fp, #12
0e250     18 1E 62 FD | 	getqx	local01
0e254     A7 1E 62 FC | 	wrlong	local01, fp
0e258     D0 01 90 FD | 	jmp	#LR__1129
0e25c                 | LR__1123
0e25c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0e25c     08 4E 05 F1 | 	add	fp, #8
0e260     A7 1E 02 FB | 	rdlong	local01, fp
0e264     08 4E 85 F1 | 	sub	fp, #8
0e268     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e26c     14 4E 05 A1 |  if_e	add	fp, #20
0e270     A7 24 02 AB |  if_e	rdlong	local04, fp
0e274     14 4E 85 A1 |  if_e	sub	fp, #20
0e278     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0e27c     20 00 90 5D |  if_ne	jmp	#LR__1124
0e280     A7 20 02 FB | 	rdlong	local02, fp
0e284     0C 4E 05 F1 | 	add	fp, #12
0e288     A7 22 02 FB | 	rdlong	local03, fp
0e28c     11 21 02 FD | 	qmul	local02, local03
0e290     0C 4E 85 F1 | 	sub	fp, #12
0e294     18 1E 62 FD | 	getqx	local01
0e298     A7 1E 62 FC | 	wrlong	local01, fp
0e29c     8C 01 90 FD | 	jmp	#LR__1129
0e2a0                 | LR__1124
0e2a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0e2a0     08 4E 05 F1 | 	add	fp, #8
0e2a4     A7 1E 02 FB | 	rdlong	local01, fp
0e2a8     08 4E 85 F1 | 	sub	fp, #8
0e2ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e2b0     14 4E 05 A1 |  if_e	add	fp, #20
0e2b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e2b8     14 4E 85 A1 |  if_e	sub	fp, #20
0e2bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e2c0     40 00 90 5D |  if_ne	jmp	#LR__1125
0e2c4     A7 12 02 FB | 	rdlong	arg01, fp
0e2c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e2cc     1F 26 C6 C9 |  if_b	decod	local05, #31
0e2d0     00 26 06 36 |  if_ae	mov	local05, #0
0e2d4     E0 CF B0 FD | 	call	#__system___float_fromuns
0e2d8     13 FB 61 F5 | 	xor	result1, local05
0e2dc     FD 12 02 F6 | 	mov	arg01, result1
0e2e0     0C 4E 05 F1 | 	add	fp, #12
0e2e4     A7 14 02 FB | 	rdlong	arg02, fp
0e2e8     0C 4E 85 F1 | 	sub	fp, #12
0e2ec     CC D3 B0 FD | 	call	#__system___float_mul
0e2f0     A7 FA 61 FC | 	wrlong	result1, fp
0e2f4     08 4E 05 F1 | 	add	fp, #8
0e2f8     A7 3C 68 FC | 	wrlong	#30, fp
0e2fc     08 4E 85 F1 | 	sub	fp, #8
0e300     28 01 90 FD | 	jmp	#LR__1129
0e304                 | LR__1125
0e304                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0e304     08 4E 05 F1 | 	add	fp, #8
0e308     A7 1E 02 FB | 	rdlong	local01, fp
0e30c     08 4E 85 F1 | 	sub	fp, #8
0e310     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e314     14 4E 05 A1 |  if_e	add	fp, #20
0e318     A7 22 02 AB |  if_e	rdlong	local03, fp
0e31c     14 4E 85 A1 |  if_e	sub	fp, #20
0e320     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e324     28 00 90 5D |  if_ne	jmp	#LR__1126
0e328     A7 1E 02 FB | 	rdlong	local01, fp
0e32c     0C 4E 05 F1 | 	add	fp, #12
0e330     A7 12 02 FB | 	rdlong	arg01, fp
0e334     0C 4E 85 F1 | 	sub	fp, #12
0e338     7C CF B0 FD | 	call	#__system___float_fromuns
0e33c     FD 14 02 F6 | 	mov	arg02, result1
0e340     0F 13 02 F6 | 	mov	arg01, local01
0e344     74 D3 B0 FD | 	call	#__system___float_mul
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     DC 00 90 FD | 	jmp	#LR__1129
0e350                 | LR__1126
0e350                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e350     08 4E 05 F1 | 	add	fp, #8
0e354     A7 1E 02 FB | 	rdlong	local01, fp
0e358     08 4E 85 F1 | 	sub	fp, #8
0e35c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e360     14 4E 05 A1 |  if_e	add	fp, #20
0e364     A7 22 02 AB |  if_e	rdlong	local03, fp
0e368     14 4E 85 A1 |  if_e	sub	fp, #20
0e36c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e370     38 00 90 5D |  if_ne	jmp	#LR__1127
0e374     A7 1E 02 FB | 	rdlong	local01, fp
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 12 02 FB | 	rdlong	arg01, fp
0e380     0C 4E 85 F1 | 	sub	fp, #12
0e384     09 13 52 F6 | 	abs	arg01, arg01 wc
0e388     1F 26 C6 C9 |  if_b	decod	local05, #31
0e38c     00 26 06 36 |  if_ae	mov	local05, #0
0e390     24 CF B0 FD | 	call	#__system___float_fromuns
0e394     13 FB 61 F5 | 	xor	result1, local05
0e398     FD 14 02 F6 | 	mov	arg02, result1
0e39c     0F 13 02 F6 | 	mov	arg01, local01
0e3a0     18 D3 B0 FD | 	call	#__system___float_mul
0e3a4     A7 FA 61 FC | 	wrlong	result1, fp
0e3a8     80 00 90 FD | 	jmp	#LR__1129
0e3ac                 | LR__1127
0e3ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e3ac     08 4E 05 F1 | 	add	fp, #8
0e3b0     A7 1E 02 FB | 	rdlong	local01, fp
0e3b4     08 4E 85 F1 | 	sub	fp, #8
0e3b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e3bc     14 4E 05 A1 |  if_e	add	fp, #20
0e3c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e3c4     14 4E 85 A1 |  if_e	sub	fp, #20
0e3c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e3cc     1C 00 90 5D |  if_ne	jmp	#LR__1128
0e3d0     A7 12 02 FB | 	rdlong	arg01, fp
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 14 02 FB | 	rdlong	arg02, fp
0e3dc     0C 4E 85 F1 | 	sub	fp, #12
0e3e0     D8 D2 B0 FD | 	call	#__system___float_mul
0e3e4     A7 FA 61 FC | 	wrlong	result1, fp
0e3e8     40 00 90 FD | 	jmp	#LR__1129
0e3ec                 | LR__1128
0e3ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e3ec     08 4E 05 F1 | 	add	fp, #8
0e3f0     A7 1E 02 FB | 	rdlong	local01, fp
0e3f4     08 4E 85 F1 | 	sub	fp, #8
0e3f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e3fc     14 4E 05 51 |  if_ne	add	fp, #20
0e400     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e404     14 4E 85 51 |  if_ne	sub	fp, #20
0e408     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e40c     A7 10 68 AC |  if_e	wrlong	#8, fp
0e410     08 4E 05 A1 |  if_e	add	fp, #8
0e414     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e418     08 4E 85 A1 |  if_e	sub	fp, #8
0e41c     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e420     08 4E 05 51 |  if_ne	add	fp, #8
0e424     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e428     08 4E 85 51 |  if_ne	sub	fp, #8
0e42c                 | LR__1129
0e42c     A7 12 02 F6 | 	mov	arg01, fp
0e430     A0 B4 BF FD | 	call	#_push
0e434     A7 F0 03 F6 | 	mov	ptra, fp
0e438     B2 00 A0 FD | 	call	#popregs_
0e43c                 | _do_mul_ret
0e43c     2D 00 64 FD | 	ret
0e440                 | 
0e440                 | ' 
0e440                 | ' sub do_div 
0e440                 | _do_div
0e440     01 4A 05 F6 | 	mov	COUNT_, #1
0e444     A8 00 A0 FD | 	call	#pushregs_
0e448     18 F0 07 F1 | 	add	ptra, #24
0e44c     EC B3 BF FD | 	call	#_pop
0e450     FD 66 02 F6 | 	mov	muldivb_, result1
0e454     FE 64 02 F6 | 	mov	muldiva_, result2
0e458     FF 1E 02 F6 | 	mov	local01, result3
0e45c     0C 4E 05 F1 | 	add	fp, #12
0e460     A7 66 62 FC | 	wrlong	muldivb_, fp
0e464     04 4E 05 F1 | 	add	fp, #4
0e468     A7 64 62 FC | 	wrlong	muldiva_, fp
0e46c     04 4E 05 F1 | 	add	fp, #4
0e470     A7 1E 62 FC | 	wrlong	local01, fp
0e474     14 4E 85 F1 | 	sub	fp, #20
0e478     C0 B3 BF FD | 	call	#_pop
0e47c     A7 FA 61 FC | 	wrlong	result1, fp
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 FC 61 FC | 	wrlong	result2, fp
0e488     04 4E 05 F1 | 	add	fp, #4
0e48c     A7 FE 61 FC | 	wrlong	result3, fp
0e490                 | ' 
0e490                 | ' t2=pop()
0e490                 | ' t1=pop()
0e490                 | ' 
0e490                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e490     08 4E 85 F1 | 	sub	fp, #8
0e494     1F FE 0D F2 | 	cmp	result3, #31 wz
0e498     14 4E 05 51 |  if_ne	add	fp, #20
0e49c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e4a0     14 4E 85 51 |  if_ne	sub	fp, #20
0e4a4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e4a8     A7 14 68 AC |  if_e	wrlong	#10, fp
0e4ac     08 4E 05 A1 |  if_e	add	fp, #8
0e4b0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e4b4     08 4E 85 A1 |  if_e	sub	fp, #8
0e4b8     90 01 90 AD |  if_e	jmp	#LR__1136
0e4bc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e4bc     08 4E 05 F1 | 	add	fp, #8
0e4c0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e4c4     08 4E 85 F1 | 	sub	fp, #8
0e4c8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e4cc     1C 00 90 5D |  if_ne	jmp	#LR__1130
0e4d0     08 4E 05 F1 | 	add	fp, #8
0e4d4     A7 38 68 FC | 	wrlong	#28, fp
0e4d8     08 4E 85 F1 | 	sub	fp, #8
0e4dc     A7 12 02 FB | 	rdlong	arg01, fp
0e4e0     00 14 06 F6 | 	mov	arg02, #0
0e4e4     9C D6 B0 FD | 	call	#__system___float_tointeger
0e4e8     A7 FA 61 FC | 	wrlong	result1, fp
0e4ec                 | LR__1130
0e4ec                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e4ec     14 4E 05 F1 | 	add	fp, #20
0e4f0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e4f4     14 4E 85 F1 | 	sub	fp, #20
0e4f8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e4fc     28 00 90 5D |  if_ne	jmp	#LR__1131
0e500     14 4E 05 F1 | 	add	fp, #20
0e504     A7 38 68 FC | 	wrlong	#28, fp
0e508     08 4E 85 F1 | 	sub	fp, #8
0e50c     A7 12 02 FB | 	rdlong	arg01, fp
0e510     0C 4E 85 F1 | 	sub	fp, #12
0e514     00 14 06 F6 | 	mov	arg02, #0
0e518     68 D6 B0 FD | 	call	#__system___float_tointeger
0e51c     0C 4E 05 F1 | 	add	fp, #12
0e520     A7 FA 61 FC | 	wrlong	result1, fp
0e524     0C 4E 85 F1 | 	sub	fp, #12
0e528                 | LR__1131
0e528                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e528     08 4E 05 F1 | 	add	fp, #8
0e52c     A7 66 02 FB | 	rdlong	muldivb_, fp
0e530     08 4E 85 F1 | 	sub	fp, #8
0e534     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e538     14 4E 05 A1 |  if_e	add	fp, #20
0e53c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e540     14 4E 85 A1 |  if_e	sub	fp, #20
0e544     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e548     20 00 90 5D |  if_ne	jmp	#LR__1132
0e54c     0C 4E 05 F1 | 	add	fp, #12
0e550     A7 1E 02 FB | 	rdlong	local01, fp
0e554     0C 4E 85 F1 | 	sub	fp, #12
0e558     A7 66 02 FB | 	rdlong	muldivb_, fp
0e55c     0F 67 12 FD | 	qdiv	muldivb_, local01
0e560     18 1E 62 FD | 	getqx	local01
0e564     A7 1E 62 FC | 	wrlong	local01, fp
0e568     E0 00 90 FD | 	jmp	#LR__1136
0e56c                 | LR__1132
0e56c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e56c     08 4E 05 F1 | 	add	fp, #8
0e570     A7 66 02 FB | 	rdlong	muldivb_, fp
0e574     08 4E 85 F1 | 	sub	fp, #8
0e578     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e57c     14 4E 05 A1 |  if_e	add	fp, #20
0e580     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e584     14 4E 85 A1 |  if_e	sub	fp, #20
0e588     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e58c     2C 00 90 5D |  if_ne	jmp	#LR__1133
0e590     0C 4E 05 F1 | 	add	fp, #12
0e594     A7 1E 02 FB | 	rdlong	local01, fp
0e598     0C 4E 85 F1 | 	sub	fp, #12
0e59c     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5a0     0F 67 12 FD | 	qdiv	muldivb_, local01
0e5a4     18 1E 62 FD | 	getqx	local01
0e5a8     A7 1E 62 FC | 	wrlong	local01, fp
0e5ac     08 4E 05 F1 | 	add	fp, #8
0e5b0     A7 38 68 FC | 	wrlong	#28, fp
0e5b4     08 4E 85 F1 | 	sub	fp, #8
0e5b8     90 00 90 FD | 	jmp	#LR__1136
0e5bc                 | LR__1133
0e5bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e5bc     08 4E 05 F1 | 	add	fp, #8
0e5c0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5c4     08 4E 85 F1 | 	sub	fp, #8
0e5c8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e5cc     14 4E 05 A1 |  if_e	add	fp, #20
0e5d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e5d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5d8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e5dc     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e5e0     A7 64 02 FB | 	rdlong	muldiva_, fp
0e5e4     0C 4E 05 F1 | 	add	fp, #12
0e5e8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e5ec     0C 4E 85 F1 | 	sub	fp, #12
0e5f0     BA 00 A0 FD | 	call	#divide_
0e5f4     A7 66 62 FC | 	wrlong	muldivb_, fp
0e5f8     50 00 90 FD | 	jmp	#LR__1136
0e5fc                 | LR__1134
0e5fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e5fc     08 4E 05 F1 | 	add	fp, #8
0e600     A7 66 02 FB | 	rdlong	muldivb_, fp
0e604     08 4E 85 F1 | 	sub	fp, #8
0e608     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e60c     14 4E 05 A1 |  if_e	add	fp, #20
0e610     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e614     14 4E 85 A1 |  if_e	sub	fp, #20
0e618     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e61c     1C 00 90 5D |  if_ne	jmp	#LR__1135
0e620     A7 64 02 FB | 	rdlong	muldiva_, fp
0e624     0C 4E 05 F1 | 	add	fp, #12
0e628     A7 66 02 FB | 	rdlong	muldivb_, fp
0e62c     0C 4E 85 F1 | 	sub	fp, #12
0e630     BA 00 A0 FD | 	call	#divide_
0e634     A7 66 62 FC | 	wrlong	muldivb_, fp
0e638     10 00 90 FD | 	jmp	#LR__1136
0e63c                 | LR__1135
0e63c     A7 16 68 FC | 	wrlong	#11, fp
0e640     08 4E 05 F1 | 	add	fp, #8
0e644     A7 FE 69 FC | 	wrlong	#255, fp
0e648     08 4E 85 F1 | 	sub	fp, #8
0e64c                 | LR__1136
0e64c     A7 12 02 F6 | 	mov	arg01, fp
0e650     80 B2 BF FD | 	call	#_push
0e654     A7 F0 03 F6 | 	mov	ptra, fp
0e658     B2 00 A0 FD | 	call	#popregs_
0e65c                 | _do_div_ret
0e65c     2D 00 64 FD | 	ret
0e660                 | 
0e660                 | ' 
0e660                 | ' sub do_fdiv 
0e660                 | _do_fdiv
0e660     02 4A 05 F6 | 	mov	COUNT_, #2
0e664     A8 00 A0 FD | 	call	#pushregs_
0e668     18 F0 07 F1 | 	add	ptra, #24
0e66c     CC B1 BF FD | 	call	#_pop
0e670     FD 14 02 F6 | 	mov	arg02, result1
0e674     FE 12 02 F6 | 	mov	arg01, result2
0e678     FF 1E 02 F6 | 	mov	local01, result3
0e67c     0C 4E 05 F1 | 	add	fp, #12
0e680     A7 14 62 FC | 	wrlong	arg02, fp
0e684     04 4E 05 F1 | 	add	fp, #4
0e688     A7 12 62 FC | 	wrlong	arg01, fp
0e68c     04 4E 05 F1 | 	add	fp, #4
0e690     A7 1E 62 FC | 	wrlong	local01, fp
0e694     14 4E 85 F1 | 	sub	fp, #20
0e698     A0 B1 BF FD | 	call	#_pop
0e69c     A7 FA 61 FC | 	wrlong	result1, fp
0e6a0     04 4E 05 F1 | 	add	fp, #4
0e6a4     A7 FC 61 FC | 	wrlong	result2, fp
0e6a8     04 4E 05 F1 | 	add	fp, #4
0e6ac     A7 FE 61 FC | 	wrlong	result3, fp
0e6b0                 | ' 
0e6b0                 | ' t2=pop()
0e6b0                 | ' t1=pop()
0e6b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e6b0     08 4E 85 F1 | 	sub	fp, #8
0e6b4     1F FE 0D F2 | 	cmp	result3, #31 wz
0e6b8     14 4E 05 51 |  if_ne	add	fp, #20
0e6bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e6c0     14 4E 85 51 |  if_ne	sub	fp, #20
0e6c4     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e6c8     A7 14 68 AC |  if_e	wrlong	#10, fp
0e6cc     08 4E 05 A1 |  if_e	add	fp, #8
0e6d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e6d4     08 4E 85 A1 |  if_e	sub	fp, #8
0e6d8     38 01 90 AD |  if_e	jmp	#LR__1145
0e6dc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e6dc     08 4E 05 F1 | 	add	fp, #8
0e6e0     A7 14 02 FB | 	rdlong	arg02, fp
0e6e4     08 4E 85 F1 | 	sub	fp, #8
0e6e8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e6ec     28 00 90 5D |  if_ne	jmp	#LR__1140
0e6f0     08 4E 05 F1 | 	add	fp, #8
0e6f4     A7 3C 68 FC | 	wrlong	#30, fp
0e6f8     08 4E 85 F1 | 	sub	fp, #8
0e6fc     A7 12 02 FB | 	rdlong	arg01, fp
0e700     09 13 52 F6 | 	abs	arg01, arg01 wc
0e704     1F 20 C6 C9 |  if_b	decod	local02, #31
0e708     00 20 06 36 |  if_ae	mov	local02, #0
0e70c     A8 CB B0 FD | 	call	#__system___float_fromuns
0e710     10 FB 61 F5 | 	xor	result1, local02
0e714     A7 FA 61 FC | 	wrlong	result1, fp
0e718                 | LR__1140
0e718                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e718     08 4E 05 F1 | 	add	fp, #8
0e71c     A7 14 02 FB | 	rdlong	arg02, fp
0e720     08 4E 85 F1 | 	sub	fp, #8
0e724     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e728     18 00 90 5D |  if_ne	jmp	#LR__1141
0e72c     08 4E 05 F1 | 	add	fp, #8
0e730     A7 3C 68 FC | 	wrlong	#30, fp
0e734     08 4E 85 F1 | 	sub	fp, #8
0e738     A7 12 02 FB | 	rdlong	arg01, fp
0e73c     78 CB B0 FD | 	call	#__system___float_fromuns
0e740     A7 FA 61 FC | 	wrlong	result1, fp
0e744                 | LR__1141
0e744                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e744     14 4E 05 F1 | 	add	fp, #20
0e748     A7 14 02 FB | 	rdlong	arg02, fp
0e74c     14 4E 85 F1 | 	sub	fp, #20
0e750     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e754     34 00 90 5D |  if_ne	jmp	#LR__1142
0e758     14 4E 05 F1 | 	add	fp, #20
0e75c     A7 3C 68 FC | 	wrlong	#30, fp
0e760     08 4E 85 F1 | 	sub	fp, #8
0e764     A7 12 02 FB | 	rdlong	arg01, fp
0e768     0C 4E 85 F1 | 	sub	fp, #12
0e76c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e770     1F 20 C6 C9 |  if_b	decod	local02, #31
0e774     00 20 06 36 |  if_ae	mov	local02, #0
0e778     3C CB B0 FD | 	call	#__system___float_fromuns
0e77c     10 FB 61 F5 | 	xor	result1, local02
0e780     0C 4E 05 F1 | 	add	fp, #12
0e784     A7 FA 61 FC | 	wrlong	result1, fp
0e788     0C 4E 85 F1 | 	sub	fp, #12
0e78c                 | LR__1142
0e78c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e78c     14 4E 05 F1 | 	add	fp, #20
0e790     A7 14 02 FB | 	rdlong	arg02, fp
0e794     14 4E 85 F1 | 	sub	fp, #20
0e798     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e79c     24 00 90 5D |  if_ne	jmp	#LR__1143
0e7a0     14 4E 05 F1 | 	add	fp, #20
0e7a4     A7 3C 68 FC | 	wrlong	#30, fp
0e7a8     08 4E 85 F1 | 	sub	fp, #8
0e7ac     A7 12 02 FB | 	rdlong	arg01, fp
0e7b0     0C 4E 85 F1 | 	sub	fp, #12
0e7b4     00 CB B0 FD | 	call	#__system___float_fromuns
0e7b8     0C 4E 05 F1 | 	add	fp, #12
0e7bc     A7 FA 61 FC | 	wrlong	result1, fp
0e7c0     0C 4E 85 F1 | 	sub	fp, #12
0e7c4                 | LR__1143
0e7c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e7c4     08 4E 05 F1 | 	add	fp, #8
0e7c8     A7 14 02 FB | 	rdlong	arg02, fp
0e7cc     08 4E 85 F1 | 	sub	fp, #8
0e7d0     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e7d4     14 4E 05 A1 |  if_e	add	fp, #20
0e7d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e7dc     14 4E 85 A1 |  if_e	sub	fp, #20
0e7e0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e7e4     1C 00 90 5D |  if_ne	jmp	#LR__1144
0e7e8     A7 12 02 FB | 	rdlong	arg01, fp
0e7ec     0C 4E 05 F1 | 	add	fp, #12
0e7f0     A7 14 02 FB | 	rdlong	arg02, fp
0e7f4     0C 4E 85 F1 | 	sub	fp, #12
0e7f8     C4 D0 B0 FD | 	call	#__system___float_div
0e7fc     A7 FA 61 FC | 	wrlong	result1, fp
0e800     10 00 90 FD | 	jmp	#LR__1145
0e804                 | LR__1144
0e804     A7 16 68 FC | 	wrlong	#11, fp
0e808     08 4E 05 F1 | 	add	fp, #8
0e80c     A7 FE 69 FC | 	wrlong	#255, fp
0e810     08 4E 85 F1 | 	sub	fp, #8
0e814                 | LR__1145
0e814     A7 12 02 F6 | 	mov	arg01, fp
0e818     B8 B0 BF FD | 	call	#_push
0e81c     A7 F0 03 F6 | 	mov	ptra, fp
0e820     B2 00 A0 FD | 	call	#popregs_
0e824                 | _do_fdiv_ret
0e824     2D 00 64 FD | 	ret
0e828                 | 
0e828                 | ' 
0e828                 | ' 
0e828                 | ' sub do_mod 
0e828                 | _do_mod
0e828     01 4A 05 F6 | 	mov	COUNT_, #1
0e82c     A8 00 A0 FD | 	call	#pushregs_
0e830     18 F0 07 F1 | 	add	ptra, #24
0e834     04 B0 BF FD | 	call	#_pop
0e838     FD 66 02 F6 | 	mov	muldivb_, result1
0e83c     FE 64 02 F6 | 	mov	muldiva_, result2
0e840     FF 1E 02 F6 | 	mov	local01, result3
0e844     0C 4E 05 F1 | 	add	fp, #12
0e848     A7 66 62 FC | 	wrlong	muldivb_, fp
0e84c     04 4E 05 F1 | 	add	fp, #4
0e850     A7 64 62 FC | 	wrlong	muldiva_, fp
0e854     04 4E 05 F1 | 	add	fp, #4
0e858     A7 1E 62 FC | 	wrlong	local01, fp
0e85c     14 4E 85 F1 | 	sub	fp, #20
0e860     D8 AF BF FD | 	call	#_pop
0e864     A7 FA 61 FC | 	wrlong	result1, fp
0e868     04 4E 05 F1 | 	add	fp, #4
0e86c     A7 FC 61 FC | 	wrlong	result2, fp
0e870     04 4E 05 F1 | 	add	fp, #4
0e874     A7 FE 61 FC | 	wrlong	result3, fp
0e878                 | ' 
0e878                 | ' t2=pop()
0e878                 | ' t1=pop()
0e878                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0e878     08 4E 85 F1 | 	sub	fp, #8
0e87c     1F FE 0D F2 | 	cmp	result3, #31 wz
0e880     14 4E 05 51 |  if_ne	add	fp, #20
0e884     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e888     14 4E 85 51 |  if_ne	sub	fp, #20
0e88c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e890     A7 14 68 AC |  if_e	wrlong	#10, fp
0e894     08 4E 05 A1 |  if_e	add	fp, #8
0e898     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e89c     08 4E 85 A1 |  if_e	sub	fp, #8
0e8a0     90 01 90 AD |  if_e	jmp	#LR__1156
0e8a4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e8a4     08 4E 05 F1 | 	add	fp, #8
0e8a8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e8ac     08 4E 85 F1 | 	sub	fp, #8
0e8b0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e8b4     1C 00 90 5D |  if_ne	jmp	#LR__1150
0e8b8     08 4E 05 F1 | 	add	fp, #8
0e8bc     A7 38 68 FC | 	wrlong	#28, fp
0e8c0     08 4E 85 F1 | 	sub	fp, #8
0e8c4     A7 12 02 FB | 	rdlong	arg01, fp
0e8c8     00 14 06 F6 | 	mov	arg02, #0
0e8cc     B4 D2 B0 FD | 	call	#__system___float_tointeger
0e8d0     A7 FA 61 FC | 	wrlong	result1, fp
0e8d4                 | LR__1150
0e8d4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e8d4     14 4E 05 F1 | 	add	fp, #20
0e8d8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e8dc     14 4E 85 F1 | 	sub	fp, #20
0e8e0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0e8e4     28 00 90 5D |  if_ne	jmp	#LR__1151
0e8e8     14 4E 05 F1 | 	add	fp, #20
0e8ec     A7 38 68 FC | 	wrlong	#28, fp
0e8f0     08 4E 85 F1 | 	sub	fp, #8
0e8f4     A7 12 02 FB | 	rdlong	arg01, fp
0e8f8     0C 4E 85 F1 | 	sub	fp, #12
0e8fc     00 14 06 F6 | 	mov	arg02, #0
0e900     80 D2 B0 FD | 	call	#__system___float_tointeger
0e904     0C 4E 05 F1 | 	add	fp, #12
0e908     A7 FA 61 FC | 	wrlong	result1, fp
0e90c     0C 4E 85 F1 | 	sub	fp, #12
0e910                 | LR__1151
0e910                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0e910     08 4E 05 F1 | 	add	fp, #8
0e914     A7 66 02 FB | 	rdlong	muldivb_, fp
0e918     08 4E 85 F1 | 	sub	fp, #8
0e91c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e920     14 4E 05 A1 |  if_e	add	fp, #20
0e924     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e928     14 4E 85 A1 |  if_e	sub	fp, #20
0e92c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e930     20 00 90 5D |  if_ne	jmp	#LR__1152
0e934     0C 4E 05 F1 | 	add	fp, #12
0e938     A7 1E 02 FB | 	rdlong	local01, fp
0e93c     0C 4E 85 F1 | 	sub	fp, #12
0e940     A7 66 02 FB | 	rdlong	muldivb_, fp
0e944     0F 67 12 FD | 	qdiv	muldivb_, local01
0e948     19 1E 62 FD | 	getqy	local01
0e94c     A7 1E 62 FC | 	wrlong	local01, fp
0e950     E0 00 90 FD | 	jmp	#LR__1156
0e954                 | LR__1152
0e954                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0e954     08 4E 05 F1 | 	add	fp, #8
0e958     A7 66 02 FB | 	rdlong	muldivb_, fp
0e95c     08 4E 85 F1 | 	sub	fp, #8
0e960     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0e964     14 4E 05 A1 |  if_e	add	fp, #20
0e968     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e96c     14 4E 85 A1 |  if_e	sub	fp, #20
0e970     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e974     2C 00 90 5D |  if_ne	jmp	#LR__1153
0e978     0C 4E 05 F1 | 	add	fp, #12
0e97c     A7 1E 02 FB | 	rdlong	local01, fp
0e980     0C 4E 85 F1 | 	sub	fp, #12
0e984     A7 66 02 FB | 	rdlong	muldivb_, fp
0e988     0F 67 12 FD | 	qdiv	muldivb_, local01
0e98c     19 1E 62 FD | 	getqy	local01
0e990     A7 1E 62 FC | 	wrlong	local01, fp
0e994     08 4E 05 F1 | 	add	fp, #8
0e998     A7 38 68 FC | 	wrlong	#28, fp
0e99c     08 4E 85 F1 | 	sub	fp, #8
0e9a0     90 00 90 FD | 	jmp	#LR__1156
0e9a4                 | LR__1153
0e9a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0e9a4     08 4E 05 F1 | 	add	fp, #8
0e9a8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9ac     08 4E 85 F1 | 	sub	fp, #8
0e9b0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e9b4     14 4E 05 A1 |  if_e	add	fp, #20
0e9b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e9bc     14 4E 85 A1 |  if_e	sub	fp, #20
0e9c0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e9c4     1C 00 90 5D |  if_ne	jmp	#LR__1154
0e9c8     A7 64 02 FB | 	rdlong	muldiva_, fp
0e9cc     0C 4E 05 F1 | 	add	fp, #12
0e9d0     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9d4     0C 4E 85 F1 | 	sub	fp, #12
0e9d8     BA 00 A0 FD | 	call	#divide_
0e9dc     A7 64 62 FC | 	wrlong	muldiva_, fp
0e9e0     50 00 90 FD | 	jmp	#LR__1156
0e9e4                 | LR__1154
0e9e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0e9e4     08 4E 05 F1 | 	add	fp, #8
0e9e8     A7 66 02 FB | 	rdlong	muldivb_, fp
0e9ec     08 4E 85 F1 | 	sub	fp, #8
0e9f0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0e9f4     14 4E 05 A1 |  if_e	add	fp, #20
0e9f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e9fc     14 4E 85 A1 |  if_e	sub	fp, #20
0ea00     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ea04     1C 00 90 5D |  if_ne	jmp	#LR__1155
0ea08     A7 64 02 FB | 	rdlong	muldiva_, fp
0ea0c     0C 4E 05 F1 | 	add	fp, #12
0ea10     A7 66 02 FB | 	rdlong	muldivb_, fp
0ea14     0C 4E 85 F1 | 	sub	fp, #12
0ea18     BA 00 A0 FD | 	call	#divide_
0ea1c     A7 64 62 FC | 	wrlong	muldiva_, fp
0ea20     10 00 90 FD | 	jmp	#LR__1156
0ea24                 | LR__1155
0ea24     A7 16 68 FC | 	wrlong	#11, fp
0ea28     08 4E 05 F1 | 	add	fp, #8
0ea2c     A7 FE 69 FC | 	wrlong	#255, fp
0ea30     08 4E 85 F1 | 	sub	fp, #8
0ea34                 | LR__1156
0ea34     A7 12 02 F6 | 	mov	arg01, fp
0ea38     98 AE BF FD | 	call	#_push
0ea3c     A7 F0 03 F6 | 	mov	ptra, fp
0ea40     B2 00 A0 FD | 	call	#popregs_
0ea44                 | _do_mod_ret
0ea44     2D 00 64 FD | 	ret
0ea48                 | 
0ea48                 | ' 
0ea48                 | ' sub do_shl 
0ea48                 | _do_shl
0ea48     03 4A 05 F6 | 	mov	COUNT_, #3
0ea4c     A8 00 A0 FD | 	call	#pushregs_
0ea50     18 F0 07 F1 | 	add	ptra, #24
0ea54     E4 AD BF FD | 	call	#_pop
0ea58     FD 12 02 F6 | 	mov	arg01, result1
0ea5c     FE 1E 02 F6 | 	mov	local01, result2
0ea60     FF 20 02 F6 | 	mov	local02, result3
0ea64     0C 4E 05 F1 | 	add	fp, #12
0ea68     A7 12 62 FC | 	wrlong	arg01, fp
0ea6c     04 4E 05 F1 | 	add	fp, #4
0ea70     A7 1E 62 FC | 	wrlong	local01, fp
0ea74     04 4E 05 F1 | 	add	fp, #4
0ea78     A7 20 62 FC | 	wrlong	local02, fp
0ea7c     14 4E 85 F1 | 	sub	fp, #20
0ea80     B8 AD BF FD | 	call	#_pop
0ea84     FF 22 02 F6 | 	mov	local03, result3
0ea88     A7 FA 61 FC | 	wrlong	result1, fp
0ea8c     04 4E 05 F1 | 	add	fp, #4
0ea90     A7 FC 61 FC | 	wrlong	result2, fp
0ea94     04 4E 05 F1 | 	add	fp, #4
0ea98     A7 22 62 FC | 	wrlong	local03, fp
0ea9c                 | ' 
0ea9c                 | ' t2=pop()
0ea9c                 | ' t1=pop()
0ea9c                 | ' 
0ea9c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ea9c     08 4E 85 F1 | 	sub	fp, #8
0eaa0     1C 22 0E F2 | 	cmp	local03, #28 wz
0eaa4     A7 22 02 AB |  if_e	rdlong	local03, fp
0eaa8     A7 22 62 AC |  if_e	wrlong	local03, fp
0eaac     08 4E 05 A1 |  if_e	add	fp, #8
0eab0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0eab4     08 4E 85 A1 |  if_e	sub	fp, #8
0eab8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0eab8     14 4E 05 F1 | 	add	fp, #20
0eabc     A7 22 02 FB | 	rdlong	local03, fp
0eac0     14 4E 85 F1 | 	sub	fp, #20
0eac4     1C 22 0E F2 | 	cmp	local03, #28 wz
0eac8     18 00 90 5D |  if_ne	jmp	#LR__1160
0eacc     0C 4E 05 F1 | 	add	fp, #12
0ead0     A7 22 02 FB | 	rdlong	local03, fp
0ead4     A7 22 62 FC | 	wrlong	local03, fp
0ead8     08 4E 05 F1 | 	add	fp, #8
0eadc     A7 3A 68 FC | 	wrlong	#29, fp
0eae0     14 4E 85 F1 | 	sub	fp, #20
0eae4                 | LR__1160
0eae4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0eae4     08 4E 05 F1 | 	add	fp, #8
0eae8     A7 22 02 FB | 	rdlong	local03, fp
0eaec     08 4E 85 F1 | 	sub	fp, #8
0eaf0     1F 22 0E F2 | 	cmp	local03, #31 wz
0eaf4     14 4E 05 51 |  if_ne	add	fp, #20
0eaf8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0eafc     14 4E 85 51 |  if_ne	sub	fp, #20
0eb00     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0eb04     08 4E 05 51 |  if_ne	add	fp, #8
0eb08     A7 22 02 5B |  if_ne	rdlong	local03, fp
0eb0c     08 4E 85 51 |  if_ne	sub	fp, #8
0eb10     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0eb14     14 4E 05 51 |  if_ne	add	fp, #20
0eb18     14 4E 85 51 |  if_ne	sub	fp, #20
0eb1c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0eb20     A7 0C 68 AC |  if_e	wrlong	#6, fp
0eb24     08 4E 05 A1 |  if_e	add	fp, #8
0eb28     A7 FE 69 AC |  if_e	wrlong	#255, fp
0eb2c     08 4E 85 A1 |  if_e	sub	fp, #8
0eb30     18 00 90 AD |  if_e	jmp	#LR__1161
0eb34     A7 22 02 FB | 	rdlong	local03, fp
0eb38     0C 4E 05 F1 | 	add	fp, #12
0eb3c     A7 1E 02 FB | 	rdlong	local01, fp
0eb40     0C 4E 85 F1 | 	sub	fp, #12
0eb44     0F 23 62 F0 | 	shl	local03, local01
0eb48     A7 22 62 FC | 	wrlong	local03, fp
0eb4c                 | LR__1161
0eb4c     A7 12 02 F6 | 	mov	arg01, fp
0eb50     80 AD BF FD | 	call	#_push
0eb54     A7 F0 03 F6 | 	mov	ptra, fp
0eb58     B2 00 A0 FD | 	call	#popregs_
0eb5c                 | _do_shl_ret
0eb5c     2D 00 64 FD | 	ret
0eb60                 | 
0eb60                 | ' 
0eb60                 | ' sub do_shr 
0eb60                 | _do_shr
0eb60     03 4A 05 F6 | 	mov	COUNT_, #3
0eb64     A8 00 A0 FD | 	call	#pushregs_
0eb68     18 F0 07 F1 | 	add	ptra, #24
0eb6c     CC AC BF FD | 	call	#_pop
0eb70     FD 12 02 F6 | 	mov	arg01, result1
0eb74     FE 1E 02 F6 | 	mov	local01, result2
0eb78     FF 20 02 F6 | 	mov	local02, result3
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 12 62 FC | 	wrlong	arg01, fp
0eb84     04 4E 05 F1 | 	add	fp, #4
0eb88     A7 1E 62 FC | 	wrlong	local01, fp
0eb8c     04 4E 05 F1 | 	add	fp, #4
0eb90     A7 20 62 FC | 	wrlong	local02, fp
0eb94     14 4E 85 F1 | 	sub	fp, #20
0eb98     A0 AC BF FD | 	call	#_pop
0eb9c     FF 22 02 F6 | 	mov	local03, result3
0eba0     A7 FA 61 FC | 	wrlong	result1, fp
0eba4     04 4E 05 F1 | 	add	fp, #4
0eba8     A7 FC 61 FC | 	wrlong	result2, fp
0ebac     04 4E 05 F1 | 	add	fp, #4
0ebb0     A7 22 62 FC | 	wrlong	local03, fp
0ebb4                 | ' t2=pop()
0ebb4                 | ' t1=pop()
0ebb4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ebb4     08 4E 85 F1 | 	sub	fp, #8
0ebb8     1C 22 0E F2 | 	cmp	local03, #28 wz
0ebbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0ebc0     A7 22 62 AC |  if_e	wrlong	local03, fp
0ebc4     08 4E 05 A1 |  if_e	add	fp, #8
0ebc8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ebcc     08 4E 85 A1 |  if_e	sub	fp, #8
0ebd0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ebd0     14 4E 05 F1 | 	add	fp, #20
0ebd4     A7 22 02 FB | 	rdlong	local03, fp
0ebd8     14 4E 85 F1 | 	sub	fp, #20
0ebdc     1C 22 0E F2 | 	cmp	local03, #28 wz
0ebe0     18 00 90 5D |  if_ne	jmp	#LR__1170
0ebe4     0C 4E 05 F1 | 	add	fp, #12
0ebe8     A7 22 02 FB | 	rdlong	local03, fp
0ebec     A7 22 62 FC | 	wrlong	local03, fp
0ebf0     08 4E 05 F1 | 	add	fp, #8
0ebf4     A7 3A 68 FC | 	wrlong	#29, fp
0ebf8     14 4E 85 F1 | 	sub	fp, #20
0ebfc                 | LR__1170
0ebfc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0ebfc     08 4E 05 F1 | 	add	fp, #8
0ec00     A7 22 02 FB | 	rdlong	local03, fp
0ec04     08 4E 85 F1 | 	sub	fp, #8
0ec08     1F 22 0E F2 | 	cmp	local03, #31 wz
0ec0c     14 4E 05 51 |  if_ne	add	fp, #20
0ec10     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ec14     14 4E 85 51 |  if_ne	sub	fp, #20
0ec18     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ec1c     08 4E 05 51 |  if_ne	add	fp, #8
0ec20     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ec24     08 4E 85 51 |  if_ne	sub	fp, #8
0ec28     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0ec2c     14 4E 05 51 |  if_ne	add	fp, #20
0ec30     14 4E 85 51 |  if_ne	sub	fp, #20
0ec34     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0ec38     A7 0C 68 AC |  if_e	wrlong	#6, fp
0ec3c     08 4E 05 A1 |  if_e	add	fp, #8
0ec40     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ec44     08 4E 85 A1 |  if_e	sub	fp, #8
0ec48     18 00 90 AD |  if_e	jmp	#LR__1171
0ec4c     A7 22 02 FB | 	rdlong	local03, fp
0ec50     0C 4E 05 F1 | 	add	fp, #12
0ec54     A7 1E 02 FB | 	rdlong	local01, fp
0ec58     0C 4E 85 F1 | 	sub	fp, #12
0ec5c     0F 23 42 F0 | 	shr	local03, local01
0ec60     A7 22 62 FC | 	wrlong	local03, fp
0ec64                 | LR__1171
0ec64     A7 12 02 F6 | 	mov	arg01, fp
0ec68     68 AC BF FD | 	call	#_push
0ec6c     A7 F0 03 F6 | 	mov	ptra, fp
0ec70     B2 00 A0 FD | 	call	#popregs_
0ec74                 | _do_shr_ret
0ec74     2D 00 64 FD | 	ret
0ec78                 | 
0ec78                 | ' 
0ec78                 | ' sub do_power 
0ec78                 | _do_power
0ec78     02 4A 05 F6 | 	mov	COUNT_, #2
0ec7c     A8 00 A0 FD | 	call	#pushregs_
0ec80     18 F0 07 F1 | 	add	ptra, #24
0ec84     B4 AB BF FD | 	call	#_pop
0ec88     FD 14 02 F6 | 	mov	arg02, result1
0ec8c     FE 12 02 F6 | 	mov	arg01, result2
0ec90     FF 1E 02 F6 | 	mov	local01, result3
0ec94     0C 4E 05 F1 | 	add	fp, #12
0ec98     A7 14 62 FC | 	wrlong	arg02, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 12 62 FC | 	wrlong	arg01, fp
0eca4     04 4E 05 F1 | 	add	fp, #4
0eca8     A7 1E 62 FC | 	wrlong	local01, fp
0ecac     14 4E 85 F1 | 	sub	fp, #20
0ecb0     88 AB BF FD | 	call	#_pop
0ecb4     A7 FA 61 FC | 	wrlong	result1, fp
0ecb8     04 4E 05 F1 | 	add	fp, #4
0ecbc     A7 FC 61 FC | 	wrlong	result2, fp
0ecc0     04 4E 05 F1 | 	add	fp, #4
0ecc4     A7 FE 61 FC | 	wrlong	result3, fp
0ecc8                 | ' t2=pop()
0ecc8                 | ' t1=pop()
0ecc8                 | ' 
0ecc8                 | ' 
0ecc8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ecc8     08 4E 85 F1 | 	sub	fp, #8
0eccc     1F FE 0D F2 | 	cmp	result3, #31 wz
0ecd0     14 4E 05 51 |  if_ne	add	fp, #20
0ecd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ecd8     14 4E 85 51 |  if_ne	sub	fp, #20
0ecdc     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ece0     A7 18 68 AC |  if_e	wrlong	#12, fp
0ece4     08 4E 05 A1 |  if_e	add	fp, #8
0ece8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ecec     08 4E 85 A1 |  if_e	sub	fp, #8
0ecf0     38 01 90 AD |  if_e	jmp	#LR__1185
0ecf4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ecf4     08 4E 05 F1 | 	add	fp, #8
0ecf8     A7 14 02 FB | 	rdlong	arg02, fp
0ecfc     08 4E 85 F1 | 	sub	fp, #8
0ed00     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ed04     28 00 90 5D |  if_ne	jmp	#LR__1180
0ed08     08 4E 05 F1 | 	add	fp, #8
0ed0c     A7 3C 68 FC | 	wrlong	#30, fp
0ed10     08 4E 85 F1 | 	sub	fp, #8
0ed14     A7 12 02 FB | 	rdlong	arg01, fp
0ed18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed1c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed20     00 20 06 36 |  if_ae	mov	local02, #0
0ed24     90 C5 B0 FD | 	call	#__system___float_fromuns
0ed28     10 FB 61 F5 | 	xor	result1, local02
0ed2c     A7 FA 61 FC | 	wrlong	result1, fp
0ed30                 | LR__1180
0ed30                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0ed30     08 4E 05 F1 | 	add	fp, #8
0ed34     A7 14 02 FB | 	rdlong	arg02, fp
0ed38     08 4E 85 F1 | 	sub	fp, #8
0ed3c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ed40     18 00 90 5D |  if_ne	jmp	#LR__1181
0ed44     08 4E 05 F1 | 	add	fp, #8
0ed48     A7 3C 68 FC | 	wrlong	#30, fp
0ed4c     08 4E 85 F1 | 	sub	fp, #8
0ed50     A7 12 02 FB | 	rdlong	arg01, fp
0ed54     60 C5 B0 FD | 	call	#__system___float_fromuns
0ed58     A7 FA 61 FC | 	wrlong	result1, fp
0ed5c                 | LR__1181
0ed5c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ed5c     14 4E 05 F1 | 	add	fp, #20
0ed60     A7 14 02 FB | 	rdlong	arg02, fp
0ed64     14 4E 85 F1 | 	sub	fp, #20
0ed68     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ed6c     34 00 90 5D |  if_ne	jmp	#LR__1182
0ed70     14 4E 05 F1 | 	add	fp, #20
0ed74     A7 3C 68 FC | 	wrlong	#30, fp
0ed78     08 4E 85 F1 | 	sub	fp, #8
0ed7c     A7 12 02 FB | 	rdlong	arg01, fp
0ed80     0C 4E 85 F1 | 	sub	fp, #12
0ed84     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed88     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed8c     00 20 06 36 |  if_ae	mov	local02, #0
0ed90     24 C5 B0 FD | 	call	#__system___float_fromuns
0ed94     10 FB 61 F5 | 	xor	result1, local02
0ed98     0C 4E 05 F1 | 	add	fp, #12
0ed9c     A7 FA 61 FC | 	wrlong	result1, fp
0eda0     0C 4E 85 F1 | 	sub	fp, #12
0eda4                 | LR__1182
0eda4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0eda4     14 4E 05 F1 | 	add	fp, #20
0eda8     A7 14 02 FB | 	rdlong	arg02, fp
0edac     14 4E 85 F1 | 	sub	fp, #20
0edb0     1D 14 0E F2 | 	cmp	arg02, #29 wz
0edb4     24 00 90 5D |  if_ne	jmp	#LR__1183
0edb8     14 4E 05 F1 | 	add	fp, #20
0edbc     A7 3C 68 FC | 	wrlong	#30, fp
0edc0     08 4E 85 F1 | 	sub	fp, #8
0edc4     A7 12 02 FB | 	rdlong	arg01, fp
0edc8     0C 4E 85 F1 | 	sub	fp, #12
0edcc     E8 C4 B0 FD | 	call	#__system___float_fromuns
0edd0     0C 4E 05 F1 | 	add	fp, #12
0edd4     A7 FA 61 FC | 	wrlong	result1, fp
0edd8     0C 4E 85 F1 | 	sub	fp, #12
0eddc                 | LR__1183
0eddc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0eddc     08 4E 05 F1 | 	add	fp, #8
0ede0     A7 14 02 FB | 	rdlong	arg02, fp
0ede4     08 4E 85 F1 | 	sub	fp, #8
0ede8     1E 14 0E F2 | 	cmp	arg02, #30 wz
0edec     14 4E 05 A1 |  if_e	add	fp, #20
0edf0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0edf4     14 4E 85 A1 |  if_e	sub	fp, #20
0edf8     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0edfc     1C 00 90 5D |  if_ne	jmp	#LR__1184
0ee00     A7 12 02 FB | 	rdlong	arg01, fp
0ee04     0C 4E 05 F1 | 	add	fp, #12
0ee08     A7 14 02 FB | 	rdlong	arg02, fp
0ee0c     0C 4E 85 F1 | 	sub	fp, #12
0ee10     8C D7 B0 FD | 	call	#__system____builtin_powf
0ee14     A7 FA 61 FC | 	wrlong	result1, fp
0ee18     10 00 90 FD | 	jmp	#LR__1185
0ee1c                 | LR__1184
0ee1c     A7 1A 68 FC | 	wrlong	#13, fp
0ee20     08 4E 05 F1 | 	add	fp, #8
0ee24     A7 FE 69 FC | 	wrlong	#255, fp
0ee28     08 4E 85 F1 | 	sub	fp, #8
0ee2c                 | LR__1185
0ee2c     A7 12 02 F6 | 	mov	arg01, fp
0ee30     A0 AA BF FD | 	call	#_push
0ee34     A7 F0 03 F6 | 	mov	ptra, fp
0ee38     B2 00 A0 FD | 	call	#popregs_
0ee3c                 | _do_power_ret
0ee3c     2D 00 64 FD | 	ret
0ee40                 | 
0ee40                 | ' 
0ee40                 | ' 
0ee40                 | ' sub do_eq
0ee40                 | _do_eq
0ee40     05 4A 05 F6 | 	mov	COUNT_, #5
0ee44     A8 00 A0 FD | 	call	#pushregs_
0ee48     18 F0 07 F1 | 	add	ptra, #24
0ee4c     EC A9 BF FD | 	call	#_pop
0ee50     FD 1E 02 F6 | 	mov	local01, result1
0ee54     FE 20 02 F6 | 	mov	local02, result2
0ee58     FF 22 02 F6 | 	mov	local03, result3
0ee5c     0C 4E 05 F1 | 	add	fp, #12
0ee60     A7 1E 62 FC | 	wrlong	local01, fp
0ee64     04 4E 05 F1 | 	add	fp, #4
0ee68     A7 20 62 FC | 	wrlong	local02, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 22 62 FC | 	wrlong	local03, fp
0ee74     14 4E 85 F1 | 	sub	fp, #20
0ee78     C0 A9 BF FD | 	call	#_pop
0ee7c     FF 22 02 F6 | 	mov	local03, result3
0ee80     A7 FA 61 FC | 	wrlong	result1, fp
0ee84     04 4E 05 F1 | 	add	fp, #4
0ee88     A7 FC 61 FC | 	wrlong	result2, fp
0ee8c     04 4E 05 F1 | 	add	fp, #4
0ee90     A7 22 62 FC | 	wrlong	local03, fp
0ee94                 | ' t2=pop()
0ee94                 | ' t1=pop()
0ee94                 | ' 
0ee94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ee94     08 4E 85 F1 | 	sub	fp, #8
0ee98     1F 22 0E F2 | 	cmp	local03, #31 wz
0ee9c     14 4E 05 A1 |  if_e	add	fp, #20
0eea0     A7 24 02 AB |  if_e	rdlong	local04, fp
0eea4     14 4E 85 A1 |  if_e	sub	fp, #20
0eea8     12 23 02 A6 |  if_e	mov	local03, local04
0eeac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eeb0     28 00 90 5D |  if_ne	jmp	#LR__1190
0eeb4     00 1E 06 F6 | 	mov	local01, #0
0eeb8     A7 12 02 FB | 	rdlong	arg01, fp
0eebc     0C 4E 05 F1 | 	add	fp, #12
0eec0     A7 14 02 FB | 	rdlong	arg02, fp
0eec4     0C 4E 85 F1 | 	sub	fp, #12
0eec8     30 9D B0 FD | 	call	#__system___string_cmp
0eecc     00 FA 0D F2 | 	cmp	result1, #0 wz
0eed0     00 1E 26 A6 |  if_e	not	local01, #0
0eed4     A7 1E 62 FC | 	wrlong	local01, fp
0eed8     1C 04 90 FD | 	jmp	#LR__1203
0eedc                 | LR__1190
0eedc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0eedc     08 4E 05 F1 | 	add	fp, #8
0eee0     A7 1E 02 FB | 	rdlong	local01, fp
0eee4     08 4E 85 F1 | 	sub	fp, #8
0eee8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eeec     14 4E 05 A1 |  if_e	add	fp, #20
0eef0     A7 24 02 AB |  if_e	rdlong	local04, fp
0eef4     14 4E 85 A1 |  if_e	sub	fp, #20
0eef8     12 23 02 A6 |  if_e	mov	local03, local04
0eefc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ef00     2C 00 90 5D |  if_ne	jmp	#LR__1191
0ef04     00 1E 06 F6 | 	mov	local01, #0
0ef08     A7 12 02 FB | 	rdlong	arg01, fp
0ef0c     0C 4E 05 F1 | 	add	fp, #12
0ef10     A7 14 02 FB | 	rdlong	arg02, fp
0ef14     0C 4E 85 F1 | 	sub	fp, #12
0ef18     01 16 06 F6 | 	mov	arg03, #1
0ef1c     D0 CB B0 FD | 	call	#__system___float_cmp
0ef20     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef24     00 1E 26 A6 |  if_e	not	local01, #0
0ef28     A7 1E 62 FC | 	wrlong	local01, fp
0ef2c     C8 03 90 FD | 	jmp	#LR__1203
0ef30                 | LR__1191
0ef30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0ef30     08 4E 05 F1 | 	add	fp, #8
0ef34     A7 1E 02 FB | 	rdlong	local01, fp
0ef38     08 4E 85 F1 | 	sub	fp, #8
0ef3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ef40     14 4E 05 A1 |  if_e	add	fp, #20
0ef44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ef48     14 4E 85 A1 |  if_e	sub	fp, #20
0ef4c     12 23 02 A6 |  if_e	mov	local03, local04
0ef50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ef54     48 00 90 5D |  if_ne	jmp	#LR__1192
0ef58     00 1E 06 F6 | 	mov	local01, #0
0ef5c     A7 20 02 FB | 	rdlong	local02, fp
0ef60     0C 4E 05 F1 | 	add	fp, #12
0ef64     A7 12 02 FB | 	rdlong	arg01, fp
0ef68     0C 4E 85 F1 | 	sub	fp, #12
0ef6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef70     1F 26 C6 C9 |  if_b	decod	local05, #31
0ef74     00 26 06 36 |  if_ae	mov	local05, #0
0ef78     3C C3 B0 FD | 	call	#__system___float_fromuns
0ef7c     13 FB 61 F5 | 	xor	result1, local05
0ef80     FD 14 02 F6 | 	mov	arg02, result1
0ef84     10 13 02 F6 | 	mov	arg01, local02
0ef88     01 16 06 F6 | 	mov	arg03, #1
0ef8c     60 CB B0 FD | 	call	#__system___float_cmp
0ef90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef94     00 1E 26 A6 |  if_e	not	local01, #0
0ef98     A7 1E 62 FC | 	wrlong	local01, fp
0ef9c     58 03 90 FD | 	jmp	#LR__1203
0efa0                 | LR__1192
0efa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0efa0     08 4E 05 F1 | 	add	fp, #8
0efa4     A7 1E 02 FB | 	rdlong	local01, fp
0efa8     08 4E 85 F1 | 	sub	fp, #8
0efac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0efb0     14 4E 05 A1 |  if_e	add	fp, #20
0efb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0efb8     14 4E 85 A1 |  if_e	sub	fp, #20
0efbc     12 23 02 A6 |  if_e	mov	local03, local04
0efc0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0efc4     38 00 90 5D |  if_ne	jmp	#LR__1193
0efc8     00 1E 06 F6 | 	mov	local01, #0
0efcc     A7 20 02 FB | 	rdlong	local02, fp
0efd0     0C 4E 05 F1 | 	add	fp, #12
0efd4     A7 12 02 FB | 	rdlong	arg01, fp
0efd8     0C 4E 85 F1 | 	sub	fp, #12
0efdc     D8 C2 B0 FD | 	call	#__system___float_fromuns
0efe0     FD 14 02 F6 | 	mov	arg02, result1
0efe4     10 13 02 F6 | 	mov	arg01, local02
0efe8     01 16 06 F6 | 	mov	arg03, #1
0efec     00 CB B0 FD | 	call	#__system___float_cmp
0eff0     00 FA 0D F2 | 	cmp	result1, #0 wz
0eff4     00 1E 26 A6 |  if_e	not	local01, #0
0eff8     A7 1E 62 FC | 	wrlong	local01, fp
0effc     F8 02 90 FD | 	jmp	#LR__1203
0f000                 | LR__1193
0f000                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 1E 02 FB | 	rdlong	local01, fp
0f008     08 4E 85 F1 | 	sub	fp, #8
0f00c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f010     14 4E 05 A1 |  if_e	add	fp, #20
0f014     A7 24 02 AB |  if_e	rdlong	local04, fp
0f018     14 4E 85 A1 |  if_e	sub	fp, #20
0f01c     12 23 02 A6 |  if_e	mov	local03, local04
0f020     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f024     44 00 90 5D |  if_ne	jmp	#LR__1194
0f028     00 1E 06 F6 | 	mov	local01, #0
0f02c     A7 12 02 FB | 	rdlong	arg01, fp
0f030     09 13 52 F6 | 	abs	arg01, arg01 wc
0f034     1F 26 C6 C9 |  if_b	decod	local05, #31
0f038     00 26 06 36 |  if_ae	mov	local05, #0
0f03c     78 C2 B0 FD | 	call	#__system___float_fromuns
0f040     13 FB 61 F5 | 	xor	result1, local05
0f044     FD 12 02 F6 | 	mov	arg01, result1
0f048     0C 4E 05 F1 | 	add	fp, #12
0f04c     A7 14 02 FB | 	rdlong	arg02, fp
0f050     0C 4E 85 F1 | 	sub	fp, #12
0f054     01 16 06 F6 | 	mov	arg03, #1
0f058     94 CA B0 FD | 	call	#__system___float_cmp
0f05c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f060     00 1E 26 A6 |  if_e	not	local01, #0
0f064     A7 1E 62 FC | 	wrlong	local01, fp
0f068     8C 02 90 FD | 	jmp	#LR__1203
0f06c                 | LR__1194
0f06c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0f06c     08 4E 05 F1 | 	add	fp, #8
0f070     A7 1E 02 FB | 	rdlong	local01, fp
0f074     08 4E 85 F1 | 	sub	fp, #8
0f078     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f07c     14 4E 05 A1 |  if_e	add	fp, #20
0f080     A7 24 02 AB |  if_e	rdlong	local04, fp
0f084     14 4E 85 A1 |  if_e	sub	fp, #20
0f088     12 23 02 A6 |  if_e	mov	local03, local04
0f08c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f090     24 00 90 5D |  if_ne	jmp	#LR__1195
0f094     00 1E 06 F6 | 	mov	local01, #0
0f098     A7 20 02 FB | 	rdlong	local02, fp
0f09c     0C 4E 05 F1 | 	add	fp, #12
0f0a0     A7 22 02 FB | 	rdlong	local03, fp
0f0a4     0C 4E 85 F1 | 	sub	fp, #12
0f0a8     11 21 0A F2 | 	cmp	local02, local03 wz
0f0ac     01 1E 66 A6 |  if_e	neg	local01, #1
0f0b0     A7 1E 62 FC | 	wrlong	local01, fp
0f0b4     40 02 90 FD | 	jmp	#LR__1203
0f0b8                 | LR__1195
0f0b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0f0b8     08 4E 05 F1 | 	add	fp, #8
0f0bc     A7 1E 02 FB | 	rdlong	local01, fp
0f0c0     08 4E 85 F1 | 	sub	fp, #8
0f0c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f0c8     14 4E 05 A1 |  if_e	add	fp, #20
0f0cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f0d8     24 00 90 5D |  if_ne	jmp	#LR__1196
0f0dc     00 1E 06 F6 | 	mov	local01, #0
0f0e0     A7 20 02 FB | 	rdlong	local02, fp
0f0e4     0C 4E 05 F1 | 	add	fp, #12
0f0e8     A7 22 02 FB | 	rdlong	local03, fp
0f0ec     0C 4E 85 F1 | 	sub	fp, #12
0f0f0     11 21 0A F2 | 	cmp	local02, local03 wz
0f0f4     01 1E 66 A6 |  if_e	neg	local01, #1
0f0f8     A7 1E 62 FC | 	wrlong	local01, fp
0f0fc     F8 01 90 FD | 	jmp	#LR__1203
0f100                 | LR__1196
0f100                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0f100     08 4E 05 F1 | 	add	fp, #8
0f104     A7 1E 02 FB | 	rdlong	local01, fp
0f108     08 4E 85 F1 | 	sub	fp, #8
0f10c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f110     14 4E 05 A1 |  if_e	add	fp, #20
0f114     A7 22 02 AB |  if_e	rdlong	local03, fp
0f118     14 4E 85 A1 |  if_e	sub	fp, #20
0f11c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f120     34 00 90 5D |  if_ne	jmp	#LR__1197
0f124     00 1E 06 F6 | 	mov	local01, #0
0f128     A7 12 02 FB | 	rdlong	arg01, fp
0f12c     88 C1 B0 FD | 	call	#__system___float_fromuns
0f130     FD 12 02 F6 | 	mov	arg01, result1
0f134     0C 4E 05 F1 | 	add	fp, #12
0f138     A7 14 02 FB | 	rdlong	arg02, fp
0f13c     0C 4E 85 F1 | 	sub	fp, #12
0f140     01 16 06 F6 | 	mov	arg03, #1
0f144     A8 C9 B0 FD | 	call	#__system___float_cmp
0f148     00 FA 0D F2 | 	cmp	result1, #0 wz
0f14c     00 1E 26 A6 |  if_e	not	local01, #0
0f150     A7 1E 62 FC | 	wrlong	local01, fp
0f154     A0 01 90 FD | 	jmp	#LR__1203
0f158                 | LR__1197
0f158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0f158     08 4E 05 F1 | 	add	fp, #8
0f15c     A7 1E 02 FB | 	rdlong	local01, fp
0f160     08 4E 85 F1 | 	sub	fp, #8
0f164     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f168     14 4E 05 A1 |  if_e	add	fp, #20
0f16c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f170     14 4E 85 A1 |  if_e	sub	fp, #20
0f174     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f178     24 00 90 5D |  if_ne	jmp	#LR__1198
0f17c     00 1E 06 F6 | 	mov	local01, #0
0f180     A7 20 02 FB | 	rdlong	local02, fp
0f184     0C 4E 05 F1 | 	add	fp, #12
0f188     A7 22 02 FB | 	rdlong	local03, fp
0f18c     0C 4E 85 F1 | 	sub	fp, #12
0f190     11 21 0A F2 | 	cmp	local02, local03 wz
0f194     01 1E 66 A6 |  if_e	neg	local01, #1
0f198     A7 1E 62 FC | 	wrlong	local01, fp
0f19c     58 01 90 FD | 	jmp	#LR__1203
0f1a0                 | LR__1198
0f1a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0f1a0     08 4E 05 F1 | 	add	fp, #8
0f1a4     A7 1E 02 FB | 	rdlong	local01, fp
0f1a8     08 4E 85 F1 | 	sub	fp, #8
0f1ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f1b0     14 4E 05 A1 |  if_e	add	fp, #20
0f1b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f1b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f1bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f1c0     24 00 90 5D |  if_ne	jmp	#LR__1199
0f1c4     00 1E 06 F6 | 	mov	local01, #0
0f1c8     A7 20 02 FB | 	rdlong	local02, fp
0f1cc     0C 4E 05 F1 | 	add	fp, #12
0f1d0     A7 22 02 FB | 	rdlong	local03, fp
0f1d4     0C 4E 85 F1 | 	sub	fp, #12
0f1d8     11 21 0A F2 | 	cmp	local02, local03 wz
0f1dc     01 1E 66 A6 |  if_e	neg	local01, #1
0f1e0     A7 1E 62 FC | 	wrlong	local01, fp
0f1e4     10 01 90 FD | 	jmp	#LR__1203
0f1e8                 | LR__1199
0f1e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0f1e8     08 4E 05 F1 | 	add	fp, #8
0f1ec     A7 1E 02 FB | 	rdlong	local01, fp
0f1f0     08 4E 85 F1 | 	sub	fp, #8
0f1f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f1f8     14 4E 05 A1 |  if_e	add	fp, #20
0f1fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0f200     14 4E 85 A1 |  if_e	sub	fp, #20
0f204     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f208     30 00 90 5D |  if_ne	jmp	#LR__1200
0f20c     00 1E 06 F6 | 	mov	local01, #0
0f210     A7 12 02 FB | 	rdlong	arg01, fp
0f214     2C D7 BF FD | 	call	#_convertstring
0f218     FD 12 02 F6 | 	mov	arg01, result1
0f21c     0C 4E 05 F1 | 	add	fp, #12
0f220     A7 14 02 FB | 	rdlong	arg02, fp
0f224     0C 4E 85 F1 | 	sub	fp, #12
0f228     D0 99 B0 FD | 	call	#__system___string_cmp
0f22c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f230     00 1E 26 A6 |  if_e	not	local01, #0
0f234     A7 1E 62 FC | 	wrlong	local01, fp
0f238     BC 00 90 FD | 	jmp	#LR__1203
0f23c                 | LR__1200
0f23c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0f23c     08 4E 05 F1 | 	add	fp, #8
0f240     A7 1E 02 FB | 	rdlong	local01, fp
0f244     08 4E 85 F1 | 	sub	fp, #8
0f248     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f24c     14 4E 05 A1 |  if_e	add	fp, #20
0f250     A7 22 02 AB |  if_e	rdlong	local03, fp
0f254     14 4E 85 A1 |  if_e	sub	fp, #20
0f258     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f25c     34 00 90 5D |  if_ne	jmp	#LR__1201
0f260     00 1E 06 F6 | 	mov	local01, #0
0f264     A7 20 02 FB | 	rdlong	local02, fp
0f268     0C 4E 05 F1 | 	add	fp, #12
0f26c     A7 12 02 FB | 	rdlong	arg01, fp
0f270     0C 4E 85 F1 | 	sub	fp, #12
0f274     CC D6 BF FD | 	call	#_convertstring
0f278     FD 14 02 F6 | 	mov	arg02, result1
0f27c     10 13 02 F6 | 	mov	arg01, local02
0f280     78 99 B0 FD | 	call	#__system___string_cmp
0f284     00 FA 0D F2 | 	cmp	result1, #0 wz
0f288     00 1E 26 A6 |  if_e	not	local01, #0
0f28c     A7 1E 62 FC | 	wrlong	local01, fp
0f290     64 00 90 FD | 	jmp	#LR__1203
0f294                 | LR__1201
0f294                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0f294     08 4E 05 F1 | 	add	fp, #8
0f298     A7 1E 02 FB | 	rdlong	local01, fp
0f29c     08 4E 85 F1 | 	sub	fp, #8
0f2a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f2a4     14 4E 05 A1 |  if_e	add	fp, #20
0f2a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f2b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f2b4     3C 00 90 5D |  if_ne	jmp	#LR__1202
0f2b8     00 1E 06 F6 | 	mov	local01, #0
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     80 D6 BF FD | 	call	#_convertstring
0f2c4     FD 20 02 F6 | 	mov	local02, result1
0f2c8     0C 4E 05 F1 | 	add	fp, #12
0f2cc     A7 12 02 FB | 	rdlong	arg01, fp
0f2d0     0C 4E 85 F1 | 	sub	fp, #12
0f2d4     6C D6 BF FD | 	call	#_convertstring
0f2d8     FD 14 02 F6 | 	mov	arg02, result1
0f2dc     10 13 02 F6 | 	mov	arg01, local02
0f2e0     18 99 B0 FD | 	call	#__system___string_cmp
0f2e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f2e8     00 1E 26 A6 |  if_e	not	local01, #0
0f2ec     A7 1E 62 FC | 	wrlong	local01, fp
0f2f0     04 00 90 FD | 	jmp	#LR__1203
0f2f4                 | LR__1202
0f2f4     A7 00 68 FC | 	wrlong	#0, fp
0f2f8                 | LR__1203
0f2f8     08 4E 05 F1 | 	add	fp, #8
0f2fc     A7 38 68 FC | 	wrlong	#28, fp
0f300     08 4E 85 F1 | 	sub	fp, #8
0f304     A7 12 02 F6 | 	mov	arg01, fp
0f308     C8 A5 BF FD | 	call	#_push
0f30c     A7 F0 03 F6 | 	mov	ptra, fp
0f310     B2 00 A0 FD | 	call	#popregs_
0f314                 | _do_eq_ret
0f314     2D 00 64 FD | 	ret
0f318                 | 
0f318                 | ' 
0f318                 | ' sub do_gt
0f318                 | _do_gt
0f318     05 4A 05 F6 | 	mov	COUNT_, #5
0f31c     A8 00 A0 FD | 	call	#pushregs_
0f320     18 F0 07 F1 | 	add	ptra, #24
0f324     14 A5 BF FD | 	call	#_pop
0f328     FD 1E 02 F6 | 	mov	local01, result1
0f32c     FE 20 02 F6 | 	mov	local02, result2
0f330     FF 22 02 F6 | 	mov	local03, result3
0f334     0C 4E 05 F1 | 	add	fp, #12
0f338     A7 1E 62 FC | 	wrlong	local01, fp
0f33c     04 4E 05 F1 | 	add	fp, #4
0f340     A7 20 62 FC | 	wrlong	local02, fp
0f344     04 4E 05 F1 | 	add	fp, #4
0f348     A7 22 62 FC | 	wrlong	local03, fp
0f34c     14 4E 85 F1 | 	sub	fp, #20
0f350     E8 A4 BF FD | 	call	#_pop
0f354     FF 22 02 F6 | 	mov	local03, result3
0f358     A7 FA 61 FC | 	wrlong	result1, fp
0f35c     04 4E 05 F1 | 	add	fp, #4
0f360     A7 FC 61 FC | 	wrlong	result2, fp
0f364     04 4E 05 F1 | 	add	fp, #4
0f368     A7 22 62 FC | 	wrlong	local03, fp
0f36c                 | ' t2=pop()
0f36c                 | ' t1=pop()
0f36c                 | ' 
0f36c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f36c     08 4E 85 F1 | 	sub	fp, #8
0f370     1F 22 0E F2 | 	cmp	local03, #31 wz
0f374     14 4E 05 A1 |  if_e	add	fp, #20
0f378     A7 24 02 AB |  if_e	rdlong	local04, fp
0f37c     14 4E 85 A1 |  if_e	sub	fp, #20
0f380     12 23 02 A6 |  if_e	mov	local03, local04
0f384     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f388     28 00 90 5D |  if_ne	jmp	#LR__1210
0f38c     00 1E 06 F6 | 	mov	local01, #0
0f390     A7 12 02 FB | 	rdlong	arg01, fp
0f394     0C 4E 05 F1 | 	add	fp, #12
0f398     A7 14 02 FB | 	rdlong	arg02, fp
0f39c     0C 4E 85 F1 | 	sub	fp, #12
0f3a0     58 98 B0 FD | 	call	#__system___string_cmp
0f3a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0f3a8     00 1E 26 36 |  if_ae	not	local01, #0
0f3ac     A7 1E 62 FC | 	wrlong	local01, fp
0f3b0     1C 04 90 FD | 	jmp	#LR__1223
0f3b4                 | LR__1210
0f3b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f3b4     08 4E 05 F1 | 	add	fp, #8
0f3b8     A7 1E 02 FB | 	rdlong	local01, fp
0f3bc     08 4E 85 F1 | 	sub	fp, #8
0f3c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f3c4     14 4E 05 A1 |  if_e	add	fp, #20
0f3c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3cc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3d0     12 23 02 A6 |  if_e	mov	local03, local04
0f3d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f3d8     2C 00 90 5D |  if_ne	jmp	#LR__1211
0f3dc     00 1E 06 F6 | 	mov	local01, #0
0f3e0     A7 12 02 FB | 	rdlong	arg01, fp
0f3e4     0C 4E 05 F1 | 	add	fp, #12
0f3e8     A7 14 02 FB | 	rdlong	arg02, fp
0f3ec     0C 4E 85 F1 | 	sub	fp, #12
0f3f0     01 16 66 F6 | 	neg	arg03, #1
0f3f4     F8 C6 B0 FD | 	call	#__system___float_cmp
0f3f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f3fc     00 1E 26 36 |  if_ae	not	local01, #0
0f400     A7 1E 62 FC | 	wrlong	local01, fp
0f404     C8 03 90 FD | 	jmp	#LR__1223
0f408                 | LR__1211
0f408                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f408     08 4E 05 F1 | 	add	fp, #8
0f40c     A7 1E 02 FB | 	rdlong	local01, fp
0f410     08 4E 85 F1 | 	sub	fp, #8
0f414     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f418     14 4E 05 A1 |  if_e	add	fp, #20
0f41c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f420     14 4E 85 A1 |  if_e	sub	fp, #20
0f424     12 23 02 A6 |  if_e	mov	local03, local04
0f428     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f42c     48 00 90 5D |  if_ne	jmp	#LR__1212
0f430     00 1E 06 F6 | 	mov	local01, #0
0f434     A7 20 02 FB | 	rdlong	local02, fp
0f438     0C 4E 05 F1 | 	add	fp, #12
0f43c     A7 12 02 FB | 	rdlong	arg01, fp
0f440     0C 4E 85 F1 | 	sub	fp, #12
0f444     09 13 52 F6 | 	abs	arg01, arg01 wc
0f448     1F 26 C6 C9 |  if_b	decod	local05, #31
0f44c     00 26 06 36 |  if_ae	mov	local05, #0
0f450     64 BE B0 FD | 	call	#__system___float_fromuns
0f454     13 FB 61 F5 | 	xor	result1, local05
0f458     FD 14 02 F6 | 	mov	arg02, result1
0f45c     10 13 02 F6 | 	mov	arg01, local02
0f460     01 16 66 F6 | 	neg	arg03, #1
0f464     88 C6 B0 FD | 	call	#__system___float_cmp
0f468     01 FA 55 F2 | 	cmps	result1, #1 wc
0f46c     00 1E 26 36 |  if_ae	not	local01, #0
0f470     A7 1E 62 FC | 	wrlong	local01, fp
0f474     58 03 90 FD | 	jmp	#LR__1223
0f478                 | LR__1212
0f478                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f478     08 4E 05 F1 | 	add	fp, #8
0f47c     A7 1E 02 FB | 	rdlong	local01, fp
0f480     08 4E 85 F1 | 	sub	fp, #8
0f484     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f488     14 4E 05 A1 |  if_e	add	fp, #20
0f48c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f490     14 4E 85 A1 |  if_e	sub	fp, #20
0f494     12 23 02 A6 |  if_e	mov	local03, local04
0f498     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f49c     38 00 90 5D |  if_ne	jmp	#LR__1213
0f4a0     00 1E 06 F6 | 	mov	local01, #0
0f4a4     A7 20 02 FB | 	rdlong	local02, fp
0f4a8     0C 4E 05 F1 | 	add	fp, #12
0f4ac     A7 12 02 FB | 	rdlong	arg01, fp
0f4b0     0C 4E 85 F1 | 	sub	fp, #12
0f4b4     00 BE B0 FD | 	call	#__system___float_fromuns
0f4b8     FD 14 02 F6 | 	mov	arg02, result1
0f4bc     10 13 02 F6 | 	mov	arg01, local02
0f4c0     01 16 66 F6 | 	neg	arg03, #1
0f4c4     28 C6 B0 FD | 	call	#__system___float_cmp
0f4c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f4cc     00 1E 26 36 |  if_ae	not	local01, #0
0f4d0     A7 1E 62 FC | 	wrlong	local01, fp
0f4d4     F8 02 90 FD | 	jmp	#LR__1223
0f4d8                 | LR__1213
0f4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f4d8     08 4E 05 F1 | 	add	fp, #8
0f4dc     A7 1E 02 FB | 	rdlong	local01, fp
0f4e0     08 4E 85 F1 | 	sub	fp, #8
0f4e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4e8     14 4E 05 A1 |  if_e	add	fp, #20
0f4ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f4f4     12 23 02 A6 |  if_e	mov	local03, local04
0f4f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f4fc     44 00 90 5D |  if_ne	jmp	#LR__1214
0f500     00 1E 06 F6 | 	mov	local01, #0
0f504     A7 12 02 FB | 	rdlong	arg01, fp
0f508     09 13 52 F6 | 	abs	arg01, arg01 wc
0f50c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f510     00 26 06 36 |  if_ae	mov	local05, #0
0f514     A0 BD B0 FD | 	call	#__system___float_fromuns
0f518     13 FB 61 F5 | 	xor	result1, local05
0f51c     FD 12 02 F6 | 	mov	arg01, result1
0f520     0C 4E 05 F1 | 	add	fp, #12
0f524     A7 14 02 FB | 	rdlong	arg02, fp
0f528     0C 4E 85 F1 | 	sub	fp, #12
0f52c     01 16 66 F6 | 	neg	arg03, #1
0f530     BC C5 B0 FD | 	call	#__system___float_cmp
0f534     01 FA 55 F2 | 	cmps	result1, #1 wc
0f538     00 1E 26 36 |  if_ae	not	local01, #0
0f53c     A7 1E 62 FC | 	wrlong	local01, fp
0f540     8C 02 90 FD | 	jmp	#LR__1223
0f544                 | LR__1214
0f544                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f544     08 4E 05 F1 | 	add	fp, #8
0f548     A7 1E 02 FB | 	rdlong	local01, fp
0f54c     08 4E 85 F1 | 	sub	fp, #8
0f550     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f554     14 4E 05 A1 |  if_e	add	fp, #20
0f558     A7 24 02 AB |  if_e	rdlong	local04, fp
0f55c     14 4E 85 A1 |  if_e	sub	fp, #20
0f560     12 23 02 A6 |  if_e	mov	local03, local04
0f564     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f568     24 00 90 5D |  if_ne	jmp	#LR__1215
0f56c     00 1E 06 F6 | 	mov	local01, #0
0f570     A7 20 02 FB | 	rdlong	local02, fp
0f574     0C 4E 05 F1 | 	add	fp, #12
0f578     A7 22 02 FB | 	rdlong	local03, fp
0f57c     0C 4E 85 F1 | 	sub	fp, #12
0f580     11 21 5A F2 | 	cmps	local02, local03 wcz
0f584     01 1E 66 16 |  if_a	neg	local01, #1
0f588     A7 1E 62 FC | 	wrlong	local01, fp
0f58c     40 02 90 FD | 	jmp	#LR__1223
0f590                 | LR__1215
0f590                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f590     08 4E 05 F1 | 	add	fp, #8
0f594     A7 1E 02 FB | 	rdlong	local01, fp
0f598     08 4E 85 F1 | 	sub	fp, #8
0f59c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5a0     14 4E 05 A1 |  if_e	add	fp, #20
0f5a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ac     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f5b0     24 00 90 5D |  if_ne	jmp	#LR__1216
0f5b4     00 1E 06 F6 | 	mov	local01, #0
0f5b8     A7 20 02 FB | 	rdlong	local02, fp
0f5bc     0C 4E 05 F1 | 	add	fp, #12
0f5c0     A7 22 02 FB | 	rdlong	local03, fp
0f5c4     0C 4E 85 F1 | 	sub	fp, #12
0f5c8     11 21 5A F2 | 	cmps	local02, local03 wcz
0f5cc     01 1E 66 16 |  if_a	neg	local01, #1
0f5d0     A7 1E 62 FC | 	wrlong	local01, fp
0f5d4     F8 01 90 FD | 	jmp	#LR__1223
0f5d8                 | LR__1216
0f5d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f5d8     08 4E 05 F1 | 	add	fp, #8
0f5dc     A7 1E 02 FB | 	rdlong	local01, fp
0f5e0     08 4E 85 F1 | 	sub	fp, #8
0f5e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f5e8     14 4E 05 A1 |  if_e	add	fp, #20
0f5ec     A7 22 02 AB |  if_e	rdlong	local03, fp
0f5f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f5f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5f8     34 00 90 5D |  if_ne	jmp	#LR__1217
0f5fc     00 1E 06 F6 | 	mov	local01, #0
0f600     A7 12 02 FB | 	rdlong	arg01, fp
0f604     B0 BC B0 FD | 	call	#__system___float_fromuns
0f608     FD 12 02 F6 | 	mov	arg01, result1
0f60c     0C 4E 05 F1 | 	add	fp, #12
0f610     A7 14 02 FB | 	rdlong	arg02, fp
0f614     0C 4E 85 F1 | 	sub	fp, #12
0f618     01 16 66 F6 | 	neg	arg03, #1
0f61c     D0 C4 B0 FD | 	call	#__system___float_cmp
0f620     01 FA 55 F2 | 	cmps	result1, #1 wc
0f624     00 1E 26 36 |  if_ae	not	local01, #0
0f628     A7 1E 62 FC | 	wrlong	local01, fp
0f62c     A0 01 90 FD | 	jmp	#LR__1223
0f630                 | LR__1217
0f630                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f630     08 4E 05 F1 | 	add	fp, #8
0f634     A7 1E 02 FB | 	rdlong	local01, fp
0f638     08 4E 85 F1 | 	sub	fp, #8
0f63c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f640     14 4E 05 A1 |  if_e	add	fp, #20
0f644     A7 22 02 AB |  if_e	rdlong	local03, fp
0f648     14 4E 85 A1 |  if_e	sub	fp, #20
0f64c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f650     24 00 90 5D |  if_ne	jmp	#LR__1218
0f654     00 1E 06 F6 | 	mov	local01, #0
0f658     A7 20 02 FB | 	rdlong	local02, fp
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 22 02 FB | 	rdlong	local03, fp
0f664     0C 4E 85 F1 | 	sub	fp, #12
0f668     11 21 5A F2 | 	cmps	local02, local03 wcz
0f66c     01 1E 66 16 |  if_a	neg	local01, #1
0f670     A7 1E 62 FC | 	wrlong	local01, fp
0f674     58 01 90 FD | 	jmp	#LR__1223
0f678                 | LR__1218
0f678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f678     08 4E 05 F1 | 	add	fp, #8
0f67c     A7 1E 02 FB | 	rdlong	local01, fp
0f680     08 4E 85 F1 | 	sub	fp, #8
0f684     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f688     14 4E 05 A1 |  if_e	add	fp, #20
0f68c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f690     14 4E 85 A1 |  if_e	sub	fp, #20
0f694     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f698     24 00 90 5D |  if_ne	jmp	#LR__1219
0f69c     00 1E 06 F6 | 	mov	local01, #0
0f6a0     A7 20 02 FB | 	rdlong	local02, fp
0f6a4     0C 4E 05 F1 | 	add	fp, #12
0f6a8     A7 22 02 FB | 	rdlong	local03, fp
0f6ac     0C 4E 85 F1 | 	sub	fp, #12
0f6b0     11 21 1A F2 | 	cmp	local02, local03 wcz
0f6b4     01 1E 66 16 |  if_a	neg	local01, #1
0f6b8     A7 1E 62 FC | 	wrlong	local01, fp
0f6bc     10 01 90 FD | 	jmp	#LR__1223
0f6c0                 | LR__1219
0f6c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f6c0     08 4E 05 F1 | 	add	fp, #8
0f6c4     A7 1E 02 FB | 	rdlong	local01, fp
0f6c8     08 4E 85 F1 | 	sub	fp, #8
0f6cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f6d0     14 4E 05 A1 |  if_e	add	fp, #20
0f6d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6d8     14 4E 85 A1 |  if_e	sub	fp, #20
0f6dc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f6e0     30 00 90 5D |  if_ne	jmp	#LR__1220
0f6e4     00 1E 06 F6 | 	mov	local01, #0
0f6e8     A7 12 02 FB | 	rdlong	arg01, fp
0f6ec     54 D2 BF FD | 	call	#_convertstring
0f6f0     FD 12 02 F6 | 	mov	arg01, result1
0f6f4     0C 4E 05 F1 | 	add	fp, #12
0f6f8     A7 14 02 FB | 	rdlong	arg02, fp
0f6fc     0C 4E 85 F1 | 	sub	fp, #12
0f700     F8 94 B0 FD | 	call	#__system___string_cmp
0f704     01 FA 55 F2 | 	cmps	result1, #1 wc
0f708     00 1E 26 36 |  if_ae	not	local01, #0
0f70c     A7 1E 62 FC | 	wrlong	local01, fp
0f710     BC 00 90 FD | 	jmp	#LR__1223
0f714                 | LR__1220
0f714                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f714     08 4E 05 F1 | 	add	fp, #8
0f718     A7 1E 02 FB | 	rdlong	local01, fp
0f71c     08 4E 85 F1 | 	sub	fp, #8
0f720     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f724     14 4E 05 A1 |  if_e	add	fp, #20
0f728     A7 22 02 AB |  if_e	rdlong	local03, fp
0f72c     14 4E 85 A1 |  if_e	sub	fp, #20
0f730     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f734     34 00 90 5D |  if_ne	jmp	#LR__1221
0f738     00 1E 06 F6 | 	mov	local01, #0
0f73c     A7 20 02 FB | 	rdlong	local02, fp
0f740     0C 4E 05 F1 | 	add	fp, #12
0f744     A7 12 02 FB | 	rdlong	arg01, fp
0f748     0C 4E 85 F1 | 	sub	fp, #12
0f74c     F4 D1 BF FD | 	call	#_convertstring
0f750     FD 14 02 F6 | 	mov	arg02, result1
0f754     10 13 02 F6 | 	mov	arg01, local02
0f758     A0 94 B0 FD | 	call	#__system___string_cmp
0f75c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f760     00 1E 26 36 |  if_ae	not	local01, #0
0f764     A7 1E 62 FC | 	wrlong	local01, fp
0f768     64 00 90 FD | 	jmp	#LR__1223
0f76c                 | LR__1221
0f76c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f76c     08 4E 05 F1 | 	add	fp, #8
0f770     A7 1E 02 FB | 	rdlong	local01, fp
0f774     08 4E 85 F1 | 	sub	fp, #8
0f778     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f77c     14 4E 05 A1 |  if_e	add	fp, #20
0f780     A7 22 02 AB |  if_e	rdlong	local03, fp
0f784     14 4E 85 A1 |  if_e	sub	fp, #20
0f788     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f78c     3C 00 90 5D |  if_ne	jmp	#LR__1222
0f790     00 1E 06 F6 | 	mov	local01, #0
0f794     A7 12 02 FB | 	rdlong	arg01, fp
0f798     A8 D1 BF FD | 	call	#_convertstring
0f79c     FD 20 02 F6 | 	mov	local02, result1
0f7a0     0C 4E 05 F1 | 	add	fp, #12
0f7a4     A7 12 02 FB | 	rdlong	arg01, fp
0f7a8     0C 4E 85 F1 | 	sub	fp, #12
0f7ac     94 D1 BF FD | 	call	#_convertstring
0f7b0     FD 14 02 F6 | 	mov	arg02, result1
0f7b4     10 13 02 F6 | 	mov	arg01, local02
0f7b8     40 94 B0 FD | 	call	#__system___string_cmp
0f7bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7c0     00 1E 26 36 |  if_ae	not	local01, #0
0f7c4     A7 1E 62 FC | 	wrlong	local01, fp
0f7c8     04 00 90 FD | 	jmp	#LR__1223
0f7cc                 | LR__1222
0f7cc     A7 00 68 FC | 	wrlong	#0, fp
0f7d0                 | LR__1223
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 38 68 FC | 	wrlong	#28, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     A7 12 02 F6 | 	mov	arg01, fp
0f7e0     F0 A0 BF FD | 	call	#_push
0f7e4     A7 F0 03 F6 | 	mov	ptra, fp
0f7e8     B2 00 A0 FD | 	call	#popregs_
0f7ec                 | _do_gt_ret
0f7ec     2D 00 64 FD | 	ret
0f7f0                 | 
0f7f0                 | ' 
0f7f0                 | ' sub do_lt
0f7f0                 | _do_lt
0f7f0     05 4A 05 F6 | 	mov	COUNT_, #5
0f7f4     A8 00 A0 FD | 	call	#pushregs_
0f7f8     18 F0 07 F1 | 	add	ptra, #24
0f7fc     3C A0 BF FD | 	call	#_pop
0f800     FD 1E 02 F6 | 	mov	local01, result1
0f804     FE 20 02 F6 | 	mov	local02, result2
0f808     FF 22 02 F6 | 	mov	local03, result3
0f80c     0C 4E 05 F1 | 	add	fp, #12
0f810     A7 1E 62 FC | 	wrlong	local01, fp
0f814     04 4E 05 F1 | 	add	fp, #4
0f818     A7 20 62 FC | 	wrlong	local02, fp
0f81c     04 4E 05 F1 | 	add	fp, #4
0f820     A7 22 62 FC | 	wrlong	local03, fp
0f824     14 4E 85 F1 | 	sub	fp, #20
0f828     10 A0 BF FD | 	call	#_pop
0f82c     FF 22 02 F6 | 	mov	local03, result3
0f830     A7 FA 61 FC | 	wrlong	result1, fp
0f834     04 4E 05 F1 | 	add	fp, #4
0f838     A7 FC 61 FC | 	wrlong	result2, fp
0f83c     04 4E 05 F1 | 	add	fp, #4
0f840     A7 22 62 FC | 	wrlong	local03, fp
0f844                 | ' t2=pop()
0f844                 | ' t1=pop()
0f844                 | ' 
0f844                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f844     08 4E 85 F1 | 	sub	fp, #8
0f848     1F 22 0E F2 | 	cmp	local03, #31 wz
0f84c     14 4E 05 A1 |  if_e	add	fp, #20
0f850     A7 24 02 AB |  if_e	rdlong	local04, fp
0f854     14 4E 85 A1 |  if_e	sub	fp, #20
0f858     12 23 02 A6 |  if_e	mov	local03, local04
0f85c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f860     28 00 90 5D |  if_ne	jmp	#LR__1230
0f864     00 1E 06 F6 | 	mov	local01, #0
0f868     A7 12 02 FB | 	rdlong	arg01, fp
0f86c     0C 4E 05 F1 | 	add	fp, #12
0f870     A7 14 02 FB | 	rdlong	arg02, fp
0f874     0C 4E 85 F1 | 	sub	fp, #12
0f878     80 93 B0 FD | 	call	#__system___string_cmp
0f87c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f880     00 1E 26 C6 |  if_b	not	local01, #0
0f884     A7 1E 62 FC | 	wrlong	local01, fp
0f888     0C 04 90 FD | 	jmp	#LR__1243
0f88c                 | LR__1230
0f88c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0f88c     08 4E 05 F1 | 	add	fp, #8
0f890     A7 1E 02 FB | 	rdlong	local01, fp
0f894     08 4E 85 F1 | 	sub	fp, #8
0f898     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f89c     14 4E 05 A1 |  if_e	add	fp, #20
0f8a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8a8     12 23 02 A6 |  if_e	mov	local03, local04
0f8ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f8b0     2C 00 90 5D |  if_ne	jmp	#LR__1231
0f8b4     00 1E 06 F6 | 	mov	local01, #0
0f8b8     A7 12 02 FB | 	rdlong	arg01, fp
0f8bc     0C 4E 05 F1 | 	add	fp, #12
0f8c0     A7 14 02 FB | 	rdlong	arg02, fp
0f8c4     0C 4E 85 F1 | 	sub	fp, #12
0f8c8     01 16 06 F6 | 	mov	arg03, #1
0f8cc     20 C2 B0 FD | 	call	#__system___float_cmp
0f8d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f8d4     00 1E 26 C6 |  if_b	not	local01, #0
0f8d8     A7 1E 62 FC | 	wrlong	local01, fp
0f8dc     B8 03 90 FD | 	jmp	#LR__1243
0f8e0                 | LR__1231
0f8e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0f8e0     08 4E 05 F1 | 	add	fp, #8
0f8e4     A7 1E 02 FB | 	rdlong	local01, fp
0f8e8     08 4E 85 F1 | 	sub	fp, #8
0f8ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f8f0     14 4E 05 A1 |  if_e	add	fp, #20
0f8f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8fc     12 23 02 A6 |  if_e	mov	local03, local04
0f900     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f904     48 00 90 5D |  if_ne	jmp	#LR__1232
0f908     00 1E 06 F6 | 	mov	local01, #0
0f90c     A7 20 02 FB | 	rdlong	local02, fp
0f910     0C 4E 05 F1 | 	add	fp, #12
0f914     A7 12 02 FB | 	rdlong	arg01, fp
0f918     0C 4E 85 F1 | 	sub	fp, #12
0f91c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f920     1F 26 C6 C9 |  if_b	decod	local05, #31
0f924     00 26 06 36 |  if_ae	mov	local05, #0
0f928     8C B9 B0 FD | 	call	#__system___float_fromuns
0f92c     13 FB 61 F5 | 	xor	result1, local05
0f930     FD 14 02 F6 | 	mov	arg02, result1
0f934     10 13 02 F6 | 	mov	arg01, local02
0f938     01 16 06 F6 | 	mov	arg03, #1
0f93c     B0 C1 B0 FD | 	call	#__system___float_cmp
0f940     00 FA 55 F2 | 	cmps	result1, #0 wc
0f944     00 1E 26 C6 |  if_b	not	local01, #0
0f948     A7 1E 62 FC | 	wrlong	local01, fp
0f94c     48 03 90 FD | 	jmp	#LR__1243
0f950                 | LR__1232
0f950                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0f950     08 4E 05 F1 | 	add	fp, #8
0f954     A7 1E 02 FB | 	rdlong	local01, fp
0f958     08 4E 85 F1 | 	sub	fp, #8
0f95c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f960     14 4E 05 A1 |  if_e	add	fp, #20
0f964     A7 24 02 AB |  if_e	rdlong	local04, fp
0f968     14 4E 85 A1 |  if_e	sub	fp, #20
0f96c     12 23 02 A6 |  if_e	mov	local03, local04
0f970     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f974     38 00 90 5D |  if_ne	jmp	#LR__1233
0f978     00 1E 06 F6 | 	mov	local01, #0
0f97c     A7 20 02 FB | 	rdlong	local02, fp
0f980     0C 4E 05 F1 | 	add	fp, #12
0f984     A7 12 02 FB | 	rdlong	arg01, fp
0f988     0C 4E 85 F1 | 	sub	fp, #12
0f98c     28 B9 B0 FD | 	call	#__system___float_fromuns
0f990     FD 14 02 F6 | 	mov	arg02, result1
0f994     10 13 02 F6 | 	mov	arg01, local02
0f998     01 16 06 F6 | 	mov	arg03, #1
0f99c     50 C1 B0 FD | 	call	#__system___float_cmp
0f9a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f9a4     00 1E 26 C6 |  if_b	not	local01, #0
0f9a8     A7 1E 62 FC | 	wrlong	local01, fp
0f9ac     E8 02 90 FD | 	jmp	#LR__1243
0f9b0                 | LR__1233
0f9b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0f9b0     08 4E 05 F1 | 	add	fp, #8
0f9b4     A7 1E 02 FB | 	rdlong	local01, fp
0f9b8     08 4E 85 F1 | 	sub	fp, #8
0f9bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9c0     14 4E 05 A1 |  if_e	add	fp, #20
0f9c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9c8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9cc     12 23 02 A6 |  if_e	mov	local03, local04
0f9d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f9d4     44 00 90 5D |  if_ne	jmp	#LR__1234
0f9d8     00 1E 06 F6 | 	mov	local01, #0
0f9dc     A7 12 02 FB | 	rdlong	arg01, fp
0f9e0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9e4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f9e8     00 26 06 36 |  if_ae	mov	local05, #0
0f9ec     C8 B8 B0 FD | 	call	#__system___float_fromuns
0f9f0     13 FB 61 F5 | 	xor	result1, local05
0f9f4     FD 12 02 F6 | 	mov	arg01, result1
0f9f8     0C 4E 05 F1 | 	add	fp, #12
0f9fc     A7 14 02 FB | 	rdlong	arg02, fp
0fa00     0C 4E 85 F1 | 	sub	fp, #12
0fa04     01 16 06 F6 | 	mov	arg03, #1
0fa08     E4 C0 B0 FD | 	call	#__system___float_cmp
0fa0c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa10     00 1E 26 C6 |  if_b	not	local01, #0
0fa14     A7 1E 62 FC | 	wrlong	local01, fp
0fa18     7C 02 90 FD | 	jmp	#LR__1243
0fa1c                 | LR__1234
0fa1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0fa1c     08 4E 05 F1 | 	add	fp, #8
0fa20     A7 1E 02 FB | 	rdlong	local01, fp
0fa24     08 4E 85 F1 | 	sub	fp, #8
0fa28     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa2c     14 4E 05 A1 |  if_e	add	fp, #20
0fa30     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa34     14 4E 85 A1 |  if_e	sub	fp, #20
0fa38     12 23 02 A6 |  if_e	mov	local03, local04
0fa3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fa40     20 00 90 5D |  if_ne	jmp	#LR__1235
0fa44     A7 20 02 FB | 	rdlong	local02, fp
0fa48     0C 4E 05 F1 | 	add	fp, #12
0fa4c     A7 22 02 FB | 	rdlong	local03, fp
0fa50     0C 4E 85 F1 | 	sub	fp, #12
0fa54     11 21 52 F2 | 	cmps	local02, local03 wc
0fa58     0F 1F A2 F1 | 	subx	local01, local01
0fa5c     A7 1E 62 FC | 	wrlong	local01, fp
0fa60     34 02 90 FD | 	jmp	#LR__1243
0fa64                 | LR__1235
0fa64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0fa64     08 4E 05 F1 | 	add	fp, #8
0fa68     A7 1E 02 FB | 	rdlong	local01, fp
0fa6c     08 4E 85 F1 | 	sub	fp, #8
0fa70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa74     14 4E 05 A1 |  if_e	add	fp, #20
0fa78     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa7c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa80     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fa84     20 00 90 5D |  if_ne	jmp	#LR__1236
0fa88     A7 20 02 FB | 	rdlong	local02, fp
0fa8c     0C 4E 05 F1 | 	add	fp, #12
0fa90     A7 22 02 FB | 	rdlong	local03, fp
0fa94     0C 4E 85 F1 | 	sub	fp, #12
0fa98     11 21 52 F2 | 	cmps	local02, local03 wc
0fa9c     0F 1F A2 F1 | 	subx	local01, local01
0faa0     A7 1E 62 FC | 	wrlong	local01, fp
0faa4     F0 01 90 FD | 	jmp	#LR__1243
0faa8                 | LR__1236
0faa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0faa8     08 4E 05 F1 | 	add	fp, #8
0faac     A7 1E 02 FB | 	rdlong	local01, fp
0fab0     08 4E 85 F1 | 	sub	fp, #8
0fab4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fab8     14 4E 05 A1 |  if_e	add	fp, #20
0fabc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fac0     14 4E 85 A1 |  if_e	sub	fp, #20
0fac4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fac8     34 00 90 5D |  if_ne	jmp	#LR__1237
0facc     00 1E 06 F6 | 	mov	local01, #0
0fad0     A7 12 02 FB | 	rdlong	arg01, fp
0fad4     E0 B7 B0 FD | 	call	#__system___float_fromuns
0fad8     FD 12 02 F6 | 	mov	arg01, result1
0fadc     0C 4E 05 F1 | 	add	fp, #12
0fae0     A7 14 02 FB | 	rdlong	arg02, fp
0fae4     0C 4E 85 F1 | 	sub	fp, #12
0fae8     01 16 06 F6 | 	mov	arg03, #1
0faec     00 C0 B0 FD | 	call	#__system___float_cmp
0faf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0faf4     00 1E 26 C6 |  if_b	not	local01, #0
0faf8     A7 1E 62 FC | 	wrlong	local01, fp
0fafc     98 01 90 FD | 	jmp	#LR__1243
0fb00                 | LR__1237
0fb00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0fb00     08 4E 05 F1 | 	add	fp, #8
0fb04     A7 1E 02 FB | 	rdlong	local01, fp
0fb08     08 4E 85 F1 | 	sub	fp, #8
0fb0c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb10     14 4E 05 A1 |  if_e	add	fp, #20
0fb14     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb18     14 4E 85 A1 |  if_e	sub	fp, #20
0fb1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb20     20 00 90 5D |  if_ne	jmp	#LR__1238
0fb24     A7 20 02 FB | 	rdlong	local02, fp
0fb28     0C 4E 05 F1 | 	add	fp, #12
0fb2c     A7 22 02 FB | 	rdlong	local03, fp
0fb30     0C 4E 85 F1 | 	sub	fp, #12
0fb34     11 21 52 F2 | 	cmps	local02, local03 wc
0fb38     0F 1F A2 F1 | 	subx	local01, local01
0fb3c     A7 1E 62 FC | 	wrlong	local01, fp
0fb40     54 01 90 FD | 	jmp	#LR__1243
0fb44                 | LR__1238
0fb44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0fb44     08 4E 05 F1 | 	add	fp, #8
0fb48     A7 1E 02 FB | 	rdlong	local01, fp
0fb4c     08 4E 85 F1 | 	sub	fp, #8
0fb50     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb54     14 4E 05 A1 |  if_e	add	fp, #20
0fb58     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fb60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb64     20 00 90 5D |  if_ne	jmp	#LR__1239
0fb68     A7 20 02 FB | 	rdlong	local02, fp
0fb6c     0C 4E 05 F1 | 	add	fp, #12
0fb70     A7 22 02 FB | 	rdlong	local03, fp
0fb74     0C 4E 85 F1 | 	sub	fp, #12
0fb78     11 21 12 F2 | 	cmp	local02, local03 wc
0fb7c     0F 1F A2 F1 | 	subx	local01, local01
0fb80     A7 1E 62 FC | 	wrlong	local01, fp
0fb84     10 01 90 FD | 	jmp	#LR__1243
0fb88                 | LR__1239
0fb88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0fb88     08 4E 05 F1 | 	add	fp, #8
0fb8c     A7 1E 02 FB | 	rdlong	local01, fp
0fb90     08 4E 85 F1 | 	sub	fp, #8
0fb94     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb98     14 4E 05 A1 |  if_e	add	fp, #20
0fb9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fba0     14 4E 85 A1 |  if_e	sub	fp, #20
0fba4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fba8     30 00 90 5D |  if_ne	jmp	#LR__1240
0fbac     00 1E 06 F6 | 	mov	local01, #0
0fbb0     A7 12 02 FB | 	rdlong	arg01, fp
0fbb4     8C CD BF FD | 	call	#_convertstring
0fbb8     FD 12 02 F6 | 	mov	arg01, result1
0fbbc     0C 4E 05 F1 | 	add	fp, #12
0fbc0     A7 14 02 FB | 	rdlong	arg02, fp
0fbc4     0C 4E 85 F1 | 	sub	fp, #12
0fbc8     30 90 B0 FD | 	call	#__system___string_cmp
0fbcc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbd0     00 1E 26 C6 |  if_b	not	local01, #0
0fbd4     A7 1E 62 FC | 	wrlong	local01, fp
0fbd8     BC 00 90 FD | 	jmp	#LR__1243
0fbdc                 | LR__1240
0fbdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0fbdc     08 4E 05 F1 | 	add	fp, #8
0fbe0     A7 1E 02 FB | 	rdlong	local01, fp
0fbe4     08 4E 85 F1 | 	sub	fp, #8
0fbe8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fbec     14 4E 05 A1 |  if_e	add	fp, #20
0fbf0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbf4     14 4E 85 A1 |  if_e	sub	fp, #20
0fbf8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fbfc     34 00 90 5D |  if_ne	jmp	#LR__1241
0fc00     00 1E 06 F6 | 	mov	local01, #0
0fc04     A7 20 02 FB | 	rdlong	local02, fp
0fc08     0C 4E 05 F1 | 	add	fp, #12
0fc0c     A7 12 02 FB | 	rdlong	arg01, fp
0fc10     0C 4E 85 F1 | 	sub	fp, #12
0fc14     2C CD BF FD | 	call	#_convertstring
0fc18     FD 14 02 F6 | 	mov	arg02, result1
0fc1c     10 13 02 F6 | 	mov	arg01, local02
0fc20     D8 8F B0 FD | 	call	#__system___string_cmp
0fc24     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc28     00 1E 26 C6 |  if_b	not	local01, #0
0fc2c     A7 1E 62 FC | 	wrlong	local01, fp
0fc30     64 00 90 FD | 	jmp	#LR__1243
0fc34                 | LR__1241
0fc34                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0fc34     08 4E 05 F1 | 	add	fp, #8
0fc38     A7 1E 02 FB | 	rdlong	local01, fp
0fc3c     08 4E 85 F1 | 	sub	fp, #8
0fc40     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fc44     14 4E 05 A1 |  if_e	add	fp, #20
0fc48     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc4c     14 4E 85 A1 |  if_e	sub	fp, #20
0fc50     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fc54     3C 00 90 5D |  if_ne	jmp	#LR__1242
0fc58     00 1E 06 F6 | 	mov	local01, #0
0fc5c     A7 12 02 FB | 	rdlong	arg01, fp
0fc60     E0 CC BF FD | 	call	#_convertstring
0fc64     FD 20 02 F6 | 	mov	local02, result1
0fc68     0C 4E 05 F1 | 	add	fp, #12
0fc6c     A7 12 02 FB | 	rdlong	arg01, fp
0fc70     0C 4E 85 F1 | 	sub	fp, #12
0fc74     CC CC BF FD | 	call	#_convertstring
0fc78     FD 14 02 F6 | 	mov	arg02, result1
0fc7c     10 13 02 F6 | 	mov	arg01, local02
0fc80     78 8F B0 FD | 	call	#__system___string_cmp
0fc84     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc88     00 1E 26 C6 |  if_b	not	local01, #0
0fc8c     A7 1E 62 FC | 	wrlong	local01, fp
0fc90     04 00 90 FD | 	jmp	#LR__1243
0fc94                 | LR__1242
0fc94     A7 00 68 FC | 	wrlong	#0, fp
0fc98                 | LR__1243
0fc98     08 4E 05 F1 | 	add	fp, #8
0fc9c     A7 38 68 FC | 	wrlong	#28, fp
0fca0     08 4E 85 F1 | 	sub	fp, #8
0fca4     A7 12 02 F6 | 	mov	arg01, fp
0fca8     28 9C BF FD | 	call	#_push
0fcac     A7 F0 03 F6 | 	mov	ptra, fp
0fcb0     B2 00 A0 FD | 	call	#popregs_
0fcb4                 | _do_lt_ret
0fcb4     2D 00 64 FD | 	ret
0fcb8                 | 
0fcb8                 | ' 
0fcb8                 | ' sub do_ge
0fcb8                 | _do_ge
0fcb8     05 4A 05 F6 | 	mov	COUNT_, #5
0fcbc     A8 00 A0 FD | 	call	#pushregs_
0fcc0     18 F0 07 F1 | 	add	ptra, #24
0fcc4     74 9B BF FD | 	call	#_pop
0fcc8     FD 1E 02 F6 | 	mov	local01, result1
0fccc     FE 20 02 F6 | 	mov	local02, result2
0fcd0     FF 22 02 F6 | 	mov	local03, result3
0fcd4     0C 4E 05 F1 | 	add	fp, #12
0fcd8     A7 1E 62 FC | 	wrlong	local01, fp
0fcdc     04 4E 05 F1 | 	add	fp, #4
0fce0     A7 20 62 FC | 	wrlong	local02, fp
0fce4     04 4E 05 F1 | 	add	fp, #4
0fce8     A7 22 62 FC | 	wrlong	local03, fp
0fcec     14 4E 85 F1 | 	sub	fp, #20
0fcf0     48 9B BF FD | 	call	#_pop
0fcf4     FF 22 02 F6 | 	mov	local03, result3
0fcf8     A7 FA 61 FC | 	wrlong	result1, fp
0fcfc     04 4E 05 F1 | 	add	fp, #4
0fd00     A7 FC 61 FC | 	wrlong	result2, fp
0fd04     04 4E 05 F1 | 	add	fp, #4
0fd08     A7 22 62 FC | 	wrlong	local03, fp
0fd0c                 | ' t2=pop()
0fd0c                 | ' t1=pop()
0fd0c                 | ' 
0fd0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fd0c     08 4E 85 F1 | 	sub	fp, #8
0fd10     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd14     14 4E 05 A1 |  if_e	add	fp, #20
0fd18     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd20     12 23 02 A6 |  if_e	mov	local03, local04
0fd24     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd28     28 00 90 5D |  if_ne	jmp	#LR__1250
0fd2c     00 1E 06 F6 | 	mov	local01, #0
0fd30     A7 12 02 FB | 	rdlong	arg01, fp
0fd34     0C 4E 05 F1 | 	add	fp, #12
0fd38     A7 14 02 FB | 	rdlong	arg02, fp
0fd3c     0C 4E 85 F1 | 	sub	fp, #12
0fd40     B8 8E B0 FD | 	call	#__system___string_cmp
0fd44     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd48     00 1E 26 36 |  if_ae	not	local01, #0
0fd4c     A7 1E 62 FC | 	wrlong	local01, fp
0fd50     1C 04 90 FD | 	jmp	#LR__1263
0fd54                 | LR__1250
0fd54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fd54     08 4E 05 F1 | 	add	fp, #8
0fd58     A7 1E 02 FB | 	rdlong	local01, fp
0fd5c     08 4E 85 F1 | 	sub	fp, #8
0fd60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd64     14 4E 05 A1 |  if_e	add	fp, #20
0fd68     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd6c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd70     12 23 02 A6 |  if_e	mov	local03, local04
0fd74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fd78     2C 00 90 5D |  if_ne	jmp	#LR__1251
0fd7c     00 1E 06 F6 | 	mov	local01, #0
0fd80     A7 12 02 FB | 	rdlong	arg01, fp
0fd84     0C 4E 05 F1 | 	add	fp, #12
0fd88     A7 14 02 FB | 	rdlong	arg02, fp
0fd8c     0C 4E 85 F1 | 	sub	fp, #12
0fd90     01 16 66 F6 | 	neg	arg03, #1
0fd94     58 BD B0 FD | 	call	#__system___float_cmp
0fd98     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd9c     00 1E 26 36 |  if_ae	not	local01, #0
0fda0     A7 1E 62 FC | 	wrlong	local01, fp
0fda4     C8 03 90 FD | 	jmp	#LR__1263
0fda8                 | LR__1251
0fda8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 1E 02 FB | 	rdlong	local01, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fdb8     14 4E 05 A1 |  if_e	add	fp, #20
0fdbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdc4     12 23 02 A6 |  if_e	mov	local03, local04
0fdc8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fdcc     48 00 90 5D |  if_ne	jmp	#LR__1252
0fdd0     00 1E 06 F6 | 	mov	local01, #0
0fdd4     A7 20 02 FB | 	rdlong	local02, fp
0fdd8     0C 4E 05 F1 | 	add	fp, #12
0fddc     A7 12 02 FB | 	rdlong	arg01, fp
0fde0     0C 4E 85 F1 | 	sub	fp, #12
0fde4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fde8     1F 26 C6 C9 |  if_b	decod	local05, #31
0fdec     00 26 06 36 |  if_ae	mov	local05, #0
0fdf0     C4 B4 B0 FD | 	call	#__system___float_fromuns
0fdf4     13 FB 61 F5 | 	xor	result1, local05
0fdf8     FD 14 02 F6 | 	mov	arg02, result1
0fdfc     10 13 02 F6 | 	mov	arg01, local02
0fe00     01 16 66 F6 | 	neg	arg03, #1
0fe04     E8 BC B0 FD | 	call	#__system___float_cmp
0fe08     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe0c     00 1E 26 36 |  if_ae	not	local01, #0
0fe10     A7 1E 62 FC | 	wrlong	local01, fp
0fe14     58 03 90 FD | 	jmp	#LR__1263
0fe18                 | LR__1252
0fe18                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0fe18     08 4E 05 F1 | 	add	fp, #8
0fe1c     A7 1E 02 FB | 	rdlong	local01, fp
0fe20     08 4E 85 F1 | 	sub	fp, #8
0fe24     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fe28     14 4E 05 A1 |  if_e	add	fp, #20
0fe2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe30     14 4E 85 A1 |  if_e	sub	fp, #20
0fe34     12 23 02 A6 |  if_e	mov	local03, local04
0fe38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fe3c     38 00 90 5D |  if_ne	jmp	#LR__1253
0fe40     00 1E 06 F6 | 	mov	local01, #0
0fe44     A7 20 02 FB | 	rdlong	local02, fp
0fe48     0C 4E 05 F1 | 	add	fp, #12
0fe4c     A7 12 02 FB | 	rdlong	arg01, fp
0fe50     0C 4E 85 F1 | 	sub	fp, #12
0fe54     60 B4 B0 FD | 	call	#__system___float_fromuns
0fe58     FD 14 02 F6 | 	mov	arg02, result1
0fe5c     10 13 02 F6 | 	mov	arg01, local02
0fe60     01 16 66 F6 | 	neg	arg03, #1
0fe64     88 BC B0 FD | 	call	#__system___float_cmp
0fe68     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe6c     00 1E 26 36 |  if_ae	not	local01, #0
0fe70     A7 1E 62 FC | 	wrlong	local01, fp
0fe74     F8 02 90 FD | 	jmp	#LR__1263
0fe78                 | LR__1253
0fe78                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0fe78     08 4E 05 F1 | 	add	fp, #8
0fe7c     A7 1E 02 FB | 	rdlong	local01, fp
0fe80     08 4E 85 F1 | 	sub	fp, #8
0fe84     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe88     14 4E 05 A1 |  if_e	add	fp, #20
0fe8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe90     14 4E 85 A1 |  if_e	sub	fp, #20
0fe94     12 23 02 A6 |  if_e	mov	local03, local04
0fe98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe9c     44 00 90 5D |  if_ne	jmp	#LR__1254
0fea0     00 1E 06 F6 | 	mov	local01, #0
0fea4     A7 12 02 FB | 	rdlong	arg01, fp
0fea8     09 13 52 F6 | 	abs	arg01, arg01 wc
0feac     1F 26 C6 C9 |  if_b	decod	local05, #31
0feb0     00 26 06 36 |  if_ae	mov	local05, #0
0feb4     00 B4 B0 FD | 	call	#__system___float_fromuns
0feb8     13 FB 61 F5 | 	xor	result1, local05
0febc     FD 12 02 F6 | 	mov	arg01, result1
0fec0     0C 4E 05 F1 | 	add	fp, #12
0fec4     A7 14 02 FB | 	rdlong	arg02, fp
0fec8     0C 4E 85 F1 | 	sub	fp, #12
0fecc     01 16 66 F6 | 	neg	arg03, #1
0fed0     1C BC B0 FD | 	call	#__system___float_cmp
0fed4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fed8     00 1E 26 36 |  if_ae	not	local01, #0
0fedc     A7 1E 62 FC | 	wrlong	local01, fp
0fee0     8C 02 90 FD | 	jmp	#LR__1263
0fee4                 | LR__1254
0fee4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0fee4     08 4E 05 F1 | 	add	fp, #8
0fee8     A7 1E 02 FB | 	rdlong	local01, fp
0feec     08 4E 85 F1 | 	sub	fp, #8
0fef0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fef4     14 4E 05 A1 |  if_e	add	fp, #20
0fef8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fefc     14 4E 85 A1 |  if_e	sub	fp, #20
0ff00     12 23 02 A6 |  if_e	mov	local03, local04
0ff04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff08     24 00 90 5D |  if_ne	jmp	#LR__1255
0ff0c     00 1E 06 F6 | 	mov	local01, #0
0ff10     A7 20 02 FB | 	rdlong	local02, fp
0ff14     0C 4E 05 F1 | 	add	fp, #12
0ff18     A7 22 02 FB | 	rdlong	local03, fp
0ff1c     0C 4E 85 F1 | 	sub	fp, #12
0ff20     11 21 52 F2 | 	cmps	local02, local03 wc
0ff24     01 1E 66 36 |  if_ae	neg	local01, #1
0ff28     A7 1E 62 FC | 	wrlong	local01, fp
0ff2c     40 02 90 FD | 	jmp	#LR__1263
0ff30                 | LR__1255
0ff30                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0ff30     08 4E 05 F1 | 	add	fp, #8
0ff34     A7 1E 02 FB | 	rdlong	local01, fp
0ff38     08 4E 85 F1 | 	sub	fp, #8
0ff3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff40     14 4E 05 A1 |  if_e	add	fp, #20
0ff44     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff48     14 4E 85 A1 |  if_e	sub	fp, #20
0ff4c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0ff50     24 00 90 5D |  if_ne	jmp	#LR__1256
0ff54     00 1E 06 F6 | 	mov	local01, #0
0ff58     A7 20 02 FB | 	rdlong	local02, fp
0ff5c     0C 4E 05 F1 | 	add	fp, #12
0ff60     A7 22 02 FB | 	rdlong	local03, fp
0ff64     0C 4E 85 F1 | 	sub	fp, #12
0ff68     11 21 52 F2 | 	cmps	local02, local03 wc
0ff6c     01 1E 66 36 |  if_ae	neg	local01, #1
0ff70     A7 1E 62 FC | 	wrlong	local01, fp
0ff74     F8 01 90 FD | 	jmp	#LR__1263
0ff78                 | LR__1256
0ff78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0ff78     08 4E 05 F1 | 	add	fp, #8
0ff7c     A7 1E 02 FB | 	rdlong	local01, fp
0ff80     08 4E 85 F1 | 	sub	fp, #8
0ff84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff88     14 4E 05 A1 |  if_e	add	fp, #20
0ff8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff90     14 4E 85 A1 |  if_e	sub	fp, #20
0ff94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff98     34 00 90 5D |  if_ne	jmp	#LR__1257
0ff9c     00 1E 06 F6 | 	mov	local01, #0
0ffa0     A7 12 02 FB | 	rdlong	arg01, fp
0ffa4     10 B3 B0 FD | 	call	#__system___float_fromuns
0ffa8     FD 12 02 F6 | 	mov	arg01, result1
0ffac     0C 4E 05 F1 | 	add	fp, #12
0ffb0     A7 14 02 FB | 	rdlong	arg02, fp
0ffb4     0C 4E 85 F1 | 	sub	fp, #12
0ffb8     01 16 66 F6 | 	neg	arg03, #1
0ffbc     30 BB B0 FD | 	call	#__system___float_cmp
0ffc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffc4     00 1E 26 36 |  if_ae	not	local01, #0
0ffc8     A7 1E 62 FC | 	wrlong	local01, fp
0ffcc     A0 01 90 FD | 	jmp	#LR__1263
0ffd0                 | LR__1257
0ffd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0ffd0     08 4E 05 F1 | 	add	fp, #8
0ffd4     A7 1E 02 FB | 	rdlong	local01, fp
0ffd8     08 4E 85 F1 | 	sub	fp, #8
0ffdc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ffe0     14 4E 05 A1 |  if_e	add	fp, #20
0ffe4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ffe8     14 4E 85 A1 |  if_e	sub	fp, #20
0ffec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fff0     24 00 90 5D |  if_ne	jmp	#LR__1258
0fff4     00 1E 06 F6 | 	mov	local01, #0
0fff8     A7 20 02 FB | 	rdlong	local02, fp
0fffc     0C 4E 05 F1 | 	add	fp, #12
10000     A7 22 02 FB | 	rdlong	local03, fp
10004     0C 4E 85 F1 | 	sub	fp, #12
10008     11 21 52 F2 | 	cmps	local02, local03 wc
1000c     01 1E 66 36 |  if_ae	neg	local01, #1
10010     A7 1E 62 FC | 	wrlong	local01, fp
10014     58 01 90 FD | 	jmp	#LR__1263
10018                 | LR__1258
10018                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
10018     08 4E 05 F1 | 	add	fp, #8
1001c     A7 1E 02 FB | 	rdlong	local01, fp
10020     08 4E 85 F1 | 	sub	fp, #8
10024     1D 1E 0E F2 | 	cmp	local01, #29 wz
10028     14 4E 05 A1 |  if_e	add	fp, #20
1002c     A7 22 02 AB |  if_e	rdlong	local03, fp
10030     14 4E 85 A1 |  if_e	sub	fp, #20
10034     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10038     24 00 90 5D |  if_ne	jmp	#LR__1259
1003c     00 1E 06 F6 | 	mov	local01, #0
10040     A7 20 02 FB | 	rdlong	local02, fp
10044     0C 4E 05 F1 | 	add	fp, #12
10048     A7 22 02 FB | 	rdlong	local03, fp
1004c     0C 4E 85 F1 | 	sub	fp, #12
10050     11 21 12 F2 | 	cmp	local02, local03 wc
10054     01 1E 66 36 |  if_ae	neg	local01, #1
10058     A7 1E 62 FC | 	wrlong	local01, fp
1005c     10 01 90 FD | 	jmp	#LR__1263
10060                 | LR__1259
10060                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
10060     08 4E 05 F1 | 	add	fp, #8
10064     A7 1E 02 FB | 	rdlong	local01, fp
10068     08 4E 85 F1 | 	sub	fp, #8
1006c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10070     14 4E 05 A1 |  if_e	add	fp, #20
10074     A7 22 02 AB |  if_e	rdlong	local03, fp
10078     14 4E 85 A1 |  if_e	sub	fp, #20
1007c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10080     30 00 90 5D |  if_ne	jmp	#LR__1260
10084     00 1E 06 F6 | 	mov	local01, #0
10088     A7 12 02 FB | 	rdlong	arg01, fp
1008c     B4 C8 BF FD | 	call	#_convertstring
10090     FD 12 02 F6 | 	mov	arg01, result1
10094     0C 4E 05 F1 | 	add	fp, #12
10098     A7 14 02 FB | 	rdlong	arg02, fp
1009c     0C 4E 85 F1 | 	sub	fp, #12
100a0     58 8B B0 FD | 	call	#__system___string_cmp
100a4     00 FA 55 F2 | 	cmps	result1, #0 wc
100a8     00 1E 26 36 |  if_ae	not	local01, #0
100ac     A7 1E 62 FC | 	wrlong	local01, fp
100b0     BC 00 90 FD | 	jmp	#LR__1263
100b4                 | LR__1260
100b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
100b4     08 4E 05 F1 | 	add	fp, #8
100b8     A7 1E 02 FB | 	rdlong	local01, fp
100bc     08 4E 85 F1 | 	sub	fp, #8
100c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
100c4     14 4E 05 A1 |  if_e	add	fp, #20
100c8     A7 22 02 AB |  if_e	rdlong	local03, fp
100cc     14 4E 85 A1 |  if_e	sub	fp, #20
100d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
100d4     34 00 90 5D |  if_ne	jmp	#LR__1261
100d8     00 1E 06 F6 | 	mov	local01, #0
100dc     A7 20 02 FB | 	rdlong	local02, fp
100e0     0C 4E 05 F1 | 	add	fp, #12
100e4     A7 12 02 FB | 	rdlong	arg01, fp
100e8     0C 4E 85 F1 | 	sub	fp, #12
100ec     54 C8 BF FD | 	call	#_convertstring
100f0     FD 14 02 F6 | 	mov	arg02, result1
100f4     10 13 02 F6 | 	mov	arg01, local02
100f8     00 8B B0 FD | 	call	#__system___string_cmp
100fc     00 FA 55 F2 | 	cmps	result1, #0 wc
10100     00 1E 26 36 |  if_ae	not	local01, #0
10104     A7 1E 62 FC | 	wrlong	local01, fp
10108     64 00 90 FD | 	jmp	#LR__1263
1010c                 | LR__1261
1010c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1010c     08 4E 05 F1 | 	add	fp, #8
10110     A7 1E 02 FB | 	rdlong	local01, fp
10114     08 4E 85 F1 | 	sub	fp, #8
10118     2B 1E 0E F2 | 	cmp	local01, #43 wz
1011c     14 4E 05 A1 |  if_e	add	fp, #20
10120     A7 22 02 AB |  if_e	rdlong	local03, fp
10124     14 4E 85 A1 |  if_e	sub	fp, #20
10128     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1012c     3C 00 90 5D |  if_ne	jmp	#LR__1262
10130     00 1E 06 F6 | 	mov	local01, #0
10134     A7 12 02 FB | 	rdlong	arg01, fp
10138     08 C8 BF FD | 	call	#_convertstring
1013c     FD 20 02 F6 | 	mov	local02, result1
10140     0C 4E 05 F1 | 	add	fp, #12
10144     A7 12 02 FB | 	rdlong	arg01, fp
10148     0C 4E 85 F1 | 	sub	fp, #12
1014c     F4 C7 BF FD | 	call	#_convertstring
10150     FD 14 02 F6 | 	mov	arg02, result1
10154     10 13 02 F6 | 	mov	arg01, local02
10158     A0 8A B0 FD | 	call	#__system___string_cmp
1015c     00 FA 55 F2 | 	cmps	result1, #0 wc
10160     00 1E 26 36 |  if_ae	not	local01, #0
10164     A7 1E 62 FC | 	wrlong	local01, fp
10168     04 00 90 FD | 	jmp	#LR__1263
1016c                 | LR__1262
1016c     A7 00 68 FC | 	wrlong	#0, fp
10170                 | LR__1263
10170     08 4E 05 F1 | 	add	fp, #8
10174     A7 38 68 FC | 	wrlong	#28, fp
10178     08 4E 85 F1 | 	sub	fp, #8
1017c     A7 12 02 F6 | 	mov	arg01, fp
10180     50 97 BF FD | 	call	#_push
10184     A7 F0 03 F6 | 	mov	ptra, fp
10188     B2 00 A0 FD | 	call	#popregs_
1018c                 | _do_ge_ret
1018c     2D 00 64 FD | 	ret
10190                 | 
10190                 | ' 
10190                 | ' sub do_le
10190                 | _do_le
10190     05 4A 05 F6 | 	mov	COUNT_, #5
10194     A8 00 A0 FD | 	call	#pushregs_
10198     18 F0 07 F1 | 	add	ptra, #24
1019c     9C 96 BF FD | 	call	#_pop
101a0     FD 1E 02 F6 | 	mov	local01, result1
101a4     FE 20 02 F6 | 	mov	local02, result2
101a8     FF 22 02 F6 | 	mov	local03, result3
101ac     0C 4E 05 F1 | 	add	fp, #12
101b0     A7 1E 62 FC | 	wrlong	local01, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 20 62 FC | 	wrlong	local02, fp
101bc     04 4E 05 F1 | 	add	fp, #4
101c0     A7 22 62 FC | 	wrlong	local03, fp
101c4     14 4E 85 F1 | 	sub	fp, #20
101c8     70 96 BF FD | 	call	#_pop
101cc     FF 22 02 F6 | 	mov	local03, result3
101d0     A7 FA 61 FC | 	wrlong	result1, fp
101d4     04 4E 05 F1 | 	add	fp, #4
101d8     A7 FC 61 FC | 	wrlong	result2, fp
101dc     04 4E 05 F1 | 	add	fp, #4
101e0     A7 22 62 FC | 	wrlong	local03, fp
101e4                 | ' t2=pop()
101e4                 | ' t1=pop()
101e4                 | ' 
101e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
101e4     08 4E 85 F1 | 	sub	fp, #8
101e8     1F 22 0E F2 | 	cmp	local03, #31 wz
101ec     14 4E 05 A1 |  if_e	add	fp, #20
101f0     A7 24 02 AB |  if_e	rdlong	local04, fp
101f4     14 4E 85 A1 |  if_e	sub	fp, #20
101f8     12 23 02 A6 |  if_e	mov	local03, local04
101fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10200     28 00 90 5D |  if_ne	jmp	#LR__1270
10204     00 1E 06 F6 | 	mov	local01, #0
10208     A7 12 02 FB | 	rdlong	arg01, fp
1020c     0C 4E 05 F1 | 	add	fp, #12
10210     A7 14 02 FB | 	rdlong	arg02, fp
10214     0C 4E 85 F1 | 	sub	fp, #12
10218     E0 89 B0 FD | 	call	#__system___string_cmp
1021c     01 FA 55 F2 | 	cmps	result1, #1 wc
10220     00 1E 26 C6 |  if_b	not	local01, #0
10224     A7 1E 62 FC | 	wrlong	local01, fp
10228     1C 04 90 FD | 	jmp	#LR__1283
1022c                 | LR__1270
1022c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1022c     08 4E 05 F1 | 	add	fp, #8
10230     A7 1E 02 FB | 	rdlong	local01, fp
10234     08 4E 85 F1 | 	sub	fp, #8
10238     1E 1E 0E F2 | 	cmp	local01, #30 wz
1023c     14 4E 05 A1 |  if_e	add	fp, #20
10240     A7 24 02 AB |  if_e	rdlong	local04, fp
10244     14 4E 85 A1 |  if_e	sub	fp, #20
10248     12 23 02 A6 |  if_e	mov	local03, local04
1024c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10250     2C 00 90 5D |  if_ne	jmp	#LR__1271
10254     00 1E 06 F6 | 	mov	local01, #0
10258     A7 12 02 FB | 	rdlong	arg01, fp
1025c     0C 4E 05 F1 | 	add	fp, #12
10260     A7 14 02 FB | 	rdlong	arg02, fp
10264     0C 4E 85 F1 | 	sub	fp, #12
10268     01 16 06 F6 | 	mov	arg03, #1
1026c     80 B8 B0 FD | 	call	#__system___float_cmp
10270     01 FA 55 F2 | 	cmps	result1, #1 wc
10274     00 1E 26 C6 |  if_b	not	local01, #0
10278     A7 1E 62 FC | 	wrlong	local01, fp
1027c     C8 03 90 FD | 	jmp	#LR__1283
10280                 | LR__1271
10280                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
10280     08 4E 05 F1 | 	add	fp, #8
10284     A7 1E 02 FB | 	rdlong	local01, fp
10288     08 4E 85 F1 | 	sub	fp, #8
1028c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10290     14 4E 05 A1 |  if_e	add	fp, #20
10294     A7 24 02 AB |  if_e	rdlong	local04, fp
10298     14 4E 85 A1 |  if_e	sub	fp, #20
1029c     12 23 02 A6 |  if_e	mov	local03, local04
102a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
102a4     48 00 90 5D |  if_ne	jmp	#LR__1272
102a8     00 1E 06 F6 | 	mov	local01, #0
102ac     A7 20 02 FB | 	rdlong	local02, fp
102b0     0C 4E 05 F1 | 	add	fp, #12
102b4     A7 12 02 FB | 	rdlong	arg01, fp
102b8     0C 4E 85 F1 | 	sub	fp, #12
102bc     09 13 52 F6 | 	abs	arg01, arg01 wc
102c0     1F 26 C6 C9 |  if_b	decod	local05, #31
102c4     00 26 06 36 |  if_ae	mov	local05, #0
102c8     EC AF B0 FD | 	call	#__system___float_fromuns
102cc     13 FB 61 F5 | 	xor	result1, local05
102d0     FD 14 02 F6 | 	mov	arg02, result1
102d4     10 13 02 F6 | 	mov	arg01, local02
102d8     01 16 06 F6 | 	mov	arg03, #1
102dc     10 B8 B0 FD | 	call	#__system___float_cmp
102e0     01 FA 55 F2 | 	cmps	result1, #1 wc
102e4     00 1E 26 C6 |  if_b	not	local01, #0
102e8     A7 1E 62 FC | 	wrlong	local01, fp
102ec     58 03 90 FD | 	jmp	#LR__1283
102f0                 | LR__1272
102f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
102f0     08 4E 05 F1 | 	add	fp, #8
102f4     A7 1E 02 FB | 	rdlong	local01, fp
102f8     08 4E 85 F1 | 	sub	fp, #8
102fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
10300     14 4E 05 A1 |  if_e	add	fp, #20
10304     A7 24 02 AB |  if_e	rdlong	local04, fp
10308     14 4E 85 A1 |  if_e	sub	fp, #20
1030c     12 23 02 A6 |  if_e	mov	local03, local04
10310     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10314     38 00 90 5D |  if_ne	jmp	#LR__1273
10318     00 1E 06 F6 | 	mov	local01, #0
1031c     A7 20 02 FB | 	rdlong	local02, fp
10320     0C 4E 05 F1 | 	add	fp, #12
10324     A7 12 02 FB | 	rdlong	arg01, fp
10328     0C 4E 85 F1 | 	sub	fp, #12
1032c     88 AF B0 FD | 	call	#__system___float_fromuns
10330     FD 14 02 F6 | 	mov	arg02, result1
10334     10 13 02 F6 | 	mov	arg01, local02
10338     01 16 06 F6 | 	mov	arg03, #1
1033c     B0 B7 B0 FD | 	call	#__system___float_cmp
10340     01 FA 55 F2 | 	cmps	result1, #1 wc
10344     00 1E 26 C6 |  if_b	not	local01, #0
10348     A7 1E 62 FC | 	wrlong	local01, fp
1034c     F8 02 90 FD | 	jmp	#LR__1283
10350                 | LR__1273
10350                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
10350     08 4E 05 F1 | 	add	fp, #8
10354     A7 1E 02 FB | 	rdlong	local01, fp
10358     08 4E 85 F1 | 	sub	fp, #8
1035c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10360     14 4E 05 A1 |  if_e	add	fp, #20
10364     A7 24 02 AB |  if_e	rdlong	local04, fp
10368     14 4E 85 A1 |  if_e	sub	fp, #20
1036c     12 23 02 A6 |  if_e	mov	local03, local04
10370     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10374     44 00 90 5D |  if_ne	jmp	#LR__1274
10378     00 1E 06 F6 | 	mov	local01, #0
1037c     A7 12 02 FB | 	rdlong	arg01, fp
10380     09 13 52 F6 | 	abs	arg01, arg01 wc
10384     1F 26 C6 C9 |  if_b	decod	local05, #31
10388     00 26 06 36 |  if_ae	mov	local05, #0
1038c     28 AF B0 FD | 	call	#__system___float_fromuns
10390     13 FB 61 F5 | 	xor	result1, local05
10394     FD 12 02 F6 | 	mov	arg01, result1
10398     0C 4E 05 F1 | 	add	fp, #12
1039c     A7 14 02 FB | 	rdlong	arg02, fp
103a0     0C 4E 85 F1 | 	sub	fp, #12
103a4     01 16 06 F6 | 	mov	arg03, #1
103a8     44 B7 B0 FD | 	call	#__system___float_cmp
103ac     01 FA 55 F2 | 	cmps	result1, #1 wc
103b0     00 1E 26 C6 |  if_b	not	local01, #0
103b4     A7 1E 62 FC | 	wrlong	local01, fp
103b8     8C 02 90 FD | 	jmp	#LR__1283
103bc                 | LR__1274
103bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
103bc     08 4E 05 F1 | 	add	fp, #8
103c0     A7 1E 02 FB | 	rdlong	local01, fp
103c4     08 4E 85 F1 | 	sub	fp, #8
103c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
103cc     14 4E 05 A1 |  if_e	add	fp, #20
103d0     A7 24 02 AB |  if_e	rdlong	local04, fp
103d4     14 4E 85 A1 |  if_e	sub	fp, #20
103d8     12 23 02 A6 |  if_e	mov	local03, local04
103dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
103e0     24 00 90 5D |  if_ne	jmp	#LR__1275
103e4     00 1E 06 F6 | 	mov	local01, #0
103e8     A7 20 02 FB | 	rdlong	local02, fp
103ec     0C 4E 05 F1 | 	add	fp, #12
103f0     A7 22 02 FB | 	rdlong	local03, fp
103f4     0C 4E 85 F1 | 	sub	fp, #12
103f8     11 21 5A F2 | 	cmps	local02, local03 wcz
103fc     01 1E 66 E6 |  if_be	neg	local01, #1
10400     A7 1E 62 FC | 	wrlong	local01, fp
10404     40 02 90 FD | 	jmp	#LR__1283
10408                 | LR__1275
10408                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
10408     08 4E 05 F1 | 	add	fp, #8
1040c     A7 1E 02 FB | 	rdlong	local01, fp
10410     08 4E 85 F1 | 	sub	fp, #8
10414     1C 1E 0E F2 | 	cmp	local01, #28 wz
10418     14 4E 05 A1 |  if_e	add	fp, #20
1041c     A7 24 02 AB |  if_e	rdlong	local04, fp
10420     14 4E 85 A1 |  if_e	sub	fp, #20
10424     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10428     24 00 90 5D |  if_ne	jmp	#LR__1276
1042c     00 1E 06 F6 | 	mov	local01, #0
10430     A7 20 02 FB | 	rdlong	local02, fp
10434     0C 4E 05 F1 | 	add	fp, #12
10438     A7 22 02 FB | 	rdlong	local03, fp
1043c     0C 4E 85 F1 | 	sub	fp, #12
10440     11 21 5A F2 | 	cmps	local02, local03 wcz
10444     01 1E 66 E6 |  if_be	neg	local01, #1
10448     A7 1E 62 FC | 	wrlong	local01, fp
1044c     F8 01 90 FD | 	jmp	#LR__1283
10450                 | LR__1276
10450                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10450     08 4E 05 F1 | 	add	fp, #8
10454     A7 1E 02 FB | 	rdlong	local01, fp
10458     08 4E 85 F1 | 	sub	fp, #8
1045c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10460     14 4E 05 A1 |  if_e	add	fp, #20
10464     A7 22 02 AB |  if_e	rdlong	local03, fp
10468     14 4E 85 A1 |  if_e	sub	fp, #20
1046c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10470     34 00 90 5D |  if_ne	jmp	#LR__1277
10474     00 1E 06 F6 | 	mov	local01, #0
10478     A7 12 02 FB | 	rdlong	arg01, fp
1047c     38 AE B0 FD | 	call	#__system___float_fromuns
10480     FD 12 02 F6 | 	mov	arg01, result1
10484     0C 4E 05 F1 | 	add	fp, #12
10488     A7 14 02 FB | 	rdlong	arg02, fp
1048c     0C 4E 85 F1 | 	sub	fp, #12
10490     01 16 06 F6 | 	mov	arg03, #1
10494     58 B6 B0 FD | 	call	#__system___float_cmp
10498     01 FA 55 F2 | 	cmps	result1, #1 wc
1049c     00 1E 26 C6 |  if_b	not	local01, #0
104a0     A7 1E 62 FC | 	wrlong	local01, fp
104a4     A0 01 90 FD | 	jmp	#LR__1283
104a8                 | LR__1277
104a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
104a8     08 4E 05 F1 | 	add	fp, #8
104ac     A7 1E 02 FB | 	rdlong	local01, fp
104b0     08 4E 85 F1 | 	sub	fp, #8
104b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
104b8     14 4E 05 A1 |  if_e	add	fp, #20
104bc     A7 22 02 AB |  if_e	rdlong	local03, fp
104c0     14 4E 85 A1 |  if_e	sub	fp, #20
104c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
104c8     24 00 90 5D |  if_ne	jmp	#LR__1278
104cc     00 1E 06 F6 | 	mov	local01, #0
104d0     A7 20 02 FB | 	rdlong	local02, fp
104d4     0C 4E 05 F1 | 	add	fp, #12
104d8     A7 22 02 FB | 	rdlong	local03, fp
104dc     0C 4E 85 F1 | 	sub	fp, #12
104e0     11 21 5A F2 | 	cmps	local02, local03 wcz
104e4     01 1E 66 E6 |  if_be	neg	local01, #1
104e8     A7 1E 62 FC | 	wrlong	local01, fp
104ec     58 01 90 FD | 	jmp	#LR__1283
104f0                 | LR__1278
104f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
104f0     08 4E 05 F1 | 	add	fp, #8
104f4     A7 1E 02 FB | 	rdlong	local01, fp
104f8     08 4E 85 F1 | 	sub	fp, #8
104fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10500     14 4E 05 A1 |  if_e	add	fp, #20
10504     A7 22 02 AB |  if_e	rdlong	local03, fp
10508     14 4E 85 A1 |  if_e	sub	fp, #20
1050c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10510     24 00 90 5D |  if_ne	jmp	#LR__1279
10514     00 1E 06 F6 | 	mov	local01, #0
10518     A7 20 02 FB | 	rdlong	local02, fp
1051c     0C 4E 05 F1 | 	add	fp, #12
10520     A7 22 02 FB | 	rdlong	local03, fp
10524     0C 4E 85 F1 | 	sub	fp, #12
10528     11 21 1A F2 | 	cmp	local02, local03 wcz
1052c     01 1E 66 E6 |  if_be	neg	local01, #1
10530     A7 1E 62 FC | 	wrlong	local01, fp
10534     10 01 90 FD | 	jmp	#LR__1283
10538                 | LR__1279
10538                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
10538     08 4E 05 F1 | 	add	fp, #8
1053c     A7 1E 02 FB | 	rdlong	local01, fp
10540     08 4E 85 F1 | 	sub	fp, #8
10544     2B 1E 0E F2 | 	cmp	local01, #43 wz
10548     14 4E 05 A1 |  if_e	add	fp, #20
1054c     A7 22 02 AB |  if_e	rdlong	local03, fp
10550     14 4E 85 A1 |  if_e	sub	fp, #20
10554     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10558     30 00 90 5D |  if_ne	jmp	#LR__1280
1055c     00 1E 06 F6 | 	mov	local01, #0
10560     A7 12 02 FB | 	rdlong	arg01, fp
10564     DC C3 BF FD | 	call	#_convertstring
10568     FD 12 02 F6 | 	mov	arg01, result1
1056c     0C 4E 05 F1 | 	add	fp, #12
10570     A7 14 02 FB | 	rdlong	arg02, fp
10574     0C 4E 85 F1 | 	sub	fp, #12
10578     80 86 B0 FD | 	call	#__system___string_cmp
1057c     01 FA 55 F2 | 	cmps	result1, #1 wc
10580     00 1E 26 C6 |  if_b	not	local01, #0
10584     A7 1E 62 FC | 	wrlong	local01, fp
10588     BC 00 90 FD | 	jmp	#LR__1283
1058c                 | LR__1280
1058c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1058c     08 4E 05 F1 | 	add	fp, #8
10590     A7 1E 02 FB | 	rdlong	local01, fp
10594     08 4E 85 F1 | 	sub	fp, #8
10598     1F 1E 0E F2 | 	cmp	local01, #31 wz
1059c     14 4E 05 A1 |  if_e	add	fp, #20
105a0     A7 22 02 AB |  if_e	rdlong	local03, fp
105a4     14 4E 85 A1 |  if_e	sub	fp, #20
105a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
105ac     34 00 90 5D |  if_ne	jmp	#LR__1281
105b0     00 1E 06 F6 | 	mov	local01, #0
105b4     A7 20 02 FB | 	rdlong	local02, fp
105b8     0C 4E 05 F1 | 	add	fp, #12
105bc     A7 12 02 FB | 	rdlong	arg01, fp
105c0     0C 4E 85 F1 | 	sub	fp, #12
105c4     7C C3 BF FD | 	call	#_convertstring
105c8     FD 14 02 F6 | 	mov	arg02, result1
105cc     10 13 02 F6 | 	mov	arg01, local02
105d0     28 86 B0 FD | 	call	#__system___string_cmp
105d4     01 FA 55 F2 | 	cmps	result1, #1 wc
105d8     00 1E 26 C6 |  if_b	not	local01, #0
105dc     A7 1E 62 FC | 	wrlong	local01, fp
105e0     64 00 90 FD | 	jmp	#LR__1283
105e4                 | LR__1281
105e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
105e4     08 4E 05 F1 | 	add	fp, #8
105e8     A7 1E 02 FB | 	rdlong	local01, fp
105ec     08 4E 85 F1 | 	sub	fp, #8
105f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
105f4     14 4E 05 A1 |  if_e	add	fp, #20
105f8     A7 22 02 AB |  if_e	rdlong	local03, fp
105fc     14 4E 85 A1 |  if_e	sub	fp, #20
10600     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10604     3C 00 90 5D |  if_ne	jmp	#LR__1282
10608     00 1E 06 F6 | 	mov	local01, #0
1060c     A7 12 02 FB | 	rdlong	arg01, fp
10610     30 C3 BF FD | 	call	#_convertstring
10614     FD 20 02 F6 | 	mov	local02, result1
10618     0C 4E 05 F1 | 	add	fp, #12
1061c     A7 12 02 FB | 	rdlong	arg01, fp
10620     0C 4E 85 F1 | 	sub	fp, #12
10624     1C C3 BF FD | 	call	#_convertstring
10628     FD 14 02 F6 | 	mov	arg02, result1
1062c     10 13 02 F6 | 	mov	arg01, local02
10630     C8 85 B0 FD | 	call	#__system___string_cmp
10634     01 FA 55 F2 | 	cmps	result1, #1 wc
10638     00 1E 26 C6 |  if_b	not	local01, #0
1063c     A7 1E 62 FC | 	wrlong	local01, fp
10640     04 00 90 FD | 	jmp	#LR__1283
10644                 | LR__1282
10644     A7 00 68 FC | 	wrlong	#0, fp
10648                 | LR__1283
10648     08 4E 05 F1 | 	add	fp, #8
1064c     A7 38 68 FC | 	wrlong	#28, fp
10650     08 4E 85 F1 | 	sub	fp, #8
10654     A7 12 02 F6 | 	mov	arg01, fp
10658     78 92 BF FD | 	call	#_push
1065c     A7 F0 03 F6 | 	mov	ptra, fp
10660     B2 00 A0 FD | 	call	#popregs_
10664                 | _do_le_ret
10664     2D 00 64 FD | 	ret
10668                 | 
10668                 | ' 
10668                 | ' 
10668                 | ' sub do_ne
10668                 | _do_ne
10668     05 4A 05 F6 | 	mov	COUNT_, #5
1066c     A8 00 A0 FD | 	call	#pushregs_
10670     18 F0 07 F1 | 	add	ptra, #24
10674     C4 91 BF FD | 	call	#_pop
10678     FD 1E 02 F6 | 	mov	local01, result1
1067c     FE 20 02 F6 | 	mov	local02, result2
10680     FF 22 02 F6 | 	mov	local03, result3
10684     0C 4E 05 F1 | 	add	fp, #12
10688     A7 1E 62 FC | 	wrlong	local01, fp
1068c     04 4E 05 F1 | 	add	fp, #4
10690     A7 20 62 FC | 	wrlong	local02, fp
10694     04 4E 05 F1 | 	add	fp, #4
10698     A7 22 62 FC | 	wrlong	local03, fp
1069c     14 4E 85 F1 | 	sub	fp, #20
106a0     98 91 BF FD | 	call	#_pop
106a4     FF 22 02 F6 | 	mov	local03, result3
106a8     A7 FA 61 FC | 	wrlong	result1, fp
106ac     04 4E 05 F1 | 	add	fp, #4
106b0     A7 FC 61 FC | 	wrlong	result2, fp
106b4     04 4E 05 F1 | 	add	fp, #4
106b8     A7 22 62 FC | 	wrlong	local03, fp
106bc                 | ' t2=pop()
106bc                 | ' t1=pop()
106bc                 | ' 
106bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
106bc     08 4E 85 F1 | 	sub	fp, #8
106c0     1F 22 0E F2 | 	cmp	local03, #31 wz
106c4     14 4E 05 A1 |  if_e	add	fp, #20
106c8     A7 24 02 AB |  if_e	rdlong	local04, fp
106cc     14 4E 85 A1 |  if_e	sub	fp, #20
106d0     12 23 02 A6 |  if_e	mov	local03, local04
106d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
106d8     28 00 90 5D |  if_ne	jmp	#LR__1290
106dc     00 1E 06 F6 | 	mov	local01, #0
106e0     A7 12 02 FB | 	rdlong	arg01, fp
106e4     0C 4E 05 F1 | 	add	fp, #12
106e8     A7 14 02 FB | 	rdlong	arg02, fp
106ec     0C 4E 85 F1 | 	sub	fp, #12
106f0     08 85 B0 FD | 	call	#__system___string_cmp
106f4     00 FA 0D F2 | 	cmp	result1, #0 wz
106f8     00 1E 26 56 |  if_ne	not	local01, #0
106fc     A7 1E 62 FC | 	wrlong	local01, fp
10700     1C 04 90 FD | 	jmp	#LR__1303
10704                 | LR__1290
10704                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
10704     08 4E 05 F1 | 	add	fp, #8
10708     A7 1E 02 FB | 	rdlong	local01, fp
1070c     08 4E 85 F1 | 	sub	fp, #8
10710     1E 1E 0E F2 | 	cmp	local01, #30 wz
10714     14 4E 05 A1 |  if_e	add	fp, #20
10718     A7 24 02 AB |  if_e	rdlong	local04, fp
1071c     14 4E 85 A1 |  if_e	sub	fp, #20
10720     12 23 02 A6 |  if_e	mov	local03, local04
10724     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10728     2C 00 90 5D |  if_ne	jmp	#LR__1291
1072c     00 1E 06 F6 | 	mov	local01, #0
10730     A7 12 02 FB | 	rdlong	arg01, fp
10734     0C 4E 05 F1 | 	add	fp, #12
10738     A7 14 02 FB | 	rdlong	arg02, fp
1073c     0C 4E 85 F1 | 	sub	fp, #12
10740     01 16 06 F6 | 	mov	arg03, #1
10744     A8 B3 B0 FD | 	call	#__system___float_cmp
10748     00 FA 0D F2 | 	cmp	result1, #0 wz
1074c     00 1E 26 56 |  if_ne	not	local01, #0
10750     A7 1E 62 FC | 	wrlong	local01, fp
10754     C8 03 90 FD | 	jmp	#LR__1303
10758                 | LR__1291
10758                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
10758     08 4E 05 F1 | 	add	fp, #8
1075c     A7 1E 02 FB | 	rdlong	local01, fp
10760     08 4E 85 F1 | 	sub	fp, #8
10764     1E 1E 0E F2 | 	cmp	local01, #30 wz
10768     14 4E 05 A1 |  if_e	add	fp, #20
1076c     A7 24 02 AB |  if_e	rdlong	local04, fp
10770     14 4E 85 A1 |  if_e	sub	fp, #20
10774     12 23 02 A6 |  if_e	mov	local03, local04
10778     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1077c     48 00 90 5D |  if_ne	jmp	#LR__1292
10780     00 1E 06 F6 | 	mov	local01, #0
10784     A7 20 02 FB | 	rdlong	local02, fp
10788     0C 4E 05 F1 | 	add	fp, #12
1078c     A7 12 02 FB | 	rdlong	arg01, fp
10790     0C 4E 85 F1 | 	sub	fp, #12
10794     09 13 52 F6 | 	abs	arg01, arg01 wc
10798     1F 26 C6 C9 |  if_b	decod	local05, #31
1079c     00 26 06 36 |  if_ae	mov	local05, #0
107a0     14 AB B0 FD | 	call	#__system___float_fromuns
107a4     13 FB 61 F5 | 	xor	result1, local05
107a8     FD 14 02 F6 | 	mov	arg02, result1
107ac     10 13 02 F6 | 	mov	arg01, local02
107b0     01 16 06 F6 | 	mov	arg03, #1
107b4     38 B3 B0 FD | 	call	#__system___float_cmp
107b8     00 FA 0D F2 | 	cmp	result1, #0 wz
107bc     00 1E 26 56 |  if_ne	not	local01, #0
107c0     A7 1E 62 FC | 	wrlong	local01, fp
107c4     58 03 90 FD | 	jmp	#LR__1303
107c8                 | LR__1292
107c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
107c8     08 4E 05 F1 | 	add	fp, #8
107cc     A7 1E 02 FB | 	rdlong	local01, fp
107d0     08 4E 85 F1 | 	sub	fp, #8
107d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
107d8     14 4E 05 A1 |  if_e	add	fp, #20
107dc     A7 24 02 AB |  if_e	rdlong	local04, fp
107e0     14 4E 85 A1 |  if_e	sub	fp, #20
107e4     12 23 02 A6 |  if_e	mov	local03, local04
107e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
107ec     38 00 90 5D |  if_ne	jmp	#LR__1293
107f0     00 1E 06 F6 | 	mov	local01, #0
107f4     A7 20 02 FB | 	rdlong	local02, fp
107f8     0C 4E 05 F1 | 	add	fp, #12
107fc     A7 12 02 FB | 	rdlong	arg01, fp
10800     0C 4E 85 F1 | 	sub	fp, #12
10804     B0 AA B0 FD | 	call	#__system___float_fromuns
10808     FD 14 02 F6 | 	mov	arg02, result1
1080c     10 13 02 F6 | 	mov	arg01, local02
10810     01 16 06 F6 | 	mov	arg03, #1
10814     D8 B2 B0 FD | 	call	#__system___float_cmp
10818     00 FA 0D F2 | 	cmp	result1, #0 wz
1081c     00 1E 26 56 |  if_ne	not	local01, #0
10820     A7 1E 62 FC | 	wrlong	local01, fp
10824     F8 02 90 FD | 	jmp	#LR__1303
10828                 | LR__1293
10828                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
10828     08 4E 05 F1 | 	add	fp, #8
1082c     A7 1E 02 FB | 	rdlong	local01, fp
10830     08 4E 85 F1 | 	sub	fp, #8
10834     1C 1E 0E F2 | 	cmp	local01, #28 wz
10838     14 4E 05 A1 |  if_e	add	fp, #20
1083c     A7 24 02 AB |  if_e	rdlong	local04, fp
10840     14 4E 85 A1 |  if_e	sub	fp, #20
10844     12 23 02 A6 |  if_e	mov	local03, local04
10848     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1084c     44 00 90 5D |  if_ne	jmp	#LR__1294
10850     00 1E 06 F6 | 	mov	local01, #0
10854     A7 12 02 FB | 	rdlong	arg01, fp
10858     09 13 52 F6 | 	abs	arg01, arg01 wc
1085c     1F 26 C6 C9 |  if_b	decod	local05, #31
10860     00 26 06 36 |  if_ae	mov	local05, #0
10864     50 AA B0 FD | 	call	#__system___float_fromuns
10868     13 FB 61 F5 | 	xor	result1, local05
1086c     FD 12 02 F6 | 	mov	arg01, result1
10870     0C 4E 05 F1 | 	add	fp, #12
10874     A7 14 02 FB | 	rdlong	arg02, fp
10878     0C 4E 85 F1 | 	sub	fp, #12
1087c     01 16 06 F6 | 	mov	arg03, #1
10880     6C B2 B0 FD | 	call	#__system___float_cmp
10884     00 FA 0D F2 | 	cmp	result1, #0 wz
10888     00 1E 26 56 |  if_ne	not	local01, #0
1088c     A7 1E 62 FC | 	wrlong	local01, fp
10890     8C 02 90 FD | 	jmp	#LR__1303
10894                 | LR__1294
10894                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10894     08 4E 05 F1 | 	add	fp, #8
10898     A7 1E 02 FB | 	rdlong	local01, fp
1089c     08 4E 85 F1 | 	sub	fp, #8
108a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
108a4     14 4E 05 A1 |  if_e	add	fp, #20
108a8     A7 24 02 AB |  if_e	rdlong	local04, fp
108ac     14 4E 85 A1 |  if_e	sub	fp, #20
108b0     12 23 02 A6 |  if_e	mov	local03, local04
108b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
108b8     24 00 90 5D |  if_ne	jmp	#LR__1295
108bc     00 1E 06 F6 | 	mov	local01, #0
108c0     A7 20 02 FB | 	rdlong	local02, fp
108c4     0C 4E 05 F1 | 	add	fp, #12
108c8     A7 22 02 FB | 	rdlong	local03, fp
108cc     0C 4E 85 F1 | 	sub	fp, #12
108d0     11 21 0A F2 | 	cmp	local02, local03 wz
108d4     01 1E 66 56 |  if_ne	neg	local01, #1
108d8     A7 1E 62 FC | 	wrlong	local01, fp
108dc     40 02 90 FD | 	jmp	#LR__1303
108e0                 | LR__1295
108e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
108e0     08 4E 05 F1 | 	add	fp, #8
108e4     A7 1E 02 FB | 	rdlong	local01, fp
108e8     08 4E 85 F1 | 	sub	fp, #8
108ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
108f0     14 4E 05 A1 |  if_e	add	fp, #20
108f4     A7 24 02 AB |  if_e	rdlong	local04, fp
108f8     14 4E 85 A1 |  if_e	sub	fp, #20
108fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10900     24 00 90 5D |  if_ne	jmp	#LR__1296
10904     00 1E 06 F6 | 	mov	local01, #0
10908     A7 20 02 FB | 	rdlong	local02, fp
1090c     0C 4E 05 F1 | 	add	fp, #12
10910     A7 22 02 FB | 	rdlong	local03, fp
10914     0C 4E 85 F1 | 	sub	fp, #12
10918     11 21 0A F2 | 	cmp	local02, local03 wz
1091c     01 1E 66 56 |  if_ne	neg	local01, #1
10920     A7 1E 62 FC | 	wrlong	local01, fp
10924     F8 01 90 FD | 	jmp	#LR__1303
10928                 | LR__1296
10928                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
10928     08 4E 05 F1 | 	add	fp, #8
1092c     A7 1E 02 FB | 	rdlong	local01, fp
10930     08 4E 85 F1 | 	sub	fp, #8
10934     1D 1E 0E F2 | 	cmp	local01, #29 wz
10938     14 4E 05 A1 |  if_e	add	fp, #20
1093c     A7 22 02 AB |  if_e	rdlong	local03, fp
10940     14 4E 85 A1 |  if_e	sub	fp, #20
10944     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10948     34 00 90 5D |  if_ne	jmp	#LR__1297
1094c     00 1E 06 F6 | 	mov	local01, #0
10950     A7 12 02 FB | 	rdlong	arg01, fp
10954     60 A9 B0 FD | 	call	#__system___float_fromuns
10958     FD 12 02 F6 | 	mov	arg01, result1
1095c     0C 4E 05 F1 | 	add	fp, #12
10960     A7 14 02 FB | 	rdlong	arg02, fp
10964     0C 4E 85 F1 | 	sub	fp, #12
10968     01 16 06 F6 | 	mov	arg03, #1
1096c     80 B1 B0 FD | 	call	#__system___float_cmp
10970     00 FA 0D F2 | 	cmp	result1, #0 wz
10974     00 1E 26 56 |  if_ne	not	local01, #0
10978     A7 1E 62 FC | 	wrlong	local01, fp
1097c     A0 01 90 FD | 	jmp	#LR__1303
10980                 | LR__1297
10980                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10980     08 4E 05 F1 | 	add	fp, #8
10984     A7 1E 02 FB | 	rdlong	local01, fp
10988     08 4E 85 F1 | 	sub	fp, #8
1098c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10990     14 4E 05 A1 |  if_e	add	fp, #20
10994     A7 22 02 AB |  if_e	rdlong	local03, fp
10998     14 4E 85 A1 |  if_e	sub	fp, #20
1099c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
109a0     24 00 90 5D |  if_ne	jmp	#LR__1298
109a4     00 1E 06 F6 | 	mov	local01, #0
109a8     A7 20 02 FB | 	rdlong	local02, fp
109ac     0C 4E 05 F1 | 	add	fp, #12
109b0     A7 22 02 FB | 	rdlong	local03, fp
109b4     0C 4E 85 F1 | 	sub	fp, #12
109b8     11 21 0A F2 | 	cmp	local02, local03 wz
109bc     01 1E 66 56 |  if_ne	neg	local01, #1
109c0     A7 1E 62 FC | 	wrlong	local01, fp
109c4     58 01 90 FD | 	jmp	#LR__1303
109c8                 | LR__1298
109c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
109c8     08 4E 05 F1 | 	add	fp, #8
109cc     A7 1E 02 FB | 	rdlong	local01, fp
109d0     08 4E 85 F1 | 	sub	fp, #8
109d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
109d8     14 4E 05 A1 |  if_e	add	fp, #20
109dc     A7 22 02 AB |  if_e	rdlong	local03, fp
109e0     14 4E 85 A1 |  if_e	sub	fp, #20
109e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
109e8     24 00 90 5D |  if_ne	jmp	#LR__1299
109ec     00 1E 06 F6 | 	mov	local01, #0
109f0     A7 20 02 FB | 	rdlong	local02, fp
109f4     0C 4E 05 F1 | 	add	fp, #12
109f8     A7 22 02 FB | 	rdlong	local03, fp
109fc     0C 4E 85 F1 | 	sub	fp, #12
10a00     11 21 0A F2 | 	cmp	local02, local03 wz
10a04     01 1E 66 56 |  if_ne	neg	local01, #1
10a08     A7 1E 62 FC | 	wrlong	local01, fp
10a0c     10 01 90 FD | 	jmp	#LR__1303
10a10                 | LR__1299
10a10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10a10     08 4E 05 F1 | 	add	fp, #8
10a14     A7 1E 02 FB | 	rdlong	local01, fp
10a18     08 4E 85 F1 | 	sub	fp, #8
10a1c     2B 1E 0E F2 | 	cmp	local01, #43 wz
10a20     14 4E 05 A1 |  if_e	add	fp, #20
10a24     A7 22 02 AB |  if_e	rdlong	local03, fp
10a28     14 4E 85 A1 |  if_e	sub	fp, #20
10a2c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10a30     30 00 90 5D |  if_ne	jmp	#LR__1300
10a34     00 1E 06 F6 | 	mov	local01, #0
10a38     A7 12 02 FB | 	rdlong	arg01, fp
10a3c     04 BF BF FD | 	call	#_convertstring
10a40     FD 12 02 F6 | 	mov	arg01, result1
10a44     0C 4E 05 F1 | 	add	fp, #12
10a48     A7 14 02 FB | 	rdlong	arg02, fp
10a4c     0C 4E 85 F1 | 	sub	fp, #12
10a50     A8 81 B0 FD | 	call	#__system___string_cmp
10a54     00 FA 0D F2 | 	cmp	result1, #0 wz
10a58     00 1E 26 56 |  if_ne	not	local01, #0
10a5c     A7 1E 62 FC | 	wrlong	local01, fp
10a60     BC 00 90 FD | 	jmp	#LR__1303
10a64                 | LR__1300
10a64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10a64     08 4E 05 F1 | 	add	fp, #8
10a68     A7 1E 02 FB | 	rdlong	local01, fp
10a6c     08 4E 85 F1 | 	sub	fp, #8
10a70     1F 1E 0E F2 | 	cmp	local01, #31 wz
10a74     14 4E 05 A1 |  if_e	add	fp, #20
10a78     A7 22 02 AB |  if_e	rdlong	local03, fp
10a7c     14 4E 85 A1 |  if_e	sub	fp, #20
10a80     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10a84     34 00 90 5D |  if_ne	jmp	#LR__1301
10a88     00 1E 06 F6 | 	mov	local01, #0
10a8c     A7 20 02 FB | 	rdlong	local02, fp
10a90     0C 4E 05 F1 | 	add	fp, #12
10a94     A7 12 02 FB | 	rdlong	arg01, fp
10a98     0C 4E 85 F1 | 	sub	fp, #12
10a9c     A4 BE BF FD | 	call	#_convertstring
10aa0     FD 14 02 F6 | 	mov	arg02, result1
10aa4     10 13 02 F6 | 	mov	arg01, local02
10aa8     50 81 B0 FD | 	call	#__system___string_cmp
10aac     00 FA 0D F2 | 	cmp	result1, #0 wz
10ab0     00 1E 26 56 |  if_ne	not	local01, #0
10ab4     A7 1E 62 FC | 	wrlong	local01, fp
10ab8     64 00 90 FD | 	jmp	#LR__1303
10abc                 | LR__1301
10abc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
10abc     08 4E 05 F1 | 	add	fp, #8
10ac0     A7 1E 02 FB | 	rdlong	local01, fp
10ac4     08 4E 85 F1 | 	sub	fp, #8
10ac8     2B 1E 0E F2 | 	cmp	local01, #43 wz
10acc     14 4E 05 A1 |  if_e	add	fp, #20
10ad0     A7 22 02 AB |  if_e	rdlong	local03, fp
10ad4     14 4E 85 A1 |  if_e	sub	fp, #20
10ad8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10adc     3C 00 90 5D |  if_ne	jmp	#LR__1302
10ae0     00 1E 06 F6 | 	mov	local01, #0
10ae4     A7 12 02 FB | 	rdlong	arg01, fp
10ae8     58 BE BF FD | 	call	#_convertstring
10aec     FD 20 02 F6 | 	mov	local02, result1
10af0     0C 4E 05 F1 | 	add	fp, #12
10af4     A7 12 02 FB | 	rdlong	arg01, fp
10af8     0C 4E 85 F1 | 	sub	fp, #12
10afc     44 BE BF FD | 	call	#_convertstring
10b00     FD 14 02 F6 | 	mov	arg02, result1
10b04     10 13 02 F6 | 	mov	arg01, local02
10b08     F0 80 B0 FD | 	call	#__system___string_cmp
10b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
10b10     00 1E 26 56 |  if_ne	not	local01, #0
10b14     A7 1E 62 FC | 	wrlong	local01, fp
10b18     04 00 90 FD | 	jmp	#LR__1303
10b1c                 | LR__1302
10b1c     A7 00 68 FC | 	wrlong	#0, fp
10b20                 | LR__1303
10b20     08 4E 05 F1 | 	add	fp, #8
10b24     A7 38 68 FC | 	wrlong	#28, fp
10b28     08 4E 85 F1 | 	sub	fp, #8
10b2c     A7 12 02 F6 | 	mov	arg01, fp
10b30     A0 8D BF FD | 	call	#_push
10b34     A7 F0 03 F6 | 	mov	ptra, fp
10b38     B2 00 A0 FD | 	call	#popregs_
10b3c                 | _do_ne_ret
10b3c     2D 00 64 FD | 	ret
10b40                 | 
10b40                 | ' 
10b40                 | ' 
10b40                 | ' 
10b40                 | ' ' -------------------   convert a variable on the top of stack to integer
10b40                 | ' 
10b40                 | ' sub do_converttoint
10b40                 | _do_converttoint
10b40     02 4A 05 F6 | 	mov	COUNT_, #2
10b44     A8 00 A0 FD | 	call	#pushregs_
10b48     18 F0 07 F1 | 	add	ptra, #24
10b4c     EC 8C BF FD | 	call	#_pop
10b50     FE 1E 02 F6 | 	mov	local01, result2
10b54     FF 20 02 F6 | 	mov	local02, result3
10b58     A7 FA 61 FC | 	wrlong	result1, fp
10b5c     04 4E 05 F1 | 	add	fp, #4
10b60     A7 1E 62 FC | 	wrlong	local01, fp
10b64     04 4E 05 F1 | 	add	fp, #4
10b68     A7 20 62 FC | 	wrlong	local02, fp
10b6c                 | ' t1=pop() 
10b6c                 | ' select case t1.result_type
10b6c     08 4E 85 F1 | 	sub	fp, #8
10b70     1C 20 0E F2 | 	cmp	local02, #28 wz
10b74     2C 00 90 AD |  if_e	jmp	#LR__1310
10b78     1D 20 0E F2 | 	cmp	local02, #29 wz
10b7c     40 00 90 AD |  if_e	jmp	#LR__1311
10b80     1E 20 0E F2 | 	cmp	local02, #30 wz
10b84     54 00 90 AD |  if_e	jmp	#LR__1312
10b88     1F 20 0E F2 | 	cmp	local02, #31 wz
10b8c     70 00 90 AD |  if_e	jmp	#LR__1313
10b90     2B 20 0E F2 | 	cmp	local02, #43 wz
10b94     94 00 90 AD |  if_e	jmp	#LR__1314
10b98     FF 20 0E F2 | 	cmp	local02, #255 wz
10b9c     C0 00 90 AD |  if_e	jmp	#LR__1315
10ba0     DC 00 90 FD | 	jmp	#LR__1316
10ba4                 | LR__1310
10ba4     A7 20 02 FB | 	rdlong	local02, fp
10ba8     0C 4E 05 F1 | 	add	fp, #12
10bac     A7 20 62 FC | 	wrlong	local02, fp
10bb0     04 4E 05 F1 | 	add	fp, #4
10bb4     A7 38 68 FC | 	wrlong	#28, fp
10bb8     10 4E 85 F1 | 	sub	fp, #16
10bbc     D4 00 90 FD | 	jmp	#LR__1317
10bc0                 | LR__1311
10bc0     A7 20 02 FB | 	rdlong	local02, fp
10bc4     0C 4E 05 F1 | 	add	fp, #12
10bc8     A7 20 62 FC | 	wrlong	local02, fp
10bcc     04 4E 05 F1 | 	add	fp, #4
10bd0     A7 38 68 FC | 	wrlong	#28, fp
10bd4     10 4E 85 F1 | 	sub	fp, #16
10bd8     B8 00 90 FD | 	jmp	#LR__1317
10bdc                 | LR__1312
10bdc     A7 12 02 FB | 	rdlong	arg01, fp
10be0     01 14 06 F6 | 	mov	arg02, #1
10be4     9C AF B0 FD | 	call	#__system___float_tointeger
10be8     0C 4E 05 F1 | 	add	fp, #12
10bec     A7 FA 61 FC | 	wrlong	result1, fp
10bf0     04 4E 05 F1 | 	add	fp, #4
10bf4     A7 38 68 FC | 	wrlong	#28, fp
10bf8     10 4E 85 F1 | 	sub	fp, #16
10bfc     94 00 90 FD | 	jmp	#LR__1317
10c00                 | LR__1313
10c00     A7 12 02 FB | 	rdlong	arg01, fp
10c04     9C B2 B0 FD | 	call	#__system____builtin_atof
10c08     FD 12 02 F6 | 	mov	arg01, result1
10c0c     00 14 06 F6 | 	mov	arg02, #0
10c10     70 AF B0 FD | 	call	#__system___float_tointeger
10c14     0C 4E 05 F1 | 	add	fp, #12
10c18     A7 FA 61 FC | 	wrlong	result1, fp
10c1c     04 4E 05 F1 | 	add	fp, #4
10c20     A7 38 68 FC | 	wrlong	#28, fp
10c24     10 4E 85 F1 | 	sub	fp, #16
10c28     68 00 90 FD | 	jmp	#LR__1317
10c2c                 | LR__1314
10c2c     A7 12 02 FB | 	rdlong	arg01, fp
10c30     10 BD BF FD | 	call	#_convertstring
10c34     FD 12 02 F6 | 	mov	arg01, result1
10c38     68 B2 B0 FD | 	call	#__system____builtin_atof
10c3c     FD 12 02 F6 | 	mov	arg01, result1
10c40     00 14 06 F6 | 	mov	arg02, #0
10c44     3C AF B0 FD | 	call	#__system___float_tointeger
10c48     0C 4E 05 F1 | 	add	fp, #12
10c4c     A7 FA 61 FC | 	wrlong	result1, fp
10c50     04 4E 05 F1 | 	add	fp, #4
10c54     A7 38 68 FC | 	wrlong	#28, fp
10c58     10 4E 85 F1 | 	sub	fp, #16
10c5c     34 00 90 FD | 	jmp	#LR__1317
10c60                 | LR__1315
10c60     0C 4E 05 F1 | 	add	fp, #12
10c64     A7 00 68 FC | 	wrlong	#0, fp
10c68     0C 4E 85 F1 | 	sub	fp, #12
10c6c     A7 20 02 FB | 	rdlong	local02, fp
10c70     10 4E 05 F1 | 	add	fp, #16
10c74     A7 20 62 FC | 	wrlong	local02, fp
10c78     10 4E 85 F1 | 	sub	fp, #16
10c7c     14 00 90 FD | 	jmp	#LR__1317
10c80                 | LR__1316
10c80     0C 4E 05 F1 | 	add	fp, #12
10c84     A7 00 68 FC | 	wrlong	#0, fp
10c88     04 4E 05 F1 | 	add	fp, #4
10c8c     A7 02 68 FC | 	wrlong	#1, fp
10c90     10 4E 85 F1 | 	sub	fp, #16
10c94                 | LR__1317
10c94     0C 4E 05 F1 | 	add	fp, #12
10c98     A7 20 02 FB | 	rdlong	local02, fp
10c9c     0C 4E 85 F1 | 	sub	fp, #12
10ca0     A7 20 62 FC | 	wrlong	local02, fp
10ca4     10 4E 05 F1 | 	add	fp, #16
10ca8     A7 20 02 FB | 	rdlong	local02, fp
10cac     08 4E 85 F1 | 	sub	fp, #8
10cb0     A7 20 62 FC | 	wrlong	local02, fp
10cb4     08 4E 85 F1 | 	sub	fp, #8
10cb8     A7 12 02 F6 | 	mov	arg01, fp
10cbc     14 8C BF FD | 	call	#_push
10cc0     A7 F0 03 F6 | 	mov	ptra, fp
10cc4     B2 00 A0 FD | 	call	#popregs_
10cc8                 | _do_converttoint_ret
10cc8     2D 00 64 FD | 	ret
10ccc                 | 
10ccc                 | ' 
10ccc                 | ' function converttoint (t1 as expr_result) as integer
10ccc                 | _converttoint
10ccc     02 4A 05 F6 | 	mov	COUNT_, #2
10cd0     A8 00 A0 FD | 	call	#pushregs_
10cd4     09 1F 02 F6 | 	mov	local01, arg01
10cd8                 | ' 
10cd8                 | ' select case t1.result_type
10cd8     08 1E 06 F1 | 	add	local01, #8
10cdc     0F 21 02 FB | 	rdlong	local02, local01
10ce0     08 1E 86 F1 | 	sub	local01, #8
10ce4     1C 20 0E F2 | 	cmp	local02, #28 wz
10ce8     24 00 90 AD |  if_e	jmp	#LR__1320
10cec     1D 20 0E F2 | 	cmp	local02, #29 wz
10cf0     24 00 90 AD |  if_e	jmp	#LR__1321
10cf4     1E 20 0E F2 | 	cmp	local02, #30 wz
10cf8     24 00 90 AD |  if_e	jmp	#LR__1322
10cfc     1F 20 0E F2 | 	cmp	local02, #31 wz
10d00     2C 00 90 AD |  if_e	jmp	#LR__1323
10d04     2B 20 0E F2 | 	cmp	local02, #43 wz
10d08     3C 00 90 AD |  if_e	jmp	#LR__1324
10d0c     58 00 90 FD | 	jmp	#LR__1325
10d10                 | LR__1320
10d10     0F FB 01 FB | 	rdlong	result1, local01
10d14     54 00 90 FD | 	jmp	#LR__1326
10d18                 | LR__1321
10d18     0F FB 01 FB | 	rdlong	result1, local01
10d1c     4C 00 90 FD | 	jmp	#LR__1326
10d20                 | LR__1322
10d20     0F 13 02 FB | 	rdlong	arg01, local01
10d24     01 14 06 F6 | 	mov	arg02, #1
10d28     58 AE B0 FD | 	call	#__system___float_tointeger
10d2c     3C 00 90 FD | 	jmp	#LR__1326
10d30                 | LR__1323
10d30     0F 13 02 FB | 	rdlong	arg01, local01
10d34     6C B1 B0 FD | 	call	#__system____builtin_atof
10d38     FD 12 02 F6 | 	mov	arg01, result1
10d3c     00 14 06 F6 | 	mov	arg02, #0
10d40     40 AE B0 FD | 	call	#__system___float_tointeger
10d44     24 00 90 FD | 	jmp	#LR__1326
10d48                 | LR__1324
10d48     0F 13 02 FB | 	rdlong	arg01, local01
10d4c     F4 BB BF FD | 	call	#_convertstring
10d50     FD 12 02 F6 | 	mov	arg01, result1
10d54     4C B1 B0 FD | 	call	#__system____builtin_atof
10d58     FD 12 02 F6 | 	mov	arg01, result1
10d5c     00 14 06 F6 | 	mov	arg02, #0
10d60     20 AE B0 FD | 	call	#__system___float_tointeger
10d64     04 00 90 FD | 	jmp	#LR__1326
10d68                 | LR__1325
10d68     00 FA 05 F6 | 	mov	result1, #0
10d6c                 | LR__1326
10d6c     A7 F0 03 F6 | 	mov	ptra, fp
10d70     B2 00 A0 FD | 	call	#popregs_
10d74                 | _converttoint_ret
10d74     2D 00 64 FD | 	ret
10d78                 | 
10d78                 | ' 
10d78                 | ' function converttofloat (t1 as expr_result) as single
10d78                 | _converttofloat
10d78     03 4A 05 F6 | 	mov	COUNT_, #3
10d7c     A8 00 A0 FD | 	call	#pushregs_
10d80     09 1F 02 F6 | 	mov	local01, arg01
10d84                 | ' 
10d84                 | ' select case t1.result_type
10d84     08 1E 06 F1 | 	add	local01, #8
10d88     0F 21 02 FB | 	rdlong	local02, local01
10d8c     08 1E 86 F1 | 	sub	local01, #8
10d90     1C 20 0E F2 | 	cmp	local02, #28 wz
10d94     24 00 90 AD |  if_e	jmp	#LR__1330
10d98     1D 20 0E F2 | 	cmp	local02, #29 wz
10d9c     38 00 90 AD |  if_e	jmp	#LR__1331
10da0     1E 20 0E F2 | 	cmp	local02, #30 wz
10da4     3C 00 90 AD |  if_e	jmp	#LR__1332
10da8     1F 20 0E F2 | 	cmp	local02, #31 wz
10dac     3C 00 90 AD |  if_e	jmp	#LR__1333
10db0     2B 20 0E F2 | 	cmp	local02, #43 wz
10db4     40 00 90 AD |  if_e	jmp	#LR__1334
10db8     50 00 90 FD | 	jmp	#LR__1335
10dbc                 | LR__1330
10dbc     0F 13 02 FB | 	rdlong	arg01, local01
10dc0     09 13 52 F6 | 	abs	arg01, arg01 wc
10dc4     1F 22 C6 C9 |  if_b	decod	local03, #31
10dc8     00 22 06 36 |  if_ae	mov	local03, #0
10dcc     E8 A4 B0 FD | 	call	#__system___float_fromuns
10dd0     11 FB 61 F5 | 	xor	result1, local03
10dd4     38 00 90 FD | 	jmp	#LR__1336
10dd8                 | LR__1331
10dd8     0F 13 02 FB | 	rdlong	arg01, local01
10ddc     D8 A4 B0 FD | 	call	#__system___float_fromuns
10de0     2C 00 90 FD | 	jmp	#LR__1336
10de4                 | LR__1332
10de4     0F FB 01 FB | 	rdlong	result1, local01
10de8     24 00 90 FD | 	jmp	#LR__1336
10dec                 | LR__1333
10dec     0F 13 02 FB | 	rdlong	arg01, local01
10df0     B0 B0 B0 FD | 	call	#__system____builtin_atof
10df4     18 00 90 FD | 	jmp	#LR__1336
10df8                 | LR__1334
10df8     0F 13 02 FB | 	rdlong	arg01, local01
10dfc     44 BB BF FD | 	call	#_convertstring
10e00     FD 12 02 F6 | 	mov	arg01, result1
10e04     9C B0 B0 FD | 	call	#__system____builtin_atof
10e08     04 00 90 FD | 	jmp	#LR__1336
10e0c                 | LR__1335
10e0c     00 FA 05 F6 | 	mov	result1, #0
10e10                 | LR__1336
10e10     A7 F0 03 F6 | 	mov	ptra, fp
10e14     B2 00 A0 FD | 	call	#popregs_
10e18                 | _converttofloat_ret
10e18     2D 00 64 FD | 	ret
10e1c                 | 
10e1c                 | ' 
10e1c                 | ' sub do_rnd
10e1c                 | _do_rnd
10e1c     01 4A 05 F6 | 	mov	COUNT_, #1
10e20     A8 00 A0 FD | 	call	#pushregs_
10e24     10 F0 07 F1 | 	add	ptra, #16
10e28     69 00 00 FF 
10e2c     54 E4 05 F1 | 	add	objptr, ##53844
10e30     F2 1E 02 FB | 	rdlong	local01, objptr
10e34     0F 17 02 F6 | 	mov	arg03, local01
10e38     01 16 66 F0 | 	shl	arg03, #1
10e3c     0F 17 02 F1 | 	add	arg03, local01
10e40     02 16 66 F0 | 	shl	arg03, #2
10e44     03 00 00 FF 
10e48     04 E4 85 F1 | 	sub	objptr, ##1540
10e4c     F2 16 02 F1 | 	add	arg03, objptr
10e50     0B 17 02 FB | 	rdlong	arg03, arg03
10e54     0C 4E 05 F1 | 	add	fp, #12
10e58     A7 16 62 FC | 	wrlong	arg03, fp
10e5c                 | ' 
10e5c                 | ' numpar=compiledline(lineptr_e).result.uresult
10e5c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10e5c     0C 4E 85 F1 | 	sub	fp, #12
10e60     02 16 16 F2 | 	cmp	arg03, #2 wc
10e64     66 00 00 FF 
10e68     50 E4 85 F1 | 	sub	objptr, ##52304
10e6c     3C 00 90 CD |  if_b	jmp	#LR__1340
10e70     00 12 06 F6 | 	mov	arg01, #0
10e74     5C D6 B0 FD | 	call	#__system___getiolock_0417
10e78     FD 12 02 F6 | 	mov	arg01, result1
10e7c     54 7D B0 FD | 	call	#__system___lockmem
10e80     43 01 00 FF 
10e84     3B 14 06 F6 | 	mov	arg02, ##@LR__4620
10e88     00 12 06 F6 | 	mov	arg01, #0
10e8c     00 16 06 F6 | 	mov	arg03, #0
10e90     30 8A B0 FD | 	call	#__system___basic_print_string
10e94     00 12 06 F6 | 	mov	arg01, #0
10e98     38 D6 B0 FD | 	call	#__system___getiolock_0417
10e9c     FD 00 68 FC | 	wrlong	#0, result1
10ea0     27 12 06 F6 | 	mov	arg01, #39
10ea4     08 48 B0 FD | 	call	#_printerror
10ea8     2C 01 90 FD | 	jmp	#LR__1347
10eac                 | LR__1340
10eac                 | ' if numpar=0 then
10eac     0C 4E 05 F1 | 	add	fp, #12
10eb0     A7 FE 09 FB | 	rdlong	result3, fp wz
10eb4     0C 4E 85 F1 | 	sub	fp, #12
10eb8     20 00 90 5D |  if_ne	jmp	#LR__1341
10ebc     08 4E 05 F1 | 	add	fp, #8
10ec0     A7 3A 68 FC | 	wrlong	#29, fp
10ec4     08 4E 85 F1 | 	sub	fp, #8
10ec8     1B FA 61 FD | 	getrnd	result1
10ecc     A7 FA 61 FC | 	wrlong	result1, fp
10ed0     A7 12 02 F6 | 	mov	arg01, fp
10ed4     FC 89 BF FD | 	call	#_push
10ed8     FC 00 90 FD | 	jmp	#LR__1346
10edc                 | LR__1341
10edc     5C 89 BF FD | 	call	#_pop
10ee0     A7 FA 61 FC | 	wrlong	result1, fp
10ee4     04 4E 05 F1 | 	add	fp, #4
10ee8     A7 FC 61 FC | 	wrlong	result2, fp
10eec     04 4E 05 F1 | 	add	fp, #4
10ef0     A7 FE 61 FC | 	wrlong	result3, fp
10ef4                 | '   t1=pop()
10ef4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
10ef4     08 4E 85 F1 | 	sub	fp, #8
10ef8     1C FE 0D F2 | 	cmp	result3, #28 wz
10efc     08 4E 05 51 |  if_ne	add	fp, #8
10f00     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10f04     08 4E 85 51 |  if_ne	sub	fp, #8
10f08     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10f0c     2C 00 90 5D |  if_ne	jmp	#LR__1342
10f10     1B FA 61 FD | 	getrnd	result1
10f14     A7 1E 02 FB | 	rdlong	local01, fp
10f18     0F FB 11 FD | 	qdiv	result1, local01
10f1c     A7 12 02 F6 | 	mov	arg01, fp
10f20     19 1E 62 FD | 	getqy	local01
10f24     A7 1E 62 FC | 	wrlong	local01, fp
10f28     08 4E 05 F1 | 	add	fp, #8
10f2c     A7 3A 68 FC | 	wrlong	#29, fp
10f30     08 4E 85 F1 | 	sub	fp, #8
10f34     9C 89 BF FD | 	call	#_push
10f38     9C 00 90 FD | 	jmp	#LR__1345
10f3c                 | LR__1342
10f3c     08 4E 05 F1 | 	add	fp, #8
10f40     A7 1E 02 FB | 	rdlong	local01, fp
10f44     08 4E 85 F1 | 	sub	fp, #8
10f48     1E 1E 0E F2 | 	cmp	local01, #30 wz
10f4c     48 00 90 5D |  if_ne	jmp	#LR__1343
10f50     A7 12 02 FB | 	rdlong	arg01, fp
10f54     00 C0 24 FF 
10f58     00 14 06 F6 | 	mov	arg02, ##1233125376
10f5c     60 A9 B0 FD | 	call	#__system___float_div
10f60     FD 1E 02 F6 | 	mov	local01, result1
10f64     1B 12 62 FD | 	getrnd	arg01
10f68     74 13 06 F4 | 	bitl	arg01, #372
10f6c     48 A3 B0 FD | 	call	#__system___float_fromuns
10f70     FD 14 02 F6 | 	mov	arg02, result1
10f74     0F 13 02 F6 | 	mov	arg01, local01
10f78     40 A7 B0 FD | 	call	#__system___float_mul
10f7c     A7 FA 61 FC | 	wrlong	result1, fp
10f80     08 4E 05 F1 | 	add	fp, #8
10f84     A7 3C 68 FC | 	wrlong	#30, fp
10f88     08 4E 85 F1 | 	sub	fp, #8
10f8c     A7 12 02 F6 | 	mov	arg01, fp
10f90     40 89 BF FD | 	call	#_push
10f94     40 00 90 FD | 	jmp	#LR__1344
10f98                 | LR__1343
10f98                 | '     print "rnd: "; : printerror(40) 
10f98     00 12 06 F6 | 	mov	arg01, #0
10f9c     34 D5 B0 FD | 	call	#__system___getiolock_0417
10fa0     FD 12 02 F6 | 	mov	arg01, result1
10fa4     2C 7C B0 FD | 	call	#__system___lockmem
10fa8     43 01 00 FF 
10fac     41 14 06 F6 | 	mov	arg02, ##@LR__4621
10fb0     00 12 06 F6 | 	mov	arg01, #0
10fb4     00 16 06 F6 | 	mov	arg03, #0
10fb8     08 89 B0 FD | 	call	#__system___basic_print_string
10fbc     00 12 06 F6 | 	mov	arg01, #0
10fc0     10 D5 B0 FD | 	call	#__system___getiolock_0417
10fc4     FD 00 68 FC | 	wrlong	#0, result1
10fc8     28 12 06 F6 | 	mov	arg01, #40
10fcc     E0 46 B0 FD | 	call	#_printerror
10fd0     A7 12 02 F6 | 	mov	arg01, fp
10fd4     FC 88 BF FD | 	call	#_push
10fd8                 | LR__1344
10fd8                 | LR__1345
10fd8                 | LR__1346
10fd8                 | LR__1347
10fd8     A7 F0 03 F6 | 	mov	ptra, fp
10fdc     B2 00 A0 FD | 	call	#popregs_
10fe0                 | _do_rnd_ret
10fe0     2D 00 64 FD | 	ret
10fe4                 | 
10fe4                 | ' 
10fe4                 | ' sub do_sin
10fe4                 | _do_sin
10fe4     01 4A 05 F6 | 	mov	COUNT_, #1
10fe8     A8 00 A0 FD | 	call	#pushregs_
10fec     10 F0 07 F1 | 	add	ptra, #16
10ff0     69 00 00 FF 
10ff4     54 E4 05 F1 | 	add	objptr, ##53844
10ff8     F2 1E 02 FB | 	rdlong	local01, objptr
10ffc     0F 17 02 F6 | 	mov	arg03, local01
11000     01 16 66 F0 | 	shl	arg03, #1
11004     0F 17 02 F1 | 	add	arg03, local01
11008     02 16 66 F0 | 	shl	arg03, #2
1100c     03 00 00 FF 
11010     04 E4 85 F1 | 	sub	objptr, ##1540
11014     F2 16 02 F1 | 	add	arg03, objptr
11018     0B 17 02 FB | 	rdlong	arg03, arg03
1101c     0C 4E 05 F1 | 	add	fp, #12
11020     A7 16 62 FC | 	wrlong	arg03, fp
11024                 | ' 
11024                 | ' numpar=compiledline(lineptr_e).result.uresult
11024                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
11024     0C 4E 85 F1 | 	sub	fp, #12
11028     02 16 16 F2 | 	cmp	arg03, #2 wc
1102c     66 00 00 FF 
11030     50 E4 85 F1 | 	sub	objptr, ##52304
11034     0C 4E 05 C1 |  if_b	add	fp, #12
11038     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1103c     0C 4E 85 C1 |  if_b	sub	fp, #12
11040     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
11044     00 12 06 F6 | 	mov	arg01, #0
11048     88 D4 B0 FD | 	call	#__system___getiolock_0417
1104c     FD 12 02 F6 | 	mov	arg01, result1
11050     80 7B B0 FD | 	call	#__system___lockmem
11054     43 01 00 FF 
11058     47 14 06 F6 | 	mov	arg02, ##@LR__4622
1105c     00 12 06 F6 | 	mov	arg01, #0
11060     00 16 06 F6 | 	mov	arg03, #0
11064     5C 88 B0 FD | 	call	#__system___basic_print_string
11068     00 12 06 F6 | 	mov	arg01, #0
1106c     64 D4 B0 FD | 	call	#__system___getiolock_0417
11070     FD 00 68 FC | 	wrlong	#0, result1
11074     27 12 06 F6 | 	mov	arg01, #39
11078     34 46 B0 FD | 	call	#_printerror
1107c     68 00 90 FD | 	jmp	#LR__1351
11080                 | LR__1350
11080     B8 87 BF FD | 	call	#_pop
11084     A7 FA 61 FC | 	wrlong	result1, fp
11088     04 4E 05 F1 | 	add	fp, #4
1108c     A7 FC 61 FC | 	wrlong	result2, fp
11090     04 4E 05 F1 | 	add	fp, #4
11094     A7 FE 61 FC | 	wrlong	result3, fp
11098     08 4E 85 F1 | 	sub	fp, #8
1109c     87 24 20 FF 
110a0     DB 1F 06 F6 | 	mov	local01, ##1078530011
110a4     A7 12 02 F6 | 	mov	arg01, fp
110a8     CC FC BF FD | 	call	#_converttofloat
110ac     FD 14 02 F6 | 	mov	arg02, result1
110b0     0F 13 02 F6 | 	mov	arg01, local01
110b4     04 A6 B0 FD | 	call	#__system___float_mul
110b8     FD 12 02 F6 | 	mov	arg01, result1
110bc     00 9A 21 FF 
110c0     00 14 06 F6 | 	mov	arg02, ##1127481344
110c4     F8 A7 B0 FD | 	call	#__system___float_div
110c8     FD 12 02 F6 | 	mov	arg01, result1
110cc     28 AF B0 FD | 	call	#__system____builtin_sinf
110d0     A7 FA 61 FC | 	wrlong	result1, fp
110d4     08 4E 05 F1 | 	add	fp, #8
110d8     A7 3C 68 FC | 	wrlong	#30, fp
110dc     08 4E 85 F1 | 	sub	fp, #8
110e0     A7 12 02 F6 | 	mov	arg01, fp
110e4     EC 87 BF FD | 	call	#_push
110e8                 | LR__1351
110e8     A7 F0 03 F6 | 	mov	ptra, fp
110ec     B2 00 A0 FD | 	call	#popregs_
110f0                 | _do_sin_ret
110f0     2D 00 64 FD | 	ret
110f4                 | 
110f4                 | ' 
110f4                 | ' sub do_cos
110f4                 | _do_cos
110f4     01 4A 05 F6 | 	mov	COUNT_, #1
110f8     A8 00 A0 FD | 	call	#pushregs_
110fc     10 F0 07 F1 | 	add	ptra, #16
11100     69 00 00 FF 
11104     54 E4 05 F1 | 	add	objptr, ##53844
11108     F2 1E 02 FB | 	rdlong	local01, objptr
1110c     0F 17 02 F6 | 	mov	arg03, local01
11110     01 16 66 F0 | 	shl	arg03, #1
11114     0F 17 02 F1 | 	add	arg03, local01
11118     02 16 66 F0 | 	shl	arg03, #2
1111c     03 00 00 FF 
11120     04 E4 85 F1 | 	sub	objptr, ##1540
11124     F2 16 02 F1 | 	add	arg03, objptr
11128     0B 17 02 FB | 	rdlong	arg03, arg03
1112c     0C 4E 05 F1 | 	add	fp, #12
11130     A7 16 62 FC | 	wrlong	arg03, fp
11134                 | ' 
11134                 | ' numpar=compiledline(lineptr_e).result.uresult
11134                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
11134     0C 4E 85 F1 | 	sub	fp, #12
11138     02 16 16 F2 | 	cmp	arg03, #2 wc
1113c     66 00 00 FF 
11140     50 E4 85 F1 | 	sub	objptr, ##52304
11144     0C 4E 05 C1 |  if_b	add	fp, #12
11148     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1114c     0C 4E 85 C1 |  if_b	sub	fp, #12
11150     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
11154     00 12 06 F6 | 	mov	arg01, #0
11158     78 D3 B0 FD | 	call	#__system___getiolock_0417
1115c     FD 12 02 F6 | 	mov	arg01, result1
11160     70 7A B0 FD | 	call	#__system___lockmem
11164     43 01 00 FF 
11168     4D 14 06 F6 | 	mov	arg02, ##@LR__4623
1116c     00 12 06 F6 | 	mov	arg01, #0
11170     00 16 06 F6 | 	mov	arg03, #0
11174     4C 87 B0 FD | 	call	#__system___basic_print_string
11178     00 12 06 F6 | 	mov	arg01, #0
1117c     54 D3 B0 FD | 	call	#__system___getiolock_0417
11180     FD 00 68 FC | 	wrlong	#0, result1
11184     27 12 06 F6 | 	mov	arg01, #39
11188     24 45 B0 FD | 	call	#_printerror
1118c     7C 00 90 FD | 	jmp	#LR__1361
11190                 | LR__1360
11190     A8 86 BF FD | 	call	#_pop
11194     A7 FA 61 FC | 	wrlong	result1, fp
11198     04 4E 05 F1 | 	add	fp, #4
1119c     A7 FC 61 FC | 	wrlong	result2, fp
111a0     04 4E 05 F1 | 	add	fp, #4
111a4     A7 FE 61 FC | 	wrlong	result3, fp
111a8     08 4E 85 F1 | 	sub	fp, #8
111ac     87 24 20 FF 
111b0     DB 1F 06 F6 | 	mov	local01, ##1078530011
111b4     A7 12 02 F6 | 	mov	arg01, fp
111b8     BC FB BF FD | 	call	#_converttofloat
111bc     FD 14 02 F6 | 	mov	arg02, result1
111c0     0F 13 02 F6 | 	mov	arg01, local01
111c4     F4 A4 B0 FD | 	call	#__system___float_mul
111c8     FD 12 02 F6 | 	mov	arg01, result1
111cc     00 9A 21 FF 
111d0     00 14 06 F6 | 	mov	arg02, ##1127481344
111d4     E8 A6 B0 FD | 	call	#__system___float_div
111d8     FD 14 02 F6 | 	mov	arg02, result1
111dc     87 E4 1F FF 
111e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
111e4     1F 14 E6 F4 | 	bitnot	arg02, #31
111e8     00 A1 B0 FD | 	call	#__system___float_add
111ec     FD 12 02 F6 | 	mov	arg01, result1
111f0     04 AE B0 FD | 	call	#__system____builtin_sinf
111f4     A7 FA 61 FC | 	wrlong	result1, fp
111f8     08 4E 05 F1 | 	add	fp, #8
111fc     A7 3C 68 FC | 	wrlong	#30, fp
11200     08 4E 85 F1 | 	sub	fp, #8
11204     A7 12 02 F6 | 	mov	arg01, fp
11208     C8 86 BF FD | 	call	#_push
1120c                 | LR__1361
1120c     A7 F0 03 F6 | 	mov	ptra, fp
11210     B2 00 A0 FD | 	call	#popregs_
11214                 | _do_cos_ret
11214     2D 00 64 FD | 	ret
11218                 | 
11218                 | ' 
11218                 | ' sub do_tan
11218                 | _do_tan
11218     01 4A 05 F6 | 	mov	COUNT_, #1
1121c     A8 00 A0 FD | 	call	#pushregs_
11220     10 F0 07 F1 | 	add	ptra, #16
11224     69 00 00 FF 
11228     54 E4 05 F1 | 	add	objptr, ##53844
1122c     F2 1E 02 FB | 	rdlong	local01, objptr
11230     0F 17 02 F6 | 	mov	arg03, local01
11234     01 16 66 F0 | 	shl	arg03, #1
11238     0F 17 02 F1 | 	add	arg03, local01
1123c     02 16 66 F0 | 	shl	arg03, #2
11240     03 00 00 FF 
11244     04 E4 85 F1 | 	sub	objptr, ##1540
11248     F2 16 02 F1 | 	add	arg03, objptr
1124c     0B 17 02 FB | 	rdlong	arg03, arg03
11250     0C 4E 05 F1 | 	add	fp, #12
11254     A7 16 62 FC | 	wrlong	arg03, fp
11258                 | ' 
11258                 | ' numpar=compiledline(lineptr_e).result.uresult
11258                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
11258     0C 4E 85 F1 | 	sub	fp, #12
1125c     02 16 16 F2 | 	cmp	arg03, #2 wc
11260     66 00 00 FF 
11264     50 E4 85 F1 | 	sub	objptr, ##52304
11268     0C 4E 05 C1 |  if_b	add	fp, #12
1126c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11270     0C 4E 85 C1 |  if_b	sub	fp, #12
11274     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
11278     00 12 06 F6 | 	mov	arg01, #0
1127c     54 D2 B0 FD | 	call	#__system___getiolock_0417
11280     FD 12 02 F6 | 	mov	arg01, result1
11284     4C 79 B0 FD | 	call	#__system___lockmem
11288     43 01 00 FF 
1128c     53 14 06 F6 | 	mov	arg02, ##@LR__4624
11290     00 12 06 F6 | 	mov	arg01, #0
11294     00 16 06 F6 | 	mov	arg03, #0
11298     28 86 B0 FD | 	call	#__system___basic_print_string
1129c     00 12 06 F6 | 	mov	arg01, #0
112a0     30 D2 B0 FD | 	call	#__system___getiolock_0417
112a4     FD 00 68 FC | 	wrlong	#0, result1
112a8     27 12 06 F6 | 	mov	arg01, #39
112ac     00 44 B0 FD | 	call	#_printerror
112b0     68 00 90 FD | 	jmp	#LR__1371
112b4                 | LR__1370
112b4     84 85 BF FD | 	call	#_pop
112b8     A7 FA 61 FC | 	wrlong	result1, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 FC 61 FC | 	wrlong	result2, fp
112c4     04 4E 05 F1 | 	add	fp, #4
112c8     A7 FE 61 FC | 	wrlong	result3, fp
112cc     08 4E 85 F1 | 	sub	fp, #8
112d0     87 24 20 FF 
112d4     DB 1F 06 F6 | 	mov	local01, ##1078530011
112d8     A7 12 02 F6 | 	mov	arg01, fp
112dc     98 FA BF FD | 	call	#_converttofloat
112e0     FD 14 02 F6 | 	mov	arg02, result1
112e4     0F 13 02 F6 | 	mov	arg01, local01
112e8     D0 A3 B0 FD | 	call	#__system___float_mul
112ec     FD 12 02 F6 | 	mov	arg01, result1
112f0     00 9A 21 FF 
112f4     00 14 06 F6 | 	mov	arg02, ##1127481344
112f8     C4 A5 B0 FD | 	call	#__system___float_div
112fc     FD 12 02 F6 | 	mov	arg01, result1
11300     40 AE B0 FD | 	call	#__system____builtin_tanf
11304     A7 FA 61 FC | 	wrlong	result1, fp
11308     08 4E 05 F1 | 	add	fp, #8
1130c     A7 3C 68 FC | 	wrlong	#30, fp
11310     08 4E 85 F1 | 	sub	fp, #8
11314     A7 12 02 F6 | 	mov	arg01, fp
11318     B8 85 BF FD | 	call	#_push
1131c                 | LR__1371
1131c     A7 F0 03 F6 | 	mov	ptra, fp
11320     B2 00 A0 FD | 	call	#popregs_
11324                 | _do_tan_ret
11324     2D 00 64 FD | 	ret
11328                 | 
11328                 | ' 
11328                 | ' sub do_asin
11328                 | _do_asin
11328     01 4A 05 F6 | 	mov	COUNT_, #1
1132c     A8 00 A0 FD | 	call	#pushregs_
11330     10 F0 07 F1 | 	add	ptra, #16
11334     69 00 00 FF 
11338     54 E4 05 F1 | 	add	objptr, ##53844
1133c     F2 1E 02 FB | 	rdlong	local01, objptr
11340     0F 17 02 F6 | 	mov	arg03, local01
11344     01 16 66 F0 | 	shl	arg03, #1
11348     0F 17 02 F1 | 	add	arg03, local01
1134c     02 16 66 F0 | 	shl	arg03, #2
11350     03 00 00 FF 
11354     04 E4 85 F1 | 	sub	objptr, ##1540
11358     F2 16 02 F1 | 	add	arg03, objptr
1135c     0B 17 02 FB | 	rdlong	arg03, arg03
11360     0C 4E 05 F1 | 	add	fp, #12
11364     A7 16 62 FC | 	wrlong	arg03, fp
11368                 | ' 
11368                 | ' numpar=compiledline(lineptr_e).result.uresult
11368                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
11368     0C 4E 85 F1 | 	sub	fp, #12
1136c     02 16 16 F2 | 	cmp	arg03, #2 wc
11370     66 00 00 FF 
11374     50 E4 85 F1 | 	sub	objptr, ##52304
11378     0C 4E 05 C1 |  if_b	add	fp, #12
1137c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11380     0C 4E 85 C1 |  if_b	sub	fp, #12
11384     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
11388     00 12 06 F6 | 	mov	arg01, #0
1138c     44 D1 B0 FD | 	call	#__system___getiolock_0417
11390     FD 12 02 F6 | 	mov	arg01, result1
11394     3C 78 B0 FD | 	call	#__system___lockmem
11398     43 01 00 FF 
1139c     59 14 06 F6 | 	mov	arg02, ##@LR__4625
113a0     00 12 06 F6 | 	mov	arg01, #0
113a4     00 16 06 F6 | 	mov	arg03, #0
113a8     18 85 B0 FD | 	call	#__system___basic_print_string
113ac     00 12 06 F6 | 	mov	arg01, #0
113b0     20 D1 B0 FD | 	call	#__system___getiolock_0417
113b4     FD 00 68 FC | 	wrlong	#0, result1
113b8     27 12 06 F6 | 	mov	arg01, #39
113bc     F0 42 B0 FD | 	call	#_printerror
113c0     68 00 90 FD | 	jmp	#LR__1381
113c4                 | LR__1380
113c4     74 84 BF FD | 	call	#_pop
113c8     FF 1E 02 F6 | 	mov	local01, result3
113cc     A7 FA 61 FC | 	wrlong	result1, fp
113d0     04 4E 05 F1 | 	add	fp, #4
113d4     A7 FC 61 FC | 	wrlong	result2, fp
113d8     04 4E 05 F1 | 	add	fp, #4
113dc     A7 1E 62 FC | 	wrlong	local01, fp
113e0     08 4E 85 F1 | 	sub	fp, #8
113e4     A7 12 02 F6 | 	mov	arg01, fp
113e8     8C F9 BF FD | 	call	#_converttofloat
113ec     FD 12 02 F6 | 	mov	arg01, result1
113f0     98 AD B0 FD | 	call	#__system____builtin_asinf
113f4     FD 12 02 F6 | 	mov	arg01, result1
113f8     00 9A 21 FF 
113fc     00 14 06 F6 | 	mov	arg02, ##1127481344
11400     B8 A2 B0 FD | 	call	#__system___float_mul
11404     FD 12 02 F6 | 	mov	arg01, result1
11408     87 24 20 FF 
1140c     DB 15 06 F6 | 	mov	arg02, ##1078530011
11410     AC A4 B0 FD | 	call	#__system___float_div
11414     A7 FA 61 FC | 	wrlong	result1, fp
11418     08 4E 05 F1 | 	add	fp, #8
1141c     A7 3C 68 FC | 	wrlong	#30, fp
11420     08 4E 85 F1 | 	sub	fp, #8
11424     A7 12 02 F6 | 	mov	arg01, fp
11428     A8 84 BF FD | 	call	#_push
1142c                 | LR__1381
1142c     A7 F0 03 F6 | 	mov	ptra, fp
11430     B2 00 A0 FD | 	call	#popregs_
11434                 | _do_asin_ret
11434     2D 00 64 FD | 	ret
11438                 | 
11438                 | ' 
11438                 | ' sub do_acos
11438                 | _do_acos
11438     01 4A 05 F6 | 	mov	COUNT_, #1
1143c     A8 00 A0 FD | 	call	#pushregs_
11440     10 F0 07 F1 | 	add	ptra, #16
11444     69 00 00 FF 
11448     54 E4 05 F1 | 	add	objptr, ##53844
1144c     F2 1E 02 FB | 	rdlong	local01, objptr
11450     0F 17 02 F6 | 	mov	arg03, local01
11454     01 16 66 F0 | 	shl	arg03, #1
11458     0F 17 02 F1 | 	add	arg03, local01
1145c     02 16 66 F0 | 	shl	arg03, #2
11460     03 00 00 FF 
11464     04 E4 85 F1 | 	sub	objptr, ##1540
11468     F2 16 02 F1 | 	add	arg03, objptr
1146c     0B 17 02 FB | 	rdlong	arg03, arg03
11470     0C 4E 05 F1 | 	add	fp, #12
11474     A7 16 62 FC | 	wrlong	arg03, fp
11478                 | ' 
11478                 | ' numpar=compiledline(lineptr_e).result.uresult
11478                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
11478     0C 4E 85 F1 | 	sub	fp, #12
1147c     02 16 16 F2 | 	cmp	arg03, #2 wc
11480     66 00 00 FF 
11484     50 E4 85 F1 | 	sub	objptr, ##52304
11488     0C 4E 05 C1 |  if_b	add	fp, #12
1148c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11490     0C 4E 85 C1 |  if_b	sub	fp, #12
11494     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
11498     00 12 06 F6 | 	mov	arg01, #0
1149c     34 D0 B0 FD | 	call	#__system___getiolock_0417
114a0     FD 12 02 F6 | 	mov	arg01, result1
114a4     2C 77 B0 FD | 	call	#__system___lockmem
114a8     43 01 00 FF 
114ac     60 14 06 F6 | 	mov	arg02, ##@LR__4626
114b0     00 12 06 F6 | 	mov	arg01, #0
114b4     00 16 06 F6 | 	mov	arg03, #0
114b8     08 84 B0 FD | 	call	#__system___basic_print_string
114bc     00 12 06 F6 | 	mov	arg01, #0
114c0     10 D0 B0 FD | 	call	#__system___getiolock_0417
114c4     FD 00 68 FC | 	wrlong	#0, result1
114c8     27 12 06 F6 | 	mov	arg01, #39
114cc     E0 41 B0 FD | 	call	#_printerror
114d0     68 00 90 FD | 	jmp	#LR__1391
114d4                 | LR__1390
114d4     64 83 BF FD | 	call	#_pop
114d8     FF 1E 02 F6 | 	mov	local01, result3
114dc     A7 FA 61 FC | 	wrlong	result1, fp
114e0     04 4E 05 F1 | 	add	fp, #4
114e4     A7 FC 61 FC | 	wrlong	result2, fp
114e8     04 4E 05 F1 | 	add	fp, #4
114ec     A7 1E 62 FC | 	wrlong	local01, fp
114f0     08 4E 85 F1 | 	sub	fp, #8
114f4     A7 12 02 F6 | 	mov	arg01, fp
114f8     7C F8 BF FD | 	call	#_converttofloat
114fc     FD 12 02 F6 | 	mov	arg01, result1
11500     D4 AC B0 FD | 	call	#__system____builtin_acosf
11504     FD 12 02 F6 | 	mov	arg01, result1
11508     00 9A 21 FF 
1150c     00 14 06 F6 | 	mov	arg02, ##1127481344
11510     A8 A1 B0 FD | 	call	#__system___float_mul
11514     FD 12 02 F6 | 	mov	arg01, result1
11518     87 24 20 FF 
1151c     DB 15 06 F6 | 	mov	arg02, ##1078530011
11520     9C A3 B0 FD | 	call	#__system___float_div
11524     A7 FA 61 FC | 	wrlong	result1, fp
11528     08 4E 05 F1 | 	add	fp, #8
1152c     A7 3C 68 FC | 	wrlong	#30, fp
11530     08 4E 85 F1 | 	sub	fp, #8
11534     A7 12 02 F6 | 	mov	arg01, fp
11538     98 83 BF FD | 	call	#_push
1153c                 | LR__1391
1153c     A7 F0 03 F6 | 	mov	ptra, fp
11540     B2 00 A0 FD | 	call	#popregs_
11544                 | _do_acos_ret
11544     2D 00 64 FD | 	ret
11548                 | 
11548                 | ' 
11548                 | ' sub do_atn
11548                 | _do_atn
11548     01 4A 05 F6 | 	mov	COUNT_, #1
1154c     A8 00 A0 FD | 	call	#pushregs_
11550     10 F0 07 F1 | 	add	ptra, #16
11554     69 00 00 FF 
11558     54 E4 05 F1 | 	add	objptr, ##53844
1155c     F2 1E 02 FB | 	rdlong	local01, objptr
11560     0F 17 02 F6 | 	mov	arg03, local01
11564     01 16 66 F0 | 	shl	arg03, #1
11568     0F 17 02 F1 | 	add	arg03, local01
1156c     02 16 66 F0 | 	shl	arg03, #2
11570     03 00 00 FF 
11574     04 E4 85 F1 | 	sub	objptr, ##1540
11578     F2 16 02 F1 | 	add	arg03, objptr
1157c     0B 17 02 FB | 	rdlong	arg03, arg03
11580     0C 4E 05 F1 | 	add	fp, #12
11584     A7 16 62 FC | 	wrlong	arg03, fp
11588                 | ' 
11588                 | ' numpar=compiledline(lineptr_e).result.uresult
11588                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
11588     0C 4E 85 F1 | 	sub	fp, #12
1158c     02 16 16 F2 | 	cmp	arg03, #2 wc
11590     66 00 00 FF 
11594     50 E4 85 F1 | 	sub	objptr, ##52304
11598     0C 4E 05 C1 |  if_b	add	fp, #12
1159c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
115a0     0C 4E 85 C1 |  if_b	sub	fp, #12
115a4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
115a8     00 12 06 F6 | 	mov	arg01, #0
115ac     24 CF B0 FD | 	call	#__system___getiolock_0417
115b0     FD 12 02 F6 | 	mov	arg01, result1
115b4     1C 76 B0 FD | 	call	#__system___lockmem
115b8     43 01 00 FF 
115bc     67 14 06 F6 | 	mov	arg02, ##@LR__4627
115c0     00 12 06 F6 | 	mov	arg01, #0
115c4     00 16 06 F6 | 	mov	arg03, #0
115c8     F8 82 B0 FD | 	call	#__system___basic_print_string
115cc     00 12 06 F6 | 	mov	arg01, #0
115d0     00 CF B0 FD | 	call	#__system___getiolock_0417
115d4     FD 00 68 FC | 	wrlong	#0, result1
115d8     27 12 06 F6 | 	mov	arg01, #39
115dc     D0 40 B0 FD | 	call	#_printerror
115e0     70 00 90 FD | 	jmp	#LR__1401
115e4                 | LR__1400
115e4     54 82 BF FD | 	call	#_pop
115e8     FF 1E 02 F6 | 	mov	local01, result3
115ec     A7 FA 61 FC | 	wrlong	result1, fp
115f0     04 4E 05 F1 | 	add	fp, #4
115f4     A7 FC 61 FC | 	wrlong	result2, fp
115f8     04 4E 05 F1 | 	add	fp, #4
115fc     A7 1E 62 FC | 	wrlong	local01, fp
11600     08 4E 85 F1 | 	sub	fp, #8
11604     A7 12 02 F6 | 	mov	arg01, fp
11608     6C F7 BF FD | 	call	#_converttofloat
1160c     FD 12 02 F6 | 	mov	arg01, result1
11610     00 C0 1F FF 
11614     00 14 06 F6 | 	mov	arg02, ##1065353216
11618     08 AC B0 FD | 	call	#__system____builtin_atan2f
1161c     FD 12 02 F6 | 	mov	arg01, result1
11620     00 9A 21 FF 
11624     00 14 06 F6 | 	mov	arg02, ##1127481344
11628     90 A0 B0 FD | 	call	#__system___float_mul
1162c     FD 12 02 F6 | 	mov	arg01, result1
11630     87 24 20 FF 
11634     DB 15 06 F6 | 	mov	arg02, ##1078530011
11638     84 A2 B0 FD | 	call	#__system___float_div
1163c     A7 FA 61 FC | 	wrlong	result1, fp
11640     08 4E 05 F1 | 	add	fp, #8
11644     A7 3C 68 FC | 	wrlong	#30, fp
11648     08 4E 85 F1 | 	sub	fp, #8
1164c     A7 12 02 F6 | 	mov	arg01, fp
11650     80 82 BF FD | 	call	#_push
11654                 | LR__1401
11654     A7 F0 03 F6 | 	mov	ptra, fp
11658     B2 00 A0 FD | 	call	#popregs_
1165c                 | _do_atn_ret
1165c     2D 00 64 FD | 	ret
11660                 | 
11660                 | ' 
11660                 | ' sub do_sqr
11660                 | _do_sqr
11660     01 4A 05 F6 | 	mov	COUNT_, #1
11664     A8 00 A0 FD | 	call	#pushregs_
11668     10 F0 07 F1 | 	add	ptra, #16
1166c     69 00 00 FF 
11670     54 E4 05 F1 | 	add	objptr, ##53844
11674     F2 1E 02 FB | 	rdlong	local01, objptr
11678     0F 17 02 F6 | 	mov	arg03, local01
1167c     01 16 66 F0 | 	shl	arg03, #1
11680     0F 17 02 F1 | 	add	arg03, local01
11684     02 16 66 F0 | 	shl	arg03, #2
11688     03 00 00 FF 
1168c     04 E4 85 F1 | 	sub	objptr, ##1540
11690     F2 16 02 F1 | 	add	arg03, objptr
11694     0B 17 02 FB | 	rdlong	arg03, arg03
11698     0C 4E 05 F1 | 	add	fp, #12
1169c     A7 16 62 FC | 	wrlong	arg03, fp
116a0                 | ' 
116a0                 | ' numpar=compiledline(lineptr_e).result.uresult
116a0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
116a0     0C 4E 85 F1 | 	sub	fp, #12
116a4     02 16 16 F2 | 	cmp	arg03, #2 wc
116a8     66 00 00 FF 
116ac     50 E4 85 F1 | 	sub	objptr, ##52304
116b0     0C 4E 05 C1 |  if_b	add	fp, #12
116b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
116b8     0C 4E 85 C1 |  if_b	sub	fp, #12
116bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1410
116c0     00 12 06 F6 | 	mov	arg01, #0
116c4     0C CE B0 FD | 	call	#__system___getiolock_0417
116c8     FD 12 02 F6 | 	mov	arg01, result1
116cc     04 75 B0 FD | 	call	#__system___lockmem
116d0     43 01 00 FF 
116d4     6D 14 06 F6 | 	mov	arg02, ##@LR__4628
116d8     00 12 06 F6 | 	mov	arg01, #0
116dc     00 16 06 F6 | 	mov	arg03, #0
116e0     E0 81 B0 FD | 	call	#__system___basic_print_string
116e4     00 12 06 F6 | 	mov	arg01, #0
116e8     E8 CD B0 FD | 	call	#__system___getiolock_0417
116ec     FD 00 68 FC | 	wrlong	#0, result1
116f0     27 12 06 F6 | 	mov	arg01, #39
116f4     B8 3F B0 FD | 	call	#_printerror
116f8     48 00 90 FD | 	jmp	#LR__1411
116fc                 | LR__1410
116fc     3C 81 BF FD | 	call	#_pop
11700     FF 1E 02 F6 | 	mov	local01, result3
11704     A7 FA 61 FC | 	wrlong	result1, fp
11708     04 4E 05 F1 | 	add	fp, #4
1170c     A7 FC 61 FC | 	wrlong	result2, fp
11710     04 4E 05 F1 | 	add	fp, #4
11714     A7 1E 62 FC | 	wrlong	local01, fp
11718     08 4E 85 F1 | 	sub	fp, #8
1171c     A7 12 02 F6 | 	mov	arg01, fp
11720     54 F6 BF FD | 	call	#_converttofloat
11724     FD 12 02 F6 | 	mov	arg01, result1
11728     B8 9E B0 FD | 	call	#__system___float_sqrt
1172c     A7 FA 61 FC | 	wrlong	result1, fp
11730     08 4E 05 F1 | 	add	fp, #8
11734     A7 3C 68 FC | 	wrlong	#30, fp
11738     08 4E 85 F1 | 	sub	fp, #8
1173c     A7 12 02 F6 | 	mov	arg01, fp
11740     90 81 BF FD | 	call	#_push
11744                 | LR__1411
11744     A7 F0 03 F6 | 	mov	ptra, fp
11748     B2 00 A0 FD | 	call	#popregs_
1174c                 | _do_sqr_ret
1174c     2D 00 64 FD | 	ret
11750                 | 
11750                 | ' 
11750                 | ' sub do_stick
11750                 | _do_stick
11750     01 4A 05 F6 | 	mov	COUNT_, #1
11754     A8 00 A0 FD | 	call	#pushregs_
11758     10 F0 07 F1 | 	add	ptra, #16
1175c     69 00 00 FF 
11760     54 E4 05 F1 | 	add	objptr, ##53844
11764     F2 1E 02 FB | 	rdlong	local01, objptr
11768     0F 17 02 F6 | 	mov	arg03, local01
1176c     01 16 66 F0 | 	shl	arg03, #1
11770     0F 17 02 F1 | 	add	arg03, local01
11774     02 16 66 F0 | 	shl	arg03, #2
11778     03 00 00 FF 
1177c     04 E4 85 F1 | 	sub	objptr, ##1540
11780     F2 16 02 F1 | 	add	arg03, objptr
11784     0B 17 02 FB | 	rdlong	arg03, arg03
11788     0C 4E 05 F1 | 	add	fp, #12
1178c     A7 16 62 FC | 	wrlong	arg03, fp
11790                 | ' 
11790                 | ' numpar=compiledline(lineptr_e).result.uresult
11790                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11790     0C 4E 85 F1 | 	sub	fp, #12
11794     02 16 16 F2 | 	cmp	arg03, #2 wc
11798     66 00 00 FF 
1179c     50 E4 85 F1 | 	sub	objptr, ##52304
117a0     3C 00 90 CD |  if_b	jmp	#LR__1420
117a4     00 12 06 F6 | 	mov	arg01, #0
117a8     28 CD B0 FD | 	call	#__system___getiolock_0417
117ac     FD 12 02 F6 | 	mov	arg01, result1
117b0     20 74 B0 FD | 	call	#__system___lockmem
117b4     43 01 00 FF 
117b8     73 14 06 F6 | 	mov	arg02, ##@LR__4629
117bc     00 12 06 F6 | 	mov	arg01, #0
117c0     00 16 06 F6 | 	mov	arg03, #0
117c4     FC 80 B0 FD | 	call	#__system___basic_print_string
117c8     00 12 06 F6 | 	mov	arg01, #0
117cc     04 CD B0 FD | 	call	#__system___getiolock_0417
117d0     FD 00 68 FC | 	wrlong	#0, result1
117d4     27 12 06 F6 | 	mov	arg01, #39
117d8     D4 3E B0 FD | 	call	#_printerror
117dc     E8 00 90 FD | 	jmp	#LR__1424
117e0                 | LR__1420
117e0                 | ' 
117e0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
117e0     0C 4E 05 F1 | 	add	fp, #12
117e4     A7 FE 09 FB | 	rdlong	result3, fp wz
117e8     0C 4E 85 F1 | 	sub	fp, #12
117ec     30 00 90 5D |  if_ne	jmp	#LR__1421
117f0     79 00 00 FF 
117f4     D0 E5 05 F1 | 	add	objptr, ##62416
117f8     F2 1E 02 FB | 	rdlong	local01, objptr
117fc     79 00 00 FF 
11800     D0 E5 85 F1 | 	sub	objptr, ##62416
11804     A7 1E 62 FC | 	wrlong	local01, fp
11808     08 4E 05 F1 | 	add	fp, #8
1180c     A7 3A 68 FC | 	wrlong	#29, fp
11810     08 4E 85 F1 | 	sub	fp, #8
11814     A7 12 02 F6 | 	mov	arg01, fp
11818     B8 80 BF FD | 	call	#_push
1181c     A8 00 90 FD | 	jmp	#LR__1424
11820                 | LR__1421
11820     18 80 BF FD | 	call	#_pop
11824     A7 FA 61 FC | 	wrlong	result1, fp
11828     04 4E 05 F1 | 	add	fp, #4
1182c     A7 FC 61 FC | 	wrlong	result2, fp
11830     04 4E 05 F1 | 	add	fp, #4
11834     A7 FE 61 FC | 	wrlong	result3, fp
11838                 | ' 
11838                 | ' t1=pop()
11838                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
11838     08 4E 85 F1 | 	sub	fp, #8
1183c     1C FE 0D F2 | 	cmp	result3, #28 wz
11840     08 4E 05 51 |  if_ne	add	fp, #8
11844     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11848     08 4E 85 51 |  if_ne	sub	fp, #8
1184c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11850     6C 00 90 5D |  if_ne	jmp	#LR__1423
11854     A7 1E 02 FB | 	rdlong	local01, fp
11858     7A 00 00 FF 
1185c     9C E4 05 F1 | 	add	objptr, ##62620
11860     F2 1E 62 FC | 	wrlong	local01, objptr
11864                 | '   q=t1.result.uresult
11864                 | '   if q<7 then 
11864     7A 00 00 FF 
11868     9C E4 85 F1 | 	sub	objptr, ##62620
1186c     07 1E 56 F2 | 	cmps	local01, #7 wc
11870     40 00 90 3D |  if_ae	jmp	#LR__1422
11874     7A 00 00 FF 
11878     9C E4 05 F1 | 	add	objptr, ##62620
1187c     F2 1E 02 FB | 	rdlong	local01, objptr
11880     02 1E 66 F0 | 	shl	local01, #2
11884     CC E4 85 F1 | 	sub	objptr, #204
11888     F2 1E 02 F1 | 	add	local01, objptr
1188c     0F 1F 02 FB | 	rdlong	local01, local01
11890     A7 1E 62 FC | 	wrlong	local01, fp
11894     08 4E 05 F1 | 	add	fp, #8
11898     A7 3A 68 FC | 	wrlong	#29, fp
1189c     08 4E 85 F1 | 	sub	fp, #8
118a0     A7 12 02 F6 | 	mov	arg01, fp
118a4     79 00 00 FF 
118a8     D0 E5 85 F1 | 	sub	objptr, ##62416
118ac     24 80 BF FD | 	call	#_push
118b0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
118b0     14 00 90 FD | 	jmp	#LR__1424
118b4                 | LR__1422
118b4     29 12 06 F6 | 	mov	arg01, #41
118b8     F4 3D B0 FD | 	call	#_printerror
118bc                 | '      printerror(41) : return
118bc     08 00 90 FD | 	jmp	#LR__1424
118c0                 | LR__1423
118c0     29 12 06 F6 | 	mov	arg01, #41
118c4     E8 3D B0 FD | 	call	#_printerror
118c8                 | LR__1424
118c8     A7 F0 03 F6 | 	mov	ptra, fp
118cc     B2 00 A0 FD | 	call	#popregs_
118d0                 | _do_stick_ret
118d0     2D 00 64 FD | 	ret
118d4                 | 
118d4                 | ' 
118d4                 | ' sub do_strig
118d4                 | _do_strig
118d4     01 4A 05 F6 | 	mov	COUNT_, #1
118d8     A8 00 A0 FD | 	call	#pushregs_
118dc     10 F0 07 F1 | 	add	ptra, #16
118e0     69 00 00 FF 
118e4     54 E4 05 F1 | 	add	objptr, ##53844
118e8     F2 1E 02 FB | 	rdlong	local01, objptr
118ec     0F 17 02 F6 | 	mov	arg03, local01
118f0     01 16 66 F0 | 	shl	arg03, #1
118f4     0F 17 02 F1 | 	add	arg03, local01
118f8     02 16 66 F0 | 	shl	arg03, #2
118fc     03 00 00 FF 
11900     04 E4 85 F1 | 	sub	objptr, ##1540
11904     F2 16 02 F1 | 	add	arg03, objptr
11908     0B 17 02 FB | 	rdlong	arg03, arg03
1190c     0C 4E 05 F1 | 	add	fp, #12
11910     A7 16 62 FC | 	wrlong	arg03, fp
11914                 | ' 
11914                 | ' numpar=compiledline(lineptr_e).result.uresult
11914                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11914     0C 4E 85 F1 | 	sub	fp, #12
11918     02 16 16 F2 | 	cmp	arg03, #2 wc
1191c     66 00 00 FF 
11920     50 E4 85 F1 | 	sub	objptr, ##52304
11924     3C 00 90 CD |  if_b	jmp	#LR__1430
11928     00 12 06 F6 | 	mov	arg01, #0
1192c     A4 CB B0 FD | 	call	#__system___getiolock_0417
11930     FD 12 02 F6 | 	mov	arg01, result1
11934     9C 72 B0 FD | 	call	#__system___lockmem
11938     43 01 00 FF 
1193c     7B 14 06 F6 | 	mov	arg02, ##@LR__4630
11940     00 12 06 F6 | 	mov	arg01, #0
11944     00 16 06 F6 | 	mov	arg03, #0
11948     78 7F B0 FD | 	call	#__system___basic_print_string
1194c     00 12 06 F6 | 	mov	arg01, #0
11950     80 CB B0 FD | 	call	#__system___getiolock_0417
11954     FD 00 68 FC | 	wrlong	#0, result1
11958     27 12 06 F6 | 	mov	arg01, #39
1195c     50 3D B0 FD | 	call	#_printerror
11960     E8 00 90 FD | 	jmp	#LR__1434
11964                 | LR__1430
11964                 | ' 
11964                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11964     0C 4E 05 F1 | 	add	fp, #12
11968     A7 FE 09 FB | 	rdlong	result3, fp wz
1196c     0C 4E 85 F1 | 	sub	fp, #12
11970     30 00 90 5D |  if_ne	jmp	#LR__1431
11974     79 00 00 FF 
11978     EC E5 05 F1 | 	add	objptr, ##62444
1197c     F2 1E 02 FB | 	rdlong	local01, objptr
11980     79 00 00 FF 
11984     EC E5 85 F1 | 	sub	objptr, ##62444
11988     A7 1E 62 FC | 	wrlong	local01, fp
1198c     08 4E 05 F1 | 	add	fp, #8
11990     A7 3A 68 FC | 	wrlong	#29, fp
11994     08 4E 85 F1 | 	sub	fp, #8
11998     A7 12 02 F6 | 	mov	arg01, fp
1199c     34 7F BF FD | 	call	#_push
119a0     A8 00 90 FD | 	jmp	#LR__1434
119a4                 | LR__1431
119a4     94 7E BF FD | 	call	#_pop
119a8     A7 FA 61 FC | 	wrlong	result1, fp
119ac     04 4E 05 F1 | 	add	fp, #4
119b0     A7 FC 61 FC | 	wrlong	result2, fp
119b4     04 4E 05 F1 | 	add	fp, #4
119b8     A7 FE 61 FC | 	wrlong	result3, fp
119bc                 | ' 
119bc                 | ' t1=pop()
119bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
119bc     08 4E 85 F1 | 	sub	fp, #8
119c0     1C FE 0D F2 | 	cmp	result3, #28 wz
119c4     08 4E 05 51 |  if_ne	add	fp, #8
119c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
119cc     08 4E 85 51 |  if_ne	sub	fp, #8
119d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
119d4     6C 00 90 5D |  if_ne	jmp	#LR__1433
119d8     A7 1E 02 FB | 	rdlong	local01, fp
119dc     7A 00 00 FF 
119e0     9C E4 05 F1 | 	add	objptr, ##62620
119e4     F2 1E 62 FC | 	wrlong	local01, objptr
119e8                 | '   q=t1.result.uresult
119e8                 | '   if q<7 then 
119e8     7A 00 00 FF 
119ec     9C E4 85 F1 | 	sub	objptr, ##62620
119f0     07 1E 56 F2 | 	cmps	local01, #7 wc
119f4     40 00 90 3D |  if_ae	jmp	#LR__1432
119f8     7A 00 00 FF 
119fc     9C E4 05 F1 | 	add	objptr, ##62620
11a00     F2 1E 02 FB | 	rdlong	local01, objptr
11a04     02 1E 66 F0 | 	shl	local01, #2
11a08     B0 E4 85 F1 | 	sub	objptr, #176
11a0c     F2 1E 02 F1 | 	add	local01, objptr
11a10     0F 1F 02 FB | 	rdlong	local01, local01
11a14     A7 1E 62 FC | 	wrlong	local01, fp
11a18     08 4E 05 F1 | 	add	fp, #8
11a1c     A7 3A 68 FC | 	wrlong	#29, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     A7 12 02 F6 | 	mov	arg01, fp
11a28     79 00 00 FF 
11a2c     EC E5 85 F1 | 	sub	objptr, ##62444
11a30     A0 7E BF FD | 	call	#_push
11a34                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11a34     14 00 90 FD | 	jmp	#LR__1434
11a38                 | LR__1432
11a38     29 12 06 F6 | 	mov	arg01, #41
11a3c     70 3C B0 FD | 	call	#_printerror
11a40                 | '      printerror(41) : return
11a40     08 00 90 FD | 	jmp	#LR__1434
11a44                 | LR__1433
11a44     29 12 06 F6 | 	mov	arg01, #41
11a48     64 3C B0 FD | 	call	#_printerror
11a4c                 | LR__1434
11a4c     A7 F0 03 F6 | 	mov	ptra, fp
11a50     B2 00 A0 FD | 	call	#popregs_
11a54                 | _do_strig_ret
11a54     2D 00 64 FD | 	ret
11a58                 | 
11a58                 | ' 
11a58                 | ' sub do_getpixel
11a58                 | _do_getpixel
11a58     00 4A 05 F6 | 	mov	COUNT_, #0
11a5c     A8 00 A0 FD | 	call	#pushregs_
11a60     24 F0 07 F1 | 	add	ptra, #36
11a64     69 00 00 FF 
11a68     54 E4 05 F1 | 	add	objptr, ##53844
11a6c     F2 16 02 FB | 	rdlong	arg03, objptr
11a70     0B 15 02 F6 | 	mov	arg02, arg03
11a74     01 14 66 F0 | 	shl	arg02, #1
11a78     0B 15 02 F1 | 	add	arg02, arg03
11a7c     02 14 66 F0 | 	shl	arg02, #2
11a80     03 00 00 FF 
11a84     04 E4 85 F1 | 	sub	objptr, ##1540
11a88     F2 14 02 F1 | 	add	arg02, objptr
11a8c     0A 17 02 FB | 	rdlong	arg03, arg02
11a90     18 4E 05 F1 | 	add	fp, #24
11a94     A7 16 62 FC | 	wrlong	arg03, fp
11a98                 | ' 
11a98                 | ' numpar=compiledline(lineptr_e).result.uresult
11a98                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11a98     18 4E 85 F1 | 	sub	fp, #24
11a9c     02 16 0E F2 | 	cmp	arg03, #2 wz
11aa0     66 00 00 FF 
11aa4     50 E4 85 F1 | 	sub	objptr, ##52304
11aa8     3C 00 90 AD |  if_e	jmp	#LR__1440
11aac     00 12 06 F6 | 	mov	arg01, #0
11ab0     20 CA B0 FD | 	call	#__system___getiolock_0417
11ab4     FD 12 02 F6 | 	mov	arg01, result1
11ab8     18 71 B0 FD | 	call	#__system___lockmem
11abc     43 01 00 FF 
11ac0     83 14 06 F6 | 	mov	arg02, ##@LR__4631
11ac4     00 12 06 F6 | 	mov	arg01, #0
11ac8     00 16 06 F6 | 	mov	arg03, #0
11acc     F4 7D B0 FD | 	call	#__system___basic_print_string
11ad0     00 12 06 F6 | 	mov	arg01, #0
11ad4     FC C9 B0 FD | 	call	#__system___getiolock_0417
11ad8     FD 00 68 FC | 	wrlong	#0, result1
11adc     27 12 06 F6 | 	mov	arg01, #39
11ae0     CC 3B B0 FD | 	call	#_printerror
11ae4     B4 00 90 FD | 	jmp	#LR__1441
11ae8                 | LR__1440
11ae8     50 7D BF FD | 	call	#_pop
11aec     FD 16 02 F6 | 	mov	arg03, result1
11af0     FE 14 02 F6 | 	mov	arg02, result2
11af4     FF 12 02 F6 | 	mov	arg01, result3
11af8     0C 4E 05 F1 | 	add	fp, #12
11afc     A7 16 62 FC | 	wrlong	arg03, fp
11b00     04 4E 05 F1 | 	add	fp, #4
11b04     A7 14 62 FC | 	wrlong	arg02, fp
11b08     04 4E 05 F1 | 	add	fp, #4
11b0c     A7 12 62 FC | 	wrlong	arg01, fp
11b10     14 4E 85 F1 | 	sub	fp, #20
11b14     24 7D BF FD | 	call	#_pop
11b18     FF 16 02 F6 | 	mov	arg03, result3
11b1c     A7 FA 61 FC | 	wrlong	result1, fp
11b20     04 4E 05 F1 | 	add	fp, #4
11b24     A7 FC 61 FC | 	wrlong	result2, fp
11b28     04 4E 05 F1 | 	add	fp, #4
11b2c     A7 16 62 FC | 	wrlong	arg03, fp
11b30     08 4E 85 F1 | 	sub	fp, #8
11b34     A7 12 02 F6 | 	mov	arg01, fp
11b38     90 F1 BF FD | 	call	#_converttoint
11b3c     1C 4E 05 F1 | 	add	fp, #28
11b40     A7 FA 61 FC | 	wrlong	result1, fp
11b44     10 4E 85 F1 | 	sub	fp, #16
11b48     A7 12 02 F6 | 	mov	arg01, fp
11b4c     0C 4E 85 F1 | 	sub	fp, #12
11b50     78 F1 BF FD | 	call	#_converttoint
11b54     FD 16 02 F6 | 	mov	arg03, result1
11b58     20 4E 05 F1 | 	add	fp, #32
11b5c     A7 16 62 FC | 	wrlong	arg03, fp
11b60     F2 12 02 FB | 	rdlong	arg01, objptr
11b64     04 4E 85 F1 | 	sub	fp, #4
11b68     A7 FE 01 FB | 	rdlong	result3, fp
11b6c     FF 12 02 F1 | 	add	arg01, result3
11b70     1C 4E 85 F1 | 	sub	fp, #28
11b74     0A 16 66 F0 | 	shl	arg03, #10
11b78     0B 13 02 F1 | 	add	arg01, arg03
11b7c     94 3C B0 FD | 	call	#_pspeek
11b80     FD FA E1 F8 | 	getbyte	result1, result1, #0
11b84     A7 FA 61 FC | 	wrlong	result1, fp
11b88     08 4E 05 F1 | 	add	fp, #8
11b8c     A7 3A 68 FC | 	wrlong	#29, fp
11b90     08 4E 85 F1 | 	sub	fp, #8
11b94     A7 12 02 F6 | 	mov	arg01, fp
11b98     38 7D BF FD | 	call	#_push
11b9c                 | LR__1441
11b9c     A7 F0 03 F6 | 	mov	ptra, fp
11ba0     B2 00 A0 FD | 	call	#popregs_
11ba4                 | _do_getpixel_ret
11ba4     2D 00 64 FD | 	ret
11ba8                 | 
11ba8                 | ' 
11ba8                 | ' 
11ba8                 | ' 
11ba8                 | ' sub do_defsprite
11ba8                 | _do_defsprite
11ba8     07 4A 05 F6 | 	mov	COUNT_, #7
11bac     A8 00 A0 FD | 	call	#pushregs_
11bb0     5C F0 07 F1 | 	add	ptra, #92
11bb4     84 7C BF FD | 	call	#_pop
11bb8     FD 16 02 F6 | 	mov	arg03, result1
11bbc     FE 14 02 F6 | 	mov	arg02, result2
11bc0     FF 12 02 F6 | 	mov	arg01, result3
11bc4     30 4E 05 F1 | 	add	fp, #48
11bc8     A7 16 62 FC | 	wrlong	arg03, fp
11bcc     04 4E 05 F1 | 	add	fp, #4
11bd0     A7 14 62 FC | 	wrlong	arg02, fp
11bd4     04 4E 05 F1 | 	add	fp, #4
11bd8     A7 12 62 FC | 	wrlong	arg01, fp
11bdc     38 4E 85 F1 | 	sub	fp, #56
11be0     58 7C BF FD | 	call	#_pop
11be4     FD 16 02 F6 | 	mov	arg03, result1
11be8     FE 14 02 F6 | 	mov	arg02, result2
11bec     FF 12 02 F6 | 	mov	arg01, result3
11bf0     24 4E 05 F1 | 	add	fp, #36
11bf4     A7 16 62 FC | 	wrlong	arg03, fp
11bf8     04 4E 05 F1 | 	add	fp, #4
11bfc     A7 14 62 FC | 	wrlong	arg02, fp
11c00     04 4E 05 F1 | 	add	fp, #4
11c04     A7 12 62 FC | 	wrlong	arg01, fp
11c08     2C 4E 85 F1 | 	sub	fp, #44
11c0c     2C 7C BF FD | 	call	#_pop
11c10     FD 16 02 F6 | 	mov	arg03, result1
11c14     FE 14 02 F6 | 	mov	arg02, result2
11c18     FF 12 02 F6 | 	mov	arg01, result3
11c1c     18 4E 05 F1 | 	add	fp, #24
11c20     A7 16 62 FC | 	wrlong	arg03, fp
11c24     04 4E 05 F1 | 	add	fp, #4
11c28     A7 14 62 FC | 	wrlong	arg02, fp
11c2c     04 4E 05 F1 | 	add	fp, #4
11c30     A7 12 62 FC | 	wrlong	arg01, fp
11c34     20 4E 85 F1 | 	sub	fp, #32
11c38     00 7C BF FD | 	call	#_pop
11c3c     FD 16 02 F6 | 	mov	arg03, result1
11c40     FE 14 02 F6 | 	mov	arg02, result2
11c44     FF 12 02 F6 | 	mov	arg01, result3
11c48     0C 4E 05 F1 | 	add	fp, #12
11c4c     A7 16 62 FC | 	wrlong	arg03, fp
11c50     04 4E 05 F1 | 	add	fp, #4
11c54     A7 14 62 FC | 	wrlong	arg02, fp
11c58     04 4E 05 F1 | 	add	fp, #4
11c5c     A7 12 62 FC | 	wrlong	arg01, fp
11c60     14 4E 85 F1 | 	sub	fp, #20
11c64     D4 7B BF FD | 	call	#_pop
11c68     FF 16 02 F6 | 	mov	arg03, result3
11c6c     A7 FA 61 FC | 	wrlong	result1, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 FC 61 FC | 	wrlong	result2, fp
11c78     04 4E 05 F1 | 	add	fp, #4
11c7c     A7 16 62 FC | 	wrlong	arg03, fp
11c80     08 4E 85 F1 | 	sub	fp, #8
11c84     A7 12 02 F6 | 	mov	arg01, fp
11c88     40 F0 BF FD | 	call	#_converttoint
11c8c     3C 4E 05 F1 | 	add	fp, #60
11c90     A7 FA 61 FC | 	wrlong	result1, fp
11c94     30 4E 85 F1 | 	sub	fp, #48
11c98     A7 12 02 F6 | 	mov	arg01, fp
11c9c     0C 4E 85 F1 | 	sub	fp, #12
11ca0     28 F0 BF FD | 	call	#_converttoint
11ca4     40 4E 05 F1 | 	add	fp, #64
11ca8     A7 FA 61 FC | 	wrlong	result1, fp
11cac     28 4E 85 F1 | 	sub	fp, #40
11cb0     A7 12 02 F6 | 	mov	arg01, fp
11cb4     18 4E 85 F1 | 	sub	fp, #24
11cb8     10 F0 BF FD | 	call	#_converttoint
11cbc     44 4E 05 F1 | 	add	fp, #68
11cc0     A7 FA 61 FC | 	wrlong	result1, fp
11cc4     20 4E 85 F1 | 	sub	fp, #32
11cc8     A7 12 02 F6 | 	mov	arg01, fp
11ccc     24 4E 85 F1 | 	sub	fp, #36
11cd0     F8 EF BF FD | 	call	#_converttoint
11cd4     48 4E 05 F1 | 	add	fp, #72
11cd8     A7 FA 61 FC | 	wrlong	result1, fp
11cdc     18 4E 85 F1 | 	sub	fp, #24
11ce0     A7 12 02 F6 | 	mov	arg01, fp
11ce4     30 4E 85 F1 | 	sub	fp, #48
11ce8     E0 EF BF FD | 	call	#_converttoint
11cec     4C 4E 05 F1 | 	add	fp, #76
11cf0     A7 FA 61 FC | 	wrlong	result1, fp
11cf4                 | ' 
11cf4                 | ' t5=pop()
11cf4                 | ' t4=pop()
11cf4                 | ' t3=pop()
11cf4                 | ' t2=pop()
11cf4                 | ' t1=pop()
11cf4                 | ' 
11cf4                 | ' ' do convert, defsprite is not a racing command
11cf4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
11cf4                 | '  
11cf4                 | ' ' todo: check parameters for linits
11cf4                 | ' if sprite(a1)<> nil then delete(sprite(a1))
11cf4     10 4E 85 F1 | 	sub	fp, #16
11cf8     A7 16 02 FB | 	rdlong	arg03, fp
11cfc     3C 4E 85 F1 | 	sub	fp, #60
11d00     02 16 66 F0 | 	shl	arg03, #2
11d04     7A 00 00 FF 
11d08     08 E4 05 F1 | 	add	objptr, ##62472
11d0c     F2 16 02 F1 | 	add	arg03, objptr
11d10     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11d14     7A 00 00 FF 
11d18     08 E4 85 F1 | 	sub	objptr, ##62472
11d1c     2C 00 90 AD |  if_e	jmp	#LR__1450
11d20     3C 4E 05 F1 | 	add	fp, #60
11d24     A7 16 02 FB | 	rdlong	arg03, fp
11d28     3C 4E 85 F1 | 	sub	fp, #60
11d2c     02 16 66 F0 | 	shl	arg03, #2
11d30     7A 00 00 FF 
11d34     08 E4 05 F1 | 	add	objptr, ##62472
11d38     F2 16 02 F1 | 	add	arg03, objptr
11d3c     0B 13 02 FB | 	rdlong	arg01, arg03
11d40     7A 00 00 FF 
11d44     08 E4 85 F1 | 	sub	objptr, ##62472
11d48     78 AD B0 FD | 	call	#__system___gc_free
11d4c                 | LR__1450
11d4c     3C 4E 05 F1 | 	add	fp, #60
11d50     A7 1E 02 FB | 	rdlong	local01, fp
11d54     0C 4E 05 F1 | 	add	fp, #12
11d58     A7 16 02 FB | 	rdlong	arg03, fp
11d5c     04 4E 05 F1 | 	add	fp, #4
11d60     A7 14 02 FB | 	rdlong	arg02, fp
11d64     0A 17 02 FD | 	qmul	arg03, arg02
11d68     02 1E 66 F0 | 	shl	local01, #2
11d6c     7A 00 00 FF 
11d70     08 E4 05 F1 | 	add	objptr, ##62472
11d74     F2 1E 02 F1 | 	add	local01, objptr
11d78     4C 4E 85 F1 | 	sub	fp, #76
11d7c     7A 00 00 FF 
11d80     08 E4 85 F1 | 	sub	objptr, ##62472
11d84     18 12 62 FD | 	getqx	arg01
11d88     FC AB B0 FD | 	call	#__system___gc_alloc_managed
11d8c     0F FB 61 FC | 	wrlong	result1, local01
11d90                 | ' for y=a3 to a3+a5-1
11d90     44 4E 05 F1 | 	add	fp, #68
11d94     A7 20 02 FB | 	rdlong	local02, fp
11d98     0C 4E 05 F1 | 	add	fp, #12
11d9c     A7 20 62 FC | 	wrlong	local02, fp
11da0     0C 4E 85 F1 | 	sub	fp, #12
11da4     A7 22 02 FB | 	rdlong	local03, fp
11da8     08 4E 05 F1 | 	add	fp, #8
11dac     A7 24 02 FB | 	rdlong	local04, fp
11db0     4C 4E 85 F1 | 	sub	fp, #76
11db4     12 23 02 F1 | 	add	local03, local04
11db8                 | LR__1451
11db8     50 4E 05 F1 | 	add	fp, #80
11dbc     A7 20 02 FB | 	rdlong	local02, fp
11dc0     50 4E 85 F1 | 	sub	fp, #80
11dc4     11 21 52 F2 | 	cmps	local02, local03 wc
11dc8     10 01 90 3D |  if_ae	jmp	#LR__1454
11dcc                 | '   for x=a2 to a4+a2-1
11dcc     40 4E 05 F1 | 	add	fp, #64
11dd0     A7 1E 02 FB | 	rdlong	local01, fp
11dd4     7A 00 00 FF 
11dd8     70 E4 05 F1 | 	add	objptr, ##62576
11ddc     F2 1E 62 FC | 	wrlong	local01, objptr
11de0     7A 00 00 FF 
11de4     70 E4 85 F1 | 	sub	objptr, ##62576
11de8     08 4E 05 F1 | 	add	fp, #8
11dec     A7 26 02 FB | 	rdlong	local05, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     A7 28 02 FB | 	rdlong	local06, fp
11df8     40 4E 85 F1 | 	sub	fp, #64
11dfc     14 27 02 F1 | 	add	local05, local06
11e00                 | LR__1452
11e00     7A 00 00 FF 
11e04     70 E4 05 F1 | 	add	objptr, ##62576
11e08     F2 1E 02 FB | 	rdlong	local01, objptr
11e0c     7A 00 00 FF 
11e10     70 E4 85 F1 | 	sub	objptr, ##62576
11e14     13 1F 52 F2 | 	cmps	local01, local05 wc
11e18     A8 00 90 3D |  if_ae	jmp	#LR__1453
11e1c     3C 4E 05 F1 | 	add	fp, #60
11e20     A7 28 02 FB | 	rdlong	local06, fp
11e24     04 4E 05 F1 | 	add	fp, #4
11e28     A7 24 02 FB | 	rdlong	local04, fp
11e2c     10 4E 05 F1 | 	add	fp, #16
11e30     A7 20 02 FB | 	rdlong	local02, fp
11e34     10 1F 02 F6 | 	mov	local01, local02
11e38     0C 4E 85 F1 | 	sub	fp, #12
11e3c     A7 16 02 FB | 	rdlong	arg03, fp
11e40     0B 1F 82 F1 | 	sub	local01, arg03
11e44     04 4E 05 F1 | 	add	fp, #4
11e48     A7 16 02 FB | 	rdlong	arg03, fp
11e4c     0B 1F 02 FD | 	qmul	local01, arg03
11e50     02 28 66 F0 | 	shl	local06, #2
11e54     7A 00 00 FF 
11e58     08 E4 05 F1 | 	add	objptr, ##62472
11e5c     F2 28 02 F1 | 	add	local06, objptr
11e60     14 29 02 FB | 	rdlong	local06, local06
11e64     68 E4 05 F1 | 	add	objptr, #104
11e68     F2 1E 02 FB | 	rdlong	local01, objptr
11e6c     7A 00 00 FF 
11e70     70 E4 85 F1 | 	sub	objptr, ##62576
11e74     0F 2B 02 F6 | 	mov	local07, local01
11e78     12 2B 82 F1 | 	sub	local07, local04
11e7c     F2 12 02 FB | 	rdlong	arg01, objptr
11e80     0F 13 02 F1 | 	add	arg01, local01
11e84     48 4E 85 F1 | 	sub	fp, #72
11e88     0A 20 66 F0 | 	shl	local02, #10
11e8c     10 13 02 F1 | 	add	arg01, local02
11e90     18 24 62 FD | 	getqx	local04
11e94     12 2B 02 F1 | 	add	local07, local04
11e98     14 2B 02 F1 | 	add	local07, local06
11e9c     74 39 B0 FD | 	call	#_pspeek
11ea0     15 FB 41 FC | 	wrbyte	result1, local07
11ea4     7A 00 00 FF 
11ea8     70 E4 05 F1 | 	add	objptr, ##62576
11eac     F2 2A 02 FB | 	rdlong	local07, objptr
11eb0     01 2A 06 F1 | 	add	local07, #1
11eb4     F2 2A 62 FC | 	wrlong	local07, objptr
11eb8     7A 00 00 FF 
11ebc     70 E4 85 F1 | 	sub	objptr, ##62576
11ec0     3C FF 9F FD | 	jmp	#LR__1452
11ec4                 | LR__1453
11ec4     50 4E 05 F1 | 	add	fp, #80
11ec8     A7 2A 02 FB | 	rdlong	local07, fp
11ecc     01 2A 06 F1 | 	add	local07, #1
11ed0     A7 2A 62 FC | 	wrlong	local07, fp
11ed4     50 4E 85 F1 | 	sub	fp, #80
11ed8     DC FE 9F FD | 	jmp	#LR__1451
11edc                 | LR__1454
11edc     3C 4E 05 F1 | 	add	fp, #60
11ee0     A7 2A 02 FB | 	rdlong	local07, fp
11ee4     15 13 02 F6 | 	mov	arg01, local07
11ee8     3C 4E 85 F1 | 	sub	fp, #60
11eec     02 2A 66 F0 | 	shl	local07, #2
11ef0     7A 00 00 FF 
11ef4     08 E4 05 F1 | 	add	objptr, ##62472
11ef8     F2 2A 02 F1 | 	add	local07, objptr
11efc     15 15 02 FB | 	rdlong	arg02, local07
11f00     7A 00 00 FF 
11f04     08 E4 85 F1 | 	sub	objptr, ##62472
11f08     B8 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
11f0c     3C 4E 05 F1 | 	add	fp, #60
11f10     A7 12 02 FB | 	rdlong	arg01, fp
11f14     0C 4E 05 F1 | 	add	fp, #12
11f18     A7 14 02 FB | 	rdlong	arg02, fp
11f1c     04 4E 05 F1 | 	add	fp, #4
11f20     A7 16 02 FB | 	rdlong	arg03, fp
11f24     4C 4E 85 F1 | 	sub	fp, #76
11f28     0C 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
11f2c     A7 F0 03 F6 | 	mov	ptra, fp
11f30     B2 00 A0 FD | 	call	#popregs_
11f34                 | _do_defsprite_ret
11f34     2D 00 64 FD | 	ret
11f38                 | 
11f38                 | ' 
11f38                 | ' sub do_sprite
11f38                 | _do_sprite
11f38     00 4A 05 F6 | 	mov	COUNT_, #0
11f3c     A8 00 A0 FD | 	call	#pushregs_
11f40     30 F0 07 F1 | 	add	ptra, #48
11f44     F4 78 BF FD | 	call	#_pop
11f48     FD 16 02 F6 | 	mov	arg03, result1
11f4c     FE 14 02 F6 | 	mov	arg02, result2
11f50     FF 12 02 F6 | 	mov	arg01, result3
11f54     18 4E 05 F1 | 	add	fp, #24
11f58     A7 16 62 FC | 	wrlong	arg03, fp
11f5c     04 4E 05 F1 | 	add	fp, #4
11f60     A7 14 62 FC | 	wrlong	arg02, fp
11f64     04 4E 05 F1 | 	add	fp, #4
11f68     A7 12 62 FC | 	wrlong	arg01, fp
11f6c     20 4E 85 F1 | 	sub	fp, #32
11f70     C8 78 BF FD | 	call	#_pop
11f74     FD 16 02 F6 | 	mov	arg03, result1
11f78     FE 14 02 F6 | 	mov	arg02, result2
11f7c     FF 12 02 F6 | 	mov	arg01, result3
11f80     0C 4E 05 F1 | 	add	fp, #12
11f84     A7 16 62 FC | 	wrlong	arg03, fp
11f88     04 4E 05 F1 | 	add	fp, #4
11f8c     A7 14 62 FC | 	wrlong	arg02, fp
11f90     04 4E 05 F1 | 	add	fp, #4
11f94     A7 12 62 FC | 	wrlong	arg01, fp
11f98     14 4E 85 F1 | 	sub	fp, #20
11f9c     9C 78 BF FD | 	call	#_pop
11fa0     FF 16 02 F6 | 	mov	arg03, result3
11fa4     A7 FA 61 FC | 	wrlong	result1, fp
11fa8     04 4E 05 F1 | 	add	fp, #4
11fac     A7 FC 61 FC | 	wrlong	result2, fp
11fb0     04 4E 05 F1 | 	add	fp, #4
11fb4     A7 16 62 FC | 	wrlong	arg03, fp
11fb8     08 4E 85 F1 | 	sub	fp, #8
11fbc     A7 12 02 F6 | 	mov	arg01, fp
11fc0     08 ED BF FD | 	call	#_converttoint
11fc4     24 4E 05 F1 | 	add	fp, #36
11fc8     A7 FA 61 FC | 	wrlong	result1, fp
11fcc     18 4E 85 F1 | 	sub	fp, #24
11fd0     A7 12 02 F6 | 	mov	arg01, fp
11fd4     0C 4E 85 F1 | 	sub	fp, #12
11fd8     F0 EC BF FD | 	call	#_converttoint
11fdc     28 4E 05 F1 | 	add	fp, #40
11fe0     A7 FA 61 FC | 	wrlong	result1, fp
11fe4     10 4E 85 F1 | 	sub	fp, #16
11fe8     A7 12 02 F6 | 	mov	arg01, fp
11fec     18 4E 85 F1 | 	sub	fp, #24
11ff0     D8 EC BF FD | 	call	#_converttoint
11ff4     2C 4E 05 F1 | 	add	fp, #44
11ff8     A7 FA 61 FC | 	wrlong	result1, fp
11ffc     08 4E 85 F1 | 	sub	fp, #8
12000     A7 12 02 FB | 	rdlong	arg01, fp
12004     04 4E 05 F1 | 	add	fp, #4
12008     A7 14 02 FB | 	rdlong	arg02, fp
1200c     FD 16 02 F6 | 	mov	arg03, result1
12010     28 4E 85 F1 | 	sub	fp, #40
12014     D4 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
12018     A7 F0 03 F6 | 	mov	ptra, fp
1201c     B2 00 A0 FD | 	call	#popregs_
12020                 | _do_sprite_ret
12020     2D 00 64 FD | 	ret
12024                 | 
12024                 | ' 
12024                 | ' sub do_mousex
12024                 | _do_mousex
12024     00 4A 05 F6 | 	mov	COUNT_, #0
12028     A8 00 A0 FD | 	call	#pushregs_
1202c     0C F0 07 F1 | 	add	ptra, #12
12030     08 4E 05 F1 | 	add	fp, #8
12034     A7 3A 68 FC | 	wrlong	#29, fp
12038     08 4E 85 F1 | 	sub	fp, #8
1203c     79 00 00 FF 
12040     C0 E5 05 F1 | 	add	objptr, ##62400
12044     F2 12 02 FB | 	rdlong	arg01, objptr
12048     79 00 00 FF 
1204c     C0 E5 85 F1 | 	sub	objptr, ##62400
12050     A7 12 62 FC | 	wrlong	arg01, fp
12054     A7 12 02 F6 | 	mov	arg01, fp
12058     78 78 BF FD | 	call	#_push
1205c     A7 F0 03 F6 | 	mov	ptra, fp
12060     B2 00 A0 FD | 	call	#popregs_
12064                 | _do_mousex_ret
12064     2D 00 64 FD | 	ret
12068                 | 
12068                 | ' 
12068                 | ' sub do_mousey
12068                 | _do_mousey
12068     00 4A 05 F6 | 	mov	COUNT_, #0
1206c     A8 00 A0 FD | 	call	#pushregs_
12070     0C F0 07 F1 | 	add	ptra, #12
12074     08 4E 05 F1 | 	add	fp, #8
12078     A7 3A 68 FC | 	wrlong	#29, fp
1207c     08 4E 85 F1 | 	sub	fp, #8
12080     79 00 00 FF 
12084     C4 E5 05 F1 | 	add	objptr, ##62404
12088     F2 12 02 FB | 	rdlong	arg01, objptr
1208c     79 00 00 FF 
12090     C4 E5 85 F1 | 	sub	objptr, ##62404
12094     A7 12 62 FC | 	wrlong	arg01, fp
12098     A7 12 02 F6 | 	mov	arg01, fp
1209c     34 78 BF FD | 	call	#_push
120a0     A7 F0 03 F6 | 	mov	ptra, fp
120a4     B2 00 A0 FD | 	call	#popregs_
120a8                 | _do_mousey_ret
120a8     2D 00 64 FD | 	ret
120ac                 | 
120ac                 | ' 
120ac                 | ' sub do_mousew
120ac                 | _do_mousew
120ac     00 4A 05 F6 | 	mov	COUNT_, #0
120b0     A8 00 A0 FD | 	call	#pushregs_
120b4     0C F0 07 F1 | 	add	ptra, #12
120b8     08 4E 05 F1 | 	add	fp, #8
120bc     A7 38 68 FC | 	wrlong	#28, fp
120c0     08 4E 85 F1 | 	sub	fp, #8
120c4     79 00 00 FF 
120c8     CC E5 05 F1 | 	add	objptr, ##62412
120cc     F2 12 02 FB | 	rdlong	arg01, objptr
120d0     79 00 00 FF 
120d4     CC E5 85 F1 | 	sub	objptr, ##62412
120d8     A7 12 62 FC | 	wrlong	arg01, fp
120dc     A7 12 02 F6 | 	mov	arg01, fp
120e0     F0 77 BF FD | 	call	#_push
120e4     A7 F0 03 F6 | 	mov	ptra, fp
120e8     B2 00 A0 FD | 	call	#popregs_
120ec                 | _do_mousew_ret
120ec     2D 00 64 FD | 	ret
120f0                 | 
120f0                 | ' 
120f0                 | ' sub do_mousek
120f0                 | _do_mousek
120f0     00 4A 05 F6 | 	mov	COUNT_, #0
120f4     A8 00 A0 FD | 	call	#pushregs_
120f8     0C F0 07 F1 | 	add	ptra, #12
120fc     08 4E 05 F1 | 	add	fp, #8
12100     A7 3A 68 FC | 	wrlong	#29, fp
12104     08 4E 85 F1 | 	sub	fp, #8
12108     79 00 00 FF 
1210c     C8 E5 05 F1 | 	add	objptr, ##62408
12110     F2 12 02 FB | 	rdlong	arg01, objptr
12114     79 00 00 FF 
12118     C8 E5 85 F1 | 	sub	objptr, ##62408
1211c     A7 12 62 FC | 	wrlong	arg01, fp
12120     A7 12 02 F6 | 	mov	arg01, fp
12124     AC 77 BF FD | 	call	#_push
12128     A7 F0 03 F6 | 	mov	ptra, fp
1212c     B2 00 A0 FD | 	call	#popregs_
12130                 | _do_mousek_ret
12130     2D 00 64 FD | 	ret
12134                 | 
12134                 | ' 
12134                 | ' 
12134                 | ' sub do_rdpin
12134                 | _do_rdpin
12134     00 4A 05 F6 | 	mov	COUNT_, #0
12138     A8 00 A0 FD | 	call	#pushregs_
1213c     0C F0 07 F1 | 	add	ptra, #12
12140     F8 76 BF FD | 	call	#_pop
12144     A7 FA 61 FC | 	wrlong	result1, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 FC 61 FC | 	wrlong	result2, fp
12150     04 4E 05 F1 | 	add	fp, #4
12154     A7 FE 61 FC | 	wrlong	result3, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     A7 12 02 F6 | 	mov	arg01, fp
12160     68 EB BF FD | 	call	#_converttoint
12164     FD FA 89 FA | 	rdpin	result1, result1
12168     7A 00 00 FF 
1216c     CC E4 05 F1 | 	add	objptr, ##62668
12170     F2 FA 61 FC | 	wrlong	result1, objptr
12174     7A 00 00 FF 
12178     CC E4 85 F1 | 	sub	objptr, ##62668
1217c     08 4E 05 F1 | 	add	fp, #8
12180     A7 3A 68 FC | 	wrlong	#29, fp
12184     08 4E 85 F1 | 	sub	fp, #8
12188     A7 08 68 FC | 	wrlong	#4, fp
1218c     A7 12 02 F6 | 	mov	arg01, fp
12190     40 77 BF FD | 	call	#_push
12194     A7 F0 03 F6 | 	mov	ptra, fp
12198     B2 00 A0 FD | 	call	#popregs_
1219c                 | _do_rdpin_ret
1219c     2D 00 64 FD | 	ret
121a0                 | 
121a0                 | ' 
121a0                 | ' sub do_rqpin
121a0                 | _do_rqpin
121a0     00 4A 05 F6 | 	mov	COUNT_, #0
121a4     A8 00 A0 FD | 	call	#pushregs_
121a8     0C F0 07 F1 | 	add	ptra, #12
121ac     8C 76 BF FD | 	call	#_pop
121b0     A7 FA 61 FC | 	wrlong	result1, fp
121b4     04 4E 05 F1 | 	add	fp, #4
121b8     A7 FC 61 FC | 	wrlong	result2, fp
121bc     04 4E 05 F1 | 	add	fp, #4
121c0     A7 FE 61 FC | 	wrlong	result3, fp
121c4     08 4E 85 F1 | 	sub	fp, #8
121c8     A7 12 02 F6 | 	mov	arg01, fp
121cc     FC EA BF FD | 	call	#_converttoint
121d0     FD 12 02 F6 | 	mov	arg01, result1
121d4     00 FA 05 F6 | 	mov	result1, #0
121d8     09 FB 81 FA | 	rqpin	result1, arg01
121dc     7A 00 00 FF 
121e0     CC E4 05 F1 | 	add	objptr, ##62668
121e4     F2 FA 61 FC | 	wrlong	result1, objptr
121e8     7A 00 00 FF 
121ec     CC E4 85 F1 | 	sub	objptr, ##62668
121f0     08 4E 05 F1 | 	add	fp, #8
121f4     A7 3A 68 FC | 	wrlong	#29, fp
121f8     08 4E 85 F1 | 	sub	fp, #8
121fc     A7 08 68 FC | 	wrlong	#4, fp
12200     A7 12 02 F6 | 	mov	arg01, fp
12204     CC 76 BF FD | 	call	#_push
12208     A7 F0 03 F6 | 	mov	ptra, fp
1220c     B2 00 A0 FD | 	call	#popregs_
12210                 | _do_rqpin_ret
12210     2D 00 64 FD | 	ret
12214                 | 
12214                 | ' 
12214                 | ' sub do_pinread
12214                 | _do_pinread
12214     00 4A 05 F6 | 	mov	COUNT_, #0
12218     A8 00 A0 FD | 	call	#pushregs_
1221c     0C F0 07 F1 | 	add	ptra, #12
12220     18 76 BF FD | 	call	#_pop
12224     A7 FA 61 FC | 	wrlong	result1, fp
12228     04 4E 05 F1 | 	add	fp, #4
1222c     A7 FC 61 FC | 	wrlong	result2, fp
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 FE 61 FC | 	wrlong	result3, fp
12238     08 4E 85 F1 | 	sub	fp, #8
1223c     A7 12 02 F6 | 	mov	arg01, fp
12240     88 EA BF FD | 	call	#_converttoint
12244     FD 12 02 F6 | 	mov	arg01, result1
12248     20 12 CE F7 | 	test	arg01, #32 wz
1224c     FF FB 01 56 |  if_ne	mov	result1, inb
12250     FE FB 01 A6 |  if_e	mov	result1, ina
12254     09 FB 41 F0 | 	shr	result1, arg01
12258     06 12 46 F0 | 	shr	arg01, #6
1225c     09 FB 41 F7 | 	zerox	result1, arg01
12260     7A 00 00 FF 
12264     CC E4 05 F1 | 	add	objptr, ##62668
12268     F2 FA 61 FC | 	wrlong	result1, objptr
1226c     7A 00 00 FF 
12270     CC E4 85 F1 | 	sub	objptr, ##62668
12274     08 4E 05 F1 | 	add	fp, #8
12278     A7 3A 68 FC | 	wrlong	#29, fp
1227c     08 4E 85 F1 | 	sub	fp, #8
12280     A7 08 68 FC | 	wrlong	#4, fp
12284     A7 12 02 F6 | 	mov	arg01, fp
12288     48 76 BF FD | 	call	#_push
1228c     A7 F0 03 F6 | 	mov	ptra, fp
12290     B2 00 A0 FD | 	call	#popregs_
12294                 | _do_pinread_ret
12294     2D 00 64 FD | 	ret
12298                 | 
12298                 | ' 
12298                 | ' sub do_gettime
12298                 | _do_gettime
12298     02 4A 05 F6 | 	mov	COUNT_, #2
1229c     A8 00 A0 FD | 	call	#pushregs_
122a0     14 F0 07 F1 | 	add	ptra, #20
122a4                 | ' 
122a4                 | ' const asm 
122a4     1A 1E 72 FD | 	getct	local01 wc
122a8     1A 20 62 FD | 	getct	local02
122ac                 | ' 
122ac                 | ' return hi1, lo1
122ac     10 FD 01 F6 | 	mov	result2, local02
122b0     A7 1E 62 FC | 	wrlong	local01, fp
122b4     04 4E 05 F1 | 	add	fp, #4
122b8     A7 FC 61 FC | 	wrlong	result2, fp
122bc     0C 4E 05 F1 | 	add	fp, #12
122c0     A7 3A 68 FC | 	wrlong	#29, fp
122c4     0C 4E 85 F1 | 	sub	fp, #12
122c8     A7 12 02 FB | 	rdlong	arg01, fp
122cc     04 4E 05 F1 | 	add	fp, #4
122d0     A7 12 62 FC | 	wrlong	arg01, fp
122d4     08 4E 85 F1 | 	sub	fp, #8
122d8     A7 12 02 FB | 	rdlong	arg01, fp
122dc     0C 4E 05 F1 | 	add	fp, #12
122e0     A7 12 62 FC | 	wrlong	arg01, fp
122e4     04 4E 85 F1 | 	sub	fp, #4
122e8     A7 12 02 F6 | 	mov	arg01, fp
122ec     08 4E 85 F1 | 	sub	fp, #8
122f0     E0 75 BF FD | 	call	#_push
122f4     A7 F0 03 F6 | 	mov	ptra, fp
122f8     B2 00 A0 FD | 	call	#popregs_
122fc                 | _do_gettime_ret
122fc     2D 00 64 FD | 	ret
12300                 | 
12300                 | '    
12300                 | ' 
12300                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
12300                 | ' 
12300                 | ' '' ----------------------------- Clear the screen
12300                 | ' 
12300                 | ' sub do_cls
12300                 | _do_cls
12300     56 00 00 FF 
12304     10 E4 05 F1 | 	add	objptr, ##44048
12308     F2 12 02 FB | 	rdlong	arg01, objptr
1230c     04 E4 85 F1 | 	sub	objptr, #4
12310     F2 14 02 FB | 	rdlong	arg02, objptr
12314     56 00 00 FF 
12318     0C E4 85 F1 | 	sub	objptr, ##44044
1231c     D0 55 B0 FD | 	call	#_hg010b_spin2_cls
12320     56 00 00 FF 
12324     10 E4 05 F1 | 	add	objptr, ##44048
12328     F2 14 02 FB | 	rdlong	arg02, objptr
1232c     14 E4 85 F1 | 	sub	objptr, #20
12330     F2 14 62 FC | 	wrlong	arg02, objptr
12334     55 00 00 FF 
12338     FC E5 85 F1 | 	sub	objptr, ##44028
1233c                 | ' cls(ink,paper): plot_color=ink: print
1233c     00 12 06 F6 | 	mov	arg01, #0
12340     90 C1 B0 FD | 	call	#__system___getiolock_0417
12344     FD 12 02 F6 | 	mov	arg01, result1
12348     88 68 B0 FD | 	call	#__system___lockmem
1234c     00 12 06 F6 | 	mov	arg01, #0
12350     0A 14 06 F6 | 	mov	arg02, #10
12354     00 16 06 F6 | 	mov	arg03, #0
12358     10 75 B0 FD | 	call	#__system___basic_print_char
1235c     00 12 06 F6 | 	mov	arg01, #0
12360     70 C1 B0 FD | 	call	#__system___getiolock_0417
12364     FD 00 68 FC | 	wrlong	#0, result1
12368                 | _do_cls_ret
12368     2D 00 64 FD | 	ret
1236c                 | 
1236c                 | ' 
1236c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1236c                 | ' 
1236c                 | ' sub do_color
1236c                 | _do_color
1236c     03 4A 05 F6 | 	mov	COUNT_, #3
12370     A8 00 A0 FD | 	call	#pushregs_
12374     C4 74 BF FD | 	call	#_pop
12378     FD 1E 02 F6 | 	mov	local01, result1
1237c     FE 20 02 F6 | 	mov	local02, result2
12380     FF 22 02 F6 | 	mov	local03, result3
12384     55 00 00 FF 
12388     FC E5 05 F1 | 	add	objptr, ##44028
1238c     F2 1E 62 FC | 	wrlong	local01, objptr
12390     55 00 00 FF 
12394     FC E5 85 F1 | 	sub	objptr, ##44028
12398     A7 F0 03 F6 | 	mov	ptra, fp
1239c     B2 00 A0 FD | 	call	#popregs_
123a0                 | _do_color_ret
123a0     2D 00 64 FD | 	ret
123a4                 | 
123a4                 | ' 
123a4                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
123a4                 | ' 
123a4                 | ' sub do_plot
123a4                 | _do_plot
123a4     08 4A 05 F6 | 	mov	COUNT_, #8
123a8     A8 00 A0 FD | 	call	#pushregs_
123ac     8C 74 BF FD | 	call	#_pop
123b0     FD 1E 02 F6 | 	mov	local01, result1
123b4     FE 14 02 F6 | 	mov	arg02, result2
123b8     FF 16 02 F6 | 	mov	arg03, result3
123bc     0A 21 02 F6 | 	mov	local02, arg02
123c0     0B 23 02 F6 | 	mov	local03, arg03
123c4     74 74 BF FD | 	call	#_pop
123c8     FD 24 02 F6 | 	mov	local04, result1
123cc     FE 26 02 F6 | 	mov	local05, result2
123d0     FF 28 02 F6 | 	mov	local06, result3
123d4     12 2B 02 F6 | 	mov	local07, local04
123d8     0F 2D 02 F6 | 	mov	local08, local01
123dc                 | ' t2=pop() 					 
123dc                 | ' t1=pop()
123dc                 | ' 
123dc                 | ' x=t1.result.iresult
123dc                 | ' y=t2.result.iresult	
123dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
123dc     1C 28 0E F2 | 	cmp	local06, #28 wz
123e0     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
123e4     44 00 90 5D |  if_ne	jmp	#LR__1460
123e8     1C 22 0E F2 | 	cmp	local03, #28 wz
123ec     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
123f0     38 00 90 5D |  if_ne	jmp	#LR__1460
123f4     56 00 00 FF 
123f8     00 E4 05 F1 | 	add	objptr, ##44032
123fc     F2 2A 62 FC | 	wrlong	local07, objptr
12400     04 E4 05 F1 | 	add	objptr, #4
12404     F2 2C 62 FC | 	wrlong	local08, objptr
12408     04 E4 85 F1 | 	sub	objptr, #4
1240c     F2 12 02 FB | 	rdlong	arg01, objptr
12410     04 E4 85 F1 | 	sub	objptr, #4
12414     F2 16 02 FB | 	rdlong	arg03, objptr
12418     55 00 00 FF 
1241c     FC E5 85 F1 | 	sub	objptr, ##44028
12420     16 15 02 F6 | 	mov	arg02, local08
12424     5C 48 B0 FD | 	call	#_hg010b_spin2_putpixel
12428     A4 00 90 FD | 	jmp	#LR__1465
1242c                 | LR__1460
1242c                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
1242c     1E 28 0E F2 | 	cmp	local06, #30 wz
12430     10 00 90 5D |  if_ne	jmp	#LR__1461
12434     12 13 02 F6 | 	mov	arg01, local04
12438     01 14 06 F6 | 	mov	arg02, #1
1243c     44 97 B0 FD | 	call	#__system___float_tointeger
12440     FD 2A 02 F6 | 	mov	local07, result1
12444                 | LR__1461
12444                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
12444     1E 22 0E F2 | 	cmp	local03, #30 wz
12448     10 00 90 5D |  if_ne	jmp	#LR__1462
1244c     0F 13 02 F6 | 	mov	arg01, local01
12450     01 14 06 F6 | 	mov	arg02, #1
12454     2C 97 B0 FD | 	call	#__system___float_tointeger
12458     FD 2C 02 F6 | 	mov	local08, result1
1245c                 | LR__1462
1245c                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
1245c     1F 28 0E F2 | 	cmp	local06, #31 wz
12460     18 00 90 5D |  if_ne	jmp	#LR__1463
12464     12 13 02 F6 | 	mov	arg01, local04
12468     38 9A B0 FD | 	call	#__system____builtin_atof
1246c     FD 12 02 F6 | 	mov	arg01, result1
12470     00 14 06 F6 | 	mov	arg02, #0
12474     0C 97 B0 FD | 	call	#__system___float_tointeger
12478     FD 2A 02 F6 | 	mov	local07, result1
1247c                 | LR__1463
1247c                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
1247c     1F 22 0E F2 | 	cmp	local03, #31 wz
12480     18 00 90 5D |  if_ne	jmp	#LR__1464
12484     0F 13 02 F6 | 	mov	arg01, local01
12488     18 9A B0 FD | 	call	#__system____builtin_atof
1248c     FD 12 02 F6 | 	mov	arg01, result1
12490     00 14 06 F6 | 	mov	arg02, #0
12494     EC 96 B0 FD | 	call	#__system___float_tointeger
12498     FD 2C 02 F6 | 	mov	local08, result1
1249c                 | LR__1464
1249c     56 00 00 FF 
124a0     00 E4 05 F1 | 	add	objptr, ##44032
124a4     F2 2A 62 FC | 	wrlong	local07, objptr
124a8     04 E4 05 F1 | 	add	objptr, #4
124ac     F2 2C 62 FC | 	wrlong	local08, objptr
124b0     04 E4 85 F1 | 	sub	objptr, #4
124b4     F2 12 02 FB | 	rdlong	arg01, objptr
124b8     04 E4 85 F1 | 	sub	objptr, #4
124bc     F2 16 02 FB | 	rdlong	arg03, objptr
124c0     55 00 00 FF 
124c4     FC E5 85 F1 | 	sub	objptr, ##44028
124c8     16 15 02 F6 | 	mov	arg02, local08
124cc     B4 47 B0 FD | 	call	#_hg010b_spin2_putpixel
124d0                 | LR__1465
124d0     A7 F0 03 F6 | 	mov	ptra, fp
124d4     B2 00 A0 FD | 	call	#popregs_
124d8                 | _do_plot_ret
124d8     2D 00 64 FD | 	ret
124dc                 | 
124dc                 | ' 
124dc                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
124dc                 | ' 
124dc                 | ' sub do_draw
124dc                 | _do_draw
124dc     08 4A 05 F6 | 	mov	COUNT_, #8
124e0     A8 00 A0 FD | 	call	#pushregs_
124e4     54 73 BF FD | 	call	#_pop
124e8     FD 1E 02 F6 | 	mov	local01, result1
124ec     FE 18 02 F6 | 	mov	arg04, result2
124f0     FF 16 02 F6 | 	mov	arg03, result3
124f4     0C 21 02 F6 | 	mov	local02, arg04
124f8     0B 23 02 F6 | 	mov	local03, arg03
124fc     3C 73 BF FD | 	call	#_pop
12500     FD 24 02 F6 | 	mov	local04, result1
12504     FE 26 02 F6 | 	mov	local05, result2
12508     FF 28 02 F6 | 	mov	local06, result3
1250c     12 2B 02 F6 | 	mov	local07, local04
12510     0F 2D 02 F6 | 	mov	local08, local01
12514                 | ' 
12514                 | ' t2=pop()
12514                 | ' t1=pop()
12514                 | ' x=t1.result.iresult
12514                 | ' y=t2.result.iresult
12514                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
12514     1C 28 0E F2 | 	cmp	local06, #28 wz
12518     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
1251c     5C 00 90 5D |  if_ne	jmp	#LR__1470
12520     1C 22 0E F2 | 	cmp	local03, #28 wz
12524     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
12528     50 00 90 5D |  if_ne	jmp	#LR__1470
1252c     56 00 00 FF 
12530     00 E4 05 F1 | 	add	objptr, ##44032
12534     F2 12 02 FB | 	rdlong	arg01, objptr
12538     04 E4 05 F1 | 	add	objptr, #4
1253c     F2 14 02 FB | 	rdlong	arg02, objptr
12540     08 E4 85 F1 | 	sub	objptr, #8
12544     F2 1A 02 FB | 	rdlong	arg05, objptr
12548     55 00 00 FF 
1254c     FC E5 85 F1 | 	sub	objptr, ##44028
12550     15 17 02 F6 | 	mov	arg03, local07
12554     16 19 02 F6 | 	mov	arg04, local08
12558     D8 49 B0 FD | 	call	#_hg010b_spin2_draw
1255c     56 00 00 FF 
12560     00 E4 05 F1 | 	add	objptr, ##44032
12564     F2 2A 62 FC | 	wrlong	local07, objptr
12568     04 E4 05 F1 | 	add	objptr, #4
1256c     F2 2C 62 FC | 	wrlong	local08, objptr
12570     56 00 00 FF 
12574     04 E4 85 F1 | 	sub	objptr, ##44036
12578     BC 00 90 FD | 	jmp	#LR__1475
1257c                 | LR__1470
1257c                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
1257c     1E 28 0E F2 | 	cmp	local06, #30 wz
12580     10 00 90 5D |  if_ne	jmp	#LR__1471
12584     12 13 02 F6 | 	mov	arg01, local04
12588     01 14 06 F6 | 	mov	arg02, #1
1258c     F4 95 B0 FD | 	call	#__system___float_tointeger
12590     FD 2A 02 F6 | 	mov	local07, result1
12594                 | LR__1471
12594                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
12594     1E 22 0E F2 | 	cmp	local03, #30 wz
12598     10 00 90 5D |  if_ne	jmp	#LR__1472
1259c     0F 13 02 F6 | 	mov	arg01, local01
125a0     01 14 06 F6 | 	mov	arg02, #1
125a4     DC 95 B0 FD | 	call	#__system___float_tointeger
125a8     FD 2C 02 F6 | 	mov	local08, result1
125ac                 | LR__1472
125ac                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
125ac     1F 28 0E F2 | 	cmp	local06, #31 wz
125b0     18 00 90 5D |  if_ne	jmp	#LR__1473
125b4     12 13 02 F6 | 	mov	arg01, local04
125b8     E8 98 B0 FD | 	call	#__system____builtin_atof
125bc     FD 12 02 F6 | 	mov	arg01, result1
125c0     00 14 06 F6 | 	mov	arg02, #0
125c4     BC 95 B0 FD | 	call	#__system___float_tointeger
125c8     FD 2A 02 F6 | 	mov	local07, result1
125cc                 | LR__1473
125cc                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
125cc     1F 22 0E F2 | 	cmp	local03, #31 wz
125d0     18 00 90 5D |  if_ne	jmp	#LR__1474
125d4     0F 13 02 F6 | 	mov	arg01, local01
125d8     C8 98 B0 FD | 	call	#__system____builtin_atof
125dc     FD 12 02 F6 | 	mov	arg01, result1
125e0     00 14 06 F6 | 	mov	arg02, #0
125e4     9C 95 B0 FD | 	call	#__system___float_tointeger
125e8     FD 2C 02 F6 | 	mov	local08, result1
125ec                 | LR__1474
125ec     56 00 00 FF 
125f0     00 E4 05 F1 | 	add	objptr, ##44032
125f4     F2 12 02 FB | 	rdlong	arg01, objptr
125f8     04 E4 05 F1 | 	add	objptr, #4
125fc     F2 14 02 FB | 	rdlong	arg02, objptr
12600     08 E4 85 F1 | 	sub	objptr, #8
12604     F2 1A 02 FB | 	rdlong	arg05, objptr
12608     55 00 00 FF 
1260c     FC E5 85 F1 | 	sub	objptr, ##44028
12610     15 17 02 F6 | 	mov	arg03, local07
12614     16 19 02 F6 | 	mov	arg04, local08
12618     18 49 B0 FD | 	call	#_hg010b_spin2_draw
1261c     56 00 00 FF 
12620     00 E4 05 F1 | 	add	objptr, ##44032
12624     F2 2A 62 FC | 	wrlong	local07, objptr
12628     04 E4 05 F1 | 	add	objptr, #4
1262c     F2 2C 62 FC | 	wrlong	local08, objptr
12630     56 00 00 FF 
12634     04 E4 85 F1 | 	sub	objptr, ##44036
12638                 | LR__1475
12638     A7 F0 03 F6 | 	mov	ptra, fp
1263c     B2 00 A0 FD | 	call	#popregs_
12640                 | _do_draw_ret
12640     2D 00 64 FD | 	ret
12644                 | 
12644                 | ' 
12644                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12644                 | ' 
12644                 | ' sub do_fcircle
12644                 | _do_fcircle
12644     02 4A 05 F6 | 	mov	COUNT_, #2
12648     A8 00 A0 FD | 	call	#pushregs_
1264c     24 F0 07 F1 | 	add	ptra, #36
12650     E8 71 BF FD | 	call	#_pop
12654     FD 18 02 F6 | 	mov	arg04, result1
12658     FE 16 02 F6 | 	mov	arg03, result2
1265c     FF 14 02 F6 | 	mov	arg02, result3
12660     18 4E 05 F1 | 	add	fp, #24
12664     A7 18 62 FC | 	wrlong	arg04, fp
12668     04 4E 05 F1 | 	add	fp, #4
1266c     A7 16 62 FC | 	wrlong	arg03, fp
12670     04 4E 05 F1 | 	add	fp, #4
12674     A7 14 62 FC | 	wrlong	arg02, fp
12678     20 4E 85 F1 | 	sub	fp, #32
1267c     BC 71 BF FD | 	call	#_pop
12680     FD 18 02 F6 | 	mov	arg04, result1
12684     FE 16 02 F6 | 	mov	arg03, result2
12688     FF 1E 02 F6 | 	mov	local01, result3
1268c     0C 4E 05 F1 | 	add	fp, #12
12690     A7 18 62 FC | 	wrlong	arg04, fp
12694     04 4E 05 F1 | 	add	fp, #4
12698     A7 16 62 FC | 	wrlong	arg03, fp
1269c     04 4E 05 F1 | 	add	fp, #4
126a0     A7 1E 62 FC | 	wrlong	local01, fp
126a4     14 4E 85 F1 | 	sub	fp, #20
126a8     90 71 BF FD | 	call	#_pop
126ac     A7 FA 61 FC | 	wrlong	result1, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 FC 61 FC | 	wrlong	result2, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 FE 61 FC | 	wrlong	result3, fp
126c0                 | ' 
126c0                 | ' t3=pop()
126c0                 | ' t2=pop()
126c0                 | ' t1=pop()
126c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
126c0     FF 18 02 F6 | 	mov	arg04, result3
126c4     08 4E 85 F1 | 	sub	fp, #8
126c8     1C 18 0E F2 | 	cmp	arg04, #28 wz
126cc     08 4E 05 51 |  if_ne	add	fp, #8
126d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
126d4     08 4E 85 51 |  if_ne	sub	fp, #8
126d8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
126dc     7C 00 90 5D |  if_ne	jmp	#LR__1480
126e0     14 4E 05 F1 | 	add	fp, #20
126e4     A7 1E 02 FB | 	rdlong	local01, fp
126e8     14 4E 85 F1 | 	sub	fp, #20
126ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
126f0     14 4E 05 51 |  if_ne	add	fp, #20
126f4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
126f8     14 4E 85 51 |  if_ne	sub	fp, #20
126fc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12700     58 00 90 5D |  if_ne	jmp	#LR__1480
12704     20 4E 05 F1 | 	add	fp, #32
12708     A7 1E 02 FB | 	rdlong	local01, fp
1270c     20 4E 85 F1 | 	sub	fp, #32
12710     1C 1E 0E F2 | 	cmp	local01, #28 wz
12714     20 4E 05 51 |  if_ne	add	fp, #32
12718     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1271c     20 4E 85 51 |  if_ne	sub	fp, #32
12720     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12724     34 00 90 5D |  if_ne	jmp	#LR__1480
12728     A7 12 02 FB | 	rdlong	arg01, fp
1272c     0C 4E 05 F1 | 	add	fp, #12
12730     A7 14 02 FB | 	rdlong	arg02, fp
12734     0C 4E 05 F1 | 	add	fp, #12
12738     A7 16 02 FB | 	rdlong	arg03, fp
1273c     18 4E 85 F1 | 	sub	fp, #24
12740     55 00 00 FF 
12744     FC E5 05 F1 | 	add	objptr, ##44028
12748     F2 18 02 FB | 	rdlong	arg04, objptr
1274c     55 00 00 FF 
12750     FC E5 85 F1 | 	sub	objptr, ##44028
12754     60 4C B0 FD | 	call	#_hg010b_spin2_fcircle
12758                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
12758     54 00 90 FD | 	jmp	#LR__1481
1275c                 | LR__1480
1275c     A7 12 02 F6 | 	mov	arg01, fp
12760     68 E5 BF FD | 	call	#_converttoint
12764     FD 1E 02 F6 | 	mov	local01, result1
12768     0C 4E 05 F1 | 	add	fp, #12
1276c     A7 12 02 F6 | 	mov	arg01, fp
12770     0C 4E 85 F1 | 	sub	fp, #12
12774     54 E5 BF FD | 	call	#_converttoint
12778     FD 20 02 F6 | 	mov	local02, result1
1277c     18 4E 05 F1 | 	add	fp, #24
12780     A7 12 02 F6 | 	mov	arg01, fp
12784     18 4E 85 F1 | 	sub	fp, #24
12788     40 E5 BF FD | 	call	#_converttoint
1278c     FD 16 02 F6 | 	mov	arg03, result1
12790     55 00 00 FF 
12794     FC E5 05 F1 | 	add	objptr, ##44028
12798     F2 18 02 FB | 	rdlong	arg04, objptr
1279c     55 00 00 FF 
127a0     FC E5 85 F1 | 	sub	objptr, ##44028
127a4     0F 13 02 F6 | 	mov	arg01, local01
127a8     10 15 02 F6 | 	mov	arg02, local02
127ac     08 4C B0 FD | 	call	#_hg010b_spin2_fcircle
127b0                 | LR__1481
127b0     A7 F0 03 F6 | 	mov	ptra, fp
127b4     B2 00 A0 FD | 	call	#popregs_
127b8                 | _do_fcircle_ret
127b8     2D 00 64 FD | 	ret
127bc                 | 
127bc                 | ' 
127bc                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
127bc                 | ' 
127bc                 | ' sub do_circle
127bc                 | _do_circle
127bc     02 4A 05 F6 | 	mov	COUNT_, #2
127c0     A8 00 A0 FD | 	call	#pushregs_
127c4     24 F0 07 F1 | 	add	ptra, #36
127c8     70 70 BF FD | 	call	#_pop
127cc     FD 18 02 F6 | 	mov	arg04, result1
127d0     FE 16 02 F6 | 	mov	arg03, result2
127d4     FF 14 02 F6 | 	mov	arg02, result3
127d8     18 4E 05 F1 | 	add	fp, #24
127dc     A7 18 62 FC | 	wrlong	arg04, fp
127e0     04 4E 05 F1 | 	add	fp, #4
127e4     A7 16 62 FC | 	wrlong	arg03, fp
127e8     04 4E 05 F1 | 	add	fp, #4
127ec     A7 14 62 FC | 	wrlong	arg02, fp
127f0     20 4E 85 F1 | 	sub	fp, #32
127f4     44 70 BF FD | 	call	#_pop
127f8     FD 18 02 F6 | 	mov	arg04, result1
127fc     FE 16 02 F6 | 	mov	arg03, result2
12800     FF 1E 02 F6 | 	mov	local01, result3
12804     0C 4E 05 F1 | 	add	fp, #12
12808     A7 18 62 FC | 	wrlong	arg04, fp
1280c     04 4E 05 F1 | 	add	fp, #4
12810     A7 16 62 FC | 	wrlong	arg03, fp
12814     04 4E 05 F1 | 	add	fp, #4
12818     A7 1E 62 FC | 	wrlong	local01, fp
1281c     14 4E 85 F1 | 	sub	fp, #20
12820     18 70 BF FD | 	call	#_pop
12824     A7 FA 61 FC | 	wrlong	result1, fp
12828     04 4E 05 F1 | 	add	fp, #4
1282c     A7 FC 61 FC | 	wrlong	result2, fp
12830     04 4E 05 F1 | 	add	fp, #4
12834     A7 FE 61 FC | 	wrlong	result3, fp
12838                 | ' 
12838                 | ' t3=pop()
12838                 | ' t2=pop()
12838                 | ' t1=pop()
12838                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
12838     FF 18 02 F6 | 	mov	arg04, result3
1283c     08 4E 85 F1 | 	sub	fp, #8
12840     1C 18 0E F2 | 	cmp	arg04, #28 wz
12844     08 4E 05 51 |  if_ne	add	fp, #8
12848     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1284c     08 4E 85 51 |  if_ne	sub	fp, #8
12850     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12854     7C 00 90 5D |  if_ne	jmp	#LR__1490
12858     14 4E 05 F1 | 	add	fp, #20
1285c     A7 1E 02 FB | 	rdlong	local01, fp
12860     14 4E 85 F1 | 	sub	fp, #20
12864     1C 1E 0E F2 | 	cmp	local01, #28 wz
12868     14 4E 05 51 |  if_ne	add	fp, #20
1286c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12870     14 4E 85 51 |  if_ne	sub	fp, #20
12874     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12878     58 00 90 5D |  if_ne	jmp	#LR__1490
1287c     20 4E 05 F1 | 	add	fp, #32
12880     A7 1E 02 FB | 	rdlong	local01, fp
12884     20 4E 85 F1 | 	sub	fp, #32
12888     1C 1E 0E F2 | 	cmp	local01, #28 wz
1288c     20 4E 05 51 |  if_ne	add	fp, #32
12890     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12894     20 4E 85 51 |  if_ne	sub	fp, #32
12898     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1289c     34 00 90 5D |  if_ne	jmp	#LR__1490
128a0     A7 12 02 FB | 	rdlong	arg01, fp
128a4     0C 4E 05 F1 | 	add	fp, #12
128a8     A7 14 02 FB | 	rdlong	arg02, fp
128ac     0C 4E 05 F1 | 	add	fp, #12
128b0     A7 16 02 FB | 	rdlong	arg03, fp
128b4     18 4E 85 F1 | 	sub	fp, #24
128b8     55 00 00 FF 
128bc     FC E5 05 F1 | 	add	objptr, ##44028
128c0     F2 18 02 FB | 	rdlong	arg04, objptr
128c4     55 00 00 FF 
128c8     FC E5 85 F1 | 	sub	objptr, ##44028
128cc     F4 4B B0 FD | 	call	#_hg010b_spin2_circle
128d0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
128d0     54 00 90 FD | 	jmp	#LR__1491
128d4                 | LR__1490
128d4     A7 12 02 F6 | 	mov	arg01, fp
128d8     F0 E3 BF FD | 	call	#_converttoint
128dc     FD 1E 02 F6 | 	mov	local01, result1
128e0     0C 4E 05 F1 | 	add	fp, #12
128e4     A7 12 02 F6 | 	mov	arg01, fp
128e8     0C 4E 85 F1 | 	sub	fp, #12
128ec     DC E3 BF FD | 	call	#_converttoint
128f0     FD 20 02 F6 | 	mov	local02, result1
128f4     18 4E 05 F1 | 	add	fp, #24
128f8     A7 12 02 F6 | 	mov	arg01, fp
128fc     18 4E 85 F1 | 	sub	fp, #24
12900     C8 E3 BF FD | 	call	#_converttoint
12904     FD 16 02 F6 | 	mov	arg03, result1
12908     55 00 00 FF 
1290c     FC E5 05 F1 | 	add	objptr, ##44028
12910     F2 18 02 FB | 	rdlong	arg04, objptr
12914     55 00 00 FF 
12918     FC E5 85 F1 | 	sub	objptr, ##44028
1291c     0F 13 02 F6 | 	mov	arg01, local01
12920     10 15 02 F6 | 	mov	arg02, local02
12924     9C 4B B0 FD | 	call	#_hg010b_spin2_circle
12928                 | LR__1491
12928     A7 F0 03 F6 | 	mov	ptra, fp
1292c     B2 00 A0 FD | 	call	#popregs_
12930                 | _do_circle_ret
12930     2D 00 64 FD | 	ret
12934                 | 
12934                 | ' 
12934                 | ' ' -------------------------- Draw a rectangle
12934                 | ' 
12934                 | ' sub do_box
12934                 | _do_box
12934     03 4A 05 F6 | 	mov	COUNT_, #3
12938     A8 00 A0 FD | 	call	#pushregs_
1293c     30 F0 07 F1 | 	add	ptra, #48
12940     F8 6E BF FD | 	call	#_pop
12944     FD 1A 02 F6 | 	mov	arg05, result1
12948     FE 18 02 F6 | 	mov	arg04, result2
1294c     FF 16 02 F6 | 	mov	arg03, result3
12950     24 4E 05 F1 | 	add	fp, #36
12954     A7 1A 62 FC | 	wrlong	arg05, fp
12958     04 4E 05 F1 | 	add	fp, #4
1295c     A7 18 62 FC | 	wrlong	arg04, fp
12960     04 4E 05 F1 | 	add	fp, #4
12964     A7 16 62 FC | 	wrlong	arg03, fp
12968     2C 4E 85 F1 | 	sub	fp, #44
1296c     CC 6E BF FD | 	call	#_pop
12970     FD 1A 02 F6 | 	mov	arg05, result1
12974     FE 18 02 F6 | 	mov	arg04, result2
12978     FF 16 02 F6 | 	mov	arg03, result3
1297c     18 4E 05 F1 | 	add	fp, #24
12980     A7 1A 62 FC | 	wrlong	arg05, fp
12984     04 4E 05 F1 | 	add	fp, #4
12988     A7 18 62 FC | 	wrlong	arg04, fp
1298c     04 4E 05 F1 | 	add	fp, #4
12990     A7 16 62 FC | 	wrlong	arg03, fp
12994     20 4E 85 F1 | 	sub	fp, #32
12998     A0 6E BF FD | 	call	#_pop
1299c     FD 1A 02 F6 | 	mov	arg05, result1
129a0     FE 18 02 F6 | 	mov	arg04, result2
129a4     FF 1E 02 F6 | 	mov	local01, result3
129a8     0C 4E 05 F1 | 	add	fp, #12
129ac     A7 1A 62 FC | 	wrlong	arg05, fp
129b0     04 4E 05 F1 | 	add	fp, #4
129b4     A7 18 62 FC | 	wrlong	arg04, fp
129b8     04 4E 05 F1 | 	add	fp, #4
129bc     A7 1E 62 FC | 	wrlong	local01, fp
129c0     14 4E 85 F1 | 	sub	fp, #20
129c4     74 6E BF FD | 	call	#_pop
129c8     A7 FA 61 FC | 	wrlong	result1, fp
129cc     04 4E 05 F1 | 	add	fp, #4
129d0     A7 FC 61 FC | 	wrlong	result2, fp
129d4     04 4E 05 F1 | 	add	fp, #4
129d8     A7 FE 61 FC | 	wrlong	result3, fp
129dc                 | ' 
129dc                 | ' t4=pop()
129dc                 | ' t3=pop()
129dc                 | ' t2=pop()
129dc                 | ' t1=pop()
129dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
129dc     FF 1A 02 F6 | 	mov	arg05, result3
129e0     08 4E 85 F1 | 	sub	fp, #8
129e4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
129e8     08 4E 05 51 |  if_ne	add	fp, #8
129ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
129f0     08 4E 85 51 |  if_ne	sub	fp, #8
129f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
129f8     A8 00 90 5D |  if_ne	jmp	#LR__1500
129fc     14 4E 05 F1 | 	add	fp, #20
12a00     A7 1E 02 FB | 	rdlong	local01, fp
12a04     14 4E 85 F1 | 	sub	fp, #20
12a08     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a0c     14 4E 05 51 |  if_ne	add	fp, #20
12a10     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12a14     14 4E 85 51 |  if_ne	sub	fp, #20
12a18     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12a1c     84 00 90 5D |  if_ne	jmp	#LR__1500
12a20     20 4E 05 F1 | 	add	fp, #32
12a24     A7 1E 02 FB | 	rdlong	local01, fp
12a28     20 4E 85 F1 | 	sub	fp, #32
12a2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a30     20 4E 05 51 |  if_ne	add	fp, #32
12a34     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12a38     20 4E 85 51 |  if_ne	sub	fp, #32
12a3c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12a40     60 00 90 5D |  if_ne	jmp	#LR__1500
12a44     2C 4E 05 F1 | 	add	fp, #44
12a48     A7 1E 02 FB | 	rdlong	local01, fp
12a4c     2C 4E 85 F1 | 	sub	fp, #44
12a50     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a54     2C 4E 05 51 |  if_ne	add	fp, #44
12a58     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12a5c     2C 4E 85 51 |  if_ne	sub	fp, #44
12a60     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12a64     3C 00 90 5D |  if_ne	jmp	#LR__1500
12a68     A7 12 02 FB | 	rdlong	arg01, fp
12a6c     0C 4E 05 F1 | 	add	fp, #12
12a70     A7 14 02 FB | 	rdlong	arg02, fp
12a74     0C 4E 05 F1 | 	add	fp, #12
12a78     A7 16 02 FB | 	rdlong	arg03, fp
12a7c     0C 4E 05 F1 | 	add	fp, #12
12a80     A7 18 02 FB | 	rdlong	arg04, fp
12a84     24 4E 85 F1 | 	sub	fp, #36
12a88     55 00 00 FF 
12a8c     FC E5 05 F1 | 	add	objptr, ##44028
12a90     F2 1A 02 FB | 	rdlong	arg05, objptr
12a94     55 00 00 FF 
12a98     FC E5 85 F1 | 	sub	objptr, ##44028
12a9c     F0 4B B0 FD | 	call	#_hg010b_spin2_box
12aa0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12aa0     6C 00 90 FD | 	jmp	#LR__1501
12aa4                 | LR__1500
12aa4     A7 12 02 F6 | 	mov	arg01, fp
12aa8     20 E2 BF FD | 	call	#_converttoint
12aac     FD 20 02 F6 | 	mov	local02, result1
12ab0     0C 4E 05 F1 | 	add	fp, #12
12ab4     A7 12 02 F6 | 	mov	arg01, fp
12ab8     0C 4E 85 F1 | 	sub	fp, #12
12abc     0C E2 BF FD | 	call	#_converttoint
12ac0     FD 22 02 F6 | 	mov	local03, result1
12ac4     18 4E 05 F1 | 	add	fp, #24
12ac8     A7 12 02 F6 | 	mov	arg01, fp
12acc     18 4E 85 F1 | 	sub	fp, #24
12ad0     F8 E1 BF FD | 	call	#_converttoint
12ad4     FD 1E 02 F6 | 	mov	local01, result1
12ad8     24 4E 05 F1 | 	add	fp, #36
12adc     A7 12 02 F6 | 	mov	arg01, fp
12ae0     24 4E 85 F1 | 	sub	fp, #36
12ae4     E4 E1 BF FD | 	call	#_converttoint
12ae8     FD 18 02 F6 | 	mov	arg04, result1
12aec     55 00 00 FF 
12af0     FC E5 05 F1 | 	add	objptr, ##44028
12af4     F2 1A 02 FB | 	rdlong	arg05, objptr
12af8     55 00 00 FF 
12afc     FC E5 85 F1 | 	sub	objptr, ##44028
12b00     10 13 02 F6 | 	mov	arg01, local02
12b04     11 15 02 F6 | 	mov	arg02, local03
12b08     0F 17 02 F6 | 	mov	arg03, local01
12b0c     80 4B B0 FD | 	call	#_hg010b_spin2_box
12b10                 | LR__1501
12b10     A7 F0 03 F6 | 	mov	ptra, fp
12b14     B2 00 A0 FD | 	call	#popregs_
12b18                 | _do_box_ret
12b18     2D 00 64 FD | 	ret
12b1c                 | 
12b1c                 | ' 
12b1c                 | ' sub do_fill
12b1c                 | _do_fill
12b1c     03 4A 05 F6 | 	mov	COUNT_, #3
12b20     A8 00 A0 FD | 	call	#pushregs_
12b24     30 F0 07 F1 | 	add	ptra, #48
12b28     10 6D BF FD | 	call	#_pop
12b2c     FD 18 02 F6 | 	mov	arg04, result1
12b30     FE 16 02 F6 | 	mov	arg03, result2
12b34     FF 14 02 F6 | 	mov	arg02, result3
12b38     24 4E 05 F1 | 	add	fp, #36
12b3c     A7 18 62 FC | 	wrlong	arg04, fp
12b40     04 4E 05 F1 | 	add	fp, #4
12b44     A7 16 62 FC | 	wrlong	arg03, fp
12b48     04 4E 05 F1 | 	add	fp, #4
12b4c     A7 14 62 FC | 	wrlong	arg02, fp
12b50     2C 4E 85 F1 | 	sub	fp, #44
12b54     E4 6C BF FD | 	call	#_pop
12b58     FD 18 02 F6 | 	mov	arg04, result1
12b5c     FE 16 02 F6 | 	mov	arg03, result2
12b60     FF 14 02 F6 | 	mov	arg02, result3
12b64     18 4E 05 F1 | 	add	fp, #24
12b68     A7 18 62 FC | 	wrlong	arg04, fp
12b6c     04 4E 05 F1 | 	add	fp, #4
12b70     A7 16 62 FC | 	wrlong	arg03, fp
12b74     04 4E 05 F1 | 	add	fp, #4
12b78     A7 14 62 FC | 	wrlong	arg02, fp
12b7c     20 4E 85 F1 | 	sub	fp, #32
12b80     B8 6C BF FD | 	call	#_pop
12b84     FD 18 02 F6 | 	mov	arg04, result1
12b88     FE 16 02 F6 | 	mov	arg03, result2
12b8c     FF 1E 02 F6 | 	mov	local01, result3
12b90     0C 4E 05 F1 | 	add	fp, #12
12b94     A7 18 62 FC | 	wrlong	arg04, fp
12b98     04 4E 05 F1 | 	add	fp, #4
12b9c     A7 16 62 FC | 	wrlong	arg03, fp
12ba0     04 4E 05 F1 | 	add	fp, #4
12ba4     A7 1E 62 FC | 	wrlong	local01, fp
12ba8     14 4E 85 F1 | 	sub	fp, #20
12bac     8C 6C BF FD | 	call	#_pop
12bb0     A7 FA 61 FC | 	wrlong	result1, fp
12bb4     04 4E 05 F1 | 	add	fp, #4
12bb8     A7 FC 61 FC | 	wrlong	result2, fp
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 FE 61 FC | 	wrlong	result3, fp
12bc4                 | ' 
12bc4                 | ' t4=pop()
12bc4                 | ' t3=pop()
12bc4                 | ' t2=pop()
12bc4                 | ' t1=pop()
12bc4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12bc4     FF 18 02 F6 | 	mov	arg04, result3
12bc8     08 4E 85 F1 | 	sub	fp, #8
12bcc     1C 18 0E F2 | 	cmp	arg04, #28 wz
12bd0     08 4E 05 51 |  if_ne	add	fp, #8
12bd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12bd8     08 4E 85 51 |  if_ne	sub	fp, #8
12bdc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12be0     94 00 90 5D |  if_ne	jmp	#LR__1510
12be4     14 4E 05 F1 | 	add	fp, #20
12be8     A7 1E 02 FB | 	rdlong	local01, fp
12bec     14 4E 85 F1 | 	sub	fp, #20
12bf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12bf4     14 4E 05 51 |  if_ne	add	fp, #20
12bf8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12bfc     14 4E 85 51 |  if_ne	sub	fp, #20
12c00     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c04     70 00 90 5D |  if_ne	jmp	#LR__1510
12c08     20 4E 05 F1 | 	add	fp, #32
12c0c     A7 1E 02 FB | 	rdlong	local01, fp
12c10     20 4E 85 F1 | 	sub	fp, #32
12c14     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c18     20 4E 05 51 |  if_ne	add	fp, #32
12c1c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c20     20 4E 85 51 |  if_ne	sub	fp, #32
12c24     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c28     4C 00 90 5D |  if_ne	jmp	#LR__1510
12c2c     2C 4E 05 F1 | 	add	fp, #44
12c30     A7 1E 02 FB | 	rdlong	local01, fp
12c34     2C 4E 85 F1 | 	sub	fp, #44
12c38     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c3c     2C 4E 05 51 |  if_ne	add	fp, #44
12c40     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12c44     2C 4E 85 51 |  if_ne	sub	fp, #44
12c48     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12c4c     28 00 90 5D |  if_ne	jmp	#LR__1510
12c50     A7 12 02 FB | 	rdlong	arg01, fp
12c54     0C 4E 05 F1 | 	add	fp, #12
12c58     A7 14 02 FB | 	rdlong	arg02, fp
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 16 02 FB | 	rdlong	arg03, fp
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 18 02 FB | 	rdlong	arg04, fp
12c6c     24 4E 85 F1 | 	sub	fp, #36
12c70     B0 44 B0 FD | 	call	#_hg010b_spin2_fill
12c74                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12c74     58 00 90 FD | 	jmp	#LR__1511
12c78                 | LR__1510
12c78     A7 12 02 F6 | 	mov	arg01, fp
12c7c     4C E0 BF FD | 	call	#_converttoint
12c80     FD 20 02 F6 | 	mov	local02, result1
12c84     0C 4E 05 F1 | 	add	fp, #12
12c88     A7 12 02 F6 | 	mov	arg01, fp
12c8c     0C 4E 85 F1 | 	sub	fp, #12
12c90     38 E0 BF FD | 	call	#_converttoint
12c94     FD 22 02 F6 | 	mov	local03, result1
12c98     18 4E 05 F1 | 	add	fp, #24
12c9c     A7 12 02 F6 | 	mov	arg01, fp
12ca0     18 4E 85 F1 | 	sub	fp, #24
12ca4     24 E0 BF FD | 	call	#_converttoint
12ca8     FD 1E 02 F6 | 	mov	local01, result1
12cac     24 4E 05 F1 | 	add	fp, #36
12cb0     A7 12 02 F6 | 	mov	arg01, fp
12cb4     24 4E 85 F1 | 	sub	fp, #36
12cb8     10 E0 BF FD | 	call	#_converttoint
12cbc     FD 18 02 F6 | 	mov	arg04, result1
12cc0     10 13 02 F6 | 	mov	arg01, local02
12cc4     11 15 02 F6 | 	mov	arg02, local03
12cc8     0F 17 02 F6 | 	mov	arg03, local01
12ccc     54 44 B0 FD | 	call	#_hg010b_spin2_fill
12cd0                 | LR__1511
12cd0     A7 F0 03 F6 | 	mov	ptra, fp
12cd4     B2 00 A0 FD | 	call	#popregs_
12cd8                 | _do_fill_ret
12cd8     2D 00 64 FD | 	ret
12cdc                 | 
12cdc                 | ' 
12cdc                 | ' ' -------------------------- Draw a frane
12cdc                 | ' 
12cdc                 | ' sub do_frame
12cdc                 | _do_frame
12cdc     03 4A 05 F6 | 	mov	COUNT_, #3
12ce0     A8 00 A0 FD | 	call	#pushregs_
12ce4     30 F0 07 F1 | 	add	ptra, #48
12ce8     50 6B BF FD | 	call	#_pop
12cec     FD 1A 02 F6 | 	mov	arg05, result1
12cf0     FE 18 02 F6 | 	mov	arg04, result2
12cf4     FF 16 02 F6 | 	mov	arg03, result3
12cf8     24 4E 05 F1 | 	add	fp, #36
12cfc     A7 1A 62 FC | 	wrlong	arg05, fp
12d00     04 4E 05 F1 | 	add	fp, #4
12d04     A7 18 62 FC | 	wrlong	arg04, fp
12d08     04 4E 05 F1 | 	add	fp, #4
12d0c     A7 16 62 FC | 	wrlong	arg03, fp
12d10     2C 4E 85 F1 | 	sub	fp, #44
12d14     24 6B BF FD | 	call	#_pop
12d18     FD 1A 02 F6 | 	mov	arg05, result1
12d1c     FE 18 02 F6 | 	mov	arg04, result2
12d20     FF 16 02 F6 | 	mov	arg03, result3
12d24     18 4E 05 F1 | 	add	fp, #24
12d28     A7 1A 62 FC | 	wrlong	arg05, fp
12d2c     04 4E 05 F1 | 	add	fp, #4
12d30     A7 18 62 FC | 	wrlong	arg04, fp
12d34     04 4E 05 F1 | 	add	fp, #4
12d38     A7 16 62 FC | 	wrlong	arg03, fp
12d3c     20 4E 85 F1 | 	sub	fp, #32
12d40     F8 6A BF FD | 	call	#_pop
12d44     FD 1A 02 F6 | 	mov	arg05, result1
12d48     FE 18 02 F6 | 	mov	arg04, result2
12d4c     FF 1E 02 F6 | 	mov	local01, result3
12d50     0C 4E 05 F1 | 	add	fp, #12
12d54     A7 1A 62 FC | 	wrlong	arg05, fp
12d58     04 4E 05 F1 | 	add	fp, #4
12d5c     A7 18 62 FC | 	wrlong	arg04, fp
12d60     04 4E 05 F1 | 	add	fp, #4
12d64     A7 1E 62 FC | 	wrlong	local01, fp
12d68     14 4E 85 F1 | 	sub	fp, #20
12d6c     CC 6A BF FD | 	call	#_pop
12d70     A7 FA 61 FC | 	wrlong	result1, fp
12d74     04 4E 05 F1 | 	add	fp, #4
12d78     A7 FC 61 FC | 	wrlong	result2, fp
12d7c     04 4E 05 F1 | 	add	fp, #4
12d80     A7 FE 61 FC | 	wrlong	result3, fp
12d84                 | ' 
12d84                 | ' t4=pop()
12d84                 | ' t3=pop()
12d84                 | ' t2=pop()
12d84                 | ' t1=pop()
12d84                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12d84     FF 1A 02 F6 | 	mov	arg05, result3
12d88     08 4E 85 F1 | 	sub	fp, #8
12d8c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12d90     08 4E 05 51 |  if_ne	add	fp, #8
12d94     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12d98     08 4E 85 51 |  if_ne	sub	fp, #8
12d9c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12da0     A8 00 90 5D |  if_ne	jmp	#LR__1520
12da4     14 4E 05 F1 | 	add	fp, #20
12da8     A7 1E 02 FB | 	rdlong	local01, fp
12dac     14 4E 85 F1 | 	sub	fp, #20
12db0     1C 1E 0E F2 | 	cmp	local01, #28 wz
12db4     14 4E 05 51 |  if_ne	add	fp, #20
12db8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12dbc     14 4E 85 51 |  if_ne	sub	fp, #20
12dc0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12dc4     84 00 90 5D |  if_ne	jmp	#LR__1520
12dc8     20 4E 05 F1 | 	add	fp, #32
12dcc     A7 1E 02 FB | 	rdlong	local01, fp
12dd0     20 4E 85 F1 | 	sub	fp, #32
12dd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dd8     20 4E 05 51 |  if_ne	add	fp, #32
12ddc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12de0     20 4E 85 51 |  if_ne	sub	fp, #32
12de4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12de8     60 00 90 5D |  if_ne	jmp	#LR__1520
12dec     2C 4E 05 F1 | 	add	fp, #44
12df0     A7 1E 02 FB | 	rdlong	local01, fp
12df4     2C 4E 85 F1 | 	sub	fp, #44
12df8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dfc     2C 4E 05 51 |  if_ne	add	fp, #44
12e00     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12e04     2C 4E 85 51 |  if_ne	sub	fp, #44
12e08     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12e0c     3C 00 90 5D |  if_ne	jmp	#LR__1520
12e10     A7 12 02 FB | 	rdlong	arg01, fp
12e14     0C 4E 05 F1 | 	add	fp, #12
12e18     A7 14 02 FB | 	rdlong	arg02, fp
12e1c     0C 4E 05 F1 | 	add	fp, #12
12e20     A7 16 02 FB | 	rdlong	arg03, fp
12e24     0C 4E 05 F1 | 	add	fp, #12
12e28     A7 18 02 FB | 	rdlong	arg04, fp
12e2c     24 4E 85 F1 | 	sub	fp, #36
12e30     55 00 00 FF 
12e34     FC E5 05 F1 | 	add	objptr, ##44028
12e38     F2 1A 02 FB | 	rdlong	arg05, objptr
12e3c     55 00 00 FF 
12e40     FC E5 85 F1 | 	sub	objptr, ##44028
12e44     C8 47 B0 FD | 	call	#_hg010b_spin2_frame
12e48                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12e48     6C 00 90 FD | 	jmp	#LR__1521
12e4c                 | LR__1520
12e4c     A7 12 02 F6 | 	mov	arg01, fp
12e50     78 DE BF FD | 	call	#_converttoint
12e54     FD 20 02 F6 | 	mov	local02, result1
12e58     0C 4E 05 F1 | 	add	fp, #12
12e5c     A7 12 02 F6 | 	mov	arg01, fp
12e60     0C 4E 85 F1 | 	sub	fp, #12
12e64     64 DE BF FD | 	call	#_converttoint
12e68     FD 22 02 F6 | 	mov	local03, result1
12e6c     18 4E 05 F1 | 	add	fp, #24
12e70     A7 12 02 F6 | 	mov	arg01, fp
12e74     18 4E 85 F1 | 	sub	fp, #24
12e78     50 DE BF FD | 	call	#_converttoint
12e7c     FD 1E 02 F6 | 	mov	local01, result1
12e80     24 4E 05 F1 | 	add	fp, #36
12e84     A7 12 02 F6 | 	mov	arg01, fp
12e88     24 4E 85 F1 | 	sub	fp, #36
12e8c     3C DE BF FD | 	call	#_converttoint
12e90     FD 18 02 F6 | 	mov	arg04, result1
12e94     55 00 00 FF 
12e98     FC E5 05 F1 | 	add	objptr, ##44028
12e9c     F2 1A 02 FB | 	rdlong	arg05, objptr
12ea0     55 00 00 FF 
12ea4     FC E5 85 F1 | 	sub	objptr, ##44028
12ea8     10 13 02 F6 | 	mov	arg01, local02
12eac     11 15 02 F6 | 	mov	arg02, local03
12eb0     0F 17 02 F6 | 	mov	arg03, local01
12eb4     58 47 B0 FD | 	call	#_hg010b_spin2_frame
12eb8                 | LR__1521
12eb8     A7 F0 03 F6 | 	mov	ptra, fp
12ebc     B2 00 A0 FD | 	call	#popregs_
12ec0                 | _do_frame_ret
12ec0     2D 00 64 FD | 	ret
12ec4                 | 
12ec4                 | ' 
12ec4                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12ec4                 | ' 
12ec4                 | ' ' ------------------------- Print to the screem
12ec4                 | ' 
12ec4                 | ' sub do_print  
12ec4                 | _do_print
12ec4     0A 4A 05 F6 | 	mov	COUNT_, #10
12ec8     A8 00 A0 FD | 	call	#pushregs_
12ecc     00 24 06 F6 | 	mov	local04, #0
12ed0     68 69 BF FD | 	call	#_pop
12ed4     FD 26 02 F6 | 	mov	local05, result1
12ed8     FE 28 02 F6 | 	mov	local06, result2
12edc     FF 2A 02 F6 | 	mov	local07, result3
12ee0     13 1F 02 F6 | 	mov	local01, local05
12ee4     14 21 02 F6 | 	mov	local02, local06
12ee8     15 23 02 F6 | 	mov	local03, local07
12eec                 | '  
12eec                 | ' r=0
12eec                 | ' t1=pop() 
12eec                 | ' 'print t1.result_type,t1.result.uresult
12eec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12eec     2B 22 0E F2 | 	cmp	local03, #43 wz
12ef0     14 00 90 5D |  if_ne	jmp	#LR__1530
12ef4     0F 13 02 F6 | 	mov	arg01, local01
12ef8     48 9A BF FD | 	call	#_convertstring
12efc     FD 26 02 F6 | 	mov	local05, result1
12f00     13 1F 02 F6 | 	mov	local01, local05
12f04     1F 22 06 F6 | 	mov	local03, #31
12f08                 | LR__1530
12f08                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12f08     21 22 0E F2 | 	cmp	local03, #33 wz
12f0c     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12f10     20 00 90 5D |  if_ne	jmp	#LR__1531
12f14     11 25 02 F6 | 	mov	local04, local03
12f18     20 69 BF FD | 	call	#_pop
12f1c     FD 26 02 F6 | 	mov	local05, result1
12f20     FE 28 02 F6 | 	mov	local06, result2
12f24     FF 2A 02 F6 | 	mov	local07, result3
12f28     13 1F 02 F6 | 	mov	local01, local05
12f2c     14 21 02 F6 | 	mov	local02, local06
12f30     15 23 02 F6 | 	mov	local03, local07
12f34                 | LR__1531
12f34                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12f34     20 22 0E F2 | 	cmp	local03, #32 wz
12f38     11 25 02 A6 |  if_e	mov	local04, local03
12f3c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12f3c     FF 22 0E F2 | 	cmp	local03, #255 wz
12f40     0C 00 90 5D |  if_ne	jmp	#LR__1532
12f44     0F 13 02 F6 | 	mov	arg01, local01
12f48     64 27 B0 FD | 	call	#_printerror
12f4c     30 04 90 FD | 	jmp	#LR__1549
12f50                 | LR__1532
12f50                 | ' 
12f50                 | ' if r=print_mod_comma  then
12f50     21 24 0E F2 | 	cmp	local04, #33 wz
12f54     AC 01 90 5D |  if_ne	jmp	#LR__1537
12f58                 | '   if t1.result_type=result_int then print t1.result.iresult,
12f58     1C 22 0E F2 | 	cmp	local03, #28 wz
12f5c     64 00 90 5D |  if_ne	jmp	#LR__1533
12f60     00 12 06 F6 | 	mov	arg01, #0
12f64     6C B5 B0 FD | 	call	#__system___getiolock_0417
12f68     FD 12 02 F6 | 	mov	arg01, result1
12f6c     64 5C B0 FD | 	call	#__system___lockmem
12f70     00 28 06 F6 | 	mov	local06, #0
12f74     00 12 06 F6 | 	mov	arg01, #0
12f78     0F 15 02 F6 | 	mov	arg02, local01
12f7c     00 16 06 F6 | 	mov	arg03, #0
12f80     0A 18 06 F6 | 	mov	arg04, #10
12f84     80 69 B0 FD | 	call	#__system___basic_print_integer
12f88     FD 2A 02 F6 | 	mov	local07, result1
12f8c     14 27 02 F6 | 	mov	local05, local06
12f90     15 27 02 F1 | 	add	local05, local07
12f94     00 2C 06 F6 | 	mov	local08, #0
12f98     00 12 06 F6 | 	mov	arg01, #0
12f9c     09 14 06 F6 | 	mov	arg02, #9
12fa0     00 16 06 F6 | 	mov	arg03, #0
12fa4     C4 68 B0 FD | 	call	#__system___basic_print_char
12fa8     FD 2E 02 F6 | 	mov	local09, result1
12fac     FD 26 02 F1 | 	add	local05, result1
12fb0     00 12 06 F6 | 	mov	arg01, #0
12fb4     1C B5 B0 FD | 	call	#__system___getiolock_0417
12fb8     FD 00 68 FC | 	wrlong	#0, result1
12fbc     00 FA 05 F6 | 	mov	result1, #0
12fc0     00 30 06 F6 | 	mov	local10, #0
12fc4                 | LR__1533
12fc4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
12fc4     1D 22 0E F2 | 	cmp	local03, #29 wz
12fc8     64 00 90 5D |  if_ne	jmp	#LR__1534
12fcc     00 12 06 F6 | 	mov	arg01, #0
12fd0     00 B5 B0 FD | 	call	#__system___getiolock_0417
12fd4     FD 12 02 F6 | 	mov	arg01, result1
12fd8     F8 5B B0 FD | 	call	#__system___lockmem
12fdc     00 28 06 F6 | 	mov	local06, #0
12fe0     00 12 06 F6 | 	mov	arg01, #0
12fe4     0F 15 02 F6 | 	mov	arg02, local01
12fe8     00 16 06 F6 | 	mov	arg03, #0
12fec     0A 18 06 F6 | 	mov	arg04, #10
12ff0     54 69 B0 FD | 	call	#__system___basic_print_unsigned
12ff4     FD 2A 02 F6 | 	mov	local07, result1
12ff8     14 27 02 F6 | 	mov	local05, local06
12ffc     15 27 02 F1 | 	add	local05, local07
13000     00 2C 06 F6 | 	mov	local08, #0
13004     00 12 06 F6 | 	mov	arg01, #0
13008     09 14 06 F6 | 	mov	arg02, #9
1300c     00 16 06 F6 | 	mov	arg03, #0
13010     58 68 B0 FD | 	call	#__system___basic_print_char
13014     FD 2E 02 F6 | 	mov	local09, result1
13018     FD 26 02 F1 | 	add	local05, result1
1301c     00 12 06 F6 | 	mov	arg01, #0
13020     B0 B4 B0 FD | 	call	#__system___getiolock_0417
13024     FD 00 68 FC | 	wrlong	#0, result1
13028     00 FA 05 F6 | 	mov	result1, #0
1302c     00 30 06 F6 | 	mov	local10, #0
13030                 | LR__1534
13030                 | '   if t1.result_type=result_float then print t1.result.fresult,
13030     1E 22 0E F2 | 	cmp	local03, #30 wz
13034     64 00 90 5D |  if_ne	jmp	#LR__1535
13038     00 12 06 F6 | 	mov	arg01, #0
1303c     94 B4 B0 FD | 	call	#__system___getiolock_0417
13040     FD 12 02 F6 | 	mov	arg01, result1
13044     8C 5B B0 FD | 	call	#__system___lockmem
13048     00 28 06 F6 | 	mov	local06, #0
1304c     00 12 06 F6 | 	mov	arg01, #0
13050     0F 15 02 F6 | 	mov	arg02, local01
13054     00 16 06 F6 | 	mov	arg03, #0
13058     23 18 06 F6 | 	mov	arg04, #35
1305c     74 8C B0 FD | 	call	#__system___basic_print_float
13060     FD 2A 02 F6 | 	mov	local07, result1
13064     14 27 02 F6 | 	mov	local05, local06
13068     15 27 02 F1 | 	add	local05, local07
1306c     00 2C 06 F6 | 	mov	local08, #0
13070     00 12 06 F6 | 	mov	arg01, #0
13074     09 14 06 F6 | 	mov	arg02, #9
13078     00 16 06 F6 | 	mov	arg03, #0
1307c     EC 67 B0 FD | 	call	#__system___basic_print_char
13080     FD 2E 02 F6 | 	mov	local09, result1
13084     FD 26 02 F1 | 	add	local05, result1
13088     00 12 06 F6 | 	mov	arg01, #0
1308c     44 B4 B0 FD | 	call	#__system___getiolock_0417
13090     FD 00 68 FC | 	wrlong	#0, result1
13094     00 FA 05 F6 | 	mov	result1, #0
13098     00 30 06 F6 | 	mov	local10, #0
1309c                 | LR__1535
1309c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1309c     1F 22 0E F2 | 	cmp	local03, #31 wz
130a0     60 00 90 5D |  if_ne	jmp	#LR__1536
130a4     00 12 06 F6 | 	mov	arg01, #0
130a8     28 B4 B0 FD | 	call	#__system___getiolock_0417
130ac     FD 12 02 F6 | 	mov	arg01, result1
130b0     20 5B B0 FD | 	call	#__system___lockmem
130b4     00 28 06 F6 | 	mov	local06, #0
130b8     00 12 06 F6 | 	mov	arg01, #0
130bc     0F 15 02 F6 | 	mov	arg02, local01
130c0     00 16 06 F6 | 	mov	arg03, #0
130c4     FC 67 B0 FD | 	call	#__system___basic_print_string
130c8     FD 2A 02 F6 | 	mov	local07, result1
130cc     14 27 02 F6 | 	mov	local05, local06
130d0     15 27 02 F1 | 	add	local05, local07
130d4     00 2C 06 F6 | 	mov	local08, #0
130d8     00 12 06 F6 | 	mov	arg01, #0
130dc     09 14 06 F6 | 	mov	arg02, #9
130e0     00 16 06 F6 | 	mov	arg03, #0
130e4     84 67 B0 FD | 	call	#__system___basic_print_char
130e8     FD 2E 02 F6 | 	mov	local09, result1
130ec     FD 26 02 F1 | 	add	local05, result1
130f0     00 12 06 F6 | 	mov	arg01, #0
130f4     DC B3 B0 FD | 	call	#__system___getiolock_0417
130f8     FD 00 68 FC | 	wrlong	#0, result1
130fc     00 FA 05 F6 | 	mov	result1, #0
13100     00 30 06 F6 | 	mov	local10, #0
13104                 | LR__1536
13104                 | LR__1537
13104                 | ' if r=print_mod_semicolon then 
13104     22 24 0E F2 | 	cmp	local04, #34 wz
13108     1C 01 90 5D |  if_ne	jmp	#LR__1542
1310c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1310c     1C 22 0E F2 | 	cmp	local03, #28 wz
13110     50 00 90 5D |  if_ne	jmp	#LR__1538
13114     00 12 06 F6 | 	mov	arg01, #0
13118     B8 B3 B0 FD | 	call	#__system___getiolock_0417
1311c     FD 12 02 F6 | 	mov	arg01, result1
13120     B0 5A B0 FD | 	call	#__system___lockmem
13124     00 28 06 F6 | 	mov	local06, #0
13128     00 30 06 F6 | 	mov	local10, #0
1312c     0A 2C 06 F6 | 	mov	local08, #10
13130     00 12 06 F6 | 	mov	arg01, #0
13134     0F 15 02 F6 | 	mov	arg02, local01
13138     00 16 06 F6 | 	mov	arg03, #0
1313c     0A 18 06 F6 | 	mov	arg04, #10
13140     C4 67 B0 FD | 	call	#__system___basic_print_integer
13144     FD 2A 02 F6 | 	mov	local07, result1
13148     14 27 02 F6 | 	mov	local05, local06
1314c     15 27 02 F1 | 	add	local05, local07
13150     00 12 06 F6 | 	mov	arg01, #0
13154     7C B3 B0 FD | 	call	#__system___getiolock_0417
13158     FD 00 68 FC | 	wrlong	#0, result1
1315c     00 FA 05 F6 | 	mov	result1, #0
13160     00 2E 06 F6 | 	mov	local09, #0
13164                 | LR__1538
13164                 | '   if t1.result_type=result_uint then print t1.result.uresult;
13164     1D 22 0E F2 | 	cmp	local03, #29 wz
13168     50 00 90 5D |  if_ne	jmp	#LR__1539
1316c     00 12 06 F6 | 	mov	arg01, #0
13170     60 B3 B0 FD | 	call	#__system___getiolock_0417
13174     FD 12 02 F6 | 	mov	arg01, result1
13178     58 5A B0 FD | 	call	#__system___lockmem
1317c     00 28 06 F6 | 	mov	local06, #0
13180     00 30 06 F6 | 	mov	local10, #0
13184     0A 2C 06 F6 | 	mov	local08, #10
13188     00 12 06 F6 | 	mov	arg01, #0
1318c     0F 15 02 F6 | 	mov	arg02, local01
13190     00 16 06 F6 | 	mov	arg03, #0
13194     0A 18 06 F6 | 	mov	arg04, #10
13198     AC 67 B0 FD | 	call	#__system___basic_print_unsigned
1319c     FD 2A 02 F6 | 	mov	local07, result1
131a0     14 27 02 F6 | 	mov	local05, local06
131a4     15 27 02 F1 | 	add	local05, local07
131a8     00 12 06 F6 | 	mov	arg01, #0
131ac     24 B3 B0 FD | 	call	#__system___getiolock_0417
131b0     FD 00 68 FC | 	wrlong	#0, result1
131b4     00 FA 05 F6 | 	mov	result1, #0
131b8     00 2E 06 F6 | 	mov	local09, #0
131bc                 | LR__1539
131bc                 | '   if t1.result_type=result_float then print t1.result.fresult;
131bc     1E 22 0E F2 | 	cmp	local03, #30 wz
131c0     30 00 90 5D |  if_ne	jmp	#LR__1540
131c4     00 12 06 F6 | 	mov	arg01, #0
131c8     08 B3 B0 FD | 	call	#__system___getiolock_0417
131cc     FD 12 02 F6 | 	mov	arg01, result1
131d0     00 5A B0 FD | 	call	#__system___lockmem
131d4     00 12 06 F6 | 	mov	arg01, #0
131d8     0F 15 02 F6 | 	mov	arg02, local01
131dc     00 16 06 F6 | 	mov	arg03, #0
131e0     23 18 06 F6 | 	mov	arg04, #35
131e4     EC 8A B0 FD | 	call	#__system___basic_print_float
131e8     00 12 06 F6 | 	mov	arg01, #0
131ec     E4 B2 B0 FD | 	call	#__system___getiolock_0417
131f0     FD 00 68 FC | 	wrlong	#0, result1
131f4                 | LR__1540
131f4                 | '   if t1.result_type=result_string then print t1.result.sresult;
131f4     1F 22 0E F2 | 	cmp	local03, #31 wz
131f8     2C 00 90 5D |  if_ne	jmp	#LR__1541
131fc     00 12 06 F6 | 	mov	arg01, #0
13200     D0 B2 B0 FD | 	call	#__system___getiolock_0417
13204     FD 12 02 F6 | 	mov	arg01, result1
13208     C8 59 B0 FD | 	call	#__system___lockmem
1320c     00 12 06 F6 | 	mov	arg01, #0
13210     0F 15 02 F6 | 	mov	arg02, local01
13214     00 16 06 F6 | 	mov	arg03, #0
13218     A8 66 B0 FD | 	call	#__system___basic_print_string
1321c     00 12 06 F6 | 	mov	arg01, #0
13220     B0 B2 B0 FD | 	call	#__system___getiolock_0417
13224     FD 00 68 FC | 	wrlong	#0, result1
13228                 | LR__1541
13228                 | LR__1542
13228                 | ' if r=0 then 
13228     00 24 0E F2 | 	cmp	local04, #0 wz
1322c     1C 01 90 5D |  if_ne	jmp	#LR__1547
13230                 | '   if t1.result_type=result_int then print t1.result.iresult
13230     1C 22 0E F2 | 	cmp	local03, #28 wz
13234     40 00 90 5D |  if_ne	jmp	#LR__1543
13238     00 12 06 F6 | 	mov	arg01, #0
1323c     94 B2 B0 FD | 	call	#__system___getiolock_0417
13240     FD 12 02 F6 | 	mov	arg01, result1
13244     8C 59 B0 FD | 	call	#__system___lockmem
13248     00 12 06 F6 | 	mov	arg01, #0
1324c     0F 15 02 F6 | 	mov	arg02, local01
13250     00 16 06 F6 | 	mov	arg03, #0
13254     0A 18 06 F6 | 	mov	arg04, #10
13258     AC 66 B0 FD | 	call	#__system___basic_print_integer
1325c     00 12 06 F6 | 	mov	arg01, #0
13260     0A 14 06 F6 | 	mov	arg02, #10
13264     00 16 06 F6 | 	mov	arg03, #0
13268     00 66 B0 FD | 	call	#__system___basic_print_char
1326c     00 12 06 F6 | 	mov	arg01, #0
13270     60 B2 B0 FD | 	call	#__system___getiolock_0417
13274     FD 00 68 FC | 	wrlong	#0, result1
13278                 | LR__1543
13278                 | '   if t1.result_type=result_uint then print t1.result.uresult
13278     1D 22 0E F2 | 	cmp	local03, #29 wz
1327c     40 00 90 5D |  if_ne	jmp	#LR__1544
13280     00 12 06 F6 | 	mov	arg01, #0
13284     4C B2 B0 FD | 	call	#__system___getiolock_0417
13288     FD 12 02 F6 | 	mov	arg01, result1
1328c     44 59 B0 FD | 	call	#__system___lockmem
13290     00 12 06 F6 | 	mov	arg01, #0
13294     0F 15 02 F6 | 	mov	arg02, local01
13298     00 16 06 F6 | 	mov	arg03, #0
1329c     0A 18 06 F6 | 	mov	arg04, #10
132a0     A4 66 B0 FD | 	call	#__system___basic_print_unsigned
132a4     00 12 06 F6 | 	mov	arg01, #0
132a8     0A 14 06 F6 | 	mov	arg02, #10
132ac     00 16 06 F6 | 	mov	arg03, #0
132b0     B8 65 B0 FD | 	call	#__system___basic_print_char
132b4     00 12 06 F6 | 	mov	arg01, #0
132b8     18 B2 B0 FD | 	call	#__system___getiolock_0417
132bc     FD 00 68 FC | 	wrlong	#0, result1
132c0                 | LR__1544
132c0                 | '   if t1.result_type=result_float then print t1.result.fresult
132c0     1E 22 0E F2 | 	cmp	local03, #30 wz
132c4     40 00 90 5D |  if_ne	jmp	#LR__1545
132c8     00 12 06 F6 | 	mov	arg01, #0
132cc     04 B2 B0 FD | 	call	#__system___getiolock_0417
132d0     FD 12 02 F6 | 	mov	arg01, result1
132d4     FC 58 B0 FD | 	call	#__system___lockmem
132d8     00 12 06 F6 | 	mov	arg01, #0
132dc     0F 15 02 F6 | 	mov	arg02, local01
132e0     00 16 06 F6 | 	mov	arg03, #0
132e4     23 18 06 F6 | 	mov	arg04, #35
132e8     E8 89 B0 FD | 	call	#__system___basic_print_float
132ec     00 12 06 F6 | 	mov	arg01, #0
132f0     0A 14 06 F6 | 	mov	arg02, #10
132f4     00 16 06 F6 | 	mov	arg03, #0
132f8     70 65 B0 FD | 	call	#__system___basic_print_char
132fc     00 12 06 F6 | 	mov	arg01, #0
13300     D0 B1 B0 FD | 	call	#__system___getiolock_0417
13304     FD 00 68 FC | 	wrlong	#0, result1
13308                 | LR__1545
13308                 | '   if t1.result_type=result_string then print t1.result.sresult
13308     1F 22 0E F2 | 	cmp	local03, #31 wz
1330c     3C 00 90 5D |  if_ne	jmp	#LR__1546
13310     00 12 06 F6 | 	mov	arg01, #0
13314     BC B1 B0 FD | 	call	#__system___getiolock_0417
13318     FD 12 02 F6 | 	mov	arg01, result1
1331c     B4 58 B0 FD | 	call	#__system___lockmem
13320     00 12 06 F6 | 	mov	arg01, #0
13324     0F 15 02 F6 | 	mov	arg02, local01
13328     00 16 06 F6 | 	mov	arg03, #0
1332c     94 65 B0 FD | 	call	#__system___basic_print_string
13330     00 12 06 F6 | 	mov	arg01, #0
13334     0A 14 06 F6 | 	mov	arg02, #10
13338     00 16 06 F6 | 	mov	arg03, #0
1333c     2C 65 B0 FD | 	call	#__system___basic_print_char
13340     00 12 06 F6 | 	mov	arg01, #0
13344     8C B1 B0 FD | 	call	#__system___getiolock_0417
13348     FD 00 68 FC | 	wrlong	#0, result1
1334c                 | LR__1546
1334c                 | LR__1547
1334c                 | ' if r=print_mod_empty then print
1334c     20 24 0E F2 | 	cmp	local04, #32 wz
13350     2C 00 90 5D |  if_ne	jmp	#LR__1548
13354     00 12 06 F6 | 	mov	arg01, #0
13358     78 B1 B0 FD | 	call	#__system___getiolock_0417
1335c     FD 12 02 F6 | 	mov	arg01, result1
13360     70 58 B0 FD | 	call	#__system___lockmem
13364     00 12 06 F6 | 	mov	arg01, #0
13368     0A 14 06 F6 | 	mov	arg02, #10
1336c     00 16 06 F6 | 	mov	arg03, #0
13370     F8 64 B0 FD | 	call	#__system___basic_print_char
13374     00 12 06 F6 | 	mov	arg01, #0
13378     58 B1 B0 FD | 	call	#__system___getiolock_0417
1337c     FD 00 68 FC | 	wrlong	#0, result1
13380                 | LR__1548
13380                 | LR__1549
13380     A7 F0 03 F6 | 	mov	ptra, fp
13384     B2 00 A0 FD | 	call	#popregs_
13388                 | _do_print_ret
13388     2D 00 64 FD | 	ret
1338c                 | 
1338c                 | ' 
1338c                 | ' 
1338c                 | ' sub do_paper
1338c                 | _do_paper
1338c     03 4A 05 F6 | 	mov	COUNT_, #3
13390     A8 00 A0 FD | 	call	#pushregs_
13394     A4 64 BF FD | 	call	#_pop
13398     FD 1E 02 F6 | 	mov	local01, result1
1339c     FE 20 02 F6 | 	mov	local02, result2
133a0     FF 22 02 F6 | 	mov	local03, result3
133a4                 | ' t1=pop() 
133a4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
133a4     1E 22 0E F2 | 	cmp	local03, #30 wz
133a8     10 00 90 5D |  if_ne	jmp	#LR__1550
133ac     0F 13 02 F6 | 	mov	arg01, local01
133b0     00 14 06 F6 | 	mov	arg02, #0
133b4     CC 87 B0 FD | 	call	#__system___float_tointeger
133b8     FD 1E 02 F6 | 	mov	local01, result1
133bc                 | LR__1550
133bc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
133bc     1F 22 0E F2 | 	cmp	local03, #31 wz
133c0     18 00 90 5D |  if_ne	jmp	#LR__1551
133c4     0F 13 02 F6 | 	mov	arg01, local01
133c8     D8 8A B0 FD | 	call	#__system____builtin_atof
133cc     FD 12 02 F6 | 	mov	arg01, result1
133d0     00 14 06 F6 | 	mov	arg02, #0
133d4     AC 87 B0 FD | 	call	#__system___float_tointeger
133d8     FD 1E 02 F6 | 	mov	local01, result1
133dc                 | LR__1551
133dc     56 00 00 FF 
133e0     0C E4 05 F1 | 	add	objptr, ##44044
133e4     F2 1E 62 FC | 	wrlong	local01, objptr
133e8     04 E4 05 F1 | 	add	objptr, #4
133ec     F2 12 02 FB | 	rdlong	arg01, objptr
133f0                 | ' 
133f0                 | ' write_color:=ff
133f0     55 00 00 FF 
133f4     D3 E5 85 F1 | 	sub	objptr, ##43987
133f8     F2 12 62 FC | 	wrlong	arg01, objptr
133fc                 | ' write_background:=bb
133fc     04 E4 05 F1 | 	add	objptr, #4
13400     F2 1E 62 FC | 	wrlong	local01, objptr
13404     41 E4 85 F1 | 	sub	objptr, #65
13408     A7 F0 03 F6 | 	mov	ptra, fp
1340c     B2 00 A0 FD | 	call	#popregs_
13410                 | _do_paper_ret
13410     2D 00 64 FD | 	ret
13414                 | 
13414                 | ' 
13414                 | ' sub do_ink
13414                 | _do_ink
13414     03 4A 05 F6 | 	mov	COUNT_, #3
13418     A8 00 A0 FD | 	call	#pushregs_
1341c     1C 64 BF FD | 	call	#_pop
13420     FD 1E 02 F6 | 	mov	local01, result1
13424     FE 20 02 F6 | 	mov	local02, result2
13428     FF 22 02 F6 | 	mov	local03, result3
1342c                 | ' t1=pop() 
1342c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1342c     1E 22 0E F2 | 	cmp	local03, #30 wz
13430     10 00 90 5D |  if_ne	jmp	#LR__1560
13434     0F 13 02 F6 | 	mov	arg01, local01
13438     00 14 06 F6 | 	mov	arg02, #0
1343c     44 87 B0 FD | 	call	#__system___float_tointeger
13440     FD 1E 02 F6 | 	mov	local01, result1
13444                 | LR__1560
13444                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13444     1F 22 0E F2 | 	cmp	local03, #31 wz
13448     18 00 90 5D |  if_ne	jmp	#LR__1561
1344c     0F 13 02 F6 | 	mov	arg01, local01
13450     50 8A B0 FD | 	call	#__system____builtin_atof
13454     FD 12 02 F6 | 	mov	arg01, result1
13458     00 14 06 F6 | 	mov	arg02, #0
1345c     24 87 B0 FD | 	call	#__system___float_tointeger
13460     FD 1E 02 F6 | 	mov	local01, result1
13464                 | LR__1561
13464     56 00 00 FF 
13468     10 E4 05 F1 | 	add	objptr, ##44048
1346c     F2 1E 62 FC | 	wrlong	local01, objptr
13470     04 E4 85 F1 | 	sub	objptr, #4
13474     F2 14 02 FB | 	rdlong	arg02, objptr
13478                 | ' 
13478                 | ' write_color:=ff
13478     55 00 00 FF 
1347c     CF E5 85 F1 | 	sub	objptr, ##43983
13480     F2 1E 62 FC | 	wrlong	local01, objptr
13484                 | ' write_background:=bb
13484     04 E4 05 F1 | 	add	objptr, #4
13488     F2 14 62 FC | 	wrlong	arg02, objptr
1348c     55 00 00 FF 
13490     CF E5 05 F1 | 	add	objptr, ##43983
13494     F2 12 02 FB | 	rdlong	arg01, objptr
13498     56 00 00 FF 
1349c     10 E4 85 F1 | 	sub	objptr, ##44048
134a0     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
134a4     A7 F0 03 F6 | 	mov	ptra, fp
134a8     B2 00 A0 FD | 	call	#popregs_
134ac                 | _do_ink_ret
134ac     2D 00 64 FD | 	ret
134b0                 | 
134b0                 | ' 
134b0                 | ' 
134b0                 | ' sub do_font
134b0                 | _do_font
134b0     03 4A 05 F6 | 	mov	COUNT_, #3
134b4     A8 00 A0 FD | 	call	#pushregs_
134b8     80 63 BF FD | 	call	#_pop
134bc     FD 1E 02 F6 | 	mov	local01, result1
134c0     FE 20 02 F6 | 	mov	local02, result2
134c4     FF 22 02 F6 | 	mov	local03, result3
134c8                 | ' t1=pop() 
134c8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
134c8     1E 22 0E F2 | 	cmp	local03, #30 wz
134cc     10 00 90 5D |  if_ne	jmp	#LR__1570
134d0     0F 13 02 F6 | 	mov	arg01, local01
134d4     00 14 06 F6 | 	mov	arg02, #0
134d8     A8 86 B0 FD | 	call	#__system___float_tointeger
134dc     FD 1E 02 F6 | 	mov	local01, result1
134e0                 | LR__1570
134e0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
134e0     1F 22 0E F2 | 	cmp	local03, #31 wz
134e4     18 00 90 5D |  if_ne	jmp	#LR__1571
134e8     0F 13 02 F6 | 	mov	arg01, local01
134ec     B4 89 B0 FD | 	call	#__system____builtin_atof
134f0     FD 12 02 F6 | 	mov	arg01, result1
134f4     00 14 06 F6 | 	mov	arg02, #0
134f8     88 86 B0 FD | 	call	#__system___float_tointeger
134fc     FD 1E 02 F6 | 	mov	local01, result1
13500                 | LR__1571
13500     56 00 00 FF 
13504     14 E4 05 F1 | 	add	objptr, ##44052
13508     F2 1E 62 FC | 	wrlong	local01, objptr
1350c     56 00 00 FF 
13510     14 E4 85 F1 | 	sub	objptr, ##44052
13514     02 1E 66 F0 | 	shl	local01, #2
13518     0F 13 02 F6 | 	mov	arg01, local01
1351c     E8 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13520     A7 F0 03 F6 | 	mov	ptra, fp
13524     B2 00 A0 FD | 	call	#popregs_
13528                 | _do_font_ret
13528     2D 00 64 FD | 	ret
1352c                 | 
1352c                 | ' 
1352c                 | ' sub do_mode
1352c                 | _do_mode
1352c     04 4A 05 F6 | 	mov	COUNT_, #4
13530     A8 00 A0 FD | 	call	#pushregs_
13534     04 63 BF FD | 	call	#_pop
13538     FD 1E 02 F6 | 	mov	local01, result1
1353c     FE 20 02 F6 | 	mov	local02, result2
13540     FF 22 02 F6 | 	mov	local03, result3
13544                 | ' t1=pop() 
13544                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13544     1E 22 0E F2 | 	cmp	local03, #30 wz
13548     10 00 90 5D |  if_ne	jmp	#LR__1580
1354c     0F 13 02 F6 | 	mov	arg01, local01
13550     00 14 06 F6 | 	mov	arg02, #0
13554     2C 86 B0 FD | 	call	#__system___float_tointeger
13558     FD 1E 02 F6 | 	mov	local01, result1
1355c                 | LR__1580
1355c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1355c     1F 22 0E F2 | 	cmp	local03, #31 wz
13560     18 00 90 5D |  if_ne	jmp	#LR__1581
13564     0F 13 02 F6 | 	mov	arg01, local01
13568     38 89 B0 FD | 	call	#__system____builtin_atof
1356c     FD 12 02 F6 | 	mov	arg01, result1
13570     00 14 06 F6 | 	mov	arg02, #0
13574     0C 86 B0 FD | 	call	#__system___float_tointeger
13578     FD 1E 02 F6 | 	mov	local01, result1
1357c                 | LR__1581
1357c                 | ' select case t1.result.iresult
1357c     0F 25 02 F6 | 	mov	local04, local01
13580     05 24 26 F3 | 	fle	local04, #5
13584     30 24 62 FD | 	jmprel	local04
13588                 | LR__1582
13588     14 00 90 FD | 	jmp	#LR__1583
1358c     A8 00 90 FD | 	jmp	#LR__1584
13590     10 01 90 FD | 	jmp	#LR__1585
13594     78 01 90 FD | 	jmp	#LR__1586
13598     E0 01 90 FD | 	jmp	#LR__1587
1359c     70 02 90 FD | 	jmp	#LR__1588
135a0                 | LR__1583
135a0     56 00 00 FF 
135a4     14 E4 05 F1 | 	add	objptr, ##44052
135a8     F2 02 68 FC | 	wrlong	#1, objptr
135ac     04 E4 85 F1 | 	sub	objptr, #4
135b0     F2 34 69 FC | 	wrlong	#154, objptr
135b4     22 00 00 FF 
135b8     A4 E5 05 F1 | 	add	objptr, ##17828
135bc     F2 02 68 FC | 	wrlong	#1, objptr
135c0     22 00 00 FF 
135c4     A8 E5 85 F1 | 	sub	objptr, ##17832
135c8     F2 26 69 FC | 	wrlong	#147, objptr
135cc     56 00 00 FF 
135d0     0C E4 85 F1 | 	sub	objptr, ##44044
135d4     04 12 06 F6 | 	mov	arg01, #4
135d8     2C 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
135dc     56 00 00 FF 
135e0     10 E4 05 F1 | 	add	objptr, ##44048
135e4     F2 12 02 FB | 	rdlong	arg01, objptr
135e8     04 E4 85 F1 | 	sub	objptr, #4
135ec     F2 14 02 FB | 	rdlong	arg02, objptr
135f0                 | ' 
135f0                 | ' write_color:=ff
135f0     55 00 00 FF 
135f4     CF E5 85 F1 | 	sub	objptr, ##43983
135f8     F2 12 62 FC | 	wrlong	arg01, objptr
135fc                 | ' write_background:=bb
135fc     04 E4 05 F1 | 	add	objptr, #4
13600     F2 14 62 FC | 	wrlong	arg02, objptr
13604     01 00 00 FF 
13608     00 EA 05 F1 | 	add	ptr__dat__, ##512
1360c     7A 00 00 FF 
13610     17 E4 05 F1 | 	add	objptr, ##62487
13614     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13618     04 E4 85 F1 | 	sub	objptr, #4
1361c     03 00 80 FF 
13620     F2 28 69 FC | 	wrlong	##1684, objptr
13624     7A 00 00 FF 
13628     54 E4 85 F1 | 	sub	objptr, ##62548
1362c     01 00 00 FF 
13630     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13634     D8 01 90 FD | 	jmp	#LR__1588
13638                 | LR__1584
13638     56 00 00 FF 
1363c     14 E4 05 F1 | 	add	objptr, ##44052
13640     F2 00 68 FC | 	wrlong	#0, objptr
13644     04 E4 85 F1 | 	sub	objptr, #4
13648     F2 2E 68 FC | 	wrlong	#23, objptr
1364c     22 00 00 FF 
13650     A4 E5 05 F1 | 	add	objptr, ##17828
13654     F2 00 68 FC | 	wrlong	#0, objptr
13658     22 00 00 FF 
1365c     A8 E5 85 F1 | 	sub	objptr, ##17832
13660     F2 00 68 FC | 	wrlong	#0, objptr
13664     56 00 00 FF 
13668     0C E4 85 F1 | 	sub	objptr, ##44044
1366c     00 12 06 F6 | 	mov	arg01, #0
13670     94 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13674     56 00 00 FF 
13678     10 E4 05 F1 | 	add	objptr, ##44048
1367c     F2 12 02 FB | 	rdlong	arg01, objptr
13680     04 E4 85 F1 | 	sub	objptr, #4
13684     F2 14 02 FB | 	rdlong	arg02, objptr
13688                 | ' 
13688                 | ' write_color:=ff
13688     55 00 00 FF 
1368c     CF E5 85 F1 | 	sub	objptr, ##43983
13690     F2 12 62 FC | 	wrlong	arg01, objptr
13694                 | ' write_background:=bb
13694     04 E4 05 F1 | 	add	objptr, #4
13698     F2 14 62 FC | 	wrlong	arg02, objptr
1369c     41 E4 85 F1 | 	sub	objptr, #65
136a0     6C 01 90 FD | 	jmp	#LR__1588
136a4                 | LR__1585
136a4     56 00 00 FF 
136a8     14 E4 05 F1 | 	add	objptr, ##44052
136ac     F2 00 68 FC | 	wrlong	#0, objptr
136b0     04 E4 85 F1 | 	sub	objptr, #4
136b4     F2 6A 69 FC | 	wrlong	#181, objptr
136b8     22 00 00 FF 
136bc     A4 E5 05 F1 | 	add	objptr, ##17828
136c0     F2 00 68 FC | 	wrlong	#0, objptr
136c4     22 00 00 FF 
136c8     A8 E5 85 F1 | 	sub	objptr, ##17832
136cc     F2 00 68 FC | 	wrlong	#0, objptr
136d0     56 00 00 FF 
136d4     0C E4 85 F1 | 	sub	objptr, ##44044
136d8     00 12 06 F6 | 	mov	arg01, #0
136dc     28 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
136e0     56 00 00 FF 
136e4     10 E4 05 F1 | 	add	objptr, ##44048
136e8     F2 12 02 FB | 	rdlong	arg01, objptr
136ec     04 E4 85 F1 | 	sub	objptr, #4
136f0     F2 14 02 FB | 	rdlong	arg02, objptr
136f4                 | ' 
136f4                 | ' write_color:=ff
136f4     55 00 00 FF 
136f8     CF E5 85 F1 | 	sub	objptr, ##43983
136fc     F2 12 62 FC | 	wrlong	arg01, objptr
13700                 | ' write_background:=bb
13700     04 E4 05 F1 | 	add	objptr, #4
13704     F2 14 62 FC | 	wrlong	arg02, objptr
13708     41 E4 85 F1 | 	sub	objptr, #65
1370c     00 01 90 FD | 	jmp	#LR__1588
13710                 | LR__1586
13710     56 00 00 FF 
13714     14 E4 05 F1 | 	add	objptr, ##44052
13718     F2 00 68 FC | 	wrlong	#0, objptr
1371c     04 E4 85 F1 | 	sub	objptr, #4
13720     F2 1E 68 FC | 	wrlong	#15, objptr
13724     22 00 00 FF 
13728     A4 E5 05 F1 | 	add	objptr, ##17828
1372c     F2 00 68 FC | 	wrlong	#0, objptr
13730     22 00 00 FF 
13734     A8 E5 85 F1 | 	sub	objptr, ##17832
13738     F2 00 68 FC | 	wrlong	#0, objptr
1373c     56 00 00 FF 
13740     0C E4 85 F1 | 	sub	objptr, ##44044
13744     00 12 06 F6 | 	mov	arg01, #0
13748     BC 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1374c     56 00 00 FF 
13750     10 E4 05 F1 | 	add	objptr, ##44048
13754     F2 12 02 FB | 	rdlong	arg01, objptr
13758     04 E4 85 F1 | 	sub	objptr, #4
1375c     F2 14 02 FB | 	rdlong	arg02, objptr
13760                 | ' 
13760                 | ' write_color:=ff
13760     55 00 00 FF 
13764     CF E5 85 F1 | 	sub	objptr, ##43983
13768     F2 12 62 FC | 	wrlong	arg01, objptr
1376c                 | ' write_background:=bb
1376c     04 E4 05 F1 | 	add	objptr, #4
13770     F2 14 62 FC | 	wrlong	arg02, objptr
13774     41 E4 85 F1 | 	sub	objptr, #65
13778     94 00 90 FD | 	jmp	#LR__1588
1377c                 | LR__1587
1377c     56 00 00 FF 
13780     14 E4 05 F1 | 	add	objptr, ##44052
13784     F2 02 68 FC | 	wrlong	#1, objptr
13788     04 E4 85 F1 | 	sub	objptr, #4
1378c     F2 02 68 FC | 	wrlong	#1, objptr
13790     22 00 00 FF 
13794     A4 E5 05 F1 | 	add	objptr, ##17828
13798     F2 02 68 FC | 	wrlong	#1, objptr
1379c     22 00 00 FF 
137a0     A8 E5 85 F1 | 	sub	objptr, ##17832
137a4     F2 1C 68 FC | 	wrlong	#14, objptr
137a8     56 00 00 FF 
137ac     0C E4 85 F1 | 	sub	objptr, ##44044
137b0     04 12 06 F6 | 	mov	arg01, #4
137b4     50 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
137b8     56 00 00 FF 
137bc     10 E4 05 F1 | 	add	objptr, ##44048
137c0     F2 12 02 FB | 	rdlong	arg01, objptr
137c4     04 E4 85 F1 | 	sub	objptr, #4
137c8     F2 14 02 FB | 	rdlong	arg02, objptr
137cc                 | ' 
137cc                 | ' write_color:=ff
137cc     55 00 00 FF 
137d0     CF E5 85 F1 | 	sub	objptr, ##43983
137d4     F2 12 62 FC | 	wrlong	arg01, objptr
137d8                 | ' write_background:=bb
137d8     04 E4 05 F1 | 	add	objptr, #4
137dc     F2 14 62 FC | 	wrlong	arg02, objptr
137e0     07 00 00 FF 
137e4     72 EB 05 F1 | 	add	ptr__dat__, ##3954
137e8     7A 00 00 FF 
137ec     17 E4 05 F1 | 	add	objptr, ##62487
137f0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
137f4     04 E4 85 F1 | 	sub	objptr, #4
137f8     03 00 80 FF 
137fc     F2 28 69 FC | 	wrlong	##1684, objptr
13800     7A 00 00 FF 
13804     54 E4 85 F1 | 	sub	objptr, ##62548
13808     07 00 00 FF 
1380c     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
13810                 | LR__1588
13810     7A 00 00 FF 
13814     50 E4 05 F1 | 	add	objptr, ##62544
13818     F2 1E 62 FC | 	wrlong	local01, objptr
1381c     24 00 00 FF 
13820     40 E4 85 F1 | 	sub	objptr, ##18496
13824     F2 12 02 FB | 	rdlong	arg01, objptr
13828     04 E4 85 F1 | 	sub	objptr, #4
1382c     F2 14 02 FB | 	rdlong	arg02, objptr
13830     56 00 00 FF 
13834     0C E4 85 F1 | 	sub	objptr, ##44044
13838     B4 40 B0 FD | 	call	#_hg010b_spin2_cls
1383c     43 01 00 FF 
13840     8E 12 06 F6 | 	mov	arg01, ##@LR__4632
13844                 | ' 
13844                 | ' write(text)
13844     64 43 B0 FD | 	call	#_hg010b_spin2_write
13848                 | ' crlf
13848     C0 44 B0 FD | 	call	#_hg010b_spin2_crlf
1384c     10 00 00 FF 
13850     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13854     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13858     10 00 00 FF 
1385c     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13860                 | ' 
13860                 | ' write(text)
13860     48 43 B0 FD | 	call	#_hg010b_spin2_write
13864                 | ' crlf
13864     A4 44 B0 FD | 	call	#_hg010b_spin2_crlf
13868     78 00 00 FF 
1386c     B0 E5 05 F1 | 	add	objptr, ##61872
13870     F2 12 02 FB | 	rdlong	arg01, objptr
13874     78 00 00 FF 
13878     B0 E5 85 F1 | 	sub	objptr, ##61872
1387c                 | ' 
1387c                 | ' write(text)
1387c     2C 43 B0 FD | 	call	#_hg010b_spin2_write
13880                 | ' crlf
13880     88 44 B0 FD | 	call	#_hg010b_spin2_crlf
13884     A7 F0 03 F6 | 	mov	ptra, fp
13888     B2 00 A0 FD | 	call	#popregs_
1388c                 | _do_mode_ret
1388c     2D 00 64 FD | 	ret
13890                 | 
13890                 | ' 
13890                 | ' 
13890                 | ' 
13890                 | ' sub do_pinwrite
13890                 | _do_pinwrite
13890     01 4A 05 F6 | 	mov	COUNT_, #1
13894     A8 00 A0 FD | 	call	#pushregs_
13898     18 F0 07 F1 | 	add	ptra, #24
1389c     9C 5F BF FD | 	call	#_pop
138a0     FD 14 02 F6 | 	mov	arg02, result1
138a4     FE 12 02 F6 | 	mov	arg01, result2
138a8     FF 1E 02 F6 | 	mov	local01, result3
138ac     A7 14 62 FC | 	wrlong	arg02, fp
138b0     04 4E 05 F1 | 	add	fp, #4
138b4     A7 12 62 FC | 	wrlong	arg01, fp
138b8     04 4E 05 F1 | 	add	fp, #4
138bc     A7 1E 62 FC | 	wrlong	local01, fp
138c0     08 4E 85 F1 | 	sub	fp, #8
138c4     74 5F BF FD | 	call	#_pop
138c8     FF 1E 02 F6 | 	mov	local01, result3
138cc     0C 4E 05 F1 | 	add	fp, #12
138d0     A7 FA 61 FC | 	wrlong	result1, fp
138d4     04 4E 05 F1 | 	add	fp, #4
138d8     A7 FC 61 FC | 	wrlong	result2, fp
138dc     04 4E 05 F1 | 	add	fp, #4
138e0     A7 1E 62 FC | 	wrlong	local01, fp
138e4     08 4E 85 F1 | 	sub	fp, #8
138e8     A7 12 02 F6 | 	mov	arg01, fp
138ec     0C 4E 85 F1 | 	sub	fp, #12
138f0     D8 D3 BF FD | 	call	#_converttoint
138f4     FD 1E 02 F6 | 	mov	local01, result1
138f8     A7 12 02 F6 | 	mov	arg01, fp
138fc     CC D3 BF FD | 	call	#_converttoint
13900     FD 14 02 F6 | 	mov	arg02, result1
13904     0F 13 02 F6 | 	mov	arg01, local01
13908     7C 54 B0 FD | 	call	#__system___pinwrite
1390c     A7 F0 03 F6 | 	mov	ptra, fp
13910     B2 00 A0 FD | 	call	#popregs_
13914                 | _do_pinwrite_ret
13914     2D 00 64 FD | 	ret
13918                 | 
13918                 | ' 
13918                 | ' sub do_pinfloat
13918                 | _do_pinfloat
13918     00 4A 05 F6 | 	mov	COUNT_, #0
1391c     A8 00 A0 FD | 	call	#pushregs_
13920     0C F0 07 F1 | 	add	ptra, #12
13924     14 5F BF FD | 	call	#_pop
13928     A7 FA 61 FC | 	wrlong	result1, fp
1392c     04 4E 05 F1 | 	add	fp, #4
13930     A7 FC 61 FC | 	wrlong	result2, fp
13934     04 4E 05 F1 | 	add	fp, #4
13938     A7 FE 61 FC | 	wrlong	result3, fp
1393c     08 4E 85 F1 | 	sub	fp, #8
13940     A7 12 02 F6 | 	mov	arg01, fp
13944     84 D3 BF FD | 	call	#_converttoint
13948     50 FA 61 FD | 	fltl	result1
1394c     A7 F0 03 F6 | 	mov	ptra, fp
13950     B2 00 A0 FD | 	call	#popregs_
13954                 | _do_pinfloat_ret
13954     2D 00 64 FD | 	ret
13958                 | 
13958                 | ' 
13958                 | ' sub do_pinlo
13958                 | _do_pinlo
13958     00 4A 05 F6 | 	mov	COUNT_, #0
1395c     A8 00 A0 FD | 	call	#pushregs_
13960     0C F0 07 F1 | 	add	ptra, #12
13964     D4 5E BF FD | 	call	#_pop
13968     A7 FA 61 FC | 	wrlong	result1, fp
1396c     04 4E 05 F1 | 	add	fp, #4
13970     A7 FC 61 FC | 	wrlong	result2, fp
13974     04 4E 05 F1 | 	add	fp, #4
13978     A7 FE 61 FC | 	wrlong	result3, fp
1397c     08 4E 85 F1 | 	sub	fp, #8
13980     A7 12 02 F6 | 	mov	arg01, fp
13984     44 D3 BF FD | 	call	#_converttoint
13988     58 FA 61 FD | 	drvl	result1
1398c     A7 F0 03 F6 | 	mov	ptra, fp
13990     B2 00 A0 FD | 	call	#popregs_
13994                 | _do_pinlo_ret
13994     2D 00 64 FD | 	ret
13998                 | 
13998                 | ' 
13998                 | ' sub do_pinhi
13998                 | _do_pinhi
13998     00 4A 05 F6 | 	mov	COUNT_, #0
1399c     A8 00 A0 FD | 	call	#pushregs_
139a0     0C F0 07 F1 | 	add	ptra, #12
139a4     94 5E BF FD | 	call	#_pop
139a8     A7 FA 61 FC | 	wrlong	result1, fp
139ac     04 4E 05 F1 | 	add	fp, #4
139b0     A7 FC 61 FC | 	wrlong	result2, fp
139b4     04 4E 05 F1 | 	add	fp, #4
139b8     A7 FE 61 FC | 	wrlong	result3, fp
139bc     08 4E 85 F1 | 	sub	fp, #8
139c0     A7 12 02 F6 | 	mov	arg01, fp
139c4     04 D3 BF FD | 	call	#_converttoint
139c8     59 FA 61 FD | 	drvh	result1
139cc     A7 F0 03 F6 | 	mov	ptra, fp
139d0     B2 00 A0 FD | 	call	#popregs_
139d4                 | _do_pinhi_ret
139d4     2D 00 64 FD | 	ret
139d8                 | 
139d8                 | ' 
139d8                 | ' sub do_pintoggle
139d8                 | _do_pintoggle
139d8     00 4A 05 F6 | 	mov	COUNT_, #0
139dc     A8 00 A0 FD | 	call	#pushregs_
139e0     0C F0 07 F1 | 	add	ptra, #12
139e4     54 5E BF FD | 	call	#_pop
139e8     A7 FA 61 FC | 	wrlong	result1, fp
139ec     04 4E 05 F1 | 	add	fp, #4
139f0     A7 FC 61 FC | 	wrlong	result2, fp
139f4     04 4E 05 F1 | 	add	fp, #4
139f8     A7 FE 61 FC | 	wrlong	result3, fp
139fc     08 4E 85 F1 | 	sub	fp, #8
13a00     A7 12 02 F6 | 	mov	arg01, fp
13a04     C4 D2 BF FD | 	call	#_converttoint
13a08     5F FA 61 FD | 	drvnot	result1
13a0c     A7 F0 03 F6 | 	mov	ptra, fp
13a10     B2 00 A0 FD | 	call	#popregs_
13a14                 | _do_pintoggle_ret
13a14     2D 00 64 FD | 	ret
13a18                 | 
13a18                 | ' 
13a18                 | ' 
13a18                 | ' sub do_pinstart
13a18                 | _do_pinstart
13a18     03 4A 05 F6 | 	mov	COUNT_, #3
13a1c     A8 00 A0 FD | 	call	#pushregs_
13a20     30 F0 07 F1 | 	add	ptra, #48
13a24     14 5E BF FD | 	call	#_pop
13a28     FD 16 02 F6 | 	mov	arg03, result1
13a2c     FE 14 02 F6 | 	mov	arg02, result2
13a30     FF 18 02 F6 | 	mov	arg04, result3
13a34     A7 16 62 FC | 	wrlong	arg03, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 14 62 FC | 	wrlong	arg02, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 18 62 FC | 	wrlong	arg04, fp
13a48     08 4E 85 F1 | 	sub	fp, #8
13a4c     EC 5D BF FD | 	call	#_pop
13a50     FD 16 02 F6 | 	mov	arg03, result1
13a54     FE 14 02 F6 | 	mov	arg02, result2
13a58     FF 18 02 F6 | 	mov	arg04, result3
13a5c     0C 4E 05 F1 | 	add	fp, #12
13a60     A7 16 62 FC | 	wrlong	arg03, fp
13a64     04 4E 05 F1 | 	add	fp, #4
13a68     A7 14 62 FC | 	wrlong	arg02, fp
13a6c     04 4E 05 F1 | 	add	fp, #4
13a70     A7 18 62 FC | 	wrlong	arg04, fp
13a74     14 4E 85 F1 | 	sub	fp, #20
13a78     C0 5D BF FD | 	call	#_pop
13a7c     FD 16 02 F6 | 	mov	arg03, result1
13a80     FE 14 02 F6 | 	mov	arg02, result2
13a84     FF 18 02 F6 | 	mov	arg04, result3
13a88     18 4E 05 F1 | 	add	fp, #24
13a8c     A7 16 62 FC | 	wrlong	arg03, fp
13a90     04 4E 05 F1 | 	add	fp, #4
13a94     A7 14 62 FC | 	wrlong	arg02, fp
13a98     04 4E 05 F1 | 	add	fp, #4
13a9c     A7 18 62 FC | 	wrlong	arg04, fp
13aa0     20 4E 85 F1 | 	sub	fp, #32
13aa4     94 5D BF FD | 	call	#_pop
13aa8     FF 16 02 F6 | 	mov	arg03, result3
13aac     24 4E 05 F1 | 	add	fp, #36
13ab0     A7 FA 61 FC | 	wrlong	result1, fp
13ab4     04 4E 05 F1 | 	add	fp, #4
13ab8     A7 FC 61 FC | 	wrlong	result2, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 16 62 FC | 	wrlong	arg03, fp
13ac4     08 4E 85 F1 | 	sub	fp, #8
13ac8     A7 12 02 F6 | 	mov	arg01, fp
13acc     24 4E 85 F1 | 	sub	fp, #36
13ad0     F8 D1 BF FD | 	call	#_converttoint
13ad4     FD 1E 02 F6 | 	mov	local01, result1
13ad8     18 4E 05 F1 | 	add	fp, #24
13adc     A7 12 02 F6 | 	mov	arg01, fp
13ae0     18 4E 85 F1 | 	sub	fp, #24
13ae4     E4 D1 BF FD | 	call	#_converttoint
13ae8     FD 20 02 F6 | 	mov	local02, result1
13aec     0C 4E 05 F1 | 	add	fp, #12
13af0     A7 12 02 F6 | 	mov	arg01, fp
13af4     0C 4E 85 F1 | 	sub	fp, #12
13af8     D0 D1 BF FD | 	call	#_converttoint
13afc     FD 22 02 F6 | 	mov	local03, result1
13b00     A7 12 02 F6 | 	mov	arg01, fp
13b04     C4 D1 BF FD | 	call	#_converttoint
13b08     40 1E 62 FD | 	dirl	local01
13b0c     0F 21 02 FC | 	wrpin	local02, local01
13b10     0F 23 12 FC | 	wxpin	local03, local01
13b14     0F FB 21 FC | 	wypin	result1, local01
13b18     41 1E 62 FD | 	dirh	local01
13b1c     A7 F0 03 F6 | 	mov	ptra, fp
13b20     B2 00 A0 FD | 	call	#popregs_
13b24                 | _do_pinstart_ret
13b24     2D 00 64 FD | 	ret
13b28                 | 
13b28                 | ' 
13b28                 | ' 
13b28                 | ' sub do_wrpin
13b28                 | _do_wrpin
13b28     01 4A 05 F6 | 	mov	COUNT_, #1
13b2c     A8 00 A0 FD | 	call	#pushregs_
13b30     18 F0 07 F1 | 	add	ptra, #24
13b34     04 5D BF FD | 	call	#_pop
13b38     FD 14 02 F6 | 	mov	arg02, result1
13b3c     FE 12 02 F6 | 	mov	arg01, result2
13b40     FF 1E 02 F6 | 	mov	local01, result3
13b44     A7 14 62 FC | 	wrlong	arg02, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 12 62 FC | 	wrlong	arg01, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 1E 62 FC | 	wrlong	local01, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     DC 5C BF FD | 	call	#_pop
13b60     FF 1E 02 F6 | 	mov	local01, result3
13b64     0C 4E 05 F1 | 	add	fp, #12
13b68     A7 FA 61 FC | 	wrlong	result1, fp
13b6c     04 4E 05 F1 | 	add	fp, #4
13b70     A7 FC 61 FC | 	wrlong	result2, fp
13b74     04 4E 05 F1 | 	add	fp, #4
13b78     A7 1E 62 FC | 	wrlong	local01, fp
13b7c     08 4E 85 F1 | 	sub	fp, #8
13b80     A7 12 02 F6 | 	mov	arg01, fp
13b84     0C 4E 85 F1 | 	sub	fp, #12
13b88     40 D1 BF FD | 	call	#_converttoint
13b8c     FD 1E 02 F6 | 	mov	local01, result1
13b90     A7 12 02 F6 | 	mov	arg01, fp
13b94     34 D1 BF FD | 	call	#_converttoint
13b98     0F FB 01 FC | 	wrpin	result1, local01
13b9c     A7 F0 03 F6 | 	mov	ptra, fp
13ba0     B2 00 A0 FD | 	call	#popregs_
13ba4                 | _do_wrpin_ret
13ba4     2D 00 64 FD | 	ret
13ba8                 | 
13ba8                 | ' 
13ba8                 | ' sub do_wxpin
13ba8                 | _do_wxpin
13ba8     01 4A 05 F6 | 	mov	COUNT_, #1
13bac     A8 00 A0 FD | 	call	#pushregs_
13bb0     18 F0 07 F1 | 	add	ptra, #24
13bb4     84 5C BF FD | 	call	#_pop
13bb8     FD 14 02 F6 | 	mov	arg02, result1
13bbc     FE 12 02 F6 | 	mov	arg01, result2
13bc0     FF 1E 02 F6 | 	mov	local01, result3
13bc4     A7 14 62 FC | 	wrlong	arg02, fp
13bc8     04 4E 05 F1 | 	add	fp, #4
13bcc     A7 12 62 FC | 	wrlong	arg01, fp
13bd0     04 4E 05 F1 | 	add	fp, #4
13bd4     A7 1E 62 FC | 	wrlong	local01, fp
13bd8     08 4E 85 F1 | 	sub	fp, #8
13bdc     5C 5C BF FD | 	call	#_pop
13be0     FF 1E 02 F6 | 	mov	local01, result3
13be4     0C 4E 05 F1 | 	add	fp, #12
13be8     A7 FA 61 FC | 	wrlong	result1, fp
13bec     04 4E 05 F1 | 	add	fp, #4
13bf0     A7 FC 61 FC | 	wrlong	result2, fp
13bf4     04 4E 05 F1 | 	add	fp, #4
13bf8     A7 1E 62 FC | 	wrlong	local01, fp
13bfc     08 4E 85 F1 | 	sub	fp, #8
13c00     A7 12 02 F6 | 	mov	arg01, fp
13c04     0C 4E 85 F1 | 	sub	fp, #12
13c08     C0 D0 BF FD | 	call	#_converttoint
13c0c     FD 1E 02 F6 | 	mov	local01, result1
13c10     A7 12 02 F6 | 	mov	arg01, fp
13c14     B4 D0 BF FD | 	call	#_converttoint
13c18     0F FB 11 FC | 	wxpin	result1, local01
13c1c     A7 F0 03 F6 | 	mov	ptra, fp
13c20     B2 00 A0 FD | 	call	#popregs_
13c24                 | _do_wxpin_ret
13c24     2D 00 64 FD | 	ret
13c28                 | 
13c28                 | ' 
13c28                 | ' sub do_wypin
13c28                 | _do_wypin
13c28     01 4A 05 F6 | 	mov	COUNT_, #1
13c2c     A8 00 A0 FD | 	call	#pushregs_
13c30     18 F0 07 F1 | 	add	ptra, #24
13c34     04 5C BF FD | 	call	#_pop
13c38     FD 14 02 F6 | 	mov	arg02, result1
13c3c     FE 12 02 F6 | 	mov	arg01, result2
13c40     FF 1E 02 F6 | 	mov	local01, result3
13c44     A7 14 62 FC | 	wrlong	arg02, fp
13c48     04 4E 05 F1 | 	add	fp, #4
13c4c     A7 12 62 FC | 	wrlong	arg01, fp
13c50     04 4E 05 F1 | 	add	fp, #4
13c54     A7 1E 62 FC | 	wrlong	local01, fp
13c58     08 4E 85 F1 | 	sub	fp, #8
13c5c     DC 5B BF FD | 	call	#_pop
13c60     FF 1E 02 F6 | 	mov	local01, result3
13c64     0C 4E 05 F1 | 	add	fp, #12
13c68     A7 FA 61 FC | 	wrlong	result1, fp
13c6c     04 4E 05 F1 | 	add	fp, #4
13c70     A7 FC 61 FC | 	wrlong	result2, fp
13c74     04 4E 05 F1 | 	add	fp, #4
13c78     A7 1E 62 FC | 	wrlong	local01, fp
13c7c     08 4E 85 F1 | 	sub	fp, #8
13c80     A7 12 02 F6 | 	mov	arg01, fp
13c84     0C 4E 85 F1 | 	sub	fp, #12
13c88     40 D0 BF FD | 	call	#_converttoint
13c8c     FD 1E 02 F6 | 	mov	local01, result1
13c90     A7 12 02 F6 | 	mov	arg01, fp
13c94     34 D0 BF FD | 	call	#_converttoint
13c98     0F FB 21 FC | 	wypin	result1, local01
13c9c     A7 F0 03 F6 | 	mov	ptra, fp
13ca0     B2 00 A0 FD | 	call	#popregs_
13ca4                 | _do_wypin_ret
13ca4     2D 00 64 FD | 	ret
13ca8                 | 
13ca8                 | ' 
13ca8                 | ' sub do_position
13ca8                 | _do_position
13ca8     01 4A 05 F6 | 	mov	COUNT_, #1
13cac     A8 00 A0 FD | 	call	#pushregs_
13cb0     18 F0 07 F1 | 	add	ptra, #24
13cb4     84 5B BF FD | 	call	#_pop
13cb8     FD 14 02 F6 | 	mov	arg02, result1
13cbc     FE 12 02 F6 | 	mov	arg01, result2
13cc0     FF 1E 02 F6 | 	mov	local01, result3
13cc4     A7 14 62 FC | 	wrlong	arg02, fp
13cc8     04 4E 05 F1 | 	add	fp, #4
13ccc     A7 12 62 FC | 	wrlong	arg01, fp
13cd0     04 4E 05 F1 | 	add	fp, #4
13cd4     A7 1E 62 FC | 	wrlong	local01, fp
13cd8     08 4E 85 F1 | 	sub	fp, #8
13cdc     5C 5B BF FD | 	call	#_pop
13ce0     FF 1E 02 F6 | 	mov	local01, result3
13ce4     0C 4E 05 F1 | 	add	fp, #12
13ce8     A7 FA 61 FC | 	wrlong	result1, fp
13cec     04 4E 05 F1 | 	add	fp, #4
13cf0     A7 FC 61 FC | 	wrlong	result2, fp
13cf4     04 4E 05 F1 | 	add	fp, #4
13cf8     A7 1E 62 FC | 	wrlong	local01, fp
13cfc     08 4E 85 F1 | 	sub	fp, #8
13d00     A7 12 02 F6 | 	mov	arg01, fp
13d04     0C 4E 85 F1 | 	sub	fp, #12
13d08     C0 CF BF FD | 	call	#_converttoint
13d0c     FD 1E 02 F6 | 	mov	local01, result1
13d10     A7 12 02 F6 | 	mov	arg01, fp
13d14     B4 CF BF FD | 	call	#_converttoint
13d18     FD 14 02 F6 | 	mov	arg02, result1
13d1c     0F 13 02 F6 | 	mov	arg01, local01
13d20     24 3B B0 FD | 	call	#_hg010b_spin2_setcursorpos
13d24     A7 F0 03 F6 | 	mov	ptra, fp
13d28     B2 00 A0 FD | 	call	#popregs_
13d2c                 | _do_position_ret
13d2c     2D 00 64 FD | 	ret
13d30                 | 
13d30                 | ' 
13d30                 | ' sub do_waitms
13d30                 | _do_waitms
13d30     01 4A 05 F6 | 	mov	COUNT_, #1
13d34     A8 00 A0 FD | 	call	#pushregs_
13d38     18 F0 07 F1 | 	add	ptra, #24
13d3c     FC 5A BF FD | 	call	#_pop
13d40     A7 FA 61 FC | 	wrlong	result1, fp
13d44     04 4E 05 F1 | 	add	fp, #4
13d48     A7 FC 61 FC | 	wrlong	result2, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 FE 61 FC | 	wrlong	result3, fp
13d54                 | ' 
13d54                 | ' t1=pop() 'value
13d54                 | ' 
13d54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13d54     08 4E 85 F1 | 	sub	fp, #8
13d58     1C FE 0D F2 | 	cmp	result3, #28 wz
13d5c     08 4E 05 51 |  if_ne	add	fp, #8
13d60     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13d64     08 4E 85 51 |  if_ne	sub	fp, #8
13d68     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13d6c     A7 12 02 AB |  if_e	rdlong	arg01, fp
13d70     0C 4E 05 A1 |  if_e	add	fp, #12
13d74     A7 12 62 AC |  if_e	wrlong	arg01, fp
13d78     0C 4E 85 A1 |  if_e	sub	fp, #12
13d7c     14 00 90 AD |  if_e	jmp	#LR__1590
13d80     A7 12 02 F6 | 	mov	arg01, fp
13d84     44 CF BF FD | 	call	#_converttoint
13d88     0C 4E 05 F1 | 	add	fp, #12
13d8c     A7 FA 61 FC | 	wrlong	result1, fp
13d90     0C 4E 85 F1 | 	sub	fp, #12
13d94                 | LR__1590
13d94                 | ' if t<0 then return
13d94     0C 4E 05 F1 | 	add	fp, #12
13d98     A7 12 02 FB | 	rdlong	arg01, fp
13d9c     0C 4E 85 F1 | 	sub	fp, #12
13da0     00 12 56 F2 | 	cmps	arg01, #0 wc
13da4     B8 00 90 CD |  if_b	jmp	#LR__1595
13da8                 | ' if t < 5000 then 
13da8     0C 4E 05 F1 | 	add	fp, #12
13dac     A7 12 02 FB | 	rdlong	arg01, fp
13db0     0C 4E 85 F1 | 	sub	fp, #12
13db4     09 00 00 FF 
13db8     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13dbc     14 00 90 3D |  if_ae	jmp	#LR__1591
13dc0     0C 4E 05 F1 | 	add	fp, #12
13dc4     A7 12 02 FB | 	rdlong	arg01, fp
13dc8     0C 4E 85 F1 | 	sub	fp, #12
13dcc     F8 50 B0 FD | 	call	#__system___waitms
13dd0     8C 00 90 FD | 	jmp	#LR__1594
13dd4                 | LR__1591
13dd4     10 4E 05 F1 | 	add	fp, #16
13dd8     A7 02 68 FC | 	wrlong	#1, fp
13ddc     04 4E 85 F1 | 	sub	fp, #4
13de0     A7 12 02 FB | 	rdlong	arg01, fp
13de4     09 13 52 F6 | 	abs	arg01, arg01 wc
13de8     09 00 00 FF 
13dec     88 13 16 FD | 	qdiv	arg01, ##5000
13df0                 | '   for i=1 to t/5000
13df0     0C 4E 85 F1 | 	sub	fp, #12
13df4     18 1E 62 FD | 	getqx	local01
13df8     0F 1F 82 F6 | 	negc	local01, local01
13dfc     01 1E 06 F1 | 	add	local01, #1
13e00                 | LR__1592
13e00     10 4E 05 F1 | 	add	fp, #16
13e04     A7 12 02 FB | 	rdlong	arg01, fp
13e08     10 4E 85 F1 | 	sub	fp, #16
13e0c     0F 13 52 F2 | 	cmps	arg01, local01 wc
13e10     28 00 90 3D |  if_ae	jmp	#LR__1593
13e14     0C 4E 05 F1 | 	add	fp, #12
13e18     A7 12 02 FB | 	rdlong	arg01, fp
13e1c     0C 4E 85 F1 | 	sub	fp, #12
13e20     A4 50 B0 FD | 	call	#__system___waitms
13e24     10 4E 05 F1 | 	add	fp, #16
13e28     A7 12 02 FB | 	rdlong	arg01, fp
13e2c     01 12 06 F1 | 	add	arg01, #1
13e30     A7 12 62 FC | 	wrlong	arg01, fp
13e34     10 4E 85 F1 | 	sub	fp, #16
13e38     C4 FF 9F FD | 	jmp	#LR__1592
13e3c                 | LR__1593
13e3c     0C 4E 05 F1 | 	add	fp, #12
13e40     A7 1E 02 FB | 	rdlong	local01, fp
13e44     0F 1F 52 F6 | 	abs	local01, local01 wc
13e48     09 00 00 FF 
13e4c     88 1F 16 FD | 	qdiv	local01, ##5000
13e50     0C 4E 85 F1 | 	sub	fp, #12
13e54     19 1E 62 FD | 	getqy	local01
13e58     0F 13 82 F6 | 	negc	arg01, local01
13e5c     68 50 B0 FD | 	call	#__system___waitms
13e60                 | LR__1594
13e60                 | LR__1595
13e60     A7 F0 03 F6 | 	mov	ptra, fp
13e64     B2 00 A0 FD | 	call	#popregs_
13e68                 | _do_waitms_ret
13e68     2D 00 64 FD | 	ret
13e6c                 | 
13e6c                 | ' 
13e6c                 | ' sub do_waitvbl
13e6c                 | _do_waitvbl
13e6c     01 12 06 F6 | 	mov	arg01, #1
13e70     0C 3A B0 FD | 	call	#_hg010b_spin2_waitvbl
13e74                 | _do_waitvbl_ret
13e74     2D 00 64 FD | 	ret
13e78                 | 
13e78                 | ' 
13e78                 | ' sub do_waitclock
13e78                 | _do_waitclock
13e78     7A 00 00 FF 
13e7c     48 E4 05 F1 | 	add	objptr, ##62536
13e80     F2 00 02 FB | 	rdlong	_var01, objptr
13e84                 | ' c=hkcnt
13e84                 | ' do: loop until hkcnt<>c
13e84                 | LR__1600
13e84     F2 02 02 FB | 	rdlong	_var02, objptr
13e88     00 03 0A F2 | 	cmp	_var02, _var01 wz
13e8c     F4 FF 9F AD |  if_e	jmp	#LR__1600
13e90     7A 00 00 FF 
13e94     48 E4 85 F1 | 	sub	objptr, ##62536
13e98                 | _do_waitclock_ret
13e98     2D 00 64 FD | 	ret
13e9c                 | 
13e9c                 | ' 
13e9c                 | ' sub do_dir
13e9c                 | _do_dir
13e9c     03 4A 05 F6 | 	mov	COUNT_, #3
13ea0     A8 00 A0 FD | 	call	#pushregs_
13ea4     43 01 00 FF 
13ea8     8F 12 06 F6 | 	mov	arg01, ##@LR__4633
13eac     B0 53 B0 FD | 	call	#__system___chdir
13eb0                 | ' chdir("/sd/bas")       ' set working directory
13eb0                 | ' print "Working directory: "; currentdir$ 
13eb0     00 12 06 F6 | 	mov	arg01, #0
13eb4     1C A6 B0 FD | 	call	#__system___getiolock_0417
13eb8     FD 12 02 F6 | 	mov	arg01, result1
13ebc     14 4D B0 FD | 	call	#__system___lockmem
13ec0     43 01 00 FF 
13ec4     97 14 06 F6 | 	mov	arg02, ##@LR__4634
13ec8     00 12 06 F6 | 	mov	arg01, #0
13ecc     00 16 06 F6 | 	mov	arg03, #0
13ed0     F0 59 B0 FD | 	call	#__system___basic_print_string
13ed4     71 00 00 FF 
13ed8     68 E4 05 F1 | 	add	objptr, ##57960
13edc     F2 14 02 FB | 	rdlong	arg02, objptr
13ee0     71 00 00 FF 
13ee4     68 E4 85 F1 | 	sub	objptr, ##57960
13ee8     00 12 06 F6 | 	mov	arg01, #0
13eec     00 16 06 F6 | 	mov	arg03, #0
13ef0     D0 59 B0 FD | 	call	#__system___basic_print_string
13ef4     00 12 06 F6 | 	mov	arg01, #0
13ef8     0A 14 06 F6 | 	mov	arg02, #10
13efc     00 16 06 F6 | 	mov	arg03, #0
13f00     68 59 B0 FD | 	call	#__system___basic_print_char
13f04     00 12 06 F6 | 	mov	arg01, #0
13f08     C8 A5 B0 FD | 	call	#__system___getiolock_0417
13f0c     FD 00 68 FC | 	wrlong	#0, result1
13f10     43 01 00 FF 
13f14     AB 12 06 F6 | 	mov	arg01, ##@LR__4635
13f18     10 14 06 F6 | 	mov	arg02, #16
13f1c     EC A6 B0 FD | 	call	#__system___basic_dir
13f20     FD 1E 02 F6 | 	mov	local01, result1
13f24                 | ' 
13f24                 | ' filename=dir$("*", fbDirectory)
13f24                 | ' while filename <> "" and filename <> nil
13f24                 | LR__1610
13f24     00 20 06 F6 | 	mov	local02, #0
13f28     43 01 00 FF 
13f2c     AD 14 06 F6 | 	mov	arg02, ##@LR__4636
13f30     0F 13 02 F6 | 	mov	arg01, local01
13f34     C4 4C B0 FD | 	call	#__system___string_cmp
13f38     00 FA 0D F2 | 	cmp	result1, #0 wz
13f3c     00 20 26 56 |  if_ne	not	local02, #0
13f40     00 22 06 F6 | 	mov	local03, #0
13f44     0F 13 02 F6 | 	mov	arg01, local01
13f48     00 14 06 F6 | 	mov	arg02, #0
13f4c     AC 4C B0 FD | 	call	#__system___string_cmp
13f50     00 FA 0D F2 | 	cmp	result1, #0 wz
13f54     00 22 26 56 |  if_ne	not	local03, #0
13f58     11 21 CA F7 | 	test	local02, local03 wz
13f5c     64 00 90 AD |  if_e	jmp	#LR__1611
13f60                 | '   print "[dir] ";filename
13f60     00 12 06 F6 | 	mov	arg01, #0
13f64     6C A5 B0 FD | 	call	#__system___getiolock_0417
13f68     FD 12 02 F6 | 	mov	arg01, result1
13f6c     64 4C B0 FD | 	call	#__system___lockmem
13f70     43 01 00 FF 
13f74     AE 14 06 F6 | 	mov	arg02, ##@LR__4637
13f78     00 12 06 F6 | 	mov	arg01, #0
13f7c     00 16 06 F6 | 	mov	arg03, #0
13f80     40 59 B0 FD | 	call	#__system___basic_print_string
13f84     00 12 06 F6 | 	mov	arg01, #0
13f88     0F 15 02 F6 | 	mov	arg02, local01
13f8c     00 16 06 F6 | 	mov	arg03, #0
13f90     30 59 B0 FD | 	call	#__system___basic_print_string
13f94     00 12 06 F6 | 	mov	arg01, #0
13f98     0A 14 06 F6 | 	mov	arg02, #10
13f9c     00 16 06 F6 | 	mov	arg03, #0
13fa0     C8 58 B0 FD | 	call	#__system___basic_print_char
13fa4     00 12 06 F6 | 	mov	arg01, #0
13fa8     28 A5 B0 FD | 	call	#__system___getiolock_0417
13fac     FD 00 68 FC | 	wrlong	#0, result1
13fb0     00 12 06 F6 | 	mov	arg01, #0
13fb4     00 14 06 F6 | 	mov	arg02, #0
13fb8     50 A6 B0 FD | 	call	#__system___basic_dir
13fbc     FD 1E 02 F6 | 	mov	local01, result1
13fc0     60 FF 9F FD | 	jmp	#LR__1610
13fc4                 | LR__1611
13fc4     43 01 00 FF 
13fc8     B5 12 06 F6 | 	mov	arg01, ##@LR__4638
13fcc     21 14 06 F6 | 	mov	arg02, #33
13fd0     38 A6 B0 FD | 	call	#__system___basic_dir
13fd4     FD 1E 02 F6 | 	mov	local01, result1
13fd8                 | ' 
13fd8                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
13fd8                 | ' do while filename <> "" and filename <> nil
13fd8                 | LR__1612
13fd8     00 20 06 F6 | 	mov	local02, #0
13fdc     43 01 00 FF 
13fe0     B7 14 06 F6 | 	mov	arg02, ##@LR__4639
13fe4     0F 13 02 F6 | 	mov	arg01, local01
13fe8     10 4C B0 FD | 	call	#__system___string_cmp
13fec     00 FA 0D F2 | 	cmp	result1, #0 wz
13ff0     00 20 26 56 |  if_ne	not	local02, #0
13ff4     00 22 06 F6 | 	mov	local03, #0
13ff8     0F 13 02 F6 | 	mov	arg01, local01
13ffc     00 14 06 F6 | 	mov	arg02, #0
14000     F8 4B B0 FD | 	call	#__system___string_cmp
14004     00 FA 0D F2 | 	cmp	result1, #0 wz
14008     00 22 26 56 |  if_ne	not	local03, #0
1400c     11 21 CA F7 | 	test	local02, local03 wz
14010     4C 01 90 AD |  if_e	jmp	#LR__1616
14014                 | '   print filename
14014     00 12 06 F6 | 	mov	arg01, #0
14018     B8 A4 B0 FD | 	call	#__system___getiolock_0417
1401c     FD 12 02 F6 | 	mov	arg01, result1
14020     B0 4B B0 FD | 	call	#__system___lockmem
14024     00 12 06 F6 | 	mov	arg01, #0
14028     0F 15 02 F6 | 	mov	arg02, local01
1402c     00 16 06 F6 | 	mov	arg03, #0
14030     90 58 B0 FD | 	call	#__system___basic_print_string
14034     00 12 06 F6 | 	mov	arg01, #0
14038     0A 14 06 F6 | 	mov	arg02, #10
1403c     00 16 06 F6 | 	mov	arg03, #0
14040     28 58 B0 FD | 	call	#__system___basic_print_char
14044     00 12 06 F6 | 	mov	arg01, #0
14048     88 A4 B0 FD | 	call	#__system___getiolock_0417
1404c     FD 00 68 FC | 	wrlong	#0, result1
14050     00 12 06 F6 | 	mov	arg01, #0
14054     00 14 06 F6 | 	mov	arg02, #0
14058     B0 A5 B0 FD | 	call	#__system___basic_dir
1405c     FD 1E 02 F6 | 	mov	local01, result1
14060                 | '   filename = dir$()      ' continue scan
14060                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
14060                 | ' return cursor_y
14060     3A E4 05 F1 | 	add	objptr, #58
14064     F2 FA C1 FA | 	rdbyte	result1, objptr
14068     3A E4 85 F1 | 	sub	objptr, #58
1406c     22 FA 0D F2 | 	cmp	result1, #34 wz
14070     64 FF 9F 5D |  if_ne	jmp	#LR__1612
14074                 | '     print "-----more, press any key";
14074     00 12 06 F6 | 	mov	arg01, #0
14078     58 A4 B0 FD | 	call	#__system___getiolock_0417
1407c     FD 12 02 F6 | 	mov	arg01, result1
14080     50 4B B0 FD | 	call	#__system___lockmem
14084     43 01 00 FF 
14088     B8 14 06 F6 | 	mov	arg02, ##@LR__4640
1408c     00 12 06 F6 | 	mov	arg01, #0
14090     00 16 06 F6 | 	mov	arg03, #0
14094     2C 58 B0 FD | 	call	#__system___basic_print_string
14098     00 12 06 F6 | 	mov	arg01, #0
1409c     34 A4 B0 FD | 	call	#__system___getiolock_0417
140a0     FD 00 68 FC | 	wrlong	#0, result1
140a4                 | '     do 
140a4                 | LR__1613
140a4     CC 43 B0 FD | 	call	#_usbnew_spin2_get_key
140a8     00 FA 0D F2 | 	cmp	result1, #0 wz
140ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1613
140b0                 | '     do
140b0                 | LR__1614
140b0     C0 43 B0 FD | 	call	#_usbnew_spin2_get_key
140b4     00 FA 0D F2 | 	cmp	result1, #0 wz
140b8     F4 FF 9F AD |  if_e	jmp	#LR__1614
140bc                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
140bc     78 00 00 FF 
140c0     B4 E5 05 F1 | 	add	objptr, ##61876
140c4     F2 20 02 FB | 	rdlong	local02, objptr
140c8     78 00 00 FF 
140cc     B4 E5 85 F1 | 	sub	objptr, ##61876
140d0     01 20 0E F2 | 	cmp	local02, #1 wz
140d4     3C 00 90 5D |  if_ne	jmp	#LR__1615
140d8     7A 00 00 FF 
140dc     58 E4 05 F1 | 	add	objptr, ##62552
140e0     F2 14 02 FB | 	rdlong	arg02, objptr
140e4     04 E4 85 F1 | 	sub	objptr, #4
140e8     F2 1A 02 FB | 	rdlong	arg05, objptr
140ec     07 12 06 F6 | 	mov	arg01, #7
140f0     56 00 00 FF 
140f4     44 16 06 F6 | 	mov	arg03, ##44100
140f8     0E 18 C6 F9 | 	decod	arg04, #14
140fc     01 1C 66 F6 | 	neg	arg06, #1
14100     6E 00 00 FF 
14104     94 E5 85 F1 | 	sub	objptr, ##56724
14108     90 46 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1410c     0B 00 00 FF 
14110     C0 E4 85 F1 | 	sub	objptr, ##5824
14114                 | LR__1615
14114     00 12 06 F6 | 	mov	arg01, #0
14118     23 14 06 F6 | 	mov	arg02, #35
1411c     28 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
14120                 | '     position 0,35: print "                             ";: position 4,35  
14120     00 12 06 F6 | 	mov	arg01, #0
14124     AC A3 B0 FD | 	call	#__system___getiolock_0417
14128     FD 12 02 F6 | 	mov	arg01, result1
1412c     A4 4A B0 FD | 	call	#__system___lockmem
14130     43 01 00 FF 
14134     D1 14 06 F6 | 	mov	arg02, ##@LR__4641
14138     00 12 06 F6 | 	mov	arg01, #0
1413c     00 16 06 F6 | 	mov	arg03, #0
14140     80 57 B0 FD | 	call	#__system___basic_print_string
14144     00 12 06 F6 | 	mov	arg01, #0
14148     88 A3 B0 FD | 	call	#__system___getiolock_0417
1414c     FD 00 68 FC | 	wrlong	#0, result1
14150     04 12 06 F6 | 	mov	arg01, #4
14154     23 14 06 F6 | 	mov	arg02, #35
14158     EC 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1415c     78 FE 9F FD | 	jmp	#LR__1612
14160                 | LR__1616
14160     A7 F0 03 F6 | 	mov	ptra, fp
14164     B2 00 A0 FD | 	call	#popregs_
14168                 | _do_dir_ret
14168     2D 00 64 FD | 	ret
1416c                 | 
1416c                 | ' 
1416c                 | ' sub do_if
1416c                 | _do_if
1416c     05 4A 05 F6 | 	mov	COUNT_, #5
14170     A8 00 A0 FD | 	call	#pushregs_
14174     C4 56 BF FD | 	call	#_pop
14178     FD 1E 0A F6 | 	mov	local01, result1 wz
1417c     FE 20 02 F6 | 	mov	local02, result2
14180     FF 22 02 F6 | 	mov	local03, result3
14184                 | ' t1=pop()
14184                 | ' ' if uresult=0, jump over else
14184                 | ' if t1.result.uresult = 0 then 
14184     BC 00 90 5D |  if_ne	jmp	#LR__1622
14188                 | '   for i=lineptr_e to lineptr-1
14188     69 00 00 FF 
1418c     54 E4 05 F1 | 	add	objptr, ##53844
14190     F2 24 02 FB | 	rdlong	local04, objptr
14194     04 E4 85 F1 | 	sub	objptr, #4
14198     F2 26 02 FB | 	rdlong	local05, objptr
1419c     69 00 00 FF 
141a0     50 E4 85 F1 | 	sub	objptr, ##53840
141a4                 | LR__1620
141a4     13 25 52 F2 | 	cmps	local04, local05 wc
141a8     78 00 90 3D |  if_ae	jmp	#LR__1621
141ac     12 FF 01 F6 | 	mov	result3, local04
141b0     01 FE 65 F0 | 	shl	result3, #1
141b4     12 FF 01 F1 | 	add	result3, local04
141b8     02 FE 65 F0 | 	shl	result3, #2
141bc     66 00 00 FF 
141c0     50 E4 05 F1 | 	add	objptr, ##52304
141c4     F2 FE 01 F1 | 	add	result3, objptr
141c8     FF 1E 02 FB | 	rdlong	local01, result3
141cc     04 FE 05 F1 | 	add	result3, #4
141d0     FF FC 01 FB | 	rdlong	result2, result3
141d4     12 FF 01 F6 | 	mov	result3, local04
141d8     01 FE 65 F0 | 	shl	result3, #1
141dc     12 FF 01 F1 | 	add	result3, local04
141e0     02 FE 65 F0 | 	shl	result3, #2
141e4     F2 FE 01 F1 | 	add	result3, objptr
141e8     08 FE 05 F1 | 	add	result3, #8
141ec     FF FE 01 FB | 	rdlong	result3, result3
141f0     FE 20 02 F6 | 	mov	local02, result2
141f4     FF 22 02 F6 | 	mov	local03, result3
141f8                 | '     t1=compiledline(i)
141f8                 | '     if t1.result_type=token_else then lineptr_e=i : return
141f8     5A 22 0E F2 | 	cmp	local03, #90 wz
141fc     66 00 00 FF 
14200     50 E4 85 F1 | 	sub	objptr, ##52304
14204     69 00 00 AF 
14208     54 E4 05 A1 |  if_e	add	objptr, ##53844
1420c     F2 24 62 AC |  if_e	wrlong	local04, objptr
14210     69 00 00 AF 
14214     54 E4 85 A1 |  if_e	sub	objptr, ##53844
14218     28 00 90 AD |  if_e	jmp	#LR__1623
1421c     01 24 06 F1 | 	add	local04, #1
14220     80 FF 9F FD | 	jmp	#LR__1620
14224                 | LR__1621
14224     69 00 00 FF 
14228     50 E4 05 F1 | 	add	objptr, ##53840
1422c     F2 26 02 FB | 	rdlong	local05, objptr
14230     01 26 86 F1 | 	sub	local05, #1
14234     04 E4 05 F1 | 	add	objptr, #4
14238     F2 26 62 FC | 	wrlong	local05, objptr
1423c     69 00 00 FF 
14240     54 E4 85 F1 | 	sub	objptr, ##53844
14244                 | LR__1622
14244                 | LR__1623
14244     A7 F0 03 F6 | 	mov	ptra, fp
14248     B2 00 A0 FD | 	call	#popregs_
1424c                 | _do_if_ret
1424c     2D 00 64 FD | 	ret
14250                 | 
14250                 | ' 
14250                 | ' sub do_else
14250                 | _do_else
14250     69 00 00 FF 
14254     50 E4 05 F1 | 	add	objptr, ##53840
14258     F2 00 02 FB | 	rdlong	_var01, objptr
1425c     01 00 86 F1 | 	sub	_var01, #1
14260     04 E4 05 F1 | 	add	objptr, #4
14264     F2 00 62 FC | 	wrlong	_var01, objptr
14268     69 00 00 FF 
1426c     54 E4 85 F1 | 	sub	objptr, ##53844
14270                 | _do_else_ret
14270     2D 00 64 FD | 	ret
14274                 | 
14274                 | ' 
14274                 | ' 
14274                 | ' 
14274                 | ' sub do_nothing
14274                 | _do_nothing
14274                 | _do_nothing_ret
14274     2D 00 64 FD | 	ret
14278                 | 
14278                 | ' 
14278                 | ' sub do_brun
14278                 | _do_brun
14278     08 4A 05 F6 | 	mov	COUNT_, #8
1427c     A8 00 A0 FD | 	call	#pushregs_
14280     B8 55 BF FD | 	call	#_pop
14284     FE 1A 02 F6 | 	mov	arg05, result2
14288     FF 18 02 F6 | 	mov	arg04, result3
1428c     FD 1E 02 F6 | 	mov	local01, result1
14290     0D 21 02 F6 | 	mov	local02, arg05
14294     0C 23 02 F6 | 	mov	local03, arg04
14298                 | ' 
14298                 | ' t1=pop() 
14298                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
14298     2B 22 0E F2 | 	cmp	local03, #43 wz
1429c     10 00 90 5D |  if_ne	jmp	#LR__1630
142a0     0F 13 02 F6 | 	mov	arg01, local01
142a4     9C 86 BF FD | 	call	#_convertstring
142a8     FD 1E 02 F6 | 	mov	local01, result1
142ac     1F 22 06 F6 | 	mov	local03, #31
142b0                 | LR__1630
142b0                 | ' if t1.result_type=result_string then
142b0     1F 22 0E F2 | 	cmp	local03, #31 wz
142b4     EC 01 90 5D |  if_ne	jmp	#LR__1634
142b8     0F 25 02 F6 | 	mov	local04, local01
142bc                 | '   filename=t1.result.sresult
142bc                 | '   if left$(filename,1)="/" then 
142bc     12 13 02 F6 | 	mov	arg01, local04
142c0     01 14 06 F6 | 	mov	arg02, #1
142c4     18 69 B0 FD | 	call	#__system__Left_S
142c8     FD 12 02 F6 | 	mov	arg01, result1
142cc     43 01 00 FF 
142d0     EF 14 06 F6 | 	mov	arg02, ##@LR__4642
142d4     24 49 B0 FD | 	call	#__system___string_cmp
142d8     00 FA 0D F2 | 	cmp	result1, #0 wz
142dc     12 27 02 A6 |  if_e	mov	local05, local04
142e0     14 00 90 AD |  if_e	jmp	#LR__1631
142e4     43 01 00 FF 
142e8     F1 12 06 F6 | 	mov	arg01, ##@LR__4643
142ec     12 15 02 F6 | 	mov	arg02, local04
142f0     3C 49 B0 FD | 	call	#__system___string_concat
142f4     FD 26 02 F6 | 	mov	local05, result1
142f8                 | LR__1631
142f8                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
142f8                 | '   open fullfilename for input as #9
142f8     09 12 06 F6 | 	mov	arg01, #9
142fc     13 15 02 F6 | 	mov	arg02, local05
14300     00 16 06 F6 | 	mov	arg03, #0
14304     CC 54 B0 FD | 	call	#__system___basic_open_string
14308     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1430c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14310     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14314     FD 28 0A F6 | 	mov	local06, result1 wz
14318                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
14318     8C 00 90 AD |  if_e	jmp	#LR__1632
1431c     00 12 06 F6 | 	mov	arg01, #0
14320     B0 A1 B0 FD | 	call	#__system___getiolock_0417
14324     FD 12 02 F6 | 	mov	arg01, result1
14328     A8 48 B0 FD | 	call	#__system___lockmem
1432c     43 01 00 FF 
14330     FA 14 06 F6 | 	mov	arg02, ##@LR__4644
14334     00 12 06 F6 | 	mov	arg01, #0
14338     00 16 06 F6 | 	mov	arg03, #0
1433c     84 55 B0 FD | 	call	#__system___basic_print_string
14340     00 12 06 F6 | 	mov	arg01, #0
14344     14 15 02 F6 | 	mov	arg02, local06
14348     00 16 06 F6 | 	mov	arg03, #0
1434c     0A 18 06 F6 | 	mov	arg04, #10
14350     B4 55 B0 FD | 	call	#__system___basic_print_integer
14354     43 01 00 FF 
14358     08 15 06 F6 | 	mov	arg02, ##@LR__4645
1435c     00 12 06 F6 | 	mov	arg01, #0
14360     00 16 06 F6 | 	mov	arg03, #0
14364     5C 55 B0 FD | 	call	#__system___basic_print_string
14368     14 13 02 F6 | 	mov	arg01, local06
1436c     60 6E B0 FD | 	call	#__system___strerror
14370     FD 14 02 F6 | 	mov	arg02, result1
14374     00 12 06 F6 | 	mov	arg01, #0
14378     00 16 06 F6 | 	mov	arg03, #0
1437c     44 55 B0 FD | 	call	#__system___basic_print_string
14380     00 12 06 F6 | 	mov	arg01, #0
14384     0A 14 06 F6 | 	mov	arg02, #10
14388     00 16 06 F6 | 	mov	arg03, #0
1438c     DC 54 B0 FD | 	call	#__system___basic_print_char
14390     00 12 06 F6 | 	mov	arg01, #0
14394     3C A1 B0 FD | 	call	#__system___getiolock_0417
14398     FD 00 68 FC | 	wrlong	#0, result1
1439c     09 12 06 F6 | 	mov	arg01, #9
143a0     60 97 B0 FD | 	call	#__system__close
143a4     FC 00 90 FD | 	jmp	#LR__1635
143a8                 | LR__1632
143a8     01 2A 06 F6 | 	mov	local07, #1
143ac     00 2C 06 F6 | 	mov	local08, #0
143b0                 | '   do
143b0                 | LR__1633
143b0                 | '     get #9,pos,block(0),1024,r : pos+=r	
143b0     76 00 00 FF 
143b4     80 E5 05 F1 | 	add	objptr, ##60800
143b8     F2 16 02 F6 | 	mov	arg03, objptr
143bc     76 00 00 FF 
143c0     80 E5 85 F1 | 	sub	objptr, ##60800
143c4     09 12 06 F6 | 	mov	arg01, #9
143c8     15 15 02 F6 | 	mov	arg02, local07
143cc     0A 18 C6 F9 | 	decod	arg04, #10
143d0     01 1A 06 F6 | 	mov	arg05, #1
143d4     FC 55 B0 FD | 	call	#__system___basic_get
143d8     FD 28 02 F6 | 	mov	local06, result1
143dc     FD 2A 02 F1 | 	add	local07, result1
143e0     76 00 00 FF 
143e4     80 E5 05 F1 | 	add	objptr, ##60800
143e8     F2 12 02 F6 | 	mov	arg01, objptr
143ec     16 15 02 F6 | 	mov	arg02, local08
143f0     0A 16 C6 F9 | 	decod	arg03, #10
143f4     6B 00 00 FF 
143f8     C0 E4 85 F1 | 	sub	objptr, ##54976
143fc     80 3D B0 FD | 	call	#_psram_spin2_write
14400     0B 00 00 FF 
14404     C0 E4 85 F1 | 	sub	objptr, ##5824
14408     14 2D 02 F1 | 	add	local08, local06
1440c     02 00 00 FF 
14410     00 28 0E F2 | 	cmp	local06, ##1024 wz
14414     E0 03 00 AF 
14418     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1441c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1633
14420     55 00 00 FF 
14424     D0 E5 05 F1 | 	add	objptr, ##43984
14428     F2 12 02 FB | 	rdlong	arg01, objptr
1442c     03 12 62 FD | 	cogstop	arg01
14430     04 E4 05 F1 | 	add	objptr, #4
14434     F2 12 02 FB | 	rdlong	arg01, objptr
14438     03 12 62 FD | 	cogstop	arg01
1443c     04 E4 05 F1 | 	add	objptr, #4
14440     F2 12 02 FB | 	rdlong	arg01, objptr
14444     03 12 62 FD | 	cogstop	arg01
14448     22 00 00 FF 
1444c     E0 E5 05 F1 | 	add	objptr, ##17888
14450     F2 12 02 FB | 	rdlong	arg01, objptr
14454     03 12 62 FD | 	cogstop	arg01
14458     10 00 00 FF 
1445c     9C EA 05 F1 | 	add	ptr__dat__, ##8348
14460     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14464     10 00 00 FF 
14468     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
1446c     22 00 00 FF 
14470     D8 E5 85 F1 | 	sub	objptr, ##17880
14474     1E 2C 06 F6 | 	mov	local08, #30
14478     28 E4 61 FD | 	setq	objptr
1447c     0A 2D F2 FC | 	coginit	local08, arg02 wc
14480     01 2C 66 C6 |  if_b	neg	local08, #1
14484     24 00 00 FF 
14488     F4 E4 05 F1 | 	add	objptr, ##18676
1448c     F2 2C 62 FC | 	wrlong	local08, objptr
14490     7A 00 00 FF 
14494     D4 E4 85 F1 | 	sub	objptr, ##62676
14498     00 12 06 F6 | 	mov	arg01, #0
1449c     01 12 62 FD | 	cogid	arg01
144a0     03 12 62 FD | 	cogstop	arg01
144a4                 | LR__1634
144a4                 | LR__1635
144a4     A7 F0 03 F6 | 	mov	ptra, fp
144a8     B2 00 A0 FD | 	call	#popregs_
144ac                 | _do_brun_ret
144ac     2D 00 64 FD | 	ret
144b0                 | 
144b0                 | ' 
144b0                 | ' 
144b0                 | ' sub do_mouse
144b0                 | _do_mouse
144b0     88 53 BF FD | 	call	#_pop
144b4     00 FA 4D F2 | 	cmps	result1, #0 wz
144b8                 | ' 
144b8                 | ' t1=pop()
144b8                 | ' 
144b8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
144b8     14 00 90 5D |  if_ne	jmp	#LR__1640
144bc     10 12 06 F6 | 	mov	arg01, #16
144c0     00 14 06 F6 | 	mov	arg02, #0
144c4     00 16 06 F6 | 	mov	arg03, #0
144c8     6C 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
144cc     10 00 90 FD | 	jmp	#LR__1641
144d0                 | LR__1640
144d0     10 12 06 F6 | 	mov	arg01, #16
144d4     20 14 06 F6 | 	mov	arg02, #32
144d8     20 16 06 F6 | 	mov	arg03, #32
144dc     58 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
144e0                 | LR__1641
144e0                 | _do_mouse_ret
144e0     2D 00 64 FD | 	ret
144e4                 | 
144e4                 | ' 
144e4                 | ' sub do_cursor
144e4                 | _do_cursor
144e4     54 53 BF FD | 	call	#_pop
144e8     00 FA 4D F2 | 	cmps	result1, #0 wz
144ec                 | ' 
144ec                 | ' t1=pop()
144ec                 | ' 
144ec                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
144ec     14 00 90 5D |  if_ne	jmp	#LR__1650
144f0     11 12 06 F6 | 	mov	arg01, #17
144f4     00 14 06 F6 | 	mov	arg02, #0
144f8     00 16 06 F6 | 	mov	arg03, #0
144fc     38 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14500     10 00 90 FD | 	jmp	#LR__1651
14504                 | LR__1650
14504     11 12 06 F6 | 	mov	arg01, #17
14508     08 14 06 F6 | 	mov	arg02, #8
1450c     10 16 06 F6 | 	mov	arg03, #16
14510     24 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14514                 | LR__1651
14514                 | _do_cursor_ret
14514     2D 00 64 FD | 	ret
14518                 | 
14518                 | ' 
14518                 | ' 
14518                 | ' sub do_click
14518                 | _do_click
14518     20 53 BF FD | 	call	#_pop
1451c     00 FA 4D F2 | 	cmps	result1, #0 wz
14520                 | ' 
14520                 | ' t1=pop()
14520                 | ' 
14520                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14520     78 00 00 AF 
14524     B4 E5 05 A1 |  if_e	add	objptr, ##61876
14528     F2 00 68 AC |  if_e	wrlong	#0, objptr
1452c     78 00 00 FF 
14530     B4 E5 C5 F3 | 	sumz	objptr, ##61876
14534     F2 02 68 5C |  if_ne	wrlong	#1, objptr
14538     78 00 00 5F 
1453c     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
14540                 | _do_click_ret
14540     2D 00 64 FD | 	ret
14544                 | 
14544                 | ' 
14544                 | ' 
14544                 | ' sub do_beep
14544                 | _do_beep
14544     02 4A 05 F6 | 	mov	COUNT_, #2
14548     A8 00 A0 FD | 	call	#pushregs_
1454c     20 F0 07 F1 | 	add	ptra, #32
14550     E8 52 BF FD | 	call	#_pop
14554     FD 1E 02 F6 | 	mov	local01, result1
14558     FE 1C 02 F6 | 	mov	arg06, result2
1455c     FF 20 02 F6 | 	mov	local02, result3
14560     0C 4E 05 F1 | 	add	fp, #12
14564     A7 1E 62 FC | 	wrlong	local01, fp
14568     04 4E 05 F1 | 	add	fp, #4
1456c     A7 1C 62 FC | 	wrlong	arg06, fp
14570     04 4E 05 F1 | 	add	fp, #4
14574     A7 20 62 FC | 	wrlong	local02, fp
14578     14 4E 85 F1 | 	sub	fp, #20
1457c     BC 52 BF FD | 	call	#_pop
14580     A7 FA 61 FC | 	wrlong	result1, fp
14584     04 4E 05 F1 | 	add	fp, #4
14588     A7 FC 61 FC | 	wrlong	result2, fp
1458c     04 4E 05 F1 | 	add	fp, #4
14590     A7 FE 61 FC | 	wrlong	result3, fp
14594                 | ' 
14594                 | ' 
14594                 | ' 
14594                 | ' t2=pop()
14594                 | ' t1=pop()
14594                 | ' 
14594                 | ' 
14594                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14594     08 4E 85 F1 | 	sub	fp, #8
14598     1C FE 0D F2 | 	cmp	result3, #28 wz
1459c     08 4E 05 51 |  if_ne	add	fp, #8
145a0     A7 20 02 5B |  if_ne	rdlong	local02, fp
145a4     08 4E 85 51 |  if_ne	sub	fp, #8
145a8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
145ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
145b0     18 4E 05 A1 |  if_e	add	fp, #24
145b4     A7 1E 62 AC |  if_e	wrlong	local01, fp
145b8     18 4E 85 A1 |  if_e	sub	fp, #24
145bc     14 00 90 AD |  if_e	jmp	#LR__1660
145c0     A7 12 02 F6 | 	mov	arg01, fp
145c4     04 C7 BF FD | 	call	#_converttoint
145c8     18 4E 05 F1 | 	add	fp, #24
145cc     A7 FA 61 FC | 	wrlong	result1, fp
145d0     18 4E 85 F1 | 	sub	fp, #24
145d4                 | LR__1660
145d4     1C 4E 05 F1 | 	add	fp, #28
145d8     A7 FE 48 FC | 	wrbyte	#127, fp
145dc     01 4E 05 F1 | 	add	fp, #1
145e0     A7 00 49 FC | 	wrbyte	#128, fp
145e4     01 4E 85 F1 | 	sub	fp, #1
145e8     A7 14 02 F6 | 	mov	arg02, fp
145ec     04 4E 85 F1 | 	sub	fp, #4
145f0     A7 16 02 FB | 	rdlong	arg03, fp
145f4     18 4E 85 F1 | 	sub	fp, #24
145f8     01 16 66 F0 | 	shl	arg03, #1
145fc     07 12 06 F6 | 	mov	arg01, #7
14600     0E 18 C6 F9 | 	decod	arg04, #14
14604     02 1A 06 F6 | 	mov	arg05, #2
14608     00 1C 06 F6 | 	mov	arg06, #0
1460c     0B 00 00 FF 
14610     C0 E4 05 F1 | 	add	objptr, ##5824
14614     20 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
14618     0B 00 00 FF 
1461c     C0 E4 85 F1 | 	sub	objptr, ##5824
14620     0C 4E 05 F1 | 	add	fp, #12
14624     A7 12 02 F6 | 	mov	arg01, fp
14628     0C 4E 85 F1 | 	sub	fp, #12
1462c     A4 52 BF FD | 	call	#_push
14630     FC F6 BF FD | 	call	#_do_waitms
14634     07 12 06 F6 | 	mov	arg01, #7
14638     0B 00 00 FF 
1463c     C0 E4 05 F1 | 	add	objptr, ##5824
14640     A8 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
14644     0B 00 00 FF 
14648     C0 E4 85 F1 | 	sub	objptr, ##5824
1464c     A7 F0 03 F6 | 	mov	ptra, fp
14650     B2 00 A0 FD | 	call	#popregs_
14654                 | _do_beep_ret
14654     2D 00 64 FD | 	ret
14658                 | 
14658                 | ' 
14658                 | ' sub do_no_command
14658                 | _do_no_command
14658     17 12 06 F6 | 	mov	arg01, #23
1465c     50 10 B0 FD | 	call	#_printerror
14660                 | _do_no_command_ret
14660     2D 00 64 FD | 	ret
14664                 | 
14664                 | ' 
14664                 | ' sub do_negative
14664                 | _do_negative
14664     02 4A 05 F6 | 	mov	COUNT_, #2
14668     A8 00 A0 FD | 	call	#pushregs_
1466c     0C F0 07 F1 | 	add	ptra, #12
14670     C8 51 BF FD | 	call	#_pop
14674     FF 1E 02 F6 | 	mov	local01, result3
14678     A7 FA 61 FC | 	wrlong	result1, fp
1467c     04 4E 05 F1 | 	add	fp, #4
14680     A7 FC 61 FC | 	wrlong	result2, fp
14684     04 4E 05 F1 | 	add	fp, #4
14688     A7 1E 62 FC | 	wrlong	local01, fp
1468c                 | ' t1=pop()
1468c                 | ' if t1.result_type=result_int then 
1468c     08 4E 85 F1 | 	sub	fp, #8
14690     1C 1E 0E F2 | 	cmp	local01, #28 wz
14694     A7 20 02 AB |  if_e	rdlong	local02, fp
14698     10 1F 62 A6 |  if_e	neg	local01, local02
1469c     A7 1E 62 AC |  if_e	wrlong	local01, fp
146a0     5C 00 90 AD |  if_e	jmp	#LR__1672
146a4     08 4E 05 F1 | 	add	fp, #8
146a8     A7 1E 02 FB | 	rdlong	local01, fp
146ac     08 4E 85 F1 | 	sub	fp, #8
146b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
146b4     1C 00 90 5D |  if_ne	jmp	#LR__1670
146b8     A7 20 02 FB | 	rdlong	local02, fp
146bc     10 1F 62 F6 | 	neg	local01, local02
146c0     A7 1E 62 FC | 	wrlong	local01, fp
146c4     08 4E 05 F1 | 	add	fp, #8
146c8     A7 38 68 FC | 	wrlong	#28, fp
146cc     08 4E 85 F1 | 	sub	fp, #8
146d0     2C 00 90 FD | 	jmp	#LR__1671
146d4                 | LR__1670
146d4     08 4E 05 F1 | 	add	fp, #8
146d8     A7 1E 02 FB | 	rdlong	local01, fp
146dc     08 4E 85 F1 | 	sub	fp, #8
146e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
146e4     A7 FA 01 AB |  if_e	rdlong	result1, fp
146e8     1F FA E5 A4 |  if_e	bitnot	result1, #31
146ec     A7 FA 61 AC |  if_e	wrlong	result1, fp
146f0     08 4E 05 51 |  if_ne	add	fp, #8
146f4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
146f8     08 4E 85 51 |  if_ne	sub	fp, #8
146fc     A7 50 68 5C |  if_ne	wrlong	#40, fp
14700                 | LR__1671
14700                 | LR__1672
14700     A7 12 02 F6 | 	mov	arg01, fp
14704     CC 51 BF FD | 	call	#_push
14708     A7 F0 03 F6 | 	mov	ptra, fp
1470c     B2 00 A0 FD | 	call	#popregs_
14710                 | _do_negative_ret
14710     2D 00 64 FD | 	ret
14714                 | 
14714                 | ' 
14714                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14714                 | ' 
14714                 | ' ''----------------------------------------------------------------------------------------------------
14714                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14714                 | ' ''----------------------------------------------------------------------------------------------------
14714                 | ' 
14714                 | ' ''--------------------------- Command function pointers
14714                 | ' 
14714                 | ' sub init_commands
14714                 | _init_commands
14714                 | ' 
14714                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14714     00 00 06 F6 | 	mov	_var01, #0
14718     97 16 48 FB | 	callpa	#(@LR__1681-@LR__1680)>>2,fcache_load_ptr_
1471c                 | LR__1680
1471c     00 FB 01 F6 | 	mov	result1, _var01
14720     02 FA 65 F0 | 	shl	result1, #2
14724     62 00 00 FF 
14728     34 E4 05 F1 | 	add	objptr, ##50228
1472c     F2 FA 01 F1 | 	add	result1, objptr
14730     62 00 00 FF 
14734     34 E4 85 F1 | 	sub	objptr, ##50228
14738     FD E4 61 FC | 	wrlong	objptr, result1
1473c     01 00 06 F1 | 	add	_var01, #1
14740     00 01 56 F2 | 	cmps	_var01, #256 wc
14744     D4 FF 9F CD |  if_b	jmp	#LR__1680
14748                 | LR__1681
14748     F2 FA 01 F6 | 	mov	result1, objptr
1474c     14 FA 25 F4 | 	bith	result1, #20
14750     62 00 00 FF 
14754     38 E4 05 F1 | 	add	objptr, ##50232
14758     F2 FA 61 FC | 	wrlong	result1, objptr
1475c     62 00 00 FF 
14760     38 E4 85 F1 | 	sub	objptr, ##50232
14764     F2 FA 01 F6 | 	mov	result1, objptr
14768     15 FA 25 F4 | 	bith	result1, #21
1476c     62 00 00 FF 
14770     3C E4 05 F1 | 	add	objptr, ##50236
14774     F2 FA 61 FC | 	wrlong	result1, objptr
14778     62 00 00 FF 
1477c     3C E4 85 F1 | 	sub	objptr, ##50236
14780     F2 FA 01 F6 | 	mov	result1, objptr
14784     34 FA 25 F4 | 	bith	result1, #52
14788     62 00 00 FF 
1478c     40 E4 05 F1 | 	add	objptr, ##50240
14790     F2 FA 61 FC | 	wrlong	result1, objptr
14794     62 00 00 FF 
14798     40 E4 85 F1 | 	sub	objptr, ##50240
1479c     F2 FA 01 F6 | 	mov	result1, objptr
147a0     16 FA 25 F4 | 	bith	result1, #22
147a4     62 00 00 FF 
147a8     48 E4 05 F1 | 	add	objptr, ##50248
147ac     F2 FA 61 FC | 	wrlong	result1, objptr
147b0     62 00 00 FF 
147b4     48 E4 85 F1 | 	sub	objptr, ##50248
147b8     F2 FA 01 F6 | 	mov	result1, objptr
147bc     00 28 00 FF 
147c0     00 FA 45 F5 | 	or	result1, ##5242880
147c4     62 00 00 FF 
147c8     4C E4 05 F1 | 	add	objptr, ##50252
147cc     F2 FA 61 FC | 	wrlong	result1, objptr
147d0     62 00 00 FF 
147d4     4C E4 85 F1 | 	sub	objptr, ##50252
147d8     F2 FA 01 F6 | 	mov	result1, objptr
147dc     35 FA 25 F4 | 	bith	result1, #53
147e0     62 00 00 FF 
147e4     50 E4 05 F1 | 	add	objptr, ##50256
147e8     F2 FA 61 FC | 	wrlong	result1, objptr
147ec     62 00 00 FF 
147f0     50 E4 85 F1 | 	sub	objptr, ##50256
147f4     F2 FA 01 F6 | 	mov	result1, objptr
147f8     54 FA 25 F4 | 	bith	result1, #84
147fc     62 00 00 FF 
14800     54 E4 05 F1 | 	add	objptr, ##50260
14804     F2 FA 61 FC | 	wrlong	result1, objptr
14808     62 00 00 FF 
1480c     54 E4 85 F1 | 	sub	objptr, ##50260
14810     F2 FA 01 F6 | 	mov	result1, objptr
14814     17 FA 25 F4 | 	bith	result1, #23
14818     62 00 00 FF 
1481c     58 E4 05 F1 | 	add	objptr, ##50264
14820     F2 FA 61 FC | 	wrlong	result1, objptr
14824     62 00 00 FF 
14828     58 E4 85 F1 | 	sub	objptr, ##50264
1482c     F2 FA 01 F6 | 	mov	result1, objptr
14830     00 48 00 FF 
14834     00 FA 45 F5 | 	or	result1, ##9437184
14838     62 00 00 FF 
1483c     5C E4 05 F1 | 	add	objptr, ##50268
14840     F2 FA 61 FC | 	wrlong	result1, objptr
14844     62 00 00 FF 
14848     5C E4 85 F1 | 	sub	objptr, ##50268
1484c     F2 FA 01 F6 | 	mov	result1, objptr
14850     00 50 00 FF 
14854     00 FA 45 F5 | 	or	result1, ##10485760
14858     62 00 00 FF 
1485c     60 E4 05 F1 | 	add	objptr, ##50272
14860     F2 FA 61 FC | 	wrlong	result1, objptr
14864     62 00 00 FF 
14868     60 E4 85 F1 | 	sub	objptr, ##50272
1486c     F2 FA 01 F6 | 	mov	result1, objptr
14870     00 58 00 FF 
14874     00 FA 45 F5 | 	or	result1, ##11534336
14878     62 00 00 FF 
1487c     64 E4 05 F1 | 	add	objptr, ##50276
14880     F2 FA 61 FC | 	wrlong	result1, objptr
14884     62 00 00 FF 
14888     64 E4 85 F1 | 	sub	objptr, ##50276
1488c     F2 FA 01 F6 | 	mov	result1, objptr
14890     36 FA 25 F4 | 	bith	result1, #54
14894     62 00 00 FF 
14898     78 E4 05 F1 | 	add	objptr, ##50296
1489c     F2 FA 61 FC | 	wrlong	result1, objptr
148a0     62 00 00 FF 
148a4     78 E4 85 F1 | 	sub	objptr, ##50296
148a8     F2 FA 01 F6 | 	mov	result1, objptr
148ac     00 68 00 FF 
148b0     00 FA 45 F5 | 	or	result1, ##13631488
148b4     62 00 00 FF 
148b8     A8 E4 05 F1 | 	add	objptr, ##50344
148bc     F2 FA 61 FC | 	wrlong	result1, objptr
148c0     62 00 00 FF 
148c4     A8 E4 85 F1 | 	sub	objptr, ##50344
148c8     F2 FA 01 F6 | 	mov	result1, objptr
148cc     00 68 00 FF 
148d0     00 FA 45 F5 | 	or	result1, ##13631488
148d4     62 00 00 FF 
148d8     A4 E4 05 F1 | 	add	objptr, ##50340
148dc     F2 FA 61 FC | 	wrlong	result1, objptr
148e0     62 00 00 FF 
148e4     A4 E4 85 F1 | 	sub	objptr, ##50340
148e8     F2 FA 01 F6 | 	mov	result1, objptr
148ec     00 68 00 FF 
148f0     00 FA 45 F5 | 	or	result1, ##13631488
148f4     62 00 00 FF 
148f8     AC E4 05 F1 | 	add	objptr, ##50348
148fc     F2 FA 61 FC | 	wrlong	result1, objptr
14900     62 00 00 FF 
14904     AC E4 85 F1 | 	sub	objptr, ##50348
14908     F2 FA 01 F6 | 	mov	result1, objptr
1490c     00 68 00 FF 
14910     00 FA 45 F5 | 	or	result1, ##13631488
14914     62 00 00 FF 
14918     B0 E4 05 F1 | 	add	objptr, ##50352
1491c     F2 FA 61 FC | 	wrlong	result1, objptr
14920     62 00 00 FF 
14924     B0 E4 85 F1 | 	sub	objptr, ##50352
14928     F2 FA 01 F6 | 	mov	result1, objptr
1492c     00 68 00 FF 
14930     00 FA 45 F5 | 	or	result1, ##13631488
14934     62 00 00 FF 
14938     E0 E4 05 F1 | 	add	objptr, ##50400
1493c     F2 FA 61 FC | 	wrlong	result1, objptr
14940     62 00 00 FF 
14944     E0 E4 85 F1 | 	sub	objptr, ##50400
14948     F2 FA 01 F6 | 	mov	result1, objptr
1494c     55 FA 25 F4 | 	bith	result1, #85
14950     62 00 00 FF 
14954     90 E4 05 F1 | 	add	objptr, ##50320
14958     F2 FA 61 FC | 	wrlong	result1, objptr
1495c     62 00 00 FF 
14960     90 E4 85 F1 | 	sub	objptr, ##50320
14964     F2 FA 01 F6 | 	mov	result1, objptr
14968     00 68 00 FF 
1496c     00 FA 45 F5 | 	or	result1, ##13631488
14970     62 00 00 FF 
14974     B4 E4 05 F1 | 	add	objptr, ##50356
14978     F2 FA 61 FC | 	wrlong	result1, objptr
1497c     62 00 00 FF 
14980     B4 E4 85 F1 | 	sub	objptr, ##50356
14984     F2 FA 01 F6 | 	mov	result1, objptr
14988     00 68 00 FF 
1498c     00 FA 45 F5 | 	or	result1, ##13631488
14990     62 00 00 FF 
14994     B8 E4 05 F1 | 	add	objptr, ##50360
14998     F2 FA 61 FC | 	wrlong	result1, objptr
1499c     62 00 00 FF 
149a0     B8 E4 85 F1 | 	sub	objptr, ##50360
149a4     F2 FA 01 F6 | 	mov	result1, objptr
149a8     00 68 00 FF 
149ac     00 FA 45 F5 | 	or	result1, ##13631488
149b0     62 00 00 FF 
149b4     BC E4 05 F1 | 	add	objptr, ##50364
149b8     F2 FA 61 FC | 	wrlong	result1, objptr
149bc     62 00 00 FF 
149c0     BC E4 85 F1 | 	sub	objptr, ##50364
149c4     F2 FA 01 F6 | 	mov	result1, objptr
149c8     74 FA 25 F4 | 	bith	result1, #116
149cc     62 00 00 FF 
149d0     34 E5 05 F1 | 	add	objptr, ##50484
149d4     F2 FA 61 FC | 	wrlong	result1, objptr
149d8     62 00 00 FF 
149dc     34 E5 85 F1 | 	sub	objptr, ##50484
149e0     F2 FA 01 F6 | 	mov	result1, objptr
149e4     18 FA 25 F4 | 	bith	result1, #24
149e8     62 00 00 FF 
149ec     38 E5 05 F1 | 	add	objptr, ##50488
149f0     F2 FA 61 FC | 	wrlong	result1, objptr
149f4     62 00 00 FF 
149f8     38 E5 85 F1 | 	sub	objptr, ##50488
149fc     F2 FA 01 F6 | 	mov	result1, objptr
14a00     00 88 00 FF 
14a04     00 FA 45 F5 | 	or	result1, ##17825792
14a08     62 00 00 FF 
14a0c     3C E5 05 F1 | 	add	objptr, ##50492
14a10     F2 FA 61 FC | 	wrlong	result1, objptr
14a14     62 00 00 FF 
14a18     3C E5 85 F1 | 	sub	objptr, ##50492
14a1c     F2 FA 01 F6 | 	mov	result1, objptr
14a20     00 90 00 FF 
14a24     00 FA 45 F5 | 	or	result1, ##18874368
14a28     62 00 00 FF 
14a2c     40 E5 05 F1 | 	add	objptr, ##50496
14a30     F2 FA 61 FC | 	wrlong	result1, objptr
14a34     62 00 00 FF 
14a38     40 E5 85 F1 | 	sub	objptr, ##50496
14a3c     F2 FA 01 F6 | 	mov	result1, objptr
14a40     00 98 00 FF 
14a44     00 FA 45 F5 | 	or	result1, ##19922944
14a48     62 00 00 FF 
14a4c     44 E5 05 F1 | 	add	objptr, ##50500
14a50     F2 FA 61 FC | 	wrlong	result1, objptr
14a54     62 00 00 FF 
14a58     44 E5 85 F1 | 	sub	objptr, ##50500
14a5c     F2 FA 01 F6 | 	mov	result1, objptr
14a60     00 A0 00 FF 
14a64     00 FA 45 F5 | 	or	result1, ##20971520
14a68     62 00 00 FF 
14a6c     48 E5 05 F1 | 	add	objptr, ##50504
14a70     F2 FA 61 FC | 	wrlong	result1, objptr
14a74     62 00 00 FF 
14a78     48 E5 85 F1 | 	sub	objptr, ##50504
14a7c     F2 FA 01 F6 | 	mov	result1, objptr
14a80     00 A8 00 FF 
14a84     00 FA 45 F5 | 	or	result1, ##22020096
14a88     62 00 00 FF 
14a8c     4C E5 05 F1 | 	add	objptr, ##50508
14a90     F2 FA 61 FC | 	wrlong	result1, objptr
14a94     62 00 00 FF 
14a98     4C E5 85 F1 | 	sub	objptr, ##50508
14a9c     F2 FA 01 F6 | 	mov	result1, objptr
14aa0     00 B0 00 FF 
14aa4     00 FA 45 F5 | 	or	result1, ##23068672
14aa8     62 00 00 FF 
14aac     50 E5 05 F1 | 	add	objptr, ##50512
14ab0     F2 FA 61 FC | 	wrlong	result1, objptr
14ab4     62 00 00 FF 
14ab8     50 E5 85 F1 | 	sub	objptr, ##50512
14abc     F2 FA 01 F6 | 	mov	result1, objptr
14ac0     00 B8 00 FF 
14ac4     00 FA 45 F5 | 	or	result1, ##24117248
14ac8     62 00 00 FF 
14acc     54 E5 05 F1 | 	add	objptr, ##50516
14ad0     F2 FA 61 FC | 	wrlong	result1, objptr
14ad4     62 00 00 FF 
14ad8     54 E5 85 F1 | 	sub	objptr, ##50516
14adc     F2 FA 01 F6 | 	mov	result1, objptr
14ae0     37 FA 25 F4 | 	bith	result1, #55
14ae4     62 00 00 FF 
14ae8     58 E5 05 F1 | 	add	objptr, ##50520
14aec     F2 FA 61 FC | 	wrlong	result1, objptr
14af0     62 00 00 FF 
14af4     58 E5 85 F1 | 	sub	objptr, ##50520
14af8     F2 FA 01 F6 | 	mov	result1, objptr
14afc     00 C8 00 FF 
14b00     00 FA 45 F5 | 	or	result1, ##26214400
14b04     62 00 00 FF 
14b08     5C E5 05 F1 | 	add	objptr, ##50524
14b0c     F2 FA 61 FC | 	wrlong	result1, objptr
14b10     62 00 00 FF 
14b14     5C E5 85 F1 | 	sub	objptr, ##50524
14b18     F2 FA 01 F6 | 	mov	result1, objptr
14b1c     00 D0 00 FF 
14b20     00 FA 45 F5 | 	or	result1, ##27262976
14b24     62 00 00 FF 
14b28     60 E5 05 F1 | 	add	objptr, ##50528
14b2c     F2 FA 61 FC | 	wrlong	result1, objptr
14b30     62 00 00 FF 
14b34     60 E5 85 F1 | 	sub	objptr, ##50528
14b38     F2 FA 01 F6 | 	mov	result1, objptr
14b3c     00 D8 00 FF 
14b40     00 FA 45 F5 | 	or	result1, ##28311552
14b44     62 00 00 FF 
14b48     64 E5 05 F1 | 	add	objptr, ##50532
14b4c     F2 FA 61 FC | 	wrlong	result1, objptr
14b50     62 00 00 FF 
14b54     64 E5 85 F1 | 	sub	objptr, ##50532
14b58     F2 FA 01 F6 | 	mov	result1, objptr
14b5c     56 FA 25 F4 | 	bith	result1, #86
14b60     62 00 00 FF 
14b64     68 E5 05 F1 | 	add	objptr, ##50536
14b68     F2 FA 61 FC | 	wrlong	result1, objptr
14b6c     62 00 00 FF 
14b70     68 E5 85 F1 | 	sub	objptr, ##50536
14b74     F2 FA 01 F6 | 	mov	result1, objptr
14b78     00 E8 00 FF 
14b7c     00 FA 45 F5 | 	or	result1, ##30408704
14b80     64 00 00 FF 
14b84     30 E4 05 F1 | 	add	objptr, ##51248
14b88     F2 FA 61 FC | 	wrlong	result1, objptr
14b8c     64 00 00 FF 
14b90     30 E4 85 F1 | 	sub	objptr, ##51248
14b94     F2 FA 01 F6 | 	mov	result1, objptr
14b98     75 FA 25 F4 | 	bith	result1, #117
14b9c     62 00 00 FF 
14ba0     6C E5 05 F1 | 	add	objptr, ##50540
14ba4     F2 FA 61 FC | 	wrlong	result1, objptr
14ba8     62 00 00 FF 
14bac     6C E5 85 F1 | 	sub	objptr, ##50540
14bb0     F2 FA 01 F6 | 	mov	result1, objptr
14bb4     94 FA 25 F4 | 	bith	result1, #148
14bb8     62 00 00 FF 
14bbc     80 E5 05 F1 | 	add	objptr, ##50560
14bc0     F2 FA 61 FC | 	wrlong	result1, objptr
14bc4     62 00 00 FF 
14bc8     80 E5 85 F1 | 	sub	objptr, ##50560
14bcc     F2 FA 01 F6 | 	mov	result1, objptr
14bd0     19 FA 25 F4 | 	bith	result1, #25
14bd4     62 00 00 FF 
14bd8     70 E5 05 F1 | 	add	objptr, ##50544
14bdc     F2 FA 61 FC | 	wrlong	result1, objptr
14be0     62 00 00 FF 
14be4     70 E5 85 F1 | 	sub	objptr, ##50544
14be8     F2 FA 01 F6 | 	mov	result1, objptr
14bec     00 08 01 FF 
14bf0     00 FA 45 F5 | 	or	result1, ##34603008
14bf4     62 00 00 FF 
14bf8     8C E4 05 F1 | 	add	objptr, ##50316
14bfc     F2 FA 61 FC | 	wrlong	result1, objptr
14c00     62 00 00 FF 
14c04     8C E4 85 F1 | 	sub	objptr, ##50316
14c08     F2 FA 01 F6 | 	mov	result1, objptr
14c0c     00 10 01 FF 
14c10     00 FA 45 F5 | 	or	result1, ##35651584
14c14     62 00 00 FF 
14c18     74 E5 05 F1 | 	add	objptr, ##50548
14c1c     F2 FA 61 FC | 	wrlong	result1, objptr
14c20     62 00 00 FF 
14c24     74 E5 85 F1 | 	sub	objptr, ##50548
14c28     F2 FA 01 F6 | 	mov	result1, objptr
14c2c     00 18 01 FF 
14c30     00 FA 45 F5 | 	or	result1, ##36700160
14c34     62 00 00 FF 
14c38     78 E5 05 F1 | 	add	objptr, ##50552
14c3c     F2 FA 61 FC | 	wrlong	result1, objptr
14c40     62 00 00 FF 
14c44     78 E5 85 F1 | 	sub	objptr, ##50552
14c48     F2 FA 01 F6 | 	mov	result1, objptr
14c4c     00 20 01 FF 
14c50     00 FA 45 F5 | 	or	result1, ##37748736
14c54     62 00 00 FF 
14c58     7C E5 05 F1 | 	add	objptr, ##50556
14c5c     F2 FA 61 FC | 	wrlong	result1, objptr
14c60     62 00 00 FF 
14c64     7C E5 85 F1 | 	sub	objptr, ##50556
14c68     F2 FA 01 F6 | 	mov	result1, objptr
14c6c     00 28 01 FF 
14c70     00 FA 45 F5 | 	or	result1, ##38797312
14c74     62 00 00 FF 
14c78     88 E5 05 F1 | 	add	objptr, ##50568
14c7c     F2 FA 61 FC | 	wrlong	result1, objptr
14c80     62 00 00 FF 
14c84     88 E5 85 F1 | 	sub	objptr, ##50568
14c88     F2 FA 01 F6 | 	mov	result1, objptr
14c8c     00 30 01 FF 
14c90     00 FA 45 F5 | 	or	result1, ##39845888
14c94     62 00 00 FF 
14c98     8C E5 05 F1 | 	add	objptr, ##50572
14c9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ca0     62 00 00 FF 
14ca4     8C E5 85 F1 | 	sub	objptr, ##50572
14ca8     F2 FA 01 F6 | 	mov	result1, objptr
14cac     00 38 01 FF 
14cb0     00 FA 45 F5 | 	or	result1, ##40894464
14cb4     62 00 00 FF 
14cb8     90 E5 05 F1 | 	add	objptr, ##50576
14cbc     F2 FA 61 FC | 	wrlong	result1, objptr
14cc0     62 00 00 FF 
14cc4     90 E5 85 F1 | 	sub	objptr, ##50576
14cc8     F2 FA 01 F6 | 	mov	result1, objptr
14ccc     00 40 01 FF 
14cd0     00 FA 45 F5 | 	or	result1, ##41943040
14cd4     62 00 00 FF 
14cd8     94 E5 05 F1 | 	add	objptr, ##50580
14cdc     F2 FA 61 FC | 	wrlong	result1, objptr
14ce0     62 00 00 FF 
14ce4     94 E5 85 F1 | 	sub	objptr, ##50580
14ce8     F2 FA 01 F6 | 	mov	result1, objptr
14cec     00 48 01 FF 
14cf0     00 FA 45 F5 | 	or	result1, ##42991616
14cf4     62 00 00 FF 
14cf8     9C E5 05 F1 | 	add	objptr, ##50588
14cfc     F2 FA 61 FC | 	wrlong	result1, objptr
14d00     62 00 00 FF 
14d04     9C E5 85 F1 | 	sub	objptr, ##50588
14d08     F2 FA 01 F6 | 	mov	result1, objptr
14d0c     00 50 01 FF 
14d10     00 FA 45 F5 | 	or	result1, ##44040192
14d14     62 00 00 FF 
14d18     A0 E5 05 F1 | 	add	objptr, ##50592
14d1c     F2 FA 61 FC | 	wrlong	result1, objptr
14d20     62 00 00 FF 
14d24     A0 E5 85 F1 | 	sub	objptr, ##50592
14d28     F2 FA 01 F6 | 	mov	result1, objptr
14d2c     00 58 01 FF 
14d30     00 FA 45 F5 | 	or	result1, ##45088768
14d34     62 00 00 FF 
14d38     A0 E4 05 F1 | 	add	objptr, ##50336
14d3c     F2 FA 61 FC | 	wrlong	result1, objptr
14d40     62 00 00 FF 
14d44     A0 E4 85 F1 | 	sub	objptr, ##50336
14d48     F2 FA 01 F6 | 	mov	result1, objptr
14d4c     00 60 01 FF 
14d50     00 FA 45 F5 | 	or	result1, ##46137344
14d54     62 00 00 FF 
14d58     D0 E4 05 F1 | 	add	objptr, ##50384
14d5c     F2 FA 61 FC | 	wrlong	result1, objptr
14d60     62 00 00 FF 
14d64     D0 E4 85 F1 | 	sub	objptr, ##50384
14d68     F2 FA 01 F6 | 	mov	result1, objptr
14d6c     00 68 01 FF 
14d70     00 FA 45 F5 | 	or	result1, ##47185920
14d74     62 00 00 FF 
14d78     CC E4 05 F1 | 	add	objptr, ##50380
14d7c     F2 FA 61 FC | 	wrlong	result1, objptr
14d80     62 00 00 FF 
14d84     CC E4 85 F1 | 	sub	objptr, ##50380
14d88     F2 FA 01 F6 | 	mov	result1, objptr
14d8c     00 70 01 FF 
14d90     00 FA 45 F5 | 	or	result1, ##48234496
14d94     62 00 00 FF 
14d98     70 E4 05 F1 | 	add	objptr, ##50288
14d9c     F2 FA 61 FC | 	wrlong	result1, objptr
14da0     62 00 00 FF 
14da4     70 E4 85 F1 | 	sub	objptr, ##50288
14da8     F2 FA 01 F6 | 	mov	result1, objptr
14dac     00 78 01 FF 
14db0     00 FA 45 F5 | 	or	result1, ##49283072
14db4     62 00 00 FF 
14db8     74 E4 05 F1 | 	add	objptr, ##50292
14dbc     F2 FA 61 FC | 	wrlong	result1, objptr
14dc0     62 00 00 FF 
14dc4     74 E4 85 F1 | 	sub	objptr, ##50292
14dc8     F2 FA 01 F6 | 	mov	result1, objptr
14dcc     38 FA 25 F4 | 	bith	result1, #56
14dd0     62 00 00 FF 
14dd4     DC E4 05 F1 | 	add	objptr, ##50396
14dd8     F2 FA 61 FC | 	wrlong	result1, objptr
14ddc     62 00 00 FF 
14de0     DC E4 85 F1 | 	sub	objptr, ##50396
14de4     F2 FA 01 F6 | 	mov	result1, objptr
14de8     00 88 01 FF 
14dec     00 FA 45 F5 | 	or	result1, ##51380224
14df0     62 00 00 FF 
14df4     84 E5 05 F1 | 	add	objptr, ##50564
14df8     F2 FA 61 FC | 	wrlong	result1, objptr
14dfc     62 00 00 FF 
14e00     84 E5 85 F1 | 	sub	objptr, ##50564
14e04     F2 FA 01 F6 | 	mov	result1, objptr
14e08     00 90 01 FF 
14e0c     00 FA 45 F5 | 	or	result1, ##52428800
14e10     62 00 00 FF 
14e14     98 E5 05 F1 | 	add	objptr, ##50584
14e18     F2 FA 61 FC | 	wrlong	result1, objptr
14e1c     62 00 00 FF 
14e20     98 E5 85 F1 | 	sub	objptr, ##50584
14e24     F2 FA 01 F6 | 	mov	result1, objptr
14e28     00 98 01 FF 
14e2c     00 FA 45 F5 | 	or	result1, ##53477376
14e30     62 00 00 FF 
14e34     A4 E5 05 F1 | 	add	objptr, ##50596
14e38     F2 FA 61 FC | 	wrlong	result1, objptr
14e3c     62 00 00 FF 
14e40     A4 E5 85 F1 | 	sub	objptr, ##50596
14e44     F2 FA 01 F6 | 	mov	result1, objptr
14e48     00 A0 01 FF 
14e4c     00 FA 45 F5 | 	or	result1, ##54525952
14e50     62 00 00 FF 
14e54     A8 E5 05 F1 | 	add	objptr, ##50600
14e58     F2 FA 61 FC | 	wrlong	result1, objptr
14e5c     62 00 00 FF 
14e60     A8 E5 85 F1 | 	sub	objptr, ##50600
14e64     F2 FA 01 F6 | 	mov	result1, objptr
14e68     00 A8 01 FF 
14e6c     00 FA 45 F5 | 	or	result1, ##55574528
14e70     62 00 00 FF 
14e74     AC E5 05 F1 | 	add	objptr, ##50604
14e78     F2 FA 61 FC | 	wrlong	result1, objptr
14e7c     62 00 00 FF 
14e80     AC E5 85 F1 | 	sub	objptr, ##50604
14e84     F2 FA 01 F6 | 	mov	result1, objptr
14e88     00 B0 01 FF 
14e8c     00 FA 45 F5 | 	or	result1, ##56623104
14e90     62 00 00 FF 
14e94     B0 E5 05 F1 | 	add	objptr, ##50608
14e98     F2 FA 61 FC | 	wrlong	result1, objptr
14e9c     62 00 00 FF 
14ea0     B0 E5 85 F1 | 	sub	objptr, ##50608
14ea4     F2 FA 01 F6 | 	mov	result1, objptr
14ea8     00 B8 01 FF 
14eac     00 FA 45 F5 | 	or	result1, ##57671680
14eb0     62 00 00 FF 
14eb4     B4 E5 05 F1 | 	add	objptr, ##50612
14eb8     F2 FA 61 FC | 	wrlong	result1, objptr
14ebc     62 00 00 FF 
14ec0     B4 E5 85 F1 | 	sub	objptr, ##50612
14ec4     F2 FA 01 F6 | 	mov	result1, objptr
14ec8     57 FA 25 F4 | 	bith	result1, #87
14ecc     62 00 00 FF 
14ed0     B8 E5 05 F1 | 	add	objptr, ##50616
14ed4     F2 FA 61 FC | 	wrlong	result1, objptr
14ed8     62 00 00 FF 
14edc     B8 E5 85 F1 | 	sub	objptr, ##50616
14ee0     F2 FA 01 F6 | 	mov	result1, objptr
14ee4     94 FA 25 F4 | 	bith	result1, #148
14ee8     62 00 00 FF 
14eec     80 E5 05 F1 | 	add	objptr, ##50560
14ef0     F2 FA 61 FC | 	wrlong	result1, objptr
14ef4     62 00 00 FF 
14ef8     80 E5 85 F1 | 	sub	objptr, ##50560
14efc     F2 FA 01 F6 | 	mov	result1, objptr
14f00     00 C8 01 FF 
14f04     00 FA 45 F5 | 	or	result1, ##59768832
14f08     62 00 00 FF 
14f0c     C0 E5 05 F1 | 	add	objptr, ##50624
14f10     F2 FA 61 FC | 	wrlong	result1, objptr
14f14     62 00 00 FF 
14f18     C0 E5 85 F1 | 	sub	objptr, ##50624
14f1c     F2 FA 01 F6 | 	mov	result1, objptr
14f20     00 D0 01 FF 
14f24     00 FA 45 F5 | 	or	result1, ##60817408
14f28     62 00 00 FF 
14f2c     BC E5 05 F1 | 	add	objptr, ##50620
14f30     F2 FA 61 FC | 	wrlong	result1, objptr
14f34     62 00 00 FF 
14f38     BC E5 85 F1 | 	sub	objptr, ##50620
14f3c     F2 FA 01 F6 | 	mov	result1, objptr
14f40     00 D8 01 FF 
14f44     00 FA 45 F5 | 	or	result1, ##61865984
14f48     62 00 00 FF 
14f4c     D4 E5 05 F1 | 	add	objptr, ##50644
14f50     F2 FA 61 FC | 	wrlong	result1, objptr
14f54     62 00 00 FF 
14f58     D4 E5 85 F1 | 	sub	objptr, ##50644
14f5c     F2 FA 01 F6 | 	mov	result1, objptr
14f60     76 FA 25 F4 | 	bith	result1, #118
14f64     62 00 00 FF 
14f68     D8 E5 05 F1 | 	add	objptr, ##50648
14f6c     F2 FA 61 FC | 	wrlong	result1, objptr
14f70     62 00 00 FF 
14f74     D8 E5 85 F1 | 	sub	objptr, ##50648
14f78     F2 FA 01 F6 | 	mov	result1, objptr
14f7c     00 E8 01 FF 
14f80     00 FA 45 F5 | 	or	result1, ##63963136
14f84     62 00 00 FF 
14f88     C4 E5 05 F1 | 	add	objptr, ##50628
14f8c     F2 FA 61 FC | 	wrlong	result1, objptr
14f90     62 00 00 FF 
14f94     C4 E5 85 F1 | 	sub	objptr, ##50628
14f98     F2 FA 01 F6 | 	mov	result1, objptr
14f9c     95 FA 25 F4 | 	bith	result1, #149
14fa0     62 00 00 FF 
14fa4     C8 E5 05 F1 | 	add	objptr, ##50632
14fa8     F2 FA 61 FC | 	wrlong	result1, objptr
14fac     62 00 00 FF 
14fb0     C8 E5 85 F1 | 	sub	objptr, ##50632
14fb4     F2 FA 01 F6 | 	mov	result1, objptr
14fb8     B4 FA 25 F4 | 	bith	result1, #180
14fbc     62 00 00 FF 
14fc0     CC E5 05 F1 | 	add	objptr, ##50636
14fc4     F2 FA 61 FC | 	wrlong	result1, objptr
14fc8     62 00 00 FF 
14fcc     CC E5 85 F1 | 	sub	objptr, ##50636
14fd0     F2 FA 01 F6 | 	mov	result1, objptr
14fd4     1A FA 25 F4 | 	bith	result1, #26
14fd8     62 00 00 FF 
14fdc     D0 E5 05 F1 | 	add	objptr, ##50640
14fe0     F2 FA 61 FC | 	wrlong	result1, objptr
14fe4     62 00 00 FF 
14fe8     D0 E5 85 F1 | 	sub	objptr, ##50640
14fec     F2 FA 01 F6 | 	mov	result1, objptr
14ff0     00 08 02 FF 
14ff4     00 FA 45 F5 | 	or	result1, ##68157440
14ff8     62 00 00 FF 
14ffc     E0 E5 05 F1 | 	add	objptr, ##50656
15000     F2 FA 61 FC | 	wrlong	result1, objptr
15004     62 00 00 FF 
15008     E0 E5 85 F1 | 	sub	objptr, ##50656
1500c     F2 FA 01 F6 | 	mov	result1, objptr
15010     00 10 02 FF 
15014     00 FA 45 F5 | 	or	result1, ##69206016
15018     62 00 00 FF 
1501c     DC E5 05 F1 | 	add	objptr, ##50652
15020     F2 FA 61 FC | 	wrlong	result1, objptr
15024     62 00 00 FF 
15028     DC E5 85 F1 | 	sub	objptr, ##50652
1502c     F2 FA 01 F6 | 	mov	result1, objptr
15030     00 18 02 FF 
15034     00 FA 45 F5 | 	or	result1, ##70254592
15038     62 00 00 FF 
1503c     EC E5 05 F1 | 	add	objptr, ##50668
15040     F2 FA 61 FC | 	wrlong	result1, objptr
15044     62 00 00 FF 
15048     EC E5 85 F1 | 	sub	objptr, ##50668
1504c     F2 FA 01 F6 | 	mov	result1, objptr
15050     00 20 02 FF 
15054     00 FA 45 F5 | 	or	result1, ##71303168
15058     62 00 00 FF 
1505c     E8 E5 05 F1 | 	add	objptr, ##50664
15060     F2 FA 61 FC | 	wrlong	result1, objptr
15064     62 00 00 FF 
15068     E8 E5 85 F1 | 	sub	objptr, ##50664
1506c     F2 FA 01 F6 | 	mov	result1, objptr
15070     00 28 02 FF 
15074     00 FA 45 F5 | 	or	result1, ##72351744
15078     62 00 00 FF 
1507c     E4 E5 05 F1 | 	add	objptr, ##50660
15080     F2 FA 61 FC | 	wrlong	result1, objptr
15084     62 00 00 FF 
15088     E4 E5 85 F1 | 	sub	objptr, ##50660
1508c     F2 FA 01 F6 | 	mov	result1, objptr
15090     00 30 02 FF 
15094     00 FA 45 F5 | 	or	result1, ##73400320
15098     62 00 00 FF 
1509c     F0 E5 05 F1 | 	add	objptr, ##50672
150a0     F2 FA 61 FC | 	wrlong	result1, objptr
150a4     62 00 00 FF 
150a8     F0 E5 85 F1 | 	sub	objptr, ##50672
150ac     F2 FA 01 F6 | 	mov	result1, objptr
150b0     00 38 02 FF 
150b4     00 FA 45 F5 | 	or	result1, ##74448896
150b8     62 00 00 FF 
150bc     F4 E5 05 F1 | 	add	objptr, ##50676
150c0     F2 FA 61 FC | 	wrlong	result1, objptr
150c4     62 00 00 FF 
150c8     F4 E5 85 F1 | 	sub	objptr, ##50676
150cc     F2 FA 01 F6 | 	mov	result1, objptr
150d0     00 40 02 FF 
150d4     00 FA 45 F5 | 	or	result1, ##75497472
150d8     62 00 00 FF 
150dc     88 E4 05 F1 | 	add	objptr, ##50312
150e0     F2 FA 61 FC | 	wrlong	result1, objptr
150e4     62 00 00 FF 
150e8     88 E4 85 F1 | 	sub	objptr, ##50312
150ec     F2 FA 01 F6 | 	mov	result1, objptr
150f0     00 48 02 FF 
150f4     00 FA 45 F5 | 	or	result1, ##76546048
150f8     63 00 00 FF 
150fc     0C E4 05 F1 | 	add	objptr, ##50700
15100     F2 FA 61 FC | 	wrlong	result1, objptr
15104     63 00 00 FF 
15108     0C E4 85 F1 | 	sub	objptr, ##50700
1510c     F2 FA 01 F6 | 	mov	result1, objptr
15110     00 50 02 FF 
15114     00 FA 45 F5 | 	or	result1, ##77594624
15118     63 00 00 FF 
1511c     1C E4 05 F1 | 	add	objptr, ##50716
15120     F2 FA 61 FC | 	wrlong	result1, objptr
15124     63 00 00 FF 
15128     1C E4 85 F1 | 	sub	objptr, ##50716
1512c     F2 FA 01 F6 | 	mov	result1, objptr
15130     00 58 02 FF 
15134     00 FA 45 F5 | 	or	result1, ##78643200
15138     63 00 00 FF 
1513c     20 E4 05 F1 | 	add	objptr, ##50720
15140     F2 FA 61 FC | 	wrlong	result1, objptr
15144     63 00 00 FF 
15148     20 E4 85 F1 | 	sub	objptr, ##50720
1514c     F2 FA 01 F6 | 	mov	result1, objptr
15150     00 60 02 FF 
15154     00 FA 45 F5 | 	or	result1, ##79691776
15158     63 00 00 FF 
1515c     18 E4 05 F1 | 	add	objptr, ##50712
15160     F2 FA 61 FC | 	wrlong	result1, objptr
15164     63 00 00 FF 
15168     18 E4 85 F1 | 	sub	objptr, ##50712
1516c     F2 FA 01 F6 | 	mov	result1, objptr
15170     00 68 02 FF 
15174     00 FA 45 F5 | 	or	result1, ##80740352
15178     63 00 00 FF 
1517c     10 E4 05 F1 | 	add	objptr, ##50704
15180     F2 FA 61 FC | 	wrlong	result1, objptr
15184     63 00 00 FF 
15188     10 E4 85 F1 | 	sub	objptr, ##50704
1518c     F2 FA 01 F6 | 	mov	result1, objptr
15190     00 70 02 FF 
15194     00 FA 45 F5 | 	or	result1, ##81788928
15198     63 00 00 FF 
1519c     14 E4 05 F1 | 	add	objptr, ##50708
151a0     F2 FA 61 FC | 	wrlong	result1, objptr
151a4     63 00 00 FF 
151a8     14 E4 85 F1 | 	sub	objptr, ##50708
151ac     F2 FA 01 F6 | 	mov	result1, objptr
151b0     00 78 02 FF 
151b4     00 FA 45 F5 | 	or	result1, ##82837504
151b8     63 00 00 FF 
151bc     24 E4 05 F1 | 	add	objptr, ##50724
151c0     F2 FA 61 FC | 	wrlong	result1, objptr
151c4     63 00 00 FF 
151c8     24 E4 85 F1 | 	sub	objptr, ##50724
151cc     F2 FA 01 F6 | 	mov	result1, objptr
151d0     00 80 02 FF 
151d4     00 FA 45 F5 | 	or	result1, ##83886080
151d8     63 00 00 FF 
151dc     28 E4 05 F1 | 	add	objptr, ##50728
151e0     F2 FA 61 FC | 	wrlong	result1, objptr
151e4     63 00 00 FF 
151e8     28 E4 85 F1 | 	sub	objptr, ##50728
151ec     F2 FA 01 F6 | 	mov	result1, objptr
151f0     00 88 02 FF 
151f4     00 FA 45 F5 | 	or	result1, ##84934656
151f8     63 00 00 FF 
151fc     2C E4 05 F1 | 	add	objptr, ##50732
15200     F2 FA 61 FC | 	wrlong	result1, objptr
15204     63 00 00 FF 
15208     2C E4 85 F1 | 	sub	objptr, ##50732
1520c     F2 FA 01 F6 | 	mov	result1, objptr
15210     00 90 02 FF 
15214     00 FA 45 F5 | 	or	result1, ##85983232
15218     63 00 00 FF 
1521c     30 E4 05 F1 | 	add	objptr, ##50736
15220     F2 FA 61 FC | 	wrlong	result1, objptr
15224     63 00 00 FF 
15228     30 E4 85 F1 | 	sub	objptr, ##50736
1522c     F2 FA 01 F6 | 	mov	result1, objptr
15230     00 98 02 FF 
15234     00 FA 45 F5 | 	or	result1, ##87031808
15238     63 00 00 FF 
1523c     34 E4 05 F1 | 	add	objptr, ##50740
15240     F2 FA 61 FC | 	wrlong	result1, objptr
15244     63 00 00 FF 
15248     34 E4 85 F1 | 	sub	objptr, ##50740
1524c     F2 FA 01 F6 | 	mov	result1, objptr
15250     00 A0 02 FF 
15254     00 FA 45 F5 | 	or	result1, ##88080384
15258     63 00 00 FF 
1525c     38 E4 05 F1 | 	add	objptr, ##50744
15260     F2 FA 61 FC | 	wrlong	result1, objptr
15264     63 00 00 FF 
15268     38 E4 85 F1 | 	sub	objptr, ##50744
1526c     F2 FA 01 F6 | 	mov	result1, objptr
15270     00 A8 02 FF 
15274     00 FA 45 F5 | 	or	result1, ##89128960
15278     63 00 00 FF 
1527c     3C E4 05 F1 | 	add	objptr, ##50748
15280     F2 FA 61 FC | 	wrlong	result1, objptr
15284     63 00 00 FF 
15288     3C E4 85 F1 | 	sub	objptr, ##50748
1528c     F2 FA 01 F6 | 	mov	result1, objptr
15290     00 B0 02 FF 
15294     00 FA 45 F5 | 	or	result1, ##90177536
15298     63 00 00 FF 
1529c     40 E4 05 F1 | 	add	objptr, ##50752
152a0     F2 FA 61 FC | 	wrlong	result1, objptr
152a4     63 00 00 FF 
152a8     40 E4 85 F1 | 	sub	objptr, ##50752
152ac     F2 FA 01 F6 | 	mov	result1, objptr
152b0     00 B8 02 FF 
152b4     00 FA 45 F5 | 	or	result1, ##91226112
152b8     63 00 00 FF 
152bc     4C E4 05 F1 | 	add	objptr, ##50764
152c0     F2 FA 61 FC | 	wrlong	result1, objptr
152c4     63 00 00 FF 
152c8     4C E4 85 F1 | 	sub	objptr, ##50764
152cc     F2 FA 01 F6 | 	mov	result1, objptr
152d0     00 C0 02 FF 
152d4     00 FA 45 F5 | 	or	result1, ##92274688
152d8     63 00 00 FF 
152dc     44 E4 05 F1 | 	add	objptr, ##50756
152e0     F2 FA 61 FC | 	wrlong	result1, objptr
152e4     63 00 00 FF 
152e8     44 E4 85 F1 | 	sub	objptr, ##50756
152ec     F2 FA 01 F6 | 	mov	result1, objptr
152f0     00 C8 02 FF 
152f4     00 FA 45 F5 | 	or	result1, ##93323264
152f8     63 00 00 FF 
152fc     48 E4 05 F1 | 	add	objptr, ##50760
15300     F2 FA 61 FC | 	wrlong	result1, objptr
15304     63 00 00 FF 
15308     48 E4 85 F1 | 	sub	objptr, ##50760
1530c     F2 FA 01 F6 | 	mov	result1, objptr
15310     00 D0 02 FF 
15314     00 FA 45 F5 | 	or	result1, ##94371840
15318     63 00 00 FF 
1531c     50 E4 05 F1 | 	add	objptr, ##50768
15320     F2 FA 61 FC | 	wrlong	result1, objptr
15324     63 00 00 FF 
15328     50 E4 85 F1 | 	sub	objptr, ##50768
1532c     F2 FA 01 F6 | 	mov	result1, objptr
15330     00 D8 02 FF 
15334     00 FA 45 F5 | 	or	result1, ##95420416
15338     62 00 00 FF 
1533c     F8 E5 05 F1 | 	add	objptr, ##50680
15340     F2 FA 61 FC | 	wrlong	result1, objptr
15344     62 00 00 FF 
15348     F8 E5 85 F1 | 	sub	objptr, ##50680
1534c     F2 FA 01 F6 | 	mov	result1, objptr
15350     00 E0 02 FF 
15354     00 FA 45 F5 | 	or	result1, ##96468992
15358     63 00 00 FF 
1535c     00 E4 05 F1 | 	add	objptr, ##50688
15360     F2 FA 61 FC | 	wrlong	result1, objptr
15364     63 00 00 FF 
15368     00 E4 85 F1 | 	sub	objptr, ##50688
1536c     F2 FA 01 F6 | 	mov	result1, objptr
15370     00 E8 02 FF 
15374     00 FA 45 F5 | 	or	result1, ##97517568
15378     63 00 00 FF 
1537c     04 E4 05 F1 | 	add	objptr, ##50692
15380     F2 FA 61 FC | 	wrlong	result1, objptr
15384     63 00 00 FF 
15388     04 E4 85 F1 | 	sub	objptr, ##50692
1538c                 | _init_commands_ret
1538c     2D 00 64 FD | 	ret
15390                 | 
15390                 | ' 
15390                 | ' ''--------------------------------Error strings -------------------------------------
15390                 | ' 
15390                 | ' sub init_error_strings
15390                 | _init_error_strings
15390     43 01 00 FF 
15394     0B 01 06 F6 | 	mov	_var01, ##@LR__4646
15398     64 00 00 FF 
1539c     50 E4 05 F1 | 	add	objptr, ##51280
153a0     F2 00 62 FC | 	wrlong	_var01, objptr
153a4     43 01 00 FF 
153a8     0C 01 06 F6 | 	mov	_var01, ##@LR__4647
153ac     04 E4 05 F1 | 	add	objptr, #4
153b0     F2 00 62 FC | 	wrlong	_var01, objptr
153b4     43 01 00 FF 
153b8     31 01 06 F6 | 	mov	_var01, ##@LR__4648
153bc     04 E4 05 F1 | 	add	objptr, #4
153c0     F2 00 62 FC | 	wrlong	_var01, objptr
153c4     43 01 00 FF 
153c8     52 01 06 F6 | 	mov	_var01, ##@LR__4649
153cc     04 E4 05 F1 | 	add	objptr, #4
153d0     F2 00 62 FC | 	wrlong	_var01, objptr
153d4     43 01 00 FF 
153d8     6C 01 06 F6 | 	mov	_var01, ##@LR__4650
153dc     04 E4 05 F1 | 	add	objptr, #4
153e0     F2 00 62 FC | 	wrlong	_var01, objptr
153e4     43 01 00 FF 
153e8     88 01 06 F6 | 	mov	_var01, ##@LR__4651
153ec     04 E4 05 F1 | 	add	objptr, #4
153f0     F2 00 62 FC | 	wrlong	_var01, objptr
153f4     43 01 00 FF 
153f8     AA 01 06 F6 | 	mov	_var01, ##@LR__4652
153fc     04 E4 05 F1 | 	add	objptr, #4
15400     F2 00 62 FC | 	wrlong	_var01, objptr
15404     43 01 00 FF 
15408     D8 01 06 F6 | 	mov	_var01, ##@LR__4653
1540c     04 E4 05 F1 | 	add	objptr, #4
15410     F2 00 62 FC | 	wrlong	_var01, objptr
15414     44 01 00 FF 
15418     03 00 06 F6 | 	mov	_var01, ##@LR__4654
1541c     04 E4 05 F1 | 	add	objptr, #4
15420     F2 00 62 FC | 	wrlong	_var01, objptr
15424     44 01 00 FF 
15428     1C 00 06 F6 | 	mov	_var01, ##@LR__4655
1542c     04 E4 05 F1 | 	add	objptr, #4
15430     F2 00 62 FC | 	wrlong	_var01, objptr
15434     44 01 00 FF 
15438     3D 00 06 F6 | 	mov	_var01, ##@LR__4656
1543c     04 E4 05 F1 | 	add	objptr, #4
15440     F2 00 62 FC | 	wrlong	_var01, objptr
15444     44 01 00 FF 
15448     54 00 06 F6 | 	mov	_var01, ##@LR__4657
1544c     04 E4 05 F1 | 	add	objptr, #4
15450     F2 00 62 FC | 	wrlong	_var01, objptr
15454     44 01 00 FF 
15458     72 00 06 F6 | 	mov	_var01, ##@LR__4658
1545c     04 E4 05 F1 | 	add	objptr, #4
15460     F2 00 62 FC | 	wrlong	_var01, objptr
15464     44 01 00 FF 
15468     96 00 06 F6 | 	mov	_var01, ##@LR__4659
1546c     04 E4 05 F1 | 	add	objptr, #4
15470     F2 00 62 FC | 	wrlong	_var01, objptr
15474     44 01 00 FF 
15478     BD 00 06 F6 | 	mov	_var01, ##@LR__4660
1547c     04 E4 05 F1 | 	add	objptr, #4
15480     F2 00 62 FC | 	wrlong	_var01, objptr
15484     44 01 00 FF 
15488     D9 00 06 F6 | 	mov	_var01, ##@LR__4661
1548c     04 E4 05 F1 | 	add	objptr, #4
15490     F2 00 62 FC | 	wrlong	_var01, objptr
15494     44 01 00 FF 
15498     EA 00 06 F6 | 	mov	_var01, ##@LR__4662
1549c     04 E4 05 F1 | 	add	objptr, #4
154a0     F2 00 62 FC | 	wrlong	_var01, objptr
154a4     44 01 00 FF 
154a8     FA 00 06 F6 | 	mov	_var01, ##@LR__4663
154ac     04 E4 05 F1 | 	add	objptr, #4
154b0     F2 00 62 FC | 	wrlong	_var01, objptr
154b4     44 01 00 FF 
154b8     15 01 06 F6 | 	mov	_var01, ##@LR__4664
154bc     04 E4 05 F1 | 	add	objptr, #4
154c0     F2 00 62 FC | 	wrlong	_var01, objptr
154c4     44 01 00 FF 
154c8     27 01 06 F6 | 	mov	_var01, ##@LR__4665
154cc     04 E4 05 F1 | 	add	objptr, #4
154d0     F2 00 62 FC | 	wrlong	_var01, objptr
154d4     44 01 00 FF 
154d8     3F 01 06 F6 | 	mov	_var01, ##@LR__4666
154dc     04 E4 05 F1 | 	add	objptr, #4
154e0     F2 00 62 FC | 	wrlong	_var01, objptr
154e4     44 01 00 FF 
154e8     53 01 06 F6 | 	mov	_var01, ##@LR__4667
154ec     04 E4 05 F1 | 	add	objptr, #4
154f0     F2 00 62 FC | 	wrlong	_var01, objptr
154f4     44 01 00 FF 
154f8     63 01 06 F6 | 	mov	_var01, ##@LR__4668
154fc     04 E4 05 F1 | 	add	objptr, #4
15500     F2 00 62 FC | 	wrlong	_var01, objptr
15504     44 01 00 FF 
15508     80 01 06 F6 | 	mov	_var01, ##@LR__4669
1550c     04 E4 05 F1 | 	add	objptr, #4
15510     F2 00 62 FC | 	wrlong	_var01, objptr
15514     44 01 00 FF 
15518     91 01 06 F6 | 	mov	_var01, ##@LR__4670
1551c     04 E4 05 F1 | 	add	objptr, #4
15520     F2 00 62 FC | 	wrlong	_var01, objptr
15524     44 01 00 FF 
15528     A2 01 06 F6 | 	mov	_var01, ##@LR__4671
1552c     04 E4 05 F1 | 	add	objptr, #4
15530     F2 00 62 FC | 	wrlong	_var01, objptr
15534     44 01 00 FF 
15538     CD 01 06 F6 | 	mov	_var01, ##@LR__4672
1553c     04 E4 05 F1 | 	add	objptr, #4
15540     F2 00 62 FC | 	wrlong	_var01, objptr
15544     44 01 00 FF 
15548     E9 01 06 F6 | 	mov	_var01, ##@LR__4673
1554c     04 E4 05 F1 | 	add	objptr, #4
15550     F2 00 62 FC | 	wrlong	_var01, objptr
15554     44 01 00 FF 
15558     FF 01 06 F6 | 	mov	_var01, ##@LR__4674
1555c     04 E4 05 F1 | 	add	objptr, #4
15560     F2 00 62 FC | 	wrlong	_var01, objptr
15564     45 01 00 FF 
15568     0C 00 06 F6 | 	mov	_var01, ##@LR__4675
1556c     04 E4 05 F1 | 	add	objptr, #4
15570     F2 00 62 FC | 	wrlong	_var01, objptr
15574     45 01 00 FF 
15578     1E 00 06 F6 | 	mov	_var01, ##@LR__4676
1557c     04 E4 05 F1 | 	add	objptr, #4
15580     F2 00 62 FC | 	wrlong	_var01, objptr
15584     45 01 00 FF 
15588     2F 00 06 F6 | 	mov	_var01, ##@LR__4677
1558c     04 E4 05 F1 | 	add	objptr, #4
15590     F2 00 62 FC | 	wrlong	_var01, objptr
15594     45 01 00 FF 
15598     4B 00 06 F6 | 	mov	_var01, ##@LR__4678
1559c     04 E4 05 F1 | 	add	objptr, #4
155a0     F2 00 62 FC | 	wrlong	_var01, objptr
155a4     45 01 00 FF 
155a8     5C 00 06 F6 | 	mov	_var01, ##@LR__4679
155ac     04 E4 05 F1 | 	add	objptr, #4
155b0     F2 00 62 FC | 	wrlong	_var01, objptr
155b4     45 01 00 FF 
155b8     6B 00 06 F6 | 	mov	_var01, ##@LR__4680
155bc     04 E4 05 F1 | 	add	objptr, #4
155c0     F2 00 62 FC | 	wrlong	_var01, objptr
155c4     45 01 00 FF 
155c8     86 00 06 F6 | 	mov	_var01, ##@LR__4681
155cc     04 E4 05 F1 | 	add	objptr, #4
155d0     F2 00 62 FC | 	wrlong	_var01, objptr
155d4     45 01 00 FF 
155d8     BA 00 06 F6 | 	mov	_var01, ##@LR__4682
155dc     04 E4 05 F1 | 	add	objptr, #4
155e0     F2 00 62 FC | 	wrlong	_var01, objptr
155e4     45 01 00 FF 
155e8     D3 00 06 F6 | 	mov	_var01, ##@LR__4683
155ec     04 E4 05 F1 | 	add	objptr, #4
155f0     F2 00 62 FC | 	wrlong	_var01, objptr
155f4     45 01 00 FF 
155f8     EF 00 06 F6 | 	mov	_var01, ##@LR__4684
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     F2 00 62 FC | 	wrlong	_var01, objptr
15604     45 01 00 FF 
15608     0D 01 06 F6 | 	mov	_var01, ##@LR__4685
1560c     04 E4 05 F1 | 	add	objptr, #4
15610     F2 00 62 FC | 	wrlong	_var01, objptr
15614     45 01 00 FF 
15618     26 01 06 F6 | 	mov	_var01, ##@LR__4686
1561c     04 E4 05 F1 | 	add	objptr, #4
15620     F2 00 62 FC | 	wrlong	_var01, objptr
15624     45 01 00 FF 
15628     45 01 06 F6 | 	mov	_var01, ##@LR__4687
1562c     04 E4 05 F1 | 	add	objptr, #4
15630     F2 00 62 FC | 	wrlong	_var01, objptr
15634     45 01 00 FF 
15638     54 01 06 F6 | 	mov	_var01, ##@LR__4688
1563c     04 E4 05 F1 | 	add	objptr, #4
15640     F2 00 62 FC | 	wrlong	_var01, objptr
15644     45 01 00 FF 
15648     82 01 06 F6 | 	mov	_var01, ##@LR__4689
1564c     04 E4 05 F1 | 	add	objptr, #4
15650     F2 00 62 FC | 	wrlong	_var01, objptr
15654     45 01 00 FF 
15658     90 01 06 F6 | 	mov	_var01, ##@LR__4690
1565c     04 E4 05 F1 | 	add	objptr, #4
15660     F2 00 62 FC | 	wrlong	_var01, objptr
15664     45 01 00 FF 
15668     A5 01 06 F6 | 	mov	_var01, ##@LR__4691
1566c     04 E4 05 F1 | 	add	objptr, #4
15670     F2 00 62 FC | 	wrlong	_var01, objptr
15674     45 01 00 FF 
15678     C9 01 06 F6 | 	mov	_var01, ##@LR__4692
1567c     04 E4 05 F1 | 	add	objptr, #4
15680     F2 00 62 FC | 	wrlong	_var01, objptr
15684     45 01 00 FF 
15688     E0 01 06 F6 | 	mov	_var01, ##@LR__4693
1568c     04 E4 05 F1 | 	add	objptr, #4
15690     F2 00 62 FC | 	wrlong	_var01, objptr
15694     45 01 00 FF 
15698     F3 01 06 F6 | 	mov	_var01, ##@LR__4694
1569c     04 E4 05 F1 | 	add	objptr, #4
156a0     F2 00 62 FC | 	wrlong	_var01, objptr
156a4     64 00 00 FF 
156a8     10 E5 85 F1 | 	sub	objptr, ##51472
156ac                 | _init_error_strings_ret
156ac     2D 00 64 FD | 	ret
156b0                 | 
156b0                 | '         
156b0                 | ' sub printerror(err as integer)
156b0                 | _printerror
156b0     01 4A 05 F6 | 	mov	COUNT_, #1
156b4     A8 00 A0 FD | 	call	#pushregs_
156b8     09 1F 02 F6 | 	mov	local01, arg01
156bc     46 01 00 FF 
156c0     0A 12 06 F6 | 	mov	arg01, ##@LR__4695
156c4     E4 24 B0 FD | 	call	#_hg010b_spin2_write
156c8     0F 13 02 F6 | 	mov	arg01, local01
156cc     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
156d0     FD 12 02 F6 | 	mov	arg01, result1
156d4     D4 24 B0 FD | 	call	#_hg010b_spin2_write
156d8     46 01 00 FF 
156dc     11 12 06 F6 | 	mov	arg01, ##@LR__4696
156e0     C8 24 B0 FD | 	call	#_hg010b_spin2_write
156e4     02 1E 66 F0 | 	shl	local01, #2
156e8     64 00 00 FF 
156ec     50 E4 05 F1 | 	add	objptr, ##51280
156f0     F2 1E 02 F1 | 	add	local01, objptr
156f4     0F 13 02 FB | 	rdlong	arg01, local01
156f8     64 00 00 FF 
156fc     50 E4 85 F1 | 	sub	objptr, ##51280
15700                 | ' 
15700                 | ' write(text)
15700     A8 24 B0 FD | 	call	#_hg010b_spin2_write
15704                 | ' crlf
15704     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
15708     A7 F0 03 F6 | 	mov	ptra, fp
1570c     B2 00 A0 FD | 	call	#popregs_
15710                 | _printerror_ret
15710     2D 00 64 FD | 	ret
15714                 | 
15714                 | ' 
15714                 | ' '' ------------------------------- Hardware start/stop/initialization 
15714                 | ' 
15714                 | ' sub startpsram
15714                 | _startpsram
15714     00 12 06 F6 | 	mov	arg01, #0
15718     0A 14 C6 F9 | 	decod	arg02, #10
1571c     0B 16 06 F6 | 	mov	arg03, #11
15720     07 18 06 F6 | 	mov	arg04, #7
15724     0B 00 00 FF 
15728     C0 E4 05 F1 | 	add	objptr, ##5824
1572c     88 27 B0 FD | 	call	#_psram_spin2_startx
15730     4A 00 00 FF 
15734     1C E5 05 F1 | 	add	objptr, ##38172
15738     F2 FA 61 FC | 	wrlong	result1, objptr
1573c                 | '     return $7FF00 + cog*12
1573c     0C E4 05 F1 | 	add	objptr, #12
15740     FF 03 80 FF 
15744     F2 00 6A FC | 	wrlong	##524032, objptr
15748     55 00 00 FF 
1574c     E8 E5 85 F1 | 	sub	objptr, ##44008
15750                 | _startpsram_ret
15750     2D 00 64 FD | 	ret
15754                 | 
15754                 | ' 
15754                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15754                 | _startvideo
15754     01 4A 05 F6 | 	mov	COUNT_, #1
15758     A8 00 A0 FD | 	call	#pushregs_
1575c     55 00 00 FF 
15760     E8 E5 05 F1 | 	add	objptr, ##44008
15764     F2 18 02 FB | 	rdlong	arg04, objptr
15768     55 00 00 FF 
1576c     E8 E5 85 F1 | 	sub	objptr, ##44008
15770     0A 13 02 F6 | 	mov	arg01, arg02
15774     0C 15 02 F6 | 	mov	arg02, arg04
15778     50 0F B0 FD | 	call	#_hg010b_spin2_start
1577c     55 00 00 FF 
15780     D4 E5 05 F1 | 	add	objptr, ##43988
15784     F2 FA 61 FC | 	wrlong	result1, objptr
15788                 | ' 
15788                 | ' videocog=v.start(pin,mbox)
15788                 | ' 
15788                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
15788     00 1E 06 F6 | 	mov	local01, #0
1578c     4A 00 00 FF 
15790     14 E5 85 F1 | 	sub	objptr, ##38164
15794                 | LR__1690
15794     0F 13 02 F6 | 	mov	arg01, local01
15798     00 28 00 FF 
1579c     00 14 06 F6 | 	mov	arg02, ##5242880
157a0     6C 2B B0 FD | 	call	#_psram_spin2_setQos
157a4     01 1E 06 F1 | 	add	local01, #1
157a8     08 1E 56 F2 | 	cmps	local01, #8 wc
157ac     E4 FF 9F CD |  if_b	jmp	#LR__1690
157b0     4A 00 00 FF 
157b4     14 E5 05 F1 | 	add	objptr, ##38164
157b8     F2 12 02 FB | 	rdlong	arg01, objptr
157bc     7A 00 02 FF 
157c0     00 14 06 F6 | 	mov	arg02, ##67171328
157c4     4A 00 00 FF 
157c8     14 E5 85 F1 | 	sub	objptr, ##38164
157cc     40 2B B0 FD | 	call	#_psram_spin2_setQos
157d0     0B 00 00 FF 
157d4     C0 E4 85 F1 | 	sub	objptr, ##5824
157d8                 | ' psram.setQoS(videocog, $0400f400) 
157d8                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
157d8     F2 14 02 F6 | 	mov	arg02, objptr
157dc     00 F0 02 FF 
157e0     00 14 46 F5 | 	or	arg02, ##98566144
157e4     00 16 06 F6 | 	mov	arg03, #0
157e8     00 18 06 F6 | 	mov	arg04, #0
157ec     00 12 06 F6 | 	mov	arg01, #0
157f0     88 3E B0 FD | 	call	#__system___basic_open
157f4                 | ' return videocog
157f4     55 00 00 FF 
157f8     D4 E5 05 F1 | 	add	objptr, ##43988
157fc     F2 FA 01 FB | 	rdlong	result1, objptr
15800     55 00 00 FF 
15804     D4 E5 85 F1 | 	sub	objptr, ##43988
15808     A7 F0 03 F6 | 	mov	ptra, fp
1580c     B2 00 A0 FD | 	call	#popregs_
15810                 | _startvideo_ret
15810     2D 00 64 FD | 	ret
15814                 | 
15814                 | ' 
15814                 | ' function pspeek(adr as ulong) as ubyte
15814                 | _pspeek
15814     00 4A 05 F6 | 	mov	COUNT_, #0
15818     A8 00 A0 FD | 	call	#pushregs_
1581c     0C F0 07 F1 | 	add	ptra, #12
15820     04 4E 05 F1 | 	add	fp, #4
15824     A7 12 62 FC | 	wrlong	arg01, fp
15828     04 4E 05 F1 | 	add	fp, #4
1582c     A7 12 02 F6 | 	mov	arg01, fp
15830     04 4E 85 F1 | 	sub	fp, #4
15834     A7 14 02 FB | 	rdlong	arg02, fp
15838     04 4E 85 F1 | 	sub	fp, #4
1583c     01 16 06 F6 | 	mov	arg03, #1
15840     0B 00 00 FF 
15844     C0 E4 05 F1 | 	add	objptr, ##5824
15848     98 28 B0 FD | 	call	#_psram_spin2_read1
1584c     0B 00 00 FF 
15850     C0 E4 85 F1 | 	sub	objptr, ##5824
15854                 | ' psram.read1(varptr(res),adr,1)
15854                 | ' return res
15854     08 4E 05 F1 | 	add	fp, #8
15858     A7 FA C1 FA | 	rdbyte	result1, fp
1585c     08 4E 85 F1 | 	sub	fp, #8
15860     A7 F0 03 F6 | 	mov	ptra, fp
15864     B2 00 A0 FD | 	call	#popregs_
15868                 | _pspeek_ret
15868     2D 00 64 FD | 	ret
1586c                 | 
1586c                 | ' 
1586c                 | ' function pslpeek(adr as ulong) as ulong
1586c                 | _pslpeek
1586c     00 4A 05 F6 | 	mov	COUNT_, #0
15870     A8 00 A0 FD | 	call	#pushregs_
15874     0C F0 07 F1 | 	add	ptra, #12
15878     04 4E 05 F1 | 	add	fp, #4
1587c     A7 12 62 FC | 	wrlong	arg01, fp
15880     04 4E 05 F1 | 	add	fp, #4
15884     A7 12 02 F6 | 	mov	arg01, fp
15888     04 4E 85 F1 | 	sub	fp, #4
1588c     A7 14 02 FB | 	rdlong	arg02, fp
15890     04 4E 85 F1 | 	sub	fp, #4
15894     04 16 06 F6 | 	mov	arg03, #4
15898     0B 00 00 FF 
1589c     C0 E4 05 F1 | 	add	objptr, ##5824
158a0     40 28 B0 FD | 	call	#_psram_spin2_read1
158a4     0B 00 00 FF 
158a8     C0 E4 85 F1 | 	sub	objptr, ##5824
158ac                 | ' psram.read1(varptr(res),adr,4)
158ac                 | ' return res
158ac     08 4E 05 F1 | 	add	fp, #8
158b0     A7 FA 01 FB | 	rdlong	result1, fp
158b4     08 4E 85 F1 | 	sub	fp, #8
158b8     A7 F0 03 F6 | 	mov	ptra, fp
158bc     B2 00 A0 FD | 	call	#popregs_
158c0                 | _pslpeek_ret
158c0     2D 00 64 FD | 	ret
158c4                 | 
158c4                 | ' 
158c4                 | ' '' ------------------------------- USB keyboard scan to char translator
158c4                 | ' 
158c4                 | ' function scantochar(key)
158c4                 | _scantochar
158c4                 | ' 
158c4                 | ' select case (key shr 8) and 255
158c4     09 01 02 F6 | 	mov	_var01, arg01
158c8     08 00 C6 F0 | 	sar	_var01, #8
158cc     FF 00 0E F5 | 	and	_var01, #255 wz
158d0     24 00 90 AD |  if_e	jmp	#LR__1700
158d4     02 00 0E F2 | 	cmp	_var01, #2 wz
158d8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
158dc     30 00 90 AD |  if_e	jmp	#LR__1701
158e0     40 00 0E F2 | 	cmp	_var01, #64 wz
158e4     44 00 90 AD |  if_e	jmp	#LR__1702
158e8     42 00 0E F2 | 	cmp	_var01, #66 wz
158ec     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
158f0     70 00 90 5D |  if_ne	jmp	#LR__1704
158f4     50 00 90 FD | 	jmp	#LR__1703
158f8                 | LR__1700
158f8     09 FB 01 F6 | 	mov	result1, arg01
158fc     7F FA 05 F5 | 	and	result1, #127
15900     02 FA 65 F0 | 	shl	result1, #2
15904     F5 FA 01 F1 | 	add	result1, ptr__dat__
15908     FD FA C1 FA | 	rdbyte	result1, result1
1590c     54 00 90 FD | 	jmp	#_scantochar_ret
15910                 | LR__1701
15910     09 FB 01 F6 | 	mov	result1, arg01
15914     7F FA 05 F5 | 	and	result1, #127
15918     02 FA 65 F0 | 	shl	result1, #2
1591c     01 FA 05 F1 | 	add	result1, #1
15920     F5 FA 01 F1 | 	add	result1, ptr__dat__
15924     FD FA C1 FA | 	rdbyte	result1, result1
15928     38 00 90 FD | 	jmp	#_scantochar_ret
1592c                 | LR__1702
1592c     09 FB 01 F6 | 	mov	result1, arg01
15930     7F FA 05 F5 | 	and	result1, #127
15934     02 FA 65 F0 | 	shl	result1, #2
15938     02 FA 05 F1 | 	add	result1, #2
1593c     F5 FA 01 F1 | 	add	result1, ptr__dat__
15940     FD FA C1 FA | 	rdbyte	result1, result1
15944     1C 00 90 FD | 	jmp	#_scantochar_ret
15948                 | LR__1703
15948     09 FB 01 F6 | 	mov	result1, arg01
1594c     7F FA 05 F5 | 	and	result1, #127
15950     02 FA 65 F0 | 	shl	result1, #2
15954     03 FA 05 F1 | 	add	result1, #3
15958     F5 FA 01 F1 | 	add	result1, ptr__dat__
1595c     FD FA C1 FA | 	rdbyte	result1, result1
15960     00 00 90 FD | 	jmp	#_scantochar_ret
15964                 | LR__1704
15964                 | _scantochar_ret
15964     2D 00 64 FD | 	ret
15968                 | 
15968                 | _program
15968     0B 4A 05 F6 | 	mov	COUNT_, #11
1596c     A8 00 A0 FD | 	call	#pushregs_
15970     A0 FD BF FD | 	call	#_startpsram
15974     40 12 06 F6 | 	mov	arg01, #64
15978     00 14 06 F6 | 	mov	arg02, #0
1597c     00 16 06 F6 | 	mov	arg03, #0
15980     D0 FD BF FD | 	call	#_startvideo
15984     00 12 06 F6 | 	mov	arg01, #0
15988     00 14 06 F6 | 	mov	arg02, #0
1598c     00 16 06 F6 | 	mov	arg03, #0
15990     0B 00 00 FF 
15994     C0 E4 05 F1 | 	add	objptr, ##5824
15998     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
1599c     FE 1C 02 F6 | 	mov	arg06, result2
159a0     4A 00 00 FF 
159a4     10 E5 05 F1 | 	add	objptr, ##38160
159a8     F2 FA 61 FC | 	wrlong	result1, objptr
159ac     14 E4 05 F1 | 	add	objptr, #20
159b0     F2 1C 62 FC | 	wrlong	arg06, objptr
159b4     55 00 00 FF 
159b8     E4 E5 85 F1 | 	sub	objptr, ##44004
159bc     32 12 06 F6 | 	mov	arg01, #50
159c0     04 35 B0 FD | 	call	#__system___waitms
159c4     55 00 00 FF 
159c8     E4 E5 05 F1 | 	add	objptr, ##44004
159cc     F2 12 02 FB | 	rdlong	arg01, objptr
159d0     55 00 00 FF 
159d4     E4 E5 85 F1 | 	sub	objptr, ##44004
159d8     14 12 06 F1 | 	add	arg01, #20
159dc     20 00 80 FF 
159e0     09 01 58 FC | 	wrword	##16384, arg01
159e4     30 2A B0 FD | 	call	#_usbnew_spin2_start
159e8     55 00 00 FF 
159ec     D8 E5 05 F1 | 	add	objptr, ##43992
159f0     F2 FA 61 FC | 	wrlong	result1, objptr
159f4                 | '   mouse_limits[0] := xlim
159f4     0F 00 00 FF 
159f8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
159fc     01 00 80 FF 
15a00     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
15a04                 | '   mouse_limits[1] := ylim
15a04     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15a08     01 00 80 FF 
15a0c     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15a10     55 00 00 FF 
15a14     CB E4 85 F1 | 	sub	objptr, ##43723
15a18     F2 12 02 F6 | 	mov	arg01, objptr
15a1c     0D E5 85 F1 | 	sub	objptr, #269
15a20     C4 12 06 F1 | 	add	arg01, #196
15a24                 | '   mouse_outptr := ptr
15a24     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15a28     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15a2c     0F 00 00 FF 
15a30     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15a34     0E 00 00 FF 
15a38     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15a3c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15a40     0E 00 00 FF 
15a44     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
15a48     10 12 06 F6 | 	mov	arg01, #16
15a4c     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15a50     10 12 06 F6 | 	mov	arg01, #16
15a54     20 14 06 F6 | 	mov	arg02, #32
15a58     20 16 06 F6 | 	mov	arg03, #32
15a5c     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15a60     09 12 C6 F9 | 	decod	arg01, #9
15a64     20 15 06 F6 | 	mov	arg02, #288
15a68     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15a6c     F2 1C 02 F6 | 	mov	arg06, objptr
15a70     78 00 00 FF 
15a74     BC E5 05 F1 | 	add	objptr, ##61884
15a78     F2 1A 02 F6 | 	mov	arg05, objptr
15a7c     0D 1D 62 FC | 	wrlong	arg06, arg05
15a80     04 1A 06 F1 | 	add	arg05, #4
15a84     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
15a88     EF 14 02 F6 | 	mov	arg02, entryptr__
15a8c     F2 1E 02 F6 | 	mov	local01, objptr
15a90     1E FA 05 F6 | 	mov	result1, #30
15a94     28 1E 62 FD | 	setq	local01
15a98     0A FB F1 FC | 	coginit	result1, arg02 wc
15a9c     01 FA 65 C6 |  if_b	neg	result1, #1
15aa0     04 E4 85 F1 | 	sub	objptr, #4
15aa4     F2 FA 61 FC | 	wrlong	result1, objptr
15aa8     01 00 00 FF 
15aac     90 E4 05 F1 | 	add	objptr, ##656
15ab0     F2 00 68 FC | 	wrlong	#0, objptr
15ab4     24 00 00 FF 
15ab8     40 E4 85 F1 | 	sub	objptr, ##18496
15abc     F2 04 68 FC | 	wrlong	#2, objptr
15ac0     04 E4 05 F1 | 	add	objptr, #4
15ac4     F2 26 69 FC | 	wrlong	#147, objptr
15ac8     04 E4 05 F1 | 	add	objptr, #4
15acc     F2 34 69 FC | 	wrlong	#154, objptr
15ad0     04 E4 05 F1 | 	add	objptr, #4
15ad4     F2 08 68 FC | 	wrlong	#4, objptr
15ad8     04 E4 85 F1 | 	sub	objptr, #4
15adc     F2 1C 02 FB | 	rdlong	arg06, objptr
15ae0     14 E4 85 F1 | 	sub	objptr, #20
15ae4     F2 1C 62 FC | 	wrlong	arg06, objptr
15ae8     04 E4 05 F1 | 	add	objptr, #4
15aec     F2 00 68 FC | 	wrlong	#0, objptr
15af0     04 E4 05 F1 | 	add	objptr, #4
15af4     F2 00 68 FC | 	wrlong	#0, objptr
15af8     22 00 00 FF 
15afc     B0 E5 05 F1 | 	add	objptr, ##17840
15b00     F2 02 68 FC | 	wrlong	#1, objptr
15b04     01 00 00 FF 
15b08     9C E4 05 F1 | 	add	objptr, ##668
15b0c     F2 00 68 FC | 	wrlong	#0, objptr
15b10     01 00 00 FF 
15b14     00 EA 05 F1 | 	add	ptr__dat__, ##512
15b18     08 E4 05 F1 | 	add	objptr, #8
15b1c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15b20     04 E4 85 F1 | 	sub	objptr, #4
15b24     03 00 80 FF 
15b28     F2 28 69 FC | 	wrlong	##1684, objptr
15b2c     16 00 00 FF 
15b30     1C E4 85 F1 | 	sub	objptr, ##11292
15b34     F2 18 68 FC | 	wrlong	#12, objptr
15b38     64 00 00 FF 
15b3c     38 E4 85 F1 | 	sub	objptr, ##51256
15b40     01 00 00 FF 
15b44     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15b48     C8 EB BF FD | 	call	#_init_commands
15b4c     40 F8 BF FD | 	call	#_init_error_strings
15b50     8C 68 BF FD | 	call	#_do_new
15b54     56 00 00 FF 
15b58     10 E4 05 F1 | 	add	objptr, ##44048
15b5c     F2 12 02 FB | 	rdlong	arg01, objptr
15b60     04 E4 85 F1 | 	sub	objptr, #4
15b64     F2 14 02 FB | 	rdlong	arg02, objptr
15b68     56 00 00 FF 
15b6c     0C E4 85 F1 | 	sub	objptr, ##44044
15b70     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15b74     56 00 00 FF 
15b78     14 E4 05 F1 | 	add	objptr, ##44052
15b7c     F2 12 02 FB | 	rdlong	arg01, objptr
15b80     56 00 00 FF 
15b84     14 E4 85 F1 | 	sub	objptr, ##44052
15b88     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15b8c                 | ' 
15b8c                 | ' leading_spaces:=amount
15b8c     01 00 00 FF 
15b90     B2 E4 05 F1 | 	add	objptr, ##690
15b94     F2 04 68 FC | 	wrlong	#2, objptr
15b98     01 00 00 FF 
15b9c     B2 E4 85 F1 | 	sub	objptr, ##690
15ba0     46 01 00 FF 
15ba4     14 20 06 F6 | 	mov	local02, ##@LR__4697
15ba8     3D 12 06 F6 | 	mov	arg01, #61
15bac     3C 14 06 F6 | 	mov	arg02, #60
15bb0     3B 16 06 F6 | 	mov	arg03, #59
15bb4     3A 18 06 F6 | 	mov	arg04, #58
15bb8     B0 79 B0 FD | 	call	#__system___vfs_open_sdcardx
15bbc     FD 14 02 F6 | 	mov	arg02, result1
15bc0     10 13 02 F6 | 	mov	arg01, local02
15bc4     D8 33 B0 FD | 	call	#__system___mount
15bc8     46 01 00 FF 
15bcc     18 12 06 F6 | 	mov	arg01, ##@LR__4698
15bd0     8C 36 B0 FD | 	call	#__system___chdir
15bd4     46 01 00 FF 
15bd8     20 20 06 F6 | 	mov	local02, ##@LR__4699
15bdc     71 00 00 FF 
15be0     68 E4 05 F1 | 	add	objptr, ##57960
15be4     F2 20 62 FC | 	wrlong	local02, objptr
15be8     1B 00 00 FF 
15bec     60 E4 85 F1 | 	sub	objptr, ##13920
15bf0     F2 12 02 FB | 	rdlong	arg01, objptr
15bf4     56 00 00 FF 
15bf8     08 E4 85 F1 | 	sub	objptr, ##44040
15bfc     01 12 66 F0 | 	shl	arg01, #1
15c00     01 14 06 F6 | 	mov	arg02, #1
15c04     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
15c08                 | ' 
15c08                 | ' init_commands
15c08                 | ' init_error_strings
15c08                 | ' do_new
15c08                 | ' 
15c08                 | ' 
15c08                 | ' cls(ink, paper)
15c08                 | ' 'v.setfontfamily(4) 				' use ST Mono font
15c08                 | ' v.setfontfamily(font) 				' use ST Mono font
15c08                 | ' v.setleadingspaces(2)
15c08                 | ' mount "/sd", _vfs_open_sdcard()
15c08                 | ' chdir "/sd/bas"
15c08                 | ' 
15c08                 | ' currentdir$="/sd/bas"
15c08                 | ' 
15c08                 | ' position 2*editor_spaces,1 : print ver$
15c08     00 12 06 F6 | 	mov	arg01, #0
15c0c     C4 88 B0 FD | 	call	#__system___getiolock_0417
15c10     FD 12 02 F6 | 	mov	arg01, result1
15c14     BC 2F B0 FD | 	call	#__system___lockmem
15c18     10 00 00 FF 
15c1c     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15c20     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15c24     10 00 00 FF 
15c28     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15c2c     00 12 06 F6 | 	mov	arg01, #0
15c30     00 16 06 F6 | 	mov	arg03, #0
15c34     8C 3C B0 FD | 	call	#__system___basic_print_string
15c38     00 12 06 F6 | 	mov	arg01, #0
15c3c     0A 14 06 F6 | 	mov	arg02, #10
15c40     00 16 06 F6 | 	mov	arg03, #0
15c44     24 3C B0 FD | 	call	#__system___basic_print_char
15c48     00 12 06 F6 | 	mov	arg01, #0
15c4c     84 88 B0 FD | 	call	#__system___getiolock_0417
15c50     FD 00 68 FC | 	wrlong	#0, result1
15c54     F2 12 02 FB | 	rdlong	arg01, objptr
15c58     00 14 06 F6 | 	mov	arg02, #0
15c5c     0A 16 06 F6 | 	mov	arg03, #10
15c60     74 51 B0 FD | 	call	#__system__Number_S
15c64     FD 12 02 F6 | 	mov	arg01, result1
15c68     46 01 00 FF 
15c6c     28 14 06 F6 | 	mov	arg02, ##@LR__4700
15c70     BC 2F B0 FD | 	call	#__system___string_concat
15c74     FD 20 02 F6 | 	mov	local02, result1
15c78     78 00 00 FF 
15c7c     B0 E5 05 F1 | 	add	objptr, ##61872
15c80     F2 20 62 FC | 	wrlong	local02, objptr
15c84     78 00 00 FF 
15c88     B0 E5 85 F1 | 	sub	objptr, ##61872
15c8c                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15c8c     00 12 06 F6 | 	mov	arg01, #0
15c90     40 88 B0 FD | 	call	#__system___getiolock_0417
15c94     FD 12 02 F6 | 	mov	arg01, result1
15c98     38 2F B0 FD | 	call	#__system___lockmem
15c9c     78 00 00 FF 
15ca0     B0 E5 05 F1 | 	add	objptr, ##61872
15ca4     F2 14 02 FB | 	rdlong	arg02, objptr
15ca8     78 00 00 FF 
15cac     B0 E5 85 F1 | 	sub	objptr, ##61872
15cb0     00 12 06 F6 | 	mov	arg01, #0
15cb4     00 16 06 F6 | 	mov	arg03, #0
15cb8     08 3C B0 FD | 	call	#__system___basic_print_string
15cbc     00 12 06 F6 | 	mov	arg01, #0
15cc0     0A 14 06 F6 | 	mov	arg02, #10
15cc4     00 16 06 F6 | 	mov	arg03, #0
15cc8     A0 3B B0 FD | 	call	#__system___basic_print_char
15ccc     00 12 06 F6 | 	mov	arg01, #0
15cd0     00 88 B0 FD | 	call	#__system___getiolock_0417
15cd4     FD 00 68 FC | 	wrlong	#0, result1
15cd8     56 00 00 FF 
15cdc     08 E4 05 F1 | 	add	objptr, ##44040
15ce0     F2 12 02 FB | 	rdlong	arg01, objptr
15ce4     56 00 00 FF 
15ce8     08 E4 85 F1 | 	sub	objptr, ##44040
15cec     01 12 66 F0 | 	shl	arg01, #1
15cf0     04 14 06 F6 | 	mov	arg02, #4
15cf4     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
15cf8                 | ' position 2*editor_spaces,4 : print "Ready"
15cf8     00 12 06 F6 | 	mov	arg01, #0
15cfc     D4 87 B0 FD | 	call	#__system___getiolock_0417
15d00     FD 12 02 F6 | 	mov	arg01, result1
15d04     CC 2E B0 FD | 	call	#__system___lockmem
15d08     46 01 00 FF 
15d0c     3A 14 06 F6 | 	mov	arg02, ##@LR__4701
15d10     00 12 06 F6 | 	mov	arg01, #0
15d14     00 16 06 F6 | 	mov	arg03, #0
15d18     A8 3B B0 FD | 	call	#__system___basic_print_string
15d1c     FD 22 02 F6 | 	mov	local03, result1
15d20     00 12 06 F6 | 	mov	arg01, #0
15d24     0A 14 06 F6 | 	mov	arg02, #10
15d28     00 16 06 F6 | 	mov	arg03, #0
15d2c     3C 3B B0 FD | 	call	#__system___basic_print_char
15d30     01 24 06 F6 | 	mov	local04, #1
15d34     00 12 06 F6 | 	mov	arg01, #0
15d38     98 87 B0 FD | 	call	#__system___getiolock_0417
15d3c     FD 00 68 FC | 	wrlong	#0, result1
15d40     00 26 06 F6 | 	mov	local05, #0
15d44     00 14 06 F6 | 	mov	arg02, #0
15d48     01 14 D6 F7 | 	test	arg02, #1 wc
15d4c     5A 4C 64 FD | 	drvc	#38
15d50     01 14 D6 F7 | 	test	arg02, #1 wc
15d54     5A 4E 64 FD | 	drvc	#39
15d58                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15d58                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15d58                 | ' 
15d58                 | ' '-------------------------------------------------------------------------------------------------------- 
15d58                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15d58                 | ' '--------------------------------------------------------------------------------------------------------
15d58                 | ' 
15d58                 | ' do
15d58                 | LR__1710
15d58     01 12 06 F6 | 	mov	arg01, #1
15d5c     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15d60     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15d64     64 00 00 FF 
15d68     48 E4 05 F1 | 	add	objptr, ##51272
15d6c     F2 FA 61 FC | 	wrlong	result1, objptr
15d70                 | '   return hkbd_led_rep
15d70     13 00 00 FF 
15d74     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15d78     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15d7c     13 00 00 FF 
15d80     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15d84     16 00 00 FF 
15d88     14 E4 05 F1 | 	add	objptr, ##11284
15d8c     F2 FA 61 FC | 	wrlong	result1, objptr
15d90                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15d90     16 00 00 FF 
15d94     14 E4 85 F1 | 	sub	objptr, ##11284
15d98     F2 20 02 FB | 	rdlong	local02, objptr
15d9c     64 00 00 FF 
15da0     48 E4 85 F1 | 	sub	objptr, ##51272
15da4     01 20 16 F2 | 	cmp	local02, #1 wc
15da8     BC 00 90 CD |  if_b	jmp	#LR__1711
15dac     64 00 00 FF 
15db0     48 E4 05 F1 | 	add	objptr, ##51272
15db4     F2 24 02 FB | 	rdlong	local04, objptr
15db8     64 00 00 FF 
15dbc     48 E4 85 F1 | 	sub	objptr, ##51272
15dc0     12 23 02 F6 | 	mov	local03, local04
15dc4     04 22 16 F2 | 	cmp	local03, #4 wc
15dc8     9C 00 90 3D |  if_ae	jmp	#LR__1711
15dcc     78 00 00 FF 
15dd0     B4 E5 05 F1 | 	add	objptr, ##61876
15dd4     F2 1E 02 FB | 	rdlong	local01, objptr
15dd8     78 00 00 FF 
15ddc     B4 E5 85 F1 | 	sub	objptr, ##61876
15de0     0F 27 02 F6 | 	mov	local05, local01
15de4     01 26 0E F2 | 	cmp	local05, #1 wz
15de8     7C 00 90 5D |  if_ne	jmp	#LR__1711
15dec     04 00 00 FF 
15df0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15df4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15df8     04 00 00 FF 
15dfc     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15e00     56 00 00 FF 
15e04     44 22 06 F6 | 	mov	local03, ##44100
15e08     0E 24 C6 F9 | 	decod	local04, #14
15e0c     00 26 06 F6 | 	mov	local05, #0
15e10     03 00 00 FF 
15e14     DE 1E 06 F6 | 	mov	local01, ##1758
15e18     07 12 06 F6 | 	mov	arg01, #7
15e1c     56 00 00 FF 
15e20     44 16 06 F6 | 	mov	arg03, ##44100
15e24     0E 18 C6 F9 | 	decod	arg04, #14
15e28     00 1A 06 F6 | 	mov	arg05, #0
15e2c     03 00 00 FF 
15e30     DE 1C 06 F6 | 	mov	arg06, ##1758
15e34     0B 00 00 FF 
15e38     C0 E4 05 F1 | 	add	objptr, ##5824
15e3c     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15e40     0B 00 00 FF 
15e44     C0 E4 85 F1 | 	sub	objptr, ##5824
15e48     0A 12 06 F6 | 	mov	arg01, #10
15e4c     78 30 B0 FD | 	call	#__system___waitms
15e50     07 12 06 F6 | 	mov	arg01, #7
15e54     0B 00 00 FF 
15e58     C0 E4 05 F1 | 	add	objptr, ##5824
15e5c     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15e60     0B 00 00 FF 
15e64     C0 E4 85 F1 | 	sub	objptr, ##5824
15e68                 | LR__1711
15e68                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
15e68     64 00 00 FF 
15e6c     48 E4 05 F1 | 	add	objptr, ##51272
15e70     F2 20 02 FB | 	rdlong	local02, objptr
15e74     64 00 00 FF 
15e78     48 E4 85 F1 | 	sub	objptr, ##51272
15e7c     04 20 16 F2 | 	cmp	local02, #4 wc
15e80     80 00 90 CD |  if_b	jmp	#LR__1712
15e84     64 00 00 FF 
15e88     48 E4 05 F1 | 	add	objptr, ##51272
15e8c     F2 24 02 FB | 	rdlong	local04, objptr
15e90     64 00 00 FF 
15e94     48 E4 85 F1 | 	sub	objptr, ##51272
15e98     12 23 02 F6 | 	mov	local03, local04
15e9c     00 00 40 FF 
15ea0     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
15ea4     64 00 00 CF 
15ea8     48 E4 05 C1 |  if_b	add	objptr, ##51272
15eac     F2 1E 02 CB |  if_b	rdlong	local01, objptr
15eb0     64 00 00 CF 
15eb4     48 E4 85 C1 |  if_b	sub	objptr, ##51272
15eb8     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
15ebc     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
15ec0     40 00 90 3D |  if_ae	jmp	#LR__1712
15ec4     64 00 00 FF 
15ec8     48 E4 05 F1 | 	add	objptr, ##51272
15ecc     F2 20 02 FB | 	rdlong	local02, objptr
15ed0     04 E4 05 F1 | 	add	objptr, #4
15ed4     F2 20 62 FC | 	wrlong	local02, objptr
15ed8     16 00 00 FF 
15edc     14 E4 05 F1 | 	add	objptr, ##11284
15ee0     F2 02 68 FC | 	wrlong	#1, objptr
15ee4     16 00 00 FF 
15ee8     14 E4 85 F1 | 	sub	objptr, ##11284
15eec     F2 20 02 FB | 	rdlong	local02, objptr
15ef0     16 00 00 FF 
15ef4     18 E4 05 F1 | 	add	objptr, ##11288
15ef8     F2 20 62 FC | 	wrlong	local02, objptr
15efc     7A 00 00 FF 
15f00     64 E4 85 F1 | 	sub	objptr, ##62564
15f04                 | LR__1712
15f04                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
15f04     64 00 00 FF 
15f08     48 E4 05 F1 | 	add	objptr, ##51272
15f0c     F2 20 02 FB | 	rdlong	local02, objptr
15f10     64 00 00 FF 
15f14     48 E4 85 F1 | 	sub	objptr, ##51272
15f18     00 00 40 FF 
15f1c     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
15f20     7A 00 00 3F 
15f24     68 E4 05 31 |  if_ae	add	objptr, ##62568
15f28     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15f2c     08 E4 85 31 |  if_ae	sub	objptr, #8
15f30     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15f34     7A 00 00 3F 
15f38     60 E4 85 31 |  if_ae	sub	objptr, ##62560
15f3c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
15f3c     64 00 00 FF 
15f40     48 E4 05 F1 | 	add	objptr, ##51272
15f44     F2 20 0A FB | 	rdlong	local02, objptr wz
15f48     64 00 00 FF 
15f4c     48 E4 85 F1 | 	sub	objptr, ##51272
15f50     7A 00 00 AF 
15f54     60 E4 05 A1 |  if_e	add	objptr, ##62560
15f58     F2 24 02 AB |  if_e	rdlong	local04, objptr
15f5c     7A 00 00 AF 
15f60     60 E4 85 A1 |  if_e	sub	objptr, ##62560
15f64     12 23 02 A6 |  if_e	mov	local03, local04
15f68     01 22 0E A2 |  if_e	cmp	local03, #1 wz
15f6c     7A 00 00 AF 
15f70     68 E4 05 A1 |  if_e	add	objptr, ##62568
15f74     F2 20 02 AB |  if_e	rdlong	local02, objptr
15f78     01 20 06 A1 |  if_e	add	local02, #1
15f7c     F2 20 62 AC |  if_e	wrlong	local02, objptr
15f80     7A 00 00 AF 
15f84     68 E4 85 A1 |  if_e	sub	objptr, ##62568
15f88                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
15f88     64 00 00 FF 
15f8c     48 E4 05 F1 | 	add	objptr, ##51272
15f90     F2 20 02 FB | 	rdlong	local02, objptr
15f94     64 00 00 FF 
15f98     48 E4 85 F1 | 	sub	objptr, ##51272
15f9c     00 00 40 FF 
15fa0     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
15fa4     44 00 90 3D |  if_ae	jmp	#LR__1714
15fa8     7A 00 00 FF 
15fac     68 E4 05 F1 | 	add	objptr, ##62568
15fb0     F2 20 02 FB | 	rdlong	local02, objptr
15fb4     7A 00 00 FF 
15fb8     68 E4 85 F1 | 	sub	objptr, ##62568
15fbc     19 20 0E F2 | 	cmp	local02, #25 wz
15fc0     28 00 90 5D |  if_ne	jmp	#LR__1713
15fc4     64 00 00 FF 
15fc8     4C E4 05 F1 | 	add	objptr, ##51276
15fcc     F2 20 02 FB | 	rdlong	local02, objptr
15fd0     16 00 00 FF 
15fd4     18 E4 05 F1 | 	add	objptr, ##11288
15fd8     F2 20 62 FC | 	wrlong	local02, objptr
15fdc     04 E4 05 F1 | 	add	objptr, #4
15fe0     F2 2A 68 FC | 	wrlong	#21, objptr
15fe4     7A 00 00 FF 
15fe8     68 E4 85 F1 | 	sub	objptr, ##62568
15fec                 | LR__1713
15fec                 | LR__1714
15fec                 | ' 
15fec                 | ' 
15fec                 | ' if key3<>0 then
15fec     7A 00 00 FF 
15ff0     64 E4 05 F1 | 	add	objptr, ##62564
15ff4     F2 28 0A FB | 	rdlong	local06, objptr wz
15ff8     7A 00 00 FF 
15ffc     64 E4 85 F1 | 	sub	objptr, ##62564
16000     54 FD 9F AD |  if_e	jmp	#LR__1710
16004                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
16004     78 00 00 FF 
16008     B4 E5 05 F1 | 	add	objptr, ##61876
1600c     F2 20 02 FB | 	rdlong	local02, objptr
16010     78 00 00 FF 
16014     B4 E5 85 F1 | 	sub	objptr, ##61876
16018     01 20 0E F2 | 	cmp	local02, #1 wz
1601c     50 00 90 5D |  if_ne	jmp	#LR__1715
16020     7A 00 00 FF 
16024     58 E4 05 F1 | 	add	objptr, ##62552
16028     F2 14 02 FB | 	rdlong	arg02, objptr
1602c     56 00 00 FF 
16030     44 22 06 F6 | 	mov	local03, ##44100
16034     0E 24 C6 F9 | 	decod	local04, #14
16038     04 E4 85 F1 | 	sub	objptr, #4
1603c     F2 26 02 FB | 	rdlong	local05, objptr
16040     01 1E 66 F6 | 	neg	local01, #1
16044     07 12 06 F6 | 	mov	arg01, #7
16048     56 00 00 FF 
1604c     44 16 06 F6 | 	mov	arg03, ##44100
16050     0E 18 C6 F9 | 	decod	arg04, #14
16054     13 1B 02 F6 | 	mov	arg05, local05
16058     01 1C 66 F6 | 	neg	arg06, #1
1605c     6E 00 00 FF 
16060     94 E5 85 F1 | 	sub	objptr, ##56724
16064     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16068     0B 00 00 FF 
1606c     C0 E4 85 F1 | 	sub	objptr, ##5824
16070                 | LR__1715
16070     7A 00 00 FF 
16074     64 E4 05 F1 | 	add	objptr, ##62564
16078     F2 12 02 FB | 	rdlong	arg01, objptr
1607c     7A 00 00 FF 
16080     64 E4 85 F1 | 	sub	objptr, ##62564
16084     3C F8 BF FD | 	call	#_scantochar
16088     7A 00 00 FF 
1608c     6C E4 05 F1 | 	add	objptr, ##62572
16090     F2 FA 61 FC | 	wrlong	result1, objptr
16094                 | '   if leds and 2 = 2 then 
16094     10 E4 85 F1 | 	sub	objptr, #16
16098     F2 20 0A FB | 	rdlong	local02, objptr wz
1609c     7A 00 00 FF 
160a0     5C E4 85 F1 | 	sub	objptr, ##62556
160a4     68 01 90 AD |  if_e	jmp	#LR__1723
160a8                 | '     if key4>96 andalso key4<123 then
160a8     7A 00 00 FF 
160ac     6C E4 05 F1 | 	add	objptr, ##62572
160b0     F2 20 02 FB | 	rdlong	local02, objptr
160b4     7A 00 00 FF 
160b8     6C E4 85 F1 | 	sub	objptr, ##62572
160bc     61 20 56 F2 | 	cmps	local02, #97 wc
160c0     40 00 90 CD |  if_b	jmp	#LR__1716
160c4     7A 00 00 FF 
160c8     6C E4 05 F1 | 	add	objptr, ##62572
160cc     F2 24 02 FB | 	rdlong	local04, objptr
160d0     7A 00 00 FF 
160d4     6C E4 85 F1 | 	sub	objptr, ##62572
160d8     12 23 02 F6 | 	mov	local03, local04
160dc     7B 22 56 F2 | 	cmps	local03, #123 wc
160e0     20 00 90 3D |  if_ae	jmp	#LR__1716
160e4     7A 00 00 FF 
160e8     6C E4 05 F1 | 	add	objptr, ##62572
160ec     F2 20 02 FB | 	rdlong	local02, objptr
160f0     20 20 86 F1 | 	sub	local02, #32
160f4     F2 20 62 FC | 	wrlong	local02, objptr
160f8     7A 00 00 FF 
160fc     6C E4 85 F1 | 	sub	objptr, ##62572
16100     0C 01 90 FD | 	jmp	#LR__1722
16104                 | LR__1716
16104     7A 00 00 FF 
16108     6C E4 05 F1 | 	add	objptr, ##62572
1610c     F2 20 02 FB | 	rdlong	local02, objptr
16110     7A 00 00 FF 
16114     6C E4 85 F1 | 	sub	objptr, ##62572
16118     41 20 56 F2 | 	cmps	local02, #65 wc
1611c     40 00 90 CD |  if_b	jmp	#LR__1717
16120     7A 00 00 FF 
16124     6C E4 05 F1 | 	add	objptr, ##62572
16128     F2 24 02 FB | 	rdlong	local04, objptr
1612c     7A 00 00 FF 
16130     6C E4 85 F1 | 	sub	objptr, ##62572
16134     12 23 02 F6 | 	mov	local03, local04
16138     5B 22 56 F2 | 	cmps	local03, #91 wc
1613c     20 00 90 3D |  if_ae	jmp	#LR__1717
16140     7A 00 00 FF 
16144     6C E4 05 F1 | 	add	objptr, ##62572
16148     F2 20 02 FB | 	rdlong	local02, objptr
1614c     20 20 06 F1 | 	add	local02, #32
16150     F2 20 62 FC | 	wrlong	local02, objptr
16154     7A 00 00 FF 
16158     6C E4 85 F1 | 	sub	objptr, ##62572
1615c     B0 00 90 FD | 	jmp	#LR__1721
16160                 | LR__1717
16160     7A 00 00 FF 
16164     6C E4 05 F1 | 	add	objptr, ##62572
16168     F2 20 02 FB | 	rdlong	local02, objptr
1616c     7A 00 00 FF 
16170     6C E4 85 F1 | 	sub	objptr, ##62572
16174     17 20 56 F2 | 	cmps	local02, #23 wc
16178     40 00 90 CD |  if_b	jmp	#LR__1718
1617c     7A 00 00 FF 
16180     6C E4 05 F1 | 	add	objptr, ##62572
16184     F2 24 02 FB | 	rdlong	local04, objptr
16188     7A 00 00 FF 
1618c     6C E4 85 F1 | 	sub	objptr, ##62572
16190     12 23 02 F6 | 	mov	local03, local04
16194     20 22 56 F2 | 	cmps	local03, #32 wc
16198     20 00 90 3D |  if_ae	jmp	#LR__1718
1619c     7A 00 00 FF 
161a0     6C E4 05 F1 | 	add	objptr, ##62572
161a4     F2 20 02 FB | 	rdlong	local02, objptr
161a8     09 20 86 F1 | 	sub	local02, #9
161ac     F2 20 62 FC | 	wrlong	local02, objptr
161b0     7A 00 00 FF 
161b4     6C E4 85 F1 | 	sub	objptr, ##62572
161b8     54 00 90 FD | 	jmp	#LR__1720
161bc                 | LR__1718
161bc     7A 00 00 FF 
161c0     6C E4 05 F1 | 	add	objptr, ##62572
161c4     F2 20 02 FB | 	rdlong	local02, objptr
161c8     7A 00 00 FF 
161cc     6C E4 85 F1 | 	sub	objptr, ##62572
161d0     0E 20 56 F2 | 	cmps	local02, #14 wc
161d4     38 00 90 CD |  if_b	jmp	#LR__1719
161d8     7A 00 00 FF 
161dc     6C E4 05 F1 | 	add	objptr, ##62572
161e0     F2 24 02 FB | 	rdlong	local04, objptr
161e4     7A 00 00 FF 
161e8     6C E4 85 F1 | 	sub	objptr, ##62572
161ec     12 23 02 F6 | 	mov	local03, local04
161f0     17 22 56 F2 | 	cmps	local03, #23 wc
161f4     7A 00 00 CF 
161f8     6C E4 05 C1 |  if_b	add	objptr, ##62572
161fc     F2 20 02 CB |  if_b	rdlong	local02, objptr
16200     27 20 06 C1 |  if_b	add	local02, #39
16204     F2 20 62 CC |  if_b	wrlong	local02, objptr
16208     7A 00 00 CF 
1620c     6C E4 85 C1 |  if_b	sub	objptr, ##62572
16210                 | LR__1719
16210                 | LR__1720
16210                 | LR__1721
16210                 | LR__1722
16210                 | LR__1723
16210                 | '  
16210                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
16210     7A 00 00 FF 
16214     6C E4 05 F1 | 	add	objptr, ##62572
16218     F2 20 02 FB | 	rdlong	local02, objptr
1621c     7A 00 00 FF 
16220     6C E4 85 F1 | 	sub	objptr, ##62572
16224     01 20 56 F2 | 	cmps	local02, #1 wc
16228     90 00 90 CD |  if_b	jmp	#LR__1724
1622c     7A 00 00 FF 
16230     6C E4 05 F1 | 	add	objptr, ##62572
16234     F2 24 02 FB | 	rdlong	local04, objptr
16238     7A 00 00 FF 
1623c     6C E4 85 F1 | 	sub	objptr, ##62572
16240     12 23 02 F6 | 	mov	local03, local04
16244     7F 22 56 F2 | 	cmps	local03, #127 wc
16248     38 E4 05 C1 |  if_b	add	objptr, #56
1624c     F2 1E E2 CA |  if_b	rdword	local01, objptr
16250     38 E4 85 C1 |  if_b	sub	objptr, #56
16254     0F 27 32 C9 |  if_b	getword	local05, local01, #0
16258     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1625c     5C 00 90 3D |  if_ae	jmp	#LR__1724
16260     7A 00 00 FF 
16264     6C E4 05 F1 | 	add	objptr, ##62572
16268     F2 12 02 FB | 	rdlong	arg01, objptr
1626c     7A 00 00 FF 
16270     6C E4 85 F1 | 	sub	objptr, ##62572
16274     2C 4B B0 FD | 	call	#__system__Chr_S
16278     FD 2A 02 F6 | 	mov	local07, result1
1627c     55 00 00 FF 
16280     F0 E5 05 F1 | 	add	objptr, ##44016
16284     F2 12 02 FB | 	rdlong	arg01, objptr
16288     55 00 00 FF 
1628c     F0 E5 85 F1 | 	sub	objptr, ##44016
16290     15 15 02 F6 | 	mov	arg02, local07
16294     98 29 B0 FD | 	call	#__system___string_concat
16298     55 00 00 FF 
1629c     F0 E5 05 F1 | 	add	objptr, ##44016
162a0     F2 FA 61 FC | 	wrlong	result1, objptr
162a4     24 00 00 FF 
162a8     7C E4 05 F1 | 	add	objptr, ##18556
162ac     F2 12 02 FB | 	rdlong	arg01, objptr
162b0     7A 00 00 FF 
162b4     6C E4 85 F1 | 	sub	objptr, ##62572
162b8     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
162bc                 | LR__1724
162bc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
162bc     7A 00 00 FF 
162c0     6C E4 05 F1 | 	add	objptr, ##62572
162c4     F2 20 02 FB | 	rdlong	local02, objptr
162c8     7A 00 00 FF 
162cc     6C E4 85 F1 | 	sub	objptr, ##62572
162d0     01 20 56 F2 | 	cmps	local02, #1 wc
162d4     D0 00 90 CD |  if_b	jmp	#LR__1725
162d8     7A 00 00 FF 
162dc     6C E4 05 F1 | 	add	objptr, ##62572
162e0     F2 24 02 FB | 	rdlong	local04, objptr
162e4     7A 00 00 FF 
162e8     6C E4 85 F1 | 	sub	objptr, ##62572
162ec     12 23 02 F6 | 	mov	local03, local04
162f0     7F 22 56 F2 | 	cmps	local03, #127 wc
162f4     B0 00 90 3D |  if_ae	jmp	#LR__1725
162f8     38 E4 05 F1 | 	add	objptr, #56
162fc     F2 1E E2 FA | 	rdword	local01, objptr
16300     38 E4 85 F1 | 	sub	objptr, #56
16304     0F 27 32 F9 | 	getword	local05, local01, #0
16308     FE 26 0E F2 | 	cmp	local05, #254 wz
1630c     78 00 00 AF 
16310     B4 E5 05 A1 |  if_e	add	objptr, ##61876
16314     F2 2C 02 AB |  if_e	rdlong	local08, objptr
16318     78 00 00 AF 
1631c     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
16320     16 2F 02 A6 |  if_e	mov	local09, local08
16324     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
16328     7C 00 90 5D |  if_ne	jmp	#LR__1725
1632c     04 00 00 FF 
16330     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16334     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16338     04 00 00 FF 
1633c     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16340     56 00 00 FF 
16344     44 22 06 F6 | 	mov	local03, ##44100
16348     0E 24 C6 F9 | 	decod	local04, #14
1634c     00 26 06 F6 | 	mov	local05, #0
16350     03 00 00 FF 
16354     DE 1E 06 F6 | 	mov	local01, ##1758
16358     07 12 06 F6 | 	mov	arg01, #7
1635c     56 00 00 FF 
16360     44 16 06 F6 | 	mov	arg03, ##44100
16364     0E 18 C6 F9 | 	decod	arg04, #14
16368     00 1A 06 F6 | 	mov	arg05, #0
1636c     03 00 00 FF 
16370     DE 1C 06 F6 | 	mov	arg06, ##1758
16374     0B 00 00 FF 
16378     C0 E4 05 F1 | 	add	objptr, ##5824
1637c     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16380     0B 00 00 FF 
16384     C0 E4 85 F1 | 	sub	objptr, ##5824
16388     2C 13 06 F6 | 	mov	arg01, #300
1638c     38 2B B0 FD | 	call	#__system___waitms
16390     07 12 06 F6 | 	mov	arg01, #7
16394     0B 00 00 FF 
16398     C0 E4 05 F1 | 	add	objptr, ##5824
1639c     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
163a0     0B 00 00 FF 
163a4     C0 E4 85 F1 | 	sub	objptr, ##5824
163a8                 | LR__1725
163a8                 | '  
163a8                 | '   'tab
163a8                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
163a8     7A 00 00 FF 
163ac     64 E4 05 F1 | 	add	objptr, ##62564
163b0     F2 20 02 FB | 	rdlong	local02, objptr
163b4     7A 00 00 FF 
163b8     64 E4 85 F1 | 	sub	objptr, ##62564
163bc     10 21 E2 F8 | 	getbyte	local02, local02, #0
163c0     2B 20 0E F2 | 	cmp	local02, #43 wz
163c4     B4 00 90 5D |  if_ne	jmp	#LR__1726
163c8     38 E4 05 F1 | 	add	objptr, #56
163cc     F2 24 E2 FA | 	rdword	local04, objptr
163d0     38 E4 85 F1 | 	sub	objptr, #56
163d4     12 23 32 F9 | 	getword	local03, local04, #0
163d8     F0 22 16 F2 | 	cmp	local03, #240 wc
163dc     9C 00 90 CD |  if_b	jmp	#LR__1726
163e0     78 00 00 FF 
163e4     B4 E5 05 F1 | 	add	objptr, ##61876
163e8     F2 1E 02 FB | 	rdlong	local01, objptr
163ec     78 00 00 FF 
163f0     B4 E5 85 F1 | 	sub	objptr, ##61876
163f4     0F 27 02 F6 | 	mov	local05, local01
163f8     01 26 0E F2 | 	cmp	local05, #1 wz
163fc     7C 00 90 5D |  if_ne	jmp	#LR__1726
16400     04 00 00 FF 
16404     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16408     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1640c     04 00 00 FF 
16410     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16414     56 00 00 FF 
16418     44 22 06 F6 | 	mov	local03, ##44100
1641c     0E 24 C6 F9 | 	decod	local04, #14
16420     00 26 06 F6 | 	mov	local05, #0
16424     03 00 00 FF 
16428     DE 1E 06 F6 | 	mov	local01, ##1758
1642c     00 12 06 F6 | 	mov	arg01, #0
16430     56 00 00 FF 
16434     44 16 06 F6 | 	mov	arg03, ##44100
16438     0E 18 C6 F9 | 	decod	arg04, #14
1643c     00 1A 06 F6 | 	mov	arg05, #0
16440     03 00 00 FF 
16444     DE 1C 06 F6 | 	mov	arg06, ##1758
16448     0B 00 00 FF 
1644c     C0 E4 05 F1 | 	add	objptr, ##5824
16450     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16454     0B 00 00 FF 
16458     C0 E4 85 F1 | 	sub	objptr, ##5824
1645c     2C 13 06 F6 | 	mov	arg01, #300
16460     64 2A B0 FD | 	call	#__system___waitms
16464     00 12 06 F6 | 	mov	arg01, #0
16468     0B 00 00 FF 
1646c     C0 E4 05 F1 | 	add	objptr, ##5824
16470     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16474     0B 00 00 FF 
16478     C0 E4 85 F1 | 	sub	objptr, ##5824
1647c                 | LR__1726
1647c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1647c     7A 00 00 FF 
16480     64 E4 05 F1 | 	add	objptr, ##62564
16484     F2 20 02 FB | 	rdlong	local02, objptr
16488     7A 00 00 FF 
1648c     64 E4 85 F1 | 	sub	objptr, ##62564
16490     10 21 E2 F8 | 	getbyte	local02, local02, #0
16494     2B 20 0E F2 | 	cmp	local02, #43 wz
16498     AC 00 90 5D |  if_ne	jmp	#LR__1729
1649c     38 E4 05 F1 | 	add	objptr, #56
164a0     F2 24 E2 FA | 	rdword	local04, objptr
164a4     38 E4 85 F1 | 	sub	objptr, #56
164a8     12 23 32 F9 | 	getword	local03, local04, #0
164ac     F0 22 16 F2 | 	cmp	local03, #240 wc
164b0     94 00 90 3D |  if_ae	jmp	#LR__1729
164b4     38 E4 05 F1 | 	add	objptr, #56
164b8     F2 20 E2 FA | 	rdword	local02, objptr
164bc     10 23 52 F6 | 	abs	local03, local02 wc
164c0     11 23 42 F8 | 	getnib	local03, local03, #0
164c4     11 23 82 F6 | 	negc	local03, local03
164c8     11 25 52 F6 | 	abs	local04, local03 wc
164cc     01 24 46 F0 | 	shr	local04, #1
164d0     12 25 82 F6 | 	negc	local04, local04
164d4     7A 00 00 FF 
164d8     38 E4 05 F1 | 	add	objptr, ##62520
164dc     F2 24 62 FC | 	wrlong	local04, objptr
164e0     12 31 02 F6 | 	mov	local10, local04
164e4     7A 00 00 FF 
164e8     70 E4 85 F1 | 	sub	objptr, ##62576
164ec                 | LR__1727
164ec     08 30 56 F2 | 	cmps	local10, #8 wc
164f0     54 00 90 3D |  if_ae	jmp	#LR__1728
164f4     55 00 00 FF 
164f8     F0 E5 05 F1 | 	add	objptr, ##44016
164fc     F2 12 02 FB | 	rdlong	arg01, objptr
16500     55 00 00 FF 
16504     F0 E5 85 F1 | 	sub	objptr, ##44016
16508     46 01 00 FF 
1650c     40 24 06 F6 | 	mov	local04, ##@LR__4702
16510     12 15 02 F6 | 	mov	arg02, local04
16514     18 27 B0 FD | 	call	#__system___string_concat
16518     55 00 00 FF 
1651c     F0 E5 05 F1 | 	add	objptr, ##44016
16520     F2 FA 61 FC | 	wrlong	result1, objptr
16524     55 00 00 FF 
16528     F0 E5 85 F1 | 	sub	objptr, ##44016
1652c     46 01 00 FF 
16530     42 12 06 F6 | 	mov	arg01, ##@LR__4703
16534     74 16 B0 FD | 	call	#_hg010b_spin2_write
16538     18 23 02 F6 | 	mov	local03, local10
1653c     01 22 06 F1 | 	add	local03, #1
16540     11 31 02 F6 | 	mov	local10, local03
16544     A4 FF 9F FD | 	jmp	#LR__1727
16548                 | LR__1728
16548                 | LR__1729
16548                 | '  
16548                 | '   'backspace
16548                 | '   if (key3 and 255) = 42 then 
16548     7A 00 00 FF 
1654c     64 E4 05 F1 | 	add	objptr, ##62564
16550     F2 20 02 FB | 	rdlong	local02, objptr
16554     7A 00 00 FF 
16558     64 E4 85 F1 | 	sub	objptr, ##62564
1655c     10 21 E2 F8 | 	getbyte	local02, local02, #0
16560     2A 20 0E F2 | 	cmp	local02, #42 wz
16564     D4 00 90 5D |  if_ne	jmp	#LR__1734
16568                 | '       if v.cursor_x>4 then 
16568     38 E4 05 F1 | 	add	objptr, #56
1656c     F2 20 E2 FA | 	rdword	local02, objptr
16570     38 E4 85 F1 | 	sub	objptr, #56
16574     05 20 16 F2 | 	cmp	local02, #5 wc
16578     9C 00 90 CD |  if_b	jmp	#LR__1732
1657c     55 00 00 FF 
16580     F0 E5 05 F1 | 	add	objptr, ##44016
16584     F2 26 02 FB | 	rdlong	local05, objptr
16588     55 00 00 FF 
1658c     F0 E5 85 F1 | 	sub	objptr, ##44016
16590     13 13 02 F6 | 	mov	arg01, local05
16594     09 33 02 F6 | 	mov	local11, arg01
16598     97 06 48 FB | 	callpa	#(@LR__1731-@LR__1730)>>2,fcache_load_ptr_
1659c                 | LR__1730
1659c     19 FB C9 FA | 	rdbyte	result1, local11 wz
165a0     01 32 06 51 |  if_ne	add	local11, #1
165a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1730
165a8                 | LR__1731
165a8     09 33 82 F1 | 	sub	local11, arg01
165ac     19 15 02 F6 | 	mov	arg02, local11
165b0     01 14 86 F1 | 	sub	arg02, #1
165b4     13 13 02 F6 | 	mov	arg01, local05
165b8     24 46 B0 FD | 	call	#__system__Left_S
165bc     55 00 00 FF 
165c0     F0 E5 05 F1 | 	add	objptr, ##44016
165c4     F2 FA 61 FC | 	wrlong	result1, objptr
165c8     55 00 00 FF 
165cc     B8 E5 85 F1 | 	sub	objptr, ##43960
165d0     F2 12 E2 FA | 	rdword	arg01, objptr
165d4     02 12 86 F1 | 	sub	arg01, #2
165d8     02 E4 05 F1 | 	add	objptr, #2
165dc     F2 14 C2 FA | 	rdbyte	arg02, objptr
165e0     3A E4 85 F1 | 	sub	objptr, #58
165e4     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
165e8     20 12 06 F6 | 	mov	arg01, #32
165ec     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
165f0     38 E4 05 F1 | 	add	objptr, #56
165f4     F2 12 E2 FA | 	rdword	arg01, objptr
165f8     02 12 86 F1 | 	sub	arg01, #2
165fc     02 E4 05 F1 | 	add	objptr, #2
16600     F2 24 C2 FA | 	rdbyte	local04, objptr
16604     3A E4 85 F1 | 	sub	objptr, #58
16608     12 23 E2 F8 | 	getbyte	local03, local04, #0
1660c     11 15 02 F6 | 	mov	arg02, local03
16610     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16614     24 00 90 FD | 	jmp	#LR__1733
16618                 | LR__1732
16618     46 01 00 FF 
1661c     44 20 06 F6 | 	mov	local02, ##@LR__4704
16620     55 00 00 FF 
16624     F0 E5 05 F1 | 	add	objptr, ##44016
16628     F2 20 62 FC | 	wrlong	local02, objptr
1662c     55 00 00 FF 
16630     B8 E5 85 F1 | 	sub	objptr, ##43960
16634     F2 08 58 FC | 	wrword	#4, objptr
16638     38 E4 85 F1 | 	sub	objptr, #56
1663c                 | LR__1733
1663c                 | LR__1734
1663c                 | '    
1663c                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
1663c                 | '  
1663c                 | '   if key4=key_enter then 
1663c     7A 00 00 FF 
16640     6C E4 05 F1 | 	add	objptr, ##62572
16644     F2 28 02 FB | 	rdlong	local06, objptr
16648     7A 00 00 FF 
1664c     6C E4 85 F1 | 	sub	objptr, ##62572
16650     8D 28 0E F2 | 	cmp	local06, #141 wz
16654     50 00 90 5D |  if_ne	jmp	#LR__1735
16658     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
1665c     BC A3 BE FD | 	call	#_interpret
16660     46 01 00 FF 
16664     45 20 06 F6 | 	mov	local02, ##@LR__4705
16668     55 00 00 FF 
1666c     F0 E5 05 F1 | 	add	objptr, ##44016
16670     F2 20 62 FC | 	wrlong	local02, objptr
16674     1A FA 61 FD | 	getct	result1
16678     24 00 00 FF 
1667c     84 E4 05 F1 | 	add	objptr, ##18564
16680     F2 24 02 FB | 	rdlong	local04, objptr
16684     12 23 02 F6 | 	mov	local03, local04
16688     11 FB 81 F1 | 	sub	result1, local03
1668c     F2 FA 61 FC | 	wrlong	result1, objptr
16690     14 E4 85 F1 | 	sub	objptr, #20
16694     F2 00 68 FC | 	wrlong	#0, objptr
16698     08 E4 05 F1 | 	add	objptr, #8
1669c     F2 00 68 FC | 	wrlong	#0, objptr
166a0     7A 00 00 FF 
166a4     68 E4 85 F1 | 	sub	objptr, ##62568
166a8                 | LR__1735
166a8     7A 00 00 FF 
166ac     64 E4 05 F1 | 	add	objptr, ##62564
166b0     F2 00 68 FC | 	wrlong	#0, objptr
166b4     7A 00 00 FF 
166b8     64 E4 85 F1 | 	sub	objptr, ##62564
166bc     98 F6 9F FD | 	jmp	#LR__1710
166c0     A7 F0 03 F6 | 	mov	ptra, fp
166c4     B2 00 A0 FD | 	call	#popregs_
166c8                 | _program_ret
166c8     2D 00 64 FD | 	ret
166cc                 | 
166cc                 | ' '' this is not a main program.
166cc                 | ' 
166cc                 | ' '****************************************************************************************************************
166cc                 | ' '                                                                                                             	*
166cc                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
166cc                 | ' '                                                                                                            	*
166cc                 | ' ' mode - mode #, see below											*
166cc                 | ' ' base - HDMI base pin												*
166cc                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
166cc                 | ' '														*
166cc                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
166cc                 | ' '' set bit #15 for custom timings														*
166cc                 | ' '' p - 1 - psram, 0 - hub											*
166cc                 | ' '' t - 1 - graphics, 0 - text											*
166cc                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
166cc                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
166cc                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
166cc                 | ' '														*
166cc                 | ' '****************************************************************************************************************
166cc                 | ' 
166cc                 | ' pub start(base,mb):result |i
166cc                 | _hg010b_spin2_start
166cc                 | ' 
166cc                 | ' '--------------------------- initialize pointers and variables
166cc                 | ' 
166cc                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
166cc     30 E4 05 F1 | 	add	objptr, #48
166d0     F2 FA 01 F6 | 	mov	result1, objptr
166d4     28 E4 85 F1 | 	sub	objptr, #40
166d8     F2 FA 61 FC | 	wrlong	result1, objptr
166dc                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
166dc                 | ' hdmibase:=base							' HDMI base pin, 8*n
166dc     18 E4 05 F1 | 	add	objptr, #24
166e0     F2 12 62 FC | 	wrlong	arg01, objptr
166e4                 | ' mailbox_ptr:=mb		
166e4     04 E4 05 F1 | 	add	objptr, #4
166e8     F2 14 62 FC | 	wrlong	arg02, objptr
166ec                 | ' mailbox0:=mb				' PSRAM mailbox pointer
166ec     C1 E5 05 F1 | 	add	objptr, #449
166f0     F2 14 62 FC | 	wrlong	arg02, objptr
166f4                 | ' sprite_ptr:=@spr1ptr
166f4     D8 E4 85 F1 | 	sub	objptr, #216
166f8     F2 FA 01 F6 | 	mov	result1, objptr
166fc     E5 E4 85 F1 | 	sub	objptr, #229
16700     F2 FA 61 FC | 	wrlong	result1, objptr
16704                 | ' 
16704                 | ' 		'
16704                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
16704     E5 E4 05 F1 | 	add	objptr, #229
16708     F2 FA 01 FB | 	rdlong	result1, objptr
1670c     D0 FA 05 F1 | 	add	result1, #208
16710     FD 10 58 FC | 	wrword	#8, result1
16714                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
16714     F2 16 02 FB | 	rdlong	arg03, objptr
16718     D2 16 06 F1 | 	add	arg03, #210
1671c     0B 21 58 FC | 	wrword	#16, arg03
16720                 | ' leading_spaces:=0				'
16720     A5 E5 05 F1 | 	add	objptr, #421
16724     F2 00 68 FC | 	wrlong	#0, objptr
16728                 | ' 
16728                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
16728     99 E4 85 F1 | 	sub	objptr, #153
1672c     00 00 A0 FF 
16730     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16734                 | ' emptydl[1]:=0
16734     04 E4 05 F1 | 	add	objptr, #4
16738     F2 00 68 FC | 	wrlong	#0, objptr
1673c                 | ' 
1673c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1673c                 | ' 
1673c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1673c     28 E5 85 F1 | 	sub	objptr, #296
16740     F2 02 68 FC | 	wrlong	#1, objptr
16744                 | ' if s_debug<>0
16744                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16744     20 00 80 FF 
16748     F2 00 68 FC | 	wrlong	##16384, objptr
1674c     F5 E4 85 F1 | 	sub	objptr, #245
16750                 | ' setmode()							' set the mode, see below
16750     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16754                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16754     45 E4 05 F1 | 	add	objptr, #69
16758     F2 FA 01 F6 | 	mov	result1, objptr
1675c     35 E4 85 F1 | 	sub	objptr, #53
16760     F2 FA 61 FC | 	wrlong	result1, objptr
16764                 | ' cursor_ptr:=@cursor_x						
16764     28 E4 05 F1 | 	add	objptr, #40
16768     F2 16 02 F6 | 	mov	arg03, objptr
1676c     2C E4 85 F1 | 	sub	objptr, #44
16770     F2 16 62 FC | 	wrlong	arg03, objptr
16774                 | ' fontnum:=0  							' start with a PC type font 
16774     55 E4 05 F1 | 	add	objptr, #85
16778     F2 00 68 FC | 	wrlong	#0, objptr
1677c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1677c     1C E4 05 F1 | 	add	objptr, #28
16780     F2 12 02 F6 | 	mov	arg01, objptr
16784     7D E4 85 F1 | 	sub	objptr, #125
16788     10 00 00 FF 
1678c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16790     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16794     10 00 00 FF 
16798     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1679c     10 16 06 F6 | 	mov	arg03, #16
167a0     50 23 B0 FD | 	call	#__system____builtin_memmove
167a4                 | ' leading_spaces:=0
167a4     01 00 00 FF 
167a8     B2 E4 05 F1 | 	add	objptr, ##690
167ac     F2 00 68 FC | 	wrlong	#0, objptr
167b0     01 00 00 FF 
167b4     B2 E4 85 F1 | 	sub	objptr, ##690
167b8                 | ' '---------------------------- initialize a cursor (MSDOS type)
167b8                 | ' 
167b8                 | ' initcursor(154)
167b8     9A 12 06 F6 | 	mov	arg01, #154
167bc     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
167c0                 | ' 
167c0                 | ' '---------------------------- start the cog
167c0                 | ' 
167c0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
167c0     10 00 00 FF 
167c4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
167c8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
167cc     10 00 00 FF 
167d0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
167d4     10 E4 05 F1 | 	add	objptr, #16
167d8     10 FA 05 F6 | 	mov	result1, #16
167dc     28 E4 61 FD | 	setq	objptr
167e0     0A FB F1 FC | 	coginit	result1, arg02 wc
167e4     01 FA 65 C6 |  if_b	neg	result1, #1
167e8     1C E4 05 F1 | 	add	objptr, #28
167ec     F2 FA 61 FC | 	wrlong	result1, objptr
167f0     2C E4 85 F1 | 	sub	objptr, #44
167f4                 | ' waitms(40)							' wait for stabilize
167f4     28 12 06 F6 | 	mov	arg01, #40
167f8     CC 26 B0 FD | 	call	#__system___waitms
167fc                 | ' return cog							' return the driver's cog #
167fc     2C E4 05 F1 | 	add	objptr, #44
16800     F2 FA 01 FB | 	rdlong	result1, objptr
16804     2C E4 85 F1 | 	sub	objptr, #44
16808                 | _hg010b_spin2_start_ret
16808     2D 00 64 FD | 	ret
1680c                 | 
1680c                 | ' 
1680c                 | ' 
1680c                 | ' '**************************************************************************************************************** 
1680c                 | ' '                                                                                                             	*
1680c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1680c                 | ' '  Mode number - see start() above or bits below								*
1680c                 | ' '                                                                                                             	*
1680c                 | ' '****************************************************************************************************************
1680c                 | ' 
1680c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1680c                 | ' pub initcursor(color) |i
1680c                 | _hg010b_spin2_initcursor
1680c     03 4A 05 F6 | 	mov	COUNT_, #3
16810     A8 00 A0 FD | 	call	#pushregs_
16814     09 1F 02 F6 | 	mov	local01, arg01
16818                 | ' 
16818                 | ' cursor_x:=0							' place the cursor at 0:0
16818     38 E4 05 F1 | 	add	objptr, #56
1681c     F2 00 58 FC | 	wrword	#0, objptr
16820                 | ' cursor_y:=0
16820     02 E4 05 F1 | 	add	objptr, #2
16824     F2 00 48 FC | 	wrbyte	#0, objptr
16828                 | ' repeat i from 0 to 111
16828     00 20 06 F6 | 	mov	local02, #0
1682c     F8 E5 05 F1 | 	add	objptr, #504
16830     97 1A 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
16834                 | LR__1740
16834                 | '   cursor[i]:=0
16834     10 23 02 F6 | 	mov	local03, local02
16838     F2 22 02 F1 | 	add	local03, objptr
1683c     11 01 48 FC | 	wrbyte	#0, local03
16840     01 20 06 F1 | 	add	local02, #1
16844     70 20 56 F2 | 	cmps	local02, #112 wc
16848     E8 FF 9F CD |  if_b	jmp	#LR__1740
1684c                 | ' repeat i from 112 to 127
1684c     70 20 06 F6 | 	mov	local02, #112
16850                 | LR__1741
16850                 | '   cursor[i]:=color  
16850     10 23 02 F6 | 	mov	local03, local02
16854     F2 22 02 F1 | 	add	local03, objptr
16858     11 1F 42 FC | 	wrbyte	local01, local03
1685c     01 20 06 F1 | 	add	local02, #1
16860     80 20 16 F2 | 	cmp	local02, #128 wc
16864     E8 FF 9F CD |  if_b	jmp	#LR__1741
16868                 | LR__1742
16868                 | ' 'repeat i from 0 to 127
16868                 | ' '  if ((i/8)//2)
16868                 | ' '    cursor[i]:=15
16868                 | ' '  else
16868                 | ' '    cursor[i]:=0
16868                 | ' '  if i>=120    
16868                 | ' '    cursor[i]:=40
16868                 | ' setspriteptr(17,@cursor)
16868     F2 14 02 F6 | 	mov	arg02, objptr
1686c     01 00 00 FF 
16870     32 E4 85 F1 | 	sub	objptr, ##562
16874     11 12 06 F6 | 	mov	arg01, #17
16878     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1687c                 | ' setspritesize(17,8,16)
1687c     11 12 06 F6 | 	mov	arg01, #17
16880     08 14 06 F6 | 	mov	arg02, #8
16884     10 16 06 F6 | 	mov	arg03, #16
16888     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
1688c                 | ' setspritepos(17,0,0)
1688c     11 12 06 F6 | 	mov	arg01, #17
16890     00 14 06 F6 | 	mov	arg02, #0
16894     00 16 06 F6 | 	mov	arg03, #0
16898     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
1689c     A7 F0 03 F6 | 	mov	ptra, fp
168a0     B2 00 A0 FD | 	call	#popregs_
168a4                 | _hg010b_spin2_initcursor_ret
168a4     2D 00 64 FD | 	ret
168a8                 | 
168a8                 | ' 
168a8                 | '  
168a8                 | ' pub setcursorcolor(color) |i
168a8                 | _hg010b_spin2_setcursorcolor
168a8                 | ' 
168a8                 | ' 
168a8                 | ' repeat i from 0 to 111
168a8     00 00 06 F6 | 	mov	_var01, #0
168ac     01 00 00 FF 
168b0     32 E4 05 F1 | 	add	objptr, ##562
168b4     97 1A 48 FB | 	callpa	#(@LR__1752-@LR__1750)>>2,fcache_load_ptr_
168b8                 | LR__1750
168b8                 | '   cursor[i]:=0
168b8     00 03 02 F6 | 	mov	_var02, _var01
168bc     F2 02 02 F1 | 	add	_var02, objptr
168c0     01 01 48 FC | 	wrbyte	#0, _var02
168c4     01 00 06 F1 | 	add	_var01, #1
168c8     70 00 56 F2 | 	cmps	_var01, #112 wc
168cc     E8 FF 9F CD |  if_b	jmp	#LR__1750
168d0                 | ' repeat i from 112 to 127
168d0     70 00 06 F6 | 	mov	_var01, #112
168d4                 | LR__1751
168d4                 | '   cursor[i]:=color  
168d4     00 03 02 F6 | 	mov	_var02, _var01
168d8     F2 02 02 F1 | 	add	_var02, objptr
168dc     01 13 42 FC | 	wrbyte	arg01, _var02
168e0     01 00 06 F1 | 	add	_var01, #1
168e4     80 00 16 F2 | 	cmp	_var01, #128 wc
168e8     E8 FF 9F CD |  if_b	jmp	#LR__1751
168ec                 | LR__1752
168ec     01 00 00 FF 
168f0     32 E4 85 F1 | 	sub	objptr, ##562
168f4                 | _hg010b_spin2_setcursorcolor_ret
168f4     2D 00 64 FD | 	ret
168f8                 | 
168f8                 | '  
168f8                 | ' 
168f8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
168f8                 | _hg010b_spin2_setmode
168f8     02 4A 05 F6 | 	mov	COUNT_, #2
168fc     A8 00 A0 FD | 	call	#pushregs_
16900                 | ' 
16900                 | ' 
16900                 | ' dl_ptr:=@emptydl[0]
16900     01 00 00 FF 
16904     19 E4 05 F1 | 	add	objptr, ##537
16908     F2 66 02 F6 | 	mov	muldivb_, objptr
1690c     FD E5 85 F1 | 	sub	objptr, #509
16910     F2 66 62 FC | 	wrlong	muldivb_, objptr
16914                 | ' 
16914                 | ' if cog>0 
16914     10 E4 05 F1 | 	add	objptr, #16
16918     F2 66 02 FB | 	rdlong	muldivb_, objptr
1691c     2C E4 85 F1 | 	sub	objptr, #44
16920     01 66 56 F2 | 	cmps	muldivb_, #1 wc
16924                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16924     01 12 06 36 |  if_ae	mov	arg01, #1
16928     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1692c                 | ' xres:=1024
1692c     01 00 00 FF 
16930     22 E4 05 F1 | 	add	objptr, ##546
16934     02 00 80 FF 
16938     F2 00 68 FC | 	wrlong	##1024, objptr
1693c                 | ' yres:=576  
1693c     04 E4 05 F1 | 	add	objptr, #4
16940     01 00 80 FF 
16944     F2 80 68 FC | 	wrlong	##576, objptr
16948                 | ' ppl:=(timings[3])
16948     10 00 00 FF 
1694c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16950     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16954     51 E5 85 F1 | 	sub	objptr, #337
16958     F2 66 62 FC | 	wrlong	muldivb_, objptr
1695c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1695c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16960     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16964     01 1E 66 F0 | 	shl	local01, #1
16968     80 E4 85 F1 | 	sub	objptr, #128
1696c     F2 1E 62 FC | 	wrlong	local01, objptr
16970                 | ' cpl1:=cpl '' todo remove
16970     04 E4 05 F1 | 	add	objptr, #4
16974     F2 1E 62 FC | 	wrlong	local01, objptr
16978                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
16978     02 00 00 FF 
1697c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16980     41 E4 85 F1 | 	sub	objptr, #65
16984     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16988                 | ' repeat i from 0 to 3
16988     00 20 06 F6 | 	mov	local02, #0
1698c     02 00 00 FF 
16990     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16994     08 E4 05 F1 | 	add	objptr, #8
16998     97 20 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
1699c                 | LR__1760
1699c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1699c     10 1F 02 F6 | 	mov	local01, local02
169a0     02 1E 66 F0 | 	shl	local01, #2
169a4     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
169a8     F2 66 02 FB | 	rdlong	muldivb_, objptr
169ac     11 66 66 F0 | 	shl	muldivb_, #17
169b0     0F 1F 02 FB | 	rdlong	local01, local01
169b4     33 1F 02 F1 | 	add	local01, muldivb_
169b8     80 40 38 FF 
169bc     00 1E 06 F1 | 	add	local01, ##1887502336
169c0     10 67 02 F6 | 	mov	muldivb_, local02
169c4     02 66 66 F0 | 	shl	muldivb_, #2
169c8     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
169cc     33 1F 62 FC | 	wrlong	local01, muldivb_
169d0     01 20 06 F1 | 	add	local02, #1
169d4     04 20 56 F2 | 	cmps	local02, #4 wc
169d8     C0 FF 9F CD |  if_b	jmp	#LR__1760
169dc                 | LR__1761
169dc     20 E4 85 F1 | 	sub	objptr, #32
169e0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
169e0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
169e4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
169e8     14 1E 66 FC | 	wrlong	local01, #20
169ec                 | ' hubset(timings[10])
169ec     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
169f0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
169f4     10 00 00 FF 
169f8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
169fc     00 12 62 FD | 	hubset	arg01
16a00                 | ' waitms(1)                                                   	' wait for stabilization
16a00     01 12 06 F6 | 	mov	arg01, #1
16a04     C0 24 B0 FD | 	call	#__system___waitms
16a08     10 00 00 FF 
16a0c     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16a10     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16a14     5D E4 05 F1 | 	add	objptr, #93
16a18     F2 20 62 FC | 	wrlong	local02, objptr
16a1c     10 1F 52 F6 | 	abs	local01, local02 wc
16a20     04 1E 46 F0 | 	shr	local01, #4
16a24     0F 1F 82 F6 | 	negc	local01, local01
16a28     9C E4 05 F1 | 	add	objptr, #156
16a2c     F2 1E 62 FC | 	wrlong	local01, objptr
16a30     A4 E4 85 F1 | 	sub	objptr, #164
16a34     F2 20 02 FB | 	rdlong	local02, objptr
16a38     08 E4 05 F1 | 	add	objptr, #8
16a3c     F2 1E 02 FB | 	rdlong	local01, objptr
16a40     0F 21 02 FD | 	qmul	local02, local01
16a44                 | ' lines:=timings[11]
16a44                 | ' t_lines:=lines/16
16a44                 | ' buflen:=cpl*lines						' framebuffer length in longs
16a44     29 E4 85 F1 | 	sub	objptr, #41
16a48                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
16a48     19 1E C6 F9 | 	decod	local01, #25
16a4c                 | ' mode_ptr:=@timings						' set pointers to timings
16a4c     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16a50                 | ' graphmode:=1024+512+192+48							' det global variable
16a50                 | ' makedl(graphmode)							' make a DL for the mode
16a50     03 00 00 FF 
16a54     F0 12 06 F6 | 	mov	arg01, ##1776
16a58     18 20 62 FD | 	getqx	local02
16a5c     F2 20 62 FC | 	wrlong	local02, objptr
16a60     34 E4 85 F1 | 	sub	objptr, #52
16a64     02 20 66 F0 | 	shl	local02, #2
16a68     10 1F 82 F1 | 	sub	local01, local02
16a6c     F2 1E 62 FC | 	wrlong	local01, objptr
16a70     14 E4 05 F1 | 	add	objptr, #20
16a74     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
16a78     79 E4 05 F1 | 	add	objptr, #121
16a7c     03 00 80 FF 
16a80     F2 E0 69 FC | 	wrlong	##1776, objptr
16a84     8D E4 85 F1 | 	sub	objptr, #141
16a88     10 00 00 FF 
16a8c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16a90     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16a94                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16a94     F2 1E 02 FB | 	rdlong	local01, objptr
16a98     D9 E4 05 F1 | 	add	objptr, #217
16a9c     F2 1E 62 FC | 	wrlong	local01, objptr
16aa0                 | ' s_font_ptr:=font_ptr
16aa0     D5 E4 85 F1 | 	sub	objptr, #213
16aa4     F2 1E 02 FB | 	rdlong	local01, objptr
16aa8     D9 E4 05 F1 | 	add	objptr, #217
16aac     F2 1E 62 FC | 	wrlong	local01, objptr
16ab0                 | ' s_lines:=lines
16ab0     80 E4 85 F1 | 	sub	objptr, #128
16ab4     F2 1E 02 FB | 	rdlong	local01, objptr
16ab8     84 E4 05 F1 | 	add	objptr, #132
16abc     F2 1E 62 FC | 	wrlong	local01, objptr
16ac0                 | ' s_buflen:=buflen
16ac0     AD E4 85 F1 | 	sub	objptr, #173
16ac4     F2 1E 02 FB | 	rdlong	local01, objptr
16ac8     B5 E4 05 F1 | 	add	objptr, #181
16acc     F2 1E 62 FC | 	wrlong	local01, objptr
16ad0                 | ' s_cpl:=cpl
16ad0     94 E4 85 F1 | 	sub	objptr, #148
16ad4     F2 1E 02 FB | 	rdlong	local01, objptr
16ad8     90 E4 05 F1 | 	add	objptr, #144
16adc     F2 1E 62 FC | 	wrlong	local01, objptr
16ae0                 | ' s_cpl1:=cpl
16ae0     90 E4 85 F1 | 	sub	objptr, #144
16ae4     F2 1E 02 FB | 	rdlong	local01, objptr
16ae8     98 E4 05 F1 | 	add	objptr, #152
16aec     F2 1E 62 FC | 	wrlong	local01, objptr
16af0                 | ' st_lines:=t_lines
16af0     0C E4 05 F1 | 	add	objptr, #12
16af4     F2 1E 02 FB | 	rdlong	local01, objptr
16af8     04 E4 05 F1 | 	add	objptr, #4
16afc     F2 1E 62 FC | 	wrlong	local01, objptr
16b00                 | ' ppl:=ppl/xzoom  
16b00     28 E4 85 F1 | 	sub	objptr, #40
16b04     F2 64 02 FB | 	rdlong	muldiva_, objptr
16b08     2C E4 05 F1 | 	add	objptr, #44
16b0c     F2 66 02 FB | 	rdlong	muldivb_, objptr
16b10     01 E5 85 F1 | 	sub	objptr, #257
16b14     BA 00 A0 FD | 	call	#divide_
16b18     D5 E4 05 F1 | 	add	objptr, #213
16b1c     F2 66 62 FC | 	wrlong	muldivb_, objptr
16b20                 | ' s_ppl:=ppl
16b20     1C E4 05 F1 | 	add	objptr, #28
16b24     F2 66 62 FC | 	wrlong	muldivb_, objptr
16b28     F1 E4 85 F1 | 	sub	objptr, #241
16b2c                 | ' waitms(20)							' wait 
16b2c     14 12 06 F6 | 	mov	arg01, #20
16b30     94 23 B0 FD | 	call	#__system___waitms
16b34     A7 F0 03 F6 | 	mov	ptra, fp
16b38     B2 00 A0 FD | 	call	#popregs_
16b3c                 | _hg010b_spin2_setmode_ret
16b3c     2D 00 64 FD | 	ret
16b40                 | 
16b40                 | ' 
16b40                 | ' 
16b40                 | ' '****************************************************************************************************************
16b40                 | ' '                                                                                                             	*
16b40                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16b40                 | ' '                                                                                                             	*
16b40                 | ' '****************************************************************************************************************
16b40                 | ' 
16b40                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16b40                 | _hg010b_spin2_makedl
16b40                 | ' 
16b40                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16b40                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16b40                 | ' repeat i from 0 to 11                                                           ' clear DL
16b40     00 00 06 F6 | 	mov	_var01, #0
16b44     E9 E5 05 F1 | 	add	objptr, #489
16b48     97 0E 48 FB | 	callpa	#(@LR__1771-@LR__1770)>>2,fcache_load_ptr_
16b4c                 | LR__1770
16b4c                 | '   displaylist[i]:=0 
16b4c     00 03 02 F6 | 	mov	_var02, _var01
16b50     02 02 66 F0 | 	shl	_var02, #2
16b54     F2 02 02 F1 | 	add	_var02, objptr
16b58     01 01 68 FC | 	wrlong	#0, _var02
16b5c     01 00 06 F1 | 	add	_var01, #1
16b60     0C 00 56 F2 | 	cmps	_var01, #12 wc
16b64     E4 FF 9F CD |  if_b	jmp	#LR__1770
16b68                 | LR__1771
16b68                 | '                         ' 
16b68                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
16b68     8C E5 85 F1 | 	sub	objptr, #396
16b6c     F2 02 02 FB | 	rdlong	_var02, objptr
16b70     14 02 66 F0 | 	shl	_var02, #20
16b74     01 02 06 F1 | 	add	_var02, #1
16b78     04 E4 85 F1 | 	sub	objptr, #4
16b7c     F2 00 02 FB | 	rdlong	_var01, objptr
16b80     02 00 66 F0 | 	shl	_var01, #2
16b84     04 00 66 F0 | 	shl	_var01, #4
16b88     00 03 02 F1 | 	add	_var02, _var01
16b8c     90 E5 05 F1 | 	add	objptr, #400
16b90     F2 02 62 FC | 	wrlong	_var02, objptr
16b94     E9 E5 85 F1 | 	sub	objptr, #489
16b98                 | ' displaylist[1]:=buf_ptr<<4+%10  
16b98     F2 02 02 FB | 	rdlong	_var02, objptr
16b9c     04 02 66 F0 | 	shl	_var02, #4
16ba0     02 02 06 F1 | 	add	_var02, #2
16ba4     ED E5 05 F1 | 	add	objptr, #493
16ba8     F2 02 62 FC | 	wrlong	_var02, objptr
16bac                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
16bac     04 E4 85 F1 | 	sub	objptr, #4
16bb0     F2 02 02 F6 | 	mov	_var02, objptr
16bb4     CD E5 85 F1 | 	sub	objptr, #461
16bb8     F2 02 62 FC | 	wrlong	_var02, objptr
16bbc     1C E4 85 F1 | 	sub	objptr, #28
16bc0                 | _hg010b_spin2_makedl_ret
16bc0     2D 00 64 FD | 	ret
16bc4                 | 
16bc4                 | ' 
16bc4                 | ' 
16bc4                 | ' '****************************************************************************************************************
16bc4                 | ' '                                                                        					*
16bc4                 | ' '  Graphic primitives                                                    					*
16bc4                 | ' '                                                                        					*
16bc4                 | ' '****************************************************************************************************************
16bc4                 | ' 
16bc4                 | ' pub setspriteptr(num,ptr)
16bc4                 | _hg010b_spin2_setspriteptr
16bc4                 | ' long[@spr1ptr+12*num]:=ptr
16bc4     0D E5 05 F1 | 	add	objptr, #269
16bc8     F2 00 02 F6 | 	mov	_var01, objptr
16bcc     09 03 02 F6 | 	mov	_var02, arg01
16bd0     01 02 66 F0 | 	shl	_var02, #1
16bd4     09 03 02 F1 | 	add	_var02, arg01
16bd8     02 02 66 F0 | 	shl	_var02, #2
16bdc     01 01 02 F1 | 	add	_var01, _var02
16be0     00 15 62 FC | 	wrlong	arg02, _var01
16be4     0D E5 85 F1 | 	sub	objptr, #269
16be8                 | _hg010b_spin2_setspriteptr_ret
16be8     2D 00 64 FD | 	ret
16bec                 | 
16bec                 | ' 
16bec                 | ' pub setspritepos(num,x,y)
16bec                 | _hg010b_spin2_setspritepos
16bec                 | ' word[@spr1ptr+12*num+4]:=x
16bec     0D E5 05 F1 | 	add	objptr, #269
16bf0     F2 00 02 F6 | 	mov	_var01, objptr
16bf4     09 03 02 F6 | 	mov	_var02, arg01
16bf8     01 02 66 F0 | 	shl	_var02, #1
16bfc     09 03 02 F1 | 	add	_var02, arg01
16c00     02 02 66 F0 | 	shl	_var02, #2
16c04     01 01 02 F1 | 	add	_var01, _var02
16c08     04 00 06 F1 | 	add	_var01, #4
16c0c     00 15 52 FC | 	wrword	arg02, _var01
16c10                 | ' word[@spr1ptr+12*num+6]:=y
16c10     F2 00 02 F6 | 	mov	_var01, objptr
16c14     09 03 02 F6 | 	mov	_var02, arg01
16c18     01 02 66 F0 | 	shl	_var02, #1
16c1c     09 03 02 F1 | 	add	_var02, arg01
16c20     02 02 66 F0 | 	shl	_var02, #2
16c24     01 01 02 F1 | 	add	_var01, _var02
16c28     06 00 06 F1 | 	add	_var01, #6
16c2c     00 17 52 FC | 	wrword	arg03, _var01
16c30     0D E5 85 F1 | 	sub	objptr, #269
16c34                 | _hg010b_spin2_setspritepos_ret
16c34     2D 00 64 FD | 	ret
16c38                 | 
16c38                 | ' 
16c38                 | ' pub setspritesize(num,w,h)
16c38                 | _hg010b_spin2_setspritesize
16c38                 | ' word[@spr1ptr+12*num+8]:=w
16c38     0D E5 05 F1 | 	add	objptr, #269
16c3c     F2 00 02 F6 | 	mov	_var01, objptr
16c40     09 03 02 F6 | 	mov	_var02, arg01
16c44     01 02 66 F0 | 	shl	_var02, #1
16c48     09 03 02 F1 | 	add	_var02, arg01
16c4c     02 02 66 F0 | 	shl	_var02, #2
16c50     01 01 02 F1 | 	add	_var01, _var02
16c54     08 00 06 F1 | 	add	_var01, #8
16c58     00 15 52 FC | 	wrword	arg02, _var01
16c5c                 | ' word[@spr1ptr+12*num+10]:=h
16c5c     F2 00 02 F6 | 	mov	_var01, objptr
16c60     09 03 02 F6 | 	mov	_var02, arg01
16c64     01 02 66 F0 | 	shl	_var02, #1
16c68     09 03 02 F1 | 	add	_var02, arg01
16c6c     02 02 66 F0 | 	shl	_var02, #2
16c70     01 01 02 F1 | 	add	_var01, _var02
16c74     0A 00 06 F1 | 	add	_var01, #10
16c78     00 17 52 FC | 	wrword	arg03, _var01
16c7c     0D E5 85 F1 | 	sub	objptr, #269
16c80                 | _hg010b_spin2_setspritesize_ret
16c80     2D 00 64 FD | 	ret
16c84                 | 
16c84                 | ' 
16c84                 | ' 
16c84                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16c84                 | ' 
16c84                 | ' 
16c84                 | ' pub putpixel(x,y,c)
16c84                 | _hg010b_spin2_putpixel
16c84     04 4A 05 F6 | 	mov	COUNT_, #4
16c88     A8 00 A0 FD | 	call	#pushregs_
16c8c     09 1F 02 F6 | 	mov	local01, arg01
16c90                 | ' 
16c90                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16c90     00 20 06 F6 | 	mov	local02, #0
16c94     00 1E 56 F2 | 	cmps	local01, #0 wc
16c98     01 20 66 36 |  if_ae	neg	local02, #1
16c9c     E5 E4 05 F1 | 	add	objptr, #229
16ca0     F2 1A 02 FB | 	rdlong	arg05, objptr
16ca4     02 1A 66 F0 | 	shl	arg05, #2
16ca8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
16cac     11 23 A2 F1 | 	subx	local03, local03
16cb0     11 21 02 F5 | 	and	local02, local03
16cb4     00 22 06 F6 | 	mov	local03, #0
16cb8     00 14 56 F2 | 	cmps	arg02, #0 wc
16cbc     01 22 66 36 |  if_ae	neg	local03, #1
16cc0     11 21 02 F5 | 	and	local02, local03
16cc4     04 E4 85 F1 | 	sub	objptr, #4
16cc8     F2 22 02 FB | 	rdlong	local03, objptr
16ccc     E1 E4 85 F1 | 	sub	objptr, #225
16cd0     11 15 52 F2 | 	cmps	arg02, local03 wc
16cd4     12 25 A2 F1 | 	subx	local04, local04
16cd8     12 21 CA F7 | 	test	local02, local04 wz
16cdc     48 00 90 AD |  if_e	jmp	#LR__1780
16ce0     D9 E4 05 F1 | 	add	objptr, #217
16ce4     F2 12 02 FB | 	rdlong	arg01, objptr
16ce8     14 E4 05 F1 | 	add	objptr, #20
16cec     F2 24 02 FB | 	rdlong	local04, objptr
16cf0     02 24 66 F0 | 	shl	local04, #2
16cf4     0A 25 02 FD | 	qmul	local04, arg02
16cf8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16cf8     0B 15 02 F6 | 	mov	arg02, arg03
16cfc     01 16 06 F6 | 	mov	arg03, #1
16d00     00 18 06 F6 | 	mov	arg04, #0
16d04     01 1A 06 F6 | 	mov	arg05, #1
16d08     0A 00 00 FF 
16d0c     D3 E5 05 F1 | 	add	objptr, ##5587
16d10     18 24 62 FD | 	getqx	local04
16d14     0F 25 02 F1 | 	add	local04, local01
16d18     12 13 02 F1 | 	add	arg01, local04
16d1c     FC 14 B0 FD | 	call	#_psram_spin2_fill
16d20     0B 00 00 FF 
16d24     C0 E4 85 F1 | 	sub	objptr, ##5824
16d28                 | LR__1780
16d28     A7 F0 03 F6 | 	mov	ptra, fp
16d2c     B2 00 A0 FD | 	call	#popregs_
16d30                 | _hg010b_spin2_putpixel_ret
16d30     2D 00 64 FD | 	ret
16d34                 | 
16d34                 | ' 
16d34                 | ' pub putpixel2(x,y,c)
16d34                 | _hg010b_spin2_putpixel2
16d34     02 4A 05 F6 | 	mov	COUNT_, #2
16d38     A8 00 A0 FD | 	call	#pushregs_
16d3c     D9 E4 05 F1 | 	add	objptr, #217
16d40     F2 1E 02 FB | 	rdlong	local01, objptr
16d44     14 E4 05 F1 | 	add	objptr, #20
16d48     F2 1A 02 FB | 	rdlong	arg05, objptr
16d4c     02 1A 66 F0 | 	shl	arg05, #2
16d50     0A 1B 02 FD | 	qmul	arg05, arg02
16d54                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16d54     0B 15 02 F6 | 	mov	arg02, arg03
16d58     01 16 06 F6 | 	mov	arg03, #1
16d5c     00 18 06 F6 | 	mov	arg04, #0
16d60     01 1A 06 F6 | 	mov	arg05, #1
16d64     0A 00 00 FF 
16d68     D3 E5 05 F1 | 	add	objptr, ##5587
16d6c     18 20 62 FD | 	getqx	local02
16d70     09 21 02 F1 | 	add	local02, arg01
16d74     10 1F 02 F1 | 	add	local01, local02
16d78     0F 13 02 F6 | 	mov	arg01, local01
16d7c     9C 14 B0 FD | 	call	#_psram_spin2_fill
16d80     0B 00 00 FF 
16d84     C0 E4 85 F1 | 	sub	objptr, ##5824
16d88     A7 F0 03 F6 | 	mov	ptra, fp
16d8c     B2 00 A0 FD | 	call	#popregs_
16d90                 | _hg010b_spin2_putpixel2_ret
16d90     2D 00 64 FD | 	ret
16d94                 | 
16d94                 | ' 
16d94                 | ' pub getpixel2(x,y): c 
16d94                 | _hg010b_spin2_getpixel2
16d94     02 4A 05 F6 | 	mov	COUNT_, #2
16d98     A8 00 A0 FD | 	call	#pushregs_
16d9c     0C F0 07 F1 | 	add	ptra, #12
16da0     04 4E 05 F1 | 	add	fp, #4
16da4     A7 12 62 FC | 	wrlong	arg01, fp
16da8     04 4E 05 F1 | 	add	fp, #4
16dac     A7 14 62 FC | 	wrlong	arg02, fp
16db0     08 4E 85 F1 | 	sub	fp, #8
16db4     A7 00 68 FC | 	wrlong	#0, fp
16db8     A7 12 02 F6 | 	mov	arg01, fp
16dbc     D9 E4 05 F1 | 	add	objptr, #217
16dc0     F2 14 02 FB | 	rdlong	arg02, objptr
16dc4     14 E4 05 F1 | 	add	objptr, #20
16dc8     F2 16 02 FB | 	rdlong	arg03, objptr
16dcc     02 16 66 F0 | 	shl	arg03, #2
16dd0     08 4E 05 F1 | 	add	fp, #8
16dd4     A7 FA 01 FB | 	rdlong	result1, fp
16dd8     FD 16 02 FD | 	qmul	arg03, result1
16ddc                 | ' 
16ddc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16ddc     04 4E 85 F1 | 	sub	fp, #4
16de0     A7 1E 02 FB | 	rdlong	local01, fp
16de4     04 4E 85 F1 | 	sub	fp, #4
16de8     01 16 06 F6 | 	mov	arg03, #1
16dec     0A 00 00 FF 
16df0     D3 E5 05 F1 | 	add	objptr, ##5587
16df4     18 20 62 FD | 	getqx	local02
16df8     0F 21 02 F1 | 	add	local02, local01
16dfc     10 15 02 F1 | 	add	arg02, local02
16e00     E0 12 B0 FD | 	call	#_psram_spin2_read1
16e04     0B 00 00 FF 
16e08     C0 E4 85 F1 | 	sub	objptr, ##5824
16e0c                 | ' return c
16e0c     A7 FA 01 FB | 	rdlong	result1, fp
16e10     A7 F0 03 F6 | 	mov	ptra, fp
16e14     B2 00 A0 FD | 	call	#popregs_
16e18                 | _hg010b_spin2_getpixel2_ret
16e18     2D 00 64 FD | 	ret
16e1c                 | 
16e1c                 | '   
16e1c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16e1c                 | ' 
16e1c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16e1c                 | _hg010b_spin2_fastline
16e1c     02 4A 05 F6 | 	mov	COUNT_, #2
16e20     A8 00 A0 FD | 	call	#pushregs_
16e24     09 1F 02 F6 | 	mov	local01, arg01
16e28     0A 21 02 F6 | 	mov	local02, arg02
16e2c                 | ' 
16e2c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16e2c     00 16 56 F2 | 	cmps	arg03, #0 wc
16e30     F4 00 90 CD |  if_b	jmp	#LR__1790
16e34     01 00 00 FF 
16e38     26 E4 05 F1 | 	add	objptr, ##550
16e3c     F2 1A 02 FB | 	rdlong	arg05, objptr
16e40     01 00 00 FF 
16e44     26 E4 85 F1 | 	sub	objptr, ##550
16e48     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16e4c     D8 00 90 3D |  if_ae	jmp	#LR__1790
16e50     00 1E 56 F2 | 	cmps	local01, #0 wc
16e54     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16e58     CC 00 90 CD |  if_b	jmp	#LR__1790
16e5c     01 00 00 FF 
16e60     22 E4 05 F1 | 	add	objptr, ##546
16e64     F2 1A 02 FB | 	rdlong	arg05, objptr
16e68     01 00 00 FF 
16e6c     22 E4 85 F1 | 	sub	objptr, ##546
16e70     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
16e74     01 00 00 1F 
16e78     22 E4 05 11 |  if_a	add	objptr, ##546
16e7c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
16e80     01 00 00 1F 
16e84     22 E4 85 11 |  if_a	sub	objptr, ##546
16e88     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
16e8c                 | '   return
16e8c     98 00 90 1D |  if_a	jmp	#LR__1790
16e90     10 1F 5A F2 | 	cmps	local01, local02 wcz
16e94     0F 1B 02 16 |  if_a	mov	arg05, local01
16e98     10 1F 02 16 |  if_a	mov	local01, local02
16e9c     0D 21 02 16 |  if_a	mov	local02, arg05
16ea0     00 1E 56 F2 | 	cmps	local01, #0 wc
16ea4     00 1E 06 C6 |  if_b	mov	local01, #0
16ea8     01 00 00 FF 
16eac     22 E4 05 F1 | 	add	objptr, ##546
16eb0     F2 1A 02 FB | 	rdlong	arg05, objptr
16eb4     01 00 00 FF 
16eb8     22 E4 85 F1 | 	sub	objptr, ##546
16ebc     0D 21 52 F2 | 	cmps	local02, arg05 wc
16ec0     01 00 00 3F 
16ec4     22 E4 05 31 |  if_ae	add	objptr, ##546
16ec8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
16ecc     01 00 00 3F 
16ed0     22 E4 85 31 |  if_ae	sub	objptr, ##546
16ed4     D9 E4 05 F1 | 	add	objptr, #217
16ed8     F2 12 02 FB | 	rdlong	arg01, objptr
16edc     14 E4 05 F1 | 	add	objptr, #20
16ee0     F2 1A 02 FB | 	rdlong	arg05, objptr
16ee4     02 1A 66 F0 | 	shl	arg05, #2
16ee8     0B 1B 02 FD | 	qmul	arg05, arg03
16eec                 | ' if x1>x2
16eec                 | '   x1,x2:=x2,x1
16eec                 | ' if x1<0 
16eec                 | '   x1:=0
16eec                 | ' if x2>=xres
16eec                 | '   x2:=xres-1  
16eec     01 20 86 31 |  if_ae	sub	local02, #1
16ef0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
16ef0     01 16 06 F6 | 	mov	arg03, #1
16ef4     10 17 02 F1 | 	add	arg03, local02
16ef8     0F 17 82 F1 | 	sub	arg03, local01
16efc     0C 15 02 F6 | 	mov	arg02, arg04
16f00     00 18 06 F6 | 	mov	arg04, #0
16f04     01 1A 06 F6 | 	mov	arg05, #1
16f08     0A 00 00 FF 
16f0c     D3 E5 05 F1 | 	add	objptr, ##5587
16f10     18 20 62 FD | 	getqx	local02
16f14     0F 21 02 F1 | 	add	local02, local01
16f18     10 13 02 F1 | 	add	arg01, local02
16f1c     FC 12 B0 FD | 	call	#_psram_spin2_fill
16f20     0B 00 00 FF 
16f24     C0 E4 85 F1 | 	sub	objptr, ##5824
16f28                 | LR__1790
16f28     A7 F0 03 F6 | 	mov	ptra, fp
16f2c     B2 00 A0 FD | 	call	#popregs_
16f30                 | _hg010b_spin2_fastline_ret
16f30     2D 00 64 FD | 	ret
16f34                 | 
16f34                 | ' 
16f34                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
16f34                 | _hg010b_spin2_draw
16f34     0E 4A 05 F6 | 	mov	COUNT_, #14
16f38     A8 00 A0 FD | 	call	#pushregs_
16f3c     09 1F 02 F6 | 	mov	local01, arg01
16f40     0A 21 02 F6 | 	mov	local02, arg02
16f44     0B 23 02 F6 | 	mov	local03, arg03
16f48     0C 25 02 F6 | 	mov	local04, arg04
16f4c     0D 27 02 F6 | 	mov	local05, arg05
16f50                 | ' 
16f50                 | ' if (y1==y2)
16f50     12 21 0A F2 | 	cmp	local02, local04 wz
16f54     18 00 90 5D |  if_ne	jmp	#LR__1800
16f58                 | '   fastline(x1,x2,y1,c)
16f58     0F 13 02 F6 | 	mov	arg01, local01
16f5c     11 15 02 F6 | 	mov	arg02, local03
16f60     10 17 02 F6 | 	mov	arg03, local02
16f64     13 19 02 F6 | 	mov	arg04, local05
16f68     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
16f6c     F8 00 90 FD | 	jmp	#LR__1806
16f70                 | LR__1800
16f70                 | ' else  
16f70                 | '   x:=x1
16f70     0F 29 02 F6 | 	mov	local06, local01
16f74                 | '   y:=y1
16f74     10 2B 02 F6 | 	mov	local07, local02
16f78                 | ' 
16f78                 | '   if (x1<x2) 
16f78     11 1F 52 F2 | 	cmps	local01, local03 wc
16f7c                 | '     xi:=1
16f7c     01 2C 06 C6 |  if_b	mov	local08, #1
16f80                 | '     dx:=x2-x1
16f80     11 2F 02 C6 |  if_b	mov	local09, local03
16f84     0F 2F 82 C1 |  if_b	sub	local09, local01
16f88                 | '   else
16f88                 | '     xi:=-1
16f88     01 2C 66 36 |  if_ae	neg	local08, #1
16f8c                 | '     dx:=x1-x2
16f8c     11 1F 82 31 |  if_ae	sub	local01, local03
16f90     0F 2F 02 36 |  if_ae	mov	local09, local01
16f94                 | '   
16f94                 | '   if (y1<y2) 
16f94     12 21 52 F2 | 	cmps	local02, local04 wc
16f98                 | '     yi:=1
16f98     01 30 06 C6 |  if_b	mov	local10, #1
16f9c                 | '     dy:=y2-y1
16f9c     12 33 02 C6 |  if_b	mov	local11, local04
16fa0     10 33 82 C1 |  if_b	sub	local11, local02
16fa4                 | '   else
16fa4                 | '     yi:=-1
16fa4     01 30 66 36 |  if_ae	neg	local10, #1
16fa8                 | '     dy:=y1-y2
16fa8     12 21 82 31 |  if_ae	sub	local02, local04
16fac     10 33 02 36 |  if_ae	mov	local11, local02
16fb0                 | ' 
16fb0                 | '   putpixel(x,y,c)
16fb0     13 17 02 F6 | 	mov	arg03, local05
16fb4     14 13 02 F6 | 	mov	arg01, local06
16fb8     15 15 02 F6 | 	mov	arg02, local07
16fbc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
16fc0                 | ' 
16fc0                 | '   if (dx>dy)
16fc0     19 2F 5A F2 | 	cmps	local09, local11 wcz
16fc4     50 00 90 ED |  if_be	jmp	#LR__1802
16fc8                 | '     ai:=(dy-dx)*2
16fc8     19 35 02 F6 | 	mov	local12, local11
16fcc     17 35 82 F1 | 	sub	local12, local09
16fd0     01 34 66 F0 | 	shl	local12, #1
16fd4                 | '     bi:=dy*2
16fd4     01 32 66 F0 | 	shl	local11, #1
16fd8     19 37 02 F6 | 	mov	local13, local11
16fdc                 | '     d:= bi-dx
16fdc     1B 39 02 F6 | 	mov	local14, local13
16fe0     17 39 82 F1 | 	sub	local14, local09
16fe4                 | '     repeat while (x<>x2) 
16fe4                 | LR__1801
16fe4     11 29 0A F2 | 	cmp	local06, local03 wz
16fe8     7C 00 90 AD |  if_e	jmp	#LR__1805
16fec                 | '       if (d>=0) 
16fec     00 38 56 F2 | 	cmps	local14, #0 wc
16ff0                 | '         x+=xi
16ff0     16 29 02 31 |  if_ae	add	local06, local08
16ff4                 | '         y+=yi
16ff4     18 2B 02 31 |  if_ae	add	local07, local10
16ff8                 | '         d+=ai
16ff8     1A 39 02 31 |  if_ae	add	local14, local12
16ffc                 | '       else
16ffc                 | '         d+=bi
16ffc     1B 39 02 C1 |  if_b	add	local14, local13
17000                 | '         x+=xi
17000     16 29 02 C1 |  if_b	add	local06, local08
17004                 | '       putpixel(x,y,c)
17004     14 13 02 F6 | 	mov	arg01, local06
17008     15 15 02 F6 | 	mov	arg02, local07
1700c     13 17 02 F6 | 	mov	arg03, local05
17010     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
17014     CC FF 9F FD | 	jmp	#LR__1801
17018                 | LR__1802
17018                 | '   else
17018                 | '     ai:=(dx-dy)*2
17018     17 35 02 F6 | 	mov	local12, local09
1701c     19 35 82 F1 | 	sub	local12, local11
17020     01 34 66 F0 | 	shl	local12, #1
17024                 | '     bi:=dx*2
17024     01 2E 66 F0 | 	shl	local09, #1
17028     17 37 02 F6 | 	mov	local13, local09
1702c                 | '     d:=bi-dy
1702c     1B 39 02 F6 | 	mov	local14, local13
17030     19 39 82 F1 | 	sub	local14, local11
17034                 | '     repeat while (y<>y2)
17034                 | LR__1803
17034     12 2B 0A F2 | 	cmp	local07, local04 wz
17038     2C 00 90 AD |  if_e	jmp	#LR__1804
1703c                 | '       if (d>=0)
1703c     00 38 56 F2 | 	cmps	local14, #0 wc
17040                 | '         x+=xi
17040     16 29 02 31 |  if_ae	add	local06, local08
17044                 | '         y+=yi
17044     18 2B 02 31 |  if_ae	add	local07, local10
17048                 | '         d+=ai
17048     1A 39 02 31 |  if_ae	add	local14, local12
1704c                 | '       else
1704c                 | '         d+=bi
1704c     1B 39 02 C1 |  if_b	add	local14, local13
17050                 | '         y+=yi
17050     18 2B 02 C1 |  if_b	add	local07, local10
17054                 | '       putpixel(x, y,c)
17054     14 13 02 F6 | 	mov	arg01, local06
17058     15 15 02 F6 | 	mov	arg02, local07
1705c     13 17 02 F6 | 	mov	arg03, local05
17060     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
17064     CC FF 9F FD | 	jmp	#LR__1803
17068                 | LR__1804
17068                 | LR__1805
17068                 | LR__1806
17068     A7 F0 03 F6 | 	mov	ptra, fp
1706c     B2 00 A0 FD | 	call	#popregs_
17070                 | _hg010b_spin2_draw_ret
17070     2D 00 64 FD | 	ret
17074                 | 
17074                 | '  
17074                 | ' pub fillpush(val) 
17074                 | _hg010b_spin2_fillpush
17074                 | ' fillstack[fillptr]:=val
17074     0B 00 00 FF 
17078     B6 E4 05 F1 | 	add	objptr, ##5814
1707c     F2 00 02 FB | 	rdlong	_var01, objptr
17080     02 00 66 F0 | 	shl	_var01, #2
17084     0A 00 00 FF 
17088     00 E4 85 F1 | 	sub	objptr, ##5120
1708c     F2 00 02 F1 | 	add	_var01, objptr
17090     00 13 62 FC | 	wrlong	arg01, _var01
17094                 | ' fillptr+=1   
17094     0A 00 00 FF 
17098     00 E4 05 F1 | 	add	objptr, ##5120
1709c     F2 00 02 FB | 	rdlong	_var01, objptr
170a0     01 00 06 F1 | 	add	_var01, #1
170a4     F2 00 62 FC | 	wrlong	_var01, objptr
170a8     0B 00 00 FF 
170ac     B6 E4 85 F1 | 	sub	objptr, ##5814
170b0                 | _hg010b_spin2_fillpush_ret
170b0     2D 00 64 FD | 	ret
170b4                 | 
170b4                 | ' 
170b4                 | '     
170b4                 | ' pub fillpop() : val
170b4                 | _hg010b_spin2_fillpop
170b4                 | ' 
170b4                 | ' fillptr-=1
170b4     0B 00 00 FF 
170b8     B6 E4 05 F1 | 	add	objptr, ##5814
170bc     F2 FA 01 FB | 	rdlong	result1, objptr
170c0     01 FA 85 F1 | 	sub	result1, #1
170c4     F2 FA 61 FC | 	wrlong	result1, objptr
170c8                 | ' if fillptr<0
170c8     0B 00 00 FF 
170cc     B6 E4 85 F1 | 	sub	objptr, ##5814
170d0     00 FA 55 F2 | 	cmps	result1, #0 wc
170d4                 | '   fillptr:=0
170d4     0B 00 00 CF 
170d8     B6 E4 05 C1 |  if_b	add	objptr, ##5814
170dc     F2 00 68 CC |  if_b	wrlong	#0, objptr
170e0     0B 00 00 CF 
170e4     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
170e8                 | '   val:=-12345
170e8     E7 FF 7F CF 
170ec     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
170f0     28 00 90 CD |  if_b	jmp	#LR__1810
170f4                 | ' else 
170f4                 | '   val:=fillstack[fillptr]
170f4     0B 00 00 FF 
170f8     B6 E4 05 F1 | 	add	objptr, ##5814
170fc     F2 00 02 FB | 	rdlong	_var01, objptr
17100     02 00 66 F0 | 	shl	_var01, #2
17104     0A 00 00 FF 
17108     00 E4 85 F1 | 	sub	objptr, ##5120
1710c     F2 00 02 F1 | 	add	_var01, objptr
17110     00 01 02 FB | 	rdlong	_var01, _var01
17114     01 00 00 FF 
17118     B6 E4 85 F1 | 	sub	objptr, ##694
1711c                 | LR__1810
1711c                 | ' return val
1711c     00 FB 01 F6 | 	mov	result1, _var01
17120                 | _hg010b_spin2_fillpop_ret
17120     2D 00 64 FD | 	ret
17124                 | 
17124                 | ' 
17124                 | '       
17124                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
17124                 | _hg010b_spin2_fill
17124     0B 4A 05 F6 | 	mov	COUNT_, #11
17128     A8 00 A0 FD | 	call	#pushregs_
1712c                 | ' 
1712c                 | ' newcolor:=newcolor & 255
1712c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
17130                 | ' oldcolor:=oldcolor & 255
17130     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
17134                 | ' 
17134                 | ' if (oldcolor == newcolor) 
17134     0F 21 0A F2 | 	cmp	local02, local01 wz
17138                 | '   return
17138     70 02 90 AD |  if_e	jmp	#LR__1829
1713c                 | ' 
1713c                 | ' fillptr:=0
1713c     0B 00 00 FF 
17140     B6 E4 05 F1 | 	add	objptr, ##5814
17144     F2 00 68 FC | 	wrlong	#0, objptr
17148                 | ' fillmax:=0
17148     04 E4 05 F1 | 	add	objptr, #4
1714c     F2 00 68 FC | 	wrlong	#0, objptr
17150     0B 00 00 FF 
17154     BA E4 85 F1 | 	sub	objptr, ##5818
17158                 | ' fillpush(x)
17158     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1715c                 | ' fillpush(y)
1715c     0A 13 02 F6 | 	mov	arg01, arg02
17160     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
17164                 | ' y:=fillpop()
17164     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
17168     FD 22 02 F6 | 	mov	local03, result1
1716c                 | ' x:=fillpop()
1716c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
17170     FD 24 02 F6 | 	mov	local04, result1
17174                 | ' 'pinhigh(38)
17174                 | ' repeat while (x>-1)       
17174                 | LR__1820
17174     00 24 56 F2 | 	cmps	local04, #0 wc
17178     30 02 90 CD |  if_b	jmp	#LR__1828
1717c                 | '  ' pintoggle(39)
1717c                 | '   x1 := x
1717c     12 27 02 F6 | 	mov	local05, local04
17180                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
17180                 | LR__1821
17180     00 28 06 F6 | 	mov	local06, #0
17184     00 2A 06 F6 | 	mov	local07, #0
17188     00 26 56 F2 | 	cmps	local05, #0 wc
1718c     01 2A 66 36 |  if_ae	neg	local07, #1
17190     00 2A 0E F2 | 	cmp	local07, #0 wz
17194     00 28 26 56 |  if_ne	not	local06, #0
17198     00 2C 06 F6 | 	mov	local08, #0
1719c     00 2E 06 F6 | 	mov	local09, #0
171a0     11 15 02 F6 | 	mov	arg02, local03
171a4     13 13 02 F6 | 	mov	arg01, local05
171a8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
171ac     10 FB 09 F2 | 	cmp	result1, local02 wz
171b0     00 2E 26 A6 |  if_e	not	local09, #0
171b4     00 2E 0E F2 | 	cmp	local09, #0 wz
171b8     00 2C 26 56 |  if_ne	not	local08, #0
171bc     16 29 CA F7 | 	test	local06, local08 wz
171c0                 | '     x1--
171c0     01 26 86 51 |  if_ne	sub	local05, #1
171c4     B8 FF 9F 5D |  if_ne	jmp	#LR__1821
171c8                 | '   x1++
171c8     01 26 06 F1 | 	add	local05, #1
171cc                 | '   spanabove := 0
171cc     00 30 06 F6 | 	mov	local10, #0
171d0                 | '   spanbelow := 0
171d0     00 32 06 F6 | 	mov	local11, #0
171d4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
171d4                 | LR__1822
171d4     00 28 06 F6 | 	mov	local06, #0
171d8     02 00 00 FF 
171dc     00 26 56 F2 | 	cmps	local05, ##1024 wc
171e0     00 28 26 C6 |  if_b	not	local06, #0
171e4     00 2C 06 F6 | 	mov	local08, #0
171e8     00 2E 06 F6 | 	mov	local09, #0
171ec     11 15 02 F6 | 	mov	arg02, local03
171f0     13 13 02 F6 | 	mov	arg01, local05
171f4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
171f8     10 FB 09 F2 | 	cmp	result1, local02 wz
171fc     00 2E 26 A6 |  if_e	not	local09, #0
17200     00 2E 0E F2 | 	cmp	local09, #0 wz
17204     00 2C 26 56 |  if_ne	not	local08, #0
17208     16 29 CA F7 | 	test	local06, local08 wz
1720c     88 01 90 AD |  if_e	jmp	#LR__1827
17210                 | '     putpixel2 (x1,y, newcolor & 255)
17210     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
17214     13 13 02 F6 | 	mov	arg01, local05
17218     11 15 02 F6 | 	mov	arg02, local03
1721c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
17220                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
17220     00 28 06 F6 | 	mov	local06, #0
17224     00 2A 06 F6 | 	mov	local07, #0
17228     00 30 0E F2 | 	cmp	local10, #0 wz
1722c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
17230     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
17234     00 2A 0E F2 | 	cmp	local07, #0 wz
17238     00 28 26 56 |  if_ne	not	local06, #0
1723c     00 2C 06 F6 | 	mov	local08, #0
17240     00 2E 06 F6 | 	mov	local09, #0
17244     11 15 02 F6 | 	mov	arg02, local03
17248     01 14 86 F1 | 	sub	arg02, #1
1724c     13 13 02 F6 | 	mov	arg01, local05
17250     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
17254     10 FB 09 F2 | 	cmp	result1, local02 wz
17258     00 2E 26 A6 |  if_e	not	local09, #0
1725c     00 2E 0E F2 | 	cmp	local09, #0 wz
17260     00 2C 26 56 |  if_ne	not	local08, #0
17264     16 29 CA F7 | 	test	local06, local08 wz
17268     1C 00 90 AD |  if_e	jmp	#LR__1823
1726c                 | '       fillpush(x1)
1726c     13 13 02 F6 | 	mov	arg01, local05
17270     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
17274                 | '       fillpush(y-1)
17274     11 13 02 F6 | 	mov	arg01, local03
17278     01 12 86 F1 | 	sub	arg01, #1
1727c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
17280                 | '       spanabove := 1 
17280     01 30 06 F6 | 	mov	local10, #1
17284     4C 00 90 FD | 	jmp	#LR__1824
17288                 | LR__1823
17288                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
17288     00 28 06 F6 | 	mov	local06, #0
1728c     00 2A 06 F6 | 	mov	local07, #0
17290     00 30 0E F2 | 	cmp	local10, #0 wz
17294     01 22 56 52 |  if_ne	cmps	local03, #1 wc
17298     01 2A 66 16 |  if_a	neg	local07, #1
1729c     00 2A 0E F2 | 	cmp	local07, #0 wz
172a0     00 28 26 56 |  if_ne	not	local06, #0
172a4     00 2C 06 F6 | 	mov	local08, #0
172a8     00 2E 06 F6 | 	mov	local09, #0
172ac     11 15 02 F6 | 	mov	arg02, local03
172b0     01 14 86 F1 | 	sub	arg02, #1
172b4     13 13 02 F6 | 	mov	arg01, local05
172b8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
172bc     10 FB 09 F2 | 	cmp	result1, local02 wz
172c0     00 2E 26 56 |  if_ne	not	local09, #0
172c4     00 2E 0E F2 | 	cmp	local09, #0 wz
172c8     00 2C 26 56 |  if_ne	not	local08, #0
172cc     16 29 CA F7 | 	test	local06, local08 wz
172d0                 | '       spanabove := 0 
172d0     00 30 06 56 |  if_ne	mov	local10, #0
172d4                 | LR__1824
172d4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
172d4     00 28 06 F6 | 	mov	local06, #0
172d8     00 2A 06 F6 | 	mov	local07, #0
172dc     00 32 0E F2 | 	cmp	local11, #0 wz
172e0     01 00 00 AF 
172e4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
172e8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
172ec     00 2A 0E F2 | 	cmp	local07, #0 wz
172f0     00 28 26 56 |  if_ne	not	local06, #0
172f4     00 2C 06 F6 | 	mov	local08, #0
172f8     00 2E 06 F6 | 	mov	local09, #0
172fc     11 15 02 F6 | 	mov	arg02, local03
17300     01 14 06 F1 | 	add	arg02, #1
17304     13 13 02 F6 | 	mov	arg01, local05
17308     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1730c     10 FB 09 F2 | 	cmp	result1, local02 wz
17310     00 2E 26 A6 |  if_e	not	local09, #0
17314     00 2E 0E F2 | 	cmp	local09, #0 wz
17318     00 2C 26 56 |  if_ne	not	local08, #0
1731c     16 29 CA F7 | 	test	local06, local08 wz
17320     1C 00 90 AD |  if_e	jmp	#LR__1825
17324                 | '       fillpush(x1)
17324     13 13 02 F6 | 	mov	arg01, local05
17328     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1732c                 | '       fillpush(y + 1)
1732c     11 13 02 F6 | 	mov	arg01, local03
17330     01 12 06 F1 | 	add	arg01, #1
17334     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
17338                 | '       spanBelow := 1
17338     01 32 06 F6 | 	mov	local11, #1
1733c     50 00 90 FD | 	jmp	#LR__1826
17340                 | LR__1825
17340                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
17340     00 28 06 F6 | 	mov	local06, #0
17344     00 2A 06 F6 | 	mov	local07, #0
17348     00 32 0E F2 | 	cmp	local11, #0 wz
1734c     01 00 00 5F 
17350     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17354     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
17358     00 2A 0E F2 | 	cmp	local07, #0 wz
1735c     00 28 26 56 |  if_ne	not	local06, #0
17360     00 2C 06 F6 | 	mov	local08, #0
17364     00 2E 06 F6 | 	mov	local09, #0
17368     11 15 02 F6 | 	mov	arg02, local03
1736c     01 14 06 F1 | 	add	arg02, #1
17370     13 13 02 F6 | 	mov	arg01, local05
17374     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
17378     10 FB 09 F2 | 	cmp	result1, local02 wz
1737c     00 2E 26 56 |  if_ne	not	local09, #0
17380     00 2E 0E F2 | 	cmp	local09, #0 wz
17384     00 2C 26 56 |  if_ne	not	local08, #0
17388     16 29 CA F7 | 	test	local06, local08 wz
1738c                 | '       spanbelow := 0
1738c     00 32 06 56 |  if_ne	mov	local11, #0
17390                 | LR__1826
17390                 | '     x1++
17390     01 26 06 F1 | 	add	local05, #1
17394     3C FE 9F FD | 	jmp	#LR__1822
17398                 | LR__1827
17398                 | '   y:=fillpop()
17398     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1739c     FD 22 02 F6 | 	mov	local03, result1
173a0                 | '   x:=fillpop()
173a0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
173a4     FD 24 02 F6 | 	mov	local04, result1
173a8     C8 FD 9F FD | 	jmp	#LR__1820
173ac                 | LR__1828
173ac                 | LR__1829
173ac     A7 F0 03 F6 | 	mov	ptra, fp
173b0     B2 00 A0 FD | 	call	#popregs_
173b4                 | _hg010b_spin2_fill_ret
173b4     2D 00 64 FD | 	ret
173b8                 | 
173b8                 | ' 'pinlow(38)    
173b8                 | ' 
173b8                 | ' '-- A filled circle -----------------------------------------------------
173b8                 | ' 
173b8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
173b8                 | _hg010b_spin2_fcircle
173b8     08 4A 05 F6 | 	mov	COUNT_, #8
173bc     A8 00 A0 FD | 	call	#pushregs_
173c0     0B 1F 02 F6 | 	mov	local01, arg03
173c4     FF FF 7F FF 
173c8     FE 1F 06 FD | 	qmul	local01, ##-2
173cc     09 21 02 F6 | 	mov	local02, arg01
173d0     0A 23 02 F6 | 	mov	local03, arg02
173d4     0C 25 02 F6 | 	mov	local04, arg04
173d8                 | ' 
173d8                 | ' d:=5-4*r
173d8     0F 19 02 F6 | 	mov	arg04, local01
173dc     02 18 66 F0 | 	shl	arg04, #2
173e0     05 26 06 F6 | 	mov	local05, #5
173e4     0C 27 82 F1 | 	sub	local05, arg04
173e8                 | ' x:=0
173e8     00 28 06 F6 | 	mov	local06, #0
173ec                 | ' y:=r
173ec                 | ' da:=(-2*r+5)*4
173ec                 | ' db:=3*4
173ec     0C 2A 06 F6 | 	mov	local07, #12
173f0                 | ' repeat while (x<=y) 
173f0     18 2C 62 FD | 	getqx	local08
173f4     05 2C 06 F1 | 	add	local08, #5
173f8     02 2C 66 F0 | 	shl	local08, #2
173fc                 | LR__1830
173fc     0F 29 5A F2 | 	cmps	local06, local01 wcz
17400     B4 00 90 1D |  if_a	jmp	#LR__1832
17404                 | '   fastline(x0-x,x0+x,y0-y,c)
17404     10 13 02 F6 | 	mov	arg01, local02
17408     14 13 82 F1 | 	sub	arg01, local06
1740c     10 15 02 F6 | 	mov	arg02, local02
17410     14 15 02 F1 | 	add	arg02, local06
17414     11 17 02 F6 | 	mov	arg03, local03
17418     0F 17 82 F1 | 	sub	arg03, local01
1741c     12 19 02 F6 | 	mov	arg04, local04
17420     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17424                 | '   fastline(x0-x,x0+x,y0+y,c)
17424     10 13 02 F6 | 	mov	arg01, local02
17428     14 13 82 F1 | 	sub	arg01, local06
1742c     10 15 02 F6 | 	mov	arg02, local02
17430     14 15 02 F1 | 	add	arg02, local06
17434     11 17 02 F6 | 	mov	arg03, local03
17438     0F 17 02 F1 | 	add	arg03, local01
1743c     12 19 02 F6 | 	mov	arg04, local04
17440     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17444                 | '   fastline(x0-y,x0+y,y0-x,c)
17444     10 13 02 F6 | 	mov	arg01, local02
17448     0F 13 82 F1 | 	sub	arg01, local01
1744c     10 15 02 F6 | 	mov	arg02, local02
17450     0F 15 02 F1 | 	add	arg02, local01
17454     11 17 02 F6 | 	mov	arg03, local03
17458     14 17 82 F1 | 	sub	arg03, local06
1745c     12 19 02 F6 | 	mov	arg04, local04
17460     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17464                 | '   fastline(x0-y,x0+y,y0+x,c)
17464     10 13 02 F6 | 	mov	arg01, local02
17468     0F 13 82 F1 | 	sub	arg01, local01
1746c     10 15 02 F6 | 	mov	arg02, local02
17470     0F 15 02 F1 | 	add	arg02, local01
17474     11 17 02 F6 | 	mov	arg03, local03
17478     14 17 02 F1 | 	add	arg03, local06
1747c     12 19 02 F6 | 	mov	arg04, local04
17480     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17484                 | '   if d>0 
17484     01 26 56 F2 | 	cmps	local05, #1 wc
17488     18 00 90 CD |  if_b	jmp	#LR__1831
1748c                 | '     d+=da
1748c     16 27 02 F1 | 	add	local05, local08
17490                 | '     y-=1
17490     01 1E 86 F1 | 	sub	local01, #1
17494                 | '     x+=1
17494     01 28 06 F1 | 	add	local06, #1
17498                 | '     da+=4*4
17498     10 2C 06 F1 | 	add	local08, #16
1749c                 | '     db+=2*4
1749c     08 2A 06 F1 | 	add	local07, #8
174a0     58 FF 9F FD | 	jmp	#LR__1830
174a4                 | LR__1831
174a4                 | '   else
174a4                 | '     d+=db
174a4     15 27 02 F1 | 	add	local05, local07
174a8                 | '     x+=1
174a8     01 28 06 F1 | 	add	local06, #1
174ac                 | '     da+=2*4
174ac     08 2C 06 F1 | 	add	local08, #8
174b0                 | '     db+=2*4
174b0     08 2A 06 F1 | 	add	local07, #8
174b4     44 FF 9F FD | 	jmp	#LR__1830
174b8                 | LR__1832
174b8     A7 F0 03 F6 | 	mov	ptra, fp
174bc     B2 00 A0 FD | 	call	#popregs_
174c0                 | _hg010b_spin2_fcircle_ret
174c0     2D 00 64 FD | 	ret
174c4                 | 
174c4                 | '  
174c4                 | ' '-- A circle ------------------------------------------------------------ 
174c4                 | '  
174c4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
174c4                 | _hg010b_spin2_circle
174c4     08 4A 05 F6 | 	mov	COUNT_, #8
174c8     A8 00 A0 FD | 	call	#pushregs_
174cc     0B 1F 02 F6 | 	mov	local01, arg03
174d0     FF FF 7F FF 
174d4     FE 1F 06 FD | 	qmul	local01, ##-2
174d8     09 21 02 F6 | 	mov	local02, arg01
174dc     0A 23 02 F6 | 	mov	local03, arg02
174e0     0C 25 02 F6 | 	mov	local04, arg04
174e4                 | ' 
174e4                 | '  
174e4                 | ' d:=5-4*r
174e4     0F 19 02 F6 | 	mov	arg04, local01
174e8     02 18 66 F0 | 	shl	arg04, #2
174ec     05 26 06 F6 | 	mov	local05, #5
174f0     0C 27 82 F1 | 	sub	local05, arg04
174f4                 | ' x:=0
174f4     00 28 06 F6 | 	mov	local06, #0
174f8                 | ' y:=r
174f8                 | ' da:=(-2*r+5)*4
174f8                 | ' db:=3*4
174f8     0C 2A 06 F6 | 	mov	local07, #12
174fc                 | ' repeat while (x<=y) 
174fc     18 2C 62 FD | 	getqx	local08
17500     05 2C 06 F1 | 	add	local08, #5
17504     02 2C 66 F0 | 	shl	local08, #2
17508                 | LR__1840
17508     0F 29 5A F2 | 	cmps	local06, local01 wcz
1750c     F4 00 90 1D |  if_a	jmp	#LR__1842
17510                 | '   putpixel(x0-x,y0-y,c)
17510     10 13 02 F6 | 	mov	arg01, local02
17514     14 13 82 F1 | 	sub	arg01, local06
17518     11 15 02 F6 | 	mov	arg02, local03
1751c     0F 15 82 F1 | 	sub	arg02, local01
17520     12 17 02 F6 | 	mov	arg03, local04
17524     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17528                 | '   putpixel(x0-x,y0+y,c)
17528     10 13 02 F6 | 	mov	arg01, local02
1752c     14 13 82 F1 | 	sub	arg01, local06
17530     11 15 02 F6 | 	mov	arg02, local03
17534     0F 15 02 F1 | 	add	arg02, local01
17538     12 17 02 F6 | 	mov	arg03, local04
1753c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17540                 | '   putpixel(x0+x,y0-y,c)
17540     10 13 02 F6 | 	mov	arg01, local02
17544     14 13 02 F1 | 	add	arg01, local06
17548     11 15 02 F6 | 	mov	arg02, local03
1754c     0F 15 82 F1 | 	sub	arg02, local01
17550     12 17 02 F6 | 	mov	arg03, local04
17554     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
17558                 | '   putpixel(x0+x,y0+y,c)
17558     10 13 02 F6 | 	mov	arg01, local02
1755c     14 13 02 F1 | 	add	arg01, local06
17560     11 15 02 F6 | 	mov	arg02, local03
17564     0F 15 02 F1 | 	add	arg02, local01
17568     12 17 02 F6 | 	mov	arg03, local04
1756c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17570                 | '   putpixel(x0-y,y0-x,c)
17570     10 13 02 F6 | 	mov	arg01, local02
17574     0F 13 82 F1 | 	sub	arg01, local01
17578     11 15 02 F6 | 	mov	arg02, local03
1757c     14 15 82 F1 | 	sub	arg02, local06
17580     12 17 02 F6 | 	mov	arg03, local04
17584     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
17588                 | '   putpixel(x0-y,y0+x,c)
17588     10 13 02 F6 | 	mov	arg01, local02
1758c     0F 13 82 F1 | 	sub	arg01, local01
17590     11 15 02 F6 | 	mov	arg02, local03
17594     14 15 02 F1 | 	add	arg02, local06
17598     12 17 02 F6 | 	mov	arg03, local04
1759c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
175a0                 | '   putpixel(x0+y,y0-x,c)
175a0     10 13 02 F6 | 	mov	arg01, local02
175a4     0F 13 02 F1 | 	add	arg01, local01
175a8     11 15 02 F6 | 	mov	arg02, local03
175ac     14 15 82 F1 | 	sub	arg02, local06
175b0     12 17 02 F6 | 	mov	arg03, local04
175b4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
175b8                 | '   putpixel(x0+y,y0+x,c)
175b8     10 13 02 F6 | 	mov	arg01, local02
175bc     0F 13 02 F1 | 	add	arg01, local01
175c0     11 15 02 F6 | 	mov	arg02, local03
175c4     14 15 02 F1 | 	add	arg02, local06
175c8     12 17 02 F6 | 	mov	arg03, local04
175cc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
175d0                 | '   if d>0 
175d0     01 26 56 F2 | 	cmps	local05, #1 wc
175d4     18 00 90 CD |  if_b	jmp	#LR__1841
175d8                 | '     d+=da
175d8     16 27 02 F1 | 	add	local05, local08
175dc                 | '     y-=1
175dc     01 1E 86 F1 | 	sub	local01, #1
175e0                 | '     x+=1
175e0     01 28 06 F1 | 	add	local06, #1
175e4                 | '     da+=4*4
175e4     10 2C 06 F1 | 	add	local08, #16
175e8                 | '     db+=2*4
175e8     08 2A 06 F1 | 	add	local07, #8
175ec     18 FF 9F FD | 	jmp	#LR__1840
175f0                 | LR__1841
175f0                 | '   else
175f0                 | '     d+=db
175f0     15 27 02 F1 | 	add	local05, local07
175f4                 | '     x+=1
175f4     01 28 06 F1 | 	add	local06, #1
175f8                 | '     da+=2*4
175f8     08 2C 06 F1 | 	add	local08, #8
175fc                 | '     db+=2*4
175fc     08 2A 06 F1 | 	add	local07, #8
17600     04 FF 9F FD | 	jmp	#LR__1840
17604                 | LR__1842
17604     A7 F0 03 F6 | 	mov	ptra, fp
17608     B2 00 A0 FD | 	call	#popregs_
1760c                 | _hg010b_spin2_circle_ret
1760c     2D 00 64 FD | 	ret
17610                 | 
17610                 | '     
17610                 | ' '-- A frame (an empty rectangle) ---------------------------------------
17610                 | ' 
17610                 | ' pub frame(x1,y1,x2,y2,c)
17610                 | _hg010b_spin2_frame
17610     05 4A 05 F6 | 	mov	COUNT_, #5
17614     A8 00 A0 FD | 	call	#pushregs_
17618     09 1F 02 F6 | 	mov	local01, arg01
1761c     0A 21 02 F6 | 	mov	local02, arg02
17620     0B 23 02 F6 | 	mov	local03, arg03
17624     0C 25 02 F6 | 	mov	local04, arg04
17628     0D 27 02 F6 | 	mov	local05, arg05
1762c                 | ' 
1762c                 | ' fastline(x1,x2,y1,c)
1762c     0F 13 02 F6 | 	mov	arg01, local01
17630     11 15 02 F6 | 	mov	arg02, local03
17634     10 17 02 F6 | 	mov	arg03, local02
17638     13 19 02 F6 | 	mov	arg04, local05
1763c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
17640                 | ' fastline(x1,x2,y2,c)
17640     0F 13 02 F6 | 	mov	arg01, local01
17644     11 15 02 F6 | 	mov	arg02, local03
17648     12 17 02 F6 | 	mov	arg03, local04
1764c     13 19 02 F6 | 	mov	arg04, local05
17650     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17654                 | ' line(x1,y1,x1,y2,c)
17654     0F 13 02 F6 | 	mov	arg01, local01
17658     10 15 02 F6 | 	mov	arg02, local02
1765c     0F 17 02 F6 | 	mov	arg03, local01
17660     12 19 02 F6 | 	mov	arg04, local04
17664     13 1B 02 F6 | 	mov	arg05, local05
17668                 | ' draw(x1,y1,x2,y2,c)
17668     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1766c                 | ' line(x2,y1,x2,y2,c)
1766c     11 13 02 F6 | 	mov	arg01, local03
17670     10 15 02 F6 | 	mov	arg02, local02
17674     11 17 02 F6 | 	mov	arg03, local03
17678     12 19 02 F6 | 	mov	arg04, local04
1767c     13 1B 02 F6 | 	mov	arg05, local05
17680                 | ' draw(x1,y1,x2,y2,c)
17680     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17684     A7 F0 03 F6 | 	mov	ptra, fp
17688     B2 00 A0 FD | 	call	#popregs_
1768c                 | _hg010b_spin2_frame_ret
1768c     2D 00 64 FD | 	ret
17690                 | 
17690                 | ' 
17690                 | ' '-- A box (a filled rectangle) ----------------------------------------
17690                 | ' 
17690                 | ' pub box(x1,y1,x2,y2,c) |yy
17690                 | _hg010b_spin2_box
17690     06 4A 05 F6 | 	mov	COUNT_, #6
17694     A8 00 A0 FD | 	call	#pushregs_
17698     09 1F 02 F6 | 	mov	local01, arg01
1769c     0A 21 02 F6 | 	mov	local02, arg02
176a0     0B 23 02 F6 | 	mov	local03, arg03
176a4     0C 25 02 F6 | 	mov	local04, arg04
176a8     0D 27 02 F6 | 	mov	local05, arg05
176ac                 | ' 
176ac                 | ' repeat yy from y1 to y2
176ac     10 25 52 F2 | 	cmps	local04, local02 wc
176b0     01 28 86 F6 | 	negc	local06, #1
176b4     14 25 02 F1 | 	add	local04, local06
176b8                 | LR__1850
176b8                 | '   fastline(x1,x2,yy,c)
176b8     0F 13 02 F6 | 	mov	arg01, local01
176bc     11 15 02 F6 | 	mov	arg02, local03
176c0     13 19 02 F6 | 	mov	arg04, local05
176c4     10 17 02 F6 | 	mov	arg03, local02
176c8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
176cc     14 21 02 F1 | 	add	local02, local06
176d0     12 21 0A F2 | 	cmp	local02, local04 wz
176d4     E0 FF 9F 5D |  if_ne	jmp	#LR__1850
176d8     A7 F0 03 F6 | 	mov	ptra, fp
176dc     B2 00 A0 FD | 	call	#popregs_
176e0                 | _hg010b_spin2_box_ret
176e0     2D 00 64 FD | 	ret
176e4                 | 
176e4                 | '       
176e4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
176e4                 | _hg010b_spin2_putcharxycgf
176e4                 | ' 
176e4                 | '  
176e4                 | ' repeat yy from 0 to 15
176e4     00 00 06 F6 | 	mov	_var01, #0
176e8     97 8C 48 FB | 	callpa	#(@LR__1862-@LR__1860)>>2,fcache_load_ptr_
176ec                 | LR__1860
176ec                 | ' 
176ec                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
176ec     91 E4 05 F1 | 	add	objptr, #145
176f0     F2 02 02 FB | 	rdlong	_var02, objptr
176f4     0A 02 66 F0 | 	shl	_var02, #10
176f8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
176fc     01 05 02 F1 | 	add	_var03, _var02
17700     0B 03 02 F6 | 	mov	_var02, arg03
17704     04 02 66 F0 | 	shl	_var02, #4
17708     01 05 02 F1 | 	add	_var03, _var02
1770c     00 05 02 F1 | 	add	_var03, _var01
17710     02 05 C2 FA | 	rdbyte	_var03, _var03
17714                 | '   asm
17714     00 04 0E F4 | 	testb	_var03, #0 wz
17718     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1771c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
17720     01 04 0E F4 | 	testb	_var03, #1 wz
17724     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
17728     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1772c     02 04 0E F4 | 	testb	_var03, #2 wz
17730     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17734     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
17738     03 04 0E F4 | 	testb	_var03, #3 wz
1773c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
17740     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17744     04 04 0E F4 | 	testb	_var03, #4 wz
17748     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1774c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17750     05 04 0E F4 | 	testb	_var03, #5 wz
17754     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
17758     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1775c     06 04 0E F4 | 	testb	_var03, #6 wz
17760     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17764     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
17768     07 04 0E F4 | 	testb	_var03, #7 wz
1776c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17770     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17774                 | '   
17774                 | '   ccc[0]:=c1
17774     99 E5 05 F1 | 	add	objptr, #409
17778     F2 06 62 FC | 	wrlong	_var04, objptr
1777c                 | '   ccc[1]:=c2 
1777c     04 E4 05 F1 | 	add	objptr, #4
17780     F2 08 62 FC | 	wrlong	_var05, objptr
17784                 | '   long[mailbox0][2]:=8
17784     49 E4 85 F1 | 	sub	objptr, #73
17788     F2 04 02 FB | 	rdlong	_var03, objptr
1778c     08 04 06 F1 | 	add	_var03, #8
17790     02 11 68 FC | 	wrlong	#8, _var03
17794                 | '   long[mailbox0][1]:=@ccc
17794     45 E4 05 F1 | 	add	objptr, #69
17798     F2 04 02 F6 | 	mov	_var03, objptr
1779c     45 E4 85 F1 | 	sub	objptr, #69
177a0     F2 02 02 FB | 	rdlong	_var02, objptr
177a4     04 02 06 F1 | 	add	_var02, #4
177a8     01 05 62 FC | 	wrlong	_var03, _var02
177ac                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
177ac     0C E5 85 F1 | 	sub	objptr, #268
177b0     F2 04 02 FB | 	rdlong	_var03, objptr
177b4     0A 03 02 F6 | 	mov	_var02, arg02
177b8     00 03 02 F1 | 	add	_var02, _var01
177bc     0A 02 66 F0 | 	shl	_var02, #10
177c0     09 0B 02 F6 | 	mov	_var06, arg01
177c4     02 0A 66 F0 | 	shl	_var06, #2
177c8     05 03 02 F1 | 	add	_var02, _var06
177cc     01 05 02 F1 | 	add	_var03, _var02
177d0     00 00 78 FF 
177d4     00 04 06 F1 | 	add	_var03, ##-268435456
177d8     0C E5 05 F1 | 	add	objptr, #268
177dc     F2 0A 02 FB | 	rdlong	_var06, objptr
177e0     05 05 62 FC | 	wrlong	_var03, _var06
177e4                 | '   repeat
177e4                 | LR__1861
177e4     F2 04 02 FB | 	rdlong	_var03, objptr
177e8     02 03 02 FB | 	rdlong	_var02, _var03
177ec     00 02 56 F2 | 	cmps	_var02, #0 wc
177f0     F0 FF 9F CD |  if_b	jmp	#LR__1861
177f4     E5 E5 85 F1 | 	sub	objptr, #485
177f8     01 00 06 F1 | 	add	_var01, #1
177fc     10 00 56 F2 | 	cmps	_var01, #16 wc
17800     E8 FE 9F CD |  if_b	jmp	#LR__1860
17804                 | LR__1862
17804                 | _hg010b_spin2_putcharxycgf_ret
17804     2D 00 64 FD | 	ret
17808                 | 
17808                 | ' 
17808                 | ' 
17808                 | ' '**********************************************************************r***
17808                 | ' '                                                                        *
17808                 | ' ' Font related functions                                                 *
17808                 | ' '                                                                        *
17808                 | ' '*************************************************************************
17808                 | ' 
17808                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
17808                 | ' 
17808                 | ' pub setfontfamily(afontnum)
17808                 | _hg010b_spin2_setfontfamily
17808                 | ' 
17808                 | ' font_family:=afontnum
17808     91 E4 05 F1 | 	add	objptr, #145
1780c     F2 12 62 FC | 	wrlong	arg01, objptr
17810     91 E4 85 F1 | 	sub	objptr, #145
17814                 | ' 'if afontnum==8
17814                 | ' '  font_ptr:=@amiga_font
17814                 | ' 
17814                 | ' if afontnum==4
17814     04 12 0E F2 | 	cmp	arg01, #4 wz
17818                 | '   font_ptr:=@st_font
17818     08 00 00 AF 
1781c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
17820     04 E4 05 A1 |  if_e	add	objptr, #4
17824     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17828     04 E4 85 A1 |  if_e	sub	objptr, #4
1782c     08 00 00 AF 
17830     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
17834                 | ' if afontnum==0
17834     00 12 0E F2 | 	cmp	arg01, #0 wz
17838                 | '   font_ptr:=@vga_font
17838     04 E4 05 A1 |  if_e	add	objptr, #4
1783c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17840     04 E4 85 A1 |  if_e	sub	objptr, #4
17844                 | _hg010b_spin2_setfontfamily_ret
17844     2D 00 64 FD | 	ret
17848                 | 
17848                 | ' 
17848                 | ' '*************************************************************************
17848                 | ' '                                                                        *
17848                 | ' '  Cursor functions                                                      *
17848                 | ' '                                                                        *
17848                 | ' '*************************************************************************
17848                 | ' 
17848                 | ' 
17848                 | ' pub setcursorpos(x,y)
17848                 | _hg010b_spin2_setcursorpos
17848                 | ' 
17848                 | ' ''---------- Set the (x,y) position of cursor
17848                 | ' 
17848                 | ' cursor_x:=x
17848     38 E4 05 F1 | 	add	objptr, #56
1784c     F2 12 52 FC | 	wrword	arg01, objptr
17850                 | ' cursor_y:=y
17850     02 E4 05 F1 | 	add	objptr, #2
17854     F2 14 42 FC | 	wrbyte	arg02, objptr
17858                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17858     02 E4 85 F1 | 	sub	objptr, #2
1785c     F2 14 E2 FA | 	rdword	arg02, objptr
17860     02 14 66 F0 | 	shl	arg02, #2
17864     02 E4 05 F1 | 	add	objptr, #2
17868     F2 16 C2 FA | 	rdbyte	arg03, objptr
1786c     3A E4 85 F1 | 	sub	objptr, #58
17870     04 16 66 F0 | 	shl	arg03, #4
17874     11 12 06 F6 | 	mov	arg01, #17
17878     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1787c                 | _hg010b_spin2_setcursorpos_ret
1787c     2D 00 64 FD | 	ret
17880                 | 
17880                 | ' 
17880                 | ' '*************************************************************************
17880                 | ' '                                                                        *
17880                 | ' '  VBlank functions                                                      *
17880                 | ' '                                                                        *
17880                 | ' '*************************************************************************
17880                 | ' 
17880                 | ' pub waitvbl(amount) | i
17880                 | _hg010b_spin2_waitvbl
17880     03 4A 05 F6 | 	mov	COUNT_, #3
17884     A8 00 A0 FD | 	call	#pushregs_
17888     09 1F 02 F6 | 	mov	local01, arg01
1788c                 | ' 
1788c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1788c                 | ' 
1788c                 | ' repeat i from 1 to amount
1788c     01 20 06 F6 | 	mov	local02, #1
17890     01 1E 56 F2 | 	cmps	local01, #1 wc
17894     01 22 86 F6 | 	negc	local03, #1
17898     11 1F 02 F1 | 	add	local01, local03
1789c                 | LR__1870
1789c                 | '   repeat until vblank==0
1789c                 | LR__1871
1789c     45 E4 05 F1 | 	add	objptr, #69
178a0     F2 12 0A FB | 	rdlong	arg01, objptr wz
178a4     45 E4 85 F1 | 	sub	objptr, #69
178a8     0C 00 90 AD |  if_e	jmp	#LR__1872
178ac                 | '     waitus(100)
178ac     64 12 06 F6 | 	mov	arg01, #100
178b0     80 16 B0 FD | 	call	#__system___waitus
178b4     E4 FF 9F FD | 	jmp	#LR__1871
178b8                 | LR__1872
178b8                 | '   repeat until vblank==1
178b8                 | LR__1873
178b8     45 E4 05 F1 | 	add	objptr, #69
178bc     F2 12 02 FB | 	rdlong	arg01, objptr
178c0     45 E4 85 F1 | 	sub	objptr, #69
178c4     01 12 0E F2 | 	cmp	arg01, #1 wz
178c8     0C 00 90 AD |  if_e	jmp	#LR__1874
178cc                 | '     waitus(100)
178cc     64 12 06 F6 | 	mov	arg01, #100
178d0     60 16 B0 FD | 	call	#__system___waitus
178d4     E0 FF 9F FD | 	jmp	#LR__1873
178d8                 | LR__1874
178d8     11 21 02 F1 | 	add	local02, local03
178dc     0F 21 0A F2 | 	cmp	local02, local01 wz
178e0     B8 FF 9F 5D |  if_ne	jmp	#LR__1870
178e4     A7 F0 03 F6 | 	mov	ptra, fp
178e8     B2 00 A0 FD | 	call	#popregs_
178ec                 | _hg010b_spin2_waitvbl_ret
178ec     2D 00 64 FD | 	ret
178f0                 | 
178f0                 | ' 
178f0                 | ' 
178f0                 | ' pub cls(fc,bc)   :c,i
178f0                 | _hg010b_spin2_cls
178f0     02 4A 05 F6 | 	mov	COUNT_, #2
178f4     A8 00 A0 FD | 	call	#pushregs_
178f8     09 1F 02 F6 | 	mov	local01, arg01
178fc     0A 21 02 F6 | 	mov	local02, arg02
17900                 | ' 
17900                 | ' c:=bc
17900                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
17900     D9 E4 05 F1 | 	add	objptr, #217
17904     F2 12 02 FB | 	rdlong	arg01, objptr
17908     A5 E4 85 F1 | 	sub	objptr, #165
1790c     F2 16 02 FB | 	rdlong	arg03, objptr
17910     02 16 66 F0 | 	shl	arg03, #2
17914     10 15 02 F6 | 	mov	arg02, local02
17918     00 18 06 F6 | 	mov	arg04, #0
1791c     01 1A 06 F6 | 	mov	arg05, #1
17920     0B 00 00 FF 
17924     8C E4 05 F1 | 	add	objptr, ##5772
17928     F0 08 B0 FD | 	call	#_psram_spin2_fill
1792c                 | ' setwritecolors(fc,bc)
1792c                 | ' 
1792c                 | ' write_color:=ff
1792c     0B 00 00 FF 
17930     83 E4 85 F1 | 	sub	objptr, ##5763
17934     F2 1E 62 FC | 	wrlong	local01, objptr
17938                 | ' write_background:=bb
17938     04 E4 05 F1 | 	add	objptr, #4
1793c     F2 20 62 FC | 	wrlong	local02, objptr
17940                 | ' cursor_x:=0
17940     09 E4 85 F1 | 	sub	objptr, #9
17944     F2 00 58 FC | 	wrword	#0, objptr
17948                 | ' cursor_y:=0
17948     02 E4 05 F1 | 	add	objptr, #2
1794c     F2 00 48 FC | 	wrbyte	#0, objptr
17950                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17950     02 E4 85 F1 | 	sub	objptr, #2
17954     F2 14 E2 FA | 	rdword	arg02, objptr
17958     02 14 66 F0 | 	shl	arg02, #2
1795c     02 E4 05 F1 | 	add	objptr, #2
17960     F2 16 C2 FA | 	rdbyte	arg03, objptr
17964     3A E4 85 F1 | 	sub	objptr, #58
17968     04 16 66 F0 | 	shl	arg03, #4
1796c     11 12 06 F6 | 	mov	arg01, #17
17970     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17974                 | ' setcursorcolor(fc)
17974     0F 13 02 F6 | 	mov	arg01, local01
17978     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1797c     10 FB 01 F6 | 	mov	result1, local02
17980     00 FC 05 F6 | 	mov	result2, #0
17984     A7 F0 03 F6 | 	mov	ptra, fp
17988     B2 00 A0 FD | 	call	#popregs_
1798c                 | _hg010b_spin2_cls_ret
1798c     2D 00 64 FD | 	ret
17990                 | 
17990                 | ' 
17990                 | ' ''---------- Output a char at the cursor position, move the cursor 
17990                 | ' 
17990                 | ' pub putchar(achar) | c,x,y,l,newcpl
17990                 | _hg010b_spin2_putchar
17990     01 4A 05 F6 | 	mov	COUNT_, #1
17994     A8 00 A0 FD | 	call	#pushregs_
17998     09 1F 02 F6 | 	mov	local01, arg01
1799c                 | ' 
1799c                 | ' if achar==10
1799c     0A 1E 0E F2 | 	cmp	local01, #10 wz
179a0                 | '   crlf()
179a0     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
179a4                 | ' if achar==9
179a4     09 1E 0E F2 | 	cmp	local01, #9 wz
179a8     18 00 90 5D |  if_ne	jmp	#LR__1880
179ac                 | '   cursor_x:=(cursor_x& %11110000)+16
179ac     38 E4 05 F1 | 	add	objptr, #56
179b0     F2 16 E2 FA | 	rdword	arg03, objptr
179b4     F0 16 06 F5 | 	and	arg03, #240
179b8     10 16 06 F1 | 	add	arg03, #16
179bc     F2 16 52 FC | 	wrword	arg03, objptr
179c0     38 E4 85 F1 | 	sub	objptr, #56
179c4                 | LR__1880
179c4                 | '   
179c4                 | ' if (achar<>9) && (achar<>10) 
179c4     09 1E 0E F2 | 	cmp	local01, #9 wz
179c8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
179cc     44 00 90 AD |  if_e	jmp	#LR__1881
179d0                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
179d0     38 E4 05 F1 | 	add	objptr, #56
179d4     F2 12 E2 FA | 	rdword	arg01, objptr
179d8     02 E4 05 F1 | 	add	objptr, #2
179dc     F2 14 C2 FA | 	rdbyte	arg02, objptr
179e0     04 14 66 F0 | 	shl	arg02, #4
179e4     03 E4 05 F1 | 	add	objptr, #3
179e8     F2 18 02 FB | 	rdlong	arg04, objptr
179ec     04 E4 05 F1 | 	add	objptr, #4
179f0     F2 1A 02 FB | 	rdlong	arg05, objptr
179f4     41 E4 85 F1 | 	sub	objptr, #65
179f8     0F 17 02 F6 | 	mov	arg03, local01
179fc     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
17a00                 | '   cursor_x+=2
17a00     38 E4 05 F1 | 	add	objptr, #56
17a04     F2 1E E2 FA | 	rdword	local01, objptr
17a08     02 1E 06 F1 | 	add	local01, #2
17a0c     F2 1E 52 FC | 	wrword	local01, objptr
17a10     38 E4 85 F1 | 	sub	objptr, #56
17a14                 | LR__1881
17a14                 | ' 
17a14                 | ' if cursor_x>=256
17a14     38 E4 05 F1 | 	add	objptr, #56
17a18     F2 1E E2 FA | 	rdword	local01, objptr
17a1c     38 E4 85 F1 | 	sub	objptr, #56
17a20     00 1F 56 F2 | 	cmps	local01, #256 wc
17a24     64 00 90 CD |  if_b	jmp	#LR__1883
17a28                 | '   cursor_x:=0
17a28     38 E4 05 F1 | 	add	objptr, #56
17a2c     F2 00 58 FC | 	wrword	#0, objptr
17a30                 | '   cursor_y+=1
17a30     02 E4 05 F1 | 	add	objptr, #2
17a34     F2 1E C2 FA | 	rdbyte	local01, objptr
17a38     01 1E 06 F1 | 	add	local01, #1
17a3c     F2 1E 42 FC | 	wrbyte	local01, objptr
17a40                 | '   if cursor_y>st_lines-1
17a40     C3 E4 05 F1 | 	add	objptr, #195
17a44     F2 1E 02 FB | 	rdlong	local01, objptr
17a48     01 1E 86 F1 | 	sub	local01, #1
17a4c     C3 E4 85 F1 | 	sub	objptr, #195
17a50     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a54     3A E4 85 F1 | 	sub	objptr, #58
17a58     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17a5c     2C 00 90 ED |  if_be	jmp	#LR__1882
17a60                 | '     scrollup()
17a60     00 12 06 F6 | 	mov	arg01, #0
17a64     01 00 00 FF 
17a68     40 14 06 F6 | 	mov	arg02, ##576
17a6c     10 16 06 F6 | 	mov	arg03, #16
17a70     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17a74                 | '     cursor_y:=st_lines-1
17a74     FD E4 05 F1 | 	add	objptr, #253
17a78     F2 1E 02 FB | 	rdlong	local01, objptr
17a7c     01 1E 86 F1 | 	sub	local01, #1
17a80     C3 E4 85 F1 | 	sub	objptr, #195
17a84     F2 1E 42 FC | 	wrbyte	local01, objptr
17a88     3A E4 85 F1 | 	sub	objptr, #58
17a8c                 | LR__1882
17a8c                 | LR__1883
17a8c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17a8c     38 E4 05 F1 | 	add	objptr, #56
17a90     F2 14 E2 FA | 	rdword	arg02, objptr
17a94     02 14 66 F0 | 	shl	arg02, #2
17a98     02 E4 05 F1 | 	add	objptr, #2
17a9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17aa0     3A E4 85 F1 | 	sub	objptr, #58
17aa4     04 16 66 F0 | 	shl	arg03, #4
17aa8     11 12 06 F6 | 	mov	arg01, #17
17aac     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
17ab0     A7 F0 03 F6 | 	mov	ptra, fp
17ab4     B2 00 A0 FD | 	call	#popregs_
17ab8                 | _hg010b_spin2_putchar_ret
17ab8     2D 00 64 FD | 	ret
17abc                 | 
17abc                 | '     
17abc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
17abc                 | ' 
17abc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
17abc                 | _hg010b_spin2_putchar2
17abc     01 4A 05 F6 | 	mov	COUNT_, #1
17ac0     A8 00 A0 FD | 	call	#pushregs_
17ac4                 | ' 
17ac4                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
17ac4     38 E4 05 F1 | 	add	objptr, #56
17ac8     F2 1E E2 FA | 	rdword	local01, objptr
17acc     02 E4 05 F1 | 	add	objptr, #2
17ad0     F2 14 C2 FA | 	rdbyte	arg02, objptr
17ad4     04 14 66 F0 | 	shl	arg02, #4
17ad8     09 17 02 F6 | 	mov	arg03, arg01
17adc     03 E4 05 F1 | 	add	objptr, #3
17ae0     F2 18 02 FB | 	rdlong	arg04, objptr
17ae4     04 E4 05 F1 | 	add	objptr, #4
17ae8     F2 1A 02 FB | 	rdlong	arg05, objptr
17aec     41 E4 85 F1 | 	sub	objptr, #65
17af0     0F 13 02 F6 | 	mov	arg01, local01
17af4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
17af8                 | ' cursor_x+=2
17af8     38 E4 05 F1 | 	add	objptr, #56
17afc     F2 1E E2 FA | 	rdword	local01, objptr
17b00     02 1E 06 F1 | 	add	local01, #2
17b04     F2 1E 52 FC | 	wrword	local01, objptr
17b08                 | ' if cursor_x>=256
17b08     F2 1E E2 FA | 	rdword	local01, objptr
17b0c     38 E4 85 F1 | 	sub	objptr, #56
17b10     00 1F 56 F2 | 	cmps	local01, #256 wc
17b14     64 00 90 CD |  if_b	jmp	#LR__1891
17b18                 | '   cursor_x:=0
17b18     38 E4 05 F1 | 	add	objptr, #56
17b1c     F2 00 58 FC | 	wrword	#0, objptr
17b20                 | '   cursor_y+=1
17b20     02 E4 05 F1 | 	add	objptr, #2
17b24     F2 1E C2 FA | 	rdbyte	local01, objptr
17b28     01 1E 06 F1 | 	add	local01, #1
17b2c     F2 1E 42 FC | 	wrbyte	local01, objptr
17b30                 | '   if cursor_y>st_lines-1
17b30     C3 E4 05 F1 | 	add	objptr, #195
17b34     F2 1E 02 FB | 	rdlong	local01, objptr
17b38     01 1E 86 F1 | 	sub	local01, #1
17b3c     C3 E4 85 F1 | 	sub	objptr, #195
17b40     F2 1A C2 FA | 	rdbyte	arg05, objptr
17b44     3A E4 85 F1 | 	sub	objptr, #58
17b48     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17b4c     2C 00 90 ED |  if_be	jmp	#LR__1890
17b50                 | '     scrollup()
17b50     00 12 06 F6 | 	mov	arg01, #0
17b54     01 00 00 FF 
17b58     40 14 06 F6 | 	mov	arg02, ##576
17b5c     10 16 06 F6 | 	mov	arg03, #16
17b60     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17b64                 | '     cursor_y:=st_lines-1
17b64     FD E4 05 F1 | 	add	objptr, #253
17b68     F2 1E 02 FB | 	rdlong	local01, objptr
17b6c     01 1E 86 F1 | 	sub	local01, #1
17b70     C3 E4 85 F1 | 	sub	objptr, #195
17b74     F2 1E 42 FC | 	wrbyte	local01, objptr
17b78     3A E4 85 F1 | 	sub	objptr, #58
17b7c                 | LR__1890
17b7c                 | LR__1891
17b7c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17b7c     38 E4 05 F1 | 	add	objptr, #56
17b80     F2 14 E2 FA | 	rdword	arg02, objptr
17b84     02 14 66 F0 | 	shl	arg02, #2
17b88     02 E4 05 F1 | 	add	objptr, #2
17b8c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b90     3A E4 85 F1 | 	sub	objptr, #58
17b94     04 16 66 F0 | 	shl	arg03, #4
17b98     11 12 06 F6 | 	mov	arg01, #17
17b9c     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17ba0     A7 F0 03 F6 | 	mov	ptra, fp
17ba4     B2 00 A0 FD | 	call	#popregs_
17ba8                 | _hg010b_spin2_putchar2_ret
17ba8     2D 00 64 FD | 	ret
17bac                 | 
17bac                 | ' ''--------- Output a string at the cursor position, move the cursor  
17bac                 | ' 
17bac                 | ' pub write(text) | iii,c,ncx,ncy
17bac                 | _hg010b_spin2_write
17bac     04 4A 05 F6 | 	mov	COUNT_, #4
17bb0     A8 00 A0 FD | 	call	#pushregs_
17bb4     09 1F 02 F6 | 	mov	local01, arg01
17bb8                 | ' 
17bb8                 | ' repeat iii from 0 to strsize(text)-1
17bb8     00 20 06 F6 | 	mov	local02, #0
17bbc     0F 13 02 F6 | 	mov	arg01, local01
17bc0     09 23 02 F6 | 	mov	local03, arg01
17bc4     97 06 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
17bc8                 | LR__1900
17bc8     11 FB C9 FA | 	rdbyte	result1, local03 wz
17bcc     01 22 06 51 |  if_ne	add	local03, #1
17bd0     F4 FF 9F 5D |  if_ne	jmp	#LR__1900
17bd4                 | LR__1901
17bd4     09 23 82 F1 | 	sub	local03, arg01
17bd8     01 22 86 F1 | 	sub	local03, #1
17bdc     00 22 56 F2 | 	cmps	local03, #0 wc
17be0     01 24 86 F6 | 	negc	local04, #1
17be4     12 23 02 F1 | 	add	local03, local04
17be8                 | LR__1902
17be8                 | '   putchar2(byte[text+iii])
17be8     0F 13 02 F6 | 	mov	arg01, local01
17bec     10 13 02 F1 | 	add	arg01, local02
17bf0     09 13 C2 FA | 	rdbyte	arg01, arg01
17bf4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
17bf8     12 21 02 F1 | 	add	local02, local04
17bfc     11 21 0A F2 | 	cmp	local02, local03 wz
17c00     E4 FF 9F 5D |  if_ne	jmp	#LR__1902
17c04     A7 F0 03 F6 | 	mov	ptra, fp
17c08     B2 00 A0 FD | 	call	#popregs_
17c0c                 | _hg010b_spin2_write_ret
17c0c     2D 00 64 FD | 	ret
17c10                 | 
17c10                 | ' 
17c10                 | ' ''-----------  Scroll the screen one line up
17c10                 | ' 
17c10                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17c10                 | _hg010b_spin2_scrollup
17c10     01 4A 05 F6 | 	mov	COUNT_, #1
17c14     A8 00 A0 FD | 	call	#pushregs_
17c18                 | ' 	
17c18                 | ' repeat i from 0 to 559 
17c18     00 1E 06 F6 | 	mov	local01, #0
17c1c                 | LR__1910
17c1c     F5 E4 05 F1 | 	add	objptr, #245
17c20     F2 18 02 FB | 	rdlong	arg04, objptr
17c24     1C E4 85 F1 | 	sub	objptr, #28
17c28     F2 14 02 FB | 	rdlong	arg02, objptr
17c2c     0F 13 02 F6 | 	mov	arg01, local01
17c30     10 12 06 F1 | 	add	arg01, #16
17c34     02 12 66 F0 | 	shl	arg01, #2
17c38     14 E4 05 F1 | 	add	objptr, #20
17c3c     F2 16 02 FB | 	rdlong	arg03, objptr
17c40     0B 13 02 FD | 	qmul	arg01, arg03
17c44                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17c44     F6 03 00 FF 
17c48     00 12 06 F6 | 	mov	arg01, ##519168
17c4c     0C 13 82 F1 | 	sub	arg01, arg04
17c50     02 16 66 F0 | 	shl	arg03, #2
17c54     0A 00 00 FF 
17c58     D3 E5 05 F1 | 	add	objptr, ##5587
17c5c     18 18 62 FD | 	getqx	arg04
17c60     0C 15 02 F1 | 	add	arg02, arg04
17c64     7C 04 B0 FD | 	call	#_psram_spin2_read1
17c68     0A 00 00 FF 
17c6c     CB E5 85 F1 | 	sub	objptr, ##5579
17c70     F2 18 02 FB | 	rdlong	arg04, objptr
17c74     1C E4 85 F1 | 	sub	objptr, #28
17c78     F2 14 02 FB | 	rdlong	arg02, objptr
17c7c     0F 13 02 F6 | 	mov	arg01, local01
17c80     02 12 66 F0 | 	shl	arg01, #2
17c84     14 E4 05 F1 | 	add	objptr, #20
17c88     F2 16 02 FB | 	rdlong	arg03, objptr
17c8c     0B 13 02 FD | 	qmul	arg01, arg03
17c90                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17c90     F6 03 00 FF 
17c94     00 12 06 F6 | 	mov	arg01, ##519168
17c98     0C 13 82 F1 | 	sub	arg01, arg04
17c9c     02 16 66 F0 | 	shl	arg03, #2
17ca0     0A 00 00 FF 
17ca4     D3 E5 05 F1 | 	add	objptr, ##5587
17ca8     18 18 62 FD | 	getqx	arg04
17cac     0C 15 02 F1 | 	add	arg02, arg04
17cb0     CC 04 B0 FD | 	call	#_psram_spin2_write
17cb4     0B 00 00 FF 
17cb8     C0 E4 85 F1 | 	sub	objptr, ##5824
17cbc     01 1E 06 F1 | 	add	local01, #1
17cc0     01 00 00 FF 
17cc4     30 1E 56 F2 | 	cmps	local01, ##560 wc
17cc8     50 FF 9F CD |  if_b	jmp	#LR__1910
17ccc                 | ' 
17ccc                 | ' repeat i from 560 to 575
17ccc     01 00 00 FF 
17cd0     30 1E 06 F6 | 	mov	local01, ##560
17cd4                 | LR__1911
17cd4                 | '    fastline(0,1023,i,write_background)   
17cd4     41 E4 05 F1 | 	add	objptr, #65
17cd8     F2 18 02 FB | 	rdlong	arg04, objptr
17cdc     41 E4 85 F1 | 	sub	objptr, #65
17ce0     00 12 06 F6 | 	mov	arg01, #0
17ce4     09 14 CE F9 | 	bmask	arg02, #9
17ce8     0F 17 02 F6 | 	mov	arg03, local01
17cec     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
17cf0     01 1E 06 F1 | 	add	local01, #1
17cf4     01 00 00 FF 
17cf8     40 1E 16 F2 | 	cmp	local01, ##576 wc
17cfc     D4 FF 9F CD |  if_b	jmp	#LR__1911
17d00     A7 F0 03 F6 | 	mov	ptra, fp
17d04     B2 00 A0 FD | 	call	#popregs_
17d08                 | _hg010b_spin2_scrollup_ret
17d08     2D 00 64 FD | 	ret
17d0c                 | 
17d0c                 | ' 
17d0c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17d0c                 | ' 
17d0c                 | ' pub crlf()
17d0c                 | _hg010b_spin2_crlf
17d0c                 | ' 
17d0c                 | ' cursor_x:=leading_spaces*2
17d0c     01 00 00 FF 
17d10     B2 E4 05 F1 | 	add	objptr, ##690
17d14     F2 16 02 FB | 	rdlong	arg03, objptr
17d18     01 16 66 F0 | 	shl	arg03, #1
17d1c     01 00 00 FF 
17d20     7A E4 85 F1 | 	sub	objptr, ##634
17d24     F2 16 52 FC | 	wrword	arg03, objptr
17d28                 | ' cursor_y+=1
17d28     02 E4 05 F1 | 	add	objptr, #2
17d2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d30     01 16 06 F1 | 	add	arg03, #1
17d34     F2 16 42 FC | 	wrbyte	arg03, objptr
17d38                 | ' if cursor_y>st_lines-1
17d38     C3 E4 05 F1 | 	add	objptr, #195
17d3c     F2 16 02 FB | 	rdlong	arg03, objptr
17d40     01 16 86 F1 | 	sub	arg03, #1
17d44     C3 E4 85 F1 | 	sub	objptr, #195
17d48     F2 14 C2 FA | 	rdbyte	arg02, objptr
17d4c     3A E4 85 F1 | 	sub	objptr, #58
17d50     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17d54     2C 00 90 ED |  if_be	jmp	#LR__1920
17d58                 | '   scrollup()
17d58     00 12 06 F6 | 	mov	arg01, #0
17d5c     01 00 00 FF 
17d60     40 14 06 F6 | 	mov	arg02, ##576
17d64     10 16 06 F6 | 	mov	arg03, #16
17d68     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17d6c                 | '   cursor_y:=st_lines-1
17d6c     FD E4 05 F1 | 	add	objptr, #253
17d70     F2 16 02 FB | 	rdlong	arg03, objptr
17d74     01 16 86 F1 | 	sub	arg03, #1
17d78     C3 E4 85 F1 | 	sub	objptr, #195
17d7c     F2 16 42 FC | 	wrbyte	arg03, objptr
17d80     3A E4 85 F1 | 	sub	objptr, #58
17d84                 | LR__1920
17d84                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17d84     38 E4 05 F1 | 	add	objptr, #56
17d88     F2 14 E2 FA | 	rdword	arg02, objptr
17d8c     02 14 66 F0 | 	shl	arg02, #2
17d90     02 E4 05 F1 | 	add	objptr, #2
17d94     F2 16 C2 FA | 	rdbyte	arg03, objptr
17d98     3A E4 85 F1 | 	sub	objptr, #58
17d9c     04 16 66 F0 | 	shl	arg03, #4
17da0     11 12 06 F6 | 	mov	arg01, #17
17da4     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17da8                 | _hg010b_spin2_crlf_ret
17da8     2D 00 64 FD | 	ret
17dac                 | 
17dac                 | ' 
17dac                 | ' 
17dac                 | ' '*************************************************************************
17dac                 | ' '                                                                        *
17dac                 | ' '  Conversions                                                           *
17dac                 | ' '                                                                        *
17dac                 | ' '*************************************************************************
17dac                 | ' 
17dac                 | ' ''---------- Convert a integer to dec string, return a pointer
17dac                 | ' 
17dac                 | ' pub inttostr(i):result |q,pos,k,j
17dac                 | _hg010b_spin2_inttostr
17dac     03 4A 05 F6 | 	mov	COUNT_, #3
17db0     A8 00 A0 FD | 	call	#pushregs_
17db4     09 1F 0A F6 | 	mov	local01, arg01 wz
17db8                 | ' 
17db8                 | ' j:=i
17db8                 | ' pos:=10
17db8     0A 20 06 F6 | 	mov	local02, #10
17dbc                 | ' k:=0
17dbc     00 22 06 F6 | 	mov	local03, #0
17dc0                 | ' 
17dc0                 | ' if (j==0)
17dc0     18 00 90 5D |  if_ne	jmp	#LR__1930
17dc4                 | '   n_string[0]:=48
17dc4     49 E4 05 F1 | 	add	objptr, #73
17dc8     F2 60 48 FC | 	wrbyte	#48, objptr
17dcc                 | '   n_string[1]:=0
17dcc     01 E4 05 F1 | 	add	objptr, #1
17dd0     F2 00 48 FC | 	wrbyte	#0, objptr
17dd4     4A E4 85 F1 | 	sub	objptr, #74
17dd8     C4 00 90 FD | 	jmp	#LR__1937
17ddc                 | LR__1930
17ddc                 | ' 
17ddc                 | ' else
17ddc                 | '   if (j<0)
17ddc     0F 1F 52 F6 | 	abs	local01, local01 wc
17de0                 | '     j:=0-j
17de0                 | '     k:=45
17de0     2D 22 06 C6 |  if_b	mov	local03, #45
17de4                 | ' 
17de4                 | '   n_string[11]:=0
17de4     54 E4 05 F1 | 	add	objptr, #84
17de8     F2 00 48 FC | 	wrbyte	#0, objptr
17dec     54 E4 85 F1 | 	sub	objptr, #84
17df0     97 24 48 FB | 	callpa	#(@LR__1932-@LR__1931)>>2,fcache_load_ptr_
17df4                 | '   repeat while (pos>-1)
17df4                 | LR__1931
17df4     00 20 56 F2 | 	cmps	local02, #0 wc
17df8     40 00 90 CD |  if_b	jmp	#LR__1933
17dfc     0F FB 51 F6 | 	abs	result1, local01 wc
17e00     0A FA 15 FD | 	qdiv	result1, #10
17e04                 | '     q:=j//10
17e04     19 FA 61 FD | 	getqy	result1
17e08     FD FA 81 F6 | 	negc	result1, result1
17e0c     0F 1F 52 F6 | 	abs	local01, local01 wc
17e10     0A 1E 16 FD | 	qdiv	local01, #10
17e14                 | '     q:=48+q
17e14     30 FA 05 F1 | 	add	result1, #48
17e18                 | '     n_string[pos]:=q
17e18     10 1F 02 F6 | 	mov	local01, local02
17e1c     49 E4 05 F1 | 	add	objptr, #73
17e20     F2 1E 02 F1 | 	add	local01, objptr
17e24     0F FB 41 FC | 	wrbyte	result1, local01
17e28                 | '     j:=j/10
17e28     49 E4 85 F1 | 	sub	objptr, #73
17e2c                 | '     pos-=1
17e2c     01 20 86 F1 | 	sub	local02, #1
17e30     18 1E 62 FD | 	getqx	local01
17e34     0F 1F 82 F6 | 	negc	local01, local01
17e38     B8 FF 9F FD | 	jmp	#LR__1931
17e3c                 | LR__1932
17e3c                 | LR__1933
17e3c                 | '   repeat while n_string[0]==48
17e3c                 | LR__1934
17e3c     49 E4 05 F1 | 	add	objptr, #73
17e40     F2 16 C2 FA | 	rdbyte	arg03, objptr
17e44     49 E4 85 F1 | 	sub	objptr, #73
17e48     30 16 0E F2 | 	cmp	arg03, #48 wz
17e4c     20 00 90 5D |  if_ne	jmp	#LR__1935
17e50                 | '     bytemove(@n_string,@n_string+1,12)
17e50     49 E4 05 F1 | 	add	objptr, #73
17e54     F2 12 02 F6 | 	mov	arg01, objptr
17e58     F2 14 02 F6 | 	mov	arg02, objptr
17e5c     49 E4 85 F1 | 	sub	objptr, #73
17e60     01 14 06 F1 | 	add	arg02, #1
17e64     0C 16 06 F6 | 	mov	arg03, #12
17e68     88 0C B0 FD | 	call	#__system____builtin_memmove
17e6c     CC FF 9F FD | 	jmp	#LR__1934
17e70                 | LR__1935
17e70                 | ' 
17e70                 | '   if k==45
17e70     2D 22 0E F2 | 	cmp	local03, #45 wz
17e74     28 00 90 5D |  if_ne	jmp	#LR__1936
17e78                 | '      bytemove(@n_string+1,@n_string,12)
17e78     49 E4 05 F1 | 	add	objptr, #73
17e7c     F2 12 02 F6 | 	mov	arg01, objptr
17e80     01 12 06 F1 | 	add	arg01, #1
17e84     F2 14 02 F6 | 	mov	arg02, objptr
17e88     49 E4 85 F1 | 	sub	objptr, #73
17e8c     0C 16 06 F6 | 	mov	arg03, #12
17e90     60 0C B0 FD | 	call	#__system____builtin_memmove
17e94                 | '      n_string[0]:=k
17e94     49 E4 05 F1 | 	add	objptr, #73
17e98     F2 22 42 FC | 	wrbyte	local03, objptr
17e9c     49 E4 85 F1 | 	sub	objptr, #73
17ea0                 | LR__1936
17ea0                 | LR__1937
17ea0                 | ' 
17ea0                 | ' q:=@n_string
17ea0     49 E4 05 F1 | 	add	objptr, #73
17ea4     F2 FA 01 F6 | 	mov	result1, objptr
17ea8     49 E4 85 F1 | 	sub	objptr, #73
17eac                 | ' return q
17eac     A7 F0 03 F6 | 	mov	ptra, fp
17eb0     B2 00 A0 FD | 	call	#popregs_
17eb4                 | _hg010b_spin2_inttostr_ret
17eb4     2D 00 64 FD | 	ret
17eb8                 | 
17eb8                 | ' 
17eb8                 | ' '..............................................................................
17eb8                 | ' 
17eb8                 | ' {{
17eb8                 | ' }}
17eb8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
17eb8                 | _psram_spin2_startx
17eb8     04 4A 05 F6 | 	mov	COUNT_, #4
17ebc     A8 00 A0 FD | 	call	#pushregs_
17ec0     09 1F 02 F6 | 	mov	local01, arg01
17ec4     0B 21 02 F6 | 	mov	local02, arg03
17ec8     0C 23 02 F6 | 	mov	local03, arg04
17ecc                 | '     stop() ' restart driver if required
17ecc     54 01 B0 FD | 	call	#_psram_spin2_stop
17ed0     00 1E 0E F2 | 	cmp	local01, #0 wz
17ed4     14 1E 06 AB |  if_e	rdlong	local01, #20
17ed8     0F 15 52 F6 | 	abs	arg02, local01 wc
17edc     A1 07 00 FF 
17ee0     40 14 16 FD | 	qdiv	arg02, ##1000000
17ee4                 | ' 
17ee4                 | '     ' use current frequency if none specified
17ee4                 | ' 
17ee4                 | '     if freq == 0 
17ee4                 | '         freq := clkfreq 
17ee4                 | ' 
17ee4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
17ee4                 | ' 
17ee4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
17ee4                 | '     if burst < 0
17ee4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
17ee4     18 14 62 FD | 	getqx	arg02
17ee8     0A 19 82 F6 | 	negc	arg04, arg02
17eec     03 18 66 F0 | 	shl	arg04, #3
17ef0     84 18 86 F1 | 	sub	arg04, #132
17ef4     04 18 46 F0 | 	shr	arg04, #4
17ef8     04 18 66 F0 | 	shl	arg04, #4
17efc     00 18 56 F2 | 	cmps	arg04, #0 wc
17f00     0E FA 65 C6 |  if_b	neg	result1, #14
17f04     10 01 90 CD |  if_b	jmp	#LR__1943
17f08                 | ' 
17f08                 | '     ' compute the input delay
17f08                 | ' 
17f08                 | '     if delay <= 0
17f08     01 20 56 F2 | 	cmps	local02, #1 wc
17f0c     10 00 90 3D |  if_ae	jmp	#LR__1940
17f10                 | '         delay := lookupDelay(freq)
17f10     0F 13 02 F6 | 	mov	arg01, local01
17f14     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
17f18     FD 20 02 F6 | 	mov	local02, result1
17f1c     04 00 90 FD | 	jmp	#LR__1941
17f20                 | LR__1940
17f20                 | '     else
17f20                 | '         delay <#= $f ' limit to 15
17f20     0F 20 66 F3 | 	fles	local02, #15
17f24                 | LR__1941
17f24                 | ' 
17f24                 | '     ' create our lock
17f24                 | ' 
17f24                 | '     driverlock := LOCKNEW()  
17f24     00 FA 05 F6 | 	mov	result1, #0
17f28     04 FA 61 FD | 	locknew	result1
17f2c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17f30     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
17f34                 | '     if driverlock == -1
17f34     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17f38     FF FF 7F FF 
17f3c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
17f40                 | '         return ERR_NO_LOCK
17f40     1A FA 65 A6 |  if_e	neg	result1, #26
17f44     D0 00 90 AD |  if_e	jmp	#LR__1943
17f48                 | ' 
17f48                 | '     ' patch in the proper data and HUB addresses to the startup structure
17f48                 | ' 
17f48                 | '     long[@startupData][0]:=clkfreq
17f48     14 1E 06 FB | 	rdlong	local01, #20
17f4c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
17f50     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
17f54                 | ' '    long[@startupData][1]:=$1000_0000
17f54                 | '     long[@startupData][5]:=@deviceData
17f54     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17f58     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f5c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
17f60     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17f64     14 14 06 F1 | 	add	arg02, #20
17f68     0A 1F 62 FC | 	wrlong	local01, arg02
17f6c                 | '     long[@startupData][6]:=@qosData
17f6c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
17f70     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f74     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17f78     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17f7c     18 14 06 F1 | 	add	arg02, #24
17f80     0A 1F 62 FC | 	wrlong	local01, arg02
17f84                 | '     long[@startupData][7]:=$7FF00
17f84     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17f88     1C 1E 06 F1 | 	add	local01, #28
17f8c     FF 03 80 FF 
17f90     0F 01 6A FC | 	wrlong	##524032, local01
17f94                 | ' 
17f94                 | '     ' setup some default bank and QoS parameter values
17f94                 | ' 
17f94                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
17f94     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17f98     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
17f9c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
17fa0     10 18 66 F0 | 	shl	arg04, #16
17fa4     0C 20 66 F0 | 	shl	local02, #12
17fa8     10 19 42 F5 | 	or	arg04, local02
17fac     18 18 46 F5 | 	or	arg04, #24
17fb0     0C 15 02 F6 | 	mov	arg02, arg04
17fb4     02 16 06 F6 | 	mov	arg03, #2
17fb8     A0 00 A0 FD | 	call	#\builtin_longfill_
17fbc                 | '     longfill(@qosData, $FFFF0000, 8)
17fbc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
17fc0     07 16 06 F6 | 	mov	arg03, #7
17fc4     28 16 62 FD | 	setq	arg03
17fc8     80 FF FF FF 
17fcc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
17fd0                 | ' 
17fd0                 | '     ' get the address of the PSRAM memory driver so we can start it
17fd0                 | ' 
17fd0                 | '     driverAddr:= driver.getDriverAddr()
17fd0                 | '     return @driver_start
17fd0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
17fd4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
17fd8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
17fdc                 | ' 
17fdc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
17fdc                 | ' 
17fdc                 | '     if desiredcog < 0
17fdc     00 22 56 F2 | 	cmps	local03, #0 wc
17fe0                 | '         desiredcog := NEWCOG
17fe0     10 22 06 C6 |  if_b	mov	local03, #16
17fe4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
17fe4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17fe8     11 25 02 F6 | 	mov	local04, local03
17fec     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
17ff0     0A 25 F2 FC | 	coginit	local04, arg02 wc
17ff4     01 24 66 C6 |  if_b	neg	local04, #1
17ff8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17ffc     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
18000                 | '     repeat until long[@startupData] == 0 
18000     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
18004                 | LR__1942
18004     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
18008     F8 FF 9F 5D |  if_ne	jmp	#LR__1942
1800c                 | ' 
1800c                 | '     return drivercog
1800c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
18010     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
18014     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18018                 | LR__1943
18018     A7 F0 03 F6 | 	mov	ptra, fp
1801c     B2 00 A0 FD | 	call	#popregs_
18020                 | _psram_spin2_startx_ret
18020     2D 00 64 FD | 	ret
18024                 | 
18024                 | ' 
18024                 | ' '..............................................................................
18024                 | ' 
18024                 | ' {{
18024                 | ' }}
18024                 | ' PUB stop() : i
18024                 | _psram_spin2_stop
18024     00 00 06 F6 | 	mov	_var01, #0
18028                 | '     if drivercog <> -1
18028     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1802c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18030     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18034     FF FF 7F FF 
18038     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1803c     70 00 90 AD |  if_e	jmp	#LR__1953
18040                 | '         cogstop(drivercog) ' a rather brutal stop
18040     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18044     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18048     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1804c     03 12 62 FD | 	cogstop	arg01
18050     97 26 48 FB | 	callpa	#(@LR__1952-@LR__1950)>>2,fcache_load_ptr_
18054                 | '         repeat i from 0 to 7
18054                 | LR__1950
18054                 | '             if long[$7FF00][i*3] < 0
18054     00 FB 01 F6 | 	mov	result1, _var01
18058     01 FA 65 F0 | 	shl	result1, #1
1805c     00 FB 01 F1 | 	add	result1, _var01
18060     02 FA 65 F0 | 	shl	result1, #2
18064     FF 03 00 FF 
18068     00 FB 05 F1 | 	add	result1, ##524032
1806c     FD FA 01 FB | 	rdlong	result1, result1
18070     00 FA 55 F2 | 	cmps	result1, #0 wc
18074     1C 00 90 3D |  if_ae	jmp	#LR__1951
18078                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
18078     00 FB 01 F6 | 	mov	result1, _var01
1807c     01 FA 65 F0 | 	shl	result1, #1
18080     00 FB 01 F1 | 	add	result1, _var01
18084     02 FA 65 F0 | 	shl	result1, #2
18088     FF 03 00 FF 
1808c     00 FB 05 F1 | 	add	result1, ##524032
18090     FD 20 68 FC | 	wrlong	#16, result1
18094                 | LR__1951
18094     01 00 06 F1 | 	add	_var01, #1
18098     08 00 56 F2 | 	cmps	_var01, #8 wc
1809c     B4 FF 9F CD |  if_b	jmp	#LR__1950
180a0                 | LR__1952
180a0                 | '         drivercog := -1
180a0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
180a4     FF FF FF FF 
180a8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
180ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
180b0                 | LR__1953
180b0                 | '     if driverlock <> -1
180b0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
180b4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
180b8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
180bc     FF FF 7F FF 
180c0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
180c4                 | '         LOCKRET(driverlock)
180c4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
180c8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
180cc     05 12 62 5D |  if_ne	lockret	arg01
180d0                 | '         driverlock := -1
180d0     FF FF FF 5F 
180d4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
180d8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
180dc     00 FB 01 F6 | 	mov	result1, _var01
180e0                 | _psram_spin2_stop_ret
180e0     2D 00 64 FD | 	ret
180e4                 | 
180e4                 | ' 
180e4                 | ' '..............................................................................
180e4                 | ' 
180e4                 | ' {{
180e4                 | ' }}
180e4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
180e4                 | _psram_spin2_read1
180e4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
180e4                 | '     if drivercog == -1 ' driver must be running
180e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
180e8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
180ec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
180f0     FF FF 7F FF 
180f4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
180f8                 | '         return ERR_INACTIVE
180f8     0F FA 65 A6 |  if_e	neg	result1, #15
180fc     7C 00 90 AD |  if_e	jmp	#LR__1961
18100                 | '     if count == 0 ' don't even bother reading
18100     00 16 0E F2 | 	cmp	arg03, #0 wz
18104                 | '         return 0
18104     00 FA 05 A6 |  if_e	mov	result1, #0
18108     70 00 90 AD |  if_e	jmp	#LR__1961
1810c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1810c     00 FA 05 F6 | 	mov	result1, #0
18110     01 FA 61 FD | 	cogid	result1
18114     FD 00 02 F6 | 	mov	_var01, result1
18118     01 00 66 F0 | 	shl	_var01, #1
1811c     FD 00 02 F1 | 	add	_var01, result1
18120     02 00 66 F0 | 	shl	_var01, #2
18124     FF 03 00 FF 
18128     00 03 06 F6 | 	mov	_var02, ##524032
1812c     00 03 02 F1 | 	add	_var02, _var01
18130                 | '     if long[mailbox] < 0
18130     01 01 02 FB | 	rdlong	_var01, _var02
18134     00 00 56 F2 | 	cmps	_var01, #0 wc
18138                 | '         return ERR_MAILBOX_BUSY
18138     1C FA 65 C6 |  if_b	neg	result1, #28
1813c     3C 00 90 CD |  if_b	jmp	#LR__1961
18140                 | '     long[mailbox][2] := count
18140     08 02 06 F1 | 	add	_var02, #8
18144     01 17 62 FC | 	wrlong	arg03, _var02
18148                 | '     long[mailbox][1] := dstHubAddr
18148     04 02 86 F1 | 	sub	_var02, #4
1814c     01 13 62 FC | 	wrlong	arg01, _var02
18150     04 02 86 F1 | 	sub	_var02, #4
18154                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
18154     0A 05 02 F6 | 	mov	_var03, arg02
18158     D9 04 06 F4 | 	bitl	_var03, #217
1815c     00 00 58 FF 
18160     00 00 06 F6 | 	mov	_var01, ##-1342177280
18164     02 01 02 F1 | 	add	_var01, _var03
18168     01 01 62 FC | 	wrlong	_var01, _var02
1816c                 | '     repeat
1816c                 | LR__1960
1816c                 | '         result := long[mailbox]    
1816c     01 05 02 FB | 	rdlong	_var03, _var02
18170     00 04 56 F2 | 	cmps	_var03, #0 wc
18174     F4 FF 9F CD |  if_b	jmp	#LR__1960
18178                 | '     while result < 0   
18178                 | '     return -result                       'return success or error
18178     02 FB 61 F6 | 	neg	result1, _var03
1817c                 | LR__1961
1817c                 | _psram_spin2_read1_ret
1817c     2D 00 64 FD | 	ret
18180                 | 
18180                 | ' 
18180                 | ' '..............................................................................
18180                 | ' 
18180                 | ' {{
18180                 | ' }}
18180                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
18180                 | _psram_spin2_write
18180                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
18180                 | '     if drivercog == -1 ' driver must be running
18180     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18184     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
18188     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1818c     FF FF 7F FF 
18190     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
18194                 | '         return ERR_INACTIVE
18194     0F FA 65 A6 |  if_e	neg	result1, #15
18198     7C 00 90 AD |  if_e	jmp	#LR__1971
1819c                 | '     if count == 0 ' don't even bother writing
1819c     00 16 0E F2 | 	cmp	arg03, #0 wz
181a0                 | '         return 0
181a0     00 FA 05 A6 |  if_e	mov	result1, #0
181a4     70 00 90 AD |  if_e	jmp	#LR__1971
181a8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
181a8     00 FA 05 F6 | 	mov	result1, #0
181ac     01 FA 61 FD | 	cogid	result1
181b0     FD 00 02 F6 | 	mov	_var01, result1
181b4     01 00 66 F0 | 	shl	_var01, #1
181b8     FD 00 02 F1 | 	add	_var01, result1
181bc     02 00 66 F0 | 	shl	_var01, #2
181c0     FF 03 00 FF 
181c4     00 03 06 F6 | 	mov	_var02, ##524032
181c8     00 03 02 F1 | 	add	_var02, _var01
181cc                 | '     if long[mailbox] < 0
181cc     01 01 02 FB | 	rdlong	_var01, _var02
181d0     00 00 56 F2 | 	cmps	_var01, #0 wc
181d4                 | '         return ERR_MAILBOX_BUSY
181d4     1C FA 65 C6 |  if_b	neg	result1, #28
181d8     3C 00 90 CD |  if_b	jmp	#LR__1971
181dc                 | '     long[mailbox][2] := count
181dc     08 02 06 F1 | 	add	_var02, #8
181e0     01 17 62 FC | 	wrlong	arg03, _var02
181e4                 | '     long[mailbox][1] := srcHubAddr
181e4     04 02 86 F1 | 	sub	_var02, #4
181e8     01 13 62 FC | 	wrlong	arg01, _var02
181ec     04 02 86 F1 | 	sub	_var02, #4
181f0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
181f0     0A 05 02 F6 | 	mov	_var03, arg02
181f4     D9 04 06 F4 | 	bitl	_var03, #217
181f8     00 00 78 FF 
181fc     00 00 06 F6 | 	mov	_var01, ##-268435456
18200     02 01 02 F1 | 	add	_var01, _var03
18204     01 01 62 FC | 	wrlong	_var01, _var02
18208                 | '     repeat
18208                 | LR__1970
18208                 | '         result := long[mailbox]    
18208     01 05 02 FB | 	rdlong	_var03, _var02
1820c     00 04 56 F2 | 	cmps	_var03, #0 wc
18210     F4 FF 9F CD |  if_b	jmp	#LR__1970
18214                 | '     while result < 0   
18214                 | '     return -result                       'return success or error
18214     02 FB 61 F6 | 	neg	result1, _var03
18218                 | LR__1971
18218                 | _psram_spin2_write_ret
18218     2D 00 64 FD | 	ret
1821c                 | 
1821c                 | ' 
1821c                 | ' ' generalized fill
1821c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1821c                 | _psram_spin2_fill
1821c     09 01 02 F6 | 	mov	_var01, arg01
18220     0A 03 02 F6 | 	mov	_var02, arg02
18224     0B 05 02 F6 | 	mov	_var03, arg03
18228     0D 07 02 F6 | 	mov	_var04, arg05
1822c                 | '     case datasize 
1822c     01 06 86 F1 | 	sub	_var04, #1
18230     04 06 26 F3 | 	fle	_var04, #4
18234     30 06 62 FD | 	jmprel	_var04
18238                 | LR__1980
18238     10 00 90 FD | 	jmp	#LR__1981
1823c     18 00 90 FD | 	jmp	#LR__1982
18240     2C 00 90 FD | 	jmp	#LR__1984
18244     1C 00 90 FD | 	jmp	#LR__1983
18248     24 00 90 FD | 	jmp	#LR__1984
1824c                 | LR__1981
1824c                 | '         1: req := driver.R_WRITEBYTE
1824c     00 00 60 FF 
18250     00 08 06 F6 | 	mov	_var05, ##-1073741824
18254     20 00 90 FD | 	jmp	#LR__1985
18258                 | LR__1982
18258                 | '         2: req := driver.R_WRITEWORD
18258     00 00 68 FF 
1825c     00 08 06 F6 | 	mov	_var05, ##-805306368
18260     14 00 90 FD | 	jmp	#LR__1985
18264                 | LR__1983
18264                 | '         4: req := driver.R_WRITELONG
18264     00 00 70 FF 
18268     00 08 06 F6 | 	mov	_var05, ##-536870912
1826c     08 00 90 FD | 	jmp	#LR__1985
18270                 | LR__1984
18270                 | '         other : return ERR_INVALID
18270     06 FA 65 F6 | 	neg	result1, #6
18274     94 00 90 FD | 	jmp	#LR__1987
18278                 | LR__1985
18278                 | '     if count == 0   ' nothing to do
18278     00 04 0E F2 | 	cmp	_var03, #0 wz
1827c                 | '         return 0
1827c     00 FA 05 A6 |  if_e	mov	result1, #0
18280     88 00 90 AD |  if_e	jmp	#LR__1987
18284                 | '     if drivercog == -1
18284     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18288     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1828c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18290     FF FF 7F FF 
18294     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
18298                 | '         return ERR_INACTIVE
18298     0F FA 65 A6 |  if_e	neg	result1, #15
1829c     6C 00 90 AD |  if_e	jmp	#LR__1987
182a0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
182a0     00 FA 05 F6 | 	mov	result1, #0
182a4     01 FA 61 FD | 	cogid	result1
182a8     FD 06 02 F6 | 	mov	_var04, result1
182ac     01 06 66 F0 | 	shl	_var04, #1
182b0     FD 06 02 F1 | 	add	_var04, result1
182b4     02 06 66 F0 | 	shl	_var04, #2
182b8     FF 03 00 FF 
182bc     00 0B 06 F6 | 	mov	_var06, ##524032
182c0     03 0B 02 F1 | 	add	_var06, _var04
182c4                 | '     if long[mailbox] < 0
182c4     05 07 02 FB | 	rdlong	_var04, _var06
182c8     00 06 56 F2 | 	cmps	_var04, #0 wc
182cc                 | '         return ERR_MAILBOX_BUSY
182cc     1C FA 65 C6 |  if_b	neg	result1, #28
182d0     38 00 90 CD |  if_b	jmp	#LR__1987
182d4                 | '     long[mailbox][2] := count
182d4     08 0A 06 F1 | 	add	_var06, #8
182d8     05 05 62 FC | 	wrlong	_var03, _var06
182dc                 | '     long[mailbox][1] := pattern
182dc     04 0A 86 F1 | 	sub	_var06, #4
182e0     05 03 62 FC | 	wrlong	_var02, _var06
182e4     04 0A 86 F1 | 	sub	_var06, #4
182e8                 | '     long[mailbox] := req + (addr & $fffffff)
182e8     04 0D 02 F6 | 	mov	_var07, _var05
182ec     00 0F 02 F6 | 	mov	_var08, _var01
182f0     7C 0E 06 F4 | 	bitl	_var08, #124
182f4     07 0D 02 F1 | 	add	_var07, _var08
182f8     05 0D 62 FC | 	wrlong	_var07, _var06
182fc                 | '     repeat
182fc                 | LR__1986
182fc                 | '         r := long[mailbox]
182fc     05 0F 02 FB | 	rdlong	_var08, _var06
18300     00 0E 56 F2 | 	cmps	_var08, #0 wc
18304     F4 FF 9F CD |  if_b	jmp	#LR__1986
18308                 | '     while r < 0
18308                 | '     return -r                  ' return 0 for success or negated error code
18308     07 FB 61 F6 | 	neg	result1, _var08
1830c                 | LR__1987
1830c                 | _psram_spin2_fill_ret
1830c     2D 00 64 FD | 	ret
18310                 | 
18310                 | ' 
18310                 | ' '..............................................................................
18310                 | ' 
18310                 | ' {{
18310                 | ' }}
18310                 | ' PUB setQos(cog, qos) : result | mailbox
18310                 | _psram_spin2_setQos
18310     09 01 02 F6 | 	mov	_var01, arg01
18314                 | '     if drivercog == -1 ' driver must be running
18314     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
18318     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1831c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18320     FF FF 7F FF 
18324     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
18328                 | '         return ERR_INACTIVE
18328     0F FA 65 A6 |  if_e	neg	result1, #15
1832c     9C 00 90 AD |  if_e	jmp	#LR__1994
18330                 | '     if cog < 0 or cog > 7 ' enforce cog id range
18330     00 00 56 F2 | 	cmps	_var01, #0 wc
18334     08 00 90 CD |  if_b	jmp	#LR__1990
18338     08 00 56 F2 | 	cmps	_var01, #8 wc
1833c     08 00 90 CD |  if_b	jmp	#LR__1991
18340                 | LR__1990
18340                 | '         return ERR_INVALID
18340     06 FA 65 F6 | 	neg	result1, #6
18344     84 00 90 FD | 	jmp	#LR__1994
18348                 | LR__1991
18348                 | '     long[@qosData][cog] := qos & !$1ff
18348     FF 15 26 F5 | 	andn	arg02, #511
1834c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18350     02 00 66 F0 | 	shl	_var01, #2
18354     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
18358     00 15 62 FC | 	wrlong	arg02, _var01
1835c                 | '     mailbox := $7FF00 + drivercog*12
1835c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18360     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18364     02 07 02 F6 | 	mov	_var04, _var03
18368     01 06 66 F0 | 	shl	_var04, #1
1836c     02 07 02 F1 | 	add	_var04, _var03
18370     02 06 66 F0 | 	shl	_var04, #2
18374     FF 03 00 FF 
18378     00 09 06 F6 | 	mov	_var05, ##524032
1837c     03 09 02 F1 | 	add	_var05, _var04
18380                 | '     repeat until LOCKTRY(driverlock)
18380     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18384                 | LR__1992
18384     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
18388     06 12 72 FD | 	locktry	arg01 wc
1838c     F4 FF 9F 3D |  if_ae	jmp	#LR__1992
18390     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18394                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18394     00 06 06 F6 | 	mov	_var04, #0
18398     01 06 62 FD | 	cogid	_var04
1839c     00 00 78 FF 
183a0     00 02 06 F6 | 	mov	_var02, ##-268435456
183a4     03 03 02 F1 | 	add	_var02, _var04
183a8     04 03 62 FC | 	wrlong	_var02, _var05
183ac                 | '     repeat while long[mailbox] < 0
183ac                 | LR__1993
183ac     04 03 02 FB | 	rdlong	_var02, _var05
183b0     00 02 56 F2 | 	cmps	_var02, #0 wc
183b4     F4 FF 9F CD |  if_b	jmp	#LR__1993
183b8                 | '     LOCKREL(driverlock)
183b8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
183bc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
183c0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
183c4     07 12 72 FD | 	lockrel	arg01 wc
183c8     00 FA 05 F6 | 	mov	result1, #0
183cc                 | LR__1994
183cc                 | _psram_spin2_setQos_ret
183cc     2D 00 64 FD | 	ret
183d0                 | 
183d0                 | ' 
183d0                 | ' '..............................................................................
183d0                 | ' 
183d0                 | ' {{
183d0                 | ' }}
183d0                 | ' PRI lookupDelay(freq) : delay | profile
183d0                 | _psram_spin2_lookupDelay
183d0                 | '     profile := @delayTable
183d0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
183d4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
183d8                 | '     delay := long[profile][0]
183d8     00 03 02 FB | 	rdlong	_var02, _var01
183dc                 | '     repeat while long[profile][1] 
183dc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
183e0     97 16 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
183e4                 | LR__2000
183e4     04 00 06 F1 | 	add	_var01, #4
183e8     00 FB 09 FB | 	rdlong	result1, _var01 wz
183ec     04 00 86 F1 | 	sub	_var01, #4
183f0     1C 00 90 AD |  if_e	jmp	#LR__2002
183f4                 | '         if freq +< long[profile][1] 
183f4     04 00 06 F1 | 	add	_var01, #4
183f8     00 FB 01 FB | 	rdlong	result1, _var01
183fc     04 00 86 F1 | 	sub	_var01, #4
18400     FD 12 12 F2 | 	cmp	arg01, result1 wc
18404                 | '             quit
18404                 | '         profile += 4
18404     04 00 06 31 |  if_ae	add	_var01, #4
18408                 | '         delay++
18408     01 02 06 31 |  if_ae	add	_var02, #1
1840c     D4 FF 9F 3D |  if_ae	jmp	#LR__2000
18410                 | LR__2001
18410                 | LR__2002
18410     01 FB 01 F6 | 	mov	result1, _var02
18414                 | _psram_spin2_lookupDelay_ret
18414     2D 00 64 FD | 	ret
18418                 | 
18418                 | ' 
18418                 | ' PUB start() : r
18418                 | _usbnew_spin2_start
18418     00 00 06 F6 | 	mov	_var01, #0
1841c                 | '   ifnot driver_cog
1841c     15 00 00 FF 
18420     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
18424     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
18428     15 00 00 FF 
1842c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
18430     38 00 90 5D |  if_ne	jmp	#LR__2010
18434                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
18434     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
18438     10 00 06 F6 | 	mov	_var01, #16
1843c     00 16 06 F6 | 	mov	arg03, #0
18440     28 16 62 FD | 	setq	arg03
18444     0A 01 F2 FC | 	coginit	_var01, arg02 wc
18448     01 00 66 C6 |  if_b	neg	_var01, #1
1844c                 | '     if r >= 0
1844c     00 00 56 F2 | 	cmps	_var01, #0 wc
18450                 | '       driver_cog := r+1
18450     00 03 02 36 |  if_ae	mov	_var02, _var01
18454     01 02 06 31 |  if_ae	add	_var02, #1
18458     15 00 00 3F 
1845c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18460     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18464     15 00 00 3F 
18468     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1846c                 | LR__2010
1846c     00 FB 01 F6 | 	mov	result1, _var01
18470                 | _usbnew_spin2_start_ret
18470     2D 00 64 FD | 	ret
18474                 | 
18474                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18474                 | ' 
18474                 | ' '' Return key event from buffer if there is one
18474                 | ' PUB get_key() : r | tail
18474                 | _usbnew_spin2_get_key
18474                 | '   tail := keyq_tail
18474     0F 00 00 FF 
18478     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1847c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18480                 | '   if keyq_head == tail
18480     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18484     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
18488     0F 00 00 FF 
1848c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18490     00 03 0A F2 | 	cmp	_var02, _var01 wz
18494                 | '     return 0 ' No event
18494     00 FA 05 A6 |  if_e	mov	result1, #0
18498     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1849c                 | '   r := keyq_data[tail]
1849c     00 03 02 F6 | 	mov	_var02, _var01
184a0     02 02 66 F0 | 	shl	_var02, #2
184a4     0F 00 00 FF 
184a8     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
184ac     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
184b0     01 FB 01 FB | 	rdlong	result1, _var02
184b4                 | '   if ++tail == KEYQUEUE_SIZE
184b4     01 00 06 F1 | 	add	_var01, #1
184b8     80 00 0E F2 | 	cmp	_var01, #128 wz
184bc                 | '     tail := 0
184bc     00 00 06 A6 |  if_e	mov	_var01, #0
184c0                 | '   keyq_tail := tail
184c0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
184c4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
184c8     0F 00 00 FF 
184cc     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
184d0                 | _usbnew_spin2_get_key_ret
184d0     2D 00 64 FD | 	ret
184d4                 | 
184d4                 | ' 
184d4                 | ' '' Emulate mouse movement
184d4                 | ' PUB mouse_move(x,y)
184d4                 | _usbnew_spin2_mouse_move
184d4     02 4A 05 F6 | 	mov	COUNT_, #2
184d8     A8 00 A0 FD | 	call	#pushregs_
184dc     09 1F 02 F6 | 	mov	local01, arg01
184e0     0A 21 02 F6 | 	mov	local02, arg02
184e4                 | '   mouse_lock := 1
184e4     14 00 00 FF 
184e8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
184ec     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
184f0     14 00 00 FF 
184f4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
184f8                 | '   waitus(2) ' hope driver is now done
184f8     02 12 06 F6 | 	mov	arg01, #2
184fc     34 0A B0 FD | 	call	#__system___waitus
18500                 | '   mouse_xacc := x
18500     14 00 00 FF 
18504     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
18508     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1850c                 | '   mouse_yacc := y
1850c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18510     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
18514                 | '   if mouse_outptr
18514     04 00 00 FF 
18518     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1851c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
18520     0F 00 00 FF 
18524     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18528     24 00 90 AD |  if_e	jmp	#LR__2020
1852c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1852c     10 20 66 F0 | 	shl	local02, #16
18530     0F 1F 32 F9 | 	getword	local01, local01, #0
18534     0F 21 42 F5 | 	or	local02, local01
18538     0F 00 00 FF 
1853c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
18540     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18544     0F 00 00 FF 
18548     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1854c     0F 21 62 FC | 	wrlong	local02, local01
18550                 | LR__2020
18550                 | '   mouse_lock := 0
18550     14 00 00 FF 
18554     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
18558     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1855c     14 00 00 FF 
18560     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18564     A7 F0 03 F6 | 	mov	ptra, fp
18568     B2 00 A0 FD | 	call	#popregs_
1856c                 | _usbnew_spin2_mouse_move_ret
1856c     2D 00 64 FD | 	ret
18570                 | 
18570                 | '     '' Set HAVE_HIDPAD to enable.
18570                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18570                 | ' 
18570                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18570                 | ' PUB hidpad_id(dev) : r
18570                 | _usbnew_spin2_hidpad_id
18570                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18570     13 00 00 FF 
18574     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
18578     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1857c     09 01 02 F6 | 	mov	_var01, arg01
18580     03 00 66 F0 | 	shl	_var01, #3
18584     09 01 82 F1 | 	sub	_var01, arg01
18588     02 00 66 F0 | 	shl	_var01, #2
1858c     00 FB 01 F1 | 	add	result1, _var01
18590     FD FA 01 FB | 	rdlong	result1, result1
18594     13 00 00 FF 
18598     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1859c                 | _usbnew_spin2_hidpad_id_ret
1859c     2D 00 64 FD | 	ret
185a0                 | 
185a0                 | ' 
185a0                 | ' '' Get all button states for a device
185a0                 | ' PUB hidpad_buttons(dev) : r 
185a0                 | _usbnew_spin2_hidpad_buttons
185a0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
185a0     13 00 00 FF 
185a4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
185a8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
185ac     09 01 02 F6 | 	mov	_var01, arg01
185b0     03 00 66 F0 | 	shl	_var01, #3
185b4     09 01 82 F1 | 	sub	_var01, arg01
185b8     02 00 66 F0 | 	shl	_var01, #2
185bc     00 FB 01 F1 | 	add	result1, _var01
185c0     14 FA 05 F1 | 	add	result1, #20
185c4     FD FA 01 FB | 	rdlong	result1, result1
185c8     13 00 00 FF 
185cc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
185d0                 | _usbnew_spin2_hidpad_buttons_ret
185d0     2D 00 64 FD | 	ret
185d4                 | 
185d4                 | ' 
185d4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
185d4                 | ' PUB hidpad_axis(dev,axnum) : r
185d4                 | _usbnew_spin2_hidpad_axis
185d4                 | '   if axnum +>= 6
185d4     06 14 16 F2 | 	cmp	arg02, #6 wc
185d8                 | '     return 0
185d8     00 FA 05 36 |  if_ae	mov	result1, #0
185dc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
185e0                 | '   else 
185e0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
185e0     13 00 00 FF 
185e4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
185e8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
185ec     09 01 02 F6 | 	mov	_var01, arg01
185f0     03 00 66 F0 | 	shl	_var01, #3
185f4     09 01 82 F1 | 	sub	_var01, arg01
185f8     02 00 66 F0 | 	shl	_var01, #2
185fc     00 FB 01 F1 | 	add	result1, _var01
18600     04 00 06 F6 | 	mov	_var01, #4
18604     0A 01 02 F1 | 	add	_var01, arg02
18608     01 00 66 F0 | 	shl	_var01, #1
1860c     FD 00 02 F1 | 	add	_var01, result1
18610     00 FB E1 FA | 	rdword	result1, _var01
18614     0F FA 65 F7 | 	signx	result1, #15
18618     13 00 00 FF 
1861c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18620                 | _usbnew_spin2_hidpad_axis_ret
18620     2D 00 64 FD | 	ret
18624                 | 
18624                 | ' 
18624                 | ' 
18624                 | ' '--------------------------------------------------------------
18624                 | ' '---------- Init the variables, start the cog. ----------------
18624                 | ' '--------------------------------------------------------------
18624                 | ' 
18624                 | ' pub start(mbox,scope,cache) :cog,base | iii
18624                 | _Audio093b_8_sc_spin2_start
18624     04 4A 05 F6 | 	mov	COUNT_, #4
18628     A8 00 A0 FD | 	call	#pushregs_
1862c     09 1F 02 F6 | 	mov	local01, arg01
18630                 | ' 
18630                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
18630                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
18630                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
18630                 | ' 
18630                 | ' mailboxaddr:=mbox 
18630     F2 1E 62 FC | 	wrlong	local01, objptr
18634                 | ' scope_ptr:=scope
18634     04 E4 05 F1 | 	add	objptr, #4
18638     F2 14 62 FC | 	wrlong	arg02, objptr
1863c                 | ' cache_ptr:=cache
1863c     04 E4 05 F1 | 	add	objptr, #4
18640     F2 16 62 FC | 	wrlong	arg03, objptr
18644                 | ' base:=@channel1[0]
18644     04 E4 05 F1 | 	add	objptr, #4
18648     F2 20 02 F6 | 	mov	local02, objptr
1864c                 | ' 
1864c                 | ' repeat iii from 0 to 7
1864c     00 22 06 F6 | 	mov	local03, #0
18650     01 00 00 FF 
18654     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
18658     0C E4 85 F1 | 	sub	objptr, #12
1865c     97 80 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
18660                 | LR__2030
18660                 | '   long[base+32*iii]:=0
18660     10 1F 02 F6 | 	mov	local01, local02
18664     11 FD 01 F6 | 	mov	result2, local03
18668     05 FC 65 F0 | 	shl	result2, #5
1866c     FE 1E 02 F1 | 	add	local01, result2
18670     0F 01 68 FC | 	wrlong	#0, local01
18674                 | '   long[base+32*iii+4]:=0
18674     10 1F 02 F6 | 	mov	local01, local02
18678     11 FD 01 F6 | 	mov	result2, local03
1867c     05 FC 65 F0 | 	shl	result2, #5
18680     FE 1E 02 F1 | 	add	local01, result2
18684     04 1E 06 F1 | 	add	local01, #4
18688     0F 01 68 FC | 	wrlong	#0, local01
1868c                 | '   long[base+32*iii+12]:=0
1868c     10 25 02 F6 | 	mov	local04, local02
18690     11 1F 02 F6 | 	mov	local01, local03
18694     05 1E 66 F0 | 	shl	local01, #5
18698     0F 25 02 F1 | 	add	local04, local01
1869c     0C 24 06 F1 | 	add	local04, #12
186a0     12 01 68 FC | 	wrlong	#0, local04
186a4                 | '   long[base+32*iii+16]:=2 
186a4     10 25 02 F6 | 	mov	local04, local02
186a8     11 1F 02 F6 | 	mov	local01, local03
186ac     05 1E 66 F0 | 	shl	local01, #5
186b0     0F 25 02 F1 | 	add	local04, local01
186b4     10 24 06 F1 | 	add	local04, #16
186b8     12 05 68 FC | 	wrlong	#2, local04
186bc                 | '   word[base+32*iii+20]:=0
186bc     10 25 02 F6 | 	mov	local04, local02
186c0     11 1F 02 F6 | 	mov	local01, local03
186c4     05 1E 66 F0 | 	shl	local01, #5
186c8     0F 25 02 F1 | 	add	local04, local01
186cc     14 24 06 F1 | 	add	local04, #20
186d0     12 01 58 FC | 	wrword	#0, local04
186d4                 | '   word[base+32*iii+22]:=8192
186d4     10 25 02 F6 | 	mov	local04, local02
186d8     11 1F 02 F6 | 	mov	local01, local03
186dc     05 1E 66 F0 | 	shl	local01, #5
186e0     0F 25 02 F1 | 	add	local04, local01
186e4     16 24 06 F1 | 	add	local04, #22
186e8     10 00 80 FF 
186ec     12 01 58 FC | 	wrword	##8192, local04
186f0                 | '   word[base+32*iii+24]:=4000+2*iii
186f0     11 25 02 F6 | 	mov	local04, local03
186f4     01 24 66 F0 | 	shl	local04, #1
186f8     07 00 00 FF 
186fc     A0 1F 06 F6 | 	mov	local01, ##4000
18700     12 1F 02 F1 | 	add	local01, local04
18704     10 25 02 F6 | 	mov	local04, local02
18708     11 FD 01 F6 | 	mov	result2, local03
1870c     05 FC 65 F0 | 	shl	result2, #5
18710     FE 24 02 F1 | 	add	local04, result2
18714     18 24 06 F1 | 	add	local04, #24
18718     12 1F 52 FC | 	wrword	local01, local04
1871c                 | '   word[base+32*iii+26]:=2
1871c     10 25 02 F6 | 	mov	local04, local02
18720     11 1F 02 F6 | 	mov	local01, local03
18724     05 1E 66 F0 | 	shl	local01, #5
18728     0F 25 02 F1 | 	add	local04, local01
1872c     1A 24 06 F1 | 	add	local04, #26
18730     12 05 58 FC | 	wrword	#2, local04
18734                 | '   long [base+32*iii+8]:=@null | $C0000000
18734     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
18738     3E 1E 26 F4 | 	bith	local01, #62
1873c     10 25 02 F6 | 	mov	local04, local02
18740     11 17 02 F6 | 	mov	arg03, local03
18744     05 16 66 F0 | 	shl	arg03, #5
18748     0B 25 02 F1 | 	add	local04, arg03
1874c     08 24 06 F1 | 	add	local04, #8
18750     12 1F 62 FC | 	wrlong	local01, local04
18754     01 22 06 F1 | 	add	local03, #1
18758     08 22 56 F2 | 	cmps	local03, #8 wc
1875c     00 FF 9F CD |  if_b	jmp	#LR__2030
18760                 | LR__2031
18760     01 00 00 FF 
18764     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
18768                 | '   
18768                 | ' cog:=coginit(16,@audio,@mailboxaddr)
18768     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1876c     F2 16 02 F6 | 	mov	arg03, objptr
18770     10 24 06 F6 | 	mov	local04, #16
18774     28 16 62 FD | 	setq	arg03
18778     0A 25 F2 FC | 	coginit	local04, arg02 wc
1877c     01 24 66 C6 |  if_b	neg	local04, #1
18780                 | ' waitms(100)
18780     64 12 06 F6 | 	mov	arg01, #100
18784     40 07 B0 FD | 	call	#__system___waitms
18788                 | ' return cog,base
18788     10 FD 01 F6 | 	mov	result2, local02
1878c     12 FB 01 F6 | 	mov	result1, local04
18790     A7 F0 03 F6 | 	mov	ptra, fp
18794     B2 00 A0 FD | 	call	#popregs_
18798                 | _Audio093b_8_sc_spin2_start_ret
18798     2D 00 64 FD | 	ret
1879c                 | 
1879c                 | ' 
1879c                 | ' ' a simple play procedure to not poke everything. 
1879c                 | ' 
1879c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1879c                 | _Audio093b_8_sc_spin2_play
1879c     0C E4 05 F1 | 	add	objptr, #12
187a0     F2 00 02 F6 | 	mov	_var01, objptr
187a4     05 12 66 F0 | 	shl	arg01, #5
187a8     09 01 02 F1 | 	add	_var01, arg01
187ac     00 00 60 FF 
187b0     00 14 06 F1 | 	add	arg02, ##-1073741824
187b4     00 13 02 F6 | 	mov	arg01, _var01
187b8     08 12 06 F1 | 	add	arg01, #8
187bc     09 15 62 FC | 	wrlong	arg02, arg01
187c0     00 15 02 F6 | 	mov	arg02, _var01
187c4     0C 14 06 F1 | 	add	arg02, #12
187c8     0A 1B 62 FC | 	wrlong	arg05, arg02
187cc     00 1C 56 F2 | 	cmps	arg06, #0 wc
187d0     00 15 02 36 |  if_ae	mov	arg02, _var01
187d4     10 14 06 31 |  if_ae	add	arg02, #16
187d8     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
187dc     02 1A 06 C1 |  if_b	add	arg05, #2
187e0     00 13 02 C6 |  if_b	mov	arg01, _var01
187e4     10 12 06 C1 |  if_b	add	arg01, #16
187e8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
187ec     0B 15 52 F6 | 	abs	arg02, arg03 wc
187f0     0F 1B 80 FF 
187f4     0A 3F 1A FD | 	qdiv	##3546911, arg02
187f8                 | ' 
187f8                 | ' base2:=@channel1[0]+32*channel
187f8                 | ' long[base2+8]:=sample+$C0000000 
187f8                 | ' long[base2+12]:= len
187f8                 | ' if loop >=0 
187f8                 | '   long[base2+16]:= loop
187f8     0C E4 85 F1 | 	sub	objptr, #12
187fc                 | ' else
187fc                 | '   long[base2+16]:= len+2
187fc                 | ' word[base2+20]:=vol
187fc     00 15 02 F6 | 	mov	arg02, _var01
18800     14 14 06 F1 | 	add	arg02, #20
18804     0A 19 52 FC | 	wrword	arg04, arg02
18808                 | ' word[base2+24]:= 3546911/splfreq 
18808     00 13 02 F6 | 	mov	arg01, _var01
1880c     18 12 06 F1 | 	add	arg01, #24
18810                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18810                 | ' long[base2+28]:=$40000000
18810     18 14 62 FD | 	getqx	arg02
18814     0A 15 82 F6 | 	negc	arg02, arg02
18818     09 15 52 FC | 	wrword	arg02, arg01
1881c     00 15 02 F6 | 	mov	arg02, _var01
18820     1A 14 06 F1 | 	add	arg02, #26
18824     0A 01 5A FC | 	wrword	#256, arg02
18828     1C 00 06 F1 | 	add	_var01, #28
1882c     00 00 A0 FF 
18830     00 01 68 FC | 	wrlong	##1073741824, _var01
18834                 | _Audio093b_8_sc_spin2_play_ret
18834     2D 00 64 FD | 	ret
18838                 | 
18838                 | ' until (i >>8) >=len
18838                 | ' 
18838                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
18838                 | _Audio093b_8_sc_spin2_play8
18838                 | ' 
18838                 | ' base2:=@channel1[0]+32*channel
18838     0C E4 05 F1 | 	add	objptr, #12
1883c     F2 00 02 F6 | 	mov	_var01, objptr
18840     05 12 66 F0 | 	shl	arg01, #5
18844     09 01 02 F1 | 	add	_var01, arg01
18848                 | ' long[base2]:=0
18848     00 01 68 FC | 	wrlong	#0, _var01
1884c                 | ' long[base2+8]:=sample+$40000000 
1884c     00 00 20 FF 
18850     00 14 06 F1 | 	add	arg02, ##1073741824
18854     00 13 02 F6 | 	mov	arg01, _var01
18858     08 12 06 F1 | 	add	arg01, #8
1885c     09 15 62 FC | 	wrlong	arg02, arg01
18860                 | ' if loop>=0
18860     00 1C 56 F2 | 	cmps	arg06, #0 wc
18864     0C E4 85 F1 | 	sub	objptr, #12
18868     1C 00 90 CD |  if_b	jmp	#LR__2040
1886c                 | '   long[base2+12]:=loop
1886c     00 15 02 F6 | 	mov	arg02, _var01
18870     0C 14 06 F1 | 	add	arg02, #12
18874     0A 1D 62 FC | 	wrlong	arg06, arg02
18878                 | '   long[base2+16]:= len
18878     00 1D 02 F6 | 	mov	arg06, _var01
1887c     10 1C 06 F1 | 	add	arg06, #16
18880     0E 1B 62 FC | 	wrlong	arg05, arg06
18884     1C 00 90 FD | 	jmp	#LR__2041
18888                 | LR__2040
18888                 | ' else
18888                 | '   long[base2+12]:= len
18888     00 1D 02 F6 | 	mov	arg06, _var01
1888c     0C 1C 06 F1 | 	add	arg06, #12
18890     0E 1B 62 FC | 	wrlong	arg05, arg06
18894                 | '   long[base2+16]:= len+1
18894     01 1A 06 F1 | 	add	arg05, #1
18898     00 13 02 F6 | 	mov	arg01, _var01
1889c     10 12 06 F1 | 	add	arg01, #16
188a0     09 1B 62 FC | 	wrlong	arg05, arg01
188a4                 | LR__2041
188a4     0B 17 52 F6 | 	abs	arg03, arg03 wc
188a8     0F 1B 80 FF 
188ac     0B 3F 1A FD | 	qdiv	##3546911, arg03
188b0                 | ' word[base2+20]:=vol
188b0     00 17 02 F6 | 	mov	arg03, _var01
188b4     14 16 06 F1 | 	add	arg03, #20
188b8     0B 19 52 FC | 	wrword	arg04, arg03
188bc                 | ' word[base2+24]:= 3546911/splfreq 
188bc     00 13 02 F6 | 	mov	arg01, _var01
188c0     18 12 06 F1 | 	add	arg01, #24
188c4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
188c4                 | ' long[base2+28]:=$40000000
188c4     18 18 62 FD | 	getqx	arg04
188c8     0C 19 82 F6 | 	negc	arg04, arg04
188cc     09 19 52 FC | 	wrword	arg04, arg01
188d0     00 19 02 F6 | 	mov	arg04, _var01
188d4     1A 18 06 F1 | 	add	arg04, #26
188d8     0C 01 5A FC | 	wrword	#256, arg04
188dc     1C 00 06 F1 | 	add	_var01, #28
188e0     00 00 A0 FF 
188e4     00 01 68 FC | 	wrlong	##1073741824, _var01
188e8                 | _Audio093b_8_sc_spin2_play8_ret
188e8     2D 00 64 FD | 	ret
188ec                 | 
188ec                 | ' 
188ec                 | '     
188ec                 | ' pub stop(channel) 'silence it
188ec                 | _Audio093b_8_sc_spin2_stop
188ec                 | ' 
188ec                 | ' word[@channel1[0]+32*channel+20]:=0
188ec     0C E4 05 F1 | 	add	objptr, #12
188f0     F2 00 02 F6 | 	mov	_var01, objptr
188f4     05 12 66 F0 | 	shl	arg01, #5
188f8     09 01 02 F1 | 	add	_var01, arg01
188fc     14 00 06 F1 | 	add	_var01, #20
18900     00 01 58 FC | 	wrword	#0, _var01
18904     0C E4 85 F1 | 	sub	objptr, #12
18908                 | _Audio093b_8_sc_spin2_stop_ret
18908     2D 00 64 FD | 	ret
1890c                 | hubexit
1890c     81 00 80 FD | 	jmp	#cogexit
18910                 | 
18910                 | __system___setbaud
18910     14 64 06 FB | 	rdlong	muldiva_, #20
18914     09 67 02 F6 | 	mov	muldivb_, arg01
18918     BA 00 A0 FD | 	call	#divide_
1891c     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
18920                 | LR__2050
18920     3E FA 9D FA | 	rdpin	result1, #62 wc
18924     FE FC A1 F1 | 	subx	result2, result2
18928     F4 FF 9F CD |  if_b	jmp	#LR__2050
1892c                 | LR__2051
1892c     40 7C 64 FD | 	dirl	#62
18930     40 7E 64 FD | 	dirl	#63
18934     F4 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
18938     10 66 66 F0 | 	shl	muldivb_, #16
1893c     07 14 06 F6 | 	mov	arg02, #7
18940     33 15 02 F1 | 	add	arg02, muldivb_
18944     3E F8 0C FC | 	wrpin	#124, #62
18948     3E 14 16 FC | 	wxpin	arg02, #62
1894c     3F 7C 0C FC | 	wrpin	#62, #63
18950     14 14 06 F1 | 	add	arg02, #20
18954     3F 14 16 FC | 	wxpin	arg02, #63
18958     41 7C 64 FD | 	dirh	#62
1895c     41 7E 64 FD | 	dirh	#63
18960                 | __system___setbaud_ret
18960     2D 00 64 FD | 	ret
18964                 | 
18964                 | __system___txraw
18964     01 4A 05 F6 | 	mov	COUNT_, #1
18968     A8 00 A0 FD | 	call	#pushregs_
1896c     09 1F 02 F6 | 	mov	local01, arg01
18970     97 06 48 FB | 	callpa	#(@LR__2061-@LR__2060)>>2,fcache_load_ptr_
18974                 | LR__2060
18974     3E FA 9D FA | 	rdpin	result1, #62 wc
18978     FE FC A1 F1 | 	subx	result2, result2
1897c     F4 FF 9F CD |  if_b	jmp	#LR__2060
18980                 | LR__2061
18980     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18984     C2 01 00 AF 
18988     00 12 06 A6 |  if_e	mov	arg01, ##230400
1898c     80 FF BF AD |  if_e	call	#__system___setbaud
18990     58 7C 64 FD | 	drvl	#62
18994     3E 1E 26 FC | 	wypin	local01, #62
18998     01 FA 05 F6 | 	mov	result1, #1
1899c     A7 F0 03 F6 | 	mov	ptra, fp
189a0     B2 00 A0 FD | 	call	#popregs_
189a4                 | __system___txraw_ret
189a4     2D 00 64 FD | 	ret
189a8                 | 
189a8                 | __system___rxraw
189a8     0D 4A 05 F6 | 	mov	COUNT_, #13
189ac     A8 00 A0 FD | 	call	#pushregs_
189b0     09 1F 02 F6 | 	mov	local01, arg01
189b4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
189b8     C2 01 00 AF 
189bc     00 12 06 A6 |  if_e	mov	arg01, ##230400
189c0     4C FF BF AD |  if_e	call	#__system___setbaud
189c4     00 1E 0E F2 | 	cmp	local01, #0 wz
189c8     20 00 90 AD |  if_e	jmp	#LR__2070
189cc     14 22 06 FB | 	rdlong	local03, #20
189d0     0A 22 46 F0 | 	shr	local03, #10
189d4     11 1F 02 FD | 	qmul	local01, local03
189d8     1A FA 61 FD | 	getct	result1
189dc     18 24 62 FD | 	getqx	local04
189e0     12 FB 01 F1 | 	add	result1, local04
189e4     FD 26 02 F6 | 	mov	local05, result1
189e8     04 00 90 FD | 	jmp	#LR__2071
189ec                 | LR__2070
189ec     00 26 06 F6 | 	mov	local05, #0
189f0                 | LR__2071
189f0     01 28 66 F6 | 	neg	local06, #1
189f4     3F 2A 06 F6 | 	mov	local07, #63
189f8     00 2C 06 F6 | 	mov	local08, #0
189fc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18a00     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
18a04     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18a08                 | LR__2072
18a08     08 2E 16 F4 | 	testb	local09, #8 wc
18a0c     09 2E 76 F4 | 	testbn	local09, #9 andc
18a10     0A 2E 46 F0 | 	shr	local09, #10
18a14     01 2C 06 C6 |  if_b	mov	local08, #1
18a18     40 7E 6C 3D |  if_ae	testp	#63 wz
18a1c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18a20     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18a24     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
18a28                 | LR__2073
18a28     00 20 06 F6 | 	mov	local02, #0
18a2c     00 2C 0E F2 | 	cmp	local08, #0 wz
18a30     01 20 66 56 |  if_ne	neg	local02, #1
18a34     00 30 06 F6 | 	mov	local10, #0
18a38     00 22 06 F6 | 	mov	local03, #0
18a3c     00 1E 0E F2 | 	cmp	local01, #0 wz
18a40     01 22 66 56 |  if_ne	neg	local03, #1
18a44     00 24 06 F6 | 	mov	local04, #0
18a48     00 32 06 F6 | 	mov	local11, #0
18a4c     1A FA 61 FD | 	getct	result1
18a50     FD 34 02 F6 | 	mov	local12, result1
18a54     1A 37 02 F6 | 	mov	local13, local12
18a58     13 37 82 F1 | 	sub	local13, local05
18a5c     00 36 56 F2 | 	cmps	local13, #0 wc
18a60     00 32 26 C6 |  if_b	not	local11, #0
18a64     00 32 0E F2 | 	cmp	local11, #0 wz
18a68     00 24 26 56 |  if_ne	not	local04, #0
18a6c     12 23 CA F7 | 	test	local03, local04 wz
18a70     00 30 26 56 |  if_ne	not	local10, #0
18a74     18 21 4A F5 | 	or	local02, local10 wz
18a78     8C FF 9F AD |  if_e	jmp	#LR__2072
18a7c     00 2C 0E F2 | 	cmp	local08, #0 wz
18a80     17 29 02 56 |  if_ne	mov	local06, local09
18a84     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
18a88     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18a8c     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18a90     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18a94     14 FB 01 F6 | 	mov	result1, local06
18a98     A7 F0 03 F6 | 	mov	ptra, fp
18a9c     B2 00 A0 FD | 	call	#popregs_
18aa0                 | __system___rxraw_ret
18aa0     2D 00 64 FD | 	ret
18aa4                 | 
18aa4                 | __system___getus
18aa4     1A FC 71 FD | 	getct	result2 wc
18aa8     1A 00 62 FD | 	getct	_var01
18aac     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18ab0     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
18ab4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18ab8     20 00 90 5D |  if_ne	jmp	#LR__2080
18abc     14 02 06 FB | 	rdlong	_var02, #20
18ac0     A1 07 00 FF 
18ac4     40 02 16 FD | 	qdiv	_var02, ##1000000
18ac8     10 E8 05 F1 | 	add	ptr___system__dat__, #16
18acc     18 FA 61 FD | 	getqx	result1
18ad0     FD 02 02 F6 | 	mov	_var02, result1
18ad4     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
18ad8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18adc                 | LR__2080
18adc     01 FD 11 FD | 	qdiv	result2, _var02
18ae0     19 FC 61 FD | 	getqy	result2
18ae4     28 FC 61 FD | 	setq	result2
18ae8     01 01 12 FD | 	qdiv	_var01, _var02
18aec     18 FA 61 FD | 	getqx	result1
18af0                 | __system___getus_ret
18af0     2D 00 64 FD | 	ret
18af4                 | 
18af4                 | __system____builtin_memmove
18af4     09 01 02 F6 | 	mov	_var01, arg01
18af8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
18afc     10 00 90 CD |  if_b	jmp	#LR__2090
18b00     0A 03 02 F6 | 	mov	_var02, arg02
18b04     0B 03 02 F1 | 	add	_var02, arg03
18b08     01 13 52 F2 | 	cmps	arg01, _var02 wc
18b0c     48 00 90 CD |  if_b	jmp	#LR__2096
18b10                 | LR__2090
18b10     0B 05 02 F6 | 	mov	_var03, arg03
18b14     02 04 4E F0 | 	shr	_var03, #2 wz
18b18     18 00 90 AD |  if_e	jmp	#LR__2095
18b1c     97 0A 48 FB | 	callpa	#(@LR__2093-@LR__2091)>>2,fcache_load_ptr_
18b20                 | LR__2091
18b20     02 09 D8 FC | 	rep	@LR__2094, _var03
18b24                 | LR__2092
18b24     0A 05 02 FB | 	rdlong	_var03, arg02
18b28     09 05 62 FC | 	wrlong	_var03, arg01
18b2c     04 12 06 F1 | 	add	arg01, #4
18b30     04 14 06 F1 | 	add	arg02, #4
18b34                 | LR__2093
18b34                 | LR__2094
18b34                 | LR__2095
18b34     02 16 CE F7 | 	test	arg03, #2 wz
18b38     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18b3c     09 03 52 5C |  if_ne	wrword	_var02, arg01
18b40     02 12 06 51 |  if_ne	add	arg01, #2
18b44     02 14 06 51 |  if_ne	add	arg02, #2
18b48     01 16 CE F7 | 	test	arg03, #1 wz
18b4c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18b50     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18b54     28 00 90 FD | 	jmp	#LR__2102
18b58                 | LR__2096
18b58     0B 13 02 F1 | 	add	arg01, arg03
18b5c     0B 15 02 F1 | 	add	arg02, arg03
18b60     0B 07 0A F6 | 	mov	_var04, arg03 wz
18b64     18 00 90 AD |  if_e	jmp	#LR__2101
18b68     97 0A 48 FB | 	callpa	#(@LR__2099-@LR__2097)>>2,fcache_load_ptr_
18b6c                 | LR__2097
18b6c     03 09 D8 FC | 	rep	@LR__2100, _var04
18b70                 | LR__2098
18b70     01 12 86 F1 | 	sub	arg01, #1
18b74     01 14 86 F1 | 	sub	arg02, #1
18b78     0A 03 C2 FA | 	rdbyte	_var02, arg02
18b7c     09 03 42 FC | 	wrbyte	_var02, arg01
18b80                 | LR__2099
18b80                 | LR__2100
18b80                 | LR__2101
18b80                 | LR__2102
18b80     00 FB 01 F6 | 	mov	result1, _var01
18b84                 | __system____builtin_memmove_ret
18b84     2D 00 64 FD | 	ret
18b88                 | 
18b88                 | __system____builtin_strcpy
18b88     09 01 02 F6 | 	mov	_var01, arg01
18b8c     97 0A 48 FB | 	callpa	#(@LR__2111-@LR__2110)>>2,fcache_load_ptr_
18b90                 | LR__2110
18b90     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18b94     09 FB 41 FC | 	wrbyte	result1, arg01
18b98     01 14 06 F1 | 	add	arg02, #1
18b9c     01 12 06 F1 | 	add	arg01, #1
18ba0     EC FF 9F 5D |  if_ne	jmp	#LR__2110
18ba4                 | LR__2111
18ba4     00 FB 01 F6 | 	mov	result1, _var01
18ba8                 | __system____builtin_strcpy_ret
18ba8     2D 00 64 FD | 	ret
18bac                 | 
18bac                 | __system____topofstack
18bac     00 4A 05 F6 | 	mov	COUNT_, #0
18bb0     A8 00 A0 FD | 	call	#pushregs_
18bb4     08 F0 07 F1 | 	add	ptra, #8
18bb8     04 4E 05 F1 | 	add	fp, #4
18bbc     A7 12 62 FC | 	wrlong	arg01, fp
18bc0     A7 FA 01 F6 | 	mov	result1, fp
18bc4     04 4E 85 F1 | 	sub	fp, #4
18bc8     A7 F0 03 F6 | 	mov	ptra, fp
18bcc     B2 00 A0 FD | 	call	#popregs_
18bd0                 | __system____topofstack_ret
18bd0     2D 00 64 FD | 	ret
18bd4                 | 
18bd4                 | __system___lockmem
18bd4     00 FA 05 F6 | 	mov	result1, #0
18bd8     01 FA 61 FD | 	cogid	result1
18bdc     00 FB 05 F1 | 	add	result1, #256
18be0                 | LR__2120
18be0     09 01 0A FB | 	rdlong	_var01, arg01 wz
18be4     09 FB 61 AC |  if_e	wrlong	result1, arg01
18be8     09 01 02 AB |  if_e	rdlong	_var01, arg01
18bec     09 01 02 AB |  if_e	rdlong	_var01, arg01
18bf0     FD 00 0A F2 | 	cmp	_var01, result1 wz
18bf4     E8 FF 9F 5D |  if_ne	jmp	#LR__2120
18bf8                 | __system___lockmem_ret
18bf8     2D 00 64 FD | 	ret
18bfc                 | 
18bfc                 | __system___string_cmp
18bfc     97 14 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
18c00                 | LR__2130
18c00     09 01 C2 FA | 	rdbyte	_var01, arg01
18c04     0A 03 C2 FA | 	rdbyte	_var02, arg02
18c08     00 05 02 F6 | 	mov	_var03, _var01
18c0c     01 05 8A F1 | 	sub	_var03, _var02 wz
18c10     01 12 06 F1 | 	add	arg01, #1
18c14     01 14 06 F1 | 	add	arg02, #1
18c18     0C 00 90 5D |  if_ne	jmp	#LR__2132
18c1c     00 00 0E F2 | 	cmp	_var01, #0 wz
18c20     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18c24     D8 FF 9F 5D |  if_ne	jmp	#LR__2130
18c28                 | LR__2131
18c28                 | LR__2132
18c28     02 FB 01 F6 | 	mov	result1, _var03
18c2c                 | __system___string_cmp_ret
18c2c     2D 00 64 FD | 	ret
18c30                 | 
18c30                 | __system___string_concat
18c30     05 4A 05 F6 | 	mov	COUNT_, #5
18c34     A8 00 A0 FD | 	call	#pushregs_
18c38     09 1F 02 F6 | 	mov	local01, arg01
18c3c     0A 21 02 F6 | 	mov	local02, arg02
18c40     0F 13 02 F6 | 	mov	arg01, local01
18c44     09 23 02 F6 | 	mov	local03, arg01
18c48     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
18c4c                 | LR__2140
18c4c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18c50     01 22 06 51 |  if_ne	add	local03, #1
18c54     F4 FF 9F 5D |  if_ne	jmp	#LR__2140
18c58                 | LR__2141
18c58     09 23 82 F1 | 	sub	local03, arg01
18c5c     11 25 02 F6 | 	mov	local04, local03
18c60     10 13 02 F6 | 	mov	arg01, local02
18c64     09 23 02 F6 | 	mov	local03, arg01
18c68     97 06 48 FB | 	callpa	#(@LR__2143-@LR__2142)>>2,fcache_load_ptr_
18c6c                 | LR__2142
18c6c     11 FB C9 FA | 	rdbyte	result1, local03 wz
18c70     01 22 06 51 |  if_ne	add	local03, #1
18c74     F4 FF 9F 5D |  if_ne	jmp	#LR__2142
18c78                 | LR__2143
18c78     09 23 82 F1 | 	sub	local03, arg01
18c7c     12 13 02 F6 | 	mov	arg01, local04
18c80     11 13 02 F1 | 	add	arg01, local03
18c84     01 12 06 F1 | 	add	arg01, #1
18c88     FC 3C B0 FD | 	call	#__system___gc_alloc_managed
18c8c     FD 26 0A F6 | 	mov	local05, result1 wz
18c90     28 00 90 AD |  if_e	jmp	#LR__2144
18c94     13 13 02 F6 | 	mov	arg01, local05
18c98     0F 15 02 F6 | 	mov	arg02, local01
18c9c     12 17 02 F6 | 	mov	arg03, local04
18ca0     50 FE BF FD | 	call	#__system____builtin_memmove
18ca4     13 13 02 F6 | 	mov	arg01, local05
18ca8     12 13 02 F1 | 	add	arg01, local04
18cac     01 22 06 F1 | 	add	local03, #1
18cb0     10 15 02 F6 | 	mov	arg02, local02
18cb4     11 17 02 F6 | 	mov	arg03, local03
18cb8     38 FE BF FD | 	call	#__system____builtin_memmove
18cbc                 | LR__2144
18cbc     13 FB 01 F6 | 	mov	result1, local05
18cc0     A7 F0 03 F6 | 	mov	ptra, fp
18cc4     B2 00 A0 FD | 	call	#popregs_
18cc8                 | __system___string_concat_ret
18cc8     2D 00 64 FD | 	ret
18ccc                 | 
18ccc                 | __system___tx
18ccc     02 4A 05 F6 | 	mov	COUNT_, #2
18cd0     A8 00 A0 FD | 	call	#pushregs_
18cd4     09 1F 02 F6 | 	mov	local01, arg01
18cd8     0A 1E 0E F2 | 	cmp	local01, #10 wz
18cdc     18 00 90 5D |  if_ne	jmp	#LR__2150
18ce0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18ce4     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
18ce8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18cec     02 20 CE F7 | 	test	local02, #2 wz
18cf0     0D 12 06 56 |  if_ne	mov	arg01, #13
18cf4     6C FC BF 5D |  if_ne	call	#__system___txraw
18cf8                 | LR__2150
18cf8     0F 13 02 F6 | 	mov	arg01, local01
18cfc     64 FC BF FD | 	call	#__system___txraw
18d00     A7 F0 03 F6 | 	mov	ptra, fp
18d04     B2 00 A0 FD | 	call	#popregs_
18d08                 | __system___tx_ret
18d08     2D 00 64 FD | 	ret
18d0c                 | 
18d0c                 | __system___rx
18d0c     01 4A 05 F6 | 	mov	COUNT_, #1
18d10     A8 00 A0 FD | 	call	#pushregs_
18d14                 | LR__2160
18d14     00 12 06 F6 | 	mov	arg01, #0
18d18     8C FC BF FD | 	call	#__system___rxraw
18d1c     FD 1E 02 F6 | 	mov	local01, result1
18d20     FF FF 7F FF 
18d24     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18d28     E8 FF 9F AD |  if_e	jmp	#LR__2160
18d2c     0D 1E 0E F2 | 	cmp	local01, #13 wz
18d30     14 00 90 5D |  if_ne	jmp	#LR__2161
18d34     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18d38     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18d3c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18d40     02 FA CD F7 | 	test	result1, #2 wz
18d44     0A 1E 06 56 |  if_ne	mov	local01, #10
18d48                 | LR__2161
18d48     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18d4c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18d50     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18d54     01 12 CE F7 | 	test	arg01, #1 wz
18d58     1C 00 90 AD |  if_e	jmp	#LR__2164
18d5c     7F 1E 0E F2 | 	cmp	local01, #127 wz
18d60     0C 00 90 5D |  if_ne	jmp	#LR__2162
18d64     08 12 06 F6 | 	mov	arg01, #8
18d68     60 FF BF FD | 	call	#__system___tx
18d6c     08 00 90 FD | 	jmp	#LR__2163
18d70                 | LR__2162
18d70     0F 13 02 F6 | 	mov	arg01, local01
18d74     54 FF BF FD | 	call	#__system___tx
18d78                 | LR__2163
18d78                 | LR__2164
18d78     0F FB 01 F6 | 	mov	result1, local01
18d7c     A7 F0 03 F6 | 	mov	ptra, fp
18d80     B2 00 A0 FD | 	call	#popregs_
18d84                 | __system___rx_ret
18d84     2D 00 64 FD | 	ret
18d88                 | 
18d88                 | __system___pinwrite
18d88     09 01 02 F6 | 	mov	_var01, arg01
18d8c     1F 00 06 F5 | 	and	_var01, #31
18d90     20 12 CE F7 | 	test	arg01, #32 wz
18d94     06 12 46 F0 | 	shr	arg01, #6
18d98     09 13 CA F9 | 	bmask	arg01, arg01
18d9c     00 13 62 F0 | 	shl	arg01, _var01
18da0     00 15 62 F0 | 	shl	arg02, _var01
18da4     1C 00 90 AD |  if_e	jmp	#LR__2170
18da8     09 F7 43 F5 | 	or	dirb, arg01
18dac     FD 01 02 F6 | 	mov	_var01, outb
18db0     09 01 22 F5 | 	andn	_var01, arg01
18db4     09 15 02 F5 | 	and	arg02, arg01
18db8     0A 01 42 F5 | 	or	_var01, arg02
18dbc     00 FB 03 F6 | 	mov	outb, _var01
18dc0     18 00 90 FD | 	jmp	#LR__2171
18dc4                 | LR__2170
18dc4     09 F5 43 F5 | 	or	dira, arg01
18dc8     FC 01 02 F6 | 	mov	_var01, outa
18dcc     09 01 22 F5 | 	andn	_var01, arg01
18dd0     09 15 02 F5 | 	and	arg02, arg01
18dd4     0A 01 42 F5 | 	or	_var01, arg02
18dd8     00 F9 03 F6 | 	mov	outa, _var01
18ddc                 | LR__2171
18ddc                 | __system___pinwrite_ret
18ddc     2D 00 64 FD | 	ret
18de0                 | 
18de0                 | __system___basic_read_line
18de0     06 4A 05 F6 | 	mov	COUNT_, #6
18de4     A8 00 A0 FD | 	call	#pushregs_
18de8     09 1F 02 F6 | 	mov	local01, arg01
18dec     00 20 06 F6 | 	mov	local02, #0
18df0     18 22 06 F6 | 	mov	local03, #24
18df4     00 24 06 F6 | 	mov	local04, #0
18df8     18 12 06 F6 | 	mov	arg01, #24
18dfc     88 3B B0 FD | 	call	#__system___gc_alloc_managed
18e00     FD 26 0A F6 | 	mov	local05, result1 wz
18e04     13 FB 01 A6 |  if_e	mov	result1, local05
18e08     B0 00 90 AD |  if_e	jmp	#LR__2183
18e0c                 | LR__2180
18e0c     0F 13 02 F6 | 	mov	arg01, local01
18e10     74 0B B0 FD | 	call	#__system___basic_get_char
18e14     FD 28 02 F6 | 	mov	local06, result1
18e18     01 28 56 F2 | 	cmps	local06, #1 wc
18e1c     8C 00 90 CD |  if_b	jmp	#LR__2182
18e20     0A 28 0E F2 | 	cmp	local06, #10 wz
18e24     10 00 90 5D |  if_ne	jmp	#LR__2181
18e28     00 24 0E F2 | 	cmp	local04, #0 wz
18e2c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
18e30     01 20 86 11 |  if_a	sub	local02, #1
18e34     74 00 90 FD | 	jmp	#LR__2182
18e38                 | LR__2181
18e38     0D 28 0E F2 | 	cmp	local06, #13 wz
18e3c     01 24 06 A6 |  if_e	mov	local04, #1
18e40     00 24 06 56 |  if_ne	mov	local04, #0
18e44     08 28 0E F2 | 	cmp	local06, #8 wz
18e48     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
18e4c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
18e50     01 20 86 21 |  if_nc_and_z	sub	local02, #1
18e54     B4 FF 9F AD |  if_e	jmp	#LR__2180
18e58     13 17 02 F6 | 	mov	arg03, local05
18e5c     10 17 02 F1 | 	add	arg03, local02
18e60     0B 29 42 FC | 	wrbyte	local06, arg03
18e64     01 20 06 F1 | 	add	local02, #1
18e68     11 21 0A F2 | 	cmp	local02, local03 wz
18e6c     9C FF 9F 5D |  if_ne	jmp	#LR__2180
18e70     11 13 02 F6 | 	mov	arg01, local03
18e74     20 12 06 F1 | 	add	arg01, #32
18e78     0C 3B B0 FD | 	call	#__system___gc_alloc_managed
18e7c     FD 28 0A F6 | 	mov	local06, result1 wz
18e80     14 FB 01 A6 |  if_e	mov	result1, local06
18e84     34 00 90 AD |  if_e	jmp	#LR__2183
18e88     14 13 02 F6 | 	mov	arg01, local06
18e8c     13 15 02 F6 | 	mov	arg02, local05
18e90     11 17 02 F6 | 	mov	arg03, local03
18e94     5C FC BF FD | 	call	#__system____builtin_memmove
18e98     20 22 06 F1 | 	add	local03, #32
18e9c     13 13 02 F6 | 	mov	arg01, local05
18ea0     20 3C B0 FD | 	call	#__system___gc_free
18ea4     14 27 02 F6 | 	mov	local05, local06
18ea8     60 FF 9F FD | 	jmp	#LR__2180
18eac                 | LR__2182
18eac     13 29 02 F6 | 	mov	local06, local05
18eb0     10 29 02 F1 | 	add	local06, local02
18eb4     14 01 48 FC | 	wrbyte	#0, local06
18eb8     13 FB 01 F6 | 	mov	result1, local05
18ebc                 | LR__2183
18ebc     A7 F0 03 F6 | 	mov	ptra, fp
18ec0     B2 00 A0 FD | 	call	#popregs_
18ec4                 | __system___basic_read_line_ret
18ec4     2D 00 64 FD | 	ret
18ec8                 | 
18ec8                 | __system___waitms
18ec8     09 01 02 F6 | 	mov	_var01, arg01
18ecc     1A 02 62 FD | 	getct	_var02
18ed0     14 04 06 FB | 	rdlong	_var03, #20
18ed4     97 14 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
18ed8                 | LR__2190
18ed8     01 00 00 FF 
18edc     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
18ee0     1C 00 90 CD |  if_b	jmp	#LR__2192
18ee4     02 03 02 F1 | 	add	_var02, _var03
18ee8     01 13 02 F6 | 	mov	arg01, _var02
18eec     00 12 66 FA | 	addct1	arg01, #0
18ef0     24 22 60 FD | 	waitct1
18ef4     01 00 00 FF 
18ef8     E8 01 86 F1 | 	sub	_var01, ##1000
18efc     D8 FF 9F FD | 	jmp	#LR__2190
18f00                 | LR__2191
18f00                 | LR__2192
18f00     01 00 56 F2 | 	cmps	_var01, #1 wc
18f04     28 00 90 CD |  if_b	jmp	#LR__2193
18f08     02 01 02 FD | 	qmul	_var01, _var03
18f0c     01 00 00 FF 
18f10     E8 17 06 F6 | 	mov	arg03, ##1000
18f14     19 FA 61 FD | 	getqy	result1
18f18     18 12 62 FD | 	getqx	arg01
18f1c     28 FA 61 FD | 	setq	result1
18f20     0B 13 12 FD | 	qdiv	arg01, arg03
18f24     18 12 62 FD | 	getqx	arg01
18f28     01 13 62 FA | 	addct1	arg01, _var02
18f2c     24 22 60 FD | 	waitct1
18f30                 | LR__2193
18f30                 | __system___waitms_ret
18f30     2D 00 64 FD | 	ret
18f34                 | 
18f34                 | __system___waitus
18f34     09 01 02 F6 | 	mov	_var01, arg01
18f38     1A 02 62 FD | 	getct	_var02
18f3c     14 04 06 FB | 	rdlong	_var03, #20
18f40     97 14 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
18f44                 | LR__2200
18f44     A1 07 00 FF 
18f48     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
18f4c     1C 00 90 CD |  if_b	jmp	#LR__2202
18f50     02 03 02 F1 | 	add	_var02, _var03
18f54     01 13 02 F6 | 	mov	arg01, _var02
18f58     00 12 66 FA | 	addct1	arg01, #0
18f5c     24 22 60 FD | 	waitct1
18f60     A1 07 00 FF 
18f64     40 00 86 F1 | 	sub	_var01, ##1000000
18f68     D8 FF 9F FD | 	jmp	#LR__2200
18f6c                 | LR__2201
18f6c                 | LR__2202
18f6c     01 00 56 F2 | 	cmps	_var01, #1 wc
18f70     28 00 90 CD |  if_b	jmp	#LR__2203
18f74     02 01 02 FD | 	qmul	_var01, _var03
18f78     A1 07 00 FF 
18f7c     40 16 06 F6 | 	mov	arg03, ##1000000
18f80     19 FA 61 FD | 	getqy	result1
18f84     18 12 62 FD | 	getqx	arg01
18f88     28 FA 61 FD | 	setq	result1
18f8c     0B 13 12 FD | 	qdiv	arg01, arg03
18f90     18 FA 61 FD | 	getqx	result1
18f94     FD 02 62 FA | 	addct1	_var02, result1
18f98     24 22 60 FD | 	waitct1
18f9c                 | LR__2203
18f9c                 | __system___waitus_ret
18f9c     2D 00 64 FD | 	ret
18fa0                 | 
18fa0                 | __system___mount
18fa0     0B 4A 05 F6 | 	mov	COUNT_, #11
18fa4     A8 00 A0 FD | 	call	#pushregs_
18fa8     09 1F 02 F6 | 	mov	local01, arg01
18fac     0A 21 0A F6 | 	mov	local02, arg02 wz
18fb0     01 22 66 F6 | 	neg	local03, #1
18fb4     01 FA 65 A6 |  if_e	neg	result1, #1
18fb8     98 02 90 AD |  if_e	jmp	#LR__2225
18fbc     0F FB C1 FA | 	rdbyte	result1, local01
18fc0     2F FA 0D F2 | 	cmp	result1, #47 wz
18fc4     28 00 90 5D |  if_ne	jmp	#LR__2212
18fc8     0F 13 02 F6 | 	mov	arg01, local01
18fcc     09 25 02 F6 | 	mov	local04, arg01
18fd0     97 06 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
18fd4                 | LR__2210
18fd4     12 FB C9 FA | 	rdbyte	result1, local04 wz
18fd8     01 24 06 51 |  if_ne	add	local04, #1
18fdc     F4 FF 9F 5D |  if_ne	jmp	#LR__2210
18fe0                 | LR__2211
18fe0     09 25 82 F1 | 	sub	local04, arg01
18fe4     12 FB 01 F6 | 	mov	result1, local04
18fe8     10 FA 55 F2 | 	cmps	result1, #16 wc
18fec     14 00 90 CD |  if_b	jmp	#LR__2213
18ff0                 | LR__2212
18ff0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18ff4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
18ff8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18ffc     01 FA 65 F6 | 	neg	result1, #1
19000     50 02 90 FD | 	jmp	#LR__2225
19004                 | LR__2213
19004     00 26 06 F6 | 	mov	local05, #0
19008                 | LR__2214
19008     04 26 56 F2 | 	cmps	local05, #4 wc
1900c     B0 00 90 3D |  if_ae	jmp	#LR__2219
19010     13 13 02 F6 | 	mov	arg01, local05
19014     02 12 66 F0 | 	shl	arg01, #2
19018     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1901c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19020     09 FB 09 FB | 	rdlong	result1, arg01 wz
19024     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19028     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1902c     13 23 02 86 |  if_c_and_z	mov	local03, local05
19030     84 00 90 8D |  if_c_and_z	jmp	#LR__2218
19034     13 13 02 F6 | 	mov	arg01, local05
19038     02 12 66 F0 | 	shl	arg01, #2
1903c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19040     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19044     09 13 02 FB | 	rdlong	arg01, arg01
19048     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1904c     09 25 02 F6 | 	mov	local04, arg01
19050     97 06 48 FB | 	callpa	#(@LR__2216-@LR__2215)>>2,fcache_load_ptr_
19054                 | LR__2215
19054     12 FB C9 FA | 	rdbyte	result1, local04 wz
19058     01 24 06 51 |  if_ne	add	local04, #1
1905c     F4 FF 9F 5D |  if_ne	jmp	#LR__2215
19060                 | LR__2216
19060     09 25 82 F1 | 	sub	local04, arg01
19064     12 29 02 F6 | 	mov	local06, local04
19068     14 13 02 F6 | 	mov	arg01, local06
1906c     0F 13 02 F1 | 	add	arg01, local01
19070     09 FB C1 FA | 	rdbyte	result1, arg01
19074     2F FA 0D F2 | 	cmp	result1, #47 wz
19078     14 2B 02 56 |  if_ne	mov	local07, local06
1907c     0F 2B 02 51 |  if_ne	add	local07, local01
19080     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19084     30 00 90 5D |  if_ne	jmp	#LR__2217
19088     13 17 02 F6 | 	mov	arg03, local05
1908c     02 16 66 F0 | 	shl	arg03, #2
19090     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19094     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19098     0B 15 02 FB | 	rdlong	arg02, arg03
1909c     0F 13 02 F6 | 	mov	arg01, local01
190a0     14 17 02 F6 | 	mov	arg03, local06
190a4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
190a8     20 4D B0 FD | 	call	#__system__strncmp
190ac     00 FA 0D F2 | 	cmp	result1, #0 wz
190b0     13 23 02 A6 |  if_e	mov	local03, local05
190b4     08 00 90 AD |  if_e	jmp	#LR__2219
190b8                 | LR__2217
190b8                 | LR__2218
190b8     01 26 06 F1 | 	add	local05, #1
190bc     48 FF 9F FD | 	jmp	#LR__2214
190c0                 | LR__2219
190c0     FF FF 7F FF 
190c4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
190c8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
190cc     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
190d0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
190d4     01 FA 65 A6 |  if_e	neg	result1, #1
190d8     78 01 90 AD |  if_e	jmp	#LR__2225
190dc     11 27 02 F6 | 	mov	local05, local03
190e0     13 2B 02 F6 | 	mov	local07, local05
190e4     02 2A 66 F0 | 	shl	local07, #2
190e8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
190ec     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
190f0     15 29 0A FB | 	rdlong	local06, local07 wz
190f4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
190f8     58 00 90 AD |  if_e	jmp	#LR__2220
190fc     4C 28 06 F1 | 	add	local06, #76
19100     14 2B 0A FB | 	rdlong	local07, local06 wz
19104     4C 28 86 F1 | 	sub	local06, #76
19108     48 00 90 AD |  if_e	jmp	#LR__2220
1910c     4C 28 06 F1 | 	add	local06, #76
19110     14 2B 02 FB | 	rdlong	local07, local06
19114     15 23 02 F6 | 	mov	local03, local07
19118     13 2A 46 F7 | 	zerox	local07, #19
1911c     14 22 46 F0 | 	shr	local03, #20
19120     02 22 66 F0 | 	shl	local03, #2
19124     ED 22 02 F1 | 	add	local03, __methods__
19128     11 23 02 FB | 	rdlong	local03, local03
1912c     13 29 02 F6 | 	mov	local06, local05
19130     02 28 66 F0 | 	shl	local06, #2
19134     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19138     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1913c     14 13 02 FB | 	rdlong	arg01, local06
19140     F2 28 02 F6 | 	mov	local06, objptr
19144     15 E5 01 F6 | 	mov	objptr, local07
19148     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1914c     2D 22 62 FD | 	call	local03
19150     14 E5 01 F6 | 	mov	objptr, local06
19154                 | LR__2220
19154     13 2D 02 F6 | 	mov	local08, local05
19158     02 2C 66 F0 | 	shl	local08, #2
1915c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19160     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
19164     16 21 62 FC | 	wrlong	local02, local08
19168     00 20 0E F2 | 	cmp	local02, #0 wz
1916c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19170     18 00 90 5D |  if_ne	jmp	#LR__2221
19174     02 26 66 F0 | 	shl	local05, #2
19178     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1917c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19180     13 01 68 FC | 	wrlong	#0, local05
19184     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19188     C4 00 90 FD | 	jmp	#LR__2224
1918c                 | LR__2221
1918c     13 2F 02 F6 | 	mov	local09, local05
19190     04 2E 66 F0 | 	shl	local09, #4
19194     24 E8 05 F1 | 	add	ptr___system__dat__, #36
19198     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
1919c     17 13 02 F6 | 	mov	arg01, local09
191a0     0F 15 02 F6 | 	mov	arg02, local01
191a4     10 16 06 F6 | 	mov	arg03, #16
191a8     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
191ac     70 4B B0 FD | 	call	#__system__strncpy
191b0     48 20 06 F1 | 	add	local02, #72
191b4     10 2D 0A FB | 	rdlong	local08, local02 wz
191b8     48 20 86 F1 | 	sub	local02, #72
191bc     7C 00 90 AD |  if_e	jmp	#LR__2223
191c0     48 20 06 F1 | 	add	local02, #72
191c4     10 2D 02 FB | 	rdlong	local08, local02
191c8     16 31 02 F6 | 	mov	local10, local08
191cc     13 2C 46 F7 | 	zerox	local08, #19
191d0     14 30 46 F0 | 	shr	local10, #20
191d4     02 30 66 F0 | 	shl	local10, #2
191d8     ED 30 02 F1 | 	add	local10, __methods__
191dc     18 31 02 FB | 	rdlong	local10, local10
191e0     17 13 02 F6 | 	mov	arg01, local09
191e4     F2 32 02 F6 | 	mov	local11, objptr
191e8     16 E5 01 F6 | 	mov	objptr, local08
191ec     2D 30 62 FD | 	call	local10
191f0     19 E5 01 F6 | 	mov	objptr, local11
191f4     FD 12 0A F6 | 	mov	arg01, result1 wz
191f8     40 00 90 AD |  if_e	jmp	#LR__2222
191fc     13 2D 02 F6 | 	mov	local08, local05
19200     02 2C 66 F0 | 	shl	local08, #2
19204     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19208     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1920c     16 01 68 FC | 	wrlong	#0, local08
19210     02 26 66 F0 | 	shl	local05, #2
19214     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
19218     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1921c     13 01 68 FC | 	wrlong	#0, local05
19220     09 13 6A F6 | 	neg	arg01, arg01 wz
19224     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
19228     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1922c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19230     01 FA 65 56 |  if_ne	neg	result1, #1
19234     00 FA 05 A6 |  if_e	mov	result1, #0
19238     18 00 90 FD | 	jmp	#LR__2225
1923c                 | LR__2222
1923c                 | LR__2223
1923c     02 26 66 F0 | 	shl	local05, #2
19240     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19244     F4 26 02 F1 | 	add	local05, ptr___system__dat__
19248     13 2F 62 FC | 	wrlong	local09, local05
1924c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19250                 | LR__2224
19250     00 FA 05 F6 | 	mov	result1, #0
19254                 | LR__2225
19254     A7 F0 03 F6 | 	mov	ptra, fp
19258     B2 00 A0 FD | 	call	#popregs_
1925c                 | __system___mount_ret
1925c     2D 00 64 FD | 	ret
19260                 | 
19260                 | __system___chdir
19260     00 4A 05 F6 | 	mov	COUNT_, #0
19264     A8 00 A0 FD | 	call	#pushregs_
19268     40 F0 07 F1 | 	add	ptra, #64
1926c     04 4E 05 F1 | 	add	fp, #4
19270     A7 12 62 FC | 	wrlong	arg01, fp
19274     04 4E 05 F1 | 	add	fp, #4
19278     A7 14 02 F6 | 	mov	arg02, fp
1927c     08 4E 85 F1 | 	sub	fp, #8
19280     7C 47 B0 FD | 	call	#__system__stat
19284     3C 4E 05 F1 | 	add	fp, #60
19288     A7 FA 61 FC | 	wrlong	result1, fp
1928c     3C 4E 85 F1 | 	sub	fp, #60
19290     00 FA 0D F2 | 	cmp	result1, #0 wz
19294     3C 4E 05 51 |  if_ne	add	fp, #60
19298     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1929c     3C 4E 85 51 |  if_ne	sub	fp, #60
192a0     BC 00 90 5D |  if_ne	jmp	#LR__2232
192a4     10 4E 05 F1 | 	add	fp, #16
192a8     A7 12 02 FB | 	rdlong	arg01, fp
192ac     10 4E 85 F1 | 	sub	fp, #16
192b0     78 00 00 FF 
192b4     00 12 06 F5 | 	and	arg01, ##61440
192b8     08 00 00 FF 
192bc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
192c0     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
192c4     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
192c8     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
192cc     01 FA 65 56 |  if_ne	neg	result1, #1
192d0     8C 00 90 5D |  if_ne	jmp	#LR__2232
192d4     04 4E 05 F1 | 	add	fp, #4
192d8     A7 16 02 FB | 	rdlong	arg03, fp
192dc     04 4E 85 F1 | 	sub	fp, #4
192e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
192e4     2F 16 0E F2 | 	cmp	arg03, #47 wz
192e8     24 00 90 5D |  if_ne	jmp	#LR__2230
192ec     84 E8 05 F1 | 	add	ptr___system__dat__, #132
192f0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
192f4     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
192f8     04 4E 05 F1 | 	add	fp, #4
192fc     A7 14 02 FB | 	rdlong	arg02, fp
19300     04 4E 85 F1 | 	sub	fp, #4
19304     00 17 06 F6 | 	mov	arg03, #256
19308     14 4A B0 FD | 	call	#__system__strncpy
1930c     4C 00 90 FD | 	jmp	#LR__2231
19310                 | LR__2230
19310     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19314     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19318     38 4E 05 F1 | 	add	fp, #56
1931c     A7 12 62 FC | 	wrlong	arg01, fp
19320     38 4E 85 F1 | 	sub	fp, #56
19324     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
19328     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1932c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19330     00 17 06 F6 | 	mov	arg03, #256
19334     E8 49 B0 FD | 	call	#__system__strncpy
19338     38 4E 05 F1 | 	add	fp, #56
1933c     A7 12 02 FB | 	rdlong	arg01, fp
19340     34 4E 85 F1 | 	sub	fp, #52
19344     A7 14 02 FB | 	rdlong	arg02, fp
19348     04 4E 85 F1 | 	sub	fp, #4
1934c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19350     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19354     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19358     10 00 B0 FD | 	call	#__system____getvfsforfile
1935c                 | LR__2231
1935c     00 FA 05 F6 | 	mov	result1, #0
19360                 | LR__2232
19360     A7 F0 03 F6 | 	mov	ptra, fp
19364     B2 00 A0 FD | 	call	#popregs_
19368                 | __system___chdir_ret
19368     2D 00 64 FD | 	ret
1936c                 | 
1936c                 | __system____getvfsforfile
1936c     0E 4A 05 F6 | 	mov	COUNT_, #14
19370     A8 00 A0 FD | 	call	#pushregs_
19374     09 1F 02 F6 | 	mov	local01, arg01
19378     0A 21 02 F6 | 	mov	local02, arg02
1937c     0B 23 02 F6 | 	mov	local03, arg03
19380     97 10 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
19384                 | LR__2240
19384     10 FB C1 FA | 	rdbyte	result1, local02
19388     2F FA 0D F2 | 	cmp	result1, #47 wz
1938c     01 20 06 A1 |  if_e	add	local02, #1
19390     10 25 C2 AA |  if_e	rdbyte	local04, local02
19394     01 20 86 A1 |  if_e	sub	local02, #1
19398     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1939c     01 20 06 A1 |  if_e	add	local02, #1
193a0     E0 FF 9F AD |  if_e	jmp	#LR__2240
193a4                 | LR__2241
193a4     10 25 C2 FA | 	rdbyte	local04, local02
193a8     2F 24 0E F2 | 	cmp	local04, #47 wz
193ac     14 00 90 5D |  if_ne	jmp	#LR__2242
193b0     0F 13 02 F6 | 	mov	arg01, local01
193b4     10 15 02 F6 | 	mov	arg02, local02
193b8     00 17 06 F6 | 	mov	arg03, #256
193bc     60 49 B0 FD | 	call	#__system__strncpy
193c0     7C 00 90 FD | 	jmp	#LR__2244
193c4                 | LR__2242
193c4     84 E8 05 F1 | 	add	ptr___system__dat__, #132
193c8     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
193cc     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
193d0     0F 13 02 F6 | 	mov	arg01, local01
193d4     00 17 06 F6 | 	mov	arg03, #256
193d8     44 49 B0 FD | 	call	#__system__strncpy
193dc     10 25 CA FA | 	rdbyte	local04, local02 wz
193e0     5C 00 90 AD |  if_e	jmp	#LR__2243
193e4     10 25 C2 FA | 	rdbyte	local04, local02
193e8     2E 24 0E F2 | 	cmp	local04, #46 wz
193ec     01 20 06 A1 |  if_e	add	local02, #1
193f0     10 27 C2 AA |  if_e	rdbyte	local05, local02
193f4     01 20 86 A1 |  if_e	sub	local02, #1
193f8     13 29 02 A6 |  if_e	mov	local06, local05
193fc     07 28 4E A7 |  if_e	zerox	local06, #7 wz
19400     3C 00 90 AD |  if_e	jmp	#LR__2243
19404     0F 27 C2 FA | 	rdbyte	local05, local01
19408     2F 26 0E F2 | 	cmp	local05, #47 wz
1940c     01 1E 06 A1 |  if_e	add	local01, #1
19410     0F 25 C2 AA |  if_e	rdbyte	local04, local01
19414     01 1E 86 A1 |  if_e	sub	local01, #1
19418     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1941c     40 01 00 5F 
19420     E4 14 06 56 |  if_ne	mov	arg02, ##@LR__4290
19424     0F 13 02 56 |  if_ne	mov	arg01, local01
19428     00 17 06 56 |  if_ne	mov	arg03, #256
1942c     3C 49 B0 5D |  if_ne	call	#__system__strncat
19430     0F 13 02 F6 | 	mov	arg01, local01
19434     10 15 02 F6 | 	mov	arg02, local02
19438     00 17 06 F6 | 	mov	arg03, #256
1943c     2C 49 B0 FD | 	call	#__system__strncat
19440                 | LR__2243
19440                 | LR__2244
19440     0F 13 02 F6 | 	mov	arg01, local01
19444     E4 4A B0 FD | 	call	#__system___normalizeName
19448     0F 25 CA FA | 	rdbyte	local04, local01 wz
1944c     1C 00 90 AD |  if_e	jmp	#LR__2245
19450     0F 25 C2 FA | 	rdbyte	local04, local01
19454     2F 24 0E F2 | 	cmp	local04, #47 wz
19458     01 1E 06 A1 |  if_e	add	local01, #1
1945c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19460     01 1E 86 A1 |  if_e	sub	local01, #1
19464     00 28 4E A2 |  if_e	cmps	local06, #0 wz
19468     18 00 90 5D |  if_ne	jmp	#LR__2246
1946c                 | LR__2245
1946c     01 00 00 FF 
19470     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19474     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
19478     01 00 00 FF 
1947c     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19480     EC 01 90 FD | 	jmp	#LR__2260
19484                 | LR__2246
19484     00 2A 06 F6 | 	mov	local07, #0
19488                 | LR__2247
19488     04 2A 56 F2 | 	cmps	local07, #4 wc
1948c     CC 01 90 3D |  if_ae	jmp	#LR__2259
19490     15 29 02 F6 | 	mov	local06, local07
19494     02 28 66 F0 | 	shl	local06, #2
19498     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1949c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
194a0     14 29 0A FB | 	rdlong	local06, local06 wz
194a4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
194a8     A8 01 90 AD |  if_e	jmp	#LR__2258
194ac     15 25 02 F6 | 	mov	local04, local07
194b0     02 24 66 F0 | 	shl	local04, #2
194b4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
194b8     F4 24 02 F1 | 	add	local04, ptr___system__dat__
194bc     12 13 02 FB | 	rdlong	arg01, local04
194c0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
194c4     09 2D 02 F6 | 	mov	local08, arg01
194c8     97 06 48 FB | 	callpa	#(@LR__2249-@LR__2248)>>2,fcache_load_ptr_
194cc                 | LR__2248
194cc     16 FB C9 FA | 	rdbyte	result1, local08 wz
194d0     01 2C 06 51 |  if_ne	add	local08, #1
194d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2248
194d8                 | LR__2249
194d8     09 2D 82 F1 | 	sub	local08, arg01
194dc     16 2F 02 F6 | 	mov	local09, local08
194e0     17 25 02 F6 | 	mov	local04, local09
194e4     0F 25 02 F1 | 	add	local04, local01
194e8     12 29 C2 FA | 	rdbyte	local06, local04
194ec     2F 28 0E F2 | 	cmp	local06, #47 wz
194f0     17 31 02 56 |  if_ne	mov	local10, local09
194f4     0F 31 02 51 |  if_ne	add	local10, local01
194f8     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
194fc     54 01 90 5D |  if_ne	jmp	#LR__2257
19500     15 17 02 F6 | 	mov	arg03, local07
19504     02 16 66 F0 | 	shl	arg03, #2
19508     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1950c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19510     0B 15 02 FB | 	rdlong	arg02, arg03
19514     17 17 02 F6 | 	mov	arg03, local09
19518     0F 13 02 F6 | 	mov	arg01, local01
1951c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19520     A8 48 B0 FD | 	call	#__system__strncmp
19524     00 FA 4D F2 | 	cmps	result1, #0 wz
19528     28 01 90 5D |  if_ne	jmp	#LR__2257
1952c     15 33 02 F6 | 	mov	local11, local07
19530     02 32 66 F0 | 	shl	local11, #2
19534     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19538     F4 32 02 F1 | 	add	local11, ptr___system__dat__
1953c     19 35 02 FB | 	rdlong	local12, local11
19540     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19544     97 22 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
19548                 | LR__2250
19548     17 29 02 F6 | 	mov	local06, local09
1954c     01 28 06 F1 | 	add	local06, #1
19550     0F 29 02 F1 | 	add	local06, local01
19554     14 33 C2 FA | 	rdbyte	local11, local06
19558     2E 32 0E F2 | 	cmp	local11, #46 wz
1955c     2C 00 90 5D |  if_ne	jmp	#LR__2252
19560     17 33 02 F6 | 	mov	local11, local09
19564     02 32 06 F1 | 	add	local11, #2
19568     0F 33 02 F1 | 	add	local11, local01
1956c     19 31 C2 FA | 	rdbyte	local10, local11
19570     2F 30 0E F2 | 	cmp	local10, #47 wz
19574     17 37 02 56 |  if_ne	mov	local13, local09
19578     02 36 06 51 |  if_ne	add	local13, #2
1957c     0F 37 02 51 |  if_ne	add	local13, local01
19580     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19584     01 2E 06 A1 |  if_e	add	local09, #1
19588     BC FF 9F AD |  if_e	jmp	#LR__2250
1958c                 | LR__2251
1958c                 | LR__2252
1958c     00 22 0E F2 | 	cmp	local03, #0 wz
19590     11 13 02 56 |  if_ne	mov	arg01, local03
19594     0F 15 02 56 |  if_ne	mov	arg02, local01
19598     00 17 06 56 |  if_ne	mov	arg03, #256
1959c     80 47 B0 5D |  if_ne	call	#__system__strncpy
195a0     0F 15 02 F6 | 	mov	arg02, local01
195a4     17 15 02 F1 | 	add	arg02, local09
195a8     01 14 06 F1 | 	add	arg02, #1
195ac     0F 13 02 F6 | 	mov	arg01, local01
195b0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
195b4     0F 13 02 F6 | 	mov	arg01, local01
195b8     09 2D 02 F6 | 	mov	local08, arg01
195bc     97 06 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
195c0                 | LR__2253
195c0     16 FB C9 FA | 	rdbyte	result1, local08 wz
195c4     01 2C 06 51 |  if_ne	add	local08, #1
195c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2253
195cc                 | LR__2254
195cc     09 2D 82 F1 | 	sub	local08, arg01
195d0     16 2F 02 F6 | 	mov	local09, local08
195d4                 | LR__2255
195d4     01 2E 56 F2 | 	cmps	local09, #1 wc
195d8     70 00 90 CD |  if_b	jmp	#LR__2256
195dc     17 25 02 F6 | 	mov	local04, local09
195e0     0F 25 02 F1 | 	add	local04, local01
195e4     12 33 C2 FA | 	rdbyte	local11, local04
195e8     2F 32 0E F2 | 	cmp	local11, #47 wz
195ec     17 33 02 A6 |  if_e	mov	local11, local09
195f0     0F 33 02 A1 |  if_e	add	local11, local01
195f4     19 01 48 AC |  if_e	wrbyte	#0, local11
195f8     01 2E 86 A1 |  if_e	sub	local09, #1
195fc     D4 FF 9F AD |  if_e	jmp	#LR__2255
19600     17 25 02 F6 | 	mov	local04, local09
19604     0F 25 02 F1 | 	add	local04, local01
19608     12 33 C2 FA | 	rdbyte	local11, local04
1960c     2E 32 0E F2 | 	cmp	local11, #46 wz
19610     38 00 90 5D |  if_ne	jmp	#LR__2256
19614     02 2E 56 F2 | 	cmps	local09, #2 wc
19618     30 00 90 CD |  if_b	jmp	#LR__2256
1961c     17 39 02 F6 | 	mov	local14, local09
19620     01 38 86 F1 | 	sub	local14, #1
19624     0F 39 02 F1 | 	add	local14, local01
19628     1C 27 C2 FA | 	rdbyte	local05, local14
1962c     2F 26 0E F2 | 	cmp	local05, #47 wz
19630     18 00 90 5D |  if_ne	jmp	#LR__2256
19634     17 25 02 F6 | 	mov	local04, local09
19638     01 24 86 F1 | 	sub	local04, #1
1963c     0F 25 02 F1 | 	add	local04, local01
19640     12 01 48 FC | 	wrbyte	#0, local04
19644     02 2E 86 F1 | 	sub	local09, #2
19648     88 FF 9F FD | 	jmp	#LR__2255
1964c                 | LR__2256
1964c     1A FB 01 F6 | 	mov	result1, local12
19650     1C 00 90 FD | 	jmp	#LR__2260
19654                 | LR__2257
19654                 | LR__2258
19654     01 2A 06 F1 | 	add	local07, #1
19658     2C FE 9F FD | 	jmp	#LR__2247
1965c                 | LR__2259
1965c     03 00 00 FF 
19660     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19664     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
19668     03 00 00 FF 
1966c     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19670                 | LR__2260
19670     A7 F0 03 F6 | 	mov	ptra, fp
19674     B2 00 A0 FD | 	call	#popregs_
19678                 | __system____getvfsforfile_ret
19678     2D 00 64 FD | 	ret
1967c                 | 
1967c                 | __system___basic_open
1967c     05 4A 05 F6 | 	mov	COUNT_, #5
19680     A8 00 A0 FD | 	call	#pushregs_
19684     0A 1F 02 F6 | 	mov	local01, arg02
19688     0B 21 02 F6 | 	mov	local02, arg03
1968c     0C 23 02 F6 | 	mov	local03, arg04
19690     00 24 06 F6 | 	mov	local04, #0
19694     60 46 B0 FD | 	call	#__system____getftab
19698     FD 26 0A F6 | 	mov	local05, result1 wz
1969c     18 00 90 5D |  if_ne	jmp	#LR__2270
196a0     EE 12 02 F6 | 	mov	arg01, abortchain
196a4     0C 14 06 F6 | 	mov	arg02, #12
196a8     01 16 06 F6 | 	mov	arg03, #1
196ac     DA 00 A0 FD | 	call	#__longjmp
196b0     01 FA 65 F6 | 	neg	result1, #1
196b4     10 01 90 FD | 	jmp	#LR__2279
196b8                 | LR__2270
196b8     08 26 06 F1 | 	add	local05, #8
196bc     13 FB 09 FB | 	rdlong	result1, local05 wz
196c0     08 26 86 F1 | 	sub	local05, #8
196c4     13 13 02 56 |  if_ne	mov	arg01, local05
196c8     BC 3D B0 5D |  if_ne	call	#__system___closeraw
196cc     00 1E 0E F2 | 	cmp	local01, #0 wz
196d0     00 20 0E A2 |  if_e	cmp	local02, #0 wz
196d4     00 22 0E A2 |  if_e	cmp	local03, #0 wz
196d8     3C 00 90 AD |  if_e	jmp	#LR__2272
196dc     0C 12 06 F6 | 	mov	arg01, #12
196e0     A4 32 B0 FD | 	call	#__system___gc_alloc_managed
196e4     FD 24 0A F6 | 	mov	local04, result1 wz
196e8     18 00 90 5D |  if_ne	jmp	#LR__2271
196ec     EE 12 02 F6 | 	mov	arg01, abortchain
196f0     07 14 06 F6 | 	mov	arg02, #7
196f4     01 16 06 F6 | 	mov	arg03, #1
196f8     DA 00 A0 FD | 	call	#__longjmp
196fc     01 FA 65 F6 | 	neg	result1, #1
19700     C4 00 90 FD | 	jmp	#LR__2279
19704                 | LR__2271
19704     12 01 68 FC | 	wrlong	#0, local04
19708     04 24 06 F1 | 	add	local04, #4
1970c     12 01 68 FC | 	wrlong	#0, local04
19710     04 24 86 F1 | 	sub	local04, #4
19714     13 25 62 FC | 	wrlong	local04, local05
19718                 | LR__2272
19718     00 1E 0E F2 | 	cmp	local01, #0 wz
1971c     20 00 90 AD |  if_e	jmp	#LR__2273
19720     12 1F 62 FC | 	wrlong	local01, local04
19724     12 FB 01 F6 | 	mov	result1, local04
19728     00 F8 02 FF 
1972c     00 FA 45 F5 | 	or	result1, ##99614720
19730     1C 26 06 F1 | 	add	local05, #28
19734     13 FB 61 FC | 	wrlong	result1, local05
19738     1C 26 86 F1 | 	sub	local05, #28
1973c     0C 00 90 FD | 	jmp	#LR__2274
19740                 | LR__2273
19740     1C 26 06 F1 | 	add	local05, #28
19744     13 01 68 FC | 	wrlong	#0, local05
19748     1C 26 86 F1 | 	sub	local05, #28
1974c                 | LR__2274
1974c     00 20 0E F2 | 	cmp	local02, #0 wz
19750     24 00 90 AD |  if_e	jmp	#LR__2275
19754     04 24 06 F1 | 	add	local04, #4
19758     12 21 62 FC | 	wrlong	local02, local04
1975c     04 24 86 F1 | 	sub	local04, #4
19760     12 FB 01 F6 | 	mov	result1, local04
19764     39 FA 25 F4 | 	bith	result1, #57
19768     20 26 06 F1 | 	add	local05, #32
1976c     13 FB 61 FC | 	wrlong	result1, local05
19770     20 26 86 F1 | 	sub	local05, #32
19774     0C 00 90 FD | 	jmp	#LR__2276
19778                 | LR__2275
19778     20 26 06 F1 | 	add	local05, #32
1977c     13 01 68 FC | 	wrlong	#0, local05
19780     20 26 86 F1 | 	sub	local05, #32
19784                 | LR__2276
19784     00 22 0E F2 | 	cmp	local03, #0 wz
19788     24 00 90 AD |  if_e	jmp	#LR__2277
1978c     08 24 06 F1 | 	add	local04, #8
19790     12 23 62 FC | 	wrlong	local03, local04
19794     08 24 86 F1 | 	sub	local04, #8
19798     00 08 03 FF 
1979c     00 24 46 F5 | 	or	local04, ##101711872
197a0     24 26 06 F1 | 	add	local05, #36
197a4     13 25 62 FC | 	wrlong	local04, local05
197a8     24 26 86 F1 | 	sub	local05, #36
197ac     0C 00 90 FD | 	jmp	#LR__2278
197b0                 | LR__2277
197b0     24 26 06 F1 | 	add	local05, #36
197b4     13 01 68 FC | 	wrlong	#0, local05
197b8     24 26 86 F1 | 	sub	local05, #36
197bc                 | LR__2278
197bc     08 26 06 F1 | 	add	local05, #8
197c0     13 0F 68 FC | 	wrlong	#7, local05
197c4     00 FA 05 F6 | 	mov	result1, #0
197c8                 | LR__2279
197c8     A7 F0 03 F6 | 	mov	ptra, fp
197cc     B2 00 A0 FD | 	call	#popregs_
197d0                 | __system___basic_open_ret
197d0     2D 00 64 FD | 	ret
197d4                 | 
197d4                 | __system___basic_open_string
197d4     04 4A 05 F6 | 	mov	COUNT_, #4
197d8     A8 00 A0 FD | 	call	#pushregs_
197dc     0A 1F 02 F6 | 	mov	local01, arg02
197e0     0B 21 02 F6 | 	mov	local02, arg03
197e4     10 45 B0 FD | 	call	#__system____getftab
197e8     FD 22 0A F6 | 	mov	local03, result1 wz
197ec     18 00 90 5D |  if_ne	jmp	#LR__2280
197f0     EE 12 02 F6 | 	mov	arg01, abortchain
197f4     0C 14 06 F6 | 	mov	arg02, #12
197f8     01 16 06 F6 | 	mov	arg03, #1
197fc     DA 00 A0 FD | 	call	#__longjmp
19800     01 FA 65 F6 | 	neg	result1, #1
19804     58 00 90 FD | 	jmp	#LR__2282
19808                 | LR__2280
19808     08 22 06 F1 | 	add	local03, #8
1980c     11 19 0A FB | 	rdlong	arg04, local03 wz
19810     08 22 86 F1 | 	sub	local03, #8
19814     11 13 02 56 |  if_ne	mov	arg01, local03
19818     6C 3C B0 5D |  if_ne	call	#__system___closeraw
1981c     0F 15 02 F6 | 	mov	arg02, local01
19820     10 17 02 F6 | 	mov	arg03, local02
19824     11 13 02 F6 | 	mov	arg01, local03
19828     B6 19 06 F6 | 	mov	arg04, #438
1982c     54 39 B0 FD | 	call	#__system___openraw
19830     FD 24 02 F6 | 	mov	local04, result1
19834     00 24 56 F2 | 	cmps	local04, #0 wc
19838     20 00 90 3D |  if_ae	jmp	#LR__2281
1983c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19840     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19844     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19848     EE 12 02 F6 | 	mov	arg01, abortchain
1984c     01 16 06 F6 | 	mov	arg03, #1
19850     DA 00 A0 FD | 	call	#__longjmp
19854     01 FA 65 F6 | 	neg	result1, #1
19858     04 00 90 FD | 	jmp	#LR__2282
1985c                 | LR__2281
1985c     12 FB 01 F6 | 	mov	result1, local04
19860                 | LR__2282
19860     A7 F0 03 F6 | 	mov	ptra, fp
19864     B2 00 A0 FD | 	call	#popregs_
19868                 | __system___basic_open_string_ret
19868     2D 00 64 FD | 	ret
1986c                 | 
1986c                 | __system___basic_print_char
1986c     03 4A 05 F6 | 	mov	COUNT_, #3
19870     A8 00 A0 FD | 	call	#pushregs_
19874     0A 1F 02 F6 | 	mov	local01, arg02
19878     D0 4B B0 FD | 	call	#__system___gettxfunc
1987c     FD 20 0A F6 | 	mov	local02, result1 wz
19880     00 FA 05 A6 |  if_e	mov	result1, #0
19884     30 00 90 AD |  if_e	jmp	#LR__2290
19888     10 23 02 F6 | 	mov	local03, local02
1988c     13 20 46 F7 | 	zerox	local02, #19
19890     14 22 46 F0 | 	shr	local03, #20
19894     02 22 66 F0 | 	shl	local03, #2
19898     ED 22 02 F1 | 	add	local03, __methods__
1989c     11 23 02 FB | 	rdlong	local03, local03
198a0     0F 13 02 F6 | 	mov	arg01, local01
198a4     F2 1E 02 F6 | 	mov	local01, objptr
198a8     10 E5 01 F6 | 	mov	objptr, local02
198ac     2D 22 62 FD | 	call	local03
198b0     0F E5 01 F6 | 	mov	objptr, local01
198b4     01 FA 05 F6 | 	mov	result1, #1
198b8                 | LR__2290
198b8     A7 F0 03 F6 | 	mov	ptra, fp
198bc     B2 00 A0 FD | 	call	#popregs_
198c0                 | __system___basic_print_char_ret
198c0     2D 00 64 FD | 	ret
198c4                 | 
198c4                 | __system___basic_print_string
198c4     03 4A 05 F6 | 	mov	COUNT_, #3
198c8     A8 00 A0 FD | 	call	#pushregs_
198cc     0A 1F 02 F6 | 	mov	local01, arg02
198d0     0B 21 02 F6 | 	mov	local02, arg03
198d4     74 4B B0 FD | 	call	#__system___gettxfunc
198d8     FD 22 0A F6 | 	mov	local03, result1 wz
198dc     00 FA 05 A6 |  if_e	mov	result1, #0
198e0     18 00 90 AD |  if_e	jmp	#LR__2300
198e4     00 1E 0E F2 | 	cmp	local01, #0 wz
198e8     00 FA 05 A6 |  if_e	mov	result1, #0
198ec     11 13 02 56 |  if_ne	mov	arg01, local03
198f0     10 15 02 56 |  if_ne	mov	arg02, local02
198f4     0F 17 02 56 |  if_ne	mov	arg03, local01
198f8     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
198fc                 | LR__2300
198fc     A7 F0 03 F6 | 	mov	ptra, fp
19900     B2 00 A0 FD | 	call	#popregs_
19904                 | __system___basic_print_string_ret
19904     2D 00 64 FD | 	ret
19908                 | 
19908                 | __system___basic_print_integer
19908     04 4A 05 F6 | 	mov	COUNT_, #4
1990c     A8 00 A0 FD | 	call	#pushregs_
19910     0A 1F 02 F6 | 	mov	local01, arg02
19914     0B 21 02 F6 | 	mov	local02, arg03
19918     0C 23 02 F6 | 	mov	local03, arg04
1991c     2C 4B B0 FD | 	call	#__system___gettxfunc
19920     FD 24 0A F6 | 	mov	local04, result1 wz
19924     00 FA 05 A6 |  if_e	mov	result1, #0
19928     12 13 02 56 |  if_ne	mov	arg01, local04
1992c     10 15 02 56 |  if_ne	mov	arg02, local02
19930     0F 17 02 56 |  if_ne	mov	arg03, local01
19934     11 19 02 56 |  if_ne	mov	arg04, local03
19938     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1993c     A7 F0 03 F6 | 	mov	ptra, fp
19940     B2 00 A0 FD | 	call	#popregs_
19944                 | __system___basic_print_integer_ret
19944     2D 00 64 FD | 	ret
19948                 | 
19948                 | __system___basic_print_unsigned
19948     03 4A 05 F6 | 	mov	COUNT_, #3
1994c     A8 00 A0 FD | 	call	#pushregs_
19950     0A 1F 02 F6 | 	mov	local01, arg02
19954     0B 21 02 F6 | 	mov	local02, arg03
19958     0C 23 02 F6 | 	mov	local03, arg04
1995c     EC 4A B0 FD | 	call	#__system___gettxfunc
19960     FD 12 0A F6 | 	mov	arg01, result1 wz
19964     00 FA 05 A6 |  if_e	mov	result1, #0
19968     3A 20 26 54 |  if_ne	bith	local02, #58
1996c     10 15 02 56 |  if_ne	mov	arg02, local02
19970     0F 17 02 56 |  if_ne	mov	arg03, local01
19974     11 19 02 56 |  if_ne	mov	arg04, local03
19978     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1997c     A7 F0 03 F6 | 	mov	ptra, fp
19980     B2 00 A0 FD | 	call	#popregs_
19984                 | __system___basic_print_unsigned_ret
19984     2D 00 64 FD | 	ret
19988                 | 
19988                 | __system___basic_get_char
19988     03 4A 05 F6 | 	mov	COUNT_, #3
1998c     A8 00 A0 FD | 	call	#pushregs_
19990     FC 4A B0 FD | 	call	#__system___getrxfunc
19994     FD 1E 0A F6 | 	mov	local01, result1 wz
19998     01 FA 65 A6 |  if_e	neg	result1, #1
1999c     28 00 90 AD |  if_e	jmp	#LR__2310
199a0     0F 21 02 F6 | 	mov	local02, local01
199a4     13 1E 46 F7 | 	zerox	local01, #19
199a8     14 20 46 F0 | 	shr	local02, #20
199ac     02 20 66 F0 | 	shl	local02, #2
199b0     ED 20 02 F1 | 	add	local02, __methods__
199b4     10 21 02 FB | 	rdlong	local02, local02
199b8     F2 22 02 F6 | 	mov	local03, objptr
199bc     0F E5 01 F6 | 	mov	objptr, local01
199c0     2D 20 62 FD | 	call	local02
199c4     11 E5 01 F6 | 	mov	objptr, local03
199c8                 | LR__2310
199c8     A7 F0 03 F6 | 	mov	ptra, fp
199cc     B2 00 A0 FD | 	call	#popregs_
199d0                 | __system___basic_get_char_ret
199d0     2D 00 64 FD | 	ret
199d4                 | 
199d4                 | __system___basic_get
199d4     04 4A 05 F6 | 	mov	COUNT_, #4
199d8     A8 00 A0 FD | 	call	#pushregs_
199dc     0D 1F 02 F6 | 	mov	local01, arg05
199e0     0F 19 02 FD | 	qmul	arg04, local01
199e4     09 21 02 F6 | 	mov	local02, arg01
199e8     0B 23 02 F6 | 	mov	local03, arg03
199ec     00 14 0E F2 | 	cmp	arg02, #0 wz
199f0     01 14 86 51 |  if_ne	sub	arg02, #1
199f4     10 13 02 56 |  if_ne	mov	arg01, local02
199f8     00 16 06 56 |  if_ne	mov	arg03, #0
199fc     18 24 62 FD | 	getqx	local04
19a00     3C 41 B0 5D |  if_ne	call	#__system__lseek
19a04     11 15 02 F6 | 	mov	arg02, local03
19a08     12 17 02 F6 | 	mov	arg03, local04
19a0c     10 13 02 F6 | 	mov	arg01, local02
19a10     B4 40 B0 FD | 	call	#__system__read
19a14     FD 24 02 F6 | 	mov	local04, result1
19a18     01 24 56 F2 | 	cmps	local04, #1 wc
19a1c     10 00 90 CD |  if_b	jmp	#LR__2320
19a20     12 65 02 F6 | 	mov	muldiva_, local04
19a24     0F 67 02 F6 | 	mov	muldivb_, local01
19a28     BA 00 A0 FD | 	call	#divide_
19a2c     33 25 02 F6 | 	mov	local04, muldivb_
19a30                 | LR__2320
19a30     12 FB 01 F6 | 	mov	result1, local04
19a34     A7 F0 03 F6 | 	mov	ptra, fp
19a38     B2 00 A0 FD | 	call	#popregs_
19a3c                 | __system___basic_get_ret
19a3c     2D 00 64 FD | 	ret
19a40                 | 
19a40                 | __system___fmtchar
19a40     00 4A 05 F6 | 	mov	COUNT_, #0
19a44     A8 00 A0 FD | 	call	#pushregs_
19a48     10 F0 07 F1 | 	add	ptra, #16
19a4c     04 4E 05 F1 | 	add	fp, #4
19a50     A7 12 62 FC | 	wrlong	arg01, fp
19a54     04 4E 05 F1 | 	add	fp, #4
19a58     A7 14 62 FC | 	wrlong	arg02, fp
19a5c     04 4E 05 F1 | 	add	fp, #4
19a60     A7 16 62 FC | 	wrlong	arg03, fp
19a64     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
19a68     A7 16 62 FC | 	wrlong	arg03, fp
19a6c     08 4E 85 F1 | 	sub	fp, #8
19a70     A7 12 02 FB | 	rdlong	arg01, fp
19a74     04 4E 05 F1 | 	add	fp, #4
19a78     A7 14 02 FB | 	rdlong	arg02, fp
19a7c     04 4E 05 F1 | 	add	fp, #4
19a80     A7 16 02 F6 | 	mov	arg03, fp
19a84     0C 4E 85 F1 | 	sub	fp, #12
19a88     0C 00 B0 FD | 	call	#__system___fmtstr
19a8c     A7 F0 03 F6 | 	mov	ptra, fp
19a90     B2 00 A0 FD | 	call	#popregs_
19a94                 | __system___fmtchar_ret
19a94     2D 00 64 FD | 	ret
19a98                 | 
19a98                 | __system___fmtstr
19a98     09 4A 05 F6 | 	mov	COUNT_, #9
19a9c     A8 00 A0 FD | 	call	#pushregs_
19aa0     09 1F 02 F6 | 	mov	local01, arg01
19aa4     0A 21 02 F6 | 	mov	local02, arg02
19aa8     0B 23 02 F6 | 	mov	local03, arg03
19aac     10 19 E2 F8 | 	getbyte	arg04, local02, #0
19ab0     11 13 02 F6 | 	mov	arg01, local03
19ab4     09 25 02 F6 | 	mov	local04, arg01
19ab8     97 06 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
19abc                 | LR__2330
19abc     12 FB C9 FA | 	rdbyte	result1, local04 wz
19ac0     01 24 06 51 |  if_ne	add	local04, #1
19ac4     F4 FF 9F 5D |  if_ne	jmp	#LR__2330
19ac8                 | LR__2331
19ac8     09 25 82 F1 | 	sub	local04, arg01
19acc     00 18 0E F2 | 	cmp	arg04, #0 wz
19ad0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
19ad4     10 15 02 F6 | 	mov	arg02, local02
19ad8     12 17 02 F6 | 	mov	arg03, local04
19adc     0F 13 02 F6 | 	mov	arg01, local01
19ae0     02 18 06 F6 | 	mov	arg04, #2
19ae4     04 46 B0 FD | 	call	#__system___fmtpad
19ae8     FD 26 02 F6 | 	mov	local05, result1
19aec     00 26 56 F2 | 	cmps	local05, #0 wc
19af0     13 FB 01 C6 |  if_b	mov	result1, local05
19af4     80 00 90 CD |  if_b	jmp	#LR__2334
19af8     01 24 56 F2 | 	cmps	local04, #1 wc
19afc     50 00 90 CD |  if_b	jmp	#LR__2333
19b00     12 29 02 F6 | 	mov	local06, local04
19b04                 | LR__2332
19b04     0F 2B 02 F6 | 	mov	local07, local01
19b08     0F 2D 02 F6 | 	mov	local08, local01
19b0c     13 2A 46 F7 | 	zerox	local07, #19
19b10     14 2C 46 F0 | 	shr	local08, #20
19b14     02 2C 66 F0 | 	shl	local08, #2
19b18     ED 2C 02 F1 | 	add	local08, __methods__
19b1c     16 2D 02 FB | 	rdlong	local08, local08
19b20     11 13 C2 FA | 	rdbyte	arg01, local03
19b24     F2 2E 02 F6 | 	mov	local09, objptr
19b28     15 E5 01 F6 | 	mov	objptr, local07
19b2c     01 22 06 F1 | 	add	local03, #1
19b30     2D 2C 62 FD | 	call	local08
19b34     17 E5 01 F6 | 	mov	objptr, local09
19b38     FD 2E 02 F6 | 	mov	local09, result1
19b3c     00 2E 56 F2 | 	cmps	local09, #0 wc
19b40     17 FB 01 C6 |  if_b	mov	result1, local09
19b44     30 00 90 CD |  if_b	jmp	#LR__2334
19b48     17 27 02 F1 | 	add	local05, local09
19b4c     ED 29 6E FB | 	djnz	local06, #LR__2332
19b50                 | LR__2333
19b50     10 15 02 F6 | 	mov	arg02, local02
19b54     12 17 02 F6 | 	mov	arg03, local04
19b58     0F 13 02 F6 | 	mov	arg01, local01
19b5c     01 18 06 F6 | 	mov	arg04, #1
19b60     88 45 B0 FD | 	call	#__system___fmtpad
19b64     FD 2E 02 F6 | 	mov	local09, result1
19b68     00 2E 56 F2 | 	cmps	local09, #0 wc
19b6c     17 FB 01 C6 |  if_b	mov	result1, local09
19b70     17 27 02 31 |  if_ae	add	local05, local09
19b74     13 FB 01 36 |  if_ae	mov	result1, local05
19b78                 | LR__2334
19b78     A7 F0 03 F6 | 	mov	ptra, fp
19b7c     B2 00 A0 FD | 	call	#popregs_
19b80                 | __system___fmtstr_ret
19b80     2D 00 64 FD | 	ret
19b84                 | 
19b84                 | __system___fmtnum
19b84     0B 4A 05 F6 | 	mov	COUNT_, #11
19b88     A8 00 A0 FD | 	call	#pushregs_
19b8c     09 1F 02 F6 | 	mov	local01, arg01
19b90     0A 21 02 F6 | 	mov	local02, arg02
19b94     0B 23 02 F6 | 	mov	local03, arg03
19b98     0C 25 02 F6 | 	mov	local04, arg04
19b9c     F8 27 02 F6 | 	mov	local05, ptra
19ba0     13 29 02 F6 | 	mov	local06, local05
19ba4     00 2A 06 F6 | 	mov	local07, #0
19ba8     10 2D 02 F6 | 	mov	local08, local02
19bac     10 2C 46 F0 | 	shr	local08, #16
19bb0     3F 2C 06 F5 | 	and	local08, #63
19bb4     10 2F E2 F8 | 	getbyte	local09, local02, #0
19bb8     10 31 02 F6 | 	mov	local10, local02
19bbc     1A 30 46 F0 | 	shr	local10, #26
19bc0     03 30 06 F5 | 	and	local10, #3
19bc4     18 33 02 F6 | 	mov	local11, local10
19bc8     01 2C 56 F2 | 	cmps	local08, #1 wc
19bcc     44 F0 07 F1 | 	add	ptra, #68
19bd0     01 2C 86 31 |  if_ae	sub	local08, #1
19bd4     41 2E 56 F2 | 	cmps	local09, #65 wc
19bd8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
19bdc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
19be0     03 32 0E F2 | 	cmp	local11, #3 wz
19be4     00 32 06 A6 |  if_e	mov	local11, #0
19be8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
19bec     04 32 06 46 |  if_c_and_nz	mov	local11, #4
19bf0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
19bf4     00 32 0E F2 | 	cmp	local11, #0 wz
19bf8     4C 00 90 AD |  if_e	jmp	#LR__2343
19bfc     01 2A 06 F6 | 	mov	local07, #1
19c00     17 2D 0A F2 | 	cmp	local08, local09 wz
19c04     18 00 90 5D |  if_ne	jmp	#LR__2341
19c08     05 2C 6E FB | 	djnz	local08, #LR__2340
19c0c     0F 13 02 F6 | 	mov	arg01, local01
19c10     10 15 02 F6 | 	mov	arg02, local02
19c14     23 16 06 F6 | 	mov	arg03, #35
19c18     24 FE BF FD | 	call	#__system___fmtchar
19c1c     88 00 90 FD | 	jmp	#LR__2347
19c20                 | LR__2340
19c20                 | LR__2341
19c20     02 32 0E F2 | 	cmp	local11, #2 wz
19c24     14 31 02 A6 |  if_e	mov	local10, local06
19c28     01 28 06 A1 |  if_e	add	local06, #1
19c2c     18 41 48 AC |  if_e	wrbyte	#32, local10
19c30     14 00 90 AD |  if_e	jmp	#LR__2342
19c34     04 32 0E F2 | 	cmp	local11, #4 wz
19c38     14 5B 48 AC |  if_e	wrbyte	#45, local06
19c3c     01 28 06 A1 |  if_e	add	local06, #1
19c40     14 57 48 5C |  if_ne	wrbyte	#43, local06
19c44     01 28 06 51 |  if_ne	add	local06, #1
19c48                 | LR__2342
19c48                 | LR__2343
19c48     14 13 02 F6 | 	mov	arg01, local06
19c4c     11 15 02 F6 | 	mov	arg02, local03
19c50     12 17 02 F6 | 	mov	arg03, local04
19c54     16 19 02 F6 | 	mov	arg04, local08
19c58     00 1A 06 F6 | 	mov	arg05, #0
19c5c     1D 20 2E F4 | 	testbn	local02, #29 wz
19c60     01 1A 06 56 |  if_ne	mov	arg05, #1
19c64     4C 45 B0 FD | 	call	#__system___uitoa
19c68     FD 2A 02 F1 | 	add	local07, result1
19c6c     17 2B 5A F2 | 	cmps	local07, local09 wcz
19c70     24 00 90 ED |  if_be	jmp	#LR__2346
19c74     97 0E 48 FB | 	callpa	#(@LR__2345-@LR__2344)>>2,fcache_load_ptr_
19c78                 | LR__2344
19c78     17 31 02 F6 | 	mov	local10, local09
19c7c     01 30 56 F2 | 	cmps	local10, #1 wc
19c80     01 2E 86 F1 | 	sub	local09, #1
19c84     14 31 02 36 |  if_ae	mov	local10, local06
19c88     01 28 06 31 |  if_ae	add	local06, #1
19c8c     18 47 48 3C |  if_ae	wrbyte	#35, local10
19c90     E4 FF 9F 3D |  if_ae	jmp	#LR__2344
19c94                 | LR__2345
19c94     14 01 48 FC | 	wrbyte	#0, local06
19c98                 | LR__2346
19c98     0F 13 02 F6 | 	mov	arg01, local01
19c9c     10 15 02 F6 | 	mov	arg02, local02
19ca0     13 17 02 F6 | 	mov	arg03, local05
19ca4     F0 FD BF FD | 	call	#__system___fmtstr
19ca8                 | LR__2347
19ca8     A7 F0 03 F6 | 	mov	ptra, fp
19cac     B2 00 A0 FD | 	call	#popregs_
19cb0                 | __system___fmtnum_ret
19cb0     2D 00 64 FD | 	ret
19cb4                 | 
19cb4                 | __system___fmtfloat
19cb4     10 4A 05 F6 | 	mov	COUNT_, #16
19cb8     A8 00 A0 FD | 	call	#pushregs_
19cbc     24 F1 07 F1 | 	add	ptra, #292
19cc0     04 4E 05 F1 | 	add	fp, #4
19cc4     A7 12 62 FC | 	wrlong	arg01, fp
19cc8     04 4E 05 F1 | 	add	fp, #4
19ccc     A7 14 62 FC | 	wrlong	arg02, fp
19cd0     04 4E 05 F1 | 	add	fp, #4
19cd4     A7 16 62 FC | 	wrlong	arg03, fp
19cd8     04 4E 05 F1 | 	add	fp, #4
19cdc     A7 18 62 FC | 	wrlong	arg04, fp
19ce0     0C 4E 05 F1 | 	add	fp, #12
19ce4     A7 14 68 FC | 	wrlong	#10, fp
19ce8     08 4E 05 F1 | 	add	fp, #8
19cec     A7 00 68 FC | 	wrlong	#0, fp
19cf0     08 4E 05 F1 | 	add	fp, #8
19cf4     A7 00 68 FC | 	wrlong	#0, fp
19cf8     08 4E 05 F1 | 	add	fp, #8
19cfc     A7 00 68 FC | 	wrlong	#0, fp
19d00     04 4E 05 F1 | 	add	fp, #4
19d04     A7 04 68 FC | 	wrlong	#2, fp
19d08     04 4E 05 F1 | 	add	fp, #4
19d0c     A7 00 68 FC | 	wrlong	#0, fp
19d10     04 4E 05 F1 | 	add	fp, #4
19d14     A7 00 68 FC | 	wrlong	#0, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 00 68 FC | 	wrlong	#0, fp
19d20     04 4E 05 F1 | 	add	fp, #4
19d24     A7 00 68 FC | 	wrlong	#0, fp
19d28     18 4E 05 F1 | 	add	fp, #24
19d2c     A7 00 68 FC | 	wrlong	#0, fp
19d30     68 4E 05 F1 | 	add	fp, #104
19d34     A7 1E 02 F6 | 	mov	local01, fp
19d38     08 4E 85 F1 | 	sub	fp, #8
19d3c     A7 1E 62 FC | 	wrlong	local01, fp
19d40     04 4E 05 F1 | 	add	fp, #4
19d44     A7 1E 62 FC | 	wrlong	local01, fp
19d48     BC 4E 85 F1 | 	sub	fp, #188
19d4c     A7 1E 02 FB | 	rdlong	local01, fp
19d50     10 1E 46 F0 | 	shr	local01, #16
19d54     3F 1E 06 F5 | 	and	local01, #63
19d58     B0 4E 05 F1 | 	add	fp, #176
19d5c     A7 1E 62 FC | 	wrlong	local01, fp
19d60     B0 4E 85 F1 | 	sub	fp, #176
19d64     A7 1E 02 FB | 	rdlong	local01, fp
19d68     1C 1E 46 F0 | 	shr	local01, #28
19d6c     01 1E 06 F5 | 	and	local01, #1
19d70     08 4F 05 F1 | 	add	fp, #264
19d74     A7 1E 62 FC | 	wrlong	local01, fp
19d78     58 4E 85 F1 | 	sub	fp, #88
19d7c     A7 1E 0A FB | 	rdlong	local01, fp wz
19d80     B8 4E 85 F1 | 	sub	fp, #184
19d84     3C 00 90 5D |  if_ne	jmp	#LR__2351
19d88     10 4E 05 F1 | 	add	fp, #16
19d8c     A7 1E 02 FB | 	rdlong	local01, fp
19d90     10 4E 85 F1 | 	sub	fp, #16
19d94     61 1E 0E F2 | 	cmp	local01, #97 wz
19d98     18 00 90 5D |  if_ne	jmp	#LR__2350
19d9c     B8 4E 05 F1 | 	add	fp, #184
19da0     A7 1A 68 FC | 	wrlong	#13, fp
19da4     84 4E 85 F1 | 	sub	fp, #132
19da8     A7 02 68 FC | 	wrlong	#1, fp
19dac     34 4E 85 F1 | 	sub	fp, #52
19db0     24 00 90 FD | 	jmp	#LR__2352
19db4                 | LR__2350
19db4     B8 4E 05 F1 | 	add	fp, #184
19db8     A7 0C 68 FC | 	wrlong	#6, fp
19dbc     B8 4E 85 F1 | 	sub	fp, #184
19dc0     14 00 90 FD | 	jmp	#LR__2352
19dc4                 | LR__2351
19dc4     B8 4E 05 F1 | 	add	fp, #184
19dc8     A7 1E 02 FB | 	rdlong	local01, fp
19dcc     01 1E 86 F1 | 	sub	local01, #1
19dd0     A7 1E 62 FC | 	wrlong	local01, fp
19dd4     B8 4E 85 F1 | 	sub	fp, #184
19dd8                 | LR__2352
19dd8     08 4E 05 F1 | 	add	fp, #8
19ddc     A7 1E 02 FB | 	rdlong	local01, fp
19de0     16 1E 46 F0 | 	shr	local01, #22
19de4     03 1E 06 F5 | 	and	local01, #3
19de8     04 4F 05 F1 | 	add	fp, #260
19dec     A7 1E 62 FC | 	wrlong	local01, fp
19df0     04 4F 85 F1 | 	sub	fp, #260
19df4     A7 1E 02 FB | 	rdlong	local01, fp
19df8     1D 1E 46 F0 | 	shr	local01, #29
19dfc     01 1E 06 F5 | 	and	local01, #1
19e00     B4 4E 05 F1 | 	add	fp, #180
19e04     A7 1E 62 FC | 	wrlong	local01, fp
19e08     B4 4E 85 F1 | 	sub	fp, #180
19e0c     A7 1E 02 FB | 	rdlong	local01, fp
19e10     0F 1F EA F8 | 	getbyte	local01, local01, #1
19e14     60 4E 05 F1 | 	add	fp, #96
19e18     A7 1E 62 FC | 	wrlong	local01, fp
19e1c     60 4E 85 F1 | 	sub	fp, #96
19e20     A7 1E 02 FB | 	rdlong	local01, fp
19e24     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19e28     64 4E 05 F1 | 	add	fp, #100
19e2c     A7 1E 62 FC | 	wrlong	local01, fp
19e30     00 1E 06 F6 | 	mov	local01, #0
19e34     5C 4E 85 F1 | 	sub	fp, #92
19e38     A7 1A 02 FB | 	rdlong	arg05, fp
19e3c     65 1A 0E F2 | 	cmp	arg05, #101 wz
19e40     01 1E 06 A6 |  if_e	mov	local01, #1
19e44     14 4E 05 F1 | 	add	fp, #20
19e48     A7 1E 62 FC | 	wrlong	local01, fp
19e4c     98 4E 05 F1 | 	add	fp, #152
19e50     A7 20 0A FB | 	rdlong	local02, fp wz
19e54     45 1E 06 56 |  if_ne	mov	local01, #69
19e58     65 1E 06 A6 |  if_e	mov	local01, #101
19e5c     8C 4E 85 F1 | 	sub	fp, #140
19e60     A7 1E 62 FC | 	wrlong	local01, fp
19e64     20 4E 85 F1 | 	sub	fp, #32
19e68     A7 1E 02 FB | 	rdlong	local01, fp
19e6c     10 4E 85 F1 | 	sub	fp, #16
19e70     61 1E 0E F2 | 	cmp	local01, #97 wz
19e74     4C 00 90 5D |  if_ne	jmp	#LR__2353
19e78     24 4E 05 F1 | 	add	fp, #36
19e7c     A7 02 68 FC | 	wrlong	#1, fp
19e80     98 4E 05 F1 | 	add	fp, #152
19e84     A7 20 0A FB | 	rdlong	local02, fp wz
19e88     50 1E 06 56 |  if_ne	mov	local01, #80
19e8c     70 1E 06 A6 |  if_e	mov	local01, #112
19e90     8C 4E 85 F1 | 	sub	fp, #140
19e94     A7 1E 62 FC | 	wrlong	local01, fp
19e98     14 4E 85 F1 | 	sub	fp, #20
19e9c     A7 04 68 FC | 	wrlong	#2, fp
19ea0     1C 4E 05 F1 | 	add	fp, #28
19ea4     A7 02 68 FC | 	wrlong	#1, fp
19ea8     84 4E 05 F1 | 	add	fp, #132
19eac     A7 20 0A FB | 	rdlong	local02, fp wz
19eb0     58 1E 06 56 |  if_ne	mov	local01, #88
19eb4     78 1E 06 A6 |  if_e	mov	local01, #120
19eb8     7C 4E 85 F1 | 	sub	fp, #124
19ebc     A7 1E 62 FC | 	wrlong	local01, fp
19ec0     40 4E 85 F1 | 	sub	fp, #64
19ec4                 | LR__2353
19ec4     10 4E 05 F1 | 	add	fp, #16
19ec8     A7 1E 02 FB | 	rdlong	local01, fp
19ecc     10 4E 85 F1 | 	sub	fp, #16
19ed0     23 1E 0E F2 | 	cmp	local01, #35 wz
19ed4     3C 00 90 5D |  if_ne	jmp	#LR__2356
19ed8     48 4E 05 F1 | 	add	fp, #72
19edc     A7 02 68 FC | 	wrlong	#1, fp
19ee0     C8 4E 05 F1 | 	add	fp, #200
19ee4     A7 1E 0A FB | 	rdlong	local01, fp wz
19ee8     10 4F 85 F1 | 	sub	fp, #272
19eec     18 00 90 AD |  if_e	jmp	#LR__2354
19ef0     10 4E 05 F1 | 	add	fp, #16
19ef4     A7 CC 68 FC | 	wrlong	#102, fp
19ef8     00 4F 05 F1 | 	add	fp, #256
19efc     A7 00 68 FC | 	wrlong	#0, fp
19f00     10 4F 85 F1 | 	sub	fp, #272
19f04     0C 00 90 FD | 	jmp	#LR__2355
19f08                 | LR__2354
19f08     10 4F 05 F1 | 	add	fp, #272
19f0c     A7 02 68 FC | 	wrlong	#1, fp
19f10     10 4F 85 F1 | 	sub	fp, #272
19f14                 | LR__2355
19f14                 | LR__2356
19f14     08 4E 05 F1 | 	add	fp, #8
19f18     A7 1E 02 FB | 	rdlong	local01, fp
19f1c     1A 1E 46 F0 | 	shr	local01, #26
19f20     03 1E 06 F5 | 	and	local01, #3
19f24     5C 4E 05 F1 | 	add	fp, #92
19f28     A7 1E 62 FC | 	wrlong	local01, fp
19f2c     58 4E 85 F1 | 	sub	fp, #88
19f30     A7 FA 01 FB | 	rdlong	result1, fp
19f34     0C 4E 85 F1 | 	sub	fp, #12
19f38     1F FA 4D F0 | 	shr	result1, #31 wz
19f3c     20 00 90 AD |  if_e	jmp	#LR__2357
19f40     2C 4E 05 F1 | 	add	fp, #44
19f44     A7 5A 68 FC | 	wrlong	#45, fp
19f48     20 4E 85 F1 | 	sub	fp, #32
19f4c     A7 FA 01 FB | 	rdlong	result1, fp
19f50     1F FA E5 F4 | 	bitnot	result1, #31
19f54     A7 FA 61 FC | 	wrlong	result1, fp
19f58     0C 4E 85 F1 | 	sub	fp, #12
19f5c     3C 00 90 FD | 	jmp	#LR__2359
19f60                 | LR__2357
19f60     64 4E 05 F1 | 	add	fp, #100
19f64     A7 1E 02 FB | 	rdlong	local01, fp
19f68     64 4E 85 F1 | 	sub	fp, #100
19f6c     01 1E 0E F2 | 	cmp	local01, #1 wz
19f70     2C 4E 05 A1 |  if_e	add	fp, #44
19f74     A7 56 68 AC |  if_e	wrlong	#43, fp
19f78     2C 4E 85 A1 |  if_e	sub	fp, #44
19f7c     1C 00 90 AD |  if_e	jmp	#LR__2358
19f80     64 4E 05 F1 | 	add	fp, #100
19f84     A7 1E 02 FB | 	rdlong	local01, fp
19f88     64 4E 85 F1 | 	sub	fp, #100
19f8c     02 1E 0E F2 | 	cmp	local01, #2 wz
19f90     2C 4E 05 A1 |  if_e	add	fp, #44
19f94     A7 40 68 AC |  if_e	wrlong	#32, fp
19f98     2C 4E 85 A1 |  if_e	sub	fp, #44
19f9c                 | LR__2358
19f9c                 | LR__2359
19f9c     08 4E 05 F1 | 	add	fp, #8
19fa0     A7 1E 02 FB | 	rdlong	local01, fp
19fa4     18 1E 46 F0 | 	shr	local01, #24
19fa8     03 1E 06 F5 | 	and	local01, #3
19fac     3C 4E 05 F1 | 	add	fp, #60
19fb0     A7 1E 62 FC | 	wrlong	local01, fp
19fb4     00 1E 06 F6 | 	mov	local01, #0
19fb8     18 4E 85 F1 | 	sub	fp, #24
19fbc     A7 22 0A FB | 	rdlong	local03, fp wz
19fc0     2C 4E 85 F1 | 	sub	fp, #44
19fc4     18 00 90 5D |  if_ne	jmp	#LR__2360
19fc8     1C 4E 05 F1 | 	add	fp, #28
19fcc     A7 24 02 FB | 	rdlong	local04, fp
19fd0     1C 4E 85 F1 | 	sub	fp, #28
19fd4     12 27 02 F6 | 	mov	local05, local04
19fd8     0A 26 0E F2 | 	cmp	local05, #10 wz
19fdc     04 00 90 AD |  if_e	jmp	#LR__2361
19fe0                 | LR__2360
19fe0     01 1E 66 F5 | 	xor	local01, #1
19fe4                 | LR__2361
19fe4     3C 4E 05 F1 | 	add	fp, #60
19fe8     A7 1E 62 FC | 	wrlong	local01, fp
19fec     3C 4E 85 F1 | 	sub	fp, #60
19ff0     00 1E 0E F2 | 	cmp	local01, #0 wz
19ff4     0C 01 90 AD |  if_e	jmp	#LR__2363
19ff8     44 4E 05 F1 | 	add	fp, #68
19ffc     A7 26 02 FB | 	rdlong	local05, fp
1a000     44 4E 85 F1 | 	sub	fp, #68
1a004     13 23 02 F6 | 	mov	local03, local05
1a008     02 22 0E F2 | 	cmp	local03, #2 wz
1a00c     F4 00 90 5D |  if_ne	jmp	#LR__2363
1a010     0C 4F 05 F1 | 	add	fp, #268
1a014     A7 28 02 FB | 	rdlong	local06, fp
1a018     0C 4F 85 F1 | 	sub	fp, #268
1a01c     14 25 02 F6 | 	mov	local04, local06
1a020     02 24 0E F2 | 	cmp	local04, #2 wz
1a024     DC 00 90 AD |  if_e	jmp	#LR__2363
1a028     C0 4E 05 F1 | 	add	fp, #192
1a02c     A7 12 02 FB | 	rdlong	arg01, fp
1a030     94 4E 85 F1 | 	sub	fp, #148
1a034     A7 14 02 FB | 	rdlong	arg02, fp
1a038     14 4E 05 F1 | 	add	fp, #20
1a03c     A7 16 02 FB | 	rdlong	arg03, fp
1a040     40 4E 85 F1 | 	sub	fp, #64
1a044     D4 43 B0 FD | 	call	#__system__emitsign_0377
1a048     14 4F 05 F1 | 	add	fp, #276
1a04c     A7 FA 61 FC | 	wrlong	result1, fp
1a050     14 4F 85 F1 | 	sub	fp, #276
1a054     00 FA 55 F2 | 	cmps	result1, #0 wc
1a058     14 4F 05 C1 |  if_b	add	fp, #276
1a05c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a060     14 4F 85 C1 |  if_b	sub	fp, #276
1a064     6C 0B 90 CD |  if_b	jmp	#LR__2413
1a068     C0 4E 05 F1 | 	add	fp, #192
1a06c     A7 1E 02 FB | 	rdlong	local01, fp
1a070     54 4E 05 F1 | 	add	fp, #84
1a074     A7 26 02 FB | 	rdlong	local05, fp
1a078     13 23 02 F6 | 	mov	local03, local05
1a07c     13 1F 02 F1 | 	add	local01, local05
1a080     54 4E 85 F1 | 	sub	fp, #84
1a084     A7 1E 62 FC | 	wrlong	local01, fp
1a088     58 4E 85 F1 | 	sub	fp, #88
1a08c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a090     68 4E 85 F1 | 	sub	fp, #104
1a094     60 00 90 AD |  if_e	jmp	#LR__2362
1a098     68 4E 05 F1 | 	add	fp, #104
1a09c     A7 1E 02 FB | 	rdlong	local01, fp
1a0a0     AC 4E 05 F1 | 	add	fp, #172
1a0a4     A7 22 02 FB | 	rdlong	local03, fp
1a0a8     11 1F 82 F1 | 	sub	local01, local03
1a0ac     AC 4E 85 F1 | 	sub	fp, #172
1a0b0     A7 1E 62 FC | 	wrlong	local01, fp
1a0b4     68 4E 85 F1 | 	sub	fp, #104
1a0b8     00 1E 56 F2 | 	cmps	local01, #0 wc
1a0bc     68 4E 05 C1 |  if_b	add	fp, #104
1a0c0     A7 00 68 CC |  if_b	wrlong	#0, fp
1a0c4     68 4E 85 C1 |  if_b	sub	fp, #104
1a0c8     08 4E 05 F1 | 	add	fp, #8
1a0cc     A7 1E 02 FB | 	rdlong	local01, fp
1a0d0     E8 1E 06 F4 | 	bitl	local01, #232
1a0d4     A7 1E 62 FC | 	wrlong	local01, fp
1a0d8     60 4E 05 F1 | 	add	fp, #96
1a0dc     A7 26 02 FB | 	rdlong	local05, fp
1a0e0     13 23 02 F6 | 	mov	local03, local05
1a0e4     08 22 66 F0 | 	shl	local03, #8
1a0e8     11 1F 42 F5 | 	or	local01, local03
1a0ec     60 4E 85 F1 | 	sub	fp, #96
1a0f0     A7 1E 62 FC | 	wrlong	local01, fp
1a0f4     08 4E 85 F1 | 	sub	fp, #8
1a0f8                 | LR__2362
1a0f8     3C 4E 05 F1 | 	add	fp, #60
1a0fc     A7 00 68 FC | 	wrlong	#0, fp
1a100     3C 4E 85 F1 | 	sub	fp, #60
1a104                 | LR__2363
1a104     0C 4E 05 F1 | 	add	fp, #12
1a108     A7 12 02 FB | 	rdlong	arg01, fp
1a10c     0C 4E 85 F1 | 	sub	fp, #12
1a110     A8 1E B0 FD | 	call	#__system____builtin_ilogb
1a114     FF FF 3F FF 
1a118     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1a11c     50 00 90 5D |  if_ne	jmp	#LR__2365
1a120     2C 4E 05 F1 | 	add	fp, #44
1a124     A7 1E 0A FB | 	rdlong	local01, fp wz
1a128     2C 4E 85 F1 | 	sub	fp, #44
1a12c     24 00 90 AD |  if_e	jmp	#LR__2364
1a130     C0 4E 05 F1 | 	add	fp, #192
1a134     A7 20 02 FB | 	rdlong	local02, fp
1a138     10 23 02 F6 | 	mov	local03, local02
1a13c     01 22 06 F1 | 	add	local03, #1
1a140     A7 22 62 FC | 	wrlong	local03, fp
1a144     94 4E 85 F1 | 	sub	fp, #148
1a148     A7 24 02 FB | 	rdlong	local04, fp
1a14c     2C 4E 85 F1 | 	sub	fp, #44
1a150     10 25 42 FC | 	wrbyte	local04, local02
1a154                 | LR__2364
1a154     C0 4E 05 F1 | 	add	fp, #192
1a158     A7 12 02 FB | 	rdlong	arg01, fp
1a15c     C0 4E 85 F1 | 	sub	fp, #192
1a160     40 01 00 FF 
1a164     E6 14 06 F6 | 	mov	arg02, ##@LR__4291
1a168     1C EA BF FD | 	call	#__system____builtin_strcpy
1a16c     A4 08 90 FD | 	jmp	#LR__2401
1a170                 | LR__2365
1a170     0C 4E 05 F1 | 	add	fp, #12
1a174     A7 20 02 FB | 	rdlong	local02, fp
1a178     0C 4E 85 F1 | 	sub	fp, #12
1a17c     10 13 02 F6 | 	mov	arg01, local02
1a180     38 1E B0 FD | 	call	#__system____builtin_ilogb
1a184     00 00 40 FF 
1a188     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1a18c     50 00 90 5D |  if_ne	jmp	#LR__2367
1a190     2C 4E 05 F1 | 	add	fp, #44
1a194     A7 1E 0A FB | 	rdlong	local01, fp wz
1a198     2C 4E 85 F1 | 	sub	fp, #44
1a19c     24 00 90 AD |  if_e	jmp	#LR__2366
1a1a0     C0 4E 05 F1 | 	add	fp, #192
1a1a4     A7 20 02 FB | 	rdlong	local02, fp
1a1a8     10 23 02 F6 | 	mov	local03, local02
1a1ac     01 22 06 F1 | 	add	local03, #1
1a1b0     A7 22 62 FC | 	wrlong	local03, fp
1a1b4     94 4E 85 F1 | 	sub	fp, #148
1a1b8     A7 24 02 FB | 	rdlong	local04, fp
1a1bc     2C 4E 85 F1 | 	sub	fp, #44
1a1c0     10 25 42 FC | 	wrbyte	local04, local02
1a1c4                 | LR__2366
1a1c4     C0 4E 05 F1 | 	add	fp, #192
1a1c8     A7 12 02 FB | 	rdlong	arg01, fp
1a1cc     C0 4E 85 F1 | 	sub	fp, #192
1a1d0     40 01 00 FF 
1a1d4     EA 14 06 F6 | 	mov	arg02, ##@LR__4292
1a1d8     AC E9 BF FD | 	call	#__system____builtin_strcpy
1a1dc     34 08 90 FD | 	jmp	#LR__2401
1a1e0                 | LR__2367
1a1e0     10 4E 05 F1 | 	add	fp, #16
1a1e4     A7 1E 02 FB | 	rdlong	local01, fp
1a1e8     10 4E 85 F1 | 	sub	fp, #16
1a1ec     67 1E 0E F2 | 	cmp	local01, #103 wz
1a1f0     10 4E 05 51 |  if_ne	add	fp, #16
1a1f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a1f8     10 4E 85 51 |  if_ne	sub	fp, #16
1a1fc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1a200     94 01 90 5D |  if_ne	jmp	#LR__2372
1a204     0C 4E 05 F1 | 	add	fp, #12
1a208     A7 12 02 FB | 	rdlong	arg01, fp
1a20c     08 4E 05 F1 | 	add	fp, #8
1a210     A7 14 02 F6 | 	mov	arg02, fp
1a214     0C 4E 05 F1 | 	add	fp, #12
1a218     A7 16 02 F6 | 	mov	arg03, fp
1a21c     98 4E 05 F1 | 	add	fp, #152
1a220     A7 18 02 FB | 	rdlong	arg04, fp
1a224     9C 4E 85 F1 | 	sub	fp, #156
1a228     A7 1A 02 FB | 	rdlong	arg05, fp
1a22c     1C 4E 85 F1 | 	sub	fp, #28
1a230     F4 3F B0 FD | 	call	#__system__disassemble_0375
1a234     10 4E 05 F1 | 	add	fp, #16
1a238     A7 1E 02 FB | 	rdlong	local01, fp
1a23c     10 4E 85 F1 | 	sub	fp, #16
1a240     23 1E 0E F2 | 	cmp	local01, #35 wz
1a244     A0 00 90 5D |  if_ne	jmp	#LR__2369
1a248     20 4E 05 F1 | 	add	fp, #32
1a24c     A7 1E 02 FB | 	rdlong	local01, fp
1a250     98 4E 05 F1 | 	add	fp, #152
1a254     A7 22 02 FB | 	rdlong	local03, fp
1a258     B8 4E 85 F1 | 	sub	fp, #184
1a25c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a260     24 4E 05 11 |  if_a	add	fp, #36
1a264     A7 02 68 1C |  if_a	wrlong	#1, fp
1a268     24 4E 85 11 |  if_a	sub	fp, #36
1a26c     A4 01 90 1D |  if_a	jmp	#LR__2375
1a270     20 4E 05 F1 | 	add	fp, #32
1a274     A7 1E 02 FB | 	rdlong	local01, fp
1a278     20 4E 85 F1 | 	sub	fp, #32
1a27c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a280     2C 00 90 3D |  if_ae	jmp	#LR__2368
1a284     B8 4E 05 F1 | 	add	fp, #184
1a288     A7 1E 02 FB | 	rdlong	local01, fp
1a28c     0F 1F 62 F6 | 	neg	local01, local01
1a290     98 4E 85 F1 | 	sub	fp, #152
1a294     A7 22 02 FB | 	rdlong	local03, fp
1a298     20 4E 85 F1 | 	sub	fp, #32
1a29c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1a2a0     24 4E 05 E1 |  if_be	add	fp, #36
1a2a4     A7 02 68 EC |  if_be	wrlong	#1, fp
1a2a8     24 4E 85 E1 |  if_be	sub	fp, #36
1a2ac     64 01 90 FD | 	jmp	#LR__2375
1a2b0                 | LR__2368
1a2b0     20 4E 05 F1 | 	add	fp, #32
1a2b4     A7 1E 02 FB | 	rdlong	local01, fp
1a2b8     20 4E 85 F1 | 	sub	fp, #32
1a2bc     01 1E 56 F2 | 	cmps	local01, #1 wc
1a2c0     50 01 90 CD |  if_b	jmp	#LR__2375
1a2c4     B8 4E 05 F1 | 	add	fp, #184
1a2c8     A7 1E 02 FB | 	rdlong	local01, fp
1a2cc     98 4E 85 F1 | 	sub	fp, #152
1a2d0     A7 22 02 FB | 	rdlong	local03, fp
1a2d4     11 1F 82 F1 | 	sub	local01, local03
1a2d8     98 4E 05 F1 | 	add	fp, #152
1a2dc     A7 1E 62 FC | 	wrlong	local01, fp
1a2e0     B8 4E 85 F1 | 	sub	fp, #184
1a2e4     2C 01 90 FD | 	jmp	#LR__2375
1a2e8                 | LR__2369
1a2e8     00 1E 06 F6 | 	mov	local01, #0
1a2ec     08 4E 05 F1 | 	add	fp, #8
1a2f0     A7 20 02 FB | 	rdlong	local02, fp
1a2f4     1C 20 46 F0 | 	shr	local02, #28
1a2f8     01 20 0E F5 | 	and	local02, #1 wz
1a2fc     01 1E 06 A6 |  if_e	mov	local01, #1
1a300     2C 4E 05 F1 | 	add	fp, #44
1a304     A7 1E 62 FC | 	wrlong	local01, fp
1a308     14 4E 85 F1 | 	sub	fp, #20
1a30c     A7 1E 02 FB | 	rdlong	local01, fp
1a310     98 4E 05 F1 | 	add	fp, #152
1a314     A7 22 02 FB | 	rdlong	local03, fp
1a318     B8 4E 85 F1 | 	sub	fp, #184
1a31c     11 1F 52 F2 | 	cmps	local01, local03 wc
1a320     18 00 90 3D |  if_ae	jmp	#LR__2370
1a324     20 4E 05 F1 | 	add	fp, #32
1a328     A7 24 02 FB | 	rdlong	local04, fp
1a32c     20 4E 85 F1 | 	sub	fp, #32
1a330     FF FF 7F FF 
1a334     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a338     10 00 90 3D |  if_ae	jmp	#LR__2371
1a33c                 | LR__2370
1a33c     24 4E 05 F1 | 	add	fp, #36
1a340     A7 02 68 FC | 	wrlong	#1, fp
1a344     24 4E 85 F1 | 	sub	fp, #36
1a348     C8 00 90 FD | 	jmp	#LR__2375
1a34c                 | LR__2371
1a34c     B8 4E 05 F1 | 	add	fp, #184
1a350     A7 24 02 FB | 	rdlong	local04, fp
1a354     98 4E 85 F1 | 	sub	fp, #152
1a358     A7 22 02 FB | 	rdlong	local03, fp
1a35c     11 25 82 F1 | 	sub	local04, local03
1a360     98 4E 05 F1 | 	add	fp, #152
1a364     A7 24 62 FC | 	wrlong	local04, fp
1a368     AC 4E 85 F1 | 	sub	fp, #172
1a36c     A7 12 02 FB | 	rdlong	arg01, fp
1a370     08 4E 05 F1 | 	add	fp, #8
1a374     A7 14 02 F6 | 	mov	arg02, fp
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 16 02 F6 | 	mov	arg03, fp
1a380     12 19 62 F6 | 	neg	arg04, local04
1a384     04 4E 85 F1 | 	sub	fp, #4
1a388     A7 1A 02 FB | 	rdlong	arg05, fp
1a38c     1C 4E 85 F1 | 	sub	fp, #28
1a390     94 3E B0 FD | 	call	#__system__disassemble_0375
1a394     7C 00 90 FD | 	jmp	#LR__2375
1a398                 | LR__2372
1a398     24 4E 05 F1 | 	add	fp, #36
1a39c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a3a0     24 4E 85 F1 | 	sub	fp, #36
1a3a4     34 00 90 AD |  if_e	jmp	#LR__2373
1a3a8     0C 4E 05 F1 | 	add	fp, #12
1a3ac     A7 12 02 FB | 	rdlong	arg01, fp
1a3b0     08 4E 05 F1 | 	add	fp, #8
1a3b4     A7 14 02 F6 | 	mov	arg02, fp
1a3b8     0C 4E 05 F1 | 	add	fp, #12
1a3bc     A7 16 02 F6 | 	mov	arg03, fp
1a3c0     98 4E 05 F1 | 	add	fp, #152
1a3c4     A7 18 02 FB | 	rdlong	arg04, fp
1a3c8     9C 4E 85 F1 | 	sub	fp, #156
1a3cc     A7 1A 02 FB | 	rdlong	arg05, fp
1a3d0     1C 4E 85 F1 | 	sub	fp, #28
1a3d4     50 3E B0 FD | 	call	#__system__disassemble_0375
1a3d8     38 00 90 FD | 	jmp	#LR__2374
1a3dc                 | LR__2373
1a3dc     0C 4E 05 F1 | 	add	fp, #12
1a3e0     A7 12 02 FB | 	rdlong	arg01, fp
1a3e4     08 4E 05 F1 | 	add	fp, #8
1a3e8     A7 14 02 F6 | 	mov	arg02, fp
1a3ec     0C 4E 05 F1 | 	add	fp, #12
1a3f0     A7 16 02 F6 | 	mov	arg03, fp
1a3f4     98 4E 05 F1 | 	add	fp, #152
1a3f8     A7 24 02 FB | 	rdlong	local04, fp
1a3fc     01 24 06 F1 | 	add	local04, #1
1a400     12 19 62 F6 | 	neg	arg04, local04
1a404     9C 4E 85 F1 | 	sub	fp, #156
1a408     A7 1A 02 FB | 	rdlong	arg05, fp
1a40c     1C 4E 85 F1 | 	sub	fp, #28
1a410     14 3E B0 FD | 	call	#__system__disassemble_0375
1a414                 | LR__2374
1a414                 | LR__2375
1a414     1C 4E 05 F1 | 	add	fp, #28
1a418     A7 1E 02 FB | 	rdlong	local01, fp
1a41c     1C 4E 85 F1 | 	sub	fp, #28
1a420     02 1E 0E F2 | 	cmp	local01, #2 wz
1a424     4C 00 90 5D |  if_ne	jmp	#LR__2378
1a428     1C 4E 05 F1 | 	add	fp, #28
1a42c     A7 20 68 FC | 	wrlong	#16, fp
1a430     1C 4E 85 F1 | 	sub	fp, #28
1a434                 | LR__2376
1a434     14 4E 05 F1 | 	add	fp, #20
1a438     A7 1E 0A FB | 	rdlong	local01, fp wz
1a43c     14 4E 85 F1 | 	sub	fp, #20
1a440     30 00 90 AD |  if_e	jmp	#LR__2377
1a444     14 4E 05 F1 | 	add	fp, #20
1a448     A7 22 02 FB | 	rdlong	local03, fp
1a44c     14 4E 85 F1 | 	sub	fp, #20
1a450     00 80 00 FF 
1a454     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a458     18 00 90 3D |  if_ae	jmp	#LR__2377
1a45c     14 4E 05 F1 | 	add	fp, #20
1a460     A7 1E 02 FB | 	rdlong	local01, fp
1a464     01 1E 66 F0 | 	shl	local01, #1
1a468     A7 1E 62 FC | 	wrlong	local01, fp
1a46c     14 4E 85 F1 | 	sub	fp, #20
1a470     C0 FF 9F FD | 	jmp	#LR__2376
1a474                 | LR__2377
1a474                 | LR__2378
1a474     70 4E 05 F1 | 	add	fp, #112
1a478     A7 12 02 F6 | 	mov	arg01, fp
1a47c     5C 4E 85 F1 | 	sub	fp, #92
1a480     A7 14 02 FB | 	rdlong	arg02, fp
1a484     08 4E 05 F1 | 	add	fp, #8
1a488     A7 16 02 FB | 	rdlong	arg03, fp
1a48c     A0 4E 05 F1 | 	add	fp, #160
1a490     A7 1A 02 FB | 	rdlong	arg05, fp
1a494     BC 4E 85 F1 | 	sub	fp, #188
1a498     01 18 06 F6 | 	mov	arg04, #1
1a49c     14 3D B0 FD | 	call	#__system___uitoa
1a4a0     58 4E 05 F1 | 	add	fp, #88
1a4a4     A7 FA 61 FC | 	wrlong	result1, fp
1a4a8     38 4E 85 F1 | 	sub	fp, #56
1a4ac     A7 1E 02 FB | 	rdlong	local01, fp
1a4b0     20 4E 85 F1 | 	sub	fp, #32
1a4b4     00 1E 56 F2 | 	cmps	local01, #0 wc
1a4b8     50 00 90 3D |  if_ae	jmp	#LR__2379
1a4bc     60 4E 05 F1 | 	add	fp, #96
1a4c0     A7 5A 68 FC | 	wrlong	#45, fp
1a4c4     50 4E 05 F1 | 	add	fp, #80
1a4c8     A7 12 02 F6 | 	mov	arg01, fp
1a4cc     90 4E 85 F1 | 	sub	fp, #144
1a4d0     A7 22 02 FB | 	rdlong	local03, fp
1a4d4     11 15 62 F6 | 	neg	arg02, local03
1a4d8     18 4E 05 F1 | 	add	fp, #24
1a4dc     A7 18 02 FB | 	rdlong	arg04, fp
1a4e0     84 4E 05 F1 | 	add	fp, #132
1a4e4     A7 28 02 FB | 	rdlong	local06, fp
1a4e8     BC 4E 85 F1 | 	sub	fp, #188
1a4ec     14 25 02 F6 | 	mov	local04, local06
1a4f0     0A 16 06 F6 | 	mov	arg03, #10
1a4f4     12 1B 02 F6 | 	mov	arg05, local04
1a4f8     B8 3C B0 FD | 	call	#__system___uitoa
1a4fc     5C 4E 05 F1 | 	add	fp, #92
1a500     A7 FA 61 FC | 	wrlong	result1, fp
1a504     5C 4E 85 F1 | 	sub	fp, #92
1a508     48 00 90 FD | 	jmp	#LR__2380
1a50c                 | LR__2379
1a50c     60 4E 05 F1 | 	add	fp, #96
1a510     A7 56 68 FC | 	wrlong	#43, fp
1a514     50 4E 05 F1 | 	add	fp, #80
1a518     A7 12 02 F6 | 	mov	arg01, fp
1a51c     90 4E 85 F1 | 	sub	fp, #144
1a520     A7 14 02 FB | 	rdlong	arg02, fp
1a524     18 4E 05 F1 | 	add	fp, #24
1a528     A7 18 02 FB | 	rdlong	arg04, fp
1a52c     84 4E 05 F1 | 	add	fp, #132
1a530     A7 28 02 FB | 	rdlong	local06, fp
1a534     BC 4E 85 F1 | 	sub	fp, #188
1a538     14 25 02 F6 | 	mov	local04, local06
1a53c     0A 16 06 F6 | 	mov	arg03, #10
1a540     12 1B 02 F6 | 	mov	arg05, local04
1a544     6C 3C B0 FD | 	call	#__system___uitoa
1a548     5C 4E 05 F1 | 	add	fp, #92
1a54c     A7 FA 61 FC | 	wrlong	result1, fp
1a550     5C 4E 85 F1 | 	sub	fp, #92
1a554                 | LR__2380
1a554     24 4E 05 F1 | 	add	fp, #36
1a558     A7 1E 0A FB | 	rdlong	local01, fp wz
1a55c     24 4E 85 F1 | 	sub	fp, #36
1a560     2C 00 90 AD |  if_e	jmp	#LR__2381
1a564     50 4E 05 F1 | 	add	fp, #80
1a568     A7 00 68 FC | 	wrlong	#0, fp
1a56c     04 4E 85 F1 | 	sub	fp, #4
1a570     A7 00 68 FC | 	wrlong	#0, fp
1a574     6C 4E 05 F1 | 	add	fp, #108
1a578     A7 1E 02 FB | 	rdlong	local01, fp
1a57c     01 1E 06 F1 | 	add	local01, #1
1a580     64 4E 85 F1 | 	sub	fp, #100
1a584     A7 1E 62 FC | 	wrlong	local01, fp
1a588     54 4E 85 F1 | 	sub	fp, #84
1a58c     88 00 90 FD | 	jmp	#LR__2384
1a590                 | LR__2381
1a590     20 4E 05 F1 | 	add	fp, #32
1a594     A7 1E 02 FB | 	rdlong	local01, fp
1a598     20 4E 85 F1 | 	sub	fp, #32
1a59c     00 1E 56 F2 | 	cmps	local01, #0 wc
1a5a0     40 00 90 3D |  if_ae	jmp	#LR__2382
1a5a4     20 4E 05 F1 | 	add	fp, #32
1a5a8     A7 20 02 FB | 	rdlong	local02, fp
1a5ac     30 4E 05 F1 | 	add	fp, #48
1a5b0     A7 20 62 FC | 	wrlong	local02, fp
1a5b4     04 4E 85 F1 | 	sub	fp, #4
1a5b8     A7 20 62 FC | 	wrlong	local02, fp
1a5bc     2C 4E 85 F1 | 	sub	fp, #44
1a5c0     A7 1E 02 FB | 	rdlong	local01, fp
1a5c4     98 4E 05 F1 | 	add	fp, #152
1a5c8     A7 22 02 FB | 	rdlong	local03, fp
1a5cc     11 1F 02 F1 | 	add	local01, local03
1a5d0     01 1E 06 F1 | 	add	local01, #1
1a5d4     64 4E 85 F1 | 	sub	fp, #100
1a5d8     A7 1E 62 FC | 	wrlong	local01, fp
1a5dc     54 4E 85 F1 | 	sub	fp, #84
1a5e0     34 00 90 FD | 	jmp	#LR__2383
1a5e4                 | LR__2382
1a5e4     4C 4E 05 F1 | 	add	fp, #76
1a5e8     A7 00 68 FC | 	wrlong	#0, fp
1a5ec     2C 4E 85 F1 | 	sub	fp, #44
1a5f0     A7 1E 02 FB | 	rdlong	local01, fp
1a5f4     30 4E 05 F1 | 	add	fp, #48
1a5f8     A7 1E 62 FC | 	wrlong	local01, fp
1a5fc     68 4E 05 F1 | 	add	fp, #104
1a600     A7 22 02 FB | 	rdlong	local03, fp
1a604     11 1F 02 F1 | 	add	local01, local03
1a608     01 1E 06 F1 | 	add	local01, #1
1a60c     64 4E 85 F1 | 	sub	fp, #100
1a610     A7 1E 62 FC | 	wrlong	local01, fp
1a614     54 4E 85 F1 | 	sub	fp, #84
1a618                 | LR__2383
1a618                 | LR__2384
1a618     54 4E 05 F1 | 	add	fp, #84
1a61c     A7 1E 02 FB | 	rdlong	local01, fp
1a620     08 4E 85 F1 | 	sub	fp, #8
1a624     A7 22 02 FB | 	rdlong	local03, fp
1a628     11 1F 82 F1 | 	sub	local01, local03
1a62c     01 1E 06 F1 | 	add	local01, #1
1a630     24 4E 85 F1 | 	sub	fp, #36
1a634     A7 1E 62 FC | 	wrlong	local01, fp
1a638     04 4E 05 F1 | 	add	fp, #4
1a63c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a640     2C 4E 85 F1 | 	sub	fp, #44
1a644     28 4E 05 51 |  if_ne	add	fp, #40
1a648     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a64c     01 22 06 51 |  if_ne	add	local03, #1
1a650     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a654     28 4E 85 51 |  if_ne	sub	fp, #40
1a658     1C 4E 05 F1 | 	add	fp, #28
1a65c     A7 1E 02 FB | 	rdlong	local01, fp
1a660     1C 4E 85 F1 | 	sub	fp, #28
1a664     10 1E 0E F2 | 	cmp	local01, #16 wz
1a668     28 4E 05 A1 |  if_e	add	fp, #40
1a66c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a670     02 1E 06 A1 |  if_e	add	local01, #2
1a674     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a678     28 4E 85 A1 |  if_e	sub	fp, #40
1a67c     24 4E 05 F1 | 	add	fp, #36
1a680     A7 1E 0A FB | 	rdlong	local01, fp wz
1a684     24 4E 85 F1 | 	sub	fp, #36
1a688     28 00 90 AD |  if_e	jmp	#LR__2385
1a68c     28 4E 05 F1 | 	add	fp, #40
1a690     A7 1E 02 FB | 	rdlong	local01, fp
1a694     02 22 06 F6 | 	mov	local03, #2
1a698     34 4E 05 F1 | 	add	fp, #52
1a69c     A7 26 02 FB | 	rdlong	local05, fp
1a6a0     13 23 02 F1 | 	add	local03, local05
1a6a4     11 1F 02 F1 | 	add	local01, local03
1a6a8     34 4E 85 F1 | 	sub	fp, #52
1a6ac     A7 1E 62 FC | 	wrlong	local01, fp
1a6b0     28 4E 85 F1 | 	sub	fp, #40
1a6b4                 | LR__2385
1a6b4     28 4E 05 F1 | 	add	fp, #40
1a6b8     A7 1E 02 FB | 	rdlong	local01, fp
1a6bc     28 4E 85 F1 | 	sub	fp, #40
1a6c0     41 1E 56 F2 | 	cmps	local01, #65 wc
1a6c4     01 FA 65 36 |  if_ae	neg	result1, #1
1a6c8     08 05 90 3D |  if_ae	jmp	#LR__2413
1a6cc     3C 4E 05 F1 | 	add	fp, #60
1a6d0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a6d4     3C 4E 85 F1 | 	sub	fp, #60
1a6d8     60 00 90 AD |  if_e	jmp	#LR__2386
1a6dc     C0 4E 05 F1 | 	add	fp, #192
1a6e0     A7 12 02 FB | 	rdlong	arg01, fp
1a6e4     94 4E 85 F1 | 	sub	fp, #148
1a6e8     A7 14 02 FB | 	rdlong	arg02, fp
1a6ec     14 4E 05 F1 | 	add	fp, #20
1a6f0     A7 16 02 FB | 	rdlong	arg03, fp
1a6f4     40 4E 85 F1 | 	sub	fp, #64
1a6f8     20 3D B0 FD | 	call	#__system__emitsign_0377
1a6fc     18 4F 05 F1 | 	add	fp, #280
1a700     A7 FA 61 FC | 	wrlong	result1, fp
1a704     18 4F 85 F1 | 	sub	fp, #280
1a708     00 FA 55 F2 | 	cmps	result1, #0 wc
1a70c     18 4F 05 C1 |  if_b	add	fp, #280
1a710     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a714     18 4F 85 C1 |  if_b	sub	fp, #280
1a718     B8 04 90 CD |  if_b	jmp	#LR__2413
1a71c     C0 4E 05 F1 | 	add	fp, #192
1a720     A7 1E 02 FB | 	rdlong	local01, fp
1a724     58 4E 05 F1 | 	add	fp, #88
1a728     A7 22 02 FB | 	rdlong	local03, fp
1a72c     11 1F 02 F1 | 	add	local01, local03
1a730     58 4E 85 F1 | 	sub	fp, #88
1a734     A7 1E 62 FC | 	wrlong	local01, fp
1a738     C0 4E 85 F1 | 	sub	fp, #192
1a73c                 | LR__2386
1a73c     4C 4E 05 F1 | 	add	fp, #76
1a740     A7 1E 02 FB | 	rdlong	local01, fp
1a744     34 4E 85 F1 | 	sub	fp, #52
1a748     A7 1E 62 FC | 	wrlong	local01, fp
1a74c     18 4E 85 F1 | 	sub	fp, #24
1a750     97 9E 48 FB | 	callpa	#(@LR__2392-@LR__2387)>>2,fcache_load_ptr_
1a754                 | LR__2387
1a754     18 4E 05 F1 | 	add	fp, #24
1a758     A7 20 02 FB | 	rdlong	local02, fp
1a75c     3C 4E 05 F1 | 	add	fp, #60
1a760     A7 26 02 FB | 	rdlong	local05, fp
1a764     54 4E 85 F1 | 	sub	fp, #84
1a768     13 21 52 F2 | 	cmps	local02, local05 wc
1a76c     20 01 90 3D |  if_ae	jmp	#LR__2393
1a770     18 4E 05 F1 | 	add	fp, #24
1a774     A7 28 02 FB | 	rdlong	local06, fp
1a778     18 4E 85 F1 | 	sub	fp, #24
1a77c     00 28 56 F2 | 	cmps	local06, #0 wc
1a780     58 00 90 CD |  if_b	jmp	#LR__2388
1a784     18 4E 05 F1 | 	add	fp, #24
1a788     A7 28 02 FB | 	rdlong	local06, fp
1a78c     40 4E 05 F1 | 	add	fp, #64
1a790     A7 2A 02 FB | 	rdlong	local07, fp
1a794     58 4E 85 F1 | 	sub	fp, #88
1a798     15 29 52 F2 | 	cmps	local06, local07 wc
1a79c     3C 00 90 3D |  if_ae	jmp	#LR__2388
1a7a0     C0 4E 05 F1 | 	add	fp, #192
1a7a4     A7 2C 02 FB | 	rdlong	local08, fp
1a7a8     16 2B 02 F6 | 	mov	local07, local08
1a7ac     01 2A 06 F1 | 	add	local07, #1
1a7b0     A7 2A 62 FC | 	wrlong	local07, fp
1a7b4     A8 4E 85 F1 | 	sub	fp, #168
1a7b8     A7 2A 02 FB | 	rdlong	local07, fp
1a7bc     15 2F 02 F6 | 	mov	local09, local07
1a7c0     58 4E 05 F1 | 	add	fp, #88
1a7c4     A7 30 02 F6 | 	mov	local10, fp
1a7c8     A7 2E 02 F1 | 	add	local09, fp
1a7cc     17 33 C2 FA | 	rdbyte	local11, local09
1a7d0     16 33 42 FC | 	wrbyte	local11, local08
1a7d4     70 4E 85 F1 | 	sub	fp, #112
1a7d8     20 00 90 FD | 	jmp	#LR__2389
1a7dc                 | LR__2388
1a7dc     C0 4E 05 F1 | 	add	fp, #192
1a7e0     A7 2C 02 FB | 	rdlong	local08, fp
1a7e4     16 2F 02 F6 | 	mov	local09, local08
1a7e8     01 2E 06 F1 | 	add	local09, #1
1a7ec     A7 2E 62 FC | 	wrlong	local09, fp
1a7f0     C0 4E 85 F1 | 	sub	fp, #192
1a7f4     30 2E 06 F6 | 	mov	local09, #48
1a7f8     16 61 48 FC | 	wrbyte	#48, local08
1a7fc                 | LR__2389
1a7fc     18 4E 05 F1 | 	add	fp, #24
1a800     A7 28 02 FB | 	rdlong	local06, fp
1a804     38 4E 05 F1 | 	add	fp, #56
1a808     A7 34 02 FB | 	rdlong	local12, fp
1a80c     50 4E 85 F1 | 	sub	fp, #80
1a810     1A 29 0A F2 | 	cmp	local06, local12 wz
1a814     5C 00 90 5D |  if_ne	jmp	#LR__2391
1a818     10 4F 05 F1 | 	add	fp, #272
1a81c     A7 2A 02 FB | 	rdlong	local07, fp
1a820     10 4F 85 F1 | 	sub	fp, #272
1a824     15 2F 0A F6 | 	mov	local09, local07 wz
1a828     28 00 90 5D |  if_ne	jmp	#LR__2390
1a82c     54 4E 05 F1 | 	add	fp, #84
1a830     A7 32 02 FB | 	rdlong	local11, fp
1a834     19 31 02 F6 | 	mov	local10, local11
1a838     01 30 86 F1 | 	sub	local10, #1
1a83c     3C 4E 85 F1 | 	sub	fp, #60
1a840     A7 36 02 FB | 	rdlong	local13, fp
1a844     18 4E 85 F1 | 	sub	fp, #24
1a848     1B 39 02 F6 | 	mov	local14, local13
1a84c     18 39 52 F2 | 	cmps	local14, local10 wc
1a850     20 00 90 3D |  if_ae	jmp	#LR__2391
1a854                 | LR__2390
1a854     C0 4E 05 F1 | 	add	fp, #192
1a858     A7 2C 02 FB | 	rdlong	local08, fp
1a85c     16 35 02 F6 | 	mov	local12, local08
1a860     01 34 06 F1 | 	add	local12, #1
1a864     A7 34 62 FC | 	wrlong	local12, fp
1a868     C0 4E 85 F1 | 	sub	fp, #192
1a86c     2E 2E 06 F6 | 	mov	local09, #46
1a870     16 5D 48 FC | 	wrbyte	#46, local08
1a874                 | LR__2391
1a874     18 4E 05 F1 | 	add	fp, #24
1a878     A7 3A 02 FB | 	rdlong	local15, fp
1a87c     1D 35 02 F6 | 	mov	local12, local15
1a880     01 34 06 F1 | 	add	local12, #1
1a884     A7 34 62 FC | 	wrlong	local12, fp
1a888     18 4E 85 F1 | 	sub	fp, #24
1a88c     C4 FE 9F FD | 	jmp	#LR__2387
1a890                 | LR__2392
1a890                 | LR__2393
1a890     34 4E 05 F1 | 	add	fp, #52
1a894     A7 1E 0A FB | 	rdlong	local01, fp wz
1a898     34 4E 85 F1 | 	sub	fp, #52
1a89c     A0 00 90 AD |  if_e	jmp	#LR__2397
1a8a0     C0 4E 05 F1 | 	add	fp, #192
1a8a4     A7 1E 02 FB | 	rdlong	local01, fp
1a8a8     01 1E 86 F1 | 	sub	local01, #1
1a8ac     A7 1E 62 FC | 	wrlong	local01, fp
1a8b0     C0 4E 85 F1 | 	sub	fp, #192
1a8b4     97 26 48 FB | 	callpa	#(@LR__2395-@LR__2394)>>2,fcache_load_ptr_
1a8b8                 | LR__2394
1a8b8     C0 4E 05 F1 | 	add	fp, #192
1a8bc     A7 1E 02 FB | 	rdlong	local01, fp
1a8c0     04 4E 05 F1 | 	add	fp, #4
1a8c4     A7 22 02 FB | 	rdlong	local03, fp
1a8c8     C4 4E 85 F1 | 	sub	fp, #196
1a8cc     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a8d0     30 00 90 ED |  if_be	jmp	#LR__2396
1a8d4     C0 4E 05 F1 | 	add	fp, #192
1a8d8     A7 28 02 FB | 	rdlong	local06, fp
1a8dc     C0 4E 85 F1 | 	sub	fp, #192
1a8e0     14 25 C2 FA | 	rdbyte	local04, local06
1a8e4     30 24 0E F2 | 	cmp	local04, #48 wz
1a8e8     18 00 90 5D |  if_ne	jmp	#LR__2396
1a8ec     C0 4E 05 F1 | 	add	fp, #192
1a8f0     A7 1E 02 FB | 	rdlong	local01, fp
1a8f4     01 1E 86 F1 | 	sub	local01, #1
1a8f8     A7 1E 62 FC | 	wrlong	local01, fp
1a8fc     C0 4E 85 F1 | 	sub	fp, #192
1a900     B4 FF 9F FD | 	jmp	#LR__2394
1a904                 | LR__2395
1a904                 | LR__2396
1a904     C0 4E 05 F1 | 	add	fp, #192
1a908     A7 20 02 FB | 	rdlong	local02, fp
1a90c     C0 4E 85 F1 | 	sub	fp, #192
1a910     10 1F C2 FA | 	rdbyte	local01, local02
1a914     2E 1E 0E F2 | 	cmp	local01, #46 wz
1a918     C0 4E 05 A1 |  if_e	add	fp, #192
1a91c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a920     01 1E 86 A1 |  if_e	sub	local01, #1
1a924     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a928     C0 4E 85 A1 |  if_e	sub	fp, #192
1a92c     C0 4E 05 F1 | 	add	fp, #192
1a930     A7 22 02 FB | 	rdlong	local03, fp
1a934     01 22 06 F1 | 	add	local03, #1
1a938     A7 22 62 FC | 	wrlong	local03, fp
1a93c     C0 4E 85 F1 | 	sub	fp, #192
1a940                 | LR__2397
1a940     24 4E 05 F1 | 	add	fp, #36
1a944     A7 1E 0A FB | 	rdlong	local01, fp wz
1a948     24 4E 85 F1 | 	sub	fp, #36
1a94c     B4 00 90 AD |  if_e	jmp	#LR__2400
1a950     C0 4E 05 F1 | 	add	fp, #192
1a954     A7 20 02 FB | 	rdlong	local02, fp
1a958     10 23 02 F6 | 	mov	local03, local02
1a95c     01 22 06 F1 | 	add	local03, #1
1a960     A7 22 62 FC | 	wrlong	local03, fp
1a964     90 4E 85 F1 | 	sub	fp, #144
1a968     A7 24 02 FB | 	rdlong	local04, fp
1a96c     10 25 42 FC | 	wrbyte	local04, local02
1a970     90 4E 05 F1 | 	add	fp, #144
1a974     A7 20 02 FB | 	rdlong	local02, fp
1a978     10 23 02 F6 | 	mov	local03, local02
1a97c     01 22 06 F1 | 	add	local03, #1
1a980     A7 22 62 FC | 	wrlong	local03, fp
1a984     60 4E 85 F1 | 	sub	fp, #96
1a988     A7 24 02 FB | 	rdlong	local04, fp
1a98c     10 25 42 FC | 	wrbyte	local04, local02
1a990     48 4E 85 F1 | 	sub	fp, #72
1a994     A7 00 68 FC | 	wrlong	#0, fp
1a998     18 4E 85 F1 | 	sub	fp, #24
1a99c                 | LR__2398
1a99c     18 4E 05 F1 | 	add	fp, #24
1a9a0     A7 20 02 FB | 	rdlong	local02, fp
1a9a4     44 4E 05 F1 | 	add	fp, #68
1a9a8     A7 26 02 FB | 	rdlong	local05, fp
1a9ac     5C 4E 85 F1 | 	sub	fp, #92
1a9b0     13 21 52 F2 | 	cmps	local02, local05 wc
1a9b4     4C 00 90 3D |  if_ae	jmp	#LR__2399
1a9b8     C0 4E 05 F1 | 	add	fp, #192
1a9bc     A7 2C 02 FB | 	rdlong	local08, fp
1a9c0     16 35 02 F6 | 	mov	local12, local08
1a9c4     01 34 06 F1 | 	add	local12, #1
1a9c8     A7 34 62 FC | 	wrlong	local12, fp
1a9cc     A8 4E 85 F1 | 	sub	fp, #168
1a9d0     A7 2A 02 FB | 	rdlong	local07, fp
1a9d4     15 2F 02 F6 | 	mov	local09, local07
1a9d8     98 4E 05 F1 | 	add	fp, #152
1a9dc     A7 30 02 F6 | 	mov	local10, fp
1a9e0     A7 2E 02 F1 | 	add	local09, fp
1a9e4     17 33 C2 FA | 	rdbyte	local11, local09
1a9e8     16 33 42 FC | 	wrbyte	local11, local08
1a9ec     98 4E 85 F1 | 	sub	fp, #152
1a9f0     A7 34 02 FB | 	rdlong	local12, fp
1a9f4     01 34 06 F1 | 	add	local12, #1
1a9f8     A7 34 62 FC | 	wrlong	local12, fp
1a9fc     18 4E 85 F1 | 	sub	fp, #24
1aa00     98 FF 9F FD | 	jmp	#LR__2398
1aa04                 | LR__2399
1aa04                 | LR__2400
1aa04     C0 4E 05 F1 | 	add	fp, #192
1aa08     A7 1E 02 FB | 	rdlong	local01, fp
1aa0c     C0 4E 85 F1 | 	sub	fp, #192
1aa10     0F 01 48 FC | 	wrbyte	#0, local01
1aa14                 | LR__2401
1aa14     6C 4E 05 F1 | 	add	fp, #108
1aa18     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa1c     6C 4E 85 F1 | 	sub	fp, #108
1aa20     90 01 90 AD |  if_e	jmp	#LR__2412
1aa24     48 4E 05 F1 | 	add	fp, #72
1aa28     A7 22 0A FB | 	rdlong	local03, fp wz
1aa2c     48 4E 85 F1 | 	sub	fp, #72
1aa30     80 01 90 AD |  if_e	jmp	#LR__2412
1aa34     C4 4E 05 F1 | 	add	fp, #196
1aa38     A7 12 02 FB | 	rdlong	arg01, fp
1aa3c     C4 4E 85 F1 | 	sub	fp, #196
1aa40     09 3D 02 F6 | 	mov	local16, arg01
1aa44     97 06 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1aa48                 | LR__2402
1aa48     1E FB C9 FA | 	rdbyte	result1, local16 wz
1aa4c     01 3C 06 51 |  if_ne	add	local16, #1
1aa50     F4 FF 9F 5D |  if_ne	jmp	#LR__2402
1aa54                 | LR__2403
1aa54     09 3D 82 F1 | 	sub	local16, arg01
1aa58     1E 25 02 F6 | 	mov	local04, local16
1aa5c     6C 4E 05 F1 | 	add	fp, #108
1aa60     A7 28 02 FB | 	rdlong	local06, fp
1aa64     6C 4E 85 F1 | 	sub	fp, #108
1aa68     14 25 5A F2 | 	cmps	local04, local06 wcz
1aa6c     44 01 90 ED |  if_be	jmp	#LR__2412
1aa70     C4 4E 05 F1 | 	add	fp, #196
1aa74     A7 1E 02 FB | 	rdlong	local01, fp
1aa78     5C 4E 05 F1 | 	add	fp, #92
1aa7c     A7 1E 62 FC | 	wrlong	local01, fp
1aa80     FC 4E 85 F1 | 	sub	fp, #252
1aa84     A7 1E 0A FB | 	rdlong	local01, fp wz
1aa88     24 4E 85 F1 | 	sub	fp, #36
1aa8c     20 00 90 AD |  if_e	jmp	#LR__2404
1aa90     B8 4E 05 F1 | 	add	fp, #184
1aa94     A7 00 68 FC | 	wrlong	#0, fp
1aa98     4C 4E 85 F1 | 	sub	fp, #76
1aa9c     A7 1E 02 FB | 	rdlong	local01, fp
1aaa0     B0 4E 05 F1 | 	add	fp, #176
1aaa4     A7 1E 62 FC | 	wrlong	local01, fp
1aaa8     1C 4F 85 F1 | 	sub	fp, #284
1aaac     24 00 90 FD | 	jmp	#LR__2405
1aab0                 | LR__2404
1aab0     6C 4E 05 F1 | 	add	fp, #108
1aab4     A7 1E 02 FB | 	rdlong	local01, fp
1aab8     01 1E 86 F1 | 	sub	local01, #1
1aabc     4C 4E 05 F1 | 	add	fp, #76
1aac0     A7 22 02 FB | 	rdlong	local03, fp
1aac4     11 1F 82 F1 | 	sub	local01, local03
1aac8     64 4E 05 F1 | 	add	fp, #100
1aacc     A7 1E 62 FC | 	wrlong	local01, fp
1aad0     1C 4F 85 F1 | 	sub	fp, #284
1aad4                 | LR__2405
1aad4     97 20 48 FB | 	callpa	#(@LR__2407-@LR__2406)>>2,fcache_load_ptr_
1aad8                 | LR__2406
1aad8     1C 4F 05 F1 | 	add	fp, #284
1aadc     A7 1E 0A FB | 	rdlong	local01, fp wz
1aae0     1C 4F 85 F1 | 	sub	fp, #284
1aae4     30 00 90 AD |  if_e	jmp	#LR__2408
1aae8     20 4F 05 F1 | 	add	fp, #288
1aaec     A7 20 02 FB | 	rdlong	local02, fp
1aaf0     10 23 02 F6 | 	mov	local03, local02
1aaf4     01 22 06 F1 | 	add	local03, #1
1aaf8     A7 22 62 FC | 	wrlong	local03, fp
1aafc     10 55 48 FC | 	wrbyte	#42, local02
1ab00     04 4E 85 F1 | 	sub	fp, #4
1ab04     A7 1E 02 FB | 	rdlong	local01, fp
1ab08     01 1E 86 F1 | 	sub	local01, #1
1ab0c     A7 1E 62 FC | 	wrlong	local01, fp
1ab10     1C 4F 85 F1 | 	sub	fp, #284
1ab14     C0 FF 9F FD | 	jmp	#LR__2406
1ab18                 | LR__2407
1ab18                 | LR__2408
1ab18     B8 4E 05 F1 | 	add	fp, #184
1ab1c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ab20     B8 4E 85 F1 | 	sub	fp, #184
1ab24     70 00 90 AD |  if_e	jmp	#LR__2411
1ab28     20 4F 05 F1 | 	add	fp, #288
1ab2c     A7 20 02 FB | 	rdlong	local02, fp
1ab30     10 23 02 F6 | 	mov	local03, local02
1ab34     01 22 06 F1 | 	add	local03, #1
1ab38     A7 22 62 FC | 	wrlong	local03, fp
1ab3c     10 5D 48 FC | 	wrbyte	#46, local02
1ab40     04 4E 85 F1 | 	sub	fp, #4
1ab44     A7 00 68 FC | 	wrlong	#0, fp
1ab48     1C 4F 85 F1 | 	sub	fp, #284
1ab4c                 | LR__2409
1ab4c     1C 4F 05 F1 | 	add	fp, #284
1ab50     A7 20 02 FB | 	rdlong	local02, fp
1ab54     64 4E 85 F1 | 	sub	fp, #100
1ab58     A7 26 02 FB | 	rdlong	local05, fp
1ab5c     B8 4E 85 F1 | 	sub	fp, #184
1ab60     13 21 52 F2 | 	cmps	local02, local05 wc
1ab64     30 00 90 3D |  if_ae	jmp	#LR__2410
1ab68     20 4F 05 F1 | 	add	fp, #288
1ab6c     A7 2C 02 FB | 	rdlong	local08, fp
1ab70     16 35 02 F6 | 	mov	local12, local08
1ab74     01 34 06 F1 | 	add	local12, #1
1ab78     A7 34 62 FC | 	wrlong	local12, fp
1ab7c     16 55 48 FC | 	wrbyte	#42, local08
1ab80     04 4E 85 F1 | 	sub	fp, #4
1ab84     A7 34 02 FB | 	rdlong	local12, fp
1ab88     01 34 06 F1 | 	add	local12, #1
1ab8c     A7 34 62 FC | 	wrlong	local12, fp
1ab90     1C 4F 85 F1 | 	sub	fp, #284
1ab94     B4 FF 9F FD | 	jmp	#LR__2409
1ab98                 | LR__2410
1ab98                 | LR__2411
1ab98     20 4F 05 F1 | 	add	fp, #288
1ab9c     A7 20 02 FB | 	rdlong	local02, fp
1aba0     10 23 02 F6 | 	mov	local03, local02
1aba4     01 22 06 F1 | 	add	local03, #1
1aba8     A7 22 62 FC | 	wrlong	local03, fp
1abac     20 4F 85 F1 | 	sub	fp, #288
1abb0     10 01 48 FC | 	wrbyte	#0, local02
1abb4                 | LR__2412
1abb4     04 4E 05 F1 | 	add	fp, #4
1abb8     A7 12 02 FB | 	rdlong	arg01, fp
1abbc     04 4E 05 F1 | 	add	fp, #4
1abc0     A7 14 02 FB | 	rdlong	arg02, fp
1abc4     BC 4E 05 F1 | 	add	fp, #188
1abc8     A7 16 02 FB | 	rdlong	arg03, fp
1abcc     C4 4E 85 F1 | 	sub	fp, #196
1abd0     C4 EE BF FD | 	call	#__system___fmtstr
1abd4                 | LR__2413
1abd4     A7 F0 03 F6 | 	mov	ptra, fp
1abd8     B2 00 A0 FD | 	call	#popregs_
1abdc                 | __system___fmtfloat_ret
1abdc     2D 00 64 FD | 	ret
1abe0                 | 
1abe0                 | __system__Left_S
1abe0     04 4A 05 F6 | 	mov	COUNT_, #4
1abe4     A8 00 A0 FD | 	call	#pushregs_
1abe8     09 1F 02 F6 | 	mov	local01, arg01
1abec     0A 21 02 F6 | 	mov	local02, arg02
1abf0     01 20 56 F2 | 	cmps	local02, #1 wc
1abf4     40 01 00 CF 
1abf8     EE FA 05 C6 |  if_b	mov	result1, ##@LR__4293
1abfc     5C 00 90 CD |  if_b	jmp	#LR__2423
1ac00     0F 13 02 F6 | 	mov	arg01, local01
1ac04     09 23 02 F6 | 	mov	local03, arg01
1ac08     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1ac0c                 | LR__2420
1ac0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ac10     01 22 06 51 |  if_ne	add	local03, #1
1ac14     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1ac18                 | LR__2421
1ac18     09 23 82 F1 | 	sub	local03, arg01
1ac1c     11 FB 01 F6 | 	mov	result1, local03
1ac20     10 FB 59 F2 | 	cmps	result1, local02 wcz
1ac24     0F FB 01 E6 |  if_be	mov	result1, local01
1ac28     30 00 90 ED |  if_be	jmp	#LR__2423
1ac2c     10 13 02 F6 | 	mov	arg01, local02
1ac30     02 12 06 F1 | 	add	arg01, #2
1ac34     50 1D B0 FD | 	call	#__system___gc_alloc_managed
1ac38     FD 24 0A F6 | 	mov	local04, result1 wz
1ac3c     18 00 90 AD |  if_e	jmp	#LR__2422
1ac40     12 13 02 F6 | 	mov	arg01, local04
1ac44     0F 15 02 F6 | 	mov	arg02, local01
1ac48     10 17 02 F6 | 	mov	arg03, local02
1ac4c     A4 DE BF FD | 	call	#__system____builtin_memmove
1ac50     12 21 02 F1 | 	add	local02, local04
1ac54     10 01 48 FC | 	wrbyte	#0, local02
1ac58                 | LR__2422
1ac58     12 FB 01 F6 | 	mov	result1, local04
1ac5c                 | LR__2423
1ac5c     A7 F0 03 F6 | 	mov	ptra, fp
1ac60     B2 00 A0 FD | 	call	#popregs_
1ac64                 | __system__Left_S_ret
1ac64     2D 00 64 FD | 	ret
1ac68                 | 
1ac68                 | __system__Right_S
1ac68     05 4A 05 F6 | 	mov	COUNT_, #5
1ac6c     A8 00 A0 FD | 	call	#pushregs_
1ac70     09 1F 02 F6 | 	mov	local01, arg01
1ac74     0A 21 02 F6 | 	mov	local02, arg02
1ac78     01 20 56 F2 | 	cmps	local02, #1 wc
1ac7c     40 01 00 CF 
1ac80     EF FA 05 C6 |  if_b	mov	result1, ##@LR__4294
1ac84     64 00 90 CD |  if_b	jmp	#LR__2433
1ac88     0F 13 02 F6 | 	mov	arg01, local01
1ac8c     09 23 02 F6 | 	mov	local03, arg01
1ac90     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1ac94                 | LR__2430
1ac94     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ac98     01 22 06 51 |  if_ne	add	local03, #1
1ac9c     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1aca0                 | LR__2431
1aca0     09 23 82 F1 | 	sub	local03, arg01
1aca4     11 FB 01 F6 | 	mov	result1, local03
1aca8     FD 24 02 F6 | 	mov	local04, result1
1acac     10 25 5A F2 | 	cmps	local04, local02 wcz
1acb0     0F FB 01 E6 |  if_be	mov	result1, local01
1acb4     34 00 90 ED |  if_be	jmp	#LR__2433
1acb8     10 13 02 F6 | 	mov	arg01, local02
1acbc     02 12 06 F1 | 	add	arg01, #2
1acc0     C4 1C B0 FD | 	call	#__system___gc_alloc_managed
1acc4     FD 26 0A F6 | 	mov	local05, result1 wz
1acc8     1C 00 90 AD |  if_e	jmp	#LR__2432
1accc     10 25 82 F1 | 	sub	local04, local02
1acd0     0F 25 02 F1 | 	add	local04, local01
1acd4     01 20 06 F1 | 	add	local02, #1
1acd8     13 13 02 F6 | 	mov	arg01, local05
1acdc     12 15 02 F6 | 	mov	arg02, local04
1ace0     10 17 02 F6 | 	mov	arg03, local02
1ace4     0C DE BF FD | 	call	#__system____builtin_memmove
1ace8                 | LR__2432
1ace8     13 FB 01 F6 | 	mov	result1, local05
1acec                 | LR__2433
1acec     A7 F0 03 F6 | 	mov	ptra, fp
1acf0     B2 00 A0 FD | 	call	#popregs_
1acf4                 | __system__Right_S_ret
1acf4     2D 00 64 FD | 	ret
1acf8                 | 
1acf8                 | __system__Mid_S
1acf8     05 4A 05 F6 | 	mov	COUNT_, #5
1acfc     A8 00 A0 FD | 	call	#pushregs_
1ad00     09 1F 02 F6 | 	mov	local01, arg01
1ad04     0A 21 02 F6 | 	mov	local02, arg02
1ad08     01 16 56 F2 | 	cmps	arg03, #1 wc
1ad0c     40 01 00 CF 
1ad10     F0 FA 05 C6 |  if_b	mov	result1, ##@LR__4295
1ad14     80 00 90 CD |  if_b	jmp	#LR__2443
1ad18     01 20 86 F1 | 	sub	local02, #1
1ad1c     00 20 56 F3 | 	fges	local02, #0 wc
1ad20     0F 13 02 F6 | 	mov	arg01, local01
1ad24     09 23 02 F6 | 	mov	local03, arg01
1ad28     97 06 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1ad2c                 | LR__2440
1ad2c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ad30     01 22 06 51 |  if_ne	add	local03, #1
1ad34     F4 FF 9F 5D |  if_ne	jmp	#LR__2440
1ad38                 | LR__2441
1ad38     09 23 82 F1 | 	sub	local03, arg01
1ad3c     11 FB 01 F6 | 	mov	result1, local03
1ad40     FD 14 02 F6 | 	mov	arg02, result1
1ad44     10 15 52 F2 | 	cmps	arg02, local02 wc
1ad48     40 01 00 CF 
1ad4c     F1 FA 05 C6 |  if_b	mov	result1, ##@LR__4296
1ad50     44 00 90 CD |  if_b	jmp	#LR__2443
1ad54     0A 25 02 F6 | 	mov	local04, arg02
1ad58     10 25 82 F1 | 	sub	local04, local02
1ad5c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1ad60     0B 25 02 16 |  if_a	mov	local04, arg03
1ad64     12 13 02 F6 | 	mov	arg01, local04
1ad68     02 12 06 F1 | 	add	arg01, #2
1ad6c     18 1C B0 FD | 	call	#__system___gc_alloc_managed
1ad70     FD 26 0A F6 | 	mov	local05, result1 wz
1ad74     1C 00 90 AD |  if_e	jmp	#LR__2442
1ad78     0F 21 02 F1 | 	add	local02, local01
1ad7c     13 13 02 F6 | 	mov	arg01, local05
1ad80     10 15 02 F6 | 	mov	arg02, local02
1ad84     12 17 02 F6 | 	mov	arg03, local04
1ad88     68 DD BF FD | 	call	#__system____builtin_memmove
1ad8c     13 25 02 F1 | 	add	local04, local05
1ad90     12 01 48 FC | 	wrbyte	#0, local04
1ad94                 | LR__2442
1ad94     13 FB 01 F6 | 	mov	result1, local05
1ad98                 | LR__2443
1ad98     A7 F0 03 F6 | 	mov	ptra, fp
1ad9c     B2 00 A0 FD | 	call	#popregs_
1ada0                 | __system__Mid_S_ret
1ada0     2D 00 64 FD | 	ret
1ada4                 | 
1ada4                 | __system__Chr_S
1ada4     01 4A 05 F6 | 	mov	COUNT_, #1
1ada8     A8 00 A0 FD | 	call	#pushregs_
1adac     09 1F 02 F6 | 	mov	local01, arg01
1adb0     03 12 06 F6 | 	mov	arg01, #3
1adb4     D0 1B B0 FD | 	call	#__system___gc_alloc_managed
1adb8     00 FA 4D F2 | 	cmps	result1, #0 wz
1adbc     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1adc0     01 FA 05 51 |  if_ne	add	result1, #1
1adc4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1adc8     01 FA 85 51 |  if_ne	sub	result1, #1
1adcc     A7 F0 03 F6 | 	mov	ptra, fp
1add0     B2 00 A0 FD | 	call	#popregs_
1add4                 | __system__Chr_S_ret
1add4     2D 00 64 FD | 	ret
1add8                 | 
1add8                 | __system__Number_S
1add8     08 4A 05 F6 | 	mov	COUNT_, #8
1addc     A8 00 A0 FD | 	call	#pushregs_
1ade0     09 1F 02 F6 | 	mov	local01, arg01
1ade4     0A 21 0A F6 | 	mov	local02, arg02 wz
1ade8     0B 23 02 F6 | 	mov	local03, arg03
1adec     3C 00 90 5D |  if_ne	jmp	#LR__2452
1adf0     01 20 06 F6 | 	mov	local02, #1
1adf4     11 25 02 F6 | 	mov	local04, local03
1adf8     01 26 06 F6 | 	mov	local05, #1
1adfc     97 16 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1ae00                 | LR__2450
1ae00     00 28 06 F6 | 	mov	local06, #0
1ae04     0F 25 1A F2 | 	cmp	local04, local01 wcz
1ae08     01 28 66 E6 |  if_be	neg	local06, #1
1ae0c     12 27 12 F2 | 	cmp	local05, local04 wc
1ae10     15 2B A2 F1 | 	subx	local07, local07
1ae14     15 29 CA F7 | 	test	local06, local07 wz
1ae18     11 25 02 5D |  if_ne	qmul	local04, local03
1ae1c     12 27 02 56 |  if_ne	mov	local05, local04
1ae20     01 20 06 51 |  if_ne	add	local02, #1
1ae24     18 24 62 5D |  if_ne	getqx	local04
1ae28     D4 FF 9F 5D |  if_ne	jmp	#LR__2450
1ae2c                 | LR__2451
1ae2c                 | LR__2452
1ae2c     20 20 36 F3 | 	fle	local02, #32 wc
1ae30     10 13 02 F6 | 	mov	arg01, local02
1ae34     02 12 06 F1 | 	add	arg01, #2
1ae38     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1ae3c     FD 28 02 F6 | 	mov	local06, result1
1ae40     10 2B 02 F6 | 	mov	local07, local02
1ae44     14 2B 02 F1 | 	add	local07, local06
1ae48     15 01 48 FC | 	wrbyte	#0, local07
1ae4c     97 1A 48 FB | 	callpa	#(@LR__2454-@LR__2453)>>2,fcache_load_ptr_
1ae50                 | LR__2453
1ae50     01 20 16 F2 | 	cmp	local02, #1 wc
1ae54     2C 00 90 CD |  if_b	jmp	#LR__2455
1ae58     11 1F 12 FD | 	qdiv	local01, local03
1ae5c     01 20 86 F1 | 	sub	local02, #1
1ae60     10 2B 02 F6 | 	mov	local07, local02
1ae64     14 2B 02 F1 | 	add	local07, local06
1ae68     19 2C 62 FD | 	getqy	local08
1ae6c     0A 2C 16 F2 | 	cmp	local08, #10 wc
1ae70     30 2C 06 C1 |  if_b	add	local08, #48
1ae74     37 2C 06 31 |  if_ae	add	local08, #55
1ae78     15 2D 42 FC | 	wrbyte	local08, local07
1ae7c     18 1E 62 FD | 	getqx	local01
1ae80     CC FF 9F FD | 	jmp	#LR__2453
1ae84                 | LR__2454
1ae84                 | LR__2455
1ae84     14 FB 01 F6 | 	mov	result1, local06
1ae88     A7 F0 03 F6 | 	mov	ptra, fp
1ae8c     B2 00 A0 FD | 	call	#popregs_
1ae90                 | __system__Number_S_ret
1ae90     2D 00 64 FD | 	ret
1ae94                 | 
1ae94                 | __system__LCase_S
1ae94     07 4A 05 F6 | 	mov	COUNT_, #7
1ae98     A8 00 A0 FD | 	call	#pushregs_
1ae9c     09 1F 02 F6 | 	mov	local01, arg01
1aea0     09 21 02 F6 | 	mov	local02, arg01
1aea4     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1aea8                 | LR__2460
1aea8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1aeac     01 20 06 51 |  if_ne	add	local02, #1
1aeb0     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1aeb4                 | LR__2461
1aeb4     09 21 82 F1 | 	sub	local02, arg01
1aeb8     10 FB 01 F6 | 	mov	result1, local02
1aebc     FD 20 0A F6 | 	mov	local02, result1 wz
1aec0     40 01 00 AF 
1aec4     F2 FA 05 A6 |  if_e	mov	result1, ##@LR__4297
1aec8     7C 00 90 AD |  if_e	jmp	#LR__2467
1aecc     10 13 02 F6 | 	mov	arg01, local02
1aed0     02 12 06 F1 | 	add	arg01, #2
1aed4     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1aed8     FD 22 0A F6 | 	mov	local03, result1 wz
1aedc     64 00 90 AD |  if_e	jmp	#LR__2466
1aee0     01 24 66 F6 | 	neg	local04, #1
1aee4     97 26 48 FB | 	callpa	#(@LR__2465-@LR__2462)>>2,fcache_load_ptr_
1aee8                 | LR__2462
1aee8     01 24 06 F1 | 	add	local04, #1
1aeec     12 27 02 F6 | 	mov	local05, local04
1aef0     0F 27 02 F1 | 	add	local05, local01
1aef4     13 29 C2 FA | 	rdbyte	local06, local05
1aef8     41 28 56 F2 | 	cmps	local06, #65 wc
1aefc     18 00 90 CD |  if_b	jmp	#LR__2463
1af00     5B 28 56 F2 | 	cmps	local06, #91 wc
1af04     12 2B 02 C6 |  if_b	mov	local07, local04
1af08     11 2B 02 C1 |  if_b	add	local07, local03
1af0c     20 28 06 C1 |  if_b	add	local06, #32
1af10     15 29 42 CC |  if_b	wrbyte	local06, local07
1af14     0C 00 90 CD |  if_b	jmp	#LR__2464
1af18                 | LR__2463
1af18     12 2B 02 F6 | 	mov	local07, local04
1af1c     11 2B 02 F1 | 	add	local07, local03
1af20     15 29 42 FC | 	wrbyte	local06, local07
1af24                 | LR__2464
1af24     10 29 02 F6 | 	mov	local06, local02
1af28     01 28 86 F1 | 	sub	local06, #1
1af2c     14 25 0A F2 | 	cmp	local04, local06 wz
1af30     B4 FF 9F 5D |  if_ne	jmp	#LR__2462
1af34                 | LR__2465
1af34     11 21 02 F1 | 	add	local02, local03
1af38     10 01 48 FC | 	wrbyte	#0, local02
1af3c     11 FB 01 F6 | 	mov	result1, local03
1af40     04 00 90 FD | 	jmp	#LR__2467
1af44                 | LR__2466
1af44     11 FB 01 F6 | 	mov	result1, local03
1af48                 | LR__2467
1af48     A7 F0 03 F6 | 	mov	ptra, fp
1af4c     B2 00 A0 FD | 	call	#popregs_
1af50                 | __system__LCase_S_ret
1af50     2D 00 64 FD | 	ret
1af54                 | 
1af54                 | __system__LTrim_S
1af54     05 4A 05 F6 | 	mov	COUNT_, #5
1af58     A8 00 A0 FD | 	call	#pushregs_
1af5c     09 1F 02 F6 | 	mov	local01, arg01
1af60     09 21 02 F6 | 	mov	local02, arg01
1af64     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1af68                 | LR__2470
1af68     10 FB C9 FA | 	rdbyte	result1, local02 wz
1af6c     01 20 06 51 |  if_ne	add	local02, #1
1af70     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1af74                 | LR__2471
1af74     09 21 82 F1 | 	sub	local02, arg01
1af78     10 FB 01 F6 | 	mov	result1, local02
1af7c     FD 20 0A F6 | 	mov	local02, result1 wz
1af80     40 01 00 AF 
1af84     F3 FA 05 A6 |  if_e	mov	result1, ##@LR__4298
1af88     7C 00 90 AD |  if_e	jmp	#LR__2476
1af8c     00 22 06 F6 | 	mov	local03, #0
1af90     10 25 02 F6 | 	mov	local04, local02
1af94                 | LR__2472
1af94     12 23 52 F2 | 	cmps	local03, local04 wc
1af98     68 00 90 3D |  if_ae	jmp	#LR__2475
1af9c     11 17 02 F6 | 	mov	arg03, local03
1afa0     0F 17 02 F1 | 	add	arg03, local01
1afa4     0B 17 C2 FA | 	rdbyte	arg03, arg03
1afa8     20 16 0E F2 | 	cmp	arg03, #32 wz
1afac     4C 00 90 AD |  if_e	jmp	#LR__2474
1afb0     10 13 02 F6 | 	mov	arg01, local02
1afb4     11 13 82 F1 | 	sub	arg01, local03
1afb8     02 12 06 F1 | 	add	arg01, #2
1afbc     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1afc0     FD 26 0A F6 | 	mov	local05, result1 wz
1afc4     2C 00 90 AD |  if_e	jmp	#LR__2473
1afc8     11 15 02 F6 | 	mov	arg02, local03
1afcc     0F 15 02 F1 | 	add	arg02, local01
1afd0     10 17 02 F6 | 	mov	arg03, local02
1afd4     11 17 82 F1 | 	sub	arg03, local03
1afd8     13 13 02 F6 | 	mov	arg01, local05
1afdc     14 DB BF FD | 	call	#__system____builtin_memmove
1afe0     11 21 82 F1 | 	sub	local02, local03
1afe4     13 21 02 F1 | 	add	local02, local05
1afe8     10 01 48 FC | 	wrbyte	#0, local02
1afec     13 FB 01 F6 | 	mov	result1, local05
1aff0     14 00 90 FD | 	jmp	#LR__2476
1aff4                 | LR__2473
1aff4     13 FB 01 F6 | 	mov	result1, local05
1aff8     0C 00 90 FD | 	jmp	#LR__2476
1affc                 | LR__2474
1affc     01 22 06 F1 | 	add	local03, #1
1b000     90 FF 9F FD | 	jmp	#LR__2472
1b004                 | LR__2475
1b004     0F FB 01 F6 | 	mov	result1, local01
1b008                 | LR__2476
1b008     A7 F0 03 F6 | 	mov	ptra, fp
1b00c     B2 00 A0 FD | 	call	#popregs_
1b010                 | __system__LTrim_S_ret
1b010     2D 00 64 FD | 	ret
1b014                 | 
1b014                 | __system__RTrim_S
1b014     04 4A 05 F6 | 	mov	COUNT_, #4
1b018     A8 00 A0 FD | 	call	#pushregs_
1b01c     09 1F 02 F6 | 	mov	local01, arg01
1b020     09 21 02 F6 | 	mov	local02, arg01
1b024     97 06 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1b028                 | LR__2480
1b028     10 FB C9 FA | 	rdbyte	result1, local02 wz
1b02c     01 20 06 51 |  if_ne	add	local02, #1
1b030     F4 FF 9F 5D |  if_ne	jmp	#LR__2480
1b034                 | LR__2481
1b034     09 21 82 F1 | 	sub	local02, arg01
1b038     10 FB 01 F6 | 	mov	result1, local02
1b03c     FD 20 0A F6 | 	mov	local02, result1 wz
1b040     40 01 00 AF 
1b044     F4 FA 05 A6 |  if_e	mov	result1, ##@LR__4299
1b048     74 00 90 AD |  if_e	jmp	#LR__2485
1b04c     10 23 02 F6 | 	mov	local03, local02
1b050     01 22 86 F1 | 	sub	local03, #1
1b054                 | LR__2482
1b054     11 15 02 F6 | 	mov	arg02, local03
1b058     0F 15 02 F1 | 	add	arg02, local01
1b05c     0A 21 C2 FA | 	rdbyte	local02, arg02
1b060     20 20 0E F2 | 	cmp	local02, #32 wz
1b064     44 00 90 AD |  if_e	jmp	#LR__2484
1b068     11 13 02 F6 | 	mov	arg01, local03
1b06c     02 12 06 F1 | 	add	arg01, #2
1b070     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1b074     FD 24 0A F6 | 	mov	local04, result1 wz
1b078     28 00 90 AD |  if_e	jmp	#LR__2483
1b07c     11 17 02 F6 | 	mov	arg03, local03
1b080     01 16 06 F1 | 	add	arg03, #1
1b084     12 13 02 F6 | 	mov	arg01, local04
1b088     0F 15 02 F6 | 	mov	arg02, local01
1b08c     64 DA BF FD | 	call	#__system____builtin_memmove
1b090     01 22 06 F1 | 	add	local03, #1
1b094     12 23 02 F1 | 	add	local03, local04
1b098     11 01 48 FC | 	wrbyte	#0, local03
1b09c     12 FB 01 F6 | 	mov	result1, local04
1b0a0     1C 00 90 FD | 	jmp	#LR__2485
1b0a4                 | LR__2483
1b0a4     12 FB 01 F6 | 	mov	result1, local04
1b0a8     14 00 90 FD | 	jmp	#LR__2485
1b0ac                 | LR__2484
1b0ac     01 22 86 F1 | 	sub	local03, #1
1b0b0     00 22 56 F2 | 	cmps	local03, #0 wc
1b0b4     9C FF 9F 3D |  if_ae	jmp	#LR__2482
1b0b8     40 01 00 FF 
1b0bc     F5 FA 05 F6 | 	mov	result1, ##@LR__4300
1b0c0                 | LR__2485
1b0c0     A7 F0 03 F6 | 	mov	ptra, fp
1b0c4     B2 00 A0 FD | 	call	#popregs_
1b0c8                 | __system__RTrim_S_ret
1b0c8     2D 00 64 FD | 	ret
1b0cc                 | 
1b0cc                 | __system__Instr
1b0cc     07 4A 05 F6 | 	mov	COUNT_, #7
1b0d0     A8 00 A0 FD | 	call	#pushregs_
1b0d4     09 1F 02 F6 | 	mov	local01, arg01
1b0d8     0A 21 02 F6 | 	mov	local02, arg02
1b0dc     0B 23 02 F6 | 	mov	local03, arg03
1b0e0     11 13 02 F6 | 	mov	arg01, local03
1b0e4     09 25 02 F6 | 	mov	local04, arg01
1b0e8     97 06 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
1b0ec                 | LR__2490
1b0ec     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b0f0     01 24 06 51 |  if_ne	add	local04, #1
1b0f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2490
1b0f8                 | LR__2491
1b0f8     09 25 82 F1 | 	sub	local04, arg01
1b0fc     12 27 02 F6 | 	mov	local05, local04
1b100     10 13 02 F6 | 	mov	arg01, local02
1b104     09 25 02 F6 | 	mov	local04, arg01
1b108     97 06 48 FB | 	callpa	#(@LR__2493-@LR__2492)>>2,fcache_load_ptr_
1b10c                 | LR__2492
1b10c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1b110     01 24 06 51 |  if_ne	add	local04, #1
1b114     F4 FF 9F 5D |  if_ne	jmp	#LR__2492
1b118                 | LR__2493
1b118     09 25 82 F1 | 	sub	local04, arg01
1b11c     12 FB 01 F6 | 	mov	result1, local04
1b120     FD 18 0A F6 | 	mov	arg04, result1 wz
1b124     00 FA 05 A6 |  if_e	mov	result1, #0
1b128     98 00 90 AD |  if_e	jmp	#LR__2497
1b12c     00 26 0E F2 | 	cmp	local05, #0 wz
1b130     00 FA 05 A6 |  if_e	mov	result1, #0
1b134     8C 00 90 AD |  if_e	jmp	#LR__2497
1b138     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1b13c     00 FA 05 16 |  if_a	mov	result1, #0
1b140     80 00 90 1D |  if_a	jmp	#LR__2497
1b144     01 1E 56 F2 | 	cmps	local01, #1 wc
1b148     01 1E 06 C6 |  if_b	mov	local01, #1
1b14c     11 29 C2 FA | 	rdbyte	local06, local03
1b150     01 26 0E F2 | 	cmp	local05, #1 wz
1b154     18 00 90 5D |  if_ne	jmp	#LR__2494
1b158     10 13 02 F6 | 	mov	arg01, local02
1b15c     14 15 02 F6 | 	mov	arg02, local06
1b160     0F 17 02 F6 | 	mov	arg03, local01
1b164     00 18 06 F6 | 	mov	arg04, #0
1b168     B8 33 B0 FD | 	call	#__system____ScanForChar
1b16c     54 00 90 FD | 	jmp	#LR__2497
1b170                 | LR__2494
1b170     0F 2B 02 F6 | 	mov	local07, local01
1b174                 | LR__2495
1b174     10 13 02 F6 | 	mov	arg01, local02
1b178     14 15 02 F6 | 	mov	arg02, local06
1b17c     15 17 02 F6 | 	mov	arg03, local07
1b180     00 18 06 F6 | 	mov	arg04, #0
1b184     9C 33 B0 FD | 	call	#__system____ScanForChar
1b188     FD 2A 0A F6 | 	mov	local07, result1 wz
1b18c     30 00 90 AD |  if_e	jmp	#LR__2496
1b190     13 17 02 F6 | 	mov	arg03, local05
1b194     10 13 02 F6 | 	mov	arg01, local02
1b198     15 15 02 F6 | 	mov	arg02, local07
1b19c     58 FB BF FD | 	call	#__system__Mid_S
1b1a0     FD 12 02 F6 | 	mov	arg01, result1
1b1a4     11 15 02 F6 | 	mov	arg02, local03
1b1a8     50 DA BF FD | 	call	#__system___string_cmp
1b1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1b0     15 FB 01 A6 |  if_e	mov	result1, local07
1b1b4     0C 00 90 AD |  if_e	jmp	#LR__2497
1b1b8     13 2B 02 F1 | 	add	local07, local05
1b1bc     B4 FF 9F FD | 	jmp	#LR__2495
1b1c0                 | LR__2496
1b1c0     00 FA 05 F6 | 	mov	result1, #0
1b1c4                 | LR__2497
1b1c4     A7 F0 03 F6 | 	mov	ptra, fp
1b1c8     B2 00 A0 FD | 	call	#popregs_
1b1cc                 | __system__Instr_ret
1b1cc     2D 00 64 FD | 	ret
1b1d0                 | 
1b1d0                 | __system___strerror
1b1d0     00 12 56 F2 | 	cmps	arg01, #0 wc
1b1d4     08 00 90 CD |  if_b	jmp	#LR__2500
1b1d8     1A 12 56 F2 | 	cmps	arg01, #26 wc
1b1dc     04 00 90 CD |  if_b	jmp	#LR__2501
1b1e0                 | LR__2500
1b1e0     19 12 06 F6 | 	mov	arg01, #25
1b1e4                 | LR__2501
1b1e4     02 12 66 F0 | 	shl	arg01, #2
1b1e8     01 00 00 FF 
1b1ec     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1b1f0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1b1f4     09 FB 01 FB | 	rdlong	result1, arg01
1b1f8     01 00 00 FF 
1b1fc     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1b200                 | __system___strerror_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | __system___int64_shl
1b204     20 16 CE F7 | 	test	arg03, #32 wz
1b208     09 15 02 56 |  if_ne	mov	arg02, arg01
1b20c     00 12 06 56 |  if_ne	mov	arg01, #0
1b210     1F 16 CE F7 | 	test	arg03, #31 wz
1b214     18 00 90 AD |  if_e	jmp	#LR__2510
1b218     0B 15 62 F0 | 	shl	arg02, arg03
1b21c     09 FB 01 F6 | 	mov	result1, arg01
1b220     0B FD 61 F6 | 	neg	result2, arg03
1b224     FE FA 41 F0 | 	shr	result1, result2
1b228     FD 14 42 F5 | 	or	arg02, result1
1b22c     0B 13 62 F0 | 	shl	arg01, arg03
1b230                 | LR__2510
1b230     0A FD 01 F6 | 	mov	result2, arg02
1b234     09 FB 01 F6 | 	mov	result1, arg01
1b238                 | __system___int64_shl_ret
1b238     2D 00 64 FD | 	ret
1b23c                 | 
1b23c                 | __system___usepins
1b23c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b240     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b244     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1b248     00 13 CA F7 | 	test	arg01, _var01 wz
1b24c     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1b250     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1b254     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1b258     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1b25c     00 FA 05 56 |  if_ne	mov	result1, #0
1b260     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1b264     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b268     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b26c     09 03 42 F5 | 	or	_var02, arg01
1b270     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b274     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b278     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1b27c     0A 03 42 F5 | 	or	_var02, arg02
1b280     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1b284     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b288     01 FA 65 F6 | 	neg	result1, #1
1b28c                 | __system___usepins_ret
1b28c     2D 00 64 FD | 	ret
1b290                 | 
1b290                 | __system___freepins
1b290     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1b294     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b298     09 01 22 F5 | 	andn	_var01, arg01
1b29c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b2a0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b2a4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1b2a8     0A 01 22 F5 | 	andn	_var01, arg02
1b2ac     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1b2b0     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1b2b4                 | __system___freepins_ret
1b2b4     2D 00 64 FD | 	ret
1b2b8                 | 
1b2b8                 | __system___float_fromuns
1b2b8     09 17 0A F6 | 	mov	arg03, arg01 wz
1b2bc     0B FB 01 A6 |  if_e	mov	result1, arg03
1b2c0     24 00 90 AD |  if_e	jmp	#LR__2520
1b2c4     0B 15 92 F7 | 	encod	arg02, arg03 wc
1b2c8     01 14 06 C1 |  if_b	add	arg02, #1
1b2cc     01 14 86 F1 | 	sub	arg02, #1
1b2d0     1F 12 06 F6 | 	mov	arg01, #31
1b2d4     0A 13 82 F1 | 	sub	arg01, arg02
1b2d8     09 17 62 F0 | 	shl	arg03, arg01
1b2dc     02 16 46 F0 | 	shr	arg03, #2
1b2e0     00 12 06 F6 | 	mov	arg01, #0
1b2e4     4C 09 B0 FD | 	call	#__system___float_Pack
1b2e8                 | LR__2520
1b2e8                 | __system___float_fromuns_ret
1b2e8     2D 00 64 FD | 	ret
1b2ec                 | 
1b2ec                 | __system___float_add
1b2ec     0F 4A 05 F6 | 	mov	COUNT_, #15
1b2f0     A8 00 A0 FD | 	call	#pushregs_
1b2f4     09 1F 02 F6 | 	mov	local01, arg01
1b2f8     0A 21 02 F6 | 	mov	local02, arg02
1b2fc     00 22 06 F6 | 	mov	local03, #0
1b300     0F 25 02 F6 | 	mov	local04, local01
1b304     12 27 02 F6 | 	mov	local05, local04
1b308     16 26 46 F7 | 	zerox	local05, #22
1b30c     12 29 02 F6 | 	mov	local06, local04
1b310     01 28 66 F0 | 	shl	local06, #1
1b314     18 28 46 F0 | 	shr	local06, #24
1b318     1F 24 46 F0 | 	shr	local04, #31
1b31c     10 13 02 F6 | 	mov	arg01, local02
1b320     09 FB 01 F6 | 	mov	result1, arg01
1b324     FD 2A 02 F6 | 	mov	local07, result1
1b328     15 2D 02 F6 | 	mov	local08, local07
1b32c     16 2C 46 F7 | 	zerox	local08, #22
1b330     15 2F 02 F6 | 	mov	local09, local07
1b334     01 2E 66 F0 | 	shl	local09, #1
1b338     18 2E 46 F0 | 	shr	local09, #24
1b33c     17 31 02 F6 | 	mov	local10, local09
1b340     1F 2A 46 F0 | 	shr	local07, #31
1b344     00 32 06 F6 | 	mov	local11, #0
1b348     00 34 06 F6 | 	mov	local12, #0
1b34c     18 29 12 F2 | 	cmp	local06, local10 wc
1b350     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1b354     2C 00 90 1D |  if_a	jmp	#LR__2530
1b358     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1b35c     24 00 90 3D |  if_ae	jmp	#LR__2530
1b360     13 37 02 F6 | 	mov	local13, local05
1b364     16 27 02 F6 | 	mov	local05, local08
1b368     1B 2D 02 F6 | 	mov	local08, local13
1b36c     14 37 02 F6 | 	mov	local13, local06
1b370     18 29 02 F6 | 	mov	local06, local10
1b374     1B 31 02 F6 | 	mov	local10, local13
1b378     12 37 02 F6 | 	mov	local13, local04
1b37c     15 25 02 F6 | 	mov	local04, local07
1b380     1B 2B 02 F6 | 	mov	local07, local13
1b384                 | LR__2530
1b384     FF 28 0E F2 | 	cmp	local06, #255 wz
1b388     70 01 90 AD |  if_e	jmp	#LR__2545
1b38c     00 28 0E F2 | 	cmp	local06, #0 wz
1b390     AC 01 90 AD |  if_e	jmp	#LR__2547
1b394     17 26 26 F4 | 	bith	local05, #23
1b398                 | LR__2531
1b398     00 30 0E F2 | 	cmp	local10, #0 wz
1b39c     F0 01 90 AD |  if_e	jmp	#LR__2551
1b3a0     17 2C 26 F4 | 	bith	local08, #23
1b3a4                 | LR__2532
1b3a4     7F 28 86 F1 | 	sub	local06, #127
1b3a8     7F 30 86 F1 | 	sub	local10, #127
1b3ac     14 39 02 F6 | 	mov	local14, local06
1b3b0     18 39 82 F1 | 	sub	local14, local10
1b3b4     97 14 48 FB | 	callpa	#(@LR__2534-@LR__2533)>>2,fcache_load_ptr_
1b3b8                 | LR__2533
1b3b8     20 38 56 F2 | 	cmps	local14, #32 wc
1b3bc     20 00 90 CD |  if_b	jmp	#LR__2535
1b3c0     16 2F 02 F6 | 	mov	local09, local08
1b3c4     00 32 0E F2 | 	cmp	local11, #0 wz
1b3c8     6F 32 62 FD | 	wrnz	local11
1b3cc     19 2F 42 F5 | 	or	local09, local11
1b3d0     17 33 02 F6 | 	mov	local11, local09
1b3d4     00 2C 06 F6 | 	mov	local08, #0
1b3d8     20 38 86 F1 | 	sub	local14, #32
1b3dc     D8 FF 9F FD | 	jmp	#LR__2533
1b3e0                 | LR__2534
1b3e0                 | LR__2535
1b3e0     00 38 0E F2 | 	cmp	local14, #0 wz
1b3e4     38 00 90 AD |  if_e	jmp	#LR__2536
1b3e8     16 37 02 F6 | 	mov	local13, local08
1b3ec     20 30 06 F6 | 	mov	local10, #32
1b3f0     1C 31 82 F1 | 	sub	local10, local14
1b3f4     18 37 62 F0 | 	shl	local13, local10
1b3f8     19 31 02 F6 | 	mov	local10, local11
1b3fc     20 2E 06 F6 | 	mov	local09, #32
1b400     1C 2F 82 F1 | 	sub	local09, local14
1b404     17 31 6A F0 | 	shl	local10, local09 wz
1b408     1C 33 42 F0 | 	shr	local11, local14
1b40c     1C 2D 42 F0 | 	shr	local08, local14
1b410     1B 33 42 F5 | 	or	local11, local13
1b414     00 3A 06 F6 | 	mov	local15, #0
1b418     01 3A 06 56 |  if_ne	mov	local15, #1
1b41c     1D 33 42 F5 | 	or	local11, local15
1b420                 | LR__2536
1b420     12 3B 02 F6 | 	mov	local15, local04
1b424     15 3B 62 F5 | 	xor	local15, local07
1b428     01 3A CE F7 | 	test	local15, #1 wz
1b42c     18 00 90 AD |  if_e	jmp	#LR__2537
1b430     16 2D 22 F6 | 	not	local08, local08
1b434     19 33 22 F6 | 	not	local11, local11
1b438     01 32 0E F1 | 	add	local11, #1 wz
1b43c     00 3A 06 F6 | 	mov	local15, #0
1b440     01 3A 06 A6 |  if_e	mov	local15, #1
1b444     1D 2D 02 F1 | 	add	local08, local15
1b448                 | LR__2537
1b448     19 35 12 F1 | 	add	local12, local11 wc
1b44c     16 27 22 F1 | 	addx	local05, local08
1b450     00 26 56 F2 | 	cmps	local05, #0 wc
1b454     1C 00 90 3D |  if_ae	jmp	#LR__2538
1b458     01 24 66 F5 | 	xor	local04, #1
1b45c     13 27 22 F6 | 	not	local05, local05
1b460     1A 35 22 F6 | 	not	local12, local12
1b464     01 34 0E F1 | 	add	local12, #1 wz
1b468     00 3A 06 F6 | 	mov	local15, #0
1b46c     01 3A 06 A6 |  if_e	mov	local15, #1
1b470     1D 27 02 F1 | 	add	local05, local15
1b474                 | LR__2538
1b474     00 80 00 FF 
1b478     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b47c     28 00 90 CD |  if_b	jmp	#LR__2539
1b480     01 28 06 F1 | 	add	local06, #1
1b484     1A 39 02 F6 | 	mov	local14, local12
1b488     01 38 06 F5 | 	and	local14, #1
1b48c     01 34 46 F0 | 	shr	local12, #1
1b490     13 3B 02 F6 | 	mov	local15, local05
1b494     1F 3A 66 F0 | 	shl	local15, #31
1b498     1D 35 42 F5 | 	or	local12, local15
1b49c     1C 35 42 F5 | 	or	local12, local14
1b4a0     01 26 46 F0 | 	shr	local05, #1
1b4a4     3C 00 90 FD | 	jmp	#LR__2544
1b4a8                 | LR__2539
1b4a8     00 40 00 FF 
1b4ac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b4b0     30 00 90 3D |  if_ae	jmp	#LR__2543
1b4b4     00 26 0E F2 | 	cmp	local05, #0 wz
1b4b8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b4bc     08 24 46 A5 |  if_e	or	local04, #8
1b4c0     01 24 26 A5 |  if_e	andn	local04, #1
1b4c4     1C 00 90 AD |  if_e	jmp	#LR__2542
1b4c8                 | LR__2540
1b4c8     00 40 00 FF 
1b4cc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b4d0     10 00 90 3D |  if_ae	jmp	#LR__2541
1b4d4     1A 35 12 F1 | 	add	local12, local12 wc
1b4d8     13 27 22 F1 | 	addx	local05, local05
1b4dc     01 28 86 F1 | 	sub	local06, #1
1b4e0     E4 FF 9F FD | 	jmp	#LR__2540
1b4e4                 | LR__2541
1b4e4                 | LR__2542
1b4e4                 | LR__2543
1b4e4                 | LR__2544
1b4e4     13 13 02 F6 | 	mov	arg01, local05
1b4e8     1A 15 02 F6 | 	mov	arg02, local12
1b4ec     14 17 02 F6 | 	mov	arg03, local06
1b4f0     12 19 02 F6 | 	mov	arg04, local04
1b4f4     70 34 B0 FD | 	call	#__system__pack_0483
1b4f8     DC 00 90 FD | 	jmp	#LR__2555
1b4fc                 | LR__2545
1b4fc     FF 30 0E F2 | 	cmp	local10, #255 wz
1b500     10 00 90 5D |  if_ne	jmp	#LR__2546
1b504     12 2B 0A F2 | 	cmp	local07, local04 wz
1b508     00 F8 3F 5F 
1b50c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b510     C4 00 90 5D |  if_ne	jmp	#LR__2555
1b514                 | LR__2546
1b514     00 26 0E F2 | 	cmp	local05, #0 wz
1b518     00 F8 3F 5F 
1b51c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b520     B4 00 90 5D |  if_ne	jmp	#LR__2555
1b524     1A 15 02 F6 | 	mov	arg02, local12
1b528     14 17 02 F6 | 	mov	arg03, local06
1b52c     12 19 02 F6 | 	mov	arg04, local04
1b530     02 18 46 F5 | 	or	arg04, #2
1b534     13 13 02 F6 | 	mov	arg01, local05
1b538     2C 34 B0 FD | 	call	#__system__pack_0483
1b53c     98 00 90 FD | 	jmp	#LR__2555
1b540                 | LR__2547
1b540     00 26 0E F2 | 	cmp	local05, #0 wz
1b544     28 00 90 AD |  if_e	jmp	#LR__2550
1b548     01 26 66 F0 | 	shl	local05, #1
1b54c     97 0E 48 FB | 	callpa	#(@LR__2549-@LR__2548)>>2,fcache_load_ptr_
1b550                 | LR__2548
1b550     00 40 00 FF 
1b554     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b558     14 3B 02 C6 |  if_b	mov	local15, local06
1b55c     01 3A 86 C1 |  if_b	sub	local15, #1
1b560     1D 29 02 C6 |  if_b	mov	local06, local15
1b564     01 26 66 C0 |  if_b	shl	local05, #1
1b568     E4 FF 9F CD |  if_b	jmp	#LR__2548
1b56c                 | LR__2549
1b56c     28 FE 9F FD | 	jmp	#LR__2531
1b570                 | LR__2550
1b570     15 25 02 F5 | 	and	local04, local07
1b574     12 19 02 F6 | 	mov	arg04, local04
1b578     08 18 46 F5 | 	or	arg04, #8
1b57c     00 12 06 F6 | 	mov	arg01, #0
1b580     00 14 06 F6 | 	mov	arg02, #0
1b584     00 16 06 F6 | 	mov	arg03, #0
1b588     DC 33 B0 FD | 	call	#__system__pack_0483
1b58c     48 00 90 FD | 	jmp	#LR__2555
1b590                 | LR__2551
1b590     00 2C 0E F2 | 	cmp	local08, #0 wz
1b594     28 00 90 AD |  if_e	jmp	#LR__2554
1b598     01 2C 66 F0 | 	shl	local08, #1
1b59c     97 0E 48 FB | 	callpa	#(@LR__2553-@LR__2552)>>2,fcache_load_ptr_
1b5a0                 | LR__2552
1b5a0     00 40 00 FF 
1b5a4     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b5a8     18 3B 02 C6 |  if_b	mov	local15, local10
1b5ac     01 3A 86 C1 |  if_b	sub	local15, #1
1b5b0     1D 31 02 C6 |  if_b	mov	local10, local15
1b5b4     01 2C 66 C0 |  if_b	shl	local08, #1
1b5b8     E4 FF 9F CD |  if_b	jmp	#LR__2552
1b5bc                 | LR__2553
1b5bc     E4 FD 9F FD | 	jmp	#LR__2532
1b5c0                 | LR__2554
1b5c0     7F 28 86 F1 | 	sub	local06, #127
1b5c4     13 13 02 F6 | 	mov	arg01, local05
1b5c8     1A 15 02 F6 | 	mov	arg02, local12
1b5cc     14 17 02 F6 | 	mov	arg03, local06
1b5d0     12 19 02 F6 | 	mov	arg04, local04
1b5d4     90 33 B0 FD | 	call	#__system__pack_0483
1b5d8                 | LR__2555
1b5d8     A7 F0 03 F6 | 	mov	ptra, fp
1b5dc     B2 00 A0 FD | 	call	#popregs_
1b5e0                 | __system___float_add_ret
1b5e0     2D 00 64 FD | 	ret
1b5e4                 | 
1b5e4                 | __system___float_sqrt
1b5e4     04 4A 05 F6 | 	mov	COUNT_, #4
1b5e8     A8 00 A0 FD | 	call	#pushregs_
1b5ec     09 1F 02 F6 | 	mov	local01, arg01
1b5f0     09 FB 01 F6 | 	mov	result1, arg01
1b5f4     FD 20 02 F6 | 	mov	local02, result1
1b5f8     10 23 02 F6 | 	mov	local03, local02
1b5fc     16 22 46 F7 | 	zerox	local03, #22
1b600     10 25 02 F6 | 	mov	local04, local02
1b604     01 24 66 F0 | 	shl	local04, #1
1b608     18 24 4E F0 | 	shr	local04, #24 wz
1b60c     1F 20 46 F0 | 	shr	local02, #31
1b610     70 00 90 AD |  if_e	jmp	#LR__2561
1b614     17 22 26 F4 | 	bith	local03, #23
1b618                 | LR__2560
1b618     00 20 0E F2 | 	cmp	local02, #0 wz
1b61c     00 F8 3F 5F 
1b620     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b624     88 00 90 5D |  if_ne	jmp	#LR__2564
1b628     FF 24 0E F2 | 	cmp	local04, #255 wz
1b62c     0F FB 01 A6 |  if_e	mov	result1, local01
1b630     7C 00 90 AD |  if_e	jmp	#LR__2564
1b634     7F 24 86 F1 | 	sub	local04, #127
1b638     01 24 CE F7 | 	test	local04, #1 wz
1b63c     01 22 66 50 |  if_ne	shl	local03, #1
1b640     05 22 66 F0 | 	shl	local03, #5
1b644     11 01 38 FD | 	qsqrt	#0, local03
1b648     01 24 86 51 |  if_ne	sub	local04, #1
1b64c     12 25 52 F6 | 	abs	local04, local04 wc
1b650     01 24 46 F0 | 	shr	local04, #1
1b654     12 17 82 F6 | 	negc	arg03, local04
1b658     10 19 02 F6 | 	mov	arg04, local02
1b65c     18 12 62 FD | 	getqx	arg01
1b660     09 15 02 F6 | 	mov	arg02, arg01
1b664     19 14 66 F0 | 	shl	arg02, #25
1b668     07 12 46 F0 | 	shr	arg01, #7
1b66c     00 80 00 FF 
1b670     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b674     01 16 06 31 |  if_ae	add	arg03, #1
1b678     01 12 46 30 |  if_ae	shr	arg01, #1
1b67c     E8 32 B0 FD | 	call	#__system__pack_0483
1b680     2C 00 90 FD | 	jmp	#LR__2564
1b684                 | LR__2561
1b684     00 22 0E F2 | 	cmp	local03, #0 wz
1b688     0F FB 01 A6 |  if_e	mov	result1, local01
1b68c     20 00 90 AD |  if_e	jmp	#LR__2564
1b690     01 22 66 F0 | 	shl	local03, #1
1b694     97 0A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
1b698                 | LR__2562
1b698     00 40 00 FF 
1b69c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b6a0     01 24 86 C1 |  if_b	sub	local04, #1
1b6a4     01 22 66 C0 |  if_b	shl	local03, #1
1b6a8     EC FF 9F CD |  if_b	jmp	#LR__2562
1b6ac                 | LR__2563
1b6ac     68 FF 9F FD | 	jmp	#LR__2560
1b6b0                 | LR__2564
1b6b0     A7 F0 03 F6 | 	mov	ptra, fp
1b6b4     B2 00 A0 FD | 	call	#popregs_
1b6b8                 | __system___float_sqrt_ret
1b6b8     2D 00 64 FD | 	ret
1b6bc                 | 
1b6bc                 | __system___float_mul
1b6bc     0B 4A 05 F6 | 	mov	COUNT_, #11
1b6c0     A8 00 A0 FD | 	call	#pushregs_
1b6c4     09 1F 02 F6 | 	mov	local01, arg01
1b6c8     0A 21 02 F6 | 	mov	local02, arg02
1b6cc     0F 23 02 F6 | 	mov	local03, local01
1b6d0     11 25 02 F6 | 	mov	local04, local03
1b6d4     16 24 46 F7 | 	zerox	local04, #22
1b6d8     11 27 02 F6 | 	mov	local05, local03
1b6dc     01 26 66 F0 | 	shl	local05, #1
1b6e0     18 26 46 F0 | 	shr	local05, #24
1b6e4     1F 22 46 F0 | 	shr	local03, #31
1b6e8     10 FB 01 F6 | 	mov	result1, local02
1b6ec     FD 28 02 F6 | 	mov	local06, result1
1b6f0     14 2B 02 F6 | 	mov	local07, local06
1b6f4     16 2A 46 F7 | 	zerox	local07, #22
1b6f8     14 2D 02 F6 | 	mov	local08, local06
1b6fc     01 2C 66 F0 | 	shl	local08, #1
1b700     18 2C 46 F0 | 	shr	local08, #24
1b704     1F 28 46 F0 | 	shr	local06, #31
1b708     14 23 62 F5 | 	xor	local03, local06
1b70c     FF 26 0E F2 | 	cmp	local05, #255 wz
1b710     90 00 90 AD |  if_e	jmp	#LR__2573
1b714     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b718     D8 00 90 AD |  if_e	jmp	#LR__2575
1b71c     00 26 0E F2 | 	cmp	local05, #0 wz
1b720     0C 01 90 AD |  if_e	jmp	#LR__2576
1b724     17 24 26 F4 | 	bith	local04, #23
1b728                 | LR__2570
1b728     00 2C 0E F2 | 	cmp	local08, #0 wz
1b72c     44 01 90 AD |  if_e	jmp	#LR__2580
1b730     17 2A 26 F4 | 	bith	local07, #23
1b734                 | LR__2571
1b734     12 21 02 F6 | 	mov	local02, local04
1b738     04 20 66 F0 | 	shl	local02, #4
1b73c     15 29 02 F6 | 	mov	local06, local07
1b740     05 28 66 F0 | 	shl	local06, #5
1b744     14 21 02 FD | 	qmul	local02, local06
1b748     16 27 02 F1 | 	add	local05, local08
1b74c     FE 26 86 F1 | 	sub	local05, #254
1b750     13 2F 02 F6 | 	mov	local09, local05
1b754     04 24 66 F0 | 	shl	local04, #4
1b758     05 2A 66 F0 | 	shl	local07, #5
1b75c     18 30 62 FD | 	getqx	local10
1b760     15 25 02 FD | 	qmul	local04, local07
1b764     19 32 62 FD | 	getqy	local11
1b768     00 80 00 FF 
1b76c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b770     18 00 90 CD |  if_b	jmp	#LR__2572
1b774     01 2E 06 F1 | 	add	local09, #1
1b778     01 30 46 F0 | 	shr	local10, #1
1b77c     19 2D 02 F6 | 	mov	local08, local11
1b780     1F 2C 66 F0 | 	shl	local08, #31
1b784     16 31 42 F5 | 	or	local10, local08
1b788     01 32 46 F0 | 	shr	local11, #1
1b78c                 | LR__2572
1b78c     19 13 02 F6 | 	mov	arg01, local11
1b790     18 15 02 F6 | 	mov	arg02, local10
1b794     17 17 02 F6 | 	mov	arg03, local09
1b798     11 19 02 F6 | 	mov	arg04, local03
1b79c     C8 31 B0 FD | 	call	#__system__pack_0483
1b7a0     10 01 90 FD | 	jmp	#LR__2584
1b7a4                 | LR__2573
1b7a4     00 24 0E F2 | 	cmp	local04, #0 wz
1b7a8     0F FB 01 56 |  if_ne	mov	result1, local01
1b7ac     04 01 90 5D |  if_ne	jmp	#LR__2584
1b7b0     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b7b4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b7b8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b7bc     18 00 90 4D |  if_c_and_nz	jmp	#LR__2574
1b7c0     00 F8 3F CF 
1b7c4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b7c8     E8 00 90 CD |  if_b	jmp	#LR__2584
1b7cc     00 2A 0E F2 | 	cmp	local07, #0 wz
1b7d0     10 FB 01 56 |  if_ne	mov	result1, local02
1b7d4     DC 00 90 5D |  if_ne	jmp	#LR__2584
1b7d8                 | LR__2574
1b7d8     02 22 46 F5 | 	or	local03, #2
1b7dc     00 12 06 F6 | 	mov	arg01, #0
1b7e0     00 14 06 F6 | 	mov	arg02, #0
1b7e4     13 17 02 F6 | 	mov	arg03, local05
1b7e8     11 19 02 F6 | 	mov	arg04, local03
1b7ec     78 31 B0 FD | 	call	#__system__pack_0483
1b7f0     C0 00 90 FD | 	jmp	#LR__2584
1b7f4                 | LR__2575
1b7f4     00 26 0E F2 | 	cmp	local05, #0 wz
1b7f8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b7fc     00 F8 3F AF 
1b800     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b804     AC 00 90 AD |  if_e	jmp	#LR__2584
1b808     00 2A 0E F2 | 	cmp	local07, #0 wz
1b80c     10 FB 01 56 |  if_ne	mov	result1, local02
1b810     A0 00 90 5D |  if_ne	jmp	#LR__2584
1b814     16 17 02 F6 | 	mov	arg03, local08
1b818     11 19 02 F6 | 	mov	arg04, local03
1b81c     02 18 46 F5 | 	or	arg04, #2
1b820     00 12 06 F6 | 	mov	arg01, #0
1b824     00 14 06 F6 | 	mov	arg02, #0
1b828     3C 31 B0 FD | 	call	#__system__pack_0483
1b82c     84 00 90 FD | 	jmp	#LR__2584
1b830                 | LR__2576
1b830     00 24 0E F2 | 	cmp	local04, #0 wz
1b834     20 00 90 AD |  if_e	jmp	#LR__2579
1b838     01 24 66 F0 | 	shl	local04, #1
1b83c     97 0A 48 FB | 	callpa	#(@LR__2578-@LR__2577)>>2,fcache_load_ptr_
1b840                 | LR__2577
1b840     00 40 00 FF 
1b844     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b848     01 26 86 C1 |  if_b	sub	local05, #1
1b84c     01 24 66 C0 |  if_b	shl	local04, #1
1b850     EC FF 9F CD |  if_b	jmp	#LR__2577
1b854                 | LR__2578
1b854     D0 FE 9F FD | 	jmp	#LR__2570
1b858                 | LR__2579
1b858     08 22 46 F5 | 	or	local03, #8
1b85c     00 12 06 F6 | 	mov	arg01, #0
1b860     00 14 06 F6 | 	mov	arg02, #0
1b864     00 16 06 F6 | 	mov	arg03, #0
1b868     11 19 02 F6 | 	mov	arg04, local03
1b86c     F8 30 B0 FD | 	call	#__system__pack_0483
1b870     40 00 90 FD | 	jmp	#LR__2584
1b874                 | LR__2580
1b874     00 2A 0E F2 | 	cmp	local07, #0 wz
1b878     20 00 90 AD |  if_e	jmp	#LR__2583
1b87c     01 2A 66 F0 | 	shl	local07, #1
1b880     97 0A 48 FB | 	callpa	#(@LR__2582-@LR__2581)>>2,fcache_load_ptr_
1b884                 | LR__2581
1b884     00 40 00 FF 
1b888     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1b88c     01 2C 86 C1 |  if_b	sub	local08, #1
1b890     01 2A 66 C0 |  if_b	shl	local07, #1
1b894     EC FF 9F CD |  if_b	jmp	#LR__2581
1b898                 | LR__2582
1b898     98 FE 9F FD | 	jmp	#LR__2571
1b89c                 | LR__2583
1b89c     08 22 46 F5 | 	or	local03, #8
1b8a0     00 12 06 F6 | 	mov	arg01, #0
1b8a4     00 14 06 F6 | 	mov	arg02, #0
1b8a8     00 16 06 F6 | 	mov	arg03, #0
1b8ac     11 19 02 F6 | 	mov	arg04, local03
1b8b0     B4 30 B0 FD | 	call	#__system__pack_0483
1b8b4                 | LR__2584
1b8b4     A7 F0 03 F6 | 	mov	ptra, fp
1b8b8     B2 00 A0 FD | 	call	#popregs_
1b8bc                 | __system___float_mul_ret
1b8bc     2D 00 64 FD | 	ret
1b8c0                 | 
1b8c0                 | __system___float_div
1b8c0     0E 4A 05 F6 | 	mov	COUNT_, #14
1b8c4     A8 00 A0 FD | 	call	#pushregs_
1b8c8     09 23 02 F6 | 	mov	local03, arg01
1b8cc     0A 25 02 F6 | 	mov	local04, arg02
1b8d0     11 27 02 F6 | 	mov	local05, local03
1b8d4     13 29 02 F6 | 	mov	local06, local05
1b8d8     16 28 46 F7 | 	zerox	local06, #22
1b8dc     13 2B 02 F6 | 	mov	local07, local05
1b8e0     01 2A 66 F0 | 	shl	local07, #1
1b8e4     18 2A 46 F0 | 	shr	local07, #24
1b8e8     1F 26 46 F0 | 	shr	local05, #31
1b8ec     12 FB 01 F6 | 	mov	result1, local04
1b8f0     FD 2C 02 F6 | 	mov	local08, result1
1b8f4     16 2F 02 F6 | 	mov	local09, local08
1b8f8     16 2E 46 F7 | 	zerox	local09, #22
1b8fc     16 31 02 F6 | 	mov	local10, local08
1b900     01 30 66 F0 | 	shl	local10, #1
1b904     18 30 46 F0 | 	shr	local10, #24
1b908     1F 2C 46 F0 | 	shr	local08, #31
1b90c     16 27 62 F5 | 	xor	local05, local08
1b910     FF 2A 0E F2 | 	cmp	local07, #255 wz
1b914     D4 00 90 AD |  if_e	jmp	#LR__2595
1b918     FF 30 0E F2 | 	cmp	local10, #255 wz
1b91c     04 01 90 AD |  if_e	jmp	#LR__2596
1b920     00 2A 0E F2 | 	cmp	local07, #0 wz
1b924     24 01 90 AD |  if_e	jmp	#LR__2597
1b928     17 28 26 F4 | 	bith	local06, #23
1b92c                 | LR__2590
1b92c     00 30 0E F2 | 	cmp	local10, #0 wz
1b930     70 01 90 AD |  if_e	jmp	#LR__2601
1b934     17 2E 26 F4 | 	bith	local09, #23
1b938                 | LR__2591
1b938     18 2B 82 F1 | 	sub	local07, local10
1b93c     15 33 02 F6 | 	mov	local11, local07
1b940     14 13 02 F6 | 	mov	arg01, local06
1b944     02 12 46 F0 | 	shr	arg01, #2
1b948     1E 28 66 F0 | 	shl	local06, #30
1b94c     14 15 02 F6 | 	mov	arg02, local06
1b950     17 17 02 F6 | 	mov	arg03, local09
1b954     28 12 62 FD | 	setq	arg01
1b958     0B 15 12 FD | 	qdiv	arg02, arg03
1b95c     00 34 06 F6 | 	mov	local12, #0
1b960     18 1E 62 FD | 	getqx	local01
1b964     19 FC 61 FD | 	getqy	result2
1b968     FE 20 02 F6 | 	mov	local02, result2
1b96c     0F 37 02 F6 | 	mov	local13, local01
1b970     00 20 4E F2 | 	cmps	local02, #0 wz
1b974     1B 39 02 F6 | 	mov	local14, local13
1b978     19 38 66 F0 | 	shl	local14, #25
1b97c     01 34 06 56 |  if_ne	mov	local12, #1
1b980     1A 39 42 F5 | 	or	local14, local12
1b984     07 36 46 F0 | 	shr	local13, #7
1b988     00 80 00 FF 
1b98c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1b990     1C 00 90 CD |  if_b	jmp	#LR__2592
1b994     01 32 06 F1 | 	add	local11, #1
1b998     01 38 46 F0 | 	shr	local14, #1
1b99c     1B 35 02 F6 | 	mov	local12, local13
1b9a0     1F 34 66 F0 | 	shl	local12, #31
1b9a4     1A 39 42 F5 | 	or	local14, local12
1b9a8     01 36 46 F0 | 	shr	local13, #1
1b9ac     24 00 90 FD | 	jmp	#LR__2594
1b9b0                 | LR__2592
1b9b0     00 40 00 FF 
1b9b4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1b9b8     18 00 90 3D |  if_ae	jmp	#LR__2593
1b9bc     01 32 86 F1 | 	sub	local11, #1
1b9c0     01 36 66 F0 | 	shl	local13, #1
1b9c4     1C 35 02 F6 | 	mov	local12, local14
1b9c8     1F 34 46 F0 | 	shr	local12, #31
1b9cc     1A 37 42 F5 | 	or	local13, local12
1b9d0     01 38 66 F0 | 	shl	local14, #1
1b9d4                 | LR__2593
1b9d4                 | LR__2594
1b9d4     1B 13 02 F6 | 	mov	arg01, local13
1b9d8     1C 15 02 F6 | 	mov	arg02, local14
1b9dc     19 17 02 F6 | 	mov	arg03, local11
1b9e0     13 19 02 F6 | 	mov	arg04, local05
1b9e4     80 2F B0 FD | 	call	#__system__pack_0483
1b9e8     F8 00 90 FD | 	jmp	#LR__2605
1b9ec                 | LR__2595
1b9ec     00 28 0E F2 | 	cmp	local06, #0 wz
1b9f0     11 FB 01 56 |  if_ne	mov	result1, local03
1b9f4     EC 00 90 5D |  if_ne	jmp	#LR__2605
1b9f8     FF 30 0E F2 | 	cmp	local10, #255 wz
1b9fc     00 F8 3F AF 
1ba00     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ba04     DC 00 90 AD |  if_e	jmp	#LR__2605
1ba08     02 26 46 F5 | 	or	local05, #2
1ba0c     00 12 06 F6 | 	mov	arg01, #0
1ba10     00 14 06 F6 | 	mov	arg02, #0
1ba14     15 17 02 F6 | 	mov	arg03, local07
1ba18     13 19 02 F6 | 	mov	arg04, local05
1ba1c     48 2F B0 FD | 	call	#__system__pack_0483
1ba20     C0 00 90 FD | 	jmp	#LR__2605
1ba24                 | LR__2596
1ba24     00 2E 0E F2 | 	cmp	local09, #0 wz
1ba28     12 FB 01 56 |  if_ne	mov	result1, local04
1ba2c     B4 00 90 5D |  if_ne	jmp	#LR__2605
1ba30     13 19 02 F6 | 	mov	arg04, local05
1ba34     08 18 46 F5 | 	or	arg04, #8
1ba38     00 12 06 F6 | 	mov	arg01, #0
1ba3c     00 14 06 F6 | 	mov	arg02, #0
1ba40     00 16 06 F6 | 	mov	arg03, #0
1ba44     20 2F B0 FD | 	call	#__system__pack_0483
1ba48     98 00 90 FD | 	jmp	#LR__2605
1ba4c                 | LR__2597
1ba4c     00 28 0E F2 | 	cmp	local06, #0 wz
1ba50     20 00 90 AD |  if_e	jmp	#LR__2600
1ba54     01 28 66 F0 | 	shl	local06, #1
1ba58     97 0A 48 FB | 	callpa	#(@LR__2599-@LR__2598)>>2,fcache_load_ptr_
1ba5c                 | LR__2598
1ba5c     00 40 00 FF 
1ba60     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1ba64     01 2A 86 C1 |  if_b	sub	local07, #1
1ba68     01 28 66 C0 |  if_b	shl	local06, #1
1ba6c     EC FF 9F CD |  if_b	jmp	#LR__2598
1ba70                 | LR__2599
1ba70     B8 FE 9F FD | 	jmp	#LR__2590
1ba74                 | LR__2600
1ba74     00 30 0E F2 | 	cmp	local10, #0 wz
1ba78     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1ba7c     00 F8 3F AF 
1ba80     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ba84     5C 00 90 AD |  if_e	jmp	#LR__2605
1ba88     13 19 02 F6 | 	mov	arg04, local05
1ba8c     08 18 46 F5 | 	or	arg04, #8
1ba90     00 12 06 F6 | 	mov	arg01, #0
1ba94     00 14 06 F6 | 	mov	arg02, #0
1ba98     00 16 06 F6 | 	mov	arg03, #0
1ba9c     C8 2E B0 FD | 	call	#__system__pack_0483
1baa0     40 00 90 FD | 	jmp	#LR__2605
1baa4                 | LR__2601
1baa4     00 2E 0E F2 | 	cmp	local09, #0 wz
1baa8     20 00 90 AD |  if_e	jmp	#LR__2604
1baac     01 2E 66 F0 | 	shl	local09, #1
1bab0     97 0A 48 FB | 	callpa	#(@LR__2603-@LR__2602)>>2,fcache_load_ptr_
1bab4                 | LR__2602
1bab4     00 40 00 FF 
1bab8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1babc     01 30 86 C1 |  if_b	sub	local10, #1
1bac0     01 2E 66 C0 |  if_b	shl	local09, #1
1bac4     EC FF 9F CD |  if_b	jmp	#LR__2602
1bac8                 | LR__2603
1bac8     6C FE 9F FD | 	jmp	#LR__2591
1bacc                 | LR__2604
1bacc     02 26 46 F5 | 	or	local05, #2
1bad0     00 12 06 F6 | 	mov	arg01, #0
1bad4     00 14 06 F6 | 	mov	arg02, #0
1bad8     00 16 06 F6 | 	mov	arg03, #0
1badc     13 19 02 F6 | 	mov	arg04, local05
1bae0     84 2E B0 FD | 	call	#__system__pack_0483
1bae4                 | LR__2605
1bae4     A7 F0 03 F6 | 	mov	ptra, fp
1bae8     B2 00 A0 FD | 	call	#popregs_
1baec                 | __system___float_div_ret
1baec     2D 00 64 FD | 	ret
1baf0                 | 
1baf0                 | __system___float_cmp
1baf0     00 C0 3F FF 
1baf4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1baf8     00 C0 3F CF 
1bafc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1bb00     0B FB 01 36 |  if_ae	mov	result1, arg03
1bb04     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bb08     00 C0 7F FF 
1bb0c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1bb10     00 C0 7F CF 
1bb14     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1bb18     0B FB 01 36 |  if_ae	mov	result1, arg03
1bb1c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1bb20     00 12 56 F2 | 	cmps	arg01, #0 wc
1bb24     2C 00 90 3D |  if_ae	jmp	#LR__2610
1bb28     00 14 56 F2 | 	cmps	arg02, #0 wc
1bb2c     0A FB 01 C6 |  if_b	mov	result1, arg02
1bb30     09 FB 81 C1 |  if_b	sub	result1, arg01
1bb34     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1bb38     00 14 0E F2 | 	cmp	arg02, #0 wz
1bb3c     00 00 40 AF 
1bb40     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1bb44     00 FA 05 A6 |  if_e	mov	result1, #0
1bb48     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bb4c     01 FA 65 F6 | 	neg	result1, #1
1bb50     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1bb54                 | LR__2610
1bb54     00 14 56 F2 | 	cmps	arg02, #0 wc
1bb58     1C 00 90 3D |  if_ae	jmp	#LR__2611
1bb5c     00 12 0E F2 | 	cmp	arg01, #0 wz
1bb60     00 00 40 AF 
1bb64     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1bb68     00 FA 05 A6 |  if_e	mov	result1, #0
1bb6c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1bb70     01 FA 05 F6 | 	mov	result1, #1
1bb74     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1bb78                 | LR__2611
1bb78     0A 13 82 F1 | 	sub	arg01, arg02
1bb7c     09 FB 01 F6 | 	mov	result1, arg01
1bb80                 | __system___float_cmp_ret
1bb80     2D 00 64 FD | 	ret
1bb84                 | 
1bb84                 | __system___float_tointeger
1bb84     02 4A 05 F6 | 	mov	COUNT_, #2
1bb88     A8 00 A0 FD | 	call	#pushregs_
1bb8c     50 00 B0 FD | 	call	#__system___float_Unpack
1bb90     FF FF 7F FF 
1bb94     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1bb98     34 00 90 CD |  if_b	jmp	#LR__2620
1bb9c     1F FC 55 F2 | 	cmps	result2, #31 wc
1bba0     2C 00 90 3D |  if_ae	jmp	#LR__2620
1bba4     02 FE 65 F0 | 	shl	result3, #2
1bba8     1E 1E 06 F6 | 	mov	local01, #30
1bbac     FE 1E 82 F1 | 	sub	local01, result2
1bbb0     0F FF 41 F0 | 	shr	result3, local01
1bbb4     FF 20 02 F6 | 	mov	local02, result3
1bbb8     0A 21 02 F1 | 	add	local02, arg02
1bbbc     01 20 46 F0 | 	shr	local02, #1
1bbc0     00 FA 0D F2 | 	cmp	result1, #0 wz
1bbc4     10 21 62 56 |  if_ne	neg	local02, local02
1bbc8     10 FB 01 F6 | 	mov	result1, local02
1bbcc     04 00 90 FD | 	jmp	#LR__2621
1bbd0                 | LR__2620
1bbd0     00 FA 05 F6 | 	mov	result1, #0
1bbd4                 | LR__2621
1bbd4     A7 F0 03 F6 | 	mov	ptra, fp
1bbd8     B2 00 A0 FD | 	call	#popregs_
1bbdc                 | __system___float_tointeger_ret
1bbdc     2D 00 64 FD | 	ret
1bbe0                 | 
1bbe0                 | __system___float_Unpack
1bbe0     09 01 02 F6 | 	mov	_var01, arg01
1bbe4     1F 00 46 F0 | 	shr	_var01, #31
1bbe8     09 03 02 F6 | 	mov	_var02, arg01
1bbec     01 02 66 F0 | 	shl	_var02, #1
1bbf0     18 02 4E F0 | 	shr	_var02, #24 wz
1bbf4     17 13 06 F4 | 	bitl	arg01, #279
1bbf8     06 12 66 50 |  if_ne	shl	arg01, #6
1bbfc     1D 12 26 54 |  if_ne	bith	arg01, #29
1bc00     1C 00 90 5D |  if_ne	jmp	#LR__2630
1bc04     09 05 92 F7 | 	encod	_var03, arg01 wc
1bc08     01 04 06 C1 |  if_b	add	_var03, #1
1bc0c     17 04 86 F1 | 	sub	_var03, #23
1bc10     02 03 02 F6 | 	mov	_var02, _var03
1bc14     07 FC 05 F6 | 	mov	result2, #7
1bc18     02 FD 81 F1 | 	sub	result2, _var03
1bc1c     FE 12 62 F0 | 	shl	arg01, result2
1bc20                 | LR__2630
1bc20     7F 02 86 F1 | 	sub	_var02, #127
1bc24     09 FF 01 F6 | 	mov	result3, arg01
1bc28     00 FB 01 F6 | 	mov	result1, _var01
1bc2c     01 FD 01 F6 | 	mov	result2, _var02
1bc30                 | __system___float_Unpack_ret
1bc30     2D 00 64 FD | 	ret
1bc34                 | 
1bc34                 | __system___float_Pack
1bc34     00 00 06 F6 | 	mov	_var01, #0
1bc38     00 16 0E F2 | 	cmp	arg03, #0 wz
1bc3c     8C 00 90 AD |  if_e	jmp	#LR__2641
1bc40     0B 03 92 F7 | 	encod	_var02, arg03 wc
1bc44     01 02 06 C1 |  if_b	add	_var02, #1
1bc48     21 00 06 F6 | 	mov	_var01, #33
1bc4c     01 01 82 F1 | 	sub	_var01, _var02
1bc50     00 17 62 F0 | 	shl	arg03, _var01
1bc54     03 02 06 F6 | 	mov	_var02, #3
1bc58     00 03 82 F1 | 	sub	_var02, _var01
1bc5c     01 15 02 F1 | 	add	arg02, _var02
1bc60     0A 05 02 F6 | 	mov	_var03, arg02
1bc64     00 17 06 F1 | 	add	arg03, #256
1bc68     0B 03 02 F6 | 	mov	_var02, arg03
1bc6c     FF 02 2E F5 | 	andn	_var02, #255 wz
1bc70     01 04 06 A1 |  if_e	add	_var03, #1
1bc74     7F 04 06 F1 | 	add	_var03, #127
1bc78     FF FF 7F FF 
1bc7c     E9 05 46 F3 | 	fges	_var03, ##-23
1bc80     FF 04 66 F3 | 	fles	_var03, #255
1bc84     01 04 56 F2 | 	cmps	_var03, #1 wc
1bc88     1C 00 90 3D |  if_ae	jmp	#LR__2640
1bc8c     01 16 46 F0 | 	shr	arg03, #1
1bc90     1F 02 C6 F9 | 	decod	_var02, #31
1bc94     0B 03 02 F1 | 	add	_var02, arg03
1bc98     02 05 62 F6 | 	neg	_var03, _var03
1bc9c     02 03 42 F0 | 	shr	_var02, _var03
1bca0     01 17 02 F6 | 	mov	arg03, _var02
1bca4     00 04 06 F6 | 	mov	_var03, #0
1bca8                 | LR__2640
1bca8     09 FB 01 F6 | 	mov	result1, arg01
1bcac     1F FA 65 F0 | 	shl	result1, #31
1bcb0     02 03 02 F6 | 	mov	_var02, _var03
1bcb4     17 02 66 F0 | 	shl	_var02, #23
1bcb8     01 FB 41 F5 | 	or	result1, _var02
1bcbc     0B 07 02 F6 | 	mov	_var04, arg03
1bcc0     09 06 46 F0 | 	shr	_var04, #9
1bcc4     03 FB 41 F5 | 	or	result1, _var04
1bcc8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1bccc                 | LR__2641
1bccc     00 FB 01 F6 | 	mov	result1, _var01
1bcd0                 | __system___float_Pack_ret
1bcd0     2D 00 64 FD | 	ret
1bcd4                 | 
1bcd4                 | __system___basic_print_float
1bcd4     05 4A 05 F6 | 	mov	COUNT_, #5
1bcd8     A8 00 A0 FD | 	call	#pushregs_
1bcdc     09 1F 02 F6 | 	mov	local01, arg01
1bce0     0A 21 02 F6 | 	mov	local02, arg02
1bce4     0B 23 0A F6 | 	mov	local03, arg03 wz
1bce8     0C 25 02 F6 | 	mov	local04, arg04
1bcec     14 00 90 5D |  if_ne	jmp	#LR__2650
1bcf0     23 24 0E F2 | 	cmp	local04, #35 wz
1bcf4     80 02 10 AF 
1bcf8     00 26 06 A6 |  if_e	mov	local05, ##537198592
1bcfc     1D 26 C6 59 |  if_ne	decod	local05, #29
1bd00     13 23 02 F6 | 	mov	local03, local05
1bd04                 | LR__2650
1bd04     0F 13 02 F6 | 	mov	arg01, local01
1bd08     40 27 B0 FD | 	call	#__system___gettxfunc
1bd0c     FD 26 0A F6 | 	mov	local05, result1 wz
1bd10     00 FA 05 A6 |  if_e	mov	result1, #0
1bd14     13 13 02 56 |  if_ne	mov	arg01, local05
1bd18     11 15 02 56 |  if_ne	mov	arg02, local03
1bd1c     10 17 02 56 |  if_ne	mov	arg03, local02
1bd20     12 19 02 56 |  if_ne	mov	arg04, local04
1bd24     8C DF BF 5D |  if_ne	call	#__system___fmtfloat
1bd28     A7 F0 03 F6 | 	mov	ptra, fp
1bd2c     B2 00 A0 FD | 	call	#popregs_
1bd30                 | __system___basic_print_float_ret
1bd30     2D 00 64 FD | 	ret
1bd34                 | 
1bd34                 | __system____builtin_atoi
1bd34     07 4A 05 F6 | 	mov	COUNT_, #7
1bd38     A8 00 A0 FD | 	call	#pushregs_
1bd3c                 | __system____builtin_atoi_enter
1bd3c     09 1F 02 F6 | 	mov	local01, arg01
1bd40     0A 21 02 F6 | 	mov	local02, arg02
1bd44     00 22 06 F6 | 	mov	local03, #0
1bd48     00 24 06 F6 | 	mov	local04, #0
1bd4c     00 26 06 F6 | 	mov	local05, #0
1bd50     97 08 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1bd54                 | LR__2660
1bd54     0F 29 C2 FA | 	rdbyte	local06, local01
1bd58     20 28 0E F2 | 	cmp	local06, #32 wz
1bd5c     01 1E 06 A1 |  if_e	add	local01, #1
1bd60     F0 FF 9F AD |  if_e	jmp	#LR__2660
1bd64                 | LR__2661
1bd64     0F 2B C2 FA | 	rdbyte	local07, local01
1bd68                 | LR__2662
1bd68     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bd6c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1bd70     18 00 90 5D |  if_ne	jmp	#LR__2663
1bd74     01 1E 06 F1 | 	add	local01, #1
1bd78     2D 2A 0E F2 | 	cmp	local07, #45 wz
1bd7c     01 28 06 A6 |  if_e	mov	local06, #1
1bd80     14 27 C2 A2 |  if_e	subr	local05, local06
1bd84     0F 2B C2 FA | 	rdbyte	local07, local01
1bd88     DC FF 9F FD | 	jmp	#LR__2662
1bd8c                 | LR__2663
1bd8c     97 48 48 FB | 	callpa	#(@LR__2671-@LR__2664)>>2,fcache_load_ptr_
1bd90                 | LR__2664
1bd90                 | LR__2665
1bd90     0F 2B C2 FA | 	rdbyte	local07, local01
1bd94     5F 2A 0E F2 | 	cmp	local07, #95 wz
1bd98     01 1E 06 F1 | 	add	local01, #1
1bd9c     F0 FF 9F AD |  if_e	jmp	#LR__2665
1bda0     30 2A 0E F2 | 	cmp	local07, #48 wz
1bda4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1bda8     00 24 06 A6 |  if_e	mov	local04, #0
1bdac     60 00 90 AD |  if_e	jmp	#LR__2670
1bdb0     31 2A 56 F2 | 	cmps	local07, #49 wc
1bdb4     18 00 90 CD |  if_b	jmp	#LR__2666
1bdb8     3A 2A 56 F2 | 	cmps	local07, #58 wc
1bdbc     15 25 02 C6 |  if_b	mov	local04, local07
1bdc0     30 24 86 C1 |  if_b	sub	local04, #48
1bdc4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1bdc8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1bdcc     40 00 90 CD |  if_b	jmp	#LR__2669
1bdd0                 | LR__2666
1bdd0     0B 20 56 F2 | 	cmps	local02, #11 wc
1bdd4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1bdd8     14 00 90 CD |  if_b	jmp	#LR__2667
1bddc     67 2A 56 F2 | 	cmps	local07, #103 wc
1bde0     61 2A 86 C1 |  if_b	sub	local07, #97
1bde4     0A 24 06 C6 |  if_b	mov	local04, #10
1bde8     15 25 02 C1 |  if_b	add	local04, local07
1bdec     20 00 90 CD |  if_b	jmp	#LR__2668
1bdf0                 | LR__2667
1bdf0     0B 20 56 F2 | 	cmps	local02, #11 wc
1bdf4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1bdf8     24 00 90 CD |  if_b	jmp	#LR__2672
1bdfc     47 2A 56 F2 | 	cmps	local07, #71 wc
1be00     41 2A 86 C1 |  if_b	sub	local07, #65
1be04     0A 24 06 C6 |  if_b	mov	local04, #10
1be08     15 25 02 C1 |  if_b	add	local04, local07
1be0c     10 00 90 3D |  if_ae	jmp	#LR__2672
1be10                 | LR__2668
1be10                 | LR__2669
1be10                 | LR__2670
1be10     11 21 02 FD | 	qmul	local02, local03
1be14     18 22 62 FD | 	getqx	local03
1be18     12 23 02 F1 | 	add	local03, local04
1be1c     70 FF 9F FD | 	jmp	#LR__2664
1be20                 | LR__2671
1be20                 | LR__2672
1be20     00 20 0E F2 | 	cmp	local02, #0 wz
1be24     64 00 90 5D |  if_ne	jmp	#LR__2678
1be28     78 2A 0E F2 | 	cmp	local07, #120 wz
1be2c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1be30     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1be34     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1be38     14 00 90 5D |  if_ne	jmp	#LR__2673
1be3c     0F 13 02 F6 | 	mov	arg01, local01
1be40     10 14 06 F6 | 	mov	arg02, #16
1be44     EC FE BF FD | 	call	#__system____builtin_atoi
1be48     FD 22 02 F6 | 	mov	local03, result1
1be4c     3C 00 90 FD | 	jmp	#LR__2677
1be50                 | LR__2673
1be50     62 2A 0E F2 | 	cmp	local07, #98 wz
1be54     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1be58     14 00 90 5D |  if_ne	jmp	#LR__2674
1be5c     0F 13 02 F6 | 	mov	arg01, local01
1be60     02 14 06 F6 | 	mov	arg02, #2
1be64     CC FE BF FD | 	call	#__system____builtin_atoi
1be68     FD 22 02 F6 | 	mov	local03, result1
1be6c     1C 00 90 FD | 	jmp	#LR__2676
1be70                 | LR__2674
1be70     6F 2A 0E F2 | 	cmp	local07, #111 wz
1be74     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1be78     10 00 90 5D |  if_ne	jmp	#LR__2675
1be7c     0F 13 02 F6 | 	mov	arg01, local01
1be80     08 14 06 F6 | 	mov	arg02, #8
1be84     AC FE BF FD | 	call	#__system____builtin_atoi
1be88     FD 22 02 F6 | 	mov	local03, result1
1be8c                 | LR__2675
1be8c                 | LR__2676
1be8c                 | LR__2677
1be8c                 | LR__2678
1be8c     00 26 0E F2 | 	cmp	local05, #0 wz
1be90     11 23 62 56 |  if_ne	neg	local03, local03
1be94     11 FB 01 F6 | 	mov	result1, local03
1be98     A7 F0 03 F6 | 	mov	ptra, fp
1be9c     B2 00 A0 FD | 	call	#popregs_
1bea0                 | __system____builtin_atoi_ret
1bea0     2D 00 64 FD | 	ret
1bea4                 | 
1bea4                 | __system____builtin_atof
1bea4     07 4A 05 F6 | 	mov	COUNT_, #7
1bea8     A8 00 A0 FD | 	call	#pushregs_
1beac     09 1F 02 F6 | 	mov	local01, arg01
1beb0     00 20 06 F6 | 	mov	local02, #0
1beb4     00 22 06 F6 | 	mov	local03, #0
1beb8     00 24 06 F6 | 	mov	local04, #0
1bebc     00 26 06 F6 | 	mov	local05, #0
1bec0     97 08 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1bec4                 | LR__2680
1bec4     0F 17 C2 FA | 	rdbyte	arg03, local01
1bec8     20 16 0E F2 | 	cmp	arg03, #32 wz
1becc     01 1E 06 A1 |  if_e	add	local01, #1
1bed0     F0 FF 9F AD |  if_e	jmp	#LR__2680
1bed4                 | LR__2681
1bed4     0F 29 C2 FA | 	rdbyte	local06, local01
1bed8                 | LR__2682
1bed8     2B 28 0E F2 | 	cmp	local06, #43 wz
1bedc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1bee0     14 00 90 5D |  if_ne	jmp	#LR__2683
1bee4     2D 28 0E F2 | 	cmp	local06, #45 wz
1bee8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1beec     01 1E 06 F1 | 	add	local01, #1
1bef0     0F 29 C2 FA | 	rdbyte	local06, local01
1bef4     E0 FF 9F FD | 	jmp	#LR__2682
1bef8                 | LR__2683
1bef8                 | LR__2684
1bef8     97 08 48 FB | 	callpa	#(@LR__2686-@LR__2685)>>2,fcache_load_ptr_
1befc                 | LR__2685
1befc     0F 29 C2 FA | 	rdbyte	local06, local01
1bf00     5F 28 0E F2 | 	cmp	local06, #95 wz
1bf04     01 1E 06 F1 | 	add	local01, #1
1bf08     F0 FF 9F AD |  if_e	jmp	#LR__2685
1bf0c                 | LR__2686
1bf0c     00 28 0E F2 | 	cmp	local06, #0 wz
1bf10     5C 00 90 AD |  if_e	jmp	#LR__2688
1bf14     30 28 56 F2 | 	cmps	local06, #48 wc
1bf18     44 00 90 CD |  if_b	jmp	#LR__2687
1bf1c     3A 28 56 F2 | 	cmps	local06, #58 wc
1bf20     3C 00 90 3D |  if_ae	jmp	#LR__2687
1bf24     10 13 02 F6 | 	mov	arg01, local02
1bf28     00 90 20 FF 
1bf2c     00 14 06 F6 | 	mov	arg02, ##1092616192
1bf30     88 F7 BF FD | 	call	#__system___float_mul
1bf34     FD 20 02 F6 | 	mov	local02, result1
1bf38     30 28 86 F1 | 	sub	local06, #48
1bf3c     14 13 02 F6 | 	mov	arg01, local06
1bf40     74 F3 BF FD | 	call	#__system___float_fromuns
1bf44     FD 14 02 F6 | 	mov	arg02, result1
1bf48     10 13 02 F6 | 	mov	arg01, local02
1bf4c     9C F3 BF FD | 	call	#__system___float_add
1bf50     FD 20 02 F6 | 	mov	local02, result1
1bf54     00 26 0E F2 | 	cmp	local05, #0 wz
1bf58     01 22 86 51 |  if_ne	sub	local03, #1
1bf5c     98 FF 9F FD | 	jmp	#LR__2684
1bf60                 | LR__2687
1bf60     2E 28 0E F2 | 	cmp	local06, #46 wz
1bf64     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1bf68     01 26 06 A6 |  if_e	mov	local05, #1
1bf6c     88 FF 9F AD |  if_e	jmp	#LR__2684
1bf70                 | LR__2688
1bf70     45 28 0E F2 | 	cmp	local06, #69 wz
1bf74     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1bf78     18 00 90 5D |  if_ne	jmp	#LR__2689
1bf7c     0F 13 02 F6 | 	mov	arg01, local01
1bf80     00 14 06 F6 | 	mov	arg02, #0
1bf84     AC FD BF FD | 	call	#__system____builtin_atoi
1bf88     11 FB 01 F1 | 	add	result1, local03
1bf8c     FD 2A 02 F6 | 	mov	local07, result1
1bf90     04 00 90 FD | 	jmp	#LR__2690
1bf94                 | LR__2689
1bf94     11 2B 02 F6 | 	mov	local07, local03
1bf98                 | LR__2690
1bf98     15 17 02 F6 | 	mov	arg03, local07
1bf9c     10 13 02 F6 | 	mov	arg01, local02
1bfa0     00 90 20 FF 
1bfa4     00 14 06 F6 | 	mov	arg02, ##1092616192
1bfa8     BC 06 B0 FD | 	call	#__system___float_pow_n
1bfac     12 FB 61 F5 | 	xor	result1, local04
1bfb0     A7 F0 03 F6 | 	mov	ptra, fp
1bfb4     B2 00 A0 FD | 	call	#popregs_
1bfb8                 | __system____builtin_atof_ret
1bfb8     2D 00 64 FD | 	ret
1bfbc                 | 
1bfbc                 | __system____builtin_ilogb
1bfbc     20 FC BF FD | 	call	#__system___float_Unpack
1bfc0     00 FE 0D F2 | 	cmp	result3, #0 wz
1bfc4     00 00 40 AF 
1bfc8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1bfcc     24 00 90 AD |  if_e	jmp	#LR__2701
1bfd0     80 FC 0D F2 | 	cmp	result2, #128 wz
1bfd4     18 00 90 5D |  if_ne	jmp	#LR__2700
1bfd8     00 00 10 FF 
1bfdc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1bfe0     1E FA CD A9 |  if_e	bmask	result1, #30
1bfe4     0C 00 90 AD |  if_e	jmp	#LR__2701
1bfe8     1F FA C5 F9 | 	decod	result1, #31
1bfec     04 00 90 FD | 	jmp	#LR__2701
1bff0                 | LR__2700
1bff0     FE FA 01 F6 | 	mov	result1, result2
1bff4                 | LR__2701
1bff4                 | __system____builtin_ilogb_ret
1bff4     2D 00 64 FD | 	ret
1bff8                 | 
1bff8                 | __system____builtin_sinf
1bff8     03 4A 05 F6 | 	mov	COUNT_, #3
1bffc     A8 00 A0 FD | 	call	#pushregs_
1c000     09 1F 02 F6 | 	mov	local01, arg01
1c004     87 64 20 FF 
1c008     DB 15 06 F6 | 	mov	arg02, ##1086918619
1c00c     B0 F8 BF FD | 	call	#__system___float_div
1c010     FD 12 02 F6 | 	mov	arg01, result1
1c014     00 14 06 F6 | 	mov	arg02, #0
1c018     68 FB BF FD | 	call	#__system___float_tointeger
1c01c     FD 16 0A F6 | 	mov	arg03, result1 wz
1c020     44 00 90 AD |  if_e	jmp	#LR__2710
1c024     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c028     1F 20 C6 C9 |  if_b	decod	local02, #31
1c02c     00 20 06 36 |  if_ae	mov	local02, #0
1c030     84 F2 BF FD | 	call	#__system___float_fromuns
1c034     10 FB 61 F5 | 	xor	result1, local02
1c038     FD 12 02 F6 | 	mov	arg01, result1
1c03c     1E 14 C6 F9 | 	decod	arg02, #30
1c040     78 F6 BF FD | 	call	#__system___float_mul
1c044     FD 12 02 F6 | 	mov	arg01, result1
1c048     87 24 20 FF 
1c04c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c050     68 F6 BF FD | 	call	#__system___float_mul
1c054     FD 14 02 F6 | 	mov	arg02, result1
1c058     0F 13 02 F6 | 	mov	arg01, local01
1c05c     1F 14 E6 F4 | 	bitnot	arg02, #31
1c060     88 F2 BF FD | 	call	#__system___float_add
1c064     FD 1E 02 F6 | 	mov	local01, result1
1c068                 | LR__2710
1c068     0F 13 02 F6 | 	mov	arg01, local01
1c06c     66 E6 1E FF 
1c070     CD 14 06 F6 | 	mov	arg02, ##1036831949
1c074     01 16 06 F6 | 	mov	arg03, #1
1c078     74 FA BF FD | 	call	#__system___float_cmp
1c07c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c080     5C 00 90 3D |  if_ae	jmp	#LR__2711
1c084     0F 13 02 F6 | 	mov	arg01, local01
1c088     66 E6 5E FF 
1c08c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1c090     01 16 66 F6 | 	neg	arg03, #1
1c094     58 FA BF FD | 	call	#__system___float_cmp
1c098     01 FA 55 F2 | 	cmps	result1, #1 wc
1c09c     40 00 90 CD |  if_b	jmp	#LR__2711
1c0a0     0F 13 02 F6 | 	mov	arg01, local01
1c0a4     0F 15 02 F6 | 	mov	arg02, local01
1c0a8     10 F6 BF FD | 	call	#__system___float_mul
1c0ac     FD 12 02 F6 | 	mov	arg01, result1
1c0b0     0F 15 02 F6 | 	mov	arg02, local01
1c0b4     04 F6 BF FD | 	call	#__system___float_mul
1c0b8     FD 12 02 F6 | 	mov	arg01, result1
1c0bc     00 60 20 FF 
1c0c0     00 14 06 F6 | 	mov	arg02, ##1086324736
1c0c4     F8 F7 BF FD | 	call	#__system___float_div
1c0c8     FD 14 02 F6 | 	mov	arg02, result1
1c0cc     0F 13 02 F6 | 	mov	arg01, local01
1c0d0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c0d4     14 F2 BF FD | 	call	#__system___float_add
1c0d8     FD 22 02 F6 | 	mov	local03, result1
1c0dc     54 00 90 FD | 	jmp	#LR__2712
1c0e0                 | LR__2711
1c0e0     0F 13 02 F6 | 	mov	arg01, local01
1c0e4     7C 91 26 FF 
1c0e8     83 15 06 F6 | 	mov	arg02, ##1294137731
1c0ec     CC F5 BF FD | 	call	#__system___float_mul
1c0f0     FD 12 02 F6 | 	mov	arg01, result1
1c0f4     00 14 06 F6 | 	mov	arg02, #0
1c0f8     88 FA BF FD | 	call	#__system___float_tointeger
1c0fc     02 FA 65 F0 | 	shl	result1, #2
1c100     00 00 A0 FF 
1c104     FD 00 48 FD | 	qrotate	##1073741824, result1
1c108     19 12 62 FD | 	getqy	arg01
1c10c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c110     1F 20 C6 C9 |  if_b	decod	local02, #31
1c114     00 20 06 36 |  if_ae	mov	local02, #0
1c118     9C F1 BF FD | 	call	#__system___float_fromuns
1c11c     10 FB 61 F5 | 	xor	result1, local02
1c120     FD 12 02 F6 | 	mov	arg01, result1
1c124     00 40 27 FF 
1c128     00 14 06 F6 | 	mov	arg02, ##1317011456
1c12c     90 F7 BF FD | 	call	#__system___float_div
1c130     FD 22 02 F6 | 	mov	local03, result1
1c134                 | LR__2712
1c134     11 FB 01 F6 | 	mov	result1, local03
1c138     A7 F0 03 F6 | 	mov	ptra, fp
1c13c     B2 00 A0 FD | 	call	#popregs_
1c140                 | __system____builtin_sinf_ret
1c140     2D 00 64 FD | 	ret
1c144                 | 
1c144                 | __system____builtin_tanf
1c144     02 4A 05 F6 | 	mov	COUNT_, #2
1c148     A8 00 A0 FD | 	call	#pushregs_
1c14c     09 1F 02 F6 | 	mov	local01, arg01
1c150     A4 FE BF FD | 	call	#__system____builtin_sinf
1c154     FD 20 02 F6 | 	mov	local02, result1
1c158     0F 15 02 F6 | 	mov	arg02, local01
1c15c     87 E4 1F FF 
1c160     DB 13 06 F6 | 	mov	arg01, ##1070141403
1c164     1F 14 E6 F4 | 	bitnot	arg02, #31
1c168     80 F1 BF FD | 	call	#__system___float_add
1c16c     FD 12 02 F6 | 	mov	arg01, result1
1c170     84 FE BF FD | 	call	#__system____builtin_sinf
1c174     FD 14 02 F6 | 	mov	arg02, result1
1c178     10 13 02 F6 | 	mov	arg01, local02
1c17c     40 F7 BF FD | 	call	#__system___float_div
1c180     A7 F0 03 F6 | 	mov	ptra, fp
1c184     B2 00 A0 FD | 	call	#popregs_
1c188                 | __system____builtin_tanf_ret
1c188     2D 00 64 FD | 	ret
1c18c                 | 
1c18c                 | __system____builtin_asinf
1c18c     01 4A 05 F6 | 	mov	COUNT_, #1
1c190     A8 00 A0 FD | 	call	#pushregs_
1c194     09 1F 02 F6 | 	mov	local01, arg01
1c198     0F 15 02 F6 | 	mov	arg02, local01
1c19c     0F 13 02 F6 | 	mov	arg01, local01
1c1a0     18 F5 BF FD | 	call	#__system___float_mul
1c1a4     FD 14 02 F6 | 	mov	arg02, result1
1c1a8     00 C0 1F FF 
1c1ac     00 12 06 F6 | 	mov	arg01, ##1065353216
1c1b0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c1b4     34 F1 BF FD | 	call	#__system___float_add
1c1b8     FD 12 02 F6 | 	mov	arg01, result1
1c1bc     24 F4 BF FD | 	call	#__system___float_sqrt
1c1c0     FD 14 02 F6 | 	mov	arg02, result1
1c1c4     0F 13 02 F6 | 	mov	arg01, local01
1c1c8     58 00 B0 FD | 	call	#__system____builtin_atan2f
1c1cc     A7 F0 03 F6 | 	mov	ptra, fp
1c1d0     B2 00 A0 FD | 	call	#popregs_
1c1d4                 | __system____builtin_asinf_ret
1c1d4     2D 00 64 FD | 	ret
1c1d8                 | 
1c1d8                 | __system____builtin_acosf
1c1d8     01 4A 05 F6 | 	mov	COUNT_, #1
1c1dc     A8 00 A0 FD | 	call	#pushregs_
1c1e0     09 1F 02 F6 | 	mov	local01, arg01
1c1e4     0F 15 02 F6 | 	mov	arg02, local01
1c1e8     0F 13 02 F6 | 	mov	arg01, local01
1c1ec     CC F4 BF FD | 	call	#__system___float_mul
1c1f0     FD 14 02 F6 | 	mov	arg02, result1
1c1f4     00 C0 1F FF 
1c1f8     00 12 06 F6 | 	mov	arg01, ##1065353216
1c1fc     1F 14 E6 F4 | 	bitnot	arg02, #31
1c200     E8 F0 BF FD | 	call	#__system___float_add
1c204     FD 12 02 F6 | 	mov	arg01, result1
1c208     D8 F3 BF FD | 	call	#__system___float_sqrt
1c20c     FD 12 02 F6 | 	mov	arg01, result1
1c210     0F 15 02 F6 | 	mov	arg02, local01
1c214     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1c218     A7 F0 03 F6 | 	mov	ptra, fp
1c21c     B2 00 A0 FD | 	call	#popregs_
1c220                 | __system____builtin_acosf_ret
1c220     2D 00 64 FD | 	ret
1c224                 | 
1c224                 | __system____builtin_atan2f
1c224     04 4A 05 F6 | 	mov	COUNT_, #4
1c228     A8 00 A0 FD | 	call	#pushregs_
1c22c     09 1F 02 F6 | 	mov	local01, arg01
1c230     0A 21 02 F6 | 	mov	local02, arg02
1c234     0F 13 02 F6 | 	mov	arg01, local01
1c238     00 14 06 F6 | 	mov	arg02, #0
1c23c     01 16 06 F6 | 	mov	arg03, #1
1c240     AC F8 BF FD | 	call	#__system___float_cmp
1c244     00 FA 0D F2 | 	cmp	result1, #0 wz
1c248     28 00 90 5D |  if_ne	jmp	#LR__2720
1c24c     10 13 02 F6 | 	mov	arg01, local02
1c250     00 14 06 F6 | 	mov	arg02, #0
1c254     01 16 06 F6 | 	mov	arg03, #1
1c258     94 F8 BF FD | 	call	#__system___float_cmp
1c25c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c260     87 24 60 CF 
1c264     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1c268     DC 00 90 CD |  if_b	jmp	#LR__2721
1c26c     00 FA 05 F6 | 	mov	result1, #0
1c270     D4 00 90 FD | 	jmp	#LR__2721
1c274                 | LR__2720
1c274     10 13 02 F6 | 	mov	arg01, local02
1c278     10 15 02 F6 | 	mov	arg02, local02
1c27c     3C F4 BF FD | 	call	#__system___float_mul
1c280     FD 22 02 F6 | 	mov	local03, result1
1c284     0F 13 02 F6 | 	mov	arg01, local01
1c288     0F 15 02 F6 | 	mov	arg02, local01
1c28c     2C F4 BF FD | 	call	#__system___float_mul
1c290     FD 14 02 F6 | 	mov	arg02, result1
1c294     11 13 02 F6 | 	mov	arg01, local03
1c298     50 F0 BF FD | 	call	#__system___float_add
1c29c     FD 12 02 F6 | 	mov	arg01, result1
1c2a0     40 F3 BF FD | 	call	#__system___float_sqrt
1c2a4     FD 22 02 F6 | 	mov	local03, result1
1c2a8     10 13 02 F6 | 	mov	arg01, local02
1c2ac     11 15 02 F6 | 	mov	arg02, local03
1c2b0     0C F6 BF FD | 	call	#__system___float_div
1c2b4     FD 20 02 F6 | 	mov	local02, result1
1c2b8     0F 13 02 F6 | 	mov	arg01, local01
1c2bc     11 15 02 F6 | 	mov	arg02, local03
1c2c0     FC F5 BF FD | 	call	#__system___float_div
1c2c4     FD 1E 02 F6 | 	mov	local01, result1
1c2c8     00 40 27 FF 
1c2cc     00 12 06 F6 | 	mov	arg01, ##1317011456
1c2d0     10 15 02 F6 | 	mov	arg02, local02
1c2d4     E4 F3 BF FD | 	call	#__system___float_mul
1c2d8     FD 12 02 F6 | 	mov	arg01, result1
1c2dc     00 14 06 F6 | 	mov	arg02, #0
1c2e0     A0 F8 BF FD | 	call	#__system___float_tointeger
1c2e4     FD 22 02 F6 | 	mov	local03, result1
1c2e8     00 40 27 FF 
1c2ec     00 12 06 F6 | 	mov	arg01, ##1317011456
1c2f0     0F 15 02 F6 | 	mov	arg02, local01
1c2f4     C4 F3 BF FD | 	call	#__system___float_mul
1c2f8     FD 12 02 F6 | 	mov	arg01, result1
1c2fc     00 14 06 F6 | 	mov	arg02, #0
1c300     80 F8 BF FD | 	call	#__system___float_tointeger
1c304     FD 22 52 FD | 	qvector	local03, result1
1c308     87 24 20 FF 
1c30c     DB 23 06 F6 | 	mov	local03, ##1078530011
1c310     19 12 62 FD | 	getqy	arg01
1c314     01 12 C6 F0 | 	sar	arg01, #1
1c318     09 13 52 F6 | 	abs	arg01, arg01 wc
1c31c     1F 24 C6 C9 |  if_b	decod	local04, #31
1c320     00 24 06 36 |  if_ae	mov	local04, #0
1c324     90 EF BF FD | 	call	#__system___float_fromuns
1c328     12 FB 61 F5 | 	xor	result1, local04
1c32c     FD 12 02 F6 | 	mov	arg01, result1
1c330     00 40 27 FF 
1c334     00 14 06 F6 | 	mov	arg02, ##1317011456
1c338     84 F5 BF FD | 	call	#__system___float_div
1c33c     FD 14 02 F6 | 	mov	arg02, result1
1c340     11 13 02 F6 | 	mov	arg01, local03
1c344     74 F3 BF FD | 	call	#__system___float_mul
1c348                 | LR__2721
1c348     A7 F0 03 F6 | 	mov	ptra, fp
1c34c     B2 00 A0 FD | 	call	#popregs_
1c350                 | __system____builtin_atan2f_ret
1c350     2D 00 64 FD | 	ret
1c354                 | 
1c354                 | __system____builtin_exp2f
1c354     04 4A 05 F6 | 	mov	COUNT_, #4
1c358     A8 00 A0 FD | 	call	#pushregs_
1c35c     09 1F 02 F6 | 	mov	local01, arg01
1c360     00 7F 21 FF 
1c364     00 14 06 F6 | 	mov	arg02, ##1123942400
1c368     01 16 66 F6 | 	neg	arg03, #1
1c36c     80 F7 BF FD | 	call	#__system___float_cmp
1c370     00 FA 55 F2 | 	cmps	result1, #0 wc
1c374     00 C0 3F 3F 
1c378     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1c37c     DC 00 90 3D |  if_ae	jmp	#LR__2731
1c380     0F 13 02 F6 | 	mov	arg01, local01
1c384     00 7F 61 FF 
1c388     00 14 06 F6 | 	mov	arg02, ##-1023541248
1c38c     01 16 06 F6 | 	mov	arg03, #1
1c390     5C F7 BF FD | 	call	#__system___float_cmp
1c394     00 FA 55 F2 | 	cmps	result1, #0 wc
1c398     00 FA 05 C6 |  if_b	mov	result1, #0
1c39c     BC 00 90 CD |  if_b	jmp	#LR__2731
1c3a0     0F 13 02 F6 | 	mov	arg01, local01
1c3a4     00 14 06 F6 | 	mov	arg02, #0
1c3a8     D8 F7 BF FD | 	call	#__system___float_tointeger
1c3ac     FD 20 02 F6 | 	mov	local02, result1
1c3b0     10 13 52 F6 | 	abs	arg01, local02 wc
1c3b4     1F 22 C6 C9 |  if_b	decod	local03, #31
1c3b8     00 22 06 36 |  if_ae	mov	local03, #0
1c3bc     F8 EE BF FD | 	call	#__system___float_fromuns
1c3c0     11 FB 61 F5 | 	xor	result1, local03
1c3c4     FD 14 02 F6 | 	mov	arg02, result1
1c3c8     0F 13 02 F6 | 	mov	arg01, local01
1c3cc     1F 14 E6 F4 | 	bitnot	arg02, #31
1c3d0     18 EF BF FD | 	call	#__system___float_add
1c3d4     FD 24 02 F6 | 	mov	local04, result1
1c3d8     12 13 02 F6 | 	mov	arg01, local04
1c3dc     00 14 06 F6 | 	mov	arg02, #0
1c3e0     01 16 06 F6 | 	mov	arg03, #1
1c3e4     08 F7 BF FD | 	call	#__system___float_cmp
1c3e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c3ec     18 00 90 3D |  if_ae	jmp	#LR__2730
1c3f0     12 13 02 F6 | 	mov	arg01, local04
1c3f4     00 C0 1F FF 
1c3f8     00 14 06 F6 | 	mov	arg02, ##1065353216
1c3fc     EC EE BF FD | 	call	#__system___float_add
1c400     FD 24 02 F6 | 	mov	local04, result1
1c404     01 20 86 F1 | 	sub	local02, #1
1c408                 | LR__2730
1c408     7F 20 06 F1 | 	add	local02, #127
1c40c     17 20 66 F0 | 	shl	local02, #23
1c410     12 13 02 F6 | 	mov	arg01, local04
1c414     00 80 26 FF 
1c418     00 14 06 F6 | 	mov	arg02, ##1291845632
1c41c     9C F2 BF FD | 	call	#__system___float_mul
1c420     FD 12 02 F6 | 	mov	arg01, result1
1c424     00 14 06 F6 | 	mov	arg02, #0
1c428     58 F7 BF FD | 	call	#__system___float_tointeger
1c42c     FD 24 0A F6 | 	mov	local04, result1 wz
1c430     10 FB 01 A6 |  if_e	mov	result1, local02
1c434     24 00 90 AD |  if_e	jmp	#LR__2731
1c438     3E 24 26 F4 | 	bith	local04, #62
1c43c     0F 24 62 FD | 	qexp	local04
1c440     10 13 02 F6 | 	mov	arg01, local02
1c444     18 14 62 FD | 	getqx	arg02
1c448     01 14 06 F1 | 	add	arg02, #1
1c44c     01 14 46 F0 | 	shr	arg02, #1
1c450     00 80 1F FF 
1c454     00 14 06 F1 | 	add	arg02, ##1056964608
1c458     60 F2 BF FD | 	call	#__system___float_mul
1c45c                 | LR__2731
1c45c     A7 F0 03 F6 | 	mov	ptra, fp
1c460     B2 00 A0 FD | 	call	#popregs_
1c464                 | __system____builtin_exp2f_ret
1c464     2D 00 64 FD | 	ret
1c468                 | 
1c468                 | __system____builtin_log2f
1c468     06 4A 05 F6 | 	mov	COUNT_, #6
1c46c     A8 00 A0 FD | 	call	#pushregs_
1c470     09 1F 02 F6 | 	mov	local01, arg01
1c474     09 21 0A F6 | 	mov	local02, arg01 wz
1c478     00 00 40 5F 
1c47c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c480     00 40 00 AF 
1c484     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c488     08 01 90 AD |  if_e	jmp	#LR__2744
1c48c     00 20 56 F2 | 	cmps	local02, #0 wc
1c490     00 E0 3F CF 
1c494     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c498     F8 00 90 CD |  if_b	jmp	#LR__2744
1c49c     0F 13 02 F6 | 	mov	arg01, local01
1c4a0     00 90 20 FF 
1c4a4     00 14 06 F6 | 	mov	arg02, ##1092616192
1c4a8     01 16 06 F6 | 	mov	arg03, #1
1c4ac     40 F6 BF FD | 	call	#__system___float_cmp
1c4b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4b4     4D 2A 20 AF 
1c4b8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c4bc     D4 00 90 AD |  if_e	jmp	#LR__2744
1c4c0     0F 13 02 F6 | 	mov	arg01, local01
1c4c4     FC 16 20 FF 
1c4c8     54 14 06 F6 | 	mov	arg02, ##1076754516
1c4cc     01 16 06 F6 | 	mov	arg03, #1
1c4d0     1C F6 BF FD | 	call	#__system___float_cmp
1c4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4d8     55 DC 1F AF 
1c4dc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c4e0     B0 00 90 AD |  if_e	jmp	#LR__2744
1c4e4     10 23 02 F6 | 	mov	local03, local02
1c4e8     17 22 46 F0 | 	shr	local03, #23
1c4ec     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c4f0     17 21 06 F4 | 	bitl	local02, #279
1c4f4     10 25 02 F6 | 	mov	local04, local02
1c4f8     FF 22 0E F2 | 	cmp	local03, #255 wz
1c4fc     1C 00 90 5D |  if_ne	jmp	#LR__2740
1c500     00 24 0E F2 | 	cmp	local04, #0 wz
1c504     00 C0 3F 5F 
1c508     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c50c     00 E0 3F AF 
1c510     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c514     13 FB 01 F6 | 	mov	result1, local05
1c518     78 00 90 FD | 	jmp	#LR__2744
1c51c                 | LR__2740
1c51c     00 22 0E F2 | 	cmp	local03, #0 wz
1c520     17 24 26 54 |  if_ne	bith	local04, #23
1c524     7F 22 86 51 |  if_ne	sub	local03, #127
1c528     28 00 90 5D |  if_ne	jmp	#LR__2743
1c52c     00 24 0E F2 | 	cmp	local04, #0 wz
1c530     00 40 00 AF 
1c534     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c538     58 00 90 AD |  if_e	jmp	#LR__2744
1c53c     7E 22 66 F6 | 	neg	local03, #126
1c540     97 08 48 FB | 	callpa	#(@LR__2742-@LR__2741)>>2,fcache_load_ptr_
1c544                 | LR__2741
1c544     17 24 2E F4 | 	testbn	local04, #23 wz
1c548     01 24 66 A0 |  if_e	shl	local04, #1
1c54c     01 22 06 A1 |  if_e	add	local03, #1
1c550     F0 FF 9F AD |  if_e	jmp	#LR__2741
1c554                 | LR__2742
1c554                 | LR__2743
1c554     0E 24 62 FD | 	qlog	local04
1c558     01 22 86 F1 | 	sub	local03, #1
1c55c     11 13 52 F6 | 	abs	arg01, local03 wc
1c560     1F 28 C6 C9 |  if_b	decod	local06, #31
1c564     00 28 06 36 |  if_ae	mov	local06, #0
1c568     18 26 62 FD | 	getqx	local05
1c56c     9B 26 06 F4 | 	bitl	local05, #155
1c570     08 26 06 F1 | 	add	local05, #8
1c574     04 26 46 F0 | 	shr	local05, #4
1c578     00 C0 1F FF 
1c57c     00 26 06 F1 | 	add	local05, ##1065353216
1c580     34 ED BF FD | 	call	#__system___float_fromuns
1c584     14 FB 61 F5 | 	xor	result1, local06
1c588     FD 14 02 F6 | 	mov	arg02, result1
1c58c     13 13 02 F6 | 	mov	arg01, local05
1c590     58 ED BF FD | 	call	#__system___float_add
1c594                 | LR__2744
1c594     A7 F0 03 F6 | 	mov	ptra, fp
1c598     B2 00 A0 FD | 	call	#popregs_
1c59c                 | __system____builtin_log2f_ret
1c59c     2D 00 64 FD | 	ret
1c5a0                 | 
1c5a0                 | __system____builtin_powf
1c5a0     04 4A 05 F6 | 	mov	COUNT_, #4
1c5a4     A8 00 A0 FD | 	call	#pushregs_
1c5a8     09 1F 02 F6 | 	mov	local01, arg01
1c5ac     0A 21 02 F6 | 	mov	local02, arg02
1c5b0     10 13 02 F6 | 	mov	arg01, local02
1c5b4     00 14 06 F6 | 	mov	arg02, #0
1c5b8     C8 F5 BF FD | 	call	#__system___float_tointeger
1c5bc     FD 22 02 F6 | 	mov	local03, result1
1c5c0     11 13 52 F6 | 	abs	arg01, local03 wc
1c5c4     1F 24 C6 C9 |  if_b	decod	local04, #31
1c5c8     00 24 06 36 |  if_ae	mov	local04, #0
1c5cc     E8 EC BF FD | 	call	#__system___float_fromuns
1c5d0     12 FB 61 F5 | 	xor	result1, local04
1c5d4     FD 12 02 F6 | 	mov	arg01, result1
1c5d8     10 15 02 F6 | 	mov	arg02, local02
1c5dc     01 16 06 F6 | 	mov	arg03, #1
1c5e0     0C F5 BF FD | 	call	#__system___float_cmp
1c5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5e8     18 00 90 5D |  if_ne	jmp	#LR__2750
1c5ec     00 C0 1F FF 
1c5f0     00 12 06 F6 | 	mov	arg01, ##1065353216
1c5f4     0F 15 02 F6 | 	mov	arg02, local01
1c5f8     11 17 02 F6 | 	mov	arg03, local03
1c5fc     68 00 B0 FD | 	call	#__system___float_pow_n
1c600     58 00 90 FD | 	jmp	#LR__2751
1c604                 | LR__2750
1c604     0F 13 02 F6 | 	mov	arg01, local01
1c608     00 14 06 F6 | 	mov	arg02, #0
1c60c     01 16 06 F6 | 	mov	arg03, #1
1c610     DC F4 BF FD | 	call	#__system___float_cmp
1c614     00 FA 55 F2 | 	cmps	result1, #0 wc
1c618     00 E0 3F CF 
1c61c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c620     38 00 90 CD |  if_b	jmp	#LR__2751
1c624     0F 13 02 F6 | 	mov	arg01, local01
1c628     00 14 06 F6 | 	mov	arg02, #0
1c62c     01 16 06 F6 | 	mov	arg03, #1
1c630     BC F4 BF FD | 	call	#__system___float_cmp
1c634     00 FA 0D F2 | 	cmp	result1, #0 wz
1c638     00 FA 05 A6 |  if_e	mov	result1, #0
1c63c     1C 00 90 AD |  if_e	jmp	#LR__2751
1c640     0F 13 02 F6 | 	mov	arg01, local01
1c644     20 FE BF FD | 	call	#__system____builtin_log2f
1c648     FD 12 02 F6 | 	mov	arg01, result1
1c64c     10 15 02 F6 | 	mov	arg02, local02
1c650     68 F0 BF FD | 	call	#__system___float_mul
1c654     FD 12 02 F6 | 	mov	arg01, result1
1c658     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c65c                 | LR__2751
1c65c     A7 F0 03 F6 | 	mov	ptra, fp
1c660     B2 00 A0 FD | 	call	#popregs_
1c664                 | __system____builtin_powf_ret
1c664     2D 00 64 FD | 	ret
1c668                 | 
1c668                 | __system___float_pow_n
1c668     05 4A 05 F6 | 	mov	COUNT_, #5
1c66c     A8 00 A0 FD | 	call	#pushregs_
1c670     09 1F 02 F6 | 	mov	local01, arg01
1c674     0A 21 02 F6 | 	mov	local02, arg02
1c678     0B 23 02 F6 | 	mov	local03, arg03
1c67c     00 22 56 F2 | 	cmps	local03, #0 wc
1c680     18 00 90 3D |  if_ae	jmp	#LR__2760
1c684     01 24 06 F6 | 	mov	local04, #1
1c688     11 23 62 F6 | 	neg	local03, local03
1c68c     00 22 56 F2 | 	cmps	local03, #0 wc
1c690     00 FA 05 C6 |  if_b	mov	result1, #0
1c694     94 00 90 CD |  if_b	jmp	#LR__2768
1c698     04 00 90 FD | 	jmp	#LR__2761
1c69c                 | LR__2760
1c69c     00 24 06 F6 | 	mov	local04, #0
1c6a0                 | LR__2761
1c6a0     00 C0 1F FF 
1c6a4     00 26 06 F6 | 	mov	local05, ##1065353216
1c6a8                 | LR__2762
1c6a8     01 22 56 F2 | 	cmps	local03, #1 wc
1c6ac     30 00 90 CD |  if_b	jmp	#LR__2764
1c6b0     01 22 CE F7 | 	test	local03, #1 wz
1c6b4     10 00 90 AD |  if_e	jmp	#LR__2763
1c6b8     13 13 02 F6 | 	mov	arg01, local05
1c6bc     10 15 02 F6 | 	mov	arg02, local02
1c6c0     F8 EF BF FD | 	call	#__system___float_mul
1c6c4     FD 26 02 F6 | 	mov	local05, result1
1c6c8                 | LR__2763
1c6c8     01 22 C6 F0 | 	sar	local03, #1
1c6cc     10 13 02 F6 | 	mov	arg01, local02
1c6d0     10 15 02 F6 | 	mov	arg02, local02
1c6d4     E4 EF BF FD | 	call	#__system___float_mul
1c6d8     FD 20 02 F6 | 	mov	local02, result1
1c6dc     C8 FF 9F FD | 	jmp	#LR__2762
1c6e0                 | LR__2764
1c6e0     00 24 0E F2 | 	cmp	local04, #0 wz
1c6e4     14 00 90 AD |  if_e	jmp	#LR__2765
1c6e8     0F 13 02 F6 | 	mov	arg01, local01
1c6ec     13 15 02 F6 | 	mov	arg02, local05
1c6f0     CC F1 BF FD | 	call	#__system___float_div
1c6f4     FD 26 02 F6 | 	mov	local05, result1
1c6f8     2C 00 90 FD | 	jmp	#LR__2767
1c6fc                 | LR__2765
1c6fc     0F 13 02 F6 | 	mov	arg01, local01
1c700     00 C0 1F FF 
1c704     00 14 06 F6 | 	mov	arg02, ##1065353216
1c708     01 16 06 F6 | 	mov	arg03, #1
1c70c     E0 F3 BF FD | 	call	#__system___float_cmp
1c710     00 FA 0D F2 | 	cmp	result1, #0 wz
1c714     10 00 90 AD |  if_e	jmp	#LR__2766
1c718     0F 13 02 F6 | 	mov	arg01, local01
1c71c     13 15 02 F6 | 	mov	arg02, local05
1c720     98 EF BF FD | 	call	#__system___float_mul
1c724     FD 26 02 F6 | 	mov	local05, result1
1c728                 | LR__2766
1c728                 | LR__2767
1c728     13 FB 01 F6 | 	mov	result1, local05
1c72c                 | LR__2768
1c72c     A7 F0 03 F6 | 	mov	ptra, fp
1c730     B2 00 A0 FD | 	call	#popregs_
1c734                 | __system___float_pow_n_ret
1c734     2D 00 64 FD | 	ret
1c738                 | 
1c738                 | __system___gc_ptrs
1c738     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c73c     00 03 02 F6 | 	mov	_var02, _var01
1c740     76 01 00 FF 
1c744     F8 03 06 F1 | 	add	_var02, ##191992
1c748     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c74c     74 00 90 5D |  if_ne	jmp	#LR__2770
1c750     01 FD 01 F6 | 	mov	result2, _var02
1c754     00 FD 81 F1 | 	sub	result2, _var01
1c758     00 03 58 FC | 	wrword	#1, _var01
1c75c     00 FB 01 F6 | 	mov	result1, _var01
1c760     02 FA 05 F1 | 	add	result1, #2
1c764     36 00 80 FF 
1c768     FD 20 59 FC | 	wrword	##27792, result1
1c76c     00 FB 01 F6 | 	mov	result1, _var01
1c770     04 FA 05 F1 | 	add	result1, #4
1c774     FD 00 58 FC | 	wrword	#0, result1
1c778     00 FB 01 F6 | 	mov	result1, _var01
1c77c     06 FA 05 F1 | 	add	result1, #6
1c780     FD 02 58 FC | 	wrword	#1, result1
1c784     10 00 06 F1 | 	add	_var01, #16
1c788     FE FC 51 F6 | 	abs	result2, result2 wc
1c78c     04 FC 45 F0 | 	shr	result2, #4
1c790     FE FC 81 F6 | 	negc	result2, result2
1c794     00 FD 51 FC | 	wrword	result2, _var01
1c798     00 FD 01 F6 | 	mov	result2, _var01
1c79c     02 FC 05 F1 | 	add	result2, #2
1c7a0     36 00 80 FF 
1c7a4     FE 1E 59 FC | 	wrword	##27791, result2
1c7a8     00 FD 01 F6 | 	mov	result2, _var01
1c7ac     04 FC 05 F1 | 	add	result2, #4
1c7b0     FE 00 58 FC | 	wrword	#0, result2
1c7b4     00 FD 01 F6 | 	mov	result2, _var01
1c7b8     06 FC 05 F1 | 	add	result2, #6
1c7bc     FE 00 58 FC | 	wrword	#0, result2
1c7c0     10 00 86 F1 | 	sub	_var01, #16
1c7c4                 | LR__2770
1c7c4     00 FB 01 F6 | 	mov	result1, _var01
1c7c8     01 FD 01 F6 | 	mov	result2, _var02
1c7cc                 | __system___gc_ptrs_ret
1c7cc     2D 00 64 FD | 	ret
1c7d0                 | 
1c7d0                 | __system___gc_tryalloc
1c7d0     0B 4A 05 F6 | 	mov	COUNT_, #11
1c7d4     A8 00 A0 FD | 	call	#pushregs_
1c7d8     09 1F 02 F6 | 	mov	local01, arg01
1c7dc     0A 21 02 F6 | 	mov	local02, arg02
1c7e0     54 FF BF FD | 	call	#__system___gc_ptrs
1c7e4     FD 22 02 F6 | 	mov	local03, result1
1c7e8     FE 24 02 F6 | 	mov	local04, result2
1c7ec     11 27 02 F6 | 	mov	local05, local03
1c7f0     00 28 06 F6 | 	mov	local06, #0
1c7f4     97 1E 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1c7f8                 | LR__2780
1c7f8     13 2B 02 F6 | 	mov	local07, local05
1c7fc     06 26 06 F1 | 	add	local05, #6
1c800     13 15 EA FA | 	rdword	arg02, local05 wz
1c804     11 13 02 F6 | 	mov	arg01, local03
1c808     00 FA 05 A6 |  if_e	mov	result1, #0
1c80c     04 14 66 50 |  if_ne	shl	arg02, #4
1c810     0A 13 02 51 |  if_ne	add	arg01, arg02
1c814     09 FB 01 56 |  if_ne	mov	result1, arg01
1c818     FD 26 0A F6 | 	mov	local05, result1 wz
1c81c     13 29 E2 5A |  if_ne	rdword	local06, local05
1c820     00 26 0E F2 | 	cmp	local05, #0 wz
1c824     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c828     08 00 90 1D |  if_a	jmp	#LR__2782
1c82c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c830     C4 FF 9F 1D |  if_a	jmp	#LR__2780
1c834                 | LR__2781
1c834                 | LR__2782
1c834     00 26 0E F2 | 	cmp	local05, #0 wz
1c838     13 FB 01 A6 |  if_e	mov	result1, local05
1c83c     3C 01 90 AD |  if_e	jmp	#LR__2785
1c840     13 FD 01 F6 | 	mov	result2, local05
1c844     06 FC 05 F1 | 	add	result2, #6
1c848     FE 2C E2 FA | 	rdword	local08, result2
1c84c     14 1F 52 F2 | 	cmps	local01, local06 wc
1c850     C0 00 90 3D |  if_ae	jmp	#LR__2784
1c854     13 1F 52 FC | 	wrword	local01, local05
1c858     13 13 02 F6 | 	mov	arg01, local05
1c85c     0F 2D 02 F6 | 	mov	local08, local01
1c860     04 2C 66 F0 | 	shl	local08, #4
1c864     16 13 02 F1 | 	add	arg01, local08
1c868     0F 29 82 F1 | 	sub	local06, local01
1c86c     09 29 52 FC | 	wrword	local06, arg01
1c870     09 2D 02 F6 | 	mov	local08, arg01
1c874     02 2C 06 F1 | 	add	local08, #2
1c878     36 00 80 FF 
1c87c     16 1F 59 FC | 	wrword	##27791, local08
1c880     13 15 0A F6 | 	mov	arg02, local05 wz
1c884     00 FA 05 A6 |  if_e	mov	result1, #0
1c888     11 15 82 51 |  if_ne	sub	arg02, local03
1c88c     04 14 46 50 |  if_ne	shr	arg02, #4
1c890     0A FB 01 56 |  if_ne	mov	result1, arg02
1c894     09 2D 02 F6 | 	mov	local08, arg01
1c898     04 2C 06 F1 | 	add	local08, #4
1c89c     16 FB 51 FC | 	wrword	result1, local08
1c8a0     13 2D 02 F6 | 	mov	local08, local05
1c8a4     06 2C 06 F1 | 	add	local08, #6
1c8a8     09 15 02 F6 | 	mov	arg02, arg01
1c8ac     16 2D E2 FA | 	rdword	local08, local08
1c8b0     06 14 06 F1 | 	add	arg02, #6
1c8b4     0A 2D 52 FC | 	wrword	local08, arg02
1c8b8     09 2F 02 F6 | 	mov	local09, arg01
1c8bc     17 15 0A F6 | 	mov	arg02, local09 wz
1c8c0     00 FA 05 A6 |  if_e	mov	result1, #0
1c8c4     11 15 82 51 |  if_ne	sub	arg02, local03
1c8c8     04 14 46 50 |  if_ne	shr	arg02, #4
1c8cc     0A FB 01 56 |  if_ne	mov	result1, arg02
1c8d0     FD 2C 02 F6 | 	mov	local08, result1
1c8d4     09 31 EA FA | 	rdword	local10, arg01 wz
1c8d8     00 FA 05 A6 |  if_e	mov	result1, #0
1c8dc     04 30 66 50 |  if_ne	shl	local10, #4
1c8e0     18 13 02 51 |  if_ne	add	arg01, local10
1c8e4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c8e8     FD 32 0A F6 | 	mov	local11, result1 wz
1c8ec     24 00 90 AD |  if_e	jmp	#LR__2783
1c8f0     12 33 52 F2 | 	cmps	local11, local04 wc
1c8f4     1C 00 90 3D |  if_ae	jmp	#LR__2783
1c8f8     17 15 0A F6 | 	mov	arg02, local09 wz
1c8fc     00 FA 05 A6 |  if_e	mov	result1, #0
1c900     11 15 82 51 |  if_ne	sub	arg02, local03
1c904     04 14 46 50 |  if_ne	shr	arg02, #4
1c908     0A FB 01 56 |  if_ne	mov	result1, arg02
1c90c     04 32 06 F1 | 	add	local11, #4
1c910     19 FB 51 FC | 	wrword	result1, local11
1c914                 | LR__2783
1c914                 | LR__2784
1c914     06 2A 06 F1 | 	add	local07, #6
1c918     15 2D 52 FC | 	wrword	local08, local07
1c91c     36 00 00 FF 
1c920     80 2E 06 F6 | 	mov	local09, ##27776
1c924     10 2F 42 F5 | 	or	local09, local02
1c928     00 FA 05 F6 | 	mov	result1, #0
1c92c     01 FA 61 FD | 	cogid	result1
1c930     FD 2E 42 F5 | 	or	local09, result1
1c934     13 33 02 F6 | 	mov	local11, local05
1c938     02 32 06 F1 | 	add	local11, #2
1c93c     19 2F 52 FC | 	wrword	local09, local11
1c940     11 2F 02 F6 | 	mov	local09, local03
1c944     08 2E 06 F1 | 	add	local09, #8
1c948     13 33 02 F6 | 	mov	local11, local05
1c94c     17 2F E2 FA | 	rdword	local09, local09
1c950     06 32 06 F1 | 	add	local11, #6
1c954     19 2F 52 FC | 	wrword	local09, local11
1c958     13 15 0A F6 | 	mov	arg02, local05 wz
1c95c     00 FA 05 A6 |  if_e	mov	result1, #0
1c960     11 15 82 51 |  if_ne	sub	arg02, local03
1c964     04 14 46 50 |  if_ne	shr	arg02, #4
1c968     0A FB 01 56 |  if_ne	mov	result1, arg02
1c96c     08 22 06 F1 | 	add	local03, #8
1c970     11 FB 51 FC | 	wrword	result1, local03
1c974     08 26 06 F1 | 	add	local05, #8
1c978     13 FB 01 F6 | 	mov	result1, local05
1c97c                 | LR__2785
1c97c     A7 F0 03 F6 | 	mov	ptra, fp
1c980     B2 00 A0 FD | 	call	#popregs_
1c984                 | __system___gc_tryalloc_ret
1c984     2D 00 64 FD | 	ret
1c988                 | 
1c988                 | __system___gc_alloc_managed
1c988     01 4A 05 F6 | 	mov	COUNT_, #1
1c98c     A8 00 A0 FD | 	call	#pushregs_
1c990     09 1F 02 F6 | 	mov	local01, arg01
1c994     00 14 06 F6 | 	mov	arg02, #0
1c998     1C 00 B0 FD | 	call	#__system___gc_doalloc
1c99c     FD 14 0A F6 | 	mov	arg02, result1 wz
1c9a0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1c9a4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1c9a8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1c9ac     A7 F0 03 F6 | 	mov	ptra, fp
1c9b0     B2 00 A0 FD | 	call	#popregs_
1c9b4                 | __system___gc_alloc_managed_ret
1c9b4     2D 00 64 FD | 	ret
1c9b8                 | 
1c9b8                 | __system___gc_doalloc
1c9b8     06 4A 05 F6 | 	mov	COUNT_, #6
1c9bc     A8 00 A0 FD | 	call	#pushregs_
1c9c0     09 1F 0A F6 | 	mov	local01, arg01 wz
1c9c4     0A 21 02 F6 | 	mov	local02, arg02
1c9c8     00 FA 05 A6 |  if_e	mov	result1, #0
1c9cc     8C 00 90 AD |  if_e	jmp	#LR__2797
1c9d0     17 1E 06 F1 | 	add	local01, #23
1c9d4     0F 1E 26 F5 | 	andn	local01, #15
1c9d8     04 1E 46 F0 | 	shr	local01, #4
1c9dc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c9e0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c9e4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c9e8     E8 C1 BF FD | 	call	#__system___lockmem
1c9ec     0F 13 02 F6 | 	mov	arg01, local01
1c9f0     10 15 02 F6 | 	mov	arg02, local02
1c9f4     D8 FD BF FD | 	call	#__system___gc_tryalloc
1c9f8     FD 22 0A F6 | 	mov	local03, result1 wz
1c9fc     14 00 90 5D |  if_ne	jmp	#LR__2790
1ca00     70 03 B0 FD | 	call	#__system___gc_docollect
1ca04     0F 13 02 F6 | 	mov	arg01, local01
1ca08     10 15 02 F6 | 	mov	arg02, local02
1ca0c     C0 FD BF FD | 	call	#__system___gc_tryalloc
1ca10     FD 22 02 F6 | 	mov	local03, result1
1ca14                 | LR__2790
1ca14     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1ca18     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ca1c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1ca20     09 01 68 FC | 	wrlong	#0, arg01
1ca24     00 22 0E F2 | 	cmp	local03, #0 wz
1ca28     2C 00 90 AD |  if_e	jmp	#LR__2796
1ca2c     04 1E 66 F0 | 	shl	local01, #4
1ca30     08 1E 86 F1 | 	sub	local01, #8
1ca34     0F 25 52 F6 | 	abs	local04, local01 wc
1ca38     02 24 46 F0 | 	shr	local04, #2
1ca3c     12 27 8A F6 | 	negc	local05, local04 wz
1ca40     11 29 02 F6 | 	mov	local06, local03
1ca44     10 00 90 AD |  if_e	jmp	#LR__2795
1ca48     97 06 48 FB | 	callpa	#(@LR__2793-@LR__2791)>>2,fcache_load_ptr_
1ca4c                 | LR__2791
1ca4c     13 05 D8 FC | 	rep	@LR__2794, local05
1ca50                 | LR__2792
1ca50     14 01 68 FC | 	wrlong	#0, local06
1ca54     04 28 06 F1 | 	add	local06, #4
1ca58                 | LR__2793
1ca58                 | LR__2794
1ca58                 | LR__2795
1ca58                 | LR__2796
1ca58     11 FB 01 F6 | 	mov	result1, local03
1ca5c                 | LR__2797
1ca5c     A7 F0 03 F6 | 	mov	ptra, fp
1ca60     B2 00 A0 FD | 	call	#popregs_
1ca64                 | __system___gc_doalloc_ret
1ca64     2D 00 64 FD | 	ret
1ca68                 | 
1ca68                 | __system___gc_isvalidptr
1ca68     F8 16 06 F4 | 	bitl	arg03, #248
1ca6c     08 16 86 F1 | 	sub	arg03, #8
1ca70     09 17 52 F2 | 	cmps	arg03, arg01 wc
1ca74     08 00 90 CD |  if_b	jmp	#LR__2800
1ca78     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1ca7c     08 00 90 CD |  if_b	jmp	#LR__2801
1ca80                 | LR__2800
1ca80     00 FA 05 F6 | 	mov	result1, #0
1ca84     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1ca88                 | LR__2801
1ca88     0B 01 02 F6 | 	mov	_var01, arg03
1ca8c     09 01 62 F5 | 	xor	_var01, arg01
1ca90     0F 00 CE F7 | 	test	_var01, #15 wz
1ca94     00 FA 05 56 |  if_ne	mov	result1, #0
1ca98     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1ca9c     0B 01 02 F6 | 	mov	_var01, arg03
1caa0     02 00 06 F1 | 	add	_var01, #2
1caa4     00 01 E2 FA | 	rdword	_var01, _var01
1caa8     7F 00 00 FF 
1caac     C0 01 06 F5 | 	and	_var01, ##65472
1cab0     36 00 00 FF 
1cab4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1cab8     00 FA 05 56 |  if_ne	mov	result1, #0
1cabc     0B FB 01 A6 |  if_e	mov	result1, arg03
1cac0                 | __system___gc_isvalidptr_ret
1cac0     2D 00 64 FD | 	ret
1cac4                 | 
1cac4                 | __system___gc_free
1cac4     09 17 02 F6 | 	mov	arg03, arg01
1cac8     6C FC BF FD | 	call	#__system___gc_ptrs
1cacc     FD 12 02 F6 | 	mov	arg01, result1
1cad0     FE 14 02 F6 | 	mov	arg02, result2
1cad4     90 FF BF FD | 	call	#__system___gc_isvalidptr
1cad8     FD 14 0A F6 | 	mov	arg02, result1 wz
1cadc     28 00 90 AD |  if_e	jmp	#LR__2810
1cae0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cae4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cae8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1caec     E4 C0 BF FD | 	call	#__system___lockmem
1caf0     0A 13 02 F6 | 	mov	arg01, arg02
1caf4     14 00 B0 FD | 	call	#__system___gc_dofree
1caf8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1cafc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cb00     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1cb04     09 01 68 FC | 	wrlong	#0, arg01
1cb08                 | LR__2810
1cb08                 | __system___gc_free_ret
1cb08     2D 00 64 FD | 	ret
1cb0c                 | 
1cb0c                 | __system___gc_dofree
1cb0c     06 4A 05 F6 | 	mov	COUNT_, #6
1cb10     A8 00 A0 FD | 	call	#pushregs_
1cb14     09 1F 02 F6 | 	mov	local01, arg01
1cb18     1C FC BF FD | 	call	#__system___gc_ptrs
1cb1c     FD 20 02 F6 | 	mov	local02, result1
1cb20     FE 22 02 F6 | 	mov	local03, result2
1cb24     0F 15 02 F6 | 	mov	arg02, local01
1cb28     02 14 06 F1 | 	add	arg02, #2
1cb2c     36 00 80 FF 
1cb30     0A 1F 59 FC | 	wrword	##27791, arg02
1cb34     0F 25 02 F6 | 	mov	local04, local01
1cb38     0F 13 02 F6 | 	mov	arg01, local01
1cb3c     09 27 EA FA | 	rdword	local05, arg01 wz
1cb40     00 FA 05 A6 |  if_e	mov	result1, #0
1cb44     04 26 66 50 |  if_ne	shl	local05, #4
1cb48     13 13 02 51 |  if_ne	add	arg01, local05
1cb4c     09 FB 01 56 |  if_ne	mov	result1, arg01
1cb50     FD 28 02 F6 | 	mov	local06, result1
1cb54     97 24 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
1cb58                 | LR__2820
1cb58     04 24 06 F1 | 	add	local04, #4
1cb5c     12 15 EA FA | 	rdword	arg02, local04 wz
1cb60     10 13 02 F6 | 	mov	arg01, local02
1cb64     00 FA 05 A6 |  if_e	mov	result1, #0
1cb68     04 14 66 50 |  if_ne	shl	arg02, #4
1cb6c     0A 13 02 51 |  if_ne	add	arg01, arg02
1cb70     09 FB 01 56 |  if_ne	mov	result1, arg01
1cb74     FD 24 0A F6 | 	mov	local04, result1 wz
1cb78     24 00 90 AD |  if_e	jmp	#LR__2822
1cb7c     12 13 02 F6 | 	mov	arg01, local04
1cb80     00 FA 05 F6 | 	mov	result1, #0
1cb84     02 12 06 F1 | 	add	arg01, #2
1cb88     09 13 E2 FA | 	rdword	arg01, arg01
1cb8c     36 00 00 FF 
1cb90     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cb94     01 FA 65 A6 |  if_e	neg	result1, #1
1cb98     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb9c     B8 FF 9F AD |  if_e	jmp	#LR__2820
1cba0                 | LR__2821
1cba0                 | LR__2822
1cba0     00 24 0E F2 | 	cmp	local04, #0 wz
1cba4     10 25 02 A6 |  if_e	mov	local04, local02
1cba8     12 15 02 F6 | 	mov	arg02, local04
1cbac     06 14 06 F1 | 	add	arg02, #6
1cbb0     0F 13 02 F6 | 	mov	arg01, local01
1cbb4     0A 15 E2 FA | 	rdword	arg02, arg02
1cbb8     06 12 06 F1 | 	add	arg01, #6
1cbbc     09 15 52 FC | 	wrword	arg02, arg01
1cbc0     0F 15 0A F6 | 	mov	arg02, local01 wz
1cbc4     00 FA 05 A6 |  if_e	mov	result1, #0
1cbc8     10 15 82 51 |  if_ne	sub	arg02, local02
1cbcc     04 14 46 50 |  if_ne	shr	arg02, #4
1cbd0     0A FB 01 56 |  if_ne	mov	result1, arg02
1cbd4     12 15 02 F6 | 	mov	arg02, local04
1cbd8     06 14 06 F1 | 	add	arg02, #6
1cbdc     0A FB 51 FC | 	wrword	result1, arg02
1cbe0     10 25 0A F2 | 	cmp	local04, local02 wz
1cbe4     A4 00 90 AD |  if_e	jmp	#LR__2825
1cbe8     12 13 02 F6 | 	mov	arg01, local04
1cbec     09 27 EA FA | 	rdword	local05, arg01 wz
1cbf0     00 FA 05 A6 |  if_e	mov	result1, #0
1cbf4     04 26 66 50 |  if_ne	shl	local05, #4
1cbf8     13 13 02 51 |  if_ne	add	arg01, local05
1cbfc     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc00     0F FB 09 F2 | 	cmp	result1, local01 wz
1cc04     84 00 90 5D |  if_ne	jmp	#LR__2824
1cc08     12 29 E2 FA | 	rdword	local06, local04
1cc0c     0F 15 E2 FA | 	rdword	arg02, local01
1cc10     0A 29 02 F1 | 	add	local06, arg02
1cc14     12 29 52 FC | 	wrword	local06, local04
1cc18     0F 29 02 F6 | 	mov	local06, local01
1cc1c     02 28 06 F1 | 	add	local06, #2
1cc20     14 01 58 FC | 	wrword	#0, local06
1cc24     0F 13 02 F6 | 	mov	arg01, local01
1cc28     09 27 EA FA | 	rdword	local05, arg01 wz
1cc2c     00 FA 05 A6 |  if_e	mov	result1, #0
1cc30     04 26 66 50 |  if_ne	shl	local05, #4
1cc34     13 13 02 51 |  if_ne	add	arg01, local05
1cc38     09 FB 01 56 |  if_ne	mov	result1, arg01
1cc3c     FD 28 02 F6 | 	mov	local06, result1
1cc40     11 29 52 F2 | 	cmps	local06, local03 wc
1cc44     20 00 90 3D |  if_ae	jmp	#LR__2823
1cc48     12 15 0A F6 | 	mov	arg02, local04 wz
1cc4c     00 FA 05 A6 |  if_e	mov	result1, #0
1cc50     10 15 82 51 |  if_ne	sub	arg02, local02
1cc54     04 14 46 50 |  if_ne	shr	arg02, #4
1cc58     0A FB 01 56 |  if_ne	mov	result1, arg02
1cc5c     14 15 02 F6 | 	mov	arg02, local06
1cc60     04 14 06 F1 | 	add	arg02, #4
1cc64     0A FB 51 FC | 	wrword	result1, arg02
1cc68                 | LR__2823
1cc68     0F 15 02 F6 | 	mov	arg02, local01
1cc6c     06 14 06 F1 | 	add	arg02, #6
1cc70     12 FD 01 F6 | 	mov	result2, local04
1cc74     0A 15 E2 FA | 	rdword	arg02, arg02
1cc78     06 FC 05 F1 | 	add	result2, #6
1cc7c     FE 14 52 FC | 	wrword	arg02, result2
1cc80     06 1E 06 F1 | 	add	local01, #6
1cc84     0F 01 58 FC | 	wrword	#0, local01
1cc88     12 1F 02 F6 | 	mov	local01, local04
1cc8c                 | LR__2824
1cc8c                 | LR__2825
1cc8c     0F 13 02 F6 | 	mov	arg01, local01
1cc90     09 27 EA FA | 	rdword	local05, arg01 wz
1cc94     00 FA 05 A6 |  if_e	mov	result1, #0
1cc98     04 26 66 50 |  if_ne	shl	local05, #4
1cc9c     13 13 02 51 |  if_ne	add	arg01, local05
1cca0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cca4     FD 14 0A F6 | 	mov	arg02, result1 wz
1cca8     B8 00 90 AD |  if_e	jmp	#LR__2827
1ccac     11 15 52 F2 | 	cmps	arg02, local03 wc
1ccb0     B0 00 90 3D |  if_ae	jmp	#LR__2827
1ccb4     0A 13 02 F6 | 	mov	arg01, arg02
1ccb8     00 FA 05 F6 | 	mov	result1, #0
1ccbc     02 12 06 F1 | 	add	arg01, #2
1ccc0     09 13 E2 FA | 	rdword	arg01, arg01
1ccc4     36 00 00 FF 
1ccc8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cccc     01 FA 65 A6 |  if_e	neg	result1, #1
1ccd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccd4     8C 00 90 AD |  if_e	jmp	#LR__2827
1ccd8     0F 25 02 F6 | 	mov	local04, local01
1ccdc     12 29 E2 FA | 	rdword	local06, local04
1cce0     0A 13 02 F6 | 	mov	arg01, arg02
1cce4     09 1F E2 FA | 	rdword	local01, arg01
1cce8     0F 29 02 F1 | 	add	local06, local01
1ccec     12 29 52 FC | 	wrword	local06, local04
1ccf0     09 29 02 F6 | 	mov	local06, arg01
1ccf4     06 28 06 F1 | 	add	local06, #6
1ccf8     12 1F 02 F6 | 	mov	local01, local04
1ccfc     14 29 E2 FA | 	rdword	local06, local06
1cd00     06 1E 06 F1 | 	add	local01, #6
1cd04     0F 29 52 FC | 	wrword	local06, local01
1cd08     09 29 02 F6 | 	mov	local06, arg01
1cd0c     02 28 06 F1 | 	add	local06, #2
1cd10     14 55 59 FC | 	wrword	#170, local06
1cd14     09 29 02 F6 | 	mov	local06, arg01
1cd18     06 28 06 F1 | 	add	local06, #6
1cd1c     14 01 58 FC | 	wrword	#0, local06
1cd20     09 27 EA FA | 	rdword	local05, arg01 wz
1cd24     00 FA 05 A6 |  if_e	mov	result1, #0
1cd28     04 26 66 50 |  if_ne	shl	local05, #4
1cd2c     13 13 02 51 |  if_ne	add	arg01, local05
1cd30     09 FB 01 56 |  if_ne	mov	result1, arg01
1cd34     FD 28 0A F6 | 	mov	local06, result1 wz
1cd38     28 00 90 AD |  if_e	jmp	#LR__2826
1cd3c     11 29 52 F2 | 	cmps	local06, local03 wc
1cd40     20 00 90 3D |  if_ae	jmp	#LR__2826
1cd44     12 15 0A F6 | 	mov	arg02, local04 wz
1cd48     00 FA 05 A6 |  if_e	mov	result1, #0
1cd4c     10 15 82 51 |  if_ne	sub	arg02, local02
1cd50     04 14 46 50 |  if_ne	shr	arg02, #4
1cd54     0A FB 01 56 |  if_ne	mov	result1, arg02
1cd58     14 25 02 F6 | 	mov	local04, local06
1cd5c     04 24 06 F1 | 	add	local04, #4
1cd60     12 FB 51 FC | 	wrword	result1, local04
1cd64                 | LR__2826
1cd64                 | LR__2827
1cd64     14 FB 01 F6 | 	mov	result1, local06
1cd68     A7 F0 03 F6 | 	mov	ptra, fp
1cd6c     B2 00 A0 FD | 	call	#popregs_
1cd70                 | __system___gc_dofree_ret
1cd70     2D 00 64 FD | 	ret
1cd74                 | 
1cd74                 | __system___gc_docollect
1cd74     05 4A 05 F6 | 	mov	COUNT_, #5
1cd78     A8 00 A0 FD | 	call	#pushregs_
1cd7c     B8 F9 BF FD | 	call	#__system___gc_ptrs
1cd80     FE 1E 02 F6 | 	mov	local01, result2
1cd84     FD 20 02 F6 | 	mov	local02, result1
1cd88     10 13 02 F6 | 	mov	arg01, local02
1cd8c     09 23 EA FA | 	rdword	local03, arg01 wz
1cd90     00 FA 05 A6 |  if_e	mov	result1, #0
1cd94     04 22 66 50 |  if_ne	shl	local03, #4
1cd98     11 13 02 51 |  if_ne	add	arg01, local03
1cd9c     09 FB 01 56 |  if_ne	mov	result1, arg01
1cda0     FD 24 0A F6 | 	mov	local04, result1 wz
1cda4     00 FA 05 F6 | 	mov	result1, #0
1cda8     01 FA 61 FD | 	cogid	result1
1cdac     FD 26 02 F6 | 	mov	local05, result1
1cdb0     48 00 90 AD |  if_e	jmp	#LR__2832
1cdb4     97 22 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
1cdb8                 | LR__2830
1cdb8     0F 25 52 F2 | 	cmps	local04, local01 wc
1cdbc     3C 00 90 3D |  if_ae	jmp	#LR__2832
1cdc0     12 15 02 F6 | 	mov	arg02, local04
1cdc4     02 14 06 F1 | 	add	arg02, #2
1cdc8     0A 15 E2 FA | 	rdword	arg02, arg02
1cdcc     20 14 26 F5 | 	andn	arg02, #32
1cdd0     12 13 02 F6 | 	mov	arg01, local04
1cdd4     02 12 06 F1 | 	add	arg01, #2
1cdd8     09 15 52 FC | 	wrword	arg02, arg01
1cddc     12 13 02 F6 | 	mov	arg01, local04
1cde0     09 23 EA FA | 	rdword	local03, arg01 wz
1cde4     00 FA 05 A6 |  if_e	mov	result1, #0
1cde8     04 22 66 50 |  if_ne	shl	local03, #4
1cdec     11 13 02 51 |  if_ne	add	arg01, local03
1cdf0     09 FB 01 56 |  if_ne	mov	result1, arg01
1cdf4     FD 24 0A F6 | 	mov	local04, result1 wz
1cdf8     BC FF 9F 5D |  if_ne	jmp	#LR__2830
1cdfc                 | LR__2831
1cdfc                 | LR__2832
1cdfc     00 22 06 F6 | 	mov	local03, #0
1ce00     00 12 06 F6 | 	mov	arg01, #0
1ce04     A4 BD BF FD | 	call	#__system____topofstack
1ce08     FD 14 02 F6 | 	mov	arg02, result1
1ce0c     11 13 02 F6 | 	mov	arg01, local03
1ce10     90 00 B0 FD | 	call	#__system___gc_markhub
1ce14     1C 01 B0 FD | 	call	#__system___gc_markcog
1ce18     10 13 02 F6 | 	mov	arg01, local02
1ce1c     09 23 EA FA | 	rdword	local03, arg01 wz
1ce20     00 FA 05 A6 |  if_e	mov	result1, #0
1ce24     04 22 66 50 |  if_ne	shl	local03, #4
1ce28     11 13 02 51 |  if_ne	add	arg01, local03
1ce2c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce30     FD 20 0A F6 | 	mov	local02, result1 wz
1ce34     60 00 90 AD |  if_e	jmp	#LR__2836
1ce38                 | LR__2833
1ce38     10 25 02 F6 | 	mov	local04, local02
1ce3c     12 13 02 F6 | 	mov	arg01, local04
1ce40     09 23 EA FA | 	rdword	local03, arg01 wz
1ce44     00 FA 05 A6 |  if_e	mov	result1, #0
1ce48     04 22 66 50 |  if_ne	shl	local03, #4
1ce4c     11 13 02 51 |  if_ne	add	arg01, local03
1ce50     09 FB 01 56 |  if_ne	mov	result1, arg01
1ce54     FD 20 02 F6 | 	mov	local02, result1
1ce58     12 15 02 F6 | 	mov	arg02, local04
1ce5c     02 14 06 F1 | 	add	arg02, #2
1ce60     0A 15 E2 FA | 	rdword	arg02, arg02
1ce64     20 14 CE F7 | 	test	arg02, #32 wz
1ce68     10 14 CE A7 |  if_e	test	arg02, #16 wz
1ce6c     1C 00 90 5D |  if_ne	jmp	#LR__2835
1ce70     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1ce74     13 15 0A F2 | 	cmp	arg02, local05 wz
1ce78     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1ce7c     0C 00 90 5D |  if_ne	jmp	#LR__2834
1ce80     12 13 02 F6 | 	mov	arg01, local04
1ce84     84 FC BF FD | 	call	#__system___gc_dofree
1ce88     FD 20 02 F6 | 	mov	local02, result1
1ce8c                 | LR__2834
1ce8c                 | LR__2835
1ce8c     00 20 0E F2 | 	cmp	local02, #0 wz
1ce90     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1ce94     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2833
1ce98                 | LR__2836
1ce98     A7 F0 03 F6 | 	mov	ptra, fp
1ce9c     B2 00 A0 FD | 	call	#popregs_
1cea0                 | __system___gc_docollect_ret
1cea0     2D 00 64 FD | 	ret
1cea4                 | 
1cea4                 | __system___gc_markhub
1cea4     04 4A 05 F6 | 	mov	COUNT_, #4
1cea8     A8 00 A0 FD | 	call	#pushregs_
1ceac     09 1F 02 F6 | 	mov	local01, arg01
1ceb0     0A 21 02 F6 | 	mov	local02, arg02
1ceb4     80 F8 BF FD | 	call	#__system___gc_ptrs
1ceb8     FD 22 02 F6 | 	mov	local03, result1
1cebc     FE 24 02 F6 | 	mov	local04, result2
1cec0                 | LR__2840
1cec0     10 1F 52 F2 | 	cmps	local01, local02 wc
1cec4     60 00 90 3D |  if_ae	jmp	#LR__2841
1cec8     0F 17 02 FB | 	rdlong	arg03, local01
1cecc     04 1E 06 F1 | 	add	local01, #4
1ced0     12 15 02 F6 | 	mov	arg02, local04
1ced4     11 13 02 F6 | 	mov	arg01, local03
1ced8     8C FB BF FD | 	call	#__system___gc_isvalidptr
1cedc     FD 16 0A F6 | 	mov	arg03, result1 wz
1cee0     DC FF 9F AD |  if_e	jmp	#LR__2840
1cee4     0B 13 02 F6 | 	mov	arg01, arg03
1cee8     00 FA 05 F6 | 	mov	result1, #0
1ceec     02 12 06 F1 | 	add	arg01, #2
1cef0     09 13 E2 FA | 	rdword	arg01, arg01
1cef4     36 00 00 FF 
1cef8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1cefc     01 FA 65 A6 |  if_e	neg	result1, #1
1cf00     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf04     B8 FF 9F 5D |  if_ne	jmp	#LR__2840
1cf08     0B FD 01 F6 | 	mov	result2, arg03
1cf0c     02 FC 05 F1 | 	add	result2, #2
1cf10     FE FC E1 FA | 	rdword	result2, result2
1cf14     0F FC 25 F5 | 	andn	result2, #15
1cf18     2E FC 45 F5 | 	or	result2, #46
1cf1c     02 16 06 F1 | 	add	arg03, #2
1cf20     0B FD 51 FC | 	wrword	result2, arg03
1cf24     98 FF 9F FD | 	jmp	#LR__2840
1cf28                 | LR__2841
1cf28     A7 F0 03 F6 | 	mov	ptra, fp
1cf2c     B2 00 A0 FD | 	call	#popregs_
1cf30                 | __system___gc_markhub_ret
1cf30     2D 00 64 FD | 	ret
1cf34                 | 
1cf34                 | __system___gc_markcog
1cf34     04 4A 05 F6 | 	mov	COUNT_, #4
1cf38     A8 00 A0 FD | 	call	#pushregs_
1cf3c     F8 F7 BF FD | 	call	#__system___gc_ptrs
1cf40     FD 1E 02 F6 | 	mov	local01, result1
1cf44     FE 20 02 F6 | 	mov	local02, result2
1cf48     EF 23 06 F6 | 	mov	local03, #495
1cf4c                 | LR__2850
1cf4c                 | 	'.live	local03
1cf4c     00 22 96 F9 | 	alts	local03, #0
1cf50     11 25 02 F6 | 	mov	local04, local03
1cf54     0F 13 02 F6 | 	mov	arg01, local01
1cf58     10 15 02 F6 | 	mov	arg02, local02
1cf5c     12 17 02 F6 | 	mov	arg03, local04
1cf60     04 FB BF FD | 	call	#__system___gc_isvalidptr
1cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf68     18 00 90 AD |  if_e	jmp	#LR__2851
1cf6c     FD 24 02 F6 | 	mov	local04, result1
1cf70     02 24 06 F1 | 	add	local04, #2
1cf74     12 25 E2 FA | 	rdword	local04, local04
1cf78     20 24 46 F5 | 	or	local04, #32
1cf7c     02 FA 05 F1 | 	add	result1, #2
1cf80     FD 24 52 FC | 	wrword	local04, result1
1cf84                 | LR__2851
1cf84     01 22 86 F1 | 	sub	local03, #1
1cf88     00 22 56 F2 | 	cmps	local03, #0 wc
1cf8c     BC FF 9F 3D |  if_ae	jmp	#LR__2850
1cf90     A7 F0 03 F6 | 	mov	ptra, fp
1cf94     B2 00 A0 FD | 	call	#popregs_
1cf98                 | __system___gc_markcog_ret
1cf98     2D 00 64 FD | 	ret
1cf9c                 | 
1cf9c                 | __system__opendir
1cf9c     06 4A 05 F6 | 	mov	COUNT_, #6
1cfa0     A8 00 A0 FD | 	call	#pushregs_
1cfa4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1cfa8     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1cfac     09 15 02 F6 | 	mov	arg02, arg01
1cfb0     0F 13 02 F6 | 	mov	arg01, local01
1cfb4     00 16 06 F6 | 	mov	arg03, #0
1cfb8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1cfbc     AC C3 BF FD | 	call	#__system____getvfsforfile
1cfc0     FD 20 0A F6 | 	mov	local02, result1 wz
1cfc4     10 00 90 AD |  if_e	jmp	#LR__2860
1cfc8     28 20 06 F1 | 	add	local02, #40
1cfcc     10 17 0A FB | 	rdlong	arg03, local02 wz
1cfd0     28 20 86 F1 | 	sub	local02, #40
1cfd4     14 00 90 5D |  if_ne	jmp	#LR__2861
1cfd8                 | LR__2860
1cfd8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cfdc     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1cfe0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cfe4     00 FA 05 F6 | 	mov	result1, #0
1cfe8     90 00 90 FD | 	jmp	#LR__2863
1cfec                 | LR__2861
1cfec     5C 12 06 F6 | 	mov	arg01, #92
1cff0     10 14 06 F6 | 	mov	arg02, #16
1cff4     C0 F9 BF FD | 	call	#__system___gc_doalloc
1cff8     FD 22 0A F6 | 	mov	local03, result1 wz
1cffc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d000     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1d004     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d008     00 FA 05 A6 |  if_e	mov	result1, #0
1d00c     6C 00 90 AD |  if_e	jmp	#LR__2863
1d010     28 20 06 F1 | 	add	local02, #40
1d014     10 25 02 FB | 	rdlong	local04, local02
1d018     12 27 02 F6 | 	mov	local05, local04
1d01c     28 20 86 F1 | 	sub	local02, #40
1d020     13 26 46 F7 | 	zerox	local05, #19
1d024     14 24 46 F0 | 	shr	local04, #20
1d028     02 24 66 F0 | 	shl	local04, #2
1d02c     ED 24 02 F1 | 	add	local04, __methods__
1d030     12 25 02 FB | 	rdlong	local04, local04
1d034     11 13 02 F6 | 	mov	arg01, local03
1d038     0F 15 02 F6 | 	mov	arg02, local01
1d03c     F2 28 02 F6 | 	mov	local06, objptr
1d040     13 E5 01 F6 | 	mov	objptr, local05
1d044     2D 24 62 FD | 	call	local04
1d048     14 E5 01 F6 | 	mov	objptr, local06
1d04c     FD 16 0A F6 | 	mov	arg03, result1 wz
1d050     20 00 90 AD |  if_e	jmp	#LR__2862
1d054     00 16 4E F2 | 	cmps	arg03, #0 wz
1d058     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d05c     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1d060     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d064     11 13 02 F6 | 	mov	arg01, local03
1d068     58 FA BF FD | 	call	#__system___gc_free
1d06c     00 FA 05 F6 | 	mov	result1, #0
1d070     08 00 90 FD | 	jmp	#LR__2863
1d074                 | LR__2862
1d074     11 21 62 FC | 	wrlong	local02, local03
1d078     11 FB 01 F6 | 	mov	result1, local03
1d07c                 | LR__2863
1d07c     A7 F0 03 F6 | 	mov	ptra, fp
1d080     B2 00 A0 FD | 	call	#popregs_
1d084                 | __system__opendir_ret
1d084     2D 00 64 FD | 	ret
1d088                 | 
1d088                 | __system__closedir
1d088     04 4A 05 F6 | 	mov	COUNT_, #4
1d08c     A8 00 A0 FD | 	call	#pushregs_
1d090     09 1F 02 F6 | 	mov	local01, arg01
1d094     0F 13 02 FB | 	rdlong	arg01, local01
1d098     2C 12 06 F1 | 	add	arg01, #44
1d09c     09 21 02 FB | 	rdlong	local02, arg01
1d0a0     10 23 02 F6 | 	mov	local03, local02
1d0a4     13 22 46 F7 | 	zerox	local03, #19
1d0a8     14 20 46 F0 | 	shr	local02, #20
1d0ac     02 20 66 F0 | 	shl	local02, #2
1d0b0     ED 20 02 F1 | 	add	local02, __methods__
1d0b4     10 21 02 FB | 	rdlong	local02, local02
1d0b8     0F 13 02 F6 | 	mov	arg01, local01
1d0bc     F2 24 02 F6 | 	mov	local04, objptr
1d0c0     11 E5 01 F6 | 	mov	objptr, local03
1d0c4     2D 20 62 FD | 	call	local02
1d0c8     12 E5 01 F6 | 	mov	objptr, local04
1d0cc     FD 24 02 F6 | 	mov	local04, result1
1d0d0     0F 13 02 F6 | 	mov	arg01, local01
1d0d4     EC F9 BF FD | 	call	#__system___gc_free
1d0d8     00 24 4E F2 | 	cmps	local04, #0 wz
1d0dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d0e0     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1d0e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d0e8     01 FA 65 56 |  if_ne	neg	result1, #1
1d0ec     00 FA 05 A6 |  if_e	mov	result1, #0
1d0f0     A7 F0 03 F6 | 	mov	ptra, fp
1d0f4     B2 00 A0 FD | 	call	#popregs_
1d0f8                 | __system__closedir_ret
1d0f8     2D 00 64 FD | 	ret
1d0fc                 | 
1d0fc                 | __system__readdir
1d0fc     04 4A 05 F6 | 	mov	COUNT_, #4
1d100     A8 00 A0 FD | 	call	#pushregs_
1d104     09 15 0A FB | 	rdlong	arg02, arg01 wz
1d108     08 12 06 F1 | 	add	arg01, #8
1d10c     09 1F 02 F6 | 	mov	local01, arg01
1d110     08 12 86 F1 | 	sub	arg01, #8
1d114     00 FA 05 A6 |  if_e	mov	result1, #0
1d118     5C 00 90 AD |  if_e	jmp	#LR__2871
1d11c     30 14 06 F1 | 	add	arg02, #48
1d120     0A 21 02 FB | 	rdlong	local02, arg02
1d124     10 23 02 F6 | 	mov	local03, local02
1d128     13 22 46 F7 | 	zerox	local03, #19
1d12c     14 20 46 F0 | 	shr	local02, #20
1d130     02 20 66 F0 | 	shl	local02, #2
1d134     ED 20 02 F1 | 	add	local02, __methods__
1d138     10 21 02 FB | 	rdlong	local02, local02
1d13c     0F 15 02 F6 | 	mov	arg02, local01
1d140     F2 24 02 F6 | 	mov	local04, objptr
1d144     11 E5 01 F6 | 	mov	objptr, local03
1d148     2D 20 62 FD | 	call	local02
1d14c     12 E5 01 F6 | 	mov	objptr, local04
1d150     00 FA 4D F2 | 	cmps	result1, #0 wz
1d154     1C 00 90 AD |  if_e	jmp	#LR__2870
1d158     01 FA 55 F2 | 	cmps	result1, #1 wc
1d15c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1d160     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d164     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1d168     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d16c     00 FA 05 F6 | 	mov	result1, #0
1d170     04 00 90 FD | 	jmp	#LR__2871
1d174                 | LR__2870
1d174     0F FB 01 F6 | 	mov	result1, local01
1d178                 | LR__2871
1d178     A7 F0 03 F6 | 	mov	ptra, fp
1d17c     B2 00 A0 FD | 	call	#popregs_
1d180                 | __system__readdir_ret
1d180     2D 00 64 FD | 	ret
1d184                 | 
1d184                 | __system___openraw
1d184     15 4A 05 F6 | 	mov	COUNT_, #21
1d188     A8 00 A0 FD | 	call	#pushregs_
1d18c     09 1F 02 F6 | 	mov	local01, arg01
1d190     0A 21 02 F6 | 	mov	local02, arg02
1d194     0B 23 02 F6 | 	mov	local03, arg03
1d198     0C 25 02 F6 | 	mov	local04, arg04
1d19c     04 26 06 F6 | 	mov	local05, #4
1d1a0     0F 29 02 F6 | 	mov	local06, local01
1d1a4     00 2A 06 F6 | 	mov	local07, #0
1d1a8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d1ac     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1d1b0     16 13 02 F6 | 	mov	arg01, local08
1d1b4     10 15 02 F6 | 	mov	arg02, local02
1d1b8     00 16 06 F6 | 	mov	arg03, #0
1d1bc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d1c0     A8 C1 BF FD | 	call	#__system____getvfsforfile
1d1c4     FD 2E 0A F6 | 	mov	local09, result1 wz
1d1c8     10 00 90 AD |  if_e	jmp	#LR__2880
1d1cc     20 2E 06 F1 | 	add	local09, #32
1d1d0     17 FB 09 FB | 	rdlong	result1, local09 wz
1d1d4     20 2E 86 F1 | 	sub	local09, #32
1d1d8     14 00 90 5D |  if_ne	jmp	#LR__2881
1d1dc                 | LR__2880
1d1dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d1e0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d1e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d1e8     01 FA 65 F6 | 	neg	result1, #1
1d1ec     8C 02 90 FD | 	jmp	#LR__2894
1d1f0                 | LR__2881
1d1f0     14 13 02 F6 | 	mov	arg01, local06
1d1f4     00 14 06 F6 | 	mov	arg02, #0
1d1f8     34 16 06 F6 | 	mov	arg03, #52
1d1fc     09 31 02 F6 | 	mov	local10, arg01
1d200     98 00 A0 FD | 	call	#\builtin_bytefill_
1d204     20 2E 06 F1 | 	add	local09, #32
1d208     17 33 02 FB | 	rdlong	local11, local09
1d20c     19 35 02 F6 | 	mov	local12, local11
1d210     19 37 02 F6 | 	mov	local13, local11
1d214     20 2E 86 F1 | 	sub	local09, #32
1d218     1B 39 02 F6 | 	mov	local14, local13
1d21c     13 34 46 F7 | 	zerox	local12, #19
1d220     14 38 46 F0 | 	shr	local14, #20
1d224     02 38 66 F0 | 	shl	local14, #2
1d228     ED 38 02 F1 | 	add	local14, __methods__
1d22c     1C 39 02 FB | 	rdlong	local14, local14
1d230     14 3B 02 F6 | 	mov	local15, local06
1d234     16 3D 02 F6 | 	mov	local16, local08
1d238     11 3F 02 F6 | 	mov	local17, local03
1d23c     1D 13 02 F6 | 	mov	arg01, local15
1d240     1E 15 02 F6 | 	mov	arg02, local16
1d244     1F 17 02 F6 | 	mov	arg03, local17
1d248     F2 40 02 F6 | 	mov	local18, objptr
1d24c     1A E5 01 F6 | 	mov	objptr, local12
1d250     2D 38 62 FD | 	call	local14
1d254     20 E5 01 F6 | 	mov	objptr, local18
1d258     FD 42 0A F6 | 	mov	local19, result1 wz
1d25c     04 22 CE 57 |  if_ne	test	local03, #4 wz
1d260     58 00 90 AD |  if_e	jmp	#LR__2882
1d264     24 2E 06 F1 | 	add	local09, #36
1d268     17 33 02 FB | 	rdlong	local11, local09
1d26c     19 35 02 F6 | 	mov	local12, local11
1d270     19 37 02 F6 | 	mov	local13, local11
1d274     24 2E 86 F1 | 	sub	local09, #36
1d278     1B 39 02 F6 | 	mov	local14, local13
1d27c     13 34 46 F7 | 	zerox	local12, #19
1d280     14 38 46 F0 | 	shr	local14, #20
1d284     02 38 66 F0 | 	shl	local14, #2
1d288     ED 38 02 F1 | 	add	local14, __methods__
1d28c     1C 39 02 FB | 	rdlong	local14, local14
1d290     14 3B 02 F6 | 	mov	local15, local06
1d294     16 3D 02 F6 | 	mov	local16, local08
1d298     12 3F 02 F6 | 	mov	local17, local04
1d29c     1D 13 02 F6 | 	mov	arg01, local15
1d2a0     1E 15 02 F6 | 	mov	arg02, local16
1d2a4     1F 17 02 F6 | 	mov	arg03, local17
1d2a8     F2 40 02 F6 | 	mov	local18, objptr
1d2ac     1A E5 01 F6 | 	mov	objptr, local12
1d2b0     2D 38 62 FD | 	call	local14
1d2b4     20 E5 01 F6 | 	mov	objptr, local18
1d2b8     FD 42 02 F6 | 	mov	local19, result1
1d2bc                 | LR__2882
1d2bc     00 42 0E F2 | 	cmp	local19, #0 wz
1d2c0     8C 01 90 5D |  if_ne	jmp	#LR__2892
1d2c4     11 45 02 F6 | 	mov	local20, local03
1d2c8     03 44 0E F5 | 	and	local20, #3 wz
1d2cc     02 26 46 55 |  if_ne	or	local05, #2
1d2d0     01 44 0E F2 | 	cmp	local20, #1 wz
1d2d4     01 26 46 55 |  if_ne	or	local05, #1
1d2d8     20 22 CE F7 | 	test	local03, #32 wz
1d2dc     C0 26 46 55 |  if_ne	or	local05, #192
1d2e0     08 28 06 F1 | 	add	local06, #8
1d2e4     14 27 62 FC | 	wrlong	local05, local06
1d2e8     0C 28 06 F1 | 	add	local06, #12
1d2ec     14 47 0A FB | 	rdlong	local21, local06 wz
1d2f0     14 28 86 F1 | 	sub	local06, #20
1d2f4     18 00 90 5D |  if_ne	jmp	#LR__2883
1d2f8     04 2E 06 F1 | 	add	local09, #4
1d2fc     17 47 02 FB | 	rdlong	local21, local09
1d300     04 2E 86 F1 | 	sub	local09, #4
1d304     14 28 06 F1 | 	add	local06, #20
1d308     14 47 62 FC | 	wrlong	local21, local06
1d30c     14 28 86 F1 | 	sub	local06, #20
1d310                 | LR__2883
1d310     18 28 06 F1 | 	add	local06, #24
1d314     14 47 0A FB | 	rdlong	local21, local06 wz
1d318     18 28 86 F1 | 	sub	local06, #24
1d31c     18 00 90 5D |  if_ne	jmp	#LR__2884
1d320     08 2E 06 F1 | 	add	local09, #8
1d324     17 47 02 FB | 	rdlong	local21, local09
1d328     08 2E 86 F1 | 	sub	local09, #8
1d32c     18 28 06 F1 | 	add	local06, #24
1d330     14 47 62 FC | 	wrlong	local21, local06
1d334     18 28 86 F1 | 	sub	local06, #24
1d338                 | LR__2884
1d338     24 28 06 F1 | 	add	local06, #36
1d33c     14 47 0A FB | 	rdlong	local21, local06 wz
1d340     24 28 86 F1 | 	sub	local06, #36
1d344     17 47 02 AB |  if_e	rdlong	local21, local09
1d348     24 28 06 A1 |  if_e	add	local06, #36
1d34c     14 47 62 AC |  if_e	wrlong	local21, local06
1d350     24 28 86 A1 |  if_e	sub	local06, #36
1d354     28 28 06 F1 | 	add	local06, #40
1d358     14 47 0A FB | 	rdlong	local21, local06 wz
1d35c     28 28 86 F1 | 	sub	local06, #40
1d360     18 00 90 5D |  if_ne	jmp	#LR__2885
1d364     10 2E 06 F1 | 	add	local09, #16
1d368     17 47 02 FB | 	rdlong	local21, local09
1d36c     10 2E 86 F1 | 	sub	local09, #16
1d370     28 28 06 F1 | 	add	local06, #40
1d374     14 47 62 FC | 	wrlong	local21, local06
1d378     28 28 86 F1 | 	sub	local06, #40
1d37c                 | LR__2885
1d37c     30 28 06 F1 | 	add	local06, #48
1d380     14 47 0A FB | 	rdlong	local21, local06 wz
1d384     30 28 86 F1 | 	sub	local06, #48
1d388     18 00 90 5D |  if_ne	jmp	#LR__2886
1d38c     0C 2E 06 F1 | 	add	local09, #12
1d390     17 47 02 FB | 	rdlong	local21, local09
1d394     0C 2E 86 F1 | 	sub	local09, #12
1d398     30 28 06 F1 | 	add	local06, #48
1d39c     14 47 62 FC | 	wrlong	local21, local06
1d3a0     30 28 86 F1 | 	sub	local06, #48
1d3a4                 | LR__2886
1d3a4     1C 28 06 F1 | 	add	local06, #28
1d3a8     14 47 0A FB | 	rdlong	local21, local06 wz
1d3ac     1C 28 86 F1 | 	sub	local06, #28
1d3b0     1C 00 90 5D |  if_ne	jmp	#LR__2887
1d3b4     01 2A 06 F6 | 	mov	local07, #1
1d3b8     F2 12 02 F6 | 	mov	arg01, objptr
1d3bc     00 48 03 FF 
1d3c0     00 12 46 F5 | 	or	arg01, ##110100480
1d3c4     1C 28 06 F1 | 	add	local06, #28
1d3c8     14 13 62 FC | 	wrlong	arg01, local06
1d3cc     1C 28 86 F1 | 	sub	local06, #28
1d3d0                 | LR__2887
1d3d0     20 28 06 F1 | 	add	local06, #32
1d3d4     14 47 0A FB | 	rdlong	local21, local06 wz
1d3d8     20 28 86 F1 | 	sub	local06, #32
1d3dc     1C 00 90 5D |  if_ne	jmp	#LR__2888
1d3e0     01 2A 06 F6 | 	mov	local07, #1
1d3e4     F2 12 02 F6 | 	mov	arg01, objptr
1d3e8     00 50 03 FF 
1d3ec     00 12 46 F5 | 	or	arg01, ##111149056
1d3f0     20 28 06 F1 | 	add	local06, #32
1d3f4     14 13 62 FC | 	wrlong	arg01, local06
1d3f8     20 28 86 F1 | 	sub	local06, #32
1d3fc                 | LR__2888
1d3fc     2C 28 06 F1 | 	add	local06, #44
1d400     14 47 0A FB | 	rdlong	local21, local06 wz
1d404     2C 28 86 F1 | 	sub	local06, #44
1d408     44 00 90 5D |  if_ne	jmp	#LR__2891
1d40c     14 2E 06 F1 | 	add	local09, #20
1d410     17 47 0A FB | 	rdlong	local21, local09 wz
1d414     14 2E 86 F1 | 	sub	local09, #20
1d418     18 00 90 AD |  if_e	jmp	#LR__2889
1d41c     14 2E 06 F1 | 	add	local09, #20
1d420     17 47 02 FB | 	rdlong	local21, local09
1d424     2C 28 06 F1 | 	add	local06, #44
1d428     14 47 62 FC | 	wrlong	local21, local06
1d42c     2C 28 86 F1 | 	sub	local06, #44
1d430     1C 00 90 FD | 	jmp	#LR__2890
1d434                 | LR__2889
1d434     01 2A 06 F6 | 	mov	local07, #1
1d438     F2 12 02 F6 | 	mov	arg01, objptr
1d43c     00 58 03 FF 
1d440     00 12 46 F5 | 	or	arg01, ##112197632
1d444     2C 28 06 F1 | 	add	local06, #44
1d448     14 13 62 FC | 	wrlong	arg01, local06
1d44c     2C 28 86 F1 | 	sub	local06, #44
1d450                 | LR__2890
1d450                 | LR__2891
1d450                 | LR__2892
1d450     00 2A 0E F2 | 	cmp	local07, #0 wz
1d454     14 13 02 56 |  if_ne	mov	arg01, local06
1d458     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d45c     00 42 0E F2 | 	cmp	local19, #0 wz
1d460     00 12 06 A6 |  if_e	mov	arg01, #0
1d464     10 00 90 5D |  if_ne	jmp	#LR__2893
1d468     00 12 4E F2 | 	cmps	arg01, #0 wz
1d46c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d470     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d474     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d478                 | LR__2893
1d478     21 FB 01 F6 | 	mov	result1, local19
1d47c                 | LR__2894
1d47c     A7 F0 03 F6 | 	mov	ptra, fp
1d480     B2 00 A0 FD | 	call	#popregs_
1d484                 | __system___openraw_ret
1d484     2D 00 64 FD | 	ret
1d488                 | 
1d488                 | __system___closeraw
1d488     05 4A 05 F6 | 	mov	COUNT_, #5
1d48c     A8 00 A0 FD | 	call	#pushregs_
1d490     09 1F 02 F6 | 	mov	local01, arg01
1d494     00 20 06 F6 | 	mov	local02, #0
1d498     08 1E 06 F1 | 	add	local01, #8
1d49c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d4a0     08 1E 86 F1 | 	sub	local01, #8
1d4a4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d4a8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d4ac     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d4b0     01 FA 65 A6 |  if_e	neg	result1, #1
1d4b4     A8 00 90 AD |  if_e	jmp	#LR__2902
1d4b8     2C 1E 06 F1 | 	add	local01, #44
1d4bc     0F FB 09 FB | 	rdlong	result1, local01 wz
1d4c0     2C 1E 86 F1 | 	sub	local01, #44
1d4c4     38 00 90 AD |  if_e	jmp	#LR__2900
1d4c8     2C 1E 06 F1 | 	add	local01, #44
1d4cc     0F 23 02 FB | 	rdlong	local03, local01
1d4d0     11 25 02 F6 | 	mov	local04, local03
1d4d4     2C 1E 86 F1 | 	sub	local01, #44
1d4d8     13 24 46 F7 | 	zerox	local04, #19
1d4dc     14 22 46 F0 | 	shr	local03, #20
1d4e0     02 22 66 F0 | 	shl	local03, #2
1d4e4     ED 22 02 F1 | 	add	local03, __methods__
1d4e8     11 23 02 FB | 	rdlong	local03, local03
1d4ec     0F 13 02 F6 | 	mov	arg01, local01
1d4f0     F2 26 02 F6 | 	mov	local05, objptr
1d4f4     12 E5 01 F6 | 	mov	objptr, local04
1d4f8     2D 22 62 FD | 	call	local03
1d4fc     13 E5 01 F6 | 	mov	objptr, local05
1d500                 | LR__2900
1d500     24 1E 06 F1 | 	add	local01, #36
1d504     0F 27 0A FB | 	rdlong	local05, local01 wz
1d508     24 1E 86 F1 | 	sub	local01, #36
1d50c     3C 00 90 AD |  if_e	jmp	#LR__2901
1d510     24 1E 06 F1 | 	add	local01, #36
1d514     0F 23 02 FB | 	rdlong	local03, local01
1d518     11 25 02 F6 | 	mov	local04, local03
1d51c     24 1E 86 F1 | 	sub	local01, #36
1d520     13 24 46 F7 | 	zerox	local04, #19
1d524     14 22 46 F0 | 	shr	local03, #20
1d528     02 22 66 F0 | 	shl	local03, #2
1d52c     ED 22 02 F1 | 	add	local03, __methods__
1d530     11 23 02 FB | 	rdlong	local03, local03
1d534     0F 13 02 F6 | 	mov	arg01, local01
1d538     F2 26 02 F6 | 	mov	local05, objptr
1d53c     12 E5 01 F6 | 	mov	objptr, local04
1d540     2D 22 62 FD | 	call	local03
1d544     13 E5 01 F6 | 	mov	objptr, local05
1d548     FD 20 02 F6 | 	mov	local02, result1
1d54c                 | LR__2901
1d54c     0F 13 02 F6 | 	mov	arg01, local01
1d550     00 14 06 F6 | 	mov	arg02, #0
1d554     34 16 06 F6 | 	mov	arg03, #52
1d558     98 00 A0 FD | 	call	#\builtin_bytefill_
1d55c     10 FB 01 F6 | 	mov	result1, local02
1d560                 | LR__2902
1d560     A7 F0 03 F6 | 	mov	ptra, fp
1d564     B2 00 A0 FD | 	call	#popregs_
1d568                 | __system___closeraw_ret
1d568     2D 00 64 FD | 	ret
1d56c                 | 
1d56c                 | __system___vfs_open_sdcardx
1d56c     0B 4A 05 F6 | 	mov	COUNT_, #11
1d570     A8 00 A0 FD | 	call	#pushregs_
1d574     09 23 02 F6 | 	mov	local03, arg01
1d578     0A 25 02 F6 | 	mov	local04, arg02
1d57c     0B 27 02 F6 | 	mov	local05, arg03
1d580     0C 29 02 F6 | 	mov	local06, arg04
1d584     01 00 00 FF 
1d588     24 12 06 F6 | 	mov	arg01, ##548
1d58c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d590     FD 2A 02 F6 | 	mov	local07, result1
1d594     01 00 00 FF 
1d598     34 12 06 F6 | 	mov	arg01, ##564
1d59c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d5a0     FD 2C 02 F6 | 	mov	local08, result1
1d5a4     11 19 02 F6 | 	mov	arg04, local03
1d5a8     1F 18 C6 F0 | 	sar	arg04, #31
1d5ac     11 17 02 F6 | 	mov	arg03, local03
1d5b0     01 12 06 F6 | 	mov	arg01, #1
1d5b4     00 14 06 F6 | 	mov	arg02, #0
1d5b8     48 DC BF FD | 	call	#__system___int64_shl
1d5bc     FD 1E 02 F6 | 	mov	local01, result1
1d5c0     FE 2E 02 F6 | 	mov	local09, result2
1d5c4     12 19 02 F6 | 	mov	arg04, local04
1d5c8     1F 18 C6 F0 | 	sar	arg04, #31
1d5cc     12 17 02 F6 | 	mov	arg03, local04
1d5d0     01 12 06 F6 | 	mov	arg01, #1
1d5d4     00 14 06 F6 | 	mov	arg02, #0
1d5d8     28 DC BF FD | 	call	#__system___int64_shl
1d5dc     FD 1E 42 F5 | 	or	local01, result1
1d5e0     FE 2E 42 F5 | 	or	local09, result2
1d5e4     13 19 02 F6 | 	mov	arg04, local05
1d5e8     1F 18 C6 F0 | 	sar	arg04, #31
1d5ec     13 17 02 F6 | 	mov	arg03, local05
1d5f0     01 12 06 F6 | 	mov	arg01, #1
1d5f4     00 14 06 F6 | 	mov	arg02, #0
1d5f8     08 DC BF FD | 	call	#__system___int64_shl
1d5fc     FD 1E 42 F5 | 	or	local01, result1
1d600     FE 2E 42 F5 | 	or	local09, result2
1d604     14 19 02 F6 | 	mov	arg04, local06
1d608     1F 18 C6 F0 | 	sar	arg04, #31
1d60c     14 17 02 F6 | 	mov	arg03, local06
1d610     01 12 06 F6 | 	mov	arg01, #1
1d614     00 14 06 F6 | 	mov	arg02, #0
1d618     E8 DB BF FD | 	call	#__system___int64_shl
1d61c     17 15 02 F6 | 	mov	arg02, local09
1d620     FD 1E 42 F5 | 	or	local01, result1
1d624     0A FD 41 F5 | 	or	result2, arg02
1d628     FE 20 02 F6 | 	mov	local02, result2
1d62c     0F 13 02 F6 | 	mov	arg01, local01
1d630     10 15 02 F6 | 	mov	arg02, local02
1d634     04 DC BF FD | 	call	#__system___usepins
1d638     00 FA 0D F2 | 	cmp	result1, #0 wz
1d63c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d640     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d644     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d648     00 FA 05 A6 |  if_e	mov	result1, #0
1d64c     B4 00 90 AD |  if_e	jmp	#LR__2912
1d650     0F 31 02 F6 | 	mov	local10, local01
1d654     10 2F 02 F6 | 	mov	local09, local02
1d658     01 00 00 FF 
1d65c     08 2A 06 F1 | 	add	local07, ##520
1d660     15 31 62 FC | 	wrlong	local10, local07
1d664     04 2A 06 F1 | 	add	local07, #4
1d668     15 2F 62 FC | 	wrlong	local09, local07
1d66c     01 00 00 FF 
1d670     0C 2A 86 F1 | 	sub	local07, ##524
1d674     14 1B 02 F6 | 	mov	arg05, local06
1d678     00 12 06 F6 | 	mov	arg01, #0
1d67c     11 15 02 F6 | 	mov	arg02, local03
1d680     12 17 02 F6 | 	mov	arg03, local04
1d684     13 19 02 F6 | 	mov	arg04, local05
1d688     F2 30 02 F6 | 	mov	local10, objptr
1d68c     15 E5 01 F6 | 	mov	objptr, local07
1d690     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d694     18 E5 01 F6 | 	mov	objptr, local10
1d698     FD 32 0A F6 | 	mov	local11, result1 wz
1d69c     24 00 90 5D |  if_ne	jmp	#LR__2910
1d6a0     40 01 00 FF 
1d6a4     4E 15 06 F6 | 	mov	arg02, ##@LR__4307
1d6a8     16 13 02 F6 | 	mov	arg01, local08
1d6ac     00 16 06 F6 | 	mov	arg03, #0
1d6b0     F2 32 02 F6 | 	mov	local11, objptr
1d6b4     15 E5 01 F6 | 	mov	objptr, local07
1d6b8     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1d6bc     19 E5 01 F6 | 	mov	objptr, local11
1d6c0     FD 32 02 F6 | 	mov	local11, result1
1d6c4                 | LR__2910
1d6c4     00 32 0E F2 | 	cmp	local11, #0 wz
1d6c8     24 00 90 AD |  if_e	jmp	#LR__2911
1d6cc     0F 13 02 F6 | 	mov	arg01, local01
1d6d0     10 15 02 F6 | 	mov	arg02, local02
1d6d4     B8 DB BF FD | 	call	#__system___freepins
1d6d8     19 13 6A F6 | 	neg	arg01, local11 wz
1d6dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d6e0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d6e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d6e8     00 FA 05 F6 | 	mov	result1, #0
1d6ec     14 00 90 FD | 	jmp	#LR__2912
1d6f0                 | LR__2911
1d6f0     15 13 02 F6 | 	mov	arg01, local07
1d6f4     F2 32 02 F6 | 	mov	local11, objptr
1d6f8     15 E5 01 F6 | 	mov	objptr, local07
1d6fc     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1d700     19 E5 01 F6 | 	mov	objptr, local11
1d704                 | LR__2912
1d704     A7 F0 03 F6 | 	mov	ptra, fp
1d708     B2 00 A0 FD | 	call	#popregs_
1d70c                 | __system___vfs_open_sdcardx_ret
1d70c     2D 00 64 FD | 	ret
1d710                 | 
1d710                 | __system____default_getc
1d710     03 4A 05 F6 | 	mov	COUNT_, #3
1d714     A8 00 A0 FD | 	call	#pushregs_
1d718     09 1F 02 F6 | 	mov	local01, arg01
1d71c     0F 21 02 FB | 	rdlong	local02, local01
1d720     08 20 06 F1 | 	add	local02, #8
1d724     10 23 02 FB | 	rdlong	local03, local02
1d728     02 22 CE F7 | 	test	local03, #2 wz
1d72c     0F 13 02 56 |  if_ne	mov	arg01, local01
1d730     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d734     10 23 02 FB | 	rdlong	local03, local02
1d738     01 22 46 F5 | 	or	local03, #1
1d73c     10 23 62 FC | 	wrlong	local03, local02
1d740     08 20 86 F1 | 	sub	local02, #8
1d744     10 23 0A FB | 	rdlong	local03, local02 wz
1d748     0C 00 90 5D |  if_ne	jmp	#LR__2920
1d74c     0F 13 02 F6 | 	mov	arg01, local01
1d750     64 16 B0 FD | 	call	#__system____default_filbuf
1d754     FD 22 02 F6 | 	mov	local03, result1
1d758                 | LR__2920
1d758     01 22 56 F2 | 	cmps	local03, #1 wc
1d75c     01 FA 65 C6 |  if_b	neg	result1, #1
1d760     1C 00 90 CD |  if_b	jmp	#LR__2921
1d764     01 22 86 F1 | 	sub	local03, #1
1d768     10 23 62 FC | 	wrlong	local03, local02
1d76c     04 20 06 F1 | 	add	local02, #4
1d770     10 23 02 FB | 	rdlong	local03, local02
1d774     11 FB C1 FA | 	rdbyte	result1, local03
1d778     01 22 06 F1 | 	add	local03, #1
1d77c     10 23 62 FC | 	wrlong	local03, local02
1d780                 | LR__2921
1d780     A7 F0 03 F6 | 	mov	ptra, fp
1d784     B2 00 A0 FD | 	call	#popregs_
1d788                 | __system____default_getc_ret
1d788     2D 00 64 FD | 	ret
1d78c                 | 
1d78c                 | __system____default_putc
1d78c     06 4A 05 F6 | 	mov	COUNT_, #6
1d790     A8 00 A0 FD | 	call	#pushregs_
1d794     09 1F 02 F6 | 	mov	local01, arg01
1d798     0A 21 02 F6 | 	mov	local02, arg02
1d79c     10 23 02 FB | 	rdlong	local03, local02
1d7a0     08 22 06 F1 | 	add	local03, #8
1d7a4     11 FB 01 FB | 	rdlong	result1, local03
1d7a8     01 FA CD F7 | 	test	result1, #1 wz
1d7ac     10 13 02 56 |  if_ne	mov	arg01, local02
1d7b0     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d7b4     11 25 02 FB | 	rdlong	local04, local03
1d7b8     02 24 46 F5 | 	or	local04, #2
1d7bc     11 25 62 FC | 	wrlong	local04, local03
1d7c0     08 22 86 F1 | 	sub	local03, #8
1d7c4     11 27 02 FB | 	rdlong	local05, local03
1d7c8     10 22 06 F1 | 	add	local03, #16
1d7cc     11 15 02 FB | 	rdlong	arg02, local03
1d7d0     10 22 86 F1 | 	sub	local03, #16
1d7d4     13 FB 01 F6 | 	mov	result1, local05
1d7d8     0A FB 01 F1 | 	add	result1, arg02
1d7dc     FD 1E 42 FC | 	wrbyte	local01, result1
1d7e0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d7e4     01 26 06 F1 | 	add	local05, #1
1d7e8     11 27 62 FC | 	wrlong	local05, local03
1d7ec     06 20 06 F1 | 	add	local02, #6
1d7f0     10 29 EA FA | 	rdword	local06, local02 wz
1d7f4     06 20 86 F1 | 	sub	local02, #6
1d7f8     0C 22 06 51 |  if_ne	add	local03, #12
1d7fc     11 25 02 5B |  if_ne	rdlong	local04, local03
1d800     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d804     0C 00 90 AD |  if_e	jmp	#LR__2930
1d808     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d80c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d810     10 00 90 5D |  if_ne	jmp	#LR__2931
1d814                 | LR__2930
1d814     10 13 02 F6 | 	mov	arg01, local02
1d818     18 00 B0 FD | 	call	#__system____default_flush
1d81c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d820     01 1E 66 56 |  if_ne	neg	local01, #1
1d824                 | LR__2931
1d824     0F FB 01 F6 | 	mov	result1, local01
1d828     A7 F0 03 F6 | 	mov	ptra, fp
1d82c     B2 00 A0 FD | 	call	#popregs_
1d830                 | __system____default_putc_ret
1d830     2D 00 64 FD | 	ret
1d834                 | 
1d834                 | __system____default_flush
1d834     06 4A 05 F6 | 	mov	COUNT_, #6
1d838     A8 00 A0 FD | 	call	#pushregs_
1d83c     09 1F 02 F6 | 	mov	local01, arg01
1d840     0F 21 02 FB | 	rdlong	local02, local01
1d844     10 23 02 FB | 	rdlong	local03, local02
1d848     08 20 06 F1 | 	add	local02, #8
1d84c     10 FB 01 FB | 	rdlong	result1, local02
1d850     08 20 86 F1 | 	sub	local02, #8
1d854     02 FA CD F7 | 	test	result1, #2 wz
1d858     D0 00 90 AD |  if_e	jmp	#LR__2942
1d85c     01 22 56 F2 | 	cmps	local03, #1 wc
1d860     20 01 90 CD |  if_b	jmp	#LR__2944
1d864     08 1E 06 F1 | 	add	local01, #8
1d868     0F FB 01 FB | 	rdlong	result1, local01
1d86c     08 1E 86 F1 | 	sub	local01, #8
1d870     40 FA CD F7 | 	test	result1, #64 wz
1d874     68 00 90 AD |  if_e	jmp	#LR__2941
1d878     08 1E 06 F1 | 	add	local01, #8
1d87c     0F 17 02 FB | 	rdlong	arg03, local01
1d880     08 1E 86 F1 | 	sub	local01, #8
1d884     80 16 CE F7 | 	test	arg03, #128 wz
1d888     54 00 90 AD |  if_e	jmp	#LR__2940
1d88c     30 1E 06 F1 | 	add	local01, #48
1d890     0F 25 02 FB | 	rdlong	local04, local01
1d894     12 27 02 F6 | 	mov	local05, local04
1d898     30 1E 86 F1 | 	sub	local01, #48
1d89c     13 26 46 F7 | 	zerox	local05, #19
1d8a0     14 24 46 F0 | 	shr	local04, #20
1d8a4     02 24 66 F0 | 	shl	local04, #2
1d8a8     ED 24 02 F1 | 	add	local04, __methods__
1d8ac     12 25 02 FB | 	rdlong	local04, local04
1d8b0     0F 13 02 F6 | 	mov	arg01, local01
1d8b4     00 14 06 F6 | 	mov	arg02, #0
1d8b8     02 16 06 F6 | 	mov	arg03, #2
1d8bc     F2 28 02 F6 | 	mov	local06, objptr
1d8c0     13 E5 01 F6 | 	mov	objptr, local05
1d8c4     2D 24 62 FD | 	call	local04
1d8c8     14 E5 01 F6 | 	mov	objptr, local06
1d8cc     08 1E 06 F1 | 	add	local01, #8
1d8d0     0F 29 02 FB | 	rdlong	local06, local01
1d8d4     80 28 26 F5 | 	andn	local06, #128
1d8d8     0F 29 62 FC | 	wrlong	local06, local01
1d8dc     08 1E 86 F1 | 	sub	local01, #8
1d8e0                 | LR__2940
1d8e0                 | LR__2941
1d8e0     18 1E 06 F1 | 	add	local01, #24
1d8e4     0F 25 02 FB | 	rdlong	local04, local01
1d8e8     12 27 02 F6 | 	mov	local05, local04
1d8ec     18 1E 86 F1 | 	sub	local01, #24
1d8f0     13 26 46 F7 | 	zerox	local05, #19
1d8f4     14 24 46 F0 | 	shr	local04, #20
1d8f8     02 24 66 F0 | 	shl	local04, #2
1d8fc     ED 24 02 F1 | 	add	local04, __methods__
1d900     12 25 02 FB | 	rdlong	local04, local04
1d904     10 20 06 F1 | 	add	local02, #16
1d908     10 15 02 FB | 	rdlong	arg02, local02
1d90c     10 20 86 F1 | 	sub	local02, #16
1d910     0F 13 02 F6 | 	mov	arg01, local01
1d914     11 17 02 F6 | 	mov	arg03, local03
1d918     F2 28 02 F6 | 	mov	local06, objptr
1d91c     13 E5 01 F6 | 	mov	objptr, local05
1d920     2D 24 62 FD | 	call	local04
1d924     14 E5 01 F6 | 	mov	objptr, local06
1d928     58 00 90 FD | 	jmp	#LR__2944
1d92c                 | LR__2942
1d92c     08 20 06 F1 | 	add	local02, #8
1d930     10 29 02 FB | 	rdlong	local06, local02
1d934     08 20 86 F1 | 	sub	local02, #8
1d938     01 28 CE F7 | 	test	local06, #1 wz
1d93c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d940     40 00 90 AD |  if_e	jmp	#LR__2943
1d944     30 1E 06 F1 | 	add	local01, #48
1d948     0F 25 02 FB | 	rdlong	local04, local01
1d94c     12 27 02 F6 | 	mov	local05, local04
1d950     30 1E 86 F1 | 	sub	local01, #48
1d954     13 26 46 F7 | 	zerox	local05, #19
1d958     14 24 46 F0 | 	shr	local04, #20
1d95c     02 24 66 F0 | 	shl	local04, #2
1d960     ED 24 02 F1 | 	add	local04, __methods__
1d964     12 25 02 FB | 	rdlong	local04, local04
1d968     0F 13 02 F6 | 	mov	arg01, local01
1d96c     11 15 62 F6 | 	neg	arg02, local03
1d970     01 16 06 F6 | 	mov	arg03, #1
1d974     F2 28 02 F6 | 	mov	local06, objptr
1d978     13 E5 01 F6 | 	mov	objptr, local05
1d97c     2D 24 62 FD | 	call	local04
1d980     14 E5 01 F6 | 	mov	objptr, local06
1d984                 | LR__2943
1d984                 | LR__2944
1d984     10 01 68 FC | 	wrlong	#0, local02
1d988     04 20 06 F1 | 	add	local02, #4
1d98c     10 01 68 FC | 	wrlong	#0, local02
1d990     04 20 06 F1 | 	add	local02, #4
1d994     10 01 68 FC | 	wrlong	#0, local02
1d998     00 FA 05 F6 | 	mov	result1, #0
1d99c     A7 F0 03 F6 | 	mov	ptra, fp
1d9a0     B2 00 A0 FD | 	call	#popregs_
1d9a4                 | __system____default_flush_ret
1d9a4     2D 00 64 FD | 	ret
1d9a8                 | 
1d9a8                 | __system____default_buffer_init
1d9a8     02 4A 05 F6 | 	mov	COUNT_, #2
1d9ac     A8 00 A0 FD | 	call	#pushregs_
1d9b0     09 1F 02 F6 | 	mov	local01, arg01
1d9b4     0F 21 02 FB | 	rdlong	local02, local01
1d9b8     0F 13 02 F6 | 	mov	arg01, local01
1d9bc     F8 02 B0 FD | 	call	#__system___isatty
1d9c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d9c4     06 1E 06 51 |  if_ne	add	local01, #6
1d9c8     0F 0B 58 5C |  if_ne	wrword	#5, local01
1d9cc     06 1E 06 A1 |  if_e	add	local01, #6
1d9d0     0F 0D 58 AC |  if_e	wrword	#6, local01
1d9d4     14 20 06 F1 | 	add	local02, #20
1d9d8     10 1F 02 F6 | 	mov	local01, local02
1d9dc     04 20 86 F1 | 	sub	local02, #4
1d9e0     10 1F 62 FC | 	wrlong	local01, local02
1d9e4     04 20 86 F1 | 	sub	local02, #4
1d9e8     02 00 80 FF 
1d9ec     10 01 68 FC | 	wrlong	##1024, local02
1d9f0     00 FA 05 F6 | 	mov	result1, #0
1d9f4     A7 F0 03 F6 | 	mov	ptra, fp
1d9f8     B2 00 A0 FD | 	call	#popregs_
1d9fc                 | __system____default_buffer_init_ret
1d9fc     2D 00 64 FD | 	ret
1da00                 | 
1da00                 | __system__stat
1da00     04 4A 05 F6 | 	mov	COUNT_, #4
1da04     A8 00 A0 FD | 	call	#pushregs_
1da08     0A 1F 02 F6 | 	mov	local01, arg02
1da0c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1da10     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1da14     09 15 02 F6 | 	mov	arg02, arg01
1da18     10 13 02 F6 | 	mov	arg01, local02
1da1c     00 16 06 F6 | 	mov	arg03, #0
1da20     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1da24     44 B9 BF FD | 	call	#__system____getvfsforfile
1da28     FD 22 0A F6 | 	mov	local03, result1 wz
1da2c     10 00 90 AD |  if_e	jmp	#LR__2950
1da30     34 22 06 F1 | 	add	local03, #52
1da34     11 17 0A FB | 	rdlong	arg03, local03 wz
1da38     34 22 86 F1 | 	sub	local03, #52
1da3c     14 00 90 5D |  if_ne	jmp	#LR__2951
1da40                 | LR__2950
1da40     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1da44     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1da48     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1da4c     01 FA 65 F6 | 	neg	result1, #1
1da50     68 00 90 FD | 	jmp	#LR__2952
1da54                 | LR__2951
1da54     0F 13 02 F6 | 	mov	arg01, local01
1da58     00 14 06 F6 | 	mov	arg02, #0
1da5c     30 16 06 F6 | 	mov	arg03, #48
1da60     09 25 02 F6 | 	mov	local04, arg01
1da64     98 00 A0 FD | 	call	#\builtin_bytefill_
1da68     12 FB 01 F6 | 	mov	result1, local04
1da6c     10 13 CA FA | 	rdbyte	arg01, local02 wz
1da70     08 1E 06 A1 |  if_e	add	local01, #8
1da74     08 00 80 AF 
1da78     0F FF 6B AC |  if_e	wrlong	##4607, local01
1da7c     00 FA 05 A6 |  if_e	mov	result1, #0
1da80     38 00 90 AD |  if_e	jmp	#LR__2952
1da84     34 22 06 F1 | 	add	local03, #52
1da88     11 23 02 FB | 	rdlong	local03, local03
1da8c     11 25 02 F6 | 	mov	local04, local03
1da90     13 22 46 F7 | 	zerox	local03, #19
1da94     14 24 46 F0 | 	shr	local04, #20
1da98     02 24 66 F0 | 	shl	local04, #2
1da9c     ED 24 02 F1 | 	add	local04, __methods__
1daa0     12 25 02 FB | 	rdlong	local04, local04
1daa4     10 13 02 F6 | 	mov	arg01, local02
1daa8     0F 15 02 F6 | 	mov	arg02, local01
1daac     F2 20 02 F6 | 	mov	local02, objptr
1dab0     11 E5 01 F6 | 	mov	objptr, local03
1dab4     2D 24 62 FD | 	call	local04
1dab8     10 E5 01 F6 | 	mov	objptr, local02
1dabc                 | LR__2952
1dabc     A7 F0 03 F6 | 	mov	ptra, fp
1dac0     B2 00 A0 FD | 	call	#popregs_
1dac4                 | __system__stat_ret
1dac4     2D 00 64 FD | 	ret
1dac8                 | 
1dac8                 | __system__read
1dac8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dacc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1dad0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1dad4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1dad8     01 FA 65 36 |  if_ae	neg	result1, #1
1dadc     20 00 90 3D |  if_ae	jmp	#LR__2960
1dae0     34 12 06 FD | 	qmul	arg01, #52
1dae4     02 00 00 FF 
1dae8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1daec     18 12 62 FD | 	getqx	arg01
1daf0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1daf4     02 00 00 FF 
1daf8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1dafc     D0 0F B0 FD | 	call	#__system___vfsread
1db00                 | LR__2960
1db00                 | __system__read_ret
1db00     2D 00 64 FD | 	ret
1db04                 | 
1db04                 | __system__close
1db04     0A 12 16 F2 | 	cmp	arg01, #10 wc
1db08     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1db0c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1db10     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1db14     01 FA 65 36 |  if_ae	neg	result1, #1
1db18     20 00 90 3D |  if_ae	jmp	#LR__2970
1db1c     34 12 06 FD | 	qmul	arg01, #52
1db20     02 00 00 FF 
1db24     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1db28     18 12 62 FD | 	getqx	arg01
1db2c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1db30     02 00 00 FF 
1db34     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1db38     4C F9 BF FD | 	call	#__system___closeraw
1db3c                 | LR__2970
1db3c                 | __system__close_ret
1db3c     2D 00 64 FD | 	ret
1db40                 | 
1db40                 | __system__lseek
1db40     06 4A 05 F6 | 	mov	COUNT_, #6
1db44     A8 00 A0 FD | 	call	#pushregs_
1db48     0A 12 16 F2 | 	cmp	arg01, #10 wc
1db4c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1db50     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1db54     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1db58     01 FA 65 36 |  if_ae	neg	result1, #1
1db5c     C4 00 90 3D |  if_ae	jmp	#LR__2981
1db60     34 12 06 FD | 	qmul	arg01, #52
1db64     02 00 00 FF 
1db68     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1db6c     18 1E 62 FD | 	getqx	local01
1db70     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1db74     30 1E 06 F1 | 	add	local01, #48
1db78     0F 13 0A FB | 	rdlong	arg01, local01 wz
1db7c     30 1E 86 F1 | 	sub	local01, #48
1db80     02 00 00 FF 
1db84     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1db88     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1db8c     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1db90     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1db94     01 FA 65 A6 |  if_e	neg	result1, #1
1db98     88 00 90 AD |  if_e	jmp	#LR__2981
1db9c     08 1E 06 F1 | 	add	local01, #8
1dba0     0F 21 02 FB | 	rdlong	local02, local01
1dba4     08 1E 86 F1 | 	sub	local01, #8
1dba8     40 20 CE F7 | 	test	local02, #64 wz
1dbac     08 1E 06 51 |  if_ne	add	local01, #8
1dbb0     0F 21 02 5B |  if_ne	rdlong	local02, local01
1dbb4     80 20 46 55 |  if_ne	or	local02, #128
1dbb8     0F 21 62 5C |  if_ne	wrlong	local02, local01
1dbbc     08 1E 86 51 |  if_ne	sub	local01, #8
1dbc0     30 1E 06 F1 | 	add	local01, #48
1dbc4     0F 23 02 FB | 	rdlong	local03, local01
1dbc8     11 25 02 F6 | 	mov	local04, local03
1dbcc     30 1E 86 F1 | 	sub	local01, #48
1dbd0     13 24 46 F7 | 	zerox	local04, #19
1dbd4     14 22 46 F0 | 	shr	local03, #20
1dbd8     02 22 66 F0 | 	shl	local03, #2
1dbdc     ED 22 02 F1 | 	add	local03, __methods__
1dbe0     11 23 02 FB | 	rdlong	local03, local03
1dbe4     0F 13 02 F6 | 	mov	arg01, local01
1dbe8     F2 26 02 F6 | 	mov	local05, objptr
1dbec     12 E5 01 F6 | 	mov	objptr, local04
1dbf0     2D 22 62 FD | 	call	local03
1dbf4     13 E5 01 F6 | 	mov	objptr, local05
1dbf8     FD 28 02 F6 | 	mov	local06, result1
1dbfc     00 28 56 F2 | 	cmps	local06, #0 wc
1dc00     1C 00 90 3D |  if_ae	jmp	#LR__2980
1dc04     14 13 6A F6 | 	neg	arg01, local06 wz
1dc08     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dc0c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dc10     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dc14     01 FA 65 56 |  if_ne	neg	result1, #1
1dc18     00 FA 05 A6 |  if_e	mov	result1, #0
1dc1c     04 00 90 FD | 	jmp	#LR__2981
1dc20                 | LR__2980
1dc20     14 FB 01 F6 | 	mov	result1, local06
1dc24                 | LR__2981
1dc24     A7 F0 03 F6 | 	mov	ptra, fp
1dc28     B2 00 A0 FD | 	call	#popregs_
1dc2c                 | __system__lseek_ret
1dc2c     2D 00 64 FD | 	ret
1dc30                 | 
1dc30                 | __system___ioctl
1dc30     03 4A 05 F6 | 	mov	COUNT_, #3
1dc34     A8 00 A0 FD | 	call	#pushregs_
1dc38     00 12 4E F2 | 	cmps	arg01, #0 wz
1dc3c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1dc40     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1dc44     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1dc48     01 FA 65 A6 |  if_e	neg	result1, #1
1dc4c     5C 00 90 AD |  if_e	jmp	#LR__2991
1dc50     28 12 06 F1 | 	add	arg01, #40
1dc54     09 1F 02 FB | 	rdlong	local01, arg01
1dc58     0F 21 02 F6 | 	mov	local02, local01
1dc5c     28 12 86 F1 | 	sub	arg01, #40
1dc60     13 20 46 F7 | 	zerox	local02, #19
1dc64     14 1E 46 F0 | 	shr	local01, #20
1dc68     02 1E 66 F0 | 	shl	local01, #2
1dc6c     ED 1E 02 F1 | 	add	local01, __methods__
1dc70     0F 1F 02 FB | 	rdlong	local01, local01
1dc74     F2 22 02 F6 | 	mov	local03, objptr
1dc78     10 E5 01 F6 | 	mov	objptr, local02
1dc7c     2D 1E 62 FD | 	call	local01
1dc80     11 E5 01 F6 | 	mov	objptr, local03
1dc84     FD 12 0A F6 | 	mov	arg01, result1 wz
1dc88     1C 00 90 AD |  if_e	jmp	#LR__2990
1dc8c     00 12 4E F2 | 	cmps	arg01, #0 wz
1dc90     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1dc94     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1dc98     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1dc9c     01 FA 65 56 |  if_ne	neg	result1, #1
1dca0     00 FA 05 A6 |  if_e	mov	result1, #0
1dca4     04 00 90 FD | 	jmp	#LR__2991
1dca8                 | LR__2990
1dca8     00 FA 05 F6 | 	mov	result1, #0
1dcac                 | LR__2991
1dcac     A7 F0 03 F6 | 	mov	ptra, fp
1dcb0     B2 00 A0 FD | 	call	#popregs_
1dcb4                 | __system___ioctl_ret
1dcb4     2D 00 64 FD | 	ret
1dcb8                 | 
1dcb8                 | __system___isatty
1dcb8     00 4A 05 F6 | 	mov	COUNT_, #0
1dcbc     A8 00 A0 FD | 	call	#pushregs_
1dcc0     0C F0 07 F1 | 	add	ptra, #12
1dcc4     04 4E 05 F1 | 	add	fp, #4
1dcc8     A7 12 62 FC | 	wrlong	arg01, fp
1dccc     04 4E 05 F1 | 	add	fp, #4
1dcd0     A7 16 02 F6 | 	mov	arg03, fp
1dcd4     08 4E 85 F1 | 	sub	fp, #8
1dcd8     00 15 06 F6 | 	mov	arg02, #256
1dcdc     50 FF BF FD | 	call	#__system___ioctl
1dce0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dce4     01 FA 05 A6 |  if_e	mov	result1, #1
1dce8     00 FA 05 56 |  if_ne	mov	result1, #0
1dcec     A7 F0 03 F6 | 	mov	ptra, fp
1dcf0     B2 00 A0 FD | 	call	#popregs_
1dcf4                 | __system___isatty_ret
1dcf4     2D 00 64 FD | 	ret
1dcf8                 | 
1dcf8                 | __system____getftab
1dcf8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1dcfc     34 12 06 CD |  if_b	qmul	arg01, #52
1dd00     00 FA 05 36 |  if_ae	mov	result1, #0
1dd04     02 00 00 CF 
1dd08     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1dd0c     18 FA 61 CD |  if_b	getqx	result1
1dd10     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1dd14     02 00 00 CF 
1dd18     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1dd1c                 | __system____getftab_ret
1dd1c     2D 00 64 FD | 	ret
1dd20                 | 
1dd20                 | __system__strncpy
1dd20     09 01 02 F6 | 	mov	_var01, arg01
1dd24                 | LR__3000
1dd24     01 16 86 F1 | 	sub	arg03, #1
1dd28     00 16 56 F2 | 	cmps	arg03, #0 wc
1dd2c     18 00 90 CD |  if_b	jmp	#LR__3001
1dd30     0A FB C1 FA | 	rdbyte	result1, arg02
1dd34     00 FB 41 FC | 	wrbyte	result1, _var01
1dd38     01 14 06 F1 | 	add	arg02, #1
1dd3c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1dd40     01 00 06 F1 | 	add	_var01, #1
1dd44     DC FF 9F 5D |  if_ne	jmp	#LR__3000
1dd48                 | LR__3001
1dd48     97 0C 48 FB | 	callpa	#(@LR__3003-@LR__3002)>>2,fcache_load_ptr_
1dd4c                 | LR__3002
1dd4c     01 16 86 F1 | 	sub	arg03, #1
1dd50     00 16 56 F2 | 	cmps	arg03, #0 wc
1dd54     00 03 02 36 |  if_ae	mov	_var02, _var01
1dd58     01 00 06 31 |  if_ae	add	_var01, #1
1dd5c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1dd60     E8 FF 9F 3D |  if_ae	jmp	#LR__3002
1dd64                 | LR__3003
1dd64     09 FB 01 F6 | 	mov	result1, arg01
1dd68                 | __system__strncpy_ret
1dd68     2D 00 64 FD | 	ret
1dd6c                 | 
1dd6c                 | __system__strncat
1dd6c     00 14 4E F2 | 	cmps	arg02, #0 wz
1dd70     50 00 90 AD |  if_e	jmp	#LR__3014
1dd74     01 16 16 F2 | 	cmp	arg03, #1 wc
1dd78     48 00 90 CD |  if_b	jmp	#LR__3014
1dd7c     09 01 02 F6 | 	mov	_var01, arg01
1dd80     97 1E 48 FB | 	callpa	#(@LR__3012-@LR__3010)>>2,fcache_load_ptr_
1dd84                 | LR__3010
1dd84     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1dd88     01 00 06 51 |  if_ne	add	_var01, #1
1dd8c     F4 FF 9F 5D |  if_ne	jmp	#LR__3010
1dd90     0B 03 02 F6 | 	mov	_var02, arg03
1dd94                 | LR__3011
1dd94     0A 05 C2 FA | 	rdbyte	_var03, arg02
1dd98     02 07 02 F6 | 	mov	_var04, _var03
1dd9c     07 06 4E F7 | 	zerox	_var04, #7 wz
1dda0     01 14 06 F1 | 	add	arg02, #1
1dda4     18 00 90 AD |  if_e	jmp	#LR__3013
1dda8     01 02 86 F1 | 	sub	_var02, #1
1ddac     00 02 56 F2 | 	cmps	_var02, #0 wc
1ddb0     00 07 02 36 |  if_ae	mov	_var04, _var01
1ddb4     01 00 06 31 |  if_ae	add	_var01, #1
1ddb8     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1ddbc     D4 FF 9F 3D |  if_ae	jmp	#LR__3011
1ddc0                 | LR__3012
1ddc0                 | LR__3013
1ddc0     00 01 48 FC | 	wrbyte	#0, _var01
1ddc4                 | LR__3014
1ddc4     09 FB 01 F6 | 	mov	result1, arg01
1ddc8                 | __system__strncat_ret
1ddc8     2D 00 64 FD | 	ret
1ddcc                 | 
1ddcc                 | __system__strncmp
1ddcc     09 01 0A F6 | 	mov	_var01, arg01 wz
1ddd0     14 00 90 5D |  if_ne	jmp	#LR__3020
1ddd4     00 14 0E F2 | 	cmp	arg02, #0 wz
1ddd8     01 02 66 56 |  if_ne	neg	_var02, #1
1dddc     00 02 06 A6 |  if_e	mov	_var02, #0
1dde0     01 FB 01 F6 | 	mov	result1, _var02
1dde4     74 00 90 FD | 	jmp	#__system__strncmp_ret
1dde8                 | LR__3020
1dde8     00 14 0E F2 | 	cmp	arg02, #0 wz
1ddec     01 FA 05 A6 |  if_e	mov	result1, #1
1ddf0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1ddf4     0B 05 02 F6 | 	mov	_var03, arg03
1ddf8     97 16 48 FB | 	callpa	#(@LR__3022-@LR__3021)>>2,fcache_load_ptr_
1ddfc                 | LR__3021
1ddfc     00 07 C2 FA | 	rdbyte	_var04, _var01
1de00     0A 09 02 F6 | 	mov	_var05, arg02
1de04     04 0B C2 FA | 	rdbyte	_var06, _var05
1de08     01 04 86 F1 | 	sub	_var03, #1
1de0c     00 04 56 F2 | 	cmps	_var03, #0 wc
1de10     01 00 06 F1 | 	add	_var01, #1
1de14     01 14 06 F1 | 	add	arg02, #1
1de18     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1de1c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3023
1de20     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1de24     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3021
1de28                 | LR__3022
1de28                 | LR__3023
1de28     00 04 56 F2 | 	cmps	_var03, #0 wc
1de2c     00 FA 05 C6 |  if_b	mov	result1, #0
1de30     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1de34     05 07 0A F2 | 	cmp	_var04, _var06 wz
1de38     00 FA 05 A6 |  if_e	mov	result1, #0
1de3c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1de40     00 06 0E F2 | 	cmp	_var04, #0 wz
1de44     01 FA 65 A6 |  if_e	neg	result1, #1
1de48     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1de4c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1de50     01 FA 05 A6 |  if_e	mov	result1, #1
1de54     03 FB 01 56 |  if_ne	mov	result1, _var04
1de58     05 FB 81 51 |  if_ne	sub	result1, _var06
1de5c                 | __system__strncmp_ret
1de5c     2D 00 64 FD | 	ret
1de60                 | 
1de60                 | __system____root_opendir
1de60     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1de64     04 12 06 F1 | 	add	arg01, #4
1de68     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1de6c     00 FA 05 F6 | 	mov	result1, #0
1de70     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1de74                 | __system____root_opendir_ret
1de74     2D 00 64 FD | 	ret
1de78                 | 
1de78                 | __system____root_readdir
1de78     03 4A 05 F6 | 	mov	COUNT_, #3
1de7c     A8 00 A0 FD | 	call	#pushregs_
1de80     09 1F 02 F6 | 	mov	local01, arg01
1de84     0A 21 02 F6 | 	mov	local02, arg02
1de88     04 1E 06 F1 | 	add	local01, #4
1de8c     0F 23 02 FB | 	rdlong	local03, local01
1de90     04 1E 86 F1 | 	sub	local01, #4
1de94                 | LR__3030
1de94     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1de98     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1de9c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1dea0     01 FA 65 A6 |  if_e	neg	result1, #1
1dea4     48 00 90 AD |  if_e	jmp	#LR__3031
1dea8     11 17 0A FB | 	rdlong	arg03, local03 wz
1deac     04 22 06 A1 |  if_e	add	local03, #4
1deb0     E0 FF 9F AD |  if_e	jmp	#LR__3030
1deb4     11 15 02 FB | 	rdlong	arg02, local03
1deb8     01 14 06 F1 | 	add	arg02, #1
1debc     10 13 02 F6 | 	mov	arg01, local02
1dec0     40 16 06 F6 | 	mov	arg03, #64
1dec4     58 FE BF FD | 	call	#__system__strncpy
1dec8     50 20 06 F1 | 	add	local02, #80
1decc     10 03 48 FC | 	wrbyte	#1, local02
1ded0     08 20 86 F1 | 	sub	local02, #8
1ded4     10 01 68 FC | 	wrlong	#0, local02
1ded8     04 20 06 F1 | 	add	local02, #4
1dedc     10 01 68 FC | 	wrlong	#0, local02
1dee0     04 22 06 F1 | 	add	local03, #4
1dee4     04 1E 06 F1 | 	add	local01, #4
1dee8     0F 23 62 FC | 	wrlong	local03, local01
1deec     00 FA 05 F6 | 	mov	result1, #0
1def0                 | LR__3031
1def0     A7 F0 03 F6 | 	mov	ptra, fp
1def4     B2 00 A0 FD | 	call	#popregs_
1def8                 | __system____root_readdir_ret
1def8     2D 00 64 FD | 	ret
1defc                 | 
1defc                 | __system____root_closedir
1defc     00 FA 05 F6 | 	mov	result1, #0
1df00                 | __system____root_closedir_ret
1df00     2D 00 64 FD | 	ret
1df04                 | 
1df04                 | __system____root_stat
1df04     0A 01 02 F6 | 	mov	_var01, arg02
1df08     00 13 02 F6 | 	mov	arg01, _var01
1df0c     00 14 06 F6 | 	mov	arg02, #0
1df10     30 16 06 F6 | 	mov	arg03, #48
1df14     98 00 A0 FD | 	call	#\builtin_bytefill_
1df18     08 00 06 F1 | 	add	_var01, #8
1df1c     08 00 80 FF 
1df20     00 FF 6B FC | 	wrlong	##4607, _var01
1df24     00 FA 05 F6 | 	mov	result1, #0
1df28                 | __system____root_stat_ret
1df28     2D 00 64 FD | 	ret
1df2c                 | 
1df2c                 | __system___normalizeName
1df2c     00 00 06 F6 | 	mov	_var01, #0
1df30     09 03 02 F6 | 	mov	_var02, arg01
1df34     01 05 02 F6 | 	mov	_var03, _var02
1df38                 | LR__3040
1df38     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1df3c     5C 01 90 AD |  if_e	jmp	#LR__3059
1df40     00 00 0E F2 | 	cmp	_var01, #0 wz
1df44     02 07 02 56 |  if_ne	mov	_var04, _var03
1df48     01 04 06 51 |  if_ne	add	_var03, #1
1df4c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1df50     00 00 06 56 |  if_ne	mov	_var01, #0
1df54     01 07 C2 FA | 	rdbyte	_var04, _var02
1df58     2E 06 0E F2 | 	cmp	_var04, #46 wz
1df5c     D8 00 90 5D |  if_ne	jmp	#LR__3052
1df60     01 02 06 F1 | 	add	_var02, #1
1df64     01 07 C2 FA | 	rdbyte	_var04, _var02
1df68     01 02 86 F1 | 	sub	_var02, #1
1df6c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1df70     18 00 90 AD |  if_e	jmp	#LR__3041
1df74     01 02 06 F1 | 	add	_var02, #1
1df78     01 09 C2 FA | 	rdbyte	_var05, _var02
1df7c     01 02 86 F1 | 	sub	_var02, #1
1df80     04 0B 02 F6 | 	mov	_var06, _var05
1df84     07 0A 4E F7 | 	zerox	_var06, #7 wz
1df88     10 00 90 5D |  if_ne	jmp	#LR__3042
1df8c                 | LR__3041
1df8c     01 0D 02 F6 | 	mov	_var07, _var02
1df90     01 0C 06 F1 | 	add	_var07, #1
1df94     06 03 02 F6 | 	mov	_var02, _var07
1df98     E0 00 90 FD | 	jmp	#LR__3056
1df9c                 | LR__3042
1df9c     01 02 06 F1 | 	add	_var02, #1
1dfa0     01 0D C2 FA | 	rdbyte	_var07, _var02
1dfa4     01 02 86 F1 | 	sub	_var02, #1
1dfa8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1dfac     2E 06 0E F2 | 	cmp	_var04, #46 wz
1dfb0     84 00 90 5D |  if_ne	jmp	#LR__3051
1dfb4     02 02 06 F1 | 	add	_var02, #2
1dfb8     01 0D C2 FA | 	rdbyte	_var07, _var02
1dfbc     02 02 86 F1 | 	sub	_var02, #2
1dfc0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1dfc4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dfc8     18 00 90 AD |  if_e	jmp	#LR__3043
1dfcc     02 02 06 F1 | 	add	_var02, #2
1dfd0     01 09 C2 FA | 	rdbyte	_var05, _var02
1dfd4     02 02 86 F1 | 	sub	_var02, #2
1dfd8     04 0B 02 F6 | 	mov	_var06, _var05
1dfdc     07 0A 4E F7 | 	zerox	_var06, #7 wz
1dfe0     54 00 90 5D |  if_ne	jmp	#LR__3050
1dfe4                 | LR__3043
1dfe4     02 02 06 F1 | 	add	_var02, #2
1dfe8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1dfec     40 00 90 ED |  if_be	jmp	#LR__3049
1dff0     02 0F 02 F6 | 	mov	_var08, _var03
1dff4     01 0E 86 F1 | 	sub	_var08, #1
1dff8                 | LR__3044
1dff8     07 07 C2 FA | 	rdbyte	_var04, _var08
1dffc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e000     0C 00 90 5D |  if_ne	jmp	#LR__3045
1e004     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e008     01 0E 86 11 |  if_a	sub	_var08, #1
1e00c     E8 FF 9F 1D |  if_a	jmp	#LR__3044
1e010                 | LR__3045
1e010     97 0C 48 FB | 	callpa	#(@LR__3047-@LR__3046)>>2,fcache_load_ptr_
1e014                 | LR__3046
1e014     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1e018     10 00 90 ED |  if_be	jmp	#LR__3048
1e01c     07 07 C2 FA | 	rdbyte	_var04, _var08
1e020     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e024     01 0E 86 51 |  if_ne	sub	_var08, #1
1e028     E8 FF 9F 5D |  if_ne	jmp	#LR__3046
1e02c                 | LR__3047
1e02c                 | LR__3048
1e02c     07 05 02 F6 | 	mov	_var03, _var08
1e030                 | LR__3049
1e030     01 00 06 F6 | 	mov	_var01, #1
1e034     44 00 90 FD | 	jmp	#LR__3056
1e038                 | LR__3050
1e038                 | LR__3051
1e038                 | LR__3052
1e038     97 18 48 FB | 	callpa	#(@LR__3054-@LR__3053)>>2,fcache_load_ptr_
1e03c                 | LR__3053
1e03c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1e040     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1e044     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1e048     20 00 90 AD |  if_e	jmp	#LR__3055
1e04c     01 0B 02 F6 | 	mov	_var06, _var02
1e050     01 09 02 F6 | 	mov	_var05, _var02
1e054     01 08 06 F1 | 	add	_var05, #1
1e058     05 11 C2 FA | 	rdbyte	_var09, _var06
1e05c     04 03 02 F6 | 	mov	_var02, _var05
1e060     02 11 42 FC | 	wrbyte	_var09, _var03
1e064     01 04 06 F1 | 	add	_var03, #1
1e068     D0 FF 9F FD | 	jmp	#LR__3053
1e06c                 | LR__3054
1e06c                 | LR__3055
1e06c     01 07 C2 FA | 	rdbyte	_var04, _var02
1e070     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e074     C0 FE 9F 5D |  if_ne	jmp	#LR__3040
1e078     01 00 06 F6 | 	mov	_var01, #1
1e07c                 | LR__3056
1e07c     97 0C 48 FB | 	callpa	#(@LR__3058-@LR__3057)>>2,fcache_load_ptr_
1e080                 | LR__3057
1e080     01 07 C2 FA | 	rdbyte	_var04, _var02
1e084     2F 06 0E F2 | 	cmp	_var04, #47 wz
1e088     01 0D 02 A6 |  if_e	mov	_var07, _var02
1e08c     01 0C 06 A1 |  if_e	add	_var07, #1
1e090     06 03 02 A6 |  if_e	mov	_var02, _var07
1e094     E8 FF 9F AD |  if_e	jmp	#LR__3057
1e098                 | LR__3058
1e098     9C FE 9F FD | 	jmp	#LR__3040
1e09c                 | LR__3059
1e09c     02 01 48 FC | 	wrbyte	#0, _var03
1e0a0                 | __system___normalizeName_ret
1e0a0     2D 00 64 FD | 	ret
1e0a4                 | 
1e0a4                 | __system___strrev
1e0a4     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1e0a8     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1e0ac     09 03 02 F6 | 	mov	_var02, arg01
1e0b0     97 1A 48 FB | 	callpa	#(@LR__3062-@LR__3060)>>2,fcache_load_ptr_
1e0b4                 | LR__3060
1e0b4     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1e0b8     01 02 06 51 |  if_ne	add	_var02, #1
1e0bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3060
1e0c0     01 02 86 F1 | 	sub	_var02, #1
1e0c4                 | LR__3061
1e0c4     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1e0c8     1C 00 90 ED |  if_be	jmp	#LR__3063
1e0cc     09 01 C2 FA | 	rdbyte	_var01, arg01
1e0d0     01 05 C2 FA | 	rdbyte	_var03, _var02
1e0d4     09 05 42 FC | 	wrbyte	_var03, arg01
1e0d8     01 01 42 FC | 	wrbyte	_var01, _var02
1e0dc     01 12 06 F1 | 	add	arg01, #1
1e0e0     01 02 86 F1 | 	sub	_var02, #1
1e0e4     DC FF 9F FD | 	jmp	#LR__3061
1e0e8                 | LR__3062
1e0e8                 | LR__3063
1e0e8                 | __system___strrev_ret
1e0e8     2D 00 64 FD | 	ret
1e0ec                 | 
1e0ec                 | __system___fmtpad
1e0ec     06 4A 05 F6 | 	mov	COUNT_, #6
1e0f0     A8 00 A0 FD | 	call	#pushregs_
1e0f4     09 1F 02 F6 | 	mov	local01, arg01
1e0f8     0A 21 02 F6 | 	mov	local02, arg02
1e0fc     0B 23 02 F6 | 	mov	local03, arg03
1e100     10 13 EA F8 | 	getbyte	arg01, local02, #1
1e104     16 20 46 F0 | 	shr	local02, #22
1e108     03 20 0E F5 | 	and	local02, #3 wz
1e10c     00 24 06 F6 | 	mov	local04, #0
1e110     01 20 06 A6 |  if_e	mov	local02, #1
1e114     0C 21 CA F7 | 	test	local02, arg04 wz
1e118     00 FA 05 A6 |  if_e	mov	result1, #0
1e11c     88 00 90 AD |  if_e	jmp	#LR__3073
1e120     09 23 C2 F2 | 	subr	local03, arg01
1e124     01 22 56 F2 | 	cmps	local03, #1 wc
1e128     00 FA 05 C6 |  if_b	mov	result1, #0
1e12c     78 00 90 CD |  if_b	jmp	#LR__3073
1e130     03 20 0E F2 | 	cmp	local02, #3 wz
1e134     18 00 90 5D |  if_ne	jmp	#LR__3070
1e138     01 18 0E F2 | 	cmp	arg04, #1 wz
1e13c     6E 20 62 FD | 	wrz	local02
1e140     10 23 02 F1 | 	add	local03, local02
1e144     11 23 52 F6 | 	abs	local03, local03 wc
1e148     01 22 46 F0 | 	shr	local03, #1
1e14c     11 23 82 F6 | 	negc	local03, local03
1e150                 | LR__3070
1e150     01 22 56 F2 | 	cmps	local03, #1 wc
1e154     4C 00 90 CD |  if_b	jmp	#LR__3072
1e158     11 27 02 F6 | 	mov	local05, local03
1e15c                 | LR__3071
1e15c     0F 21 02 F6 | 	mov	local02, local01
1e160     0F 29 02 F6 | 	mov	local06, local01
1e164     13 20 46 F7 | 	zerox	local02, #19
1e168     14 28 46 F0 | 	shr	local06, #20
1e16c     02 28 66 F0 | 	shl	local06, #2
1e170     ED 28 02 F1 | 	add	local06, __methods__
1e174     14 29 02 FB | 	rdlong	local06, local06
1e178     20 12 06 F6 | 	mov	arg01, #32
1e17c     F2 22 02 F6 | 	mov	local03, objptr
1e180     10 E5 01 F6 | 	mov	objptr, local02
1e184     2D 28 62 FD | 	call	local06
1e188     11 E5 01 F6 | 	mov	objptr, local03
1e18c     FD 28 02 F6 | 	mov	local06, result1
1e190     00 28 56 F2 | 	cmps	local06, #0 wc
1e194     14 FB 01 C6 |  if_b	mov	result1, local06
1e198     0C 00 90 CD |  if_b	jmp	#LR__3073
1e19c     14 25 02 F1 | 	add	local04, local06
1e1a0     EE 27 6E FB | 	djnz	local05, #LR__3071
1e1a4                 | LR__3072
1e1a4     12 FB 01 F6 | 	mov	result1, local04
1e1a8                 | LR__3073
1e1a8     A7 F0 03 F6 | 	mov	ptra, fp
1e1ac     B2 00 A0 FD | 	call	#popregs_
1e1b0                 | __system___fmtpad_ret
1e1b0     2D 00 64 FD | 	ret
1e1b4                 | 
1e1b4                 | __system___uitoa
1e1b4     04 4A 05 F6 | 	mov	COUNT_, #4
1e1b8     A8 00 A0 FD | 	call	#pushregs_
1e1bc     09 1F 02 F6 | 	mov	local01, arg01
1e1c0     00 1A 4E F2 | 	cmps	arg05, #0 wz
1e1c4     0F 1B 02 F6 | 	mov	arg05, local01
1e1c8     00 20 06 F6 | 	mov	local02, #0
1e1cc     37 22 06 56 |  if_ne	mov	local03, #55
1e1d0     57 22 06 A6 |  if_e	mov	local03, #87
1e1d4                 | LR__3080
1e1d4     0B 15 12 FD | 	qdiv	arg02, arg03
1e1d8     19 24 62 FD | 	getqy	local04
1e1dc     0B 15 12 FD | 	qdiv	arg02, arg03
1e1e0     0A 24 16 F2 | 	cmp	local04, #10 wc
1e1e4     30 24 06 C1 |  if_b	add	local04, #48
1e1e8     11 25 02 31 |  if_ae	add	local04, local03
1e1ec     0D 25 42 FC | 	wrbyte	local04, arg05
1e1f0     01 1A 06 F1 | 	add	arg05, #1
1e1f4     01 20 06 F1 | 	add	local02, #1
1e1f8     18 14 62 FD | 	getqx	arg02
1e1fc     00 14 0E F2 | 	cmp	arg02, #0 wz
1e200     D0 FF 9F 5D |  if_ne	jmp	#LR__3080
1e204     0C 21 12 F2 | 	cmp	local02, arg04 wc
1e208     C8 FF 9F CD |  if_b	jmp	#LR__3080
1e20c     0D 01 48 FC | 	wrbyte	#0, arg05
1e210     0F 13 02 F6 | 	mov	arg01, local01
1e214     8C FE BF FD | 	call	#__system___strrev
1e218     10 FB 01 F6 | 	mov	result1, local02
1e21c     A7 F0 03 F6 | 	mov	ptra, fp
1e220     B2 00 A0 FD | 	call	#popregs_
1e224                 | __system___uitoa_ret
1e224     2D 00 64 FD | 	ret
1e228                 | 
1e228                 | __system__disassemble_0375
1e228     10 4A 05 F6 | 	mov	COUNT_, #16
1e22c     A8 00 A0 FD | 	call	#pushregs_
1e230     09 1F 02 F6 | 	mov	local01, arg01
1e234     0A 21 02 F6 | 	mov	local02, arg02
1e238     0B 23 02 F6 | 	mov	local03, arg03
1e23c     0C 25 02 F6 | 	mov	local04, arg04
1e240     0D 27 02 F6 | 	mov	local05, arg05
1e244     13 13 52 F6 | 	abs	arg01, local05 wc
1e248     1F 28 C6 C9 |  if_b	decod	local06, #31
1e24c     00 28 06 36 |  if_ae	mov	local06, #0
1e250     64 D0 BF FD | 	call	#__system___float_fromuns
1e254     14 FB 61 F5 | 	xor	result1, local06
1e258     FD 2A 02 F6 | 	mov	local07, result1
1e25c     00 2C 06 F6 | 	mov	local08, #0
1e260     0F 13 02 F6 | 	mov	arg01, local01
1e264     00 14 06 F6 | 	mov	arg02, #0
1e268     01 16 06 F6 | 	mov	arg03, #1
1e26c     80 D8 BF FD | 	call	#__system___float_cmp
1e270     00 FA 0D F2 | 	cmp	result1, #0 wz
1e274     00 2E 06 A6 |  if_e	mov	local09, #0
1e278     10 01 68 AC |  if_e	wrlong	#0, local02
1e27c     11 2F 62 AC |  if_e	wrlong	local09, local03
1e280     8C 01 90 AD |  if_e	jmp	#LR__3102
1e284     0F 13 02 F6 | 	mov	arg01, local01
1e288     30 DD BF FD | 	call	#__system____builtin_ilogb
1e28c     FD 30 02 F6 | 	mov	local10, result1
1e290     0A 26 0E F2 | 	cmp	local05, #10 wz
1e294     24 00 90 5D |  if_ne	jmp	#LR__3090
1e298     18 2F 02 F6 | 	mov	local09, local10
1e29c     01 2E 66 F0 | 	shl	local09, #1
1e2a0     18 2F 02 F1 | 	add	local09, local10
1e2a4     17 31 52 F6 | 	abs	local10, local09 wc
1e2a8     0A 30 16 FD | 	qdiv	local10, #10
1e2ac     09 32 06 F6 | 	mov	local11, #9
1e2b0     18 30 62 FD | 	getqx	local10
1e2b4     18 31 82 F6 | 	negc	local10, local10
1e2b8     04 00 90 FD | 	jmp	#LR__3091
1e2bc                 | LR__3090
1e2bc     18 32 06 F6 | 	mov	local11, #24
1e2c0                 | LR__3091
1e2c0                 | LR__3092
1e2c0     08 2C 56 F2 | 	cmps	local08, #8 wc
1e2c4     01 2C 06 F1 | 	add	local08, #1
1e2c8     60 00 90 3D |  if_ae	jmp	#LR__3093
1e2cc     00 C0 1F FF 
1e2d0     00 12 06 F6 | 	mov	arg01, ##1065353216
1e2d4     15 15 02 F6 | 	mov	arg02, local07
1e2d8     18 17 02 F6 | 	mov	arg03, local10
1e2dc     88 E3 BF FD | 	call	#__system___float_pow_n
1e2e0     FD 14 02 F6 | 	mov	arg02, result1
1e2e4     0F 13 02 F6 | 	mov	arg01, local01
1e2e8     D4 D5 BF FD | 	call	#__system___float_div
1e2ec     FD 34 02 F6 | 	mov	local12, result1
1e2f0     1A 13 02 F6 | 	mov	arg01, local12
1e2f4     00 C0 1F FF 
1e2f8     00 14 06 F6 | 	mov	arg02, ##1065353216
1e2fc     01 16 06 F6 | 	mov	arg03, #1
1e300     EC D7 BF FD | 	call	#__system___float_cmp
1e304     00 FA 55 F2 | 	cmps	result1, #0 wc
1e308     01 30 86 C1 |  if_b	sub	local10, #1
1e30c     B0 FF 9F CD |  if_b	jmp	#LR__3092
1e310     15 15 02 F6 | 	mov	arg02, local07
1e314     1A 13 02 F6 | 	mov	arg01, local12
1e318     01 16 66 F6 | 	neg	arg03, #1
1e31c     D0 D7 BF FD | 	call	#__system___float_cmp
1e320     00 FA 55 F2 | 	cmps	result1, #0 wc
1e324     01 30 06 31 |  if_ae	add	local10, #1
1e328     94 FF 9F 3D |  if_ae	jmp	#LR__3092
1e32c                 | LR__3093
1e32c     1A 13 02 F6 | 	mov	arg01, local12
1e330     88 DC BF FD | 	call	#__system____builtin_ilogb
1e334     FD 36 02 F6 | 	mov	local13, result1
1e338     1A 39 02 F6 | 	mov	local14, local12
1e33c     17 39 06 F4 | 	bitl	local14, #279
1e340     17 38 26 F4 | 	bith	local14, #23
1e344     1B 39 62 F0 | 	shl	local14, local13
1e348     02 26 0E F2 | 	cmp	local05, #2 wz
1e34c     02 24 66 A0 |  if_e	shl	local04, #2
1e350     00 3A 06 F6 | 	mov	local15, #0
1e354     00 24 56 F2 | 	cmps	local04, #0 wc
1e358     10 00 90 3D |  if_ae	jmp	#LR__3094
1e35c     18 25 C2 F2 | 	subr	local04, local10
1e360     00 24 56 F2 | 	cmps	local04, #0 wc
1e364     A0 00 90 CD |  if_b	jmp	#LR__3101
1e368     04 00 90 FD | 	jmp	#LR__3095
1e36c                 | LR__3094
1e36c     01 24 06 F1 | 	add	local04, #1
1e370                 | LR__3095
1e370     19 25 7A F3 | 	fles	local04, local11 wcz
1e374     01 3C 06 F6 | 	mov	local16, #1
1e378     97 22 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
1e37c                 | LR__3096
1e37c     00 40 00 FF 
1e380     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1e384     38 00 90 3D |  if_ae	jmp	#LR__3098
1e388     01 24 56 F2 | 	cmps	local04, #1 wc
1e38c     01 24 86 F1 | 	sub	local04, #1
1e390     2C 00 90 CD |  if_b	jmp	#LR__3098
1e394     13 3B 02 FD | 	qmul	local15, local05
1e398     1C 37 02 F6 | 	mov	local13, local14
1e39c     17 36 46 F0 | 	shr	local13, #23
1e3a0     17 39 06 F4 | 	bitl	local14, #279
1e3a4     18 3A 62 FD | 	getqx	local15
1e3a8     13 3D 02 FD | 	qmul	local16, local05
1e3ac     18 3C 62 FD | 	getqx	local16
1e3b0     13 39 02 FD | 	qmul	local14, local05
1e3b4     1B 3B 02 F1 | 	add	local15, local13
1e3b8     18 38 62 FD | 	getqx	local14
1e3bc     BC FF 9F FD | 	jmp	#LR__3096
1e3c0                 | LR__3097
1e3c0                 | LR__3098
1e3c0     13 2F 02 F6 | 	mov	local09, local05
1e3c4     17 2E 66 F0 | 	shl	local09, #23
1e3c8     17 37 52 F6 | 	abs	local13, local09 wc
1e3cc     01 36 46 F0 | 	shr	local13, #1
1e3d0     1B 37 82 F6 | 	negc	local13, local13
1e3d4     1B 39 1A F2 | 	cmp	local14, local13 wcz
1e3d8     20 00 90 1D |  if_a	jmp	#LR__3099
1e3dc     17 26 66 F0 | 	shl	local05, #23
1e3e0     13 37 52 F6 | 	abs	local13, local05 wc
1e3e4     01 36 46 F0 | 	shr	local13, #1
1e3e8     1B 37 82 F6 | 	negc	local13, local13
1e3ec     1B 39 0A F2 | 	cmp	local14, local13 wz
1e3f0     14 00 90 5D |  if_ne	jmp	#LR__3100
1e3f4     01 3A CE F7 | 	test	local15, #1 wz
1e3f8     0C 00 90 AD |  if_e	jmp	#LR__3100
1e3fc                 | LR__3099
1e3fc     01 3A 06 F1 | 	add	local15, #1
1e400     1E 3B 0A F2 | 	cmp	local15, local16 wz
1e404     01 30 06 A1 |  if_e	add	local10, #1
1e408                 | LR__3100
1e408                 | LR__3101
1e408     10 3B 62 FC | 	wrlong	local15, local02
1e40c     11 31 62 FC | 	wrlong	local10, local03
1e410                 | LR__3102
1e410     A7 F0 03 F6 | 	mov	ptra, fp
1e414     B2 00 A0 FD | 	call	#popregs_
1e418                 | __system__disassemble_0375_ret
1e418     2D 00 64 FD | 	ret
1e41c                 | 
1e41c                 | __system__emitsign_0377
1e41c     00 FA 05 F6 | 	mov	result1, #0
1e420     00 14 0E F2 | 	cmp	arg02, #0 wz
1e424     09 01 02 56 |  if_ne	mov	_var01, arg01
1e428     01 12 06 51 |  if_ne	add	arg01, #1
1e42c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e430     01 FA 05 56 |  if_ne	mov	result1, #1
1e434     00 16 0E F2 | 	cmp	arg03, #0 wz
1e438     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e43c     01 12 06 51 |  if_ne	add	arg01, #1
1e440     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e444     02 FA 05 51 |  if_ne	add	result1, #2
1e448                 | __system__emitsign_0377_ret
1e448     2D 00 64 FD | 	ret
1e44c                 | 
1e44c                 | __system___gettxfunc
1e44c     01 4A 05 F6 | 	mov	COUNT_, #1
1e450     A8 00 A0 FD | 	call	#pushregs_
1e454     A0 F8 BF FD | 	call	#__system____getftab
1e458     FD 1E 0A F6 | 	mov	local01, result1 wz
1e45c     10 00 90 AD |  if_e	jmp	#LR__3110
1e460     08 1E 06 F1 | 	add	local01, #8
1e464     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e468     08 1E 86 F1 | 	sub	local01, #8
1e46c     08 00 90 5D |  if_ne	jmp	#LR__3111
1e470                 | LR__3110
1e470     00 FA 05 F6 | 	mov	result1, #0
1e474     0C 00 90 FD | 	jmp	#LR__3112
1e478                 | LR__3111
1e478     00 10 03 FF 
1e47c     00 1E 46 F5 | 	or	local01, ##102760448
1e480     0F FB 01 F6 | 	mov	result1, local01
1e484                 | LR__3112
1e484     A7 F0 03 F6 | 	mov	ptra, fp
1e488     B2 00 A0 FD | 	call	#popregs_
1e48c                 | __system___gettxfunc_ret
1e48c     2D 00 64 FD | 	ret
1e490                 | 
1e490                 | __system___getrxfunc
1e490     01 4A 05 F6 | 	mov	COUNT_, #1
1e494     A8 00 A0 FD | 	call	#pushregs_
1e498     5C F8 BF FD | 	call	#__system____getftab
1e49c     FD 1E 0A F6 | 	mov	local01, result1 wz
1e4a0     10 00 90 AD |  if_e	jmp	#LR__3120
1e4a4     08 1E 06 F1 | 	add	local01, #8
1e4a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e4ac     08 1E 86 F1 | 	sub	local01, #8
1e4b0     08 00 90 5D |  if_ne	jmp	#LR__3121
1e4b4                 | LR__3120
1e4b4     00 FA 05 F6 | 	mov	result1, #0
1e4b8     0C 00 90 FD | 	jmp	#LR__3122
1e4bc                 | LR__3121
1e4bc     00 18 03 FF 
1e4c0     00 1E 46 F5 | 	or	local01, ##103809024
1e4c4     0F FB 01 F6 | 	mov	result1, local01
1e4c8                 | LR__3122
1e4c8     A7 F0 03 F6 | 	mov	ptra, fp
1e4cc     B2 00 A0 FD | 	call	#popregs_
1e4d0                 | __system___getrxfunc_ret
1e4d0     2D 00 64 FD | 	ret
1e4d4                 | 
1e4d4                 | __system___getiolock_0417
1e4d4     01 4A 05 F6 | 	mov	COUNT_, #1
1e4d8     A8 00 A0 FD | 	call	#pushregs_
1e4dc     18 F8 BF FD | 	call	#__system____getftab
1e4e0     FD 1E 0A F6 | 	mov	local01, result1 wz
1e4e4     10 00 90 AD |  if_e	jmp	#LR__3130
1e4e8     08 1E 06 F1 | 	add	local01, #8
1e4ec     0F FB 09 FB | 	rdlong	result1, local01 wz
1e4f0     08 1E 86 F1 | 	sub	local01, #8
1e4f4     18 00 90 5D |  if_ne	jmp	#LR__3131
1e4f8                 | LR__3130
1e4f8     01 00 00 FF 
1e4fc     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e500     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e504     01 00 00 FF 
1e508     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e50c     08 00 90 FD | 	jmp	#LR__3132
1e510                 | LR__3131
1e510     0C 1E 06 F1 | 	add	local01, #12
1e514     0F FB 01 F6 | 	mov	result1, local01
1e518                 | LR__3132
1e518     A7 F0 03 F6 | 	mov	ptra, fp
1e51c     B2 00 A0 FD | 	call	#popregs_
1e520                 | __system___getiolock_0417_ret
1e520     2D 00 64 FD | 	ret
1e524                 | 
1e524                 | __system____ScanForChar
1e524     09 01 02 F6 | 	mov	_var01, arg01
1e528     09 03 02 F6 | 	mov	_var02, arg01
1e52c     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
1e530                 | LR__3140
1e530     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1e534     01 02 06 51 |  if_ne	add	_var02, #1
1e538     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
1e53c                 | LR__3141
1e53c     09 03 82 F1 | 	sub	_var02, arg01
1e540     01 FB 01 F6 | 	mov	result1, _var02
1e544     FD 12 0A F6 | 	mov	arg01, result1 wz
1e548     00 FA 05 A6 |  if_e	mov	result1, #0
1e54c     B8 00 90 AD |  if_e	jmp	#LR__3148
1e550     0A 05 02 F6 | 	mov	_var03, arg02
1e554     07 04 4E F7 | 	zerox	_var03, #7 wz
1e558     00 FA 05 A6 |  if_e	mov	result1, #0
1e55c     A8 00 90 AD |  if_e	jmp	#LR__3148
1e560     01 16 16 F2 | 	cmp	arg03, #1 wc
1e564     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1e568     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1e56c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1e570     94 00 90 4D |  if_c_and_nz	jmp	#LR__3148
1e574     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1e578     10 00 90 ED |  if_be	jmp	#LR__3142
1e57c     00 18 0E F2 | 	cmp	arg04, #0 wz
1e580     00 FA 05 A6 |  if_e	mov	result1, #0
1e584     80 00 90 AD |  if_e	jmp	#LR__3148
1e588     09 17 02 F6 | 	mov	arg03, arg01
1e58c                 | LR__3142
1e58c     01 16 86 F1 | 	sub	arg03, #1
1e590     00 18 0E F2 | 	cmp	arg04, #0 wz
1e594     38 00 90 5D |  if_ne	jmp	#LR__3144
1e598     0B 07 02 F6 | 	mov	_var04, arg03
1e59c     09 09 02 F6 | 	mov	_var05, arg01
1e5a0                 | LR__3143
1e5a0     04 07 12 F2 | 	cmp	_var04, _var05 wc
1e5a4     5C 00 90 3D |  if_ae	jmp	#LR__3147
1e5a8     03 05 02 F6 | 	mov	_var03, _var04
1e5ac     00 05 02 F1 | 	add	_var03, _var01
1e5b0     02 05 C2 FA | 	rdbyte	_var03, _var03
1e5b4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1e5b8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1e5bc     01 06 06 A1 |  if_e	add	_var04, #1
1e5c0     03 FB 01 A6 |  if_e	mov	result1, _var04
1e5c4     40 00 90 AD |  if_e	jmp	#LR__3148
1e5c8     01 06 06 F1 | 	add	_var04, #1
1e5cc     D0 FF 9F FD | 	jmp	#LR__3143
1e5d0                 | LR__3144
1e5d0     0B 07 02 F6 | 	mov	_var04, arg03
1e5d4                 | LR__3145
1e5d4     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1e5d8     28 00 90 1D |  if_a	jmp	#LR__3146
1e5dc     03 09 02 F6 | 	mov	_var05, _var04
1e5e0     00 09 02 F1 | 	add	_var05, _var01
1e5e4     04 05 C2 FA | 	rdbyte	_var03, _var05
1e5e8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1e5ec     04 05 0A F2 | 	cmp	_var03, _var05 wz
1e5f0     01 06 06 A1 |  if_e	add	_var04, #1
1e5f4     03 FB 01 A6 |  if_e	mov	result1, _var04
1e5f8     0C 00 90 AD |  if_e	jmp	#LR__3148
1e5fc     01 06 86 F1 | 	sub	_var04, #1
1e600     D0 FF 9F FD | 	jmp	#LR__3145
1e604                 | LR__3146
1e604                 | LR__3147
1e604     00 FA 05 F6 | 	mov	result1, #0
1e608                 | LR__3148
1e608                 | __system____ScanForChar_ret
1e608     2D 00 64 FD | 	ret
1e60c                 | 
1e60c                 | __system___basic_dir
1e60c     05 4A 05 F6 | 	mov	COUNT_, #5
1e610     A8 00 A0 FD | 	call	#pushregs_
1e614     4C F0 07 F1 | 	add	ptra, #76
1e618     04 4E 05 F1 | 	add	fp, #4
1e61c     A7 12 62 FC | 	wrlong	arg01, fp
1e620     04 4E 05 F1 | 	add	fp, #4
1e624     A7 14 62 FC | 	wrlong	arg02, fp
1e628     04 4E 85 F1 | 	sub	fp, #4
1e62c     A7 14 0A FB | 	rdlong	arg02, fp wz
1e630     04 4E 85 F1 | 	sub	fp, #4
1e634     04 4E 05 51 |  if_ne	add	fp, #4
1e638     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e63c     04 4E 85 51 |  if_ne	sub	fp, #4
1e640     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e644     70 00 90 AD |  if_e	jmp	#LR__3150
1e648     03 00 00 FF 
1e64c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e650     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e654     03 00 00 FF 
1e658     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e65c     03 00 00 5F 
1e660     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e664     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e668     03 00 00 5F 
1e66c     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e670     14 EA BF 5D |  if_ne	call	#__system__closedir
1e674     40 01 00 FF 
1e678     50 13 06 F6 | 	mov	arg01, ##@LR__4308
1e67c     1C E9 BF FD | 	call	#__system__opendir
1e680     03 00 00 FF 
1e684     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e688     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e68c     08 4E 05 F1 | 	add	fp, #8
1e690     A7 20 02 FB | 	rdlong	local02, fp
1e694     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e698     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e69c     04 4E 85 F1 | 	sub	fp, #4
1e6a0     A7 20 02 FB | 	rdlong	local02, fp
1e6a4     04 4E 85 F1 | 	sub	fp, #4
1e6a8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e6ac     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e6b0     03 00 00 FF 
1e6b4     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e6b8                 | LR__3150
1e6b8     03 00 00 FF 
1e6bc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e6c0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e6c4     03 00 00 FF 
1e6c8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e6cc     40 01 00 AF 
1e6d0     52 FB 05 A6 |  if_e	mov	result1, ##@LR__4309
1e6d4     84 02 90 AD |  if_e	jmp	#LR__3163
1e6d8                 | LR__3151
1e6d8     03 00 00 FF 
1e6dc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e6e0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e6e4     03 00 00 FF 
1e6e8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e6ec     0C EA BF FD | 	call	#__system__readdir
1e6f0     0C 4E 05 F1 | 	add	fp, #12
1e6f4     A7 FA 61 FC | 	wrlong	result1, fp
1e6f8     0C 4E 85 F1 | 	sub	fp, #12
1e6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e700     38 00 90 5D |  if_ne	jmp	#LR__3152
1e704     03 00 00 FF 
1e708     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e70c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e710     03 00 00 FF 
1e714     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e718     6C E9 BF FD | 	call	#__system__closedir
1e71c     03 00 00 FF 
1e720     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e724     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e728     03 00 00 FF 
1e72c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e730     40 01 00 FF 
1e734     54 FB 05 F6 | 	mov	result1, ##@LR__4310
1e738     20 02 90 FD | 	jmp	#LR__3163
1e73c                 | LR__3152
1e73c     0C 4E 05 F1 | 	add	fp, #12
1e740     A7 12 02 FB | 	rdlong	arg01, fp
1e744     0C 4E 85 F1 | 	sub	fp, #12
1e748     03 00 00 FF 
1e74c     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e750     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e754     03 00 00 FF 
1e758     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e75c     48 07 B0 FD | 	call	#__system___pat_match
1e760     00 FA 0D F2 | 	cmp	result1, #0 wz
1e764     70 FF 9F AD |  if_e	jmp	#LR__3151
1e768     03 00 00 FF 
1e76c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e770     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e774     03 00 00 FF 
1e778     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e77c     78 01 90 AD |  if_e	jmp	#LR__3159
1e780     0C 4E 05 F1 | 	add	fp, #12
1e784     A7 12 02 FB | 	rdlong	arg01, fp
1e788     04 4E 05 F1 | 	add	fp, #4
1e78c     A7 14 02 F6 | 	mov	arg02, fp
1e790     10 4E 85 F1 | 	sub	fp, #16
1e794     68 F2 BF FD | 	call	#__system__stat
1e798     40 4E 05 F1 | 	add	fp, #64
1e79c     A7 FA 61 FC | 	wrlong	result1, fp
1e7a0     40 4E 85 F1 | 	sub	fp, #64
1e7a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7a8     40 01 00 5F 
1e7ac     56 FB 05 56 |  if_ne	mov	result1, ##@LR__4311
1e7b0     A8 01 90 5D |  if_ne	jmp	#LR__3163
1e7b4     18 4E 05 F1 | 	add	fp, #24
1e7b8     A7 20 02 FB | 	rdlong	local02, fp
1e7bc     78 00 00 FF 
1e7c0     00 20 06 F5 | 	and	local02, ##61440
1e7c4     2C 4E 05 F1 | 	add	fp, #44
1e7c8     A7 20 62 FC | 	wrlong	local02, fp
1e7cc     38 4E 85 F1 | 	sub	fp, #56
1e7d0     A7 20 02 FB | 	rdlong	local02, fp
1e7d4     0C 4E 85 F1 | 	sub	fp, #12
1e7d8     10 21 C2 FA | 	rdbyte	local02, local02
1e7dc     2E 20 0E F2 | 	cmp	local02, #46 wz
1e7e0     08 4E 05 A1 |  if_e	add	fp, #8
1e7e4     A7 04 68 AC |  if_e	wrlong	#2, fp
1e7e8     08 4E C5 F3 | 	sumz	fp, #8
1e7ec     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e7f0     08 4E 85 51 |  if_ne	sub	fp, #8
1e7f4     44 4E 05 F1 | 	add	fp, #68
1e7f8     A7 20 02 FB | 	rdlong	local02, fp
1e7fc     44 4E 85 F1 | 	sub	fp, #68
1e800     08 00 00 FF 
1e804     00 20 0E F2 | 	cmp	local02, ##4096 wz
1e808     18 00 90 5D |  if_ne	jmp	#LR__3153
1e80c     08 4E 05 F1 | 	add	fp, #8
1e810     A7 20 02 FB | 	rdlong	local02, fp
1e814     10 20 46 F5 | 	or	local02, #16
1e818     A7 20 62 FC | 	wrlong	local02, fp
1e81c     08 4E 85 F1 | 	sub	fp, #8
1e820     AC 00 90 FD | 	jmp	#LR__3158
1e824                 | LR__3153
1e824     44 4E 05 F1 | 	add	fp, #68
1e828     A7 20 02 FB | 	rdlong	local02, fp
1e82c     44 4E 85 F1 | 	sub	fp, #68
1e830     10 00 00 FF 
1e834     00 20 0E F2 | 	cmp	local02, ##8192 wz
1e838     44 4E 05 51 |  if_ne	add	fp, #68
1e83c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e840     44 4E 85 51 |  if_ne	sub	fp, #68
1e844     18 00 00 5F 
1e848     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1e84c     44 4E 05 51 |  if_ne	add	fp, #68
1e850     0F 23 02 56 |  if_ne	mov	local03, local01
1e854     44 4E 85 51 |  if_ne	sub	fp, #68
1e858     20 00 00 5F 
1e85c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1e860     18 00 90 5D |  if_ne	jmp	#LR__3154
1e864     08 4E 05 F1 | 	add	fp, #8
1e868     A7 20 02 FB | 	rdlong	local02, fp
1e86c     04 20 46 F5 | 	or	local02, #4
1e870     A7 20 62 FC | 	wrlong	local02, fp
1e874     08 4E 85 F1 | 	sub	fp, #8
1e878     54 00 90 FD | 	jmp	#LR__3157
1e87c                 | LR__3154
1e87c     18 4E 05 F1 | 	add	fp, #24
1e880     A7 20 02 FB | 	rdlong	local02, fp
1e884     18 4E 85 F1 | 	sub	fp, #24
1e888     92 20 CE F7 | 	test	local02, #146 wz
1e88c     18 00 90 5D |  if_ne	jmp	#LR__3155
1e890     08 4E 05 F1 | 	add	fp, #8
1e894     A7 20 02 FB | 	rdlong	local02, fp
1e898     01 20 46 F5 | 	or	local02, #1
1e89c     A7 20 62 FC | 	wrlong	local02, fp
1e8a0     08 4E 85 F1 | 	sub	fp, #8
1e8a4     28 00 90 FD | 	jmp	#LR__3156
1e8a8                 | LR__3155
1e8a8     44 4E 05 F1 | 	add	fp, #68
1e8ac     A7 24 02 FB | 	rdlong	local04, fp
1e8b0     44 4E 85 F1 | 	sub	fp, #68
1e8b4     08 00 00 FF 
1e8b8     00 24 0E F2 | 	cmp	local04, ##4096 wz
1e8bc     08 4E 05 51 |  if_ne	add	fp, #8
1e8c0     A7 24 02 5B |  if_ne	rdlong	local04, fp
1e8c4     20 24 46 55 |  if_ne	or	local04, #32
1e8c8     A7 24 62 5C |  if_ne	wrlong	local04, fp
1e8cc     08 4E 85 51 |  if_ne	sub	fp, #8
1e8d0                 | LR__3156
1e8d0                 | LR__3157
1e8d0                 | LR__3158
1e8d0     08 4E 05 F1 | 	add	fp, #8
1e8d4     A7 24 02 FB | 	rdlong	local04, fp
1e8d8     08 4E 85 F1 | 	sub	fp, #8
1e8dc     03 00 00 FF 
1e8e0     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e8e4     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1e8e8     03 00 00 FF 
1e8ec     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e8f0     0F 25 CA F7 | 	test	local04, local01 wz
1e8f4     E0 FD 9F AD |  if_e	jmp	#LR__3151
1e8f8                 | LR__3159
1e8f8     0C 4E 05 F1 | 	add	fp, #12
1e8fc     A7 12 02 FB | 	rdlong	arg01, fp
1e900     0C 4E 85 F1 | 	sub	fp, #12
1e904     09 27 02 F6 | 	mov	local05, arg01
1e908     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
1e90c                 | LR__3160
1e90c     13 FB C9 FA | 	rdbyte	result1, local05 wz
1e910     01 26 06 51 |  if_ne	add	local05, #1
1e914     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
1e918                 | LR__3161
1e918     13 13 C2 F2 | 	subr	arg01, local05
1e91c     01 12 06 F1 | 	add	arg01, #1
1e920     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1e924     48 4E 05 F1 | 	add	fp, #72
1e928     A7 FA 61 FC | 	wrlong	result1, fp
1e92c     48 4E 85 F1 | 	sub	fp, #72
1e930     00 FA 0D F2 | 	cmp	result1, #0 wz
1e934     18 00 90 AD |  if_e	jmp	#LR__3162
1e938     48 4E 05 F1 | 	add	fp, #72
1e93c     A7 12 02 FB | 	rdlong	arg01, fp
1e940     3C 4E 85 F1 | 	sub	fp, #60
1e944     A7 14 02 FB | 	rdlong	arg02, fp
1e948     0C 4E 85 F1 | 	sub	fp, #12
1e94c     38 A2 BF FD | 	call	#__system____builtin_strcpy
1e950                 | LR__3162
1e950     48 4E 05 F1 | 	add	fp, #72
1e954     A7 FA 01 FB | 	rdlong	result1, fp
1e958     48 4E 85 F1 | 	sub	fp, #72
1e95c                 | LR__3163
1e95c     A7 F0 03 F6 | 	mov	ptra, fp
1e960     B2 00 A0 FD | 	call	#popregs_
1e964                 | __system___basic_dir_ret
1e964     2D 00 64 FD | 	ret
1e968                 | 
1e968                 | __system__pack_0483
1e968     09 01 02 F6 | 	mov	_var01, arg01
1e96c     7F 16 06 F1 | 	add	arg03, #127
1e970     04 18 CE F7 | 	test	arg04, #4 wz
1e974     10 00 90 AD |  if_e	jmp	#LR__3170
1e978     00 00 0E F2 | 	cmp	_var01, #0 wz
1e97c     16 00 C6 A9 |  if_e	decod	_var01, #22
1e980     F7 00 26 F4 | 	bith	_var01, #247
1e984     B4 00 90 FD | 	jmp	#LR__3179
1e988                 | LR__3170
1e988     02 18 CE F7 | 	test	arg04, #2 wz
1e98c     00 C0 3F 5F 
1e990     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1e994     00 14 06 56 |  if_ne	mov	arg02, #0
1e998     A0 00 90 5D |  if_ne	jmp	#LR__3178
1e99c     08 18 CE F7 | 	test	arg04, #8 wz
1e9a0     00 00 06 56 |  if_ne	mov	_var01, #0
1e9a4     94 00 90 5D |  if_ne	jmp	#LR__3177
1e9a8     FF 16 56 F2 | 	cmps	arg03, #255 wc
1e9ac     00 C0 3F 3F 
1e9b0     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1e9b4     00 14 06 36 |  if_ae	mov	arg02, #0
1e9b8     80 00 90 3D |  if_ae	jmp	#LR__3176
1e9bc     01 16 56 F2 | 	cmps	arg03, #1 wc
1e9c0     6C 00 90 3D |  if_ae	jmp	#LR__3174
1e9c4     01 14 46 F0 | 	shr	arg02, #1
1e9c8     00 03 02 F6 | 	mov	_var02, _var01
1e9cc     01 02 06 F5 | 	and	_var02, #1
1e9d0     1F 02 66 F0 | 	shl	_var02, #31
1e9d4     01 15 42 F5 | 	or	arg02, _var02
1e9d8     01 00 46 F0 | 	shr	_var01, #1
1e9dc     97 1E 48 FB | 	callpa	#(@LR__3172-@LR__3171)>>2,fcache_load_ptr_
1e9e0                 | LR__3171
1e9e0     00 16 56 F2 | 	cmps	arg03, #0 wc
1e9e4     34 00 90 3D |  if_ae	jmp	#LR__3173
1e9e8     00 00 0E F2 | 	cmp	_var01, #0 wz
1e9ec     2C 00 90 AD |  if_e	jmp	#LR__3173
1e9f0     0A 13 02 F6 | 	mov	arg01, arg02
1e9f4     01 12 06 F5 | 	and	arg01, #1
1e9f8     01 16 06 F1 | 	add	arg03, #1
1e9fc     01 14 46 F0 | 	shr	arg02, #1
1ea00     00 03 02 F6 | 	mov	_var02, _var01
1ea04     01 02 06 F5 | 	and	_var02, #1
1ea08     1F 02 66 F0 | 	shl	_var02, #31
1ea0c     01 15 42 F5 | 	or	arg02, _var02
1ea10     09 15 42 F5 | 	or	arg02, arg01
1ea14     01 00 46 F0 | 	shr	_var01, #1
1ea18     C4 FF 9F FD | 	jmp	#LR__3171
1ea1c                 | LR__3172
1ea1c                 | LR__3173
1ea1c     00 16 56 F2 | 	cmps	arg03, #0 wc
1ea20     18 00 90 3D |  if_ae	jmp	#LR__3175
1ea24     00 14 0E F2 | 	cmp	arg02, #0 wz
1ea28     6F 14 62 FD | 	wrnz	arg02
1ea2c     0C 00 90 FD | 	jmp	#LR__3175
1ea30                 | LR__3174
1ea30     17 01 06 F4 | 	bitl	_var01, #279
1ea34     17 16 66 F0 | 	shl	arg03, #23
1ea38     0B 01 42 F5 | 	or	_var01, arg03
1ea3c                 | LR__3175
1ea3c                 | LR__3176
1ea3c                 | LR__3177
1ea3c                 | LR__3178
1ea3c                 | LR__3179
1ea3c     01 00 CE F7 | 	test	_var01, #1 wz
1ea40     01 14 46 55 |  if_ne	or	arg02, #1
1ea44     0A 17 02 F6 | 	mov	arg03, arg02
1ea48     00 02 06 F6 | 	mov	_var02, #0
1ea4c     FF FF 3F FF 
1ea50     FF 15 06 F1 | 	add	arg02, ##2147483647
1ea54     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1ea58     01 02 06 C6 |  if_b	mov	_var02, #1
1ea5c     01 01 02 F1 | 	add	_var01, _var02
1ea60     01 18 CE F7 | 	test	arg04, #1 wz
1ea64     1F 00 26 54 |  if_ne	bith	_var01, #31
1ea68     00 FB 01 F6 | 	mov	result1, _var01
1ea6c                 | __system__pack_0483_ret
1ea6c     2D 00 64 FD | 	ret
1ea70                 | 
1ea70                 | __system___rxtxioctl_0573
1ea70     00 15 0E F2 | 	cmp	arg02, #256 wz
1ea74     0C 00 90 AD |  if_e	jmp	#LR__3180
1ea78     01 15 0E F2 | 	cmp	arg02, #257 wz
1ea7c     1C 00 90 AD |  if_e	jmp	#LR__3181
1ea80     30 00 90 FD | 	jmp	#LR__3182
1ea84                 | LR__3180
1ea84     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1ea88     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ea8c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1ea90     0B FB 61 FC | 	wrlong	result1, arg03
1ea94     00 FA 05 F6 | 	mov	result1, #0
1ea98     28 00 90 FD | 	jmp	#LR__3183
1ea9c                 | LR__3181
1ea9c     0B 13 02 FB | 	rdlong	arg01, arg03
1eaa0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1eaa4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1eaa8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1eaac     00 FA 05 F6 | 	mov	result1, #0
1eab0     10 00 90 FD | 	jmp	#LR__3183
1eab4                 | LR__3182
1eab4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1eab8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1eabc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1eac0     01 FA 65 F6 | 	neg	result1, #1
1eac4                 | LR__3183
1eac4                 | __system___rxtxioctl_0573_ret
1eac4     2D 00 64 FD | 	ret
1eac8                 | 
1eac8                 | __system____dummy_flush_0574
1eac8     00 FA 05 F6 | 	mov	result1, #0
1eacc                 | __system____dummy_flush_0574_ret
1eacc     2D 00 64 FD | 	ret
1ead0                 | 
1ead0                 | __system___vfsread
1ead0     03 4A 05 F6 | 	mov	COUNT_, #3
1ead4     A8 00 A0 FD | 	call	#pushregs_
1ead8     28 F0 07 F1 | 	add	ptra, #40
1eadc     04 4E 05 F1 | 	add	fp, #4
1eae0     A7 12 62 FC | 	wrlong	arg01, fp
1eae4     04 4E 05 F1 | 	add	fp, #4
1eae8     A7 14 62 FC | 	wrlong	arg02, fp
1eaec     04 4E 05 F1 | 	add	fp, #4
1eaf0     A7 16 62 FC | 	wrlong	arg03, fp
1eaf4     04 4E 85 F1 | 	sub	fp, #4
1eaf8     A7 FA 01 FB | 	rdlong	result1, fp
1eafc     14 4E 05 F1 | 	add	fp, #20
1eb00     A7 FA 61 FC | 	wrlong	result1, fp
1eb04     04 4E 05 F1 | 	add	fp, #4
1eb08     A7 00 68 FC | 	wrlong	#0, fp
1eb0c     1C 4E 85 F1 | 	sub	fp, #28
1eb10     A7 12 02 FB | 	rdlong	arg01, fp
1eb14     04 4E 85 F1 | 	sub	fp, #4
1eb18     08 12 06 F1 | 	add	arg01, #8
1eb1c     09 FB 01 FB | 	rdlong	result1, arg01
1eb20     01 FA CD F7 | 	test	result1, #1 wz
1eb24     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1eb28     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1eb2c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1eb30     01 FA 65 A6 |  if_e	neg	result1, #1
1eb34     74 02 90 AD |  if_e	jmp	#LR__3196
1eb38     04 4E 05 F1 | 	add	fp, #4
1eb3c     A7 12 02 FB | 	rdlong	arg01, fp
1eb40     04 4E 85 F1 | 	sub	fp, #4
1eb44     14 12 06 F1 | 	add	arg01, #20
1eb48     09 FB 09 FB | 	rdlong	result1, arg01 wz
1eb4c     B8 00 90 AD |  if_e	jmp	#LR__3191
1eb50     04 4E 05 F1 | 	add	fp, #4
1eb54     A7 12 02 FB | 	rdlong	arg01, fp
1eb58     09 17 02 F6 | 	mov	arg03, arg01
1eb5c     14 16 06 F1 | 	add	arg03, #20
1eb60     0B 1F 02 FB | 	rdlong	local01, arg03
1eb64     0F 21 02 F6 | 	mov	local02, local01
1eb68     13 1E 46 F7 | 	zerox	local01, #19
1eb6c     14 20 46 F0 | 	shr	local02, #20
1eb70     02 20 66 F0 | 	shl	local02, #2
1eb74     ED 20 02 F1 | 	add	local02, __methods__
1eb78     10 21 02 FB | 	rdlong	local02, local02
1eb7c     04 4E 05 F1 | 	add	fp, #4
1eb80     A7 14 02 FB | 	rdlong	arg02, fp
1eb84     04 4E 05 F1 | 	add	fp, #4
1eb88     A7 16 02 FB | 	rdlong	arg03, fp
1eb8c     0C 4E 85 F1 | 	sub	fp, #12
1eb90     F2 22 02 F6 | 	mov	local03, objptr
1eb94     0F E5 01 F6 | 	mov	objptr, local01
1eb98     2D 20 62 FD | 	call	local02
1eb9c     11 E5 01 F6 | 	mov	objptr, local03
1eba0     10 4E 05 F1 | 	add	fp, #16
1eba4     A7 FA 61 FC | 	wrlong	result1, fp
1eba8     10 4E 85 F1 | 	sub	fp, #16
1ebac     00 FA 55 F2 | 	cmps	result1, #0 wc
1ebb0     44 00 90 3D |  if_ae	jmp	#LR__3190
1ebb4     04 4E 05 F1 | 	add	fp, #4
1ebb8     A7 22 02 FB | 	rdlong	local03, fp
1ebbc     11 1F 02 F6 | 	mov	local01, local03
1ebc0     08 22 06 F1 | 	add	local03, #8
1ebc4     11 21 02 FB | 	rdlong	local02, local03
1ebc8     20 20 46 F5 | 	or	local02, #32
1ebcc     08 1E 06 F1 | 	add	local01, #8
1ebd0     0F 21 62 FC | 	wrlong	local02, local01
1ebd4     0C 4E 05 F1 | 	add	fp, #12
1ebd8     A7 12 0A FB | 	rdlong	arg01, fp wz
1ebdc     10 4E 85 F1 | 	sub	fp, #16
1ebe0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ebe4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1ebe8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ebec     01 FA 65 56 |  if_ne	neg	result1, #1
1ebf0     00 FA 05 A6 |  if_e	mov	result1, #0
1ebf4     B4 01 90 FD | 	jmp	#LR__3196
1ebf8                 | LR__3190
1ebf8     10 4E 05 F1 | 	add	fp, #16
1ebfc     A7 FA 01 FB | 	rdlong	result1, fp
1ec00     10 4E 85 F1 | 	sub	fp, #16
1ec04     A4 01 90 FD | 	jmp	#LR__3196
1ec08                 | LR__3191
1ec08     04 4E 05 F1 | 	add	fp, #4
1ec0c     A7 12 02 FB | 	rdlong	arg01, fp
1ec10     20 12 06 F1 | 	add	arg01, #32
1ec14     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ec18     14 4E 05 F1 | 	add	fp, #20
1ec1c     A7 12 62 FC | 	wrlong	arg01, fp
1ec20     18 4E 85 F1 | 	sub	fp, #24
1ec24     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ec28     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ec2c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ec30     01 FA 65 A6 |  if_e	neg	result1, #1
1ec34     74 01 90 AD |  if_e	jmp	#LR__3196
1ec38     04 4E 05 F1 | 	add	fp, #4
1ec3c     A7 22 02 FB | 	rdlong	local03, fp
1ec40     04 4E 85 F1 | 	sub	fp, #4
1ec44     28 22 06 F1 | 	add	local03, #40
1ec48     11 21 0A FB | 	rdlong	local02, local03 wz
1ec4c     7C 00 90 AD |  if_e	jmp	#LR__3193
1ec50     04 4E 05 F1 | 	add	fp, #4
1ec54     A7 12 02 FB | 	rdlong	arg01, fp
1ec58     09 23 02 F6 | 	mov	local03, arg01
1ec5c     28 22 06 F1 | 	add	local03, #40
1ec60     11 1F 02 FB | 	rdlong	local01, local03
1ec64     0F 21 02 F6 | 	mov	local02, local01
1ec68     13 1E 46 F7 | 	zerox	local01, #19
1ec6c     14 20 46 F0 | 	shr	local02, #20
1ec70     02 20 66 F0 | 	shl	local02, #2
1ec74     ED 20 02 F1 | 	add	local02, __methods__
1ec78     10 21 02 FB | 	rdlong	local02, local02
1ec7c     20 4E 05 F1 | 	add	fp, #32
1ec80     A7 16 02 F6 | 	mov	arg03, fp
1ec84     24 4E 85 F1 | 	sub	fp, #36
1ec88     00 15 06 F6 | 	mov	arg02, #256
1ec8c     F2 22 02 F6 | 	mov	local03, objptr
1ec90     0F E5 01 F6 | 	mov	objptr, local01
1ec94     2D 20 62 FD | 	call	local02
1ec98     11 E5 01 F6 | 	mov	objptr, local03
1ec9c     10 4E 05 F1 | 	add	fp, #16
1eca0     A7 FA 61 FC | 	wrlong	result1, fp
1eca4     00 FA 4D F2 | 	cmps	result1, #0 wz
1eca8     10 4E 85 F1 | 	sub	fp, #16
1ecac     1C 00 90 5D |  if_ne	jmp	#LR__3192
1ecb0     24 4E 05 F1 | 	add	fp, #36
1ecb4     A7 20 02 FB | 	rdlong	local02, fp
1ecb8     24 4E 85 F1 | 	sub	fp, #36
1ecbc     02 20 CE F7 | 	test	local02, #2 wz
1ecc0     20 4E 05 51 |  if_ne	add	fp, #32
1ecc4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ecc8     20 4E 85 51 |  if_ne	sub	fp, #32
1eccc                 | LR__3192
1eccc                 | LR__3193
1eccc     10 4E 05 F1 | 	add	fp, #16
1ecd0     A7 00 68 FC | 	wrlong	#0, fp
1ecd4     10 4E 85 F1 | 	sub	fp, #16
1ecd8                 | LR__3194
1ecd8     0C 4E 05 F1 | 	add	fp, #12
1ecdc     A7 22 02 FB | 	rdlong	local03, fp
1ece0     0C 4E 85 F1 | 	sub	fp, #12
1ece4     01 22 16 F2 | 	cmp	local03, #1 wc
1ece8     B4 00 90 CD |  if_b	jmp	#LR__3195
1ecec     18 4E 05 F1 | 	add	fp, #24
1ecf0     A7 20 02 FB | 	rdlong	local02, fp
1ecf4     10 23 02 F6 | 	mov	local03, local02
1ecf8     13 22 46 F7 | 	zerox	local03, #19
1ecfc     14 20 46 F0 | 	shr	local02, #20
1ed00     02 20 66 F0 | 	shl	local02, #2
1ed04     ED 20 02 F1 | 	add	local02, __methods__
1ed08     10 21 02 FB | 	rdlong	local02, local02
1ed0c     14 4E 85 F1 | 	sub	fp, #20
1ed10     A7 12 02 FB | 	rdlong	arg01, fp
1ed14     04 4E 85 F1 | 	sub	fp, #4
1ed18     F2 1E 02 F6 | 	mov	local01, objptr
1ed1c     11 E5 01 F6 | 	mov	objptr, local03
1ed20     2D 20 62 FD | 	call	local02
1ed24     0F E5 01 F6 | 	mov	objptr, local01
1ed28     14 4E 05 F1 | 	add	fp, #20
1ed2c     A7 FA 61 FC | 	wrlong	result1, fp
1ed30     14 4E 85 F1 | 	sub	fp, #20
1ed34     00 FA 55 F2 | 	cmps	result1, #0 wc
1ed38     64 00 90 CD |  if_b	jmp	#LR__3195
1ed3c     1C 4E 05 F1 | 	add	fp, #28
1ed40     A7 22 02 FB | 	rdlong	local03, fp
1ed44     11 21 02 F6 | 	mov	local02, local03
1ed48     01 20 06 F1 | 	add	local02, #1
1ed4c     A7 20 62 FC | 	wrlong	local02, fp
1ed50     08 4E 85 F1 | 	sub	fp, #8
1ed54     A7 20 02 FB | 	rdlong	local02, fp
1ed58     11 21 42 FC | 	wrbyte	local02, local03
1ed5c     04 4E 85 F1 | 	sub	fp, #4
1ed60     A7 22 02 FB | 	rdlong	local03, fp
1ed64     01 22 06 F1 | 	add	local03, #1
1ed68     A7 22 62 FC | 	wrlong	local03, fp
1ed6c     04 4E 85 F1 | 	sub	fp, #4
1ed70     A7 22 02 FB | 	rdlong	local03, fp
1ed74     01 22 86 F1 | 	sub	local03, #1
1ed78     A7 22 62 FC | 	wrlong	local03, fp
1ed7c     14 4E 05 F1 | 	add	fp, #20
1ed80     A7 22 0A FB | 	rdlong	local03, fp wz
1ed84     20 4E 85 F1 | 	sub	fp, #32
1ed88     4C FF 9F AD |  if_e	jmp	#LR__3194
1ed8c     14 4E 05 F1 | 	add	fp, #20
1ed90     A7 20 02 FB | 	rdlong	local02, fp
1ed94     14 4E 85 F1 | 	sub	fp, #20
1ed98     0A 20 0E F2 | 	cmp	local02, #10 wz
1ed9c     38 FF 9F 5D |  if_ne	jmp	#LR__3194
1eda0                 | LR__3195
1eda0     10 4E 05 F1 | 	add	fp, #16
1eda4     A7 FA 01 FB | 	rdlong	result1, fp
1eda8     10 4E 85 F1 | 	sub	fp, #16
1edac                 | LR__3196
1edac     A7 F0 03 F6 | 	mov	ptra, fp
1edb0     B2 00 A0 FD | 	call	#popregs_
1edb4                 | __system___vfsread_ret
1edb4     2D 00 64 FD | 	ret
1edb8                 | 
1edb8                 | __system____default_filbuf
1edb8     04 4A 05 F6 | 	mov	COUNT_, #4
1edbc     A8 00 A0 FD | 	call	#pushregs_
1edc0     09 1F 02 F6 | 	mov	local01, arg01
1edc4     0F 21 02 FB | 	rdlong	local02, local01
1edc8     0C 20 06 F1 | 	add	local02, #12
1edcc     10 FB 09 FB | 	rdlong	result1, local02 wz
1edd0     0C 20 86 F1 | 	sub	local02, #12
1edd4     20 00 90 5D |  if_ne	jmp	#LR__3200
1edd8     14 20 06 F1 | 	add	local02, #20
1eddc     10 FB 01 F6 | 	mov	result1, local02
1ede0     04 20 86 F1 | 	sub	local02, #4
1ede4     10 FB 61 FC | 	wrlong	result1, local02
1ede8     04 20 86 F1 | 	sub	local02, #4
1edec     02 00 80 FF 
1edf0     10 01 68 FC | 	wrlong	##1024, local02
1edf4     0C 20 86 F1 | 	sub	local02, #12
1edf8                 | LR__3200
1edf8     14 1E 06 F1 | 	add	local01, #20
1edfc     0F 23 02 FB | 	rdlong	local03, local01
1ee00     11 25 02 F6 | 	mov	local04, local03
1ee04     14 1E 86 F1 | 	sub	local01, #20
1ee08     13 24 46 F7 | 	zerox	local04, #19
1ee0c     14 22 46 F0 | 	shr	local03, #20
1ee10     02 22 66 F0 | 	shl	local03, #2
1ee14     ED 22 02 F1 | 	add	local03, __methods__
1ee18     11 23 02 FB | 	rdlong	local03, local03
1ee1c     10 20 06 F1 | 	add	local02, #16
1ee20     10 15 02 FB | 	rdlong	arg02, local02
1ee24     04 20 86 F1 | 	sub	local02, #4
1ee28     10 17 02 FB | 	rdlong	arg03, local02
1ee2c     0C 20 86 F1 | 	sub	local02, #12
1ee30     0F 13 02 F6 | 	mov	arg01, local01
1ee34     F2 1E 02 F6 | 	mov	local01, objptr
1ee38     12 E5 01 F6 | 	mov	objptr, local04
1ee3c     2D 22 62 FD | 	call	local03
1ee40     0F E5 01 F6 | 	mov	objptr, local01
1ee44     FD 24 02 F6 | 	mov	local04, result1
1ee48     00 24 56 F2 | 	cmps	local04, #0 wc
1ee4c     01 FA 65 C6 |  if_b	neg	result1, #1
1ee50     28 00 90 CD |  if_b	jmp	#LR__3201
1ee54     10 25 62 FC | 	wrlong	local04, local02
1ee58     10 20 06 F1 | 	add	local02, #16
1ee5c     10 23 02 FB | 	rdlong	local03, local02
1ee60     0C 20 86 F1 | 	sub	local02, #12
1ee64     10 23 62 FC | 	wrlong	local03, local02
1ee68     04 20 06 F1 | 	add	local02, #4
1ee6c     10 23 02 FB | 	rdlong	local03, local02
1ee70     01 22 46 F5 | 	or	local03, #1
1ee74     10 23 62 FC | 	wrlong	local03, local02
1ee78     12 FB 01 F6 | 	mov	result1, local04
1ee7c                 | LR__3201
1ee7c     A7 F0 03 F6 | 	mov	ptra, fp
1ee80     B2 00 A0 FD | 	call	#popregs_
1ee84                 | __system____default_filbuf_ret
1ee84     2D 00 64 FD | 	ret
1ee88                 | 
1ee88                 | __system__getlower_0959
1ee88     41 12 56 F2 | 	cmps	arg01, #65 wc
1ee8c     10 00 90 CD |  if_b	jmp	#LR__3210
1ee90     5B 12 56 F2 | 	cmps	arg01, #91 wc
1ee94     09 FB 01 C6 |  if_b	mov	result1, arg01
1ee98     20 FA 05 C1 |  if_b	add	result1, #32
1ee9c     04 00 90 CD |  if_b	jmp	#__system__getlower_0959_ret
1eea0                 | LR__3210
1eea0     09 FB 01 F6 | 	mov	result1, arg01
1eea4                 | __system__getlower_0959_ret
1eea4     2D 00 64 FD | 	ret
1eea8                 | 
1eea8                 | __system___pat_match
1eea8     08 4A 05 F6 | 	mov	COUNT_, #8
1eeac     A8 00 A0 FD | 	call	#pushregs_
1eeb0     09 1F 02 F6 | 	mov	local01, arg01
1eeb4                 | LR__3220
1eeb4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1eeb8     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1eebc     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1eec0     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1eec4     2C 00 90 AD |  if_e	jmp	#LR__3221
1eec8     0A 13 C2 FA | 	rdbyte	arg01, arg02
1eecc     B8 FF BF FD | 	call	#__system__getlower_0959
1eed0     FD 22 02 F6 | 	mov	local03, result1
1eed4     0F 13 C2 FA | 	rdbyte	arg01, local01
1eed8     AC FF BF FD | 	call	#__system__getlower_0959
1eedc     11 FB 09 F2 | 	cmp	result1, local03 wz
1eee0     00 FA 05 56 |  if_ne	mov	result1, #0
1eee4     FC 00 90 5D |  if_ne	jmp	#LR__3229
1eee8     01 1E 06 F1 | 	add	local01, #1
1eeec     01 14 06 F1 | 	add	arg02, #1
1eef0     C0 FF 9F FD | 	jmp	#LR__3220
1eef4                 | LR__3221
1eef4     0A 23 C2 FA | 	rdbyte	local03, arg02
1eef8     2A 22 0E F2 | 	cmp	local03, #42 wz
1eefc     D4 00 90 5D |  if_ne	jmp	#LR__3228
1ef00     01 14 06 F1 | 	add	arg02, #1
1ef04     0A 21 C2 FA | 	rdbyte	local02, arg02
1ef08     01 14 86 F1 | 	sub	arg02, #1
1ef0c     2E 20 0E F2 | 	cmp	local02, #46 wz
1ef10     28 00 90 5D |  if_ne	jmp	#LR__3222
1ef14     02 14 06 F1 | 	add	arg02, #2
1ef18     0A 21 C2 FA | 	rdbyte	local02, arg02
1ef1c     02 14 86 F1 | 	sub	arg02, #2
1ef20     2A 20 0E F2 | 	cmp	local02, #42 wz
1ef24     03 14 06 A1 |  if_e	add	arg02, #3
1ef28     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1ef2c     03 14 86 A1 |  if_e	sub	arg02, #3
1ef30     12 27 0A A6 |  if_e	mov	local05, local04 wz
1ef34     01 FA 05 A6 |  if_e	mov	result1, #1
1ef38     A8 00 90 AD |  if_e	jmp	#LR__3229
1ef3c                 | LR__3222
1ef3c     01 14 06 F1 | 	add	arg02, #1
1ef40     00 28 06 F6 | 	mov	local06, #0
1ef44     97 1E 48 FB | 	callpa	#(@LR__3225-@LR__3223)>>2,fcache_load_ptr_
1ef48                 | LR__3223
1ef48     14 2B 02 F6 | 	mov	local07, local06
1ef4c     0A 2B 02 F1 | 	add	local07, arg02
1ef50     15 2B CA FA | 	rdbyte	local07, local07 wz
1ef54     14 27 02 56 |  if_ne	mov	local05, local06
1ef58     01 26 06 51 |  if_ne	add	local05, #1
1ef5c     13 29 02 56 |  if_ne	mov	local06, local05
1ef60     E4 FF 9F 5D |  if_ne	jmp	#LR__3223
1ef64     00 2C 06 F6 | 	mov	local08, #0
1ef68                 | LR__3224
1ef68     16 2B 02 F6 | 	mov	local07, local08
1ef6c     0F 2B 02 F1 | 	add	local07, local01
1ef70     15 2B CA FA | 	rdbyte	local07, local07 wz
1ef74     16 27 02 56 |  if_ne	mov	local05, local08
1ef78     01 26 06 51 |  if_ne	add	local05, #1
1ef7c     13 2D 02 56 |  if_ne	mov	local08, local05
1ef80     E4 FF 9F 5D |  if_ne	jmp	#LR__3224
1ef84                 | LR__3225
1ef84     14 2D 52 F2 | 	cmps	local08, local06 wc
1ef88     00 FA 05 C6 |  if_b	mov	result1, #0
1ef8c     54 00 90 CD |  if_b	jmp	#LR__3229
1ef90     16 21 02 F6 | 	mov	local02, local08
1ef94     14 21 82 F1 | 	sub	local02, local06
1ef98     10 1F 02 F1 | 	add	local01, local02
1ef9c                 | LR__3226
1ef9c     01 28 56 F2 | 	cmps	local06, #1 wc
1efa0     30 00 90 CD |  if_b	jmp	#LR__3227
1efa4     0F 13 C2 FA | 	rdbyte	arg01, local01
1efa8     DC FE BF FD | 	call	#__system__getlower_0959
1efac     FD 2C 02 F6 | 	mov	local08, result1
1efb0     0A 13 C2 FA | 	rdbyte	arg01, arg02
1efb4     D0 FE BF FD | 	call	#__system__getlower_0959
1efb8     FD 2C 0A F2 | 	cmp	local08, result1 wz
1efbc     00 FA 05 56 |  if_ne	mov	result1, #0
1efc0     20 00 90 5D |  if_ne	jmp	#LR__3229
1efc4     01 1E 06 F1 | 	add	local01, #1
1efc8     01 14 06 F1 | 	add	arg02, #1
1efcc     01 28 86 F1 | 	sub	local06, #1
1efd0     C8 FF 9F FD | 	jmp	#LR__3226
1efd4                 | LR__3227
1efd4                 | LR__3228
1efd4     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1efd8     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1efdc     01 FA 05 A6 |  if_e	mov	result1, #1
1efe0     00 FA 05 56 |  if_ne	mov	result1, #0
1efe4                 | LR__3229
1efe4     A7 F0 03 F6 | 	mov	ptra, fp
1efe8     B2 00 A0 FD | 	call	#popregs_
1efec                 | __system___pat_match_ret
1efec     2D 00 64 FD | 	ret
1eff0                 | 
1eff0                 | _fatfs_cc_ff_uni2oem
1eff0     00 00 06 F6 | 	mov	_var01, #0
1eff4     80 12 16 F2 | 	cmp	arg01, #128 wc
1eff8     09 01 02 C6 |  if_b	mov	_var01, arg01
1effc     58 00 90 CD |  if_b	jmp	#LR__3234
1f000     80 00 00 FF 
1f004     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1f008     4C 00 90 3D |  if_ae	jmp	#LR__3233
1f00c     0A FB 31 F9 | 	getword	result1, arg02, #0
1f010     01 00 00 FF 
1f014     52 FB 0D F2 | 	cmp	result1, ##850 wz
1f018     3C 00 90 5D |  if_ne	jmp	#LR__3233
1f01c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1f01c     00 00 06 F6 | 	mov	_var01, #0
1f020     97 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
1f024                 | LR__3230
1f024     00 FB 31 F9 | 	getword	result1, _var01, #0
1f028     80 FA 15 F2 | 	cmp	result1, #128 wc
1f02c     1C 00 90 3D |  if_ae	jmp	#LR__3232
1f030     00 FB 31 F9 | 	getword	result1, _var01, #0
1f034     01 FA 65 F0 | 	shl	result1, #1
1f038     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1f03c     FD FA E1 FA | 	rdword	result1, result1
1f040     FD 12 0A F2 | 	cmp	arg01, result1 wz
1f044     01 00 06 51 |  if_ne	add	_var01, #1
1f048     D8 FF 9F 5D |  if_ne	jmp	#LR__3230
1f04c                 | LR__3231
1f04c                 | LR__3232
1f04c     00 01 32 F9 | 	getword	_var01, _var01, #0
1f050     80 00 06 F1 | 	add	_var01, #128
1f054     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1f058                 | LR__3233
1f058                 | LR__3234
1f058                 | ' 			c = (c + 0x80) & 0xFF;
1f058                 | ' 		}
1f058                 | ' 	}
1f058                 | ' 
1f058                 | ' 	return c;
1f058     00 FB 01 F6 | 	mov	result1, _var01
1f05c                 | _fatfs_cc_ff_uni2oem_ret
1f05c     2D 00 64 FD | 	ret
1f060                 | 
1f060                 | _fatfs_cc_ff_oem2uni
1f060     00 00 06 F6 | 	mov	_var01, #0
1f064     09 FB 31 F9 | 	getword	result1, arg01, #0
1f068     80 FA 15 F2 | 	cmp	result1, #128 wc
1f06c     09 01 02 C6 |  if_b	mov	_var01, arg01
1f070     2C 00 90 CD |  if_b	jmp	#LR__3241
1f074     0A 15 32 F9 | 	getword	arg02, arg02, #0
1f078     01 00 00 FF 
1f07c     52 15 0E F2 | 	cmp	arg02, ##850 wz
1f080     1C 00 90 5D |  if_ne	jmp	#LR__3240
1f084     09 FB 31 F9 | 	getword	result1, arg01, #0
1f088     00 FB 15 F2 | 	cmp	result1, #256 wc
1f08c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1f090     80 12 86 C1 |  if_b	sub	arg01, #128
1f094     01 12 66 C0 |  if_b	shl	arg01, #1
1f098     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1f09c     09 01 E2 CA |  if_b	rdword	_var01, arg01
1f0a0                 | LR__3240
1f0a0                 | LR__3241
1f0a0                 | ' 		}
1f0a0                 | ' 	}
1f0a0                 | ' 
1f0a0                 | ' 	return c;
1f0a0     00 FB 01 F6 | 	mov	result1, _var01
1f0a4                 | _fatfs_cc_ff_oem2uni_ret
1f0a4     2D 00 64 FD | 	ret
1f0a8                 | 
1f0a8                 | _fatfs_cc_ff_wtoupper
1f0a8     09 01 02 F6 | 	mov	_var01, arg01
1f0ac     80 00 00 FF 
1f0b0     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1f0b4     60 01 90 3D |  if_ae	jmp	#LR__3263
1f0b8     00 03 02 F6 | 	mov	_var02, _var01
1f0bc     01 01 32 F9 | 	getword	_var01, _var02, #0
1f0c0     08 00 00 FF 
1f0c4     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1f0c8     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1f0cc     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1f0d0     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1f0d4     01 00 00 3F 
1f0d8     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1f0dc     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1f0e0     01 00 00 3F 
1f0e4     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1f0e8     02 07 02 F6 | 	mov	_var04, _var03
1f0ec                 | ' 		uc = (WORD)uni;
1f0ec                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1f0ec                 | ' 		for (;;) {
1f0ec                 | LR__3250
1f0ec     03 09 E2 FA | 	rdword	_var05, _var04
1f0f0     04 05 02 F6 | 	mov	_var03, _var05
1f0f4     0F 04 4E F7 | 	zerox	_var03, #15 wz
1f0f8     02 06 06 F1 | 	add	_var04, #2
1f0fc     14 01 90 AD |  if_e	jmp	#LR__3262
1f100     01 05 32 F9 | 	getword	_var03, _var02, #0
1f104     04 01 32 F9 | 	getword	_var01, _var05, #0
1f108     00 05 12 F2 | 	cmp	_var03, _var01 wc
1f10c     04 01 90 CD |  if_b	jmp	#LR__3262
1f110     03 0B E2 FA | 	rdword	_var06, _var04
1f114     05 0D 32 F9 | 	getword	_var07, _var06, #0
1f118     08 0C 46 F0 | 	shr	_var07, #8
1f11c     05 0B 32 F9 | 	getword	_var06, _var06, #0
1f120     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1f124     01 05 32 F9 | 	getword	_var03, _var02, #0
1f128     04 0F 32 F9 | 	getword	_var08, _var05, #0
1f12c     05 01 32 F9 | 	getword	_var01, _var06, #0
1f130     00 0F 02 F1 | 	add	_var08, _var01
1f134     07 05 52 F2 | 	cmps	_var03, _var08 wc
1f138     02 06 06 F1 | 	add	_var04, #2
1f13c     C4 00 90 3D |  if_ae	jmp	#LR__3261
1f140                 | ' 				switch (cmd) {
1f140     06 11 32 F9 | 	getword	_var09, _var07, #0
1f144     09 10 26 F3 | 	fle	_var09, #9
1f148     30 10 62 FD | 	jmprel	_var09
1f14c                 | LR__3251
1f14c     24 00 90 FD | 	jmp	#LR__3252
1f150     3C 00 90 FD | 	jmp	#LR__3253
1f154     54 00 90 FD | 	jmp	#LR__3254
1f158     5C 00 90 FD | 	jmp	#LR__3255
1f15c     64 00 90 FD | 	jmp	#LR__3256
1f160     6C 00 90 FD | 	jmp	#LR__3257
1f164     74 00 90 FD | 	jmp	#LR__3258
1f168     7C 00 90 FD | 	jmp	#LR__3259
1f16c     84 00 90 FD | 	jmp	#LR__3260
1f170     A0 00 90 FD | 	jmp	#LR__3262
1f174                 | LR__3252
1f174     01 03 32 F9 | 	getword	_var02, _var02, #0
1f178     04 09 32 F9 | 	getword	_var05, _var05, #0
1f17c     04 03 82 F1 | 	sub	_var02, _var05
1f180     01 02 66 F0 | 	shl	_var02, #1
1f184     03 03 02 F1 | 	add	_var02, _var04
1f188     01 03 E2 FA | 	rdword	_var02, _var02
1f18c     84 00 90 FD | 	jmp	#LR__3262
1f190                 | LR__3253
1f190     01 05 32 F9 | 	getword	_var03, _var02, #0
1f194     01 03 32 F9 | 	getword	_var02, _var02, #0
1f198     04 09 32 F9 | 	getword	_var05, _var05, #0
1f19c     04 03 82 F1 | 	sub	_var02, _var05
1f1a0     01 02 06 F5 | 	and	_var02, #1
1f1a4     02 03 C2 F2 | 	subr	_var02, _var03
1f1a8     68 00 90 FD | 	jmp	#LR__3262
1f1ac                 | LR__3254
1f1ac     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1b0     10 02 86 F1 | 	sub	_var02, #16
1f1b4     5C 00 90 FD | 	jmp	#LR__3262
1f1b8                 | LR__3255
1f1b8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1bc     20 02 86 F1 | 	sub	_var02, #32
1f1c0     50 00 90 FD | 	jmp	#LR__3262
1f1c4                 | LR__3256
1f1c4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1c8     30 02 86 F1 | 	sub	_var02, #48
1f1cc     44 00 90 FD | 	jmp	#LR__3262
1f1d0                 | LR__3257
1f1d0     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1d4     1A 02 86 F1 | 	sub	_var02, #26
1f1d8     38 00 90 FD | 	jmp	#LR__3262
1f1dc                 | LR__3258
1f1dc     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1e0     08 02 06 F1 | 	add	_var02, #8
1f1e4     2C 00 90 FD | 	jmp	#LR__3262
1f1e8                 | LR__3259
1f1e8     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1ec     50 02 86 F1 | 	sub	_var02, #80
1f1f0     20 00 90 FD | 	jmp	#LR__3262
1f1f4                 | LR__3260
1f1f4     01 03 32 F9 | 	getword	_var02, _var02, #0
1f1f8     0E 00 00 FF 
1f1fc     60 02 86 F1 | 	sub	_var02, ##7264
1f200                 | ' 				}
1f200                 | ' 				break;
1f200     10 00 90 FD | 	jmp	#LR__3262
1f204                 | LR__3261
1f204     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1f208     02 0A 06 AA |  if_e	mul	_var06, #2
1f20c     05 07 02 A1 |  if_e	add	_var04, _var06
1f210     D8 FE 9F FD | 	jmp	#LR__3250
1f214                 | LR__3262
1f214     01 01 32 F9 | 	getword	_var01, _var02, #0
1f218                 | LR__3263
1f218                 | ' 		}
1f218                 | ' 		uni = uc;
1f218                 | ' 	}
1f218                 | ' 
1f218                 | ' 	return uni;
1f218     00 FB 01 F6 | 	mov	result1, _var01
1f21c                 | _fatfs_cc_ff_wtoupper_ret
1f21c     2D 00 64 FD | 	ret
1f220                 | 
1f220                 | _fatfs_cc_strncpy
1f220     09 01 02 F6 | 	mov	_var01, arg01
1f224     97 12 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
1f228                 | ' 
1f228                 | ' 	dscan = dst;
1f228                 | ' 	sscan = src;
1f228                 | ' 	count = n;
1f228                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1f228                 | LR__3270
1f228     01 16 86 F1 | 	sub	arg03, #1
1f22c     00 16 56 F2 | 	cmps	arg03, #0 wc
1f230     18 00 90 CD |  if_b	jmp	#LR__3272
1f234     0A FB C1 FA | 	rdbyte	result1, arg02
1f238     00 FB 41 FC | 	wrbyte	result1, _var01
1f23c     01 14 06 F1 | 	add	arg02, #1
1f240     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1f244                 | ' 		continue;
1f244     01 00 06 F1 | 	add	_var01, #1
1f248     DC FF 9F 5D |  if_ne	jmp	#LR__3270
1f24c                 | LR__3271
1f24c                 | LR__3272
1f24c     97 0C 48 FB | 	callpa	#(@LR__3274-@LR__3273)>>2,fcache_load_ptr_
1f250                 | ' 	while (--count >= 0)
1f250                 | LR__3273
1f250     01 16 86 F1 | 	sub	arg03, #1
1f254     00 16 56 F2 | 	cmps	arg03, #0 wc
1f258     00 03 02 36 |  if_ae	mov	_var02, _var01
1f25c     01 00 06 31 |  if_ae	add	_var01, #1
1f260     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1f264     E8 FF 9F 3D |  if_ae	jmp	#LR__3273
1f268                 | LR__3274
1f268                 | ' 		*dscan++ = '\0';
1f268                 | ' 	return(dst);
1f268     09 FB 01 F6 | 	mov	result1, arg01
1f26c                 | _fatfs_cc_strncpy_ret
1f26c     2D 00 64 FD | 	ret
1f270                 | 
1f270                 | _fatfs_cc_memcmp
1f270                 | ' 	for (n = size; n > 0; n--)
1f270     00 16 0E F2 | 	cmp	arg03, #0 wz
1f274     28 00 90 AD |  if_e	jmp	#LR__3281
1f278                 | LR__3280
1f278     09 01 C2 FA | 	rdbyte	_var01, arg01
1f27c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1f280     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f284     01 12 06 A1 |  if_e	add	arg01, #1
1f288     01 14 06 A1 |  if_e	add	arg02, #1
1f28c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1f28c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1f290     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1f294     01 FB 81 51 |  if_ne	sub	result1, _var02
1f298     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1f29c     F6 17 6E FB | 	djnz	arg03, #LR__3280
1f2a0                 | LR__3281
1f2a0                 | ' 
1f2a0                 | ' 	return(0);
1f2a0     00 FA 05 F6 | 	mov	result1, #0
1f2a4                 | _fatfs_cc_memcmp_ret
1f2a4     2D 00 64 FD | 	ret
1f2a8                 | 
1f2a8                 | _fatfs_cc_strncmp
1f2a8     09 01 0A F6 | 	mov	_var01, arg01 wz
1f2ac     14 00 90 5D |  if_ne	jmp	#LR__3290
1f2b0                 | ' 		return scan2 ? -1 : 0;
1f2b0     00 14 0E F2 | 	cmp	arg02, #0 wz
1f2b4     01 02 66 56 |  if_ne	neg	_var02, #1
1f2b8     00 02 06 A6 |  if_e	mov	_var02, #0
1f2bc     01 FB 01 F6 | 	mov	result1, _var02
1f2c0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1f2c4                 | LR__3290
1f2c4     00 14 0E F2 | 	cmp	arg02, #0 wz
1f2c8     01 FA 05 A6 |  if_e	mov	result1, #1
1f2cc     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f2d0     0B 05 02 F6 | 	mov	_var03, arg03
1f2d4     97 16 48 FB | 	callpa	#(@LR__3292-@LR__3291)>>2,fcache_load_ptr_
1f2d8                 | ' 	count = n;
1f2d8                 | ' 	do {
1f2d8                 | LR__3291
1f2d8     00 07 C2 FA | 	rdbyte	_var04, _var01
1f2dc     0A 09 02 F6 | 	mov	_var05, arg02
1f2e0     04 0B C2 FA | 	rdbyte	_var06, _var05
1f2e4     01 04 86 F1 | 	sub	_var03, #1
1f2e8     00 04 56 F2 | 	cmps	_var03, #0 wc
1f2ec     01 00 06 F1 | 	add	_var01, #1
1f2f0     01 14 06 F1 | 	add	arg02, #1
1f2f4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1f2f8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3293
1f2fc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1f300     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3291
1f304                 | LR__3292
1f304                 | LR__3293
1f304     00 04 56 F2 | 	cmps	_var03, #0 wc
1f308                 | ' 		return(0);
1f308     00 FA 05 C6 |  if_b	mov	result1, #0
1f30c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1f310     05 07 0A F2 | 	cmp	_var04, _var06 wz
1f314                 | ' 		return(0);
1f314     00 FA 05 A6 |  if_e	mov	result1, #0
1f318     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f31c     00 06 0E F2 | 	cmp	_var04, #0 wz
1f320                 | ' 		return(-1);
1f320     01 FA 65 A6 |  if_e	neg	result1, #1
1f324     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1f328     00 0A 0E F2 | 	cmp	_var06, #0 wz
1f32c                 | ' 		return(1);
1f32c     01 FA 05 A6 |  if_e	mov	result1, #1
1f330                 | ' 		return(c1 - c2);
1f330     03 FB 01 56 |  if_ne	mov	result1, _var04
1f334     05 FB 81 51 |  if_ne	sub	result1, _var06
1f338                 | _fatfs_cc_strncmp_ret
1f338     2D 00 64 FD | 	ret
1f33c                 | 
1f33c                 | _fatfs_cc_strchr
1f33c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1f33c                 | ' 	while ((c = *s++) != (char) charwanted)
1f33c                 | LR__3300
1f33c     09 01 02 F6 | 	mov	_var01, arg01
1f340     00 03 C2 FA | 	rdbyte	_var02, _var01
1f344     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1f348     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1f34c     03 05 0A F2 | 	cmp	_var03, _var04 wz
1f350     01 12 06 F1 | 	add	arg01, #1
1f354     14 00 90 AD |  if_e	jmp	#LR__3301
1f358     01 05 02 F6 | 	mov	_var03, _var02
1f35c     07 04 4E F7 | 	zerox	_var03, #7 wz
1f360     00 FA 05 A6 |  if_e	mov	result1, #0
1f364     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1f368     D0 FF 9F FD | 	jmp	#LR__3300
1f36c                 | LR__3301
1f36c                 | ' 	return((char *)--s);
1f36c     01 12 86 F1 | 	sub	arg01, #1
1f370     09 FB 01 F6 | 	mov	result1, arg01
1f374                 | _fatfs_cc_strchr_ret
1f374     2D 00 64 FD | 	ret
1f378                 | 
1f378                 | _fatfs_cc_disk_initialize
1f378     04 4A 05 F6 | 	mov	COUNT_, #4
1f37c     A8 00 A0 FD | 	call	#pushregs_
1f380     40 F0 07 F1 | 	add	ptra, #64
1f384     04 4E 05 F1 | 	add	fp, #4
1f388     A7 12 42 FC | 	wrbyte	arg01, fp
1f38c     01 00 00 FF 
1f390     14 E4 05 F1 | 	add	objptr, ##532
1f394     F2 18 02 FB | 	rdlong	arg04, objptr
1f398     2C 4E 05 F1 | 	add	fp, #44
1f39c     A7 18 62 FC | 	wrlong	arg04, fp
1f3a0     04 E4 85 F1 | 	sub	objptr, #4
1f3a4     F2 18 02 FB | 	rdlong	arg04, objptr
1f3a8     04 4E 05 F1 | 	add	fp, #4
1f3ac     A7 18 62 FC | 	wrlong	arg04, fp
1f3b0     08 E4 05 F1 | 	add	objptr, #8
1f3b4     F2 18 02 FB | 	rdlong	arg04, objptr
1f3b8     04 4E 05 F1 | 	add	fp, #4
1f3bc     A7 18 62 FC | 	wrlong	arg04, fp
1f3c0     04 E4 05 F1 | 	add	objptr, #4
1f3c4     F2 18 02 FB | 	rdlong	arg04, objptr
1f3c8     04 4E 05 F1 | 	add	fp, #4
1f3cc     A7 18 62 FC | 	wrlong	arg04, fp
1f3d0     04 E4 05 F1 | 	add	objptr, #4
1f3d4     F2 02 48 FC | 	wrbyte	#1, objptr
1f3d8     01 00 00 FF 
1f3dc     20 E4 85 F1 | 	sub	objptr, ##544
1f3e0     38 4E 85 F1 | 	sub	fp, #56
1f3e4     A7 18 CA FA | 	rdbyte	arg04, fp wz
1f3e8     04 4E 85 F1 | 	sub	fp, #4
1f3ec                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f3ec                 | '             return RES_NOTRDY;
1f3ec     03 FA 05 56 |  if_ne	mov	result1, #3
1f3f0     D8 05 90 5D |  if_ne	jmp	#LR__3328
1f3f4     13 00 00 FF 
1f3f8     10 13 06 F6 | 	mov	arg01, ##10000
1f3fc     34 9B BF FD | 	call	#__system___waitus
1f400     30 4E 05 F1 | 	add	fp, #48
1f404     A7 12 02 FB | 	rdlong	arg01, fp
1f408     09 01 08 FC | 	wrpin	#0, arg01
1f40c     04 4E 05 F1 | 	add	fp, #4
1f410     A7 12 02 FB | 	rdlong	arg01, fp
1f414     09 01 08 FC | 	wrpin	#0, arg01
1f418     04 4E 05 F1 | 	add	fp, #4
1f41c     A7 12 02 FB | 	rdlong	arg01, fp
1f420     09 01 08 FC | 	wrpin	#0, arg01
1f424     04 4E 05 F1 | 	add	fp, #4
1f428     A7 12 02 FB | 	rdlong	arg01, fp
1f42c     09 00 80 FF 
1f430     09 01 08 FC | 	wrpin	##4608, arg01
1f434     0C 4E 85 F1 | 	sub	fp, #12
1f438     A7 12 02 FB | 	rdlong	arg01, fp
1f43c     59 12 62 FD | 	drvh	arg01
1f440     04 4E 05 F1 | 	add	fp, #4
1f444     A7 12 02 FB | 	rdlong	arg01, fp
1f448     59 12 62 FD | 	drvh	arg01
1f44c     04 4E 05 F1 | 	add	fp, #4
1f450     A7 12 02 FB | 	rdlong	arg01, fp
1f454     59 12 62 FD | 	drvh	arg01
1f458     04 4E 05 F1 | 	add	fp, #4
1f45c     A7 12 02 FB | 	rdlong	arg01, fp
1f460     59 12 62 FD | 	drvh	arg01
1f464     20 4E 85 F1 | 	sub	fp, #32
1f468     00 04 80 FF 
1f46c     A7 20 68 FC | 	wrlong	##524304, fp
1f470     04 4E 05 F1 | 	add	fp, #4
1f474     20 03 80 FF 
1f478     A7 90 68 FC | 	wrlong	##409672, fp
1f47c     14 4E 05 F1 | 	add	fp, #20
1f480     A7 1E 02 FB | 	rdlong	local01, fp
1f484     18 4E 85 F1 | 	sub	fp, #24
1f488     A7 16 02 FB | 	rdlong	arg03, fp
1f48c     40 1E 62 FD | 	dirl	local01
1f490     A0 03 80 FF 
1f494     0F 91 08 FC | 	wrpin	##475208, local01
1f498     0F 17 12 FC | 	wxpin	arg03, local01
1f49c     0F 01 28 FC | 	wypin	#0, local01
1f4a0     41 1E 62 FD | 	dirh	local01
1f4a4     1C 4E 05 F1 | 	add	fp, #28
1f4a8     A7 20 02 FB | 	rdlong	local02, fp
1f4ac     10 1F 82 F1 | 	sub	local01, local02
1f4b0     07 1E 06 F5 | 	and	local01, #7
1f4b4     18 1E 66 F0 | 	shl	local01, #24
1f4b8     78 14 06 F6 | 	mov	arg02, #120
1f4bc     0F 15 42 F5 | 	or	arg02, local01
1f4c0     14 4E 85 F1 | 	sub	fp, #20
1f4c4     A7 14 62 FC | 	wrlong	arg02, fp
1f4c8     14 4E 05 F1 | 	add	fp, #20
1f4cc     A7 12 02 FB | 	rdlong	arg01, fp
1f4d0     10 14 26 F4 | 	bith	arg02, #16
1f4d4     40 12 62 FD | 	dirl	arg01
1f4d8     09 15 02 FC | 	wrpin	arg02, arg01
1f4dc     09 3F 18 FC | 	wxpin	#31, arg01
1f4e0     FF FF FF FF 
1f4e4     09 FF 2B FC | 	wypin	##-1, arg01
1f4e8     41 12 62 FD | 	dirh	arg01
1f4ec     04 4E 85 F1 | 	sub	fp, #4
1f4f0     A7 14 02 FB | 	rdlong	arg02, fp
1f4f4     08 4E 05 F1 | 	add	fp, #8
1f4f8     A7 22 02 FB | 	rdlong	local03, fp
1f4fc     11 15 82 F1 | 	sub	arg02, local03
1f500     07 14 06 F5 | 	and	arg02, #7
1f504     18 14 66 F0 | 	shl	arg02, #24
1f508     14 4E 85 F1 | 	sub	fp, #20
1f50c     A7 14 62 FC | 	wrlong	arg02, fp
1f510     29 00 00 FF 
1f514     7A 14 46 F5 | 	or	arg02, ##21114
1f518     A7 14 62 FC | 	wrlong	arg02, fp
1f51c     14 4E 05 F1 | 	add	fp, #20
1f520     A7 12 02 FB | 	rdlong	arg01, fp
1f524     40 12 62 FD | 	dirl	arg01
1f528     09 15 02 FC | 	wrpin	arg02, arg01
1f52c     09 4F 18 FC | 	wxpin	#39, arg01
1f530     09 01 28 FC | 	wypin	#0, arg01
1f534     41 12 62 FD | 	dirh	arg01
1f538     28 4E 85 F1 | 	sub	fp, #40
1f53c     A7 12 02 F6 | 	mov	arg01, fp
1f540     14 4E 85 F1 | 	sub	fp, #20
1f544     0A 14 06 F6 | 	mov	arg02, #10
1f548     14 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f54c     00 12 06 F6 | 	mov	arg01, #0
1f550     00 14 06 F6 | 	mov	arg02, #0
1f554     E0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f558     1C 80 B0 FD | 	call	#_fatfs_cc_deselect_1003
1f55c     64 12 06 F6 | 	mov	arg01, #100
1f560     D0 99 BF FD | 	call	#__system___waitus
1f564     14 4E 05 F1 | 	add	fp, #20
1f568     A7 12 02 F6 | 	mov	arg01, fp
1f56c     14 4E 85 F1 | 	sub	fp, #20
1f570     0A 14 06 F6 | 	mov	arg02, #10
1f574     E8 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f578     0C 4E 05 F1 | 	add	fp, #12
1f57c     A7 00 48 FC | 	wrbyte	#0, fp
1f580     0C 4E 85 F1 | 	sub	fp, #12
1f584     00 12 06 F6 | 	mov	arg01, #0
1f588     00 14 06 F6 | 	mov	arg02, #0
1f58c     A8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f590     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f594     01 18 0E F2 | 	cmp	arg04, #1 wz
1f598     B8 03 90 5D |  if_ne	jmp	#LR__3327
1f59c     08 12 06 F6 | 	mov	arg01, #8
1f5a0     AA 15 06 F6 | 	mov	arg02, #426
1f5a4     90 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f5a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f5ac     01 FA 0D F2 | 	cmp	result1, #1 wz
1f5b0     98 01 90 5D |  if_ne	jmp	#LR__3313
1f5b4     14 4E 05 F1 | 	add	fp, #20
1f5b8     A7 12 02 F6 | 	mov	arg01, fp
1f5bc     14 4E 85 F1 | 	sub	fp, #20
1f5c0     04 14 06 F6 | 	mov	arg02, #4
1f5c4     98 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f5c8     16 4E 05 F1 | 	add	fp, #22
1f5cc     A7 24 C2 FA | 	rdbyte	local04, fp
1f5d0     16 4E 85 F1 | 	sub	fp, #22
1f5d4     01 24 0E F2 | 	cmp	local04, #1 wz
1f5d8     17 4E 05 A1 |  if_e	add	fp, #23
1f5dc     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f5e0     17 4E 85 A1 |  if_e	sub	fp, #23
1f5e4     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f5e8     68 03 90 5D |  if_ne	jmp	#LR__3326
1f5ec                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f5ec     18 4E 05 F1 | 	add	fp, #24
1f5f0     01 00 80 FF 
1f5f4     A7 D0 6B FC | 	wrlong	##1000, fp
1f5f8     18 4E 85 F1 | 	sub	fp, #24
1f5fc                 | LR__3310
1f5fc     18 4E 05 F1 | 	add	fp, #24
1f600     A7 1E 0A FB | 	rdlong	local01, fp wz
1f604     18 4E 85 F1 | 	sub	fp, #24
1f608     3C 00 90 AD |  if_e	jmp	#LR__3311
1f60c     A9 12 06 F6 | 	mov	arg01, #169
1f610     1E 14 C6 F9 | 	decod	arg02, #30
1f614     20 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f618     FD 24 02 F6 | 	mov	local04, result1
1f61c     07 24 4E F7 | 	zerox	local04, #7 wz
1f620     24 00 90 AD |  if_e	jmp	#LR__3311
1f624     01 00 00 FF 
1f628     E8 13 06 F6 | 	mov	arg01, ##1000
1f62c     04 99 BF FD | 	call	#__system___waitus
1f630     18 4E 05 F1 | 	add	fp, #24
1f634     A7 24 02 FB | 	rdlong	local04, fp
1f638     01 24 86 F1 | 	sub	local04, #1
1f63c     A7 24 62 FC | 	wrlong	local04, fp
1f640     18 4E 85 F1 | 	sub	fp, #24
1f644     B4 FF 9F FD | 	jmp	#LR__3310
1f648                 | LR__3311
1f648     18 4E 05 F1 | 	add	fp, #24
1f64c     A7 24 0A FB | 	rdlong	local04, fp wz
1f650     18 4E 85 F1 | 	sub	fp, #24
1f654     4C 00 90 AD |  if_e	jmp	#LR__3312
1f658     3A 12 06 F6 | 	mov	arg01, #58
1f65c     00 14 06 F6 | 	mov	arg02, #0
1f660     D4 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f664     FD 22 02 F6 | 	mov	local03, result1
1f668     07 22 4E F7 | 	zerox	local03, #7 wz
1f66c     34 00 90 5D |  if_ne	jmp	#LR__3312
1f670     14 4E 05 F1 | 	add	fp, #20
1f674     A7 12 02 F6 | 	mov	arg01, fp
1f678     14 4E 85 F1 | 	sub	fp, #20
1f67c     04 14 06 F6 | 	mov	arg02, #4
1f680     DC 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f684     14 4E 05 F1 | 	add	fp, #20
1f688     A7 1E C2 FA | 	rdbyte	local01, fp
1f68c     40 1E CE F7 | 	test	local01, #64 wz
1f690     0C 24 06 56 |  if_ne	mov	local04, #12
1f694     04 24 06 A6 |  if_e	mov	local04, #4
1f698     08 4E 85 F1 | 	sub	fp, #8
1f69c     A7 24 42 FC | 	wrbyte	local04, fp
1f6a0     0C 4E 85 F1 | 	sub	fp, #12
1f6a4                 | LR__3312
1f6a4     14 24 06 FB | 	rdlong	local04, #20
1f6a8     18 4E 05 F1 | 	add	fp, #24
1f6ac     A7 24 62 FC | 	wrlong	local04, fp
1f6b0     0C 4E 05 F1 | 	add	fp, #12
1f6b4     A7 24 02 FB | 	rdlong	local04, fp
1f6b8     1B 24 26 F4 | 	bith	local04, #27
1f6bc     A7 24 62 FC | 	wrlong	local04, fp
1f6c0     0C 4E 85 F1 | 	sub	fp, #12
1f6c4     A7 24 02 FB | 	rdlong	local04, fp
1f6c8     18 4E 85 F1 | 	sub	fp, #24
1f6cc     68 78 04 FF 
1f6d0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f6d4     1C 4E 05 C1 |  if_b	add	fp, #28
1f6d8     00 01 80 CF 
1f6dc     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f6e0     1C 4E 85 C1 |  if_b	sub	fp, #28
1f6e4     6C 02 90 CD |  if_b	jmp	#LR__3326
1f6e8     18 4E 05 F1 | 	add	fp, #24
1f6ec     A7 24 02 FB | 	rdlong	local04, fp
1f6f0     18 4E 85 F1 | 	sub	fp, #24
1f6f4     E1 F5 05 FF 
1f6f8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f6fc     1C 4E 05 C1 |  if_b	add	fp, #28
1f700     00 01 80 CF 
1f704     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f708     1C 4E 85 C1 |  if_b	sub	fp, #28
1f70c     44 02 90 CD |  if_b	jmp	#LR__3326
1f710     18 4E 05 F1 | 	add	fp, #24
1f714     A7 24 02 FB | 	rdlong	local04, fp
1f718     18 4E 85 F1 | 	sub	fp, #24
1f71c     3B 58 08 FF 
1f720     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f724     1C 4E 05 C1 |  if_b	add	fp, #28
1f728     00 01 80 CF 
1f72c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f730     1C 4E 85 C1 |  if_b	sub	fp, #28
1f734     1C 02 90 CD |  if_b	jmp	#LR__3326
1f738     1C 4E 05 F1 | 	add	fp, #28
1f73c     80 01 80 FF 
1f740     A7 10 68 FC | 	wrlong	##196616, fp
1f744     1C 4E 85 F1 | 	sub	fp, #28
1f748     08 02 90 FD | 	jmp	#LR__3326
1f74c                 | LR__3313
1f74c     A9 12 06 F6 | 	mov	arg01, #169
1f750     00 14 06 F6 | 	mov	arg02, #0
1f754     E0 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f758     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f75c     02 24 16 F2 | 	cmp	local04, #2 wc
1f760     18 00 90 3D |  if_ae	jmp	#LR__3314
1f764     0C 4E 05 F1 | 	add	fp, #12
1f768     A7 04 48 FC | 	wrbyte	#2, fp
1f76c     04 4E 05 F1 | 	add	fp, #4
1f770     A7 52 49 FC | 	wrbyte	#169, fp
1f774     10 4E 85 F1 | 	sub	fp, #16
1f778     14 00 90 FD | 	jmp	#LR__3315
1f77c                 | LR__3314
1f77c     0C 4E 05 F1 | 	add	fp, #12
1f780     A7 02 48 FC | 	wrbyte	#1, fp
1f784     04 4E 05 F1 | 	add	fp, #4
1f788     A7 02 48 FC | 	wrbyte	#1, fp
1f78c     10 4E 85 F1 | 	sub	fp, #16
1f790                 | LR__3315
1f790                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f790                 | ' 			}
1f790                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f790     18 4E 05 F1 | 	add	fp, #24
1f794     01 00 80 FF 
1f798     A7 D0 6B FC | 	wrlong	##1000, fp
1f79c     18 4E 85 F1 | 	sub	fp, #24
1f7a0                 | LR__3316
1f7a0     18 4E 05 F1 | 	add	fp, #24
1f7a4     A7 22 0A FB | 	rdlong	local03, fp wz
1f7a8     18 4E 85 F1 | 	sub	fp, #24
1f7ac     44 00 90 AD |  if_e	jmp	#LR__3317
1f7b0     10 4E 05 F1 | 	add	fp, #16
1f7b4     A7 12 C2 FA | 	rdbyte	arg01, fp
1f7b8     10 4E 85 F1 | 	sub	fp, #16
1f7bc     00 14 06 F6 | 	mov	arg02, #0
1f7c0     74 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f7c4     FD 24 02 F6 | 	mov	local04, result1
1f7c8     07 24 4E F7 | 	zerox	local04, #7 wz
1f7cc     24 00 90 AD |  if_e	jmp	#LR__3317
1f7d0     01 00 00 FF 
1f7d4     E8 13 06 F6 | 	mov	arg01, ##1000
1f7d8     58 97 BF FD | 	call	#__system___waitus
1f7dc     18 4E 05 F1 | 	add	fp, #24
1f7e0     A7 24 02 FB | 	rdlong	local04, fp
1f7e4     01 24 86 F1 | 	sub	local04, #1
1f7e8     A7 24 62 FC | 	wrlong	local04, fp
1f7ec     18 4E 85 F1 | 	sub	fp, #24
1f7f0     AC FF 9F FD | 	jmp	#LR__3316
1f7f4                 | LR__3317
1f7f4     18 4E 05 F1 | 	add	fp, #24
1f7f8     A7 24 0A FB | 	rdlong	local04, fp wz
1f7fc     18 4E 85 F1 | 	sub	fp, #24
1f800     14 00 90 AD |  if_e	jmp	#LR__3318
1f804     10 12 06 F6 | 	mov	arg01, #16
1f808     09 14 C6 F9 | 	decod	arg02, #9
1f80c     28 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f810     07 FA 4D F7 | 	zerox	result1, #7 wz
1f814     0C 00 90 AD |  if_e	jmp	#LR__3319
1f818                 | LR__3318
1f818     0C 4E 05 F1 | 	add	fp, #12
1f81c     A7 00 48 FC | 	wrbyte	#0, fp
1f820     0C 4E 85 F1 | 	sub	fp, #12
1f824                 | LR__3319
1f824     14 24 06 FB | 	rdlong	local04, #20
1f828     18 4E 05 F1 | 	add	fp, #24
1f82c     A7 24 62 FC | 	wrlong	local04, fp
1f830     18 4E 85 F1 | 	sub	fp, #24
1f834     F0 FA 02 FF 
1f838     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f83c     18 00 90 3D |  if_ae	jmp	#LR__3320
1f840     24 4E 05 F1 | 	add	fp, #36
1f844     A7 24 02 FB | 	rdlong	local04, fp
1f848     1B 24 26 F4 | 	bith	local04, #27
1f84c     A7 24 62 FC | 	wrlong	local04, fp
1f850     24 4E 85 F1 | 	sub	fp, #36
1f854     2C 00 90 FD | 	jmp	#LR__3321
1f858                 | LR__3320
1f858     18 4E 05 F1 | 	add	fp, #24
1f85c     A7 24 02 FB | 	rdlong	local04, fp
1f860     18 4E 85 F1 | 	sub	fp, #24
1f864     E1 F5 05 FF 
1f868     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f86c     24 4E 05 C1 |  if_b	add	fp, #36
1f870     A7 24 02 CB |  if_b	rdlong	local04, fp
1f874     80 00 04 CF 
1f878     00 24 46 C5 |  if_b	or	local04, ##134283264
1f87c     A7 24 62 CC |  if_b	wrlong	local04, fp
1f880     24 4E 85 C1 |  if_b	sub	fp, #36
1f884                 | LR__3321
1f884     18 4E 05 F1 | 	add	fp, #24
1f888     A7 24 02 FB | 	rdlong	local04, fp
1f88c     18 4E 85 F1 | 	sub	fp, #24
1f890     F0 FA 02 FF 
1f894     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f898     1C 4E 05 C1 |  if_b	add	fp, #28
1f89c     00 01 80 CF 
1f8a0     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f8a4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8a8     A8 00 90 CD |  if_b	jmp	#LR__3325
1f8ac     18 4E 05 F1 | 	add	fp, #24
1f8b0     A7 24 02 FB | 	rdlong	local04, fp
1f8b4     18 4E 85 F1 | 	sub	fp, #24
1f8b8     68 78 04 FF 
1f8bc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f8c0     1C 4E 05 C1 |  if_b	add	fp, #28
1f8c4     80 01 80 CF 
1f8c8     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1f8cc     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8d0     80 00 90 CD |  if_b	jmp	#LR__3324
1f8d4     18 4E 05 F1 | 	add	fp, #24
1f8d8     A7 24 02 FB | 	rdlong	local04, fp
1f8dc     18 4E 85 F1 | 	sub	fp, #24
1f8e0     E1 F5 05 FF 
1f8e4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f8e8     1C 4E 05 C1 |  if_b	add	fp, #28
1f8ec     00 02 80 CF 
1f8f0     A7 10 68 CC |  if_b	wrlong	##262152, fp
1f8f4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f8f8     58 00 90 CD |  if_b	jmp	#LR__3323
1f8fc     18 4E 05 F1 | 	add	fp, #24
1f900     A7 24 02 FB | 	rdlong	local04, fp
1f904     18 4E 85 F1 | 	sub	fp, #24
1f908     59 73 07 FF 
1f90c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1f910     1C 4E 05 C1 |  if_b	add	fp, #28
1f914     80 02 80 CF 
1f918     A7 14 68 CC |  if_b	wrlong	##327690, fp
1f91c     1C 4E 85 C1 |  if_b	sub	fp, #28
1f920     30 00 90 CD |  if_b	jmp	#LR__3322
1f924     18 4E 05 F1 | 	add	fp, #24
1f928     A7 24 02 FB | 	rdlong	local04, fp
1f92c     18 4E 85 F1 | 	sub	fp, #24
1f930     D1 F0 08 FF 
1f934     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1f938     1C 4E 05 C1 |  if_b	add	fp, #28
1f93c     00 03 80 CF 
1f940     A7 18 68 CC |  if_b	wrlong	##393228, fp
1f944     1C 4E 85 F3 | 	sumc	fp, #28
1f948     80 03 80 3F 
1f94c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1f950     1C 4E 85 31 |  if_ae	sub	fp, #28
1f954                 | LR__3322
1f954                 | LR__3323
1f954                 | LR__3324
1f954                 | LR__3325
1f954                 | LR__3326
1f954                 | LR__3327
1f954     0C 4E 05 F1 | 	add	fp, #12
1f958     A7 24 C2 FA | 	rdbyte	local04, fp
1f95c     01 00 00 FF 
1f960     21 E4 05 F1 | 	add	objptr, ##545
1f964     F2 24 42 FC | 	wrbyte	local04, objptr
1f968     A7 1E CA FA | 	rdbyte	local01, fp wz
1f96c     00 24 06 56 |  if_ne	mov	local04, #0
1f970     01 24 06 A6 |  if_e	mov	local04, #1
1f974     20 4E 05 F1 | 	add	fp, #32
1f978     A7 24 42 FC | 	wrbyte	local04, fp
1f97c     A7 24 C2 FA | 	rdbyte	local04, fp
1f980     2C 4E 85 F1 | 	sub	fp, #44
1f984     01 E4 85 F1 | 	sub	objptr, #1
1f988     F2 24 42 FC | 	wrbyte	local04, objptr
1f98c     01 00 00 FF 
1f990     20 E4 85 F1 | 	sub	objptr, ##544
1f994     E0 7B B0 FD | 	call	#_fatfs_cc_deselect_1003
1f998     34 4E 05 F1 | 	add	fp, #52
1f99c     A7 12 02 FB | 	rdlong	arg01, fp
1f9a0     18 4E 85 F1 | 	sub	fp, #24
1f9a4     A7 14 02 FB | 	rdlong	arg02, fp
1f9a8     09 15 12 FC | 	wxpin	arg02, arg01
1f9ac     1C 4E 05 F1 | 	add	fp, #28
1f9b0     A7 12 02 FB | 	rdlong	arg01, fp
1f9b4     14 4E 85 F1 | 	sub	fp, #20
1f9b8     A7 14 02 FB | 	rdlong	arg02, fp
1f9bc     09 15 02 FC | 	wrpin	arg02, arg01
1f9c0                 | ' 
1f9c0                 | ' 		}
1f9c0                 | ' 	}
1f9c0                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f9c0                 | ' 	CardType = ty;
1f9c0                 | ' 	s = ty ? 0 :  0x01 ;
1f9c0                 | ' 	Stat = s;
1f9c0                 | ' 
1f9c0                 | ' 	deselect();
1f9c0                 | ' 
1f9c0                 | ' 
1f9c0                 | ' 	_wxpin( PIN_CLK, ck_div );
1f9c0                 | ' 	_wrpin( PIN_DI, spm_tx );
1f9c0                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f9c0                 | ' 	return s;
1f9c0     08 4E 05 F1 | 	add	fp, #8
1f9c4     A7 FA C1 FA | 	rdbyte	result1, fp
1f9c8     2C 4E 85 F1 | 	sub	fp, #44
1f9cc                 | LR__3328
1f9cc     A7 F0 03 F6 | 	mov	ptra, fp
1f9d0     B2 00 A0 FD | 	call	#popregs_
1f9d4                 | _fatfs_cc_disk_initialize_ret
1f9d4     2D 00 64 FD | 	ret
1f9d8                 | 
1f9d8                 | _fatfs_cc_disk_read
1f9d8     05 4A 05 F6 | 	mov	COUNT_, #5
1f9dc     A8 00 A0 FD | 	call	#pushregs_
1f9e0     0A 1F 02 F6 | 	mov	local01, arg02
1f9e4     0B 21 02 F6 | 	mov	local02, arg03
1f9e8     0C 23 02 F6 | 	mov	local03, arg04
1f9ec     00 12 0E F2 | 	cmp	arg01, #0 wz
1f9f0     01 FA 05 56 |  if_ne	mov	result1, #1
1f9f4                 | ' 
1f9f4                 | ' 	return Stat;
1f9f4     01 00 00 AF 
1f9f8     20 E4 05 A1 |  if_e	add	objptr, ##544
1f9fc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fa00     01 00 00 AF 
1fa04     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fa08     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fa0c     01 FA CD F7 | 	test	result1, #1 wz
1fa10     03 FA 05 56 |  if_ne	mov	result1, #3
1fa14     84 00 90 5D |  if_ne	jmp	#LR__3332
1fa18     01 00 00 FF 
1fa1c     21 E4 05 F1 | 	add	objptr, ##545
1fa20     F2 24 C2 FA | 	rdbyte	local04, objptr
1fa24     01 00 00 FF 
1fa28     21 E4 85 F1 | 	sub	objptr, ##545
1fa2c     08 24 CE F7 | 	test	local04, #8 wz
1fa30     09 20 66 A0 |  if_e	shl	local02, #9
1fa34     02 22 16 F2 | 	cmp	local03, #2 wc
1fa38     12 24 06 36 |  if_ae	mov	local04, #18
1fa3c     11 24 06 C6 |  if_b	mov	local04, #17
1fa40     10 15 02 F6 | 	mov	arg02, local02
1fa44     12 13 02 F6 | 	mov	arg01, local04
1fa48     EC 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1fa4c     FD 26 02 F6 | 	mov	local05, result1
1fa50     07 26 4E F7 | 	zerox	local05, #7 wz
1fa54     30 00 90 5D |  if_ne	jmp	#LR__3331
1fa58                 | ' 		do {
1fa58                 | LR__3330
1fa58     0F 13 02 F6 | 	mov	arg01, local01
1fa5c     09 14 C6 F9 | 	decod	arg02, #9
1fa60     28 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1011
1fa64     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa68     01 00 00 5F 
1fa6c     00 1E 06 51 |  if_ne	add	local01, ##512
1fa70     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3330
1fa74     12 25 E2 F8 | 	getbyte	local04, local04, #0
1fa78     12 24 0E F2 | 	cmp	local04, #18 wz
1fa7c     0C 12 06 A6 |  if_e	mov	arg01, #12
1fa80     00 14 06 A6 |  if_e	mov	arg02, #0
1fa84     B0 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1017
1fa88                 | LR__3331
1fa88     EC 7A B0 FD | 	call	#_fatfs_cc_deselect_1003
1fa8c                 | ' 	}
1fa8c                 | ' 	deselect();
1fa8c                 | ' 
1fa8c                 | ' 	return count ? RES_ERROR : RES_OK;
1fa8c     00 22 0E F2 | 	cmp	local03, #0 wz
1fa90     01 26 06 56 |  if_ne	mov	local05, #1
1fa94     00 26 06 A6 |  if_e	mov	local05, #0
1fa98     13 FB 01 F6 | 	mov	result1, local05
1fa9c                 | LR__3332
1fa9c     A7 F0 03 F6 | 	mov	ptra, fp
1faa0     B2 00 A0 FD | 	call	#popregs_
1faa4                 | _fatfs_cc_disk_read_ret
1faa4     2D 00 64 FD | 	ret
1faa8                 | 
1faa8                 | _fatfs_cc_disk_write
1faa8     04 4A 05 F6 | 	mov	COUNT_, #4
1faac     A8 00 A0 FD | 	call	#pushregs_
1fab0     0A 1F 02 F6 | 	mov	local01, arg02
1fab4     0C 21 02 F6 | 	mov	local02, arg04
1fab8     0B 23 02 F6 | 	mov	local03, arg03
1fabc     00 12 0E F2 | 	cmp	arg01, #0 wz
1fac0     01 FA 05 56 |  if_ne	mov	result1, #1
1fac4                 | ' 
1fac4                 | ' 	return Stat;
1fac4     01 00 00 AF 
1fac8     20 E4 05 A1 |  if_e	add	objptr, ##544
1facc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fad0     01 00 00 AF 
1fad4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fad8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fadc     01 FA CD F7 | 	test	result1, #1 wz
1fae0     03 FA 05 56 |  if_ne	mov	result1, #3
1fae4     D4 00 90 5D |  if_ne	jmp	#LR__3344
1fae8     01 00 00 FF 
1faec     21 E4 05 F1 | 	add	objptr, ##545
1faf0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1faf4     01 00 00 FF 
1faf8     21 E4 85 F1 | 	sub	objptr, ##545
1fafc     08 16 CE F7 | 	test	arg03, #8 wz
1fb00     09 22 66 A0 |  if_e	shl	local03, #9
1fb04     01 20 0E F2 | 	cmp	local02, #1 wz
1fb08     30 00 90 5D |  if_ne	jmp	#LR__3340
1fb0c     18 12 06 F6 | 	mov	arg01, #24
1fb10     11 15 02 F6 | 	mov	arg02, local03
1fb14     20 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1fb18     FD 24 02 F6 | 	mov	local04, result1
1fb1c     07 24 4E F7 | 	zerox	local04, #7 wz
1fb20     84 00 90 5D |  if_ne	jmp	#LR__3343
1fb24     0F 13 02 F6 | 	mov	arg01, local01
1fb28     FE 14 06 F6 | 	mov	arg02, #254
1fb2c     3C 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1fb30     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb34     00 20 06 56 |  if_ne	mov	local02, #0
1fb38     6C 00 90 FD | 	jmp	#LR__3343
1fb3c                 | LR__3340
1fb3c     01 00 00 FF 
1fb40     21 E4 05 F1 | 	add	objptr, ##545
1fb44     F2 24 C2 FA | 	rdbyte	local04, objptr
1fb48     01 00 00 FF 
1fb4c     21 E4 85 F1 | 	sub	objptr, ##545
1fb50     06 24 CE F7 | 	test	local04, #6 wz
1fb54     97 12 06 56 |  if_ne	mov	arg01, #151
1fb58     10 15 02 56 |  if_ne	mov	arg02, local02
1fb5c     D8 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1017
1fb60     11 15 02 F6 | 	mov	arg02, local03
1fb64     19 12 06 F6 | 	mov	arg01, #25
1fb68     CC 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1fb6c     FD 24 02 F6 | 	mov	local04, result1
1fb70     07 24 4E F7 | 	zerox	local04, #7 wz
1fb74     30 00 90 5D |  if_ne	jmp	#LR__3342
1fb78                 | ' 			do {
1fb78                 | LR__3341
1fb78     0F 13 02 F6 | 	mov	arg01, local01
1fb7c     FC 14 06 F6 | 	mov	arg02, #252
1fb80     E8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1fb84     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb88     01 00 00 5F 
1fb8c     00 1E 06 51 |  if_ne	add	local01, ##512
1fb90     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3341
1fb94     00 12 06 F6 | 	mov	arg01, #0
1fb98     FD 14 06 F6 | 	mov	arg02, #253
1fb9c     CC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1fba0     00 FA 0D F2 | 	cmp	result1, #0 wz
1fba4     01 20 06 A6 |  if_e	mov	local02, #1
1fba8                 | LR__3342
1fba8                 | LR__3343
1fba8     CC 79 B0 FD | 	call	#_fatfs_cc_deselect_1003
1fbac                 | ' 				count = 1;
1fbac                 | ' 		}
1fbac                 | ' 	}
1fbac                 | ' 	deselect();
1fbac                 | ' 
1fbac                 | ' 	return count ? RES_ERROR : RES_OK;
1fbac     00 20 0E F2 | 	cmp	local02, #0 wz
1fbb0     01 24 06 56 |  if_ne	mov	local04, #1
1fbb4     00 24 06 A6 |  if_e	mov	local04, #0
1fbb8     12 FB 01 F6 | 	mov	result1, local04
1fbbc                 | LR__3344
1fbbc     A7 F0 03 F6 | 	mov	ptra, fp
1fbc0     B2 00 A0 FD | 	call	#popregs_
1fbc4                 | _fatfs_cc_disk_write_ret
1fbc4     2D 00 64 FD | 	ret
1fbc8                 | 
1fbc8                 | _fatfs_cc_disk_ioctl
1fbc8     01 4A 05 F6 | 	mov	COUNT_, #1
1fbcc     A8 00 A0 FD | 	call	#pushregs_
1fbd0     30 F0 07 F1 | 	add	ptra, #48
1fbd4     04 4E 05 F1 | 	add	fp, #4
1fbd8     A7 12 42 FC | 	wrbyte	arg01, fp
1fbdc     04 4E 05 F1 | 	add	fp, #4
1fbe0     A7 14 42 FC | 	wrbyte	arg02, fp
1fbe4     04 4E 05 F1 | 	add	fp, #4
1fbe8     A7 16 62 FC | 	wrlong	arg03, fp
1fbec     08 4E 85 F1 | 	sub	fp, #8
1fbf0     A7 12 CA FA | 	rdbyte	arg01, fp wz
1fbf4     04 4E 85 F1 | 	sub	fp, #4
1fbf8     01 FA 05 56 |  if_ne	mov	result1, #1
1fbfc                 | ' 
1fbfc                 | ' 	return Stat;
1fbfc     01 00 00 AF 
1fc00     20 E4 05 A1 |  if_e	add	objptr, ##544
1fc04     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fc08     01 00 00 AF 
1fc0c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fc10     FD FA E1 F8 | 	getbyte	result1, result1, #0
1fc14     01 FA CD F7 | 	test	result1, #1 wz
1fc18     03 FA 05 56 |  if_ne	mov	result1, #3
1fc1c     E4 01 90 5D |  if_ne	jmp	#LR__3358
1fc20     10 4E 05 F1 | 	add	fp, #16
1fc24     A7 02 68 FC | 	wrlong	#1, fp
1fc28                 | ' 
1fc28                 | ' 	res = RES_ERROR;
1fc28                 | ' 	switch (ctrl) {
1fc28     08 4E 85 F1 | 	sub	fp, #8
1fc2c     A7 1E C2 FA | 	rdbyte	local01, fp
1fc30     08 4E 85 F1 | 	sub	fp, #8
1fc34     04 1E 26 F3 | 	fle	local01, #4
1fc38     30 1E 62 FD | 	jmprel	local01
1fc3c                 | LR__3350
1fc3c     10 00 90 FD | 	jmp	#LR__3351
1fc40     24 00 90 FD | 	jmp	#LR__3352
1fc44     A0 01 90 FD | 	jmp	#LR__3356
1fc48     80 01 90 FD | 	jmp	#LR__3355
1fc4c     98 01 90 FD | 	jmp	#LR__3356
1fc50                 | LR__3351
1fc50     A8 79 B0 FD | 	call	#_fatfs_cc_select_1007
1fc54     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc58     10 4E 05 51 |  if_ne	add	fp, #16
1fc5c     A7 00 68 5C |  if_ne	wrlong	#0, fp
1fc60     10 4E 85 51 |  if_ne	sub	fp, #16
1fc64                 | ' 			break;
1fc64     8C 01 90 FD | 	jmp	#LR__3357
1fc68                 | LR__3352
1fc68     09 12 06 F6 | 	mov	arg01, #9
1fc6c     00 14 06 F6 | 	mov	arg02, #0
1fc70     C4 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1fc74     FD 1E 02 F6 | 	mov	local01, result1
1fc78     07 1E 4E F7 | 	zerox	local01, #7 wz
1fc7c     74 01 90 5D |  if_ne	jmp	#LR__3357
1fc80     18 4E 05 F1 | 	add	fp, #24
1fc84     A7 12 02 F6 | 	mov	arg01, fp
1fc88     18 4E 85 F1 | 	sub	fp, #24
1fc8c     10 14 06 F6 | 	mov	arg02, #16
1fc90     F8 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1011
1fc94     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc98     58 01 90 AD |  if_e	jmp	#LR__3357
1fc9c     18 4E 05 F1 | 	add	fp, #24
1fca0     A7 1E C2 FA | 	rdbyte	local01, fp
1fca4     18 4E 85 F1 | 	sub	fp, #24
1fca8     06 1E 46 F0 | 	shr	local01, #6
1fcac     01 1E 0E F2 | 	cmp	local01, #1 wz
1fcb0     5C 00 90 5D |  if_ne	jmp	#LR__3353
1fcb4     21 4E 05 F1 | 	add	fp, #33
1fcb8     A7 1E C2 FA | 	rdbyte	local01, fp
1fcbc     01 4E 85 F1 | 	sub	fp, #1
1fcc0     A7 FA C1 FA | 	rdbyte	result1, fp
1fcc4     FD FA 31 F9 | 	getword	result1, result1, #0
1fcc8     08 FA 65 F0 | 	shl	result1, #8
1fccc     FD 1E 02 F1 | 	add	local01, result1
1fcd0     01 4E 85 F1 | 	sub	fp, #1
1fcd4     A7 FA C1 FA | 	rdbyte	result1, fp
1fcd8     3F FA 05 F5 | 	and	result1, #63
1fcdc     10 FA 65 F0 | 	shl	result1, #16
1fce0     FD 1E 02 F1 | 	add	local01, result1
1fce4     01 1E 06 F1 | 	add	local01, #1
1fce8     09 4E 05 F1 | 	add	fp, #9
1fcec     A7 1E 62 FC | 	wrlong	local01, fp
1fcf0     1C 4E 85 F1 | 	sub	fp, #28
1fcf4     A7 1E 02 FB | 	rdlong	local01, fp
1fcf8     1C 4E 05 F1 | 	add	fp, #28
1fcfc     A7 FA 01 FB | 	rdlong	result1, fp
1fd00     28 4E 85 F1 | 	sub	fp, #40
1fd04     0A FA 65 F0 | 	shl	result1, #10
1fd08     0F FB 61 FC | 	wrlong	result1, local01
1fd0c     AC 00 90 FD | 	jmp	#LR__3354
1fd10                 | LR__3353
1fd10     1D 4E 05 F1 | 	add	fp, #29
1fd14     A7 1E C2 FA | 	rdbyte	local01, fp
1fd18     0F 1F 42 F8 | 	getnib	local01, local01, #0
1fd1c     05 4E 05 F1 | 	add	fp, #5
1fd20     A7 FA C1 FA | 	rdbyte	result1, fp
1fd24     80 FA 05 F5 | 	and	result1, #128
1fd28     07 FA C5 F0 | 	sar	result1, #7
1fd2c     FD 1E 02 F1 | 	add	local01, result1
1fd30     01 4E 85 F1 | 	sub	fp, #1
1fd34     A7 FA C1 FA | 	rdbyte	result1, fp
1fd38     03 FA 05 F5 | 	and	result1, #3
1fd3c     01 FA 65 F0 | 	shl	result1, #1
1fd40     FD 1E 02 F1 | 	add	local01, result1
1fd44     02 1E 06 F1 | 	add	local01, #2
1fd48     0D 4E 85 F1 | 	sub	fp, #13
1fd4c     A7 1E 42 FC | 	wrbyte	local01, fp
1fd50     0C 4E 05 F1 | 	add	fp, #12
1fd54     A7 1E C2 FA | 	rdbyte	local01, fp
1fd58     06 1E 46 F0 | 	shr	local01, #6
1fd5c     01 4E 85 F1 | 	sub	fp, #1
1fd60     A7 FA C1 FA | 	rdbyte	result1, fp
1fd64     FD FA 31 F9 | 	getword	result1, result1, #0
1fd68     02 FA 65 F0 | 	shl	result1, #2
1fd6c     FD 1E 02 F1 | 	add	local01, result1
1fd70     01 4E 85 F1 | 	sub	fp, #1
1fd74     A7 FA C1 FA | 	rdbyte	result1, fp
1fd78     03 FA 05 F5 | 	and	result1, #3
1fd7c     FD FA 31 F9 | 	getword	result1, result1, #0
1fd80     0A FA 65 F0 | 	shl	result1, #10
1fd84     FD 1E 02 F1 | 	add	local01, result1
1fd88     01 1E 06 F1 | 	add	local01, #1
1fd8c     0A 4E 05 F1 | 	add	fp, #10
1fd90     A7 1E 62 FC | 	wrlong	local01, fp
1fd94     1C 4E 85 F1 | 	sub	fp, #28
1fd98     A7 1E 02 FB | 	rdlong	local01, fp
1fd9c     1C 4E 05 F1 | 	add	fp, #28
1fda0     A7 FA 01 FB | 	rdlong	result1, fp
1fda4     14 4E 85 F1 | 	sub	fp, #20
1fda8     A7 16 C2 FA | 	rdbyte	arg03, fp
1fdac     14 4E 85 F1 | 	sub	fp, #20
1fdb0     09 16 86 F1 | 	sub	arg03, #9
1fdb4     0B FB 61 F0 | 	shl	result1, arg03
1fdb8     0F FB 61 FC | 	wrlong	result1, local01
1fdbc                 | LR__3354
1fdbc     10 4E 05 F1 | 	add	fp, #16
1fdc0     A7 00 68 FC | 	wrlong	#0, fp
1fdc4     10 4E 85 F1 | 	sub	fp, #16
1fdc8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1fdc8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1fdc8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1fdc8                 | ' 				}
1fdc8                 | ' 				res = RES_OK;
1fdc8                 | ' 			}
1fdc8                 | ' 			break;
1fdc8     28 00 90 FD | 	jmp	#LR__3357
1fdcc                 | LR__3355
1fdcc     0C 4E 05 F1 | 	add	fp, #12
1fdd0     A7 1E 02 FB | 	rdlong	local01, fp
1fdd4     0F 01 69 FC | 	wrlong	#128, local01
1fdd8     04 4E 05 F1 | 	add	fp, #4
1fddc     A7 00 68 FC | 	wrlong	#0, fp
1fde0     10 4E 85 F1 | 	sub	fp, #16
1fde4                 | ' 			*(DWORD*)buff = 128;
1fde4                 | ' 			res = RES_OK;
1fde4                 | ' 			break;
1fde4     0C 00 90 FD | 	jmp	#LR__3357
1fde8                 | LR__3356
1fde8     10 4E 05 F1 | 	add	fp, #16
1fdec     A7 08 68 FC | 	wrlong	#4, fp
1fdf0     10 4E 85 F1 | 	sub	fp, #16
1fdf4                 | LR__3357
1fdf4     80 77 B0 FD | 	call	#_fatfs_cc_deselect_1003
1fdf8                 | ' 			res = RES_PARERR;
1fdf8                 | ' 	}
1fdf8                 | ' 
1fdf8                 | ' 	deselect();
1fdf8                 | ' 
1fdf8                 | ' 	return res;
1fdf8     10 4E 05 F1 | 	add	fp, #16
1fdfc     A7 FA 01 FB | 	rdlong	result1, fp
1fe00     10 4E 85 F1 | 	sub	fp, #16
1fe04                 | LR__3358
1fe04     A7 F0 03 F6 | 	mov	ptra, fp
1fe08     B2 00 A0 FD | 	call	#popregs_
1fe0c                 | _fatfs_cc_disk_ioctl_ret
1fe0c     2D 00 64 FD | 	ret
1fe10                 | 
1fe10                 | _fatfs_cc_disk_setpins
1fe10     00 12 0E F2 | 	cmp	arg01, #0 wz
1fe14     01 FA 65 56 |  if_ne	neg	result1, #1
1fe18     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1fe1c     01 00 00 FF 
1fe20     10 E4 05 F1 | 	add	objptr, ##528
1fe24     F2 14 62 FC | 	wrlong	arg02, objptr
1fe28     04 E4 05 F1 | 	add	objptr, #4
1fe2c     F2 16 62 FC | 	wrlong	arg03, objptr
1fe30     04 E4 05 F1 | 	add	objptr, #4
1fe34     F2 18 62 FC | 	wrlong	arg04, objptr
1fe38     04 E4 05 F1 | 	add	objptr, #4
1fe3c     F2 1A 62 FC | 	wrlong	arg05, objptr
1fe40     01 00 00 FF 
1fe44     1C E4 85 F1 | 	sub	objptr, ##540
1fe48     00 FA 05 F6 | 	mov	result1, #0
1fe4c                 | _fatfs_cc_disk_setpins_ret
1fe4c     2D 00 64 FD | 	ret
1fe50                 | 
1fe50                 | _fatfs_cc_tchar2uni
1fe50     09 01 02 FB | 	rdlong	_var01, arg01
1fe54     00 03 02 F6 | 	mov	_var02, _var01
1fe58     01 00 06 F1 | 	add	_var01, #1
1fe5c     00 05 02 F6 | 	mov	_var03, _var01
1fe60     01 07 C2 FA | 	rdbyte	_var04, _var02
1fe64     80 06 CE F7 | 	test	_var04, #128 wz
1fe68     E8 00 90 AD |  if_e	jmp	#LR__3367
1fe6c     03 09 02 F6 | 	mov	_var05, _var04
1fe70     E0 08 06 F5 | 	and	_var05, #224
1fe74     C0 08 0E F2 | 	cmp	_var05, #192 wz
1fe78     1F 06 06 A5 |  if_e	and	_var04, #31
1fe7c     01 0A 06 A6 |  if_e	mov	_var06, #1
1fe80     34 00 90 AD |  if_e	jmp	#LR__3361
1fe84     03 09 02 F6 | 	mov	_var05, _var04
1fe88     F0 08 06 F5 | 	and	_var05, #240
1fe8c     E0 08 0E F2 | 	cmp	_var05, #224 wz
1fe90     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1fe94     02 0A 06 A6 |  if_e	mov	_var06, #2
1fe98     1C 00 90 AD |  if_e	jmp	#LR__3360
1fe9c     03 09 02 F6 | 	mov	_var05, _var04
1fea0     F8 08 06 F5 | 	and	_var05, #248
1fea4     F0 08 0E F2 | 	cmp	_var05, #240 wz
1fea8     07 06 06 A5 |  if_e	and	_var04, #7
1feac     03 0A 06 A6 |  if_e	mov	_var06, #3
1feb0                 | ' 			return 0xFFFFFFFF;
1feb0     01 FA 65 56 |  if_ne	neg	result1, #1
1feb4     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1feb8                 | LR__3360
1feb8                 | LR__3361
1feb8                 | ' 		}
1feb8                 | ' 		do {
1feb8                 | LR__3362
1feb8     02 0D C2 FA | 	rdbyte	_var07, _var03
1febc     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1fec0     C0 08 06 F5 | 	and	_var05, #192
1fec4     80 08 0E F2 | 	cmp	_var05, #128 wz
1fec8     01 04 06 F1 | 	add	_var03, #1
1fecc     01 FA 65 56 |  if_ne	neg	result1, #1
1fed0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1fed4     06 06 66 F0 | 	shl	_var04, #6
1fed8     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1fedc     3F 02 06 F5 | 	and	_var02, #63
1fee0     01 07 42 F5 | 	or	_var04, _var02
1fee4     F4 0B 6E FB | 	djnz	_var06, #LR__3362
1fee8     80 06 16 F2 | 	cmp	_var04, #128 wc
1feec     24 00 90 CD |  if_b	jmp	#LR__3364
1fef0     6C 00 00 FF 
1fef4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1fef8     0C 00 90 CD |  if_b	jmp	#LR__3363
1fefc     70 00 00 FF 
1ff00     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1ff04     0C 00 90 CD |  if_b	jmp	#LR__3364
1ff08                 | LR__3363
1ff08     80 08 00 FF 
1ff0c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1ff10     08 00 90 CD |  if_b	jmp	#LR__3365
1ff14                 | LR__3364
1ff14     01 FA 65 F6 | 	neg	result1, #1
1ff18     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1ff1c                 | LR__3365
1ff1c     80 00 00 FF 
1ff20     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1ff24     2C 00 90 CD |  if_b	jmp	#LR__3366
1ff28     03 03 02 F6 | 	mov	_var02, _var04
1ff2c     80 00 00 FF 
1ff30     00 02 86 F1 | 	sub	_var02, ##65536
1ff34     06 02 66 F0 | 	shl	_var02, #6
1ff38     80 FF 01 FF 
1ff3c     00 02 06 F5 | 	and	_var02, ##67043328
1ff40     6E 00 6C FF 
1ff44     00 08 06 F6 | 	mov	_var05, ##-671032320
1ff48     01 09 42 F5 | 	or	_var05, _var02
1ff4c     09 06 46 F7 | 	zerox	_var04, #9
1ff50     04 07 42 F5 | 	or	_var04, _var05
1ff54                 | LR__3366
1ff54                 | LR__3367
1ff54     09 05 62 FC | 	wrlong	_var03, arg01
1ff58                 | ' 	}
1ff58                 | ' #line 811 "ff.c"
1ff58                 | ' 	*str = p;
1ff58                 | ' 	return uc;
1ff58     03 FB 01 F6 | 	mov	result1, _var04
1ff5c                 | _fatfs_cc_tchar2uni_ret
1ff5c     2D 00 64 FD | 	ret
1ff60                 | 
1ff60                 | _fatfs_cc_put_utf
1ff60     80 12 16 F2 | 	cmp	arg01, #128 wc
1ff64     18 00 90 3D |  if_ae	jmp	#LR__3370
1ff68     01 16 16 F2 | 	cmp	arg03, #1 wc
1ff6c     00 FA 05 C6 |  if_b	mov	result1, #0
1ff70     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ff74     0A 13 42 FC | 	wrbyte	arg01, arg02
1ff78                 | ' 		*buf = (TCHAR)chr;
1ff78                 | ' 		return 1;
1ff78     01 FA 05 F6 | 	mov	result1, #1
1ff7c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ff80                 | LR__3370
1ff80     04 00 00 FF 
1ff84     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1ff88     40 00 90 3D |  if_ae	jmp	#LR__3371
1ff8c     02 16 16 F2 | 	cmp	arg03, #2 wc
1ff90     00 FA 05 C6 |  if_b	mov	result1, #0
1ff94     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ff98     09 FB 01 F6 | 	mov	result1, arg01
1ff9c     06 FA 45 F0 | 	shr	result1, #6
1ffa0     1F FA 05 F5 | 	and	result1, #31
1ffa4     C0 16 06 F6 | 	mov	arg03, #192
1ffa8     FD 16 42 F5 | 	or	arg03, result1
1ffac     0A 17 42 FC | 	wrbyte	arg03, arg02
1ffb0     01 14 06 F1 | 	add	arg02, #1
1ffb4     3F 12 06 F5 | 	and	arg01, #63
1ffb8     80 FA 05 F6 | 	mov	result1, #128
1ffbc     09 FB 41 F5 | 	or	result1, arg01
1ffc0     0A FB 41 FC | 	wrbyte	result1, arg02
1ffc4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1ffc4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ffc4                 | ' 		return 2;
1ffc4     02 FA 05 F6 | 	mov	result1, #2
1ffc8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ffcc                 | LR__3371
1ffcc     80 00 00 FF 
1ffd0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ffd4     70 00 90 3D |  if_ae	jmp	#LR__3374
1ffd8     03 16 16 F2 | 	cmp	arg03, #3 wc
1ffdc     18 00 90 CD |  if_b	jmp	#LR__3372
1ffe0     6C 00 00 FF 
1ffe4     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1ffe8     14 00 90 CD |  if_b	jmp	#LR__3373
1ffec     70 00 00 FF 
1fff0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1fff4     08 00 90 3D |  if_ae	jmp	#LR__3373
1fff8                 | LR__3372
1fff8     00 FA 05 F6 | 	mov	result1, #0
1fffc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20000                 | LR__3373
20000     09 FB 59 F8 | 	getnib	result1, arg01, #3
20004     E0 16 06 F6 | 	mov	arg03, #224
20008     FD 16 42 F5 | 	or	arg03, result1
2000c     0A 17 42 FC | 	wrbyte	arg03, arg02
20010     01 14 06 F1 | 	add	arg02, #1
20014     09 FB 01 F6 | 	mov	result1, arg01
20018     06 FA 45 F0 | 	shr	result1, #6
2001c     3F FA 05 F5 | 	and	result1, #63
20020     80 16 06 F6 | 	mov	arg03, #128
20024     FD 16 42 F5 | 	or	arg03, result1
20028     0A 17 42 FC | 	wrbyte	arg03, arg02
2002c     01 14 06 F1 | 	add	arg02, #1
20030     3F 12 06 F5 | 	and	arg01, #63
20034     80 FA 05 F6 | 	mov	result1, #128
20038     09 FB 41 F5 | 	or	result1, arg01
2003c     0A FB 41 FC | 	wrbyte	result1, arg02
20040                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
20040                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
20040                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
20040                 | ' 		return 3;
20040     03 FA 05 F6 | 	mov	result1, #3
20044     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
20048                 | LR__3374
20048     04 16 16 F2 | 	cmp	arg03, #4 wc
2004c     00 FA 05 C6 |  if_b	mov	result1, #0
20050     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
20054     09 01 02 F6 | 	mov	_var01, arg01
20058     E0 01 06 F4 | 	bitl	_var01, #480
2005c     00 00 6C FF 
20060     00 00 86 F1 | 	sub	_var01, ##-671088640
20064     06 00 46 F0 | 	shr	_var01, #6
20068     09 13 32 F9 | 	getword	arg01, arg01, #0
2006c     6E 00 00 FF 
20070     00 12 86 F1 | 	sub	arg01, ##56320
20074     00 08 00 FF 
20078     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2007c     02 00 00 CF 
20080     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
20084     00 FA 05 36 |  if_ae	mov	result1, #0
20088     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2008c     09 01 42 F5 | 	or	_var01, arg01
20090     80 00 00 FF 
20094     00 00 06 F1 | 	add	_var01, ##65536
20098     00 FB 01 F6 | 	mov	result1, _var01
2009c     12 FA 45 F0 | 	shr	result1, #18
200a0     07 FA 05 F5 | 	and	result1, #7
200a4     F0 16 06 F6 | 	mov	arg03, #240
200a8     FD 16 42 F5 | 	or	arg03, result1
200ac     0A 17 42 FC | 	wrbyte	arg03, arg02
200b0     01 14 06 F1 | 	add	arg02, #1
200b4     00 FB 01 F6 | 	mov	result1, _var01
200b8     0C FA 45 F0 | 	shr	result1, #12
200bc     3F FA 05 F5 | 	and	result1, #63
200c0     80 16 06 F6 | 	mov	arg03, #128
200c4     FD 16 42 F5 | 	or	arg03, result1
200c8     0A 17 42 FC | 	wrbyte	arg03, arg02
200cc     01 14 06 F1 | 	add	arg02, #1
200d0     00 FB 01 F6 | 	mov	result1, _var01
200d4     06 FA 45 F0 | 	shr	result1, #6
200d8     3F FA 05 F5 | 	and	result1, #63
200dc     80 16 06 F6 | 	mov	arg03, #128
200e0     FD 16 42 F5 | 	or	arg03, result1
200e4     0A 17 42 FC | 	wrbyte	arg03, arg02
200e8     01 14 06 F1 | 	add	arg02, #1
200ec     3F 00 06 F5 | 	and	_var01, #63
200f0     80 FA 05 F6 | 	mov	result1, #128
200f4     00 FB 41 F5 | 	or	result1, _var01
200f8     0A FB 41 FC | 	wrbyte	result1, arg02
200fc                 | ' 	chr = (hc | chr) + 0x10000;
200fc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
200fc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
200fc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
200fc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
200fc                 | ' 	return 4;
200fc     04 FA 05 F6 | 	mov	result1, #4
20100                 | _fatfs_cc_put_utf_ret
20100     2D 00 64 FD | 	ret
20104                 | 
20104                 | _fatfs_cc_sync_window
20104     02 4A 05 F6 | 	mov	COUNT_, #2
20108     A8 00 A0 FD | 	call	#pushregs_
2010c     09 1F 02 F6 | 	mov	local01, arg01
20110     00 20 06 F6 | 	mov	local02, #0
20114     03 1E 06 F1 | 	add	local01, #3
20118     0F FB C9 FA | 	rdbyte	result1, local01 wz
2011c     03 1E 86 F1 | 	sub	local01, #3
20120     A4 00 90 AD |  if_e	jmp	#LR__3382
20124     01 1E 06 F1 | 	add	local01, #1
20128     0F 13 C2 FA | 	rdbyte	arg01, local01
2012c     33 1E 06 F1 | 	add	local01, #51
20130     0F 15 02 F6 | 	mov	arg02, local01
20134     04 1E 86 F1 | 	sub	local01, #4
20138     0F 17 02 FB | 	rdlong	arg03, local01
2013c     30 1E 86 F1 | 	sub	local01, #48
20140     01 18 06 F6 | 	mov	arg04, #1
20144     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
20148     00 FA 0D F2 | 	cmp	result1, #0 wz
2014c     74 00 90 5D |  if_ne	jmp	#LR__3380
20150     03 1E 06 F1 | 	add	local01, #3
20154     0F 01 48 FC | 	wrbyte	#0, local01
20158     2D 1E 06 F1 | 	add	local01, #45
2015c     0F FB 01 FB | 	rdlong	result1, local01
20160     0C 1E 86 F1 | 	sub	local01, #12
20164     0F 19 02 FB | 	rdlong	arg04, local01
20168     0C FB 81 F1 | 	sub	result1, arg04
2016c     08 1E 86 F1 | 	sub	local01, #8
20170     0F 19 02 FB | 	rdlong	arg04, local01
20174     1C 1E 86 F1 | 	sub	local01, #28
20178     0C FB 11 F2 | 	cmp	result1, arg04 wc
2017c     48 00 90 3D |  if_ae	jmp	#LR__3381
20180     02 1E 06 F1 | 	add	local01, #2
20184     0F 19 C2 FA | 	rdbyte	arg04, local01
20188     02 1E 86 F1 | 	sub	local01, #2
2018c     02 18 0E F2 | 	cmp	arg04, #2 wz
20190     34 00 90 5D |  if_ne	jmp	#LR__3381
20194     01 1E 06 F1 | 	add	local01, #1
20198     0F 13 C2 FA | 	rdbyte	arg01, local01
2019c     33 1E 06 F1 | 	add	local01, #51
201a0     0F 15 02 F6 | 	mov	arg02, local01
201a4     04 1E 86 F1 | 	sub	local01, #4
201a8     0F 17 02 FB | 	rdlong	arg03, local01
201ac     14 1E 86 F1 | 	sub	local01, #20
201b0     0F 1F 02 FB | 	rdlong	local01, local01
201b4     0F 17 02 F1 | 	add	arg03, local01
201b8     01 18 06 F6 | 	mov	arg04, #1
201bc     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
201c0     04 00 90 FD | 	jmp	#LR__3381
201c4                 | LR__3380
201c4     01 20 06 F6 | 	mov	local02, #1
201c8                 | LR__3381
201c8                 | LR__3382
201c8                 | ' 			res = FR_DISK_ERR;
201c8                 | ' 		}
201c8                 | ' 	}
201c8                 | ' 	return res;
201c8     10 FB 01 F6 | 	mov	result1, local02
201cc     A7 F0 03 F6 | 	mov	ptra, fp
201d0     B2 00 A0 FD | 	call	#popregs_
201d4                 | _fatfs_cc_sync_window_ret
201d4     2D 00 64 FD | 	ret
201d8                 | 
201d8                 | _fatfs_cc_move_window
201d8     03 4A 05 F6 | 	mov	COUNT_, #3
201dc     A8 00 A0 FD | 	call	#pushregs_
201e0     09 1F 02 F6 | 	mov	local01, arg01
201e4     0A 21 02 F6 | 	mov	local02, arg02
201e8     00 22 06 F6 | 	mov	local03, #0
201ec     30 1E 06 F1 | 	add	local01, #48
201f0     0F 19 02 FB | 	rdlong	arg04, local01
201f4     30 1E 86 F1 | 	sub	local01, #48
201f8     0C 21 0A F2 | 	cmp	local02, arg04 wz
201fc     40 00 90 AD |  if_e	jmp	#LR__3391
20200     0F 13 02 F6 | 	mov	arg01, local01
20204     FC FE BF FD | 	call	#_fatfs_cc_sync_window
20208     FD 22 0A F6 | 	mov	local03, result1 wz
2020c     30 00 90 5D |  if_ne	jmp	#LR__3390
20210     01 1E 06 F1 | 	add	local01, #1
20214     0F 13 C2 FA | 	rdbyte	arg01, local01
20218     33 1E 06 F1 | 	add	local01, #51
2021c     0F 15 02 F6 | 	mov	arg02, local01
20220     10 17 02 F6 | 	mov	arg03, local02
20224     01 18 06 F6 | 	mov	arg04, #1
20228     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2022c     00 FA 0D F2 | 	cmp	result1, #0 wz
20230     01 20 66 56 |  if_ne	neg	local02, #1
20234     01 22 06 56 |  if_ne	mov	local03, #1
20238     04 1E 86 F1 | 	sub	local01, #4
2023c     0F 21 62 FC | 	wrlong	local02, local01
20240                 | LR__3390
20240                 | LR__3391
20240                 | ' 				sect = (LBA_t)0 - 1;
20240                 | ' 				res = FR_DISK_ERR;
20240                 | ' 			}
20240                 | ' 			fs->winsect = sect;
20240                 | ' 		}
20240                 | ' 	}
20240                 | ' 	return res;
20240     11 FB 01 F6 | 	mov	result1, local03
20244     A7 F0 03 F6 | 	mov	ptra, fp
20248     B2 00 A0 FD | 	call	#popregs_
2024c                 | _fatfs_cc_move_window_ret
2024c     2D 00 64 FD | 	ret
20250                 | 
20250                 | _fatfs_cc_sync_fs
20250     02 4A 05 F6 | 	mov	COUNT_, #2
20254     A8 00 A0 FD | 	call	#pushregs_
20258     09 1F 02 F6 | 	mov	local01, arg01
2025c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
20260     FD 20 0A F6 | 	mov	local02, result1 wz
20264     D8 00 90 5D |  if_ne	jmp	#LR__3401
20268     0F 19 C2 FA | 	rdbyte	arg04, local01
2026c     03 18 0E F2 | 	cmp	arg04, #3 wz
20270     04 1E 06 A1 |  if_e	add	local01, #4
20274     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
20278     04 1E 86 A1 |  if_e	sub	local01, #4
2027c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
20280     A0 00 90 5D |  if_ne	jmp	#LR__3400
20284     34 1E 06 F1 | 	add	local01, #52
20288     0F 13 02 F6 | 	mov	arg01, local01
2028c     00 14 06 F6 | 	mov	arg02, #0
20290     09 16 C6 F9 | 	decod	arg03, #9
20294     98 00 A0 FD | 	call	#\builtin_bytefill_
20298     0F 13 02 F6 | 	mov	arg01, local01
2029c     FE 13 06 F1 | 	add	arg01, #510
202a0     55 00 80 FF 
202a4     09 AB 58 FC | 	wrword	##43605, arg01
202a8     A9 B0 A0 FF 
202ac     0F A5 68 FC | 	wrlong	##1096897106, local01
202b0     0F 13 02 F6 | 	mov	arg01, local01
202b4     E4 13 06 F1 | 	add	arg01, #484
202b8     B9 A0 B0 FF 
202bc     09 E5 68 FC | 	wrlong	##1631679090, arg01
202c0     0F 13 02 F6 | 	mov	arg01, local01
202c4     E8 13 06 F1 | 	add	arg01, #488
202c8     20 1E 86 F1 | 	sub	local01, #32
202cc     0F 15 02 FB | 	rdlong	arg02, local01
202d0     09 15 62 FC | 	wrlong	arg02, arg01
202d4     20 1E 06 F1 | 	add	local01, #32
202d8     0F 13 02 F6 | 	mov	arg01, local01
202dc     EC 13 06 F1 | 	add	arg01, #492
202e0     24 1E 86 F1 | 	sub	local01, #36
202e4     0F 15 02 FB | 	rdlong	arg02, local01
202e8     09 15 62 FC | 	wrlong	arg02, arg01
202ec     10 1E 06 F1 | 	add	local01, #16
202f0     0F 17 02 FB | 	rdlong	arg03, local01
202f4     01 16 06 F1 | 	add	arg03, #1
202f8     10 1E 06 F1 | 	add	local01, #16
202fc     0F 17 62 FC | 	wrlong	arg03, local01
20300     2F 1E 86 F1 | 	sub	local01, #47
20304     0F 13 C2 FA | 	rdbyte	arg01, local01
20308     33 1E 06 F1 | 	add	local01, #51
2030c     0F 15 02 F6 | 	mov	arg02, local01
20310     01 18 06 F6 | 	mov	arg04, #1
20314     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
20318     30 1E 86 F1 | 	sub	local01, #48
2031c     0F 01 48 FC | 	wrbyte	#0, local01
20320     04 1E 86 F1 | 	sub	local01, #4
20324                 | LR__3400
20324     01 1E 06 F1 | 	add	local01, #1
20328     0F 13 C2 FA | 	rdbyte	arg01, local01
2032c     00 14 06 F6 | 	mov	arg02, #0
20330     00 16 06 F6 | 	mov	arg03, #0
20334     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
20338     00 FA 0D F2 | 	cmp	result1, #0 wz
2033c     01 20 06 56 |  if_ne	mov	local02, #1
20340                 | LR__3401
20340                 | ' 	}
20340                 | ' 
20340                 | ' 	return res;
20340     10 FB 01 F6 | 	mov	result1, local02
20344     A7 F0 03 F6 | 	mov	ptra, fp
20348     B2 00 A0 FD | 	call	#popregs_
2034c                 | _fatfs_cc_sync_fs_ret
2034c     2D 00 64 FD | 	ret
20350                 | 
20350                 | _fatfs_cc_clst2sect
20350     02 14 86 F1 | 	sub	arg02, #2
20354     18 12 06 F1 | 	add	arg01, #24
20358     09 01 02 FB | 	rdlong	_var01, arg01
2035c     18 12 86 F1 | 	sub	arg01, #24
20360     02 00 86 F1 | 	sub	_var01, #2
20364     00 15 12 F2 | 	cmp	arg02, _var01 wc
20368     00 FA 05 36 |  if_ae	mov	result1, #0
2036c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
20370     0A 12 06 F1 | 	add	arg01, #10
20374     09 01 E2 FA | 	rdword	_var01, arg01
20378     0A 01 02 FD | 	qmul	_var01, arg02
2037c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2037c     22 12 06 F1 | 	add	arg01, #34
20380     09 FB 01 FB | 	rdlong	result1, arg01
20384     18 00 62 FD | 	getqx	_var01
20388     00 FB 01 F1 | 	add	result1, _var01
2038c                 | _fatfs_cc_clst2sect_ret
2038c     2D 00 64 FD | 	ret
20390                 | 
20390                 | _fatfs_cc_get_fat
20390     07 4A 05 F6 | 	mov	COUNT_, #7
20394     A8 00 A0 FD | 	call	#pushregs_
20398     0A 1F 02 F6 | 	mov	local01, arg02
2039c     09 21 02 FB | 	rdlong	local02, arg01
203a0     02 1E 16 F2 | 	cmp	local01, #2 wc
203a4     14 00 90 CD |  if_b	jmp	#LR__3410
203a8     18 20 06 F1 | 	add	local02, #24
203ac     10 23 02 FB | 	rdlong	local03, local02
203b0     18 20 86 F1 | 	sub	local02, #24
203b4     11 1F 12 F2 | 	cmp	local01, local03 wc
203b8     08 00 90 CD |  if_b	jmp	#LR__3411
203bc                 | LR__3410
203bc     01 24 06 F6 | 	mov	local04, #1
203c0     60 01 90 FD | 	jmp	#LR__3418
203c4                 | LR__3411
203c4     01 24 66 F6 | 	neg	local04, #1
203c8                 | ' 		val = 0xFFFFFFFF;
203c8                 | ' 
203c8                 | ' 		switch (fs->fs_type) {
203c8     10 27 C2 FA | 	rdbyte	local05, local02
203cc     01 26 86 F1 | 	sub	local05, #1
203d0     03 26 26 F3 | 	fle	local05, #3
203d4     30 26 62 FD | 	jmprel	local05
203d8                 | LR__3412
203d8     0C 00 90 FD | 	jmp	#LR__3413
203dc     B8 00 90 FD | 	jmp	#LR__3414
203e0     F8 00 90 FD | 	jmp	#LR__3415
203e4     38 01 90 FD | 	jmp	#LR__3416
203e8                 | LR__3413
203e8     0F 27 02 F6 | 	mov	local05, local01
203ec     0F 13 02 F6 | 	mov	arg01, local01
203f0     01 12 46 F0 | 	shr	arg01, #1
203f4     09 27 02 F1 | 	add	local05, arg01
203f8     10 13 02 F6 | 	mov	arg01, local02
203fc     13 29 02 F6 | 	mov	local06, local05
20400     09 28 46 F0 | 	shr	local06, #9
20404     24 20 06 F1 | 	add	local02, #36
20408     10 15 02 FB | 	rdlong	arg02, local02
2040c     24 20 86 F1 | 	sub	local02, #36
20410     14 15 02 F1 | 	add	arg02, local06
20414     C0 FD BF FD | 	call	#_fatfs_cc_move_window
20418     00 FA 0D F2 | 	cmp	result1, #0 wz
2041c     04 01 90 5D |  if_ne	jmp	#LR__3417
20420     13 29 02 F6 | 	mov	local06, local05
20424     FF 29 06 F5 | 	and	local06, #511
20428     34 20 06 F1 | 	add	local02, #52
2042c     10 29 02 F1 | 	add	local06, local02
20430     14 2B C2 FA | 	rdbyte	local07, local06
20434     34 20 86 F1 | 	sub	local02, #52
20438     10 13 02 F6 | 	mov	arg01, local02
2043c     01 26 06 F1 | 	add	local05, #1
20440     13 29 02 F6 | 	mov	local06, local05
20444     09 28 46 F0 | 	shr	local06, #9
20448     24 20 06 F1 | 	add	local02, #36
2044c     10 15 02 FB | 	rdlong	arg02, local02
20450     24 20 86 F1 | 	sub	local02, #36
20454     14 15 02 F1 | 	add	arg02, local06
20458     7C FD BF FD | 	call	#_fatfs_cc_move_window
2045c     00 FA 0D F2 | 	cmp	result1, #0 wz
20460     C0 00 90 5D |  if_ne	jmp	#LR__3417
20464     FF 27 06 F5 | 	and	local05, #511
20468     34 20 06 F1 | 	add	local02, #52
2046c     10 27 02 F1 | 	add	local05, local02
20470     13 29 C2 FA | 	rdbyte	local06, local05
20474     08 28 66 F0 | 	shl	local06, #8
20478     14 2B 42 F5 | 	or	local07, local06
2047c     01 1E CE F7 | 	test	local01, #1 wz
20480     04 2A 46 50 |  if_ne	shr	local07, #4
20484     15 23 02 56 |  if_ne	mov	local03, local07
20488     0B 2A 46 A7 |  if_e	zerox	local07, #11
2048c     15 23 02 A6 |  if_e	mov	local03, local07
20490     11 25 02 F6 | 	mov	local04, local03
20494                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
20494                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
20494                 | ' 			break;
20494     8C 00 90 FD | 	jmp	#LR__3417
20498                 | LR__3414
20498     10 13 02 F6 | 	mov	arg01, local02
2049c     0F 29 02 F6 | 	mov	local06, local01
204a0     08 28 46 F0 | 	shr	local06, #8
204a4     24 20 06 F1 | 	add	local02, #36
204a8     10 15 02 FB | 	rdlong	arg02, local02
204ac     24 20 86 F1 | 	sub	local02, #36
204b0     14 15 02 F1 | 	add	arg02, local06
204b4     20 FD BF FD | 	call	#_fatfs_cc_move_window
204b8     00 FA 0D F2 | 	cmp	result1, #0 wz
204bc     64 00 90 5D |  if_ne	jmp	#LR__3417
204c0     34 20 06 F1 | 	add	local02, #52
204c4     01 1E 66 F0 | 	shl	local01, #1
204c8     FF 1F 06 F5 | 	and	local01, #511
204cc     0F 21 02 F1 | 	add	local02, local01
204d0                 | ' {
204d0                 | ' 
204d0                 | ' 	return *((WORD*)ptr);
204d0     10 FB E1 FA | 	rdword	result1, local02
204d4     FD 24 32 F9 | 	getword	local04, result1, #0
204d8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
204d8                 | ' 			break;
204d8     48 00 90 FD | 	jmp	#LR__3417
204dc                 | LR__3415
204dc     10 13 02 F6 | 	mov	arg01, local02
204e0     0F 29 02 F6 | 	mov	local06, local01
204e4     07 28 46 F0 | 	shr	local06, #7
204e8     24 20 06 F1 | 	add	local02, #36
204ec     10 15 02 FB | 	rdlong	arg02, local02
204f0     24 20 86 F1 | 	sub	local02, #36
204f4     14 15 02 F1 | 	add	arg02, local06
204f8     DC FC BF FD | 	call	#_fatfs_cc_move_window
204fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20500     20 00 90 5D |  if_ne	jmp	#LR__3417
20504     34 20 06 F1 | 	add	local02, #52
20508     02 1E 66 F0 | 	shl	local01, #2
2050c     FF 1F 06 F5 | 	and	local01, #511
20510     0F 21 02 F1 | 	add	local02, local01
20514                 | ' {
20514                 | ' 
20514                 | ' 	return *((DWORD*)ptr);
20514     10 25 02 FB | 	rdlong	local04, local02
20518     7C 24 06 F4 | 	bitl	local04, #124
2051c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2051c                 | ' 			break;
2051c     04 00 90 FD | 	jmp	#LR__3417
20520                 | LR__3416
20520     01 24 06 F6 | 	mov	local04, #1
20524                 | LR__3417
20524                 | LR__3418
20524                 | ' 			val = 1;
20524                 | ' 		}
20524                 | ' 	}
20524                 | ' 
20524                 | ' 	return val;
20524     12 FB 01 F6 | 	mov	result1, local04
20528     A7 F0 03 F6 | 	mov	ptra, fp
2052c     B2 00 A0 FD | 	call	#popregs_
20530                 | _fatfs_cc_get_fat_ret
20530     2D 00 64 FD | 	ret
20534                 | 
20534                 | _fatfs_cc_put_fat
20534     08 4A 05 F6 | 	mov	COUNT_, #8
20538     A8 00 A0 FD | 	call	#pushregs_
2053c     09 1F 02 F6 | 	mov	local01, arg01
20540     0A 21 02 F6 | 	mov	local02, arg02
20544     0B 23 02 F6 | 	mov	local03, arg03
20548     02 24 06 F6 | 	mov	local04, #2
2054c     02 20 16 F2 | 	cmp	local02, #2 wc
20550     E0 01 90 CD |  if_b	jmp	#LR__3427
20554     18 1E 06 F1 | 	add	local01, #24
20558     0F 27 02 FB | 	rdlong	local05, local01
2055c     18 1E 86 F1 | 	sub	local01, #24
20560     13 21 12 F2 | 	cmp	local02, local05 wc
20564     CC 01 90 3D |  if_ae	jmp	#LR__3427
20568                 | ' 		switch (fs->fs_type) {
20568     0F 29 C2 FA | 	rdbyte	local06, local01
2056c     01 28 86 F1 | 	sub	local06, #1
20570     03 28 26 F3 | 	fle	local06, #3
20574     30 28 62 FD | 	jmprel	local06
20578                 | LR__3420
20578     0C 00 90 FD | 	jmp	#LR__3421
2057c     F8 00 90 FD | 	jmp	#LR__3424
20580     40 01 90 FD | 	jmp	#LR__3425
20584     AC 01 90 FD | 	jmp	#LR__3426
20588                 | LR__3421
20588     10 2B 02 F6 | 	mov	local07, local02
2058c     10 27 02 F6 | 	mov	local05, local02
20590     01 26 46 F0 | 	shr	local05, #1
20594     13 2B 02 F1 | 	add	local07, local05
20598     0F 13 02 F6 | 	mov	arg01, local01
2059c     15 29 02 F6 | 	mov	local06, local07
205a0     09 28 46 F0 | 	shr	local06, #9
205a4     24 1E 06 F1 | 	add	local01, #36
205a8     0F 15 02 FB | 	rdlong	arg02, local01
205ac     24 1E 86 F1 | 	sub	local01, #36
205b0     14 15 02 F1 | 	add	arg02, local06
205b4     20 FC BF FD | 	call	#_fatfs_cc_move_window
205b8     FD 24 0A F6 | 	mov	local04, result1 wz
205bc     74 01 90 5D |  if_ne	jmp	#LR__3426
205c0     34 1E 06 F1 | 	add	local01, #52
205c4     0F 2D 02 F6 | 	mov	local08, local01
205c8     15 27 02 F6 | 	mov	local05, local07
205cc     FF 27 06 F5 | 	and	local05, #511
205d0     13 2D 02 F1 | 	add	local08, local05
205d4     01 20 CE F7 | 	test	local02, #1 wz
205d8     34 1E 86 F1 | 	sub	local01, #52
205dc     01 2A 06 F1 | 	add	local07, #1
205e0     18 00 90 AD |  if_e	jmp	#LR__3422
205e4     16 27 C2 FA | 	rdbyte	local05, local08
205e8     13 27 42 F8 | 	getnib	local05, local05, #0
205ec     11 29 E2 F8 | 	getbyte	local06, local03, #0
205f0     04 28 66 F0 | 	shl	local06, #4
205f4     14 27 42 F5 | 	or	local05, local06
205f8     04 00 90 FD | 	jmp	#LR__3423
205fc                 | LR__3422
205fc     11 27 02 F6 | 	mov	local05, local03
20600                 | LR__3423
20600     16 27 42 FC | 	wrbyte	local05, local08
20604     03 1E 06 F1 | 	add	local01, #3
20608     0F 03 48 FC | 	wrbyte	#1, local01
2060c     03 1E 86 F1 | 	sub	local01, #3
20610     0F 13 02 F6 | 	mov	arg01, local01
20614     15 2D 02 F6 | 	mov	local08, local07
20618     09 2C 46 F0 | 	shr	local08, #9
2061c     24 1E 06 F1 | 	add	local01, #36
20620     0F 15 02 FB | 	rdlong	arg02, local01
20624     24 1E 86 F1 | 	sub	local01, #36
20628     16 15 02 F1 | 	add	arg02, local08
2062c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20630     FD 24 0A F6 | 	mov	local04, result1 wz
20634     FC 00 90 5D |  if_ne	jmp	#LR__3426
20638     34 1E 06 F1 | 	add	local01, #52
2063c     0F 2D 02 F6 | 	mov	local08, local01
20640     FF 2B 06 F5 | 	and	local07, #511
20644     15 2D 02 F1 | 	add	local08, local07
20648     01 20 CE F7 | 	test	local02, #1 wz
2064c     04 22 46 50 |  if_ne	shr	local03, #4
20650     11 27 02 56 |  if_ne	mov	local05, local03
20654     16 27 C2 AA |  if_e	rdbyte	local05, local08
20658     F0 26 06 A5 |  if_e	and	local05, #240
2065c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20660     11 23 42 A8 |  if_e	getnib	local03, local03, #0
20664     11 27 42 A5 |  if_e	or	local05, local03
20668     16 27 42 FC | 	wrbyte	local05, local08
2066c     31 1E 86 F1 | 	sub	local01, #49
20670     0F 03 48 FC | 	wrbyte	#1, local01
20674                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
20674                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
20674                 | ' 			fs->wflag = 1;
20674                 | ' 			break;
20674     BC 00 90 FD | 	jmp	#LR__3426
20678                 | LR__3424
20678     0F 13 02 F6 | 	mov	arg01, local01
2067c     10 2D 02 F6 | 	mov	local08, local02
20680     08 2C 46 F0 | 	shr	local08, #8
20684     24 1E 06 F1 | 	add	local01, #36
20688     0F 15 02 FB | 	rdlong	arg02, local01
2068c     24 1E 86 F1 | 	sub	local01, #36
20690     16 15 02 F1 | 	add	arg02, local08
20694     40 FB BF FD | 	call	#_fatfs_cc_move_window
20698     FD 24 0A F6 | 	mov	local04, result1 wz
2069c     94 00 90 5D |  if_ne	jmp	#LR__3426
206a0     34 1E 06 F1 | 	add	local01, #52
206a4     0F 13 02 F6 | 	mov	arg01, local01
206a8     01 20 66 F0 | 	shl	local02, #1
206ac     FF 21 06 F5 | 	and	local02, #511
206b0     10 13 02 F1 | 	add	arg01, local02
206b4     09 23 52 FC | 	wrword	local03, arg01
206b8     31 1E 86 F1 | 	sub	local01, #49
206bc     0F 03 48 FC | 	wrbyte	#1, local01
206c0                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
206c0                 | ' 			fs->wflag = 1;
206c0                 | ' 			break;
206c0     70 00 90 FD | 	jmp	#LR__3426
206c4                 | LR__3425
206c4     0F 13 02 F6 | 	mov	arg01, local01
206c8     10 2D 02 F6 | 	mov	local08, local02
206cc     07 2C 46 F0 | 	shr	local08, #7
206d0     24 1E 06 F1 | 	add	local01, #36
206d4     0F 15 02 FB | 	rdlong	arg02, local01
206d8     24 1E 86 F1 | 	sub	local01, #36
206dc     16 15 02 F1 | 	add	arg02, local08
206e0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
206e4     FD 24 0A F6 | 	mov	local04, result1 wz
206e8     48 00 90 5D |  if_ne	jmp	#LR__3426
206ec     7C 22 06 F4 | 	bitl	local03, #124
206f0     34 1E 06 F1 | 	add	local01, #52
206f4     10 2D 02 F6 | 	mov	local08, local02
206f8     02 2C 66 F0 | 	shl	local08, #2
206fc     FF 2D 06 F5 | 	and	local08, #511
20700     0F 13 02 F6 | 	mov	arg01, local01
20704     16 13 02 F1 | 	add	arg01, local08
20708                 | ' {
20708                 | ' 
20708                 | ' 	return *((DWORD*)ptr);
20708     09 2D 02 FB | 	rdlong	local08, arg01
2070c     00 00 78 FF 
20710     00 2C 06 F5 | 	and	local08, ##-268435456
20714     16 23 42 F5 | 	or	local03, local08
20718     0F 13 02 F6 | 	mov	arg01, local01
2071c     02 20 66 F0 | 	shl	local02, #2
20720     FF 21 06 F5 | 	and	local02, #511
20724     10 13 02 F1 | 	add	arg01, local02
20728     09 23 62 FC | 	wrlong	local03, arg01
2072c     31 1E 86 F1 | 	sub	local01, #49
20730     0F 03 48 FC | 	wrbyte	#1, local01
20734                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
20734                 | ' 			}
20734                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
20734                 | ' 			fs->wflag = 1;
20734                 | ' 			break;
20734                 | LR__3426
20734                 | LR__3427
20734                 | ' 		}
20734                 | ' 	}
20734                 | ' 	return res;
20734     12 FB 01 F6 | 	mov	result1, local04
20738     A7 F0 03 F6 | 	mov	ptra, fp
2073c     B2 00 A0 FD | 	call	#popregs_
20740                 | _fatfs_cc_put_fat_ret
20740     2D 00 64 FD | 	ret
20744                 | 
20744                 | _fatfs_cc_remove_chain
20744     05 4A 05 F6 | 	mov	COUNT_, #5
20748     A8 00 A0 FD | 	call	#pushregs_
2074c     09 1F 02 F6 | 	mov	local01, arg01
20750     0A 21 02 F6 | 	mov	local02, arg02
20754     0B 23 02 F6 | 	mov	local03, arg03
20758     0F 25 02 FB | 	rdlong	local04, local01
2075c     02 20 16 F2 | 	cmp	local02, #2 wc
20760     14 00 90 CD |  if_b	jmp	#LR__3430
20764     18 24 06 F1 | 	add	local04, #24
20768     12 FB 01 FB | 	rdlong	result1, local04
2076c     18 24 86 F1 | 	sub	local04, #24
20770     FD 20 12 F2 | 	cmp	local02, result1 wc
20774     08 00 90 CD |  if_b	jmp	#LR__3431
20778                 | LR__3430
20778     02 FA 05 F6 | 	mov	result1, #2
2077c     CC 00 90 FD | 	jmp	#LR__3436
20780                 | LR__3431
20780     00 22 0E F2 | 	cmp	local03, #0 wz
20784     18 00 90 AD |  if_e	jmp	#LR__3432
20788     11 15 02 F6 | 	mov	arg02, local03
2078c     12 13 02 F6 | 	mov	arg01, local04
20790     01 16 66 F6 | 	neg	arg03, #1
20794     9C FD BF FD | 	call	#_fatfs_cc_put_fat
20798     00 FA 0D F2 | 	cmp	result1, #0 wz
2079c     AC 00 90 5D |  if_ne	jmp	#LR__3436
207a0                 | LR__3432
207a0                 | ' 	}
207a0                 | ' 
207a0                 | ' 
207a0                 | ' 	do {
207a0                 | LR__3433
207a0     10 15 02 F6 | 	mov	arg02, local02
207a4     0F 13 02 F6 | 	mov	arg01, local01
207a8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
207ac     FD 26 0A F6 | 	mov	local05, result1 wz
207b0     94 00 90 AD |  if_e	jmp	#LR__3435
207b4     01 26 0E F2 | 	cmp	local05, #1 wz
207b8     02 FA 05 A6 |  if_e	mov	result1, #2
207bc     8C 00 90 AD |  if_e	jmp	#LR__3436
207c0     FF FF 7F FF 
207c4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
207c8     01 FA 05 A6 |  if_e	mov	result1, #1
207cc     7C 00 90 AD |  if_e	jmp	#LR__3436
207d0     10 15 02 F6 | 	mov	arg02, local02
207d4     12 13 02 F6 | 	mov	arg01, local04
207d8     00 16 06 F6 | 	mov	arg03, #0
207dc     54 FD BF FD | 	call	#_fatfs_cc_put_fat
207e0     FD 22 0A F6 | 	mov	local03, result1 wz
207e4     11 FB 01 56 |  if_ne	mov	result1, local03
207e8     60 00 90 5D |  if_ne	jmp	#LR__3436
207ec     18 24 06 F1 | 	add	local04, #24
207f0     12 23 02 FB | 	rdlong	local03, local04
207f4     02 22 86 F1 | 	sub	local03, #2
207f8     04 24 86 F1 | 	sub	local04, #4
207fc     12 21 02 FB | 	rdlong	local02, local04
20800     14 24 86 F1 | 	sub	local04, #20
20804     11 21 12 F2 | 	cmp	local02, local03 wc
20808     24 00 90 3D |  if_ae	jmp	#LR__3434
2080c     14 24 06 F1 | 	add	local04, #20
20810     12 23 02 FB | 	rdlong	local03, local04
20814     01 22 06 F1 | 	add	local03, #1
20818     12 23 62 FC | 	wrlong	local03, local04
2081c     10 24 86 F1 | 	sub	local04, #16
20820     12 23 C2 FA | 	rdbyte	local03, local04
20824     01 22 46 F5 | 	or	local03, #1
20828     12 23 42 FC | 	wrbyte	local03, local04
2082c     04 24 86 F1 | 	sub	local04, #4
20830                 | LR__3434
20830     13 21 02 F6 | 	mov	local02, local05
20834     18 24 06 F1 | 	add	local04, #24
20838     12 27 02 FB | 	rdlong	local05, local04
2083c     18 24 86 F1 | 	sub	local04, #24
20840     13 21 12 F2 | 	cmp	local02, local05 wc
20844     58 FF 9F CD |  if_b	jmp	#LR__3433
20848                 | LR__3435
20848                 | ' #line 1500 "ff.c"
20848                 | ' 	return FR_OK;
20848     00 FA 05 F6 | 	mov	result1, #0
2084c                 | LR__3436
2084c     A7 F0 03 F6 | 	mov	ptra, fp
20850     B2 00 A0 FD | 	call	#popregs_
20854                 | _fatfs_cc_remove_chain_ret
20854     2D 00 64 FD | 	ret
20858                 | 
20858                 | _fatfs_cc_create_chain
20858     09 4A 05 F6 | 	mov	COUNT_, #9
2085c     A8 00 A0 FD | 	call	#pushregs_
20860     09 1F 02 F6 | 	mov	local01, arg01
20864     0A 21 0A F6 | 	mov	local02, arg02 wz
20868     0F 23 02 FB | 	rdlong	local03, local01
2086c     28 00 90 5D |  if_ne	jmp	#LR__3440
20870     10 22 06 F1 | 	add	local03, #16
20874     11 25 0A FB | 	rdlong	local04, local03 wz
20878     10 22 86 F1 | 	sub	local03, #16
2087c     18 22 06 51 |  if_ne	add	local03, #24
20880     11 27 02 5B |  if_ne	rdlong	local05, local03
20884     18 22 86 51 |  if_ne	sub	local03, #24
20888     13 25 12 52 |  if_ne	cmp	local04, local05 wc
2088c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3441
20890     01 24 06 F6 | 	mov	local04, #1
20894     48 00 90 FD | 	jmp	#LR__3441
20898                 | LR__3440
20898     10 15 02 F6 | 	mov	arg02, local02
2089c     0F 13 02 F6 | 	mov	arg01, local01
208a0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
208a4     FD 24 02 F6 | 	mov	local04, result1
208a8     02 24 16 F2 | 	cmp	local04, #2 wc
208ac     01 FA 05 C6 |  if_b	mov	result1, #1
208b0     BC 01 90 CD |  if_b	jmp	#LR__3451
208b4     FF FF 7F FF 
208b8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
208bc     12 FB 01 A6 |  if_e	mov	result1, local04
208c0     AC 01 90 AD |  if_e	jmp	#LR__3451
208c4     18 22 06 F1 | 	add	local03, #24
208c8     11 27 02 FB | 	rdlong	local05, local03
208cc     18 22 86 F1 | 	sub	local03, #24
208d0     13 25 12 F2 | 	cmp	local04, local05 wc
208d4     12 FB 01 C6 |  if_b	mov	result1, local04
208d8     94 01 90 CD |  if_b	jmp	#LR__3451
208dc     10 25 02 F6 | 	mov	local04, local02
208e0                 | LR__3441
208e0     14 22 06 F1 | 	add	local03, #20
208e4     11 27 0A FB | 	rdlong	local05, local03 wz
208e8     14 22 86 F1 | 	sub	local03, #20
208ec     00 FA 05 A6 |  if_e	mov	result1, #0
208f0     7C 01 90 AD |  if_e	jmp	#LR__3451
208f4     00 28 06 F6 | 	mov	local06, #0
208f8     10 25 0A F2 | 	cmp	local04, local02 wz
208fc     74 00 90 5D |  if_ne	jmp	#LR__3444
20900     12 29 02 F6 | 	mov	local06, local04
20904     01 28 06 F1 | 	add	local06, #1
20908     18 22 06 F1 | 	add	local03, #24
2090c     11 27 02 FB | 	rdlong	local05, local03
20910     18 22 86 F1 | 	sub	local03, #24
20914     13 29 12 F2 | 	cmp	local06, local05 wc
20918     02 28 06 36 |  if_ae	mov	local06, #2
2091c     14 15 02 F6 | 	mov	arg02, local06
20920     0F 13 02 F6 | 	mov	arg01, local01
20924     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20928     FD 26 02 F6 | 	mov	local05, result1
2092c     01 26 0E F2 | 	cmp	local05, #1 wz
20930     FF FF 7F 5F 
20934     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20938     13 FB 01 A6 |  if_e	mov	result1, local05
2093c     30 01 90 AD |  if_e	jmp	#LR__3451
20940     00 26 0E F2 | 	cmp	local05, #0 wz
20944     2C 00 90 AD |  if_e	jmp	#LR__3443
20948     10 22 06 F1 | 	add	local03, #16
2094c     11 2B 02 FB | 	rdlong	local07, local03
20950     10 22 86 F1 | 	sub	local03, #16
20954     02 2A 16 F2 | 	cmp	local07, #2 wc
20958     14 00 90 CD |  if_b	jmp	#LR__3442
2095c     18 22 06 F1 | 	add	local03, #24
20960     11 27 02 FB | 	rdlong	local05, local03
20964     18 22 86 F1 | 	sub	local03, #24
20968     13 2B 12 F2 | 	cmp	local07, local05 wc
2096c     15 25 02 C6 |  if_b	mov	local04, local07
20970                 | LR__3442
20970     00 28 06 F6 | 	mov	local06, #0
20974                 | LR__3443
20974                 | LR__3444
20974     00 28 0E F2 | 	cmp	local06, #0 wz
20978     60 00 90 5D |  if_ne	jmp	#LR__3447
2097c     12 29 02 F6 | 	mov	local06, local04
20980                 | ' 			ncl = scl;
20980                 | ' 			for (;;) {
20980                 | LR__3445
20980     01 28 06 F1 | 	add	local06, #1
20984     18 22 06 F1 | 	add	local03, #24
20988     11 27 02 FB | 	rdlong	local05, local03
2098c     18 22 86 F1 | 	sub	local03, #24
20990     13 29 12 F2 | 	cmp	local06, local05 wc
20994     02 28 06 36 |  if_ae	mov	local06, #2
20998     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
2099c     00 FA 05 16 |  if_a	mov	result1, #0
209a0     CC 00 90 1D |  if_a	jmp	#LR__3451
209a4     14 15 02 F6 | 	mov	arg02, local06
209a8     0F 13 02 F6 | 	mov	arg01, local01
209ac     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
209b0     FD 2A 0A F6 | 	mov	local07, result1 wz
209b4     24 00 90 AD |  if_e	jmp	#LR__3446
209b8     01 2A 0E F2 | 	cmp	local07, #1 wz
209bc     FF FF 7F 5F 
209c0     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
209c4     15 FB 01 A6 |  if_e	mov	result1, local07
209c8     A4 00 90 AD |  if_e	jmp	#LR__3451
209cc     12 29 0A F2 | 	cmp	local06, local04 wz
209d0     00 FA 05 A6 |  if_e	mov	result1, #0
209d4     98 00 90 AD |  if_e	jmp	#LR__3451
209d8     A4 FF 9F FD | 	jmp	#LR__3445
209dc                 | LR__3446
209dc                 | LR__3447
209dc     11 13 02 F6 | 	mov	arg01, local03
209e0     14 15 02 F6 | 	mov	arg02, local06
209e4     01 16 66 F6 | 	neg	arg03, #1
209e8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
209ec     FD 2C 0A F6 | 	mov	local08, result1 wz
209f0     1C 00 90 5D |  if_ne	jmp	#LR__3448
209f4     00 20 0E F2 | 	cmp	local02, #0 wz
209f8     14 00 90 AD |  if_e	jmp	#LR__3448
209fc     11 13 02 F6 | 	mov	arg01, local03
20a00     10 15 02 F6 | 	mov	arg02, local02
20a04     14 17 02 F6 | 	mov	arg03, local06
20a08     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20a0c     FD 2C 02 F6 | 	mov	local08, result1
20a10                 | LR__3448
20a10     00 2C 0E F2 | 	cmp	local08, #0 wz
20a14     4C 00 90 5D |  if_ne	jmp	#LR__3449
20a18     10 22 06 F1 | 	add	local03, #16
20a1c     11 29 62 FC | 	wrlong	local06, local03
20a20     08 22 06 F1 | 	add	local03, #8
20a24     11 27 02 FB | 	rdlong	local05, local03
20a28     02 26 86 F1 | 	sub	local05, #2
20a2c     04 22 86 F1 | 	sub	local03, #4
20a30     11 2F 02 FB | 	rdlong	local09, local03
20a34     14 22 86 F1 | 	sub	local03, #20
20a38     13 2F 1A F2 | 	cmp	local09, local05 wcz
20a3c     14 22 06 E1 |  if_be	add	local03, #20
20a40     11 2F 02 EB |  if_be	rdlong	local09, local03
20a44     01 2E 86 E1 |  if_be	sub	local09, #1
20a48     11 2F 62 EC |  if_be	wrlong	local09, local03
20a4c     14 22 86 E1 |  if_be	sub	local03, #20
20a50     04 22 06 F1 | 	add	local03, #4
20a54     11 27 C2 FA | 	rdbyte	local05, local03
20a58     01 26 46 F5 | 	or	local05, #1
20a5c     11 27 42 FC | 	wrbyte	local05, local03
20a60     08 00 90 FD | 	jmp	#LR__3450
20a64                 | LR__3449
20a64     01 2C 0E F2 | 	cmp	local08, #1 wz
20a68     01 28 C6 F6 | 	negz	local06, #1
20a6c                 | LR__3450
20a6c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20a6c                 | ' 	}
20a6c                 | ' 
20a6c                 | ' 	return ncl;
20a6c     14 FB 01 F6 | 	mov	result1, local06
20a70                 | LR__3451
20a70     A7 F0 03 F6 | 	mov	ptra, fp
20a74     B2 00 A0 FD | 	call	#popregs_
20a78                 | _fatfs_cc_create_chain_ret
20a78     2D 00 64 FD | 	ret
20a7c                 | 
20a7c                 | _fatfs_cc_dir_clear
20a7c     06 4A 05 F6 | 	mov	COUNT_, #6
20a80     A8 00 A0 FD | 	call	#pushregs_
20a84     09 1F 02 F6 | 	mov	local01, arg01
20a88     0A 21 02 F6 | 	mov	local02, arg02
20a8c     0F 13 02 F6 | 	mov	arg01, local01
20a90     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
20a94     00 FA 0D F2 | 	cmp	result1, #0 wz
20a98     01 FA 05 56 |  if_ne	mov	result1, #1
20a9c     90 00 90 5D |  if_ne	jmp	#LR__3462
20aa0     0F 13 02 F6 | 	mov	arg01, local01
20aa4     10 15 02 F6 | 	mov	arg02, local02
20aa8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
20aac     FD 22 02 F6 | 	mov	local03, result1
20ab0     30 1E 06 F1 | 	add	local01, #48
20ab4     0F 23 62 FC | 	wrlong	local03, local01
20ab8     04 1E 06 F1 | 	add	local01, #4
20abc     0F 13 02 F6 | 	mov	arg01, local01
20ac0     00 14 06 F6 | 	mov	arg02, #0
20ac4     09 16 C6 F9 | 	decod	arg03, #9
20ac8     98 00 A0 FD | 	call	#\builtin_bytefill_
20acc     0F 25 02 F6 | 	mov	local04, local01
20ad0                 | ' #line 1667 "ff.c"
20ad0                 | ' 	{
20ad0                 | ' 		ibuf = fs->win; szb = 1;
20ad0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
20ad0     00 26 06 F6 | 	mov	local05, #0
20ad4     34 1E 86 F1 | 	sub	local01, #52
20ad8                 | LR__3460
20ad8     0A 1E 06 F1 | 	add	local01, #10
20adc     0F 29 E2 FA | 	rdword	local06, local01
20ae0     0A 1E 86 F1 | 	sub	local01, #10
20ae4     14 27 12 F2 | 	cmp	local05, local06 wc
20ae8     2C 00 90 3D |  if_ae	jmp	#LR__3461
20aec     01 1E 06 F1 | 	add	local01, #1
20af0     0F 13 C2 FA | 	rdbyte	arg01, local01
20af4     01 1E 86 F1 | 	sub	local01, #1
20af8     12 15 02 F6 | 	mov	arg02, local04
20afc     11 17 02 F6 | 	mov	arg03, local03
20b00     13 17 02 F1 | 	add	arg03, local05
20b04     01 18 06 F6 | 	mov	arg04, #1
20b08     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
20b10     01 26 06 A1 |  if_e	add	local05, #1
20b14     C0 FF 9F AD |  if_e	jmp	#LR__3460
20b18                 | LR__3461
20b18                 | ' 	}
20b18                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20b18     0A 1E 06 F1 | 	add	local01, #10
20b1c     0F 25 E2 FA | 	rdword	local04, local01
20b20     12 27 0A F2 | 	cmp	local05, local04 wz
20b24     00 28 06 A6 |  if_e	mov	local06, #0
20b28     01 28 06 56 |  if_ne	mov	local06, #1
20b2c     14 FB 01 F6 | 	mov	result1, local06
20b30                 | LR__3462
20b30     A7 F0 03 F6 | 	mov	ptra, fp
20b34     B2 00 A0 FD | 	call	#popregs_
20b38                 | _fatfs_cc_dir_clear_ret
20b38     2D 00 64 FD | 	ret
20b3c                 | 
20b3c                 | _fatfs_cc_dir_sdi
20b3c     06 4A 05 F6 | 	mov	COUNT_, #6
20b40     A8 00 A0 FD | 	call	#pushregs_
20b44     09 1F 02 F6 | 	mov	local01, arg01
20b48     0A 21 02 F6 | 	mov	local02, arg02
20b4c     0F 23 02 FB | 	rdlong	local03, local01
20b50     00 10 00 FF 
20b54     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20b58     1F 20 CE C7 |  if_b	test	local02, #31 wz
20b5c                 | ' 		return FR_INT_ERR;
20b5c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20b60     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3476
20b64     10 1E 06 F1 | 	add	local01, #16
20b68     0F 21 62 FC | 	wrlong	local02, local01
20b6c     08 1E 86 F1 | 	sub	local01, #8
20b70     0F 25 0A FB | 	rdlong	local04, local01 wz
20b74     08 1E 86 F1 | 	sub	local01, #8
20b78     11 27 C2 AA |  if_e	rdbyte	local05, local03
20b7c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20b80     28 22 06 21 |  if_nc_and_z	add	local03, #40
20b84     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20b88     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20b8c     00 24 0E F2 | 	cmp	local04, #0 wz
20b90     3C 00 90 5D |  if_ne	jmp	#LR__3470
20b94     10 27 02 F6 | 	mov	local05, local02
20b98     05 26 46 F0 | 	shr	local05, #5
20b9c     08 22 06 F1 | 	add	local03, #8
20ba0     11 15 E2 FA | 	rdword	arg02, local03
20ba4     08 22 86 F1 | 	sub	local03, #8
20ba8     0A 27 12 F2 | 	cmp	local05, arg02 wc
20bac     02 FA 05 36 |  if_ae	mov	result1, #2
20bb0     E4 00 90 3D |  if_ae	jmp	#LR__3476
20bb4     28 22 06 F1 | 	add	local03, #40
20bb8     11 27 02 FB | 	rdlong	local05, local03
20bbc     28 22 86 F1 | 	sub	local03, #40
20bc0     18 1E 06 F1 | 	add	local01, #24
20bc4     0F 27 62 FC | 	wrlong	local05, local01
20bc8     18 1E 86 F1 | 	sub	local01, #24
20bcc     7C 00 90 FD | 	jmp	#LR__3475
20bd0                 | LR__3470
20bd0     0A 22 06 F1 | 	add	local03, #10
20bd4     11 29 E2 FA | 	rdword	local06, local03
20bd8     0A 22 86 F1 | 	sub	local03, #10
20bdc     09 28 66 F0 | 	shl	local06, #9
20be0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
20be0                 | ' 		while (ofs >= csz) {
20be0                 | LR__3471
20be0     14 21 12 F2 | 	cmp	local02, local06 wc
20be4     4C 00 90 CD |  if_b	jmp	#LR__3474
20be8     0F 13 02 F6 | 	mov	arg01, local01
20bec     12 15 02 F6 | 	mov	arg02, local04
20bf0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
20bf4     FD 24 02 F6 | 	mov	local04, result1
20bf8     FF FF 7F FF 
20bfc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20c00     01 FA 05 A6 |  if_e	mov	result1, #1
20c04     90 00 90 AD |  if_e	jmp	#LR__3476
20c08     02 24 16 F2 | 	cmp	local04, #2 wc
20c0c     14 00 90 CD |  if_b	jmp	#LR__3472
20c10     18 22 06 F1 | 	add	local03, #24
20c14     11 27 02 FB | 	rdlong	local05, local03
20c18     18 22 86 F1 | 	sub	local03, #24
20c1c     13 25 12 F2 | 	cmp	local04, local05 wc
20c20     08 00 90 CD |  if_b	jmp	#LR__3473
20c24                 | LR__3472
20c24     02 FA 05 F6 | 	mov	result1, #2
20c28     6C 00 90 FD | 	jmp	#LR__3476
20c2c                 | LR__3473
20c2c     14 21 82 F1 | 	sub	local02, local06
20c30     AC FF 9F FD | 	jmp	#LR__3471
20c34                 | LR__3474
20c34     11 13 02 F6 | 	mov	arg01, local03
20c38     12 15 02 F6 | 	mov	arg02, local04
20c3c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20c40     18 1E 06 F1 | 	add	local01, #24
20c44     0F FB 61 FC | 	wrlong	result1, local01
20c48     18 1E 86 F1 | 	sub	local01, #24
20c4c                 | LR__3475
20c4c     14 1E 06 F1 | 	add	local01, #20
20c50     0F 25 62 FC | 	wrlong	local04, local01
20c54     04 1E 06 F1 | 	add	local01, #4
20c58     0F 27 0A FB | 	rdlong	local05, local01 wz
20c5c     18 1E 86 F1 | 	sub	local01, #24
20c60     02 FA 05 A6 |  if_e	mov	result1, #2
20c64     30 00 90 AD |  if_e	jmp	#LR__3476
20c68     10 29 02 F6 | 	mov	local06, local02
20c6c     09 28 46 F0 | 	shr	local06, #9
20c70     18 1E 06 F1 | 	add	local01, #24
20c74     0F 27 02 FB | 	rdlong	local05, local01
20c78     14 27 02 F1 | 	add	local05, local06
20c7c     0F 27 62 FC | 	wrlong	local05, local01
20c80     34 22 06 F1 | 	add	local03, #52
20c84     FF 21 06 F5 | 	and	local02, #511
20c88     10 23 02 F1 | 	add	local03, local02
20c8c     04 1E 06 F1 | 	add	local01, #4
20c90     0F 23 62 FC | 	wrlong	local03, local01
20c94                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
20c94                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
20c94                 | ' 
20c94                 | ' 	return FR_OK;
20c94     00 FA 05 F6 | 	mov	result1, #0
20c98                 | LR__3476
20c98     A7 F0 03 F6 | 	mov	ptra, fp
20c9c     B2 00 A0 FD | 	call	#popregs_
20ca0                 | _fatfs_cc_dir_sdi_ret
20ca0     2D 00 64 FD | 	ret
20ca4                 | 
20ca4                 | _fatfs_cc_dir_next
20ca4     05 4A 05 F6 | 	mov	COUNT_, #5
20ca8     A8 00 A0 FD | 	call	#pushregs_
20cac     09 1F 02 F6 | 	mov	local01, arg01
20cb0     0A 21 02 F6 | 	mov	local02, arg02
20cb4     0F 23 02 FB | 	rdlong	local03, local01
20cb8     10 1E 06 F1 | 	add	local01, #16
20cbc     0F 25 02 FB | 	rdlong	local04, local01
20cc0     10 1E 86 F1 | 	sub	local01, #16
20cc4     20 24 06 F1 | 	add	local04, #32
20cc8     00 10 00 FF 
20ccc     00 24 16 F2 | 	cmp	local04, ##2097152 wc
20cd0     18 1E 06 31 |  if_ae	add	local01, #24
20cd4     0F 01 68 3C |  if_ae	wrlong	#0, local01
20cd8     18 1E 86 31 |  if_ae	sub	local01, #24
20cdc     18 1E 06 F1 | 	add	local01, #24
20ce0     0F 15 0A FB | 	rdlong	arg02, local01 wz
20ce4     18 1E 86 F1 | 	sub	local01, #24
20ce8     04 FA 05 A6 |  if_e	mov	result1, #4
20cec     64 01 90 AD |  if_e	jmp	#LR__3485
20cf0     FF 25 CE F7 | 	test	local04, #511 wz
20cf4     3C 01 90 5D |  if_ne	jmp	#LR__3484
20cf8     18 1E 06 F1 | 	add	local01, #24
20cfc     0F 15 02 FB | 	rdlong	arg02, local01
20d00     01 14 06 F1 | 	add	arg02, #1
20d04     0F 15 62 FC | 	wrlong	arg02, local01
20d08     04 1E 86 F1 | 	sub	local01, #4
20d0c     0F 15 0A FB | 	rdlong	arg02, local01 wz
20d10     14 1E 86 F1 | 	sub	local01, #20
20d14     2C 00 90 5D |  if_ne	jmp	#LR__3480
20d18     12 15 02 F6 | 	mov	arg02, local04
20d1c     05 14 46 F0 | 	shr	arg02, #5
20d20     08 22 06 F1 | 	add	local03, #8
20d24     11 21 E2 FA | 	rdword	local02, local03
20d28     08 22 86 F1 | 	sub	local03, #8
20d2c     10 15 12 F2 | 	cmp	arg02, local02 wc
20d30     18 1E 06 31 |  if_ae	add	local01, #24
20d34     0F 01 68 3C |  if_ae	wrlong	#0, local01
20d38                 | ' 				dp->sect = 0; return FR_NO_FILE;
20d38     04 FA 05 36 |  if_ae	mov	result1, #4
20d3c     14 01 90 3D |  if_ae	jmp	#LR__3485
20d40     F0 00 90 FD | 	jmp	#LR__3483
20d44                 | LR__3480
20d44     12 13 02 F6 | 	mov	arg01, local04
20d48     09 12 46 F0 | 	shr	arg01, #9
20d4c     0A 22 06 F1 | 	add	local03, #10
20d50     11 15 E2 FA | 	rdword	arg02, local03
20d54     0A 22 86 F1 | 	sub	local03, #10
20d58     01 14 86 F1 | 	sub	arg02, #1
20d5c     0A 13 CA F7 | 	test	arg01, arg02 wz
20d60     D0 00 90 5D |  if_ne	jmp	#LR__3482
20d64     0F 13 02 F6 | 	mov	arg01, local01
20d68     14 1E 06 F1 | 	add	local01, #20
20d6c     0F 15 02 FB | 	rdlong	arg02, local01
20d70     14 1E 86 F1 | 	sub	local01, #20
20d74     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20d78     FD 26 02 F6 | 	mov	local05, result1
20d7c     02 26 16 F2 | 	cmp	local05, #2 wc
20d80     02 FA 05 C6 |  if_b	mov	result1, #2
20d84     CC 00 90 CD |  if_b	jmp	#LR__3485
20d88     FF FF 7F FF 
20d8c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20d90     01 FA 05 A6 |  if_e	mov	result1, #1
20d94     BC 00 90 AD |  if_e	jmp	#LR__3485
20d98     18 22 06 F1 | 	add	local03, #24
20d9c     11 15 02 FB | 	rdlong	arg02, local03
20da0     18 22 86 F1 | 	sub	local03, #24
20da4     0A 27 12 F2 | 	cmp	local05, arg02 wc
20da8     68 00 90 CD |  if_b	jmp	#LR__3481
20dac     00 20 0E F2 | 	cmp	local02, #0 wz
20db0     18 1E 06 A1 |  if_e	add	local01, #24
20db4     0F 01 68 AC |  if_e	wrlong	#0, local01
20db8                 | ' 						dp->sect = 0; return FR_NO_FILE;
20db8     04 FA 05 A6 |  if_e	mov	result1, #4
20dbc     94 00 90 AD |  if_e	jmp	#LR__3485
20dc0     0F 13 02 F6 | 	mov	arg01, local01
20dc4     14 1E 06 F1 | 	add	local01, #20
20dc8     0F 15 02 FB | 	rdlong	arg02, local01
20dcc     14 1E 86 F1 | 	sub	local01, #20
20dd0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
20dd4     FD 26 0A F6 | 	mov	local05, result1 wz
20dd8     07 FA 05 A6 |  if_e	mov	result1, #7
20ddc     74 00 90 AD |  if_e	jmp	#LR__3485
20de0     01 26 0E F2 | 	cmp	local05, #1 wz
20de4     02 FA 05 A6 |  if_e	mov	result1, #2
20de8     68 00 90 AD |  if_e	jmp	#LR__3485
20dec     FF FF 7F FF 
20df0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20df4     01 FA 05 A6 |  if_e	mov	result1, #1
20df8     58 00 90 AD |  if_e	jmp	#LR__3485
20dfc     13 15 02 F6 | 	mov	arg02, local05
20e00     11 13 02 F6 | 	mov	arg01, local03
20e04     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
20e08     00 FA 0D F2 | 	cmp	result1, #0 wz
20e0c     01 FA 05 56 |  if_ne	mov	result1, #1
20e10     40 00 90 5D |  if_ne	jmp	#LR__3485
20e14                 | LR__3481
20e14     14 1E 06 F1 | 	add	local01, #20
20e18     0F 27 62 FC | 	wrlong	local05, local01
20e1c     11 13 02 F6 | 	mov	arg01, local03
20e20     13 15 02 F6 | 	mov	arg02, local05
20e24     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
20e28     04 1E 06 F1 | 	add	local01, #4
20e2c     0F FB 61 FC | 	wrlong	result1, local01
20e30     18 1E 86 F1 | 	sub	local01, #24
20e34                 | LR__3482
20e34                 | LR__3483
20e34                 | LR__3484
20e34     10 1E 06 F1 | 	add	local01, #16
20e38     0F 25 62 FC | 	wrlong	local04, local01
20e3c     34 22 06 F1 | 	add	local03, #52
20e40     FF 25 06 F5 | 	and	local04, #511
20e44     12 23 02 F1 | 	add	local03, local04
20e48     0C 1E 06 F1 | 	add	local01, #12
20e4c     0F 23 62 FC | 	wrlong	local03, local01
20e50                 | ' #line 1771 "ff.c"
20e50                 | ' 				}
20e50                 | ' 				dp->clust = clst;
20e50                 | ' 				dp->sect = clst2sect(fs, clst);
20e50                 | ' 			}
20e50                 | ' 		}
20e50                 | ' 	}
20e50                 | ' 	dp->dptr = ofs;
20e50                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
20e50                 | ' 
20e50                 | ' 	return FR_OK;
20e50     00 FA 05 F6 | 	mov	result1, #0
20e54                 | LR__3485
20e54     A7 F0 03 F6 | 	mov	ptra, fp
20e58     B2 00 A0 FD | 	call	#popregs_
20e5c                 | _fatfs_cc_dir_next_ret
20e5c     2D 00 64 FD | 	ret
20e60                 | 
20e60                 | _fatfs_cc_dir_alloc
20e60     08 4A 05 F6 | 	mov	COUNT_, #8
20e64     A8 00 A0 FD | 	call	#pushregs_
20e68     09 1F 02 F6 | 	mov	local01, arg01
20e6c     0A 21 02 F6 | 	mov	local02, arg02
20e70     0F 23 02 FB | 	rdlong	local03, local01
20e74     0F 13 02 F6 | 	mov	arg01, local01
20e78     00 14 06 F6 | 	mov	arg02, #0
20e7c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
20e80     FD 24 0A F6 | 	mov	local04, result1 wz
20e84     70 00 90 5D |  if_ne	jmp	#LR__3494
20e88     00 26 06 F6 | 	mov	local05, #0
20e8c                 | ' 		n = 0;
20e8c                 | ' 		do {
20e8c                 | LR__3490
20e8c     18 1E 06 F1 | 	add	local01, #24
20e90     0F 15 02 FB | 	rdlong	arg02, local01
20e94     18 1E 86 F1 | 	sub	local01, #24
20e98     11 13 02 F6 | 	mov	arg01, local03
20e9c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
20ea0     FD 24 0A F6 | 	mov	local04, result1 wz
20ea4     50 00 90 5D |  if_ne	jmp	#LR__3493
20ea8     1C 1E 06 F1 | 	add	local01, #28
20eac     0F 29 02 FB | 	rdlong	local06, local01
20eb0     1C 1E 86 F1 | 	sub	local01, #28
20eb4     14 29 C2 FA | 	rdbyte	local06, local06
20eb8     E5 28 0E F2 | 	cmp	local06, #229 wz
20ebc     1C 1E 06 51 |  if_ne	add	local01, #28
20ec0     0F 2B 02 5B |  if_ne	rdlong	local07, local01
20ec4     1C 1E 86 51 |  if_ne	sub	local01, #28
20ec8     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
20ecc     10 00 90 5D |  if_ne	jmp	#LR__3491
20ed0     01 26 06 F1 | 	add	local05, #1
20ed4     10 27 0A F2 | 	cmp	local05, local02 wz
20ed8     1C 00 90 AD |  if_e	jmp	#LR__3493
20edc     04 00 90 FD | 	jmp	#LR__3492
20ee0                 | LR__3491
20ee0     00 26 06 F6 | 	mov	local05, #0
20ee4                 | LR__3492
20ee4     0F 13 02 F6 | 	mov	arg01, local01
20ee8     01 14 06 F6 | 	mov	arg02, #1
20eec     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
20ef0     FD 24 0A F6 | 	mov	local04, result1 wz
20ef4     94 FF 9F AD |  if_e	jmp	#LR__3490
20ef8                 | LR__3493
20ef8                 | LR__3494
20ef8     04 24 0E F2 | 	cmp	local04, #4 wz
20efc     07 24 06 A6 |  if_e	mov	local04, #7
20f00                 | ' 	return res;
20f00     12 FB 01 F6 | 	mov	result1, local04
20f04     A7 F0 03 F6 | 	mov	ptra, fp
20f08     B2 00 A0 FD | 	call	#popregs_
20f0c                 | _fatfs_cc_dir_alloc_ret
20f0c     2D 00 64 FD | 	ret
20f10                 | 
20f10                 | _fatfs_cc_ld_clust
20f10     09 01 02 F6 | 	mov	_var01, arg01
20f14     0A 13 02 F6 | 	mov	arg01, arg02
20f18     1A 12 06 F1 | 	add	arg01, #26
20f1c                 | ' {
20f1c                 | ' 
20f1c                 | ' 	return *((WORD*)ptr);
20f1c     09 FB E1 FA | 	rdword	result1, arg01
20f20     FD 12 32 F9 | 	getword	arg01, result1, #0
20f24     00 01 C2 FA | 	rdbyte	_var01, _var01
20f28     03 00 0E F2 | 	cmp	_var01, #3 wz
20f2c     14 14 06 A1 |  if_e	add	arg02, #20
20f30                 | ' {
20f30                 | ' 
20f30                 | ' 	return *((WORD*)ptr);
20f30     0A FB E1 AA |  if_e	rdword	result1, arg02
20f34     10 FA 65 A0 |  if_e	shl	result1, #16
20f38     FD 12 42 A5 |  if_e	or	arg01, result1
20f3c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
20f3c                 | ' 	}
20f3c                 | ' 
20f3c                 | ' 	return cl;
20f3c     09 FB 01 F6 | 	mov	result1, arg01
20f40                 | _fatfs_cc_ld_clust_ret
20f40     2D 00 64 FD | 	ret
20f44                 | 
20f44                 | _fatfs_cc_st_clust
20f44     09 01 02 F6 | 	mov	_var01, arg01
20f48     0A 13 02 F6 | 	mov	arg01, arg02
20f4c     1A 12 06 F1 | 	add	arg01, #26
20f50     09 17 52 FC | 	wrword	arg03, arg01
20f54     00 01 C2 FA | 	rdbyte	_var01, _var01
20f58     03 00 0E F2 | 	cmp	_var01, #3 wz
20f5c     14 14 06 A1 |  if_e	add	arg02, #20
20f60     10 16 46 A0 |  if_e	shr	arg03, #16
20f64     0A 17 52 AC |  if_e	wrword	arg03, arg02
20f68                 | _fatfs_cc_st_clust_ret
20f68     2D 00 64 FD | 	ret
20f6c                 | 
20f6c                 | _fatfs_cc_cmp_lfn
20f6c     07 4A 05 F6 | 	mov	COUNT_, #7
20f70     A8 00 A0 FD | 	call	#pushregs_
20f74     09 1F 02 F6 | 	mov	local01, arg01
20f78     0A 13 02 F6 | 	mov	arg01, arg02
20f7c     1A 12 06 F1 | 	add	arg01, #26
20f80                 | ' {
20f80                 | ' 
20f80                 | ' 	return *((WORD*)ptr);
20f80     09 FB E9 FA | 	rdword	result1, arg01 wz
20f84     00 FA 05 56 |  if_ne	mov	result1, #0
20f88     E0 00 90 5D |  if_ne	jmp	#LR__3506
20f8c     0A 21 C2 FA | 	rdbyte	local02, arg02
20f90     3F 20 06 F5 | 	and	local02, #63
20f94     01 20 86 F1 | 	sub	local02, #1
20f98     0D 20 06 FD | 	qmul	local02, #13
20f9c                 | ' 
20f9c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
20f9c                 | ' 
20f9c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
20f9c     01 22 06 F6 | 	mov	local03, #1
20fa0     00 24 06 F6 | 	mov	local04, #0
20fa4     18 26 62 FD | 	getqx	local05
20fa8                 | LR__3500
20fa8     0D 24 16 F2 | 	cmp	local04, #13 wc
20fac     9C 00 90 3D |  if_ae	jmp	#LR__3505
20fb0     0A 13 02 F6 | 	mov	arg01, arg02
20fb4     12 21 02 F6 | 	mov	local02, local04
20fb8     01 00 00 FF 
20fbc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20fc0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
20fc4     10 21 C2 FA | 	rdbyte	local02, local02
20fc8     01 20 06 FA | 	mul	local02, #1
20fcc     10 13 02 F1 | 	add	arg01, local02
20fd0     01 00 00 FF 
20fd4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20fd8                 | ' {
20fd8                 | ' 
20fd8                 | ' 	return *((WORD*)ptr);
20fd8     09 FB E1 FA | 	rdword	result1, arg01
20fdc     FD 28 02 F6 | 	mov	local06, result1
20fe0     11 21 02 F6 | 	mov	local02, local03
20fe4     0F 20 4E F7 | 	zerox	local02, #15 wz
20fe8     44 00 90 AD |  if_e	jmp	#LR__3503
20fec     00 27 16 F2 | 	cmp	local05, #256 wc
20ff0     2C 00 90 3D |  if_ae	jmp	#LR__3501
20ff4     14 13 32 F9 | 	getword	arg01, local06, #0
20ff8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20ffc     FD 20 02 F6 | 	mov	local02, result1
21000     13 23 02 F6 | 	mov	local03, local05
21004     01 22 66 F0 | 	shl	local03, #1
21008     0F 23 02 F1 | 	add	local03, local01
2100c     11 13 E2 FA | 	rdword	arg01, local03
21010     01 26 06 F1 | 	add	local05, #1
21014     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
21018     FD 20 0A F2 | 	cmp	local02, result1 wz
2101c     08 00 90 AD |  if_e	jmp	#LR__3502
21020                 | LR__3501
21020                 | ' 				return 0;
21020     00 FA 05 F6 | 	mov	result1, #0
21024     44 00 90 FD | 	jmp	#LR__3506
21028                 | LR__3502
21028     14 23 02 F6 | 	mov	local03, local06
2102c     14 00 90 FD | 	jmp	#LR__3504
21030                 | LR__3503
21030     14 29 32 F9 | 	getword	local06, local06, #0
21034     7F 00 00 FF 
21038     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2103c     00 FA 05 56 |  if_ne	mov	result1, #0
21040     28 00 90 5D |  if_ne	jmp	#LR__3506
21044                 | LR__3504
21044     01 24 06 F1 | 	add	local04, #1
21048     5C FF 9F FD | 	jmp	#LR__3500
2104c                 | LR__3505
2104c     0A 21 C2 FA | 	rdbyte	local02, arg02
21050     40 20 CE F7 | 	test	local02, #64 wz
21054     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21058     01 26 66 50 |  if_ne	shl	local05, #1
2105c     0F 27 02 51 |  if_ne	add	local05, local01
21060     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
21064     00 FA 05 56 |  if_ne	mov	result1, #0
21068                 | ' 
21068                 | ' 	return 1;
21068     01 FA 05 A6 |  if_e	mov	result1, #1
2106c                 | LR__3506
2106c     A7 F0 03 F6 | 	mov	ptra, fp
21070     B2 00 A0 FD | 	call	#popregs_
21074                 | _fatfs_cc_cmp_lfn_ret
21074     2D 00 64 FD | 	ret
21078                 | 
21078                 | _fatfs_cc_pick_lfn
21078     09 01 02 F6 | 	mov	_var01, arg01
2107c     0A 13 02 F6 | 	mov	arg01, arg02
21080     1A 12 06 F1 | 	add	arg01, #26
21084                 | ' {
21084                 | ' 
21084                 | ' 	return *((WORD*)ptr);
21084     09 FB E9 FA | 	rdword	result1, arg01 wz
21088     00 FA 05 56 |  if_ne	mov	result1, #0
2108c     D4 00 90 5D |  if_ne	jmp	#LR__3515
21090     0A 03 C2 FA | 	rdbyte	_var02, arg02
21094     40 02 26 F5 | 	andn	_var02, #64
21098     01 02 86 F1 | 	sub	_var02, #1
2109c     0D 02 06 FD | 	qmul	_var02, #13
210a0                 | ' 
210a0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
210a0                 | ' 
210a0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
210a0     01 04 06 F6 | 	mov	_var03, #1
210a4     00 06 06 F6 | 	mov	_var04, #0
210a8     18 08 62 FD | 	getqx	_var05
210ac                 | LR__3510
210ac     0D 06 16 F2 | 	cmp	_var04, #13 wc
210b0     80 00 90 3D |  if_ae	jmp	#LR__3513
210b4     0A 13 02 F6 | 	mov	arg01, arg02
210b8     03 03 02 F6 | 	mov	_var02, _var04
210bc     01 00 00 FF 
210c0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
210c4     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
210c8     01 03 C2 FA | 	rdbyte	_var02, _var02
210cc     01 02 06 FA | 	mul	_var02, #1
210d0     01 13 02 F1 | 	add	arg01, _var02
210d4     01 00 00 FF 
210d8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
210dc                 | ' {
210dc                 | ' 
210dc                 | ' 	return *((WORD*)ptr);
210dc     09 FB E1 FA | 	rdword	result1, arg01
210e0     FD 0A 02 F6 | 	mov	_var06, result1
210e4     02 03 02 F6 | 	mov	_var02, _var03
210e8     0F 02 4E F7 | 	zerox	_var02, #15 wz
210ec     28 00 90 AD |  if_e	jmp	#LR__3511
210f0     00 09 16 F2 | 	cmp	_var05, #256 wc
210f4     00 FA 05 36 |  if_ae	mov	result1, #0
210f8     68 00 90 3D |  if_ae	jmp	#LR__3515
210fc     04 03 02 F6 | 	mov	_var02, _var05
21100     01 02 66 F0 | 	shl	_var02, #1
21104     00 03 02 F1 | 	add	_var02, _var01
21108     05 05 02 F6 | 	mov	_var03, _var06
2110c     01 05 52 FC | 	wrword	_var03, _var02
21110     01 08 06 F1 | 	add	_var05, #1
21114     14 00 90 FD | 	jmp	#LR__3512
21118                 | LR__3511
21118     05 0B 32 F9 | 	getword	_var06, _var06, #0
2111c     7F 00 00 FF 
21120     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
21124     00 FA 05 56 |  if_ne	mov	result1, #0
21128     38 00 90 5D |  if_ne	jmp	#LR__3515
2112c                 | LR__3512
2112c     01 06 06 F1 | 	add	_var04, #1
21130     78 FF 9F FD | 	jmp	#LR__3510
21134                 | LR__3513
21134     0A 03 C2 FA | 	rdbyte	_var02, arg02
21138     40 02 CE F7 | 	test	_var02, #64 wz
2113c     02 0D 02 56 |  if_ne	mov	_var07, _var03
21140     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
21144     18 00 90 AD |  if_e	jmp	#LR__3514
21148     00 09 16 F2 | 	cmp	_var05, #256 wc
2114c     00 FA 05 36 |  if_ae	mov	result1, #0
21150     10 00 90 3D |  if_ae	jmp	#LR__3515
21154     01 08 66 F0 | 	shl	_var05, #1
21158     00 09 02 F1 | 	add	_var05, _var01
2115c     04 01 58 FC | 	wrword	#0, _var05
21160                 | LR__3514
21160                 | ' 		lfnbuf[i] = 0;
21160                 | ' 	}
21160                 | ' 
21160                 | ' 	return 1;
21160     01 FA 05 F6 | 	mov	result1, #1
21164                 | LR__3515
21164                 | _fatfs_cc_pick_lfn_ret
21164     2D 00 64 FD | 	ret
21168                 | 
21168                 | _fatfs_cc_put_lfn
21168     0D 14 06 F1 | 	add	arg02, #13
2116c     0A 19 42 FC | 	wrbyte	arg04, arg02
21170     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
21174     01 18 86 F1 | 	sub	arg04, #1
21178     0D 18 06 FD | 	qmul	arg04, #13
2117c     09 01 02 F6 | 	mov	_var01, arg01
21180     02 14 86 F1 | 	sub	arg02, #2
21184     0A 1F 48 FC | 	wrbyte	#15, arg02
21188     01 14 06 F1 | 	add	arg02, #1
2118c     0A 01 48 FC | 	wrbyte	#0, arg02
21190     0C 14 86 F1 | 	sub	arg02, #12
21194     0A 13 02 F6 | 	mov	arg01, arg02
21198     1A 12 06 F1 | 	add	arg01, #26
2119c     09 01 58 FC | 	wrword	#0, arg01
211a0     00 02 06 F6 | 	mov	_var02, #0
211a4     00 04 06 F6 | 	mov	_var03, #0
211a8                 | ' 	BYTE* dir,
211a8                 | ' 	BYTE ord,
211a8                 | ' 	BYTE sum
211a8                 | ' )
211a8                 | ' {
211a8                 | ' 	UINT i, s;
211a8                 | ' 	WCHAR wc;
211a8                 | ' 
211a8                 | ' 
211a8                 | ' 	dir[ 13 ] = sum;
211a8                 | ' 	dir[ 11 ] =  0x0F ;
211a8                 | ' 	dir[ 12 ] = 0;
211a8                 | ' 	st_word(dir +  26 , 0);
211a8                 | ' 
211a8                 | ' 	i = (ord - 1) * 13;
211a8                 | ' 	s = wc = 0;
211a8                 | ' 	do {
211a8     01 00 00 FF 
211ac     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
211b0     18 06 62 FD | 	getqx	_var04
211b4     97 2A 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
211b8                 | LR__3520
211b8     01 19 32 F9 | 	getword	arg04, _var02, #0
211bc     7F 00 00 FF 
211c0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
211c4     03 13 02 56 |  if_ne	mov	arg01, _var04
211c8     01 06 06 51 |  if_ne	add	_var04, #1
211cc     01 12 66 50 |  if_ne	shl	arg01, #1
211d0     00 13 02 51 |  if_ne	add	arg01, _var01
211d4     09 03 E2 5A |  if_ne	rdword	_var02, arg01
211d8     0A 13 02 F6 | 	mov	arg01, arg02
211dc     02 19 02 F6 | 	mov	arg04, _var03
211e0     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
211e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
211e8     01 18 06 FA | 	mul	arg04, #1
211ec     0C 13 02 F1 | 	add	arg01, arg04
211f0     09 03 52 FC | 	wrword	_var02, arg01
211f4     01 19 02 F6 | 	mov	arg04, _var02
211f8     0F 18 4E F7 | 	zerox	arg04, #15 wz
211fc     0F 02 CE A9 |  if_e	bmask	_var02, #15
21200     01 04 06 F1 | 	add	_var03, #1
21204     0D 04 16 F2 | 	cmp	_var03, #13 wc
21208     AC FF 9F CD |  if_b	jmp	#LR__3520
2120c                 | LR__3521
2120c     01 00 00 FF 
21210     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
21214     01 03 32 F9 | 	getword	_var02, _var02, #0
21218     7F 00 00 FF 
2121c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
21220     01 06 66 50 |  if_ne	shl	_var04, #1
21224     00 07 02 51 |  if_ne	add	_var04, _var01
21228     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2122c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
21230     40 16 46 A5 |  if_e	or	arg03, #64
21234     0A 17 42 FC | 	wrbyte	arg03, arg02
21238                 | _fatfs_cc_put_lfn_ret
21238     2D 00 64 FD | 	ret
2123c                 | 
2123c                 | _fatfs_cc_gen_numname
2123c     08 4A 05 F6 | 	mov	COUNT_, #8
21240     A8 00 A0 FD | 	call	#pushregs_
21244     2C F0 07 F1 | 	add	ptra, #44
21248     09 1F 02 F6 | 	mov	local01, arg01
2124c     0A 21 02 F6 | 	mov	local02, arg02
21250     0B 23 02 F6 | 	mov	local03, arg03
21254     0C 25 02 F6 | 	mov	local04, arg04
21258     0F 13 02 F6 | 	mov	arg01, local01
2125c     10 15 02 F6 | 	mov	arg02, local02
21260     0B 16 06 F6 | 	mov	arg03, #11
21264     8C 78 BF FD | 	call	#__system____builtin_memmove
21268     06 24 16 F2 | 	cmp	local04, #6 wc
2126c     48 00 90 CD |  if_b	jmp	#LR__3535
21270     12 27 02 F6 | 	mov	local05, local04
21274     97 1E 48 FB | 	callpa	#(@LR__3533-@LR__3530)>>2,fcache_load_ptr_
21278                 | ' 		sreg = seq;
21278                 | ' 		while (*lfn) {
21278                 | LR__3530
21278     11 29 EA FA | 	rdword	local06, local03 wz
2127c     34 00 90 AD |  if_e	jmp	#LR__3534
21280     11 2B E2 FA | 	rdword	local07, local03
21284                 | ' 			wc = *lfn++;
21284                 | ' 			for (i = 0; i < 16; i++) {
21284     02 22 06 F1 | 	add	local03, #2
21288     10 12 DC FC | 	rep	@LR__3532, #16
2128c                 | LR__3531
2128c     01 26 66 F0 | 	shl	local05, #1
21290     15 29 32 F9 | 	getword	local06, local07, #0
21294     01 28 06 F5 | 	and	local06, #1
21298     14 27 02 F1 | 	add	local05, local06
2129c     15 2B 32 F9 | 	getword	local07, local07, #0
212a0     01 2A 46 F0 | 	shr	local07, #1
212a4     10 26 2E F4 | 	testbn	local05, #16 wz
212a8     88 00 00 5F 
212ac     21 26 66 55 |  if_ne	xor	local05, ##69665
212b0                 | LR__3532
212b0     C4 FF 9F FD | 	jmp	#LR__3530
212b4                 | LR__3533
212b4                 | LR__3534
212b4     13 25 02 F6 | 	mov	local04, local05
212b8                 | LR__3535
212b8     07 2A 06 F6 | 	mov	local07, #7
212bc                 | ' 			}
212bc                 | ' 		}
212bc                 | ' 		seq = (UINT)sreg;
212bc                 | ' 	}
212bc                 | ' 
212bc                 | ' 
212bc                 | ' 	i = 7;
212bc                 | ' 	do {
212bc     10 4E 05 F1 | 	add	fp, #16
212c0     97 1A 48 FB | 	callpa	#(@LR__3537-@LR__3536)>>2,fcache_load_ptr_
212c4                 | LR__3536
212c4     12 27 42 F8 | 	getnib	local05, local04, #0
212c8     30 26 06 F1 | 	add	local05, #48
212cc     04 24 46 F0 | 	shr	local04, #4
212d0     13 29 E2 F8 | 	getbyte	local06, local05, #0
212d4     3A 28 16 F2 | 	cmp	local06, #58 wc
212d8     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
212dc     07 26 06 31 |  if_ae	add	local05, #7
212e0     15 29 02 F6 | 	mov	local06, local07
212e4     01 2A 8E F1 | 	sub	local07, #1 wz
212e8     A7 28 02 F1 | 	add	local06, fp
212ec     14 27 42 FC | 	wrbyte	local05, local06
212f0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
212f4     CC FF 9F 5D |  if_ne	jmp	#LR__3536
212f8                 | LR__3537
212f8     15 29 02 F6 | 	mov	local06, local07
212fc     A7 28 02 F1 | 	add	local06, fp
21300     14 FD 48 FC | 	wrbyte	#126, local06
21304                 | ' 	ns[i] = '~';
21304                 | ' 
21304                 | ' 
21304                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
21304     00 26 06 F6 | 	mov	local05, #0
21308     10 4E 85 F1 | 	sub	fp, #16
2130c     97 2A 48 FB | 	callpa	#(@LR__3540-@LR__3538)>>2,fcache_load_ptr_
21310                 | LR__3538
21310     15 27 12 F2 | 	cmp	local05, local07 wc
21314     4C 00 90 3D |  if_ae	jmp	#LR__3541
21318     13 29 02 F6 | 	mov	local06, local05
2131c     0F 29 02 F1 | 	add	local06, local01
21320     14 29 C2 FA | 	rdbyte	local06, local06
21324     20 28 0E F2 | 	cmp	local06, #32 wz
21328     38 00 90 AD |  if_e	jmp	#LR__3541
2132c     13 13 02 F6 | 	mov	arg01, local05
21330     0F 13 02 F1 | 	add	arg01, local01
21334     09 13 CA FA | 	rdbyte	arg01, arg01 wz
21338     00 FA 05 56 |  if_ne	mov	result1, #0
2133c                 | ' 
2133c                 | ' 	return 0;
2133c     00 FA 05 A6 |  if_e	mov	result1, #0
21340     00 FA 0D F2 | 	cmp	result1, #0 wz
21344     14 00 90 AD |  if_e	jmp	#LR__3539
21348     15 29 02 F6 | 	mov	local06, local07
2134c     01 28 86 F1 | 	sub	local06, #1
21350     14 27 0A F2 | 	cmp	local05, local06 wz
21354     0C 00 90 AD |  if_e	jmp	#LR__3541
21358     01 26 06 F1 | 	add	local05, #1
2135c                 | LR__3539
2135c     01 26 06 F1 | 	add	local05, #1
21360     AC FF 9F FD | 	jmp	#LR__3538
21364                 | LR__3540
21364                 | LR__3541
21364     97 20 48 FB | 	callpa	#(@LR__3545-@LR__3542)>>2,fcache_load_ptr_
21368                 | ' 			j++;
21368                 | ' 		}
21368                 | ' 	}
21368                 | ' 	do {
21368                 | LR__3542
21368     13 29 02 F6 | 	mov	local06, local05
2136c     0F 29 02 F1 | 	add	local06, local01
21370     08 2A 16 F2 | 	cmp	local07, #8 wc
21374     01 26 06 F1 | 	add	local05, #1
21378     1C 00 90 3D |  if_ae	jmp	#LR__3543
2137c     15 25 02 F6 | 	mov	local04, local07
21380     10 4E 05 F1 | 	add	fp, #16
21384     A7 24 02 F1 | 	add	local04, fp
21388     12 2D C2 FA | 	rdbyte	local08, local04
2138c     01 2A 06 F1 | 	add	local07, #1
21390     10 4E 85 F1 | 	sub	fp, #16
21394     04 00 90 FD | 	jmp	#LR__3544
21398                 | LR__3543
21398     20 2C 06 F6 | 	mov	local08, #32
2139c                 | LR__3544
2139c     14 2D 42 FC | 	wrbyte	local08, local06
213a0     08 26 16 F2 | 	cmp	local05, #8 wc
213a4     C0 FF 9F CD |  if_b	jmp	#LR__3542
213a8                 | LR__3545
213a8     A7 F0 03 F6 | 	mov	ptra, fp
213ac     B2 00 A0 FD | 	call	#popregs_
213b0                 | _fatfs_cc_gen_numname_ret
213b0     2D 00 64 FD | 	ret
213b4                 | 
213b4                 | _fatfs_cc_sum_sfn
213b4     00 00 06 F6 | 	mov	_var01, #0
213b8                 | ' )
213b8                 | ' {
213b8                 | ' 	BYTE sum = 0;
213b8                 | ' 	UINT n = 11;
213b8                 | ' 
213b8                 | ' 	do {
213b8     97 12 48 FB | 	callpa	#(@LR__3552-@LR__3550)>>2,fcache_load_ptr_
213bc                 | LR__3550
213bc     0B 10 DC FC | 	rep	@LR__3553, #11
213c0                 | LR__3551
213c0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
213c4     01 FA 45 F0 | 	shr	result1, #1
213c8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
213cc     07 00 66 F0 | 	shl	_var01, #7
213d0     00 FB 01 F1 | 	add	result1, _var01
213d4     09 01 C2 FA | 	rdbyte	_var01, arg01
213d8     FD 00 02 F1 | 	add	_var01, result1
213dc     01 12 06 F1 | 	add	arg01, #1
213e0                 | LR__3552
213e0                 | LR__3553
213e0                 | ' 	return sum;
213e0     00 FB 01 F6 | 	mov	result1, _var01
213e4                 | _fatfs_cc_sum_sfn_ret
213e4     2D 00 64 FD | 	ret
213e8                 | 
213e8                 | _fatfs_cc_dir_read
213e8     0C 4A 05 F6 | 	mov	COUNT_, #12
213ec     A8 00 A0 FD | 	call	#pushregs_
213f0     09 1F 02 F6 | 	mov	local01, arg01
213f4     0A 21 02 F6 | 	mov	local02, arg02
213f8     04 22 06 F6 | 	mov	local03, #4
213fc     0F 25 02 FB | 	rdlong	local04, local01
21400     FF 26 06 F6 | 	mov	local05, #255
21404     FF 28 06 F6 | 	mov	local06, #255
21408                 | ' )
21408                 | ' {
21408                 | ' 	FRESULT res = FR_NO_FILE;
21408                 | ' 	FATFS *fs = dp->obj.fs;
21408                 | ' 	BYTE attr, b;
21408                 | ' 
21408                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
21408                 | ' 
21408                 | ' 
21408                 | ' 	while (dp->sect) {
21408                 | LR__3560
21408     18 1E 06 F1 | 	add	local01, #24
2140c     0F FB 09 FB | 	rdlong	result1, local01 wz
21410     18 1E 86 F1 | 	sub	local01, #24
21414     AC 01 90 AD |  if_e	jmp	#LR__3570
21418     18 1E 06 F1 | 	add	local01, #24
2141c     0F 15 02 FB | 	rdlong	arg02, local01
21420     18 1E 86 F1 | 	sub	local01, #24
21424     12 13 02 F6 | 	mov	arg01, local04
21428     AC ED BF FD | 	call	#_fatfs_cc_move_window
2142c     FD 22 0A F6 | 	mov	local03, result1 wz
21430     90 01 90 5D |  if_ne	jmp	#LR__3570
21434     1C 1E 06 F1 | 	add	local01, #28
21438     0F FB 01 FB | 	rdlong	result1, local01
2143c     1C 1E 86 F1 | 	sub	local01, #28
21440     FD 2A C2 FA | 	rdbyte	local07, result1
21444     15 FB 01 F6 | 	mov	result1, local07
21448     07 FA 4D F7 | 	zerox	result1, #7 wz
2144c     04 22 06 A6 |  if_e	mov	local03, #4
21450                 | ' 			res = FR_NO_FILE; break;
21450     70 01 90 AD |  if_e	jmp	#LR__3570
21454     1C 1E 06 F1 | 	add	local01, #28
21458     0F 2D 02 FB | 	rdlong	local08, local01
2145c     0B 2C 06 F1 | 	add	local08, #11
21460     16 2F C2 FA | 	rdbyte	local09, local08
21464     3F 2E 06 F5 | 	and	local09, #63
21468     16 1E 86 F1 | 	sub	local01, #22
2146c     0F 2F 42 FC | 	wrbyte	local09, local01
21470     06 1E 86 F1 | 	sub	local01, #6
21474     15 FB E1 F8 | 	getbyte	result1, local07, #0
21478     E5 FA 0D F2 | 	cmp	result1, #229 wz
2147c     15 2D 02 56 |  if_ne	mov	local08, local07
21480     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
21484     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
21488     1C 00 90 AD |  if_e	jmp	#LR__3561
2148c     00 30 06 F6 | 	mov	local10, #0
21490     17 2D E2 F8 | 	getbyte	local08, local09, #0
21494     20 2C 26 F5 | 	andn	local08, #32
21498     08 2C 0E F2 | 	cmp	local08, #8 wz
2149c     01 30 06 A6 |  if_e	mov	local10, #1
214a0     10 31 0A F2 | 	cmp	local10, local02 wz
214a4     08 00 90 AD |  if_e	jmp	#LR__3562
214a8                 | LR__3561
214a8     FF 26 06 F6 | 	mov	local05, #255
214ac     00 01 90 FD | 	jmp	#LR__3569
214b0                 | LR__3562
214b0     17 2F E2 F8 | 	getbyte	local09, local09, #0
214b4     0F 2E 0E F2 | 	cmp	local09, #15 wz
214b8     B4 00 90 5D |  if_ne	jmp	#LR__3566
214bc     15 33 E2 F8 | 	getbyte	local11, local07, #0
214c0     40 32 CE F7 | 	test	local11, #64 wz
214c4     30 00 90 AD |  if_e	jmp	#LR__3563
214c8     1C 1E 06 F1 | 	add	local01, #28
214cc     0F 33 02 FB | 	rdlong	local11, local01
214d0     0D 32 06 F1 | 	add	local11, #13
214d4     19 29 C2 FA | 	rdbyte	local06, local11
214d8     15 2B E2 F8 | 	getbyte	local07, local07, #0
214dc     BF 2A 06 F5 | 	and	local07, #191
214e0     15 27 02 F6 | 	mov	local05, local07
214e4     0C 1E 86 F1 | 	sub	local01, #12
214e8     0F 33 02 FB | 	rdlong	local11, local01
214ec     1C 1E 06 F1 | 	add	local01, #28
214f0     0F 33 62 FC | 	wrlong	local11, local01
214f4     2C 1E 86 F1 | 	sub	local01, #44
214f8                 | LR__3563
214f8     15 2D E2 F8 | 	getbyte	local08, local07, #0
214fc     13 31 E2 F8 | 	getbyte	local10, local05, #0
21500     18 2D 0A F2 | 	cmp	local08, local10 wz
21504     5C 00 90 5D |  if_ne	jmp	#LR__3564
21508     14 31 E2 F8 | 	getbyte	local10, local06, #0
2150c     1C 1E 06 F1 | 	add	local01, #28
21510     0F 2F 02 FB | 	rdlong	local09, local01
21514     1C 1E 86 F1 | 	sub	local01, #28
21518     0D 2E 06 F1 | 	add	local09, #13
2151c     17 2D C2 FA | 	rdbyte	local08, local09
21520     16 2F E2 F8 | 	getbyte	local09, local08, #0
21524     17 31 0A F2 | 	cmp	local10, local09 wz
21528     38 00 90 5D |  if_ne	jmp	#LR__3564
2152c     0C 24 06 F1 | 	add	local04, #12
21530     12 13 02 FB | 	rdlong	arg01, local04
21534     0C 24 86 F1 | 	sub	local04, #12
21538     1C 1E 06 F1 | 	add	local01, #28
2153c     0F 35 02 FB | 	rdlong	local12, local01
21540     1C 1E 86 F1 | 	sub	local01, #28
21544     1A 15 02 F6 | 	mov	arg02, local12
21548     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2154c     00 FA 4D F2 | 	cmps	result1, #0 wz
21550     13 35 02 56 |  if_ne	mov	local12, local05
21554     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21558     01 34 86 51 |  if_ne	sub	local12, #1
2155c     1A 33 02 56 |  if_ne	mov	local11, local12
21560     04 00 90 5D |  if_ne	jmp	#LR__3565
21564                 | LR__3564
21564     FF 32 06 F6 | 	mov	local11, #255
21568                 | LR__3565
21568     19 27 02 F6 | 	mov	local05, local11
2156c     40 00 90 FD | 	jmp	#LR__3568
21570                 | LR__3566
21570     13 33 02 F6 | 	mov	local11, local05
21574     07 32 4E F7 | 	zerox	local11, #7 wz
21578     20 00 90 5D |  if_ne	jmp	#LR__3567
2157c     14 29 E2 F8 | 	getbyte	local06, local06, #0
21580     1C 1E 06 F1 | 	add	local01, #28
21584     0F 13 02 FB | 	rdlong	arg01, local01
21588     1C 1E 86 F1 | 	sub	local01, #28
2158c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21590     FD FA E1 F8 | 	getbyte	result1, result1, #0
21594     FD 28 0A F2 | 	cmp	local06, result1 wz
21598     28 00 90 AD |  if_e	jmp	#LR__3570
2159c                 | LR__3567
2159c     2C 1E 06 F1 | 	add	local01, #44
215a0     FF FF FF FF 
215a4     0F FF 6B FC | 	wrlong	##-1, local01
215a8     2C 1E 86 F1 | 	sub	local01, #44
215ac                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
215ac                 | ' 					}
215ac                 | ' 					break;
215ac     14 00 90 FD | 	jmp	#LR__3570
215b0                 | LR__3568
215b0                 | LR__3569
215b0     0F 13 02 F6 | 	mov	arg01, local01
215b4     00 14 06 F6 | 	mov	arg02, #0
215b8     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
215bc     FD 22 0A F6 | 	mov	local03, result1 wz
215c0     44 FE 9F AD |  if_e	jmp	#LR__3560
215c4                 | LR__3570
215c4     00 22 0E F2 | 	cmp	local03, #0 wz
215c8     18 1E 06 51 |  if_ne	add	local01, #24
215cc     0F 01 68 5C |  if_ne	wrlong	#0, local01
215d0                 | ' 	return res;
215d0     11 FB 01 F6 | 	mov	result1, local03
215d4     A7 F0 03 F6 | 	mov	ptra, fp
215d8     B2 00 A0 FD | 	call	#popregs_
215dc                 | _fatfs_cc_dir_read_ret
215dc     2D 00 64 FD | 	ret
215e0                 | 
215e0                 | _fatfs_cc_dir_find
215e0     0B 4A 05 F6 | 	mov	COUNT_, #11
215e4     A8 00 A0 FD | 	call	#pushregs_
215e8     09 1F 02 F6 | 	mov	local01, arg01
215ec     0F 21 02 FB | 	rdlong	local02, local01
215f0     0F 13 02 F6 | 	mov	arg01, local01
215f4     00 14 06 F6 | 	mov	arg02, #0
215f8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
215fc     00 FA 0D F2 | 	cmp	result1, #0 wz
21600     18 02 90 5D |  if_ne	jmp	#LR__3592
21604     FF 22 06 F6 | 	mov	local03, #255
21608     FF 24 06 F6 | 	mov	local04, #255
2160c     2C 1E 06 F1 | 	add	local01, #44
21610     FF FF FF FF 
21614     0F FF 6B FC | 	wrlong	##-1, local01
21618     2C 1E 86 F1 | 	sub	local01, #44
2161c                 | ' #line 2404 "ff.c"
2161c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2161c                 | ' 
2161c                 | ' 	do {
2161c                 | LR__3580
2161c     18 1E 06 F1 | 	add	local01, #24
21620     0F 15 02 FB | 	rdlong	arg02, local01
21624     18 1E 86 F1 | 	sub	local01, #24
21628     10 13 02 F6 | 	mov	arg01, local02
2162c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21630     FD 26 0A F6 | 	mov	local05, result1 wz
21634     E0 01 90 5D |  if_ne	jmp	#LR__3591
21638     1C 1E 06 F1 | 	add	local01, #28
2163c     0F 17 02 FB | 	rdlong	arg03, local01
21640     1C 1E 86 F1 | 	sub	local01, #28
21644     0B 29 C2 FA | 	rdbyte	local06, arg03
21648     14 17 02 F6 | 	mov	arg03, local06
2164c     07 16 4E F7 | 	zerox	arg03, #7 wz
21650     04 26 06 A6 |  if_e	mov	local05, #4
21654     C0 01 90 AD |  if_e	jmp	#LR__3591
21658     1C 1E 06 F1 | 	add	local01, #28
2165c     0F 2B 02 FB | 	rdlong	local07, local01
21660     15 17 02 F6 | 	mov	arg03, local07
21664     0B 16 06 F1 | 	add	arg03, #11
21668     0B 2D C2 FA | 	rdbyte	local08, arg03
2166c     3F 2C 06 F5 | 	and	local08, #63
21670     16 1E 86 F1 | 	sub	local01, #22
21674     0F 2D 42 FC | 	wrbyte	local08, local01
21678     06 1E 86 F1 | 	sub	local01, #6
2167c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21680     E5 16 0E F2 | 	cmp	arg03, #229 wz
21684     18 00 90 AD |  if_e	jmp	#LR__3581
21688     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2168c     08 16 CE F7 | 	test	arg03, #8 wz
21690     16 2B 02 56 |  if_ne	mov	local07, local08
21694     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
21698     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2169c     18 00 90 AD |  if_e	jmp	#LR__3582
216a0                 | LR__3581
216a0     FF 24 06 F6 | 	mov	local04, #255
216a4     2C 1E 06 F1 | 	add	local01, #44
216a8     FF FF FF FF 
216ac     0F FF 6B FC | 	wrlong	##-1, local01
216b0     2C 1E 86 F1 | 	sub	local01, #44
216b4     4C 01 90 FD | 	jmp	#LR__3590
216b8                 | LR__3582
216b8     16 2D E2 F8 | 	getbyte	local08, local08, #0
216bc     0F 2C 0E F2 | 	cmp	local08, #15 wz
216c0     C8 00 90 5D |  if_ne	jmp	#LR__3586
216c4     2B 1E 06 F1 | 	add	local01, #43
216c8     0F 2D C2 FA | 	rdbyte	local08, local01
216cc     2B 1E 86 F1 | 	sub	local01, #43
216d0     40 2C CE F7 | 	test	local08, #64 wz
216d4     2C 01 90 5D |  if_ne	jmp	#LR__3589
216d8     14 2F E2 F8 | 	getbyte	local09, local06, #0
216dc     40 2E CE F7 | 	test	local09, #64 wz
216e0     30 00 90 AD |  if_e	jmp	#LR__3583
216e4     1C 1E 06 F1 | 	add	local01, #28
216e8     0F 2F 02 FB | 	rdlong	local09, local01
216ec     0D 2E 06 F1 | 	add	local09, #13
216f0     17 23 C2 FA | 	rdbyte	local03, local09
216f4     14 29 E2 F8 | 	getbyte	local06, local06, #0
216f8     BF 28 06 F5 | 	and	local06, #191
216fc     14 25 02 F6 | 	mov	local04, local06
21700     0C 1E 86 F1 | 	sub	local01, #12
21704     0F 2F 02 FB | 	rdlong	local09, local01
21708     1C 1E 06 F1 | 	add	local01, #28
2170c     0F 2F 62 FC | 	wrlong	local09, local01
21710     2C 1E 86 F1 | 	sub	local01, #44
21714                 | LR__3583
21714     14 31 E2 F8 | 	getbyte	local10, local06, #0
21718     12 2B E2 F8 | 	getbyte	local07, local04, #0
2171c     15 31 0A F2 | 	cmp	local10, local07 wz
21720     5C 00 90 5D |  if_ne	jmp	#LR__3584
21724     11 2D E2 F8 | 	getbyte	local08, local03, #0
21728     1C 1E 06 F1 | 	add	local01, #28
2172c     0F 2B 02 FB | 	rdlong	local07, local01
21730     1C 1E 86 F1 | 	sub	local01, #28
21734     0D 2A 06 F1 | 	add	local07, #13
21738     15 29 C2 FA | 	rdbyte	local06, local07
2173c     14 2B E2 F8 | 	getbyte	local07, local06, #0
21740     15 2D 0A F2 | 	cmp	local08, local07 wz
21744     38 00 90 5D |  if_ne	jmp	#LR__3584
21748     0C 20 06 F1 | 	add	local02, #12
2174c     10 13 02 FB | 	rdlong	arg01, local02
21750     0C 20 86 F1 | 	sub	local02, #12
21754     1C 1E 06 F1 | 	add	local01, #28
21758     0F 33 02 FB | 	rdlong	local11, local01
2175c     1C 1E 86 F1 | 	sub	local01, #28
21760     19 15 02 F6 | 	mov	arg02, local11
21764     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21768     00 FA 4D F2 | 	cmps	result1, #0 wz
2176c     12 33 02 56 |  if_ne	mov	local11, local04
21770     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
21774     01 32 86 51 |  if_ne	sub	local11, #1
21778     19 2F 02 56 |  if_ne	mov	local09, local11
2177c     04 00 90 5D |  if_ne	jmp	#LR__3585
21780                 | LR__3584
21780     FF 2E 06 F6 | 	mov	local09, #255
21784                 | LR__3585
21784     17 25 02 F6 | 	mov	local04, local09
21788     78 00 90 FD | 	jmp	#LR__3589
2178c                 | LR__3586
2178c     12 2F 02 F6 | 	mov	local09, local04
21790     07 2E 4E F7 | 	zerox	local09, #7 wz
21794     20 00 90 5D |  if_ne	jmp	#LR__3587
21798     11 31 E2 F8 | 	getbyte	local10, local03, #0
2179c     1C 1E 06 F1 | 	add	local01, #28
217a0     0F 13 02 FB | 	rdlong	arg01, local01
217a4     1C 1E 86 F1 | 	sub	local01, #28
217a8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
217ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
217b0     FD 30 0A F2 | 	cmp	local10, result1 wz
217b4     60 00 90 AD |  if_e	jmp	#LR__3591
217b8                 | LR__3587
217b8     2B 1E 06 F1 | 	add	local01, #43
217bc     0F 2F C2 FA | 	rdbyte	local09, local01
217c0     2B 1E 86 F1 | 	sub	local01, #43
217c4     01 2E CE F7 | 	test	local09, #1 wz
217c8     24 00 90 5D |  if_ne	jmp	#LR__3588
217cc     1C 1E 06 F1 | 	add	local01, #28
217d0     0F 13 02 FB | 	rdlong	arg01, local01
217d4     04 1E 06 F1 | 	add	local01, #4
217d8     0F 15 02 F6 | 	mov	arg02, local01
217dc     20 1E 86 F1 | 	sub	local01, #32
217e0     0B 16 06 F6 | 	mov	arg03, #11
217e4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
217e8     00 FA 0D F2 | 	cmp	result1, #0 wz
217ec     28 00 90 AD |  if_e	jmp	#LR__3591
217f0                 | LR__3588
217f0     FF 24 06 F6 | 	mov	local04, #255
217f4     2C 1E 06 F1 | 	add	local01, #44
217f8     FF FF FF FF 
217fc     0F FF 6B FC | 	wrlong	##-1, local01
21800     2C 1E 86 F1 | 	sub	local01, #44
21804                 | LR__3589
21804                 | LR__3590
21804     0F 13 02 F6 | 	mov	arg01, local01
21808     00 14 06 F6 | 	mov	arg02, #0
2180c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
21810     FD 26 0A F6 | 	mov	local05, result1 wz
21814     04 FE 9F AD |  if_e	jmp	#LR__3580
21818                 | LR__3591
21818                 | ' 
21818                 | ' 	return res;
21818     13 FB 01 F6 | 	mov	result1, local05
2181c                 | LR__3592
2181c     A7 F0 03 F6 | 	mov	ptra, fp
21820     B2 00 A0 FD | 	call	#popregs_
21824                 | _fatfs_cc_dir_find_ret
21824     2D 00 64 FD | 	ret
21828                 | 
21828                 | _fatfs_cc_dir_register
21828     0A 4A 05 F6 | 	mov	COUNT_, #10
2182c     A8 00 A0 FD | 	call	#pushregs_
21830     2C F0 07 F1 | 	add	ptra, #44
21834     04 4E 05 F1 | 	add	fp, #4
21838     A7 12 62 FC | 	wrlong	arg01, fp
2183c     09 1F 02 FB | 	rdlong	local01, arg01
21840     08 4E 05 F1 | 	add	fp, #8
21844     A7 1E 62 FC | 	wrlong	local01, fp
21848     08 4E 85 F1 | 	sub	fp, #8
2184c     A7 20 02 FB | 	rdlong	local02, fp
21850     04 4E 85 F1 | 	sub	fp, #4
21854     2B 20 06 F1 | 	add	local02, #43
21858     10 21 C2 FA | 	rdbyte	local02, local02
2185c     A0 20 CE F7 | 	test	local02, #160 wz
21860     06 FA 05 56 |  if_ne	mov	result1, #6
21864     F8 03 90 5D |  if_ne	jmp	#LR__3615
21868                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21868     14 4E 05 F1 | 	add	fp, #20
2186c     A7 00 68 FC | 	wrlong	#0, fp
21870     14 4E 85 F1 | 	sub	fp, #20
21874     97 28 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
21878                 | LR__3600
21878     0C 4E 05 F1 | 	add	fp, #12
2187c     A7 20 02 FB | 	rdlong	local02, fp
21880     0C 20 06 F1 | 	add	local02, #12
21884     10 23 02 FB | 	rdlong	local03, local02
21888     08 4E 05 F1 | 	add	fp, #8
2188c     A7 24 02 FB | 	rdlong	local04, fp
21890     14 4E 85 F1 | 	sub	fp, #20
21894     01 24 66 F0 | 	shl	local04, #1
21898     11 25 02 F1 | 	add	local04, local03
2189c     12 21 EA FA | 	rdword	local02, local04 wz
218a0     24 00 90 AD |  if_e	jmp	#LR__3602
218a4     14 4E 05 F1 | 	add	fp, #20
218a8     A7 26 02 FB | 	rdlong	local05, fp
218ac     13 29 02 F6 | 	mov	local06, local05
218b0     13 2B 02 F6 | 	mov	local07, local05
218b4     15 2D 02 F6 | 	mov	local08, local07
218b8     01 2C 06 F1 | 	add	local08, #1
218bc     A7 2C 62 FC | 	wrlong	local08, fp
218c0     14 4E 85 F1 | 	sub	fp, #20
218c4     B0 FF 9F FD | 	jmp	#LR__3600
218c8                 | LR__3601
218c8                 | LR__3602
218c8     1C 4E 05 F1 | 	add	fp, #28
218cc     A7 12 02 F6 | 	mov	arg01, fp
218d0     18 4E 85 F1 | 	sub	fp, #24
218d4     A7 14 02 FB | 	rdlong	arg02, fp
218d8     04 4E 85 F1 | 	sub	fp, #4
218dc     20 14 06 F1 | 	add	arg02, #32
218e0     0C 16 06 F6 | 	mov	arg03, #12
218e4     0C 72 BF FD | 	call	#__system____builtin_memmove
218e8     27 4E 05 F1 | 	add	fp, #39
218ec     A7 2E C2 FA | 	rdbyte	local09, fp
218f0     27 4E 85 F1 | 	sub	fp, #39
218f4     01 2E CE F7 | 	test	local09, #1 wz
218f8     F4 00 90 AD |  if_e	jmp	#LR__3605
218fc     04 4E 05 F1 | 	add	fp, #4
21900     A7 30 02 FB | 	rdlong	local10, fp
21904     2B 30 06 F1 | 	add	local10, #43
21908     18 81 48 FC | 	wrbyte	#64, local10
2190c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2190c                 | ' 		for (n = 1; n < 100; n++) {
2190c     0C 4E 05 F1 | 	add	fp, #12
21910     A7 02 68 FC | 	wrlong	#1, fp
21914     10 4E 85 F1 | 	sub	fp, #16
21918                 | LR__3603
21918     10 4E 05 F1 | 	add	fp, #16
2191c     A7 20 02 FB | 	rdlong	local02, fp
21920     10 4E 85 F1 | 	sub	fp, #16
21924     64 20 16 F2 | 	cmp	local02, #100 wc
21928     70 00 90 3D |  if_ae	jmp	#LR__3604
2192c     04 4E 05 F1 | 	add	fp, #4
21930     A7 12 02 FB | 	rdlong	arg01, fp
21934     20 12 06 F1 | 	add	arg01, #32
21938     18 4E 05 F1 | 	add	fp, #24
2193c     A7 14 02 F6 | 	mov	arg02, fp
21940     10 4E 85 F1 | 	sub	fp, #16
21944     A7 30 02 FB | 	rdlong	local10, fp
21948     0C 30 06 F1 | 	add	local10, #12
2194c     18 17 02 FB | 	rdlong	arg03, local10
21950     04 4E 05 F1 | 	add	fp, #4
21954     A7 18 02 FB | 	rdlong	arg04, fp
21958     10 4E 85 F1 | 	sub	fp, #16
2195c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21960     04 4E 05 F1 | 	add	fp, #4
21964     A7 12 02 FB | 	rdlong	arg01, fp
21968     04 4E 85 F1 | 	sub	fp, #4
2196c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21970     08 4E 05 F1 | 	add	fp, #8
21974     A7 FA 61 FC | 	wrlong	result1, fp
21978     00 FA 4D F2 | 	cmps	result1, #0 wz
2197c     08 4E 85 F1 | 	sub	fp, #8
21980     18 00 90 5D |  if_ne	jmp	#LR__3604
21984     10 4E 05 F1 | 	add	fp, #16
21988     A7 30 02 FB | 	rdlong	local10, fp
2198c     01 30 06 F1 | 	add	local10, #1
21990     A7 30 62 FC | 	wrlong	local10, fp
21994     10 4E 85 F1 | 	sub	fp, #16
21998     7C FF 9F FD | 	jmp	#LR__3603
2199c                 | LR__3604
2199c     10 4E 05 F1 | 	add	fp, #16
219a0     A7 30 02 FB | 	rdlong	local10, fp
219a4     10 4E 85 F1 | 	sub	fp, #16
219a8     64 30 0E F2 | 	cmp	local10, #100 wz
219ac     07 FA 05 A6 |  if_e	mov	result1, #7
219b0     AC 02 90 AD |  if_e	jmp	#LR__3615
219b4     08 4E 05 F1 | 	add	fp, #8
219b8     A7 30 02 FB | 	rdlong	local10, fp
219bc     08 4E 85 F1 | 	sub	fp, #8
219c0     04 30 0E F2 | 	cmp	local10, #4 wz
219c4     08 4E 05 51 |  if_ne	add	fp, #8
219c8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
219cc     08 4E 85 51 |  if_ne	sub	fp, #8
219d0     8C 02 90 5D |  if_ne	jmp	#LR__3615
219d4     04 4E 05 F1 | 	add	fp, #4
219d8     A7 30 02 FB | 	rdlong	local10, fp
219dc     23 4E 05 F1 | 	add	fp, #35
219e0     A7 1E C2 FA | 	rdbyte	local01, fp
219e4     27 4E 85 F1 | 	sub	fp, #39
219e8     2B 30 06 F1 | 	add	local10, #43
219ec     18 1F 42 FC | 	wrbyte	local01, local10
219f0                 | LR__3605
219f0     27 4E 05 F1 | 	add	fp, #39
219f4     A7 20 C2 FA | 	rdbyte	local02, fp
219f8     27 4E 85 F1 | 	sub	fp, #39
219fc     02 20 CE F7 | 	test	local02, #2 wz
21a00     20 00 90 AD |  if_e	jmp	#LR__3606
21a04     14 4E 05 F1 | 	add	fp, #20
21a08     A7 30 02 FB | 	rdlong	local10, fp
21a0c     0C 30 06 F1 | 	add	local10, #12
21a10     0D 30 16 FD | 	qdiv	local10, #13
21a14     14 4E 85 F1 | 	sub	fp, #20
21a18     18 30 62 FD | 	getqx	local10
21a1c     01 30 06 F1 | 	add	local10, #1
21a20     04 00 90 FD | 	jmp	#LR__3607
21a24                 | LR__3606
21a24     01 30 06 F6 | 	mov	local10, #1
21a28                 | LR__3607
21a28     18 4E 05 F1 | 	add	fp, #24
21a2c     A7 30 62 FC | 	wrlong	local10, fp
21a30     14 4E 85 F1 | 	sub	fp, #20
21a34     A7 12 02 FB | 	rdlong	arg01, fp
21a38     18 15 02 F6 | 	mov	arg02, local10
21a3c     04 4E 85 F1 | 	sub	fp, #4
21a40     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
21a44     08 4E 05 F1 | 	add	fp, #8
21a48     A7 FA 61 FC | 	wrlong	result1, fp
21a4c     08 4E 85 F1 | 	sub	fp, #8
21a50     00 FA 0D F2 | 	cmp	result1, #0 wz
21a54     38 01 90 5D |  if_ne	jmp	#LR__3612
21a58     18 4E 05 F1 | 	add	fp, #24
21a5c     A7 30 02 FB | 	rdlong	local10, fp
21a60     01 30 8E F1 | 	sub	local10, #1 wz
21a64     A7 30 62 FC | 	wrlong	local10, fp
21a68     18 4E 85 F1 | 	sub	fp, #24
21a6c     20 01 90 AD |  if_e	jmp	#LR__3612
21a70     04 4E 05 F1 | 	add	fp, #4
21a74     A7 30 02 FB | 	rdlong	local10, fp
21a78     18 13 02 F6 | 	mov	arg01, local10
21a7c     14 4E 05 F1 | 	add	fp, #20
21a80     A7 18 02 FB | 	rdlong	arg04, fp
21a84     18 4E 85 F1 | 	sub	fp, #24
21a88     05 18 66 F0 | 	shl	arg04, #5
21a8c     10 30 06 F1 | 	add	local10, #16
21a90     18 15 02 FB | 	rdlong	arg02, local10
21a94     0C 15 82 F1 | 	sub	arg02, arg04
21a98     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
21a9c     08 4E 05 F1 | 	add	fp, #8
21aa0     A7 FA 61 FC | 	wrlong	result1, fp
21aa4     08 4E 85 F1 | 	sub	fp, #8
21aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
21aac     E0 00 90 5D |  if_ne	jmp	#LR__3611
21ab0     04 4E 05 F1 | 	add	fp, #4
21ab4     A7 12 02 FB | 	rdlong	arg01, fp
21ab8     04 4E 85 F1 | 	sub	fp, #4
21abc     20 12 06 F1 | 	add	arg01, #32
21ac0     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
21ac4     FD 30 02 F6 | 	mov	local10, result1
21ac8     28 4E 05 F1 | 	add	fp, #40
21acc     A7 30 42 FC | 	wrbyte	local10, fp
21ad0     28 4E 85 F1 | 	sub	fp, #40
21ad4                 | ' 			sum = sum_sfn(dp->fn);
21ad4                 | ' 			do {
21ad4                 | LR__3608
21ad4     0C 4E 05 F1 | 	add	fp, #12
21ad8     A7 12 02 FB | 	rdlong	arg01, fp
21adc     08 4E 85 F1 | 	sub	fp, #8
21ae0     A7 1E 02 FB | 	rdlong	local01, fp
21ae4     04 4E 85 F1 | 	sub	fp, #4
21ae8     18 1E 06 F1 | 	add	local01, #24
21aec     0F 15 02 FB | 	rdlong	arg02, local01
21af0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
21af4     08 4E 05 F1 | 	add	fp, #8
21af8     A7 FA 61 FC | 	wrlong	result1, fp
21afc     00 FA 4D F2 | 	cmps	result1, #0 wz
21b00     08 4E 85 F1 | 	sub	fp, #8
21b04     88 00 90 5D |  if_ne	jmp	#LR__3610
21b08     0C 4E 05 F1 | 	add	fp, #12
21b0c     A7 20 02 FB | 	rdlong	local02, fp
21b10     0C 20 06 F1 | 	add	local02, #12
21b14     10 13 02 FB | 	rdlong	arg01, local02
21b18     08 4E 85 F1 | 	sub	fp, #8
21b1c     A7 1E 02 FB | 	rdlong	local01, fp
21b20     1C 1E 06 F1 | 	add	local01, #28
21b24     0F 15 02 FB | 	rdlong	arg02, local01
21b28     14 4E 05 F1 | 	add	fp, #20
21b2c     A7 16 02 FB | 	rdlong	arg03, fp
21b30     10 4E 05 F1 | 	add	fp, #16
21b34     A7 18 C2 FA | 	rdbyte	arg04, fp
21b38     28 4E 85 F1 | 	sub	fp, #40
21b3c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21b40     0C 4E 05 F1 | 	add	fp, #12
21b44     A7 30 02 FB | 	rdlong	local10, fp
21b48     03 30 06 F1 | 	add	local10, #3
21b4c     18 03 48 FC | 	wrbyte	#1, local10
21b50     08 4E 85 F1 | 	sub	fp, #8
21b54     A7 12 02 FB | 	rdlong	arg01, fp
21b58     04 4E 85 F1 | 	sub	fp, #4
21b5c     00 14 06 F6 | 	mov	arg02, #0
21b60     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
21b64     08 4E 05 F1 | 	add	fp, #8
21b68     A7 FA 61 FC | 	wrlong	result1, fp
21b6c     00 FA 4D F2 | 	cmps	result1, #0 wz
21b70     08 4E 85 F1 | 	sub	fp, #8
21b74     18 00 90 5D |  if_ne	jmp	#LR__3609
21b78     18 4E 05 F1 | 	add	fp, #24
21b7c     A7 30 02 FB | 	rdlong	local10, fp
21b80     01 30 8E F1 | 	sub	local10, #1 wz
21b84     A7 30 62 FC | 	wrlong	local10, fp
21b88     18 4E 85 F1 | 	sub	fp, #24
21b8c     44 FF 9F 5D |  if_ne	jmp	#LR__3608
21b90                 | LR__3609
21b90                 | LR__3610
21b90                 | LR__3611
21b90                 | LR__3612
21b90     08 4E 05 F1 | 	add	fp, #8
21b94     A7 30 0A FB | 	rdlong	local10, fp wz
21b98     08 4E 85 F1 | 	sub	fp, #8
21b9c     B4 00 90 5D |  if_ne	jmp	#LR__3614
21ba0     0C 4E 05 F1 | 	add	fp, #12
21ba4     A7 12 02 FB | 	rdlong	arg01, fp
21ba8     08 4E 85 F1 | 	sub	fp, #8
21bac     A7 1E 02 FB | 	rdlong	local01, fp
21bb0     04 4E 85 F1 | 	sub	fp, #4
21bb4     18 1E 06 F1 | 	add	local01, #24
21bb8     0F 15 02 FB | 	rdlong	arg02, local01
21bbc     18 E6 BF FD | 	call	#_fatfs_cc_move_window
21bc0     08 4E 05 F1 | 	add	fp, #8
21bc4     A7 FA 61 FC | 	wrlong	result1, fp
21bc8     08 4E 85 F1 | 	sub	fp, #8
21bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
21bd0     80 00 90 5D |  if_ne	jmp	#LR__3613
21bd4     04 4E 05 F1 | 	add	fp, #4
21bd8     A7 20 02 FB | 	rdlong	local02, fp
21bdc     04 4E 85 F1 | 	sub	fp, #4
21be0     1C 20 06 F1 | 	add	local02, #28
21be4     10 13 02 FB | 	rdlong	arg01, local02
21be8     00 14 06 F6 | 	mov	arg02, #0
21bec     20 16 06 F6 | 	mov	arg03, #32
21bf0     98 00 A0 FD | 	call	#\builtin_bytefill_
21bf4     04 4E 05 F1 | 	add	fp, #4
21bf8     A7 14 02 FB | 	rdlong	arg02, fp
21bfc     0A 1F 02 F6 | 	mov	local01, arg02
21c00     1C 1E 06 F1 | 	add	local01, #28
21c04     0F 13 02 FB | 	rdlong	arg01, local01
21c08     04 4E 85 F1 | 	sub	fp, #4
21c0c     20 14 06 F1 | 	add	arg02, #32
21c10     0B 16 06 F6 | 	mov	arg03, #11
21c14     DC 6E BF FD | 	call	#__system____builtin_memmove
21c18     04 4E 05 F1 | 	add	fp, #4
21c1c     A7 2E 02 FB | 	rdlong	local09, fp
21c20     17 31 02 F6 | 	mov	local10, local09
21c24     1C 30 06 F1 | 	add	local10, #28
21c28     18 1F 02 FB | 	rdlong	local01, local10
21c2c     2B 2E 06 F1 | 	add	local09, #43
21c30     17 31 C2 FA | 	rdbyte	local10, local09
21c34     18 30 06 F5 | 	and	local10, #24
21c38     0C 1E 06 F1 | 	add	local01, #12
21c3c     0F 31 42 FC | 	wrbyte	local10, local01
21c40     08 4E 05 F1 | 	add	fp, #8
21c44     A7 30 02 FB | 	rdlong	local10, fp
21c48     0C 4E 85 F1 | 	sub	fp, #12
21c4c     03 30 06 F1 | 	add	local10, #3
21c50     18 03 48 FC | 	wrbyte	#1, local10
21c54                 | LR__3613
21c54                 | LR__3614
21c54                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
21c54                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
21c54                 | ' 
21c54                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
21c54                 | ' 
21c54                 | ' 			fs->wflag = 1;
21c54                 | ' 		}
21c54                 | ' 	}
21c54                 | ' 
21c54                 | ' 	return res;
21c54     08 4E 05 F1 | 	add	fp, #8
21c58     A7 FA 01 FB | 	rdlong	result1, fp
21c5c     08 4E 85 F1 | 	sub	fp, #8
21c60                 | LR__3615
21c60     A7 F0 03 F6 | 	mov	ptra, fp
21c64     B2 00 A0 FD | 	call	#popregs_
21c68                 | _fatfs_cc_dir_register_ret
21c68     2D 00 64 FD | 	ret
21c6c                 | 
21c6c                 | _fatfs_cc_dir_remove
21c6c     05 4A 05 F6 | 	mov	COUNT_, #5
21c70     A8 00 A0 FD | 	call	#pushregs_
21c74     09 1F 02 F6 | 	mov	local01, arg01
21c78     0F 21 02 FB | 	rdlong	local02, local01
21c7c     10 1E 06 F1 | 	add	local01, #16
21c80     0F 23 02 FB | 	rdlong	local03, local01
21c84     1C 1E 06 F1 | 	add	local01, #28
21c88     0F 15 02 FB | 	rdlong	arg02, local01
21c8c     2C 1E 86 F1 | 	sub	local01, #44
21c90     FF FF 7F FF 
21c94     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
21c98     00 24 06 A6 |  if_e	mov	local04, #0
21c9c     18 00 90 AD |  if_e	jmp	#LR__3620
21ca0     0F 13 02 F6 | 	mov	arg01, local01
21ca4     2C 1E 06 F1 | 	add	local01, #44
21ca8     0F 15 02 FB | 	rdlong	arg02, local01
21cac     2C 1E 86 F1 | 	sub	local01, #44
21cb0     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
21cb4     FD 24 02 F6 | 	mov	local04, result1
21cb8                 | LR__3620
21cb8     12 27 0A F6 | 	mov	local05, local04 wz
21cbc     64 00 90 5D |  if_ne	jmp	#LR__3623
21cc0                 | ' 		do {
21cc0                 | LR__3621
21cc0     18 1E 06 F1 | 	add	local01, #24
21cc4     0F 15 02 FB | 	rdlong	arg02, local01
21cc8     18 1E 86 F1 | 	sub	local01, #24
21ccc     10 13 02 F6 | 	mov	arg01, local02
21cd0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
21cd4     FD 26 0A F6 | 	mov	local05, result1 wz
21cd8     40 00 90 5D |  if_ne	jmp	#LR__3622
21cdc     1C 1E 06 F1 | 	add	local01, #28
21ce0     0F 25 02 FB | 	rdlong	local04, local01
21ce4     12 CB 49 FC | 	wrbyte	#229, local04
21ce8     03 20 06 F1 | 	add	local02, #3
21cec     10 03 48 FC | 	wrbyte	#1, local02
21cf0     03 20 86 F1 | 	sub	local02, #3
21cf4     0C 1E 86 F1 | 	sub	local01, #12
21cf8     0F 25 02 FB | 	rdlong	local04, local01
21cfc     10 1E 86 F1 | 	sub	local01, #16
21d00     11 25 12 F2 | 	cmp	local04, local03 wc
21d04     14 00 90 3D |  if_ae	jmp	#LR__3622
21d08     0F 13 02 F6 | 	mov	arg01, local01
21d0c     00 14 06 F6 | 	mov	arg02, #0
21d10     90 EF BF FD | 	call	#_fatfs_cc_dir_next
21d14     FD 26 0A F6 | 	mov	local05, result1 wz
21d18     A4 FF 9F AD |  if_e	jmp	#LR__3621
21d1c                 | LR__3622
21d1c     04 26 0E F2 | 	cmp	local05, #4 wz
21d20     02 26 06 A6 |  if_e	mov	local05, #2
21d24                 | LR__3623
21d24                 | ' 	}
21d24                 | ' #line 2590 "ff.c"
21d24                 | ' 	return res;
21d24     13 FB 01 F6 | 	mov	result1, local05
21d28     A7 F0 03 F6 | 	mov	ptra, fp
21d2c     B2 00 A0 FD | 	call	#popregs_
21d30                 | _fatfs_cc_dir_remove_ret
21d30     2D 00 64 FD | 	ret
21d34                 | 
21d34                 | _fatfs_cc_get_fileinfo
21d34     0F 4A 05 F6 | 	mov	COUNT_, #15
21d38     A8 00 A0 FD | 	call	#pushregs_
21d3c     09 1F 02 F6 | 	mov	local01, arg01
21d40     0A 21 02 F6 | 	mov	local02, arg02
21d44     0F 23 02 FB | 	rdlong	local03, local01
21d48     1C 20 06 F1 | 	add	local02, #28
21d4c     10 01 48 FC | 	wrbyte	#0, local02
21d50     1C 20 86 F1 | 	sub	local02, #28
21d54     18 1E 06 F1 | 	add	local01, #24
21d58     0F 25 0A FB | 	rdlong	local04, local01 wz
21d5c     18 1E 86 F1 | 	sub	local01, #24
21d60     90 03 90 AD |  if_e	jmp	#LR__3644
21d64     2C 1E 06 F1 | 	add	local01, #44
21d68     0F 25 02 FB | 	rdlong	local04, local01
21d6c     2C 1E 86 F1 | 	sub	local01, #44
21d70     FF FF 7F FF 
21d74     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21d78     D8 00 90 AD |  if_e	jmp	#LR__3633
21d7c     00 26 06 F6 | 	mov	local05, #0
21d80     00 28 06 F6 | 	mov	local06, #0
21d84     00 2A 06 F6 | 	mov	local07, #0
21d88                 | ' 			si = di = 0;
21d88                 | ' 			hs = 0;
21d88                 | ' 			while (fs->lfnbuf[si] != 0) {
21d88                 | LR__3630
21d88     0C 22 06 F1 | 	add	local03, #12
21d8c     11 25 02 FB | 	rdlong	local04, local03
21d90     0C 22 86 F1 | 	sub	local03, #12
21d94     14 2D 02 F6 | 	mov	local08, local06
21d98     01 2C 66 F0 | 	shl	local08, #1
21d9c     12 2D 02 F1 | 	add	local08, local04
21da0     16 25 EA FA | 	rdword	local04, local08 wz
21da4     90 00 90 AD |  if_e	jmp	#LR__3632
21da8     0C 22 06 F1 | 	add	local03, #12
21dac     11 2F 02 FB | 	rdlong	local09, local03
21db0     0C 22 86 F1 | 	sub	local03, #12
21db4     14 31 02 F6 | 	mov	local10, local06
21db8     01 30 66 F0 | 	shl	local10, #1
21dbc     17 31 02 F1 | 	add	local10, local09
21dc0     18 33 E2 FA | 	rdword	local11, local10
21dc4     15 25 02 F6 | 	mov	local04, local07
21dc8     0F 24 4E F7 | 	zerox	local04, #15 wz
21dcc     01 28 06 F1 | 	add	local06, #1
21dd0     24 00 90 5D |  if_ne	jmp	#LR__3631
21dd4     19 35 32 F9 | 	getword	local12, local11, #0
21dd8     6C 00 00 FF 
21ddc     00 34 16 F2 | 	cmp	local12, ##55296 wc
21de0     14 00 90 CD |  if_b	jmp	#LR__3631
21de4     19 37 32 F9 | 	getword	local13, local11, #0
21de8     70 00 00 FF 
21dec     00 36 16 F2 | 	cmp	local13, ##57344 wc
21df0     19 2B 02 C6 |  if_b	mov	local07, local11
21df4                 | ' 					hs = wc; continue;
21df4     90 FF 9F CD |  if_b	jmp	#LR__3630
21df8                 | LR__3631
21df8     15 13 32 F9 | 	getword	arg01, local07, #0
21dfc     10 12 66 F0 | 	shl	arg01, #16
21e00     19 33 32 F9 | 	getword	local11, local11, #0
21e04     19 13 42 F5 | 	or	arg01, local11
21e08     13 15 02 F6 | 	mov	arg02, local05
21e0c     1C 20 06 F1 | 	add	local02, #28
21e10     10 15 02 F1 | 	add	arg02, local02
21e14     FF 16 06 F6 | 	mov	arg03, #255
21e18     13 17 82 F1 | 	sub	arg03, local05
21e1c     1C 20 86 F1 | 	sub	local02, #28
21e20     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
21e24     FD 38 0A F6 | 	mov	local14, result1 wz
21e28     00 26 06 A6 |  if_e	mov	local05, #0
21e2c     1C 27 02 51 |  if_ne	add	local05, local14
21e30     00 2A 06 56 |  if_ne	mov	local07, #0
21e34     50 FF 9F 5D |  if_ne	jmp	#LR__3630
21e38                 | LR__3632
21e38     15 25 02 F6 | 	mov	local04, local07
21e3c     0F 24 4E F7 | 	zerox	local04, #15 wz
21e40     00 26 06 56 |  if_ne	mov	local05, #0
21e44     1C 20 06 F1 | 	add	local02, #28
21e48     10 27 02 F1 | 	add	local05, local02
21e4c     13 01 48 FC | 	wrbyte	#0, local05
21e50     1C 20 86 F1 | 	sub	local02, #28
21e54                 | LR__3633
21e54     00 26 06 F6 | 	mov	local05, #0
21e58     00 28 06 F6 | 	mov	local06, #0
21e5c                 | ' 			fno->fname[di] = 0;
21e5c                 | ' 		}
21e5c                 | ' 	}
21e5c                 | ' 
21e5c                 | ' 	si = di = 0;
21e5c                 | ' 	while (si < 11) {
21e5c                 | LR__3634
21e5c     0B 28 16 F2 | 	cmp	local06, #11 wc
21e60     20 01 90 3D |  if_ae	jmp	#LR__3637
21e64     1C 1E 06 F1 | 	add	local01, #28
21e68     0F 2F 02 FB | 	rdlong	local09, local01
21e6c     1C 1E 86 F1 | 	sub	local01, #28
21e70     14 31 02 F6 | 	mov	local10, local06
21e74     17 31 02 F1 | 	add	local10, local09
21e78     18 33 C2 FA | 	rdbyte	local11, local10
21e7c     19 25 32 F9 | 	getword	local04, local11, #0
21e80     20 24 0E F2 | 	cmp	local04, #32 wz
21e84     01 28 06 F1 | 	add	local06, #1
21e88     D0 FF 9F AD |  if_e	jmp	#LR__3634
21e8c     19 25 32 F9 | 	getword	local04, local11, #0
21e90     05 24 0E F2 | 	cmp	local04, #5 wz
21e94     E5 32 06 A6 |  if_e	mov	local11, #229
21e98     09 28 0E F2 | 	cmp	local06, #9 wz
21e9c     20 00 90 5D |  if_ne	jmp	#LR__3635
21ea0     0C 26 16 F2 | 	cmp	local05, #12 wc
21ea4     18 00 90 3D |  if_ae	jmp	#LR__3635
21ea8     13 37 02 F6 | 	mov	local13, local05
21eac     0C 20 06 F1 | 	add	local02, #12
21eb0     10 37 02 F1 | 	add	local13, local02
21eb4     1B 5D 48 FC | 	wrbyte	#46, local13
21eb8     01 26 06 F1 | 	add	local05, #1
21ebc     0C 20 86 F1 | 	sub	local02, #12
21ec0                 | LR__3635
21ec0     19 13 32 F9 | 	getword	arg01, local11, #0
21ec4     07 12 4E F7 | 	zerox	arg01, #7 wz
21ec8     00 FA 05 56 |  if_ne	mov	result1, #0
21ecc                 | ' 
21ecc                 | ' 	return 0;
21ecc     00 FA 05 A6 |  if_e	mov	result1, #0
21ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
21ed4     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
21ed8     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
21edc     50 00 90 AD |  if_e	jmp	#LR__3636
21ee0     1C 1E 06 F1 | 	add	local01, #28
21ee4     0F 31 02 FB | 	rdlong	local10, local01
21ee8     1C 1E 86 F1 | 	sub	local01, #28
21eec     14 2D 02 F6 | 	mov	local08, local06
21ef0     18 2D 02 F1 | 	add	local08, local10
21ef4     16 13 CA FA | 	rdbyte	arg01, local08 wz
21ef8     00 FA 05 56 |  if_ne	mov	result1, #0
21efc                 | ' 
21efc                 | ' 	return 0;
21efc     00 FA 05 A6 |  if_e	mov	result1, #0
21f00     00 FA 0D F2 | 	cmp	result1, #0 wz
21f04     28 00 90 AD |  if_e	jmp	#LR__3636
21f08     19 33 32 F9 | 	getword	local11, local11, #0
21f0c     08 32 66 F0 | 	shl	local11, #8
21f10     1C 1E 06 F1 | 	add	local01, #28
21f14     0F 39 02 FB | 	rdlong	local14, local01
21f18     1C 1E 86 F1 | 	sub	local01, #28
21f1c     14 2F 02 F6 | 	mov	local09, local06
21f20     1C 2F 02 F1 | 	add	local09, local14
21f24     17 35 C2 FA | 	rdbyte	local12, local09
21f28     1A 33 42 F5 | 	or	local11, local12
21f2c     01 28 06 F1 | 	add	local06, #1
21f30                 | LR__3636
21f30     19 13 02 F6 | 	mov	arg01, local11
21f34     01 00 00 FF 
21f38     52 15 06 F6 | 	mov	arg02, ##850
21f3c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
21f40     FD 32 02 F6 | 	mov	local11, result1
21f44     19 25 02 F6 | 	mov	local04, local11
21f48     0F 24 4E F7 | 	zerox	local04, #15 wz
21f4c     00 26 06 A6 |  if_e	mov	local05, #0
21f50     30 00 90 AD |  if_e	jmp	#LR__3637
21f54     19 13 32 F9 | 	getword	arg01, local11, #0
21f58     13 15 02 F6 | 	mov	arg02, local05
21f5c     0C 20 06 F1 | 	add	local02, #12
21f60     10 15 02 F1 | 	add	arg02, local02
21f64     0C 16 06 F6 | 	mov	arg03, #12
21f68     13 17 82 F1 | 	sub	arg03, local05
21f6c     0C 20 86 F1 | 	sub	local02, #12
21f70     EC DF BF FD | 	call	#_fatfs_cc_put_utf
21f74     FD 38 0A F6 | 	mov	local14, result1 wz
21f78     00 26 06 A6 |  if_e	mov	local05, #0
21f7c     1C 27 02 51 |  if_ne	add	local05, local14
21f80     D8 FE 9F 5D |  if_ne	jmp	#LR__3634
21f84                 | LR__3637
21f84     13 25 02 F6 | 	mov	local04, local05
21f88     0C 20 06 F1 | 	add	local02, #12
21f8c     10 25 02 F1 | 	add	local04, local02
21f90     12 01 48 FC | 	wrbyte	#0, local04
21f94     10 20 06 F1 | 	add	local02, #16
21f98     10 25 CA FA | 	rdbyte	local04, local02 wz
21f9c     1C 20 86 F1 | 	sub	local02, #28
21fa0     F8 00 90 5D |  if_ne	jmp	#LR__3643
21fa4     00 26 0E F2 | 	cmp	local05, #0 wz
21fa8     1C 00 90 5D |  if_ne	jmp	#LR__3638
21fac     13 37 02 F6 | 	mov	local13, local05
21fb0     1C 20 06 F1 | 	add	local02, #28
21fb4     10 37 02 F1 | 	add	local13, local02
21fb8     1B 7F 48 FC | 	wrbyte	#63, local13
21fbc     01 26 06 F1 | 	add	local05, #1
21fc0     1C 20 86 F1 | 	sub	local02, #28
21fc4     A4 00 90 FD | 	jmp	#LR__3642
21fc8                 | LR__3638
21fc8                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
21fc8     00 26 06 F6 | 	mov	local05, #0
21fcc     00 28 06 F6 | 	mov	local06, #0
21fd0     08 3A 06 F6 | 	mov	local15, #8
21fd4                 | LR__3639
21fd4     14 25 02 F6 | 	mov	local04, local06
21fd8     0C 20 06 F1 | 	add	local02, #12
21fdc     10 25 02 F1 | 	add	local04, local02
21fe0     12 37 CA FA | 	rdbyte	local13, local04 wz
21fe4     0C 20 86 F1 | 	sub	local02, #12
21fe8     80 00 90 AD |  if_e	jmp	#LR__3641
21fec     14 2D 02 F6 | 	mov	local08, local06
21ff0     0C 20 06 F1 | 	add	local02, #12
21ff4     10 2D 02 F1 | 	add	local08, local02
21ff8     16 33 C2 FA | 	rdbyte	local11, local08
21ffc     19 39 32 F9 | 	getword	local14, local11, #0
22000     2E 38 0E F2 | 	cmp	local14, #46 wz
22004     0C 20 86 F1 | 	sub	local02, #12
22008     10 3A 06 A6 |  if_e	mov	local15, #16
2200c     19 39 32 F9 | 	getword	local14, local11, #0
22010     41 38 16 F2 | 	cmp	local14, #65 wc
22014     30 00 90 CD |  if_b	jmp	#LR__3640
22018     19 2D 32 F9 | 	getword	local08, local11, #0
2201c     5B 2C 16 F2 | 	cmp	local08, #91 wc
22020     24 00 90 3D |  if_ae	jmp	#LR__3640
22024     1C 1E 06 F1 | 	add	local01, #28
22028     0F 2F 02 FB | 	rdlong	local09, local01
2202c     1C 1E 86 F1 | 	sub	local01, #28
22030     0C 2E 06 F1 | 	add	local09, #12
22034     17 31 C2 FA | 	rdbyte	local10, local09
22038     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2203c     1C 31 CA F7 | 	test	local10, local14 wz
22040     19 33 32 59 |  if_ne	getword	local11, local11, #0
22044     20 32 06 51 |  if_ne	add	local11, #32
22048                 | LR__3640
22048     13 39 02 F6 | 	mov	local14, local05
2204c     1C 20 06 F1 | 	add	local02, #28
22050     10 39 02 F1 | 	add	local14, local02
22054     19 33 32 F9 | 	getword	local11, local11, #0
22058     1C 33 42 FC | 	wrbyte	local11, local14
2205c     01 28 06 F1 | 	add	local06, #1
22060     01 26 06 F1 | 	add	local05, #1
22064     1C 20 86 F1 | 	sub	local02, #28
22068     68 FF 9F FD | 	jmp	#LR__3639
2206c                 | LR__3641
2206c                 | LR__3642
2206c     1C 20 06 F1 | 	add	local02, #28
22070     10 27 02 F1 | 	add	local05, local02
22074     13 01 48 FC | 	wrbyte	#0, local05
22078     1C 1E 06 F1 | 	add	local01, #28
2207c     0F 25 02 FB | 	rdlong	local04, local01
22080     1C 1E 86 F1 | 	sub	local01, #28
22084     0C 24 06 F1 | 	add	local04, #12
22088     12 37 CA FA | 	rdbyte	local13, local04 wz
2208c     1C 20 86 F1 | 	sub	local02, #28
22090     0C 20 06 A1 |  if_e	add	local02, #12
22094     10 01 48 AC |  if_e	wrbyte	#0, local02
22098     0C 20 86 A1 |  if_e	sub	local02, #12
2209c                 | LR__3643
2209c     1C 1E 06 F1 | 	add	local01, #28
220a0     0F 35 02 FB | 	rdlong	local12, local01
220a4     0B 34 06 F1 | 	add	local12, #11
220a8     1A 25 C2 FA | 	rdbyte	local04, local12
220ac     3F 24 06 F5 | 	and	local04, #63
220b0     08 20 06 F1 | 	add	local02, #8
220b4     10 25 42 FC | 	wrbyte	local04, local02
220b8     08 20 86 F1 | 	sub	local02, #8
220bc     0F 13 02 FB | 	rdlong	arg01, local01
220c0     1C 12 06 F1 | 	add	arg01, #28
220c4                 | ' {
220c4                 | ' 
220c4                 | ' 	return *((DWORD*)ptr);
220c4     09 FB 01 FB | 	rdlong	result1, arg01
220c8     10 FB 61 FC | 	wrlong	result1, local02
220cc     0F 13 02 FB | 	rdlong	arg01, local01
220d0     16 12 06 F1 | 	add	arg01, #22
220d4                 | ' {
220d4                 | ' 
220d4                 | ' 	return *((WORD*)ptr);
220d4     09 FB E1 FA | 	rdword	result1, arg01
220d8     06 20 06 F1 | 	add	local02, #6
220dc     10 FB 51 FC | 	wrword	result1, local02
220e0     0F 13 02 FB | 	rdlong	arg01, local01
220e4     18 12 06 F1 | 	add	arg01, #24
220e8                 | ' {
220e8                 | ' 
220e8                 | ' 	return *((WORD*)ptr);
220e8     09 FB E1 FA | 	rdword	result1, arg01
220ec     02 20 86 F1 | 	sub	local02, #2
220f0     10 FB 51 FC | 	wrword	result1, local02
220f4                 | LR__3644
220f4     A7 F0 03 F6 | 	mov	ptra, fp
220f8     B2 00 A0 FD | 	call	#popregs_
220fc                 | _fatfs_cc_get_fileinfo_ret
220fc     2D 00 64 FD | 	ret
22100                 | 
22100                 | _fatfs_cc_create_name
22100     0D 4A 05 F6 | 	mov	COUNT_, #13
22104     A8 00 A0 FD | 	call	#pushregs_
22108     34 F0 07 F1 | 	add	ptra, #52
2210c     04 4E 05 F1 | 	add	fp, #4
22110     A7 12 62 FC | 	wrlong	arg01, fp
22114     04 4E 05 F1 | 	add	fp, #4
22118     A7 14 62 FC | 	wrlong	arg02, fp
2211c     0A FB 01 FB | 	rdlong	result1, arg02
22120     28 4E 05 F1 | 	add	fp, #40
22124     A7 FA 61 FC | 	wrlong	result1, fp
22128     2C 4E 85 F1 | 	sub	fp, #44
2212c     A7 FA 01 FB | 	rdlong	result1, fp
22130     FD 1E 02 FB | 	rdlong	local01, result1
22134     0C 1E 06 F1 | 	add	local01, #12
22138     0F 21 02 FB | 	rdlong	local02, local01
2213c     14 4E 05 F1 | 	add	fp, #20
22140     A7 20 62 FC | 	wrlong	local02, fp
22144     14 4E 05 F1 | 	add	fp, #20
22148     A7 00 68 FC | 	wrlong	#0, fp
2214c     2C 4E 85 F1 | 	sub	fp, #44
22150                 | ' 
22150                 | ' 
22150                 | ' 
22150                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
22150                 | ' 	for (;;) {
22150                 | LR__3650
22150     30 4E 05 F1 | 	add	fp, #48
22154     A7 12 02 F6 | 	mov	arg01, fp
22158     30 4E 85 F1 | 	sub	fp, #48
2215c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
22160     1C 4E 05 F1 | 	add	fp, #28
22164     A7 FA 61 FC | 	wrlong	result1, fp
22168     1C 4E 85 F1 | 	sub	fp, #28
2216c     FF FF 7F FF 
22170     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22174     06 FA 05 A6 |  if_e	mov	result1, #6
22178     74 08 90 AD |  if_e	jmp	#LR__3690
2217c     1C 4E 05 F1 | 	add	fp, #28
22180     A7 1E 02 FB | 	rdlong	local01, fp
22184     1C 4E 85 F1 | 	sub	fp, #28
22188     80 00 00 FF 
2218c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
22190     3C 00 90 CD |  if_b	jmp	#LR__3651
22194     18 4E 05 F1 | 	add	fp, #24
22198     A7 22 02 FB | 	rdlong	local03, fp
2219c     14 4E 05 F1 | 	add	fp, #20
221a0     A7 1E 02 FB | 	rdlong	local01, fp
221a4     0F 25 02 F6 | 	mov	local04, local01
221a8     01 24 06 F1 | 	add	local04, #1
221ac     A7 24 62 FC | 	wrlong	local04, fp
221b0     01 1E 66 F0 | 	shl	local01, #1
221b4     11 1F 02 F1 | 	add	local01, local03
221b8     10 4E 85 F1 | 	sub	fp, #16
221bc     A7 26 02 FB | 	rdlong	local05, fp
221c0     1C 4E 85 F1 | 	sub	fp, #28
221c4     13 29 02 F6 | 	mov	local06, local05
221c8     10 28 46 F0 | 	shr	local06, #16
221cc     0F 29 52 FC | 	wrword	local06, local01
221d0                 | LR__3651
221d0     1C 4E 05 F1 | 	add	fp, #28
221d4     A7 1E 02 FB | 	rdlong	local01, fp
221d8     08 4E 85 F1 | 	sub	fp, #8
221dc     A7 1E 52 FC | 	wrword	local01, fp
221e0     A7 1E E2 FA | 	rdword	local01, fp
221e4     14 4E 85 F1 | 	sub	fp, #20
221e8     20 1E 16 F2 | 	cmp	local01, #32 wc
221ec     B0 00 90 CD |  if_b	jmp	#LR__3653
221f0     14 4E 05 F1 | 	add	fp, #20
221f4     A7 1E E2 FA | 	rdword	local01, fp
221f8     14 4E 85 F1 | 	sub	fp, #20
221fc     2F 1E 0E F2 | 	cmp	local01, #47 wz
22200     14 4E 05 51 |  if_ne	add	fp, #20
22204     A7 24 E2 5A |  if_ne	rdword	local04, fp
22208     14 4E 85 51 |  if_ne	sub	fp, #20
2220c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
22210     8C 00 90 AD |  if_e	jmp	#LR__3653
22214     14 4E 05 F1 | 	add	fp, #20
22218     A7 12 E2 FA | 	rdword	arg01, fp
2221c     14 4E 85 F1 | 	sub	fp, #20
22220     80 12 16 F2 | 	cmp	arg01, #128 wc
22224     24 00 90 3D |  if_ae	jmp	#LR__3652
22228     40 01 00 FF 
2222c     58 13 06 F6 | 	mov	arg01, ##@LR__4312
22230     14 4E 05 F1 | 	add	fp, #20
22234     A7 14 E2 FA | 	rdword	arg02, fp
22238     14 4E 85 F1 | 	sub	fp, #20
2223c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
22240     00 FA 0D F2 | 	cmp	result1, #0 wz
22244     06 FA 05 56 |  if_ne	mov	result1, #6
22248     A4 07 90 5D |  if_ne	jmp	#LR__3690
2224c                 | LR__3652
2224c     2C 4E 05 F1 | 	add	fp, #44
22250     A7 28 02 FB | 	rdlong	local06, fp
22254     2C 4E 85 F1 | 	sub	fp, #44
22258     FF 28 16 F2 | 	cmp	local06, #255 wc
2225c     06 FA 05 36 |  if_ae	mov	result1, #6
22260     8C 07 90 3D |  if_ae	jmp	#LR__3690
22264     18 4E 05 F1 | 	add	fp, #24
22268     A7 22 02 FB | 	rdlong	local03, fp
2226c     14 4E 05 F1 | 	add	fp, #20
22270     A7 20 02 FB | 	rdlong	local02, fp
22274     10 25 02 F6 | 	mov	local04, local02
22278     01 24 06 F1 | 	add	local04, #1
2227c     A7 24 62 FC | 	wrlong	local04, fp
22280     10 1F 02 F6 | 	mov	local01, local02
22284     01 1E 66 F0 | 	shl	local01, #1
22288     11 1F 02 F1 | 	add	local01, local03
2228c     18 4E 85 F1 | 	sub	fp, #24
22290     A7 28 E2 FA | 	rdword	local06, fp
22294     14 4E 85 F1 | 	sub	fp, #20
22298     0F 29 52 FC | 	wrword	local06, local01
2229c     B0 FE 9F FD | 	jmp	#LR__3650
222a0                 | LR__3653
222a0     14 4E 05 F1 | 	add	fp, #20
222a4     A7 2A E2 FA | 	rdword	local07, fp
222a8     14 4E 85 F1 | 	sub	fp, #20
222ac     20 2A 16 F2 | 	cmp	local07, #32 wc
222b0     10 4E 05 C1 |  if_b	add	fp, #16
222b4     A7 08 48 CC |  if_b	wrbyte	#4, fp
222b8     10 4E 85 C1 |  if_b	sub	fp, #16
222bc     74 00 90 CD |  if_b	jmp	#LR__3658
222c0     97 24 48 FB | 	callpa	#(@LR__3656-@LR__3654)>>2,fcache_load_ptr_
222c4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
222c4                 | LR__3654
222c4     30 4E 05 F1 | 	add	fp, #48
222c8     A7 24 02 FB | 	rdlong	local04, fp
222cc     30 4E 85 F1 | 	sub	fp, #48
222d0     12 2B C2 FA | 	rdbyte	local07, local04
222d4     2F 2A 0E F2 | 	cmp	local07, #47 wz
222d8     18 00 90 AD |  if_e	jmp	#LR__3655
222dc     30 4E 05 F1 | 	add	fp, #48
222e0     A7 24 02 FB | 	rdlong	local04, fp
222e4     30 4E 85 F1 | 	sub	fp, #48
222e8     12 21 C2 FA | 	rdbyte	local02, local04
222ec     5C 20 0E F2 | 	cmp	local02, #92 wz
222f0     18 00 90 5D |  if_ne	jmp	#LR__3657
222f4                 | LR__3655
222f4     30 4E 05 F1 | 	add	fp, #48
222f8     A7 1E 02 FB | 	rdlong	local01, fp
222fc     01 1E 06 F1 | 	add	local01, #1
22300     A7 1E 62 FC | 	wrlong	local01, fp
22304     30 4E 85 F1 | 	sub	fp, #48
22308     B8 FF 9F FD | 	jmp	#LR__3654
2230c                 | LR__3656
2230c                 | LR__3657
2230c     10 4E 05 F1 | 	add	fp, #16
22310     A7 00 48 FC | 	wrbyte	#0, fp
22314     20 4E 05 F1 | 	add	fp, #32
22318     A7 28 02 FB | 	rdlong	local06, fp
2231c     30 4E 85 F1 | 	sub	fp, #48
22320     14 2B C2 FA | 	rdbyte	local07, local06
22324     20 2A 16 F2 | 	cmp	local07, #32 wc
22328     10 4E 05 C1 |  if_b	add	fp, #16
2232c     A7 08 48 CC |  if_b	wrbyte	#4, fp
22330     10 4E 85 C1 |  if_b	sub	fp, #16
22334                 | LR__3658
22334     08 4E 05 F1 | 	add	fp, #8
22338     A7 2A 02 FB | 	rdlong	local07, fp
2233c     28 4E 05 F1 | 	add	fp, #40
22340     A7 1E 02 FB | 	rdlong	local01, fp
22344     30 4E 85 F1 | 	sub	fp, #48
22348     15 1F 62 FC | 	wrlong	local01, local07
2234c     97 38 48 FB | 	callpa	#(@LR__3660-@LR__3659)>>2,fcache_load_ptr_
22350                 | ' 	}
22350                 | ' 	*path = p;
22350                 | ' #line 2862 "ff.c"
22350                 | ' 	while (di) {
22350                 | LR__3659
22350     2C 4E 05 F1 | 	add	fp, #44
22354     A7 2A 0A FB | 	rdlong	local07, fp wz
22358     2C 4E 85 F1 | 	sub	fp, #44
2235c     60 00 90 AD |  if_e	jmp	#LR__3661
22360     18 4E 05 F1 | 	add	fp, #24
22364     A7 28 02 FB | 	rdlong	local06, fp
22368     14 4E 05 F1 | 	add	fp, #20
2236c     A7 24 02 FB | 	rdlong	local04, fp
22370     01 24 86 F1 | 	sub	local04, #1
22374     01 24 66 F0 | 	shl	local04, #1
22378     14 25 02 F1 | 	add	local04, local06
2237c     12 29 E2 FA | 	rdword	local06, local04
22380     18 4E 85 F1 | 	sub	fp, #24
22384     A7 28 52 FC | 	wrword	local06, fp
22388     A7 2A E2 FA | 	rdword	local07, fp
2238c     14 4E 85 F1 | 	sub	fp, #20
22390     20 2A 0E F2 | 	cmp	local07, #32 wz
22394     14 4E 05 51 |  if_ne	add	fp, #20
22398     A7 1E E2 5A |  if_ne	rdword	local01, fp
2239c     14 4E 85 51 |  if_ne	sub	fp, #20
223a0     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
223a4     18 00 90 5D |  if_ne	jmp	#LR__3661
223a8     2C 4E 05 F1 | 	add	fp, #44
223ac     A7 1E 02 FB | 	rdlong	local01, fp
223b0     01 1E 86 F1 | 	sub	local01, #1
223b4     A7 1E 62 FC | 	wrlong	local01, fp
223b8     2C 4E 85 F1 | 	sub	fp, #44
223bc     90 FF 9F FD | 	jmp	#LR__3659
223c0                 | LR__3660
223c0                 | LR__3661
223c0     18 4E 05 F1 | 	add	fp, #24
223c4     A7 2C 02 FB | 	rdlong	local08, fp
223c8     14 4E 05 F1 | 	add	fp, #20
223cc     A7 24 02 FB | 	rdlong	local04, fp
223d0     01 24 66 F0 | 	shl	local04, #1
223d4     16 25 02 F1 | 	add	local04, local08
223d8     12 01 58 FC | 	wrword	#0, local04
223dc     A7 2A 0A FB | 	rdlong	local07, fp wz
223e0     2C 4E 85 F1 | 	sub	fp, #44
223e4     06 FA 05 A6 |  if_e	mov	result1, #6
223e8     04 06 90 AD |  if_e	jmp	#LR__3690
223ec                 | ' 
223ec                 | ' 
223ec                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
223ec     28 4E 05 F1 | 	add	fp, #40
223f0     A7 00 68 FC | 	wrlong	#0, fp
223f4     28 4E 85 F1 | 	sub	fp, #40
223f8     97 22 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
223fc                 | LR__3662
223fc     18 4E 05 F1 | 	add	fp, #24
22400     A7 2E 02 FB | 	rdlong	local09, fp
22404     10 4E 05 F1 | 	add	fp, #16
22408     A7 30 02 FB | 	rdlong	local10, fp
2240c     28 4E 85 F1 | 	sub	fp, #40
22410     01 30 66 F0 | 	shl	local10, #1
22414     17 31 02 F1 | 	add	local10, local09
22418     18 33 E2 FA | 	rdword	local11, local10
2241c     20 32 0E F2 | 	cmp	local11, #32 wz
22420     1C 00 90 5D |  if_ne	jmp	#LR__3664
22424     28 4E 05 F1 | 	add	fp, #40
22428     A7 34 02 FB | 	rdlong	local12, fp
2242c     1A 27 02 F6 | 	mov	local05, local12
22430     01 26 06 F1 | 	add	local05, #1
22434     A7 26 62 FC | 	wrlong	local05, fp
22438     28 4E 85 F1 | 	sub	fp, #40
2243c     BC FF 9F FD | 	jmp	#LR__3662
22440                 | LR__3663
22440                 | LR__3664
22440     28 4E 05 F1 | 	add	fp, #40
22444     A7 2A 02 FB | 	rdlong	local07, fp
22448     28 4E 85 F1 | 	sub	fp, #40
2244c     01 2A 16 F2 | 	cmp	local07, #1 wc
22450     28 00 90 3D |  if_ae	jmp	#LR__3665
22454     18 4E 05 F1 | 	add	fp, #24
22458     A7 22 02 FB | 	rdlong	local03, fp
2245c     10 4E 05 F1 | 	add	fp, #16
22460     A7 2E 02 FB | 	rdlong	local09, fp
22464     28 4E 85 F1 | 	sub	fp, #40
22468     01 2E 66 F0 | 	shl	local09, #1
2246c     11 2F 02 F1 | 	add	local09, local03
22470     17 1F E2 FA | 	rdword	local01, local09
22474     2E 1E 0E F2 | 	cmp	local01, #46 wz
22478     14 00 90 5D |  if_ne	jmp	#LR__3666
2247c                 | LR__3665
2247c     10 4E 05 F1 | 	add	fp, #16
22480     A7 2A C2 FA | 	rdbyte	local07, fp
22484     03 2A 46 F5 | 	or	local07, #3
22488     A7 2A 42 FC | 	wrbyte	local07, fp
2248c     10 4E 85 F1 | 	sub	fp, #16
22490                 | LR__3666
22490     97 2C 48 FB | 	callpa	#(@LR__3668-@LR__3667)>>2,fcache_load_ptr_
22494                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
22494                 | LR__3667
22494     2C 4E 05 F1 | 	add	fp, #44
22498     A7 2A 02 FB | 	rdlong	local07, fp
2249c     2C 4E 85 F1 | 	sub	fp, #44
224a0     01 2A 16 F2 | 	cmp	local07, #1 wc
224a4     44 00 90 CD |  if_b	jmp	#LR__3669
224a8     18 4E 05 F1 | 	add	fp, #24
224ac     A7 28 02 FB | 	rdlong	local06, fp
224b0     14 4E 05 F1 | 	add	fp, #20
224b4     A7 22 02 FB | 	rdlong	local03, fp
224b8     2C 4E 85 F1 | 	sub	fp, #44
224bc     01 22 86 F1 | 	sub	local03, #1
224c0     01 22 66 F0 | 	shl	local03, #1
224c4     14 23 02 F1 | 	add	local03, local06
224c8     11 1F E2 FA | 	rdword	local01, local03
224cc     2E 1E 0E F2 | 	cmp	local01, #46 wz
224d0     18 00 90 AD |  if_e	jmp	#LR__3669
224d4     2C 4E 05 F1 | 	add	fp, #44
224d8     A7 1E 02 FB | 	rdlong	local01, fp
224dc     01 1E 86 F1 | 	sub	local01, #1
224e0     A7 1E 62 FC | 	wrlong	local01, fp
224e4     2C 4E 85 F1 | 	sub	fp, #44
224e8     A8 FF 9F FD | 	jmp	#LR__3667
224ec                 | LR__3668
224ec                 | LR__3669
224ec     04 4E 05 F1 | 	add	fp, #4
224f0     A7 12 02 FB | 	rdlong	arg01, fp
224f4     04 4E 85 F1 | 	sub	fp, #4
224f8     20 12 06 F1 | 	add	arg01, #32
224fc     20 14 06 F6 | 	mov	arg02, #32
22500     0B 16 06 F6 | 	mov	arg03, #11
22504     09 37 02 F6 | 	mov	local13, arg01
22508     98 00 A0 FD | 	call	#\builtin_bytefill_
2250c     1B FB 01 F6 | 	mov	result1, local13
22510     0C 4E 05 F1 | 	add	fp, #12
22514     A7 00 48 FC | 	wrbyte	#0, fp
22518     A7 2A C2 FA | 	rdbyte	local07, fp
2251c     14 4E 05 F1 | 	add	fp, #20
22520     A7 2A 62 FC | 	wrlong	local07, fp
22524     04 4E 05 F1 | 	add	fp, #4
22528     A7 10 68 FC | 	wrlong	#8, fp
2252c     24 4E 85 F1 | 	sub	fp, #36
22530                 | ' 
22530                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22530                 | ' 	i = b = 0; ni = 8;
22530                 | ' 	for (;;) {
22530                 | LR__3670
22530     18 4E 05 F1 | 	add	fp, #24
22534     A7 22 02 FB | 	rdlong	local03, fp
22538     10 4E 05 F1 | 	add	fp, #16
2253c     A7 2E 02 FB | 	rdlong	local09, fp
22540     17 25 02 F6 | 	mov	local04, local09
22544     01 24 06 F1 | 	add	local04, #1
22548     A7 24 62 FC | 	wrlong	local04, fp
2254c     01 2E 66 F0 | 	shl	local09, #1
22550     11 2F 02 F1 | 	add	local09, local03
22554     17 29 E2 FA | 	rdword	local06, local09
22558     14 4E 85 F1 | 	sub	fp, #20
2255c     A7 28 52 FC | 	wrword	local06, fp
22560     A7 2A EA FA | 	rdword	local07, fp wz
22564     14 4E 85 F1 | 	sub	fp, #20
22568     74 03 90 AD |  if_e	jmp	#LR__3686
2256c     14 4E 05 F1 | 	add	fp, #20
22570     A7 2A E2 FA | 	rdword	local07, fp
22574     14 4E 85 F1 | 	sub	fp, #20
22578     20 2A 0E F2 | 	cmp	local07, #32 wz
2257c     30 00 90 AD |  if_e	jmp	#LR__3671
22580     14 4E 05 F1 | 	add	fp, #20
22584     A7 1E E2 FA | 	rdword	local01, fp
22588     14 4E 85 F1 | 	sub	fp, #20
2258c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22590     34 00 90 5D |  if_ne	jmp	#LR__3672
22594     28 4E 05 F1 | 	add	fp, #40
22598     A7 24 02 FB | 	rdlong	local04, fp
2259c     04 4E 05 F1 | 	add	fp, #4
225a0     A7 30 02 FB | 	rdlong	local10, fp
225a4     2C 4E 85 F1 | 	sub	fp, #44
225a8     18 25 0A F2 | 	cmp	local04, local10 wz
225ac     18 00 90 AD |  if_e	jmp	#LR__3672
225b0                 | LR__3671
225b0     10 4E 05 F1 | 	add	fp, #16
225b4     A7 2A C2 FA | 	rdbyte	local07, fp
225b8     03 2A 46 F5 | 	or	local07, #3
225bc     A7 2A 42 FC | 	wrbyte	local07, fp
225c0     10 4E 85 F1 | 	sub	fp, #16
225c4                 | ' 			cf |=  0x01  |  0x02 ;
225c4                 | ' 			continue;
225c4     68 FF 9F FD | 	jmp	#LR__3670
225c8                 | LR__3672
225c8     20 4E 05 F1 | 	add	fp, #32
225cc     A7 2A 02 FB | 	rdlong	local07, fp
225d0     04 4E 05 F1 | 	add	fp, #4
225d4     A7 1E 02 FB | 	rdlong	local01, fp
225d8     24 4E 85 F1 | 	sub	fp, #36
225dc     0F 2B 12 F2 | 	cmp	local07, local01 wc
225e0     1C 00 90 3D |  if_ae	jmp	#LR__3673
225e4     28 4E 05 F1 | 	add	fp, #40
225e8     A7 2C 02 FB | 	rdlong	local08, fp
225ec     04 4E 05 F1 | 	add	fp, #4
225f0     A7 30 02 FB | 	rdlong	local10, fp
225f4     2C 4E 85 F1 | 	sub	fp, #44
225f8     18 2D 0A F2 | 	cmp	local08, local10 wz
225fc     B0 00 90 5D |  if_ne	jmp	#LR__3675
22600                 | LR__3673
22600     24 4E 05 F1 | 	add	fp, #36
22604     A7 2A 02 FB | 	rdlong	local07, fp
22608     24 4E 85 F1 | 	sub	fp, #36
2260c     0B 2A 0E F2 | 	cmp	local07, #11 wz
22610     18 00 90 5D |  if_ne	jmp	#LR__3674
22614     10 4E 05 F1 | 	add	fp, #16
22618     A7 2A C2 FA | 	rdbyte	local07, fp
2261c     03 2A 46 F5 | 	or	local07, #3
22620     A7 2A 42 FC | 	wrbyte	local07, fp
22624     10 4E 85 F1 | 	sub	fp, #16
22628                 | ' 				cf |=  0x01  |  0x02 ;
22628                 | ' 				break;
22628     B4 02 90 FD | 	jmp	#LR__3686
2262c                 | LR__3674
2262c     28 4E 05 F1 | 	add	fp, #40
22630     A7 2A 02 FB | 	rdlong	local07, fp
22634     04 4E 05 F1 | 	add	fp, #4
22638     A7 1E 02 FB | 	rdlong	local01, fp
2263c     2C 4E 85 F1 | 	sub	fp, #44
22640     0F 2B 0A F2 | 	cmp	local07, local01 wz
22644     10 4E 05 51 |  if_ne	add	fp, #16
22648     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2264c     03 2A 46 55 |  if_ne	or	local07, #3
22650     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
22654     10 4E 85 51 |  if_ne	sub	fp, #16
22658     28 4E 05 F1 | 	add	fp, #40
2265c     A7 2A 02 FB | 	rdlong	local07, fp
22660     04 4E 05 F1 | 	add	fp, #4
22664     A7 20 02 FB | 	rdlong	local02, fp
22668     2C 4E 85 F1 | 	sub	fp, #44
2266c     10 2B 1A F2 | 	cmp	local07, local02 wcz
22670     6C 02 90 1D |  if_a	jmp	#LR__3686
22674     2C 4E 05 F1 | 	add	fp, #44
22678     A7 2A 02 FB | 	rdlong	local07, fp
2267c     04 4E 85 F1 | 	sub	fp, #4
22680     A7 2A 62 FC | 	wrlong	local07, fp
22684     08 4E 85 F1 | 	sub	fp, #8
22688     A7 10 68 FC | 	wrlong	#8, fp
2268c     04 4E 05 F1 | 	add	fp, #4
22690     A7 16 68 FC | 	wrlong	#11, fp
22694     18 4E 85 F1 | 	sub	fp, #24
22698     A7 32 C2 FA | 	rdbyte	local11, fp
2269c     19 2B E2 F8 | 	getbyte	local07, local11, #0
226a0     02 2A 66 F0 | 	shl	local07, #2
226a4     A7 2A 42 FC | 	wrbyte	local07, fp
226a8     0C 4E 85 F1 | 	sub	fp, #12
226ac                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
226ac                 | ' 			continue;
226ac     80 FE 9F FD | 	jmp	#LR__3670
226b0                 | LR__3675
226b0     14 4E 05 F1 | 	add	fp, #20
226b4     A7 2A E2 FA | 	rdword	local07, fp
226b8     14 4E 85 F1 | 	sub	fp, #20
226bc     80 2A 16 F2 | 	cmp	local07, #128 wc
226c0     6C 00 90 CD |  if_b	jmp	#LR__3677
226c4     10 4E 05 F1 | 	add	fp, #16
226c8     A7 2A C2 FA | 	rdbyte	local07, fp
226cc     02 2A 46 F5 | 	or	local07, #2
226d0     A7 2A 42 FC | 	wrbyte	local07, fp
226d4     04 4E 05 F1 | 	add	fp, #4
226d8     A7 12 E2 FA | 	rdword	arg01, fp
226dc     14 4E 85 F1 | 	sub	fp, #20
226e0     01 00 00 FF 
226e4     52 15 06 F6 | 	mov	arg02, ##850
226e8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
226ec     14 4E 05 F1 | 	add	fp, #20
226f0     A7 FA 51 FC | 	wrword	result1, fp
226f4     A7 2A E2 FA | 	rdword	local07, fp
226f8     14 4E 85 F1 | 	sub	fp, #20
226fc     80 2A CE F7 | 	test	local07, #128 wz
22700     2C 00 90 AD |  if_e	jmp	#LR__3676
22704     14 4E 05 F1 | 	add	fp, #20
22708     A7 20 E2 FA | 	rdword	local02, fp
2270c     7F 20 06 F5 | 	and	local02, #127
22710     01 00 00 FF 
22714     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
22718     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2271c     10 2B C2 FA | 	rdbyte	local07, local02
22720     A7 2A 52 FC | 	wrword	local07, fp
22724     14 4E 85 F1 | 	sub	fp, #20
22728     01 00 00 FF 
2272c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22730                 | LR__3676
22730                 | LR__3677
22730     14 4E 05 F1 | 	add	fp, #20
22734     A7 2A E2 FA | 	rdword	local07, fp
22738     14 4E 85 F1 | 	sub	fp, #20
2273c     00 2B 16 F2 | 	cmp	local07, #256 wc
22740     88 00 90 CD |  if_b	jmp	#LR__3679
22744     24 4E 05 F1 | 	add	fp, #36
22748     A7 2A 02 FB | 	rdlong	local07, fp
2274c     01 2A 86 F1 | 	sub	local07, #1
22750     04 4E 85 F1 | 	sub	fp, #4
22754     A7 20 02 FB | 	rdlong	local02, fp
22758     20 4E 85 F1 | 	sub	fp, #32
2275c     15 21 12 F2 | 	cmp	local02, local07 wc
22760     2C 00 90 CD |  if_b	jmp	#LR__3678
22764     10 4E 05 F1 | 	add	fp, #16
22768     A7 32 C2 FA | 	rdbyte	local11, fp
2276c     19 2B E2 F8 | 	getbyte	local07, local11, #0
22770     03 2A 46 F5 | 	or	local07, #3
22774     A7 2A 42 FC | 	wrbyte	local07, fp
22778     14 4E 05 F1 | 	add	fp, #20
2277c     A7 2A 02 FB | 	rdlong	local07, fp
22780     04 4E 85 F1 | 	sub	fp, #4
22784     A7 2A 62 FC | 	wrlong	local07, fp
22788     20 4E 85 F1 | 	sub	fp, #32
2278c                 | ' 				cf |=  0x01  |  0x02 ;
2278c                 | ' 				i = ni; continue;
2278c     A0 FD 9F FD | 	jmp	#LR__3670
22790                 | LR__3678
22790     04 4E 05 F1 | 	add	fp, #4
22794     A7 2E 02 FB | 	rdlong	local09, fp
22798     1C 4E 05 F1 | 	add	fp, #28
2279c     A7 30 02 FB | 	rdlong	local10, fp
227a0     18 25 02 F6 | 	mov	local04, local10
227a4     01 24 06 F1 | 	add	local04, #1
227a8     A7 24 62 FC | 	wrlong	local04, fp
227ac     20 2E 06 F1 | 	add	local09, #32
227b0     17 31 02 F1 | 	add	local10, local09
227b4     0C 4E 85 F1 | 	sub	fp, #12
227b8     A7 22 E2 FA | 	rdword	local03, fp
227bc     14 4E 85 F1 | 	sub	fp, #20
227c0     08 22 46 F0 | 	shr	local03, #8
227c4     18 23 42 FC | 	wrbyte	local03, local10
227c8     D4 00 90 FD | 	jmp	#LR__3685
227cc                 | LR__3679
227cc     14 4E 05 F1 | 	add	fp, #20
227d0     A7 2A EA FA | 	rdword	local07, fp wz
227d4     14 4E 85 F1 | 	sub	fp, #20
227d8     20 00 90 AD |  if_e	jmp	#LR__3680
227dc     40 01 00 FF 
227e0     61 13 06 F6 | 	mov	arg01, ##@LR__4313
227e4     14 4E 05 F1 | 	add	fp, #20
227e8     A7 14 E2 FA | 	rdword	arg02, fp
227ec     14 4E 85 F1 | 	sub	fp, #20
227f0     48 CB BF FD | 	call	#_fatfs_cc_strchr
227f4     00 FA 0D F2 | 	cmp	result1, #0 wz
227f8     20 00 90 AD |  if_e	jmp	#LR__3681
227fc                 | LR__3680
227fc     14 4E 05 F1 | 	add	fp, #20
22800     A7 BE 58 FC | 	wrword	#95, fp
22804     04 4E 85 F1 | 	sub	fp, #4
22808     A7 2A C2 FA | 	rdbyte	local07, fp
2280c     03 2A 46 F5 | 	or	local07, #3
22810     A7 2A 42 FC | 	wrbyte	local07, fp
22814     10 4E 85 F1 | 	sub	fp, #16
22818     84 00 90 FD | 	jmp	#LR__3684
2281c                 | LR__3681
2281c     14 4E 05 F1 | 	add	fp, #20
22820     A7 2A E2 FA | 	rdword	local07, fp
22824     14 4E 85 F1 | 	sub	fp, #20
22828     41 2A 16 F2 | 	cmp	local07, #65 wc
2282c     24 00 90 CD |  if_b	jmp	#LR__3682
22830     14 4E 05 F1 | 	add	fp, #20
22834     A7 1E E2 FA | 	rdword	local01, fp
22838     14 4E 85 F1 | 	sub	fp, #20
2283c     5B 1E 16 F2 | 	cmp	local01, #91 wc
22840     0C 4E 05 C1 |  if_b	add	fp, #12
22844     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22848     02 2A 46 C5 |  if_b	or	local07, #2
2284c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22850     0C 4E 85 C1 |  if_b	sub	fp, #12
22854                 | LR__3682
22854     14 4E 05 F1 | 	add	fp, #20
22858     A7 2A E2 FA | 	rdword	local07, fp
2285c     14 4E 85 F1 | 	sub	fp, #20
22860     61 2A 16 F2 | 	cmp	local07, #97 wc
22864     38 00 90 CD |  if_b	jmp	#LR__3683
22868     14 4E 05 F1 | 	add	fp, #20
2286c     A7 1E E2 FA | 	rdword	local01, fp
22870     14 4E 85 F1 | 	sub	fp, #20
22874     7B 1E 16 F2 | 	cmp	local01, #123 wc
22878     24 00 90 3D |  if_ae	jmp	#LR__3683
2287c     0C 4E 05 F1 | 	add	fp, #12
22880     A7 2A C2 FA | 	rdbyte	local07, fp
22884     01 2A 46 F5 | 	or	local07, #1
22888     A7 2A 42 FC | 	wrbyte	local07, fp
2288c     08 4E 05 F1 | 	add	fp, #8
22890     A7 2A E2 FA | 	rdword	local07, fp
22894     20 2A 86 F1 | 	sub	local07, #32
22898     A7 2A 52 FC | 	wrword	local07, fp
2289c     14 4E 85 F1 | 	sub	fp, #20
228a0                 | LR__3683
228a0                 | LR__3684
228a0                 | LR__3685
228a0     04 4E 05 F1 | 	add	fp, #4
228a4     A7 32 02 FB | 	rdlong	local11, fp
228a8     19 2F 02 F6 | 	mov	local09, local11
228ac     1C 4E 05 F1 | 	add	fp, #28
228b0     A7 20 02 FB | 	rdlong	local02, fp
228b4     10 25 02 F6 | 	mov	local04, local02
228b8     01 24 06 F1 | 	add	local04, #1
228bc     A7 24 62 FC | 	wrlong	local04, fp
228c0     10 31 02 F6 | 	mov	local10, local02
228c4     20 2E 06 F1 | 	add	local09, #32
228c8     17 31 02 F1 | 	add	local10, local09
228cc     0C 4E 85 F1 | 	sub	fp, #12
228d0     A7 22 E2 FA | 	rdword	local03, fp
228d4     14 4E 85 F1 | 	sub	fp, #20
228d8     18 23 42 FC | 	wrbyte	local03, local10
228dc     50 FC 9F FD | 	jmp	#LR__3670
228e0                 | LR__3686
228e0     04 4E 05 F1 | 	add	fp, #4
228e4     A7 32 02 FB | 	rdlong	local11, fp
228e8     04 4E 85 F1 | 	sub	fp, #4
228ec     20 32 06 F1 | 	add	local11, #32
228f0     19 2B C2 FA | 	rdbyte	local07, local11
228f4     E5 2A 0E F2 | 	cmp	local07, #229 wz
228f8     04 4E 05 A1 |  if_e	add	fp, #4
228fc     A7 2A 02 AB |  if_e	rdlong	local07, fp
22900     04 4E 85 A1 |  if_e	sub	fp, #4
22904     20 2A 06 A1 |  if_e	add	local07, #32
22908     15 0B 48 AC |  if_e	wrbyte	#5, local07
2290c     24 4E 05 F1 | 	add	fp, #36
22910     A7 2A 02 FB | 	rdlong	local07, fp
22914     24 4E 85 F1 | 	sub	fp, #36
22918     08 2A 0E F2 | 	cmp	local07, #8 wz
2291c     0C 4E 05 A1 |  if_e	add	fp, #12
22920     A7 2A C2 AA |  if_e	rdbyte	local07, fp
22924     02 2A 66 A0 |  if_e	shl	local07, #2
22928     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2292c     0C 4E 85 A1 |  if_e	sub	fp, #12
22930     0C 4E 05 F1 | 	add	fp, #12
22934     A7 2A C2 FA | 	rdbyte	local07, fp
22938     0C 4E 85 F1 | 	sub	fp, #12
2293c     0C 2A 06 F5 | 	and	local07, #12
22940     0C 2A 0E F2 | 	cmp	local07, #12 wz
22944     18 00 90 AD |  if_e	jmp	#LR__3687
22948     0C 4E 05 F1 | 	add	fp, #12
2294c     A7 1E C2 FA | 	rdbyte	local01, fp
22950     0C 4E 85 F1 | 	sub	fp, #12
22954     03 1E 06 F5 | 	and	local01, #3
22958     03 1E 0E F2 | 	cmp	local01, #3 wz
2295c     14 00 90 5D |  if_ne	jmp	#LR__3688
22960                 | LR__3687
22960     10 4E 05 F1 | 	add	fp, #16
22964     A7 2A C2 FA | 	rdbyte	local07, fp
22968     02 2A 46 F5 | 	or	local07, #2
2296c     A7 2A 42 FC | 	wrbyte	local07, fp
22970     10 4E 85 F1 | 	sub	fp, #16
22974                 | LR__3688
22974     10 4E 05 F1 | 	add	fp, #16
22978     A7 2A C2 FA | 	rdbyte	local07, fp
2297c     10 4E 85 F1 | 	sub	fp, #16
22980     02 2A CE F7 | 	test	local07, #2 wz
22984     48 00 90 5D |  if_ne	jmp	#LR__3689
22988     0C 4E 05 F1 | 	add	fp, #12
2298c     A7 2A C2 FA | 	rdbyte	local07, fp
22990     0C 4E 85 F1 | 	sub	fp, #12
22994     01 2A CE F7 | 	test	local07, #1 wz
22998     10 4E 05 51 |  if_ne	add	fp, #16
2299c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
229a0     10 2A 46 55 |  if_ne	or	local07, #16
229a4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
229a8     10 4E 85 51 |  if_ne	sub	fp, #16
229ac     0C 4E 05 F1 | 	add	fp, #12
229b0     A7 2A C2 FA | 	rdbyte	local07, fp
229b4     0C 4E 85 F1 | 	sub	fp, #12
229b8     04 2A CE F7 | 	test	local07, #4 wz
229bc     10 4E 05 51 |  if_ne	add	fp, #16
229c0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
229c4     08 2A 46 55 |  if_ne	or	local07, #8
229c8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
229cc     10 4E 85 51 |  if_ne	sub	fp, #16
229d0                 | LR__3689
229d0     04 4E 05 F1 | 	add	fp, #4
229d4     A7 2A 02 FB | 	rdlong	local07, fp
229d8     0C 4E 05 F1 | 	add	fp, #12
229dc     A7 1E C2 FA | 	rdbyte	local01, fp
229e0     10 4E 85 F1 | 	sub	fp, #16
229e4     2B 2A 06 F1 | 	add	local07, #43
229e8     15 1F 42 FC | 	wrbyte	local01, local07
229ec                 | ' 	}
229ec                 | ' 
229ec                 | ' 	dp->fn[ 11 ] = cf;
229ec                 | ' 
229ec                 | ' 	return FR_OK;
229ec     00 FA 05 F6 | 	mov	result1, #0
229f0                 | LR__3690
229f0     A7 F0 03 F6 | 	mov	ptra, fp
229f4     B2 00 A0 FD | 	call	#popregs_
229f8                 | _fatfs_cc_create_name_ret
229f8     2D 00 64 FD | 	ret
229fc                 | 
229fc                 | _fatfs_cc_follow_path
229fc     02 4A 05 F6 | 	mov	COUNT_, #2
22a00     A8 00 A0 FD | 	call	#pushregs_
22a04     18 F0 07 F1 | 	add	ptra, #24
22a08     04 4E 05 F1 | 	add	fp, #4
22a0c     A7 12 62 FC | 	wrlong	arg01, fp
22a10     04 4E 05 F1 | 	add	fp, #4
22a14     A7 14 62 FC | 	wrlong	arg02, fp
22a18     04 4E 85 F1 | 	sub	fp, #4
22a1c     A7 FA 01 FB | 	rdlong	result1, fp
22a20     FD 1E 02 FB | 	rdlong	local01, result1
22a24     10 4E 05 F1 | 	add	fp, #16
22a28     A7 1E 62 FC | 	wrlong	local01, fp
22a2c     14 4E 85 F1 | 	sub	fp, #20
22a30     97 24 48 FB | 	callpa	#(@LR__3702-@LR__3700)>>2,fcache_load_ptr_
22a34                 | ' )
22a34                 | ' {
22a34                 | ' 	FRESULT res;
22a34                 | ' 	BYTE ns;
22a34                 | ' 	FATFS *fs = dp->obj.fs;
22a34                 | ' #line 3034 "ff.c"
22a34                 | ' 	{
22a34                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
22a34                 | LR__3700
22a34     08 4E 05 F1 | 	add	fp, #8
22a38     A7 1E 02 FB | 	rdlong	local01, fp
22a3c     08 4E 85 F1 | 	sub	fp, #8
22a40     0F 1F C2 FA | 	rdbyte	local01, local01
22a44     2F 1E 0E F2 | 	cmp	local01, #47 wz
22a48     18 00 90 AD |  if_e	jmp	#LR__3701
22a4c     08 4E 05 F1 | 	add	fp, #8
22a50     A7 1E 02 FB | 	rdlong	local01, fp
22a54     08 4E 85 F1 | 	sub	fp, #8
22a58     0F 1F C2 FA | 	rdbyte	local01, local01
22a5c     5C 1E 0E F2 | 	cmp	local01, #92 wz
22a60     18 00 90 5D |  if_ne	jmp	#LR__3703
22a64                 | LR__3701
22a64     08 4E 05 F1 | 	add	fp, #8
22a68     A7 1E 02 FB | 	rdlong	local01, fp
22a6c     01 1E 06 F1 | 	add	local01, #1
22a70     A7 1E 62 FC | 	wrlong	local01, fp
22a74     08 4E 85 F1 | 	sub	fp, #8
22a78     B8 FF 9F FD | 	jmp	#LR__3700
22a7c                 | LR__3702
22a7c                 | LR__3703
22a7c     04 4E 05 F1 | 	add	fp, #4
22a80     A7 1E 02 FB | 	rdlong	local01, fp
22a84     08 1E 06 F1 | 	add	local01, #8
22a88     0F 01 68 FC | 	wrlong	#0, local01
22a8c     04 4E 05 F1 | 	add	fp, #4
22a90     A7 1E 02 FB | 	rdlong	local01, fp
22a94     08 4E 85 F1 | 	sub	fp, #8
22a98     0F 1F C2 FA | 	rdbyte	local01, local01
22a9c     20 1E 16 F2 | 	cmp	local01, #32 wc
22aa0     30 00 90 3D |  if_ae	jmp	#LR__3704
22aa4     04 4E 05 F1 | 	add	fp, #4
22aa8     A7 1E 02 FB | 	rdlong	local01, fp
22aac     2B 1E 06 F1 | 	add	local01, #43
22ab0     0F 01 49 FC | 	wrbyte	#128, local01
22ab4     A7 12 02 FB | 	rdlong	arg01, fp
22ab8     04 4E 85 F1 | 	sub	fp, #4
22abc     00 14 06 F6 | 	mov	arg02, #0
22ac0     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
22ac4     0C 4E 05 F1 | 	add	fp, #12
22ac8     A7 FA 61 FC | 	wrlong	result1, fp
22acc     0C 4E 85 F1 | 	sub	fp, #12
22ad0     1C 01 90 FD | 	jmp	#LR__3708
22ad4                 | LR__3704
22ad4                 | ' 		for (;;) {
22ad4                 | LR__3705
22ad4     04 4E 05 F1 | 	add	fp, #4
22ad8     A7 12 02 FB | 	rdlong	arg01, fp
22adc     04 4E 05 F1 | 	add	fp, #4
22ae0     A7 14 02 F6 | 	mov	arg02, fp
22ae4     08 4E 85 F1 | 	sub	fp, #8
22ae8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
22aec     0C 4E 05 F1 | 	add	fp, #12
22af0     A7 FA 61 FC | 	wrlong	result1, fp
22af4     00 FA 4D F2 | 	cmps	result1, #0 wz
22af8     0C 4E 85 F1 | 	sub	fp, #12
22afc     F0 00 90 5D |  if_ne	jmp	#LR__3707
22b00     04 4E 05 F1 | 	add	fp, #4
22b04     A7 12 02 FB | 	rdlong	arg01, fp
22b08     04 4E 85 F1 | 	sub	fp, #4
22b0c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22b10     0C 4E 05 F1 | 	add	fp, #12
22b14     A7 FA 61 FC | 	wrlong	result1, fp
22b18     08 4E 85 F1 | 	sub	fp, #8
22b1c     A7 1E 02 FB | 	rdlong	local01, fp
22b20     2B 1E 06 F1 | 	add	local01, #43
22b24     0F 1F C2 FA | 	rdbyte	local01, local01
22b28     0C 4E 05 F1 | 	add	fp, #12
22b2c     A7 1E 42 FC | 	wrbyte	local01, fp
22b30     04 4E 85 F1 | 	sub	fp, #4
22b34     A7 1E 0A FB | 	rdlong	local01, fp wz
22b38     0C 4E 85 F1 | 	sub	fp, #12
22b3c     34 00 90 AD |  if_e	jmp	#LR__3706
22b40     0C 4E 05 F1 | 	add	fp, #12
22b44     A7 1E 02 FB | 	rdlong	local01, fp
22b48     0C 4E 85 F1 | 	sub	fp, #12
22b4c     04 1E 0E F2 | 	cmp	local01, #4 wz
22b50     9C 00 90 5D |  if_ne	jmp	#LR__3707
22b54     10 4E 05 F1 | 	add	fp, #16
22b58     A7 1E C2 FA | 	rdbyte	local01, fp
22b5c     10 4E 85 F1 | 	sub	fp, #16
22b60     04 1E CE F7 | 	test	local01, #4 wz
22b64     0C 4E 05 A1 |  if_e	add	fp, #12
22b68     A7 0A 68 AC |  if_e	wrlong	#5, fp
22b6c     0C 4E 85 A1 |  if_e	sub	fp, #12
22b70                 | ' 					}
22b70                 | ' 				}
22b70                 | ' 				break;
22b70     7C 00 90 FD | 	jmp	#LR__3707
22b74                 | LR__3706
22b74     10 4E 05 F1 | 	add	fp, #16
22b78     A7 1E C2 FA | 	rdbyte	local01, fp
22b7c     10 4E 85 F1 | 	sub	fp, #16
22b80     04 1E CE F7 | 	test	local01, #4 wz
22b84     68 00 90 5D |  if_ne	jmp	#LR__3707
22b88     04 4E 05 F1 | 	add	fp, #4
22b8c     A7 1E 02 FB | 	rdlong	local01, fp
22b90     04 4E 85 F1 | 	sub	fp, #4
22b94     06 1E 06 F1 | 	add	local01, #6
22b98     0F 1F C2 FA | 	rdbyte	local01, local01
22b9c     10 1E CE F7 | 	test	local01, #16 wz
22ba0     0C 4E 05 A1 |  if_e	add	fp, #12
22ba4     A7 0A 68 AC |  if_e	wrlong	#5, fp
22ba8     0C 4E 85 A1 |  if_e	sub	fp, #12
22bac                 | ' 				res = FR_NO_PATH; break;
22bac     40 00 90 AD |  if_e	jmp	#LR__3707
22bb0     04 4E 05 F1 | 	add	fp, #4
22bb4     A7 20 02 FB | 	rdlong	local02, fp
22bb8     10 1F 02 F6 | 	mov	local01, local02
22bbc     10 4E 05 F1 | 	add	fp, #16
22bc0     A7 14 02 FB | 	rdlong	arg02, fp
22bc4     0A 13 02 F6 | 	mov	arg01, arg02
22bc8     34 14 06 F1 | 	add	arg02, #52
22bcc     14 4E 85 F1 | 	sub	fp, #20
22bd0     10 20 06 F1 | 	add	local02, #16
22bd4     10 21 02 FB | 	rdlong	local02, local02
22bd8     FF 21 06 F5 | 	and	local02, #511
22bdc     10 15 02 F1 | 	add	arg02, local02
22be0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
22be4     08 1E 06 F1 | 	add	local01, #8
22be8     0F FB 61 FC | 	wrlong	result1, local01
22bec     E4 FE 9F FD | 	jmp	#LR__3705
22bf0                 | LR__3707
22bf0                 | LR__3708
22bf0                 | ' 			}
22bf0                 | ' #line 3090 "ff.c"
22bf0                 | ' 			{
22bf0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
22bf0                 | ' 			}
22bf0                 | ' 		}
22bf0                 | ' 	}
22bf0                 | ' 
22bf0                 | ' 	return res;
22bf0     0C 4E 05 F1 | 	add	fp, #12
22bf4     A7 FA 01 FB | 	rdlong	result1, fp
22bf8     0C 4E 85 F1 | 	sub	fp, #12
22bfc     A7 F0 03 F6 | 	mov	ptra, fp
22c00     B2 00 A0 FD | 	call	#popregs_
22c04                 | _fatfs_cc_follow_path_ret
22c04     2D 00 64 FD | 	ret
22c08                 | 
22c08                 | _fatfs_cc_get_ldnumber
22c08     01 00 66 F6 | 	neg	_var01, #1
22c0c     09 03 0A FB | 	rdlong	_var02, arg01 wz
22c10     01 05 02 F6 | 	mov	_var03, _var02
22c14     01 FA 65 A6 |  if_e	neg	result1, #1
22c18     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22c1c     97 10 48 FB | 	callpa	#(@LR__3711-@LR__3710)>>2,fcache_load_ptr_
22c20                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22c20                 | LR__3710
22c20     02 07 C2 FA | 	rdbyte	_var04, _var03
22c24     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22c28     20 FA 15 F2 | 	cmp	result1, #32 wc
22c2c     01 04 06 F1 | 	add	_var03, #1
22c30     03 09 02 36 |  if_ae	mov	_var05, _var04
22c34     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22c38     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22c3c     E0 FF 9F 1D |  if_a	jmp	#LR__3710
22c40                 | LR__3711
22c40     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
22c44     3A 06 0E F2 | 	cmp	_var04, #58 wz
22c48     40 00 90 5D |  if_ne	jmp	#LR__3713
22c4c     01 0A 06 F6 | 	mov	_var06, #1
22c50     01 09 C2 FA | 	rdbyte	_var05, _var02
22c54     30 08 16 F2 | 	cmp	_var05, #48 wc
22c58     1C 00 90 CD |  if_b	jmp	#LR__3712
22c5c     01 09 C2 FA | 	rdbyte	_var05, _var02
22c60     3A 08 16 F2 | 	cmp	_var05, #58 wc
22c64     01 0D 02 C6 |  if_b	mov	_var07, _var02
22c68     02 0C 06 C1 |  if_b	add	_var07, #2
22c6c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22c70     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
22c74     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22c78                 | LR__3712
22c78     01 0A 56 F2 | 	cmps	_var06, #1 wc
22c7c     05 01 02 C6 |  if_b	mov	_var01, _var06
22c80     09 05 62 CC |  if_b	wrlong	_var03, arg01
22c84                 | ' 			vol = i;
22c84                 | ' 			*path = tt;
22c84                 | ' 		}
22c84                 | ' 		return vol;
22c84     00 FB 01 F6 | 	mov	result1, _var01
22c88     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22c8c                 | LR__3713
22c8c                 | ' 	}
22c8c                 | ' #line 3170 "ff.c"
22c8c                 | ' 	vol = 0;
22c8c                 | ' 
22c8c                 | ' 	return vol;
22c8c     00 FA 05 F6 | 	mov	result1, #0
22c90                 | _fatfs_cc_get_ldnumber_ret
22c90     2D 00 64 FD | 	ret
22c94                 | 
22c94                 | _fatfs_cc_check_fs
22c94     04 4A 05 F6 | 	mov	COUNT_, #4
22c98     A8 00 A0 FD | 	call	#pushregs_
22c9c     09 1F 02 F6 | 	mov	local01, arg01
22ca0     03 1E 06 F1 | 	add	local01, #3
22ca4     0F 01 48 FC | 	wrbyte	#0, local01
22ca8     2D 1E 06 F1 | 	add	local01, #45
22cac     FF FF FF FF 
22cb0     0F FF 6B FC | 	wrlong	##-1, local01
22cb4     30 1E 86 F1 | 	sub	local01, #48
22cb8     0F 13 02 F6 | 	mov	arg01, local01
22cbc     18 D5 BF FD | 	call	#_fatfs_cc_move_window
22cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
22cc4     04 FA 05 56 |  if_ne	mov	result1, #4
22cc8     94 01 90 5D |  if_ne	jmp	#LR__3724
22ccc     34 1E 06 F1 | 	add	local01, #52
22cd0     0F 13 02 F6 | 	mov	arg01, local01
22cd4     FE 13 06 F1 | 	add	arg01, #510
22cd8                 | ' {
22cd8                 | ' 
22cd8                 | ' 	return *((WORD*)ptr);
22cd8     09 21 E2 FA | 	rdword	local02, arg01
22cdc     0F 23 C2 FA | 	rdbyte	local03, local01
22ce0     34 1E 86 F1 | 	sub	local01, #52
22ce4     11 25 E2 F8 | 	getbyte	local04, local03, #0
22ce8     EB 24 0E F2 | 	cmp	local04, #235 wz
22cec     11 17 02 56 |  if_ne	mov	arg03, local03
22cf0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
22cf4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22cf8     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22cfc     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22d00     44 01 90 5D |  if_ne	jmp	#LR__3723
22d04     10 25 32 F9 | 	getword	local04, local02, #0
22d08     55 00 00 FF 
22d0c     55 24 0E F2 | 	cmp	local04, ##43605 wz
22d10     2C 00 90 5D |  if_ne	jmp	#LR__3720
22d14     34 1E 06 F1 | 	add	local01, #52
22d18     0F 13 02 F6 | 	mov	arg01, local01
22d1c     34 1E 86 F1 | 	sub	local01, #52
22d20     52 12 06 F1 | 	add	arg01, #82
22d24     40 01 00 FF 
22d28     68 15 06 F6 | 	mov	arg02, ##@LR__4314
22d2c     08 16 06 F6 | 	mov	arg03, #8
22d30     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
22d34     00 FA 0D F2 | 	cmp	result1, #0 wz
22d38                 | ' 			return 0;
22d38     00 FA 05 A6 |  if_e	mov	result1, #0
22d3c     20 01 90 AD |  if_e	jmp	#LR__3724
22d40                 | LR__3720
22d40     34 1E 06 F1 | 	add	local01, #52
22d44     0F 13 02 F6 | 	mov	arg01, local01
22d48     0B 12 06 F1 | 	add	arg01, #11
22d4c                 | ' {
22d4c                 | ' 
22d4c                 | ' 	return *((WORD*)ptr);
22d4c     09 FB E1 FA | 	rdword	result1, arg01
22d50     0D 1E 06 F1 | 	add	local01, #13
22d54     0F 23 C2 FA | 	rdbyte	local03, local01
22d58     41 1E 86 F1 | 	sub	local01, #65
22d5c     FD 24 32 F9 | 	getword	local04, result1, #0
22d60     FD 14 32 F9 | 	getword	arg02, result1, #0
22d64     01 14 86 F1 | 	sub	arg02, #1
22d68     0A 25 CA F7 | 	test	local04, arg02 wz
22d6c     D8 00 90 5D |  if_ne	jmp	#LR__3722
22d70     FD 14 32 F9 | 	getword	arg02, result1, #0
22d74     01 00 00 FF 
22d78     00 14 16 F2 | 	cmp	arg02, ##512 wc
22d7c     C8 00 90 CD |  if_b	jmp	#LR__3722
22d80     FD 14 32 F9 | 	getword	arg02, result1, #0
22d84     01 00 00 FF 
22d88     01 14 16 F2 | 	cmp	arg02, ##513 wc
22d8c     B8 00 90 3D |  if_ae	jmp	#LR__3722
22d90     11 13 02 F6 | 	mov	arg01, local03
22d94     07 12 4E F7 | 	zerox	arg01, #7 wz
22d98     AC 00 90 AD |  if_e	jmp	#LR__3722
22d9c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
22da0     11 23 E2 F8 | 	getbyte	local03, local03, #0
22da4     01 22 86 F1 | 	sub	local03, #1
22da8     11 13 CA F7 | 	test	arg01, local03 wz
22dac     98 00 90 5D |  if_ne	jmp	#LR__3722
22db0     34 1E 06 F1 | 	add	local01, #52
22db4     0F 13 02 F6 | 	mov	arg01, local01
22db8     34 1E 86 F1 | 	sub	local01, #52
22dbc     0E 12 06 F1 | 	add	arg01, #14
22dc0                 | ' {
22dc0                 | ' 
22dc0                 | ' 	return *((WORD*)ptr);
22dc0     09 FB E9 FA | 	rdword	result1, arg01 wz
22dc4     80 00 90 AD |  if_e	jmp	#LR__3722
22dc8     44 1E 06 F1 | 	add	local01, #68
22dcc     0F 13 C2 FA | 	rdbyte	arg01, local01
22dd0     44 1E 86 F1 | 	sub	local01, #68
22dd4     01 12 86 F1 | 	sub	arg01, #1
22dd8     02 12 16 F2 | 	cmp	arg01, #2 wc
22ddc     68 00 90 3D |  if_ae	jmp	#LR__3722
22de0     34 1E 06 F1 | 	add	local01, #52
22de4     0F 13 02 F6 | 	mov	arg01, local01
22de8     34 1E 86 F1 | 	sub	local01, #52
22dec     11 12 06 F1 | 	add	arg01, #17
22df0                 | ' {
22df0                 | ' 
22df0                 | ' 	return *((WORD*)ptr);
22df0     09 FB E9 FA | 	rdword	result1, arg01 wz
22df4     50 00 90 AD |  if_e	jmp	#LR__3722
22df8     34 1E 06 F1 | 	add	local01, #52
22dfc     0F 13 02 F6 | 	mov	arg01, local01
22e00     34 1E 86 F1 | 	sub	local01, #52
22e04     13 12 06 F1 | 	add	arg01, #19
22e08                 | ' {
22e08                 | ' 
22e08                 | ' 	return *((WORD*)ptr);
22e08     09 FB E1 FA | 	rdword	result1, arg01
22e0c     FD 22 32 F9 | 	getword	local03, result1, #0
22e10     80 22 16 F2 | 	cmp	local03, #128 wc
22e14     20 00 90 3D |  if_ae	jmp	#LR__3721
22e18     34 1E 06 F1 | 	add	local01, #52
22e1c     0F 13 02 F6 | 	mov	arg01, local01
22e20     34 1E 86 F1 | 	sub	local01, #52
22e24     20 12 06 F1 | 	add	arg01, #32
22e28                 | ' {
22e28                 | ' 
22e28                 | ' 	return *((DWORD*)ptr);
22e28     09 FB 01 FB | 	rdlong	result1, arg01
22e2c     80 00 00 FF 
22e30     00 FA 15 F2 | 	cmp	result1, ##65536 wc
22e34     10 00 90 CD |  if_b	jmp	#LR__3722
22e38                 | LR__3721
22e38     4A 1E 06 F1 | 	add	local01, #74
22e3c                 | ' {
22e3c                 | ' 
22e3c                 | ' 	return *((WORD*)ptr);
22e3c     0F FB E9 FA | 	rdword	result1, local01 wz
22e40                 | ' 			&& b != 0 && (b & (b - 1)) == 0
22e40                 | ' 			&& ld_word(fs->win +  14 ) != 0
22e40                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
22e40                 | ' 			&& ld_word(fs->win +  17 ) != 0
22e40                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
22e40                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
22e40                 | ' 				return 0;
22e40     00 FA 05 56 |  if_ne	mov	result1, #0
22e44     18 00 90 5D |  if_ne	jmp	#LR__3724
22e48                 | LR__3722
22e48                 | LR__3723
22e48                 | ' 		}
22e48                 | ' 	}
22e48                 | ' 	return sign == 0xAA55 ? 2 : 3;
22e48     10 23 32 F9 | 	getword	local03, local02, #0
22e4c     55 00 00 FF 
22e50     55 22 0E F2 | 	cmp	local03, ##43605 wz
22e54     02 24 06 A6 |  if_e	mov	local04, #2
22e58     03 24 06 56 |  if_ne	mov	local04, #3
22e5c     12 FB 01 F6 | 	mov	result1, local04
22e60                 | LR__3724
22e60     A7 F0 03 F6 | 	mov	ptra, fp
22e64     B2 00 A0 FD | 	call	#popregs_
22e68                 | _fatfs_cc_check_fs_ret
22e68     2D 00 64 FD | 	ret
22e6c                 | 
22e6c                 | _fatfs_cc_find_volume
22e6c     05 4A 05 F6 | 	mov	COUNT_, #5
22e70     A8 00 A0 FD | 	call	#pushregs_
22e74     24 F0 07 F1 | 	add	ptra, #36
22e78     09 1F 02 F6 | 	mov	local01, arg01
22e7c     0A 21 02 F6 | 	mov	local02, arg02
22e80     0F 13 02 F6 | 	mov	arg01, local01
22e84     00 14 06 F6 | 	mov	arg02, #0
22e88     08 FE BF FD | 	call	#_fatfs_cc_check_fs
22e8c     02 FA 0D F2 | 	cmp	result1, #2 wz
22e90     0C 00 90 AD |  if_e	jmp	#LR__3730
22e94     03 FA 15 F2 | 	cmp	result1, #3 wc
22e98     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22e9c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3738
22ea0                 | LR__3730
22ea0                 | ' 	for (i = 0; i < 4; i++) {
22ea0     00 22 06 F6 | 	mov	local03, #0
22ea4     97 26 48 FB | 	callpa	#(@LR__3732-@LR__3731)>>2,fcache_load_ptr_
22ea8                 | LR__3731
22ea8     04 22 16 F2 | 	cmp	local03, #4 wc
22eac     44 00 90 3D |  if_ae	jmp	#LR__3733
22eb0     11 25 02 F6 | 	mov	local04, local03
22eb4     02 24 66 F0 | 	shl	local04, #2
22eb8     14 4E 05 F1 | 	add	fp, #20
22ebc     A7 24 02 F1 | 	add	local04, fp
22ec0     34 1E 06 F1 | 	add	local01, #52
22ec4     0F 13 02 F6 | 	mov	arg01, local01
22ec8     34 1E 86 F1 | 	sub	local01, #52
22ecc     BE 13 06 F1 | 	add	arg01, #446
22ed0     11 15 02 F6 | 	mov	arg02, local03
22ed4     04 14 66 F0 | 	shl	arg02, #4
22ed8     0A 13 02 F1 | 	add	arg01, arg02
22edc     08 12 06 F1 | 	add	arg01, #8
22ee0                 | ' {
22ee0                 | ' 
22ee0                 | ' 	return *((DWORD*)ptr);
22ee0     09 FB 01 FB | 	rdlong	result1, arg01
22ee4     14 4E 85 F1 | 	sub	fp, #20
22ee8     12 FB 61 FC | 	wrlong	result1, local04
22eec     01 22 06 F1 | 	add	local03, #1
22ef0     B4 FF 9F FD | 	jmp	#LR__3731
22ef4                 | LR__3732
22ef4                 | LR__3733
22ef4     00 20 0E F2 | 	cmp	local02, #0 wz
22ef8     10 25 02 56 |  if_ne	mov	local04, local02
22efc     01 24 86 51 |  if_ne	sub	local04, #1
22f00     00 24 06 A6 |  if_e	mov	local04, #0
22f04     12 23 02 F6 | 	mov	local03, local04
22f08                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
22f08                 | ' 	}
22f08                 | ' 	i = part ? part - 1 : 0;
22f08                 | ' 	do {
22f08                 | LR__3734
22f08     11 25 02 F6 | 	mov	local04, local03
22f0c     02 24 66 F0 | 	shl	local04, #2
22f10     14 4E 05 F1 | 	add	fp, #20
22f14     A7 24 02 F1 | 	add	local04, fp
22f18     12 25 0A FB | 	rdlong	local04, local04 wz
22f1c     14 4E 85 F1 | 	sub	fp, #20
22f20     28 00 90 AD |  if_e	jmp	#LR__3735
22f24     11 25 02 F6 | 	mov	local04, local03
22f28     02 24 66 F0 | 	shl	local04, #2
22f2c     14 4E 05 F1 | 	add	fp, #20
22f30     A7 24 02 F1 | 	add	local04, fp
22f34     12 15 02 FB | 	rdlong	arg02, local04
22f38     0F 13 02 F6 | 	mov	arg01, local01
22f3c     14 4E 85 F1 | 	sub	fp, #20
22f40     50 FD BF FD | 	call	#_fatfs_cc_check_fs
22f44     FD 24 02 F6 | 	mov	local04, result1
22f48     04 00 90 FD | 	jmp	#LR__3736
22f4c                 | LR__3735
22f4c     03 24 06 F6 | 	mov	local04, #3
22f50                 | LR__3736
22f50     12 27 02 F6 | 	mov	local05, local04
22f54     00 20 0E F2 | 	cmp	local02, #0 wz
22f58     02 26 16 A2 |  if_e	cmp	local05, #2 wc
22f5c     0C 00 90 8D |  if_c_and_z	jmp	#LR__3737
22f60     01 22 06 A1 |  if_e	add	local03, #1
22f64     04 22 16 A2 |  if_e	cmp	local03, #4 wc
22f68     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3734
22f6c                 | LR__3737
22f6c                 | ' 	return fmt;
22f6c     13 FB 01 F6 | 	mov	result1, local05
22f70                 | LR__3738
22f70     A7 F0 03 F6 | 	mov	ptra, fp
22f74     B2 00 A0 FD | 	call	#popregs_
22f78                 | _fatfs_cc_find_volume_ret
22f78     2D 00 64 FD | 	ret
22f7c                 | 
22f7c                 | _fatfs_cc_mount_volume
22f7c     0B 4A 05 F6 | 	mov	COUNT_, #11
22f80     A8 00 A0 FD | 	call	#pushregs_
22f84     0A 1F 02 F6 | 	mov	local01, arg02
22f88     0B 21 02 F6 | 	mov	local02, arg03
22f8c     0F 01 68 FC | 	wrlong	#0, local01
22f90     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
22f94     FD 22 02 F6 | 	mov	local03, result1
22f98     00 22 56 F2 | 	cmps	local03, #0 wc
22f9c     0B FA 05 C6 |  if_b	mov	result1, #11
22fa0     3C 05 90 CD |  if_b	jmp	#LR__3750
22fa4     11 17 02 F6 | 	mov	arg03, local03
22fa8     02 16 66 F0 | 	shl	arg03, #2
22fac     F2 16 02 F1 | 	add	arg03, objptr
22fb0     0B 25 0A FB | 	rdlong	local04, arg03 wz
22fb4     0C FA 05 A6 |  if_e	mov	result1, #12
22fb8     24 05 90 AD |  if_e	jmp	#LR__3750
22fbc     0F 25 62 FC | 	wrlong	local04, local01
22fc0     10 21 E2 F8 | 	getbyte	local02, local02, #0
22fc4     FE 20 06 F5 | 	and	local02, #254
22fc8     12 17 CA FA | 	rdbyte	arg03, local04 wz
22fcc     4C 00 90 AD |  if_e	jmp	#LR__3741
22fd0     01 24 06 F1 | 	add	local04, #1
22fd4     12 13 CA FA | 	rdbyte	arg01, local04 wz
22fd8     01 24 86 F1 | 	sub	local04, #1
22fdc     01 FA 05 56 |  if_ne	mov	result1, #1
22fe0                 | ' 
22fe0                 | ' 	return Stat;
22fe0     01 00 00 AF 
22fe4     20 E4 05 A1 |  if_e	add	objptr, ##544
22fe8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22fec     01 00 00 AF 
22ff0     20 E4 85 A1 |  if_e	sub	objptr, ##544
22ff4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
22ff8     01 16 CE F7 | 	test	arg03, #1 wz
22ffc     1C 00 90 5D |  if_ne	jmp	#LR__3740
23000     00 20 0E F2 | 	cmp	local02, #0 wz
23004     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
23008     04 FA CD 57 |  if_ne	test	result1, #4 wz
2300c                 | ' 				return FR_WRITE_PROTECTED;
2300c     0A FA 05 56 |  if_ne	mov	result1, #10
23010     CC 04 90 5D |  if_ne	jmp	#LR__3750
23014                 | ' 			}
23014                 | ' 			return FR_OK;
23014     00 FA 05 F6 | 	mov	result1, #0
23018     C4 04 90 FD | 	jmp	#LR__3750
2301c                 | LR__3740
2301c                 | LR__3741
2301c     12 01 48 FC | 	wrbyte	#0, local04
23020     01 24 06 F1 | 	add	local04, #1
23024     12 23 42 FC | 	wrbyte	local03, local04
23028     12 13 C2 FA | 	rdbyte	arg01, local04
2302c     01 24 86 F1 | 	sub	local04, #1
23030     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
23034     FD 16 02 F6 | 	mov	arg03, result1
23038     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2303c     01 26 CE F7 | 	test	local05, #1 wz
23040                 | ' 		return FR_NOT_READY;
23040     03 FA 05 56 |  if_ne	mov	result1, #3
23044     98 04 90 5D |  if_ne	jmp	#LR__3750
23048     00 20 0E F2 | 	cmp	local02, #0 wz
2304c     0B 27 02 56 |  if_ne	mov	local05, arg03
23050     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
23054     04 26 CE 57 |  if_ne	test	local05, #4 wz
23058                 | ' 		return FR_WRITE_PROTECTED;
23058     0A FA 05 56 |  if_ne	mov	result1, #10
2305c     80 04 90 5D |  if_ne	jmp	#LR__3750
23060     12 13 02 F6 | 	mov	arg01, local04
23064     00 14 06 F6 | 	mov	arg02, #0
23068     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2306c     FD 12 02 F6 | 	mov	arg01, result1
23070     04 12 0E F2 | 	cmp	arg01, #4 wz
23074     01 FA 05 A6 |  if_e	mov	result1, #1
23078     64 04 90 AD |  if_e	jmp	#LR__3750
2307c     02 12 16 F2 | 	cmp	arg01, #2 wc
23080     0D FA 05 36 |  if_ae	mov	result1, #13
23084     58 04 90 3D |  if_ae	jmp	#LR__3750
23088     30 24 06 F1 | 	add	local04, #48
2308c     12 29 02 FB | 	rdlong	local06, local04
23090     04 24 06 F1 | 	add	local04, #4
23094     12 13 02 F6 | 	mov	arg01, local04
23098     34 24 86 F1 | 	sub	local04, #52
2309c     0B 12 06 F1 | 	add	arg01, #11
230a0                 | ' {
230a0                 | ' 
230a0                 | ' 	return *((WORD*)ptr);
230a0     09 FB E1 FA | 	rdword	result1, arg01
230a4     01 00 00 FF 
230a8     00 FA 0D F2 | 	cmp	result1, ##512 wz
230ac     0D FA 05 56 |  if_ne	mov	result1, #13
230b0     2C 04 90 5D |  if_ne	jmp	#LR__3750
230b4     34 24 06 F1 | 	add	local04, #52
230b8     12 13 02 F6 | 	mov	arg01, local04
230bc     34 24 86 F1 | 	sub	local04, #52
230c0     16 12 06 F1 | 	add	arg01, #22
230c4                 | ' {
230c4                 | ' 
230c4                 | ' 	return *((WORD*)ptr);
230c4     09 FB E1 FA | 	rdword	result1, arg01
230c8     FD 2A 0A F6 | 	mov	local07, result1 wz
230cc     18 00 90 5D |  if_ne	jmp	#LR__3742
230d0     34 24 06 F1 | 	add	local04, #52
230d4     12 13 02 F6 | 	mov	arg01, local04
230d8     34 24 86 F1 | 	sub	local04, #52
230dc     24 12 06 F1 | 	add	arg01, #36
230e0                 | ' {
230e0                 | ' 
230e0                 | ' 	return *((DWORD*)ptr);
230e0     09 FB 01 FB | 	rdlong	result1, arg01
230e4     FD 2A 02 F6 | 	mov	local07, result1
230e8                 | LR__3742
230e8     1C 24 06 F1 | 	add	local04, #28
230ec     12 2B 62 FC | 	wrlong	local07, local04
230f0     28 24 06 F1 | 	add	local04, #40
230f4     12 27 C2 FA | 	rdbyte	local05, local04
230f8     42 24 86 F1 | 	sub	local04, #66
230fc     12 27 42 FC | 	wrbyte	local05, local04
23100     12 27 C2 FA | 	rdbyte	local05, local04
23104     02 24 86 F1 | 	sub	local04, #2
23108     01 26 0E F2 | 	cmp	local05, #1 wz
2310c     02 24 06 51 |  if_ne	add	local04, #2
23110     12 27 C2 5A |  if_ne	rdbyte	local05, local04
23114     02 24 86 51 |  if_ne	sub	local04, #2
23118     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2311c     0D FA 05 56 |  if_ne	mov	result1, #13
23120     BC 03 90 5D |  if_ne	jmp	#LR__3750
23124     02 24 06 F1 | 	add	local04, #2
23128     12 27 C2 FA | 	rdbyte	local05, local04
2312c     13 2B 02 FD | 	qmul	local07, local05
23130     3F 24 06 F1 | 	add	local04, #63
23134     12 27 C2 FA | 	rdbyte	local05, local04
23138     37 24 86 F1 | 	sub	local04, #55
2313c     12 27 52 FC | 	wrword	local05, local04
23140     12 27 EA FA | 	rdword	local05, local04 wz
23144     0A 24 86 F1 | 	sub	local04, #10
23148     18 2A 62 FD | 	getqx	local07
2314c     20 00 90 AD |  if_e	jmp	#LR__3743
23150     0A 24 06 F1 | 	add	local04, #10
23154     12 27 E2 FA | 	rdword	local05, local04
23158     13 23 32 F9 | 	getword	local03, local05, #0
2315c     0A 24 86 F1 | 	sub	local04, #10
23160     13 27 32 F9 | 	getword	local05, local05, #0
23164     01 26 86 F1 | 	sub	local05, #1
23168     13 23 CA F7 | 	test	local03, local05 wz
2316c     08 00 90 AD |  if_e	jmp	#LR__3744
23170                 | LR__3743
23170     0D FA 05 F6 | 	mov	result1, #13
23174     68 03 90 FD | 	jmp	#LR__3750
23178                 | LR__3744
23178     34 24 06 F1 | 	add	local04, #52
2317c     12 13 02 F6 | 	mov	arg01, local04
23180     11 12 06 F1 | 	add	arg01, #17
23184                 | ' {
23184                 | ' 
23184                 | ' 	return *((WORD*)ptr);
23184     09 FB E1 FA | 	rdword	result1, arg01
23188     2C 24 86 F1 | 	sub	local04, #44
2318c     12 FB 51 FC | 	wrword	result1, local04
23190     12 27 E2 FA | 	rdword	local05, local04
23194     08 24 86 F1 | 	sub	local04, #8
23198     13 13 52 F6 | 	abs	arg01, local05 wc
2319c     09 13 42 F8 | 	getnib	arg01, arg01, #0
231a0     09 13 8A F6 | 	negc	arg01, arg01 wz
231a4     0D FA 05 56 |  if_ne	mov	result1, #13
231a8     34 03 90 5D |  if_ne	jmp	#LR__3750
231ac     34 24 06 F1 | 	add	local04, #52
231b0     12 13 02 F6 | 	mov	arg01, local04
231b4     34 24 86 F1 | 	sub	local04, #52
231b8     13 12 06 F1 | 	add	arg01, #19
231bc                 | ' {
231bc                 | ' 
231bc                 | ' 	return *((WORD*)ptr);
231bc     09 FB E1 FA | 	rdword	result1, arg01
231c0     FD 2C 0A F6 | 	mov	local08, result1 wz
231c4     34 24 06 A1 |  if_e	add	local04, #52
231c8     12 13 02 A6 |  if_e	mov	arg01, local04
231cc     34 24 86 A1 |  if_e	sub	local04, #52
231d0     20 12 06 A1 |  if_e	add	arg01, #32
231d4                 | ' {
231d4                 | ' 
231d4                 | ' 	return *((DWORD*)ptr);
231d4     09 2D 02 AB |  if_e	rdlong	local08, arg01
231d8     34 24 06 F1 | 	add	local04, #52
231dc     12 13 02 F6 | 	mov	arg01, local04
231e0     34 24 86 F1 | 	sub	local04, #52
231e4     0E 12 06 F1 | 	add	arg01, #14
231e8                 | ' {
231e8                 | ' 
231e8                 | ' 	return *((WORD*)ptr);
231e8     09 FB E1 FA | 	rdword	result1, arg01
231ec     FD 12 02 F6 | 	mov	arg01, result1
231f0     09 27 02 F6 | 	mov	local05, arg01
231f4     0F 26 4E F7 | 	zerox	local05, #15 wz
231f8     0D FA 05 A6 |  if_e	mov	result1, #13
231fc     E0 02 90 AD |  if_e	jmp	#LR__3750
23200     09 2F 32 F9 | 	getword	local09, arg01, #0
23204     15 2F 02 F1 | 	add	local09, local07
23208     08 24 06 F1 | 	add	local04, #8
2320c     12 27 E2 FA | 	rdword	local05, local04
23210     08 24 86 F1 | 	sub	local04, #8
23214     13 27 52 F6 | 	abs	local05, local05 wc
23218     04 26 46 F0 | 	shr	local05, #4
2321c     13 2F 82 F3 | 	sumc	local09, local05
23220     17 2D 12 F2 | 	cmp	local08, local09 wc
23224     0D FA 05 C6 |  if_b	mov	result1, #13
23228     B4 02 90 CD |  if_b	jmp	#LR__3750
2322c     17 2D 82 F1 | 	sub	local08, local09
23230     0A 24 06 F1 | 	add	local04, #10
23234     12 27 E2 FA | 	rdword	local05, local04
23238     13 2D 12 FD | 	qdiv	local08, local05
2323c     0A 24 86 F1 | 	sub	local04, #10
23240     18 26 62 FD | 	getqx	local05
23244     00 26 0E F2 | 	cmp	local05, #0 wz
23248     0D FA 05 A6 |  if_e	mov	result1, #13
2324c     90 02 90 AD |  if_e	jmp	#LR__3750
23250     00 30 06 F6 | 	mov	local10, #0
23254     FF FF 07 FF 
23258     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2325c     03 30 06 C6 |  if_b	mov	local10, #3
23260     7F 00 00 FF 
23264     F6 27 16 F2 | 	cmp	local05, ##65526 wc
23268     02 30 06 C6 |  if_b	mov	local10, #2
2326c     07 00 00 FF 
23270     F6 27 16 F2 | 	cmp	local05, ##4086 wc
23274     01 30 06 C6 |  if_b	mov	local10, #1
23278     00 30 0E F2 | 	cmp	local10, #0 wz
2327c     0D FA 05 A6 |  if_e	mov	result1, #13
23280     5C 02 90 AD |  if_e	jmp	#LR__3750
23284     02 26 06 F1 | 	add	local05, #2
23288     18 24 06 F1 | 	add	local04, #24
2328c     12 27 62 FC | 	wrlong	local05, local04
23290     08 24 06 F1 | 	add	local04, #8
23294     12 29 62 FC | 	wrlong	local06, local04
23298     14 27 02 F6 | 	mov	local05, local06
2329c     09 13 32 F9 | 	getword	arg01, arg01, #0
232a0     09 27 02 F1 | 	add	local05, arg01
232a4     04 24 06 F1 | 	add	local04, #4
232a8     12 27 62 FC | 	wrlong	local05, local04
232ac     14 27 02 F6 | 	mov	local05, local06
232b0     17 27 02 F1 | 	add	local05, local09
232b4     08 24 06 F1 | 	add	local04, #8
232b8     12 27 62 FC | 	wrlong	local05, local04
232bc     2C 24 86 F1 | 	sub	local04, #44
232c0     03 30 0E F2 | 	cmp	local10, #3 wz
232c4     5C 00 90 5D |  if_ne	jmp	#LR__3745
232c8     34 24 06 F1 | 	add	local04, #52
232cc     12 13 02 F6 | 	mov	arg01, local04
232d0     34 24 86 F1 | 	sub	local04, #52
232d4     2A 12 06 F1 | 	add	arg01, #42
232d8                 | ' {
232d8                 | ' 
232d8                 | ' 	return *((WORD*)ptr);
232d8     09 FB E9 FA | 	rdword	result1, arg01 wz
232dc     0D FA 05 56 |  if_ne	mov	result1, #13
232e0     FC 01 90 5D |  if_ne	jmp	#LR__3750
232e4     08 24 06 F1 | 	add	local04, #8
232e8     12 27 EA FA | 	rdword	local05, local04 wz
232ec     08 24 86 F1 | 	sub	local04, #8
232f0     0D FA 05 56 |  if_ne	mov	result1, #13
232f4     E8 01 90 5D |  if_ne	jmp	#LR__3750
232f8     34 24 06 F1 | 	add	local04, #52
232fc     12 13 02 F6 | 	mov	arg01, local04
23300     2C 12 06 F1 | 	add	arg01, #44
23304                 | ' {
23304                 | ' 
23304                 | ' 	return *((DWORD*)ptr);
23304     09 FB 01 FB | 	rdlong	result1, arg01
23308     0C 24 86 F1 | 	sub	local04, #12
2330c     12 FB 61 FC | 	wrlong	result1, local04
23310     10 24 86 F1 | 	sub	local04, #16
23314     12 33 02 FB | 	rdlong	local11, local04
23318     18 24 86 F1 | 	sub	local04, #24
2331c     02 32 66 F0 | 	shl	local11, #2
23320     6C 00 90 FD | 	jmp	#LR__3747
23324                 | LR__3745
23324     08 24 06 F1 | 	add	local04, #8
23328     12 27 EA FA | 	rdword	local05, local04 wz
2332c     08 24 86 F1 | 	sub	local04, #8
23330     0D FA 05 A6 |  if_e	mov	result1, #13
23334     A8 01 90 AD |  if_e	jmp	#LR__3750
23338     24 24 06 F1 | 	add	local04, #36
2333c     12 27 02 FB | 	rdlong	local05, local04
23340     15 27 02 F1 | 	add	local05, local07
23344     04 24 06 F1 | 	add	local04, #4
23348     12 27 62 FC | 	wrlong	local05, local04
2334c     28 24 86 F1 | 	sub	local04, #40
23350     02 30 0E F2 | 	cmp	local10, #2 wz
23354     18 24 06 A1 |  if_e	add	local04, #24
23358     12 27 02 AB |  if_e	rdlong	local05, local04
2335c     18 24 86 A1 |  if_e	sub	local04, #24
23360     01 26 66 A0 |  if_e	shl	local05, #1
23364     24 00 90 AD |  if_e	jmp	#LR__3746
23368     18 24 06 F1 | 	add	local04, #24
2336c     12 33 02 FB | 	rdlong	local11, local04
23370     19 27 02 F6 | 	mov	local05, local11
23374     01 26 66 F0 | 	shl	local05, #1
23378     19 27 02 F1 | 	add	local05, local11
2337c     01 26 46 F0 | 	shr	local05, #1
23380     18 24 86 F1 | 	sub	local04, #24
23384     01 32 06 F5 | 	and	local11, #1
23388     19 27 02 F1 | 	add	local05, local11
2338c                 | LR__3746
2338c     13 33 02 F6 | 	mov	local11, local05
23390                 | LR__3747
23390     FF 33 06 F1 | 	add	local11, #511
23394     09 32 46 F0 | 	shr	local11, #9
23398     1C 24 06 F1 | 	add	local04, #28
2339c     12 17 02 FB | 	rdlong	arg03, local04
233a0     1C 24 86 F1 | 	sub	local04, #28
233a4     19 17 12 F2 | 	cmp	arg03, local11 wc
233a8     0D FA 05 C6 |  if_b	mov	result1, #13
233ac     30 01 90 CD |  if_b	jmp	#LR__3750
233b0     14 24 06 F1 | 	add	local04, #20
233b4     FF FF FF FF 
233b8     12 FF 6B FC | 	wrlong	##-1, local04
233bc     04 24 86 F1 | 	sub	local04, #4
233c0     FF FF FF FF 
233c4     12 FF 6B FC | 	wrlong	##-1, local04
233c8     0C 24 86 F1 | 	sub	local04, #12
233cc     12 01 49 FC | 	wrbyte	#128, local04
233d0     04 24 86 F1 | 	sub	local04, #4
233d4     03 30 0E F2 | 	cmp	local10, #3 wz
233d8     D0 00 90 5D |  if_ne	jmp	#LR__3749
233dc     34 24 06 F1 | 	add	local04, #52
233e0     12 13 02 F6 | 	mov	arg01, local04
233e4     34 24 86 F1 | 	sub	local04, #52
233e8     30 12 06 F1 | 	add	arg01, #48
233ec                 | ' {
233ec                 | ' 
233ec                 | ' 	return *((WORD*)ptr);
233ec     09 FB E1 FA | 	rdword	result1, arg01
233f0     FD 26 32 F9 | 	getword	local05, result1, #0
233f4     01 26 0E F2 | 	cmp	local05, #1 wz
233f8     B0 00 90 5D |  if_ne	jmp	#LR__3749
233fc     01 28 06 F1 | 	add	local06, #1
23400     12 13 02 F6 | 	mov	arg01, local04
23404     14 15 02 F6 | 	mov	arg02, local06
23408     CC CD BF FD | 	call	#_fatfs_cc_move_window
2340c     00 FA 0D F2 | 	cmp	result1, #0 wz
23410     98 00 90 5D |  if_ne	jmp	#LR__3749
23414     04 24 06 F1 | 	add	local04, #4
23418     12 01 48 FC | 	wrbyte	#0, local04
2341c     30 24 06 F1 | 	add	local04, #48
23420     12 13 02 F6 | 	mov	arg01, local04
23424     34 24 86 F1 | 	sub	local04, #52
23428     FE 13 06 F1 | 	add	arg01, #510
2342c                 | ' {
2342c                 | ' 
2342c                 | ' 	return *((WORD*)ptr);
2342c     09 FB E1 FA | 	rdword	result1, arg01
23430     FD 26 32 F9 | 	getword	local05, result1, #0
23434     55 00 00 FF 
23438     55 26 0E F2 | 	cmp	local05, ##43605 wz
2343c     34 24 06 A1 |  if_e	add	local04, #52
23440     12 13 02 A6 |  if_e	mov	arg01, local04
23444     34 24 86 A1 |  if_e	sub	local04, #52
23448                 | ' {
23448                 | ' 
23448                 | ' 	return *((DWORD*)ptr);
23448     09 FB 01 AB |  if_e	rdlong	result1, arg01
2344c     A9 B0 20 AF 
23450     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
23454     54 00 90 5D |  if_ne	jmp	#LR__3748
23458     34 24 06 F1 | 	add	local04, #52
2345c     12 13 02 F6 | 	mov	arg01, local04
23460     34 24 86 F1 | 	sub	local04, #52
23464     E4 13 06 F1 | 	add	arg01, #484
23468                 | ' {
23468                 | ' 
23468                 | ' 	return *((DWORD*)ptr);
23468     09 FB 01 FB | 	rdlong	result1, arg01
2346c     B9 A0 30 FF 
23470     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
23474     34 00 90 5D |  if_ne	jmp	#LR__3748
23478     34 24 06 F1 | 	add	local04, #52
2347c     12 13 02 F6 | 	mov	arg01, local04
23480     E8 13 06 F1 | 	add	arg01, #488
23484                 | ' {
23484                 | ' 
23484                 | ' 	return *((DWORD*)ptr);
23484     09 FB 01 FB | 	rdlong	result1, arg01
23488     20 24 86 F1 | 	sub	local04, #32
2348c     12 FB 61 FC | 	wrlong	result1, local04
23490     20 24 06 F1 | 	add	local04, #32
23494     12 13 02 F6 | 	mov	arg01, local04
23498     EC 13 06 F1 | 	add	arg01, #492
2349c                 | ' {
2349c                 | ' 
2349c                 | ' 	return *((DWORD*)ptr);
2349c     09 FB 01 FB | 	rdlong	result1, arg01
234a0     24 24 86 F1 | 	sub	local04, #36
234a4     12 FB 61 FC | 	wrlong	result1, local04
234a8     10 24 86 F1 | 	sub	local04, #16
234ac                 | LR__3748
234ac                 | LR__3749
234ac     12 31 42 FC | 	wrbyte	local10, local04
234b0     04 E4 05 F1 | 	add	objptr, #4
234b4     F2 26 E2 FA | 	rdword	local05, objptr
234b8     01 26 06 F1 | 	add	local05, #1
234bc     F2 26 52 FC | 	wrword	local05, objptr
234c0     F2 32 E2 FA | 	rdword	local11, objptr
234c4     06 24 06 F1 | 	add	local04, #6
234c8     12 33 52 FC | 	wrword	local11, local04
234cc     04 E4 05 F1 | 	add	objptr, #4
234d0     06 24 06 F1 | 	add	local04, #6
234d4     12 E5 61 FC | 	wrlong	objptr, local04
234d8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
234d8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
234d8                 | ' 			{
234d8                 | ' 
234d8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
234d8                 | ' 
234d8                 | ' 
234d8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
234d8                 | ' 
234d8                 | ' 			}
234d8                 | ' 		}
234d8                 | ' 
234d8                 | ' 
234d8                 | ' 	}
234d8                 | ' 
234d8                 | ' 	fs->fs_type = (BYTE)fmt;
234d8                 | ' 	fs->id = ++Fsid;
234d8                 | ' 
234d8                 | ' 	fs->lfnbuf = LfnBuf;
234d8                 | ' #line 3567 "ff.c"
234d8                 | ' 	return FR_OK;
234d8     00 FA 05 F6 | 	mov	result1, #0
234dc     08 E4 85 F1 | 	sub	objptr, #8
234e0                 | LR__3750
234e0     A7 F0 03 F6 | 	mov	ptra, fp
234e4     B2 00 A0 FD | 	call	#popregs_
234e8                 | _fatfs_cc_mount_volume_ret
234e8     2D 00 64 FD | 	ret
234ec                 | 
234ec                 | _fatfs_cc_validate
234ec     09 01 0A F6 | 	mov	_var01, arg01 wz
234f0     09 02 06 F6 | 	mov	_var02, #9
234f4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
234f8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
234fc     50 00 90 AD |  if_e	jmp	#LR__3760
23500     04 00 06 F1 | 	add	_var01, #4
23504     00 07 E2 FA | 	rdword	_var04, _var01
23508     04 00 86 F1 | 	sub	_var01, #4
2350c     00 13 02 FB | 	rdlong	arg01, _var01
23510     06 12 06 F1 | 	add	arg01, #6
23514     09 FB E1 FA | 	rdword	result1, arg01
23518     FD 06 0A F2 | 	cmp	_var04, result1 wz
2351c     30 00 90 5D |  if_ne	jmp	#LR__3760
23520     00 07 02 FB | 	rdlong	_var04, _var01
23524     01 06 06 F1 | 	add	_var04, #1
23528     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2352c     01 FA 05 56 |  if_ne	mov	result1, #1
23530                 | ' 
23530                 | ' 	return Stat;
23530     01 00 00 AF 
23534     20 E4 05 A1 |  if_e	add	objptr, ##544
23538     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2353c     01 00 00 AF 
23540     20 E4 85 A1 |  if_e	sub	objptr, ##544
23544     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23548     01 04 CE F7 | 	test	_var03, #1 wz
2354c     00 02 06 A6 |  if_e	mov	_var02, #0
23550                 | LR__3760
23550     00 02 0E F2 | 	cmp	_var02, #0 wz
23554     00 05 02 AB |  if_e	rdlong	_var03, _var01
23558     00 04 06 56 |  if_ne	mov	_var03, #0
2355c     0A 05 62 FC | 	wrlong	_var03, arg02
23560                 | ' 			res = FR_OK;
23560                 | ' 		}
23560                 | ' 
23560                 | ' 	}
23560                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23560                 | ' 	return res;
23560     01 FB 01 F6 | 	mov	result1, _var02
23564                 | _fatfs_cc_validate_ret
23564     2D 00 64 FD | 	ret
23568                 | 
23568                 | _fatfs_cc_f_mount
23568     01 4A 05 F6 | 	mov	COUNT_, #1
2356c     A8 00 A0 FD | 	call	#pushregs_
23570     20 F0 07 F1 | 	add	ptra, #32
23574     04 4E 05 F1 | 	add	fp, #4
23578     A7 12 62 FC | 	wrlong	arg01, fp
2357c     04 4E 05 F1 | 	add	fp, #4
23580     A7 14 62 FC | 	wrlong	arg02, fp
23584     04 4E 05 F1 | 	add	fp, #4
23588     A7 16 42 FC | 	wrbyte	arg03, fp
2358c     04 4E 85 F1 | 	sub	fp, #4
23590     A7 16 02 FB | 	rdlong	arg03, fp
23594     14 4E 05 F1 | 	add	fp, #20
23598     A7 16 62 FC | 	wrlong	arg03, fp
2359c     A7 12 02 F6 | 	mov	arg01, fp
235a0     1C 4E 85 F1 | 	sub	fp, #28
235a4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
235a8     14 4E 05 F1 | 	add	fp, #20
235ac     A7 FA 61 FC | 	wrlong	result1, fp
235b0     14 4E 85 F1 | 	sub	fp, #20
235b4     00 FA 55 F2 | 	cmps	result1, #0 wc
235b8     0B FA 05 C6 |  if_b	mov	result1, #11
235bc     C0 00 90 CD |  if_b	jmp	#LR__3771
235c0     14 4E 05 F1 | 	add	fp, #20
235c4     A7 16 02 FB | 	rdlong	arg03, fp
235c8     02 16 66 F0 | 	shl	arg03, #2
235cc     F2 16 02 F1 | 	add	arg03, objptr
235d0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
235d4     04 4E 85 F1 | 	sub	fp, #4
235d8     A7 16 62 FC | 	wrlong	arg03, fp
235dc     10 4E 85 F1 | 	sub	fp, #16
235e0     28 00 90 AD |  if_e	jmp	#LR__3770
235e4     10 4E 05 F1 | 	add	fp, #16
235e8     A7 16 02 FB | 	rdlong	arg03, fp
235ec     10 4E 85 F1 | 	sub	fp, #16
235f0     01 16 06 F1 | 	add	arg03, #1
235f4     0B 13 C2 FA | 	rdbyte	arg01, arg03
235f8     28 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
235fc     10 4E 05 F1 | 	add	fp, #16
23600     A7 16 02 FB | 	rdlong	arg03, fp
23604     10 4E 85 F1 | 	sub	fp, #16
23608     0B 01 48 FC | 	wrbyte	#0, arg03
2360c                 | LR__3770
2360c     04 4E 05 F1 | 	add	fp, #4
23610     A7 1E 0A FB | 	rdlong	local01, fp wz
23614     04 4E 85 F1 | 	sub	fp, #4
23618     04 4E 05 51 |  if_ne	add	fp, #4
2361c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23620     04 4E 85 51 |  if_ne	sub	fp, #4
23624     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23628     14 4E 05 F1 | 	add	fp, #20
2362c     A7 1E 02 FB | 	rdlong	local01, fp
23630     02 1E 66 F0 | 	shl	local01, #2
23634     F2 1E 02 F1 | 	add	local01, objptr
23638     10 4E 85 F1 | 	sub	fp, #16
2363c     A7 16 02 FB | 	rdlong	arg03, fp
23640     0F 17 62 FC | 	wrlong	arg03, local01
23644     08 4E 05 F1 | 	add	fp, #8
23648     A7 1E CA FA | 	rdbyte	local01, fp wz
2364c     0C 4E 85 F1 | 	sub	fp, #12
23650     00 FA 05 A6 |  if_e	mov	result1, #0
23654     28 00 90 AD |  if_e	jmp	#LR__3771
23658     08 4E 05 F1 | 	add	fp, #8
2365c     A7 12 02 F6 | 	mov	arg01, fp
23660     04 4E 85 F1 | 	sub	fp, #4
23664     A7 14 02 F6 | 	mov	arg02, fp
23668     04 4E 85 F1 | 	sub	fp, #4
2366c     00 16 06 F6 | 	mov	arg03, #0
23670     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
23674     18 4E 05 F1 | 	add	fp, #24
23678     A7 FA 61 FC | 	wrlong	result1, fp
2367c                 | ' 
2367c                 | ' 	res = mount_volume(&path, &fs, 0);
2367c                 | ' 	return res ;
2367c     18 4E 85 F1 | 	sub	fp, #24
23680                 | LR__3771
23680     A7 F0 03 F6 | 	mov	ptra, fp
23684     B2 00 A0 FD | 	call	#popregs_
23688                 | _fatfs_cc_f_mount_ret
23688     2D 00 64 FD | 	ret
2368c                 | 
2368c                 | _fatfs_cc_f_open
2368c     02 4A 05 F6 | 	mov	COUNT_, #2
23690     A8 00 A0 FD | 	call	#pushregs_
23694     60 F0 07 F1 | 	add	ptra, #96
23698     04 4E 05 F1 | 	add	fp, #4
2369c     A7 12 62 FC | 	wrlong	arg01, fp
236a0     04 4E 05 F1 | 	add	fp, #4
236a4     A7 14 62 FC | 	wrlong	arg02, fp
236a8     04 4E 05 F1 | 	add	fp, #4
236ac     A7 16 42 FC | 	wrbyte	arg03, fp
236b0     08 4E 85 F1 | 	sub	fp, #8
236b4     A7 18 0A FB | 	rdlong	arg04, fp wz
236b8     04 4E 85 F1 | 	sub	fp, #4
236bc     09 FA 05 A6 |  if_e	mov	result1, #9
236c0     98 06 90 AD |  if_e	jmp	#LR__3797
236c4     0C 4E 05 F1 | 	add	fp, #12
236c8     A7 18 C2 FA | 	rdbyte	arg04, fp
236cc     3F 18 06 F5 | 	and	arg04, #63
236d0     A7 18 42 FC | 	wrbyte	arg04, fp
236d4     04 4E 85 F1 | 	sub	fp, #4
236d8     A7 12 02 F6 | 	mov	arg01, fp
236dc     3C 4E 05 F1 | 	add	fp, #60
236e0     A7 14 02 F6 | 	mov	arg02, fp
236e4     38 4E 85 F1 | 	sub	fp, #56
236e8     A7 16 C2 FA | 	rdbyte	arg03, fp
236ec     0C 4E 85 F1 | 	sub	fp, #12
236f0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
236f4     10 4E 05 F1 | 	add	fp, #16
236f8     A7 FA 61 FC | 	wrlong	result1, fp
236fc     10 4E 85 F1 | 	sub	fp, #16
23700     00 FA 0D F2 | 	cmp	result1, #0 wz
23704     2C 06 90 5D |  if_ne	jmp	#LR__3796
23708     44 4E 05 F1 | 	add	fp, #68
2370c     A7 18 02 FB | 	rdlong	arg04, fp
23710     30 4E 85 F1 | 	sub	fp, #48
23714     A7 18 62 FC | 	wrlong	arg04, fp
23718     A7 12 02 F6 | 	mov	arg01, fp
2371c     0C 4E 85 F1 | 	sub	fp, #12
23720     A7 1E 02 FB | 	rdlong	local01, fp
23724     08 4E 85 F1 | 	sub	fp, #8
23728     0F 15 02 F6 | 	mov	arg02, local01
2372c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23730     10 4E 05 F1 | 	add	fp, #16
23734     A7 FA 61 FC | 	wrlong	result1, fp
23738     10 4E 85 F1 | 	sub	fp, #16
2373c     00 FA 0D F2 | 	cmp	result1, #0 wz
23740     1C 00 90 5D |  if_ne	jmp	#LR__3780
23744     3F 4E 05 F1 | 	add	fp, #63
23748     A7 18 C2 FA | 	rdbyte	arg04, fp
2374c     3F 4E 85 F1 | 	sub	fp, #63
23750     80 18 CE F7 | 	test	arg04, #128 wz
23754     10 4E 05 51 |  if_ne	add	fp, #16
23758     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2375c     10 4E 85 51 |  if_ne	sub	fp, #16
23760                 | LR__3780
23760     0C 4E 05 F1 | 	add	fp, #12
23764     A7 18 C2 FA | 	rdbyte	arg04, fp
23768     0C 4E 85 F1 | 	sub	fp, #12
2376c     1C 18 CE F7 | 	test	arg04, #28 wz
23770     F0 01 90 AD |  if_e	jmp	#LR__3785
23774     10 4E 05 F1 | 	add	fp, #16
23778     A7 1E 0A FB | 	rdlong	local01, fp wz
2377c     10 4E 85 F1 | 	sub	fp, #16
23780     48 00 90 AD |  if_e	jmp	#LR__3782
23784     10 4E 05 F1 | 	add	fp, #16
23788     A7 18 02 FB | 	rdlong	arg04, fp
2378c     10 4E 85 F1 | 	sub	fp, #16
23790     04 18 0E F2 | 	cmp	arg04, #4 wz
23794     1C 00 90 5D |  if_ne	jmp	#LR__3781
23798     14 4E 05 F1 | 	add	fp, #20
2379c     A7 12 02 F6 | 	mov	arg01, fp
237a0     14 4E 85 F1 | 	sub	fp, #20
237a4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
237a8     10 4E 05 F1 | 	add	fp, #16
237ac     A7 FA 61 FC | 	wrlong	result1, fp
237b0     10 4E 85 F1 | 	sub	fp, #16
237b4                 | LR__3781
237b4     0C 4E 05 F1 | 	add	fp, #12
237b8     A7 1E C2 FA | 	rdbyte	local01, fp
237bc     08 1E 46 F5 | 	or	local01, #8
237c0     A7 1E 42 FC | 	wrbyte	local01, fp
237c4     0C 4E 85 F1 | 	sub	fp, #12
237c8     3C 00 90 FD | 	jmp	#LR__3784
237cc                 | LR__3782
237cc     1A 4E 05 F1 | 	add	fp, #26
237d0     A7 1E C2 FA | 	rdbyte	local01, fp
237d4     1A 4E 85 F1 | 	sub	fp, #26
237d8     11 1E CE F7 | 	test	local01, #17 wz
237dc     10 4E 05 51 |  if_ne	add	fp, #16
237e0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
237e4     10 4E 85 51 |  if_ne	sub	fp, #16
237e8     1C 00 90 5D |  if_ne	jmp	#LR__3783
237ec     0C 4E 05 F1 | 	add	fp, #12
237f0     A7 1E C2 FA | 	rdbyte	local01, fp
237f4     0C 4E 85 F1 | 	sub	fp, #12
237f8     04 1E CE F7 | 	test	local01, #4 wz
237fc     10 4E 05 51 |  if_ne	add	fp, #16
23800     A7 10 68 5C |  if_ne	wrlong	#8, fp
23804     10 4E 85 51 |  if_ne	sub	fp, #16
23808                 | LR__3783
23808                 | LR__3784
23808     10 4E 05 F1 | 	add	fp, #16
2380c     A7 1E 0A FB | 	rdlong	local01, fp wz
23810     10 4E 85 F1 | 	sub	fp, #16
23814     A8 01 90 5D |  if_ne	jmp	#LR__3788
23818     0C 4E 05 F1 | 	add	fp, #12
2381c     A7 1E C2 FA | 	rdbyte	local01, fp
23820     0C 4E 85 F1 | 	sub	fp, #12
23824     08 1E CE F7 | 	test	local01, #8 wz
23828     94 01 90 AD |  if_e	jmp	#LR__3788
2382c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23830     54 4E 05 F1 | 	add	fp, #84
23834     A7 FA 61 FC | 	wrlong	result1, fp
23838     24 4E 85 F1 | 	sub	fp, #36
2383c     A7 12 02 FB | 	rdlong	arg01, fp
23840     0E 12 06 F1 | 	add	arg01, #14
23844     09 FB 61 FC | 	wrlong	result1, arg01
23848     A7 12 02 FB | 	rdlong	arg01, fp
2384c     16 12 06 F1 | 	add	arg01, #22
23850     24 4E 05 F1 | 	add	fp, #36
23854     A7 14 02 FB | 	rdlong	arg02, fp
23858     09 15 62 FC | 	wrlong	arg02, arg01
2385c     10 4E 85 F1 | 	sub	fp, #16
23860     A7 12 02 FB | 	rdlong	arg01, fp
23864     14 4E 85 F1 | 	sub	fp, #20
23868     A7 14 02 FB | 	rdlong	arg02, fp
2386c     30 4E 85 F1 | 	sub	fp, #48
23870     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
23874     48 4E 05 F1 | 	add	fp, #72
23878     A7 FA 61 FC | 	wrlong	result1, fp
2387c     18 4E 85 F1 | 	sub	fp, #24
23880     A7 1E 02 FB | 	rdlong	local01, fp
23884     0B 1E 06 F1 | 	add	local01, #11
23888     0F 41 48 FC | 	wrbyte	#32, local01
2388c     14 4E 05 F1 | 	add	fp, #20
23890     A7 12 02 FB | 	rdlong	arg01, fp
23894     14 4E 85 F1 | 	sub	fp, #20
23898     A7 14 02 FB | 	rdlong	arg02, fp
2389c     30 4E 85 F1 | 	sub	fp, #48
238a0     00 16 06 F6 | 	mov	arg03, #0
238a4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
238a8     30 4E 05 F1 | 	add	fp, #48
238ac     A7 12 02 FB | 	rdlong	arg01, fp
238b0     1C 12 06 F1 | 	add	arg01, #28
238b4     09 01 68 FC | 	wrlong	#0, arg01
238b8     14 4E 05 F1 | 	add	fp, #20
238bc     A7 1E 02 FB | 	rdlong	local01, fp
238c0     03 1E 06 F1 | 	add	local01, #3
238c4     0F 03 48 FC | 	wrbyte	#1, local01
238c8     04 4E 05 F1 | 	add	fp, #4
238cc     A7 1E 0A FB | 	rdlong	local01, fp wz
238d0     48 4E 85 F1 | 	sub	fp, #72
238d4     E8 00 90 AD |  if_e	jmp	#LR__3788
238d8     44 4E 05 F1 | 	add	fp, #68
238dc     A7 1E 02 FB | 	rdlong	local01, fp
238e0     30 1E 06 F1 | 	add	local01, #48
238e4     0F 1F 02 FB | 	rdlong	local01, local01
238e8     14 4E 05 F1 | 	add	fp, #20
238ec     A7 1E 62 FC | 	wrlong	local01, fp
238f0     44 4E 85 F1 | 	sub	fp, #68
238f4     A7 12 02 F6 | 	mov	arg01, fp
238f8     34 4E 05 F1 | 	add	fp, #52
238fc     A7 14 02 FB | 	rdlong	arg02, fp
23900     48 4E 85 F1 | 	sub	fp, #72
23904     00 16 06 F6 | 	mov	arg03, #0
23908     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2390c     10 4E 05 F1 | 	add	fp, #16
23910     A7 FA 61 FC | 	wrlong	result1, fp
23914     10 4E 85 F1 | 	sub	fp, #16
23918     00 FA 0D F2 | 	cmp	result1, #0 wz
2391c     A0 00 90 5D |  if_ne	jmp	#LR__3788
23920     44 4E 05 F1 | 	add	fp, #68
23924     A7 12 02 FB | 	rdlong	arg01, fp
23928     14 4E 05 F1 | 	add	fp, #20
2392c     A7 14 02 FB | 	rdlong	arg02, fp
23930     58 4E 85 F1 | 	sub	fp, #88
23934     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23938     10 4E 05 F1 | 	add	fp, #16
2393c     A7 FA 61 FC | 	wrlong	result1, fp
23940     34 4E 05 F1 | 	add	fp, #52
23944     A7 18 02 FB | 	rdlong	arg04, fp
23948     04 4E 05 F1 | 	add	fp, #4
2394c     A7 1E 02 FB | 	rdlong	local01, fp
23950     48 4E 85 F1 | 	sub	fp, #72
23954     01 1E 86 F1 | 	sub	local01, #1
23958     10 18 06 F1 | 	add	arg04, #16
2395c     0C 1F 62 FC | 	wrlong	local01, arg04
23960     5C 00 90 FD | 	jmp	#LR__3788
23964                 | LR__3785
23964     10 4E 05 F1 | 	add	fp, #16
23968     A7 18 0A FB | 	rdlong	arg04, fp wz
2396c     10 4E 85 F1 | 	sub	fp, #16
23970     4C 00 90 5D |  if_ne	jmp	#LR__3787
23974     1A 4E 05 F1 | 	add	fp, #26
23978     A7 18 C2 FA | 	rdbyte	arg04, fp
2397c     1A 4E 85 F1 | 	sub	fp, #26
23980     10 18 CE F7 | 	test	arg04, #16 wz
23984     10 4E 05 51 |  if_ne	add	fp, #16
23988     A7 08 68 5C |  if_ne	wrlong	#4, fp
2398c     10 4E 85 51 |  if_ne	sub	fp, #16
23990     2C 00 90 5D |  if_ne	jmp	#LR__3786
23994     0C 4E 05 F1 | 	add	fp, #12
23998     A7 18 C2 FA | 	rdbyte	arg04, fp
2399c     0C 4E 85 F1 | 	sub	fp, #12
239a0     02 18 CE F7 | 	test	arg04, #2 wz
239a4     1A 4E 05 51 |  if_ne	add	fp, #26
239a8     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
239ac     1A 4E 85 51 |  if_ne	sub	fp, #26
239b0     01 1E CE 57 |  if_ne	test	local01, #1 wz
239b4     10 4E 05 51 |  if_ne	add	fp, #16
239b8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
239bc     10 4E 85 51 |  if_ne	sub	fp, #16
239c0                 | LR__3786
239c0                 | LR__3787
239c0                 | LR__3788
239c0     10 4E 05 F1 | 	add	fp, #16
239c4     A7 1E 0A FB | 	rdlong	local01, fp wz
239c8     10 4E 85 F1 | 	sub	fp, #16
239cc     60 00 90 5D |  if_ne	jmp	#LR__3789
239d0     0C 4E 05 F1 | 	add	fp, #12
239d4     A7 20 C2 FA | 	rdbyte	local02, fp
239d8     0C 4E 85 F1 | 	sub	fp, #12
239dc     08 20 CE F7 | 	test	local02, #8 wz
239e0     0C 4E 05 51 |  if_ne	add	fp, #12
239e4     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
239e8     40 20 46 55 |  if_ne	or	local02, #64
239ec     A7 20 42 5C |  if_ne	wrbyte	local02, fp
239f0     0C 4E 85 51 |  if_ne	sub	fp, #12
239f4     04 4E 05 F1 | 	add	fp, #4
239f8     A7 20 02 FB | 	rdlong	local02, fp
239fc     40 4E 05 F1 | 	add	fp, #64
23a00     A7 1E 02 FB | 	rdlong	local01, fp
23a04     30 1E 06 F1 | 	add	local01, #48
23a08     0F 1F 02 FB | 	rdlong	local01, local01
23a0c     20 20 06 F1 | 	add	local02, #32
23a10     10 1F 62 FC | 	wrlong	local01, local02
23a14     40 4E 85 F1 | 	sub	fp, #64
23a18     A7 20 02 FB | 	rdlong	local02, fp
23a1c     2C 4E 05 F1 | 	add	fp, #44
23a20     A7 1E 02 FB | 	rdlong	local01, fp
23a24     30 4E 85 F1 | 	sub	fp, #48
23a28     24 20 06 F1 | 	add	local02, #36
23a2c     10 1F 62 FC | 	wrlong	local01, local02
23a30                 | LR__3789
23a30     10 4E 05 F1 | 	add	fp, #16
23a34     A7 20 0A FB | 	rdlong	local02, fp wz
23a38     10 4E 85 F1 | 	sub	fp, #16
23a3c     F4 02 90 5D |  if_ne	jmp	#LR__3795
23a40     04 4E 05 F1 | 	add	fp, #4
23a44     A7 20 02 FB | 	rdlong	local02, fp
23a48     40 4E 05 F1 | 	add	fp, #64
23a4c     A7 12 02 FB | 	rdlong	arg01, fp
23a50     14 4E 85 F1 | 	sub	fp, #20
23a54     A7 14 02 FB | 	rdlong	arg02, fp
23a58     30 4E 85 F1 | 	sub	fp, #48
23a5c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23a60     08 20 06 F1 | 	add	local02, #8
23a64     10 FB 61 FC | 	wrlong	result1, local02
23a68     04 4E 05 F1 | 	add	fp, #4
23a6c     A7 20 02 FB | 	rdlong	local02, fp
23a70     2C 4E 05 F1 | 	add	fp, #44
23a74     A7 12 02 FB | 	rdlong	arg01, fp
23a78     1C 12 06 F1 | 	add	arg01, #28
23a7c                 | ' {
23a7c                 | ' 
23a7c                 | ' 	return *((DWORD*)ptr);
23a7c     09 FB 01 FB | 	rdlong	result1, arg01
23a80     0C 20 06 F1 | 	add	local02, #12
23a84     10 FB 61 FC | 	wrlong	result1, local02
23a88     2C 4E 85 F1 | 	sub	fp, #44
23a8c     A7 20 02 FB | 	rdlong	local02, fp
23a90     40 4E 05 F1 | 	add	fp, #64
23a94     A7 1E 02 FB | 	rdlong	local01, fp
23a98     10 1F 62 FC | 	wrlong	local01, local02
23a9c     40 4E 85 F1 | 	sub	fp, #64
23aa0     A7 20 02 FB | 	rdlong	local02, fp
23aa4     40 4E 05 F1 | 	add	fp, #64
23aa8     A7 1E 02 FB | 	rdlong	local01, fp
23aac     06 1E 06 F1 | 	add	local01, #6
23ab0     0F 1F E2 FA | 	rdword	local01, local01
23ab4     04 20 06 F1 | 	add	local02, #4
23ab8     10 1F 52 FC | 	wrword	local01, local02
23abc     40 4E 85 F1 | 	sub	fp, #64
23ac0     A7 20 02 FB | 	rdlong	local02, fp
23ac4     08 4E 05 F1 | 	add	fp, #8
23ac8     A7 1E C2 FA | 	rdbyte	local01, fp
23acc     10 20 06 F1 | 	add	local02, #16
23ad0     10 1F 42 FC | 	wrbyte	local01, local02
23ad4     08 4E 85 F1 | 	sub	fp, #8
23ad8     A7 20 02 FB | 	rdlong	local02, fp
23adc     11 20 06 F1 | 	add	local02, #17
23ae0     10 01 48 FC | 	wrbyte	#0, local02
23ae4     A7 20 02 FB | 	rdlong	local02, fp
23ae8     1C 20 06 F1 | 	add	local02, #28
23aec     10 01 68 FC | 	wrlong	#0, local02
23af0     A7 20 02 FB | 	rdlong	local02, fp
23af4     14 20 06 F1 | 	add	local02, #20
23af8     10 01 68 FC | 	wrlong	#0, local02
23afc     A7 12 02 FB | 	rdlong	arg01, fp
23b00     04 4E 85 F1 | 	sub	fp, #4
23b04     28 12 06 F1 | 	add	arg01, #40
23b08     00 14 06 F6 | 	mov	arg02, #0
23b0c     09 16 C6 F9 | 	decod	arg03, #9
23b10     98 00 A0 FD | 	call	#\builtin_bytefill_
23b14     0C 4E 05 F1 | 	add	fp, #12
23b18     A7 20 C2 FA | 	rdbyte	local02, fp
23b1c     0C 4E 85 F1 | 	sub	fp, #12
23b20     20 20 CE F7 | 	test	local02, #32 wz
23b24     0C 02 90 AD |  if_e	jmp	#LR__3794
23b28     04 4E 05 F1 | 	add	fp, #4
23b2c     A7 1E 02 FB | 	rdlong	local01, fp
23b30     04 4E 85 F1 | 	sub	fp, #4
23b34     0C 1E 06 F1 | 	add	local01, #12
23b38     0F 21 02 FB | 	rdlong	local02, local01
23b3c     01 20 16 F2 | 	cmp	local02, #1 wc
23b40     F0 01 90 CD |  if_b	jmp	#LR__3794
23b44     04 4E 05 F1 | 	add	fp, #4
23b48     A7 1E 02 FB | 	rdlong	local01, fp
23b4c     0F 21 02 F6 | 	mov	local02, local01
23b50     0C 1E 06 F1 | 	add	local01, #12
23b54     0F 1F 02 FB | 	rdlong	local01, local01
23b58     14 20 06 F1 | 	add	local02, #20
23b5c     10 1F 62 FC | 	wrlong	local01, local02
23b60     40 4E 05 F1 | 	add	fp, #64
23b64     A7 20 02 FB | 	rdlong	local02, fp
23b68     0A 20 06 F1 | 	add	local02, #10
23b6c     10 21 E2 FA | 	rdword	local02, local02
23b70     09 20 66 F0 | 	shl	local02, #9
23b74     08 4E 05 F1 | 	add	fp, #8
23b78     A7 20 62 FC | 	wrlong	local02, fp
23b7c     48 4E 85 F1 | 	sub	fp, #72
23b80     A7 20 02 FB | 	rdlong	local02, fp
23b84     08 20 06 F1 | 	add	local02, #8
23b88     10 1F 02 FB | 	rdlong	local01, local02
23b8c     4C 4E 05 F1 | 	add	fp, #76
23b90     A7 1E 62 FC | 	wrlong	local01, fp
23b94                 | ' 				fp->fptr = fp->obj.objsize;
23b94                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
23b94                 | ' 				clst = fp->obj.sclust;
23b94                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
23b94     4C 4E 85 F1 | 	sub	fp, #76
23b98     A7 20 02 FB | 	rdlong	local02, fp
23b9c     0C 20 06 F1 | 	add	local02, #12
23ba0     10 1F 02 FB | 	rdlong	local01, local02
23ba4     58 4E 05 F1 | 	add	fp, #88
23ba8     A7 1E 62 FC | 	wrlong	local01, fp
23bac     5C 4E 85 F1 | 	sub	fp, #92
23bb0                 | LR__3790
23bb0     10 4E 05 F1 | 	add	fp, #16
23bb4     A7 20 0A FB | 	rdlong	local02, fp wz
23bb8     10 4E 85 F1 | 	sub	fp, #16
23bbc     94 00 90 5D |  if_ne	jmp	#LR__3791
23bc0     5C 4E 05 F1 | 	add	fp, #92
23bc4     A7 20 02 FB | 	rdlong	local02, fp
23bc8     10 4E 85 F1 | 	sub	fp, #16
23bcc     A7 1E 02 FB | 	rdlong	local01, fp
23bd0     4C 4E 85 F1 | 	sub	fp, #76
23bd4     0F 21 1A F2 | 	cmp	local02, local01 wcz
23bd8     78 00 90 ED |  if_be	jmp	#LR__3791
23bdc     04 4E 05 F1 | 	add	fp, #4
23be0     A7 12 02 FB | 	rdlong	arg01, fp
23be4     4C 4E 05 F1 | 	add	fp, #76
23be8     A7 14 02 FB | 	rdlong	arg02, fp
23bec     50 4E 85 F1 | 	sub	fp, #80
23bf0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
23bf4     50 4E 05 F1 | 	add	fp, #80
23bf8     A7 FA 61 FC | 	wrlong	result1, fp
23bfc     50 4E 85 F1 | 	sub	fp, #80
23c00     02 FA 15 F2 | 	cmp	result1, #2 wc
23c04     10 4E 05 C1 |  if_b	add	fp, #16
23c08     A7 04 68 CC |  if_b	wrlong	#2, fp
23c0c     10 4E 85 C1 |  if_b	sub	fp, #16
23c10     50 4E 05 F1 | 	add	fp, #80
23c14     A7 20 02 FB | 	rdlong	local02, fp
23c18     50 4E 85 F1 | 	sub	fp, #80
23c1c     FF FF 7F FF 
23c20     FF 21 0E F2 | 	cmp	local02, ##-1 wz
23c24     10 4E 05 A1 |  if_e	add	fp, #16
23c28     A7 02 68 AC |  if_e	wrlong	#1, fp
23c2c     10 4E 85 A1 |  if_e	sub	fp, #16
23c30     5C 4E 05 F1 | 	add	fp, #92
23c34     A7 20 02 FB | 	rdlong	local02, fp
23c38     10 4E 85 F1 | 	sub	fp, #16
23c3c     A7 1E 02 FB | 	rdlong	local01, fp
23c40     0F 21 82 F1 | 	sub	local02, local01
23c44     10 4E 05 F1 | 	add	fp, #16
23c48     A7 20 62 FC | 	wrlong	local02, fp
23c4c     5C 4E 85 F1 | 	sub	fp, #92
23c50     5C FF 9F FD | 	jmp	#LR__3790
23c54                 | LR__3791
23c54     04 4E 05 F1 | 	add	fp, #4
23c58     A7 20 02 FB | 	rdlong	local02, fp
23c5c     4C 4E 05 F1 | 	add	fp, #76
23c60     A7 1E 02 FB | 	rdlong	local01, fp
23c64     18 20 06 F1 | 	add	local02, #24
23c68     10 1F 62 FC | 	wrlong	local01, local02
23c6c     40 4E 85 F1 | 	sub	fp, #64
23c70     A7 20 0A FB | 	rdlong	local02, fp wz
23c74     10 4E 85 F1 | 	sub	fp, #16
23c78     B8 00 90 5D |  if_ne	jmp	#LR__3793
23c7c     5C 4E 05 F1 | 	add	fp, #92
23c80     A7 1E 02 FB | 	rdlong	local01, fp
23c84     5C 4E 85 F1 | 	sub	fp, #92
23c88     FF 1F CE F7 | 	test	local01, #511 wz
23c8c     A4 00 90 AD |  if_e	jmp	#LR__3793
23c90     44 4E 05 F1 | 	add	fp, #68
23c94     A7 12 02 FB | 	rdlong	arg01, fp
23c98     0C 4E 05 F1 | 	add	fp, #12
23c9c     A7 14 02 FB | 	rdlong	arg02, fp
23ca0     50 4E 85 F1 | 	sub	fp, #80
23ca4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
23ca8     58 4E 05 F1 | 	add	fp, #88
23cac     A7 FA 61 FC | 	wrlong	result1, fp
23cb0     00 FA 4D F2 | 	cmps	result1, #0 wz
23cb4     58 4E 85 F1 | 	sub	fp, #88
23cb8     10 4E 05 A1 |  if_e	add	fp, #16
23cbc     A7 04 68 AC |  if_e	wrlong	#2, fp
23cc0     10 4E 85 A1 |  if_e	sub	fp, #16
23cc4     6C 00 90 AD |  if_e	jmp	#LR__3792
23cc8     04 4E 05 F1 | 	add	fp, #4
23ccc     A7 20 02 FB | 	rdlong	local02, fp
23cd0     54 4E 05 F1 | 	add	fp, #84
23cd4     A7 1E 02 FB | 	rdlong	local01, fp
23cd8     04 4E 05 F1 | 	add	fp, #4
23cdc     A7 18 02 FB | 	rdlong	arg04, fp
23ce0     09 18 46 F0 | 	shr	arg04, #9
23ce4     0C 1F 02 F1 | 	add	local01, arg04
23ce8     1C 20 06 F1 | 	add	local02, #28
23cec     10 1F 62 FC | 	wrlong	local01, local02
23cf0     18 4E 85 F1 | 	sub	fp, #24
23cf4     A7 20 02 FB | 	rdlong	local02, fp
23cf8     01 20 06 F1 | 	add	local02, #1
23cfc     10 13 C2 FA | 	rdbyte	arg01, local02
23d00     40 4E 85 F1 | 	sub	fp, #64
23d04     A7 20 02 FB | 	rdlong	local02, fp
23d08     10 15 02 F6 | 	mov	arg02, local02
23d0c     28 14 06 F1 | 	add	arg02, #40
23d10     04 4E 85 F1 | 	sub	fp, #4
23d14     1C 20 06 F1 | 	add	local02, #28
23d18     10 17 02 FB | 	rdlong	arg03, local02
23d1c     01 18 06 F6 | 	mov	arg04, #1
23d20     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
23d24     00 FA 0D F2 | 	cmp	result1, #0 wz
23d28     10 4E 05 51 |  if_ne	add	fp, #16
23d2c     A7 02 68 5C |  if_ne	wrlong	#1, fp
23d30     10 4E 85 51 |  if_ne	sub	fp, #16
23d34                 | LR__3792
23d34                 | LR__3793
23d34                 | LR__3794
23d34                 | LR__3795
23d34                 | LR__3796
23d34     10 4E 05 F1 | 	add	fp, #16
23d38     A7 20 0A FB | 	rdlong	local02, fp wz
23d3c     10 4E 85 F1 | 	sub	fp, #16
23d40     04 4E 05 51 |  if_ne	add	fp, #4
23d44     A7 20 02 5B |  if_ne	rdlong	local02, fp
23d48     04 4E 85 51 |  if_ne	sub	fp, #4
23d4c     10 01 68 5C |  if_ne	wrlong	#0, local02
23d50                 | ' 
23d50                 | ' 	return res ;
23d50     10 4E 05 F1 | 	add	fp, #16
23d54     A7 FA 01 FB | 	rdlong	result1, fp
23d58     10 4E 85 F1 | 	sub	fp, #16
23d5c                 | LR__3797
23d5c     A7 F0 03 F6 | 	mov	ptra, fp
23d60     B2 00 A0 FD | 	call	#popregs_
23d64                 | _fatfs_cc_f_open_ret
23d64     2D 00 64 FD | 	ret
23d68                 | 
23d68                 | _fatfs_cc_f_read
23d68     0E 4A 05 F6 | 	mov	COUNT_, #14
23d6c     A8 00 A0 FD | 	call	#pushregs_
23d70     38 F0 07 F1 | 	add	ptra, #56
23d74     04 4E 05 F1 | 	add	fp, #4
23d78     A7 12 62 FC | 	wrlong	arg01, fp
23d7c     04 4E 05 F1 | 	add	fp, #4
23d80     A7 14 62 FC | 	wrlong	arg02, fp
23d84     04 4E 05 F1 | 	add	fp, #4
23d88     A7 16 62 FC | 	wrlong	arg03, fp
23d8c     04 4E 05 F1 | 	add	fp, #4
23d90     A7 18 62 FC | 	wrlong	arg04, fp
23d94     08 4E 85 F1 | 	sub	fp, #8
23d98     A7 FA 01 FB | 	rdlong	result1, fp
23d9c     2C 4E 05 F1 | 	add	fp, #44
23da0     A7 FA 61 FC | 	wrlong	result1, fp
23da4     24 4E 85 F1 | 	sub	fp, #36
23da8     A7 FA 01 FB | 	rdlong	result1, fp
23dac     FD 00 68 FC | 	wrlong	#0, result1
23db0     0C 4E 85 F1 | 	sub	fp, #12
23db4     A7 12 02 FB | 	rdlong	arg01, fp
23db8     14 4E 05 F1 | 	add	fp, #20
23dbc     A7 14 02 F6 | 	mov	arg02, fp
23dc0     18 4E 85 F1 | 	sub	fp, #24
23dc4     24 F7 BF FD | 	call	#_fatfs_cc_validate
23dc8     14 4E 05 F1 | 	add	fp, #20
23dcc     A7 FA 61 FC | 	wrlong	result1, fp
23dd0     00 FA 4D F2 | 	cmps	result1, #0 wz
23dd4     14 4E 85 F1 | 	sub	fp, #20
23dd8     20 00 90 5D |  if_ne	jmp	#LR__3800
23ddc     04 4E 05 F1 | 	add	fp, #4
23de0     A7 14 02 FB | 	rdlong	arg02, fp
23de4     11 14 06 F1 | 	add	arg02, #17
23de8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23dec     10 4E 05 F1 | 	add	fp, #16
23df0     A7 14 62 FC | 	wrlong	arg02, fp
23df4     14 4E 85 F1 | 	sub	fp, #20
23df8     10 00 90 AD |  if_e	jmp	#LR__3801
23dfc                 | LR__3800
23dfc     14 4E 05 F1 | 	add	fp, #20
23e00     A7 FA 01 FB | 	rdlong	result1, fp
23e04     14 4E 85 F1 | 	sub	fp, #20
23e08     EC 05 90 FD | 	jmp	#LR__3820
23e0c                 | LR__3801
23e0c     04 4E 05 F1 | 	add	fp, #4
23e10     A7 18 02 FB | 	rdlong	arg04, fp
23e14     04 4E 85 F1 | 	sub	fp, #4
23e18     10 18 06 F1 | 	add	arg04, #16
23e1c     0C 19 C2 FA | 	rdbyte	arg04, arg04
23e20     01 18 CE F7 | 	test	arg04, #1 wz
23e24     07 FA 05 A6 |  if_e	mov	result1, #7
23e28     CC 05 90 AD |  if_e	jmp	#LR__3820
23e2c     04 4E 05 F1 | 	add	fp, #4
23e30     A7 1E 02 FB | 	rdlong	local01, fp
23e34     0F 21 02 F6 | 	mov	local02, local01
23e38     0C 20 06 F1 | 	add	local02, #12
23e3c     10 23 02 FB | 	rdlong	local03, local02
23e40     14 1E 06 F1 | 	add	local01, #20
23e44     0F 1F 02 FB | 	rdlong	local01, local01
23e48     0F 23 82 F1 | 	sub	local03, local01
23e4c     20 4E 05 F1 | 	add	fp, #32
23e50     A7 22 62 FC | 	wrlong	local03, fp
23e54     18 4E 85 F1 | 	sub	fp, #24
23e58     A7 24 02 FB | 	rdlong	local04, fp
23e5c     0C 4E 85 F1 | 	sub	fp, #12
23e60     11 25 1A F2 | 	cmp	local04, local03 wcz
23e64     24 4E 05 11 |  if_a	add	fp, #36
23e68     A7 24 02 1B |  if_a	rdlong	local04, fp
23e6c     18 4E 85 11 |  if_a	sub	fp, #24
23e70     A7 24 62 1C |  if_a	wrlong	local04, fp
23e74     0C 4E 85 11 |  if_a	sub	fp, #12
23e78                 | ' 
23e78                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
23e78                 | LR__3802
23e78     0C 4E 05 F1 | 	add	fp, #12
23e7c     A7 20 02 FB | 	rdlong	local02, fp
23e80     0C 4E 85 F1 | 	sub	fp, #12
23e84     10 25 02 F6 | 	mov	local04, local02
23e88     01 24 16 F2 | 	cmp	local04, #1 wc
23e8c     64 05 90 CD |  if_b	jmp	#LR__3819
23e90     04 4E 05 F1 | 	add	fp, #4
23e94     A7 22 02 FB | 	rdlong	local03, fp
23e98     04 4E 85 F1 | 	sub	fp, #4
23e9c     14 22 06 F1 | 	add	local03, #20
23ea0     11 23 02 FB | 	rdlong	local03, local03
23ea4     FF 23 CE F7 | 	test	local03, #511 wz
23ea8     3C 04 90 5D |  if_ne	jmp	#LR__3817
23eac     04 4E 05 F1 | 	add	fp, #4
23eb0     A7 1E 02 FB | 	rdlong	local01, fp
23eb4     14 1E 06 F1 | 	add	local01, #20
23eb8     0F 23 02 FB | 	rdlong	local03, local01
23ebc     09 22 46 F0 | 	shr	local03, #9
23ec0     14 4E 05 F1 | 	add	fp, #20
23ec4     A7 26 02 FB | 	rdlong	local05, fp
23ec8     13 29 02 F6 | 	mov	local06, local05
23ecc     0A 28 06 F1 | 	add	local06, #10
23ed0     14 2B E2 FA | 	rdword	local07, local06
23ed4     0A 28 86 F1 | 	sub	local06, #10
23ed8     15 2D 32 F9 | 	getword	local08, local07, #0
23edc     01 2C 86 F1 | 	sub	local08, #1
23ee0     16 23 0A F5 | 	and	local03, local08 wz
23ee4     18 4E 05 F1 | 	add	fp, #24
23ee8     A7 22 62 FC | 	wrlong	local03, fp
23eec     30 4E 85 F1 | 	sub	fp, #48
23ef0     E0 00 90 5D |  if_ne	jmp	#LR__3807
23ef4     04 4E 05 F1 | 	add	fp, #4
23ef8     A7 22 02 FB | 	rdlong	local03, fp
23efc     04 4E 85 F1 | 	sub	fp, #4
23f00     14 22 06 F1 | 	add	local03, #20
23f04     11 23 0A FB | 	rdlong	local03, local03 wz
23f08     20 00 90 5D |  if_ne	jmp	#LR__3803
23f0c     04 4E 05 F1 | 	add	fp, #4
23f10     A7 22 02 FB | 	rdlong	local03, fp
23f14     08 22 06 F1 | 	add	local03, #8
23f18     11 23 02 FB | 	rdlong	local03, local03
23f1c     18 4E 05 F1 | 	add	fp, #24
23f20     A7 22 62 FC | 	wrlong	local03, fp
23f24     1C 4E 85 F1 | 	sub	fp, #28
23f28     28 00 90 FD | 	jmp	#LR__3804
23f2c                 | LR__3803
23f2c     04 4E 05 F1 | 	add	fp, #4
23f30     A7 2C 02 FB | 	rdlong	local08, fp
23f34     16 13 02 F6 | 	mov	arg01, local08
23f38     04 4E 85 F1 | 	sub	fp, #4
23f3c     18 2C 06 F1 | 	add	local08, #24
23f40     16 15 02 FB | 	rdlong	arg02, local08
23f44     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
23f48     1C 4E 05 F1 | 	add	fp, #28
23f4c     A7 FA 61 FC | 	wrlong	result1, fp
23f50     1C 4E 85 F1 | 	sub	fp, #28
23f54                 | LR__3804
23f54     1C 4E 05 F1 | 	add	fp, #28
23f58     A7 22 02 FB | 	rdlong	local03, fp
23f5c     1C 4E 85 F1 | 	sub	fp, #28
23f60     02 22 16 F2 | 	cmp	local03, #2 wc
23f64     1C 00 90 3D |  if_ae	jmp	#LR__3805
23f68     04 4E 05 F1 | 	add	fp, #4
23f6c     A7 22 02 FB | 	rdlong	local03, fp
23f70     04 4E 85 F1 | 	sub	fp, #4
23f74     11 22 06 F1 | 	add	local03, #17
23f78     11 05 48 FC | 	wrbyte	#2, local03
23f7c     02 FA 05 F6 | 	mov	result1, #2
23f80     74 04 90 FD | 	jmp	#LR__3820
23f84                 | LR__3805
23f84     1C 4E 05 F1 | 	add	fp, #28
23f88     A7 22 02 FB | 	rdlong	local03, fp
23f8c     1C 4E 85 F1 | 	sub	fp, #28
23f90     FF FF 7F FF 
23f94     FF 23 0E F2 | 	cmp	local03, ##-1 wz
23f98     1C 00 90 5D |  if_ne	jmp	#LR__3806
23f9c     04 4E 05 F1 | 	add	fp, #4
23fa0     A7 22 02 FB | 	rdlong	local03, fp
23fa4     04 4E 85 F1 | 	sub	fp, #4
23fa8     11 22 06 F1 | 	add	local03, #17
23fac     11 03 48 FC | 	wrbyte	#1, local03
23fb0     01 FA 05 F6 | 	mov	result1, #1
23fb4     40 04 90 FD | 	jmp	#LR__3820
23fb8                 | LR__3806
23fb8     04 4E 05 F1 | 	add	fp, #4
23fbc     A7 22 02 FB | 	rdlong	local03, fp
23fc0     18 4E 05 F1 | 	add	fp, #24
23fc4     A7 2C 02 FB | 	rdlong	local08, fp
23fc8     1C 4E 85 F1 | 	sub	fp, #28
23fcc     18 22 06 F1 | 	add	local03, #24
23fd0     11 2D 62 FC | 	wrlong	local08, local03
23fd4                 | LR__3807
23fd4     18 4E 05 F1 | 	add	fp, #24
23fd8     A7 12 02 FB | 	rdlong	arg01, fp
23fdc     14 4E 85 F1 | 	sub	fp, #20
23fe0     A7 22 02 FB | 	rdlong	local03, fp
23fe4     04 4E 85 F1 | 	sub	fp, #4
23fe8     18 22 06 F1 | 	add	local03, #24
23fec     11 15 02 FB | 	rdlong	arg02, local03
23ff0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
23ff4     20 4E 05 F1 | 	add	fp, #32
23ff8     A7 FA 61 FC | 	wrlong	result1, fp
23ffc     20 4E 85 F1 | 	sub	fp, #32
24000     00 FA 0D F2 | 	cmp	result1, #0 wz
24004     1C 00 90 5D |  if_ne	jmp	#LR__3808
24008     04 4E 05 F1 | 	add	fp, #4
2400c     A7 22 02 FB | 	rdlong	local03, fp
24010     04 4E 85 F1 | 	sub	fp, #4
24014     11 22 06 F1 | 	add	local03, #17
24018     11 05 48 FC | 	wrbyte	#2, local03
2401c     02 FA 05 F6 | 	mov	result1, #2
24020     D4 03 90 FD | 	jmp	#LR__3820
24024                 | LR__3808
24024     20 4E 05 F1 | 	add	fp, #32
24028     A7 22 02 FB | 	rdlong	local03, fp
2402c     10 4E 05 F1 | 	add	fp, #16
24030     A7 2C 02 FB | 	rdlong	local08, fp
24034     16 23 02 F1 | 	add	local03, local08
24038     10 4E 85 F1 | 	sub	fp, #16
2403c     A7 22 62 FC | 	wrlong	local03, fp
24040     14 4E 85 F1 | 	sub	fp, #20
24044     A7 22 02 FB | 	rdlong	local03, fp
24048     09 22 46 F0 | 	shr	local03, #9
2404c     20 4E 05 F1 | 	add	fp, #32
24050     A7 22 62 FC | 	wrlong	local03, fp
24054     2C 4E 85 F1 | 	sub	fp, #44
24058     01 22 16 F2 | 	cmp	local03, #1 wc
2405c     5C 01 90 CD |  if_b	jmp	#LR__3812
24060     30 4E 05 F1 | 	add	fp, #48
24064     A7 22 02 FB | 	rdlong	local03, fp
24068     04 4E 85 F1 | 	sub	fp, #4
2406c     A7 2C 02 FB | 	rdlong	local08, fp
24070     16 23 02 F1 | 	add	local03, local08
24074     14 4E 85 F1 | 	sub	fp, #20
24078     A7 2C 02 FB | 	rdlong	local08, fp
2407c     18 4E 85 F1 | 	sub	fp, #24
24080     0A 2C 06 F1 | 	add	local08, #10
24084     16 2D E2 FA | 	rdword	local08, local08
24088     16 23 1A F2 | 	cmp	local03, local08 wcz
2408c     28 00 90 ED |  if_be	jmp	#LR__3809
24090     18 4E 05 F1 | 	add	fp, #24
24094     A7 1E 02 FB | 	rdlong	local01, fp
24098     0A 1E 06 F1 | 	add	local01, #10
2409c     0F 23 E2 FA | 	rdword	local03, local01
240a0     18 4E 05 F1 | 	add	fp, #24
240a4     A7 2C 02 FB | 	rdlong	local08, fp
240a8     16 23 82 F1 | 	sub	local03, local08
240ac     04 4E 85 F1 | 	sub	fp, #4
240b0     A7 22 62 FC | 	wrlong	local03, fp
240b4     2C 4E 85 F1 | 	sub	fp, #44
240b8                 | LR__3809
240b8     18 4E 05 F1 | 	add	fp, #24
240bc     A7 1E 02 FB | 	rdlong	local01, fp
240c0     01 1E 06 F1 | 	add	local01, #1
240c4     0F 13 C2 FA | 	rdbyte	arg01, local01
240c8     1C 4E 05 F1 | 	add	fp, #28
240cc     A7 14 02 FB | 	rdlong	arg02, fp
240d0     14 4E 85 F1 | 	sub	fp, #20
240d4     A7 16 02 FB | 	rdlong	arg03, fp
240d8     0C 4E 05 F1 | 	add	fp, #12
240dc     A7 18 02 FB | 	rdlong	arg04, fp
240e0     2C 4E 85 F1 | 	sub	fp, #44
240e4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
240e8     00 FA 0D F2 | 	cmp	result1, #0 wz
240ec     1C 00 90 AD |  if_e	jmp	#LR__3810
240f0     04 4E 05 F1 | 	add	fp, #4
240f4     A7 22 02 FB | 	rdlong	local03, fp
240f8     04 4E 85 F1 | 	sub	fp, #4
240fc     11 22 06 F1 | 	add	local03, #17
24100     11 03 48 FC | 	wrbyte	#1, local03
24104     01 FA 05 F6 | 	mov	result1, #1
24108     EC 02 90 FD | 	jmp	#LR__3820
2410c                 | LR__3810
2410c     04 4E 05 F1 | 	add	fp, #4
24110     A7 1E 02 FB | 	rdlong	local01, fp
24114     04 4E 85 F1 | 	sub	fp, #4
24118     10 1E 06 F1 | 	add	local01, #16
2411c     0F 23 C2 FA | 	rdbyte	local03, local01
24120     80 22 CE F7 | 	test	local03, #128 wz
24124     78 00 90 AD |  if_e	jmp	#LR__3811
24128     04 4E 05 F1 | 	add	fp, #4
2412c     A7 2C 02 FB | 	rdlong	local08, fp
24130     1C 2C 06 F1 | 	add	local08, #28
24134     16 2D 02 FB | 	rdlong	local08, local08
24138     1C 4E 05 F1 | 	add	fp, #28
2413c     A7 2E 02 FB | 	rdlong	local09, fp
24140     17 2D 82 F1 | 	sub	local08, local09
24144     0C 4E 05 F1 | 	add	fp, #12
24148     A7 30 02 FB | 	rdlong	local10, fp
2414c     2C 4E 85 F1 | 	sub	fp, #44
24150     18 33 02 F6 | 	mov	local11, local10
24154     19 2D 12 F2 | 	cmp	local08, local11 wc
24158     44 00 90 3D |  if_ae	jmp	#LR__3811
2415c     34 4E 05 F1 | 	add	fp, #52
24160     A7 12 02 FB | 	rdlong	arg01, fp
24164     30 4E 85 F1 | 	sub	fp, #48
24168     A7 14 02 FB | 	rdlong	arg02, fp
2416c     0A 33 02 F6 | 	mov	local11, arg02
24170     1C 32 06 F1 | 	add	local11, #28
24174     19 2F 02 FB | 	rdlong	local09, local11
24178     1C 4E 05 F1 | 	add	fp, #28
2417c     A7 26 02 FB | 	rdlong	local05, fp
24180     13 2F 82 F1 | 	sub	local09, local05
24184     09 2E 66 F0 | 	shl	local09, #9
24188     17 33 02 F6 | 	mov	local11, local09
2418c     17 13 02 F1 | 	add	arg01, local09
24190     20 4E 85 F1 | 	sub	fp, #32
24194     28 14 06 F1 | 	add	arg02, #40
24198     09 16 C6 F9 | 	decod	arg03, #9
2419c     54 49 BF FD | 	call	#__system____builtin_memmove
241a0                 | LR__3811
241a0     2C 4E 05 F1 | 	add	fp, #44
241a4     A7 22 02 FB | 	rdlong	local03, fp
241a8     09 22 66 F0 | 	shl	local03, #9
241ac     04 4E 85 F1 | 	sub	fp, #4
241b0     A7 22 62 FC | 	wrlong	local03, fp
241b4     28 4E 85 F1 | 	sub	fp, #40
241b8                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
241b8                 | ' 				}
241b8                 | ' 
241b8                 | ' 
241b8                 | ' 				rcnt =  ((UINT) 512 )  * cc;
241b8                 | ' 				continue;
241b8     B4 01 90 FD | 	jmp	#LR__3818
241bc                 | LR__3812
241bc     04 4E 05 F1 | 	add	fp, #4
241c0     A7 22 02 FB | 	rdlong	local03, fp
241c4     1C 22 06 F1 | 	add	local03, #28
241c8     11 23 02 FB | 	rdlong	local03, local03
241cc     1C 4E 05 F1 | 	add	fp, #28
241d0     A7 1E 02 FB | 	rdlong	local01, fp
241d4     20 4E 85 F1 | 	sub	fp, #32
241d8     0F 23 0A F2 | 	cmp	local03, local01 wz
241dc     EC 00 90 AD |  if_e	jmp	#LR__3816
241e0     04 4E 05 F1 | 	add	fp, #4
241e4     A7 1E 02 FB | 	rdlong	local01, fp
241e8     04 4E 85 F1 | 	sub	fp, #4
241ec     10 1E 06 F1 | 	add	local01, #16
241f0     0F 23 C2 FA | 	rdbyte	local03, local01
241f4     80 22 CE F7 | 	test	local03, #128 wz
241f8     7C 00 90 AD |  if_e	jmp	#LR__3814
241fc     18 4E 05 F1 | 	add	fp, #24
24200     A7 1E 02 FB | 	rdlong	local01, fp
24204     01 1E 06 F1 | 	add	local01, #1
24208     0F 13 C2 FA | 	rdbyte	arg01, local01
2420c     14 4E 85 F1 | 	sub	fp, #20
24210     A7 22 02 FB | 	rdlong	local03, fp
24214     11 15 02 F6 | 	mov	arg02, local03
24218     28 14 06 F1 | 	add	arg02, #40
2421c     04 4E 85 F1 | 	sub	fp, #4
24220     1C 22 06 F1 | 	add	local03, #28
24224     11 17 02 FB | 	rdlong	arg03, local03
24228     01 18 06 F6 | 	mov	arg04, #1
2422c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
24230     00 FA 0D F2 | 	cmp	result1, #0 wz
24234     1C 00 90 AD |  if_e	jmp	#LR__3813
24238     04 4E 05 F1 | 	add	fp, #4
2423c     A7 22 02 FB | 	rdlong	local03, fp
24240     04 4E 85 F1 | 	sub	fp, #4
24244     11 22 06 F1 | 	add	local03, #17
24248     11 03 48 FC | 	wrbyte	#1, local03
2424c     01 FA 05 F6 | 	mov	result1, #1
24250     A4 01 90 FD | 	jmp	#LR__3820
24254                 | LR__3813
24254     04 4E 05 F1 | 	add	fp, #4
24258     A7 32 02 FB | 	rdlong	local11, fp
2425c     19 23 02 F6 | 	mov	local03, local11
24260     04 4E 85 F1 | 	sub	fp, #4
24264     10 32 06 F1 | 	add	local11, #16
24268     19 33 C2 FA | 	rdbyte	local11, local11
2426c     7F 32 06 F5 | 	and	local11, #127
24270     10 22 06 F1 | 	add	local03, #16
24274     11 33 42 FC | 	wrbyte	local11, local03
24278                 | LR__3814
24278     18 4E 05 F1 | 	add	fp, #24
2427c     A7 1E 02 FB | 	rdlong	local01, fp
24280     01 1E 06 F1 | 	add	local01, #1
24284     0F 13 C2 FA | 	rdbyte	arg01, local01
24288     14 4E 85 F1 | 	sub	fp, #20
2428c     A7 14 02 FB | 	rdlong	arg02, fp
24290     28 14 06 F1 | 	add	arg02, #40
24294     1C 4E 05 F1 | 	add	fp, #28
24298     A7 16 02 FB | 	rdlong	arg03, fp
2429c     20 4E 85 F1 | 	sub	fp, #32
242a0     01 18 06 F6 | 	mov	arg04, #1
242a4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
242a8     00 FA 0D F2 | 	cmp	result1, #0 wz
242ac     1C 00 90 AD |  if_e	jmp	#LR__3815
242b0     04 4E 05 F1 | 	add	fp, #4
242b4     A7 22 02 FB | 	rdlong	local03, fp
242b8     04 4E 85 F1 | 	sub	fp, #4
242bc     11 22 06 F1 | 	add	local03, #17
242c0     11 03 48 FC | 	wrbyte	#1, local03
242c4     01 FA 05 F6 | 	mov	result1, #1
242c8     2C 01 90 FD | 	jmp	#LR__3820
242cc                 | LR__3815
242cc                 | LR__3816
242cc     04 4E 05 F1 | 	add	fp, #4
242d0     A7 22 02 FB | 	rdlong	local03, fp
242d4     1C 4E 05 F1 | 	add	fp, #28
242d8     A7 32 02 FB | 	rdlong	local11, fp
242dc     20 4E 85 F1 | 	sub	fp, #32
242e0     1C 22 06 F1 | 	add	local03, #28
242e4     11 33 62 FC | 	wrlong	local11, local03
242e8                 | LR__3817
242e8     04 4E 05 F1 | 	add	fp, #4
242ec     A7 1E 02 FB | 	rdlong	local01, fp
242f0     14 1E 06 F1 | 	add	local01, #20
242f4     0F 33 02 FB | 	rdlong	local11, local01
242f8     FF 33 06 F5 | 	and	local11, #511
242fc     09 22 C6 F9 | 	decod	local03, #9
24300     19 23 82 F1 | 	sub	local03, local11
24304     24 4E 05 F1 | 	add	fp, #36
24308     A7 22 62 FC | 	wrlong	local03, fp
2430c     1C 4E 85 F1 | 	sub	fp, #28
24310     A7 32 02 FB | 	rdlong	local11, fp
24314     0C 4E 85 F1 | 	sub	fp, #12
24318     19 23 1A F2 | 	cmp	local03, local11 wcz
2431c     0C 4E 05 11 |  if_a	add	fp, #12
24320     A7 22 02 1B |  if_a	rdlong	local03, fp
24324     1C 4E 05 11 |  if_a	add	fp, #28
24328     A7 22 62 1C |  if_a	wrlong	local03, fp
2432c     28 4E 85 11 |  if_a	sub	fp, #40
24330     34 4E 05 F1 | 	add	fp, #52
24334     A7 12 02 FB | 	rdlong	arg01, fp
24338     30 4E 85 F1 | 	sub	fp, #48
2433c     A7 28 02 FB | 	rdlong	local06, fp
24340     14 15 02 F6 | 	mov	arg02, local06
24344     28 14 06 F1 | 	add	arg02, #40
24348     14 28 06 F1 | 	add	local06, #20
2434c     14 33 02 FB | 	rdlong	local11, local06
24350     19 2F 02 F6 | 	mov	local09, local11
24354     17 31 02 F6 | 	mov	local10, local09
24358     FF 31 06 F5 | 	and	local10, #511
2435c     18 15 02 F1 | 	add	arg02, local10
24360     24 4E 05 F1 | 	add	fp, #36
24364     A7 16 02 FB | 	rdlong	arg03, fp
24368     28 4E 85 F1 | 	sub	fp, #40
2436c     84 47 BF FD | 	call	#__system____builtin_memmove
24370                 | LR__3818
24370     0C 4E 05 F1 | 	add	fp, #12
24374     A7 22 02 FB | 	rdlong	local03, fp
24378     1C 4E 05 F1 | 	add	fp, #28
2437c     A7 2C 02 FB | 	rdlong	local08, fp
24380     16 23 82 F1 | 	sub	local03, local08
24384     1C 4E 85 F1 | 	sub	fp, #28
24388     A7 22 62 FC | 	wrlong	local03, fp
2438c     04 4E 05 F1 | 	add	fp, #4
24390     A7 1E 02 FB | 	rdlong	local01, fp
24394     0F 2B 02 FB | 	rdlong	local07, local01
24398     18 4E 05 F1 | 	add	fp, #24
2439c     A7 2C 02 FB | 	rdlong	local08, fp
243a0     16 2B 02 F1 | 	add	local07, local08
243a4     0F 2B 62 FC | 	wrlong	local07, local01
243a8     0C 4E 05 F1 | 	add	fp, #12
243ac     A7 22 02 FB | 	rdlong	local03, fp
243b0     0C 4E 85 F1 | 	sub	fp, #12
243b4     A7 34 02 FB | 	rdlong	local12, fp
243b8     1A 23 02 F1 | 	add	local03, local12
243bc     0C 4E 05 F1 | 	add	fp, #12
243c0     A7 22 62 FC | 	wrlong	local03, fp
243c4     30 4E 85 F1 | 	sub	fp, #48
243c8     A7 36 02 FB | 	rdlong	local13, fp
243cc     1B 23 02 F6 | 	mov	local03, local13
243d0     14 36 06 F1 | 	add	local13, #20
243d4     1B 39 02 FB | 	rdlong	local14, local13
243d8     24 4E 05 F1 | 	add	fp, #36
243dc     A7 28 02 FB | 	rdlong	local06, fp
243e0     28 4E 85 F1 | 	sub	fp, #40
243e4     14 39 02 F1 | 	add	local14, local06
243e8     14 22 06 F1 | 	add	local03, #20
243ec     11 39 62 FC | 	wrlong	local14, local03
243f0     84 FA 9F FD | 	jmp	#LR__3802
243f4                 | LR__3819
243f4                 | ' 
243f4                 | ' 
243f4                 | ' 
243f4                 | ' 
243f4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
243f4                 | ' 
243f4                 | ' 	}
243f4                 | ' 
243f4                 | ' 	return FR_OK ;
243f4     00 FA 05 F6 | 	mov	result1, #0
243f8                 | LR__3820
243f8     A7 F0 03 F6 | 	mov	ptra, fp
243fc     B2 00 A0 FD | 	call	#popregs_
24400                 | _fatfs_cc_f_read_ret
24400     2D 00 64 FD | 	ret
24404                 | 
24404                 | _fatfs_cc_f_write
24404     15 4A 05 F6 | 	mov	COUNT_, #21
24408     A8 00 A0 FD | 	call	#pushregs_
2440c     34 F0 07 F1 | 	add	ptra, #52
24410     04 4E 05 F1 | 	add	fp, #4
24414     A7 12 62 FC | 	wrlong	arg01, fp
24418     04 4E 05 F1 | 	add	fp, #4
2441c     A7 14 62 FC | 	wrlong	arg02, fp
24420     04 4E 05 F1 | 	add	fp, #4
24424     A7 16 62 FC | 	wrlong	arg03, fp
24428     04 4E 05 F1 | 	add	fp, #4
2442c     A7 18 62 FC | 	wrlong	arg04, fp
24430     08 4E 85 F1 | 	sub	fp, #8
24434     A7 FA 01 FB | 	rdlong	result1, fp
24438     28 4E 05 F1 | 	add	fp, #40
2443c     A7 FA 61 FC | 	wrlong	result1, fp
24440     20 4E 85 F1 | 	sub	fp, #32
24444     A7 FA 01 FB | 	rdlong	result1, fp
24448     FD 00 68 FC | 	wrlong	#0, result1
2444c     0C 4E 85 F1 | 	sub	fp, #12
24450     A7 12 02 FB | 	rdlong	arg01, fp
24454     14 4E 05 F1 | 	add	fp, #20
24458     A7 14 02 F6 | 	mov	arg02, fp
2445c     18 4E 85 F1 | 	sub	fp, #24
24460     88 F0 BF FD | 	call	#_fatfs_cc_validate
24464     14 4E 05 F1 | 	add	fp, #20
24468     A7 FA 61 FC | 	wrlong	result1, fp
2446c     00 FA 4D F2 | 	cmps	result1, #0 wz
24470     14 4E 85 F1 | 	sub	fp, #20
24474     20 00 90 5D |  if_ne	jmp	#LR__3830
24478     04 4E 05 F1 | 	add	fp, #4
2447c     A7 14 02 FB | 	rdlong	arg02, fp
24480     11 14 06 F1 | 	add	arg02, #17
24484     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
24488     10 4E 05 F1 | 	add	fp, #16
2448c     A7 14 62 FC | 	wrlong	arg02, fp
24490     14 4E 85 F1 | 	sub	fp, #20
24494     10 00 90 AD |  if_e	jmp	#LR__3831
24498                 | LR__3830
24498     14 4E 05 F1 | 	add	fp, #20
2449c     A7 FA 01 FB | 	rdlong	result1, fp
244a0     14 4E 85 F1 | 	sub	fp, #20
244a4     44 07 90 FD | 	jmp	#LR__3853
244a8                 | LR__3831
244a8     04 4E 05 F1 | 	add	fp, #4
244ac     A7 14 02 FB | 	rdlong	arg02, fp
244b0     04 4E 85 F1 | 	sub	fp, #4
244b4     10 14 06 F1 | 	add	arg02, #16
244b8     0A 15 C2 FA | 	rdbyte	arg02, arg02
244bc     02 14 CE F7 | 	test	arg02, #2 wz
244c0     07 FA 05 A6 |  if_e	mov	result1, #7
244c4     24 07 90 AD |  if_e	jmp	#LR__3853
244c8     04 4E 05 F1 | 	add	fp, #4
244cc     A7 14 02 FB | 	rdlong	arg02, fp
244d0     0A 13 02 F6 | 	mov	arg01, arg02
244d4     14 12 06 F1 | 	add	arg01, #20
244d8     09 13 02 FB | 	rdlong	arg01, arg01
244dc     08 4E 05 F1 | 	add	fp, #8
244e0     A7 FA 01 FB | 	rdlong	result1, fp
244e4     FD 12 02 F1 | 	add	arg01, result1
244e8     0C 4E 85 F1 | 	sub	fp, #12
244ec     14 14 06 F1 | 	add	arg02, #20
244f0     0A FB 01 FB | 	rdlong	result1, arg02
244f4     FD 12 12 F2 | 	cmp	arg01, result1 wc
244f8     24 00 90 3D |  if_ae	jmp	#LR__3832
244fc     04 4E 05 F1 | 	add	fp, #4
24500     A7 14 02 FB | 	rdlong	arg02, fp
24504     01 FA 65 F6 | 	neg	result1, #1
24508     14 14 06 F1 | 	add	arg02, #20
2450c     0A 15 02 FB | 	rdlong	arg02, arg02
24510     0A FB 81 F1 | 	sub	result1, arg02
24514     08 4E 05 F1 | 	add	fp, #8
24518     A7 FA 61 FC | 	wrlong	result1, fp
2451c     0C 4E 85 F1 | 	sub	fp, #12
24520                 | LR__3832
24520                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24520                 | ' 	}
24520                 | ' 
24520                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24520                 | LR__3833
24520     0C 4E 05 F1 | 	add	fp, #12
24524     A7 FA 01 FB | 	rdlong	result1, fp
24528     0C 4E 85 F1 | 	sub	fp, #12
2452c     01 FA 15 F2 | 	cmp	result1, #1 wc
24530     90 06 90 CD |  if_b	jmp	#LR__3852
24534     04 4E 05 F1 | 	add	fp, #4
24538     A7 FA 01 FB | 	rdlong	result1, fp
2453c     04 4E 85 F1 | 	sub	fp, #4
24540     14 FA 05 F1 | 	add	result1, #20
24544     FD FA 01 FB | 	rdlong	result1, result1
24548     FF FB CD F7 | 	test	result1, #511 wz
2454c     D8 04 90 5D |  if_ne	jmp	#LR__3848
24550     04 4E 05 F1 | 	add	fp, #4
24554     A7 FA 01 FB | 	rdlong	result1, fp
24558     14 FA 05 F1 | 	add	result1, #20
2455c     FD FA 01 FB | 	rdlong	result1, result1
24560     09 FA 45 F0 | 	shr	result1, #9
24564     14 4E 05 F1 | 	add	fp, #20
24568     A7 14 02 FB | 	rdlong	arg02, fp
2456c     0A 14 06 F1 | 	add	arg02, #10
24570     0A 19 E2 FA | 	rdword	arg04, arg02
24574     0C 15 32 F9 | 	getword	arg02, arg04, #0
24578     01 14 86 F1 | 	sub	arg02, #1
2457c     0A FB 09 F5 | 	and	result1, arg02 wz
24580     14 4E 05 F1 | 	add	fp, #20
24584     A7 FA 61 FC | 	wrlong	result1, fp
24588     2C 4E 85 F1 | 	sub	fp, #44
2458c     44 01 90 5D |  if_ne	jmp	#LR__3839
24590     04 4E 05 F1 | 	add	fp, #4
24594     A7 FA 01 FB | 	rdlong	result1, fp
24598     04 4E 85 F1 | 	sub	fp, #4
2459c     14 FA 05 F1 | 	add	result1, #20
245a0     FD 14 0A FB | 	rdlong	arg02, result1 wz
245a4     44 00 90 5D |  if_ne	jmp	#LR__3834
245a8     04 4E 05 F1 | 	add	fp, #4
245ac     A7 14 02 FB | 	rdlong	arg02, fp
245b0     08 14 06 F1 | 	add	arg02, #8
245b4     0A 15 0A FB | 	rdlong	arg02, arg02 wz
245b8     18 4E 05 F1 | 	add	fp, #24
245bc     A7 14 62 FC | 	wrlong	arg02, fp
245c0     1C 4E 85 F1 | 	sub	fp, #28
245c4     4C 00 90 5D |  if_ne	jmp	#LR__3835
245c8     04 4E 05 F1 | 	add	fp, #4
245cc     A7 12 02 FB | 	rdlong	arg01, fp
245d0     04 4E 85 F1 | 	sub	fp, #4
245d4     00 14 06 F6 | 	mov	arg02, #0
245d8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
245dc     1C 4E 05 F1 | 	add	fp, #28
245e0     A7 FA 61 FC | 	wrlong	result1, fp
245e4     1C 4E 85 F1 | 	sub	fp, #28
245e8     28 00 90 FD | 	jmp	#LR__3835
245ec                 | LR__3834
245ec     04 4E 05 F1 | 	add	fp, #4
245f0     A7 18 02 FB | 	rdlong	arg04, fp
245f4     0C 13 02 F6 | 	mov	arg01, arg04
245f8     04 4E 85 F1 | 	sub	fp, #4
245fc     18 18 06 F1 | 	add	arg04, #24
24600     0C 15 02 FB | 	rdlong	arg02, arg04
24604     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
24608     1C 4E 05 F1 | 	add	fp, #28
2460c     A7 FA 61 FC | 	wrlong	result1, fp
24610     1C 4E 85 F1 | 	sub	fp, #28
24614                 | LR__3835
24614     1C 4E 05 F1 | 	add	fp, #28
24618     A7 FA 09 FB | 	rdlong	result1, fp wz
2461c     1C 4E 85 F1 | 	sub	fp, #28
24620     A0 05 90 AD |  if_e	jmp	#LR__3852
24624     1C 4E 05 F1 | 	add	fp, #28
24628     A7 FA 01 FB | 	rdlong	result1, fp
2462c     1C 4E 85 F1 | 	sub	fp, #28
24630     01 FA 0D F2 | 	cmp	result1, #1 wz
24634     1C 00 90 5D |  if_ne	jmp	#LR__3836
24638     04 4E 05 F1 | 	add	fp, #4
2463c     A7 FA 01 FB | 	rdlong	result1, fp
24640     04 4E 85 F1 | 	sub	fp, #4
24644     11 FA 05 F1 | 	add	result1, #17
24648     FD 04 48 FC | 	wrbyte	#2, result1
2464c     02 FA 05 F6 | 	mov	result1, #2
24650     98 05 90 FD | 	jmp	#LR__3853
24654                 | LR__3836
24654     1C 4E 05 F1 | 	add	fp, #28
24658     A7 FA 01 FB | 	rdlong	result1, fp
2465c     1C 4E 85 F1 | 	sub	fp, #28
24660     FF FF 7F FF 
24664     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24668     1C 00 90 5D |  if_ne	jmp	#LR__3837
2466c     04 4E 05 F1 | 	add	fp, #4
24670     A7 FA 01 FB | 	rdlong	result1, fp
24674     04 4E 85 F1 | 	sub	fp, #4
24678     11 FA 05 F1 | 	add	result1, #17
2467c     FD 02 48 FC | 	wrbyte	#1, result1
24680     01 FA 05 F6 | 	mov	result1, #1
24684     64 05 90 FD | 	jmp	#LR__3853
24688                 | LR__3837
24688     04 4E 05 F1 | 	add	fp, #4
2468c     A7 FA 01 FB | 	rdlong	result1, fp
24690     18 4E 05 F1 | 	add	fp, #24
24694     A7 18 02 FB | 	rdlong	arg04, fp
24698     18 FA 05 F1 | 	add	result1, #24
2469c     FD 18 62 FC | 	wrlong	arg04, result1
246a0     18 4E 85 F1 | 	sub	fp, #24
246a4     A7 FA 01 FB | 	rdlong	result1, fp
246a8     04 4E 85 F1 | 	sub	fp, #4
246ac     08 FA 05 F1 | 	add	result1, #8
246b0     FD FA 09 FB | 	rdlong	result1, result1 wz
246b4     1C 00 90 5D |  if_ne	jmp	#LR__3838
246b8     04 4E 05 F1 | 	add	fp, #4
246bc     A7 18 02 FB | 	rdlong	arg04, fp
246c0     18 4E 05 F1 | 	add	fp, #24
246c4     A7 FA 01 FB | 	rdlong	result1, fp
246c8     1C 4E 85 F1 | 	sub	fp, #28
246cc     08 18 06 F1 | 	add	arg04, #8
246d0     0C FB 61 FC | 	wrlong	result1, arg04
246d4                 | LR__3838
246d4                 | LR__3839
246d4     04 4E 05 F1 | 	add	fp, #4
246d8     A7 18 02 FB | 	rdlong	arg04, fp
246dc     04 4E 85 F1 | 	sub	fp, #4
246e0     10 18 06 F1 | 	add	arg04, #16
246e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
246e8     80 18 CE F7 | 	test	arg04, #128 wz
246ec     7C 00 90 AD |  if_e	jmp	#LR__3841
246f0     18 4E 05 F1 | 	add	fp, #24
246f4     A7 18 02 FB | 	rdlong	arg04, fp
246f8     01 18 06 F1 | 	add	arg04, #1
246fc     0C 13 C2 FA | 	rdbyte	arg01, arg04
24700     14 4E 85 F1 | 	sub	fp, #20
24704     A7 18 02 FB | 	rdlong	arg04, fp
24708     0C 15 02 F6 | 	mov	arg02, arg04
2470c     28 14 06 F1 | 	add	arg02, #40
24710     04 4E 85 F1 | 	sub	fp, #4
24714     1C 18 06 F1 | 	add	arg04, #28
24718     0C 17 02 FB | 	rdlong	arg03, arg04
2471c     01 18 06 F6 | 	mov	arg04, #1
24720     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
24724     00 FA 0D F2 | 	cmp	result1, #0 wz
24728     1C 00 90 AD |  if_e	jmp	#LR__3840
2472c     04 4E 05 F1 | 	add	fp, #4
24730     A7 FA 01 FB | 	rdlong	result1, fp
24734     04 4E 85 F1 | 	sub	fp, #4
24738     11 FA 05 F1 | 	add	result1, #17
2473c     FD 02 48 FC | 	wrbyte	#1, result1
24740     01 FA 05 F6 | 	mov	result1, #1
24744     A4 04 90 FD | 	jmp	#LR__3853
24748                 | LR__3840
24748     04 4E 05 F1 | 	add	fp, #4
2474c     A7 18 02 FB | 	rdlong	arg04, fp
24750     0C FB 01 F6 | 	mov	result1, arg04
24754     04 4E 85 F1 | 	sub	fp, #4
24758     10 18 06 F1 | 	add	arg04, #16
2475c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24760     7F 18 06 F5 | 	and	arg04, #127
24764     10 FA 05 F1 | 	add	result1, #16
24768     FD 18 42 FC | 	wrbyte	arg04, result1
2476c                 | LR__3841
2476c     18 4E 05 F1 | 	add	fp, #24
24770     A7 12 02 FB | 	rdlong	arg01, fp
24774     14 4E 85 F1 | 	sub	fp, #20
24778     A7 14 02 FB | 	rdlong	arg02, fp
2477c     04 4E 85 F1 | 	sub	fp, #4
24780     18 14 06 F1 | 	add	arg02, #24
24784     0A 15 02 FB | 	rdlong	arg02, arg02
24788     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2478c     20 4E 05 F1 | 	add	fp, #32
24790     A7 FA 61 FC | 	wrlong	result1, fp
24794     20 4E 85 F1 | 	sub	fp, #32
24798     00 FA 0D F2 | 	cmp	result1, #0 wz
2479c     1C 00 90 5D |  if_ne	jmp	#LR__3842
247a0     04 4E 05 F1 | 	add	fp, #4
247a4     A7 FA 01 FB | 	rdlong	result1, fp
247a8     04 4E 85 F1 | 	sub	fp, #4
247ac     11 FA 05 F1 | 	add	result1, #17
247b0     FD 04 48 FC | 	wrbyte	#2, result1
247b4     02 FA 05 F6 | 	mov	result1, #2
247b8     30 04 90 FD | 	jmp	#LR__3853
247bc                 | LR__3842
247bc     20 4E 05 F1 | 	add	fp, #32
247c0     A7 FA 01 FB | 	rdlong	result1, fp
247c4     0C 4E 05 F1 | 	add	fp, #12
247c8     A7 1E 02 FB | 	rdlong	local01, fp
247cc     0F FB 01 F1 | 	add	result1, local01
247d0     0C 4E 85 F1 | 	sub	fp, #12
247d4     A7 FA 61 FC | 	wrlong	result1, fp
247d8     14 4E 85 F1 | 	sub	fp, #20
247dc     A7 FA 01 FB | 	rdlong	result1, fp
247e0     09 FA 45 F0 | 	shr	result1, #9
247e4     1C 4E 05 F1 | 	add	fp, #28
247e8     A7 FA 61 FC | 	wrlong	result1, fp
247ec     28 4E 85 F1 | 	sub	fp, #40
247f0     01 FA 15 F2 | 	cmp	result1, #1 wc
247f4     60 01 90 CD |  if_b	jmp	#LR__3846
247f8     2C 4E 05 F1 | 	add	fp, #44
247fc     A7 FA 01 FB | 	rdlong	result1, fp
24800     04 4E 85 F1 | 	sub	fp, #4
24804     A7 18 02 FB | 	rdlong	arg04, fp
24808     0C FB 01 F1 | 	add	result1, arg04
2480c     10 4E 85 F1 | 	sub	fp, #16
24810     A7 18 02 FB | 	rdlong	arg04, fp
24814     18 4E 85 F1 | 	sub	fp, #24
24818     0A 18 06 F1 | 	add	arg04, #10
2481c     0C 19 E2 FA | 	rdword	arg04, arg04
24820     0C FB 19 F2 | 	cmp	result1, arg04 wcz
24824     28 00 90 ED |  if_be	jmp	#LR__3843
24828     18 4E 05 F1 | 	add	fp, #24
2482c     A7 FA 01 FB | 	rdlong	result1, fp
24830     0A FA 05 F1 | 	add	result1, #10
24834     FD FA E1 FA | 	rdword	result1, result1
24838     14 4E 05 F1 | 	add	fp, #20
2483c     A7 18 02 FB | 	rdlong	arg04, fp
24840     0C FB 81 F1 | 	sub	result1, arg04
24844     04 4E 85 F1 | 	sub	fp, #4
24848     A7 FA 61 FC | 	wrlong	result1, fp
2484c     28 4E 85 F1 | 	sub	fp, #40
24850                 | LR__3843
24850     18 4E 05 F1 | 	add	fp, #24
24854     A7 18 02 FB | 	rdlong	arg04, fp
24858     01 18 06 F1 | 	add	arg04, #1
2485c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24860     18 4E 05 F1 | 	add	fp, #24
24864     A7 14 02 FB | 	rdlong	arg02, fp
24868     10 4E 85 F1 | 	sub	fp, #16
2486c     A7 16 02 FB | 	rdlong	arg03, fp
24870     08 4E 05 F1 | 	add	fp, #8
24874     A7 18 02 FB | 	rdlong	arg04, fp
24878     28 4E 85 F1 | 	sub	fp, #40
2487c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24880     00 FA 0D F2 | 	cmp	result1, #0 wz
24884     1C 00 90 AD |  if_e	jmp	#LR__3844
24888     04 4E 05 F1 | 	add	fp, #4
2488c     A7 1E 02 FB | 	rdlong	local01, fp
24890     04 4E 85 F1 | 	sub	fp, #4
24894     11 1E 06 F1 | 	add	local01, #17
24898     0F 03 48 FC | 	wrbyte	#1, local01
2489c     01 FA 05 F6 | 	mov	result1, #1
248a0     48 03 90 FD | 	jmp	#LR__3853
248a4                 | LR__3844
248a4     04 4E 05 F1 | 	add	fp, #4
248a8     A7 FA 01 FB | 	rdlong	result1, fp
248ac     1C FA 05 F1 | 	add	result1, #28
248b0     FD FA 01 FB | 	rdlong	result1, result1
248b4     1C 4E 05 F1 | 	add	fp, #28
248b8     A7 20 02 FB | 	rdlong	local02, fp
248bc     10 FB 81 F1 | 	sub	result1, local02
248c0     08 4E 05 F1 | 	add	fp, #8
248c4     A7 18 02 FB | 	rdlong	arg04, fp
248c8     28 4E 85 F1 | 	sub	fp, #40
248cc     0C FB 11 F2 | 	cmp	result1, arg04 wc
248d0     68 00 90 3D |  if_ae	jmp	#LR__3845
248d4     04 4E 05 F1 | 	add	fp, #4
248d8     A7 12 02 FB | 	rdlong	arg01, fp
248dc     28 12 06 F1 | 	add	arg01, #40
248e0     2C 4E 05 F1 | 	add	fp, #44
248e4     A7 14 02 FB | 	rdlong	arg02, fp
248e8     2C 4E 85 F1 | 	sub	fp, #44
248ec     A7 FA 01 FB | 	rdlong	result1, fp
248f0     1C FA 05 F1 | 	add	result1, #28
248f4     FD 22 02 FB | 	rdlong	local03, result1
248f8     1C 4E 05 F1 | 	add	fp, #28
248fc     A7 18 02 FB | 	rdlong	arg04, fp
24900     20 4E 85 F1 | 	sub	fp, #32
24904     0C 23 82 F1 | 	sub	local03, arg04
24908     09 22 66 F0 | 	shl	local03, #9
2490c     11 15 02 F1 | 	add	arg02, local03
24910     09 16 C6 F9 | 	decod	arg03, #9
24914     DC 41 BF FD | 	call	#__system____builtin_memmove
24918     04 4E 05 F1 | 	add	fp, #4
2491c     A7 18 02 FB | 	rdlong	arg04, fp
24920     0C FB 01 F6 | 	mov	result1, arg04
24924     04 4E 85 F1 | 	sub	fp, #4
24928     10 18 06 F1 | 	add	arg04, #16
2492c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24930     7F 18 06 F5 | 	and	arg04, #127
24934     10 FA 05 F1 | 	add	result1, #16
24938     FD 18 42 FC | 	wrbyte	arg04, result1
2493c                 | LR__3845
2493c     28 4E 05 F1 | 	add	fp, #40
24940     A7 FA 01 FB | 	rdlong	result1, fp
24944     09 FA 65 F0 | 	shl	result1, #9
24948     04 4E 85 F1 | 	sub	fp, #4
2494c     A7 FA 61 FC | 	wrlong	result1, fp
24950     24 4E 85 F1 | 	sub	fp, #36
24954                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
24954                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
24954                 | ' 				}
24954                 | ' 
24954                 | ' 
24954                 | ' 				wcnt =  ((UINT) 512 )  * cc;
24954                 | ' 				continue;
24954     74 01 90 FD | 	jmp	#LR__3849
24958                 | LR__3846
24958     04 4E 05 F1 | 	add	fp, #4
2495c     A7 20 02 FB | 	rdlong	local02, fp
24960     1C 20 06 F1 | 	add	local02, #28
24964     10 FB 01 FB | 	rdlong	result1, local02
24968     1C 4E 05 F1 | 	add	fp, #28
2496c     A7 20 02 FB | 	rdlong	local02, fp
24970     20 4E 85 F1 | 	sub	fp, #32
24974     10 FB 09 F2 | 	cmp	result1, local02 wz
24978     90 00 90 AD |  if_e	jmp	#LR__3847
2497c     04 4E 05 F1 | 	add	fp, #4
24980     A7 FA 01 FB | 	rdlong	result1, fp
24984     FD 22 02 F6 | 	mov	local03, result1
24988     04 4E 85 F1 | 	sub	fp, #4
2498c     14 22 06 F1 | 	add	local03, #20
24990     11 23 02 FB | 	rdlong	local03, local03
24994     0C FA 05 F1 | 	add	result1, #12
24998     FD 24 02 FB | 	rdlong	local04, result1
2499c     12 27 02 F6 | 	mov	local05, local04
249a0     13 23 12 F2 | 	cmp	local03, local05 wc
249a4     64 00 90 3D |  if_ae	jmp	#LR__3847
249a8     18 4E 05 F1 | 	add	fp, #24
249ac     A7 18 02 FB | 	rdlong	arg04, fp
249b0     01 18 06 F1 | 	add	arg04, #1
249b4     0C 13 C2 FA | 	rdbyte	arg01, arg04
249b8     14 4E 85 F1 | 	sub	fp, #20
249bc     A7 28 02 FB | 	rdlong	local06, fp
249c0     28 28 06 F1 | 	add	local06, #40
249c4     14 2B 02 F6 | 	mov	local07, local06
249c8     1C 4E 05 F1 | 	add	fp, #28
249cc     A7 2C 02 FB | 	rdlong	local08, fp
249d0     20 4E 85 F1 | 	sub	fp, #32
249d4     01 2E 06 F6 | 	mov	local09, #1
249d8     15 15 02 F6 | 	mov	arg02, local07
249dc     16 17 02 F6 | 	mov	arg03, local08
249e0     01 18 06 F6 | 	mov	arg04, #1
249e4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
249e8     FD 30 0A F6 | 	mov	local10, result1 wz
249ec     1C 00 90 AD |  if_e	jmp	#LR__3847
249f0     04 4E 05 F1 | 	add	fp, #4
249f4     A7 30 02 FB | 	rdlong	local10, fp
249f8     04 4E 85 F1 | 	sub	fp, #4
249fc     11 30 06 F1 | 	add	local10, #17
24a00     18 03 48 FC | 	wrbyte	#1, local10
24a04                 | ' 				fp->fptr < fp->obj.objsize &&
24a04                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
24a04                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
24a04     01 FA 05 F6 | 	mov	result1, #1
24a08     E0 01 90 FD | 	jmp	#LR__3853
24a0c                 | LR__3847
24a0c     04 4E 05 F1 | 	add	fp, #4
24a10     A7 18 02 FB | 	rdlong	arg04, fp
24a14     1C 4E 05 F1 | 	add	fp, #28
24a18     A7 FA 01 FB | 	rdlong	result1, fp
24a1c     20 4E 85 F1 | 	sub	fp, #32
24a20     1C 18 06 F1 | 	add	arg04, #28
24a24     0C FB 61 FC | 	wrlong	result1, arg04
24a28                 | LR__3848
24a28     04 4E 05 F1 | 	add	fp, #4
24a2c     A7 FA 01 FB | 	rdlong	result1, fp
24a30     14 FA 05 F1 | 	add	result1, #20
24a34     FD FA 01 FB | 	rdlong	result1, result1
24a38     FF FB 05 F5 | 	and	result1, #511
24a3c     09 32 C6 F9 | 	decod	local11, #9
24a40     FD 32 82 F1 | 	sub	local11, result1
24a44     20 4E 05 F1 | 	add	fp, #32
24a48     A7 32 62 FC | 	wrlong	local11, fp
24a4c     18 4E 85 F1 | 	sub	fp, #24
24a50     A7 FA 01 FB | 	rdlong	result1, fp
24a54     0C 4E 85 F1 | 	sub	fp, #12
24a58     FD 32 1A F2 | 	cmp	local11, result1 wcz
24a5c     0C 4E 05 11 |  if_a	add	fp, #12
24a60     A7 32 02 1B |  if_a	rdlong	local11, fp
24a64     18 4E 05 11 |  if_a	add	fp, #24
24a68     A7 32 62 1C |  if_a	wrlong	local11, fp
24a6c     24 4E 85 11 |  if_a	sub	fp, #36
24a70     04 4E 05 F1 | 	add	fp, #4
24a74     A7 32 02 FB | 	rdlong	local11, fp
24a78     19 13 02 F6 | 	mov	arg01, local11
24a7c     28 12 06 F1 | 	add	arg01, #40
24a80     14 32 06 F1 | 	add	local11, #20
24a84     19 33 02 FB | 	rdlong	local11, local11
24a88     FF 33 06 F5 | 	and	local11, #511
24a8c     19 13 02 F1 | 	add	arg01, local11
24a90     2C 4E 05 F1 | 	add	fp, #44
24a94     A7 14 02 FB | 	rdlong	arg02, fp
24a98     0C 4E 85 F1 | 	sub	fp, #12
24a9c     A7 16 02 FB | 	rdlong	arg03, fp
24aa0     24 4E 85 F1 | 	sub	fp, #36
24aa4     4C 40 BF FD | 	call	#__system____builtin_memmove
24aa8     04 4E 05 F1 | 	add	fp, #4
24aac     A7 FA 01 FB | 	rdlong	result1, fp
24ab0     FD 32 02 F6 | 	mov	local11, result1
24ab4     04 4E 85 F1 | 	sub	fp, #4
24ab8     10 FA 05 F1 | 	add	result1, #16
24abc     FD FA C1 FA | 	rdbyte	result1, result1
24ac0     80 FA 45 F5 | 	or	result1, #128
24ac4     10 32 06 F1 | 	add	local11, #16
24ac8     19 FB 41 FC | 	wrbyte	result1, local11
24acc                 | LR__3849
24acc     0C 4E 05 F1 | 	add	fp, #12
24ad0     A7 32 02 FB | 	rdlong	local11, fp
24ad4     18 4E 05 F1 | 	add	fp, #24
24ad8     A7 FA 01 FB | 	rdlong	result1, fp
24adc     FD 32 82 F1 | 	sub	local11, result1
24ae0     18 4E 85 F1 | 	sub	fp, #24
24ae4     A7 32 62 FC | 	wrlong	local11, fp
24ae8     04 4E 05 F1 | 	add	fp, #4
24aec     A7 34 02 FB | 	rdlong	local12, fp
24af0     1A 33 02 FB | 	rdlong	local11, local12
24af4     14 4E 05 F1 | 	add	fp, #20
24af8     A7 36 02 FB | 	rdlong	local13, fp
24afc     1B 33 02 F1 | 	add	local11, local13
24b00     1A 33 62 FC | 	wrlong	local11, local12
24b04     0C 4E 05 F1 | 	add	fp, #12
24b08     A7 32 02 FB | 	rdlong	local11, fp
24b0c     0C 4E 85 F1 | 	sub	fp, #12
24b10     A7 38 02 FB | 	rdlong	local14, fp
24b14     1C 33 02 F1 | 	add	local11, local14
24b18     0C 4E 05 F1 | 	add	fp, #12
24b1c     A7 32 62 FC | 	wrlong	local11, fp
24b20     2C 4E 85 F1 | 	sub	fp, #44
24b24     A7 3A 02 FB | 	rdlong	local15, fp
24b28     1D 33 02 F6 | 	mov	local11, local15
24b2c     14 3A 06 F1 | 	add	local15, #20
24b30     1D 3B 02 FB | 	rdlong	local15, local15
24b34     20 4E 05 F1 | 	add	fp, #32
24b38     A7 3C 02 FB | 	rdlong	local16, fp
24b3c     1E 3B 02 F1 | 	add	local15, local16
24b40     14 32 06 F1 | 	add	local11, #20
24b44     19 3B 62 FC | 	wrlong	local15, local11
24b48     20 4E 85 F1 | 	sub	fp, #32
24b4c     A7 3E 02 FB | 	rdlong	local17, fp
24b50     1F 33 02 F6 | 	mov	local11, local17
24b54     1F 41 02 F6 | 	mov	local18, local17
24b58     04 4E 85 F1 | 	sub	fp, #4
24b5c     14 3E 06 F1 | 	add	local17, #20
24b60     1F 43 02 FB | 	rdlong	local19, local17
24b64     0C 40 06 F1 | 	add	local18, #12
24b68     20 45 02 FB | 	rdlong	local20, local18
24b6c     22 43 1A F2 | 	cmp	local19, local20 wcz
24b70     24 00 90 ED |  if_be	jmp	#LR__3850
24b74     04 4E 05 F1 | 	add	fp, #4
24b78     A7 26 02 FB | 	rdlong	local05, fp
24b7c     04 4E 85 F1 | 	sub	fp, #4
24b80     13 23 02 F6 | 	mov	local03, local05
24b84     14 22 06 F1 | 	add	local03, #20
24b88     11 25 02 FB | 	rdlong	local04, local03
24b8c     14 22 86 F1 | 	sub	local03, #20
24b90     12 47 02 F6 | 	mov	local21, local04
24b94     20 00 90 FD | 	jmp	#LR__3851
24b98                 | LR__3850
24b98     04 4E 05 F1 | 	add	fp, #4
24b9c     A7 2A 02 FB | 	rdlong	local07, fp
24ba0     04 4E 85 F1 | 	sub	fp, #4
24ba4     15 31 02 F6 | 	mov	local10, local07
24ba8     0C 30 06 F1 | 	add	local10, #12
24bac     18 2D 02 FB | 	rdlong	local08, local10
24bb0     0C 30 86 F1 | 	sub	local10, #12
24bb4     16 47 02 F6 | 	mov	local21, local08
24bb8                 | LR__3851
24bb8     0C 32 06 F1 | 	add	local11, #12
24bbc     19 47 62 FC | 	wrlong	local21, local11
24bc0     5C F9 9F FD | 	jmp	#LR__3833
24bc4                 | LR__3852
24bc4     04 4E 05 F1 | 	add	fp, #4
24bc8     A7 34 02 FB | 	rdlong	local12, fp
24bcc     1A 1F 02 F6 | 	mov	local01, local12
24bd0     04 4E 85 F1 | 	sub	fp, #4
24bd4     10 34 06 F1 | 	add	local12, #16
24bd8     1A 33 C2 FA | 	rdbyte	local11, local12
24bdc     40 32 46 F5 | 	or	local11, #64
24be0     10 1E 06 F1 | 	add	local01, #16
24be4     0F 33 42 FC | 	wrbyte	local11, local01
24be8                 | ' 
24be8                 | ' 
24be8                 | ' 
24be8                 | ' 
24be8                 | ' 
24be8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
24be8                 | ' 		fp->flag |=  0x80 ;
24be8                 | ' 
24be8                 | ' 	}
24be8                 | ' 
24be8                 | ' 	fp->flag |=  0x40 ;
24be8                 | ' 
24be8                 | ' 	return FR_OK ;
24be8     00 FA 05 F6 | 	mov	result1, #0
24bec                 | LR__3853
24bec     A7 F0 03 F6 | 	mov	ptra, fp
24bf0     B2 00 A0 FD | 	call	#popregs_
24bf4                 | _fatfs_cc_f_write_ret
24bf4     2D 00 64 FD | 	ret
24bf8                 | 
24bf8                 | _fatfs_cc_f_sync
24bf8     00 4A 05 F6 | 	mov	COUNT_, #0
24bfc     A8 00 A0 FD | 	call	#pushregs_
24c00     18 F0 07 F1 | 	add	ptra, #24
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 12 62 FC | 	wrlong	arg01, fp
24c0c     08 4E 05 F1 | 	add	fp, #8
24c10     A7 14 02 F6 | 	mov	arg02, fp
24c14     0C 4E 85 F1 | 	sub	fp, #12
24c18     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24c1c     08 4E 05 F1 | 	add	fp, #8
24c20     A7 FA 61 FC | 	wrlong	result1, fp
24c24     08 4E 85 F1 | 	sub	fp, #8
24c28     00 FA 0D F2 | 	cmp	result1, #0 wz
24c2c     C0 01 90 5D |  if_ne	jmp	#LR__3863
24c30     04 4E 05 F1 | 	add	fp, #4
24c34     A7 18 02 FB | 	rdlong	arg04, fp
24c38     04 4E 85 F1 | 	sub	fp, #4
24c3c     10 18 06 F1 | 	add	arg04, #16
24c40     0C 19 C2 FA | 	rdbyte	arg04, arg04
24c44     40 18 CE F7 | 	test	arg04, #64 wz
24c48     A4 01 90 AD |  if_e	jmp	#LR__3862
24c4c     04 4E 05 F1 | 	add	fp, #4
24c50     A7 18 02 FB | 	rdlong	arg04, fp
24c54     04 4E 85 F1 | 	sub	fp, #4
24c58     10 18 06 F1 | 	add	arg04, #16
24c5c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24c60     80 18 CE F7 | 	test	arg04, #128 wz
24c64     64 00 90 AD |  if_e	jmp	#LR__3860
24c68     0C 4E 05 F1 | 	add	fp, #12
24c6c     A7 18 02 FB | 	rdlong	arg04, fp
24c70     01 18 06 F1 | 	add	arg04, #1
24c74     0C 13 C2 FA | 	rdbyte	arg01, arg04
24c78     08 4E 85 F1 | 	sub	fp, #8
24c7c     A7 18 02 FB | 	rdlong	arg04, fp
24c80     0C 15 02 F6 | 	mov	arg02, arg04
24c84     28 14 06 F1 | 	add	arg02, #40
24c88     04 4E 85 F1 | 	sub	fp, #4
24c8c     1C 18 06 F1 | 	add	arg04, #28
24c90     0C 17 02 FB | 	rdlong	arg03, arg04
24c94     01 18 06 F6 | 	mov	arg04, #1
24c98     0C AE BF FD | 	call	#_fatfs_cc_disk_write
24c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
24ca0     01 FA 05 56 |  if_ne	mov	result1, #1
24ca4     54 01 90 5D |  if_ne	jmp	#LR__3864
24ca8     04 4E 05 F1 | 	add	fp, #4
24cac     A7 18 02 FB | 	rdlong	arg04, fp
24cb0     0C 17 02 F6 | 	mov	arg03, arg04
24cb4     04 4E 85 F1 | 	sub	fp, #4
24cb8     10 18 06 F1 | 	add	arg04, #16
24cbc     0C 19 C2 FA | 	rdbyte	arg04, arg04
24cc0     7F 18 06 F5 | 	and	arg04, #127
24cc4     10 16 06 F1 | 	add	arg03, #16
24cc8     0B 19 42 FC | 	wrbyte	arg04, arg03
24ccc                 | LR__3860
24ccc     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
24cd0     10 4E 05 F1 | 	add	fp, #16
24cd4     A7 FA 61 FC | 	wrlong	result1, fp
24cd8     04 4E 85 F1 | 	sub	fp, #4
24cdc     A7 12 02 FB | 	rdlong	arg01, fp
24ce0     08 4E 85 F1 | 	sub	fp, #8
24ce4     A7 18 02 FB | 	rdlong	arg04, fp
24ce8     04 4E 85 F1 | 	sub	fp, #4
24cec     20 18 06 F1 | 	add	arg04, #32
24cf0     0C 15 02 FB | 	rdlong	arg02, arg04
24cf4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24cf8     08 4E 05 F1 | 	add	fp, #8
24cfc     A7 FA 61 FC | 	wrlong	result1, fp
24d00     08 4E 85 F1 | 	sub	fp, #8
24d04     00 FA 0D F2 | 	cmp	result1, #0 wz
24d08     E4 00 90 5D |  if_ne	jmp	#LR__3861
24d0c     04 4E 05 F1 | 	add	fp, #4
24d10     A7 18 02 FB | 	rdlong	arg04, fp
24d14     24 18 06 F1 | 	add	arg04, #36
24d18     0C 19 02 FB | 	rdlong	arg04, arg04
24d1c     10 4E 05 F1 | 	add	fp, #16
24d20     A7 18 62 FC | 	wrlong	arg04, fp
24d24     0C 17 02 F6 | 	mov	arg03, arg04
24d28     0B 16 06 F1 | 	add	arg03, #11
24d2c     0B 17 C2 FA | 	rdbyte	arg03, arg03
24d30     20 16 46 F5 | 	or	arg03, #32
24d34     0B 18 06 F1 | 	add	arg04, #11
24d38     0C 17 42 FC | 	wrbyte	arg03, arg04
24d3c     10 4E 85 F1 | 	sub	fp, #16
24d40     A7 18 02 FB | 	rdlong	arg04, fp
24d44     0C 13 02 FB | 	rdlong	arg01, arg04
24d48     10 4E 05 F1 | 	add	fp, #16
24d4c     A7 14 02 FB | 	rdlong	arg02, fp
24d50     14 4E 85 F1 | 	sub	fp, #20
24d54     08 18 06 F1 | 	add	arg04, #8
24d58     0C 17 02 FB | 	rdlong	arg03, arg04
24d5c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24d60     14 4E 05 F1 | 	add	fp, #20
24d64     A7 12 02 FB | 	rdlong	arg01, fp
24d68     1C 12 06 F1 | 	add	arg01, #28
24d6c     10 4E 85 F1 | 	sub	fp, #16
24d70     A7 18 02 FB | 	rdlong	arg04, fp
24d74     0C 18 06 F1 | 	add	arg04, #12
24d78     0C 15 02 FB | 	rdlong	arg02, arg04
24d7c     09 15 62 FC | 	wrlong	arg02, arg01
24d80     10 4E 05 F1 | 	add	fp, #16
24d84     A7 12 02 FB | 	rdlong	arg01, fp
24d88     16 12 06 F1 | 	add	arg01, #22
24d8c     04 4E 85 F1 | 	sub	fp, #4
24d90     A7 14 02 FB | 	rdlong	arg02, fp
24d94     09 15 62 FC | 	wrlong	arg02, arg01
24d98     04 4E 05 F1 | 	add	fp, #4
24d9c     A7 12 02 FB | 	rdlong	arg01, fp
24da0     12 12 06 F1 | 	add	arg01, #18
24da4     09 01 58 FC | 	wrword	#0, arg01
24da8     08 4E 85 F1 | 	sub	fp, #8
24dac     A7 18 02 FB | 	rdlong	arg04, fp
24db0     03 18 06 F1 | 	add	arg04, #3
24db4     0C 03 48 FC | 	wrbyte	#1, arg04
24db8     A7 12 02 FB | 	rdlong	arg01, fp
24dbc     0C 4E 85 F1 | 	sub	fp, #12
24dc0     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
24dc4     08 4E 05 F1 | 	add	fp, #8
24dc8     A7 FA 61 FC | 	wrlong	result1, fp
24dcc     04 4E 85 F1 | 	sub	fp, #4
24dd0     A7 18 02 FB | 	rdlong	arg04, fp
24dd4     0C 17 02 F6 | 	mov	arg03, arg04
24dd8     04 4E 85 F1 | 	sub	fp, #4
24ddc     10 18 06 F1 | 	add	arg04, #16
24de0     0C 19 C2 FA | 	rdbyte	arg04, arg04
24de4     BF 18 06 F5 | 	and	arg04, #191
24de8     10 16 06 F1 | 	add	arg03, #16
24dec     0B 19 42 FC | 	wrbyte	arg04, arg03
24df0                 | LR__3861
24df0                 | LR__3862
24df0                 | LR__3863
24df0                 | ' 					dir = fp->dir_ptr;
24df0                 | ' 					dir[ 11 ] |=  0x20 ;
24df0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
24df0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
24df0                 | ' 					st_dword(dir +  22 , tm);
24df0                 | ' 					st_word(dir +  18 , 0);
24df0                 | ' 					fs->wflag = 1;
24df0                 | ' 					res = sync_fs(fs);
24df0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
24df0                 | ' 				}
24df0                 | ' 			}
24df0                 | ' 		}
24df0                 | ' 	}
24df0                 | ' 
24df0                 | ' 	return res ;
24df0     08 4E 05 F1 | 	add	fp, #8
24df4     A7 FA 01 FB | 	rdlong	result1, fp
24df8     08 4E 85 F1 | 	sub	fp, #8
24dfc                 | LR__3864
24dfc     A7 F0 03 F6 | 	mov	ptra, fp
24e00     B2 00 A0 FD | 	call	#popregs_
24e04                 | _fatfs_cc_f_sync_ret
24e04     2D 00 64 FD | 	ret
24e08                 | 
24e08                 | _fatfs_cc_f_close
24e08     01 4A 05 F6 | 	mov	COUNT_, #1
24e0c     A8 00 A0 FD | 	call	#pushregs_
24e10     10 F0 07 F1 | 	add	ptra, #16
24e14     04 4E 05 F1 | 	add	fp, #4
24e18     A7 12 62 FC | 	wrlong	arg01, fp
24e1c     04 4E 85 F1 | 	sub	fp, #4
24e20     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
24e24     08 4E 05 F1 | 	add	fp, #8
24e28     A7 FA 61 FC | 	wrlong	result1, fp
24e2c     08 4E 85 F1 | 	sub	fp, #8
24e30     00 FA 0D F2 | 	cmp	result1, #0 wz
24e34     38 00 90 5D |  if_ne	jmp	#LR__3870
24e38     04 4E 05 F1 | 	add	fp, #4
24e3c     A7 12 02 FB | 	rdlong	arg01, fp
24e40     08 4E 05 F1 | 	add	fp, #8
24e44     A7 14 02 F6 | 	mov	arg02, fp
24e48     0C 4E 85 F1 | 	sub	fp, #12
24e4c     9C E6 BF FD | 	call	#_fatfs_cc_validate
24e50     08 4E 05 F1 | 	add	fp, #8
24e54     A7 FA 61 FC | 	wrlong	result1, fp
24e58     08 4E 85 F1 | 	sub	fp, #8
24e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e60     04 4E 05 A1 |  if_e	add	fp, #4
24e64     A7 1E 02 AB |  if_e	rdlong	local01, fp
24e68     04 4E 85 A1 |  if_e	sub	fp, #4
24e6c     0F 01 68 AC |  if_e	wrlong	#0, local01
24e70                 | LR__3870
24e70                 | ' 
24e70                 | ' 
24e70                 | ' 
24e70                 | ' 
24e70                 | ' 			fp->obj.fs = 0;
24e70                 | ' #line 4192 "ff.c"
24e70                 | ' 		}
24e70                 | ' 	}
24e70                 | ' 	return res;
24e70     08 4E 05 F1 | 	add	fp, #8
24e74     A7 FA 01 FB | 	rdlong	result1, fp
24e78     08 4E 85 F1 | 	sub	fp, #8
24e7c     A7 F0 03 F6 | 	mov	ptra, fp
24e80     B2 00 A0 FD | 	call	#popregs_
24e84                 | _fatfs_cc_f_close_ret
24e84     2D 00 64 FD | 	ret
24e88                 | 
24e88                 | _fatfs_cc_f_lseek
24e88     00 4A 05 F6 | 	mov	COUNT_, #0
24e8c     A8 00 A0 FD | 	call	#pushregs_
24e90     24 F0 07 F1 | 	add	ptra, #36
24e94     04 4E 05 F1 | 	add	fp, #4
24e98     A7 12 62 FC | 	wrlong	arg01, fp
24e9c     04 4E 05 F1 | 	add	fp, #4
24ea0     A7 14 62 FC | 	wrlong	arg02, fp
24ea4     04 4E 85 F1 | 	sub	fp, #4
24ea8     A7 12 02 FB | 	rdlong	arg01, fp
24eac     0C 4E 05 F1 | 	add	fp, #12
24eb0     A7 14 02 F6 | 	mov	arg02, fp
24eb4     10 4E 85 F1 | 	sub	fp, #16
24eb8     30 E6 BF FD | 	call	#_fatfs_cc_validate
24ebc     0C 4E 05 F1 | 	add	fp, #12
24ec0     A7 FA 61 FC | 	wrlong	result1, fp
24ec4     0C 4E 85 F1 | 	sub	fp, #12
24ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
24ecc     1C 00 90 5D |  if_ne	jmp	#LR__3880
24ed0     04 4E 05 F1 | 	add	fp, #4
24ed4     A7 18 02 FB | 	rdlong	arg04, fp
24ed8     11 18 06 F1 | 	add	arg04, #17
24edc     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ee0     08 4E 05 F1 | 	add	fp, #8
24ee4     A7 18 62 FC | 	wrlong	arg04, fp
24ee8     0C 4E 85 F1 | 	sub	fp, #12
24eec                 | LR__3880
24eec     0C 4E 05 F1 | 	add	fp, #12
24ef0     A7 18 0A FB | 	rdlong	arg04, fp wz
24ef4     0C 4E 85 F1 | 	sub	fp, #12
24ef8     0C 4E 05 51 |  if_ne	add	fp, #12
24efc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
24f00     0C 4E 85 51 |  if_ne	sub	fp, #12
24f04     40 06 90 5D |  if_ne	jmp	#LR__3903
24f08     04 4E 05 F1 | 	add	fp, #4
24f0c     A7 18 02 FB | 	rdlong	arg04, fp
24f10     04 4E 05 F1 | 	add	fp, #4
24f14     A7 16 02 FB | 	rdlong	arg03, fp
24f18     08 4E 85 F1 | 	sub	fp, #8
24f1c     0C 18 06 F1 | 	add	arg04, #12
24f20     0C 19 02 FB | 	rdlong	arg04, arg04
24f24     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
24f28     3C 00 90 ED |  if_be	jmp	#LR__3881
24f2c     04 4E 05 F1 | 	add	fp, #4
24f30     A7 16 02 FB | 	rdlong	arg03, fp
24f34     04 4E 85 F1 | 	sub	fp, #4
24f38     10 16 06 F1 | 	add	arg03, #16
24f3c     0B 17 C2 FA | 	rdbyte	arg03, arg03
24f40     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
24f44     02 16 CE F7 | 	test	arg03, #2 wz
24f48     1C 00 90 5D |  if_ne	jmp	#LR__3881
24f4c     04 4E 05 F1 | 	add	fp, #4
24f50     A7 16 02 FB | 	rdlong	arg03, fp
24f54     0C 16 06 F1 | 	add	arg03, #12
24f58     0B 17 02 FB | 	rdlong	arg03, arg03
24f5c     04 4E 05 F1 | 	add	fp, #4
24f60     A7 16 62 FC | 	wrlong	arg03, fp
24f64     08 4E 85 F1 | 	sub	fp, #8
24f68                 | LR__3881
24f68     04 4E 05 F1 | 	add	fp, #4
24f6c     A7 16 02 FB | 	rdlong	arg03, fp
24f70     14 16 06 F1 | 	add	arg03, #20
24f74     0B 17 02 FB | 	rdlong	arg03, arg03
24f78     1C 4E 05 F1 | 	add	fp, #28
24f7c     A7 16 62 FC | 	wrlong	arg03, fp
24f80     1C 4E 85 F1 | 	sub	fp, #28
24f84     A7 16 02 FB | 	rdlong	arg03, fp
24f88     18 4E 05 F1 | 	add	fp, #24
24f8c     A7 00 68 FC | 	wrlong	#0, fp
24f90     14 16 06 F1 | 	add	arg03, #20
24f94     0B 01 68 FC | 	wrlong	#0, arg03
24f98     14 4E 85 F1 | 	sub	fp, #20
24f9c     A7 16 02 FB | 	rdlong	arg03, fp
24fa0     08 4E 85 F1 | 	sub	fp, #8
24fa4     01 16 16 F2 | 	cmp	arg03, #1 wc
24fa8     E4 03 90 CD |  if_b	jmp	#LR__3897
24fac     10 4E 05 F1 | 	add	fp, #16
24fb0     A7 16 02 FB | 	rdlong	arg03, fp
24fb4     0A 16 06 F1 | 	add	arg03, #10
24fb8     0B 19 E2 FA | 	rdword	arg04, arg03
24fbc     09 18 66 F0 | 	shl	arg04, #9
24fc0     08 4E 05 F1 | 	add	fp, #8
24fc4     A7 18 62 FC | 	wrlong	arg04, fp
24fc8     08 4E 05 F1 | 	add	fp, #8
24fcc     A7 18 02 FB | 	rdlong	arg04, fp
24fd0     20 4E 85 F1 | 	sub	fp, #32
24fd4     01 18 16 F2 | 	cmp	arg04, #1 wc
24fd8     AC 00 90 CD |  if_b	jmp	#LR__3882
24fdc     08 4E 05 F1 | 	add	fp, #8
24fe0     A7 18 02 FB | 	rdlong	arg04, fp
24fe4     01 18 86 F1 | 	sub	arg04, #1
24fe8     10 4E 05 F1 | 	add	fp, #16
24fec     A7 16 02 FB | 	rdlong	arg03, fp
24ff0     0B 19 12 FD | 	qdiv	arg04, arg03
24ff4     08 4E 05 F1 | 	add	fp, #8
24ff8     A7 FA 01 FB | 	rdlong	result1, fp
24ffc     01 FA 85 F1 | 	sub	result1, #1
25000     18 18 62 FD | 	getqx	arg04
25004     0B FB 11 FD | 	qdiv	result1, arg03
25008     20 4E 85 F1 | 	sub	fp, #32
2500c     18 16 62 FD | 	getqx	arg03
25010     0B 19 12 F2 | 	cmp	arg04, arg03 wc
25014     70 00 90 CD |  if_b	jmp	#LR__3882
25018     04 4E 05 F1 | 	add	fp, #4
2501c     A7 16 02 FB | 	rdlong	arg03, fp
25020     1C 4E 05 F1 | 	add	fp, #28
25024     A7 FA 01 FB | 	rdlong	result1, fp
25028     01 FA 85 F1 | 	sub	result1, #1
2502c     08 4E 85 F1 | 	sub	fp, #8
25030     A7 18 02 FB | 	rdlong	arg04, fp
25034     01 18 86 F1 | 	sub	arg04, #1
25038     0C FB 21 F5 | 	andn	result1, arg04
2503c     14 16 06 F1 | 	add	arg03, #20
25040     0B FB 61 FC | 	wrlong	result1, arg03
25044     10 4E 85 F1 | 	sub	fp, #16
25048     A7 16 02 FB | 	rdlong	arg03, fp
2504c     04 4E 85 F1 | 	sub	fp, #4
25050     A7 18 02 FB | 	rdlong	arg04, fp
25054     14 18 06 F1 | 	add	arg04, #20
25058     0C 19 02 FB | 	rdlong	arg04, arg04
2505c     0C 17 82 F1 | 	sub	arg03, arg04
25060     04 4E 05 F1 | 	add	fp, #4
25064     A7 16 62 FC | 	wrlong	arg03, fp
25068     04 4E 85 F1 | 	sub	fp, #4
2506c     A7 16 02 FB | 	rdlong	arg03, fp
25070     18 16 06 F1 | 	add	arg03, #24
25074     0B 17 02 FB | 	rdlong	arg03, arg03
25078     10 4E 05 F1 | 	add	fp, #16
2507c     A7 16 62 FC | 	wrlong	arg03, fp
25080     14 4E 85 F1 | 	sub	fp, #20
25084     D0 00 90 FD | 	jmp	#LR__3886
25088                 | LR__3882
25088     04 4E 05 F1 | 	add	fp, #4
2508c     A7 16 02 FB | 	rdlong	arg03, fp
25090     08 16 06 F1 | 	add	arg03, #8
25094     0B 17 0A FB | 	rdlong	arg03, arg03 wz
25098     10 4E 05 F1 | 	add	fp, #16
2509c     A7 16 62 FC | 	wrlong	arg03, fp
250a0     14 4E 85 F1 | 	sub	fp, #20
250a4     94 00 90 5D |  if_ne	jmp	#LR__3885
250a8     04 4E 05 F1 | 	add	fp, #4
250ac     A7 12 02 FB | 	rdlong	arg01, fp
250b0     04 4E 85 F1 | 	sub	fp, #4
250b4     00 14 06 F6 | 	mov	arg02, #0
250b8     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
250bc     14 4E 05 F1 | 	add	fp, #20
250c0     A7 FA 61 FC | 	wrlong	result1, fp
250c4     14 4E 85 F1 | 	sub	fp, #20
250c8     01 FA 0D F2 | 	cmp	result1, #1 wz
250cc     1C 00 90 5D |  if_ne	jmp	#LR__3883
250d0     04 4E 05 F1 | 	add	fp, #4
250d4     A7 16 02 FB | 	rdlong	arg03, fp
250d8     04 4E 85 F1 | 	sub	fp, #4
250dc     11 16 06 F1 | 	add	arg03, #17
250e0     0B 05 48 FC | 	wrbyte	#2, arg03
250e4     02 FA 05 F6 | 	mov	result1, #2
250e8     5C 04 90 FD | 	jmp	#LR__3903
250ec                 | LR__3883
250ec     14 4E 05 F1 | 	add	fp, #20
250f0     A7 FA 01 FB | 	rdlong	result1, fp
250f4     14 4E 85 F1 | 	sub	fp, #20
250f8     FF FF 7F FF 
250fc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25100     1C 00 90 5D |  if_ne	jmp	#LR__3884
25104     04 4E 05 F1 | 	add	fp, #4
25108     A7 16 02 FB | 	rdlong	arg03, fp
2510c     04 4E 85 F1 | 	sub	fp, #4
25110     11 16 06 F1 | 	add	arg03, #17
25114     0B 03 48 FC | 	wrbyte	#1, arg03
25118     01 FA 05 F6 | 	mov	result1, #1
2511c     28 04 90 FD | 	jmp	#LR__3903
25120                 | LR__3884
25120     04 4E 05 F1 | 	add	fp, #4
25124     A7 16 02 FB | 	rdlong	arg03, fp
25128     10 4E 05 F1 | 	add	fp, #16
2512c     A7 18 02 FB | 	rdlong	arg04, fp
25130     14 4E 85 F1 | 	sub	fp, #20
25134     08 16 06 F1 | 	add	arg03, #8
25138     0B 19 62 FC | 	wrlong	arg04, arg03
2513c                 | LR__3885
2513c     04 4E 05 F1 | 	add	fp, #4
25140     A7 16 02 FB | 	rdlong	arg03, fp
25144     10 4E 05 F1 | 	add	fp, #16
25148     A7 18 02 FB | 	rdlong	arg04, fp
2514c     14 4E 85 F1 | 	sub	fp, #20
25150     18 16 06 F1 | 	add	arg03, #24
25154     0B 19 62 FC | 	wrlong	arg04, arg03
25158                 | LR__3886
25158     14 4E 05 F1 | 	add	fp, #20
2515c     A7 16 0A FB | 	rdlong	arg03, fp wz
25160     14 4E 85 F1 | 	sub	fp, #20
25164     28 02 90 AD |  if_e	jmp	#LR__3896
25168                 | ' 				while (ofs > bcs) {
25168                 | LR__3887
25168     08 4E 05 F1 | 	add	fp, #8
2516c     A7 18 02 FB | 	rdlong	arg04, fp
25170     10 4E 05 F1 | 	add	fp, #16
25174     A7 16 02 FB | 	rdlong	arg03, fp
25178     18 4E 85 F1 | 	sub	fp, #24
2517c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
25180     68 01 90 ED |  if_be	jmp	#LR__3893
25184     08 4E 05 F1 | 	add	fp, #8
25188     A7 18 02 FB | 	rdlong	arg04, fp
2518c     10 4E 05 F1 | 	add	fp, #16
25190     A7 16 02 FB | 	rdlong	arg03, fp
25194     0B 19 82 F1 | 	sub	arg04, arg03
25198     10 4E 85 F1 | 	sub	fp, #16
2519c     A7 18 62 FC | 	wrlong	arg04, fp
251a0     04 4E 85 F1 | 	sub	fp, #4
251a4     A7 18 02 FB | 	rdlong	arg04, fp
251a8     0C FB 01 F6 | 	mov	result1, arg04
251ac     14 18 06 F1 | 	add	arg04, #20
251b0     0C 19 02 FB | 	rdlong	arg04, arg04
251b4     14 4E 05 F1 | 	add	fp, #20
251b8     A7 16 02 FB | 	rdlong	arg03, fp
251bc     0B 19 02 F1 | 	add	arg04, arg03
251c0     14 FA 05 F1 | 	add	result1, #20
251c4     FD 18 62 FC | 	wrlong	arg04, result1
251c8     14 4E 85 F1 | 	sub	fp, #20
251cc     A7 16 02 FB | 	rdlong	arg03, fp
251d0     04 4E 85 F1 | 	sub	fp, #4
251d4     10 16 06 F1 | 	add	arg03, #16
251d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
251dc     02 16 CE F7 | 	test	arg03, #2 wz
251e0     3C 00 90 AD |  if_e	jmp	#LR__3888
251e4     04 4E 05 F1 | 	add	fp, #4
251e8     A7 12 02 FB | 	rdlong	arg01, fp
251ec     10 4E 05 F1 | 	add	fp, #16
251f0     A7 14 02 FB | 	rdlong	arg02, fp
251f4     14 4E 85 F1 | 	sub	fp, #20
251f8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
251fc     14 4E 05 F1 | 	add	fp, #20
25200     A7 FA 61 FC | 	wrlong	result1, fp
25204     00 FA 4D F2 | 	cmps	result1, #0 wz
25208     14 4E 85 F1 | 	sub	fp, #20
2520c     08 4E 05 A1 |  if_e	add	fp, #8
25210     A7 00 68 AC |  if_e	wrlong	#0, fp
25214     08 4E 85 A1 |  if_e	sub	fp, #8
25218                 | ' 							ofs = 0; break;
25218     D0 00 90 AD |  if_e	jmp	#LR__3893
2521c     24 00 90 FD | 	jmp	#LR__3889
25220                 | LR__3888
25220     04 4E 05 F1 | 	add	fp, #4
25224     A7 12 02 FB | 	rdlong	arg01, fp
25228     10 4E 05 F1 | 	add	fp, #16
2522c     A7 14 02 FB | 	rdlong	arg02, fp
25230     14 4E 85 F1 | 	sub	fp, #20
25234     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
25238     14 4E 05 F1 | 	add	fp, #20
2523c     A7 FA 61 FC | 	wrlong	result1, fp
25240     14 4E 85 F1 | 	sub	fp, #20
25244                 | LR__3889
25244     14 4E 05 F1 | 	add	fp, #20
25248     A7 16 02 FB | 	rdlong	arg03, fp
2524c     14 4E 85 F1 | 	sub	fp, #20
25250     FF FF 7F FF 
25254     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25258     1C 00 90 5D |  if_ne	jmp	#LR__3890
2525c     04 4E 05 F1 | 	add	fp, #4
25260     A7 16 02 FB | 	rdlong	arg03, fp
25264     04 4E 85 F1 | 	sub	fp, #4
25268     11 16 06 F1 | 	add	arg03, #17
2526c     0B 03 48 FC | 	wrbyte	#1, arg03
25270     01 FA 05 F6 | 	mov	result1, #1
25274     D0 02 90 FD | 	jmp	#LR__3903
25278                 | LR__3890
25278     14 4E 05 F1 | 	add	fp, #20
2527c     A7 16 02 FB | 	rdlong	arg03, fp
25280     14 4E 85 F1 | 	sub	fp, #20
25284     02 16 16 F2 | 	cmp	arg03, #2 wc
25288     24 00 90 CD |  if_b	jmp	#LR__3891
2528c     10 4E 05 F1 | 	add	fp, #16
25290     A7 18 02 FB | 	rdlong	arg04, fp
25294     04 4E 05 F1 | 	add	fp, #4
25298     A7 16 02 FB | 	rdlong	arg03, fp
2529c     14 4E 85 F1 | 	sub	fp, #20
252a0     18 18 06 F1 | 	add	arg04, #24
252a4     0C 19 02 FB | 	rdlong	arg04, arg04
252a8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
252ac     1C 00 90 CD |  if_b	jmp	#LR__3892
252b0                 | LR__3891
252b0     04 4E 05 F1 | 	add	fp, #4
252b4     A7 16 02 FB | 	rdlong	arg03, fp
252b8     04 4E 85 F1 | 	sub	fp, #4
252bc     11 16 06 F1 | 	add	arg03, #17
252c0     0B 05 48 FC | 	wrbyte	#2, arg03
252c4     02 FA 05 F6 | 	mov	result1, #2
252c8     7C 02 90 FD | 	jmp	#LR__3903
252cc                 | LR__3892
252cc     04 4E 05 F1 | 	add	fp, #4
252d0     A7 18 02 FB | 	rdlong	arg04, fp
252d4     10 4E 05 F1 | 	add	fp, #16
252d8     A7 16 02 FB | 	rdlong	arg03, fp
252dc     14 4E 85 F1 | 	sub	fp, #20
252e0     18 18 06 F1 | 	add	arg04, #24
252e4     0C 17 62 FC | 	wrlong	arg03, arg04
252e8     7C FE 9F FD | 	jmp	#LR__3887
252ec                 | LR__3893
252ec     04 4E 05 F1 | 	add	fp, #4
252f0     A7 16 02 FB | 	rdlong	arg03, fp
252f4     0B 13 02 F6 | 	mov	arg01, arg03
252f8     14 16 06 F1 | 	add	arg03, #20
252fc     0B 15 02 FB | 	rdlong	arg02, arg03
25300     04 4E 05 F1 | 	add	fp, #4
25304     A7 16 02 FB | 	rdlong	arg03, fp
25308     0B 15 02 F1 | 	add	arg02, arg03
2530c     14 12 06 F1 | 	add	arg01, #20
25310     09 15 62 FC | 	wrlong	arg02, arg01
25314     A7 16 02 FB | 	rdlong	arg03, fp
25318     08 4E 85 F1 | 	sub	fp, #8
2531c     FF 17 CE F7 | 	test	arg03, #511 wz
25320     6C 00 90 AD |  if_e	jmp	#LR__3895
25324     10 4E 05 F1 | 	add	fp, #16
25328     A7 12 02 FB | 	rdlong	arg01, fp
2532c     04 4E 05 F1 | 	add	fp, #4
25330     A7 14 02 FB | 	rdlong	arg02, fp
25334     14 4E 85 F1 | 	sub	fp, #20
25338     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2533c     1C 4E 05 F1 | 	add	fp, #28
25340     A7 FA 61 FC | 	wrlong	result1, fp
25344     1C 4E 85 F1 | 	sub	fp, #28
25348     00 FA 0D F2 | 	cmp	result1, #0 wz
2534c     1C 00 90 5D |  if_ne	jmp	#LR__3894
25350     04 4E 05 F1 | 	add	fp, #4
25354     A7 16 02 FB | 	rdlong	arg03, fp
25358     04 4E 85 F1 | 	sub	fp, #4
2535c     11 16 06 F1 | 	add	arg03, #17
25360     0B 05 48 FC | 	wrbyte	#2, arg03
25364     02 FA 05 F6 | 	mov	result1, #2
25368     DC 01 90 FD | 	jmp	#LR__3903
2536c                 | LR__3894
2536c     1C 4E 05 F1 | 	add	fp, #28
25370     A7 18 02 FB | 	rdlong	arg04, fp
25374     14 4E 85 F1 | 	sub	fp, #20
25378     A7 16 02 FB | 	rdlong	arg03, fp
2537c     09 16 46 F0 | 	shr	arg03, #9
25380     0B 19 02 F1 | 	add	arg04, arg03
25384     14 4E 05 F1 | 	add	fp, #20
25388     A7 18 62 FC | 	wrlong	arg04, fp
2538c     1C 4E 85 F1 | 	sub	fp, #28
25390                 | LR__3895
25390                 | LR__3896
25390                 | LR__3897
25390     04 4E 05 F1 | 	add	fp, #4
25394     A7 18 02 FB | 	rdlong	arg04, fp
25398     0C 17 02 F6 | 	mov	arg03, arg04
2539c     04 4E 85 F1 | 	sub	fp, #4
253a0     14 16 06 F1 | 	add	arg03, #20
253a4     0B 17 02 FB | 	rdlong	arg03, arg03
253a8     0C 18 06 F1 | 	add	arg04, #12
253ac     0C 19 02 FB | 	rdlong	arg04, arg04
253b0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
253b4     3C 00 90 ED |  if_be	jmp	#LR__3898
253b8     04 4E 05 F1 | 	add	fp, #4
253bc     A7 18 02 FB | 	rdlong	arg04, fp
253c0     0C 17 02 F6 | 	mov	arg03, arg04
253c4     14 18 06 F1 | 	add	arg04, #20
253c8     0C 19 02 FB | 	rdlong	arg04, arg04
253cc     0C 16 06 F1 | 	add	arg03, #12
253d0     0B 19 62 FC | 	wrlong	arg04, arg03
253d4     A7 18 02 FB | 	rdlong	arg04, fp
253d8     0C 17 02 F6 | 	mov	arg03, arg04
253dc     04 4E 85 F1 | 	sub	fp, #4
253e0     10 18 06 F1 | 	add	arg04, #16
253e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
253e8     40 18 46 F5 | 	or	arg04, #64
253ec     10 16 06 F1 | 	add	arg03, #16
253f0     0B 19 42 FC | 	wrbyte	arg04, arg03
253f4                 | LR__3898
253f4     04 4E 05 F1 | 	add	fp, #4
253f8     A7 16 02 FB | 	rdlong	arg03, fp
253fc     04 4E 85 F1 | 	sub	fp, #4
25400     14 16 06 F1 | 	add	arg03, #20
25404     0B 17 02 FB | 	rdlong	arg03, arg03
25408     FF 17 CE F7 | 	test	arg03, #511 wz
2540c     2C 01 90 AD |  if_e	jmp	#LR__3902
25410     04 4E 05 F1 | 	add	fp, #4
25414     A7 18 02 FB | 	rdlong	arg04, fp
25418     18 4E 05 F1 | 	add	fp, #24
2541c     A7 16 02 FB | 	rdlong	arg03, fp
25420     1C 4E 85 F1 | 	sub	fp, #28
25424     1C 18 06 F1 | 	add	arg04, #28
25428     0C 19 02 FB | 	rdlong	arg04, arg04
2542c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
25430     08 01 90 AD |  if_e	jmp	#LR__3902
25434     04 4E 05 F1 | 	add	fp, #4
25438     A7 16 02 FB | 	rdlong	arg03, fp
2543c     04 4E 85 F1 | 	sub	fp, #4
25440     10 16 06 F1 | 	add	arg03, #16
25444     0B 17 C2 FA | 	rdbyte	arg03, arg03
25448     80 16 CE F7 | 	test	arg03, #128 wz
2544c     7C 00 90 AD |  if_e	jmp	#LR__3900
25450     10 4E 05 F1 | 	add	fp, #16
25454     A7 16 02 FB | 	rdlong	arg03, fp
25458     01 16 06 F1 | 	add	arg03, #1
2545c     0B 13 C2 FA | 	rdbyte	arg01, arg03
25460     0C 4E 85 F1 | 	sub	fp, #12
25464     A7 16 02 FB | 	rdlong	arg03, fp
25468     0B 15 02 F6 | 	mov	arg02, arg03
2546c     28 14 06 F1 | 	add	arg02, #40
25470     04 4E 85 F1 | 	sub	fp, #4
25474     1C 16 06 F1 | 	add	arg03, #28
25478     0B 17 02 FB | 	rdlong	arg03, arg03
2547c     01 18 06 F6 | 	mov	arg04, #1
25480     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
25484     00 FA 0D F2 | 	cmp	result1, #0 wz
25488     1C 00 90 AD |  if_e	jmp	#LR__3899
2548c     04 4E 05 F1 | 	add	fp, #4
25490     A7 16 02 FB | 	rdlong	arg03, fp
25494     04 4E 85 F1 | 	sub	fp, #4
25498     11 16 06 F1 | 	add	arg03, #17
2549c     0B 03 48 FC | 	wrbyte	#1, arg03
254a0     01 FA 05 F6 | 	mov	result1, #1
254a4     A0 00 90 FD | 	jmp	#LR__3903
254a8                 | LR__3899
254a8     04 4E 05 F1 | 	add	fp, #4
254ac     A7 18 02 FB | 	rdlong	arg04, fp
254b0     0C 17 02 F6 | 	mov	arg03, arg04
254b4     04 4E 85 F1 | 	sub	fp, #4
254b8     10 18 06 F1 | 	add	arg04, #16
254bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
254c0     7F 18 06 F5 | 	and	arg04, #127
254c4     10 16 06 F1 | 	add	arg03, #16
254c8     0B 19 42 FC | 	wrbyte	arg04, arg03
254cc                 | LR__3900
254cc     10 4E 05 F1 | 	add	fp, #16
254d0     A7 16 02 FB | 	rdlong	arg03, fp
254d4     01 16 06 F1 | 	add	arg03, #1
254d8     0B 13 C2 FA | 	rdbyte	arg01, arg03
254dc     0C 4E 85 F1 | 	sub	fp, #12
254e0     A7 14 02 FB | 	rdlong	arg02, fp
254e4     28 14 06 F1 | 	add	arg02, #40
254e8     18 4E 05 F1 | 	add	fp, #24
254ec     A7 16 02 FB | 	rdlong	arg03, fp
254f0     1C 4E 85 F1 | 	sub	fp, #28
254f4     01 18 06 F6 | 	mov	arg04, #1
254f8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
254fc     00 FA 0D F2 | 	cmp	result1, #0 wz
25500     1C 00 90 AD |  if_e	jmp	#LR__3901
25504     04 4E 05 F1 | 	add	fp, #4
25508     A7 16 02 FB | 	rdlong	arg03, fp
2550c     04 4E 85 F1 | 	sub	fp, #4
25510     11 16 06 F1 | 	add	arg03, #17
25514     0B 03 48 FC | 	wrbyte	#1, arg03
25518     01 FA 05 F6 | 	mov	result1, #1
2551c     28 00 90 FD | 	jmp	#LR__3903
25520                 | LR__3901
25520     04 4E 05 F1 | 	add	fp, #4
25524     A7 18 02 FB | 	rdlong	arg04, fp
25528     18 4E 05 F1 | 	add	fp, #24
2552c     A7 16 02 FB | 	rdlong	arg03, fp
25530     1C 4E 85 F1 | 	sub	fp, #28
25534     1C 18 06 F1 | 	add	arg04, #28
25538     0C 17 62 FC | 	wrlong	arg03, arg04
2553c                 | LR__3902
2553c                 | ' 
2553c                 | ' 			fp->sect = nsect;
2553c                 | ' 		}
2553c                 | ' 	}
2553c                 | ' 
2553c                 | ' 	return res ;
2553c     0C 4E 05 F1 | 	add	fp, #12
25540     A7 FA 01 FB | 	rdlong	result1, fp
25544     0C 4E 85 F1 | 	sub	fp, #12
25548                 | LR__3903
25548     A7 F0 03 F6 | 	mov	ptra, fp
2554c     B2 00 A0 FD | 	call	#popregs_
25550                 | _fatfs_cc_f_lseek_ret
25550     2D 00 64 FD | 	ret
25554                 | 
25554                 | _fatfs_cc_f_opendir
25554     01 4A 05 F6 | 	mov	COUNT_, #1
25558     A8 00 A0 FD | 	call	#pushregs_
2555c     14 F0 07 F1 | 	add	ptra, #20
25560     04 4E 05 F1 | 	add	fp, #4
25564     A7 12 62 FC | 	wrlong	arg01, fp
25568     04 4E 05 F1 | 	add	fp, #4
2556c     A7 14 62 FC | 	wrlong	arg02, fp
25570     04 4E 85 F1 | 	sub	fp, #4
25574     A7 16 0A FB | 	rdlong	arg03, fp wz
25578     04 4E 85 F1 | 	sub	fp, #4
2557c     09 FA 05 A6 |  if_e	mov	result1, #9
25580     78 01 90 AD |  if_e	jmp	#LR__3916
25584     08 4E 05 F1 | 	add	fp, #8
25588     A7 12 02 F6 | 	mov	arg01, fp
2558c     08 4E 05 F1 | 	add	fp, #8
25590     A7 14 02 F6 | 	mov	arg02, fp
25594     10 4E 85 F1 | 	sub	fp, #16
25598     00 16 06 F6 | 	mov	arg03, #0
2559c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
255a0     0C 4E 05 F1 | 	add	fp, #12
255a4     A7 FA 61 FC | 	wrlong	result1, fp
255a8     0C 4E 85 F1 | 	sub	fp, #12
255ac     00 FA 0D F2 | 	cmp	result1, #0 wz
255b0     20 01 90 5D |  if_ne	jmp	#LR__3915
255b4     04 4E 05 F1 | 	add	fp, #4
255b8     A7 16 02 FB | 	rdlong	arg03, fp
255bc     0C 4E 05 F1 | 	add	fp, #12
255c0     A7 FA 01 FB | 	rdlong	result1, fp
255c4     0B FB 61 FC | 	wrlong	result1, arg03
255c8     0C 4E 85 F1 | 	sub	fp, #12
255cc     A7 12 02 FB | 	rdlong	arg01, fp
255d0     04 4E 05 F1 | 	add	fp, #4
255d4     A7 14 02 FB | 	rdlong	arg02, fp
255d8     08 4E 85 F1 | 	sub	fp, #8
255dc     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
255e0     0C 4E 05 F1 | 	add	fp, #12
255e4     A7 FA 61 FC | 	wrlong	result1, fp
255e8     0C 4E 85 F1 | 	sub	fp, #12
255ec     00 FA 0D F2 | 	cmp	result1, #0 wz
255f0     C4 00 90 5D |  if_ne	jmp	#LR__3914
255f4     04 4E 05 F1 | 	add	fp, #4
255f8     A7 16 02 FB | 	rdlong	arg03, fp
255fc     04 4E 85 F1 | 	sub	fp, #4
25600     2B 16 06 F1 | 	add	arg03, #43
25604     0B 17 C2 FA | 	rdbyte	arg03, arg03
25608     80 16 CE F7 | 	test	arg03, #128 wz
2560c     58 00 90 5D |  if_ne	jmp	#LR__3912
25610     04 4E 05 F1 | 	add	fp, #4
25614     A7 16 02 FB | 	rdlong	arg03, fp
25618     04 4E 85 F1 | 	sub	fp, #4
2561c     06 16 06 F1 | 	add	arg03, #6
25620     0B 17 C2 FA | 	rdbyte	arg03, arg03
25624     10 16 CE F7 | 	test	arg03, #16 wz
25628     30 00 90 AD |  if_e	jmp	#LR__3910
2562c     04 4E 05 F1 | 	add	fp, #4
25630     A7 16 02 FB | 	rdlong	arg03, fp
25634     0B 1F 02 F6 | 	mov	local01, arg03
25638     0C 4E 05 F1 | 	add	fp, #12
2563c     A7 12 02 FB | 	rdlong	arg01, fp
25640     10 4E 85 F1 | 	sub	fp, #16
25644     1C 16 06 F1 | 	add	arg03, #28
25648     0B 15 02 FB | 	rdlong	arg02, arg03
2564c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25650     08 1E 06 F1 | 	add	local01, #8
25654     0F FB 61 FC | 	wrlong	result1, local01
25658     0C 00 90 FD | 	jmp	#LR__3911
2565c                 | LR__3910
2565c     0C 4E 05 F1 | 	add	fp, #12
25660     A7 0A 68 FC | 	wrlong	#5, fp
25664     0C 4E 85 F1 | 	sub	fp, #12
25668                 | LR__3911
25668                 | LR__3912
25668     0C 4E 05 F1 | 	add	fp, #12
2566c     A7 1E 0A FB | 	rdlong	local01, fp wz
25670     0C 4E 85 F1 | 	sub	fp, #12
25674     40 00 90 5D |  if_ne	jmp	#LR__3913
25678     04 4E 05 F1 | 	add	fp, #4
2567c     A7 1E 02 FB | 	rdlong	local01, fp
25680     0C 4E 05 F1 | 	add	fp, #12
25684     A7 16 02 FB | 	rdlong	arg03, fp
25688     06 16 06 F1 | 	add	arg03, #6
2568c     0B 17 E2 FA | 	rdword	arg03, arg03
25690     04 1E 06 F1 | 	add	local01, #4
25694     0F 17 52 FC | 	wrword	arg03, local01
25698     0C 4E 85 F1 | 	sub	fp, #12
2569c     A7 12 02 FB | 	rdlong	arg01, fp
256a0     04 4E 85 F1 | 	sub	fp, #4
256a4     00 14 06 F6 | 	mov	arg02, #0
256a8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
256ac     0C 4E 05 F1 | 	add	fp, #12
256b0     A7 FA 61 FC | 	wrlong	result1, fp
256b4     0C 4E 85 F1 | 	sub	fp, #12
256b8                 | LR__3913
256b8                 | LR__3914
256b8     0C 4E 05 F1 | 	add	fp, #12
256bc     A7 1E 02 FB | 	rdlong	local01, fp
256c0     0C 4E 85 F1 | 	sub	fp, #12
256c4     04 1E 0E F2 | 	cmp	local01, #4 wz
256c8     0C 4E 05 A1 |  if_e	add	fp, #12
256cc     A7 0A 68 AC |  if_e	wrlong	#5, fp
256d0     0C 4E 85 A1 |  if_e	sub	fp, #12
256d4                 | LR__3915
256d4     0C 4E 05 F1 | 	add	fp, #12
256d8     A7 1E 0A FB | 	rdlong	local01, fp wz
256dc     0C 4E 85 F1 | 	sub	fp, #12
256e0     04 4E 05 51 |  if_ne	add	fp, #4
256e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
256e8     04 4E 85 51 |  if_ne	sub	fp, #4
256ec     0F 01 68 5C |  if_ne	wrlong	#0, local01
256f0                 | ' 
256f0                 | ' 	return res ;
256f0     0C 4E 05 F1 | 	add	fp, #12
256f4     A7 FA 01 FB | 	rdlong	result1, fp
256f8     0C 4E 85 F1 | 	sub	fp, #12
256fc                 | LR__3916
256fc     A7 F0 03 F6 | 	mov	ptra, fp
25700     B2 00 A0 FD | 	call	#popregs_
25704                 | _fatfs_cc_f_opendir_ret
25704     2D 00 64 FD | 	ret
25708                 | 
25708                 | _fatfs_cc_f_closedir
25708     00 4A 05 F6 | 	mov	COUNT_, #0
2570c     A8 00 A0 FD | 	call	#pushregs_
25710     10 F0 07 F1 | 	add	ptra, #16
25714     04 4E 05 F1 | 	add	fp, #4
25718     A7 12 62 FC | 	wrlong	arg01, fp
2571c     08 4E 05 F1 | 	add	fp, #8
25720     A7 14 02 F6 | 	mov	arg02, fp
25724     0C 4E 85 F1 | 	sub	fp, #12
25728     C0 DD BF FD | 	call	#_fatfs_cc_validate
2572c     08 4E 05 F1 | 	add	fp, #8
25730     A7 FA 61 FC | 	wrlong	result1, fp
25734     08 4E 85 F1 | 	sub	fp, #8
25738     00 FA 0D F2 | 	cmp	result1, #0 wz
2573c     04 4E 05 A1 |  if_e	add	fp, #4
25740     A7 FA 01 AB |  if_e	rdlong	result1, fp
25744     04 4E 85 A1 |  if_e	sub	fp, #4
25748     FD 00 68 AC |  if_e	wrlong	#0, result1
2574c                 | ' 
2574c                 | ' 
2574c                 | ' 
2574c                 | ' 
2574c                 | ' 		dp->obj.fs = 0;
2574c                 | ' #line 4633 "ff.c"
2574c                 | ' 	}
2574c                 | ' 	return res;
2574c     08 4E 05 F1 | 	add	fp, #8
25750     A7 FA 01 FB | 	rdlong	result1, fp
25754     08 4E 85 F1 | 	sub	fp, #8
25758     A7 F0 03 F6 | 	mov	ptra, fp
2575c     B2 00 A0 FD | 	call	#popregs_
25760                 | _fatfs_cc_f_closedir_ret
25760     2D 00 64 FD | 	ret
25764                 | 
25764                 | _fatfs_cc_f_readdir
25764     00 4A 05 F6 | 	mov	COUNT_, #0
25768     A8 00 A0 FD | 	call	#pushregs_
2576c     14 F0 07 F1 | 	add	ptra, #20
25770     04 4E 05 F1 | 	add	fp, #4
25774     A7 12 62 FC | 	wrlong	arg01, fp
25778     04 4E 05 F1 | 	add	fp, #4
2577c     A7 14 62 FC | 	wrlong	arg02, fp
25780     04 4E 85 F1 | 	sub	fp, #4
25784     A7 12 02 FB | 	rdlong	arg01, fp
25788     0C 4E 05 F1 | 	add	fp, #12
2578c     A7 14 02 F6 | 	mov	arg02, fp
25790     10 4E 85 F1 | 	sub	fp, #16
25794     54 DD BF FD | 	call	#_fatfs_cc_validate
25798     0C 4E 05 F1 | 	add	fp, #12
2579c     A7 FA 61 FC | 	wrlong	result1, fp
257a0     0C 4E 85 F1 | 	sub	fp, #12
257a4     00 FA 0D F2 | 	cmp	result1, #0 wz
257a8     BC 00 90 5D |  if_ne	jmp	#LR__3923
257ac     08 4E 05 F1 | 	add	fp, #8
257b0     A7 FA 09 FB | 	rdlong	result1, fp wz
257b4     08 4E 85 F1 | 	sub	fp, #8
257b8     24 00 90 5D |  if_ne	jmp	#LR__3920
257bc     04 4E 05 F1 | 	add	fp, #4
257c0     A7 12 02 FB | 	rdlong	arg01, fp
257c4     04 4E 85 F1 | 	sub	fp, #4
257c8     00 14 06 F6 | 	mov	arg02, #0
257cc     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
257d0     0C 4E 05 F1 | 	add	fp, #12
257d4     A7 FA 61 FC | 	wrlong	result1, fp
257d8     0C 4E 85 F1 | 	sub	fp, #12
257dc     88 00 90 FD | 	jmp	#LR__3922
257e0                 | LR__3920
257e0     04 4E 05 F1 | 	add	fp, #4
257e4     A7 12 02 FB | 	rdlong	arg01, fp
257e8     04 4E 85 F1 | 	sub	fp, #4
257ec     00 14 06 F6 | 	mov	arg02, #0
257f0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
257f4     0C 4E 05 F1 | 	add	fp, #12
257f8     A7 FA 61 FC | 	wrlong	result1, fp
257fc     0C 4E 85 F1 | 	sub	fp, #12
25800     04 FA 0D F2 | 	cmp	result1, #4 wz
25804     0C 4E 05 A1 |  if_e	add	fp, #12
25808     A7 00 68 AC |  if_e	wrlong	#0, fp
2580c     0C 4E 85 A1 |  if_e	sub	fp, #12
25810     0C 4E 05 F1 | 	add	fp, #12
25814     A7 FA 09 FB | 	rdlong	result1, fp wz
25818     0C 4E 85 F1 | 	sub	fp, #12
2581c     48 00 90 5D |  if_ne	jmp	#LR__3921
25820     04 4E 05 F1 | 	add	fp, #4
25824     A7 12 02 FB | 	rdlong	arg01, fp
25828     04 4E 05 F1 | 	add	fp, #4
2582c     A7 14 02 FB | 	rdlong	arg02, fp
25830     08 4E 85 F1 | 	sub	fp, #8
25834     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25838     04 4E 05 F1 | 	add	fp, #4
2583c     A7 12 02 FB | 	rdlong	arg01, fp
25840     04 4E 85 F1 | 	sub	fp, #4
25844     00 14 06 F6 | 	mov	arg02, #0
25848     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2584c     0C 4E 05 F1 | 	add	fp, #12
25850     A7 FA 61 FC | 	wrlong	result1, fp
25854     0C 4E 85 F1 | 	sub	fp, #12
25858     04 FA 0D F2 | 	cmp	result1, #4 wz
2585c     0C 4E 05 A1 |  if_e	add	fp, #12
25860     A7 00 68 AC |  if_e	wrlong	#0, fp
25864     0C 4E 85 A1 |  if_e	sub	fp, #12
25868                 | LR__3921
25868                 | LR__3922
25868                 | LR__3923
25868                 | ' 			}
25868                 | ' 			;
25868                 | ' 		}
25868                 | ' 	}
25868                 | ' 	return res ;
25868     0C 4E 05 F1 | 	add	fp, #12
2586c     A7 FA 01 FB | 	rdlong	result1, fp
25870     0C 4E 85 F1 | 	sub	fp, #12
25874     A7 F0 03 F6 | 	mov	ptra, fp
25878     B2 00 A0 FD | 	call	#popregs_
2587c                 | _fatfs_cc_f_readdir_ret
2587c     2D 00 64 FD | 	ret
25880                 | 
25880                 | _fatfs_cc_f_stat
25880     00 4A 05 F6 | 	mov	COUNT_, #0
25884     A8 00 A0 FD | 	call	#pushregs_
25888     40 F0 07 F1 | 	add	ptra, #64
2588c     04 4E 05 F1 | 	add	fp, #4
25890     A7 12 62 FC | 	wrlong	arg01, fp
25894     04 4E 05 F1 | 	add	fp, #4
25898     A7 14 62 FC | 	wrlong	arg02, fp
2589c     04 4E 85 F1 | 	sub	fp, #4
258a0     A7 12 02 F6 | 	mov	arg01, fp
258a4     0C 4E 05 F1 | 	add	fp, #12
258a8     A7 14 02 F6 | 	mov	arg02, fp
258ac     10 4E 85 F1 | 	sub	fp, #16
258b0     00 16 06 F6 | 	mov	arg03, #0
258b4     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
258b8     0C 4E 05 F1 | 	add	fp, #12
258bc     A7 FA 61 FC | 	wrlong	result1, fp
258c0     0C 4E 85 F1 | 	sub	fp, #12
258c4     00 FA 0D F2 | 	cmp	result1, #0 wz
258c8     74 00 90 5D |  if_ne	jmp	#LR__3933
258cc     10 4E 05 F1 | 	add	fp, #16
258d0     A7 12 02 F6 | 	mov	arg01, fp
258d4     0C 4E 85 F1 | 	sub	fp, #12
258d8     A7 14 02 FB | 	rdlong	arg02, fp
258dc     04 4E 85 F1 | 	sub	fp, #4
258e0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
258e4     0C 4E 05 F1 | 	add	fp, #12
258e8     A7 FA 61 FC | 	wrlong	result1, fp
258ec     0C 4E 85 F1 | 	sub	fp, #12
258f0     00 FA 0D F2 | 	cmp	result1, #0 wz
258f4     48 00 90 5D |  if_ne	jmp	#LR__3932
258f8     3B 4E 05 F1 | 	add	fp, #59
258fc     A7 FA C1 FA | 	rdbyte	result1, fp
25900     3B 4E 85 F1 | 	sub	fp, #59
25904     80 FA CD F7 | 	test	result1, #128 wz
25908     0C 4E 05 51 |  if_ne	add	fp, #12
2590c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25910     0C 4E 85 51 |  if_ne	sub	fp, #12
25914     28 00 90 5D |  if_ne	jmp	#LR__3931
25918     08 4E 05 F1 | 	add	fp, #8
2591c     A7 FA 09 FB | 	rdlong	result1, fp wz
25920     08 4E 85 F1 | 	sub	fp, #8
25924     18 00 90 AD |  if_e	jmp	#LR__3930
25928     10 4E 05 F1 | 	add	fp, #16
2592c     A7 12 02 F6 | 	mov	arg01, fp
25930     08 4E 85 F1 | 	sub	fp, #8
25934     A7 14 02 FB | 	rdlong	arg02, fp
25938     08 4E 85 F1 | 	sub	fp, #8
2593c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25940                 | LR__3930
25940                 | LR__3931
25940                 | LR__3932
25940                 | LR__3933
25940                 | ' 			}
25940                 | ' 		}
25940                 | ' 		;
25940                 | ' 	}
25940                 | ' 
25940                 | ' 	return res ;
25940     0C 4E 05 F1 | 	add	fp, #12
25944     A7 FA 01 FB | 	rdlong	result1, fp
25948     0C 4E 85 F1 | 	sub	fp, #12
2594c     A7 F0 03 F6 | 	mov	ptra, fp
25950     B2 00 A0 FD | 	call	#popregs_
25954                 | _fatfs_cc_f_stat_ret
25954     2D 00 64 FD | 	ret
25958                 | 
25958                 | _fatfs_cc_f_unlink
25958     00 4A 05 F6 | 	mov	COUNT_, #0
2595c     A8 00 A0 FD | 	call	#pushregs_
25960     74 F0 07 F1 | 	add	ptra, #116
25964     04 4E 05 F1 | 	add	fp, #4
25968     A7 12 62 FC | 	wrlong	arg01, fp
2596c     68 4E 05 F1 | 	add	fp, #104
25970     A7 00 68 FC | 	wrlong	#0, fp
25974     68 4E 85 F1 | 	sub	fp, #104
25978     A7 12 02 F6 | 	mov	arg01, fp
2597c     6C 4E 05 F1 | 	add	fp, #108
25980     A7 14 02 F6 | 	mov	arg02, fp
25984     70 4E 85 F1 | 	sub	fp, #112
25988     02 16 06 F6 | 	mov	arg03, #2
2598c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25990     08 4E 05 F1 | 	add	fp, #8
25994     A7 FA 61 FC | 	wrlong	result1, fp
25998     08 4E 85 F1 | 	sub	fp, #8
2599c     00 FA 0D F2 | 	cmp	result1, #0 wz
259a0     E4 01 90 5D |  if_ne	jmp	#LR__3948
259a4     70 4E 05 F1 | 	add	fp, #112
259a8     A7 16 02 FB | 	rdlong	arg03, fp
259ac     64 4E 85 F1 | 	sub	fp, #100
259b0     A7 16 62 FC | 	wrlong	arg03, fp
259b4     A7 12 02 F6 | 	mov	arg01, fp
259b8     08 4E 85 F1 | 	sub	fp, #8
259bc     A7 14 02 FB | 	rdlong	arg02, fp
259c0     04 4E 85 F1 | 	sub	fp, #4
259c4     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
259c8     08 4E 05 F1 | 	add	fp, #8
259cc     A7 FA 61 FC | 	wrlong	result1, fp
259d0     00 FA 4D F2 | 	cmps	result1, #0 wz
259d4     08 4E 85 F1 | 	sub	fp, #8
259d8     AC 01 90 5D |  if_ne	jmp	#LR__3947
259dc     37 4E 05 F1 | 	add	fp, #55
259e0     A7 FA C1 FA | 	rdbyte	result1, fp
259e4     37 4E 85 F1 | 	sub	fp, #55
259e8     80 FA CD F7 | 	test	result1, #128 wz
259ec     08 4E 05 51 |  if_ne	add	fp, #8
259f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
259f4     08 4E 85 51 |  if_ne	sub	fp, #8
259f8     1C 00 90 5D |  if_ne	jmp	#LR__3940
259fc     12 4E 05 F1 | 	add	fp, #18
25a00     A7 FA C1 FA | 	rdbyte	result1, fp
25a04     12 4E 85 F1 | 	sub	fp, #18
25a08     01 FA CD F7 | 	test	result1, #1 wz
25a0c     08 4E 05 51 |  if_ne	add	fp, #8
25a10     A7 0E 68 5C |  if_ne	wrlong	#7, fp
25a14     08 4E 85 51 |  if_ne	sub	fp, #8
25a18                 | LR__3940
25a18     08 4E 05 F1 | 	add	fp, #8
25a1c     A7 FA 09 FB | 	rdlong	result1, fp wz
25a20     08 4E 85 F1 | 	sub	fp, #8
25a24     C8 00 90 5D |  if_ne	jmp	#LR__3943
25a28     70 4E 05 F1 | 	add	fp, #112
25a2c     A7 12 02 FB | 	rdlong	arg01, fp
25a30     48 4E 85 F1 | 	sub	fp, #72
25a34     A7 14 02 FB | 	rdlong	arg02, fp
25a38     28 4E 85 F1 | 	sub	fp, #40
25a3c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25a40     6C 4E 05 F1 | 	add	fp, #108
25a44     A7 FA 61 FC | 	wrlong	result1, fp
25a48     5A 4E 85 F1 | 	sub	fp, #90
25a4c     A7 FA C1 FA | 	rdbyte	result1, fp
25a50     12 4E 85 F1 | 	sub	fp, #18
25a54     10 FA CD F7 | 	test	result1, #16 wz
25a58     94 00 90 AD |  if_e	jmp	#LR__3942
25a5c     70 4E 05 F1 | 	add	fp, #112
25a60     A7 FA 01 FB | 	rdlong	result1, fp
25a64     34 4E 85 F1 | 	sub	fp, #52
25a68     A7 FA 61 FC | 	wrlong	result1, fp
25a6c     30 4E 05 F1 | 	add	fp, #48
25a70     A7 16 02 FB | 	rdlong	arg03, fp
25a74     28 4E 85 F1 | 	sub	fp, #40
25a78     A7 16 62 FC | 	wrlong	arg03, fp
25a7c     08 4E 85 F1 | 	sub	fp, #8
25a80     A7 12 02 F6 | 	mov	arg01, fp
25a84     3C 4E 85 F1 | 	sub	fp, #60
25a88     00 14 06 F6 | 	mov	arg02, #0
25a8c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25a90     08 4E 05 F1 | 	add	fp, #8
25a94     A7 FA 61 FC | 	wrlong	result1, fp
25a98     08 4E 85 F1 | 	sub	fp, #8
25a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
25aa0     4C 00 90 5D |  if_ne	jmp	#LR__3941
25aa4     3C 4E 05 F1 | 	add	fp, #60
25aa8     A7 12 02 F6 | 	mov	arg01, fp
25aac     3C 4E 85 F1 | 	sub	fp, #60
25ab0     00 14 06 F6 | 	mov	arg02, #0
25ab4     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
25ab8     08 4E 05 F1 | 	add	fp, #8
25abc     A7 FA 61 FC | 	wrlong	result1, fp
25ac0     00 FA 4D F2 | 	cmps	result1, #0 wz
25ac4     08 4E 85 F1 | 	sub	fp, #8
25ac8     08 4E 05 A1 |  if_e	add	fp, #8
25acc     A7 0E 68 AC |  if_e	wrlong	#7, fp
25ad0     08 4E 85 A1 |  if_e	sub	fp, #8
25ad4     08 4E 05 F1 | 	add	fp, #8
25ad8     A7 FA 01 FB | 	rdlong	result1, fp
25adc     08 4E 85 F1 | 	sub	fp, #8
25ae0     04 FA 0D F2 | 	cmp	result1, #4 wz
25ae4     08 4E 05 A1 |  if_e	add	fp, #8
25ae8     A7 00 68 AC |  if_e	wrlong	#0, fp
25aec     08 4E 85 A1 |  if_e	sub	fp, #8
25af0                 | LR__3941
25af0                 | LR__3942
25af0                 | LR__3943
25af0     08 4E 05 F1 | 	add	fp, #8
25af4     A7 FA 09 FB | 	rdlong	result1, fp wz
25af8     08 4E 85 F1 | 	sub	fp, #8
25afc     88 00 90 5D |  if_ne	jmp	#LR__3946
25b00     0C 4E 05 F1 | 	add	fp, #12
25b04     A7 12 02 F6 | 	mov	arg01, fp
25b08     0C 4E 85 F1 | 	sub	fp, #12
25b0c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25b10     08 4E 05 F1 | 	add	fp, #8
25b14     A7 FA 61 FC | 	wrlong	result1, fp
25b18     08 4E 85 F1 | 	sub	fp, #8
25b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b20     38 00 90 5D |  if_ne	jmp	#LR__3944
25b24     6C 4E 05 F1 | 	add	fp, #108
25b28     A7 FA 09 FB | 	rdlong	result1, fp wz
25b2c     6C 4E 85 F1 | 	sub	fp, #108
25b30     28 00 90 AD |  if_e	jmp	#LR__3944
25b34     0C 4E 05 F1 | 	add	fp, #12
25b38     A7 12 02 F6 | 	mov	arg01, fp
25b3c     60 4E 05 F1 | 	add	fp, #96
25b40     A7 14 02 FB | 	rdlong	arg02, fp
25b44     6C 4E 85 F1 | 	sub	fp, #108
25b48     00 16 06 F6 | 	mov	arg03, #0
25b4c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25b50     08 4E 05 F1 | 	add	fp, #8
25b54     A7 FA 61 FC | 	wrlong	result1, fp
25b58     08 4E 85 F1 | 	sub	fp, #8
25b5c                 | LR__3944
25b5c     08 4E 05 F1 | 	add	fp, #8
25b60     A7 FA 09 FB | 	rdlong	result1, fp wz
25b64     08 4E 85 F1 | 	sub	fp, #8
25b68     1C 00 90 5D |  if_ne	jmp	#LR__3945
25b6c     70 4E 05 F1 | 	add	fp, #112
25b70     A7 12 02 FB | 	rdlong	arg01, fp
25b74     70 4E 85 F1 | 	sub	fp, #112
25b78     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25b7c     08 4E 05 F1 | 	add	fp, #8
25b80     A7 FA 61 FC | 	wrlong	result1, fp
25b84     08 4E 85 F1 | 	sub	fp, #8
25b88                 | LR__3945
25b88                 | LR__3946
25b88                 | LR__3947
25b88                 | LR__3948
25b88                 | ' 			}
25b88                 | ' 		}
25b88                 | ' 		;
25b88                 | ' 	}
25b88                 | ' 
25b88                 | ' 	return res ;
25b88     08 4E 05 F1 | 	add	fp, #8
25b8c     A7 FA 01 FB | 	rdlong	result1, fp
25b90     08 4E 85 F1 | 	sub	fp, #8
25b94     A7 F0 03 F6 | 	mov	ptra, fp
25b98     B2 00 A0 FD | 	call	#popregs_
25b9c                 | _fatfs_cc_f_unlink_ret
25b9c     2D 00 64 FD | 	ret
25ba0                 | 
25ba0                 | _fatfs_cc_f_mkdir
25ba0     00 4A 05 F6 | 	mov	COUNT_, #0
25ba4     A8 00 A0 FD | 	call	#pushregs_
25ba8     5C F0 07 F1 | 	add	ptra, #92
25bac     04 4E 05 F1 | 	add	fp, #4
25bb0     A7 12 62 FC | 	wrlong	arg01, fp
25bb4     A7 12 02 F6 | 	mov	arg01, fp
25bb8     48 4E 05 F1 | 	add	fp, #72
25bbc     A7 14 02 F6 | 	mov	arg02, fp
25bc0     4C 4E 85 F1 | 	sub	fp, #76
25bc4     02 16 06 F6 | 	mov	arg03, #2
25bc8     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
25bcc     08 4E 05 F1 | 	add	fp, #8
25bd0     A7 FA 61 FC | 	wrlong	result1, fp
25bd4     08 4E 85 F1 | 	sub	fp, #8
25bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
25bdc     C4 02 90 5D |  if_ne	jmp	#LR__3955
25be0     4C 4E 05 F1 | 	add	fp, #76
25be4     A7 16 02 FB | 	rdlong	arg03, fp
25be8     40 4E 85 F1 | 	sub	fp, #64
25bec     A7 16 62 FC | 	wrlong	arg03, fp
25bf0     A7 12 02 F6 | 	mov	arg01, fp
25bf4     08 4E 85 F1 | 	sub	fp, #8
25bf8     A7 14 02 FB | 	rdlong	arg02, fp
25bfc     04 4E 85 F1 | 	sub	fp, #4
25c00     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
25c04     08 4E 05 F1 | 	add	fp, #8
25c08     A7 FA 61 FC | 	wrlong	result1, fp
25c0c     00 FA 4D F2 | 	cmps	result1, #0 wz
25c10     08 4E 85 F1 | 	sub	fp, #8
25c14     08 4E 05 A1 |  if_e	add	fp, #8
25c18     A7 10 68 AC |  if_e	wrlong	#8, fp
25c1c     08 4E 85 A1 |  if_e	sub	fp, #8
25c20     08 4E 05 F1 | 	add	fp, #8
25c24     A7 FA 01 FB | 	rdlong	result1, fp
25c28     08 4E 85 F1 | 	sub	fp, #8
25c2c     04 FA 0D F2 | 	cmp	result1, #4 wz
25c30     70 02 90 5D |  if_ne	jmp	#LR__3954
25c34     4C 4E 05 F1 | 	add	fp, #76
25c38     A7 16 02 FB | 	rdlong	arg03, fp
25c3c     10 4E 85 F1 | 	sub	fp, #16
25c40     A7 16 62 FC | 	wrlong	arg03, fp
25c44     A7 12 02 F6 | 	mov	arg01, fp
25c48     3C 4E 85 F1 | 	sub	fp, #60
25c4c     00 14 06 F6 | 	mov	arg02, #0
25c50     04 AC BF FD | 	call	#_fatfs_cc_create_chain
25c54     50 4E 05 F1 | 	add	fp, #80
25c58     A7 FA 61 FC | 	wrlong	result1, fp
25c5c     48 4E 85 F1 | 	sub	fp, #72
25c60     A7 00 68 FC | 	wrlong	#0, fp
25c64     48 4E 05 F1 | 	add	fp, #72
25c68     A7 FA 09 FB | 	rdlong	result1, fp wz
25c6c     50 4E 85 F1 | 	sub	fp, #80
25c70     08 4E 05 A1 |  if_e	add	fp, #8
25c74     A7 0E 68 AC |  if_e	wrlong	#7, fp
25c78     08 4E 85 A1 |  if_e	sub	fp, #8
25c7c     50 4E 05 F1 | 	add	fp, #80
25c80     A7 FA 01 FB | 	rdlong	result1, fp
25c84     50 4E 85 F1 | 	sub	fp, #80
25c88     01 FA 0D F2 | 	cmp	result1, #1 wz
25c8c     08 4E 05 A1 |  if_e	add	fp, #8
25c90     A7 04 68 AC |  if_e	wrlong	#2, fp
25c94     08 4E 85 A1 |  if_e	sub	fp, #8
25c98     50 4E 05 F1 | 	add	fp, #80
25c9c     A7 16 02 FB | 	rdlong	arg03, fp
25ca0     50 4E 85 F1 | 	sub	fp, #80
25ca4     FF FF 7F FF 
25ca8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
25cac     08 4E 05 A1 |  if_e	add	fp, #8
25cb0     A7 02 68 AC |  if_e	wrlong	#1, fp
25cb4     08 4E 85 A1 |  if_e	sub	fp, #8
25cb8     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
25cbc     58 4E 05 F1 | 	add	fp, #88
25cc0     A7 FA 61 FC | 	wrlong	result1, fp
25cc4     50 4E 85 F1 | 	sub	fp, #80
25cc8     A7 FA 09 FB | 	rdlong	result1, fp wz
25ccc     08 4E 85 F1 | 	sub	fp, #8
25cd0     1C 01 90 5D |  if_ne	jmp	#LR__3951
25cd4     4C 4E 05 F1 | 	add	fp, #76
25cd8     A7 12 02 FB | 	rdlong	arg01, fp
25cdc     04 4E 05 F1 | 	add	fp, #4
25ce0     A7 14 02 FB | 	rdlong	arg02, fp
25ce4     50 4E 85 F1 | 	sub	fp, #80
25ce8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
25cec     08 4E 05 F1 | 	add	fp, #8
25cf0     A7 FA 61 FC | 	wrlong	result1, fp
25cf4     00 FA 4D F2 | 	cmps	result1, #0 wz
25cf8     08 4E 85 F1 | 	sub	fp, #8
25cfc     F0 00 90 5D |  if_ne	jmp	#LR__3950
25d00     4C 4E 05 F1 | 	add	fp, #76
25d04     A7 12 02 FB | 	rdlong	arg01, fp
25d08     4C 4E 85 F1 | 	sub	fp, #76
25d0c     34 12 06 F1 | 	add	arg01, #52
25d10     20 14 06 F6 | 	mov	arg02, #32
25d14     0B 16 06 F6 | 	mov	arg03, #11
25d18     98 00 A0 FD | 	call	#\builtin_bytefill_
25d1c     4C 4E 05 F1 | 	add	fp, #76
25d20     A7 FA 01 FB | 	rdlong	result1, fp
25d24     34 FA 05 F1 | 	add	result1, #52
25d28     FD 5C 48 FC | 	wrbyte	#46, result1
25d2c     A7 16 02 FB | 	rdlong	arg03, fp
25d30     3F 16 06 F1 | 	add	arg03, #63
25d34     0B 21 48 FC | 	wrbyte	#16, arg03
25d38     A7 12 02 FB | 	rdlong	arg01, fp
25d3c     4A 12 06 F1 | 	add	arg01, #74
25d40     0C 4E 05 F1 | 	add	fp, #12
25d44     A7 14 02 FB | 	rdlong	arg02, fp
25d48     09 15 62 FC | 	wrlong	arg02, arg01
25d4c     0C 4E 85 F1 | 	sub	fp, #12
25d50     A7 14 02 FB | 	rdlong	arg02, fp
25d54     0A 13 02 F6 | 	mov	arg01, arg02
25d58     34 14 06 F1 | 	add	arg02, #52
25d5c     04 4E 05 F1 | 	add	fp, #4
25d60     A7 16 02 FB | 	rdlong	arg03, fp
25d64     50 4E 85 F1 | 	sub	fp, #80
25d68     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25d6c     4C 4E 05 F1 | 	add	fp, #76
25d70     A7 14 02 FB | 	rdlong	arg02, fp
25d74     0A 13 02 F6 | 	mov	arg01, arg02
25d78     54 12 06 F1 | 	add	arg01, #84
25d7c     4C 4E 85 F1 | 	sub	fp, #76
25d80     34 14 06 F1 | 	add	arg02, #52
25d84     20 16 06 F6 | 	mov	arg03, #32
25d88     68 2D BF FD | 	call	#__system____builtin_memmove
25d8c     4C 4E 05 F1 | 	add	fp, #76
25d90     A7 16 02 FB | 	rdlong	arg03, fp
25d94     55 16 06 F1 | 	add	arg03, #85
25d98     0B 5D 48 FC | 	wrbyte	#46, arg03
25d9c     38 4E 85 F1 | 	sub	fp, #56
25da0     A7 16 02 FB | 	rdlong	arg03, fp
25da4     40 4E 05 F1 | 	add	fp, #64
25da8     A7 16 62 FC | 	wrlong	arg03, fp
25dac     08 4E 85 F1 | 	sub	fp, #8
25db0     A7 14 02 FB | 	rdlong	arg02, fp
25db4     0A 13 02 F6 | 	mov	arg01, arg02
25db8     54 14 06 F1 | 	add	arg02, #84
25dbc     4C 4E 85 F1 | 	sub	fp, #76
25dc0     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
25dc4     4C 4E 05 F1 | 	add	fp, #76
25dc8     A7 16 02 FB | 	rdlong	arg03, fp
25dcc     03 16 06 F1 | 	add	arg03, #3
25dd0     0B 03 48 FC | 	wrbyte	#1, arg03
25dd4     40 4E 85 F1 | 	sub	fp, #64
25dd8     A7 12 02 F6 | 	mov	arg01, fp
25ddc     0C 4E 85 F1 | 	sub	fp, #12
25de0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
25de4     08 4E 05 F1 | 	add	fp, #8
25de8     A7 FA 61 FC | 	wrlong	result1, fp
25dec     08 4E 85 F1 | 	sub	fp, #8
25df0                 | LR__3950
25df0                 | LR__3951
25df0     08 4E 05 F1 | 	add	fp, #8
25df4     A7 FA 09 FB | 	rdlong	result1, fp wz
25df8     08 4E 85 F1 | 	sub	fp, #8
25dfc     88 00 90 5D |  if_ne	jmp	#LR__3952
25e00     28 4E 05 F1 | 	add	fp, #40
25e04     A7 12 02 FB | 	rdlong	arg01, fp
25e08     16 12 06 F1 | 	add	arg01, #22
25e0c     30 4E 05 F1 | 	add	fp, #48
25e10     A7 14 02 FB | 	rdlong	arg02, fp
25e14     09 15 62 FC | 	wrlong	arg02, arg01
25e18     0C 4E 85 F1 | 	sub	fp, #12
25e1c     A7 12 02 FB | 	rdlong	arg01, fp
25e20     24 4E 85 F1 | 	sub	fp, #36
25e24     A7 14 02 FB | 	rdlong	arg02, fp
25e28     28 4E 05 F1 | 	add	fp, #40
25e2c     A7 16 02 FB | 	rdlong	arg03, fp
25e30     50 4E 85 F1 | 	sub	fp, #80
25e34     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
25e38     28 4E 05 F1 | 	add	fp, #40
25e3c     A7 FA 01 FB | 	rdlong	result1, fp
25e40     0B FA 05 F1 | 	add	result1, #11
25e44     FD 20 48 FC | 	wrbyte	#16, result1
25e48     24 4E 05 F1 | 	add	fp, #36
25e4c     A7 FA 01 FB | 	rdlong	result1, fp
25e50     03 FA 05 F1 | 	add	result1, #3
25e54     FD 02 48 FC | 	wrbyte	#1, result1
25e58     44 4E 85 F1 | 	sub	fp, #68
25e5c     A7 FA 09 FB | 	rdlong	result1, fp wz
25e60     08 4E 85 F1 | 	sub	fp, #8
25e64     3C 00 90 5D |  if_ne	jmp	#LR__3953
25e68     4C 4E 05 F1 | 	add	fp, #76
25e6c     A7 12 02 FB | 	rdlong	arg01, fp
25e70     4C 4E 85 F1 | 	sub	fp, #76
25e74     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
25e78     08 4E 05 F1 | 	add	fp, #8
25e7c     A7 FA 61 FC | 	wrlong	result1, fp
25e80     08 4E 85 F1 | 	sub	fp, #8
25e84     1C 00 90 FD | 	jmp	#LR__3953
25e88                 | LR__3952
25e88     3C 4E 05 F1 | 	add	fp, #60
25e8c     A7 12 02 F6 | 	mov	arg01, fp
25e90     14 4E 05 F1 | 	add	fp, #20
25e94     A7 14 02 FB | 	rdlong	arg02, fp
25e98     50 4E 85 F1 | 	sub	fp, #80
25e9c     00 16 06 F6 | 	mov	arg03, #0
25ea0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
25ea4                 | LR__3953
25ea4                 | LR__3954
25ea4                 | LR__3955
25ea4                 | ' 				remove_chain(&sobj, dcl, 0);
25ea4                 | ' 			}
25ea4                 | ' 		}
25ea4                 | ' 		;
25ea4                 | ' 	}
25ea4                 | ' 
25ea4                 | ' 	return res ;
25ea4     08 4E 05 F1 | 	add	fp, #8
25ea8     A7 FA 01 FB | 	rdlong	result1, fp
25eac     08 4E 85 F1 | 	sub	fp, #8
25eb0     A7 F0 03 F6 | 	mov	ptra, fp
25eb4     B2 00 A0 FD | 	call	#popregs_
25eb8                 | _fatfs_cc_f_mkdir_ret
25eb8     2D 00 64 FD | 	ret
25ebc                 | 
25ebc                 | _fatfs_cc_f_rename
25ebc     01 4A 05 F6 | 	mov	COUNT_, #1
25ec0     A8 00 A0 FD | 	call	#pushregs_
25ec4     9C F0 07 F1 | 	add	ptra, #156
25ec8     04 4E 05 F1 | 	add	fp, #4
25ecc     A7 12 62 FC | 	wrlong	arg01, fp
25ed0     04 4E 05 F1 | 	add	fp, #4
25ed4     A7 14 62 FC | 	wrlong	arg02, fp
25ed8     A7 12 02 F6 | 	mov	arg01, fp
25edc     08 4E 85 F1 | 	sub	fp, #8
25ee0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
25ee4     04 4E 05 F1 | 	add	fp, #4
25ee8     A7 12 02 F6 | 	mov	arg01, fp
25eec     6C 4E 05 F1 | 	add	fp, #108
25ef0     A7 14 02 F6 | 	mov	arg02, fp
25ef4     70 4E 85 F1 | 	sub	fp, #112
25ef8     02 16 06 F6 | 	mov	arg03, #2
25efc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
25f00     0C 4E 05 F1 | 	add	fp, #12
25f04     A7 FA 61 FC | 	wrlong	result1, fp
25f08     0C 4E 85 F1 | 	sub	fp, #12
25f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
25f10     44 03 90 5D |  if_ne	jmp	#LR__3973
25f14     70 4E 05 F1 | 	add	fp, #112
25f18     A7 16 02 FB | 	rdlong	arg03, fp
25f1c     60 4E 85 F1 | 	sub	fp, #96
25f20     A7 16 62 FC | 	wrlong	arg03, fp
25f24     A7 12 02 F6 | 	mov	arg01, fp
25f28     0C 4E 85 F1 | 	sub	fp, #12
25f2c     A7 14 02 FB | 	rdlong	arg02, fp
25f30     04 4E 85 F1 | 	sub	fp, #4
25f34     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
25f38     0C 4E 05 F1 | 	add	fp, #12
25f3c     A7 FA 61 FC | 	wrlong	result1, fp
25f40     00 FA 4D F2 | 	cmps	result1, #0 wz
25f44     0C 4E 85 F1 | 	sub	fp, #12
25f48     1C 00 90 5D |  if_ne	jmp	#LR__3960
25f4c     3B 4E 05 F1 | 	add	fp, #59
25f50     A7 FA C1 FA | 	rdbyte	result1, fp
25f54     3B 4E 85 F1 | 	sub	fp, #59
25f58     A0 FA CD F7 | 	test	result1, #160 wz
25f5c     0C 4E 05 51 |  if_ne	add	fp, #12
25f60     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25f64     0C 4E 85 51 |  if_ne	sub	fp, #12
25f68                 | LR__3960
25f68     0C 4E 05 F1 | 	add	fp, #12
25f6c     A7 1E 0A FB | 	rdlong	local01, fp wz
25f70     0C 4E 85 F1 | 	sub	fp, #12
25f74     E0 02 90 5D |  if_ne	jmp	#LR__3972
25f78     74 4E 05 F1 | 	add	fp, #116
25f7c     A7 12 02 F6 | 	mov	arg01, fp
25f80     48 4E 85 F1 | 	sub	fp, #72
25f84     A7 14 02 FB | 	rdlong	arg02, fp
25f88     2C 4E 85 F1 | 	sub	fp, #44
25f8c     20 16 06 F6 | 	mov	arg03, #32
25f90     60 2B BF FD | 	call	#__system____builtin_memmove
25f94     40 4E 05 F1 | 	add	fp, #64
25f98     A7 12 02 F6 | 	mov	arg01, fp
25f9c     30 4E 85 F1 | 	sub	fp, #48
25fa0     A7 14 02 F6 | 	mov	arg02, fp
25fa4     10 4E 85 F1 | 	sub	fp, #16
25fa8     30 16 06 F6 | 	mov	arg03, #48
25fac     44 2B BF FD | 	call	#__system____builtin_memmove
25fb0     40 4E 05 F1 | 	add	fp, #64
25fb4     A7 12 02 F6 | 	mov	arg01, fp
25fb8     38 4E 85 F1 | 	sub	fp, #56
25fbc     A7 14 02 FB | 	rdlong	arg02, fp
25fc0     08 4E 85 F1 | 	sub	fp, #8
25fc4     34 CA BF FD | 	call	#_fatfs_cc_follow_path
25fc8     0C 4E 05 F1 | 	add	fp, #12
25fcc     A7 FA 61 FC | 	wrlong	result1, fp
25fd0     0C 4E 85 F1 | 	sub	fp, #12
25fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
25fd8     4C 00 90 5D |  if_ne	jmp	#LR__3963
25fdc     48 4E 05 F1 | 	add	fp, #72
25fe0     A7 FA 01 FB | 	rdlong	result1, fp
25fe4     30 4E 85 F1 | 	sub	fp, #48
25fe8     A7 16 02 FB | 	rdlong	arg03, fp
25fec     18 4E 85 F1 | 	sub	fp, #24
25ff0     0B FB 09 F2 | 	cmp	result1, arg03 wz
25ff4     20 00 90 5D |  if_ne	jmp	#LR__3961
25ff8     50 4E 05 F1 | 	add	fp, #80
25ffc     A7 FA 01 FB | 	rdlong	result1, fp
26000     30 4E 85 F1 | 	sub	fp, #48
26004     A7 16 02 FB | 	rdlong	arg03, fp
26008     20 4E 85 F1 | 	sub	fp, #32
2600c     0B FB 09 F2 | 	cmp	result1, arg03 wz
26010     04 1E 06 A6 |  if_e	mov	local01, #4
26014     04 00 90 AD |  if_e	jmp	#LR__3962
26018                 | LR__3961
26018     08 1E 06 F6 | 	mov	local01, #8
2601c                 | LR__3962
2601c     0C 4E 05 F1 | 	add	fp, #12
26020     A7 1E 62 FC | 	wrlong	local01, fp
26024     0C 4E 85 F1 | 	sub	fp, #12
26028                 | LR__3963
26028     0C 4E 05 F1 | 	add	fp, #12
2602c     A7 1E 02 FB | 	rdlong	local01, fp
26030     0C 4E 85 F1 | 	sub	fp, #12
26034     04 1E 0E F2 | 	cmp	local01, #4 wz
26038     CC 01 90 5D |  if_ne	jmp	#LR__3969
2603c     40 4E 05 F1 | 	add	fp, #64
26040     A7 12 02 F6 | 	mov	arg01, fp
26044     40 4E 85 F1 | 	sub	fp, #64
26048     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2604c     0C 4E 05 F1 | 	add	fp, #12
26050     A7 FA 61 FC | 	wrlong	result1, fp
26054     0C 4E 85 F1 | 	sub	fp, #12
26058     00 FA 0D F2 | 	cmp	result1, #0 wz
2605c     A8 01 90 5D |  if_ne	jmp	#LR__3968
26060     5C 4E 05 F1 | 	add	fp, #92
26064     A7 12 02 FB | 	rdlong	arg01, fp
26068     38 4E 05 F1 | 	add	fp, #56
2606c     A7 12 62 FC | 	wrlong	arg01, fp
26070     0D 12 06 F1 | 	add	arg01, #13
26074     20 4E 85 F1 | 	sub	fp, #32
26078     A7 14 02 F6 | 	mov	arg02, fp
2607c     74 4E 85 F1 | 	sub	fp, #116
26080     0D 14 06 F1 | 	add	arg02, #13
26084     13 16 06 F6 | 	mov	arg03, #19
26088     68 2A BF FD | 	call	#__system____builtin_memmove
2608c     94 4E 05 F1 | 	add	fp, #148
26090     A7 1E 02 FB | 	rdlong	local01, fp
26094     15 4E 85 F1 | 	sub	fp, #21
26098     A7 FA C1 FA | 	rdbyte	result1, fp
2609c     0B 1E 06 F1 | 	add	local01, #11
260a0     0F FB 41 FC | 	wrbyte	result1, local01
260a4     15 4E 05 F1 | 	add	fp, #21
260a8     A7 1E 02 FB | 	rdlong	local01, fp
260ac     94 4E 85 F1 | 	sub	fp, #148
260b0     0B 1E 06 F1 | 	add	local01, #11
260b4     0F 1F C2 FA | 	rdbyte	local01, local01
260b8     10 1E CE F7 | 	test	local01, #16 wz
260bc     24 00 90 5D |  if_ne	jmp	#LR__3964
260c0     94 4E 05 F1 | 	add	fp, #148
260c4     A7 FA 01 FB | 	rdlong	result1, fp
260c8     FD 1E 02 F6 | 	mov	local01, result1
260cc     94 4E 85 F1 | 	sub	fp, #148
260d0     0B FA 05 F1 | 	add	result1, #11
260d4     FD FA C1 FA | 	rdbyte	result1, result1
260d8     20 FA 45 F5 | 	or	result1, #32
260dc     0B 1E 06 F1 | 	add	local01, #11
260e0     0F FB 41 FC | 	wrbyte	result1, local01
260e4                 | LR__3964
260e4     70 4E 05 F1 | 	add	fp, #112
260e8     A7 1E 02 FB | 	rdlong	local01, fp
260ec     03 1E 06 F1 | 	add	local01, #3
260f0     0F 03 48 FC | 	wrbyte	#1, local01
260f4     24 4E 05 F1 | 	add	fp, #36
260f8     A7 1E 02 FB | 	rdlong	local01, fp
260fc     94 4E 85 F1 | 	sub	fp, #148
26100     0B 1E 06 F1 | 	add	local01, #11
26104     0F 1F C2 FA | 	rdbyte	local01, local01
26108     10 1E CE F7 | 	test	local01, #16 wz
2610c     F8 00 90 AD |  if_e	jmp	#LR__3967
26110     18 4E 05 F1 | 	add	fp, #24
26114     A7 16 02 FB | 	rdlong	arg03, fp
26118     30 4E 05 F1 | 	add	fp, #48
2611c     A7 1E 02 FB | 	rdlong	local01, fp
26120     48 4E 85 F1 | 	sub	fp, #72
26124     0F 17 0A F2 | 	cmp	arg03, local01 wz
26128     DC 00 90 AD |  if_e	jmp	#LR__3967
2612c     70 4E 05 F1 | 	add	fp, #112
26130     A7 12 02 FB | 	rdlong	arg01, fp
26134     09 1F 02 F6 | 	mov	local01, arg01
26138     24 4E 05 F1 | 	add	fp, #36
2613c     A7 14 02 FB | 	rdlong	arg02, fp
26140     94 4E 85 F1 | 	sub	fp, #148
26144     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
26148     FD 14 02 F6 | 	mov	arg02, result1
2614c     0F 13 02 F6 | 	mov	arg01, local01
26150     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
26154     98 4E 05 F1 | 	add	fp, #152
26158     A7 FA 61 FC | 	wrlong	result1, fp
2615c     00 FA 4D F2 | 	cmps	result1, #0 wz
26160     98 4E 85 F1 | 	sub	fp, #152
26164     0C 4E 05 A1 |  if_e	add	fp, #12
26168     A7 04 68 AC |  if_e	wrlong	#2, fp
2616c     0C 4E 85 A1 |  if_e	sub	fp, #12
26170     94 00 90 AD |  if_e	jmp	#LR__3966
26174     70 4E 05 F1 | 	add	fp, #112
26178     A7 12 02 FB | 	rdlong	arg01, fp
2617c     28 4E 05 F1 | 	add	fp, #40
26180     A7 14 02 FB | 	rdlong	arg02, fp
26184     98 4E 85 F1 | 	sub	fp, #152
26188     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2618c     0C 4E 05 F1 | 	add	fp, #12
26190     A7 FA 61 FC | 	wrlong	result1, fp
26194     64 4E 05 F1 | 	add	fp, #100
26198     A7 1E 02 FB | 	rdlong	local01, fp
2619c     54 1E 06 F1 | 	add	local01, #84
261a0     24 4E 05 F1 | 	add	fp, #36
261a4     A7 1E 62 FC | 	wrlong	local01, fp
261a8     88 4E 85 F1 | 	sub	fp, #136
261ac     A7 1E 0A FB | 	rdlong	local01, fp wz
261b0     0C 4E 85 F1 | 	sub	fp, #12
261b4     50 00 90 5D |  if_ne	jmp	#LR__3965
261b8     94 4E 05 F1 | 	add	fp, #148
261bc     A7 1E 02 FB | 	rdlong	local01, fp
261c0     94 4E 85 F1 | 	sub	fp, #148
261c4     01 1E 06 F1 | 	add	local01, #1
261c8     0F 1F C2 FA | 	rdbyte	local01, local01
261cc     2E 1E 0E F2 | 	cmp	local01, #46 wz
261d0     34 00 90 5D |  if_ne	jmp	#LR__3965
261d4     70 4E 05 F1 | 	add	fp, #112
261d8     A7 12 02 FB | 	rdlong	arg01, fp
261dc     24 4E 05 F1 | 	add	fp, #36
261e0     A7 14 02 FB | 	rdlong	arg02, fp
261e4     4C 4E 85 F1 | 	sub	fp, #76
261e8     A7 16 02 FB | 	rdlong	arg03, fp
261ec     48 4E 85 F1 | 	sub	fp, #72
261f0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
261f4     70 4E 05 F1 | 	add	fp, #112
261f8     A7 1E 02 FB | 	rdlong	local01, fp
261fc     70 4E 85 F1 | 	sub	fp, #112
26200     03 1E 06 F1 | 	add	local01, #3
26204     0F 03 48 FC | 	wrbyte	#1, local01
26208                 | LR__3965
26208                 | LR__3966
26208                 | LR__3967
26208                 | LR__3968
26208                 | LR__3969
26208     0C 4E 05 F1 | 	add	fp, #12
2620c     A7 1E 0A FB | 	rdlong	local01, fp wz
26210     0C 4E 85 F1 | 	sub	fp, #12
26214     40 00 90 5D |  if_ne	jmp	#LR__3971
26218     10 4E 05 F1 | 	add	fp, #16
2621c     A7 12 02 F6 | 	mov	arg01, fp
26220     10 4E 85 F1 | 	sub	fp, #16
26224     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
26228     0C 4E 05 F1 | 	add	fp, #12
2622c     A7 FA 61 FC | 	wrlong	result1, fp
26230     0C 4E 85 F1 | 	sub	fp, #12
26234     00 FA 0D F2 | 	cmp	result1, #0 wz
26238     1C 00 90 5D |  if_ne	jmp	#LR__3970
2623c     70 4E 05 F1 | 	add	fp, #112
26240     A7 12 02 FB | 	rdlong	arg01, fp
26244     70 4E 85 F1 | 	sub	fp, #112
26248     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2624c     0C 4E 05 F1 | 	add	fp, #12
26250     A7 FA 61 FC | 	wrlong	result1, fp
26254     0C 4E 85 F1 | 	sub	fp, #12
26258                 | LR__3970
26258                 | LR__3971
26258                 | LR__3972
26258                 | LR__3973
26258                 | ' 					res = sync_fs(fs);
26258                 | ' 				}
26258                 | ' 			}
26258                 | ' 
26258                 | ' 		}
26258                 | ' 		;
26258                 | ' 	}
26258                 | ' 
26258                 | ' 	return res ;
26258     0C 4E 05 F1 | 	add	fp, #12
2625c     A7 FA 01 FB | 	rdlong	result1, fp
26260     0C 4E 85 F1 | 	sub	fp, #12
26264     A7 F0 03 F6 | 	mov	ptra, fp
26268     B2 00 A0 FD | 	call	#popregs_
2626c                 | _fatfs_cc_f_rename_ret
2626c     2D 00 64 FD | 	ret
26270                 | 
26270                 | _fatfs_cc_time
26270     00 4A 05 F6 | 	mov	COUNT_, #0
26274     A8 00 A0 FD | 	call	#pushregs_
26278     14 F0 07 F1 | 	add	ptra, #20
2627c     04 4E 05 F1 | 	add	fp, #4
26280     A7 12 62 FC | 	wrlong	arg01, fp
26284     04 4E 05 F1 | 	add	fp, #4
26288     A7 12 02 F6 | 	mov	arg01, fp
2628c     08 4E 85 F1 | 	sub	fp, #8
26290     00 14 06 F6 | 	mov	arg02, #0
26294     04 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
26298     08 4E 05 F1 | 	add	fp, #8
2629c     A7 FA 01 FB | 	rdlong	result1, fp
262a0     08 4E 05 F1 | 	add	fp, #8
262a4     A7 FA 61 FC | 	wrlong	result1, fp
262a8     0C 4E 85 F1 | 	sub	fp, #12
262ac     A7 FA 09 FB | 	rdlong	result1, fp wz
262b0     04 4E 85 F1 | 	sub	fp, #4
262b4     18 00 90 AD |  if_e	jmp	#LR__3980
262b8     04 4E 05 F1 | 	add	fp, #4
262bc     A7 FA 01 FB | 	rdlong	result1, fp
262c0     0C 4E 05 F1 | 	add	fp, #12
262c4     A7 14 02 FB | 	rdlong	arg02, fp
262c8     10 4E 85 F1 | 	sub	fp, #16
262cc     FD 14 62 FC | 	wrlong	arg02, result1
262d0                 | LR__3980
262d0                 | '         *tp = now;
262d0                 | '     return now;
262d0     10 4E 05 F1 | 	add	fp, #16
262d4     A7 FA 01 FB | 	rdlong	result1, fp
262d8     10 4E 85 F1 | 	sub	fp, #16
262dc     A7 F0 03 F6 | 	mov	ptra, fp
262e0     B2 00 A0 FD | 	call	#popregs_
262e4                 | _fatfs_cc_time_ret
262e4     2D 00 64 FD | 	ret
262e8                 | 
262e8                 | _fatfs_cc_mktime
262e8     06 4A 05 F6 | 	mov	COUNT_, #6
262ec     A8 00 A0 FD | 	call	#pushregs_
262f0     09 1F 02 F6 | 	mov	local01, arg01
262f4     14 1E 06 F1 | 	add	local01, #20
262f8     0F 13 02 FB | 	rdlong	arg01, local01
262fc     14 1E 86 F1 | 	sub	local01, #20
26300     46 12 56 F2 | 	cmps	arg01, #70 wc
26304                 | '                 return (time_t) -1;
26304     01 FA 65 C6 |  if_b	neg	result1, #1
26308     7C 01 90 CD |  if_b	jmp	#LR__3994
2630c     03 00 00 FF 
26310     6C 21 06 F6 | 	mov	local02, ##1900
26314     14 1E 06 F1 | 	add	local01, #20
26318     0F FB 01 FB | 	rdlong	result1, local01
2631c     FD 20 02 F1 | 	add	local02, result1
26320     08 1E 86 F1 | 	sub	local01, #8
26324     0F 23 02 FB | 	rdlong	local03, local01
26328     01 22 86 F1 | 	sub	local03, #1
2632c     04 1E 06 F1 | 	add	local01, #4
26330     0F 13 02 FB | 	rdlong	arg01, local01
26334     10 1E 86 F1 | 	sub	local01, #16
26338     02 12 66 F0 | 	shl	arg01, #2
2633c     02 00 00 FF 
26340     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
26344     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
26348     09 FB 01 FB | 	rdlong	result1, arg01
2634c     FD 22 02 F1 | 	add	local03, result1
26350     10 13 02 F6 | 	mov	arg01, local02
26354     02 00 00 FF 
26358     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2635c     E4 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
26360     00 FA 0D F2 | 	cmp	result1, #0 wz
26364     1C 00 90 AD |  if_e	jmp	#LR__3990
26368     00 24 06 F6 | 	mov	local04, #0
2636c     10 1E 06 F1 | 	add	local01, #16
26370     0F FB 01 FB | 	rdlong	result1, local01
26374     10 1E 86 F1 | 	sub	local01, #16
26378     02 FA 55 F2 | 	cmps	result1, #2 wc
2637c     01 24 06 36 |  if_ae	mov	local04, #1
26380     04 00 90 FD | 	jmp	#LR__3991
26384                 | LR__3990
26384     00 24 06 F6 | 	mov	local04, #0
26388                 | LR__3991
26388     04 1E 06 F1 | 	add	local01, #4
2638c     0F FB 01 FB | 	rdlong	result1, local01
26390     04 1E 86 F1 | 	sub	local01, #4
26394     0F 27 02 FB | 	rdlong	local05, local01
26398     08 1E 06 F1 | 	add	local01, #8
2639c     0F 13 02 FB | 	rdlong	arg01, local01
263a0     07 00 00 FF 
263a4     10 12 06 FD | 	qmul	arg01, ##3600
263a8     12 23 02 F1 | 	add	local03, local04
263ac     FD 24 02 F6 | 	mov	local04, result1
263b0     04 24 66 F0 | 	shl	local04, #4
263b4     FD 24 82 F1 | 	sub	local04, result1
263b8     02 24 66 F0 | 	shl	local04, #2
263bc     12 27 02 F1 | 	add	local05, local04
263c0     08 1E 86 F1 | 	sub	local01, #8
263c4     18 24 62 FD | 	getqx	local04
263c8     A8 00 00 FF 
263cc     80 23 06 FD | 	qmul	local03, ##86400
263d0     12 27 02 F1 | 	add	local05, local04
263d4     10 23 02 F6 | 	mov	local03, local02
263d8     03 00 00 FF 
263dc     B2 23 86 F1 | 	sub	local03, ##1970
263e0     18 24 62 FD | 	getqx	local04
263e4     99 F0 00 FF 
263e8     80 23 06 FD | 	qmul	local03, ##31536000
263ec     12 27 02 F1 | 	add	local05, local04
263f0     10 23 02 F6 | 	mov	local03, local02
263f4     03 00 00 FF 
263f8     B1 23 86 F1 | 	sub	local03, ##1969
263fc     11 29 52 F6 | 	abs	local06, local03 wc
26400     02 28 46 F0 | 	shr	local06, #2
26404     14 29 82 F6 | 	negc	local06, local06
26408     03 00 00 FF 
2640c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
26410     18 24 62 FD | 	getqx	local04
26414     12 27 02 F1 | 	add	local05, local04
26418     18 00 90 CD |  if_b	jmp	#LR__3992
2641c     03 00 00 FF 
26420     D0 21 86 F1 | 	sub	local02, ##2000
26424     10 25 52 F6 | 	abs	local04, local02 wc
26428     64 24 16 FD | 	qdiv	local04, #100
2642c     18 24 62 FD | 	getqx	local04
26430     12 29 A2 F3 | 	sumnc	local06, local04
26434                 | LR__3992
26434     A8 00 00 FF 
26438     80 29 06 FD | 	qmul	local06, ##86400
2643c     18 28 62 FD | 	getqx	local06
26440     14 27 02 F1 | 	add	local05, local06
26444     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
26448     02 00 00 FF 
2644c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26450     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
26454     14 27 02 F1 | 	add	local05, local06
26458     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2645c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
26460     02 00 00 FF 
26464     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26468     01 22 0E F2 | 	cmp	local03, #1 wz
2646c     14 00 90 5D |  if_ne	jmp	#LR__3993
26470     0F 13 02 F6 | 	mov	arg01, local01
26474     D0 19 B0 FD | 	call	#_fatfs_cc___indst
26478     00 FA 0D F2 | 	cmp	result1, #0 wz
2647c     07 00 00 5F 
26480     10 26 86 51 |  if_ne	sub	local05, ##3600
26484                 | LR__3993
26484                 | '                 s -=  (3600L) ;
26484                 | ' 
26484                 | '         return s;
26484     13 FB 01 F6 | 	mov	result1, local05
26488                 | LR__3994
26488     A7 F0 03 F6 | 	mov	ptra, fp
2648c     B2 00 A0 FD | 	call	#popregs_
26490                 | _fatfs_cc_mktime_ret
26490     2D 00 64 FD | 	ret
26494                 | 
26494                 | _fatfs_cc__gmtime_r
26494     03 4A 05 F6 | 	mov	COUNT_, #3
26498     A8 00 A0 FD | 	call	#pushregs_
2649c     09 1F 02 FB | 	rdlong	local01, arg01
264a0     A8 00 00 FF 
264a4     80 1F 16 FD | 	qdiv	local01, ##86400
264a8     18 FA 61 FD | 	getqx	result1
264ac     04 FA 05 F1 | 	add	result1, #4
264b0     07 FA 15 FD | 	qdiv	result1, #7
264b4     18 14 06 F1 | 	add	arg02, #24
264b8     D1 7F 27 FF 
264bc     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
264c0     D1 7F 27 3F 
264c4     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
264c8     03 00 00 3F 
264cc     DC 21 06 36 |  if_ae	mov	local02, ##2012
264d0     03 00 00 CF 
264d4     B2 21 06 C6 |  if_b	mov	local02, ##1970
264d8                 | ' 	  year = 1970;
264d8                 | ' 	}
264d8                 | ' 
264d8                 | ' 	for(;;) {
264d8     19 FA 61 FD | 	getqy	result1
264dc     0A FB 61 FC | 	wrlong	result1, arg02
264e0     18 14 86 F1 | 	sub	arg02, #24
264e4                 | LR__4000
264e4     10 13 02 F6 | 	mov	arg01, local02
264e8     58 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
264ec     00 FA 0D F2 | 	cmp	result1, #0 wz
264f0     42 F1 00 5F 
264f4     00 23 06 56 |  if_ne	mov	local03, ##31622400
264f8     99 F0 00 AF 
264fc     80 23 06 A6 |  if_e	mov	local03, ##31536000
26500     11 1F 12 F2 | 	cmp	local01, local03 wc
26504                 | ' 	    break;
26504     01 20 06 31 |  if_ae	add	local02, #1
26508     11 1F 82 31 |  if_ae	sub	local01, local03
2650c     D4 FF 9F 3D |  if_ae	jmp	#LR__4000
26510     A8 00 00 FF 
26514     80 1F 16 FD | 	qdiv	local01, ##86400
26518     10 23 02 F6 | 	mov	local03, local02
2651c     03 00 00 FF 
26520     6C 23 86 F1 | 	sub	local03, ##1900
26524     14 14 06 F1 | 	add	arg02, #20
26528     0A 23 62 FC | 	wrlong	local03, arg02
2652c     08 14 06 F1 | 	add	arg02, #8
26530     10 13 02 F6 | 	mov	arg01, local02
26534     18 20 62 FD | 	getqx	local02
26538     0A 21 62 FC | 	wrlong	local02, arg02
2653c     1C 14 86 F1 | 	sub	arg02, #28
26540     00 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
26544     00 FA 0D F2 | 	cmp	result1, #0 wz
26548     1D 22 06 56 |  if_ne	mov	local03, #29
2654c     1C 22 06 A6 |  if_e	mov	local03, #28
26550     02 00 00 FF 
26554     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26558     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2655c     02 00 00 FF 
26560     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
26564                 | ' 
26564                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
26564                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
26564     00 12 06 F6 | 	mov	arg01, #0
26568     97 2A 48 FB | 	callpa	#(@LR__4002-@LR__4001)>>2,fcache_load_ptr_
2656c                 | LR__4001
2656c     09 23 02 F6 | 	mov	local03, arg01
26570     02 22 66 F0 | 	shl	local03, #2
26574     02 00 00 FF 
26578     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2657c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26580     11 23 02 FB | 	rdlong	local03, local03
26584     11 21 52 F2 | 	cmps	local02, local03 wc
26588     02 00 00 FF 
2658c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26590     2C 00 90 CD |  if_b	jmp	#LR__4003
26594     09 23 02 F6 | 	mov	local03, arg01
26598     02 22 66 F0 | 	shl	local03, #2
2659c     02 00 00 FF 
265a0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
265a4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
265a8     11 23 02 FB | 	rdlong	local03, local03
265ac     11 21 82 F1 | 	sub	local02, local03
265b0     01 12 06 F1 | 	add	arg01, #1
265b4     02 00 00 FF 
265b8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
265bc     AC FF 9F FD | 	jmp	#LR__4001
265c0                 | LR__4002
265c0                 | LR__4003
265c0     A8 00 00 FF 
265c4     80 1F 16 FD | 	qdiv	local01, ##86400
265c8     10 14 06 F1 | 	add	arg02, #16
265cc     0A 13 62 FC | 	wrlong	arg01, arg02
265d0     01 20 06 F1 | 	add	local02, #1
265d4     04 14 86 F1 | 	sub	arg02, #4
265d8     0A 21 62 FC | 	wrlong	local02, arg02
265dc     19 1E 62 FD | 	getqy	local01
265e0     07 00 00 FF 
265e4     10 1E 16 FD | 	qdiv	local01, ##3600
265e8     18 22 62 FD | 	getqx	local03
265ec     07 00 00 FF 
265f0     10 1E 16 FD | 	qdiv	local01, ##3600
265f4     04 14 86 F1 | 	sub	arg02, #4
265f8     0A 23 62 FC | 	wrlong	local03, arg02
265fc     19 1E 62 FD | 	getqy	local01
26600     3C 1E 16 FD | 	qdiv	local01, #60
26604     18 22 62 FD | 	getqx	local03
26608     3C 1E 16 FD | 	qdiv	local01, #60
2660c     04 14 86 F1 | 	sub	arg02, #4
26610     0A 23 62 FC | 	wrlong	local03, arg02
26614     04 14 86 F1 | 	sub	arg02, #4
26618                 | '         stm->tm_isdst = 0;
26618                 | ' 
26618                 | ' ;
26618                 | '         return stm;
26618     0A FB 01 F6 | 	mov	result1, arg02
2661c     19 22 62 FD | 	getqy	local03
26620     0A 23 62 FC | 	wrlong	local03, arg02
26624     20 14 06 F1 | 	add	arg02, #32
26628     0A 01 68 FC | 	wrlong	#0, arg02
2662c     A7 F0 03 F6 | 	mov	ptra, fp
26630     B2 00 A0 FD | 	call	#popregs_
26634                 | _fatfs_cc__gmtime_r_ret
26634     2D 00 64 FD | 	ret
26638                 | 
26638                 | _fatfs_cc__tzset
26638     40 01 00 FF 
2663c     71 13 06 F6 | 	mov	arg01, ##@LR__4315
26640     34 00 B0 FD | 	call	#_fatfs_cc_getenv
26644     FD 12 02 F6 | 	mov	arg01, result1
26648     02 00 00 FF 
2664c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26650     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
26654     02 00 00 FF 
26658     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2665c     34 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26660     02 00 00 FF 
26664     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26668     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2666c     02 00 00 FF 
26670     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
26674                 | _fatfs_cc__tzset_ret
26674     2D 00 64 FD | 	ret
26678                 | 
26678                 | _fatfs_cc_getenv
26678     06 4A 05 F6 | 	mov	COUNT_, #6
2667c     A8 00 A0 FD | 	call	#pushregs_
26680     09 1F 02 F6 | 	mov	local01, arg01
26684     09 21 02 F6 | 	mov	local02, arg01
26688     97 06 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
2668c                 | LR__4010
2668c     10 FB C9 FA | 	rdbyte	result1, local02 wz
26690     01 20 06 51 |  if_ne	add	local02, #1
26694     F4 FF 9F 5D |  if_ne	jmp	#LR__4010
26698                 | LR__4011
26698     09 21 82 F1 | 	sub	local02, arg01
2669c     10 FB 01 F6 | 	mov	result1, local02
266a0     02 00 00 FF 
266a4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
266a8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
266ac     02 00 00 FF 
266b0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
266b4                 | '             return 0;
266b4     00 FA 05 A6 |  if_e	mov	result1, #0
266b8     5C 00 90 AD |  if_e	jmp	#LR__4014
266bc                 | ' 
266bc                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
266bc     02 00 00 FF 
266c0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
266c4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
266c8     02 00 00 FF 
266cc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
266d0                 | LR__4012
266d0     11 25 0A FB | 	rdlong	local04, local03 wz
266d4     3C 00 90 AD |  if_e	jmp	#LR__4013
266d8     12 13 02 F6 | 	mov	arg01, local04
266dc     0F 15 02 F6 | 	mov	arg02, local01
266e0     10 17 02 F6 | 	mov	arg03, local02
266e4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
266e8     00 FA 0D F2 | 	cmp	result1, #0 wz
266ec     10 27 02 A6 |  if_e	mov	local05, local02
266f0     12 27 02 A1 |  if_e	add	local05, local04
266f4     13 29 C2 AA |  if_e	rdbyte	local06, local05
266f8     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
266fc                 | ' 			return name+len+1;
266fc     10 25 02 A1 |  if_e	add	local04, local02
26700     01 24 06 A1 |  if_e	add	local04, #1
26704     12 FB 01 A6 |  if_e	mov	result1, local04
26708     0C 00 90 AD |  if_e	jmp	#LR__4014
2670c     04 22 06 F1 | 	add	local03, #4
26710     BC FF 9F FD | 	jmp	#LR__4012
26714                 | LR__4013
26714                 | ' 	}
26714                 | ' 	return 0;
26714     00 FA 05 F6 | 	mov	result1, #0
26718                 | LR__4014
26718     A7 F0 03 F6 | 	mov	ptra, fp
2671c     B2 00 A0 FD | 	call	#popregs_
26720                 | _fatfs_cc_getenv_ret
26720     2D 00 64 FD | 	ret
26724                 | 
26724                 | _fatfs_cc__get_fattime
26724     00 4A 05 F6 | 	mov	COUNT_, #0
26728     A8 00 A0 FD | 	call	#pushregs_
2672c     34 F0 07 F1 | 	add	ptra, #52
26730     00 12 06 F6 | 	mov	arg01, #0
26734     38 FB BF FD | 	call	#_fatfs_cc_time
26738     04 4E 05 F1 | 	add	fp, #4
2673c     A7 FA 61 FC | 	wrlong	result1, fp
26740     A7 12 02 F6 | 	mov	arg01, fp
26744     0C 4E 05 F1 | 	add	fp, #12
26748     A7 14 02 F6 | 	mov	arg02, fp
2674c     10 4E 85 F1 | 	sub	fp, #16
26750     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
26754     24 4E 05 F1 | 	add	fp, #36
26758     A7 14 02 FB | 	rdlong	arg02, fp
2675c     50 14 86 F1 | 	sub	arg02, #80
26760     09 14 66 F0 | 	shl	arg02, #9
26764     04 4E 85 F1 | 	sub	fp, #4
26768     A7 FA 01 FB | 	rdlong	result1, fp
2676c     01 FA 05 F1 | 	add	result1, #1
26770     05 FA 65 F0 | 	shl	result1, #5
26774     FD 14 42 F5 | 	or	arg02, result1
26778     04 4E 85 F1 | 	sub	fp, #4
2677c     A7 FA 01 FB | 	rdlong	result1, fp
26780     FD 14 42 F5 | 	or	arg02, result1
26784     14 4E 85 F1 | 	sub	fp, #20
26788     A7 14 62 FC | 	wrlong	arg02, fp
2678c     10 4E 05 F1 | 	add	fp, #16
26790     A7 14 02 FB | 	rdlong	arg02, fp
26794     0B 14 66 F0 | 	shl	arg02, #11
26798     04 4E 85 F1 | 	sub	fp, #4
2679c     A7 FA 01 FB | 	rdlong	result1, fp
267a0     05 FA 65 F0 | 	shl	result1, #5
267a4     FD 14 42 F5 | 	or	arg02, result1
267a8     04 4E 85 F1 | 	sub	fp, #4
267ac     A7 FA 01 FB | 	rdlong	result1, fp
267b0     FD 14 42 F5 | 	or	arg02, result1
267b4     04 4E 85 F1 | 	sub	fp, #4
267b8     A7 14 62 FC | 	wrlong	arg02, fp
267bc                 | ' 
267bc                 | '     now = time(0);
267bc                 | '     _gmtime_r (&now, &date);
267bc                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
267bc                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
267bc                 | '     return (ffdate << 16) | fftime;
267bc     04 4E 85 F1 | 	sub	fp, #4
267c0     A7 FA 01 FB | 	rdlong	result1, fp
267c4     10 FA 65 F0 | 	shl	result1, #16
267c8     08 4E 85 F1 | 	sub	fp, #8
267cc     0A FB 41 F5 | 	or	result1, arg02
267d0     A7 F0 03 F6 | 	mov	ptra, fp
267d4     B2 00 A0 FD | 	call	#popregs_
267d8                 | _fatfs_cc__get_fattime_ret
267d8     2D 00 64 FD | 	ret
267dc                 | 
267dc                 | _fatfs_cc_unixtime_0837
267dc     00 4A 05 F6 | 	mov	COUNT_, #0
267e0     A8 00 A0 FD | 	call	#pushregs_
267e4     34 F0 07 F1 | 	add	ptra, #52
267e8     04 4E 05 F1 | 	add	fp, #4
267ec     A7 12 62 FC | 	wrlong	arg01, fp
267f0     04 4E 05 F1 | 	add	fp, #4
267f4     A7 14 62 FC | 	wrlong	arg02, fp
267f8     04 4E 85 F1 | 	sub	fp, #4
267fc     A7 14 02 FB | 	rdlong	arg02, fp
26800     09 14 46 F0 | 	shr	arg02, #9
26804     7F 14 06 F5 | 	and	arg02, #127
26808     50 FA 05 F6 | 	mov	result1, #80
2680c     0A FB 01 F1 | 	add	result1, arg02
26810     20 4E 05 F1 | 	add	fp, #32
26814     A7 FA 61 FC | 	wrlong	result1, fp
26818     20 4E 85 F1 | 	sub	fp, #32
2681c     A7 FA 01 FB | 	rdlong	result1, fp
26820     05 FA 45 F0 | 	shr	result1, #5
26824     FD FA 41 F8 | 	getnib	result1, result1, #0
26828     01 FA 85 F1 | 	sub	result1, #1
2682c     1C 4E 05 F1 | 	add	fp, #28
26830     A7 FA 61 FC | 	wrlong	result1, fp
26834     1C 4E 85 F1 | 	sub	fp, #28
26838     A7 FA 01 FB | 	rdlong	result1, fp
2683c     1F FA 05 F5 | 	and	result1, #31
26840     18 4E 05 F1 | 	add	fp, #24
26844     A7 FA 61 FC | 	wrlong	result1, fp
26848     14 4E 85 F1 | 	sub	fp, #20
2684c     A7 FA 01 FB | 	rdlong	result1, fp
26850     0B FA 45 F0 | 	shr	result1, #11
26854     1F FA 05 F5 | 	and	result1, #31
26858     10 4E 05 F1 | 	add	fp, #16
2685c     A7 FA 61 FC | 	wrlong	result1, fp
26860     10 4E 85 F1 | 	sub	fp, #16
26864     A7 FA 01 FB | 	rdlong	result1, fp
26868     05 FA 45 F0 | 	shr	result1, #5
2686c     3F FA 05 F5 | 	and	result1, #63
26870     0C 4E 05 F1 | 	add	fp, #12
26874     A7 FA 61 FC | 	wrlong	result1, fp
26878     0C 4E 85 F1 | 	sub	fp, #12
2687c     A7 14 02 FB | 	rdlong	arg02, fp
26880     1F 14 06 F5 | 	and	arg02, #31
26884     01 14 66 F0 | 	shl	arg02, #1
26888     08 4E 05 F1 | 	add	fp, #8
2688c     A7 14 62 FC | 	wrlong	arg02, fp
26890     A7 12 02 F6 | 	mov	arg01, fp
26894     10 4E 85 F1 | 	sub	fp, #16
26898     4C FA BF FD | 	call	#_fatfs_cc_mktime
2689c     0C 4E 05 F1 | 	add	fp, #12
268a0     A7 FA 61 FC | 	wrlong	result1, fp
268a4                 | ' 
268a4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
268a4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
268a4                 | '     date.tm_mday = (dosdate & 0x1f);
268a4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
268a4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
268a4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
268a4                 | ' 
268a4                 | '     t = mktime(&date);
268a4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
268a4                 | '     return t;
268a4     0C 4E 85 F1 | 	sub	fp, #12
268a8     A7 F0 03 F6 | 	mov	ptra, fp
268ac     B2 00 A0 FD | 	call	#popregs_
268b0                 | _fatfs_cc_unixtime_0837_ret
268b0     2D 00 64 FD | 	ret
268b4                 | 
268b4                 | _fatfs_cc__set_dos_error_0839
268b4     09 01 02 F6 | 	mov	_var01, arg01
268b8                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
268b8                 | '     switch (derr) {
268b8     14 00 26 F3 | 	fle	_var01, #20
268bc     30 00 62 FD | 	jmprel	_var01
268c0                 | LR__4020
268c0     50 00 90 FD | 	jmp	#LR__4021
268c4     84 00 90 FD | 	jmp	#LR__4035
268c8     80 00 90 FD | 	jmp	#LR__4036
268cc     7C 00 90 FD | 	jmp	#LR__4037
268d0     48 00 90 FD | 	jmp	#LR__4022
268d4     44 00 90 FD | 	jmp	#LR__4023
268d8     40 00 90 FD | 	jmp	#LR__4024
268dc     44 00 90 FD | 	jmp	#LR__4025
268e0     48 00 90 FD | 	jmp	#LR__4027
268e4     54 00 90 FD | 	jmp	#LR__4030
268e8     38 00 90 FD | 	jmp	#LR__4026
268ec     4C 00 90 FD | 	jmp	#LR__4031
268f0     48 00 90 FD | 	jmp	#LR__4032
268f4     44 00 90 FD | 	jmp	#LR__4033
268f8     50 00 90 FD | 	jmp	#LR__4038
268fc     4C 00 90 FD | 	jmp	#LR__4038
26900     48 00 90 FD | 	jmp	#LR__4038
26904     2C 00 90 FD | 	jmp	#LR__4028
26908     38 00 90 FD | 	jmp	#LR__4034
2690c     2C 00 90 FD | 	jmp	#LR__4029
26910     38 00 90 FD | 	jmp	#LR__4038
26914                 | LR__4021
26914     00 02 06 F6 | 	mov	_var02, #0
26918                 | '         r = 0;
26918                 | '         break;
26918     34 00 90 FD | 	jmp	#LR__4039
2691c                 | LR__4022
2691c                 | LR__4023
2691c                 | LR__4024
2691c     04 02 06 F6 | 	mov	_var02, #4
26920                 | '         r =  4 ;
26920                 | '         break;
26920     2C 00 90 FD | 	jmp	#LR__4039
26924                 | LR__4025
26924                 | LR__4026
26924     06 02 06 F6 | 	mov	_var02, #6
26928                 | '         r =  6 ;
26928                 | '         break;
26928     24 00 90 FD | 	jmp	#LR__4039
2692c                 | LR__4027
2692c     09 02 06 F6 | 	mov	_var02, #9
26930                 | '         r =  9 ;
26930                 | '         break;
26930     1C 00 90 FD | 	jmp	#LR__4039
26934                 | LR__4028
26934     07 02 06 F6 | 	mov	_var02, #7
26938                 | '         r =  7 ;
26938                 | '         break;
26938     14 00 90 FD | 	jmp	#LR__4039
2693c                 | LR__4029
2693c                 | LR__4030
2693c                 | LR__4031
2693c                 | LR__4032
2693c                 | LR__4033
2693c     0A 02 06 F6 | 	mov	_var02, #10
26940                 | '         r =  10 ;
26940                 | '         break;
26940     0C 00 90 FD | 	jmp	#LR__4039
26944                 | LR__4034
26944     0B 02 06 F6 | 	mov	_var02, #11
26948                 | '         r =  11 ;
26948                 | '         break;
26948     04 00 90 FD | 	jmp	#LR__4039
2694c                 | LR__4035
2694c                 | LR__4036
2694c                 | LR__4037
2694c                 | LR__4038
2694c     0C 02 06 F6 | 	mov	_var02, #12
26950                 | '         r =  12 ;
26950                 | '         break;
26950                 | LR__4039
26950                 | '     }
26950                 | '     return _seterror(r);
26950     00 02 4E F2 | 	cmps	_var02, #0 wz
26954     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26958     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2695c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26960     01 FA 65 56 |  if_ne	neg	result1, #1
26964     00 FA 05 A6 |  if_e	mov	result1, #0
26968                 | _fatfs_cc__set_dos_error_0839_ret
26968     2D 00 64 FD | 	ret
2696c                 | 
2696c                 | _fatfs_cc_v_creat
2696c     04 4A 05 F6 | 	mov	COUNT_, #4
26970     A8 00 A0 FD | 	call	#pushregs_
26974     09 1F 02 F6 | 	mov	local01, arg01
26978     0A 21 02 F6 | 	mov	local02, arg02
2697c     03 00 00 FF 
26980     3C 12 06 F6 | 	mov	arg01, ##1596
26984                 | '     return _gc_alloc(size);
26984     10 14 06 F6 | 	mov	arg02, #16
26988     2C 60 BF FD | 	call	#__system___gc_doalloc
2698c     FD 22 0A F6 | 	mov	local03, result1 wz
26990                 | '       return _seterror( 7 );
26990     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26994     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26998     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2699c     01 FA 65 A6 |  if_e	neg	result1, #1
269a0     58 00 90 AD |  if_e	jmp	#LR__4041
269a4     11 13 02 F6 | 	mov	arg01, local03
269a8     00 14 06 F6 | 	mov	arg02, #0
269ac     03 00 00 FF 
269b0     3C 16 06 F6 | 	mov	arg03, ##1596
269b4     98 00 A0 FD | 	call	#\builtin_bytefill_
269b8     02 00 00 FF 
269bc     14 22 06 F1 | 	add	local03, ##1044
269c0     11 13 02 F6 | 	mov	arg01, local03
269c4     02 00 00 FF 
269c8     14 22 86 F1 | 	sub	local03, ##1044
269cc     10 15 02 F6 | 	mov	arg02, local02
269d0     07 16 06 F6 | 	mov	arg03, #7
269d4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
269d8     FD 24 0A F6 | 	mov	local04, result1 wz
269dc     14 00 90 AD |  if_e	jmp	#LR__4040
269e0     11 13 02 F6 | 	mov	arg01, local03
269e4                 | '     return _gc_free(ptr);
269e4     DC 60 BF FD | 	call	#__system___gc_free
269e8                 | '     free(f);
269e8                 | '     return _set_dos_error(r);
269e8     12 13 02 F6 | 	mov	arg01, local04
269ec     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
269f0     08 00 90 FD | 	jmp	#LR__4041
269f4                 | LR__4040
269f4     0F 23 62 FC | 	wrlong	local03, local01
269f8                 | '   }
269f8                 | '   fil->vfsdata = f;
269f8                 | '   return 0;
269f8     00 FA 05 F6 | 	mov	result1, #0
269fc                 | LR__4041
269fc     A7 F0 03 F6 | 	mov	ptra, fp
26a00     B2 00 A0 FD | 	call	#popregs_
26a04                 | _fatfs_cc_v_creat_ret
26a04     2D 00 64 FD | 	ret
26a08                 | 
26a08                 | _fatfs_cc_v_close
26a08     02 4A 05 F6 | 	mov	COUNT_, #2
26a0c     A8 00 A0 FD | 	call	#pushregs_
26a10     09 1F 02 FB | 	rdlong	local01, arg01
26a14     02 00 00 FF 
26a18     14 1E 06 F1 | 	add	local01, ##1044
26a1c     0F 13 02 F6 | 	mov	arg01, local01
26a20     02 00 00 FF 
26a24     14 1E 86 F1 | 	sub	local01, ##1044
26a28     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26a2c     FD 20 02 F6 | 	mov	local02, result1
26a30     0F 13 02 F6 | 	mov	arg01, local01
26a34                 | '     return _gc_free(ptr);
26a34     8C 60 BF FD | 	call	#__system___gc_free
26a38                 | '     FAT_FIL *f = fil->vfsdata;
26a38                 | '     r=f_close(&f->fil);
26a38                 | '     free(f);
26a38                 | '     return _set_dos_error(r);
26a38     10 13 02 F6 | 	mov	arg01, local02
26a3c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26a40     A7 F0 03 F6 | 	mov	ptra, fp
26a44     B2 00 A0 FD | 	call	#popregs_
26a48                 | _fatfs_cc_v_close_ret
26a48     2D 00 64 FD | 	ret
26a4c                 | 
26a4c                 | _fatfs_cc_v_opendir
26a4c     04 4A 05 F6 | 	mov	COUNT_, #4
26a50     A8 00 A0 FD | 	call	#pushregs_
26a54     09 1F 02 F6 | 	mov	local01, arg01
26a58     0A 21 02 F6 | 	mov	local02, arg02
26a5c     30 12 06 F6 | 	mov	arg01, #48
26a60                 | '     return _gc_alloc(size);
26a60     10 14 06 F6 | 	mov	arg02, #16
26a64     50 5F BF FD | 	call	#__system___gc_doalloc
26a68     FD 22 0A F6 | 	mov	local03, result1 wz
26a6c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26a6c                 | '       return _seterror( 7 );
26a6c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26a70     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26a74     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a78     01 FA 65 A6 |  if_e	neg	result1, #1
26a7c     34 00 90 AD |  if_e	jmp	#LR__4051
26a80     10 15 02 F6 | 	mov	arg02, local02
26a84     11 13 02 F6 | 	mov	arg01, local03
26a88     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26a8c     FD 24 0A F6 | 	mov	local04, result1 wz
26a90     14 00 90 AD |  if_e	jmp	#LR__4050
26a94     11 13 02 F6 | 	mov	arg01, local03
26a98                 | '     return _gc_free(ptr);
26a98     28 60 BF FD | 	call	#__system___gc_free
26a9c                 | '         free(f);
26a9c                 | '         return _set_dos_error(r);
26a9c     12 13 02 F6 | 	mov	arg01, local04
26aa0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26aa4     0C 00 90 FD | 	jmp	#LR__4051
26aa8                 | LR__4050
26aa8     04 1E 06 F1 | 	add	local01, #4
26aac     0F 23 62 FC | 	wrlong	local03, local01
26ab0                 | '     }
26ab0                 | '     dir->vfsdata = f;
26ab0                 | '     return 0;
26ab0     00 FA 05 F6 | 	mov	result1, #0
26ab4                 | LR__4051
26ab4     A7 F0 03 F6 | 	mov	ptra, fp
26ab8     B2 00 A0 FD | 	call	#popregs_
26abc                 | _fatfs_cc_v_opendir_ret
26abc     2D 00 64 FD | 	ret
26ac0                 | 
26ac0                 | _fatfs_cc_v_closedir
26ac0     02 4A 05 F6 | 	mov	COUNT_, #2
26ac4     A8 00 A0 FD | 	call	#pushregs_
26ac8     04 12 06 F1 | 	add	arg01, #4
26acc     09 1F 02 FB | 	rdlong	local01, arg01
26ad0     0F 13 02 F6 | 	mov	arg01, local01
26ad4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
26ad8     FD 20 02 F6 | 	mov	local02, result1
26adc     0F 13 02 F6 | 	mov	arg01, local01
26ae0                 | '     return _gc_free(ptr);
26ae0     E0 5F BF FD | 	call	#__system___gc_free
26ae4     00 20 0E F2 | 	cmp	local02, #0 wz
26ae8     10 13 02 56 |  if_ne	mov	arg01, local02
26aec     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0839
26af0                 | '     return r;
26af0     10 FB 01 F6 | 	mov	result1, local02
26af4     A7 F0 03 F6 | 	mov	ptra, fp
26af8     B2 00 A0 FD | 	call	#popregs_
26afc                 | _fatfs_cc_v_closedir_ret
26afc     2D 00 64 FD | 	ret
26b00                 | 
26b00                 | _fatfs_cc_v_readdir
26b00     01 4A 05 F6 | 	mov	COUNT_, #1
26b04     A8 00 A0 FD | 	call	#pushregs_
26b08     2C F1 07 F1 | 	add	ptra, #300
26b0c     04 4E 05 F1 | 	add	fp, #4
26b10     A7 12 62 FC | 	wrlong	arg01, fp
26b14     04 4E 05 F1 | 	add	fp, #4
26b18     A7 14 62 FC | 	wrlong	arg02, fp
26b1c     04 4E 85 F1 | 	sub	fp, #4
26b20     A7 16 02 FB | 	rdlong	arg03, fp
26b24     04 16 06 F1 | 	add	arg03, #4
26b28     0B 13 02 FB | 	rdlong	arg01, arg03
26b2c     08 4E 05 F1 | 	add	fp, #8
26b30     A7 14 02 F6 | 	mov	arg02, fp
26b34     0C 4E 85 F1 | 	sub	fp, #12
26b38     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26b3c     28 4F 05 F1 | 	add	fp, #296
26b40     A7 FA 61 FC | 	wrlong	result1, fp
26b44     28 4F 85 F1 | 	sub	fp, #296
26b48     00 FA 0D F2 | 	cmp	result1, #0 wz
26b4c     14 00 90 AD |  if_e	jmp	#LR__4060
26b50                 | '         return _set_dos_error(r);
26b50     28 4F 05 F1 | 	add	fp, #296
26b54     A7 12 02 FB | 	rdlong	arg01, fp
26b58     28 4F 85 F1 | 	sub	fp, #296
26b5c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26b60     C4 00 90 FD | 	jmp	#LR__4063
26b64                 | LR__4060
26b64     28 4E 05 F1 | 	add	fp, #40
26b68     A7 16 CA FA | 	rdbyte	arg03, fp wz
26b6c     28 4E 85 F1 | 	sub	fp, #40
26b70                 | '         return -1;
26b70     01 FA 65 A6 |  if_e	neg	result1, #1
26b74     B0 00 90 AD |  if_e	jmp	#LR__4063
26b78     08 4E 05 F1 | 	add	fp, #8
26b7c     A7 12 02 FB | 	rdlong	arg01, fp
26b80     20 4E 05 F1 | 	add	fp, #32
26b84     A7 14 02 F6 | 	mov	arg02, fp
26b88     28 4E 85 F1 | 	sub	fp, #40
26b8c     3F 16 06 F6 | 	mov	arg03, #63
26b90     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
26b94     08 4E 05 F1 | 	add	fp, #8
26b98     A7 16 02 FB | 	rdlong	arg03, fp
26b9c     3F 16 06 F1 | 	add	arg03, #63
26ba0     0B 01 48 FC | 	wrbyte	#0, arg03
26ba4     0C 4E 05 F1 | 	add	fp, #12
26ba8     A7 16 C2 FA | 	rdbyte	arg03, fp
26bac     14 4E 85 F1 | 	sub	fp, #20
26bb0     10 16 CE F7 | 	test	arg03, #16 wz
26bb4     18 00 90 AD |  if_e	jmp	#LR__4061
26bb8     08 4E 05 F1 | 	add	fp, #8
26bbc     A7 16 02 FB | 	rdlong	arg03, fp
26bc0     08 4E 85 F1 | 	sub	fp, #8
26bc4     50 16 06 F1 | 	add	arg03, #80
26bc8     0B 03 48 FC | 	wrbyte	#1, arg03
26bcc     14 00 90 FD | 	jmp	#LR__4062
26bd0                 | LR__4061
26bd0     08 4E 05 F1 | 	add	fp, #8
26bd4     A7 16 02 FB | 	rdlong	arg03, fp
26bd8     08 4E 85 F1 | 	sub	fp, #8
26bdc     50 16 06 F1 | 	add	arg03, #80
26be0     0B 01 48 FC | 	wrbyte	#0, arg03
26be4                 | LR__4062
26be4     08 4E 05 F1 | 	add	fp, #8
26be8     A7 16 02 FB | 	rdlong	arg03, fp
26bec     04 4E 05 F1 | 	add	fp, #4
26bf0     A7 14 02 FB | 	rdlong	arg02, fp
26bf4     48 16 06 F1 | 	add	arg03, #72
26bf8     0B 15 62 FC | 	wrlong	arg02, arg03
26bfc     04 4E 85 F1 | 	sub	fp, #4
26c00     A7 1E 02 FB | 	rdlong	local01, fp
26c04     08 4E 05 F1 | 	add	fp, #8
26c08     A7 12 E2 FA | 	rdword	arg01, fp
26c0c     02 4E 05 F1 | 	add	fp, #2
26c10     A7 14 E2 FA | 	rdword	arg02, fp
26c14     12 4E 85 F1 | 	sub	fp, #18
26c18     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0837
26c1c     4C 1E 06 F1 | 	add	local01, #76
26c20     0F FB 61 FC | 	wrlong	result1, local01
26c24                 | '         ent->d_type =  (0) ;
26c24                 | '     }
26c24                 | '     ent->d_size = finfo.fsize;
26c24                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
26c24                 | '     return 0;
26c24     00 FA 05 F6 | 	mov	result1, #0
26c28                 | LR__4063
26c28     A7 F0 03 F6 | 	mov	ptra, fp
26c2c     B2 00 A0 FD | 	call	#popregs_
26c30                 | _fatfs_cc_v_readdir_ret
26c30     2D 00 64 FD | 	ret
26c34                 | 
26c34                 | _fatfs_cc_v_stat
26c34     03 4A 05 F6 | 	mov	COUNT_, #3
26c38     A8 00 A0 FD | 	call	#pushregs_
26c3c     30 F1 07 F1 | 	add	ptra, #304
26c40     04 4E 05 F1 | 	add	fp, #4
26c44     A7 12 62 FC | 	wrlong	arg01, fp
26c48     04 4E 05 F1 | 	add	fp, #4
26c4c     A7 14 62 FC | 	wrlong	arg02, fp
26c50     08 4E 85 F1 | 	sub	fp, #8
26c54     0A 13 02 F6 | 	mov	arg01, arg02
26c58     00 14 06 F6 | 	mov	arg02, #0
26c5c     30 16 06 F6 | 	mov	arg03, #48
26c60     98 00 A0 FD | 	call	#\builtin_bytefill_
26c64     04 4E 05 F1 | 	add	fp, #4
26c68     A7 FA 01 FB | 	rdlong	result1, fp
26c6c     04 4E 85 F1 | 	sub	fp, #4
26c70     FD FA C9 FA | 	rdbyte	result1, result1 wz
26c74     2C 00 90 AD |  if_e	jmp	#LR__4070
26c78     04 4E 05 F1 | 	add	fp, #4
26c7c     A7 FA 01 FB | 	rdlong	result1, fp
26c80     04 4E 85 F1 | 	sub	fp, #4
26c84     FD FA C1 FA | 	rdbyte	result1, result1
26c88     2E FA 0D F2 | 	cmp	result1, #46 wz
26c8c     04 4E 05 A1 |  if_e	add	fp, #4
26c90     A7 1E 02 AB |  if_e	rdlong	local01, fp
26c94     04 4E 85 A1 |  if_e	sub	fp, #4
26c98     01 1E 06 A1 |  if_e	add	local01, #1
26c9c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
26ca0     18 00 90 5D |  if_ne	jmp	#LR__4071
26ca4                 | LR__4070
26ca4     18 4E 05 F1 | 	add	fp, #24
26ca8     A7 20 48 FC | 	wrbyte	#16, fp
26cac     0C 4E 85 F1 | 	sub	fp, #12
26cb0     A7 00 68 FC | 	wrlong	#0, fp
26cb4     0C 4E 85 F1 | 	sub	fp, #12
26cb8     24 00 90 FD | 	jmp	#LR__4072
26cbc                 | LR__4071
26cbc     04 4E 05 F1 | 	add	fp, #4
26cc0     A7 12 02 FB | 	rdlong	arg01, fp
26cc4     0C 4E 05 F1 | 	add	fp, #12
26cc8     A7 14 02 F6 | 	mov	arg02, fp
26ccc     10 4E 85 F1 | 	sub	fp, #16
26cd0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
26cd4     0C 4E 05 F1 | 	add	fp, #12
26cd8     A7 FA 61 FC | 	wrlong	result1, fp
26cdc     0C 4E 85 F1 | 	sub	fp, #12
26ce0                 | LR__4072
26ce0     0C 4E 05 F1 | 	add	fp, #12
26ce4     A7 20 0A FB | 	rdlong	local02, fp wz
26ce8     0C 4E 85 F1 | 	sub	fp, #12
26cec     14 00 90 AD |  if_e	jmp	#LR__4073
26cf0                 | '         return _set_dos_error(r);
26cf0     0C 4E 05 F1 | 	add	fp, #12
26cf4     A7 12 02 FB | 	rdlong	arg01, fp
26cf8     0C 4E 85 F1 | 	sub	fp, #12
26cfc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26d00     14 01 90 FD | 	jmp	#LR__4074
26d04                 | LR__4073
26d04     2C 4F 05 F1 | 	add	fp, #300
26d08     A7 48 6A FC | 	wrlong	#292, fp
26d0c     14 4F 85 F1 | 	sub	fp, #276
26d10     A7 22 C2 FA | 	rdbyte	local03, fp
26d14     18 4E 85 F1 | 	sub	fp, #24
26d18     01 22 CE F7 | 	test	local03, #1 wz
26d1c     2C 4F 05 A1 |  if_e	add	fp, #300
26d20     A7 22 02 AB |  if_e	rdlong	local03, fp
26d24     92 22 46 A5 |  if_e	or	local03, #146
26d28     A7 22 62 AC |  if_e	wrlong	local03, fp
26d2c     2C 4F 85 A1 |  if_e	sub	fp, #300
26d30     18 4E 05 F1 | 	add	fp, #24
26d34     A7 22 C2 FA | 	rdbyte	local03, fp
26d38     18 4E 85 F1 | 	sub	fp, #24
26d3c     10 22 CE F7 | 	test	local03, #16 wz
26d40     2C 4F 05 51 |  if_ne	add	fp, #300
26d44     A7 22 02 5B |  if_ne	rdlong	local03, fp
26d48     08 00 00 5F 
26d4c     49 22 46 55 |  if_ne	or	local03, ##4169
26d50     A7 22 62 5C |  if_ne	wrlong	local03, fp
26d54     2C 4F 85 51 |  if_ne	sub	fp, #300
26d58     08 4E 05 F1 | 	add	fp, #8
26d5c     A7 22 02 FB | 	rdlong	local03, fp
26d60     24 4F 05 F1 | 	add	fp, #292
26d64     A7 20 02 FB | 	rdlong	local02, fp
26d68     08 22 06 F1 | 	add	local03, #8
26d6c     11 21 62 FC | 	wrlong	local02, local03
26d70     24 4F 85 F1 | 	sub	fp, #292
26d74     A7 22 02 FB | 	rdlong	local03, fp
26d78     0C 22 06 F1 | 	add	local03, #12
26d7c     11 03 68 FC | 	wrlong	#1, local03
26d80     A7 22 02 FB | 	rdlong	local03, fp
26d84     08 4E 05 F1 | 	add	fp, #8
26d88     A7 20 02 FB | 	rdlong	local02, fp
26d8c     18 22 06 F1 | 	add	local03, #24
26d90     11 21 62 FC | 	wrlong	local02, local03
26d94     08 4E 85 F1 | 	sub	fp, #8
26d98     A7 22 02 FB | 	rdlong	local03, fp
26d9c     1C 22 06 F1 | 	add	local03, #28
26da0     01 00 80 FF 
26da4     11 01 68 FC | 	wrlong	##512, local03
26da8     A7 20 02 FB | 	rdlong	local02, fp
26dac     10 23 02 F6 | 	mov	local03, local02
26db0     18 20 06 F1 | 	add	local02, #24
26db4     10 21 02 FB | 	rdlong	local02, local02
26db8     FF 21 06 F1 | 	add	local02, #511
26dbc     10 21 52 F6 | 	abs	local02, local02 wc
26dc0     09 20 46 F0 | 	shr	local02, #9
26dc4     10 21 82 F6 | 	negc	local02, local02
26dc8     20 22 06 F1 | 	add	local03, #32
26dcc     11 21 62 FC | 	wrlong	local02, local03
26dd0     A7 20 02 FB | 	rdlong	local02, fp
26dd4     10 23 02 F6 | 	mov	local03, local02
26dd8     10 1F 02 F6 | 	mov	local01, local02
26ddc     0C 4E 05 F1 | 	add	fp, #12
26de0     A7 12 E2 FA | 	rdword	arg01, fp
26de4     02 4E 05 F1 | 	add	fp, #2
26de8     A7 14 E2 FA | 	rdword	arg02, fp
26dec     16 4E 85 F1 | 	sub	fp, #22
26df0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0837
26df4     2C 1E 06 F1 | 	add	local01, #44
26df8     0F FB 61 FC | 	wrlong	result1, local01
26dfc     28 20 06 F1 | 	add	local02, #40
26e00     10 FB 61 FC | 	wrlong	result1, local02
26e04     24 22 06 F1 | 	add	local03, #36
26e08     11 FB 61 FC | 	wrlong	result1, local03
26e0c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
26e0c                 | '     }
26e0c                 | '     buf->st_mode = mode;
26e0c                 | '     buf->st_nlink = 1;
26e0c                 | '     buf->st_size = finfo.fsize;
26e0c                 | '     buf->st_blksize = 512;
26e0c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
26e0c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
26e0c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26e0c                 | '     return r;
26e0c     0C 4E 05 F1 | 	add	fp, #12
26e10     A7 FA 01 FB | 	rdlong	result1, fp
26e14     0C 4E 85 F1 | 	sub	fp, #12
26e18                 | LR__4074
26e18     A7 F0 03 F6 | 	mov	ptra, fp
26e1c     B2 00 A0 FD | 	call	#popregs_
26e20                 | _fatfs_cc_v_stat_ret
26e20     2D 00 64 FD | 	ret
26e24                 | 
26e24                 | _fatfs_cc_v_read
26e24     00 4A 05 F6 | 	mov	COUNT_, #0
26e28     A8 00 A0 FD | 	call	#pushregs_
26e2c     1C F0 07 F1 | 	add	ptra, #28
26e30     04 4E 05 F1 | 	add	fp, #4
26e34     A7 12 62 FC | 	wrlong	arg01, fp
26e38     04 4E 05 F1 | 	add	fp, #4
26e3c     A7 14 62 FC | 	wrlong	arg02, fp
26e40     04 4E 05 F1 | 	add	fp, #4
26e44     A7 16 62 FC | 	wrlong	arg03, fp
26e48     08 4E 85 F1 | 	sub	fp, #8
26e4c     A7 12 02 FB | 	rdlong	arg01, fp
26e50     09 13 0A FB | 	rdlong	arg01, arg01 wz
26e54     0C 4E 05 F1 | 	add	fp, #12
26e58     A7 12 62 FC | 	wrlong	arg01, fp
26e5c     10 4E 85 F1 | 	sub	fp, #16
26e60                 | '         return _seterror( 5 );
26e60     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26e64     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26e68     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e6c     01 FA 65 A6 |  if_e	neg	result1, #1
26e70     B8 00 90 AD |  if_e	jmp	#LR__4082
26e74     10 4E 05 F1 | 	add	fp, #16
26e78     A7 12 02 FB | 	rdlong	arg01, fp
26e7c     02 00 00 FF 
26e80     14 12 06 F1 | 	add	arg01, ##1044
26e84     08 4E 85 F1 | 	sub	fp, #8
26e88     A7 14 02 FB | 	rdlong	arg02, fp
26e8c     04 4E 05 F1 | 	add	fp, #4
26e90     A7 16 02 FB | 	rdlong	arg03, fp
26e94     0C 4E 05 F1 | 	add	fp, #12
26e98     A7 18 02 F6 | 	mov	arg04, fp
26e9c     18 4E 85 F1 | 	sub	fp, #24
26ea0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
26ea4     14 4E 05 F1 | 	add	fp, #20
26ea8     A7 FA 61 FC | 	wrlong	result1, fp
26eac     14 4E 85 F1 | 	sub	fp, #20
26eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
26eb4     34 00 90 AD |  if_e	jmp	#LR__4080
26eb8     04 4E 05 F1 | 	add	fp, #4
26ebc     A7 18 02 FB | 	rdlong	arg04, fp
26ec0     0C 17 02 F6 | 	mov	arg03, arg04
26ec4     08 18 06 F1 | 	add	arg04, #8
26ec8     0C 19 02 FB | 	rdlong	arg04, arg04
26ecc     20 18 46 F5 | 	or	arg04, #32
26ed0     08 16 06 F1 | 	add	arg03, #8
26ed4     0B 19 62 FC | 	wrlong	arg04, arg03
26ed8                 | '         fil->state |=  (0x20) ;
26ed8                 | '         return _set_dos_error(r);
26ed8     10 4E 05 F1 | 	add	fp, #16
26edc     A7 12 02 FB | 	rdlong	arg01, fp
26ee0     14 4E 85 F1 | 	sub	fp, #20
26ee4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26ee8     40 00 90 FD | 	jmp	#LR__4082
26eec                 | LR__4080
26eec     18 4E 05 F1 | 	add	fp, #24
26ef0     A7 FA 09 FB | 	rdlong	result1, fp wz
26ef4     18 4E 85 F1 | 	sub	fp, #24
26ef8     24 00 90 5D |  if_ne	jmp	#LR__4081
26efc     04 4E 05 F1 | 	add	fp, #4
26f00     A7 FA 01 FB | 	rdlong	result1, fp
26f04     FD 18 02 F6 | 	mov	arg04, result1
26f08     04 4E 85 F1 | 	sub	fp, #4
26f0c     08 FA 05 F1 | 	add	result1, #8
26f10     FD FA 01 FB | 	rdlong	result1, result1
26f14     10 FA 45 F5 | 	or	result1, #16
26f18     08 18 06 F1 | 	add	arg04, #8
26f1c     0C FB 61 FC | 	wrlong	result1, arg04
26f20                 | LR__4081
26f20                 | '         fil->state |=  (0x10) ;
26f20                 | '     }
26f20                 | '     return x;
26f20     18 4E 05 F1 | 	add	fp, #24
26f24     A7 FA 01 FB | 	rdlong	result1, fp
26f28     18 4E 85 F1 | 	sub	fp, #24
26f2c                 | LR__4082
26f2c     A7 F0 03 F6 | 	mov	ptra, fp
26f30     B2 00 A0 FD | 	call	#popregs_
26f34                 | _fatfs_cc_v_read_ret
26f34     2D 00 64 FD | 	ret
26f38                 | 
26f38                 | _fatfs_cc_v_write
26f38     00 4A 05 F6 | 	mov	COUNT_, #0
26f3c     A8 00 A0 FD | 	call	#pushregs_
26f40     1C F0 07 F1 | 	add	ptra, #28
26f44     04 4E 05 F1 | 	add	fp, #4
26f48     A7 12 62 FC | 	wrlong	arg01, fp
26f4c     04 4E 05 F1 | 	add	fp, #4
26f50     A7 14 62 FC | 	wrlong	arg02, fp
26f54     04 4E 05 F1 | 	add	fp, #4
26f58     A7 16 62 FC | 	wrlong	arg03, fp
26f5c     08 4E 85 F1 | 	sub	fp, #8
26f60     A7 12 02 FB | 	rdlong	arg01, fp
26f64     09 13 0A FB | 	rdlong	arg01, arg01 wz
26f68     0C 4E 05 F1 | 	add	fp, #12
26f6c     A7 12 62 FC | 	wrlong	arg01, fp
26f70     10 4E 85 F1 | 	sub	fp, #16
26f74                 | '         return _seterror( 5 );
26f74     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26f78     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26f7c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f80     01 FA 65 A6 |  if_e	neg	result1, #1
26f84     84 00 90 AD |  if_e	jmp	#LR__4091
26f88     10 4E 05 F1 | 	add	fp, #16
26f8c     A7 12 02 FB | 	rdlong	arg01, fp
26f90     02 00 00 FF 
26f94     14 12 06 F1 | 	add	arg01, ##1044
26f98     08 4E 85 F1 | 	sub	fp, #8
26f9c     A7 14 02 FB | 	rdlong	arg02, fp
26fa0     04 4E 05 F1 | 	add	fp, #4
26fa4     A7 16 02 FB | 	rdlong	arg03, fp
26fa8     0C 4E 05 F1 | 	add	fp, #12
26fac     A7 18 02 F6 | 	mov	arg04, fp
26fb0     18 4E 85 F1 | 	sub	fp, #24
26fb4     4C D4 BF FD | 	call	#_fatfs_cc_f_write
26fb8     14 4E 05 F1 | 	add	fp, #20
26fbc     A7 FA 61 FC | 	wrlong	result1, fp
26fc0     14 4E 85 F1 | 	sub	fp, #20
26fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
26fc8     34 00 90 AD |  if_e	jmp	#LR__4090
26fcc     04 4E 05 F1 | 	add	fp, #4
26fd0     A7 18 02 FB | 	rdlong	arg04, fp
26fd4     0C 17 02 F6 | 	mov	arg03, arg04
26fd8     08 18 06 F1 | 	add	arg04, #8
26fdc     0C 19 02 FB | 	rdlong	arg04, arg04
26fe0     20 18 46 F5 | 	or	arg04, #32
26fe4     08 16 06 F1 | 	add	arg03, #8
26fe8     0B 19 62 FC | 	wrlong	arg04, arg03
26fec                 | '         fil->state |=  (0x20) ;
26fec                 | '         return _set_dos_error(r);
26fec     10 4E 05 F1 | 	add	fp, #16
26ff0     A7 12 02 FB | 	rdlong	arg01, fp
26ff4     14 4E 85 F1 | 	sub	fp, #20
26ff8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26ffc     0C 00 90 FD | 	jmp	#LR__4091
27000                 | LR__4090
27000                 | '     }
27000                 | '     return x;
27000     18 4E 05 F1 | 	add	fp, #24
27004     A7 FA 01 FB | 	rdlong	result1, fp
27008     18 4E 85 F1 | 	sub	fp, #24
2700c                 | LR__4091
2700c     A7 F0 03 F6 | 	mov	ptra, fp
27010     B2 00 A0 FD | 	call	#popregs_
27014                 | _fatfs_cc_v_write_ret
27014     2D 00 64 FD | 	ret
27018                 | 
27018                 | _fatfs_cc_v_lseek
27018     04 4A 05 F6 | 	mov	COUNT_, #4
2701c     A8 00 A0 FD | 	call	#pushregs_
27020     0A 1F 02 F6 | 	mov	local01, arg02
27024     0B 21 02 F6 | 	mov	local02, arg03
27028     09 23 02 FB | 	rdlong	local03, arg01
2702c     02 00 00 FF 
27030     14 22 0E F1 | 	add	local03, ##1044 wz
27034                 | '         return _seterror( 5 );
27034     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27038     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2703c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27040     01 FA 65 A6 |  if_e	neg	result1, #1
27044     4C 00 90 AD |  if_e	jmp	#LR__4102
27048     00 20 0E F2 | 	cmp	local02, #0 wz
2704c     24 00 90 AD |  if_e	jmp	#LR__4100
27050     01 20 0E F2 | 	cmp	local02, #1 wz
27054     14 22 06 A1 |  if_e	add	local03, #20
27058     11 25 02 AB |  if_e	rdlong	local04, local03
2705c     14 22 86 A1 |  if_e	sub	local03, #20
27060     12 1F 02 A1 |  if_e	add	local01, local04
27064     0C 22 06 51 |  if_ne	add	local03, #12
27068     11 25 02 5B |  if_ne	rdlong	local04, local03
2706c     0C 22 86 51 |  if_ne	sub	local03, #12
27070     12 1F 02 51 |  if_ne	add	local01, local04
27074                 | LR__4100
27074     0F 15 02 F6 | 	mov	arg02, local01
27078     11 13 02 F6 | 	mov	arg01, local03
2707c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
27080     FD 12 0A F6 | 	mov	arg01, result1 wz
27084     08 00 90 AD |  if_e	jmp	#LR__4101
27088                 | '         return _set_dos_error(result);
27088     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
2708c     04 00 90 FD | 	jmp	#LR__4102
27090                 | LR__4101
27090                 | '     }
27090                 | '     return offset;
27090     0F FB 01 F6 | 	mov	result1, local01
27094                 | LR__4102
27094     A7 F0 03 F6 | 	mov	ptra, fp
27098     B2 00 A0 FD | 	call	#popregs_
2709c                 | _fatfs_cc_v_lseek_ret
2709c     2D 00 64 FD | 	ret
270a0                 | 
270a0                 | _fatfs_cc_v_ioctl
270a0                 | ' {
270a0                 | '     return _seterror( 10 );
270a0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
270a4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
270a8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
270ac     01 FA 65 F6 | 	neg	result1, #1
270b0                 | _fatfs_cc_v_ioctl_ret
270b0     2D 00 64 FD | 	ret
270b4                 | 
270b4                 | _fatfs_cc_v_mkdir
270b4     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
270b8     FD 12 02 F6 | 	mov	arg01, result1
270bc                 | ' 
270bc                 | '     r = f_mkdir(name);
270bc                 | '     return _set_dos_error(r);
270bc     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
270c0                 | _fatfs_cc_v_mkdir_ret
270c0     2D 00 64 FD | 	ret
270c4                 | 
270c4                 | _fatfs_cc_v_remove
270c4     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
270c8     FD 12 02 F6 | 	mov	arg01, result1
270cc                 | ' 
270cc                 | '     r = f_unlink(name);
270cc                 | '     return _set_dos_error(r);
270cc     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
270d0                 | _fatfs_cc_v_remove_ret
270d0     2D 00 64 FD | 	ret
270d4                 | 
270d4                 | _fatfs_cc_v_rmdir
270d4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
270d8     FD 12 02 F6 | 	mov	arg01, result1
270dc                 | ' 
270dc                 | '     r = f_unlink(name);
270dc                 | '     return _set_dos_error(r);
270dc     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
270e0                 | _fatfs_cc_v_rmdir_ret
270e0     2D 00 64 FD | 	ret
270e4                 | 
270e4                 | _fatfs_cc_v_rename
270e4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
270e8     FD 12 02 F6 | 	mov	arg01, result1
270ec                 | '     return _set_dos_error(r);
270ec     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
270f0                 | _fatfs_cc_v_rename_ret
270f0     2D 00 64 FD | 	ret
270f4                 | 
270f4                 | _fatfs_cc_v_open
270f4     07 4A 05 F6 | 	mov	COUNT_, #7
270f8     A8 00 A0 FD | 	call	#pushregs_
270fc     09 1F 02 F6 | 	mov	local01, arg01
27100     0A 21 02 F6 | 	mov	local02, arg02
27104     0B 23 02 F6 | 	mov	local03, arg03
27108     03 00 00 FF 
2710c     3C 12 06 F6 | 	mov	arg01, ##1596
27110                 | '     return _gc_alloc(size);
27110     10 14 06 F6 | 	mov	arg02, #16
27114     A0 58 BF FD | 	call	#__system___gc_doalloc
27118     FD 24 0A F6 | 	mov	local04, result1 wz
2711c                 | '       return _seterror( 7 );
2711c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
27120     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
27124     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
27128     01 FA 65 A6 |  if_e	neg	result1, #1
2712c     98 00 90 AD |  if_e	jmp	#LR__4116
27130     12 13 02 F6 | 	mov	arg01, local04
27134     00 14 06 F6 | 	mov	arg02, #0
27138     03 00 00 FF 
2713c     3C 16 06 F6 | 	mov	arg03, ##1596
27140     98 00 A0 FD | 	call	#\builtin_bytefill_
27144                 | '   switch (flags & 3) {
27144     11 27 02 F6 | 	mov	local05, local03
27148     03 26 0E F5 | 	and	local05, #3 wz
2714c     0C 00 90 AD |  if_e	jmp	#LR__4110
27150     01 26 0E F2 | 	cmp	local05, #1 wz
27154     0C 00 90 AD |  if_e	jmp	#LR__4111
27158     10 00 90 FD | 	jmp	#LR__4112
2715c                 | LR__4110
2715c     01 28 06 F6 | 	mov	local06, #1
27160                 | '       fs_flags =  0x01 ;
27160                 | '       break;
27160     0C 00 90 FD | 	jmp	#LR__4113
27164                 | LR__4111
27164     02 28 06 F6 | 	mov	local06, #2
27168                 | '       fs_flags =  0x02 ;
27168                 | '       break;
27168     04 00 90 FD | 	jmp	#LR__4113
2716c                 | LR__4112
2716c     03 28 06 F6 | 	mov	local06, #3
27170                 | '       fs_flags =  0x01  |  0x02 ;
27170                 | '       break;
27170                 | LR__4113
27170     08 22 CE F7 | 	test	local03, #8 wz
27174     18 28 46 55 |  if_ne	or	local06, #24
27178     08 00 90 5D |  if_ne	jmp	#LR__4114
2717c     20 22 CE F7 | 	test	local03, #32 wz
27180     30 28 46 55 |  if_ne	or	local06, #48
27184                 | LR__4114
27184     02 00 00 FF 
27188     14 24 06 F1 | 	add	local04, ##1044
2718c     12 13 02 F6 | 	mov	arg01, local04
27190     02 00 00 FF 
27194     14 24 86 F1 | 	sub	local04, ##1044
27198     10 15 02 F6 | 	mov	arg02, local02
2719c     14 17 02 F6 | 	mov	arg03, local06
271a0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
271a4     FD 2A 0A F6 | 	mov	local07, result1 wz
271a8     14 00 90 AD |  if_e	jmp	#LR__4115
271ac     12 13 02 F6 | 	mov	arg01, local04
271b0                 | '     return _gc_free(ptr);
271b0     10 59 BF FD | 	call	#__system___gc_free
271b4                 | '     free(f);
271b4                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
271b4                 | '     return _set_dos_error(r);
271b4     15 13 02 F6 | 	mov	arg01, local07
271b8     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
271bc     08 00 90 FD | 	jmp	#LR__4116
271c0                 | LR__4115
271c0     0F 25 62 FC | 	wrlong	local04, local01
271c4                 | '   }
271c4                 | '   fil->vfsdata = f;
271c4                 | '   return 0;
271c4     00 FA 05 F6 | 	mov	result1, #0
271c8                 | LR__4116
271c8     A7 F0 03 F6 | 	mov	ptra, fp
271cc     B2 00 A0 FD | 	call	#popregs_
271d0                 | _fatfs_cc_v_open_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | _fatfs_cc_v_flush
271d4     09 13 02 FB | 	rdlong	arg01, arg01
271d8     02 00 00 FF 
271dc     14 12 0E F1 | 	add	arg01, ##1044 wz
271e0                 | '         return _seterror( 5 );
271e0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
271e4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
271e8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
271ec     01 FA 65 A6 |  if_e	neg	result1, #1
271f0     0C 00 90 AD |  if_e	jmp	#LR__4120
271f4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
271f8     FD 12 02 F6 | 	mov	arg01, result1
271fc                 | '     }
271fc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
271fc                 | '     result = f_sync(f);
271fc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
271fc                 | '     return _set_dos_error(result);
271fc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
27200                 | LR__4120
27200                 | _fatfs_cc_v_flush_ret
27200     2D 00 64 FD | 	ret
27204                 | 
27204                 | _fatfs_cc_v_init
27204                 | ' {
27204                 | '     return 0;
27204     00 FA 05 F6 | 	mov	result1, #0
27208                 | _fatfs_cc_v_init_ret
27208     2D 00 64 FD | 	ret
2720c                 | 
2720c                 | _fatfs_cc_v_deinit
2720c     40 01 00 FF 
27210     74 15 06 F6 | 	mov	arg02, ##@LR__4316
27214     00 12 06 F6 | 	mov	arg01, #0
27218     00 16 06 F6 | 	mov	arg03, #0
2721c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
27220     01 00 00 FF 
27224     08 E4 05 F1 | 	add	objptr, ##520
27228     F2 12 02 FB | 	rdlong	arg01, objptr
2722c     04 E4 05 F1 | 	add	objptr, #4
27230     F2 14 02 FB | 	rdlong	arg02, objptr
27234     01 00 00 FF 
27238     0C E4 85 F1 | 	sub	objptr, ##524
2723c     50 40 BF FD | 	call	#__system___freepins
27240                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
27240                 | '     _freepins(f_pinmask);
27240                 | '     return 0;
27240     00 FA 05 F6 | 	mov	result1, #0
27244                 | _fatfs_cc_v_deinit_ret
27244     2D 00 64 FD | 	ret
27248                 | 
27248                 | _fatfs_cc_get_vfs
27248     01 4A 05 F6 | 	mov	COUNT_, #1
2724c     A8 00 A0 FD | 	call	#pushregs_
27250     09 1F 02 F6 | 	mov	local01, arg01
27254     50 12 06 F6 | 	mov	arg01, #80
27258     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2725c     FD 12 02 F6 | 	mov	arg01, result1
27260     F2 FA 01 F6 | 	mov	result1, objptr
27264     00 60 03 FF 
27268     00 FA 45 F5 | 	or	result1, ##113246208
2726c     09 FB 61 FC | 	wrlong	result1, arg01
27270     F2 FA 01 F6 | 	mov	result1, objptr
27274     00 68 03 FF 
27278     00 FA 45 F5 | 	or	result1, ##114294784
2727c     04 12 06 F1 | 	add	arg01, #4
27280     09 FB 61 FC | 	wrlong	result1, arg01
27284     F2 FA 01 F6 | 	mov	result1, objptr
27288     00 70 03 FF 
2728c     00 FA 45 F5 | 	or	result1, ##115343360
27290     04 12 06 F1 | 	add	arg01, #4
27294     09 FB 61 FC | 	wrlong	result1, arg01
27298     F2 FA 01 F6 | 	mov	result1, objptr
2729c     00 78 03 FF 
272a0     00 FA 45 F5 | 	or	result1, ##116391936
272a4     04 12 06 F1 | 	add	arg01, #4
272a8     09 FB 61 FC | 	wrlong	result1, arg01
272ac     F2 FA 01 F6 | 	mov	result1, objptr
272b0     58 FA 25 F4 | 	bith	result1, #88
272b4     04 12 06 F1 | 	add	arg01, #4
272b8     09 FB 61 FC | 	wrlong	result1, arg01
272bc     04 12 06 F1 | 	add	arg01, #4
272c0     09 01 68 FC | 	wrlong	#0, arg01
272c4     04 12 06 F1 | 	add	arg01, #4
272c8     09 1F 62 FC | 	wrlong	local01, arg01
272cc     04 12 06 F1 | 	add	arg01, #4
272d0     09 01 68 FC | 	wrlong	#0, arg01
272d4     F2 FA 01 F6 | 	mov	result1, objptr
272d8     00 88 03 FF 
272dc     00 FA 45 F5 | 	or	result1, ##118489088
272e0     04 12 06 F1 | 	add	arg01, #4
272e4     09 FB 61 FC | 	wrlong	result1, arg01
272e8     F2 FA 01 F6 | 	mov	result1, objptr
272ec     00 90 03 FF 
272f0     00 FA 45 F5 | 	or	result1, ##119537664
272f4     04 12 06 F1 | 	add	arg01, #4
272f8     09 FB 61 FC | 	wrlong	result1, arg01
272fc     F2 FA 01 F6 | 	mov	result1, objptr
27300     00 98 03 FF 
27304     00 FA 45 F5 | 	or	result1, ##120586240
27308     04 12 06 F1 | 	add	arg01, #4
2730c     09 FB 61 FC | 	wrlong	result1, arg01
27310     F2 FA 01 F6 | 	mov	result1, objptr
27314     00 A0 03 FF 
27318     00 FA 45 F5 | 	or	result1, ##121634816
2731c     04 12 06 F1 | 	add	arg01, #4
27320     09 FB 61 FC | 	wrlong	result1, arg01
27324     F2 FA 01 F6 | 	mov	result1, objptr
27328     00 A8 03 FF 
2732c     00 FA 45 F5 | 	or	result1, ##122683392
27330     04 12 06 F1 | 	add	arg01, #4
27334     09 FB 61 FC | 	wrlong	result1, arg01
27338     F2 FA 01 F6 | 	mov	result1, objptr
2733c     00 B0 03 FF 
27340     00 FA 45 F5 | 	or	result1, ##123731968
27344     04 12 06 F1 | 	add	arg01, #4
27348     09 FB 61 FC | 	wrlong	result1, arg01
2734c     F2 FA 01 F6 | 	mov	result1, objptr
27350     00 B8 03 FF 
27354     00 FA 45 F5 | 	or	result1, ##124780544
27358     04 12 06 F1 | 	add	arg01, #4
2735c     09 FB 61 FC | 	wrlong	result1, arg01
27360     F2 FA 01 F6 | 	mov	result1, objptr
27364     77 FA 25 F4 | 	bith	result1, #119
27368     04 12 06 F1 | 	add	arg01, #4
2736c     09 FB 61 FC | 	wrlong	result1, arg01
27370     F2 FA 01 F6 | 	mov	result1, objptr
27374     00 C8 03 FF 
27378     00 FA 45 F5 | 	or	result1, ##126877696
2737c     04 12 06 F1 | 	add	arg01, #4
27380     09 FB 61 FC | 	wrlong	result1, arg01
27384     F2 FA 01 F6 | 	mov	result1, objptr
27388     00 D0 03 FF 
2738c     00 FA 45 F5 | 	or	result1, ##127926272
27390     04 12 06 F1 | 	add	arg01, #4
27394     09 FB 61 FC | 	wrlong	result1, arg01
27398     F2 FA 01 F6 | 	mov	result1, objptr
2739c     00 D8 03 FF 
273a0     00 FA 45 F5 | 	or	result1, ##128974848
273a4     04 12 06 F1 | 	add	arg01, #4
273a8     09 FB 61 FC | 	wrlong	result1, arg01
273ac     F2 FA 01 F6 | 	mov	result1, objptr
273b0     96 FA 25 F4 | 	bith	result1, #150
273b4     04 12 06 F1 | 	add	arg01, #4
273b8     09 FB 61 FC | 	wrlong	result1, arg01
273bc     4C 12 86 F1 | 	sub	arg01, #76
273c0                 | ' 
273c0                 | '     v->close = &v_close;
273c0                 | '     v->read = &v_read;
273c0                 | '     v->write = &v_write;
273c0                 | '     v->lseek = &v_lseek;
273c0                 | '     v->ioctl = &v_ioctl;
273c0                 | '     v->flush = 0;
273c0                 | '     v->vfs_data = ptr;
273c0                 | '     v->reserved = 0;
273c0                 | ' 
273c0                 | '     v->open = &v_open;
273c0                 | '     v->creat = &v_creat;
273c0                 | '     v->opendir = &v_opendir;
273c0                 | '     v->closedir = &v_closedir;
273c0                 | '     v->readdir = &v_readdir;
273c0                 | '     v->stat = &v_stat;
273c0                 | ' 
273c0                 | '     v->mkdir = &v_mkdir;
273c0                 | '     v->rmdir = &v_rmdir;
273c0                 | ' 
273c0                 | '     v->remove = &v_remove;
273c0                 | '     v->rename = &v_rename;
273c0                 | ' 
273c0                 | '     v->init = &v_init;
273c0                 | '     v->deinit = &v_deinit;
273c0                 | ' 
273c0                 | '     return v;
273c0     09 FB 01 F6 | 	mov	result1, arg01
273c4     A7 F0 03 F6 | 	mov	ptra, fp
273c8     B2 00 A0 FD | 	call	#popregs_
273cc                 | _fatfs_cc_get_vfs_ret
273cc     2D 00 64 FD | 	ret
273d0                 | 
273d0                 | _fatfs_cc_xmit_mmc_0986
273d0     01 00 00 FF 
273d4     10 E4 05 F1 | 	add	objptr, ##528
273d8     F2 00 02 FB | 	rdlong	_var01, objptr
273dc     08 E4 05 F1 | 	add	objptr, #8
273e0     F2 02 02 FB | 	rdlong	_var02, objptr
273e4     01 00 00 FF 
273e8     18 E4 85 F1 | 	sub	objptr, ##536
273ec     40 02 62 FD | 	dirl	_var02
273f0     28 02 64 FD | 	setq	#1
273f4     09 05 02 FB | 	rdlong	_var03, arg01
273f8     69 04 62 FD | 	rev	_var03
273fc     1B 04 FE F9 | 	movbyts	_var03, #27
27400     01 05 22 FC | 	wypin	_var03, _var02
27404     0A 05 02 F6 | 	mov	_var03, arg02
27408     02 14 4E F0 | 	shr	arg02, #2 wz
2740c     03 04 66 F0 | 	shl	_var03, #3
27410     00 05 22 FC | 	wypin	_var03, _var01
27414     41 02 62 FD | 	dirh	_var02
27418     08 12 06 F1 | 	add	arg01, #8
2741c     69 06 62 FD | 	rev	_var04
27420     1B 06 FE F9 | 	movbyts	_var04, #27
27424                 | LR__4130
27424     01 07 22 5C |  if_ne	wypin	_var04, _var02
27428     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2742c     04 12 06 51 |  if_ne	add	arg01, #4
27430     69 06 62 5D |  if_ne	rev	_var04
27434     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
27438                 | LR__4131
27438     40 02 72 5D |  if_ne	testp	_var02 wc
2743c     F8 FF 9F 1D |  if_a	jmp	#LR__4131
27440     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4130
27444                 | LR__4132
27444     40 00 72 FD | 	testp	_var01 wc
27448     F8 FF 9F 3D |  if_ae	jmp	#LR__4132
2744c     40 02 62 FD | 	dirl	_var02
27450     FF FF FF FF 
27454     01 FF 2B FC | 	wypin	##-1, _var02
27458     41 02 62 FD | 	dirh	_var02
2745c                 | _fatfs_cc_xmit_mmc_0986_ret
2745c     2D 00 64 FD | 	ret
27460                 | 
27460                 | _fatfs_cc_rcvr_mmc_0993
27460     01 00 00 FF 
27464     10 E4 05 F1 | 	add	objptr, ##528
27468     F2 00 02 FB | 	rdlong	_var01, objptr
2746c     0C E4 05 F1 | 	add	objptr, #12
27470     F2 02 02 FB | 	rdlong	_var02, objptr
27474     01 00 00 FF 
27478     1C E4 85 F1 | 	sub	objptr, ##540
2747c     01 03 08 FC | 	akpin	_var02
27480     0A 05 0A F6 | 	mov	_var03, arg02 wz
27484     02 04 4E F0 | 	shr	_var03, #2 wz
27488     30 00 90 AD |  if_e	jmp	#LR__4142
2748c     02 07 02 F6 | 	mov	_var04, _var03
27490     05 06 66 F0 | 	shl	_var04, #5
27494     00 07 22 FC | 	wypin	_var04, _var01
27498     01 7F 18 FC | 	wxpin	#63, _var02
2749c                 | LR__4140
2749c                 | LR__4141
2749c     40 02 72 FD | 	testp	_var02 wc
274a0     F8 FF 9F 3D |  if_ae	jmp	#LR__4141
274a4     01 07 8A FA | 	rdpin	_var04, _var02
274a8     69 06 62 FD | 	rev	_var04
274ac     1B 06 FE F9 | 	movbyts	_var04, #27
274b0     09 07 62 FC | 	wrlong	_var04, arg01
274b4     04 12 06 F1 | 	add	arg01, #4
274b8     F8 05 6E FB | 	djnz	_var03, #LR__4140
274bc                 | LR__4142
274bc     03 14 0E F5 | 	and	arg02, #3 wz
274c0     24 00 90 AD |  if_e	jmp	#LR__4145
274c4     01 4F 18 FC | 	wxpin	#39, _var02
274c8                 | LR__4143
274c8     00 11 28 FC | 	wypin	#8, _var01
274cc                 | LR__4144
274cc     40 02 72 FD | 	testp	_var02 wc
274d0     F8 FF 9F 3D |  if_ae	jmp	#LR__4144
274d4     01 07 8A FA | 	rdpin	_var04, _var02
274d8     69 06 62 FD | 	rev	_var04
274dc     09 07 42 FC | 	wrbyte	_var04, arg01
274e0     01 12 06 F1 | 	add	arg01, #1
274e4     F8 15 6E FB | 	djnz	arg02, #LR__4143
274e8                 | LR__4145
274e8                 | _fatfs_cc_rcvr_mmc_0993_ret
274e8     2D 00 64 FD | 	ret
274ec                 | 
274ec                 | _fatfs_cc_wait_ready_0997
274ec     01 4A 05 F6 | 	mov	COUNT_, #1
274f0     A8 00 A0 FD | 	call	#pushregs_
274f4     10 F0 07 F1 | 	add	ptra, #16
274f8     1A FA 61 FD | 	getct	result1
274fc     08 4E 05 F1 | 	add	fp, #8
27500     A7 FA 61 FC | 	wrlong	result1, fp
27504     14 1E 06 FB | 	rdlong	local01, #20
27508     01 1E 46 F0 | 	shr	local01, #1
2750c     04 4E 05 F1 | 	add	fp, #4
27510     A7 1E 62 FC | 	wrlong	local01, fp
27514     0C 4E 85 F1 | 	sub	fp, #12
27518                 | ' {
27518                 | ' 	BYTE d;
27518                 | ' 	UINT tmr, tmout;
27518                 | ' 
27518                 | ' 	tmr = _cnt();
27518                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27518                 | ' 	for(;;) {
27518                 | LR__4150
27518     04 4E 05 F1 | 	add	fp, #4
2751c     A7 12 02 F6 | 	mov	arg01, fp
27520     04 4E 85 F1 | 	sub	fp, #4
27524     01 14 06 F6 | 	mov	arg02, #1
27528     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
2752c     04 4E 05 F1 | 	add	fp, #4
27530     A7 1E C2 FA | 	rdbyte	local01, fp
27534     04 4E 85 F1 | 	sub	fp, #4
27538     FF 1E 0E F2 | 	cmp	local01, #255 wz
2753c     01 FA 05 A6 |  if_e	mov	result1, #1
27540     28 00 90 AD |  if_e	jmp	#LR__4151
27544     1A FA 61 FD | 	getct	result1
27548     08 4E 05 F1 | 	add	fp, #8
2754c     A7 1E 02 FB | 	rdlong	local01, fp
27550     0F FB 81 F1 | 	sub	result1, local01
27554     04 4E 05 F1 | 	add	fp, #4
27558     A7 1E 02 FB | 	rdlong	local01, fp
2755c     0C 4E 85 F1 | 	sub	fp, #12
27560     0F FB 11 F2 | 	cmp	result1, local01 wc
27564     00 FA 05 36 |  if_ae	mov	result1, #0
27568     AC FF 9F CD |  if_b	jmp	#LR__4150
2756c                 | LR__4151
2756c     A7 F0 03 F6 | 	mov	ptra, fp
27570     B2 00 A0 FD | 	call	#popregs_
27574                 | _fatfs_cc_wait_ready_0997_ret
27574     2D 00 64 FD | 	ret
27578                 | 
27578                 | _fatfs_cc_deselect_1003
27578     00 4A 05 F6 | 	mov	COUNT_, #0
2757c     A8 00 A0 FD | 	call	#pushregs_
27580     14 F0 07 F1 | 	add	ptra, #20
27584     01 00 00 FF 
27588     14 E4 05 F1 | 	add	objptr, ##532
2758c     F2 14 02 FB | 	rdlong	arg02, objptr
27590     04 4E 05 F1 | 	add	fp, #4
27594     A7 14 62 FC | 	wrlong	arg02, fp
27598     04 E4 85 F1 | 	sub	objptr, #4
2759c     F2 14 02 FB | 	rdlong	arg02, objptr
275a0     04 4E 05 F1 | 	add	fp, #4
275a4     A7 14 62 FC | 	wrlong	arg02, fp
275a8     08 E4 05 F1 | 	add	objptr, #8
275ac     F2 14 02 FB | 	rdlong	arg02, objptr
275b0     04 4E 05 F1 | 	add	fp, #4
275b4     A7 14 62 FC | 	wrlong	arg02, fp
275b8     04 E4 05 F1 | 	add	objptr, #4
275bc     F2 14 02 FB | 	rdlong	arg02, objptr
275c0     01 00 00 FF 
275c4     1C E4 85 F1 | 	sub	objptr, ##540
275c8     04 4E 05 F1 | 	add	fp, #4
275cc     A7 14 62 FC | 	wrlong	arg02, fp
275d0     0C 4E 85 F1 | 	sub	fp, #12
275d4     A7 12 02 FB | 	rdlong	arg01, fp
275d8     04 4E 85 F1 | 	sub	fp, #4
275dc     59 12 62 FD | 	drvh	arg01
275e0     1F 20 64 FD | 	waitx	#16
275e4     A7 12 02 F6 | 	mov	arg01, fp
275e8     01 14 06 F6 | 	mov	arg02, #1
275ec     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
275f0     A7 F0 03 F6 | 	mov	ptra, fp
275f4     B2 00 A0 FD | 	call	#popregs_
275f8                 | _fatfs_cc_deselect_1003_ret
275f8     2D 00 64 FD | 	ret
275fc                 | 
275fc                 | _fatfs_cc_select_1007
275fc     00 4A 05 F6 | 	mov	COUNT_, #0
27600     A8 00 A0 FD | 	call	#pushregs_
27604     10 F0 07 F1 | 	add	ptra, #16
27608     01 00 00 FF 
2760c     14 E4 05 F1 | 	add	objptr, ##532
27610     F2 14 02 FB | 	rdlong	arg02, objptr
27614     08 4E 05 F1 | 	add	fp, #8
27618     A7 14 62 FC | 	wrlong	arg02, fp
2761c     08 E4 05 F1 | 	add	objptr, #8
27620     F2 12 02 FB | 	rdlong	arg01, objptr
27624     01 00 00 FF 
27628     1C E4 85 F1 | 	sub	objptr, ##540
2762c     04 4E 05 F1 | 	add	fp, #4
27630     A7 12 62 FC | 	wrlong	arg01, fp
27634     50 12 62 FD | 	fltl	arg01
27638     04 4E 85 F1 | 	sub	fp, #4
2763c     A7 12 02 FB | 	rdlong	arg01, fp
27640     58 12 62 FD | 	drvl	arg01
27644     1F 20 64 FD | 	waitx	#16
27648     04 4E 05 F1 | 	add	fp, #4
2764c     A7 12 02 FB | 	rdlong	arg01, fp
27650     41 12 62 FD | 	dirh	arg01
27654     08 4E 85 F1 | 	sub	fp, #8
27658     A7 12 02 F6 | 	mov	arg01, fp
2765c     04 4E 85 F1 | 	sub	fp, #4
27660     01 14 06 F6 | 	mov	arg02, #1
27664     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27668     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0997
2766c     00 FA 0D F2 | 	cmp	result1, #0 wz
27670     01 FA 05 56 |  if_ne	mov	result1, #1
27674     08 00 90 5D |  if_ne	jmp	#LR__4160
27678     FC FE BF FD | 	call	#_fatfs_cc_deselect_1003
2767c                 | ' 
2767c                 | ' 	deselect();
2767c                 | ' 	return 0;
2767c     00 FA 05 F6 | 	mov	result1, #0
27680                 | LR__4160
27680     A7 F0 03 F6 | 	mov	ptra, fp
27684     B2 00 A0 FD | 	call	#popregs_
27688                 | _fatfs_cc_select_1007_ret
27688     2D 00 64 FD | 	ret
2768c                 | 
2768c                 | _fatfs_cc_rcvr_datablock_1011
2768c     01 4A 05 F6 | 	mov	COUNT_, #1
27690     A8 00 A0 FD | 	call	#pushregs_
27694     18 F0 07 F1 | 	add	ptra, #24
27698     04 4E 05 F1 | 	add	fp, #4
2769c     A7 12 62 FC | 	wrlong	arg01, fp
276a0     04 4E 05 F1 | 	add	fp, #4
276a4     A7 14 62 FC | 	wrlong	arg02, fp
276a8     1A FA 61 FD | 	getct	result1
276ac     08 4E 05 F1 | 	add	fp, #8
276b0     A7 FA 61 FC | 	wrlong	result1, fp
276b4     14 1E 06 FB | 	rdlong	local01, #20
276b8     03 1E 46 F0 | 	shr	local01, #3
276bc     04 4E 05 F1 | 	add	fp, #4
276c0     A7 1E 62 FC | 	wrlong	local01, fp
276c4     14 4E 85 F1 | 	sub	fp, #20
276c8                 | ' 	BYTE *buff,
276c8                 | ' 	UINT btr
276c8                 | ' )
276c8                 | ' {
276c8                 | ' 	BYTE d[2];
276c8                 | ' 	UINT tmr, tmout;
276c8                 | ' 
276c8                 | ' 	tmr = _cnt();
276c8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
276c8                 | ' 	for(;;) {
276c8                 | LR__4170
276c8     0C 4E 05 F1 | 	add	fp, #12
276cc     A7 12 02 F6 | 	mov	arg01, fp
276d0     0C 4E 85 F1 | 	sub	fp, #12
276d4     01 14 06 F6 | 	mov	arg02, #1
276d8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
276dc     0C 4E 05 F1 | 	add	fp, #12
276e0     A7 1E C2 FA | 	rdbyte	local01, fp
276e4     0C 4E 85 F1 | 	sub	fp, #12
276e8     FF 1E 0E F2 | 	cmp	local01, #255 wz
276ec     28 00 90 5D |  if_ne	jmp	#LR__4171
276f0     1A FA 61 FD | 	getct	result1
276f4     FD 1E 02 F6 | 	mov	local01, result1
276f8     10 4E 05 F1 | 	add	fp, #16
276fc     A7 14 02 FB | 	rdlong	arg02, fp
27700     0A 1F 82 F1 | 	sub	local01, arg02
27704     04 4E 05 F1 | 	add	fp, #4
27708     A7 14 02 FB | 	rdlong	arg02, fp
2770c     14 4E 85 F1 | 	sub	fp, #20
27710     0A 1F 12 F2 | 	cmp	local01, arg02 wc
27714     B0 FF 9F CD |  if_b	jmp	#LR__4170
27718                 | LR__4171
27718     0C 4E 05 F1 | 	add	fp, #12
2771c     A7 1E C2 FA | 	rdbyte	local01, fp
27720     0C 4E 85 F1 | 	sub	fp, #12
27724     FE 1E 0E F2 | 	cmp	local01, #254 wz
27728     00 FA 05 56 |  if_ne	mov	result1, #0
2772c     30 00 90 5D |  if_ne	jmp	#LR__4172
27730     04 4E 05 F1 | 	add	fp, #4
27734     A7 12 02 FB | 	rdlong	arg01, fp
27738     04 4E 05 F1 | 	add	fp, #4
2773c     A7 14 02 FB | 	rdlong	arg02, fp
27740     08 4E 85 F1 | 	sub	fp, #8
27744     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27748     0C 4E 05 F1 | 	add	fp, #12
2774c     A7 12 02 F6 | 	mov	arg01, fp
27750     0C 4E 85 F1 | 	sub	fp, #12
27754     02 14 06 F6 | 	mov	arg02, #2
27758     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
2775c                 | ' 
2775c                 | ' 	rcvr_mmc(buff, btr);
2775c                 | ' 	rcvr_mmc(d, 2);
2775c                 | ' 
2775c                 | ' 	return 1;
2775c     01 FA 05 F6 | 	mov	result1, #1
27760                 | LR__4172
27760     A7 F0 03 F6 | 	mov	ptra, fp
27764     B2 00 A0 FD | 	call	#popregs_
27768                 | _fatfs_cc_rcvr_datablock_1011_ret
27768     2D 00 64 FD | 	ret
2776c                 | 
2776c                 | _fatfs_cc_xmit_datablock_1013
2776c     00 4A 05 F6 | 	mov	COUNT_, #0
27770     A8 00 A0 FD | 	call	#pushregs_
27774     10 F0 07 F1 | 	add	ptra, #16
27778     04 4E 05 F1 | 	add	fp, #4
2777c     A7 12 62 FC | 	wrlong	arg01, fp
27780     04 4E 05 F1 | 	add	fp, #4
27784     A7 14 42 FC | 	wrbyte	arg02, fp
27788     08 4E 85 F1 | 	sub	fp, #8
2778c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0997
27790     00 FA 0D F2 | 	cmp	result1, #0 wz
27794     00 FA 05 A6 |  if_e	mov	result1, #0
27798     90 00 90 AD |  if_e	jmp	#LR__4181
2779c     08 4E 05 F1 | 	add	fp, #8
277a0     A7 14 C2 FA | 	rdbyte	arg02, fp
277a4     04 4E 05 F1 | 	add	fp, #4
277a8     A7 14 42 FC | 	wrbyte	arg02, fp
277ac     A7 12 02 F6 | 	mov	arg01, fp
277b0     0C 4E 85 F1 | 	sub	fp, #12
277b4     01 14 06 F6 | 	mov	arg02, #1
277b8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
277bc     08 4E 05 F1 | 	add	fp, #8
277c0     A7 14 C2 FA | 	rdbyte	arg02, fp
277c4     08 4E 85 F1 | 	sub	fp, #8
277c8     FD 14 0E F2 | 	cmp	arg02, #253 wz
277cc     58 00 90 AD |  if_e	jmp	#LR__4180
277d0     04 4E 05 F1 | 	add	fp, #4
277d4     A7 12 02 FB | 	rdlong	arg01, fp
277d8     04 4E 85 F1 | 	sub	fp, #4
277dc     09 14 C6 F9 | 	decod	arg02, #9
277e0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
277e4     0C 4E 05 F1 | 	add	fp, #12
277e8     A7 12 02 F6 | 	mov	arg01, fp
277ec     0C 4E 85 F1 | 	sub	fp, #12
277f0     02 14 06 F6 | 	mov	arg02, #2
277f4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
277f8     0C 4E 05 F1 | 	add	fp, #12
277fc     A7 12 02 F6 | 	mov	arg01, fp
27800     0C 4E 85 F1 | 	sub	fp, #12
27804     01 14 06 F6 | 	mov	arg02, #1
27808     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
2780c     0C 4E 05 F1 | 	add	fp, #12
27810     A7 14 C2 FA | 	rdbyte	arg02, fp
27814     0C 4E 85 F1 | 	sub	fp, #12
27818     1F 14 06 F5 | 	and	arg02, #31
2781c     05 14 0E F2 | 	cmp	arg02, #5 wz
27820                 | ' 			return 0;
27820     00 FA 05 56 |  if_ne	mov	result1, #0
27824     04 00 90 5D |  if_ne	jmp	#LR__4181
27828                 | LR__4180
27828                 | ' 	}
27828                 | ' 
27828                 | ' 	return 1;
27828     01 FA 05 F6 | 	mov	result1, #1
2782c                 | LR__4181
2782c     A7 F0 03 F6 | 	mov	ptra, fp
27830     B2 00 A0 FD | 	call	#popregs_
27834                 | _fatfs_cc_xmit_datablock_1013_ret
27834     2D 00 64 FD | 	ret
27838                 | 
27838                 | _fatfs_cc_send_cmd_1017
27838     01 4A 05 F6 | 	mov	COUNT_, #1
2783c     A8 00 A0 FD | 	call	#pushregs_
27840     1C F0 07 F1 | 	add	ptra, #28
27844                 | _fatfs_cc_send_cmd_1017_enter
27844     04 4E 05 F1 | 	add	fp, #4
27848     A7 12 42 FC | 	wrbyte	arg01, fp
2784c     04 4E 05 F1 | 	add	fp, #4
27850     A7 14 62 FC | 	wrlong	arg02, fp
27854     04 4E 85 F1 | 	sub	fp, #4
27858     A7 FA C1 FA | 	rdbyte	result1, fp
2785c     04 4E 85 F1 | 	sub	fp, #4
27860     80 FA CD F7 | 	test	result1, #128 wz
27864     44 00 90 AD |  if_e	jmp	#LR__4190
27868     04 4E 05 F1 | 	add	fp, #4
2786c     A7 14 C2 FA | 	rdbyte	arg02, fp
27870     7F 14 06 F5 | 	and	arg02, #127
27874     A7 14 42 FC | 	wrbyte	arg02, fp
27878     04 4E 85 F1 | 	sub	fp, #4
2787c     37 12 06 F6 | 	mov	arg01, #55
27880     00 14 06 F6 | 	mov	arg02, #0
27884     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1017
27888     0C 4E 05 F1 | 	add	fp, #12
2788c     A7 FA 41 FC | 	wrbyte	result1, fp
27890     A7 14 C2 FA | 	rdbyte	arg02, fp
27894     0C 4E 85 F1 | 	sub	fp, #12
27898     02 14 16 F2 | 	cmp	arg02, #2 wc
2789c     0C 4E 05 31 |  if_ae	add	fp, #12
278a0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
278a4     0C 4E 85 31 |  if_ae	sub	fp, #12
278a8     6C 01 90 3D |  if_ae	jmp	#LR__4194
278ac                 | LR__4190
278ac     04 4E 05 F1 | 	add	fp, #4
278b0     A7 14 C2 FA | 	rdbyte	arg02, fp
278b4     04 4E 85 F1 | 	sub	fp, #4
278b8     0C 14 0E F2 | 	cmp	arg02, #12 wz
278bc     14 00 90 AD |  if_e	jmp	#LR__4191
278c0     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1003
278c4     34 FD BF FD | 	call	#_fatfs_cc_select_1007
278c8     00 FA 0D F2 | 	cmp	result1, #0 wz
278cc     FF FA 05 A6 |  if_e	mov	result1, #255
278d0     44 01 90 AD |  if_e	jmp	#LR__4194
278d4                 | LR__4191
278d4     04 4E 05 F1 | 	add	fp, #4
278d8     A7 14 C2 FA | 	rdbyte	arg02, fp
278dc     40 FA 05 F6 | 	mov	result1, #64
278e0     0A FB 41 F5 | 	or	result1, arg02
278e4     10 4E 05 F1 | 	add	fp, #16
278e8     A7 FA 41 FC | 	wrbyte	result1, fp
278ec     0C 4E 85 F1 | 	sub	fp, #12
278f0     A7 FA 01 FB | 	rdlong	result1, fp
278f4     18 FA 45 F0 | 	shr	result1, #24
278f8     0D 4E 05 F1 | 	add	fp, #13
278fc     A7 FA 41 FC | 	wrbyte	result1, fp
27900     0D 4E 85 F1 | 	sub	fp, #13
27904     A7 FA 01 FB | 	rdlong	result1, fp
27908     10 FA 45 F0 | 	shr	result1, #16
2790c     0E 4E 05 F1 | 	add	fp, #14
27910     A7 FA 41 FC | 	wrbyte	result1, fp
27914     0E 4E 85 F1 | 	sub	fp, #14
27918     A7 FA 01 FB | 	rdlong	result1, fp
2791c     08 FA 45 F0 | 	shr	result1, #8
27920     0F 4E 05 F1 | 	add	fp, #15
27924     A7 FA 41 FC | 	wrbyte	result1, fp
27928     0F 4E 85 F1 | 	sub	fp, #15
2792c     A7 FA 01 FB | 	rdlong	result1, fp
27930     10 4E 05 F1 | 	add	fp, #16
27934     A7 FA 41 FC | 	wrbyte	result1, fp
27938     0C 4E 85 F1 | 	sub	fp, #12
2793c     A7 02 48 FC | 	wrbyte	#1, fp
27940     08 4E 85 F1 | 	sub	fp, #8
27944     A7 FA C9 FA | 	rdbyte	result1, fp wz
27948     04 4E 85 F1 | 	sub	fp, #4
2794c     0C 4E 05 A1 |  if_e	add	fp, #12
27950     A7 2A 49 AC |  if_e	wrbyte	#149, fp
27954     0C 4E 85 A1 |  if_e	sub	fp, #12
27958     04 4E 05 F1 | 	add	fp, #4
2795c     A7 FA C1 FA | 	rdbyte	result1, fp
27960     04 4E 85 F1 | 	sub	fp, #4
27964     08 FA 0D F2 | 	cmp	result1, #8 wz
27968     0C 4E 05 A1 |  if_e	add	fp, #12
2796c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27970     0C 4E 85 A1 |  if_e	sub	fp, #12
27974     0C 4E 05 F1 | 	add	fp, #12
27978     A7 14 C2 FA | 	rdbyte	arg02, fp
2797c     0D 4E 05 F1 | 	add	fp, #13
27980     A7 14 42 FC | 	wrbyte	arg02, fp
27984     05 4E 85 F1 | 	sub	fp, #5
27988     A7 12 02 F6 | 	mov	arg01, fp
2798c     14 4E 85 F1 | 	sub	fp, #20
27990     06 14 06 F6 | 	mov	arg02, #6
27994     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
27998     04 4E 05 F1 | 	add	fp, #4
2799c     A7 1E C2 FA | 	rdbyte	local01, fp
279a0     04 4E 85 F1 | 	sub	fp, #4
279a4     0C 1E 0E F2 | 	cmp	local01, #12 wz
279a8     10 4E 05 A1 |  if_e	add	fp, #16
279ac     A7 12 02 A6 |  if_e	mov	arg01, fp
279b0     10 4E 85 A1 |  if_e	sub	fp, #16
279b4     01 14 06 A6 |  if_e	mov	arg02, #1
279b8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0993
279bc     0C 4E 05 F1 | 	add	fp, #12
279c0     A7 14 48 FC | 	wrbyte	#10, fp
279c4     0C 4E 85 F1 | 	sub	fp, #12
279c8                 | ' 	n = 10;
279c8                 | ' 	do
279c8                 | LR__4192
279c8     10 4E 05 F1 | 	add	fp, #16
279cc     A7 12 02 F6 | 	mov	arg01, fp
279d0     10 4E 85 F1 | 	sub	fp, #16
279d4     01 14 06 F6 | 	mov	arg02, #1
279d8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
279dc     10 4E 05 F1 | 	add	fp, #16
279e0     A7 1E C2 FA | 	rdbyte	local01, fp
279e4     10 4E 85 F1 | 	sub	fp, #16
279e8     80 1E CE F7 | 	test	local01, #128 wz
279ec     1C 00 90 AD |  if_e	jmp	#LR__4193
279f0     0C 4E 05 F1 | 	add	fp, #12
279f4     A7 1E C2 FA | 	rdbyte	local01, fp
279f8     01 1E 86 F1 | 	sub	local01, #1
279fc     A7 1E 42 FC | 	wrbyte	local01, fp
27a00     A7 1E CA FA | 	rdbyte	local01, fp wz
27a04     0C 4E 85 F1 | 	sub	fp, #12
27a08     BC FF 9F 5D |  if_ne	jmp	#LR__4192
27a0c                 | LR__4193
27a0c                 | ' 
27a0c                 | ' 	return d;
27a0c     10 4E 05 F1 | 	add	fp, #16
27a10     A7 FA C1 FA | 	rdbyte	result1, fp
27a14     10 4E 85 F1 | 	sub	fp, #16
27a18                 | LR__4194
27a18     A7 F0 03 F6 | 	mov	ptra, fp
27a1c     B2 00 A0 FD | 	call	#popregs_
27a20                 | _fatfs_cc_send_cmd_1017_ret
27a20     2D 00 64 FD | 	ret
27a24                 | 
27a24                 | _fatfs_cc_disk_deinitialize
27a24     03 4A 05 F6 | 	mov	COUNT_, #3
27a28     A8 00 A0 FD | 	call	#pushregs_
27a2c     00 12 4E F2 | 	cmps	arg01, #0 wz
27a30     01 00 00 FF 
27a34     14 E4 05 F1 | 	add	objptr, ##532
27a38     F2 12 02 FB | 	rdlong	arg01, objptr
27a3c     04 E4 85 F1 | 	sub	objptr, #4
27a40     F2 1E 02 FB | 	rdlong	local01, objptr
27a44     08 E4 05 F1 | 	add	objptr, #8
27a48     F2 20 02 FB | 	rdlong	local02, objptr
27a4c     04 E4 05 F1 | 	add	objptr, #4
27a50     F2 22 02 FB | 	rdlong	local03, objptr
27a54     01 00 00 FF 
27a58     1C E4 85 F1 | 	sub	objptr, ##540
27a5c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a5c                 | '         return RES_NOTRDY;
27a5c     03 FA 05 56 |  if_ne	mov	result1, #3
27a60     2C 00 90 5D |  if_ne	jmp	#LR__4200
27a64     50 12 62 FD | 	fltl	arg01
27a68     09 01 08 FC | 	wrpin	#0, arg01
27a6c     50 1E 62 FD | 	fltl	local01
27a70     0F 01 08 FC | 	wrpin	#0, local01
27a74     50 20 62 FD | 	fltl	local02
27a78     10 01 08 FC | 	wrpin	#0, local02
27a7c     50 22 62 FD | 	fltl	local03
27a80     11 01 08 FC | 	wrpin	#0, local03
27a84     0A 12 06 F6 | 	mov	arg01, #10
27a88     3C 14 BF FD | 	call	#__system___waitms
27a8c                 | '     }
27a8c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a8c                 | '     _pinclear(PIN_SS);
27a8c                 | '     _pinclear(PIN_CLK);
27a8c                 | '     _pinclear(PIN_DI);
27a8c                 | '     _pinclear(PIN_DO);
27a8c                 | ' 
27a8c                 | '     _waitms(10);
27a8c                 | ' 
27a8c                 | '     return 0;
27a8c     00 FA 05 F6 | 	mov	result1, #0
27a90                 | LR__4200
27a90     A7 F0 03 F6 | 	mov	ptra, fp
27a94     B2 00 A0 FD | 	call	#popregs_
27a98                 | _fatfs_cc_disk_deinitialize_ret
27a98     2D 00 64 FD | 	ret
27a9c                 | 
27a9c                 | _fatfs_cc_gettimeofday
27a9c     04 4A 05 F6 | 	mov	COUNT_, #4
27aa0     A8 00 A0 FD | 	call	#pushregs_
27aa4     09 1F 02 F6 | 	mov	local01, arg01
27aa8     F8 0F BF FD | 	call	#__system___getus
27aac     FD 12 02 F6 | 	mov	arg01, result1
27ab0     02 00 00 FF 
27ab4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
27ab8     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
27abc     09 FB 01 F6 | 	mov	result1, arg01
27ac0     10 FB 81 F1 | 	sub	result1, local02
27ac4     A1 07 00 FF 
27ac8     40 FA 15 FD | 	qdiv	result1, ##1000000
27acc     02 00 00 FF 
27ad0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27ad4     18 20 62 FD | 	getqx	local02
27ad8     A1 07 00 FF 
27adc     40 FA 15 FD | 	qdiv	result1, ##1000000
27ae0     00 20 0E F2 | 	cmp	local02, #0 wz
27ae4     19 22 62 FD | 	getqy	local03
27ae8     28 00 90 AD |  if_e	jmp	#LR__4210
27aec     02 00 00 FF 
27af0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27af4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27af8     10 25 02 F1 | 	add	local04, local02
27afc     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27b00     11 13 82 F1 | 	sub	arg01, local03
27b04     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27b08     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27b0c     02 00 00 FF 
27b10     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
27b14                 | LR__4210
27b14     02 00 00 FF 
27b18     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27b1c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27b20     02 00 00 FF 
27b24     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27b28     0F 25 62 FC | 	wrlong	local04, local01
27b2c     04 1E 06 F1 | 	add	local01, #4
27b30     0F 23 62 FC | 	wrlong	local03, local01
27b34                 | '         lastsec += secs;
27b34                 | '         lastus = now - leftover;
27b34                 | '     }
27b34                 | '     tv->tv_sec = lastsec;
27b34                 | '     tv->tv_usec = leftover;
27b34                 | '     return 0;
27b34     00 FA 05 F6 | 	mov	result1, #0
27b38     A7 F0 03 F6 | 	mov	ptra, fp
27b3c     B2 00 A0 FD | 	call	#popregs_
27b40                 | _fatfs_cc_gettimeofday_ret
27b40     2D 00 64 FD | 	ret
27b44                 | 
27b44                 | _fatfs_cc__is_leap_year
27b44     09 FB 51 F6 | 	abs	result1, arg01 wc
27b48     03 FA 05 F5 | 	and	result1, #3
27b4c     FD FA 89 F6 | 	negc	result1, result1 wz
27b50     38 00 90 5D |  if_ne	jmp	#LR__4221
27b54     09 FB 51 F6 | 	abs	result1, arg01 wc
27b58     64 FA 15 FD | 	qdiv	result1, #100
27b5c     19 FA 61 FD | 	getqy	result1
27b60     FD FA 89 F6 | 	negc	result1, result1 wz
27b64     1C 00 90 5D |  if_ne	jmp	#LR__4220
27b68     09 FB 51 F6 | 	abs	result1, arg01 wc
27b6c     90 FB 15 FD | 	qdiv	result1, #400
27b70                 | '       return (0 == y % 400);
27b70     00 FA 05 F6 | 	mov	result1, #0
27b74     19 00 62 FD | 	getqy	_var01
27b78     00 01 8A F6 | 	negc	_var01, _var01 wz
27b7c     01 FA 05 A6 |  if_e	mov	result1, #1
27b80     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27b84                 | LR__4220
27b84                 | '     return 1;
27b84     01 FA 05 F6 | 	mov	result1, #1
27b88     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27b8c                 | LR__4221
27b8c                 | '   }
27b8c                 | '   return 0;
27b8c     00 FA 05 F6 | 	mov	result1, #0
27b90                 | _fatfs_cc__is_leap_year_ret
27b90     2D 00 64 FD | 	ret
27b94                 | 
27b94                 | _fatfs_cc___tzoffset
27b94     09 01 0A F6 | 	mov	_var01, arg01 wz
27b98     FF FF FF FF 
27b9c     0A FF 6B FC | 	wrlong	##-1, arg02
27ba0     01 02 06 F6 | 	mov	_var02, #1
27ba4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
27ba8                 | '                 return 0;
27ba8     00 FA 05 A6 |  if_e	mov	result1, #0
27bac     94 02 90 AD |  if_e	jmp	#LR__4247
27bb0     0A 01 68 FC | 	wrlong	#0, arg02
27bb4     02 00 00 FF 
27bb8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27bbc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27bc0                 | ' 
27bc0                 | '        *hasdst = 0;
27bc0                 | ' 
27bc0                 | ' 	n = stdname;
27bc0                 | '         while (*s && isalpha(*s)) {
27bc0     02 00 00 FF 
27bc4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27bc8     97 28 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
27bcc                 | LR__4230
27bcc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27bd0     48 00 90 AD |  if_e	jmp	#LR__4232
27bd4     00 13 C2 FA | 	rdbyte	arg01, _var01
27bd8                 | ' {
27bd8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27bd8     80 12 36 F3 | 	fle	arg01, #128 wc
27bdc                 | '     return __ctype[c];
27bdc     02 00 00 FF 
27be0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27be4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27be8     09 FB C1 FA | 	rdbyte	result1, arg01
27bec     02 00 00 FF 
27bf0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27bf4     0C FA CD F7 | 	test	result1, #12 wz
27bf8     20 00 90 AD |  if_e	jmp	#LR__4232
27bfc     00 09 02 F6 | 	mov	_var05, _var01
27c00     00 0B 02 F6 | 	mov	_var06, _var01
27c04     01 0A 06 F1 | 	add	_var06, #1
27c08     04 0D C2 FA | 	rdbyte	_var07, _var05
27c0c     05 01 02 F6 | 	mov	_var01, _var06
27c10     03 0D 42 FC | 	wrbyte	_var07, _var04
27c14     01 06 06 F1 | 	add	_var04, #1
27c18     B0 FF 9F FD | 	jmp	#LR__4230
27c1c                 | LR__4231
27c1c                 | LR__4232
27c1c     03 01 48 FC | 	wrbyte	#0, _var04
27c20     00 0E 06 F6 | 	mov	_var08, #0
27c24     00 05 C2 FA | 	rdbyte	_var03, _var01
27c28     2D 04 0E F2 | 	cmp	_var03, #45 wz
27c2c     01 02 66 A6 |  if_e	neg	_var02, #1
27c30     01 00 06 A1 |  if_e	add	_var01, #1
27c34     97 28 48 FB | 	callpa	#(@LR__4234-@LR__4233)>>2,fcache_load_ptr_
27c38                 | '                 sgn = -1;
27c38                 | '                 s++;
27c38                 | '         }
27c38                 | '         while (isdigit(*s)) {
27c38                 | LR__4233
27c38     00 13 C2 FA | 	rdbyte	arg01, _var01
27c3c                 | ' {
27c3c                 | '   return  (__ctype_get(c) & 0x02 ) ;
27c3c     80 12 36 F3 | 	fle	arg01, #128 wc
27c40                 | '     return __ctype[c];
27c40     02 00 00 FF 
27c44     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27c48     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27c4c     09 FB C1 FA | 	rdbyte	result1, arg01
27c50     02 00 00 FF 
27c54     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27c58     02 FA CD F7 | 	test	result1, #2 wz
27c5c     28 00 90 AD |  if_e	jmp	#LR__4235
27c60     07 05 02 F6 | 	mov	_var03, _var08
27c64     02 04 66 F0 | 	shl	_var03, #2
27c68     07 05 02 F1 | 	add	_var03, _var08
27c6c     01 04 66 F0 | 	shl	_var03, #1
27c70     00 09 C2 FA | 	rdbyte	_var05, _var01
27c74     30 08 86 F1 | 	sub	_var05, #48
27c78     04 05 02 F1 | 	add	_var03, _var05
27c7c     02 0F 02 F6 | 	mov	_var08, _var03
27c80     01 00 06 F1 | 	add	_var01, #1
27c84     B0 FF 9F FD | 	jmp	#LR__4233
27c88                 | LR__4234
27c88                 | LR__4235
27c88     07 00 00 FF 
27c8c     10 0E 06 FD | 	qmul	_var08, ##3600
27c90     00 05 C2 FA | 	rdbyte	_var03, _var01
27c94     3A 04 0E F2 | 	cmp	_var03, #58 wz
27c98     18 10 62 FD | 	getqx	_var09
27c9c     70 00 90 5D |  if_ne	jmp	#LR__4239
27ca0     00 0E 06 F6 | 	mov	_var08, #0
27ca4     01 00 06 F1 | 	add	_var01, #1
27ca8     97 28 48 FB | 	callpa	#(@LR__4237-@LR__4236)>>2,fcache_load_ptr_
27cac                 | '                 x = 0;
27cac                 | '                 s++;
27cac                 | '                 while (isdigit(*s)) {
27cac                 | LR__4236
27cac     00 13 C2 FA | 	rdbyte	arg01, _var01
27cb0                 | ' {
27cb0                 | '   return  (__ctype_get(c) & 0x02 ) ;
27cb0     80 12 36 F3 | 	fle	arg01, #128 wc
27cb4                 | '     return __ctype[c];
27cb4     02 00 00 FF 
27cb8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27cbc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27cc0     09 FB C1 FA | 	rdbyte	result1, arg01
27cc4     02 00 00 FF 
27cc8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27ccc     02 FA CD F7 | 	test	result1, #2 wz
27cd0     28 00 90 AD |  if_e	jmp	#LR__4238
27cd4     07 05 02 F6 | 	mov	_var03, _var08
27cd8     02 04 66 F0 | 	shl	_var03, #2
27cdc     07 05 02 F1 | 	add	_var03, _var08
27ce0     01 04 66 F0 | 	shl	_var03, #1
27ce4     00 09 C2 FA | 	rdbyte	_var05, _var01
27ce8     30 08 86 F1 | 	sub	_var05, #48
27cec     04 05 02 F1 | 	add	_var03, _var05
27cf0     02 0F 02 F6 | 	mov	_var08, _var03
27cf4     01 00 06 F1 | 	add	_var01, #1
27cf8     B0 FF 9F FD | 	jmp	#LR__4236
27cfc                 | LR__4237
27cfc                 | LR__4238
27cfc     07 0D 02 F6 | 	mov	_var07, _var08
27d00     04 0C 66 F0 | 	shl	_var07, #4
27d04     07 0D 82 F1 | 	sub	_var07, _var08
27d08     02 0C 66 F0 | 	shl	_var07, #2
27d0c     06 11 02 F1 | 	add	_var09, _var07
27d10                 | LR__4239
27d10     02 00 00 FF 
27d14     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27d18     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27d1c     00 13 C2 FA | 	rdbyte	arg01, _var01
27d20                 | ' {
27d20                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27d20     80 12 36 F3 | 	fle	arg01, #128 wc
27d24                 | '     return __ctype[c];
27d24     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27d28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d2c     09 FB C1 FA | 	rdbyte	result1, arg01
27d30     02 00 00 FF 
27d34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d38     0C FA CD F7 | 	test	result1, #12 wz
27d3c     50 00 90 AD |  if_e	jmp	#LR__4242
27d40     0A 03 68 FC | 	wrlong	#1, arg02
27d44                 | '                 *hasdst = 1;
27d44                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
27d44                 | LR__4240
27d44     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27d48     44 00 90 AD |  if_e	jmp	#LR__4241
27d4c     00 13 C2 FA | 	rdbyte	arg01, _var01
27d50                 | ' {
27d50                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27d50     80 12 36 F3 | 	fle	arg01, #128 wc
27d54                 | '     return __ctype[c];
27d54     02 00 00 FF 
27d58     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27d5c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27d60     09 FB C1 FA | 	rdbyte	result1, arg01
27d64     02 00 00 FF 
27d68     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27d6c     0C FA CD F7 | 	test	result1, #12 wz
27d70     1C 00 90 AD |  if_e	jmp	#LR__4241
27d74     00 0B 02 F6 | 	mov	_var06, _var01
27d78     01 0A 06 F1 | 	add	_var06, #1
27d7c     00 0D C2 FA | 	rdbyte	_var07, _var01
27d80     05 01 02 F6 | 	mov	_var01, _var06
27d84     03 0D 42 FC | 	wrbyte	_var07, _var04
27d88     01 06 06 F1 | 	add	_var04, #1
27d8c     B4 FF 9F FD | 	jmp	#LR__4240
27d90                 | LR__4241
27d90                 | LR__4242
27d90     03 01 48 FC | 	wrbyte	#0, _var04
27d94     02 00 00 FF 
27d98     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27d9c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27da0     02 00 00 FF 
27da4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
27da8     20 00 90 AD |  if_e	jmp	#LR__4243
27dac     02 00 00 FF 
27db0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27db4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27db8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
27dbc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27dc0     02 00 00 FF 
27dc4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27dc8     1C 00 90 FD | 	jmp	#LR__4244
27dcc                 | LR__4243
27dcc     02 00 00 FF 
27dd0     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
27dd4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27dd8     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
27ddc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27de0     02 00 00 FF 
27de4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
27de8                 | LR__4244
27de8     02 00 00 FF 
27dec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27df0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
27df4     02 00 00 FF 
27df8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27dfc     20 00 90 AD |  if_e	jmp	#LR__4245
27e00     02 00 00 FF 
27e04     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27e08     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27e0c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
27e10     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27e14     02 00 00 FF 
27e18     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27e1c     1C 00 90 FD | 	jmp	#LR__4246
27e20                 | LR__4245
27e20     02 00 00 FF 
27e24     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27e28     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27e2c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
27e30     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
27e34     02 00 00 FF 
27e38     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27e3c                 | LR__4246
27e3c     08 03 02 FD | 	qmul	_var02, _var09
27e40                 | ' 		_tzname[1] = stdname;
27e40                 | ' 
27e40                 | '         return sgn * off;
27e40     18 FA 61 FD | 	getqx	result1
27e44                 | LR__4247
27e44                 | _fatfs_cc___tzoffset_ret
27e44     2D 00 64 FD | 	ret
27e48                 | 
27e48                 | _fatfs_cc___indst
27e48     10 12 06 F1 | 	add	arg01, #16
27e4c     09 01 02 FB | 	rdlong	_var01, arg01
27e50     10 12 86 F1 | 	sub	arg01, #16
27e54     02 00 0E F2 | 	cmp	_var01, #2 wz
27e58     30 00 90 5D |  if_ne	jmp	#LR__4250
27e5c     07 00 06 F6 | 	mov	_var01, #7
27e60     18 12 06 F1 | 	add	arg01, #24
27e64     09 03 02 FB | 	rdlong	_var02, arg01
27e68     01 01 02 F1 | 	add	_var01, _var02
27e6c     0C 12 86 F1 | 	sub	arg01, #12
27e70     09 05 02 FB | 	rdlong	_var03, arg01
27e74     02 01 82 F1 | 	sub	_var01, _var03
27e78     00 00 56 F2 | 	cmps	_var01, #0 wc
27e7c                 | '                         return 1;
27e7c     01 FA 05 C6 |  if_b	mov	result1, #1
27e80     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27e84                 | '                 return 0;
27e84     00 FA 05 F6 | 	mov	result1, #0
27e88     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27e8c                 | LR__4250
27e8c     10 12 06 F1 | 	add	arg01, #16
27e90     09 01 02 FB | 	rdlong	_var01, arg01
27e94     10 12 86 F1 | 	sub	arg01, #16
27e98     0A 00 0E F2 | 	cmp	_var01, #10 wz
27e9c     28 00 90 5D |  if_ne	jmp	#LR__4251
27ea0     18 12 06 F1 | 	add	arg01, #24
27ea4     09 01 02 FB | 	rdlong	_var01, arg01
27ea8     0C 12 86 F1 | 	sub	arg01, #12
27eac     09 07 02 FB | 	rdlong	_var04, arg01
27eb0     03 01 82 F1 | 	sub	_var01, _var04
27eb4     00 00 56 F2 | 	cmps	_var01, #0 wc
27eb8                 | '                         return 0;
27eb8     00 FA 05 C6 |  if_b	mov	result1, #0
27ebc     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
27ec0                 | '                 return 1;
27ec0     01 FA 05 F6 | 	mov	result1, #1
27ec4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27ec8                 | LR__4251
27ec8                 | '         }
27ec8                 | ' 
27ec8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
27ec8     00 00 06 F6 | 	mov	_var01, #0
27ecc     10 12 06 F1 | 	add	arg01, #16
27ed0     09 03 02 FB | 	rdlong	_var02, arg01
27ed4     10 12 86 F1 | 	sub	arg01, #16
27ed8     03 02 56 F2 | 	cmps	_var02, #3 wc
27edc     10 00 90 CD |  if_b	jmp	#LR__4252
27ee0     10 12 06 F1 | 	add	arg01, #16
27ee4     09 05 02 FB | 	rdlong	_var03, arg01
27ee8     0A 04 56 F2 | 	cmps	_var03, #10 wc
27eec     01 00 06 C6 |  if_b	mov	_var01, #1
27ef0                 | LR__4252
27ef0     00 FB 01 F6 | 	mov	result1, _var01
27ef4                 | _fatfs_cc___indst_ret
27ef4     2D 00 64 FD | 	ret
27ef8                 | 
27ef8                 | ' 	
27ef8                 | ' 	FUNCTION pfunc(c as integer) as integer
27ef8                 | ___strs_cl_pfunc
27ef8                 | ' 		if (i < 16) then
27ef8     04 E4 05 F1 | 	add	objptr, #4
27efc     F2 FA 01 FB | 	rdlong	result1, objptr
27f00     04 E4 85 F1 | 	sub	objptr, #4
27f04     10 FA 55 F2 | 	cmps	result1, #16 wc
27f08     2C 00 90 3D |  if_ae	jmp	#LR__4260
27f0c     F2 FA 01 FB | 	rdlong	result1, objptr
27f10     04 E4 05 F1 | 	add	objptr, #4
27f14     F2 00 02 FB | 	rdlong	_var01, objptr
27f18     FD 00 02 F1 | 	add	_var01, result1
27f1c     00 13 42 FC | 	wrbyte	arg01, _var01
27f20     F2 FA 01 FB | 	rdlong	result1, objptr
27f24     01 FA 05 F1 | 	add	result1, #1
27f28     F2 FA 61 FC | 	wrlong	result1, objptr
27f2c     04 E4 85 F1 | 	sub	objptr, #4
27f30                 | ' 			p(i) = c
27f30                 | ' 			i = i+1
27f30                 | ' 			return 1
27f30     01 FA 05 F6 | 	mov	result1, #1
27f34     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
27f38                 | LR__4260
27f38                 | ' 			return -1
27f38     01 FA 65 F6 | 	neg	result1, #1
27f3c                 | ___strs_cl_pfunc_ret
27f3c     2D 00 64 FD | 	ret
27f40                 | 
27f40                 | __struct__s_vfs_file_t_putchar
27f40     04 4A 05 F6 | 	mov	COUNT_, #4
27f44     A8 00 A0 FD | 	call	#pushregs_
27f48     1C E4 05 F1 | 	add	objptr, #28
27f4c     F2 1E 0A FB | 	rdlong	local01, objptr wz
27f50     1C E4 85 F1 | 	sub	objptr, #28
27f54     00 FA 05 A6 |  if_e	mov	result1, #0
27f58     48 00 90 AD |  if_e	jmp	#LR__4270
27f5c     1C E4 05 F1 | 	add	objptr, #28
27f60     F2 20 02 FB | 	rdlong	local02, objptr
27f64     10 23 02 F6 | 	mov	local03, local02
27f68     1C E4 85 F1 | 	sub	objptr, #28
27f6c     13 22 46 F7 | 	zerox	local03, #19
27f70     14 20 46 F0 | 	shr	local02, #20
27f74     02 20 66 F0 | 	shl	local02, #2
27f78     ED 20 02 F1 | 	add	local02, __methods__
27f7c     10 21 02 FB | 	rdlong	local02, local02
27f80     F2 14 02 F6 | 	mov	arg02, objptr
27f84     F2 24 02 F6 | 	mov	local04, objptr
27f88     11 E5 01 F6 | 	mov	objptr, local03
27f8c     2D 20 62 FD | 	call	local02
27f90     12 E5 01 F6 | 	mov	objptr, local04
27f94                 | '     return (i < 0) ? 0 : 1;
27f94     00 FA 55 F2 | 	cmps	result1, #0 wc
27f98     00 1E 06 C6 |  if_b	mov	local01, #0
27f9c     01 1E 06 36 |  if_ae	mov	local01, #1
27fa0     0F FB 01 F6 | 	mov	result1, local01
27fa4                 | LR__4270
27fa4     A7 F0 03 F6 | 	mov	ptra, fp
27fa8     B2 00 A0 FD | 	call	#popregs_
27fac                 | __struct__s_vfs_file_t_putchar_ret
27fac     2D 00 64 FD | 	ret
27fb0                 | 
27fb0                 | __struct__s_vfs_file_t_getchar
27fb0     03 4A 05 F6 | 	mov	COUNT_, #3
27fb4     A8 00 A0 FD | 	call	#pushregs_
27fb8     20 E4 05 F1 | 	add	objptr, #32
27fbc     F2 12 0A FB | 	rdlong	arg01, objptr wz
27fc0     20 E4 85 F1 | 	sub	objptr, #32
27fc4     01 FA 65 A6 |  if_e	neg	result1, #1
27fc8     38 00 90 AD |  if_e	jmp	#LR__4280
27fcc                 | '     return getcf(__this);
27fcc     20 E4 05 F1 | 	add	objptr, #32
27fd0     F2 1E 02 FB | 	rdlong	local01, objptr
27fd4     0F 21 02 F6 | 	mov	local02, local01
27fd8     20 E4 85 F1 | 	sub	objptr, #32
27fdc     13 20 46 F7 | 	zerox	local02, #19
27fe0     14 1E 46 F0 | 	shr	local01, #20
27fe4     02 1E 66 F0 | 	shl	local01, #2
27fe8     ED 1E 02 F1 | 	add	local01, __methods__
27fec     0F 1F 02 FB | 	rdlong	local01, local01
27ff0     F2 12 02 F6 | 	mov	arg01, objptr
27ff4     F2 22 02 F6 | 	mov	local03, objptr
27ff8     10 E5 01 F6 | 	mov	objptr, local02
27ffc     2D 1E 62 FD | 	call	local01
28000     11 E5 01 F6 | 	mov	objptr, local03
28004                 | LR__4280
28004     A7 F0 03 F6 | 	mov	ptra, fp
28008     B2 00 A0 FD | 	call	#popregs_
2800c                 | __struct__s_vfs_file_t_getchar_ret
2800c     2D 00 64 FD | 	ret
28010                 | 
28010                 | __struct___bas_wrap_sender_tx
28010     03 4A 05 F6 | 	mov	COUNT_, #3
28014     A8 00 A0 FD | 	call	#pushregs_
28018     F2 1E 02 FB | 	rdlong	local01, objptr
2801c     0F 21 02 F6 | 	mov	local02, local01
28020     13 1E 46 F7 | 	zerox	local01, #19
28024     14 20 46 F0 | 	shr	local02, #20
28028     02 20 66 F0 | 	shl	local02, #2
2802c     ED 20 02 F1 | 	add	local02, __methods__
28030     10 21 02 FB | 	rdlong	local02, local02
28034     F2 22 02 F6 | 	mov	local03, objptr
28038     0F E5 01 F6 | 	mov	objptr, local01
2803c     2D 20 62 FD | 	call	local02
28040     11 E5 01 F6 | 	mov	objptr, local03
28044     01 FA 05 F6 | 	mov	result1, #1
28048     A7 F0 03 F6 | 	mov	ptra, fp
2804c     B2 00 A0 FD | 	call	#popregs_
28050                 | __struct___bas_wrap_sender_tx_ret
28050     2D 00 64 FD | 	ret
28054                 | 
28054                 | __struct___bas_wrap_sender_rx
28054     03 4A 05 F6 | 	mov	COUNT_, #3
28058     A8 00 A0 FD | 	call	#pushregs_
2805c     04 E4 05 F1 | 	add	objptr, #4
28060     F2 1E 02 FB | 	rdlong	local01, objptr
28064     0F 21 02 F6 | 	mov	local02, local01
28068     04 E4 85 F1 | 	sub	objptr, #4
2806c     13 20 46 F7 | 	zerox	local02, #19
28070     14 1E 46 F0 | 	shr	local01, #20
28074     02 1E 66 F0 | 	shl	local01, #2
28078     ED 1E 02 F1 | 	add	local01, __methods__
2807c     0F 1F 02 FB | 	rdlong	local01, local01
28080     F2 22 02 F6 | 	mov	local03, objptr
28084     10 E5 01 F6 | 	mov	objptr, local02
28088     2D 1E 62 FD | 	call	local01
2808c     11 E5 01 F6 | 	mov	objptr, local03
28090     A7 F0 03 F6 | 	mov	ptra, fp
28094     B2 00 A0 FD | 	call	#popregs_
28098                 | __struct___bas_wrap_sender_rx_ret
28098     2D 00 64 FD | 	ret
2809c                 | 
2809c                 | __struct___bas_wrap_sender_close
2809c     03 4A 05 F6 | 	mov	COUNT_, #3
280a0     A8 00 A0 FD | 	call	#pushregs_
280a4     08 E4 05 F1 | 	add	objptr, #8
280a8     F2 1E 02 FB | 	rdlong	local01, objptr
280ac     0F 21 02 F6 | 	mov	local02, local01
280b0     08 E4 85 F1 | 	sub	objptr, #8
280b4     13 20 46 F7 | 	zerox	local02, #19
280b8     14 1E 46 F0 | 	shr	local01, #20
280bc     02 1E 66 F0 | 	shl	local01, #2
280c0     ED 1E 02 F1 | 	add	local01, __methods__
280c4     0F 1F 02 FB | 	rdlong	local01, local01
280c8     F2 22 02 F6 | 	mov	local03, objptr
280cc     10 E5 01 F6 | 	mov	objptr, local02
280d0     2D 1E 62 FD | 	call	local01
280d4     11 E5 01 F6 | 	mov	objptr, local03
280d8     A7 F0 03 F6 | 	mov	ptra, fp
280dc     B2 00 A0 FD | 	call	#popregs_
280e0                 | __struct___bas_wrap_sender_close_ret
280e0     2D 00 64 FD | 	ret
280e4                 | 
280e4                 | LR__4290
280e4     2F          | 	byte	"/"
280e5     00          | 	byte	0
280e6                 | LR__4291
280e6     69 6E 66    | 	byte	"inf"
280e9     00          | 	byte	0
280ea                 | LR__4292
280ea     6E 61 6E    | 	byte	"nan"
280ed     00          | 	byte	0
280ee                 | LR__4293
280ee                 | 	byte	
280ee     00          | 	byte	0
280ef                 | LR__4294
280ef                 | 	byte	
280ef     00          | 	byte	0
280f0                 | LR__4295
280f0                 | 	byte	
280f0     00          | 	byte	0
280f1                 | LR__4296
280f1                 | 	byte	
280f1     00          | 	byte	0
280f2                 | LR__4297
280f2                 | 	byte	
280f2     00          | 	byte	0
280f3                 | LR__4298
280f3                 | 	byte	
280f3     00          | 	byte	0
280f4                 | LR__4299
280f4                 | 	byte	
280f4     00          | 	byte	0
280f5                 | LR__4300
280f5                 | 	byte	
280f5     00          | 	byte	0
280f6                 | LR__4301
280f6     00          | 	byte	0
280f7     00          | 	byte	0
280f8                 | LR__4302
280f8     00          | 	byte	0
280f9     00          | 	byte	0
280fa                 | LR__4303
280fa     00          | 	byte	0
280fb     00          | 	byte	0
280fc                 | LR__4304
280fc     20 21 21 21 
28100     20 63 6F 72 
28104     72 75 70 74 
28108     65 64 20 68 
2810c     65 61 70 3F 
28110     3F 3F 20 21 
28114     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
28117     00          | 	byte	0
28118                 | LR__4305
28118     20 21 21 21 
2811c     20 6F 75 74 
28120     20 6F 66 20 
28124     68 65 61 70 
28128     20 6D 65 6D 
2812c     6F 72 79 20 
28130     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28134     00          | 	byte	0
28135                 | LR__4306
28135     20 21 21 21 
28139     20 63 6F 72 
2813d     72 75 70 74 
28141     65 64 20 68 
28145     65 61 70 20 
28149     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2814d     00          | 	byte	0
2814e                 | LR__4307
2814e     00          | 	byte	0
2814f     00          | 	byte	0
28150                 | LR__4308
28150     2E          | 	byte	"."
28151     00          | 	byte	0
28152                 | LR__4309
28152     00          | 	byte	0
28153     00          | 	byte	0
28154                 | LR__4310
28154     00          | 	byte	0
28155     00          | 	byte	0
28156                 | LR__4311
28156     00          | 	byte	0
28157     00          | 	byte	0
28158                 | LR__4312
28158     2A 3A 3C 3E 
2815c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
28160     00          | 	byte	0
28161                 | LR__4313
28161     2B 2C 3B 3D 
28165     5B 5D       | 	byte	"+,;=[]"
28167     00          | 	byte	0
28168                 | LR__4314
28168     46 41 54 33 
2816c     32 20 20 20 | 	byte	"FAT32   "
28170     00          | 	byte	0
28171                 | LR__4315
28171     54 5A       | 	byte	"TZ"
28173     00          | 	byte	0
28174                 | LR__4316
28174     00          | 	byte	0
28175     00          | 	byte	0
28176                 | LR__4317
28176                 | 	byte	
28176     00          | 	byte	0
28177                 | LR__4318
28177                 | 	byte	
28177     00          | 	byte	0
28178                 | LR__4319
28178     22          | 	byte	34
28179     00          | 	byte	0
2817a                 | LR__4320
2817a     22          | 	byte	34
2817b     00          | 	byte	0
2817c                 | LR__4321
2817c     3A          | 	byte	":"
2817d     00          | 	byte	0
2817e                 | LR__4322
2817e                 | 	byte	
2817e     00          | 	byte	0
2817f                 | LR__4323
2817f                 | 	byte	
2817f     00          | 	byte	0
28180                 | LR__4324
28180                 | 	byte	
28180     00          | 	byte	0
28181                 | LR__4325
28181                 | 	byte	
28181     00          | 	byte	0
28182                 | LR__4326
28182                 | 	byte	
28182     00          | 	byte	0
28183                 | LR__4327
28183                 | 	byte	
28183     00          | 	byte	0
28184                 | LR__4328
28184                 | 	byte	
28184     00          | 	byte	0
28185                 | LR__4329
28185     22          | 	byte	34
28186     00          | 	byte	0
28187                 | LR__4330
28187     22          | 	byte	34
28188     00          | 	byte	0
28189                 | LR__4331
28189     22          | 	byte	34
2818a     00          | 	byte	0
2818b                 | LR__4332
2818b     22          | 	byte	34
2818c     00          | 	byte	0
2818d                 | LR__4333
2818d     22          | 	byte	34
2818e     00          | 	byte	0
2818f                 | LR__4334
2818f     3E          | 	byte	">"
28190     00          | 	byte	0
28191                 | LR__4335
28191     3E          | 	byte	">"
28192     00          | 	byte	0
28193                 | LR__4336
28193     2B          | 	byte	"+"
28194     00          | 	byte	0
28195                 | LR__4337
28195     2D          | 	byte	"-"
28196     00          | 	byte	0
28197                 | LR__4338
28197     2A          | 	byte	"*"
28198     00          | 	byte	0
28199                 | LR__4339
28199     2F          | 	byte	"/"
2819a     00          | 	byte	0
2819b                 | LR__4340
2819b     5E          | 	byte	"^"
2819c     00          | 	byte	0
2819d                 | LR__4341
2819d     3D          | 	byte	"="
2819e     00          | 	byte	0
2819f                 | LR__4342
2819f     2B          | 	byte	"+"
281a0     00          | 	byte	0
281a1                 | LR__4343
281a1     2B          | 	byte	"+"
281a2     00          | 	byte	0
281a3                 | LR__4344
281a3     2D          | 	byte	"-"
281a4     00          | 	byte	0
281a5                 | LR__4345
281a5     2D          | 	byte	"-"
281a6     00          | 	byte	0
281a7                 | LR__4346
281a7     3C          | 	byte	"<"
281a8     00          | 	byte	0
281a9                 | LR__4347
281a9     3E          | 	byte	">"
281aa     00          | 	byte	0
281ab                 | LR__4348
281ab     22          | 	byte	34
281ac     00          | 	byte	0
281ad                 | LR__4349
281ad     22          | 	byte	34
281ae     00          | 	byte	0
281af                 | LR__4350
281af     2E          | 	byte	"."
281b0     00          | 	byte	0
281b1                 | LR__4351
281b1     3F          | 	byte	"?"
281b2     00          | 	byte	0
281b3                 | LR__4352
281b3     3F          | 	byte	"?"
281b4     00          | 	byte	0
281b5                 | LR__4353
281b5     6D 6F 75 73 
281b9     65          | 	byte	"mouse"
281ba     00          | 	byte	0
281bb                 | LR__4354
281bb     63 75 72 73 
281bf     6F 72       | 	byte	"cursor"
281c1     00          | 	byte	0
281c2                 | LR__4355
281c2     63 6C 69 63 
281c6     6B          | 	byte	"click"
281c7     00          | 	byte	0
281c8                 | LR__4356
281c8     6F 6E       | 	byte	"on"
281ca     00          | 	byte	0
281cb                 | LR__4357
281cb     31          | 	byte	"1"
281cc     00          | 	byte	0
281cd                 | LR__4358
281cd     6F 66 66    | 	byte	"off"
281d0     00          | 	byte	0
281d1                 | LR__4359
281d1     30          | 	byte	"0"
281d2     00          | 	byte	0
281d3                 | LR__4360
281d3     6D 6F 64 65 | 	byte	"mode"
281d7     00          | 	byte	0
281d8                 | LR__4361
281d8     6D 2E       | 	byte	"m."
281da     00          | 	byte	0
281db                 | LR__4362
281db     61 74 61 72 
281df     69          | 	byte	"atari"
281e0     00          | 	byte	0
281e1                 | LR__4363
281e1     30          | 	byte	"0"
281e2     00          | 	byte	0
281e3                 | LR__4364
281e3     70 63 5F 61 
281e7     6D 62 65 72 | 	byte	"pc_amber"
281eb     00          | 	byte	0
281ec                 | LR__4365
281ec     31          | 	byte	"1"
281ed     00          | 	byte	0
281ee                 | LR__4366
281ee     70 63 5F 67 
281f2     72 65 65 6E | 	byte	"pc_green"
281f6     00          | 	byte	0
281f7                 | LR__4367
281f7     32          | 	byte	"2"
281f8     00          | 	byte	0
281f9                 | LR__4368
281f9     70 63 5F 77 
281fd     68 69 74 65 | 	byte	"pc_white"
28201     00          | 	byte	0
28202                 | LR__4369
28202     33          | 	byte	"3"
28203     00          | 	byte	0
28204                 | LR__4370
28204     73 74       | 	byte	"st"
28206     00          | 	byte	0
28207                 | LR__4371
28207     34          | 	byte	"4"
28208     00          | 	byte	0
28209                 | LR__4372
28209                 | 	byte	
28209     00          | 	byte	0
2820a                 | LR__4373
2820a     6C 6F 61 64 | 	byte	"load"
2820e     00          | 	byte	0
2820f                 | LR__4374
2820f     73 61 76 65 | 	byte	"save"
28213     00          | 	byte	0
28214                 | LR__4375
28214     62 72 75 6E | 	byte	"brun"
28218     00          | 	byte	0
28219                 | LR__4376
28219     6C 6F 2E    | 	byte	"lo."
2821c     00          | 	byte	0
2821d                 | LR__4377
2821d     73 2E       | 	byte	"s."
2821f     00          | 	byte	0
28220                 | LR__4378
28220     62 72 2E    | 	byte	"br."
28223     00          | 	byte	0
28224                 | LR__4379
28224                 | 	byte	
28224     00          | 	byte	0
28225                 | LR__4380
28225                 | 	byte	
28225     00          | 	byte	0
28226                 | LR__4381
28226                 | 	byte	
28226     00          | 	byte	0
28227                 | LR__4382
28227                 | 	byte	
28227     00          | 	byte	0
28228                 | LR__4383
28228     20 55 73 65 
2822c     72 20 66 75 
28230     6E 63 74 69 
28234     6F 6E 73 20 
28238     61 6E 64 20 
2823c     61 72 72 61 
28240     79 73 20 6E 
28244     6F 74 20 79 
28248     65 74 20 69 
2824c     6D 70 6C 65 
28250     6D 65 6E 74 
28254     65 64       | 	byte	" User functions and arrays not yet implemented"
28256     00          | 	byte	0
28257                 | LR__4384
28257                 | 	byte	
28257     00          | 	byte	0
28258                 | LR__4385
28258                 | 	byte	
28258     00          | 	byte	0
28259                 | LR__4386
28259     52 65 61 64 
2825d     79          | 	byte	"Ready"
2825e     00          | 	byte	0
2825f                 | LR__4387
2825f     2B          | 	byte	"+"
28260     00          | 	byte	0
28261                 | LR__4388
28261     2D          | 	byte	"-"
28262     00          | 	byte	0
28263                 | LR__4389
28263     6F 72       | 	byte	"or"
28265     00          | 	byte	0
28266                 | LR__4390
28266     78 6F 72    | 	byte	"xor"
28269     00          | 	byte	0
2826a                 | LR__4391
2826a     2A          | 	byte	"*"
2826b     00          | 	byte	0
2826c                 | LR__4392
2826c     2F          | 	byte	"/"
2826d     00          | 	byte	0
2826e                 | LR__4393
2826e     61 6E 64    | 	byte	"and"
28271     00          | 	byte	0
28272                 | LR__4394
28272     64 69 76    | 	byte	"div"
28275     00          | 	byte	0
28276                 | LR__4395
28276     6D 6F 64    | 	byte	"mod"
28279     00          | 	byte	0
2827a                 | LR__4396
2827a     73 68 6C    | 	byte	"shl"
2827d     00          | 	byte	0
2827e                 | LR__4397
2827e     73 68 72    | 	byte	"shr"
28281     00          | 	byte	0
28282                 | LR__4398
28282     5E          | 	byte	"^"
28283     00          | 	byte	0
28284                 | LR__4399
28284     6E 6F 74    | 	byte	"not"
28287     00          | 	byte	0
28288                 | LR__4400
28288     40          | 	byte	"@"
28289     00          | 	byte	0
2828a                 | LR__4401
2828a     3D          | 	byte	"="
2828b     00          | 	byte	0
2828c                 | LR__4402
2828c     3E 3D       | 	byte	">="
2828e     00          | 	byte	0
2828f                 | LR__4403
2828f     3C 3D       | 	byte	"<="
28291     00          | 	byte	0
28292                 | LR__4404
28292     3C          | 	byte	"<"
28293     00          | 	byte	0
28294                 | LR__4405
28294     3E          | 	byte	">"
28295     00          | 	byte	0
28296                 | LR__4406
28296     3C 3E       | 	byte	"<>"
28298     00          | 	byte	0
28299                 | LR__4407
28299     2B 2B       | 	byte	"++"
2829b     00          | 	byte	0
2829c                 | LR__4408
2829c     2D 2D       | 	byte	"--"
2829e     00          | 	byte	0
2829f                 | LR__4409
2829f     2B          | 	byte	"+"
282a0     00          | 	byte	0
282a1                 | LR__4410
282a1     2D          | 	byte	"-"
282a2     00          | 	byte	0
282a3                 | LR__4411
282a3     3D          | 	byte	"="
282a4     00          | 	byte	0
282a5                 | LR__4412
282a5     2C          | 	byte	","
282a6     00          | 	byte	0
282a7                 | LR__4413
282a7     2A          | 	byte	"*"
282a8     00          | 	byte	0
282a9                 | LR__4414
282a9     2F          | 	byte	"/"
282aa     00          | 	byte	0
282ab                 | LR__4415
282ab     3B          | 	byte	";"
282ac     00          | 	byte	0
282ad                 | LR__4416
282ad     22          | 	byte	34
282ae     00          | 	byte	0
282af                 | LR__4417
282af     5E          | 	byte	"^"
282b0     00          | 	byte	0
282b1                 | LR__4418
282b1     29          | 	byte	")"
282b2     00          | 	byte	0
282b3                 | LR__4419
282b3     28          | 	byte	"("
282b4     00          | 	byte	0
282b5                 | LR__4420
282b5     3A          | 	byte	":"
282b6     00          | 	byte	0
282b7                 | LR__4421
282b7     20          | 	byte	" "
282b8     00          | 	byte	0
282b9                 | LR__4422
282b9     3E          | 	byte	">"
282ba     00          | 	byte	0
282bb                 | LR__4423
282bb     3C          | 	byte	"<"
282bc     00          | 	byte	0
282bd                 | LR__4424
282bd     3D          | 	byte	"="
282be     00          | 	byte	0
282bf                 | LR__4425
282bf     62 65 65 70 | 	byte	"beep"
282c3     00          | 	byte	0
282c4                 | LR__4426
282c4     62 2E       | 	byte	"b."
282c6     00          | 	byte	0
282c7                 | LR__4427
282c7     62 6F 78    | 	byte	"box"
282ca     00          | 	byte	0
282cb                 | LR__4428
282cb     62 72 75 6E | 	byte	"brun"
282cf     00          | 	byte	0
282d0                 | LR__4429
282d0     62 72 2E    | 	byte	"br."
282d3     00          | 	byte	0
282d4                 | LR__4430
282d4     63 69 72 63 
282d8     6C 65       | 	byte	"circle"
282da     00          | 	byte	0
282db                 | LR__4431
282db     63 69 2E    | 	byte	"ci."
282de     00          | 	byte	0
282df                 | LR__4432
282df     63 6C 69 63 
282e3     6B          | 	byte	"click"
282e4     00          | 	byte	0
282e5                 | LR__4433
282e5     63 6C 73    | 	byte	"cls"
282e8     00          | 	byte	0
282e9                 | LR__4434
282e9     63 6F 6C 6F 
282ed     72          | 	byte	"color"
282ee     00          | 	byte	0
282ef                 | LR__4435
282ef     63 2E       | 	byte	"c."
282f1     00          | 	byte	0
282f2                 | LR__4436
282f2     63 73 61 76 
282f6     65          | 	byte	"csave"
282f7     00          | 	byte	0
282f8                 | LR__4437
282f8     63 73 2E    | 	byte	"cs."
282fb     00          | 	byte	0
282fc                 | LR__4438
282fc     63 75 72 73 
28300     6F 72       | 	byte	"cursor"
28302     00          | 	byte	0
28303                 | LR__4439
28303     64 65 66 73 
28307     6E 64       | 	byte	"defsnd"
28309     00          | 	byte	0
2830a                 | LR__4440
2830a     64 65 66 65 
2830e     6E 76       | 	byte	"defenv"
28310     00          | 	byte	0
28311                 | LR__4441
28311     64 65 66 73 
28315     70 72 69 74 
28319     65          | 	byte	"defsprite"
2831a     00          | 	byte	0
2831b                 | LR__4442
2831b     64 73 2E    | 	byte	"ds."
2831e     00          | 	byte	0
2831f                 | LR__4443
2831f     64 69 6D    | 	byte	"dim"
28322     00          | 	byte	0
28323                 | LR__4444
28323     64 69 72    | 	byte	"dir"
28326     00          | 	byte	0
28327                 | LR__4445
28327     64 72 61 77 | 	byte	"draw"
2832b     00          | 	byte	0
2832c                 | LR__4446
2832c     64 72 2E    | 	byte	"dr."
2832f     00          | 	byte	0
28330                 | LR__4447
28330     65 6C 73 65 | 	byte	"else"
28334     00          | 	byte	0
28335                 | LR__4448
28335     66 63 69 72 
28339     63 6C 65    | 	byte	"fcircle"
2833c     00          | 	byte	0
2833d                 | LR__4449
2833d     66 63 2E    | 	byte	"fc."
28340     00          | 	byte	0
28341                 | LR__4450
28341     66 69 6C 6C | 	byte	"fill"
28345     00          | 	byte	0
28346                 | LR__4451
28346     66 69 2E    | 	byte	"fi."
28349     00          | 	byte	0
2834a                 | LR__4452
2834a     66 6F 6E 74 | 	byte	"font"
2834e     00          | 	byte	0
2834f                 | LR__4453
2834f     66 6F 72    | 	byte	"for"
28352     00          | 	byte	0
28353                 | LR__4454
28353     66 2E       | 	byte	"f."
28355     00          | 	byte	0
28356                 | LR__4455
28356     66 72 61 6D 
2835a     65          | 	byte	"frame"
2835b     00          | 	byte	0
2835c                 | LR__4456
2835c     66 72 2E    | 	byte	"fr."
2835f     00          | 	byte	0
28360                 | LR__4457
28360     67 6F 74 6F | 	byte	"goto"
28364     00          | 	byte	0
28365                 | LR__4458
28365     67 2E       | 	byte	"g."
28367     00          | 	byte	0
28368                 | LR__4459
28368     69 66       | 	byte	"if"
2836a     00          | 	byte	0
2836b                 | LR__4460
2836b     69 6E 6B    | 	byte	"ink"
2836e     00          | 	byte	0
2836f                 | LR__4461
2836f     69 2E       | 	byte	"i."
28371     00          | 	byte	0
28372                 | LR__4462
28372     6C 69 73 74 | 	byte	"list"
28376     00          | 	byte	0
28377                 | LR__4463
28377     6C 2E       | 	byte	"l."
28379     00          | 	byte	0
2837a                 | LR__4464
2837a     6C 6F 61 64 | 	byte	"load"
2837e     00          | 	byte	0
2837f                 | LR__4465
2837f     6C 6F 2E    | 	byte	"lo."
28382     00          | 	byte	0
28383                 | LR__4466
28383     6D 6F 64 65 | 	byte	"mode"
28387     00          | 	byte	0
28388                 | LR__4467
28388     6D 2E       | 	byte	"m."
2838a     00          | 	byte	0
2838b                 | LR__4468
2838b     6D 6F 75 73 
2838f     65          | 	byte	"mouse"
28390     00          | 	byte	0
28391                 | LR__4469
28391     6E 65 77    | 	byte	"new"
28394     00          | 	byte	0
28395                 | LR__4470
28395     6E 65 78 74 | 	byte	"next"
28399     00          | 	byte	0
2839a                 | LR__4471
2839a     6E 2E       | 	byte	"n."
2839c     00          | 	byte	0
2839d                 | LR__4472
2839d     70 61 70 65 
283a1     72          | 	byte	"paper"
283a2     00          | 	byte	0
283a3                 | LR__4473
283a3     70 2E       | 	byte	"p."
283a5     00          | 	byte	0
283a6                 | LR__4474
283a6     70 69 6E 66 
283aa     6C 6F 61 74 | 	byte	"pinfloat"
283ae     00          | 	byte	0
283af                 | LR__4475
283af     70 69 6E 68 
283b3     69          | 	byte	"pinhi"
283b4     00          | 	byte	0
283b5                 | LR__4476
283b5     70 69 6E 6C 
283b9     6F          | 	byte	"pinlo"
283ba     00          | 	byte	0
283bb                 | LR__4477
283bb     70 69 6E 73 
283bf     74 61 72 74 | 	byte	"pinstart"
283c3     00          | 	byte	0
283c4                 | LR__4478
283c4     70 69 6E 74 
283c8     6F 67 67 6C 
283cc     65          | 	byte	"pintoggle"
283cd     00          | 	byte	0
283ce                 | LR__4479
283ce     70 69 6E 77 
283d2     72 69 74 65 | 	byte	"pinwrite"
283d6     00          | 	byte	0
283d7                 | LR__4480
283d7     70 6C 61 79 | 	byte	"play"
283db     00          | 	byte	0
283dc                 | LR__4481
283dc     70 6C 6F 74 | 	byte	"plot"
283e0     00          | 	byte	0
283e1                 | LR__4482
283e1     70 6C 2E    | 	byte	"pl."
283e4     00          | 	byte	0
283e5                 | LR__4483
283e5     70 6F 73 69 
283e9     74 69 6F 6E | 	byte	"position"
283ed     00          | 	byte	0
283ee                 | LR__4484
283ee     70 6F 73 2E | 	byte	"pos."
283f2     00          | 	byte	0
283f3                 | LR__4485
283f3     70 72 69 6E 
283f7     74          | 	byte	"print"
283f8     00          | 	byte	0
283f9                 | LR__4486
283f9     3F          | 	byte	"?"
283fa     00          | 	byte	0
283fb                 | LR__4487
283fb     72 75 6E    | 	byte	"run"
283fe     00          | 	byte	0
283ff                 | LR__4488
283ff     73 61 76 65 | 	byte	"save"
28403     00          | 	byte	0
28404                 | LR__4489
28404     73 2E       | 	byte	"s."
28406     00          | 	byte	0
28407                 | LR__4490
28407     73 70 72 69 
2840b     74 65       | 	byte	"sprite"
2840d     00          | 	byte	0
2840e                 | LR__4491
2840e     73 70 2E    | 	byte	"sp."
28411     00          | 	byte	0
28412                 | LR__4492
28412     74 68 65 6E | 	byte	"then"
28416     00          | 	byte	0
28417                 | LR__4493
28417     77 61 69 74 
2841b     6D 73       | 	byte	"waitms"
2841d     00          | 	byte	0
2841e                 | LR__4494
2841e     77 61 69 74 
28422     63 6C 6F 63 
28426     6B          | 	byte	"waitclock"
28427     00          | 	byte	0
28428                 | LR__4495
28428     77 63 2E    | 	byte	"wc."
2842b     00          | 	byte	0
2842c                 | LR__4496
2842c     77 61 69 74 
28430     76 62 6C    | 	byte	"waitvbl"
28433     00          | 	byte	0
28434                 | LR__4497
28434     77 76 2E    | 	byte	"wv."
28437     00          | 	byte	0
28438                 | LR__4498
28438     77 78 70 69 
2843c     6E          | 	byte	"wxpin"
2843d     00          | 	byte	0
2843e                 | LR__4499
2843e     77 79 70 69 
28442     6E          | 	byte	"wypin"
28443     00          | 	byte	0
28444                 | LR__4500
28444     61 63 6F 73 | 	byte	"acos"
28448     00          | 	byte	0
28449                 | LR__4501
28449     61 73 69 6E | 	byte	"asin"
2844d     00          | 	byte	0
2844e                 | LR__4502
2844e     61 74 6E    | 	byte	"atn"
28451     00          | 	byte	0
28452                 | LR__4503
28452     63 6F 73    | 	byte	"cos"
28455     00          | 	byte	0
28456                 | LR__4504
28456     67 65 74 70 
2845a     69 78 65 6C | 	byte	"getpixel"
2845e     00          | 	byte	0
2845f                 | LR__4505
2845f     67 65 2E    | 	byte	"ge."
28462     00          | 	byte	0
28463                 | LR__4506
28463     67 65 74 74 
28467     69 6D 65    | 	byte	"gettime"
2846a     00          | 	byte	0
2846b                 | LR__4507
2846b     6D 6F 75 73 
2846f     65 6B       | 	byte	"mousek"
28471     00          | 	byte	0
28472                 | LR__4508
28472     6D 6F 75 73 
28476     65 77       | 	byte	"mousew"
28478     00          | 	byte	0
28479                 | LR__4509
28479     6D 6F 75 73 
2847d     65 78       | 	byte	"mousex"
2847f     00          | 	byte	0
28480                 | LR__4510
28480     6D 6F 75 73 
28484     65 79       | 	byte	"mousey"
28486     00          | 	byte	0
28487                 | LR__4511
28487     70 69 6E 72 
2848b     65 61 64    | 	byte	"pinread"
2848e     00          | 	byte	0
2848f                 | LR__4512
2848f     72 64 70 69 
28493     6E          | 	byte	"rdpin"
28494     00          | 	byte	0
28495                 | LR__4513
28495     72 71 70 69 
28499     6E          | 	byte	"rqpin"
2849a     00          | 	byte	0
2849b                 | LR__4514
2849b     72 6E 64    | 	byte	"rnd"
2849e     00          | 	byte	0
2849f                 | LR__4515
2849f     73 69 6E    | 	byte	"sin"
284a2     00          | 	byte	0
284a3                 | LR__4516
284a3     73 71 72    | 	byte	"sqr"
284a6     00          | 	byte	0
284a7                 | LR__4517
284a7     73 74 69 63 
284ab     6B          | 	byte	"stick"
284ac     00          | 	byte	0
284ad                 | LR__4518
284ad     73 74 72 69 
284b1     67          | 	byte	"strig"
284b2     00          | 	byte	0
284b3                 | LR__4519
284b3     74 61 6E    | 	byte	"tan"
284b6     00          | 	byte	0
284b7                 | LR__4520
284b7     61          | 	byte	"a"
284b8     00          | 	byte	0
284b9                 | LR__4521
284b9     7A          | 	byte	"z"
284ba     00          | 	byte	0
284bb                 | LR__4522
284bb     5F          | 	byte	"_"
284bc     00          | 	byte	0
284bd                 | LR__4523
284bd     61          | 	byte	"a"
284be     00          | 	byte	0
284bf                 | LR__4524
284bf     7A          | 	byte	"z"
284c0     00          | 	byte	0
284c1                 | LR__4525
284c1     30          | 	byte	"0"
284c2     00          | 	byte	0
284c3                 | LR__4526
284c3     39          | 	byte	"9"
284c4     00          | 	byte	0
284c5                 | LR__4527
284c5     5F          | 	byte	"_"
284c6     00          | 	byte	0
284c7                 | LR__4528
284c7     2E          | 	byte	"."
284c8     00          | 	byte	0
284c9                 | LR__4529
284c9     61          | 	byte	"a"
284ca     00          | 	byte	0
284cb                 | LR__4530
284cb     7A          | 	byte	"z"
284cc     00          | 	byte	0
284cd                 | LR__4531
284cd     30          | 	byte	"0"
284ce     00          | 	byte	0
284cf                 | LR__4532
284cf     39          | 	byte	"9"
284d0     00          | 	byte	0
284d1                 | LR__4533
284d1     5F          | 	byte	"_"
284d2     00          | 	byte	0
284d3                 | LR__4534
284d3     24          | 	byte	"$"
284d4     00          | 	byte	0
284d5                 | LR__4535
284d5     25          | 	byte	"%"
284d6     00          | 	byte	0
284d7                 | LR__4536
284d7     21          | 	byte	"!"
284d8     00          | 	byte	0
284d9                 | LR__4537
284d9     30          | 	byte	"0"
284da     00          | 	byte	0
284db                 | LR__4538
284db     39          | 	byte	"9"
284dc     00          | 	byte	0
284dd                 | LR__4539
284dd     2E          | 	byte	"."
284de     00          | 	byte	0
284df                 | LR__4540
284df     24          | 	byte	"$"
284e0     00          | 	byte	0
284e1                 | LR__4541
284e1     25          | 	byte	"%"
284e2     00          | 	byte	0
284e3                 | LR__4542
284e3     2D          | 	byte	"-"
284e4     00          | 	byte	0
284e5                 | LR__4543
284e5     2E          | 	byte	"."
284e6     00          | 	byte	0
284e7                 | LR__4544
284e7     30          | 	byte	"0"
284e8     00          | 	byte	0
284e9                 | LR__4545
284e9     39          | 	byte	"9"
284ea     00          | 	byte	0
284eb                 | LR__4546
284eb     5F          | 	byte	"_"
284ec     00          | 	byte	0
284ed                 | LR__4547
284ed     2E          | 	byte	"."
284ee     00          | 	byte	0
284ef                 | LR__4548
284ef     45          | 	byte	"E"
284f0     00          | 	byte	0
284f1                 | LR__4549
284f1     65          | 	byte	"e"
284f2     00          | 	byte	0
284f3                 | LR__4550
284f3     2D          | 	byte	"-"
284f4     00          | 	byte	0
284f5                 | LR__4551
284f5     2D          | 	byte	"-"
284f6     00          | 	byte	0
284f7                 | LR__4552
284f7     65          | 	byte	"e"
284f8     00          | 	byte	0
284f9                 | LR__4553
284f9     2E          | 	byte	"."
284fa     00          | 	byte	0
284fb                 | LR__4554
284fb     45          | 	byte	"E"
284fc     00          | 	byte	0
284fd                 | LR__4555
284fd     65          | 	byte	"e"
284fe     00          | 	byte	0
284ff                 | LR__4556
284ff     30          | 	byte	"0"
28500     00          | 	byte	0
28501                 | LR__4557
28501     39          | 	byte	"9"
28502     00          | 	byte	0
28503                 | LR__4558
28503     24          | 	byte	"$"
28504     00          | 	byte	0
28505                 | LR__4559
28505     25          | 	byte	"%"
28506     00          | 	byte	0
28507                 | LR__4560
28507     2D          | 	byte	"-"
28508     00          | 	byte	0
28509                 | LR__4561
28509     30          | 	byte	"0"
2850a     00          | 	byte	0
2850b                 | LR__4562
2850b     39          | 	byte	"9"
2850c     00          | 	byte	0
2850d                 | LR__4563
2850d     5F          | 	byte	"_"
2850e     00          | 	byte	0
2850f                 | LR__4564
2850f     30          | 	byte	"0"
28510     00          | 	byte	0
28511                 | LR__4565
28511     39          | 	byte	"9"
28512     00          | 	byte	0
28513                 | LR__4566
28513     5F          | 	byte	"_"
28514     00          | 	byte	0
28515                 | LR__4567
28515     22          | 	byte	34
28516     00          | 	byte	0
28517                 | LR__4568
28517     22          | 	byte	34
28518     00          | 	byte	0
28519                 | LR__4569
28519     28          | 	byte	"("
2851a     00          | 	byte	0
2851b                 | LR__4570
2851b     61 73       | 	byte	"as"
2851d     00          | 	byte	0
2851e                 | LR__4571
2851e     61 73       | 	byte	"as"
28520     00          | 	byte	0
28521                 | LR__4572
28521     2C          | 	byte	","
28522     00          | 	byte	0
28523                 | LR__4573
28523     29          | 	byte	")"
28524     00          | 	byte	0
28525                 | LR__4574
28525     29          | 	byte	")"
28526     00          | 	byte	0
28527                 | LR__4575
28527     61 73       | 	byte	"as"
28529     00          | 	byte	0
2852a                 | LR__4576
2852a     62 79 74 65 | 	byte	"byte"
2852e     00          | 	byte	0
2852f                 | LR__4577
2852f     75 62 79 74 
28533     65          | 	byte	"ubyte"
28534     00          | 	byte	0
28535                 | LR__4578
28535     73 68 6F 72 
28539     74          | 	byte	"short"
2853a     00          | 	byte	0
2853b                 | LR__4579
2853b     75 73 68 6F 
2853f     72 74       | 	byte	"ushort"
28541     00          | 	byte	0
28542                 | LR__4580
28542     6C 6F 6E 67 | 	byte	"long"
28546     00          | 	byte	0
28547                 | LR__4581
28547     69 6E 74 65 
2854b     67 65 72    | 	byte	"integer"
2854e     00          | 	byte	0
2854f                 | LR__4582
2854f     75 6C 6F 6E 
28553     67          | 	byte	"ulong"
28554     00          | 	byte	0
28555                 | LR__4583
28555     69 6E 74 36 
28559     34          | 	byte	"int64"
2855a     00          | 	byte	0
2855b                 | LR__4584
2855b     75 69 6E 74 
2855f     36 34       | 	byte	"uint64"
28561     00          | 	byte	0
28562                 | LR__4585
28562     73 69 6E 67 
28566     6C 65       | 	byte	"single"
28568     00          | 	byte	0
28569                 | LR__4586
28569     64 6F 75 62 
2856d     6C 65       | 	byte	"double"
2856f     00          | 	byte	0
28570                 | LR__4587
28570     73 74 72 69 
28574     6E 67       | 	byte	"string"
28576     00          | 	byte	0
28577                 | LR__4588
28577     74 6F       | 	byte	"to"
28579     00          | 	byte	0
2857a                 | LR__4589
2857a     73 74 65 70 | 	byte	"step"
2857e     00          | 	byte	0
2857f                 | LR__4590
2857f     73 74 2E    | 	byte	"st."
28582     00          | 	byte	0
28583                 | LR__4591
28583     57 65 20 68 
28587     61 76 65 20 
2858b     61 20 73 6C 
2858f     6F 77 20 67 
28593     6F 74 6F 2C 
28597     20 74 6F 64 
2859b     6F 20 20    | 	byte	"We have a slow goto, todo  "
2859e     00          | 	byte	0
2859f                 | LR__4592
2859f     6E 6F 6E 61 
285a3     6D 65 2E 62 
285a7     61 73       | 	byte	"noname.bas"
285a9     00          | 	byte	0
285aa                 | LR__4593
285aa                 | 	byte	
285aa     00          | 	byte	0
285ab                 | LR__4594
285ab     6E 6F 6E 61 
285af     6D 65 2E 62 
285b3     61 73       | 	byte	"noname.bas"
285b5     00          | 	byte	0
285b6                 | LR__4595
285b6     2F          | 	byte	"/"
285b7     00          | 	byte	0
285b8                 | LR__4596
285b8                 | 	byte	
285b8     00          | 	byte	0
285b9                 | LR__4597
285b9                 | 	byte	
285b9     00          | 	byte	0
285ba                 | LR__4598
285ba     6E 6F 6E 61 
285be     6D 65 2E 62 
285c2     61 73       | 	byte	"noname.bas"
285c4     00          | 	byte	0
285c5                 | LR__4599
285c5     2F          | 	byte	"/"
285c6     00          | 	byte	0
285c7                 | LR__4600
285c7     53 79 73 74 
285cb     65 6D 20 65 
285cf     72 72 6F 72 
285d3     20          | 	byte	"System error "
285d4     00          | 	byte	0
285d5                 | LR__4601
285d5     3A 20       | 	byte	": "
285d7     00          | 	byte	0
285d8                 | LR__4602
285d8     2F          | 	byte	"/"
285d9     00          | 	byte	0
285da                 | LR__4603
285da     30          | 	byte	"0"
285db     00          | 	byte	0
285dc                 | LR__4604
285dc     39          | 	byte	"9"
285dd     00          | 	byte	0
285de                 | LR__4605
285de                 | 	byte	
285de     00          | 	byte	0
285df                 | LR__4606
285df     53 74 6F 70 
285e3     70 65 64 20 
285e7     61 74 20 6C 
285eb     69 6E 65 20 | 	byte	"Stopped at line "
285ef     00          | 	byte	0
285f0                 | LR__4607
285f0                 | 	byte	
285f0     00          | 	byte	0
285f1                 | LR__4608
285f1                 | 	byte	
285f1     00          | 	byte	0
285f2                 | LR__4609
285f2     2F 73 64 2F 
285f6     6D 65 64 69 
285fa     61 2F 68 2F | 	byte	"/sd/media/h/"
285fe     00          | 	byte	0
285ff                 | LR__4610
285ff     53 79 73 74 
28603     65 6D 20 65 
28607     72 72 6F 72 
2860b     20          | 	byte	"System error "
2860c     00          | 	byte	0
2860d                 | LR__4611
2860d     3A 20       | 	byte	": "
2860f     00          | 	byte	0
28610                 | LR__4612
28610                 | 	byte	
28610     00          | 	byte	0
28611                 | LR__4613
28611                 | 	byte	
28611     00          | 	byte	0
28612                 | LR__4614
28612     2F 73 64 2F 
28616     6D 65 64 69 
2861a     61 2F 73 2F | 	byte	"/sd/media/s/"
2861e     00          | 	byte	0
2861f                 | LR__4615
2861f     53 79 73 74 
28623     65 6D 20 65 
28627     72 72 6F 72 
2862b     20          | 	byte	"System error "
2862c     00          | 	byte	0
2862d                 | LR__4616
2862d     3A 20       | 	byte	": "
2862f     00          | 	byte	0
28630                 | LR__4617
28630     45 72 72 6F 
28634     72 20       | 	byte	"Error "
28636     00          | 	byte	0
28637                 | LR__4618
28637     3A 20       | 	byte	": "
28639     00          | 	byte	0
2863a                 | LR__4619
2863a                 | 	byte	
2863a     00          | 	byte	0
2863b                 | LR__4620
2863b     72 6E 64 3A 
2863f     20          | 	byte	"rnd: "
28640     00          | 	byte	0
28641                 | LR__4621
28641     72 6E 64 3A 
28645     20          | 	byte	"rnd: "
28646     00          | 	byte	0
28647                 | LR__4622
28647     73 69 6E 3A 
2864b     20          | 	byte	"sin: "
2864c     00          | 	byte	0
2864d                 | LR__4623
2864d     63 6F 73 3A 
28651     20          | 	byte	"cos: "
28652     00          | 	byte	0
28653                 | LR__4624
28653     74 61 6E 3A 
28657     20          | 	byte	"tan: "
28658     00          | 	byte	0
28659                 | LR__4625
28659     61 73 69 6E 
2865d     3A 20       | 	byte	"asin: "
2865f     00          | 	byte	0
28660                 | LR__4626
28660     61 63 6F 73 
28664     3A 20       | 	byte	"acos: "
28666     00          | 	byte	0
28667                 | LR__4627
28667     61 74 6E 3A 
2866b     20          | 	byte	"atn: "
2866c     00          | 	byte	0
2866d                 | LR__4628
2866d     73 71 72 3A 
28671     20          | 	byte	"sqr: "
28672     00          | 	byte	0
28673                 | LR__4629
28673     73 74 69 63 
28677     6B 3A 20    | 	byte	"stick: "
2867a     00          | 	byte	0
2867b                 | LR__4630
2867b     73 74 72 69 
2867f     67 3A 20    | 	byte	"strig: "
28682     00          | 	byte	0
28683                 | LR__4631
28683     67 65 74 70 
28687     69 78 65 6C 
2868b     3A 20       | 	byte	"getpixel: "
2868d     00          | 	byte	0
2868e                 | LR__4632
2868e                 | 	byte	
2868e     00          | 	byte	0
2868f                 | LR__4633
2868f     2F 73 64 2F 
28693     62 61 73    | 	byte	"/sd/bas"
28696     00          | 	byte	0
28697                 | LR__4634
28697     57 6F 72 6B 
2869b     69 6E 67 20 
2869f     64 69 72 65 
286a3     63 74 6F 72 
286a7     79 3A 20    | 	byte	"Working directory: "
286aa     00          | 	byte	0
286ab                 | LR__4635
286ab     2A          | 	byte	"*"
286ac     00          | 	byte	0
286ad                 | LR__4636
286ad                 | 	byte	
286ad     00          | 	byte	0
286ae                 | LR__4637
286ae     5B 64 69 72 
286b2     5D 20       | 	byte	"[dir] "
286b4     00          | 	byte	0
286b5                 | LR__4638
286b5     2A          | 	byte	"*"
286b6     00          | 	byte	0
286b7                 | LR__4639
286b7                 | 	byte	
286b7     00          | 	byte	0
286b8                 | LR__4640
286b8     2D 2D 2D 2D 
286bc     2D 6D 6F 72 
286c0     65 2C 20 70 
286c4     72 65 73 73 
286c8     20 61 6E 79 
286cc     20 6B 65 79 | 	byte	"-----more, press any key"
286d0     00          | 	byte	0
286d1                 | LR__4641
286d1     20 20 20 20 
      ...             
286e9     20 20 20 20 
286ed     20          | 	byte	"                             "
286ee     00          | 	byte	0
286ef                 | LR__4642
286ef     2F          | 	byte	"/"
286f0     00          | 	byte	0
286f1                 | LR__4643
286f1     2F 73 64 2F 
286f5     62 69 6E 2F | 	byte	"/sd/bin/"
286f9     00          | 	byte	0
286fa                 | LR__4644
286fa     53 79 73 74 
286fe     65 6D 20 65 
28702     72 72 6F 72 
28706     20          | 	byte	"System error "
28707     00          | 	byte	0
28708                 | LR__4645
28708     3A 20       | 	byte	": "
2870a     00          | 	byte	0
2870b                 | LR__4646
2870b                 | 	byte	
2870b     00          | 	byte	0
2870c                 | LR__4647
2870c     45 78 70 65 
28710     63 74 65 64 
28714     20 6E 75 6D 
28718     62 65 72 2C 
2871c     20 67 6F 74 
28720     20 73 6F 6D 
28724     65 74 68 69 
28728     6E 67 20 65 
2872c     6C 73 65 2E | 	byte	"Expected number, got something else."
28730     00          | 	byte	0
28731                 | LR__4648
28731     43 61 6E 6E 
28735     6F 74 20 61 
28739     64 64 20 61 
2873d     20 6E 75 6D 
28741     62 65 72 20 
28745     74 6F 20 61 
28749     20 73 74 72 
2874d     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28751     00          | 	byte	0
28752                 | LR__4649
28752     43 61 6E 6E 
28756     6F 74 20 73 
2875a     75 62 73 74 
2875e     72 61 63 74 
28762     20 73 74 72 
28766     69 6E 67 73 
2876a     2E          | 	byte	"Cannot substract strings."
2876b     00          | 	byte	0
2876c                 | LR__4650
2876c     55 6E 6B 6E 
28770     6F 77 6E 20 
28774     65 72 72 6F 
28778     72 20 77 68 
2877c     69 6C 65 20 
28780     61 64 64 69 
28784     6E 67 2E    | 	byte	"Unknown error while adding."
28787     00          | 	byte	0
28788                 | LR__4651
28788     55 6E 6B 6E 
2878c     6F 77 6E 20 
28790     65 72 72 6F 
28794     72 20 77 68 
28798     69 6C 65 20 
2879c     73 75 62 73 
287a0     74 72 61 63 
287a4     74 69 6E 67 
287a8     2E          | 	byte	"Unknown error while substracting."
287a9     00          | 	byte	0
287aa                 | LR__4652
287aa     43 61 6E 6E 
287ae     6F 74 20 64 
287b2     6F 20 6C 6F 
287b6     67 69 63 20 
287ba     6F 70 65 72 
287be     61 74 69 6F 
287c2     6E 20 6F 6E 
287c6     20 73 74 72 
287ca     69 6E 67 20 
287ce     6F 72 20 66 
287d2     6C 6F 61 74 
287d6     2E          | 	byte	"Cannot do logic operation on string or float."
287d7     00          | 	byte	0
287d8                 | LR__4653
287d8     55 6E 6B 6E 
287dc     6F 77 6E 20 
287e0     65 72 72 6F 
287e4     72 20 77 68 
287e8     69 6C 65 20 
287ec     64 6F 69 6E 
287f0     67 20 6C 6F 
287f4     67 69 63 20 
287f8     6F 70 65 72 
287fc     61 74 69 6F 
28800     6E 2E       | 	byte	"Unknown error while doing logic operation."
28802     00          | 	byte	0
28803                 | LR__4654
28803     43 61 6E 6E 
28807     6F 74 20 6D 
2880b     75 6C 74 69 
2880f     70 6C 79 20 
28813     73 74 72 69 
28817     6E 67 73 2E | 	byte	"Cannot multiply strings."
2881b     00          | 	byte	0
2881c                 | LR__4655
2881c     55 6E 6B 6E 
28820     6F 77 6E 20 
28824     65 72 72 6F 
28828     72 20 77 68 
2882c     69 6C 65 20 
28830     6D 75 6C 74 
28834     69 70 6C 79 
28838     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2883c     00          | 	byte	0
2883d                 | LR__4656
2883d     43 61 6E 6E 
28841     6F 74 20 64 
28845     69 76 69 64 
28849     65 20 73 74 
2884d     72 69 6E 67 
28851     73 2E       | 	byte	"Cannot divide strings."
28853     00          | 	byte	0
28854                 | LR__4657
28854     55 6E 6B 6E 
28858     6F 77 6E 20 
2885c     65 72 72 6F 
28860     72 20 77 68 
28864     69 6C 65 20 
28868     64 69 76 69 
2886c     64 69 6E 67 
28870     2E          | 	byte	"Unknown error while dividing."
28871     00          | 	byte	0
28872                 | LR__4658
28872     43 61 6E 6E 
28876     6F 74 20 63 
2887a     6F 6D 70 75 
2887e     74 65 20 61 
28882     20 70 6F 77 
28886     65 72 20 6F 
2888a     66 20 61 20 
2888e     73 74 72 69 
28892     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28895     00          | 	byte	0
28896                 | LR__4659
28896     55 6E 6B 6E 
2889a     6F 77 6E 20 
2889e     65 72 72 6F 
288a2     72 20 77 68 
288a6     69 6C 65 20 
288aa     63 6F 6D 70 
288ae     75 74 69 6E 
288b2     67 20 61 20 
288b6     70 6F 77 65 
288ba     72 2E       | 	byte	"Unknown error while computing a power."
288bc     00          | 	byte	0
288bd                 | LR__4660
288bd     52 69 67 68 
288c1     74 20 70 61 
288c5     72 65 6E 74 
288c9     68 65 73 69 
288cd     73 20 65 78 
288d1     70 65 63 74 
288d5     65 64 2E    | 	byte	"Right parenthesis expected."
288d8     00          | 	byte	0
288d9                 | LR__4661
288d9     45 78 70 65 
288dd     63 74 65 64 
288e1     20 73 74 72 
288e5     69 6E 67 2E | 	byte	"Expected string."
288e9     00          | 	byte	0
288ea                 | LR__4662
288ea     45 78 70 65 
288ee     63 74 65 64 
288f2     20 66 6C 6F 
288f6     61 74 2E    | 	byte	"Expected float."
288f9     00          | 	byte	0
288fa                 | LR__4663
288fa     45 78 70 65 
288fe     63 74 65 64 
28902     20 75 6E 73 
28906     69 67 6E 65 
2890a     64 20 69 6E 
2890e     74 65 67 65 
28912     72 2E       | 	byte	"Expected unsigned integer."
28914     00          | 	byte	0
28915                 | LR__4664
28915     45 78 70 65 
28919     63 74 65 64 
2891d     20 69 6E 74 
28921     65 67 65 72 
28925     2E          | 	byte	"Expected integer."
28926     00          | 	byte	0
28927                 | LR__4665
28927     4E 6F 20 6D 
2892b     6F 72 65 20 
2892f     76 61 72 69 
28933     61 62 6C 65 
28937     20 73 6C 6F 
2893b     74 73 2E    | 	byte	"No more variable slots."
2893e     00          | 	byte	0
2893f                 | LR__4666
2893f     56 61 72 69 
28943     61 62 6C 65 
28947     20 6E 6F 74 
2894b     20 66 6F 75 
2894f     6E 64 2E    | 	byte	"Variable not found."
28952     00          | 	byte	0
28953                 | LR__4667
28953     43 6F 6D 6D 
28957     61 20 65 78 
2895b     70 65 63 74 
2895f     65 64 2E    | 	byte	"Comma expected."
28962     00          | 	byte	0
28963                 | LR__4668
28963     43 6F 6D 6D 
28967     61 20 6F 72 
2896b     20 73 65 6D 
2896f     69 63 6F 6C 
28973     6F 6E 20 65 
28977     78 70 65 63 
2897b     74 65 64 2E | 	byte	"Comma or semicolon expected."
2897f     00          | 	byte	0
28980                 | LR__4669
28980     55 6E 6B 6E 
28984     6F 77 6E 20 
28988     63 6F 6D 6D 
2898c     61 6E 64 2E | 	byte	"Unknown command."
28990     00          | 	byte	0
28991                 | LR__4670
28991     53 74 61 63 
28995     6B 20 75 6E 
28999     64 65 72 66 
2899d     6C 6F 77 2E | 	byte	"Stack underflow."
289a1     00          | 	byte	0
289a2                 | LR__4671
289a2     43 61 6E 6E 
289a6     6F 74 20 65 
289aa     78 65 63 75 
289ae     74 65 20 67 
289b2     6F 74 6F 20 
289b6     69 6E 20 74 
289ba     68 65 20 69 
289be     6D 6D 65 64 
289c2     69 61 74 65 
289c6     20 6D 6F 64 
289ca     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
289cc     00          | 	byte	0
289cd                 | LR__4672
289cd     43 61 6E 6E 
289d1     6F 74 20 6C 
289d5     6F 61 64 20 
289d9     66 72 6F 6D 
289dd     20 74 68 69 
289e1     73 20 66 69 
289e5     6C 65 2E    | 	byte	"Cannot load from this file."
289e8     00          | 	byte	0
289e9                 | LR__4673
289e9     54 68 65 20 
289ed     70 72 6F 67 
289f1     72 61 6D 20 
289f5     69 73 20 65 
289f9     6D 70 74 79 
289fd     2E          | 	byte	"The program is empty."
289fe     00          | 	byte	0
289ff                 | LR__4674
289ff     49 66 20 61 
28a03     66 74 65 72 
28a07     20 69 66 2E | 	byte	"If after if."
28a0b     00          | 	byte	0
28a0c                 | LR__4675
28a0c     45 6D 70 74 
28a10     79 20 65 78 
28a14     70 72 65 73 
28a18     73 69 6F 6E 
28a1c     2E          | 	byte	"Empty expression."
28a1d     00          | 	byte	0
28a1e                 | LR__4676
28a1e     53 74 72 69 
28a22     6E 67 20 65 
28a26     78 70 65 63 
28a2a     74 65 64 2E | 	byte	"String expected."
28a2e     00          | 	byte	0
28a2f                 | LR__4677
28a2f     49 6E 74 65 
28a33     72 70 72 65 
28a37     74 65 72 20 
28a3b     69 6E 74 65 
28a3f     72 6E 61 6C 
28a43     20 65 72 72 
28a47     6F 72 2E    | 	byte	"Interpreter internal error."
28a4a     00          | 	byte	0
28a4b                 | LR__4678
28a4b     45 78 70 65 
28a4f     63 74 65 64 
28a53     20 61 73 73 
28a57     69 67 6E 2E | 	byte	"Expected assign."
28a5b     00          | 	byte	0
28a5c                 | LR__4679
28a5c     45 78 70 65 
28a60     63 74 65 64 
28a64     20 27 74 6F 
28a68     27 2E       | 	byte	"Expected 'to'."
28a6a     00          | 	byte	0
28a6b                 | LR__4680
28a6b     45 78 70 65 
28a6f     63 74 65 64 
28a73     20 69 6E 74 
28a77     65 67 65 72 
28a7b     20 76 61 72 
28a7f     69 61 62 6C 
28a83     65 2E       | 	byte	"Expected integer variable."
28a85     00          | 	byte	0
28a86                 | LR__4681
28a86     55 6E 69 6E 
28a8a     69 74 69 61 
28a8e     6C 69 7A 65 
28a92     64 20 76 61 
28a96     72 69 61 62 
28a9a     6C 65 20 69 
28a9e     6E 20 27 6E 
28aa2     65 78 74 27 
28aa6     2C 20 75 73 
28aaa     65 20 27 66 
28aae     6F 72 27 20 
28ab2     62 65 66 6F 
28ab6     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
28ab9     00          | 	byte	0
28aba                 | LR__4682
28aba     4E 6F 20 6D 
28abe     6F 72 65 20 
28ac2     73 6C 6F 74 
28ac6     73 20 66 6F 
28aca     72 20 27 66 
28ace     6F 72 27 2E | 	byte	"No more slots for 'for'."
28ad2     00          | 	byte	0
28ad3                 | LR__4683
28ad3     27 4E 65 78 
28ad7     74 27 20 64 
28adb     6F 65 73 6E 
28adf     27 74 20 6D 
28ae3     61 74 63 68 
28ae7     20 27 66 6F 
28aeb     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
28aee     00          | 	byte	0
28aef                 | LR__4684
28aef     27 47 6F 74 
28af3     6F 27 20 74 
28af7     61 72 67 65 
28afb     74 20 6C 69 
28aff     6E 65 20 6E 
28b03     6F 74 20 66 
28b07     6F 75 6E 64 
28b0b     2E          | 	byte	"'Goto' target line not found."
28b0c     00          | 	byte	0
28b0d                 | LR__4685
28b0d     42 61 64 20 
28b11     6E 75 6D 62 
28b15     65 72 20 6F 
28b19     66 20 70 61 
28b1d     72 61 6D 65 
28b21     74 65 72 73 | 	byte	"Bad number of parameters"
28b25     00          | 	byte	0
28b26                 | LR__4686
28b26     46 75 6E 63 
28b2a     74 69 6F 6E 
28b2e     20 75 6E 64 
28b32     65 66 69 6E 
28b36     65 64 20 66 
28b3a     6F 72 20 73 
28b3e     74 72 69 6E 
28b42     67 73       | 	byte	"Function undefined for strings"
28b44     00          | 	byte	0
28b45                 | LR__4687
28b45     42 61 64 20 
28b49     70 61 72 61 
28b4d     6D 65 74 65 
28b51     72 2E       | 	byte	"Bad parameter."
28b53     00          | 	byte	0
28b54                 | LR__4688
28b54     43 61 6E 6E 
28b58     6F 74 20 64 
28b5c     65 63 6C 61 
28b60     72 65 20 61 
28b64     6E 20 61 72 
28b68     72 61 79 3A 
28b6c     20 74 68 65 
28b70     20 76 61 72 
28b74     69 61 62 6C 
28b78     65 20 65 78 
28b7c     69 73 74 73 
28b80     2E          | 	byte	"Cannot declare an array: the variable exists."
28b81     00          | 	byte	0
28b82                 | LR__4689
28b82     45 78 70 65 
28b86     63 74 65 64 
28b8a     20 27 28 27 
28b8e     2E          | 	byte	"Expected '('."
28b8f     00          | 	byte	0
28b90                 | LR__4690
28b90     45 78 70 65 
28b94     63 74 65 64 
28b98     20 27 29 27 
28b9c     20 6F 72 20 
28ba0     27 2C 27 2E | 	byte	"Expected ')' or ','."
28ba4     00          | 	byte	0
28ba5                 | LR__4691
28ba5     4E 6F 20 6D 
28ba9     6F 72 65 20 
28bad     74 68 61 6E 
28bb1     20 33 20 64 
28bb5     69 6D 65 6E 
28bb9     73 69 6F 6E 
28bbd     73 20 73 75 
28bc1     70 70 6F 72 
28bc5     74 65 64    | 	byte	"No more than 3 dimensions supported"
28bc8     00          | 	byte	0
28bc9                 | LR__4692
28bc9     56 61 72 69 
28bcd     61 62 6C 65 
28bd1     20 6E 61 6D 
28bd5     65 20 65 78 
28bd9     70 65 63 74 
28bdd     65 64       | 	byte	"Variable name expected"
28bdf     00          | 	byte	0
28be0                 | LR__4693
28be0     54 79 70 65 
28be4     20 6E 61 6D 
28be8     65 20 65 78 
28bec     70 65 63 74 
28bf0     65 64       | 	byte	"Type name expected"
28bf2     00          | 	byte	0
28bf3                 | LR__4694
28bf3     54 79 70 65 
28bf7     20 6E 6F 74 
28bfb     20 73 75 70 
28bff     70 6F 72 74 
28c03     65 64 20 79 
28c07     65 74       | 	byte	"Type not supported yet"
28c09     00          | 	byte	0
28c0a                 | LR__4695
28c0a     45 72 72 6F 
28c0e     72 20       | 	byte	"Error "
28c10     00          | 	byte	0
28c11                 | LR__4696
28c11     3A 20       | 	byte	": "
28c13     00          | 	byte	0
28c14                 | LR__4697
28c14     2F 73 64    | 	byte	"/sd"
28c17     00          | 	byte	0
28c18                 | LR__4698
28c18     2F 73 64 2F 
28c1c     62 61 73    | 	byte	"/sd/bas"
28c1f     00          | 	byte	0
28c20                 | LR__4699
28c20     2F 73 64 2F 
28c24     62 61 73    | 	byte	"/sd/bas"
28c27     00          | 	byte	0
28c28                 | LR__4700
28c28     20 42 41 53 
28c2c     49 43 20 62 
28c30     79 74 65 73 
28c34     20 66 72 65 
28c38     65          | 	byte	" BASIC bytes free"
28c39     00          | 	byte	0
28c3a                 | LR__4701
28c3a     52 65 61 64 
28c3e     79          | 	byte	"Ready"
28c3f     00          | 	byte	0
28c40                 | LR__4702
28c40     20          | 	byte	" "
28c41     00          | 	byte	0
28c42                 | LR__4703
28c42     20          | 	byte	" "
28c43     00          | 	byte	0
28c44                 | LR__4704
28c44                 | 	byte	
28c44     00          | 	byte	0
28c45                 | LR__4705
28c45                 | 	byte	
28c45     00          | 	byte	0
28c46     00 00       | 	alignl
28c48                 | _dat_
28c48     00 00 00 00 
28c4c     00 00 00 00 
28c50     00 00 00 00 
28c54     00 00 00 00 | 	byte	$00[16]
28c58     61 41 17 0E 
28c5c     62 42 00 00 
28c60     63 43 19 10 
28c64     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
28c68     65 45 18 0F 
28c6c     66 46 00 00 
28c70     67 47 00 00 
28c74     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
28c78     69 49 00 00 
28c7c     6A 4A 00 00 
28c80     6B 4B 00 00 
28c84     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
28c88     6D 4D 00 00 
28c8c     6E 4E 1A 11 
28c90     6F 4F 1E 15 
28c94     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
28c98     71 51 00 00 
28c9c     72 52 00 00 
28ca0     73 53 1B 12 
28ca4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
28ca8     75 55 00 00 
28cac     76 56 00 00 
28cb0     77 57 00 00 
28cb4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
28cb8     79 59 00 00 
28cbc     7A 5A 1D 14 
28cc0     31 21 04 00 
28cc4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
28cc8     33 23 06 00 
28ccc     34 24 07 00 
28cd0     35 25 08 00 
28cd4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
28cd8     37 26 0A 00 
28cdc     38 2A 0B 00 
28ce0     39 28 0C 00 
28ce4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
28ce8     8D 8D 00 00 
28cec     9B 9B 00 00 
28cf0     88 88 00 00 
28cf4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
28cf8     20 20 00 00 
28cfc     2D 5F 00 00 
28d00     3D 2B 00 00 
28d04     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
28d08     5D 7D 00 00 
28d0c     5C 7C 00 00 
28d10     23 7E 00 00 
28d14     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
28d18     27 22 00 00 
28d1c     60 7E 03 00 
28d20     2C 3C 00 00 
28d24     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
28d28     2F 3F 00 00 
28d2c     B9 B9 00 00 
28d30     BA 00 00 00 
28d34     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
28d38     BC 00 00 00 
28d3c     BD 00 00 00 
28d40     BE 00 00 00 
28d44     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
28d48     C0 00 00 00 
28d4c     C1 00 00 00 
28d50     C2 00 00 00 
28d54     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
28d58     C4 00 00 00 
28d5c     C5 00 00 00 
28d60     C6 00 00 00 
28d64     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
28d68     C8 00 00 00 
28d6c     C9 00 00 00 
28d70     CA 00 00 00 
28d74     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
28d78     7F 7F 00 00 
28d7c     CC 00 00 00 
28d80     CD 00 00 00 
28d84     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
28d88     CF 00 00 00 
28d8c     D0 00 00 00 
28d90     D1 00 00 00 
28d94     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
28d98     2F 2F 00 00 
28d9c     2A 2A 00 00 
28da0     2D 2D 00 00 
28da4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
28da8     8D 8D 00 00 
28dac     31 31 00 00 
28db0     32 32 00 00 
28db4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
28db8     34 34 00 00 
28dbc     35 35 00 00 
28dc0     36 36 00 00 
28dc4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
28dc8     38 38 00 00 
28dcc     39 39 00 00 
28dd0     30 30 00 00 
28dd4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
28dd8     5C 7C 00 00 
28ddc     00 00 00 00 
28de0     00 00 00 00 
28de4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
28de8     00 00 00 00 
      ...             
28e40     00 00 00 00 
28e44     00 00 00 00 | 	byte	$00[96]
28e48     2B 00 A6 F2 
28e4c     24 A7 09 80 
28e50     5B 88 4D 89 
28e54     80 88 A5 88 | atari_spl file "atari.spl"
28e58     6D 88 B8 88 
28e5c     80 88 CB 88 
28e60     92 88 A5 88 
28e64     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
28e68     A5 88 CA 88 
28e6c     A6 88 DD 88 
28e70     B8 88 AB 89 
28e74     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
28e78     C8 AD C6 F1 
28e7c     91 06 B6 FF 
28e80     13 00 4A 00 
28e84     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
28e88     5D 00 5E 00 
28e8c     5D 00 5E 00 
28e90     5E 00 5D 00 
28e94     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
28e98     38 00 83 00 
28e9c     25 00 83 00 
28ea0     C3 FE D1 04 
28ea4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
28ea8     48 88 38 85 
28eac     41 8A CB 88 
28eb0     28 89 B8 88 
28eb4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
28eb8     15 89 03 89 
28ebc     02 89 15 89 
28ec0     16 89 15 89 
28ec4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
28ec8     15 89 3A 89 
28ecc     72 89 E3 89 
28ed0     52 83 AD 97 
28ed4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
28ed8     0C 02 B6 FF 
28edc     E1 00 A8 00 
28ee0     F3 00 A8 00 
28ee4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
28ee8     CE 00 CD 00 
28eec     CD 00 BA 00 
28ef0     E1 00 BB 00 
28ef4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
28ef8     DF 00 C9 FF 
28efc     E6 01 B6 06 
28f00     EE DD 8D 98 
28f04     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
28f08     97 89 73 89 
28f0c     3B 89 60 89 
28f10     60 89 60 89 
28f14     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
28f18     73 89 72 89 
28f1c     85 89 73 89 
28f20     AA 89 60 89 
28f24     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
28f28     E8 8A 18 86 
28f2c     92 88 A5 C2 
28f30     E0 00 C3 05 
28f34     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
28f38     F2 00 64 01 
28f3c     06 01 3E 01 
28f40     2B 01 2B 01 
28f44     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
28f48     2B 01 2A 01 
28f4c     2B 01 2B 01 
28f50     2B 01 18 01 
28f54     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
28f58     39 07 61 F3 
28f5c     C0 AF 37 85 
28f60     0F 88 8B 8A 
28f64     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
28f68     AB 89 D0 89 
28f6c     AB 89 D0 89 
28f70     D0 89 CF 89 
28f74     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
28f78     D0 89 F5 89 
28f7c     BD 89 08 8A 
28f80     CF 89 E8 8A 
28f84     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
28f88     53 B3 0D F8 
28f8c     F4 07 38 00 
28f90     63 01 63 01 
28f94     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
28f98     88 01 88 01 
28f9c     76 01 88 01 
28fa0     88 01 89 01 
28fa4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
28fa8     75 01 AE 01 
28fac     76 01 88 01 
28fb0     4A 00 46 06 
28fb4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
28fb8     08 8A 9A 86 
28fbc     33 8B 08 8A 
28fc0     2D 8A F5 89 
28fc4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
28fc8     2D 8A 2D 8A 
28fcc     2E 8A 1B 8A 
28fd0     40 8A 2D 8A 
28fd4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
28fd8     2E 8A 79 8A 
28fdc     66 8A C8 8B 
28fe0     72 82 2B 97 
28fe4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
28fe8     1D 02 05 01 
28fec     F8 01 C0 01 
28ff0     0B 02 C0 01 
28ff4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
28ff8     F9 01 D3 01 
28ffc     F8 01 D3 01 
29000     F8 01 D2 01 
29004     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
29008     E6 01 2B 01 
2900c     8E 02 5F 07 
29010     F7 E2 ED 9C 
29014     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
29018     E8 8A 78 8A 
2901c     78 8A 65 8A 
29020     8B 8A 78 8A 
29024     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
29028     8B 8A 9D 8A 
2902c     9D 8A 8B 8A 
29030     C2 8A 78 8A 
29034     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
29038     70 8C 18 86 
2903c     8B 8A 23 C9 
29040     CB 03 C4 05 
29044     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
29048     0B 02 7B 02 
2904c     1E 02 55 02 
29050     30 02 43 02 
29054     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
29058     43 02 44 02 
2905c     43 02 30 02 
29060     68 02 31 02 
29064     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
29068     07 08 3F F7 
2906c     73 B2 13 85 
29070     15 89 ED 8B 
29074     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
29078     B0 8A FB 8A 
2907c     D5 8A FA 8A 
29080     E8 8A FB 8A 
29084     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
29088     E8 8A 21 8B 
2908c     E7 8A 33 8B 
29090     E8 8A 26 8C 
29094     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
29098     8D B0 27 F6 
2909c     9C 08 AD 01 
290a0     7B 02 8D 02 
290a4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
290a8     A1 02 A0 02 
290ac     A1 02 A0 02 
290b0     A0 02 A0 02 
290b4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
290b8     7B 02 D8 02 
290bc     7B 02 C6 02 
290c0     3E 01 C3 05 
290c4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
290c8     00 8C 2A 86 
290cc     E0 8C FA 8A 
290d0     6A 8B FB 8A 
290d4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
290d8     45 8B 45 8B 
290dc     45 8B 6B 8B 
290e0     46 8B 59 8B 
290e4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
290e8     6B 8B 6B 8B 
290ec     6B 8B 6B 8B 
290f0     7D 8B 7D 8B 
290f4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
290f8     90 8B 91 8B 
290fc     90 8B 90 8B 
29100     A3 8B A3 8B 
29104     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
29108     B5 8B B6 8B 
2910c     B5 8B B5 8B 
29110     B6 8B C8 8B 
29114     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
29118     C8 8B DA 8B 
2911c     DB 8B DB 8B 
29120     DB 8B DC 8B 
29124     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
29128     EE 8B EE 8B 
2912c     00 8C 01 8C 
29130     00 8C 01 8C 
29134     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
29138     12 8C 13 8C 
2913c     13 8C 26 8C 
29140     26 8C 26 8C 
29144     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
29148     38 8C 38 8C 
2914c     38 8C 38 8C 
29150     4B 8C 4B 8C 
29154     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
29158     5E 8C 5E 8C 
2915c     5E 8C 5E 8C 
29160     70 8C 70 8C 
29164     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
29168     70 8C 83 8C 
2916c     83 8C 83 8C 
29170     83 8C 96 8C 
29174     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
29178     95 8C A9 8C 
2917c     A9 8C A8 8C 
29180     A8 8C A8 8C 
29184     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
29188     BB 8C BB 8C 
2918c     BB 8C CE 8C 
29190     CE 8C CE 8C 
29194     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
29198     E0 8C E1 8C 
2919c     E1 8C E0 8C 
291a0     F4 8C F2 8C 
291a4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
291a8     05 8D 05 8D 
291ac     06 8D 06 8D 
291b0     19 8D 19 8D 
291b4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
291b8     18 8D 2B 8D 
291bc     2B 8D 2B 8D 
291c0     2A 8D 3E 8D 
291c4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
291c8     3E 8D 51 8D 
291cc     50 8D 50 8D 
291d0     50 8D 51 8D 
291d4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
291d8     63 8D 64 8D 
291dc     76 8D 75 8D 
291e0     75 8D 76 8D 
291e4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
291e8     88 8D 88 8D 
291ec     89 8D 9B 8D 
291f0     9A 8D 9B 8D 
291f4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
291f8     AD 8D AE 8D 
291fc     AD 8D AE 8D 
29200     C1 8D C1 8D 
29204     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
29208     D3 8D D3 8D 
2920c     D3 8D D3 8D 
29210     D3 8D E6 8D 
29214     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
29218     E6 8D E6 8D 
2921c     F9 8D F9 8D 
29220     F9 8D F8 8D 
29224     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
29228     0B 8E 0B 8E 
2922c     1D 8E 1D 8E 
29230     1E 8E 1E 8E 
29234     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
29238     31 8E 31 8E 
2923c     31 8E 42 8E 
29240     43 8E 43 8E 
29244     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
29248     56 8E 56 8E 
2924c     55 8E 56 8E 
29250     68 8E 69 8E 
29254     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
29258     69 8E 7B 8E 
2925c     7C 8E 7B 8E 
29260     7B 8E 8D 8E 
29264     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
29268     8D 8E A1 8E 
2926c     A0 8E A1 8E 
29270     A1 8E A0 8E 
29274     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
29278     B3 8E B3 8E 
2927c     C6 8E C5 8E 
29280     C6 8E C6 8E 
29284     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
29288     D8 8E D9 8E 
2928c     D8 8E EC 8E 
29290     EB 8E EC 8E 
29294     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
29298     FE 8E FE 8E 
2929c     FE 8E FE 8E 
292a0     10 8F 10 8F 
292a4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
292a8     11 8F 23 8F 
292ac     24 8F 23 8F 
292b0     24 8F 37 8F 
292b4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
292b8     36 8F 36 8F 
292bc     48 8F 49 8F 
292c0     49 8F 49 8F 
292c4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
292c8     5B 8F 5C 8F 
292cc     5B 8F 6E 8F 
292d0     6E 8F 6E 8F 
292d4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
292d8     81 8F 81 8F 
292dc     81 8F 81 8F 
292e0     93 8F 93 8F 
292e4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
292e8     93 8F A6 8F 
292ec     A6 8F A6 8F 
292f0     A6 8F B9 8F 
292f4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
292f8     B9 8F B9 8F 
292fc     CC 8F CB 8F 
29300     CB 8F CC 8F 
29304     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
29308     DF 8F DE 8F 
2930c     DE 8F F1 8F 
29310     F1 8F F1 8F 
29314     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
29318     03 90 04 90 
2931c     04 90 04 90 
29320     16 90 17 90 
29324     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
29328     29 90 28 90 
2932c     29 90 28 90 
29330     29 90 3C 90 
29334     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
29338     3C 90 4F 90 
2933c     4E 90 4E 90 
29340     4E 90 4E 90 
29344     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
29348     61 90 61 90 
2934c     73 90 74 90 
29350     74 90 74 90 
29354     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
29358     87 90 86 90 
2935c     87 90 86 90 
29360     99 90 99 90 
29364     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
29368     AB 90 AB 90 
2936c     AC 90 AB 90 
29370     AB 90 BF 90 
29374     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
29378     BE 90 D1 90 
2937c     D0 90 D1 90 
29380     D1 90 D1 90 
29384     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
29388     E3 90 E4 90 
2938c     F6 90 F6 90 
29390     F6 90 F6 90 
29394     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
29398     09 91 0A 91 
2939c     0A 91 1C 91 
293a0     1C 91 1C 91 
293a4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
293a8     2F 91 2E 91 
293ac     2F 91 2F 91 
293b0     2E 91 41 91 
293b4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
293b8     41 91 53 91 
293bc     54 91 54 91 
293c0     53 91 54 91 
293c4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
293c8     67 91 67 91 
293cc     79 91 7A 91 
293d0     79 91 78 91 
293d4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
293d8     8C 91 8B 91 
293dc     8C 91 8C 91 
293e0     9E 91 9E 91 
293e4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
293e8     B1 91 B1 91 
293ec     B2 91 B1 91 
293f0     B1 91 C4 91 
293f4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
293f8     C4 91 D6 91 
293fc     D7 91 D7 91 
29400     D7 91 D6 91 
29404     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
29408     EA 91 EA 91 
2940c     EA 91 FC 91 
29410     FC 91 FB 91 
29414     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
29418     0E 92 0F 92 
2941c     0F 92 0E 92 
29420     21 92 21 92 
29424     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
29428     21 92 34 92 
2942c     33 92 34 92 
29430     34 92 47 92 
29434     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
29438     46 92 47 92 
2943c     59 92 59 92 
29440     59 92 59 92 
29444     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
29448     6C 92 6C 92 
2944c     6B 92 7E 92 
29450     7E 92 7E 92 
29454     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
29458     92 92 91 92 
2945c     91 92 90 92 
29460     91 92 A4 92 
29464     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
29468     A3 92 B6 92 
2946c     B6 92 B7 92 
29470     B7 92 B6 92 
29474     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
29478     CA 92 C9 92 
2947c     CA 92 DC 92 
29480     DC 92 DC 92 
29484     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
29488     EF 92 EF 92 
2948c     EF 92 EF 92 
29490     01 93 01 93 
29494     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
29498     15 93 14 93 
2949c     14 93 14 93 
294a0     14 93 27 93 
294a4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
294a8     27 93 39 93 
294ac     3A 93 39 93 
294b0     39 93 39 93 
294b4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
294b8     4B 93 4C 93 
294bc     5F 93 5F 93 
294c0     5F 93 5E 93 
294c4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
294c8     5F 93 84 93 
294cc     4C 93 96 93 
294d0     5F 93 AE 94 
294d4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
294d8     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
294dc     7A D7 00 80 
294e0     87 8A 48 8F 
294e4     EC 8C 76 8D 
294e8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
294ec     3C 8D 82 8D 
294f0     42 8D 88 8D 
294f4     8C 8D 8E 8D 
294f8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
294fc     97 8D DE 8D 
29500     E1 8D F1 8E 
29504     D8 8C A3 83 
29508     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2950c     65 71 C9 65 
29510     FC 64 C4 65 
29514     C1 65 BF 65 
29518     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2951c     B6 65 B4 65 
29520     B2 65 AE 65 
29524     AC 65 ED 65 
29528     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2952c     5E 65 25 66 
29530     FA 62 23 6B 
29534     B5 6C 61 0A 
29538     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2953c     5D 90 BE 8D 
29540     47 8E C3 8D 
29544     09 8E C9 8D 
29548     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2954c     15 8E 19 8E 
29550     1B 8E 62 8E 
29554     64 8E 68 8E 
29558     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2955c     B5 8E 4C 90 
29560     FA 84 3C 9D 
29564     98 13 79 6D 
29568     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2956c     D9 66 50 66 
29570     D4 66 4B 66 
29574     8C 66 46 66 
29578     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2957c     81 66 3A 66 
29580     7C 66 36 66 
29584     76 66 30 66 
29588     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2958c     6B 66 88 72 
29590     BF 37 E7 B7 
29594     75 83 8B 8E 
29598     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2959c     94 8E 96 8E 
295a0     DD 8E 9C 8E 
295a4     E2 8E A2 8E 
295a8     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
295ac     EE 8E AE 8E 
295b0     38 8F B5 8E 
295b4     3F 8F FD 8E 
295b8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
295bc     A5 87 1E E3 
295c0     6D 5D FA 71 
295c4     41 64 25 67 
295c8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
295cc     D9 66 1A 67 
295d0     18 67 15 67 
295d4     12 67 0F 67 
295d8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
295dc     07 67 C0 66 
295e0     01 67 BC 66 
295e4     B8 66 DE 64 
295e8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
295ec     43 E5 1F 8B 
295f0     14 8A F1 90 
295f4     1C 8F 63 8F 
295f8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
295fc     29 8F 6E 8F 
29600     72 8F 75 8F 
29604     34 8F BE 8F 
29608     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2960c     84 8F 87 8F 
29610     CC 8F 56 90 
29614     67 91 49 80 
29618     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2961c     46 77 A6 66 
29620     E8 66 B0 67 
29624     AD 67 ED 67 
29628     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2962c     A2 67 E3 67 
29630     9D 67 9A 67 
29634     98 67 94 67 
29638     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2963c     49 67 CD 67 
29640     28 65 5F 6E 
29644     82 67 3A 01 
29648     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2964c     C2 91 A9 8F 
29650     EF 8F AE 8F 
29654     F4 8F B5 8F 
29658     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2965c     01 90 03 90 
29660     07 90 09 90 
29664     0C 90 53 90 
29668     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2966c     18 90 44 93 
29670     85 84 D6 9D 
29674     87 1F 2F 75 
29678     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2967c     C4 68 F6 67 
29680     BE 68 F1 67 
29684     76 68 2E 68 
29688     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2968c     27 68 24 68 
29690     64 68 1E 68 
29694     5F 68 19 68 
29698     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2969c     DC 68 56 72 
296a0     7E 36 C2 B8 
296a4     D7 84 73 90 
296a8     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
296ac     7B 90 7F 90 
296b0     82 90 84 90 
296b4     CB 90 8B 90 
296b8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
296bc     D7 90 96 90 
296c0     20 91 59 90 
296c4     25 91 A2 90 
296c8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
296cc     D0 89 40 EE 
296d0     12 64 C4 71 
296d4     29 66 0C 69 
296d8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
296dc     C0 68 02 69 
296e0     FE 68 FB 68 
296e4     F9 68 F6 68 
296e8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
296ec     EE 68 A8 68 
296f0     2C 69 5F 68 
296f4     E2 68 81 66 
296f8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
296fc     1E EB A6 8A 
29700     73 8B 5E 93 
29704     7B 90 48 91 
29708     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2970c     0D 91 11 91 
29710     14 91 16 91 
29714     5C 91 1C 91 
29718     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2971c     68 91 AF 91 
29720     2A 91 B5 91 
29724     75 91 1A 94 
29728     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2972c     70 0E CB 6C 
29730     5D 6E C4 67 
29734     99 69 54 69 
29738     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2973c     D2 69 49 69 
29740     89 69 86 69 
29744     40 69 C4 69 
29748     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2974c     35 69 76 69 
29750     58 67 EB 6D 
29754     E9 6D 89 0F 
29758     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2975c     33 94 94 91 
29760     D9 91 56 91 
29764     E0 91 9F 91 
29768     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2976c     EC 91 EE 91 
29770     F1 91 F4 91 
29774     F7 91 3D 92 
29778     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2977c     46 92 21 94 
29780     11 89 A4 9D 
29784     FD 0E 8F 6C 
29788     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2978c     28 6A E1 69 
29790     65 6A 1F 6A 
29794     5F 6A 1A 6A 
29798     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2979c     54 6A 0F 6A 
297a0     4F 6A 09 6A 
297a4     06 6A 03 6A 
297a8     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
297ac     23 68 69 77 
297b0     3A 4D 38 CA 
297b4     38 86 4E 91 
297b8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
297bc     64 92 24 92 
297c0     6A 92 2A 92 
297c4     70 92 30 92 
297c8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
297cc     7B 92 7E 92 
297d0     C5 92 84 92 
297d4     CB 92 8A 92 
297d8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
297dc     4D 8D F9 E2 
297e0     97 59 FE 74 
297e4     DB 68 6D 6A 
297e8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
297ec     A8 6A A5 6A 
297f0     A3 6A 9F 6A 
297f4     9D 6A 9B 6A 
297f8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
297fc     D6 6A 8F 6A 
29800     CF 6A 46 6A 
29804     CA 6A E1 67 
29808     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2980c     D3 F7 15 92 
29810     90 8C BF 94 
29814     A6 92 EB 92 
29818     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2981c     B1 92 F7 92 
29820     FA 92 FD 92 
29824     00 93 02 93 
29828     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2982c     4F 93 52 93 
29830     54 93 22 94 
29834     5A 93 8F 88 
29838     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2983c     1C 77 07 6C 
29840     E8 69 7A 6B 
29844     34 6B 75 6B 
29848     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2984c     29 6B 26 6B 
29850     24 6B 21 6B 
29854     1D 6B 5E 6B 
29858     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2985c     12 6B 52 6B 
29860     34 69 34 6E 
29864     BA 73 A4 24 
29868     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2986c     7A 94 B3 93 
29870     72 93 31 93 
29874     78 93 7A 93 
29878     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2987c     83 93 86 93 
29880     89 93 D0 93 
29884     D2 93 D5 93 
29888     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2988c     DD 93 40 96 
29890     30 8B 99 9C 
29894     52 10 94 71 
29898     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2989c     46 6C 79 6B 
298a0     40 6C B7 6B 
298a4     F7 6B B1 6B 
298a8     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
298ac     EC 6B A5 6B 
298b0     A2 6B 9F 6B 
298b4     9D 6B 9A 6B 
298b8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
298bc     C8 6A E4 76 
298c0     20 4B F9 CE 
298c4     2E 8A 1A 92 
298c8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
298cc     FB 93 BA 93 
298d0     01 94 03 94 
298d4     4A 94 09 94 
298d8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
298dc     55 94 14 94 
298e0     9E 94 1A 94 
298e4     61 94 20 94 
298e8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
298ec     3E 87 E5 CD 
298f0     5F 50 6C 78 
298f4     B5 6A 04 6C 
298f8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
298fc     83 6C 7F 6C 
29900     7C 6C 36 6C 
29904     76 6C 74 6C 
29908     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2990c     6B 6C 25 6C 
29910     66 6C 1F 6C 
29914     1D 6C 41 6A 
29918     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2991c     BA FA FC 94 
29920     5B 8D 97 96 
29924     3B 94 C5 94 
29928     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2992c     89 94 8C 94 
29930     8F 94 92 94 
29934     94 94 DB 94 
29938     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2993c     E4 94 E7 94 
29940     2D 95 74 95 
29944     C8 96 15 89 
29948     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2994c     CB 75 31 6F 
29950     7E 6B 10 6D 
29954     C9 6C 0A 6D 
29958     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2995c     BD 6C FF 6C 
29960     FB 6C F9 6C 
29964     B2 6C F3 6C 
29968     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2996c     A7 6C E8 6C 
29970     0D 6B 85 6F 
29974     C7 74 10 28 
29978     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2997c     96 96 47 95 
29980     06 95 0A 95 
29984     0C 95 0F 95 
29988     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2998c     17 95 5E 95 
29990     61 95 63 95 
29994     22 95 AC 95 
29998     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2999c     72 95 17 98 
299a0     59 8E 01 96 
299a4     CF FC 5A 68 
299a8     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
299ac     96 6D 50 6D 
299b0     D5 6D 4A 6D 
299b4     8C 6D 89 6D 
299b8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
299bc     80 6D 3A 6D 
299c0     7A 6D 77 6D 
299c4     75 6D 71 6D 
299c8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
299cc     18 6C BC 78 
299d0     9A 4F 7E CF 
299d4     1F 89 F1 93 
299d8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
299dc     D2 95 4E 95 
299e0     D7 95 53 95 
299e4     DD 95 E0 95 
299e8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
299ec     A5 95 EB 95 
299f0     EE 95 F0 95 
299f4     37 96 B3 95 
299f8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
299fc     1A 98 D5 8D 
29a00     C5 9F CD 0F 
29a04     0F 71 F3 73 
29a08     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29a0c     D9 6D 5E 6E 
29a10     D3 6D 58 6E 
29a14     12 6E 0F 6E 
29a18     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29a1c     49 6E BF 6D 
29a20     87 6E 76 6D 
29a24     81 6E 11 6B 
29a28     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29a2c     3F 09 44 95 
29a30     E5 8D 3F 99 
29a34     D4 95 A2 96 
29a38     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29a3c     23 96 69 96 
29a40     6B 96 6E 96 
29a44     71 96 74 96 
29a48     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29a4c     BF 96 3C 96 
29a50     C6 96 C8 96 
29a54     A3 98 51 8D 
29a58     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29a5c     CF 75 29 73 
29a60     90 6C EC 6E 
29a64     62 6E E7 6E 
29a68     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29a6c     9A 6E 98 6E 
29a70     95 6E 91 6E 
29a74     8E 6E CF 6E 
29a78     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29a7c     40 6E C3 6E 
29a80     E8 6C 45 6F 
29a84     A5 7B C9 35 
29a88     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29a8c     2D 98 23 97 
29a90     E1 96 A0 96 
29a94     A4 96 EA 96 
29a98     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
29a9c     AF 96 F4 96 
29aa0     F8 96 3E 97 
29aa4     FD 96 43 97 
29aa8     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
29aac     08 97 6B 99 
29ab0     D6 92 88 91 
29ab4     D8 EE 84 66 
29ab8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
29abc     2E 6F E7 6E 
29ac0     6C 6F 24 6F 
29ac4     21 6F 1F 6F 
29ac8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
29acc     17 6F 13 6F 
29ad0     54 6F 0E 6F 
29ad4     0B 6F 4B 6F 
29ad8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
29adc     27 6D 1C 7B 
29ae0     19 59 9F DB 
29ae4     66 8E BC 94 
29ae8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
29aec     67 97 26 97 
29af0     6D 97 2B 97 
29af4     72 97 32 97 
29af8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29afc     C1 97 7F 97 
29b00     C6 97 85 97 
29b04     CB 97 CE 97 
29b08     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29b0c     EC 8A C4 C6 
29b10     68 4C F4 7D 
29b14     63 6E E8 6E 
29b18     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29b1c     ED 6F A7 6F 
29b20     E7 6F A0 6F 
29b24     E1 6F 9B 6F 
29b28     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29b2c     D5 6F 8F 6F 
29b30     CE 6F 45 6F 
29b34     86 6F 68 6D 
29b38     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29b3c     C0 13 AD A2 
29b40     A7 8E 79 99 
29b44     E6 97 E8 97 
29b48     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29b4c     F1 97 F3 97 
29b50     F6 97 F9 97 
29b54     FB 97 FE 97 
29b58     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29b5c     4A 98 0A 98 
29b60     93 98 0F 98 
29b64     7F 9B BF 8C 
29b68     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29b6c     91 7B 62 73 
29b70     1A 6E B9 70 
29b74     EB 6F B3 70 
29b78     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29b7c     25 70 20 70 
29b80     1E 70 1B 70 
29b84     18 70 15 70 
29b88     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29b8c     0D 70 09 70 
29b90     07 70 03 70 
29b94     01 70 FD 6F 
29b98     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
29b9c     F6 6F F2 6F 
29ba0     EF 6F EC 6F 
29ba4     2C 70 E6 6F 
29ba8     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
29bac     DD 6F 97 6F 
29bb0     D7 6F 84 6E 
29bb4     8F 6F 3F 7D 
29bb8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
29bba     FF FF FF FF 
29bbe     FF FF       | atarist_spl file "atarist.spl" '512
29bc0     00 00 00 00 
29bc4     00 00 00 00 
29bc8     00 00       | 	byte	$00[10]
29bca     17 7F F2 7F 
29bce     B2 7F 72 7F 
29bd2     33 7F F4 7E 
29bd6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
29bda     36 7E F5 7D 
29bde     E9 51 F2 0D 
29be2     8E 00 F3 FD 
29be6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
29bea     57 FD 58 FD 
29bee     5B FD 5C FD 
29bf2     5C FD 60 7D 
29bf6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
29bfa     D6 7C 98 7C 
29bfe     59 7C 1A 7C 
29c02     DC 7B 9E 7B 
29c06     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
29c0a     F3 05 00 FD 
29c0e     41 FB EA FA 
29c12     D9 FA DB FA 
29c16     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
29c1a     E4 FA 9B 36 
29c1e     F8 7A C0 7A 
29c22     84 7A 45 7A 
29c26     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
29c2a     8E 79 51 79 
29c2e     15 79 D7 78 
29c32     3C 1F EB FF 
29c36     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
29c3a     6D F8 65 F8 
29c3e     68 F8 6D F8 
29c42     70 F8 74 F8 
29c46     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
29c4a     AB 60 79 60 
29c4e     4B 60 1A 60 
29c52     E9 5F B9 5F 
29c56     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
29c5a     FB 59 B2 0B 
29c5e     92 FA 3A F7 
29c62     96 F6 79 F6 
29c66     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
29c6a     82 F6 86 F6 
29c6e     8C F6 DB 5D 
29c72     F1 5E C1 5E 
29c76     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
29c7a     34 5E 04 5E 
29c7e     D6 5D A6 5D 
29c82     78 5D D4 3E 
29c86     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
29c8a     27 F5 BA F4 
29c8e     AB F4 AD F4 
29c92     B2 F4 B8 F4 
29c96     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
29c9a     26 5D 2B 5D 
29c9e     FC 5C CD 5C 
29ca2     9F 5C 70 5C 
29ca6     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
29caa     E5 5B B8 5B 
29cae     DB 24 A7 FC 
29cb2     D1 F4 4D F3 
29cb6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
29cba     04 F3 0B F3 
29cbe     11 F3 16 F3 
29cc2     DE 18 98 5B 
29cc6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
29cca     4E 4A 29 48 
29cce     A0 47 6A 47 
29cd2     43 47 20 47 
29cd6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
29cda     E2 F6 98 F2 
29cde     C5 F1 A3 F1 
29ce2     A3 F1 A8 F1 
29ce6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
29cea     BF F1 00 3D 
29cee     EF 46 CD 46 
29cf2     AA 46 86 46 
29cf6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
29cfa     1C 46 F9 45 
29cfe     D7 45 EE 43 
29d02     DE 02 E8 F3 
29d06     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
29d0a     61 F0 65 F0 
29d0e     6D F0 74 F0 
29d12     7C F0 84 F0 
29d16     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
29d1a     8E 45 6D 45 
29d1e     49 45 27 45 
29d22     05 45 E1 44 
29d26     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
29d2a     F1 2F A9 FB 
29d2e     8B F1 9B EF 
29d32     40 EF 36 EF 
29d36     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
29d3a     4D EF 56 EF 
29d3e     5E EF 7B 44 
29d42     8C 44 69 44 
29d46     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
29d4a     03 44 E1 43 
29d4e     C0 43 F5 37 
29d52     69 33 0F 11 
29d56     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
29d5a     66 EE 37 EE 
29d5e     38 EE 40 EE 
29d62     48 EE 51 EE 
29d66     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
29d6a     7D 32 6A 32 
29d6e     51 32 37 32 
29d72     1F 32 05 32 
29d76     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
29d7a     B9 31 A1 31 
29d7e     F1 04 F4 F1 
29d82     50 EE A0 ED 
29d86     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
29d8a     93 ED 9A ED 
29d8e     A4 ED AD ED 
29d92     F4 27 C1 31 
29d96     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
29d9a     78 31 5F 31 
29d9e     46 31 2E 31 
29da2     15 31 FC 30 
29da6     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
29daa     C4 EF 4A ED 
29dae     DC EC CB EC 
29db2     D2 EC DA EC 
29db6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
29dba     F9 EC 64 2F 
29dbe     0A 31 F1 30 
29dc2     D9 30 C0 30 
29dc6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
29dca     78 30 5F 30 
29dce     46 30 38 23 
29dd2     A6 F6 19 EE 
29dd6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
29dda     20 EC 28 EC 
29dde     32 EC 3C EC 
29de2     47 EC 51 EC 
29de6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
29dea     A3 22 93 22 
29dee     7F 22 6E 22 
29df2     5D 22 4C 22 
29df6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
29dfa     77 09 76 F1 
29dfe     CC EC F0 EB 
29e02     CD EB CE EB 
29e06     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
29e0a     ED EB F5 EB 
29e0e     3E F6 6B 22 
29e12     5F 22 4E 22 
29e16     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
29e1a     1B 22 0B 22 
29e1e     FA 21 E9 21 
29e22     D8 21 4D FF 
29e26     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
29e2a     92 EB 7B EB 
29e2e     82 EB 8C EB 
29e32     97 EB A1 EB 
29e36     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
29e3a     15 22 04 22 
29e3e     F3 21 E3 21 
29e42     D2 21 C0 21 
29e46     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
29e4a     8E 21 7D 21 
29e4e     9A F8 A4 ED 
29e52     8E EB 2F EB 
29e56     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
29e5a     37 EB 42 EB 
29e5e     4C EB 57 EB 
29e62     B2 17 22 19 
29e66     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
29e6a     FD 18 EF 18 
29e6e     E3 18 D6 18 
29e72     CA 18 BD 18 
29e76     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
29e7a     60 EC 35 EB 
29e7e     01 EB 01 EB 
29e82     0C EB 16 EB 
29e86     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
29e8a     34 EB D0 18 
29e8e     00 19 F4 18 
29e92     E8 18 DA 18 
29e96     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
29e9a     B6 18 A9 18 
29e9e     9D 18 91 05 
29ea2     F0 EF CA EB 
29ea6     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
29eaa     E8 EA F2 EA 
29eae     FE EA 07 EB 
29eb2     12 EB C2 EF 
29eb6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
29eba     D9 18 CD 18 
29ebe     C0 18 B3 18 
29ec2     A7 18 9B 18 
29ec6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
29eca     B8 FC 30 EE 
29ece     61 EB DC EA 
29ed2     CD EA D2 EA 
29ed6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
29eda     F3 EA FE EA 
29ede     D2 09 D1 18 
29ee2     C3 18 17 18 
29ee6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
29eea     66 11 52 11 
29eee     49 11 41 11 
29ef2     38 11 E0 F4 
29ef6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
29efa     C9 EA C5 EA 
29efe     CF EA DB EA 
29f02     E6 EA EF EA 
29f06     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
29f0a     89 11 80 11 
29f0e     78 11 6E 11 
29f12     67 11 5D 11 
29f16     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
29f1a     43 11 32 0D 
29f1e     9C F1 07 EC 
29f22     F8 EA CD EA 
29f26     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
29f2a     E4 EA ED EA 
29f2e     F8 EA 02 EB 
29f32     55 11 91 11 
29f36     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
29f3a     75 11 6E 11 
29f3e     64 11 5E 11 
29f42     54 11 4A 11 
29f46     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
29f4a     A8 EB F1 EA 
29f4e     D9 EA DC EA 
29f52     E8 EA F1 EA 
29f56     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
29f5a     A6 EB 9E 11 
29f5e     A0 11 96 11 
29f62     8D 11 85 11 
29f66     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
29f6a     6A 11 CA 0D 
29f6e     36 0B 57 F8 
29f72     6C ED 57 EB 
29f76     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
29f7a     F4 EA FF EA 
29f7e     09 EB 15 EB 
29f82     1E EB 1A FD 
29f86     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
29f8a     ED 0A E8 0A 
29f8e     E2 0A DC 0A 
29f92     D6 0A D1 0A 
29f96     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
29f9a     F8 F3 BC EC 
29f9e     57 EB 1E EB 
29fa2     18 EB 24 EB 
29fa6     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
29faa     42 EB 4D EB 
29fae     08 09 20 0B 
29fb2     1A 0B 14 0B 
29fb6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
29fba     04 0B FE 0A 
29fbe     F9 0A F2 0A 
29fc2     84 08 3A F1 
29fc6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
29fca     42 EB 42 EB 
29fce     4E EB 57 EB 
29fd2     62 EB 6B EB 
29fd6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
29fda     48 0B 43 0B 
29fde     3C 0B 36 0B 
29fe2     31 0B 2C 0B 
29fe6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
29fea     1B 0B 5C 00 
29fee     6A EF 1B EC 
29ff2     81 EB 6A EB 
29ff6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
29ffa     85 EB 8E EB 
29ffe     99 EB A3 EB 
2a002     DD 05 E5 05 
2a006     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2a00a     DB 05 D8 05 
2a00e     D5 05 D1 05 
2a012     D0 05 CB 05 
2a016     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2a01a     0C EC BB EB 
2a01e     B3 EB BB EB 
2a022     C5 EB D0 EB 
2a026     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2a02a     E4 F7 2C 06 
2a02e     28 06 24 06 
2a032     22 06 1F 06 
2a036     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2a03a     16 06 14 06 
2a03e     0F 06 D0 F3 
2a042     65 ED 2D EC 
2a046     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2a04a     01 EC 0A EC 
2a04e     14 EC 1E EC 
2a052     29 EC FB 03 
2a056     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2a05a     63 06 60 06 
2a05e     5E 06 59 06 
2a062     58 06 54 06 
2a066     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2a06a     69 F1 21 ED 
2a06e     55 EC 33 EC 
2a072     36 EC 40 EC 
2a076     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2a07a     5C EC 68 EC 
2a07e     92 02 D9 02 
2a082     D7 02 D7 02 
2a086     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2a08a     D1 02 D1 02 
2a08e     CE 02 CD 02 
2a092     5D FC 80 EF 
2a096     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2a09a     83 EC 8A EC 
2a09e     93 EC 9C EC 
2a0a2     A5 EC B1 EC 
2a0a6     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2a0aa     2B 03 2A 03 
2a0ae     29 03 26 03 
2a0b2     25 03 24 03 
2a0b6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2a0ba     1F 03 70 F7 
2a0be     D0 EE 27 ED 
2a0c2     DB EC D4 EC 
2a0c6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2a0ca     F0 EC FA EC 
2a0ce     02 ED F9 F4 
2a0d2     7B 03 7C 03 
2a0d6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2a0da     75 03 73 03 
2a0de     72 03 70 03 
2a0e2     6D 03 6C 03 
2a0e6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2a0ea     54 ED 22 ED 
2a0ee     22 ED 2C ED 
2a0f2     35 ED 3F ED 
2a0f6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2a0fa     14 01 C3 03 
2a0fe     C1 03 C0 03 
2a102     5F 01 A5 00 
2a106     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2a10a     7B 00 7C 00 
2a10e     20 00 85 F1 
2a112     2A EE 89 ED 
2a116     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2a11a     80 ED 87 ED 
2a11e     90 ED 9A ED 
2a122     A3 ED 73 00 
2a126     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2a12a     D0 00 D0 00 
2a12e     D0 00 D0 00 
2a132     D0 00 CF 00 
2a136     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2a13a     80 F0 3D EE 
2a13e     D5 ED C7 ED 
2a142     CD ED D6 ED 
2a146     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2a14a     F2 ED FA ED 
2a14e     1D 01 29 01 
2a152     27 01 27 01 
2a156     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2a15a     25 01 26 01 
2a15e     26 01 23 01 
2a162     D0 F7 EC EF 
2a166     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2a16a     1C EE 24 EE 
2a16e     2D EE 37 EE 
2a172     40 EE 47 EE 
2a176     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2a17a     7D 01 7B 01 
2a17e     7A 01 7A 01 
2a182     79 01 78 01 
2a186     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2a18a     84 FE DE F3 
2a18e     6C EF 93 EE 
2a192     72 EE 72 EE 
2a196     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2a19a     8B EE 95 EE 
2a19e     9E EE 15 FC 
2a1a2     67 FE 67 FE 
2a1a6     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2a1aa     6B FE 6B FE 
2a1ae     6D FE 6D FE 
2a1b2     6D FE 6F FE 
2a1b6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2a1ba     DF EE CC EE 
2a1be     CF EE D9 EE 
2a1c2     E1 EE EA EE 
2a1c6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2a1ca     5A FE C4 FE 
2a1ce     C3 FE C5 FE 
2a1d2     C6 FE C6 FE 
2a1d6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2a1da     C8 FE C7 FE 
2a1de     DA FB 85 F1 
2a1e2     8D EF 31 EF 
2a1e6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2a1ea     34 EF 3E EF 
2a1ee     46 EF 4F EF 
2a1f2     57 EF 0D FF 
2a1f6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2a1fa     1F FF 1F FF 
2a1fe     21 FF 21 FF 
2a202     21 FF 21 FF 
2a206     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2a20a     15 F1 BE EF 
2a20e     84 EF 7E EF 
2a212     88 EF 8F EF 
2a216     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2a21a     A9 EF 06 F2 
2a21e     A6 FC AB FC 
2a222     AD FC AE FC 
2a226     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2a22a     B2 FC B4 FC 
2a22e     B6 FC B7 FC 
2a232     8B F4 BD F0 
2a236     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2a23a     E4 EF EE EF 
2a23e     F6 EF FD EF 
2a242     04 F0 0E F0 
2a246     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2a24a     0B FD 0D FD 
2a24e     0F FD 11 FD 
2a252     11 FD 13 FD 
2a256     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2a25a     17 FD 64 F3 
2a25e     CD F0 52 F0 
2a262     41 F0 45 F0 
2a266     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2a26a     5B F0 64 F0 
2a26e     6D F0 FB FC 
2a272     65 FD 68 FD 
2a276     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2a27a     6C FD 6D FD 
2a27e     6F FD 70 FD 
2a282     72 FD B3 FB 
2a286     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2a28a     A4 F0 99 F0 
2a28e     A0 F0 A8 F0 
2a292     AE F0 B9 F0 
2a296     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2a29a     CB FB DD FB 
2a29e     DE FB E0 FB 
2a2a2     E3 FB E3 FB 
2a2a6     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2a2aa     E9 FB EC FB 
2a2ae     62 F7 27 F2 
2a2b2     2A F1 FF F0 
2a2b6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2a2ba     0C F1 13 F1 
2a2be     1B F1 23 F1 
2a2c2     33 F2 3C FC 
2a2c6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2a2ca     42 FC 45 FC 
2a2ce     47 FC 48 FC 
2a2d2     4A FC 4C FC 
2a2d6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2a2da     20 F2 77 F1 
2a2de     5C F1 5F F1 
2a2e2     64 F1 6C F1 
2a2e6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2a2ea     83 F1 DC F8 
2a2ee     9A FC 9A FC 
2a2f2     9B FC 9E FC 
2a2f6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2a2fa     A3 FC A4 FC 
2a2fe     A6 FC A9 FC 
2a302     90 F4 33 F2 
2a306     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2a30a     BA F1 BF F1 
2a30e     C7 F1 CE F1 
2a312     D6 F1 DC F1 
2a316     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2a31a     F3 FC F5 FC 
2a31e     FE FB 79 FB 
2a322     62 FB 5F FB 
2a326     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2a32a     6F FA AF F3 
2a32e     53 F2 12 F2 
2a332     0F F2 15 F2 
2a336     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2a33a     2A F2 32 F2 
2a33e     38 F2 9A FB 
2a342     AF FB B1 FB 
2a346     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a34a     B7 FB B8 FB 
2a34e     BA FB BC FB 
2a352     C1 FB 3B F8 
2a356     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2a35a     6E F2 6C F2 
2a35e     74 F2 7A F2 
2a362     81 F2 87 F2 
2a366     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2a36a     06 FC 09 FC 
2a36e     0C FC 0E FC 
2a372     0F FC 12 FC 
2a376     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2a37a     17 FC 1A FC 
2a37e     B2 F6 7B F3 
2a382     DD F2 C5 F2 
2a386     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2a38a     D4 F2 DB F2 
2a38e     E0 F2 E8 F2 
2a392     28 F8 60 FC 
2a396     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2a39a     64 FC 66 FC 
2a39e     68 FC 6A FC 
2a3a2     6D FC 52 FC 
2a3a6     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2a3aa     78 F3 24 F3 
2a3ae     1A F3 1E F3 
2a3b2     24 F3 2A F3 
2a3b6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2a3ba     3D F3 80 FA 
2a3be     0C FB 0F FB 
2a3c2     10 FB 14 FB 
2a3c6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2a3ca     1B FB 1D FB 
2a3ce     1F FB 92 FA 
2a3d2     DE F4 AE F3 
2a3d6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2a3da     79 F3 7E F3 
2a3de     84 F3 8C F3 
2a3e2     92 F3 97 F3 
2a3e6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2a3ea     67 FB 69 FB 
2a3ee     6B FB 6F FB 
2a3f2     71 FB 72 FB 
2a3f6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2a3fa     E3 F8 BA F4 
2a3fe     EE F3 CC F3 
2a402     CA F3 CF F3 
2a406     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2a40a     E2 F3 E8 F3 
2a40e     ED F3 B7 FB 
2a412     BC FB BE FB 
2a416     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2a41a     C4 FB C6 FB 
2a41e     C8 FB C9 FB 
2a422     CC FB 8F F7 
2a426     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2a42a     1E F4 1E F4 
2a42e     24 F4 2A F4 
2a432     30 F4 38 F4 
2a436     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2a43a     AD FA B1 FA 
2a43e     B4 FA B6 FA 
2a442     BA FA BB FA 
2a446     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2a44a     C2 FA C6 FA 
2a44e     55 F6 C6 F4 
2a452     7D F4 72 F4 
2a456     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2a45a     83 F4 89 F4 
2a45e     8F F4 94 F4 
2a462     66 FA 03 FB 
2a466     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2a46a     0A FB 0E FB 
2a46e     10 FB 11 FB 
2a472     16 FB 18 FB 
2a476     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2a47a     F9 F4 CA F4 
2a47e     C5 F4 CB F4 
2a482     D1 F4 D7 F4 
2a486     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2a48a     E8 F4 3F FB 
2a48e     56 FB 58 FB 
2a492     5A FB 5E FB 
2a496     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2a49a     64 FB 64 FB 
2a49e     69 FB 99 F9 
2a4a2     E9 F5 33 F5 
2a4a6     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2a4aa     1D F5 22 F5 
2a4ae     27 F5 2E F5 
2a4b2     32 F5 37 F5 
2a4b6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2a4ba     BC FA BC FA 
2a4be     C1 FA C2 FA 
2a4c2     C4 FA C8 FA 
2a4c6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2a4ca     F9 F7 DB F5 
2a4ce     78 F5 69 F5 
2a4d2     6A F5 70 F5 
2a4d6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2a4da     7F F5 85 F5 
2a4de     6E F7 06 FB 
2a4e2     0A FB 0B FB 
2a4e6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2a4ea     14 FB 15 FB 
2a4ee     18 FB 1B FB 
2a4f2     1D FB 70 F7 
2a4f6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2a4fa     B6 F5 BB F5 
2a4fe     C0 F5 C6 F5 
2a502     CA F5 CF F5 
2a506     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a50a     54 FB 56 FB 
2a50e     5A FB 5B FB 
2a512     5E FB 5F FB 
2a516     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a51a     67 FB 52 FB 
2a51e     29 F7 33 F6 
2a522     06 F6 02 F6 
2a526     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a52a     10 F6 16 F6 
2a52e     1A F6 1F F6 
2a532     81 FB 9F FB 
2a536     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a53a     51 FB F2 FA 
2a53e     E3 FA E3 FA 
2a542     E5 FA E9 FA 
2a546     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a54a     64 F6 4D F6 
2a54e     4D F6 53 F6 
2a552     57 F6 5C F6 
2a556     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a55a     6A F6 19 FB 
2a55e     1E FB 22 FB 
2a562     23 FB 24 FB 
2a566     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a56a     2C FB 2E FB 
2a56e     32 FB F0 F8 
2a572     01 F7 A5 F6 
2a576     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a57a     9F F6 A3 F6 
2a57e     A6 F6 AC F6 
2a582     B0 F6 EB F7 
2a586     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a58a     68 FB 6C FB 
2a58e     6E FB 71 FB 
2a592     72 FB 74 FB 
2a596     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a59a     71 F8 21 F7 
2a59e     E5 F6 DD F6 
2a5a2     E1 F6 E6 F6 
2a5a6     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a5aa     F5 F6 F7 F6 
2a5ae     F7 FA AB FB 
2a5b2     AD FB AF FB 
2a5b6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a5ba     B6 FB B9 FB 
2a5be     BB FB BC FB 
2a5c2     21 FB 07 F8 
2a5c6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a5ca     22 F7 26 F7 
2a5ce     2B F7 2E F7 
2a5d2     34 F7 38 F7 
2a5d6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a5da     13 FB 16 FB 
2a5de     17 FB 1B FB 
2a5e2     1E FB 20 FB 
2a5e6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a5ea     26 FB 77 FA 
2a5ee     F3 F7 7C F7 
2a5f2     67 F7 6A F7 
2a5f6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a5fa     74 F7 7A F7 
2a5fe     7E F7 82 F7 
2a602     53 FB 5A FB 
2a606     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a60a     5F FB 63 FB 
2a60e     65 FB 67 FB 
2a612     69 FB 6A FB 
2a616     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a61a     B5 F7 A9 F7 
2a61e     AD F7 B0 F7 
2a622     B5 F7 B8 F7 
2a626     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a62a     6E F8 99 FB 
2a62e     9C FB 9D FB 
2a632     9F FB A4 FB 
2a636     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a63a     A9 FB AB FB 
2a63e     AD FB 46 F9 
2a642     26 F8 F0 F7 
2a646     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a64a     F4 F7 F8 F7 
2a64e     FB F7 FF F7 
2a652     03 F8 65 FA 
2a656     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a65a     2B FB 2F FB 
2a65e     30 FB 32 FB 
2a662     34 FB 38 FB 
2a666     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a66a     E9 F8 4A F8 
2a66e     2E F8 2C F8 
2a672     2F F8 36 F8 
2a676     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a67a     41 F8 44 F8 
2a67e     4A FB 67 FB 
2a682     68 FB 6B FB 
2a686     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a68a     73 FB 74 FB 
2a68e     78 FB 7A FB 
2a692     14 FB E7 F8 
2a696     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a69a     6D F8 70 F8 
2a69e     73 F8 78 F8 
2a6a2     7C F8 80 F8 
2a6a6     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a6aa     A6 FB A7 FB 
2a6ae     A9 FB AC FB 
2a6b2     AF FB B1 FB 
2a6b6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a6ba     B7 FB 73 FA 
2a6be     F8 F8 B4 F8 
2a6c2     A9 F8 AB F8 
2a6c6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a6ca     B4 F8 B8 F8 
2a6ce     BB F8 FA F8 
2a6d2     64 FB 65 FB 
2a6d6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a6da     6D FB 6F FB 
2a6de     70 FB 74 FB 
2a6e2     77 FB 77 FB 
2a6e6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a6ea     E9 F8 E4 F8 
2a6ee     E8 F8 EB F8 
2a6f2     EE F8 F2 F8 
2a6f6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a6fa     B5 FA 9F FB 
2a6fe     A1 FB A4 FB 
2a702     A5 FB A9 FB 
2a706     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a70a     AE FB B1 FB 
2a70e     B2 FB C7 F9 
2a712     39 F9 22 F9 
2a716     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a71a     26 F9 2A F9 
2a71e     2E F9 32 F9 
2a722     33 F9 BA FB 
2a726     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a72a     DE FB E1 FB 
2a72e     E2 FB E4 FB 
2a732     E5 FB E7 FB 
2a736     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a73a     C5 F9 67 F9 
2a73e     57 F9 56 F9 
2a742     5B F9 5F F9 
2a746     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a74a     68 F9 6C F9 
2a74e     0B FC 11 FC 
2a752     14 FC 15 FC 
2a756     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a75a     B5 FB B5 FB 
2a75e     B6 FB B8 FB 
2a762     E9 FA C8 F9 
2a766     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a76a     90 F9 94 F9 
2a76e     95 F9 99 F9 
2a772     9D F9 9F F9 
2a776     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a77a     DE FB DF FB 
2a77e     E2 FB E4 FB 
2a782     E6 FB E8 FB 
2a786     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a78a     EF FB AC FA 
2a78e     E9 F9 C7 F9 
2a792     C3 F9 C8 F9 
2a796     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a79a     D0 F9 D4 F9 
2a79e     D6 F9 0E FB 
2a7a2     11 FC 13 FC 
2a7a6     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a7aa     19 FC 1B FC 
2a7ae     1D FC 1E FC 
2a7b2     21 FC 22 FC 
2a7b6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2a7ba     F7 F9 F7 F9 
2a7be     FB F9 FE F9 
2a7c2     00 FA 03 FA 
2a7c6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2a7ca     1B FC 45 FC 
2a7ce     46 FC 48 FC 
2a7d2     4A FC 4B FC 
2a7d6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2a7da     52 FC 54 FC 
2a7de     F3 FB 82 FA 
2a7e2     35 FA 28 FA 
2a7e6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2a7ea     31 FA 32 FA 
2a7ee     37 FA 37 FA 
2a7f2     3C FA 00 FC 
2a7f6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2a7fa     09 FC 0B FC 
2a7fe     0F FC 12 FC 
2a802     12 FC 15 FC 
2a806     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2a80a     8D FA 60 FA 
2a80e     5B FA 5C FA 
2a812     60 FA 61 FA 
2a816     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2a81a     6C FA 6D FA 
2a81e     37 FC 3A FC 
2a822     3B FC 3D FC 
2a826     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2a82a     43 FC 44 FC 
2a82e     45 FC 47 FC 
2a832     51 FB AB FA 
2a836     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2a83a     8E FA 91 FA 
2a83e     93 FA 95 FA 
2a842     98 FA 9B FA 
2a846     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2a84a     68 FC 6A FC 
2a84e     6C FC 6E FC 
2a852     70 FC 72 FC 
2a856     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2a85a     76 FC 3B FB 
2a85e     D0 FA BB FA 
2a862     B9 FA BD FA 
2a866     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2a86a     C4 FA C6 FA 
2a86e     CA FA 13 FC 
2a872     3A FC 3A FC 
2a876     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2a87a     41 FC 43 FC 
2a87e     44 FC 47 FC 
2a882     48 FC 3C FC 
2a886     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2a88a     E6 FA E8 FA 
2a88e     EB FA EE FA 
2a892     F0 FA F2 FA 
2a896     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2a89a     61 FC 66 FC 
2a89e     68 FC 6B FC 
2a8a2     6C FC 6E FC 
2a8a6     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2a8aa     73 FC 75 FC 
2a8ae     13 FC 3F FB 
2a8b2     17 FB 12 FB 
2a8b6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2a8ba     1A FB 1D FB 
2a8be     1F FB 20 FB 
2a8c2     23 FB 92 FC 
2a8c6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2a8ca     96 FC 97 FC 
2a8ce     9A FC 9C FC 
2a8d2     9E FC 9F FC 
2a8d6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2a8da     5A FB 41 FB 
2a8de     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2a8e2     01 00 00 00 
2a8e6     00 00 00 00 
2a8ea     00 00 00 00 
2a8ee     00 00 00 00 | mouse  file "mouse2.def"
2a8f2     00 00 00 00 
2a8f6     00 00 00 00 
2a8fa     00 00 00 00 
2a8fe     00 00 00 00 | 	byte	$00[16]
2a902     01 01 00 00 
2a906     00 00 00 00 
2a90a     00 00 00 00 
2a90e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a912     00 00 00 00 
2a916     00 00 00 00 
2a91a     00 00 00 00 
2a91e     00 00 00 00 | 	byte	$00[16]
2a922     01 0D 01 00 
2a926     00 00 00 00 
2a92a     00 00 00 00 
2a92e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a932     00 00 00 00 
2a936     00 00 00 00 
2a93a     00 00 00 00 
2a93e     00 00 00 00 | 	byte	$00[16]
2a942     01 0D 0D 01 
2a946     00 00 00 00 
2a94a     00 00 00 00 
2a94e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a952     00 00 00 00 
2a956     00 00 00 00 
2a95a     00 00 00 00 
2a95e     00 00 00 00 | 	byte	$00[16]
2a962     01 0D 0D 0D 
2a966     01 00 00 00 
2a96a     00 00 00 00 
2a96e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a972     00 00 00 00 
2a976     00 00 00 00 
2a97a     00 00 00 00 
2a97e     00 00 00 00 | 	byte	$00[16]
2a982     01 0D 0D 0D 
2a986     0D 01 00 00 
2a98a     00 00 00 00 
2a98e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a992     00 00 00 00 
2a996     00 00 00 00 
2a99a     00 00 00 00 
2a99e     00 00 00 00 | 	byte	$00[16]
2a9a2     01 0D 0D 0D 
2a9a6     0D 0D 01 00 
2a9aa     00 00 00 00 
2a9ae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a9b2     00 00 00 00 
2a9b6     00 00 00 00 
2a9ba     00 00 00 00 
2a9be     00 00 00 00 | 	byte	$00[16]
2a9c2     01 0D 0D 0D 
2a9c6     0D 0D 0D 01 
2a9ca     00 00 00 00 
2a9ce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2a9d2     00 00 00 00 
2a9d6     00 00 00 00 
2a9da     00 00 00 00 
2a9de     00 00 00 00 | 	byte	$00[16]
2a9e2     01 0D 0D 0D 
2a9e6     0D 0D 0D 0C 
2a9ea     01 00 00 00 
2a9ee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2a9f2     00 00 00 00 
2a9f6     00 00 00 00 
2a9fa     00 00 00 00 
2a9fe     00 00 00 00 | 	byte	$00[16]
2aa02     01 0D 0D 0D 
2aa06     0D 0D 0D 0D 
2aa0a     0C 01 00 00 
2aa0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2aa12     00 00 00 00 
2aa16     00 00 00 00 
2aa1a     00 00 00 00 
2aa1e     00 00 00 00 | 	byte	$00[16]
2aa22     01 0D 0D 0D 
2aa26     0D 0D 0D 0D 
2aa2a     0D 0C 01 00 
2aa2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2aa32     00 00 00 00 
2aa36     00 00 00 00 
2aa3a     00 00 00 00 
2aa3e     00 00 00 00 | 	byte	$00[16]
2aa42     01 0D 0D 0D 
2aa46     0D 0D 0D 0D 
2aa4a     0D 0D 0B 01 
2aa4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2aa52     00 00 00 00 
2aa56     00 00 00 00 
2aa5a     00 00 00 00 
2aa5e     00 00 00 00 | 	byte	$00[16]
2aa62     01 0D 0D 0D 
2aa66     0C 0D 0D 03 
2aa6a     01 01 01 01 
2aa6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2aa72     00 00 00 00 
2aa76     00 00 00 00 
2aa7a     00 00 00 00 
2aa7e     00 00 00 00 | 	byte	$00[16]
2aa82     01 0D 0D 0C 
2aa86     01 09 0D 03 
2aa8a     00 00 00 00 
2aa8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2aa92     00 00 00 00 
2aa96     00 00 00 00 
2aa9a     00 00 00 00 
2aa9e     00 00 00 00 | 	byte	$00[16]
2aaa2     01 0D 0C 01 
2aaa6     00 01 0D 0B 
2aaaa     01 00 00 00 
2aaae     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2aab2     00 00 00 00 
2aab6     00 00 00 00 
2aaba     00 00 00 00 
2aabe     00 00 00 00 | 	byte	$00[16]
2aac2     01 0C 01 00 
2aac6     00 01 0A 0D 
2aaca     01 00 00 00 
2aace     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2aad2     00 00 00 00 
2aad6     00 00 00 00 
2aada     00 00 00 00 
2aade     00 00 00 00 | 	byte	$00[16]
2aae2     01 01 00 00 
2aae6     00 00 01 0D 
2aaea     0B 01 00 00 
2aaee     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2aaf2     00 00 00 00 
2aaf6     00 00 00 00 
2aafa     00 00 00 00 
2aafe     00 00 00 00 
2ab02     00 00 00 00 
2ab06     00 00       | 	byte	$00[22]
2ab08     01 0B 0D 01 
2ab0c     00 00 00 00 
2ab10     00 00 00 00 
2ab14     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab18     00 00 00 00 
2ab1c     00 00 00 00 
2ab20     00 00 00 00 
2ab24     00 00 00 00 
2ab28     00          | 	byte	$00[17]
2ab29     01 01 00 00 
2ab2d     00 00 00 00 
2ab31     00 00 00 00 
2ab35     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab39     00 00 00 00 
      ...             
2acdd     00 00 00 00 
2ace1     00          | 	byte	$00[425]
2ace2                 | 
2ace2     00 00       |              	org
2ace4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2ace8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2acec 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2acf0 003             | 
2acf0 003 00 30 04 F6 |                 mov     psramaddr,#0
2acf4 004             | 
2acf4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2acf8 005 20 00 00 FF 
2acfc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2ad00 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2ad04 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2ad08 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2ad0c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2ad10 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2ad14 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2ad18 00d             | 
2ad18 00d 20 00 00 FF 
2ad1c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2ad20 00f E0 03 00 FF 
2ad24 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2ad28 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2ad2c 012             | 
2ad2c 012             |                 
2ad2c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2ad30 013             |     
2ad30 013 01 2C 60 FD |                 cogid 	t11				' get id
2ad34 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2ad38 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2ad3c 016             | 
2ad3c 016 00 00 00 00 | t11 		long 	0
2ad40 017 00 FF 07 00 | mailbox 	long 	$7FF00
2ad44 018 00 00 00 00 | psramaddr 	long 	0
2ad48 019 00 00 00 00 | pslockval	long 	0
2ad4c 01a 00 00 00 00 | cmd             long    0
2ad50 01b 00 00 00 00 | buf1            long    0
2ad54 01c 00 40 00 00 | buf2            long    16384
2ad58 01d 5C AD 02 00 | 	long	@@@_dat_ + 8468
2ad5c 01e 50 32 20 52 
2ad60 01f 65 74 72 6F 
2ad64 020 6D 61 63 68 
2ad68 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2ad6c 022 42 41 53 49 
2ad70 023 43 20 76 65 
2ad74 024 72 73 69 6F 
2ad78 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2ad7c 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2ad80 027             | 	alignl
2ad80 027             | _hg010b_spin2_dat_
2ad80 027             | 
2ad80 027 00 00 00 00 
2ad84 028 00 00 00 00 
2ad88 029 00 00 00 00 
2ad8c 02a 00 00 00 00 
2ad90 02b 00 00 00    | vga_font       file "vgafont.def"
2ad93 02b 7E 81 A5 81 
2ad97 02c 81 BD 99 81 
2ad9b 02d 81 7E 00 00 
2ad9f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2ada3 02f 7E FF DB FF 
2ada7 030 FF C3 E7 FF 
2adab 031 FF 7E 00 00 
2adaf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2adb3 033 00 36 7F 7F 
2adb7 034 7F 7F 3E 1C 
2adbb 035 08 00 00 00 
2adbf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2adc3 037 00 08 1C 3E 
2adc7 038 7F 3E 1C 08 
2adcb 039 00 00 00 00 
2adcf 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2add3 03b 18 3C 3C E7 
2add7 03c E7 E7 18 18 
2addb 03d 3C 00 00 00 
2addf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2ade3 03f 18 3C 7E FF 
2ade7 040 FF 7E 18 18 
2adeb 041 3C 00 00 00 
2adef 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2adf3 043 00 00 00 18 
2adf7 044 3C 3C 18 00 
2adfb 045 00 00 00 00 
2adff 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2ae03 047 FF FF FF E7 
2ae07 048 C3 C3 E7 FF 
2ae0b 049 FF FF FF FF 
2ae0f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2ae13 04b 00 00 3C 66 
2ae17 04c 42 42 66 3C 
2ae1b 04d 00 00 00 00 
2ae1f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2ae23 04f FF FF C3 99 
2ae27 050 BD BD 99 C3 
2ae2b 051 FF FF FF FF 
2ae2f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2ae33 053 78 70 58 4C 
2ae37 054 1E 33 33 33 
2ae3b 055 33 1E 00 00 
2ae3f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2ae43 057 3C 66 66 66 
2ae47 058 66 3C 18 7E 
2ae4b 059 18 18 00 00 
2ae4f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2ae53 05b FC CC FC 0C 
2ae57 05c 0C 0C 0C 0E 
2ae5b 05d 0F 07 00 00 
2ae5f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2ae63 05f FE C6 FE C6 
2ae67 060 C6 C6 C6 E6 
2ae6b 061 E7 67 03 00 
2ae6f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2ae73 063 18 18 DB 3C 
2ae77 064 E7 3C DB 18 
2ae7b 065 18 00 00 00 
2ae7f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2ae83 067 03 07 0F 1F 
2ae87 068 7F 1F 0F 07 
2ae8b 069 03 01 00 00 
2ae8f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2ae93 06b 60 70 78 7C 
2ae97 06c 7F 7C 78 70 
2ae9b 06d 60 40 00 00 
2ae9f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2aea3 06f 18 3C 7E 18 
2aea7 070 18 18 7E 3C 
2aeab 071 18 00 00 00 
2aeaf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2aeb3 073 66 66 66 66 
2aeb7 074 66 66 66    | 	byte	$66[7]
2aeba 075 00 66 66 00 
2aebe 076 00 00 00 00 
2aec2 077 00 FE DB DB 
2aec6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2aeca 079 D8 D8 D8 00 
2aece 07a 00 00 00 3E 
2aed2 07b 63 06 1C 36 
2aed6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2aeda 07d 30 63 3E 00 
2aede 07e 00 00 00 00 
2aee2 07f 00 00 00 00 
2aee6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2aeea 081 7F 7F 7F 00 
2aeee 082 00 00 00 00 
2aef2 083 00 18 3C 7E 
2aef6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2aefa 085 3C 18 7E 00 
2aefe 086 00 00 00 00 
2af02 087 00 18 3C 7E 
2af06 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2af0a 089 18 18 18 00 
2af0e 08a 00 00 00 00 
2af12 08b 00 18 18 18 
2af16 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2af1a 08d 7E 3C 18 00 
2af1e 08e 00 00 00 00 
2af22 08f 00 00 00 18 
2af26 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2af2a 091 00 00 00 00 
2af2e 092 00 00 00 00 
2af32 093 00 00 00    | 	byte	$00[11]
2af35 094 0C 06 7F 06 
2af39 095 0C 00 00 00 
2af3d 096 00 00 00 00 
2af41 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af45 098 00 03 03 03 
2af49 099 7F 00 00 00 
2af4d 09a 00 00 00 00 
2af51 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af55 09c 14 36 7F 36 
2af59 09d 14 00 00 00 
2af5d 09e 00 00 00 00 
2af61 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2af65 0a0 1C 1C 3E 3E 
2af69 0a1 7F 7F 00 00 
2af6d 0a2 00 00 00 00 
2af71 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2af75 0a4 7F 3E 3E 1C 
2af79 0a5 1C 08 00 00 
2af7d 0a6 00 00 00 00 
2af81 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2af85 0a8 00 00 00 00 
2af89 0a9 00 00 00 00 
2af8d 0aa 00 00 00 00 
2af91 0ab 00 00       | 	byte	$00[14]
2af93 0ab 18 3C 3C 3C 
2af97 0ac 18 18 18 00 
2af9b 0ad 18 18 00 00 
2af9f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2afa3 0af 66 24 00 00 
2afa7 0b0 00 00 00 00 
2afab 0b1 00 00 00 00 
2afaf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2afb3 0b3 00 36 36 7F 
2afb7 0b4 36 36 36 7F 
2afbb 0b5 36 36 00 00 
2afbf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2afc3 0b7 3E 63 43 03 
2afc7 0b8 3E 60 60 61 
2afcb 0b9 63 3E 18 18 
2afcf 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2afd3 0bb 00 00 43 63 
2afd7 0bc 30 18 0C 06 
2afdb 0bd 63 61 00 00 
2afdf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2afe3 0bf 1C 36 36 1C 
2afe7 0c0 6E 3B 33 33 
2afeb 0c1 33 6E 00 00 
2afef 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2aff3 0c3 0C 0C 0C 06 
2aff7 0c4 00 00 00 00 
2affb 0c5 00 00 00 00 
2afff 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b003 0c7 30 18 0C 0C 
2b007 0c8 0C 0C 0C 0C 
2b00b 0c9 18 30 00 00 
2b00f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2b013 0cb 0C 18 30 30 
2b017 0cc 30 30 30 30 
2b01b 0cd 18 0C 00 00 
2b01f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2b023 0cf 00 00 00 66 
2b027 0d0 3C FF 3C 66 
2b02b 0d1 00 00 00 00 
2b02f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2b033 0d3 00 00 00 18 
2b037 0d4 18 7E 18 18 
2b03b 0d5 00 00 00 00 
2b03f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2b043 0d7 00 00 00 00 
2b047 0d8 00 00 00 00 | 	byte	$00[8]
2b04b 0d9 18 18 18 0C 
2b04f 0da 00 00 00 00 
2b053 0db 00 00 00 00 
2b057 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2b05b 0dd 00 00 00 00 
2b05f 0de 00 00 00 00 
2b063 0df 00 00 00 00 
2b067 0e0 00 00 00 00 | 	byte	$00[16]
2b06b 0e1 18 18 00 00 
2b06f 0e2 00 00 00 00 
2b073 0e3 00 00 40 60 
2b077 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2b07b 0e5 03 01 00 00 
2b07f 0e6 00 00 00 00 
2b083 0e7 1C 36 63 63 
2b087 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2b08b 0e9 36 1C 00 00 
2b08f 0ea 00 00 00 00 
2b093 0eb 18 1C 1E 18 
2b097 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2b09b 0ed 18 7E 00 00 
2b09f 0ee 00 00 00 00 
2b0a3 0ef 3E 63 60 30 
2b0a7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2b0ab 0f1 63 7F 00 00 
2b0af 0f2 00 00 00 00 
2b0b3 0f3 3E 63 60 60 
2b0b7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2b0bb 0f5 63 3E 00 00 
2b0bf 0f6 00 00 00 00 
2b0c3 0f7 30 38 3C 36 
2b0c7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2b0cb 0f9 30 78 00 00 
2b0cf 0fa 00 00 00 00 
2b0d3 0fb 7F 03 03 03 
2b0d7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2b0db 0fd 63 3E 00 00 
2b0df 0fe 00 00 00 00 
2b0e3 0ff 1C 06 03 03 
2b0e7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2b0eb 101 63 3E 00 00 
2b0ef 102 00 00 00 00 
2b0f3 103 7F 63 60 60 
2b0f7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2b0fb 105 0C 0C 00 00 
2b0ff 106 00 00 00 00 
2b103 107 3E 63 63 63 
2b107 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2b10b 109 63 3E 00 00 
2b10f 10a 00 00 00 00 
2b113 10b 3E 63 63 63 
2b117 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2b11b 10d 30 1E 00 00 
2b11f 10e 00 00 00 00 
2b123 10f 00 00 00 18 
2b127 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b12b 111 18 18 00 00 
2b12f 112 00 00 00 00 
2b133 113 00 00 00 18 
2b137 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2b13b 115 18 18 0C 00 
2b13f 116 00 00 00 00 
2b143 117 00 60 30 18 
2b147 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2b14b 119 30 60 00 00 
2b14f 11a 00 00 00 00 
2b153 11b 00 00 00 7E 
2b157 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2b15b 11d 00 00 00 00 
2b15f 11e 00 00 00 00 
2b163 11f 00          | 	byte	$00[9]
2b164 120 06 0C 18 30 
2b168 121 60 30 18 0C 
2b16c 122 06 00 00 00 
2b170 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2b174 124 63 63 30 18 
2b178 125 18 18 00 18 
2b17c 126 18 00 00 00 
2b180 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b184 128 3E 63 63 7B 
2b188 129 7B 7B 3B 03 
2b18c 12a 3E 00 00 00 
2b190 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2b194 12c 1C 36 63 63 
2b198 12d 7F 63 63 63 
2b19c 12e 63 00 00 00 
2b1a0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2b1a4 130 66 66 66 3E 
2b1a8 131 66 66 66 66 
2b1ac 132 3F 00 00 00 
2b1b0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2b1b4 134 66 43 03 03 
2b1b8 135 03 03 43 66 
2b1bc 136 3C 00 00 00 
2b1c0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2b1c4 138 36 66 66 66 
2b1c8 139 66 66 66 36 
2b1cc 13a 1F 00 00 00 
2b1d0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2b1d4 13c 66 46 16 1E 
2b1d8 13d 16 06 46 66 
2b1dc 13e 7F 00 00 00 
2b1e0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2b1e4 140 66 46 16 1E 
2b1e8 141 16 06 06 06 
2b1ec 142 0F 00 00 00 
2b1f0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2b1f4 144 66 43 03 03 
2b1f8 145 7B 63 63 66 
2b1fc 146 5C 00 00 00 
2b200 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2b204 148 63 63 63 7F 
2b208 149 63 63 63 63 
2b20c 14a 63 00 00 00 
2b210 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2b214 14c 18 18 18 18 
2b218 14d 18 18 18 18 | 	byte	$18[8]
2b21c 14e 3C 00 00 00 
2b220 14f 00 00 00 78 
2b224 150 30 30 30 30 
2b228 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2b22c 152 1E 00 00 00 
2b230 153 00 00 00 67 
2b234 154 66 66 36 1E 
2b238 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2b23c 156 67 00 00 00 
2b240 157 00 00 00 0F 
2b244 158 06 06 06 06 
2b248 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b24c 15a 7F 00 00 00 
2b250 15b 00 00 00 63 
2b254 15c 77 7F 7F 6B 
2b258 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2b25c 15e 63 00 00 00 
2b260 15f 00 00 00 63 
2b264 160 67 6F 7F 7B 
2b268 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2b26c 162 63 00 00 00 
2b270 163 00 00 00 3E 
2b274 164 63 63 63 63 
2b278 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b27c 166 3E 00 00 00 
2b280 167 00 00 00 3F 
2b284 168 66 66 66 3E 
2b288 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2b28c 16a 0F 00 00 00 
2b290 16b 00 00 00 3E 
2b294 16c 63 63 63 63 
2b298 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2b29c 16e 3E 30 70 00 
2b2a0 16f 00 00 00 3F 
2b2a4 170 66 66 66 3E 
2b2a8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2b2ac 172 67 00 00 00 
2b2b0 173 00 00 00 3E 
2b2b4 174 63 63 06 1C 
2b2b8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b2bc 176 3E 00 00 00 
2b2c0 177 00 00 00 7E 
2b2c4 178 7E 5A 18 18 
2b2c8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b2cc 17a 3C 00 00 00 
2b2d0 17b 00 00 00 63 
2b2d4 17c 63 63 63 63 
2b2d8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b2dc 17e 3E 00 00 00 
2b2e0 17f 00 00 00 63 
2b2e4 180 63 63 63 63 
2b2e8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2b2ec 182 08 00 00 00 
2b2f0 183 00 00 00 63 
2b2f4 184 63 63 63 6B 
2b2f8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2b2fc 186 36 00 00 00 
2b300 187 00 00 00 63 
2b304 188 63 36 3E 1C 
2b308 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2b30c 18a 63 00 00 00 
2b310 18b 00 00 00 66 
2b314 18c 66 66 66 3C 
2b318 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2b31c 18e 3C 00 00 00 
2b320 18f 00 00 00 7F 
2b324 190 63 61 30 18 
2b328 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b32c 192 7F 00 00 00 
2b330 193 00 00 00 3C 
2b334 194 0C 0C 0C 0C 
2b338 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2b33c 196 3C 00 00 00 
2b340 197 00 00 00 00 
2b344 198 01 03 07 0E 
2b348 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2b34c 19a 40 00 00 00 
2b350 19b 00 00 00 3C 
2b354 19c 30 30 30 30 
2b358 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2b35c 19e 3C 00 00 00 
2b360 19f 1C 36 00 00 
2b364 1a0 00 00 00 00 
2b368 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b36c 1a2 00 00 00 00 
2b370 1a3 00 00 00 00 
2b374 1a4 00 00 00 00 
2b378 1a5 00 00 00 00 
2b37c 1a6 00          | 	byte	$00[17]
2b37d 1a6 FF 00 00 0C 
2b381 1a7 18 00 00 00 
2b385 1a8 00 00 00 00 
2b389 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b38d 1aa 00 00 00 00 
2b391 1ab 00 00 00 00 
2b395 1ac 00          | 	byte	$00[9]
2b396 1ac 1E 30 3E 33 
2b39a 1ad 33 33 6E 00 
2b39e 1ae 00 00 00 00 
2b3a2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2b3a6 1b0 1E 36 66 66 
2b3aa 1b1 66 66 3E 00 
2b3ae 1b2 00 00 00 00 
2b3b2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3b6 1b4 3E 63 03 03 
2b3ba 1b5 03 63 3E 00 
2b3be 1b6 00 00 00 00 
2b3c2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2b3c6 1b8 3C 36 33 33 
2b3ca 1b9 33 33 6E 00 
2b3ce 1ba 00 00 00 00 
2b3d2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3d6 1bc 3E 63 7F 03 
2b3da 1bd 03 63 3E 00 
2b3de 1be 00 00 00 00 
2b3e2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2b3e6 1c0 0C 1E 0C 0C 
2b3ea 1c1 0C 0C 1E 00 
2b3ee 1c2 00 00 00 00 
2b3f2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b3f6 1c4 6E 33 33 33 
2b3fa 1c5 33 33 3E 30 
2b3fe 1c6 33 1E 00 00 
2b402 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2b406 1c8 36 6E 66 66 
2b40a 1c9 66 66 67 00 
2b40e 1ca 00 00 00 00 
2b412 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2b416 1cc 1C 18 18 18 
2b41a 1cd 18 18 3C 00 
2b41e 1ce 00 00 00 00 
2b422 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2b426 1d0 70 60 60 60 
2b42a 1d1 60 60 60 66 
2b42e 1d2 66 3C 00 00 
2b432 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2b436 1d4 66 36 1E 1E 
2b43a 1d5 36 66 67 00 
2b43e 1d6 00 00 00 00 
2b442 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2b446 1d8 18 18 18 18 
2b44a 1d9 18 18       | 	byte	$18[6]
2b44c 1da 3C 00 00 00 
2b450 1db 00 00 00 00 
2b454 1dc 00 00 37 7F 
2b458 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2b45c 1de 63 00 00 00 
2b460 1df 00 00 00 00 
2b464 1e0 00 00 3B 66 
2b468 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b46c 1e2 66 00 00 00 
2b470 1e3 00 00 00 00 
2b474 1e4 00 00 3E 63 
2b478 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2b47c 1e6 3E 00 00 00 
2b480 1e7 00 00 00 00 
2b484 1e8 00 00 3B 66 
2b488 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2b48c 1ea 3E 06 06 0F 
2b490 1eb 00 00 00 00 
2b494 1ec 00 00 6E 33 
2b498 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2b49c 1ee 3E 30 30 78 
2b4a0 1ef 00 00 00 00 
2b4a4 1f0 00 00 3B 6E 
2b4a8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2b4ac 1f2 0F 00 00 00 
2b4b0 1f3 00 00 00 00 
2b4b4 1f4 00 00 3E 63 
2b4b8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2b4bc 1f6 3E 00 00 00 
2b4c0 1f7 00 00 00 08 
2b4c4 1f8 0C 0C 3F 0C 
2b4c8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b4cc 1fa 38 00 00 00 
2b4d0 1fb 00 00 00 00 
2b4d4 1fc 00 00 33 33 
2b4d8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2b4dc 1fe 6E 00 00 00 
2b4e0 1ff 00 00 00 00 
2b4e4 200 00 00 63 63 
2b4e8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2b4ec 202 1C 00 00 00 
2b4f0 203 00 00 00 00 
2b4f4 204 00 00 63 63 
2b4f8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b4fc 206 36 00 00 00 
2b500 207 00 00 00 00 
2b504 208 00 00 63 36 
2b508 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b50c 20a 63 00 00 00 
2b510 20b 00 00 00 00 
2b514 20c 00 00 63 63 
2b518 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b51c 20e 7E 60 30 1F 
2b520 20f 00 00 00 00 
2b524 210 00 00 7F 33 
2b528 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b52c 212 7F 00 00 00 
2b530 213 00 00 00 70 
2b534 214 18 18 18 0E 
2b538 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b53c 216 70 00 00 00 
2b540 217 00 00 00 18 
2b544 218 18 18 18 18 
2b548 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b54c 21a 18 00 00 00 
2b550 21b 00 00 00 0E 
2b554 21c 18 18 18 70 
2b558 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b55c 21e 0E 00 00 00 
2b560 21f 6E 3B 00 00 
2b564 220 00 00 00 00 
2b568 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b56c 222 00 00 00 00 
2b570 223 00 00 00 00 
2b574 224 00 00       | 	byte	$00[10]
2b576 224 08 1C 36 63 
2b57a 225 63 63 7F 00 
2b57e 226 00 00 00 00 
2b582 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b586 228 03 03 03 03 
2b58a 229 43 66 3C 18 
2b58e 22a 30 1E 00 00 
2b592 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b596 22c 33 33 33 33 
2b59a 22d 33 33       | 	byte	$33[6]
2b59c 22e 6E 00 00 00 
2b5a0 22f 00 00 60 30 
2b5a4 230 18 00 3E 63 
2b5a8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b5ac 232 3E 00 00 00 
2b5b0 233 00 00 08 1C 
2b5b4 234 36 00 1E 30 
2b5b8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b5bc 236 6E 00 00 00 
2b5c0 237 00 00 00 00 
2b5c4 238 33 00 1E 30 
2b5c8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b5cc 23a 6E 00 00 00 
2b5d0 23b 00 00 1C 36 
2b5d4 23c 1C 00 33 33 
2b5d8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b5dc 23e 6E 00 00 00 
2b5e0 23f 00 00 60 30 
2b5e4 240 18 00 3E 63 
2b5e8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b5ec 242 3E 00 00 00 
2b5f0 243 00 00 00 00 
2b5f4 244 00 00 3E 63 
2b5f8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b5fc 246 3E 18 30 1E 
2b600 247 00 00 00 1C 
2b604 248 58 78 38 18 
2b608 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b60c 24a 3C 00 00 00 
2b610 24b 00 00 00 00 
2b614 24c 63 00 3E 63 
2b618 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b61c 24e 3E 00 00 00 
2b620 24f 66 33 00 3E 
2b624 250 63 63 63 63 
2b628 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b62c 252 3E 00 00 00 
2b630 253 00 00 CC 66 
2b634 254 33 00 3E 63 
2b638 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b63c 256 3E 00 00 00 
2b640 257 00 00 18 3C 
2b644 258 66 00 1C 18 
2b648 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b64c 25a 3C 00 00 00 
2b650 25b 30 18 00 7F 
2b654 25c 63 61 30 18 
2b658 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b65c 25e 7F 00 00 00 
2b660 25f 00 63 00 08 
2b664 260 1C 36 63 63 
2b668 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b66c 262 63 00 00 00 
2b670 263 30 18 00 3C 
2b674 264 66 43 03 03 
2b678 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b67c 266 3C 00 00 00 
2b680 267 30 18 00 7F 
2b684 268 66 46 16 1E 
2b688 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b68c 26a 7F 00 00 00 
2b690 26b 0C 06 00 0F 
2b694 26c 06 06 06 06 
2b698 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b69c 26e 7F 00 00 00 
2b6a0 26f 30 18 00 1C 
2b6a4 270 18 18 18 18 
2b6a8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b6ac 272 3C 00 00 00 
2b6b0 273 00 00 08 1C 
2b6b4 274 36 00 3E 63 
2b6b8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b6bc 276 3E 00 00 00 
2b6c0 277 00 00 00 00 
2b6c4 278 63 00 3E 63 
2b6c8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b6cc 27a 3E 00 00 00 
2b6d0 27b 00 00 00 6F 
2b6d4 27c 46 26 06 06 
2b6d8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b6dc 27e 7F 00 00 00 
2b6e0 27f 00 00 00 6E 
2b6e4 280 4C 2C 0C 0C 
2b6e8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b6ec 282 1E 00 00 00 
2b6f0 283 30 18 00 3E 
2b6f4 284 63 63 06 1C 
2b6f8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b6fc 286 3E 00 00 00 
2b700 287 00 00 60 30 
2b704 288 18 00 3E 63 
2b708 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b70c 28a 3E 00 00 00 
2b710 28b 00 63 00 3E 
2b714 28c 63 63 63 63 
2b718 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b71c 28e 3E 00 00 00 
2b720 28f 00 63 00 63 
2b724 290 63 63 63 63 
2b728 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b72c 292 3E 00 00 00 
2b730 293 6C 38 00 7E 
2b734 294 7E 5A 18 18 
2b738 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b73c 296 3C 00 00 00 
2b740 297 00 00 60 48 
2b744 298 2C 0C 3F 0C 
2b748 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b74c 29a 38 00 00 00 
2b750 29b 00 00 00 0F 
2b754 29c 26 36 1E 0E 
2b758 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b75c 29e 7F 00 00 00 
2b760 29f 00 00 00 00 
2b764 2a0 00 63 36 1C 
2b768 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b76c 2a2 00 00 00 00 
2b770 2a3 00 00       | 	byte	$00[6]
2b772 2a3 36 1C 08 00 
2b776 2a4 3E 63 03 03 
2b77a 2a5 03 63 3E 00 
2b77e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b782 2a7 30 18 0C 00 
2b786 2a8 1E 30 3E 33 
2b78a 2a9 33 33 6E 00 
2b78e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b792 2ab 60 30 18 00 
2b796 2ac 1C 18 18 18 
2b79a 2ad 18 18 3C 00 
2b79e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b7a2 2af 60 30 18 00 
2b7a6 2b0 3E 63 63 63 
2b7aa 2b1 63 63 3E 00 
2b7ae 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2b7b2 2b3 30 18 0C 00 
2b7b6 2b4 33 33 33 33 
2b7ba 2b5 33 33 6E 00 
2b7be 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b7c2 2b7 00 08 1C 36 
2b7c6 2b8 63 63 7F 63 
2b7ca 2b9 63 63 63 18 
2b7ce 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2b7d2 2bb 00 00 00 00 
2b7d6 2bc 1E 30 3E 33 
2b7da 2bd 33 33 6E 18 
2b7de 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2b7e2 2bf 00 7F 63 61 
2b7e6 2c0 30 18 0C 06 
2b7ea 2c1 43 63 7F 00 
2b7ee 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2b7f2 2c3 36 1C 08 00 
2b7f6 2c4 7F 33 18 0C 
2b7fa 2c5 06 63 7F 00 
2b7fe 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2b802 2c7 00 7F 66 46 
2b806 2c8 16 1E 16 06 
2b80a 2c9 46 66 7F 18 
2b80e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2b812 2cb 00 00 00 00 
2b816 2cc 3E 63 7F 03 
2b81a 2cd 03 63 3E 18 
2b81e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2b822 2cf 00 3C 66 03 
2b826 2d0 1F 03 0F 03 
2b82a 2d1 03 66 3C 00 
2b82e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2b832 2d3 60 30 18 00 
2b836 2d4 7F 33 18 0C 
2b83a 2d5 06 63 7F 00 
2b83e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2b842 2d7 00 3C 66 43 
2b846 2d8 03 03 03 03 
2b84a 2d9 43 66 3C 00 
2b84e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2b852 2db 00 00 00 00 
2b856 2dc 3E 63 06 1C 
2b85a 2dd 30 63 3E 18 
2b85e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2b862 2df 00 00 00 00 
2b866 2e0 00 00       | 	byte	$00[6]
2b868 2e1 6C 36 1B 36 
2b86c 2e2 6C 00 00 00 
2b870 2e3 00 00 00 00 
2b874 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b878 2e5 1B 36 6C 36 
2b87c 2e6 1B 00 00 00 
2b880 2e7 88 22 88 22 
2b884 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2b888 2e9 88 22 88 22 
2b88c 2ea 88 22 88 22 
2b890 2eb AA 55 AA 55 
2b894 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2b898 2ed AA 55 AA 55 
2b89c 2ee AA 55 AA 55 
2b8a0 2ef BB EE BB EE 
2b8a4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2b8a8 2f1 BB EE BB EE 
2b8ac 2f2 BB EE BB EE 
2b8b0 2f3 18 18 18 18 
2b8b4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2b8b8 2f5 18 18 18 18 
2b8bc 2f6 18 18 18 18 
2b8c0 2f7 18 18 18 18 
2b8c4 2f8 18 18 18    | 	byte	$18[15]
2b8c7 2f8 1F 18 18 18 
2b8cb 2f9 18 18 18 18 
2b8cf 2fa 18 30 18 00 
2b8d3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2b8d7 2fc 63 7F 63 63 
2b8db 2fd 63 63 00 00 
2b8df 2fe 00 1C 36 00 
2b8e3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2b8e7 300 63 7F 63 63 
2b8eb 301 63 63 00 00 
2b8ef 302 00 36 1C 00 
2b8f3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2b8f7 304 1E 16 06 46 
2b8fb 305 66 7F 00 00 
2b8ff 306 00 00 00 00 
2b903 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2b907 308 1C 30 60 63 
2b90b 309 63 3E 18 30 
2b90f 30a 1E 6C 6C 6C 
2b913 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2b917 30c 6F 6C 6C 6C 
2b91b 30d 6C 6C 6C 6C 
2b91f 30e 6C 6C 6C 6C 
2b923 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b927 310 6C 6C 6C 6C 
2b92b 311 6C 6C 6C 6C 
2b92f 312 6C          | 	byte	$6c[9]
2b930 313 00 00 00 00 
2b934 314 00          | 	byte	$00[5]
2b935 314 7F 60 6F 6C 
2b939 315 6C 6C 6C 6C 
2b93d 316 6C 6C 6C 6C 
2b941 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b945 318 6F 60 7F 00 
2b949 319 00 00 00 00 
2b94d 31a 00 00 00 18 
2b951 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2b955 31c 61 30 18 0C 
2b959 31d 06 43 63 7F 
2b95d 31e 00 00 00 00 
2b961 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2b965 320 00 7F 33 18 
2b969 321 0C 06 63 7F 
2b96d 322 00 00 00 00 
2b971 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2b975 324 00 00 1F 18 
2b979 325 18 18 18 18 
2b97d 326 18 18 18 18 
2b981 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b985 328 18 18 F8 00 
2b989 329 00 00 00 00 
2b98d 32a 00 00 00 18 
2b991 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b995 32c 18 18 FF 00 
2b999 32d 00 00 00 00 
2b99d 32e 00 00 00 00 
2b9a1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b9a5 330 00 00 FF 18 
2b9a9 331 18 18 18 18 
2b9ad 332 18 18 18 18 
2b9b1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b9b5 334 18 18 F8 18 
2b9b9 335 18 18 18 18 
2b9bd 336 18 18 18 00 
2b9c1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2b9c5 338 00 00 FF 00 
2b9c9 339 00 00 00 00 
2b9cd 33a 00 00 00 18 
2b9d1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b9d5 33c 18 18 FF 18 
2b9d9 33d 18 18 18 18 
2b9dd 33e 18 18 18 63 
2b9e1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2b9e5 340 36 63 63 7F 
2b9e9 341 63 63 63 63 
2b9ed 342 00 00 00 00 
2b9f1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2b9f5 344 00 1E 30 3E 
2b9f9 345 33 33 33 6E 
2b9fd 346 00 00 00 6C 
2ba01 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ba05 348 EC 0C FC 00 
2ba09 349 00 00 00 00 
2ba0d 34a 00 00 00 00 
2ba11 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba15 34c FC 0C EC 6C 
2ba19 34d 6C 6C 6C 6C 
2ba1d 34e 6C 6C 6C 6C 
2ba21 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba25 350 EF 00 FF 00 
2ba29 351 00 00 00 00 
2ba2d 352 00 00 00 00 
2ba31 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba35 354 FF 00 EF 6C 
2ba39 355 6C 6C 6C 6C 
2ba3d 356 6C 6C 6C 6C 
2ba41 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2ba45 358 EC 0C EC 6C 
2ba49 359 6C 6C 6C 6C 
2ba4d 35a 6C 6C 6C 00 
2ba51 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ba55 35c FF 00 FF 00 
2ba59 35d 00 00 00 00 
2ba5d 35e 00 00 00 6C 
2ba61 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2ba65 360 EF 00 EF 6C 
2ba69 361 6C 6C 6C 6C 
2ba6d 362 6C 6C 6C 00 
2ba71 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2ba75 364 63 3E 63 63 
2ba79 365 63 63 3E 63 
2ba7d 366 00 00 00 00 
2ba81 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2ba85 368 30 3C 36 33 
2ba89 369 33 33 33 6E 
2ba8d 36a 00 00 00 00 
2ba91 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2ba95 36c 66 66 6F 66 
2ba99 36d 66 66 36 1F 
2ba9d 36e 00 00 00 36 
2baa1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2baa5 370 66 66 66 66 
2baa9 371 66 66       | 	byte	$66[6]
2baab 371 36 1F 00 00 
2baaf 372 00 00 63 00 
2bab3 373 7F 66 46 16 
2bab7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2babb 375 66 7F 00 00 
2babf 376 00 6C 38 00 
2bac3 377 38 30 30 3C 
2bac7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2bacb 379 33 6E 00 00 
2bacf 37a 00 36 1C 00 
2bad3 37b 63 67 6F 7F 
2bad7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2badb 37d 63 63 00 00 
2badf 37e 00 30 18 00 
2bae3 37f 3C 18 18 18 
2bae7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2baeb 381 18 3C 00 00 
2baef 382 00 3C 66 00 
2baf3 383 3C 18 18 18 
2baf7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2bafb 385 18 3C 00 00 
2baff 386 00 00 00 36 
2bb03 387 1C 08 00 3E 
2bb07 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2bb0b 389 63 3E 00 00 
2bb0f 38a 00 18 18 18 
2bb13 38b 18 18 18 18 
2bb17 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2bb1b 38d 00 00 00 00 
2bb1f 38e 00 00 00 00 
2bb23 38f 00 00 00 00 | 	byte	$00[12]
2bb27 390 F8 18 18 18 
2bb2b 391 18 18 18 18 
2bb2f 392 18 FF FF FF 
2bb33 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2bb37 394 FF FF FF FF 
2bb3b 395 FF FF FF FF 
2bb3f 396 FF          | 	byte	$ff[9]
2bb40 397 00 00 00 00 
2bb44 398 00 00 00    | 	byte	$00[7]
2bb47 398 FF FF FF FF 
2bb4b 399 FF FF FF FF 
2bb4f 39a FF          | 	byte	$ff[9]
2bb50 39b 00 00 00 7E 
2bb54 39c 7E 5A 18 18 
2bb58 39d 18 18 18 18 
2bb5c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2bb60 39f 1C 36 1C 63 
2bb64 3a0 63 63 63 63 
2bb68 3a1 63 63 63 63 
2bb6c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bb70 3a3 FF FF FF FF 
2bb74 3a4 FF FF FF    | 	byte	$ff[7]
2bb77 3a4 00 00 00 00 
2bb7b 3a5 00 00 00 00 
2bb7f 3a6 00          | 	byte	$00[9]
2bb80 3a7 30 18 00 3E 
2bb84 3a8 63 63 63 63 
2bb88 3a9 63 63 63 63 
2bb8c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bb90 3ab 00 00 00 1E 
2bb94 3ac 33 33 33 1B 
2bb98 3ad 33 63 63 63 
2bb9c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2bba0 3af 1C 36 00 3E 
2bba4 3b0 63 63 63 63 
2bba8 3b1 63 63 63 63 
2bbac 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bbb0 3b3 30 18 00 63 
2bbb4 3b4 67 6F 7F 7B 
2bbb8 3b5 73 63 63 63 
2bbbc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2bbc0 3b7 00 00 60 30 
2bbc4 3b8 18 00 3B 66 
2bbc8 3b9 66 66 66 66 
2bbcc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bbd0 3bb 00 00 36 1C 
2bbd4 3bc 08 00 3B 66 
2bbd8 3bd 66 66 66 66 
2bbdc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2bbe0 3bf 36 1C 00 3E 
2bbe4 3c0 63 63 06 1C 
2bbe8 3c1 30 60 63 63 
2bbec 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2bbf0 3c3 00 00 36 1C 
2bbf4 3c4 08 00 3E 63 
2bbf8 3c5 06 1C 30 63 
2bbfc 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2bc00 3c7 30 18 00 3F 
2bc04 3c8 66 66 66 3E 
2bc08 3c9 36 66 66 66 
2bc0c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2bc10 3cb 30 18 00 63 
2bc14 3cc 63 63 63 63 
2bc18 3cd 63 63 63 63 
2bc1c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc20 3cf 00 00 60 30 
2bc24 3d0 18 00 3B 6E 
2bc28 3d1 66 06 06 06 
2bc2c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2bc30 3d3 66 33 00 63 
2bc34 3d4 63 63 63 63 
2bc38 3d5 63 63 63 63 
2bc3c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2bc40 3d7 00 00 60 30 
2bc44 3d8 18 00 63 63 
2bc48 3d9 63 63 63 63 
2bc4c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2bc50 3db 30 18 00 66 
2bc54 3dc 66 66 66 3C 
2bc58 3dd 18 18 18 18 
2bc5c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2bc60 3df 00 00 00 08 
2bc64 3e0 0C 0C 3F 0C 
2bc68 3e1 0C 0C 0C 6C 
2bc6c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2bc70 3e3 30 18 00 00 
2bc74 3e4 00 00 00 00 
2bc78 3e5 00 00 00 00 
2bc7c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bc80 3e7 00 00 00 00 
2bc84 3e8 00 00 00 00 | 	byte	$00[8]
2bc88 3e9 7F 00 00 00 
2bc8c 3ea 00 00 00 00 
2bc90 3eb 66 33 00 00 
2bc94 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2bc98 3ed 00 00 00 00 
2bc9c 3ee 00 00 00 00 
2bca0 3ef 00 00 00 00 
2bca4 3f0 00 00 00 00 
2bca8 3f1 00 00 00 00 
2bcac 3f2 00          | 	byte	$00[21]
2bcad 3f2 0C 06 3C 36 
2bcb1 3f3 1C 00 00 00 
2bcb5 3f4 00 00 00 00 
2bcb9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcbd 3f6 00 00 00 63 
2bcc1 3f7 3E 00 00 00 
2bcc5 3f8 00 00 00 00 
2bcc9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bccd 3fa 00 00 00 00 
2bcd1 3fb 3E 63 06 1C 
2bcd5 3fc 36 63 63 36 
2bcd9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2bcdd 3fe 00 00 00 00 
2bce1 3ff 00 00 00 00 | 	byte	$00[8]
2bce5 400 18 00 7E 00 
2bce9 401 18 00 00 00 
2bced 402 00 00 00 00 
2bcf1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bcf5 404 00 00 00 00 
2bcf9 405 00 00 00 00 | 	byte	$00[8]
2bcfd 406 18 30 1E 00 
2bd01 407 00 00 1C 36 
2bd05 408 36 1C 00 00 
2bd09 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2bd0d 40a 00 00 00 00 
2bd11 40b 63 00 00 00 
2bd15 40c 00 00 00 00 
2bd19 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd1d 40e 00 00 00 18 
2bd21 40f 18 00 00 00 
2bd25 410 00 00 00 00 
2bd29 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd2d 412 00 00 00 00 
2bd31 413 00          | 	byte	$00[5]
2bd32 413 CC 66 33 00 
2bd36 414 33 33 33 33 
2bd3a 415 33 33 6E 00 
2bd3e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2bd42 417 00 3F 66 66 
2bd46 418 66 3E 36 66 
2bd4a 419 66 66 6F 00 
2bd4e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2bd52 41b 36 1C 08 00 
2bd56 41c 3B 6E 66 06 
2bd5a 41d 06 06 0F 00 
2bd5e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2bd62 41f 00 00 00 7E 
2bd66 420 7E 7E 7E 7E 
2bd6a 421 7E 7E 00 00 
2bd6e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2bd72 423 00 00 00 00 
2bd76 424 00 00 00 00 
2bd7a 425 00 00 00 00 
2bd7e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bd80 427             | 'vga_font       file "vgafont.def"
2bd80 427 00 00 00 00 
      ...             
2bdb0 433 00 00 00 00 
2bdb4 434 00 00 00    | st_font        file "st4font.def"
2bdb7 434 FF FF 00 00 
2bdbb 435 00 00 00 00 
2bdbf 436 00 18 18 18 
2bdc3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bdc7 438 18 18 18 18 
2bdcb 439 18 18 18 18 
2bdcf 43a 18          | 	byte	$18[9]
2bdd0 43b 00 00 00 00 
2bdd4 43c 00 00 00    | 	byte	$00[7]
2bdd7 43c FF FF 18 18 
2bddb 43d 18 18 18 18 
2bddf 43e 18 18 18 18 
2bde3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2bde7 440 FF FF 00 00 
2bdeb 441 00 00 00 00 
2bdef 442 00 18 18 18 
2bdf3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2bdf7 444 1F 1F 18 18 
2bdfb 445 18 18 18 18 
2bdff 446 18 18 18 18 
2be03 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2be07 448 F8 F8 18 18 
2be0b 449 18 18 18 18 
2be0f 44a 18 00 00 00 
2be13 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2be17 44c 1F 1F 18 18 
2be1b 44d 18 18 18 18 
2be1f 44e 18 00 00 00 
2be23 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2be27 450 F8 F8 18 18 
2be2b 451 18 18 18 18 
2be2f 452 18 18 18 18 
2be33 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2be37 454 1F 1F 00 00 
2be3b 455 00 00 00 00 
2be3f 456 00 18 18 18 
2be43 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2be47 458 F8 F8 00 00 
2be4b 459 00 00 00 00 
2be4f 45a 00 18 18 18 
2be53 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2be57 45c FF FF 18 18 
2be5b 45d 18 18 18 18 
2be5f 45e 18 00 00 18 
2be63 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2be67 460 66 7E 7E 66 
2be6b 461 66 66 66 30 
2be6f 462 18 00 00 7E 
2be73 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2be77 464 3E 06 06 06 
2be7b 465 06 7E 7E 18 
2be7f 466 0C 30 18 3C 
2be83 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2be87 468 06 06 06 66 
2be8b 469 66 7E 3C 00 
2be8f 46a 00 30 18 66 
2be93 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2be97 46c 7E 7E 76 76 
2be9b 46d 66 66 66 00 
2be9f 46e 00 30 18 7C 
2bea3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2bea7 470 1C 38 70 60 
2beab 471 60 7E 3E 00 
2beaf 472 00 30 18 7E 
2beb3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2beb7 474 18 0C 0C 06 
2bebb 475 06 7E 7E 00 
2bebf 476 00 18 18 00 
2bec3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2bec7 478 18 18 0C 0C 
2becb 479 06 7E 7E 00 
2becf 47a 00 30 18 3C 
2bed3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2bed7 47c 66 66 66 66 
2bedb 47d 66          | 	byte	$66[5]
2bedc 47e 7E 3C 00 00 
2bee0 47f 00 00 06 06 
2bee4 480 06 06 16 1E 
2bee8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2beec 482 7E 7E 00 00 
2bef0 483 00 00 00 00 
2bef4 484 00 3C 7C 60 
2bef8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2befc 486 7E 7C 30 18 
2bf00 487 00 00 00 00 
2bf04 488 00 3C 7E 66 
2bf08 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2bf0c 48a 7E 7C 18 0C 
2bf10 48b 00 00 30 18 
2bf14 48c 00 3C 3E 06 
2bf18 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2bf1c 48e 7E 7C 00 00 
2bf20 48f 00 00 30 18 
2bf24 490 00 3E 7E 66 
2bf28 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2bf2c 492 66 66 00 00 
2bf30 493 00 00 30 18 
2bf34 494 00 7C 7E 06 
2bf38 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2bf3c 496 7E 3E 00 00 
2bf40 497 00 00 30 18 
2bf44 498 00 7E 7E 30 
2bf48 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2bf4c 49a 7E 7E 00 00 
2bf50 49b 00 00 18 18 
2bf54 49c 00 7E 7E 30 
2bf58 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2bf5c 49e 7E 7E 00 00 
2bf60 49f 00 00 30 18 
2bf64 4a0 00 3C 7E 66 
2bf68 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2bf6c 4a2 7E 3C 00 00 
2bf70 4a3 00 00 1C 1C 
2bf74 4a4 18 18 38 3C 
2bf78 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2bf7c 4a6 3C 3C 00 00 
2bf80 4a7 00 00 00 00 
2bf84 4a8 00 00 00 00 
2bf88 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2bf8c 4aa 00 00 00 00 
2bf90 4ab 00 00       | 	byte	$00[6]
2bf92 4ab 18 18 18 18 
2bf96 4ac 18 18 18 18 | 	byte	$18[8]
2bf9a 4ad 00 00 18 18 
2bf9e 4ae 00 00 00 00 
2bfa2 4af 66 66 66 66 
2bfa6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2bfaa 4b1 00 00 00 00 
2bfae 4b2 00 00 00 00 
2bfb2 4b3 00          | 	byte	$00[9]
2bfb3 4b3 66 66 FF FF 
2bfb7 4b4 66 66 FF FF 
2bfbb 4b5 66 66 00 00 
2bfbf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2bfc3 4b7 7C 7E 06 06 
2bfc7 4b8 3E 7C 60 60 
2bfcb 4b9 7E 3E 18 18 
2bfcf 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2bfd3 4bb 66 30 30 18 
2bfd7 4bc 18 0C 0C 66 
2bfdb 4bd 66 00 00 00 
2bfdf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2bfe3 4bf 66 66 3C 1C 
2bfe7 4c0 1C FC FE 66 
2bfeb 4c1 66 FE FC 00 
2bfef 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2bff3 4c3 18 18 18 18 
2bff7 4c4 00 00 00 00 
2bffb 4c5 00 00 00 00 
2bfff 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2c003 4c7 18 1C 0C 0C 
2c007 4c8 0C 0C 0C 0C 
2c00b 4c9 1C 18 30 00 
2c00f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2c013 4cb 18 38 30 30 
2c017 4cc 30 30 30 30 
2c01b 4cd 38 18 0C 00 
2c01f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2c023 4cf 66 66 3C 3C 
2c027 4d0 FF FF 3C 3C 
2c02b 4d1 66 66 00 00 
2c02f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2c033 4d3 00 18 18 18 
2c037 4d4 7E 7E 18 18 
2c03b 4d5 18 00 00 00 
2c03f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c043 4d7 00 00 00 00 
2c047 4d8 00 00       | 	byte	$00[6]
2c049 4d9 18 18 18 18 
2c04d 4da 18          | 	byte	$18[5]
2c04e 4da 0C 04 00 00 
2c052 4db 00 00 00 00 
2c056 4dc 7E 7E 00 00 
2c05a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2c05e 4de 00 00 00 00 
2c062 4df 00 00 00 00 
2c066 4e0 00 00 00 00 
2c06a 4e1 00          | 	byte	$00[13]
2c06b 4e1 18 18 18 00 
2c06f 4e2 00 00 00 60 
2c073 4e3 60 60 30 30 
2c077 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2c07b 4e5 06 06 06 00 
2c07f 4e6 00 00 00 3C 
2c083 4e7 7E 66 66 66 
2c087 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2c08b 4e9 66 7E 3C 00 
2c08f 4ea 00 00 00 18 
2c093 4eb 18 1C 1C 18 
2c097 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2c09b 4ed 18 7E 7E 00 
2c09f 4ee 00 00 00 3C 
2c0a3 4ef 7E 66 66 30 
2c0a7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2c0ab 4f1 0C 7E 7E 00 
2c0af 4f2 00 00 00 7E 
2c0b3 4f3 7E 30 30 18 
2c0b7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2c0bb 4f5 66 7E 3C 00 
2c0bf 4f6 00 00 00 30 
2c0c3 4f7 30 38 38 3C 
2c0c7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2c0cb 4f9 7E 30 30 00 
2c0cf 4fa 00 00 00 7E 
2c0d3 4fb 7E 06 06 3E 
2c0d7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2c0db 4fd 66 7E 3C 00 
2c0df 4fe 00 00 00 38 
2c0e3 4ff 3C 0E 06 06 
2c0e7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2c0eb 501 66 7E 3C 00 
2c0ef 502 00 00 00 7E 
2c0f3 503 7E 60 60 30 
2c0f7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2c0fb 505 0C 0C 0C 00 
2c0ff 506 00 00 00 3C 
2c103 507 7E 66 66 3C 
2c107 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2c10b 509 66 7E 3C 00 
2c10f 50a 00 00 00 3C 
2c113 50b 7E 66 66 7E 
2c117 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2c11b 50d 70 3C 1C 00 
2c11f 50e 00 00 00 00 
2c123 50f 00 00 18 18 
2c127 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2c12b 511 18 18 18 00 
2c12f 512 00 00 00 00 
2c133 513 00 00 18 18 
2c137 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2c13b 515 18 18 18 0C 
2c13f 516 04 00 00 00 
2c143 517 70 38 1C 0E 
2c147 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2c14b 519 70 00 00 00 
2c14f 51a 00 00 00 00 
2c153 51b 00 00 7E 7E 
2c157 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2c15b 51d 00 00 00 00 
2c15f 51e 00 00 00 00 | 	byte	$00[8]
2c163 51f 0E 1C 38 70 
2c167 520 E0 70 38 1C 
2c16b 521 0E 00 00 00 
2c16f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2c173 523 7E 66 66 30 
2c177 524 30 18 18 18 
2c17b 525 00 18 18 00 
2c17f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2c183 527 7E 66 66 66 
2c187 528 66 36 06 66 
2c18b 529 66 7E 3C 00 
2c18f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2c193 52b 3C 7E 66 66 
2c197 52c 66 7E 7E 66 
2c19b 52d 66 66 66 00 
2c19f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2c1a3 52f 7E 66 66 7E 
2c1a7 530 3E 66 66 66 
2c1ab 531 66 7E 3E 00 
2c1af 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2c1b3 533 7E 66 66 06 
2c1b7 534 06 06 06 66 
2c1bb 535 66 7E 3C 00 
2c1bf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2c1c3 537 7E 66 66 66 
2c1c7 538 66 66 66 66 
2c1cb 539 66 7E 3E 00 
2c1cf 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2c1d3 53b 7E 06 06 3E 
2c1d7 53c 3E 06 06 06 
2c1db 53d 06 7E 7E 00 
2c1df 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2c1e3 53f 7E 06 06 3E 
2c1e7 540 3E 06 06 06 
2c1eb 541 06 06 06 00 
2c1ef 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2c1f3 543 7E 06 06 76 
2c1f7 544 76 66 66 66 
2c1fb 545 66 7E 3C 00 
2c1ff 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2c203 547 66 66 66 7E 
2c207 548 7E 66 66 66 
2c20b 549 66 66 66 00 
2c20f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2c213 54b 7E 18 18 18 
2c217 54c 18 18 18 18 
2c21b 54d 18 7E 7E 00 
2c21f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2c223 54f 60 60 60 60 
2c227 550 60 60 60    | 	byte	$60[7]
2c22a 551 66 66 7E 3C 
2c22e 552 00 00 00 00 
2c232 553 66 66 36 36 
2c236 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2c23a 555 66 66 C6 C6 
2c23e 556 00 00 00 00 
2c242 557 06 06 06 06 
2c246 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2c24a 559 06 06 7E 7E 
2c24e 55a 00 00 00 00 
2c252 55b C6 C6 EE EE 
2c256 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2c25a 55d C6 C6 C6 C6 
2c25e 55e 00 00 00 00 
2c262 55f 66 66 66 6E 
2c266 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2c26a 561 76 66 66 66 
2c26e 562 00 00 00 00 
2c272 563 3C 7E 66 66 
2c276 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c27a 565 66 66 7E 3C 
2c27e 566 00 00 00 00 
2c282 567 3E 7E 66 66 
2c286 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2c28a 569 06 06 06 06 
2c28e 56a 00 00 00 00 
2c292 56b 3C 7E 66 66 
2c296 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2c29a 56d 66 56 3E 6C 
2c29e 56e 00 00 00 00 
2c2a2 56f 3E 7E 66 66 
2c2a6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2c2aa 571 66 66 C6 C6 
2c2ae 572 00 00 00 00 
2c2b2 573 7C 7E 06 06 
2c2b6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2c2ba 575 60 60 7E 3E 
2c2be 576 00 00 00 00 
2c2c2 577 7E 7E 18 18 
2c2c6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2c2ca 579 18 18 18 18 
2c2ce 57a 00 00 00 00 
2c2d2 57b 66 66 66 66 
2c2d6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c2da 57d 66 66 7E 3C 
2c2de 57e 00 00 00 00 
2c2e2 57f 66 66 66 66 
2c2e6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2c2ea 581 3C 3C 18 18 
2c2ee 582 00 00 00 00 
2c2f2 583 C6 C6 C6 C6 
2c2f6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2c2fa 585 FE EE C6 82 
2c2fe 586 00 00 00 00 
2c302 587 66 66 66 3C 
2c306 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2c30a 589 3C 66 66 66 
2c30e 58a 00 00 00 00 
2c312 58b 66 66 66 66 
2c316 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2c31a 58d 18 18 18 18 
2c31e 58e 00 00 00 00 
2c322 58f 7E 7E 30 30 
2c326 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2c32a 591 06 06 7E 7E 
2c32e 592 00 00 00 00 
2c332 593 3C 3C 0C 0C 
2c336 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2c33a 595 0C 0C 3C 3C 
2c33e 596 00 00 00 00 
2c342 597 06 06 0C 0C 
2c346 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2c34a 599 60 60 C0 C0 
2c34e 59a 00 00 00 00 
2c352 59b 3C 3C 30 30 
2c356 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2c35a 59d 30 30 3C 3C 
2c35e 59e 00 00 00 00 
2c362 59f 18 18 3C 3C 
2c366 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2c36a 5a1 00 00 00 00 
2c36e 5a2 00 00 00 00 
2c372 5a3 00 00 00 00 
2c376 5a4 00 00 00 00 
2c37a 5a5 00 00       | 	byte	$00[18]
2c37c 5a6 FE FE 00 00 
2c380 5a7 00 00 0C 0C 
2c384 5a8 18 18 00 00 
2c388 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2c38c 5aa 00 00 00 00 
2c390 5ab 00 00 00 00 
2c394 5ac 00          | 	byte	$00[9]
2c395 5ac 3C 7C 60 7C 
2c399 5ad 7E 66 66 7E 
2c39d 5ae 7C 00 00 00 
2c3a1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2c3a5 5b0 3E 7E 66 66 
2c3a9 5b1 66 66 66 7E 
2c3ad 5b2 3E 00 00 00 
2c3b1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2c3b5 5b4 3C 3E 06 06 
2c3b9 5b5 06 06 06 7E 
2c3bd 5b6 7C 00 00 00 
2c3c1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2c3c5 5b8 7C 7E 66 66 
2c3c9 5b9 66 66 66 7E 
2c3cd 5ba 7C 00 00 00 
2c3d1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2c3d5 5bc 3C 7E 66 66 
2c3d9 5bd 7E 06 06 7E 
2c3dd 5be 7C 00 00 00 
2c3e1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2c3e5 5c0 18 7E 7E 18 
2c3e9 5c1 18 18 18 18 
2c3ed 5c2 18 00 00 00 
2c3f1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2c3f5 5c4 7C 7E 66 66 
2c3f9 5c5 66 66 7E 7C 
2c3fd 5c6 60 7E 3E 00 
2c401 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2c405 5c8 3E 7E 66 66 
2c409 5c9 66 66 66 66 
2c40d 5ca 66 00 00 00 
2c411 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2c415 5cc 1C 1C 18 18 
2c419 5cd 18 18 18 3C 
2c41d 5ce 3C 00 00 00 
2c421 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2c425 5d0 30 30 30 30 
2c429 5d1 30 30 30 30 
2c42d 5d2 30          | 	byte	$30[9]
2c42e 5d2 3E 1E 00 00 
2c432 5d3 06 06 06 36 
2c436 5d4 36 1E 1E 1E 
2c43a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2c43e 5d6 00 00 00 00 
2c442 5d7 1C 1C 18 18 
2c446 5d8 18 18 18 18 
2c44a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2c44e 5da 00 00 00 00 
2c452 5db 00 00 00    | 	byte	$00[7]
2c455 5dc 6C FE FE D6 
2c459 5dd D6 C6 C6 C6 
2c45d 5de C6 00 00 00 
2c461 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2c465 5e0 3E 7E 66 66 
2c469 5e1 66 66 66 66 
2c46d 5e2 66 00 00 00 
2c471 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2c475 5e4 3C 7E 66 66 
2c479 5e5 66 66 66 7E 
2c47d 5e6 3C 00 00 00 
2c481 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2c485 5e8 3E 7E 66 66 
2c489 5e9 66 66 66 7E 
2c48d 5ea 3E 06 06 00 
2c491 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2c495 5ec 7C 7E 66 66 
2c499 5ed 66 66 66 7E 
2c49d 5ee 7C 60 60 00 
2c4a1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2c4a5 5f0 3E 7E 66 06 
2c4a9 5f1 06 06 06 06 
2c4ad 5f2 06 00 00 00 
2c4b1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2c4b5 5f4 7C 7E 06 0E 
2c4b9 5f5 3C 70 60 7E 
2c4bd 5f6 3E 00 00 00 
2c4c1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2c4c5 5f8 7E 7E 18 18 
2c4c9 5f9 18 18 18 78 
2c4cd 5fa 70 00 00 00 
2c4d1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2c4d5 5fc 66 66 66 66 
2c4d9 5fd 66 66 66    | 	byte	$66[7]
2c4dc 5fe 7E 7C 00 00 
2c4e0 5ff 00 00 00 00 
2c4e4 600 00 66 66 66 
2c4e8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2c4ec 602 18 18 00 00 
2c4f0 603 00 00 00 00 
2c4f4 604 00 C6 C6 D6 
2c4f8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c4fc 606 C6 82 00 00 
2c500 607 00 00 00 00 
2c504 608 00 66 66 3C 
2c508 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c50c 60a 66 66 00 00 
2c510 60b 00 00 00 00 
2c514 60c 00 66 66 66 
2c518 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c51c 60e 7C 60 7E 3E 
2c520 60f 00 00 00 00 
2c524 610 00 7E 7E 30 
2c528 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c52c 612 7E 7E 00 00 
2c530 613 00 00 30 18 
2c534 614 18 18 18 0C 
2c538 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c53c 616 18 30 00 00 
2c540 617 00 00 18 18 
2c544 618 18 18 18 18 
2c548 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c54c 61a 18 18 00 00 
2c550 61b 00 00 0C 18 
2c554 61c 18 18 18 30 
2c558 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c55c 61e 18 0C 00 00 
2c560 61f 00 00 6C 7E 
2c564 620 36 00 00 00 
2c568 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c56c 622 00 00 00 00 
2c570 623 00 00 00 00 
2c574 624 00          | 	byte	$00[9]
2c575 624 18 18 18 18 
2c579 625 18 18 00 00 
2c57d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c580 627             | 'amiga_font     file "amigafont.def"
2c580 627 00 6C FE FE 
2c584 628 7C 38 10 00 
2c588 629 18 18 18 F8 
2c58c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c590 62b C0 C0 C0 C0 
2c594 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c598 62d 18 18 18 1F 
2c59c 62e 1F 00 00 00 
2c5a0 62f 18 18 18 1F 
2c5a4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c5a8 631 00 00 00 1F 
2c5ac 632 1F 18 18 18 
2c5b0 633 C0 E0 70 38 
2c5b4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c5b8 635 03 07 0E 1C 
2c5bc 636 38 70 E0 C0 
2c5c0 637 80 C0 E0 F0 
2c5c4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c5c8 639 00 00 00 00 
2c5cc 63a F0 F0 F0 F0 
2c5d0 63b 01 03 07 0F 
2c5d4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c5d8 63d F0 F0 F0 F0 
2c5dc 63e 00 00 00 00 
2c5e0 63f 0F 0F 0F 0F 
2c5e4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c5e8 641 FF FF 00 00 
2c5ec 642 00 00 00 00 
2c5f0 643 00 00 00 00 
2c5f4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c5f8 645 00 00 00 00 
2c5fc 646 0F 0F 0F 0F 
2c600 647 00 38 38 EE 
2c604 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c608 649 00 00 00 F8 
2c60c 64a F8 18 18 18 
2c610 64b 00 00 00 FF 
2c614 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c618 64d 18 18 18 FF 
2c61c 64e FF 18 18 18 
2c620 64f 00 00 3C 7E 
2c624 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c628 651 00 00 00 00 
2c62c 652 FF FF FF FF 
2c630 653 03 03 03 03 
2c634 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c638 655 00 00 00 FF 
2c63c 656 FF 18 18 18 
2c640 657 18 18 18 FF 
2c644 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c648 659 0F 0F 0F 0F 
2c64c 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c650 65b 18 18 18 F8 
2c654 65c F8 00 00 00 
2c658 65d 1E 06 1E 06 
2c65c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c660 65f 00 18 3C 7E 
2c664 660 18 18 18 00 
2c668 661 00 18 18 18 
2c66c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c670 663 00 18 0C 7E 
2c674 664 0C 18 00 00 
2c678 665 00 18 30 7E 
2c67c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c680 667 00 00 00 00 
2c684 668 00 00 00 00 
2c688 669 00          | 	byte	$00[9]
2c689 669 18 18 18 18 
2c68d 66a 00 18 00 00 
2c691 66b 66 66 66 00 
2c695 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c699 66d 66 FF 66 66 
2c69d 66e FF 66 00 18 
2c6a1 66f 7C 06 3C 60 
2c6a5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c6a9 671 66 36 18 0C 
2c6ad 672 66 62 00 38 
2c6b1 673 6C 38 1C F6 
2c6b5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c6b9 675 18 18 18 00 
2c6bd 676 00 00 00 00 
2c6c1 677 70 38 18 18 
2c6c5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c6c9 679 0E 1C 18 18 
2c6cd 67a 1C 0E 00 00 
2c6d1 67b 66 3C FF 3C 
2c6d5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c6d9 67d 18 18 7E 18 
2c6dd 67e 18 00 00 00 
2c6e1 67f 00 00 00 00 
2c6e5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c6e9 681 00 00 7E 00 
2c6ed 682 00 00 00 00 
2c6f1 683 00 00 00 00 
2c6f5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c6f9 685 60 30 18 0C 
2c6fd 686 06 02 00 00 
2c701 687 3C 66 76 6E 
2c705 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c709 689 18 1C 18 18 
2c70d 68a 18 7E 00 00 
2c711 68b 3C 66 30 18 
2c715 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c719 68d 7E 30 18 30 
2c71d 68e 66 3C 00 00 
2c721 68f 30 38 3C 36 
2c725 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c729 691 7E 06 3E 60 
2c72d 692 66 3C 00 00 
2c731 693 3C 06 3E 66 
2c735 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c739 695 7E 60 30 18 
2c73d 696 0C 0C 00 00 
2c741 697 3C 66 3C 66 
2c745 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c749 699 3C 66 7C 60 
2c74d 69a 30 1C 00 00 
2c751 69b 00 18 18 00 
2c755 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c759 69d 00 18 18 00 
2c75d 69e 18 18 0C 60 
2c761 69f 30 18 0C 18 
2c765 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c769 6a1 00 7E 00 00 
2c76d 6a2 7E 00 00 06 
2c771 6a3 0C 18 30 18 
2c775 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c779 6a5 3C 66 30 18 
2c77d 6a6 00 18 00 00 
2c781 6a7 3C 66 76 76 
2c785 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c789 6a9 18 3C 66 66 
2c78d 6aa 7E 66 00 00 
2c791 6ab 3E 66 3E 66 
2c795 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c799 6ad 3C 66 06 06 
2c79d 6ae 66 3C 00 00 
2c7a1 6af 1E 36 66 66 
2c7a5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c7a9 6b1 7E 06 3E 06 
2c7ad 6b2 06 7E 00 00 
2c7b1 6b3 7E 06 3E 06 
2c7b5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2c7b9 6b5 7C 06 06 76 
2c7bd 6b6 66 7C 00 00 
2c7c1 6b7 66 66 7E 66 
2c7c5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2c7c9 6b9 7E 18 18 18 
2c7cd 6ba 18 7E 00 00 
2c7d1 6bb 60 60 60 60 
2c7d5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2c7d9 6bd 66 36 1E 1E 
2c7dd 6be 36 66 00 00 
2c7e1 6bf 06 06 06 06 
2c7e5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2c7e9 6c1 C6 EE FE D6 
2c7ed 6c2 C6 C6 00 00 
2c7f1 6c3 66 6E 7E 7E 
2c7f5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2c7f9 6c5 3C 66 66 66 
2c7fd 6c6 66 3C 00 00 
2c801 6c7 3E 66 66 3E 
2c805 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2c809 6c9 3C 66 66 66 
2c80d 6ca 36 6C 00 00 
2c811 6cb 3E 66 66 3E 
2c815 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2c819 6cd 3C 06 3C 60 
2c81d 6ce 60 3C 00 00 
2c821 6cf 7E 18 18 18 
2c825 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2c829 6d1 66 66 66 66 
2c82d 6d2 66          | 	byte	$66[5]
2c82e 6d2 7E 00 00 66 
2c832 6d3 66 66 66 3C 
2c836 6d4 18 00 00 C6 
2c83a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2c83e 6d6 C6 00 00 66 
2c842 6d7 66 3C 3C 66 
2c846 6d8 66 00 00 66 
2c84a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2c84e 6da 18 00 00 7E 
2c852 6db 30 18 0C 06 
2c856 6dc 7E 00 00 78 
2c85a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2c85e 6de 78 00 00 02 
2c862 6df 06 0C 18 30 
2c866 6e0 60 00 00 1E 
2c86a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2c86e 6e2 1E 00 00 10 
2c872 6e3 38 6C C6 00 
2c876 6e4 00 00 00 00 
2c87a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c87e 6e6 FF 00 00 18 
2c882 6e7 3C 7E 7E 3C 
2c886 6e8 18 00 00 00 
2c88a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2c88e 6ea 7C 00 00 06 
2c892 6eb 06 3E 66 66 
2c896 6ec 3E 00 00 00 
2c89a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2c89e 6ee 3C 00 00 60 
2c8a2 6ef 60 7C 66 66 
2c8a6 6f0 7C 00 00 00 
2c8aa 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2c8ae 6f2 3C 00 00 70 
2c8b2 6f3 18 7C 18 18 
2c8b6 6f4 18 00 00 00 
2c8ba 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2c8be 6f6 60 3E 00 06 
2c8c2 6f7 06 3E 66 66 
2c8c6 6f8 66 00 00 18 
2c8ca 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2c8ce 6fa 3C 00 00 60 
2c8d2 6fb 00 60 60 60 
2c8d6 6fc 60 3C 00 06 
2c8da 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2c8de 6fe 66 00 00 1C 
2c8e2 6ff 18 18 18 18 
2c8e6 700 3C 00 00 00 
2c8ea 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2c8ee 702 C6 00 00 00 
2c8f2 703 3E 66 66 66 
2c8f6 704 66 00 00 00 
2c8fa 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2c8fe 706 3C 00 00 00 
2c902 707 3E 66 66 3E 
2c906 708 06 06 00 00 
2c90a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2c90e 70a 60 60 00 00 
2c912 70b 3E 66 06 06 
2c916 70c 06 00 00 00 
2c91a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2c91e 70e 3E 00 00 18 
2c922 70f 7E 18 18 18 
2c926 710 70 00 00 00 
2c92a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2c92e 712 7C 00 00 00 
2c932 713 66 66 66 3C 
2c936 714 18 00 00 00 
2c93a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2c93e 716 6C 00 00 00 
2c942 717 66 3C 18 3C 
2c946 718 66 00 00 00 
2c94a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2c94e 71a 30 1E 00 00 
2c952 71b 7E 30 18 0C 
2c956 71c 7E 00 00 18 
2c95a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2c95e 71e 3C 00 18 18 
2c962 71f 18 18 18 18 
2c966 720 18 18 00 7E 
2c96a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2c96e 722 60 00 10 18 
2c972 723 1C 1E 1C 18 
2c976 724 10 00 08 18 
2c97a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2c97e 726 08 00       | 	byte	$08, $00
2c980 727 00 00 00 00 
2c984 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2c985 728 80 00 00 00 
2c989 729 00 80 00 00 
2c98d 72a 80 80 00 00 
2c991 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2c995 72c 80 00 80 00 
2c999 72d 00 40 80 00 
2c99d 72e AA AA AA 00 
2c9a1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2c9a5 730 FF 00 00 00 
2c9a9 731 00 FF 00 00 
2c9ad 732 FF FF 00 00 
2c9b1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2c9b5 734 FF 00 FF 00 
2c9b9 735 00 FF FF 00 
2c9bd 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2c9c0 737 00 00 00 00 
2c9c4 738 00          | ataripalette   file "ataripalettep2.def"
2c9c5 738 11 11 11 00 
2c9c9 739 22 22 22 00 
2c9cd 73a 33 33 33 00 
2c9d1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2c9d5 73c 55 55 55 00 
2c9d9 73d 66 66 66 00 
2c9dd 73e 77 77 77 00 
2c9e1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2c9e5 740 99 99 99 00 
2c9e9 741 AA AA AA 00 
2c9ed 742 BB BB BB 00 
2c9f1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2c9f5 744 DD DD DD 00 
2c9f9 745 EE EE EE 00 
2c9fd 746 FF FF FF 00 
2ca01 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2ca05 748 00 14 40 00 
2ca09 749 00 1E 60 00 
2ca0d 74a 00 28 80 00 
2ca11 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2ca15 74c 00 3C BF 00 
2ca19 74d 00 46 DF 00 
2ca1d 74e 00 50 FF 00 
2ca21 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2ca25 750 39 77 FF 00 
2ca29 751 55 8A FF 00 
2ca2d 752 71 9E FF 00 
2ca31 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2ca35 754 AA C5 FF 00 
2ca39 755 C6 D8 FF 00 
2ca3d 756 E3 EC FF 00 
2ca41 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2ca45 758 00 00 40 00 
2ca49 759 00 00 60 00 
2ca4d 75a 00 00 80 00 
2ca51 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2ca55 75c 00 00 BF 00 
2ca59 75d 00 00 DF 00 
2ca5d 75e 00 00 FF 00 
2ca61 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2ca65 760 39 39 FF 00 
2ca69 761 55 55 FF 00 
2ca6d 762 71 71 FF 00 
2ca71 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2ca75 764 AA AA FF 00 
2ca79 765 C6 C6 FF 00 
2ca7d 766 E3 E3 FF 00 
2ca81 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2ca85 768 20 00 40 00 
2ca89 769 30 00 60 00 
2ca8d 76a 40 00 80 00 
2ca91 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2ca95 76c 60 00 BF 00 
2ca99 76d 70 00 DF 00 
2ca9d 76e 80 00 FF 00 
2caa1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2caa5 770 9C 39 FF 00 
2caa9 771 AA 55 FF 00 
2caad 772 B8 71 FF 00 
2cab1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2cab5 774 D5 AA FF 00 
2cab9 775 E3 C6 FF 00 
2cabd 776 F1 E3 FF 00 
2cac1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2cac5 778 40 00 40 00 
2cac9 779 60 00 60 00 
2cacd 77a 80 00 80 00 
2cad1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2cad5 77c BF 00 BF 00 
2cad9 77d DF 00 DF 00 
2cadd 77e FF 00 FF 00 
2cae1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2cae5 780 FF 39 FF 00 
2cae9 781 FF 55 FF 00 
2caed 782 FF 71 FF 00 
2caf1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2caf5 784 FF AA FF 00 
2caf9 785 FF C6 FF 00 
2cafd 786 FF E3 FF 00 
2cb01 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2cb05 788 40 00 20 00 
2cb09 789 60 00 30 00 
2cb0d 78a 80 00 40 00 
2cb11 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2cb15 78c BF 00 60 00 
2cb19 78d DF 00 70 00 
2cb1d 78e FF 00 80 00 
2cb21 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2cb25 790 FF 39 9C 00 
2cb29 791 FF 55 AA 00 
2cb2d 792 FF 71 B8 00 
2cb31 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2cb35 794 FF AA D5 00 
2cb39 795 FF C6 E3 00 
2cb3d 796 FF E3 F1 00 
2cb41 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2cb45 798 40 00 00 00 
2cb49 799 60 00 00 00 
2cb4d 79a 80 00 00 00 
2cb51 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2cb55 79c BF 00 00 00 
2cb59 79d DF 00 00 00 
2cb5d 79e FF 00 00 00 
2cb61 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2cb65 7a0 FF 39 39 00 
2cb69 7a1 FF 55 55 00 
2cb6d 7a2 FF 71 71 00 
2cb71 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2cb75 7a4 FF AA AA 00 
2cb79 7a5 FF C6 C6 00 
2cb7d 7a6 FF E3 E3 00 
2cb81 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2cb85 7a8 40 10 00 00 
2cb89 7a9 60 18 00 00 
2cb8d 7aa 80 20 00 00 
2cb91 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2cb95 7ac BF 30 00 00 
2cb99 7ad DF 38 00 00 
2cb9d 7ae FF 40 00 00 
2cba1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2cba5 7b0 FF 6A 39 00 
2cba9 7b1 FF 80 55 00 
2cbad 7b2 FF 95 71 00 
2cbb1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2cbb5 7b4 FF BF AA 00 
2cbb9 7b5 FF D5 C6 00 
2cbbd 7b6 FF EA E3 00 
2cbc1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2cbc5 7b8 40 20 00 00 
2cbc9 7b9 60 30 00 00 
2cbcd 7ba 80 40 00 00 
2cbd1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2cbd5 7bc BF 60 00 00 
2cbd9 7bd DF 70 00 00 
2cbdd 7be FF 80 00 00 
2cbe1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2cbe5 7c0 FF 9C 39 00 
2cbe9 7c1 FF AA 55 00 
2cbed 7c2 FF B8 71 00 
2cbf1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2cbf5 7c4 FF D5 AA 00 
2cbf9 7c5 FF E3 C6 00 
2cbfd 7c6 FF F1 E3 00 
2cc01 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2cc05 7c8 40 30 00 00 
2cc09 7c9 60 48 00 00 
2cc0d 7ca 80 60 00 00 
2cc11 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2cc15 7cc BF 90 00 00 
2cc19 7cd DF A8 00 00 
2cc1d 7ce FF C0 00 00 
2cc21 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2cc25 7d0 FF CE 39 00 
2cc29 7d1 FF D5 55 00 
2cc2d 7d2 FF DC 71 00 
2cc31 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2cc35 7d4 FF EA AA 00 
2cc39 7d5 FF F1 C6 00 
2cc3d 7d6 FF F8 E3 00 
2cc41 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2cc45 7d8 30 40 00 00 
2cc49 7d9 48 60 00 00 
2cc4d 7da 60 80 00 00 
2cc51 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2cc55 7dc 90 BF 00 00 
2cc59 7dd A8 DF 00 00 
2cc5d 7de C0 FF 00 00 
2cc61 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2cc65 7e0 CE FF 39 00 
2cc69 7e1 D5 FF 55 00 
2cc6d 7e2 DC FF 71 00 
2cc71 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2cc75 7e4 EA FF AA 00 
2cc79 7e5 F1 FF C6 00 
2cc7d 7e6 F8 FF E3 00 
2cc81 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2cc85 7e8 00 40 00 00 
2cc89 7e9 00 60 00 00 
2cc8d 7ea 00 80 00 00 
2cc91 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2cc95 7ec 00 BF 00 00 
2cc99 7ed 00 DF 00 00 
2cc9d 7ee 00 FF 00 00 
2cca1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2cca5 7f0 39 FF 39 00 
2cca9 7f1 55 FF 55 00 
2ccad 7f2 71 FF 71 00 
2ccb1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2ccb5 7f4 AA FF AA 00 
2ccb9 7f5 C6 FF C6 00 
2ccbd 7f6 E3 FF E3 00 
2ccc1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2ccc5 7f8 00 40 14 00 
2ccc9 7f9 00 60 1E 00 
2cccd 7fa 00 80 28 00 
2ccd1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2ccd5 7fc 00 BF 3C 00 
2ccd9 7fd 00 DF 46 00 
2ccdd 7fe 00 FF 50 00 
2cce1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2cce5 800 39 FF 77 00 
2cce9 801 55 FF 8A 00 
2cced 802 71 FF 9E 00 
2ccf1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2ccf5 804 AA FF C5 00 
2ccf9 805 C6 FF D8 00 
2ccfd 806 E3 FF EC 00 
2cd01 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2cd05 808 00 40 28 00 
2cd09 809 00 60 3C 00 
2cd0d 80a 00 80 50 00 
2cd11 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2cd15 80c 00 BF 78 00 
2cd19 80d 00 DF 8C 00 
2cd1d 80e 00 FF A0 00 
2cd21 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2cd25 810 39 FF B5 00 
2cd29 811 55 FF C0 00 
2cd2d 812 71 FF CA 00 
2cd31 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2cd35 814 AA FF DF 00 
2cd39 815 C6 FF EA 00 
2cd3d 816 E3 FF F4 00 
2cd41 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2cd45 818 00 40 40 00 
2cd49 819 00 60 60 00 
2cd4d 81a 00 80 80 00 
2cd51 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2cd55 81c 00 BF BF 00 
2cd59 81d 00 DF DF 00 
2cd5d 81e 00 FF FF 00 
2cd61 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2cd65 820 39 FF FF 00 
2cd69 821 55 FF FF 00 
2cd6d 822 71 FF FF 00 
2cd71 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2cd75 824 AA FF FF 00 
2cd79 825 C6 FF FF 00 
2cd7d 826 E3 FF FF 00 
2cd81 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2cd85 828 00 28 40 00 
2cd89 829 00 3C 60 00 
2cd8d 82a 00 50 80 00 
2cd91 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2cd95 82c 00 78 BF 00 
2cd99 82d 00 8C DF 00 
2cd9d 82e 00 A0 FF 00 
2cda1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2cda5 830 39 B5 FF 00 
2cda9 831 55 C0 FF 00 
2cdad 832 71 CA FF 00 
2cdb1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2cdb5 834 AA DF FF 00 
2cdb9 835 C6 EA FF 00 
2cdbd 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2cdc0 837             | 
2cdc0 837             | '**********************************************************************************
2cdc0 837             | '
2cdc0 837             | '        Timings and colors definitions
2cdc0 837             | '
2cdc0 837             | '**********************************************************************************
2cdc0 837             | 
2cdc0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2cdc0 837 10 00 00 00 
2cdc4 838 50 00 00 00 
2cdc8 839 0C 00 00 00 
2cdcc 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2cdd0 83b 08 00 00 00 
2cdd4 83c 04 00 00 00 
2cdd8 83d 08 00 00 00 
2cddc 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2cde0 83f 40 02 00 00 
2cde4 840 6A 8C 15 14 
2cde8 841 FB 06 B7 01 
2cdec 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2cdf0 843 00 00 00 00 
2cdf4 844 C0 00 00 00 
2cdf8 845 00 00 00 00 
2cdfc 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ce00 847 00 75 C7 97 
2ce04 848 27 47 F6 0A 
2ce08 849 05 79 CB 9B 
2ce0c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2ce10 84b             | 
2ce10 84b             | ''--------  Initialization  ----------------------------------------------------------------
2ce10 84b             | 
2ce10 84b 28 0C 64 FD | hdmi            setq    #6
2ce14 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2ce18 84d 28 10 64 FD |                 setq    #8
2ce1c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2ce20 84f             | 
2ce20 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2ce24 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2ce28 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2ce2c 852 D6 C6 01 F1 |                 add     t1,hbase
2ce30 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2ce34 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2ce38 855 7B 0B 80 5F 
2ce3c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2ce40 857 66 66 86 FF 
2ce44 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2ce48 859             | '
2ce48 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2ce4c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2ce50 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2ce54 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2ce58 85d             | 
2ce58 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2ce5c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2ce60 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2ce64 860             | 
2ce64 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2ce64 860             | 
2ce64 860 28 06 64 FD | p101            setq 	#3
2ce68 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2ce6c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2ce70 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2ce74 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2ce78 865 00 A0 05 F6 |                 mov     dlinum, #0
2ce7c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2ce80 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2ce84 868             | 
2ce84 868             | 
2ce84 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2ce88 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2ce8c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2ce90 86b             |                 
2ce90 86b             | 
2ce90 86b             | 
2ce90 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2ce90 86b             |   
2ce90 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2ce94 86c 29 FE 65 3D |          if_nc  setq2   #255
2ce98 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2ce9c 86e             | 
2ce9c 86e             | '' -----   up porch (before the picture)
2ce9c 86e             | 
2ce9c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2cea0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2cea4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2cea8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2ceac 872             |  
2ceac 872             |    
2ceac 872             |  
2ceac 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2ceb0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2ceb4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2ceb8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cebc 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cec0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2cec4 878             | 
2cec4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2cec8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cecc 87a 48 00 B0 FD | 		call    #dli
2ced0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2ced4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2ced8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2cedc 87e             |                 	
2cedc 87e             |                 
2cedc 87e             | 
2cedc 87e             |  
2cedc 87e             | '' ------- the main screen drawing starts here
2cedc 87e             | 
2cedc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2cee0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2cee4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2cee8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2ceec 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2cef0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2cef4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2cef8 885             |               
2cef8 885             | 
2cef8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2cefc 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2cf00 887             | 
2cf00 887             | ' ---------------- All visible lines displayed now, start vblank  
2cf00 887             | 
2cf00 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2cf04 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2cf08 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2cf0c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2cf10 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2cf14 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2cf18 88d             | 
2cf18 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2cf18 88d             | 
2cf18 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2cf18 88d             | 
2cf18 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2cf1c 88e             | 
2cf1c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2cf20 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2cf24 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2cf28 891             | 
2cf28 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2cf2c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2cf30 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2cf34 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2cf38 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2cf3c 896             | 
2cf3c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2cf40 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2cf44 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2cf48 899 70 00 90 AD |     if_z        jmp     #preload
2cf4c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2cf50 89b 94 00 90 AD |     if_z        jmp     #preload2
2cf54 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2cf58 89d 0C 00 90 AD |     if_z        jmp     #p390
2cf5c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2cf60 89f 28 00 90 AD |     if_z        jmp     #p391  
2cf64 8a0             | 
2cf64 8a0 2D 00 64 FD | p308            ret
2cf68 8a1             |    
2cf68 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2cf6c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2cf70 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2cf74 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2cf78 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2cf7c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2cf80 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2cf84 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2cf88 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2cf8c 8aa             |  
2cf8c 8aa             | '' --------  Reload palette. To do 
2cf8c 8aa             | 
2cf8c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2cf90 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2cf94 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2cf98 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2cf9c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2cfa0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2cfa4 8b0 70 FF 9F FD |         	jmp     #dli                
2cfa8 8b1             |       
2cfa8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2cfa8 8b1             | 
2cfa8 8b1             | 
2cfa8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2cfa8 8b1             | 
2cfa8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2cfac 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cfb0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cfb4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cfb8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2cfbc 8b6             |         
2cfbc 8b6             | '' -------------- Preload a line from PSRAM        
2cfbc 8b6             |         
2cfbc 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2cfc0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2cfc4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2cfc8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2cfcc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2cfd0 8bb             | 
2cfd0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2cfd4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2cfd8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2cfdc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2cfe0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2cfe4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2cfe8 8c1             |  
2cfe8 8c1             |  
2cfe8 8c1             | preload2      '  incmod  dlinum,#3
2cfe8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2cfec 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2cff0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2cff4 8c4 28 02 64 FD |                 setq	#1
2cff8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2cffc 8c6             |                 
2cffc 8c6             | 
2cffc 8c6             | '' -------------- Draw sprites
2cffc 8c6             | 
2cffc 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2d000 8c7 10 5C 0E F5 | 		and t8,#16 wz
2d004 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2d008 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2d00c 8ca             | 		
2d00c 8ca             | 
2d00c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2d010 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2d014 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2d018 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2d01c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2d020 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2d024 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2d028 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2d02c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d030 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2d034 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2d038 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2d03c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2d040 8d7             | 
2d040 8d7             | 
2d040 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2d044 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2d048 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2d04c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2d050 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2d054 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2d058 8dd 00 5E 06 F6 |                 mov 	t9,#0
2d05c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2d060 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2d064 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2d068 8e1             |      
2d068 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2d06c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2d070 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2d074 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2d078 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2d07c 8e6             |                 
2d07c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2d080 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2d084 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2d088 8e9             |   		
2d088 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2d08c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2d090 8eb             | 
2d090 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2d094 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2d098 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2d09c 8ee             |  
2d09c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2d0a0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2d0a4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2d0a8 8f1             | 	
2d0a8 8f1             | 	
2d0a8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2d0ac 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2d0b0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2d0b4 8f4             | 
2d0b4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2d0b8 8f5             | 
2d0b8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2d0bc 8f6 01 58 86 F1 | 	 	sub     t6,#1
2d0c0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2d0c4 8f8             | 
2d0c4 8f8 28 58 62 FD |                 setq   	t6
2d0c8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2d0cc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2d0d0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2d0d4 8fc 24 00 90 AD |         if_z    jmp #p898
2d0d8 8fd             |          
2d0d8 8fd             |         
2d0d8 8fd 70 5F 06 F6 |                 mov  t9,#368
2d0dc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2d0e0 8ff             | 
2d0e0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2d0e4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2d0e8 901 FF FF 7F FF 
2d0ec 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2d0f0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2d0f4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2d0f8 905 2D 01 00 F5 |                 and 0-0, t7
2d0fc 906             |                
2d0fc 906             | 
2d0fc 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2d100 907 E5 E0 7A FA |                 wmlong 368,t3				
2d104 908             |                 
2d104 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2d108 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2d10c 90a 2D 00 64 FD |                 ret
2d110 90b             | 	
2d110 90b             | 	
2d110 90b             |                
2d110 90b             |  
2d110 90b             | '' -------------- Graphics line ------------------------------------------------------------
2d110 90b             |  
2d110 90b             | 
2d110 90b             | '' consts and vars
2d110 90b             | 
2d110 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2d114 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2d118 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2d11c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2d120 90f             | 
2d120 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2d124 910             | 
2d124 910             | '------ these longs will be set by setmode function
2d124 910             | 
2d124 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2d128 911 00 00 00 00 | m_sn            long    0        'sync
2d12c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2d130 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2d134 914             | 'm_border        long    0        'left/right borders
2d134 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2d138 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2d13c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2d140 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2d144 918 00 00 00 00 | i_totalvis      long    0
2d148 919             | 
2d148 919             | '-------------------------------------
2d148 919             |  
2d148 919 00 00 00 00 | linenum         long    0
2d14c 91a 00 00 00 00 | frames          long    0
2d150 91b 00 00 00 00 | dlinum long 0
2d154 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2d158 91d             | 
2d158 91d 00 00 00 00 | vblankptr       long    0
2d15c 91e 00 00 00 00 | modeptr         long    0
2d160 91f 00 00 00 00 | paletteptr      long    0
2d164 920 00 00 00 00 | dlptr           long    0
2d168 921 01 00 00 00 | hbase           long    1
2d16c 922 00 00 00 00 | mailbox         long    0
2d170 923 00 00 00 00 | spriteptr          long 0
2d174 924             | 
2d174 924 00 00 00 00 | cmd             long    0
2d178 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2d17c 926 00 04 00 00 | buf2            long    1024
2d180 927 01 00 00 00 | dlptr2          long    1
2d184 928 01 00 00 00 | dl              long    1
2d188 929             | 
2d188 929 00 00 00 00 | buf1c long 0
2d18c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2d190 92b 01 00 00 00 | framebuf2       long    1
2d194 92c 01 00 00 00 | hsync0          long    1
2d198 92d 01 00 00 00 | hsync1          long    1
2d19c 92e             | 
2d19c 92e 01 00 00 00 | t1              long    1
2d1a0 92f 00 00 00 00 | t2 long 0
2d1a4 930 00 00 00 00 | t3 long 0
2d1a8 931 00 00 00 00 | t4 long 0
2d1ac 932             | 
2d1ac 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2d1b0 933 00 00 00 00 | rcnt2           long    0
2d1b4 934 00 00 00 00 | rcnt2a          long    0
2d1b8 935 00 00 00 00 | roffset         long    0
2d1bc 936 00 00 00 00 | rdl             long    0  'dl repeat line
2d1c0 937 00 00 00 00 | dlc             long    0  'dl command
2d1c4 938             | 
2d1c4 938 FF FF FF FF | affffffff       long    $ffffffff
2d1c8 939 00 00 00 00 | sprite1pointer long 0
2d1cc 93a 00 00 00 00 | sprite1xy      long 0
2d1d0 93b 00 00 00 00 | sprite1wh      long 0
2d1d4 93c 00 00 00 00 | sprite2pointer long 0
2d1d8 93d 00 00 00 00 | sprite2xy      long 0
2d1dc 93e 00 00 00 00 | sprite2wh      long 0
2d1e0 93f 00 00 00 00 | sprite3pointer long 0
2d1e4 940 00 00 00 00 | sprite3xy      long 0
2d1e8 941 00 00 00 00 | sprite3wh      long 0
2d1ec 942 00 00 00 00 | sprite4pointer long 0
2d1f0 943 00 00 00 00 | sprite4xy      long 0
2d1f4 944 00 00 00 00 | sprite4wh      long 0
2d1f8 945 00 00 00 00 | sprite5pointer long 0
2d1fc 946 00 00 00 00 | sprite5xy      long 0
2d200 947 00 00 00 00 | sprite5wh      long 0
2d204 948 00 00 00 00 | sprite6pointer long 0
2d208 949 00 00 00 00 | sprite6xy      long 0
2d20c 94a 00 00 00 00 | sprite6wh      long 0
2d210 94b 00 00 00 00 | sprite7pointer long 0
2d214 94c 00 00 00 00 | sprite7xy      long 0
2d218 94d 00 00 00 00 | sprite7wh      long 0
2d21c 94e 00 00 00 00 | sprite8pointer long 0
2d220 94f 00 00 00 00 | sprite8xy      long 0
2d224 950 00 00 00 00 | sprite8wh      long 0
2d228 951 00 00 00 00 | sprite9pointer long 0
2d22c 952 00 00 00 00 | sprite9xy      long 0
2d230 953 00 00 00 00 | sprite9wh      long 0
2d234 954 00 00 00 00 | sprite10pointer long 0
2d238 955 00 00 00 00 | sprite10xy      long 0
2d23c 956 00 00 00 00 | sprite10wh      long 0
2d240 957 00 00 00 00 | sprite11pointer long 0
2d244 958 00 00 00 00 | sprite11xy      long 0
2d248 959 00 00 00 00 | sprite11wh      long 0
2d24c 95a 00 00 00 00 | sprite12pointer long 0
2d250 95b 00 00 00 00 | sprite12xy      long 0
2d254 95c 00 00 00 00 | sprite12wh      long 0
2d258 95d 00 00 00 00 | sprite13pointer long 0
2d25c 95e 00 00 00 00 | sprite13xy      long 0
2d260 95f 00 00 00 00 | sprite13wh      long 0
2d264 960 00 00 00 00 | sprite14pointer long 0
2d268 961 00 00 00 00 | sprite14xy      long 0
2d26c 962 00 00 00 00 | sprite14wh      long 0
2d270 963 00 00 00 00 | sprite15pointer long 0
2d274 964 00 00 00 00 | sprite15xy      long 0
2d278 965 00 00 00 00 | sprite15wh      long 0
2d27c 966 00 00 00 00 | sprite16pointer long 0
2d280 967 00 00 00 00 | sprite16xy      long 0
2d284 968 00 00 00 00 | sprite16wh      long 0
2d288 969 00 00 00 00 | sprite17pointer long 0
2d28c 96a 00 00 00 00 | sprite17xy      long 0
2d290 96b 00 00 00 00 | sprite17wh      long 0
2d294 96c 00 00 00 00 | sprite18pointer long 0
2d298 96d 00 00 00 00 | sprite18xy      long 0
2d29c 96e 00 00 00 00 | sprite18wh      long 0
2d2a0 96f 00 00 00 00 | spritenum long 0
2d2a4 970             | 
2d2a4 970 00 00 00 00 | spriteline long 0
2d2a8 971 84 03 00 00 | sprite_x long 900
2d2ac 972 00 00 00 00 | sprite_y long 0
2d2b0 973 10 00 00 00 | sprite_w long 16
2d2b4 974 40 00 00 00 | sprite_h long 64
2d2b8 975 00 00 00 00 | l2 long 0
2d2bc 976 00 00 00 00 | t5 long 0
2d2c0 977 00 00 00 00 | t6 long 0
2d2c4 978 00 00 00 00 | t7 long 0
2d2c8 979 00 00 00 00 | t8 long 0
2d2cc 97a 00 00 00 00 | t9 long 0
2d2d0 97b 00 00 00 00 | preloadaddr long 0
2d2d4 97c 00 00 00 00 | preloadlineaddr long 0
2d2d8 97d 00 04 00 00 | a1024 long 1024
2d2dc 97e             | 
2d2dc 97e E0 03 00 00 | aa long 992
2d2e0 97f FF 03 00 00 | a1023 long 1023
2d2e4 980 00 10 00 00 | a4096 long 4096
2d2e8 981             |  fit 368
2d2e8 981             | _psram_spin2_dat_
2d2e8 981 00 00 00 00 
      ...             
2d3e0 9bf 00 00 00 00 
2d3e4 9c0 00 00 00 00 |     listdata long 0[8*8]
2d3e8 9c1             |             orgh
2d3e8                 | 
2d3e8                 | ' driver state
2d3e8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2d3ec     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2d3f0                 | 
2d3f0                 | ' delay profile
2d3f0     07 00 00 00 
2d3f4     00 CF 7B 05 
2d3f8     80 D1 F0 08 
2d3fc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2d400     80 C4 60 0F 
2d404     80 39 7A 12 
2d408     40 2D D9 13 
2d40c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2d410                 | 
2d410                 | ' data to be passed to driver when starting it
2d410                 | startupData
2d410     00 00 00 00 |     long    0           ' current frequency
2d414     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2d418     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2d41c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2d420     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2d424     30 D4 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2d428     B0 D4 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2d42c     D0 D4 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2d430                 | 
2d430                 | ' data for memory
2d430                 | deviceData
2d430                 |     ' 16 bank parameters follow (16MB per bank)
2d430     00 00 00 00 
      ...             
2d468     00 00 00 00 
2d46c     00 00 00 00 |     long    0[16]                               ' banks 0-15
2d470                 |     ' 16 banks of pin parameters follow
2d470     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2d474     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2d478     FF FF FF FF 
      ...             
2d4a8     FF FF FF FF 
2d4ac     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2d4b0                 | 
2d4b0                 | ' data for COG polling
2d4b0                 | qosData 
2d4b0     00 00 FF FF 
2d4b4     00 00 FF FF 
2d4b8     00 00 FF FF 
2d4bc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2d4c0     00 00 FF FF 
2d4c4     00 00 FF FF 
2d4c8     00 00 FF FF 
2d4cc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2d4d0                 |     
2d4d0                 | ' mailbox storage
2d4d0                 | 
2d4d0                 | mailboxes
2d4d0     00 00 00 00 
      ...             
2d528     00 00 00 00 
2d52c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d530                 | 	alignl
2d530                 | _psram16drv_spin2_dat_
2d530                 |                             orgh
2d530     00 00 00 00 
      ...             
2d548     00 00 00 00 
2d54c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d550                 | 
2d550                 | driver_start
2d550                 |                             org
2d550 000             | '..................................................................................................
2d550 000             | ' Memory layout for COG RAM once operational:
2d550 000             | '
2d550 000             | '  COG RAM address      Usage
2d550 000             | '  ---------------      ----
2d550 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d550 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d550 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d550 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d550 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d550 000             | '  ~$198-$1F3           State and register variables
2d550 000             | '
2d550 000             | ' Also during driver COG startup:
2d550 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d550 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d550 000             | '..................................................................................................
2d550 000             |                             
2d550 000             | ' Mailbox storage after vector initialization
2d550 000             | 
2d550 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d554 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d558 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d55c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d560 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d564 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d568 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d56c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d570 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d574 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d578 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d57c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d580 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d584 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d588 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d58c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d590 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d594 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d598 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d59c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d5a0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d5a4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d5a8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d5ac 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d5b0 018             | 
2d5b0 018             | ' Mailbox parameter addresses per COG once patched
2d5b0 018             |                             
2d5b0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d5b4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d5b8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d5bc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d5c0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d5c4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d5c8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d5cc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d5d0 020             | 
2d5d0 020             | '..................................................................................................
2d5d0 020             | ' Per COG request and state setup and service branching
2d5d0 020             |         
2d5d0 020             | cog0                 
2d5d0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d5d4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d5d8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d5dc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d5e0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d5e4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d5e8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d5ec 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d5f0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d5f4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d5f8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d5fc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d600 02c             | cog1                        
2d600 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d604 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d608 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d60c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d610 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d614 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d618 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d61c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d620 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d624 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d628 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d62c 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d630 038             | cog2                         
2d630 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d634 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d638 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d63c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d640 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d644 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d648 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d64c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d650 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d654 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d658 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d65c 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d660 044             | cog3                        
2d660 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d664 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d668 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d66c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d670 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d674 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d678 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d67c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d680 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d684 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d688 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d68c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d690 050             | cog4                        
2d690 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d694 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d698 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d69c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d6a0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6a4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d6a8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d6ac 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d6b0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d6b4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d6b8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d6bc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d6c0 05c             | cog5                        
2d6c0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d6c4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d6c8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d6cc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d6d0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d6d4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d6d8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d6dc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d6e0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d6e4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d6e8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d6ec 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d6f0 068             | cog6                        
2d6f0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d6f4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d6f8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d6fc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d700 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d704 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d708 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d70c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d710 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d714 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d718 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d71c 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d720 074             | cog7                        
2d720 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d724 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d728 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d72c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d730 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d734 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d738 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d73c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d740 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d744 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d748 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d74c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d750 080             |                             fit     128
2d750 080             | 
2d750 080             |                             fit     128
2d750 080             | pad                         long    0[128-$]                'align init code to $80
2d750 080             | 
2d750 080             | '..................................................................................................
2d750 080             | 
2d750 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d750 080             | 
2d750 080             | init                        
2d750 080             |                             ' get driver scratch long address in hub
2d750 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d754 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d758 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d75c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d760 084             |                     
2d760 084             |                             ' read in the additional LUT RAM code
2d760 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d764 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d768 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d76c 087             | 
2d76c 087             |                             ' read the startup parameters
2d76c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d770 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d774 089             | 
2d774 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d774 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d778 08a             | 
2d778 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d77c 08b 01 00 00 5F 
2d780 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d784 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d788 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d78c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d790 090             | 
2d790 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d790 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d794 091 01 00 00 FF 
2d798 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d79c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d7a0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d7a4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d7a8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2d7ac 097 08 DE 47 F5 |                             or      a, #8
2d7b0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2d7b4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2d7b8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2d7bc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2d7c0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2d7c4 09d 01 DE 07 F1 |                             add     a, #1
2d7c8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2d7cc 09f             |  
2d7cc 09f             |                             ' setup device control pin states
2d7cc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2d7d0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2d7d4 0a1 01 00 00 FF 
2d7d8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2d7dc 0a3             | 
2d7dc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2d7e0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2d7e4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2d7e8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2d7ec 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2d7f0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2d7f4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2d7f8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2d7fc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2d800 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2d804 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2d808 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2d80c 0af             | pinloop
2d80c 0af             |                             ' generate minimum CE high time before access
2d80c 0af A1 07 00 FF 
2d810 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2d814 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2d818 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2d81c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2d820 0b4 1F DE 63 FD |                             waitx   a                       'delay
2d824 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2d828 0b6             | 
2d828 0b6             |                             ' setup the COG mailboxes and addresses 
2d828 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2d82c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2d830 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2d834 0b9             | 
2d834 0b9 28 2E 64 FD |                             setq    #24-1
2d838 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2d83c 0bb             | 
2d83c 0bb             |                             ' setup the polling loop for active COGs 
2d83c 0bb 01 C2 63 FD |                             cogid   id
2d840 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2d844 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2d848 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2d84c 0bf 0A F0 07 F6 |                             mov     ptra, #10
2d850 0c0 E1 F1 03 FA |                             mul     ptra, id
2d854 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2d858 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2d85c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2d860 0c4 03 C2 07 FA |                             mul     id, #3
2d864 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2d868 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2d86c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2d870 0c8 D8 01 B0 FD |                             call    #reloadcogs
2d874 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2d878 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2d87c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2d87c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2d880 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2d884 0cd 08 04 DC FC |                             rep     #2, #8
2d888 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2d88c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2d890 0d0             | 
2d890 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2d890 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2d890 0d0 01 C2 63 FD |                             cogid   id
2d894 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2d898 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2d89c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2d8a0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2d8a4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2d8a8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2d8ac 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2d8b0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2d8b4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2d8b8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d8bc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2d8c0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2d8c4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2d8c8 0de A5 E5 03 F1 |                             add     d, const512
2d8cc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d8d0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2d8d4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2d8d8 0e2             |                             
2d8d8 0e2             |                             ' setup register values for control vector loop setup after we return
2d8d8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2d8dc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2d8e0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2d8e4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2d8e8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2d8ec 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2d8f0 0e8 D0 C3 8F F9 |                             altd    id, #id0
2d8f4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2d8f8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2d8fc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2d900 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2d904 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2d908 0ee             |  
2d908 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2d90c 0ef 07 CA 07 F5 |                             and     request, #7
2d910 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2d914 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2d918 0f2             |                             fit     $100                    'ensure all init code fits this space
2d918 0f2             | 
2d918 0f2             |                             fit     $100                    'ensure all init code fits this space
2d918 0f2             | 
2d918 0f2 00 00 00 00 
      ...             
2d948 0fe 00 00 00 00 
2d94c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2d950 100             | 
2d950 100             | '..................................................................................................
2d950 100             | ' Error result handling and COG notification of request completion
2d950 100             | 
2d950 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2d954 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2d958 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2d95c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2d960 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2d964 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2d968 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2d96c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2d970 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2d974 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2d978 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2d97c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2d980 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2d984 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2d988 10e             | ' Poller re-starts here after a COG is serviced
2d988 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2d98c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2d990 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2d994 111             | ' Main dynamic polling loop repeats until a request arrives
2d994 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2d998 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2d99c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2d9a0 114             | 
2d9a0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2d9a4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2d9a8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2d9ac 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2d9b0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2d9b4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2d9b8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2d9bc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2d9c0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2d9c4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2d9c8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2d9cc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2d9d0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2d9d4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2d9d8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2d9dc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2d9e0 124             | 
2d9e0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2d9e4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2d9e8 126             |  
2d9e8 126             | '..................................................................................................
2d9e8 126             | ' List handler                               
2d9e8 126             | 
2d9e8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2d9ec 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2d9f0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2d9f4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2d9f8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2d9fc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2da00 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2da04 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2da08 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2da0c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2da10 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2da14 131 33 00 60 FD |                             execf   0-0                     'process the request 
2da18 132             | 
2da18 132             | '..................................................................................................
2da18 132             | ' Restoring per COG state and resuming where we left off
2da18 132             | 
2da18 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2da1c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2da20 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2da24 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2da28 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2da2c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2da30 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2da34 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2da38 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2da3c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2da40 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2da44 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2da48 13e             |                    
2da48 13e             | '..................................................................................................
2da48 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2da48 13e             | 
2da48 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2da4c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2da50 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2da54 141 D0 DF B7 F9 |                             setd    a, #id0
2da58 142 D8 DF BF F9 |                             sets    a, #addr1
2da5c 143 FE FF FF FF 
2da60 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2da64 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2da68 146 3F DE A7 F9 |                             alti    a, #%111_111 
2da6c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2da70 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2da74 149 01 E2 63 FD |                             cogid   c
2da78 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2da7c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2da80 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2da84 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2da88 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2da8c 14f 00 E0 03 F6 |                             mov     b, 0-0
2da90 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2da94 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2da98 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2da9c 153 0C 00 90 AD |             if_z            jmp     #excluded               
2daa0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2daa4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2daa8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2daac 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2dab0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2dab4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2dab8 15a             | 
2dab8 15a             | 'determine priority cogs and build instructions for the polling sequence
2dab8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2dabc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2dac0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2dac4 15d             | 
2dac4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2dac8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2dacc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2dad0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2dad4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2dad8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2dadc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2dae0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2dae4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2dae8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2daec 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2daf0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2daf4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2daf8 16a             | endprioloop
2daf8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2dafc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2db00 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2db04 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2db08 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2db0c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2db10 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2db14 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2db18 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2db1c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2db20 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2db24 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2db28 176             | 
2db28 176             | ' populate the round robin COG polling instructions
2db28 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2db2c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2db30 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2db34 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2db38 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2db3c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2db40 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2db44 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2db48 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2db4c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2db50 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2db54 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2db58 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2db5c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2db60 184             | '..................................................................................................
2db60 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2db60 184             | 
2db60 184             | set_latency                                                 '            (a) set latency
2db60 184             | get_latency                                                 '            (b) get latency
2db60 184             | set_burst                                                   '            (c) set burst size of bank
2db60 184             | get_burst                                                   '            (d) get burst size of bank
2db60 184             |                                                             '            (e) dump state
2db60 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2db64 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2db68 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2db6c 187             |                                                             ' | | | | e  account for following AUGS
2db6c 187 04 00 00 FF 
2db70 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2db74 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2db78 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2db7c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2db80 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2db84 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2db88 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2db8c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2db90 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2db94 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2db98 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2db9c 193             | 
2db9c 193             | '..................................................................................................
2db9c 193             | ' Misc EXECF code
2db9c 193             | 
2db9c 193 33 72 63 FD | start_read_exec             execf   newburstr
2dba0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2dba4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2dba8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2dbac 197             | 
2dbac 197             | '..................................................................................................
2dbac 197             | ' Variables
2dbac 197             | 
2dbac 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2dbb0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2dbb4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2dbb8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2dbbc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2dbc0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2dbc4 19d             | 
2dbc4 19d 00 00 00 80 | xfreq1          long    $80000000
2dbc8 19e 00 00 00 40 | xfreq2          long    $40000000
2dbcc 19f 03 00 00 00 | delay           long    3
2dbd0 1a0             | 
2dbd0 1a0             | lutcodeaddr                 
2dbd0 1a0             | startupparams
2dbd0 1a0             | excludedcogs                                    'careful: shared register use!
2dbd0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2dbd4 1a1 00 00 00 00 | flags           long    0
2dbd8 1a2             | mask                                            'careful: shared register use!
2dbd8 1a2 00 00 00 00 | resetmaskA      long    0
2dbdc 1a3             | limit                                           'careful: shared register use!
2dbdc 1a3 00 00 00 00 | resetmaskB      long    0
2dbe0 1a4 00 00 00 00 | datapins        long    0
2dbe4 1a5             | const512                                        'careful: shared register use!
2dbe4 1a5 00 00 00 00 | devicelist      long    0
2dbe8 1a6 00 00 00 00 | coglist         long    0
2dbec 1a7 00 00 00 00 | mbox            long    0 
2dbf0 1a8             | 
2dbf0 1a8             | clkpin                                          'shared with code patched during init
2dbf0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2dbf4 1a9             | cspin                                           'shared with code patched during init
2dbf4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2dbf8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2dbfc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2dc00 1ac 01 00 00 00 | clkdelay        long    1
2dc04 1ad 00 00 00 00 | regdatabus      long    0
2dc08 1ae             | 
2dc08 1ae 10 00 00 00 | deviceaddr      long    $10
2dc0c 1af             | rrcounter
2dc0c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2dc10 1b0             | 
2dc10 1b0             | ' jump addresses for the per COG handlers
2dc10 1b0 20 00 00 00 | cog0_handler    long    cog0
2dc14 1b1 2C 00 00 00 | cog1_handler    long    cog1
2dc18 1b2 38 00 00 00 | cog2_handler    long    cog2
2dc1c 1b3 44 00 00 00 | cog3_handler    long    cog3
2dc20 1b4 50 00 00 00 | cog4_handler    long    cog4
2dc24 1b5 5C 00 00 00 | cog5_handler    long    cog5
2dc28 1b6 68 00 00 00 | cog6_handler    long    cog6
2dc2c 1b7 74 00 00 00 | cog7_handler    long    cog7
2dc30 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2dc34 1b9             | 
2dc34 1b9             | ' EXECF sequences
2dc34 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2dc38 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2dc3c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2dc40 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2dc44 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2dc48 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2dc4c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2dc50 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2dc50 1c0             | 
2dc50 1c0             | 
2dc50 1c0             | ' SKIPF sequences
2dc50 1c0             | skiptable
2dc50 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2dc54 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2dc58 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2dc5c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2dc60 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2dc64 1c5 00 00 00 00 | pattern2        long    0
2dc68 1c6 00 00 00 00 | pattern3        long    0
2dc6c 1c7 77 02 00 00 | singlelong      long    %1001110111  
2dc70 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2dc74 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2dc78 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2dc7c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2dc80 1cc             | 
2dc80 1cc             | ' LUT RAM address values
2dc80 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2dc84 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2dc88 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2dc8c 1cf F6 02 00 00 | noread          long    noread_lut
2dc90 1d0             | 
2dc90 1d0 00 00 00 00 | id0             long    0
2dc94 1d1 01 00 00 00 | id1             long    1
2dc98 1d2 02 00 00 00 | id2             long    2
2dc9c 1d3 03 00 00 00 | id3             long    3
2dca0 1d4 04 00 00 00 | id4             long    4
2dca4 1d5 05 00 00 00 | id5             long    5
2dca8 1d6 06 00 00 00 | id6             long    6
2dcac 1d7 07 00 00 00 | id7             long    7
2dcb0 1d8             | 
2dcb0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2dcb0 1d8             | 'and COG updates and need to follow immediately after id0-id7
2dcb0 1d8 00 00 00 00 | addr1           long    0
2dcb4 1d9 00 00 00 00 | hubdata         long    0
2dcb8 1da 00 00 00 00 | count           long    0
2dcbc 1db 00 00 00 00 | addr2           long    0
2dcc0 1dc 00 00 00 00 | total           long    0
2dcc4 1dd 00 00 00 00 | offset1         long    0
2dcc8 1de 00 00 00 00 | offset2         long    0
2dccc 1df 00 00 00 00 | link            long    0
2dcd0 1e0             | 
2dcd0 1e0             | burstwrite                                      'note shared register use during init
2dcd0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2dcd4 1e1 00 00 00 00 | id              long    0
2dcd8 1e2             | 
2dcd8 1e2 00 00 00 00 | header          long    0
2dcdc 1e3 00 00 00 00 | trailer         long    0
2dce0 1e4 00 00 00 00 | cmdaddr         long    0
2dce4 1e5 00 00 00 00 | request         long    0
2dce8 1e6 00 00 00 00 | rrlimit         long    0
2dcec 1e7 00 00 00 00 | pinconfig       long    0
2dcf0 1e8 00 00 00 00 | clks            long    0
2dcf4 1e9 00 00 00 00 | resume          long    0
2dcf8 1ea 00 00 00 00 | orighubsize     long    0
2dcfc 1eb 00 00 00 00 | wrclks          long    0
2dd00 1ec             | 
2dd00 1ec 00 00 00 00 | pattern         long    0
2dd04 1ed 00 00 00 00 | hubscratch      long    0
2dd08 1ee 00 10 00 00 | val4k           long    4096
2dd0c 1ef             | 
2dd0c 1ef             | ' temporary general purpose regs
2dd0c 1ef 00 00 00 00 | a               long    0
2dd10 1f0 00 00 00 00 | b               long    0
2dd14 1f1 00 00 00 00 | c               long    0
2dd18 1f2 00 00 00 00 | d               long    0
2dd1c 1f3             |                 fit     502
2dd1c 1f3             | 
2dd1c 1f3             |                 fit     502
2dd1c 1f3             | 
2dd1c 1f3             | '..................................................................................................
2dd1c 1f3             | 
2dd1c 1f3             |             orgh
2dd1c                 | 
2dd1c                 | lut_code
2dd1c                 | 'HW init code up to 80 longs
2dd1c                 | 
2dd1c                 | '..................................................................................................
2dd1c                 | ' Memory layout for LUT RAM once operational:
2dd1c                 | '
2dd1c                 | '  LUT RAM address      Usage
2dd1c                 | '  ---------------      ----
2dd1c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2dd1c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2dd1c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2dd1c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2dd1c                 | '
2dd1c                 | ' Also during driver COG startup:
2dd1c                 | ' $230-$24F is used for HW init setup
2dd1c                 | ' $250-$26F is used as temporary vector storage 
2dd1c                 | '..................................................................................................
2dd1c                 | 
2dd1c                 |                 org $230    
2dd1c 230             | 
2dd1c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2dd1c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2dd20 231 24 16 60 FD |                             pollxfi
2dd24 232 FF AA 2A FF 
2dd28 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2dd2c 234 28 00 B0 FD |                             call    #sendqspi
2dd30 235 07 F8 07 FF 
2dd34 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2dd38 237 28 00 B0 FD |                             call    #sendspi
2dd3c 238 F8 07 78 FF 
2dd40 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2dd44 23a 1C 00 B0 FD |                             call    #sendspi
2dd48 23b 7F 78 78 FF 
2dd4c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2dd50 23d 10 00 B0 FD |                             call    #sendspi 
2dd54 23e 2D 00 64 FD |                             ret
2dd58 23f             | 
2dd58 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2dd5c 240 32 0C 64 FD |                             skipf   #%110
2dd60 241 9C EF 03 F6 |                             mov     pb, xsendimm
2dd64 242             | 
2dd64 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2dd68 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2dd6c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2dd70 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2dd74 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2dd78 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2dd7c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2dd80 249 50 48 63 FD |                             fltl    datapins                'float data bus
2dd84 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2dd88 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2dd8c 24c             | 
2dd8c 24c 00 00 00 00 
2dd90 24d 00 00 00 00 
2dd94 24e 00 00 00 00 
2dd98 24f 00 00 00 00 |                 long    0[$270-32-$]
2dd9c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dd9c 250             |     
2dd9c 250             |                 fit     $270-32  ' keep room for 32 vector longs
2dd9c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2dd9c 250             | rw_vect ' PSRAM jump vectors
2dd9c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dda0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2dda4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2dda8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2ddac 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2ddb0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2ddb4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2ddb8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2ddbc 258             | ro_vect ' R/O PSRAM jump vectors
2ddbc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ddc0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ddc4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2ddc8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2ddcc 25c 00 01 00 00 |                 long    unsupported
2ddd0 25d 00 01 00 00 |                 long    unsupported
2ddd4 25e 00 01 00 00 |                 long    unsupported
2ddd8 25f 00 01 00 00 |                 long    unsupported
2dddc 260             | ctrl_vect ' Control jump vectors
2dddc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2dde0 261 00 01 00 00 |                 long    unsupported
2dde4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2dde8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2ddec 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2ddf0 265 00 01 00 00 |                 long    unsupported
2ddf4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2ddf8 267 3E 01 00 00 |                 long    reconfig 
2ddfc 268             | no_vect ' Invalid bank jump vectors
2ddfc 268 01 01 00 00 |                 long    invalidbank
2de00 269 01 01 00 00 |                 long    invalidbank
2de04 26a 01 01 00 00 |                 long    invalidbank
2de08 26b 01 01 00 00 |                 long    invalidbank
2de0c 26c 01 01 00 00 |                 long    invalidbank
2de10 26d 01 01 00 00 |                 long    invalidbank
2de14 26e 01 01 00 00 |                 long    invalidbank
2de18 26f 01 01 00 00 |                 long    invalidbank
2de1c 270             |                 fit     $270
2de1c 270             | 
2de1c 270             |                 fit     $270
2de1c 270             | '..................................................................................................
2de1c 270             | ' PSRAM READS
2de1c 270             |                                                             ' a b c d e f
2de1c 270             |                                                             ' B W L B R L  (a) byte read
2de1c 270             |                                                             ' Y O O U E O  (b) word read
2de1c 270             |                                                             ' T R N R S C  (c) long read
2de1c 270             |                                                             ' E D G S U K  (d) new burst read
2de1c 270             |                                                             '       T M E  (e) resumed sub-burst
2de1c 270             |                                                             '         E D  (f) locked sub-burst
2de1c 270             | 
2de1c 270             | 
2de1c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2de20 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2de24 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2de28 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2de2c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2de30 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2de34 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2de38 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2de3c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2de40 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2de44 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2de48 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2de4c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2de50 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2de54 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2de58 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2de5c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2de60 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2de64 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2de68 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2de6c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2de70 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2de74 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2de78 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2de7c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2de80 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2de84 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2de88 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2de8c 28c             | 
2de8c 28c             |                             ' fall through to read bursts
2de8c 28c             |                         
2de8c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2de8c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2de90 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2de94 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2de98 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2de9c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2dea0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2dea4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2dea8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2deac 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2deb0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2deb4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2deb8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2debc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2dec0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2dec4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2dec8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2decc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2ded0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2ded4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2ded8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2dedc 2a0 E8 D1 03 F1 |                             add     clks, clks
2dee0 2a1             | readcommon
2dee0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2dee4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2dee8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2deec 2a4             | 
2deec 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2def0 2a5 69 C8 63 FD |                             rev     cmdaddr
2def4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2def8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2defc 2a8             | 
2defc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2df00 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2df04 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2df04 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2df08 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2df0c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2df10 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2df14 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2df14 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2df18 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2df1c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2df20 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2df24 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2df28 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2df2c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2df2c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2df30 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2df34 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2df38 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2df3c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2df40 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2df44 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2df48 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2df4c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2df50 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2df54 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2df58 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2df5c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2df60 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2df64 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2df64 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2df68 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2df6c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2df70 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2df74 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2df78 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2df7c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2df80 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2df84 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2df88 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2df8c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2df90 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2df94 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2df98 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2df9c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2dfa0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2dfa4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2dfa8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2dfac 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2dfb0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2dfb4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2dfb8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2dfbc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2dfc0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2dfc4 2da 10 03 90 FD |                             jmp     #writecommon
2dfc8 2db             | 
2dfc8 2db             | '..................................................................................................
2dfc8 2db             | ' Burst continuation testing
2dfc8 2db             | 
2dfc8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2dfcc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2dfd0 2dd             | continue_read_lut          
2dfd0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2dfd4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2dfd8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2dfdc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2dfe0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2dfe4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2dfe8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2dfec 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2dff0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2dff4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2dff8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2dffc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2e000 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2e004 2ea             | 
2e004 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2e008 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2e00c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2e010 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2e014 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2e018 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2e01c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2e020 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2e024 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2e028 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2e02c 2f4 2A 1C 66 0D |             _ret_           push    #poller
2e030 2f5             | 
2e030 2f5             | 
2e030 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2e034 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2e034 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2e038 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2e03c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2e040 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2e044 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2e048 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2e04c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2e050 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2e054 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2e058 2ff             | '..................................................................................................
2e058 2ff             | ' Completion of requests
2e058 2ff             | 
2e058 2ff             | complete_rw_lut             
2e058 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2e05c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2e060 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2e064 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2e068 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2e06c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2e070 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2e074 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2e078 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2e07c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2e080 309 32 62 64 AD |             if_z            skipf   #%110001
2e084 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2e088 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2e08c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2e090 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2e094 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2e098 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2e09c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2e0a0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2e0a4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2e0a8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2e0ac 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2e0b0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2e0b4 316             |                                                             ' skipcase (a) gfx copy to/from hub
2e0b4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2e0b4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2e0b4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2e0b8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2e0bc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2e0c0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2e0c4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2e0c8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2e0cc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2e0d0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2e0d4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2e0d8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2e0dc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2e0e0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2e0e4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2e0e8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2e0ec 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2e0f0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2e0f4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2e0f8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2e0fc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2e100 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2e104 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2e108 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2e10c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2e110 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2e114 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2e118 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2e11c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2e120 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2e124 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2e128 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2e12c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2e130 335 DF B7 03 A6 |             if_z            mov     addr2, link
2e134 336 34 FF 9F AD |             if_z            jmp     #checknext
2e138 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2e13c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e140 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2e144 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2e148 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2e14c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2e150 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2e154 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2e158 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2e15c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2e160 341             | 
2e160 341             | '..................................................................................................
2e160 341             | ' PSRAM WRITES
2e160 341             |                                                             '  a b c d e f g h
2e160 341             | 
2e160 341             |                                                             '  B W L F B R L L (a) byte write(s)
2e160 341             |                                                             '  Y O O I U E O O (b) word write(s)
2e160 341             |                                                             '  T R N L R S C C (c) long write(s)
2e160 341             |                                                             '  E D G L S U K K (d) resumed fill
2e160 341             |                                                             '          T M E E (e) new burst write
2e160 341             |                                                             '            E D D (f) resumed burst
2e160 341             |                                                             '              F B (g) locked fill
2e160 341             |                                                             '              I U (h) locked burst write
2e160 341             |                                                             '              L R 
2e160 341             |                                                             '              L S 
2e160 341             |                                                             '                T 
2e160 341             | 
2e160 341             | w_single                   
2e160 341             | w_fill_cont           
2e160 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2e164 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2e168 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2e16c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2e170 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2e174 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2e178 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2e17c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2e180 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2e184 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2e188 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2e18c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2e190 34d             |                ' disable call to r_resume_burst for single longs when z=0
2e190 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2e194 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2e198 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2e19c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2e1a0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2e1a4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2e1a8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2e1ac 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2e1b0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2e1b4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2e1b8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2e1bc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2e1c0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2e1c4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2e1c8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2e1cc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2e1d0 35d             |         
2e1d0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2e1d0 35d             |             '
2e1d0 35d             |             '  At least one of these 3 optional components will be sent
2e1d0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2e1d0 35d             |             '     body - N x full longs of data
2e1d0 35d             |             '     trailer - last partial long of data
2e1d0 35d             |             '
2e1d0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2e1d0 35d             |             '
2e1d0 35d             |             'Case    Type                           Sends
2e1d0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2e1d0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2e1d0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2e1d0 35d             |             ' 4)     Multiple long fill             body only
2e1d0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2e1d0 35d             | 
2e1d0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2e1d0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2e1d4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2e1d8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2e1dc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2e1e0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2e1e4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2e1e8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2e1ec 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2e1f0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2e1f4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2e1f8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2e1fc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2e200 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2e204 36a             |                             
2e204 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e208 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2e20c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2e210 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2e214 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2e218 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2e21c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2e220 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2e224 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2e228 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2e22c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2e230 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2e234 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2e238 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2e23c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2e240 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2e244 37a             | 
2e244 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2e248 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2e24c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2e250 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2e254 37e             |                  
2e254 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2e258 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2e25c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2e260 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2e264 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2e268 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2e26c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2e270 385             | 
2e270 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2e274 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2e278 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2e27c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2e280 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2e284 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2e288 38b             | 
2e288 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2e288 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2e28c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2e290 38d 2A B0 63 FD |                             push    addr1                   'save address
2e294 38e             | 
2e294 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2e294 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2e298 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2e29c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2e2a0 391             |             
2e2a0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2e2a4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2e2a8 393 2B B0 63 FD |                             pop     addr1                   'restore address
2e2ac 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2e2b0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2e2b4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2e2b8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2e2bc 398             | 
2e2bc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2e2c0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2e2c4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2e2c8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2e2cc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2e2d0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2e2d4 39e             | 
2e2d4 39e             |                             'trailer is done
2e2d4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2e2d8 39f             | 
2e2d8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2e2dc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2e2e0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2e2e4 3a2             | 
2e2e4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2e2e8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2e2ec 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2e2f0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2e2f4 3a6             |                             
2e2f4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2e2f8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2e2fc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2e300 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2e304 3aa             |                                                          
2e304 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2e308 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2e30c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2e310 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2e314 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2e318 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2e31c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2e320 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2e324 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2e328 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2e32c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2e330 3b5             |  
2e330 3b5 59 52 63 FD |                             drvh    cspin
2e334 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2e338 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2e33c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2e340 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2e344 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2e348 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2e34c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2e350 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2e354 3be EA E5 03 F6 |                             mov     d, orighubsize
2e358 3bf EF E5 63 F0 |                             shl     d, a
2e35c 3c0 F2 E3 83 F1 |                             sub     c, d
2e360 3c1 DD E3 03 F1 |                             add     c, offset1
2e364 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2e368 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2e36c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2e370 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2e374 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2e378 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2e37c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2e380 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2e384 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2e388 3cb BB D3 03 F6 |                             mov     resume, restorefill
2e38c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2e390 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2e394 3ce 6C FC BF CD |             if_c            call    #yield
2e398 3cf 2D 00 64 FD |                             ret
2e39c 3d0             |                            
2e39c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2e39c 3d0             |                       '     rczl    pa                      'rotate left into address offset
2e39c 3d0             |                       '     rczl    c wcz                   'restore count and flags
2e39c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2e3a0 3d1 02 EC 67 F0 |                             shl     pa, #2
2e3a4 3d2 28 06 64 AD |             if_z            setq    #3
2e3a8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2e3ac 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2e3b0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2e3b4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2e3b8 3d7             | 
2e3b8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2e3bc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2e3c0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2e3c4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2e3c8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2e3cc 3dc             |                 fit 1024-32
2e3cc 3dc             |         
2e3cc 3dc             | 
2e3cc 3dc             | '..................................................................................................
2e3cc 3dc             | 
2e3cc 3dc             |                 fit 1024-32
2e3cc 3dc 00 00 00 00 
2e3d0 3dd 00 00 00 00 
2e3d4 3de 00 00 00 00 
2e3d8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2e3dc 3e0             |                 org 1024-32
2e3dc 000             | 
2e3dc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2e3dc 000 00 00 00 00 |                 long $0000
2e3e0 001 11 11 00 00 |                 long $1111
2e3e4 002 22 22 00 00 |                 long $2222
2e3e8 003 33 33 00 00 |                 long $3333
2e3ec 004 44 44 00 00 |                 long $4444
2e3f0 005 55 55 00 00 |                 long $5555
2e3f4 006 66 66 00 00 |                 long $6666
2e3f8 007 77 77 00 00 |                 long $7777
2e3fc 008 88 88 00 00 |                 long $8888
2e400 009 99 99 00 00 |                 long $9999
2e404 00a AA AA 00 00 |                 long $aaaa
2e408 00b BB BB 00 00 |                 long $bbbb
2e40c 00c CC CC 00 00 |                 long $cccc
2e410 00d DD DD 00 00 |                 long $dddd
2e414 00e EE EE 00 00 |                 long $eeee
2e418 00f FF FF 00 00 |                 long $ffff
2e41c 010             | 
2e41c 010             | 'masks
2e41c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2e420 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2e424 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2e428 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2e42c 014             | 
2e42c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2e430 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2e434 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2e438 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2e43c 018             | 
2e43c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2e440 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2e444 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2e448 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2e44c 01c             | 
2e44c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2e450 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2e454 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2e458 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2e45c 020             |         fit 1024
2e45c 020             | 
2e45c 020             |         fit 1024
2e45c 020             | 
2e45c 020             | '--------------------------------------------------------------------------------------------------
2e45c 020             |         orgh
2e45c                 | 
2e45c                 | gfxexpansion
2e45c                 |                             'simple line drawing graphics expansion of memory driver
2e45c                 |                             'jmp     #donerepeats                'just return for now
2e45c                 | 
2e45c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2e460     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2e464     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2e468     DD E1 03 F6 |                             mov     b, offset1              'get error term
2e46c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2e470     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2e474     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2e478     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2e47c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2e480     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2e484     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2e488     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2e48c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2e490     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2e494     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2e498     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2e49c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2e4a0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2e4a4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2e4a8     DC E5 33 F9 |                             getword d, total, #0            'get line width
2e4ac     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2e4b0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2e4b4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2e4b8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2e4bc     C3 03 80 FD |                             jmp     #readmask               'continue filling
2e4c0                 | 	alignl
2e4c0                 | _usbnew_spin2_dat_
2e4c0                 |                 org     $000
2e4c0 000             | 
2e4c0 000             | usb_host_start
2e4c0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2e4c4 001             | 
2e4c4 001 03 00 00 FF 
2e4c8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2e4cc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2e4d0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2e4d4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e4d8 006 29 70 63 FD |                 setq2   htmp
2e4dc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2e4e0 008             | 
2e4e0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2e4e4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e4e8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2e4ec 00b             | 
2e4ec 00b             | '------------------------------------------------------------------------------
2e4ec 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2e4ec 00b             | ' special because the receiving function must not respond with either STALL or
2e4ec 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2e4ec 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2e4ec 00b             | ' corrupt packet, it must ignore the transaction
2e4ec 00b             | '------------------------------------------------------------------------------
2e4ec 00b             | ' On entry:
2e4ec 00b             | '   PTRA - start address of the SETUP data struct.
2e4ec 00b             | ' On exit:
2e4ec 00b             | '   retval - PID_ACK on success, otherwise error code.
2e4ec 00b             | '------------------------------------------------------------------------------
2e4ec 00b             | txn_setup
2e4ec 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2e4f0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2e4f4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2e4f8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e4fc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e500 010             | .setup
2e500 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e504 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e508 012 2D 00 64 AD |         if_z    ret
2e50c 013 7C 0B B0 FD |                 call    #retry_wait
2e510 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e514 015 2D 00 64 AD |         if_z    ret
2e518 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e51c 017 E0 FF 9F FD |                 jmp     #.setup
2e520 018             | 
2e520 018             | '------------------------------------------------------------------------------
2e520 018             | ' IN/INTERRUPT transaction.
2e520 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e520 018             | '------------------------------------------------------------------------------
2e520 018             | ' On entry:
2e520 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e520 018             | '     CRC(b19..23).
2e520 018             | ' On exit:
2e520 018             | '------------------------------------------------------------------------------
2e520 018             | txn_in
2e520 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e524 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e528 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e52c 01b             | 
2e52c 01b             |                 ' Fall through to urx_packet
2e52c 01b             | 
2e52c 01b             | '------------------------------------------------------------------------------
2e52c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e52c 01b             | ' received are handshakes and IN DATAx.
2e52c 01b             | '------------------------------------------------------------------------------
2e52c 01b             | ' On entry:
2e52c 01b             | ' On exit:
2e52c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e52c 01b             | '     returned.
2e52c 01b             | '------------------------------------------------------------------------------
2e52c 01b             | urx_packet
2e52c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e530 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e534 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e538 01e 1A 92 63 FD |                 getct   hct2
2e53c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e540 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e544 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e548 022             | .wait_sop
2e548 022 22 A7 8A FA |                 rdpin   urx, dm
2e54c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e550 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e554 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e558 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e55c 027             | .get_pid
2e55c 027 28 02 B0 FD |                 call    #urx_next
2e560 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e564 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e568 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e56c 02b             | .chk_pid
2e56c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e570 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e574 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e578 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e57c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e580 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e584 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e588 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e58c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e590 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e594 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e598 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e59c 037             | .ack_resend
2e59c 037 22 A7 82 FA |                 rqpin   urx, dm
2e5a0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e5a4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e5a8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e5ac 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e5b0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e5b4 03d             | .chk_eop
2e5b4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e5b8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e5bc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e5c0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e5c4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e5c8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e5cc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e5d0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e5d4 045 2D 00 64 FD |                 ret
2e5d8 046             | .idle
2e5d8 046 22 A7 82 FA |                 rqpin   urx, dm
2e5dc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e5e0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e5e4 049 2D 00 64 FD |                 ret
2e5e8 04a             | 
2e5e8 04a             | '------------------------------------------------------------------------------
2e5e8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e5e8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e5e8 04a             | ' if one is required.
2e5e8 04a             | '------------------------------------------------------------------------------
2e5e8 04a             | ' On entry:
2e5e8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e5e8 04a             | ' On exit:
2e5e8 04a             | '------------------------------------------------------------------------------
2e5e8 04a             | utx_token
2e5e8 04a 22 A7 82 FA |                 rqpin   urx, dm
2e5ec 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e5f0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e5f4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e5f8 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e5fc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e600 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e604 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e608 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e60c 053             | .next_byte
2e60c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e610 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e614 055             | .wait
2e614 055 40 46 72 FD |                 testp   dp                      wc
2e618 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e61c 057 23 03 08 FC |                 akpin   dp
2e620 058 22 A5 22 FC |                 wypin   utx, dm
2e624 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e628 05a             | 
2e628 05a             | '------------------------------------------------------------------------------
2e628 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e628 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e628 05a             | '------------------------------------------------------------------------------
2e628 05a             | ' On entry:
2e628 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e628 05a             | '     CRC(b19..23).
2e628 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e628 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e628 05a             | ' On exit:
2e628 05a             | '------------------------------------------------------------------------------
2e628 05a             | txn_out
2e628 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e62c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e630 05c 00 00 C0 FF 
2e634 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e638 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e63c 05f             | 
2e63c 05f             |                 ' Fall through to utx_data
2e63c 05f             | 
2e63c 05f             | '------------------------------------------------------------------------------
2e63c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e63c 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e63c 05f             | ' success/fail is not determined until the status stage of the transaction,
2e63c 05f             | ' this routine is only concerned about the current DATAx packet.
2e63c 05f             | '------------------------------------------------------------------------------
2e63c 05f             | ' On entry:
2e63c 05f             | '   PTRA - hub start address of the data to read.
2e63c 05f             | '   pkt_cnt - data payload size.
2e63c 05f             | ' On exit:
2e63c 05f             | '------------------------------------------------------------------------------
2e63c 05f             | utx_data
2e63c 05f 22 A7 82 FA |                 rqpin   urx, dm
2e640 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e644 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e648 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e64c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e650 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e654 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e658 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e65c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e660 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e664 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e668 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e66c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e670 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e674 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e678 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e67c 06f             | .read_byte
2e67c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e680 070 F0 00 B0 FD |                 call    #utx_byte
2e684 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e688 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e68c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e690 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e694 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e698 076             | .send_crc
2e698 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e69c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e6a0 078 D0 00 B0 FD |                 call    #utx_byte
2e6a4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e6a8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e6ac 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e6b0 07c             | 
2e6b0 07c             | '------------------------------------------------------------------------------
2e6b0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e6b0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e6b0 07c             | ' expects that the packet includes at least the CRC word.
2e6b0 07c             | '
2e6b0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e6b0 07c             | ' was requested, which makes it difficult to determine where the data stops
2e6b0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e6b0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e6b0 07c             | ' USB-16 expected residual value of 0xB001.
2e6b0 07c             | '
2e6b0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e6b0 07c             | ' so the caller can verify IN success before writing the data to its final
2e6b0 07c             | ' destination.
2e6b0 07c             | '------------------------------------------------------------------------------
2e6b0 07c             | ' On entry:
2e6b0 07c             | '   pkt_data - max byte count expected to be in the packet.
2e6b0 07c             | '   newb_flg - signals new byte ready when toggled.
2e6b0 07c             | ' On exit:
2e6b0 07c             | '   pkt_cnt - actual number of bytes read.
2e6b0 07c             | '------------------------------------------------------------------------------
2e6b0 07c             | urx_data
2e6b0 07c F7 75 03 F6 |                 mov     htmp2, pb
2e6b4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e6b8 07e 00 00 C0 FF 
2e6bc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e6c0 080 BA EF 03 F6 |                 mov     pb, htmp2
2e6c4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e6c8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e6cc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e6d0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e6d4 085             | .wait_byte
2e6d4 085             | ' In-line rx for max speed
2e6d4 085 22 A7 82 FA |                 rqpin   urx, dm
2e6d8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e6dc 087 53 A5 02 F5 |                 and     utx, urx
2e6e0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e6e4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e6e8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e6ec 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e6f0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e6f4 08d DC FF 9F FD |                 jmp     #.wait_byte
2e6f8 08e             | .get_byte
2e6f8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e6fc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e700 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e704 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e708 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e70c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e710 094             | .end_crc
2e710 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e714 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e718 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e71c 097 2D 00 64 1D |         if_a    ret
2e720 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e720 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e720 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e720 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e720 098 22 A7 82 FA |                 rqpin   urx, dm
2e724 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e728 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e72c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e72c 09b             | .chk_crc
2e72c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e730 09c 58 00 00 FF 
2e734 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e738 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e73c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e740 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e744 0a1 34 09 B0 FD |                 call    #poll_waitx
2e748 0a2             | 
2e748 0a2             |                 ' Fall through to utx_handshake
2e748 0a2             | 
2e748 0a2             | '------------------------------------------------------------------------------
2e748 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e748 0a2             | ' the appropriate IP delay has been inserted.
2e748 0a2             | '------------------------------------------------------------------------------
2e748 0a2             | ' On entry:
2e748 0a2             | '   retval - handshake PID to send.
2e748 0a2             | ' On exit:
2e748 0a2             | '   retval unchanged.
2e748 0a2             | '------------------------------------------------------------------------------
2e748 0a2             | utx_handshake
2e748 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e74c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e750 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e754 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e758 0a6 5F A5 02 F6 |                 mov     utx, retval
2e75c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e760 0a8             | .idle
2e760 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e764 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e768 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e76c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e770 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e774 0ad             | 
2e774 0ad             | '------------------------------------------------------------------------------
2e774 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e774 0ad             | '------------------------------------------------------------------------------
2e774 0ad             | ' On entry:
2e774 0ad             | '   utx - byte to transmit.
2e774 0ad             | ' On exit:
2e774 0ad             | '------------------------------------------------------------------------------
2e774 0ad             | utx_byte
2e774 0ad 40 46 72 FD |                 testp   dp                      wc
2e778 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e77c 0af 23 03 08 FC |                 akpin   dp
2e780 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e784 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e788 0b2             | 
2e788 0b2             | '------------------------------------------------------------------------------
2e788 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e788 0b2             | '------------------------------------------------------------------------------
2e788 0b2             | ' On entry:
2e788 0b2             | ' On exit:
2e788 0b2             | '   retval - the byte read.
2e788 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e788 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e788 0b2             | '     received.
2e788 0b2             | '------------------------------------------------------------------------------
2e788 0b2             | urx_next
2e788 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e78c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e790 0b4 53 A5 02 F5 |                 and     utx, urx
2e794 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e798 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e79c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e7a0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e7a4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e7a8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e7ac 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2e7b0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2e7b4 0bd 2D 00 64 FD |                 ret
2e7b8 0be             | 
2e7b8 0be             | '------------------------------------------------------------------------------
2e7b8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2e7b8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2e7b8 0be             | ' length, and the PID is not included in the CRC calculation:
2e7b8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2e7b8 0be             | '  CRC5  ENDP ADDRESS PID
2e7b8 0be             | ' %00000_1111_1111111_xxxxxxxx
2e7b8 0be             | '------------------------------------------------------------------------------
2e7b8 0be             | ' On entry:
2e7b8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2e7b8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2e7b8 0be             | ' On exit:
2e7b8 0be             | '   ep_addr_pid - CRC value appended to the packet.
2e7b8 0be             | '------------------------------------------------------------------------------
2e7b8 0be             | calc_crc5
2e7b8 0be FF 03 00 FF 
2e7bc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2e7c0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2e7c4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2e7c8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2e7cc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2e7d0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2e7d4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2e7d8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2e7dc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2e7e0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2e7e4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2e7e8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e7ec 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2e7f0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e7f4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2e7f8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2e7fc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2e800 0d0             | 
2e800 0d0             | '------------------------------------------------------------------------------
2e800 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2e800 0d0             | '------------------------------------------------------------------------------
2e800 0d0             | isr1_fsframe
2e800 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2e804 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e808 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e80c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e810 0d4             | .wait
2e810 0d4 40 46 72 FD |                 testp   dp                      wc
2e814 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e818 0d6 23 03 08 FC |                 akpin   dp
2e81c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2e820 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2e824 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2e828 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2e82c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2e830 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2e834 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2e838 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2e83c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2e840 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2e844 0e1 2C FF BF FD |                 call    #utx_byte
2e848 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2e84c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2e850 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2e854 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2e858 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2e85c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2e860 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2e864 0e9 5B A5 42 F5 |                 or      utx, icrc
2e868 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2e86c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2e870 0ec 20 00 90 FD |                 jmp     #isr1_wait
2e874 0ed             | isr1_lsframe
2e874 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2e878 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e87c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e880 0f0             | .wait
2e880 0f0 40 46 72 FD |                 testp   dp                      wc
2e884 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e888 0f2 23 03 08 FC |                 akpin   dp
2e88c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2e890 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2e894 0f5             | isr1_wait
2e894 0f5 22 A5 82 FA |                 rqpin   utx, dm
2e898 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2e89c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2e8a0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2e8a4 0f9 03 00 00 FF 
2e8a8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2e8ac 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2e8b0 0fc F5 FF 3B FB |                 reti1
2e8b4 0fd             | 
2e8b4 0fd             | '------------------------------------------------------------------------------
2e8b4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2e8b4 0fd             | ' transaction will complete before the next frame is triggered.
2e8b4 0fd             | '------------------------------------------------------------------------------
2e8b4 0fd             | ' On entry:
2e8b4 0fd             | ' On exit:
2e8b4 0fd             | '------------------------------------------------------------------------------
2e8b4 0fd             | wait_txn_ok
2e8b4 0fd 1A 74 63 FD |                 getct   htmp2
2e8b8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2e8bc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e8c0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2e8c4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2e8c8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2e8cc 103 2D 00 64 FD |                 ret
2e8d0 104             | 
2e8d0 104             | '------------------------------------------------------------------------------
2e8d0 104             | ' A device connection was detected, or a bus reset was requested by the USB
2e8d0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2e8d0 104             | ' and perform a reset sequence prior to device enumeration.
2e8d0 104             | '------------------------------------------------------------------------------
2e8d0 104             | dev_reset
2e8d0 104 22 A7 82 FA |                 rqpin   urx, dm
2e8d4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2e8d8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2e8dc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2e8e0 108             | reset
2e8e0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2e8e4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2e8e8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2e8ec 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e8f0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2e8f4 10d 1A 92 62 FD |                 getct   iframe_ct_base
2e8f8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e8fc 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e900 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2e904 111 24 70 07 F1 |                 add     htmp, #36
2e908 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2e90c 113             | .framewait
2e90c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2e910 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2e914 115 2D 00 64 FD |                 ret
2e918 116             | 
2e918 116             | '------------------------------------------------------------------------------
2e918 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2e918 116             | '------------------------------------------------------------------------------
2e918 116             | ' On entry:
2e918 116             | '   PTRA - source address.
2e918 116             | '   PB - destination address.
2e918 116             | '   hr0 - length of copy, in bytes.
2e918 116             | ' On exit:
2e918 116             | '------------------------------------------------------------------------------
2e918 116             | hmemcpy
2e918 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2e91c 117 F7 71 43 FC |                 wrbyte  htmp, pb
2e920 118 01 EE 07 F1 |                 add     pb, #1
2e924 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2e928 11a             | 
2e928 11a             | '------------------------------------------------------------------------------
2e928 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2e928 11a             | ' loop until the errant device is disconnected.
2e928 11a             | '------------------------------------------------------------------------------
2e928 11a             | ' On entry:
2e928 11a             | ' On exit:
2e928 11a             | '------------------------------------------------------------------------------
2e928 11a             | host_error
2e928 11a             |           if ERROR_LED >= 0
2e928 11a             |           end
2e928 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2e92c 11b             | 
2e92c 11b             | '------------------------------------------------------------------------------
2e92c 11b             | ' Get HID descriptor buffer for current port
2e92c 11b             | '------------------------------------------------------------------------------
2e92c 11b             | ' On entry:
2e92c 11b             | ' On exit:
2e92c 11b             | '   PB - HID descriptor buffer pointer
2e92c 11b             | '------------------------------------------------------------------------------
2e92c 11b             | get_hid_descr_buffer
2e92c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2e930 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2e934 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2e938 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2e93c 11f             | 
2e93c 11f             | 
2e93c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2e940 120             | 
2e940 120             | ' USB commands and error codes
2e940 120 00 00 00 00 | cmd_data        long    0
2e944 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2e948 122             | 
2e948 122             | ' Parameters block assigned at cog startup
2e948 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2e94c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2e950 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2e954 125             | if ACTIVITY_LED >= 0
2e954 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2e954 125             | end
2e954 125             | if ERROR_LED >= 0
2e954 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2e954 125             | end
2e954 125 00 00 00 00 | hid_descr_p     long    0
2e958 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2e958 126             | 'hkbd_report_p   long    0
2e958 126 00 00 00 00 | hub_descr_p     long    0
2e95c 127 00 00 00 00 | urx_buff_p      long    0
2e960 128 00 00 00 00 | dev_desc_buff_p long    0
2e964 129 00 00 00 00 | con_desc_buff_p long    0
2e968 12a 00 00 00 00 | cache_start_p   long    0
2e96c 12b 00 00 00 00 | cache_end_p     long    0
2e970 12c             | if EMUPAD_MAX_PLAYER > 0
2e970 12c             | emupad_out_ptr  long    0
2e970 12c             | end
2e970 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2e974 12d             | 
2e974 12d             | hdev_init_start
2e974 12d             | hdev_port       res     1
2e974 12d             | hdev_port       res     1
2e974 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e974 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e974 12d             | kbm_next_datax  res     1
2e974 12d             | kbm_next_datax  res     1
2e974 12d             | hub_intf_num    res     1
2e974 12d             | hub_intf_num    res     1
2e974 12d             | hub_next_datax  res     1
2e974 12d             | hub_next_datax  res     1
2e974 12d             | hub_status_chg  res     1
2e974 12d             | hub_status_chg  res     1
2e974 12d             | hub_port_status res     1
2e974 12d             | hub_port_status res     1
2e974 12d             | if HAVE_MOUSE
2e974 12d             | ms_intf_num     res     1
2e974 12d             | ms_intf_num     res     1
2e974 12d             | ms_in_max_pkt   res     1
2e974 12d             | ms_in_max_pkt   res     1
2e974 12d             | end
2e974 12d             | kb_intf_num     res     1
2e974 12d             | kb_intf_num     res     1
2e974 12d             | kb_interval     res     1
2e974 12d             | kb_interval     res     1
2e974 12d             | kb_in_max_pkt   res     1
2e974 12d             | kb_in_max_pkt   res     1
2e974 12d             | kb_max_index    res     1
2e974 12d             | kb_max_index    res     1
2e974 12d             | kb_led_states   res     1
2e974 12d             | kb_led_states   res     1
2e974 12d             | gp_intf_num     res     1
2e974 12d             | gp_intf_num     res     1
2e974 12d             | gp_interval     res     1
2e974 12d             | gp_interval     res     1
2e974 12d             | gp_max_index    res     1
2e974 12d             | gp_max_index    res     1
2e974 12d             | gp_descr_len    res     1+MAX_DEVICES
2e974 12d             | gp_descr_len    res     1+MAX_DEVICES
2e974 12d             | hdev_init_end
2e974 12d             | 
2e974 12d             | ' Initialized at cog startup:
2e974 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e974 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e974 12d             | iframe_ct_new   res     1
2e974 12d             | iframe_ct_new   res     1
2e974 12d             | iframe_ct_base  res     1
2e974 12d             | iframe_ct_base  res     1
2e974 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e974 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e974 12d             | 
2e974 12d             | ' This register block is reset to zero when a USB device connects
2e974 12d             | hreg_init_start
2e974 12d             | hstatus         res     1         ' Host status flags
2e974 12d             | hstatus         res     1         ' Host status flags
2e974 12d             | hctwait         res     1         ' Poll-based wait clocks
2e974 12d             | hctwait         res     1         ' Poll-based wait clocks
2e974 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e974 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e974 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e974 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e974 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e974 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e974 12d             | xfer_retry      res     1         ' Control transfer retry count
2e974 12d             | xfer_retry      res     1         ' Control transfer retry count
2e974 12d             | retry           res     1         ' Transaction retry count
2e974 12d             | retry           res     1         ' Transaction retry count
2e974 12d             | utx             res     1         ' Byte to transmit on USB
2e974 12d             | utx             res     1         ' Byte to transmit on USB
2e974 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e974 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e974 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e974 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e974 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e974 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e974 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e974 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e974 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e974 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e974 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e974 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e974 12d             | frame           res     1         ' USB 1ms frame counter value
2e974 12d             | frame           res     1         ' USB 1ms frame counter value
2e974 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e974 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e974 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e974 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e974 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e974 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e974 12d             | crc             res     1         ' Used for CRC16 calculation
2e974 12d             | crc             res     1         ' Used for CRC16 calculation
2e974 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e974 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e974 12d             | retval          res     1         ' Global success/fail return parameter
2e974 12d             | retval          res     1         ' Global success/fail return parameter
2e974 12d             | context_retval  res     1         ' Operation contextual return parameter
2e974 12d             | context_retval  res     1         ' Operation contextual return parameter
2e974 12d             | ' Device stuff
2e974 12d             | hdev_id         res     1+MAX_DEVICES
2e974 12d             | hdev_id         res     1+MAX_DEVICES
2e974 12d             | hdev_bcd        res     1
2e974 12d             | hdev_bcd        res     1
2e974 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e974 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e974 12d             | ' Keyboard/mouse stuff
2e974 12d             | hctrl_ep_addr   res     1
2e974 12d             | hctrl_ep_addr   res     1
2e974 12d             | hctrl_max_pkt   res     1
2e974 12d             | hctrl_max_pkt   res     1
2e974 12d             | hconfig_base    res     1
2e974 12d             | hconfig_base    res     1
2e974 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e974 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e974 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e974 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e974 12d             | hdev_class      res     1
2e974 12d             | hdev_class      res     1
2e974 12d             | hdev_subclass   res     1
2e974 12d             | hdev_subclass   res     1
2e974 12d             | hdev_protocol   res     1
2e974 12d             | hdev_protocol   res     1
2e974 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e974 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e974 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e974 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e974 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e974 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e974 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e974 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e974 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e974 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e974 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e974 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e974 12d             | if HAVE_MOUSE
2e974 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e974 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e974 12d             | end
2e974 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e974 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e974 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e974 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e974 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e974 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e974 12d             | hdev_out_addr   res     1
2e974 12d             | hdev_out_addr   res     1
2e974 12d             | 
2e974 12d             | if EMUPAD_MAX_PLAYER > 0
2e974 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2e974 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2e974 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2e974 12d             | end
2e974 12d             | 
2e974 12d             | hreg_init_end
2e974 12d             | 
2e974 12d             | hidr_start
2e974 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e974 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e974 12d             | hidr_flags      res     1
2e974 12d             | hidr_flags      res     1
2e974 12d             | hidr_axis       res     3
2e974 12d             | hidr_axis       res     3
2e974 12d             | hidr_buttons    res     1
2e974 12d             | hidr_buttons    res     1
2e974 12d             | hidr_hats       res     1
2e974 12d             | hidr_hats       res     1
2e974 12d             | '' Above are actually useful values, 6 longs
2e974 12d             | hidr_id         res     1
2e974 12d             | hidr_id         res     1
2e974 12d             | hidr_state      res     1
2e974 12d             | hidr_state      res     1
2e974 12d             | hidr_size       res     1
2e974 12d             | hidr_size       res     1
2e974 12d             | hidr_count      res     1
2e974 12d             | hidr_count      res     1
2e974 12d             | hidr_offset     res     1
2e974 12d             | hidr_offset     res     1
2e974 12d             | hidr_usage_idx  res     1
2e974 12d             | hidr_usage_idx  res     1
2e974 12d             | hidr_lminmax    res     1
2e974 12d             | hidr_lminmax    res     1
2e974 12d             | hidr_pminmax    res     1
2e974 12d             | hidr_pminmax    res     1
2e974 12d             | hidr_type       res     1
2e974 12d             | hidr_type       res     1
2e974 12d             | hidr_end
2e974 12d             | 
2e974 12d             | ' Variables dependent on the system freqency
2e974 12d             | _var_64_lower_  res     1
2e974 12d             | _var_64_lower_  res     1
2e974 12d             | _var_64_upper_  res     1
2e974 12d             | _var_64_upper_  res     1
2e974 12d             | _12Mbps_        res     1
2e974 12d             | _12Mbps_        res     1
2e974 12d             | _1_5Mbps_       res     1
2e974 12d             | _1_5Mbps_       res     1
2e974 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e974 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e974 12d             | _1us_           res     1         ' 1us
2e974 12d             | _1us_           res     1         ' 1us
2e974 12d             | _10us_          res     1         ' 10us
2e974 12d             | _10us_          res     1         ' 10us
2e974 12d             | _33us_          res     1         ' 33us
2e974 12d             | _33us_          res     1         ' 33us
2e974 12d             | _txn_err_       res     1         ' 250us
2e974 12d             | _txn_err_       res     1         ' 250us
2e974 12d             | _500us_         res     1         ' 500us
2e974 12d             | _500us_         res     1         ' 500us
2e974 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e974 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e974 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e974 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e974 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e974 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e974 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e974 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e974 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e974 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e974 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e974 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e974 12d             | _preamble_wait_ res     1
2e974 12d             | _preamble_wait_ res     1
2e974 12d             | _1ms_           res     1         ' 1ms
2e974 12d             | _1ms_           res     1         ' 1ms
2e974 12d             | _2ms_           res     1         ' 2ms
2e974 12d             | _2ms_           res     1         ' 2ms
2e974 12d             | _suspend_wait_  res     1         ' 3ms
2e974 12d             | _suspend_wait_  res     1         ' 3ms
2e974 12d             | _4ms_           res     1         ' 4ms
2e974 12d             | _4ms_           res     1         ' 4ms
2e974 12d             | _xfer_wait_     res     1         ' 5ms
2e974 12d             | _xfer_wait_     res     1         ' 5ms
2e974 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e974 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e974 12d             | _reset_hold_    res     1         ' 15ms
2e974 12d             | _reset_hold_    res     1         ' 15ms
2e974 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e974 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e974 12d             | _21ms_          res     1         ' 21ms
2e974 12d             | _21ms_          res     1         ' 21ms
2e974 12d             | _100ms_         res     1         ' 100ms
2e974 12d             | _100ms_         res     1         ' 100ms
2e974 12d             | _500ms_         res     1         ' 500ms
2e974 12d             | _500ms_         res     1         ' 500ms
2e974 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e974 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e974 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e974 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e974 12d             | '------------------------------------------------------------------------------
2e974 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e974 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e974 12d             | _usb_d_ls_nco_  res     1
2e974 12d             | _usb_d_ls_nco_  res     1
2e974 12d             | _usb_h_fs_nco_  res     1
2e974 12d             | _usb_h_fs_nco_  res     1
2e974 12d             | _usb_d_fs_nco_  res     1
2e974 12d             | _usb_d_fs_nco_  res     1
2e974 12d             | '------------------------------------------------------------------------------
2e974 12d             | ' Scratch registers
2e974 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e974 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e974 12d             | htmp1           res     1
2e974 12d             | htmp1           res     1
2e974 12d             | htmp2           res     1
2e974 12d             | htmp2           res     1
2e974 12d             | htmp3           res     1
2e974 12d             | htmp3           res     1
2e974 12d             | hrep            res     1         ' Repeat count
2e974 12d             | hrep            res     1         ' Repeat count
2e974 12d             | hsave0          res     1         ' Subroutine parameter saves
2e974 12d             | hsave0          res     1         ' Subroutine parameter saves
2e974 12d             | hsave1          res     1
2e974 12d             | hsave1          res     1
2e974 12d             | hsave2          res     1
2e974 12d             | hsave2          res     1
2e974 12d             | isrtmp1         res     1
2e974 12d             | isrtmp1         res     1
2e974 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e974 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e974 12d             | hr0             res     1         ' Multi-purpose registers
2e974 12d             | hr0             res     1         ' Multi-purpose registers
2e974 12d             | hr1             res     1
2e974 12d             | hr1             res     1
2e974 12d             | hr2             res     1
2e974 12d             | hr2             res     1
2e974 12d             | hr3             res     1
2e974 12d             | hr3             res     1
2e974 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e974 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e974 12d             | hpar2           res     1
2e974 12d             | hpar2           res     1
2e974 12d             | hpar3           res     1
2e974 12d             | hpar3           res     1
2e974 12d             | hct2            res     1         ' Function response bus turn-around timer
2e974 12d             | hct2            res     1         ' Function response bus turn-around timer
2e974 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e974 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e974 12d             | mod_cnt         res     1         ' Used in idle loops
2e974 12d             | mod_cnt         res     1         ' Used in idle loops
2e974 12d             |                 fit     $1F0
2e974 12d             |                 org     $200
2e974 200             | hlut_start
2e974 200             | 
2e974 200             | '------------------------------------------------------------------------------
2e974 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2e974 200             | ' settings to startup defaults.
2e974 200             | '------------------------------------------------------------------------------
2e974 200             | ' On entry:
2e974 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2e974 200             | '------------------------------------------------------------------------------
2e974 200             | set_speed_full
2e974 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2e978 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e97c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2e980 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2e984 204             | '                ret                             wcz     ' Restore caller flags on exit
2e984 204             | 
2e984 204             | '------------------------------------------------------------------------------
2e984 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2e984 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2e984 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2e984 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2e984 204             | ' putting the smart pins into reset.
2e984 204             | '------------------------------------------------------------------------------
2e984 204             | ' On entry:
2e984 204             | ' On exit: CZ flags restored to caller states
2e984 204             | '------------------------------------------------------------------------------
2e984 204             | set_speed_low
2e984 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2e988 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2e98c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2e990 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2e994 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2e998 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2e99c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2e9a0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2e9a4 20c             | 
2e9a4 20c             | '------------------------------------------------------------------------------
2e9a4 20c             | ' Perform configuration stuff required when a device intitially connects.
2e9a4 20c             | '------------------------------------------------------------------------------
2e9a4 20c             | ' On entry:
2e9a4 20c             | ' On exit:
2e9a4 20c             | '------------------------------------------------------------------------------
2e9a4 20c             | on_connect
2e9a4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2e9a8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2e9ac 20e             | .retry
2e9ac 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e9b0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2e9b4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2e9b8 211 00 08 00 FF 
2e9bc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2e9c0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2e9c4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e9c8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2e9cc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2e9d0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2e9d4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e9d8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2e9dc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2e9e0 21b 4C 03 B0 FD |                 call    #poll_waitx
2e9e4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2e9e8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2e9ec 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2e9f0 21f B8 FF 9F FD |                 jmp     #.retry
2e9f4 220             | .get_dev_desc
2e9f4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2e9f8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2e9fc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2ea00 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2ea04 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2ea08 225 88 FB BF FD |                 call    #reset
2ea0c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2ea10 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ea14 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2ea18 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2ea1c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea20 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ea24 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2ea28 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2ea2c 22e 04 00 00 FF 
2ea30 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2ea34 230 34 FA BF FD |                 call    #calc_crc5
2ea38 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2ea3c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ea40 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2ea44 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2ea48 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2ea4c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2ea50 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea54 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2ea58 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2ea5c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2ea60 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2ea64 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2ea68 23d C4 02 B0 FD |                 call    #poll_waitx
2ea6c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2ea70 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ea74 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2ea78 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2ea7c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2ea80 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ea84 244 2D 00 64 5D |         if_nz   ret
2ea88 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2ea8c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2ea90 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2ea94 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2ea98 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2ea9c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2eaa0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2eaa4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2eaa8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2eaac 24e 2C FB 9F CD |         if_b    jmp     #host_error
2eab0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2eab4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eab8 251 2D EC 63 FD |                 call    pa
2eabc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2eac0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eac4 254 2C EC 63 FD |                 jmp     pa
2eac8 255             | 
2eac8 255             | '------------------------------------------------------------------------------
2eac8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2eac8 255             | ' Status reporting is always in the function-to-host direction.
2eac8 255             | '------------------------------------------------------------------------------
2eac8 255             | ' On entry:
2eac8 255             | '   PTRA - start address of the SETUP data in hub.
2eac8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2eac8 255             | '     stage.
2eac8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2eac8 255             | ' On exit:
2eac8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2eac8 255             | '     contains the count of data stage bytes actually received, which must
2eac8 255             | '     always be <= the count requested.
2eac8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2eac8 255             | '     more specific USB operation error code.
2eac8 255             | '------------------------------------------------------------------------------
2eac8 255             | control_read
2eac8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2eacc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2ead0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2ead4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ead8 259             | .xfer_start
2ead8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2eadc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2eae0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2eae4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2eae8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2eaec 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2eaf0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2eaf4 260 61 00 00 FF 
2eaf8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2eafc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2eb00 263             | .data
2eb00 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2eb04 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2eb08 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2eb0c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2eb10 267             | .nak_retry
2eb10 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2eb14 268             | .in_retry
2eb14 268 BC F6 BF FD |                 call    #txn_in
2eb18 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2eb1c 26a 28 00 90 AD |         if_z    jmp     #.commit
2eb20 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2eb24 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2eb28 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2eb2c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2eb30 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2eb34 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2eb38 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2eb3c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2eb40 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2eb44 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2eb48 275             | .commit
2eb48 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2eb4c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2eb50 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2eb54 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2eb58 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2eb5c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2eb60 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2eb64 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2eb68 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2eb6c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2eb70 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2eb74 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2eb78 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2eb7c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2eb80 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2eb84 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2eb88 285             | .pre_status
2eb88 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2eb8c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2eb90 287 00 B0 06 F6 |                 mov     pkt_data, #0
2eb94 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2eb98 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2eb9c 28a 61 00 00 FF 
2eba0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2eba4 28c             | .out_retry
2eba4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2eba8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ebac 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2ebb0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ebb4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2ebb8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ebbc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2ebc0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2ebc4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ebc8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2ebcc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2ebd0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2ebd0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2ebd0 297             | ' ControlRead() transfer gets things unstuck most of the time...
2ebd0 297             | .xfer_retry
2ebd0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2ebd4 298 58 01 B0 FD |                 call    #poll_waitx
2ebd8 299 8C F9 BF FD |                 call    #wait_txn_ok
2ebdc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2ebe0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2ebe4 29c C8 EF 03 F6 |                 mov     pb, hpar3
2ebe8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2ebec 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2ebf0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2ebf4 2a0             | 
2ebf4 2a0             | '------------------------------------------------------------------------------
2ebf4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2ebf4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2ebf4 2a0             | ' the SETUP data struct is filled with the required values.
2ebf4 2a0             | '------------------------------------------------------------------------------
2ebf4 2a0             | ' On entry:
2ebf4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2ebf4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2ebf4 2a0             | '     stage.
2ebf4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2ebf4 2a0             | ' On exit:
2ebf4 2a0             | '   retval - used to convey the success/failure of each stage.
2ebf4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2ebf4 2a0             | '     more specific USB operation error code.
2ebf4 2a0             | '------------------------------------------------------------------------------
2ebf4 2a0             | control_write
2ebf4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ebf8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ebfc 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ec00 2a3             | 
2ec00 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2ec04 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2ec08 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2ec0c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2ec10 2a7             | .xfer_start
2ec10 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2ec14 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2ec18 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2ec1c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec20 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2ec24 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2ec28 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2ec2c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2ec30 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2ec34 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2ec38 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ec3c 2b2             | .data
2ec3c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2ec40 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2ec44 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2ec48 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2ec4c 2b6             | .out_retry
2ec4c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2ec50 2b7 88 F6 BF FD |                 call    #txn_out
2ec54 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ec58 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2ec5c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2ec60 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2ec64 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2ec68 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2ec6c 2be             | .commit
2ec6c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2ec70 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2ec74 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2ec78 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2ec7c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2ec80 2c3             | pre_status_in
2ec80 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2ec84 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2ec88 2c5             | .status_retry
2ec88 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2ec8c 2c6 44 F5 BF FD |                 call    #txn_in
2ec90 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2ec94 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2ec98 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2ec9c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2eca0 2cb 2D 00 64 AD |         if_z    ret
2eca4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2eca8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ecac 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2ecb0 2cf             | '               ret                                     ' Caller must handle transfer retirement
2ecb0 2cf             | 
2ecb0 2cf             | '------------------------------------------------------------------------------
2ecb0 2cf             | ' Execute an IN interrupt transaction.
2ecb0 2cf             | '------------------------------------------------------------------------------
2ecb0 2cf             | ' On entry:
2ecb0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2ecb0 2cf             | '   hpar2 - Address of the IN data buffer
2ecb0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2ecb0 2cf             | ' On exit:
2ecb0 2cf             | '   retval - the result of the operation.
2ecb0 2cf             | '   hpar3 - the count of IN data bytes actually received.
2ecb0 2cf             | '------------------------------------------------------------------------------
2ecb0 2cf             | do_int_in
2ecb0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ecb4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ecb8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ecbc 2d2             | 
2ecbc 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2ecc0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2ecc4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2ecc8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2eccc 2d6             | .retry
2eccc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2ecd0 2d7 00 F5 BF FD |                 call    #txn_in
2ecd4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2ecd8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2ecdc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2ece0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2ece4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2ece8 2dd 54 00 B0 FD |                 call    #retry_wait
2ecec 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ecf0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2ecf4 2e0 D4 FF 9F FD |                 jmp     #.retry
2ecf8 2e1             | .commit
2ecf8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2ecfc 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2ed00 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2ed04 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2ed08 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2ed0c 2e6             | .post_ret
2ed0c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2ed10 2e7             | 
2ed10 2e7             | 
2ed10 2e7             | '------------------------------------------------------------------------------
2ed10 2e7             | ' Resets the downstream hub port to FS
2ed10 2e7             | '------------------------------------------------------------------------------
2ed10 2e7             | dwnstream_reset
2ed10 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2ed14 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2ed18 2e9             | 
2ed18 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2ed1c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2ed20 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2ed24 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ed28 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2ed2c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2ed30 2ef             | 
2ed30 2ef             | '------------------------------------------------------------------------------
2ed30 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2ed30 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2ed30 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2ed30 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2ed30 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2ed30 2ef             | '------------------------------------------------------------------------------
2ed30 2ef             | ' On entry:
2ed30 2ef             | '   hctwait - wait interval in sysclocks.
2ed30 2ef             | ' On exit:
2ed30 2ef             | '------------------------------------------------------------------------------
2ed30 2ef             | poll_waitx
2ed30 2ef 1A 92 63 FD |                 getct   hct2
2ed34 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2ed38 2f1             | .wait
2ed38 2f1 FF 25 CC FB |                 jnct2   #.wait
2ed3c 2f2 2D 00 64 FD |                 ret
2ed40 2f3             | 
2ed40 2f3             | '------------------------------------------------------------------------------
2ed40 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2ed40 2f3             | '------------------------------------------------------------------------------
2ed40 2f3             | ' On entry:
2ed40 2f3             | '   retval - transaction response PID or error code.
2ed40 2f3             | ' On exit:
2ed40 2f3             | '------------------------------------------------------------------------------
2ed40 2f3             | retry_wait
2ed40 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2ed44 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2ed48 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2ed4c 2f6 14 00 90 AD |         if_z    jmp     #.nak
2ed50 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2ed54 2f8 D8 FF BF FD |                 call    #poll_waitx
2ed58 2f9             | .dec
2ed58 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2ed5c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2ed60 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2ed64 2fc             | .nak
2ed64 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2ed68 2fd C4 FF BF FD |                 call    #poll_waitx
2ed6c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2ed70 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2ed74 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2ed78 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2ed7c 302 2D 00 64 FD |                 ret
2ed80 303             | 
2ed80 303             | host_reset
2ed80 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2ed84 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2ed88 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2ed88 305 BD 01 05 FF 
2ed8c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2ed90 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2ed94 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2ed98 309             | ' Check to see if the system clock has been changed.
2ed98 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ed9c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2eda0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2eda4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2eda8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2edac 30e 40 46 62 FD |                 dirl    dp
2edb0 30f             | 
2edb0 30f 28 02 64 FD |                 setq    #1
2edb4 310 80 00 80 FF 
2edb8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2edbc 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2edc0 313             | .enable
2edc0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2edc4 314 41 46 62 FD |                 dirh    dp
2edc8 315 1F 36 63 FD |                 waitx   _1us_
2edcc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2edd0 317             | 
2edd0 317             |                 ' Handle Port protection enable and startup delay
2edd0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2edd4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2edd8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2eddc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2ede0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2ede4 31c             | 
2ede4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2ede8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2edec 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2edf0 31f 00 00 04 F6 |                 mov     0-0, #0
2edf4 320             | .regloop
2edf4 320             | 
2edf4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2edf4 320             | 
2edf4 320             | discon_entry
2edf4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2edf8 321             | 
2edf8 321             |               
2edf8 321             |         if HAVE_HIDPAD
2edf8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2edfc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ee00 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2ee04 324 F7 01 68 FC |                 wrlong  #0,pb
2ee08 325             |         end
2ee08 325             |         if EMUPAD_MAX_PLAYER > 0
2ee08 325             |         end
2ee08 325             | 
2ee08 325             |                 ' Fall through to disconnected loop
2ee08 325             | 
2ee08 325             | '-----------------------------------------------------------------------------------------------------------------
2ee08 325             | ' Device connect handling (Section 7.1.7.3).
2ee08 325             | '-----------------------------------------------------------------------------------------------------------------
2ee08 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2ee08 325             | ' device to connect (Section 7.1.7.3).
2ee08 325             | '-----------------------------------------------------------------------------------------------------------------
2ee08 325             | disconnected
2ee08 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2ee0c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2ee10 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2ee14 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2ee18 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2ee1c 32a             |         if ACTIVITY_LED >= 0
2ee1c 32a             |         end
2ee1c 32a 22 A7 82 FA |                 rqpin   urx, dm
2ee20 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2ee24 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2ee28 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2ee2c 32e             | .se1_test
2ee2c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2ee30 32f FC FE BF FD |                 call    #poll_waitx
2ee34 330 22 A7 82 FA |                 rqpin   urx, dm
2ee38 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ee3c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2ee40 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2ee44 334             | .se1            'SE1 is a fatal error condition
2ee44 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2ee48 335 E4 FE BF FD |                 call    #poll_waitx
2ee4c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2ee50 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2ee54 338             | .connect_test                                           ' Test lines until stable J/K state seen
2ee54 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2ee58 339 22 A7 82 FA |                 rqpin   urx, dm
2ee5c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2ee60 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2ee64 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2ee68 33d             | connected
2ee68 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2ee6c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2ee70 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2ee74 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2ee78 341             | .set_pulse
2ee78 341 1A 64 63 FD |                 getct   _pulse_time_
2ee7c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2ee80 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2ee80 343             | ' of 1ms and make a correction, if necessary.
2ee80 343             | '                mov     htmp, _1ms_
2ee80 343             | '                subs    htmp, iframe_delta
2ee80 343             | '                adds    _frame1ms_clks_, htmp
2ee80 343             | '                debug(udec(_frame1ms_clks_))
2ee80 343             | 
2ee80 343             |                 ' Fall through to idle/processing loop
2ee80 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2ee84 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2ee88 345             | 
2ee88 345             | hidle
2ee88 345 22 A7 82 FA |                 rqpin   urx, dm
2ee8c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ee90 347 98 00 90 CD |         if_c    jmp     #.se0_test
2ee94 348 24 06 70 FD |                 pollct3                         wc
2ee98 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2ee9c 34a 1A 94 63 FD |                 getct   hct3
2eea0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2eea4 34c             | 
2eea4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2eea8 34d 00 70 E3 F8 |                 getbyte htmp
2eeac 34e             | 
2eeac 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2eeb0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2eeb4 350 40 00 90 AD |         if_z    jmp     #.poll
2eeb8 351             | 
2eeb8 351             |         if _HAVE_GAMEPAD
2eeb8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2eebc 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2eec0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2eec4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2eec8 355 2C 00 90 AD |         if_z    jmp     #.poll
2eecc 356             |         end
2eecc 356             | 
2eecc 356             |         if HAVE_MOUSE
2eecc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2eed0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2eed4 358 20 00 90 AD |         if_z    jmp     #.poll
2eed8 359             |         end
2eed8 359             | 
2eed8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2eedc 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2eee0 35b 14 00 90 AD |         if_z    jmp     #.poll
2eee4 35c             | 
2eee4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2eee8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2eeec 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2eef0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2eef4 360             |         if HAVE_MOUSE
2eef4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2eef8 361             |         else
2eef8 361             |         end
2eef8 361             | 
2eef8 361             | .poll
2eef8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2eefc 362 2D EC 63 FD |                 call    pa
2ef00 363             | .skip_poll
2ef00 363             | 
2ef00 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2ef04 364             | 
2ef04 364             | .nopoll
2ef04 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2ef08 365 44 00 90 AD |         if_z    jmp     #hsuspend
2ef0c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2ef10 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2ef14 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2ef18 369 1A 84 63 FD |                 getct   hr0
2ef1c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2ef20 36b             |         if ACTIVITY_LED >= 0
2ef20 36b             |         end
2ef20 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2ef24 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2ef28 36d 5C FF 9F FD |                 jmp     #hidle
2ef2c 36e             | ' Check for extended SE0 state on the bus
2ef2c 36e             | .se0_test
2ef2c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2ef30 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2ef34 370 22 A7 82 FA |                 rqpin   urx, dm
2ef38 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ef3c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2ef40 373 24 F6 BF FD |                 call    #wait_txn_ok
2ef44 374 00 00 80 FF 
2ef48 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2ef4c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2ef4c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2ef50 377             | 
2ef50 377             | hsuspend
2ef50 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2ef54 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2ef58 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2ef5c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2ef60 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2ef64 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2ef68 37d             | 
2ef68 37d             |                 ' Fall through to resume wait loop
2ef68 37d             | 
2ef68 37d             | hwait_resume
2ef68 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2ef6c 37e 02 86 47 F0 |                 shr     hr1, #2
2ef70 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2ef74 380             |         if ACTIVITY_LED >= 0
2ef74 380             |         end
2ef74 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2ef78 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2ef7c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2ef80 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ef84 384 18 00 90 AD |         if_z    jmp     #.resume
2ef88 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2ef8c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ef90 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2ef94 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ef98 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2ef9c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2efa0 38b             | .resume
2efa0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2efa4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2efa8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2efac 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2efb0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2efb4 390 1F 70 63 FD |                 waitx   htmp
2efb8 391 22 07 28 FC |                 wypin   #OUT_J, dm
2efbc 392 01 70 47 F0 |                 shr     htmp, #1
2efc0 393 1F 70 63 FD |                 waitx   htmp
2efc4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2efc8 395 1A 92 62 FD |                 getct   iframe_ct_base
2efcc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2efd0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2efd4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2efd8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2efdc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2efe0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2efe4 39c             | 
2efe4 39c             | '------------------------------------------------------------------------------
2efe4 39c             | ' Send preamble to enable low-speed HUB ports
2efe4 39c             | '------------------------------------------------------------------------------
2efe4 39c             | ' On entry:
2efe4 39c             | ' On exit:
2efe4 39c             | '   USB baud rate set to low-speed
2efe4 39c             | '------------------------------------------------------------------------------
2efe4 39c             | utx_pre
2efe4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2efe8 39d 40 46 62 FD |                 dirl    dp
2efec 39e 28 02 64 FD |                 setq    #1
2eff0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2eff4 3a0 58 44 62 FD |                 drvl    dm
2eff8 3a1 59 46 62 FD |                 drvh    dp
2effc 3a2             | 
2effc 3a2 1E 00 00 FF 
2f000 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2f004 3a4             | 
2f004 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2f008 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2f00c 3a6 28 02 64 3D |         if_nc   setq    #1
2f010 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2f014 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2f018 3a9             | .l1
2f018 3a9             | 
2f018 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2f01c 3aa 40 46 62 FD |                 dirl    dp
2f020 3ab 28 02 64 FD |                 setq    #1
2f024 3ac 80 00 80 FF 
2f028 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2f02c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2f030 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2f034 3b0 41 46 62 FD |                 dirh    dp
2f038 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2f03c 3b2             | 
2f03c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2f040 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2f044 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2f048 3b5             | 
2f048 3b5             | hlut_end
2f048 3b5             |                 fit     $400
2f048 3b5             |                 orgh
2f048                 | if OVERLAP_MEMORY
2f048                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2f048                 | end
2f048                 | '------------------------------------------------------------------------------
2f048                 | ' Routines called from cog space.
2f048                 | '------------------------------------------------------------------------------
2f048                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2f048                 | '------------------------------------------------------------------------------
2f048                 | 
2f048                 | '------------------------------------------------------------------------------
2f048                 | ' USB host cog initialization.
2f048                 | '------------------------------------------------------------------------------
2f048                 | usb_host_init
2f048                 |                 ' Initialize buffer pointers
2f048                 |         if OVERLAP_MEMORY
2f048                 |         else
2f048     40 15 B0 FE |                 loc     pb, #hid_descr
2f04c                 |         end
2f04c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2f050                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2f050                 |                 {
2f050                 |                 }
2f050                 |         
2f050                 |                 {
2f050                 |                 }
2f050                 |                 'loc     pb,#hkbd_report
2f050                 |                 'mov     hkbd_report_p,pb
2f050                 | 
2f050     08 1D B0 FE |                 loc     pb, #hub_descr
2f054     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2f058     1D 1D B0 FE |                 loc     pb, #urx_buff
2f05c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2f060     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2f064     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2f068     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2f06c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2f070     18 15 B0 FE |                 loc     pb, #usb_cache_start
2f074     F7 55 02 F6 |                 mov     cache_start_p, pb
2f078     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2f07c     F7 57 02 F6 |                 mov     cache_end_p, pb
2f080                 | 
2f080                 |         if ERROR_LED >= 0
2f080                 |         end
2f080                 | 
2f080                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2f080                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2f080                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2f080                 | ' Configure and enable the Serial Host USB port.
2f080     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2f084                 | 
2f084                 | '------------------------------------------------------------------------------
2f084                 | ' Timing calculations happen before any interrupt(s) are enabled.
2f084                 | '------------------------------------------------------------------------------
2f084                 | ' On entry:
2f084                 | '   htmp - current CLKFREQ value.
2f084                 | '------------------------------------------------------------------------------
2f084                 | hinit_usb_timings
2f084                 | '                getct   htmp2
2f084     B8 59 02 F6 |                 mov     save_sysclk, htmp
2f088     8D 5B 80 FF 
2f08c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2f090     18 30 63 FD |                 getqx   _12Mbps_
2f094     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2f098     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2f09c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2f0a0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2f0a4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2f0a8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2f0ac     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2f0b0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2f0b4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2f0b8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2f0bc     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2f0c0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2f0c4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2f0c8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2f0cc     80 00 00 FF 
2f0d0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2f0d4     18 2C 63 FD |                 getqx   _var_64_lower_
2f0d8     19 2E 63 FD |                 getqy   _var_64_upper_
2f0dc     28 2C 63 FD |                 setq    _var_64_lower_
2f0e0     65 CD 1D FF 
2f0e4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2f0e8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2f0ec     01 00 00 FF 
2f0f0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2f0f4     18 2C 63 FD |                 getqx   _var_64_lower_
2f0f8     19 2E 63 FD |                 getqy   _var_64_upper_
2f0fc     28 2C 63 FD |                 setq    _var_64_lower_
2f100     A1 07 00 FF 
2f104     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2f108     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2f10c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2f110     09 36 57 F0 |                 shr     _1us_, #9               wc
2f114     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2f118     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2f11c     18 38 63 FD |                 getqx   _10us_
2f120     09 38 57 F0 |                 shr     _10us_, #9              wc
2f124     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2f128     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2f12c     18 3A 63 FD |                 getqx   _33us_
2f130     09 3A 57 F0 |                 shr     _33us_, #9              wc
2f134     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2f138     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2f13c     18 3C 63 FD |                 getqx   _txn_err_
2f140     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2f144     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2f148     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2f14c     18 3E 63 FD |                 getqx   _500us_
2f150     09 3E 57 F0 |                 shr     _500us_, #9             wc
2f154     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2f158     01 00 00 FF 
2f15c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2f160     18 40 63 FD |                 getqx   _txn_ok_ls_
2f164     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2f168     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2f16c     01 00 00 FF 
2f170     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2f174     18 42 63 FD |                 getqx   _txn_ok_fs_
2f178     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2f17c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2f180     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2f184     05 00 00 FF 
2f188     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2f18c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2f190     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2f194     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2f198     1C 00 00 FF 
2f19c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2f1a0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2f1a4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2f1a8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2f1ac     00 00 00 FF 
2f1b0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2f1b4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2f1b8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2f1bc     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2f1c0     04 00 00 FF 
2f1c4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2f1c8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2f1cc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2f1d0     8D 5B 00 FF 
2f1d4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2f1d8     18 4C 63 FD |                 getqx   _preamble_wait_
2f1dc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2f1e0     01 00 00 FF 
2f1e4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2f1e8     18 2C 63 FD |                 getqx   _var_64_lower_
2f1ec     19 2E 63 FD |                 getqy   _var_64_upper_
2f1f0     28 2C 63 FD |                 setq    _var_64_lower_
2f1f4     01 00 00 FF 
2f1f8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2f1fc     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2f200     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2f204     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2f208     FF FF 7F FF 
2f20c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2f210     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2f214     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2f218     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2f21c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2f220     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2f224     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2f228     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2f22c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2f230     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2f234     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2f238     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2f23c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2f240     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2f244     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2f248     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2f24c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2f250     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2f254     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2f258     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2f25c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2f260     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2f264     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2f268     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2f26c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2f270     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2f274     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2f278                 | '        _ret_   mov     _1sec_, save_sysclk
2f278                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2f278                 | '                ret
2f278                 | {
2f278                 | }
2f278                 | 
2f278                 | '------------------------------------------------------------------------------
2f278                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2f278                 | ' one. If it is, start the task progression that will configure the device for
2f278                 | ' use.
2f278                 | '------------------------------------------------------------------------------
2f278                 | ' On entry:
2f278                 | '   hconfig_base - start address of the cached config descriptor chain.
2f278                 | ' On exit:
2f278                 | '------------------------------------------------------------------------------
2f278                 | hparse_con_desc
2f278     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2f27c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2f280     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2f284     4E 70 FF F9 |                 movbyts htmp,#%%1032
2f288     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2f28c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2f28c                 | 
2f28c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2f290     6E ED 03 F1 |                 add     pa, hconfig_base
2f294     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2f298                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2f298                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2f298                 | ' that defines a keyboard and/or mouse.
2f298     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2f29c                 | .next_intf
2f29c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f2a0     BC 01 90 3D |         if_ae   jmp     #hset_config
2f2a4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f2a8     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f2ac     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f2b0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f2b4     0C 00 90 AD |         if_z    jmp     #.intf
2f2b8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f2bc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f2c0     D8 FF 9F FD |                 jmp     #.next_intf
2f2c4                 | .intf
2f2c4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2f2c8     00 90 07 F6 |                 mov     hpar3, #0
2f2cc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2f2d0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2f2d4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2f2d8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2f2dc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2f2dc                 | 
2f2dc                 | .endp
2f2dc     80 71 C7 FA |                 rdbyte  htmp, ptrb
2f2e0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2f2e4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2f2e8     78 00 90 3D |         if_ae   jmp     #.get_device
2f2ec     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2f2f0     75 F3 03 F1 |                 add     ptrb, hnext_desc
2f2f4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2f2f8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2f2fc     64 00 90 AD |         if_z    jmp     #.get_device
2f300     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2f304     04 00 90 AD |         if_z    jmp     #.get_ep
2f308     D0 FF 9F FD |                 jmp     #.endp
2f30c                 | .get_ep
2f30c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2f310     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2f314     0F 86 67 F0 |                 shl     hr1, #8 + 7
2f318     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2f31c     3F 00 00 FF 
2f320     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2f324     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2f328     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2f32c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2f330     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f334     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2f338     A0 FF 9F FD |                 jmp     #.endp
2f33c                 | .in_ep
2f33c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2f340     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2f344                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f344     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f348     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2f34c     8C FF 9F FD |                 jmp     #.endp
2f350                 | .out_ep
2f350     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2f354     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2f358                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2f358     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2f35c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2f360     78 FF 9F FD |                 jmp     #.endp
2f364                 | 
2f364                 | .get_device
2f364     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2f368     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2f36c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2f370     68 00 90 AD |         if_z    jmp     #.gamepad
2f374     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2f378     AC 00 90 AD |         if_z    jmp     #.hub
2f37c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2f380     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2f384     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f388     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f38c     4C 00 90 AD |         if_z    jmp     #.gamepad
2f390     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2f394     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2f398                 | .keyboard
2f398     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2f39c                 |         if HAVE_MOUSE
2f39c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2f3a0                 |         else
2f3a0                 |         end
2f3a0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2f3a4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2f3a8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f3ac     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2f3b0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2f3b4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2f3b8                 |                 'debug(udec(kb_intf_num))
2f3b8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f3b8     E0 FE 9F FD |                 jmp     #.next_intf
2f3bc                 | if HAVE_MOUSE
2f3bc                 | .mouse
2f3bc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2f3c0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2f3c4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2f3c8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2f3cc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f3d0                 |                 'getbyte ms_interval, hr2, #3
2f3d0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2f3d4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2f3d8                 |                 'debug(udec(kb_intf_num))
2f3d8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2f3d8     C0 FE 9F FD |                 jmp     #.next_intf
2f3dc                 | end
2f3dc                 | .gamepad
2f3dc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f3e0     C7 71 63 F5 |                 xor     htmp, hpar2
2f3e4     3F 00 00 FF 
2f3e8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f3ec     AC FE 9F AD |         if_z    jmp     #.next_intf
2f3f0                 |         if HAVE_MOUSE
2f3f0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f3f4     C7 71 63 F5 |                 xor     htmp, hpar2
2f3f8     3F 00 00 FF 
2f3fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f400     98 FE 9F AD |         if_z    jmp     #.next_intf
2f404                 |         end
2f404     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2f408     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2f40c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2f410                 | 
2f410     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2f414     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2f418     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f41c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2f420     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2f424                 |                 'debug(udec(gp_intf_num))
2f424                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2f424     74 FE 9F FD |                 jmp     #.next_intf
2f428                 | .hub
2f428     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2f42c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2f430     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2f434     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2f438     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2f43c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f440     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2f444     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2f448     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f44c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2f450     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f454     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2f458     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2f45c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2f45c     3C FE 9F FD |                 jmp     #.next_intf
2f460                 | 
2f460                 | '------------------------------------------------------------------------------
2f460                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2f460                 | ' it according to its function, or functions. In the case of this boot protocol
2f460                 | ' keyboard/mouse class driver:
2f460                 | ' - SetConfiguration(config_num)
2f460                 | ' - SetProtocol(boot)
2f460                 | ' - SetIdle(indefinite)
2f460                 | ' - Enter the device interrupt IN polling task stage.
2f460                 | '------------------------------------------------------------------------------
2f460                 | ' On entry:
2f460                 | ' On exit:
2f460                 | '------------------------------------------------------------------------------
2f460                 | hset_config
2f460                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2f460                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2f460     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2f464     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f468     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f46c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2f470                 |         if HAVE_MOUSE
2f470     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2f474                 |         end
2f474     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2f478     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2f47c                 | .set_config
2f47c     6C 0E D0 FE |                 loc     ptra, #set_config
2f480     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2f484     6E ED 03 F1 |                 add     pa, hconfig_base
2f488     F6 8D C3 FA |                 rdbyte  hpar1, pa
2f48c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2f490     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2f494     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2f498     A0 02 A0 FD |                 call    #control_write
2f49c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f4a0     2D 00 64 5D |         if_nz   ret
2f4a4                 | .kbd_config
2f4a4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2f4a8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2f4ac                 | 
2f4ac     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2f4b0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f4b4     3F 00 00 FF 
2f4b8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f4bc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2f4c0                 | 
2f4c0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f4c4     34 0E D0 FE |                 loc     ptra, #set_protocol
2f4c8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f4cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f4d0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f4d4     A0 02 A0 FD |                 call    #control_write
2f4d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f4dc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f4e0     E4 02 90 5D |         if_nz   jmp     #.notify_client
2f4e4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f4e8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2f4ec     30 03 B0 FD |                 call    #hset_idle
2f4f0                 |                 'cmp     retval, #PID_ACK        wz
2f4f0                 |         'if_nz   mov     hkbd_ep_addr, #0
2f4f0                 |         'if_nz   jmp     #.notify_client
2f4f0     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f4f4     EF 02 A0 FD |                 call    #poll_waitx
2f4f8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f4fc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f500     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f504     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f508     2C 03 B0 FD |                 call    #hset_kbdled_report
2f50c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f510     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f514     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f518     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f51c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f520     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f524     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f528     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f52c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f530     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f534     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f538     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f53c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f540     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f544                 |         if !!HAVE_MOUSE
2f544                 |         end
2f544                 | 
2f544                 | .mouse_config
2f544                 | if HAVE_MOUSE
2f544     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f548     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f54c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f550     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f554     3F 00 00 FF 
2f558     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f55c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f560                 | 
2f560                 |                 debug("mouse passed addr check")
2f560                 | 
2f560     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f564     00 00 80 FF 
2f568     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f56c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f570     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f574     55 02 A0 FD |                 call    #control_read
2f578     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f57c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f580     44 02 90 5D |         if_nz   jmp     #.notify_client
2f584     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f588     56 01 00 F6 |                 mov     0-0, total_data
2f58c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f590                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f590                 | 
2f590     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f594     64 0D D0 FE |                 loc     ptra, #set_protocol
2f598     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f59c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f5a0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f5a4     A0 02 A0 FD |                 call    #control_write
2f5a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f5ac     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f5b0     14 02 90 5D |         if_nz   jmp     #.notify_client
2f5b4                 |                 debug("mouse passed SetProtocol")
2f5b4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f5b8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f5bc     60 02 B0 FD |                 call    #hset_idle
2f5c0                 |                 'cmp     retval, #PID_ACK        wz
2f5c0                 |         'if_nz   mov     hmouse_ep_addr, #0
2f5c0                 |         'if_nz   jmp     #.notify_client
2f5c0                 |                 debug("mouse passed SetIdle")
2f5c0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f5c4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f5c8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f5cc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f5d0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f5d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f5d8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f5dc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f5e0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f5e4     3F 00 00 FF 
2f5e8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f5ec     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f5f0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f5f4     D0 01 90 FD |                 jmp     #.notify_client
2f5f8                 | end
2f5f8                 | .gamepad_config
2f5f8                 | if _HAVE_GAMEPAD
2f5f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f5fc     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f600     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f604     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f608     00 70 03 F6 |                 mov     htmp, 0-0
2f60c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f610     3F 00 00 FF 
2f614     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f618     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f61c                 | 
2f61c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f620     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f624     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f628     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f62c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f630     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f634     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f638     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f63c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f640     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f644     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f648     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f64c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f650     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f654                 | 
2f654                 |                 if EMUPAD_MAX_PLAYER > 0
2f654                 |                 
2f654                 | .rule_loop           
2f654                 |                 end
2f654                 | 
2f654     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f658     5C 00 90 AD |         if_e    jmp     #.xinput
2f65c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f660     00 70 03 F6 |                 mov     htmp,0-0
2f664     01 A6 02 FF 
2f668     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f66c     7C 00 90 AD |         if_e    jmp     #.ps3
2f670                 | 
2f670     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f674     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f678     00 00 80 5F 
2f67c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f680     03 00 80 AF 
2f684     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f688     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f68c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f690     55 02 A0 FD |                 call    #control_read
2f694     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f698     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f69c     00 00 04 56 |         if_nz   mov     0-0, #0
2f6a0     24 01 90 5D |         if_nz   jmp     #.notify_client
2f6a4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f6a8     56 01 00 F6 |                 mov     0-0, total_data
2f6ac     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f6b0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f6b0                 | 
2f6b0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f6b4     10 01 90 FD |                 jmp     #.notify_client
2f6b8                 | .xinput
2f6b8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f6bc     2D EF 03 F6 |                 mov     pb,hdev_port
2f6c0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f6c4     03 EE 27 F3 |                 fle     pb,#3
2f6c8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f6cc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f6d0                 | 
2f6d0     03 B0 06 F6 |                 mov     pkt_data, #3
2f6d4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f6d8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f6dc     5A 00 A0 FD |                 call    #txn_out
2f6e0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f6e4                 | 
2f6e4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f6e8     DC 00 90 FD |                 jmp     #.notify_client
2f6ec                 | .ps3
2f6ec     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f6f0     2D EF 03 F6 |                 mov     pb,hdev_port
2f6f4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f6f8     04 EE 27 F3 |                 fle     pb,#4
2f6fc     F7 EF C3 F9 |                 decod   pb
2f700     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f704                 | 
2f704     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f708     00 0C D0 FE |                 loc     ptra, #set_report
2f70c     01 00 80 FF 
2f710     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f714     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f718     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f71c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f720     A0 02 A0 FD |                 call    #control_write
2f724                 | 
2f724     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f728     E0 0B D0 FE |                 loc     ptra, #set_report
2f72c     01 00 80 FF 
2f730     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f734     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f738     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f73c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f740     A0 02 A0 FD |                 call    #control_write
2f744     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f748     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f74c     00 00 04 56 |         if_nz   mov     0-0, #0
2f750     74 00 90 5D |         if_nz   jmp     #.notify_client
2f754                 | 
2f754     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f758     6C 00 90 FD |                 jmp     #.notify_client
2f75c                 | end
2f75c                 | 
2f75c                 | .hub_config
2f75c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f760     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f764     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f768     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f76c     3F 00 00 FF 
2f770     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f774     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f778                 | 
2f778     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f77c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f780     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f784     55 02 A0 FD |                 call    #control_read
2f788     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f78c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f790     34 00 90 5D |         if_nz   jmp     #.notify_client
2f794                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f794                 | 
2f794     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f798     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f79c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f7a0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f7a0                 | .pwr_loop
2f7a0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f7a4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f7a8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2f7ac     A0 02 A0 FD |                 call    #control_write
2f7b0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2f7b4                 | 
2f7b4     B1 99 02 F6 |                 mov     hctwait, _500ms_
2f7b8     B0 99 02 F1 |                 add     hctwait, _100ms_
2f7bc     EF 02 A0 FD |                 call    #poll_waitx
2f7c0                 | 
2f7c0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2f7c4     00 00 90 FD |                 jmp     #.notify_client
2f7c8                 | 
2f7c8                 | .notify_client
2f7c8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2f7cc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2f7d0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2f7d0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2f7d0     2D 00 64 FD |                 ret
2f7d4                 | 
2f7d4                 | '------------------------------------------------------------------------------
2f7d4                 | ' Initialize the keyboard/mouse data area to start-up values.
2f7d4                 | '------------------------------------------------------------------------------
2f7d4                 | ' On entry:
2f7d4                 | ' On exit:
2f7d4                 | '------------------------------------------------------------------------------
2f7d4                 | init_kbdm_data
2f7d4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2f7d8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2f7dc                 | 
2f7dc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2f7e0     2B ED 03 F6 |                 mov     pa, cache_end_p
2f7e4                 | .loop
2f7e4     61 01 4C FC |                 wrbyte  #0, ptra++
2f7e8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2f7ec     F4 FF 9F CD |         if_b    jmp     #.loop
2f7f0                 |         
2f7f0                 |         if EMUPAD_MAX_PLAYER > 0
2f7f0                 |         end
2f7f0                 | 
2f7f0                 | 
2f7f0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2f7f4                 | .regloop
2f7f4     00 EC 8F F9 |                 altd    pa
2f7f8     00 00 04 F6 |                 mov     0-0, #0
2f7fc     01 EC 07 F1 |                 add     pa, #1
2f800     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2f804     EC FF 9F 5D |         if_nz   jmp     #.regloop
2f808                 | 
2f808     E1 E1 61 FF 
2f80c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2f810     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2f814     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2f818     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2f81c                 | 
2f81c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2f820                 | 
2f820                 | '------------------------------------------------------------------------------
2f820                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2f820                 | ' function.
2f820                 | '------------------------------------------------------------------------------
2f820                 | ' On entry:
2f820                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2f820                 | '   hpar2 - index number of the target interface.
2f820                 | ' On exit:
2f820                 | '------------------------------------------------------------------------------
2f820                 | hset_idle
2f820     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f824     EF 02 A0 FD |                 call    #poll_waitx
2f828     D8 0A D0 FE |                 loc     ptra, #set_idle
2f82c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2f830     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2f834     A0 02 80 FD |                 jmp     #control_write
2f838                 | 
2f838                 | '------------------------------------------------------------------------------
2f838                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2f838                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2f838                 | '------------------------------------------------------------------------------
2f838                 | ' On entry:
2f838                 | '   ep_addr_pid - device address and enpoint for the request.
2f838                 | ' On exit:
2f838                 | '   retval - transaction result.
2f838                 | '------------------------------------------------------------------------------
2f838                 | hset_kbdled_report
2f838     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f83c     CC 0A D0 FE |                 loc     ptra, #set_report
2f840     01 00 80 FF 
2f844     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2f848     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f84c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2f850     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f854     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2f858     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2f85c                 | 
2f85c                 | '------------------------------------------------------------------------------
2f85c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2f85c                 | '------------------------------------------------------------------------------
2f85c                 | ' On entry:
2f85c                 | ' On exit:
2f85c                 | '------------------------------------------------------------------------------
2f85c                 | hget_kbd_in_report
2f85c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f860     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f864     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2f868     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2f86c     CF 02 A0 FD |                 call    #do_int_in
2f870     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f874     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f878                 | 
2f878     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f87c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f880                 | 
2f880     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2f884     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f888     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2f88c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2f890                 | 
2f890     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2f894     18 00 B0 FD |                 call    #hkbd_compare
2f898                 |         if EMUPAD_MAX_PLAYER > 0
2f898                 |         end
2f898                 | 
2f898                 | .led_check
2f898     3B 71 03 F6 |                 mov     htmp, kb_led_states
2f89c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2f8a0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2f8a4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2f8a8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2f8ac     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2f8b0                 | 
2f8b0                 | '------------------------------------------------------------------------------
2f8b0                 | ' Compare current and previous keyboard data buffers for keypress changes.
2f8b0                 | '------------------------------------------------------------------------------
2f8b0                 | hkbd_compare
2f8b0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f8b4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2f8b8     61 73 07 FB |                 rdlong  htmp1, ptra++
2f8bc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f8c0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2f8c4     61 73 07 FB |                 rdlong  htmp1, ptra++
2f8c8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f8cc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2f8d0     2D 00 64 AD |         if_z    ret
2f8d4                 | 
2f8d4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2f8d8                 | 
2f8d8                 |                 ' Handle modifiers
2f8d8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2f8dc     00 87 C7 FA |                 rdbyte  hr1, ptra
2f8e0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2f8e4     63 86 63 FD |                 mergew  hr1
2f8e8     08 EC 07 F6 |                 mov     pa,#8
2f8ec                 | .modloop
2f8ec     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2f8f0     E8 8C 07 F6 |                 mov     hpar1,#$E8
2f8f4     F6 8D 83 F1 |                 sub     hpar1,pa
2f8f8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2f8fc     FB ED 6F FB |                 djnz    pa,#.modloop
2f900                 | 
2f900     6F E0 75 FD | .release        modc    _set    wc
2f904                 |                 'alts    hdev_port, #hid_report_p
2f904                 |                 'mov     ptra, hid_report_p
2f904     02 F0 07 F1 |                 add     ptra, #2
2f908     06 EC 07 F6 |                 mov     pa, #6
2f90c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2f910     20 00 90 AD |         if_z    jmp     #.rl3
2f914     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f918     02 F2 07 F1 |                 add     ptrb, #2
2f91c     06 EE 07 F6 |                 mov     pb, #6
2f920     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2f924     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f928     08 00 90 AD |         if_z    jmp     #.rl3
2f92c     FC EF 6F FB |                 djnz    pb, #.rl2
2f930     68 00 B0 FD |                 call    #hkbd_translate
2f934     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2f938                 | 
2f938     00 90 07 F6 |                 mov     hpar3, #0
2f93c     1F 90 27 F4 |                 bith    hpar3, #31
2f940                 | 
2f940     6F 00 74 FD | .press          modc    _clr    wc
2f944     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f948     02 F0 07 F1 |                 add     ptra, #2
2f94c     06 EC 07 F6 |                 mov     pa, #6
2f950     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2f954     20 00 90 AD |         if_z    jmp     #.pl3
2f958     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2f95c     02 F2 07 F1 |                 add     ptrb, #2
2f960     06 EE 07 F6 |                 mov     pb, #6
2f964     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2f968     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f96c     08 00 90 AD |         if_z    jmp     #.pl3
2f970     FC EF 6F FB |                 djnz    pb, #.pl2
2f974     24 00 B0 FD |                 call    #hkbd_translate
2f978     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2f97c                 | 
2f97c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2f980     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2f984     28 02 64 FD |                 setq #1
2f988     61 73 07 FB |                 rdlong  htmp1, ptra++
2f98c     28 02 64 FD |                 setq #1
2f990     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2f994     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2f998                 | 
2f998     2D 00 64 FD |                 ret
2f99c                 | 
2f99c                 | '------------------------------------------------------------------------------
2f99c                 | ' Translate keyboard scancode to ASCII
2f99c                 | '------------------------------------------------------------------------------
2f99c                 | ' On entry:
2f99c                 | '   hpar1 - scancode
2f99c                 | '   hpar2 - key modifiers state
2f99c                 | '       c - pressed (0) or released (1) flag
2f99c                 | ' On exit:
2f99c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2f99c                 | '               30..17 = unused
2f99c                 | '                   18 = scroll-lock state 
2f99c                 | '                   17 = caps-lock state
2f99c                 | '                   16 = num-lock state 
2f99c                 | '                15..8 = key modifiers state
2f99c                 | '                 7..0 = scancode
2f99c                 | '------------------------------------------------------------------------------
2f99c                 | hkbd_translate
2f99c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2f9a0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2f9a4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2f9a8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2f9ac     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2f9b0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2f9b4                 | 
2f9b4                 |         if EMUPAD_MAX_PLAYER > 0
2f9b4                 | 
2f9b4                 |         if EMUPAD_BT0_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT1_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT2_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT3_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT4_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT5_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT6_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT7_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT8_BIT >= 0
2f9b4                 |         end
2f9b4                 |         if EMUPAD_BT9_BIT >= 0
2f9b4                 |         end
2f9b4                 | 
2f9b4                 |         end
2f9b4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2f9b8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2f9bc     1F 8C 47 F4 |                 bitc    hpar1, #31
2f9c0                 |         if KEYQUEUE_SIZE > 0
2f9c0     C4 09 B0 FE |                 loc pb,#keyq_head
2f9c4     F7 71 E3 FA |                 rdword htmp,pb
2f9c8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2f9cc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2f9d0     B8 75 03 F6 |                 mov htmp2,htmp
2f9d4     04 74 07 FA |                 mul htmp2,#4
2f9d8     F7 75 03 F1 |                 add htmp2,pb
2f9dc     02 74 07 F1 |                 add htmp2,#2
2f9e0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2f9e4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2f9e8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2f9ec     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2f9f0                 |         end
2f9f0     2D 00 7C FD |                 ret wcz
2f9f4                 | 
2f9f4                 | if HAVE_MOUSE
2f9f4                 | '------------------------------------------------------------------------------
2f9f4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2f9f4                 | '------------------------------------------------------------------------------
2f9f4                 | ' On entry:
2f9f4                 | ' On exit:
2f9f4                 | '------------------------------------------------------------------------------
2f9f4                 | hget_mouse_in_report
2f9f4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f9f8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f9fc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2fa00     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2fa04     CF 02 A0 FD |                 call    #do_int_in
2fa08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fa0c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2fa10                 | 
2fa10     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fa14     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fa18                 | 
2fa18     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2fa1c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fa20     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2fa24     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2fa28                 | 
2fa28     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2fa2c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2fa30     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2fa34     01 90 87 31 |         if_ae   sub     hpar3, #1
2fa38                 | 
2fa38     40 09 90 FE |                 loc     pa, #mouse_limits
2fa3c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2fa40                 | 
2fa40                 |                 ' load xacc,yacc,zacc
2fa40     28 04 64 FD |                 setq    #3-1
2fa44     80 87 07 FB |                 rdlong  hr1,ptrb
2fa48                 |                 ' load limits and outptr
2fa48     28 04 64 FD |                 setq    #3-1
2fa4c     F6 73 03 FB |                 rdlong  htmp1,pa
2fa50                 | 
2fa50     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2fa54     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2fa58     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2fa5c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2fa60     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2fa64     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2fa68     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2fa6c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2fa70                 |               
2fa70                 | 
2fa70     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2fa74     07 70 67 F7 |                 signx   htmp, #7
2fa78     B8 87 03 F1 |                 add     hr1,htmp
2fa7c     00 72 0F F2 |                 cmp     htmp1,#0 wz
2fa80     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2fa84     00 86 47 53 |         if_ne   fges    hr1,#0
2fa88                 | 
2fa88     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2fa8c     07 70 67 F7 |                 signx   htmp, #7
2fa90     B8 89 03 F1 |                 add     hr2,htmp
2fa94     00 74 0F F2 |                 cmp     htmp2,#0 wz
2fa98     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2fa9c     00 88 47 53 |         if_ne   fges    hr2,#0
2faa0                 |                 
2faa0                 | 
2faa0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2faa4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2faa8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2faac     B8 8B 03 A1 |         if_z    add     hr3,htmp
2fab0                 | 
2fab0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2fab4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2fab8                 | 
2fab8                 |                 ' write back accumulators
2fab8     28 04 64 FD |                 setq    #3-1
2fabc     80 87 67 FC |                 wrlong  hr1,ptrb
2fac0                 |                 ' if outptr set, write X/Y words
2fac0     00 76 0F F2 |                 cmp htmp3,#0                    wz
2fac4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2fac8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2facc     2D 00 64 FD |                 ret
2fad0                 | end
2fad0                 | 
2fad0                 | '------------------------------------------------------------------------------
2fad0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fad0                 | '------------------------------------------------------------------------------
2fad0                 | ' On entry:
2fad0                 | ' On exit:
2fad0                 | '------------------------------------------------------------------------------
2fad0                 | if _HAVE_GAMEPAD
2fad0                 | hget_gp_in_report
2fad0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2fad4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2fad8                 | 
2fad8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fadc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2fae0     00 90 E3 F8 |                 getbyte hpar3
2fae4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2fae8     CF 02 A0 FD |                 call    #do_int_in
2faec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2faf0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2faf4                 | 
2faf4     00 90 0F F2 |                 cmp     hpar3, #0               wz
2faf8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fafc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2fafc                 | 
2fafc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2fb00     00 70 E3 F8 |                 getbyte htmp                            ' |
2fb04     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2fb08     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2fb0c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2fb10     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2fb14     B8 01 C0 F8 |                 setbyte htmp                            ' |
2fb18                 | 
2fb18                 | ' Note: the following code compares the current and previous reports
2fb18                 | ' and process the data if there are changes to ease the debug output.
2fb18                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2fb18                 | ' gpPreReport buffer.
2fb18                 | 
2fb18                 |                 ' ----- start of block to remove
2fb18                 |                 {
2fb18                 |                 }
2fb18                 |                 ' ----- end of block to remove
2fb18     F4 04 90 FE |                 loc pa,#hpad_translate
2fb1c     2A EC 63 FD |                 push pa
2fb20                 | 
2fb20                 |                 ' FALL THROUGH !!!!
2fb20                 | 
2fb20                 | '------------------------------------------------------------------------------
2fb20                 | ' Decode controller report
2fb20                 | '------------------------------------------------------------------------------
2fb20                 | hid_decode
2fb20                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2fb20     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2fb24     00 04 00 FF 
2fb28     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2fb2c                 | 
2fb2c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2fb30                 | 
2fb30     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fb34     00 2A E3 F8 |                 getbyte hidr_type
2fb38     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2fb3c     34 02 90 AD |         if_z    jmp     #hpad_xinput
2fb40     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2fb44     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2fb48     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2fb4c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2fb50     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2fb54                 |                 
2fb54                 | 
2fb54                 | '------------------------------------------------------------------------------
2fb54                 | ' Handle HID controller (or mouse now
2fb54                 | ' On entry:
2fb54                 | '   ptrb - controller report
2fb54                 | '------------------------------------------------------------------------------
2fb54                 | hpad_hid
2fb54     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2fb58     F7 F1 03 F6 |                 mov     ptra, pb
2fb5c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2fb60     00 EC 03 F6 |                 mov     pa, 0-0
2fb64                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2fb64     19 2A 3B FF 
2fb68     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2fb6c                 | 
2fb6c                 | .next
2fb6c     00 EC 5F F2 |                 cmps    pa, #0      wcz
2fb70     2D 00 7C ED |         if_be   ret     wcz
2fb74                 | 
2fb74     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2fb78     01 EC 87 F1 |                 sub     pa, #1
2fb7c     00 8E 07 F6 |                 mov     hpar2, #0
2fb80                 | 
2fb80     C6 71 03 F6 |                 mov     htmp, hpar1
2fb84     03 70 07 F5 |                 and     htmp, #$03
2fb88     01 70 0F F2 |                 cmp     htmp, #1    wz
2fb8c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2fb90     07 8E 67 A7 |         if_z    signx   hpar2,#7
2fb94     01 EC 87 A1 |         if_z    sub     pa, #1
2fb98     02 70 0F F2 |                 cmp     htmp, #2    wz
2fb9c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2fba0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2fba4     02 EC 87 A1 |         if_z    sub     pa, #2
2fba8     03 70 0F F2 |                 cmp     htmp, #3    wz
2fbac     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2fbb0     04 EC 87 A1 |         if_z    sub     pa, #4
2fbb4                 | 
2fbb4     FC 8C 07 F5 |                 and     hpar1, #$FC
2fbb8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2fbb8                 | 
2fbb8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2fbbc     0C 01 90 AD |         if_z    jmp     #.report_id
2fbc0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2fbc4     24 01 90 AD |         if_z    jmp     #.usage_page
2fbc8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2fbcc     2C 01 90 AD |         if_z    jmp     #.usage
2fbd0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2fbd4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2fbd8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2fbdc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2fbe0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2fbe4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2fbe8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2fbec     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2fbf0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2fbf4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2fbf8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2fbfc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2fc00     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2fc04     64 FF 9F 5D |         if_nz   jmp     #.next
2fc08                 | 
2fc08     D8 1D A7 FB |                 tjf     hidr_state,#.next
2fc0c                 | 
2fc0c     03 8E 07 F5 |                 and     hpar2, #$03
2fc10     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2fc14     18 00 90 5D |         if_nz   jmp     #.skip
2fc18                 | 
2fc18     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2fc1c     20 00 90 AD |         if_z    jmp     #.axes
2fc20     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2fc24     5C 00 90 AD |         if_z    jmp     #.hats
2fc28     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2fc2c     70 00 90 AD |         if_z    jmp     #.buttons
2fc30                 | .skip
2fc30     8F 71 03 F6 |                 mov     htmp, hidr_size
2fc34     90 71 03 FA |                 mul     htmp, hidr_count
2fc38     B8 23 03 F1 |                 add     hidr_offset, htmp
2fc3c     2C FF 9F FD |                 jmp     #.next
2fc40                 | .axes
2fc40                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2fc40     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2fc44     90 87 03 F6 |                 mov     hr1, hidr_count
2fc48                 | .l1
2fc48     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fc4c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fc50     04 03 B0 FD |                 call    #hpad_getbits
2fc54     64 03 B0 FD |                 call    #hpad_normalize
2fc58     06 84 1F F2 |                 cmp     hr0, #6         wcz
2fc5c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2fc60     00 88 43 C8 |         if_b    getnib  hr2
2fc64     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2fc68     5F 01 20 C9 |         if_b    setword retval
2fc6c     01 84 07 C1 |         if_b    add     hr0, #1
2fc70     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2fc74     F4 87 6F FB |                 djnz    hr1, #.l1
2fc78                 | 
2fc78     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2fc7c     01 1C 07 F6 |                 mov     hidr_state, #1
2fc80     E8 FE 9F FD |                 jmp     #.next
2fc84                 | .hats
2fc84                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2fc84     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fc88     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fc8c     C8 02 B0 FD |                 call    #hpad_getbits
2fc90     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2fc94     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fc98     01 1C 07 F6 |                 mov     hidr_state, #1
2fc9c     90 FF 9F FD |                 jmp     #.skip
2fca0                 | .buttons
2fca0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2fca0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2fca4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2fca8     90 8F 03 FA |                 mul     hpar2, hidr_count
2fcac     A8 02 B0 FD |                 call    #hpad_getbits
2fcb0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2fcb4     B8 BF 62 F0 |                 shl     retval, htmp
2fcb8     5F 17 43 F5 |                 or      hidr_buttons, retval
2fcbc     90 71 03 F1 |                 add     htmp, hidr_count
2fcc0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2fcc4     01 1C 07 F6 |                 mov     hidr_state, #1
2fcc8     64 FF 9F FD |                 jmp     #.skip
2fccc                 | .report_id
2fccc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2fcd0     2D 00 7C 5D |         if_nz   ret     wcz
2fcd4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fcd8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2fcdc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2fce0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2fce4     01 F2 87 51 |         if_nz   sub     ptrb,#1
2fce8     80 FE 9F FD |                 jmp     #.next
2fcec                 | .usage_page
2fcec     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2fcf0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2fcf4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2fcf8     70 FE 9F FD |                 jmp     #.next
2fcfc                 | .usage
2fcfc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2fd00     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2fd04     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2fd08     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fd0c     5C FE 9F AD |         if_z    jmp     #.next
2fd10     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2fd14     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2fd18     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2fd1c     4C FE 9F AD |         if_z    jmp     #.next
2fd20     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2fd24     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2fd28     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2fd2c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2fd30     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2fd34     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2fd38     10 00 90 AD |         if_z    jmp     #.usage_axis
2fd3c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2fd40     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2fd44     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2fd48     20 FE 9F FD |                 jmp     #.next
2fd4c                 | .usage_axis
2fd4c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2fd50     18 FE 9F CD |         if_b    jmp     #.next
2fd54     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2fd58     C7 01 00 F8 |                 setnib  hpar2
2fd5c                 | 
2fd5c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2fd60     C7 8F C3 F9 |                 decod   hpar2
2fd64     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2fd68                 | 
2fd68     01 24 07 F1 |                 add     hidr_usage_idx, #1
2fd6c     02 1C 07 F6 |                 mov     hidr_state, #2
2fd70     F8 FD 9F FD |                 jmp     #.next
2fd74                 | 
2fd74                 | '------------------------------------------------------------------------------
2fd74                 | ' Handle XInput controller
2fd74                 | ' On entry:
2fd74                 | '   ptrb - controller report
2fd74                 | '------------------------------------------------------------------------------
2fd74                 | '   Default implementation translates the report to a pseudo-defacto hid
2fd74                 | '   standard and jumps to hpad_translate for actions.
2fd74                 | '   Implementors may take specific actions for this kind of controller.
2fd74                 | '------------------------------------------------------------------------------
2fd74                 | hpad_xinput
2fd74     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2fd78     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2fd7c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2fd80     14 70 0F F2 |                 cmp     htmp, #$14      wz
2fd84     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2fd88                 | 
2fd88                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2fd88                 | 
2fd88     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2fd8c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2fd90                 | 
2fd90     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2fd94     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2fd98     5F BF 22 F6 |                 not     retval
2fd9c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fda0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2fda4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2fda8     5F BF 22 F6 |                 not     retval
2fdac     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2fdb0                 | 
2fdb0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2fdb4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2fdb8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2fdbc     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2fdc0     F8 01 B0 FD |                 call    #hpad_normalize
2fdc4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2fdc8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2fdcc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2fdd0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2fdd4     E4 01 B0 FD |                 call    #hpad_normalize
2fdd8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2fddc                 | 
2fddc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2fde0     81 BF E6 FA |                 rdword  retval, ptrb[1]
2fde4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2fde8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2fdec     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2fdf0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2fdf4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2fdf8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fdfc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fe00     03 16 47 F4 |                 bitc    hidr_buttons, #3
2fe04     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2fe08     04 16 47 F4 |                 bitc    hidr_buttons, #4
2fe0c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2fe10     05 16 47 F4 |                 bitc    hidr_buttons, #5
2fe14     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2fe18     08 16 47 F4 |                 bitc    hidr_buttons, #8
2fe1c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2fe20     09 16 47 F4 |                 bitc    hidr_buttons, #9
2fe24     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2fe28     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2fe2c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2fe30     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2fe34     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2fe38     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2fe3c                 | 
2fe3c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fe40     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2fe44     7A BB 7A FF 
2fe48     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2fe4c     F9 FF 7F FF 
2fe50     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2fe54     B9 71 5F F9 |                 altgn   htmp, #htmp1
2fe58     00 70 43 F8 |                 getnib  htmp
2fe5c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2fe60                 | 
2fe60     AC 01 90 FD |                 jmp     #hpad_translate
2fe64                 | 
2fe64                 | '------------------------------------------------------------------------------
2fe64                 | ' Handle PS3 controller
2fe64                 | ' On entry:
2fe64                 | '   ptrb - controller report
2fe64                 | '------------------------------------------------------------------------------
2fe64                 | '   Default implementation translates the report to a pseudo-defacto hid
2fe64                 | '   standard and jumps to hpad_translate for actions.
2fe64                 | '   Implementors may take specific actions for this kind of controller.
2fe64                 | '------------------------------------------------------------------------------
2fe64                 | hpad_ps3
2fe64     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2fe68     01 70 0F F2 |                 cmp     htmp, #$01      wz
2fe6c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2fe70                 | 
2fe70                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2fe70                 | 
2fe70     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2fe74     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2fe78     40 01 B0 FD |                 call    #hpad_normalize
2fe7c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2fe80     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2fe84     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2fe88     30 01 B0 FD |                 call    #hpad_normalize
2fe8c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2fe90     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2fe94     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2fe98     20 01 B0 FD |                 call    #hpad_normalize
2fe9c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2fea0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2fea4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2fea8     10 01 B0 FD |                 call    #hpad_normalize
2feac     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2feb0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2feb4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2feb8                 | 
2feb8     08 8C 07 F6 |                 mov     hpar1, #8
2febc     13 8E 07 F6 |                 mov     hpar2, #19
2fec0     94 00 B0 FD |                 call    #hpad_getbits
2fec4                 | 
2fec4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2fec8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2fecc     00 16 47 F4 |                 bitc    hidr_buttons, #0
2fed0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2fed4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2fed8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2fedc     02 16 47 F4 |                 bitc    hidr_buttons, #2
2fee0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2fee4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2fee8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2feec     04 16 47 F4 |                 bitc    hidr_buttons, #4
2fef0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2fef4     05 16 47 F4 |                 bitc    hidr_buttons, #5
2fef8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2fefc     06 16 47 F4 |                 bitc    hidr_buttons, #6
2ff00     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2ff04     07 16 47 F4 |                 bitc    hidr_buttons, #7
2ff08     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2ff0c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2ff10     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2ff14     09 16 47 F4 |                 bitc    hidr_buttons, #9
2ff18     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2ff1c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2ff20     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2ff24     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2ff28     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2ff2c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2ff30                 | 
2ff30     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ff34     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2ff38     09 FA 79 FF 
2ff3c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2ff40     FF FA 7F FF 
2ff44     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2ff48     B9 71 5F F9 |                 altgn   htmp, #htmp1
2ff4c     00 70 43 F8 |                 getnib  htmp
2ff50     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2ff54                 | 
2ff54     B8 00 90 FD |                 jmp     #hpad_translate
2ff58                 | 
2ff58                 | '------------------------------------------------------------------------------
2ff58                 | ' Read bits from report data buffer
2ff58                 | '------------------------------------------------------------------------------
2ff58                 | ' On entry:
2ff58                 | '   PTRB - report buffer
2ff58                 | '   hpar1 - start bit
2ff58                 | '   hpar2 - number of bits
2ff58                 | ' On exit:
2ff58                 | '   retval - bits
2ff58                 | '------------------------------------------------------------------------------
2ff58                 | hpad_getbits
2ff58     C6 71 03 F6 |                 mov     htmp, hpar1
2ff5c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2ff60     F9 71 03 F1 |                 add     htmp, ptrb
2ff64     B8 BF 02 FB |                 rdlong  retval, htmp
2ff68                 | 
2ff68     C6 73 03 F6 |                 mov     htmp1, hpar1
2ff6c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2ff70     B9 BF 42 F0 |                 shr     retval, htmp1
2ff74                 | 
2ff74     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2ff78     10 00 90 1D |         if_a    jmp     #.l1
2ff7c                 | 
2ff7c     C7 8F C3 F9 |                 decod   hpar2
2ff80     01 8E 87 F1 |                 sub     hpar2, #1
2ff84     C7 BF 02 F5 |                 and     retval, hpar2
2ff88     2D 00 64 FD |                 ret
2ff8c                 | .l1
2ff8c     FF 7F 00 FF 
2ff90     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2ff94     03 70 07 F1 |                 add     htmp, #3
2ff98     B8 75 03 FB |                 rdlong  htmp2, htmp
2ff9c     18 8E 87 F1 |                 sub     hpar2, #24
2ffa0     C7 8F C3 F9 |                 decod   hpar2
2ffa4     01 8E 87 F1 |                 sub     hpar2, #1
2ffa8     B9 75 43 F0 |                 shr     htmp2, htmp1
2ffac     C7 75 03 F5 |                 and     htmp2, hpar2
2ffb0     18 74 67 F0 |                 shl     htmp2, #24
2ffb4     BA BF 42 F5 |                 or      retval, htmp2
2ffb8     2D 00 64 FD |                 ret
2ffbc                 | 
2ffbc                 | '------------------------------------------------------------------------------
2ffbc                 | ' Normalize value to signed word (-32768 / 32767)
2ffbc                 | '------------------------------------------------------------------------------
2ffbc                 | ' On entry:
2ffbc                 | '   retval - value to normalize
2ffbc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2ffbc                 | '   - or -
2ffbc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2ffbc                 | '   hidr_size - value bits length
2ffbc                 | ' On exit:
2ffbc                 | '   retval - normalized value
2ffbc                 | '------------------------------------------------------------------------------
2ffbc                 | hpad_normalize
2ffbc     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2ffc0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2ffc4     2D 00 64 AD |         if_z    ret
2ffc8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2ffcc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2ffd0     0F 72 77 F7 |                 signx   htmp1, #15      wc
2ffd4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2ffd8     00 BE 66 C7 |         if_c    signx   retval, #0-0
2ffdc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2ffe0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2ffe4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2ffe8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2ffec     B8 71 53 F6 |                 abs     htmp            wc
2fff0     1F BE 0E F4 |                 testb   retval, #31     wz
2fff4     5F BF 42 F6 |                 abs     retval
2fff8     B8 BF 12 FD |                 qdiv    retval, htmp
2fffc     18 BE 62 FD |                 getqx   retval
30000     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
30004     C0 FF 7F FF 
30008     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3000c     2D 00 64 FD |                 ret
30010                 | 
30010                 | '------------------------------------------------------------------------------
30010                 | ' Perform controller actions
30010                 | ' On entry:
30010                 | '    hidr_id        report id
30010                 | '    hidr_axis      axis value (signed word, 2 axes per long)
30010                 | '                      X = hidr_axis+0, #0
30010                 | '                      Y = hidr_axis+0, #1
30010                 | '                      Z = hidr_axis+1, #0
30010                 | '                     RX = hidr_axis+1, #1
30010                 | '                     RY = hidr_axis+2, #0
30010                 | '                     RZ = hidr_axis+2, #1
30010                 | '    hidr_buttons   buttons state (bits 0 to 31)
30010                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
30010                 | '
30010                 | '                     -------3 -------2 -------1 -------0 byte
30010                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
30010                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
30010                 | '                                zyx||| |||||||| ++++++++ n. buttons
30010                 | '                                |||||| ||||++++--------- n. axes
30010                 | '                                |||||| ++++------------- n. hats
30010                 | '                                ++++++------------------ valid axes
30010                 | '------------------------------------------------------------------------------
30010                 | hpad_translate
30010                 | 
30010                 | 
30010                 |         if HAVE_HIDPAD
30010     84 0C F0 FE |                 loc     ptrb,#hidpad_report
30014     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
30018     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3001c     01 70 E7 F2 |                 cmpsub  htmp,#1
30020     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
30024     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
30028     2D 00 7C 3D |         if_ae   ret     wcz
3002c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
30030     B8 F3 03 F1 |                 add     ptrb,htmp
30034     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
30038     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3003c     28 0C 64 FD |                 setq    #7-1
30040     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
30044                 |         end
30044                 | 
30044                 | 
30044                 |         if EMUPAD_MAX_PLAYER > 0
30044                 | .emupad_no_hat
30044                 |         if EMUPAD_BT0_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT1_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT2_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT3_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT4_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT5_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT6_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT7_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT8_BIT >= 0
30044                 |         end
30044                 |         if EMUPAD_BT9_BIT >= 0
30044                 |         end
30044                 | .emupad_slot_over
30044                 |         end
30044                 | 
30044                 |         if 0
30044                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
30044                 | 
30044                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
30044                 | 
30044                 |         end
30044     2D 00 64 FD |                 ret
30048                 | end
30048                 | 
30048                 | if EMUPAD_MAX_PLAYER > 0
30048                 | '------------------------------------------------------------------------------
30048                 | ' Clear EmuPad state
30048                 | '------------------------------------------------------------------------------
30048                 | emupad_reset
30048                 | 
30048                 | '------------------------------------------------------------------------------
30048                 | ' Get EmuPad Player number for current device (into retval)
30048                 | ' Z flag is also set if current device is valid
30048                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
30048                 | '------------------------------------------------------------------------------
30048                 | emupad_getnum
30048                 | .loop
30048                 | '------------------------------------------------------------------------------
30048                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
30048                 | '------------------------------------------------------------------------------
30048                 | emupad_discon
30048                 | .loop         
30048                 |         
30048                 |         ' FALL THROUGH!!!
30048                 | 
30048                 | '------------------------------------------------------------------------------
30048                 | ' Update EmuPad reports (all of them...)
30048                 | '------------------------------------------------------------------------------
30048                 | emupad_write_reports
30048                 | .devloop
30048                 | 
30048                 | end
30048                 | 
30048                 | 
30048                 | '------------------------------------------------------------------------------
30048                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
30048                 | '------------------------------------------------------------------------------
30048                 | ' On entry:
30048                 | ' On exit:
30048                 | '------------------------------------------------------------------------------
30048                 | hget_hub_status
30048     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3004c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
30050     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
30054     01 90 2F F9 |                 setword hpar3, #1, #1
30058     CF 02 A0 FD |                 call    #do_int_in
3005c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30060     0C 00 90 AD |         if_z    jmp     #.data
30064     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
30068     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3006c     2D 00 64 FD |                 ret
30070                 | .data
30070     00 90 0F F2 |                 cmp     hpar3, #0               wz
30074     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
30078                 | 
30078     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3007c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
30080     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
30084     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
30088                 |                 debug(ubin_long(hub_status_chg))
30088                 | 
30088     01 5A 06 F6 |                 mov     hdev_port, #1
3008c                 | .loop
3008c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
30090     0C 00 B0 AD |         if_x1   call    #hub_port_handler
30094     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
30098     F0 FF 9F 3D |         if_nc   jmp     #.loop
3009c     2D 00 64 FD |                 ret
300a0                 | 
300a0                 | hub_port_handler
300a0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
300a4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
300a8     27 EF 03 F6 |                 mov     pb, urx_buff_p
300ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300b0     55 02 A0 FD |                 call    #control_read
300b4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
300b8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
300b8                 | 
300b8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
300bc     50 01 90 5D |         if_x0   jmp     #.other
300c0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
300c4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
300c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300cc     A0 02 A0 FD |                 call    #control_write
300d0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
300d4     7C 01 90 5D |         if_x0   jmp     #.disconnect
300d8     B0 99 02 F6 |                 mov     hctwait, _100ms_
300dc     EF 02 A0 FD |                 call    #poll_waitx
300e0                 | 
300e0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
300e4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
300e8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
300ec     A0 02 A0 FD |                 call    #control_write
300f0                 | 
300f0     02 76 07 F6 |                 mov     htmp3, #2
300f4                 | .wait_reset
300f4     AC 99 02 F6 |                 mov     hctwait, _8ms_
300f8     EF 02 A0 FD |                 call    #poll_waitx
300fc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
30100     27 EF 03 F6 |                 mov     pb, urx_buff_p
30104     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30108     55 02 A0 FD |                 call    #control_read
3010c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
30110     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
30114     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
30118                 | 
30118     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3011c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
30120     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
30124     A0 02 A0 FD |                 call    #control_write
30128                 | 
30128     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3012c                 | .wait_recover
3012c     A7 99 02 F6 |                 mov     hctwait, _1ms_
30130     EF 02 A0 FD |                 call    #poll_waitx
30134     FD 71 6F FB |                 djnz    htmp,#.wait_recover
30138                 | 
30138     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3013c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
30140     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
30144                 | 
30144     00 08 00 FF 
30148     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3014c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
30150     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
30154     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
30158     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3015c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30160     48 01 90 5D |         if_nz   jmp     #.done
30164                 | .get_dev_desc
30164     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
30168     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3016c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
30170     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
30174     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
30178     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3017c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
30180     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
30184     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
30188     AC 99 02 F6 |                 mov     hctwait, _8ms_
3018c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
30190     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
30194     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
30198     BE 00 A0 FD |                 call    #calc_crc5
3019c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
301a0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
301a4     F7 AD C2 FA |                 rdbyte  total_data, pb
301a8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
301ac     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
301b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
301b4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
301b8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
301bc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
301c0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
301c0     9F 99 02 F6 |                 mov     hctwait, _500us_
301c4     EF 02 A0 FD |                 call    #poll_waitx
301c8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
301cc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
301d0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
301d4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
301d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
301dc     CC 00 90 5D |         if_nz   jmp     #.done
301e0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
301e4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
301e8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
301ec     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
301f0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
301f4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
301f8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
301fc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
30200     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
30204     A4 00 90 CD |         if_b    jmp     #.done
30208     6C F0 BF FD |                 call    #hparse_con_desc
3020c     9C 00 90 FD |                 jmp     #.done
30210                 | 
30210                 | .other
30210     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
30214     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
30218     28 00 90 AD |         if_x1   jmp     #.reset_feature
3021c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
30220     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
30224     1C 00 90 AD |         if_x1   jmp     #.reset_feature
30228     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3022c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
30230     10 00 90 AD |         if_x1   jmp     #.reset_feature
30234     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
30238     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3023c     04 00 90 AD |         if_x1   jmp     #.reset_feature
30240     68 00 90 FD |                 jmp     #.done
30244                 | .reset_feature
30244     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
30248     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3024c     A0 02 A0 FD |                 call    #control_write
30250     58 00 90 FD |                 jmp     #.done
30254                 | .disconnect
30254                 | 
30254     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
30258     00 70 E3 F8 |                 getbyte htmp
3025c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
30260     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
30264     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
30268     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3026c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
30270     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
30274                 |         if EMUPAD_MAX_PLAYER > 0
30274                 |         end
30274                 |         if HAVE_MOUSE
30274     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
30278     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3027c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
30280                 |         end
30280                 |         if HAVE_HIDPAD
30280     14 0A F0 FE |                 loc ptrb,#hidpad_report
30284     2D 71 03 F6 |                 mov htmp,hdev_port
30288     01 70 E7 F2 |                 cmpsub htmp,#1
3028c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
30290     B8 F3 03 F1 |                 add ptrb,htmp
30294     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
30298     80 01 6C FC |                 wrlong #0,ptrb
3029c                 |         end
3029c                 | 
3029c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
302a0     00 00 C4 F8 |                 setbyte #0
302a4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
302a8     00 00 04 F6 |                 mov     0-0, #0
302ac                 | 
302ac                 | .done
302ac     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
302b0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
302b4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
302b8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
302bc     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
302c0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
302c4                 | 
302c4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
302c8     27 EF 03 F6 |                 mov     pb, urx_buff_p
302cc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
302d0     55 02 A0 FD |                 call    #control_read
302d4     00 69 06 FB |                 rdlong  hub_port_status, ptra
302d8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
302d8     2D 00 64 FD |                 ret
302dc                 | 
302dc                 | '------------------------------------------------------------------------------
302dc                 | ' Partially populated SETUP packets
302dc                 | '------------------------------------------------------------------------------
302dc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
302dd     06          |                 byte    REQ_GET_DESC
302de     00 01       |                 word    TYPE_DEVICE << 8
302e0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
302e2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
302e4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
302e5     06          |                 byte    REQ_GET_DESC
302e6     00 02       |                 word    TYPE_CONFIG << 8
302e8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
302ea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
302ec     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
302ed     09          |                 byte    REQ_SET_CONFIG
302ee     00 00       |                 word    0       ' Configuration value
302f0     00 00       |                 word    0       ' Zero
302f2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
302f4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
302f5     05          |                 byte    REQ_SET_ADDR
302f6     00 00       |                 word    0       ' Zero
302f8     00 00       |                 word    0       ' Zero
302fa     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
302fc                 | '------------------------------------------------------------------------------
302fc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
302fc                 | ' wValue field dictates which protocol should be used.
302fc                 | '
302fc                 | ' When initialized, all devices default to report protocol. However the host
302fc                 | ' should not make any assumptions about the device state and should set the
302fc                 | ' desired protocol whenever initializing a device.
302fc                 | '------------------------------------------------------------------------------
302fc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
302fd     0B          |                 byte    HID_SET_PROTO
302fe     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
30300                 |                                                 ' (HID 1.11 Section 7.2.6).
30300     00 00       |                 word    0               ' Interface index number.
30302     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
30304                 | '------------------------------------------------------------------------------
30304     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
30305     0A          |                 byte    HID_SET_IDLE
30306     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
30308                 |                                         ' reporting until a change is detected in the report data
30308                 | 
30308                 |                                         ' (HID 1.11 Section 7.2.4).
30308     00 00       |                 word    0       ' Interface index number.
3030a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3030c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3030d     09          |                 byte    HID_SET_REPORT
3030e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
30310                 |                                         ' (HID 1.11 Section 7.2.2).
30310     00 00       |                 word    0       ' Interface index number.
30312     00 00       |                 word    0       ' Size of the report, in bytes.
30314     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
30315     06          |                 byte    REQ_GET_DESC
30316     00 22       |                 word    TYPE_REPORT << 8
30318     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3031a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3031c                 | '------------------------------------------------------------------------------
3031c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3031d     06          |                 byte    REQ_GET_DESC
3031e     00 29       |                 word    TYPE_HUB << 8
30320     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
30322     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30324     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
30325     03          |                 byte    REQ_SET_FEATURE
30326     00 00       |                 word    0       ' port power
30328     01 00       |                 word    1       ' Port index number (1+)
3032a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3032c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3032d     01          |                 byte    REQ_CLEAR_FEATURE
3032e     00 00       |                 word    0       ' port power
30330     01 00       |                 word    1       ' Port index number (1+)
30332     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
30334     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
30335     00          |                 byte    REQ_GET_STATUS
30336     00 00       |                 word    0
30338     01 00       |                 word    1       ' Port index number (1+)
3033a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3033c                 | '------------------------------------------------------------------------------
3033c                 | if _HAVE_GAMEPAD
3033c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
30340                 | ps3_command_buff
30340     00 00 00 00 
30344     00          |                 byte    $00, $00, $00, $00, $00
30345     00 00 00 00 
30349     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3034a     FF 27 10 00 
3034e     32          |                 byte    $FF, $27, $10, $00, $32
3034f     FF 27 10 00 
30353     32          |                 byte    $FF, $27, $10, $00, $32
30354     FF 27 10 00 
30358     32          |                 byte    $FF, $27, $10, $00, $32
30359     FF 27 10 00 
3035d     32          |                 byte    $FF, $27, $10, $00, $32
3035e     00 00 00 00 
30362     00          |                 byte    $00, $00, $00, $00, $00
30363     00 00 00 00 
30367     00          |                 byte    $00, $00, $00, $00, $00
30368     00 00 00 00 
3036c     00          |                 byte    $00, $00, $00, $00, $00
3036d     00 00 00    |                 byte    $00, $00, $00
30370                 | '------------------------------------------------------------------------------
30370     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
30373                 |                                         ' 0x01 All blinking
30373                 |                                         ' 0x02 1 flashes, then on
30373                 |                                         ' 0x03 2 flashes, then on
30373                 |                                         ' 0x04 3 flashes, then on
30373                 |                                         ' 0x05 4 flashes, then on
30373                 |                                         ' 0x06 1 on
30373                 |                                         ' 0x07 2 on
30373                 |                                         ' 0x08 3 on
30373                 |                                         ' 0x09 4 on
30373                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
30373                 |                                         ' 0x0B Blinking*
30373                 |                                         ' 0x0C Slow blinking*
30373                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
30373     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
30376     00          |                 byte    $00             ' Left rumble
30377     00          |                 byte    $00             ' Right rumble
30378     00 00 00    |                 byte    $00, $00, $00
3037b     00          | end
3037c                 | alignl
3037c                 | 
3037c                 | if HAVE_MOUSE
3037c     00 00 00 00 
30380     00 00 00 00 | mouse_limits long 0[2]
30384     00 00 00 00 | mouse_outptr long 0
30388                 | end
30388                 | 
30388                 | if KEYQUEUE_SIZE > 0
30388     00          | keyq_head byte 0
30389     00          | keyq_tail byte 0
3038a     00 00 00 00 
      ...             
30586     00 00 00 00 
3058a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3058c                 | alignl
3058c                 | end
3058c                 | 
3058c                 | if EMUPAD_MAX_PLAYER > 0
3058c                 | emupad_rule_buffer
3058c                 | if EMUPAD_BUILTIN_RULES
3058c                 | file "padmap_builtin.dat"
3058c                 | end
3058c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3058c                 | '' Default rule directly follows!
3058c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3058c                 | end
3058c                 | 
3058c                 | '------------------------------------------------------------------------------
3058c                 | ' The USB data cache area gets zero-filled at every device disconnect
3058c                 | '------------------------------------------------------------------------------
3058c                 | usb_cache_start
3058c                 | 
3058c                 | ' HID descriptor and report buffers
3058c                 | if !!OVERLAP_MEMORY
3058c     00 00 00 00 
      ...             
30c84     00 00 00 00 
30c88     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30c8c                 | end
30c8c     00 00 00 00 
30c90     00 00 00 00 | hkbd_report     byte    0[8]
30c94     00 00 00 00 | hkbd_led_rep    byte    0
30c98                 | alignl
30c98                 | 
30c98                 | if HAVE_HIDPAD
30c98     00 00 00 00 
      ...             
30d54     00 00 00 00 
30d58     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30d5c                 | end
30d5c                 | 
30d5c                 | ' HUB descriptor
30d5c     00          | hub_descr       byte    0   ' bDescLength
30d5d     00          |                 byte    0   ' bDescriptorType
30d5e     00          |                 byte    0   ' bNbrPorts
30d5f     00 00       |                 word    0   ' wHubCharacteristics
30d61     00          |                 byte    0   ' bPwrOn2PwrGood
30d62     00          |                 byte    0   ' bHubContrCurrent
30d63     00          |                 byte    0   ' DeviceRemoveable
30d64     00          |                 byte    0   ' PortPwrCtrlMask
30d65                 | 
30d65                 | usb_cache_end
30d65                 | 
30d65                 | if HAVE_MOUSE
30d65     00 00 00 00 | mouse_xacc      long 0
30d69     00 00 00 00 | mouse_yacc      long 0
30d6d     00 00 00 00 | mouse_zacc      long 0
30d71     00          | mouse_bstate    byte 0
30d72     00          | mouse_lpending  byte 0
30d73     00          | mouse_rpending  byte 0
30d74     00          | mouse_mpending  byte 0
30d75     00          | mouse_lock      byte 0
30d76     00 00 00    |                 byte 0[3] ' padding
30d79                 | end
30d79                 | 
30d79     00 00 00 00 
      ...             
30df1     00 00 00 00 
30df5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
30df9     00 00 00 00 
30dfd     00 00 00 00 
30e01     00 00 00 00 
30e05     00 00 00 00 
30e09     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
30e0b     00 00 00 00 
      ...             
30f03     00 00 00 00 
30f07     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
30f0b                 | 
30f0b     00          | driver_cog      byte    0                       ' Current driver cog + 1
30f0c                 | 	alignl
30f0c                 | _Audio093b_8_sc_spin2_dat_
30f0c                 | 
30f0c                 | audio       org     0
30f0c                 | 
30f0c     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
30f10     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
30f14     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
30f18                 | 
30f18     01 EC 63 FD |             cogid   pa                   ' compute cogid
30f1c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
30f20     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
30f24     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
30f28                 | 
30f28     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
30f2c     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
30f30     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
30f34     0F CA 05 FC |             wrpin   dac,#right
30f38     0F BE 1C FC |             wxpin   #95,#right    
30f3c     41 9C 64 FD |             dirh    #left addpins 1
30f40     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
30f44     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
30f48     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
30f4c                 |             
30f4c                 | '---------------------------------------------------------------------------------        
30f4c                 | '----------------- The main loop -------------------------------------------------
30f4c                 | '---------------------------------------------------------------------------------
30f4c                 | 
30f4c     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
30f50     10 00 90 CD |       if_c  jmp     #loop1
30f54                 |   
30f54     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
30f58     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
30f5c     B1 00 80 F1 |             sub     0-0,a40000000
30f60     FD A9 6D FB |             djnz    cn,#p402
30f64                 |     
30f64     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
30f68     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
30f6c     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
30f70     01 A8 05 C6 |     if_c    mov     cn,#1
30f74     B6 AA 39 F3 |             fle     ct,time3 wcz
30f78     02 A8 05 C6 |     if_c    mov     cn,#2     
30f7c     B7 AA 39 F3 |             fle     ct,time4 wcz
30f80     03 A8 05 C6 |     if_c    mov     cn,#3
30f84     B8 AA 39 F3 |             fle     ct,time5 wcz
30f88     04 A8 05 C6 |     if_c    mov     cn,#4
30f8c     B9 AA 39 F3 |             fle     ct,time6 wcz
30f90     05 A8 05 C6 |     if_c    mov     cn,#5
30f94     BA AA 39 F3 |             fle     ct,time7 wcz
30f98     06 A8 05 C6 |     if_c    mov     cn,#6
30f9c     BB AA 39 F3 |             fle     ct,time8 wcz
30fa0     07 A8 05 C6 |     if_c    mov     cn,#7
30fa4                 | 
30fa4                 | 
30fa4                 | '----------------------------------------------------------------------------------
30fa4                 | '------------- Compute channel samples --------------------------------------------
30fa4                 | '----------------------------------------------------------------------------------
30fa4                 | 
30fa4                 | 
30fa4     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
30fa8     05 78 65 F0 |             shl     channeladd,#5
30fac     BC F0 03 F1 |             add     ptra,channeladd
30fb0                 | 
30fb0     28 0E 64 FD |             setq    #7                        ' read parameters
30fb4     00 8F 05 FB |             rdlong  pointer0,ptra
30fb8                 | '            testb   command0,#29 wz
30fb8                 | '    if_nz   jmp     #p408
30fb8                 | '    	    getword envptr,command0,#0
30fb8                 | '    	    getbyte envspeed,command0,#2
30fb8                 | '    	    jmp     #p404                     'if envelope then no sample rate
30fb8                 |     	    
30fb8     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
30fbc     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
30fc0     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
30fc4     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
30fc8     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
30fcc     00 7C 0D F2 |             cmp     qq,#0 wz                         
30fd0     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
30fd4     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
30fd8                 |             
30fd8     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
30fdc     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
30fe0     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
30fe4                 | 
30fe4                 | 
30fe4     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
30fe8     C8 B0 39 F9 |             getword oldrs,sample0,#1
30fec     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
30ff0     CC A2 31 F9 |     	    getword avol0,volpan0,#0
30ff4     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
30ff8     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
30ffc                 | 
30ffc     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
31000     00 AC 01 F6 |             mov     dt0,0-0    
31004     B3 AC 81 F1 |             sub     dt0,time0
31008                 |             
31008     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
3100c     CF 00 00 F1 |             add     0-0,afreq0  	
31010                 | 
31010     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
31014     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
31018     08 8E 45 F0 |             shr     pointer0,#8
3101c                 |          
3101c     1F 92 0D F4 |             testb   sstart0,#31 wz            
31020     01 8E 65 A0 |     if_z    shl     pointer0,#1        
31024     1C 92 0D F4 |             testb   sstart0,#28 wz            
31028     01 8E 65 A0 |     if_z    shl     pointer0,#1        
3102c                 |             
3102c     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
31030     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
31034     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
31038                 |             
31038     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
3103c     C9 7C 01 F1 |             add     qq,sstart0            
31040                 | 
31040                 | 
31040                 | 
31040     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
31044     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
31048     04 01 B0 1D |     if_gt   call    #cache_read
3104c                 |          
3104c                 |          
3104c                 |  
3104c                 |          
3104c     1F 92 0D F4 |             testb   sstart0,#31 wz 
31050     08 7E 65 50 |     if_nz   shl     spl,#8
31054     08 8E 65 50 |     if_nz   shl     pointer0,#8
31058     07 8E 65 A0 |     if_z    shl     pointer0,#7
3105c     1C 92 0D F4 |             testb   sstart0,#28 wz            
31060     01 8E 45 A0 |     if_z    shr     pointer0,#1    
31064     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
31068                 |     
31068                 | 
31068     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
3106c     00 7E 01 F6 |             mov     spl,0-0
31070                 |  
31070     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
31074     00 B2 01 F6 |             mov     ls0,0-0
31078     20 00 00 FF 
3107c     00 7C 05 F6 |             mov     qq,##16384
31080     D2 7C 81 F1 |             sub     qq,apan0
31084     BE 7E 31 FA |             scas    spl,qq
31088     00 B4 01 F6 |             mov     rs0, 0-0
3108c                 | 
3108c     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
31090     DA B8 01 F1 |             add     rs,rs0
31094     D7 B6 81 F1 |             sub     ls,oldls
31098     D9 B6 01 F1 |             add     ls,ls0
3109c                 |    
3109c     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
310a0     D9 90 21 F9 |             setword sample0,ls0,#0
310a4                 |             
310a4     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
310a8     00 8E 05 A6 |     if_z    mov     pointer0, #0  
310ac     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
310b0     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
310b4     04 00 00 AF 
310b8     00 68 05 A1 |     if_z    add     time1,##2048
310bc     B4 6A 01 A6 |     if_z    mov     time2,time1
310c0     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
310c4                 |             
310c4     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
310c8     00 8F 65 FC |             wrlong  pointer0,ptra
310cc     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
310d0                 |                       
310d0     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
310d4     FF 7B 25 A7 |     if_z    decmod  front, #511          
310d8                 |          
310d8     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
310dc     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
310e0     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
310e4     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
310e8                 | 	    
310e8                 | 		    
310e8     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
310ec     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
310f0     D8 BC 01 F6 |             mov     newsample, oldrs       
310f4                 | 
310f4     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
310f8     D6 66 01 F1 |             add     time0,dt0    
310fc                 |                                      
310fc     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
31100     60 FE 9F AD |     if_z    jmp     #loop1
31104     D6 7C 01 F6 |             mov     qq,dt0
31108                 |   
31108     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3110c     00 7A 9D F2 |             cmpr    front, #0-0 wcz
31110     F4 FF 9F AD |     if_e    jmp     #p301    
31114                 | 		
31114     00 C2 0D F2 | 	    cmp     scbase,#0 wz
31118     20 00 90 AD |     if_z    jmp #p302	   
3111c                 |  
3111c                 |  
3111c     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
31120     E2 C6 01 C6 |     if_c    mov scptr2,scptr
31124     02 C6 65 C0 |     if_c    shl scptr2,#2
31128     E1 C6 01 C1 |     if_c    add scptr2,scbase     
3112c     60 C6 65 FC |             wrlong scptr2,#$60
31130     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
31134     01 00 00 CF 
31138     7F C4 05 C7 |     if_c    incmod scptr,##639
3113c                 | 			    
3113c     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
31140     00 00 00 FF 
31144     FF 7B 05 F7 |             incmod  front, ##511
31148     EF 7D 6D FB |             djnz    qq,#p301
3114c                 |             
3114c     FC FD 9F FD |             jmp     #loop            'loop
31150                 | 
31150                 | '----------------------------------------------------------------------------------
31150                 | '------------- This is the end of the main loop -----------------------------------
31150                 | '----------------------------------------------------------------------------------
31150                 | 
31150                 | '----------------------------------------------------------------------------------
31150                 | '------------- PSRAM cache ----------- --------------------------------------------
31150                 | '----------------------------------------------------------------------------------
31150                 | 
31150                 | ' There are 8 cache pointers for 8 channels
31150                 | ' if 24 higher bits of address=cache, then ger a word from the cache
31150                 | ' else load the cache from PSRAM, update the pointer, then read a sample
31150                 | 
31150                 | 
31150     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
31154                 |             
31154     BE E8 01 F6 | 	    mov     addrhi,qq		
31158     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3115c     E8 A8 95 F9 | 	    alts    cn,#cache1            
31160     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
31164     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
31168                 | 	
31168     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
3116c     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
31170     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
31174     08 E0 65 F0 | 	    shl     cmd,#8
31178     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3117c     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
31180     08 E2 65 F0 |             shl     hubaddr,#8                  '
31184     E7 E2 01 F1 |             add     hubaddr,hubptr 
31188     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
3118c     28 04 64 FD |             setq    #2                          ' write 3 longs
31190     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
31194     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
31198     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
3119c                 |             
3119c                 | 	
3119c     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
311a0     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
311a4     E7 7C 01 F1 | 	    add     qq,hubptr
311a8     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
311ac     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
311b0                 |           
311b0                 | 
311b0                 | '--------------------------------------------------------------------------
311b0                 | '------ Interrupt service -------------------------------------------------
311b0                 | '------ Output the sample, get the next one if exists ---------------------
311b0                 | '--------------------------------------------------------------------------
311b0                 | 
311b0     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
311b4     0F 88 25 FC |             wypin   rsample,#right       '4
311b8     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
311bc     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
311c0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
311c4     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
311c8     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
311cc                 |     
311cc     F5 FF 3B FB |             reti1                        '17/19 
311d0                 |           
311d0                 | '---------------------------------------------------------------------------
311d0                 | '-------- End of interrupt -------------------------------------------------
311d0                 | '---------------------------------------------------------------------------    
311d0                 | 
311d0                 | 
311d0                 | '---------------------------------------------------------------------------
311d0                 | '------- Variables ---------------------------------------------------------
311d0                 | '---------------------------------------------------------------------------
311d0                 | 
311d0                 | ' constants
311d0                 | 
311d0     00 00 00 40 | a40000000   long $40000000
311d4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
311d8                 | 
311d8                 | ' Time variables
311d8                 | 
311d8     00 00 00 00 | time0       long 0    ' Global sample computing time
311dc     01 00 00 00 | time1       long 1    ' Local channels time
311e0     02 00 00 00 | time2       long 2
311e4     03 00 00 00 | time3       long 3
311e8     04 00 00 00 | time4       long 4
311ec     05 00 00 00 | time5       long 5
311f0     06 00 00 00 | time6       long 6
311f4     07 00 00 00 | time7       long 7
311f8     08 00 00 00 | time8       long 8
311fc                 | 
311fc     00 00 00 00 | channeladd long 0
31200                 | 
31200     00 00 00 00 | front       long 0
31204                 | 
31204                 | ' temporary variables 
31204     00 00 00 00 | qq          long 0
31208     00 00 00 00 | spl         long 0
3120c     00 00 00 00 | zero        long 0
31210     00 00 00 00 | mailbox     long 0
31214     00 00 00 00 | mailbox2 long 0
31218                 | 
31218                 | ' Interrupt ISR variables
31218                 | 
31218     00 00 00 00 | lsample     long 0
3121c     00 00 00 00 | rsample     long 0
31220     00 00 00 00 | lsnext      long 0
31224     00 00 00 00 | rsnext      long 0 
31228                 | 
31228                 | ' channel parameter block
31228                 | 
31228     00 00 00 00 | pointer0    long 0     
3122c     00 00 00 00 | sample0     long 0
31230     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
31234     00 00 00 00 | lstart0     long 0
31238     00 00 00 00 | lend0       long 0
3123c     00 00 00 00 | volpan0     long 0
31240     00 00 00 00 | freqskip0   long 0
31244     00 00 00 00 | command0    long 0
31248                 | 
31248     00 00 00 00 | afreq0      long 0
3124c     00 00 00 00 | askip0      long 0
31250     00 00 00 00 | avol0       long 0
31254     00 00 00 00 | apan0       long 0
31258                 | 
31258     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3125c     00 00 00 00 | cn          long 0
31260     00 00 00 00 | ct          long 0
31264     00 00 00 00 | dt0         long 0
31268                 | 
31268                 | ' Samples
31268     00 00 00 00 | oldls       long 0
3126c     00 00 00 00 | oldrs       long 0
31270                 | 
31270     00 00 00 00 | ls0         long 0
31274     00 00 00 00 | rs0         long 0
31278                 | 
31278     00 00 00 00 | ls          long 0    
3127c     00 00 00 00 | rs          long 0
31280                 | 
31280     00 00 00 00 | oldsample   long 0
31284     00 00 00 00 | newsample   long 0
31288                 | 
31288     00 00 00 00 | nrsample    long 0
3128c     00 00 00 00 | nlsample    long 0
31290                 | 
31290     00 00 00 00 | scbase long 0
31294     00 00 00 00 | scptr long 0
31298     00 00 00 00 | scptr2 long 0
3129c     00 00 00 00 | scope long 0
312a0                 | 
312a0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
312a4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
312a8                 | 
312a8     00 18 07 00 | hubptr      long $71800
312ac     00 00 00 00 | cache1      long 0
312b0     00 00 00 00 | cache2      long 0
312b4     00 00 00 00 | cache3      long 0
312b8     00 00 00 00 | cache4      long 0
312bc     00 00 00 00 | cache5      long 0
312c0     00 00 00 00 | cache6      long 0
312c4     00 00 00 00 | cache7      long 0
312c8     00 00 00 00 | cache8      long 0
312cc                 | 
312cc                 | 
312cc     00 00 00 00 | cmd         long 0
312d0     00 00 00 00 | hubaddr     long 0
312d4     00 01 00 00 | count       long 256
312d8     00 00 00 00 | addrlo long 0
312dc     00 00 00 00 | addrhi long 0
312e0     00 00 00 00 | pointer00 long 0
312e4     00 00 00 00 
312e8     00 00 00 00 | null  			long 	0,0           ' for channel reset
312ec                 | 	alignl
312ec                 | __system__dat_
312ec     00 00 00 00 
312f0     00 00 00 00 | 	byte	$00[8]
312f4     03 00 00 00 
312f8     00 00 00 00 
312fc     00 00 00 00 
31300     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31304     00 00 00 00 
      ...             
31590     00 00 00 00 
31594     00 00 00 00 | 	byte	$00[660]
31598     00 00 50 06 | 	long	(101 {__system____root_opendir})<<20
3159c     00 00 60 06 | 	long	(102 {__system____root_closedir})<<20
315a0     00 00 70 06 | 	long	(103 {__system____root_readdir})<<20
315a4     00 00 80 06 | 	long	(104 {__system____root_stat})<<20
315a8     00 00 00 00 
315ac     00 00 00 00 
315b0     00 00 00 00 
315b4     00 00 00 00 
315b8     00 00 00 00 
315bc     00 00 00 00 
315c0     00 00 00 00 | 	byte	$00[28]
315c4     2C 16 03 00 | 	long	@@@__system__dat_ + 832
315c8     2F 16 03 00 | 	long	@@@__system__dat_ + 835
315cc     50 16 03 00 | 	long	@@@__system__dat_ + 868
315d0     69 16 03 00 | 	long	@@@__system__dat_ + 893
315d4     84 16 03 00 | 	long	@@@__system__dat_ + 920
315d8     9E 16 03 00 | 	long	@@@__system__dat_ + 946
315dc     AE 16 03 00 | 	long	@@@__system__dat_ + 962
315e0     C0 16 03 00 | 	long	@@@__system__dat_ + 980
315e4     D2 16 03 00 | 	long	@@@__system__dat_ + 998
315e8     E4 16 03 00 | 	long	@@@__system__dat_ + 1016
315ec     F0 16 03 00 | 	long	@@@__system__dat_ + 1028
315f0     01 17 03 00 | 	long	@@@__system__dat_ + 1045
315f4     15 17 03 00 | 	long	@@@__system__dat_ + 1065
315f8     1F 17 03 00 | 	long	@@@__system__dat_ + 1075
315fc     2F 17 03 00 | 	long	@@@__system__dat_ + 1091
31600     3E 17 03 00 | 	long	@@@__system__dat_ + 1106
31604     54 17 03 00 | 	long	@@@__system__dat_ + 1128
31608     6D 17 03 00 | 	long	@@@__system__dat_ + 1153
3160c     81 17 03 00 | 	long	@@@__system__dat_ + 1173
31610     8F 17 03 00 | 	long	@@@__system__dat_ + 1187
31614     A3 17 03 00 | 	long	@@@__system__dat_ + 1207
31618     AF 17 03 00 | 	long	@@@__system__dat_ + 1219
3161c     C1 17 03 00 | 	long	@@@__system__dat_ + 1237
31620     D9 17 03 00 | 	long	@@@__system__dat_ + 1261
31624     EB 17 03 00 | 	long	@@@__system__dat_ + 1279
31628     FE 17 03 00 | 	long	@@@__system__dat_ + 1298
3162c     4F 4B 00 4E 
31630     75 6D 65 72 
31634     69 63 61 6C 
31638     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3163c     75 6D 65 6E 
31640     74 20 6F 75 
31644     74 20 6F 66 
31648     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3164c     61 69 6E 00 
31650     52 65 73 75 
31654     6C 74 20 6E 
31658     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3165c     65 70 72 65 
31660     73 65 6E 74 
31664     61 62 6C 65 
31668     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3166c     65 67 61 6C 
31670     20 6D 75 6C 
31674     74 69 62 79 
31678     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3167c     65 71 75 65 
31680     6E 63 65 00 
31684     4E 6F 20 73 
31688     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3168c     66 69 6C 65 
31690     20 6F 72 20 
31694     64 69 72 65 
31698     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3169c     79 00 42 61 
316a0     64 20 66 69 
316a4     6C 65 20 6E 
316a8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
316ac     72 00 50 65 
316b0     72 6D 69 73 
316b4     73 69 6F 6E 
316b8     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
316bc     69 65 64 00 
316c0     4E 6F 74 20 
316c4     65 6E 6F 75 
316c8     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
316cc     65 6D 6F 72 
316d0     79 00 54 65 
316d4     6D 70 6F 72 
316d8     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
316dc     66 61 69 6C 
316e0     75 72 65 00 
316e4     46 69 6C 65 
316e8     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
316ec     73 74 73 00 
316f0     49 6E 76 61 
316f4     6C 69 64 20 
316f8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
316fc     6D 65 6E 74 
31700     00 54 6F 6F 
31704     20 6D 61 6E 
31708     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3170c     65 6E 20 66 
31710     69 6C 65 73 
31714     00 49 2F 4F 
31718     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3171c     6F 72 00 4E 
31720     6F 74 20 61 
31724     20 64 69 72 
31728     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3172c     72 79 00 49 
31730     73 20 61 20 
31734     64 69 72 65 
31738     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3173c     79 00 52 65 
31740     61 64 20 6F 
31744     6E 6C 79 20 
31748     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3174c     20 73 79 73 
31750     74 65 6D 00 
31754     46 75 6E 63 
31758     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3175c     20 6E 6F 74 
31760     20 69 6D 70 
31764     6C 65 6D 65 
31768     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3176c     00 44 69 72 
31770     65 63 74 6F 
31774     72 79 20 6E 
31778     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3177c     6D 70 74 79 
31780     00 4E 61 6D 
31784     65 20 74 6F 
31788     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3178c     6E 67 00 44 
31790     65 76 69 63 
31794     65 20 6E 6F 
31798     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3179c     65 6B 61 62 
317a0     6C 65 00 42 
317a4     61 64 20 61 
317a8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
317ac     73 73 00 42 
317b0     72 6F 6B 65 
317b4     6E 20 63 6F 
317b8     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
317bc     74 69 6F 6E 
317c0     00 44 65 76 
317c4     69 63 65 20 
317c8     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
317cc     65 73 6F 75 
317d0     72 63 65 20 
317d4     62 75 73 79 
317d8     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
317dc     73 73 20 64 
317e0     65 76 69 63 
317e4     65 20 6C 69 
317e8     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
317ec     6F 20 73 70 
317f0     61 63 65 20 
317f4     6F 6E 20 64 
317f8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
317fc     65 00 55 6E 
31800     6B 6E 6F 77 
31804     6E 20 65 72 
31808     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3180c     00 00 00 00 
31810     00 00 00 00 | 	byte	$00[8]
31814     05 00 00 00 
31818     00 00 00 00 
3181c     00 00 00 00 
31820     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31824     00 00 00 00 | 	byte	$00, $00, $00, $00
31828     00 00 D0 07 | 	long	(125 {__system___tx})<<20
3182c     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31830     00 00 00 00 | 	byte	$00, $00, $00, $00
31834     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
31838     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
3183c     00 00 00 00 
31840     00 00 00 00 | 	byte	$00[8]
31844     01 00 00 00 
31848     06 00 00 00 
3184c     00 00 00 00 
31850     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31854     00 00 00 00 
31858     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3185c     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31860     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31864     00 00 00 00 | 	byte	$00, $00, $00, $00
31868     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
3186c     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
31870     00 00 00 00 
31874     00 00 00 00 | 	byte	$00[8]
31878     01 00 00 00 
3187c     06 00 00 00 
31880     00 00 00 00 
31884     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31888     00 00 00 00 
3188c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31890     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31894     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31898     00 00 00 00 | 	byte	$00, $00, $00, $00
3189c     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
318a0     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
318a4     00 00 00 00 
      ...             
31a14     00 00 00 00 
31a18     00 00 00 00 | 	byte	$00[376]
31a1c     20 1A 03 00 | 	long	@@@__system__dat_ + 1844
31a20     00 00 00 00 
31a24     00 00 00 00 
31a28     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a2c                 | 	alignl
31a2c                 | _fatfs_cc_dat_
31a2c     C7 00 FC 00 
31a30     E9 00 E2 00 
31a34     E4 00 E0 00 
31a38     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31a3c     EA 00 EB 00 
31a40     E8 00 EF 00 
31a44     EE 00 EC 00 
31a48     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31a4c     C9 00 E6 00 
31a50     C6 00 F4 00 
31a54     F6 00 F2 00 
31a58     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31a5c     FF 00 D6 00 
31a60     DC 00 F8 00 
31a64     A3 00 D8 00 
31a68     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31a6c     E1 00 ED 00 
31a70     F3 00 FA 00 
31a74     F1 00 D1 00 
31a78     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31a7c     BF 00 AE 00 
31a80     AC 00 BD 00 
31a84     BC 00 A1 00 
31a88     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31a8c     91 25 92 25 
31a90     93 25 02 25 
31a94     24 25 C1 00 
31a98     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
31a9c     A9 00 63 25 
31aa0     51 25 57 25 
31aa4     5D 25 A2 00 
31aa8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
31aac     14 25 34 25 
31ab0     2C 25 1C 25 
31ab4     00 25 3C 25 
31ab8     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
31abc     5A 25 54 25 
31ac0     69 25 66 25 
31ac4     60 25 50 25 
31ac8     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
31acc     F0 00 D0 00 
31ad0     CA 00 CB 00 
31ad4     C8 00 31 01 
31ad8     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
31adc     CF 00 18 25 
31ae0     0C 25 88 25 
31ae4     84 25 A6 00 
31ae8     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
31aec     D3 00 DF 00 
31af0     D4 00 D2 00 
31af4     F5 00 D5 00 
31af8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31afc     DE 00 DA 00 
31b00     DB 00 D9 00 
31b04     FD 00 DD 00 
31b08     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31b0c     AD 00 B1 00 
31b10     17 20 BE 00 
31b14     B6 00 A7 00 
31b18     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31b1c     B0 00 A8 00 
31b20     B7 00 B9 00 
31b24     B3 00 B2 00 
31b28     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31b2c     61 00 1A 03 
31b30     E0 00 17 03 
31b34     F8 00 07 03 
31b38     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31b3c     78 01 00 01 
31b40     30 01 32 01 
31b44     06 01 39 01 
31b48     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31b4c     2E 01 79 01 
31b50     06 01 80 01 
31b54     4D 00 43 02 
31b58     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31b5c     82 01 84 01 
31b60     84 01 86 01 
31b64     87 01 87 01 
31b68     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31b6c     8B 01 8B 01 
31b70     8D 01 8E 01 
31b74     8F 01 90 01 
31b78     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31b7c     93 01 94 01 
31b80     F6 01 96 01 
31b84     97 01 98 01 
31b88     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31b8c     9B 01 9C 01 
31b90     9D 01 20 02 
31b94     9F 01 A0 01 
31b98     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
31b9c     A2 01 A4 01 
31ba0     A4 01 A6 01 
31ba4     A7 01 A7 01 
31ba8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
31bac     AB 01 AC 01 
31bb0     AC 01 AE 01 
31bb4     AF 01 AF 01 
31bb8     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
31bbc     B3 01 B3 01 
31bc0     B5 01 B5 01 
31bc4     B7 01 B8 01 
31bc8     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
31bcc     BB 01 BC 01 
31bd0     BC 01 BE 01 
31bd4     F7 01 C0 01 
31bd8     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
31bdc     C3 01 C4 01 
31be0     C5 01 C4 01 
31be4     C7 01 C8 01 
31be8     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
31bec     CB 01 CA 01 
31bf0     CD 01 10 01 
31bf4     DD 01 01 00 
31bf8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31bfc     12 01 F3 01 
31c00     03 00 F1 01 
31c04     F4 01 F4 01 
31c08     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31c0c     22 02 12 01 
31c10     3A 02 09 00 
31c14     65 2C 3B 02 
31c18     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31c1c     66 2C 3F 02 
31c20     40 02 41 02 
31c24     41 02 46 02 
31c28     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31c2c     40 00 81 01 
31c30     86 01 55 02 
31c34     89 01 8A 01 
31c38     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31c3c     5A 02 90 01 
31c40     5C 02 5D 02 
31c44     5E 02 5F 02 
31c48     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31c4c     62 02 94 01 
31c50     64 02 65 02 
31c54     66 02 67 02 
31c58     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31c5c     6A 02 62 2C 
31c60     6C 02 6D 02 
31c64     6E 02 9C 01 
31c68     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31c6c     9D 01 73 02 
31c70     74 02 9F 01 
31c74     76 02 77 02 
31c78     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31c7c     7A 02 7B 02 
31c80     7C 02 64 2C 
31c84     7E 02 7F 02 
31c88     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31c8c     82 02 A9 01 
31c90     84 02 85 02 
31c94     86 02 87 02 
31c98     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
31c9c     B1 01 B2 01 
31ca0     45 02 8D 02 
31ca4     8E 02 8F 02 
31ca8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
31cac     B7 01 7B 03 
31cb0     03 00 FD 03 
31cb4     FE 03 FF 03 
31cb8     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
31cbc     86 03 88 03 
31cc0     89 03 8A 03 
31cc4     B1 03 11 03 
31cc8     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
31ccc     A3 03 A3 03 
31cd0     C4 03 08 03 
31cd4     CC 03 03 00 
31cd8     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
31cdc     8F 03 D8 03 
31ce0     18 01 F2 03 
31ce4     0A 00 F9 03 
31ce8     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
31cec     F5 03 F6 03 
31cf0     F7 03 F7 03 
31cf4     F9 03 FA 03 
31cf8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31cfc     20 03 50 04 
31d00     10 07 60 04 
31d04     22 01 8A 04 
31d08     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
31d0c     0E 01 CF 04 
31d10     01 00 C0 04 
31d14     D0 04 44 01 
31d18     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
31d1c     00 00 7D 1D 
31d20     01 00 63 2C 
31d24     00 1E 96 01 
31d28     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
31d2c     00 1F 08 06 
31d30     10 1F 06 06 
31d34     20 1F 08 06 
31d38     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
31d3c     40 1F 06 06 
31d40     51 1F 07 00 
31d44     59 1F 52 1F 
31d48     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
31d4c     5D 1F 56 1F 
31d50     5F 1F 60 1F 
31d54     08 06 70 1F 
31d58     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
31d5c     BB 1F C8 1F 
31d60     C9 1F CA 1F 
31d64     CB 1F DA 1F 
31d68     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
31d6c     F9 1F EA 1F 
31d70     EB 1F FA 1F 
31d74     FB 1F 80 1F 
31d78     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
31d7c     08 06 A0 1F 
31d80     08 06 B0 1F 
31d84     04 00 B8 1F 
31d88     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
31d8c     BC 1F CC 1F 
31d90     01 00 C3 1F 
31d94     D0 1F 02 06 
31d98     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
31d9c     E5 1F 01 00 
31da0     EC 1F F3 1F 
31da4     01 00 FC 1F 
31da8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
31dac     32 21 70 21 
31db0     10 02 84 21 
31db4     01 00 83 21 
31db8     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
31dbc     30 2C 2F 04 
31dc0     60 2C 02 01 
31dc4     67 2C 06 01 
31dc8     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
31dcc     80 2C 64 01 
31dd0     00 2D 26 08 
31dd4     41 FF 1A 03 
31dd8     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
31ddc     05 07 09 0E 
31de0     10 12 14 16 
31de4     18 1C 1E 43 
31de8     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
31dec     41 41 43 45 
31df0     45 45 49 49 
31df4     49 41 41 45 
31df8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
31dfc     4F 55 55 59 
31e00     4F 55 4F 9C 
31e04     4F 9E 9F 41 
31e08     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
31e0c     A5 A6 A7 A8 
31e10     A9 AA AB AC 
31e14     AD AE AF B0 
31e18     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
31e1c     41 41 41 B8 
31e20     B9 BA BB BC 
31e24     BD BE BF C0 
31e28     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
31e2c     C5 41 41 C8 
31e30     C9 CA CB CC 
31e34     CD CE CF D1 
31e38     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
31e3c     49 49 49 49 
31e40     D9 DA DB DC 
31e44     DD 49 DF 4F 
31e48     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
31e4c     4F E6 E8 E8 
31e50     55 55 55 59 
31e54     59 EE EF F0 
31e58     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
31e5c     F5 F6 F7 F8 
31e60     F9 FA FB FC 
31e64     FD FE FF 00 
31e68     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
31e6c     00 00 00 00 | 	byte	$00, $00, $00, $00
31e70     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_close})<<20
31e74     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_read})<<20
31e78     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_write})<<20
31e7c     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_lseek})<<20
31e80     00 00 00 07 | 	long	(112 {_fatfs_cc_v_ioctl})<<20
31e84     00 00 10 08 | 	long	(129 {_fatfs_cc_v_flush})<<20
31e88     00 00 00 00 
31e8c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31e90     00 00 10 07 | 	long	(113 {_fatfs_cc_v_open})<<20
31e94     00 00 20 07 | 	long	(114 {_fatfs_cc_v_creat})<<20
31e98     00 00 30 07 | 	long	(115 {_fatfs_cc_v_opendir})<<20
31e9c     00 00 40 07 | 	long	(116 {_fatfs_cc_v_closedir})<<20
31ea0     00 00 50 07 | 	long	(117 {_fatfs_cc_v_readdir})<<20
31ea4     00 00 60 07 | 	long	(118 {_fatfs_cc_v_stat})<<20
31ea8     00 00 70 07 | 	long	(119 {_fatfs_cc_v_mkdir})<<20
31eac     00 00 80 07 | 	long	(120 {_fatfs_cc_v_rmdir})<<20
31eb0     00 00 90 07 | 	long	(121 {_fatfs_cc_v_remove})<<20
31eb4     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_rename})<<20
31eb8     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_init})<<20
31ebc     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_deinit})<<20
31ec0     FF FF FF FF 
31ec4     1F 00 00 00 
31ec8     1C 00 00 00 
31ecc     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
31ed0     1E 00 00 00 
31ed4     1F 00 00 00 
31ed8     1E 00 00 00 
31edc     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
31ee0     1F 00 00 00 
31ee4     1E 00 00 00 
31ee8     1F 00 00 00 
31eec     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
31ef0     1F 00 00 00 
31ef4     00 00 00 00 
31ef8     1F 00 00 00 
31efc     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
31f00     5A 00 00 00 
31f04     78 00 00 00 
31f08     97 00 00 00 
31f0c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
31f10     D4 00 00 00 
31f14     F3 00 00 00 
31f18     11 01 00 00 
31f1c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
31f20     4E 01 00 00 
31f24     6D 01 00 00 
31f28     FF FF FF FF 
31f2c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
31f30     00 00 00 00 
      ...             
31f48     00 00 00 00 
31f4c     00 00 00 00 | 	byte	$00[32]
31f50     6E 1F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
31f54     72 1F 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
31f58     00 00 00 00 
31f5c     00 00 00 00 
31f60     00 00 00 00 
31f64     00 00 00 00 
31f68     00 00       | 	byte	$00[18]
31f6a     3F 3F 3F 00 
31f6e     55 43 54 00 
31f72     55 43 54 00 
31f76     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
31f7a     00 00 00 00 
31f7e     00 00 00    | 	byte	$00[7]
31f81     CA 9A 3B 00 
31f85     00 00 00 01 
31f89     01 01 01 01 
31f8d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
31f91     91 11 11 11 
31f95     11 01 01 01 
31f99     01 01 01 01 
31f9d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
31fa1     01 01 01 01 
31fa5     01 01 01    | 	byte	$01[7]
31fa8     90 20 20 20 
31fac     20 20 20 20 
31fb0     20 20 20 20 
31fb4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
31fb8     42 42 42 42 
31fbc     42 42 42 42 
31fc0     42 42       | 	byte	$42[10]
31fc2     20 20 20 20 
31fc6     20 20 20    | 	byte	$20[7]
31fc9     44 44 44 44 
31fcd     44 44       | 	byte	$44[6]
31fcf     04 04 04 04 
31fd3     04 04 04 04 
31fd7     04 04 04 04 
31fdb     04 04 04 04 
31fdf     04 04 04 04 | 	byte	$04[20]
31fe3     20 20 20 20 
31fe7     20 20       | 	byte	$20[6]
31fe9     48 48 48 48 
31fed     48 48       | 	byte	$48[6]
31fef     08 08 08 08 
31ff3     08 08 08 08 
31ff7     08 08 08 08 
31ffb     08 08 08 08 
31fff     08 08 08 08 | 	byte	$08[20]
32003     20 20 20 20 
32007     01 00 00 00 
3200b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3200c                 | __methodtable__
3200c     58 46 01 00 | 	long	@_do_no_command
32010     08 D6 00 00 | 	long	@_do_plus
32014     F4 DA 00 00 | 	long	@_do_minus
32018     BC DF 00 00 | 	long	@_do_or
3201c     D4 E0 00 00 | 	long	@_do_mul
32020     60 E6 00 00 | 	long	@_do_fdiv
32024     A4 DE 00 00 | 	long	@_do_and
32028     40 E4 00 00 | 	long	@_do_div
3202c     28 E8 00 00 | 	long	@_do_mod
32030     48 EA 00 00 | 	long	@_do_shl
32034     60 EB 00 00 | 	long	@_do_shr
32038     78 EC 00 00 | 	long	@_do_power
3203c     68 D0 00 00 | 	long	@_do_getvar
32040     B4 99 00 00 | 	long	@_do_push
32044     B0 C9 00 00 | 	long	@_do_assign
32048     00 23 01 00 | 	long	@_do_cls
3204c     E0 C3 00 00 | 	long	@_do_new
32050     A4 23 01 00 | 	long	@_do_plot
32054     DC 24 01 00 | 	long	@_do_draw
32058     C4 2E 01 00 | 	long	@_do_print
3205c     BC 27 01 00 | 	long	@_do_circle
32060     44 26 01 00 | 	long	@_do_fcircle
32064     34 29 01 00 | 	long	@_do_box
32068     DC 2C 01 00 | 	long	@_do_frame
3206c     6C 23 01 00 | 	long	@_do_color
32070     B8 79 00 00 | 	long	@_do_for
32074     E4 7B 00 00 | 	long	@_do_next
32078     44 C1 00 00 | 	long	@_do_list
3207c     04 AA 00 00 | 	long	@_do_run
32080     6C C8 00 00 | 	long	@_do_error
32084     68 C5 00 00 | 	long	@_do_fast_goto
32088     58 C6 00 00 | 	long	@_do_find_goto
3208c     68 C8 00 00 | 	long	@_do_slow_goto
32090     40 0B 01 00 | 	long	@_do_converttoint
32094     F8 9F 00 00 | 	long	@_test_csave
32098     4C A3 00 00 | 	long	@_do_save
3209c     38 A6 00 00 | 	long	@_do_load
320a0     90 38 01 00 | 	long	@_do_pinwrite
320a4     30 3D 01 00 | 	long	@_do_waitms
320a8     6C 3E 01 00 | 	long	@_do_waitvbl
320ac     6C 41 01 00 | 	long	@_do_if
320b0     50 42 01 00 | 	long	@_do_else
320b4     74 42 01 00 | 	long	@_do_nothing
320b8     40 EE 00 00 | 	long	@_do_eq
320bc     B8 FC 00 00 | 	long	@_do_ge
320c0     90 01 01 00 | 	long	@_do_le
320c4     18 F3 00 00 | 	long	@_do_gt
320c8     F0 F7 00 00 | 	long	@_do_lt
320cc     68 06 01 00 | 	long	@_do_ne
320d0     1C 0E 01 00 | 	long	@_do_rnd
320d4     78 42 01 00 | 	long	@_do_brun
320d8     44 45 01 00 | 	long	@_do_beep
320dc     9C 3E 01 00 | 	long	@_do_dir
320e0     8C 33 01 00 | 	long	@_do_paper
320e4     14 34 01 00 | 	long	@_do_ink
320e8     B0 34 01 00 | 	long	@_do_font
320ec     2C 35 01 00 | 	long	@_do_mode
320f0     B0 44 01 00 | 	long	@_do_mouse
320f4     98 22 01 00 | 	long	@_do_gettime
320f8     E4 44 01 00 | 	long	@_do_cursor
320fc     18 45 01 00 | 	long	@_do_click
32100     24 20 01 00 | 	long	@_do_mousex
32104     68 20 01 00 | 	long	@_do_mousey
32108     F0 20 01 00 | 	long	@_do_mousek
3210c     AC 20 01 00 | 	long	@_do_mousew
32110     E4 0F 01 00 | 	long	@_do_sin
32114     50 17 01 00 | 	long	@_do_stick
32118     D4 18 01 00 | 	long	@_do_strig
3211c     38 1F 01 00 | 	long	@_do_sprite
32120     A8 1B 01 00 | 	long	@_do_defsprite
32124     58 1A 01 00 | 	long	@_do_getpixel
32128     78 3E 01 00 | 	long	@_do_waitclock
3212c     64 46 01 00 | 	long	@_do_negative
32130     34 21 01 00 | 	long	@_do_rdpin
32134     A0 21 01 00 | 	long	@_do_rqpin
32138     14 22 01 00 | 	long	@_do_pinread
3213c     28 3B 01 00 | 	long	@_do_wrpin
32140     A8 3B 01 00 | 	long	@_do_wxpin
32144     28 3C 01 00 | 	long	@_do_wypin
32148     18 39 01 00 | 	long	@_do_pinfloat
3214c     58 39 01 00 | 	long	@_do_pinlo
32150     98 39 01 00 | 	long	@_do_pinhi
32154     18 3A 01 00 | 	long	@_do_pinstart
32158     D8 39 01 00 | 	long	@_do_pintoggle
3215c     A8 3C 01 00 | 	long	@_do_position
32160     F4 10 01 00 | 	long	@_do_cos
32164     18 12 01 00 | 	long	@_do_tan
32168     48 15 01 00 | 	long	@_do_atn
3216c     28 13 01 00 | 	long	@_do_asin
32170     38 14 01 00 | 	long	@_do_acos
32174     60 16 01 00 | 	long	@_do_sqr
32178     1C 2B 01 00 | 	long	@_do_fill
3217c     C0 B7 00 00 | 	long	@_do_defsnd
32180     28 AD 00 00 | 	long	@_do_defenv
32184     90 79 01 00 | 	long	@_hg010b_spin2_putchar
32188     10 80 02 00 | 	long	@__struct___bas_wrap_sender_tx
3218c     54 80 02 00 | 	long	@__struct___bas_wrap_sender_rx
32190     9C 80 02 00 | 	long	@__struct___bas_wrap_sender_close
32194     40 7F 02 00 | 	long	@__struct__s_vfs_file_t_putchar
32198     B0 7F 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3219c     F8 7E 02 00 | 	long	@___strs_cl_pfunc
321a0     60 DE 01 00 | 	long	@__system____root_opendir
321a4     FC DE 01 00 | 	long	@__system____root_closedir
321a8     78 DE 01 00 | 	long	@__system____root_readdir
321ac     04 DF 01 00 | 	long	@__system____root_stat
321b0     8C D7 01 00 | 	long	@__system____default_putc
321b4     10 D7 01 00 | 	long	@__system____default_getc
321b8     34 D8 01 00 | 	long	@__system____default_flush
321bc     08 6A 02 00 | 	long	@_fatfs_cc_v_close
321c0     24 6E 02 00 | 	long	@_fatfs_cc_v_read
321c4     38 6F 02 00 | 	long	@_fatfs_cc_v_write
321c8     18 70 02 00 | 	long	@_fatfs_cc_v_lseek
321cc     A0 70 02 00 | 	long	@_fatfs_cc_v_ioctl
321d0     F4 70 02 00 | 	long	@_fatfs_cc_v_open
321d4     6C 69 02 00 | 	long	@_fatfs_cc_v_creat
321d8     4C 6A 02 00 | 	long	@_fatfs_cc_v_opendir
321dc     C0 6A 02 00 | 	long	@_fatfs_cc_v_closedir
321e0     00 6B 02 00 | 	long	@_fatfs_cc_v_readdir
321e4     34 6C 02 00 | 	long	@_fatfs_cc_v_stat
321e8     B4 70 02 00 | 	long	@_fatfs_cc_v_mkdir
321ec     D4 70 02 00 | 	long	@_fatfs_cc_v_rmdir
321f0     C4 70 02 00 | 	long	@_fatfs_cc_v_remove
321f4     E4 70 02 00 | 	long	@_fatfs_cc_v_rename
321f8     04 72 02 00 | 	long	@_fatfs_cc_v_init
321fc     0C 72 02 00 | 	long	@_fatfs_cc_v_deinit
32200     CC 8C 01 00 | 	long	@__system___tx
32204     0C 8D 01 00 | 	long	@__system___rx
32208     70 EA 01 00 | 	long	@__system___rxtxioctl_0573
3220c     C8 EA 01 00 | 	long	@__system____dummy_flush_0574
32210     D4 71 02 00 | 	long	@_fatfs_cc_v_flush
32214                 | __heap_base
32214     00 00 00 00 
      ...             
61014     00 00 00 00 
61018     00 00 00 00 | 	long	0[48002]
6101c                 | objmem
6101c     00 00 00 00 
      ...             
704ec     00 00 00 00 
704f0     00 00 00 00 | 	long	0[15670]
704f4                 | stackspace
704f4     00 00 00 00 | 	long	0[1]
704f8 100             | 	org	COG_BSS_START
704f8 100             | _var01
704f8 100             | 	res	1
704f8 101             | _var02
704f8 101             | 	res	1
704f8 102             | _var03
704f8 102             | 	res	1
704f8 103             | _var04
704f8 103             | 	res	1
704f8 104             | _var05
704f8 104             | 	res	1
704f8 105             | _var06
704f8 105             | 	res	1
704f8 106             | _var07
704f8 106             | 	res	1
704f8 107             | _var08
704f8 107             | 	res	1
704f8 108             | _var09
704f8 108             | 	res	1
704f8 109             | arg01
704f8 109             | 	res	1
704f8 10a             | arg02
704f8 10a             | 	res	1
704f8 10b             | arg03
704f8 10b             | 	res	1
704f8 10c             | arg04
704f8 10c             | 	res	1
704f8 10d             | arg05
704f8 10d             | 	res	1
704f8 10e             | arg06
704f8 10e             | 	res	1
704f8 10f             | local01
704f8 10f             | 	res	1
704f8 110             | local02
704f8 110             | 	res	1
704f8 111             | local03
704f8 111             | 	res	1
704f8 112             | local04
704f8 112             | 	res	1
704f8 113             | local05
704f8 113             | 	res	1
704f8 114             | local06
704f8 114             | 	res	1
704f8 115             | local07
704f8 115             | 	res	1
704f8 116             | local08
704f8 116             | 	res	1
704f8 117             | local09
704f8 117             | 	res	1
704f8 118             | local10
704f8 118             | 	res	1
704f8 119             | local11
704f8 119             | 	res	1
704f8 11a             | local12
704f8 11a             | 	res	1
704f8 11b             | local13
704f8 11b             | 	res	1
704f8 11c             | local14
704f8 11c             | 	res	1
704f8 11d             | local15
704f8 11d             | 	res	1
704f8 11e             | local16
704f8 11e             | 	res	1
704f8 11f             | local17
704f8 11f             | 	res	1
704f8 120             | local18
704f8 120             | 	res	1
704f8 121             | local19
704f8 121             | 	res	1
704f8 122             | local20
704f8 122             | 	res	1
704f8 123             | local21
704f8 123             | 	res	1
704f8 124             | local22
704f8 124             | 	res	1
704f8 125             | local23
704f8 125             | 	res	1
704f8 126             | local24
704f8 126             | 	res	1
704f8 127             | local25
704f8 127             | 	res	1
704f8 128             | local26
704f8 128             | 	res	1
704f8 129             | local27
704f8 129             | 	res	1
704f8 12a             | local28
704f8 12a             | 	res	1
704f8 12b             | local29
704f8 12b             | 	res	1
704f8 12c             | local30
704f8 12c             | 	res	1
704f8 12d             | local31
704f8 12d             | 	res	1
704f8 12e             | local32
704f8 12e             | 	res	1
704f8 12f             | local33
704f8 12f             | 	res	1
704f8 130             | local34
704f8 130             | 	res	1
704f8 131             | local35
704f8 131             | 	res	1
704f8 132             | muldiva_
704f8 132             | 	res	1
704f8 133             | muldivb_
704f8 133             | 	res	1
704f8 134             | 	fit	480
704f8 134             | 
