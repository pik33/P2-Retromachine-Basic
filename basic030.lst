00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic030.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 30
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 AC D7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B0 B5 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed E4 B2 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 B8 A3 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 C4 A5 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 1C A1 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 1C 0E 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 04 AD 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 90 3F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 24 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 40 67 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa F8 64 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D0 76 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D8 47 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     EC E7 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     EC F6 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     DC E5 05 F1 | 	add	objptr, ##41948
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     DC E5 85 F1 | 	sub	objptr, ##41948
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     10 E5 05 F1 | 	add	objptr, ##41232
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     10 E5 85 F1 | 	sub	objptr, ##41232
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     E4 F9 B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     38 01 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     30 FB B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     10 E5 05 F1 | 	add	objptr, ##41232
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     10 E5 85 F1 | 	sub	objptr, ##41232
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B4 E5 05 F1 | 	add	objptr, ##41908
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E4 E4 85 F1 | 	sub	objptr, ##36068
009c0     F4 F8 B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     34 CD B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     DC E5 05 F1 | 	add	objptr, ##41948
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     DC E5 85 F1 | 	sub	objptr, ##41948
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     D8 E5 05 F1 | 	add	objptr, ##41944
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     D8 E5 85 F1 | 	sub	objptr, ##41944
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     2C CB B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     CC CA B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E4 E5 05 F1 | 	add	objptr, ##41956
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     A6 E5 85 F1 | 	sub	objptr, ##41894
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     A8 E5 05 F1 | 	add	objptr, ##41896
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     A6 E5 85 F1 | 	sub	objptr, ##41894
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     5C CA B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     34 E2 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E4 E5 05 F1 | 	add	objptr, ##41956
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E4 E5 85 F1 | 	sub	objptr, ##41956
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     50 E5 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     10 E5 05 A1 |  if_e	add	objptr, ##41232
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     10 E5 85 A1 |  if_e	sub	objptr, ##41232
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     20 F6 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     74 FD B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     70 F7 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     74 00 90 5D |  if_ne	jmp	#LR__0021
00cc8     7F 01 00 FF 
00ccc     DE 49 06 F6 | 	mov	local22, ##@LR__5027
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     F0 C8 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     50 1C B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     60 FA B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30     D8 E9 B1 FD | 	call	#_hg010b_spin2_crlf
00d34                 | '     v.crlf() 
00d34                 | '     return  line$
00d34     24 FB 01 F6 | 	mov	result1, local22
00d38     DC 06 90 FD | 	jmp	#LR__0048
00d3c                 | LR__0021
00d3c     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d40                 | '   
00d40                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d40     2B 32 0E F2 | 	cmp	local11, #43 wz
00d44     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d48     3C E4 05 F1 | 	add	objptr, #60
00d4c     F2 28 E2 FA | 	rdword	local06, objptr
00d50     3C E4 85 F1 | 	sub	objptr, #60
00d54     F0 28 16 F2 | 	cmp	local06, #240 wc
00d58     9C 00 90 CD |  if_b	jmp	#LR__0022
00d5c     50 00 00 FF 
00d60     10 E5 05 F1 | 	add	objptr, ##41232
00d64     F2 2C 02 FB | 	rdlong	local08, objptr
00d68     50 00 00 FF 
00d6c     10 E5 85 F1 | 	sub	objptr, ##41232
00d70     16 2B 02 F6 | 	mov	local07, local08
00d74     01 2A 0E F2 | 	cmp	local07, #1 wz
00d78     7C 00 90 5D |  if_ne	jmp	#LR__0022
00d7c     04 00 00 FF 
00d80     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00d84     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00d88     04 00 00 FF 
00d8c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00d90     56 00 00 FF 
00d94     44 2A 06 F6 | 	mov	local07, ##44100
00d98     0E 2C C6 F9 | 	decod	local08, #14
00d9c     00 2E 06 F6 | 	mov	local09, #0
00da0     03 00 00 FF 
00da4     DE 30 06 F6 | 	mov	local10, ##1758
00da8     00 12 06 F6 | 	mov	arg01, #0
00dac     56 00 00 FF 
00db0     44 16 06 F6 | 	mov	arg03, ##44100
00db4     0E 18 C6 F9 | 	decod	arg04, #14
00db8     00 1A 06 F6 | 	mov	arg05, #0
00dbc     03 00 00 FF 
00dc0     DE 1C 06 F6 | 	mov	arg06, ##1758
00dc4     0B 00 00 FF 
00dc8     CC E4 05 F1 | 	add	objptr, ##5836
00dcc     E8 F4 B1 FD | 	call	#_audio096_spin2_play
00dd0     0B 00 00 FF 
00dd4     CC E4 85 F1 | 	sub	objptr, ##5836
00dd8     2C 13 06 F6 | 	mov	arg01, #300
00ddc     3C FC B1 FD | 	call	#__system___waitms
00de0     00 12 06 F6 | 	mov	arg01, #0
00de4     0B 00 00 FF 
00de8     CC E4 05 F1 | 	add	objptr, ##5836
00dec     38 F6 B1 FD | 	call	#_audio096_spin2_stop
00df0     0B 00 00 FF 
00df4     CC E4 85 F1 | 	sub	objptr, ##5836
00df8                 | LR__0022
00df8                 | '   if key4=77 then i=127 : do: 															' end
00df8     4D 32 0E F2 | 	cmp	local11, #77 wz
00dfc     90 00 90 5D |  if_ne	jmp	#LR__0027
00e00     7F 38 06 F6 | 	mov	local14, #127
00e04                 | LR__0023
00e04                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e04     3E E4 05 F1 | 	add	objptr, #62
00e08     F2 2E C2 FA | 	rdbyte	local09, objptr
00e0c     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e10     16 31 02 F6 | 	mov	local10, local08
00e14     80 30 06 FA | 	mul	local10, #128
00e18     3A E4 85 F1 | 	sub	objptr, #58
00e1c     F2 3A 02 FB | 	rdlong	local15, objptr
00e20     04 E4 85 F1 | 	sub	objptr, #4
00e24     1D 2B 02 F6 | 	mov	local07, local15
00e28     18 2B 02 F1 | 	add	local07, local10
00e2c     1C 2B 02 F1 | 	add	local07, local14
00e30     15 13 02 F6 | 	mov	arg01, local07
00e34     C8 C7 B1 FD | 	call	#_pspeek
00e38     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e3c     20 28 0E F2 | 	cmp	local06, #32 wz
00e40     2C 00 90 AD |  if_e	jmp	#LR__0025
00e44                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e44     7F 38 56 F2 | 	cmps	local14, #127 wc
00e48     18 00 90 3D |  if_ae	jmp	#LR__0024
00e4c     1C 2B 02 F6 | 	mov	local07, local14
00e50     01 2A 66 F0 | 	shl	local07, #1
00e54     15 13 02 F6 | 	mov	arg01, local07
00e58     02 12 06 F1 | 	add	arg01, #2
00e5c     4C E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e60     2C 00 90 FD | 	jmp	#LR__0026
00e64                 | LR__0024
00e64     FE 12 06 F6 | 	mov	arg01, #254
00e68     40 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e6c     20 00 90 FD | 	jmp	#LR__0026
00e70                 | LR__0025
00e70     01 38 86 F1 | 	sub	local14, #1
00e74     37 00 00 FF 
00e78     34 E4 05 F1 | 	add	objptr, ##28212
00e7c     F2 28 02 FB | 	rdlong	local06, objptr
00e80     37 00 00 FF 
00e84     34 E4 85 F1 | 	sub	objptr, ##28212
00e88     14 39 0A F2 | 	cmp	local14, local06 wz
00e8c     74 FF 9F 5D |  if_ne	jmp	#LR__0023
00e90                 | LR__0026
00e90                 | LR__0027
00e90                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00e90     37 00 00 FF 
00e94     34 E4 05 F1 | 	add	objptr, ##28212
00e98     F2 34 02 FB | 	rdlong	local12, objptr
00e9c     37 00 00 FF 
00ea0     34 E4 85 F1 | 	sub	objptr, ##28212
00ea4     1A 29 02 F6 | 	mov	local06, local12
00ea8     14 39 0A F2 | 	cmp	local14, local06 wz
00eac     2C 00 90 5D |  if_ne	jmp	#LR__0028
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 2C 02 FB | 	rdlong	local08, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     16 2B 02 F6 | 	mov	local07, local08
00ec8     15 35 02 F6 | 	mov	local12, local07
00ecc     01 34 66 F0 | 	shl	local12, #1
00ed0     1A 29 02 F6 | 	mov	local06, local12
00ed4     14 13 02 F6 | 	mov	arg01, local06
00ed8     D0 E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00edc                 | LR__0028
00edc                 | '     
00edc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00edc     4A 32 0E F2 | 	cmp	local11, #74 wz
00ee0     2C 00 90 5D |  if_ne	jmp	#LR__0029
00ee4     37 00 00 FF 
00ee8     34 E4 05 F1 | 	add	objptr, ##28212
00eec     F2 2C 02 FB | 	rdlong	local08, objptr
00ef0     37 00 00 FF 
00ef4     34 E4 85 F1 | 	sub	objptr, ##28212
00ef8     16 2B 02 F6 | 	mov	local07, local08
00efc     15 35 02 F6 | 	mov	local12, local07
00f00     01 34 66 F0 | 	shl	local12, #1
00f04     1A 29 02 F6 | 	mov	local06, local12
00f08     14 13 02 F6 | 	mov	arg01, local06
00f0c     9C E0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f10                 | LR__0029
00f10                 | '   if key4=75 then v.setcursory(0)														' pgup
00f10     4B 32 0E F2 | 	cmp	local11, #75 wz
00f14     00 28 06 A6 |  if_e	mov	local06, #0
00f18     00 12 06 A6 |  if_e	mov	arg01, #0
00f1c     BC E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f20                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f20     4E 32 0E F2 | 	cmp	local11, #78 wz
00f24     24 28 06 A6 |  if_e	mov	local06, #36
00f28     24 12 06 A6 |  if_e	mov	arg01, #36
00f2c     AC E0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f30                 | '   if key4=76 then 																' del
00f30     4C 32 0E F2 | 	cmp	local11, #76 wz
00f34     AC 01 90 5D |  if_ne	jmp	#LR__0034
00f38                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f38     3E E4 05 F1 | 	add	objptr, #62
00f3c     F2 2A C2 FA | 	rdbyte	local07, objptr
00f40     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f44     80 2C 06 FA | 	mul	local08, #128
00f48     3A E4 85 F1 | 	sub	objptr, #58
00f4c     F2 4A 02 FB | 	rdlong	local23, objptr
00f50     25 39 02 F6 | 	mov	local14, local23
00f54     16 39 02 F1 | 	add	local14, local08
00f58     38 E4 05 F1 | 	add	objptr, #56
00f5c     F2 30 E2 FA | 	rdword	local10, objptr
00f60     18 45 52 F6 | 	abs	local20, local10 wc
00f64     01 44 46 F0 | 	shr	local20, #1
00f68     22 39 82 F3 | 	sumc	local14, local20
00f6c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00f70     80 2A 06 FA | 	mul	local07, #128
00f74     3C E4 85 F1 | 	sub	objptr, #60
00f78     15 4B 02 F1 | 	add	local23, local07
00f7c     80 4A 06 F1 | 	add	local23, #128
00f80                 | LR__0030
00f80     25 39 52 F2 | 	cmps	local14, local23 wc
00f84     20 00 90 3D |  if_ae	jmp	#LR__0031
00f88     1C 13 02 F6 | 	mov	arg01, local14
00f8c     01 12 06 F1 | 	add	arg01, #1
00f90     6C C6 B1 FD | 	call	#_pspeek
00f94     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00f98     1C 13 02 F6 | 	mov	arg01, local14
00f9c     18 C6 B1 FD | 	call	#_pspoke
00fa0     01 38 06 F1 | 	add	local14, #1
00fa4     D8 FF 9F FD | 	jmp	#LR__0030
00fa8                 | LR__0031
00fa8     3E E4 05 F1 | 	add	objptr, #62
00fac     F2 2E C2 FA | 	rdbyte	local09, objptr
00fb0     80 2E 06 FA | 	mul	local09, #128
00fb4     3A E4 85 F1 | 	sub	objptr, #58
00fb8     F2 12 02 FB | 	rdlong	arg01, objptr
00fbc     04 E4 85 F1 | 	sub	objptr, #4
00fc0     17 13 02 F1 | 	add	arg01, local09
00fc4     7F 12 06 F1 | 	add	arg01, #127
00fc8     20 14 06 F6 | 	mov	arg02, #32
00fcc     E8 C5 B1 FD | 	call	#_pspoke
00fd0     51 00 00 FF 
00fd4     E4 E5 05 F1 | 	add	objptr, ##41956
00fd8     F2 00 68 FC | 	wrlong	#0, objptr
00fdc     51 00 00 FF 
00fe0     A6 E5 85 F1 | 	sub	objptr, ##41894
00fe4     F2 34 C2 FA | 	rdbyte	local12, objptr
00fe8     1A 2D E2 F8 | 	getbyte	local08, local12, #0
00fec     80 2C 06 FA | 	mul	local08, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 2E 02 FB | 	rdlong	local09, objptr
00ff8     17 39 02 F6 | 	mov	local14, local09
00ffc     16 39 02 F1 | 	add	local14, local08
01000     38 E4 05 F1 | 	add	objptr, #56
01004     F2 3A E2 FA | 	rdword	local15, objptr
01008     1D 31 32 F9 | 	getword	local10, local15, #0
0100c     18 45 52 F6 | 	abs	local20, local10 wc
01010     01 44 46 F0 | 	shr	local20, #1
01014     22 45 82 F6 | 	negc	local20, local20
01018     22 39 02 F1 | 	add	local14, local20
0101c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01020     14 2B 02 F6 | 	mov	local07, local06
01024     80 2A 06 FA | 	mul	local07, #128
01028     17 2D 02 F6 | 	mov	local08, local09
0102c     3C E4 85 F1 | 	sub	objptr, #60
01030     16 4D 02 F6 | 	mov	local24, local08
01034     15 4D 02 F1 | 	add	local24, local07
01038     80 4C 06 F1 | 	add	local24, #128
0103c                 | LR__0032
0103c     26 39 52 F2 | 	cmps	local14, local24 wc
01040     A0 00 90 3D |  if_ae	jmp	#LR__0033
01044     3C E4 05 F1 | 	add	objptr, #60
01048     F2 28 E2 FA | 	rdword	local06, objptr
0104c     51 00 00 FF 
01050     A8 E5 05 F1 | 	add	objptr, ##41896
01054     F2 2C 02 FB | 	rdlong	local08, objptr
01058     01 2C 66 F0 | 	shl	local08, #1
0105c     16 29 02 F1 | 	add	local06, local08
01060     51 00 00 FF 
01064     A6 E5 85 F1 | 	sub	objptr, ##41894
01068     F2 34 C2 FA | 	rdbyte	local12, objptr
0106c     3E E4 85 F1 | 	sub	objptr, #62
01070     10 34 06 FA | 	mul	local12, #16
01074     04 34 06 F1 | 	add	local12, #4
01078     1C 13 02 F6 | 	mov	arg01, local14
0107c     80 C5 B1 FD | 	call	#_pspeek
01080     FD 2A E2 F8 | 	getbyte	local07, result1, #0
01084     41 E4 05 F1 | 	add	objptr, #65
01088     F2 2C 02 FB | 	rdlong	local08, objptr
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 30 02 FB | 	rdlong	local10, objptr
01094     45 E4 85 F1 | 	sub	objptr, #69
01098     18 2F 02 F6 | 	mov	local09, local10
0109c     14 13 02 F6 | 	mov	arg01, local06
010a0     1A 15 02 F6 | 	mov	arg02, local12
010a4     15 17 02 F6 | 	mov	arg03, local07
010a8     16 19 02 F6 | 	mov	arg04, local08
010ac     17 1B 02 F6 | 	mov	arg05, local09
010b0     58 DD B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010b4     51 00 00 FF 
010b8     E4 E5 05 F1 | 	add	objptr, ##41956
010bc     F2 28 02 FB | 	rdlong	local06, objptr
010c0     01 28 06 F1 | 	add	local06, #1
010c4     F2 28 62 FC | 	wrlong	local06, objptr
010c8     51 00 00 FF 
010cc     E4 E5 85 F1 | 	sub	objptr, ##41956
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     1C 35 02 F6 | 	mov	local12, local14
010d8     01 34 06 F1 | 	add	local12, #1
010dc     1A 39 02 F6 | 	mov	local14, local12
010e0     58 FF 9F FD | 	jmp	#LR__0032
010e4                 | LR__0033
010e4                 | LR__0034
010e4                 | ' 
010e4                 | '   if key4 = 42 then  'backspace
010e4     2A 32 0E F2 | 	cmp	local11, #42 wz
010e8     14 02 90 5D |  if_ne	jmp	#LR__0040
010ec                 | '     if v.cursor_x>editor_spaces*2 then 
010ec     3C E4 05 F1 | 	add	objptr, #60
010f0     F2 34 E2 FA | 	rdword	local12, objptr
010f4     1A 29 32 F9 | 	getword	local06, local12, #0
010f8     36 00 00 FF 
010fc     F8 E5 05 F1 | 	add	objptr, ##28152
01100     F2 2E 02 FB | 	rdlong	local09, objptr
01104     37 00 00 FF 
01108     34 E4 85 F1 | 	sub	objptr, ##28212
0110c     17 2D 02 F6 | 	mov	local08, local09
01110     16 2B 02 F6 | 	mov	local07, local08
01114     01 2A 66 F0 | 	shl	local07, #1
01118     15 29 5A F2 | 	cmps	local06, local07 wcz
0111c     C8 01 90 ED |  if_be	jmp	#LR__0038
01120     3C E4 05 F1 | 	add	objptr, #60
01124     F2 12 E2 FA | 	rdword	arg01, objptr
01128     02 12 86 F1 | 	sub	arg01, #2
0112c     02 E4 05 F1 | 	add	objptr, #2
01130     F2 14 C2 FA | 	rdbyte	arg02, objptr
01134     3E E4 85 F1 | 	sub	objptr, #62
01138     34 DE B1 FD | 	call	#_hg010b_spin2_setcursorpos
0113c                 | '       position v.cursor_x-2,v.cursor_y
0113c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0113c     3E E4 05 F1 | 	add	objptr, #62
01140     F2 2A C2 FA | 	rdbyte	local07, objptr
01144     15 2D E2 F8 | 	getbyte	local08, local07, #0
01148     80 2C 06 FA | 	mul	local08, #128
0114c     3A E4 85 F1 | 	sub	objptr, #58
01150     F2 4E 02 FB | 	rdlong	local25, objptr
01154     27 39 02 F6 | 	mov	local14, local25
01158     16 39 02 F1 | 	add	local14, local08
0115c     38 E4 05 F1 | 	add	objptr, #56
01160     F2 30 E2 FA | 	rdword	local10, objptr
01164     18 45 52 F6 | 	abs	local20, local10 wc
01168     01 44 46 F0 | 	shr	local20, #1
0116c     22 39 82 F3 | 	sumc	local14, local20
01170     15 2B E2 F8 | 	getbyte	local07, local07, #0
01174     80 2A 06 FA | 	mul	local07, #128
01178     3C E4 85 F1 | 	sub	objptr, #60
0117c     15 4F 02 F1 | 	add	local25, local07
01180     80 4E 06 F1 | 	add	local25, #128
01184                 | LR__0035
01184     27 39 52 F2 | 	cmps	local14, local25 wc
01188     20 00 90 3D |  if_ae	jmp	#LR__0036
0118c     1C 13 02 F6 | 	mov	arg01, local14
01190     01 12 06 F1 | 	add	arg01, #1
01194     68 C4 B1 FD | 	call	#_pspeek
01198     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
0119c     1C 13 02 F6 | 	mov	arg01, local14
011a0     14 C4 B1 FD | 	call	#_pspoke
011a4     01 38 06 F1 | 	add	local14, #1
011a8     D8 FF 9F FD | 	jmp	#LR__0035
011ac                 | LR__0036
011ac     3E E4 05 F1 | 	add	objptr, #62
011b0     F2 2E C2 FA | 	rdbyte	local09, objptr
011b4     80 2E 06 FA | 	mul	local09, #128
011b8     3A E4 85 F1 | 	sub	objptr, #58
011bc     F2 12 02 FB | 	rdlong	arg01, objptr
011c0     04 E4 85 F1 | 	sub	objptr, #4
011c4     17 13 02 F1 | 	add	arg01, local09
011c8     7F 12 06 F1 | 	add	arg01, #127
011cc     20 14 06 F6 | 	mov	arg02, #32
011d0     E4 C3 B1 FD | 	call	#_pspoke
011d4     51 00 00 FF 
011d8     E4 E5 05 F1 | 	add	objptr, ##41956
011dc     F2 00 68 FC | 	wrlong	#0, objptr
011e0     51 00 00 FF 
011e4     A6 E5 85 F1 | 	sub	objptr, ##41894
011e8     F2 34 C2 FA | 	rdbyte	local12, objptr
011ec     1A 2D E2 F8 | 	getbyte	local08, local12, #0
011f0     80 2C 06 FA | 	mul	local08, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 2E 02 FB | 	rdlong	local09, objptr
011fc     17 39 02 F6 | 	mov	local14, local09
01200     16 39 02 F1 | 	add	local14, local08
01204     38 E4 05 F1 | 	add	objptr, #56
01208     F2 3A E2 FA | 	rdword	local15, objptr
0120c     1D 31 32 F9 | 	getword	local10, local15, #0
01210     18 45 52 F6 | 	abs	local20, local10 wc
01214     01 44 46 F0 | 	shr	local20, #1
01218     22 45 82 F6 | 	negc	local20, local20
0121c     22 39 02 F1 | 	add	local14, local20
01220     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01224     14 2B 02 F6 | 	mov	local07, local06
01228     80 2A 06 FA | 	mul	local07, #128
0122c     17 2D 02 F6 | 	mov	local08, local09
01230     3C E4 85 F1 | 	sub	objptr, #60
01234     16 51 02 F6 | 	mov	local26, local08
01238     15 51 02 F1 | 	add	local26, local07
0123c     80 50 06 F1 | 	add	local26, #128
01240                 | LR__0037
01240     28 39 52 F2 | 	cmps	local14, local26 wc
01244     B8 00 90 3D |  if_ae	jmp	#LR__0039
01248     3C E4 05 F1 | 	add	objptr, #60
0124c     F2 28 E2 FA | 	rdword	local06, objptr
01250     51 00 00 FF 
01254     A8 E5 05 F1 | 	add	objptr, ##41896
01258     F2 2C 02 FB | 	rdlong	local08, objptr
0125c     01 2C 66 F0 | 	shl	local08, #1
01260     16 29 02 F1 | 	add	local06, local08
01264     51 00 00 FF 
01268     A6 E5 85 F1 | 	sub	objptr, ##41894
0126c     F2 34 C2 FA | 	rdbyte	local12, objptr
01270     3E E4 85 F1 | 	sub	objptr, #62
01274     10 34 06 FA | 	mul	local12, #16
01278     04 34 06 F1 | 	add	local12, #4
0127c     1C 13 02 F6 | 	mov	arg01, local14
01280     7C C3 B1 FD | 	call	#_pspeek
01284     FD 2A E2 F8 | 	getbyte	local07, result1, #0
01288     41 E4 05 F1 | 	add	objptr, #65
0128c     F2 2C 02 FB | 	rdlong	local08, objptr
01290     04 E4 05 F1 | 	add	objptr, #4
01294     F2 30 02 FB | 	rdlong	local10, objptr
01298     45 E4 85 F1 | 	sub	objptr, #69
0129c     18 2F 02 F6 | 	mov	local09, local10
012a0     14 13 02 F6 | 	mov	arg01, local06
012a4     1A 15 02 F6 | 	mov	arg02, local12
012a8     15 17 02 F6 | 	mov	arg03, local07
012ac     16 19 02 F6 | 	mov	arg04, local08
012b0     17 1B 02 F6 | 	mov	arg05, local09
012b4     54 DB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012b8     51 00 00 FF 
012bc     E4 E5 05 F1 | 	add	objptr, ##41956
012c0     F2 28 02 FB | 	rdlong	local06, objptr
012c4     01 28 06 F1 | 	add	local06, #1
012c8     F2 28 62 FC | 	wrlong	local06, objptr
012cc     51 00 00 FF 
012d0     E4 E5 85 F1 | 	sub	objptr, ##41956
012d4     1C 29 02 F6 | 	mov	local06, local14
012d8     1C 35 02 F6 | 	mov	local12, local14
012dc     01 34 06 F1 | 	add	local12, #1
012e0     1A 39 02 F6 | 	mov	local14, local12
012e4     58 FF 9F FD | 	jmp	#LR__0037
012e8                 | LR__0038
012e8     7F 01 00 FF 
012ec     DF 49 06 F6 | 	mov	local22, ##@LR__5028
012f0     04 28 06 F6 | 	mov	local06, #4
012f4     3C E4 05 F1 | 	add	objptr, #60
012f8     F2 08 58 FC | 	wrword	#4, objptr
012fc     3C E4 85 F1 | 	sub	objptr, #60
01300                 | LR__0039
01300                 | LR__0040
01300                 | ' 
01300                 | '   if key4=82 then 						' arrow up
01300     52 32 0E F2 | 	cmp	local11, #82 wz
01304     20 00 90 5D |  if_ne	jmp	#LR__0041
01308                 | ' return cursor_y
01308     3E E4 05 F1 | 	add	objptr, #62
0130c     F2 34 C2 FA | 	rdbyte	local12, objptr
01310     3E E4 85 F1 | 	sub	objptr, #62
01314     1A 53 02 F6 | 	mov	local27, local12
01318     01 52 86 F1 | 	sub	local27, #1
0131c     29 29 02 F6 | 	mov	local06, local27
01320     14 13 02 F6 | 	mov	arg01, local06
01324     B4 DC B1 FD | 	call	#_hg010b_spin2_setcursory
01328                 | LR__0041
01328                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01328     51 32 0E F2 | 	cmp	local11, #81 wz
0132c     24 00 90 5D |  if_ne	jmp	#LR__0042
01330                 | ' return cursor_y
01330     3E E4 05 F1 | 	add	objptr, #62
01334     F2 34 C2 FA | 	rdbyte	local12, objptr
01338     3E E4 85 F1 | 	sub	objptr, #62
0133c     1A 53 02 F6 | 	mov	local27, local12
01340     01 52 06 F1 | 	add	local27, #1
01344     24 52 36 F3 | 	fle	local27, #36 wc
01348     29 29 02 F6 | 	mov	local06, local27
0134c     14 13 02 F6 | 	mov	arg01, local06
01350     88 DC B1 FD | 	call	#_hg010b_spin2_setcursory
01354                 | LR__0042
01354                 | '   if key4=80 then
01354     50 32 0E F2 | 	cmp	local11, #80 wz
01358     44 00 90 5D |  if_ne	jmp	#LR__0043
0135c                 | ' return cursor_x
0135c     3C E4 05 F1 | 	add	objptr, #60
01360     F2 54 E2 FA | 	rdword	local28, objptr
01364     02 54 86 F1 | 	sub	local28, #2
01368                 | '     cx=v.getcursorx()-2 					' arrow left
01368                 | '     if cx<editor_spaces then cx=editor_spaces			
01368     36 00 00 FF 
0136c     F8 E5 05 F1 | 	add	objptr, ##28152
01370     F2 34 02 FB | 	rdlong	local12, objptr
01374     37 00 00 FF 
01378     34 E4 85 F1 | 	sub	objptr, ##28212
0137c     1A 55 52 F2 | 	cmps	local28, local12 wc
01380     37 00 00 CF 
01384     34 E4 05 C1 |  if_b	add	objptr, ##28212
01388     F2 54 02 CB |  if_b	rdlong	local28, objptr
0138c     37 00 00 CF 
01390     34 E4 85 C1 |  if_b	sub	objptr, ##28212
01394     2A 29 02 F6 | 	mov	local06, local28
01398     14 13 02 F6 | 	mov	arg01, local06
0139c     0C DC B1 FD | 	call	#_hg010b_spin2_setcursorx
013a0                 | LR__0043
013a0                 | '   if key4=79 then						' arrow right
013a0     4F 32 0E F2 | 	cmp	local11, #79 wz
013a4     20 00 90 5D |  if_ne	jmp	#LR__0044
013a8                 | ' return cursor_x
013a8     3C E4 05 F1 | 	add	objptr, #60
013ac     F2 54 E2 FA | 	rdword	local28, objptr
013b0     3C E4 85 F1 | 	sub	objptr, #60
013b4     02 54 06 F1 | 	add	local28, #2
013b8                 | '     cx=v.getcursorx()+2 
013b8                 | '     if cx>254  then cx=254 
013b8     FE 54 36 F3 | 	fle	local28, #254 wc
013bc     2A 29 02 F6 | 	mov	local06, local28
013c0     14 13 02 F6 | 	mov	arg01, local06
013c4     E4 DB B1 FD | 	call	#_hg010b_spin2_setcursorx
013c8                 | LR__0044
013c8                 | ' 
013c8                 | '   if key4=73 then 						' ins
013c8     49 32 0E F2 | 	cmp	local11, #73 wz
013cc     40 00 90 5D |  if_ne	jmp	#LR__0047
013d0     51 00 00 FF 
013d4     D8 E5 05 F1 | 	add	objptr, ##41944
013d8     F2 28 02 FB | 	rdlong	local06, objptr
013dc     14 35 22 F6 | 	not	local12, local06
013e0     F2 34 62 FC | 	wrlong	local12, objptr
013e4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
013e4     51 00 00 FF 
013e8     D8 E5 85 F1 | 	sub	objptr, ##41944
013ec     00 34 0E F2 | 	cmp	local12, #0 wz
013f0     10 00 90 AD |  if_e	jmp	#LR__0045
013f4     0E 28 06 F6 | 	mov	local06, #14
013f8     0E 12 06 F6 | 	mov	arg01, #14
013fc     30 CA B1 FD | 	call	#_hg010b_spin2_setcursorshape
01400     0C 00 90 FD | 	jmp	#LR__0046
01404                 | LR__0045
01404     00 28 06 F6 | 	mov	local06, #0
01408     00 12 06 F6 | 	mov	arg01, #0
0140c     20 CA B1 FD | 	call	#_hg010b_spin2_setcursorshape
01410                 | LR__0046
01410                 | LR__0047
01410     00 24 06 F6 | 	mov	local04, #0
01414     04 F4 9F FD | 	jmp	#LR__0001
01418                 | LR__0048
01418     A7 F0 03 F6 | 	mov	ptra, fp
0141c     B2 00 A0 FD | 	call	#popregs_
01420                 | _edit_ret
01420     2D 00 64 FD | 	ret
01424                 | 
01424                 | ' 
01424                 | ' ''-----------------------------------------------------------------------------------------------------------
01424                 | ' ' 					A housekeepeer.
01424                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01424                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01424                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01424                 | ' ''-----------------------------------------------------------------------------------------------------------
01424                 | ' 
01424                 | ' sub housekeeper
01424                 | _housekeeper
01424                 | ' 
01424                 | ' do
01424                 | LR__0050
01424                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01424     49 E4 05 F1 | 	add	objptr, #73
01428                 | LR__0051
01428     F2 12 02 FB | 	rdlong	arg01, objptr
0142c     01 12 0E F2 | 	cmp	arg01, #1 wz
01430     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01434     51 00 00 FF 
01438     5B E5 05 F1 | 	add	objptr, ##41819
0143c     F2 12 02 FB | 	rdlong	arg01, objptr
01440     01 12 06 F1 | 	add	arg01, #1
01444     F2 12 62 FC | 	wrlong	arg01, objptr
01448     51 00 00 FF 
0144c     A4 E5 85 F1 | 	sub	objptr, ##41892
01450     80 00 B0 FD | 	call	#_gethdi
01454     05 12 06 F6 | 	mov	arg01, #5
01458     C0 F5 B1 FD | 	call	#__system___waitms
0145c     51 00 00 FF 
01460     A4 E5 05 F1 | 	add	objptr, ##41892
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 06 F1 | 	add	arg01, #1
0146c     F2 12 62 FC | 	wrlong	arg01, objptr
01470     51 00 00 FF 
01474     A4 E5 85 F1 | 	sub	objptr, ##41892
01478     58 00 B0 FD | 	call	#_gethdi
0147c     05 12 06 F6 | 	mov	arg01, #5
01480     98 F5 B1 FD | 	call	#__system___waitms
01484     51 00 00 FF 
01488     A4 E5 05 F1 | 	add	objptr, ##41892
0148c     F2 12 02 FB | 	rdlong	arg01, objptr
01490     01 12 06 F1 | 	add	arg01, #1
01494     F2 12 62 FC | 	wrlong	arg01, objptr
01498     51 00 00 FF 
0149c     A4 E5 85 F1 | 	sub	objptr, ##41892
014a0     30 00 B0 FD | 	call	#_gethdi
014a4     05 12 06 F6 | 	mov	arg01, #5
014a8     70 F5 B1 FD | 	call	#__system___waitms
014ac     51 00 00 FF 
014b0     A4 E5 05 F1 | 	add	objptr, ##41892
014b4     F2 12 02 FB | 	rdlong	arg01, objptr
014b8     01 12 06 F1 | 	add	arg01, #1
014bc     F2 12 62 FC | 	wrlong	arg01, objptr
014c0     51 00 00 FF 
014c4     A4 E5 85 F1 | 	sub	objptr, ##41892
014c8     08 00 B0 FD | 	call	#_gethdi
014cc     54 FF 9F FD | 	jmp	#LR__0050
014d0                 | _housekeeper_ret
014d0     2D 00 64 FD | 	ret
014d4                 | 
014d4                 | ' 
014d4                 | ' '----------------------------------------------------------------------------------------------------------
014d4                 | ' ' gethdi is called from the houseekeeper to read HDI related values
014d4                 | ' '----------------------------------------------------------------------------------------------------------
014d4                 | ' 
014d4                 | ' sub gethdi
014d4                 | _gethdi
014d4     03 4A 05 F6 | 	mov	COUNT_, #3
014d8     A8 00 A0 FD | 	call	#pushregs_
014dc                 | '   x := mouse_xacc
014dc     14 00 00 FF 
014e0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
014e4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
014e8                 | '   y := mouse_yacc
014e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
014ec     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
014f0     51 00 00 FF 
014f4     1C E5 05 F1 | 	add	objptr, ##41756
014f8     F2 14 62 FC | 	wrlong	arg02, objptr
014fc     04 E4 05 F1 | 	add	objptr, #4
01500     F2 12 62 FC | 	wrlong	arg01, objptr
01504                 | '   x := 0
01504                 | '   y := mouse_zacc
01504     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01508     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
0150c     08 E4 05 F1 | 	add	objptr, #8
01510     F2 FA 61 FC | 	wrlong	result1, objptr
01514                 | '   return mouse_bstate&7
01514     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01518     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
0151c     14 00 00 FF 
01520     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01524     07 FA 05 F5 | 	and	result1, #7
01528     04 E4 85 F1 | 	sub	objptr, #4
0152c     F2 FA 61 FC | 	wrlong	result1, objptr
01530     51 00 00 FF 
01534     24 E5 85 F1 | 	sub	objptr, ##41764
01538     00 1E 06 F6 | 	mov	local01, #0
0153c                 | ' 
0153c                 | ' mousex,mousey=kbm.mouse_xy()
0153c                 | ' dummy,mousew=kbm.mouse_scroll()
0153c                 | ' mousek=kbm.mouse_buttons()
0153c                 | ' i=0:
0153c                 | ' for j=0 to 6
0153c     00 20 06 F6 | 	mov	local02, #0
01540                 | LR__0060
01540                 | '   if kbm.hidpad_id(j)>0 then
01540     10 13 02 F6 | 	mov	arg01, local02
01544     C8 EA B1 FD | 	call	#_usbnew_spin2_hidpad_id
01548     01 FA 55 F2 | 	cmps	result1, #1 wc
0154c     8C 00 90 CD |  if_b	jmp	#LR__0061
01550     10 13 02 F6 | 	mov	arg01, local02
01554     00 14 06 F6 | 	mov	arg02, #0
01558     18 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0155c     FD 22 02 F6 | 	mov	local03, result1
01560     10 13 02 F6 | 	mov	arg01, local02
01564     01 14 06 F6 | 	mov	arg02, #1
01568     08 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0156c     60 00 00 FF 
01570     00 22 06 F1 | 	add	local03, ##49152
01574     0F 22 46 F0 | 	shr	local03, #15
01578     01 14 06 F6 | 	mov	arg02, #1
0157c     11 15 02 F1 | 	add	arg02, local03
01580     60 00 00 FF 
01584     00 FA 05 F1 | 	add	result1, ##49152
01588     0F FA 45 F0 | 	shr	result1, #15
0158c     01 12 06 F6 | 	mov	arg01, #1
01590     FD 12 02 F1 | 	add	arg01, result1
01594     0F 23 02 F6 | 	mov	local03, local01
01598     02 22 66 F0 | 	shl	local03, #2
0159c     51 00 00 FF 
015a0     2C E5 05 F1 | 	add	objptr, ##41772
015a4     F2 22 02 F1 | 	add	local03, objptr
015a8     02 12 66 F0 | 	shl	arg01, #2
015ac     09 15 02 F1 | 	add	arg02, arg01
015b0     11 15 62 FC | 	wrlong	arg02, local03
015b4     0F 23 02 F6 | 	mov	local03, local01
015b8     02 22 66 F0 | 	shl	local03, #2
015bc     1C E4 05 F1 | 	add	objptr, #28
015c0     F2 22 02 F1 | 	add	local03, objptr
015c4     10 13 02 F6 | 	mov	arg01, local02
015c8     51 00 00 FF 
015cc     48 E5 85 F1 | 	sub	objptr, ##41800
015d0     6C EA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
015d4     11 FB 61 FC | 	wrlong	result1, local03
015d8     01 1E 06 F1 | 	add	local01, #1
015dc                 | LR__0061
015dc     01 20 06 F1 | 	add	local02, #1
015e0     07 20 16 F2 | 	cmp	local02, #7 wc
015e4     58 FF 9F CD |  if_b	jmp	#LR__0060
015e8     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
015ec                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
015ec                 | LR__0062
015ec     07 1E 16 F2 | 	cmp	local01, #7 wc
015f0     3C 00 90 3D |  if_ae	jmp	#LR__0064
015f4     0F 23 02 F6 | 	mov	local03, local01
015f8     02 22 66 F0 | 	shl	local03, #2
015fc     51 00 00 FF 
01600     2C E5 05 F1 | 	add	objptr, ##41772
01604     F2 22 02 F1 | 	add	local03, objptr
01608     11 01 68 FC | 	wrlong	#0, local03
0160c     0F 23 02 F6 | 	mov	local03, local01
01610     02 22 66 F0 | 	shl	local03, #2
01614     1C E4 05 F1 | 	add	objptr, #28
01618     F2 22 02 F1 | 	add	local03, objptr
0161c     11 01 68 FC | 	wrlong	#0, local03
01620     01 1E 06 F1 | 	add	local01, #1
01624     51 00 00 FF 
01628     48 E5 85 F1 | 	sub	objptr, ##41800
0162c     BC FF 9F FD | 	jmp	#LR__0062
01630                 | LR__0063
01630                 | LR__0064
01630     A7 F0 03 F6 | 	mov	ptra, fp
01634     B2 00 A0 FD | 	call	#popregs_
01638                 | _gethdi_ret
01638     2D 00 64 FD | 	ret
0163c                 | 
0163c                 | ' 
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' 
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' '
0163c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0163c                 | ' '
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' 
0163c                 | ' 
0163c                 | ' sub interpret
0163c                 | _interpret
0163c     2F 4A 05 F6 | 	mov	COUNT_, #47
01640     A8 00 A0 FD | 	call	#pushregs_
01644     01 00 00 FF 
01648     7C F0 07 F1 | 	add	ptra, ##636
0164c     37 00 00 FF 
01650     1C E4 05 F1 | 	add	objptr, ##28188
01654     F2 12 02 FB | 	rdlong	arg01, objptr
01658     37 00 00 FF 
0165c     1C E4 85 F1 | 	sub	objptr, ##28188
01660     D0 15 B2 FD | 	call	#__system__RTrim_S
01664     FD 12 02 F6 | 	mov	arg01, result1
01668     08 15 B2 FD | 	call	#__system__LTrim_S
0166c     37 00 00 FF 
01670     20 E4 05 F1 | 	add	objptr, ##28192
01674     F2 FA 61 FC | 	wrlong	result1, objptr
01678     04 E4 05 F1 | 	add	objptr, #4
0167c     FF FF FF FF 
01680     F2 FE 6B FC | 	wrlong	##-1, objptr
01684     1A 00 00 FF 
01688     9C E5 05 F1 | 	add	objptr, ##13724
0168c     F2 00 68 FC | 	wrlong	#0, objptr
01690     07 00 00 FF 
01694     44 E5 85 F1 | 	sub	objptr, ##3908
01698     F2 00 68 FC | 	wrlong	#0, objptr
0169c     4A 00 00 FF 
016a0     7C E4 85 F1 | 	sub	objptr, ##38012
016a4     00 1E 06 F6 | 	mov	local01, #0
016a8                 | LR__0070
016a8                 | ' 
016a8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016a8                 | ' 
016a8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016a8                 | ' 
016a8                 | ' 108 
016a8                 | ' for i=0 to 125: separators(i)=0 :next i
016a8     00 20 06 F6 | 	mov	local02, #0
016ac     38 4E 05 F1 | 	add	fp, #56
016b0     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016b4                 | LR__0071
016b4     10 23 02 F6 | 	mov	local03, local02
016b8     02 22 66 F0 | 	shl	local03, #2
016bc     A7 22 02 F1 | 	add	local03, fp
016c0     11 01 68 FC | 	wrlong	#0, local03
016c4     01 20 06 F1 | 	add	local02, #1
016c8     7E 20 56 F2 | 	cmps	local02, #126 wc
016cc     E4 FF 9F CD |  if_b	jmp	#LR__0071
016d0                 | LR__0072
016d0     38 4E 85 F1 | 	sub	fp, #56
016d4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
016d4     00 20 06 F6 | 	mov	local02, #0
016d8     35 00 00 FF 
016dc     0C E4 05 F1 | 	add	objptr, ##27148
016e0     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
016e4                 | LR__0073
016e4     10 25 02 F6 | 	mov	local04, local02
016e8     03 24 66 F0 | 	shl	local04, #3
016ec     F2 24 02 F1 | 	add	local04, objptr
016f0     7F 01 00 FF 
016f4     E0 17 06 F6 | 	mov	arg03, ##@LR__5029
016f8     12 17 62 FC | 	wrlong	arg03, local04
016fc     10 25 02 F6 | 	mov	local04, local02
01700     03 24 66 F0 | 	shl	local04, #3
01704     F2 26 02 F6 | 	mov	local05, objptr
01708     F2 24 02 F1 | 	add	local04, objptr
0170c     00 28 06 F6 | 	mov	local06, #0
01710     04 24 06 F1 | 	add	local04, #4
01714     12 01 68 FC | 	wrlong	#0, local04
01718     01 20 06 F1 | 	add	local02, #1
0171c     7E 20 56 F2 | 	cmps	local02, #126 wc
01720     C0 FF 9F CD |  if_b	jmp	#LR__0073
01724                 | LR__0074
01724     02 00 00 FF 
01728     10 E4 05 F1 | 	add	objptr, ##1040
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     37 00 00 FF 
01734     1C E4 85 F1 | 	sub	objptr, ##28188
01738     F8 14 B2 FD | 	call	#__system__RTrim_S
0173c     FD 12 02 F6 | 	mov	arg01, result1
01740     30 14 B2 FD | 	call	#__system__LTrim_S
01744     37 00 00 FF 
01748     1C E4 05 F1 | 	add	objptr, ##28188
0174c     F2 FA 61 FC | 	wrlong	result1, objptr
01750     7F 01 00 FF 
01754     E1 25 06 F6 | 	mov	local04, ##@LR__5030
01758     1A 00 00 FF 
0175c     D0 E5 05 F1 | 	add	objptr, ##13776
01760     F2 24 62 FC | 	wrlong	local04, objptr
01764     1A 00 00 FF 
01768     D0 E5 85 F1 | 	sub	objptr, ##13776
0176c     F2 12 02 FB | 	rdlong	arg01, objptr
01770     37 00 00 FF 
01774     1C E4 85 F1 | 	sub	objptr, ##28188
01778     09 2B 02 F6 | 	mov	local07, arg01
0177c     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01780                 | LR__0075
01780     15 FB C9 FA | 	rdbyte	result1, local07 wz
01784     01 2A 06 51 |  if_ne	add	local07, #1
01788     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
0178c                 | LR__0076
0178c     09 2B 8A F1 | 	sub	local07, arg01 wz
01790     51 00 00 FF 
01794     F0 E5 05 F1 | 	add	objptr, ##41968
01798     F2 2A 62 FC | 	wrlong	local07, objptr
0179c                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
0179c     51 00 00 FF 
017a0     F0 E5 85 F1 | 	sub	objptr, ##41968
017a4     38 24 90 AD |  if_e	jmp	#LR__0196
017a8     00 2C 06 F6 | 	mov	local08, #0
017ac                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017ac                 | ' for i=1 to len(line$)
017ac     01 20 06 F6 | 	mov	local02, #1
017b0     37 00 00 FF 
017b4     1C E4 05 F1 | 	add	objptr, ##28188
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     37 00 00 FF 
017c0     1C E4 85 F1 | 	sub	objptr, ##28188
017c4     09 2B 02 F6 | 	mov	local07, arg01
017c8     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
017cc                 | LR__0077
017cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017d0     01 2A 06 51 |  if_ne	add	local07, #1
017d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
017d8                 | LR__0078
017d8     09 2B 82 F1 | 	sub	local07, arg01
017dc     15 2F 02 F6 | 	mov	local09, local07
017e0     01 2E 06 F1 | 	add	local09, #1
017e4                 | LR__0079
017e4     17 21 52 F2 | 	cmps	local02, local09 wc
017e8     AC 00 90 3D |  if_ae	jmp	#LR__0081
017ec                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     10 15 02 F6 | 	mov	arg02, local02
01804     01 16 06 F6 | 	mov	arg03, #1
01808     B0 10 B2 FD | 	call	#__system__Mid_S
0180c     FD 12 02 F6 | 	mov	arg01, result1
01810     7F 01 00 FF 
01814     E2 15 06 F6 | 	mov	arg02, ##@LR__5031
01818     34 EF B1 FD | 	call	#__system___string_cmp
0181c     00 FA 0D F2 | 	cmp	result1, #0 wz
01820     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01824     01 2C 06 A6 |  if_e	mov	local08, #1
01828     3C 00 90 AD |  if_e	jmp	#LR__0080
0182c     37 00 00 FF 
01830     1C E4 05 F1 | 	add	objptr, ##28188
01834     F2 12 02 FB | 	rdlong	arg01, objptr
01838     37 00 00 FF 
0183c     1C E4 85 F1 | 	sub	objptr, ##28188
01840     10 15 02 F6 | 	mov	arg02, local02
01844     01 16 06 F6 | 	mov	arg03, #1
01848     70 10 B2 FD | 	call	#__system__Mid_S
0184c     FD 12 02 F6 | 	mov	arg01, result1
01850     7F 01 00 FF 
01854     E4 15 06 F6 | 	mov	arg02, ##@LR__5032
01858     F4 EE B1 FD | 	call	#__system___string_cmp
0185c     00 FA 0D F2 | 	cmp	result1, #0 wz
01860     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01864     00 2C 06 A6 |  if_e	mov	local08, #0
01868                 | LR__0080
01868     10 25 02 F6 | 	mov	local04, local02
0186c     03 24 66 F0 | 	shl	local04, #3
01870     35 00 00 FF 
01874     0C E4 05 F1 | 	add	objptr, ##27148
01878     F2 26 02 F6 | 	mov	local05, objptr
0187c     F2 24 02 F1 | 	add	local04, objptr
01880     04 24 06 F1 | 	add	local04, #4
01884     12 2D 62 FC | 	wrlong	local08, local04
01888     01 20 06 F1 | 	add	local02, #1
0188c     35 00 00 FF 
01890     0C E4 85 F1 | 	sub	objptr, ##27148
01894     4C FF 9F FD | 	jmp	#LR__0079
01898                 | LR__0081
01898     01 20 06 F6 | 	mov	local02, #1
0189c                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
0189c                 | LR__0082
0189c     37 00 00 FF 
018a0     1C E4 05 F1 | 	add	objptr, ##28188
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     1C E4 85 F1 | 	sub	objptr, ##28188
018b0     10 15 02 F6 | 	mov	arg02, local02
018b4     01 16 06 F6 | 	mov	arg03, #1
018b8     00 10 B2 FD | 	call	#__system__Mid_S
018bc     FD 12 02 F6 | 	mov	arg01, result1
018c0     7F 01 00 FF 
018c4     E6 31 06 F6 | 	mov	local10, ##@LR__5033
018c8     18 15 02 F6 | 	mov	arg02, local10
018cc     80 EE B1 FD | 	call	#__system___string_cmp
018d0     00 FA 0D F2 | 	cmp	result1, #0 wz
018d4     34 00 90 5D |  if_ne	jmp	#LR__0083
018d8     10 27 02 F6 | 	mov	local05, local02
018dc     03 26 66 F0 | 	shl	local05, #3
018e0     35 00 00 FF 
018e4     0C E4 05 F1 | 	add	objptr, ##27148
018e8     F2 28 02 F6 | 	mov	local06, objptr
018ec     F2 26 02 F1 | 	add	local05, objptr
018f0     04 26 06 F1 | 	add	local05, #4
018f4     13 33 02 FB | 	rdlong	local11, local05
018f8     04 26 86 F1 | 	sub	local05, #4
018fc     19 35 0A F6 | 	mov	local12, local11 wz
01900     35 00 00 FF 
01904     0C E4 85 F1 | 	sub	objptr, ##27148
01908     24 00 90 AD |  if_e	jmp	#LR__0084
0190c                 | LR__0083
0190c     51 00 00 FF 
01910     F0 E5 05 F1 | 	add	objptr, ##41968
01914     F2 36 02 FB | 	rdlong	local13, objptr
01918     51 00 00 FF 
0191c     F0 E5 85 F1 | 	sub	objptr, ##41968
01920     1B 39 02 F6 | 	mov	local14, local13
01924     1C 21 52 F2 | 	cmps	local02, local14 wc
01928     01 20 06 C1 |  if_b	add	local02, #1
0192c     6C FF 9F CD |  if_b	jmp	#LR__0082
01930                 | LR__0084
01930                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01930     51 00 00 FF 
01934     F0 E5 05 F1 | 	add	objptr, ##41968
01938     F2 24 02 FB | 	rdlong	local04, objptr
0193c     51 00 00 FF 
01940     F0 E5 85 F1 | 	sub	objptr, ##41968
01944     12 21 52 F2 | 	cmps	local02, local04 wc
01948     A8 00 90 3D |  if_ae	jmp	#LR__0087
0194c     37 00 00 FF 
01950     1C E4 05 F1 | 	add	objptr, ##28188
01954     F2 28 02 FB | 	rdlong	local06, objptr
01958     37 00 00 FF 
0195c     1C E4 85 F1 | 	sub	objptr, ##28188
01960     14 13 02 F6 | 	mov	arg01, local06
01964     09 2B 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
0196c                 | LR__0085
0196c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 2A 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01978                 | LR__0086
01978     09 2B 82 F1 | 	sub	local07, arg01
0197c     15 27 02 F6 | 	mov	local05, local07
01980     13 15 02 F6 | 	mov	arg02, local05
01984     10 15 82 F1 | 	sub	arg02, local02
01988     14 13 02 F6 | 	mov	arg01, local06
0198c     9C 0E B2 FD | 	call	#__system__Right_S
01990     FD 12 02 F6 | 	mov	arg01, result1
01994     9C 12 B2 FD | 	call	#__system__RTrim_S
01998     FD 12 02 F6 | 	mov	arg01, result1
0199c     D4 11 B2 FD | 	call	#__system__LTrim_S
019a0     51 00 00 FF 
019a4     F4 E5 05 F1 | 	add	objptr, ##41972
019a8     F2 FA 61 FC | 	wrlong	result1, objptr
019ac     1A 00 00 FF 
019b0     D8 E5 85 F1 | 	sub	objptr, ##13784
019b4     F2 12 02 FB | 	rdlong	arg01, objptr
019b8     37 00 00 FF 
019bc     1C E4 85 F1 | 	sub	objptr, ##28188
019c0     01 20 86 F1 | 	sub	local02, #1
019c4     10 15 02 F6 | 	mov	arg02, local02
019c8     D8 0D B2 FD | 	call	#__system__Left_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     60 12 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     98 11 B2 FD | 	call	#__system__LTrim_S
019dc     37 00 00 FF 
019e0     1C E4 05 F1 | 	add	objptr, ##28188
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     37 00 00 FF 
019ec     1C E4 85 F1 | 	sub	objptr, ##28188
019f0     1C 00 90 FD | 	jmp	#LR__0088
019f4                 | LR__0087
019f4     7F 01 00 FF 
019f8     E8 25 06 F6 | 	mov	local04, ##@LR__5034
019fc     51 00 00 FF 
01a00     F4 E5 05 F1 | 	add	objptr, ##41972
01a04     F2 24 62 FC | 	wrlong	local04, objptr
01a08     51 00 00 FF 
01a0c     F4 E5 85 F1 | 	sub	objptr, ##41972
01a10                 | LR__0088
01a10                 | ' 
01a10                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a10     37 00 00 FF 
01a14     24 E4 05 F1 | 	add	objptr, ##28196
01a18     F2 24 02 FB | 	rdlong	local04, objptr
01a1c     37 00 00 FF 
01a20     24 E4 85 F1 | 	sub	objptr, ##28196
01a24     FF FF 7F FF 
01a28     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a2c     40 00 90 5D |  if_ne	jmp	#LR__0089
01a30     51 00 00 FF 
01a34     F4 E5 05 F1 | 	add	objptr, ##41972
01a38     F2 12 02 FB | 	rdlong	arg01, objptr
01a3c     51 00 00 FF 
01a40     F4 E5 85 F1 | 	sub	objptr, ##41972
01a44     7F 01 00 FF 
01a48     E9 29 06 F6 | 	mov	local06, ##@LR__5035
01a4c     14 15 02 F6 | 	mov	arg02, local06
01a50     FC EC B1 FD | 	call	#__system___string_cmp
01a54     00 FA 0D F2 | 	cmp	result1, #0 wz
01a58     37 00 00 5F 
01a5c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a60     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01a64     37 00 00 5F 
01a68     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01a6c     08 01 90 5D |  if_ne	jmp	#LR__0093
01a70                 | LR__0089
01a70                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01a70     37 00 00 FF 
01a74     24 E4 05 F1 | 	add	objptr, ##28196
01a78     F2 24 02 FB | 	rdlong	local04, objptr
01a7c     37 00 00 FF 
01a80     24 E4 85 F1 | 	sub	objptr, ##28196
01a84     FF FF 7F FF 
01a88     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a8c     3C 00 90 5D |  if_ne	jmp	#LR__0090
01a90     51 00 00 FF 
01a94     F4 E5 05 F1 | 	add	objptr, ##41972
01a98     F2 12 02 FB | 	rdlong	arg01, objptr
01a9c     51 00 00 FF 
01aa0     F4 E5 85 F1 | 	sub	objptr, ##41972
01aa4     7F 01 00 FF 
01aa8     EA 15 06 F6 | 	mov	arg02, ##@LR__5036
01aac     A0 EC B1 FD | 	call	#__system___string_cmp
01ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab4     37 00 00 AF 
01ab8     24 E4 05 A1 |  if_e	add	objptr, ##28196
01abc     F2 06 68 AC |  if_e	wrlong	#3, objptr
01ac0     37 00 00 AF 
01ac4     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01ac8     AC 00 90 AD |  if_e	jmp	#LR__0093
01acc                 | LR__0090
01acc                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01acc     37 00 00 FF 
01ad0     24 E4 05 F1 | 	add	objptr, ##28196
01ad4     F2 24 02 FB | 	rdlong	local04, objptr
01ad8     37 00 00 FF 
01adc     24 E4 85 F1 | 	sub	objptr, ##28196
01ae0     04 24 0E F2 | 	cmp	local04, #4 wz
01ae4     3C 00 90 5D |  if_ne	jmp	#LR__0091
01ae8     51 00 00 FF 
01aec     F4 E5 05 F1 | 	add	objptr, ##41972
01af0     F2 12 02 FB | 	rdlong	arg01, objptr
01af4     51 00 00 FF 
01af8     F4 E5 85 F1 | 	sub	objptr, ##41972
01afc     7F 01 00 FF 
01b00     EB 15 06 F6 | 	mov	arg02, ##@LR__5037
01b04     48 EC B1 FD | 	call	#__system___string_cmp
01b08     00 FA 0D F2 | 	cmp	result1, #0 wz
01b0c     37 00 00 5F 
01b10     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b14     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b18     37 00 00 5F 
01b1c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b20     54 00 90 5D |  if_ne	jmp	#LR__0093
01b24                 | LR__0091
01b24                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b24     37 00 00 FF 
01b28     24 E4 05 F1 | 	add	objptr, ##28196
01b2c     F2 24 02 FB | 	rdlong	local04, objptr
01b30     37 00 00 FF 
01b34     24 E4 85 F1 | 	sub	objptr, ##28196
01b38     04 24 0E F2 | 	cmp	local04, #4 wz
01b3c     38 00 90 5D |  if_ne	jmp	#LR__0092
01b40     51 00 00 FF 
01b44     F4 E5 05 F1 | 	add	objptr, ##41972
01b48     F2 12 02 FB | 	rdlong	arg01, objptr
01b4c     51 00 00 FF 
01b50     F4 E5 85 F1 | 	sub	objptr, ##41972
01b54     7F 01 00 FF 
01b58     EC 15 06 F6 | 	mov	arg02, ##@LR__5038
01b5c     F0 EB B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 AF 
01b68     24 E4 05 A1 |  if_e	add	objptr, ##28196
01b6c     F2 04 68 AC |  if_e	wrlong	#2, objptr
01b70     37 00 00 AF 
01b74     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b78                 | LR__0092
01b78                 | LR__0093
01b78     38 4E 05 F1 | 	add	fp, #56
01b7c     A7 00 68 FC | 	wrlong	#0, fp
01b80     38 4E 85 F1 | 	sub	fp, #56
01b84     00 20 06 F6 | 	mov	local02, #0
01b88     01 3A 06 F6 | 	mov	local15, #1
01b8c                 | ' 
01b8c                 | ' ' 1b: find separators
01b8c                 | ' 
01b8c                 | ' 107
01b8c                 | ' separators(0)=0
01b8c                 | ' i=0: j=1
01b8c                 | ' do: 
01b8c                 | LR__0094
01b8c     01 20 06 F1 | 	add	local02, #1
01b90     37 00 00 FF 
01b94     1C E4 05 F1 | 	add	objptr, ##28188
01b98     F2 12 02 FB | 	rdlong	arg01, objptr
01b9c     37 00 00 FF 
01ba0     1C E4 85 F1 | 	sub	objptr, ##28188
01ba4     10 15 02 F6 | 	mov	arg02, local02
01ba8     01 16 06 F6 | 	mov	arg03, #1
01bac     0C 0D B2 FD | 	call	#__system__Mid_S
01bb0     FD 3C 02 F6 | 	mov	local16, result1
01bb4                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bb4     1E 13 02 F6 | 	mov	arg01, local16
01bb8     04 28 B0 FD | 	call	#_isseparator
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     1C 00 90 AD |  if_e	jmp	#LR__0095
01bc4     1D 23 02 F6 | 	mov	local03, local15
01bc8     02 22 66 F0 | 	shl	local03, #2
01bcc     38 4E 05 F1 | 	add	fp, #56
01bd0     A7 22 02 F1 | 	add	local03, fp
01bd4     11 21 62 FC | 	wrlong	local02, local03
01bd8     01 3A 06 F1 | 	add	local15, #1
01bdc     38 4E 85 F1 | 	sub	fp, #56
01be0                 | LR__0095
01be0     51 00 00 FF 
01be4     F0 E5 05 F1 | 	add	objptr, ##41968
01be8     F2 24 02 FB | 	rdlong	local04, objptr
01bec     51 00 00 FF 
01bf0     F0 E5 85 F1 | 	sub	objptr, ##41968
01bf4     12 21 5A F2 | 	cmps	local02, local04 wcz
01bf8     90 FF 9F ED |  if_be	jmp	#LR__0094
01bfc     1D 23 02 F6 | 	mov	local03, local15
01c00     02 22 66 F0 | 	shl	local03, #2
01c04     38 4E 05 F1 | 	add	fp, #56
01c08     A7 30 02 F6 | 	mov	local10, fp
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     00 3E 06 F6 | 	mov	local17, #0
01c18                 | ' for i=0 to j-1 
01c18     00 20 06 F6 | 	mov	local02, #0
01c1c     1D 41 02 F6 | 	mov	local18, local15
01c20     38 4E 85 F1 | 	sub	fp, #56
01c24                 | LR__0096
01c24     20 21 52 F2 | 	cmps	local02, local18 wc
01c28     50 01 90 3D |  if_ae	jmp	#LR__0100
01c2c     10 23 02 F6 | 	mov	local03, local02
01c30     02 22 66 F0 | 	shl	local03, #2
01c34     38 4E 05 F1 | 	add	fp, #56
01c38     A7 22 02 F1 | 	add	local03, fp
01c3c     11 27 02 FB | 	rdlong	local05, local03
01c40     51 00 00 FF 
01c44     FC E5 05 F1 | 	add	objptr, ##41980
01c48     F2 26 62 FC | 	wrlong	local05, objptr
01c4c     10 23 02 F6 | 	mov	local03, local02
01c50     01 22 06 F1 | 	add	local03, #1
01c54     02 22 66 F0 | 	shl	local03, #2
01c58     A7 30 02 F6 | 	mov	local10, fp
01c5c     A7 22 02 F1 | 	add	local03, fp
01c60     11 27 02 FB | 	rdlong	local05, local03
01c64     04 E4 05 F1 | 	add	objptr, #4
01c68     F2 26 62 FC | 	wrlong	local05, objptr
01c6c                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01c6c     04 E4 85 F1 | 	sub	objptr, #4
01c70     F2 24 02 FB | 	rdlong	local04, objptr
01c74     51 00 00 FF 
01c78     FC E5 85 F1 | 	sub	objptr, ##41980
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     38 4E 85 F1 | 	sub	fp, #56
01c84     68 00 90 CD |  if_b	jmp	#LR__0098
01c88     37 00 00 FF 
01c8c     1C E4 05 F1 | 	add	objptr, ##28188
01c90     F2 12 02 FB | 	rdlong	arg01, objptr
01c94     1A 00 00 FF 
01c98     E0 E5 05 F1 | 	add	objptr, ##13792
01c9c     F2 14 02 FB | 	rdlong	arg02, objptr
01ca0     51 00 00 FF 
01ca4     FC E5 85 F1 | 	sub	objptr, ##41980
01ca8     01 16 06 F6 | 	mov	arg03, #1
01cac     0C 0C B2 FD | 	call	#__system__Mid_S
01cb0     FD 42 02 F6 | 	mov	local19, result1
01cb4     7F 01 00 FF 
01cb8     ED 15 06 F6 | 	mov	arg02, ##@LR__5039
01cbc     21 13 02 F6 | 	mov	arg01, local19
01cc0     8C EA B1 FD | 	call	#__system___string_cmp
01cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cc8     24 00 90 AD |  if_e	jmp	#LR__0097
01ccc     1F 31 02 F6 | 	mov	local10, local17
01cd0     03 30 66 F0 | 	shl	local10, #3
01cd4     35 00 00 FF 
01cd8     0C E4 05 F1 | 	add	objptr, ##27148
01cdc     F2 30 02 F1 | 	add	local10, objptr
01ce0     18 43 62 FC | 	wrlong	local19, local10
01ce4     01 3E 06 F1 | 	add	local17, #1
01ce8     35 00 00 FF 
01cec     0C E4 85 F1 | 	sub	objptr, ##27148
01cf0                 | LR__0097
01cf0                 | LR__0098
01cf0     37 00 00 FF 
01cf4     1C E4 05 F1 | 	add	objptr, ##28188
01cf8     F2 12 02 FB | 	rdlong	arg01, objptr
01cfc     1A 00 00 FF 
01d00     E0 E5 05 F1 | 	add	objptr, ##13792
01d04     F2 14 02 FB | 	rdlong	arg02, objptr
01d08     01 14 06 F1 | 	add	arg02, #1
01d0c     04 E4 05 F1 | 	add	objptr, #4
01d10     F2 16 02 FB | 	rdlong	arg03, objptr
01d14     04 E4 85 F1 | 	sub	objptr, #4
01d18     F2 32 02 FB | 	rdlong	local11, objptr
01d1c     51 00 00 FF 
01d20     FC E5 85 F1 | 	sub	objptr, ##41980
01d24     19 35 02 F6 | 	mov	local12, local11
01d28     1A 17 82 F1 | 	sub	arg03, local12
01d2c     01 16 86 F1 | 	sub	arg03, #1
01d30     88 0B B2 FD | 	call	#__system__Mid_S
01d34     FD 42 02 F6 | 	mov	local19, result1
01d38                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d38     7F 01 00 FF 
01d3c     EE 15 06 F6 | 	mov	arg02, ##@LR__5040
01d40     21 13 02 F6 | 	mov	arg01, local19
01d44     08 EA B1 FD | 	call	#__system___string_cmp
01d48     00 FA 0D F2 | 	cmp	result1, #0 wz
01d4c     24 00 90 AD |  if_e	jmp	#LR__0099
01d50     1F 31 02 F6 | 	mov	local10, local17
01d54     03 30 66 F0 | 	shl	local10, #3
01d58     35 00 00 FF 
01d5c     0C E4 05 F1 | 	add	objptr, ##27148
01d60     F2 30 02 F1 | 	add	local10, objptr
01d64     18 43 62 FC | 	wrlong	local19, local10
01d68     01 3E 06 F1 | 	add	local17, #1
01d6c     35 00 00 FF 
01d70     0C E4 85 F1 | 	sub	objptr, ##27148
01d74                 | LR__0099
01d74     01 20 06 F1 | 	add	local02, #1
01d78     A8 FE 9F FD | 	jmp	#LR__0096
01d7c                 | LR__0100
01d7c                 | ' 
01d7c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01d7c                 | ' 
01d7c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01d7c     37 00 00 FF 
01d80     24 E4 05 F1 | 	add	objptr, ##28196
01d84     F2 24 0A FB | 	rdlong	local04, objptr wz
01d88     37 00 00 FF 
01d8c     24 E4 85 F1 | 	sub	objptr, ##28196
01d90     37 00 00 5F 
01d94     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d98     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01d9c     37 00 00 5F 
01da0     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01da4     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01da8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01dac     35 00 00 FF 
01db0     0C E4 05 F1 | 	add	objptr, ##27148
01db4     F2 32 02 FB | 	rdlong	local11, objptr
01db8     35 00 00 FF 
01dbc     0C E4 85 F1 | 	sub	objptr, ##27148
01dc0     19 13 02 F6 | 	mov	arg01, local11
01dc4     C0 44 B0 FD | 	call	#_isdec
01dc8     FD 34 02 F6 | 	mov	local12, result1
01dcc     1A 29 22 F6 | 	not	local06, local12
01dd0     00 28 0E F2 | 	cmp	local06, #0 wz
01dd4     8C 00 90 AD |  if_e	jmp	#LR__0103
01dd8     1F 21 02 F6 | 	mov	local02, local17
01ddc     35 00 00 FF 
01de0     0C E4 05 F1 | 	add	objptr, ##27148
01de4     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01de8                 | LR__0101
01de8     10 27 02 F6 | 	mov	local05, local02
01dec     01 26 86 F1 | 	sub	local05, #1
01df0     03 26 66 F0 | 	shl	local05, #3
01df4     F2 26 02 F1 | 	add	local05, objptr
01df8     13 25 02 FB | 	rdlong	local04, local05
01dfc     10 29 02 F6 | 	mov	local06, local02
01e00     01 28 86 F1 | 	sub	local06, #1
01e04     03 28 66 F0 | 	shl	local06, #3
01e08     F2 28 02 F1 | 	add	local06, objptr
01e0c     04 28 06 F1 | 	add	local06, #4
01e10     14 23 02 FB | 	rdlong	local03, local06
01e14     10 29 02 F6 | 	mov	local06, local02
01e18     03 28 66 F0 | 	shl	local06, #3
01e1c     F2 34 02 F6 | 	mov	local12, objptr
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     14 25 62 FC | 	wrlong	local04, local06
01e28     10 33 02 F6 | 	mov	local11, local02
01e2c     19 37 02 F6 | 	mov	local13, local11
01e30     03 36 66 F0 | 	shl	local13, #3
01e34     F2 36 02 F1 | 	add	local13, objptr
01e38     04 36 06 F1 | 	add	local13, #4
01e3c     1B 23 62 FC | 	wrlong	local03, local13
01e40     01 20 86 F1 | 	sub	local02, #1
01e44     01 20 56 F2 | 	cmps	local02, #1 wc
01e48     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e4c                 | LR__0102
01e4c     7F 01 00 FF 
01e50     EF 25 06 F6 | 	mov	local04, ##@LR__5041
01e54     F2 24 62 FC | 	wrlong	local04, objptr
01e58     35 00 00 FF 
01e5c     0C E4 85 F1 | 	sub	objptr, ##27148
01e60     01 3E 06 F1 | 	add	local17, #1
01e64                 | LR__0103
01e64     00 20 06 F6 | 	mov	local02, #0
01e68                 | ' 
01e68                 | ' ' 1e : find strings
01e68                 | ' 
01e68                 | ' i=0
01e68                 | ' do
01e68                 | LR__0104
01e68                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01e68     10 27 02 F6 | 	mov	local05, local02
01e6c     03 26 66 F0 | 	shl	local05, #3
01e70     35 00 00 FF 
01e74     0C E4 05 F1 | 	add	objptr, ##27148
01e78     F2 26 02 F1 | 	add	local05, objptr
01e7c     13 13 02 FB | 	rdlong	arg01, local05
01e80     7F 01 00 FF 
01e84     F1 15 06 F6 | 	mov	arg02, ##@LR__5042
01e88     35 00 00 FF 
01e8c     0C E4 85 F1 | 	sub	objptr, ##27148
01e90     BC E8 B1 FD | 	call	#__system___string_cmp
01e94     00 FA 0D F2 | 	cmp	result1, #0 wz
01e98     01 20 06 51 |  if_ne	add	local02, #1
01e9c     20 01 90 5D |  if_ne	jmp	#LR__0109
01ea0     10 45 02 F6 | 	mov	local20, local02
01ea4                 | LR__0105
01ea4     10 31 02 F6 | 	mov	local10, local02
01ea8     01 30 06 F1 | 	add	local10, #1
01eac     03 30 66 F0 | 	shl	local10, #3
01eb0     35 00 00 FF 
01eb4     0C E4 05 F1 | 	add	objptr, ##27148
01eb8     F2 30 02 F1 | 	add	local10, objptr
01ebc     18 43 02 FB | 	rdlong	local19, local10
01ec0     22 31 02 F6 | 	mov	local10, local20
01ec4     03 30 66 F0 | 	shl	local10, #3
01ec8     F2 30 02 F1 | 	add	local10, objptr
01ecc     22 33 02 F6 | 	mov	local11, local20
01ed0     19 39 02 F6 | 	mov	local14, local11
01ed4     03 38 66 F0 | 	shl	local14, #3
01ed8     F2 38 02 F1 | 	add	local14, objptr
01edc     1C 13 02 FB | 	rdlong	arg01, local14
01ee0     21 35 02 F6 | 	mov	local12, local19
01ee4     1A 15 02 F6 | 	mov	arg02, local12
01ee8     35 00 00 FF 
01eec     0C E4 85 F1 | 	sub	objptr, ##27148
01ef0     90 E8 B1 FD | 	call	#__system___string_concat
01ef4     18 FB 61 FC | 	wrlong	result1, local10
01ef8     10 3B 02 F6 | 	mov	local15, local02
01efc     01 3A 06 F1 | 	add	local15, #1
01f00     1F 47 02 F6 | 	mov	local21, local17
01f04     01 46 06 F1 | 	add	local21, #1
01f08     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f0c                 | LR__0106
01f0c     23 3B 52 F2 | 	cmps	local15, local21 wc
01f10     70 00 90 3D |  if_ae	jmp	#LR__0108
01f14     1D 27 02 F6 | 	mov	local05, local15
01f18     01 26 06 F1 | 	add	local05, #1
01f1c     03 26 66 F0 | 	shl	local05, #3
01f20     35 00 00 FF 
01f24     0C E4 05 F1 | 	add	objptr, ##27148
01f28     F2 26 02 F1 | 	add	local05, objptr
01f2c     13 25 02 FB | 	rdlong	local04, local05
01f30     1D 29 02 F6 | 	mov	local06, local15
01f34     01 28 06 F1 | 	add	local06, #1
01f38     03 28 66 F0 | 	shl	local06, #3
01f3c     F2 28 02 F1 | 	add	local06, objptr
01f40     04 28 06 F1 | 	add	local06, #4
01f44     14 23 02 FB | 	rdlong	local03, local06
01f48     1D 29 02 F6 | 	mov	local06, local15
01f4c     03 28 66 F0 | 	shl	local06, #3
01f50     F2 34 02 F6 | 	mov	local12, objptr
01f54     F2 28 02 F1 | 	add	local06, objptr
01f58     14 25 62 FC | 	wrlong	local04, local06
01f5c     1D 33 02 F6 | 	mov	local11, local15
01f60     19 37 02 F6 | 	mov	local13, local11
01f64     03 36 66 F0 | 	shl	local13, #3
01f68     F2 36 02 F1 | 	add	local13, objptr
01f6c     04 36 06 F1 | 	add	local13, #4
01f70     1B 23 62 FC | 	wrlong	local03, local13
01f74     01 3A 06 F1 | 	add	local15, #1
01f78     35 00 00 FF 
01f7c     0C E4 85 F1 | 	sub	objptr, ##27148
01f80     88 FF 9F FD | 	jmp	#LR__0106
01f84                 | LR__0107
01f84                 | LR__0108
01f84     01 3E 86 F1 | 	sub	local17, #1
01f88     7F 01 00 FF 
01f8c     F3 15 06 F6 | 	mov	arg02, ##@LR__5043
01f90     21 13 02 F6 | 	mov	arg01, local19
01f94     B8 E7 B1 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fa0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fa4                 | '   if p$<>"""" then k+=1:i+=1
01fa4     7F 01 00 FF 
01fa8     F5 15 06 F6 | 	mov	arg02, ##@LR__5044
01fac     21 13 02 F6 | 	mov	arg01, local19
01fb0     9C E7 B1 FD | 	call	#__system___string_cmp
01fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fb8     01 3E 06 51 |  if_ne	add	local17, #1
01fbc     01 20 06 51 |  if_ne	add	local02, #1
01fc0                 | LR__0109
01fc0     1F 21 52 F2 | 	cmps	local02, local17 wc
01fc4     A0 FE 9F CD |  if_b	jmp	#LR__0104
01fc8     00 20 06 F6 | 	mov	local02, #0
01fcc                 | ' 
01fcc                 | ' ' 1f : concatenate strings if "" detected between
01fcc                 | '  
01fcc                 | ' i=0
01fcc                 | ' do
01fcc                 | LR__0110
01fcc                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01fcc     10 27 02 F6 | 	mov	local05, local02
01fd0     03 26 66 F0 | 	shl	local05, #3
01fd4     35 00 00 FF 
01fd8     0C E4 05 F1 | 	add	objptr, ##27148
01fdc     F2 28 02 F6 | 	mov	local06, objptr
01fe0     F2 26 02 F1 | 	add	local05, objptr
01fe4     13 13 02 FB | 	rdlong	arg01, local05
01fe8     01 14 06 F6 | 	mov	arg02, #1
01fec     35 00 00 FF 
01ff0     0C E4 85 F1 | 	sub	objptr, ##27148
01ff4     34 08 B2 FD | 	call	#__system__Right_S
01ff8     FD 12 02 F6 | 	mov	arg01, result1
01ffc     7F 01 00 FF 
02000     F7 15 06 F6 | 	mov	arg02, ##@LR__5045
02004     48 E7 B1 FD | 	call	#__system___string_cmp
02008     00 FA 0D F2 | 	cmp	result1, #0 wz
0200c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02010     10 29 02 F6 | 	mov	local06, local02
02014     01 28 06 F1 | 	add	local06, #1
02018     03 28 66 F0 | 	shl	local06, #3
0201c     35 00 00 FF 
02020     0C E4 05 F1 | 	add	objptr, ##27148
02024     F2 34 02 F6 | 	mov	local12, objptr
02028     F2 28 02 F1 | 	add	local06, objptr
0202c     14 13 02 FB | 	rdlong	arg01, local06
02030     01 14 06 F6 | 	mov	arg02, #1
02034     35 00 00 FF 
02038     0C E4 85 F1 | 	sub	objptr, ##27148
0203c     64 07 B2 FD | 	call	#__system__Left_S
02040     FD 12 02 F6 | 	mov	arg01, result1
02044     7F 01 00 FF 
02048     F9 15 06 F6 | 	mov	arg02, ##@LR__5046
0204c     00 E7 B1 FD | 	call	#__system___string_cmp
02050     00 FA 0D F2 | 	cmp	result1, #0 wz
02054     34 01 90 5D |  if_ne	jmp	#LR__0116
02058     10 31 02 F6 | 	mov	local10, local02
0205c     03 30 66 F0 | 	shl	local10, #3
02060     35 00 00 FF 
02064     0C E4 05 F1 | 	add	objptr, ##27148
02068     F2 30 02 F1 | 	add	local10, objptr
0206c     10 39 02 F6 | 	mov	local14, local02
02070     03 38 66 F0 | 	shl	local14, #3
02074     F2 38 02 F1 | 	add	local14, objptr
02078     1C 29 02 FB | 	rdlong	local06, local14
0207c     10 37 02 F6 | 	mov	local13, local02
02080     01 36 06 F1 | 	add	local13, #1
02084     03 36 66 F0 | 	shl	local13, #3
02088     F2 36 02 F1 | 	add	local13, objptr
0208c     1B 35 02 FB | 	rdlong	local12, local13
02090     10 49 02 F6 | 	mov	local22, local02
02094     01 48 06 F1 | 	add	local22, #1
02098     24 4B 02 F6 | 	mov	local23, local22
0209c     03 4A 66 F0 | 	shl	local23, #3
020a0     F2 4C 02 F6 | 	mov	local24, objptr
020a4     F2 4A 02 F1 | 	add	local23, objptr
020a8     25 13 02 FB | 	rdlong	arg01, local23
020ac     35 00 00 FF 
020b0     0C E4 85 F1 | 	sub	objptr, ##27148
020b4     09 2B 02 F6 | 	mov	local07, arg01
020b8     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020bc                 | LR__0111
020bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
020c0     01 2A 06 51 |  if_ne	add	local07, #1
020c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0112
020c8     09 2B 82 F1 | 	sub	local07, arg01
020cc     15 33 02 F6 | 	mov	local11, local07
020d0     01 32 86 F1 | 	sub	local11, #1
020d4     1A 13 02 F6 | 	mov	arg01, local12
020d8     19 15 02 F6 | 	mov	arg02, local11
020dc     4C 07 B2 FD | 	call	#__system__Right_S
020e0     FD 34 02 F6 | 	mov	local12, result1
020e4     14 13 02 F6 | 	mov	arg01, local06
020e8     1A 15 02 F6 | 	mov	arg02, local12
020ec     94 E6 B1 FD | 	call	#__system___string_concat
020f0     FD 28 02 F6 | 	mov	local06, result1
020f4     18 29 62 FC | 	wrlong	local06, local10
020f8                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
020f8     10 3B 02 F6 | 	mov	local15, local02
020fc     01 3A 06 F1 | 	add	local15, #1
02100     1F 4F 02 F6 | 	mov	local25, local17
02104     01 4E 06 F1 | 	add	local25, #1
02108     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0210c                 | LR__0113
0210c     27 3B 52 F2 | 	cmps	local15, local25 wc
02110     70 00 90 3D |  if_ae	jmp	#LR__0115
02114     1D 27 02 F6 | 	mov	local05, local15
02118     01 26 06 F1 | 	add	local05, #1
0211c     03 26 66 F0 | 	shl	local05, #3
02120     35 00 00 FF 
02124     0C E4 05 F1 | 	add	objptr, ##27148
02128     F2 26 02 F1 | 	add	local05, objptr
0212c     13 25 02 FB | 	rdlong	local04, local05
02130     1D 29 02 F6 | 	mov	local06, local15
02134     01 28 06 F1 | 	add	local06, #1
02138     03 28 66 F0 | 	shl	local06, #3
0213c     F2 28 02 F1 | 	add	local06, objptr
02140     04 28 06 F1 | 	add	local06, #4
02144     14 23 02 FB | 	rdlong	local03, local06
02148     1D 29 02 F6 | 	mov	local06, local15
0214c     03 28 66 F0 | 	shl	local06, #3
02150     F2 34 02 F6 | 	mov	local12, objptr
02154     F2 28 02 F1 | 	add	local06, objptr
02158     14 25 62 FC | 	wrlong	local04, local06
0215c     1D 33 02 F6 | 	mov	local11, local15
02160     19 37 02 F6 | 	mov	local13, local11
02164     03 36 66 F0 | 	shl	local13, #3
02168     F2 36 02 F1 | 	add	local13, objptr
0216c     04 36 06 F1 | 	add	local13, #4
02170     1B 23 62 FC | 	wrlong	local03, local13
02174     01 3A 06 F1 | 	add	local15, #1
02178     35 00 00 FF 
0217c     0C E4 85 F1 | 	sub	objptr, ##27148
02180     88 FF 9F FD | 	jmp	#LR__0113
02184                 | LR__0114
02184                 | LR__0115
02184     01 20 86 F1 | 	sub	local02, #1
02188     01 3E 86 F1 | 	sub	local17, #1
0218c                 | LR__0116
0218c     01 20 06 F1 | 	add	local02, #1
02190     1F 21 52 F2 | 	cmps	local02, local17 wc
02194     34 FE 9F CD |  if_b	jmp	#LR__0110
02198     00 20 06 F6 | 	mov	local02, #0
0219c                 | '  
0219c                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0219c                 | '  
0219c                 | ' i=0 
0219c                 | ' do
0219c                 | LR__0117
0219c     10 31 02 F6 | 	mov	local10, local02
021a0     03 30 66 F0 | 	shl	local10, #3
021a4     35 00 00 FF 
021a8     0C E4 05 F1 | 	add	objptr, ##27148
021ac     F2 30 02 F1 | 	add	local10, objptr
021b0     18 51 02 FB | 	rdlong	local26, local10
021b4     10 31 02 F6 | 	mov	local10, local02
021b8     01 30 06 F1 | 	add	local10, #1
021bc     03 30 66 F0 | 	shl	local10, #3
021c0     F2 30 02 F1 | 	add	local10, objptr
021c4     18 53 02 FB | 	rdlong	local27, local10
021c8                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
021c8                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
021c8     7F 01 00 FF 
021cc     FB 15 06 F6 | 	mov	arg02, ##@LR__5047
021d0     28 13 02 F6 | 	mov	arg01, local26
021d4     35 00 00 FF 
021d8     0C E4 85 F1 | 	sub	objptr, ##27148
021dc     70 E5 B1 FD | 	call	#__system___string_cmp
021e0     00 FA 0D F2 | 	cmp	result1, #0 wz
021e4     A8 00 90 AD |  if_e	jmp	#LR__0118
021e8     7F 01 00 FF 
021ec     FD 15 06 F6 | 	mov	arg02, ##@LR__5048
021f0     28 13 02 F6 | 	mov	arg01, local26
021f4     58 E5 B1 FD | 	call	#__system___string_cmp
021f8     FD 22 0A F6 | 	mov	local03, result1 wz
021fc     90 00 90 AD |  if_e	jmp	#LR__0118
02200     7F 01 00 FF 
02204     FF 29 06 F6 | 	mov	local06, ##@LR__5049
02208     28 13 02 F6 | 	mov	arg01, local26
0220c     14 15 02 F6 | 	mov	arg02, local06
02210     3C E5 B1 FD | 	call	#__system___string_cmp
02214     00 FA 0D F2 | 	cmp	result1, #0 wz
02218     74 00 90 AD |  if_e	jmp	#LR__0118
0221c     80 01 00 FF 
02220     01 34 06 F6 | 	mov	local12, ##@LR__5050
02224     28 13 02 F6 | 	mov	arg01, local26
02228     1A 15 02 F6 | 	mov	arg02, local12
0222c     20 E5 B1 FD | 	call	#__system___string_cmp
02230     00 FA 0D F2 | 	cmp	result1, #0 wz
02234     58 00 90 AD |  if_e	jmp	#LR__0118
02238     80 01 00 FF 
0223c     03 32 06 F6 | 	mov	local11, ##@LR__5051
02240     19 35 02 F6 | 	mov	local12, local11
02244     28 13 02 F6 | 	mov	arg01, local26
02248     1A 15 02 F6 | 	mov	arg02, local12
0224c     00 E5 B1 FD | 	call	#__system___string_cmp
02250     FD 28 0A F6 | 	mov	local06, result1 wz
02254     38 00 90 AD |  if_e	jmp	#LR__0118
02258     80 01 00 FF 
0225c     05 32 06 F6 | 	mov	local11, ##@LR__5052
02260     28 13 02 F6 | 	mov	arg01, local26
02264     19 15 02 F6 | 	mov	arg02, local11
02268     E4 E4 B1 FD | 	call	#__system___string_cmp
0226c     FD 34 0A F6 | 	mov	local12, result1 wz
02270     1C 00 90 AD |  if_e	jmp	#LR__0118
02274     80 01 00 FF 
02278     07 38 06 F6 | 	mov	local14, ##@LR__5053
0227c     28 13 02 F6 | 	mov	arg01, local26
02280     1C 15 02 F6 | 	mov	arg02, local14
02284     C8 E4 B1 FD | 	call	#__system___string_cmp
02288     FD 32 0A F6 | 	mov	local11, result1 wz
0228c     20 00 90 5D |  if_ne	jmp	#LR__0119
02290                 | LR__0118
02290     80 01 00 FF 
02294     09 54 06 F6 | 	mov	local28, ##@LR__5054
02298     2A 37 02 F6 | 	mov	local13, local28
0229c     29 13 02 F6 | 	mov	arg01, local27
022a0     1B 15 02 F6 | 	mov	arg02, local13
022a4     A8 E4 B1 FD | 	call	#__system___string_cmp
022a8     FD 38 0A F6 | 	mov	local14, result1 wz
022ac     B8 00 90 AD |  if_e	jmp	#LR__0122
022b0                 | LR__0119
022b0     80 01 00 FF 
022b4     0B 54 06 F6 | 	mov	local28, ##@LR__5055
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     2A 15 02 F6 | 	mov	arg02, local28
022c0     8C E4 B1 FD | 	call	#__system___string_cmp
022c4     FD 36 0A F6 | 	mov	local13, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0120
022cc     80 01 00 FF 
022d0     0D 4A 06 F6 | 	mov	local23, ##@LR__5056
022d4     25 49 02 F6 | 	mov	local22, local23
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     24 15 02 F6 | 	mov	arg02, local22
022e0     6C E4 B1 FD | 	call	#__system___string_cmp
022e4     FD 54 0A F6 | 	mov	local28, result1 wz
022e8     7C 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0120
022ec     80 01 00 FF 
022f0     0F 4A 06 F6 | 	mov	local23, ##@LR__5057
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     25 15 02 F6 | 	mov	arg02, local23
022fc     50 E4 B1 FD | 	call	#__system___string_cmp
02300     FD 48 0A F6 | 	mov	local22, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0121
02308     80 01 00 FF 
0230c     11 56 06 F6 | 	mov	local29, ##@LR__5058
02310     2B 4D 02 F6 | 	mov	local24, local29
02314     29 13 02 F6 | 	mov	arg01, local27
02318     26 15 02 F6 | 	mov	arg02, local24
0231c     30 E4 B1 FD | 	call	#__system___string_cmp
02320     FD 4A 0A F6 | 	mov	local23, result1 wz
02324     40 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0121
02328     80 01 00 FF 
0232c     13 58 06 F6 | 	mov	local30, ##@LR__5059
02330     2C 57 02 F6 | 	mov	local29, local30
02334     28 13 02 F6 | 	mov	arg01, local26
02338     2B 15 02 F6 | 	mov	arg02, local29
0233c     10 E4 B1 FD | 	call	#__system___string_cmp
02340     FD 4C 0A F6 | 	mov	local24, result1 wz
02344     F0 00 90 5D |  if_ne	jmp	#LR__0126
02348     80 01 00 FF 
0234c     15 5A 06 F6 | 	mov	local31, ##@LR__5060
02350     2D 59 02 F6 | 	mov	local30, local31
02354     29 13 02 F6 | 	mov	arg01, local27
02358     2C 15 02 F6 | 	mov	arg02, local30
0235c     F0 E3 B1 FD | 	call	#__system___string_cmp
02360     FD 56 0A F6 | 	mov	local29, result1 wz
02364     D0 00 90 5D |  if_ne	jmp	#LR__0126
02368                 | LR__0122
02368     10 31 02 F6 | 	mov	local10, local02
0236c     03 30 66 F0 | 	shl	local10, #3
02370     35 00 00 FF 
02374     0C E4 05 F1 | 	add	objptr, ##27148
02378     F2 30 02 F1 | 	add	local10, objptr
0237c     29 35 02 F6 | 	mov	local12, local27
02380     28 13 02 F6 | 	mov	arg01, local26
02384     1A 15 02 F6 | 	mov	arg02, local12
02388     35 00 00 FF 
0238c     0C E4 85 F1 | 	sub	objptr, ##27148
02390     F0 E3 B1 FD | 	call	#__system___string_concat
02394     18 FB 61 FC | 	wrlong	result1, local10
02398                 | '     lparts(i).part$=s1$+s2$
02398                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02398     10 3B 02 F6 | 	mov	local15, local02
0239c     01 3A 06 F1 | 	add	local15, #1
023a0     1F 5D 02 F6 | 	mov	local32, local17
023a4     01 5C 06 F1 | 	add	local32, #1
023a8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023ac                 | LR__0123
023ac     2E 3B 52 F2 | 	cmps	local15, local32 wc
023b0     7C 00 90 3D |  if_ae	jmp	#LR__0125
023b4     1D 27 02 F6 | 	mov	local05, local15
023b8     01 26 06 F1 | 	add	local05, #1
023bc     03 26 66 F0 | 	shl	local05, #3
023c0     35 00 00 FF 
023c4     0C E4 05 F1 | 	add	objptr, ##27148
023c8     F2 26 02 F1 | 	add	local05, objptr
023cc     13 25 02 FB | 	rdlong	local04, local05
023d0     1D 29 02 F6 | 	mov	local06, local15
023d4     01 28 06 F1 | 	add	local06, #1
023d8     03 28 66 F0 | 	shl	local06, #3
023dc     F2 28 02 F1 | 	add	local06, objptr
023e0     04 28 06 F1 | 	add	local06, #4
023e4     14 23 02 FB | 	rdlong	local03, local06
023e8     1D 29 02 F6 | 	mov	local06, local15
023ec     03 28 66 F0 | 	shl	local06, #3
023f0     F2 34 02 F6 | 	mov	local12, objptr
023f4     F2 28 02 F1 | 	add	local06, objptr
023f8     14 25 62 FC | 	wrlong	local04, local06
023fc     1D 33 02 F6 | 	mov	local11, local15
02400     19 39 02 F6 | 	mov	local14, local11
02404     1C 37 02 F6 | 	mov	local13, local14
02408     03 36 66 F0 | 	shl	local13, #3
0240c     F2 54 02 F6 | 	mov	local28, objptr
02410     F2 36 02 F1 | 	add	local13, objptr
02414     04 36 06 F1 | 	add	local13, #4
02418     1B 23 62 FC | 	wrlong	local03, local13
0241c     04 36 86 F1 | 	sub	local13, #4
02420     01 3A 06 F1 | 	add	local15, #1
02424     35 00 00 FF 
02428     0C E4 85 F1 | 	sub	objptr, ##27148
0242c     7C FF 9F FD | 	jmp	#LR__0123
02430                 | LR__0124
02430                 | LR__0125
02430     01 20 86 F1 | 	sub	local02, #1
02434     01 3E 86 F1 | 	sub	local17, #1
02438                 | LR__0126
02438     01 20 06 F1 | 	add	local02, #1
0243c     1F 21 52 F2 | 	cmps	local02, local17 wc
02440     58 FD 9F CD |  if_b	jmp	#LR__0117
02444                 | '  
02444                 | ' ' 1h : now remove parts that are spaces
02444                 | ' 
02444                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02444     00 20 06 F6 | 	mov	local02, #0
02448     1F 5F 02 F6 | 	mov	local33, local17
0244c     01 5E 06 F1 | 	add	local33, #1
02450                 | LR__0127
02450     2F 21 52 F2 | 	cmps	local02, local33 wc
02454     50 00 90 3D |  if_ae	jmp	#LR__0128
02458     10 31 02 F6 | 	mov	local10, local02
0245c     03 30 66 F0 | 	shl	local10, #3
02460     35 00 00 FF 
02464     0C E4 05 F1 | 	add	objptr, ##27148
02468     F2 30 02 F1 | 	add	local10, objptr
0246c     10 35 02 F6 | 	mov	local12, local02
02470     1A 33 02 F6 | 	mov	local11, local12
02474     19 39 02 F6 | 	mov	local14, local11
02478     03 38 66 F0 | 	shl	local14, #3
0247c     F2 36 02 F6 | 	mov	local13, objptr
02480     F2 38 02 F1 | 	add	local14, objptr
02484     1C 13 02 FB | 	rdlong	arg01, local14
02488     35 00 00 FF 
0248c     0C E4 85 F1 | 	sub	objptr, ##27148
02490     A0 07 B2 FD | 	call	#__system__RTrim_S
02494     FD 12 02 F6 | 	mov	arg01, result1
02498     D8 06 B2 FD | 	call	#__system__LTrim_S
0249c     18 FB 61 FC | 	wrlong	result1, local10
024a0     01 20 06 F1 | 	add	local02, #1
024a4     A8 FF 9F FD | 	jmp	#LR__0127
024a8                 | LR__0128
024a8     00 20 06 F6 | 	mov	local02, #0
024ac     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024b0                 | ' i=0
024b0                 | ' do 
024b0                 | LR__0129
024b0                 | '   if len(lparts(i).part$)=0 then 
024b0     10 27 02 F6 | 	mov	local05, local02
024b4     03 26 66 F0 | 	shl	local05, #3
024b8     35 00 00 FF 
024bc     0C E4 05 F1 | 	add	objptr, ##27148
024c0     F2 26 02 F1 | 	add	local05, objptr
024c4     13 13 02 FB | 	rdlong	arg01, local05
024c8     35 00 00 FF 
024cc     0C E4 85 F1 | 	sub	objptr, ##27148
024d0     09 2B 02 F6 | 	mov	local07, arg01
024d4                 | LR__0130
024d4     15 FB C9 FA | 	rdbyte	result1, local07 wz
024d8     01 2A 06 51 |  if_ne	add	local07, #1
024dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
024e0     09 2B 8A F1 | 	sub	local07, arg01 wz
024e4     C4 00 90 5D |  if_ne	jmp	#LR__0134
024e8                 | '     if i=k-1 then k-=1  :  exit
024e8     1F 25 02 F6 | 	mov	local04, local17
024ec     01 24 86 F1 | 	sub	local04, #1
024f0     12 21 0A F2 | 	cmp	local02, local04 wz
024f4     01 3E 86 A1 |  if_e	sub	local17, #1
024f8     C4 00 90 AD |  if_e	jmp	#LR__0136
024fc                 | '     if i<k-1 then 
024fc     1F 25 02 F6 | 	mov	local04, local17
02500     01 24 86 F1 | 	sub	local04, #1
02504     12 21 52 F2 | 	cmps	local02, local04 wc
02508     A0 00 90 3D |  if_ae	jmp	#LR__0133
0250c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0250c     10 3B 02 F6 | 	mov	local15, local02
02510     1F 61 02 F6 | 	mov	local34, local17
02514     01 60 86 F1 | 	sub	local34, #1
02518                 | LR__0131
02518     30 3B 52 F2 | 	cmps	local15, local34 wc
0251c     80 00 90 3D |  if_ae	jmp	#LR__0132
02520     1D 27 02 F6 | 	mov	local05, local15
02524     01 26 06 F1 | 	add	local05, #1
02528     03 26 66 F0 | 	shl	local05, #3
0252c     35 00 00 FF 
02530     0C E4 05 F1 | 	add	objptr, ##27148
02534     F2 26 02 F1 | 	add	local05, objptr
02538     13 25 02 FB | 	rdlong	local04, local05
0253c     1D 29 02 F6 | 	mov	local06, local15
02540     01 28 06 F1 | 	add	local06, #1
02544     03 28 66 F0 | 	shl	local06, #3
02548     F2 28 02 F1 | 	add	local06, objptr
0254c     04 28 06 F1 | 	add	local06, #4
02550     14 23 02 FB | 	rdlong	local03, local06
02554     1D 31 02 F6 | 	mov	local10, local15
02558     18 29 02 F6 | 	mov	local06, local10
0255c     03 28 66 F0 | 	shl	local06, #3
02560     F2 34 02 F6 | 	mov	local12, objptr
02564     F2 28 02 F1 | 	add	local06, objptr
02568     14 25 62 FC | 	wrlong	local04, local06
0256c     1D 33 02 F6 | 	mov	local11, local15
02570     19 39 02 F6 | 	mov	local14, local11
02574     1C 37 02 F6 | 	mov	local13, local14
02578     03 36 66 F0 | 	shl	local13, #3
0257c     F2 54 02 F6 | 	mov	local28, objptr
02580     F2 36 02 F1 | 	add	local13, objptr
02584     04 36 06 F1 | 	add	local13, #4
02588     1B 23 62 FC | 	wrlong	local03, local13
0258c     04 36 86 F1 | 	sub	local13, #4
02590     01 3A 06 F1 | 	add	local15, #1
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     78 FF 9F FD | 	jmp	#LR__0131
025a0                 | LR__0132
025a0     01 3E 86 F1 | 	sub	local17, #1
025a4                 | '       if i>0 then i-=1 
025a4     01 20 56 F2 | 	cmps	local02, #1 wc
025a8     01 20 86 31 |  if_ae	sub	local02, #1
025ac                 | LR__0133
025ac                 | LR__0134
025ac     01 20 06 F1 | 	add	local02, #1
025b0     1F 25 02 F6 | 	mov	local04, local17
025b4     01 24 86 F1 | 	sub	local04, #1
025b8     12 21 5A F2 | 	cmps	local02, local04 wcz
025bc     F0 FE 9F ED |  if_be	jmp	#LR__0129
025c0                 | LR__0135
025c0                 | LR__0136
025c0                 | ' 
025c0                 | ' ' 1i: lowercase all that is not a string
025c0                 | ' 
025c0                 | ' for j=0 to k-1
025c0     00 3A 06 F6 | 	mov	local15, #0
025c4     1F 63 02 F6 | 	mov	local35, local17
025c8                 | LR__0137
025c8     31 3B 52 F2 | 	cmps	local15, local35 wc
025cc     C8 00 90 3D |  if_ae	jmp	#LR__0140
025d0                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
025d0     1D 27 02 F6 | 	mov	local05, local15
025d4     03 26 66 F0 | 	shl	local05, #3
025d8     35 00 00 FF 
025dc     0C E4 05 F1 | 	add	objptr, ##27148
025e0     F2 26 02 F1 | 	add	local05, objptr
025e4     13 13 02 FB | 	rdlong	arg01, local05
025e8     01 14 06 F6 | 	mov	arg02, #1
025ec     35 00 00 FF 
025f0     0C E4 85 F1 | 	sub	objptr, ##27148
025f4     AC 01 B2 FD | 	call	#__system__Left_S
025f8     FD 12 02 F6 | 	mov	arg01, result1
025fc     80 01 00 FF 
02600     17 14 06 F6 | 	mov	arg02, ##@LR__5061
02604     48 E1 B1 FD | 	call	#__system___string_cmp
02608     00 FA 0D F2 | 	cmp	result1, #0 wz
0260c     44 00 90 5D |  if_ne	jmp	#LR__0138
02610     1D 29 02 F6 | 	mov	local06, local15
02614     03 28 66 F0 | 	shl	local06, #3
02618     35 00 00 FF 
0261c     0C E4 05 F1 | 	add	objptr, ##27148
02620     F2 34 02 F6 | 	mov	local12, objptr
02624     F2 28 02 F1 | 	add	local06, objptr
02628     14 13 02 FB | 	rdlong	arg01, local06
0262c     01 14 06 F6 | 	mov	arg02, #1
02630     35 00 00 FF 
02634     0C E4 85 F1 | 	sub	objptr, ##27148
02638     F0 01 B2 FD | 	call	#__system__Right_S
0263c     FD 12 02 F6 | 	mov	arg01, result1
02640     80 01 00 FF 
02644     19 14 06 F6 | 	mov	arg02, ##@LR__5062
02648     04 E1 B1 FD | 	call	#__system___string_cmp
0264c     00 FA 0D F2 | 	cmp	result1, #0 wz
02650     3C 00 90 AD |  if_e	jmp	#LR__0139
02654                 | LR__0138
02654     1D 31 02 F6 | 	mov	local10, local15
02658     03 30 66 F0 | 	shl	local10, #3
0265c     35 00 00 FF 
02660     0C E4 05 F1 | 	add	objptr, ##27148
02664     F2 30 02 F1 | 	add	local10, objptr
02668     1D 33 02 F6 | 	mov	local11, local15
0266c     19 39 02 F6 | 	mov	local14, local11
02670     03 38 66 F0 | 	shl	local14, #3
02674     F2 36 02 F6 | 	mov	local13, objptr
02678     F2 38 02 F1 | 	add	local14, objptr
0267c     1C 13 02 FB | 	rdlong	arg01, local14
02680     35 00 00 FF 
02684     0C E4 85 F1 | 	sub	objptr, ##27148
02688     28 04 B2 FD | 	call	#__system__LCase_S
0268c     18 FB 61 FC | 	wrlong	result1, local10
02690                 | LR__0139
02690     01 3A 06 F1 | 	add	local15, #1
02694     30 FF 9F FD | 	jmp	#LR__0137
02698                 | LR__0140
02698                 | ' 
02698                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02698                 | ' 
02698                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02698     00 20 06 F6 | 	mov	local02, #0
0269c     1F 65 02 F6 | 	mov	local36, local17
026a0     01 64 06 F1 | 	add	local36, #1
026a4     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026a8                 | LR__0141
026a8     32 21 52 F2 | 	cmps	local02, local36 wc
026ac     30 00 90 3D |  if_ae	jmp	#LR__0143
026b0     10 31 02 F6 | 	mov	local10, local02
026b4     03 30 66 F0 | 	shl	local10, #3
026b8     35 00 00 FF 
026bc     0C E4 05 F1 | 	add	objptr, ##27148
026c0     F2 30 02 F1 | 	add	local10, objptr
026c4     04 30 06 F1 | 	add	local10, #4
026c8     FF FF FF FF 
026cc     18 FF 6B FC | 	wrlong	##-1, local10
026d0     01 20 06 F1 | 	add	local02, #1
026d4     35 00 00 FF 
026d8     0C E4 85 F1 | 	sub	objptr, ##27148
026dc     C8 FF 9F FD | 	jmp	#LR__0141
026e0                 | LR__0142
026e0                 | LR__0143
026e0                 | ' 
026e0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
026e0     35 00 00 FF 
026e4     0C E4 05 F1 | 	add	objptr, ##27148
026e8     F2 12 02 FB | 	rdlong	arg01, objptr
026ec     35 00 00 FF 
026f0     0C E4 85 F1 | 	sub	objptr, ##27148
026f4     90 3B B0 FD | 	call	#_isdec
026f8     00 FA 0D F2 | 	cmp	result1, #0 wz
026fc     01 66 06 56 |  if_ne	mov	local37, #1
02700     00 66 06 A6 |  if_e	mov	local37, #0
02704                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02704     35 00 00 FF 
02708     0C E4 05 F1 | 	add	objptr, ##27148
0270c     F2 12 02 FB | 	rdlong	arg01, objptr
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     80 01 00 FF 
0271c     1B 14 06 F6 | 	mov	arg02, ##@LR__5063
02720     2C E0 B1 FD | 	call	#__system___string_cmp
02724     00 FA 0D F2 | 	cmp	result1, #0 wz
02728     01 66 06 A6 |  if_e	mov	local37, #1
0272c     00 20 06 F6 | 	mov	local02, #0
02730                 | ' i=0 : do 
02730                 | LR__0144
02730                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02730     10 27 02 F6 | 	mov	local05, local02
02734     03 26 66 F0 | 	shl	local05, #3
02738     35 00 00 FF 
0273c     0C E4 05 F1 | 	add	objptr, ##27148
02740     F2 26 02 F1 | 	add	local05, objptr
02744     13 13 02 FB | 	rdlong	arg01, local05
02748     80 01 00 FF 
0274c     20 14 06 F6 | 	mov	arg02, ##@LR__5064
02750     35 00 00 FF 
02754     0C E4 85 F1 | 	sub	objptr, ##27148
02758     F4 DF B1 FD | 	call	#__system___string_cmp
0275c     00 FA 0D F2 | 	cmp	result1, #0 wz
02760     0C 00 90 AD |  if_e	jmp	#LR__0145
02764     01 20 06 F1 | 	add	local02, #1
02768     1F 21 5A F2 | 	cmps	local02, local17 wcz
0276c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02770                 | LR__0145
02770                 | ' if i<k then addptr=i+1								' then found
02770     1F 21 52 F2 | 	cmps	local02, local17 wc
02774     10 67 02 C6 |  if_b	mov	local37, local02
02778     01 66 06 C1 |  if_b	add	local37, #1
0277c     35 00 00 FF 
02780     0C E4 05 F1 | 	add	objptr, ##27148
02784     33 29 02 F6 | 	mov	local06, local37
02788     03 28 66 F0 | 	shl	local06, #3
0278c     F2 34 02 F6 | 	mov	local12, objptr
02790     F2 28 02 F1 | 	add	local06, objptr
02794     14 15 02 FB | 	rdlong	arg02, local06
02798     80 01 00 FF 
0279c     25 16 06 F6 | 	mov	arg03, ##@LR__5065
027a0     33 13 02 F6 | 	mov	arg01, local37
027a4     35 00 00 FF 
027a8     0C E4 85 F1 | 	sub	objptr, ##27148
027ac     3C 05 B2 FD | 	call	#__system__Instr
027b0     FD 68 02 F6 | 	mov	local38, result1
027b4                 | ' lp$=lparts(addptr).part$ 						      
027b4                 | ' dot=instr(addptr,lparts(addptr).part$,".")					' find a dot	
027b4                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027b4     01 68 56 F2 | 	cmps	local38, #1 wc
027b8     68 01 90 CD |  if_b	jmp	#LR__0152
027bc     33 27 02 F6 | 	mov	local05, local37
027c0     03 26 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 26 02 F1 | 	add	local05, objptr
027d0     13 13 02 FB | 	rdlong	arg01, local05
027d4     35 00 00 FF 
027d8     0C E4 85 F1 | 	sub	objptr, ##27148
027dc     09 2B 02 F6 | 	mov	local07, arg01
027e0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
027e4                 | LR__0146
027e4     15 FB C9 FA | 	rdbyte	result1, local07 wz
027e8     01 2A 06 51 |  if_ne	add	local07, #1
027ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
027f0                 | LR__0147
027f0     09 2B 82 F1 | 	sub	local07, arg01
027f4     15 69 52 F2 | 	cmps	local38, local07 wc
027f8     28 01 90 3D |  if_ae	jmp	#LR__0152
027fc     01 3E 06 F1 | 	add	local17, #1
02800                 | '   k+=1
02800                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02800     1F 21 02 F6 | 	mov	local02, local17
02804     33 6B 02 F6 | 	mov	local39, local37
02808     01 6A 06 F1 | 	add	local39, #1
0280c     35 00 00 FF 
02810     0C E4 05 F1 | 	add	objptr, ##27148
02814     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02818                 | LR__0148
02818     10 27 02 F6 | 	mov	local05, local02
0281c     01 26 86 F1 | 	sub	local05, #1
02820     03 26 66 F0 | 	shl	local05, #3
02824     F2 26 02 F1 | 	add	local05, objptr
02828     13 25 02 FB | 	rdlong	local04, local05
0282c     10 29 02 F6 | 	mov	local06, local02
02830     01 28 86 F1 | 	sub	local06, #1
02834     03 28 66 F0 | 	shl	local06, #3
02838     F2 28 02 F1 | 	add	local06, objptr
0283c     04 28 06 F1 | 	add	local06, #4
02840     14 23 02 FB | 	rdlong	local03, local06
02844     10 29 02 F6 | 	mov	local06, local02
02848     03 28 66 F0 | 	shl	local06, #3
0284c     F2 28 02 F1 | 	add	local06, objptr
02850     14 25 62 FC | 	wrlong	local04, local06
02854     10 37 02 F6 | 	mov	local13, local02
02858     03 36 66 F0 | 	shl	local13, #3
0285c     F2 36 02 F1 | 	add	local13, objptr
02860     04 36 06 F1 | 	add	local13, #4
02864     1B 23 62 FC | 	wrlong	local03, local13
02868     01 20 86 F1 | 	sub	local02, #1
0286c     35 21 52 F2 | 	cmps	local02, local39 wc
02870     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02874                 | LR__0149
02874     33 31 02 F6 | 	mov	local10, local37
02878     01 30 06 F1 | 	add	local10, #1
0287c     03 30 66 F0 | 	shl	local10, #3
02880     F2 30 02 F1 | 	add	local10, objptr
02884     33 39 02 F6 | 	mov	local14, local37
02888     03 38 66 F0 | 	shl	local14, #3
0288c     F2 38 02 F1 | 	add	local14, objptr
02890     1C 29 02 FB | 	rdlong	local06, local14
02894     33 55 02 F6 | 	mov	local28, local37
02898     2A 49 02 F6 | 	mov	local22, local28
0289c     03 48 66 F0 | 	shl	local22, #3
028a0     F2 4A 02 F6 | 	mov	local23, objptr
028a4     F2 48 02 F1 | 	add	local22, objptr
028a8     24 13 02 FB | 	rdlong	arg01, local22
028ac     35 00 00 FF 
028b0     0C E4 85 F1 | 	sub	objptr, ##27148
028b4     09 2B 02 F6 | 	mov	local07, arg01
028b8     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028bc                 | LR__0150
028bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
028c0     01 2A 06 51 |  if_ne	add	local07, #1
028c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
028c8                 | LR__0151
028c8     09 2B 82 F1 | 	sub	local07, arg01
028cc     15 15 02 F6 | 	mov	arg02, local07
028d0     34 15 82 F1 | 	sub	arg02, local38
028d4     14 13 02 F6 | 	mov	arg01, local06
028d8     50 FF B1 FD | 	call	#__system__Right_S
028dc     18 FB 61 FC | 	wrlong	result1, local10
028e0     33 31 02 F6 | 	mov	local10, local37
028e4     03 30 66 F0 | 	shl	local10, #3
028e8     35 00 00 FF 
028ec     0C E4 05 F1 | 	add	objptr, ##27148
028f0     F2 30 02 F1 | 	add	local10, objptr
028f4     33 33 02 F6 | 	mov	local11, local37
028f8     19 39 02 F6 | 	mov	local14, local11
028fc     03 38 66 F0 | 	shl	local14, #3
02900     F2 36 02 F6 | 	mov	local13, objptr
02904     F2 38 02 F1 | 	add	local14, objptr
02908     1C 13 02 FB | 	rdlong	arg01, local14
0290c     34 35 02 F6 | 	mov	local12, local38
02910     1A 15 02 F6 | 	mov	arg02, local12
02914     35 00 00 FF 
02918     0C E4 85 F1 | 	sub	objptr, ##27148
0291c     84 FE B1 FD | 	call	#__system__Left_S
02920     18 FB 61 FC | 	wrlong	result1, local10
02924                 | LR__0152
02924                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02924     33 27 02 F6 | 	mov	local05, local37
02928     03 26 66 F0 | 	shl	local05, #3
0292c     35 00 00 FF 
02930     0C E4 05 F1 | 	add	objptr, ##27148
02934     F2 26 02 F1 | 	add	local05, objptr
02938     13 13 02 FB | 	rdlong	arg01, local05
0293c     01 14 06 F6 | 	mov	arg02, #1
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     58 FE B1 FD | 	call	#__system__Left_S
0294c     FD 12 02 F6 | 	mov	arg01, result1
02950     80 01 00 FF 
02954     27 14 06 F6 | 	mov	arg02, ##@LR__5066
02958     F4 DD B1 FD | 	call	#__system___string_cmp
0295c     00 FA 0D F2 | 	cmp	result1, #0 wz
02960     60 01 90 5D |  if_ne	jmp	#LR__0159
02964     33 29 02 F6 | 	mov	local06, local37
02968     03 28 66 F0 | 	shl	local06, #3
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974     F2 34 02 F6 | 	mov	local12, objptr
02978     F2 28 02 F1 | 	add	local06, objptr
0297c     14 13 02 FB | 	rdlong	arg01, local06
02980     35 00 00 FF 
02984     0C E4 85 F1 | 	sub	objptr, ##27148
02988     09 2B 02 F6 | 	mov	local07, arg01
0298c     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02990                 | LR__0153
02990     15 FB C9 FA | 	rdbyte	result1, local07 wz
02994     01 2A 06 51 |  if_ne	add	local07, #1
02998     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
0299c                 | LR__0154
0299c     09 2B 82 F1 | 	sub	local07, arg01
029a0     02 2A 56 F2 | 	cmps	local07, #2 wc
029a4     1C 01 90 CD |  if_b	jmp	#LR__0159
029a8     01 3E 06 F1 | 	add	local17, #1
029ac                 | '   k+=1
029ac                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029ac     1F 21 02 F6 | 	mov	local02, local17
029b0     33 6D 02 F6 | 	mov	local40, local37
029b4     01 6C 06 F1 | 	add	local40, #1
029b8     35 00 00 FF 
029bc     0C E4 05 F1 | 	add	objptr, ##27148
029c0     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
029c4                 | LR__0155
029c4     10 27 02 F6 | 	mov	local05, local02
029c8     01 26 86 F1 | 	sub	local05, #1
029cc     03 26 66 F0 | 	shl	local05, #3
029d0     F2 26 02 F1 | 	add	local05, objptr
029d4     13 25 02 FB | 	rdlong	local04, local05
029d8     10 29 02 F6 | 	mov	local06, local02
029dc     01 28 86 F1 | 	sub	local06, #1
029e0     03 28 66 F0 | 	shl	local06, #3
029e4     F2 28 02 F1 | 	add	local06, objptr
029e8     04 28 06 F1 | 	add	local06, #4
029ec     14 23 02 FB | 	rdlong	local03, local06
029f0     10 29 02 F6 | 	mov	local06, local02
029f4     03 28 66 F0 | 	shl	local06, #3
029f8     F2 28 02 F1 | 	add	local06, objptr
029fc     14 25 62 FC | 	wrlong	local04, local06
02a00     10 37 02 F6 | 	mov	local13, local02
02a04     03 36 66 F0 | 	shl	local13, #3
02a08     F2 36 02 F1 | 	add	local13, objptr
02a0c     04 36 06 F1 | 	add	local13, #4
02a10     1B 23 62 FC | 	wrlong	local03, local13
02a14     01 20 86 F1 | 	sub	local02, #1
02a18     36 21 52 F2 | 	cmps	local02, local40 wc
02a1c     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a20                 | LR__0156
02a20     33 31 02 F6 | 	mov	local10, local37
02a24     01 30 06 F1 | 	add	local10, #1
02a28     03 30 66 F0 | 	shl	local10, #3
02a2c     F2 30 02 F1 | 	add	local10, objptr
02a30     33 39 02 F6 | 	mov	local14, local37
02a34     03 38 66 F0 | 	shl	local14, #3
02a38     F2 38 02 F1 | 	add	local14, objptr
02a3c     1C 29 02 FB | 	rdlong	local06, local14
02a40     33 37 02 F6 | 	mov	local13, local37
02a44     1B 55 02 F6 | 	mov	local28, local13
02a48     2A 49 02 F6 | 	mov	local22, local28
02a4c     03 48 66 F0 | 	shl	local22, #3
02a50     F2 4A 02 F6 | 	mov	local23, objptr
02a54     F2 48 02 F1 | 	add	local22, objptr
02a58     24 13 02 FB | 	rdlong	arg01, local22
02a5c     35 00 00 FF 
02a60     0C E4 85 F1 | 	sub	objptr, ##27148
02a64     09 2B 02 F6 | 	mov	local07, arg01
02a68     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02a6c                 | LR__0157
02a6c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02a70     01 2A 06 51 |  if_ne	add	local07, #1
02a74     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02a78                 | LR__0158
02a78     09 2B 82 F1 | 	sub	local07, arg01
02a7c     15 39 02 F6 | 	mov	local14, local07
02a80     1C 33 02 F6 | 	mov	local11, local14
02a84     01 32 86 F1 | 	sub	local11, #1
02a88     19 35 02 F6 | 	mov	local12, local11
02a8c     14 13 02 F6 | 	mov	arg01, local06
02a90     1A 15 02 F6 | 	mov	arg02, local12
02a94     94 FD B1 FD | 	call	#__system__Right_S
02a98     18 FB 61 FC | 	wrlong	result1, local10
02a9c     33 31 02 F6 | 	mov	local10, local37
02aa0     03 30 66 F0 | 	shl	local10, #3
02aa4     35 00 00 FF 
02aa8     0C E4 05 F1 | 	add	objptr, ##27148
02aac     F2 30 02 F1 | 	add	local10, objptr
02ab0     80 01 00 FF 
02ab4     29 28 06 F6 | 	mov	local06, ##@LR__5067
02ab8     18 29 62 FC | 	wrlong	local06, local10
02abc     35 00 00 FF 
02ac0     0C E4 85 F1 | 	sub	objptr, ##27148
02ac4                 | LR__0159
02ac4     33 31 02 F6 | 	mov	local10, local37
02ac8     03 30 66 F0 | 	shl	local10, #3
02acc     35 00 00 FF 
02ad0     0C E4 05 F1 | 	add	objptr, ##27148
02ad4     F2 30 02 F1 | 	add	local10, objptr
02ad8     18 6F 02 FB | 	rdlong	local41, local10
02adc                 | ' 
02adc                 | ' lp$=lparts(addptr).part$ 
02adc                 | ' 
02adc                 | ' ' process mouse/cursor/click on/off
02adc                 | ' 
02adc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02adc     80 01 00 FF 
02ae0     2B 14 06 F6 | 	mov	arg02, ##@LR__5068
02ae4     37 13 02 F6 | 	mov	arg01, local41
02ae8     35 00 00 FF 
02aec     0C E4 85 F1 | 	sub	objptr, ##27148
02af0     5C DC B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     30 00 90 AD |  if_e	jmp	#LR__0160
02afc     80 01 00 FF 
02b00     31 14 06 F6 | 	mov	arg02, ##@LR__5069
02b04     37 13 02 F6 | 	mov	arg01, local41
02b08     44 DC B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     18 00 90 AD |  if_e	jmp	#LR__0160
02b14     80 01 00 FF 
02b18     38 14 06 F6 | 	mov	arg02, ##@LR__5070
02b1c     37 13 02 F6 | 	mov	arg01, local41
02b20     2C DC B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b2c                 | LR__0160
02b2c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b2c     33 27 02 F6 | 	mov	local05, local37
02b30     01 26 06 F1 | 	add	local05, #1
02b34     03 26 66 F0 | 	shl	local05, #3
02b38     35 00 00 FF 
02b3c     0C E4 05 F1 | 	add	objptr, ##27148
02b40     F2 26 02 F1 | 	add	local05, objptr
02b44     13 13 02 FB | 	rdlong	arg01, local05
02b48     80 01 00 FF 
02b4c     3E 14 06 F6 | 	mov	arg02, ##@LR__5071
02b50     35 00 00 FF 
02b54     0C E4 85 F1 | 	sub	objptr, ##27148
02b58     F4 DB B1 FD | 	call	#__system___string_cmp
02b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b60     38 00 90 5D |  if_ne	jmp	#LR__0161
02b64     33 31 02 F6 | 	mov	local10, local37
02b68     01 30 06 F1 | 	add	local10, #1
02b6c     03 30 66 F0 | 	shl	local10, #3
02b70     35 00 00 FF 
02b74     0C E4 05 F1 | 	add	objptr, ##27148
02b78     F2 30 02 F1 | 	add	local10, objptr
02b7c     80 01 00 FF 
02b80     41 28 06 F6 | 	mov	local06, ##@LR__5072
02b84     18 29 62 FC | 	wrlong	local06, local10
02b88     14 E4 05 F1 | 	add	objptr, #20
02b8c     01 00 80 FF 
02b90     F2 00 68 FC | 	wrlong	##512, objptr
02b94     35 00 00 FF 
02b98     20 E4 85 F1 | 	sub	objptr, ##27168
02b9c                 | LR__0161
02b9c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02b9c     33 27 02 F6 | 	mov	local05, local37
02ba0     01 26 06 F1 | 	add	local05, #1
02ba4     03 26 66 F0 | 	shl	local05, #3
02ba8     35 00 00 FF 
02bac     0C E4 05 F1 | 	add	objptr, ##27148
02bb0     F2 26 02 F1 | 	add	local05, objptr
02bb4     13 13 02 FB | 	rdlong	arg01, local05
02bb8     80 01 00 FF 
02bbc     43 14 06 F6 | 	mov	arg02, ##@LR__5073
02bc0     35 00 00 FF 
02bc4     0C E4 85 F1 | 	sub	objptr, ##27148
02bc8     84 DB B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     38 00 90 5D |  if_ne	jmp	#LR__0162
02bd4     33 31 02 F6 | 	mov	local10, local37
02bd8     01 30 06 F1 | 	add	local10, #1
02bdc     03 30 66 F0 | 	shl	local10, #3
02be0     35 00 00 FF 
02be4     0C E4 05 F1 | 	add	objptr, ##27148
02be8     F2 30 02 F1 | 	add	local10, objptr
02bec     80 01 00 FF 
02bf0     47 28 06 F6 | 	mov	local06, ##@LR__5074
02bf4     18 29 62 FC | 	wrlong	local06, local10
02bf8     14 E4 05 F1 | 	add	objptr, #20
02bfc     01 00 80 FF 
02c00     F2 00 68 FC | 	wrlong	##512, objptr
02c04     35 00 00 FF 
02c08     20 E4 85 F1 | 	sub	objptr, ##27168
02c0c                 | LR__0162
02c0c                 | LR__0163
02c0c                 | ' 		
02c0c                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c0c                 | ' 
02c0c                 | ' if (lp$="mode" orelse lp$="m.") then 
02c0c     80 01 00 FF 
02c10     49 14 06 F6 | 	mov	arg02, ##@LR__5075
02c14     37 13 02 F6 | 	mov	arg01, local41
02c18     34 DB B1 FD | 	call	#__system___string_cmp
02c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02c20     18 00 90 AD |  if_e	jmp	#LR__0164
02c24     80 01 00 FF 
02c28     4E 14 06 F6 | 	mov	arg02, ##@LR__5076
02c2c     37 13 02 F6 | 	mov	arg01, local41
02c30     1C DB B1 FD | 	call	#__system___string_cmp
02c34     00 FA 0D F2 | 	cmp	result1, #0 wz
02c38     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c3c                 | LR__0164
02c3c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c3c     33 27 02 F6 | 	mov	local05, local37
02c40     01 26 06 F1 | 	add	local05, #1
02c44     03 26 66 F0 | 	shl	local05, #3
02c48     35 00 00 FF 
02c4c     0C E4 05 F1 | 	add	objptr, ##27148
02c50     F2 26 02 F1 | 	add	local05, objptr
02c54     13 13 02 FB | 	rdlong	arg01, local05
02c58     80 01 00 FF 
02c5c     51 14 06 F6 | 	mov	arg02, ##@LR__5077
02c60     35 00 00 FF 
02c64     0C E4 85 F1 | 	sub	objptr, ##27148
02c68     E4 DA B1 FD | 	call	#__system___string_cmp
02c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02c70     2C 00 90 5D |  if_ne	jmp	#LR__0165
02c74     33 31 02 F6 | 	mov	local10, local37
02c78     01 30 06 F1 | 	add	local10, #1
02c7c     03 30 66 F0 | 	shl	local10, #3
02c80     35 00 00 FF 
02c84     0C E4 05 F1 | 	add	objptr, ##27148
02c88     F2 30 02 F1 | 	add	local10, objptr
02c8c     80 01 00 FF 
02c90     57 28 06 F6 | 	mov	local06, ##@LR__5078
02c94     18 29 62 FC | 	wrlong	local06, local10
02c98     35 00 00 FF 
02c9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ca0                 | LR__0165
02ca0                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ca0     33 27 02 F6 | 	mov	local05, local37
02ca4     01 26 06 F1 | 	add	local05, #1
02ca8     03 26 66 F0 | 	shl	local05, #3
02cac     35 00 00 FF 
02cb0     0C E4 05 F1 | 	add	objptr, ##27148
02cb4     F2 26 02 F1 | 	add	local05, objptr
02cb8     13 13 02 FB | 	rdlong	arg01, local05
02cbc     80 01 00 FF 
02cc0     59 14 06 F6 | 	mov	arg02, ##@LR__5079
02cc4     35 00 00 FF 
02cc8     0C E4 85 F1 | 	sub	objptr, ##27148
02ccc     80 DA B1 FD | 	call	#__system___string_cmp
02cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cd4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02cd8     33 31 02 F6 | 	mov	local10, local37
02cdc     01 30 06 F1 | 	add	local10, #1
02ce0     03 30 66 F0 | 	shl	local10, #3
02ce4     35 00 00 FF 
02ce8     0C E4 05 F1 | 	add	objptr, ##27148
02cec     F2 30 02 F1 | 	add	local10, objptr
02cf0     80 01 00 FF 
02cf4     62 28 06 F6 | 	mov	local06, ##@LR__5080
02cf8     18 29 62 FC | 	wrlong	local06, local10
02cfc     35 00 00 FF 
02d00     0C E4 85 F1 | 	sub	objptr, ##27148
02d04                 | LR__0166
02d04                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d04     33 27 02 F6 | 	mov	local05, local37
02d08     01 26 06 F1 | 	add	local05, #1
02d0c     03 26 66 F0 | 	shl	local05, #3
02d10     35 00 00 FF 
02d14     0C E4 05 F1 | 	add	objptr, ##27148
02d18     F2 26 02 F1 | 	add	local05, objptr
02d1c     13 13 02 FB | 	rdlong	arg01, local05
02d20     80 01 00 FF 
02d24     64 14 06 F6 | 	mov	arg02, ##@LR__5081
02d28     35 00 00 FF 
02d2c     0C E4 85 F1 | 	sub	objptr, ##27148
02d30     1C DA B1 FD | 	call	#__system___string_cmp
02d34     00 FA 0D F2 | 	cmp	result1, #0 wz
02d38     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d3c     33 31 02 F6 | 	mov	local10, local37
02d40     01 30 06 F1 | 	add	local10, #1
02d44     03 30 66 F0 | 	shl	local10, #3
02d48     35 00 00 FF 
02d4c     0C E4 05 F1 | 	add	objptr, ##27148
02d50     F2 30 02 F1 | 	add	local10, objptr
02d54     80 01 00 FF 
02d58     6D 28 06 F6 | 	mov	local06, ##@LR__5082
02d5c     18 29 62 FC | 	wrlong	local06, local10
02d60     35 00 00 FF 
02d64     0C E4 85 F1 | 	sub	objptr, ##27148
02d68                 | LR__0167
02d68                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02d68     33 27 02 F6 | 	mov	local05, local37
02d6c     01 26 06 F1 | 	add	local05, #1
02d70     03 26 66 F0 | 	shl	local05, #3
02d74     35 00 00 FF 
02d78     0C E4 05 F1 | 	add	objptr, ##27148
02d7c     F2 26 02 F1 | 	add	local05, objptr
02d80     13 13 02 FB | 	rdlong	arg01, local05
02d84     80 01 00 FF 
02d88     6F 14 06 F6 | 	mov	arg02, ##@LR__5083
02d8c     35 00 00 FF 
02d90     0C E4 85 F1 | 	sub	objptr, ##27148
02d94     B8 D9 B1 FD | 	call	#__system___string_cmp
02d98     00 FA 0D F2 | 	cmp	result1, #0 wz
02d9c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02da0     33 31 02 F6 | 	mov	local10, local37
02da4     01 30 06 F1 | 	add	local10, #1
02da8     03 30 66 F0 | 	shl	local10, #3
02dac     35 00 00 FF 
02db0     0C E4 05 F1 | 	add	objptr, ##27148
02db4     F2 30 02 F1 | 	add	local10, objptr
02db8     80 01 00 FF 
02dbc     78 28 06 F6 | 	mov	local06, ##@LR__5084
02dc0     18 29 62 FC | 	wrlong	local06, local10
02dc4     35 00 00 FF 
02dc8     0C E4 85 F1 | 	sub	objptr, ##27148
02dcc                 | LR__0168
02dcc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02dcc     33 27 02 F6 | 	mov	local05, local37
02dd0     01 26 06 F1 | 	add	local05, #1
02dd4     03 26 66 F0 | 	shl	local05, #3
02dd8     35 00 00 FF 
02ddc     0C E4 05 F1 | 	add	objptr, ##27148
02de0     F2 26 02 F1 | 	add	local05, objptr
02de4     13 13 02 FB | 	rdlong	arg01, local05
02de8     80 01 00 FF 
02dec     7A 14 06 F6 | 	mov	arg02, ##@LR__5085
02df0     35 00 00 FF 
02df4     0C E4 85 F1 | 	sub	objptr, ##27148
02df8     54 D9 B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e04     33 31 02 F6 | 	mov	local10, local37
02e08     01 30 06 F1 | 	add	local10, #1
02e0c     03 30 66 F0 | 	shl	local10, #3
02e10     35 00 00 FF 
02e14     0C E4 05 F1 | 	add	objptr, ##27148
02e18     F2 30 02 F1 | 	add	local10, objptr
02e1c     80 01 00 FF 
02e20     7D 28 06 F6 | 	mov	local06, ##@LR__5086
02e24     18 29 62 FC | 	wrlong	local06, local10
02e28     35 00 00 FF 
02e2c     0C E4 85 F1 | 	sub	objptr, ##27148
02e30                 | LR__0169
02e30                 | LR__0170
02e30                 | ' 
02e30                 | ' ' find part types 
02e30                 | ' 
02e30                 | ' for i=0 to k-1
02e30     00 20 06 F6 | 	mov	local02, #0
02e34     1F 71 02 F6 | 	mov	local42, local17
02e38                 | LR__0171
02e38     38 21 52 F2 | 	cmps	local02, local42 wc
02e3c     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e40     10 31 02 F6 | 	mov	local10, local02
02e44     03 30 66 F0 | 	shl	local10, #3
02e48     35 00 00 FF 
02e4c     0C E4 05 F1 | 	add	objptr, ##27148
02e50     F2 30 02 F1 | 	add	local10, objptr
02e54     10 33 02 F6 | 	mov	local11, local02
02e58     19 39 02 F6 | 	mov	local14, local11
02e5c     1C 37 02 F6 | 	mov	local13, local14
02e60     03 36 66 F0 | 	shl	local13, #3
02e64     F2 36 02 F1 | 	add	local13, objptr
02e68     1B 13 02 FB | 	rdlong	arg01, local13
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74     48 15 B0 FD | 	call	#_isseparator
02e78     FD FA E1 F8 | 	getbyte	result1, result1, #0
02e7c     04 30 06 F1 | 	add	local10, #4
02e80     18 FB 61 FC | 	wrlong	result1, local10
02e84                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02e84     10 31 02 F6 | 	mov	local10, local02
02e88     03 30 66 F0 | 	shl	local10, #3
02e8c     35 00 00 FF 
02e90     0C E4 05 F1 | 	add	objptr, ##27148
02e94     F2 30 02 F1 | 	add	local10, objptr
02e98     04 30 06 F1 | 	add	local10, #4
02e9c     18 35 02 FB | 	rdlong	local12, local10
02ea0     01 34 56 F2 | 	cmps	local12, #1 wc
02ea4     35 00 00 FF 
02ea8     0C E4 85 F1 | 	sub	objptr, ##27148
02eac     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eb0     10 31 02 F6 | 	mov	local10, local02
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     10 33 02 F6 | 	mov	local11, local02
02ec8     19 39 02 F6 | 	mov	local14, local11
02ecc     1C 37 02 F6 | 	mov	local13, local14
02ed0     03 36 66 F0 | 	shl	local13, #3
02ed4     F2 36 02 F1 | 	add	local13, objptr
02ed8     1B 13 02 FB | 	rdlong	arg01, local13
02edc     35 00 00 FF 
02ee0     0C E4 85 F1 | 	sub	objptr, ##27148
02ee4     24 0D B0 FD | 	call	#_isoperator
02ee8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eec     04 30 06 F1 | 	add	local10, #4
02ef0     18 FB 61 FC | 	wrlong	result1, local10
02ef4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ef4     10 31 02 F6 | 	mov	local10, local02
02ef8     03 30 66 F0 | 	shl	local10, #3
02efc     35 00 00 FF 
02f00     0C E4 05 F1 | 	add	objptr, ##27148
02f04     F2 30 02 F1 | 	add	local10, objptr
02f08     04 30 06 F1 | 	add	local10, #4
02f0c     18 35 02 FB | 	rdlong	local12, local10
02f10     01 34 56 F2 | 	cmps	local12, #1 wc
02f14     35 00 00 FF 
02f18     0C E4 85 F1 | 	sub	objptr, ##27148
02f1c     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f20     10 31 02 F6 | 	mov	local10, local02
02f24     03 30 66 F0 | 	shl	local10, #3
02f28     35 00 00 FF 
02f2c     0C E4 05 F1 | 	add	objptr, ##27148
02f30     F2 30 02 F1 | 	add	local10, objptr
02f34     10 33 02 F6 | 	mov	local11, local02
02f38     19 39 02 F6 | 	mov	local14, local11
02f3c     1C 37 02 F6 | 	mov	local13, local14
02f40     03 36 66 F0 | 	shl	local13, #3
02f44     F2 36 02 F1 | 	add	local13, objptr
02f48     1B 13 02 FB | 	rdlong	arg01, local13
02f4c     35 00 00 FF 
02f50     0C E4 85 F1 | 	sub	objptr, ##27148
02f54                 | ' 
02f54                 | ' select case s
02f54     80 01 00 FF 
02f58     52 15 06 F6 | 	mov	arg02, ##@LR__5163
02f5c     F0 D7 B1 FD | 	call	#__system___string_cmp
02f60     00 FA 0D F2 | 	cmp	result1, #0 wz
02f64     1B FA 05 A6 |  if_e	mov	result1, #27
02f68     00 FA 05 56 |  if_ne	mov	result1, #0
02f6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f70     04 30 06 F1 | 	add	local10, #4
02f74     18 FB 61 FC | 	wrlong	result1, local10
02f78                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02f78     10 31 02 F6 | 	mov	local10, local02
02f7c     03 30 66 F0 | 	shl	local10, #3
02f80     35 00 00 FF 
02f84     0C E4 05 F1 | 	add	objptr, ##27148
02f88     F2 30 02 F1 | 	add	local10, objptr
02f8c     04 30 06 F1 | 	add	local10, #4
02f90     18 35 02 FB | 	rdlong	local12, local10
02f94     01 34 56 F2 | 	cmps	local12, #1 wc
02f98     35 00 00 FF 
02f9c     0C E4 85 F1 | 	sub	objptr, ##27148
02fa0     38 06 90 3D |  if_ae	jmp	#LR__0182
02fa4     10 31 02 F6 | 	mov	local10, local02
02fa8     03 30 66 F0 | 	shl	local10, #3
02fac     35 00 00 FF 
02fb0     0C E4 05 F1 | 	add	objptr, ##27148
02fb4     F2 30 02 F1 | 	add	local10, objptr
02fb8     10 33 02 F6 | 	mov	local11, local02
02fbc     19 39 02 F6 | 	mov	local14, local11
02fc0     1C 37 02 F6 | 	mov	local13, local14
02fc4     03 36 66 F0 | 	shl	local13, #3
02fc8     F2 36 02 F1 | 	add	local13, objptr
02fcc     1B 13 02 FB | 	rdlong	arg01, local13
02fd0     35 00 00 FF 
02fd4     0C E4 85 F1 | 	sub	objptr, ##27148
02fd8     E4 15 B0 FD | 	call	#_iscommand
02fdc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fe0     04 30 06 F1 | 	add	local10, #4
02fe4     18 FB 61 FC | 	wrlong	result1, local10
02fe8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02fe8     10 31 02 F6 | 	mov	local10, local02
02fec     03 30 66 F0 | 	shl	local10, #3
02ff0     35 00 00 FF 
02ff4     0C E4 05 F1 | 	add	objptr, ##27148
02ff8     F2 30 02 F1 | 	add	local10, objptr
02ffc     04 30 06 F1 | 	add	local10, #4
03000     18 35 02 FB | 	rdlong	local12, local10
03004     01 34 56 F2 | 	cmps	local12, #1 wc
03008     35 00 00 FF 
0300c     0C E4 85 F1 | 	sub	objptr, ##27148
03010     C8 05 90 3D |  if_ae	jmp	#LR__0182
03014     10 31 02 F6 | 	mov	local10, local02
03018     03 30 66 F0 | 	shl	local10, #3
0301c     35 00 00 FF 
03020     0C E4 05 F1 | 	add	objptr, ##27148
03024     F2 30 02 F1 | 	add	local10, objptr
03028     10 33 02 F6 | 	mov	local11, local02
0302c     19 39 02 F6 | 	mov	local14, local11
03030     1C 37 02 F6 | 	mov	local13, local14
03034     03 36 66 F0 | 	shl	local13, #3
03038     F2 54 02 F6 | 	mov	local28, objptr
0303c     F2 36 02 F1 | 	add	local13, objptr
03040     1B 13 02 FB | 	rdlong	arg01, local13
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     B0 24 B0 FD | 	call	#_isfunction
03050     FD FA E1 F8 | 	getbyte	result1, result1, #0
03054     04 30 06 F1 | 	add	local10, #4
03058     18 FB 61 FC | 	wrlong	result1, local10
0305c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0305c     10 31 02 F6 | 	mov	local10, local02
03060     03 30 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 30 02 F1 | 	add	local10, objptr
03070     04 30 06 F1 | 	add	local10, #4
03074     18 35 02 FB | 	rdlong	local12, local10
03078     01 34 56 F2 | 	cmps	local12, #1 wc
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084     54 05 90 3D |  if_ae	jmp	#LR__0182
03088     10 31 02 F6 | 	mov	local10, local02
0308c     03 30 66 F0 | 	shl	local10, #3
03090     35 00 00 FF 
03094     0C E4 05 F1 | 	add	objptr, ##27148
03098     F2 30 02 F1 | 	add	local10, objptr
0309c     10 33 02 F6 | 	mov	local11, local02
030a0     19 39 02 F6 | 	mov	local14, local11
030a4     03 38 66 F0 | 	shl	local14, #3
030a8     F2 36 02 F6 | 	mov	local13, objptr
030ac     F2 38 02 F1 | 	add	local14, objptr
030b0     1C 13 02 FB | 	rdlong	arg01, local14
030b4     35 00 00 FF 
030b8     0C E4 85 F1 | 	sub	objptr, ##27148
030bc     94 0F B0 FD | 	call	#_isnotename
030c0     04 30 06 F1 | 	add	local10, #4
030c4     18 FB 61 FC | 	wrlong	result1, local10
030c8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
030c8                 | ' if lparts(i).token>0 then 
030c8     10 31 02 F6 | 	mov	local10, local02
030cc     03 30 66 F0 | 	shl	local10, #3
030d0     35 00 00 FF 
030d4     0C E4 05 F1 | 	add	objptr, ##27148
030d8     F2 30 02 F1 | 	add	local10, objptr
030dc     04 30 06 F1 | 	add	local10, #4
030e0     18 29 02 FB | 	rdlong	local06, local10
030e4     01 28 56 F2 | 	cmps	local06, #1 wc
030e8     35 00 00 FF 
030ec     0C E4 85 F1 | 	sub	objptr, ##27148
030f0     8C 00 90 CD |  if_b	jmp	#LR__0172
030f4     10 27 02 F6 | 	mov	local05, local02
030f8     03 26 66 F0 | 	shl	local05, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 26 02 F1 | 	add	local05, objptr
03108     04 26 06 F1 | 	add	local05, #4
0310c     13 35 02 FB | 	rdlong	local12, local05
03110     1A 13 02 F6 | 	mov	arg01, local12
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     DC 9E B1 FD | 	call	#_getnoteval
03120     FD 72 02 F6 | 	mov	local43, result1
03124     10 31 02 F6 | 	mov	local10, local02
03128     03 30 66 F0 | 	shl	local10, #3
0312c     35 00 00 FF 
03130     0C E4 05 F1 | 	add	objptr, ##27148
03134     F2 30 02 F1 | 	add	local10, objptr
03138     39 13 02 F6 | 	mov	arg01, local43
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144     54 F8 B1 FD | 	call	#__system__str_S
03148     18 FB 61 FC | 	wrlong	result1, local10
0314c     10 25 02 F6 | 	mov	local04, local02
03150     12 23 02 F6 | 	mov	local03, local04
03154     11 31 02 F6 | 	mov	local10, local03
03158     03 30 66 F0 | 	shl	local10, #3
0315c     35 00 00 FF 
03160     0C E4 05 F1 | 	add	objptr, ##27148
03164     F2 30 02 F1 | 	add	local10, objptr
03168     04 30 06 F1 | 	add	local10, #4
0316c     01 00 80 FF 
03170     18 05 68 FC | 	wrlong	##514, local10
03174     35 00 00 FF 
03178     0C E4 85 F1 | 	sub	objptr, ##27148
0317c     5C 04 90 FD | 	jmp	#LR__0182
03180                 | LR__0172
03180     10 31 02 F6 | 	mov	local10, local02
03184     03 30 66 F0 | 	shl	local10, #3
03188     35 00 00 FF 
0318c     0C E4 05 F1 | 	add	objptr, ##27148
03190     F2 30 02 F1 | 	add	local10, objptr
03194     10 39 02 F6 | 	mov	local14, local02
03198     03 38 66 F0 | 	shl	local14, #3
0319c     F2 38 02 F1 | 	add	local14, objptr
031a0     1C 13 02 FB | 	rdlong	arg01, local14
031a4     35 00 00 FF 
031a8     0C E4 85 F1 | 	sub	objptr, ##27148
031ac     3C 0D B0 FD | 	call	#_ischannel
031b0     04 30 06 F1 | 	add	local10, #4
031b4     18 FB 61 FC | 	wrlong	result1, local10
031b8                 | ' 
031b8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031b8                 | ' 
031b8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031b8     10 31 02 F6 | 	mov	local10, local02
031bc     03 30 66 F0 | 	shl	local10, #3
031c0     35 00 00 FF 
031c4     0C E4 05 F1 | 	add	objptr, ##27148
031c8     F2 30 02 F1 | 	add	local10, objptr
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 29 02 FB | 	rdlong	local06, local10
031d4     01 28 56 F2 | 	cmps	local06, #1 wc
031d8     35 00 00 FF 
031dc     0C E4 85 F1 | 	sub	objptr, ##27148
031e0     74 00 90 CD |  if_b	jmp	#LR__0173
031e4     10 31 02 F6 | 	mov	local10, local02
031e8     03 30 66 F0 | 	shl	local10, #3
031ec     35 00 00 FF 
031f0     0C E4 05 F1 | 	add	objptr, ##27148
031f4     F2 30 02 F1 | 	add	local10, objptr
031f8     10 33 02 F6 | 	mov	local11, local02
031fc     19 39 02 F6 | 	mov	local14, local11
03200     03 38 66 F0 | 	shl	local14, #3
03204     F2 36 02 F6 | 	mov	local13, objptr
03208     F2 38 02 F1 | 	add	local14, objptr
0320c     1C 13 02 FB | 	rdlong	arg01, local14
03210     01 34 06 F6 | 	mov	local12, #1
03214     01 14 06 F6 | 	mov	arg02, #1
03218     35 00 00 FF 
0321c     0C E4 85 F1 | 	sub	objptr, ##27148
03220     08 F6 B1 FD | 	call	#__system__Right_S
03224     18 FB 61 FC | 	wrlong	result1, local10
03228     10 25 02 F6 | 	mov	local04, local02
0322c     12 23 02 F6 | 	mov	local03, local04
03230     11 31 02 F6 | 	mov	local10, local03
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     04 30 06 F1 | 	add	local10, #4
03248     18 59 68 FC | 	wrlong	#44, local10
0324c     35 00 00 FF 
03250     0C E4 85 F1 | 	sub	objptr, ##27148
03254     84 03 90 FD | 	jmp	#LR__0182
03258                 | LR__0173
03258     10 31 02 F6 | 	mov	local10, local02
0325c     03 30 66 F0 | 	shl	local10, #3
03260     35 00 00 FF 
03264     0C E4 05 F1 | 	add	objptr, ##27148
03268     F2 30 02 F1 | 	add	local10, objptr
0326c     10 33 02 F6 | 	mov	local11, local02
03270     19 39 02 F6 | 	mov	local14, local11
03274     03 38 66 F0 | 	shl	local14, #3
03278     F2 36 02 F6 | 	mov	local13, objptr
0327c     F2 38 02 F1 | 	add	local14, objptr
03280     1C 13 02 FB | 	rdlong	arg01, local14
03284     35 00 00 FF 
03288     0C E4 85 F1 | 	sub	objptr, ##27148
0328c     44 0D B0 FD | 	call	#_isconstant
03290     04 30 06 F1 | 	add	local10, #4
03294     18 FB 61 FC | 	wrlong	result1, local10
03298                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03298     10 31 02 F6 | 	mov	local10, local02
0329c     03 30 66 F0 | 	shl	local10, #3
032a0     35 00 00 FF 
032a4     0C E4 05 F1 | 	add	objptr, ##27148
032a8     F2 30 02 F1 | 	add	local10, objptr
032ac     04 30 06 F1 | 	add	local10, #4
032b0     18 35 02 FB | 	rdlong	local12, local10
032b4     01 34 56 F2 | 	cmps	local12, #1 wc
032b8     35 00 00 FF 
032bc     0C E4 85 F1 | 	sub	objptr, ##27148
032c0     94 00 90 CD |  if_b	jmp	#LR__0174
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     10 35 02 F6 | 	mov	local12, local02
032dc     1A 33 02 F6 | 	mov	local11, local12
032e0     19 39 02 F6 | 	mov	local14, local11
032e4     03 38 66 F0 | 	shl	local14, #3
032e8     F2 36 02 F6 | 	mov	local13, objptr
032ec     F2 38 02 F1 | 	add	local14, objptr
032f0     04 38 06 F1 | 	add	local14, #4
032f4     1C 13 02 FB | 	rdlong	arg01, local14
032f8     04 38 86 F1 | 	sub	local14, #4
032fc     35 00 00 FF 
03300     0C E4 85 F1 | 	sub	objptr, ##27148
03304     09 13 52 F6 | 	abs	arg01, arg01 wc
03308     1F 74 C6 C9 |  if_b	decod	local44, #31
0330c     00 74 06 36 |  if_ae	mov	local44, #0
03310     C4 FB B1 FD | 	call	#__system___float_fromuns
03314     3A FB 61 F5 | 	xor	result1, local44
03318     FD 12 02 F6 | 	mov	arg01, result1
0331c     7C F6 B1 FD | 	call	#__system__str_S
03320     18 FB 61 FC | 	wrlong	result1, local10
03324     10 25 02 F6 | 	mov	local04, local02
03328     12 23 02 F6 | 	mov	local03, local04
0332c     11 31 02 F6 | 	mov	local10, local03
03330     03 30 66 F0 | 	shl	local10, #3
03334     35 00 00 FF 
03338     0C E4 05 F1 | 	add	objptr, ##27148
0333c     F2 30 02 F1 | 	add	local10, objptr
03340     04 30 06 F1 | 	add	local10, #4
03344     01 00 80 FF 
03348     18 03 68 FC | 	wrlong	##513, local10
0334c     35 00 00 FF 
03350     0C E4 85 F1 | 	sub	objptr, ##27148
03354     84 02 90 FD | 	jmp	#LR__0182
03358                 | LR__0174
03358     10 27 02 F6 | 	mov	local05, local02
0335c     03 26 66 F0 | 	shl	local05, #3
03360     35 00 00 FF 
03364     0C E4 05 F1 | 	add	objptr, ##27148
03368     F2 26 02 F1 | 	add	local05, objptr
0336c     13 13 02 FB | 	rdlong	arg01, local05
03370     35 00 00 FF 
03374     0C E4 85 F1 | 	sub	objptr, ##27148
03378     98 29 B0 FD | 	call	#_isnum
0337c     FD 76 02 F6 | 	mov	local45, result1
03380     10 27 02 F6 | 	mov	local05, local02
03384     03 26 66 F0 | 	shl	local05, #3
03388     35 00 00 FF 
0338c     0C E4 05 F1 | 	add	objptr, ##27148
03390     F2 26 02 F1 | 	add	local05, objptr
03394     13 13 02 FB | 	rdlong	arg01, local05
03398     35 00 00 FF 
0339c     0C E4 85 F1 | 	sub	objptr, ##27148
033a0     D4 2C B0 FD | 	call	#_isint
033a4     FD 78 02 F6 | 	mov	local46, result1
033a8     10 27 02 F6 | 	mov	local05, local02
033ac     03 26 66 F0 | 	shl	local05, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 26 02 F1 | 	add	local05, objptr
033bc     13 13 02 FB | 	rdlong	arg01, local05
033c0     35 00 00 FF 
033c4     0C E4 85 F1 | 	sub	objptr, ##27148
033c8     BC 2E B0 FD | 	call	#_isdec
033cc     FD 7A 02 F6 | 	mov	local47, result1
033d0                 | ' 
033d0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
033d0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
033d0     00 76 0E F2 | 	cmp	local45, #0 wz
033d4     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
033d8     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
033dc     34 00 90 AD |  if_e	jmp	#LR__0175
033e0     10 25 02 F6 | 	mov	local04, local02
033e4     12 23 02 F6 | 	mov	local03, local04
033e8     11 31 02 F6 | 	mov	local10, local03
033ec     03 30 66 F0 | 	shl	local10, #3
033f0     35 00 00 FF 
033f4     0C E4 05 F1 | 	add	objptr, ##27148
033f8     F2 30 02 F1 | 	add	local10, objptr
033fc     04 30 06 F1 | 	add	local10, #4
03400     01 00 80 FF 
03404     18 01 68 FC | 	wrlong	##512, local10
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     C8 01 90 FD | 	jmp	#LR__0182
03414                 | LR__0175
03414                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03414     00 76 0E F2 | 	cmp	local45, #0 wz
03418     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
0341c     3D 25 22 56 |  if_ne	not	local04, local47
03420     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03424     34 00 90 AD |  if_e	jmp	#LR__0176
03428     10 25 02 F6 | 	mov	local04, local02
0342c     12 23 02 F6 | 	mov	local03, local04
03430     11 31 02 F6 | 	mov	local10, local03
03434     03 30 66 F0 | 	shl	local10, #3
03438     35 00 00 FF 
0343c     0C E4 05 F1 | 	add	objptr, ##27148
03440     F2 30 02 F1 | 	add	local10, objptr
03444     04 30 06 F1 | 	add	local10, #4
03448     01 00 80 FF 
0344c     18 03 68 FC | 	wrlong	##513, local10
03450     35 00 00 FF 
03454     0C E4 85 F1 | 	sub	objptr, ##27148
03458     80 01 90 FD | 	jmp	#LR__0182
0345c                 | LR__0176
0345c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0345c     00 76 0E F2 | 	cmp	local45, #0 wz
03460     3C 25 22 56 |  if_ne	not	local04, local46
03464     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03468     3D 23 22 56 |  if_ne	not	local03, local47
0346c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
03470     34 00 90 AD |  if_e	jmp	#LR__0177
03474     10 25 02 F6 | 	mov	local04, local02
03478     12 23 02 F6 | 	mov	local03, local04
0347c     11 31 02 F6 | 	mov	local10, local03
03480     03 30 66 F0 | 	shl	local10, #3
03484     35 00 00 FF 
03488     0C E4 05 F1 | 	add	objptr, ##27148
0348c     F2 30 02 F1 | 	add	local10, objptr
03490     04 30 06 F1 | 	add	local10, #4
03494     01 00 80 FF 
03498     18 05 68 FC | 	wrlong	##514, local10
0349c     35 00 00 FF 
034a0     0C E4 85 F1 | 	sub	objptr, ##27148
034a4     34 01 90 FD | 	jmp	#LR__0182
034a8                 | LR__0177
034a8                 | ' 
034a8                 | ' if isstring(lparts(i).part$) then 
034a8     10 27 02 F6 | 	mov	local05, local02
034ac     03 26 66 F0 | 	shl	local05, #3
034b0     35 00 00 FF 
034b4     0C E4 05 F1 | 	add	objptr, ##27148
034b8     F2 26 02 F1 | 	add	local05, objptr
034bc     13 13 02 FB | 	rdlong	arg01, local05
034c0     35 00 00 FF 
034c4     0C E4 85 F1 | 	sub	objptr, ##27148
034c8     7C 2E B0 FD | 	call	#_isstring
034cc     00 FA 0D F2 | 	cmp	result1, #0 wz
034d0     A8 00 90 AD |  if_e	jmp	#LR__0180
034d4     10 31 02 F6 | 	mov	local10, local02
034d8     03 30 66 F0 | 	shl	local10, #3
034dc     35 00 00 FF 
034e0     0C E4 05 F1 | 	add	objptr, ##27148
034e4     F2 30 02 F1 | 	add	local10, objptr
034e8     04 30 06 F1 | 	add	local10, #4
034ec     01 00 80 FF 
034f0     18 07 68 FC | 	wrlong	##515, local10
034f4     10 25 02 F6 | 	mov	local04, local02
034f8     12 23 02 F6 | 	mov	local03, local04
034fc     11 31 02 F6 | 	mov	local10, local03
03500     03 30 66 F0 | 	shl	local10, #3
03504     F2 30 02 F1 | 	add	local10, objptr
03508     10 39 02 F6 | 	mov	local14, local02
0350c     03 38 66 F0 | 	shl	local14, #3
03510     F2 38 02 F1 | 	add	local14, objptr
03514     1C 29 02 FB | 	rdlong	local06, local14
03518     02 34 06 F6 | 	mov	local12, #2
0351c     10 49 02 F6 | 	mov	local22, local02
03520     24 4B 02 F6 | 	mov	local23, local22
03524     03 4A 66 F0 | 	shl	local23, #3
03528     F2 4C 02 F6 | 	mov	local24, objptr
0352c     F2 4A 02 F1 | 	add	local23, objptr
03530     25 13 02 FB | 	rdlong	arg01, local23
03534     35 00 00 FF 
03538     0C E4 85 F1 | 	sub	objptr, ##27148
0353c     09 2B 02 F6 | 	mov	local07, arg01
03540     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03544                 | LR__0178
03544     15 FB C9 FA | 	rdbyte	result1, local07 wz
03548     01 2A 06 51 |  if_ne	add	local07, #1
0354c     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
03550                 | LR__0179
03550     09 2B 82 F1 | 	sub	local07, arg01
03554     15 37 02 F6 | 	mov	local13, local07
03558     1B 39 02 F6 | 	mov	local14, local13
0355c     02 38 86 F1 | 	sub	local14, #2
03560     1C 33 02 F6 | 	mov	local11, local14
03564     14 13 02 F6 | 	mov	arg01, local06
03568     1A 15 02 F6 | 	mov	arg02, local12
0356c     19 17 02 F6 | 	mov	arg03, local11
03570     48 F3 B1 FD | 	call	#__system__Mid_S
03574     18 FB 61 FC | 	wrlong	result1, local10
03578     60 00 90 FD | 	jmp	#LR__0182
0357c                 | LR__0180
0357c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0357c     10 23 02 F6 | 	mov	local03, local02
03580     11 27 02 F6 | 	mov	local05, local03
03584     03 26 66 F0 | 	shl	local05, #3
03588     35 00 00 FF 
0358c     0C E4 05 F1 | 	add	objptr, ##27148
03590     F2 26 02 F1 | 	add	local05, objptr
03594     13 13 02 FB | 	rdlong	arg01, local05
03598     35 00 00 FF 
0359c     0C E4 85 F1 | 	sub	objptr, ##27148
035a0     FC 24 B0 FD | 	call	#_isname
035a4     FD 24 0A F6 | 	mov	local04, result1 wz
035a8     30 00 90 AD |  if_e	jmp	#LR__0181
035ac     10 25 02 F6 | 	mov	local04, local02
035b0     12 23 02 F6 | 	mov	local03, local04
035b4     11 31 02 F6 | 	mov	local10, local03
035b8     03 30 66 F0 | 	shl	local10, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 30 02 F1 | 	add	local10, objptr
035c8     04 30 06 F1 | 	add	local10, #4
035cc     01 00 80 FF 
035d0     18 09 68 FC | 	wrlong	##516, local10
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc                 | LR__0181
035dc                 | LR__0182
035dc     01 20 06 F1 | 	add	local02, #1
035e0     54 F8 9F FD | 	jmp	#LR__0171
035e4                 | LR__0183
035e4     1F 31 02 F6 | 	mov	local10, local17
035e8     03 30 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     0C E4 05 F1 | 	add	objptr, ##27148
035f4     F2 30 02 F1 | 	add	local10, objptr
035f8     04 30 06 F1 | 	add	local10, #4
035fc     18 FD 6B FC | 	wrlong	#510, local10
03600     1F 31 02 F6 | 	mov	local10, local17
03604     03 30 66 F0 | 	shl	local10, #3
03608     F2 26 02 F6 | 	mov	local05, objptr
0360c     F2 30 02 F1 | 	add	local10, objptr
03610     80 01 00 FF 
03614     7F 28 06 F6 | 	mov	local06, ##@LR__5087
03618     18 29 62 FC | 	wrlong	local06, local10
0361c     10 00 00 FF 
03620     54 E4 05 F1 | 	add	objptr, ##8276
03624     F2 3E 62 FC | 	wrlong	local17, objptr
03628     45 00 00 FF 
0362c     60 E4 85 F1 | 	sub	objptr, ##35424
03630                 | ' 
03630                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03630                 | ' 
03630                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03630                 | '  
03630                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03630     80 01 00 FF 
03634     80 30 06 F6 | 	mov	local10, ##@LR__5088
03638     37 13 02 F6 | 	mov	arg01, local41
0363c     18 15 02 F6 | 	mov	arg02, local10
03640     0C D1 B1 FD | 	call	#__system___string_cmp
03644     00 FA 0D F2 | 	cmp	result1, #0 wz
03648     FC 00 90 AD |  if_e	jmp	#LR__0184
0364c     80 01 00 FF 
03650     85 26 06 F6 | 	mov	local05, ##@LR__5089
03654     13 31 02 F6 | 	mov	local10, local05
03658     37 13 02 F6 | 	mov	arg01, local41
0365c     18 15 02 F6 | 	mov	arg02, local10
03660     EC D0 B1 FD | 	call	#__system___string_cmp
03664     00 FA 0D F2 | 	cmp	result1, #0 wz
03668     DC 00 90 AD |  if_e	jmp	#LR__0184
0366c     80 01 00 FF 
03670     8A 28 06 F6 | 	mov	local06, ##@LR__5090
03674     14 27 02 F6 | 	mov	local05, local06
03678     37 13 02 F6 | 	mov	arg01, local41
0367c     13 15 02 F6 | 	mov	arg02, local05
03680     CC D0 B1 FD | 	call	#__system___string_cmp
03684     FD 30 0A F6 | 	mov	local10, result1 wz
03688     BC 00 90 AD |  if_e	jmp	#LR__0184
0368c     80 01 00 FF 
03690     8F 34 06 F6 | 	mov	local12, ##@LR__5091
03694     1A 29 02 F6 | 	mov	local06, local12
03698     37 13 02 F6 | 	mov	arg01, local41
0369c     14 15 02 F6 | 	mov	arg02, local06
036a0     AC D0 B1 FD | 	call	#__system___string_cmp
036a4     FD 26 0A F6 | 	mov	local05, result1 wz
036a8     9C 00 90 AD |  if_e	jmp	#LR__0184
036ac     80 01 00 FF 
036b0     93 32 06 F6 | 	mov	local11, ##@LR__5092
036b4     19 35 02 F6 | 	mov	local12, local11
036b8     37 13 02 F6 | 	mov	arg01, local41
036bc     1A 15 02 F6 | 	mov	arg02, local12
036c0     8C D0 B1 FD | 	call	#__system___string_cmp
036c4     FD 28 0A F6 | 	mov	local06, result1 wz
036c8     7C 00 90 AD |  if_e	jmp	#LR__0184
036cc     80 01 00 FF 
036d0     97 38 06 F6 | 	mov	local14, ##@LR__5093
036d4     1C 33 02 F6 | 	mov	local11, local14
036d8     37 13 02 F6 | 	mov	arg01, local41
036dc     19 15 02 F6 | 	mov	arg02, local11
036e0     6C D0 B1 FD | 	call	#__system___string_cmp
036e4     FD 34 0A F6 | 	mov	local12, result1 wz
036e8     5C 00 90 AD |  if_e	jmp	#LR__0184
036ec     80 01 00 FF 
036f0     9A 36 06 F6 | 	mov	local13, ##@LR__5094
036f4     1B 39 02 F6 | 	mov	local14, local13
036f8     37 13 02 F6 | 	mov	arg01, local41
036fc     1C 15 02 F6 | 	mov	arg02, local14
03700     4C D0 B1 FD | 	call	#__system___string_cmp
03704     FD 32 0A F6 | 	mov	local11, result1 wz
03708     3C 00 90 AD |  if_e	jmp	#LR__0184
0370c     80 01 00 FF 
03710     9E 36 06 F6 | 	mov	local13, ##@LR__5095
03714     37 13 02 F6 | 	mov	arg01, local41
03718     1B 15 02 F6 | 	mov	arg02, local13
0371c     30 D0 B1 FD | 	call	#__system___string_cmp
03720     FD 38 0A F6 | 	mov	local14, result1 wz
03724     20 00 90 AD |  if_e	jmp	#LR__0184
03728     80 01 00 FF 
0372c     A4 48 06 F6 | 	mov	local22, ##@LR__5096
03730     24 55 02 F6 | 	mov	local28, local22
03734     37 13 02 F6 | 	mov	arg01, local41
03738     2A 15 02 F6 | 	mov	arg02, local28
0373c     10 D0 B1 FD | 	call	#__system___string_cmp
03740     FD 36 0A F6 | 	mov	local13, result1 wz
03744     84 00 90 5D |  if_ne	jmp	#LR__0185
03748                 | LR__0184
03748     33 55 02 F6 | 	mov	local28, local37
0374c     01 54 06 F1 | 	add	local28, #1
03750     2A 49 02 F6 | 	mov	local22, local28
03754     24 4B 02 F6 | 	mov	local23, local22
03758     03 4A 66 F0 | 	shl	local23, #3
0375c     35 00 00 FF 
03760     0C E4 05 F1 | 	add	objptr, ##27148
03764     F2 4C 02 F6 | 	mov	local24, objptr
03768     F2 4A 02 F1 | 	add	local23, objptr
0376c     04 4A 06 F1 | 	add	local23, #4
03770     25 59 02 FB | 	rdlong	local30, local23
03774     04 4A 86 F1 | 	sub	local23, #4
03778     2C 57 02 F6 | 	mov	local29, local30
0377c     01 00 00 FF 
03780     04 56 0E F2 | 	cmp	local29, ##516 wz
03784     35 00 00 FF 
03788     0C E4 85 F1 | 	sub	objptr, ##27148
0378c     3C 00 90 5D |  if_ne	jmp	#LR__0185
03790     33 31 02 F6 | 	mov	local10, local37
03794     01 30 06 F1 | 	add	local10, #1
03798     03 30 66 F0 | 	shl	local10, #3
0379c     35 00 00 FF 
037a0     0C E4 05 F1 | 	add	objptr, ##27148
037a4     F2 26 02 F6 | 	mov	local05, objptr
037a8     F2 30 02 F1 | 	add	local10, objptr
037ac     01 00 00 FF 
037b0     03 28 06 F6 | 	mov	local06, ##515
037b4     04 30 06 F1 | 	add	local10, #4
037b8     01 00 80 FF 
037bc     18 07 68 FC | 	wrlong	##515, local10
037c0     04 30 86 F1 | 	sub	local10, #4
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0185
037cc                 | ' 
037cc                 | ' ' determine a type of the line and compile it
037cc                 | ' 
037cc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
037cc     35 00 00 FF 
037d0     0C E4 05 F1 | 	add	objptr, ##27148
037d4     F2 12 02 FB | 	rdlong	arg01, objptr
037d8     35 00 00 FF 
037dc     0C E4 85 F1 | 	sub	objptr, ##27148
037e0     A4 2A B0 FD | 	call	#_isdec
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     30 00 90 AD |  if_e	jmp	#LR__0186
037ec     35 00 00 FF 
037f0     0C E4 05 F1 | 	add	objptr, ##27148
037f4     F2 12 02 FB | 	rdlong	arg01, objptr
037f8     35 00 00 FF 
037fc     0C E4 85 F1 | 	sub	objptr, ##27148
03800     00 14 06 F6 | 	mov	arg02, #0
03804     4C 01 B2 FD | 	call	#__system____builtin_atoi
03808     51 00 00 FF 
0380c     C0 E5 05 F1 | 	add	objptr, ##41920
03810     F2 FA 61 FC | 	wrlong	result1, objptr
03814     51 00 00 FF 
03818     C0 E5 85 F1 | 	sub	objptr, ##41920
0381c                 | LR__0186
0381c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
0381c     51 00 00 FF 
03820     C0 E5 05 F1 | 	add	objptr, ##41920
03824     F2 24 02 FB | 	rdlong	local04, objptr
03828     51 00 00 FF 
0382c     C0 E5 85 F1 | 	sub	objptr, ##41920
03830     01 24 16 F2 | 	cmp	local04, #1 wc
03834     40 00 90 CD |  if_b	jmp	#LR__0187
03838     01 3E 0E F2 | 	cmp	local17, #1 wz
0383c     37 00 00 AF 
03840     24 E4 05 A1 |  if_e	add	objptr, ##28196
03844     F2 26 02 AB |  if_e	rdlong	local05, objptr
03848     37 00 00 AF 
0384c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03850     13 31 02 A6 |  if_e	mov	local10, local05
03854     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03858     1C 00 90 5D |  if_ne	jmp	#LR__0187
0385c     51 00 00 FF 
03860     C0 E5 05 F1 | 	add	objptr, ##41920
03864     F2 12 02 FB | 	rdlong	arg01, objptr
03868     51 00 00 FF 
0386c     C0 E5 85 F1 | 	sub	objptr, ##41920
03870     38 2B B0 FD | 	call	#_deleteline
03874     48 03 90 FD | 	jmp	#LR__0195
03878                 | LR__0187
03878                 | ' 
03878                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03878     37 00 00 FF 
0387c     24 E4 05 F1 | 	add	objptr, ##28196
03880     F2 24 0A FB | 	rdlong	local04, objptr wz
03884     37 00 00 FF 
03888     24 E4 85 F1 | 	sub	objptr, ##28196
0388c     37 00 00 5F 
03890     24 E4 05 51 |  if_ne	add	objptr, ##28196
03894     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03898     37 00 00 5F 
0389c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038a0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038a4     AC 00 90 5D |  if_ne	jmp	#LR__0189
038a8     35 00 00 FF 
038ac     20 E4 05 F1 | 	add	objptr, ##27168
038b0     F2 34 02 FB | 	rdlong	local12, objptr
038b4     35 00 00 FF 
038b8     20 E4 85 F1 | 	sub	objptr, ##27168
038bc     1B 34 0E F2 | 	cmp	local12, #27 wz
038c0     90 00 90 AD |  if_e	jmp	#LR__0189
038c4     51 00 00 FF 
038c8     C0 E5 05 F1 | 	add	objptr, ##41920
038cc     F2 12 02 FB | 	rdlong	arg01, objptr
038d0     1A 00 00 FF 
038d4     9C E5 85 F1 | 	sub	objptr, ##13724
038d8     F2 16 02 FB | 	rdlong	arg03, objptr
038dc     37 00 00 FF 
038e0     24 E4 85 F1 | 	sub	objptr, ##28196
038e4     00 14 06 F6 | 	mov	arg02, #0
038e8     04 40 B0 FD | 	call	#_compile
038ec     FD 1E 0A F6 | 	mov	local01, result1 wz
038f0                 | '   err=compile(linenum,0,cont) 
038f0                 | '   if err<>0 then printerror(err): goto 104
038f0     0C 00 90 AD |  if_e	jmp	#LR__0188
038f4     0F 13 02 F6 | 	mov	arg01, local01
038f8     C8 9A B1 FD | 	call	#_printerror
038fc     C0 02 90 FD | 	jmp	#LR__0195
03900                 | LR__0188
03900                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03900     51 00 00 FF 
03904     F4 E5 05 F1 | 	add	objptr, ##41972
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     51 00 00 FF 
03910     F4 E5 85 F1 | 	sub	objptr, ##41972
03914     80 01 00 FF 
03918     A7 14 06 F6 | 	mov	arg02, ##@LR__5097
0391c     30 CE B1 FD | 	call	#__system___string_cmp
03920     00 FA 0D F2 | 	cmp	result1, #0 wz
03924     98 02 90 AD |  if_e	jmp	#LR__0195
03928     51 00 00 FF 
0392c     F4 E5 05 F1 | 	add	objptr, ##41972
03930     F2 24 02 FB | 	rdlong	local04, objptr
03934     1A 00 00 FF 
03938     D8 E5 85 F1 | 	sub	objptr, ##13784
0393c     F2 24 62 FC | 	wrlong	local04, objptr
03940     08 E4 05 F1 | 	add	objptr, #8
03944     F2 08 68 FC | 	wrlong	#4, objptr
03948     37 00 00 FF 
0394c     24 E4 85 F1 | 	sub	objptr, ##28196
03950     54 DD 9F FD | 	jmp	#LR__0070
03954                 | LR__0189
03954                 | '       							
03954                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03954     37 00 00 FF 
03958     24 E4 05 F1 | 	add	objptr, ##28196
0395c     F2 24 02 FB | 	rdlong	local04, objptr
03960     37 00 00 FF 
03964     24 E4 85 F1 | 	sub	objptr, ##28196
03968     01 24 0E F2 | 	cmp	local04, #1 wz
0396c     37 00 00 5F 
03970     24 E4 05 51 |  if_ne	add	objptr, ##28196
03974     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03978     37 00 00 5F 
0397c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03980     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03984     AC 00 90 5D |  if_ne	jmp	#LR__0191
03988     35 00 00 FF 
0398c     18 E4 05 F1 | 	add	objptr, ##27160
03990     F2 34 02 FB | 	rdlong	local12, objptr
03994     35 00 00 FF 
03998     18 E4 85 F1 | 	sub	objptr, ##27160
0399c     1B 34 0E F2 | 	cmp	local12, #27 wz
039a0     90 00 90 AD |  if_e	jmp	#LR__0191
039a4     51 00 00 FF 
039a8     C0 E5 05 F1 | 	add	objptr, ##41920
039ac     F2 12 02 FB | 	rdlong	arg01, objptr
039b0     1A 00 00 FF 
039b4     9C E5 85 F1 | 	sub	objptr, ##13724
039b8     F2 16 02 FB | 	rdlong	arg03, objptr
039bc     37 00 00 FF 
039c0     24 E4 85 F1 | 	sub	objptr, ##28196
039c4     00 14 06 F6 | 	mov	arg02, #0
039c8     24 3F B0 FD | 	call	#_compile
039cc     FD 1E 0A F6 | 	mov	local01, result1 wz
039d0                 | '   err=compile(linenum,0,cont) 
039d0                 | '   if err<>0 then printerror(err): goto 104
039d0     0C 00 90 AD |  if_e	jmp	#LR__0190
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     E8 99 B1 FD | 	call	#_printerror
039dc     E0 01 90 FD | 	jmp	#LR__0195
039e0                 | LR__0190
039e0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
039e0     51 00 00 FF 
039e4     F4 E5 05 F1 | 	add	objptr, ##41972
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     51 00 00 FF 
039f0     F4 E5 85 F1 | 	sub	objptr, ##41972
039f4     80 01 00 FF 
039f8     A8 14 06 F6 | 	mov	arg02, ##@LR__5098
039fc     50 CD B1 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     B8 01 90 AD |  if_e	jmp	#LR__0195
03a08     51 00 00 FF 
03a0c     F4 E5 05 F1 | 	add	objptr, ##41972
03a10     F2 24 02 FB | 	rdlong	local04, objptr
03a14     1A 00 00 FF 
03a18     D8 E5 85 F1 | 	sub	objptr, ##13784
03a1c     F2 24 62 FC | 	wrlong	local04, objptr
03a20     08 E4 05 F1 | 	add	objptr, #8
03a24     F2 08 68 FC | 	wrlong	#4, objptr
03a28     37 00 00 FF 
03a2c     24 E4 85 F1 | 	sub	objptr, ##28196
03a30     74 DC 9F FD | 	jmp	#LR__0070
03a34                 | LR__0191
03a34                 | ' 							 
03a34                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a34     37 00 00 FF 
03a38     24 E4 05 F1 | 	add	objptr, ##28196
03a3c     F2 24 0A FB | 	rdlong	local04, objptr wz
03a40     37 00 00 FF 
03a44     24 E4 85 F1 | 	sub	objptr, ##28196
03a48     37 00 00 5F 
03a4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a50     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a54     37 00 00 5F 
03a58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a5c     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a60     35 00 00 AF 
03a64     20 E4 05 A1 |  if_e	add	objptr, ##27168
03a68     F2 34 02 AB |  if_e	rdlong	local12, objptr
03a6c     35 00 00 AF 
03a70     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03a74     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03a78     7C 00 90 5D |  if_ne	jmp	#LR__0192
03a7c     51 00 00 FF 
03a80     C0 E5 05 F1 | 	add	objptr, ##41920
03a84     F2 12 02 FB | 	rdlong	arg01, objptr
03a88     1A 00 00 FF 
03a8c     9C E5 85 F1 | 	sub	objptr, ##13724
03a90     F2 16 02 FB | 	rdlong	arg03, objptr
03a94     37 00 00 FF 
03a98     24 E4 85 F1 | 	sub	objptr, ##28196
03a9c     00 14 06 F6 | 	mov	arg02, #0
03aa0     10 3F B0 FD | 	call	#_compile_assign
03aa4                 | '   compile_assign(linenum,0,cont)
03aa4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03aa4     51 00 00 FF 
03aa8     F4 E5 05 F1 | 	add	objptr, ##41972
03aac     F2 12 02 FB | 	rdlong	arg01, objptr
03ab0     51 00 00 FF 
03ab4     F4 E5 85 F1 | 	sub	objptr, ##41972
03ab8     80 01 00 FF 
03abc     A9 14 06 F6 | 	mov	arg02, ##@LR__5099
03ac0     8C CC B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     F4 00 90 AD |  if_e	jmp	#LR__0195
03acc     51 00 00 FF 
03ad0     F4 E5 05 F1 | 	add	objptr, ##41972
03ad4     F2 24 02 FB | 	rdlong	local04, objptr
03ad8     1A 00 00 FF 
03adc     D8 E5 85 F1 | 	sub	objptr, ##13784
03ae0     F2 24 62 FC | 	wrlong	local04, objptr
03ae4     08 E4 05 F1 | 	add	objptr, #8
03ae8     F2 08 68 FC | 	wrlong	#4, objptr
03aec     37 00 00 FF 
03af0     24 E4 85 F1 | 	sub	objptr, ##28196
03af4     B0 DB 9F FD | 	jmp	#LR__0070
03af8                 | LR__0192
03af8                 | '     							 
03af8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03af8     37 00 00 FF 
03afc     24 E4 05 F1 | 	add	objptr, ##28196
03b00     F2 24 02 FB | 	rdlong	local04, objptr
03b04     37 00 00 FF 
03b08     24 E4 85 F1 | 	sub	objptr, ##28196
03b0c     01 24 0E F2 | 	cmp	local04, #1 wz
03b10     37 00 00 5F 
03b14     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b18     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b1c     37 00 00 5F 
03b20     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b24     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b28     35 00 00 AF 
03b2c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b30     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b34     35 00 00 AF 
03b38     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b3c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b40     7C 00 90 5D |  if_ne	jmp	#LR__0194
03b44     51 00 00 FF 
03b48     C0 E5 05 F1 | 	add	objptr, ##41920
03b4c     F2 12 02 FB | 	rdlong	arg01, objptr
03b50     1A 00 00 FF 
03b54     9C E5 85 F1 | 	sub	objptr, ##13724
03b58     F2 16 02 FB | 	rdlong	arg03, objptr
03b5c     37 00 00 FF 
03b60     24 E4 85 F1 | 	sub	objptr, ##28196
03b64     00 14 06 F6 | 	mov	arg02, #0
03b68     48 3E B0 FD | 	call	#_compile_assign
03b6c                 | '   compile_assign(linenum,0,cont) 
03b6c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03b6c     51 00 00 FF 
03b70     F4 E5 05 F1 | 	add	objptr, ##41972
03b74     F2 12 02 FB | 	rdlong	arg01, objptr
03b78     51 00 00 FF 
03b7c     F4 E5 85 F1 | 	sub	objptr, ##41972
03b80     80 01 00 FF 
03b84     AA 14 06 F6 | 	mov	arg02, ##@LR__5100
03b88     C4 CB B1 FD | 	call	#__system___string_cmp
03b8c     00 FA 4D F2 | 	cmps	result1, #0 wz
03b90     2C 00 90 AD |  if_e	jmp	#LR__0193
03b94     51 00 00 FF 
03b98     F4 E5 05 F1 | 	add	objptr, ##41972
03b9c     F2 24 02 FB | 	rdlong	local04, objptr
03ba0     1A 00 00 FF 
03ba4     D8 E5 85 F1 | 	sub	objptr, ##13784
03ba8     F2 24 62 FC | 	wrlong	local04, objptr
03bac     08 E4 05 F1 | 	add	objptr, #8
03bb0     F2 08 68 FC | 	wrlong	#4, objptr
03bb4     37 00 00 FF 
03bb8     24 E4 85 F1 | 	sub	objptr, ##28196
03bbc     E8 DA 9F FD | 	jmp	#LR__0070
03bc0                 | LR__0193
03bc0                 | LR__0194
03bc0                 | LR__0195
03bc0                 | ' 
03bc0                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03bc0     51 00 00 FF 
03bc4     C0 E5 05 F1 | 	add	objptr, ##41920
03bc8     F2 24 0A FB | 	rdlong	local04, objptr wz
03bcc     51 00 00 FF 
03bd0     C0 E5 85 F1 | 	sub	objptr, ##41920
03bd4     28 00 90 5D |  if_ne	jmp	#LR__0197
03bd8     02 12 06 F6 | 	mov	arg01, #2
03bdc     C0 7C B0 FD | 	call	#_execute_line
03be0                 | LR__0196
03be0     80 01 00 FF 
03be4     AB 12 06 F6 | 	mov	arg01, ##@LR__5101
03be8                 | ' 
03be8                 | ' write(text)
03be8     54 B8 B1 FD | 	call	#_hg010b_spin2_write
03bec                 | ' crlf
03bec     1C BB B1 FD | 	call	#_hg010b_spin2_crlf
03bf0     80 01 00 FF 
03bf4     AC 12 06 F6 | 	mov	arg01, ##@LR__5102
03bf8                 | ' 
03bf8                 | ' write(text)
03bf8     44 B8 B1 FD | 	call	#_hg010b_spin2_write
03bfc                 | ' crlf
03bfc     0C BB B1 FD | 	call	#_hg010b_spin2_crlf
03c00                 | LR__0197
03c00     A7 F0 03 F6 | 	mov	ptra, fp
03c04     B2 00 A0 FD | 	call	#popregs_
03c08                 | _interpret_ret
03c08     2D 00 64 FD | 	ret
03c0c                 | 
03c0c                 | ' 
03c0c                 | ' '---------------------------------------------------------------------------------------------------------------------
03c0c                 | ' '
03c0c                 | ' '                          END OF TOKENIZER MAIN CODE
03c0c                 | ' '
03c0c                 | ' '---------------------------------------------------------------------------------------------------------------------
03c0c                 | ' 
03c0c                 | ' '---------------------------------------------------------------------------------------------------------------------
03c0c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c0c                 | ' '---------------------------------------------------------------------------------------------------------------------
03c0c                 | ' 
03c0c                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c0c                 | ' 
03c0c                 | ' function isoperator(s as string) as ubyte
03c0c                 | _isoperator
03c0c     01 4A 05 F6 | 	mov	COUNT_, #1
03c10     A8 00 A0 FD | 	call	#pushregs_
03c14                 | ' 
03c14                 | ' select case s
03c14     09 1F 02 F6 | 	mov	local01, arg01
03c18     80 01 00 FF 
03c1c     B2 14 06 F6 | 	mov	arg02, ##@LR__5103
03c20     0F 13 02 F6 | 	mov	arg01, local01
03c24     28 CB B1 FD | 	call	#__system___string_cmp
03c28     00 FA 0D F2 | 	cmp	result1, #0 wz
03c2c     FC 01 90 AD |  if_e	jmp	#LR__0200
03c30     80 01 00 FF 
03c34     B4 14 06 F6 | 	mov	arg02, ##@LR__5104
03c38     0F 13 02 F6 | 	mov	arg01, local01
03c3c     10 CB B1 FD | 	call	#__system___string_cmp
03c40     00 FA 0D F2 | 	cmp	result1, #0 wz
03c44     EC 01 90 AD |  if_e	jmp	#LR__0201
03c48     80 01 00 FF 
03c4c     B6 14 06 F6 | 	mov	arg02, ##@LR__5105
03c50     0F 13 02 F6 | 	mov	arg01, local01
03c54     F8 CA B1 FD | 	call	#__system___string_cmp
03c58     00 FA 0D F2 | 	cmp	result1, #0 wz
03c5c     DC 01 90 AD |  if_e	jmp	#LR__0202
03c60     80 01 00 FF 
03c64     B9 14 06 F6 | 	mov	arg02, ##@LR__5106
03c68     0F 13 02 F6 | 	mov	arg01, local01
03c6c     E0 CA B1 FD | 	call	#__system___string_cmp
03c70     00 FA 0D F2 | 	cmp	result1, #0 wz
03c74     CC 01 90 AD |  if_e	jmp	#LR__0203
03c78     80 01 00 FF 
03c7c     BD 14 06 F6 | 	mov	arg02, ##@LR__5107
03c80     0F 13 02 F6 | 	mov	arg01, local01
03c84     C8 CA B1 FD | 	call	#__system___string_cmp
03c88     00 FA 0D F2 | 	cmp	result1, #0 wz
03c8c     BC 01 90 AD |  if_e	jmp	#LR__0204
03c90     80 01 00 FF 
03c94     BF 14 06 F6 | 	mov	arg02, ##@LR__5108
03c98     0F 13 02 F6 | 	mov	arg01, local01
03c9c     B0 CA B1 FD | 	call	#__system___string_cmp
03ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca4     AC 01 90 AD |  if_e	jmp	#LR__0205
03ca8     80 01 00 FF 
03cac     C1 14 06 F6 | 	mov	arg02, ##@LR__5109
03cb0     0F 13 02 F6 | 	mov	arg01, local01
03cb4     98 CA B1 FD | 	call	#__system___string_cmp
03cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cbc     9C 01 90 AD |  if_e	jmp	#LR__0206
03cc0     80 01 00 FF 
03cc4     C5 14 06 F6 | 	mov	arg02, ##@LR__5110
03cc8     0F 13 02 F6 | 	mov	arg01, local01
03ccc     80 CA B1 FD | 	call	#__system___string_cmp
03cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd4     8C 01 90 AD |  if_e	jmp	#LR__0207
03cd8     80 01 00 FF 
03cdc     C9 14 06 F6 | 	mov	arg02, ##@LR__5111
03ce0     0F 13 02 F6 | 	mov	arg01, local01
03ce4     68 CA B1 FD | 	call	#__system___string_cmp
03ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cec     7C 01 90 AD |  if_e	jmp	#LR__0208
03cf0     80 01 00 FF 
03cf4     CD 14 06 F6 | 	mov	arg02, ##@LR__5112
03cf8     0F 13 02 F6 | 	mov	arg01, local01
03cfc     50 CA B1 FD | 	call	#__system___string_cmp
03d00     00 FA 0D F2 | 	cmp	result1, #0 wz
03d04     6C 01 90 AD |  if_e	jmp	#LR__0209
03d08     80 01 00 FF 
03d0c     D1 14 06 F6 | 	mov	arg02, ##@LR__5113
03d10     0F 13 02 F6 | 	mov	arg01, local01
03d14     38 CA B1 FD | 	call	#__system___string_cmp
03d18     00 FA 0D F2 | 	cmp	result1, #0 wz
03d1c     5C 01 90 AD |  if_e	jmp	#LR__0210
03d20     80 01 00 FF 
03d24     D5 14 06 F6 | 	mov	arg02, ##@LR__5114
03d28     0F 13 02 F6 | 	mov	arg01, local01
03d2c     20 CA B1 FD | 	call	#__system___string_cmp
03d30     00 FA 0D F2 | 	cmp	result1, #0 wz
03d34     4C 01 90 AD |  if_e	jmp	#LR__0211
03d38     80 01 00 FF 
03d3c     D7 14 06 F6 | 	mov	arg02, ##@LR__5115
03d40     0F 13 02 F6 | 	mov	arg01, local01
03d44     08 CA B1 FD | 	call	#__system___string_cmp
03d48     00 FA 0D F2 | 	cmp	result1, #0 wz
03d4c     3C 01 90 AD |  if_e	jmp	#LR__0212
03d50     80 01 00 FF 
03d54     DB 14 06 F6 | 	mov	arg02, ##@LR__5116
03d58     0F 13 02 F6 | 	mov	arg01, local01
03d5c     F0 C9 B1 FD | 	call	#__system___string_cmp
03d60     00 FA 0D F2 | 	cmp	result1, #0 wz
03d64     2C 01 90 AD |  if_e	jmp	#LR__0213
03d68     80 01 00 FF 
03d6c     DD 14 06 F6 | 	mov	arg02, ##@LR__5117
03d70     0F 13 02 F6 | 	mov	arg01, local01
03d74     D8 C9 B1 FD | 	call	#__system___string_cmp
03d78     00 FA 0D F2 | 	cmp	result1, #0 wz
03d7c     1C 01 90 AD |  if_e	jmp	#LR__0214
03d80     80 01 00 FF 
03d84     DF 14 06 F6 | 	mov	arg02, ##@LR__5118
03d88     0F 13 02 F6 | 	mov	arg01, local01
03d8c     C0 C9 B1 FD | 	call	#__system___string_cmp
03d90     00 FA 0D F2 | 	cmp	result1, #0 wz
03d94     0C 01 90 AD |  if_e	jmp	#LR__0215
03d98     80 01 00 FF 
03d9c     E2 14 06 F6 | 	mov	arg02, ##@LR__5119
03da0     0F 13 02 F6 | 	mov	arg01, local01
03da4     A8 C9 B1 FD | 	call	#__system___string_cmp
03da8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dac     FC 00 90 AD |  if_e	jmp	#LR__0216
03db0     80 01 00 FF 
03db4     E5 14 06 F6 | 	mov	arg02, ##@LR__5120
03db8     0F 13 02 F6 | 	mov	arg01, local01
03dbc     90 C9 B1 FD | 	call	#__system___string_cmp
03dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc4     EC 00 90 AD |  if_e	jmp	#LR__0217
03dc8     80 01 00 FF 
03dcc     E7 14 06 F6 | 	mov	arg02, ##@LR__5121
03dd0     0F 13 02 F6 | 	mov	arg01, local01
03dd4     78 C9 B1 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     DC 00 90 AD |  if_e	jmp	#LR__0218
03de0     80 01 00 FF 
03de4     E9 14 06 F6 | 	mov	arg02, ##@LR__5122
03de8     0F 13 02 F6 | 	mov	arg01, local01
03dec     60 C9 B1 FD | 	call	#__system___string_cmp
03df0     00 FA 0D F2 | 	cmp	result1, #0 wz
03df4     CC 00 90 AD |  if_e	jmp	#LR__0219
03df8     80 01 00 FF 
03dfc     EC 14 06 F6 | 	mov	arg02, ##@LR__5123
03e00     0F 13 02 F6 | 	mov	arg01, local01
03e04     48 C9 B1 FD | 	call	#__system___string_cmp
03e08     00 FA 0D F2 | 	cmp	result1, #0 wz
03e0c     BC 00 90 AD |  if_e	jmp	#LR__0220
03e10     80 01 00 FF 
03e14     EF 14 06 F6 | 	mov	arg02, ##@LR__5124
03e18     0F 13 02 F6 | 	mov	arg01, local01
03e1c     30 C9 B1 FD | 	call	#__system___string_cmp
03e20     00 FA 0D F2 | 	cmp	result1, #0 wz
03e24     AC 00 90 AD |  if_e	jmp	#LR__0221
03e28     B0 00 90 FD | 	jmp	#LR__0222
03e2c                 | LR__0200
03e2c     01 FA 05 F6 | 	mov	result1, #1
03e30     AC 00 90 FD | 	jmp	#LR__0223
03e34                 | LR__0201
03e34     02 FA 05 F6 | 	mov	result1, #2
03e38     A4 00 90 FD | 	jmp	#LR__0223
03e3c                 | LR__0202
03e3c     03 FA 05 F6 | 	mov	result1, #3
03e40     9C 00 90 FD | 	jmp	#LR__0223
03e44                 | LR__0203
03e44     04 FA 05 F6 | 	mov	result1, #4
03e48     94 00 90 FD | 	jmp	#LR__0223
03e4c                 | LR__0204
03e4c     05 FA 05 F6 | 	mov	result1, #5
03e50     8C 00 90 FD | 	jmp	#LR__0223
03e54                 | LR__0205
03e54     06 FA 05 F6 | 	mov	result1, #6
03e58     84 00 90 FD | 	jmp	#LR__0223
03e5c                 | LR__0206
03e5c     07 FA 05 F6 | 	mov	result1, #7
03e60     7C 00 90 FD | 	jmp	#LR__0223
03e64                 | LR__0207
03e64     08 FA 05 F6 | 	mov	result1, #8
03e68     74 00 90 FD | 	jmp	#LR__0223
03e6c                 | LR__0208
03e6c     09 FA 05 F6 | 	mov	result1, #9
03e70     6C 00 90 FD | 	jmp	#LR__0223
03e74                 | LR__0209
03e74     0A FA 05 F6 | 	mov	result1, #10
03e78     64 00 90 FD | 	jmp	#LR__0223
03e7c                 | LR__0210
03e7c     0B FA 05 F6 | 	mov	result1, #11
03e80     5C 00 90 FD | 	jmp	#LR__0223
03e84                 | LR__0211
03e84     0C FA 05 F6 | 	mov	result1, #12
03e88     54 00 90 FD | 	jmp	#LR__0223
03e8c                 | LR__0212
03e8c     0D FA 05 F6 | 	mov	result1, #13
03e90     4C 00 90 FD | 	jmp	#LR__0223
03e94                 | LR__0213
03e94     0E FA 05 F6 | 	mov	result1, #14
03e98     44 00 90 FD | 	jmp	#LR__0223
03e9c                 | LR__0214
03e9c     1B FA 05 F6 | 	mov	result1, #27
03ea0     3C 00 90 FD | 	jmp	#LR__0223
03ea4                 | LR__0215
03ea4     27 FA 05 F6 | 	mov	result1, #39
03ea8     34 00 90 FD | 	jmp	#LR__0223
03eac                 | LR__0216
03eac     26 FA 05 F6 | 	mov	result1, #38
03eb0     2C 00 90 FD | 	jmp	#LR__0223
03eb4                 | LR__0217
03eb4     10 FA 05 F6 | 	mov	result1, #16
03eb8     24 00 90 FD | 	jmp	#LR__0223
03ebc                 | LR__0218
03ebc     0F FA 05 F6 | 	mov	result1, #15
03ec0     1C 00 90 FD | 	jmp	#LR__0223
03ec4                 | LR__0219
03ec4     2A FA 05 F6 | 	mov	result1, #42
03ec8     14 00 90 FD | 	jmp	#LR__0223
03ecc                 | LR__0220
03ecc     28 FA 05 F6 | 	mov	result1, #40
03ed0     0C 00 90 FD | 	jmp	#LR__0223
03ed4                 | LR__0221
03ed4     29 FA 05 F6 | 	mov	result1, #41
03ed8     04 00 90 FD | 	jmp	#LR__0223
03edc                 | LR__0222
03edc     00 FA 05 F6 | 	mov	result1, #0
03ee0                 | LR__0223
03ee0     A7 F0 03 F6 | 	mov	ptra, fp
03ee4     B2 00 A0 FD | 	call	#popregs_
03ee8                 | _isoperator_ret
03ee8     2D 00 64 FD | 	ret
03eec                 | 
03eec                 | ' 
03eec                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03eec                 | ' 
03eec                 | ' function ischannel(s as string) as ulong
03eec                 | _ischannel
03eec     02 4A 05 F6 | 	mov	COUNT_, #2
03ef0     A8 00 A0 FD | 	call	#pushregs_
03ef4                 | ' if left$(s,1)<>"#" then return 0
03ef4     09 1F 02 F6 | 	mov	local01, arg01
03ef8     01 14 06 F6 | 	mov	arg02, #1
03efc     A4 E8 B1 FD | 	call	#__system__Left_S
03f00     FD 12 02 F6 | 	mov	arg01, result1
03f04     80 01 00 FF 
03f08     F2 14 06 F6 | 	mov	arg02, ##@LR__5125
03f0c     40 C8 B1 FD | 	call	#__system___string_cmp
03f10     00 FA 0D F2 | 	cmp	result1, #0 wz
03f14     00 FA 05 56 |  if_ne	mov	result1, #0
03f18     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f1c                 | ' if len(s)<>2 then return 0
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     09 21 02 F6 | 	mov	local02, arg01
03f24     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f28                 | LR__0230
03f28     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f2c     01 20 06 51 |  if_ne	add	local02, #1
03f30     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f34                 | LR__0231
03f34     09 21 82 F1 | 	sub	local02, arg01
03f38     10 FB 01 F6 | 	mov	result1, local02
03f3c     02 FA 0D F2 | 	cmp	result1, #2 wz
03f40     00 FA 05 56 |  if_ne	mov	result1, #0
03f44     80 00 90 5D |  if_ne	jmp	#LR__0234
03f48                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03f48     0F 13 02 F6 | 	mov	arg01, local01
03f4c     01 14 06 F6 | 	mov	arg02, #1
03f50     D8 E8 B1 FD | 	call	#__system__Right_S
03f54     FD 12 02 F6 | 	mov	arg01, result1
03f58     80 01 00 FF 
03f5c     F4 14 06 F6 | 	mov	arg02, ##@LR__5126
03f60     EC C7 B1 FD | 	call	#__system___string_cmp
03f64     00 FA 55 F2 | 	cmps	result1, #0 wc
03f68     24 00 90 CD |  if_b	jmp	#LR__0232
03f6c     0F 13 02 F6 | 	mov	arg01, local01
03f70     01 14 06 F6 | 	mov	arg02, #1
03f74     B4 E8 B1 FD | 	call	#__system__Right_S
03f78     FD 12 02 F6 | 	mov	arg01, result1
03f7c     80 01 00 FF 
03f80     F6 14 06 F6 | 	mov	arg02, ##@LR__5127
03f84     C8 C7 B1 FD | 	call	#__system___string_cmp
03f88     01 FA 55 F2 | 	cmps	result1, #1 wc
03f8c     08 00 90 CD |  if_b	jmp	#LR__0233
03f90                 | LR__0232
03f90     00 FA 05 F6 | 	mov	result1, #0
03f94     30 00 90 FD | 	jmp	#LR__0234
03f98                 | LR__0233
03f98                 | ' return token_channel+val(right$(s,1))
03f98     0F 13 02 F6 | 	mov	arg01, local01
03f9c     01 14 06 F6 | 	mov	arg02, #1
03fa0     88 E8 B1 FD | 	call	#__system__Right_S
03fa4     FD 12 02 F6 | 	mov	arg01, result1
03fa8     18 FB B1 FD | 	call	#__system____builtin_atof
03fac     FD 14 02 F6 | 	mov	arg02, result1
03fb0     00 18 21 FF 
03fb4     00 12 06 F6 | 	mov	arg01, ##1110441984
03fb8     50 EF B1 FD | 	call	#__system___float_add
03fbc     FD 12 02 F6 | 	mov	arg01, result1
03fc0     00 14 06 F6 | 	mov	arg02, #0
03fc4     DC F7 B1 FD | 	call	#__system___float_tointeger
03fc8                 | LR__0234
03fc8     A7 F0 03 F6 | 	mov	ptra, fp
03fcc     B2 00 A0 FD | 	call	#popregs_
03fd0                 | _ischannel_ret
03fd0     2D 00 64 FD | 	ret
03fd4                 | 
03fd4                 | ' 
03fd4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
03fd4                 | ' ' todo: add spin2/pasm constants for pin control
03fd4                 | ' 
03fd4                 | ' function isconstant(s as string) as integer
03fd4                 | _isconstant
03fd4     01 4A 05 F6 | 	mov	COUNT_, #1
03fd8     A8 00 A0 FD | 	call	#pushregs_
03fdc                 | ' 
03fdc                 | ' select case s
03fdc     09 1F 02 F6 | 	mov	local01, arg01
03fe0     80 01 00 FF 
03fe4     F8 14 06 F6 | 	mov	arg02, ##@LR__5128
03fe8     0F 13 02 F6 | 	mov	arg01, local01
03fec     60 C7 B1 FD | 	call	#__system___string_cmp
03ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff4     34 00 90 AD |  if_e	jmp	#LR__0240
03ff8     80 01 00 FF 
03ffc     FE 14 06 F6 | 	mov	arg02, ##@LR__5129
04000     0F 13 02 F6 | 	mov	arg01, local01
04004     48 C7 B1 FD | 	call	#__system___string_cmp
04008     00 FA 0D F2 | 	cmp	result1, #0 wz
0400c     24 00 90 AD |  if_e	jmp	#LR__0241
04010     80 01 00 FF 
04014     05 15 06 F6 | 	mov	arg02, ##@LR__5130
04018     0F 13 02 F6 | 	mov	arg01, local01
0401c     30 C7 B1 FD | 	call	#__system___string_cmp
04020     00 FA 0D F2 | 	cmp	result1, #0 wz
04024     14 00 90 AD |  if_e	jmp	#LR__0242
04028     18 00 90 FD | 	jmp	#LR__0243
0402c                 | LR__0240
0402c     01 FA 05 F6 | 	mov	result1, #1
04030     14 00 90 FD | 	jmp	#LR__0244
04034                 | LR__0241
04034     02 FA 05 F6 | 	mov	result1, #2
04038     0C 00 90 FD | 	jmp	#LR__0244
0403c                 | LR__0242
0403c     04 FA 05 F6 | 	mov	result1, #4
04040     04 00 90 FD | 	jmp	#LR__0244
04044                 | LR__0243
04044     00 FA 05 F6 | 	mov	result1, #0
04048                 | LR__0244
04048     A7 F0 03 F6 | 	mov	ptra, fp
0404c     B2 00 A0 FD | 	call	#popregs_
04050                 | _isconstant_ret
04050     2D 00 64 FD | 	ret
04054                 | 
04054                 | ' 
04054                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04054                 | ' 
04054                 | ' function isnotename(s as string) as ulong
04054                 | _isnotename
04054     07 4A 05 F6 | 	mov	COUNT_, #7
04058     A8 00 A0 FD | 	call	#pushregs_
0405c                 | ' if left$(s,1)<>"#" then return 0
0405c     09 1F 02 F6 | 	mov	local01, arg01
04060     01 14 06 F6 | 	mov	arg02, #1
04064     3C E7 B1 FD | 	call	#__system__Left_S
04068     FD 12 02 F6 | 	mov	arg01, result1
0406c     80 01 00 FF 
04070     0D 15 06 F6 | 	mov	arg02, ##@LR__5131
04074     D8 C6 B1 FD | 	call	#__system___string_cmp
04078     00 FA 0D F2 | 	cmp	result1, #0 wz
0407c     00 FA 05 56 |  if_ne	mov	result1, #0
04080     30 03 90 5D |  if_ne	jmp	#LR__0273
04084                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     03 14 06 F6 | 	mov	arg02, #3
0408c     01 16 06 F6 | 	mov	arg03, #1
04090     28 E8 B1 FD | 	call	#__system__Mid_S
04094     FD 12 02 F6 | 	mov	arg01, result1
04098     80 01 00 FF 
0409c     0F 15 06 F6 | 	mov	arg02, ##@LR__5132
040a0     AC C6 B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     18 00 90 5D |  if_ne	jmp	#LR__0250
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     02 14 06 F6 | 	mov	arg02, #2
040b4     02 16 06 F6 | 	mov	arg03, #2
040b8     00 E8 B1 FD | 	call	#__system__Mid_S
040bc     FD 20 02 F6 | 	mov	local02, result1
040c0     14 00 90 FD | 	jmp	#LR__0251
040c4                 | LR__0250
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     02 14 06 F6 | 	mov	arg02, #2
040cc     01 16 06 F6 | 	mov	arg03, #1
040d0     E8 E7 B1 FD | 	call	#__system__Mid_S
040d4     FD 20 02 F6 | 	mov	local02, result1
040d8                 | LR__0251
040d8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
040d8     0F 13 02 F6 | 	mov	arg01, local01
040dc     09 23 02 F6 | 	mov	local03, arg01
040e0     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
040e4                 | LR__0252
040e4     11 FB C9 FA | 	rdbyte	result1, local03 wz
040e8     01 22 06 51 |  if_ne	add	local03, #1
040ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
040f0                 | LR__0253
040f0     09 23 82 F1 | 	sub	local03, arg01
040f4     11 15 02 F6 | 	mov	arg02, local03
040f8     01 14 86 F1 | 	sub	arg02, #1
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     01 16 06 F6 | 	mov	arg03, #1
04104     B4 E7 B1 FD | 	call	#__system__Mid_S
04108     FD 12 02 F6 | 	mov	arg01, result1
0410c     80 01 00 FF 
04110     11 15 06 F6 | 	mov	arg02, ##@LR__5133
04114     38 C6 B1 FD | 	call	#__system___string_cmp
04118     00 FA 0D F2 | 	cmp	result1, #0 wz
0411c     28 00 90 AD |  if_e	jmp	#LR__0254
04120     0F 13 02 F6 | 	mov	arg01, local01
04124     01 14 06 F6 | 	mov	arg02, #1
04128     00 E7 B1 FD | 	call	#__system__Right_S
0412c     FD 12 02 F6 | 	mov	arg01, result1
04130     90 F9 B1 FD | 	call	#__system____builtin_atof
04134     FD 12 02 F6 | 	mov	arg01, result1
04138     00 14 06 F6 | 	mov	arg02, #0
0413c     64 F6 B1 FD | 	call	#__system___float_tointeger
04140     FD 24 02 F6 | 	mov	local04, result1
04144     34 00 90 FD | 	jmp	#LR__0255
04148                 | LR__0254
04148     0F 13 02 F6 | 	mov	arg01, local01
0414c     01 14 06 F6 | 	mov	arg02, #1
04150     D8 E6 B1 FD | 	call	#__system__Right_S
04154     FD 12 02 F6 | 	mov	arg01, result1
04158     68 F9 B1 FD | 	call	#__system____builtin_atof
0415c     FD 14 02 F6 | 	mov	arg02, result1
04160     00 C0 5F FF 
04164     00 12 06 F6 | 	mov	arg01, ##-1082130432
04168     70 F1 B1 FD | 	call	#__system___float_mul
0416c     FD 12 02 F6 | 	mov	arg01, result1
04170     00 14 06 F6 | 	mov	arg02, #0
04174     2C F6 B1 FD | 	call	#__system___float_tointeger
04178     FD 24 02 F6 | 	mov	local04, result1
0417c                 | LR__0255
0417c                 | ' 
0417c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
0417c     00 24 0E F2 | 	cmp	local04, #0 wz
04180     24 00 90 5D |  if_ne	jmp	#LR__0256
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     9C E6 B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     80 01 00 FF 
04198     13 15 06 F6 | 	mov	arg02, ##@LR__5134
0419c     B0 C5 B1 FD | 	call	#__system___string_cmp
041a0     00 FA 0D F2 | 	cmp	result1, #0 wz
041a4     04 24 06 56 |  if_ne	mov	local04, #4
041a8                 | LR__0256
041a8                 | ' 
041a8                 | ' select case s1
041a8     10 27 02 F6 | 	mov	local05, local02
041ac     80 01 00 FF 
041b0     15 15 06 F6 | 	mov	arg02, ##@LR__5135
041b4     13 13 02 F6 | 	mov	arg01, local05
041b8     94 C5 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     24 01 90 AD |  if_e	jmp	#LR__0257
041c4     80 01 00 FF 
041c8     17 15 06 F6 | 	mov	arg02, ##@LR__5136
041cc     13 13 02 F6 | 	mov	arg01, local05
041d0     7C C5 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     18 01 90 AD |  if_e	jmp	#LR__0258
041dc     80 01 00 FF 
041e0     1A 15 06 F6 | 	mov	arg02, ##@LR__5137
041e4     13 13 02 F6 | 	mov	arg01, local05
041e8     64 C5 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     0C 01 90 AD |  if_e	jmp	#LR__0259
041f4     80 01 00 FF 
041f8     1C 15 06 F6 | 	mov	arg02, ##@LR__5138
041fc     13 13 02 F6 | 	mov	arg01, local05
04200     4C C5 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     00 01 90 AD |  if_e	jmp	#LR__0260
0420c     80 01 00 FF 
04210     1F 15 06 F6 | 	mov	arg02, ##@LR__5139
04214     13 13 02 F6 | 	mov	arg01, local05
04218     34 C5 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     F4 00 90 AD |  if_e	jmp	#LR__0261
04224     80 01 00 FF 
04228     21 15 06 F6 | 	mov	arg02, ##@LR__5140
0422c     13 13 02 F6 | 	mov	arg01, local05
04230     1C C5 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     E8 00 90 AD |  if_e	jmp	#LR__0262
0423c     80 01 00 FF 
04240     23 15 06 F6 | 	mov	arg02, ##@LR__5141
04244     13 13 02 F6 | 	mov	arg01, local05
04248     04 C5 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     DC 00 90 AD |  if_e	jmp	#LR__0263
04254     80 01 00 FF 
04258     26 15 06 F6 | 	mov	arg02, ##@LR__5142
0425c     13 13 02 F6 | 	mov	arg01, local05
04260     EC C4 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     D0 00 90 AD |  if_e	jmp	#LR__0264
0426c     80 01 00 FF 
04270     28 15 06 F6 | 	mov	arg02, ##@LR__5143
04274     13 13 02 F6 | 	mov	arg01, local05
04278     D4 C4 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     C4 00 90 AD |  if_e	jmp	#LR__0265
04284     80 01 00 FF 
04288     2B 15 06 F6 | 	mov	arg02, ##@LR__5144
0428c     13 13 02 F6 | 	mov	arg01, local05
04290     BC C4 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     B8 00 90 AD |  if_e	jmp	#LR__0266
0429c     80 01 00 FF 
042a0     2D 15 06 F6 | 	mov	arg02, ##@LR__5145
042a4     13 13 02 F6 | 	mov	arg01, local05
042a8     A4 C4 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     AC 00 90 AD |  if_e	jmp	#LR__0267
042b4     80 01 00 FF 
042b8     30 15 06 F6 | 	mov	arg02, ##@LR__5146
042bc     13 13 02 F6 | 	mov	arg01, local05
042c0     8C C4 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     A0 00 90 AD |  if_e	jmp	#LR__0268
042cc     80 01 00 FF 
042d0     32 15 06 F6 | 	mov	arg02, ##@LR__5147
042d4     13 13 02 F6 | 	mov	arg01, local05
042d8     74 C4 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     94 00 90 AD |  if_e	jmp	#LR__0269
042e4     9C 00 90 FD | 	jmp	#LR__0270
042e8                 | LR__0257
042e8     01 00 00 FF 
042ec     00 29 06 F6 | 	mov	local06, ##768
042f0     98 00 90 FD | 	jmp	#LR__0271
042f4                 | LR__0258
042f4     01 00 00 FF 
042f8     01 29 06 F6 | 	mov	local06, ##769
042fc     8C 00 90 FD | 	jmp	#LR__0271
04300                 | LR__0259
04300     01 00 00 FF 
04304     02 29 06 F6 | 	mov	local06, ##770
04308     80 00 90 FD | 	jmp	#LR__0271
0430c                 | LR__0260
0430c     01 00 00 FF 
04310     03 29 06 F6 | 	mov	local06, ##771
04314     74 00 90 FD | 	jmp	#LR__0271
04318                 | LR__0261
04318     01 00 00 FF 
0431c     04 29 06 F6 | 	mov	local06, ##772
04320     68 00 90 FD | 	jmp	#LR__0271
04324                 | LR__0262
04324     01 00 00 FF 
04328     05 29 06 F6 | 	mov	local06, ##773
0432c     5C 00 90 FD | 	jmp	#LR__0271
04330                 | LR__0263
04330     01 00 00 FF 
04334     06 29 06 F6 | 	mov	local06, ##774
04338     50 00 90 FD | 	jmp	#LR__0271
0433c                 | LR__0264
0433c     01 00 00 FF 
04340     07 29 06 F6 | 	mov	local06, ##775
04344     44 00 90 FD | 	jmp	#LR__0271
04348                 | LR__0265
04348     01 00 00 FF 
0434c     08 29 06 F6 | 	mov	local06, ##776
04350     38 00 90 FD | 	jmp	#LR__0271
04354                 | LR__0266
04354     01 00 00 FF 
04358     09 29 06 F6 | 	mov	local06, ##777
0435c     2C 00 90 FD | 	jmp	#LR__0271
04360                 | LR__0267
04360     01 00 00 FF 
04364     0A 29 06 F6 | 	mov	local06, ##778
04368     20 00 90 FD | 	jmp	#LR__0271
0436c                 | LR__0268
0436c     01 00 00 FF 
04370     0B 29 06 F6 | 	mov	local06, ##779
04374     14 00 90 FD | 	jmp	#LR__0271
04378                 | LR__0269
04378     01 00 00 FF 
0437c     0B 29 06 F6 | 	mov	local06, ##779
04380     08 00 90 FD | 	jmp	#LR__0271
04384                 | LR__0270
04384     00 FA 05 F6 | 	mov	result1, #0
04388     28 00 90 FD | 	jmp	#LR__0273
0438c                 | LR__0271
0438c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
0438c     FF FF 7F FF 
04390     FF 25 56 F2 | 	cmps	local04, ##-1 wc
04394     18 00 90 CD |  if_b	jmp	#LR__0272
04398     0A 24 56 F2 | 	cmps	local04, #10 wc
0439c     12 2B 02 C6 |  if_b	mov	local07, local04
043a0     01 2A 66 C0 |  if_b	shl	local07, #1
043a4     12 2B 02 C1 |  if_b	add	local07, local04
043a8     02 2A 66 C0 |  if_b	shl	local07, #2
043ac     15 29 02 C1 |  if_b	add	local06, local07
043b0                 | LR__0272
043b0                 | ' return token
043b0     14 FB 01 F6 | 	mov	result1, local06
043b4                 | LR__0273
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isnotename_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a separator, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function isseparator(s as string) as ubyte
043c0                 | _isseparator
043c0     01 4A 05 F6 | 	mov	COUNT_, #1
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' 
043c8                 | ' select case s
043c8     09 1F 02 F6 | 	mov	local01, arg01
043cc     80 01 00 FF 
043d0     34 15 06 F6 | 	mov	arg02, ##@LR__5148
043d4     0F 13 02 F6 | 	mov	arg01, local01
043d8     74 C3 B1 FD | 	call	#__system___string_cmp
043dc     00 FA 0D F2 | 	cmp	result1, #0 wz
043e0     54 01 90 AD |  if_e	jmp	#LR__0280
043e4     80 01 00 FF 
043e8     36 15 06 F6 | 	mov	arg02, ##@LR__5149
043ec     0F 13 02 F6 | 	mov	arg01, local01
043f0     5C C3 B1 FD | 	call	#__system___string_cmp
043f4     00 FA 0D F2 | 	cmp	result1, #0 wz
043f8     44 01 90 AD |  if_e	jmp	#LR__0281
043fc     80 01 00 FF 
04400     38 15 06 F6 | 	mov	arg02, ##@LR__5150
04404     0F 13 02 F6 | 	mov	arg01, local01
04408     44 C3 B1 FD | 	call	#__system___string_cmp
0440c     00 FA 0D F2 | 	cmp	result1, #0 wz
04410     34 01 90 AD |  if_e	jmp	#LR__0282
04414     80 01 00 FF 
04418     3A 15 06 F6 | 	mov	arg02, ##@LR__5151
0441c     0F 13 02 F6 | 	mov	arg01, local01
04420     2C C3 B1 FD | 	call	#__system___string_cmp
04424     00 FA 0D F2 | 	cmp	result1, #0 wz
04428     24 01 90 AD |  if_e	jmp	#LR__0283
0442c     80 01 00 FF 
04430     3C 15 06 F6 | 	mov	arg02, ##@LR__5152
04434     0F 13 02 F6 | 	mov	arg01, local01
04438     14 C3 B1 FD | 	call	#__system___string_cmp
0443c     00 FA 0D F2 | 	cmp	result1, #0 wz
04440     14 01 90 AD |  if_e	jmp	#LR__0284
04444     80 01 00 FF 
04448     3E 15 06 F6 | 	mov	arg02, ##@LR__5153
0444c     0F 13 02 F6 | 	mov	arg01, local01
04450     FC C2 B1 FD | 	call	#__system___string_cmp
04454     00 FA 0D F2 | 	cmp	result1, #0 wz
04458     04 01 90 AD |  if_e	jmp	#LR__0285
0445c     80 01 00 FF 
04460     40 15 06 F6 | 	mov	arg02, ##@LR__5154
04464     0F 13 02 F6 | 	mov	arg01, local01
04468     E4 C2 B1 FD | 	call	#__system___string_cmp
0446c     00 FA 0D F2 | 	cmp	result1, #0 wz
04470     F4 00 90 AD |  if_e	jmp	#LR__0286
04474     80 01 00 FF 
04478     42 15 06 F6 | 	mov	arg02, ##@LR__5155
0447c     0F 13 02 F6 | 	mov	arg01, local01
04480     CC C2 B1 FD | 	call	#__system___string_cmp
04484     00 FA 0D F2 | 	cmp	result1, #0 wz
04488     E4 00 90 AD |  if_e	jmp	#LR__0287
0448c     80 01 00 FF 
04490     44 15 06 F6 | 	mov	arg02, ##@LR__5156
04494     0F 13 02 F6 | 	mov	arg01, local01
04498     B4 C2 B1 FD | 	call	#__system___string_cmp
0449c     00 FA 0D F2 | 	cmp	result1, #0 wz
044a0     D4 00 90 AD |  if_e	jmp	#LR__0288
044a4     80 01 00 FF 
044a8     46 15 06 F6 | 	mov	arg02, ##@LR__5157
044ac     0F 13 02 F6 | 	mov	arg01, local01
044b0     9C C2 B1 FD | 	call	#__system___string_cmp
044b4     00 FA 0D F2 | 	cmp	result1, #0 wz
044b8     C4 00 90 AD |  if_e	jmp	#LR__0289
044bc     80 01 00 FF 
044c0     48 15 06 F6 | 	mov	arg02, ##@LR__5158
044c4     0F 13 02 F6 | 	mov	arg01, local01
044c8     84 C2 B1 FD | 	call	#__system___string_cmp
044cc     00 FA 0D F2 | 	cmp	result1, #0 wz
044d0     B4 00 90 AD |  if_e	jmp	#LR__0290
044d4     80 01 00 FF 
044d8     4A 15 06 F6 | 	mov	arg02, ##@LR__5159
044dc     0F 13 02 F6 | 	mov	arg01, local01
044e0     6C C2 B1 FD | 	call	#__system___string_cmp
044e4     00 FA 0D F2 | 	cmp	result1, #0 wz
044e8     A4 00 90 AD |  if_e	jmp	#LR__0291
044ec     80 01 00 FF 
044f0     4C 15 06 F6 | 	mov	arg02, ##@LR__5160
044f4     0F 13 02 F6 | 	mov	arg01, local01
044f8     54 C2 B1 FD | 	call	#__system___string_cmp
044fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04500     94 00 90 AD |  if_e	jmp	#LR__0292
04504     80 01 00 FF 
04508     4E 15 06 F6 | 	mov	arg02, ##@LR__5161
0450c     0F 13 02 F6 | 	mov	arg01, local01
04510     3C C2 B1 FD | 	call	#__system___string_cmp
04514     00 FA 0D F2 | 	cmp	result1, #0 wz
04518     84 00 90 AD |  if_e	jmp	#LR__0293
0451c     80 01 00 FF 
04520     50 15 06 F6 | 	mov	arg02, ##@LR__5162
04524     0F 13 02 F6 | 	mov	arg01, local01
04528     24 C2 B1 FD | 	call	#__system___string_cmp
0452c     00 FA 0D F2 | 	cmp	result1, #0 wz
04530     74 00 90 AD |  if_e	jmp	#LR__0294
04534     78 00 90 FD | 	jmp	#LR__0295
04538                 | LR__0280
04538     01 FA 05 F6 | 	mov	result1, #1
0453c     74 00 90 FD | 	jmp	#LR__0296
04540                 | LR__0281
04540     02 FA 05 F6 | 	mov	result1, #2
04544     6C 00 90 FD | 	jmp	#LR__0296
04548                 | LR__0282
04548     1B FA 05 F6 | 	mov	result1, #27
0454c     64 00 90 FD | 	jmp	#LR__0296
04550                 | LR__0283
04550     11 FA 05 F6 | 	mov	result1, #17
04554     5C 00 90 FD | 	jmp	#LR__0296
04558                 | LR__0284
04558     05 FA 05 F6 | 	mov	result1, #5
0455c     54 00 90 FD | 	jmp	#LR__0296
04560                 | LR__0285
04560     06 FA 05 F6 | 	mov	result1, #6
04564     4C 00 90 FD | 	jmp	#LR__0296
04568                 | LR__0286
04568     12 FA 05 F6 | 	mov	result1, #18
0456c     44 00 90 FD | 	jmp	#LR__0296
04570                 | LR__0287
04570     13 FA 05 F6 | 	mov	result1, #19
04574     3C 00 90 FD | 	jmp	#LR__0296
04578                 | LR__0288
04578     0C FA 05 F6 | 	mov	result1, #12
0457c     34 00 90 FD | 	jmp	#LR__0296
04580                 | LR__0289
04580     14 FA 05 F6 | 	mov	result1, #20
04584     2C 00 90 FD | 	jmp	#LR__0296
04588                 | LR__0290
04588     15 FA 05 F6 | 	mov	result1, #21
0458c     24 00 90 FD | 	jmp	#LR__0296
04590                 | LR__0291
04590     16 FA 05 F6 | 	mov	result1, #22
04594     1C 00 90 FD | 	jmp	#LR__0296
04598                 | LR__0292
04598     FF FB 05 F6 | 	mov	result1, #511
0459c     14 00 90 FD | 	jmp	#LR__0296
045a0                 | LR__0293
045a0     0F FA 05 F6 | 	mov	result1, #15
045a4     0C 00 90 FD | 	jmp	#LR__0296
045a8                 | LR__0294
045a8     10 FA 05 F6 | 	mov	result1, #16
045ac     04 00 90 FD | 	jmp	#LR__0296
045b0                 | LR__0295
045b0     00 FA 05 F6 | 	mov	result1, #0
045b4                 | LR__0296
045b4     A7 F0 03 F6 | 	mov	ptra, fp
045b8     B2 00 A0 FD | 	call	#popregs_
045bc                 | _isseparator_ret
045bc     2D 00 64 FD | 	ret
045c0                 | 
045c0                 | ' 
045c0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
045c0                 | ' 
045c0                 | ' function iscommand(s as string) as ubyte
045c0                 | _iscommand
045c0     01 4A 05 F6 | 	mov	COUNT_, #1
045c4     A8 00 A0 FD | 	call	#pushregs_
045c8                 | ' 
045c8                 | ' select case s
045c8     09 1F 02 F6 | 	mov	local01, arg01
045cc     80 01 00 FF 
045d0     54 15 06 F6 | 	mov	arg02, ##@LR__5164
045d4     0F 13 02 F6 | 	mov	arg01, local01
045d8     74 C1 B1 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     44 0B 90 AD |  if_e	jmp	#LR__0300
045e4     80 01 00 FF 
045e8     59 15 06 F6 | 	mov	arg02, ##@LR__5165
045ec     0F 13 02 F6 | 	mov	arg01, local01
045f0     5C C1 B1 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     34 0B 90 AD |  if_e	jmp	#LR__0301
045fc     80 01 00 FF 
04600     5C 15 06 F6 | 	mov	arg02, ##@LR__5166
04604     0F 13 02 F6 | 	mov	arg01, local01
04608     44 C1 B1 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     24 0B 90 AD |  if_e	jmp	#LR__0302
04614     80 01 00 FF 
04618     60 15 06 F6 | 	mov	arg02, ##@LR__5167
0461c     0F 13 02 F6 | 	mov	arg01, local01
04620     2C C1 B1 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     14 0B 90 AD |  if_e	jmp	#LR__0303
0462c     80 01 00 FF 
04630     65 15 06 F6 | 	mov	arg02, ##@LR__5168
04634     0F 13 02 F6 | 	mov	arg01, local01
04638     14 C1 B1 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     04 0B 90 AD |  if_e	jmp	#LR__0304
04644     80 01 00 FF 
04648     69 15 06 F6 | 	mov	arg02, ##@LR__5169
0464c     0F 13 02 F6 | 	mov	arg01, local01
04650     FC C0 B1 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     F4 0A 90 AD |  if_e	jmp	#LR__0305
0465c     80 01 00 FF 
04660     74 15 06 F6 | 	mov	arg02, ##@LR__5170
04664     0F 13 02 F6 | 	mov	arg01, local01
04668     E4 C0 B1 FD | 	call	#__system___string_cmp
0466c     00 FA 0D F2 | 	cmp	result1, #0 wz
04670     E4 0A 90 AD |  if_e	jmp	#LR__0306
04674     80 01 00 FF 
04678     78 15 06 F6 | 	mov	arg02, ##@LR__5171
0467c     0F 13 02 F6 | 	mov	arg01, local01
04680     CC C0 B1 FD | 	call	#__system___string_cmp
04684     00 FA 0D F2 | 	cmp	result1, #0 wz
04688     D4 0A 90 AD |  if_e	jmp	#LR__0307
0468c     80 01 00 FF 
04690     82 15 06 F6 | 	mov	arg02, ##@LR__5172
04694     0F 13 02 F6 | 	mov	arg01, local01
04698     B4 C0 B1 FD | 	call	#__system___string_cmp
0469c     00 FA 0D F2 | 	cmp	result1, #0 wz
046a0     C4 0A 90 AD |  if_e	jmp	#LR__0308
046a4     80 01 00 FF 
046a8     86 15 06 F6 | 	mov	arg02, ##@LR__5173
046ac     0F 13 02 F6 | 	mov	arg01, local01
046b0     9C C0 B1 FD | 	call	#__system___string_cmp
046b4     00 FA 0D F2 | 	cmp	result1, #0 wz
046b8     B4 0A 90 AD |  if_e	jmp	#LR__0309
046bc     80 01 00 FF 
046c0     90 15 06 F6 | 	mov	arg02, ##@LR__5174
046c4     0F 13 02 F6 | 	mov	arg01, local01
046c8     84 C0 B1 FD | 	call	#__system___string_cmp
046cc     00 FA 0D F2 | 	cmp	result1, #0 wz
046d0     A4 0A 90 AD |  if_e	jmp	#LR__0310
046d4     80 01 00 FF 
046d8     94 15 06 F6 | 	mov	arg02, ##@LR__5175
046dc     0F 13 02 F6 | 	mov	arg01, local01
046e0     6C C0 B1 FD | 	call	#__system___string_cmp
046e4     00 FA 0D F2 | 	cmp	result1, #0 wz
046e8     94 0A 90 AD |  if_e	jmp	#LR__0311
046ec     80 01 00 FF 
046f0     9F 15 06 F6 | 	mov	arg02, ##@LR__5176
046f4     0F 13 02 F6 | 	mov	arg01, local01
046f8     54 C0 B1 FD | 	call	#__system___string_cmp
046fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04700     84 0A 90 AD |  if_e	jmp	#LR__0312
04704     80 01 00 FF 
04708     A3 15 06 F6 | 	mov	arg02, ##@LR__5177
0470c     0F 13 02 F6 | 	mov	arg01, local01
04710     3C C0 B1 FD | 	call	#__system___string_cmp
04714     00 FA 0D F2 | 	cmp	result1, #0 wz
04718     74 0A 90 AD |  if_e	jmp	#LR__0313
0471c     80 01 00 FF 
04720     AA 15 06 F6 | 	mov	arg02, ##@LR__5178
04724     0F 13 02 F6 | 	mov	arg01, local01
04728     24 C0 B1 FD | 	call	#__system___string_cmp
0472c     00 FA 0D F2 | 	cmp	result1, #0 wz
04730     64 0A 90 AD |  if_e	jmp	#LR__0314
04734     80 01 00 FF 
04738     AE 15 06 F6 | 	mov	arg02, ##@LR__5179
0473c     0F 13 02 F6 | 	mov	arg01, local01
04740     0C C0 B1 FD | 	call	#__system___string_cmp
04744     00 FA 0D F2 | 	cmp	result1, #0 wz
04748     54 0A 90 AD |  if_e	jmp	#LR__0315
0474c     80 01 00 FF 
04750     B4 15 06 F6 | 	mov	arg02, ##@LR__5180
04754     0F 13 02 F6 | 	mov	arg01, local01
04758     F4 BF B1 FD | 	call	#__system___string_cmp
0475c     00 FA 0D F2 | 	cmp	result1, #0 wz
04760     44 0A 90 AD |  if_e	jmp	#LR__0316
04764     80 01 00 FF 
04768     BA 15 06 F6 | 	mov	arg02, ##@LR__5181
0476c     0F 13 02 F6 | 	mov	arg01, local01
04770     DC BF B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     34 0A 90 AD |  if_e	jmp	#LR__0317
0477c     80 01 00 FF 
04780     BE 15 06 F6 | 	mov	arg02, ##@LR__5182
04784     0F 13 02 F6 | 	mov	arg01, local01
04788     C4 BF B1 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     24 0A 90 AD |  if_e	jmp	#LR__0318
04794     80 01 00 FF 
04798     C4 15 06 F6 | 	mov	arg02, ##@LR__5183
0479c     0F 13 02 F6 | 	mov	arg01, local01
047a0     AC BF B1 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     14 0A 90 AD |  if_e	jmp	#LR__0319
047ac     80 01 00 FF 
047b0     C7 15 06 F6 | 	mov	arg02, ##@LR__5184
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     94 BF B1 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     04 0A 90 AD |  if_e	jmp	#LR__0320
047c4     80 01 00 FF 
047c8     CD 15 06 F6 | 	mov	arg02, ##@LR__5185
047cc     0F 13 02 F6 | 	mov	arg01, local01
047d0     7C BF B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     F4 09 90 AD |  if_e	jmp	#LR__0321
047dc     80 01 00 FF 
047e0     D1 15 06 F6 | 	mov	arg02, ##@LR__5186
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     64 BF B1 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     E4 09 90 AD |  if_e	jmp	#LR__0322
047f4     80 01 00 FF 
047f8     D8 15 06 F6 | 	mov	arg02, ##@LR__5187
047fc     0F 13 02 F6 | 	mov	arg01, local01
04800     4C BF B1 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     D4 09 90 AD |  if_e	jmp	#LR__0323
0480c     80 01 00 FF 
04810     DF 15 06 F6 | 	mov	arg02, ##@LR__5188
04814     0F 13 02 F6 | 	mov	arg01, local01
04818     34 BF B1 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     C4 09 90 AD |  if_e	jmp	#LR__0324
04824     80 01 00 FF 
04828     E6 15 06 F6 | 	mov	arg02, ##@LR__5189
0482c     0F 13 02 F6 | 	mov	arg01, local01
04830     1C BF B1 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     B4 09 90 AD |  if_e	jmp	#LR__0325
0483c     80 01 00 FF 
04840     F0 15 06 F6 | 	mov	arg02, ##@LR__5190
04844     0F 13 02 F6 | 	mov	arg01, local01
04848     04 BF B1 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     A4 09 90 AD |  if_e	jmp	#LR__0326
04854     80 01 00 FF 
04858     F4 15 06 F6 | 	mov	arg02, ##@LR__5191
0485c     0F 13 02 F6 | 	mov	arg01, local01
04860     EC BE B1 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     94 09 90 AD |  if_e	jmp	#LR__0327
0486c     80 01 00 FF 
04870     F8 15 06 F6 | 	mov	arg02, ##@LR__5192
04874     0F 13 02 F6 | 	mov	arg01, local01
04878     D4 BE B1 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     84 09 90 AD |  if_e	jmp	#LR__0328
04884     80 01 00 FF 
04888     FC 15 06 F6 | 	mov	arg02, ##@LR__5193
0488c     0F 13 02 F6 | 	mov	arg01, local01
04890     BC BE B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     74 09 90 AD |  if_e	jmp	#LR__0329
0489c     81 01 00 FF 
048a0     00 14 06 F6 | 	mov	arg02, ##@LR__5194
048a4     0F 13 02 F6 | 	mov	arg01, local01
048a8     A4 BE B1 FD | 	call	#__system___string_cmp
048ac     00 FA 0D F2 | 	cmp	result1, #0 wz
048b0     64 09 90 AD |  if_e	jmp	#LR__0330
048b4     81 01 00 FF 
048b8     06 14 06 F6 | 	mov	arg02, ##@LR__5195
048bc     0F 13 02 F6 | 	mov	arg01, local01
048c0     8C BE B1 FD | 	call	#__system___string_cmp
048c4     00 FA 0D F2 | 	cmp	result1, #0 wz
048c8     54 09 90 AD |  if_e	jmp	#LR__0331
048cc     81 01 00 FF 
048d0     0B 14 06 F6 | 	mov	arg02, ##@LR__5196
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     74 BE B1 FD | 	call	#__system___string_cmp
048dc     00 FA 0D F2 | 	cmp	result1, #0 wz
048e0     44 09 90 AD |  if_e	jmp	#LR__0332
048e4     81 01 00 FF 
048e8     0F 14 06 F6 | 	mov	arg02, ##@LR__5197
048ec     0F 13 02 F6 | 	mov	arg01, local01
048f0     5C BE B1 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     34 09 90 AD |  if_e	jmp	#LR__0333
048fc     81 01 00 FF 
04900     14 14 06 F6 | 	mov	arg02, ##@LR__5198
04904     0F 13 02 F6 | 	mov	arg01, local01
04908     44 BE B1 FD | 	call	#__system___string_cmp
0490c     00 FA 0D F2 | 	cmp	result1, #0 wz
04910     24 09 90 AD |  if_e	jmp	#LR__0334
04914     81 01 00 FF 
04918     18 14 06 F6 | 	mov	arg02, ##@LR__5199
0491c     0F 13 02 F6 | 	mov	arg01, local01
04920     2C BE B1 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     14 09 90 AD |  if_e	jmp	#LR__0335
0492c     81 01 00 FF 
04930     1E 14 06 F6 | 	mov	arg02, ##@LR__5200
04934     0F 13 02 F6 | 	mov	arg01, local01
04938     14 BE B1 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     04 09 90 AD |  if_e	jmp	#LR__0336
04944     81 01 00 FF 
04948     21 14 06 F6 | 	mov	arg02, ##@LR__5201
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     FC BD B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     F4 08 90 AD |  if_e	jmp	#LR__0337
0495c     81 01 00 FF 
04960     29 14 06 F6 | 	mov	arg02, ##@LR__5202
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     E4 BD B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     E4 08 90 AD |  if_e	jmp	#LR__0338
04974     81 01 00 FF 
04978     2D 14 06 F6 | 	mov	arg02, ##@LR__5203
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     CC BD B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     D4 08 90 AD |  if_e	jmp	#LR__0339
0498c     81 01 00 FF 
04990     32 14 06 F6 | 	mov	arg02, ##@LR__5204
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     B4 BD B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     C4 08 90 AD |  if_e	jmp	#LR__0340
049a4     81 01 00 FF 
049a8     36 14 06 F6 | 	mov	arg02, ##@LR__5205
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     9C BD B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     B4 08 90 AD |  if_e	jmp	#LR__0341
049bc     81 01 00 FF 
049c0     3B 14 06 F6 | 	mov	arg02, ##@LR__5206
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     84 BD B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     A4 08 90 AD |  if_e	jmp	#LR__0342
049d4     81 01 00 FF 
049d8     3F 14 06 F6 | 	mov	arg02, ##@LR__5207
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     6C BD B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     94 08 90 AD |  if_e	jmp	#LR__0343
049ec     81 01 00 FF 
049f0     42 14 06 F6 | 	mov	arg02, ##@LR__5208
049f4     0F 13 02 F6 | 	mov	arg01, local01
049f8     54 BD B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     84 08 90 AD |  if_e	jmp	#LR__0344
04a04     81 01 00 FF 
04a08     48 14 06 F6 | 	mov	arg02, ##@LR__5209
04a0c     0F 13 02 F6 | 	mov	arg01, local01
04a10     3C BD B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     74 08 90 AD |  if_e	jmp	#LR__0345
04a1c     81 01 00 FF 
04a20     4C 14 06 F6 | 	mov	arg02, ##@LR__5210
04a24     0F 13 02 F6 | 	mov	arg01, local01
04a28     24 BD B1 FD | 	call	#__system___string_cmp
04a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a30     64 08 90 AD |  if_e	jmp	#LR__0346
04a34     81 01 00 FF 
04a38     50 14 06 F6 | 	mov	arg02, ##@LR__5211
04a3c     0F 13 02 F6 | 	mov	arg01, local01
04a40     0C BD B1 FD | 	call	#__system___string_cmp
04a44     00 FA 0D F2 | 	cmp	result1, #0 wz
04a48     54 08 90 AD |  if_e	jmp	#LR__0347
04a4c     81 01 00 FF 
04a50     56 14 06 F6 | 	mov	arg02, ##@LR__5212
04a54     0F 13 02 F6 | 	mov	arg01, local01
04a58     F4 BC B1 FD | 	call	#__system___string_cmp
04a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a60     44 08 90 AD |  if_e	jmp	#LR__0348
04a64     81 01 00 FF 
04a68     5B 14 06 F6 | 	mov	arg02, ##@LR__5213
04a6c     0F 13 02 F6 | 	mov	arg01, local01
04a70     DC BC B1 FD | 	call	#__system___string_cmp
04a74     00 FA 0D F2 | 	cmp	result1, #0 wz
04a78     34 08 90 AD |  if_e	jmp	#LR__0349
04a7c     81 01 00 FF 
04a80     5E 14 06 F6 | 	mov	arg02, ##@LR__5214
04a84     0F 13 02 F6 | 	mov	arg01, local01
04a88     C4 BC B1 FD | 	call	#__system___string_cmp
04a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a90     24 08 90 AD |  if_e	jmp	#LR__0350
04a94     81 01 00 FF 
04a98     61 14 06 F6 | 	mov	arg02, ##@LR__5215
04a9c     0F 13 02 F6 | 	mov	arg01, local01
04aa0     AC BC B1 FD | 	call	#__system___string_cmp
04aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa8     14 08 90 AD |  if_e	jmp	#LR__0351
04aac     81 01 00 FF 
04ab0     65 14 06 F6 | 	mov	arg02, ##@LR__5216
04ab4     0F 13 02 F6 | 	mov	arg01, local01
04ab8     94 BC B1 FD | 	call	#__system___string_cmp
04abc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac0     04 08 90 AD |  if_e	jmp	#LR__0352
04ac4     81 01 00 FF 
04ac8     68 14 06 F6 | 	mov	arg02, ##@LR__5217
04acc     0F 13 02 F6 | 	mov	arg01, local01
04ad0     7C BC B1 FD | 	call	#__system___string_cmp
04ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad8     F4 07 90 AD |  if_e	jmp	#LR__0353
04adc     81 01 00 FF 
04ae0     6D 14 06 F6 | 	mov	arg02, ##@LR__5218
04ae4     0F 13 02 F6 | 	mov	arg01, local01
04ae8     64 BC B1 FD | 	call	#__system___string_cmp
04aec     00 FA 0D F2 | 	cmp	result1, #0 wz
04af0     E4 07 90 AD |  if_e	jmp	#LR__0354
04af4     81 01 00 FF 
04af8     70 14 06 F6 | 	mov	arg02, ##@LR__5219
04afc     0F 13 02 F6 | 	mov	arg01, local01
04b00     4C BC B1 FD | 	call	#__system___string_cmp
04b04     00 FA 0D F2 | 	cmp	result1, #0 wz
04b08     D4 07 90 AD |  if_e	jmp	#LR__0355
04b0c     81 01 00 FF 
04b10     75 14 06 F6 | 	mov	arg02, ##@LR__5220
04b14     0F 13 02 F6 | 	mov	arg01, local01
04b18     34 BC B1 FD | 	call	#__system___string_cmp
04b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b20     C4 07 90 AD |  if_e	jmp	#LR__0356
04b24     81 01 00 FF 
04b28     79 14 06 F6 | 	mov	arg02, ##@LR__5221
04b2c     0F 13 02 F6 | 	mov	arg01, local01
04b30     1C BC B1 FD | 	call	#__system___string_cmp
04b34     00 FA 0D F2 | 	cmp	result1, #0 wz
04b38     B4 07 90 AD |  if_e	jmp	#LR__0357
04b3c     81 01 00 FF 
04b40     7F 14 06 F6 | 	mov	arg02, ##@LR__5222
04b44     0F 13 02 F6 | 	mov	arg01, local01
04b48     04 BC B1 FD | 	call	#__system___string_cmp
04b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b50     A4 07 90 AD |  if_e	jmp	#LR__0358
04b54     81 01 00 FF 
04b58     84 14 06 F6 | 	mov	arg02, ##@LR__5223
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     EC BB B1 FD | 	call	#__system___string_cmp
04b64     00 FA 0D F2 | 	cmp	result1, #0 wz
04b68     94 07 90 AD |  if_e	jmp	#LR__0359
04b6c     81 01 00 FF 
04b70     87 14 06 F6 | 	mov	arg02, ##@LR__5224
04b74     0F 13 02 F6 | 	mov	arg01, local01
04b78     D4 BB B1 FD | 	call	#__system___string_cmp
04b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b80     84 07 90 AD |  if_e	jmp	#LR__0360
04b84     81 01 00 FF 
04b88     8D 14 06 F6 | 	mov	arg02, ##@LR__5225
04b8c     0F 13 02 F6 | 	mov	arg01, local01
04b90     BC BB B1 FD | 	call	#__system___string_cmp
04b94     00 FA 0D F2 | 	cmp	result1, #0 wz
04b98     74 07 90 AD |  if_e	jmp	#LR__0361
04b9c     81 01 00 FF 
04ba0     91 14 06 F6 | 	mov	arg02, ##@LR__5226
04ba4     0F 13 02 F6 | 	mov	arg01, local01
04ba8     A4 BB B1 FD | 	call	#__system___string_cmp
04bac     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb0     64 07 90 AD |  if_e	jmp	#LR__0362
04bb4     81 01 00 FF 
04bb8     96 14 06 F6 | 	mov	arg02, ##@LR__5227
04bbc     0F 13 02 F6 | 	mov	arg01, local01
04bc0     8C BB B1 FD | 	call	#__system___string_cmp
04bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc8     54 07 90 AD |  if_e	jmp	#LR__0363
04bcc     81 01 00 FF 
04bd0     99 14 06 F6 | 	mov	arg02, ##@LR__5228
04bd4     0F 13 02 F6 | 	mov	arg01, local01
04bd8     74 BB B1 FD | 	call	#__system___string_cmp
04bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04be0     44 07 90 AD |  if_e	jmp	#LR__0364
04be4     81 01 00 FF 
04be8     9E 14 06 F6 | 	mov	arg02, ##@LR__5229
04bec     0F 13 02 F6 | 	mov	arg01, local01
04bf0     5C BB B1 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     34 07 90 AD |  if_e	jmp	#LR__0365
04bfc     81 01 00 FF 
04c00     A4 14 06 F6 | 	mov	arg02, ##@LR__5230
04c04     0F 13 02 F6 | 	mov	arg01, local01
04c08     44 BB B1 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     24 07 90 AD |  if_e	jmp	#LR__0366
04c14     81 01 00 FF 
04c18     A8 14 06 F6 | 	mov	arg02, ##@LR__5231
04c1c     0F 13 02 F6 | 	mov	arg01, local01
04c20     2C BB B1 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     14 07 90 AD |  if_e	jmp	#LR__0367
04c2c     81 01 00 FF 
04c30     B1 14 06 F6 | 	mov	arg02, ##@LR__5232
04c34     0F 13 02 F6 | 	mov	arg01, local01
04c38     14 BB B1 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     04 07 90 AD |  if_e	jmp	#LR__0368
04c44     81 01 00 FF 
04c48     B7 14 06 F6 | 	mov	arg02, ##@LR__5233
04c4c     0F 13 02 F6 | 	mov	arg01, local01
04c50     FC BA B1 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     F4 06 90 AD |  if_e	jmp	#LR__0369
04c5c     81 01 00 FF 
04c60     BD 14 06 F6 | 	mov	arg02, ##@LR__5234
04c64     0F 13 02 F6 | 	mov	arg01, local01
04c68     E4 BA B1 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     E4 06 90 AD |  if_e	jmp	#LR__0370
04c74     81 01 00 FF 
04c78     C6 14 06 F6 | 	mov	arg02, ##@LR__5235
04c7c     0F 13 02 F6 | 	mov	arg01, local01
04c80     CC BA B1 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     D4 06 90 AD |  if_e	jmp	#LR__0371
04c8c     81 01 00 FF 
04c90     D0 14 06 F6 | 	mov	arg02, ##@LR__5236
04c94     0F 13 02 F6 | 	mov	arg01, local01
04c98     B4 BA B1 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     C4 06 90 AD |  if_e	jmp	#LR__0372
04ca4     81 01 00 FF 
04ca8     D9 14 06 F6 | 	mov	arg02, ##@LR__5237
04cac     0F 13 02 F6 | 	mov	arg01, local01
04cb0     9C BA B1 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     B4 06 90 AD |  if_e	jmp	#LR__0373
04cbc     81 01 00 FF 
04cc0     DE 14 06 F6 | 	mov	arg02, ##@LR__5238
04cc4     0F 13 02 F6 | 	mov	arg01, local01
04cc8     84 BA B1 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     A4 06 90 AD |  if_e	jmp	#LR__0374
04cd4     81 01 00 FF 
04cd8     E1 14 06 F6 | 	mov	arg02, ##@LR__5239
04cdc     0F 13 02 F6 | 	mov	arg01, local01
04ce0     6C BA B1 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     94 06 90 AD |  if_e	jmp	#LR__0375
04cec     81 01 00 FF 
04cf0     E6 14 06 F6 | 	mov	arg02, ##@LR__5240
04cf4     0F 13 02 F6 | 	mov	arg01, local01
04cf8     54 BA B1 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     84 06 90 AD |  if_e	jmp	#LR__0376
04d04     81 01 00 FF 
04d08     EA 14 06 F6 | 	mov	arg02, ##@LR__5241
04d0c     0F 13 02 F6 | 	mov	arg01, local01
04d10     3C BA B1 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     74 06 90 AD |  if_e	jmp	#LR__0377
04d1c     81 01 00 FF 
04d20     EF 14 06 F6 | 	mov	arg02, ##@LR__5242
04d24     0F 13 02 F6 | 	mov	arg01, local01
04d28     24 BA B1 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     64 06 90 AD |  if_e	jmp	#LR__0378
04d34     81 01 00 FF 
04d38     F3 14 06 F6 | 	mov	arg02, ##@LR__5243
04d3c     0F 13 02 F6 | 	mov	arg01, local01
04d40     0C BA B1 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     54 06 90 AD |  if_e	jmp	#LR__0379
04d4c     81 01 00 FF 
04d50     FC 14 06 F6 | 	mov	arg02, ##@LR__5244
04d54     0F 13 02 F6 | 	mov	arg01, local01
04d58     F4 B9 B1 FD | 	call	#__system___string_cmp
04d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d60     44 06 90 AD |  if_e	jmp	#LR__0380
04d64     81 01 00 FF 
04d68     01 15 06 F6 | 	mov	arg02, ##@LR__5245
04d6c     0F 13 02 F6 | 	mov	arg01, local01
04d70     DC B9 B1 FD | 	call	#__system___string_cmp
04d74     00 FA 0D F2 | 	cmp	result1, #0 wz
04d78     34 06 90 AD |  if_e	jmp	#LR__0381
04d7c     81 01 00 FF 
04d80     07 15 06 F6 | 	mov	arg02, ##@LR__5246
04d84     0F 13 02 F6 | 	mov	arg01, local01
04d88     C4 B9 B1 FD | 	call	#__system___string_cmp
04d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d90     24 06 90 AD |  if_e	jmp	#LR__0382
04d94     81 01 00 FF 
04d98     09 15 06 F6 | 	mov	arg02, ##@LR__5247
04d9c     0F 13 02 F6 | 	mov	arg01, local01
04da0     AC B9 B1 FD | 	call	#__system___string_cmp
04da4     00 FA 0D F2 | 	cmp	result1, #0 wz
04da8     14 06 90 AD |  if_e	jmp	#LR__0383
04dac     81 01 00 FF 
04db0     0D 15 06 F6 | 	mov	arg02, ##@LR__5248
04db4     0F 13 02 F6 | 	mov	arg01, local01
04db8     94 B9 B1 FD | 	call	#__system___string_cmp
04dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc0     04 06 90 AD |  if_e	jmp	#LR__0384
04dc4     81 01 00 FF 
04dc8     11 15 06 F6 | 	mov	arg02, ##@LR__5249
04dcc     0F 13 02 F6 | 	mov	arg01, local01
04dd0     7C B9 B1 FD | 	call	#__system___string_cmp
04dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd8     F4 05 90 AD |  if_e	jmp	#LR__0385
04ddc     81 01 00 FF 
04de0     19 15 06 F6 | 	mov	arg02, ##@LR__5250
04de4     0F 13 02 F6 | 	mov	arg01, local01
04de8     64 B9 B1 FD | 	call	#__system___string_cmp
04dec     00 FA 0D F2 | 	cmp	result1, #0 wz
04df0     E4 05 90 AD |  if_e	jmp	#LR__0386
04df4     81 01 00 FF 
04df8     1D 15 06 F6 | 	mov	arg02, ##@LR__5251
04dfc     0F 13 02 F6 | 	mov	arg01, local01
04e00     4C B9 B1 FD | 	call	#__system___string_cmp
04e04     00 FA 0D F2 | 	cmp	result1, #0 wz
04e08     D4 05 90 AD |  if_e	jmp	#LR__0387
04e0c     81 01 00 FF 
04e10     1F 15 06 F6 | 	mov	arg02, ##@LR__5252
04e14     0F 13 02 F6 | 	mov	arg01, local01
04e18     34 B9 B1 FD | 	call	#__system___string_cmp
04e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e20     C4 05 90 AD |  if_e	jmp	#LR__0388
04e24     81 01 00 FF 
04e28     26 15 06 F6 | 	mov	arg02, ##@LR__5253
04e2c     0F 13 02 F6 | 	mov	arg01, local01
04e30     1C B9 B1 FD | 	call	#__system___string_cmp
04e34     00 FA 0D F2 | 	cmp	result1, #0 wz
04e38     B4 05 90 AD |  if_e	jmp	#LR__0389
04e3c     81 01 00 FF 
04e40     2A 15 06 F6 | 	mov	arg02, ##@LR__5254
04e44     0F 13 02 F6 | 	mov	arg01, local01
04e48     04 B9 B1 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     A4 05 90 AD |  if_e	jmp	#LR__0390
04e54     81 01 00 FF 
04e58     2F 15 06 F6 | 	mov	arg02, ##@LR__5255
04e5c     0F 13 02 F6 | 	mov	arg01, local01
04e60     EC B8 B1 FD | 	call	#__system___string_cmp
04e64     00 FA 0D F2 | 	cmp	result1, #0 wz
04e68     94 05 90 AD |  if_e	jmp	#LR__0391
04e6c     81 01 00 FF 
04e70     32 15 06 F6 | 	mov	arg02, ##@LR__5256
04e74     0F 13 02 F6 | 	mov	arg01, local01
04e78     D4 B8 B1 FD | 	call	#__system___string_cmp
04e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e80     84 05 90 AD |  if_e	jmp	#LR__0392
04e84     81 01 00 FF 
04e88     3B 15 06 F6 | 	mov	arg02, ##@LR__5257
04e8c     0F 13 02 F6 | 	mov	arg01, local01
04e90     BC B8 B1 FD | 	call	#__system___string_cmp
04e94     00 FA 0D F2 | 	cmp	result1, #0 wz
04e98     74 05 90 AD |  if_e	jmp	#LR__0393
04e9c     81 01 00 FF 
04ea0     3F 15 06 F6 | 	mov	arg02, ##@LR__5258
04ea4     0F 13 02 F6 | 	mov	arg01, local01
04ea8     A4 B8 B1 FD | 	call	#__system___string_cmp
04eac     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb0     64 05 90 AD |  if_e	jmp	#LR__0394
04eb4     81 01 00 FF 
04eb8     46 15 06 F6 | 	mov	arg02, ##@LR__5259
04ebc     0F 13 02 F6 | 	mov	arg01, local01
04ec0     8C B8 B1 FD | 	call	#__system___string_cmp
04ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec8     54 05 90 AD |  if_e	jmp	#LR__0395
04ecc     81 01 00 FF 
04ed0     4A 15 06 F6 | 	mov	arg02, ##@LR__5260
04ed4     0F 13 02 F6 | 	mov	arg01, local01
04ed8     74 B8 B1 FD | 	call	#__system___string_cmp
04edc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee0     44 05 90 AD |  if_e	jmp	#LR__0396
04ee4     81 01 00 FF 
04ee8     51 15 06 F6 | 	mov	arg02, ##@LR__5261
04eec     0F 13 02 F6 | 	mov	arg01, local01
04ef0     5C B8 B1 FD | 	call	#__system___string_cmp
04ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef8     34 05 90 AD |  if_e	jmp	#LR__0397
04efc     81 01 00 FF 
04f00     55 15 06 F6 | 	mov	arg02, ##@LR__5262
04f04     0F 13 02 F6 | 	mov	arg01, local01
04f08     44 B8 B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f10     24 05 90 AD |  if_e	jmp	#LR__0398
04f14     81 01 00 FF 
04f18     5C 15 06 F6 | 	mov	arg02, ##@LR__5263
04f1c     0F 13 02 F6 | 	mov	arg01, local01
04f20     2C B8 B1 FD | 	call	#__system___string_cmp
04f24     00 FA 0D F2 | 	cmp	result1, #0 wz
04f28     14 05 90 AD |  if_e	jmp	#LR__0399
04f2c     81 01 00 FF 
04f30     5F 15 06 F6 | 	mov	arg02, ##@LR__5264
04f34     0F 13 02 F6 | 	mov	arg01, local01
04f38     14 B8 B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f40     04 05 90 AD |  if_e	jmp	#LR__0400
04f44     81 01 00 FF 
04f48     6A 15 06 F6 | 	mov	arg02, ##@LR__5265
04f4c     0F 13 02 F6 | 	mov	arg01, local01
04f50     FC B7 B1 FD | 	call	#__system___string_cmp
04f54     00 FA 0D F2 | 	cmp	result1, #0 wz
04f58     F4 04 90 AD |  if_e	jmp	#LR__0401
04f5c     81 01 00 FF 
04f60     6E 15 06 F6 | 	mov	arg02, ##@LR__5266
04f64     0F 13 02 F6 | 	mov	arg01, local01
04f68     E4 B7 B1 FD | 	call	#__system___string_cmp
04f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f70     E4 04 90 AD |  if_e	jmp	#LR__0402
04f74     81 01 00 FF 
04f78     75 15 06 F6 | 	mov	arg02, ##@LR__5267
04f7c     0F 13 02 F6 | 	mov	arg01, local01
04f80     CC B7 B1 FD | 	call	#__system___string_cmp
04f84     00 FA 0D F2 | 	cmp	result1, #0 wz
04f88     D4 04 90 AD |  if_e	jmp	#LR__0403
04f8c     81 01 00 FF 
04f90     79 15 06 F6 | 	mov	arg02, ##@LR__5268
04f94     0F 13 02 F6 | 	mov	arg01, local01
04f98     B4 B7 B1 FD | 	call	#__system___string_cmp
04f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa0     C4 04 90 AD |  if_e	jmp	#LR__0404
04fa4     81 01 00 FF 
04fa8     81 15 06 F6 | 	mov	arg02, ##@LR__5269
04fac     0F 13 02 F6 | 	mov	arg01, local01
04fb0     9C B7 B1 FD | 	call	#__system___string_cmp
04fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb8     B4 04 90 AD |  if_e	jmp	#LR__0405
04fbc     81 01 00 FF 
04fc0     85 15 06 F6 | 	mov	arg02, ##@LR__5270
04fc4     0F 13 02 F6 | 	mov	arg01, local01
04fc8     84 B7 B1 FD | 	call	#__system___string_cmp
04fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd0     A4 04 90 AD |  if_e	jmp	#LR__0406
04fd4     81 01 00 FF 
04fd8     8C 15 06 F6 | 	mov	arg02, ##@LR__5271
04fdc     0F 13 02 F6 | 	mov	arg01, local01
04fe0     6C B7 B1 FD | 	call	#__system___string_cmp
04fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe8     94 04 90 AD |  if_e	jmp	#LR__0407
04fec     81 01 00 FF 
04ff0     93 15 06 F6 | 	mov	arg02, ##@LR__5272
04ff4     0F 13 02 F6 | 	mov	arg01, local01
04ff8     54 B7 B1 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     84 04 90 AD |  if_e	jmp	#LR__0408
05004     81 01 00 FF 
05008     97 15 06 F6 | 	mov	arg02, ##@LR__5273
0500c     0F 13 02 F6 | 	mov	arg01, local01
05010     3C B7 B1 FD | 	call	#__system___string_cmp
05014     00 FA 0D F2 | 	cmp	result1, #0 wz
05018     74 04 90 AD |  if_e	jmp	#LR__0409
0501c     81 01 00 FF 
05020     9D 15 06 F6 | 	mov	arg02, ##@LR__5274
05024     0F 13 02 F6 | 	mov	arg01, local01
05028     24 B7 B1 FD | 	call	#__system___string_cmp
0502c     00 FA 0D F2 | 	cmp	result1, #0 wz
05030     64 04 90 AD |  if_e	jmp	#LR__0410
05034     81 01 00 FF 
05038     A1 15 06 F6 | 	mov	arg02, ##@LR__5275
0503c     0F 13 02 F6 | 	mov	arg01, local01
05040     0C B7 B1 FD | 	call	#__system___string_cmp
05044     00 FA 0D F2 | 	cmp	result1, #0 wz
05048     54 04 90 AD |  if_e	jmp	#LR__0411
0504c     81 01 00 FF 
05050     A8 15 06 F6 | 	mov	arg02, ##@LR__5276
05054     0F 13 02 F6 | 	mov	arg01, local01
05058     F4 B6 B1 FD | 	call	#__system___string_cmp
0505c     00 FA 0D F2 | 	cmp	result1, #0 wz
05060     44 04 90 AD |  if_e	jmp	#LR__0412
05064     81 01 00 FF 
05068     AD 15 06 F6 | 	mov	arg02, ##@LR__5277
0506c     0F 13 02 F6 | 	mov	arg01, local01
05070     DC B6 B1 FD | 	call	#__system___string_cmp
05074     00 FA 0D F2 | 	cmp	result1, #0 wz
05078     34 04 90 AD |  if_e	jmp	#LR__0413
0507c     81 01 00 FF 
05080     B2 15 06 F6 | 	mov	arg02, ##@LR__5278
05084     0F 13 02 F6 | 	mov	arg01, local01
05088     C4 B6 B1 FD | 	call	#__system___string_cmp
0508c     00 FA 0D F2 | 	cmp	result1, #0 wz
05090     24 04 90 AD |  if_e	jmp	#LR__0414
05094     81 01 00 FF 
05098     B9 15 06 F6 | 	mov	arg02, ##@LR__5279
0509c     0F 13 02 F6 | 	mov	arg01, local01
050a0     AC B6 B1 FD | 	call	#__system___string_cmp
050a4     00 FA 0D F2 | 	cmp	result1, #0 wz
050a8     14 04 90 AD |  if_e	jmp	#LR__0415
050ac     81 01 00 FF 
050b0     C3 15 06 F6 | 	mov	arg02, ##@LR__5280
050b4     0F 13 02 F6 | 	mov	arg01, local01
050b8     94 B6 B1 FD | 	call	#__system___string_cmp
050bc     00 FA 0D F2 | 	cmp	result1, #0 wz
050c0     04 04 90 AD |  if_e	jmp	#LR__0416
050c4     81 01 00 FF 
050c8     C7 15 06 F6 | 	mov	arg02, ##@LR__5281
050cc     0F 13 02 F6 | 	mov	arg01, local01
050d0     7C B6 B1 FD | 	call	#__system___string_cmp
050d4     00 FA 0D F2 | 	cmp	result1, #0 wz
050d8     F4 03 90 AD |  if_e	jmp	#LR__0417
050dc     81 01 00 FF 
050e0     CF 15 06 F6 | 	mov	arg02, ##@LR__5282
050e4     0F 13 02 F6 | 	mov	arg01, local01
050e8     64 B6 B1 FD | 	call	#__system___string_cmp
050ec     00 FA 0D F2 | 	cmp	result1, #0 wz
050f0     E4 03 90 AD |  if_e	jmp	#LR__0418
050f4     81 01 00 FF 
050f8     D3 15 06 F6 | 	mov	arg02, ##@LR__5283
050fc     0F 13 02 F6 | 	mov	arg01, local01
05100     4C B6 B1 FD | 	call	#__system___string_cmp
05104     00 FA 0D F2 | 	cmp	result1, #0 wz
05108     D4 03 90 AD |  if_e	jmp	#LR__0419
0510c     81 01 00 FF 
05110     D9 15 06 F6 | 	mov	arg02, ##@LR__5284
05114     0F 13 02 F6 | 	mov	arg01, local01
05118     34 B6 B1 FD | 	call	#__system___string_cmp
0511c     00 FA 0D F2 | 	cmp	result1, #0 wz
05120     C4 03 90 AD |  if_e	jmp	#LR__0420
05124     C8 03 90 FD | 	jmp	#LR__0421
05128                 | LR__0300
05128     5C FA 05 F6 | 	mov	result1, #92
0512c     C4 03 90 FD | 	jmp	#LR__0422
05130                 | LR__0301
05130     5C FA 05 F6 | 	mov	result1, #92
05134     BC 03 90 FD | 	jmp	#LR__0422
05138                 | LR__0302
05138     47 FA 05 F6 | 	mov	result1, #71
0513c     B4 03 90 FD | 	jmp	#LR__0422
05140                 | LR__0303
05140     59 FA 05 F6 | 	mov	result1, #89
05144     AC 03 90 FD | 	jmp	#LR__0422
05148                 | LR__0304
05148     59 FA 05 F6 | 	mov	result1, #89
0514c     A4 03 90 FD | 	jmp	#LR__0422
05150                 | LR__0305
05150     AE FA 05 F6 | 	mov	result1, #174
05154     9C 03 90 FD | 	jmp	#LR__0422
05158                 | LR__0306
05158     AE FA 05 F6 | 	mov	result1, #174
0515c     94 03 90 FD | 	jmp	#LR__0422
05160                 | LR__0307
05160     B1 FA 05 F6 | 	mov	result1, #177
05164     8C 03 90 FD | 	jmp	#LR__0422
05168                 | LR__0308
05168     B1 FA 05 F6 | 	mov	result1, #177
0516c     84 03 90 FD | 	jmp	#LR__0422
05170                 | LR__0309
05170     AF FA 05 F6 | 	mov	result1, #175
05174     7C 03 90 FD | 	jmp	#LR__0422
05178                 | LR__0310
05178     AF FA 05 F6 | 	mov	result1, #175
0517c     74 03 90 FD | 	jmp	#LR__0422
05180                 | LR__0311
05180     B0 FA 05 F6 | 	mov	result1, #176
05184     6C 03 90 FD | 	jmp	#LR__0422
05188                 | LR__0312
05188     B0 FA 05 F6 | 	mov	result1, #176
0518c     64 03 90 FD | 	jmp	#LR__0422
05190                 | LR__0313
05190     45 FA 05 F6 | 	mov	result1, #69
05194     5C 03 90 FD | 	jmp	#LR__0422
05198                 | LR__0314
05198     45 FA 05 F6 | 	mov	result1, #69
0519c     54 03 90 FD | 	jmp	#LR__0422
051a0                 | LR__0315
051a0     69 FA 05 F6 | 	mov	result1, #105
051a4     4C 03 90 FD | 	jmp	#LR__0422
051a8                 | LR__0316
051a8     B4 FA 05 F6 | 	mov	result1, #180
051ac     44 03 90 FD | 	jmp	#LR__0422
051b0                 | LR__0317
051b0     40 FA 05 F6 | 	mov	result1, #64
051b4     3C 03 90 FD | 	jmp	#LR__0422
051b8                 | LR__0318
051b8     49 FA 05 F6 | 	mov	result1, #73
051bc     34 03 90 FD | 	jmp	#LR__0422
051c0                 | LR__0319
051c0     49 FA 05 F6 | 	mov	result1, #73
051c4     2C 03 90 FD | 	jmp	#LR__0422
051c8                 | LR__0320
051c8     50 FA 05 F6 | 	mov	result1, #80
051cc     24 03 90 FD | 	jmp	#LR__0422
051d0                 | LR__0321
051d0     50 FA 05 F6 | 	mov	result1, #80
051d4     1C 03 90 FD | 	jmp	#LR__0422
051d8                 | LR__0322
051d8     68 FA 05 F6 | 	mov	result1, #104
051dc     14 03 90 FD | 	jmp	#LR__0422
051e0                 | LR__0323
051e0     73 FA 05 F6 | 	mov	result1, #115
051e4     0C 03 90 FD | 	jmp	#LR__0422
051e8                 | LR__0324
051e8     74 FA 05 F6 | 	mov	result1, #116
051ec     04 03 90 FD | 	jmp	#LR__0422
051f0                 | LR__0325
051f0     6C FA 05 F6 | 	mov	result1, #108
051f4     FC 02 90 FD | 	jmp	#LR__0422
051f8                 | LR__0326
051f8     6C FA 05 F6 | 	mov	result1, #108
051fc     F4 02 90 FD | 	jmp	#LR__0422
05200                 | LR__0327
05200     89 FA 05 F6 | 	mov	result1, #137
05204     EC 02 90 FD | 	jmp	#LR__0422
05208                 | LR__0328
05208     72 FA 05 F6 | 	mov	result1, #114
0520c     E4 02 90 FD | 	jmp	#LR__0422
05210                 | LR__0329
05210     5D FA 05 F6 | 	mov	result1, #93
05214     DC 02 90 FD | 	jmp	#LR__0422
05218                 | LR__0330
05218     96 FA 05 F6 | 	mov	result1, #150
0521c     D4 02 90 FD | 	jmp	#LR__0422
05220                 | LR__0331
05220     43 FA 05 F6 | 	mov	result1, #67
05224     CC 02 90 FD | 	jmp	#LR__0422
05228                 | LR__0332
05228     43 FA 05 F6 | 	mov	result1, #67
0522c     C4 02 90 FD | 	jmp	#LR__0422
05230                 | LR__0333
05230     5A FA 05 F6 | 	mov	result1, #90
05234     BC 02 90 FD | 	jmp	#LR__0422
05238                 | LR__0334
05238     AB FA 05 F6 | 	mov	result1, #171
0523c     B4 02 90 FD | 	jmp	#LR__0422
05240                 | LR__0335
05240     BD FA 05 F6 | 	mov	result1, #189
05244     AC 02 90 FD | 	jmp	#LR__0422
05248                 | LR__0336
05248     BD FA 05 F6 | 	mov	result1, #189
0524c     A4 02 90 FD | 	jmp	#LR__0422
05250                 | LR__0337
05250     46 FA 05 F6 | 	mov	result1, #70
05254     9C 02 90 FD | 	jmp	#LR__0422
05258                 | LR__0338
05258     46 FA 05 F6 | 	mov	result1, #70
0525c     94 02 90 FD | 	jmp	#LR__0422
05260                 | LR__0339
05260     71 FA 05 F6 | 	mov	result1, #113
05264     8C 02 90 FD | 	jmp	#LR__0422
05268                 | LR__0340
05268     71 FA 05 F6 | 	mov	result1, #113
0526c     84 02 90 FD | 	jmp	#LR__0422
05270                 | LR__0341
05270     60 FA 05 F6 | 	mov	result1, #96
05274     7C 02 90 FD | 	jmp	#LR__0422
05278                 | LR__0342
05278     4A FA 05 F6 | 	mov	result1, #74
0527c     74 02 90 FD | 	jmp	#LR__0422
05280                 | LR__0343
05280     4A FA 05 F6 | 	mov	result1, #74
05284     6C 02 90 FD | 	jmp	#LR__0422
05288                 | LR__0344
05288     48 FA 05 F6 | 	mov	result1, #72
0528c     64 02 90 FD | 	jmp	#LR__0422
05290                 | LR__0345
05290     48 FA 05 F6 | 	mov	result1, #72
05294     5C 02 90 FD | 	jmp	#LR__0422
05298                 | LR__0346
05298     BB FA 05 F6 | 	mov	result1, #187
0529c     54 02 90 FD | 	jmp	#LR__0422
052a0                 | LR__0347
052a0     A9 FA 05 F6 | 	mov	result1, #169
052a4     4C 02 90 FD | 	jmp	#LR__0422
052a8                 | LR__0348
052a8     4E FA 05 F6 | 	mov	result1, #78
052ac     44 02 90 FD | 	jmp	#LR__0422
052b0                 | LR__0349
052b0     4E FA 05 F6 | 	mov	result1, #78
052b4     3C 02 90 FD | 	jmp	#LR__0422
052b8                 | LR__0350
052b8     58 FA 05 F6 | 	mov	result1, #88
052bc     34 02 90 FD | 	jmp	#LR__0422
052c0                 | LR__0351
052c0     5F FA 05 F6 | 	mov	result1, #95
052c4     2C 02 90 FD | 	jmp	#LR__0422
052c8                 | LR__0352
052c8     5F FA 05 F6 | 	mov	result1, #95
052cc     24 02 90 FD | 	jmp	#LR__0422
052d0                 | LR__0353
052d0     4C FA 05 F6 | 	mov	result1, #76
052d4     1C 02 90 FD | 	jmp	#LR__0422
052d8                 | LR__0354
052d8     4C FA 05 F6 | 	mov	result1, #76
052dc     14 02 90 FD | 	jmp	#LR__0422
052e0                 | LR__0355
052e0     52 FA 05 F6 | 	mov	result1, #82
052e4     0C 02 90 FD | 	jmp	#LR__0422
052e8                 | LR__0356
052e8     52 FA 05 F6 | 	mov	result1, #82
052ec     04 02 90 FD | 	jmp	#LR__0422
052f0                 | LR__0357
052f0     97 FA 05 F6 | 	mov	result1, #151
052f4     FC 01 90 FD | 	jmp	#LR__0422
052f8                 | LR__0358
052f8     61 FA 05 F6 | 	mov	result1, #97
052fc     F4 01 90 FD | 	jmp	#LR__0422
05300                 | LR__0359
05300     61 FA 05 F6 | 	mov	result1, #97
05304     EC 01 90 FD | 	jmp	#LR__0422
05308                 | LR__0360
05308     63 FA 05 F6 | 	mov	result1, #99
0530c     E4 01 90 FD | 	jmp	#LR__0422
05310                 | LR__0361
05310     41 FA 05 F6 | 	mov	result1, #65
05314     DC 01 90 FD | 	jmp	#LR__0422
05318                 | LR__0362
05318     4B FA 05 F6 | 	mov	result1, #75
0531c     D4 01 90 FD | 	jmp	#LR__0422
05320                 | LR__0363
05320     4B FA 05 F6 | 	mov	result1, #75
05324     CC 01 90 FD | 	jmp	#LR__0422
05328                 | LR__0364
05328     B3 FA 05 F6 | 	mov	result1, #179
0532c     C4 01 90 FD | 	jmp	#LR__0422
05330                 | LR__0365
05330     5E FA 05 F6 | 	mov	result1, #94
05334     BC 01 90 FD | 	jmp	#LR__0422
05338                 | LR__0366
05338     5E FA 05 F6 | 	mov	result1, #94
0533c     B4 01 90 FD | 	jmp	#LR__0422
05340                 | LR__0367
05340     7C FA 05 F6 | 	mov	result1, #124
05344     AC 01 90 FD | 	jmp	#LR__0422
05348                 | LR__0368
05348     7E FA 05 F6 | 	mov	result1, #126
0534c     A4 01 90 FD | 	jmp	#LR__0422
05350                 | LR__0369
05350     7D FA 05 F6 | 	mov	result1, #125
05354     9C 01 90 FD | 	jmp	#LR__0422
05358                 | LR__0370
05358     7F FA 05 F6 | 	mov	result1, #127
0535c     94 01 90 FD | 	jmp	#LR__0422
05360                 | LR__0371
05360     80 FA 05 F6 | 	mov	result1, #128
05364     8C 01 90 FD | 	jmp	#LR__0422
05368                 | LR__0372
05368     55 FA 05 F6 | 	mov	result1, #85
0536c     84 01 90 FD | 	jmp	#LR__0422
05370                 | LR__0373
05370     75 FA 05 F6 | 	mov	result1, #117
05374     7C 01 90 FD | 	jmp	#LR__0422
05378                 | LR__0374
05378     75 FA 05 F6 | 	mov	result1, #117
0537c     74 01 90 FD | 	jmp	#LR__0422
05380                 | LR__0375
05380     42 FA 05 F6 | 	mov	result1, #66
05384     6C 01 90 FD | 	jmp	#LR__0422
05388                 | LR__0376
05388     42 FA 05 F6 | 	mov	result1, #66
0538c     64 01 90 FD | 	jmp	#LR__0422
05390                 | LR__0377
05390     95 FA 05 F6 | 	mov	result1, #149
05394     5C 01 90 FD | 	jmp	#LR__0422
05398                 | LR__0378
05398     AC FA 05 F6 | 	mov	result1, #172
0539c     54 01 90 FD | 	jmp	#LR__0422
053a0                 | LR__0379
053a0     81 FA 05 F6 | 	mov	result1, #129
053a4     4C 01 90 FD | 	jmp	#LR__0422
053a8                 | LR__0380
053a8     81 FA 05 F6 | 	mov	result1, #129
053ac     44 01 90 FD | 	jmp	#LR__0422
053b0                 | LR__0381
053b0     44 FA 05 F6 | 	mov	result1, #68
053b4     3C 01 90 FD | 	jmp	#LR__0422
053b8                 | LR__0382
053b8     44 FA 05 F6 | 	mov	result1, #68
053bc     34 01 90 FD | 	jmp	#LR__0422
053c0                 | LR__0383
053c0     BC FA 05 F6 | 	mov	result1, #188
053c4     2C 01 90 FD | 	jmp	#LR__0422
053c8                 | LR__0384
053c8     88 FA 05 F6 | 	mov	result1, #136
053cc     24 01 90 FD | 	jmp	#LR__0422
053d0                 | LR__0385
053d0     92 FA 05 F6 | 	mov	result1, #146
053d4     1C 01 90 FD | 	jmp	#LR__0422
053d8                 | LR__0386
053d8     BE FA 05 F6 | 	mov	result1, #190
053dc     14 01 90 FD | 	jmp	#LR__0422
053e0                 | LR__0387
053e0     BE FA 05 F6 | 	mov	result1, #190
053e4     0C 01 90 FD | 	jmp	#LR__0422
053e8                 | LR__0388
053e8     AA FA 05 F6 | 	mov	result1, #170
053ec     04 01 90 FD | 	jmp	#LR__0422
053f0                 | LR__0389
053f0     4D FA 05 F6 | 	mov	result1, #77
053f4     FC 00 90 FD | 	jmp	#LR__0422
053f8                 | LR__0390
053f8     51 FA 05 F6 | 	mov	result1, #81
053fc     F4 00 90 FD | 	jmp	#LR__0422
05400                 | LR__0391
05400     51 FA 05 F6 | 	mov	result1, #81
05404     EC 00 90 FD | 	jmp	#LR__0422
05408                 | LR__0392
05408     8E FA 05 F6 | 	mov	result1, #142
0540c     E4 00 90 FD | 	jmp	#LR__0422
05410                 | LR__0393
05410     8E FA 05 F6 | 	mov	result1, #142
05414     DC 00 90 FD | 	jmp	#LR__0422
05418                 | LR__0394
05418     90 FA 05 F6 | 	mov	result1, #144
0541c     D4 00 90 FD | 	jmp	#LR__0422
05420                 | LR__0395
05420     90 FA 05 F6 | 	mov	result1, #144
05424     CC 00 90 FD | 	jmp	#LR__0422
05428                 | LR__0396
05428     8D FA 05 F6 | 	mov	result1, #141
0542c     C4 00 90 FD | 	jmp	#LR__0422
05430                 | LR__0397
05430     8D FA 05 F6 | 	mov	result1, #141
05434     BC 00 90 FD | 	jmp	#LR__0422
05438                 | LR__0398
05438     8C FA 05 F6 | 	mov	result1, #140
0543c     B4 00 90 FD | 	jmp	#LR__0422
05440                 | LR__0399
05440     8C FA 05 F6 | 	mov	result1, #140
05444     AC 00 90 FD | 	jmp	#LR__0422
05448                 | LR__0400
05448     91 FA 05 F6 | 	mov	result1, #145
0544c     A4 00 90 FD | 	jmp	#LR__0422
05450                 | LR__0401
05450     91 FA 05 F6 | 	mov	result1, #145
05454     9C 00 90 FD | 	jmp	#LR__0422
05458                 | LR__0402
05458     8B FA 05 F6 | 	mov	result1, #139
0545c     94 00 90 FD | 	jmp	#LR__0422
05460                 | LR__0403
05460     8B FA 05 F6 | 	mov	result1, #139
05464     8C 00 90 FD | 	jmp	#LR__0422
05468                 | LR__0404
05468     8F FA 05 F6 | 	mov	result1, #143
0546c     84 00 90 FD | 	jmp	#LR__0422
05470                 | LR__0405
05470     8F FA 05 F6 | 	mov	result1, #143
05474     7C 00 90 FD | 	jmp	#LR__0422
05478                 | LR__0406
05478     8F FA 05 F6 | 	mov	result1, #143
0547c     74 00 90 FD | 	jmp	#LR__0422
05480                 | LR__0407
05480     B2 FA 05 F6 | 	mov	result1, #178
05484     6C 00 90 FD | 	jmp	#LR__0422
05488                 | LR__0408
05488     B2 FA 05 F6 | 	mov	result1, #178
0548c     64 00 90 FD | 	jmp	#LR__0422
05490                 | LR__0409
05490     75 FA 05 F6 | 	mov	result1, #117
05494     5C 00 90 FD | 	jmp	#LR__0422
05498                 | LR__0410
05498     75 FA 05 F6 | 	mov	result1, #117
0549c     54 00 90 FD | 	jmp	#LR__0422
054a0                 | LR__0411
054a0     6D FA 05 F6 | 	mov	result1, #109
054a4     4C 00 90 FD | 	jmp	#LR__0422
054a8                 | LR__0412
054a8     6D FA 05 F6 | 	mov	result1, #109
054ac     44 00 90 FD | 	jmp	#LR__0422
054b0                 | LR__0413
054b0     5B FA 05 F6 | 	mov	result1, #91
054b4     3C 00 90 FD | 	jmp	#LR__0422
054b8                 | LR__0414
054b8     56 FA 05 F6 | 	mov	result1, #86
054bc     34 00 90 FD | 	jmp	#LR__0422
054c0                 | LR__0415
054c0     70 FA 05 F6 | 	mov	result1, #112
054c4     2C 00 90 FD | 	jmp	#LR__0422
054c8                 | LR__0416
054c8     70 FA 05 F6 | 	mov	result1, #112
054cc     24 00 90 FD | 	jmp	#LR__0422
054d0                 | LR__0417
054d0     57 FA 05 F6 | 	mov	result1, #87
054d4     1C 00 90 FD | 	jmp	#LR__0422
054d8                 | LR__0418
054d8     57 FA 05 F6 | 	mov	result1, #87
054dc     14 00 90 FD | 	jmp	#LR__0422
054e0                 | LR__0419
054e0     77 FA 05 F6 | 	mov	result1, #119
054e4     0C 00 90 FD | 	jmp	#LR__0422
054e8                 | LR__0420
054e8     78 FA 05 F6 | 	mov	result1, #120
054ec     04 00 90 FD | 	jmp	#LR__0422
054f0                 | LR__0421
054f0     00 FA 05 F6 | 	mov	result1, #0
054f4                 | LR__0422
054f4     A7 F0 03 F6 | 	mov	ptra, fp
054f8     B2 00 A0 FD | 	call	#popregs_
054fc                 | _iscommand_ret
054fc     2D 00 64 FD | 	ret
05500                 | 
05500                 | ' 
05500                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05500                 | ' 
05500                 | ' function isfunction(s as string) as ubyte
05500                 | _isfunction
05500     01 4A 05 F6 | 	mov	COUNT_, #1
05504     A8 00 A0 FD | 	call	#pushregs_
05508                 | ' 
05508                 | ' select case s
05508     09 1F 02 F6 | 	mov	local01, arg01
0550c     81 01 00 FF 
05510     DF 15 06 F6 | 	mov	arg02, ##@LR__5285
05514     0F 13 02 F6 | 	mov	arg01, local01
05518     34 B2 B1 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     0C 04 90 AD |  if_e	jmp	#LR__0430
05524     81 01 00 FF 
05528     E3 15 06 F6 | 	mov	arg02, ##@LR__5286
0552c     0F 13 02 F6 | 	mov	arg01, local01
05530     1C B2 B1 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     FC 03 90 AD |  if_e	jmp	#LR__0431
0553c     81 01 00 FF 
05540     E8 15 06 F6 | 	mov	arg02, ##@LR__5287
05544     0F 13 02 F6 | 	mov	arg01, local01
05548     04 B2 B1 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     EC 03 90 AD |  if_e	jmp	#LR__0432
05554     81 01 00 FF 
05558     EC 15 06 F6 | 	mov	arg02, ##@LR__5288
0555c     0F 13 02 F6 | 	mov	arg01, local01
05560     EC B1 B1 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     DC 03 90 AD |  if_e	jmp	#LR__0433
0556c     81 01 00 FF 
05570     F1 15 06 F6 | 	mov	arg02, ##@LR__5289
05574     0F 13 02 F6 | 	mov	arg01, local01
05578     D4 B1 B1 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     CC 03 90 AD |  if_e	jmp	#LR__0434
05584     81 01 00 FF 
05588     F5 15 06 F6 | 	mov	arg02, ##@LR__5290
0558c     0F 13 02 F6 | 	mov	arg01, local01
05590     BC B1 B1 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     BC 03 90 AD |  if_e	jmp	#LR__0435
0559c     81 01 00 FF 
055a0     FA 15 06 F6 | 	mov	arg02, ##@LR__5291
055a4     0F 13 02 F6 | 	mov	arg01, local01
055a8     A4 B1 B1 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     AC 03 90 AD |  if_e	jmp	#LR__0436
055b4     81 01 00 FF 
055b8     FE 15 06 F6 | 	mov	arg02, ##@LR__5292
055bc     0F 13 02 F6 | 	mov	arg01, local01
055c0     8C B1 B1 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     9C 03 90 AD |  if_e	jmp	#LR__0437
055cc     82 01 00 FF 
055d0     03 14 06 F6 | 	mov	arg02, ##@LR__5293
055d4     0F 13 02 F6 | 	mov	arg01, local01
055d8     74 B1 B1 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     8C 03 90 AD |  if_e	jmp	#LR__0438
055e4     82 01 00 FF 
055e8     08 14 06 F6 | 	mov	arg02, ##@LR__5294
055ec     0F 13 02 F6 | 	mov	arg01, local01
055f0     5C B1 B1 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     7C 03 90 AD |  if_e	jmp	#LR__0439
055fc     82 01 00 FF 
05600     0C 14 06 F6 | 	mov	arg02, ##@LR__5295
05604     0F 13 02 F6 | 	mov	arg01, local01
05608     44 B1 B1 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     6C 03 90 AD |  if_e	jmp	#LR__0440
05614     82 01 00 FF 
05618     12 14 06 F6 | 	mov	arg02, ##@LR__5296
0561c     0F 13 02 F6 | 	mov	arg01, local01
05620     2C B1 B1 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     5C 03 90 AD |  if_e	jmp	#LR__0441
0562c     82 01 00 FF 
05630     16 14 06 F6 | 	mov	arg02, ##@LR__5297
05634     0F 13 02 F6 | 	mov	arg01, local01
05638     14 B1 B1 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     4C 03 90 AD |  if_e	jmp	#LR__0442
05644     82 01 00 FF 
05648     1F 14 06 F6 | 	mov	arg02, ##@LR__5298
0564c     0F 13 02 F6 | 	mov	arg01, local01
05650     FC B0 B1 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     3C 03 90 AD |  if_e	jmp	#LR__0443
0565c     82 01 00 FF 
05660     23 14 06 F6 | 	mov	arg02, ##@LR__5299
05664     0F 13 02 F6 | 	mov	arg01, local01
05668     E4 B0 B1 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     2C 03 90 AD |  if_e	jmp	#LR__0444
05674     82 01 00 FF 
05678     31 14 06 F6 | 	mov	arg02, ##@LR__5300
0567c     0F 13 02 F6 | 	mov	arg01, local01
05680     CC B0 B1 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     1C 03 90 AD |  if_e	jmp	#LR__0445
0568c     82 01 00 FF 
05690     3E 14 06 F6 | 	mov	arg02, ##@LR__5301
05694     0F 13 02 F6 | 	mov	arg01, local01
05698     B4 B0 B1 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     0C 03 90 AD |  if_e	jmp	#LR__0446
056a4     82 01 00 FF 
056a8     46 14 06 F6 | 	mov	arg02, ##@LR__5302
056ac     0F 13 02 F6 | 	mov	arg01, local01
056b0     9C B0 B1 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     FC 02 90 AD |  if_e	jmp	#LR__0447
056bc     82 01 00 FF 
056c0     4B 14 06 F6 | 	mov	arg02, ##@LR__5303
056c4     0F 13 02 F6 | 	mov	arg01, local01
056c8     84 B0 B1 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     EC 02 90 AD |  if_e	jmp	#LR__0448
056d4     82 01 00 FF 
056d8     52 14 06 F6 | 	mov	arg02, ##@LR__5304
056dc     0F 13 02 F6 | 	mov	arg01, local01
056e0     6C B0 B1 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     DC 02 90 AD |  if_e	jmp	#LR__0449
056ec     82 01 00 FF 
056f0     56 14 06 F6 | 	mov	arg02, ##@LR__5305
056f4     0F 13 02 F6 | 	mov	arg01, local01
056f8     54 B0 B1 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     CC 02 90 AD |  if_e	jmp	#LR__0450
05704     82 01 00 FF 
05708     5C 14 06 F6 | 	mov	arg02, ##@LR__5306
0570c     0F 13 02 F6 | 	mov	arg01, local01
05710     3C B0 B1 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     BC 02 90 AD |  if_e	jmp	#LR__0451
0571c     82 01 00 FF 
05720     60 14 06 F6 | 	mov	arg02, ##@LR__5307
05724     0F 13 02 F6 | 	mov	arg01, local01
05728     24 B0 B1 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     AC 02 90 AD |  if_e	jmp	#LR__0452
05734     82 01 00 FF 
05738     64 14 06 F6 | 	mov	arg02, ##@LR__5308
0573c     0F 13 02 F6 | 	mov	arg01, local01
05740     0C B0 B1 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     9C 02 90 AD |  if_e	jmp	#LR__0453
0574c     82 01 00 FF 
05750     6A 14 06 F6 | 	mov	arg02, ##@LR__5309
05754     0F 13 02 F6 | 	mov	arg01, local01
05758     F4 AF B1 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     8C 02 90 AD |  if_e	jmp	#LR__0454
05764     82 01 00 FF 
05768     6F 14 06 F6 | 	mov	arg02, ##@LR__5310
0576c     0F 13 02 F6 | 	mov	arg01, local01
05770     DC AF B1 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     7C 02 90 AD |  if_e	jmp	#LR__0455
0577c     82 01 00 FF 
05780     76 14 06 F6 | 	mov	arg02, ##@LR__5311
05784     0F 13 02 F6 | 	mov	arg01, local01
05788     C4 AF B1 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     6C 02 90 AD |  if_e	jmp	#LR__0456
05794     82 01 00 FF 
05798     7D 14 06 F6 | 	mov	arg02, ##@LR__5312
0579c     0F 13 02 F6 | 	mov	arg01, local01
057a0     AC AF B1 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     5C 02 90 AD |  if_e	jmp	#LR__0457
057ac     82 01 00 FF 
057b0     84 14 06 F6 | 	mov	arg02, ##@LR__5313
057b4     0F 13 02 F6 | 	mov	arg01, local01
057b8     94 AF B1 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     4C 02 90 AD |  if_e	jmp	#LR__0458
057c4     82 01 00 FF 
057c8     8B 14 06 F6 | 	mov	arg02, ##@LR__5314
057cc     0F 13 02 F6 | 	mov	arg01, local01
057d0     7C AF B1 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     3C 02 90 AD |  if_e	jmp	#LR__0459
057dc     82 01 00 FF 
057e0     90 14 06 F6 | 	mov	arg02, ##@LR__5315
057e4     0F 13 02 F6 | 	mov	arg01, local01
057e8     64 AF B1 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     2C 02 90 AD |  if_e	jmp	#LR__0460
057f4     82 01 00 FF 
057f8     98 14 06 F6 | 	mov	arg02, ##@LR__5316
057fc     0F 13 02 F6 | 	mov	arg01, local01
05800     4C AF B1 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     1C 02 90 AD |  if_e	jmp	#LR__0461
0580c     82 01 00 FF 
05810     9E 14 06 F6 | 	mov	arg02, ##@LR__5317
05814     0F 13 02 F6 | 	mov	arg01, local01
05818     34 AF B1 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     0C 02 90 AD |  if_e	jmp	#LR__0462
05824     82 01 00 FF 
05828     A5 14 06 F6 | 	mov	arg02, ##@LR__5318
0582c     0F 13 02 F6 | 	mov	arg01, local01
05830     1C AF B1 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     FC 01 90 AD |  if_e	jmp	#LR__0463
0583c     82 01 00 FF 
05840     AB 14 06 F6 | 	mov	arg02, ##@LR__5319
05844     0F 13 02 F6 | 	mov	arg01, local01
05848     04 AF B1 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     EC 01 90 AD |  if_e	jmp	#LR__0464
05854     82 01 00 FF 
05858     B1 14 06 F6 | 	mov	arg02, ##@LR__5320
0585c     0F 13 02 F6 | 	mov	arg01, local01
05860     EC AE B1 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     DC 01 90 AD |  if_e	jmp	#LR__0465
0586c     82 01 00 FF 
05870     B5 14 06 F6 | 	mov	arg02, ##@LR__5321
05874     0F 13 02 F6 | 	mov	arg01, local01
05878     D4 AE B1 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     CC 01 90 AD |  if_e	jmp	#LR__0466
05884     82 01 00 FF 
05888     B9 14 06 F6 | 	mov	arg02, ##@LR__5322
0588c     0F 13 02 F6 | 	mov	arg01, local01
05890     BC AE B1 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     BC 01 90 AD |  if_e	jmp	#LR__0467
0589c     82 01 00 FF 
058a0     BD 14 06 F6 | 	mov	arg02, ##@LR__5323
058a4     0F 13 02 F6 | 	mov	arg01, local01
058a8     A4 AE B1 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     AC 01 90 AD |  if_e	jmp	#LR__0468
058b4     82 01 00 FF 
058b8     C3 14 06 F6 | 	mov	arg02, ##@LR__5324
058bc     0F 13 02 F6 | 	mov	arg01, local01
058c0     8C AE B1 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     9C 01 90 AD |  if_e	jmp	#LR__0469
058cc     82 01 00 FF 
058d0     C9 14 06 F6 | 	mov	arg02, ##@LR__5325
058d4     0F 13 02 F6 | 	mov	arg01, local01
058d8     74 AE B1 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     8C 01 90 AD |  if_e	jmp	#LR__0470
058e4     82 01 00 FF 
058e8     CE 14 06 F6 | 	mov	arg02, ##@LR__5326
058ec     0F 13 02 F6 | 	mov	arg01, local01
058f0     5C AE B1 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     7C 01 90 AD |  if_e	jmp	#LR__0471
058fc     82 01 00 FF 
05900     D2 14 06 F6 | 	mov	arg02, ##@LR__5327
05904     0F 13 02 F6 | 	mov	arg01, local01
05908     44 AE B1 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     6C 01 90 AD |  if_e	jmp	#LR__0472
05914     82 01 00 FF 
05918     D6 14 06 F6 | 	mov	arg02, ##@LR__5328
0591c     0F 13 02 F6 | 	mov	arg01, local01
05920     2C AE B1 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     5C 01 90 AD |  if_e	jmp	#LR__0473
0592c     60 01 90 FD | 	jmp	#LR__0474
05930                 | LR__0430
05930     9E FA 05 F6 | 	mov	result1, #158
05934     5C 01 90 FD | 	jmp	#LR__0475
05938                 | LR__0431
05938     85 FA 05 F6 | 	mov	result1, #133
0593c     54 01 90 FD | 	jmp	#LR__0475
05940                 | LR__0432
05940     9B FA 05 F6 | 	mov	result1, #155
05944     4C 01 90 FD | 	jmp	#LR__0475
05948                 | LR__0433
05948     9B FA 05 F6 | 	mov	result1, #155
0594c     44 01 90 FD | 	jmp	#LR__0475
05950                 | LR__0434
05950     A7 FA 05 F6 | 	mov	result1, #167
05954     3C 01 90 FD | 	jmp	#LR__0475
05958                 | LR__0435
05958     84 FA 05 F6 | 	mov	result1, #132
0595c     34 01 90 FD | 	jmp	#LR__0475
05960                 | LR__0436
05960     86 FA 05 F6 | 	mov	result1, #134
05964     2C 01 90 FD | 	jmp	#LR__0475
05968                 | LR__0437
05968     A2 FA 05 F6 | 	mov	result1, #162
0596c     24 01 90 FD | 	jmp	#LR__0475
05970                 | LR__0438
05970     9F FA 05 F6 | 	mov	result1, #159
05974     1C 01 90 FD | 	jmp	#LR__0475
05978                 | LR__0439
05978     82 FA 05 F6 | 	mov	result1, #130
0597c     14 01 90 FD | 	jmp	#LR__0475
05980                 | LR__0440
05980     99 FA 05 F6 | 	mov	result1, #153
05984     0C 01 90 FD | 	jmp	#LR__0475
05988                 | LR__0441
05988     9C FA 05 F6 | 	mov	result1, #156
0598c     04 01 90 FD | 	jmp	#LR__0475
05990                 | LR__0442
05990     6F FA 05 F6 | 	mov	result1, #111
05994     FC 00 90 FD | 	jmp	#LR__0475
05998                 | LR__0443
05998     6F FA 05 F6 | 	mov	result1, #111
0599c     F4 00 90 FD | 	jmp	#LR__0475
059a0                 | LR__0444
059a0     93 FA 05 F6 | 	mov	result1, #147
059a4     EC 00 90 FD | 	jmp	#LR__0475
059a8                 | LR__0445
059a8     94 FA 05 F6 | 	mov	result1, #148
059ac     E4 00 90 FD | 	jmp	#LR__0475
059b0                 | LR__0446
059b0     62 FA 05 F6 | 	mov	result1, #98
059b4     DC 00 90 FD | 	jmp	#LR__0475
059b8                 | LR__0447
059b8     A3 FA 05 F6 | 	mov	result1, #163
059bc     D4 00 90 FD | 	jmp	#LR__0475
059c0                 | LR__0448
059c0     9D FA 05 F6 | 	mov	result1, #157
059c4     CC 00 90 FD | 	jmp	#LR__0475
059c8                 | LR__0449
059c8     8A FA 05 F6 | 	mov	result1, #138
059cc     C4 00 90 FD | 	jmp	#LR__0475
059d0                 | LR__0450
059d0     A4 FA 05 F6 | 	mov	result1, #164
059d4     BC 00 90 FD | 	jmp	#LR__0475
059d8                 | LR__0451
059d8     A8 FA 05 F6 | 	mov	result1, #168
059dc     B4 00 90 FD | 	jmp	#LR__0475
059e0                 | LR__0452
059e0     AD FA 05 F6 | 	mov	result1, #173
059e4     AC 00 90 FD | 	jmp	#LR__0475
059e8                 | LR__0453
059e8     9A FA 05 F6 | 	mov	result1, #154
059ec     A4 00 90 FD | 	jmp	#LR__0475
059f0                 | LR__0454
059f0     A6 FA 05 F6 | 	mov	result1, #166
059f4     9C 00 90 FD | 	jmp	#LR__0475
059f8                 | LR__0455
059f8     66 FA 05 F6 | 	mov	result1, #102
059fc     94 00 90 FD | 	jmp	#LR__0475
05a00                 | LR__0456
05a00     67 FA 05 F6 | 	mov	result1, #103
05a04     8C 00 90 FD | 	jmp	#LR__0475
05a08                 | LR__0457
05a08     64 FA 05 F6 | 	mov	result1, #100
05a0c     84 00 90 FD | 	jmp	#LR__0475
05a10                 | LR__0458
05a10     65 FA 05 F6 | 	mov	result1, #101
05a14     7C 00 90 FD | 	jmp	#LR__0475
05a18                 | LR__0459
05a18     98 FA 05 F6 | 	mov	result1, #152
05a1c     74 00 90 FD | 	jmp	#LR__0475
05a20                 | LR__0460
05a20     7B FA 05 F6 | 	mov	result1, #123
05a24     6C 00 90 FD | 	jmp	#LR__0475
05a28                 | LR__0461
05a28     76 FA 05 F6 | 	mov	result1, #118
05a2c     64 00 90 FD | 	jmp	#LR__0475
05a30                 | LR__0462
05a30     A5 FA 05 F6 | 	mov	result1, #165
05a34     5C 00 90 FD | 	jmp	#LR__0475
05a38                 | LR__0463
05a38     7A FA 05 F6 | 	mov	result1, #122
05a3c     54 00 90 FD | 	jmp	#LR__0475
05a40                 | LR__0464
05a40     BF FA 05 F6 | 	mov	result1, #191
05a44     4C 00 90 FD | 	jmp	#LR__0475
05a48                 | LR__0465
05a48     54 FA 05 F6 | 	mov	result1, #84
05a4c     44 00 90 FD | 	jmp	#LR__0475
05a50                 | LR__0466
05a50     6B FA 05 F6 | 	mov	result1, #107
05a54     3C 00 90 FD | 	jmp	#LR__0475
05a58                 | LR__0467
05a58     87 FA 05 F6 | 	mov	result1, #135
05a5c     34 00 90 FD | 	jmp	#LR__0475
05a60                 | LR__0468
05a60     6A FA 05 F6 | 	mov	result1, #106
05a64     2C 00 90 FD | 	jmp	#LR__0475
05a68                 | LR__0469
05a68     6E FA 05 F6 | 	mov	result1, #110
05a6c     24 00 90 FD | 	jmp	#LR__0475
05a70                 | LR__0470
05a70     A1 FA 05 F6 | 	mov	result1, #161
05a74     1C 00 90 FD | 	jmp	#LR__0475
05a78                 | LR__0471
05a78     83 FA 05 F6 | 	mov	result1, #131
05a7c     14 00 90 FD | 	jmp	#LR__0475
05a80                 | LR__0472
05a80     A0 FA 05 F6 | 	mov	result1, #160
05a84     0C 00 90 FD | 	jmp	#LR__0475
05a88                 | LR__0473
05a88     9B FA 05 F6 | 	mov	result1, #155
05a8c     04 00 90 FD | 	jmp	#LR__0475
05a90                 | LR__0474
05a90     00 FA 05 F6 | 	mov	result1, #0
05a94                 | LR__0475
05a94     A7 F0 03 F6 | 	mov	ptra, fp
05a98     B2 00 A0 FD | 	call	#popregs_
05a9c                 | _isfunction_ret
05a9c     2D 00 64 FD | 	ret
05aa0                 | 
05aa0                 | ' 
05aa0                 | ' function isname(s as string) as boolean
05aa0                 | _isname
05aa0     0D 4A 05 F6 | 	mov	COUNT_, #13
05aa4     A8 00 A0 FD | 	call	#pushregs_
05aa8     09 1F 02 F6 | 	mov	local01, arg01
05aac     09 21 02 F6 | 	mov	local02, arg01
05ab0     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05ab4                 | LR__0480
05ab4     10 FB C9 FA | 	rdbyte	result1, local02 wz
05ab8     01 20 06 51 |  if_ne	add	local02, #1
05abc     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05ac0                 | LR__0481
05ac0     09 21 82 F1 | 	sub	local02, arg01
05ac4     10 FB 01 F6 | 	mov	result1, local02
05ac8     FD 22 0A F6 | 	mov	local03, result1 wz
05acc     00 FA 05 A6 |  if_e	mov	result1, #0
05ad0     34 02 90 AD |  if_e	jmp	#LR__0493
05ad4     0F 13 02 F6 | 	mov	arg01, local01
05ad8     01 14 06 F6 | 	mov	arg02, #1
05adc     01 16 06 F6 | 	mov	arg03, #1
05ae0     D8 CD B1 FD | 	call	#__system__Mid_S
05ae4     FD 24 02 F6 | 	mov	local04, result1
05ae8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05ae8     82 01 00 FF 
05aec     DD 14 06 F6 | 	mov	arg02, ##@LR__5329
05af0     12 13 02 F6 | 	mov	arg01, local04
05af4     58 AC B1 FD | 	call	#__system___string_cmp
05af8     00 FA 55 F2 | 	cmps	result1, #0 wc
05afc     18 00 90 CD |  if_b	jmp	#LR__0482
05b00     82 01 00 FF 
05b04     DF 14 06 F6 | 	mov	arg02, ##@LR__5330
05b08     12 13 02 F6 | 	mov	arg01, local04
05b0c     40 AC B1 FD | 	call	#__system___string_cmp
05b10     01 FA 55 F2 | 	cmps	result1, #1 wc
05b14     1C 00 90 CD |  if_b	jmp	#LR__0483
05b18                 | LR__0482
05b18     82 01 00 FF 
05b1c     E1 14 06 F6 | 	mov	arg02, ##@LR__5331
05b20     12 13 02 F6 | 	mov	arg01, local04
05b24     28 AC B1 FD | 	call	#__system___string_cmp
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     00 FA 05 56 |  if_ne	mov	result1, #0
05b30     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b34                 | LR__0483
05b34                 | ' if l>2 then 
05b34     03 22 56 F2 | 	cmps	local03, #3 wc
05b38     C8 01 90 CD |  if_b	jmp	#LR__0492
05b3c                 | '   for i=2 to l
05b3c     02 26 06 F6 | 	mov	local05, #2
05b40     11 29 02 F6 | 	mov	local06, local03
05b44     01 28 06 F1 | 	add	local06, #1
05b48                 | LR__0484
05b48     14 27 52 F2 | 	cmps	local05, local06 wc
05b4c     B4 01 90 3D |  if_ae	jmp	#LR__0491
05b50     0F 13 02 F6 | 	mov	arg01, local01
05b54     13 15 02 F6 | 	mov	arg02, local05
05b58     01 16 06 F6 | 	mov	arg03, #1
05b5c     5C CD B1 FD | 	call	#__system__Mid_S
05b60     FD 24 02 F6 | 	mov	local04, result1
05b64                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
05b64     11 27 52 F2 | 	cmps	local05, local03 wc
05b68     9C 00 90 3D |  if_ae	jmp	#LR__0487
05b6c     82 01 00 FF 
05b70     E3 14 06 F6 | 	mov	arg02, ##@LR__5332
05b74     12 13 02 F6 | 	mov	arg01, local04
05b78     D4 AB B1 FD | 	call	#__system___string_cmp
05b7c     00 FA 55 F2 | 	cmps	result1, #0 wc
05b80     18 00 90 CD |  if_b	jmp	#LR__0485
05b84     82 01 00 FF 
05b88     E5 14 06 F6 | 	mov	arg02, ##@LR__5333
05b8c     12 13 02 F6 | 	mov	arg01, local04
05b90     BC AB B1 FD | 	call	#__system___string_cmp
05b94     01 FA 55 F2 | 	cmps	result1, #1 wc
05b98     6C 00 90 CD |  if_b	jmp	#LR__0487
05b9c                 | LR__0485
05b9c     82 01 00 FF 
05ba0     E7 14 06 F6 | 	mov	arg02, ##@LR__5334
05ba4     12 13 02 F6 | 	mov	arg01, local04
05ba8     A4 AB B1 FD | 	call	#__system___string_cmp
05bac     00 FA 55 F2 | 	cmps	result1, #0 wc
05bb0     18 00 90 CD |  if_b	jmp	#LR__0486
05bb4     82 01 00 FF 
05bb8     E9 14 06 F6 | 	mov	arg02, ##@LR__5335
05bbc     12 13 02 F6 | 	mov	arg01, local04
05bc0     8C AB B1 FD | 	call	#__system___string_cmp
05bc4     01 FA 55 F2 | 	cmps	result1, #1 wc
05bc8     3C 00 90 CD |  if_b	jmp	#LR__0487
05bcc                 | LR__0486
05bcc     82 01 00 FF 
05bd0     EB 2A 06 F6 | 	mov	local07, ##@LR__5336
05bd4     12 13 02 F6 | 	mov	arg01, local04
05bd8     15 15 02 F6 | 	mov	arg02, local07
05bdc     70 AB B1 FD | 	call	#__system___string_cmp
05be0     00 FA 0D F2 | 	cmp	result1, #0 wz
05be4     20 00 90 AD |  if_e	jmp	#LR__0487
05be8     82 01 00 FF 
05bec     ED 2C 06 F6 | 	mov	local08, ##@LR__5337
05bf0     12 13 02 F6 | 	mov	arg01, local04
05bf4     16 15 02 F6 | 	mov	arg02, local08
05bf8     54 AB B1 FD | 	call	#__system___string_cmp
05bfc     FD 2E 0A F6 | 	mov	local09, result1 wz
05c00     00 FA 05 56 |  if_ne	mov	result1, #0
05c04     00 01 90 5D |  if_ne	jmp	#LR__0493
05c08                 | LR__0487
05c08                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c08     11 27 0A F2 | 	cmp	local05, local03 wz
05c0c     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c10     82 01 00 FF 
05c14     EF 30 06 F6 | 	mov	local10, ##@LR__5338
05c18     12 13 02 F6 | 	mov	arg01, local04
05c1c     18 15 02 F6 | 	mov	arg02, local10
05c20     2C AB B1 FD | 	call	#__system___string_cmp
05c24     FD 32 02 F6 | 	mov	local11, result1
05c28     00 32 56 F2 | 	cmps	local11, #0 wc
05c2c     1C 00 90 CD |  if_b	jmp	#LR__0488
05c30     82 01 00 FF 
05c34     F1 14 06 F6 | 	mov	arg02, ##@LR__5339
05c38     12 13 02 F6 | 	mov	arg01, local04
05c3c     10 AB B1 FD | 	call	#__system___string_cmp
05c40     FD 30 02 F6 | 	mov	local10, result1
05c44     01 30 56 F2 | 	cmps	local10, #1 wc
05c48     B0 00 90 CD |  if_b	jmp	#LR__0490
05c4c                 | LR__0488
05c4c     82 01 00 FF 
05c50     F3 14 06 F6 | 	mov	arg02, ##@LR__5340
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     F4 AA B1 FD | 	call	#__system___string_cmp
05c5c     00 FA 55 F2 | 	cmps	result1, #0 wc
05c60     1C 00 90 CD |  if_b	jmp	#LR__0489
05c64     82 01 00 FF 
05c68     F5 2E 06 F6 | 	mov	local09, ##@LR__5341
05c6c     12 13 02 F6 | 	mov	arg01, local04
05c70     17 15 02 F6 | 	mov	arg02, local09
05c74     D8 AA B1 FD | 	call	#__system___string_cmp
05c78     01 FA 55 F2 | 	cmps	result1, #1 wc
05c7c     7C 00 90 CD |  if_b	jmp	#LR__0490
05c80                 | LR__0489
05c80     82 01 00 FF 
05c84     F7 2E 06 F6 | 	mov	local09, ##@LR__5342
05c88     12 13 02 F6 | 	mov	arg01, local04
05c8c     17 15 02 F6 | 	mov	arg02, local09
05c90     BC AA B1 FD | 	call	#__system___string_cmp
05c94     00 FA 4D F2 | 	cmps	result1, #0 wz
05c98     60 00 90 AD |  if_e	jmp	#LR__0490
05c9c     82 01 00 FF 
05ca0     F9 2C 06 F6 | 	mov	local08, ##@LR__5343
05ca4     12 13 02 F6 | 	mov	arg01, local04
05ca8     16 15 02 F6 | 	mov	arg02, local08
05cac     A0 AA B1 FD | 	call	#__system___string_cmp
05cb0     FD 2E 0A F6 | 	mov	local09, result1 wz
05cb4     44 00 90 AD |  if_e	jmp	#LR__0490
05cb8     82 01 00 FF 
05cbc     FB 34 06 F6 | 	mov	local12, ##@LR__5344
05cc0     1A 2D 02 F6 | 	mov	local08, local12
05cc4     12 13 02 F6 | 	mov	arg01, local04
05cc8     16 15 02 F6 | 	mov	arg02, local08
05ccc     80 AA B1 FD | 	call	#__system___string_cmp
05cd0     FD 2A 0A F6 | 	mov	local07, result1 wz
05cd4     24 00 90 AD |  if_e	jmp	#LR__0490
05cd8     82 01 00 FF 
05cdc     FD 36 06 F6 | 	mov	local13, ##@LR__5345
05ce0     1B 35 02 F6 | 	mov	local12, local13
05ce4     12 13 02 F6 | 	mov	arg01, local04
05ce8     1A 15 02 F6 | 	mov	arg02, local12
05cec     60 AA B1 FD | 	call	#__system___string_cmp
05cf0     FD 2C 0A F6 | 	mov	local08, result1 wz
05cf4     00 FA 05 56 |  if_ne	mov	result1, #0
05cf8     0C 00 90 5D |  if_ne	jmp	#LR__0493
05cfc                 | LR__0490
05cfc     01 26 06 F1 | 	add	local05, #1
05d00     44 FE 9F FD | 	jmp	#LR__0484
05d04                 | LR__0491
05d04                 | LR__0492
05d04                 | ' return true
05d04     01 FA 65 F6 | 	neg	result1, #1
05d08                 | LR__0493
05d08     A7 F0 03 F6 | 	mov	ptra, fp
05d0c     B2 00 A0 FD | 	call	#popregs_
05d10                 | _isname_ret
05d10     2D 00 64 FD | 	ret
05d14                 | 
05d14                 | ' 
05d14                 | ' function isnum(s as string) as boolean ' todo : bins have only 1 and 0 in them
05d14                 | _isnum
05d14     11 4A 05 F6 | 	mov	COUNT_, #17
05d18     A8 00 A0 FD | 	call	#pushregs_
05d1c     09 1F 02 F6 | 	mov	local01, arg01
05d20     00 20 06 F6 | 	mov	local02, #0
05d24     00 22 06 F6 | 	mov	local03, #0
05d28     0F 13 02 F6 | 	mov	arg01, local01
05d2c     09 25 02 F6 | 	mov	local04, arg01
05d30     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d34                 | LR__0500
05d34     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d38     01 24 06 51 |  if_ne	add	local04, #1
05d3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05d40                 | LR__0501
05d40     09 25 82 F1 | 	sub	local04, arg01
05d44     12 FB 01 F6 | 	mov	result1, local04
05d48     FD 26 0A F6 | 	mov	local05, result1 wz
05d4c     00 FA 05 A6 |  if_e	mov	result1, #0
05d50     18 03 90 AD |  if_e	jmp	#LR__0514
05d54     0F 13 02 F6 | 	mov	arg01, local01
05d58     01 14 06 F6 | 	mov	arg02, #1
05d5c     01 16 06 F6 | 	mov	arg03, #1
05d60     58 CB B1 FD | 	call	#__system__Mid_S
05d64     FD 28 02 F6 | 	mov	local06, result1
05d68                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05d68     82 01 00 FF 
05d6c     FF 14 06 F6 | 	mov	arg02, ##@LR__5346
05d70     14 13 02 F6 | 	mov	arg01, local06
05d74     D8 A9 B1 FD | 	call	#__system___string_cmp
05d78     00 FA 55 F2 | 	cmps	result1, #0 wc
05d7c     1C 00 90 CD |  if_b	jmp	#LR__0502
05d80     82 01 00 FF 
05d84     01 2B 06 F6 | 	mov	local07, ##@LR__5347
05d88     14 13 02 F6 | 	mov	arg01, local06
05d8c     15 15 02 F6 | 	mov	arg02, local07
05d90     BC A9 B1 FD | 	call	#__system___string_cmp
05d94     01 FA 55 F2 | 	cmps	result1, #1 wc
05d98     84 00 90 CD |  if_b	jmp	#LR__0503
05d9c                 | LR__0502
05d9c     82 01 00 FF 
05da0     03 2D 06 F6 | 	mov	local08, ##@LR__5348
05da4     16 2B 02 F6 | 	mov	local07, local08
05da8     14 13 02 F6 | 	mov	arg01, local06
05dac     15 15 02 F6 | 	mov	arg02, local07
05db0     9C A9 B1 FD | 	call	#__system___string_cmp
05db4     00 FA 0D F2 | 	cmp	result1, #0 wz
05db8     64 00 90 AD |  if_e	jmp	#LR__0503
05dbc     82 01 00 FF 
05dc0     05 2F 06 F6 | 	mov	local09, ##@LR__5349
05dc4     17 2D 02 F6 | 	mov	local08, local09
05dc8     14 13 02 F6 | 	mov	arg01, local06
05dcc     16 15 02 F6 | 	mov	arg02, local08
05dd0     7C A9 B1 FD | 	call	#__system___string_cmp
05dd4     FD 2A 0A F6 | 	mov	local07, result1 wz
05dd8     44 00 90 AD |  if_e	jmp	#LR__0503
05ddc     82 01 00 FF 
05de0     07 31 06 F6 | 	mov	local10, ##@LR__5350
05de4     18 2F 02 F6 | 	mov	local09, local10
05de8     14 13 02 F6 | 	mov	arg01, local06
05dec     17 15 02 F6 | 	mov	arg02, local09
05df0     5C A9 B1 FD | 	call	#__system___string_cmp
05df4     FD 2C 0A F6 | 	mov	local08, result1 wz
05df8     24 00 90 AD |  if_e	jmp	#LR__0503
05dfc     82 01 00 FF 
05e00     09 33 06 F6 | 	mov	local11, ##@LR__5351
05e04     19 31 02 F6 | 	mov	local10, local11
05e08     14 13 02 F6 | 	mov	arg01, local06
05e0c     18 15 02 F6 | 	mov	arg02, local10
05e10     3C A9 B1 FD | 	call	#__system___string_cmp
05e14     FD 2E 0A F6 | 	mov	local09, result1 wz
05e18     00 FA 05 56 |  if_ne	mov	result1, #0
05e1c     4C 02 90 5D |  if_ne	jmp	#LR__0514
05e20                 | LR__0503
05e20                 | ' if m$="." then ds=1
05e20     82 01 00 FF 
05e24     0B 15 06 F6 | 	mov	arg02, ##@LR__5352
05e28     14 13 02 F6 | 	mov	arg01, local06
05e2c     20 A9 B1 FD | 	call	#__system___string_cmp
05e30     00 FA 0D F2 | 	cmp	result1, #0 wz
05e34     01 20 06 A6 |  if_e	mov	local02, #1
05e38                 | ' if m$="$" then hex=1 else hex=0
05e38     82 01 00 FF 
05e3c     0D 15 06 F6 | 	mov	arg02, ##@LR__5353
05e40     14 13 02 F6 | 	mov	arg01, local06
05e44     08 A9 B1 FD | 	call	#__system___string_cmp
05e48     00 FA 0D F2 | 	cmp	result1, #0 wz
05e4c     01 34 06 A6 |  if_e	mov	local12, #1
05e50     00 34 06 56 |  if_ne	mov	local12, #0
05e54                 | ' if l>1 then 
05e54     02 26 56 F2 | 	cmps	local05, #2 wc
05e58     0C 02 90 CD |  if_b	jmp	#LR__0513
05e5c                 | '   for i=2 to l
05e5c     02 36 06 F6 | 	mov	local13, #2
05e60     13 39 02 F6 | 	mov	local14, local05
05e64     01 38 06 F1 | 	add	local14, #1
05e68                 | LR__0504
05e68     1C 37 52 F2 | 	cmps	local13, local14 wc
05e6c     F8 01 90 3D |  if_ae	jmp	#LR__0512
05e70     0F 13 02 F6 | 	mov	arg01, local01
05e74     1B 15 02 F6 | 	mov	arg02, local13
05e78     01 16 06 F6 | 	mov	arg03, #1
05e7c     3C CA B1 FD | 	call	#__system__Mid_S
05e80     FD 28 02 F6 | 	mov	local06, result1
05e84     00 3A 06 F6 | 	mov	local15, #0
05e88                 | '     m$=mid$(s,i,1) : b=false
05e88                 | '     if m$>="0" andalso m$<="9" then b=true  
05e88     82 01 00 FF 
05e8c     0F 15 06 F6 | 	mov	arg02, ##@LR__5354
05e90     14 13 02 F6 | 	mov	arg01, local06
05e94     B8 A8 B1 FD | 	call	#__system___string_cmp
05e98     00 FA 55 F2 | 	cmps	result1, #0 wc
05e9c     18 00 90 CD |  if_b	jmp	#LR__0505
05ea0     82 01 00 FF 
05ea4     11 15 06 F6 | 	mov	arg02, ##@LR__5355
05ea8     14 13 02 F6 | 	mov	arg01, local06
05eac     A0 A8 B1 FD | 	call	#__system___string_cmp
05eb0     01 FA 55 F2 | 	cmps	result1, #1 wc
05eb4     01 3A 66 C6 |  if_b	neg	local15, #1
05eb8                 | LR__0505
05eb8                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05eb8     82 01 00 FF 
05ebc     13 15 06 F6 | 	mov	arg02, ##@LR__5356
05ec0     14 13 02 F6 | 	mov	arg01, local06
05ec4     88 A8 B1 FD | 	call	#__system___string_cmp
05ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ecc     7C 00 90 AD |  if_e	jmp	#LR__0506
05ed0     82 01 00 FF 
05ed4     15 2B 06 F6 | 	mov	local07, ##@LR__5357
05ed8     14 13 02 F6 | 	mov	arg01, local06
05edc     15 15 02 F6 | 	mov	arg02, local07
05ee0     6C A8 B1 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     60 00 90 AD |  if_e	jmp	#LR__0506
05eec     82 01 00 FF 
05ef0     17 2D 06 F6 | 	mov	local08, ##@LR__5358
05ef4     16 2B 02 F6 | 	mov	local07, local08
05ef8     14 13 02 F6 | 	mov	arg01, local06
05efc     15 15 02 F6 | 	mov	arg02, local07
05f00     4C A8 B1 FD | 	call	#__system___string_cmp
05f04     00 FA 0D F2 | 	cmp	result1, #0 wz
05f08     40 00 90 AD |  if_e	jmp	#LR__0506
05f0c     82 01 00 FF 
05f10     19 2F 06 F6 | 	mov	local09, ##@LR__5359
05f14     17 2D 02 F6 | 	mov	local08, local09
05f18     14 13 02 F6 | 	mov	arg01, local06
05f1c     16 15 02 F6 | 	mov	arg02, local08
05f20     2C A8 B1 FD | 	call	#__system___string_cmp
05f24     FD 2A 0A F6 | 	mov	local07, result1 wz
05f28     20 00 90 AD |  if_e	jmp	#LR__0506
05f2c     82 01 00 FF 
05f30     1B 31 06 F6 | 	mov	local10, ##@LR__5360
05f34     18 2F 02 F6 | 	mov	local09, local10
05f38     14 13 02 F6 | 	mov	arg01, local06
05f3c     17 15 02 F6 | 	mov	arg02, local09
05f40     0C A8 B1 FD | 	call	#__system___string_cmp
05f44     FD 2C 0A F6 | 	mov	local08, result1 wz
05f48     04 00 90 5D |  if_ne	jmp	#LR__0507
05f4c                 | LR__0506
05f4c     01 3A 66 F6 | 	neg	local15, #1
05f50                 | LR__0507
05f50                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05f50     01 34 0E F2 | 	cmp	local12, #1 wz
05f54     34 00 90 5D |  if_ne	jmp	#LR__0508
05f58     82 01 00 FF 
05f5c     1D 15 06 F6 | 	mov	arg02, ##@LR__5361
05f60     14 13 02 F6 | 	mov	arg01, local06
05f64     E8 A7 B1 FD | 	call	#__system___string_cmp
05f68     00 FA 55 F2 | 	cmps	result1, #0 wc
05f6c     1C 00 90 CD |  if_b	jmp	#LR__0508
05f70     82 01 00 FF 
05f74     1F 2B 06 F6 | 	mov	local07, ##@LR__5362
05f78     14 13 02 F6 | 	mov	arg01, local06
05f7c     15 15 02 F6 | 	mov	arg02, local07
05f80     CC A7 B1 FD | 	call	#__system___string_cmp
05f84     01 FA 55 F2 | 	cmps	result1, #1 wc
05f88     01 3A 66 C6 |  if_b	neg	local15, #1
05f8c                 | LR__0508
05f8c                 | '     if not b then return false
05f8c     1D 3B 22 F6 | 	not	local15, local15
05f90     00 3A 0E F2 | 	cmp	local15, #0 wz
05f94     00 FA 05 56 |  if_ne	mov	result1, #0
05f98     D0 00 90 5D |  if_ne	jmp	#LR__0514
05f9c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05f9c     82 01 00 FF 
05fa0     21 15 06 F6 | 	mov	arg02, ##@LR__5363
05fa4     14 13 02 F6 | 	mov	arg01, local06
05fa8     A4 A7 B1 FD | 	call	#__system___string_cmp
05fac     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb0     3C 00 90 5D |  if_ne	jmp	#LR__0509
05fb4     1B 15 02 F6 | 	mov	arg02, local13
05fb8     01 14 86 F1 | 	sub	arg02, #1
05fbc     0F 13 02 F6 | 	mov	arg01, local01
05fc0     01 16 06 F6 | 	mov	arg03, #1
05fc4     F4 C8 B1 FD | 	call	#__system__Mid_S
05fc8     FD 12 02 F6 | 	mov	arg01, result1
05fcc     E4 CA B1 FD | 	call	#__system__LCase_S
05fd0     FD 12 02 F6 | 	mov	arg01, result1
05fd4     82 01 00 FF 
05fd8     23 2B 06 F6 | 	mov	local07, ##@LR__5364
05fdc     15 15 02 F6 | 	mov	arg02, local07
05fe0     6C A7 B1 FD | 	call	#__system___string_cmp
05fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe8     00 FA 05 56 |  if_ne	mov	result1, #0
05fec     7C 00 90 5D |  if_ne	jmp	#LR__0514
05ff0                 | LR__0509
05ff0                 | '     if m$="." then ds+=1: if ds>1 then return false
05ff0     82 01 00 FF 
05ff4     25 15 06 F6 | 	mov	arg02, ##@LR__5365
05ff8     14 13 02 F6 | 	mov	arg01, local06
05ffc     50 A7 B1 FD | 	call	#__system___string_cmp
06000     00 FA 0D F2 | 	cmp	result1, #0 wz
06004     01 20 06 A1 |  if_e	add	local02, #1
06008     02 20 56 A2 |  if_e	cmps	local02, #2 wc
0600c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06010     58 00 90 2D |  if_nc_and_z	jmp	#LR__0514
06014                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06014     82 01 00 FF 
06018     27 3D 06 F6 | 	mov	local16, ##@LR__5366
0601c     14 13 02 F6 | 	mov	arg01, local06
06020     1E 15 02 F6 | 	mov	arg02, local16
06024     28 A7 B1 FD | 	call	#__system___string_cmp
06028     00 FA 0D F2 | 	cmp	result1, #0 wz
0602c     1C 00 90 AD |  if_e	jmp	#LR__0510
06030     82 01 00 FF 
06034     29 2B 06 F6 | 	mov	local07, ##@LR__5367
06038     14 13 02 F6 | 	mov	arg01, local06
0603c     15 15 02 F6 | 	mov	arg02, local07
06040     0C A7 B1 FD | 	call	#__system___string_cmp
06044     FD 3E 0A F6 | 	mov	local17, result1 wz
06048     14 00 90 5D |  if_ne	jmp	#LR__0511
0604c                 | LR__0510
0604c     01 22 06 F1 | 	add	local03, #1
06050     00 34 0E F2 | 	cmp	local12, #0 wz
06054     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06058     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0605c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0514
06060                 | LR__0511
06060     01 36 06 F1 | 	add	local13, #1
06064     00 FE 9F FD | 	jmp	#LR__0504
06068                 | LR__0512
06068                 | LR__0513
06068                 | ' return true
06068     01 FA 65 F6 | 	neg	result1, #1
0606c                 | LR__0514
0606c     A7 F0 03 F6 | 	mov	ptra, fp
06070     B2 00 A0 FD | 	call	#popregs_
06074                 | _isnum_ret
06074     2D 00 64 FD | 	ret
06078                 | 
06078                 | '   
06078                 | ' function isint(s as string) as boolean
06078                 | _isint
06078     0A 4A 05 F6 | 	mov	COUNT_, #10
0607c     A8 00 A0 FD | 	call	#pushregs_
06080     09 1F 02 F6 | 	mov	local01, arg01
06084     09 21 02 F6 | 	mov	local02, arg01
06088     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0608c                 | LR__0520
0608c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06090     01 20 06 51 |  if_ne	add	local02, #1
06094     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06098                 | LR__0521
06098     09 21 82 F1 | 	sub	local02, arg01
0609c     10 FB 01 F6 | 	mov	result1, local02
060a0     FD 22 0A F6 | 	mov	local03, result1 wz
060a4     00 FA 05 A6 |  if_e	mov	result1, #0
060a8     D0 01 90 AD |  if_e	jmp	#LR__0532
060ac     0F 13 02 F6 | 	mov	arg01, local01
060b0     01 14 06 F6 | 	mov	arg02, #1
060b4     01 16 06 F6 | 	mov	arg03, #1
060b8     00 C8 B1 FD | 	call	#__system__Mid_S
060bc     FD 24 02 F6 | 	mov	local04, result1
060c0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
060c0     82 01 00 FF 
060c4     2B 15 06 F6 | 	mov	arg02, ##@LR__5368
060c8     12 13 02 F6 | 	mov	arg01, local04
060cc     80 A6 B1 FD | 	call	#__system___string_cmp
060d0     00 FA 55 F2 | 	cmps	result1, #0 wc
060d4     18 00 90 CD |  if_b	jmp	#LR__0522
060d8     82 01 00 FF 
060dc     2D 15 06 F6 | 	mov	arg02, ##@LR__5369
060e0     12 13 02 F6 | 	mov	arg01, local04
060e4     68 A6 B1 FD | 	call	#__system___string_cmp
060e8     01 FA 55 F2 | 	cmps	result1, #1 wc
060ec     5C 00 90 CD |  if_b	jmp	#LR__0523
060f0                 | LR__0522
060f0     82 01 00 FF 
060f4     2F 27 06 F6 | 	mov	local05, ##@LR__5370
060f8     12 13 02 F6 | 	mov	arg01, local04
060fc     13 15 02 F6 | 	mov	arg02, local05
06100     4C A6 B1 FD | 	call	#__system___string_cmp
06104     00 FA 0D F2 | 	cmp	result1, #0 wz
06108     40 00 90 AD |  if_e	jmp	#LR__0523
0610c     82 01 00 FF 
06110     31 29 06 F6 | 	mov	local06, ##@LR__5371
06114     12 13 02 F6 | 	mov	arg01, local04
06118     14 15 02 F6 | 	mov	arg02, local06
0611c     30 A6 B1 FD | 	call	#__system___string_cmp
06120     00 FA 0D F2 | 	cmp	result1, #0 wz
06124     24 00 90 AD |  if_e	jmp	#LR__0523
06128     82 01 00 FF 
0612c     33 2B 06 F6 | 	mov	local07, ##@LR__5372
06130     15 29 02 F6 | 	mov	local06, local07
06134     12 13 02 F6 | 	mov	arg01, local04
06138     14 15 02 F6 | 	mov	arg02, local06
0613c     10 A6 B1 FD | 	call	#__system___string_cmp
06140     00 FA 0D F2 | 	cmp	result1, #0 wz
06144     00 FA 05 56 |  if_ne	mov	result1, #0
06148     30 01 90 5D |  if_ne	jmp	#LR__0532
0614c                 | LR__0523
0614c                 | ' if m$="$" then hex=1 else hex=0
0614c     82 01 00 FF 
06150     35 15 06 F6 | 	mov	arg02, ##@LR__5373
06154     12 13 02 F6 | 	mov	arg01, local04
06158     F4 A5 B1 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     01 2C 06 A6 |  if_e	mov	local08, #1
06164     00 2C 06 56 |  if_ne	mov	local08, #0
06168                 | ' if l>1 then 
06168     02 22 56 F2 | 	cmps	local03, #2 wc
0616c     08 01 90 CD |  if_b	jmp	#LR__0531
06170                 | '   for i=2 to l
06170     02 2E 06 F6 | 	mov	local09, #2
06174     11 31 02 F6 | 	mov	local10, local03
06178     01 30 06 F1 | 	add	local10, #1
0617c                 | LR__0524
0617c     18 2F 52 F2 | 	cmps	local09, local10 wc
06180     F4 00 90 3D |  if_ae	jmp	#LR__0530
06184     0F 13 02 F6 | 	mov	arg01, local01
06188     17 15 02 F6 | 	mov	arg02, local09
0618c     01 16 06 F6 | 	mov	arg03, #1
06190     28 C7 B1 FD | 	call	#__system__Mid_S
06194     FD 24 02 F6 | 	mov	local04, result1
06198                 | '     m$=mid$(s,i,1) 
06198                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06198     00 2C 0E F2 | 	cmp	local08, #0 wz
0619c     4C 00 90 5D |  if_ne	jmp	#LR__0526
061a0     82 01 00 FF 
061a4     37 15 06 F6 | 	mov	arg02, ##@LR__5374
061a8     12 13 02 F6 | 	mov	arg01, local04
061ac     A0 A5 B1 FD | 	call	#__system___string_cmp
061b0     00 FA 55 F2 | 	cmps	result1, #0 wc
061b4     18 00 90 CD |  if_b	jmp	#LR__0525
061b8     82 01 00 FF 
061bc     39 15 06 F6 | 	mov	arg02, ##@LR__5375
061c0     12 13 02 F6 | 	mov	arg01, local04
061c4     88 A5 B1 FD | 	call	#__system___string_cmp
061c8     01 FA 55 F2 | 	cmps	result1, #1 wc
061cc     1C 00 90 CD |  if_b	jmp	#LR__0526
061d0                 | LR__0525
061d0     82 01 00 FF 
061d4     3B 15 06 F6 | 	mov	arg02, ##@LR__5376
061d8     12 13 02 F6 | 	mov	arg01, local04
061dc     70 A5 B1 FD | 	call	#__system___string_cmp
061e0     00 FA 0D F2 | 	cmp	result1, #0 wz
061e4     00 FA 05 56 |  if_ne	mov	result1, #0
061e8     90 00 90 5D |  if_ne	jmp	#LR__0532
061ec                 | LR__0526
061ec                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
061ec     01 2C 0E F2 | 	cmp	local08, #1 wz
061f0     7C 00 90 5D |  if_ne	jmp	#LR__0529
061f4     82 01 00 FF 
061f8     3D 15 06 F6 | 	mov	arg02, ##@LR__5377
061fc     12 13 02 F6 | 	mov	arg01, local04
06200     4C A5 B1 FD | 	call	#__system___string_cmp
06204     00 FA 55 F2 | 	cmps	result1, #0 wc
06208     18 00 90 CD |  if_b	jmp	#LR__0527
0620c     82 01 00 FF 
06210     3F 15 06 F6 | 	mov	arg02, ##@LR__5378
06214     12 13 02 F6 | 	mov	arg01, local04
06218     34 A5 B1 FD | 	call	#__system___string_cmp
0621c     01 FA 55 F2 | 	cmps	result1, #1 wc
06220     4C 00 90 CD |  if_b	jmp	#LR__0529
06224                 | LR__0527
06224     82 01 00 FF 
06228     41 15 06 F6 | 	mov	arg02, ##@LR__5379
0622c     12 13 02 F6 | 	mov	arg01, local04
06230     1C A5 B1 FD | 	call	#__system___string_cmp
06234     00 FA 55 F2 | 	cmps	result1, #0 wc
06238     18 00 90 CD |  if_b	jmp	#LR__0528
0623c     82 01 00 FF 
06240     43 15 06 F6 | 	mov	arg02, ##@LR__5380
06244     12 13 02 F6 | 	mov	arg01, local04
06248     04 A5 B1 FD | 	call	#__system___string_cmp
0624c     01 FA 55 F2 | 	cmps	result1, #1 wc
06250     1C 00 90 CD |  if_b	jmp	#LR__0529
06254                 | LR__0528
06254     82 01 00 FF 
06258     45 15 06 F6 | 	mov	arg02, ##@LR__5381
0625c     12 13 02 F6 | 	mov	arg01, local04
06260     EC A4 B1 FD | 	call	#__system___string_cmp
06264     00 FA 0D F2 | 	cmp	result1, #0 wz
06268     00 FA 05 56 |  if_ne	mov	result1, #0
0626c     0C 00 90 5D |  if_ne	jmp	#LR__0532
06270                 | LR__0529
06270     01 2E 06 F1 | 	add	local09, #1
06274     04 FF 9F FD | 	jmp	#LR__0524
06278                 | LR__0530
06278                 | LR__0531
06278                 | ' return true
06278     01 FA 65 F6 | 	neg	result1, #1
0627c                 | LR__0532
0627c     A7 F0 03 F6 | 	mov	ptra, fp
06280     B2 00 A0 FD | 	call	#popregs_
06284                 | _isint_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | ' 
06288                 | ' function isdec(s as string) as boolean
06288                 | _isdec
06288     05 4A 05 F6 | 	mov	COUNT_, #5
0628c     A8 00 A0 FD | 	call	#pushregs_
06290     09 1F 02 F6 | 	mov	local01, arg01
06294     09 21 02 F6 | 	mov	local02, arg01
06298     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0629c                 | LR__0540
0629c     10 FB C9 FA | 	rdbyte	result1, local02 wz
062a0     01 20 06 51 |  if_ne	add	local02, #1
062a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
062a8                 | LR__0541
062a8     09 21 82 F1 | 	sub	local02, arg01
062ac     10 FB 01 F6 | 	mov	result1, local02
062b0     FD 20 0A F6 | 	mov	local02, result1 wz
062b4     00 FA 05 A6 |  if_e	mov	result1, #0
062b8     80 00 90 AD |  if_e	jmp	#LR__0546
062bc                 | ' for i=1 to l
062bc     01 22 06 F6 | 	mov	local03, #1
062c0     10 25 02 F6 | 	mov	local04, local02
062c4     01 24 06 F1 | 	add	local04, #1
062c8                 | LR__0542
062c8     12 23 52 F2 | 	cmps	local03, local04 wc
062cc     68 00 90 3D |  if_ae	jmp	#LR__0545
062d0     0F 13 02 F6 | 	mov	arg01, local01
062d4     11 15 02 F6 | 	mov	arg02, local03
062d8     01 16 06 F6 | 	mov	arg03, #1
062dc     DC C5 B1 FD | 	call	#__system__Mid_S
062e0     FD 26 02 F6 | 	mov	local05, result1
062e4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
062e4     82 01 00 FF 
062e8     47 15 06 F6 | 	mov	arg02, ##@LR__5382
062ec     13 13 02 F6 | 	mov	arg01, local05
062f0     5C A4 B1 FD | 	call	#__system___string_cmp
062f4     00 FA 55 F2 | 	cmps	result1, #0 wc
062f8     18 00 90 CD |  if_b	jmp	#LR__0543
062fc     82 01 00 FF 
06300     49 15 06 F6 | 	mov	arg02, ##@LR__5383
06304     13 13 02 F6 | 	mov	arg01, local05
06308     44 A4 B1 FD | 	call	#__system___string_cmp
0630c     01 FA 55 F2 | 	cmps	result1, #1 wc
06310     1C 00 90 CD |  if_b	jmp	#LR__0544
06314                 | LR__0543
06314     82 01 00 FF 
06318     4B 15 06 F6 | 	mov	arg02, ##@LR__5384
0631c     13 13 02 F6 | 	mov	arg01, local05
06320     2C A4 B1 FD | 	call	#__system___string_cmp
06324     00 FA 0D F2 | 	cmp	result1, #0 wz
06328     00 FA 05 56 |  if_ne	mov	result1, #0
0632c     0C 00 90 5D |  if_ne	jmp	#LR__0546
06330                 | LR__0544
06330     01 22 06 F1 | 	add	local03, #1
06334     90 FF 9F FD | 	jmp	#LR__0542
06338                 | LR__0545
06338                 | ' return true
06338     01 FA 65 F6 | 	neg	result1, #1
0633c                 | LR__0546
0633c     A7 F0 03 F6 | 	mov	ptra, fp
06340     B2 00 A0 FD | 	call	#popregs_
06344                 | _isdec_ret
06344     2D 00 64 FD | 	ret
06348                 | 
06348                 | ' 
06348                 | ' function isstring(s as string) as boolean
06348                 | _isstring
06348     01 4A 05 F6 | 	mov	COUNT_, #1
0634c     A8 00 A0 FD | 	call	#pushregs_
06350                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06350     09 1F 02 F6 | 	mov	local01, arg01
06354     01 14 06 F6 | 	mov	arg02, #1
06358     48 C4 B1 FD | 	call	#__system__Left_S
0635c     FD 12 02 F6 | 	mov	arg01, result1
06360     82 01 00 FF 
06364     4D 15 06 F6 | 	mov	arg02, ##@LR__5385
06368     E4 A3 B1 FD | 	call	#__system___string_cmp
0636c     00 FA 4D F2 | 	cmps	result1, #0 wz
06370     28 00 90 5D |  if_ne	jmp	#LR__0550
06374     0F 13 02 F6 | 	mov	arg01, local01
06378     01 14 06 F6 | 	mov	arg02, #1
0637c     AC C4 B1 FD | 	call	#__system__Right_S
06380     FD 12 02 F6 | 	mov	arg01, result1
06384     82 01 00 FF 
06388     4F 15 06 F6 | 	mov	arg02, ##@LR__5386
0638c     C0 A3 B1 FD | 	call	#__system___string_cmp
06390     00 FA 4D F2 | 	cmps	result1, #0 wz
06394     01 FA 65 A6 |  if_e	neg	result1, #1
06398     04 00 90 AD |  if_e	jmp	#LR__0551
0639c                 | LR__0550
0639c     00 FA 05 F6 | 	mov	result1, #0
063a0                 | LR__0551
063a0     A7 F0 03 F6 | 	mov	ptra, fp
063a4     B2 00 A0 FD | 	call	#popregs_
063a8                 | _isstring_ret
063a8     2D 00 64 FD | 	ret
063ac                 | 
063ac                 | ' 
063ac                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
063ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
063ac                 | ' 
063ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
063ac                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
063ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
063ac                 | ' 
063ac                 | ' '----- delete a line from a program
063ac                 | ' 
063ac                 | ' function deleteline(aline as ulong) as integer
063ac                 | _deleteline
063ac     03 4A 05 F6 | 	mov	COUNT_, #3
063b0     A8 00 A0 FD | 	call	#pushregs_
063b4     2C F0 07 F1 | 	add	ptra, #44
063b8     04 4E 05 F1 | 	add	fp, #4
063bc     A7 12 62 FC | 	wrlong	arg01, fp
063c0     4A 00 00 FF 
063c4     84 E4 05 F1 | 	add	objptr, ##38020
063c8     F2 1E 02 FB | 	rdlong	local01, objptr
063cc     0C 4E 05 F1 | 	add	fp, #12
063d0     A7 1E 62 FC | 	wrlong	local01, fp
063d4     10 4E 85 F1 | 	sub	fp, #16
063d8                 | ' 
063d8                 | ' 
063d8                 | ' searchptr=programstart
063d8                 | ' 
063d8                 | ' do
063d8     3E 00 00 FF 
063dc     B8 E5 85 F1 | 	sub	objptr, ##32184
063e0                 | LR__0560
063e0     14 4E 05 F1 | 	add	fp, #20
063e4     A7 12 02 F6 | 	mov	arg01, fp
063e8     04 4E 85 F1 | 	sub	fp, #4
063ec     A7 14 02 FB | 	rdlong	arg02, fp
063f0     10 4E 85 F1 | 	sub	fp, #16
063f4     18 16 06 F6 | 	mov	arg03, #24
063f8     EC 96 B1 FD | 	call	#_psram_spin2_read1
063fc     10 4E 05 F1 | 	add	fp, #16
06400     A7 1E 02 FB | 	rdlong	local01, fp
06404     08 4E 85 F1 | 	sub	fp, #8
06408     A7 1E 62 FC | 	wrlong	local01, fp
0640c     20 4E 05 F1 | 	add	fp, #32
06410     A7 1E 02 FB | 	rdlong	local01, fp
06414     18 4E 85 F1 | 	sub	fp, #24
06418     A7 1E 62 FC | 	wrlong	local01, fp
0641c     04 4E 05 F1 | 	add	fp, #4
06420     A7 1E 02 FB | 	rdlong	local01, fp
06424     10 4E 85 F1 | 	sub	fp, #16
06428     A7 16 02 FB | 	rdlong	arg03, fp
0642c     04 4E 85 F1 | 	sub	fp, #4
06430     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06434     28 4E 05 C1 |  if_b	add	fp, #40
06438     A7 20 02 CB |  if_b	rdlong	local02, fp
0643c     28 4E 85 C1 |  if_b	sub	fp, #40
06440     FF FF 3F CF 
06444     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06448     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
0644c     0B 00 00 FF 
06450     CC E4 85 F1 | 	sub	objptr, ##5836
06454                 | ' 
06454                 | ' 
06454                 | ' if header(0)<>aline then return -1
06454     14 4E 05 F1 | 	add	fp, #20
06458     A7 1E 02 FB | 	rdlong	local01, fp
0645c     10 4E 85 F1 | 	sub	fp, #16
06460     A7 22 02 FB | 	rdlong	local03, fp
06464     04 4E 85 F1 | 	sub	fp, #4
06468     11 1F 0A F2 | 	cmp	local01, local03 wz
0646c     01 FA 65 56 |  if_ne	neg	result1, #1
06470     D8 02 90 5D |  if_ne	jmp	#LR__0566
06474     08 4E 05 F1 | 	add	fp, #8
06478     A7 12 02 FB | 	rdlong	arg01, fp
0647c     08 4E 85 F1 | 	sub	fp, #8
06480     01 14 66 F6 | 	neg	arg02, #1
06484     A0 70 B1 FD | 	call	#_pslpoke
06488                 | ' 
06488                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
06488                 | ' 
06488                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
06488     28 4E 05 F1 | 	add	fp, #40
0648c     A7 1E 02 FB | 	rdlong	local01, fp
06490     28 4E 85 F1 | 	sub	fp, #40
06494     FF FF 3F FF 
06498     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0649c     24 4E 05 A1 |  if_e	add	fp, #36
064a0     A7 22 02 AB |  if_e	rdlong	local03, fp
064a4     24 4E 85 A1 |  if_e	sub	fp, #36
064a8     FF FF 7F AF 
064ac     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
064b0     88 00 90 5D |  if_ne	jmp	#LR__0561
064b4     4A 00 00 FF 
064b8     84 E4 05 F1 | 	add	objptr, ##38020
064bc     00 04 80 FF 
064c0     F2 00 68 FC | 	wrlong	##524288, objptr
064c4     07 00 00 FF 
064c8     28 E4 85 F1 | 	sub	objptr, ##3624
064cc     00 04 80 FF 
064d0     F2 00 68 FC | 	wrlong	##524288, objptr
064d4     07 00 00 FF 
064d8     2C E4 05 F1 | 	add	objptr, ##3628
064dc     F2 00 68 FC | 	wrlong	#0, objptr
064e0     04 E4 05 F1 | 	add	objptr, #4
064e4     FF FF FF FF 
064e8     F2 FE 6B FC | 	wrlong	##-1, objptr
064ec     4A 00 00 FF 
064f0     8C E4 85 F1 | 	sub	objptr, ##38028
064f4     00 12 06 F6 | 	mov	arg01, #0
064f8     01 14 66 F6 | 	neg	arg02, #1
064fc     28 70 B1 FD | 	call	#_pslpoke
06500     10 12 06 F6 | 	mov	arg01, #16
06504     01 14 66 F6 | 	neg	arg02, #1
06508     1C 70 B1 FD | 	call	#_pslpoke
0650c     14 12 06 F6 | 	mov	arg01, #20
06510     1E 14 CE F9 | 	bmask	arg02, #30
06514     10 70 B1 FD | 	call	#_pslpoke
06518     50 00 00 FF 
0651c     B4 E4 05 F1 | 	add	objptr, ##41140
06520     00 04 80 FF 
06524     F2 00 68 FC | 	wrlong	##524288, objptr
06528     04 E4 05 F1 | 	add	objptr, #4
0652c     00 04 80 FF 
06530     F2 00 68 FC | 	wrlong	##524288, objptr
06534     50 00 00 FF 
06538     B8 E4 85 F1 | 	sub	objptr, ##41144
0653c                 | LR__0561
0653c                 | ' 
0653c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
0653c     28 4E 05 F1 | 	add	fp, #40
06540     A7 1E 02 FB | 	rdlong	local01, fp
06544     28 4E 85 F1 | 	sub	fp, #40
06548     FF FF 3F FF 
0654c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06550     74 00 90 5D |  if_ne	jmp	#LR__0562
06554     24 4E 05 F1 | 	add	fp, #36
06558     A7 22 02 FB | 	rdlong	local03, fp
0655c     24 4E 85 F1 | 	sub	fp, #36
06560     FF FF 7F FF 
06564     FF 23 0E F2 | 	cmp	local03, ##-1 wz
06568     5C 00 90 AD |  if_e	jmp	#LR__0562
0656c     24 4E 05 F1 | 	add	fp, #36
06570     A7 12 02 FB | 	rdlong	arg01, fp
06574     24 4E 85 F1 | 	sub	fp, #36
06578     14 12 06 F1 | 	add	arg01, #20
0657c     1E 14 CE F9 | 	bmask	arg02, #30
06580     A4 6F B1 FD | 	call	#_pslpoke
06584     24 4E 05 F1 | 	add	fp, #36
06588     A7 1E 02 FB | 	rdlong	local01, fp
0658c     4A 00 00 FF 
06590     8C E4 05 F1 | 	add	objptr, ##38028
06594     F2 1E 62 FC | 	wrlong	local01, objptr
06598     4A 00 00 FF 
0659c     8C E4 85 F1 | 	sub	objptr, ##38028
065a0     A7 12 02 FB | 	rdlong	arg01, fp
065a4     24 4E 85 F1 | 	sub	fp, #36
065a8     AC 70 B1 FD | 	call	#_pslpeek
065ac     4A 00 00 FF 
065b0     88 E4 05 F1 | 	add	objptr, ##38024
065b4     F2 FA 61 FC | 	wrlong	result1, objptr
065b8     4A 00 00 FF 
065bc     88 E4 85 F1 | 	sub	objptr, ##38024
065c0                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
065c0                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
065c0                 | '   lastline=pslpeek(header(4))
065c0                 | '   return 0
065c0     00 FA 05 F6 | 	mov	result1, #0
065c4     84 01 90 FD | 	jmp	#LR__0566
065c8                 | LR__0562
065c8                 | ' 
065c8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
065c8     28 4E 05 F1 | 	add	fp, #40
065cc     A7 1E 02 FB | 	rdlong	local01, fp
065d0     28 4E 85 F1 | 	sub	fp, #40
065d4     FF FF 3F FF 
065d8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
065dc     58 00 90 AD |  if_e	jmp	#LR__0563
065e0     24 4E 05 F1 | 	add	fp, #36
065e4     A7 22 02 FB | 	rdlong	local03, fp
065e8     24 4E 85 F1 | 	sub	fp, #36
065ec     FF FF 7F FF 
065f0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
065f4     40 00 90 5D |  if_ne	jmp	#LR__0563
065f8     28 4E 05 F1 | 	add	fp, #40
065fc     A7 12 02 FB | 	rdlong	arg01, fp
06600     28 4E 85 F1 | 	sub	fp, #40
06604     10 12 06 F1 | 	add	arg01, #16
06608     01 14 66 F6 | 	neg	arg02, #1
0660c     18 6F B1 FD | 	call	#_pslpoke
06610     28 4E 05 F1 | 	add	fp, #40
06614     A7 1E 02 FB | 	rdlong	local01, fp
06618     28 4E 85 F1 | 	sub	fp, #40
0661c     4A 00 00 FF 
06620     84 E4 05 F1 | 	add	objptr, ##38020
06624     F2 1E 62 FC | 	wrlong	local01, objptr
06628     4A 00 00 FF 
0662c     84 E4 85 F1 | 	sub	objptr, ##38020
06630                 | ' '   print "deleted first line"
06630                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06630                 | '   programstart=header(5) ' adjust the program start to point on the first new line
06630                 | '   return 0
06630     00 FA 05 F6 | 	mov	result1, #0
06634     14 01 90 FD | 	jmp	#LR__0566
06638                 | LR__0563
06638                 | ' 
06638                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
06638     28 4E 05 F1 | 	add	fp, #40
0663c     A7 1E 02 FB | 	rdlong	local01, fp
06640     28 4E 85 F1 | 	sub	fp, #40
06644     FF FF 3F FF 
06648     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0664c     24 4E 05 51 |  if_ne	add	fp, #36
06650     A7 22 02 5B |  if_ne	rdlong	local03, fp
06654     24 4E 85 51 |  if_ne	sub	fp, #36
06658     FF FF 7F 5F 
0665c     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
06660     40 00 90 AD |  if_e	jmp	#LR__0564
06664     28 4E 05 F1 | 	add	fp, #40
06668     A7 12 02 FB | 	rdlong	arg01, fp
0666c     10 12 06 F1 | 	add	arg01, #16
06670     04 4E 85 F1 | 	sub	fp, #4
06674     A7 14 02 FB | 	rdlong	arg02, fp
06678     24 4E 85 F1 | 	sub	fp, #36
0667c     A8 6E B1 FD | 	call	#_pslpoke
06680     24 4E 05 F1 | 	add	fp, #36
06684     A7 12 02 FB | 	rdlong	arg01, fp
06688     14 12 06 F1 | 	add	arg01, #20
0668c     04 4E 05 F1 | 	add	fp, #4
06690     A7 14 02 FB | 	rdlong	arg02, fp
06694     28 4E 85 F1 | 	sub	fp, #40
06698     8C 6E B1 FD | 	call	#_pslpoke
0669c                 | '    pslpoke(header(5)+16,header(4))  
0669c                 | '    pslpoke(header(4)+20, header(5))
0669c                 | '    return 0
0669c     00 FA 05 F6 | 	mov	result1, #0
066a0     A8 00 90 FD | 	jmp	#LR__0566
066a4                 | LR__0564
066a4     10 4E 05 F1 | 	add	fp, #16
066a8     A7 1E 02 FB | 	rdlong	local01, fp
066ac     08 4E 85 F1 | 	sub	fp, #8
066b0     A7 1E 62 FC | 	wrlong	local01, fp
066b4     4A 00 00 FF 
066b8     84 E4 05 F1 | 	add	objptr, ##38020
066bc     F2 1E 02 FB | 	rdlong	local01, objptr
066c0     08 4E 05 F1 | 	add	fp, #8
066c4     A7 1E 62 FC | 	wrlong	local01, fp
066c8     10 4E 85 F1 | 	sub	fp, #16
066cc                 | ' 
066cc                 | ' 
066cc                 | ' 
066cc                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
066cc                 | ' 
066cc                 | ' lineptr2=searchptr
066cc                 | ' searchptr=programstart
066cc                 | ' 
066cc                 | ' do
066cc     3E 00 00 FF 
066d0     B8 E5 85 F1 | 	sub	objptr, ##32184
066d4                 | LR__0565
066d4     14 4E 05 F1 | 	add	fp, #20
066d8     A7 12 02 F6 | 	mov	arg01, fp
066dc     04 4E 85 F1 | 	sub	fp, #4
066e0     A7 14 02 FB | 	rdlong	arg02, fp
066e4     10 4E 85 F1 | 	sub	fp, #16
066e8     18 16 06 F6 | 	mov	arg03, #24
066ec     F8 93 B1 FD | 	call	#_psram_spin2_read1
066f0     10 4E 05 F1 | 	add	fp, #16
066f4     A7 1E 02 FB | 	rdlong	local01, fp
066f8     08 4E 85 F1 | 	sub	fp, #8
066fc     A7 1E 62 FC | 	wrlong	local01, fp
06700     20 4E 05 F1 | 	add	fp, #32
06704     A7 1E 02 FB | 	rdlong	local01, fp
06708     18 4E 85 F1 | 	sub	fp, #24
0670c     A7 1E 62 FC | 	wrlong	local01, fp
06710     04 4E 05 F1 | 	add	fp, #4
06714     A7 1E 02 FB | 	rdlong	local01, fp
06718     10 4E 85 F1 | 	sub	fp, #16
0671c     A7 22 02 FB | 	rdlong	local03, fp
06720     04 4E 85 F1 | 	sub	fp, #4
06724     11 1F 12 F2 | 	cmp	local01, local03 wc
06728     28 4E 05 C1 |  if_b	add	fp, #40
0672c     A7 20 02 CB |  if_b	rdlong	local02, fp
06730     28 4E 85 C1 |  if_b	sub	fp, #40
06734     FF FF 3F CF 
06738     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0673c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0565
06740     0B 00 00 FF 
06744     CC E4 85 F1 | 	sub	objptr, ##5836
06748     00 FA 05 F6 | 	mov	result1, #0
0674c                 | LR__0566
0674c     A7 F0 03 F6 | 	mov	ptra, fp
06750     B2 00 A0 FD | 	call	#popregs_
06754                 | _deleteline_ret
06754     2D 00 64 FD | 	ret
06758                 | 
06758                 | ' 
06758                 | ' sub save_line
06758                 | _save_line
06758     03 4A 05 F6 | 	mov	COUNT_, #3
0675c     A8 00 A0 FD | 	call	#pushregs_
06760     4A 00 00 FF 
06764     7C E4 05 F1 | 	add	objptr, ##38012
06768     F2 16 02 FB | 	rdlong	arg03, objptr
0676c     01 16 06 F1 | 	add	arg03, #1
06770     05 00 00 FF 
06774     18 E4 85 F1 | 	sub	objptr, ##2584
06778     F2 14 02 FB | 	rdlong	arg02, objptr
0677c     0B 15 02 FD | 	qmul	arg02, arg03
06780     0E 00 00 FF 
06784     44 E4 85 F1 | 	sub	objptr, ##7236
06788     F2 12 02 FB | 	rdlong	arg01, objptr
0678c     37 00 00 FF 
06790     20 E4 85 F1 | 	sub	objptr, ##28192
06794     09 1F 02 F6 | 	mov	local01, arg01
06798     18 20 62 FD | 	getqx	local02
0679c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
067a0                 | LR__0570
067a0     0F FB C9 FA | 	rdbyte	result1, local01 wz
067a4     01 1E 06 51 |  if_ne	add	local01, #1
067a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
067ac                 | LR__0571
067ac     09 1F 82 F1 | 	sub	local01, arg01
067b0     03 1E CE F7 | 	test	local01, #3 wz
067b4     02 1E 46 50 |  if_ne	shr	local01, #2
067b8     01 1E 06 51 |  if_ne	add	local01, #1
067bc     02 1E 66 50 |  if_ne	shl	local01, #2
067c0     10 23 02 F6 | 	mov	local03, local02
067c4     0F 23 02 F1 | 	add	local03, local01
067c8     43 00 00 FF 
067cc     5C E4 05 F1 | 	add	objptr, ##34396
067d0     F2 16 02 FB | 	rdlong	arg03, objptr
067d4     10 17 02 F1 | 	add	arg03, local02
067d8     04 00 00 FF 
067dc     28 E4 05 F1 | 	add	objptr, ##2088
067e0     F2 16 62 FC | 	wrlong	arg03, objptr
067e4     04 E4 05 F1 | 	add	objptr, #4
067e8     F2 1E 62 FC | 	wrlong	local01, objptr
067ec     0C E4 85 F1 | 	sub	objptr, #12
067f0     F2 12 02 F6 | 	mov	arg01, objptr
067f4     04 00 00 FF 
067f8     20 E4 85 F1 | 	sub	objptr, ##2080
067fc     F2 14 02 FB | 	rdlong	arg02, objptr
06800     10 17 02 F6 | 	mov	arg03, local02
06804     37 00 00 FF 
06808     90 E5 85 F1 | 	sub	objptr, ##28560
0680c     74 93 B1 FD | 	call	#_psram_spin2_write
06810     2B 00 00 FF 
06814     54 E5 05 F1 | 	add	objptr, ##22356
06818     F2 12 02 FB | 	rdlong	arg01, objptr
0681c     0C 00 00 FF 
06820     3C E4 05 F1 | 	add	objptr, ##6204
06824     F2 14 02 FB | 	rdlong	arg02, objptr
06828     10 15 02 F1 | 	add	arg02, local02
0682c     0F 17 02 F6 | 	mov	arg03, local01
06830     37 00 00 FF 
06834     90 E5 85 F1 | 	sub	objptr, ##28560
06838     48 93 B1 FD | 	call	#_psram_spin2_write
0683c     37 00 00 FF 
06840     90 E5 05 F1 | 	add	objptr, ##28560
06844     F2 1E 02 FB | 	rdlong	local01, objptr
06848     11 1F 02 F1 | 	add	local01, local03
0684c     F2 1E 62 FC | 	wrlong	local01, objptr
06850     43 00 00 FF 
06854     5C E4 85 F1 | 	sub	objptr, ##34396
06858     A7 F0 03 F6 | 	mov	ptra, fp
0685c     B2 00 A0 FD | 	call	#popregs_
06860                 | _save_line_ret
06860     2D 00 64 FD | 	ret
06864                 | 
06864                 | ' 
06864                 | ' 
06864                 | ' function insertline(aline as ulong) as integer
06864                 | _insertline
06864     02 4A 05 F6 | 	mov	COUNT_, #2
06868     A8 00 A0 FD | 	call	#pushregs_
0686c     28 F0 07 F1 | 	add	ptra, #40
06870     04 4E 05 F1 | 	add	fp, #4
06874     A7 12 62 FC | 	wrlong	arg01, fp
06878     4A 00 00 FF 
0687c     84 E4 05 F1 | 	add	objptr, ##38020
06880     F2 1E 02 FB | 	rdlong	local01, objptr
06884     04 4E 05 F1 | 	add	fp, #4
06888     A7 1E 62 FC | 	wrlong	local01, fp
0688c     08 4E 85 F1 | 	sub	fp, #8
06890                 | ' 
06890                 | ' do
06890     3E 00 00 FF 
06894     B8 E5 85 F1 | 	sub	objptr, ##32184
06898                 | LR__0580
06898     10 4E 05 F1 | 	add	fp, #16
0689c     A7 12 02 F6 | 	mov	arg01, fp
068a0     08 4E 85 F1 | 	sub	fp, #8
068a4     A7 14 02 FB | 	rdlong	arg02, fp
068a8     08 4E 85 F1 | 	sub	fp, #8
068ac     18 16 06 F6 | 	mov	arg03, #24
068b0     34 92 B1 FD | 	call	#_psram_spin2_read1
068b4     08 4E 05 F1 | 	add	fp, #8
068b8     A7 1E 02 FB | 	rdlong	local01, fp
068bc     04 4E 05 F1 | 	add	fp, #4
068c0     A7 1E 62 FC | 	wrlong	local01, fp
068c4     18 4E 05 F1 | 	add	fp, #24
068c8     A7 1E 02 FB | 	rdlong	local01, fp
068cc     1C 4E 85 F1 | 	sub	fp, #28
068d0     A7 1E 62 FC | 	wrlong	local01, fp
068d4     08 4E 05 F1 | 	add	fp, #8
068d8     A7 1E 02 FB | 	rdlong	local01, fp
068dc     0C 4E 85 F1 | 	sub	fp, #12
068e0     A7 16 02 FB | 	rdlong	arg03, fp
068e4     04 4E 85 F1 | 	sub	fp, #4
068e8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
068ec     24 4E 05 C1 |  if_b	add	fp, #36
068f0     A7 20 02 CB |  if_b	rdlong	local02, fp
068f4     24 4E 85 C1 |  if_b	sub	fp, #36
068f8     FF FF 3F CF 
068fc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06900     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06904     0B 00 00 FF 
06908     CC E4 85 F1 | 	sub	objptr, ##5836
0690c                 | ' 
0690c                 | ' if header(0)=aline then return -1 ' delete it first
0690c     10 4E 05 F1 | 	add	fp, #16
06910     A7 1E 02 FB | 	rdlong	local01, fp
06914     0C 4E 85 F1 | 	sub	fp, #12
06918     A7 20 02 FB | 	rdlong	local02, fp
0691c     04 4E 85 F1 | 	sub	fp, #4
06920     10 1F 0A F2 | 	cmp	local01, local02 wz
06924     01 FA 65 A6 |  if_e	neg	result1, #1
06928     48 01 90 AD |  if_e	jmp	#LR__0583
0692c                 | ' if header(0)<aline then return -2 ' end of program reached
0692c     10 4E 05 F1 | 	add	fp, #16
06930     A7 1E 02 FB | 	rdlong	local01, fp
06934     0C 4E 85 F1 | 	sub	fp, #12
06938     A7 16 02 FB | 	rdlong	arg03, fp
0693c     04 4E 85 F1 | 	sub	fp, #4
06940     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06944     02 FA 65 C6 |  if_b	neg	result1, #2
06948     28 01 90 CD |  if_b	jmp	#LR__0583
0694c                 | ' 
0694c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0694c     20 4E 05 F1 | 	add	fp, #32
06950     A7 1E 02 FB | 	rdlong	local01, fp
06954     20 4E 85 F1 | 	sub	fp, #32
06958     FF FF 7F FF 
0695c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06960     78 00 90 5D |  if_ne	jmp	#LR__0581
06964     43 00 00 FF 
06968     5C E4 05 F1 | 	add	objptr, ##34396
0696c     F2 1E 02 FB | 	rdlong	local01, objptr
06970     07 00 00 FF 
06974     28 E4 05 F1 | 	add	objptr, ##3624
06978     F2 1E 62 FC | 	wrlong	local01, objptr
0697c     0C 4E 05 F1 | 	add	fp, #12
06980     A7 12 02 FB | 	rdlong	arg01, fp
06984     0C 4E 85 F1 | 	sub	fp, #12
06988     10 12 06 F1 | 	add	arg01, #16
0698c     07 00 00 FF 
06990     28 E4 85 F1 | 	sub	objptr, ##3624
06994     F2 14 02 FB | 	rdlong	arg02, objptr
06998     43 00 00 FF 
0699c     5C E4 85 F1 | 	sub	objptr, ##34396
069a0     84 6B B1 FD | 	call	#_pslpoke
069a4     47 00 00 FF 
069a8     8C E4 05 F1 | 	add	objptr, ##36492
069ac     FF FF FF FF 
069b0     F2 FE 6B FC | 	wrlong	##-1, objptr
069b4     0C 4E 05 F1 | 	add	fp, #12
069b8     A7 1E 02 FB | 	rdlong	local01, fp
069bc     0C 4E 85 F1 | 	sub	fp, #12
069c0     04 E4 05 F1 | 	add	objptr, #4
069c4     F2 1E 62 FC | 	wrlong	local01, objptr
069c8     47 00 00 FF 
069cc     90 E4 85 F1 | 	sub	objptr, ##36496
069d0     84 FD BF FD | 	call	#_save_line
069d4                 | '   programstart=programptr
069d4                 | '   pslpoke(lineptr2+16,programptr)
069d4                 | '   ucompiledline(4)=$FFFF_FFFF
069d4                 | '   ucompiledline(5)=lineptr2
069d4                 | '   save_line
069d4                 | '   return 0
069d4     00 FA 05 F6 | 	mov	result1, #0
069d8     98 00 90 FD | 	jmp	#LR__0583
069dc                 | LR__0581
069dc                 | ' 
069dc                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
069dc     20 4E 05 F1 | 	add	fp, #32
069e0     A7 1E 02 FB | 	rdlong	local01, fp
069e4     20 4E 85 F1 | 	sub	fp, #32
069e8     FF FF 7F FF 
069ec     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
069f0     7C 00 90 AD |  if_e	jmp	#LR__0582
069f4     20 4E 05 F1 | 	add	fp, #32
069f8     A7 1E 02 FB | 	rdlong	local01, fp
069fc     47 00 00 FF 
06a00     8C E4 05 F1 | 	add	objptr, ##36492
06a04     F2 1E 62 FC | 	wrlong	local01, objptr
06a08     14 4E 85 F1 | 	sub	fp, #20
06a0c     A7 1E 02 FB | 	rdlong	local01, fp
06a10     04 E4 05 F1 | 	add	objptr, #4
06a14     F2 1E 62 FC | 	wrlong	local01, objptr
06a18     A7 12 02 FB | 	rdlong	arg01, fp
06a1c     0C 4E 85 F1 | 	sub	fp, #12
06a20     10 12 06 F1 | 	add	arg01, #16
06a24     04 00 00 FF 
06a28     34 E4 85 F1 | 	sub	objptr, ##2100
06a2c     F2 14 02 FB | 	rdlong	arg02, objptr
06a30     43 00 00 FF 
06a34     5C E4 85 F1 | 	sub	objptr, ##34396
06a38     EC 6A B1 FD | 	call	#_pslpoke
06a3c     20 4E 05 F1 | 	add	fp, #32
06a40     A7 12 02 FB | 	rdlong	arg01, fp
06a44     20 4E 85 F1 | 	sub	fp, #32
06a48     14 12 06 F1 | 	add	arg01, #20
06a4c     43 00 00 FF 
06a50     5C E4 05 F1 | 	add	objptr, ##34396
06a54     F2 14 02 FB | 	rdlong	arg02, objptr
06a58     43 00 00 FF 
06a5c     5C E4 85 F1 | 	sub	objptr, ##34396
06a60     C4 6A B1 FD | 	call	#_pslpoke
06a64     F0 FC BF FD | 	call	#_save_line
06a68                 | '   ucompiledline(4)=header(4)
06a68                 | '   ucompiledline(5)=lineptr2
06a68                 | '   pslpoke(lineptr2+16,programptr)
06a68                 | '   pslpoke(header(4)+20,programptr)
06a68                 | '   save_line
06a68                 | '   return 0
06a68     00 FA 05 F6 | 	mov	result1, #0
06a6c     04 00 90 FD | 	jmp	#LR__0583
06a70                 | LR__0582
06a70     00 FA 05 F6 | 	mov	result1, #0
06a74                 | LR__0583
06a74     A7 F0 03 F6 | 	mov	ptra, fp
06a78     B2 00 A0 FD | 	call	#popregs_
06a7c                 | _insertline_ret
06a7c     2D 00 64 FD | 	ret
06a80                 | 
06a80                 | ' 
06a80                 | ' sub add_line_at_end(aline) 
06a80                 | _add_line_at_end
06a80     4A 00 00 FF 
06a84     88 E4 05 F1 | 	add	objptr, ##38024
06a88     F2 12 62 FC | 	wrlong	arg01, objptr
06a8c     04 E4 05 F1 | 	add	objptr, #4
06a90     F2 14 02 FB | 	rdlong	arg02, objptr
06a94     03 00 00 FF 
06a98     00 E4 85 F1 | 	sub	objptr, ##1536
06a9c     F2 14 62 FC | 	wrlong	arg02, objptr
06aa0     03 00 00 FF 
06aa4     00 E4 05 F1 | 	add	objptr, ##1536
06aa8     F2 12 02 FB | 	rdlong	arg01, objptr
06aac     14 12 06 F1 | 	add	arg01, #20
06ab0     07 00 00 FF 
06ab4     30 E4 85 F1 | 	sub	objptr, ##3632
06ab8     F2 14 02 FB | 	rdlong	arg02, objptr
06abc     43 00 00 FF 
06ac0     5C E4 85 F1 | 	sub	objptr, ##34396
06ac4     60 6A B1 FD | 	call	#_pslpoke
06ac8     43 00 00 FF 
06acc     5C E4 05 F1 | 	add	objptr, ##34396
06ad0     F2 14 02 FB | 	rdlong	arg02, objptr
06ad4     07 00 00 FF 
06ad8     30 E4 05 F1 | 	add	objptr, ##3632
06adc     F2 14 62 FC | 	wrlong	arg02, objptr
06ae0     02 00 00 FF 
06ae4     FC E5 85 F1 | 	sub	objptr, ##1532
06ae8     FF FF BF FF 
06aec     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06af0                 | ' 
06af0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06af0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06af0     04 00 00 FF 
06af4     34 E4 85 F1 | 	sub	objptr, ##2100
06af8     F2 14 02 FB | 	rdlong	arg02, objptr
06afc     43 00 00 FF 
06b00     5C E4 85 F1 | 	sub	objptr, ##34396
06b04     00 04 00 FF 
06b08     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06b0c     47 00 00 AF 
06b10     8C E4 05 A1 |  if_e	add	objptr, ##36492
06b14     FF FF FF AF 
06b18     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06b1c     47 00 00 AF 
06b20     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06b24     30 FC BF FD | 	call	#_save_line
06b28     43 00 00 FF 
06b2c     5C E4 05 F1 | 	add	objptr, ##34396
06b30     F2 12 02 FB | 	rdlong	arg01, objptr
06b34     43 00 00 FF 
06b38     5C E4 85 F1 | 	sub	objptr, ##34396
06b3c     01 14 66 F6 | 	neg	arg02, #1
06b40     E4 69 B1 FD | 	call	#_pslpoke
06b44                 | _add_line_at_end_ret
06b44     2D 00 64 FD | 	ret
06b48                 | 
06b48                 | ' 
06b48                 | ' function compile_immediate(linetype as ulong) as integer
06b48                 | _compile_immediate
06b48     09 4A 05 F6 | 	mov	COUNT_, #9
06b4c     A8 00 A0 FD | 	call	#pushregs_
06b50                 | _compile_immediate_enter
06b50     09 25 0A F6 | 	mov	local04, arg01 wz
06b54     00 26 06 F6 | 	mov	local05, #0
06b58     00 28 06 F6 | 	mov	local06, #0
06b5c                 | ' 
06b5c                 | ' ' linetype=cont+1, linetype=0 immediate
06b5c                 | ' '  : 1: this is the first part of the line that will continue
06b5c                 | ' ' 2 - this is the continuation of the line
06b5c                 | ' ' 3 - this is the last continued line
06b5c                 | ' ' 4 - this is the one and only part
06b5c                 | ' 
06b5c                 | ' err=0
06b5c                 | ' cmd=0
06b5c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
06b5c     30 00 90 5D |  if_ne	jmp	#LR__0590
06b60     35 00 00 FF 
06b64     10 E4 05 F1 | 	add	objptr, ##27152
06b68     F2 28 02 FB | 	rdlong	local06, objptr
06b6c     02 00 00 FF 
06b70     34 E4 05 F1 | 	add	objptr, ##1076
06b74     F2 02 68 FC | 	wrlong	#1, objptr
06b78     00 2A 06 F6 | 	mov	local07, #0
06b7c     13 00 00 FF 
06b80     38 E4 05 F1 | 	add	objptr, ##9784
06b84     F2 00 68 FC | 	wrlong	#0, objptr
06b88     4A 00 00 FF 
06b8c     7C E4 85 F1 | 	sub	objptr, ##38012
06b90                 | LR__0590
06b90                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06b90     02 24 0E F2 | 	cmp	local04, #2 wz
06b94     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06b98     24 00 90 5D |  if_ne	jmp	#LR__0591
06b9c     35 00 00 FF 
06ba0     10 E4 05 F1 | 	add	objptr, ##27152
06ba4     F2 28 02 FB | 	rdlong	local06, objptr
06ba8     01 2A 06 F6 | 	mov	local07, #1
06bac     02 00 00 FF 
06bb0     34 E4 05 F1 | 	add	objptr, ##1076
06bb4     F2 02 68 FC | 	wrlong	#1, objptr
06bb8     37 00 00 FF 
06bbc     44 E4 85 F1 | 	sub	objptr, ##28228
06bc0                 | LR__0591
06bc0                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06bc0     04 24 0E F2 | 	cmp	local04, #4 wz
06bc4     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06bc8     30 00 90 5D |  if_ne	jmp	#LR__0592
06bcc     35 00 00 FF 
06bd0     18 E4 05 F1 | 	add	objptr, ##27160
06bd4     F2 28 02 FB | 	rdlong	local06, objptr
06bd8     02 2A 06 F6 | 	mov	local07, #2
06bdc     02 00 00 FF 
06be0     2C E4 05 F1 | 	add	objptr, ##1068
06be4     F2 04 68 FC | 	wrlong	#2, objptr
06be8     13 00 00 FF 
06bec     38 E4 05 F1 | 	add	objptr, ##9784
06bf0     F2 04 68 FC | 	wrlong	#2, objptr
06bf4     4A 00 00 FF 
06bf8     7C E4 85 F1 | 	sub	objptr, ##38012
06bfc                 | LR__0592
06bfc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
06bfc     05 24 0E F2 | 	cmp	local04, #5 wz
06c00     44 00 90 5D |  if_ne	jmp	#LR__0593
06c04     37 00 00 FF 
06c08     44 E4 05 F1 | 	add	objptr, ##28228
06c0c     F2 FA 01 FB | 	rdlong	result1, objptr
06c10     FD 2A 02 F6 | 	mov	local07, result1
06c14     03 2A 66 F0 | 	shl	local07, #3
06c18     02 00 00 FF 
06c1c     38 E4 85 F1 | 	sub	objptr, ##1080
06c20     F2 2A 02 F1 | 	add	local07, objptr
06c24     04 2A 06 F1 | 	add	local07, #4
06c28     15 29 02 FB | 	rdlong	local06, local07
06c2c     FD 2A 02 F6 | 	mov	local07, result1
06c30     01 2A 06 F1 | 	add	local07, #1
06c34     02 00 00 FF 
06c38     38 E4 05 F1 | 	add	objptr, ##1080
06c3c     F2 2A 62 FC | 	wrlong	local07, objptr
06c40     37 00 00 FF 
06c44     44 E4 85 F1 | 	sub	objptr, ##28228
06c48                 | LR__0593
06c48     00 2C 06 F6 | 	mov	local08, #0
06c4c                 | ' vars=0
06c4c                 | ' 'print  "In compile_immediate cmd=:", cmd
06c4c                 | ' 451 select case cmd
06c4c     5C 28 0E F2 | 	cmp	local06, #92 wz
06c50     80 02 90 AD |  if_e	jmp	#LR__0594
06c54     47 28 0E F2 | 	cmp	local06, #71 wz
06c58     84 02 90 AD |  if_e	jmp	#LR__0595
06c5c     59 28 0E F2 | 	cmp	local06, #89 wz
06c60     88 02 90 AD |  if_e	jmp	#LR__0596
06c64     45 28 0E F2 | 	cmp	local06, #69 wz
06c68     8C 02 90 AD |  if_e	jmp	#LR__0597
06c6c     69 28 0E F2 | 	cmp	local06, #105 wz
06c70     90 02 90 AD |  if_e	jmp	#LR__0598
06c74     40 28 0E F2 | 	cmp	local06, #64 wz
06c78     84 05 90 AD |  if_e	jmp	#LR__0665
06c7c     B4 28 0E F2 | 	cmp	local06, #180 wz
06c80     8C 02 90 AD |  if_e	jmp	#LR__0599
06c84     49 28 0E F2 | 	cmp	local06, #73 wz
06c88     8C 02 90 AD |  if_e	jmp	#LR__0600
06c8c     50 28 0E F2 | 	cmp	local06, #80 wz
06c90     90 02 90 AD |  if_e	jmp	#LR__0601
06c94     AE 28 0E F2 | 	cmp	local06, #174 wz
06c98     94 02 90 AD |  if_e	jmp	#LR__0602
06c9c     B0 28 0E F2 | 	cmp	local06, #176 wz
06ca0     98 02 90 AD |  if_e	jmp	#LR__0603
06ca4     AF 28 0E F2 | 	cmp	local06, #175 wz
06ca8     9C 02 90 AD |  if_e	jmp	#LR__0604
06cac     B1 28 0E F2 | 	cmp	local06, #177 wz
06cb0     A0 02 90 AD |  if_e	jmp	#LR__0605
06cb4     68 28 0E F2 | 	cmp	local06, #104 wz
06cb8     A4 02 90 AD |  if_e	jmp	#LR__0606
06cbc     74 28 0E F2 | 	cmp	local06, #116 wz
06cc0     A8 02 90 AD |  if_e	jmp	#LR__0607
06cc4     73 28 0E F2 | 	cmp	local06, #115 wz
06cc8     AC 02 90 AD |  if_e	jmp	#LR__0608
06ccc     6C 28 0E F2 | 	cmp	local06, #108 wz
06cd0     B0 02 90 AD |  if_e	jmp	#LR__0609
06cd4     89 28 0E F2 | 	cmp	local06, #137 wz
06cd8     24 05 90 AD |  if_e	jmp	#LR__0665
06cdc     72 28 0E F2 | 	cmp	local06, #114 wz
06ce0     AC 02 90 AD |  if_e	jmp	#LR__0610
06ce4     5D 28 0E F2 | 	cmp	local06, #93 wz
06ce8     14 05 90 AD |  if_e	jmp	#LR__0665
06cec     96 28 0E F2 | 	cmp	local06, #150 wz
06cf0     A4 02 90 AD |  if_e	jmp	#LR__0611
06cf4     43 28 0E F2 | 	cmp	local06, #67 wz
06cf8     A4 02 90 AD |  if_e	jmp	#LR__0612
06cfc     5A 28 0E F2 | 	cmp	local06, #90 wz
06d00     A8 02 90 AD |  if_e	jmp	#LR__0613
06d04     AB 28 0E F2 | 	cmp	local06, #171 wz
06d08     F4 04 90 AD |  if_e	jmp	#LR__0665
06d0c     BD 28 0E F2 | 	cmp	local06, #189 wz
06d10     A0 02 90 AD |  if_e	jmp	#LR__0614
06d14     BB 28 0E F2 | 	cmp	local06, #187 wz
06d18     A4 02 90 AD |  if_e	jmp	#LR__0615
06d1c     4E 28 0E F2 | 	cmp	local06, #78 wz
06d20     A8 02 90 AD |  if_e	jmp	#LR__0616
06d24     A9 28 0E F2 | 	cmp	local06, #169 wz
06d28     BC 02 90 AD |  if_e	jmp	#LR__0618
06d2c     46 28 0E F2 | 	cmp	local06, #70 wz
06d30     BC 02 90 AD |  if_e	jmp	#LR__0619
06d34     71 28 0E F2 | 	cmp	local06, #113 wz
06d38     C0 02 90 AD |  if_e	jmp	#LR__0620
06d3c     60 28 0E F2 | 	cmp	local06, #96 wz
06d40     C4 02 90 AD |  if_e	jmp	#LR__0621
06d44     4A 28 0E F2 | 	cmp	local06, #74 wz
06d48     C8 02 90 AD |  if_e	jmp	#LR__0622
06d4c     48 28 0E F2 | 	cmp	local06, #72 wz
06d50     C8 02 90 AD |  if_e	jmp	#LR__0623
06d54     58 28 0E F2 | 	cmp	local06, #88 wz
06d58     CC 02 90 AD |  if_e	jmp	#LR__0624
06d5c     5F 28 0E F2 | 	cmp	local06, #95 wz
06d60     CC 02 90 AD |  if_e	jmp	#LR__0625
06d64     8A 28 0E F2 | 	cmp	local06, #138 wz
06d68     D0 02 90 AD |  if_e	jmp	#LR__0626
06d6c     4C 28 0E F2 | 	cmp	local06, #76 wz
06d70     D4 02 90 AD |  if_e	jmp	#LR__0627
06d74     52 28 0E F2 | 	cmp	local06, #82 wz
06d78     D8 02 90 AD |  if_e	jmp	#LR__0628
06d7c     97 28 0E F2 | 	cmp	local06, #151 wz
06d80     DC 02 90 AD |  if_e	jmp	#LR__0629
06d84     61 28 0E F2 | 	cmp	local06, #97 wz
06d88     E0 02 90 AD |  if_e	jmp	#LR__0630
06d8c     63 28 0E F2 | 	cmp	local06, #99 wz
06d90     E4 02 90 AD |  if_e	jmp	#LR__0631
06d94     41 28 0E F2 | 	cmp	local06, #65 wz
06d98     64 04 90 AD |  if_e	jmp	#LR__0665
06d9c     4B 28 0E F2 | 	cmp	local06, #75 wz
06da0     E0 02 90 AD |  if_e	jmp	#LR__0632
06da4     B3 28 0E F2 | 	cmp	local06, #179 wz
06da8     E0 02 90 AD |  if_e	jmp	#LR__0633
06dac     5E 28 0E F2 | 	cmp	local06, #94 wz
06db0     E4 02 90 AD |  if_e	jmp	#LR__0634
06db4     7C 28 0E F2 | 	cmp	local06, #124 wz
06db8     E8 02 90 AD |  if_e	jmp	#LR__0635
06dbc     7D 28 0E F2 | 	cmp	local06, #125 wz
06dc0     EC 02 90 AD |  if_e	jmp	#LR__0636
06dc4     7E 28 0E F2 | 	cmp	local06, #126 wz
06dc8     F0 02 90 AD |  if_e	jmp	#LR__0637
06dcc     7F 28 0E F2 | 	cmp	local06, #127 wz
06dd0     F4 02 90 AD |  if_e	jmp	#LR__0638
06dd4     80 28 0E F2 | 	cmp	local06, #128 wz
06dd8     F8 02 90 AD |  if_e	jmp	#LR__0639
06ddc     55 28 0E F2 | 	cmp	local06, #85 wz
06de0     FC 02 90 AD |  if_e	jmp	#LR__0640
06de4     75 28 0E F2 | 	cmp	local06, #117 wz
06de8     00 03 90 AD |  if_e	jmp	#LR__0641
06dec     42 28 0E F2 | 	cmp	local06, #66 wz
06df0     04 03 90 AD |  if_e	jmp	#LR__0642
06df4     95 28 0E F2 | 	cmp	local06, #149 wz
06df8     08 03 90 AD |  if_e	jmp	#LR__0643
06dfc     AC 28 0E F2 | 	cmp	local06, #172 wz
06e00     FC 03 90 AD |  if_e	jmp	#LR__0665
06e04     81 28 0E F2 | 	cmp	local06, #129 wz
06e08     04 03 90 AD |  if_e	jmp	#LR__0644
06e0c     44 28 0E F2 | 	cmp	local06, #68 wz
06e10     08 03 90 AD |  if_e	jmp	#LR__0645
06e14     BC 28 0E F2 | 	cmp	local06, #188 wz
06e18     0C 03 90 AD |  if_e	jmp	#LR__0646
06e1c     88 28 0E F2 | 	cmp	local06, #136 wz
06e20     DC 03 90 AD |  if_e	jmp	#LR__0665
06e24     92 28 0E F2 | 	cmp	local06, #146 wz
06e28     08 03 90 AD |  if_e	jmp	#LR__0647
06e2c     BE 28 0E F2 | 	cmp	local06, #190 wz
06e30     88 04 90 AD |  if_e	jmp	#LR__0666
06e34     AA 28 0E F2 | 	cmp	local06, #170 wz
06e38     C4 03 90 AD |  if_e	jmp	#LR__0665
06e3c     4D 28 0E F2 | 	cmp	local06, #77 wz
06e40     F8 02 90 AD |  if_e	jmp	#LR__0648
06e44     51 28 0E F2 | 	cmp	local06, #81 wz
06e48     FC 02 90 AD |  if_e	jmp	#LR__0649
06e4c     8E 28 0E F2 | 	cmp	local06, #142 wz
06e50     00 03 90 AD |  if_e	jmp	#LR__0650
06e54     90 28 0E F2 | 	cmp	local06, #144 wz
06e58     04 03 90 AD |  if_e	jmp	#LR__0651
06e5c     8D 28 0E F2 | 	cmp	local06, #141 wz
06e60     08 03 90 AD |  if_e	jmp	#LR__0652
06e64     8C 28 0E F2 | 	cmp	local06, #140 wz
06e68     0C 03 90 AD |  if_e	jmp	#LR__0653
06e6c     91 28 0E F2 | 	cmp	local06, #145 wz
06e70     10 03 90 AD |  if_e	jmp	#LR__0654
06e74     8B 28 0E F2 | 	cmp	local06, #139 wz
06e78     14 03 90 AD |  if_e	jmp	#LR__0655
06e7c     8F 28 0E F2 | 	cmp	local06, #143 wz
06e80     18 03 90 AD |  if_e	jmp	#LR__0656
06e84     B2 28 0E F2 | 	cmp	local06, #178 wz
06e88     1C 03 90 AD |  if_e	jmp	#LR__0657
06e8c     6D 28 0E F2 | 	cmp	local06, #109 wz
06e90     20 03 90 AD |  if_e	jmp	#LR__0658
06e94     70 28 0E F2 | 	cmp	local06, #112 wz
06e98     64 03 90 AD |  if_e	jmp	#LR__0665
06e9c     56 28 0E F2 | 	cmp	local06, #86 wz
06ea0     1C 03 90 AD |  if_e	jmp	#LR__0659
06ea4     57 28 0E F2 | 	cmp	local06, #87 wz
06ea8     54 03 90 AD |  if_e	jmp	#LR__0665
06eac     79 28 0E F2 | 	cmp	local06, #121 wz
06eb0     18 03 90 AD |  if_e	jmp	#LR__0660
06eb4     77 28 0E F2 | 	cmp	local06, #119 wz
06eb8     1C 03 90 AD |  if_e	jmp	#LR__0661
06ebc     78 28 0E F2 | 	cmp	local06, #120 wz
06ec0     20 03 90 AD |  if_e	jmp	#LR__0662
06ec4     01 00 00 FF 
06ec8     04 28 0E F2 | 	cmp	local06, ##516 wz
06ecc     20 03 90 AD |  if_e	jmp	#LR__0663
06ed0     24 03 90 FD | 	jmp	#LR__0664
06ed4                 | LR__0594
06ed4     08 0D B0 FD | 	call	#_compile_fun_2p
06ed8     FD 26 02 F6 | 	mov	local05, result1
06edc     20 03 90 FD | 	jmp	#LR__0665
06ee0                 | LR__0595
06ee0     3C 0E B0 FD | 	call	#_compile_fun_4p
06ee4     FD 26 02 F6 | 	mov	local05, result1
06ee8     14 03 90 FD | 	jmp	#LR__0665
06eec                 | LR__0596
06eec     68 33 B0 FD | 	call	#_expr
06ef0                 | ' expr()
06ef0                 | ' return 0
06ef0     00 26 06 F6 | 	mov	local05, #0
06ef4     08 03 90 FD | 	jmp	#LR__0665
06ef8                 | LR__0597
06ef8     58 0D B0 FD | 	call	#_compile_fun_3p
06efc     FD 26 02 F6 | 	mov	local05, result1
06f00     FC 02 90 FD | 	jmp	#LR__0665
06f04                 | LR__0598
06f04     50 33 B0 FD | 	call	#_expr
06f08                 | ' expr()
06f08                 | ' return 0
06f08     00 26 06 F6 | 	mov	local05, #0
06f0c     F0 02 90 FD | 	jmp	#LR__0665
06f10                 | LR__0599
06f10     44 33 B0 FD | 	call	#_expr
06f14                 | ' expr()
06f14                 | ' return 0
06f14     E8 02 90 FD | 	jmp	#LR__0665
06f18                 | LR__0600
06f18     3C 33 B0 FD | 	call	#_expr
06f1c                 | ' expr()
06f1c                 | ' return 0
06f1c     00 26 06 F6 | 	mov	local05, #0
06f20     DC 02 90 FD | 	jmp	#LR__0665
06f24                 | LR__0601
06f24     98 10 B0 FD | 	call	#_compile_fun_varp
06f28     FD 2C 02 F6 | 	mov	local08, result1
06f2c     D0 02 90 FD | 	jmp	#LR__0665
06f30                 | LR__0602
06f30     8C 10 B0 FD | 	call	#_compile_fun_varp
06f34     FD 2C 02 F6 | 	mov	local08, result1
06f38     C4 02 90 FD | 	jmp	#LR__0665
06f3c                 | LR__0603
06f3c     80 10 B0 FD | 	call	#_compile_fun_varp
06f40     FD 2C 02 F6 | 	mov	local08, result1
06f44     B8 02 90 FD | 	jmp	#LR__0665
06f48                 | LR__0604
06f48     74 10 B0 FD | 	call	#_compile_fun_varp
06f4c     FD 2C 02 F6 | 	mov	local08, result1
06f50     AC 02 90 FD | 	jmp	#LR__0665
06f54                 | LR__0605
06f54     68 10 B0 FD | 	call	#_compile_fun_varp
06f58     FD 2C 02 F6 | 	mov	local08, result1
06f5c     A0 02 90 FD | 	jmp	#LR__0665
06f60                 | LR__0606
06f60     F4 32 B0 FD | 	call	#_expr
06f64                 | ' expr()
06f64                 | ' return 0
06f64     00 26 06 F6 | 	mov	local05, #0
06f68     94 02 90 FD | 	jmp	#LR__0665
06f6c                 | LR__0607
06f6c     50 10 B0 FD | 	call	#_compile_fun_varp
06f70     FD 2C 02 F6 | 	mov	local08, result1
06f74     88 02 90 FD | 	jmp	#LR__0665
06f78                 | LR__0608
06f78     44 10 B0 FD | 	call	#_compile_fun_varp
06f7c     FD 2C 02 F6 | 	mov	local08, result1
06f80     7C 02 90 FD | 	jmp	#LR__0665
06f84                 | LR__0609
06f84     BC 0E B0 FD | 	call	#_compile_fun_5p
06f88     FD 26 02 F6 | 	mov	local05, result1
06f8c     70 02 90 FD | 	jmp	#LR__0665
06f90                 | LR__0610
06f90     18 1A B0 FD | 	call	#_compile_dim
06f94     24 03 90 FD | 	jmp	#LR__0666
06f98                 | LR__0611
06f98     44 0C B0 FD | 	call	#_compile_fun_2p
06f9c     60 02 90 FD | 	jmp	#LR__0665
06fa0                 | LR__0612
06fa0     3C 0C B0 FD | 	call	#_compile_fun_2p
06fa4     FD 26 02 F6 | 	mov	local05, result1
06fa8     54 02 90 FD | 	jmp	#LR__0665
06fac                 | LR__0613
06fac     D4 18 B0 FD | 	call	#_compile_else
06fb0     08 03 90 FD | 	jmp	#LR__0666
06fb4                 | LR__0614
06fb4     08 10 B0 FD | 	call	#_compile_fun_varp
06fb8     FD 2C 02 F6 | 	mov	local08, result1
06fbc     40 02 90 FD | 	jmp	#LR__0665
06fc0                 | LR__0615
06fc0     FC 0F B0 FD | 	call	#_compile_fun_varp
06fc4     FD 2C 02 F6 | 	mov	local08, result1
06fc8     34 02 90 FD | 	jmp	#LR__0665
06fcc                 | LR__0616
06fcc     01 24 16 F2 | 	cmp	local04, #1 wc
06fd0     08 00 90 CD |  if_b	jmp	#LR__0617
06fd4     90 2E B0 FD | 	call	#_compile_goto
06fd8     E0 02 90 FD | 	jmp	#LR__0666
06fdc                 | LR__0617
06fdc     19 12 06 F6 | 	mov	arg01, #25
06fe0     E0 63 B1 FD | 	call	#_printerror
06fe4     D4 02 90 FD | 	jmp	#LR__0666
06fe8                 | LR__0618
06fe8     14 2E B0 FD | 	call	#_compile_gosub
06fec     CC 02 90 FD | 	jmp	#LR__0666
06ff0                 | LR__0619
06ff0     60 0C B0 FD | 	call	#_compile_fun_3p
06ff4     FD 26 02 F6 | 	mov	local05, result1
06ff8     04 02 90 FD | 	jmp	#LR__0665
06ffc                 | LR__0620
06ffc     20 0D B0 FD | 	call	#_compile_fun_4p
07000     FD 26 02 F6 | 	mov	local05, result1
07004     F8 01 90 FD | 	jmp	#LR__0665
07008                 | LR__0621
07008     4C 32 B0 FD | 	call	#_expr
0700c                 | ' expr()
0700c                 | ' return 0
0700c     00 26 06 F6 | 	mov	local05, #0
07010     EC 01 90 FD | 	jmp	#LR__0665
07014                 | LR__0622
07014     A4 20 B0 FD | 	call	#_compile_for
07018     A0 02 90 FD | 	jmp	#LR__0666
0701c                 | LR__0623
0701c     00 0D B0 FD | 	call	#_compile_fun_4p
07020     FD 26 02 F6 | 	mov	local05, result1
07024     D8 01 90 FD | 	jmp	#LR__0665
07028                 | LR__0624
07028     18 17 B0 FD | 	call	#_compile_if
0702c     8C 02 90 FD | 	jmp	#LR__0666
07030                 | LR__0625
07030     24 32 B0 FD | 	call	#_expr
07034                 | ' expr()
07034                 | ' return 0
07034     00 26 06 F6 | 	mov	local05, #0
07038     C4 01 90 FD | 	jmp	#LR__0665
0703c                 | LR__0626
0703c     18 32 B0 FD | 	call	#_expr
07040                 | ' expr()
07040                 | ' return 0
07040     00 26 06 F6 | 	mov	local05, #0
07044     B8 01 90 FD | 	jmp	#LR__0665
07048                 | LR__0627
07048     74 0F B0 FD | 	call	#_compile_fun_varp
0704c     FD 2C 02 F6 | 	mov	local08, result1
07050     AC 01 90 FD | 	jmp	#LR__0665
07054                 | LR__0628
07054     68 0F B0 FD | 	call	#_compile_fun_varp
07058     FD 2C 02 F6 | 	mov	local08, result1
0705c     A0 01 90 FD | 	jmp	#LR__0665
07060                 | LR__0629
07060     7C 0B B0 FD | 	call	#_compile_fun_2p
07064     FD 26 02 F6 | 	mov	local05, result1
07068     94 01 90 FD | 	jmp	#LR__0665
0706c                 | LR__0630
0706c     E8 31 B0 FD | 	call	#_expr
07070                 | ' expr()
07070                 | ' return 0
07070     00 26 06 F6 | 	mov	local05, #0
07074     88 01 90 FD | 	jmp	#LR__0665
07078                 | LR__0631
07078     DC 31 B0 FD | 	call	#_expr
0707c                 | ' expr()
0707c                 | ' return 0
0707c     00 26 06 F6 | 	mov	local05, #0
07080     7C 01 90 FD | 	jmp	#LR__0665
07084                 | LR__0632
07084     C8 2B B0 FD | 	call	#_compile_next
07088     30 02 90 FD | 	jmp	#LR__0666
0708c                 | LR__0633
0708c     C4 0B B0 FD | 	call	#_compile_fun_3p
07090     FD 26 02 F6 | 	mov	local05, result1
07094     68 01 90 FD | 	jmp	#LR__0665
07098                 | LR__0634
07098     BC 31 B0 FD | 	call	#_expr
0709c                 | ' expr()
0709c                 | ' return 0
0709c     00 26 06 F6 | 	mov	local05, #0
070a0     5C 01 90 FD | 	jmp	#LR__0665
070a4                 | LR__0635
070a4     B0 31 B0 FD | 	call	#_expr
070a8                 | ' expr()
070a8                 | ' return 0
070a8     00 26 06 F6 | 	mov	local05, #0
070ac     50 01 90 FD | 	jmp	#LR__0665
070b0                 | LR__0636
070b0     A4 31 B0 FD | 	call	#_expr
070b4                 | ' expr()
070b4                 | ' return 0
070b4     00 26 06 F6 | 	mov	local05, #0
070b8     44 01 90 FD | 	jmp	#LR__0665
070bc                 | LR__0637
070bc     98 31 B0 FD | 	call	#_expr
070c0                 | ' expr()
070c0                 | ' return 0
070c0     00 26 06 F6 | 	mov	local05, #0
070c4     38 01 90 FD | 	jmp	#LR__0665
070c8                 | LR__0638
070c8     54 0C B0 FD | 	call	#_compile_fun_4p
070cc     FD 26 02 F6 | 	mov	local05, result1
070d0     2C 01 90 FD | 	jmp	#LR__0665
070d4                 | LR__0639
070d4     80 31 B0 FD | 	call	#_expr
070d8                 | ' expr()
070d8                 | ' return 0
070d8     00 26 06 F6 | 	mov	local05, #0
070dc     20 01 90 FD | 	jmp	#LR__0665
070e0                 | LR__0640
070e0     FC 0A B0 FD | 	call	#_compile_fun_2p
070e4     FD 26 02 F6 | 	mov	local05, result1
070e8     14 01 90 FD | 	jmp	#LR__0665
070ec                 | LR__0641
070ec     D0 0E B0 FD | 	call	#_compile_fun_varp
070f0     FD 2C 02 F6 | 	mov	local08, result1
070f4     08 01 90 FD | 	jmp	#LR__0665
070f8                 | LR__0642
070f8     E4 0A B0 FD | 	call	#_compile_fun_2p
070fc     FD 26 02 F6 | 	mov	local05, result1
07100     FC 00 90 FD | 	jmp	#LR__0665
07104                 | LR__0643
07104     D8 0A B0 FD | 	call	#_compile_fun_2p
07108     FD 26 02 F6 | 	mov	local05, result1
0710c     F0 00 90 FD | 	jmp	#LR__0665
07110                 | LR__0644
07110     CC 0A B0 FD | 	call	#_compile_fun_2p
07114     FD 26 02 F6 | 	mov	local05, result1
07118     E4 00 90 FD | 	jmp	#LR__0665
0711c                 | LR__0645
0711c     4C 0F B0 FD | 	call	#_compile_print
07120     FD 26 02 F6 | 	mov	local05, result1
07124     94 01 90 FD | 	jmp	#LR__0666
07128                 | LR__0646
07128     94 0E B0 FD | 	call	#_compile_fun_varp
0712c     FD 2C 02 F6 | 	mov	local08, result1
07130     CC 00 90 FD | 	jmp	#LR__0665
07134                 | LR__0647
07134     20 31 B0 FD | 	call	#_expr
07138                 | ' expr()
07138                 | ' return 0
07138     C4 00 90 FD | 	jmp	#LR__0665
0713c                 | LR__0648
0713c     80 0E B0 FD | 	call	#_compile_fun_varp
07140     FD 2C 02 F6 | 	mov	local08, result1
07144     B8 00 90 FD | 	jmp	#LR__0665
07148                 | LR__0649
07148     74 0E B0 FD | 	call	#_compile_fun_varp
0714c     FD 2C 02 F6 | 	mov	local08, result1
07150     AC 00 90 FD | 	jmp	#LR__0665
07154                 | LR__0650
07154     88 0A B0 FD | 	call	#_compile_fun_2p
07158     FD 26 02 F6 | 	mov	local05, result1
0715c     A0 00 90 FD | 	jmp	#LR__0665
07160                 | LR__0651
07160     7C 0A B0 FD | 	call	#_compile_fun_2p
07164     FD 26 02 F6 | 	mov	local05, result1
07168     94 00 90 FD | 	jmp	#LR__0665
0716c                 | LR__0652
0716c     70 0A B0 FD | 	call	#_compile_fun_2p
07170     FD 26 02 F6 | 	mov	local05, result1
07174     88 00 90 FD | 	jmp	#LR__0665
07178                 | LR__0653
07178     64 0A B0 FD | 	call	#_compile_fun_2p
0717c     FD 26 02 F6 | 	mov	local05, result1
07180     7C 00 90 FD | 	jmp	#LR__0665
07184                 | LR__0654
07184     58 0A B0 FD | 	call	#_compile_fun_2p
07188     FD 26 02 F6 | 	mov	local05, result1
0718c     70 00 90 FD | 	jmp	#LR__0665
07190                 | LR__0655
07190     4C 0A B0 FD | 	call	#_compile_fun_2p
07194     FD 26 02 F6 | 	mov	local05, result1
07198     64 00 90 FD | 	jmp	#LR__0665
0719c                 | LR__0656
0719c     40 0A B0 FD | 	call	#_compile_fun_2p
071a0     FD 26 02 F6 | 	mov	local05, result1
071a4     58 00 90 FD | 	jmp	#LR__0665
071a8                 | LR__0657
071a8     14 0E B0 FD | 	call	#_compile_fun_varp
071ac     FD 2C 02 F6 | 	mov	local08, result1
071b0     4C 00 90 FD | 	jmp	#LR__0665
071b4                 | LR__0658
071b4     9C 0A B0 FD | 	call	#_compile_fun_3p
071b8     FD 26 02 F6 | 	mov	local05, result1
071bc     40 00 90 FD | 	jmp	#LR__0665
071c0                 | LR__0659
071c0     94 30 B0 FD | 	call	#_expr
071c4                 | ' expr()
071c4                 | ' return 0
071c4     00 26 06 F6 | 	mov	local05, #0
071c8     34 00 90 FD | 	jmp	#LR__0665
071cc                 | LR__0660
071cc     10 0A B0 FD | 	call	#_compile_fun_2p
071d0     FD 26 02 F6 | 	mov	local05, result1
071d4     28 00 90 FD | 	jmp	#LR__0665
071d8                 | LR__0661
071d8     04 0A B0 FD | 	call	#_compile_fun_2p
071dc     FD 26 02 F6 | 	mov	local05, result1
071e0     1C 00 90 FD | 	jmp	#LR__0665
071e4                 | LR__0662
071e4     F8 09 B0 FD | 	call	#_compile_fun_2p
071e8     FD 26 02 F6 | 	mov	local05, result1
071ec     10 00 90 FD | 	jmp	#LR__0665
071f0                 | LR__0663
071f0     E4 01 B0 FD | 	call	#_compile_array_assign
071f4     C4 00 90 FD | 	jmp	#LR__0666
071f8                 | LR__0664
071f8     28 09 B0 FD | 	call	#_compile_unknown
071fc     BC 00 90 FD | 	jmp	#LR__0666
07200                 | LR__0665
07200     14 23 02 F6 | 	mov	local03, local06
07204     16 1F 02 F6 | 	mov	local01, local08
07208     0F 2B 02 F6 | 	mov	local07, local01
0720c     10 2F 02 F6 | 	mov	local09, local02
07210     11 29 02 F6 | 	mov	local06, local03
07214     4A 00 00 FF 
07218     7C E4 05 F1 | 	add	objptr, ##38012
0721c     F2 1E 02 FB | 	rdlong	local01, objptr
07220     0F 2D 02 F6 | 	mov	local08, local01
07224     01 2C 66 F0 | 	shl	local08, #1
07228     0F 2D 02 F1 | 	add	local08, local01
0722c     02 2C 66 F0 | 	shl	local08, #2
07230     03 00 00 FF 
07234     00 E4 85 F1 | 	sub	objptr, ##1536
07238     F2 2C 02 F1 | 	add	local08, objptr
0723c     16 2B 62 FC | 	wrlong	local07, local08
07240     03 00 00 FF 
07244     00 E4 05 F1 | 	add	objptr, ##1536
07248     F2 1E 02 FB | 	rdlong	local01, objptr
0724c     0F 2D 02 F6 | 	mov	local08, local01
07250     01 2C 66 F0 | 	shl	local08, #1
07254     0F 2D 02 F1 | 	add	local08, local01
07258     02 2C 66 F0 | 	shl	local08, #2
0725c     03 00 00 FF 
07260     00 E4 85 F1 | 	sub	objptr, ##1536
07264     F2 2C 02 F1 | 	add	local08, objptr
07268     04 2C 06 F1 | 	add	local08, #4
0726c     16 2F 62 FC | 	wrlong	local09, local08
07270     03 00 00 FF 
07274     00 E4 05 F1 | 	add	objptr, ##1536
07278     F2 1E 02 FB | 	rdlong	local01, objptr
0727c     0F 2D 02 F6 | 	mov	local08, local01
07280     01 2C 66 F0 | 	shl	local08, #1
07284     0F 2D 02 F1 | 	add	local08, local01
07288     02 2C 66 F0 | 	shl	local08, #2
0728c     03 00 00 FF 
07290     00 E4 85 F1 | 	sub	objptr, ##1536
07294     F2 2C 02 F1 | 	add	local08, objptr
07298     08 2C 06 F1 | 	add	local08, #8
0729c     16 29 62 FC | 	wrlong	local06, local08
072a0     03 00 00 FF 
072a4     00 E4 05 F1 | 	add	objptr, ##1536
072a8     F2 2A 02 FB | 	rdlong	local07, objptr
072ac     01 2A 06 F1 | 	add	local07, #1
072b0     F2 2A 62 FC | 	wrlong	local07, objptr
072b4     4A 00 00 FF 
072b8     7C E4 85 F1 | 	sub	objptr, ##38012
072bc                 | LR__0666
072bc                 | ' 
072bc                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
072bc                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
072bc     03 24 0E F2 | 	cmp	local04, #3 wz
072c0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
072c4     38 00 90 5D |  if_ne	jmp	#LR__0667
072c8     4A 00 00 FF 
072cc     7C E4 05 F1 | 	add	objptr, ##38012
072d0     F2 2C 02 FB | 	rdlong	local08, objptr
072d4     16 1F 02 F6 | 	mov	local01, local08
072d8     01 1E 66 F0 | 	shl	local01, #1
072dc     16 1F 02 F1 | 	add	local01, local08
072e0     02 1E 66 F0 | 	shl	local01, #2
072e4     03 00 00 FF 
072e8     00 E4 85 F1 | 	sub	objptr, ##1536
072ec     F2 1E 02 F1 | 	add	local01, objptr
072f0     08 1E 06 F1 | 	add	local01, #8
072f4     0F FD 6B FC | 	wrlong	#510, local01
072f8     47 00 00 FF 
072fc     7C E4 85 F1 | 	sub	objptr, ##36476
07300                 | LR__0667
07300                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07300     4A 00 00 FF 
07304     7C E4 05 F1 | 	add	objptr, ##38012
07308     F2 1E 02 FB | 	rdlong	local01, objptr
0730c     4A 00 00 FF 
07310     7C E4 85 F1 | 	sub	objptr, ##38012
07314     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
07318                 | LR__0668
07318     0F 2D 02 F6 | 	mov	local08, local01
0731c     01 2C 66 F0 | 	shl	local08, #1
07320     0F 2D 02 F1 | 	add	local08, local01
07324     02 2C 66 F0 | 	shl	local08, #2
07328     47 00 00 FF 
0732c     7C E4 05 F1 | 	add	objptr, ##36476
07330     F2 2C 02 F1 | 	add	local08, objptr
07334     08 2C 06 F1 | 	add	local08, #8
07338     16 2D 02 FB | 	rdlong	local08, local08
0733c     9B 2C 0E F2 | 	cmp	local08, #155 wz
07340     47 00 00 FF 
07344     7C E4 85 F1 | 	sub	objptr, ##36476
07348     70 00 90 5D |  if_ne	jmp	#LR__0669
0734c     0F 2D 02 F6 | 	mov	local08, local01
07350     01 2C 86 F1 | 	sub	local08, #1
07354     16 2F 02 F6 | 	mov	local09, local08
07358     01 2E 66 F0 | 	shl	local09, #1
0735c     16 2F 02 F1 | 	add	local09, local08
07360     02 2E 66 F0 | 	shl	local09, #2
07364     47 00 00 FF 
07368     7C E4 05 F1 | 	add	objptr, ##36476
0736c     F2 2E 02 F1 | 	add	local09, objptr
07370     08 2E 06 F1 | 	add	local09, #8
07374     17 2D 02 FB | 	rdlong	local08, local09
07378     11 2C 0E F2 | 	cmp	local08, #17 wz
0737c     47 00 00 FF 
07380     7C E4 85 F1 | 	sub	objptr, ##36476
07384     34 00 90 5D |  if_ne	jmp	#LR__0669
07388     0F 2F 02 F6 | 	mov	local09, local01
0738c     01 2E 86 F1 | 	sub	local09, #1
07390     17 2D 02 F6 | 	mov	local08, local09
07394     01 2C 66 F0 | 	shl	local08, #1
07398     17 2D 02 F1 | 	add	local08, local09
0739c     02 2C 66 F0 | 	shl	local08, #2
073a0     47 00 00 FF 
073a4     7C E4 05 F1 | 	add	objptr, ##36476
073a8     F2 2C 02 F1 | 	add	local08, objptr
073ac     08 2C 06 F1 | 	add	local08, #8
073b0     16 25 68 FC | 	wrlong	#18, local08
073b4     47 00 00 FF 
073b8     7C E4 85 F1 | 	sub	objptr, ##36476
073bc                 | LR__0669
073bc     01 1E 86 F1 | 	sub	local01, #1
073c0     01 1E 56 F2 | 	cmps	local01, #1 wc
073c4     50 FF 9F 3D |  if_ae	jmp	#LR__0668
073c8                 | LR__0670
073c8                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
073c8                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print ucompiledline(i): next i
073c8                 | ' return err
073c8     13 FB 01 F6 | 	mov	result1, local05
073cc     A7 F0 03 F6 | 	mov	ptra, fp
073d0     B2 00 A0 FD | 	call	#popregs_
073d4                 | _compile_immediate_ret
073d4     2D 00 64 FD | 	ret
073d8                 | 
073d8                 | ' 
073d8                 | ' sub compile_array_assign
073d8                 | _compile_array_assign
073d8     0A 4A 05 F6 | 	mov	COUNT_, #10
073dc     A8 00 A0 FD | 	call	#pushregs_
073e0     00 24 06 F6 | 	mov	local04, #0
073e4     37 00 00 FF 
073e8     44 E4 05 F1 | 	add	objptr, ##28228
073ec     F2 26 02 FB | 	rdlong	local05, objptr
073f0     13 FB 01 F6 | 	mov	result1, local05
073f4     01 FA 85 F1 | 	sub	result1, #1
073f8     03 FA 65 F0 | 	shl	result1, #3
073fc     02 00 00 FF 
07400     38 E4 85 F1 | 	sub	objptr, ##1080
07404     F2 FA 01 F1 | 	add	result1, objptr
07408     FD 28 02 FB | 	rdlong	local06, result1
0740c                 | ' numpar=0
0740c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0740c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0740c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0740c                 | ' if lparts(ct).token=token_lpar then
0740c     03 26 66 F0 | 	shl	local05, #3
07410     F2 26 02 F1 | 	add	local05, objptr
07414     04 26 06 F1 | 	add	local05, #4
07418     13 27 02 FB | 	rdlong	local05, local05
0741c     15 26 0E F2 | 	cmp	local05, #21 wz
07420     35 00 00 FF 
07424     0C E4 85 F1 | 	sub	objptr, ##27148
07428     D4 01 90 5D |  if_ne	jmp	#LR__0684
0742c     37 00 00 FF 
07430     44 E4 05 F1 | 	add	objptr, ##28228
07434     F2 2A 02 FB | 	rdlong	local07, objptr
07438     01 2A 06 F1 | 	add	local07, #1
0743c     F2 2A 62 FC | 	wrlong	local07, objptr
07440     37 00 00 FF 
07444     44 E4 85 F1 | 	sub	objptr, ##28228
07448                 | '   ct+=1 											' omit this lpar, this is for expr list
07448                 | '   do
07448                 | LR__0680
07448     0C 2E B0 FD | 	call	#_expr
0744c     37 00 00 FF 
07450     44 E4 05 F1 | 	add	objptr, ##28228
07454     F2 26 02 FB | 	rdlong	local05, objptr
07458     01 26 06 F1 | 	add	local05, #1
0745c     F2 26 62 FC | 	wrlong	local05, objptr
07460     01 24 06 F1 | 	add	local04, #1
07464     01 26 86 F1 | 	sub	local05, #1
07468     03 26 66 F0 | 	shl	local05, #3
0746c     02 00 00 FF 
07470     38 E4 85 F1 | 	sub	objptr, ##1080
07474     F2 26 02 F1 | 	add	local05, objptr
07478     04 26 06 F1 | 	add	local05, #4
0747c     13 2B 02 FB | 	rdlong	local07, local05
07480     14 2A 0E F2 | 	cmp	local07, #20 wz
07484     35 00 00 FF 
07488     0C E4 85 F1 | 	sub	objptr, ##27148
0748c     34 00 90 AD |  if_e	jmp	#LR__0681
07490     37 00 00 FF 
07494     44 E4 05 F1 | 	add	objptr, ##28228
07498     F2 2A 02 FB | 	rdlong	local07, objptr
0749c     03 2A 66 F0 | 	shl	local07, #3
074a0     02 00 00 FF 
074a4     38 E4 85 F1 | 	sub	objptr, ##1080
074a8     F2 2A 02 F1 | 	add	local07, objptr
074ac     04 2A 06 F1 | 	add	local07, #4
074b0     15 2B 02 FB | 	rdlong	local07, local07
074b4     FE 2B 0E F2 | 	cmp	local07, #510 wz
074b8     35 00 00 FF 
074bc     0C E4 85 F1 | 	sub	objptr, ##27148
074c0     84 FF 9F 5D |  if_ne	jmp	#LR__0680
074c4                 | LR__0681
074c4     37 00 00 FF 
074c8     44 E4 05 F1 | 	add	objptr, ##28228
074cc     F2 2A 02 FB | 	rdlong	local07, objptr
074d0     01 2A 06 F1 | 	add	local07, #1
074d4     F2 2A 62 FC | 	wrlong	local07, objptr
074d8     37 00 00 FF 
074dc     44 E4 85 F1 | 	sub	objptr, ##28228
074e0     74 2D B0 FD | 	call	#_expr
074e4     01 2C 66 F6 | 	neg	local08, #1
074e8     00 2E 06 F6 | 	mov	local09, #0
074ec                 | ' '   print "in array_assign, rpar found, numpar=",numpar
074ec                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
074ec                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
074ec                 | ' ct+=1 : expr()
074ec                 | ' ' now find the vae
074ec                 | ' 
074ec                 | ' j=-1 : i=0 : do : 
074ec                 | LR__0682
074ec                 | '   if variables(i).name=varname$ then j=i: exit loop
074ec     17 27 02 F6 | 	mov	local05, local09
074f0     04 26 66 F0 | 	shl	local05, #4
074f4     14 00 00 FF 
074f8     F8 E5 05 F1 | 	add	objptr, ##10744
074fc     F2 26 02 F1 | 	add	local05, objptr
07500     13 13 02 FB | 	rdlong	arg01, local05
07504     14 15 02 F6 | 	mov	arg02, local06
07508     14 00 00 FF 
0750c     F8 E5 85 F1 | 	sub	objptr, ##10744
07510     3C 92 B1 FD | 	call	#__system___string_cmp
07514     00 FA 0D F2 | 	cmp	result1, #0 wz
07518     17 2D 02 A6 |  if_e	mov	local08, local09
0751c     20 00 90 AD |  if_e	jmp	#LR__0683
07520     01 2E 06 F1 | 	add	local09, #1
07524     35 00 00 FF 
07528     08 E4 05 F1 | 	add	objptr, ##27144
0752c     F2 2A 02 FB | 	rdlong	local07, objptr
07530     35 00 00 FF 
07534     08 E4 85 F1 | 	sub	objptr, ##27144
07538     15 2F 5A F2 | 	cmps	local09, local07 wcz
0753c     AC FF 9F ED |  if_be	jmp	#LR__0682
07540                 | LR__0683
07540     16 1F 02 F6 | 	mov	local01, local08
07544     12 21 02 F6 | 	mov	local02, local04
07548     17 22 06 F6 | 	mov	local03, #23
0754c     0F 2B 02 F6 | 	mov	local07, local01
07550     10 31 02 F6 | 	mov	local10, local02
07554     11 2D 02 F6 | 	mov	local08, local03
07558     4A 00 00 FF 
0755c     7C E4 05 F1 | 	add	objptr, ##38012
07560     F2 1E 02 FB | 	rdlong	local01, objptr
07564     0F 2F 02 F6 | 	mov	local09, local01
07568     01 2E 66 F0 | 	shl	local09, #1
0756c     0F 2F 02 F1 | 	add	local09, local01
07570     02 2E 66 F0 | 	shl	local09, #2
07574     03 00 00 FF 
07578     00 E4 85 F1 | 	sub	objptr, ##1536
0757c     F2 2E 02 F1 | 	add	local09, objptr
07580     17 2B 62 FC | 	wrlong	local07, local09
07584     03 00 00 FF 
07588     00 E4 05 F1 | 	add	objptr, ##1536
0758c     F2 1E 02 FB | 	rdlong	local01, objptr
07590     0F 2F 02 F6 | 	mov	local09, local01
07594     01 2E 66 F0 | 	shl	local09, #1
07598     0F 2F 02 F1 | 	add	local09, local01
0759c     02 2E 66 F0 | 	shl	local09, #2
075a0     03 00 00 FF 
075a4     00 E4 85 F1 | 	sub	objptr, ##1536
075a8     F2 2E 02 F1 | 	add	local09, objptr
075ac     04 2E 06 F1 | 	add	local09, #4
075b0     17 31 62 FC | 	wrlong	local10, local09
075b4     03 00 00 FF 
075b8     00 E4 05 F1 | 	add	objptr, ##1536
075bc     F2 30 02 FB | 	rdlong	local10, objptr
075c0     18 1F 02 F6 | 	mov	local01, local10
075c4     01 1E 66 F0 | 	shl	local01, #1
075c8     18 1F 02 F1 | 	add	local01, local10
075cc     02 1E 66 F0 | 	shl	local01, #2
075d0     03 00 00 FF 
075d4     00 E4 85 F1 | 	sub	objptr, ##1536
075d8     F2 1E 02 F1 | 	add	local01, objptr
075dc     08 1E 06 F1 | 	add	local01, #8
075e0     0F 2D 62 FC | 	wrlong	local08, local01
075e4     03 00 00 FF 
075e8     00 E4 05 F1 | 	add	objptr, ##1536
075ec     F2 2A 02 FB | 	rdlong	local07, objptr
075f0     01 2A 06 F1 | 	add	local07, #1
075f4     F2 2A 62 FC | 	wrlong	local07, objptr
075f8     4A 00 00 FF 
075fc     7C E4 85 F1 | 	sub	objptr, ##38012
07600                 | LR__0684
07600     A7 F0 03 F6 | 	mov	ptra, fp
07604     B2 00 A0 FD | 	call	#popregs_
07608                 | _compile_array_assign_ret
07608     2D 00 64 FD | 	ret
0760c                 | 
0760c                 | ' 
0760c                 | ' 
0760c                 | ' sub compile_immediate_assign(linetype as ulong)
0760c                 | _compile_immediate_assign
0760c     09 4A 05 F6 | 	mov	COUNT_, #9
07610     A8 00 A0 FD | 	call	#pushregs_
07614     09 25 0A F6 | 	mov	local04, arg01 wz
07618     FF 22 06 F6 | 	mov	local03, #255
0761c     01 26 66 F6 | 	neg	local05, #1
07620                 | ' 
07620                 | ' t1.result_type=result_error : t1.result.uresult=0
07620                 | ' i=-1: j=-1
07620                 | ' 
07620                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
07620     2C 00 90 5D |  if_ne	jmp	#LR__0690
07624     35 00 00 FF 
07628     0C E4 05 F1 | 	add	objptr, ##27148
0762c     F2 28 02 FB | 	rdlong	local06, objptr
07630     02 00 00 FF 
07634     38 E4 05 F1 | 	add	objptr, ##1080
07638     F2 04 68 FC | 	wrlong	#2, objptr
0763c     13 00 00 FF 
07640     38 E4 05 F1 | 	add	objptr, ##9784
07644     F2 00 68 FC | 	wrlong	#0, objptr
07648     4A 00 00 FF 
0764c     7C E4 85 F1 | 	sub	objptr, ##38012
07650                 | LR__0690
07650                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07650     02 24 0E F2 | 	cmp	local04, #2 wz
07654     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07658     35 00 00 AF 
0765c     0C E4 05 A1 |  if_e	add	objptr, ##27148
07660     F2 28 02 AB |  if_e	rdlong	local06, objptr
07664     02 00 00 AF 
07668     38 E4 05 A1 |  if_e	add	objptr, ##1080
0766c     F2 04 68 AC |  if_e	wrlong	#2, objptr
07670     37 00 00 AF 
07674     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07678                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07678     04 24 0E F2 | 	cmp	local04, #4 wz
0767c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07680     2C 00 90 5D |  if_ne	jmp	#LR__0691
07684     35 00 00 FF 
07688     14 E4 05 F1 | 	add	objptr, ##27156
0768c     F2 28 02 FB | 	rdlong	local06, objptr
07690     02 00 00 FF 
07694     30 E4 05 F1 | 	add	objptr, ##1072
07698     F2 06 68 FC | 	wrlong	#3, objptr
0769c     13 00 00 FF 
076a0     38 E4 05 F1 | 	add	objptr, ##9784
076a4     F2 04 68 FC | 	wrlong	#2, objptr
076a8     4A 00 00 FF 
076ac     7C E4 85 F1 | 	sub	objptr, ##38012
076b0                 | LR__0691
076b0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
076b0     05 24 0E F2 | 	cmp	local04, #5 wz
076b4     3C 00 90 5D |  if_ne	jmp	#LR__0692
076b8     37 00 00 FF 
076bc     44 E4 05 F1 | 	add	objptr, ##28228
076c0     F2 FA 01 FB | 	rdlong	result1, objptr
076c4     FD 28 02 F6 | 	mov	local06, result1
076c8     03 28 66 F0 | 	shl	local06, #3
076cc     02 00 00 FF 
076d0     38 E4 85 F1 | 	sub	objptr, ##1080
076d4     F2 28 02 F1 | 	add	local06, objptr
076d8     14 29 02 FB | 	rdlong	local06, local06
076dc     02 FA 05 F1 | 	add	result1, #2
076e0     02 00 00 FF 
076e4     38 E4 05 F1 | 	add	objptr, ##1080
076e8     F2 FA 61 FC | 	wrlong	result1, objptr
076ec     37 00 00 FF 
076f0     44 E4 85 F1 | 	sub	objptr, ##28228
076f4                 | LR__0692
076f4     14 13 02 F6 | 	mov	arg01, local06
076f8     01 14 06 F6 | 	mov	arg02, #1
076fc     2C B1 B1 FD | 	call	#__system__Right_S
07700     54 2B B0 FD | 	call	#_expr
07704                 | '  
07704                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
07704                 | ' 
07704                 | ' suffix2$=right$(varname2$,1)
07704                 | ' expr()
07704                 | ' 
07704                 | ' 
07704                 | ' if varnum>0 then
07704     35 00 00 FF 
07708     08 E4 05 F1 | 	add	objptr, ##27144
0770c     F2 2A 02 FB | 	rdlong	local07, objptr
07710     35 00 00 FF 
07714     08 E4 85 F1 | 	sub	objptr, ##27144
07718     01 2A 56 F2 | 	cmps	local07, #1 wc
0771c     58 00 90 CD |  if_b	jmp	#LR__0695
07720                 | '   for i=0 to varnum-1
07720     00 2C 06 F6 | 	mov	local08, #0
07724     35 00 00 FF 
07728     08 E4 05 F1 | 	add	objptr, ##27144
0772c     F2 2E 02 FB | 	rdlong	local09, objptr
07730     35 00 00 FF 
07734     08 E4 85 F1 | 	sub	objptr, ##27144
07738                 | LR__0693
07738     17 2D 52 F2 | 	cmps	local08, local09 wc
0773c     38 00 90 3D |  if_ae	jmp	#LR__0694
07740                 | '     if variables(i).name=varname2$ then j=i : exit
07740     16 2B 02 F6 | 	mov	local07, local08
07744     04 2A 66 F0 | 	shl	local07, #4
07748     14 00 00 FF 
0774c     F8 E5 05 F1 | 	add	objptr, ##10744
07750     F2 2A 02 F1 | 	add	local07, objptr
07754     15 13 02 FB | 	rdlong	arg01, local07
07758     14 15 02 F6 | 	mov	arg02, local06
0775c     14 00 00 FF 
07760     F8 E5 85 F1 | 	sub	objptr, ##10744
07764     E8 8F B1 FD | 	call	#__system___string_cmp
07768     00 FA 0D F2 | 	cmp	result1, #0 wz
0776c     16 27 02 A6 |  if_e	mov	local05, local08
07770     01 2C 06 51 |  if_ne	add	local08, #1
07774     C0 FF 9F 5D |  if_ne	jmp	#LR__0693
07778                 | LR__0694
07778                 | LR__0695
07778                 | ' if  j=-1 andalso varnum<maxvars then   
07778     FF FF 7F FF 
0777c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07780     60 00 90 5D |  if_ne	jmp	#LR__0696
07784     35 00 00 FF 
07788     08 E4 05 F1 | 	add	objptr, ##27144
0778c     F2 2A 02 FB | 	rdlong	local07, objptr
07790     35 00 00 FF 
07794     08 E4 85 F1 | 	sub	objptr, ##27144
07798     02 00 00 FF 
0779c     00 2A 56 F2 | 	cmps	local07, ##1024 wc
077a0     40 00 90 3D |  if_ae	jmp	#LR__0696
077a4     35 00 00 FF 
077a8     08 E4 05 F1 | 	add	objptr, ##27144
077ac     F2 2E 02 FB | 	rdlong	local09, objptr
077b0     04 2E 66 F0 | 	shl	local09, #4
077b4     20 00 00 FF 
077b8     10 E4 85 F1 | 	sub	objptr, ##16400
077bc     F2 2E 02 F1 | 	add	local09, objptr
077c0     17 29 62 FC | 	wrlong	local06, local09
077c4     20 00 00 FF 
077c8     10 E4 05 F1 | 	add	objptr, ##16400
077cc     F2 2A 02 FB | 	rdlong	local07, objptr
077d0     15 27 02 F6 | 	mov	local05, local07
077d4     01 2A 06 F1 | 	add	local07, #1
077d8     F2 2A 62 FC | 	wrlong	local07, objptr
077dc     35 00 00 FF 
077e0     08 E4 85 F1 | 	sub	objptr, ##27144
077e4                 | LR__0696
077e4     13 1F 02 F6 | 	mov	local01, local05
077e8     17 22 06 F6 | 	mov	local03, #23
077ec     0F 2B 02 F6 | 	mov	local07, local01
077f0     10 2F 02 F6 | 	mov	local09, local02
077f4     11 1F 02 F6 | 	mov	local01, local03
077f8     4A 00 00 FF 
077fc     7C E4 05 F1 | 	add	objptr, ##38012
07800     F2 2C 02 FB | 	rdlong	local08, objptr
07804     16 29 02 F6 | 	mov	local06, local08
07808     01 28 66 F0 | 	shl	local06, #1
0780c     16 29 02 F1 | 	add	local06, local08
07810     02 28 66 F0 | 	shl	local06, #2
07814     03 00 00 FF 
07818     00 E4 85 F1 | 	sub	objptr, ##1536
0781c     F2 28 02 F1 | 	add	local06, objptr
07820     14 2B 62 FC | 	wrlong	local07, local06
07824     03 00 00 FF 
07828     00 E4 05 F1 | 	add	objptr, ##1536
0782c     F2 2C 02 FB | 	rdlong	local08, objptr
07830     16 2B 02 F6 | 	mov	local07, local08
07834     01 2A 66 F0 | 	shl	local07, #1
07838     16 2B 02 F1 | 	add	local07, local08
0783c     02 2A 66 F0 | 	shl	local07, #2
07840     03 00 00 FF 
07844     00 E4 85 F1 | 	sub	objptr, ##1536
07848     F2 2A 02 F1 | 	add	local07, objptr
0784c     04 2A 06 F1 | 	add	local07, #4
07850     15 2F 62 FC | 	wrlong	local09, local07
07854     03 00 00 FF 
07858     00 E4 05 F1 | 	add	objptr, ##1536
0785c     F2 2E 02 FB | 	rdlong	local09, objptr
07860     17 2D 02 F6 | 	mov	local08, local09
07864     01 2C 66 F0 | 	shl	local08, #1
07868     17 2D 02 F1 | 	add	local08, local09
0786c     02 2C 66 F0 | 	shl	local08, #2
07870     03 00 00 FF 
07874     00 E4 85 F1 | 	sub	objptr, ##1536
07878     F2 2C 02 F1 | 	add	local08, objptr
0787c     08 2C 06 F1 | 	add	local08, #8
07880     16 1F 62 FC | 	wrlong	local01, local08
07884     03 00 00 FF 
07888     00 E4 05 F1 | 	add	objptr, ##1536
0788c     F2 2A 02 FB | 	rdlong	local07, objptr
07890     01 2A 06 F1 | 	add	local07, #1
07894     F2 2A 62 FC | 	wrlong	local07, objptr
07898     4A 00 00 FF 
0789c     7C E4 85 F1 | 	sub	objptr, ##38012
078a0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
078a0                 | ' 
078a0                 | ' 
078a0                 | ' 
078a0                 | ' 
078a0                 | ' 
078a0                 | ' 
078a0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
078a0                 | '  if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
078a0     03 24 0E F2 | 	cmp	local04, #3 wz
078a4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
078a8     38 00 90 5D |  if_ne	jmp	#LR__0697
078ac     4A 00 00 FF 
078b0     7C E4 05 F1 | 	add	objptr, ##38012
078b4     F2 1E 02 FB | 	rdlong	local01, objptr
078b8     0F 2F 02 F6 | 	mov	local09, local01
078bc     01 2E 66 F0 | 	shl	local09, #1
078c0     0F 2F 02 F1 | 	add	local09, local01
078c4     02 2E 66 F0 | 	shl	local09, #2
078c8     03 00 00 FF 
078cc     00 E4 85 F1 | 	sub	objptr, ##1536
078d0     F2 2E 02 F1 | 	add	local09, objptr
078d4     08 2E 06 F1 | 	add	local09, #8
078d8     17 FD 6B FC | 	wrlong	#510, local09
078dc     47 00 00 FF 
078e0     7C E4 85 F1 | 	sub	objptr, ##36476
078e4                 | LR__0697
078e4     A7 F0 03 F6 | 	mov	ptra, fp
078e8     B2 00 A0 FD | 	call	#popregs_
078ec                 | _compile_immediate_assign_ret
078ec     2D 00 64 FD | 	ret
078f0                 | 
078f0                 | ' 
078f0                 | ' ' ------------------ compile the line that is calling a command 
078f0                 | ' 
078f0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
078f0                 | _compile
078f0     03 4A 05 F6 | 	mov	COUNT_, #3
078f4     A8 00 A0 FD | 	call	#pushregs_
078f8     09 1F 02 F6 | 	mov	local01, arg01
078fc     0B 21 02 F6 | 	mov	local02, arg03
07900     47 00 00 FF 
07904     7C E4 05 F1 | 	add	objptr, ##36476
07908     F2 1E 62 FC | 	wrlong	local01, objptr
0790c     04 E4 05 F1 | 	add	objptr, #4
07910     F2 14 62 FC | 	wrlong	arg02, objptr
07914     47 00 00 FF 
07918     80 E4 85 F1 | 	sub	objptr, ##36480
0791c     10 13 02 F6 | 	mov	arg01, local02
07920     01 12 06 F1 | 	add	arg01, #1
07924     20 F2 BF FD | 	call	#_compile_immediate
07928     FD 22 0A F6 | 	mov	local03, result1 wz
0792c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0792c                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
0792c                 | '  
0792c                 | ' ' print "called compile with line= "; alinemajor;" and cont= "; cont 
0792c                 | ' 'if alinemajor=0 then err=compile_immediate(0) : return err  
0792c                 | ' 
0792c                 | ' ucompiledline(0)=alinemajor
0792c                 | ' ucompiledline(1)=alineminor
0792c                 | ' 
0792c                 | ' 
0792c                 | ' ' cont: 0: this is the first part of the line that will continue
0792c                 | ' ' 1 - this is the continuation of the line
0792c                 | ' ' 2 - this is the last continued line
0792c                 | ' ' 3 - this is the ome and only part
0792c                 | ' 
0792c                 | ' err=compile_immediate(cont+1) 
0792c                 | ' if err=0 andalso alinemajor>0 then
0792c     74 00 90 5D |  if_ne	jmp	#LR__0705
07930     01 1E 16 F2 | 	cmp	local01, #1 wc
07934     6C 00 90 CD |  if_b	jmp	#LR__0705
07938                 | '   if cont=3 orelse cont=2 then 
07938     03 20 0E F2 | 	cmp	local02, #3 wz
0793c     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07940     60 00 90 5D |  if_ne	jmp	#LR__0704
07944                 | '     if alinemajor >lastline then 
07944     4A 00 00 FF 
07948     88 E4 05 F1 | 	add	objptr, ##38024
0794c     F2 14 02 FB | 	rdlong	arg02, objptr
07950     4A 00 00 FF 
07954     88 E4 85 F1 | 	sub	objptr, ##38024
07958     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
0795c     0C 00 90 ED |  if_be	jmp	#LR__0700
07960     0F 13 02 F6 | 	mov	arg01, local01
07964     18 F1 BF FD | 	call	#_add_line_at_end
07968     38 00 90 FD | 	jmp	#LR__0703
0796c                 | LR__0700
0796c     0F 13 02 F6 | 	mov	arg01, local01
07970     38 EA BF FD | 	call	#_deleteline
07974                 | '       deleteline(alinemajor)  
07974                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07974     4A 00 00 FF 
07978     88 E4 05 F1 | 	add	objptr, ##38024
0797c     F2 14 02 FB | 	rdlong	arg02, objptr
07980     4A 00 00 FF 
07984     88 E4 85 F1 | 	sub	objptr, ##38024
07988     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
0798c     0C 00 90 ED |  if_be	jmp	#LR__0701
07990     0F 13 02 F6 | 	mov	arg01, local01
07994     E8 F0 BF FD | 	call	#_add_line_at_end
07998     08 00 90 FD | 	jmp	#LR__0702
0799c                 | LR__0701
0799c     0F 13 02 F6 | 	mov	arg01, local01
079a0     C0 EE BF FD | 	call	#_insertline
079a4                 | LR__0702
079a4                 | LR__0703
079a4                 | LR__0704
079a4                 | LR__0705
079a4                 | ' return err
079a4     11 FB 01 F6 | 	mov	result1, local03
079a8     A7 F0 03 F6 | 	mov	ptra, fp
079ac     B2 00 A0 FD | 	call	#popregs_
079b0                 | _compile_ret
079b0     2D 00 64 FD | 	ret
079b4                 | 
079b4                 | ' 
079b4                 | ' ' ------------------ compile the line that is assigning to a variable
079b4                 | ' 
079b4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
079b4                 | _compile_assign
079b4     02 4A 05 F6 | 	mov	COUNT_, #2
079b8     A8 00 A0 FD | 	call	#pushregs_
079bc     09 1F 02 F6 | 	mov	local01, arg01
079c0     0B 21 02 F6 | 	mov	local02, arg03
079c4     47 00 00 FF 
079c8     7C E4 05 F1 | 	add	objptr, ##36476
079cc     F2 1E 62 FC | 	wrlong	local01, objptr
079d0     04 E4 05 F1 | 	add	objptr, #4
079d4     F2 14 62 FC | 	wrlong	arg02, objptr
079d8     47 00 00 FF 
079dc     80 E4 85 F1 | 	sub	objptr, ##36480
079e0     10 13 02 F6 | 	mov	arg01, local02
079e4     01 12 06 F1 | 	add	arg01, #1
079e8     20 FC BF FD | 	call	#_compile_immediate_assign
079ec                 | ' 
079ec                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
079ec                 | ' 'if alinemajor=0 then compile_immediate_assign(0) : return  
079ec                 | ' 
079ec                 | ' ucompiledline(0)=alinemajor
079ec                 | ' ucompiledline(1)=alineminor
079ec                 | ' 
079ec                 | ' compile_immediate_assign(cont+1) 
079ec                 | ' 
079ec                 | ' if alinemajor>0 then
079ec     01 1E 16 F2 | 	cmp	local01, #1 wc
079f0     6C 00 90 CD |  if_b	jmp	#LR__0715
079f4                 | '   if cont=3 orelse cont=2 then 
079f4     03 20 0E F2 | 	cmp	local02, #3 wz
079f8     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079fc     60 00 90 5D |  if_ne	jmp	#LR__0714
07a00                 | '     if alinemajor >lastline then 
07a00     4A 00 00 FF 
07a04     88 E4 05 F1 | 	add	objptr, ##38024
07a08     F2 14 02 FB | 	rdlong	arg02, objptr
07a0c     4A 00 00 FF 
07a10     88 E4 85 F1 | 	sub	objptr, ##38024
07a14     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a18     0C 00 90 ED |  if_be	jmp	#LR__0710
07a1c     0F 13 02 F6 | 	mov	arg01, local01
07a20     5C F0 BF FD | 	call	#_add_line_at_end
07a24     38 00 90 FD | 	jmp	#LR__0713
07a28                 | LR__0710
07a28     0F 13 02 F6 | 	mov	arg01, local01
07a2c     7C E9 BF FD | 	call	#_deleteline
07a30                 | '       deleteline(alinemajor)  
07a30                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07a30     4A 00 00 FF 
07a34     88 E4 05 F1 | 	add	objptr, ##38024
07a38     F2 14 02 FB | 	rdlong	arg02, objptr
07a3c     4A 00 00 FF 
07a40     88 E4 85 F1 | 	sub	objptr, ##38024
07a44     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a48     0C 00 90 ED |  if_be	jmp	#LR__0711
07a4c     0F 13 02 F6 | 	mov	arg01, local01
07a50     2C F0 BF FD | 	call	#_add_line_at_end
07a54     08 00 90 FD | 	jmp	#LR__0712
07a58                 | LR__0711
07a58     0F 13 02 F6 | 	mov	arg01, local01
07a5c     04 EE BF FD | 	call	#_insertline
07a60                 | LR__0712
07a60                 | LR__0713
07a60                 | LR__0714
07a60                 | LR__0715
07a60     A7 F0 03 F6 | 	mov	ptra, fp
07a64     B2 00 A0 FD | 	call	#popregs_
07a68                 | _compile_assign_ret
07a68     2D 00 64 FD | 	ret
07a6c                 | 
07a6c                 | ' 
07a6c                 | ' sub compile_error(errno)
07a6c                 | _compile_error
07a6c     FF 04 06 F6 | 	mov	_var03, #255
07a70     01 07 02 F6 | 	mov	_var04, _var02
07a74     02 09 02 F6 | 	mov	_var05, _var03
07a78     4A 00 00 FF 
07a7c     7C E4 05 F1 | 	add	objptr, ##38012
07a80     F2 0A 02 FB | 	rdlong	_var06, objptr
07a84     05 0D 02 F6 | 	mov	_var07, _var06
07a88     01 0C 66 F0 | 	shl	_var07, #1
07a8c     05 0D 02 F1 | 	add	_var07, _var06
07a90     02 0C 66 F0 | 	shl	_var07, #2
07a94     03 00 00 FF 
07a98     00 E4 85 F1 | 	sub	objptr, ##1536
07a9c     F2 0C 02 F1 | 	add	_var07, objptr
07aa0     06 13 62 FC | 	wrlong	arg01, _var07
07aa4     03 00 00 FF 
07aa8     00 E4 05 F1 | 	add	objptr, ##1536
07aac     F2 0C 02 FB | 	rdlong	_var07, objptr
07ab0     06 0B 02 F6 | 	mov	_var06, _var07
07ab4     01 0A 66 F0 | 	shl	_var06, #1
07ab8     06 0B 02 F1 | 	add	_var06, _var07
07abc     02 0A 66 F0 | 	shl	_var06, #2
07ac0     03 00 00 FF 
07ac4     00 E4 85 F1 | 	sub	objptr, ##1536
07ac8     F2 0A 02 F1 | 	add	_var06, objptr
07acc     04 0A 06 F1 | 	add	_var06, #4
07ad0     05 07 62 FC | 	wrlong	_var04, _var06
07ad4     03 00 00 FF 
07ad8     00 E4 05 F1 | 	add	objptr, ##1536
07adc     F2 0C 02 FB | 	rdlong	_var07, objptr
07ae0     06 0B 02 F6 | 	mov	_var06, _var07
07ae4     01 0A 66 F0 | 	shl	_var06, #1
07ae8     06 0B 02 F1 | 	add	_var06, _var07
07aec     02 0A 66 F0 | 	shl	_var06, #2
07af0     03 00 00 FF 
07af4     00 E4 85 F1 | 	sub	objptr, ##1536
07af8     F2 0A 02 F1 | 	add	_var06, objptr
07afc     08 0A 06 F1 | 	add	_var06, #8
07b00     05 09 62 FC | 	wrlong	_var05, _var06
07b04     03 00 00 FF 
07b08     00 E4 05 F1 | 	add	objptr, ##1536
07b0c     F2 12 02 FB | 	rdlong	arg01, objptr
07b10     01 12 06 F1 | 	add	arg01, #1
07b14     F2 12 62 FC | 	wrlong	arg01, objptr
07b18     4A 00 00 FF 
07b1c     7C E4 85 F1 | 	sub	objptr, ##38012
07b20                 | _compile_error_ret
07b20     2D 00 64 FD | 	ret
07b24                 | 
07b24                 | ' 
07b24                 | ' sub compile_unknown() 
07b24                 | _compile_unknown
07b24     FF 04 06 F6 | 	mov	_var03, #255
07b28     17 00 06 F6 | 	mov	_var01, #23
07b2c     01 07 02 F6 | 	mov	_var04, _var02
07b30     02 01 02 F6 | 	mov	_var01, _var03
07b34     4A 00 00 FF 
07b38     7C E4 05 F1 | 	add	objptr, ##38012
07b3c     F2 08 02 FB | 	rdlong	_var05, objptr
07b40     04 0B 02 F6 | 	mov	_var06, _var05
07b44     01 0A 66 F0 | 	shl	_var06, #1
07b48     04 0B 02 F1 | 	add	_var06, _var05
07b4c     02 0A 66 F0 | 	shl	_var06, #2
07b50     03 00 00 FF 
07b54     00 E4 85 F1 | 	sub	objptr, ##1536
07b58     F2 0A 02 F1 | 	add	_var06, objptr
07b5c     05 2F 68 FC | 	wrlong	#23, _var06
07b60     03 00 00 FF 
07b64     00 E4 05 F1 | 	add	objptr, ##1536
07b68     F2 0A 02 FB | 	rdlong	_var06, objptr
07b6c     05 09 02 F6 | 	mov	_var05, _var06
07b70     01 08 66 F0 | 	shl	_var05, #1
07b74     05 09 02 F1 | 	add	_var05, _var06
07b78     02 08 66 F0 | 	shl	_var05, #2
07b7c     03 00 00 FF 
07b80     00 E4 85 F1 | 	sub	objptr, ##1536
07b84     F2 08 02 F1 | 	add	_var05, objptr
07b88     04 08 06 F1 | 	add	_var05, #4
07b8c     04 07 62 FC | 	wrlong	_var04, _var05
07b90     03 00 00 FF 
07b94     00 E4 05 F1 | 	add	objptr, ##1536
07b98     F2 0A 02 FB | 	rdlong	_var06, objptr
07b9c     05 09 02 F6 | 	mov	_var05, _var06
07ba0     01 08 66 F0 | 	shl	_var05, #1
07ba4     05 09 02 F1 | 	add	_var05, _var06
07ba8     02 08 66 F0 | 	shl	_var05, #2
07bac     03 00 00 FF 
07bb0     00 E4 85 F1 | 	sub	objptr, ##1536
07bb4     F2 08 02 F1 | 	add	_var05, objptr
07bb8     08 08 06 F1 | 	add	_var05, #8
07bbc     04 01 62 FC | 	wrlong	_var01, _var05
07bc0     03 00 00 FF 
07bc4     00 E4 05 F1 | 	add	objptr, ##1536
07bc8     F2 0A 02 FB | 	rdlong	_var06, objptr
07bcc     01 0A 06 F1 | 	add	_var06, #1
07bd0     F2 0A 62 FC | 	wrlong	_var06, objptr
07bd4     4A 00 00 FF 
07bd8     7C E4 85 F1 | 	sub	objptr, ##38012
07bdc                 | _compile_unknown_ret
07bdc     2D 00 64 FD | 	ret
07be0                 | 
07be0                 | ' 
07be0                 | ' function compile_fun_2p() as ulong
07be0                 | _compile_fun_2p
07be0     01 4A 05 F6 | 	mov	COUNT_, #1
07be4     A8 00 A0 FD | 	call	#pushregs_
07be8     6C 26 B0 FD | 	call	#_expr
07bec                 | ' 
07bec                 | ' expr()
07bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07bec     37 00 00 FF 
07bf0     44 E4 05 F1 | 	add	objptr, ##28228
07bf4     F2 1E 02 FB | 	rdlong	local01, objptr
07bf8     03 1E 66 F0 | 	shl	local01, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 1E 02 F1 | 	add	local01, objptr
07c08     04 1E 06 F1 | 	add	local01, #4
07c0c     0F 1F 02 FB | 	rdlong	local01, local01
07c10     11 1E 0E F2 | 	cmp	local01, #17 wz
07c14     35 00 00 FF 
07c18     0C E4 85 F1 | 	sub	objptr, ##27148
07c1c     15 FA 05 56 |  if_ne	mov	result1, #21
07c20     24 00 90 5D |  if_ne	jmp	#LR__0720
07c24     37 00 00 FF 
07c28     44 E4 05 F1 | 	add	objptr, ##28228
07c2c     F2 1E 02 FB | 	rdlong	local01, objptr
07c30     01 1E 06 F1 | 	add	local01, #1
07c34     F2 1E 62 FC | 	wrlong	local01, objptr
07c38     37 00 00 FF 
07c3c     44 E4 85 F1 | 	sub	objptr, ##28228
07c40     14 26 B0 FD | 	call	#_expr
07c44     00 FA 05 F6 | 	mov	result1, #0
07c48                 | LR__0720
07c48     A7 F0 03 F6 | 	mov	ptra, fp
07c4c     B2 00 A0 FD | 	call	#popregs_
07c50                 | _compile_fun_2p_ret
07c50     2D 00 64 FD | 	ret
07c54                 | 
07c54                 | ' 
07c54                 | ' function compile_fun_3p() as ulong
07c54                 | _compile_fun_3p
07c54     01 4A 05 F6 | 	mov	COUNT_, #1
07c58     A8 00 A0 FD | 	call	#pushregs_
07c5c     F8 25 B0 FD | 	call	#_expr
07c60                 | ' 
07c60                 | ' expr()
07c60                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07c60     37 00 00 FF 
07c64     44 E4 05 F1 | 	add	objptr, ##28228
07c68     F2 1E 02 FB | 	rdlong	local01, objptr
07c6c     03 1E 66 F0 | 	shl	local01, #3
07c70     02 00 00 FF 
07c74     38 E4 85 F1 | 	sub	objptr, ##1080
07c78     F2 1E 02 F1 | 	add	local01, objptr
07c7c     04 1E 06 F1 | 	add	local01, #4
07c80     0F 1F 02 FB | 	rdlong	local01, local01
07c84     11 1E 0E F2 | 	cmp	local01, #17 wz
07c88     35 00 00 FF 
07c8c     0C E4 85 F1 | 	sub	objptr, ##27148
07c90     15 FA 05 56 |  if_ne	mov	result1, #21
07c94     7C 00 90 5D |  if_ne	jmp	#LR__0730
07c98     37 00 00 FF 
07c9c     44 E4 05 F1 | 	add	objptr, ##28228
07ca0     F2 1E 02 FB | 	rdlong	local01, objptr
07ca4     01 1E 06 F1 | 	add	local01, #1
07ca8     F2 1E 62 FC | 	wrlong	local01, objptr
07cac     37 00 00 FF 
07cb0     44 E4 85 F1 | 	sub	objptr, ##28228
07cb4     A0 25 B0 FD | 	call	#_expr
07cb8                 | ' expr()
07cb8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07cb8     37 00 00 FF 
07cbc     44 E4 05 F1 | 	add	objptr, ##28228
07cc0     F2 1E 02 FB | 	rdlong	local01, objptr
07cc4     03 1E 66 F0 | 	shl	local01, #3
07cc8     02 00 00 FF 
07ccc     38 E4 85 F1 | 	sub	objptr, ##1080
07cd0     F2 1E 02 F1 | 	add	local01, objptr
07cd4     04 1E 06 F1 | 	add	local01, #4
07cd8     0F 1F 02 FB | 	rdlong	local01, local01
07cdc     11 1E 0E F2 | 	cmp	local01, #17 wz
07ce0     35 00 00 FF 
07ce4     0C E4 85 F1 | 	sub	objptr, ##27148
07ce8     15 FA 05 56 |  if_ne	mov	result1, #21
07cec     24 00 90 5D |  if_ne	jmp	#LR__0730
07cf0     37 00 00 FF 
07cf4     44 E4 05 F1 | 	add	objptr, ##28228
07cf8     F2 1E 02 FB | 	rdlong	local01, objptr
07cfc     01 1E 06 F1 | 	add	local01, #1
07d00     F2 1E 62 FC | 	wrlong	local01, objptr
07d04     37 00 00 FF 
07d08     44 E4 85 F1 | 	sub	objptr, ##28228
07d0c     48 25 B0 FD | 	call	#_expr
07d10     00 FA 05 F6 | 	mov	result1, #0
07d14                 | LR__0730
07d14     A7 F0 03 F6 | 	mov	ptra, fp
07d18     B2 00 A0 FD | 	call	#popregs_
07d1c                 | _compile_fun_3p_ret
07d1c     2D 00 64 FD | 	ret
07d20                 | 
07d20                 | ' 
07d20                 | ' function compile_fun_4p() as ulong
07d20                 | _compile_fun_4p
07d20     01 4A 05 F6 | 	mov	COUNT_, #1
07d24     A8 00 A0 FD | 	call	#pushregs_
07d28     2C 25 B0 FD | 	call	#_expr
07d2c                 | ' 
07d2c                 | ' expr()
07d2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d2c     37 00 00 FF 
07d30     44 E4 05 F1 | 	add	objptr, ##28228
07d34     F2 1E 02 FB | 	rdlong	local01, objptr
07d38     03 1E 66 F0 | 	shl	local01, #3
07d3c     02 00 00 FF 
07d40     38 E4 85 F1 | 	sub	objptr, ##1080
07d44     F2 1E 02 F1 | 	add	local01, objptr
07d48     04 1E 06 F1 | 	add	local01, #4
07d4c     0F 1F 02 FB | 	rdlong	local01, local01
07d50     11 1E 0E F2 | 	cmp	local01, #17 wz
07d54     35 00 00 FF 
07d58     0C E4 85 F1 | 	sub	objptr, ##27148
07d5c     15 FA 05 56 |  if_ne	mov	result1, #21
07d60     D4 00 90 5D |  if_ne	jmp	#LR__0740
07d64     37 00 00 FF 
07d68     44 E4 05 F1 | 	add	objptr, ##28228
07d6c     F2 1E 02 FB | 	rdlong	local01, objptr
07d70     01 1E 06 F1 | 	add	local01, #1
07d74     F2 1E 62 FC | 	wrlong	local01, objptr
07d78     37 00 00 FF 
07d7c     44 E4 85 F1 | 	sub	objptr, ##28228
07d80     D4 24 B0 FD | 	call	#_expr
07d84                 | ' expr()
07d84                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d84     37 00 00 FF 
07d88     44 E4 05 F1 | 	add	objptr, ##28228
07d8c     F2 1E 02 FB | 	rdlong	local01, objptr
07d90     03 1E 66 F0 | 	shl	local01, #3
07d94     02 00 00 FF 
07d98     38 E4 85 F1 | 	sub	objptr, ##1080
07d9c     F2 1E 02 F1 | 	add	local01, objptr
07da0     04 1E 06 F1 | 	add	local01, #4
07da4     0F 1F 02 FB | 	rdlong	local01, local01
07da8     11 1E 0E F2 | 	cmp	local01, #17 wz
07dac     35 00 00 FF 
07db0     0C E4 85 F1 | 	sub	objptr, ##27148
07db4     15 FA 05 56 |  if_ne	mov	result1, #21
07db8     7C 00 90 5D |  if_ne	jmp	#LR__0740
07dbc     37 00 00 FF 
07dc0     44 E4 05 F1 | 	add	objptr, ##28228
07dc4     F2 1E 02 FB | 	rdlong	local01, objptr
07dc8     01 1E 06 F1 | 	add	local01, #1
07dcc     F2 1E 62 FC | 	wrlong	local01, objptr
07dd0     37 00 00 FF 
07dd4     44 E4 85 F1 | 	sub	objptr, ##28228
07dd8     7C 24 B0 FD | 	call	#_expr
07ddc                 | ' expr()
07ddc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07ddc     37 00 00 FF 
07de0     44 E4 05 F1 | 	add	objptr, ##28228
07de4     F2 1E 02 FB | 	rdlong	local01, objptr
07de8     03 1E 66 F0 | 	shl	local01, #3
07dec     02 00 00 FF 
07df0     38 E4 85 F1 | 	sub	objptr, ##1080
07df4     F2 1E 02 F1 | 	add	local01, objptr
07df8     04 1E 06 F1 | 	add	local01, #4
07dfc     0F 1F 02 FB | 	rdlong	local01, local01
07e00     11 1E 0E F2 | 	cmp	local01, #17 wz
07e04     35 00 00 FF 
07e08     0C E4 85 F1 | 	sub	objptr, ##27148
07e0c     15 FA 05 56 |  if_ne	mov	result1, #21
07e10     24 00 90 5D |  if_ne	jmp	#LR__0740
07e14     37 00 00 FF 
07e18     44 E4 05 F1 | 	add	objptr, ##28228
07e1c     F2 1E 02 FB | 	rdlong	local01, objptr
07e20     01 1E 06 F1 | 	add	local01, #1
07e24     F2 1E 62 FC | 	wrlong	local01, objptr
07e28     37 00 00 FF 
07e2c     44 E4 85 F1 | 	sub	objptr, ##28228
07e30     24 24 B0 FD | 	call	#_expr
07e34     00 FA 05 F6 | 	mov	result1, #0
07e38                 | LR__0740
07e38     A7 F0 03 F6 | 	mov	ptra, fp
07e3c     B2 00 A0 FD | 	call	#popregs_
07e40                 | _compile_fun_4p_ret
07e40     2D 00 64 FD | 	ret
07e44                 | 
07e44                 | ' 
07e44                 | ' 
07e44                 | ' function compile_fun_5p() as ulong
07e44                 | _compile_fun_5p
07e44     01 4A 05 F6 | 	mov	COUNT_, #1
07e48     A8 00 A0 FD | 	call	#pushregs_
07e4c     08 24 B0 FD | 	call	#_expr
07e50                 | ' 
07e50                 | ' expr()
07e50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e50     37 00 00 FF 
07e54     44 E4 05 F1 | 	add	objptr, ##28228
07e58     F2 1E 02 FB | 	rdlong	local01, objptr
07e5c     03 1E 66 F0 | 	shl	local01, #3
07e60     02 00 00 FF 
07e64     38 E4 85 F1 | 	sub	objptr, ##1080
07e68     F2 1E 02 F1 | 	add	local01, objptr
07e6c     04 1E 06 F1 | 	add	local01, #4
07e70     0F 1F 02 FB | 	rdlong	local01, local01
07e74     11 1E 0E F2 | 	cmp	local01, #17 wz
07e78     35 00 00 FF 
07e7c     0C E4 85 F1 | 	sub	objptr, ##27148
07e80     15 FA 05 56 |  if_ne	mov	result1, #21
07e84     2C 01 90 5D |  if_ne	jmp	#LR__0750
07e88     37 00 00 FF 
07e8c     44 E4 05 F1 | 	add	objptr, ##28228
07e90     F2 1E 02 FB | 	rdlong	local01, objptr
07e94     01 1E 06 F1 | 	add	local01, #1
07e98     F2 1E 62 FC | 	wrlong	local01, objptr
07e9c     37 00 00 FF 
07ea0     44 E4 85 F1 | 	sub	objptr, ##28228
07ea4     B0 23 B0 FD | 	call	#_expr
07ea8                 | ' expr()
07ea8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07ea8     37 00 00 FF 
07eac     44 E4 05 F1 | 	add	objptr, ##28228
07eb0     F2 1E 02 FB | 	rdlong	local01, objptr
07eb4     03 1E 66 F0 | 	shl	local01, #3
07eb8     02 00 00 FF 
07ebc     38 E4 85 F1 | 	sub	objptr, ##1080
07ec0     F2 1E 02 F1 | 	add	local01, objptr
07ec4     04 1E 06 F1 | 	add	local01, #4
07ec8     0F 1F 02 FB | 	rdlong	local01, local01
07ecc     11 1E 0E F2 | 	cmp	local01, #17 wz
07ed0     35 00 00 FF 
07ed4     0C E4 85 F1 | 	sub	objptr, ##27148
07ed8     15 FA 05 56 |  if_ne	mov	result1, #21
07edc     D4 00 90 5D |  if_ne	jmp	#LR__0750
07ee0     37 00 00 FF 
07ee4     44 E4 05 F1 | 	add	objptr, ##28228
07ee8     F2 1E 02 FB | 	rdlong	local01, objptr
07eec     01 1E 06 F1 | 	add	local01, #1
07ef0     F2 1E 62 FC | 	wrlong	local01, objptr
07ef4     37 00 00 FF 
07ef8     44 E4 85 F1 | 	sub	objptr, ##28228
07efc     58 23 B0 FD | 	call	#_expr
07f00                 | ' expr()
07f00                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f00     37 00 00 FF 
07f04     44 E4 05 F1 | 	add	objptr, ##28228
07f08     F2 1E 02 FB | 	rdlong	local01, objptr
07f0c     03 1E 66 F0 | 	shl	local01, #3
07f10     02 00 00 FF 
07f14     38 E4 85 F1 | 	sub	objptr, ##1080
07f18     F2 1E 02 F1 | 	add	local01, objptr
07f1c     04 1E 06 F1 | 	add	local01, #4
07f20     0F 1F 02 FB | 	rdlong	local01, local01
07f24     11 1E 0E F2 | 	cmp	local01, #17 wz
07f28     35 00 00 FF 
07f2c     0C E4 85 F1 | 	sub	objptr, ##27148
07f30     15 FA 05 56 |  if_ne	mov	result1, #21
07f34     7C 00 90 5D |  if_ne	jmp	#LR__0750
07f38     37 00 00 FF 
07f3c     44 E4 05 F1 | 	add	objptr, ##28228
07f40     F2 1E 02 FB | 	rdlong	local01, objptr
07f44     01 1E 06 F1 | 	add	local01, #1
07f48     F2 1E 62 FC | 	wrlong	local01, objptr
07f4c     37 00 00 FF 
07f50     44 E4 85 F1 | 	sub	objptr, ##28228
07f54     00 23 B0 FD | 	call	#_expr
07f58                 | ' expr()
07f58                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f58     37 00 00 FF 
07f5c     44 E4 05 F1 | 	add	objptr, ##28228
07f60     F2 1E 02 FB | 	rdlong	local01, objptr
07f64     03 1E 66 F0 | 	shl	local01, #3
07f68     02 00 00 FF 
07f6c     38 E4 85 F1 | 	sub	objptr, ##1080
07f70     F2 1E 02 F1 | 	add	local01, objptr
07f74     04 1E 06 F1 | 	add	local01, #4
07f78     0F 1F 02 FB | 	rdlong	local01, local01
07f7c     11 1E 0E F2 | 	cmp	local01, #17 wz
07f80     35 00 00 FF 
07f84     0C E4 85 F1 | 	sub	objptr, ##27148
07f88     15 FA 05 56 |  if_ne	mov	result1, #21
07f8c     24 00 90 5D |  if_ne	jmp	#LR__0750
07f90     37 00 00 FF 
07f94     44 E4 05 F1 | 	add	objptr, ##28228
07f98     F2 1E 02 FB | 	rdlong	local01, objptr
07f9c     01 1E 06 F1 | 	add	local01, #1
07fa0     F2 1E 62 FC | 	wrlong	local01, objptr
07fa4     37 00 00 FF 
07fa8     44 E4 85 F1 | 	sub	objptr, ##28228
07fac     A8 22 B0 FD | 	call	#_expr
07fb0     00 FA 05 F6 | 	mov	result1, #0
07fb4                 | LR__0750
07fb4     A7 F0 03 F6 | 	mov	ptra, fp
07fb8     B2 00 A0 FD | 	call	#popregs_
07fbc                 | _compile_fun_5p_ret
07fbc     2D 00 64 FD | 	ret
07fc0                 | 
07fc0                 | ' 
07fc0                 | ' function compile_fun_varp() as ulong 
07fc0                 | _compile_fun_varp
07fc0     02 4A 05 F6 | 	mov	COUNT_, #2
07fc4     A8 00 A0 FD | 	call	#pushregs_
07fc8     00 1E 06 F6 | 	mov	local01, #0
07fcc                 | ' i=0
07fcc                 | ' if lparts(ct).token<>token_end then
07fcc     37 00 00 FF 
07fd0     44 E4 05 F1 | 	add	objptr, ##28228
07fd4     F2 20 02 FB | 	rdlong	local02, objptr
07fd8     03 20 66 F0 | 	shl	local02, #3
07fdc     02 00 00 FF 
07fe0     38 E4 85 F1 | 	sub	objptr, ##1080
07fe4     F2 20 02 F1 | 	add	local02, objptr
07fe8     04 20 06 F1 | 	add	local02, #4
07fec     10 21 02 FB | 	rdlong	local02, local02
07ff0     FE 21 0E F2 | 	cmp	local02, #510 wz
07ff4     35 00 00 FF 
07ff8     0C E4 85 F1 | 	sub	objptr, ##27148
07ffc     5C 00 90 AD |  if_e	jmp	#LR__0762
08000                 | '   do
08000                 | LR__0760
08000     54 22 B0 FD | 	call	#_expr
08004     01 1E 06 F1 | 	add	local01, #1
08008                 | '   expr()
08008                 | '    i+=1
08008                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
08008     37 00 00 FF 
0800c     44 E4 05 F1 | 	add	objptr, ##28228
08010     F2 20 02 FB | 	rdlong	local02, objptr
08014     03 20 66 F0 | 	shl	local02, #3
08018     02 00 00 FF 
0801c     38 E4 85 F1 | 	sub	objptr, ##1080
08020     F2 20 02 F1 | 	add	local02, objptr
08024     04 20 06 F1 | 	add	local02, #4
08028     10 21 02 FB | 	rdlong	local02, local02
0802c     11 20 0E F2 | 	cmp	local02, #17 wz
08030     35 00 00 FF 
08034     0C E4 85 F1 | 	sub	objptr, ##27148
08038     20 00 90 5D |  if_ne	jmp	#LR__0761
0803c     37 00 00 FF 
08040     44 E4 05 F1 | 	add	objptr, ##28228
08044     F2 20 02 FB | 	rdlong	local02, objptr
08048     01 20 06 F1 | 	add	local02, #1
0804c     F2 20 62 FC | 	wrlong	local02, objptr
08050     37 00 00 FF 
08054     44 E4 85 F1 | 	sub	objptr, ##28228
08058     A4 FF 9F FD | 	jmp	#LR__0760
0805c                 | LR__0761
0805c                 | LR__0762
0805c                 | ' return i
0805c     0F FB 01 F6 | 	mov	result1, local01
08060     A7 F0 03 F6 | 	mov	ptra, fp
08064     B2 00 A0 FD | 	call	#popregs_
08068                 | _compile_fun_varp_ret
08068     2D 00 64 FD | 	ret
0806c                 | 
0806c                 | ' 
0806c                 | ' 
0806c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0806c                 | _compile_print
0806c     0B 4A 05 F6 | 	mov	COUNT_, #11
08070     A8 00 A0 FD | 	call	#pushregs_
08074     00 1E 06 F6 | 	mov	local01, #0
08078     1D 22 06 F6 | 	mov	local03, #29
0807c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0807c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0807c     37 00 00 FF 
08080     44 E4 05 F1 | 	add	objptr, ##28228
08084     F2 24 02 FB | 	rdlong	local04, objptr
08088     03 24 66 F0 | 	shl	local04, #3
0808c     02 00 00 FF 
08090     38 E4 85 F1 | 	sub	objptr, ##1080
08094     F2 24 02 F1 | 	add	local04, objptr
08098     04 24 06 F1 | 	add	local04, #4
0809c     12 25 02 FB | 	rdlong	local04, local04
080a0     FE 25 0E F2 | 	cmp	local04, #510 wz
080a4     35 00 00 FF 
080a8     0C E4 85 F1 | 	sub	objptr, ##27148
080ac     68 01 90 5D |  if_ne	jmp	#LR__0770
080b0     20 22 06 F6 | 	mov	local03, #32
080b4     0F 27 02 F6 | 	mov	local05, local01
080b8     10 29 02 F6 | 	mov	local06, local02
080bc     11 2B 02 F6 | 	mov	local07, local03
080c0     4A 00 00 FF 
080c4     7C E4 05 F1 | 	add	objptr, ##38012
080c8     F2 2C 02 FB | 	rdlong	local08, objptr
080cc     16 2F 02 F6 | 	mov	local09, local08
080d0     01 2E 66 F0 | 	shl	local09, #1
080d4     16 2F 02 F1 | 	add	local09, local08
080d8     02 2E 66 F0 | 	shl	local09, #2
080dc     03 00 00 FF 
080e0     00 E4 85 F1 | 	sub	objptr, ##1536
080e4     F2 2E 02 F1 | 	add	local09, objptr
080e8     17 27 62 FC | 	wrlong	local05, local09
080ec     03 00 00 FF 
080f0     00 E4 05 F1 | 	add	objptr, ##1536
080f4     F2 26 02 FB | 	rdlong	local05, objptr
080f8     13 31 02 F6 | 	mov	local10, local05
080fc     01 30 66 F0 | 	shl	local10, #1
08100     13 31 02 F1 | 	add	local10, local05
08104     02 30 66 F0 | 	shl	local10, #2
08108     03 00 00 FF 
0810c     00 E4 85 F1 | 	sub	objptr, ##1536
08110     F2 30 02 F1 | 	add	local10, objptr
08114     04 30 06 F1 | 	add	local10, #4
08118     18 29 62 FC | 	wrlong	local06, local10
0811c     03 00 00 FF 
08120     00 E4 05 F1 | 	add	objptr, ##1536
08124     F2 26 02 FB | 	rdlong	local05, objptr
08128     13 33 02 F6 | 	mov	local11, local05
0812c     01 32 66 F0 | 	shl	local11, #1
08130     13 33 02 F1 | 	add	local11, local05
08134     02 32 66 F0 | 	shl	local11, #2
08138     03 00 00 FF 
0813c     00 E4 85 F1 | 	sub	objptr, ##1536
08140     F2 32 02 F1 | 	add	local11, objptr
08144     08 32 06 F1 | 	add	local11, #8
08148     19 2B 62 FC | 	wrlong	local07, local11
0814c     03 00 00 FF 
08150     00 E4 05 F1 | 	add	objptr, ##1536
08154     F2 26 02 FB | 	rdlong	local05, objptr
08158     01 26 06 F1 | 	add	local05, #1
0815c     F2 26 62 FC | 	wrlong	local05, objptr
08160     44 22 06 F6 | 	mov	local03, #68
08164     0F 27 02 F6 | 	mov	local05, local01
08168     10 29 02 F6 | 	mov	local06, local02
0816c     11 2B 02 F6 | 	mov	local07, local03
08170     F2 2C 02 FB | 	rdlong	local08, objptr
08174     16 2F 02 F6 | 	mov	local09, local08
08178     01 2E 66 F0 | 	shl	local09, #1
0817c     16 2F 02 F1 | 	add	local09, local08
08180     02 2E 66 F0 | 	shl	local09, #2
08184     03 00 00 FF 
08188     00 E4 85 F1 | 	sub	objptr, ##1536
0818c     F2 2E 02 F1 | 	add	local09, objptr
08190     17 27 62 FC | 	wrlong	local05, local09
08194     03 00 00 FF 
08198     00 E4 05 F1 | 	add	objptr, ##1536
0819c     F2 32 02 FB | 	rdlong	local11, objptr
081a0     19 31 02 F6 | 	mov	local10, local11
081a4     01 30 66 F0 | 	shl	local10, #1
081a8     19 31 02 F1 | 	add	local10, local11
081ac     02 30 66 F0 | 	shl	local10, #2
081b0     03 00 00 FF 
081b4     00 E4 85 F1 | 	sub	objptr, ##1536
081b8     F2 30 02 F1 | 	add	local10, objptr
081bc     04 30 06 F1 | 	add	local10, #4
081c0     18 29 62 FC | 	wrlong	local06, local10
081c4     03 00 00 FF 
081c8     00 E4 05 F1 | 	add	objptr, ##1536
081cc     F2 30 02 FB | 	rdlong	local10, objptr
081d0     18 33 02 F6 | 	mov	local11, local10
081d4     01 32 66 F0 | 	shl	local11, #1
081d8     18 33 02 F1 | 	add	local11, local10
081dc     02 32 66 F0 | 	shl	local11, #2
081e0     03 00 00 FF 
081e4     00 E4 85 F1 | 	sub	objptr, ##1536
081e8     F2 32 02 F1 | 	add	local11, objptr
081ec     08 32 06 F1 | 	add	local11, #8
081f0     19 2B 62 FC | 	wrlong	local07, local11
081f4     03 00 00 FF 
081f8     00 E4 05 F1 | 	add	objptr, ##1536
081fc     F2 26 02 FB | 	rdlong	local05, objptr
08200     01 26 06 F1 | 	add	local05, #1
08204     F2 26 62 FC | 	wrlong	local05, objptr
08208     4A 00 00 FF 
0820c     7C E4 85 F1 | 	sub	objptr, ##38012
08210     00 FA 05 F6 | 	mov	result1, #0
08214     20 05 90 FD | 	jmp	#LR__0777
08218                 | LR__0770
08218                 | ' do
08218                 | LR__0771
08218     3C 20 B0 FD | 	call	#_expr
0821c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0821c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0821c     37 00 00 FF 
08220     44 E4 05 F1 | 	add	objptr, ##28228
08224     F2 24 02 FB | 	rdlong	local04, objptr
08228     03 24 66 F0 | 	shl	local04, #3
0822c     02 00 00 FF 
08230     38 E4 85 F1 | 	sub	objptr, ##1080
08234     F2 24 02 F1 | 	add	local04, objptr
08238     04 24 06 F1 | 	add	local04, #4
0823c     12 2D 02 FB | 	rdlong	local08, local04
08240     11 2C 0E F2 | 	cmp	local08, #17 wz
08244     35 00 00 FF 
08248     0C E4 85 F1 | 	sub	objptr, ##27148
0824c     60 01 90 5D |  if_ne	jmp	#LR__0772
08250     21 22 06 F6 | 	mov	local03, #33
08254     0F 27 02 F6 | 	mov	local05, local01
08258     10 29 02 F6 | 	mov	local06, local02
0825c     11 2B 02 F6 | 	mov	local07, local03
08260     4A 00 00 FF 
08264     7C E4 05 F1 | 	add	objptr, ##38012
08268     F2 2C 02 FB | 	rdlong	local08, objptr
0826c     16 2F 02 F6 | 	mov	local09, local08
08270     01 2E 66 F0 | 	shl	local09, #1
08274     16 2F 02 F1 | 	add	local09, local08
08278     02 2E 66 F0 | 	shl	local09, #2
0827c     03 00 00 FF 
08280     00 E4 85 F1 | 	sub	objptr, ##1536
08284     F2 2E 02 F1 | 	add	local09, objptr
08288     17 27 62 FC | 	wrlong	local05, local09
0828c     03 00 00 FF 
08290     00 E4 05 F1 | 	add	objptr, ##1536
08294     F2 32 02 FB | 	rdlong	local11, objptr
08298     19 31 02 F6 | 	mov	local10, local11
0829c     01 30 66 F0 | 	shl	local10, #1
082a0     19 31 02 F1 | 	add	local10, local11
082a4     02 30 66 F0 | 	shl	local10, #2
082a8     03 00 00 FF 
082ac     00 E4 85 F1 | 	sub	objptr, ##1536
082b0     F2 30 02 F1 | 	add	local10, objptr
082b4     04 30 06 F1 | 	add	local10, #4
082b8     18 29 62 FC | 	wrlong	local06, local10
082bc     03 00 00 FF 
082c0     00 E4 05 F1 | 	add	objptr, ##1536
082c4     F2 26 02 FB | 	rdlong	local05, objptr
082c8     13 33 02 F6 | 	mov	local11, local05
082cc     01 32 66 F0 | 	shl	local11, #1
082d0     13 33 02 F1 | 	add	local11, local05
082d4     02 32 66 F0 | 	shl	local11, #2
082d8     03 00 00 FF 
082dc     00 E4 85 F1 | 	sub	objptr, ##1536
082e0     F2 32 02 F1 | 	add	local11, objptr
082e4     08 32 06 F1 | 	add	local11, #8
082e8     19 2B 62 FC | 	wrlong	local07, local11
082ec     03 00 00 FF 
082f0     00 E4 05 F1 | 	add	objptr, ##1536
082f4     F2 26 02 FB | 	rdlong	local05, objptr
082f8     01 26 06 F1 | 	add	local05, #1
082fc     F2 26 62 FC | 	wrlong	local05, objptr
08300     44 22 06 F6 | 	mov	local03, #68
08304     0F 27 02 F6 | 	mov	local05, local01
08308     10 29 02 F6 | 	mov	local06, local02
0830c     11 2B 02 F6 | 	mov	local07, local03
08310     F2 2C 02 FB | 	rdlong	local08, objptr
08314     16 2F 02 F6 | 	mov	local09, local08
08318     01 2E 66 F0 | 	shl	local09, #1
0831c     16 2F 02 F1 | 	add	local09, local08
08320     02 2E 66 F0 | 	shl	local09, #2
08324     03 00 00 FF 
08328     00 E4 85 F1 | 	sub	objptr, ##1536
0832c     F2 2E 02 F1 | 	add	local09, objptr
08330     17 27 62 FC | 	wrlong	local05, local09
08334     03 00 00 FF 
08338     00 E4 05 F1 | 	add	objptr, ##1536
0833c     F2 32 02 FB | 	rdlong	local11, objptr
08340     19 31 02 F6 | 	mov	local10, local11
08344     01 30 66 F0 | 	shl	local10, #1
08348     19 31 02 F1 | 	add	local10, local11
0834c     02 30 66 F0 | 	shl	local10, #2
08350     03 00 00 FF 
08354     00 E4 85 F1 | 	sub	objptr, ##1536
08358     F2 30 02 F1 | 	add	local10, objptr
0835c     04 30 06 F1 | 	add	local10, #4
08360     18 29 62 FC | 	wrlong	local06, local10
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 30 02 FB | 	rdlong	local10, objptr
08370     18 33 02 F6 | 	mov	local11, local10
08374     01 32 66 F0 | 	shl	local11, #1
08378     18 33 02 F1 | 	add	local11, local10
0837c     02 32 66 F0 | 	shl	local11, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 32 02 F1 | 	add	local11, objptr
0838c     08 32 06 F1 | 	add	local11, #8
08390     19 2B 62 FC | 	wrlong	local07, local11
08394     03 00 00 FF 
08398     00 E4 05 F1 | 	add	objptr, ##1536
0839c     F2 26 02 FB | 	rdlong	local05, objptr
083a0     01 26 06 F1 | 	add	local05, #1
083a4     F2 26 62 FC | 	wrlong	local05, objptr
083a8     4A 00 00 FF 
083ac     7C E4 85 F1 | 	sub	objptr, ##38012
083b0                 | LR__0772
083b0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
083b0     37 00 00 FF 
083b4     44 E4 05 F1 | 	add	objptr, ##28228
083b8     F2 24 02 FB | 	rdlong	local04, objptr
083bc     03 24 66 F0 | 	shl	local04, #3
083c0     02 00 00 FF 
083c4     38 E4 85 F1 | 	sub	objptr, ##1080
083c8     F2 24 02 F1 | 	add	local04, objptr
083cc     04 24 06 F1 | 	add	local04, #4
083d0     12 2D 02 FB | 	rdlong	local08, local04
083d4     12 2C 0E F2 | 	cmp	local08, #18 wz
083d8     35 00 00 FF 
083dc     0C E4 85 F1 | 	sub	objptr, ##27148
083e0     60 01 90 5D |  if_ne	jmp	#LR__0773
083e4     22 22 06 F6 | 	mov	local03, #34
083e8     0F 27 02 F6 | 	mov	local05, local01
083ec     10 29 02 F6 | 	mov	local06, local02
083f0     11 2B 02 F6 | 	mov	local07, local03
083f4     4A 00 00 FF 
083f8     7C E4 05 F1 | 	add	objptr, ##38012
083fc     F2 2C 02 FB | 	rdlong	local08, objptr
08400     16 2F 02 F6 | 	mov	local09, local08
08404     01 2E 66 F0 | 	shl	local09, #1
08408     16 2F 02 F1 | 	add	local09, local08
0840c     02 2E 66 F0 | 	shl	local09, #2
08410     03 00 00 FF 
08414     00 E4 85 F1 | 	sub	objptr, ##1536
08418     F2 2E 02 F1 | 	add	local09, objptr
0841c     17 27 62 FC | 	wrlong	local05, local09
08420     03 00 00 FF 
08424     00 E4 05 F1 | 	add	objptr, ##1536
08428     F2 32 02 FB | 	rdlong	local11, objptr
0842c     19 31 02 F6 | 	mov	local10, local11
08430     01 30 66 F0 | 	shl	local10, #1
08434     19 31 02 F1 | 	add	local10, local11
08438     02 30 66 F0 | 	shl	local10, #2
0843c     03 00 00 FF 
08440     00 E4 85 F1 | 	sub	objptr, ##1536
08444     F2 30 02 F1 | 	add	local10, objptr
08448     04 30 06 F1 | 	add	local10, #4
0844c     18 29 62 FC | 	wrlong	local06, local10
08450     03 00 00 FF 
08454     00 E4 05 F1 | 	add	objptr, ##1536
08458     F2 26 02 FB | 	rdlong	local05, objptr
0845c     13 33 02 F6 | 	mov	local11, local05
08460     01 32 66 F0 | 	shl	local11, #1
08464     13 33 02 F1 | 	add	local11, local05
08468     02 32 66 F0 | 	shl	local11, #2
0846c     03 00 00 FF 
08470     00 E4 85 F1 | 	sub	objptr, ##1536
08474     F2 32 02 F1 | 	add	local11, objptr
08478     08 32 06 F1 | 	add	local11, #8
0847c     19 2B 62 FC | 	wrlong	local07, local11
08480     03 00 00 FF 
08484     00 E4 05 F1 | 	add	objptr, ##1536
08488     F2 26 02 FB | 	rdlong	local05, objptr
0848c     01 26 06 F1 | 	add	local05, #1
08490     F2 26 62 FC | 	wrlong	local05, objptr
08494     44 22 06 F6 | 	mov	local03, #68
08498     0F 27 02 F6 | 	mov	local05, local01
0849c     10 29 02 F6 | 	mov	local06, local02
084a0     11 2B 02 F6 | 	mov	local07, local03
084a4     F2 2C 02 FB | 	rdlong	local08, objptr
084a8     16 2F 02 F6 | 	mov	local09, local08
084ac     01 2E 66 F0 | 	shl	local09, #1
084b0     16 2F 02 F1 | 	add	local09, local08
084b4     02 2E 66 F0 | 	shl	local09, #2
084b8     03 00 00 FF 
084bc     00 E4 85 F1 | 	sub	objptr, ##1536
084c0     F2 2E 02 F1 | 	add	local09, objptr
084c4     17 27 62 FC | 	wrlong	local05, local09
084c8     03 00 00 FF 
084cc     00 E4 05 F1 | 	add	objptr, ##1536
084d0     F2 32 02 FB | 	rdlong	local11, objptr
084d4     19 31 02 F6 | 	mov	local10, local11
084d8     01 30 66 F0 | 	shl	local10, #1
084dc     19 31 02 F1 | 	add	local10, local11
084e0     02 30 66 F0 | 	shl	local10, #2
084e4     03 00 00 FF 
084e8     00 E4 85 F1 | 	sub	objptr, ##1536
084ec     F2 30 02 F1 | 	add	local10, objptr
084f0     04 30 06 F1 | 	add	local10, #4
084f4     18 29 62 FC | 	wrlong	local06, local10
084f8     03 00 00 FF 
084fc     00 E4 05 F1 | 	add	objptr, ##1536
08500     F2 30 02 FB | 	rdlong	local10, objptr
08504     18 33 02 F6 | 	mov	local11, local10
08508     01 32 66 F0 | 	shl	local11, #1
0850c     18 33 02 F1 | 	add	local11, local10
08510     02 32 66 F0 | 	shl	local11, #2
08514     03 00 00 FF 
08518     00 E4 85 F1 | 	sub	objptr, ##1536
0851c     F2 32 02 F1 | 	add	local11, objptr
08520     08 32 06 F1 | 	add	local11, #8
08524     19 2B 62 FC | 	wrlong	local07, local11
08528     03 00 00 FF 
0852c     00 E4 05 F1 | 	add	objptr, ##1536
08530     F2 26 02 FB | 	rdlong	local05, objptr
08534     01 26 06 F1 | 	add	local05, #1
08538     F2 26 62 FC | 	wrlong	local05, objptr
0853c     4A 00 00 FF 
08540     7C E4 85 F1 | 	sub	objptr, ##38012
08544                 | LR__0773
08544                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08544     37 00 00 FF 
08548     44 E4 05 F1 | 	add	objptr, ##28228
0854c     F2 24 02 FB | 	rdlong	local04, objptr
08550     03 24 66 F0 | 	shl	local04, #3
08554     02 00 00 FF 
08558     38 E4 85 F1 | 	sub	objptr, ##1080
0855c     F2 24 02 F1 | 	add	local04, objptr
08560     04 24 06 F1 | 	add	local04, #4
08564     12 2D 02 FB | 	rdlong	local08, local04
08568     FE 2D 0E F2 | 	cmp	local08, #510 wz
0856c     35 00 00 FF 
08570     0C E4 85 F1 | 	sub	objptr, ##27148
08574     B8 00 90 5D |  if_ne	jmp	#LR__0774
08578     44 22 06 F6 | 	mov	local03, #68
0857c     0F 27 02 F6 | 	mov	local05, local01
08580     10 29 02 F6 | 	mov	local06, local02
08584     11 2B 02 F6 | 	mov	local07, local03
08588     4A 00 00 FF 
0858c     7C E4 05 F1 | 	add	objptr, ##38012
08590     F2 2C 02 FB | 	rdlong	local08, objptr
08594     16 2F 02 F6 | 	mov	local09, local08
08598     01 2E 66 F0 | 	shl	local09, #1
0859c     16 2F 02 F1 | 	add	local09, local08
085a0     02 2E 66 F0 | 	shl	local09, #2
085a4     03 00 00 FF 
085a8     00 E4 85 F1 | 	sub	objptr, ##1536
085ac     F2 2E 02 F1 | 	add	local09, objptr
085b0     17 27 62 FC | 	wrlong	local05, local09
085b4     03 00 00 FF 
085b8     00 E4 05 F1 | 	add	objptr, ##1536
085bc     F2 32 02 FB | 	rdlong	local11, objptr
085c0     19 31 02 F6 | 	mov	local10, local11
085c4     01 30 66 F0 | 	shl	local10, #1
085c8     19 31 02 F1 | 	add	local10, local11
085cc     02 30 66 F0 | 	shl	local10, #2
085d0     03 00 00 FF 
085d4     00 E4 85 F1 | 	sub	objptr, ##1536
085d8     F2 30 02 F1 | 	add	local10, objptr
085dc     04 30 06 F1 | 	add	local10, #4
085e0     18 29 62 FC | 	wrlong	local06, local10
085e4     03 00 00 FF 
085e8     00 E4 05 F1 | 	add	objptr, ##1536
085ec     F2 30 02 FB | 	rdlong	local10, objptr
085f0     18 33 02 F6 | 	mov	local11, local10
085f4     01 32 66 F0 | 	shl	local11, #1
085f8     18 33 02 F1 | 	add	local11, local10
085fc     02 32 66 F0 | 	shl	local11, #2
08600     03 00 00 FF 
08604     00 E4 85 F1 | 	sub	objptr, ##1536
08608     F2 32 02 F1 | 	add	local11, objptr
0860c     08 32 06 F1 | 	add	local11, #8
08610     19 2B 62 FC | 	wrlong	local07, local11
08614     03 00 00 FF 
08618     00 E4 05 F1 | 	add	objptr, ##1536
0861c     F2 26 02 FB | 	rdlong	local05, objptr
08620     01 26 06 F1 | 	add	local05, #1
08624     F2 26 62 FC | 	wrlong	local05, objptr
08628     4A 00 00 FF 
0862c     7C E4 85 F1 | 	sub	objptr, ##38012
08630                 | LR__0774
08630                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
08630     37 00 00 FF 
08634     44 E4 05 F1 | 	add	objptr, ##28228
08638     F2 24 02 FB | 	rdlong	local04, objptr
0863c     03 24 66 F0 | 	shl	local04, #3
08640     02 00 00 FF 
08644     38 E4 85 F1 | 	sub	objptr, ##1080
08648     F2 24 02 F1 | 	add	local04, objptr
0864c     04 24 06 F1 | 	add	local04, #4
08650     12 2D 02 FB | 	rdlong	local08, local04
08654     11 2C 0E F2 | 	cmp	local08, #17 wz
08658     35 00 00 FF 
0865c     0C E4 85 F1 | 	sub	objptr, ##27148
08660     6C 00 90 AD |  if_e	jmp	#LR__0775
08664     37 00 00 FF 
08668     44 E4 05 F1 | 	add	objptr, ##28228
0866c     F2 2C 02 FB | 	rdlong	local08, objptr
08670     03 2C 66 F0 | 	shl	local08, #3
08674     02 00 00 FF 
08678     38 E4 85 F1 | 	sub	objptr, ##1080
0867c     F2 2C 02 F1 | 	add	local08, objptr
08680     04 2C 06 F1 | 	add	local08, #4
08684     16 2D 02 FB | 	rdlong	local08, local08
08688     12 2C 0E F2 | 	cmp	local08, #18 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     38 00 90 AD |  if_e	jmp	#LR__0775
08698     37 00 00 FF 
0869c     44 E4 05 F1 | 	add	objptr, ##28228
086a0     F2 32 02 FB | 	rdlong	local11, objptr
086a4     03 32 66 F0 | 	shl	local11, #3
086a8     02 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##1080
086b0     F2 32 02 F1 | 	add	local11, objptr
086b4     04 32 06 F1 | 	add	local11, #4
086b8     19 33 02 FB | 	rdlong	local11, local11
086bc     FE 33 0E F2 | 	cmp	local11, #510 wz
086c0     35 00 00 FF 
086c4     0C E4 85 F1 | 	sub	objptr, ##27148
086c8     16 FA 05 56 |  if_ne	mov	result1, #22
086cc     68 00 90 5D |  if_ne	jmp	#LR__0777
086d0                 | LR__0775
086d0     37 00 00 FF 
086d4     44 E4 05 F1 | 	add	objptr, ##28228
086d8     F2 24 02 FB | 	rdlong	local04, objptr
086dc     01 24 06 F1 | 	add	local04, #1
086e0     F2 24 62 FC | 	wrlong	local04, objptr
086e4     03 24 66 F0 | 	shl	local04, #3
086e8     02 00 00 FF 
086ec     38 E4 85 F1 | 	sub	objptr, ##1080
086f0     F2 24 02 F1 | 	add	local04, objptr
086f4     04 24 06 F1 | 	add	local04, #4
086f8     12 2D 02 FB | 	rdlong	local08, local04
086fc     FE 2D 0E F2 | 	cmp	local08, #510 wz
08700     35 00 00 FF 
08704     0C E4 85 F1 | 	sub	objptr, ##27148
08708     28 00 90 AD |  if_e	jmp	#LR__0776
0870c     37 00 00 FF 
08710     44 E4 05 F1 | 	add	objptr, ##28228
08714     F2 32 02 FB | 	rdlong	local11, objptr
08718     0E 00 00 FF 
0871c     1C E4 05 F1 | 	add	objptr, ##7196
08720     F2 30 02 FB | 	rdlong	local10, objptr
08724     45 00 00 FF 
08728     60 E4 85 F1 | 	sub	objptr, ##35424
0872c     18 33 52 F2 | 	cmps	local11, local10 wc
08730     E4 FA 9F CD |  if_b	jmp	#LR__0771
08734                 | LR__0776
08734                 | ' return 0
08734     00 FA 05 F6 | 	mov	result1, #0
08738                 | LR__0777
08738     A7 F0 03 F6 | 	mov	ptra, fp
0873c     B2 00 A0 FD | 	call	#popregs_
08740                 | _compile_print_ret
08740     2D 00 64 FD | 	ret
08744                 | 
08744                 | ' 
08744                 | ' function compile_if() as ulong  
08744                 | _compile_if
08744     05 4A 05 F6 | 	mov	COUNT_, #5
08748     A8 00 A0 FD | 	call	#pushregs_
0874c                 | _compile_if_enter
0874c     08 1B B0 FD | 	call	#_expr
08750                 | ' expr()
08750                 | ' return 0
08750     37 00 00 FF 
08754     44 E4 05 F1 | 	add	objptr, ##28228
08758     F2 FA 01 FB | 	rdlong	result1, objptr
0875c     01 FA 05 F1 | 	add	result1, #1
08760     F2 FA 61 FC | 	wrlong	result1, objptr
08764     58 22 06 F6 | 	mov	local03, #88
08768     0F 25 02 F6 | 	mov	local04, local01
0876c     10 27 02 F6 | 	mov	local05, local02
08770     11 1F 02 F6 | 	mov	local01, local03
08774     13 00 00 FF 
08778     38 E4 05 F1 | 	add	objptr, ##9784
0877c     F2 12 02 FB | 	rdlong	arg01, objptr
08780     09 FB 01 F6 | 	mov	result1, arg01
08784     01 FA 65 F0 | 	shl	result1, #1
08788     09 FB 01 F1 | 	add	result1, arg01
0878c     02 FA 65 F0 | 	shl	result1, #2
08790     03 00 00 FF 
08794     00 E4 85 F1 | 	sub	objptr, ##1536
08798     F2 FA 01 F1 | 	add	result1, objptr
0879c     FD 24 62 FC | 	wrlong	local04, result1
087a0     03 00 00 FF 
087a4     00 E4 05 F1 | 	add	objptr, ##1536
087a8     F2 12 02 FB | 	rdlong	arg01, objptr
087ac     09 25 02 F6 | 	mov	local04, arg01
087b0     01 24 66 F0 | 	shl	local04, #1
087b4     09 25 02 F1 | 	add	local04, arg01
087b8     02 24 66 F0 | 	shl	local04, #2
087bc     03 00 00 FF 
087c0     00 E4 85 F1 | 	sub	objptr, ##1536
087c4     F2 24 02 F1 | 	add	local04, objptr
087c8     04 24 06 F1 | 	add	local04, #4
087cc     12 27 62 FC | 	wrlong	local05, local04
087d0     03 00 00 FF 
087d4     00 E4 05 F1 | 	add	objptr, ##1536
087d8     F2 24 02 FB | 	rdlong	local04, objptr
087dc     12 27 02 F6 | 	mov	local05, local04
087e0     01 26 66 F0 | 	shl	local05, #1
087e4     12 27 02 F1 | 	add	local05, local04
087e8     02 26 66 F0 | 	shl	local05, #2
087ec     03 00 00 FF 
087f0     00 E4 85 F1 | 	sub	objptr, ##1536
087f4     F2 26 02 F1 | 	add	local05, objptr
087f8     08 26 06 F1 | 	add	local05, #8
087fc     13 1F 62 FC | 	wrlong	local01, local05
08800     03 00 00 FF 
08804     00 E4 05 F1 | 	add	objptr, ##1536
08808     F2 24 02 FB | 	rdlong	local04, objptr
0880c     01 24 06 F1 | 	add	local04, #1
08810     F2 24 62 FC | 	wrlong	local04, objptr
08814                 | ' 
08814                 | ' 'print "In compile_if"
08814                 | ' compile_fun_1p()
08814                 | ' cmd=lparts(ct).token : ct+=1
08814                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
08814                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08814                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08814     13 00 00 FF 
08818     38 E4 85 F1 | 	sub	objptr, ##9784
0881c     F2 26 02 FB | 	rdlong	local05, objptr
08820     01 26 06 F1 | 	add	local05, #1
08824     03 26 66 F0 | 	shl	local05, #3
08828     02 00 00 FF 
0882c     38 E4 85 F1 | 	sub	objptr, ##1080
08830     F2 26 02 F1 | 	add	local05, objptr
08834     13 13 02 FB | 	rdlong	arg01, local05
08838     35 00 00 FF 
0883c     0C E4 85 F1 | 	sub	objptr, ##27148
08840                 | ' 
08840                 | ' select case s
08840     80 01 00 FF 
08844     52 15 06 F6 | 	mov	arg02, ##@LR__5163
08848     04 7F B1 FD | 	call	#__system___string_cmp
0884c     00 FA 0D F2 | 	cmp	result1, #0 wz
08850     1B FA 05 A6 |  if_e	mov	result1, #27
08854     00 FA 05 56 |  if_ne	mov	result1, #0
08858     00 FA 0D F2 | 	cmp	result1, #0 wz
0885c     0C 00 90 AD |  if_e	jmp	#LR__0780
08860     05 12 06 F6 | 	mov	arg01, #5
08864     A4 ED BF FD | 	call	#_compile_immediate_assign
08868     08 00 90 FD | 	jmp	#LR__0781
0886c                 | LR__0780
0886c     05 12 06 F6 | 	mov	arg01, #5
08870     D4 E2 BF FD | 	call	#_compile_immediate
08874                 | LR__0781
08874                 | ' 
08874                 | ' 
08874                 | ' return 0
08874     00 FA 05 F6 | 	mov	result1, #0
08878     A7 F0 03 F6 | 	mov	ptra, fp
0887c     B2 00 A0 FD | 	call	#popregs_
08880                 | _compile_if_ret
08880     2D 00 64 FD | 	ret
08884                 | 
08884                 | ' 
08884                 | ' function compile_else() as ulong  
08884                 | _compile_else
08884     05 4A 05 F6 | 	mov	COUNT_, #5
08888     A8 00 A0 FD | 	call	#pushregs_
0888c                 | _compile_else_enter
0888c     5A 22 06 F6 | 	mov	local03, #90
08890     0F 25 02 F6 | 	mov	local04, local01
08894     10 27 02 F6 | 	mov	local05, local02
08898     11 1F 02 F6 | 	mov	local01, local03
0889c     4A 00 00 FF 
088a0     7C E4 05 F1 | 	add	objptr, ##38012
088a4     F2 12 02 FB | 	rdlong	arg01, objptr
088a8     09 FB 01 F6 | 	mov	result1, arg01
088ac     01 FA 65 F0 | 	shl	result1, #1
088b0     09 FB 01 F1 | 	add	result1, arg01
088b4     02 FA 65 F0 | 	shl	result1, #2
088b8     03 00 00 FF 
088bc     00 E4 85 F1 | 	sub	objptr, ##1536
088c0     F2 FA 01 F1 | 	add	result1, objptr
088c4     FD 24 62 FC | 	wrlong	local04, result1
088c8     03 00 00 FF 
088cc     00 E4 05 F1 | 	add	objptr, ##1536
088d0     F2 FA 01 FB | 	rdlong	result1, objptr
088d4     FD 24 02 F6 | 	mov	local04, result1
088d8     01 24 66 F0 | 	shl	local04, #1
088dc     FD 24 02 F1 | 	add	local04, result1
088e0     02 24 66 F0 | 	shl	local04, #2
088e4     03 00 00 FF 
088e8     00 E4 85 F1 | 	sub	objptr, ##1536
088ec     F2 24 02 F1 | 	add	local04, objptr
088f0     04 24 06 F1 | 	add	local04, #4
088f4     12 27 62 FC | 	wrlong	local05, local04
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 24 02 FB | 	rdlong	local04, objptr
08904     12 27 02 F6 | 	mov	local05, local04
08908     01 26 66 F0 | 	shl	local05, #1
0890c     12 27 02 F1 | 	add	local05, local04
08910     02 26 66 F0 | 	shl	local05, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 26 02 F1 | 	add	local05, objptr
08920     08 26 06 F1 | 	add	local05, #8
08924     13 1F 62 FC | 	wrlong	local01, local05
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 24 02 FB | 	rdlong	local04, objptr
08934     01 24 06 F1 | 	add	local04, #1
08938     F2 24 62 FC | 	wrlong	local04, objptr
0893c                 | ' 
0893c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0893c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0893c     13 00 00 FF 
08940     38 E4 85 F1 | 	sub	objptr, ##9784
08944     F2 26 02 FB | 	rdlong	local05, objptr
08948     01 26 06 F1 | 	add	local05, #1
0894c     03 26 66 F0 | 	shl	local05, #3
08950     02 00 00 FF 
08954     38 E4 85 F1 | 	sub	objptr, ##1080
08958     F2 26 02 F1 | 	add	local05, objptr
0895c     13 13 02 FB | 	rdlong	arg01, local05
08960     35 00 00 FF 
08964     0C E4 85 F1 | 	sub	objptr, ##27148
08968                 | ' 
08968                 | ' select case s
08968     80 01 00 FF 
0896c     52 15 06 F6 | 	mov	arg02, ##@LR__5163
08970     DC 7D B1 FD | 	call	#__system___string_cmp
08974     00 FA 0D F2 | 	cmp	result1, #0 wz
08978     1B FA 05 A6 |  if_e	mov	result1, #27
0897c     00 FA 05 56 |  if_ne	mov	result1, #0
08980     00 FA 0D F2 | 	cmp	result1, #0 wz
08984     0C 00 90 AD |  if_e	jmp	#LR__0790
08988     05 12 06 F6 | 	mov	arg01, #5
0898c     7C EC BF FD | 	call	#_compile_immediate_assign
08990     08 00 90 FD | 	jmp	#LR__0791
08994                 | LR__0790
08994     05 12 06 F6 | 	mov	arg01, #5
08998     AC E1 BF FD | 	call	#_compile_immediate
0899c                 | LR__0791
0899c                 | ' 
0899c                 | ' 
0899c                 | ' return 0
0899c     00 FA 05 F6 | 	mov	result1, #0
089a0     A7 F0 03 F6 | 	mov	ptra, fp
089a4     B2 00 A0 FD | 	call	#popregs_
089a8                 | _compile_else_ret
089a8     2D 00 64 FD | 	ret
089ac                 | 
089ac                 | ' 
089ac                 | ' 
089ac                 | ' function compile_dim() as ulong  
089ac                 | _compile_dim
089ac     11 4A 05 F6 | 	mov	COUNT_, #17
089b0     A8 00 A0 FD | 	call	#pushregs_
089b4     01 1E 06 F6 | 	mov	local01, #1
089b8     01 20 06 F6 | 	mov	local02, #1
089bc     01 22 06 F6 | 	mov	local03, #1
089c0                 | ' 
089c0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
089c0                 | ' 
089c0                 | ' if isname(lparts(ct).part$) then 
089c0     37 00 00 FF 
089c4     44 E4 05 F1 | 	add	objptr, ##28228
089c8     F2 18 02 FB | 	rdlong	arg04, objptr
089cc     03 18 66 F0 | 	shl	arg04, #3
089d0     02 00 00 FF 
089d4     38 E4 85 F1 | 	sub	objptr, ##1080
089d8     F2 18 02 F1 | 	add	arg04, objptr
089dc     0C 13 02 FB | 	rdlong	arg01, arg04
089e0     35 00 00 FF 
089e4     0C E4 85 F1 | 	sub	objptr, ##27148
089e8     B4 D0 BF FD | 	call	#_isname
089ec     00 FA 0D F2 | 	cmp	result1, #0 wz
089f0     AC 05 90 AD |  if_e	jmp	#LR__0824
089f4     37 00 00 FF 
089f8     44 E4 05 F1 | 	add	objptr, ##28228
089fc     F2 24 02 FB | 	rdlong	local04, objptr
08a00     03 24 66 F0 | 	shl	local04, #3
08a04     02 00 00 FF 
08a08     38 E4 85 F1 | 	sub	objptr, ##1080
08a0c     F2 24 02 F1 | 	add	local04, objptr
08a10     12 27 02 FB | 	rdlong	local05, local04
08a14     01 28 66 F6 | 	neg	local06, #1
08a18                 | '   varname2$=lparts(ct).part$ 
08a18                 | '   j=-1
08a18                 | '   if varnum>0 then
08a18     04 E4 85 F1 | 	sub	objptr, #4
08a1c     F2 2A 02 FB | 	rdlong	local07, objptr
08a20     35 00 00 FF 
08a24     08 E4 85 F1 | 	sub	objptr, ##27144
08a28     01 2A 56 F2 | 	cmps	local07, #1 wc
08a2c     58 00 90 CD |  if_b	jmp	#LR__0802
08a30                 | '  '   print "in dim, varnum=";varnum
08a30                 | '     for i=0 to varnum-1
08a30     00 2C 06 F6 | 	mov	local08, #0
08a34     35 00 00 FF 
08a38     08 E4 05 F1 | 	add	objptr, ##27144
08a3c     F2 2E 02 FB | 	rdlong	local09, objptr
08a40     35 00 00 FF 
08a44     08 E4 85 F1 | 	sub	objptr, ##27144
08a48                 | LR__0800
08a48     17 2D 52 F2 | 	cmps	local08, local09 wc
08a4c     38 00 90 3D |  if_ae	jmp	#LR__0801
08a50                 | '       if variables(i).name=varname2$ then j=i : exit
08a50     16 25 02 F6 | 	mov	local04, local08
08a54     04 24 66 F0 | 	shl	local04, #4
08a58     14 00 00 FF 
08a5c     F8 E5 05 F1 | 	add	objptr, ##10744
08a60     F2 24 02 F1 | 	add	local04, objptr
08a64     12 13 02 FB | 	rdlong	arg01, local04
08a68     13 15 02 F6 | 	mov	arg02, local05
08a6c     14 00 00 FF 
08a70     F8 E5 85 F1 | 	sub	objptr, ##10744
08a74     D8 7C B1 FD | 	call	#__system___string_cmp
08a78     00 FA 0D F2 | 	cmp	result1, #0 wz
08a7c     16 29 02 A6 |  if_e	mov	local06, local08
08a80     01 2C 06 51 |  if_ne	add	local08, #1
08a84     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08a88                 | LR__0801
08a88                 | LR__0802
08a88                 | ' '  if j<>-1 then printerror (42) : return 42
08a88                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08a88     FF FF 7F FF 
08a8c     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08a90     35 00 00 AF 
08a94     08 E4 05 A1 |  if_e	add	objptr, ##27144
08a98     F2 28 02 AB |  if_e	rdlong	local06, objptr
08a9c     35 00 00 AF 
08aa0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08aa4     78 00 90 AD |  if_e	jmp	#LR__0803
08aa8     00 12 06 F6 | 	mov	arg01, #0
08aac     B8 D6 B1 FD | 	call	#__system___getiolock_0540
08ab0     FD 12 02 F6 | 	mov	arg01, result1
08ab4     70 7C B1 FD | 	call	#__system___lockmem
08ab8     82 01 00 FF 
08abc     51 15 06 F6 | 	mov	arg02, ##@LR__5387
08ac0     00 12 06 F6 | 	mov	arg01, #0
08ac4     00 16 06 F6 | 	mov	arg03, #0
08ac8     50 89 B1 FD | 	call	#__system___basic_print_string
08acc     51 00 00 FF 
08ad0     C0 E5 05 F1 | 	add	objptr, ##41920
08ad4     F2 14 02 FB | 	rdlong	arg02, objptr
08ad8     51 00 00 FF 
08adc     C0 E5 85 F1 | 	sub	objptr, ##41920
08ae0     00 12 06 F6 | 	mov	arg01, #0
08ae4     00 16 06 F6 | 	mov	arg03, #0
08ae8     0A 18 06 F6 | 	mov	arg04, #10
08aec     B0 89 B1 FD | 	call	#__system___basic_print_unsigned
08af0     82 01 00 FF 
08af4     5F 15 06 F6 | 	mov	arg02, ##@LR__5388
08af8     00 12 06 F6 | 	mov	arg01, #0
08afc     00 16 06 F6 | 	mov	arg03, #0
08b00     18 89 B1 FD | 	call	#__system___basic_print_string
08b04     00 12 06 F6 | 	mov	arg01, #0
08b08     0A 14 06 F6 | 	mov	arg02, #10
08b0c     00 16 06 F6 | 	mov	arg03, #0
08b10     B0 88 B1 FD | 	call	#__system___basic_print_char
08b14     00 12 06 F6 | 	mov	arg01, #0
08b18     4C D6 B1 FD | 	call	#__system___getiolock_0540
08b1c     FD 00 68 FC | 	wrlong	#0, result1
08b20                 | LR__0803
08b20                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
08b20     37 00 00 FF 
08b24     44 E4 05 F1 | 	add	objptr, ##28228
08b28     F2 18 02 FB | 	rdlong	arg04, objptr
08b2c     01 18 06 F1 | 	add	arg04, #1
08b30     03 18 66 F0 | 	shl	arg04, #3
08b34     02 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##1080
08b3c     F2 18 02 F1 | 	add	arg04, objptr
08b40     0C 13 02 FB | 	rdlong	arg01, arg04
08b44     82 01 00 FF 
08b48     80 15 06 F6 | 	mov	arg02, ##@LR__5389
08b4c     35 00 00 FF 
08b50     0C E4 85 F1 | 	sub	objptr, ##27148
08b54     F8 7B B1 FD | 	call	#__system___string_cmp
08b58     00 FA 0D F2 | 	cmp	result1, #0 wz
08b5c     50 00 90 AD |  if_e	jmp	#LR__0804
08b60     37 00 00 FF 
08b64     44 E4 05 F1 | 	add	objptr, ##28228
08b68     F2 2E 02 FB | 	rdlong	local09, objptr
08b6c     01 2E 06 F1 | 	add	local09, #1
08b70     03 2E 66 F0 | 	shl	local09, #3
08b74     02 00 00 FF 
08b78     38 E4 85 F1 | 	sub	objptr, ##1080
08b7c     F2 2E 02 F1 | 	add	local09, objptr
08b80     17 13 02 FB | 	rdlong	arg01, local09
08b84     82 01 00 FF 
08b88     82 15 06 F6 | 	mov	arg02, ##@LR__5390
08b8c     35 00 00 FF 
08b90     0C E4 85 F1 | 	sub	objptr, ##27148
08b94     B8 7B B1 FD | 	call	#__system___string_cmp
08b98     00 FA 0D F2 | 	cmp	result1, #0 wz
08b9c     10 00 90 AD |  if_e	jmp	#LR__0804
08ba0     2B 12 06 F6 | 	mov	arg01, #43
08ba4     1C 48 B1 FD | 	call	#_printerror
08ba8     2B FA 05 F6 | 	mov	result1, #43
08bac     00 05 90 FD | 	jmp	#LR__0826
08bb0                 | LR__0804
08bb0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08bb0     37 00 00 FF 
08bb4     44 E4 05 F1 | 	add	objptr, ##28228
08bb8     F2 14 02 FB | 	rdlong	arg02, objptr
08bbc     01 14 06 F1 | 	add	arg02, #1
08bc0     03 14 66 F0 | 	shl	arg02, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 14 02 F1 | 	add	arg02, objptr
08bd0     0A 13 02 FB | 	rdlong	arg01, arg02
08bd4     82 01 00 FF 
08bd8     85 15 06 F6 | 	mov	arg02, ##@LR__5391
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     68 7B B1 FD | 	call	#__system___string_cmp
08be8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bec     37 00 00 AF 
08bf0     44 E4 05 A1 |  if_e	add	objptr, ##28228
08bf4     F2 30 02 AB |  if_e	rdlong	local10, objptr
08bf8     37 00 00 AF 
08bfc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08c00     01 30 06 A1 |  if_e	add	local10, #1
08c04     7C 01 90 AD |  if_e	jmp	#LR__0810
08c08     37 00 00 FF 
08c0c     44 E4 05 F1 | 	add	objptr, ##28228
08c10     F2 30 02 FB | 	rdlong	local10, objptr
08c14     37 00 00 FF 
08c18     44 E4 85 F1 | 	sub	objptr, ##28228
08c1c     02 30 06 F1 | 	add	local10, #2
08c20     00 32 06 F6 | 	mov	local11, #0
08c24                 | '   l=ct+2 : m=0 : do
08c24                 | LR__0805
08c24                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
08c24                 | '     if isdec(lparts(l).part$) then 
08c24     18 25 02 F6 | 	mov	local04, local10
08c28     03 24 66 F0 | 	shl	local04, #3
08c2c     35 00 00 FF 
08c30     0C E4 05 F1 | 	add	objptr, ##27148
08c34     F2 24 02 F1 | 	add	local04, objptr
08c38     12 13 02 FB | 	rdlong	arg01, local04
08c3c     35 00 00 FF 
08c40     0C E4 85 F1 | 	sub	objptr, ##27148
08c44     40 D6 BF FD | 	call	#_isdec
08c48     00 FA 0D F2 | 	cmp	result1, #0 wz
08c4c     44 00 90 AD |  if_e	jmp	#LR__0806
08c50     19 35 02 F6 | 	mov	local12, local11
08c54     0F 35 06 F1 | 	add	local12, #local01
08c58     18 2F 02 F6 | 	mov	local09, local10
08c5c     03 2E 66 F0 | 	shl	local09, #3
08c60     35 00 00 FF 
08c64     0C E4 05 F1 | 	add	objptr, ##27148
08c68     F2 2E 02 F1 | 	add	local09, objptr
08c6c     17 13 02 FB | 	rdlong	arg01, local09
08c70     00 14 06 F6 | 	mov	arg02, #0
08c74     35 00 00 FF 
08c78     0C E4 85 F1 | 	sub	objptr, ##27148
08c7c     D4 AC B1 FD | 	call	#__system____builtin_atoi
08c80     FD 36 02 F6 | 	mov	local13, result1
08c84                 | 	'.live	local13
08c84                 | 	'.live	local12
08c84     00 34 8E F9 | 	altd	local12, #0
08c88     1B 35 02 F6 | 	mov	local12, local13
08c8c     01 32 06 F1 | 	add	local11, #1
08c90     10 00 90 FD | 	jmp	#LR__0807
08c94                 | LR__0806
08c94     11 12 06 F6 | 	mov	arg01, #17
08c98     28 47 B1 FD | 	call	#_printerror
08c9c                 | '       printerror (17)  : return(17)
08c9c     11 FA 05 F6 | 	mov	result1, #17
08ca0     0C 04 90 FD | 	jmp	#LR__0826
08ca4                 | LR__0807
08ca4                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
08ca4     18 25 02 F6 | 	mov	local04, local10
08ca8     01 24 06 F1 | 	add	local04, #1
08cac     03 24 66 F0 | 	shl	local04, #3
08cb0     35 00 00 FF 
08cb4     0C E4 05 F1 | 	add	objptr, ##27148
08cb8     F2 24 02 F1 | 	add	local04, objptr
08cbc     12 13 02 FB | 	rdlong	arg01, local04
08cc0     82 01 00 FF 
08cc4     88 15 06 F6 | 	mov	arg02, ##@LR__5392
08cc8     35 00 00 FF 
08ccc     0C E4 85 F1 | 	sub	objptr, ##27148
08cd0     7C 7A B1 FD | 	call	#__system___string_cmp
08cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
08cd8     48 00 90 AD |  if_e	jmp	#LR__0808
08cdc     18 37 02 F6 | 	mov	local13, local10
08ce0     01 36 06 F1 | 	add	local13, #1
08ce4     03 36 66 F0 | 	shl	local13, #3
08ce8     35 00 00 FF 
08cec     0C E4 05 F1 | 	add	objptr, ##27148
08cf0     F2 36 02 F1 | 	add	local13, objptr
08cf4     1B 13 02 FB | 	rdlong	arg01, local13
08cf8     82 01 00 FF 
08cfc     8A 15 06 F6 | 	mov	arg02, ##@LR__5393
08d00     35 00 00 FF 
08d04     0C E4 85 F1 | 	sub	objptr, ##27148
08d08     44 7A B1 FD | 	call	#__system___string_cmp
08d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
08d10     10 00 90 AD |  if_e	jmp	#LR__0808
08d14     2C 12 06 F6 | 	mov	arg01, #44
08d18     A8 46 B1 FD | 	call	#_printerror
08d1c     2C FA 05 F6 | 	mov	result1, #44
08d20     8C 03 90 FD | 	jmp	#LR__0826
08d24                 | LR__0808
08d24     02 30 06 F1 | 	add	local10, #2
08d28     18 25 02 F6 | 	mov	local04, local10
08d2c     01 24 86 F1 | 	sub	local04, #1
08d30     03 24 66 F0 | 	shl	local04, #3
08d34     35 00 00 FF 
08d38     0C E4 05 F1 | 	add	objptr, ##27148
08d3c     F2 24 02 F1 | 	add	local04, objptr
08d40     12 13 02 FB | 	rdlong	arg01, local04
08d44     82 01 00 FF 
08d48     8C 15 06 F6 | 	mov	arg02, ##@LR__5394
08d4c     35 00 00 FF 
08d50     0C E4 85 F1 | 	sub	objptr, ##27148
08d54     F8 79 B1 FD | 	call	#__system___string_cmp
08d58     00 FA 0D F2 | 	cmp	result1, #0 wz
08d5c     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08d60     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08d64                 | '   if m>3 then printerror(45): return(45)
08d64     04 32 56 F2 | 	cmps	local11, #4 wc
08d68     10 00 90 CD |  if_b	jmp	#LR__0809
08d6c     2D 12 06 F6 | 	mov	arg01, #45
08d70     50 46 B1 FD | 	call	#_printerror
08d74     2D FA 05 F6 | 	mov	result1, #45
08d78     34 03 90 FD | 	jmp	#LR__0826
08d7c                 | LR__0809
08d7c     00 39 06 F6 | 	mov	local14, #256
08d80     0C 3A 06 F6 | 	mov	local15, #12
08d84                 | LR__0810
08d84                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
08d84                 | '   arraytype=array_no_type : esize=12
08d84                 | ' 1350 
08d84                 | '   if lparts(l).part$="as" then
08d84     18 25 02 F6 | 	mov	local04, local10
08d88     03 24 66 F0 | 	shl	local04, #3
08d8c     35 00 00 FF 
08d90     0C E4 05 F1 | 	add	objptr, ##27148
08d94     F2 24 02 F1 | 	add	local04, objptr
08d98     12 13 02 FB | 	rdlong	arg01, local04
08d9c     82 01 00 FF 
08da0     8E 15 06 F6 | 	mov	arg02, ##@LR__5395
08da4     35 00 00 FF 
08da8     0C E4 85 F1 | 	sub	objptr, ##27148
08dac     A0 79 B1 FD | 	call	#__system___string_cmp
08db0     00 FA 0D F2 | 	cmp	result1, #0 wz
08db4     F8 01 90 5D |  if_ne	jmp	#LR__0825
08db8                 | '     select case lparts(l+1).part$
08db8     18 35 02 F6 | 	mov	local12, local10
08dbc     01 34 06 F1 | 	add	local12, #1
08dc0     03 34 66 F0 | 	shl	local12, #3
08dc4     35 00 00 FF 
08dc8     0C E4 05 F1 | 	add	objptr, ##27148
08dcc     F2 34 02 F1 | 	add	local12, objptr
08dd0     1A 3D 02 FB | 	rdlong	local16, local12
08dd4     82 01 00 FF 
08dd8     91 15 06 F6 | 	mov	arg02, ##@LR__5396
08ddc     1E 13 02 F6 | 	mov	arg01, local16
08de0     35 00 00 FF 
08de4     0C E4 85 F1 | 	sub	objptr, ##27148
08de8     64 79 B1 FD | 	call	#__system___string_cmp
08dec     00 FA 0D F2 | 	cmp	result1, #0 wz
08df0     0C 01 90 AD |  if_e	jmp	#LR__0811
08df4     82 01 00 FF 
08df8     96 15 06 F6 | 	mov	arg02, ##@LR__5397
08dfc     1E 13 02 F6 | 	mov	arg01, local16
08e00     4C 79 B1 FD | 	call	#__system___string_cmp
08e04     00 FA 0D F2 | 	cmp	result1, #0 wz
08e08     00 01 90 AD |  if_e	jmp	#LR__0812
08e0c     82 01 00 FF 
08e10     9C 15 06 F6 | 	mov	arg02, ##@LR__5398
08e14     1E 13 02 F6 | 	mov	arg01, local16
08e18     34 79 B1 FD | 	call	#__system___string_cmp
08e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e20     F4 00 90 AD |  if_e	jmp	#LR__0813
08e24     82 01 00 FF 
08e28     A2 15 06 F6 | 	mov	arg02, ##@LR__5399
08e2c     1E 13 02 F6 | 	mov	arg01, local16
08e30     1C 79 B1 FD | 	call	#__system___string_cmp
08e34     00 FA 0D F2 | 	cmp	result1, #0 wz
08e38     E8 00 90 AD |  if_e	jmp	#LR__0814
08e3c     82 01 00 FF 
08e40     A9 15 06 F6 | 	mov	arg02, ##@LR__5400
08e44     1E 13 02 F6 | 	mov	arg01, local16
08e48     04 79 B1 FD | 	call	#__system___string_cmp
08e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e50     DC 00 90 AD |  if_e	jmp	#LR__0815
08e54     82 01 00 FF 
08e58     AE 15 06 F6 | 	mov	arg02, ##@LR__5401
08e5c     1E 13 02 F6 | 	mov	arg01, local16
08e60     EC 78 B1 FD | 	call	#__system___string_cmp
08e64     00 FA 0D F2 | 	cmp	result1, #0 wz
08e68     D0 00 90 AD |  if_e	jmp	#LR__0816
08e6c     82 01 00 FF 
08e70     B6 15 06 F6 | 	mov	arg02, ##@LR__5402
08e74     1E 13 02 F6 | 	mov	arg01, local16
08e78     D4 78 B1 FD | 	call	#__system___string_cmp
08e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e80     C4 00 90 AD |  if_e	jmp	#LR__0817
08e84     82 01 00 FF 
08e88     BC 15 06 F6 | 	mov	arg02, ##@LR__5403
08e8c     1E 13 02 F6 | 	mov	arg01, local16
08e90     BC 78 B1 FD | 	call	#__system___string_cmp
08e94     00 FA 0D F2 | 	cmp	result1, #0 wz
08e98     B8 00 90 AD |  if_e	jmp	#LR__0818
08e9c     82 01 00 FF 
08ea0     C2 15 06 F6 | 	mov	arg02, ##@LR__5404
08ea4     1E 13 02 F6 | 	mov	arg01, local16
08ea8     A4 78 B1 FD | 	call	#__system___string_cmp
08eac     00 FA 0D F2 | 	cmp	result1, #0 wz
08eb0     AC 00 90 AD |  if_e	jmp	#LR__0819
08eb4     82 01 00 FF 
08eb8     C9 15 06 F6 | 	mov	arg02, ##@LR__5405
08ebc     1E 13 02 F6 | 	mov	arg01, local16
08ec0     8C 78 B1 FD | 	call	#__system___string_cmp
08ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ec8     A0 00 90 AD |  if_e	jmp	#LR__0820
08ecc     82 01 00 FF 
08ed0     D0 15 06 F6 | 	mov	arg02, ##@LR__5406
08ed4     1E 13 02 F6 | 	mov	arg01, local16
08ed8     74 78 B1 FD | 	call	#__system___string_cmp
08edc     00 FA 0D F2 | 	cmp	result1, #0 wz
08ee0     94 00 90 AD |  if_e	jmp	#LR__0821
08ee4     82 01 00 FF 
08ee8     D7 15 06 F6 | 	mov	arg02, ##@LR__5407
08eec     1E 13 02 F6 | 	mov	arg01, local16
08ef0     5C 78 B1 FD | 	call	#__system___string_cmp
08ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ef8     88 00 90 AD |  if_e	jmp	#LR__0822
08efc     90 00 90 FD | 	jmp	#LR__0823
08f00                 | LR__0811
08f00     01 39 06 F6 | 	mov	local14, #257
08f04     01 3A 06 F6 | 	mov	local15, #1
08f08     A4 00 90 FD | 	jmp	#LR__0825
08f0c                 | LR__0812
08f0c     02 39 06 F6 | 	mov	local14, #258
08f10     01 3A 06 F6 | 	mov	local15, #1
08f14     98 00 90 FD | 	jmp	#LR__0825
08f18                 | LR__0813
08f18     03 39 06 F6 | 	mov	local14, #259
08f1c     02 3A 06 F6 | 	mov	local15, #2
08f20     8C 00 90 FD | 	jmp	#LR__0825
08f24                 | LR__0814
08f24     04 39 06 F6 | 	mov	local14, #260
08f28     02 3A 06 F6 | 	mov	local15, #2
08f2c     80 00 90 FD | 	jmp	#LR__0825
08f30                 | LR__0815
08f30     05 39 06 F6 | 	mov	local14, #261
08f34     04 3A 06 F6 | 	mov	local15, #4
08f38     74 00 90 FD | 	jmp	#LR__0825
08f3c                 | LR__0816
08f3c     05 39 06 F6 | 	mov	local14, #261
08f40     04 3A 06 F6 | 	mov	local15, #4
08f44     68 00 90 FD | 	jmp	#LR__0825
08f48                 | LR__0817
08f48     06 39 06 F6 | 	mov	local14, #262
08f4c     04 3A 06 F6 | 	mov	local15, #4
08f50     5C 00 90 FD | 	jmp	#LR__0825
08f54                 | LR__0818
08f54     07 39 06 F6 | 	mov	local14, #263
08f58     08 3A 06 F6 | 	mov	local15, #8
08f5c     50 00 90 FD | 	jmp	#LR__0825
08f60                 | LR__0819
08f60     08 39 06 F6 | 	mov	local14, #264
08f64     08 3A 06 F6 | 	mov	local15, #8
08f68     44 00 90 FD | 	jmp	#LR__0825
08f6c                 | LR__0820
08f6c     09 39 06 F6 | 	mov	local14, #265
08f70     04 3A 06 F6 | 	mov	local15, #4
08f74     38 00 90 FD | 	jmp	#LR__0825
08f78                 | LR__0821
08f78     0A 39 06 F6 | 	mov	local14, #266
08f7c     08 3A 06 F6 | 	mov	local15, #8
08f80     2C 00 90 FD | 	jmp	#LR__0825
08f84                 | LR__0822
08f84     0B 39 06 F6 | 	mov	local14, #267
08f88     04 3A 06 F6 | 	mov	local15, #4
08f8c     20 00 90 FD | 	jmp	#LR__0825
08f90                 | LR__0823
08f90     2F 12 06 F6 | 	mov	arg01, #47
08f94     2C 44 B1 FD | 	call	#_printerror
08f98     2F FA 05 F6 | 	mov	result1, #47
08f9c     10 01 90 FD | 	jmp	#LR__0826
08fa0                 | LR__0824
08fa0     2E 12 06 F6 | 	mov	arg01, #46
08fa4     1C 44 B1 FD | 	call	#_printerror
08fa8                 | '   printerror(46): return 46
08fa8     2E FA 05 F6 | 	mov	result1, #46
08fac     00 01 90 FD | 	jmp	#LR__0826
08fb0                 | LR__0825
08fb0     0F 3B 02 FD | 	qmul	local15, local01
08fb4     18 2A 62 FD | 	getqx	local07
08fb8     10 2B 02 FD | 	qmul	local07, local02
08fbc     18 3C 62 FD | 	getqx	local16
08fc0     11 3D 02 FD | 	qmul	local16, local03
08fc4     51 00 00 FF 
08fc8     A8 E5 05 F1 | 	add	objptr, ##41896
08fcc     F2 3E 02 FB | 	rdlong	local17, objptr
08fd0     1C 15 02 F6 | 	mov	arg02, local14
08fd4     18 3C 62 FD | 	getqx	local16
08fd8     1E 3F 82 F1 | 	sub	local17, local16
08fdc     10 3E 86 F1 | 	sub	local17, #16
08fe0     0F 3E 26 F5 | 	andn	local17, #15
08fe4     F2 3E 62 FC | 	wrlong	local17, objptr
08fe8     51 00 00 FF 
08fec     A8 E5 85 F1 | 	sub	objptr, ##41896
08ff0     1F 13 02 F6 | 	mov	arg01, local17
08ff4     78 45 B1 FD | 	call	#_psdpoke
08ff8     1F 13 02 F6 | 	mov	arg01, local17
08ffc     02 12 06 F1 | 	add	arg01, #2
09000     1D 15 02 F6 | 	mov	arg02, local15
09004     68 45 B1 FD | 	call	#_psdpoke
09008     1F 13 02 F6 | 	mov	arg01, local17
0900c     04 12 06 F1 | 	add	arg01, #4
09010     0F 15 02 F6 | 	mov	arg02, local01
09014     10 45 B1 FD | 	call	#_pslpoke
09018     1F 13 02 F6 | 	mov	arg01, local17
0901c     08 12 06 F1 | 	add	arg01, #8
09020     10 15 02 F6 | 	mov	arg02, local02
09024     00 45 B1 FD | 	call	#_pslpoke
09028     1F 13 02 F6 | 	mov	arg01, local17
0902c     0C 12 06 F1 | 	add	arg01, #12
09030     11 15 02 F6 | 	mov	arg02, local03
09034     F0 44 B1 FD | 	call	#_pslpoke
09038     14 35 02 F6 | 	mov	local12, local06
0903c     04 34 66 F0 | 	shl	local12, #4
09040     14 00 00 FF 
09044     F8 E5 05 F1 | 	add	objptr, ##10744
09048     F2 34 02 F1 | 	add	local12, objptr
0904c     1A 27 62 FC | 	wrlong	local05, local12
09050     14 35 02 F6 | 	mov	local12, local06
09054     04 34 66 F0 | 	shl	local12, #4
09058     F2 34 02 F1 | 	add	local12, objptr
0905c     04 34 06 F1 | 	add	local12, #4
09060     1A 3F 62 FC | 	wrlong	local17, local12
09064     14 35 02 F6 | 	mov	local12, local06
09068     04 34 66 F0 | 	shl	local12, #4
0906c     F2 34 02 F1 | 	add	local12, objptr
09070     0C 34 06 F1 | 	add	local12, #12
09074     1A 39 62 FC | 	wrlong	local14, local12
09078                 | ' memtop=arrayptr
09078                 | ' 
09078                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
09078                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
09078                 | ' pslpoke arrayptr+4,dims(0)
09078                 | ' pslpoke arrayptr+8,dims(1)
09078                 | ' pslpoke arrayptr+12,dims(2)
09078                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
09078                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
09078                 | ' 
09078                 | ' 
09078                 | ' variables(j).name=varname2$
09078                 | ' variables(j).value.uresult=arrayptr
09078                 | ' variables(j).vartype=arraytype
09078                 | ' if j=varnum then varnum+=1
09078     20 00 00 FF 
0907c     10 E4 05 F1 | 	add	objptr, ##16400
09080     F2 2A 02 FB | 	rdlong	local07, objptr
09084     35 00 00 FF 
09088     08 E4 85 F1 | 	sub	objptr, ##27144
0908c     15 29 0A F2 | 	cmp	local06, local07 wz
09090     35 00 00 AF 
09094     08 E4 05 A1 |  if_e	add	objptr, ##27144
09098     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0909c     01 2A 06 A1 |  if_e	add	local07, #1
090a0     F2 2A 62 AC |  if_e	wrlong	local07, objptr
090a4     35 00 00 AF 
090a8     08 E4 85 A1 |  if_e	sub	objptr, ##27144
090ac                 | ' 
090ac                 | ' return 0
090ac     00 FA 05 F6 | 	mov	result1, #0
090b0                 | LR__0826
090b0     A7 F0 03 F6 | 	mov	ptra, fp
090b4     B2 00 A0 FD | 	call	#popregs_
090b8                 | _compile_dim_ret
090b8     2D 00 64 FD | 	ret
090bc                 | 
090bc                 | ' 
090bc                 | ' 
090bc                 | ' function compile_for() as ulong  
090bc                 | _compile_for
090bc     07 4A 05 F6 | 	mov	COUNT_, #7
090c0     A8 00 A0 FD | 	call	#pushregs_
090c4                 | ' 
090c4                 | ' 
090c4                 | ' 
090c4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
090c4     37 00 00 FF 
090c8     44 E4 05 F1 | 	add	objptr, ##28228
090cc     F2 14 02 FB | 	rdlong	arg02, objptr
090d0     01 14 06 F1 | 	add	arg02, #1
090d4     03 14 66 F0 | 	shl	arg02, #3
090d8     02 00 00 FF 
090dc     38 E4 85 F1 | 	sub	objptr, ##1080
090e0     F2 14 02 F1 | 	add	arg02, objptr
090e4     0A 13 02 FB | 	rdlong	arg01, arg02
090e8     35 00 00 FF 
090ec     0C E4 85 F1 | 	sub	objptr, ##27148
090f0                 | ' 
090f0                 | ' select case s
090f0     80 01 00 FF 
090f4     52 15 06 F6 | 	mov	arg02, ##@LR__5163
090f8     54 76 B1 FD | 	call	#__system___string_cmp
090fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09100     1B FA 05 A6 |  if_e	mov	result1, #27
09104     00 FA 05 56 |  if_ne	mov	result1, #0
09108     00 FA 0D F2 | 	cmp	result1, #0 wz
0910c     0C 00 90 AD |  if_e	jmp	#LR__0830
09110     05 12 06 F6 | 	mov	arg01, #5
09114     F4 E4 BF FD | 	call	#_compile_immediate_assign
09118     10 00 90 FD | 	jmp	#LR__0831
0911c                 | LR__0830
0911c     20 12 06 F6 | 	mov	arg01, #32
09120     48 E9 BF FD | 	call	#_compile_error
09124     20 FA 05 F6 | 	mov	result1, #32
09128     E8 02 90 FD | 	jmp	#LR__0837
0912c                 | LR__0831
0912c     4A 00 00 FF 
09130     7C E4 05 F1 | 	add	objptr, ##38012
09134     F2 12 02 FB | 	rdlong	arg01, objptr
09138     09 25 02 F6 | 	mov	local04, arg01
0913c     01 24 86 F1 | 	sub	local04, #1
09140     12 15 02 F6 | 	mov	arg02, local04
09144     01 14 66 F0 | 	shl	arg02, #1
09148     12 15 02 F1 | 	add	arg02, local04
0914c     02 14 66 F0 | 	shl	arg02, #2
09150     03 00 00 FF 
09154     00 E4 85 F1 | 	sub	objptr, ##1536
09158     F2 14 02 F1 | 	add	arg02, objptr
0915c     0A 1F 02 FB | 	rdlong	local01, arg02
09160     04 14 06 F1 | 	add	arg02, #4
09164     0A 27 02 FB | 	rdlong	local05, arg02
09168     01 12 86 F1 | 	sub	arg01, #1
0916c     09 29 02 F6 | 	mov	local06, arg01
09170     01 28 66 F0 | 	shl	local06, #1
09174     09 29 02 F1 | 	add	local06, arg01
09178     02 28 66 F0 | 	shl	local06, #2
0917c     F2 28 02 F1 | 	add	local06, objptr
09180     08 28 06 F1 | 	add	local06, #8
09184     14 13 02 FB | 	rdlong	arg01, local06
09188     13 21 02 F6 | 	mov	local02, local05
0918c     09 23 02 F6 | 	mov	local03, arg01
09190                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09190                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
09190     17 22 0E F2 | 	cmp	local03, #23 wz
09194     47 00 00 FF 
09198     7C E4 85 F1 | 	sub	objptr, ##36476
0919c     10 00 90 AD |  if_e	jmp	#LR__0832
091a0     22 12 06 F6 | 	mov	arg01, #34
091a4     C4 E8 BF FD | 	call	#_compile_error
091a8     22 FA 05 F6 | 	mov	result1, #34
091ac     64 02 90 FD | 	jmp	#LR__0837
091b0                 | LR__0832
091b0     0F 2B 02 F6 | 	mov	local07, local01
091b4                 | ' varnum=t1.result.uresult
091b4                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
091b4     37 00 00 FF 
091b8     44 E4 05 F1 | 	add	objptr, ##28228
091bc     F2 24 02 FB | 	rdlong	local04, objptr
091c0     03 24 66 F0 | 	shl	local04, #3
091c4     02 00 00 FF 
091c8     38 E4 85 F1 | 	sub	objptr, ##1080
091cc     F2 24 02 F1 | 	add	local04, objptr
091d0     12 13 02 FB | 	rdlong	arg01, local04
091d4     82 01 00 FF 
091d8     DE 15 06 F6 | 	mov	arg02, ##@LR__5408
091dc     35 00 00 FF 
091e0     0C E4 85 F1 | 	sub	objptr, ##27148
091e4     68 75 B1 FD | 	call	#__system___string_cmp
091e8     00 FA 0D F2 | 	cmp	result1, #0 wz
091ec     10 00 90 AD |  if_e	jmp	#LR__0833
091f0     21 12 06 F6 | 	mov	arg01, #33
091f4     74 E8 BF FD | 	call	#_compile_error
091f8     21 FA 05 F6 | 	mov	result1, #33
091fc     14 02 90 FD | 	jmp	#LR__0837
09200                 | LR__0833
09200     37 00 00 FF 
09204     44 E4 05 F1 | 	add	objptr, ##28228
09208     F2 24 02 FB | 	rdlong	local04, objptr
0920c     01 24 06 F1 | 	add	local04, #1
09210     F2 24 62 FC | 	wrlong	local04, objptr
09214     37 00 00 FF 
09218     44 E4 85 F1 | 	sub	objptr, ##28228
0921c     38 10 B0 FD | 	call	#_expr
09220                 | ' ct+=1
09220                 | ' expr()  ' there is "to" value pushed on the stack
09220                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09220     37 00 00 FF 
09224     44 E4 05 F1 | 	add	objptr, ##28228
09228     F2 24 02 FB | 	rdlong	local04, objptr
0922c     03 24 66 F0 | 	shl	local04, #3
09230     02 00 00 FF 
09234     38 E4 85 F1 | 	sub	objptr, ##1080
09238     F2 24 02 F1 | 	add	local04, objptr
0923c     12 13 02 FB | 	rdlong	arg01, local04
09240     82 01 00 FF 
09244     E1 15 06 F6 | 	mov	arg02, ##@LR__5409
09248     35 00 00 FF 
0924c     0C E4 85 F1 | 	sub	objptr, ##27148
09250     FC 74 B1 FD | 	call	#__system___string_cmp
09254     00 FA 0D F2 | 	cmp	result1, #0 wz
09258     3C 00 90 AD |  if_e	jmp	#LR__0834
0925c     37 00 00 FF 
09260     44 E4 05 F1 | 	add	objptr, ##28228
09264     F2 28 02 FB | 	rdlong	local06, objptr
09268     03 28 66 F0 | 	shl	local06, #3
0926c     02 00 00 FF 
09270     38 E4 85 F1 | 	sub	objptr, ##1080
09274     F2 28 02 F1 | 	add	local06, objptr
09278     14 13 02 FB | 	rdlong	arg01, local06
0927c     82 01 00 FF 
09280     E6 15 06 F6 | 	mov	arg02, ##@LR__5410
09284     35 00 00 FF 
09288     0C E4 85 F1 | 	sub	objptr, ##27148
0928c     C0 74 B1 FD | 	call	#__system___string_cmp
09290     00 FA 0D F2 | 	cmp	result1, #0 wz
09294     24 00 90 5D |  if_ne	jmp	#LR__0835
09298                 | LR__0834
09298     37 00 00 FF 
0929c     44 E4 05 F1 | 	add	objptr, ##28228
092a0     F2 28 02 FB | 	rdlong	local06, objptr
092a4     01 28 06 F1 | 	add	local06, #1
092a8     F2 28 62 FC | 	wrlong	local06, objptr
092ac     37 00 00 FF 
092b0     44 E4 85 F1 | 	sub	objptr, ##28228
092b4     A0 0F B0 FD | 	call	#_expr
092b8     78 00 90 FD | 	jmp	#LR__0836
092bc                 | LR__0835
092bc     4A 00 00 FF 
092c0     7C E4 05 F1 | 	add	objptr, ##38012
092c4     F2 28 02 FB | 	rdlong	local06, objptr
092c8     14 27 02 F6 | 	mov	local05, local06
092cc     01 26 66 F0 | 	shl	local05, #1
092d0     14 27 02 F1 | 	add	local05, local06
092d4     02 26 66 F0 | 	shl	local05, #2
092d8     03 00 00 FF 
092dc     00 E4 85 F1 | 	sub	objptr, ##1536
092e0     F2 26 02 F1 | 	add	local05, objptr
092e4     08 26 06 F1 | 	add	local05, #8
092e8     13 39 68 FC | 	wrlong	#28, local05
092ec     03 00 00 FF 
092f0     00 E4 05 F1 | 	add	objptr, ##1536
092f4     F2 28 02 FB | 	rdlong	local06, objptr
092f8     14 27 02 F6 | 	mov	local05, local06
092fc     01 26 66 F0 | 	shl	local05, #1
09300     14 27 02 F1 | 	add	local05, local06
09304     02 26 66 F0 | 	shl	local05, #2
09308     03 00 00 FF 
0930c     00 E4 85 F1 | 	sub	objptr, ##1536
09310     F2 26 02 F1 | 	add	local05, objptr
09314     13 03 68 FC | 	wrlong	#1, local05
09318     03 00 00 FF 
0931c     00 E4 05 F1 | 	add	objptr, ##1536
09320     F2 28 02 FB | 	rdlong	local06, objptr
09324     01 28 06 F1 | 	add	local06, #1
09328     F2 28 62 FC | 	wrlong	local06, objptr
0932c     4A 00 00 FF 
09330     7C E4 85 F1 | 	sub	objptr, ##38012
09334                 | LR__0836
09334     4A 00 00 FF 
09338     7C E4 05 F1 | 	add	objptr, ##38012
0933c     F2 28 02 FB | 	rdlong	local06, objptr
09340     14 27 02 F6 | 	mov	local05, local06
09344     01 26 66 F0 | 	shl	local05, #1
09348     14 27 02 F1 | 	add	local05, local06
0934c     02 26 66 F0 | 	shl	local05, #2
09350     03 00 00 FF 
09354     00 E4 85 F1 | 	sub	objptr, ##1536
09358     F2 26 02 F1 | 	add	local05, objptr
0935c     08 26 06 F1 | 	add	local05, #8
09360     13 39 68 FC | 	wrlong	#28, local05
09364     03 00 00 FF 
09368     00 E4 05 F1 | 	add	objptr, ##1536
0936c     F2 28 02 FB | 	rdlong	local06, objptr
09370     14 27 02 F6 | 	mov	local05, local06
09374     01 26 66 F0 | 	shl	local05, #1
09378     14 27 02 F1 | 	add	local05, local06
0937c     02 26 66 F0 | 	shl	local05, #2
09380     03 00 00 FF 
09384     00 E4 85 F1 | 	sub	objptr, ##1536
09388     F2 26 02 F1 | 	add	local05, objptr
0938c     13 2B 62 FC | 	wrlong	local07, local05
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 2A 02 FB | 	rdlong	local07, objptr
0939c     01 2A 06 F1 | 	add	local07, #1
093a0     F2 2A 62 FC | 	wrlong	local07, objptr
093a4     15 29 02 F6 | 	mov	local06, local07
093a8     01 28 66 F0 | 	shl	local06, #1
093ac     15 29 02 F1 | 	add	local06, local07
093b0     02 28 66 F0 | 	shl	local06, #2
093b4     03 00 00 FF 
093b8     00 E4 85 F1 | 	sub	objptr, ##1536
093bc     F2 28 02 F1 | 	add	local06, objptr
093c0     08 28 06 F1 | 	add	local06, #8
093c4     14 95 68 FC | 	wrlong	#74, local06
093c8     03 00 00 FF 
093cc     00 E4 05 F1 | 	add	objptr, ##1536
093d0     F2 2A 02 FB | 	rdlong	local07, objptr
093d4     15 29 02 F6 | 	mov	local06, local07
093d8     01 28 66 F0 | 	shl	local06, #1
093dc     15 29 02 F1 | 	add	local06, local07
093e0     02 28 66 F0 | 	shl	local06, #2
093e4     03 00 00 FF 
093e8     00 E4 85 F1 | 	sub	objptr, ##1536
093ec     F2 28 02 F1 | 	add	local06, objptr
093f0     14 01 68 FC | 	wrlong	#0, local06
093f4     03 00 00 FF 
093f8     00 E4 05 F1 | 	add	objptr, ##1536
093fc     F2 2A 02 FB | 	rdlong	local07, objptr
09400     01 2A 06 F1 | 	add	local07, #1
09404     F2 2A 62 FC | 	wrlong	local07, objptr
09408     4A 00 00 FF 
0940c     7C E4 85 F1 | 	sub	objptr, ##38012
09410                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09410                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09410                 | ' 
09410                 | ' 
09410                 | ' return 0
09410     00 FA 05 F6 | 	mov	result1, #0
09414                 | LR__0837
09414     A7 F0 03 F6 | 	mov	ptra, fp
09418     B2 00 A0 FD | 	call	#popregs_
0941c                 | _compile_for_ret
0941c     2D 00 64 FD | 	ret
09420                 | 
09420                 | ' 
09420                 | ' 
09420                 | ' sub do_gosub()
09420                 | _do_gosub
09420     50 00 00 FF 
09424     08 E5 05 F1 | 	add	objptr, ##41224
09428     F2 00 02 FB | 	rdlong	_var01, objptr
0942c     01 00 06 F1 | 	add	_var01, #1
09430     F2 00 62 FC | 	wrlong	_var01, objptr
09434                 | ' gosubtop+=1
09434                 | ' if compiledline(lineptr_e+1).result_type=token_end then
09434     06 00 00 FF 
09438     88 E4 85 F1 | 	sub	objptr, ##3208
0943c     F2 00 02 FB | 	rdlong	_var01, objptr
09440     01 00 06 F1 | 	add	_var01, #1
09444     00 03 02 F6 | 	mov	_var02, _var01
09448     01 02 66 F0 | 	shl	_var02, #1
0944c     00 03 02 F1 | 	add	_var02, _var01
09450     02 02 66 F0 | 	shl	_var02, #2
09454     03 00 00 FF 
09458     04 E4 85 F1 | 	sub	objptr, ##1540
0945c     F2 02 02 F1 | 	add	_var02, objptr
09460     08 02 06 F1 | 	add	_var02, #8
09464     01 03 02 FB | 	rdlong	_var02, _var02
09468     FE 03 0E F2 | 	cmp	_var02, #510 wz
0946c     47 00 00 FF 
09470     7C E4 85 F1 | 	sub	objptr, ##36476
09474     58 00 90 5D |  if_ne	jmp	#LR__0840
09478     50 00 00 FF 
0947c     08 E5 05 F1 | 	add	objptr, ##41224
09480     F2 02 02 FB | 	rdlong	_var02, objptr
09484     03 02 66 F0 | 	shl	_var02, #3
09488     03 00 00 FF 
0948c     60 E5 85 F1 | 	sub	objptr, ##1888
09490     F2 02 02 F1 | 	add	_var02, objptr
09494     03 00 00 FF 
09498     0C E5 05 F1 | 	add	objptr, ##1804
0949c     F2 00 02 FB | 	rdlong	_var01, objptr
094a0     01 01 62 FC | 	wrlong	_var01, _var02
094a4     54 E4 05 F1 | 	add	objptr, #84
094a8     F2 02 02 FB | 	rdlong	_var02, objptr
094ac     03 02 66 F0 | 	shl	_var02, #3
094b0     03 00 00 FF 
094b4     60 E5 85 F1 | 	sub	objptr, ##1888
094b8     F2 02 02 F1 | 	add	_var02, objptr
094bc     04 02 06 F1 | 	add	_var02, #4
094c0     01 01 68 FC | 	wrlong	#0, _var02
094c4     4C 00 00 FF 
094c8     A8 E5 85 F1 | 	sub	objptr, ##39336
094cc     64 00 90 FD | 	jmp	#LR__0841
094d0                 | LR__0840
094d0     50 00 00 FF 
094d4     08 E5 05 F1 | 	add	objptr, ##41224
094d8     F2 02 02 FB | 	rdlong	_var02, objptr
094dc     03 02 66 F0 | 	shl	_var02, #3
094e0     03 00 00 FF 
094e4     60 E5 85 F1 | 	sub	objptr, ##1888
094e8     F2 02 02 F1 | 	add	_var02, objptr
094ec     03 00 00 FF 
094f0     14 E5 05 F1 | 	add	objptr, ##1812
094f4     F2 00 02 FB | 	rdlong	_var01, objptr
094f8     01 01 62 FC | 	wrlong	_var01, _var02
094fc     4C E4 05 F1 | 	add	objptr, #76
09500     F2 02 02 FB | 	rdlong	_var02, objptr
09504     03 02 66 F0 | 	shl	_var02, #3
09508     03 00 00 FF 
0950c     60 E5 85 F1 | 	sub	objptr, ##1888
09510     F2 02 02 F1 | 	add	_var02, objptr
09514     02 00 00 FF 
09518     28 E5 85 F1 | 	sub	objptr, ##1320
0951c     F2 00 02 FB | 	rdlong	_var01, objptr
09520     4A 00 00 FF 
09524     80 E4 85 F1 | 	sub	objptr, ##38016
09528     02 00 06 F1 | 	add	_var01, #2
0952c     04 02 06 F1 | 	add	_var02, #4
09530     01 01 62 FC | 	wrlong	_var01, _var02
09534                 | LR__0841
09534                 | _do_gosub_ret
09534     2D 00 64 FD | 	ret
09538                 | 
09538                 | ' 
09538                 | ' 
09538                 | ' sub do_for()
09538                 | _do_for
09538     01 4A 05 F6 | 	mov	COUNT_, #1
0953c     A8 00 A0 FD | 	call	#pushregs_
09540     10 F0 07 F1 | 	add	ptra, #16
09544     50 00 00 FF 
09548     04 E5 05 F1 | 	add	objptr, ##41220
0954c     F2 12 02 FB | 	rdlong	arg01, objptr
09550     01 12 06 F1 | 	add	arg01, #1
09554     F2 12 62 FC | 	wrlong	arg01, objptr
09558     50 00 00 FF 
0955c     04 E5 85 F1 | 	sub	objptr, ##41220
09560     40 24 B0 FD | 	call	#_pop
09564     A7 FA 61 FC | 	wrlong	result1, fp
09568     04 4E 05 F1 | 	add	fp, #4
0956c     A7 FC 61 FC | 	wrlong	result2, fp
09570     04 4E 05 F1 | 	add	fp, #4
09574     A7 FE 61 FC | 	wrlong	result3, fp
09578     08 4E 85 F1 | 	sub	fp, #8
0957c     50 00 00 FF 
09580     04 E5 05 F1 | 	add	objptr, ##41220
09584     F2 12 02 FB | 	rdlong	arg01, objptr
09588     09 1F 02 F6 | 	mov	local01, arg01
0958c     02 1E 66 F0 | 	shl	local01, #2
09590     09 1F 02 F1 | 	add	local01, arg01
09594     02 1E 66 F0 | 	shl	local01, #2
09598     06 00 00 FF 
0959c     70 E4 85 F1 | 	sub	objptr, ##3184
095a0     F2 1E 02 F1 | 	add	local01, objptr
095a4     A7 12 02 FB | 	rdlong	arg01, fp
095a8     08 1E 06 F1 | 	add	local01, #8
095ac     0F 13 62 FC | 	wrlong	arg01, local01
095b0     4A 00 00 FF 
095b4     94 E4 85 F1 | 	sub	objptr, ##38036
095b8     E8 23 B0 FD | 	call	#_pop
095bc     A7 FA 61 FC | 	wrlong	result1, fp
095c0     04 4E 05 F1 | 	add	fp, #4
095c4     A7 FC 61 FC | 	wrlong	result2, fp
095c8     04 4E 05 F1 | 	add	fp, #4
095cc     A7 FE 61 FC | 	wrlong	result3, fp
095d0     08 4E 85 F1 | 	sub	fp, #8
095d4     50 00 00 FF 
095d8     04 E5 05 F1 | 	add	objptr, ##41220
095dc     F2 12 02 FB | 	rdlong	arg01, objptr
095e0     09 1F 02 F6 | 	mov	local01, arg01
095e4     02 1E 66 F0 | 	shl	local01, #2
095e8     09 1F 02 F1 | 	add	local01, arg01
095ec     02 1E 66 F0 | 	shl	local01, #2
095f0     06 00 00 FF 
095f4     70 E4 85 F1 | 	sub	objptr, ##3184
095f8     F2 1E 02 F1 | 	add	local01, objptr
095fc     A7 12 02 F6 | 	mov	arg01, fp
09600     4A 00 00 FF 
09604     94 E4 85 F1 | 	sub	objptr, ##38036
09608     5C C4 B0 FD | 	call	#_converttoint
0960c     FD 12 02 F6 | 	mov	arg01, result1
09610     0C 1E 06 F1 | 	add	local01, #12
09614     0F 13 62 FC | 	wrlong	arg01, local01
09618     88 23 B0 FD | 	call	#_pop
0961c     A7 FA 61 FC | 	wrlong	result1, fp
09620     04 4E 05 F1 | 	add	fp, #4
09624     A7 FC 61 FC | 	wrlong	result2, fp
09628     04 4E 05 F1 | 	add	fp, #4
0962c     A7 FE 61 FC | 	wrlong	result3, fp
09630     08 4E 85 F1 | 	sub	fp, #8
09634     50 00 00 FF 
09638     04 E5 05 F1 | 	add	objptr, ##41220
0963c     F2 12 02 FB | 	rdlong	arg01, objptr
09640     09 1F 02 F6 | 	mov	local01, arg01
09644     02 1E 66 F0 | 	shl	local01, #2
09648     09 1F 02 F1 | 	add	local01, arg01
0964c     02 1E 66 F0 | 	shl	local01, #2
09650     06 00 00 FF 
09654     70 E4 85 F1 | 	sub	objptr, ##3184
09658     F2 1E 02 F1 | 	add	local01, objptr
0965c     A7 12 02 F6 | 	mov	arg01, fp
09660     4A 00 00 FF 
09664     94 E4 85 F1 | 	sub	objptr, ##38036
09668     FC C3 B0 FD | 	call	#_converttoint
0966c     10 1E 06 F1 | 	add	local01, #16
09670     0F FB 61 FC | 	wrlong	result1, local01
09674                 | ' fortop+=1
09674                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
09674                 | ' 'if i> maxfor then printerror(36) : return
09674                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
09674                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
09674                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
09674                 | ' if compiledline(lineptr_e).result_type=token_end then
09674     4A 00 00 FF 
09678     80 E4 05 F1 | 	add	objptr, ##38016
0967c     F2 12 02 FB | 	rdlong	arg01, objptr
09680     09 1F 02 F6 | 	mov	local01, arg01
09684     01 1E 66 F0 | 	shl	local01, #1
09688     09 1F 02 F1 | 	add	local01, arg01
0968c     02 1E 66 F0 | 	shl	local01, #2
09690     03 00 00 FF 
09694     04 E4 85 F1 | 	sub	objptr, ##1540
09698     F2 1E 02 F1 | 	add	local01, objptr
0969c     08 1E 06 F1 | 	add	local01, #8
096a0     0F 1F 02 FB | 	rdlong	local01, local01
096a4     FE 1F 0E F2 | 	cmp	local01, #510 wz
096a8     47 00 00 FF 
096ac     7C E4 85 F1 | 	sub	objptr, ##36476
096b0     70 00 90 5D |  if_ne	jmp	#LR__0850
096b4     50 00 00 FF 
096b8     04 E5 05 F1 | 	add	objptr, ##41220
096bc     F2 12 02 FB | 	rdlong	arg01, objptr
096c0     09 1F 02 F6 | 	mov	local01, arg01
096c4     02 1E 66 F0 | 	shl	local01, #2
096c8     09 1F 02 F1 | 	add	local01, arg01
096cc     02 1E 66 F0 | 	shl	local01, #2
096d0     06 00 00 FF 
096d4     70 E4 85 F1 | 	sub	objptr, ##3184
096d8     F2 1E 02 F1 | 	add	local01, objptr
096dc     06 00 00 FF 
096e0     20 E4 05 F1 | 	add	objptr, ##3104
096e4     F2 12 02 FB | 	rdlong	arg01, objptr
096e8     0F 13 62 FC | 	wrlong	arg01, local01
096ec     50 E4 05 F1 | 	add	objptr, #80
096f0     F2 12 02 FB | 	rdlong	arg01, objptr
096f4     09 1F 02 F6 | 	mov	local01, arg01
096f8     02 1E 66 F0 | 	shl	local01, #2
096fc     09 1F 02 F1 | 	add	local01, arg01
09700     02 1E 66 F0 | 	shl	local01, #2
09704     06 00 00 FF 
09708     70 E4 85 F1 | 	sub	objptr, ##3184
0970c     F2 1E 02 F1 | 	add	local01, objptr
09710     04 1E 06 F1 | 	add	local01, #4
09714     0F 01 68 FC | 	wrlong	#0, local01
09718     4A 00 00 FF 
0971c     94 E4 85 F1 | 	sub	objptr, ##38036
09720     78 00 90 FD | 	jmp	#LR__0851
09724                 | LR__0850
09724     50 00 00 FF 
09728     04 E5 05 F1 | 	add	objptr, ##41220
0972c     F2 12 02 FB | 	rdlong	arg01, objptr
09730     09 1F 02 F6 | 	mov	local01, arg01
09734     02 1E 66 F0 | 	shl	local01, #2
09738     09 1F 02 F1 | 	add	local01, arg01
0973c     02 1E 66 F0 | 	shl	local01, #2
09740     06 00 00 FF 
09744     70 E4 85 F1 | 	sub	objptr, ##3184
09748     F2 1E 02 F1 | 	add	local01, objptr
0974c     06 00 00 FF 
09750     28 E4 05 F1 | 	add	objptr, ##3112
09754     F2 12 02 FB | 	rdlong	arg01, objptr
09758     0F 13 62 FC | 	wrlong	arg01, local01
0975c     48 E4 05 F1 | 	add	objptr, #72
09760     F2 12 02 FB | 	rdlong	arg01, objptr
09764     09 1F 02 F6 | 	mov	local01, arg01
09768     02 1E 66 F0 | 	shl	local01, #2
0976c     09 1F 02 F1 | 	add	local01, arg01
09770     02 1E 66 F0 | 	shl	local01, #2
09774     06 00 00 FF 
09778     70 E4 85 F1 | 	sub	objptr, ##3184
0977c     F2 1E 02 F1 | 	add	local01, objptr
09780     14 E4 85 F1 | 	sub	objptr, #20
09784     F2 12 02 FB | 	rdlong	arg01, objptr
09788     4A 00 00 FF 
0978c     80 E4 85 F1 | 	sub	objptr, ##38016
09790     01 12 06 F1 | 	add	arg01, #1
09794     04 1E 06 F1 | 	add	local01, #4
09798     0F 13 62 FC | 	wrlong	arg01, local01
0979c                 | LR__0851
0979c     A7 F0 03 F6 | 	mov	ptra, fp
097a0     B2 00 A0 FD | 	call	#popregs_
097a4                 | _do_for_ret
097a4     2D 00 64 FD | 	ret
097a8                 | 
097a8                 | ' 
097a8                 | ' ' now do_next todo
097a8                 | ' 
097a8                 | ' sub do_return()
097a8                 | _do_return
097a8                 | ' if gosubtop>0 then
097a8     50 00 00 FF 
097ac     08 E5 05 F1 | 	add	objptr, ##41224
097b0     F2 00 02 FB | 	rdlong	_var01, objptr
097b4     50 00 00 FF 
097b8     08 E5 85 F1 | 	sub	objptr, ##41224
097bc     01 00 56 F2 | 	cmps	_var01, #1 wc
097c0     8C 00 90 CD |  if_b	jmp	#LR__0860
097c4     50 00 00 FF 
097c8     08 E5 05 F1 | 	add	objptr, ##41224
097cc     F2 00 02 FB | 	rdlong	_var01, objptr
097d0     03 00 66 F0 | 	shl	_var01, #3
097d4     03 00 00 FF 
097d8     60 E5 85 F1 | 	sub	objptr, ##1888
097dc     F2 00 02 F1 | 	add	_var01, objptr
097e0     00 01 02 FB | 	rdlong	_var01, _var01
097e4     03 00 00 FF 
097e8     0C E5 05 F1 | 	add	objptr, ##1804
097ec     F2 00 62 FC | 	wrlong	_var01, objptr
097f0     54 E4 05 F1 | 	add	objptr, #84
097f4     F2 00 02 FB | 	rdlong	_var01, objptr
097f8     03 00 66 F0 | 	shl	_var01, #3
097fc     03 00 00 FF 
09800     60 E5 85 F1 | 	sub	objptr, ##1888
09804     F2 00 02 F1 | 	add	_var01, objptr
09808     04 00 06 F1 | 	add	_var01, #4
0980c     00 01 02 FB | 	rdlong	_var01, _var01
09810     03 00 00 FF 
09814     10 E5 05 F1 | 	add	objptr, ##1808
09818     F2 00 62 FC | 	wrlong	_var01, objptr
0981c     06 00 00 FF 
09820     3C E4 85 F1 | 	sub	objptr, ##3132
09824     F2 00 02 FB | 	rdlong	_var01, objptr
09828     01 00 86 F1 | 	sub	_var01, #1
0982c     04 E4 05 F1 | 	add	objptr, #4
09830     F2 00 62 FC | 	wrlong	_var01, objptr
09834     06 00 00 FF 
09838     88 E4 05 F1 | 	add	objptr, ##3208
0983c     F2 00 02 FB | 	rdlong	_var01, objptr
09840     01 00 86 F1 | 	sub	_var01, #1
09844     F2 00 62 FC | 	wrlong	_var01, objptr
09848     50 00 00 FF 
0984c     08 E5 85 F1 | 	sub	objptr, ##41224
09850                 | LR__0860
09850                 | _do_return_ret
09850     2D 00 64 FD | 	ret
09854                 | 
09854                 | ' 
09854                 | ' sub do_pop()
09854                 | _do_pop
09854                 | ' if gosubtop>0 then  gosubtop -=1 
09854     50 00 00 FF 
09858     08 E5 05 F1 | 	add	objptr, ##41224
0985c     F2 00 02 FB | 	rdlong	_var01, objptr
09860     50 00 00 FF 
09864     08 E5 85 F1 | 	sub	objptr, ##41224
09868     01 00 56 F2 | 	cmps	_var01, #1 wc
0986c     50 00 00 3F 
09870     08 E5 05 31 |  if_ae	add	objptr, ##41224
09874     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
09878     01 00 86 31 |  if_ae	sub	_var01, #1
0987c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
09880     50 00 00 3F 
09884     08 E5 85 31 |  if_ae	sub	objptr, ##41224
09888                 | _do_pop_ret
09888     2D 00 64 FD | 	ret
0988c                 | 
0988c                 | ' 
0988c                 | ' sub do_next()
0988c                 | _do_next
0988c     04 4A 05 F6 | 	mov	COUNT_, #4
09890     A8 00 A0 FD | 	call	#pushregs_
09894     0C 21 B0 FD | 	call	#_pop
09898     FD 1E 02 F6 | 	mov	local01, result1
0989c     FE 20 02 F6 | 	mov	local02, result2
098a0     FF 22 02 F6 | 	mov	local03, result3
098a4                 | ' 
098a4                 | ' t1=pop() :varnum=t1.result.uresult
098a4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
098a4     50 00 00 FF 
098a8     04 E5 05 F1 | 	add	objptr, ##41220
098ac     F2 12 02 FB | 	rdlong	arg01, objptr
098b0     09 15 02 F6 | 	mov	arg02, arg01
098b4     02 14 66 F0 | 	shl	arg02, #2
098b8     09 15 02 F1 | 	add	arg02, arg01
098bc     02 14 66 F0 | 	shl	arg02, #2
098c0     06 00 00 FF 
098c4     70 E4 85 F1 | 	sub	objptr, ##3184
098c8     F2 14 02 F1 | 	add	arg02, objptr
098cc     08 14 06 F1 | 	add	arg02, #8
098d0     0A 15 02 FB | 	rdlong	arg02, arg02
098d4     0F 15 0A F2 | 	cmp	arg02, local01 wz
098d8     4A 00 00 FF 
098dc     94 E4 85 F1 | 	sub	objptr, ##38036
098e0     0C 00 90 AD |  if_e	jmp	#LR__0870
098e4     25 12 06 F6 | 	mov	arg01, #37
098e8     D8 3A B1 FD | 	call	#_printerror
098ec     54 03 90 FD | 	jmp	#LR__0877
098f0                 | LR__0870
098f0                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
098f0     0F 15 02 F6 | 	mov	arg02, local01
098f4     04 14 66 F0 | 	shl	arg02, #4
098f8     14 00 00 FF 
098fc     F8 E5 05 F1 | 	add	objptr, ##10744
09900     F2 14 02 F1 | 	add	arg02, objptr
09904     0C 14 06 F1 | 	add	arg02, #12
09908     0A 15 02 FB | 	rdlong	arg02, arg02
0990c     1E 14 0E F2 | 	cmp	arg02, #30 wz
09910     14 00 00 FF 
09914     F8 E5 85 F1 | 	sub	objptr, ##10744
09918     54 00 90 5D |  if_ne	jmp	#LR__0871
0991c     0F 15 02 F6 | 	mov	arg02, local01
09920     04 14 66 F0 | 	shl	arg02, #4
09924     14 00 00 FF 
09928     F8 E5 05 F1 | 	add	objptr, ##10744
0992c     F2 14 02 F1 | 	add	arg02, objptr
09930     0C 14 06 F1 | 	add	arg02, #12
09934     0A 39 68 FC | 	wrlong	#28, arg02
09938     0F 25 02 F6 | 	mov	local04, local01
0993c     04 24 66 F0 | 	shl	local04, #4
09940     F2 24 02 F1 | 	add	local04, objptr
09944     0F 13 02 F6 | 	mov	arg01, local01
09948     04 12 66 F0 | 	shl	arg01, #4
0994c     F2 12 02 F1 | 	add	arg01, objptr
09950     04 12 06 F1 | 	add	arg01, #4
09954     09 13 02 FB | 	rdlong	arg01, arg01
09958     14 00 00 FF 
0995c     F8 E5 85 F1 | 	sub	objptr, ##10744
09960     01 14 06 F6 | 	mov	arg02, #1
09964     3C 9E B1 FD | 	call	#__system___float_tointeger
09968     04 24 06 F1 | 	add	local04, #4
0996c     12 FB 61 FC | 	wrlong	result1, local04
09970                 | LR__0871
09970     50 00 00 FF 
09974     04 E5 05 F1 | 	add	objptr, ##41220
09978     F2 12 02 FB | 	rdlong	arg01, objptr
0997c     09 25 02 F6 | 	mov	local04, arg01
09980     02 24 66 F0 | 	shl	local04, #2
09984     09 25 02 F1 | 	add	local04, arg01
09988     02 24 66 F0 | 	shl	local04, #2
0998c     06 00 00 FF 
09990     70 E4 85 F1 | 	sub	objptr, ##3184
09994     F2 24 02 F1 | 	add	local04, objptr
09998     0C 24 06 F1 | 	add	local04, #12
0999c     12 25 02 FB | 	rdlong	local04, local04
099a0     0F 13 02 F6 | 	mov	arg01, local01
099a4     04 12 66 F0 | 	shl	arg01, #4
099a8     35 00 00 FF 
099ac     9C E4 85 F1 | 	sub	objptr, ##27292
099b0     F2 12 02 F1 | 	add	arg01, objptr
099b4     0F FF 01 F6 | 	mov	result3, local01
099b8     04 FE 65 F0 | 	shl	result3, #4
099bc     F2 FE 01 F1 | 	add	result3, objptr
099c0     04 FE 05 F1 | 	add	result3, #4
099c4     FF FE 01 FB | 	rdlong	result3, result3
099c8     12 FF 01 F1 | 	add	result3, local04
099cc     04 12 06 F1 | 	add	arg01, #4
099d0     09 FF 61 FC | 	wrlong	result3, arg01
099d4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
099d4                 | ' if fortable(fortop).stepval>=0 then
099d4     3B 00 00 FF 
099d8     0C E5 05 F1 | 	add	objptr, ##30476
099dc     F2 12 02 FB | 	rdlong	arg01, objptr
099e0     09 25 02 F6 | 	mov	local04, arg01
099e4     02 24 66 F0 | 	shl	local04, #2
099e8     09 25 02 F1 | 	add	local04, arg01
099ec     02 24 66 F0 | 	shl	local04, #2
099f0     06 00 00 FF 
099f4     70 E4 85 F1 | 	sub	objptr, ##3184
099f8     F2 24 02 F1 | 	add	local04, objptr
099fc     0C 24 06 F1 | 	add	local04, #12
09a00     12 25 02 FB | 	rdlong	local04, local04
09a04     00 24 56 F2 | 	cmps	local04, #0 wc
09a08     4A 00 00 FF 
09a0c     94 E4 85 F1 | 	sub	objptr, ##38036
09a10     78 00 90 CD |  if_b	jmp	#LR__0872
09a14                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
09a14     04 1E 66 F0 | 	shl	local01, #4
09a18     14 00 00 FF 
09a1c     F8 E5 05 F1 | 	add	objptr, ##10744
09a20     F2 1E 02 F1 | 	add	local01, objptr
09a24     3B 00 00 FF 
09a28     0C E5 05 F1 | 	add	objptr, ##30476
09a2c     F2 24 02 FB | 	rdlong	local04, objptr
09a30     12 13 02 F6 | 	mov	arg01, local04
09a34     02 12 66 F0 | 	shl	arg01, #2
09a38     12 13 02 F1 | 	add	arg01, local04
09a3c     02 12 66 F0 | 	shl	arg01, #2
09a40     06 00 00 FF 
09a44     70 E4 85 F1 | 	sub	objptr, ##3184
09a48     F2 12 02 F1 | 	add	arg01, objptr
09a4c     04 1E 06 F1 | 	add	local01, #4
09a50     0F 25 02 FB | 	rdlong	local04, local01
09a54     10 12 06 F1 | 	add	arg01, #16
09a58     09 13 02 FB | 	rdlong	arg01, arg01
09a5c     09 25 5A F2 | 	cmps	local04, arg01 wcz
09a60     4A 00 00 FF 
09a64     94 E4 85 F1 | 	sub	objptr, ##38036
09a68     9C 00 90 ED |  if_be	jmp	#LR__0874
09a6c     50 00 00 FF 
09a70     04 E5 05 F1 | 	add	objptr, ##41220
09a74     F2 24 02 FB | 	rdlong	local04, objptr
09a78     01 24 86 F1 | 	sub	local04, #1
09a7c     F2 24 62 FC | 	wrlong	local04, objptr
09a80     50 00 00 FF 
09a84     04 E5 85 F1 | 	sub	objptr, ##41220
09a88     B8 01 90 FD | 	jmp	#LR__0877
09a8c                 | LR__0872
09a8c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09a8c     0F 13 02 F6 | 	mov	arg01, local01
09a90     04 12 66 F0 | 	shl	arg01, #4
09a94     14 00 00 FF 
09a98     F8 E5 05 F1 | 	add	objptr, ##10744
09a9c     F2 12 02 F1 | 	add	arg01, objptr
09aa0     3B 00 00 FF 
09aa4     0C E5 05 F1 | 	add	objptr, ##30476
09aa8     F2 24 02 FB | 	rdlong	local04, objptr
09aac     12 1F 02 F6 | 	mov	local01, local04
09ab0     02 1E 66 F0 | 	shl	local01, #2
09ab4     12 1F 02 F1 | 	add	local01, local04
09ab8     02 1E 66 F0 | 	shl	local01, #2
09abc     06 00 00 FF 
09ac0     70 E4 85 F1 | 	sub	objptr, ##3184
09ac4     F2 1E 02 F1 | 	add	local01, objptr
09ac8     04 12 06 F1 | 	add	arg01, #4
09acc     09 13 02 FB | 	rdlong	arg01, arg01
09ad0     10 1E 06 F1 | 	add	local01, #16
09ad4     0F 1F 02 FB | 	rdlong	local01, local01
09ad8     0F 13 52 F2 | 	cmps	arg01, local01 wc
09adc     4A 00 00 FF 
09ae0     94 E4 85 F1 | 	sub	objptr, ##38036
09ae4     20 00 90 3D |  if_ae	jmp	#LR__0873
09ae8     50 00 00 FF 
09aec     04 E5 05 F1 | 	add	objptr, ##41220
09af0     F2 24 02 FB | 	rdlong	local04, objptr
09af4     01 24 86 F1 | 	sub	local04, #1
09af8     F2 24 62 FC | 	wrlong	local04, objptr
09afc     50 00 00 FF 
09b00     04 E5 85 F1 | 	sub	objptr, ##41220
09b04     3C 01 90 FD | 	jmp	#LR__0877
09b08                 | LR__0873
09b08                 | LR__0874
09b08                 | ' ' if not returned, goto pointer 
09b08                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
09b08     50 00 00 FF 
09b0c     E8 E4 05 F1 | 	add	objptr, ##41192
09b10     F2 24 02 FB | 	rdlong	local04, objptr
09b14     50 00 00 FF 
09b18     E8 E4 85 F1 | 	sub	objptr, ##41192
09b1c     01 24 16 F2 | 	cmp	local04, #1 wc
09b20     DC 00 90 CD |  if_b	jmp	#LR__0875
09b24     50 00 00 FF 
09b28     04 E5 05 F1 | 	add	objptr, ##41220
09b2c     F2 1E 02 FB | 	rdlong	local01, objptr
09b30     0F 25 02 F6 | 	mov	local04, local01
09b34     02 24 66 F0 | 	shl	local04, #2
09b38     0F 25 02 F1 | 	add	local04, local01
09b3c     02 24 66 F0 | 	shl	local04, #2
09b40     06 00 00 FF 
09b44     70 E4 85 F1 | 	sub	objptr, ##3184
09b48     F2 24 02 F1 | 	add	local04, objptr
09b4c     06 00 00 FF 
09b50     20 E4 05 F1 | 	add	objptr, ##3104
09b54     F2 1E 02 FB | 	rdlong	local01, objptr
09b58     50 00 00 FF 
09b5c     B4 E4 85 F1 | 	sub	objptr, ##41140
09b60     12 25 02 FB | 	rdlong	local04, local04
09b64     12 1F 0A F2 | 	cmp	local01, local04 wz
09b68     94 00 90 AD |  if_e	jmp	#LR__0875
09b6c     50 00 00 FF 
09b70     04 E5 05 F1 | 	add	objptr, ##41220
09b74     F2 1E 02 FB | 	rdlong	local01, objptr
09b78     0F 25 02 F6 | 	mov	local04, local01
09b7c     02 24 66 F0 | 	shl	local04, #2
09b80     0F 25 02 F1 | 	add	local04, local01
09b84     02 24 66 F0 | 	shl	local04, #2
09b88     06 00 00 FF 
09b8c     70 E4 85 F1 | 	sub	objptr, ##3184
09b90     F2 24 02 F1 | 	add	local04, objptr
09b94     12 25 02 FB | 	rdlong	local04, local04
09b98     06 00 00 FF 
09b9c     20 E4 05 F1 | 	add	objptr, ##3104
09ba0     F2 24 62 FC | 	wrlong	local04, objptr
09ba4     50 E4 05 F1 | 	add	objptr, #80
09ba8     F2 1E 02 FB | 	rdlong	local01, objptr
09bac     0F 25 02 F6 | 	mov	local04, local01
09bb0     02 24 66 F0 | 	shl	local04, #2
09bb4     0F 25 02 F1 | 	add	local04, local01
09bb8     02 24 66 F0 | 	shl	local04, #2
09bbc     06 00 00 FF 
09bc0     70 E4 85 F1 | 	sub	objptr, ##3184
09bc4     F2 24 02 F1 | 	add	local04, objptr
09bc8     04 24 06 F1 | 	add	local04, #4
09bcc     12 25 02 FB | 	rdlong	local04, local04
09bd0     06 00 00 FF 
09bd4     24 E4 05 F1 | 	add	objptr, ##3108
09bd8     F2 24 62 FC | 	wrlong	local04, objptr
09bdc     06 00 00 FF 
09be0     3C E4 85 F1 | 	sub	objptr, ##3132
09be4     F2 24 02 FB | 	rdlong	local04, objptr
09be8     01 24 86 F1 | 	sub	local04, #1
09bec     04 E4 05 F1 | 	add	objptr, #4
09bf0     F2 24 62 FC | 	wrlong	local04, objptr
09bf4     4A 00 00 FF 
09bf8     80 E4 85 F1 | 	sub	objptr, ##38016
09bfc     44 00 90 FD | 	jmp	#LR__0876
09c00                 | LR__0875
09c00     50 00 00 FF 
09c04     04 E5 05 F1 | 	add	objptr, ##41220
09c08     F2 24 02 FB | 	rdlong	local04, objptr
09c0c     12 1F 02 F6 | 	mov	local01, local04
09c10     02 1E 66 F0 | 	shl	local01, #2
09c14     12 1F 02 F1 | 	add	local01, local04
09c18     02 1E 66 F0 | 	shl	local01, #2
09c1c     06 00 00 FF 
09c20     70 E4 85 F1 | 	sub	objptr, ##3184
09c24     F2 1E 02 F1 | 	add	local01, objptr
09c28     04 1E 06 F1 | 	add	local01, #4
09c2c     0F 1F 02 FB | 	rdlong	local01, local01
09c30     01 1E 86 F1 | 	sub	local01, #1
09c34     14 E4 85 F1 | 	sub	objptr, #20
09c38     F2 1E 62 FC | 	wrlong	local01, objptr
09c3c     4A 00 00 FF 
09c40     80 E4 85 F1 | 	sub	objptr, ##38016
09c44                 | LR__0876
09c44                 | LR__0877
09c44     A7 F0 03 F6 | 	mov	ptra, fp
09c48     B2 00 A0 FD | 	call	#popregs_
09c4c                 | _do_next_ret
09c4c     2D 00 64 FD | 	ret
09c50                 | 
09c50                 | ' 
09c50                 | ' 
09c50                 | ' function compile_next() as ulong
09c50                 | _compile_next
09c50     04 4A 05 F6 | 	mov	COUNT_, #4
09c54     A8 00 A0 FD | 	call	#pushregs_
09c58     37 00 00 FF 
09c5c     44 E4 05 F1 | 	add	objptr, ##28228
09c60     F2 12 02 FB | 	rdlong	arg01, objptr
09c64     03 12 66 F0 | 	shl	arg01, #3
09c68     02 00 00 FF 
09c6c     38 E4 85 F1 | 	sub	objptr, ##1080
09c70     F2 12 02 F1 | 	add	arg01, objptr
09c74     09 1F 02 FB | 	rdlong	local01, arg01
09c78                 | ' 
09c78                 | ' varname$=lparts(ct).part$ 
09c78                 | ' 'suffix$=right$(varname$,1)
09c78                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09c78                 | ' if varnum=0 then compile_error(35)  : return 35
09c78     04 E4 85 F1 | 	sub	objptr, #4
09c7c     F2 14 0A FB | 	rdlong	arg02, objptr wz
09c80     35 00 00 FF 
09c84     08 E4 85 F1 | 	sub	objptr, ##27144
09c88     10 00 90 5D |  if_ne	jmp	#LR__0880
09c8c     23 12 06 F6 | 	mov	arg01, #35
09c90     D8 DD BF FD | 	call	#_compile_error
09c94     23 FA 05 F6 | 	mov	result1, #35
09c98     58 01 90 FD | 	jmp	#LR__0884
09c9c                 | LR__0880
09c9c     01 20 66 F6 | 	neg	local02, #1
09ca0                 | ' j=-1
09ca0                 | ' for i=0 to varnum-1
09ca0     00 22 06 F6 | 	mov	local03, #0
09ca4     35 00 00 FF 
09ca8     08 E4 05 F1 | 	add	objptr, ##27144
09cac     F2 24 02 FB | 	rdlong	local04, objptr
09cb0     35 00 00 FF 
09cb4     08 E4 85 F1 | 	sub	objptr, ##27144
09cb8                 | LR__0881
09cb8     12 23 12 F2 | 	cmp	local03, local04 wc
09cbc     38 00 90 3D |  if_ae	jmp	#LR__0882
09cc0                 | '   if variables(i).name=varname$ then j=i : exit
09cc0     11 15 02 F6 | 	mov	arg02, local03
09cc4     04 14 66 F0 | 	shl	arg02, #4
09cc8     14 00 00 FF 
09ccc     F8 E5 05 F1 | 	add	objptr, ##10744
09cd0     F2 14 02 F1 | 	add	arg02, objptr
09cd4     0A 13 02 FB | 	rdlong	arg01, arg02
09cd8     0F 15 02 F6 | 	mov	arg02, local01
09cdc     14 00 00 FF 
09ce0     F8 E5 85 F1 | 	sub	objptr, ##10744
09ce4     68 6A B1 FD | 	call	#__system___string_cmp
09ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
09cec     11 21 02 A6 |  if_e	mov	local02, local03
09cf0     01 22 06 51 |  if_ne	add	local03, #1
09cf4     C0 FF 9F 5D |  if_ne	jmp	#LR__0881
09cf8                 | LR__0882
09cf8                 | ' if j=-1 then compile_error(35) : return 35
09cf8     FF FF 7F FF 
09cfc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09d00     10 00 90 5D |  if_ne	jmp	#LR__0883
09d04     23 12 06 F6 | 	mov	arg01, #35
09d08     60 DD BF FD | 	call	#_compile_error
09d0c     23 FA 05 F6 | 	mov	result1, #35
09d10     E0 00 90 FD | 	jmp	#LR__0884
09d14                 | LR__0883
09d14     4A 00 00 FF 
09d18     7C E4 05 F1 | 	add	objptr, ##38012
09d1c     F2 24 02 FB | 	rdlong	local04, objptr
09d20     12 23 02 F6 | 	mov	local03, local04
09d24     01 22 66 F0 | 	shl	local03, #1
09d28     12 23 02 F1 | 	add	local03, local04
09d2c     02 22 66 F0 | 	shl	local03, #2
09d30     03 00 00 FF 
09d34     00 E4 85 F1 | 	sub	objptr, ##1536
09d38     F2 22 02 F1 | 	add	local03, objptr
09d3c     08 22 06 F1 | 	add	local03, #8
09d40     11 39 68 FC | 	wrlong	#28, local03
09d44     03 00 00 FF 
09d48     00 E4 05 F1 | 	add	objptr, ##1536
09d4c     F2 24 02 FB | 	rdlong	local04, objptr
09d50     12 23 02 F6 | 	mov	local03, local04
09d54     01 22 66 F0 | 	shl	local03, #1
09d58     12 23 02 F1 | 	add	local03, local04
09d5c     02 22 66 F0 | 	shl	local03, #2
09d60     03 00 00 FF 
09d64     00 E4 85 F1 | 	sub	objptr, ##1536
09d68     F2 22 02 F1 | 	add	local03, objptr
09d6c     11 21 62 FC | 	wrlong	local02, local03
09d70     03 00 00 FF 
09d74     00 E4 05 F1 | 	add	objptr, ##1536
09d78     F2 24 02 FB | 	rdlong	local04, objptr
09d7c     01 24 06 F1 | 	add	local04, #1
09d80     F2 24 62 FC | 	wrlong	local04, objptr
09d84     12 23 02 F6 | 	mov	local03, local04
09d88     01 22 66 F0 | 	shl	local03, #1
09d8c     12 23 02 F1 | 	add	local03, local04
09d90     02 22 66 F0 | 	shl	local03, #2
09d94     03 00 00 FF 
09d98     00 E4 85 F1 | 	sub	objptr, ##1536
09d9c     F2 22 02 F1 | 	add	local03, objptr
09da0     08 22 06 F1 | 	add	local03, #8
09da4     11 97 68 FC | 	wrlong	#75, local03
09da8     03 00 00 FF 
09dac     00 E4 05 F1 | 	add	objptr, ##1536
09db0     F2 24 02 FB | 	rdlong	local04, objptr
09db4     12 23 02 F6 | 	mov	local03, local04
09db8     01 22 66 F0 | 	shl	local03, #1
09dbc     12 23 02 F1 | 	add	local03, local04
09dc0     02 22 66 F0 | 	shl	local03, #2
09dc4     03 00 00 FF 
09dc8     00 E4 85 F1 | 	sub	objptr, ##1536
09dcc     F2 22 02 F1 | 	add	local03, objptr
09dd0     11 01 68 FC | 	wrlong	#0, local03
09dd4     03 00 00 FF 
09dd8     00 E4 05 F1 | 	add	objptr, ##1536
09ddc     F2 24 02 FB | 	rdlong	local04, objptr
09de0     01 24 06 F1 | 	add	local04, #1
09de4     F2 24 62 FC | 	wrlong	local04, objptr
09de8     4A 00 00 FF 
09dec     7C E4 85 F1 | 	sub	objptr, ##38012
09df0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09df0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09df0                 | ' return 0
09df0     00 FA 05 F6 | 	mov	result1, #0
09df4                 | LR__0884
09df4     A7 F0 03 F6 | 	mov	ptra, fp
09df8     B2 00 A0 FD | 	call	#popregs_
09dfc                 | _compile_next_ret
09dfc     2D 00 64 FD | 	ret
09e00                 | 
09e00                 | ' 
09e00                 | ' 
09e00                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09e00                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09e00                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09e00                 | ' 
09e00                 | ' function compile_gosub() as ulong
09e00                 | _compile_gosub
09e00     01 4A 05 F6 | 	mov	COUNT_, #1
09e04     A8 00 A0 FD | 	call	#pushregs_
09e08     4A 00 00 FF 
09e0c     7C E4 05 F1 | 	add	objptr, ##38012
09e10     F2 1E 02 FB | 	rdlong	local01, objptr
09e14     0F FB 01 F6 | 	mov	result1, local01
09e18     01 FA 65 F0 | 	shl	result1, #1
09e1c     0F FB 01 F1 | 	add	result1, local01
09e20     02 FA 65 F0 | 	shl	result1, #2
09e24     03 00 00 FF 
09e28     00 E4 85 F1 | 	sub	objptr, ##1536
09e2c     F2 FA 01 F1 | 	add	result1, objptr
09e30     08 FA 05 F1 | 	add	result1, #8
09e34     FD 52 69 FC | 	wrlong	#169, result1
09e38     03 00 00 FF 
09e3c     00 E4 05 F1 | 	add	objptr, ##1536
09e40     F2 1E 02 FB | 	rdlong	local01, objptr
09e44     01 1E 06 F1 | 	add	local01, #1
09e48     F2 1E 62 FC | 	wrlong	local01, objptr
09e4c     4A 00 00 FF 
09e50     7C E4 85 F1 | 	sub	objptr, ##38012
09e54     10 00 B0 FD | 	call	#_compile_goto
09e58                 | ' 
09e58                 | ' compiledline(lineptr).result_type=token_gosub
09e58                 | ' lineptr+=1
09e58                 | ' compile_goto()
09e58                 | ' return 0
09e58     00 FA 05 F6 | 	mov	result1, #0
09e5c     A7 F0 03 F6 | 	mov	ptra, fp
09e60     B2 00 A0 FD | 	call	#popregs_
09e64                 | _compile_gosub_ret
09e64     2D 00 64 FD | 	ret
09e68                 | 
09e68                 | ' 
09e68                 | ' function compile_goto( ) as ulong
09e68                 | _compile_goto
09e68     03 4A 05 F6 | 	mov	COUNT_, #3
09e6c     A8 00 A0 FD | 	call	#pushregs_
09e70     34 F0 07 F1 | 	add	ptra, #52
09e74                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09e74     37 00 00 FF 
09e78     44 E4 05 F1 | 	add	objptr, ##28228
09e7c     F2 16 02 FB | 	rdlong	arg03, objptr
09e80     03 16 66 F0 | 	shl	arg03, #3
09e84     02 00 00 FF 
09e88     38 E4 85 F1 | 	sub	objptr, ##1080
09e8c     F2 16 02 F1 | 	add	arg03, objptr
09e90     04 16 06 F1 | 	add	arg03, #4
09e94     0B 17 02 FB | 	rdlong	arg03, arg03
09e98     01 00 00 FF 
09e9c     00 16 0E F2 | 	cmp	arg03, ##512 wz
09ea0     35 00 00 FF 
09ea4     0C E4 85 F1 | 	sub	objptr, ##27148
09ea8     CC 02 90 5D |  if_ne	jmp	#LR__0895
09eac     37 00 00 FF 
09eb0     44 E4 05 F1 | 	add	objptr, ##28228
09eb4     F2 16 02 FB | 	rdlong	arg03, objptr
09eb8     01 16 06 F1 | 	add	arg03, #1
09ebc     03 16 66 F0 | 	shl	arg03, #3
09ec0     02 00 00 FF 
09ec4     38 E4 85 F1 | 	sub	objptr, ##1080
09ec8     F2 16 02 F1 | 	add	arg03, objptr
09ecc     04 16 06 F1 | 	add	arg03, #4
09ed0     0B 17 02 FB | 	rdlong	arg03, arg03
09ed4     FE 17 0E F2 | 	cmp	arg03, #510 wz
09ed8     35 00 00 FF 
09edc     0C E4 85 F1 | 	sub	objptr, ##27148
09ee0     94 02 90 5D |  if_ne	jmp	#LR__0895
09ee4     37 00 00 FF 
09ee8     44 E4 05 F1 | 	add	objptr, ##28228
09eec     F2 16 02 FB | 	rdlong	arg03, objptr
09ef0     03 16 66 F0 | 	shl	arg03, #3
09ef4     02 00 00 FF 
09ef8     38 E4 85 F1 | 	sub	objptr, ##1080
09efc     F2 16 02 F1 | 	add	arg03, objptr
09f00     0B 13 02 FB | 	rdlong	arg01, arg03
09f04     00 14 06 F6 | 	mov	arg02, #0
09f08     35 00 00 FF 
09f0c     0C E4 85 F1 | 	sub	objptr, ##27148
09f10     40 9A B1 FD | 	call	#__system____builtin_atoi
09f14     04 4E 05 F1 | 	add	fp, #4
09f18     A7 FA 61 FC | 	wrlong	result1, fp
09f1c     4A 00 00 FF 
09f20     7C E4 05 F1 | 	add	objptr, ##38012
09f24     F2 1E 02 FB | 	rdlong	local01, objptr
09f28     0F 21 02 F6 | 	mov	local02, local01
09f2c     01 20 66 F0 | 	shl	local02, #1
09f30     0F 21 02 F1 | 	add	local02, local01
09f34     02 20 66 F0 | 	shl	local02, #2
09f38     03 00 00 FF 
09f3c     00 E4 85 F1 | 	sub	objptr, ##1536
09f40     F2 20 02 F1 | 	add	local02, objptr
09f44     08 20 06 F1 | 	add	local02, #8
09f48     10 9D 68 FC | 	wrlong	#78, local02
09f4c     03 00 00 FF 
09f50     08 E4 05 F1 | 	add	objptr, ##1544
09f54     F2 22 02 FB | 	rdlong	local03, objptr
09f58     4A 00 00 FF 
09f5c     84 E4 85 F1 | 	sub	objptr, ##38020
09f60     04 4E 05 F1 | 	add	fp, #4
09f64     A7 22 62 FC | 	wrlong	local03, fp
09f68     08 4E 85 F1 | 	sub	fp, #8
09f6c                 | ' 
09f6c                 | '   gotoline=val%(lparts(ct).part$) 
09f6c                 | '   compiledline(lineptr).result_type=token_fast_goto
09f6c                 | ' ' now find a pointer to goto
09f6c                 | '   gotoptr=programstart
09f6c                 | '   do
09f6c                 | LR__0890
09f6c     10 4E 05 F1 | 	add	fp, #16
09f70     A7 12 02 F6 | 	mov	arg01, fp
09f74     08 4E 85 F1 | 	sub	fp, #8
09f78     A7 14 02 FB | 	rdlong	arg02, fp
09f7c     08 4E 85 F1 | 	sub	fp, #8
09f80     18 16 06 F6 | 	mov	arg03, #24
09f84     0B 00 00 FF 
09f88     CC E4 05 F1 | 	add	objptr, ##5836
09f8c     58 5B B1 FD | 	call	#_psram_spin2_read1
09f90     0B 00 00 FF 
09f94     CC E4 85 F1 | 	sub	objptr, ##5836
09f98                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09f98                 | '     if gotoheader(0)<>$FFFFFFFF then
09f98     10 4E 05 F1 | 	add	fp, #16
09f9c     A7 22 02 FB | 	rdlong	local03, fp
09fa0     10 4E 85 F1 | 	sub	fp, #16
09fa4     FF FF 7F FF 
09fa8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
09fac     24 00 90 AD |  if_e	jmp	#LR__0891
09fb0     08 4E 05 F1 | 	add	fp, #8
09fb4     A7 22 02 FB | 	rdlong	local03, fp
09fb8     04 4E 05 F1 | 	add	fp, #4
09fbc     A7 22 62 FC | 	wrlong	local03, fp
09fc0     18 4E 05 F1 | 	add	fp, #24
09fc4     A7 22 02 FB | 	rdlong	local03, fp
09fc8     1C 4E 85 F1 | 	sub	fp, #28
09fcc     A7 22 62 FC | 	wrlong	local03, fp
09fd0     08 4E 85 F1 | 	sub	fp, #8
09fd4                 | LR__0891
09fd4     24 4E 05 F1 | 	add	fp, #36
09fd8     A7 22 02 FB | 	rdlong	local03, fp
09fdc     24 4E 85 F1 | 	sub	fp, #36
09fe0     FF FF 3F FF 
09fe4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09fe8     10 4E 05 51 |  if_ne	add	fp, #16
09fec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09ff0     10 4E 85 51 |  if_ne	sub	fp, #16
09ff4     FF FF 7F 5F 
09ff8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09ffc     1C 00 90 AD |  if_e	jmp	#LR__0892
0a000     10 4E 05 F1 | 	add	fp, #16
0a004     A7 22 02 FB | 	rdlong	local03, fp
0a008     0C 4E 85 F1 | 	sub	fp, #12
0a00c     A7 20 02 FB | 	rdlong	local02, fp
0a010     04 4E 85 F1 | 	sub	fp, #4
0a014     10 23 0A F2 | 	cmp	local03, local02 wz
0a018     50 FF 9F 5D |  if_ne	jmp	#LR__0890
0a01c                 | LR__0892
0a01c                 | '   if gotoheader(0)=gotoline then
0a01c     10 4E 05 F1 | 	add	fp, #16
0a020     A7 22 02 FB | 	rdlong	local03, fp
0a024     0C 4E 85 F1 | 	sub	fp, #12
0a028     A7 1E 02 FB | 	rdlong	local01, fp
0a02c     04 4E 85 F1 | 	sub	fp, #4
0a030     0F 23 0A F2 | 	cmp	local03, local01 wz
0a034     7C 00 90 5D |  if_ne	jmp	#LR__0893
0a038     4A 00 00 FF 
0a03c     7C E4 05 F1 | 	add	objptr, ##38012
0a040     F2 1E 02 FB | 	rdlong	local01, objptr
0a044     0F 21 02 F6 | 	mov	local02, local01
0a048     01 20 66 F0 | 	shl	local02, #1
0a04c     0F 21 02 F1 | 	add	local02, local01
0a050     02 20 66 F0 | 	shl	local02, #2
0a054     03 00 00 FF 
0a058     00 E4 85 F1 | 	sub	objptr, ##1536
0a05c     F2 20 02 F1 | 	add	local02, objptr
0a060     0C 4E 05 F1 | 	add	fp, #12
0a064     A7 22 02 FB | 	rdlong	local03, fp
0a068     10 23 62 FC | 	wrlong	local03, local02
0a06c     03 00 00 FF 
0a070     00 E4 05 F1 | 	add	objptr, ##1536
0a074     F2 1E 02 FB | 	rdlong	local01, objptr
0a078     0F 21 02 F6 | 	mov	local02, local01
0a07c     01 20 66 F0 | 	shl	local02, #1
0a080     0F 21 02 F1 | 	add	local02, local01
0a084     02 20 66 F0 | 	shl	local02, #2
0a088     03 00 00 FF 
0a08c     00 E4 85 F1 | 	sub	objptr, ##1536
0a090     F2 20 02 F1 | 	add	local02, objptr
0a094     08 4E 85 F1 | 	sub	fp, #8
0a098     A7 22 02 FB | 	rdlong	local03, fp
0a09c     04 4E 85 F1 | 	sub	fp, #4
0a0a0     04 20 06 F1 | 	add	local02, #4
0a0a4     10 23 62 FC | 	wrlong	local03, local02
0a0a8     47 00 00 FF 
0a0ac     7C E4 85 F1 | 	sub	objptr, ##36476
0a0b0     A4 00 90 FD | 	jmp	#LR__0894
0a0b4                 | LR__0893
0a0b4     4A 00 00 FF 
0a0b8     7C E4 05 F1 | 	add	objptr, ##38012
0a0bc     F2 1E 02 FB | 	rdlong	local01, objptr
0a0c0     0F 21 02 F6 | 	mov	local02, local01
0a0c4     01 20 66 F0 | 	shl	local02, #1
0a0c8     0F 21 02 F1 | 	add	local02, local01
0a0cc     02 20 66 F0 | 	shl	local02, #2
0a0d0     03 00 00 FF 
0a0d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0d8     F2 20 02 F1 | 	add	local02, objptr
0a0dc     00 00 C0 FF 
0a0e0     10 01 68 FC | 	wrlong	##-2147483648, local02
0a0e4     03 00 00 FF 
0a0e8     00 E4 05 F1 | 	add	objptr, ##1536
0a0ec     F2 1E 02 FB | 	rdlong	local01, objptr
0a0f0     0F 21 02 F6 | 	mov	local02, local01
0a0f4     01 20 66 F0 | 	shl	local02, #1
0a0f8     0F 21 02 F1 | 	add	local02, local01
0a0fc     02 20 66 F0 | 	shl	local02, #2
0a100     03 00 00 FF 
0a104     00 E4 85 F1 | 	sub	objptr, ##1536
0a108     F2 20 02 F1 | 	add	local02, objptr
0a10c     04 4E 05 F1 | 	add	fp, #4
0a110     A7 22 02 FB | 	rdlong	local03, fp
0a114     04 4E 85 F1 | 	sub	fp, #4
0a118     04 20 06 F1 | 	add	local02, #4
0a11c     10 23 62 FC | 	wrlong	local03, local02
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 1E 02 FB | 	rdlong	local01, objptr
0a12c     0F 21 02 F6 | 	mov	local02, local01
0a130     01 20 66 F0 | 	shl	local02, #1
0a134     0F 21 02 F1 | 	add	local02, local01
0a138     02 20 66 F0 | 	shl	local02, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 20 02 F1 | 	add	local02, objptr
0a148     08 20 06 F1 | 	add	local02, #8
0a14c     10 A7 68 FC | 	wrlong	#83, local02
0a150     47 00 00 FF 
0a154     7C E4 85 F1 | 	sub	objptr, ##36476
0a158                 | LR__0894
0a158     4A 00 00 FF 
0a15c     7C E4 05 F1 | 	add	objptr, ##38012
0a160     F2 22 02 FB | 	rdlong	local03, objptr
0a164     01 22 06 F1 | 	add	local03, #1
0a168     F2 22 62 FC | 	wrlong	local03, objptr
0a16c     4A 00 00 FF 
0a170     7C E4 85 F1 | 	sub	objptr, ##38012
0a174     D0 00 90 FD | 	jmp	#LR__0896
0a178                 | LR__0895
0a178     DC 00 B0 FD | 	call	#_expr
0a17c     30 4E 05 F1 | 	add	fp, #48
0a180     A7 9E 68 FC | 	wrlong	#79, fp
0a184     08 4E 85 F1 | 	sub	fp, #8
0a188     A7 00 68 FC | 	wrlong	#0, fp
0a18c     04 4E 05 F1 | 	add	fp, #4
0a190     A7 22 02 FB | 	rdlong	local03, fp
0a194     04 4E 05 F1 | 	add	fp, #4
0a198     A7 1E 02 FB | 	rdlong	local01, fp
0a19c     30 4E 85 F1 | 	sub	fp, #48
0a1a0     4A 00 00 FF 
0a1a4     7C E4 05 F1 | 	add	objptr, ##38012
0a1a8     F2 20 02 FB | 	rdlong	local02, objptr
0a1ac     10 17 02 F6 | 	mov	arg03, local02
0a1b0     01 16 66 F0 | 	shl	arg03, #1
0a1b4     10 17 02 F1 | 	add	arg03, local02
0a1b8     02 16 66 F0 | 	shl	arg03, #2
0a1bc     03 00 00 FF 
0a1c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a1c4     F2 16 02 F1 | 	add	arg03, objptr
0a1c8     0B 01 68 FC | 	wrlong	#0, arg03
0a1cc     03 00 00 FF 
0a1d0     00 E4 05 F1 | 	add	objptr, ##1536
0a1d4     F2 20 02 FB | 	rdlong	local02, objptr
0a1d8     10 17 02 F6 | 	mov	arg03, local02
0a1dc     01 16 66 F0 | 	shl	arg03, #1
0a1e0     10 17 02 F1 | 	add	arg03, local02
0a1e4     02 16 66 F0 | 	shl	arg03, #2
0a1e8     03 00 00 FF 
0a1ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a1f0     F2 16 02 F1 | 	add	arg03, objptr
0a1f4     04 16 06 F1 | 	add	arg03, #4
0a1f8     0B 23 62 FC | 	wrlong	local03, arg03
0a1fc     03 00 00 FF 
0a200     00 E4 05 F1 | 	add	objptr, ##1536
0a204     F2 22 02 FB | 	rdlong	local03, objptr
0a208     11 21 02 F6 | 	mov	local02, local03
0a20c     01 20 66 F0 | 	shl	local02, #1
0a210     11 21 02 F1 | 	add	local02, local03
0a214     02 20 66 F0 | 	shl	local02, #2
0a218     03 00 00 FF 
0a21c     00 E4 85 F1 | 	sub	objptr, ##1536
0a220     F2 20 02 F1 | 	add	local02, objptr
0a224     08 20 06 F1 | 	add	local02, #8
0a228     10 1F 62 FC | 	wrlong	local01, local02
0a22c     03 00 00 FF 
0a230     00 E4 05 F1 | 	add	objptr, ##1536
0a234     F2 22 02 FB | 	rdlong	local03, objptr
0a238     01 22 06 F1 | 	add	local03, #1
0a23c     F2 22 62 FC | 	wrlong	local03, objptr
0a240     4A 00 00 FF 
0a244     7C E4 85 F1 | 	sub	objptr, ##38012
0a248                 | LR__0896
0a248                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0a248                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0a248                 | ' return 0
0a248     00 FA 05 F6 | 	mov	result1, #0
0a24c     A7 F0 03 F6 | 	mov	ptra, fp
0a250     B2 00 A0 FD | 	call	#popregs_
0a254                 | _compile_goto_ret
0a254     2D 00 64 FD | 	ret
0a258                 | 
0a258                 | ' 
0a258                 | ' 
0a258                 | ' 
0a258                 | ' 
0a258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a258                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0a258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a258                 | ' 
0a258                 | ' 
0a258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a258                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0a258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a258                 | ' 
0a258                 | ' 
0a258                 | ' function expr() as integer 
0a258                 | _expr
0a258     07 4A 05 F6 | 	mov	COUNT_, #7
0a25c     A8 00 A0 FD | 	call	#pushregs_
0a260                 | _expr_enter
0a260     37 00 00 FF 
0a264     44 E4 05 F1 | 	add	objptr, ##28228
0a268     F2 24 02 FB | 	rdlong	local04, objptr
0a26c     03 24 66 F0 | 	shl	local04, #3
0a270     02 00 00 FF 
0a274     38 E4 85 F1 | 	sub	objptr, ##1080
0a278     F2 24 02 F1 | 	add	local04, objptr
0a27c     04 24 06 F1 | 	add	local04, #4
0a280     12 27 02 FB | 	rdlong	local05, local04
0a284                 | ' 
0a284                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a284     FE 27 0E F2 | 	cmp	local05, #510 wz
0a288     35 00 00 FF 
0a28c     0C E4 85 F1 | 	sub	objptr, ##27148
0a290     C4 00 90 5D |  if_ne	jmp	#LR__0900
0a294     1D 1E 06 F6 | 	mov	local01, #29
0a298     FF 22 06 F6 | 	mov	local03, #255
0a29c     0F 29 02 F6 | 	mov	local06, local01
0a2a0     10 2B 02 F6 | 	mov	local07, local02
0a2a4     11 1F 02 F6 | 	mov	local01, local03
0a2a8     4A 00 00 FF 
0a2ac     7C E4 05 F1 | 	add	objptr, ##38012
0a2b0     F2 26 02 FB | 	rdlong	local05, objptr
0a2b4     13 25 02 F6 | 	mov	local04, local05
0a2b8     01 24 66 F0 | 	shl	local04, #1
0a2bc     13 25 02 F1 | 	add	local04, local05
0a2c0     02 24 66 F0 | 	shl	local04, #2
0a2c4     03 00 00 FF 
0a2c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a2cc     F2 24 02 F1 | 	add	local04, objptr
0a2d0     12 29 62 FC | 	wrlong	local06, local04
0a2d4     03 00 00 FF 
0a2d8     00 E4 05 F1 | 	add	objptr, ##1536
0a2dc     F2 28 02 FB | 	rdlong	local06, objptr
0a2e0     14 27 02 F6 | 	mov	local05, local06
0a2e4     01 26 66 F0 | 	shl	local05, #1
0a2e8     14 27 02 F1 | 	add	local05, local06
0a2ec     02 26 66 F0 | 	shl	local05, #2
0a2f0     03 00 00 FF 
0a2f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2f8     F2 26 02 F1 | 	add	local05, objptr
0a2fc     04 26 06 F1 | 	add	local05, #4
0a300     13 2B 62 FC | 	wrlong	local07, local05
0a304     03 00 00 FF 
0a308     00 E4 05 F1 | 	add	objptr, ##1536
0a30c     F2 2A 02 FB | 	rdlong	local07, objptr
0a310     15 29 02 F6 | 	mov	local06, local07
0a314     01 28 66 F0 | 	shl	local06, #1
0a318     15 29 02 F1 | 	add	local06, local07
0a31c     02 28 66 F0 | 	shl	local06, #2
0a320     03 00 00 FF 
0a324     00 E4 85 F1 | 	sub	objptr, ##1536
0a328     F2 28 02 F1 | 	add	local06, objptr
0a32c     08 28 06 F1 | 	add	local06, #8
0a330     14 1F 62 FC | 	wrlong	local01, local06
0a334     03 00 00 FF 
0a338     00 E4 05 F1 | 	add	objptr, ##1536
0a33c     F2 28 02 FB | 	rdlong	local06, objptr
0a340     01 28 06 F1 | 	add	local06, #1
0a344     F2 28 62 FC | 	wrlong	local06, objptr
0a348     4A 00 00 FF 
0a34c     7C E4 85 F1 | 	sub	objptr, ##38012
0a350     1D FA 05 F6 | 	mov	result1, #29
0a354     54 01 90 FD | 	jmp	#LR__0903
0a358                 | LR__0900
0a358     00 1E 06 F6 | 	mov	local01, #0
0a35c     58 01 B0 FD | 	call	#_addsub
0a360     37 00 00 FF 
0a364     44 E4 05 F1 | 	add	objptr, ##28228
0a368     F2 24 02 FB | 	rdlong	local04, objptr
0a36c     03 24 66 F0 | 	shl	local04, #3
0a370     02 00 00 FF 
0a374     38 E4 85 F1 | 	sub	objptr, ##1080
0a378     F2 24 02 F1 | 	add	local04, objptr
0a37c     04 24 06 F1 | 	add	local04, #4
0a380     12 27 02 FB | 	rdlong	local05, local04
0a384                 | ' t3.result.uresult=0
0a384                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a384                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a384                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a384     35 00 00 FF 
0a388     0C E4 85 F1 | 	sub	objptr, ##27148
0a38c                 | LR__0901
0a38c     1B 26 0E F2 | 	cmp	local05, #27 wz
0a390     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a394     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a398     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a39c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a3a0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a3a4     00 01 90 5D |  if_ne	jmp	#LR__0902
0a3a8     37 00 00 FF 
0a3ac     44 E4 05 F1 | 	add	objptr, ##28228
0a3b0     F2 28 02 FB | 	rdlong	local06, objptr
0a3b4     01 28 06 F1 | 	add	local06, #1
0a3b8     F2 28 62 FC | 	wrlong	local06, objptr
0a3bc     37 00 00 FF 
0a3c0     44 E4 85 F1 | 	sub	objptr, ##28228
0a3c4     F0 00 B0 FD | 	call	#_addsub
0a3c8     13 23 02 F6 | 	mov	local03, local05
0a3cc     0F 29 02 F6 | 	mov	local06, local01
0a3d0     10 2B 02 F6 | 	mov	local07, local02
0a3d4     11 27 02 F6 | 	mov	local05, local03
0a3d8     4A 00 00 FF 
0a3dc     7C E4 05 F1 | 	add	objptr, ##38012
0a3e0     F2 24 02 FB | 	rdlong	local04, objptr
0a3e4     12 FB 01 F6 | 	mov	result1, local04
0a3e8     01 FA 65 F0 | 	shl	result1, #1
0a3ec     12 FB 01 F1 | 	add	result1, local04
0a3f0     02 FA 65 F0 | 	shl	result1, #2
0a3f4     03 00 00 FF 
0a3f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3fc     F2 FA 01 F1 | 	add	result1, objptr
0a400     FD 28 62 FC | 	wrlong	local06, result1
0a404     03 00 00 FF 
0a408     00 E4 05 F1 | 	add	objptr, ##1536
0a40c     F2 28 02 FB | 	rdlong	local06, objptr
0a410     14 25 02 F6 | 	mov	local04, local06
0a414     01 24 66 F0 | 	shl	local04, #1
0a418     14 25 02 F1 | 	add	local04, local06
0a41c     02 24 66 F0 | 	shl	local04, #2
0a420     03 00 00 FF 
0a424     00 E4 85 F1 | 	sub	objptr, ##1536
0a428     F2 24 02 F1 | 	add	local04, objptr
0a42c     04 24 06 F1 | 	add	local04, #4
0a430     12 2B 62 FC | 	wrlong	local07, local04
0a434     03 00 00 FF 
0a438     00 E4 05 F1 | 	add	objptr, ##1536
0a43c     F2 2A 02 FB | 	rdlong	local07, objptr
0a440     15 29 02 F6 | 	mov	local06, local07
0a444     01 28 66 F0 | 	shl	local06, #1
0a448     15 29 02 F1 | 	add	local06, local07
0a44c     02 28 66 F0 | 	shl	local06, #2
0a450     03 00 00 FF 
0a454     00 E4 85 F1 | 	sub	objptr, ##1536
0a458     F2 28 02 F1 | 	add	local06, objptr
0a45c     08 28 06 F1 | 	add	local06, #8
0a460     14 27 62 FC | 	wrlong	local05, local06
0a464     03 00 00 FF 
0a468     00 E4 05 F1 | 	add	objptr, ##1536
0a46c     F2 28 02 FB | 	rdlong	local06, objptr
0a470     01 28 06 F1 | 	add	local06, #1
0a474     F2 28 62 FC | 	wrlong	local06, objptr
0a478     13 00 00 FF 
0a47c     38 E4 85 F1 | 	sub	objptr, ##9784
0a480     F2 24 02 FB | 	rdlong	local04, objptr
0a484     03 24 66 F0 | 	shl	local04, #3
0a488     02 00 00 FF 
0a48c     38 E4 85 F1 | 	sub	objptr, ##1080
0a490     F2 24 02 F1 | 	add	local04, objptr
0a494     04 24 06 F1 | 	add	local04, #4
0a498     12 27 02 FB | 	rdlong	local05, local04
0a49c     35 00 00 FF 
0a4a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a4a4     E4 FE 9F FD | 	jmp	#LR__0901
0a4a8                 | LR__0902
0a4a8                 | ' return 0  
0a4a8     00 FA 05 F6 | 	mov	result1, #0
0a4ac                 | LR__0903
0a4ac     A7 F0 03 F6 | 	mov	ptra, fp
0a4b0     B2 00 A0 FD | 	call	#popregs_
0a4b4                 | _expr_ret
0a4b4     2D 00 64 FD | 	ret
0a4b8                 | 
0a4b8                 | ' 
0a4b8                 | ' 
0a4b8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0a4b8                 | ' 
0a4b8                 | ' function addsub() as integer 
0a4b8                 | _addsub
0a4b8     07 4A 05 F6 | 	mov	COUNT_, #7
0a4bc     A8 00 A0 FD | 	call	#pushregs_
0a4c0                 | _addsub_enter
0a4c0     00 1E 06 F6 | 	mov	local01, #0
0a4c4     50 01 B0 FD | 	call	#_muldiv
0a4c8     37 00 00 FF 
0a4cc     44 E4 05 F1 | 	add	objptr, ##28228
0a4d0     F2 24 02 FB | 	rdlong	local04, objptr
0a4d4     03 24 66 F0 | 	shl	local04, #3
0a4d8     02 00 00 FF 
0a4dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a4e0     F2 24 02 F1 | 	add	local04, objptr
0a4e4     04 24 06 F1 | 	add	local04, #4
0a4e8     12 27 02 FB | 	rdlong	local05, local04
0a4ec                 | ' t3.result.uresult=0
0a4ec                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a4ec                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a4ec                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a4ec     35 00 00 FF 
0a4f0     0C E4 85 F1 | 	sub	objptr, ##27148
0a4f4                 | LR__0910
0a4f4     01 26 0E F2 | 	cmp	local05, #1 wz
0a4f8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a4fc     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a500     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a504     00 01 90 5D |  if_ne	jmp	#LR__0911
0a508     37 00 00 FF 
0a50c     44 E4 05 F1 | 	add	objptr, ##28228
0a510     F2 24 02 FB | 	rdlong	local04, objptr
0a514     01 24 06 F1 | 	add	local04, #1
0a518     F2 24 62 FC | 	wrlong	local04, objptr
0a51c     37 00 00 FF 
0a520     44 E4 85 F1 | 	sub	objptr, ##28228
0a524     F0 00 B0 FD | 	call	#_muldiv
0a528     13 23 02 F6 | 	mov	local03, local05
0a52c     0F 29 02 F6 | 	mov	local06, local01
0a530     10 2B 02 F6 | 	mov	local07, local02
0a534     11 27 02 F6 | 	mov	local05, local03
0a538     4A 00 00 FF 
0a53c     7C E4 05 F1 | 	add	objptr, ##38012
0a540     F2 24 02 FB | 	rdlong	local04, objptr
0a544     12 FB 01 F6 | 	mov	result1, local04
0a548     01 FA 65 F0 | 	shl	result1, #1
0a54c     12 FB 01 F1 | 	add	result1, local04
0a550     02 FA 65 F0 | 	shl	result1, #2
0a554     03 00 00 FF 
0a558     00 E4 85 F1 | 	sub	objptr, ##1536
0a55c     F2 FA 01 F1 | 	add	result1, objptr
0a560     FD 28 62 FC | 	wrlong	local06, result1
0a564     03 00 00 FF 
0a568     00 E4 05 F1 | 	add	objptr, ##1536
0a56c     F2 28 02 FB | 	rdlong	local06, objptr
0a570     14 25 02 F6 | 	mov	local04, local06
0a574     01 24 66 F0 | 	shl	local04, #1
0a578     14 25 02 F1 | 	add	local04, local06
0a57c     02 24 66 F0 | 	shl	local04, #2
0a580     03 00 00 FF 
0a584     00 E4 85 F1 | 	sub	objptr, ##1536
0a588     F2 24 02 F1 | 	add	local04, objptr
0a58c     04 24 06 F1 | 	add	local04, #4
0a590     12 2B 62 FC | 	wrlong	local07, local04
0a594     03 00 00 FF 
0a598     00 E4 05 F1 | 	add	objptr, ##1536
0a59c     F2 2A 02 FB | 	rdlong	local07, objptr
0a5a0     15 29 02 F6 | 	mov	local06, local07
0a5a4     01 28 66 F0 | 	shl	local06, #1
0a5a8     15 29 02 F1 | 	add	local06, local07
0a5ac     02 28 66 F0 | 	shl	local06, #2
0a5b0     03 00 00 FF 
0a5b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a5b8     F2 28 02 F1 | 	add	local06, objptr
0a5bc     08 28 06 F1 | 	add	local06, #8
0a5c0     14 27 62 FC | 	wrlong	local05, local06
0a5c4     03 00 00 FF 
0a5c8     00 E4 05 F1 | 	add	objptr, ##1536
0a5cc     F2 28 02 FB | 	rdlong	local06, objptr
0a5d0     01 28 06 F1 | 	add	local06, #1
0a5d4     F2 28 62 FC | 	wrlong	local06, objptr
0a5d8     13 00 00 FF 
0a5dc     38 E4 85 F1 | 	sub	objptr, ##9784
0a5e0     F2 24 02 FB | 	rdlong	local04, objptr
0a5e4     03 24 66 F0 | 	shl	local04, #3
0a5e8     02 00 00 FF 
0a5ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a5f0     F2 24 02 F1 | 	add	local04, objptr
0a5f4     04 24 06 F1 | 	add	local04, #4
0a5f8     12 27 02 FB | 	rdlong	local05, local04
0a5fc     35 00 00 FF 
0a600     0C E4 85 F1 | 	sub	objptr, ##27148
0a604     EC FE 9F FD | 	jmp	#LR__0910
0a608                 | LR__0911
0a608                 | '   return 0
0a608     00 FA 05 F6 | 	mov	result1, #0
0a60c     A7 F0 03 F6 | 	mov	ptra, fp
0a610     B2 00 A0 FD | 	call	#popregs_
0a614                 | _addsub_ret
0a614     2D 00 64 FD | 	ret
0a618                 | 
0a618                 | ' 
0a618                 | ' sub muldiv()
0a618                 | _muldiv
0a618     08 4A 05 F6 | 	mov	COUNT_, #8
0a61c     A8 00 A0 FD | 	call	#pushregs_
0a620                 | _muldiv_enter
0a620     00 1E 06 F6 | 	mov	local01, #0
0a624     58 01 B0 FD | 	call	#_getvalue
0a628     37 00 00 FF 
0a62c     44 E4 05 F1 | 	add	objptr, ##28228
0a630     F2 24 02 FB | 	rdlong	local04, objptr
0a634     03 24 66 F0 | 	shl	local04, #3
0a638     02 00 00 FF 
0a63c     38 E4 85 F1 | 	sub	objptr, ##1080
0a640     F2 24 02 F1 | 	add	local04, objptr
0a644     04 24 06 F1 | 	add	local04, #4
0a648     12 27 02 FB | 	rdlong	local05, local04
0a64c                 | ' t3.result.uresult=0
0a64c                 | ' getvalue()    
0a64c                 | ' op = lparts(ct).token
0a64c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a64c     35 00 00 FF 
0a650     0C E4 85 F1 | 	sub	objptr, ##27148
0a654                 | LR__0920
0a654     05 26 0E F2 | 	cmp	local05, #5 wz
0a658     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a65c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a660     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a664     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a668     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a66c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a670     00 01 90 5D |  if_ne	jmp	#LR__0921
0a674     37 00 00 FF 
0a678     44 E4 05 F1 | 	add	objptr, ##28228
0a67c     F2 24 02 FB | 	rdlong	local04, objptr
0a680     01 24 06 F1 | 	add	local04, #1
0a684     F2 24 62 FC | 	wrlong	local04, objptr
0a688     37 00 00 FF 
0a68c     44 E4 85 F1 | 	sub	objptr, ##28228
0a690     EC 00 B0 FD | 	call	#_getvalue
0a694     13 23 02 F6 | 	mov	local03, local05
0a698     0F 29 02 F6 | 	mov	local06, local01
0a69c     10 2B 02 F6 | 	mov	local07, local02
0a6a0     11 27 02 F6 | 	mov	local05, local03
0a6a4     4A 00 00 FF 
0a6a8     7C E4 05 F1 | 	add	objptr, ##38012
0a6ac     F2 24 02 FB | 	rdlong	local04, objptr
0a6b0     12 2D 02 F6 | 	mov	local08, local04
0a6b4     01 2C 66 F0 | 	shl	local08, #1
0a6b8     12 2D 02 F1 | 	add	local08, local04
0a6bc     02 2C 66 F0 | 	shl	local08, #2
0a6c0     03 00 00 FF 
0a6c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c8     F2 2C 02 F1 | 	add	local08, objptr
0a6cc     16 29 62 FC | 	wrlong	local06, local08
0a6d0     03 00 00 FF 
0a6d4     00 E4 05 F1 | 	add	objptr, ##1536
0a6d8     F2 2C 02 FB | 	rdlong	local08, objptr
0a6dc     16 29 02 F6 | 	mov	local06, local08
0a6e0     01 28 66 F0 | 	shl	local06, #1
0a6e4     16 29 02 F1 | 	add	local06, local08
0a6e8     02 28 66 F0 | 	shl	local06, #2
0a6ec     03 00 00 FF 
0a6f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f4     F2 28 02 F1 | 	add	local06, objptr
0a6f8     04 28 06 F1 | 	add	local06, #4
0a6fc     14 2B 62 FC | 	wrlong	local07, local06
0a700     03 00 00 FF 
0a704     00 E4 05 F1 | 	add	objptr, ##1536
0a708     F2 2C 02 FB | 	rdlong	local08, objptr
0a70c     16 2B 02 F6 | 	mov	local07, local08
0a710     01 2A 66 F0 | 	shl	local07, #1
0a714     16 2B 02 F1 | 	add	local07, local08
0a718     02 2A 66 F0 | 	shl	local07, #2
0a71c     03 00 00 FF 
0a720     00 E4 85 F1 | 	sub	objptr, ##1536
0a724     F2 2A 02 F1 | 	add	local07, objptr
0a728     08 2A 06 F1 | 	add	local07, #8
0a72c     15 27 62 FC | 	wrlong	local05, local07
0a730     03 00 00 FF 
0a734     00 E4 05 F1 | 	add	objptr, ##1536
0a738     F2 28 02 FB | 	rdlong	local06, objptr
0a73c     01 28 06 F1 | 	add	local06, #1
0a740     F2 28 62 FC | 	wrlong	local06, objptr
0a744     13 00 00 FF 
0a748     38 E4 85 F1 | 	sub	objptr, ##9784
0a74c     F2 24 02 FB | 	rdlong	local04, objptr
0a750     03 24 66 F0 | 	shl	local04, #3
0a754     02 00 00 FF 
0a758     38 E4 85 F1 | 	sub	objptr, ##1080
0a75c     F2 24 02 F1 | 	add	local04, objptr
0a760     04 24 06 F1 | 	add	local04, #4
0a764     12 27 02 FB | 	rdlong	local05, local04
0a768     35 00 00 FF 
0a76c     0C E4 85 F1 | 	sub	objptr, ##27148
0a770     E0 FE 9F FD | 	jmp	#LR__0920
0a774                 | LR__0921
0a774     A7 F0 03 F6 | 	mov	ptra, fp
0a778     B2 00 A0 FD | 	call	#popregs_
0a77c                 | _muldiv_ret
0a77c     2D 00 64 FD | 	ret
0a780                 | 
0a780                 | ' 
0a780                 | ' sub getvalue() 
0a780                 | _getvalue
0a780     0B 4A 05 F6 | 	mov	COUNT_, #11
0a784     A8 00 A0 FD | 	call	#pushregs_
0a788                 | _getvalue_enter
0a788     01 24 06 F6 | 	mov	local04, #1
0a78c     00 1E 06 F6 | 	mov	local01, #0
0a790     1D 22 06 F6 | 	mov	local03, #29
0a794     37 00 00 FF 
0a798     44 E4 05 F1 | 	add	objptr, ##28228
0a79c     F2 16 02 FB | 	rdlong	arg03, objptr
0a7a0     03 16 66 F0 | 	shl	arg03, #3
0a7a4     02 00 00 FF 
0a7a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7ac     F2 16 02 F1 | 	add	arg03, objptr
0a7b0     04 16 06 F1 | 	add	arg03, #4
0a7b4     0B 27 02 FB | 	rdlong	local05, arg03
0a7b8                 | ' m=1
0a7b8                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a7b8                 | ' op=lparts(ct).token
0a7b8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0a7b8     02 26 0E F2 | 	cmp	local05, #2 wz
0a7bc     35 00 00 FF 
0a7c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7c4     38 00 90 5D |  if_ne	jmp	#LR__0930
0a7c8     01 24 66 F6 | 	neg	local04, #1
0a7cc     37 00 00 FF 
0a7d0     44 E4 05 F1 | 	add	objptr, ##28228
0a7d4     F2 26 02 FB | 	rdlong	local05, objptr
0a7d8     01 26 06 F1 | 	add	local05, #1
0a7dc     F2 26 62 FC | 	wrlong	local05, objptr
0a7e0     03 26 66 F0 | 	shl	local05, #3
0a7e4     02 00 00 FF 
0a7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7ec     F2 26 02 F1 | 	add	local05, objptr
0a7f0     04 26 06 F1 | 	add	local05, #4
0a7f4     13 27 02 FB | 	rdlong	local05, local05
0a7f8     35 00 00 FF 
0a7fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a800                 | LR__0930
0a800                 | ' select case op
0a800     01 00 00 FF 
0a804     00 26 0E F2 | 	cmp	local05, ##512 wz
0a808     44 00 90 AD |  if_e	jmp	#LR__0931
0a80c     01 00 00 FF 
0a810     01 26 0E F2 | 	cmp	local05, ##513 wz
0a814     90 01 90 AD |  if_e	jmp	#LR__0934
0a818     01 00 00 FF 
0a81c     02 26 0E F2 | 	cmp	local05, ##514 wz
0a820     44 04 90 AD |  if_e	jmp	#LR__0941
0a824     01 00 00 FF 
0a828     03 26 0E F2 | 	cmp	local05, ##515 wz
0a82c     A8 05 90 AD |  if_e	jmp	#LR__0944
0a830     2C 26 0E F2 | 	cmp	local05, #44 wz
0a834     7C 07 90 AD |  if_e	jmp	#LR__0949
0a838     01 00 00 FF 
0a83c     04 26 0E F2 | 	cmp	local05, ##516 wz
0a840     74 08 90 AD |  if_e	jmp	#LR__0950
0a844     15 26 0E F2 | 	cmp	local05, #21 wz
0a848     94 08 90 AD |  if_e	jmp	#LR__0951
0a84c     04 09 90 FD | 	jmp	#LR__0952
0a850                 | LR__0931
0a850                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a850     01 24 0E F2 | 	cmp	local04, #1 wz
0a854     3C 00 90 5D |  if_ne	jmp	#LR__0932
0a858     37 00 00 FF 
0a85c     44 E4 05 F1 | 	add	objptr, ##28228
0a860     F2 26 02 FB | 	rdlong	local05, objptr
0a864     03 26 66 F0 | 	shl	local05, #3
0a868     02 00 00 FF 
0a86c     38 E4 85 F1 | 	sub	objptr, ##1080
0a870     F2 26 02 F1 | 	add	local05, objptr
0a874     13 13 02 FB | 	rdlong	arg01, local05
0a878     00 14 06 F6 | 	mov	arg02, #0
0a87c     35 00 00 FF 
0a880     0C E4 85 F1 | 	sub	objptr, ##27148
0a884     CC 90 B1 FD | 	call	#__system____builtin_atoi
0a888     FD 24 02 FD | 	qmul	local04, result1
0a88c     18 1E 62 FD | 	getqx	local01
0a890     1C 22 06 F6 | 	mov	local03, #28
0a894                 | LR__0932
0a894                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a894     FF FF 7F FF 
0a898     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a89c     3C 00 90 5D |  if_ne	jmp	#LR__0933
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 26 02 FB | 	rdlong	local05, objptr
0a8ac     03 26 66 F0 | 	shl	local05, #3
0a8b0     02 00 00 FF 
0a8b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8b8     F2 26 02 F1 | 	add	local05, objptr
0a8bc     13 13 02 FB | 	rdlong	arg01, local05
0a8c0     00 14 06 F6 | 	mov	arg02, #0
0a8c4     35 00 00 FF 
0a8c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a8cc     84 90 B1 FD | 	call	#__system____builtin_atoi
0a8d0     FD 24 02 FD | 	qmul	local04, result1
0a8d4     18 1E 62 FD | 	getqx	local01
0a8d8     1C 22 06 F6 | 	mov	local03, #28
0a8dc                 | LR__0933
0a8dc     0F 29 02 F6 | 	mov	local06, local01
0a8e0     10 2B 02 F6 | 	mov	local07, local02
0a8e4     11 27 02 F6 | 	mov	local05, local03
0a8e8     4A 00 00 FF 
0a8ec     7C E4 05 F1 | 	add	objptr, ##38012
0a8f0     F2 1E 02 FB | 	rdlong	local01, objptr
0a8f4     0F 25 02 F6 | 	mov	local04, local01
0a8f8     01 24 66 F0 | 	shl	local04, #1
0a8fc     0F 25 02 F1 | 	add	local04, local01
0a900     02 24 66 F0 | 	shl	local04, #2
0a904     03 00 00 FF 
0a908     00 E4 85 F1 | 	sub	objptr, ##1536
0a90c     F2 24 02 F1 | 	add	local04, objptr
0a910     12 29 62 FC | 	wrlong	local06, local04
0a914     03 00 00 FF 
0a918     00 E4 05 F1 | 	add	objptr, ##1536
0a91c     F2 28 02 FB | 	rdlong	local06, objptr
0a920     14 1F 02 F6 | 	mov	local01, local06
0a924     01 1E 66 F0 | 	shl	local01, #1
0a928     14 1F 02 F1 | 	add	local01, local06
0a92c     02 1E 66 F0 | 	shl	local01, #2
0a930     03 00 00 FF 
0a934     00 E4 85 F1 | 	sub	objptr, ##1536
0a938     F2 1E 02 F1 | 	add	local01, objptr
0a93c     04 1E 06 F1 | 	add	local01, #4
0a940     0F 2B 62 FC | 	wrlong	local07, local01
0a944     03 00 00 FF 
0a948     00 E4 05 F1 | 	add	objptr, ##1536
0a94c     F2 2A 02 FB | 	rdlong	local07, objptr
0a950     15 29 02 F6 | 	mov	local06, local07
0a954     01 28 66 F0 | 	shl	local06, #1
0a958     15 29 02 F1 | 	add	local06, local07
0a95c     02 28 66 F0 | 	shl	local06, #2
0a960     03 00 00 FF 
0a964     00 E4 85 F1 | 	sub	objptr, ##1536
0a968     F2 28 02 F1 | 	add	local06, objptr
0a96c     08 28 06 F1 | 	add	local06, #8
0a970     14 27 62 FC | 	wrlong	local05, local06
0a974     03 00 00 FF 
0a978     00 E4 05 F1 | 	add	objptr, ##1536
0a97c     F2 28 02 FB | 	rdlong	local06, objptr
0a980     01 28 06 F1 | 	add	local06, #1
0a984     F2 28 62 FC | 	wrlong	local06, objptr
0a988     13 00 00 FF 
0a98c     38 E4 85 F1 | 	sub	objptr, ##9784
0a990     F2 28 02 FB | 	rdlong	local06, objptr
0a994     01 28 06 F1 | 	add	local06, #1
0a998     F2 28 62 FC | 	wrlong	local06, objptr
0a99c     37 00 00 FF 
0a9a0     44 E4 85 F1 | 	sub	objptr, ##28228
0a9a4     D0 07 90 FD | 	jmp	#LR__0953
0a9a8                 | LR__0934
0a9a8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a9a8     37 00 00 FF 
0a9ac     44 E4 05 F1 | 	add	objptr, ##28228
0a9b0     F2 16 02 FB | 	rdlong	arg03, objptr
0a9b4     03 16 66 F0 | 	shl	arg03, #3
0a9b8     02 00 00 FF 
0a9bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c0     F2 16 02 F1 | 	add	arg03, objptr
0a9c4     0B 13 02 FB | 	rdlong	arg01, arg03
0a9c8     01 14 06 F6 | 	mov	arg02, #1
0a9cc     35 00 00 FF 
0a9d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9d4     CC 7D B1 FD | 	call	#__system__Left_S
0a9d8     FD 12 02 F6 | 	mov	arg01, result1
0a9dc     82 01 00 FF 
0a9e0     E9 15 06 F6 | 	mov	arg02, ##@LR__5411
0a9e4     68 5D B1 FD | 	call	#__system___string_cmp
0a9e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9ec     94 00 90 5D |  if_ne	jmp	#LR__0937
0a9f0     37 00 00 FF 
0a9f4     44 E4 05 F1 | 	add	objptr, ##28228
0a9f8     F2 2A 02 FB | 	rdlong	local07, objptr
0a9fc     15 29 02 F6 | 	mov	local06, local07
0aa00     03 28 66 F0 | 	shl	local06, #3
0aa04     02 00 00 FF 
0aa08     38 E4 85 F1 | 	sub	objptr, ##1080
0aa0c     F2 28 02 F1 | 	add	local06, objptr
0aa10     82 01 00 FF 
0aa14     EB 27 06 F6 | 	mov	local05, ##@LR__5412
0aa18     03 2A 66 F0 | 	shl	local07, #3
0aa1c     F2 2A 02 F1 | 	add	local07, objptr
0aa20     15 2B 02 FB | 	rdlong	local07, local07
0aa24     02 00 00 FF 
0aa28     38 E4 05 F1 | 	add	objptr, ##1080
0aa2c     F2 1E 02 FB | 	rdlong	local01, objptr
0aa30     03 1E 66 F0 | 	shl	local01, #3
0aa34     02 00 00 FF 
0aa38     38 E4 85 F1 | 	sub	objptr, ##1080
0aa3c     F2 1E 02 F1 | 	add	local01, objptr
0aa40     0F 13 02 FB | 	rdlong	arg01, local01
0aa44     35 00 00 FF 
0aa48     0C E4 85 F1 | 	sub	objptr, ##27148
0aa4c     09 2D 02 F6 | 	mov	local08, arg01
0aa50     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0aa54                 | LR__0935
0aa54     16 FB C9 FA | 	rdbyte	result1, local08 wz
0aa58     01 2C 06 51 |  if_ne	add	local08, #1
0aa5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0aa60                 | LR__0936
0aa60     09 2D 82 F1 | 	sub	local08, arg01
0aa64     16 15 02 F6 | 	mov	arg02, local08
0aa68     01 14 86 F1 | 	sub	arg02, #1
0aa6c     15 13 02 F6 | 	mov	arg01, local07
0aa70     B8 7D B1 FD | 	call	#__system__Right_S
0aa74     FD 14 02 F6 | 	mov	arg02, result1
0aa78     13 13 02 F6 | 	mov	arg01, local05
0aa7c     04 5D B1 FD | 	call	#__system___string_concat
0aa80     14 FB 61 FC | 	wrlong	result1, local06
0aa84                 | LR__0937
0aa84                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0aa84     37 00 00 FF 
0aa88     44 E4 05 F1 | 	add	objptr, ##28228
0aa8c     F2 16 02 FB | 	rdlong	arg03, objptr
0aa90     03 16 66 F0 | 	shl	arg03, #3
0aa94     02 00 00 FF 
0aa98     38 E4 85 F1 | 	sub	objptr, ##1080
0aa9c     F2 16 02 F1 | 	add	arg03, objptr
0aaa0     0B 13 02 FB | 	rdlong	arg01, arg03
0aaa4     01 14 06 F6 | 	mov	arg02, #1
0aaa8     35 00 00 FF 
0aaac     0C E4 85 F1 | 	sub	objptr, ##27148
0aab0     F0 7C B1 FD | 	call	#__system__Left_S
0aab4     FD 12 02 F6 | 	mov	arg01, result1
0aab8     82 01 00 FF 
0aabc     EE 15 06 F6 | 	mov	arg02, ##@LR__5413
0aac0     8C 5C B1 FD | 	call	#__system___string_cmp
0aac4     00 FA 0D F2 | 	cmp	result1, #0 wz
0aac8     94 00 90 5D |  if_ne	jmp	#LR__0940
0aacc     37 00 00 FF 
0aad0     44 E4 05 F1 | 	add	objptr, ##28228
0aad4     F2 2A 02 FB | 	rdlong	local07, objptr
0aad8     15 29 02 F6 | 	mov	local06, local07
0aadc     03 28 66 F0 | 	shl	local06, #3
0aae0     02 00 00 FF 
0aae4     38 E4 85 F1 | 	sub	objptr, ##1080
0aae8     F2 28 02 F1 | 	add	local06, objptr
0aaec     82 01 00 FF 
0aaf0     F0 27 06 F6 | 	mov	local05, ##@LR__5414
0aaf4     03 2A 66 F0 | 	shl	local07, #3
0aaf8     F2 2A 02 F1 | 	add	local07, objptr
0aafc     15 2B 02 FB | 	rdlong	local07, local07
0ab00     02 00 00 FF 
0ab04     38 E4 05 F1 | 	add	objptr, ##1080
0ab08     F2 1E 02 FB | 	rdlong	local01, objptr
0ab0c     03 1E 66 F0 | 	shl	local01, #3
0ab10     02 00 00 FF 
0ab14     38 E4 85 F1 | 	sub	objptr, ##1080
0ab18     F2 1E 02 F1 | 	add	local01, objptr
0ab1c     0F 13 02 FB | 	rdlong	arg01, local01
0ab20     35 00 00 FF 
0ab24     0C E4 85 F1 | 	sub	objptr, ##27148
0ab28     09 2D 02 F6 | 	mov	local08, arg01
0ab2c     97 06 48 FB | 	callpa	#(@LR__0939-@LR__0938)>>2,fcache_load_ptr_
0ab30                 | LR__0938
0ab30     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ab34     01 2C 06 51 |  if_ne	add	local08, #1
0ab38     F4 FF 9F 5D |  if_ne	jmp	#LR__0938
0ab3c                 | LR__0939
0ab3c     09 2D 82 F1 | 	sub	local08, arg01
0ab40     16 15 02 F6 | 	mov	arg02, local08
0ab44     01 14 86 F1 | 	sub	arg02, #1
0ab48     15 13 02 F6 | 	mov	arg01, local07
0ab4c     DC 7C B1 FD | 	call	#__system__Right_S
0ab50     FD 14 02 F6 | 	mov	arg02, result1
0ab54     13 13 02 F6 | 	mov	arg01, local05
0ab58     28 5C B1 FD | 	call	#__system___string_concat
0ab5c     14 FB 61 FC | 	wrlong	result1, local06
0ab60                 | LR__0940
0ab60     37 00 00 FF 
0ab64     44 E4 05 F1 | 	add	objptr, ##28228
0ab68     F2 28 02 FB | 	rdlong	local06, objptr
0ab6c     03 28 66 F0 | 	shl	local06, #3
0ab70     02 00 00 FF 
0ab74     38 E4 85 F1 | 	sub	objptr, ##1080
0ab78     F2 28 02 F1 | 	add	local06, objptr
0ab7c     14 13 02 FB | 	rdlong	arg01, local06
0ab80     00 14 06 F6 | 	mov	arg02, #0
0ab84     35 00 00 FF 
0ab88     0C E4 85 F1 | 	sub	objptr, ##27148
0ab8c     C4 8D B1 FD | 	call	#__system____builtin_atoi
0ab90     FD 24 02 FD | 	qmul	local04, result1
0ab94     4A 00 00 FF 
0ab98     7C E4 05 F1 | 	add	objptr, ##38012
0ab9c     F2 28 02 FB | 	rdlong	local06, objptr
0aba0     14 2F 02 F6 | 	mov	local09, local06
0aba4     01 2E 66 F0 | 	shl	local09, #1
0aba8     14 2F 02 F1 | 	add	local09, local06
0abac     02 2E 66 F0 | 	shl	local09, #2
0abb0     03 00 00 FF 
0abb4     00 E4 85 F1 | 	sub	objptr, ##1536
0abb8     F2 2E 02 F1 | 	add	local09, objptr
0abbc     03 00 00 FF 
0abc0     00 E4 05 F1 | 	add	objptr, ##1536
0abc4     18 1E 62 FD | 	getqx	local01
0abc8     1C 22 06 F6 | 	mov	local03, #28
0abcc     0F 29 02 F6 | 	mov	local06, local01
0abd0     10 2B 02 F6 | 	mov	local07, local02
0abd4     17 29 62 FC | 	wrlong	local06, local09
0abd8     11 2F 02 F6 | 	mov	local09, local03
0abdc     F2 28 02 FB | 	rdlong	local06, objptr
0abe0     14 27 02 F6 | 	mov	local05, local06
0abe4     01 26 66 F0 | 	shl	local05, #1
0abe8     14 27 02 F1 | 	add	local05, local06
0abec     02 26 66 F0 | 	shl	local05, #2
0abf0     03 00 00 FF 
0abf4     00 E4 85 F1 | 	sub	objptr, ##1536
0abf8     F2 26 02 F1 | 	add	local05, objptr
0abfc     04 26 06 F1 | 	add	local05, #4
0ac00     13 2B 62 FC | 	wrlong	local07, local05
0ac04     03 00 00 FF 
0ac08     00 E4 05 F1 | 	add	objptr, ##1536
0ac0c     F2 2A 02 FB | 	rdlong	local07, objptr
0ac10     15 29 02 F6 | 	mov	local06, local07
0ac14     01 28 66 F0 | 	shl	local06, #1
0ac18     15 29 02 F1 | 	add	local06, local07
0ac1c     02 28 66 F0 | 	shl	local06, #2
0ac20     03 00 00 FF 
0ac24     00 E4 85 F1 | 	sub	objptr, ##1536
0ac28     F2 28 02 F1 | 	add	local06, objptr
0ac2c     08 28 06 F1 | 	add	local06, #8
0ac30     14 2F 62 FC | 	wrlong	local09, local06
0ac34     03 00 00 FF 
0ac38     00 E4 05 F1 | 	add	objptr, ##1536
0ac3c     F2 28 02 FB | 	rdlong	local06, objptr
0ac40     01 28 06 F1 | 	add	local06, #1
0ac44     F2 28 62 FC | 	wrlong	local06, objptr
0ac48     13 00 00 FF 
0ac4c     38 E4 85 F1 | 	sub	objptr, ##9784
0ac50     F2 28 02 FB | 	rdlong	local06, objptr
0ac54     01 28 06 F1 | 	add	local06, #1
0ac58     F2 28 62 FC | 	wrlong	local06, objptr
0ac5c     37 00 00 FF 
0ac60     44 E4 85 F1 | 	sub	objptr, ##28228
0ac64     10 05 90 FD | 	jmp	#LR__0953
0ac68                 | LR__0941
0ac68                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ac68     01 24 0E F2 | 	cmp	local04, #1 wz
0ac6c     48 00 90 5D |  if_ne	jmp	#LR__0942
0ac70     00 C0 1F FF 
0ac74     00 28 06 F6 | 	mov	local06, ##1065353216
0ac78     37 00 00 FF 
0ac7c     44 E4 05 F1 | 	add	objptr, ##28228
0ac80     F2 2E 02 FB | 	rdlong	local09, objptr
0ac84     03 2E 66 F0 | 	shl	local09, #3
0ac88     02 00 00 FF 
0ac8c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac90     F2 2E 02 F1 | 	add	local09, objptr
0ac94     17 13 02 FB | 	rdlong	arg01, local09
0ac98     35 00 00 FF 
0ac9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aca0     20 8E B1 FD | 	call	#__system____builtin_atof
0aca4     FD 14 02 F6 | 	mov	arg02, result1
0aca8     14 13 02 F6 | 	mov	arg01, local06
0acac     2C 86 B1 FD | 	call	#__system___float_mul
0acb0     FD 1E 02 F6 | 	mov	local01, result1
0acb4     1E 22 06 F6 | 	mov	local03, #30
0acb8                 | LR__0942
0acb8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0acb8     FF FF 7F FF 
0acbc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0acc0     48 00 90 5D |  if_ne	jmp	#LR__0943
0acc4     00 C0 5F FF 
0acc8     00 28 06 F6 | 	mov	local06, ##-1082130432
0accc     37 00 00 FF 
0acd0     44 E4 05 F1 | 	add	objptr, ##28228
0acd4     F2 2E 02 FB | 	rdlong	local09, objptr
0acd8     03 2E 66 F0 | 	shl	local09, #3
0acdc     02 00 00 FF 
0ace0     38 E4 85 F1 | 	sub	objptr, ##1080
0ace4     F2 2E 02 F1 | 	add	local09, objptr
0ace8     17 13 02 FB | 	rdlong	arg01, local09
0acec     35 00 00 FF 
0acf0     0C E4 85 F1 | 	sub	objptr, ##27148
0acf4     CC 8D B1 FD | 	call	#__system____builtin_atof
0acf8     FD 14 02 F6 | 	mov	arg02, result1
0acfc     14 13 02 F6 | 	mov	arg01, local06
0ad00     D8 85 B1 FD | 	call	#__system___float_mul
0ad04     FD 1E 02 F6 | 	mov	local01, result1
0ad08     1E 22 06 F6 | 	mov	local03, #30
0ad0c                 | LR__0943
0ad0c     0F 29 02 F6 | 	mov	local06, local01
0ad10     10 2B 02 F6 | 	mov	local07, local02
0ad14     11 27 02 F6 | 	mov	local05, local03
0ad18     4A 00 00 FF 
0ad1c     7C E4 05 F1 | 	add	objptr, ##38012
0ad20     F2 1E 02 FB | 	rdlong	local01, objptr
0ad24     0F 2F 02 F6 | 	mov	local09, local01
0ad28     01 2E 66 F0 | 	shl	local09, #1
0ad2c     0F 2F 02 F1 | 	add	local09, local01
0ad30     02 2E 66 F0 | 	shl	local09, #2
0ad34     03 00 00 FF 
0ad38     00 E4 85 F1 | 	sub	objptr, ##1536
0ad3c     F2 2E 02 F1 | 	add	local09, objptr
0ad40     17 29 62 FC | 	wrlong	local06, local09
0ad44     03 00 00 FF 
0ad48     00 E4 05 F1 | 	add	objptr, ##1536
0ad4c     F2 2E 02 FB | 	rdlong	local09, objptr
0ad50     17 29 02 F6 | 	mov	local06, local09
0ad54     01 28 66 F0 | 	shl	local06, #1
0ad58     17 29 02 F1 | 	add	local06, local09
0ad5c     02 28 66 F0 | 	shl	local06, #2
0ad60     03 00 00 FF 
0ad64     00 E4 85 F1 | 	sub	objptr, ##1536
0ad68     F2 28 02 F1 | 	add	local06, objptr
0ad6c     04 28 06 F1 | 	add	local06, #4
0ad70     14 2B 62 FC | 	wrlong	local07, local06
0ad74     03 00 00 FF 
0ad78     00 E4 05 F1 | 	add	objptr, ##1536
0ad7c     F2 2E 02 FB | 	rdlong	local09, objptr
0ad80     17 2B 02 F6 | 	mov	local07, local09
0ad84     01 2A 66 F0 | 	shl	local07, #1
0ad88     17 2B 02 F1 | 	add	local07, local09
0ad8c     02 2A 66 F0 | 	shl	local07, #2
0ad90     03 00 00 FF 
0ad94     00 E4 85 F1 | 	sub	objptr, ##1536
0ad98     F2 2A 02 F1 | 	add	local07, objptr
0ad9c     08 2A 06 F1 | 	add	local07, #8
0ada0     15 27 62 FC | 	wrlong	local05, local07
0ada4     03 00 00 FF 
0ada8     00 E4 05 F1 | 	add	objptr, ##1536
0adac     F2 28 02 FB | 	rdlong	local06, objptr
0adb0     01 28 06 F1 | 	add	local06, #1
0adb4     F2 28 62 FC | 	wrlong	local06, objptr
0adb8     13 00 00 FF 
0adbc     38 E4 85 F1 | 	sub	objptr, ##9784
0adc0     F2 28 02 FB | 	rdlong	local06, objptr
0adc4     01 28 06 F1 | 	add	local06, #1
0adc8     F2 28 62 FC | 	wrlong	local06, objptr
0adcc     37 00 00 FF 
0add0     44 E4 85 F1 | 	sub	objptr, ##28228
0add4     A0 03 90 FD | 	jmp	#LR__0953
0add8                 | LR__0944
0add8     1F 22 06 F6 | 	mov	local03, #31
0addc     37 00 00 FF 
0ade0     44 E4 05 F1 | 	add	objptr, ##28228
0ade4     F2 16 02 FB | 	rdlong	arg03, objptr
0ade8     03 16 66 F0 | 	shl	arg03, #3
0adec     02 00 00 FF 
0adf0     38 E4 85 F1 | 	sub	objptr, ##1080
0adf4     F2 16 02 F1 | 	add	arg03, objptr
0adf8     0B 13 02 FB | 	rdlong	arg01, arg03
0adfc     35 00 00 FF 
0ae00     0C E4 85 F1 | 	sub	objptr, ##27148
0ae04     09 2D 02 F6 | 	mov	local08, arg01
0ae08     97 06 48 FB | 	callpa	#(@LR__0946-@LR__0945)>>2,fcache_load_ptr_
0ae0c                 | LR__0945
0ae0c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ae10     01 2C 06 51 |  if_ne	add	local08, #1
0ae14     F4 FF 9F 5D |  if_ne	jmp	#LR__0945
0ae18                 | LR__0946
0ae18     09 2D 82 F1 | 	sub	local08, arg01
0ae1c     16 FB 01 F6 | 	mov	result1, local08
0ae20     51 00 00 FF 
0ae24     F0 E5 05 F1 | 	add	objptr, ##41968
0ae28     F2 FA 61 FC | 	wrlong	result1, objptr
0ae2c     48 E4 85 F1 | 	sub	objptr, #72
0ae30     F2 12 02 FB | 	rdlong	arg01, objptr
0ae34     FD 12 82 F1 | 	sub	arg01, result1
0ae38     04 12 86 F1 | 	sub	arg01, #4
0ae3c     03 12 26 F5 | 	andn	arg01, #3
0ae40     F2 12 62 FC | 	wrlong	arg01, objptr
0ae44     48 E4 05 F1 | 	add	objptr, #72
0ae48     F2 14 02 FB | 	rdlong	arg02, objptr
0ae4c     51 00 00 FF 
0ae50     F0 E5 85 F1 | 	sub	objptr, ##41968
0ae54     D0 26 B1 FD | 	call	#_pslpoke
0ae58                 | '     pslpoke memtop,l
0ae58                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ae58     01 30 06 F6 | 	mov	local10, #1
0ae5c     51 00 00 FF 
0ae60     F0 E5 05 F1 | 	add	objptr, ##41968
0ae64     F2 32 02 FB | 	rdlong	local11, objptr
0ae68     51 00 00 FF 
0ae6c     F0 E5 85 F1 | 	sub	objptr, ##41968
0ae70     01 32 06 F1 | 	add	local11, #1
0ae74                 | LR__0947
0ae74     19 31 52 F2 | 	cmps	local10, local11 wc
0ae78     5C 00 90 3D |  if_ae	jmp	#LR__0948
0ae7c     51 00 00 FF 
0ae80     A8 E5 05 F1 | 	add	objptr, ##41896
0ae84     F2 2A 02 FB | 	rdlong	local07, objptr
0ae88     03 2A 06 F1 | 	add	local07, #3
0ae8c     18 2B 02 F1 | 	add	local07, local10
0ae90     1A 00 00 FF 
0ae94     64 E5 85 F1 | 	sub	objptr, ##13668
0ae98     F2 2E 02 FB | 	rdlong	local09, objptr
0ae9c     03 2E 66 F0 | 	shl	local09, #3
0aea0     02 00 00 FF 
0aea4     38 E4 85 F1 | 	sub	objptr, ##1080
0aea8     F2 2E 02 F1 | 	add	local09, objptr
0aeac     17 13 02 FB | 	rdlong	arg01, local09
0aeb0     18 15 02 F6 | 	mov	arg02, local10
0aeb4     01 16 06 F6 | 	mov	arg03, #1
0aeb8     35 00 00 FF 
0aebc     0C E4 85 F1 | 	sub	objptr, ##27148
0aec0     F8 79 B1 FD | 	call	#__system__Mid_S
0aec4     FD 14 C2 FA | 	rdbyte	arg02, result1
0aec8     15 13 02 F6 | 	mov	arg01, local07
0aecc     E8 26 B1 FD | 	call	#_pspoke
0aed0     01 30 06 F1 | 	add	local10, #1
0aed4     9C FF 9F FD | 	jmp	#LR__0947
0aed8                 | LR__0948
0aed8     51 00 00 FF 
0aedc     A8 E5 05 F1 | 	add	objptr, ##41896
0aee0     F2 1E 02 FB | 	rdlong	local01, objptr
0aee4     2B 22 06 F6 | 	mov	local03, #43
0aee8     0F 29 02 F6 | 	mov	local06, local01
0aeec     10 2B 02 F6 | 	mov	local07, local02
0aef0     11 33 02 F6 | 	mov	local11, local03
0aef4     07 00 00 FF 
0aef8     2C E5 85 F1 | 	sub	objptr, ##3884
0aefc     F2 30 02 FB | 	rdlong	local10, objptr
0af00     18 2F 02 F6 | 	mov	local09, local10
0af04     01 2E 66 F0 | 	shl	local09, #1
0af08     18 2F 02 F1 | 	add	local09, local10
0af0c     02 2E 66 F0 | 	shl	local09, #2
0af10     03 00 00 FF 
0af14     00 E4 85 F1 | 	sub	objptr, ##1536
0af18     F2 2E 02 F1 | 	add	local09, objptr
0af1c     17 29 62 FC | 	wrlong	local06, local09
0af20     03 00 00 FF 
0af24     00 E4 05 F1 | 	add	objptr, ##1536
0af28     F2 30 02 FB | 	rdlong	local10, objptr
0af2c     18 2F 02 F6 | 	mov	local09, local10
0af30     01 2E 66 F0 | 	shl	local09, #1
0af34     18 2F 02 F1 | 	add	local09, local10
0af38     02 2E 66 F0 | 	shl	local09, #2
0af3c     03 00 00 FF 
0af40     00 E4 85 F1 | 	sub	objptr, ##1536
0af44     F2 2E 02 F1 | 	add	local09, objptr
0af48     04 2E 06 F1 | 	add	local09, #4
0af4c     17 2B 62 FC | 	wrlong	local07, local09
0af50     03 00 00 FF 
0af54     00 E4 05 F1 | 	add	objptr, ##1536
0af58     F2 30 02 FB | 	rdlong	local10, objptr
0af5c     18 2F 02 F6 | 	mov	local09, local10
0af60     01 2E 66 F0 | 	shl	local09, #1
0af64     18 2F 02 F1 | 	add	local09, local10
0af68     02 2E 66 F0 | 	shl	local09, #2
0af6c     03 00 00 FF 
0af70     00 E4 85 F1 | 	sub	objptr, ##1536
0af74     F2 2E 02 F1 | 	add	local09, objptr
0af78     08 2E 06 F1 | 	add	local09, #8
0af7c     17 33 62 FC | 	wrlong	local11, local09
0af80     03 00 00 FF 
0af84     00 E4 05 F1 | 	add	objptr, ##1536
0af88     F2 28 02 FB | 	rdlong	local06, objptr
0af8c     01 28 06 F1 | 	add	local06, #1
0af90     F2 28 62 FC | 	wrlong	local06, objptr
0af94     13 00 00 FF 
0af98     38 E4 85 F1 | 	sub	objptr, ##9784
0af9c     F2 28 02 FB | 	rdlong	local06, objptr
0afa0     01 28 06 F1 | 	add	local06, #1
0afa4     F2 28 62 FC | 	wrlong	local06, objptr
0afa8     37 00 00 FF 
0afac     44 E4 85 F1 | 	sub	objptr, ##28228
0afb0     C4 01 90 FD | 	jmp	#LR__0953
0afb4                 | LR__0949
0afb4     2C 22 06 F6 | 	mov	local03, #44
0afb8     37 00 00 FF 
0afbc     44 E4 05 F1 | 	add	objptr, ##28228
0afc0     F2 28 02 FB | 	rdlong	local06, objptr
0afc4     03 28 66 F0 | 	shl	local06, #3
0afc8     02 00 00 FF 
0afcc     38 E4 85 F1 | 	sub	objptr, ##1080
0afd0     F2 28 02 F1 | 	add	local06, objptr
0afd4     14 13 02 FB | 	rdlong	arg01, local06
0afd8     00 14 06 F6 | 	mov	arg02, #0
0afdc     35 00 00 FF 
0afe0     0C E4 85 F1 | 	sub	objptr, ##27148
0afe4     6C 89 B1 FD | 	call	#__system____builtin_atoi
0afe8     FD 1E 02 F6 | 	mov	local01, result1
0afec     0F 29 02 F6 | 	mov	local06, local01
0aff0     10 2B 02 F6 | 	mov	local07, local02
0aff4     11 33 02 F6 | 	mov	local11, local03
0aff8     4A 00 00 FF 
0affc     7C E4 05 F1 | 	add	objptr, ##38012
0b000     F2 30 02 FB | 	rdlong	local10, objptr
0b004     18 2F 02 F6 | 	mov	local09, local10
0b008     01 2E 66 F0 | 	shl	local09, #1
0b00c     18 2F 02 F1 | 	add	local09, local10
0b010     02 2E 66 F0 | 	shl	local09, #2
0b014     03 00 00 FF 
0b018     00 E4 85 F1 | 	sub	objptr, ##1536
0b01c     F2 2E 02 F1 | 	add	local09, objptr
0b020     17 29 62 FC | 	wrlong	local06, local09
0b024     03 00 00 FF 
0b028     00 E4 05 F1 | 	add	objptr, ##1536
0b02c     F2 30 02 FB | 	rdlong	local10, objptr
0b030     18 2F 02 F6 | 	mov	local09, local10
0b034     01 2E 66 F0 | 	shl	local09, #1
0b038     18 2F 02 F1 | 	add	local09, local10
0b03c     02 2E 66 F0 | 	shl	local09, #2
0b040     03 00 00 FF 
0b044     00 E4 85 F1 | 	sub	objptr, ##1536
0b048     F2 2E 02 F1 | 	add	local09, objptr
0b04c     04 2E 06 F1 | 	add	local09, #4
0b050     17 2B 62 FC | 	wrlong	local07, local09
0b054     03 00 00 FF 
0b058     00 E4 05 F1 | 	add	objptr, ##1536
0b05c     F2 30 02 FB | 	rdlong	local10, objptr
0b060     18 2F 02 F6 | 	mov	local09, local10
0b064     01 2E 66 F0 | 	shl	local09, #1
0b068     18 2F 02 F1 | 	add	local09, local10
0b06c     02 2E 66 F0 | 	shl	local09, #2
0b070     03 00 00 FF 
0b074     00 E4 85 F1 | 	sub	objptr, ##1536
0b078     F2 2E 02 F1 | 	add	local09, objptr
0b07c     08 2E 06 F1 | 	add	local09, #8
0b080     17 33 62 FC | 	wrlong	local11, local09
0b084     03 00 00 FF 
0b088     00 E4 05 F1 | 	add	objptr, ##1536
0b08c     F2 28 02 FB | 	rdlong	local06, objptr
0b090     01 28 06 F1 | 	add	local06, #1
0b094     F2 28 62 FC | 	wrlong	local06, objptr
0b098     13 00 00 FF 
0b09c     38 E4 85 F1 | 	sub	objptr, ##9784
0b0a0     F2 28 02 FB | 	rdlong	local06, objptr
0b0a4     01 28 06 F1 | 	add	local06, #1
0b0a8     F2 28 62 FC | 	wrlong	local06, objptr
0b0ac     37 00 00 FF 
0b0b0     44 E4 85 F1 | 	sub	objptr, ##28228
0b0b4     C0 00 90 FD | 	jmp	#LR__0953
0b0b8                 | LR__0950
0b0b8     12 13 02 F6 | 	mov	arg01, local04
0b0bc     B8 03 B0 FD | 	call	#_getvar
0b0c0     37 00 00 FF 
0b0c4     44 E4 05 F1 | 	add	objptr, ##28228
0b0c8     F2 28 02 FB | 	rdlong	local06, objptr
0b0cc     01 28 06 F1 | 	add	local06, #1
0b0d0     F2 28 62 FC | 	wrlong	local06, objptr
0b0d4     37 00 00 FF 
0b0d8     44 E4 85 F1 | 	sub	objptr, ##28228
0b0dc     98 00 90 FD | 	jmp	#LR__0953
0b0e0                 | LR__0951
0b0e0     37 00 00 FF 
0b0e4     44 E4 05 F1 | 	add	objptr, ##28228
0b0e8     F2 28 02 FB | 	rdlong	local06, objptr
0b0ec     01 28 06 F1 | 	add	local06, #1
0b0f0     F2 28 62 FC | 	wrlong	local06, objptr
0b0f4     37 00 00 FF 
0b0f8     44 E4 85 F1 | 	sub	objptr, ##28228
0b0fc     58 F1 BF FD | 	call	#_expr
0b100                 | '     ct+=1
0b100                 | '     expr() 
0b100                 | '     if lparts(ct).token=token_rpar then ct+=1
0b100     37 00 00 FF 
0b104     44 E4 05 F1 | 	add	objptr, ##28228
0b108     F2 32 02 FB | 	rdlong	local11, objptr
0b10c     03 32 66 F0 | 	shl	local11, #3
0b110     02 00 00 FF 
0b114     38 E4 85 F1 | 	sub	objptr, ##1080
0b118     F2 32 02 F1 | 	add	local11, objptr
0b11c     04 32 06 F1 | 	add	local11, #4
0b120     19 33 02 FB | 	rdlong	local11, local11
0b124     14 32 0E F2 | 	cmp	local11, #20 wz
0b128     35 00 00 FF 
0b12c     0C E4 85 F1 | 	sub	objptr, ##27148
0b130     44 00 90 5D |  if_ne	jmp	#LR__0953
0b134     37 00 00 FF 
0b138     44 E4 05 F1 | 	add	objptr, ##28228
0b13c     F2 28 02 FB | 	rdlong	local06, objptr
0b140     01 28 06 F1 | 	add	local06, #1
0b144     F2 28 62 FC | 	wrlong	local06, objptr
0b148     37 00 00 FF 
0b14c     44 E4 85 F1 | 	sub	objptr, ##28228
0b150     24 00 90 FD | 	jmp	#LR__0953
0b154                 | LR__0952
0b154     12 13 02 F6 | 	mov	arg01, local04
0b158     28 00 B0 FD | 	call	#_getfun
0b15c     37 00 00 FF 
0b160     44 E4 05 F1 | 	add	objptr, ##28228
0b164     F2 28 02 FB | 	rdlong	local06, objptr
0b168     01 28 06 F1 | 	add	local06, #1
0b16c     F2 28 62 FC | 	wrlong	local06, objptr
0b170     37 00 00 FF 
0b174     44 E4 85 F1 | 	sub	objptr, ##28228
0b178                 | LR__0953
0b178     A7 F0 03 F6 | 	mov	ptra, fp
0b17c     B2 00 A0 FD | 	call	#popregs_
0b180                 | _getvalue_ret
0b180     2D 00 64 FD | 	ret
0b184                 | 
0b184                 | ' 
0b184                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0b184                 | _getfun
0b184     0A 4A 05 F6 | 	mov	COUNT_, #10
0b188     A8 00 A0 FD | 	call	#pushregs_
0b18c                 | _getfun_enter
0b18c     09 25 02 F6 | 	mov	local04, arg01
0b190     37 00 00 FF 
0b194     44 E4 05 F1 | 	add	objptr, ##28228
0b198     F2 26 02 FB | 	rdlong	local05, objptr
0b19c     13 29 02 F6 | 	mov	local06, local05
0b1a0     00 2A 06 F6 | 	mov	local07, #0
0b1a4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0b1a4                 | ' oldct=ct
0b1a4                 | ' numpar=0
0b1a4                 | '   
0b1a4                 | ' if lparts(ct+1).token=token_lpar then
0b1a4     01 26 06 F1 | 	add	local05, #1
0b1a8     03 26 66 F0 | 	shl	local05, #3
0b1ac     02 00 00 FF 
0b1b0     38 E4 85 F1 | 	sub	objptr, ##1080
0b1b4     F2 26 02 F1 | 	add	local05, objptr
0b1b8     04 26 06 F1 | 	add	local05, #4
0b1bc     13 27 02 FB | 	rdlong	local05, local05
0b1c0     15 26 0E F2 | 	cmp	local05, #21 wz
0b1c4     35 00 00 FF 
0b1c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b1cc     08 01 90 5D |  if_ne	jmp	#LR__0964
0b1d0     37 00 00 FF 
0b1d4     44 E4 05 F1 | 	add	objptr, ##28228
0b1d8     F2 2C 02 FB | 	rdlong	local08, objptr
0b1dc     01 2C 06 F1 | 	add	local08, #1
0b1e0     F2 2C 62 FC | 	wrlong	local08, objptr
0b1e4     37 00 00 FF 
0b1e8     44 E4 85 F1 | 	sub	objptr, ##28228
0b1ec                 | '   ct+=1 											' omit this lpar, this is for expr list
0b1ec                 | '   do
0b1ec                 | LR__0960
0b1ec     37 00 00 FF 
0b1f0     44 E4 05 F1 | 	add	objptr, ##28228
0b1f4     F2 26 02 FB | 	rdlong	local05, objptr
0b1f8     01 26 06 F1 | 	add	local05, #1
0b1fc     F2 26 62 FC | 	wrlong	local05, objptr
0b200                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b200                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b200     03 26 66 F0 | 	shl	local05, #3
0b204     02 00 00 FF 
0b208     38 E4 85 F1 | 	sub	objptr, ##1080
0b20c     F2 26 02 F1 | 	add	local05, objptr
0b210     04 26 06 F1 | 	add	local05, #4
0b214     13 2D 02 FB | 	rdlong	local08, local05
0b218     15 2C 0E F2 | 	cmp	local08, #21 wz
0b21c     35 00 00 FF 
0b220     0C E4 85 F1 | 	sub	objptr, ##27148
0b224     40 00 90 5D |  if_ne	jmp	#LR__0961
0b228     37 00 00 FF 
0b22c     44 E4 05 F1 | 	add	objptr, ##28228
0b230     F2 2C 02 FB | 	rdlong	local08, objptr
0b234     01 2C 06 F1 | 	add	local08, #1
0b238     F2 2C 62 FC | 	wrlong	local08, objptr
0b23c     37 00 00 FF 
0b240     44 E4 85 F1 | 	sub	objptr, ##28228
0b244     10 F0 BF FD | 	call	#_expr
0b248     37 00 00 FF 
0b24c     44 E4 05 F1 | 	add	objptr, ##28228
0b250     F2 2C 02 FB | 	rdlong	local08, objptr
0b254     01 2C 06 F1 | 	add	local08, #1
0b258     F2 2C 62 FC | 	wrlong	local08, objptr
0b25c     37 00 00 FF 
0b260     44 E4 85 F1 | 	sub	objptr, ##28228
0b264     04 00 90 FD | 	jmp	#LR__0962
0b268                 | LR__0961
0b268     EC EF BF FD | 	call	#_expr
0b26c                 | LR__0962
0b26c     01 2A 06 F1 | 	add	local07, #1
0b270     37 00 00 FF 
0b274     44 E4 05 F1 | 	add	objptr, ##28228
0b278     F2 26 02 FB | 	rdlong	local05, objptr
0b27c     03 26 66 F0 | 	shl	local05, #3
0b280     02 00 00 FF 
0b284     38 E4 85 F1 | 	sub	objptr, ##1080
0b288     F2 26 02 F1 | 	add	local05, objptr
0b28c     04 26 06 F1 | 	add	local05, #4
0b290     13 2D 02 FB | 	rdlong	local08, local05
0b294     14 2C 0E F2 | 	cmp	local08, #20 wz
0b298     35 00 00 FF 
0b29c     0C E4 85 F1 | 	sub	objptr, ##27148
0b2a0     34 00 90 AD |  if_e	jmp	#LR__0963
0b2a4     37 00 00 FF 
0b2a8     44 E4 05 F1 | 	add	objptr, ##28228
0b2ac     F2 2C 02 FB | 	rdlong	local08, objptr
0b2b0     03 2C 66 F0 | 	shl	local08, #3
0b2b4     02 00 00 FF 
0b2b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b2bc     F2 2C 02 F1 | 	add	local08, objptr
0b2c0     04 2C 06 F1 | 	add	local08, #4
0b2c4     16 2D 02 FB | 	rdlong	local08, local08
0b2c8     FE 2D 0E F2 | 	cmp	local08, #510 wz
0b2cc     35 00 00 FF 
0b2d0     0C E4 85 F1 | 	sub	objptr, ##27148
0b2d4     14 FF 9F 5D |  if_ne	jmp	#LR__0960
0b2d8                 | LR__0963
0b2d8                 | LR__0964
0b2d8     15 1F 02 F6 | 	mov	local01, local07
0b2dc     03 28 66 F0 | 	shl	local06, #3
0b2e0     35 00 00 FF 
0b2e4     0C E4 05 F1 | 	add	objptr, ##27148
0b2e8     F2 28 02 F1 | 	add	local06, objptr
0b2ec     04 28 06 F1 | 	add	local06, #4
0b2f0     14 23 02 FB | 	rdlong	local03, local06
0b2f4     0F 2D 02 F6 | 	mov	local08, local01
0b2f8     10 2B 02 F6 | 	mov	local07, local02
0b2fc     11 29 02 F6 | 	mov	local06, local03
0b300     15 00 00 FF 
0b304     70 E4 05 F1 | 	add	objptr, ##10864
0b308     F2 26 02 FB | 	rdlong	local05, objptr
0b30c     13 13 02 F6 | 	mov	arg01, local05
0b310     01 12 66 F0 | 	shl	arg01, #1
0b314     13 13 02 F1 | 	add	arg01, local05
0b318     02 12 66 F0 | 	shl	arg01, #2
0b31c     03 00 00 FF 
0b320     00 E4 85 F1 | 	sub	objptr, ##1536
0b324     F2 12 02 F1 | 	add	arg01, objptr
0b328     09 2D 62 FC | 	wrlong	local08, arg01
0b32c     03 00 00 FF 
0b330     00 E4 05 F1 | 	add	objptr, ##1536
0b334     F2 2C 02 FB | 	rdlong	local08, objptr
0b338     16 2F 02 F6 | 	mov	local09, local08
0b33c     01 2E 66 F0 | 	shl	local09, #1
0b340     16 2F 02 F1 | 	add	local09, local08
0b344     02 2E 66 F0 | 	shl	local09, #2
0b348     03 00 00 FF 
0b34c     00 E4 85 F1 | 	sub	objptr, ##1536
0b350     F2 2E 02 F1 | 	add	local09, objptr
0b354     04 2E 06 F1 | 	add	local09, #4
0b358     17 2B 62 FC | 	wrlong	local07, local09
0b35c     03 00 00 FF 
0b360     00 E4 05 F1 | 	add	objptr, ##1536
0b364     F2 2C 02 FB | 	rdlong	local08, objptr
0b368     16 31 02 F6 | 	mov	local10, local08
0b36c     01 30 66 F0 | 	shl	local10, #1
0b370     16 31 02 F1 | 	add	local10, local08
0b374     02 30 66 F0 | 	shl	local10, #2
0b378     03 00 00 FF 
0b37c     00 E4 85 F1 | 	sub	objptr, ##1536
0b380     F2 30 02 F1 | 	add	local10, objptr
0b384     08 30 06 F1 | 	add	local10, #8
0b388     18 29 62 FC | 	wrlong	local06, local10
0b38c     03 00 00 FF 
0b390     00 E4 05 F1 | 	add	objptr, ##1536
0b394     F2 2C 02 FB | 	rdlong	local08, objptr
0b398     01 2C 06 F1 | 	add	local08, #1
0b39c     F2 2C 62 FC | 	wrlong	local08, objptr
0b3a0     4A 00 00 FF 
0b3a4     7C E4 85 F1 | 	sub	objptr, ##38012
0b3a8                 | ' 
0b3a8                 | ' t2.result.uresult=numpar
0b3a8                 | ' 
0b3a8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b3a8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b3a8                 | ' 
0b3a8                 | '   
0b3a8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b3a8     FF FF 7F FF 
0b3ac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b3b0     B8 00 90 5D |  if_ne	jmp	#LR__0965
0b3b4     15 22 06 F6 | 	mov	local03, #21
0b3b8     0F 2D 02 F6 | 	mov	local08, local01
0b3bc     10 2B 02 F6 | 	mov	local07, local02
0b3c0     11 29 02 F6 | 	mov	local06, local03
0b3c4     4A 00 00 FF 
0b3c8     7C E4 05 F1 | 	add	objptr, ##38012
0b3cc     F2 26 02 FB | 	rdlong	local05, objptr
0b3d0     13 13 02 F6 | 	mov	arg01, local05
0b3d4     01 12 66 F0 | 	shl	arg01, #1
0b3d8     13 13 02 F1 | 	add	arg01, local05
0b3dc     02 12 66 F0 | 	shl	arg01, #2
0b3e0     03 00 00 FF 
0b3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e8     F2 12 02 F1 | 	add	arg01, objptr
0b3ec     09 2D 62 FC | 	wrlong	local08, arg01
0b3f0     03 00 00 FF 
0b3f4     00 E4 05 F1 | 	add	objptr, ##1536
0b3f8     F2 30 02 FB | 	rdlong	local10, objptr
0b3fc     18 2F 02 F6 | 	mov	local09, local10
0b400     01 2E 66 F0 | 	shl	local09, #1
0b404     18 2F 02 F1 | 	add	local09, local10
0b408     02 2E 66 F0 | 	shl	local09, #2
0b40c     03 00 00 FF 
0b410     00 E4 85 F1 | 	sub	objptr, ##1536
0b414     F2 2E 02 F1 | 	add	local09, objptr
0b418     04 2E 06 F1 | 	add	local09, #4
0b41c     17 2B 62 FC | 	wrlong	local07, local09
0b420     03 00 00 FF 
0b424     00 E4 05 F1 | 	add	objptr, ##1536
0b428     F2 2E 02 FB | 	rdlong	local09, objptr
0b42c     17 31 02 F6 | 	mov	local10, local09
0b430     01 30 66 F0 | 	shl	local10, #1
0b434     17 31 02 F1 | 	add	local10, local09
0b438     02 30 66 F0 | 	shl	local10, #2
0b43c     03 00 00 FF 
0b440     00 E4 85 F1 | 	sub	objptr, ##1536
0b444     F2 30 02 F1 | 	add	local10, objptr
0b448     08 30 06 F1 | 	add	local10, #8
0b44c     18 29 62 FC | 	wrlong	local06, local10
0b450     03 00 00 FF 
0b454     00 E4 05 F1 | 	add	objptr, ##1536
0b458     F2 2C 02 FB | 	rdlong	local08, objptr
0b45c     01 2C 06 F1 | 	add	local08, #1
0b460     F2 2C 62 FC | 	wrlong	local08, objptr
0b464     4A 00 00 FF 
0b468     7C E4 85 F1 | 	sub	objptr, ##38012
0b46c                 | LR__0965
0b46c     A7 F0 03 F6 | 	mov	ptra, fp
0b470     B2 00 A0 FD | 	call	#popregs_
0b474                 | _getfun_ret
0b474     2D 00 64 FD | 	ret
0b478                 | 
0b478                 | '   
0b478                 | '   
0b478                 | ' sub getvar(m as integer) 
0b478                 | _getvar
0b478     0A 4A 05 F6 | 	mov	COUNT_, #10
0b47c     A8 00 A0 FD | 	call	#pushregs_
0b480                 | _getvar_enter
0b480     09 25 02 F6 | 	mov	local04, arg01
0b484     37 00 00 FF 
0b488     44 E4 05 F1 | 	add	objptr, ##28228
0b48c     F2 14 02 FB | 	rdlong	arg02, objptr
0b490     03 14 66 F0 | 	shl	arg02, #3
0b494     02 00 00 FF 
0b498     38 E4 85 F1 | 	sub	objptr, ##1080
0b49c     F2 14 02 F1 | 	add	arg02, objptr
0b4a0     0A 27 02 FB | 	rdlong	local05, arg02
0b4a4     13 13 02 F6 | 	mov	arg01, local05
0b4a8     01 14 06 F6 | 	mov	arg02, #1
0b4ac     35 00 00 FF 
0b4b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b4b4     74 73 B1 FD | 	call	#__system__Right_S
0b4b8     FD 28 02 F6 | 	mov	local06, result1
0b4bc     01 2A 66 F6 | 	neg	local07, #1
0b4c0                 | ' 
0b4c0                 | ' varname$=lparts(ct).part$
0b4c0                 | ' suffix$=right$(varname$,1)
0b4c0                 | ' j=-1
0b4c0                 | ' 
0b4c0                 | ' for i=0 to varnum-1
0b4c0     00 2C 06 F6 | 	mov	local08, #0
0b4c4     35 00 00 FF 
0b4c8     08 E4 05 F1 | 	add	objptr, ##27144
0b4cc     F2 2E 02 FB | 	rdlong	local09, objptr
0b4d0     35 00 00 FF 
0b4d4     08 E4 85 F1 | 	sub	objptr, ##27144
0b4d8                 | LR__0970
0b4d8     17 2D 52 F2 | 	cmps	local08, local09 wc
0b4dc     38 00 90 3D |  if_ae	jmp	#LR__0971
0b4e0                 | '   if variables(i).name=varname$ then j=i : exit
0b4e0     16 15 02 F6 | 	mov	arg02, local08
0b4e4     04 14 66 F0 | 	shl	arg02, #4
0b4e8     14 00 00 FF 
0b4ec     F8 E5 05 F1 | 	add	objptr, ##10744
0b4f0     F2 14 02 F1 | 	add	arg02, objptr
0b4f4     0A 13 02 FB | 	rdlong	arg01, arg02
0b4f8     13 15 02 F6 | 	mov	arg02, local05
0b4fc     14 00 00 FF 
0b500     F8 E5 85 F1 | 	sub	objptr, ##10744
0b504     48 52 B1 FD | 	call	#__system___string_cmp
0b508     00 FA 0D F2 | 	cmp	result1, #0 wz
0b50c     16 2B 02 A6 |  if_e	mov	local07, local08
0b510     01 2C 06 51 |  if_ne	add	local08, #1
0b514     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0b518                 | LR__0971
0b518                 | ' if  j=-1 andalso varnum<maxvars then   
0b518     FF FF 7F FF 
0b51c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b520     A8 00 90 5D |  if_ne	jmp	#LR__0972
0b524     35 00 00 FF 
0b528     08 E4 05 F1 | 	add	objptr, ##27144
0b52c     F2 2E 02 FB | 	rdlong	local09, objptr
0b530     35 00 00 FF 
0b534     08 E4 85 F1 | 	sub	objptr, ##27144
0b538     02 00 00 FF 
0b53c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b540     88 00 90 3D |  if_ae	jmp	#LR__0972
0b544     35 00 00 FF 
0b548     08 E4 05 F1 | 	add	objptr, ##27144
0b54c     F2 2E 02 FB | 	rdlong	local09, objptr
0b550     04 2E 66 F0 | 	shl	local09, #4
0b554     20 00 00 FF 
0b558     10 E4 85 F1 | 	sub	objptr, ##16400
0b55c     F2 2E 02 F1 | 	add	local09, objptr
0b560     17 27 62 FC | 	wrlong	local05, local09
0b564     20 00 00 FF 
0b568     10 E4 05 F1 | 	add	objptr, ##16400
0b56c     F2 2E 02 FB | 	rdlong	local09, objptr
0b570     04 2E 66 F0 | 	shl	local09, #4
0b574     20 00 00 FF 
0b578     10 E4 85 F1 | 	sub	objptr, ##16400
0b57c     F2 2E 02 F1 | 	add	local09, objptr
0b580     04 2E 06 F1 | 	add	local09, #4
0b584     17 01 68 FC | 	wrlong	#0, local09
0b588     20 00 00 FF 
0b58c     10 E4 05 F1 | 	add	objptr, ##16400
0b590     F2 2E 02 FB | 	rdlong	local09, objptr
0b594     04 2E 66 F0 | 	shl	local09, #4
0b598     20 00 00 FF 
0b59c     10 E4 85 F1 | 	sub	objptr, ##16400
0b5a0     F2 2E 02 F1 | 	add	local09, objptr
0b5a4     0C 2E 06 F1 | 	add	local09, #12
0b5a8     17 39 68 FC | 	wrlong	#28, local09
0b5ac     20 00 00 FF 
0b5b0     10 E4 05 F1 | 	add	objptr, ##16400
0b5b4     F2 2E 02 FB | 	rdlong	local09, objptr
0b5b8     17 2B 02 F6 | 	mov	local07, local09
0b5bc     01 2E 06 F1 | 	add	local09, #1
0b5c0     F2 2E 62 FC | 	wrlong	local09, objptr
0b5c4     35 00 00 FF 
0b5c8     08 E4 85 F1 | 	sub	objptr, ##27144
0b5cc                 | LR__0972
0b5cc     00 2E 06 F6 | 	mov	local09, #0
0b5d0                 | ' numpar=0
0b5d0                 | ' ' check if it is an array
0b5d0                 | ' 
0b5d0                 | ' if lparts(ct+1).token=token_lpar then
0b5d0     37 00 00 FF 
0b5d4     44 E4 05 F1 | 	add	objptr, ##28228
0b5d8     F2 2C 02 FB | 	rdlong	local08, objptr
0b5dc     01 2C 06 F1 | 	add	local08, #1
0b5e0     03 2C 66 F0 | 	shl	local08, #3
0b5e4     02 00 00 FF 
0b5e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b5ec     F2 2C 02 F1 | 	add	local08, objptr
0b5f0     04 2C 06 F1 | 	add	local08, #4
0b5f4     16 2D 02 FB | 	rdlong	local08, local08
0b5f8     15 2C 0E F2 | 	cmp	local08, #21 wz
0b5fc     35 00 00 FF 
0b600     0C E4 85 F1 | 	sub	objptr, ##27148
0b604     08 01 90 5D |  if_ne	jmp	#LR__0977
0b608     37 00 00 FF 
0b60c     44 E4 05 F1 | 	add	objptr, ##28228
0b610     F2 30 02 FB | 	rdlong	local10, objptr
0b614     01 30 06 F1 | 	add	local10, #1
0b618     F2 30 62 FC | 	wrlong	local10, objptr
0b61c     37 00 00 FF 
0b620     44 E4 85 F1 | 	sub	objptr, ##28228
0b624                 | '   ct+=1 											' omit this lpar, this is for expr list
0b624                 | '   do
0b624                 | LR__0973
0b624     37 00 00 FF 
0b628     44 E4 05 F1 | 	add	objptr, ##28228
0b62c     F2 2C 02 FB | 	rdlong	local08, objptr
0b630     01 2C 06 F1 | 	add	local08, #1
0b634     F2 2C 62 FC | 	wrlong	local08, objptr
0b638                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b638                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b638     03 2C 66 F0 | 	shl	local08, #3
0b63c     02 00 00 FF 
0b640     38 E4 85 F1 | 	sub	objptr, ##1080
0b644     F2 2C 02 F1 | 	add	local08, objptr
0b648     04 2C 06 F1 | 	add	local08, #4
0b64c     16 31 02 FB | 	rdlong	local10, local08
0b650     15 30 0E F2 | 	cmp	local10, #21 wz
0b654     35 00 00 FF 
0b658     0C E4 85 F1 | 	sub	objptr, ##27148
0b65c     40 00 90 5D |  if_ne	jmp	#LR__0974
0b660     37 00 00 FF 
0b664     44 E4 05 F1 | 	add	objptr, ##28228
0b668     F2 30 02 FB | 	rdlong	local10, objptr
0b66c     01 30 06 F1 | 	add	local10, #1
0b670     F2 30 62 FC | 	wrlong	local10, objptr
0b674     37 00 00 FF 
0b678     44 E4 85 F1 | 	sub	objptr, ##28228
0b67c     D8 EB BF FD | 	call	#_expr
0b680     37 00 00 FF 
0b684     44 E4 05 F1 | 	add	objptr, ##28228
0b688     F2 30 02 FB | 	rdlong	local10, objptr
0b68c     01 30 06 F1 | 	add	local10, #1
0b690     F2 30 62 FC | 	wrlong	local10, objptr
0b694     37 00 00 FF 
0b698     44 E4 85 F1 | 	sub	objptr, ##28228
0b69c     04 00 90 FD | 	jmp	#LR__0975
0b6a0                 | LR__0974
0b6a0     B4 EB BF FD | 	call	#_expr
0b6a4                 | LR__0975
0b6a4     01 2E 06 F1 | 	add	local09, #1
0b6a8     37 00 00 FF 
0b6ac     44 E4 05 F1 | 	add	objptr, ##28228
0b6b0     F2 2C 02 FB | 	rdlong	local08, objptr
0b6b4     03 2C 66 F0 | 	shl	local08, #3
0b6b8     02 00 00 FF 
0b6bc     38 E4 85 F1 | 	sub	objptr, ##1080
0b6c0     F2 2C 02 F1 | 	add	local08, objptr
0b6c4     04 2C 06 F1 | 	add	local08, #4
0b6c8     16 31 02 FB | 	rdlong	local10, local08
0b6cc     14 30 0E F2 | 	cmp	local10, #20 wz
0b6d0     35 00 00 FF 
0b6d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6d8     34 00 90 AD |  if_e	jmp	#LR__0976
0b6dc     37 00 00 FF 
0b6e0     44 E4 05 F1 | 	add	objptr, ##28228
0b6e4     F2 30 02 FB | 	rdlong	local10, objptr
0b6e8     03 30 66 F0 | 	shl	local10, #3
0b6ec     02 00 00 FF 
0b6f0     38 E4 85 F1 | 	sub	objptr, ##1080
0b6f4     F2 30 02 F1 | 	add	local10, objptr
0b6f8     04 30 06 F1 | 	add	local10, #4
0b6fc     18 31 02 FB | 	rdlong	local10, local10
0b700     FE 31 0E F2 | 	cmp	local10, #510 wz
0b704     35 00 00 FF 
0b708     0C E4 85 F1 | 	sub	objptr, ##27148
0b70c     14 FF 9F 5D |  if_ne	jmp	#LR__0973
0b710                 | LR__0976
0b710                 | LR__0977
0b710     17 21 02 F6 | 	mov	local02, local09
0b714     11 22 06 F6 | 	mov	local03, #17
0b718     15 1F 02 F6 | 	mov	local01, local07
0b71c     0F 31 02 F6 | 	mov	local10, local01
0b720     10 2F 02 F6 | 	mov	local09, local02
0b724     11 2D 02 F6 | 	mov	local08, local03
0b728     4A 00 00 FF 
0b72c     7C E4 05 F1 | 	add	objptr, ##38012
0b730     F2 2A 02 FB | 	rdlong	local07, objptr
0b734     15 29 02 F6 | 	mov	local06, local07
0b738     01 28 66 F0 | 	shl	local06, #1
0b73c     15 29 02 F1 | 	add	local06, local07
0b740     02 28 66 F0 | 	shl	local06, #2
0b744     03 00 00 FF 
0b748     00 E4 85 F1 | 	sub	objptr, ##1536
0b74c     F2 28 02 F1 | 	add	local06, objptr
0b750     14 31 62 FC | 	wrlong	local10, local06
0b754     03 00 00 FF 
0b758     00 E4 05 F1 | 	add	objptr, ##1536
0b75c     F2 30 02 FB | 	rdlong	local10, objptr
0b760     18 27 02 F6 | 	mov	local05, local10
0b764     01 26 66 F0 | 	shl	local05, #1
0b768     18 27 02 F1 | 	add	local05, local10
0b76c     02 26 66 F0 | 	shl	local05, #2
0b770     03 00 00 FF 
0b774     00 E4 85 F1 | 	sub	objptr, ##1536
0b778     F2 26 02 F1 | 	add	local05, objptr
0b77c     04 26 06 F1 | 	add	local05, #4
0b780     13 2F 62 FC | 	wrlong	local09, local05
0b784     03 00 00 FF 
0b788     00 E4 05 F1 | 	add	objptr, ##1536
0b78c     F2 30 02 FB | 	rdlong	local10, objptr
0b790     18 FB 01 F6 | 	mov	result1, local10
0b794     01 FA 65 F0 | 	shl	result1, #1
0b798     18 FB 01 F1 | 	add	result1, local10
0b79c     02 FA 65 F0 | 	shl	result1, #2
0b7a0     03 00 00 FF 
0b7a4     00 E4 85 F1 | 	sub	objptr, ##1536
0b7a8     F2 FA 01 F1 | 	add	result1, objptr
0b7ac     08 FA 05 F1 | 	add	result1, #8
0b7b0     FD 2C 62 FC | 	wrlong	local08, result1
0b7b4     03 00 00 FF 
0b7b8     00 E4 05 F1 | 	add	objptr, ##1536
0b7bc     F2 30 02 FB | 	rdlong	local10, objptr
0b7c0     01 30 06 F1 | 	add	local10, #1
0b7c4     F2 30 62 FC | 	wrlong	local10, objptr
0b7c8     4A 00 00 FF 
0b7cc     7C E4 85 F1 | 	sub	objptr, ##38012
0b7d0                 | ' 
0b7d0                 | ' t2.result.twowords(1)=numpar
0b7d0                 | ' 
0b7d0                 | ' 
0b7d0                 | ' 
0b7d0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b7d0                 | ' 
0b7d0                 | ' 
0b7d0                 | '  
0b7d0                 | ' 
0b7d0                 | ' 701 
0b7d0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b7d0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b7d0     FF FF 7F FF 
0b7d4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b7d8     B8 00 90 5D |  if_ne	jmp	#LR__0978
0b7dc     15 22 06 F6 | 	mov	local03, #21
0b7e0     0F 31 02 F6 | 	mov	local10, local01
0b7e4     10 2F 02 F6 | 	mov	local09, local02
0b7e8     11 2D 02 F6 | 	mov	local08, local03
0b7ec     4A 00 00 FF 
0b7f0     7C E4 05 F1 | 	add	objptr, ##38012
0b7f4     F2 2A 02 FB | 	rdlong	local07, objptr
0b7f8     15 29 02 F6 | 	mov	local06, local07
0b7fc     01 28 66 F0 | 	shl	local06, #1
0b800     15 29 02 F1 | 	add	local06, local07
0b804     02 28 66 F0 | 	shl	local06, #2
0b808     03 00 00 FF 
0b80c     00 E4 85 F1 | 	sub	objptr, ##1536
0b810     F2 28 02 F1 | 	add	local06, objptr
0b814     14 31 62 FC | 	wrlong	local10, local06
0b818     03 00 00 FF 
0b81c     00 E4 05 F1 | 	add	objptr, ##1536
0b820     F2 1E 02 FB | 	rdlong	local01, objptr
0b824     0F 27 02 F6 | 	mov	local05, local01
0b828     01 26 66 F0 | 	shl	local05, #1
0b82c     0F 27 02 F1 | 	add	local05, local01
0b830     02 26 66 F0 | 	shl	local05, #2
0b834     03 00 00 FF 
0b838     00 E4 85 F1 | 	sub	objptr, ##1536
0b83c     F2 26 02 F1 | 	add	local05, objptr
0b840     04 26 06 F1 | 	add	local05, #4
0b844     13 2F 62 FC | 	wrlong	local09, local05
0b848     03 00 00 FF 
0b84c     00 E4 05 F1 | 	add	objptr, ##1536
0b850     F2 1E 02 FB | 	rdlong	local01, objptr
0b854     0F FB 01 F6 | 	mov	result1, local01
0b858     01 FA 65 F0 | 	shl	result1, #1
0b85c     0F FB 01 F1 | 	add	result1, local01
0b860     02 FA 65 F0 | 	shl	result1, #2
0b864     03 00 00 FF 
0b868     00 E4 85 F1 | 	sub	objptr, ##1536
0b86c     F2 FA 01 F1 | 	add	result1, objptr
0b870     08 FA 05 F1 | 	add	result1, #8
0b874     FD 2C 62 FC | 	wrlong	local08, result1
0b878     03 00 00 FF 
0b87c     00 E4 05 F1 | 	add	objptr, ##1536
0b880     F2 30 02 FB | 	rdlong	local10, objptr
0b884     01 30 06 F1 | 	add	local10, #1
0b888     F2 30 62 FC | 	wrlong	local10, objptr
0b88c     4A 00 00 FF 
0b890     7C E4 85 F1 | 	sub	objptr, ##38012
0b894                 | LR__0978
0b894     A7 F0 03 F6 | 	mov	ptra, fp
0b898     B2 00 A0 FD | 	call	#popregs_
0b89c                 | _getvar_ret
0b89c     2D 00 64 FD | 	ret
0b8a0                 | 
0b8a0                 | ' 
0b8a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b8a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' 
0b8a0                 | ' 
0b8a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' '                                                                                                                                       -
0b8a0                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b8a0                 | ' '                                                                                                                                       -
0b8a0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' 
0b8a0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b8a0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b8a0                 | ' 
0b8a0                 | ' function execute_line (astart=0 as integer) as integer
0b8a0                 | _execute_line
0b8a0     04 4A 05 F6 | 	mov	COUNT_, #4
0b8a4     A8 00 A0 FD | 	call	#pushregs_
0b8a8     50 00 00 FF 
0b8ac     B8 E4 05 F1 | 	add	objptr, ##41144
0b8b0     F2 00 68 FC | 	wrlong	#0, objptr
0b8b4                 | ' runptr2=0
0b8b4                 | ' for lineptr_e=astart to lineptr-1
0b8b4     06 00 00 FF 
0b8b8     38 E4 85 F1 | 	sub	objptr, ##3128
0b8bc     F2 12 62 FC | 	wrlong	arg01, objptr
0b8c0     04 E4 85 F1 | 	sub	objptr, #4
0b8c4     F2 1E 02 FB | 	rdlong	local01, objptr
0b8c8     4A 00 00 FF 
0b8cc     7C E4 85 F1 | 	sub	objptr, ##38012
0b8d0                 | LR__0980
0b8d0     4A 00 00 FF 
0b8d4     80 E4 05 F1 | 	add	objptr, ##38016
0b8d8     F2 FA 01 FB | 	rdlong	result1, objptr
0b8dc     4A 00 00 FF 
0b8e0     80 E4 85 F1 | 	sub	objptr, ##38016
0b8e4     0F FB 51 F2 | 	cmps	result1, local01 wc
0b8e8     98 00 90 3D |  if_ae	jmp	#LR__0981
0b8ec     4A 00 00 FF 
0b8f0     80 E4 05 F1 | 	add	objptr, ##38016
0b8f4     F2 FA 01 FB | 	rdlong	result1, objptr
0b8f8     FD 20 02 F6 | 	mov	local02, result1
0b8fc     01 20 66 F0 | 	shl	local02, #1
0b900     FD 20 02 F1 | 	add	local02, result1
0b904     02 20 66 F0 | 	shl	local02, #2
0b908     03 00 00 FF 
0b90c     04 E4 85 F1 | 	sub	objptr, ##1540
0b910     F2 20 02 F1 | 	add	local02, objptr
0b914     08 20 06 F1 | 	add	local02, #8
0b918     10 21 02 FB | 	rdlong	local02, local02
0b91c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b920     02 20 66 F0 | 	shl	local02, #2
0b924     04 00 00 FF 
0b928     1C E4 85 F1 | 	sub	objptr, ##2076
0b92c     F2 20 02 F1 | 	add	local02, objptr
0b930     10 21 02 FB | 	rdlong	local02, local02
0b934     10 23 02 F6 | 	mov	local03, local02
0b938     13 20 46 F7 | 	zerox	local02, #19
0b93c     14 22 46 F0 | 	shr	local03, #20
0b940     02 22 66 F0 | 	shl	local03, #2
0b944     ED 22 02 F1 | 	add	local03, __methods__
0b948     11 23 02 FB | 	rdlong	local03, local03
0b94c     43 00 00 FF 
0b950     60 E4 85 F1 | 	sub	objptr, ##34400
0b954     F2 24 02 F6 | 	mov	local04, objptr
0b958     10 E5 01 F6 | 	mov	objptr, local02
0b95c     2D 22 62 FD | 	call	local03
0b960     12 E5 01 F6 | 	mov	objptr, local04
0b964     4A 00 00 FF 
0b968     80 E4 05 F1 | 	add	objptr, ##38016
0b96c     F2 24 02 FB | 	rdlong	local04, objptr
0b970     01 24 06 F1 | 	add	local04, #1
0b974     F2 24 62 FC | 	wrlong	local04, objptr
0b978     4A 00 00 FF 
0b97c     80 E4 85 F1 | 	sub	objptr, ##38016
0b980     4C FF 9F FD | 	jmp	#LR__0980
0b984                 | LR__0981
0b984                 | ' return runptr2
0b984     50 00 00 FF 
0b988     B8 E4 05 F1 | 	add	objptr, ##41144
0b98c     F2 FA 01 FB | 	rdlong	result1, objptr
0b990     50 00 00 FF 
0b994     B8 E4 85 F1 | 	sub	objptr, ##41144
0b998     A7 F0 03 F6 | 	mov	ptra, fp
0b99c     B2 00 A0 FD | 	call	#popregs_
0b9a0                 | _execute_line_ret
0b9a0     2D 00 64 FD | 	ret
0b9a4                 | 
0b9a4                 | ' 
0b9a4                 | ' 
0b9a4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b9a4                 | ' 
0b9a4                 | ' function pop() as expr_result
0b9a4                 | _pop
0b9a4                 | ' 
0b9a4                 | ' if stackpointer=0 then
0b9a4     43 00 00 FF 
0b9a8     58 E4 05 F1 | 	add	objptr, ##34392
0b9ac     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b9b0     43 00 00 FF 
0b9b4     58 E4 85 F1 | 	sub	objptr, ##34392
0b9b8     FF 04 06 A6 |  if_e	mov	_var03, #255
0b9bc     18 00 06 A6 |  if_e	mov	_var01, #24
0b9c0     68 00 90 AD |  if_e	jmp	#LR__0990
0b9c4     43 00 00 FF 
0b9c8     58 E4 05 F1 | 	add	objptr, ##34392
0b9cc     F2 FA 01 FB | 	rdlong	result1, objptr
0b9d0     01 FA 85 F1 | 	sub	result1, #1
0b9d4     F2 FA 61 FC | 	wrlong	result1, objptr
0b9d8     FD FE 01 F6 | 	mov	result3, result1
0b9dc     01 FE 65 F0 | 	shl	result3, #1
0b9e0     FD FE 01 F1 | 	add	result3, result1
0b9e4     02 FE 65 F0 | 	shl	result3, #2
0b9e8     0C 00 00 FF 
0b9ec     0C E4 85 F1 | 	sub	objptr, ##6156
0b9f0     F2 FE 01 F1 | 	add	result3, objptr
0b9f4     FF 00 02 FB | 	rdlong	_var01, result3
0b9f8     04 FE 05 F1 | 	add	result3, #4
0b9fc     FF FE 01 FB | 	rdlong	result3, result3
0ba00     FD FC 01 F6 | 	mov	result2, result1
0ba04     01 FC 65 F0 | 	shl	result2, #1
0ba08     FD FC 01 F1 | 	add	result2, result1
0ba0c     02 FC 65 F0 | 	shl	result2, #2
0ba10     F2 FC 01 F1 | 	add	result2, objptr
0ba14     08 FC 05 F1 | 	add	result2, #8
0ba18     FE FA 01 FB | 	rdlong	result1, result2
0ba1c     FF 02 02 F6 | 	mov	_var02, result3
0ba20     FD 04 02 F6 | 	mov	_var03, result1
0ba24     37 00 00 FF 
0ba28     4C E4 85 F1 | 	sub	objptr, ##28236
0ba2c                 | LR__0990
0ba2c                 | ' return t1
0ba2c     01 FD 01 F6 | 	mov	result2, _var02
0ba30     02 FF 01 F6 | 	mov	result3, _var03
0ba34     00 FB 01 F6 | 	mov	result1, _var01
0ba38                 | _pop_ret
0ba38     2D 00 64 FD | 	ret
0ba3c                 | 
0ba3c                 | ' 
0ba3c                 | ' sub push(t1 as expr_result )
0ba3c                 | _push
0ba3c                 | ' 
0ba3c                 | ' 'print "In push: "; t1.result_type
0ba3c                 | ' 'print "In push: "; t1.result.uresult
0ba3c                 | ' 
0ba3c                 | ' if stackpointer<maxstack then 
0ba3c     43 00 00 FF 
0ba40     58 E4 05 F1 | 	add	objptr, ##34392
0ba44     F2 00 02 FB | 	rdlong	_var01, objptr
0ba48     43 00 00 FF 
0ba4c     58 E4 85 F1 | 	sub	objptr, ##34392
0ba50     01 00 00 FF 
0ba54     00 00 56 F2 | 	cmps	_var01, ##512 wc
0ba58     BC 00 90 3D |  if_ae	jmp	#LR__1000
0ba5c     09 01 02 FB | 	rdlong	_var01, arg01
0ba60     04 12 06 F1 | 	add	arg01, #4
0ba64     09 03 02 FB | 	rdlong	_var02, arg01
0ba68     04 12 06 F1 | 	add	arg01, #4
0ba6c     09 13 02 FB | 	rdlong	arg01, arg01
0ba70     43 00 00 FF 
0ba74     58 E4 05 F1 | 	add	objptr, ##34392
0ba78     F2 04 02 FB | 	rdlong	_var03, objptr
0ba7c     02 07 02 F6 | 	mov	_var04, _var03
0ba80     01 06 66 F0 | 	shl	_var04, #1
0ba84     02 07 02 F1 | 	add	_var04, _var03
0ba88     02 06 66 F0 | 	shl	_var04, #2
0ba8c     0C 00 00 FF 
0ba90     0C E4 85 F1 | 	sub	objptr, ##6156
0ba94     F2 06 02 F1 | 	add	_var04, objptr
0ba98     03 01 62 FC | 	wrlong	_var01, _var04
0ba9c     0C 00 00 FF 
0baa0     0C E4 05 F1 | 	add	objptr, ##6156
0baa4     F2 06 02 FB | 	rdlong	_var04, objptr
0baa8     03 05 02 F6 | 	mov	_var03, _var04
0baac     01 04 66 F0 | 	shl	_var03, #1
0bab0     03 05 02 F1 | 	add	_var03, _var04
0bab4     02 04 66 F0 | 	shl	_var03, #2
0bab8     0C 00 00 FF 
0babc     0C E4 85 F1 | 	sub	objptr, ##6156
0bac0     F2 04 02 F1 | 	add	_var03, objptr
0bac4     04 04 06 F1 | 	add	_var03, #4
0bac8     02 03 62 FC | 	wrlong	_var02, _var03
0bacc     0C 00 00 FF 
0bad0     0C E4 05 F1 | 	add	objptr, ##6156
0bad4     F2 06 02 FB | 	rdlong	_var04, objptr
0bad8     03 05 02 F6 | 	mov	_var03, _var04
0badc     01 04 66 F0 | 	shl	_var03, #1
0bae0     03 05 02 F1 | 	add	_var03, _var04
0bae4     02 04 66 F0 | 	shl	_var03, #2
0bae8     0C 00 00 FF 
0baec     0C E4 85 F1 | 	sub	objptr, ##6156
0baf0     F2 04 02 F1 | 	add	_var03, objptr
0baf4     08 04 06 F1 | 	add	_var03, #8
0baf8     02 13 62 FC | 	wrlong	arg01, _var03
0bafc     0C 00 00 FF 
0bb00     0C E4 05 F1 | 	add	objptr, ##6156
0bb04     F2 00 02 FB | 	rdlong	_var01, objptr
0bb08     01 00 06 F1 | 	add	_var01, #1
0bb0c     F2 00 62 FC | 	wrlong	_var01, objptr
0bb10     43 00 00 FF 
0bb14     58 E4 85 F1 | 	sub	objptr, ##34392
0bb18                 | LR__1000
0bb18                 | _push_ret
0bb18     2D 00 64 FD | 	ret
0bb1c                 | 
0bb1c                 | ' 
0bb1c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bb1c                 | ' 
0bb1c                 | ' sub do_push
0bb1c                 | _do_push
0bb1c                 | ' if stackpointer<maxstack then 
0bb1c     43 00 00 FF 
0bb20     58 E4 05 F1 | 	add	objptr, ##34392
0bb24     F2 00 02 FB | 	rdlong	_var01, objptr
0bb28     43 00 00 FF 
0bb2c     58 E4 85 F1 | 	sub	objptr, ##34392
0bb30     01 00 00 FF 
0bb34     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bb38     F8 00 90 3D |  if_ae	jmp	#LR__1010
0bb3c     4A 00 00 FF 
0bb40     80 E4 05 F1 | 	add	objptr, ##38016
0bb44     F2 02 02 FB | 	rdlong	_var02, objptr
0bb48     01 05 02 F6 | 	mov	_var03, _var02
0bb4c     01 04 66 F0 | 	shl	_var03, #1
0bb50     01 05 02 F1 | 	add	_var03, _var02
0bb54     02 04 66 F0 | 	shl	_var03, #2
0bb58     03 00 00 FF 
0bb5c     04 E4 85 F1 | 	sub	objptr, ##1540
0bb60     F2 04 02 F1 | 	add	_var03, objptr
0bb64     02 01 02 FB | 	rdlong	_var01, _var03
0bb68     04 04 06 F1 | 	add	_var03, #4
0bb6c     02 07 02 FB | 	rdlong	_var04, _var03
0bb70     01 05 02 F6 | 	mov	_var03, _var02
0bb74     01 04 66 F0 | 	shl	_var03, #1
0bb78     01 05 02 F1 | 	add	_var03, _var02
0bb7c     02 04 66 F0 | 	shl	_var03, #2
0bb80     F2 04 02 F1 | 	add	_var03, objptr
0bb84     08 04 06 F1 | 	add	_var03, #8
0bb88     02 03 02 FB | 	rdlong	_var02, _var03
0bb8c     04 00 00 FF 
0bb90     24 E4 85 F1 | 	sub	objptr, ##2084
0bb94     F2 04 02 FB | 	rdlong	_var03, objptr
0bb98     02 09 02 F6 | 	mov	_var05, _var03
0bb9c     01 08 66 F0 | 	shl	_var05, #1
0bba0     02 09 02 F1 | 	add	_var05, _var03
0bba4     02 08 66 F0 | 	shl	_var05, #2
0bba8     0C 00 00 FF 
0bbac     0C E4 85 F1 | 	sub	objptr, ##6156
0bbb0     F2 08 02 F1 | 	add	_var05, objptr
0bbb4     04 01 62 FC | 	wrlong	_var01, _var05
0bbb8     0C 00 00 FF 
0bbbc     0C E4 05 F1 | 	add	objptr, ##6156
0bbc0     F2 08 02 FB | 	rdlong	_var05, objptr
0bbc4     04 05 02 F6 | 	mov	_var03, _var05
0bbc8     01 04 66 F0 | 	shl	_var03, #1
0bbcc     04 05 02 F1 | 	add	_var03, _var05
0bbd0     02 04 66 F0 | 	shl	_var03, #2
0bbd4     0C 00 00 FF 
0bbd8     0C E4 85 F1 | 	sub	objptr, ##6156
0bbdc     F2 04 02 F1 | 	add	_var03, objptr
0bbe0     04 04 06 F1 | 	add	_var03, #4
0bbe4     02 07 62 FC | 	wrlong	_var04, _var03
0bbe8     0C 00 00 FF 
0bbec     0C E4 05 F1 | 	add	objptr, ##6156
0bbf0     F2 08 02 FB | 	rdlong	_var05, objptr
0bbf4     04 07 02 F6 | 	mov	_var04, _var05
0bbf8     01 06 66 F0 | 	shl	_var04, #1
0bbfc     04 07 02 F1 | 	add	_var04, _var05
0bc00     02 06 66 F0 | 	shl	_var04, #2
0bc04     0C 00 00 FF 
0bc08     0C E4 85 F1 | 	sub	objptr, ##6156
0bc0c     F2 06 02 F1 | 	add	_var04, objptr
0bc10     08 06 06 F1 | 	add	_var04, #8
0bc14     03 03 62 FC | 	wrlong	_var02, _var04
0bc18     0C 00 00 FF 
0bc1c     0C E4 05 F1 | 	add	objptr, ##6156
0bc20     F2 00 02 FB | 	rdlong	_var01, objptr
0bc24     01 00 06 F1 | 	add	_var01, #1
0bc28     F2 00 62 FC | 	wrlong	_var01, objptr
0bc2c     43 00 00 FF 
0bc30     58 E4 85 F1 | 	sub	objptr, ##34392
0bc34                 | LR__1010
0bc34                 | _do_push_ret
0bc34     2D 00 64 FD | 	ret
0bc38                 | 
0bc38                 | ' 
0bc38                 | '   
0bc38                 | ' sub csave_block(address as ulong)
0bc38                 | _csave_block
0bc38     09 01 02 F6 | 	mov	_var01, arg01
0bc3c                 | ' 
0bc3c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0bc3c                 | ' ' we enter it at the state of playing 1 kHz header tone
0bc3c                 | ' 
0bc3c                 | ' for i=0 to 63 step 2
0bc3c     00 02 06 F6 | 	mov	_var02, #0
0bc40                 | LR__1020
0bc40                 | '   do: loop until lpeek(base+64*7)>32768
0bc40     37 00 00 FF 
0bc44     10 E4 05 F1 | 	add	objptr, ##28176
0bc48     97 0C 48 FB | 	callpa	#(@LR__1022-@LR__1021)>>2,fcache_load_ptr_
0bc4c                 | LR__1021
0bc4c     F2 12 02 FB | 	rdlong	arg01, objptr
0bc50     C0 13 06 F1 | 	add	arg01, #448
0bc54     09 FB 01 FB | 	rdlong	result1, arg01
0bc58     40 00 00 FF 
0bc5c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bc60     E8 FF 9F CD |  if_b	jmp	#LR__1021
0bc64                 | LR__1022
0bc64     00 13 02 F6 | 	mov	arg01, _var01
0bc68     01 05 02 F6 | 	mov	_var03, _var02
0bc6c     02 04 66 F0 | 	shl	_var03, #2
0bc70     02 13 02 F1 | 	add	arg01, _var03
0bc74     09 07 02 FB | 	rdlong	_var04, arg01
0bc78     1A 00 00 FF 
0bc7c     F8 E5 05 F1 | 	add	objptr, ##13816
0bc80     F2 06 62 FC | 	wrlong	_var04, objptr
0bc84     52 00 00 FF 
0bc88     08 E4 85 F1 | 	sub	objptr, ##41992
0bc8c                 | '   q=lpeek(address+4*i)
0bc8c                 | '      for bit=0 to 31
0bc8c     00 08 06 F6 | 	mov	_var05, #0
0bc90     97 84 48 FB | 	callpa	#(@LR__1027-@LR__1023)>>2,fcache_load_ptr_
0bc94                 | LR__1023
0bc94                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bc94     52 00 00 FF 
0bc98     08 E4 05 F1 | 	add	objptr, ##41992
0bc9c     F2 06 02 FB | 	rdlong	_var04, objptr
0bca0     52 00 00 FF 
0bca4     08 E4 85 F1 | 	sub	objptr, ##41992
0bca8     04 05 C2 F9 | 	decod	_var03, _var05
0bcac     02 07 CA F7 | 	test	_var04, _var03 wz
0bcb0     60 00 90 AD |  if_e	jmp	#LR__1024
0bcb4     04 05 02 F6 | 	mov	_var03, _var05
0bcb8     02 04 66 F0 | 	shl	_var03, #2
0bcbc     4D 00 00 FF 
0bcc0     B0 E5 05 F1 | 	add	objptr, ##39856
0bcc4     F2 04 02 F1 | 	add	_var03, objptr
0bcc8     02 FF 48 FC | 	wrbyte	#127, _var03
0bccc     04 05 02 F6 | 	mov	_var03, _var05
0bcd0     02 04 66 F0 | 	shl	_var03, #2
0bcd4     01 04 06 F1 | 	add	_var03, #1
0bcd8     F2 04 02 F1 | 	add	_var03, objptr
0bcdc     02 01 49 FC | 	wrbyte	#128, _var03
0bce0     04 05 02 F6 | 	mov	_var03, _var05
0bce4     02 04 66 F0 | 	shl	_var03, #2
0bce8     02 04 06 F1 | 	add	_var03, #2
0bcec     F2 04 02 F1 | 	add	_var03, objptr
0bcf0     02 FF 48 FC | 	wrbyte	#127, _var03
0bcf4     04 05 02 F6 | 	mov	_var03, _var05
0bcf8     02 04 66 F0 | 	shl	_var03, #2
0bcfc     03 04 06 F1 | 	add	_var03, #3
0bd00     F2 04 02 F1 | 	add	_var03, objptr
0bd04     02 01 49 FC | 	wrbyte	#128, _var03
0bd08     4D 00 00 FF 
0bd0c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bd10     5C 00 90 FD | 	jmp	#LR__1025
0bd14                 | LR__1024
0bd14     04 05 02 F6 | 	mov	_var03, _var05
0bd18     02 04 66 F0 | 	shl	_var03, #2
0bd1c     4D 00 00 FF 
0bd20     B0 E5 05 F1 | 	add	objptr, ##39856
0bd24     F2 04 02 F1 | 	add	_var03, objptr
0bd28     02 01 49 FC | 	wrbyte	#128, _var03
0bd2c     04 05 02 F6 | 	mov	_var03, _var05
0bd30     02 04 66 F0 | 	shl	_var03, #2
0bd34     01 04 06 F1 | 	add	_var03, #1
0bd38     F2 04 02 F1 | 	add	_var03, objptr
0bd3c     02 01 49 FC | 	wrbyte	#128, _var03
0bd40     04 05 02 F6 | 	mov	_var03, _var05
0bd44     02 04 66 F0 | 	shl	_var03, #2
0bd48     02 04 06 F1 | 	add	_var03, #2
0bd4c     F2 04 02 F1 | 	add	_var03, objptr
0bd50     02 FF 48 FC | 	wrbyte	#127, _var03
0bd54     04 05 02 F6 | 	mov	_var03, _var05
0bd58     02 04 66 F0 | 	shl	_var03, #2
0bd5c     03 04 06 F1 | 	add	_var03, #3
0bd60     F2 04 02 F1 | 	add	_var03, objptr
0bd64     02 FF 48 FC | 	wrbyte	#127, _var03
0bd68     4D 00 00 FF 
0bd6c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bd70                 | LR__1025
0bd70     01 08 06 F1 | 	add	_var05, #1
0bd74     20 08 56 F2 | 	cmps	_var05, #32 wc
0bd78     18 FF 9F CD |  if_b	jmp	#LR__1023
0bd7c                 | '   do: loop until lpeek(base+64*7)<32768
0bd7c     37 00 00 FF 
0bd80     10 E4 05 F1 | 	add	objptr, ##28176
0bd84                 | LR__1026
0bd84     F2 12 02 FB | 	rdlong	arg01, objptr
0bd88     C0 13 06 F1 | 	add	arg01, #448
0bd8c     09 FB 01 FB | 	rdlong	result1, arg01
0bd90     40 00 00 FF 
0bd94     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bd98     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bd9c                 | LR__1027
0bd9c     00 13 02 F6 | 	mov	arg01, _var01
0bda0     04 12 06 F1 | 	add	arg01, #4
0bda4     01 05 02 F6 | 	mov	_var03, _var02
0bda8     02 04 66 F0 | 	shl	_var03, #2
0bdac     02 13 02 F1 | 	add	arg01, _var03
0bdb0     09 07 02 FB | 	rdlong	_var04, arg01
0bdb4     1A 00 00 FF 
0bdb8     F8 E5 05 F1 | 	add	objptr, ##13816
0bdbc     F2 06 62 FC | 	wrlong	_var04, objptr
0bdc0     52 00 00 FF 
0bdc4     08 E4 85 F1 | 	sub	objptr, ##41992
0bdc8                 | '   q=lpeek(address+4+4*i)
0bdc8                 | '      for bit=0 to 31
0bdc8     00 08 06 F6 | 	mov	_var05, #0
0bdcc     97 94 48 FB | 	callpa	#(@LR__1031-@LR__1028)>>2,fcache_load_ptr_
0bdd0                 | LR__1028
0bdd0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bdd0     52 00 00 FF 
0bdd4     08 E4 05 F1 | 	add	objptr, ##41992
0bdd8     F2 06 02 FB | 	rdlong	_var04, objptr
0bddc     52 00 00 FF 
0bde0     08 E4 85 F1 | 	sub	objptr, ##41992
0bde4     04 05 C2 F9 | 	decod	_var03, _var05
0bde8     02 07 CA F7 | 	test	_var04, _var03 wz
0bdec     80 00 90 AD |  if_e	jmp	#LR__1029
0bdf0     04 0B 02 F6 | 	mov	_var06, _var05
0bdf4     02 0A 66 F0 | 	shl	_var06, #2
0bdf8     80 04 06 F6 | 	mov	_var03, #128
0bdfc     05 05 02 F1 | 	add	_var03, _var06
0be00     4D 00 00 FF 
0be04     B0 E5 05 F1 | 	add	objptr, ##39856
0be08     F2 04 02 F1 | 	add	_var03, objptr
0be0c     02 FF 48 FC | 	wrbyte	#127, _var03
0be10     04 0B 02 F6 | 	mov	_var06, _var05
0be14     02 0A 66 F0 | 	shl	_var06, #2
0be18     80 04 06 F6 | 	mov	_var03, #128
0be1c     05 05 02 F1 | 	add	_var03, _var06
0be20     01 04 06 F1 | 	add	_var03, #1
0be24     F2 04 02 F1 | 	add	_var03, objptr
0be28     02 01 49 FC | 	wrbyte	#128, _var03
0be2c     04 0B 02 F6 | 	mov	_var06, _var05
0be30     02 0A 66 F0 | 	shl	_var06, #2
0be34     80 04 06 F6 | 	mov	_var03, #128
0be38     05 05 02 F1 | 	add	_var03, _var06
0be3c     02 04 06 F1 | 	add	_var03, #2
0be40     F2 04 02 F1 | 	add	_var03, objptr
0be44     02 FF 48 FC | 	wrbyte	#127, _var03
0be48     04 0B 02 F6 | 	mov	_var06, _var05
0be4c     02 0A 66 F0 | 	shl	_var06, #2
0be50     80 04 06 F6 | 	mov	_var03, #128
0be54     05 05 02 F1 | 	add	_var03, _var06
0be58     03 04 06 F1 | 	add	_var03, #3
0be5c     F2 04 02 F1 | 	add	_var03, objptr
0be60     02 01 49 FC | 	wrbyte	#128, _var03
0be64     4D 00 00 FF 
0be68     B0 E5 85 F1 | 	sub	objptr, ##39856
0be6c     7C 00 90 FD | 	jmp	#LR__1030
0be70                 | LR__1029
0be70     04 0B 02 F6 | 	mov	_var06, _var05
0be74     02 0A 66 F0 | 	shl	_var06, #2
0be78     80 04 06 F6 | 	mov	_var03, #128
0be7c     05 05 02 F1 | 	add	_var03, _var06
0be80     4D 00 00 FF 
0be84     B0 E5 05 F1 | 	add	objptr, ##39856
0be88     F2 04 02 F1 | 	add	_var03, objptr
0be8c     02 01 49 FC | 	wrbyte	#128, _var03
0be90     04 0B 02 F6 | 	mov	_var06, _var05
0be94     02 0A 66 F0 | 	shl	_var06, #2
0be98     80 04 06 F6 | 	mov	_var03, #128
0be9c     05 05 02 F1 | 	add	_var03, _var06
0bea0     01 04 06 F1 | 	add	_var03, #1
0bea4     F2 04 02 F1 | 	add	_var03, objptr
0bea8     02 01 49 FC | 	wrbyte	#128, _var03
0beac     04 0B 02 F6 | 	mov	_var06, _var05
0beb0     02 0A 66 F0 | 	shl	_var06, #2
0beb4     80 04 06 F6 | 	mov	_var03, #128
0beb8     05 05 02 F1 | 	add	_var03, _var06
0bebc     02 04 06 F1 | 	add	_var03, #2
0bec0     F2 04 02 F1 | 	add	_var03, objptr
0bec4     02 FF 48 FC | 	wrbyte	#127, _var03
0bec8     04 0B 02 F6 | 	mov	_var06, _var05
0becc     02 0A 66 F0 | 	shl	_var06, #2
0bed0     80 04 06 F6 | 	mov	_var03, #128
0bed4     05 05 02 F1 | 	add	_var03, _var06
0bed8     03 04 06 F1 | 	add	_var03, #3
0bedc     F2 04 02 F1 | 	add	_var03, objptr
0bee0     02 FF 48 FC | 	wrbyte	#127, _var03
0bee4     4D 00 00 FF 
0bee8     B0 E5 85 F1 | 	sub	objptr, ##39856
0beec                 | LR__1030
0beec     01 08 06 F1 | 	add	_var05, #1
0bef0     20 08 56 F2 | 	cmps	_var05, #32 wc
0bef4     D8 FE 9F CD |  if_b	jmp	#LR__1028
0bef8                 | LR__1031
0bef8     02 02 06 F1 | 	add	_var02, #2
0befc     40 02 56 F2 | 	cmps	_var02, #64 wc
0bf00     3C FD 9F CD |  if_b	jmp	#LR__1020
0bf04                 | ' do: loop until lpeek(base+64*7)>32768
0bf04     37 00 00 FF 
0bf08     10 E4 05 F1 | 	add	objptr, ##28176
0bf0c     97 84 48 FB | 	callpa	#(@LR__1040-@LR__1032)>>2,fcache_load_ptr_
0bf10                 | LR__1032
0bf10     F2 12 02 FB | 	rdlong	arg01, objptr
0bf14     C0 13 06 F1 | 	add	arg01, #448
0bf18     09 FB 01 FB | 	rdlong	result1, arg01
0bf1c     40 00 00 FF 
0bf20     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bf24     E8 FF 9F CD |  if_b	jmp	#LR__1032
0bf28     37 00 00 FF 
0bf2c     10 E4 85 F1 | 	sub	objptr, ##28176
0bf30                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bf30     00 02 06 F6 | 	mov	_var02, #0
0bf34                 | LR__1033
0bf34     01 07 52 F6 | 	abs	_var04, _var02 wc
0bf38     07 06 06 F5 | 	and	_var04, #7
0bf3c     03 07 82 F6 | 	negc	_var04, _var04
0bf40     04 06 56 F2 | 	cmps	_var04, #4 wc
0bf44     20 00 90 3D |  if_ae	jmp	#LR__1034
0bf48     01 0B 02 F6 | 	mov	_var06, _var02
0bf4c     4D 00 00 FF 
0bf50     B0 E5 05 F1 | 	add	objptr, ##39856
0bf54     F2 0A 02 F1 | 	add	_var06, objptr
0bf58     05 FF 48 FC | 	wrbyte	#127, _var06
0bf5c     4D 00 00 FF 
0bf60     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf64     1C 00 90 FD | 	jmp	#LR__1035
0bf68                 | LR__1034
0bf68     01 0B 02 F6 | 	mov	_var06, _var02
0bf6c     4D 00 00 FF 
0bf70     B0 E5 05 F1 | 	add	objptr, ##39856
0bf74     F2 0A 02 F1 | 	add	_var06, objptr
0bf78     05 01 49 FC | 	wrbyte	#128, _var06
0bf7c     4D 00 00 FF 
0bf80     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf84                 | LR__1035
0bf84     01 02 06 F1 | 	add	_var02, #1
0bf88     80 02 56 F2 | 	cmps	_var02, #128 wc
0bf8c     A4 FF 9F CD |  if_b	jmp	#LR__1033
0bf90                 | ' 
0bf90                 | ' do: loop until lpeek(base+64*7)<32768
0bf90     37 00 00 FF 
0bf94     10 E4 05 F1 | 	add	objptr, ##28176
0bf98                 | LR__1036
0bf98     F2 12 02 FB | 	rdlong	arg01, objptr
0bf9c     C0 13 06 F1 | 	add	arg01, #448
0bfa0     09 FB 01 FB | 	rdlong	result1, arg01
0bfa4     40 00 00 FF 
0bfa8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bfac     E8 FF 9F 3D |  if_ae	jmp	#LR__1036
0bfb0     37 00 00 FF 
0bfb4     10 E4 85 F1 | 	sub	objptr, ##28176
0bfb8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bfb8     80 02 06 F6 | 	mov	_var02, #128
0bfbc                 | LR__1037
0bfbc     01 07 52 F6 | 	abs	_var04, _var02 wc
0bfc0     07 06 06 F5 | 	and	_var04, #7
0bfc4     03 07 82 F6 | 	negc	_var04, _var04
0bfc8     04 06 56 F2 | 	cmps	_var04, #4 wc
0bfcc     20 00 90 3D |  if_ae	jmp	#LR__1038
0bfd0     01 0B 02 F6 | 	mov	_var06, _var02
0bfd4     4D 00 00 FF 
0bfd8     B0 E5 05 F1 | 	add	objptr, ##39856
0bfdc     F2 0A 02 F1 | 	add	_var06, objptr
0bfe0     05 FF 48 FC | 	wrbyte	#127, _var06
0bfe4     4D 00 00 FF 
0bfe8     B0 E5 85 F1 | 	sub	objptr, ##39856
0bfec     1C 00 90 FD | 	jmp	#LR__1039
0bff0                 | LR__1038
0bff0     01 0B 02 F6 | 	mov	_var06, _var02
0bff4     4D 00 00 FF 
0bff8     B0 E5 05 F1 | 	add	objptr, ##39856
0bffc     F2 0A 02 F1 | 	add	_var06, objptr
0c000     05 01 49 FC | 	wrbyte	#128, _var06
0c004     4D 00 00 FF 
0c008     B0 E5 85 F1 | 	sub	objptr, ##39856
0c00c                 | LR__1039
0c00c     01 02 06 F1 | 	add	_var02, #1
0c010     00 03 16 F2 | 	cmp	_var02, #256 wc
0c014     A4 FF 9F CD |  if_b	jmp	#LR__1037
0c018                 | LR__1040
0c018                 | _csave_block_ret
0c018     2D 00 64 FD | 	ret
0c01c                 | 
0c01c                 | ' 
0c01c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c01c                 | _csave_addtoblock
0c01c     04 4A 05 F6 | 	mov	COUNT_, #4
0c020     A8 00 A0 FD | 	call	#pushregs_
0c024     09 1F 02 F6 | 	mov	local01, arg01
0c028                 | ' 
0c028                 | ' 
0c028                 | ' if force=0 then
0c028     07 14 4E F7 | 	zerox	arg02, #7 wz
0c02c     78 00 90 5D |  if_ne	jmp	#LR__1050
0c030     50 00 00 FF 
0c034     B0 E4 05 F1 | 	add	objptr, ##41136
0c038     F2 14 02 FB | 	rdlong	arg02, objptr
0c03c     02 00 00 FF 
0c040     00 E4 85 F1 | 	sub	objptr, ##1024
0c044     F2 14 02 F1 | 	add	arg02, objptr
0c048     0A 1F 42 FC | 	wrbyte	local01, arg02
0c04c     02 00 00 FF 
0c050     00 E4 05 F1 | 	add	objptr, ##1024
0c054     F2 1E 02 FB | 	rdlong	local01, objptr
0c058     01 1E 06 F1 | 	add	local01, #1
0c05c     F2 1E 62 FC | 	wrlong	local01, objptr
0c060                 | '   block(blockptr)=d
0c060                 | '   blockptr+=1
0c060                 | '   if blockptr>=255 then
0c060     50 00 00 FF 
0c064     B0 E4 85 F1 | 	sub	objptr, ##41136
0c068     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c06c     E4 00 90 CD |  if_b	jmp	#LR__1054
0c070     4E 00 00 FF 
0c074     B0 E4 05 F1 | 	add	objptr, ##40112
0c078     F2 12 02 F6 | 	mov	arg01, objptr
0c07c     4E 00 00 FF 
0c080     B0 E4 85 F1 | 	sub	objptr, ##40112
0c084     B0 FB BF FD | 	call	#_csave_block
0c088     50 00 00 FF 
0c08c     B0 E4 05 F1 | 	add	objptr, ##41136
0c090     F2 00 68 FC | 	wrlong	#0, objptr
0c094     50 00 00 FF 
0c098     B0 E4 85 F1 | 	sub	objptr, ##41136
0c09c     2C 13 06 F6 | 	mov	arg01, #300
0c0a0     78 49 B1 FD | 	call	#__system___waitms
0c0a4     AC 00 90 FD | 	jmp	#LR__1054
0c0a8                 | LR__1050
0c0a8     50 00 00 FF 
0c0ac     B0 E4 05 F1 | 	add	objptr, ##41136
0c0b0     F2 20 02 FB | 	rdlong	local02, objptr
0c0b4     02 00 00 FF 
0c0b8     00 E4 85 F1 | 	sub	objptr, ##1024
0c0bc     F2 20 02 F1 | 	add	local02, objptr
0c0c0     10 1F 42 FC | 	wrbyte	local01, local02
0c0c4                 | '   block(blockptr)=d
0c0c4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c0c4     02 00 00 FF 
0c0c8     00 E4 05 F1 | 	add	objptr, ##1024
0c0cc     F2 22 02 FB | 	rdlong	local03, objptr
0c0d0     50 00 00 FF 
0c0d4     B0 E4 85 F1 | 	sub	objptr, ##41136
0c0d8     FF 22 16 F2 | 	cmp	local03, #255 wc
0c0dc     40 00 90 3D |  if_ae	jmp	#LR__1053
0c0e0     50 00 00 FF 
0c0e4     B0 E4 05 F1 | 	add	objptr, ##41136
0c0e8     F2 24 02 FB | 	rdlong	local04, objptr
0c0ec     50 00 00 FF 
0c0f0     B0 E4 85 F1 | 	sub	objptr, ##41136
0c0f4                 | LR__1051
0c0f4     00 25 56 F2 | 	cmps	local04, #256 wc
0c0f8     24 00 90 3D |  if_ae	jmp	#LR__1052
0c0fc     12 21 02 F6 | 	mov	local02, local04
0c100     4E 00 00 FF 
0c104     B0 E4 05 F1 | 	add	objptr, ##40112
0c108     F2 20 02 F1 | 	add	local02, objptr
0c10c     10 01 48 FC | 	wrbyte	#0, local02
0c110     01 24 06 F1 | 	add	local04, #1
0c114     4E 00 00 FF 
0c118     B0 E4 85 F1 | 	sub	objptr, ##40112
0c11c     D4 FF 9F FD | 	jmp	#LR__1051
0c120                 | LR__1052
0c120                 | LR__1053
0c120     4E 00 00 FF 
0c124     B0 E4 05 F1 | 	add	objptr, ##40112
0c128     F2 12 02 F6 | 	mov	arg01, objptr
0c12c     4E 00 00 FF 
0c130     B0 E4 85 F1 | 	sub	objptr, ##40112
0c134     00 FB BF FD | 	call	#_csave_block
0c138     50 00 00 FF 
0c13c     B0 E4 05 F1 | 	add	objptr, ##41136
0c140     F2 00 68 FC | 	wrlong	#0, objptr
0c144     50 00 00 FF 
0c148     B0 E4 85 F1 | 	sub	objptr, ##41136
0c14c     2C 13 06 F6 | 	mov	arg01, #300
0c150     C8 48 B1 FD | 	call	#__system___waitms
0c154                 | LR__1054
0c154     A7 F0 03 F6 | 	mov	ptra, fp
0c158     B2 00 A0 FD | 	call	#popregs_
0c15c                 | _csave_addtoblock_ret
0c15c     2D 00 64 FD | 	ret
0c160                 | 
0c160                 | ' 
0c160                 | ' sub test_csave
0c160                 | _test_csave
0c160     04 4A 05 F6 | 	mov	COUNT_, #4
0c164     A8 00 A0 FD | 	call	#pushregs_
0c168     C0 F0 07 F1 | 	add	ptra, #192
0c16c                 | ' 'dim fileheader,savestart, saveptr as ulong
0c16c                 | ' 
0c16c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c16c     4A 00 00 FF 
0c170     84 E4 05 F1 | 	add	objptr, ##38020
0c174     F2 12 02 FB | 	rdlong	arg01, objptr
0c178     4A 00 00 FF 
0c17c     84 E4 85 F1 | 	sub	objptr, ##38020
0c180     D4 14 B1 FD | 	call	#_pslpeek
0c184     FF FF 7F FF 
0c188     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c18c     0C 00 90 5D |  if_ne	jmp	#LR__1060
0c190     1B 12 06 F6 | 	mov	arg01, #27
0c194     2C 12 B1 FD | 	call	#_printerror
0c198     1C 03 90 FD | 	jmp	#LR__1074
0c19c                 | LR__1060
0c19c     04 F8 BF FD | 	call	#_pop
0c1a0     90 4E 05 F1 | 	add	fp, #144
0c1a4     A7 FA 61 FC | 	wrlong	result1, fp
0c1a8     04 4E 05 F1 | 	add	fp, #4
0c1ac     A7 FC 61 FC | 	wrlong	result2, fp
0c1b0     04 4E 05 F1 | 	add	fp, #4
0c1b4     A7 FE 61 FC | 	wrlong	result3, fp
0c1b8                 | ' t1=pop()
0c1b8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c1b8     98 4E 85 F1 | 	sub	fp, #152
0c1bc     1F FE 0D F2 | 	cmp	result3, #31 wz
0c1c0     24 00 90 AD |  if_e	jmp	#LR__1061
0c1c4     51 00 00 FF 
0c1c8     D4 E5 05 F1 | 	add	objptr, ##41940
0c1cc     F2 1C 02 FB | 	rdlong	arg06, objptr
0c1d0     51 00 00 FF 
0c1d4     D4 E5 85 F1 | 	sub	objptr, ##41940
0c1d8     8C 4E 05 F1 | 	add	fp, #140
0c1dc     A7 1C 62 FC | 	wrlong	arg06, fp
0c1e0     8C 4E 85 F1 | 	sub	fp, #140
0c1e4     14 00 90 FD | 	jmp	#LR__1062
0c1e8                 | LR__1061
0c1e8     90 4E 05 F1 | 	add	fp, #144
0c1ec     A7 1C 02 FB | 	rdlong	arg06, fp
0c1f0     04 4E 85 F1 | 	sub	fp, #4
0c1f4     A7 1C 62 FC | 	wrlong	arg06, fp
0c1f8     8C 4E 85 F1 | 	sub	fp, #140
0c1fc                 | LR__1062
0c1fc                 | ' 
0c1fc                 | ' ' prepare 1 kHz header wave
0c1fc                 | ' 
0c1fc                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c1fc     A7 00 68 FC | 	wrlong	#0, fp
0c200     97 34 48 FB | 	callpa	#(@LR__1066-@LR__1063)>>2,fcache_load_ptr_
0c204                 | LR__1063
0c204     A7 1C 02 FB | 	rdlong	arg06, fp
0c208     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c20c     07 1A 06 F5 | 	and	arg05, #7
0c210     0D 1B 82 F6 | 	negc	arg05, arg05
0c214     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c218     20 00 90 3D |  if_ae	jmp	#LR__1064
0c21c     A7 1A 02 FB | 	rdlong	arg05, fp
0c220     4D 00 00 FF 
0c224     B0 E5 05 F1 | 	add	objptr, ##39856
0c228     F2 1A 02 F1 | 	add	arg05, objptr
0c22c     0D FF 48 FC | 	wrbyte	#127, arg05
0c230     4D 00 00 FF 
0c234     B0 E5 85 F1 | 	sub	objptr, ##39856
0c238     1C 00 90 FD | 	jmp	#LR__1065
0c23c                 | LR__1064
0c23c     A7 1A 02 FB | 	rdlong	arg05, fp
0c240     4D 00 00 FF 
0c244     B0 E5 05 F1 | 	add	objptr, ##39856
0c248     F2 1A 02 F1 | 	add	arg05, objptr
0c24c     0D 01 49 FC | 	wrbyte	#128, arg05
0c250     4D 00 00 FF 
0c254     B0 E5 85 F1 | 	sub	objptr, ##39856
0c258                 | LR__1065
0c258     A7 1A 02 FB | 	rdlong	arg05, fp
0c25c     01 1A 06 F1 | 	add	arg05, #1
0c260     A7 1A 62 FC | 	wrlong	arg05, fp
0c264     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c268     98 FF 9F CD |  if_b	jmp	#LR__1063
0c26c                 | LR__1066
0c26c     4D 00 00 FF 
0c270     B0 E5 05 F1 | 	add	objptr, ##39856
0c274     F2 14 02 F6 | 	mov	arg02, objptr
0c278     07 12 06 F6 | 	mov	arg01, #7
0c27c     0F 00 00 FF 
0c280     40 17 06 F6 | 	mov	arg03, ##8000
0c284     0E 18 C6 F9 | 	decod	arg04, #14
0c288     00 1B 06 F6 | 	mov	arg05, #256
0c28c     00 1C 06 F6 | 	mov	arg06, #0
0c290     42 00 00 FF 
0c294     E4 E4 85 F1 | 	sub	objptr, ##34020
0c298     E8 40 B1 FD | 	call	#_audio096_spin2_play8
0c29c     0B 00 00 FF 
0c2a0     CC E4 85 F1 | 	sub	objptr, ##5836
0c2a4     05 00 00 FF 
0c2a8     B8 13 06 F6 | 	mov	arg01, ##3000
0c2ac     6C 47 B1 FD | 	call	#__system___waitms
0c2b0     50 00 00 FF 
0c2b4     B0 E4 05 F1 | 	add	objptr, ##41136
0c2b8     F2 00 68 FC | 	wrlong	#0, objptr
0c2bc     50 00 00 FF 
0c2c0     B0 E4 85 F1 | 	sub	objptr, ##41136
0c2c4     72 12 06 F6 | 	mov	arg01, #114
0c2c8     00 14 06 F6 | 	mov	arg02, #0
0c2cc     4C FD BF FD | 	call	#_csave_addtoblock
0c2d0     62 12 06 F6 | 	mov	arg01, #98
0c2d4     00 14 06 F6 | 	mov	arg02, #0
0c2d8     40 FD BF FD | 	call	#_csave_addtoblock
0c2dc     61 12 06 F6 | 	mov	arg01, #97
0c2e0     00 14 06 F6 | 	mov	arg02, #0
0c2e4     34 FD BF FD | 	call	#_csave_addtoblock
0c2e8     0D 12 06 F6 | 	mov	arg01, #13
0c2ec     00 14 06 F6 | 	mov	arg02, #0
0c2f0     28 FD BF FD | 	call	#_csave_addtoblock
0c2f4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c2f4                 | ' waitms 3000 
0c2f4                 | ' 
0c2f4                 | ' blockptr=0
0c2f4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c2f4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c2f4     A7 02 68 FC | 	wrlong	#1, fp
0c2f8     8C 4E 05 F1 | 	add	fp, #140
0c2fc     A7 12 02 FB | 	rdlong	arg01, fp
0c300     8C 4E 85 F1 | 	sub	fp, #140
0c304     09 1F 02 F6 | 	mov	local01, arg01
0c308     97 06 48 FB | 	callpa	#(@LR__1068-@LR__1067)>>2,fcache_load_ptr_
0c30c                 | LR__1067
0c30c     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c310     01 1E 06 51 |  if_ne	add	local01, #1
0c314     F4 FF 9F 5D |  if_ne	jmp	#LR__1067
0c318                 | LR__1068
0c318     09 1F 82 F1 | 	sub	local01, arg01
0c31c     0F 21 02 F6 | 	mov	local02, local01
0c320     01 20 06 F1 | 	add	local02, #1
0c324                 | LR__1069
0c324     A7 1A 02 FB | 	rdlong	arg05, fp
0c328     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c32c     34 00 90 3D |  if_ae	jmp	#LR__1070
0c330     8C 4E 05 F1 | 	add	fp, #140
0c334     A7 12 02 FB | 	rdlong	arg01, fp
0c338     8C 4E 85 F1 | 	sub	fp, #140
0c33c     A7 14 02 FB | 	rdlong	arg02, fp
0c340     01 16 06 F6 | 	mov	arg03, #1
0c344     74 65 B1 FD | 	call	#__system__Mid_S
0c348     FD 12 C2 FA | 	rdbyte	arg01, result1
0c34c     00 14 06 F6 | 	mov	arg02, #0
0c350     C8 FC BF FD | 	call	#_csave_addtoblock
0c354     A7 1A 02 FB | 	rdlong	arg05, fp
0c358     01 1A 06 F1 | 	add	arg05, #1
0c35c     A7 1A 62 FC | 	wrlong	arg05, fp
0c360     C0 FF 9F FD | 	jmp	#LR__1069
0c364                 | LR__1070
0c364     00 12 06 F6 | 	mov	arg01, #0
0c368     00 14 06 F6 | 	mov	arg02, #0
0c36c     AC FC BF FD | 	call	#_csave_addtoblock
0c370     72 12 06 F6 | 	mov	arg01, #114
0c374     00 14 06 F6 | 	mov	arg02, #0
0c378     A0 FC BF FD | 	call	#_csave_addtoblock
0c37c     62 12 06 F6 | 	mov	arg01, #98
0c380     00 14 06 F6 | 	mov	arg02, #0
0c384     94 FC BF FD | 	call	#_csave_addtoblock
0c388     73 12 06 F6 | 	mov	arg01, #115
0c38c     00 14 06 F6 | 	mov	arg02, #0
0c390     88 FC BF FD | 	call	#_csave_addtoblock
0c394     0D 12 06 F6 | 	mov	arg01, #13
0c398     00 14 06 F6 | 	mov	arg02, #0
0c39c     7C FC BF FD | 	call	#_csave_addtoblock
0c3a0     4A 00 00 FF 
0c3a4     84 E4 05 F1 | 	add	objptr, ##38020
0c3a8     F2 22 02 FB | 	rdlong	local03, objptr
0c3ac     4A 00 00 FF 
0c3b0     84 E4 85 F1 | 	sub	objptr, ##38020
0c3b4     9C 4E 05 F1 | 	add	fp, #156
0c3b8     A7 22 62 FC | 	wrlong	local03, fp
0c3bc     9C 4E 85 F1 | 	sub	fp, #156
0c3c0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c3c0                 | ' 
0c3c0                 | ' saveptr=programstart
0c3c0                 | ' do
0c3c0                 | LR__1071
0c3c0     A0 4E 05 F1 | 	add	fp, #160
0c3c4     A7 12 02 F6 | 	mov	arg01, fp
0c3c8     04 4E 85 F1 | 	sub	fp, #4
0c3cc     A7 14 02 FB | 	rdlong	arg02, fp
0c3d0     9C 4E 85 F1 | 	sub	fp, #156
0c3d4     18 16 06 F6 | 	mov	arg03, #24
0c3d8     0B 00 00 FF 
0c3dc     CC E4 05 F1 | 	add	objptr, ##5836
0c3e0     04 37 B1 FD | 	call	#_psram_spin2_read1
0c3e4     0C 4E 05 F1 | 	add	fp, #12
0c3e8     A7 12 02 F6 | 	mov	arg01, fp
0c3ec     9C 4E 05 F1 | 	add	fp, #156
0c3f0     A7 14 02 FB | 	rdlong	arg02, fp
0c3f4     04 4E 05 F1 | 	add	fp, #4
0c3f8     A7 16 02 FB | 	rdlong	arg03, fp
0c3fc     AC 4E 85 F1 | 	sub	fp, #172
0c400     E4 36 B1 FD | 	call	#_psram_spin2_read1
0c404     0B 00 00 FF 
0c408     CC E4 85 F1 | 	sub	objptr, ##5836
0c40c     AC 4E 05 F1 | 	add	fp, #172
0c410     A7 12 02 FB | 	rdlong	arg01, fp
0c414     AC 4E 85 F1 | 	sub	fp, #172
0c418     00 14 06 F6 | 	mov	arg02, #0
0c41c     FC FB BF FD | 	call	#_csave_addtoblock
0c420                 | ' 
0c420                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c420                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c420                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c420                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c420     A7 00 68 FC | 	wrlong	#0, fp
0c424     AC 4E 05 F1 | 	add	fp, #172
0c428     A7 24 02 FB | 	rdlong	local04, fp
0c42c     AC 4E 85 F1 | 	sub	fp, #172
0c430                 | LR__1072
0c430     A7 22 02 FB | 	rdlong	local03, fp
0c434     12 23 52 F2 | 	cmps	local03, local04 wc
0c438     2C 00 90 3D |  if_ae	jmp	#LR__1073
0c43c     A7 22 02 FB | 	rdlong	local03, fp
0c440     0C 4E 05 F1 | 	add	fp, #12
0c444     A7 22 02 F1 | 	add	local03, fp
0c448     11 13 C2 FA | 	rdbyte	arg01, local03
0c44c     00 14 06 F6 | 	mov	arg02, #0
0c450     0C 4E 85 F1 | 	sub	fp, #12
0c454     C4 FB BF FD | 	call	#_csave_addtoblock
0c458     A7 22 02 FB | 	rdlong	local03, fp
0c45c     01 22 06 F1 | 	add	local03, #1
0c460     A7 22 62 FC | 	wrlong	local03, fp
0c464     C8 FF 9F FD | 	jmp	#LR__1072
0c468                 | LR__1073
0c468     B4 4E 05 F1 | 	add	fp, #180
0c46c     A7 22 02 FB | 	rdlong	local03, fp
0c470     18 4E 85 F1 | 	sub	fp, #24
0c474     A7 22 62 FC | 	wrlong	local03, fp
0c478     18 4E 05 F1 | 	add	fp, #24
0c47c     A7 22 02 FB | 	rdlong	local03, fp
0c480     B4 4E 85 F1 | 	sub	fp, #180
0c484     FF FF 3F FF 
0c488     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c48c     30 FF 9F 5D |  if_ne	jmp	#LR__1071
0c490     00 12 06 F6 | 	mov	arg01, #0
0c494     01 14 06 F6 | 	mov	arg02, #1
0c498     80 FB BF FD | 	call	#_csave_addtoblock
0c49c     37 00 00 FF 
0c4a0     10 E4 05 F1 | 	add	objptr, ##28176
0c4a4     F2 12 02 FB | 	rdlong	arg01, objptr
0c4a8     37 00 00 FF 
0c4ac     10 E4 85 F1 | 	sub	objptr, ##28176
0c4b0     D4 13 06 F1 | 	add	arg01, #468
0c4b4     09 01 58 FC | 	wrword	#0, arg01
0c4b8                 | LR__1074
0c4b8     A7 F0 03 F6 | 	mov	ptra, fp
0c4bc     B2 00 A0 FD | 	call	#popregs_
0c4c0                 | _test_csave_ret
0c4c0     2D 00 64 FD | 	ret
0c4c4                 | 
0c4c4                 | ' 
0c4c4                 | ' ' ----------------- Save the program
0c4c4                 | ' 
0c4c4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c4c4                 | _do_save
0c4c4     04 4A 05 F6 | 	mov	COUNT_, #4
0c4c8     A8 00 A0 FD | 	call	#pushregs_
0c4cc     01 00 00 FF 
0c4d0     C0 F0 07 F1 | 	add	ptra, ##704
0c4d4     4A 00 00 FF 
0c4d8     80 E4 05 F1 | 	add	objptr, ##38016
0c4dc     F2 1E 02 FB | 	rdlong	local01, objptr
0c4e0     0F 21 02 F6 | 	mov	local02, local01
0c4e4     01 20 66 F0 | 	shl	local02, #1
0c4e8     0F 21 02 F1 | 	add	local02, local01
0c4ec     02 20 66 F0 | 	shl	local02, #2
0c4f0     03 00 00 FF 
0c4f4     04 E4 85 F1 | 	sub	objptr, ##1540
0c4f8     F2 20 02 F1 | 	add	local02, objptr
0c4fc     10 23 02 FB | 	rdlong	local03, local02
0c500     01 00 00 FF 
0c504     10 4E 05 F1 | 	add	fp, ##528
0c508     A7 22 62 FC | 	wrlong	local03, fp
0c50c                 | ' 
0c50c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c50c                 | ' 
0c50c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c50c     01 00 00 FF 
0c510     10 4E 85 F1 | 	sub	fp, ##528
0c514     01 22 56 F2 | 	cmps	local03, #1 wc
0c518     47 00 00 FF 
0c51c     7C E4 85 F1 | 	sub	objptr, ##36476
0c520     20 00 90 CD |  if_b	jmp	#LR__1080
0c524     7C F4 BF FD | 	call	#_pop
0c528     A7 FA 61 FC | 	wrlong	result1, fp
0c52c     04 4E 05 F1 | 	add	fp, #4
0c530     A7 FC 61 FC | 	wrlong	result2, fp
0c534     04 4E 05 F1 | 	add	fp, #4
0c538     A7 FE 61 FC | 	wrlong	result3, fp
0c53c     08 4E 85 F1 | 	sub	fp, #8
0c540     24 00 90 FD | 	jmp	#LR__1081
0c544                 | LR__1080
0c544     51 00 00 FF 
0c548     D4 E5 05 F1 | 	add	objptr, ##41940
0c54c     F2 22 02 FB | 	rdlong	local03, objptr
0c550     51 00 00 FF 
0c554     D4 E5 85 F1 | 	sub	objptr, ##41940
0c558     A7 22 62 FC | 	wrlong	local03, fp
0c55c     08 4E 05 F1 | 	add	fp, #8
0c560     A7 3E 68 FC | 	wrlong	#31, fp
0c564     08 4E 85 F1 | 	sub	fp, #8
0c568                 | LR__1081
0c568                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c568     4A 00 00 FF 
0c56c     84 E4 05 F1 | 	add	objptr, ##38020
0c570     F2 12 02 FB | 	rdlong	arg01, objptr
0c574     4A 00 00 FF 
0c578     84 E4 85 F1 | 	sub	objptr, ##38020
0c57c     D8 10 B1 FD | 	call	#_pslpeek
0c580     FF FF 7F FF 
0c584     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c588     0C 00 90 5D |  if_ne	jmp	#LR__1082
0c58c     1B 12 06 F6 | 	mov	arg01, #27
0c590     30 0E B1 FD | 	call	#_printerror
0c594     1C 03 90 FD | 	jmp	#LR__1088
0c598                 | LR__1082
0c598                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c598     08 4E 05 F1 | 	add	fp, #8
0c59c     A7 22 02 FB | 	rdlong	local03, fp
0c5a0     08 4E 85 F1 | 	sub	fp, #8
0c5a4     2B 22 0E F2 | 	cmp	local03, #43 wz
0c5a8     18 00 90 5D |  if_ne	jmp	#LR__1083
0c5ac     A7 12 02 FB | 	rdlong	arg01, fp
0c5b0     90 4C B0 FD | 	call	#_convertstring
0c5b4     A7 FA 61 FC | 	wrlong	result1, fp
0c5b8     08 4E 05 F1 | 	add	fp, #8
0c5bc     A7 3E 68 FC | 	wrlong	#31, fp
0c5c0     08 4E 85 F1 | 	sub	fp, #8
0c5c4                 | LR__1083
0c5c4                 | ' if t1.result_type=result_string then
0c5c4     08 4E 05 F1 | 	add	fp, #8
0c5c8     A7 22 02 FB | 	rdlong	local03, fp
0c5cc     08 4E 85 F1 | 	sub	fp, #8
0c5d0     1F 22 0E F2 | 	cmp	local03, #31 wz
0c5d4     DC 02 90 5D |  if_ne	jmp	#LR__1087
0c5d8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c5d8     A7 12 02 FB | 	rdlong	arg01, fp
0c5dc     82 01 00 FF 
0c5e0     F3 15 06 F6 | 	mov	arg02, ##@LR__5415
0c5e4     68 41 B1 FD | 	call	#__system___string_cmp
0c5e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c5ec     51 00 00 AF 
0c5f0     D4 E5 05 A1 |  if_e	add	objptr, ##41940
0c5f4     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c5f8     A7 22 62 AC |  if_e	wrlong	local03, fp
0c5fc     51 00 00 AF 
0c600     D4 E5 85 A1 |  if_e	sub	objptr, ##41940
0c604     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c608     51 00 00 5F 
0c60c     D4 E5 05 51 |  if_ne	add	objptr, ##41940
0c610     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c614     51 00 00 5F 
0c618     D4 E5 85 51 |  if_ne	sub	objptr, ##41940
0c61c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c61c     09 12 06 F6 | 	mov	arg01, #9
0c620     74 91 B1 FD | 	call	#__system__close
0c624     09 22 06 F6 | 	mov	local03, #9
0c628     4A 00 00 FF 
0c62c     90 E4 05 F1 | 	add	objptr, ##38032
0c630     F2 12 02 FB | 	rdlong	arg01, objptr
0c634     4A 00 00 FF 
0c638     90 E4 85 F1 | 	sub	objptr, ##38032
0c63c     82 01 00 FF 
0c640     F4 15 06 F6 | 	mov	arg02, ##@LR__5416
0c644     3C 41 B1 FD | 	call	#__system___string_concat
0c648     FD 12 02 F6 | 	mov	arg01, result1
0c64c     A7 14 02 FB | 	rdlong	arg02, fp
0c650     30 41 B1 FD | 	call	#__system___string_concat
0c654     FD 14 02 F6 | 	mov	arg02, result1
0c658     11 13 02 F6 | 	mov	arg01, local03
0c65c     0D 16 06 F6 | 	mov	arg03, #13
0c660     C8 4C B1 FD | 	call	#__system___basic_open_string
0c664     01 00 00 FF 
0c668     0C 4E 05 F1 | 	add	fp, ##524
0c66c     A7 0A 68 FC | 	wrlong	#5, fp
0c670     4A 00 00 FF 
0c674     84 E4 05 F1 | 	add	objptr, ##38020
0c678     F2 22 02 FB | 	rdlong	local03, objptr
0c67c     4A 00 00 FF 
0c680     84 E4 85 F1 | 	sub	objptr, ##38020
0c684     10 4E 05 F1 | 	add	fp, #16
0c688     A7 22 62 FC | 	wrlong	local03, fp
0c68c     01 00 00 FF 
0c690     1C 4E 85 F1 | 	sub	fp, ##540
0c694                 | ' '  put #9,1,fileheader,1
0c694                 | '   i=5
0c694                 | '   saveptr=programstart
0c694                 | '   do
0c694                 | LR__1084
0c694     01 00 00 FF 
0c698     20 4E 05 F1 | 	add	fp, ##544
0c69c     A7 12 02 F6 | 	mov	arg01, fp
0c6a0     04 4E 85 F1 | 	sub	fp, #4
0c6a4     A7 14 02 FB | 	rdlong	arg02, fp
0c6a8     01 00 00 FF 
0c6ac     1C 4E 85 F1 | 	sub	fp, ##540
0c6b0     18 16 06 F6 | 	mov	arg03, #24
0c6b4     0B 00 00 FF 
0c6b8     CC E4 05 F1 | 	add	objptr, ##5836
0c6bc     28 34 B1 FD | 	call	#_psram_spin2_read1
0c6c0     01 00 00 FF 
0c6c4     38 4E 05 F1 | 	add	fp, ##568
0c6c8     A7 12 02 F6 | 	mov	arg01, fp
0c6cc     10 4E 85 F1 | 	sub	fp, #16
0c6d0     A7 14 02 FB | 	rdlong	arg02, fp
0c6d4     04 4E 05 F1 | 	add	fp, #4
0c6d8     A7 16 02 FB | 	rdlong	arg03, fp
0c6dc     01 00 00 FF 
0c6e0     2C 4E 85 F1 | 	sub	fp, ##556
0c6e4     00 34 B1 FD | 	call	#_psram_spin2_read1
0c6e8     0B 00 00 FF 
0c6ec     CC E4 85 F1 | 	sub	objptr, ##5836
0c6f0     82 01 00 FF 
0c6f4     F6 23 06 F6 | 	mov	local03, ##@LR__5417
0c6f8     01 00 00 FF 
0c6fc     B8 4E 05 F1 | 	add	fp, ##696
0c700     A7 22 62 FC | 	wrlong	local03, fp
0c704                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c704                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c704                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c704     AC 4E 85 F1 | 	sub	fp, #172
0c708     A7 02 68 FC | 	wrlong	#1, fp
0c70c     20 4E 05 F1 | 	add	fp, #32
0c710     A7 24 02 FB | 	rdlong	local04, fp
0c714     01 00 00 FF 
0c718     2C 4E 85 F1 | 	sub	fp, ##556
0c71c     01 24 06 F1 | 	add	local04, #1
0c720                 | LR__1085
0c720     01 00 00 FF 
0c724     0C 4E 05 F1 | 	add	fp, ##524
0c728     A7 22 02 FB | 	rdlong	local03, fp
0c72c     01 00 00 FF 
0c730     0C 4E 85 F1 | 	sub	fp, ##524
0c734     12 23 52 F2 | 	cmps	local03, local04 wc
0c738     64 00 90 3D |  if_ae	jmp	#LR__1086
0c73c     01 00 00 FF 
0c740     B8 4E 05 F1 | 	add	fp, ##696
0c744     A7 1E 02 FB | 	rdlong	local01, fp
0c748     AC 4E 85 F1 | 	sub	fp, #172
0c74c     A7 22 02 FB | 	rdlong	local03, fp
0c750     01 22 86 F1 | 	sub	local03, #1
0c754     2C 4E 05 F1 | 	add	fp, #44
0c758     A7 22 02 F1 | 	add	local03, fp
0c75c     11 13 C2 FA | 	rdbyte	arg01, local03
0c760     01 00 00 FF 
0c764     38 4E 85 F1 | 	sub	fp, ##568
0c768     FC 61 B1 FD | 	call	#__system__Chr_S
0c76c     FD 14 02 F6 | 	mov	arg02, result1
0c770     0F 13 02 F6 | 	mov	arg01, local01
0c774     0C 40 B1 FD | 	call	#__system___string_concat
0c778     01 00 00 FF 
0c77c     B8 4E 05 F1 | 	add	fp, ##696
0c780     A7 FA 61 FC | 	wrlong	result1, fp
0c784     AC 4E 85 F1 | 	sub	fp, #172
0c788     A7 22 02 FB | 	rdlong	local03, fp
0c78c     01 22 06 F1 | 	add	local03, #1
0c790     A7 22 62 FC | 	wrlong	local03, fp
0c794     01 00 00 FF 
0c798     0C 4E 85 F1 | 	sub	fp, ##524
0c79c     80 FF 9F FD | 	jmp	#LR__1085
0c7a0                 | LR__1086
0c7a0                 | '  '   put #9,i,header(3),1 : i+=4
0c7a0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c7a0                 | '      print #9, saveline$
0c7a0     09 12 06 F6 | 	mov	arg01, #9
0c7a4     C0 99 B1 FD | 	call	#__system___getiolock_0540
0c7a8     FD 12 02 F6 | 	mov	arg01, result1
0c7ac     78 3F B1 FD | 	call	#__system___lockmem
0c7b0     01 00 00 FF 
0c7b4     B8 4E 05 F1 | 	add	fp, ##696
0c7b8     A7 14 02 FB | 	rdlong	arg02, fp
0c7bc     01 00 00 FF 
0c7c0     B8 4E 85 F1 | 	sub	fp, ##696
0c7c4     09 12 06 F6 | 	mov	arg01, #9
0c7c8     00 16 06 F6 | 	mov	arg03, #0
0c7cc     4C 4C B1 FD | 	call	#__system___basic_print_string
0c7d0     09 12 06 F6 | 	mov	arg01, #9
0c7d4     0A 14 06 F6 | 	mov	arg02, #10
0c7d8     00 16 06 F6 | 	mov	arg03, #0
0c7dc     E4 4B B1 FD | 	call	#__system___basic_print_char
0c7e0     09 12 06 F6 | 	mov	arg01, #9
0c7e4     80 99 B1 FD | 	call	#__system___getiolock_0540
0c7e8     FD 00 68 FC | 	wrlong	#0, result1
0c7ec     01 00 00 FF 
0c7f0     34 4E 05 F1 | 	add	fp, ##564
0c7f4     A7 22 02 FB | 	rdlong	local03, fp
0c7f8     18 4E 85 F1 | 	sub	fp, #24
0c7fc     A7 22 62 FC | 	wrlong	local03, fp
0c800     18 4E 05 F1 | 	add	fp, #24
0c804     A7 22 02 FB | 	rdlong	local03, fp
0c808     01 00 00 FF 
0c80c     34 4E 85 F1 | 	sub	fp, ##564
0c810     FF FF 3F FF 
0c814     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c818     78 FE 9F 5D |  if_ne	jmp	#LR__1084
0c81c                 | '   close #9  
0c81c     09 12 06 F6 | 	mov	arg01, #9
0c820     74 8F B1 FD | 	call	#__system__close
0c824                 | '   print "Saved as ";currentdir$+"/"+loadname
0c824     00 12 06 F6 | 	mov	arg01, #0
0c828     3C 99 B1 FD | 	call	#__system___getiolock_0540
0c82c     FD 12 02 F6 | 	mov	arg01, result1
0c830     F4 3E B1 FD | 	call	#__system___lockmem
0c834     82 01 00 FF 
0c838     F7 15 06 F6 | 	mov	arg02, ##@LR__5418
0c83c     00 12 06 F6 | 	mov	arg01, #0
0c840     00 16 06 F6 | 	mov	arg03, #0
0c844     D4 4B B1 FD | 	call	#__system___basic_print_string
0c848     00 20 06 F6 | 	mov	local02, #0
0c84c     4A 00 00 FF 
0c850     90 E4 05 F1 | 	add	objptr, ##38032
0c854     F2 12 02 FB | 	rdlong	arg01, objptr
0c858     4A 00 00 FF 
0c85c     90 E4 85 F1 | 	sub	objptr, ##38032
0c860     83 01 00 FF 
0c864     01 14 06 F6 | 	mov	arg02, ##@LR__5419
0c868     18 3F B1 FD | 	call	#__system___string_concat
0c86c     FD 12 02 F6 | 	mov	arg01, result1
0c870     51 00 00 FF 
0c874     D4 E5 05 F1 | 	add	objptr, ##41940
0c878     F2 14 02 FB | 	rdlong	arg02, objptr
0c87c     51 00 00 FF 
0c880     D4 E5 85 F1 | 	sub	objptr, ##41940
0c884     FC 3E B1 FD | 	call	#__system___string_concat
0c888     FD 14 02 F6 | 	mov	arg02, result1
0c88c     10 13 02 F6 | 	mov	arg01, local02
0c890     00 16 06 F6 | 	mov	arg03, #0
0c894     84 4B B1 FD | 	call	#__system___basic_print_string
0c898     00 12 06 F6 | 	mov	arg01, #0
0c89c     0A 14 06 F6 | 	mov	arg02, #10
0c8a0     00 16 06 F6 | 	mov	arg03, #0
0c8a4     1C 4B B1 FD | 	call	#__system___basic_print_char
0c8a8     00 12 06 F6 | 	mov	arg01, #0
0c8ac     B8 98 B1 FD | 	call	#__system___getiolock_0540
0c8b0     FD 00 68 FC | 	wrlong	#0, result1
0c8b4                 | LR__1087
0c8b4                 | LR__1088
0c8b4     A7 F0 03 F6 | 	mov	ptra, fp
0c8b8     B2 00 A0 FD | 	call	#popregs_
0c8bc                 | _do_save_ret
0c8bc     2D 00 64 FD | 	ret
0c8c0                 | 
0c8c0                 | ' 
0c8c0                 | ' '----------------- Load the program
0c8c0                 | ' 'lo todo: errors while loading
0c8c0                 | ' 
0c8c0                 | ' sub do_enter
0c8c0                 | _do_enter
0c8c0     01 12 06 F6 | 	mov	arg01, #1
0c8c4     04 00 B0 FD | 	call	#_do_load
0c8c8                 | _do_enter_ret
0c8c8     2D 00 64 FD | 	ret
0c8cc                 | 
0c8cc                 | ' 
0c8cc                 | ' 
0c8cc                 | ' sub do_load(mode=0)
0c8cc                 | _do_load
0c8cc     01 4A 05 F6 | 	mov	COUNT_, #1
0c8d0     A8 00 A0 FD | 	call	#pushregs_
0c8d4     AC F0 07 F1 | 	add	ptra, #172
0c8d8     A7 12 62 FC | 	wrlong	arg01, fp
0c8dc     4A 00 00 FF 
0c8e0     80 E4 05 F1 | 	add	objptr, ##38016
0c8e4     F2 14 02 FB | 	rdlong	arg02, objptr
0c8e8     0A 13 02 F6 | 	mov	arg01, arg02
0c8ec     01 12 66 F0 | 	shl	arg01, #1
0c8f0     0A 13 02 F1 | 	add	arg01, arg02
0c8f4     02 12 66 F0 | 	shl	arg01, #2
0c8f8     03 00 00 FF 
0c8fc     04 E4 85 F1 | 	sub	objptr, ##1540
0c900     F2 12 02 F1 | 	add	arg01, objptr
0c904     09 15 02 FB | 	rdlong	arg02, arg01
0c908     1C 4E 05 F1 | 	add	fp, #28
0c90c     A7 14 62 FC | 	wrlong	arg02, fp
0c910     8C 4E 05 F1 | 	add	fp, #140
0c914     A7 12 02 F6 | 	mov	arg01, fp
0c918     47 00 00 FF 
0c91c     7C E4 85 F1 | 	sub	objptr, ##36476
0c920     80 4E 85 F1 | 	sub	fp, #128
0c924     09 4F 61 FC | 	wrlong	fp, arg01
0c928                 | ' numpar=compiledline(lineptr_e).result.uresult
0c928                 | ' lpoke varptr(line2$),varptr(line2)
0c928                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c928     0C 4E 85 F1 | 	sub	fp, #12
0c92c     A7 1E 02 FB | 	rdlong	local01, fp
0c930     1C 4E 85 F1 | 	sub	fp, #28
0c934     01 1E 56 F2 | 	cmps	local01, #1 wc
0c938     24 00 90 CD |  if_b	jmp	#LR__1090
0c93c     64 F0 BF FD | 	call	#_pop
0c940     04 4E 05 F1 | 	add	fp, #4
0c944     A7 FA 61 FC | 	wrlong	result1, fp
0c948     04 4E 05 F1 | 	add	fp, #4
0c94c     A7 FC 61 FC | 	wrlong	result2, fp
0c950     04 4E 05 F1 | 	add	fp, #4
0c954     A7 FE 61 FC | 	wrlong	result3, fp
0c958     0C 4E 85 F1 | 	sub	fp, #12
0c95c     28 00 90 FD | 	jmp	#LR__1091
0c960                 | LR__1090
0c960     51 00 00 FF 
0c964     D4 E5 05 F1 | 	add	objptr, ##41940
0c968     F2 1E 02 FB | 	rdlong	local01, objptr
0c96c     51 00 00 FF 
0c970     D4 E5 85 F1 | 	sub	objptr, ##41940
0c974     04 4E 05 F1 | 	add	fp, #4
0c978     A7 1E 62 FC | 	wrlong	local01, fp
0c97c     08 4E 05 F1 | 	add	fp, #8
0c980     A7 3E 68 FC | 	wrlong	#31, fp
0c984     0C 4E 85 F1 | 	sub	fp, #12
0c988                 | LR__1091
0c988                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0c988                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0c988     0C 4E 05 F1 | 	add	fp, #12
0c98c     A7 1E 02 FB | 	rdlong	local01, fp
0c990     0C 4E 85 F1 | 	sub	fp, #12
0c994     2B 1E 0E F2 | 	cmp	local01, #43 wz
0c998     24 00 90 5D |  if_ne	jmp	#LR__1092
0c99c     04 4E 05 F1 | 	add	fp, #4
0c9a0     A7 12 02 FB | 	rdlong	arg01, fp
0c9a4     04 4E 85 F1 | 	sub	fp, #4
0c9a8     98 48 B0 FD | 	call	#_convertstring
0c9ac     04 4E 05 F1 | 	add	fp, #4
0c9b0     A7 FA 61 FC | 	wrlong	result1, fp
0c9b4     08 4E 05 F1 | 	add	fp, #8
0c9b8     A7 3E 68 FC | 	wrlong	#31, fp
0c9bc     0C 4E 85 F1 | 	sub	fp, #12
0c9c0                 | LR__1092
0c9c0                 | ' if t1.result_type=result_string then
0c9c0     0C 4E 05 F1 | 	add	fp, #12
0c9c4     A7 1E 02 FB | 	rdlong	local01, fp
0c9c8     0C 4E 85 F1 | 	sub	fp, #12
0c9cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c9d0     D8 02 90 5D |  if_ne	jmp	#LR__1098
0c9d4                 | '   if mode=0 then do_new
0c9d4     A7 1E 0A FB | 	rdlong	local01, fp wz
0c9d8     68 32 B0 AD |  if_e	call	#_do_new
0c9dc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c9dc     04 4E 05 F1 | 	add	fp, #4
0c9e0     A7 12 02 FB | 	rdlong	arg01, fp
0c9e4     04 4E 85 F1 | 	sub	fp, #4
0c9e8     83 01 00 FF 
0c9ec     03 14 06 F6 | 	mov	arg02, ##@LR__5420
0c9f0     5C 3D B1 FD | 	call	#__system___string_cmp
0c9f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c9f8     24 00 90 5D |  if_ne	jmp	#LR__1093
0c9fc     51 00 00 FF 
0ca00     D4 E5 05 F1 | 	add	objptr, ##41940
0ca04     F2 1E 02 FB | 	rdlong	local01, objptr
0ca08     51 00 00 FF 
0ca0c     D4 E5 85 F1 | 	sub	objptr, ##41940
0ca10     04 4E 05 F1 | 	add	fp, #4
0ca14     A7 1E 62 FC | 	wrlong	local01, fp
0ca18     04 4E 85 F1 | 	sub	fp, #4
0ca1c     20 00 90 FD | 	jmp	#LR__1094
0ca20                 | LR__1093
0ca20     04 4E 05 F1 | 	add	fp, #4
0ca24     A7 1E 02 FB | 	rdlong	local01, fp
0ca28     04 4E 85 F1 | 	sub	fp, #4
0ca2c     51 00 00 FF 
0ca30     D4 E5 05 F1 | 	add	objptr, ##41940
0ca34     F2 1E 62 FC | 	wrlong	local01, objptr
0ca38     51 00 00 FF 
0ca3c     D4 E5 85 F1 | 	sub	objptr, ##41940
0ca40                 | LR__1094
0ca40                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0ca40     09 12 06 F6 | 	mov	arg01, #9
0ca44     50 8D B1 FD | 	call	#__system__close
0ca48     09 1E 06 F6 | 	mov	local01, #9
0ca4c     4A 00 00 FF 
0ca50     90 E4 05 F1 | 	add	objptr, ##38032
0ca54     F2 12 02 FB | 	rdlong	arg01, objptr
0ca58     4A 00 00 FF 
0ca5c     90 E4 85 F1 | 	sub	objptr, ##38032
0ca60     83 01 00 FF 
0ca64     04 14 06 F6 | 	mov	arg02, ##@LR__5421
0ca68     18 3D B1 FD | 	call	#__system___string_concat
0ca6c     FD 12 02 F6 | 	mov	arg01, result1
0ca70     04 4E 05 F1 | 	add	fp, #4
0ca74     A7 14 02 FB | 	rdlong	arg02, fp
0ca78     04 4E 85 F1 | 	sub	fp, #4
0ca7c     04 3D B1 FD | 	call	#__system___string_concat
0ca80     FD 14 02 F6 | 	mov	arg02, result1
0ca84     0F 13 02 F6 | 	mov	arg01, local01
0ca88     00 16 06 F6 | 	mov	arg03, #0
0ca8c     9C 48 B1 FD | 	call	#__system___basic_open_string
0ca90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ca94     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ca98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ca9c     14 4E 05 F1 | 	add	fp, #20
0caa0     A7 FA 61 FC | 	wrlong	result1, fp
0caa4                 | '   r=geterr() 
0caa4                 | '   if r then 
0caa4     14 4E 85 F1 | 	sub	fp, #20
0caa8     50 01 90 AD |  if_e	jmp	#LR__1096
0caac                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0caac     09 12 06 F6 | 	mov	arg01, #9
0cab0     E4 8C B1 FD | 	call	#__system__close
0cab4     09 1E 06 F6 | 	mov	local01, #9
0cab8     4A 00 00 FF 
0cabc     90 E4 05 F1 | 	add	objptr, ##38032
0cac0     F2 12 02 FB | 	rdlong	arg01, objptr
0cac4     4A 00 00 FF 
0cac8     90 E4 85 F1 | 	sub	objptr, ##38032
0cacc     83 01 00 FF 
0cad0     06 14 06 F6 | 	mov	arg02, ##@LR__5422
0cad4     AC 3C B1 FD | 	call	#__system___string_concat
0cad8     FD 12 02 F6 | 	mov	arg01, result1
0cadc     04 4E 05 F1 | 	add	fp, #4
0cae0     A7 14 02 FB | 	rdlong	arg02, fp
0cae4     04 4E 85 F1 | 	sub	fp, #4
0cae8     98 3C B1 FD | 	call	#__system___string_concat
0caec     FD 12 02 F6 | 	mov	arg01, result1
0caf0     83 01 00 FF 
0caf4     08 14 06 F6 | 	mov	arg02, ##@LR__5423
0caf8     88 3C B1 FD | 	call	#__system___string_concat
0cafc     FD 14 02 F6 | 	mov	arg02, result1
0cb00     0F 13 02 F6 | 	mov	arg01, local01
0cb04     00 16 06 F6 | 	mov	arg03, #0
0cb08     20 48 B1 FD | 	call	#__system___basic_open_string
0cb0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cb10     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cb14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cb18     14 4E 05 F1 | 	add	fp, #20
0cb1c     A7 FA 61 FC | 	wrlong	result1, fp
0cb20                 | '     r=geterr() 
0cb20                 | '     if r then 
0cb20     14 4E 85 F1 | 	sub	fp, #20
0cb24     A0 00 90 AD |  if_e	jmp	#LR__1095
0cb28                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cb28     00 12 06 F6 | 	mov	arg01, #0
0cb2c     38 96 B1 FD | 	call	#__system___getiolock_0540
0cb30     FD 12 02 F6 | 	mov	arg01, result1
0cb34     F0 3B B1 FD | 	call	#__system___lockmem
0cb38     83 01 00 FF 
0cb3c     0D 14 06 F6 | 	mov	arg02, ##@LR__5424
0cb40     00 12 06 F6 | 	mov	arg01, #0
0cb44     00 16 06 F6 | 	mov	arg03, #0
0cb48     D0 48 B1 FD | 	call	#__system___basic_print_string
0cb4c     14 4E 05 F1 | 	add	fp, #20
0cb50     A7 14 02 FB | 	rdlong	arg02, fp
0cb54     14 4E 85 F1 | 	sub	fp, #20
0cb58     00 12 06 F6 | 	mov	arg01, #0
0cb5c     00 16 06 F6 | 	mov	arg03, #0
0cb60     0A 18 06 F6 | 	mov	arg04, #10
0cb64     F8 48 B1 FD | 	call	#__system___basic_print_integer
0cb68     83 01 00 FF 
0cb6c     1B 14 06 F6 | 	mov	arg02, ##@LR__5425
0cb70     00 12 06 F6 | 	mov	arg01, #0
0cb74     00 16 06 F6 | 	mov	arg03, #0
0cb78     A0 48 B1 FD | 	call	#__system___basic_print_string
0cb7c     00 1E 06 F6 | 	mov	local01, #0
0cb80     14 4E 05 F1 | 	add	fp, #20
0cb84     A7 12 02 FB | 	rdlong	arg01, fp
0cb88     14 4E 85 F1 | 	sub	fp, #20
0cb8c     60 62 B1 FD | 	call	#__system___strerror
0cb90     FD 14 02 F6 | 	mov	arg02, result1
0cb94     0F 13 02 F6 | 	mov	arg01, local01
0cb98     00 16 06 F6 | 	mov	arg03, #0
0cb9c     7C 48 B1 FD | 	call	#__system___basic_print_string
0cba0     00 12 06 F6 | 	mov	arg01, #0
0cba4     0A 14 06 F6 | 	mov	arg02, #10
0cba8     00 16 06 F6 | 	mov	arg03, #0
0cbac     14 48 B1 FD | 	call	#__system___basic_print_char
0cbb0     00 12 06 F6 | 	mov	arg01, #0
0cbb4     B0 95 B1 FD | 	call	#__system___getiolock_0540
0cbb8     FD 00 68 FC | 	wrlong	#0, result1
0cbbc     09 12 06 F6 | 	mov	arg01, #9
0cbc0     D4 8B B1 FD | 	call	#__system__close
0cbc4     7C 01 90 FD | 	jmp	#LR__1100
0cbc8                 | LR__1095
0cbc8     51 00 00 FF 
0cbcc     D4 E5 05 F1 | 	add	objptr, ##41940
0cbd0     F2 12 02 FB | 	rdlong	arg01, objptr
0cbd4     51 00 00 FF 
0cbd8     D4 E5 85 F1 | 	sub	objptr, ##41940
0cbdc     83 01 00 FF 
0cbe0     1E 14 06 F6 | 	mov	arg02, ##@LR__5426
0cbe4     9C 3B B1 FD | 	call	#__system___string_concat
0cbe8     51 00 00 FF 
0cbec     D4 E5 05 F1 | 	add	objptr, ##41940
0cbf0     F2 FA 61 FC | 	wrlong	result1, objptr
0cbf4     51 00 00 FF 
0cbf8     D4 E5 85 F1 | 	sub	objptr, ##41940
0cbfc                 | LR__1096
0cbfc                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0cbfc     09 12 06 F6 | 	mov	arg01, #9
0cc00     94 8B B1 FD | 	call	#__system__close
0cc04     09 1E 06 F6 | 	mov	local01, #9
0cc08     4A 00 00 FF 
0cc0c     90 E4 05 F1 | 	add	objptr, ##38032
0cc10     F2 12 02 FB | 	rdlong	arg01, objptr
0cc14     4A 00 00 FF 
0cc18     90 E4 85 F1 | 	sub	objptr, ##38032
0cc1c     83 01 00 FF 
0cc20     23 14 06 F6 | 	mov	arg02, ##@LR__5427
0cc24     5C 3B B1 FD | 	call	#__system___string_concat
0cc28     FD 12 02 F6 | 	mov	arg01, result1
0cc2c     51 00 00 FF 
0cc30     D4 E5 05 F1 | 	add	objptr, ##41940
0cc34     F2 14 02 FB | 	rdlong	arg02, objptr
0cc38     51 00 00 FF 
0cc3c     D4 E5 85 F1 | 	sub	objptr, ##41940
0cc40     40 3B B1 FD | 	call	#__system___string_concat
0cc44     FD 14 02 F6 | 	mov	arg02, result1
0cc48     0F 13 02 F6 | 	mov	arg01, local01
0cc4c     00 16 06 F6 | 	mov	arg03, #0
0cc50     D8 46 B1 FD | 	call	#__system___basic_open_string
0cc54                 | '   do
0cc54                 | LR__1097
0cc54     09 12 06 F6 | 	mov	arg01, #9
0cc58     D8 3C B1 FD | 	call	#__system___basic_read_line
0cc5c     FD 1E 02 F6 | 	mov	local01, result1
0cc60     37 00 00 FF 
0cc64     1C E4 05 F1 | 	add	objptr, ##28188
0cc68     F2 1E 62 FC | 	wrlong	local01, objptr
0cc6c     37 00 00 FF 
0cc70     1C E4 85 F1 | 	sub	objptr, ##28188
0cc74     C4 49 BF FD | 	call	#_interpret
0cc78     37 00 00 FF 
0cc7c     1C E4 05 F1 | 	add	objptr, ##28188
0cc80     F2 12 02 FB | 	rdlong	arg01, objptr
0cc84     37 00 00 FF 
0cc88     1C E4 85 F1 | 	sub	objptr, ##28188
0cc8c     83 01 00 FF 
0cc90     25 14 06 F6 | 	mov	arg02, ##@LR__5428
0cc94     B8 3A B1 FD | 	call	#__system___string_cmp
0cc98     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc9c     B4 FF 9F 5D |  if_ne	jmp	#LR__1097
0cca0                 | '   close #9   
0cca0     09 12 06 F6 | 	mov	arg01, #9
0cca4     F0 8A B1 FD | 	call	#__system__close
0cca8     08 00 90 FD | 	jmp	#LR__1099
0ccac                 | LR__1098
0ccac     1E 12 06 F6 | 	mov	arg01, #30
0ccb0     10 07 B1 FD | 	call	#_printerror
0ccb4                 | LR__1099
0ccb4                 | ' print "Loaded ";currentdir$+"/"+loadname
0ccb4     00 12 06 F6 | 	mov	arg01, #0
0ccb8     AC 94 B1 FD | 	call	#__system___getiolock_0540
0ccbc     FD 12 02 F6 | 	mov	arg01, result1
0ccc0     64 3A B1 FD | 	call	#__system___lockmem
0ccc4     83 01 00 FF 
0ccc8     26 14 06 F6 | 	mov	arg02, ##@LR__5429
0cccc     00 12 06 F6 | 	mov	arg01, #0
0ccd0     00 16 06 F6 | 	mov	arg03, #0
0ccd4     44 47 B1 FD | 	call	#__system___basic_print_string
0ccd8     00 1E 06 F6 | 	mov	local01, #0
0ccdc     4A 00 00 FF 
0cce0     90 E4 05 F1 | 	add	objptr, ##38032
0cce4     F2 12 02 FB | 	rdlong	arg01, objptr
0cce8     4A 00 00 FF 
0ccec     90 E4 85 F1 | 	sub	objptr, ##38032
0ccf0     83 01 00 FF 
0ccf4     2E 14 06 F6 | 	mov	arg02, ##@LR__5430
0ccf8     88 3A B1 FD | 	call	#__system___string_concat
0ccfc     FD 12 02 F6 | 	mov	arg01, result1
0cd00     51 00 00 FF 
0cd04     D4 E5 05 F1 | 	add	objptr, ##41940
0cd08     F2 14 02 FB | 	rdlong	arg02, objptr
0cd0c     51 00 00 FF 
0cd10     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd14     6C 3A B1 FD | 	call	#__system___string_concat
0cd18     FD 14 02 F6 | 	mov	arg02, result1
0cd1c     0F 13 02 F6 | 	mov	arg01, local01
0cd20     00 16 06 F6 | 	mov	arg03, #0
0cd24     F4 46 B1 FD | 	call	#__system___basic_print_string
0cd28     00 12 06 F6 | 	mov	arg01, #0
0cd2c     0A 14 06 F6 | 	mov	arg02, #10
0cd30     00 16 06 F6 | 	mov	arg03, #0
0cd34     8C 46 B1 FD | 	call	#__system___basic_print_char
0cd38     00 12 06 F6 | 	mov	arg01, #0
0cd3c     28 94 B1 FD | 	call	#__system___getiolock_0540
0cd40     FD 00 68 FC | 	wrlong	#0, result1
0cd44                 | LR__1100
0cd44     A7 F0 03 F6 | 	mov	ptra, fp
0cd48     B2 00 A0 FD | 	call	#popregs_
0cd4c                 | _do_load_ret
0cd4c     2D 00 64 FD | 	ret
0cd50                 | 
0cd50                 | ' 
0cd50                 | ' sub do_end
0cd50                 | _do_end
0cd50     4A 00 00 FF 
0cd54     7C E4 05 F1 | 	add	objptr, ##38012
0cd58     F2 00 02 FB | 	rdlong	_var01, objptr
0cd5c     01 00 86 F1 | 	sub	_var01, #1
0cd60     04 E4 05 F1 | 	add	objptr, #4
0cd64     F2 00 62 FC | 	wrlong	_var01, objptr
0cd68     06 00 00 FF 
0cd6c     34 E4 05 F1 | 	add	objptr, ##3124
0cd70     FF FF BF FF 
0cd74     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0cd78     50 00 00 FF 
0cd7c     B4 E4 85 F1 | 	sub	objptr, ##41140
0cd80                 | _do_end_ret
0cd80     2D 00 64 FD | 	ret
0cd84                 | 
0cd84                 | ' 
0cd84                 | ' '----------------- Run the program 
0cd84                 | ' 
0cd84                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0cd84                 | ' 
0cd84                 | ' sub do_run
0cd84                 | _do_run
0cd84     01 4A 05 F6 | 	mov	COUNT_, #1
0cd88     A8 00 A0 FD | 	call	#pushregs_
0cd8c     4A 00 00 FF 
0cd90     80 E4 05 F1 | 	add	objptr, ##38016
0cd94     F2 18 02 FB | 	rdlong	arg04, objptr
0cd98     0C 17 02 F6 | 	mov	arg03, arg04
0cd9c     01 16 66 F0 | 	shl	arg03, #1
0cda0     0C 17 02 F1 | 	add	arg03, arg04
0cda4     02 16 66 F0 | 	shl	arg03, #2
0cda8     03 00 00 FF 
0cdac     04 E4 85 F1 | 	sub	objptr, ##1540
0cdb0     F2 16 02 F1 | 	add	arg03, objptr
0cdb4     0B 15 02 FB | 	rdlong	arg02, arg03
0cdb8                 | ' numpar=compiledline(lineptr_e).result.uresult
0cdb8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0cdb8     01 14 0E F2 | 	cmp	arg02, #1 wz
0cdbc     47 00 00 FF 
0cdc0     7C E4 85 F1 | 	sub	objptr, ##36476
0cdc4     00 12 06 A6 |  if_e	mov	arg01, #0
0cdc8     00 FB BF AD |  if_e	call	#_do_load
0cdcc     4A 00 00 FF 
0cdd0     84 E4 05 F1 | 	add	objptr, ##38020
0cdd4     F2 18 02 FB | 	rdlong	arg04, objptr
0cdd8     06 00 00 FF 
0cddc     30 E4 05 F1 | 	add	objptr, ##3120
0cde0     F2 18 62 FC | 	wrlong	arg04, objptr
0cde4     04 E4 05 F1 | 	add	objptr, #4
0cde8     F2 00 68 FC | 	wrlong	#0, objptr
0cdec     04 E4 05 F1 | 	add	objptr, #4
0cdf0     FF FF FF FF 
0cdf4     F2 FE 6B FC | 	wrlong	##-1, objptr
0cdf8                 | ' if inrun>0 then 
0cdf8     2C E4 05 F1 | 	add	objptr, #44
0cdfc     F2 18 02 FB | 	rdlong	arg04, objptr
0ce00     50 00 00 FF 
0ce04     E8 E4 85 F1 | 	sub	objptr, ##41192
0ce08     01 18 16 F2 | 	cmp	arg04, #1 wc
0ce0c     30 00 90 CD |  if_b	jmp	#LR__1110
0ce10     50 00 00 FF 
0ce14     EC E4 05 F1 | 	add	objptr, ##41196
0ce18     F2 12 02 F6 | 	mov	arg01, objptr
0ce1c     38 E4 85 F1 | 	sub	objptr, #56
0ce20     F2 14 02 FB | 	rdlong	arg02, objptr
0ce24     18 16 06 F6 | 	mov	arg03, #24
0ce28     44 00 00 FF 
0ce2c     E8 E5 85 F1 | 	sub	objptr, ##35304
0ce30     B4 2C B1 FD | 	call	#_psram_spin2_read1
0ce34     0B 00 00 FF 
0ce38     CC E4 85 F1 | 	sub	objptr, ##5836
0ce3c                 | '   psram.read1(varptr(runheader),runptr,24)  
0ce3c                 | '   return
0ce3c     88 02 90 FD | 	jmp	#LR__1116
0ce40                 | LR__1110
0ce40     50 00 00 FF 
0ce44     E8 E4 05 F1 | 	add	objptr, ##41192
0ce48     F2 02 68 FC | 	wrlong	#1, objptr
0ce4c     04 E4 05 F1 | 	add	objptr, #4
0ce50     F2 12 02 F6 | 	mov	arg01, objptr
0ce54     38 E4 85 F1 | 	sub	objptr, #56
0ce58     F2 14 02 FB | 	rdlong	arg02, objptr
0ce5c     18 16 06 F6 | 	mov	arg03, #24
0ce60     44 00 00 FF 
0ce64     E8 E5 85 F1 | 	sub	objptr, ##35304
0ce68     7C 2C B1 FD | 	call	#_psram_spin2_read1
0ce6c                 | ' inrun=1
0ce6c                 | ' psram.read1(varptr(runheader),runptr,24) 
0ce6c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0ce6c     45 00 00 FF 
0ce70     20 E4 05 F1 | 	add	objptr, ##35360
0ce74     F2 1E 02 FB | 	rdlong	local01, objptr
0ce78     50 00 00 FF 
0ce7c     EC E4 85 F1 | 	sub	objptr, ##41196
0ce80     FF FF 7F FF 
0ce84     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0ce88     50 00 00 AF 
0ce8c     E8 E4 05 A1 |  if_e	add	objptr, ##41192
0ce90     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ce94     50 00 00 AF 
0ce98     E8 E4 85 A1 |  if_e	sub	objptr, ##41192
0ce9c     28 02 90 AD |  if_e	jmp	#LR__1116
0cea0                 | ' do 
0cea0                 | LR__1111
0cea0                 | '   if runptr<>oldrunptr then
0cea0     50 00 00 FF 
0cea4     B4 E4 05 F1 | 	add	objptr, ##41140
0cea8     F2 1E 02 FB | 	rdlong	local01, objptr
0ceac     08 E4 05 F1 | 	add	objptr, #8
0ceb0     F2 18 02 FB | 	rdlong	arg04, objptr
0ceb4     50 00 00 FF 
0ceb8     BC E4 85 F1 | 	sub	objptr, ##41148
0cebc     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0cec0     CC 00 90 AD |  if_e	jmp	#LR__1112
0cec4     50 00 00 FF 
0cec8     EC E4 05 F1 | 	add	objptr, ##41196
0cecc     F2 12 02 F6 | 	mov	arg01, objptr
0ced0     38 E4 85 F1 | 	sub	objptr, #56
0ced4     F2 14 02 FB | 	rdlong	arg02, objptr
0ced8     18 16 06 F6 | 	mov	arg03, #24
0cedc     44 00 00 FF 
0cee0     E8 E5 85 F1 | 	sub	objptr, ##35304
0cee4     00 2C B1 FD | 	call	#_psram_spin2_read1
0cee8     3B 00 00 FF 
0ceec     B0 E5 05 F1 | 	add	objptr, ##30640
0cef0     F2 12 02 F6 | 	mov	arg01, objptr
0cef4     09 00 00 FF 
0cef8     38 E4 05 F1 | 	add	objptr, ##4664
0cefc     F2 14 02 FB | 	rdlong	arg02, objptr
0cf00     0B 00 00 FF 
0cf04     50 E4 85 F1 | 	sub	objptr, ##5712
0cf08     F2 1E 02 FB | 	rdlong	local01, objptr
0cf0c     01 1E 66 F0 | 	shl	local01, #1
0cf10     0F 15 02 F1 | 	add	arg02, local01
0cf14     0B 00 00 FF 
0cf18     90 E4 05 F1 | 	add	objptr, ##5776
0cf1c     F2 16 02 FB | 	rdlong	arg03, objptr
0cf20     40 E4 85 F1 | 	sub	objptr, #64
0cf24     F2 1E 02 FB | 	rdlong	local01, objptr
0cf28     0F 17 82 F1 | 	sub	arg03, local01
0cf2c     44 00 00 FF 
0cf30     E8 E5 85 F1 | 	sub	objptr, ##35304
0cf34     B0 2B B1 FD | 	call	#_psram_spin2_read1
0cf38     45 00 00 FF 
0cf3c     28 E4 05 F1 | 	add	objptr, ##35368
0cf40     F2 1E 02 FB | 	rdlong	local01, objptr
0cf44     40 E4 85 F1 | 	sub	objptr, #64
0cf48     F2 FA 01 FB | 	rdlong	result1, objptr
0cf4c     FD 1E 82 F1 | 	sub	local01, result1
0cf50     0B 00 00 FF 
0cf54     50 E4 85 F1 | 	sub	objptr, ##5712
0cf58     F2 FA 01 FB | 	rdlong	result1, objptr
0cf5c     FD 1E 12 FD | 	qdiv	local01, result1
0cf60     05 00 00 FF 
0cf64     18 E4 05 F1 | 	add	objptr, ##2584
0cf68     18 1E 62 FD | 	getqx	local01
0cf6c     03 1E 86 F1 | 	sub	local01, #3
0cf70     F2 1E 62 FC | 	wrlong	local01, objptr
0cf74     06 00 00 FF 
0cf78     38 E4 05 F1 | 	add	objptr, ##3128
0cf7c     F2 1E 02 FB | 	rdlong	local01, objptr
0cf80     08 E4 05 F1 | 	add	objptr, #8
0cf84     F2 1E 62 FC | 	wrlong	local01, objptr
0cf88     50 00 00 FF 
0cf8c     BC E4 85 F1 | 	sub	objptr, ##41148
0cf90                 | LR__1112
0cf90     50 00 00 FF 
0cf94     00 E5 05 F1 | 	add	objptr, ##41216
0cf98     F2 1E 02 FB | 	rdlong	local01, objptr
0cf9c     4C E4 85 F1 | 	sub	objptr, #76
0cfa0     F2 1E 62 FC | 	wrlong	local01, objptr
0cfa4     04 E4 05 F1 | 	add	objptr, #4
0cfa8     F2 12 02 FB | 	rdlong	arg01, objptr
0cfac     50 00 00 FF 
0cfb0     B8 E4 85 F1 | 	sub	objptr, ##41144
0cfb4     E8 E8 BF FD | 	call	#_execute_line
0cfb8     50 00 00 FF 
0cfbc     B8 E4 05 F1 | 	add	objptr, ##41144
0cfc0     F2 FA 61 FC | 	wrlong	result1, objptr
0cfc4     04 E4 85 F1 | 	sub	objptr, #4
0cfc8     F2 1E 02 FB | 	rdlong	local01, objptr
0cfcc     50 00 00 FF 
0cfd0     B4 E4 85 F1 | 	sub	objptr, ##41140
0cfd4     FF FF 3F FF 
0cfd8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0cfdc     30 00 90 AD |  if_e	jmp	#LR__1114
0cfe0     E0 12 06 F6 | 	mov	arg01, #224
0cfe4     90 2E B1 FD | 	call	#_usbnew_spin2_keystate
0cfe8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cfec     10 00 90 5D |  if_ne	jmp	#LR__1113
0cff0     E4 12 06 F6 | 	mov	arg01, #228
0cff4     80 2E B1 FD | 	call	#_usbnew_spin2_keystate
0cff8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cffc     A0 FE 9F AD |  if_e	jmp	#LR__1111
0d000                 | LR__1113
0d000     06 12 06 F6 | 	mov	arg01, #6
0d004     70 2E B1 FD | 	call	#_usbnew_spin2_keystate
0d008     00 FA 0D F2 | 	cmp	result1, #0 wz
0d00c     90 FE 9F AD |  if_e	jmp	#LR__1111
0d010                 | LR__1114
0d010                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d010                 | ' if runptr<>$7FFF_FFFF then 
0d010     50 00 00 FF 
0d014     B4 E4 05 F1 | 	add	objptr, ##41140
0d018     F2 1E 02 FB | 	rdlong	local01, objptr
0d01c     50 00 00 FF 
0d020     B4 E4 85 F1 | 	sub	objptr, ##41140
0d024     FF FF 3F FF 
0d028     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d02c     64 00 90 AD |  if_e	jmp	#LR__1115
0d030                 | '     print "Stopped at line ";runheader(0)
0d030     00 12 06 F6 | 	mov	arg01, #0
0d034     30 91 B1 FD | 	call	#__system___getiolock_0540
0d038     FD 12 02 F6 | 	mov	arg01, result1
0d03c     E8 36 B1 FD | 	call	#__system___lockmem
0d040     83 01 00 FF 
0d044     30 14 06 F6 | 	mov	arg02, ##@LR__5431
0d048     00 12 06 F6 | 	mov	arg01, #0
0d04c     00 16 06 F6 | 	mov	arg03, #0
0d050     C8 43 B1 FD | 	call	#__system___basic_print_string
0d054     50 00 00 FF 
0d058     EC E4 05 F1 | 	add	objptr, ##41196
0d05c     F2 14 02 FB | 	rdlong	arg02, objptr
0d060     50 00 00 FF 
0d064     EC E4 85 F1 | 	sub	objptr, ##41196
0d068     00 12 06 F6 | 	mov	arg01, #0
0d06c     00 16 06 F6 | 	mov	arg03, #0
0d070     0A 18 06 F6 | 	mov	arg04, #10
0d074     28 44 B1 FD | 	call	#__system___basic_print_unsigned
0d078     00 12 06 F6 | 	mov	arg01, #0
0d07c     0A 14 06 F6 | 	mov	arg02, #10
0d080     00 16 06 F6 | 	mov	arg03, #0
0d084     3C 43 B1 FD | 	call	#__system___basic_print_char
0d088     00 12 06 F6 | 	mov	arg01, #0
0d08c     D8 90 B1 FD | 	call	#__system___getiolock_0540
0d090     FD 00 68 FC | 	wrlong	#0, result1
0d094                 | LR__1115
0d094     50 00 00 FF 
0d098     E8 E4 05 F1 | 	add	objptr, ##41192
0d09c     F2 00 68 FC | 	wrlong	#0, objptr
0d0a0     50 00 00 FF 
0d0a4     E8 E4 85 F1 | 	sub	objptr, ##41192
0d0a8     11 12 06 F6 | 	mov	arg01, #17
0d0ac     08 14 06 F6 | 	mov	arg02, #8
0d0b0     10 16 06 F6 | 	mov	arg03, #16
0d0b4     A8 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d0b8     10 12 06 F6 | 	mov	arg01, #16
0d0bc     20 14 06 F6 | 	mov	arg02, #32
0d0c0     20 16 06 F6 | 	mov	arg03, #32
0d0c4     98 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d0c8                 | LR__1116
0d0c8     A7 F0 03 F6 | 	mov	ptra, fp
0d0cc     B2 00 A0 FD | 	call	#popregs_
0d0d0                 | _do_run_ret
0d0d0     2D 00 64 FD | 	ret
0d0d4                 | 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' 
0d0d4                 | ' sub do_defenv
0d0d4                 | _do_defenv
0d0d4     08 4A 05 F6 | 	mov	COUNT_, #8
0d0d8     A8 00 A0 FD | 	call	#pushregs_
0d0dc     B4 F0 07 F1 | 	add	ptra, #180
0d0e0     4A 00 00 FF 
0d0e4     80 E4 05 F1 | 	add	objptr, ##38016
0d0e8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0ec     0F 1B 02 F6 | 	mov	arg05, local01
0d0f0     01 1A 66 F0 | 	shl	arg05, #1
0d0f4     0F 1B 02 F1 | 	add	arg05, local01
0d0f8     02 1A 66 F0 | 	shl	arg05, #2
0d0fc     03 00 00 FF 
0d100     04 E4 85 F1 | 	sub	objptr, ##1540
0d104     F2 20 02 F6 | 	mov	local02, objptr
0d108     F2 1A 02 F1 | 	add	arg05, objptr
0d10c     0D 1B 02 FB | 	rdlong	arg05, arg05
0d110     10 4E 05 F1 | 	add	fp, #16
0d114     A7 1A 62 FC | 	wrlong	arg05, fp
0d118                 | ' 
0d118                 | ' numpar=compiledline(lineptr_e).result.uresult
0d118                 | ' 
0d118                 | ' 
0d118                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d118                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d118                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d118                 | ' 
0d118                 | ' 
0d118                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d118     10 4E 85 F1 | 	sub	fp, #16
0d11c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d120     47 00 00 FF 
0d124     7C E4 85 F1 | 	sub	objptr, ##36476
0d128     10 4E 05 51 |  if_ne	add	fp, #16
0d12c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d130     10 4E 85 51 |  if_ne	sub	fp, #16
0d134     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d138     10 4E 05 51 |  if_ne	add	fp, #16
0d13c     0F 21 02 56 |  if_ne	mov	local02, local01
0d140     10 4E 85 51 |  if_ne	sub	fp, #16
0d144     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d148     10 0C 90 5D |  if_ne	jmp	#LR__1141
0d14c                 | ' 
0d14c                 | '  
0d14c                 | ' if numpar=2 then
0d14c     10 4E 05 F1 | 	add	fp, #16
0d150     A7 20 02 FB | 	rdlong	local02, fp
0d154     10 4E 85 F1 | 	sub	fp, #16
0d158     02 20 0E F2 | 	cmp	local02, #2 wz
0d15c     24 04 90 5D |  if_ne	jmp	#LR__1133
0d160     40 E8 BF FD | 	call	#_pop
0d164     FF 1A 02 F6 | 	mov	arg05, result3
0d168     5C 4E 05 F1 | 	add	fp, #92
0d16c     A7 FA 61 FC | 	wrlong	result1, fp
0d170     04 4E 05 F1 | 	add	fp, #4
0d174     A7 FC 61 FC | 	wrlong	result2, fp
0d178     04 4E 05 F1 | 	add	fp, #4
0d17c     A7 1A 62 FC | 	wrlong	arg05, fp
0d180                 | '   t1=pop()
0d180                 | '   if t1.result_type=result_string2 then 
0d180     64 4E 85 F1 | 	sub	fp, #100
0d184     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d188     20 00 90 5D |  if_ne	jmp	#LR__1120
0d18c     5C 4E 05 F1 | 	add	fp, #92
0d190     A7 12 02 FB | 	rdlong	arg01, fp
0d194     5C 4E 85 F1 | 	sub	fp, #92
0d198     A8 40 B0 FD | 	call	#_convertstring
0d19c     68 4E 05 F1 | 	add	fp, #104
0d1a0     A7 FA 61 FC | 	wrlong	result1, fp
0d1a4     68 4E 85 F1 | 	sub	fp, #104
0d1a8     58 00 90 FD | 	jmp	#LR__1123
0d1ac                 | LR__1120
0d1ac     64 4E 05 F1 | 	add	fp, #100
0d1b0     A7 20 02 FB | 	rdlong	local02, fp
0d1b4     64 4E 85 F1 | 	sub	fp, #100
0d1b8     1F 20 0E F2 | 	cmp	local02, #31 wz
0d1bc     18 00 90 5D |  if_ne	jmp	#LR__1121
0d1c0     5C 4E 05 F1 | 	add	fp, #92
0d1c4     A7 20 02 FB | 	rdlong	local02, fp
0d1c8     0C 4E 05 F1 | 	add	fp, #12
0d1cc     A7 20 62 FC | 	wrlong	local02, fp
0d1d0     68 4E 85 F1 | 	sub	fp, #104
0d1d4     2C 00 90 FD | 	jmp	#LR__1122
0d1d8                 | LR__1121
0d1d8     83 01 00 FF 
0d1dc     41 20 06 F6 | 	mov	local02, ##@LR__5432
0d1e0     68 4E 05 F1 | 	add	fp, #104
0d1e4     A7 20 62 FC | 	wrlong	local02, fp
0d1e8     0C 4E 85 F1 | 	sub	fp, #12
0d1ec     A7 12 02 F6 | 	mov	arg01, fp
0d1f0     5C 4E 85 F1 | 	sub	fp, #92
0d1f4     70 88 B0 FD | 	call	#_converttoint
0d1f8     24 4E 05 F1 | 	add	fp, #36
0d1fc     A7 FA 61 FC | 	wrlong	result1, fp
0d200     24 4E 85 F1 | 	sub	fp, #36
0d204                 | LR__1122
0d204                 | LR__1123
0d204                 | ' 
0d204                 | '     
0d204                 | '   if s1<>"" then 
0d204     68 4E 05 F1 | 	add	fp, #104
0d208     A7 12 02 FB | 	rdlong	arg01, fp
0d20c     68 4E 85 F1 | 	sub	fp, #104
0d210     83 01 00 FF 
0d214     42 14 06 F6 | 	mov	arg02, ##@LR__5433
0d218     34 35 B1 FD | 	call	#__system___string_cmp
0d21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d220     24 02 90 AD |  if_e	jmp	#LR__1127
0d224     7C E7 BF FD | 	call	#_pop
0d228     FF 1E 02 F6 | 	mov	local01, result3
0d22c     5C 4E 05 F1 | 	add	fp, #92
0d230     A7 FA 61 FC | 	wrlong	result1, fp
0d234     04 4E 05 F1 | 	add	fp, #4
0d238     A7 FC 61 FC | 	wrlong	result2, fp
0d23c     04 4E 05 F1 | 	add	fp, #4
0d240     A7 1E 62 FC | 	wrlong	local01, fp
0d244     08 4E 85 F1 | 	sub	fp, #8
0d248     A7 12 02 F6 | 	mov	arg01, fp
0d24c     5C 4E 85 F1 | 	sub	fp, #92
0d250     14 88 B0 FD | 	call	#_converttoint
0d254     20 4E 05 F1 | 	add	fp, #32
0d258     A7 FA 61 FC | 	wrlong	result1, fp
0d25c     20 4E 85 F1 | 	sub	fp, #32
0d260                 | '     t1=pop()
0d260                 | '     channel=converttoint(t1) 
0d260                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d260     09 12 06 F6 | 	mov	arg01, #9
0d264     30 85 B1 FD | 	call	#__system__close
0d268     09 20 06 F6 | 	mov	local02, #9
0d26c     83 01 00 FF 
0d270     43 12 06 F6 | 	mov	arg01, ##@LR__5434
0d274     68 4E 05 F1 | 	add	fp, #104
0d278     A7 14 02 FB | 	rdlong	arg02, fp
0d27c     68 4E 85 F1 | 	sub	fp, #104
0d280     00 35 B1 FD | 	call	#__system___string_concat
0d284     FD 14 02 F6 | 	mov	arg02, result1
0d288     10 13 02 F6 | 	mov	arg01, local02
0d28c     00 16 06 F6 | 	mov	arg03, #0
0d290     98 40 B1 FD | 	call	#__system___basic_open_string
0d294     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d298     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d29c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d2a0     0C 4E 05 F1 | 	add	fp, #12
0d2a4     A7 FA 61 FC | 	wrlong	result1, fp
0d2a8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d2a8     0C 4E 85 F1 | 	sub	fp, #12
0d2ac     A0 00 90 AD |  if_e	jmp	#LR__1124
0d2b0     00 12 06 F6 | 	mov	arg01, #0
0d2b4     B0 8E B1 FD | 	call	#__system___getiolock_0540
0d2b8     FD 12 02 F6 | 	mov	arg01, result1
0d2bc     68 34 B1 FD | 	call	#__system___lockmem
0d2c0     83 01 00 FF 
0d2c4     50 14 06 F6 | 	mov	arg02, ##@LR__5435
0d2c8     00 12 06 F6 | 	mov	arg01, #0
0d2cc     00 16 06 F6 | 	mov	arg03, #0
0d2d0     48 41 B1 FD | 	call	#__system___basic_print_string
0d2d4     0C 4E 05 F1 | 	add	fp, #12
0d2d8     A7 14 02 FB | 	rdlong	arg02, fp
0d2dc     0C 4E 85 F1 | 	sub	fp, #12
0d2e0     00 12 06 F6 | 	mov	arg01, #0
0d2e4     00 16 06 F6 | 	mov	arg03, #0
0d2e8     0A 18 06 F6 | 	mov	arg04, #10
0d2ec     70 41 B1 FD | 	call	#__system___basic_print_integer
0d2f0     83 01 00 FF 
0d2f4     5E 14 06 F6 | 	mov	arg02, ##@LR__5436
0d2f8     00 12 06 F6 | 	mov	arg01, #0
0d2fc     00 16 06 F6 | 	mov	arg03, #0
0d300     18 41 B1 FD | 	call	#__system___basic_print_string
0d304     00 20 06 F6 | 	mov	local02, #0
0d308     0C 4E 05 F1 | 	add	fp, #12
0d30c     A7 12 02 FB | 	rdlong	arg01, fp
0d310     0C 4E 85 F1 | 	sub	fp, #12
0d314     D8 5A B1 FD | 	call	#__system___strerror
0d318     FD 14 02 F6 | 	mov	arg02, result1
0d31c     10 13 02 F6 | 	mov	arg01, local02
0d320     00 16 06 F6 | 	mov	arg03, #0
0d324     F4 40 B1 FD | 	call	#__system___basic_print_string
0d328     00 12 06 F6 | 	mov	arg01, #0
0d32c     0A 14 06 F6 | 	mov	arg02, #10
0d330     00 16 06 F6 | 	mov	arg03, #0
0d334     8C 40 B1 FD | 	call	#__system___basic_print_char
0d338     00 12 06 F6 | 	mov	arg01, #0
0d33c     28 8E B1 FD | 	call	#__system___getiolock_0540
0d340     FD 00 68 FC | 	wrlong	#0, result1
0d344     09 12 06 F6 | 	mov	arg01, #9
0d348     4C 84 B1 FD | 	call	#__system__close
0d34c     0C 0A 90 FD | 	jmp	#LR__1141
0d350                 | LR__1124
0d350                 | '     get #9,17,envbuf8(channel,0),256
0d350     20 4E 05 F1 | 	add	fp, #32
0d354     A7 1A 02 FB | 	rdlong	arg05, fp
0d358     20 4E 85 F1 | 	sub	fp, #32
0d35c     0D 17 02 F6 | 	mov	arg03, arg05
0d360     09 16 66 F0 | 	shl	arg03, #9
0d364     0D 17 02 F1 | 	add	arg03, arg05
0d368     0C 00 00 FF 
0d36c     D8 E4 05 F1 | 	add	objptr, ##6360
0d370     F2 16 02 F1 | 	add	arg03, objptr
0d374     09 12 06 F6 | 	mov	arg01, #9
0d378     11 14 06 F6 | 	mov	arg02, #17
0d37c     00 19 06 F6 | 	mov	arg04, #256
0d380     01 1A 06 F6 | 	mov	arg05, #1
0d384     0C 00 00 FF 
0d388     D8 E4 85 F1 | 	sub	objptr, ##6360
0d38c     08 42 B1 FD | 	call	#__system___basic_get
0d390                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d390     14 4E 05 F1 | 	add	fp, #20
0d394     A7 FE 69 FC | 	wrlong	#255, fp
0d398     14 4E 85 F1 | 	sub	fp, #20
0d39c     0C 00 00 FF 
0d3a0     D8 E4 05 F1 | 	add	objptr, ##6360
0d3a4     97 30 48 FB | 	callpa	#(@LR__1126-@LR__1125)>>2,fcache_load_ptr_
0d3a8                 | LR__1125
0d3a8     20 4E 05 F1 | 	add	fp, #32
0d3ac     A7 18 02 FB | 	rdlong	arg04, fp
0d3b0     0C 21 02 F6 | 	mov	local02, arg04
0d3b4     09 20 66 F0 | 	shl	local02, #9
0d3b8     F2 20 02 F1 | 	add	local02, objptr
0d3bc     0C 4E 85 F1 | 	sub	fp, #12
0d3c0     A7 1E 02 FB | 	rdlong	local01, fp
0d3c4     0F 1B 02 F6 | 	mov	arg05, local01
0d3c8     01 1A 66 F0 | 	shl	arg05, #1
0d3cc     10 1B 02 F1 | 	add	arg05, local02
0d3d0     0C 21 02 F6 | 	mov	local02, arg04
0d3d4     09 20 66 F0 | 	shl	local02, #9
0d3d8     0C 21 02 F1 | 	add	local02, arg04
0d3dc     F2 20 02 F1 | 	add	local02, objptr
0d3e0     10 1F 02 F1 | 	add	local01, local02
0d3e4     0F 21 C2 FA | 	rdbyte	local02, local01
0d3e8     00 21 06 FA | 	mul	local02, #256
0d3ec     0D 21 52 FC | 	wrword	local02, arg05
0d3f0     A7 20 02 FB | 	rdlong	local02, fp
0d3f4     01 20 86 F1 | 	sub	local02, #1
0d3f8     A7 20 62 FC | 	wrlong	local02, fp
0d3fc     14 4E 85 F1 | 	sub	fp, #20
0d400     00 20 56 F2 | 	cmps	local02, #0 wc
0d404     A0 FF 9F 3D |  if_ae	jmp	#LR__1125
0d408                 | LR__1126
0d408     0C 00 00 FF 
0d40c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d410                 | '     close #9
0d410     09 12 06 F6 | 	mov	arg01, #9
0d414     80 83 B1 FD | 	call	#__system__close
0d418     20 4E 05 F1 | 	add	fp, #32
0d41c     A7 20 02 FB | 	rdlong	local02, fp
0d420     20 4E 85 F1 | 	sub	fp, #32
0d424     09 20 66 F0 | 	shl	local02, #9
0d428     0C 00 00 FF 
0d42c     D8 E4 05 F1 | 	add	objptr, ##6360
0d430     F2 20 02 F1 | 	add	local02, objptr
0d434     FE 21 06 F1 | 	add	local02, #510
0d438     10 01 58 FC | 	wrword	#0, local02
0d43c                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d43c                 | '     return
0d43c     0C 00 00 FF 
0d440     D8 E4 85 F1 | 	sub	objptr, ##6360
0d444     14 09 90 FD | 	jmp	#LR__1141
0d448                 | LR__1127
0d448                 | '     if wptr < ($80000 - 2048) then 
0d448     24 4E 05 F1 | 	add	fp, #36
0d44c     A7 22 02 FB | 	rdlong	local03, fp
0d450     24 4E 85 F1 | 	sub	fp, #36
0d454     FC 03 00 FF 
0d458     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d45c     7C 00 90 3D |  if_ae	jmp	#LR__1130
0d460                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d460     14 4E 05 F1 | 	add	fp, #20
0d464     A7 00 68 FC | 	wrlong	#0, fp
0d468     14 4E 85 F1 | 	sub	fp, #20
0d46c     0C 00 00 FF 
0d470     D8 E4 05 F1 | 	add	objptr, ##6360
0d474     97 2C 48 FB | 	callpa	#(@LR__1129-@LR__1128)>>2,fcache_load_ptr_
0d478                 | LR__1128
0d478     20 4E 05 F1 | 	add	fp, #32
0d47c     A7 22 02 FB | 	rdlong	local03, fp
0d480     09 22 66 F0 | 	shl	local03, #9
0d484     F2 22 02 F1 | 	add	local03, objptr
0d488     0C 4E 85 F1 | 	sub	fp, #12
0d48c     A7 20 02 FB | 	rdlong	local02, fp
0d490     10 1F 02 F6 | 	mov	local01, local02
0d494     01 1E 66 F0 | 	shl	local01, #1
0d498     11 1F 02 F1 | 	add	local01, local03
0d49c     10 4E 05 F1 | 	add	fp, #16
0d4a0     A7 12 02 FB | 	rdlong	arg01, fp
0d4a4     01 20 66 F0 | 	shl	local02, #1
0d4a8     10 13 02 F1 | 	add	arg01, local02
0d4ac     09 FB E1 FA | 	rdword	result1, arg01
0d4b0     0F FB 51 FC | 	wrword	result1, local01
0d4b4     10 4E 85 F1 | 	sub	fp, #16
0d4b8     A7 22 02 FB | 	rdlong	local03, fp
0d4bc     01 22 06 F1 | 	add	local03, #1
0d4c0     A7 22 62 FC | 	wrlong	local03, fp
0d4c4     14 4E 85 F1 | 	sub	fp, #20
0d4c8     00 23 56 F2 | 	cmps	local03, #256 wc
0d4cc     A8 FF 9F CD |  if_b	jmp	#LR__1128
0d4d0                 | LR__1129
0d4d0     0C 00 00 FF 
0d4d4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4d8     78 00 90 FD | 	jmp	#LR__1132
0d4dc                 | LR__1130
0d4dc                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d4dc     14 4E 05 F1 | 	add	fp, #20
0d4e0     A7 00 68 FC | 	wrlong	#0, fp
0d4e4     14 4E 85 F1 | 	sub	fp, #20
0d4e8                 | LR__1131
0d4e8     20 4E 05 F1 | 	add	fp, #32
0d4ec     A7 22 02 FB | 	rdlong	local03, fp
0d4f0     09 22 66 F0 | 	shl	local03, #9
0d4f4     0C 00 00 FF 
0d4f8     D8 E4 05 F1 | 	add	objptr, ##6360
0d4fc     F2 22 02 F1 | 	add	local03, objptr
0d500     0C 4E 85 F1 | 	sub	fp, #12
0d504     A7 20 02 FB | 	rdlong	local02, fp
0d508     10 1F 02 F6 | 	mov	local01, local02
0d50c     01 1E 66 F0 | 	shl	local01, #1
0d510     11 1F 02 F1 | 	add	local01, local03
0d514     10 4E 05 F1 | 	add	fp, #16
0d518     A7 12 02 FB | 	rdlong	arg01, fp
0d51c     24 4E 85 F1 | 	sub	fp, #36
0d520     01 20 66 F0 | 	shl	local02, #1
0d524     10 13 02 F1 | 	add	arg01, local02
0d528     0C 00 00 FF 
0d52c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d530     7C 01 B1 FD | 	call	#_psdpeek
0d534     0F FB 51 FC | 	wrword	result1, local01
0d538     14 4E 05 F1 | 	add	fp, #20
0d53c     A7 22 02 FB | 	rdlong	local03, fp
0d540     01 22 06 F1 | 	add	local03, #1
0d544     A7 22 62 FC | 	wrlong	local03, fp
0d548     14 4E 85 F1 | 	sub	fp, #20
0d54c     00 23 56 F2 | 	cmps	local03, #256 wc
0d550     94 FF 9F CD |  if_b	jmp	#LR__1131
0d554                 | LR__1132
0d554     20 4E 05 F1 | 	add	fp, #32
0d558     A7 22 02 FB | 	rdlong	local03, fp
0d55c     20 4E 85 F1 | 	sub	fp, #32
0d560     09 22 66 F0 | 	shl	local03, #9
0d564     0C 00 00 FF 
0d568     D8 E4 05 F1 | 	add	objptr, ##6360
0d56c     F2 22 02 F1 | 	add	local03, objptr
0d570     FE 23 06 F1 | 	add	local03, #510
0d574     11 01 58 FC | 	wrword	#0, local03
0d578                 | '     envbuf(channel,255)=0
0d578                 | '     return   
0d578     0C 00 00 FF 
0d57c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d580     D8 07 90 FD | 	jmp	#LR__1141
0d584                 | LR__1133
0d584                 | ' 
0d584                 | ' if numpar=5 then    'simple adsr
0d584     10 4E 05 F1 | 	add	fp, #16
0d588     A7 22 02 FB | 	rdlong	local03, fp
0d58c     10 4E 85 F1 | 	sub	fp, #16
0d590     05 22 0E F2 | 	cmp	local03, #5 wz
0d594     98 07 90 5D |  if_ne	jmp	#LR__1140
0d598     08 E4 BF FD | 	call	#_pop
0d59c     FF 1E 02 F6 | 	mov	local01, result3
0d5a0     5C 4E 05 F1 | 	add	fp, #92
0d5a4     A7 FA 61 FC | 	wrlong	result1, fp
0d5a8     04 4E 05 F1 | 	add	fp, #4
0d5ac     A7 FC 61 FC | 	wrlong	result2, fp
0d5b0     04 4E 05 F1 | 	add	fp, #4
0d5b4     A7 1E 62 FC | 	wrlong	local01, fp
0d5b8     08 4E 85 F1 | 	sub	fp, #8
0d5bc     A7 12 02 F6 | 	mov	arg01, fp
0d5c0     5C 4E 85 F1 | 	sub	fp, #92
0d5c4     5C 85 B0 FD | 	call	#_converttofloat
0d5c8     FD 22 02 F6 | 	mov	local03, result1
0d5cc     34 4E 05 F1 | 	add	fp, #52
0d5d0     A7 22 62 FC | 	wrlong	local03, fp
0d5d4     34 4E 85 F1 | 	sub	fp, #52
0d5d8     C8 E3 BF FD | 	call	#_pop
0d5dc     FF 1E 02 F6 | 	mov	local01, result3
0d5e0     5C 4E 05 F1 | 	add	fp, #92
0d5e4     A7 FA 61 FC | 	wrlong	result1, fp
0d5e8     04 4E 05 F1 | 	add	fp, #4
0d5ec     A7 FC 61 FC | 	wrlong	result2, fp
0d5f0     04 4E 05 F1 | 	add	fp, #4
0d5f4     A7 1E 62 FC | 	wrlong	local01, fp
0d5f8     08 4E 85 F1 | 	sub	fp, #8
0d5fc     A7 12 02 F6 | 	mov	arg01, fp
0d600     5C 4E 85 F1 | 	sub	fp, #92
0d604     1C 85 B0 FD | 	call	#_converttofloat
0d608     FD 22 02 F6 | 	mov	local03, result1
0d60c     30 4E 05 F1 | 	add	fp, #48
0d610     A7 22 62 FC | 	wrlong	local03, fp
0d614     30 4E 85 F1 | 	sub	fp, #48
0d618     88 E3 BF FD | 	call	#_pop
0d61c     FF 1E 02 F6 | 	mov	local01, result3
0d620     5C 4E 05 F1 | 	add	fp, #92
0d624     A7 FA 61 FC | 	wrlong	result1, fp
0d628     04 4E 05 F1 | 	add	fp, #4
0d62c     A7 FC 61 FC | 	wrlong	result2, fp
0d630     04 4E 05 F1 | 	add	fp, #4
0d634     A7 1E 62 FC | 	wrlong	local01, fp
0d638     08 4E 85 F1 | 	sub	fp, #8
0d63c     A7 12 02 F6 | 	mov	arg01, fp
0d640     5C 4E 85 F1 | 	sub	fp, #92
0d644     DC 84 B0 FD | 	call	#_converttofloat
0d648     FD 22 02 F6 | 	mov	local03, result1
0d64c     2C 4E 05 F1 | 	add	fp, #44
0d650     A7 22 62 FC | 	wrlong	local03, fp
0d654     2C 4E 85 F1 | 	sub	fp, #44
0d658     48 E3 BF FD | 	call	#_pop
0d65c     FF 1E 02 F6 | 	mov	local01, result3
0d660     5C 4E 05 F1 | 	add	fp, #92
0d664     A7 FA 61 FC | 	wrlong	result1, fp
0d668     04 4E 05 F1 | 	add	fp, #4
0d66c     A7 FC 61 FC | 	wrlong	result2, fp
0d670     04 4E 05 F1 | 	add	fp, #4
0d674     A7 1E 62 FC | 	wrlong	local01, fp
0d678     08 4E 85 F1 | 	sub	fp, #8
0d67c     A7 12 02 F6 | 	mov	arg01, fp
0d680     5C 4E 85 F1 | 	sub	fp, #92
0d684     9C 84 B0 FD | 	call	#_converttofloat
0d688     FD 22 02 F6 | 	mov	local03, result1
0d68c     28 4E 05 F1 | 	add	fp, #40
0d690     A7 22 62 FC | 	wrlong	local03, fp
0d694     28 4E 85 F1 | 	sub	fp, #40
0d698     08 E3 BF FD | 	call	#_pop
0d69c     FF 1E 02 F6 | 	mov	local01, result3
0d6a0     5C 4E 05 F1 | 	add	fp, #92
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     04 4E 05 F1 | 	add	fp, #4
0d6ac     A7 FC 61 FC | 	wrlong	result2, fp
0d6b0     04 4E 05 F1 | 	add	fp, #4
0d6b4     A7 1E 62 FC | 	wrlong	local01, fp
0d6b8     08 4E 85 F1 | 	sub	fp, #8
0d6bc     A7 12 02 F6 | 	mov	arg01, fp
0d6c0     5C 4E 85 F1 | 	sub	fp, #92
0d6c4     A0 83 B0 FD | 	call	#_converttoint
0d6c8     20 4E 05 F1 | 	add	fp, #32
0d6cc     A7 FA 61 FC | 	wrlong	result1, fp
0d6d0                 | ' 
0d6d0                 | '   t1=pop() : rr=converttofloat(t1)
0d6d0                 | '   t1=pop() : ss=converttofloat(t1) 
0d6d0                 | '   t1=pop() : dd=converttofloat(t1)
0d6d0                 | '   t1=pop() : aa=converttofloat(t1)
0d6d0                 | '   t1=pop() : channel=converttoint(t1)
0d6d0                 | '   if ss<0.0 then ss=0.0 
0d6d0     10 4E 05 F1 | 	add	fp, #16
0d6d4     A7 12 02 FB | 	rdlong	arg01, fp
0d6d8     30 4E 85 F1 | 	sub	fp, #48
0d6dc     00 14 06 F6 | 	mov	arg02, #0
0d6e0     01 16 06 F6 | 	mov	arg03, #1
0d6e4     28 60 B1 FD | 	call	#__system___float_cmp
0d6e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d6ec     30 4E 05 C1 |  if_b	add	fp, #48
0d6f0     A7 00 68 CC |  if_b	wrlong	#0, fp
0d6f4     30 4E 85 C1 |  if_b	sub	fp, #48
0d6f8                 | '   if ss>1.0 then ss=1.0
0d6f8     30 4E 05 F1 | 	add	fp, #48
0d6fc     A7 12 02 FB | 	rdlong	arg01, fp
0d700     30 4E 85 F1 | 	sub	fp, #48
0d704     00 C0 1F FF 
0d708     00 14 06 F6 | 	mov	arg02, ##1065353216
0d70c     01 16 66 F6 | 	neg	arg03, #1
0d710     FC 5F B1 FD | 	call	#__system___float_cmp
0d714     01 FA 55 F2 | 	cmps	result1, #1 wc
0d718     30 4E 05 31 |  if_ae	add	fp, #48
0d71c     00 C0 9F 3F 
0d720     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d724     30 4E 85 31 |  if_ae	sub	fp, #48
0d728     28 4E 05 F1 | 	add	fp, #40
0d72c     A7 12 02 FB | 	rdlong	arg01, fp
0d730     04 4E 05 F1 | 	add	fp, #4
0d734     A7 14 02 FB | 	rdlong	arg02, fp
0d738     2C 4E 85 F1 | 	sub	fp, #44
0d73c     CC 57 B1 FD | 	call	#__system___float_add
0d740     FD 12 02 F6 | 	mov	arg01, result1
0d744     34 4E 05 F1 | 	add	fp, #52
0d748     A7 14 02 FB | 	rdlong	arg02, fp
0d74c     34 4E 85 F1 | 	sub	fp, #52
0d750     B8 57 B1 FD | 	call	#__system___float_add
0d754     4C 4E 05 F1 | 	add	fp, #76
0d758     A7 FA 61 FC | 	wrlong	result1, fp
0d75c     FD 14 02 F6 | 	mov	arg02, result1
0d760     4C 4E 85 F1 | 	sub	fp, #76
0d764     00 C0 21 FF 
0d768     00 12 06 F6 | 	mov	arg01, ##1132462080
0d76c     70 5D B1 FD | 	call	#__system___float_div
0d770     50 4E 05 F1 | 	add	fp, #80
0d774     A7 FA 61 FC | 	wrlong	result1, fp
0d778     28 4E 85 F1 | 	sub	fp, #40
0d77c     A7 12 02 FB | 	rdlong	arg01, fp
0d780     FD 14 02 F6 | 	mov	arg02, result1
0d784     28 4E 85 F1 | 	sub	fp, #40
0d788     50 5B B1 FD | 	call	#__system___float_mul
0d78c     FD 12 02 F6 | 	mov	arg01, result1
0d790     01 14 06 F6 | 	mov	arg02, #1
0d794     0C 60 B1 FD | 	call	#__system___float_tointeger
0d798     A7 FA 61 FC | 	wrlong	result1, fp
0d79c     2C 4E 05 F1 | 	add	fp, #44
0d7a0     A7 12 02 FB | 	rdlong	arg01, fp
0d7a4     24 4E 05 F1 | 	add	fp, #36
0d7a8     A7 14 02 FB | 	rdlong	arg02, fp
0d7ac     50 4E 85 F1 | 	sub	fp, #80
0d7b0     28 5B B1 FD | 	call	#__system___float_mul
0d7b4     FD 12 02 F6 | 	mov	arg01, result1
0d7b8     01 14 06 F6 | 	mov	arg02, #1
0d7bc     E4 5F B1 FD | 	call	#__system___float_tointeger
0d7c0     04 4E 05 F1 | 	add	fp, #4
0d7c4     A7 FA 61 FC | 	wrlong	result1, fp
0d7c8     30 4E 05 F1 | 	add	fp, #48
0d7cc     A7 12 02 FB | 	rdlong	arg01, fp
0d7d0     1C 4E 05 F1 | 	add	fp, #28
0d7d4     A7 14 02 FB | 	rdlong	arg02, fp
0d7d8     50 4E 85 F1 | 	sub	fp, #80
0d7dc     FC 5A B1 FD | 	call	#__system___float_mul
0d7e0     FD 12 02 F6 | 	mov	arg01, result1
0d7e4     01 14 06 F6 | 	mov	arg02, #1
0d7e8     B8 5F B1 FD | 	call	#__system___float_tointeger
0d7ec     FD 22 02 F6 | 	mov	local03, result1
0d7f0     0C 4E 05 F1 | 	add	fp, #12
0d7f4     A7 22 62 FC | 	wrlong	local03, fp
0d7f8     0C 4E 85 F1 | 	sub	fp, #12
0d7fc                 | '   fulltime=aa+dd+rr
0d7fc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d7fc     00 12 06 F6 | 	mov	arg01, #0
0d800     64 89 B1 FD | 	call	#__system___getiolock_0540
0d804     FD 12 02 F6 | 	mov	arg01, result1
0d808     1C 2F B1 FD | 	call	#__system___lockmem
0d80c     A7 14 02 FB | 	rdlong	arg02, fp
0d810     00 12 06 F6 | 	mov	arg01, #0
0d814     00 16 06 F6 | 	mov	arg03, #0
0d818     0A 18 06 F6 | 	mov	arg04, #10
0d81c     40 3C B1 FD | 	call	#__system___basic_print_integer
0d820     00 12 06 F6 | 	mov	arg01, #0
0d824     09 14 06 F6 | 	mov	arg02, #9
0d828     00 16 06 F6 | 	mov	arg03, #0
0d82c     94 3B B1 FD | 	call	#__system___basic_print_char
0d830     04 4E 05 F1 | 	add	fp, #4
0d834     A7 14 02 FB | 	rdlong	arg02, fp
0d838     04 4E 85 F1 | 	sub	fp, #4
0d83c     00 12 06 F6 | 	mov	arg01, #0
0d840     00 16 06 F6 | 	mov	arg03, #0
0d844     0A 18 06 F6 | 	mov	arg04, #10
0d848     14 3C B1 FD | 	call	#__system___basic_print_integer
0d84c     00 12 06 F6 | 	mov	arg01, #0
0d850     09 14 06 F6 | 	mov	arg02, #9
0d854     00 16 06 F6 | 	mov	arg03, #0
0d858     68 3B B1 FD | 	call	#__system___basic_print_char
0d85c     0C 4E 05 F1 | 	add	fp, #12
0d860     A7 14 02 FB | 	rdlong	arg02, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     00 12 06 F6 | 	mov	arg01, #0
0d86c     00 16 06 F6 | 	mov	arg03, #0
0d870     0A 18 06 F6 | 	mov	arg04, #10
0d874     E8 3B B1 FD | 	call	#__system___basic_print_integer
0d878     00 12 06 F6 | 	mov	arg01, #0
0d87c     09 14 06 F6 | 	mov	arg02, #9
0d880     00 16 06 F6 | 	mov	arg03, #0
0d884     3C 3B B1 FD | 	call	#__system___basic_print_char
0d888     A7 14 02 FB | 	rdlong	arg02, fp
0d88c     04 4E 05 F1 | 	add	fp, #4
0d890     A7 22 02 FB | 	rdlong	local03, fp
0d894     11 15 02 F1 | 	add	arg02, local03
0d898     08 4E 05 F1 | 	add	fp, #8
0d89c     A7 22 02 FB | 	rdlong	local03, fp
0d8a0     0C 4E 85 F1 | 	sub	fp, #12
0d8a4     11 15 02 F1 | 	add	arg02, local03
0d8a8     00 12 06 F6 | 	mov	arg01, #0
0d8ac     00 16 06 F6 | 	mov	arg03, #0
0d8b0     0A 18 06 F6 | 	mov	arg04, #10
0d8b4     A8 3B B1 FD | 	call	#__system___basic_print_integer
0d8b8     00 12 06 F6 | 	mov	arg01, #0
0d8bc     0A 14 06 F6 | 	mov	arg02, #10
0d8c0     00 16 06 F6 | 	mov	arg03, #0
0d8c4     FC 3A B1 FD | 	call	#__system___basic_print_char
0d8c8     00 12 06 F6 | 	mov	arg01, #0
0d8cc     98 88 B1 FD | 	call	#__system___getiolock_0540
0d8d0     FD 00 68 FC | 	wrlong	#0, result1
0d8d4     F8 BF 23 FF 
0d8d8     00 22 06 F6 | 	mov	local03, ##1199566848
0d8dc     A7 12 02 FB | 	rdlong	arg01, fp
0d8e0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8e4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d8e8     00 24 06 36 |  if_ae	mov	local04, #0
0d8ec     E8 55 B1 FD | 	call	#__system___float_fromuns
0d8f0     12 FB 61 F5 | 	xor	result1, local04
0d8f4     FD 14 02 F6 | 	mov	arg02, result1
0d8f8     11 13 02 F6 | 	mov	arg01, local03
0d8fc     E0 5B B1 FD | 	call	#__system___float_div
0d900     54 4E 05 F1 | 	add	fp, #84
0d904     A7 FA 61 FC | 	wrlong	result1, fp
0d908     F8 BF 23 FF 
0d90c     00 22 06 F6 | 	mov	local03, ##1199566848
0d910     24 4E 85 F1 | 	sub	fp, #36
0d914     A7 14 02 FB | 	rdlong	arg02, fp
0d918     30 4E 85 F1 | 	sub	fp, #48
0d91c     F8 BF 23 FF 
0d920     00 12 06 F6 | 	mov	arg01, ##1199566848
0d924     B4 59 B1 FD | 	call	#__system___float_mul
0d928     FD 14 02 F6 | 	mov	arg02, result1
0d92c     11 13 02 F6 | 	mov	arg01, local03
0d930     1F 14 E6 F4 | 	bitnot	arg02, #31
0d934     D4 55 B1 FD | 	call	#__system___float_add
0d938     FD 22 02 F6 | 	mov	local03, result1
0d93c     04 4E 05 F1 | 	add	fp, #4
0d940     A7 12 02 FB | 	rdlong	arg01, fp
0d944     04 4E 85 F1 | 	sub	fp, #4
0d948     09 13 52 F6 | 	abs	arg01, arg01 wc
0d94c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d950     00 24 06 36 |  if_ae	mov	local04, #0
0d954     80 55 B1 FD | 	call	#__system___float_fromuns
0d958     12 FB 61 F5 | 	xor	result1, local04
0d95c     FD 14 02 F6 | 	mov	arg02, result1
0d960     11 13 02 F6 | 	mov	arg01, local03
0d964     78 5B B1 FD | 	call	#__system___float_div
0d968     2C 4E 05 F1 | 	add	fp, #44
0d96c     A7 FA 61 FC | 	wrlong	result1, fp
0d970     04 4E 05 F1 | 	add	fp, #4
0d974     A7 14 02 FB | 	rdlong	arg02, fp
0d978     30 4E 85 F1 | 	sub	fp, #48
0d97c     F8 BF 23 FF 
0d980     00 12 06 F6 | 	mov	arg01, ##1199566848
0d984     54 59 B1 FD | 	call	#__system___float_mul
0d988     FD 22 02 F6 | 	mov	local03, result1
0d98c     0C 4E 05 F1 | 	add	fp, #12
0d990     A7 12 02 FB | 	rdlong	arg01, fp
0d994     0C 4E 85 F1 | 	sub	fp, #12
0d998     09 13 52 F6 | 	abs	arg01, arg01 wc
0d99c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a0     00 24 06 36 |  if_ae	mov	local04, #0
0d9a4     30 55 B1 FD | 	call	#__system___float_fromuns
0d9a8     12 FB 61 F5 | 	xor	result1, local04
0d9ac     FD 14 02 F6 | 	mov	arg02, result1
0d9b0     11 13 02 F6 | 	mov	arg01, local03
0d9b4     28 5B B1 FD | 	call	#__system___float_div
0d9b8     FD 22 02 F6 | 	mov	local03, result1
0d9bc     58 4E 05 F1 | 	add	fp, #88
0d9c0     A7 22 62 FC | 	wrlong	local03, fp
0d9c4     58 4E 85 F1 | 	sub	fp, #88
0d9c8                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0d9c8     00 12 06 F6 | 	mov	arg01, #0
0d9cc     98 87 B1 FD | 	call	#__system___getiolock_0540
0d9d0     FD 12 02 F6 | 	mov	arg01, result1
0d9d4     50 2D B1 FD | 	call	#__system___lockmem
0d9d8     54 4E 05 F1 | 	add	fp, #84
0d9dc     A7 14 02 FB | 	rdlong	arg02, fp
0d9e0     54 4E 85 F1 | 	sub	fp, #84
0d9e4     00 12 06 F6 | 	mov	arg01, #0
0d9e8     00 16 06 F6 | 	mov	arg03, #0
0d9ec     23 18 06 F6 | 	mov	arg04, #35
0d9f0     00 5F B1 FD | 	call	#__system___basic_print_float
0d9f4     00 12 06 F6 | 	mov	arg01, #0
0d9f8     09 14 06 F6 | 	mov	arg02, #9
0d9fc     00 16 06 F6 | 	mov	arg03, #0
0da00     C0 39 B1 FD | 	call	#__system___basic_print_char
0da04     2C 4E 05 F1 | 	add	fp, #44
0da08     A7 14 02 FB | 	rdlong	arg02, fp
0da0c     2C 4E 85 F1 | 	sub	fp, #44
0da10     00 12 06 F6 | 	mov	arg01, #0
0da14     00 16 06 F6 | 	mov	arg03, #0
0da18     23 18 06 F6 | 	mov	arg04, #35
0da1c     D4 5E B1 FD | 	call	#__system___basic_print_float
0da20     00 12 06 F6 | 	mov	arg01, #0
0da24     09 14 06 F6 | 	mov	arg02, #9
0da28     00 16 06 F6 | 	mov	arg03, #0
0da2c     94 39 B1 FD | 	call	#__system___basic_print_char
0da30     58 4E 05 F1 | 	add	fp, #88
0da34     A7 14 02 FB | 	rdlong	arg02, fp
0da38     58 4E 85 F1 | 	sub	fp, #88
0da3c     00 12 06 F6 | 	mov	arg01, #0
0da40     00 16 06 F6 | 	mov	arg03, #0
0da44     23 18 06 F6 | 	mov	arg04, #35
0da48     A8 5E B1 FD | 	call	#__system___basic_print_float
0da4c     00 12 06 F6 | 	mov	arg01, #0
0da50     0A 14 06 F6 | 	mov	arg02, #10
0da54     00 16 06 F6 | 	mov	arg03, #0
0da58     68 39 B1 FD | 	call	#__system___basic_print_char
0da5c     00 12 06 F6 | 	mov	arg01, #0
0da60     04 87 B1 FD | 	call	#__system___getiolock_0540
0da64     FD 00 68 FC | 	wrlong	#0, result1
0da68     20 4E 05 F1 | 	add	fp, #32
0da6c     A7 26 02 FB | 	rdlong	local05, fp
0da70     20 4E 85 F1 | 	sub	fp, #32
0da74     01 26 66 F0 | 	shl	local05, #1
0da78     51 00 00 FF 
0da7c     C4 E5 05 F1 | 	add	objptr, ##41924
0da80     F2 26 02 F1 | 	add	local05, objptr
0da84     A7 28 02 FB | 	rdlong	local06, fp
0da88     04 4E 05 F1 | 	add	fp, #4
0da8c     A7 22 02 FB | 	rdlong	local03, fp
0da90     11 29 02 F1 | 	add	local06, local03
0da94     13 29 52 FC | 	wrword	local06, local05
0da98     24 4E 05 F1 | 	add	fp, #36
0da9c     A7 00 68 FC | 	wrlong	#0, fp
0daa0                 | '   suspoints(channel)=a+d
0daa0                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0daa0     14 4E 85 F1 | 	sub	fp, #20
0daa4     A7 00 68 FC | 	wrlong	#0, fp
0daa8     14 4E 85 F1 | 	sub	fp, #20
0daac     A7 2A 02 FB | 	rdlong	local07, fp
0dab0     51 00 00 FF 
0dab4     C4 E5 85 F1 | 	sub	objptr, ##41924
0dab8                 | LR__1134
0dab8     14 4E 05 F1 | 	add	fp, #20
0dabc     A7 22 02 FB | 	rdlong	local03, fp
0dac0     14 4E 85 F1 | 	sub	fp, #20
0dac4     15 23 52 F2 | 	cmps	local03, local07 wc
0dac8     80 00 90 3D |  if_ae	jmp	#LR__1135
0dacc     20 4E 05 F1 | 	add	fp, #32
0dad0     A7 28 02 FB | 	rdlong	local06, fp
0dad4     09 28 66 F0 | 	shl	local06, #9
0dad8     0C 00 00 FF 
0dadc     D8 E4 05 F1 | 	add	objptr, ##6360
0dae0     F2 28 02 F1 | 	add	local06, objptr
0dae4     0C 4E 85 F1 | 	sub	fp, #12
0dae8     A7 26 02 FB | 	rdlong	local05, fp
0daec     01 26 66 F0 | 	shl	local05, #1
0daf0     14 27 02 F1 | 	add	local05, local06
0daf4     14 4E 05 F1 | 	add	fp, #20
0daf8     A7 12 02 FB | 	rdlong	arg01, fp
0dafc     28 4E 85 F1 | 	sub	fp, #40
0db00     0C 00 00 FF 
0db04     D8 E4 85 F1 | 	sub	objptr, ##6360
0db08     01 14 06 F6 | 	mov	arg02, #1
0db0c     94 5C B1 FD | 	call	#__system___float_tointeger
0db10     13 FB 51 FC | 	wrword	result1, local05
0db14     28 4E 05 F1 | 	add	fp, #40
0db18     A7 12 02 FB | 	rdlong	arg01, fp
0db1c     2C 4E 05 F1 | 	add	fp, #44
0db20     A7 14 02 FB | 	rdlong	arg02, fp
0db24     54 4E 85 F1 | 	sub	fp, #84
0db28     E0 53 B1 FD | 	call	#__system___float_add
0db2c     28 4E 05 F1 | 	add	fp, #40
0db30     A7 FA 61 FC | 	wrlong	result1, fp
0db34     14 4E 85 F1 | 	sub	fp, #20
0db38     A7 20 02 FB | 	rdlong	local02, fp
0db3c     01 20 06 F1 | 	add	local02, #1
0db40     A7 20 62 FC | 	wrlong	local02, fp
0db44     14 4E 85 F1 | 	sub	fp, #20
0db48     6C FF 9F FD | 	jmp	#LR__1134
0db4c                 | LR__1135
0db4c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0db4c     A7 22 02 FB | 	rdlong	local03, fp
0db50     14 4E 05 F1 | 	add	fp, #20
0db54     A7 22 62 FC | 	wrlong	local03, fp
0db58     14 4E 85 F1 | 	sub	fp, #20
0db5c     A7 2C 02 FB | 	rdlong	local08, fp
0db60     04 4E 05 F1 | 	add	fp, #4
0db64     A7 22 02 FB | 	rdlong	local03, fp
0db68     04 4E 85 F1 | 	sub	fp, #4
0db6c     11 2D 02 F1 | 	add	local08, local03
0db70                 | LR__1136
0db70     14 4E 05 F1 | 	add	fp, #20
0db74     A7 22 02 FB | 	rdlong	local03, fp
0db78     14 4E 85 F1 | 	sub	fp, #20
0db7c     16 23 52 F2 | 	cmps	local03, local08 wc
0db80     A8 00 90 3D |  if_ae	jmp	#LR__1137
0db84     20 4E 05 F1 | 	add	fp, #32
0db88     A7 2A 02 FB | 	rdlong	local07, fp
0db8c     09 2A 66 F0 | 	shl	local07, #9
0db90     0C 00 00 FF 
0db94     D8 E4 05 F1 | 	add	objptr, ##6360
0db98     F2 2A 02 F1 | 	add	local07, objptr
0db9c     0C 4E 85 F1 | 	sub	fp, #12
0dba0     A7 28 02 FB | 	rdlong	local06, fp
0dba4     01 28 66 F0 | 	shl	local06, #1
0dba8     15 29 02 F1 | 	add	local06, local07
0dbac     14 4E 05 F1 | 	add	fp, #20
0dbb0     A7 12 02 FB | 	rdlong	arg01, fp
0dbb4     28 4E 85 F1 | 	sub	fp, #40
0dbb8     0C 00 00 FF 
0dbbc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbc0     01 14 06 F6 | 	mov	arg02, #1
0dbc4     DC 5B B1 FD | 	call	#__system___float_tointeger
0dbc8     14 FB 51 FC | 	wrword	result1, local06
0dbcc     28 4E 05 F1 | 	add	fp, #40
0dbd0     A7 12 02 FB | 	rdlong	arg01, fp
0dbd4     04 4E 05 F1 | 	add	fp, #4
0dbd8     A7 14 02 FB | 	rdlong	arg02, fp
0dbdc     2C 4E 85 F1 | 	sub	fp, #44
0dbe0     1F 14 E6 F4 | 	bitnot	arg02, #31
0dbe4     24 53 B1 FD | 	call	#__system___float_add
0dbe8     28 4E 05 F1 | 	add	fp, #40
0dbec     A7 FA 61 FC | 	wrlong	result1, fp
0dbf0     28 4E 85 F1 | 	sub	fp, #40
0dbf4     FD 12 02 F6 | 	mov	arg01, result1
0dbf8     00 14 06 F6 | 	mov	arg02, #0
0dbfc     01 16 06 F6 | 	mov	arg03, #1
0dc00     0C 5B B1 FD | 	call	#__system___float_cmp
0dc04     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc08     28 4E 05 C1 |  if_b	add	fp, #40
0dc0c     A7 00 68 CC |  if_b	wrlong	#0, fp
0dc10     28 4E 85 C1 |  if_b	sub	fp, #40
0dc14     14 4E 05 F1 | 	add	fp, #20
0dc18     A7 20 02 FB | 	rdlong	local02, fp
0dc1c     01 20 06 F1 | 	add	local02, #1
0dc20     A7 20 62 FC | 	wrlong	local02, fp
0dc24     14 4E 85 F1 | 	sub	fp, #20
0dc28     44 FF 9F FD | 	jmp	#LR__1136
0dc2c                 | LR__1137
0dc2c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dc2c     A7 22 02 FB | 	rdlong	local03, fp
0dc30     04 4E 05 F1 | 	add	fp, #4
0dc34     A7 2C 02 FB | 	rdlong	local08, fp
0dc38     16 23 02 F1 | 	add	local03, local08
0dc3c     10 4E 05 F1 | 	add	fp, #16
0dc40     A7 22 62 FC | 	wrlong	local03, fp
0dc44     14 4E 85 F1 | 	sub	fp, #20
0dc48                 | LR__1138
0dc48     14 4E 05 F1 | 	add	fp, #20
0dc4c     A7 26 02 FB | 	rdlong	local05, fp
0dc50     14 4E 85 F1 | 	sub	fp, #20
0dc54     00 27 56 F2 | 	cmps	local05, #256 wc
0dc58     A8 00 90 3D |  if_ae	jmp	#LR__1139
0dc5c     20 4E 05 F1 | 	add	fp, #32
0dc60     A7 2C 02 FB | 	rdlong	local08, fp
0dc64     09 2C 66 F0 | 	shl	local08, #9
0dc68     0C 00 00 FF 
0dc6c     D8 E4 05 F1 | 	add	objptr, ##6360
0dc70     F2 2C 02 F1 | 	add	local08, objptr
0dc74     0C 4E 85 F1 | 	sub	fp, #12
0dc78     A7 2A 02 FB | 	rdlong	local07, fp
0dc7c     01 2A 66 F0 | 	shl	local07, #1
0dc80     16 2B 02 F1 | 	add	local07, local08
0dc84     14 4E 05 F1 | 	add	fp, #20
0dc88     A7 12 02 FB | 	rdlong	arg01, fp
0dc8c     28 4E 85 F1 | 	sub	fp, #40
0dc90     0C 00 00 FF 
0dc94     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc98     01 14 06 F6 | 	mov	arg02, #1
0dc9c     04 5B B1 FD | 	call	#__system___float_tointeger
0dca0     15 FB 51 FC | 	wrword	result1, local07
0dca4     28 4E 05 F1 | 	add	fp, #40
0dca8     A7 12 02 FB | 	rdlong	arg01, fp
0dcac     30 4E 05 F1 | 	add	fp, #48
0dcb0     A7 14 02 FB | 	rdlong	arg02, fp
0dcb4     58 4E 85 F1 | 	sub	fp, #88
0dcb8     1F 14 E6 F4 | 	bitnot	arg02, #31
0dcbc     4C 52 B1 FD | 	call	#__system___float_add
0dcc0     28 4E 05 F1 | 	add	fp, #40
0dcc4     A7 FA 61 FC | 	wrlong	result1, fp
0dcc8     28 4E 85 F1 | 	sub	fp, #40
0dccc     FD 12 02 F6 | 	mov	arg01, result1
0dcd0     00 14 06 F6 | 	mov	arg02, #0
0dcd4     01 16 06 F6 | 	mov	arg03, #1
0dcd8     34 5A B1 FD | 	call	#__system___float_cmp
0dcdc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dce0     28 4E 05 C1 |  if_b	add	fp, #40
0dce4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dce8     28 4E 85 C1 |  if_b	sub	fp, #40
0dcec     14 4E 05 F1 | 	add	fp, #20
0dcf0     A7 2C 02 FB | 	rdlong	local08, fp
0dcf4     01 2C 06 F1 | 	add	local08, #1
0dcf8     A7 2C 62 FC | 	wrlong	local08, fp
0dcfc     14 4E 85 F1 | 	sub	fp, #20
0dd00     44 FF 9F FD | 	jmp	#LR__1138
0dd04                 | LR__1139
0dd04     20 4E 05 F1 | 	add	fp, #32
0dd08     A7 26 02 FB | 	rdlong	local05, fp
0dd0c     20 4E 85 F1 | 	sub	fp, #32
0dd10     09 26 66 F0 | 	shl	local05, #9
0dd14     0C 00 00 FF 
0dd18     D8 E4 05 F1 | 	add	objptr, ##6360
0dd1c     F2 26 02 F1 | 	add	local05, objptr
0dd20     FE 27 06 F1 | 	add	local05, #510
0dd24     13 01 58 FC | 	wrword	#0, local05
0dd28     0C 00 00 FF 
0dd2c     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd30                 | LR__1140
0dd30     20 4E 05 F1 | 	add	fp, #32
0dd34     A7 26 02 FB | 	rdlong	local05, fp
0dd38     20 4E 85 F1 | 	sub	fp, #32
0dd3c     09 26 66 F0 | 	shl	local05, #9
0dd40     0C 00 00 FF 
0dd44     D8 E4 05 F1 | 	add	objptr, ##6360
0dd48     F2 26 02 F1 | 	add	local05, objptr
0dd4c     FE 27 06 F1 | 	add	local05, #510
0dd50     13 01 58 FC | 	wrword	#0, local05
0dd54     0C 00 00 FF 
0dd58     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd5c                 | LR__1141
0dd5c     A7 F0 03 F6 | 	mov	ptra, fp
0dd60     B2 00 A0 FD | 	call	#popregs_
0dd64                 | _do_defenv_ret
0dd64     2D 00 64 FD | 	ret
0dd68                 | 
0dd68                 | ' 
0dd68                 | ' 
0dd68                 | ' sub do_play
0dd68                 | _do_play
0dd68     06 4A 05 F6 | 	mov	COUNT_, #6
0dd6c     A8 00 A0 FD | 	call	#pushregs_
0dd70     7C F0 07 F1 | 	add	ptra, #124
0dd74     68 4E 05 F1 | 	add	fp, #104
0dd78     AB CB A1 FF 
0dd7c     A7 D6 6B FC | 	wrlong	##1133991915, fp
0dd80                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0dd80                 | ' 
0dd80                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0dd80     64 4E 85 F1 | 	sub	fp, #100
0dd84     A7 00 68 FC | 	wrlong	#0, fp
0dd88     97 18 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0dd8c                 | LR__1150
0dd8c     A7 16 02 FB | 	rdlong	arg03, fp
0dd90     02 16 66 F0 | 	shl	arg03, #2
0dd94     34 4E 05 F1 | 	add	fp, #52
0dd98     A7 16 02 F1 | 	add	arg03, fp
0dd9c     00 00 E0 FF 
0dda0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0dda4     34 4E 85 F1 | 	sub	fp, #52
0dda8     A7 1E 02 FB | 	rdlong	local01, fp
0ddac     01 1E 06 F1 | 	add	local01, #1
0ddb0     A7 1E 62 FC | 	wrlong	local01, fp
0ddb4     09 1E 56 F2 | 	cmps	local01, #9 wc
0ddb8     D0 FF 9F CD |  if_b	jmp	#LR__1150
0ddbc                 | LR__1151
0ddbc     04 4E 85 F1 | 	sub	fp, #4
0ddc0     4A 00 00 FF 
0ddc4     80 E4 05 F1 | 	add	objptr, ##38016
0ddc8     F2 20 02 FB | 	rdlong	local02, objptr
0ddcc     10 23 02 F6 | 	mov	local03, local02
0ddd0     01 22 66 F0 | 	shl	local03, #1
0ddd4     10 23 02 F1 | 	add	local03, local02
0ddd8     02 22 66 F0 | 	shl	local03, #2
0dddc     03 00 00 FF 
0dde0     04 E4 85 F1 | 	sub	objptr, ##1540
0dde4     F2 22 02 F1 | 	add	local03, objptr
0dde8     11 25 02 FB | 	rdlong	local04, local03
0ddec     A7 24 62 FC | 	wrlong	local04, fp
0ddf0                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0ddf0                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0ddf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddf0                 | ' for i=numpar to 1 step -1 
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 24 62 FC | 	wrlong	local04, fp
0ddf8     04 4E 85 F1 | 	sub	fp, #4
0ddfc     47 00 00 FF 
0de00     7C E4 85 F1 | 	sub	objptr, ##36476
0de04                 | LR__1152
0de04     9C DB BF FD | 	call	#_pop
0de08     5C 4E 05 F1 | 	add	fp, #92
0de0c     A7 FA 61 FC | 	wrlong	result1, fp
0de10     04 4E 05 F1 | 	add	fp, #4
0de14     A7 FC 61 FC | 	wrlong	result2, fp
0de18     04 4E 05 F1 | 	add	fp, #4
0de1c     A7 FE 61 FC | 	wrlong	result3, fp
0de20     60 4E 85 F1 | 	sub	fp, #96
0de24     A7 22 02 FB | 	rdlong	local03, fp
0de28     01 22 86 F1 | 	sub	local03, #1
0de2c     02 22 66 F0 | 	shl	local03, #2
0de30     34 4E 05 F1 | 	add	fp, #52
0de34     A7 22 02 F1 | 	add	local03, fp
0de38     24 4E 05 F1 | 	add	fp, #36
0de3c     A7 26 02 F6 | 	mov	local05, fp
0de40     13 13 02 F6 | 	mov	arg01, local05
0de44     5C 4E 85 F1 | 	sub	fp, #92
0de48     D8 7C B0 FD | 	call	#_converttofloat
0de4c     11 FB 61 FC | 	wrlong	result1, local03
0de50     04 4E 05 F1 | 	add	fp, #4
0de54     A7 1E 02 FB | 	rdlong	local01, fp
0de58     01 1E 86 F1 | 	sub	local01, #1
0de5c     A7 1E 62 FC | 	wrlong	local01, fp
0de60     04 4E 85 F1 | 	sub	fp, #4
0de64     01 1E 56 F2 | 	cmps	local01, #1 wc
0de68     98 FF 9F 3D |  if_ae	jmp	#LR__1152
0de6c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0de6c     38 4E 05 F1 | 	add	fp, #56
0de70     A7 12 02 FB | 	rdlong	arg01, fp
0de74     38 4E 85 F1 | 	sub	fp, #56
0de78     00 14 06 F6 | 	mov	arg02, #0
0de7c     01 16 06 F6 | 	mov	arg03, #1
0de80     8C 58 B1 FD | 	call	#__system___float_cmp
0de84     00 FA 55 F2 | 	cmps	result1, #0 wc
0de88     0C 4E 05 C1 |  if_b	add	fp, #12
0de8c     A7 00 68 CC |  if_b	wrlong	#0, fp
0de90     0C 4E 85 C1 |  if_b	sub	fp, #12
0de94     2C 00 90 CD |  if_b	jmp	#LR__1153
0de98     38 4E 05 F1 | 	add	fp, #56
0de9c     A7 12 02 FB | 	rdlong	arg01, fp
0dea0     38 4E 85 F1 | 	sub	fp, #56
0dea4     01 14 06 F6 | 	mov	arg02, #1
0dea8     F8 58 B1 FD | 	call	#__system___float_tointeger
0deac     FD 1E 52 F6 | 	abs	local01, result1 wc
0deb0     07 1E 06 F5 | 	and	local01, #7
0deb4     0F 1F 82 F6 | 	negc	local01, local01
0deb8     0C 4E 05 F1 | 	add	fp, #12
0debc     A7 1E 62 FC | 	wrlong	local01, fp
0dec0     0C 4E 85 F1 | 	sub	fp, #12
0dec4                 | LR__1153
0dec4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0dec4     3C 4E 05 F1 | 	add	fp, #60
0dec8     A7 12 02 FB | 	rdlong	arg01, fp
0decc     3C 4E 85 F1 | 	sub	fp, #60
0ded0     00 14 06 F6 | 	mov	arg02, #0
0ded4     01 16 06 F6 | 	mov	arg03, #1
0ded8     34 58 B1 FD | 	call	#__system___float_cmp
0dedc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dee0     40 00 90 3D |  if_ae	jmp	#LR__1154
0dee4     0C 4E 05 F1 | 	add	fp, #12
0dee8     A7 20 02 FB | 	rdlong	local02, fp
0deec     10 23 02 F6 | 	mov	local03, local02
0def0     01 22 66 F0 | 	shl	local03, #1
0def4     10 23 02 F1 | 	add	local03, local02
0def8     03 22 66 F0 | 	shl	local03, #3
0defc     14 00 00 FF 
0df00     38 E5 05 F1 | 	add	objptr, ##10552
0df04     F2 22 02 F1 | 	add	local03, objptr
0df08     11 23 02 FB | 	rdlong	local03, local03
0df0c     60 4E 05 F1 | 	add	fp, #96
0df10     A7 22 62 FC | 	wrlong	local03, fp
0df14     6C 4E 85 F1 | 	sub	fp, #108
0df18     14 00 00 FF 
0df1c     38 E5 85 F1 | 	sub	objptr, ##10552
0df20     44 00 90 FD | 	jmp	#LR__1155
0df24                 | LR__1154
0df24     3C 4E 05 F1 | 	add	fp, #60
0df28     A7 24 02 FB | 	rdlong	local04, fp
0df2c     30 4E 05 F1 | 	add	fp, #48
0df30     A7 24 62 FC | 	wrlong	local04, fp
0df34     60 4E 85 F1 | 	sub	fp, #96
0df38     A7 20 02 FB | 	rdlong	local02, fp
0df3c     10 23 02 F6 | 	mov	local03, local02
0df40     01 22 66 F0 | 	shl	local03, #1
0df44     10 23 02 F1 | 	add	local03, local02
0df48     03 22 66 F0 | 	shl	local03, #3
0df4c     14 00 00 FF 
0df50     38 E5 05 F1 | 	add	objptr, ##10552
0df54     F2 22 02 F1 | 	add	local03, objptr
0df58     0C 4E 85 F1 | 	sub	fp, #12
0df5c     11 25 62 FC | 	wrlong	local04, local03
0df60     14 00 00 FF 
0df64     38 E5 85 F1 | 	sub	objptr, ##10552
0df68                 | LR__1155
0df68                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0df68     44 4E 05 F1 | 	add	fp, #68
0df6c     A7 12 02 FB | 	rdlong	arg01, fp
0df70     44 4E 85 F1 | 	sub	fp, #68
0df74     00 14 06 F6 | 	mov	arg02, #0
0df78     01 16 06 F6 | 	mov	arg03, #1
0df7c     90 57 B1 FD | 	call	#__system___float_cmp
0df80     00 FA 55 F2 | 	cmps	result1, #0 wc
0df84     24 00 90 CD |  if_b	jmp	#LR__1156
0df88     44 4E 05 F1 | 	add	fp, #68
0df8c     A7 12 02 FB | 	rdlong	arg01, fp
0df90     44 4E 85 F1 | 	sub	fp, #68
0df94     89 C1 20 FF 
0df98     6F 14 06 F6 | 	mov	arg02, ##1099108975
0df9c     01 16 66 F6 | 	neg	arg03, #1
0dfa0     6C 57 B1 FD | 	call	#__system___float_cmp
0dfa4     01 FA 55 F2 | 	cmps	result1, #1 wc
0dfa8     44 00 90 CD |  if_b	jmp	#LR__1157
0dfac                 | LR__1156
0dfac     0C 4E 05 F1 | 	add	fp, #12
0dfb0     A7 20 02 FB | 	rdlong	local02, fp
0dfb4     10 23 02 F6 | 	mov	local03, local02
0dfb8     01 22 66 F0 | 	shl	local03, #1
0dfbc     10 23 02 F1 | 	add	local03, local02
0dfc0     03 22 66 F0 | 	shl	local03, #3
0dfc4     14 00 00 FF 
0dfc8     38 E5 05 F1 | 	add	objptr, ##10552
0dfcc     F2 22 02 F1 | 	add	local03, objptr
0dfd0     0C 22 06 F1 | 	add	local03, #12
0dfd4     11 23 02 FB | 	rdlong	local03, local03
0dfd8     68 4E 05 F1 | 	add	fp, #104
0dfdc     A7 22 62 FC | 	wrlong	local03, fp
0dfe0     74 4E 85 F1 | 	sub	fp, #116
0dfe4     14 00 00 FF 
0dfe8     38 E5 85 F1 | 	sub	objptr, ##10552
0dfec     48 00 90 FD | 	jmp	#LR__1158
0dff0                 | LR__1157
0dff0     44 4E 05 F1 | 	add	fp, #68
0dff4     A7 24 02 FB | 	rdlong	local04, fp
0dff8     30 4E 05 F1 | 	add	fp, #48
0dffc     A7 24 62 FC | 	wrlong	local04, fp
0e000     68 4E 85 F1 | 	sub	fp, #104
0e004     A7 20 02 FB | 	rdlong	local02, fp
0e008     10 23 02 F6 | 	mov	local03, local02
0e00c     01 22 66 F0 | 	shl	local03, #1
0e010     10 23 02 F1 | 	add	local03, local02
0e014     03 22 66 F0 | 	shl	local03, #3
0e018     14 00 00 FF 
0e01c     38 E5 05 F1 | 	add	objptr, ##10552
0e020     F2 22 02 F1 | 	add	local03, objptr
0e024     0C 4E 85 F1 | 	sub	fp, #12
0e028     0C 22 06 F1 | 	add	local03, #12
0e02c     11 25 62 FC | 	wrlong	local04, local03
0e030     14 00 00 FF 
0e034     38 E5 85 F1 | 	sub	objptr, ##10552
0e038                 | LR__1158
0e038                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e038     48 4E 05 F1 | 	add	fp, #72
0e03c     A7 12 02 FB | 	rdlong	arg01, fp
0e040     48 4E 85 F1 | 	sub	fp, #72
0e044     00 14 06 F6 | 	mov	arg02, #0
0e048     01 16 06 F6 | 	mov	arg03, #1
0e04c     C0 56 B1 FD | 	call	#__system___float_cmp
0e050     00 FA 55 F2 | 	cmps	result1, #0 wc
0e054     24 00 90 CD |  if_b	jmp	#LR__1159
0e058     48 4E 05 F1 | 	add	fp, #72
0e05c     A7 12 02 FB | 	rdlong	arg01, fp
0e060     48 4E 85 F1 | 	sub	fp, #72
0e064     00 80 20 FF 
0e068     00 14 06 F6 | 	mov	arg02, ##1090519040
0e06c     01 16 66 F6 | 	neg	arg03, #1
0e070     9C 56 B1 FD | 	call	#__system___float_cmp
0e074     01 FA 55 F2 | 	cmps	result1, #1 wc
0e078     48 00 90 CD |  if_b	jmp	#LR__1160
0e07c                 | LR__1159
0e07c     0C 4E 05 F1 | 	add	fp, #12
0e080     A7 22 02 FB | 	rdlong	local03, fp
0e084     11 27 02 F6 | 	mov	local05, local03
0e088     01 26 66 F0 | 	shl	local05, #1
0e08c     11 27 02 F1 | 	add	local05, local03
0e090     03 26 66 F0 | 	shl	local05, #3
0e094     14 00 00 FF 
0e098     38 E5 05 F1 | 	add	objptr, ##10552
0e09c     F2 26 02 F1 | 	add	local05, objptr
0e0a0     04 26 06 F1 | 	add	local05, #4
0e0a4     13 27 C2 FA | 	rdbyte	local05, local05
0e0a8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e0ac     14 4E 05 F1 | 	add	fp, #20
0e0b0     A7 24 62 FC | 	wrlong	local04, fp
0e0b4     20 4E 85 F1 | 	sub	fp, #32
0e0b8     14 00 00 FF 
0e0bc     38 E5 85 F1 | 	sub	objptr, ##10552
0e0c0     54 00 90 FD | 	jmp	#LR__1161
0e0c4                 | LR__1160
0e0c4     48 4E 05 F1 | 	add	fp, #72
0e0c8     A7 12 02 FB | 	rdlong	arg01, fp
0e0cc     48 4E 85 F1 | 	sub	fp, #72
0e0d0     01 14 06 F6 | 	mov	arg02, #1
0e0d4     CC 56 B1 FD | 	call	#__system___float_tointeger
0e0d8     20 4E 05 F1 | 	add	fp, #32
0e0dc     A7 FA 61 FC | 	wrlong	result1, fp
0e0e0     14 4E 85 F1 | 	sub	fp, #20
0e0e4     A7 20 02 FB | 	rdlong	local02, fp
0e0e8     10 23 02 F6 | 	mov	local03, local02
0e0ec     01 22 66 F0 | 	shl	local03, #1
0e0f0     10 23 02 F1 | 	add	local03, local02
0e0f4     03 22 66 F0 | 	shl	local03, #3
0e0f8     14 00 00 FF 
0e0fc     38 E5 05 F1 | 	add	objptr, ##10552
0e100     F2 22 02 F1 | 	add	local03, objptr
0e104     0C 4E 85 F1 | 	sub	fp, #12
0e108     04 22 06 F1 | 	add	local03, #4
0e10c     11 FB 41 FC | 	wrbyte	result1, local03
0e110     14 00 00 FF 
0e114     38 E5 85 F1 | 	sub	objptr, ##10552
0e118                 | LR__1161
0e118                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e118     4C 4E 05 F1 | 	add	fp, #76
0e11c     A7 12 02 FB | 	rdlong	arg01, fp
0e120     4C 4E 85 F1 | 	sub	fp, #76
0e124     00 14 06 F6 | 	mov	arg02, #0
0e128     01 16 06 F6 | 	mov	arg03, #1
0e12c     E0 55 B1 FD | 	call	#__system___float_cmp
0e130     00 FA 55 F2 | 	cmps	result1, #0 wc
0e134     24 00 90 CD |  if_b	jmp	#LR__1162
0e138     4C 4E 05 F1 | 	add	fp, #76
0e13c     A7 12 02 FB | 	rdlong	arg01, fp
0e140     4C 4E 85 F1 | 	sub	fp, #76
0e144     00 80 20 FF 
0e148     00 14 06 F6 | 	mov	arg02, ##1090519040
0e14c     01 16 66 F6 | 	neg	arg03, #1
0e150     BC 55 B1 FD | 	call	#__system___float_cmp
0e154     01 FA 55 F2 | 	cmps	result1, #1 wc
0e158     48 00 90 CD |  if_b	jmp	#LR__1163
0e15c                 | LR__1162
0e15c     0C 4E 05 F1 | 	add	fp, #12
0e160     A7 22 02 FB | 	rdlong	local03, fp
0e164     11 27 02 F6 | 	mov	local05, local03
0e168     01 26 66 F0 | 	shl	local05, #1
0e16c     11 27 02 F1 | 	add	local05, local03
0e170     03 26 66 F0 | 	shl	local05, #3
0e174     14 00 00 FF 
0e178     38 E5 05 F1 | 	add	objptr, ##10552
0e17c     F2 26 02 F1 | 	add	local05, objptr
0e180     05 26 06 F1 | 	add	local05, #5
0e184     13 27 C2 FA | 	rdbyte	local05, local05
0e188     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e18c     18 4E 05 F1 | 	add	fp, #24
0e190     A7 24 62 FC | 	wrlong	local04, fp
0e194     24 4E 85 F1 | 	sub	fp, #36
0e198     14 00 00 FF 
0e19c     38 E5 85 F1 | 	sub	objptr, ##10552
0e1a0     54 00 90 FD | 	jmp	#LR__1164
0e1a4                 | LR__1163
0e1a4     4C 4E 05 F1 | 	add	fp, #76
0e1a8     A7 12 02 FB | 	rdlong	arg01, fp
0e1ac     4C 4E 85 F1 | 	sub	fp, #76
0e1b0     01 14 06 F6 | 	mov	arg02, #1
0e1b4     EC 55 B1 FD | 	call	#__system___float_tointeger
0e1b8     24 4E 05 F1 | 	add	fp, #36
0e1bc     A7 FA 61 FC | 	wrlong	result1, fp
0e1c0     18 4E 85 F1 | 	sub	fp, #24
0e1c4     A7 20 02 FB | 	rdlong	local02, fp
0e1c8     10 23 02 F6 | 	mov	local03, local02
0e1cc     01 22 66 F0 | 	shl	local03, #1
0e1d0     10 23 02 F1 | 	add	local03, local02
0e1d4     03 22 66 F0 | 	shl	local03, #3
0e1d8     14 00 00 FF 
0e1dc     38 E5 05 F1 | 	add	objptr, ##10552
0e1e0     F2 22 02 F1 | 	add	local03, objptr
0e1e4     0C 4E 85 F1 | 	sub	fp, #12
0e1e8     05 22 06 F1 | 	add	local03, #5
0e1ec     11 FB 41 FC | 	wrbyte	result1, local03
0e1f0     14 00 00 FF 
0e1f4     38 E5 85 F1 | 	sub	objptr, ##10552
0e1f8                 | LR__1164
0e1f8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e1f8     50 4E 05 F1 | 	add	fp, #80
0e1fc     A7 12 02 FB | 	rdlong	arg01, fp
0e200     50 4E 85 F1 | 	sub	fp, #80
0e204     00 14 06 F6 | 	mov	arg02, #0
0e208     01 16 06 F6 | 	mov	arg03, #1
0e20c     00 55 B1 FD | 	call	#__system___float_cmp
0e210     00 FA 55 F2 | 	cmps	result1, #0 wc
0e214     24 00 90 CD |  if_b	jmp	#LR__1165
0e218     50 4E 05 F1 | 	add	fp, #80
0e21c     A7 12 02 FB | 	rdlong	arg01, fp
0e220     50 4E 85 F1 | 	sub	fp, #80
0e224     00 3D 22 FF 
0e228     00 14 06 F6 | 	mov	arg02, ##1148846080
0e22c     01 16 66 F6 | 	neg	arg03, #1
0e230     DC 54 B1 FD | 	call	#__system___float_cmp
0e234     01 FA 55 F2 | 	cmps	result1, #1 wc
0e238     44 00 90 CD |  if_b	jmp	#LR__1166
0e23c                 | LR__1165
0e23c     0C 4E 05 F1 | 	add	fp, #12
0e240     A7 20 02 FB | 	rdlong	local02, fp
0e244     10 23 02 F6 | 	mov	local03, local02
0e248     01 22 66 F0 | 	shl	local03, #1
0e24c     10 23 02 F1 | 	add	local03, local02
0e250     03 22 66 F0 | 	shl	local03, #3
0e254     14 00 00 FF 
0e258     38 E5 05 F1 | 	add	objptr, ##10552
0e25c     F2 22 02 F1 | 	add	local03, objptr
0e260     08 22 06 F1 | 	add	local03, #8
0e264     11 25 02 FB | 	rdlong	local04, local03
0e268     6C 4E 05 F1 | 	add	fp, #108
0e26c     A7 24 62 FC | 	wrlong	local04, fp
0e270     78 4E 85 F1 | 	sub	fp, #120
0e274     14 00 00 FF 
0e278     38 E5 85 F1 | 	sub	objptr, ##10552
0e27c     48 00 90 FD | 	jmp	#LR__1167
0e280                 | LR__1166
0e280     50 4E 05 F1 | 	add	fp, #80
0e284     A7 24 02 FB | 	rdlong	local04, fp
0e288     28 4E 05 F1 | 	add	fp, #40
0e28c     A7 24 62 FC | 	wrlong	local04, fp
0e290     6C 4E 85 F1 | 	sub	fp, #108
0e294     A7 20 02 FB | 	rdlong	local02, fp
0e298     10 23 02 F6 | 	mov	local03, local02
0e29c     01 22 66 F0 | 	shl	local03, #1
0e2a0     10 23 02 F1 | 	add	local03, local02
0e2a4     03 22 66 F0 | 	shl	local03, #3
0e2a8     14 00 00 FF 
0e2ac     38 E5 05 F1 | 	add	objptr, ##10552
0e2b0     F2 22 02 F1 | 	add	local03, objptr
0e2b4     0C 4E 85 F1 | 	sub	fp, #12
0e2b8     08 22 06 F1 | 	add	local03, #8
0e2bc     11 25 62 FC | 	wrlong	local04, local03
0e2c0     14 00 00 FF 
0e2c4     38 E5 85 F1 | 	sub	objptr, ##10552
0e2c8                 | LR__1167
0e2c8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e2c8     40 4E 05 F1 | 	add	fp, #64
0e2cc     A7 12 02 FB | 	rdlong	arg01, fp
0e2d0     40 4E 85 F1 | 	sub	fp, #64
0e2d4     00 14 06 F6 | 	mov	arg02, #0
0e2d8     01 16 06 F6 | 	mov	arg03, #1
0e2dc     30 54 B1 FD | 	call	#__system___float_cmp
0e2e0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e2e4     24 00 90 CD |  if_b	jmp	#LR__1168
0e2e8     40 4E 05 F1 | 	add	fp, #64
0e2ec     A7 12 02 FB | 	rdlong	arg01, fp
0e2f0     40 4E 85 F1 | 	sub	fp, #64
0e2f4     20 0E 23 FF 
0e2f8     00 14 06 F6 | 	mov	arg02, ##1176256512
0e2fc     01 16 66 F6 | 	neg	arg03, #1
0e300     0C 54 B1 FD | 	call	#__system___float_cmp
0e304     01 FA 55 F2 | 	cmps	result1, #1 wc
0e308     44 00 90 CD |  if_b	jmp	#LR__1169
0e30c                 | LR__1168
0e30c     0C 4E 05 F1 | 	add	fp, #12
0e310     A7 22 02 FB | 	rdlong	local03, fp
0e314     11 25 02 F6 | 	mov	local04, local03
0e318     01 24 66 F0 | 	shl	local04, #1
0e31c     11 25 02 F1 | 	add	local04, local03
0e320     03 24 66 F0 | 	shl	local04, #3
0e324     14 00 00 FF 
0e328     38 E5 05 F1 | 	add	objptr, ##10552
0e32c     F2 24 02 F1 | 	add	local04, objptr
0e330     06 24 06 F1 | 	add	local04, #6
0e334     12 25 E2 FA | 	rdword	local04, local04
0e338     1C 4E 05 F1 | 	add	fp, #28
0e33c     A7 24 62 FC | 	wrlong	local04, fp
0e340     28 4E 85 F1 | 	sub	fp, #40
0e344     14 00 00 FF 
0e348     38 E5 85 F1 | 	sub	objptr, ##10552
0e34c     54 00 90 FD | 	jmp	#LR__1170
0e350                 | LR__1169
0e350     40 4E 05 F1 | 	add	fp, #64
0e354     A7 12 02 FB | 	rdlong	arg01, fp
0e358     40 4E 85 F1 | 	sub	fp, #64
0e35c     01 14 06 F6 | 	mov	arg02, #1
0e360     40 54 B1 FD | 	call	#__system___float_tointeger
0e364     28 4E 05 F1 | 	add	fp, #40
0e368     A7 FA 61 FC | 	wrlong	result1, fp
0e36c     1C 4E 85 F1 | 	sub	fp, #28
0e370     A7 20 02 FB | 	rdlong	local02, fp
0e374     10 23 02 F6 | 	mov	local03, local02
0e378     01 22 66 F0 | 	shl	local03, #1
0e37c     10 23 02 F1 | 	add	local03, local02
0e380     03 22 66 F0 | 	shl	local03, #3
0e384     14 00 00 FF 
0e388     38 E5 05 F1 | 	add	objptr, ##10552
0e38c     F2 22 02 F1 | 	add	local03, objptr
0e390     0C 4E 85 F1 | 	sub	fp, #12
0e394     06 22 06 F1 | 	add	local03, #6
0e398     11 FB 51 FC | 	wrword	result1, local03
0e39c     14 00 00 FF 
0e3a0     38 E5 85 F1 | 	sub	objptr, ##10552
0e3a4                 | LR__1170
0e3a4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e3a4     54 4E 05 F1 | 	add	fp, #84
0e3a8     A7 12 02 FB | 	rdlong	arg01, fp
0e3ac     54 4E 85 F1 | 	sub	fp, #84
0e3b0     00 C0 5F FF 
0e3b4     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e3b8     01 16 06 F6 | 	mov	arg03, #1
0e3bc     50 53 B1 FD | 	call	#__system___float_cmp
0e3c0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e3c4     24 00 90 CD |  if_b	jmp	#LR__1171
0e3c8     54 4E 05 F1 | 	add	fp, #84
0e3cc     A7 12 02 FB | 	rdlong	arg01, fp
0e3d0     54 4E 85 F1 | 	sub	fp, #84
0e3d4     00 C0 1F FF 
0e3d8     00 14 06 F6 | 	mov	arg02, ##1065353216
0e3dc     01 16 66 F6 | 	neg	arg03, #1
0e3e0     2C 53 B1 FD | 	call	#__system___float_cmp
0e3e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e3e8     44 00 90 CD |  if_b	jmp	#LR__1172
0e3ec                 | LR__1171
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 20 02 FB | 	rdlong	local02, fp
0e3f4     10 23 02 F6 | 	mov	local03, local02
0e3f8     01 22 66 F0 | 	shl	local03, #1
0e3fc     10 23 02 F1 | 	add	local03, local02
0e400     03 22 66 F0 | 	shl	local03, #3
0e404     14 00 00 FF 
0e408     38 E5 05 F1 | 	add	objptr, ##10552
0e40c     F2 22 02 F1 | 	add	local03, objptr
0e410     10 22 06 F1 | 	add	local03, #16
0e414     11 25 02 FB | 	rdlong	local04, local03
0e418     64 4E 05 F1 | 	add	fp, #100
0e41c     A7 24 62 FC | 	wrlong	local04, fp
0e420     70 4E 85 F1 | 	sub	fp, #112
0e424     14 00 00 FF 
0e428     38 E5 85 F1 | 	sub	objptr, ##10552
0e42c     48 00 90 FD | 	jmp	#LR__1173
0e430                 | LR__1172
0e430     54 4E 05 F1 | 	add	fp, #84
0e434     A7 26 02 FB | 	rdlong	local05, fp
0e438     1C 4E 05 F1 | 	add	fp, #28
0e43c     A7 26 62 FC | 	wrlong	local05, fp
0e440     64 4E 85 F1 | 	sub	fp, #100
0e444     A7 20 02 FB | 	rdlong	local02, fp
0e448     10 23 02 F6 | 	mov	local03, local02
0e44c     01 22 66 F0 | 	shl	local03, #1
0e450     10 23 02 F1 | 	add	local03, local02
0e454     03 22 66 F0 | 	shl	local03, #3
0e458     14 00 00 FF 
0e45c     38 E5 05 F1 | 	add	objptr, ##10552
0e460     F2 22 02 F1 | 	add	local03, objptr
0e464     0C 4E 85 F1 | 	sub	fp, #12
0e468     10 22 06 F1 | 	add	local03, #16
0e46c     11 27 62 FC | 	wrlong	local05, local03
0e470     14 00 00 FF 
0e474     38 E5 85 F1 | 	sub	objptr, ##10552
0e478                 | LR__1173
0e478                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e478     58 4E 05 F1 | 	add	fp, #88
0e47c     A7 12 02 FB | 	rdlong	arg01, fp
0e480     58 4E 85 F1 | 	sub	fp, #88
0e484     00 14 06 F6 | 	mov	arg02, #0
0e488     01 16 06 F6 | 	mov	arg03, #1
0e48c     80 52 B1 FD | 	call	#__system___float_cmp
0e490     00 FA 55 F2 | 	cmps	result1, #0 wc
0e494     24 00 90 CD |  if_b	jmp	#LR__1174
0e498     58 4E 05 F1 | 	add	fp, #88
0e49c     A7 12 02 FB | 	rdlong	arg01, fp
0e4a0     58 4E 85 F1 | 	sub	fp, #88
0e4a4     80 BF 21 FF 
0e4a8     00 14 06 F6 | 	mov	arg02, ##1132396544
0e4ac     01 16 66 F6 | 	neg	arg03, #1
0e4b0     5C 52 B1 FD | 	call	#__system___float_cmp
0e4b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4b8     44 00 90 CD |  if_b	jmp	#LR__1175
0e4bc                 | LR__1174
0e4bc     0C 4E 05 F1 | 	add	fp, #12
0e4c0     A7 22 02 FB | 	rdlong	local03, fp
0e4c4     11 27 02 F6 | 	mov	local05, local03
0e4c8     01 26 66 F0 | 	shl	local05, #1
0e4cc     11 27 02 F1 | 	add	local05, local03
0e4d0     03 26 66 F0 | 	shl	local05, #3
0e4d4     14 00 00 FF 
0e4d8     38 E5 05 F1 | 	add	objptr, ##10552
0e4dc     F2 26 02 F1 | 	add	local05, objptr
0e4e0     14 26 06 F1 | 	add	local05, #20
0e4e4     13 25 E2 FA | 	rdword	local04, local05
0e4e8     20 4E 05 F1 | 	add	fp, #32
0e4ec     A7 24 62 FC | 	wrlong	local04, fp
0e4f0     2C 4E 85 F1 | 	sub	fp, #44
0e4f4     14 00 00 FF 
0e4f8     38 E5 85 F1 | 	sub	objptr, ##10552
0e4fc     54 00 90 FD | 	jmp	#LR__1176
0e500                 | LR__1175
0e500     58 4E 05 F1 | 	add	fp, #88
0e504     A7 12 02 FB | 	rdlong	arg01, fp
0e508     58 4E 85 F1 | 	sub	fp, #88
0e50c     01 14 06 F6 | 	mov	arg02, #1
0e510     90 52 B1 FD | 	call	#__system___float_tointeger
0e514     2C 4E 05 F1 | 	add	fp, #44
0e518     A7 FA 61 FC | 	wrlong	result1, fp
0e51c     20 4E 85 F1 | 	sub	fp, #32
0e520     A7 20 02 FB | 	rdlong	local02, fp
0e524     10 23 02 F6 | 	mov	local03, local02
0e528     01 22 66 F0 | 	shl	local03, #1
0e52c     10 23 02 F1 | 	add	local03, local02
0e530     03 22 66 F0 | 	shl	local03, #3
0e534     14 00 00 FF 
0e538     38 E5 05 F1 | 	add	objptr, ##10552
0e53c     F2 22 02 F1 | 	add	local03, objptr
0e540     0C 4E 85 F1 | 	sub	fp, #12
0e544     14 22 06 F1 | 	add	local03, #20
0e548     11 FB 51 FC | 	wrword	result1, local03
0e54c     14 00 00 FF 
0e550     38 E5 85 F1 | 	sub	objptr, ##10552
0e554                 | LR__1176
0e554     6C 4E 05 F1 | 	add	fp, #108
0e558     A7 14 02 FB | 	rdlong	arg02, fp
0e55c     6C 4E 85 F1 | 	sub	fp, #108
0e560     FC 16 20 FF 
0e564     54 12 06 F6 | 	mov	arg01, ##1076754516
0e568     1C 5D B1 FD | 	call	#__system____builtin_logbase
0e56c     FD 24 02 F6 | 	mov	local04, result1
0e570     1E 14 C6 F9 | 	decod	arg02, #30
0e574     FC 16 20 FF 
0e578     54 12 06 F6 | 	mov	arg01, ##1076754516
0e57c     08 5D B1 FD | 	call	#__system____builtin_logbase
0e580     FD 14 02 F6 | 	mov	arg02, result1
0e584     12 13 02 F6 | 	mov	arg01, local04
0e588     54 4F B1 FD | 	call	#__system___float_div
0e58c     FD 12 02 F6 | 	mov	arg01, result1
0e590     00 14 06 F6 | 	mov	arg02, #0
0e594     0C 52 B1 FD | 	call	#__system___float_tointeger
0e598     30 4E 05 F1 | 	add	fp, #48
0e59c     A7 FA 61 FC | 	wrlong	result1, fp
0e5a0     1E 24 C6 F9 | 	decod	local04, #30
0e5a4     FD 12 02 F6 | 	mov	arg01, result1
0e5a8     30 4E 85 F1 | 	sub	fp, #48
0e5ac     05 12 06 F1 | 	add	arg01, #5
0e5b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e5b4     1F 28 C6 C9 |  if_b	decod	local06, #31
0e5b8     00 28 06 36 |  if_ae	mov	local06, #0
0e5bc     18 49 B1 FD | 	call	#__system___float_fromuns
0e5c0     14 FB 61 F5 | 	xor	result1, local06
0e5c4     FD 14 02 F6 | 	mov	arg02, result1
0e5c8     12 13 02 F6 | 	mov	arg01, local04
0e5cc     F0 5B B1 FD | 	call	#__system____builtin_powf
0e5d0     FD 12 02 F6 | 	mov	arg01, result1
0e5d4     01 14 06 F6 | 	mov	arg02, #1
0e5d8     C8 51 B1 FD | 	call	#__system___float_tointeger
0e5dc     10 4E 05 F1 | 	add	fp, #16
0e5e0     A7 FA 61 FC | 	wrlong	result1, fp
0e5e4                 | ' skip=round(2^(lfreq+5))
0e5e4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e5e4     10 4E 85 F1 | 	sub	fp, #16
0e5e8     40 00 00 FF 
0e5ec     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e5f0     30 00 90 CD |  if_b	jmp	#LR__1177
0e5f4     10 4E 05 F1 | 	add	fp, #16
0e5f8     A7 1E 02 FB | 	rdlong	local01, fp
0e5fc     0F 25 52 F6 | 	abs	local04, local01 wc
0e600     0F 24 46 F0 | 	shr	local04, #15
0e604     12 25 82 F6 | 	negc	local04, local04
0e608     0C 4E 85 F1 | 	sub	fp, #12
0e60c     A7 24 62 FC | 	wrlong	local04, fp
0e610     0C 4E 05 F1 | 	add	fp, #12
0e614     40 00 80 FF 
0e618     A7 00 68 FC | 	wrlong	##32768, fp
0e61c     10 4E 85 F1 | 	sub	fp, #16
0e620     0C 00 90 FD | 	jmp	#LR__1178
0e624                 | LR__1177
0e624     04 4E 05 F1 | 	add	fp, #4
0e628     A7 02 68 FC | 	wrlong	#1, fp
0e62c     04 4E 85 F1 | 	sub	fp, #4
0e630                 | LR__1178
0e630     6C 4E 05 F1 | 	add	fp, #108
0e634     A7 14 02 FB | 	rdlong	arg02, fp
0e638     6C 4E 85 F1 | 	sub	fp, #108
0e63c     3E 2C 25 FF 
0e640     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e644     98 4E B1 FD | 	call	#__system___float_div
0e648     FD 24 02 F6 | 	mov	local04, result1
0e64c     04 4E 05 F1 | 	add	fp, #4
0e650     A7 12 02 FB | 	rdlong	arg01, fp
0e654     04 4E 85 F1 | 	sub	fp, #4
0e658     09 13 52 F6 | 	abs	arg01, arg01 wc
0e65c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e660     00 28 06 36 |  if_ae	mov	local06, #0
0e664     70 48 B1 FD | 	call	#__system___float_fromuns
0e668     14 FB 61 F5 | 	xor	result1, local06
0e66c     FD 1E 02 F6 | 	mov	local01, result1
0e670     1E 20 C6 F9 | 	decod	local02, #30
0e674     0D 12 06 F6 | 	mov	arg01, #13
0e678     30 4E 05 F1 | 	add	fp, #48
0e67c     A7 26 02 FB | 	rdlong	local05, fp
0e680     30 4E 85 F1 | 	sub	fp, #48
0e684     13 13 82 F1 | 	sub	arg01, local05
0e688     09 13 52 F6 | 	abs	arg01, arg01 wc
0e68c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e690     00 28 06 36 |  if_ae	mov	local06, #0
0e694     40 48 B1 FD | 	call	#__system___float_fromuns
0e698     14 FB 61 F5 | 	xor	result1, local06
0e69c     FD 14 02 F6 | 	mov	arg02, result1
0e6a0     10 13 02 F6 | 	mov	arg01, local02
0e6a4     18 5B B1 FD | 	call	#__system____builtin_powf
0e6a8     FD 14 02 F6 | 	mov	arg02, result1
0e6ac     0F 13 02 F6 | 	mov	arg01, local01
0e6b0     28 4C B1 FD | 	call	#__system___float_mul
0e6b4     FD 14 02 F6 | 	mov	arg02, result1
0e6b8     12 13 02 F6 | 	mov	arg01, local04
0e6bc     20 4E B1 FD | 	call	#__system___float_div
0e6c0     FD 12 02 F6 | 	mov	arg01, result1
0e6c4     01 14 06 F6 | 	mov	arg02, #1
0e6c8     D8 50 B1 FD | 	call	#__system___float_tointeger
0e6cc     34 4E 05 F1 | 	add	fp, #52
0e6d0     A7 FA 61 FC | 	wrlong	result1, fp
0e6d4     34 4E 05 F1 | 	add	fp, #52
0e6d8     A7 12 02 FB | 	rdlong	arg01, fp
0e6dc     10 4E 05 F1 | 	add	fp, #16
0e6e0     A7 14 02 FB | 	rdlong	arg02, fp
0e6e4     78 4E 85 F1 | 	sub	fp, #120
0e6e8     F4 4D B1 FD | 	call	#__system___float_div
0e6ec     FD 12 02 F6 | 	mov	arg01, result1
0e6f0     01 14 06 F6 | 	mov	arg02, #1
0e6f4     AC 50 B1 FD | 	call	#__system___float_tointeger
0e6f8     FD 24 02 F6 | 	mov	local04, result1
0e6fc     14 4E 05 F1 | 	add	fp, #20
0e700     A7 24 62 FC | 	wrlong	local04, fp
0e704     5C 4E 05 F1 | 	add	fp, #92
0e708     A7 14 02 FB | 	rdlong	arg02, fp
0e70c     70 4E 85 F1 | 	sub	fp, #112
0e710     00 00 23 FF 
0e714     00 12 06 F6 | 	mov	arg01, ##1174405120
0e718     C0 4B B1 FD | 	call	#__system___float_mul
0e71c     FD 12 02 F6 | 	mov	arg01, result1
0e720     01 14 06 F6 | 	mov	arg02, #1
0e724     7C 50 B1 FD | 	call	#__system___float_tointeger
0e728     0D 24 C6 F9 | 	decod	local04, #13
0e72c     FD 24 02 F1 | 	add	local04, result1
0e730     18 4E 05 F1 | 	add	fp, #24
0e734     A7 24 62 FC | 	wrlong	local04, fp
0e738     5C 4E 05 F1 | 	add	fp, #92
0e73c     A7 14 02 FB | 	rdlong	arg02, fp
0e740     74 4E 85 F1 | 	sub	fp, #116
0e744     00 3D 22 FF 
0e748     00 12 06 F6 | 	mov	arg01, ##1148846080
0e74c     8C 4B B1 FD | 	call	#__system___float_mul
0e750     FD 12 02 F6 | 	mov	arg01, result1
0e754     01 14 06 F6 | 	mov	arg02, #1
0e758     48 50 B1 FD | 	call	#__system___float_tointeger
0e75c     1C 4E 05 F1 | 	add	fp, #28
0e760     A7 FA 61 FC | 	wrlong	result1, fp
0e764     37 00 00 FF 
0e768     10 E4 05 F1 | 	add	objptr, ##28176
0e76c     F2 24 02 FB | 	rdlong	local04, objptr
0e770     37 00 00 FF 
0e774     10 E4 85 F1 | 	sub	objptr, ##28176
0e778     10 4E 85 F1 | 	sub	fp, #16
0e77c     A7 20 02 FB | 	rdlong	local02, fp
0e780     06 20 66 F0 | 	shl	local02, #6
0e784     10 25 02 F1 | 	add	local04, local02
0e788     04 4E 85 F1 | 	sub	fp, #4
0e78c     A7 24 62 FC | 	wrlong	local04, fp
0e790                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e790                 | '  
0e790                 | '   
0e790                 | ' 'print period,skip
0e790                 | ' speed=round(speed_coeff/slen)
0e790                 | ' ipan=8192+round(8192*pan)
0e790                 | ' ivol=round(1000.0*vol)
0e790                 | ' base2=base+64*channel
0e790                 | ' 'skip=round(freq*3.9827219) 
0e790                 | ' if wave <32 then 
0e790     18 4E 05 F1 | 	add	fp, #24
0e794     A7 24 02 FB | 	rdlong	local04, fp
0e798     20 4E 85 F1 | 	sub	fp, #32
0e79c     20 24 56 F2 | 	cmps	local04, #32 wc
0e7a0     2C 00 90 3D |  if_ae	jmp	#LR__1179
0e7a4     08 4E 05 F1 | 	add	fp, #8
0e7a8     A7 12 02 FB | 	rdlong	arg01, fp
0e7ac     08 12 06 F1 | 	add	arg01, #8
0e7b0     18 4E 05 F1 | 	add	fp, #24
0e7b4     A7 14 02 FB | 	rdlong	arg02, fp
0e7b8     20 4E 85 F1 | 	sub	fp, #32
0e7bc     0B 14 66 F0 | 	shl	arg02, #11
0e7c0     00 00 60 FF 
0e7c4     00 14 06 F1 | 	add	arg02, ##-1073741824
0e7c8     09 15 62 FC | 	wrlong	arg02, arg01
0e7cc     18 00 90 FD | 	jmp	#LR__1180
0e7d0                 | LR__1179
0e7d0     08 4E 05 F1 | 	add	fp, #8
0e7d4     A7 12 02 FB | 	rdlong	arg01, fp
0e7d8     08 4E 85 F1 | 	sub	fp, #8
0e7dc     08 12 06 F1 | 	add	arg01, #8
0e7e0     00 00 E4 FF 
0e7e4     09 01 68 FC | 	wrlong	##-939524096, arg01
0e7e8                 | LR__1180
0e7e8     08 4E 05 F1 | 	add	fp, #8
0e7ec     A7 12 02 FB | 	rdlong	arg01, fp
0e7f0     10 12 06 F1 | 	add	arg01, #16
0e7f4     04 00 80 FF 
0e7f8     09 01 68 FC | 	wrlong	##2048, arg01
0e7fc     A7 12 02 FB | 	rdlong	arg01, fp
0e800     0C 12 06 F1 | 	add	arg01, #12
0e804     09 01 68 FC | 	wrlong	#0, arg01
0e808     A7 12 02 FB | 	rdlong	arg01, fp
0e80c     14 12 06 F1 | 	add	arg01, #20
0e810     14 4E 05 F1 | 	add	fp, #20
0e814     A7 14 02 FB | 	rdlong	arg02, fp
0e818     09 15 52 FC | 	wrword	arg02, arg01
0e81c     14 4E 85 F1 | 	sub	fp, #20
0e820     A7 12 02 FB | 	rdlong	arg01, fp
0e824     16 12 06 F1 | 	add	arg01, #22
0e828     10 4E 05 F1 | 	add	fp, #16
0e82c     A7 14 02 FB | 	rdlong	arg02, fp
0e830     09 15 52 FC | 	wrword	arg02, arg01
0e834                 | ' lpoke base2+16,2048
0e834                 | ' lpoke base2+12,0
0e834                 | ' dpoke base2+20,ivol 
0e834                 | ' dpoke base2+22,ipan 
0e834                 | ' if wave<32 then
0e834     08 4E 05 F1 | 	add	fp, #8
0e838     A7 24 02 FB | 	rdlong	local04, fp
0e83c     20 4E 85 F1 | 	sub	fp, #32
0e840     20 24 56 F2 | 	cmps	local04, #32 wc
0e844     38 00 90 3D |  if_ae	jmp	#LR__1181
0e848     08 4E 05 F1 | 	add	fp, #8
0e84c     A7 12 02 FB | 	rdlong	arg01, fp
0e850     18 12 06 F1 | 	add	arg01, #24
0e854     2C 4E 05 F1 | 	add	fp, #44
0e858     A7 14 02 FB | 	rdlong	arg02, fp
0e85c     09 15 52 FC | 	wrword	arg02, arg01
0e860     2C 4E 85 F1 | 	sub	fp, #44
0e864     A7 12 02 FB | 	rdlong	arg01, fp
0e868     1A 12 06 F1 | 	add	arg01, #26
0e86c     08 4E 05 F1 | 	add	fp, #8
0e870     A7 14 02 FB | 	rdlong	arg02, fp
0e874     10 4E 85 F1 | 	sub	fp, #16
0e878     09 15 52 FC | 	wrword	arg02, arg01
0e87c     48 00 90 FD | 	jmp	#LR__1182
0e880                 | LR__1181
0e880     08 4E 05 F1 | 	add	fp, #8
0e884     A7 24 02 FB | 	rdlong	local04, fp
0e888     18 24 06 F1 | 	add	local04, #24
0e88c     64 4E 05 F1 | 	add	fp, #100
0e890     A7 14 02 FB | 	rdlong	arg02, fp
0e894     6C 4E 85 F1 | 	sub	fp, #108
0e898     3E 2C 25 FF 
0e89c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e8a0     3C 4C B1 FD | 	call	#__system___float_div
0e8a4     FD 12 02 F6 | 	mov	arg01, result1
0e8a8     01 14 06 F6 | 	mov	arg02, #1
0e8ac     F4 4E B1 FD | 	call	#__system___float_tointeger
0e8b0     12 FB 51 FC | 	wrword	result1, local04
0e8b4     08 4E 05 F1 | 	add	fp, #8
0e8b8     A7 12 02 FB | 	rdlong	arg01, fp
0e8bc     08 4E 85 F1 | 	sub	fp, #8
0e8c0     1A 12 06 F1 | 	add	arg01, #26
0e8c4     09 01 5A FC | 	wrword	#256, arg01
0e8c8                 | LR__1182
0e8c8     08 4E 05 F1 | 	add	fp, #8
0e8cc     A7 12 02 FB | 	rdlong	arg01, fp
0e8d0     1C 12 06 F1 | 	add	arg01, #28
0e8d4     09 01 68 FC | 	wrlong	#0, arg01
0e8d8     A7 12 02 FB | 	rdlong	arg01, fp
0e8dc     20 12 06 F1 | 	add	arg01, #32
0e8e0     09 01 68 FC | 	wrlong	#0, arg01
0e8e4                 | ' lpoke base2+28,$0000_0000
0e8e4                 | ' lpoke base2+32,0 
0e8e4                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e8e4     1C 4E 05 F1 | 	add	fp, #28
0e8e8     A7 24 02 FB | 	rdlong	local04, fp
0e8ec     24 4E 85 F1 | 	sub	fp, #36
0e8f0     08 24 0E F2 | 	cmp	local04, #8 wz
0e8f4     18 00 90 5D |  if_ne	jmp	#LR__1183
0e8f8     08 4E 05 F1 | 	add	fp, #8
0e8fc     A7 12 02 FB | 	rdlong	arg01, fp
0e900     08 4E 85 F1 | 	sub	fp, #8
0e904     24 12 06 F1 | 	add	arg01, #36
0e908     09 01 68 FC | 	wrlong	#0, arg01
0e90c     34 00 90 FD | 	jmp	#LR__1184
0e910                 | LR__1183
0e910     08 4E 05 F1 | 	add	fp, #8
0e914     A7 12 02 FB | 	rdlong	arg01, fp
0e918     24 12 06 F1 | 	add	arg01, #36
0e91c     1C 4E 05 F1 | 	add	fp, #28
0e920     A7 14 02 FB | 	rdlong	arg02, fp
0e924     24 4E 85 F1 | 	sub	fp, #36
0e928     09 14 66 F0 | 	shl	arg02, #9
0e92c     0C 00 00 FF 
0e930     D8 E4 05 F1 | 	add	objptr, ##6360
0e934     F2 14 02 F1 | 	add	arg02, objptr
0e938     0C 00 00 FF 
0e93c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e940     09 15 62 FC | 	wrlong	arg02, arg01
0e944                 | LR__1184
0e944     08 4E 05 F1 | 	add	fp, #8
0e948     A7 12 02 FB | 	rdlong	arg01, fp
0e94c     28 12 06 F1 | 	add	arg01, #40
0e950     0C 4E 05 F1 | 	add	fp, #12
0e954     A7 14 02 FB | 	rdlong	arg02, fp
0e958     09 15 62 FC | 	wrlong	arg02, arg01
0e95c     0C 4E 85 F1 | 	sub	fp, #12
0e960     A7 12 02 FB | 	rdlong	arg01, fp
0e964     2C 12 06 F1 | 	add	arg01, #44
0e968     24 4E 05 F1 | 	add	fp, #36
0e96c     A7 14 02 FB | 	rdlong	arg02, fp
0e970     09 15 62 FC | 	wrlong	arg02, arg01
0e974                 | ' lpoke base2+40,speed' speed
0e974                 | ' lpoke base2+44,sus 'len
0e974                 | ' 
0e974                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0e974     04 4E 85 F1 | 	sub	fp, #4
0e978     A7 24 02 FB | 	rdlong	local04, fp
0e97c     28 4E 85 F1 | 	sub	fp, #40
0e980     01 24 56 F2 | 	cmps	local04, #1 wc
0e984     28 4E 05 31 |  if_ae	add	fp, #40
0e988     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0e98c     28 4E 85 31 |  if_ae	sub	fp, #40
0e990     88 20 B1 3D |  if_ae	call	#__system___waitms
0e994     A7 F0 03 F6 | 	mov	ptra, fp
0e998     B2 00 A0 FD | 	call	#popregs_
0e99c                 | _do_play_ret
0e99c     2D 00 64 FD | 	ret
0e9a0                 | 
0e9a0                 | ' 
0e9a0                 | ' sub do_changevol
0e9a0                 | _do_changevol
0e9a0     00 4A 05 F6 | 	mov	COUNT_, #0
0e9a4     A8 00 A0 FD | 	call	#pushregs_
0e9a8     14 F0 07 F1 | 	add	ptra, #20
0e9ac     F4 CF BF FD | 	call	#_pop
0e9b0     FF 14 02 F6 | 	mov	arg02, result3
0e9b4     A7 FA 61 FC | 	wrlong	result1, fp
0e9b8     04 4E 05 F1 | 	add	fp, #4
0e9bc     A7 FC 61 FC | 	wrlong	result2, fp
0e9c0     04 4E 05 F1 | 	add	fp, #4
0e9c4     A7 14 62 FC | 	wrlong	arg02, fp
0e9c8     08 4E 85 F1 | 	sub	fp, #8
0e9cc     A7 12 02 F6 | 	mov	arg01, fp
0e9d0     50 71 B0 FD | 	call	#_converttofloat
0e9d4     FD 12 02 F6 | 	mov	arg01, result1
0e9d8     00 3D 22 FF 
0e9dc     00 14 06 F6 | 	mov	arg02, ##1148846080
0e9e0     F8 48 B1 FD | 	call	#__system___float_mul
0e9e4     FD 12 02 F6 | 	mov	arg01, result1
0e9e8     01 14 06 F6 | 	mov	arg02, #1
0e9ec     B4 4D B1 FD | 	call	#__system___float_tointeger
0e9f0     FD 14 52 F6 | 	abs	arg02, result1 wc
0e9f4     0D 14 46 F7 | 	zerox	arg02, #13
0e9f8     0A 15 82 F6 | 	negc	arg02, arg02
0e9fc     10 4E 05 F1 | 	add	fp, #16
0ea00     A7 14 62 FC | 	wrlong	arg02, fp
0ea04     10 4E 85 F1 | 	sub	fp, #16
0ea08     98 CF BF FD | 	call	#_pop
0ea0c     FF 14 02 F6 | 	mov	arg02, result3
0ea10     A7 FA 61 FC | 	wrlong	result1, fp
0ea14     04 4E 05 F1 | 	add	fp, #4
0ea18     A7 FC 61 FC | 	wrlong	result2, fp
0ea1c     04 4E 05 F1 | 	add	fp, #4
0ea20     A7 14 62 FC | 	wrlong	arg02, fp
0ea24     08 4E 85 F1 | 	sub	fp, #8
0ea28     A7 12 02 F6 | 	mov	arg01, fp
0ea2c     38 70 B0 FD | 	call	#_converttoint
0ea30     FD 14 52 F6 | 	abs	arg02, result1 wc
0ea34     07 14 06 F5 | 	and	arg02, #7
0ea38     0A 15 82 F6 | 	negc	arg02, arg02
0ea3c     0C 4E 05 F1 | 	add	fp, #12
0ea40     A7 14 62 FC | 	wrlong	arg02, fp
0ea44     37 00 00 FF 
0ea48     10 E4 05 F1 | 	add	objptr, ##28176
0ea4c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea50     37 00 00 FF 
0ea54     10 E4 85 F1 | 	sub	objptr, ##28176
0ea58     06 14 66 F0 | 	shl	arg02, #6
0ea5c     0A 13 02 F1 | 	add	arg01, arg02
0ea60     14 12 06 F1 | 	add	arg01, #20
0ea64     04 4E 05 F1 | 	add	fp, #4
0ea68     A7 14 02 FB | 	rdlong	arg02, fp
0ea6c     10 4E 85 F1 | 	sub	fp, #16
0ea70     09 15 52 FC | 	wrword	arg02, arg01
0ea74     A7 F0 03 F6 | 	mov	ptra, fp
0ea78     B2 00 A0 FD | 	call	#popregs_
0ea7c                 | _do_changevol_ret
0ea7c     2D 00 64 FD | 	ret
0ea80                 | 
0ea80                 | ' 
0ea80                 | ' sub do_changepan
0ea80                 | _do_changepan
0ea80     01 4A 05 F6 | 	mov	COUNT_, #1
0ea84     A8 00 A0 FD | 	call	#pushregs_
0ea88     14 F0 07 F1 | 	add	ptra, #20
0ea8c     14 CF BF FD | 	call	#_pop
0ea90     A7 FA 61 FC | 	wrlong	result1, fp
0ea94     04 4E 05 F1 | 	add	fp, #4
0ea98     A7 FC 61 FC | 	wrlong	result2, fp
0ea9c     04 4E 05 F1 | 	add	fp, #4
0eaa0     A7 FE 61 FC | 	wrlong	result3, fp
0eaa4     08 4E 85 F1 | 	sub	fp, #8
0eaa8     00 00 23 FF 
0eaac     00 1E 06 F6 | 	mov	local01, ##1174405120
0eab0     A7 12 02 F6 | 	mov	arg01, fp
0eab4     6C 70 B0 FD | 	call	#_converttofloat
0eab8     FD 14 02 F6 | 	mov	arg02, result1
0eabc     0F 13 02 F6 | 	mov	arg01, local01
0eac0     18 48 B1 FD | 	call	#__system___float_mul
0eac4     FD 12 02 F6 | 	mov	arg01, result1
0eac8     01 14 06 F6 | 	mov	arg02, #1
0eacc     D4 4C B1 FD | 	call	#__system___float_tointeger
0ead0     0D 1E C6 F9 | 	decod	local01, #13
0ead4     FD 1E 02 F1 | 	add	local01, result1
0ead8     10 4E 05 F1 | 	add	fp, #16
0eadc     A7 1E 62 FC | 	wrlong	local01, fp
0eae0                 | ' t1=pop()
0eae0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0eae0                 | ' if pan<0 then pan=0
0eae0     10 4E 85 F1 | 	sub	fp, #16
0eae4     00 1E 56 F2 | 	cmps	local01, #0 wc
0eae8     10 4E 05 C1 |  if_b	add	fp, #16
0eaec     A7 00 68 CC |  if_b	wrlong	#0, fp
0eaf0     10 4E 85 C1 |  if_b	sub	fp, #16
0eaf4                 | ' if pan>16384 then pan=16384
0eaf4     10 4E 05 F1 | 	add	fp, #16
0eaf8     A7 1E 02 FB | 	rdlong	local01, fp
0eafc     10 4E 85 F1 | 	sub	fp, #16
0eb00     20 00 00 FF 
0eb04     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0eb08     10 4E 05 31 |  if_ae	add	fp, #16
0eb0c     20 00 80 3F 
0eb10     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0eb14     10 4E 85 31 |  if_ae	sub	fp, #16
0eb18     88 CE BF FD | 	call	#_pop
0eb1c     FF 1E 02 F6 | 	mov	local01, result3
0eb20     A7 FA 61 FC | 	wrlong	result1, fp
0eb24     04 4E 05 F1 | 	add	fp, #4
0eb28     A7 FC 61 FC | 	wrlong	result2, fp
0eb2c     04 4E 05 F1 | 	add	fp, #4
0eb30     A7 1E 62 FC | 	wrlong	local01, fp
0eb34     08 4E 85 F1 | 	sub	fp, #8
0eb38     A7 12 02 F6 | 	mov	arg01, fp
0eb3c     28 6F B0 FD | 	call	#_converttoint
0eb40     FD 1E 52 F6 | 	abs	local01, result1 wc
0eb44     07 1E 06 F5 | 	and	local01, #7
0eb48     0F 1F 82 F6 | 	negc	local01, local01
0eb4c     0C 4E 05 F1 | 	add	fp, #12
0eb50     A7 1E 62 FC | 	wrlong	local01, fp
0eb54     37 00 00 FF 
0eb58     10 E4 05 F1 | 	add	objptr, ##28176
0eb5c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb60     37 00 00 FF 
0eb64     10 E4 85 F1 | 	sub	objptr, ##28176
0eb68     06 1E 66 F0 | 	shl	local01, #6
0eb6c     0F 13 02 F1 | 	add	arg01, local01
0eb70     16 12 06 F1 | 	add	arg01, #22
0eb74     04 4E 05 F1 | 	add	fp, #4
0eb78     A7 14 02 FB | 	rdlong	arg02, fp
0eb7c     10 4E 85 F1 | 	sub	fp, #16
0eb80     09 15 52 FC | 	wrword	arg02, arg01
0eb84     A7 F0 03 F6 | 	mov	ptra, fp
0eb88     B2 00 A0 FD | 	call	#popregs_
0eb8c                 | _do_changepan_ret
0eb8c     2D 00 64 FD | 	ret
0eb90                 | 
0eb90                 | ' 
0eb90                 | ' sub do_changefreq
0eb90                 | _do_changefreq
0eb90     04 4A 05 F6 | 	mov	COUNT_, #4
0eb94     A8 00 A0 FD | 	call	#pushregs_
0eb98     28 F0 07 F1 | 	add	ptra, #40
0eb9c     04 CE BF FD | 	call	#_pop
0eba0     FF 14 02 F6 | 	mov	arg02, result3
0eba4     A7 FA 61 FC | 	wrlong	result1, fp
0eba8     04 4E 05 F1 | 	add	fp, #4
0ebac     A7 FC 61 FC | 	wrlong	result2, fp
0ebb0     04 4E 05 F1 | 	add	fp, #4
0ebb4     A7 14 62 FC | 	wrlong	arg02, fp
0ebb8     08 4E 85 F1 | 	sub	fp, #8
0ebbc     A7 12 02 F6 | 	mov	arg01, fp
0ebc0     60 6F B0 FD | 	call	#_converttofloat
0ebc4     24 4E 05 F1 | 	add	fp, #36
0ebc8     A7 FA 61 FC | 	wrlong	result1, fp
0ebcc     24 4E 85 F1 | 	sub	fp, #36
0ebd0     FD 14 02 F6 | 	mov	arg02, result1
0ebd4     FC 16 20 FF 
0ebd8     54 12 06 F6 | 	mov	arg01, ##1076754516
0ebdc     A8 56 B1 FD | 	call	#__system____builtin_logbase
0ebe0     FD 1E 02 F6 | 	mov	local01, result1
0ebe4     1E 14 C6 F9 | 	decod	arg02, #30
0ebe8     FC 16 20 FF 
0ebec     54 12 06 F6 | 	mov	arg01, ##1076754516
0ebf0     94 56 B1 FD | 	call	#__system____builtin_logbase
0ebf4     FD 14 02 F6 | 	mov	arg02, result1
0ebf8     0F 13 02 F6 | 	mov	arg01, local01
0ebfc     E0 48 B1 FD | 	call	#__system___float_div
0ec00     FD 12 02 F6 | 	mov	arg01, result1
0ec04     00 14 06 F6 | 	mov	arg02, #0
0ec08     98 4B B1 FD | 	call	#__system___float_tointeger
0ec0c     10 4E 05 F1 | 	add	fp, #16
0ec10     A7 FA 61 FC | 	wrlong	result1, fp
0ec14     1E 1E C6 F9 | 	decod	local01, #30
0ec18     FD 12 02 F6 | 	mov	arg01, result1
0ec1c     10 4E 85 F1 | 	sub	fp, #16
0ec20     05 12 06 F1 | 	add	arg01, #5
0ec24     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec28     1F 20 C6 C9 |  if_b	decod	local02, #31
0ec2c     00 20 06 36 |  if_ae	mov	local02, #0
0ec30     A4 42 B1 FD | 	call	#__system___float_fromuns
0ec34     10 FB 61 F5 | 	xor	result1, local02
0ec38     FD 14 02 F6 | 	mov	arg02, result1
0ec3c     0F 13 02 F6 | 	mov	arg01, local01
0ec40     7C 55 B1 FD | 	call	#__system____builtin_powf
0ec44     FD 12 02 F6 | 	mov	arg01, result1
0ec48     01 14 06 F6 | 	mov	arg02, #1
0ec4c     54 4B B1 FD | 	call	#__system___float_tointeger
0ec50     14 4E 05 F1 | 	add	fp, #20
0ec54     A7 FA 61 FC | 	wrlong	result1, fp
0ec58                 | ' skip=round(2^(lfreq+5))
0ec58                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ec58     14 4E 85 F1 | 	sub	fp, #20
0ec5c     40 00 00 FF 
0ec60     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ec64     30 00 90 CD |  if_b	jmp	#LR__1190
0ec68     14 4E 05 F1 | 	add	fp, #20
0ec6c     A7 1E 02 FB | 	rdlong	local01, fp
0ec70     0F 1F 52 F6 | 	abs	local01, local01 wc
0ec74     0F 1E 46 F0 | 	shr	local01, #15
0ec78     0F 1F 82 F6 | 	negc	local01, local01
0ec7c     04 4E 05 F1 | 	add	fp, #4
0ec80     A7 1E 62 FC | 	wrlong	local01, fp
0ec84     04 4E 85 F1 | 	sub	fp, #4
0ec88     40 00 80 FF 
0ec8c     A7 00 68 FC | 	wrlong	##32768, fp
0ec90     14 4E 85 F1 | 	sub	fp, #20
0ec94     0C 00 90 FD | 	jmp	#LR__1191
0ec98                 | LR__1190
0ec98     18 4E 05 F1 | 	add	fp, #24
0ec9c     A7 02 68 FC | 	wrlong	#1, fp
0eca0     18 4E 85 F1 | 	sub	fp, #24
0eca4                 | LR__1191
0eca4     24 4E 05 F1 | 	add	fp, #36
0eca8     A7 14 02 FB | 	rdlong	arg02, fp
0ecac     24 4E 85 F1 | 	sub	fp, #36
0ecb0     3E 2C 25 FF 
0ecb4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ecb8     24 48 B1 FD | 	call	#__system___float_div
0ecbc     FD 1E 02 F6 | 	mov	local01, result1
0ecc0     18 4E 05 F1 | 	add	fp, #24
0ecc4     A7 12 02 FB | 	rdlong	arg01, fp
0ecc8     18 4E 85 F1 | 	sub	fp, #24
0eccc     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecd0     1F 20 C6 C9 |  if_b	decod	local02, #31
0ecd4     00 20 06 36 |  if_ae	mov	local02, #0
0ecd8     FC 41 B1 FD | 	call	#__system___float_fromuns
0ecdc     10 FB 61 F5 | 	xor	result1, local02
0ece0     FD 22 02 F6 | 	mov	local03, result1
0ece4     1E 24 C6 F9 | 	decod	local04, #30
0ece8     0D 12 06 F6 | 	mov	arg01, #13
0ecec     10 4E 05 F1 | 	add	fp, #16
0ecf0     A7 14 02 FB | 	rdlong	arg02, fp
0ecf4     10 4E 85 F1 | 	sub	fp, #16
0ecf8     0A 13 82 F1 | 	sub	arg01, arg02
0ecfc     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed00     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed04     00 20 06 36 |  if_ae	mov	local02, #0
0ed08     CC 41 B1 FD | 	call	#__system___float_fromuns
0ed0c     10 FB 61 F5 | 	xor	result1, local02
0ed10     FD 14 02 F6 | 	mov	arg02, result1
0ed14     12 13 02 F6 | 	mov	arg01, local04
0ed18     A4 54 B1 FD | 	call	#__system____builtin_powf
0ed1c     FD 14 02 F6 | 	mov	arg02, result1
0ed20     11 13 02 F6 | 	mov	arg01, local03
0ed24     B4 45 B1 FD | 	call	#__system___float_mul
0ed28     FD 14 02 F6 | 	mov	arg02, result1
0ed2c     0F 13 02 F6 | 	mov	arg01, local01
0ed30     AC 47 B1 FD | 	call	#__system___float_div
0ed34     FD 12 02 F6 | 	mov	arg01, result1
0ed38     01 14 06 F6 | 	mov	arg02, #1
0ed3c     64 4A B1 FD | 	call	#__system___float_tointeger
0ed40     FD 1E 02 F6 | 	mov	local01, result1
0ed44     1C 4E 05 F1 | 	add	fp, #28
0ed48     A7 1E 62 FC | 	wrlong	local01, fp
0ed4c     1C 4E 85 F1 | 	sub	fp, #28
0ed50     50 CC BF FD | 	call	#_pop
0ed54     FF 24 02 F6 | 	mov	local04, result3
0ed58     A7 FA 61 FC | 	wrlong	result1, fp
0ed5c     04 4E 05 F1 | 	add	fp, #4
0ed60     A7 FC 61 FC | 	wrlong	result2, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 24 62 FC | 	wrlong	local04, fp
0ed6c     08 4E 85 F1 | 	sub	fp, #8
0ed70     A7 12 02 F6 | 	mov	arg01, fp
0ed74     F0 6C B0 FD | 	call	#_converttoint
0ed78     FD 22 52 F6 | 	abs	local03, result1 wc
0ed7c     07 22 06 F5 | 	and	local03, #7
0ed80     11 23 82 F6 | 	negc	local03, local03
0ed84     0C 4E 05 F1 | 	add	fp, #12
0ed88     A7 22 62 FC | 	wrlong	local03, fp
0ed8c     08 4E 05 F1 | 	add	fp, #8
0ed90     A7 14 02 FB | 	rdlong	arg02, fp
0ed94     10 14 66 F0 | 	shl	arg02, #16
0ed98     08 4E 05 F1 | 	add	fp, #8
0ed9c     A7 24 02 FB | 	rdlong	local04, fp
0eda0     12 15 02 F1 | 	add	arg02, local04
0eda4     04 4E 05 F1 | 	add	fp, #4
0eda8     A7 14 62 FC | 	wrlong	arg02, fp
0edac     37 00 00 FF 
0edb0     10 E4 05 F1 | 	add	objptr, ##28176
0edb4     F2 12 02 FB | 	rdlong	arg01, objptr
0edb8     37 00 00 FF 
0edbc     10 E4 85 F1 | 	sub	objptr, ##28176
0edc0     14 4E 85 F1 | 	sub	fp, #20
0edc4     A7 24 02 FB | 	rdlong	local04, fp
0edc8     06 24 66 F0 | 	shl	local04, #6
0edcc     12 13 02 F1 | 	add	arg01, local04
0edd0     18 12 06 F1 | 	add	arg01, #24
0edd4     0C 4E 85 F1 | 	sub	fp, #12
0edd8     09 15 62 FC | 	wrlong	arg02, arg01
0eddc     A7 F0 03 F6 | 	mov	ptra, fp
0ede0     B2 00 A0 FD | 	call	#popregs_
0ede4                 | _do_changefreq_ret
0ede4     2D 00 64 FD | 	ret
0ede8                 | 
0ede8                 | ' 
0ede8                 | ' sub do_changewav
0ede8                 | _do_changewav
0ede8     00 4A 05 F6 | 	mov	COUNT_, #0
0edec     A8 00 A0 FD | 	call	#pushregs_
0edf0     14 F0 07 F1 | 	add	ptra, #20
0edf4     AC CB BF FD | 	call	#_pop
0edf8     FF 14 02 F6 | 	mov	arg02, result3
0edfc     A7 FA 61 FC | 	wrlong	result1, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 FC 61 FC | 	wrlong	result2, fp
0ee08     04 4E 05 F1 | 	add	fp, #4
0ee0c     A7 14 62 FC | 	wrlong	arg02, fp
0ee10     08 4E 85 F1 | 	sub	fp, #8
0ee14     A7 12 02 F6 | 	mov	arg01, fp
0ee18     4C 6C B0 FD | 	call	#_converttoint
0ee1c     10 4E 05 F1 | 	add	fp, #16
0ee20     A7 FA 61 FC | 	wrlong	result1, fp
0ee24                 | ' t1=pop()
0ee24                 | ' wave=converttoint(t1)
0ee24                 | ' if wave<0 then wave=0
0ee24     FD 14 02 F6 | 	mov	arg02, result1
0ee28     10 4E 85 F1 | 	sub	fp, #16
0ee2c     00 14 56 F2 | 	cmps	arg02, #0 wc
0ee30     10 4E 05 C1 |  if_b	add	fp, #16
0ee34     A7 00 68 CC |  if_b	wrlong	#0, fp
0ee38     10 4E 85 C1 |  if_b	sub	fp, #16
0ee3c     64 CB BF FD | 	call	#_pop
0ee40     FF 14 02 F6 | 	mov	arg02, result3
0ee44     A7 FA 61 FC | 	wrlong	result1, fp
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 FC 61 FC | 	wrlong	result2, fp
0ee50     04 4E 05 F1 | 	add	fp, #4
0ee54     A7 14 62 FC | 	wrlong	arg02, fp
0ee58     08 4E 85 F1 | 	sub	fp, #8
0ee5c     A7 12 02 F6 | 	mov	arg01, fp
0ee60     04 6C B0 FD | 	call	#_converttoint
0ee64     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee68     07 14 06 F5 | 	and	arg02, #7
0ee6c     0A 15 82 F6 | 	negc	arg02, arg02
0ee70     0C 4E 05 F1 | 	add	fp, #12
0ee74     A7 14 62 FC | 	wrlong	arg02, fp
0ee78                 | ' if wave <32 then 
0ee78     04 4E 05 F1 | 	add	fp, #4
0ee7c     A7 14 02 FB | 	rdlong	arg02, fp
0ee80     10 4E 85 F1 | 	sub	fp, #16
0ee84     20 14 56 F2 | 	cmps	arg02, #32 wc
0ee88     48 00 90 3D |  if_ae	jmp	#LR__1200
0ee8c     37 00 00 FF 
0ee90     10 E4 05 F1 | 	add	objptr, ##28176
0ee94     F2 12 02 FB | 	rdlong	arg01, objptr
0ee98     37 00 00 FF 
0ee9c     10 E4 85 F1 | 	sub	objptr, ##28176
0eea0     0C 4E 05 F1 | 	add	fp, #12
0eea4     A7 14 02 FB | 	rdlong	arg02, fp
0eea8     06 14 66 F0 | 	shl	arg02, #6
0eeac     0A 13 02 F1 | 	add	arg01, arg02
0eeb0     08 12 06 F1 | 	add	arg01, #8
0eeb4     04 4E 05 F1 | 	add	fp, #4
0eeb8     A7 14 02 FB | 	rdlong	arg02, fp
0eebc     10 4E 85 F1 | 	sub	fp, #16
0eec0     0B 14 66 F0 | 	shl	arg02, #11
0eec4     00 00 60 FF 
0eec8     00 14 06 F1 | 	add	arg02, ##-1073741824
0eecc     09 15 62 FC | 	wrlong	arg02, arg01
0eed0     34 00 90 FD | 	jmp	#LR__1201
0eed4                 | LR__1200
0eed4     37 00 00 FF 
0eed8     10 E4 05 F1 | 	add	objptr, ##28176
0eedc     F2 12 02 FB | 	rdlong	arg01, objptr
0eee0     37 00 00 FF 
0eee4     10 E4 85 F1 | 	sub	objptr, ##28176
0eee8     0C 4E 05 F1 | 	add	fp, #12
0eeec     A7 14 02 FB | 	rdlong	arg02, fp
0eef0     0C 4E 85 F1 | 	sub	fp, #12
0eef4     06 14 66 F0 | 	shl	arg02, #6
0eef8     0A 13 02 F1 | 	add	arg01, arg02
0eefc     08 12 06 F1 | 	add	arg01, #8
0ef00     00 00 E4 FF 
0ef04     09 01 68 FC | 	wrlong	##-939524096, arg01
0ef08                 | LR__1201
0ef08     A7 F0 03 F6 | 	mov	ptra, fp
0ef0c     B2 00 A0 FD | 	call	#popregs_
0ef10                 | _do_changewav_ret
0ef10     2D 00 64 FD | 	ret
0ef14                 | 
0ef14                 | ' 
0ef14                 | ' 
0ef14                 | ' sub do_shutup
0ef14                 | _do_shutup
0ef14     03 4A 05 F6 | 	mov	COUNT_, #3
0ef18     A8 00 A0 FD | 	call	#pushregs_
0ef1c     18 F0 07 F1 | 	add	ptra, #24
0ef20     4A 00 00 FF 
0ef24     80 E4 05 F1 | 	add	objptr, ##38016
0ef28     F2 1E 02 FB | 	rdlong	local01, objptr
0ef2c     0F 21 02 F6 | 	mov	local02, local01
0ef30     01 20 66 F0 | 	shl	local02, #1
0ef34     0F 21 02 F1 | 	add	local02, local01
0ef38     02 20 66 F0 | 	shl	local02, #2
0ef3c     03 00 00 FF 
0ef40     04 E4 85 F1 | 	sub	objptr, ##1540
0ef44     F2 20 02 F1 | 	add	local02, objptr
0ef48     10 23 0A FB | 	rdlong	local03, local02 wz
0ef4c     14 4E 05 F1 | 	add	fp, #20
0ef50     A7 22 62 FC | 	wrlong	local03, fp
0ef54                 | ' 
0ef54                 | ' numpar=compiledline(lineptr_e).result.uresult
0ef54                 | ' if numpar=0 then
0ef54     14 4E 85 F1 | 	sub	fp, #20
0ef58     47 00 00 FF 
0ef5c     7C E4 85 F1 | 	sub	objptr, ##36476
0ef60     50 00 90 5D |  if_ne	jmp	#LR__1212
0ef64                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0ef64     10 4E 05 F1 | 	add	fp, #16
0ef68     A7 00 68 FC | 	wrlong	#0, fp
0ef6c     37 00 00 FF 
0ef70     10 E4 05 F1 | 	add	objptr, ##28176
0ef74     97 16 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0ef78                 | LR__1210
0ef78     F2 12 02 FB | 	rdlong	arg01, objptr
0ef7c     A7 22 02 FB | 	rdlong	local03, fp
0ef80     06 22 66 F0 | 	shl	local03, #6
0ef84     11 13 02 F1 | 	add	arg01, local03
0ef88     14 12 06 F1 | 	add	arg01, #20
0ef8c     09 01 58 FC | 	wrword	#0, arg01
0ef90     A7 22 02 FB | 	rdlong	local03, fp
0ef94     01 22 06 F1 | 	add	local03, #1
0ef98     A7 22 62 FC | 	wrlong	local03, fp
0ef9c     08 22 56 F2 | 	cmps	local03, #8 wc
0efa0     D4 FF 9F CD |  if_b	jmp	#LR__1210
0efa4                 | LR__1211
0efa4     37 00 00 FF 
0efa8     10 E4 85 F1 | 	sub	objptr, ##28176
0efac     10 4E 85 F1 | 	sub	fp, #16
0efb0     64 00 90 FD | 	jmp	#LR__1213
0efb4                 | LR__1212
0efb4     EC C9 BF FD | 	call	#_pop
0efb8     FF 1E 02 F6 | 	mov	local01, result3
0efbc     A7 FA 61 FC | 	wrlong	result1, fp
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 FC 61 FC | 	wrlong	result2, fp
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 1E 62 FC | 	wrlong	local01, fp
0efd0     08 4E 85 F1 | 	sub	fp, #8
0efd4     A7 12 02 F6 | 	mov	arg01, fp
0efd8     8C 6A B0 FD | 	call	#_converttoint
0efdc     FD 22 52 F6 | 	abs	local03, result1 wc
0efe0     07 22 06 F5 | 	and	local03, #7
0efe4     11 21 82 F6 | 	negc	local02, local03
0efe8     0C 4E 05 F1 | 	add	fp, #12
0efec     A7 20 62 FC | 	wrlong	local02, fp
0eff0     37 00 00 FF 
0eff4     10 E4 05 F1 | 	add	objptr, ##28176
0eff8     F2 12 02 FB | 	rdlong	arg01, objptr
0effc     37 00 00 FF 
0f000     10 E4 85 F1 | 	sub	objptr, ##28176
0f004     0C 4E 85 F1 | 	sub	fp, #12
0f008     06 20 66 F0 | 	shl	local02, #6
0f00c     10 13 02 F1 | 	add	arg01, local02
0f010     14 12 06 F1 | 	add	arg01, #20
0f014     09 01 58 FC | 	wrword	#0, arg01
0f018                 | LR__1213
0f018     A7 F0 03 F6 | 	mov	ptra, fp
0f01c     B2 00 A0 FD | 	call	#popregs_
0f020                 | _do_shutup_ret
0f020     2D 00 64 FD | 	ret
0f024                 | 
0f024                 | ' 
0f024                 | ' 
0f024                 | ' sub do_release
0f024                 | _do_release
0f024     00 4A 05 F6 | 	mov	COUNT_, #0
0f028     A8 00 A0 FD | 	call	#pushregs_
0f02c     10 F0 07 F1 | 	add	ptra, #16
0f030     70 C9 BF FD | 	call	#_pop
0f034     FF 14 02 F6 | 	mov	arg02, result3
0f038     A7 FA 61 FC | 	wrlong	result1, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 FC 61 FC | 	wrlong	result2, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 14 62 FC | 	wrlong	arg02, fp
0f04c     08 4E 85 F1 | 	sub	fp, #8
0f050     A7 12 02 F6 | 	mov	arg01, fp
0f054     10 6A B0 FD | 	call	#_converttoint
0f058     0C 4E 05 F1 | 	add	fp, #12
0f05c     A7 FA 61 FC | 	wrlong	result1, fp
0f060                 | ' t1=pop()
0f060                 | ' channel=converttoint(t1)
0f060                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f060     0C 4E 85 F1 | 	sub	fp, #12
0f064     00 FA 55 F2 | 	cmps	result1, #0 wc
0f068     44 00 90 CD |  if_b	jmp	#LR__1220
0f06c     0C 4E 05 F1 | 	add	fp, #12
0f070     A7 14 02 FB | 	rdlong	arg02, fp
0f074     0C 4E 85 F1 | 	sub	fp, #12
0f078     08 14 56 F2 | 	cmps	arg02, #8 wc
0f07c     30 00 90 3D |  if_ae	jmp	#LR__1220
0f080     37 00 00 FF 
0f084     10 E4 05 F1 | 	add	objptr, ##28176
0f088     F2 12 02 FB | 	rdlong	arg01, objptr
0f08c     37 00 00 FF 
0f090     10 E4 85 F1 | 	sub	objptr, ##28176
0f094     0C 4E 05 F1 | 	add	fp, #12
0f098     A7 14 02 FB | 	rdlong	arg02, fp
0f09c     0C 4E 85 F1 | 	sub	fp, #12
0f0a0     06 14 66 F0 | 	shl	arg02, #6
0f0a4     0A 13 02 F1 | 	add	arg01, arg02
0f0a8     2C 12 06 F1 | 	add	arg01, #44
0f0ac     09 FF 69 FC | 	wrlong	#255, arg01
0f0b0                 | LR__1220
0f0b0     A7 F0 03 F6 | 	mov	ptra, fp
0f0b4     B2 00 A0 FD | 	call	#popregs_
0f0b8                 | _do_release_ret
0f0b8     2D 00 64 FD | 	ret
0f0bc                 | 
0f0bc                 | ' 
0f0bc                 | ' 
0f0bc                 | ' sub do_defsnd
0f0bc                 | _do_defsnd
0f0bc     04 4A 05 F6 | 	mov	COUNT_, #4
0f0c0     A8 00 A0 FD | 	call	#pushregs_
0f0c4     88 F0 07 F1 | 	add	ptra, #136
0f0c8     4A 00 00 FF 
0f0cc     80 E4 05 F1 | 	add	objptr, ##38016
0f0d0     F2 1A 02 FB | 	rdlong	arg05, objptr
0f0d4     0D 19 02 F6 | 	mov	arg04, arg05
0f0d8     01 18 66 F0 | 	shl	arg04, #1
0f0dc     0D 19 02 F1 | 	add	arg04, arg05
0f0e0     02 18 66 F0 | 	shl	arg04, #2
0f0e4     03 00 00 FF 
0f0e8     04 E4 85 F1 | 	sub	objptr, ##1540
0f0ec     F2 18 02 F1 | 	add	arg04, objptr
0f0f0     0C 1B 02 FB | 	rdlong	arg05, arg04
0f0f4     A7 1A 62 FC | 	wrlong	arg05, fp
0f0f8                 | ' 
0f0f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f0f8                 | ' 
0f0f8                 | ' 
0f0f8                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f0f8                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f0f8                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f0f8                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f0f8                 | ' 
0f0f8                 | ' if numpar<2 then return
0f0f8     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f0fc     47 00 00 FF 
0f100     7C E4 85 F1 | 	sub	objptr, ##36476
0f104     94 08 90 CD |  if_b	jmp	#LR__1253
0f108                 | ' 
0f108                 | '   
0f108                 | ' if numpar=2 then
0f108     A7 1A 02 FB | 	rdlong	arg05, fp
0f10c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f110     A0 03 90 5D |  if_ne	jmp	#LR__1240
0f114     8C C8 BF FD | 	call	#_pop
0f118     FF 1A 02 F6 | 	mov	arg05, result3
0f11c     2C 4E 05 F1 | 	add	fp, #44
0f120     A7 FA 61 FC | 	wrlong	result1, fp
0f124     04 4E 05 F1 | 	add	fp, #4
0f128     A7 FC 61 FC | 	wrlong	result2, fp
0f12c     04 4E 05 F1 | 	add	fp, #4
0f130     A7 1A 62 FC | 	wrlong	arg05, fp
0f134                 | '   t1=pop()
0f134                 | '   if t1.result_type=result_string2 then 
0f134     34 4E 85 F1 | 	sub	fp, #52
0f138     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f13c     20 00 90 5D |  if_ne	jmp	#LR__1230
0f140     2C 4E 05 F1 | 	add	fp, #44
0f144     A7 12 02 FB | 	rdlong	arg01, fp
0f148     2C 4E 85 F1 | 	sub	fp, #44
0f14c     F4 20 B0 FD | 	call	#_convertstring
0f150     38 4E 05 F1 | 	add	fp, #56
0f154     A7 FA 61 FC | 	wrlong	result1, fp
0f158     38 4E 85 F1 | 	sub	fp, #56
0f15c     58 00 90 FD | 	jmp	#LR__1233
0f160                 | LR__1230
0f160     34 4E 05 F1 | 	add	fp, #52
0f164     A7 1A 02 FB | 	rdlong	arg05, fp
0f168     34 4E 85 F1 | 	sub	fp, #52
0f16c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f170     18 00 90 5D |  if_ne	jmp	#LR__1231
0f174     2C 4E 05 F1 | 	add	fp, #44
0f178     A7 1A 02 FB | 	rdlong	arg05, fp
0f17c     0C 4E 05 F1 | 	add	fp, #12
0f180     A7 1A 62 FC | 	wrlong	arg05, fp
0f184     38 4E 85 F1 | 	sub	fp, #56
0f188     2C 00 90 FD | 	jmp	#LR__1232
0f18c                 | LR__1231
0f18c     83 01 00 FF 
0f190     61 1A 06 F6 | 	mov	arg05, ##@LR__5437
0f194     38 4E 05 F1 | 	add	fp, #56
0f198     A7 1A 62 FC | 	wrlong	arg05, fp
0f19c     0C 4E 85 F1 | 	sub	fp, #12
0f1a0     A7 12 02 F6 | 	mov	arg01, fp
0f1a4     2C 4E 85 F1 | 	sub	fp, #44
0f1a8     BC 68 B0 FD | 	call	#_converttoint
0f1ac     14 4E 05 F1 | 	add	fp, #20
0f1b0     A7 FA 61 FC | 	wrlong	result1, fp
0f1b4     14 4E 85 F1 | 	sub	fp, #20
0f1b8                 | LR__1232
0f1b8                 | LR__1233
0f1b8                 | ' 
0f1b8                 | '     
0f1b8                 | '   if s<>"" then 
0f1b8     38 4E 05 F1 | 	add	fp, #56
0f1bc     A7 12 02 FB | 	rdlong	arg01, fp
0f1c0     38 4E 85 F1 | 	sub	fp, #56
0f1c4     83 01 00 FF 
0f1c8     62 14 06 F6 | 	mov	arg02, ##@LR__5438
0f1cc     80 15 B1 FD | 	call	#__system___string_cmp
0f1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f1d4     E0 01 90 AD |  if_e	jmp	#LR__1236
0f1d8     C8 C7 BF FD | 	call	#_pop
0f1dc     FF 1A 02 F6 | 	mov	arg05, result3
0f1e0     2C 4E 05 F1 | 	add	fp, #44
0f1e4     A7 FA 61 FC | 	wrlong	result1, fp
0f1e8     04 4E 05 F1 | 	add	fp, #4
0f1ec     A7 FC 61 FC | 	wrlong	result2, fp
0f1f0     04 4E 05 F1 | 	add	fp, #4
0f1f4     A7 1A 62 FC | 	wrlong	arg05, fp
0f1f8     08 4E 85 F1 | 	sub	fp, #8
0f1fc     A7 12 02 F6 | 	mov	arg01, fp
0f200     2C 4E 85 F1 | 	sub	fp, #44
0f204     60 68 B0 FD | 	call	#_converttoint
0f208     10 4E 05 F1 | 	add	fp, #16
0f20c     A7 FA 61 FC | 	wrlong	result1, fp
0f210                 | '     t1=pop()
0f210                 | '     channel=converttoint(t1) : if channel>31 then return
0f210     FD 1A 02 F6 | 	mov	arg05, result1
0f214     10 4E 85 F1 | 	sub	fp, #16
0f218     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f21c     7C 07 90 3D |  if_ae	jmp	#LR__1253
0f220                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f220     09 12 06 F6 | 	mov	arg01, #9
0f224     70 65 B1 FD | 	call	#__system__close
0f228     09 1E 06 F6 | 	mov	local01, #9
0f22c     83 01 00 FF 
0f230     63 12 06 F6 | 	mov	arg01, ##@LR__5439
0f234     38 4E 05 F1 | 	add	fp, #56
0f238     A7 14 02 FB | 	rdlong	arg02, fp
0f23c     38 4E 85 F1 | 	sub	fp, #56
0f240     40 15 B1 FD | 	call	#__system___string_concat
0f244     FD 14 02 F6 | 	mov	arg02, result1
0f248     0F 13 02 F6 | 	mov	arg01, local01
0f24c     00 16 06 F6 | 	mov	arg03, #0
0f250     D8 20 B1 FD | 	call	#__system___basic_open_string
0f254     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f258     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f25c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f260     52 00 00 FF 
0f264     14 E4 05 F1 | 	add	objptr, ##42004
0f268     F2 FA 61 FC | 	wrlong	result1, objptr
0f26c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f26c     52 00 00 FF 
0f270     14 E4 85 F1 | 	sub	objptr, ##42004
0f274     B0 00 90 AD |  if_e	jmp	#LR__1234
0f278     00 12 06 F6 | 	mov	arg01, #0
0f27c     E8 6E B1 FD | 	call	#__system___getiolock_0540
0f280     FD 12 02 F6 | 	mov	arg01, result1
0f284     A0 14 B1 FD | 	call	#__system___lockmem
0f288     83 01 00 FF 
0f28c     70 14 06 F6 | 	mov	arg02, ##@LR__5440
0f290     00 12 06 F6 | 	mov	arg01, #0
0f294     00 16 06 F6 | 	mov	arg03, #0
0f298     80 21 B1 FD | 	call	#__system___basic_print_string
0f29c     52 00 00 FF 
0f2a0     14 E4 05 F1 | 	add	objptr, ##42004
0f2a4     F2 14 02 FB | 	rdlong	arg02, objptr
0f2a8     52 00 00 FF 
0f2ac     14 E4 85 F1 | 	sub	objptr, ##42004
0f2b0     00 12 06 F6 | 	mov	arg01, #0
0f2b4     00 16 06 F6 | 	mov	arg03, #0
0f2b8     0A 18 06 F6 | 	mov	arg04, #10
0f2bc     A0 21 B1 FD | 	call	#__system___basic_print_integer
0f2c0     83 01 00 FF 
0f2c4     7E 14 06 F6 | 	mov	arg02, ##@LR__5441
0f2c8     00 12 06 F6 | 	mov	arg01, #0
0f2cc     00 16 06 F6 | 	mov	arg03, #0
0f2d0     48 21 B1 FD | 	call	#__system___basic_print_string
0f2d4     00 1E 06 F6 | 	mov	local01, #0
0f2d8     52 00 00 FF 
0f2dc     14 E4 05 F1 | 	add	objptr, ##42004
0f2e0     F2 12 02 FB | 	rdlong	arg01, objptr
0f2e4     52 00 00 FF 
0f2e8     14 E4 85 F1 | 	sub	objptr, ##42004
0f2ec     00 3B B1 FD | 	call	#__system___strerror
0f2f0     FD 14 02 F6 | 	mov	arg02, result1
0f2f4     0F 13 02 F6 | 	mov	arg01, local01
0f2f8     00 16 06 F6 | 	mov	arg03, #0
0f2fc     1C 21 B1 FD | 	call	#__system___basic_print_string
0f300     00 12 06 F6 | 	mov	arg01, #0
0f304     0A 14 06 F6 | 	mov	arg02, #10
0f308     00 16 06 F6 | 	mov	arg03, #0
0f30c     B4 20 B1 FD | 	call	#__system___basic_print_char
0f310     00 12 06 F6 | 	mov	arg01, #0
0f314     50 6E B1 FD | 	call	#__system___getiolock_0540
0f318     FD 00 68 FC | 	wrlong	#0, result1
0f31c     09 12 06 F6 | 	mov	arg01, #9
0f320     74 64 B1 FD | 	call	#__system__close
0f324     74 06 90 FD | 	jmp	#LR__1253
0f328                 | LR__1234
0f328                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 00 68 FC | 	wrlong	#0, fp
0f330                 | LR__1235
0f330     A7 1E 02 FB | 	rdlong	local01, fp
0f334     01 1E 66 F0 | 	shl	local01, #1
0f338     11 14 06 F6 | 	mov	arg02, #17
0f33c     0F 15 02 F1 | 	add	arg02, local01
0f340     78 4E 05 F1 | 	add	fp, #120
0f344     A7 16 02 F6 | 	mov	arg03, fp
0f348     7C 4E 85 F1 | 	sub	fp, #124
0f34c     09 12 06 F6 | 	mov	arg01, #9
0f350     01 18 06 F6 | 	mov	arg04, #1
0f354     02 1A 06 F6 | 	mov	arg05, #2
0f358     3C 22 B1 FD | 	call	#__system___basic_get
0f35c     10 4E 05 F1 | 	add	fp, #16
0f360     A7 12 02 FB | 	rdlong	arg01, fp
0f364     0B 12 66 F0 | 	shl	arg01, #11
0f368     0C 4E 85 F1 | 	sub	fp, #12
0f36c     A7 1E 02 FB | 	rdlong	local01, fp
0f370     01 1E 66 F0 | 	shl	local01, #1
0f374     0F 13 02 F1 | 	add	arg01, local01
0f378     78 4E 05 F1 | 	add	fp, #120
0f37c     A7 14 E2 FA | 	rdword	arg02, fp
0f380     7C 4E 85 F1 | 	sub	fp, #124
0f384     0F 14 66 F7 | 	signx	arg02, #15
0f388     E4 E1 B0 FD | 	call	#_psdpoke
0f38c     04 4E 05 F1 | 	add	fp, #4
0f390     A7 1E 02 FB | 	rdlong	local01, fp
0f394     01 1E 06 F1 | 	add	local01, #1
0f398     A7 1E 62 FC | 	wrlong	local01, fp
0f39c     02 00 00 FF 
0f3a0     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f3a4     88 FF 9F CD |  if_b	jmp	#LR__1235
0f3a8     04 4E 85 F1 | 	sub	fp, #4
0f3ac                 | '     close #9
0f3ac     09 12 06 F6 | 	mov	arg01, #9
0f3b0     E4 63 B1 FD | 	call	#__system__close
0f3b4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f3b4                 | '     return
0f3b4     E4 05 90 FD | 	jmp	#LR__1253
0f3b8                 | LR__1236
0f3b8                 | '     if wptr < ($80000 - 2048) then 
0f3b8     14 4E 05 F1 | 	add	fp, #20
0f3bc     A7 1E 02 FB | 	rdlong	local01, fp
0f3c0     14 4E 85 F1 | 	sub	fp, #20
0f3c4     FC 03 00 FF 
0f3c8     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f3cc     70 00 90 3D |  if_ae	jmp	#LR__1238
0f3d0                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 00 68 FC | 	wrlong	#0, fp
0f3d8     04 4E 85 F1 | 	sub	fp, #4
0f3dc                 | LR__1237
0f3dc     10 4E 05 F1 | 	add	fp, #16
0f3e0     A7 1E 02 FB | 	rdlong	local01, fp
0f3e4     0B 1E 66 F0 | 	shl	local01, #11
0f3e8     0C 4E 85 F1 | 	sub	fp, #12
0f3ec     A7 1A 02 FB | 	rdlong	arg05, fp
0f3f0     0D 19 02 F6 | 	mov	arg04, arg05
0f3f4     01 18 66 F0 | 	shl	arg04, #1
0f3f8     0C 1F 02 F1 | 	add	local01, arg04
0f3fc     10 4E 05 F1 | 	add	fp, #16
0f400     A7 12 02 FB | 	rdlong	arg01, fp
0f404     14 4E 85 F1 | 	sub	fp, #20
0f408     01 1A 66 F0 | 	shl	arg05, #1
0f40c     0D 13 02 F1 | 	add	arg01, arg05
0f410     09 15 E2 FA | 	rdword	arg02, arg01
0f414     0F 13 02 F6 | 	mov	arg01, local01
0f418     54 E1 B0 FD | 	call	#_psdpoke
0f41c     04 4E 05 F1 | 	add	fp, #4
0f420     A7 1E 02 FB | 	rdlong	local01, fp
0f424     01 1E 06 F1 | 	add	local01, #1
0f428     A7 1E 62 FC | 	wrlong	local01, fp
0f42c     04 4E 85 F1 | 	sub	fp, #4
0f430     02 00 00 FF 
0f434     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f438     A0 FF 9F CD |  if_b	jmp	#LR__1237
0f43c     5C 05 90 FD | 	jmp	#LR__1253
0f440                 | LR__1238
0f440                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f440     04 4E 05 F1 | 	add	fp, #4
0f444     A7 00 68 FC | 	wrlong	#0, fp
0f448     04 4E 85 F1 | 	sub	fp, #4
0f44c                 | LR__1239
0f44c     10 4E 05 F1 | 	add	fp, #16
0f450     A7 1E 02 FB | 	rdlong	local01, fp
0f454     0B 1E 66 F0 | 	shl	local01, #11
0f458     0C 4E 85 F1 | 	sub	fp, #12
0f45c     A7 1A 02 FB | 	rdlong	arg05, fp
0f460     0D 19 02 F6 | 	mov	arg04, arg05
0f464     01 18 66 F0 | 	shl	arg04, #1
0f468     0C 1F 02 F1 | 	add	local01, arg04
0f46c     10 4E 05 F1 | 	add	fp, #16
0f470     A7 12 02 FB | 	rdlong	arg01, fp
0f474     14 4E 85 F1 | 	sub	fp, #20
0f478     01 1A 66 F0 | 	shl	arg05, #1
0f47c     0D 13 02 F1 | 	add	arg01, arg05
0f480     2C E2 B0 FD | 	call	#_psdpeek
0f484     FD 14 02 F6 | 	mov	arg02, result1
0f488     0F 13 02 F6 | 	mov	arg01, local01
0f48c     E0 E0 B0 FD | 	call	#_psdpoke
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 1E 02 FB | 	rdlong	local01, fp
0f498     01 1E 06 F1 | 	add	local01, #1
0f49c     A7 1E 62 FC | 	wrlong	local01, fp
0f4a0     04 4E 85 F1 | 	sub	fp, #4
0f4a4     02 00 00 FF 
0f4a8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f4ac     9C FF 9F CD |  if_b	jmp	#LR__1239
0f4b0                 | '     return 
0f4b0     E8 04 90 FD | 	jmp	#LR__1253
0f4b4                 | '   
0f4b4                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f4b4                 | '   return
0f4b4                 | LR__1240
0f4b4                 | ' for i=0 to 15 : harm(i)=0: next i  
0f4b4     04 4E 05 F1 | 	add	fp, #4
0f4b8     A7 00 68 FC | 	wrlong	#0, fp
0f4bc     97 16 48 FB | 	callpa	#(@LR__1242-@LR__1241)>>2,fcache_load_ptr_
0f4c0                 | LR__1241
0f4c0     A7 1E 02 FB | 	rdlong	local01, fp
0f4c4     02 1E 66 F0 | 	shl	local01, #2
0f4c8     38 4E 05 F1 | 	add	fp, #56
0f4cc     A7 1E 02 F1 | 	add	local01, fp
0f4d0     0F 01 68 FC | 	wrlong	#0, local01
0f4d4     38 4E 85 F1 | 	sub	fp, #56
0f4d8     A7 1E 02 FB | 	rdlong	local01, fp
0f4dc     01 1E 06 F1 | 	add	local01, #1
0f4e0     A7 1E 62 FC | 	wrlong	local01, fp
0f4e4     10 1E 56 F2 | 	cmps	local01, #16 wc
0f4e8     D4 FF 9F CD |  if_b	jmp	#LR__1241
0f4ec                 | LR__1242
0f4ec     04 4E 85 F1 | 	sub	fp, #4
0f4f0                 | ' for i=numpar to 2 step -1 
0f4f0     A7 1E 02 FB | 	rdlong	local01, fp
0f4f4     04 4E 05 F1 | 	add	fp, #4
0f4f8     A7 1E 62 FC | 	wrlong	local01, fp
0f4fc     04 4E 85 F1 | 	sub	fp, #4
0f500                 | LR__1243
0f500     A0 C4 BF FD | 	call	#_pop
0f504     2C 4E 05 F1 | 	add	fp, #44
0f508     A7 FA 61 FC | 	wrlong	result1, fp
0f50c     04 4E 05 F1 | 	add	fp, #4
0f510     A7 FC 61 FC | 	wrlong	result2, fp
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 FE 61 FC | 	wrlong	result3, fp
0f51c     30 4E 85 F1 | 	sub	fp, #48
0f520     A7 1E 02 FB | 	rdlong	local01, fp
0f524     02 1E 86 F1 | 	sub	local01, #2
0f528     02 1E 66 F0 | 	shl	local01, #2
0f52c     38 4E 05 F1 | 	add	fp, #56
0f530     A7 1E 02 F1 | 	add	local01, fp
0f534     10 4E 85 F1 | 	sub	fp, #16
0f538     A7 12 02 F6 | 	mov	arg01, fp
0f53c     2C 4E 85 F1 | 	sub	fp, #44
0f540     E0 65 B0 FD | 	call	#_converttofloat
0f544     0F FB 61 FC | 	wrlong	result1, local01
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 1E 02 FB | 	rdlong	local01, fp
0f550     01 1E 86 F1 | 	sub	local01, #1
0f554     A7 1E 62 FC | 	wrlong	local01, fp
0f558     04 4E 85 F1 | 	sub	fp, #4
0f55c     02 1E 56 F2 | 	cmps	local01, #2 wc
0f560     9C FF 9F 3D |  if_ae	jmp	#LR__1243
0f564     3C C4 BF FD | 	call	#_pop
0f568     FF 1E 02 F6 | 	mov	local01, result3
0f56c     2C 4E 05 F1 | 	add	fp, #44
0f570     A7 FA 61 FC | 	wrlong	result1, fp
0f574     04 4E 05 F1 | 	add	fp, #4
0f578     A7 FC 61 FC | 	wrlong	result2, fp
0f57c     04 4E 05 F1 | 	add	fp, #4
0f580     A7 1E 62 FC | 	wrlong	local01, fp
0f584     08 4E 85 F1 | 	sub	fp, #8
0f588     A7 12 02 F6 | 	mov	arg01, fp
0f58c     2C 4E 85 F1 | 	sub	fp, #44
0f590     D4 64 B0 FD | 	call	#_converttoint
0f594     10 4E 05 F1 | 	add	fp, #16
0f598     A7 FA 61 FC | 	wrlong	result1, fp
0f59c                 | ' t1=pop()
0f59c                 | ' channel=converttoint(t1) : : if channel>31 then return
0f59c     FD 1E 02 F6 | 	mov	local01, result1
0f5a0     10 4E 85 F1 | 	sub	fp, #16
0f5a4     20 1E 56 F2 | 	cmps	local01, #32 wc
0f5a8     F0 03 90 3D |  if_ae	jmp	#LR__1253
0f5ac     20 4E 05 F1 | 	add	fp, #32
0f5b0     A7 00 68 FC | 	wrlong	#0, fp
0f5b4                 | ' max=0
0f5b4                 | ' if harm(0)<0 then
0f5b4     1C 4E 05 F1 | 	add	fp, #28
0f5b8     A7 12 02 FB | 	rdlong	arg01, fp
0f5bc     3C 4E 85 F1 | 	sub	fp, #60
0f5c0     00 14 06 F6 | 	mov	arg02, #0
0f5c4     01 16 06 F6 | 	mov	arg03, #1
0f5c8     44 41 B1 FD | 	call	#__system___float_cmp
0f5cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0f5d0     04 01 90 3D |  if_ae	jmp	#LR__1246
0f5d4     3C 4E 05 F1 | 	add	fp, #60
0f5d8     A7 FA 01 FB | 	rdlong	result1, fp
0f5dc     1F FA 05 F4 | 	bitl	result1, #31
0f5e0     24 4E 85 F1 | 	sub	fp, #36
0f5e4     A7 FA 61 FC | 	wrlong	result1, fp
0f5e8     28 4E 05 F1 | 	add	fp, #40
0f5ec     A7 FA 01 FB | 	rdlong	result1, fp
0f5f0     1F FA 05 F4 | 	bitl	result1, #31
0f5f4     24 4E 85 F1 | 	sub	fp, #36
0f5f8     A7 FA 61 FC | 	wrlong	result1, fp
0f5fc     20 4E 05 F1 | 	add	fp, #32
0f600     00 C0 9F FF 
0f604     A7 00 68 FC | 	wrlong	##1065353216, fp
0f608     24 4E 85 F1 | 	sub	fp, #36
0f60c     A7 1E 02 FB | 	rdlong	local01, fp
0f610     28 4E 05 F1 | 	add	fp, #40
0f614     A7 1E 62 FC | 	wrlong	local01, fp
0f618     24 4E 85 F1 | 	sub	fp, #36
0f61c     A7 1E 02 FB | 	rdlong	local01, fp
0f620     28 4E 05 F1 | 	add	fp, #40
0f624     A7 1E 62 FC | 	wrlong	local01, fp
0f628                 | '   harm(0)=1
0f628                 | '   harm(1)=even
0f628                 | '   harm(2)=odd
0f628                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f628     40 4E 85 F1 | 	sub	fp, #64
0f62c     A7 06 68 FC | 	wrlong	#3, fp
0f630                 | LR__1244
0f630     A7 1A 02 FB | 	rdlong	arg05, fp
0f634     0D 21 02 F6 | 	mov	local02, arg05
0f638     02 20 66 F0 | 	shl	local02, #2
0f63c     38 4E 05 F1 | 	add	fp, #56
0f640     A7 20 02 F1 | 	add	local02, fp
0f644     02 1A 86 F1 | 	sub	arg05, #2
0f648     02 1A 66 F0 | 	shl	arg05, #2
0f64c     A7 1A 02 F1 | 	add	arg05, fp
0f650     0D 13 02 FB | 	rdlong	arg01, arg05
0f654     24 4E 85 F1 | 	sub	fp, #36
0f658     A7 14 02 FB | 	rdlong	arg02, fp
0f65c     18 4E 85 F1 | 	sub	fp, #24
0f660     78 3C B1 FD | 	call	#__system___float_mul
0f664     10 FB 61 FC | 	wrlong	result1, local02
0f668     04 4E 05 F1 | 	add	fp, #4
0f66c     A7 22 02 FB | 	rdlong	local03, fp
0f670     02 22 06 F1 | 	add	local03, #2
0f674     A7 22 62 FC | 	wrlong	local03, fp
0f678     10 22 56 F2 | 	cmps	local03, #16 wc
0f67c     B0 FF 9F CD |  if_b	jmp	#LR__1244
0f680                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f680     A7 08 68 FC | 	wrlong	#4, fp
0f684                 | LR__1245
0f684     A7 22 02 FB | 	rdlong	local03, fp
0f688     11 21 02 F6 | 	mov	local02, local03
0f68c     02 20 66 F0 | 	shl	local02, #2
0f690     38 4E 05 F1 | 	add	fp, #56
0f694     A7 20 02 F1 | 	add	local02, fp
0f698     02 22 86 F1 | 	sub	local03, #2
0f69c     02 22 66 F0 | 	shl	local03, #2
0f6a0     A7 22 02 F1 | 	add	local03, fp
0f6a4     11 13 02 FB | 	rdlong	arg01, local03
0f6a8     20 4E 85 F1 | 	sub	fp, #32
0f6ac     A7 14 02 FB | 	rdlong	arg02, fp
0f6b0     1C 4E 85 F1 | 	sub	fp, #28
0f6b4     24 3C B1 FD | 	call	#__system___float_mul
0f6b8     10 FB 61 FC | 	wrlong	result1, local02
0f6bc     04 4E 05 F1 | 	add	fp, #4
0f6c0     A7 22 02 FB | 	rdlong	local03, fp
0f6c4     02 22 06 F1 | 	add	local03, #2
0f6c8     A7 22 62 FC | 	wrlong	local03, fp
0f6cc     0F 22 56 F2 | 	cmps	local03, #15 wc
0f6d0     B0 FF 9F CD |  if_b	jmp	#LR__1245
0f6d4     04 4E 85 F1 | 	sub	fp, #4
0f6d8                 | LR__1246
0f6d8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f6d8     3C 4E 05 F1 | 	add	fp, #60
0f6dc     A7 12 02 FB | 	rdlong	arg01, fp
0f6e0     3C 4E 85 F1 | 	sub	fp, #60
0f6e4     00 14 06 F6 | 	mov	arg02, #0
0f6e8     01 16 66 F6 | 	neg	arg03, #1
0f6ec     20 40 B1 FD | 	call	#__system___float_cmp
0f6f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f6f4     A4 02 90 CD |  if_b	jmp	#LR__1252
0f6f8                 | '   for i=0 to 1023
0f6f8     04 4E 05 F1 | 	add	fp, #4
0f6fc     A7 00 68 FC | 	wrlong	#0, fp
0f700     04 4E 85 F1 | 	sub	fp, #4
0f704                 | LR__1247
0f704     24 4E 05 F1 | 	add	fp, #36
0f708     A7 00 68 FC | 	wrlong	#0, fp
0f70c                 | '     spl=0
0f70c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f70c     1C 4E 85 F1 | 	sub	fp, #28
0f710     A7 00 68 FC | 	wrlong	#0, fp
0f714                 | LR__1248
0f714     A7 20 02 FB | 	rdlong	local02, fp
0f718     02 20 66 F0 | 	shl	local02, #2
0f71c     34 4E 05 F1 | 	add	fp, #52
0f720     A7 20 02 F1 | 	add	local02, fp
0f724     10 23 02 FB | 	rdlong	local03, local02
0f728     87 E4 1D FF 
0f72c     DB 21 06 F6 | 	mov	local02, ##1003032539
0f730     38 4E 85 F1 | 	sub	fp, #56
0f734     A7 12 02 FB | 	rdlong	arg01, fp
0f738     04 4E 85 F1 | 	sub	fp, #4
0f73c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f740     1F 24 C6 C9 |  if_b	decod	local04, #31
0f744     00 24 06 36 |  if_ae	mov	local04, #0
0f748     8C 37 B1 FD | 	call	#__system___float_fromuns
0f74c     12 FB 61 F5 | 	xor	result1, local04
0f750     FD 14 02 F6 | 	mov	arg02, result1
0f754     10 13 02 F6 | 	mov	arg01, local02
0f758     80 3B B1 FD | 	call	#__system___float_mul
0f75c     FD 20 02 F6 | 	mov	local02, result1
0f760     08 4E 05 F1 | 	add	fp, #8
0f764     A7 12 02 FB | 	rdlong	arg01, fp
0f768     08 4E 85 F1 | 	sub	fp, #8
0f76c     01 12 06 F1 | 	add	arg01, #1
0f770     09 13 52 F6 | 	abs	arg01, arg01 wc
0f774     1F 24 C6 C9 |  if_b	decod	local04, #31
0f778     00 24 06 36 |  if_ae	mov	local04, #0
0f77c     58 37 B1 FD | 	call	#__system___float_fromuns
0f780     12 FB 61 F5 | 	xor	result1, local04
0f784     FD 14 02 F6 | 	mov	arg02, result1
0f788     10 13 02 F6 | 	mov	arg01, local02
0f78c     4C 3B B1 FD | 	call	#__system___float_mul
0f790     FD 12 02 F6 | 	mov	arg01, result1
0f794     80 44 B1 FD | 	call	#__system____builtin_sinf
0f798     FD 14 02 F6 | 	mov	arg02, result1
0f79c     11 13 02 F6 | 	mov	arg01, local03
0f7a0     38 3B B1 FD | 	call	#__system___float_mul
0f7a4     FD 14 02 F6 | 	mov	arg02, result1
0f7a8     24 4E 05 F1 | 	add	fp, #36
0f7ac     A7 12 02 FB | 	rdlong	arg01, fp
0f7b0     24 4E 85 F1 | 	sub	fp, #36
0f7b4     54 37 B1 FD | 	call	#__system___float_add
0f7b8     24 4E 05 F1 | 	add	fp, #36
0f7bc     A7 FA 61 FC | 	wrlong	result1, fp
0f7c0     1C 4E 85 F1 | 	sub	fp, #28
0f7c4     A7 16 02 FB | 	rdlong	arg03, fp
0f7c8     01 16 06 F1 | 	add	arg03, #1
0f7cc     A7 16 62 FC | 	wrlong	arg03, fp
0f7d0     10 16 56 F2 | 	cmps	arg03, #16 wc
0f7d4     3C FF 9F CD |  if_b	jmp	#LR__1248
0f7d8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f7d8     1C 4E 05 F1 | 	add	fp, #28
0f7dc     A7 12 02 FB | 	rdlong	arg01, fp
0f7e0     1F 12 06 F4 | 	bitl	arg01, #31
0f7e4     04 4E 85 F1 | 	sub	fp, #4
0f7e8     A7 14 02 FB | 	rdlong	arg02, fp
0f7ec     20 4E 85 F1 | 	sub	fp, #32
0f7f0     01 16 66 F6 | 	neg	arg03, #1
0f7f4     18 3F B1 FD | 	call	#__system___float_cmp
0f7f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f7fc     18 00 90 CD |  if_b	jmp	#LR__1249
0f800     24 4E 05 F1 | 	add	fp, #36
0f804     A7 FA 01 FB | 	rdlong	result1, fp
0f808     1F FA 05 F4 | 	bitl	result1, #31
0f80c     04 4E 85 F1 | 	sub	fp, #4
0f810     A7 FA 61 FC | 	wrlong	result1, fp
0f814     20 4E 85 F1 | 	sub	fp, #32
0f818                 | LR__1249
0f818     04 4E 05 F1 | 	add	fp, #4
0f81c     A7 22 02 FB | 	rdlong	local03, fp
0f820     01 22 06 F1 | 	add	local03, #1
0f824     A7 22 62 FC | 	wrlong	local03, fp
0f828     04 4E 85 F1 | 	sub	fp, #4
0f82c     02 00 00 FF 
0f830     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f834     CC FE 9F CD |  if_b	jmp	#LR__1247
0f838                 | '   for i=0 to 1023
0f838     04 4E 05 F1 | 	add	fp, #4
0f83c     A7 00 68 FC | 	wrlong	#0, fp
0f840     04 4E 85 F1 | 	sub	fp, #4
0f844                 | LR__1250
0f844     24 4E 05 F1 | 	add	fp, #36
0f848     A7 00 68 FC | 	wrlong	#0, fp
0f84c                 | '     spl=0
0f84c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f84c     1C 4E 85 F1 | 	sub	fp, #28
0f850     A7 00 68 FC | 	wrlong	#0, fp
0f854                 | LR__1251
0f854     A7 22 02 FB | 	rdlong	local03, fp
0f858     02 22 66 F0 | 	shl	local03, #2
0f85c     34 4E 05 F1 | 	add	fp, #52
0f860     A7 22 02 F1 | 	add	local03, fp
0f864     11 23 02 FB | 	rdlong	local03, local03
0f868     1C 4E 85 F1 | 	sub	fp, #28
0f86c     A7 14 02 FB | 	rdlong	arg02, fp
0f870     20 4E 85 F1 | 	sub	fp, #32
0f874     58 7F 23 FF 
0f878     00 12 06 F6 | 	mov	arg01, ##1191096320
0f87c     60 3C B1 FD | 	call	#__system___float_div
0f880     FD 14 02 F6 | 	mov	arg02, result1
0f884     11 13 02 F6 | 	mov	arg01, local03
0f888     50 3A B1 FD | 	call	#__system___float_mul
0f88c     FD 22 02 F6 | 	mov	local03, result1
0f890     87 E4 1D FF 
0f894     DB 21 06 F6 | 	mov	local02, ##1003032539
0f898     04 4E 05 F1 | 	add	fp, #4
0f89c     A7 12 02 FB | 	rdlong	arg01, fp
0f8a0     04 4E 85 F1 | 	sub	fp, #4
0f8a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8a8     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8ac     00 24 06 36 |  if_ae	mov	local04, #0
0f8b0     24 36 B1 FD | 	call	#__system___float_fromuns
0f8b4     12 FB 61 F5 | 	xor	result1, local04
0f8b8     FD 14 02 F6 | 	mov	arg02, result1
0f8bc     10 13 02 F6 | 	mov	arg01, local02
0f8c0     18 3A B1 FD | 	call	#__system___float_mul
0f8c4     FD 20 02 F6 | 	mov	local02, result1
0f8c8     08 4E 05 F1 | 	add	fp, #8
0f8cc     A7 12 02 FB | 	rdlong	arg01, fp
0f8d0     08 4E 85 F1 | 	sub	fp, #8
0f8d4     01 12 06 F1 | 	add	arg01, #1
0f8d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8dc     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8e0     00 24 06 36 |  if_ae	mov	local04, #0
0f8e4     F0 35 B1 FD | 	call	#__system___float_fromuns
0f8e8     12 FB 61 F5 | 	xor	result1, local04
0f8ec     FD 14 02 F6 | 	mov	arg02, result1
0f8f0     10 13 02 F6 | 	mov	arg01, local02
0f8f4     E4 39 B1 FD | 	call	#__system___float_mul
0f8f8     FD 12 02 F6 | 	mov	arg01, result1
0f8fc     18 43 B1 FD | 	call	#__system____builtin_sinf
0f900     FD 14 02 F6 | 	mov	arg02, result1
0f904     11 13 02 F6 | 	mov	arg01, local03
0f908     D0 39 B1 FD | 	call	#__system___float_mul
0f90c     FD 14 02 F6 | 	mov	arg02, result1
0f910     24 4E 05 F1 | 	add	fp, #36
0f914     A7 12 02 FB | 	rdlong	arg01, fp
0f918     24 4E 85 F1 | 	sub	fp, #36
0f91c     EC 35 B1 FD | 	call	#__system___float_add
0f920     24 4E 05 F1 | 	add	fp, #36
0f924     A7 FA 61 FC | 	wrlong	result1, fp
0f928     1C 4E 85 F1 | 	sub	fp, #28
0f92c     A7 22 02 FB | 	rdlong	local03, fp
0f930     01 22 06 F1 | 	add	local03, #1
0f934     A7 22 62 FC | 	wrlong	local03, fp
0f938     10 22 56 F2 | 	cmps	local03, #16 wc
0f93c     14 FF 9F CD |  if_b	jmp	#LR__1251
0f940     08 4E 05 F1 | 	add	fp, #8
0f944     A7 22 02 FB | 	rdlong	local03, fp
0f948     0B 22 66 F0 | 	shl	local03, #11
0f94c     0C 4E 85 F1 | 	sub	fp, #12
0f950     A7 20 02 FB | 	rdlong	local02, fp
0f954     01 20 66 F0 | 	shl	local02, #1
0f958     10 23 02 F1 | 	add	local03, local02
0f95c     20 4E 05 F1 | 	add	fp, #32
0f960     A7 12 02 FB | 	rdlong	arg01, fp
0f964     24 4E 85 F1 | 	sub	fp, #36
0f968     01 14 06 F6 | 	mov	arg02, #1
0f96c     34 3E B1 FD | 	call	#__system___float_tointeger
0f970     FD 14 02 F6 | 	mov	arg02, result1
0f974     11 13 02 F6 | 	mov	arg01, local03
0f978     F4 DB B0 FD | 	call	#_psdpoke
0f97c     04 4E 05 F1 | 	add	fp, #4
0f980     A7 22 02 FB | 	rdlong	local03, fp
0f984     01 22 06 F1 | 	add	local03, #1
0f988     A7 22 62 FC | 	wrlong	local03, fp
0f98c     04 4E 85 F1 | 	sub	fp, #4
0f990     02 00 00 FF 
0f994     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f998     A8 FE 9F CD |  if_b	jmp	#LR__1250
0f99c                 | LR__1252
0f99c                 | LR__1253
0f99c     A7 F0 03 F6 | 	mov	ptra, fp
0f9a0     B2 00 A0 FD | 	call	#popregs_
0f9a4                 | _do_defsnd_ret
0f9a4     2D 00 64 FD | 	ret
0f9a8                 | 
0f9a8                 | ' 
0f9a8                 | ' ' ---------------  List the program. 
0f9a8                 | ' 
0f9a8                 | ' sub do_list
0f9a8                 | _do_list
0f9a8     02 4A 05 F6 | 	mov	COUNT_, #2
0f9ac     A8 00 A0 FD | 	call	#pushregs_
0f9b0     B8 F0 07 F1 | 	add	ptra, #184
0f9b4     04 4E 05 F1 | 	add	fp, #4
0f9b8     A7 00 68 FC | 	wrlong	#0, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     FF FF BF FF 
0f9c4     A7 FE 6B FC | 	wrlong	##2147483647, fp
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     4A 00 00 FF 
0f9d0     80 E4 05 F1 | 	add	objptr, ##38016
0f9d4     F2 1E 02 FB | 	rdlong	local01, objptr
0f9d8     0F 17 02 F6 | 	mov	arg03, local01
0f9dc     01 16 66 F0 | 	shl	arg03, #1
0f9e0     0F 17 02 F1 | 	add	arg03, local01
0f9e4     02 16 66 F0 | 	shl	arg03, #2
0f9e8     03 00 00 FF 
0f9ec     04 E4 85 F1 | 	sub	objptr, ##1540
0f9f0     F2 16 02 F1 | 	add	arg03, objptr
0f9f4     0B 17 02 FB | 	rdlong	arg03, arg03
0f9f8     A7 16 62 FC | 	wrlong	arg03, fp
0f9fc                 | ' 
0f9fc                 | ' startline=0 : endline=$7FFFFFFF
0f9fc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f9fc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0f9fc     01 16 0E F2 | 	cmp	arg03, #1 wz
0fa00     47 00 00 FF 
0fa04     7C E4 85 F1 | 	sub	objptr, ##36476
0fa08     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fa0c     94 BF BF FD | 	call	#_pop
0fa10     FF 1E 02 F6 | 	mov	local01, result3
0fa14     0C 4E 05 F1 | 	add	fp, #12
0fa18     A7 FA 61 FC | 	wrlong	result1, fp
0fa1c     04 4E 05 F1 | 	add	fp, #4
0fa20     A7 FC 61 FC | 	wrlong	result2, fp
0fa24     04 4E 05 F1 | 	add	fp, #4
0fa28     A7 1E 62 FC | 	wrlong	local01, fp
0fa2c     08 4E 85 F1 | 	sub	fp, #8
0fa30     A7 12 02 F6 | 	mov	arg01, fp
0fa34     0C 4E 85 F1 | 	sub	fp, #12
0fa38     2C 60 B0 FD | 	call	#_converttoint
0fa3c     04 4E 05 F1 | 	add	fp, #4
0fa40     A7 FA 61 FC | 	wrlong	result1, fp
0fa44     04 4E 85 F1 | 	sub	fp, #4
0fa48                 | LR__1260
0fa48                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fa48     A7 16 02 FB | 	rdlong	arg03, fp
0fa4c     02 16 0E F2 | 	cmp	arg03, #2 wz
0fa50     7C 00 90 5D |  if_ne	jmp	#LR__1261
0fa54     4C BF BF FD | 	call	#_pop
0fa58     FF 1E 02 F6 | 	mov	local01, result3
0fa5c     0C 4E 05 F1 | 	add	fp, #12
0fa60     A7 FA 61 FC | 	wrlong	result1, fp
0fa64     04 4E 05 F1 | 	add	fp, #4
0fa68     A7 FC 61 FC | 	wrlong	result2, fp
0fa6c     04 4E 05 F1 | 	add	fp, #4
0fa70     A7 1E 62 FC | 	wrlong	local01, fp
0fa74     08 4E 85 F1 | 	sub	fp, #8
0fa78     A7 12 02 F6 | 	mov	arg01, fp
0fa7c     0C 4E 85 F1 | 	sub	fp, #12
0fa80     E4 5F B0 FD | 	call	#_converttoint
0fa84     FD 1E 02 F6 | 	mov	local01, result1
0fa88     08 4E 05 F1 | 	add	fp, #8
0fa8c     A7 1E 62 FC | 	wrlong	local01, fp
0fa90     08 4E 85 F1 | 	sub	fp, #8
0fa94     0C BF BF FD | 	call	#_pop
0fa98     FF 1E 02 F6 | 	mov	local01, result3
0fa9c     0C 4E 05 F1 | 	add	fp, #12
0faa0     A7 FA 61 FC | 	wrlong	result1, fp
0faa4     04 4E 05 F1 | 	add	fp, #4
0faa8     A7 FC 61 FC | 	wrlong	result2, fp
0faac     04 4E 05 F1 | 	add	fp, #4
0fab0     A7 1E 62 FC | 	wrlong	local01, fp
0fab4     08 4E 85 F1 | 	sub	fp, #8
0fab8     A7 12 02 F6 | 	mov	arg01, fp
0fabc     0C 4E 85 F1 | 	sub	fp, #12
0fac0     A4 5F B0 FD | 	call	#_converttoint
0fac4     04 4E 05 F1 | 	add	fp, #4
0fac8     A7 FA 61 FC | 	wrlong	result1, fp
0facc     04 4E 85 F1 | 	sub	fp, #4
0fad0                 | LR__1261
0fad0                 | ' 
0fad0                 | ' 
0fad0                 | ' print
0fad0     00 12 06 F6 | 	mov	arg01, #0
0fad4     90 66 B1 FD | 	call	#__system___getiolock_0540
0fad8     FD 12 02 F6 | 	mov	arg01, result1
0fadc     48 0C B1 FD | 	call	#__system___lockmem
0fae0     00 12 06 F6 | 	mov	arg01, #0
0fae4     0A 14 06 F6 | 	mov	arg02, #10
0fae8     00 16 06 F6 | 	mov	arg03, #0
0faec     D4 18 B1 FD | 	call	#__system___basic_print_char
0faf0     00 12 06 F6 | 	mov	arg01, #0
0faf4     70 66 B1 FD | 	call	#__system___getiolock_0540
0faf8     FD 00 68 FC | 	wrlong	#0, result1
0fafc     4A 00 00 FF 
0fb00     84 E4 05 F1 | 	add	objptr, ##38020
0fb04     F2 20 02 FB | 	rdlong	local02, objptr
0fb08     07 00 00 FF 
0fb0c     88 E5 05 F1 | 	add	objptr, ##3976
0fb10     F2 20 62 FC | 	wrlong	local02, objptr
0fb14     52 00 00 FF 
0fb18     0C E4 85 F1 | 	sub	objptr, ##41996
0fb1c                 | ' do 
0fb1c                 | LR__1262
0fb1c     20 4E 05 F1 | 	add	fp, #32
0fb20     A7 12 02 F6 | 	mov	arg01, fp
0fb24     20 4E 85 F1 | 	sub	fp, #32
0fb28     52 00 00 FF 
0fb2c     0C E4 05 F1 | 	add	objptr, ##41996
0fb30     F2 14 02 FB | 	rdlong	arg02, objptr
0fb34     18 16 06 F6 | 	mov	arg03, #24
0fb38     46 00 00 FF 
0fb3c     40 E5 85 F1 | 	sub	objptr, ##36160
0fb40     A4 FF B0 FD | 	call	#_psram_spin2_read1
0fb44     0B 00 00 FF 
0fb48     CC E4 85 F1 | 	sub	objptr, ##5836
0fb4c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fb4c                 | '   
0fb4c                 | '   if header(0)<> $FFFFFFFF then
0fb4c     20 4E 05 F1 | 	add	fp, #32
0fb50     A7 20 02 FB | 	rdlong	local02, fp
0fb54     20 4E 85 F1 | 	sub	fp, #32
0fb58     FF FF 7F FF 
0fb5c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fb60     A8 00 90 AD |  if_e	jmp	#LR__1264
0fb64     38 4E 05 F1 | 	add	fp, #56
0fb68     3F 16 06 F6 | 	mov	arg03, #63
0fb6c     28 16 62 FD | 	setq	arg03
0fb70     A7 00 68 FC | 	wrlong	#0, fp
0fb74     A7 12 02 F6 | 	mov	arg01, fp
0fb78     10 4E 85 F1 | 	sub	fp, #16
0fb7c     A7 14 02 FB | 	rdlong	arg02, fp
0fb80     04 4E 05 F1 | 	add	fp, #4
0fb84     A7 16 02 FB | 	rdlong	arg03, fp
0fb88     2C 4E 85 F1 | 	sub	fp, #44
0fb8c     0B 00 00 FF 
0fb90     CC E4 05 F1 | 	add	objptr, ##5836
0fb94     50 FF B0 FD | 	call	#_psram_spin2_read1
0fb98     0B 00 00 FF 
0fb9c     CC E4 85 F1 | 	sub	objptr, ##5836
0fba0                 | '     longfill(linebuf,0,64)
0fba0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fba0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fba0     20 4E 05 F1 | 	add	fp, #32
0fba4     A7 20 02 FB | 	rdlong	local02, fp
0fba8     1C 4E 85 F1 | 	sub	fp, #28
0fbac     A7 1E 02 FB | 	rdlong	local01, fp
0fbb0     04 4E 85 F1 | 	sub	fp, #4
0fbb4     0F 21 52 F2 | 	cmps	local02, local01 wc
0fbb8     30 00 90 CD |  if_b	jmp	#LR__1263
0fbbc     20 4E 05 F1 | 	add	fp, #32
0fbc0     A7 20 02 FB | 	rdlong	local02, fp
0fbc4     18 4E 85 F1 | 	sub	fp, #24
0fbc8     A7 16 02 FB | 	rdlong	arg03, fp
0fbcc     08 4E 85 F1 | 	sub	fp, #8
0fbd0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fbd4     14 00 90 1D |  if_a	jmp	#LR__1263
0fbd8     38 4E 05 F1 | 	add	fp, #56
0fbdc     A7 12 02 F6 | 	mov	arg01, fp
0fbe0     38 4E 85 F1 | 	sub	fp, #56
0fbe4                 | ' 
0fbe4                 | ' write(text)
0fbe4     58 F8 B0 FD | 	call	#_hg010b_spin2_write
0fbe8                 | ' crlf
0fbe8     20 FB B0 FD | 	call	#_hg010b_spin2_crlf
0fbec                 | LR__1263
0fbec     34 4E 05 F1 | 	add	fp, #52
0fbf0     A7 20 02 FB | 	rdlong	local02, fp
0fbf4     34 4E 85 F1 | 	sub	fp, #52
0fbf8     52 00 00 FF 
0fbfc     0C E4 05 F1 | 	add	objptr, ##41996
0fc00     F2 20 62 FC | 	wrlong	local02, objptr
0fc04     52 00 00 FF 
0fc08     0C E4 85 F1 | 	sub	objptr, ##41996
0fc0c                 | LR__1264
0fc0c     34 4E 05 F1 | 	add	fp, #52
0fc10     A7 20 02 FB | 	rdlong	local02, fp
0fc14     34 4E 85 F1 | 	sub	fp, #52
0fc18     FF FF 3F FF 
0fc1c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fc20     20 4E 05 51 |  if_ne	add	fp, #32
0fc24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fc28     20 4E 85 51 |  if_ne	sub	fp, #32
0fc2c     FF FF 7F 5F 
0fc30     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fc34     E4 FE 9F 5D |  if_ne	jmp	#LR__1262
0fc38     A7 F0 03 F6 | 	mov	ptra, fp
0fc3c     B2 00 A0 FD | 	call	#popregs_
0fc40                 | _do_list_ret
0fc40     2D 00 64 FD | 	ret
0fc44                 | 
0fc44                 | ' 
0fc44                 | ' '---------------- Clear the program
0fc44                 | ' 
0fc44                 | ' sub do_new
0fc44                 | _do_new
0fc44     03 4A 05 F6 | 	mov	COUNT_, #3
0fc48     A8 00 A0 FD | 	call	#pushregs_
0fc4c     13 12 C6 F9 | 	decod	arg01, #19
0fc50     01 14 66 F6 | 	neg	arg02, #1
0fc54     D0 D8 B0 FD | 	call	#_pslpoke
0fc58     35 00 00 FF 
0fc5c     08 E4 05 F1 | 	add	objptr, ##27144
0fc60     F2 00 68 FC | 	wrlong	#0, objptr
0fc64                 | ' 
0fc64                 | ' pslpoke(memlo,$FFFFFFFF)
0fc64                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fc64     00 1E 06 F6 | 	mov	local01, #0
0fc68     20 00 00 FF 
0fc6c     10 E4 85 F1 | 	sub	objptr, ##16400
0fc70     97 1E 48 FB | 	callpa	#(@LR__1271-@LR__1270)>>2,fcache_load_ptr_
0fc74                 | LR__1270
0fc74     0F 17 02 F6 | 	mov	arg03, local01
0fc78     04 16 66 F0 | 	shl	arg03, #4
0fc7c     F2 16 02 F1 | 	add	arg03, objptr
0fc80     83 01 00 FF 
0fc84     81 14 06 F6 | 	mov	arg02, ##@LR__5442
0fc88     0B 15 62 FC | 	wrlong	arg02, arg03
0fc8c     0F 21 02 F6 | 	mov	local02, local01
0fc90     04 20 66 F0 | 	shl	local02, #4
0fc94     F2 20 02 F1 | 	add	local02, objptr
0fc98     0C 20 06 F1 | 	add	local02, #12
0fc9c     10 01 68 FC | 	wrlong	#0, local02
0fca0     01 1E 06 F1 | 	add	local01, #1
0fca4     02 00 00 FF 
0fca8     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fcac     C4 FF 9F CD |  if_b	jmp	#LR__1270
0fcb0                 | LR__1271
0fcb0     35 00 00 FF 
0fcb4     8C E4 05 F1 | 	add	objptr, ##27276
0fcb8     00 04 80 FF 
0fcbc     F2 00 68 FC | 	wrlong	##524288, objptr
0fcc0     06 00 00 FF 
0fcc4     30 E4 05 F1 | 	add	objptr, ##3120
0fcc8     00 04 80 FF 
0fccc     F2 00 68 FC | 	wrlong	##524288, objptr
0fcd0     04 E4 05 F1 | 	add	objptr, #4
0fcd4     00 04 80 FF 
0fcd8     F2 00 68 FC | 	wrlong	##524288, objptr
0fcdc     0D 00 00 FF 
0fce0     60 E4 85 F1 | 	sub	objptr, ##6752
0fce4     F2 00 68 FC | 	wrlong	#0, objptr
0fce8     07 00 00 FF 
0fcec     24 E4 05 F1 | 	add	objptr, ##3620
0fcf0     F2 00 68 FC | 	wrlong	#0, objptr
0fcf4     07 00 00 FF 
0fcf8     20 E4 85 F1 | 	sub	objptr, ##3616
0fcfc     00 04 80 FF 
0fd00     F2 00 68 FC | 	wrlong	##524288, objptr
0fd04     07 00 00 FF 
0fd08     2C E4 05 F1 | 	add	objptr, ##3628
0fd0c     F2 00 68 FC | 	wrlong	#0, objptr
0fd10     04 E4 05 F1 | 	add	objptr, #4
0fd14     FF FF FF FF 
0fd18     F2 FE 6B FC | 	wrlong	##-1, objptr
0fd1c     06 00 00 FF 
0fd20     78 E4 05 F1 | 	add	objptr, ##3192
0fd24     F2 00 68 FC | 	wrlong	#0, objptr
0fd28     04 E4 05 F1 | 	add	objptr, #4
0fd2c     F2 00 68 FC | 	wrlong	#0, objptr
0fd30                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0fd30                 | ' stackpointer=0
0fd30                 | ' lineptr=0 
0fd30                 | ' programptr=memlo ': stringptr=0
0fd30                 | ' 
0fd30                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0fd30                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0fd30     00 1E 06 F6 | 	mov	local01, #0
0fd34     06 00 00 FF 
0fd38     74 E4 85 F1 | 	sub	objptr, ##3188
0fd3c     97 16 48 FB | 	callpa	#(@LR__1273-@LR__1272)>>2,fcache_load_ptr_
0fd40                 | LR__1272
0fd40     0F 21 02 F6 | 	mov	local02, local01
0fd44     02 20 66 F0 | 	shl	local02, #2
0fd48     0F 21 02 F1 | 	add	local02, local01
0fd4c     02 20 66 F0 | 	shl	local02, #2
0fd50     F2 20 02 F1 | 	add	local02, objptr
0fd54     08 20 06 F1 | 	add	local02, #8
0fd58     FF FF FF FF 
0fd5c     10 FF 6B FC | 	wrlong	##-1, local02
0fd60     01 1E 06 F1 | 	add	local01, #1
0fd64     41 1E 56 F2 | 	cmps	local01, #65 wc
0fd68     D4 FF 9F CD |  if_b	jmp	#LR__1272
0fd6c                 | LR__1273
0fd6c     4A 00 00 FF 
0fd70     94 E4 85 F1 | 	sub	objptr, ##38036
0fd74                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0fd74     00 1E 06 F6 | 	mov	local01, #0
0fd78                 | LR__1274
0fd78     0F 21 02 F6 | 	mov	local02, local01
0fd7c     02 20 66 F0 | 	shl	local02, #2
0fd80     51 00 00 FF 
0fd84     64 E5 05 F1 | 	add	objptr, ##41828
0fd88     F2 20 02 F1 | 	add	local02, objptr
0fd8c     10 23 0A FB | 	rdlong	local03, local02 wz
0fd90     51 00 00 FF 
0fd94     64 E5 85 F1 | 	sub	objptr, ##41828
0fd98     34 00 90 AD |  if_e	jmp	#LR__1275
0fd9c     0F 13 02 F6 | 	mov	arg01, local01
0fda0     00 14 06 F6 | 	mov	arg02, #0
0fda4     00 16 06 F6 | 	mov	arg03, #0
0fda8     B4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fdac     0F 21 02 F6 | 	mov	local02, local01
0fdb0     02 20 66 F0 | 	shl	local02, #2
0fdb4     51 00 00 FF 
0fdb8     64 E5 05 F1 | 	add	objptr, ##41828
0fdbc     F2 20 02 F1 | 	add	local02, objptr
0fdc0     10 13 02 FB | 	rdlong	arg01, local02
0fdc4     51 00 00 FF 
0fdc8     64 E5 85 F1 | 	sub	objptr, ##41828
0fdcc     4C 49 B1 FD | 	call	#__system___gc_free
0fdd0                 | LR__1275
0fdd0     01 1E 06 F1 | 	add	local01, #1
0fdd4     10 1E 56 F2 | 	cmps	local01, #16 wc
0fdd8     9C FF 9F CD |  if_b	jmp	#LR__1274
0fddc     51 00 00 FF 
0fde0     B8 E5 05 F1 | 	add	objptr, ##41912
0fde4     00 C0 9F FF 
0fde8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0fdec     04 E4 05 F1 | 	add	objptr, #4
0fdf0     00 C0 9F FF 
0fdf4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0fdf8     51 00 00 FF 
0fdfc     B8 E5 85 F1 | 	sub	objptr, ##41912
0fe00     F2 22 02 FB | 	rdlong	local03, objptr
0fe04     51 00 00 FF 
0fe08     A4 E5 05 F1 | 	add	objptr, ##41892
0fe0c     F2 22 62 FC | 	wrlong	local03, objptr
0fe10     51 00 00 FF 
0fe14     A8 E5 85 F1 | 	sub	objptr, ##41896
0fe18     11 12 06 F6 | 	mov	arg01, #17
0fe1c     08 14 06 F6 | 	mov	arg02, #8
0fe20     10 16 06 F6 | 	mov	arg03, #16
0fe24     38 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fe28     10 12 06 F6 | 	mov	arg01, #16
0fe2c     20 14 06 F6 | 	mov	arg02, #32
0fe30     20 16 06 F6 | 	mov	arg03, #32
0fe34     28 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fe38     83 01 00 FF 
0fe3c     82 22 06 F6 | 	mov	local03, ##@LR__5443
0fe40     51 00 00 FF 
0fe44     D4 E5 05 F1 | 	add	objptr, ##41940
0fe48     F2 22 62 FC | 	wrlong	local03, objptr
0fe4c     51 00 00 FF 
0fe50     D4 E5 85 F1 | 	sub	objptr, ##41940
0fe54     2C C9 B0 FD | 	call	#_init_audio
0fe58     A7 F0 03 F6 | 	mov	ptra, fp
0fe5c     B2 00 A0 FD | 	call	#popregs_
0fe60                 | _do_new_ret
0fe60     2D 00 64 FD | 	ret
0fe64                 | 
0fe64                 | ' 
0fe64                 | ' '----------------------- goto
0fe64                 | ' sub do_fast_goto
0fe64                 | _do_fast_goto
0fe64     02 4A 05 F6 | 	mov	COUNT_, #2
0fe68     A8 00 A0 FD | 	call	#pushregs_
0fe6c                 | _do_fast_goto_enter
0fe6c     4A 00 00 FF 
0fe70     80 E4 05 F1 | 	add	objptr, ##38016
0fe74     F2 12 02 FB | 	rdlong	arg01, objptr
0fe78     09 1F 02 F6 | 	mov	local01, arg01
0fe7c     01 1E 66 F0 | 	shl	local01, #1
0fe80     09 1F 02 F1 | 	add	local01, arg01
0fe84     02 1E 66 F0 | 	shl	local01, #2
0fe88     03 00 00 FF 
0fe8c     04 E4 85 F1 | 	sub	objptr, ##1540
0fe90     F2 1E 02 F1 | 	add	local01, objptr
0fe94     0F 21 02 FB | 	rdlong	local02, local01
0fe98     10 13 02 F6 | 	mov	arg01, local02
0fe9c     47 00 00 FF 
0fea0     7C E4 85 F1 | 	sub	objptr, ##36476
0fea4     B0 D7 B0 FD | 	call	#_pslpeek
0fea8     FD 12 02 F6 | 	mov	arg01, result1
0feac                 | ' 
0feac                 | ' testptr=compiledline(lineptr_e).result.uresult
0feac                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0feac                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0feac     4A 00 00 FF 
0feb0     80 E4 05 F1 | 	add	objptr, ##38016
0feb4     F2 FA 01 FB | 	rdlong	result1, objptr
0feb8     FD 1E 02 F6 | 	mov	local01, result1
0febc     01 1E 66 F0 | 	shl	local01, #1
0fec0     FD 1E 02 F1 | 	add	local01, result1
0fec4     02 1E 66 F0 | 	shl	local01, #2
0fec8     03 00 00 FF 
0fecc     04 E4 85 F1 | 	sub	objptr, ##1540
0fed0     F2 1E 02 F1 | 	add	local01, objptr
0fed4     04 1E 06 F1 | 	add	local01, #4
0fed8     0F 1F 02 FB | 	rdlong	local01, local01
0fedc     0F 13 0A F2 | 	cmp	arg01, local01 wz
0fee0     47 00 00 FF 
0fee4     7C E4 85 F1 | 	sub	objptr, ##36476
0fee8     58 00 90 5D |  if_ne	jmp	#LR__1280
0feec     50 00 00 FF 
0fef0     B4 E4 05 F1 | 	add	objptr, ##41140
0fef4     F2 20 62 FC | 	wrlong	local02, objptr
0fef8     06 00 00 FF 
0fefc     38 E4 85 F1 | 	sub	objptr, ##3128
0ff00     F2 20 02 FB | 	rdlong	local02, objptr
0ff04     01 20 86 F1 | 	sub	local02, #1
0ff08     04 E4 05 F1 | 	add	objptr, #4
0ff0c     F2 20 62 FC | 	wrlong	local02, objptr
0ff10                 | '   runptr=testptr
0ff10                 | '   lineptr_e=lineptr-1
0ff10                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0ff10     06 00 00 FF 
0ff14     80 E4 05 F1 | 	add	objptr, ##3200
0ff18     F2 20 02 FB | 	rdlong	local02, objptr
0ff1c     50 00 00 FF 
0ff20     00 E5 85 F1 | 	sub	objptr, ##41216
0ff24     FF FF 3F FF 
0ff28     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ff2c     50 00 00 AF 
0ff30     00 E5 05 A1 |  if_e	add	objptr, ##41216
0ff34     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ff38     50 00 00 AF 
0ff3c     00 E5 85 A1 |  if_e	sub	objptr, ##41216
0ff40     04 00 90 FD | 	jmp	#LR__1281
0ff44                 | LR__1280
0ff44     84 0E B0 FD | 	call	#_do_find_goto
0ff48                 | LR__1281
0ff48     A7 F0 03 F6 | 	mov	ptra, fp
0ff4c     B2 00 A0 FD | 	call	#popregs_
0ff50                 | _do_fast_goto_ret
0ff50     2D 00 64 FD | 	ret
0ff54                 | 
0ff54                 | ' 
0ff54                 | ' sub do_open
0ff54                 | _do_open
0ff54     02 4A 05 F6 | 	mov	COUNT_, #2
0ff58     A8 00 A0 FD | 	call	#pushregs_
0ff5c     20 F0 07 F1 | 	add	ptra, #32
0ff60     4A 00 00 FF 
0ff64     80 E4 05 F1 | 	add	objptr, ##38016
0ff68     F2 16 02 FB | 	rdlong	arg03, objptr
0ff6c     0B 15 02 F6 | 	mov	arg02, arg03
0ff70     01 14 66 F0 | 	shl	arg02, #1
0ff74     0B 15 02 F1 | 	add	arg02, arg03
0ff78     02 14 66 F0 | 	shl	arg02, #2
0ff7c     03 00 00 FF 
0ff80     04 E4 85 F1 | 	sub	objptr, ##1540
0ff84     F2 14 02 F1 | 	add	arg02, objptr
0ff88     0A 17 02 FB | 	rdlong	arg03, arg02
0ff8c     10 4E 05 F1 | 	add	fp, #16
0ff90     A7 16 62 FC | 	wrlong	arg03, fp
0ff94     10 4E 85 F1 | 	sub	fp, #16
0ff98     47 00 00 FF 
0ff9c     7C E4 85 F1 | 	sub	objptr, ##36476
0ffa0     00 BA BF FD | 	call	#_pop
0ffa4     FF 16 02 F6 | 	mov	arg03, result3
0ffa8     A7 FA 61 FC | 	wrlong	result1, fp
0ffac     04 4E 05 F1 | 	add	fp, #4
0ffb0     A7 FC 61 FC | 	wrlong	result2, fp
0ffb4     04 4E 05 F1 | 	add	fp, #4
0ffb8     A7 16 62 FC | 	wrlong	arg03, fp
0ffbc                 | ' 
0ffbc                 | ' numpar=compiledline(lineptr_e).result.uresult
0ffbc                 | ' 
0ffbc                 | ' t1=pop()
0ffbc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0ffbc     08 4E 85 F1 | 	sub	fp, #8
0ffc0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ffc4     18 00 90 5D |  if_ne	jmp	#LR__1290
0ffc8     A7 12 02 FB | 	rdlong	arg01, fp
0ffcc     74 12 B0 FD | 	call	#_convertstring
0ffd0     A7 FA 61 FC | 	wrlong	result1, fp
0ffd4     08 4E 05 F1 | 	add	fp, #8
0ffd8     A7 3E 68 FC | 	wrlong	#31, fp
0ffdc     08 4E 85 F1 | 	sub	fp, #8
0ffe0                 | LR__1290
0ffe0                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
0ffe0     08 4E 05 F1 | 	add	fp, #8
0ffe4     A7 16 02 FB | 	rdlong	arg03, fp
0ffe8     08 4E 85 F1 | 	sub	fp, #8
0ffec     1F 16 0E F2 | 	cmp	arg03, #31 wz
0fff0     44 00 90 AD |  if_e	jmp	#LR__1291
0fff4     00 12 06 F6 | 	mov	arg01, #0
0fff8     6C 61 B1 FD | 	call	#__system___getiolock_0540
0fffc     FD 12 02 F6 | 	mov	arg01, result1
10000     24 07 B1 FD | 	call	#__system___lockmem
10004     83 01 00 FF 
10008     8D 14 06 F6 | 	mov	arg02, ##@LR__5444
1000c     00 12 06 F6 | 	mov	arg01, #0
10010     00 16 06 F6 | 	mov	arg03, #0
10014     04 14 B1 FD | 	call	#__system___basic_print_string
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     0A 14 06 F6 | 	mov	arg02, #10
10020     00 16 06 F6 | 	mov	arg03, #0
10024     9C 13 B1 FD | 	call	#__system___basic_print_char
10028     00 12 06 F6 | 	mov	arg01, #0
1002c     38 61 B1 FD | 	call	#__system___getiolock_0540
10030     FD 00 68 FC | 	wrlong	#0, result1
10034     28 02 90 FD | 	jmp	#LR__1302
10038                 | LR__1291
10038     A7 16 02 FB | 	rdlong	arg03, fp
1003c     0C 4E 05 F1 | 	add	fp, #12
10040     A7 16 62 FC | 	wrlong	arg03, fp
10044     0C 4E 85 F1 | 	sub	fp, #12
10048     58 B9 BF FD | 	call	#_pop
1004c     FF 16 02 F6 | 	mov	arg03, result3
10050     A7 FA 61 FC | 	wrlong	result1, fp
10054     04 4E 05 F1 | 	add	fp, #4
10058     A7 FC 61 FC | 	wrlong	result2, fp
1005c     04 4E 05 F1 | 	add	fp, #4
10060     A7 16 62 FC | 	wrlong	arg03, fp
10064                 | ' filename=t1.result.sresult
10064                 | ' t1=pop()
10064                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10064     08 4E 85 F1 | 	sub	fp, #8
10068     2B 16 0E F2 | 	cmp	arg03, #43 wz
1006c     18 00 90 5D |  if_ne	jmp	#LR__1292
10070     A7 12 02 FB | 	rdlong	arg01, fp
10074     CC 11 B0 FD | 	call	#_convertstring
10078     A7 FA 61 FC | 	wrlong	result1, fp
1007c     08 4E 05 F1 | 	add	fp, #8
10080     A7 3E 68 FC | 	wrlong	#31, fp
10084     08 4E 85 F1 | 	sub	fp, #8
10088                 | LR__1292
10088     14 4E 05 F1 | 	add	fp, #20
1008c     A7 00 68 FC | 	wrlong	#0, fp
10090                 | ' mode=0
10090                 | ' if t1.result_type=result_string then
10090     0C 4E 85 F1 | 	sub	fp, #12
10094     A7 14 02 FB | 	rdlong	arg02, fp
10098     08 4E 85 F1 | 	sub	fp, #8
1009c     1F 14 0E F2 | 	cmp	arg02, #31 wz
100a0     64 00 90 5D |  if_ne	jmp	#LR__1293
100a4                 | '   if t1.result.sresult="read" then mode=1
100a4     A7 12 02 FB | 	rdlong	arg01, fp
100a8     83 01 00 FF 
100ac     9F 14 06 F6 | 	mov	arg02, ##@LR__5445
100b0     9C 06 B1 FD | 	call	#__system___string_cmp
100b4     00 FA 0D F2 | 	cmp	result1, #0 wz
100b8     14 4E 05 A1 |  if_e	add	fp, #20
100bc     A7 02 68 AC |  if_e	wrlong	#1, fp
100c0     14 4E 85 A1 |  if_e	sub	fp, #20
100c4                 | '   if t1.result.sresult="write" then mode=2
100c4     A7 12 02 FB | 	rdlong	arg01, fp
100c8     83 01 00 FF 
100cc     A4 14 06 F6 | 	mov	arg02, ##@LR__5446
100d0     7C 06 B1 FD | 	call	#__system___string_cmp
100d4     00 FA 0D F2 | 	cmp	result1, #0 wz
100d8     14 4E 05 A1 |  if_e	add	fp, #20
100dc     A7 04 68 AC |  if_e	wrlong	#2, fp
100e0     14 4E 85 A1 |  if_e	sub	fp, #20
100e4                 | '   if t1.result.sresult="append" then mode=4
100e4     A7 12 02 FB | 	rdlong	arg01, fp
100e8     83 01 00 FF 
100ec     AA 14 06 F6 | 	mov	arg02, ##@LR__5447
100f0     5C 06 B1 FD | 	call	#__system___string_cmp
100f4     00 FA 0D F2 | 	cmp	result1, #0 wz
100f8     14 4E 05 A1 |  if_e	add	fp, #20
100fc     A7 08 68 AC |  if_e	wrlong	#4, fp
10100     14 4E 85 A1 |  if_e	sub	fp, #20
10104     14 00 90 FD | 	jmp	#LR__1294
10108                 | LR__1293
10108     A7 12 02 F6 | 	mov	arg01, fp
1010c     58 59 B0 FD | 	call	#_converttoint
10110     14 4E 05 F1 | 	add	fp, #20
10114     A7 FA 61 FC | 	wrlong	result1, fp
10118     14 4E 85 F1 | 	sub	fp, #20
1011c                 | LR__1294
1011c     84 B8 BF FD | 	call	#_pop
10120     FF 16 02 F6 | 	mov	arg03, result3
10124     A7 FA 61 FC | 	wrlong	result1, fp
10128     04 4E 05 F1 | 	add	fp, #4
1012c     A7 FC 61 FC | 	wrlong	result2, fp
10130     04 4E 05 F1 | 	add	fp, #4
10134     A7 16 62 FC | 	wrlong	arg03, fp
10138                 | ' t1=pop()
10138                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10138     08 4E 85 F1 | 	sub	fp, #8
1013c     2C 16 0E F2 | 	cmp	arg03, #44 wz
10140     44 00 90 AD |  if_e	jmp	#LR__1295
10144     00 12 06 F6 | 	mov	arg01, #0
10148     1C 60 B1 FD | 	call	#__system___getiolock_0540
1014c     FD 12 02 F6 | 	mov	arg01, result1
10150     D4 05 B1 FD | 	call	#__system___lockmem
10154     83 01 00 FF 
10158     B1 14 06 F6 | 	mov	arg02, ##@LR__5448
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     00 16 06 F6 | 	mov	arg03, #0
10164     B4 12 B1 FD | 	call	#__system___basic_print_string
10168     00 12 06 F6 | 	mov	arg01, #0
1016c     0A 14 06 F6 | 	mov	arg02, #10
10170     00 16 06 F6 | 	mov	arg03, #0
10174     4C 12 B1 FD | 	call	#__system___basic_print_char
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     E8 5F B1 FD | 	call	#__system___getiolock_0540
10180     FD 00 68 FC | 	wrlong	#0, result1
10184     D8 00 90 FD | 	jmp	#LR__1302
10188                 | LR__1295
10188     A7 1E 02 FB | 	rdlong	local01, fp
1018c     18 4E 05 F1 | 	add	fp, #24
10190     A7 1E 62 FC | 	wrlong	local01, fp
10194                 | ' channel  = t1.result.iresult
10194                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
10194                 | ' select case  mode
10194     04 4E 85 F1 | 	sub	fp, #4
10198     A7 20 02 FB | 	rdlong	local02, fp
1019c     14 4E 85 F1 | 	sub	fp, #20
101a0     01 20 86 F1 | 	sub	local02, #1
101a4     04 20 26 F3 | 	fle	local02, #4
101a8     30 20 62 FD | 	jmprel	local02
101ac                 | LR__1296
101ac     10 00 90 FD | 	jmp	#LR__1297
101b0     2C 00 90 FD | 	jmp	#LR__1298
101b4     68 00 90 FD | 	jmp	#LR__1300
101b8     44 00 90 FD | 	jmp	#LR__1299
101bc     60 00 90 FD | 	jmp	#LR__1300
101c0                 | LR__1297
101c0     18 4E 05 F1 | 	add	fp, #24
101c4     A7 12 02 FB | 	rdlong	arg01, fp
101c8     0C 4E 85 F1 | 	sub	fp, #12
101cc     A7 14 02 FB | 	rdlong	arg02, fp
101d0     0C 4E 85 F1 | 	sub	fp, #12
101d4     00 16 06 F6 | 	mov	arg03, #0
101d8     50 11 B1 FD | 	call	#__system___basic_open_string
101dc     80 00 90 FD | 	jmp	#LR__1301
101e0                 | LR__1298
101e0     18 4E 05 F1 | 	add	fp, #24
101e4     A7 12 02 FB | 	rdlong	arg01, fp
101e8     0C 4E 85 F1 | 	sub	fp, #12
101ec     A7 14 02 FB | 	rdlong	arg02, fp
101f0     0C 4E 85 F1 | 	sub	fp, #12
101f4     0D 16 06 F6 | 	mov	arg03, #13
101f8     30 11 B1 FD | 	call	#__system___basic_open_string
101fc     60 00 90 FD | 	jmp	#LR__1301
10200                 | LR__1299
10200     18 4E 05 F1 | 	add	fp, #24
10204     A7 12 02 FB | 	rdlong	arg01, fp
10208     0C 4E 85 F1 | 	sub	fp, #12
1020c     A7 14 02 FB | 	rdlong	arg02, fp
10210     0C 4E 85 F1 | 	sub	fp, #12
10214     25 16 06 F6 | 	mov	arg03, #37
10218     10 11 B1 FD | 	call	#__system___basic_open_string
1021c     40 00 90 FD | 	jmp	#LR__1301
10220                 | LR__1300
10220     00 12 06 F6 | 	mov	arg01, #0
10224     40 5F B1 FD | 	call	#__system___getiolock_0540
10228     FD 12 02 F6 | 	mov	arg01, result1
1022c     F8 04 B1 FD | 	call	#__system___lockmem
10230     83 01 00 FF 
10234     C3 14 06 F6 | 	mov	arg02, ##@LR__5449
10238     00 12 06 F6 | 	mov	arg01, #0
1023c     00 16 06 F6 | 	mov	arg03, #0
10240     D8 11 B1 FD | 	call	#__system___basic_print_string
10244     00 12 06 F6 | 	mov	arg01, #0
10248     0A 14 06 F6 | 	mov	arg02, #10
1024c     00 16 06 F6 | 	mov	arg03, #0
10250     70 11 B1 FD | 	call	#__system___basic_print_char
10254     00 12 06 F6 | 	mov	arg01, #0
10258     0C 5F B1 FD | 	call	#__system___getiolock_0540
1025c     FD 00 68 FC | 	wrlong	#0, result1
10260                 | LR__1301
10260                 | LR__1302
10260     A7 F0 03 F6 | 	mov	ptra, fp
10264     B2 00 A0 FD | 	call	#popregs_
10268                 | _do_open_ret
10268     2D 00 64 FD | 	ret
1026c                 | 
1026c                 | ' 
1026c                 | ' 
1026c                 | ' sub do_close
1026c                 | _do_close
1026c     03 4A 05 F6 | 	mov	COUNT_, #3
10270     A8 00 A0 FD | 	call	#pushregs_
10274     2C B7 BF FD | 	call	#_pop
10278     FD 1E 02 F6 | 	mov	local01, result1
1027c     FF 16 02 F6 | 	mov	arg03, result3
10280     FE 20 02 F6 | 	mov	local02, result2
10284     0B 23 02 F6 | 	mov	local03, arg03
10288                 | ' numpar=compiledline(lineptr_e).result.uresult
10288                 | ' 
10288                 | ' t1=pop()
10288                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10288     2C 22 0E F2 | 	cmp	local03, #44 wz
1028c     44 00 90 AD |  if_e	jmp	#LR__1310
10290     00 12 06 F6 | 	mov	arg01, #0
10294     D0 5E B1 FD | 	call	#__system___getiolock_0540
10298     FD 12 02 F6 | 	mov	arg01, result1
1029c     88 04 B1 FD | 	call	#__system___lockmem
102a0     83 01 00 FF 
102a4     D6 14 06 F6 | 	mov	arg02, ##@LR__5450
102a8     00 12 06 F6 | 	mov	arg01, #0
102ac     00 16 06 F6 | 	mov	arg03, #0
102b0     68 11 B1 FD | 	call	#__system___basic_print_string
102b4     00 12 06 F6 | 	mov	arg01, #0
102b8     0A 14 06 F6 | 	mov	arg02, #10
102bc     00 16 06 F6 | 	mov	arg03, #0
102c0     00 11 B1 FD | 	call	#__system___basic_print_char
102c4     00 12 06 F6 | 	mov	arg01, #0
102c8     9C 5E B1 FD | 	call	#__system___getiolock_0540
102cc     FD 00 68 FC | 	wrlong	#0, result1
102d0     08 00 90 FD | 	jmp	#LR__1311
102d4                 | LR__1310
102d4                 | ' channel  = t1.result.iresult
102d4                 | ' close #channel
102d4     0F 13 02 F6 | 	mov	arg01, local01
102d8     BC 54 B1 FD | 	call	#__system__close
102dc                 | LR__1311
102dc     A7 F0 03 F6 | 	mov	ptra, fp
102e0     B2 00 A0 FD | 	call	#popregs_
102e4                 | _do_close_ret
102e4     2D 00 64 FD | 	ret
102e8                 | 
102e8                 | ' 
102e8                 | ' sub  do_get
102e8                 | _do_get
102e8     09 4A 05 F6 | 	mov	COUNT_, #9
102ec     A8 00 A0 FD | 	call	#pushregs_
102f0     40 F0 07 F1 | 	add	ptra, #64
102f4     4A 00 00 FF 
102f8     80 E4 05 F1 | 	add	objptr, ##38016
102fc     F2 1A 02 FB | 	rdlong	arg05, objptr
10300     0D 19 02 F6 | 	mov	arg04, arg05
10304     01 18 66 F0 | 	shl	arg04, #1
10308     0D 19 02 F1 | 	add	arg04, arg05
1030c     02 18 66 F0 | 	shl	arg04, #2
10310     03 00 00 FF 
10314     04 E4 85 F1 | 	sub	objptr, ##1540
10318     F2 18 02 F1 | 	add	arg04, objptr
1031c     0C 1B 02 FB | 	rdlong	arg05, arg04
10320     A7 1A 62 FC | 	wrlong	arg05, fp
10324                 | ' numpar=compiledline(lineptr_e).result.uresult
10324                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10324     04 1A 0E F2 | 	cmp	arg05, #4 wz
10328     47 00 00 FF 
1032c     7C E4 85 F1 | 	sub	objptr, ##36476
10330     48 00 90 5D |  if_ne	jmp	#LR__1320
10334     6C B6 BF FD | 	call	#_pop
10338     FF 1A 02 F6 | 	mov	arg05, result3
1033c     1C 4E 05 F1 | 	add	fp, #28
10340     A7 FA 61 FC | 	wrlong	result1, fp
10344     04 4E 05 F1 | 	add	fp, #4
10348     A7 FC 61 FC | 	wrlong	result2, fp
1034c     04 4E 05 F1 | 	add	fp, #4
10350     A7 1A 62 FC | 	wrlong	arg05, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358     A7 12 02 F6 | 	mov	arg01, fp
1035c     1C 4E 85 F1 | 	sub	fp, #28
10360     04 57 B0 FD | 	call	#_converttoint
10364     52 00 00 FF 
10368     10 E4 05 F1 | 	add	objptr, ##42000
1036c     F2 FA 61 FC | 	wrlong	result1, objptr
10370     52 00 00 FF 
10374     10 E4 85 F1 | 	sub	objptr, ##42000
10378     18 00 90 FD | 	jmp	#LR__1321
1037c                 | LR__1320
1037c     52 00 00 FF 
10380     10 E4 05 F1 | 	add	objptr, ##42000
10384     FF FF FF FF 
10388     F2 FE 6B FC | 	wrlong	##-1, objptr
1038c     52 00 00 FF 
10390     10 E4 85 F1 | 	sub	objptr, ##42000
10394                 | LR__1321
10394                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10394     A7 16 02 FB | 	rdlong	arg03, fp
10398     03 16 56 F2 | 	cmps	arg03, #3 wc
1039c     40 00 90 CD |  if_b	jmp	#LR__1322
103a0     00 B6 BF FD | 	call	#_pop
103a4     FF 16 02 F6 | 	mov	arg03, result3
103a8     1C 4E 05 F1 | 	add	fp, #28
103ac     A7 FA 61 FC | 	wrlong	result1, fp
103b0     04 4E 05 F1 | 	add	fp, #4
103b4     A7 FC 61 FC | 	wrlong	result2, fp
103b8     04 4E 05 F1 | 	add	fp, #4
103bc     A7 16 62 FC | 	wrlong	arg03, fp
103c0     08 4E 85 F1 | 	sub	fp, #8
103c4     A7 12 02 F6 | 	mov	arg01, fp
103c8     1C 4E 85 F1 | 	sub	fp, #28
103cc     98 56 B0 FD | 	call	#_converttoint
103d0     08 4E 05 F1 | 	add	fp, #8
103d4     A7 FA 61 FC | 	wrlong	result1, fp
103d8     08 4E 85 F1 | 	sub	fp, #8
103dc     0C 00 90 FD | 	jmp	#LR__1323
103e0                 | LR__1322
103e0     08 4E 05 F1 | 	add	fp, #8
103e4     A7 02 68 FC | 	wrlong	#1, fp
103e8     08 4E 85 F1 | 	sub	fp, #8
103ec                 | LR__1323
103ec                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
103ec     A7 16 02 FB | 	rdlong	arg03, fp
103f0     02 16 56 F2 | 	cmps	arg03, #2 wc
103f4     3C 00 90 CD |  if_b	jmp	#LR__1324
103f8     A8 B5 BF FD | 	call	#_pop
103fc     FF 16 02 F6 | 	mov	arg03, result3
10400     1C 4E 05 F1 | 	add	fp, #28
10404     A7 FA 61 FC | 	wrlong	result1, fp
10408     04 4E 05 F1 | 	add	fp, #4
1040c     A7 FC 61 FC | 	wrlong	result2, fp
10410     04 4E 05 F1 | 	add	fp, #4
10414     A7 16 62 FC | 	wrlong	arg03, fp
10418     08 4E 85 F1 | 	sub	fp, #8
1041c     A7 12 02 F6 | 	mov	arg01, fp
10420     1C 4E 85 F1 | 	sub	fp, #28
10424     40 56 B0 FD | 	call	#_converttoint
10428     0C 4E 05 F1 | 	add	fp, #12
1042c     A7 FA 61 FC | 	wrlong	result1, fp
10430     0C 4E 85 F1 | 	sub	fp, #12
10434                 | LR__1324
10434     6C B5 BF FD | 	call	#_pop
10438     FF 16 02 F6 | 	mov	arg03, result3
1043c     1C 4E 05 F1 | 	add	fp, #28
10440     A7 FA 61 FC | 	wrlong	result1, fp
10444     04 4E 05 F1 | 	add	fp, #4
10448     A7 FC 61 FC | 	wrlong	result2, fp
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 16 62 FC | 	wrlong	arg03, fp
10454     08 4E 85 F1 | 	sub	fp, #8
10458     A7 12 02 F6 | 	mov	arg01, fp
1045c     1C 4E 85 F1 | 	sub	fp, #28
10460     04 56 B0 FD | 	call	#_converttoint
10464     04 4E 05 F1 | 	add	fp, #4
10468     A7 FA 61 FC | 	wrlong	result1, fp
1046c     10 4E 05 F1 | 	add	fp, #16
10470     A7 16 02 FB | 	rdlong	arg03, fp
10474     14 4E 85 F1 | 	sub	fp, #20
10478     02 16 66 F0 | 	shl	arg03, #2
1047c     50 00 00 FF 
10480     C0 E4 05 F1 | 	add	objptr, ##41152
10484     F2 1E 02 F6 | 	mov	local01, objptr
10488     F2 16 02 F1 | 	add	arg03, objptr
1048c     0B 01 68 FC | 	wrlong	#0, arg03
10490                 | ' t1=pop() : channel=converttoint(t1)
10490                 | ' 
10490                 | ' getres(j)=0
10490                 | ' if pos>=0 then
10490     01 00 00 FF 
10494     50 E5 05 F1 | 	add	objptr, ##848
10498     F2 20 02 FB | 	rdlong	local02, objptr
1049c     52 00 00 FF 
104a0     10 E4 85 F1 | 	sub	objptr, ##42000
104a4     00 20 56 F2 | 	cmps	local02, #0 wc
104a8     F0 01 90 CD |  if_b	jmp	#LR__1331
104ac                 | '   for i=0 to  amount/1024
104ac     10 4E 05 F1 | 	add	fp, #16
104b0     A7 00 68 FC | 	wrlong	#0, fp
104b4     08 4E 85 F1 | 	sub	fp, #8
104b8     A7 22 02 FB | 	rdlong	local03, fp
104bc     08 4E 85 F1 | 	sub	fp, #8
104c0     11 25 52 F6 | 	abs	local04, local03 wc
104c4     0A 24 46 F0 | 	shr	local04, #10
104c8     12 25 82 F6 | 	negc	local04, local04
104cc     01 24 06 F1 | 	add	local04, #1
104d0                 | LR__1325
104d0     10 4E 05 F1 | 	add	fp, #16
104d4     A7 22 02 FB | 	rdlong	local03, fp
104d8     10 4E 85 F1 | 	sub	fp, #16
104dc     12 23 52 F2 | 	cmps	local03, local04 wc
104e0     9C 03 90 3D |  if_ae	jmp	#LR__1339
104e4                 | '     get #channel,pos+1,block(0),amount,r
104e4     04 4E 05 F1 | 	add	fp, #4
104e8     A7 12 02 FB | 	rdlong	arg01, fp
104ec     52 00 00 FF 
104f0     10 E4 05 F1 | 	add	objptr, ##42000
104f4     F2 14 02 FB | 	rdlong	arg02, objptr
104f8     01 14 06 F1 | 	add	arg02, #1
104fc     03 00 00 FF 
10500     60 E5 85 F1 | 	sub	objptr, ##1888
10504     F2 16 02 F6 | 	mov	arg03, objptr
10508     4E 00 00 FF 
1050c     B0 E4 85 F1 | 	sub	objptr, ##40112
10510     04 4E 05 F1 | 	add	fp, #4
10514     A7 18 02 FB | 	rdlong	arg04, fp
10518     08 4E 85 F1 | 	sub	fp, #8
1051c     01 1A 06 F6 | 	mov	arg05, #1
10520     74 10 B1 FD | 	call	#__system___basic_get
10524     18 4E 05 F1 | 	add	fp, #24
10528     A7 FA 61 FC | 	wrlong	result1, fp
1052c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1052c     0C 4E 85 F1 | 	sub	fp, #12
10530     A7 20 02 FB | 	rdlong	local02, fp
10534     0C 4E 85 F1 | 	sub	fp, #12
10538     00 04 00 FF 
1053c     00 20 56 F2 | 	cmps	local02, ##524288 wc
10540     7C 00 90 3D |  if_ae	jmp	#LR__1327
10544     14 4E 05 F1 | 	add	fp, #20
10548     A7 00 68 FC | 	wrlong	#0, fp
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 26 02 FB | 	rdlong	local05, fp
10554     18 4E 85 F1 | 	sub	fp, #24
10558                 | LR__1326
10558     14 4E 05 F1 | 	add	fp, #20
1055c     A7 20 02 FB | 	rdlong	local02, fp
10560     14 4E 85 F1 | 	sub	fp, #20
10564     13 21 52 F2 | 	cmps	local02, local05 wc
10568     D8 00 90 3D |  if_ae	jmp	#LR__1330
1056c     0C 4E 05 F1 | 	add	fp, #12
10570     A7 12 02 FB | 	rdlong	arg01, fp
10574     04 4E 05 F1 | 	add	fp, #4
10578     A7 22 02 FB | 	rdlong	local03, fp
1057c     0A 22 66 F0 | 	shl	local03, #10
10580     11 13 02 F1 | 	add	arg01, local03
10584     04 4E 05 F1 | 	add	fp, #4
10588     A7 22 02 FB | 	rdlong	local03, fp
1058c     11 13 02 F1 | 	add	arg01, local03
10590     4E 00 00 FF 
10594     B0 E4 05 F1 | 	add	objptr, ##40112
10598     F2 22 02 F1 | 	add	local03, objptr
1059c     11 15 C2 FA | 	rdbyte	arg02, local03
105a0     09 15 42 FC | 	wrbyte	arg02, arg01
105a4     4E 00 00 FF 
105a8     B0 E4 85 F1 | 	sub	objptr, ##40112
105ac     A7 22 02 FB | 	rdlong	local03, fp
105b0     01 22 06 F1 | 	add	local03, #1
105b4     A7 22 62 FC | 	wrlong	local03, fp
105b8     14 4E 85 F1 | 	sub	fp, #20
105bc     98 FF 9F FD | 	jmp	#LR__1326
105c0                 | LR__1327
105c0     14 4E 05 F1 | 	add	fp, #20
105c4     A7 00 68 FC | 	wrlong	#0, fp
105c8     04 4E 05 F1 | 	add	fp, #4
105cc     A7 28 02 FB | 	rdlong	local06, fp
105d0     18 4E 85 F1 | 	sub	fp, #24
105d4                 | LR__1328
105d4     14 4E 05 F1 | 	add	fp, #20
105d8     A7 20 02 FB | 	rdlong	local02, fp
105dc     14 4E 85 F1 | 	sub	fp, #20
105e0     14 21 52 F2 | 	cmps	local02, local06 wc
105e4     5C 00 90 3D |  if_ae	jmp	#LR__1329
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 12 02 FB | 	rdlong	arg01, fp
105f0     04 4E 05 F1 | 	add	fp, #4
105f4     A7 26 02 FB | 	rdlong	local05, fp
105f8     0A 26 66 F0 | 	shl	local05, #10
105fc     13 13 02 F1 | 	add	arg01, local05
10600     04 4E 05 F1 | 	add	fp, #4
10604     A7 26 02 FB | 	rdlong	local05, fp
10608     13 13 02 F1 | 	add	arg01, local05
1060c     14 4E 85 F1 | 	sub	fp, #20
10610     4E 00 00 FF 
10614     B0 E4 05 F1 | 	add	objptr, ##40112
10618     F2 26 02 F1 | 	add	local05, objptr
1061c     13 15 C2 FA | 	rdbyte	arg02, local05
10620     4E 00 00 FF 
10624     B0 E4 85 F1 | 	sub	objptr, ##40112
10628     8C CF B0 FD | 	call	#_pspoke
1062c     14 4E 05 F1 | 	add	fp, #20
10630     A7 26 02 FB | 	rdlong	local05, fp
10634     01 26 06 F1 | 	add	local05, #1
10638     A7 26 62 FC | 	wrlong	local05, fp
1063c     14 4E 85 F1 | 	sub	fp, #20
10640     90 FF 9F FD | 	jmp	#LR__1328
10644                 | LR__1329
10644                 | LR__1330
10644     14 4E 05 F1 | 	add	fp, #20
10648     A7 28 02 FB | 	rdlong	local06, fp
1064c     14 23 02 F6 | 	mov	local03, local06
10650     02 22 66 F0 | 	shl	local03, #2
10654     50 00 00 FF 
10658     C0 E4 05 F1 | 	add	objptr, ##41152
1065c     F2 22 02 F1 | 	add	local03, objptr
10660     02 28 66 F0 | 	shl	local06, #2
10664     F2 28 02 F1 | 	add	local06, objptr
10668     14 29 02 FB | 	rdlong	local06, local06
1066c     04 4E 05 F1 | 	add	fp, #4
10670     A7 26 02 FB | 	rdlong	local05, fp
10674     13 29 02 F1 | 	add	local06, local05
10678     11 29 62 FC | 	wrlong	local06, local03
1067c     08 4E 85 F1 | 	sub	fp, #8
10680     A7 28 02 FB | 	rdlong	local06, fp
10684     01 28 06 F1 | 	add	local06, #1
10688     A7 28 62 FC | 	wrlong	local06, fp
1068c     10 4E 85 F1 | 	sub	fp, #16
10690     50 00 00 FF 
10694     C0 E4 85 F1 | 	sub	objptr, ##41152
10698     34 FE 9F FD | 	jmp	#LR__1325
1069c                 | LR__1331
1069c                 | '   for i=0 to  amount/1024
1069c     10 4E 05 F1 | 	add	fp, #16
106a0     A7 00 68 FC | 	wrlong	#0, fp
106a4     08 4E 85 F1 | 	sub	fp, #8
106a8     A7 22 02 FB | 	rdlong	local03, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     11 2B 52 F6 | 	abs	local07, local03 wc
106b4     0A 2A 46 F0 | 	shr	local07, #10
106b8     15 2B 82 F6 | 	negc	local07, local07
106bc     01 2A 06 F1 | 	add	local07, #1
106c0                 | LR__1332
106c0     10 4E 05 F1 | 	add	fp, #16
106c4     A7 22 02 FB | 	rdlong	local03, fp
106c8     10 4E 85 F1 | 	sub	fp, #16
106cc     15 23 52 F2 | 	cmps	local03, local07 wc
106d0     AC 01 90 3D |  if_ae	jmp	#LR__1338
106d4                 | '     get #channel,,block(0),amount,r
106d4     04 4E 05 F1 | 	add	fp, #4
106d8     A7 12 02 FB | 	rdlong	arg01, fp
106dc     4E 00 00 FF 
106e0     B0 E4 05 F1 | 	add	objptr, ##40112
106e4     F2 16 02 F6 | 	mov	arg03, objptr
106e8     4E 00 00 FF 
106ec     B0 E4 85 F1 | 	sub	objptr, ##40112
106f0     04 4E 05 F1 | 	add	fp, #4
106f4     A7 18 02 FB | 	rdlong	arg04, fp
106f8     08 4E 85 F1 | 	sub	fp, #8
106fc     00 14 06 F6 | 	mov	arg02, #0
10700     01 1A 06 F6 | 	mov	arg05, #1
10704     90 0E B1 FD | 	call	#__system___basic_get
10708     18 4E 05 F1 | 	add	fp, #24
1070c     A7 FA 61 FC | 	wrlong	result1, fp
10710                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10710     0C 4E 85 F1 | 	sub	fp, #12
10714     A7 20 02 FB | 	rdlong	local02, fp
10718     0C 4E 85 F1 | 	sub	fp, #12
1071c     00 04 00 FF 
10720     00 20 56 F2 | 	cmps	local02, ##524288 wc
10724     7C 00 90 3D |  if_ae	jmp	#LR__1334
10728     14 4E 05 F1 | 	add	fp, #20
1072c     A7 00 68 FC | 	wrlong	#0, fp
10730     04 4E 05 F1 | 	add	fp, #4
10734     A7 2C 02 FB | 	rdlong	local08, fp
10738     18 4E 85 F1 | 	sub	fp, #24
1073c                 | LR__1333
1073c     14 4E 05 F1 | 	add	fp, #20
10740     A7 20 02 FB | 	rdlong	local02, fp
10744     14 4E 85 F1 | 	sub	fp, #20
10748     16 21 52 F2 | 	cmps	local02, local08 wc
1074c     D8 00 90 3D |  if_ae	jmp	#LR__1337
10750     0C 4E 05 F1 | 	add	fp, #12
10754     A7 12 02 FB | 	rdlong	arg01, fp
10758     04 4E 05 F1 | 	add	fp, #4
1075c     A7 28 02 FB | 	rdlong	local06, fp
10760     0A 28 66 F0 | 	shl	local06, #10
10764     14 13 02 F1 | 	add	arg01, local06
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 28 02 FB | 	rdlong	local06, fp
10770     14 13 02 F1 | 	add	arg01, local06
10774     4E 00 00 FF 
10778     B0 E4 05 F1 | 	add	objptr, ##40112
1077c     F2 28 02 F1 | 	add	local06, objptr
10780     14 15 C2 FA | 	rdbyte	arg02, local06
10784     09 15 42 FC | 	wrbyte	arg02, arg01
10788     4E 00 00 FF 
1078c     B0 E4 85 F1 | 	sub	objptr, ##40112
10790     A7 28 02 FB | 	rdlong	local06, fp
10794     01 28 06 F1 | 	add	local06, #1
10798     A7 28 62 FC | 	wrlong	local06, fp
1079c     14 4E 85 F1 | 	sub	fp, #20
107a0     98 FF 9F FD | 	jmp	#LR__1333
107a4                 | LR__1334
107a4     14 4E 05 F1 | 	add	fp, #20
107a8     A7 00 68 FC | 	wrlong	#0, fp
107ac     04 4E 05 F1 | 	add	fp, #4
107b0     A7 2E 02 FB | 	rdlong	local09, fp
107b4     18 4E 85 F1 | 	sub	fp, #24
107b8                 | LR__1335
107b8     14 4E 05 F1 | 	add	fp, #20
107bc     A7 20 02 FB | 	rdlong	local02, fp
107c0     14 4E 85 F1 | 	sub	fp, #20
107c4     17 21 52 F2 | 	cmps	local02, local09 wc
107c8     5C 00 90 3D |  if_ae	jmp	#LR__1336
107cc     0C 4E 05 F1 | 	add	fp, #12
107d0     A7 12 02 FB | 	rdlong	arg01, fp
107d4     04 4E 05 F1 | 	add	fp, #4
107d8     A7 2C 02 FB | 	rdlong	local08, fp
107dc     0A 2C 66 F0 | 	shl	local08, #10
107e0     16 13 02 F1 | 	add	arg01, local08
107e4     04 4E 05 F1 | 	add	fp, #4
107e8     A7 2C 02 FB | 	rdlong	local08, fp
107ec     16 13 02 F1 | 	add	arg01, local08
107f0     14 4E 85 F1 | 	sub	fp, #20
107f4     4E 00 00 FF 
107f8     B0 E4 05 F1 | 	add	objptr, ##40112
107fc     F2 2C 02 F1 | 	add	local08, objptr
10800     16 15 C2 FA | 	rdbyte	arg02, local08
10804     4E 00 00 FF 
10808     B0 E4 85 F1 | 	sub	objptr, ##40112
1080c     A8 CD B0 FD | 	call	#_pspoke
10810     14 4E 05 F1 | 	add	fp, #20
10814     A7 2C 02 FB | 	rdlong	local08, fp
10818     01 2C 06 F1 | 	add	local08, #1
1081c     A7 2C 62 FC | 	wrlong	local08, fp
10820     14 4E 85 F1 | 	sub	fp, #20
10824     90 FF 9F FD | 	jmp	#LR__1335
10828                 | LR__1336
10828                 | LR__1337
10828     14 4E 05 F1 | 	add	fp, #20
1082c     A7 2E 02 FB | 	rdlong	local09, fp
10830     17 29 02 F6 | 	mov	local06, local09
10834     02 28 66 F0 | 	shl	local06, #2
10838     50 00 00 FF 
1083c     C0 E4 05 F1 | 	add	objptr, ##41152
10840     F2 28 02 F1 | 	add	local06, objptr
10844     02 2E 66 F0 | 	shl	local09, #2
10848     F2 2E 02 F1 | 	add	local09, objptr
1084c     17 2F 02 FB | 	rdlong	local09, local09
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 2C 02 FB | 	rdlong	local08, fp
10858     16 2F 02 F1 | 	add	local09, local08
1085c     14 2F 62 FC | 	wrlong	local09, local06
10860     08 4E 85 F1 | 	sub	fp, #8
10864     A7 2E 02 FB | 	rdlong	local09, fp
10868     01 2E 06 F1 | 	add	local09, #1
1086c     A7 2E 62 FC | 	wrlong	local09, fp
10870     10 4E 85 F1 | 	sub	fp, #16
10874     50 00 00 FF 
10878     C0 E4 85 F1 | 	sub	objptr, ##41152
1087c     40 FE 9F FD | 	jmp	#LR__1332
10880                 | LR__1338
10880                 | LR__1339
10880     A7 F0 03 F6 | 	mov	ptra, fp
10884     B2 00 A0 FD | 	call	#popregs_
10888                 | _do_get_ret
10888     2D 00 64 FD | 	ret
1088c                 | 
1088c                 | ' 
1088c                 | ' sub  do_put
1088c                 | _do_put
1088c     03 4A 05 F6 | 	mov	COUNT_, #3
10890     A8 00 A0 FD | 	call	#pushregs_
10894     28 F0 07 F1 | 	add	ptra, #40
10898     4A 00 00 FF 
1089c     80 E4 05 F1 | 	add	objptr, ##38016
108a0     F2 1A 02 FB | 	rdlong	arg05, objptr
108a4     0D 19 02 F6 | 	mov	arg04, arg05
108a8     01 18 66 F0 | 	shl	arg04, #1
108ac     0D 19 02 F1 | 	add	arg04, arg05
108b0     02 18 66 F0 | 	shl	arg04, #2
108b4     03 00 00 FF 
108b8     04 E4 85 F1 | 	sub	objptr, ##1540
108bc     F2 18 02 F1 | 	add	arg04, objptr
108c0     0C 1B 02 FB | 	rdlong	arg05, arg04
108c4     A7 1A 62 FC | 	wrlong	arg05, fp
108c8                 | ' numpar=compiledline(lineptr_e).result.uresult
108c8                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
108c8     04 1A 0E F2 | 	cmp	arg05, #4 wz
108cc     47 00 00 FF 
108d0     7C E4 85 F1 | 	sub	objptr, ##36476
108d4     48 00 90 5D |  if_ne	jmp	#LR__1340
108d8     C8 B0 BF FD | 	call	#_pop
108dc     FF 1A 02 F6 | 	mov	arg05, result3
108e0     1C 4E 05 F1 | 	add	fp, #28
108e4     A7 FA 61 FC | 	wrlong	result1, fp
108e8     04 4E 05 F1 | 	add	fp, #4
108ec     A7 FC 61 FC | 	wrlong	result2, fp
108f0     04 4E 05 F1 | 	add	fp, #4
108f4     A7 1A 62 FC | 	wrlong	arg05, fp
108f8     08 4E 85 F1 | 	sub	fp, #8
108fc     A7 12 02 F6 | 	mov	arg01, fp
10900     1C 4E 85 F1 | 	sub	fp, #28
10904     60 51 B0 FD | 	call	#_converttoint
10908     52 00 00 FF 
1090c     10 E4 05 F1 | 	add	objptr, ##42000
10910     F2 FA 61 FC | 	wrlong	result1, objptr
10914     52 00 00 FF 
10918     10 E4 85 F1 | 	sub	objptr, ##42000
1091c     18 00 90 FD | 	jmp	#LR__1341
10920                 | LR__1340
10920     52 00 00 FF 
10924     10 E4 05 F1 | 	add	objptr, ##42000
10928     FF FF FF FF 
1092c     F2 FE 6B FC | 	wrlong	##-1, objptr
10930     52 00 00 FF 
10934     10 E4 85 F1 | 	sub	objptr, ##42000
10938                 | LR__1341
10938                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10938     A7 1A 02 FB | 	rdlong	arg05, fp
1093c     03 1A 56 F2 | 	cmps	arg05, #3 wc
10940     40 00 90 CD |  if_b	jmp	#LR__1342
10944     5C B0 BF FD | 	call	#_pop
10948     FF 1A 02 F6 | 	mov	arg05, result3
1094c     1C 4E 05 F1 | 	add	fp, #28
10950     A7 FA 61 FC | 	wrlong	result1, fp
10954     04 4E 05 F1 | 	add	fp, #4
10958     A7 FC 61 FC | 	wrlong	result2, fp
1095c     04 4E 05 F1 | 	add	fp, #4
10960     A7 1A 62 FC | 	wrlong	arg05, fp
10964     08 4E 85 F1 | 	sub	fp, #8
10968     A7 12 02 F6 | 	mov	arg01, fp
1096c     1C 4E 85 F1 | 	sub	fp, #28
10970     F4 50 B0 FD | 	call	#_converttoint
10974     08 4E 05 F1 | 	add	fp, #8
10978     A7 FA 61 FC | 	wrlong	result1, fp
1097c     08 4E 85 F1 | 	sub	fp, #8
10980     0C 00 90 FD | 	jmp	#LR__1343
10984                 | LR__1342
10984     08 4E 05 F1 | 	add	fp, #8
10988     A7 02 68 FC | 	wrlong	#1, fp
1098c     08 4E 85 F1 | 	sub	fp, #8
10990                 | LR__1343
10990                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10990     A7 18 02 FB | 	rdlong	arg04, fp
10994     02 18 56 F2 | 	cmps	arg04, #2 wc
10998     3C 00 90 CD |  if_b	jmp	#LR__1344
1099c     04 B0 BF FD | 	call	#_pop
109a0     FF 18 02 F6 | 	mov	arg04, result3
109a4     1C 4E 05 F1 | 	add	fp, #28
109a8     A7 FA 61 FC | 	wrlong	result1, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 FC 61 FC | 	wrlong	result2, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 18 62 FC | 	wrlong	arg04, fp
109bc     08 4E 85 F1 | 	sub	fp, #8
109c0     A7 12 02 F6 | 	mov	arg01, fp
109c4     1C 4E 85 F1 | 	sub	fp, #28
109c8     9C 50 B0 FD | 	call	#_converttoint
109cc     0C 4E 05 F1 | 	add	fp, #12
109d0     A7 FA 61 FC | 	wrlong	result1, fp
109d4     0C 4E 85 F1 | 	sub	fp, #12
109d8                 | LR__1344
109d8     C8 AF BF FD | 	call	#_pop
109dc     FF 18 02 F6 | 	mov	arg04, result3
109e0     1C 4E 05 F1 | 	add	fp, #28
109e4     A7 FA 61 FC | 	wrlong	result1, fp
109e8     04 4E 05 F1 | 	add	fp, #4
109ec     A7 FC 61 FC | 	wrlong	result2, fp
109f0     04 4E 05 F1 | 	add	fp, #4
109f4     A7 18 62 FC | 	wrlong	arg04, fp
109f8     08 4E 85 F1 | 	sub	fp, #8
109fc     A7 12 02 F6 | 	mov	arg01, fp
10a00     1C 4E 85 F1 | 	sub	fp, #28
10a04     60 50 B0 FD | 	call	#_converttoint
10a08     04 4E 05 F1 | 	add	fp, #4
10a0c     A7 FA 61 FC | 	wrlong	result1, fp
10a10     10 4E 05 F1 | 	add	fp, #16
10a14     A7 1E 02 FB | 	rdlong	local01, fp
10a18     14 4E 85 F1 | 	sub	fp, #20
10a1c     02 1E 66 F0 | 	shl	local01, #2
10a20     50 00 00 FF 
10a24     C0 E4 05 F1 | 	add	objptr, ##41152
10a28     F2 1E 02 F1 | 	add	local01, objptr
10a2c     0F 01 68 FC | 	wrlong	#0, local01
10a30                 | ' t1=pop() : channel=converttoint(t1)
10a30                 | ' 
10a30                 | ' getres(j)=0
10a30                 | ' if pos>=0 then
10a30     01 00 00 FF 
10a34     50 E5 05 F1 | 	add	objptr, ##848
10a38     F2 20 02 FB | 	rdlong	local02, objptr
10a3c     52 00 00 FF 
10a40     10 E4 85 F1 | 	sub	objptr, ##42000
10a44     00 20 56 F2 | 	cmps	local02, #0 wc
10a48     C0 01 90 CD |  if_b	jmp	#LR__1350
10a4c     10 4E 05 F1 | 	add	fp, #16
10a50     A7 00 68 FC | 	wrlong	#0, fp
10a54     10 4E 85 F1 | 	sub	fp, #16
10a58                 | '    i=0: do
10a58                 | LR__1345
10a58     14 4E 05 F1 | 	add	fp, #20
10a5c     A7 00 68 FC | 	wrlong	#0, fp
10a60     14 4E 85 F1 | 	sub	fp, #20
10a64                 | '    j=0: do    
10a64                 | LR__1346
10a64                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10a64     0C 4E 05 F1 | 	add	fp, #12
10a68     A7 20 02 FB | 	rdlong	local02, fp
10a6c     0C 4E 85 F1 | 	sub	fp, #12
10a70     00 04 00 FF 
10a74     00 20 56 F2 | 	cmps	local02, ##524288 wc
10a78     4C 00 90 3D |  if_ae	jmp	#LR__1347
10a7c     14 4E 05 F1 | 	add	fp, #20
10a80     A7 20 02 FB | 	rdlong	local02, fp
10a84     10 1F 02 F6 | 	mov	local01, local02
10a88     4E 00 00 FF 
10a8c     B0 E4 05 F1 | 	add	objptr, ##40112
10a90     F2 1E 02 F1 | 	add	local01, objptr
10a94     08 4E 85 F1 | 	sub	fp, #8
10a98     A7 12 02 FB | 	rdlong	arg01, fp
10a9c     04 4E 05 F1 | 	add	fp, #4
10aa0     A7 18 02 FB | 	rdlong	arg04, fp
10aa4     0A 18 66 F0 | 	shl	arg04, #10
10aa8     0C 13 02 F1 | 	add	arg01, arg04
10aac     10 4E 85 F1 | 	sub	fp, #16
10ab0     10 13 02 F1 | 	add	arg01, local02
10ab4     09 FB C1 FA | 	rdbyte	result1, arg01
10ab8     4E 00 00 FF 
10abc     B0 E4 85 F1 | 	sub	objptr, ##40112
10ac0     0F FB 41 FC | 	wrbyte	result1, local01
10ac4     48 00 90 FD | 	jmp	#LR__1348
10ac8                 | LR__1347
10ac8     14 4E 05 F1 | 	add	fp, #20
10acc     A7 20 02 FB | 	rdlong	local02, fp
10ad0     10 1F 02 F6 | 	mov	local01, local02
10ad4     4E 00 00 FF 
10ad8     B0 E4 05 F1 | 	add	objptr, ##40112
10adc     F2 1E 02 F1 | 	add	local01, objptr
10ae0     08 4E 85 F1 | 	sub	fp, #8
10ae4     A7 12 02 FB | 	rdlong	arg01, fp
10ae8     04 4E 05 F1 | 	add	fp, #4
10aec     A7 18 02 FB | 	rdlong	arg04, fp
10af0     0A 18 66 F0 | 	shl	arg04, #10
10af4     0C 13 02 F1 | 	add	arg01, arg04
10af8     10 4E 85 F1 | 	sub	fp, #16
10afc     10 13 02 F1 | 	add	arg01, local02
10b00     4E 00 00 FF 
10b04     B0 E4 85 F1 | 	sub	objptr, ##40112
10b08     F4 CA B0 FD | 	call	#_pspeek
10b0c     0F FB 41 FC | 	wrbyte	result1, local01
10b10                 | LR__1348
10b10     14 4E 05 F1 | 	add	fp, #20
10b14     A7 20 02 FB | 	rdlong	local02, fp
10b18     01 20 06 F1 | 	add	local02, #1
10b1c     A7 20 62 FC | 	wrlong	local02, fp
10b20     14 4E 85 F1 | 	sub	fp, #20
10b24     02 00 00 FF 
10b28     00 20 56 F2 | 	cmps	local02, ##1024 wc
10b2c     2C 00 90 3D |  if_ae	jmp	#LR__1349
10b30     10 4E 05 F1 | 	add	fp, #16
10b34     A7 1E 02 FB | 	rdlong	local01, fp
10b38     0A 1E 66 F0 | 	shl	local01, #10
10b3c     04 4E 05 F1 | 	add	fp, #4
10b40     A7 20 02 FB | 	rdlong	local02, fp
10b44     10 1F 02 F1 | 	add	local01, local02
10b48     0C 4E 85 F1 | 	sub	fp, #12
10b4c     A7 20 02 FB | 	rdlong	local02, fp
10b50     08 4E 85 F1 | 	sub	fp, #8
10b54     10 1F 5A F2 | 	cmps	local01, local02 wcz
10b58     08 FF 9F ED |  if_be	jmp	#LR__1346
10b5c                 | LR__1349
10b5c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10b5c     04 4E 05 F1 | 	add	fp, #4
10b60     A7 12 02 FB | 	rdlong	arg01, fp
10b64     52 00 00 FF 
10b68     10 E4 05 F1 | 	add	objptr, ##42000
10b6c     F2 14 02 FB | 	rdlong	arg02, objptr
10b70     01 14 06 F1 | 	add	arg02, #1
10b74     03 00 00 FF 
10b78     60 E5 85 F1 | 	sub	objptr, ##1888
10b7c     F2 16 02 F6 | 	mov	arg03, objptr
10b80     4E 00 00 FF 
10b84     B0 E4 85 F1 | 	sub	objptr, ##40112
10b88     04 4E 05 F1 | 	add	fp, #4
10b8c     A7 18 02 FB | 	rdlong	arg04, fp
10b90     08 4E 85 F1 | 	sub	fp, #8
10b94     01 1A 06 F6 | 	mov	arg05, #1
10b98     90 09 B1 FD | 	call	#__system___basic_put
10b9c     18 4E 05 F1 | 	add	fp, #24
10ba0     A7 FA 61 FC | 	wrlong	result1, fp
10ba4     14 4E 85 F1 | 	sub	fp, #20
10ba8     A7 1E 02 FB | 	rdlong	local01, fp
10bac     02 1E 66 F0 | 	shl	local01, #2
10bb0     50 00 00 FF 
10bb4     C0 E4 05 F1 | 	add	objptr, ##41152
10bb8     F2 1E 02 F1 | 	add	local01, objptr
10bbc     0F FB 61 FC | 	wrlong	result1, local01
10bc0                 | '    if 1024*i+j>amount then exit loop
10bc0     0C 4E 05 F1 | 	add	fp, #12
10bc4     A7 20 02 FB | 	rdlong	local02, fp
10bc8     0A 20 66 F0 | 	shl	local02, #10
10bcc     04 4E 05 F1 | 	add	fp, #4
10bd0     A7 1E 02 FB | 	rdlong	local01, fp
10bd4     0F 21 02 F1 | 	add	local02, local01
10bd8     0C 4E 85 F1 | 	sub	fp, #12
10bdc     A7 1E 02 FB | 	rdlong	local01, fp
10be0     08 4E 85 F1 | 	sub	fp, #8
10be4     0F 21 5A F2 | 	cmps	local02, local01 wcz
10be8     50 00 00 FF 
10bec     C0 E4 85 F1 | 	sub	objptr, ##41152
10bf0     CC 01 90 1D |  if_a	jmp	#LR__1357
10bf4     10 4E 05 F1 | 	add	fp, #16
10bf8     A7 20 02 FB | 	rdlong	local02, fp
10bfc     01 20 06 F1 | 	add	local02, #1
10c00     A7 20 62 FC | 	wrlong	local02, fp
10c04     10 4E 85 F1 | 	sub	fp, #16
10c08     4C FE 9F FD | 	jmp	#LR__1345
10c0c                 | LR__1350
10c0c     10 4E 05 F1 | 	add	fp, #16
10c10     A7 00 68 FC | 	wrlong	#0, fp
10c14     10 4E 85 F1 | 	sub	fp, #16
10c18                 | '    i=0: do
10c18                 | LR__1351
10c18     14 4E 05 F1 | 	add	fp, #20
10c1c     A7 00 68 FC | 	wrlong	#0, fp
10c20     14 4E 85 F1 | 	sub	fp, #20
10c24                 | '    j=0: do  
10c24                 | LR__1352
10c24                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10c24     0C 4E 05 F1 | 	add	fp, #12
10c28     A7 20 02 FB | 	rdlong	local02, fp
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     00 04 00 FF 
10c34     00 20 56 F2 | 	cmps	local02, ##524288 wc
10c38     4C 00 90 3D |  if_ae	jmp	#LR__1353
10c3c     14 4E 05 F1 | 	add	fp, #20
10c40     A7 20 02 FB | 	rdlong	local02, fp
10c44     10 1F 02 F6 | 	mov	local01, local02
10c48     4E 00 00 FF 
10c4c     B0 E4 05 F1 | 	add	objptr, ##40112
10c50     F2 1E 02 F1 | 	add	local01, objptr
10c54     08 4E 85 F1 | 	sub	fp, #8
10c58     A7 12 02 FB | 	rdlong	arg01, fp
10c5c     04 4E 05 F1 | 	add	fp, #4
10c60     A7 18 02 FB | 	rdlong	arg04, fp
10c64     0A 18 66 F0 | 	shl	arg04, #10
10c68     0C 13 02 F1 | 	add	arg01, arg04
10c6c     10 4E 85 F1 | 	sub	fp, #16
10c70     10 13 02 F1 | 	add	arg01, local02
10c74     09 FB C1 FA | 	rdbyte	result1, arg01
10c78     4E 00 00 FF 
10c7c     B0 E4 85 F1 | 	sub	objptr, ##40112
10c80     0F FB 41 FC | 	wrbyte	result1, local01
10c84     48 00 90 FD | 	jmp	#LR__1354
10c88                 | LR__1353
10c88     14 4E 05 F1 | 	add	fp, #20
10c8c     A7 20 02 FB | 	rdlong	local02, fp
10c90     10 1F 02 F6 | 	mov	local01, local02
10c94     4E 00 00 FF 
10c98     B0 E4 05 F1 | 	add	objptr, ##40112
10c9c     F2 1E 02 F1 | 	add	local01, objptr
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     A7 12 02 FB | 	rdlong	arg01, fp
10ca8     04 4E 05 F1 | 	add	fp, #4
10cac     A7 18 02 FB | 	rdlong	arg04, fp
10cb0     0A 18 66 F0 | 	shl	arg04, #10
10cb4     0C 13 02 F1 | 	add	arg01, arg04
10cb8     10 4E 85 F1 | 	sub	fp, #16
10cbc     10 13 02 F1 | 	add	arg01, local02
10cc0     4E 00 00 FF 
10cc4     B0 E4 85 F1 | 	sub	objptr, ##40112
10cc8     34 C9 B0 FD | 	call	#_pspeek
10ccc     0F FB 41 FC | 	wrbyte	result1, local01
10cd0                 | LR__1354
10cd0     14 4E 05 F1 | 	add	fp, #20
10cd4     A7 20 02 FB | 	rdlong	local02, fp
10cd8     01 20 06 F1 | 	add	local02, #1
10cdc     A7 20 62 FC | 	wrlong	local02, fp
10ce0     14 4E 85 F1 | 	sub	fp, #20
10ce4     02 00 00 FF 
10ce8     00 20 56 F2 | 	cmps	local02, ##1024 wc
10cec     2C 00 90 3D |  if_ae	jmp	#LR__1355
10cf0     10 4E 05 F1 | 	add	fp, #16
10cf4     A7 1E 02 FB | 	rdlong	local01, fp
10cf8     0A 1E 66 F0 | 	shl	local01, #10
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 20 02 FB | 	rdlong	local02, fp
10d04     10 1F 02 F1 | 	add	local01, local02
10d08     0C 4E 85 F1 | 	sub	fp, #12
10d0c     A7 20 02 FB | 	rdlong	local02, fp
10d10     08 4E 85 F1 | 	sub	fp, #8
10d14     10 1F 5A F2 | 	cmps	local01, local02 wcz
10d18     08 FF 9F ED |  if_be	jmp	#LR__1352
10d1c                 | LR__1355
10d1c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 12 02 FB | 	rdlong	arg01, fp
10d24     4E 00 00 FF 
10d28     B0 E4 05 F1 | 	add	objptr, ##40112
10d2c     F2 16 02 F6 | 	mov	arg03, objptr
10d30     4E 00 00 FF 
10d34     B0 E4 85 F1 | 	sub	objptr, ##40112
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 18 02 FB | 	rdlong	arg04, fp
10d40     08 4E 85 F1 | 	sub	fp, #8
10d44     00 14 06 F6 | 	mov	arg02, #0
10d48     01 1A 06 F6 | 	mov	arg05, #1
10d4c     DC 07 B1 FD | 	call	#__system___basic_put
10d50     18 4E 05 F1 | 	add	fp, #24
10d54     A7 FA 61 FC | 	wrlong	result1, fp
10d58     14 4E 85 F1 | 	sub	fp, #20
10d5c     A7 1E 02 FB | 	rdlong	local01, fp
10d60     02 1E 66 F0 | 	shl	local01, #2
10d64     50 00 00 FF 
10d68     C0 E4 05 F1 | 	add	objptr, ##41152
10d6c     F2 1E 02 F1 | 	add	local01, objptr
10d70     0F FB 61 FC | 	wrlong	result1, local01
10d74                 | '    if 1024*i+j>amount then exit loop
10d74     0C 4E 05 F1 | 	add	fp, #12
10d78     A7 20 02 FB | 	rdlong	local02, fp
10d7c     0A 20 66 F0 | 	shl	local02, #10
10d80     04 4E 05 F1 | 	add	fp, #4
10d84     A7 1E 02 FB | 	rdlong	local01, fp
10d88     0F 21 02 F1 | 	add	local02, local01
10d8c     0C 4E 85 F1 | 	sub	fp, #12
10d90     A7 22 02 FB | 	rdlong	local03, fp
10d94     08 4E 85 F1 | 	sub	fp, #8
10d98     11 21 5A F2 | 	cmps	local02, local03 wcz
10d9c     50 00 00 FF 
10da0     C0 E4 85 F1 | 	sub	objptr, ##41152
10da4     18 00 90 1D |  if_a	jmp	#LR__1356
10da8     10 4E 05 F1 | 	add	fp, #16
10dac     A7 20 02 FB | 	rdlong	local02, fp
10db0     01 20 06 F1 | 	add	local02, #1
10db4     A7 20 62 FC | 	wrlong	local02, fp
10db8     10 4E 85 F1 | 	sub	fp, #16
10dbc     58 FE 9F FD | 	jmp	#LR__1351
10dc0                 | LR__1356
10dc0                 | LR__1357
10dc0     A7 F0 03 F6 | 	mov	ptra, fp
10dc4     B2 00 A0 FD | 	call	#popregs_
10dc8                 | _do_put_ret
10dc8     2D 00 64 FD | 	ret
10dcc                 | 
10dcc                 | '   
10dcc                 | ' sub do_find_goto
10dcc                 | _do_find_goto
10dcc     03 4A 05 F6 | 	mov	COUNT_, #3
10dd0     A8 00 A0 FD | 	call	#pushregs_
10dd4     24 F0 07 F1 | 	add	ptra, #36
10dd8                 | _do_find_goto_enter
10dd8     4A 00 00 FF 
10ddc     80 E4 05 F1 | 	add	objptr, ##38016
10de0     F2 1E 02 FB | 	rdlong	local01, objptr
10de4     0F 21 02 F6 | 	mov	local02, local01
10de8     01 20 66 F0 | 	shl	local02, #1
10dec     0F 21 02 F1 | 	add	local02, local01
10df0     02 20 66 F0 | 	shl	local02, #2
10df4     03 00 00 FF 
10df8     04 E4 85 F1 | 	sub	objptr, ##1540
10dfc     F2 20 02 F1 | 	add	local02, objptr
10e00     04 20 06 F1 | 	add	local02, #4
10e04     10 21 02 FB | 	rdlong	local02, local02
10e08     A7 20 62 FC | 	wrlong	local02, fp
10e0c     03 00 00 FF 
10e10     08 E4 05 F1 | 	add	objptr, ##1544
10e14     F2 22 02 FB | 	rdlong	local03, objptr
10e18     4A 00 00 FF 
10e1c     84 E4 85 F1 | 	sub	objptr, ##38020
10e20     04 4E 05 F1 | 	add	fp, #4
10e24     A7 22 62 FC | 	wrlong	local03, fp
10e28     04 4E 85 F1 | 	sub	fp, #4
10e2c                 | ' 
10e2c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10e2c                 | '  ' print "find goto"                                                                     'print gotoline 
10e2c                 | ' gotoptr=programstart
10e2c                 | ' do
10e2c                 | LR__1360
10e2c     0C 4E 05 F1 | 	add	fp, #12
10e30     A7 12 02 F6 | 	mov	arg01, fp
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     A7 14 02 FB | 	rdlong	arg02, fp
10e3c     04 4E 85 F1 | 	sub	fp, #4
10e40     18 16 06 F6 | 	mov	arg03, #24
10e44     0B 00 00 FF 
10e48     CC E4 05 F1 | 	add	objptr, ##5836
10e4c     98 EC B0 FD | 	call	#_psram_spin2_read1
10e50     0B 00 00 FF 
10e54     CC E4 85 F1 | 	sub	objptr, ##5836
10e58                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10e58                 | '   if gotoheader(0)<>$FFFFFFFF then
10e58     0C 4E 05 F1 | 	add	fp, #12
10e5c     A7 22 02 FB | 	rdlong	local03, fp
10e60     0C 4E 85 F1 | 	sub	fp, #12
10e64     FF FF 7F FF 
10e68     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10e6c     24 00 90 AD |  if_e	jmp	#LR__1361
10e70     04 4E 05 F1 | 	add	fp, #4
10e74     A7 22 02 FB | 	rdlong	local03, fp
10e78     04 4E 05 F1 | 	add	fp, #4
10e7c     A7 22 62 FC | 	wrlong	local03, fp
10e80     18 4E 05 F1 | 	add	fp, #24
10e84     A7 22 02 FB | 	rdlong	local03, fp
10e88     1C 4E 85 F1 | 	sub	fp, #28
10e8c     A7 22 62 FC | 	wrlong	local03, fp
10e90     04 4E 85 F1 | 	sub	fp, #4
10e94                 | LR__1361
10e94     20 4E 05 F1 | 	add	fp, #32
10e98     A7 22 02 FB | 	rdlong	local03, fp
10e9c     20 4E 85 F1 | 	sub	fp, #32
10ea0     FF FF 3F FF 
10ea4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10ea8     0C 4E 05 51 |  if_ne	add	fp, #12
10eac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10eb0     0C 4E 85 51 |  if_ne	sub	fp, #12
10eb4     FF FF 7F 5F 
10eb8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10ebc     18 00 90 AD |  if_e	jmp	#LR__1362
10ec0     0C 4E 05 F1 | 	add	fp, #12
10ec4     A7 22 02 FB | 	rdlong	local03, fp
10ec8     0C 4E 85 F1 | 	sub	fp, #12
10ecc     A7 20 02 FB | 	rdlong	local02, fp
10ed0     10 23 0A F2 | 	cmp	local03, local02 wz
10ed4     54 FF 9F 5D |  if_ne	jmp	#LR__1360
10ed8                 | LR__1362
10ed8                 | ' 
10ed8                 | ' if gotoheader(0)=gotoline then
10ed8     0C 4E 05 F1 | 	add	fp, #12
10edc     A7 22 02 FB | 	rdlong	local03, fp
10ee0     0C 4E 85 F1 | 	sub	fp, #12
10ee4     A7 1E 02 FB | 	rdlong	local01, fp
10ee8     0F 23 0A F2 | 	cmp	local03, local01 wz
10eec     D8 00 90 5D |  if_ne	jmp	#LR__1363
10ef0     4A 00 00 FF 
10ef4     80 E4 05 F1 | 	add	objptr, ##38016
10ef8     F2 1E 02 FB | 	rdlong	local01, objptr
10efc     0F 21 02 F6 | 	mov	local02, local01
10f00     01 20 66 F0 | 	shl	local02, #1
10f04     0F 21 02 F1 | 	add	local02, local01
10f08     02 20 66 F0 | 	shl	local02, #2
10f0c     03 00 00 FF 
10f10     04 E4 85 F1 | 	sub	objptr, ##1540
10f14     F2 20 02 F1 | 	add	local02, objptr
10f18     08 4E 05 F1 | 	add	fp, #8
10f1c     A7 22 02 FB | 	rdlong	local03, fp
10f20     10 23 62 FC | 	wrlong	local03, local02
10f24     03 00 00 FF 
10f28     04 E4 05 F1 | 	add	objptr, ##1540
10f2c     F2 1E 02 FB | 	rdlong	local01, objptr
10f30     0F 21 02 F6 | 	mov	local02, local01
10f34     01 20 66 F0 | 	shl	local02, #1
10f38     0F 21 02 F1 | 	add	local02, local01
10f3c     02 20 66 F0 | 	shl	local02, #2
10f40     03 00 00 FF 
10f44     04 E4 85 F1 | 	sub	objptr, ##1540
10f48     F2 20 02 F1 | 	add	local02, objptr
10f4c     08 20 06 F1 | 	add	local02, #8
10f50     10 9D 68 FC | 	wrlong	#78, local02
10f54     03 00 00 FF 
10f58     04 E4 05 F1 | 	add	objptr, ##1540
10f5c     F2 20 02 FB | 	rdlong	local02, objptr
10f60     10 13 02 F6 | 	mov	arg01, local02
10f64     01 12 66 F0 | 	shl	arg01, #1
10f68     10 13 02 F1 | 	add	arg01, local02
10f6c     02 12 66 F0 | 	shl	arg01, #2
10f70     03 00 00 FF 
10f74     04 E4 85 F1 | 	sub	objptr, ##1540
10f78     F2 12 02 F1 | 	add	arg01, objptr
10f7c     09 00 00 FF 
10f80     40 E4 05 F1 | 	add	objptr, ##4672
10f84     F2 14 02 FB | 	rdlong	arg02, objptr
10f88     02 22 06 F6 | 	mov	local03, #2
10f8c     10 23 02 F1 | 	add	local03, local02
10f90     0B 00 00 FF 
10f94     58 E4 85 F1 | 	sub	objptr, ##5720
10f98     F2 16 02 FB | 	rdlong	arg03, objptr
10f9c     0B 23 02 FD | 	qmul	local03, arg03
10fa0     08 4E 85 F1 | 	sub	fp, #8
10fa4     39 00 00 FF 
10fa8     98 E5 85 F1 | 	sub	objptr, ##29592
10fac     18 22 62 FD | 	getqx	local03
10fb0     11 15 02 F1 | 	add	arg02, local03
10fb4     CC EB B0 FD | 	call	#_psram_spin2_write
10fb8     0B 00 00 FF 
10fbc     CC E4 85 F1 | 	sub	objptr, ##5836
10fc0     A0 EE BF FD | 	call	#_do_fast_goto
10fc4     08 00 90 FD | 	jmp	#LR__1364
10fc8                 | LR__1363
10fc8     26 12 06 F6 | 	mov	arg01, #38
10fcc     F4 C3 B0 FD | 	call	#_printerror
10fd0                 | LR__1364
10fd0     A7 F0 03 F6 | 	mov	ptra, fp
10fd4     B2 00 A0 FD | 	call	#popregs_
10fd8                 | _do_find_goto_ret
10fd8     2D 00 64 FD | 	ret
10fdc                 | 
10fdc                 | ' 
10fdc                 | ' sub do_slow_goto
10fdc                 | _do_slow_goto
10fdc     02 4A 05 F6 | 	mov	COUNT_, #2
10fe0     A8 00 A0 FD | 	call	#pushregs_
10fe4     30 F0 07 F1 | 	add	ptra, #48
10fe8     B8 A9 BF FD | 	call	#_pop
10fec     FF 1E 02 F6 | 	mov	local01, result3
10ff0     24 4E 05 F1 | 	add	fp, #36
10ff4     A7 FA 61 FC | 	wrlong	result1, fp
10ff8     04 4E 05 F1 | 	add	fp, #4
10ffc     A7 FC 61 FC | 	wrlong	result2, fp
11000     04 4E 05 F1 | 	add	fp, #4
11004     A7 1E 62 FC | 	wrlong	local01, fp
11008     08 4E 85 F1 | 	sub	fp, #8
1100c     A7 12 02 F6 | 	mov	arg01, fp
11010     24 4E 85 F1 | 	sub	fp, #36
11014     50 4A B0 FD | 	call	#_converttoint
11018     A7 FA 61 FC | 	wrlong	result1, fp
1101c     4A 00 00 FF 
11020     84 E4 05 F1 | 	add	objptr, ##38020
11024     F2 20 02 FB | 	rdlong	local02, objptr
11028     4A 00 00 FF 
1102c     84 E4 85 F1 | 	sub	objptr, ##38020
11030     04 4E 05 F1 | 	add	fp, #4
11034     A7 20 62 FC | 	wrlong	local02, fp
11038     04 4E 85 F1 | 	sub	fp, #4
1103c                 | ' 
1103c                 | ' t1=pop() : gotoline=converttoint(t1)
1103c                 | ' gotoptr=programstart
1103c                 | ' do
1103c                 | LR__1370
1103c     0C 4E 05 F1 | 	add	fp, #12
11040     A7 12 02 F6 | 	mov	arg01, fp
11044     08 4E 85 F1 | 	sub	fp, #8
11048     A7 14 02 FB | 	rdlong	arg02, fp
1104c     04 4E 85 F1 | 	sub	fp, #4
11050     18 16 06 F6 | 	mov	arg03, #24
11054     0B 00 00 FF 
11058     CC E4 05 F1 | 	add	objptr, ##5836
1105c     88 EA B0 FD | 	call	#_psram_spin2_read1
11060     0B 00 00 FF 
11064     CC E4 85 F1 | 	sub	objptr, ##5836
11068                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11068                 | '   if gotoheader(0)<>$FFFFFFFF then
11068     0C 4E 05 F1 | 	add	fp, #12
1106c     A7 20 02 FB | 	rdlong	local02, fp
11070     0C 4E 85 F1 | 	sub	fp, #12
11074     FF FF 7F FF 
11078     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1107c     24 00 90 AD |  if_e	jmp	#LR__1371
11080     04 4E 05 F1 | 	add	fp, #4
11084     A7 20 02 FB | 	rdlong	local02, fp
11088     04 4E 05 F1 | 	add	fp, #4
1108c     A7 20 62 FC | 	wrlong	local02, fp
11090     18 4E 05 F1 | 	add	fp, #24
11094     A7 20 02 FB | 	rdlong	local02, fp
11098     1C 4E 85 F1 | 	sub	fp, #28
1109c     A7 20 62 FC | 	wrlong	local02, fp
110a0     04 4E 85 F1 | 	sub	fp, #4
110a4                 | LR__1371
110a4     20 4E 05 F1 | 	add	fp, #32
110a8     A7 20 02 FB | 	rdlong	local02, fp
110ac     20 4E 85 F1 | 	sub	fp, #32
110b0     FF FF 3F FF 
110b4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
110b8     0C 4E 05 51 |  if_ne	add	fp, #12
110bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
110c0     0C 4E 85 51 |  if_ne	sub	fp, #12
110c4     FF FF 7F 5F 
110c8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
110cc     18 00 90 AD |  if_e	jmp	#LR__1372
110d0     0C 4E 05 F1 | 	add	fp, #12
110d4     A7 20 02 FB | 	rdlong	local02, fp
110d8     0C 4E 85 F1 | 	sub	fp, #12
110dc     A7 16 02 FB | 	rdlong	arg03, fp
110e0     0B 21 0A F2 | 	cmp	local02, arg03 wz
110e4     54 FF 9F 5D |  if_ne	jmp	#LR__1370
110e8                 | LR__1372
110e8                 | ' if gotoheader(0)=gotoline then  
110e8     0C 4E 05 F1 | 	add	fp, #12
110ec     A7 20 02 FB | 	rdlong	local02, fp
110f0     0C 4E 85 F1 | 	sub	fp, #12
110f4     A7 1E 02 FB | 	rdlong	local01, fp
110f8     0F 21 0A F2 | 	cmp	local02, local01 wz
110fc     60 00 90 5D |  if_ne	jmp	#LR__1373
11100     08 4E 05 F1 | 	add	fp, #8
11104     A7 20 02 FB | 	rdlong	local02, fp
11108     08 4E 85 F1 | 	sub	fp, #8
1110c     50 00 00 FF 
11110     B4 E4 05 F1 | 	add	objptr, ##41140
11114     F2 20 62 FC | 	wrlong	local02, objptr
11118     06 00 00 FF 
1111c     38 E4 85 F1 | 	sub	objptr, ##3128
11120     F2 20 02 FB | 	rdlong	local02, objptr
11124     01 20 86 F1 | 	sub	local02, #1
11128     04 E4 05 F1 | 	add	objptr, #4
1112c     F2 20 62 FC | 	wrlong	local02, objptr
11130                 | '    runptr=oldgotoptr
11130                 | '    lineptr_e=lineptr-1
11130                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11130     06 00 00 FF 
11134     80 E4 05 F1 | 	add	objptr, ##3200
11138     F2 20 02 FB | 	rdlong	local02, objptr
1113c     50 00 00 FF 
11140     00 E5 85 F1 | 	sub	objptr, ##41216
11144     FF FF 3F FF 
11148     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1114c     50 00 00 AF 
11150     00 E5 05 A1 |  if_e	add	objptr, ##41216
11154     F2 00 68 AC |  if_e	wrlong	#0, objptr
11158     50 00 00 AF 
1115c     00 E5 85 A1 |  if_e	sub	objptr, ##41216
11160                 | LR__1373
11160     A7 F0 03 F6 | 	mov	ptra, fp
11164     B2 00 A0 FD | 	call	#popregs_
11168                 | _do_slow_goto_ret
11168     2D 00 64 FD | 	ret
1116c                 | 
1116c                 | ' 
1116c                 | ' '----------------------- Error processing
1116c                 | ' 
1116c                 | ' sub do_error
1116c                 | _do_error
1116c     01 4A 05 F6 | 	mov	COUNT_, #1
11170     A8 00 A0 FD | 	call	#pushregs_
11174     4A 00 00 FF 
11178     80 E4 05 F1 | 	add	objptr, ##38016
1117c     F2 18 02 FB | 	rdlong	arg04, objptr
11180     0C 17 02 F6 | 	mov	arg03, arg04
11184     01 16 66 F0 | 	shl	arg03, #1
11188     0C 17 02 F1 | 	add	arg03, arg04
1118c     02 16 66 F0 | 	shl	arg03, #2
11190     03 00 00 FF 
11194     04 E4 85 F1 | 	sub	objptr, ##1540
11198     F2 16 02 F1 | 	add	arg03, objptr
1119c     0B 1F 02 FB | 	rdlong	local01, arg03
111a0                 | ' r=compiledline(lineptr_e).result.uresult
111a0                 | ' print "Error ";r;": ";errors$(r)
111a0     00 12 06 F6 | 	mov	arg01, #0
111a4     47 00 00 FF 
111a8     7C E4 85 F1 | 	sub	objptr, ##36476
111ac     B8 4F B1 FD | 	call	#__system___getiolock_0540
111b0     FD 12 02 F6 | 	mov	arg01, result1
111b4     70 F5 B0 FD | 	call	#__system___lockmem
111b8     83 01 00 FF 
111bc     E8 14 06 F6 | 	mov	arg02, ##@LR__5451
111c0     00 12 06 F6 | 	mov	arg01, #0
111c4     00 16 06 F6 | 	mov	arg03, #0
111c8     50 02 B1 FD | 	call	#__system___basic_print_string
111cc     00 12 06 F6 | 	mov	arg01, #0
111d0     0F 15 02 F6 | 	mov	arg02, local01
111d4     00 16 06 F6 | 	mov	arg03, #0
111d8     0A 18 06 F6 | 	mov	arg04, #10
111dc     C0 02 B1 FD | 	call	#__system___basic_print_unsigned
111e0     83 01 00 FF 
111e4     EF 14 06 F6 | 	mov	arg02, ##@LR__5452
111e8     00 12 06 F6 | 	mov	arg01, #0
111ec     00 16 06 F6 | 	mov	arg03, #0
111f0     28 02 B1 FD | 	call	#__system___basic_print_string
111f4     02 1E 66 F0 | 	shl	local01, #2
111f8     45 00 00 FF 
111fc     7C E4 05 F1 | 	add	objptr, ##35452
11200     F2 1E 02 F1 | 	add	local01, objptr
11204     0F 15 02 FB | 	rdlong	arg02, local01
11208     00 12 06 F6 | 	mov	arg01, #0
1120c     00 16 06 F6 | 	mov	arg03, #0
11210     45 00 00 FF 
11214     7C E4 85 F1 | 	sub	objptr, ##35452
11218     00 02 B1 FD | 	call	#__system___basic_print_string
1121c     00 12 06 F6 | 	mov	arg01, #0
11220     0A 14 06 F6 | 	mov	arg02, #10
11224     00 16 06 F6 | 	mov	arg03, #0
11228     98 01 B1 FD | 	call	#__system___basic_print_char
1122c     00 12 06 F6 | 	mov	arg01, #0
11230     34 4F B1 FD | 	call	#__system___getiolock_0540
11234     FD 00 68 FC | 	wrlong	#0, result1
11238     A7 F0 03 F6 | 	mov	ptra, fp
1123c     B2 00 A0 FD | 	call	#popregs_
11240                 | _do_error_ret
11240     2D 00 64 FD | 	ret
11244                 | 
11244                 | ' 
11244                 | ' 
11244                 | ' '------------------ Assigning to a variable  
11244                 | ' 
11244                 | ' function  convertstring(psaddr as ulong) as string
11244                 | _convertstring
11244     04 4A 05 F6 | 	mov	COUNT_, #4
11248     A8 00 A0 FD | 	call	#pushregs_
1124c     09 1F 02 F6 | 	mov	local01, arg01
11250     04 C4 B0 FD | 	call	#_pslpeek
11254     FD 20 02 F6 | 	mov	local02, result1
11258     83 01 00 FF 
1125c     F2 22 06 F6 | 	mov	local03, ##@LR__5453
11260                 | ' 'print "in convertstring: psaddr=";psaddr
11260                 | ' l=pslpeek(psaddr)
11260                 | ' 'print "in convertstring: len=";l
11260                 | ' s="" 
11260                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
11260     01 24 06 F6 | 	mov	local04, #1
11264     01 20 06 F1 | 	add	local02, #1
11268                 | LR__1380
11268     10 25 52 F2 | 	cmps	local04, local02 wc
1126c     30 00 90 3D |  if_ae	jmp	#LR__1381
11270     0F 13 02 F6 | 	mov	arg01, local01
11274     03 12 06 F1 | 	add	arg01, #3
11278     12 13 02 F1 | 	add	arg01, local04
1127c     80 C3 B0 FD | 	call	#_pspeek
11280     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
11284     E0 16 B1 FD | 	call	#__system__Chr_S
11288     FD 14 02 F6 | 	mov	arg02, result1
1128c     11 13 02 F6 | 	mov	arg01, local03
11290     F0 F4 B0 FD | 	call	#__system___string_concat
11294     FD 22 02 F6 | 	mov	local03, result1
11298     01 24 06 F1 | 	add	local04, #1
1129c     C8 FF 9F FD | 	jmp	#LR__1380
112a0                 | LR__1381
112a0                 | ' 'print "in convertstring: str=";s
112a0                 | ' return s
112a0     11 FB 01 F6 | 	mov	result1, local03
112a4     A7 F0 03 F6 | 	mov	ptra, fp
112a8     B2 00 A0 FD | 	call	#popregs_
112ac                 | _convertstring_ret
112ac     2D 00 64 FD | 	ret
112b0                 | 
112b0                 | ' 
112b0                 | ' sub do_assign
112b0                 | _do_assign
112b0     05 4A 05 F6 | 	mov	COUNT_, #5
112b4     A8 00 A0 FD | 	call	#pushregs_
112b8     44 F0 07 F1 | 	add	ptra, #68
112bc     4A 00 00 FF 
112c0     80 E4 05 F1 | 	add	objptr, ##38016
112c4     F2 16 02 FB | 	rdlong	arg03, objptr
112c8     0B 15 02 F6 | 	mov	arg02, arg03
112cc     01 14 66 F0 | 	shl	arg02, #1
112d0     0B 15 02 F1 | 	add	arg02, arg03
112d4     02 14 66 F0 | 	shl	arg02, #2
112d8     03 00 00 FF 
112dc     04 E4 85 F1 | 	sub	objptr, ##1540
112e0     F2 14 02 F1 | 	add	arg02, objptr
112e4     0A 15 02 FB | 	rdlong	arg02, arg02
112e8     18 4E 05 F1 | 	add	fp, #24
112ec     A7 14 62 FC | 	wrlong	arg02, fp
112f0                 | ' 
112f0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
112f0                 | ' if variables(varnum).vartype<array_no_type then 
112f0     18 4E 85 F1 | 	sub	fp, #24
112f4     04 14 66 F0 | 	shl	arg02, #4
112f8     32 00 00 FF 
112fc     84 E4 85 F1 | 	sub	objptr, ##25732
11300     F2 14 02 F1 | 	add	arg02, objptr
11304     0C 14 06 F1 | 	add	arg02, #12
11308     0A 17 02 FB | 	rdlong	arg03, arg02
1130c     00 17 16 F2 | 	cmp	arg03, #256 wc
11310     14 00 00 FF 
11314     F8 E5 85 F1 | 	sub	objptr, ##10744
11318     18 01 90 3D |  if_ae	jmp	#LR__1390
1131c     84 A6 BF FD | 	call	#_pop
11320     A7 FA 61 FC | 	wrlong	result1, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 FC 61 FC | 	wrlong	result2, fp
1132c     04 4E 05 F1 | 	add	fp, #4
11330     A7 FE 61 FC | 	wrlong	result3, fp
11334     08 4E 85 F1 | 	sub	fp, #8
11338     A7 16 02 FB | 	rdlong	arg03, fp
1133c     04 4E 05 F1 | 	add	fp, #4
11340     A7 14 02 FB | 	rdlong	arg02, fp
11344     14 4E 05 F1 | 	add	fp, #20
11348     A7 12 02 FB | 	rdlong	arg01, fp
1134c     04 12 66 F0 | 	shl	arg01, #4
11350     14 00 00 FF 
11354     F8 E5 05 F1 | 	add	objptr, ##10744
11358     F2 12 02 F1 | 	add	arg01, objptr
1135c     04 12 06 F1 | 	add	arg01, #4
11360     09 17 62 FC | 	wrlong	arg03, arg01
11364     A7 16 02 FB | 	rdlong	arg03, fp
11368     04 16 66 F0 | 	shl	arg03, #4
1136c     F2 16 02 F1 | 	add	arg03, objptr
11370     08 16 06 F1 | 	add	arg03, #8
11374     0B 15 62 FC | 	wrlong	arg02, arg03
11378     A7 16 02 FB | 	rdlong	arg03, fp
1137c     04 16 66 F0 | 	shl	arg03, #4
11380     F2 16 02 F1 | 	add	arg03, objptr
11384     10 4E 85 F1 | 	sub	fp, #16
11388     A7 14 02 FB | 	rdlong	arg02, fp
1138c     0C 16 06 F1 | 	add	arg03, #12
11390     0B 15 62 FC | 	wrlong	arg02, arg03
11394                 | '   t1=pop() 
11394                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
11394                 | '   if variables(varnum).vartype<>result_string2 then return
11394     10 4E 05 F1 | 	add	fp, #16
11398     A7 16 02 FB | 	rdlong	arg03, fp
1139c     18 4E 85 F1 | 	sub	fp, #24
113a0     04 16 66 F0 | 	shl	arg03, #4
113a4     F2 16 02 F1 | 	add	arg03, objptr
113a8     0C 16 06 F1 | 	add	arg03, #12
113ac     0B 17 02 FB | 	rdlong	arg03, arg03
113b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
113b4     14 00 00 FF 
113b8     F8 E5 85 F1 | 	sub	objptr, ##10744
113bc     E4 04 90 5D |  if_ne	jmp	#LR__1413
113c0     18 4E 05 F1 | 	add	fp, #24
113c4     A7 16 02 FB | 	rdlong	arg03, fp
113c8     0B 1F 02 F6 | 	mov	local01, arg03
113cc     04 1E 66 F0 | 	shl	local01, #4
113d0     14 00 00 FF 
113d4     F8 E5 05 F1 | 	add	objptr, ##10744
113d8     F2 1E 02 F1 | 	add	local01, objptr
113dc     18 4E 85 F1 | 	sub	fp, #24
113e0     04 16 66 F0 | 	shl	arg03, #4
113e4     F2 16 02 F1 | 	add	arg03, objptr
113e8     04 16 06 F1 | 	add	arg03, #4
113ec     0B 13 02 FB | 	rdlong	arg01, arg03
113f0     14 00 00 FF 
113f4     F8 E5 85 F1 | 	sub	objptr, ##10744
113f8     48 FE BF FD | 	call	#_convertstring
113fc     04 1E 06 F1 | 	add	local01, #4
11400     0F FB 61 FC | 	wrlong	result1, local01
11404     18 4E 05 F1 | 	add	fp, #24
11408     A7 1E 02 FB | 	rdlong	local01, fp
1140c     18 4E 85 F1 | 	sub	fp, #24
11410     04 1E 66 F0 | 	shl	local01, #4
11414     14 00 00 FF 
11418     F8 E5 05 F1 | 	add	objptr, ##10744
1141c     F2 1E 02 F1 | 	add	local01, objptr
11420     0C 1E 06 F1 | 	add	local01, #12
11424     0F 3F 68 FC | 	wrlong	#31, local01
11428                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
11428                 | '   variables(varnum).vartype=result_string
11428                 | '   return
11428     14 00 00 FF 
1142c     F8 E5 85 F1 | 	sub	objptr, ##10744
11430     70 04 90 FD | 	jmp	#LR__1413
11434                 | LR__1390
11434                 | ' for i=0 to 2 : arrid(i)=0 : next i
11434     1C 4E 05 F1 | 	add	fp, #28
11438     A7 00 68 FC | 	wrlong	#0, fp
1143c     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
11440                 | LR__1391
11440     A7 1E 02 FB | 	rdlong	local01, fp
11444     02 1E 66 F0 | 	shl	local01, #2
11448     18 4E 05 F1 | 	add	fp, #24
1144c     A7 1E 02 F1 | 	add	local01, fp
11450     0F 01 68 FC | 	wrlong	#0, local01
11454     18 4E 85 F1 | 	sub	fp, #24
11458     A7 1E 02 FB | 	rdlong	local01, fp
1145c     01 1E 06 F1 | 	add	local01, #1
11460     A7 1E 62 FC | 	wrlong	local01, fp
11464     03 1E 16 F2 | 	cmp	local01, #3 wc
11468     D4 FF 9F CD |  if_b	jmp	#LR__1391
1146c                 | LR__1392
1146c     4A 00 00 FF 
11470     80 E4 05 F1 | 	add	objptr, ##38016
11474     F2 16 02 FB | 	rdlong	arg03, objptr
11478     0B 1F 02 F6 | 	mov	local01, arg03
1147c     01 1E 66 F0 | 	shl	local01, #1
11480     0B 1F 02 F1 | 	add	local01, arg03
11484     02 1E 66 F0 | 	shl	local01, #2
11488     03 00 00 FF 
1148c     04 E4 85 F1 | 	sub	objptr, ##1540
11490     F2 1E 02 F1 | 	add	local01, objptr
11494     04 1E 06 F1 | 	add	local01, #4
11498     0F 21 02 FB | 	rdlong	local02, local01
1149c     04 4E 05 F1 | 	add	fp, #4
114a0     A7 20 62 FC | 	wrlong	local02, fp
114a4     20 4E 85 F1 | 	sub	fp, #32
114a8     47 00 00 FF 
114ac     7C E4 85 F1 | 	sub	objptr, ##36476
114b0     F0 A4 BF FD | 	call	#_pop
114b4     A7 FA 61 FC | 	wrlong	result1, fp
114b8     04 4E 05 F1 | 	add	fp, #4
114bc     A7 FC 61 FC | 	wrlong	result2, fp
114c0     04 4E 05 F1 | 	add	fp, #4
114c4     A7 FE 61 FC | 	wrlong	result3, fp
114c8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
114c8                 | ' t1=pop() ' var value
114c8                 | ' if numpar>0 then
114c8     18 4E 05 F1 | 	add	fp, #24
114cc     A7 22 02 FB | 	rdlong	local03, fp
114d0     20 4E 85 F1 | 	sub	fp, #32
114d4     01 22 16 F2 | 	cmp	local03, #1 wc
114d8     78 00 90 CD |  if_b	jmp	#LR__1395
114dc                 | '   for i=numpar to 1 step -1
114dc     20 4E 05 F1 | 	add	fp, #32
114e0     A7 24 0A FB | 	rdlong	local04, fp wz
114e4     04 4E 85 F1 | 	sub	fp, #4
114e8     A7 24 62 FC | 	wrlong	local04, fp
114ec     1C 4E 85 F1 | 	sub	fp, #28
114f0     60 00 90 AD |  if_e	jmp	#LR__1394
114f4                 | LR__1393
114f4     AC A4 BF FD | 	call	#_pop
114f8     0C 4E 05 F1 | 	add	fp, #12
114fc     A7 FA 61 FC | 	wrlong	result1, fp
11500     04 4E 05 F1 | 	add	fp, #4
11504     A7 FC 61 FC | 	wrlong	result2, fp
11508     04 4E 05 F1 | 	add	fp, #4
1150c     A7 FE 61 FC | 	wrlong	result3, fp
11510     08 4E 05 F1 | 	add	fp, #8
11514     A7 22 02 FB | 	rdlong	local03, fp
11518     01 22 86 F1 | 	sub	local03, #1
1151c     02 22 66 F0 | 	shl	local03, #2
11520     18 4E 05 F1 | 	add	fp, #24
11524     A7 22 02 F1 | 	add	local03, fp
11528     28 4E 85 F1 | 	sub	fp, #40
1152c     A7 12 02 F6 | 	mov	arg01, fp
11530     0C 4E 85 F1 | 	sub	fp, #12
11534     30 45 B0 FD | 	call	#_converttoint
11538     11 FB 61 FC | 	wrlong	result1, local03
1153c     1C 4E 05 F1 | 	add	fp, #28
11540     A7 24 02 FB | 	rdlong	local04, fp
11544     01 24 8E F1 | 	sub	local04, #1 wz
11548     A7 24 62 FC | 	wrlong	local04, fp
1154c     1C 4E 85 F1 | 	sub	fp, #28
11550     A0 FF 9F 5D |  if_ne	jmp	#LR__1393
11554                 | LR__1394
11554                 | LR__1395
11554     18 4E 05 F1 | 	add	fp, #24
11558     A7 1E 02 FB | 	rdlong	local01, fp
1155c     04 1E 66 F0 | 	shl	local01, #4
11560     14 00 00 FF 
11564     F8 E5 05 F1 | 	add	objptr, ##10744
11568     F2 1E 02 F1 | 	add	local01, objptr
1156c     04 1E 06 F1 | 	add	local01, #4
11570     0F 13 02 FB | 	rdlong	arg01, local01
11574     0C 4E 05 F1 | 	add	fp, #12
11578     A7 12 62 FC | 	wrlong	arg01, fp
1157c     24 4E 85 F1 | 	sub	fp, #36
11580     14 00 00 FF 
11584     F8 E5 85 F1 | 	sub	objptr, ##10744
11588     CC C0 B0 FD | 	call	#_pslpeek
1158c     FD 24 32 F9 | 	getword	local04, result1, #0
11590     28 4E 05 F1 | 	add	fp, #40
11594     A7 24 62 FC | 	wrlong	local04, fp
11598     04 4E 85 F1 | 	sub	fp, #4
1159c     A7 12 02 FB | 	rdlong	arg01, fp
115a0     24 4E 85 F1 | 	sub	fp, #36
115a4     02 12 06 F1 | 	add	arg01, #2
115a8     54 C0 B0 FD | 	call	#_pspeek
115ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
115b0     2C 4E 05 F1 | 	add	fp, #44
115b4     A7 FA 61 FC | 	wrlong	result1, fp
115b8                 | ' esize=pspeek(arrptr+2)
115b8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
115b8     08 4E 85 F1 | 	sub	fp, #8
115bc     A7 12 02 FB | 	rdlong	arg01, fp
115c0     24 4E 85 F1 | 	sub	fp, #36
115c4     04 12 06 F1 | 	add	arg01, #4
115c8     8C C0 B0 FD | 	call	#_pslpeek
115cc     FD 24 02 F6 | 	mov	local04, result1
115d0     34 4E 05 F1 | 	add	fp, #52
115d4     A7 1E 02 FB | 	rdlong	local01, fp
115d8     34 4E 85 F1 | 	sub	fp, #52
115dc     12 1F 12 F2 | 	cmp	local01, local04 wc
115e0     54 00 90 3D |  if_ae	jmp	#LR__1396
115e4     24 4E 05 F1 | 	add	fp, #36
115e8     A7 12 02 FB | 	rdlong	arg01, fp
115ec     24 4E 85 F1 | 	sub	fp, #36
115f0     08 12 06 F1 | 	add	arg01, #8
115f4     60 C0 B0 FD | 	call	#_pslpeek
115f8     FD 1E 02 F6 | 	mov	local01, result1
115fc     38 4E 05 F1 | 	add	fp, #56
11600     A7 24 02 FB | 	rdlong	local04, fp
11604     38 4E 85 F1 | 	sub	fp, #56
11608     0F 25 12 F2 | 	cmp	local04, local01 wc
1160c     28 00 90 3D |  if_ae	jmp	#LR__1396
11610     24 4E 05 F1 | 	add	fp, #36
11614     A7 12 02 FB | 	rdlong	arg01, fp
11618     24 4E 85 F1 | 	sub	fp, #36
1161c     0C 12 06 F1 | 	add	arg01, #12
11620     34 C0 B0 FD | 	call	#_pslpeek
11624     3C 4E 05 F1 | 	add	fp, #60
11628     A7 24 02 FB | 	rdlong	local04, fp
1162c     3C 4E 85 F1 | 	sub	fp, #60
11630     FD 24 12 F2 | 	cmp	local04, result1 wc
11634     0C 00 90 CD |  if_b	jmp	#LR__1397
11638                 | LR__1396
11638     31 12 06 F6 | 	mov	arg01, #49
1163c     84 BD B0 FD | 	call	#_printerror
11640     60 02 90 FD | 	jmp	#LR__1413
11644                 | LR__1397
11644     24 4E 05 F1 | 	add	fp, #36
11648     A7 12 02 FB | 	rdlong	arg01, fp
1164c     09 25 02 F6 | 	mov	local04, arg01
11650     10 24 06 F1 | 	add	local04, #16
11654     24 4E 85 F1 | 	sub	fp, #36
11658     04 12 06 F1 | 	add	arg01, #4
1165c     F8 BF B0 FD | 	call	#_pslpeek
11660     FD 1E 02 F6 | 	mov	local01, result1
11664     38 4E 05 F1 | 	add	fp, #56
11668     A7 20 02 FB | 	rdlong	local02, fp
1166c     10 1F 02 FD | 	qmul	local01, local02
11670     04 4E 85 F1 | 	sub	fp, #4
11674     A7 22 02 FB | 	rdlong	local03, fp
11678     10 4E 85 F1 | 	sub	fp, #16
1167c     A7 12 02 FB | 	rdlong	arg01, fp
11680     24 4E 85 F1 | 	sub	fp, #36
11684     08 12 06 F1 | 	add	arg01, #8
11688     18 20 62 FD | 	getqx	local02
1168c     10 23 02 F1 | 	add	local03, local02
11690     C4 BF B0 FD | 	call	#_pslpeek
11694     FD 20 02 F6 | 	mov	local02, result1
11698     24 4E 05 F1 | 	add	fp, #36
1169c     A7 12 02 FB | 	rdlong	arg01, fp
116a0     24 4E 85 F1 | 	sub	fp, #36
116a4     04 12 06 F1 | 	add	arg01, #4
116a8     AC BF B0 FD | 	call	#_pslpeek
116ac     FD 20 02 FD | 	qmul	local02, result1
116b0     3C 4E 05 F1 | 	add	fp, #60
116b4     A7 20 02 FB | 	rdlong	local02, fp
116b8     18 1E 62 FD | 	getqx	local01
116bc     10 1F 02 FD | 	qmul	local01, local02
116c0     10 4E 85 F1 | 	sub	fp, #16
116c4     A7 20 02 FB | 	rdlong	local02, fp
116c8     18 1E 62 FD | 	getqx	local01
116cc     0F 23 02 F1 | 	add	local03, local01
116d0     11 21 02 FD | 	qmul	local02, local03
116d4     04 4E 05 F1 | 	add	fp, #4
116d8                 | ' 
116d8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
116d8                 | ' select case arrtype
116d8     18 22 62 FD | 	getqx	local03
116dc     11 25 02 F1 | 	add	local04, local03
116e0     A7 24 62 FC | 	wrlong	local04, fp
116e4     08 4E 85 F1 | 	sub	fp, #8
116e8     A7 26 02 FB | 	rdlong	local05, fp
116ec     28 4E 85 F1 | 	sub	fp, #40
116f0     00 27 86 F1 | 	sub	local05, #256
116f4     0C 26 26 F3 | 	fle	local05, #12
116f8     30 26 62 FD | 	jmprel	local05
116fc                 | LR__1398
116fc     30 00 90 FD | 	jmp	#LR__1399
11700     58 00 90 FD | 	jmp	#LR__1400
11704     6C 00 90 FD | 	jmp	#LR__1401
11708     80 00 90 FD | 	jmp	#LR__1402
1170c     B0 00 90 FD | 	jmp	#LR__1403
11710     E0 00 90 FD | 	jmp	#LR__1404
11714     F4 00 90 FD | 	jmp	#LR__1405
11718     08 01 90 FD | 	jmp	#LR__1406
1171c     1C 01 90 FD | 	jmp	#LR__1407
11720     30 01 90 FD | 	jmp	#LR__1408
11724     44 01 90 FD | 	jmp	#LR__1409
11728     58 01 90 FD | 	jmp	#LR__1410
1172c     6C 01 90 FD | 	jmp	#LR__1411
11730                 | LR__1399
11730     A7 12 02 F6 | 	mov	arg01, fp
11734     30 4E 05 F1 | 	add	fp, #48
11738     A7 14 02 FB | 	rdlong	arg02, fp
1173c     30 4E 85 F1 | 	sub	fp, #48
11740     0C 16 06 F6 | 	mov	arg03, #12
11744     0B 00 00 FF 
11748     CC E4 05 F1 | 	add	objptr, ##5836
1174c     34 E4 B0 FD | 	call	#_psram_spin2_write
11750     0B 00 00 FF 
11754     CC E4 85 F1 | 	sub	objptr, ##5836
11758     48 01 90 FD | 	jmp	#LR__1412
1175c                 | LR__1400
1175c     30 4E 05 F1 | 	add	fp, #48
11760     A7 12 02 FB | 	rdlong	arg01, fp
11764     30 4E 85 F1 | 	sub	fp, #48
11768     A7 14 02 FB | 	rdlong	arg02, fp
1176c     48 BE B0 FD | 	call	#_pspoke
11770     30 01 90 FD | 	jmp	#LR__1412
11774                 | LR__1401
11774     30 4E 05 F1 | 	add	fp, #48
11778     A7 12 02 FB | 	rdlong	arg01, fp
1177c     30 4E 85 F1 | 	sub	fp, #48
11780     A7 14 02 FB | 	rdlong	arg02, fp
11784     30 BE B0 FD | 	call	#_pspoke
11788     18 01 90 FD | 	jmp	#LR__1412
1178c                 | LR__1402
1178c     30 4E 05 F1 | 	add	fp, #48
11790     A7 12 02 FB | 	rdlong	arg01, fp
11794     30 4E 85 F1 | 	sub	fp, #48
11798     A7 14 02 FB | 	rdlong	arg02, fp
1179c     18 BE B0 FD | 	call	#_pspoke
117a0     30 4E 05 F1 | 	add	fp, #48
117a4     A7 12 02 FB | 	rdlong	arg01, fp
117a8     30 4E 85 F1 | 	sub	fp, #48
117ac     01 12 06 F1 | 	add	arg01, #1
117b0     A7 14 02 FB | 	rdlong	arg02, fp
117b4     08 14 46 F0 | 	shr	arg02, #8
117b8     FC BD B0 FD | 	call	#_pspoke
117bc     E4 00 90 FD | 	jmp	#LR__1412
117c0                 | LR__1403
117c0     30 4E 05 F1 | 	add	fp, #48
117c4     A7 12 02 FB | 	rdlong	arg01, fp
117c8     30 4E 85 F1 | 	sub	fp, #48
117cc     A7 14 02 FB | 	rdlong	arg02, fp
117d0     E4 BD B0 FD | 	call	#_pspoke
117d4     30 4E 05 F1 | 	add	fp, #48
117d8     A7 12 02 FB | 	rdlong	arg01, fp
117dc     30 4E 85 F1 | 	sub	fp, #48
117e0     01 12 06 F1 | 	add	arg01, #1
117e4     A7 14 02 FB | 	rdlong	arg02, fp
117e8     08 14 46 F0 | 	shr	arg02, #8
117ec     C8 BD B0 FD | 	call	#_pspoke
117f0     B0 00 90 FD | 	jmp	#LR__1412
117f4                 | LR__1404
117f4     30 4E 05 F1 | 	add	fp, #48
117f8     A7 12 02 FB | 	rdlong	arg01, fp
117fc     30 4E 85 F1 | 	sub	fp, #48
11800     A7 14 02 FB | 	rdlong	arg02, fp
11804     20 BD B0 FD | 	call	#_pslpoke
11808     98 00 90 FD | 	jmp	#LR__1412
1180c                 | LR__1405
1180c     30 4E 05 F1 | 	add	fp, #48
11810     A7 12 02 FB | 	rdlong	arg01, fp
11814     30 4E 85 F1 | 	sub	fp, #48
11818     A7 14 02 FB | 	rdlong	arg02, fp
1181c     08 BD B0 FD | 	call	#_pslpoke
11820     80 00 90 FD | 	jmp	#LR__1412
11824                 | LR__1406
11824     30 4E 05 F1 | 	add	fp, #48
11828     A7 12 02 FB | 	rdlong	arg01, fp
1182c     30 4E 85 F1 | 	sub	fp, #48
11830     A7 14 02 FB | 	rdlong	arg02, fp
11834     F0 BC B0 FD | 	call	#_pslpoke
11838     68 00 90 FD | 	jmp	#LR__1412
1183c                 | LR__1407
1183c     30 4E 05 F1 | 	add	fp, #48
11840     A7 12 02 FB | 	rdlong	arg01, fp
11844     30 4E 85 F1 | 	sub	fp, #48
11848     A7 14 02 FB | 	rdlong	arg02, fp
1184c     D8 BC B0 FD | 	call	#_pslpoke
11850     50 00 90 FD | 	jmp	#LR__1412
11854                 | LR__1408
11854     30 4E 05 F1 | 	add	fp, #48
11858     A7 12 02 FB | 	rdlong	arg01, fp
1185c     30 4E 85 F1 | 	sub	fp, #48
11860     A7 14 02 FB | 	rdlong	arg02, fp
11864     C0 BC B0 FD | 	call	#_pslpoke
11868     38 00 90 FD | 	jmp	#LR__1412
1186c                 | LR__1409
1186c     30 4E 05 F1 | 	add	fp, #48
11870     A7 12 02 FB | 	rdlong	arg01, fp
11874     30 4E 85 F1 | 	sub	fp, #48
11878     A7 14 02 FB | 	rdlong	arg02, fp
1187c     A8 BC B0 FD | 	call	#_pslpoke
11880     20 00 90 FD | 	jmp	#LR__1412
11884                 | LR__1410
11884     30 4E 05 F1 | 	add	fp, #48
11888     A7 12 02 FB | 	rdlong	arg01, fp
1188c     30 4E 85 F1 | 	sub	fp, #48
11890     A7 14 02 FB | 	rdlong	arg02, fp
11894     90 BC B0 FD | 	call	#_pslpoke
11898     08 00 90 FD | 	jmp	#LR__1412
1189c                 | LR__1411
1189c     32 12 06 F6 | 	mov	arg01, #50
118a0     20 BB B0 FD | 	call	#_printerror
118a4                 | LR__1412
118a4                 | LR__1413
118a4     A7 F0 03 F6 | 	mov	ptra, fp
118a8     B2 00 A0 FD | 	call	#popregs_
118ac                 | _do_assign_ret
118ac     2D 00 64 FD | 	ret
118b0                 | 
118b0                 | ' 
118b0                 | ' 
118b0                 | ' ' --------------------- Read a variable and push to the stack
118b0                 | ' 
118b0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
118b0                 | ' 
118b0                 | ' sub do_getvar
118b0                 | _do_getvar
118b0     04 4A 05 F6 | 	mov	COUNT_, #4
118b4     A8 00 A0 FD | 	call	#pushregs_
118b8     3C F0 07 F1 | 	add	ptra, #60
118bc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
118bc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
118bc     4A 00 00 FF 
118c0     80 E4 05 F1 | 	add	objptr, ##38016
118c4     F2 1E 02 FB | 	rdlong	local01, objptr
118c8     0F 17 02 F6 | 	mov	arg03, local01
118cc     01 16 66 F0 | 	shl	arg03, #1
118d0     0F 17 02 F1 | 	add	arg03, local01
118d4     02 16 66 F0 | 	shl	arg03, #2
118d8     03 00 00 FF 
118dc     04 E4 85 F1 | 	sub	objptr, ##1540
118e0     F2 16 02 F1 | 	add	arg03, objptr
118e4     04 16 06 F1 | 	add	arg03, #4
118e8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
118ec     47 00 00 FF 
118f0     7C E4 85 F1 | 	sub	objptr, ##36476
118f4     C4 00 90 5D |  if_ne	jmp	#LR__1421
118f8     4A 00 00 FF 
118fc     80 E4 05 F1 | 	add	objptr, ##38016
11900     F2 1E 02 FB | 	rdlong	local01, objptr
11904     0F 13 02 F6 | 	mov	arg01, local01
11908     01 12 66 F0 | 	shl	arg01, #1
1190c     0F 13 02 F1 | 	add	arg01, local01
11910     02 12 66 F0 | 	shl	arg01, #2
11914     03 00 00 FF 
11918     04 E4 85 F1 | 	sub	objptr, ##1540
1191c     F2 12 02 F1 | 	add	arg01, objptr
11920     09 1F 02 FB | 	rdlong	local01, arg01
11924     04 1E 66 F0 | 	shl	local01, #4
11928     32 00 00 FF 
1192c     84 E4 85 F1 | 	sub	objptr, ##25732
11930     F2 1E 02 F1 | 	add	local01, objptr
11934     04 1E 06 F1 | 	add	local01, #4
11938     0F 13 02 FB | 	rdlong	arg01, local01
1193c     04 1E 06 F1 | 	add	local01, #4
11940     0F 1F 02 FB | 	rdlong	local01, local01
11944     A7 12 62 FC | 	wrlong	arg01, fp
11948     04 4E 05 F1 | 	add	fp, #4
1194c     A7 1E 62 FC | 	wrlong	local01, fp
11950     35 00 00 FF 
11954     88 E4 05 F1 | 	add	objptr, ##27272
11958     F2 1E 02 FB | 	rdlong	local01, objptr
1195c     0F 13 02 F6 | 	mov	arg01, local01
11960     01 12 66 F0 | 	shl	arg01, #1
11964     0F 13 02 F1 | 	add	arg01, local01
11968     02 12 66 F0 | 	shl	arg01, #2
1196c     03 00 00 FF 
11970     04 E4 85 F1 | 	sub	objptr, ##1540
11974     F2 12 02 F1 | 	add	arg01, objptr
11978     09 1F 02 FB | 	rdlong	local01, arg01
1197c     04 1E 66 F0 | 	shl	local01, #4
11980     32 00 00 FF 
11984     84 E4 85 F1 | 	sub	objptr, ##25732
11988     F2 1E 02 F1 | 	add	local01, objptr
1198c     0C 1E 06 F1 | 	add	local01, #12
11990     0F 1F 02 FB | 	rdlong	local01, local01
11994     04 4E 05 F1 | 	add	fp, #4
11998     A7 1E 62 FC | 	wrlong	local01, fp
1199c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1199c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1199c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1199c     08 4E 85 F1 | 	sub	fp, #8
119a0     00 1F 16 F2 | 	cmp	local01, #256 wc
119a4     14 00 00 FF 
119a8     F8 E5 85 F1 | 	sub	objptr, ##10744
119ac     0C 00 90 3D |  if_ae	jmp	#LR__1420
119b0     A7 12 02 F6 | 	mov	arg01, fp
119b4     84 A0 BF FD | 	call	#_push
119b8     A0 04 90 FD | 	jmp	#LR__1442
119bc                 | LR__1420
119bc                 | LR__1421
119bc     4A 00 00 FF 
119c0     80 E4 05 F1 | 	add	objptr, ##38016
119c4     F2 16 02 FB | 	rdlong	arg03, objptr
119c8     0B 15 02 F6 | 	mov	arg02, arg03
119cc     01 14 66 F0 | 	shl	arg02, #1
119d0     0B 15 02 F1 | 	add	arg02, arg03
119d4     02 14 66 F0 | 	shl	arg02, #2
119d8     03 00 00 FF 
119dc     04 E4 85 F1 | 	sub	objptr, ##1540
119e0     F2 14 02 F1 | 	add	arg02, objptr
119e4     0A 17 02 FB | 	rdlong	arg03, arg02
119e8     04 16 66 F0 | 	shl	arg03, #4
119ec     32 00 00 FF 
119f0     84 E4 85 F1 | 	sub	objptr, ##25732
119f4     F2 16 02 F1 | 	add	arg03, objptr
119f8     04 16 06 F1 | 	add	arg03, #4
119fc     0B 13 02 FB | 	rdlong	arg01, arg03
11a00     0C 4E 05 F1 | 	add	fp, #12
11a04     A7 12 62 FC | 	wrlong	arg01, fp
11a08     0C 4E 85 F1 | 	sub	fp, #12
11a0c     14 00 00 FF 
11a10     F8 E5 85 F1 | 	sub	objptr, ##10744
11a14     40 BC B0 FD | 	call	#_pslpeek
11a18     FD FA 31 F9 | 	getword	result1, result1, #0
11a1c     10 4E 05 F1 | 	add	fp, #16
11a20     A7 FA 61 FC | 	wrlong	result1, fp
11a24     4A 00 00 FF 
11a28     80 E4 05 F1 | 	add	objptr, ##38016
11a2c     F2 16 02 FB | 	rdlong	arg03, objptr
11a30     0B 15 02 F6 | 	mov	arg02, arg03
11a34     01 14 66 F0 | 	shl	arg02, #1
11a38     0B 15 02 F1 | 	add	arg02, arg03
11a3c     02 14 66 F0 | 	shl	arg02, #2
11a40     03 00 00 FF 
11a44     04 E4 85 F1 | 	sub	objptr, ##1540
11a48     F2 14 02 F1 | 	add	arg02, objptr
11a4c     04 14 06 F1 | 	add	arg02, #4
11a50     0A 17 02 FB | 	rdlong	arg03, arg02
11a54     04 4E 05 F1 | 	add	fp, #4
11a58     A7 16 62 FC | 	wrlong	arg03, fp
11a5c     08 4E 85 F1 | 	sub	fp, #8
11a60     A7 12 02 FB | 	rdlong	arg01, fp
11a64     0C 4E 85 F1 | 	sub	fp, #12
11a68     02 12 06 F1 | 	add	arg01, #2
11a6c     47 00 00 FF 
11a70     7C E4 85 F1 | 	sub	objptr, ##36476
11a74     88 BB B0 FD | 	call	#_pspeek
11a78     FD FA E1 F8 | 	getbyte	result1, result1, #0
11a7c     18 4E 05 F1 | 	add	fp, #24
11a80     A7 FA 61 FC | 	wrlong	result1, fp
11a84     0C 4E 85 F1 | 	sub	fp, #12
11a88     A7 12 02 FB | 	rdlong	arg01, fp
11a8c     0C 4E 85 F1 | 	sub	fp, #12
11a90     04 12 06 F1 | 	add	arg01, #4
11a94     C0 BB B0 FD | 	call	#_pslpeek
11a98     1C 4E 05 F1 | 	add	fp, #28
11a9c     A7 FA 61 FC | 	wrlong	result1, fp
11aa0     10 4E 85 F1 | 	sub	fp, #16
11aa4     A7 12 02 FB | 	rdlong	arg01, fp
11aa8     0C 4E 85 F1 | 	sub	fp, #12
11aac     08 12 06 F1 | 	add	arg01, #8
11ab0     A4 BB B0 FD | 	call	#_pslpeek
11ab4     20 4E 05 F1 | 	add	fp, #32
11ab8     A7 FA 61 FC | 	wrlong	result1, fp
11abc     14 4E 85 F1 | 	sub	fp, #20
11ac0     A7 12 02 FB | 	rdlong	arg01, fp
11ac4     0C 4E 85 F1 | 	sub	fp, #12
11ac8     0C 12 06 F1 | 	add	arg01, #12
11acc     88 BB B0 FD | 	call	#_pslpeek
11ad0     24 4E 05 F1 | 	add	fp, #36
11ad4     A7 FA 61 FC | 	wrlong	result1, fp
11ad8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11ad8                 | ' esize=pspeek(arrptr+2)
11ad8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11ad8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11ad8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11ad8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11ad8     10 4E 85 F1 | 	sub	fp, #16
11adc     A7 16 02 FB | 	rdlong	arg03, fp
11ae0     14 4E 85 F1 | 	sub	fp, #20
11ae4     03 16 16 F2 | 	cmp	arg03, #3 wc
11ae8     38 00 90 CD |  if_b	jmp	#LR__1422
11aec     B4 9E BF FD | 	call	#_pop
11af0     FF 16 02 F6 | 	mov	arg03, result3
11af4     A7 FA 61 FC | 	wrlong	result1, fp
11af8     04 4E 05 F1 | 	add	fp, #4
11afc     A7 FC 61 FC | 	wrlong	result2, fp
11b00     04 4E 05 F1 | 	add	fp, #4
11b04     A7 16 62 FC | 	wrlong	arg03, fp
11b08     08 4E 85 F1 | 	sub	fp, #8
11b0c     A7 12 02 F6 | 	mov	arg01, fp
11b10     54 3F B0 FD | 	call	#_converttoint
11b14     30 4E 05 F1 | 	add	fp, #48
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c     30 4E 85 F1 | 	sub	fp, #48
11b20     0C 00 90 FD | 	jmp	#LR__1423
11b24                 | LR__1422
11b24     30 4E 05 F1 | 	add	fp, #48
11b28     A7 00 68 FC | 	wrlong	#0, fp
11b2c     30 4E 85 F1 | 	sub	fp, #48
11b30                 | LR__1423
11b30                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11b30     14 4E 05 F1 | 	add	fp, #20
11b34     A7 16 02 FB | 	rdlong	arg03, fp
11b38     14 4E 85 F1 | 	sub	fp, #20
11b3c     02 16 16 F2 | 	cmp	arg03, #2 wc
11b40     38 00 90 CD |  if_b	jmp	#LR__1424
11b44     5C 9E BF FD | 	call	#_pop
11b48     FF 16 02 F6 | 	mov	arg03, result3
11b4c     A7 FA 61 FC | 	wrlong	result1, fp
11b50     04 4E 05 F1 | 	add	fp, #4
11b54     A7 FC 61 FC | 	wrlong	result2, fp
11b58     04 4E 05 F1 | 	add	fp, #4
11b5c     A7 16 62 FC | 	wrlong	arg03, fp
11b60     08 4E 85 F1 | 	sub	fp, #8
11b64     A7 12 02 F6 | 	mov	arg01, fp
11b68     FC 3E B0 FD | 	call	#_converttoint
11b6c     2C 4E 05 F1 | 	add	fp, #44
11b70     A7 FA 61 FC | 	wrlong	result1, fp
11b74     2C 4E 85 F1 | 	sub	fp, #44
11b78     0C 00 90 FD | 	jmp	#LR__1425
11b7c                 | LR__1424
11b7c     2C 4E 05 F1 | 	add	fp, #44
11b80     A7 00 68 FC | 	wrlong	#0, fp
11b84     2C 4E 85 F1 | 	sub	fp, #44
11b88                 | LR__1425
11b88                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11b88     14 4E 05 F1 | 	add	fp, #20
11b8c     A7 16 02 FB | 	rdlong	arg03, fp
11b90     14 4E 85 F1 | 	sub	fp, #20
11b94     01 16 16 F2 | 	cmp	arg03, #1 wc
11b98     38 00 90 CD |  if_b	jmp	#LR__1426
11b9c     04 9E BF FD | 	call	#_pop
11ba0     FF 16 02 F6 | 	mov	arg03, result3
11ba4     A7 FA 61 FC | 	wrlong	result1, fp
11ba8     04 4E 05 F1 | 	add	fp, #4
11bac     A7 FC 61 FC | 	wrlong	result2, fp
11bb0     04 4E 05 F1 | 	add	fp, #4
11bb4     A7 16 62 FC | 	wrlong	arg03, fp
11bb8     08 4E 85 F1 | 	sub	fp, #8
11bbc     A7 12 02 F6 | 	mov	arg01, fp
11bc0     A4 3E B0 FD | 	call	#_converttoint
11bc4     28 4E 05 F1 | 	add	fp, #40
11bc8     A7 FA 61 FC | 	wrlong	result1, fp
11bcc     28 4E 85 F1 | 	sub	fp, #40
11bd0     0C 00 90 FD | 	jmp	#LR__1427
11bd4                 | LR__1426
11bd4     28 4E 05 F1 | 	add	fp, #40
11bd8     A7 00 68 FC | 	wrlong	#0, fp
11bdc     28 4E 85 F1 | 	sub	fp, #40
11be0                 | LR__1427
11be0     0C 4E 05 F1 | 	add	fp, #12
11be4     A7 20 02 FB | 	rdlong	local02, fp
11be8     1C 4E 05 F1 | 	add	fp, #28
11bec     A7 22 02 FB | 	rdlong	local03, fp
11bf0     04 4E 05 F1 | 	add	fp, #4
11bf4     A7 FC 01 FB | 	rdlong	result2, fp
11bf8     10 4E 85 F1 | 	sub	fp, #16
11bfc     A7 FE 01 FB | 	rdlong	result3, fp
11c00     FF FC 01 FD | 	qmul	result2, result3
11c04     10 20 06 F1 | 	add	local02, #16
11c08     14 4E 05 F1 | 	add	fp, #20
11c0c     A7 FC 01 FB | 	rdlong	result2, fp
11c10     18 FA 61 FD | 	getqx	result1
11c14     FF FC 01 FD | 	qmul	result2, result3
11c18     FD 22 02 F1 | 	add	local03, result1
11c1c     10 4E 85 F1 | 	sub	fp, #16
11c20     A7 FE 01 FB | 	rdlong	result3, fp
11c24     18 FC 61 FD | 	getqx	result2
11c28     FF FC 01 FD | 	qmul	result2, result3
11c2c     08 4E 85 F1 | 	sub	fp, #8
11c30     A7 FE 01 FB | 	rdlong	result3, fp
11c34     18 FC 61 FD | 	getqx	result2
11c38     FE 22 02 F1 | 	add	local03, result2
11c3c     FF 22 02 FD | 	qmul	local03, result3
11c40     1C 4E 05 F1 | 	add	fp, #28
11c44                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11c44                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11c44                 | ' 
11c44                 | ' select case vartype
11c44     18 FC 61 FD | 	getqx	result2
11c48     FE 20 02 F1 | 	add	local02, result2
11c4c     A7 20 62 FC | 	wrlong	local02, fp
11c50     24 4E 85 F1 | 	sub	fp, #36
11c54     A7 24 02 FB | 	rdlong	local04, fp
11c58     10 4E 85 F1 | 	sub	fp, #16
11c5c     00 25 86 F1 | 	sub	local04, #256
11c60     0C 24 26 F3 | 	fle	local04, #12
11c64     30 24 62 FD | 	jmprel	local04
11c68                 | LR__1428
11c68     30 00 90 FD | 	jmp	#LR__1429
11c6c     58 00 90 FD | 	jmp	#LR__1430
11c70     8C 00 90 FD | 	jmp	#LR__1431
11c74     AC 00 90 FD | 	jmp	#LR__1432
11c78     E8 00 90 FD | 	jmp	#LR__1433
11c7c     08 01 90 FD | 	jmp	#LR__1434
11c80     24 01 90 FD | 	jmp	#LR__1435
11c84     40 01 90 FD | 	jmp	#LR__1436
11c88     50 01 90 FD | 	jmp	#LR__1437
11c8c     60 01 90 FD | 	jmp	#LR__1438
11c90     7C 01 90 FD | 	jmp	#LR__1439
11c94     8C 01 90 FD | 	jmp	#LR__1440
11c98     B8 01 90 FD | 	jmp	#LR__1441
11c9c                 | LR__1429
11c9c     A7 12 02 F6 | 	mov	arg01, fp
11ca0     34 4E 05 F1 | 	add	fp, #52
11ca4     A7 14 02 FB | 	rdlong	arg02, fp
11ca8     34 4E 85 F1 | 	sub	fp, #52
11cac     0C 16 06 F6 | 	mov	arg03, #12
11cb0     0B 00 00 FF 
11cb4     CC E4 05 F1 | 	add	objptr, ##5836
11cb8     2C DE B0 FD | 	call	#_psram_spin2_read1
11cbc     0B 00 00 FF 
11cc0     CC E4 85 F1 | 	sub	objptr, ##5836
11cc4     8C 01 90 FD | 	jmp	#LR__1441
11cc8                 | LR__1430
11cc8     08 4E 05 F1 | 	add	fp, #8
11ccc     A7 38 68 FC | 	wrlong	#28, fp
11cd0     2C 4E 05 F1 | 	add	fp, #44
11cd4     A7 12 02 FB | 	rdlong	arg01, fp
11cd8     34 4E 85 F1 | 	sub	fp, #52
11cdc     20 B9 B0 FD | 	call	#_pspeek
11ce0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ce4     A7 FA 61 FC | 	wrlong	result1, fp
11ce8     80 FA 15 F2 | 	cmp	result1, #128 wc
11cec     00 1F 66 36 |  if_ae	neg	local01, #256
11cf0     A7 22 02 3B |  if_ae	rdlong	local03, fp
11cf4     11 1F 42 35 |  if_ae	or	local01, local03
11cf8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11cfc     54 01 90 FD | 	jmp	#LR__1441
11d00                 | LR__1431
11d00     08 4E 05 F1 | 	add	fp, #8
11d04     A7 3A 68 FC | 	wrlong	#29, fp
11d08     2C 4E 05 F1 | 	add	fp, #44
11d0c     A7 12 02 FB | 	rdlong	arg01, fp
11d10     34 4E 85 F1 | 	sub	fp, #52
11d14     E8 B8 B0 FD | 	call	#_pspeek
11d18     FD FA E1 F8 | 	getbyte	result1, result1, #0
11d1c     A7 FA 61 FC | 	wrlong	result1, fp
11d20     30 01 90 FD | 	jmp	#LR__1441
11d24                 | LR__1432
11d24     08 4E 05 F1 | 	add	fp, #8
11d28     A7 38 68 FC | 	wrlong	#28, fp
11d2c     2C 4E 05 F1 | 	add	fp, #44
11d30     A7 12 02 FB | 	rdlong	arg01, fp
11d34     34 4E 85 F1 | 	sub	fp, #52
11d38     1C B9 B0 FD | 	call	#_pslpeek
11d3c     FD FA 31 F9 | 	getword	result1, result1, #0
11d40     A7 FA 61 FC | 	wrlong	result1, fp
11d44     40 00 00 FF 
11d48     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11d4c     FF 7F 00 3F 
11d50     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11d54     A7 22 02 3B |  if_ae	rdlong	local03, fp
11d58     11 1F 42 35 |  if_ae	or	local01, local03
11d5c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11d60     F0 00 90 FD | 	jmp	#LR__1441
11d64                 | LR__1433
11d64     08 4E 05 F1 | 	add	fp, #8
11d68     A7 3A 68 FC | 	wrlong	#29, fp
11d6c     2C 4E 05 F1 | 	add	fp, #44
11d70     A7 12 02 FB | 	rdlong	arg01, fp
11d74     34 4E 85 F1 | 	sub	fp, #52
11d78     DC B8 B0 FD | 	call	#_pslpeek
11d7c     FD FA 31 F9 | 	getword	result1, result1, #0
11d80     A7 FA 61 FC | 	wrlong	result1, fp
11d84     CC 00 90 FD | 	jmp	#LR__1441
11d88                 | LR__1434
11d88     08 4E 05 F1 | 	add	fp, #8
11d8c     A7 38 68 FC | 	wrlong	#28, fp
11d90     2C 4E 05 F1 | 	add	fp, #44
11d94     A7 12 02 FB | 	rdlong	arg01, fp
11d98     34 4E 85 F1 | 	sub	fp, #52
11d9c     B8 B8 B0 FD | 	call	#_pslpeek
11da0     A7 FA 61 FC | 	wrlong	result1, fp
11da4     AC 00 90 FD | 	jmp	#LR__1441
11da8                 | LR__1435
11da8     08 4E 05 F1 | 	add	fp, #8
11dac     A7 3A 68 FC | 	wrlong	#29, fp
11db0     2C 4E 05 F1 | 	add	fp, #44
11db4     A7 12 02 FB | 	rdlong	arg01, fp
11db8     34 4E 85 F1 | 	sub	fp, #52
11dbc     98 B8 B0 FD | 	call	#_pslpeek
11dc0     A7 FA 61 FC | 	wrlong	result1, fp
11dc4     8C 00 90 FD | 	jmp	#LR__1441
11dc8                 | LR__1436
11dc8     08 4E 05 F1 | 	add	fp, #8
11dcc     A7 FE 69 FC | 	wrlong	#255, fp
11dd0     08 4E 85 F1 | 	sub	fp, #8
11dd4     A7 60 68 FC | 	wrlong	#48, fp
11dd8     78 00 90 FD | 	jmp	#LR__1441
11ddc                 | LR__1437
11ddc     08 4E 05 F1 | 	add	fp, #8
11de0     A7 FE 69 FC | 	wrlong	#255, fp
11de4     08 4E 85 F1 | 	sub	fp, #8
11de8     A7 60 68 FC | 	wrlong	#48, fp
11dec     64 00 90 FD | 	jmp	#LR__1441
11df0                 | LR__1438
11df0     08 4E 05 F1 | 	add	fp, #8
11df4     A7 3C 68 FC | 	wrlong	#30, fp
11df8     2C 4E 05 F1 | 	add	fp, #44
11dfc     A7 12 02 FB | 	rdlong	arg01, fp
11e00     34 4E 85 F1 | 	sub	fp, #52
11e04     50 B8 B0 FD | 	call	#_pslpeek
11e08     A7 FA 61 FC | 	wrlong	result1, fp
11e0c     44 00 90 FD | 	jmp	#LR__1441
11e10                 | LR__1439
11e10     08 4E 05 F1 | 	add	fp, #8
11e14     A7 FE 69 FC | 	wrlong	#255, fp
11e18     08 4E 85 F1 | 	sub	fp, #8
11e1c     A7 60 68 FC | 	wrlong	#48, fp
11e20     30 00 90 FD | 	jmp	#LR__1441
11e24                 | LR__1440
11e24     08 4E 05 F1 | 	add	fp, #8
11e28     A7 3E 68 FC | 	wrlong	#31, fp
11e2c     2C 4E 05 F1 | 	add	fp, #44
11e30     A7 12 02 FB | 	rdlong	arg01, fp
11e34     34 4E 85 F1 | 	sub	fp, #52
11e38     1C B8 B0 FD | 	call	#_pslpeek
11e3c     A7 FA 61 FC | 	wrlong	result1, fp
11e40     00 04 00 FF 
11e44     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11e48     08 4E 05 31 |  if_ae	add	fp, #8
11e4c     A7 56 68 3C |  if_ae	wrlong	#43, fp
11e50     08 4E 85 31 |  if_ae	sub	fp, #8
11e54                 | LR__1441
11e54     A7 12 02 F6 | 	mov	arg01, fp
11e58     E0 9B BF FD | 	call	#_push
11e5c                 | LR__1442
11e5c     A7 F0 03 F6 | 	mov	ptra, fp
11e60     B2 00 A0 FD | 	call	#popregs_
11e64                 | _do_getvar_ret
11e64     2D 00 64 FD | 	ret
11e68                 | 
11e68                 | ' 
11e68                 | ' 
11e68                 | ' sub do_getaddr
11e68                 | _do_getaddr
11e68     01 4A 05 F6 | 	mov	COUNT_, #1
11e6c     A8 00 A0 FD | 	call	#pushregs_
11e70     38 F0 07 F1 | 	add	ptra, #56
11e74                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11e74                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11e74     4A 00 00 FF 
11e78     80 E4 05 F1 | 	add	objptr, ##38016
11e7c     F2 12 02 FB | 	rdlong	arg01, objptr
11e80     09 FD 01 F6 | 	mov	result2, arg01
11e84     01 FC 65 F0 | 	shl	result2, #1
11e88     09 FD 01 F1 | 	add	result2, arg01
11e8c     02 FC 65 F0 | 	shl	result2, #2
11e90     03 00 00 FF 
11e94     04 E4 85 F1 | 	sub	objptr, ##1540
11e98     F2 FC 01 F1 | 	add	result2, objptr
11e9c     04 FC 05 F1 | 	add	result2, #4
11ea0     FE FC 09 FB | 	rdlong	result2, result2 wz
11ea4     47 00 00 FF 
11ea8     7C E4 85 F1 | 	sub	objptr, ##36476
11eac     C4 00 90 5D |  if_ne	jmp	#LR__1450
11eb0     4A 00 00 FF 
11eb4     80 E4 05 F1 | 	add	objptr, ##38016
11eb8     F2 12 02 FB | 	rdlong	arg01, objptr
11ebc     09 FD 01 F6 | 	mov	result2, arg01
11ec0     01 FC 65 F0 | 	shl	result2, #1
11ec4     09 FD 01 F1 | 	add	result2, arg01
11ec8     02 FC 65 F0 | 	shl	result2, #2
11ecc     03 00 00 FF 
11ed0     04 E4 85 F1 | 	sub	objptr, ##1540
11ed4     F2 FC 01 F1 | 	add	result2, objptr
11ed8     FE 12 02 FB | 	rdlong	arg01, result2
11edc     04 12 66 F0 | 	shl	arg01, #4
11ee0     32 00 00 FF 
11ee4     84 E4 85 F1 | 	sub	objptr, ##25732
11ee8     F2 12 02 F1 | 	add	arg01, objptr
11eec     0C 12 06 F1 | 	add	arg01, #12
11ef0     09 13 02 FB | 	rdlong	arg01, arg01
11ef4     08 4E 05 F1 | 	add	fp, #8
11ef8     A7 12 62 FC | 	wrlong	arg01, fp
11efc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11efc                 | '    if t1.result_type>=array_no_type then goto 2200
11efc     08 4E 85 F1 | 	sub	fp, #8
11f00     00 13 16 F2 | 	cmp	arg01, #256 wc
11f04     14 00 00 FF 
11f08     F8 E5 85 F1 | 	sub	objptr, ##10744
11f0c     64 00 90 3D |  if_ae	jmp	#LR__1451
11f10     4A 00 00 FF 
11f14     80 E4 05 F1 | 	add	objptr, ##38016
11f18     F2 12 02 FB | 	rdlong	arg01, objptr
11f1c     09 FB 01 F6 | 	mov	result1, arg01
11f20     01 FA 65 F0 | 	shl	result1, #1
11f24     09 FB 01 F1 | 	add	result1, arg01
11f28     02 FA 65 F0 | 	shl	result1, #2
11f2c     03 00 00 FF 
11f30     04 E4 85 F1 | 	sub	objptr, ##1540
11f34     F2 FA 01 F1 | 	add	result1, objptr
11f38     FD FA 01 FB | 	rdlong	result1, result1
11f3c     04 FA 65 F0 | 	shl	result1, #4
11f40     32 00 00 FF 
11f44     84 E4 85 F1 | 	sub	objptr, ##25732
11f48     F2 FA 01 F1 | 	add	result1, objptr
11f4c     04 FA 05 F1 | 	add	result1, #4
11f50     14 00 00 FF 
11f54     F8 E5 85 F1 | 	sub	objptr, ##10744
11f58     A7 FA 61 FC | 	wrlong	result1, fp
11f5c     08 4E 05 F1 | 	add	fp, #8
11f60     A7 3A 68 FC | 	wrlong	#29, fp
11f64     08 4E 85 F1 | 	sub	fp, #8
11f68     A7 12 02 F6 | 	mov	arg01, fp
11f6c     CC 9A BF FD | 	call	#_push
11f70                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
11f70                 | '   t1.result_type=result_uint
11f70                 | '   push t1 : return
11f70     D8 02 90 FD | 	jmp	#LR__1460
11f74                 | LR__1450
11f74                 | LR__1451
11f74     4A 00 00 FF 
11f78     80 E4 05 F1 | 	add	objptr, ##38016
11f7c     F2 FE 01 FB | 	rdlong	result3, objptr
11f80     FF 12 02 F6 | 	mov	arg01, result3
11f84     01 12 66 F0 | 	shl	arg01, #1
11f88     FF 12 02 F1 | 	add	arg01, result3
11f8c     02 12 66 F0 | 	shl	arg01, #2
11f90     03 00 00 FF 
11f94     04 E4 85 F1 | 	sub	objptr, ##1540
11f98     F2 12 02 F1 | 	add	arg01, objptr
11f9c     09 13 02 FB | 	rdlong	arg01, arg01
11fa0     04 12 66 F0 | 	shl	arg01, #4
11fa4     32 00 00 FF 
11fa8     84 E4 85 F1 | 	sub	objptr, ##25732
11fac     F2 12 02 F1 | 	add	arg01, objptr
11fb0     04 12 06 F1 | 	add	arg01, #4
11fb4     09 13 02 FB | 	rdlong	arg01, arg01
11fb8     0C 4E 05 F1 | 	add	fp, #12
11fbc     A7 12 62 FC | 	wrlong	arg01, fp
11fc0     0C 4E 85 F1 | 	sub	fp, #12
11fc4     14 00 00 FF 
11fc8     F8 E5 85 F1 | 	sub	objptr, ##10744
11fcc     88 B6 B0 FD | 	call	#_pslpeek
11fd0     FD FA 31 F9 | 	getword	result1, result1, #0
11fd4     10 4E 05 F1 | 	add	fp, #16
11fd8     A7 FA 61 FC | 	wrlong	result1, fp
11fdc     4A 00 00 FF 
11fe0     80 E4 05 F1 | 	add	objptr, ##38016
11fe4     F2 FE 01 FB | 	rdlong	result3, objptr
11fe8     FF 12 02 F6 | 	mov	arg01, result3
11fec     01 12 66 F0 | 	shl	arg01, #1
11ff0     FF 12 02 F1 | 	add	arg01, result3
11ff4     02 12 66 F0 | 	shl	arg01, #2
11ff8     03 00 00 FF 
11ffc     04 E4 85 F1 | 	sub	objptr, ##1540
12000     F2 12 02 F1 | 	add	arg01, objptr
12004     04 12 06 F1 | 	add	arg01, #4
12008     09 13 02 FB | 	rdlong	arg01, arg01
1200c     04 4E 05 F1 | 	add	fp, #4
12010     A7 12 62 FC | 	wrlong	arg01, fp
12014     08 4E 85 F1 | 	sub	fp, #8
12018     A7 12 02 FB | 	rdlong	arg01, fp
1201c     0C 4E 85 F1 | 	sub	fp, #12
12020     02 12 06 F1 | 	add	arg01, #2
12024     47 00 00 FF 
12028     7C E4 85 F1 | 	sub	objptr, ##36476
1202c     D0 B5 B0 FD | 	call	#_pspeek
12030     FD FA E1 F8 | 	getbyte	result1, result1, #0
12034     18 4E 05 F1 | 	add	fp, #24
12038     A7 FA 61 FC | 	wrlong	result1, fp
1203c     0C 4E 85 F1 | 	sub	fp, #12
12040     A7 12 02 FB | 	rdlong	arg01, fp
12044     0C 4E 85 F1 | 	sub	fp, #12
12048     04 12 06 F1 | 	add	arg01, #4
1204c     08 B6 B0 FD | 	call	#_pslpeek
12050     1C 4E 05 F1 | 	add	fp, #28
12054     A7 FA 61 FC | 	wrlong	result1, fp
12058     10 4E 85 F1 | 	sub	fp, #16
1205c     A7 12 02 FB | 	rdlong	arg01, fp
12060     0C 4E 85 F1 | 	sub	fp, #12
12064     08 12 06 F1 | 	add	arg01, #8
12068     EC B5 B0 FD | 	call	#_pslpeek
1206c     20 4E 05 F1 | 	add	fp, #32
12070     A7 FA 61 FC | 	wrlong	result1, fp
12074     14 4E 85 F1 | 	sub	fp, #20
12078     A7 12 02 FB | 	rdlong	arg01, fp
1207c     0C 4E 85 F1 | 	sub	fp, #12
12080     0C 12 06 F1 | 	add	arg01, #12
12084     D0 B5 B0 FD | 	call	#_pslpeek
12088     24 4E 05 F1 | 	add	fp, #36
1208c     A7 FA 61 FC | 	wrlong	result1, fp
12090                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
12090                 | ' esize=pspeek(arrptr+2)
12090                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
12090                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
12090                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
12090                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
12090     10 4E 85 F1 | 	sub	fp, #16
12094     A7 12 02 FB | 	rdlong	arg01, fp
12098     14 4E 85 F1 | 	sub	fp, #20
1209c     03 12 16 F2 | 	cmp	arg01, #3 wc
120a0     34 00 90 CD |  if_b	jmp	#LR__1452
120a4     FC 98 BF FD | 	call	#_pop
120a8     A7 FA 61 FC | 	wrlong	result1, fp
120ac     04 4E 05 F1 | 	add	fp, #4
120b0     A7 FC 61 FC | 	wrlong	result2, fp
120b4     04 4E 05 F1 | 	add	fp, #4
120b8     A7 FE 61 FC | 	wrlong	result3, fp
120bc     08 4E 85 F1 | 	sub	fp, #8
120c0     A7 12 02 F6 | 	mov	arg01, fp
120c4     A0 39 B0 FD | 	call	#_converttoint
120c8     30 4E 05 F1 | 	add	fp, #48
120cc     A7 FA 61 FC | 	wrlong	result1, fp
120d0     30 4E 85 F1 | 	sub	fp, #48
120d4     0C 00 90 FD | 	jmp	#LR__1453
120d8                 | LR__1452
120d8     30 4E 05 F1 | 	add	fp, #48
120dc     A7 00 68 FC | 	wrlong	#0, fp
120e0     30 4E 85 F1 | 	sub	fp, #48
120e4                 | LR__1453
120e4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
120e4     14 4E 05 F1 | 	add	fp, #20
120e8     A7 12 02 FB | 	rdlong	arg01, fp
120ec     14 4E 85 F1 | 	sub	fp, #20
120f0     02 12 16 F2 | 	cmp	arg01, #2 wc
120f4     34 00 90 CD |  if_b	jmp	#LR__1454
120f8     A8 98 BF FD | 	call	#_pop
120fc     A7 FA 61 FC | 	wrlong	result1, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 FC 61 FC | 	wrlong	result2, fp
12108     04 4E 05 F1 | 	add	fp, #4
1210c     A7 FE 61 FC | 	wrlong	result3, fp
12110     08 4E 85 F1 | 	sub	fp, #8
12114     A7 12 02 F6 | 	mov	arg01, fp
12118     4C 39 B0 FD | 	call	#_converttoint
1211c     2C 4E 05 F1 | 	add	fp, #44
12120     A7 FA 61 FC | 	wrlong	result1, fp
12124     2C 4E 85 F1 | 	sub	fp, #44
12128     0C 00 90 FD | 	jmp	#LR__1455
1212c                 | LR__1454
1212c     2C 4E 05 F1 | 	add	fp, #44
12130     A7 00 68 FC | 	wrlong	#0, fp
12134     2C 4E 85 F1 | 	sub	fp, #44
12138                 | LR__1455
12138                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
12138     14 4E 05 F1 | 	add	fp, #20
1213c     A7 12 02 FB | 	rdlong	arg01, fp
12140     14 4E 85 F1 | 	sub	fp, #20
12144     01 12 16 F2 | 	cmp	arg01, #1 wc
12148     34 00 90 CD |  if_b	jmp	#LR__1456
1214c     54 98 BF FD | 	call	#_pop
12150     A7 FA 61 FC | 	wrlong	result1, fp
12154     04 4E 05 F1 | 	add	fp, #4
12158     A7 FC 61 FC | 	wrlong	result2, fp
1215c     04 4E 05 F1 | 	add	fp, #4
12160     A7 FE 61 FC | 	wrlong	result3, fp
12164     08 4E 85 F1 | 	sub	fp, #8
12168     A7 12 02 F6 | 	mov	arg01, fp
1216c     F8 38 B0 FD | 	call	#_converttoint
12170     28 4E 05 F1 | 	add	fp, #40
12174     A7 FA 61 FC | 	wrlong	result1, fp
12178     28 4E 85 F1 | 	sub	fp, #40
1217c     0C 00 90 FD | 	jmp	#LR__1457
12180                 | LR__1456
12180     28 4E 05 F1 | 	add	fp, #40
12184     A7 00 68 FC | 	wrlong	#0, fp
12188     28 4E 85 F1 | 	sub	fp, #40
1218c                 | LR__1457
1218c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1218c                 | ' if numpar>0 then
1218c     14 4E 05 F1 | 	add	fp, #20
12190     A7 FE 01 FB | 	rdlong	result3, fp
12194     14 4E 85 F1 | 	sub	fp, #20
12198     01 FE 15 F2 | 	cmp	result3, #1 wc
1219c     8C 00 90 CD |  if_b	jmp	#LR__1458
121a0     0C 4E 05 F1 | 	add	fp, #12
121a4     A7 FC 01 FB | 	rdlong	result2, fp
121a8     1C 4E 05 F1 | 	add	fp, #28
121ac     A7 FE 01 FB | 	rdlong	result3, fp
121b0     04 4E 05 F1 | 	add	fp, #4
121b4     A7 12 02 FB | 	rdlong	arg01, fp
121b8     10 4E 85 F1 | 	sub	fp, #16
121bc     A7 FA 01 FB | 	rdlong	result1, fp
121c0     FD 12 02 FD | 	qmul	arg01, result1
121c4     10 FC 05 F1 | 	add	result2, #16
121c8     14 4E 05 F1 | 	add	fp, #20
121cc     A7 1E 02 FB | 	rdlong	local01, fp
121d0     18 12 62 FD | 	getqx	arg01
121d4     FD 1E 02 FD | 	qmul	local01, result1
121d8     09 FF 01 F1 | 	add	result3, arg01
121dc     10 4E 85 F1 | 	sub	fp, #16
121e0     A7 1E 02 FB | 	rdlong	local01, fp
121e4     18 FA 61 FD | 	getqx	result1
121e8     0F FB 01 FD | 	qmul	result1, local01
121ec     08 4E 85 F1 | 	sub	fp, #8
121f0     A7 1E 02 FB | 	rdlong	local01, fp
121f4     18 FA 61 FD | 	getqx	result1
121f8     FD FE 01 F1 | 	add	result3, result1
121fc     0F FF 01 FD | 	qmul	result3, local01
12200     1C 4E 05 F1 | 	add	fp, #28
12204     18 1E 62 FD | 	getqx	local01
12208     0F FD 01 F1 | 	add	result2, local01
1220c     A7 FC 61 FC | 	wrlong	result2, fp
12210     2C 4E 85 F1 | 	sub	fp, #44
12214     A7 3A 68 FC | 	wrlong	#29, fp
12218     2C 4E 05 F1 | 	add	fp, #44
1221c     A7 1E 02 FB | 	rdlong	local01, fp
12220     34 4E 85 F1 | 	sub	fp, #52
12224     A7 1E 62 FC | 	wrlong	local01, fp
12228     18 00 90 FD | 	jmp	#LR__1459
1222c                 | LR__1458
1222c     08 4E 05 F1 | 	add	fp, #8
12230     A7 3A 68 FC | 	wrlong	#29, fp
12234     04 4E 05 F1 | 	add	fp, #4
12238     A7 1E 02 FB | 	rdlong	local01, fp
1223c     0C 4E 85 F1 | 	sub	fp, #12
12240     A7 1E 62 FC | 	wrlong	local01, fp
12244                 | LR__1459
12244     A7 12 02 F6 | 	mov	arg01, fp
12248     F0 97 BF FD | 	call	#_push
1224c                 | LR__1460
1224c     A7 F0 03 F6 | 	mov	ptra, fp
12250     B2 00 A0 FD | 	call	#popregs_
12254                 | _do_getaddr_ret
12254     2D 00 64 FD | 	ret
12258                 | 
12258                 | ' 
12258                 | ' 
12258                 | ' sub do_inkey
12258                 | _do_inkey
12258     02 4A 05 F6 | 	mov	COUNT_, #2
1225c     A8 00 A0 FD | 	call	#pushregs_
12260     0C F0 07 F1 | 	add	ptra, #12
12264     AC DC B0 FD | 	call	#_usbnew_spin2_get_key
12268     45 00 00 FF 
1226c     74 E4 05 F1 | 	add	objptr, ##35444
12270     F2 FA 61 FC | 	wrlong	result1, objptr
12274                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12274     45 00 00 FF 
12278     74 E4 85 F1 | 	sub	objptr, ##35444
1227c     00 FA 0D F2 | 	cmp	result1, #0 wz
12280     94 00 90 AD |  if_e	jmp	#LR__1471
12284     45 00 00 FF 
12288     74 E4 05 F1 | 	add	objptr, ##35444
1228c     F2 1C 02 FB | 	rdlong	arg06, objptr
12290     45 00 00 FF 
12294     74 E4 85 F1 | 	sub	objptr, ##35444
12298     00 00 40 FF 
1229c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
122a0     45 00 00 CF 
122a4     74 E4 05 C1 |  if_b	add	objptr, ##35444
122a8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
122ac     45 00 00 CF 
122b0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
122b4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
122b8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
122bc     58 00 90 3D |  if_ae	jmp	#LR__1471
122c0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
122c0     50 00 00 FF 
122c4     10 E5 05 F1 | 	add	objptr, ##41232
122c8     F2 1C 02 FB | 	rdlong	arg06, objptr
122cc     50 00 00 FF 
122d0     10 E5 85 F1 | 	sub	objptr, ##41232
122d4     01 1C 0E F2 | 	cmp	arg06, #1 wz
122d8     3C 00 90 5D |  if_ne	jmp	#LR__1470
122dc     51 00 00 FF 
122e0     B4 E5 05 F1 | 	add	objptr, ##41908
122e4     F2 14 02 FB | 	rdlong	arg02, objptr
122e8     04 E4 85 F1 | 	sub	objptr, #4
122ec     F2 1A 02 FB | 	rdlong	arg05, objptr
122f0     07 12 06 F6 | 	mov	arg01, #7
122f4     56 00 00 FF 
122f8     44 16 06 F6 | 	mov	arg03, ##44100
122fc     0C 18 C6 F9 | 	decod	arg04, #12
12300     01 1C 66 F6 | 	neg	arg06, #1
12304     46 00 00 FF 
12308     E4 E4 85 F1 | 	sub	objptr, ##36068
1230c     A8 DF B0 FD | 	call	#_audio096_spin2_play
12310     0B 00 00 FF 
12314     CC E4 85 F1 | 	sub	objptr, ##5836
12318                 | LR__1470
12318                 | LR__1471
12318                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12318     45 00 00 FF 
1231c     74 E4 05 F1 | 	add	objptr, ##35444
12320     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12324     45 00 00 FF 
12328     74 E4 85 F1 | 	sub	objptr, ##35444
1232c     D4 01 90 AD |  if_e	jmp	#LR__1480
12330     45 00 00 FF 
12334     74 E4 05 F1 | 	add	objptr, ##35444
12338     F2 1C 02 FB | 	rdlong	arg06, objptr
1233c     45 00 00 FF 
12340     74 E4 85 F1 | 	sub	objptr, ##35444
12344     00 00 40 FF 
12348     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1234c     45 00 00 CF 
12350     74 E4 05 C1 |  if_b	add	objptr, ##35444
12354     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12358     45 00 00 CF 
1235c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12360     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12364     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12368     98 01 90 3D |  if_ae	jmp	#LR__1480
1236c                 | '   if leds and 2 = 2 then 
1236c     51 00 00 FF 
12370     DC E5 05 F1 | 	add	objptr, ##41948
12374     F2 1E 0A FB | 	rdlong	local01, objptr wz
12378     51 00 00 FF 
1237c     DC E5 85 F1 | 	sub	objptr, ##41948
12380     58 01 90 AD |  if_e	jmp	#LR__1479
12384                 | '     if key>96 andalso key<123 then
12384     45 00 00 FF 
12388     74 E4 05 F1 | 	add	objptr, ##35444
1238c     F2 1E 02 FB | 	rdlong	local01, objptr
12390     45 00 00 FF 
12394     74 E4 85 F1 | 	sub	objptr, ##35444
12398     61 1E 16 F2 | 	cmp	local01, #97 wc
1239c     3C 00 90 CD |  if_b	jmp	#LR__1472
123a0     45 00 00 FF 
123a4     74 E4 05 F1 | 	add	objptr, ##35444
123a8     F2 1E 02 FB | 	rdlong	local01, objptr
123ac     45 00 00 FF 
123b0     74 E4 85 F1 | 	sub	objptr, ##35444
123b4     7B 1E 16 F2 | 	cmp	local01, #123 wc
123b8     20 00 90 3D |  if_ae	jmp	#LR__1472
123bc     45 00 00 FF 
123c0     74 E4 05 F1 | 	add	objptr, ##35444
123c4     F2 1E 02 FB | 	rdlong	local01, objptr
123c8     20 1E 86 F1 | 	sub	local01, #32
123cc     F2 1E 62 FC | 	wrlong	local01, objptr
123d0     45 00 00 FF 
123d4     74 E4 85 F1 | 	sub	objptr, ##35444
123d8     00 01 90 FD | 	jmp	#LR__1478
123dc                 | LR__1472
123dc     45 00 00 FF 
123e0     74 E4 05 F1 | 	add	objptr, ##35444
123e4     F2 1E 02 FB | 	rdlong	local01, objptr
123e8     45 00 00 FF 
123ec     74 E4 85 F1 | 	sub	objptr, ##35444
123f0     41 1E 16 F2 | 	cmp	local01, #65 wc
123f4     3C 00 90 CD |  if_b	jmp	#LR__1473
123f8     45 00 00 FF 
123fc     74 E4 05 F1 | 	add	objptr, ##35444
12400     F2 1E 02 FB | 	rdlong	local01, objptr
12404     45 00 00 FF 
12408     74 E4 85 F1 | 	sub	objptr, ##35444
1240c     5B 1E 16 F2 | 	cmp	local01, #91 wc
12410     20 00 90 3D |  if_ae	jmp	#LR__1473
12414     45 00 00 FF 
12418     74 E4 05 F1 | 	add	objptr, ##35444
1241c     F2 1E 02 FB | 	rdlong	local01, objptr
12420     20 1E 06 F1 | 	add	local01, #32
12424     F2 1E 62 FC | 	wrlong	local01, objptr
12428     45 00 00 FF 
1242c     74 E4 85 F1 | 	sub	objptr, ##35444
12430     A8 00 90 FD | 	jmp	#LR__1477
12434                 | LR__1473
12434     45 00 00 FF 
12438     74 E4 05 F1 | 	add	objptr, ##35444
1243c     F2 1E 02 FB | 	rdlong	local01, objptr
12440     45 00 00 FF 
12444     74 E4 85 F1 | 	sub	objptr, ##35444
12448     17 1E 16 F2 | 	cmp	local01, #23 wc
1244c     3C 00 90 CD |  if_b	jmp	#LR__1474
12450     45 00 00 FF 
12454     74 E4 05 F1 | 	add	objptr, ##35444
12458     F2 1E 02 FB | 	rdlong	local01, objptr
1245c     45 00 00 FF 
12460     74 E4 85 F1 | 	sub	objptr, ##35444
12464     20 1E 16 F2 | 	cmp	local01, #32 wc
12468     20 00 90 3D |  if_ae	jmp	#LR__1474
1246c     45 00 00 FF 
12470     74 E4 05 F1 | 	add	objptr, ##35444
12474     F2 1E 02 FB | 	rdlong	local01, objptr
12478     09 1E 86 F1 | 	sub	local01, #9
1247c     F2 1E 62 FC | 	wrlong	local01, objptr
12480     45 00 00 FF 
12484     74 E4 85 F1 | 	sub	objptr, ##35444
12488     50 00 90 FD | 	jmp	#LR__1476
1248c                 | LR__1474
1248c     45 00 00 FF 
12490     74 E4 05 F1 | 	add	objptr, ##35444
12494     F2 20 02 FB | 	rdlong	local02, objptr
12498     45 00 00 FF 
1249c     74 E4 85 F1 | 	sub	objptr, ##35444
124a0     0E 20 16 F2 | 	cmp	local02, #14 wc
124a4     34 00 90 CD |  if_b	jmp	#LR__1475
124a8     45 00 00 FF 
124ac     74 E4 05 F1 | 	add	objptr, ##35444
124b0     F2 1E 02 FB | 	rdlong	local01, objptr
124b4     45 00 00 FF 
124b8     74 E4 85 F1 | 	sub	objptr, ##35444
124bc     17 1E 16 F2 | 	cmp	local01, #23 wc
124c0     51 00 00 CF 
124c4     E0 E5 05 C1 |  if_b	add	objptr, ##41952
124c8     F2 20 02 CB |  if_b	rdlong	local02, objptr
124cc     27 20 06 C1 |  if_b	add	local02, #39
124d0     F2 20 62 CC |  if_b	wrlong	local02, objptr
124d4     51 00 00 CF 
124d8     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
124dc                 | LR__1475
124dc                 | LR__1476
124dc                 | LR__1477
124dc                 | LR__1478
124dc                 | LR__1479
124dc     45 00 00 FF 
124e0     74 E4 05 F1 | 	add	objptr, ##35444
124e4     F2 12 02 FB | 	rdlong	arg01, objptr
124e8     45 00 00 FF 
124ec     74 E4 85 F1 | 	sub	objptr, ##35444
124f0     14 B2 B0 FD | 	call	#_scantochar
124f4     FD 12 02 F6 | 	mov	arg01, result1
124f8     6C 04 B1 FD | 	call	#__system__Chr_S
124fc     A7 FA 61 FC | 	wrlong	result1, fp
12500     0C 00 90 FD | 	jmp	#LR__1481
12504                 | LR__1480
12504     83 01 00 FF 
12508     F3 20 06 F6 | 	mov	local02, ##@LR__5454
1250c     A7 20 62 FC | 	wrlong	local02, fp
12510                 | LR__1481
12510     08 4E 05 F1 | 	add	fp, #8
12514     A7 3E 68 FC | 	wrlong	#31, fp
12518     08 4E 85 F1 | 	sub	fp, #8
1251c     A7 12 02 F6 | 	mov	arg01, fp
12520     18 95 BF FD | 	call	#_push
12524     A7 F0 03 F6 | 	mov	ptra, fp
12528     B2 00 A0 FD | 	call	#popregs_
1252c                 | _do_inkey_ret
1252c     2D 00 64 FD | 	ret
12530                 | 
12530                 | '  
12530                 | ' '------------------------ Operators 
12530                 | ' 
12530                 | ' sub do_plus 
12530                 | _do_plus
12530     05 4A 05 F6 | 	mov	COUNT_, #5
12534     A8 00 A0 FD | 	call	#pushregs_
12538     18 F0 07 F1 | 	add	ptra, #24
1253c     64 94 BF FD | 	call	#_pop
12540     FD 1E 02 F6 | 	mov	local01, result1
12544     FE 20 02 F6 | 	mov	local02, result2
12548     FF 22 02 F6 | 	mov	local03, result3
1254c     0C 4E 05 F1 | 	add	fp, #12
12550     A7 1E 62 FC | 	wrlong	local01, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 20 62 FC | 	wrlong	local02, fp
1255c     04 4E 05 F1 | 	add	fp, #4
12560     A7 22 62 FC | 	wrlong	local03, fp
12564     14 4E 85 F1 | 	sub	fp, #20
12568     38 94 BF FD | 	call	#_pop
1256c     FF 22 02 F6 | 	mov	local03, result3
12570     A7 FA 61 FC | 	wrlong	result1, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 22 62 FC | 	wrlong	local03, fp
12584                 | ' 
12584                 | ' t2=pop()
12584                 | ' t1=pop()
12584                 | ' 
12584                 | ' 
12584                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
12584     08 4E 85 F1 | 	sub	fp, #8
12588     1D 22 0E F2 | 	cmp	local03, #29 wz
1258c     14 4E 05 A1 |  if_e	add	fp, #20
12590     A7 24 02 AB |  if_e	rdlong	local04, fp
12594     14 4E 85 A1 |  if_e	sub	fp, #20
12598     12 23 02 A6 |  if_e	mov	local03, local04
1259c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
125a0     1C 00 90 5D |  if_ne	jmp	#LR__1490
125a4     A7 1E 02 FB | 	rdlong	local01, fp
125a8     0C 4E 05 F1 | 	add	fp, #12
125ac     A7 20 02 FB | 	rdlong	local02, fp
125b0     0C 4E 85 F1 | 	sub	fp, #12
125b4     10 1F 02 F1 | 	add	local01, local02
125b8     A7 1E 62 FC | 	wrlong	local01, fp
125bc     48 04 90 FD | 	jmp	#LR__1505
125c0                 | LR__1490
125c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
125c0     08 4E 05 F1 | 	add	fp, #8
125c4     A7 1E 02 FB | 	rdlong	local01, fp
125c8     08 4E 85 F1 | 	sub	fp, #8
125cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
125d0     14 4E 05 A1 |  if_e	add	fp, #20
125d4     A7 24 02 AB |  if_e	rdlong	local04, fp
125d8     14 4E 85 A1 |  if_e	sub	fp, #20
125dc     12 23 02 A6 |  if_e	mov	local03, local04
125e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
125e4     28 00 90 5D |  if_ne	jmp	#LR__1491
125e8     A7 1E 02 FB | 	rdlong	local01, fp
125ec     0C 4E 05 F1 | 	add	fp, #12
125f0     A7 20 02 FB | 	rdlong	local02, fp
125f4     0C 4E 85 F1 | 	sub	fp, #12
125f8     10 1F 02 F1 | 	add	local01, local02
125fc     A7 1E 62 FC | 	wrlong	local01, fp
12600     08 4E 05 F1 | 	add	fp, #8
12604     A7 38 68 FC | 	wrlong	#28, fp
12608     08 4E 85 F1 | 	sub	fp, #8
1260c     F8 03 90 FD | 	jmp	#LR__1505
12610                 | LR__1491
12610                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12610     08 4E 05 F1 | 	add	fp, #8
12614     A7 1E 02 FB | 	rdlong	local01, fp
12618     08 4E 85 F1 | 	sub	fp, #8
1261c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12620     14 4E 05 A1 |  if_e	add	fp, #20
12624     A7 24 02 AB |  if_e	rdlong	local04, fp
12628     14 4E 85 A1 |  if_e	sub	fp, #20
1262c     12 23 02 A6 |  if_e	mov	local03, local04
12630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12634     30 00 90 5D |  if_ne	jmp	#LR__1492
12638     A7 12 02 FB | 	rdlong	arg01, fp
1263c     98 08 B1 FD | 	call	#__system___float_fromuns
12640     FD 12 02 F6 | 	mov	arg01, result1
12644     0C 4E 05 F1 | 	add	fp, #12
12648     A7 14 02 FB | 	rdlong	arg02, fp
1264c     0C 4E 85 F1 | 	sub	fp, #12
12650     B8 08 B1 FD | 	call	#__system___float_add
12654     A7 FA 61 FC | 	wrlong	result1, fp
12658     08 4E 05 F1 | 	add	fp, #8
1265c     A7 3C 68 FC | 	wrlong	#30, fp
12660     08 4E 85 F1 | 	sub	fp, #8
12664     A0 03 90 FD | 	jmp	#LR__1505
12668                 | LR__1492
12668                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
12668     08 4E 05 F1 | 	add	fp, #8
1266c     A7 1E 02 FB | 	rdlong	local01, fp
12670     08 4E 85 F1 | 	sub	fp, #8
12674     1C 1E 0E F2 | 	cmp	local01, #28 wz
12678     14 4E 05 A1 |  if_e	add	fp, #20
1267c     A7 24 02 AB |  if_e	rdlong	local04, fp
12680     14 4E 85 A1 |  if_e	sub	fp, #20
12684     12 23 02 A6 |  if_e	mov	local03, local04
12688     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1268c     1C 00 90 5D |  if_ne	jmp	#LR__1493
12690     A7 1E 02 FB | 	rdlong	local01, fp
12694     0C 4E 05 F1 | 	add	fp, #12
12698     A7 20 02 FB | 	rdlong	local02, fp
1269c     0C 4E 85 F1 | 	sub	fp, #12
126a0     10 1F 02 F1 | 	add	local01, local02
126a4     A7 1E 62 FC | 	wrlong	local01, fp
126a8     5C 03 90 FD | 	jmp	#LR__1505
126ac                 | LR__1493
126ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
126ac     08 4E 05 F1 | 	add	fp, #8
126b0     A7 1E 02 FB | 	rdlong	local01, fp
126b4     08 4E 85 F1 | 	sub	fp, #8
126b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
126bc     14 4E 05 A1 |  if_e	add	fp, #20
126c0     A7 24 02 AB |  if_e	rdlong	local04, fp
126c4     14 4E 85 A1 |  if_e	sub	fp, #20
126c8     12 23 02 A6 |  if_e	mov	local03, local04
126cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
126d0     1C 00 90 5D |  if_ne	jmp	#LR__1494
126d4     A7 1E 02 FB | 	rdlong	local01, fp
126d8     0C 4E 05 F1 | 	add	fp, #12
126dc     A7 20 02 FB | 	rdlong	local02, fp
126e0     0C 4E 85 F1 | 	sub	fp, #12
126e4     10 1F 02 F1 | 	add	local01, local02
126e8     A7 1E 62 FC | 	wrlong	local01, fp
126ec     18 03 90 FD | 	jmp	#LR__1505
126f0                 | LR__1494
126f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
126f0     08 4E 05 F1 | 	add	fp, #8
126f4     A7 1E 02 FB | 	rdlong	local01, fp
126f8     08 4E 85 F1 | 	sub	fp, #8
126fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12700     14 4E 05 A1 |  if_e	add	fp, #20
12704     A7 24 02 AB |  if_e	rdlong	local04, fp
12708     14 4E 85 A1 |  if_e	sub	fp, #20
1270c     12 23 02 A6 |  if_e	mov	local03, local04
12710     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12714     40 00 90 5D |  if_ne	jmp	#LR__1495
12718     A7 12 02 FB | 	rdlong	arg01, fp
1271c     09 13 52 F6 | 	abs	arg01, arg01 wc
12720     1F 26 C6 C9 |  if_b	decod	local05, #31
12724     00 26 06 36 |  if_ae	mov	local05, #0
12728     AC 07 B1 FD | 	call	#__system___float_fromuns
1272c     13 FB 61 F5 | 	xor	result1, local05
12730     FD 12 02 F6 | 	mov	arg01, result1
12734     0C 4E 05 F1 | 	add	fp, #12
12738     A7 14 02 FB | 	rdlong	arg02, fp
1273c     0C 4E 85 F1 | 	sub	fp, #12
12740     C8 07 B1 FD | 	call	#__system___float_add
12744     A7 FA 61 FC | 	wrlong	result1, fp
12748     08 4E 05 F1 | 	add	fp, #8
1274c     A7 3C 68 FC | 	wrlong	#30, fp
12750     08 4E 85 F1 | 	sub	fp, #8
12754     B0 02 90 FD | 	jmp	#LR__1505
12758                 | LR__1495
12758                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
12758     08 4E 05 F1 | 	add	fp, #8
1275c     A7 1E 02 FB | 	rdlong	local01, fp
12760     08 4E 85 F1 | 	sub	fp, #8
12764     1E 1E 0E F2 | 	cmp	local01, #30 wz
12768     14 4E 05 A1 |  if_e	add	fp, #20
1276c     A7 24 02 AB |  if_e	rdlong	local04, fp
12770     14 4E 85 A1 |  if_e	sub	fp, #20
12774     12 23 02 A6 |  if_e	mov	local03, local04
12778     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1277c     28 00 90 5D |  if_ne	jmp	#LR__1496
12780     A7 1E 02 FB | 	rdlong	local01, fp
12784     0C 4E 05 F1 | 	add	fp, #12
12788     A7 12 02 FB | 	rdlong	arg01, fp
1278c     0C 4E 85 F1 | 	sub	fp, #12
12790     44 07 B1 FD | 	call	#__system___float_fromuns
12794     FD 14 02 F6 | 	mov	arg02, result1
12798     0F 13 02 F6 | 	mov	arg01, local01
1279c     6C 07 B1 FD | 	call	#__system___float_add
127a0     A7 FA 61 FC | 	wrlong	result1, fp
127a4     60 02 90 FD | 	jmp	#LR__1505
127a8                 | LR__1496
127a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
127a8     08 4E 05 F1 | 	add	fp, #8
127ac     A7 1E 02 FB | 	rdlong	local01, fp
127b0     08 4E 85 F1 | 	sub	fp, #8
127b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
127b8     14 4E 05 A1 |  if_e	add	fp, #20
127bc     A7 24 02 AB |  if_e	rdlong	local04, fp
127c0     14 4E 85 A1 |  if_e	sub	fp, #20
127c4     12 23 02 A6 |  if_e	mov	local03, local04
127c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127cc     38 00 90 5D |  if_ne	jmp	#LR__1497
127d0     A7 1E 02 FB | 	rdlong	local01, fp
127d4     0C 4E 05 F1 | 	add	fp, #12
127d8     A7 12 02 FB | 	rdlong	arg01, fp
127dc     0C 4E 85 F1 | 	sub	fp, #12
127e0     09 13 52 F6 | 	abs	arg01, arg01 wc
127e4     1F 26 C6 C9 |  if_b	decod	local05, #31
127e8     00 26 06 36 |  if_ae	mov	local05, #0
127ec     E8 06 B1 FD | 	call	#__system___float_fromuns
127f0     13 FB 61 F5 | 	xor	result1, local05
127f4     FD 14 02 F6 | 	mov	arg02, result1
127f8     0F 13 02 F6 | 	mov	arg01, local01
127fc     0C 07 B1 FD | 	call	#__system___float_add
12800     A7 FA 61 FC | 	wrlong	result1, fp
12804     00 02 90 FD | 	jmp	#LR__1505
12808                 | LR__1497
12808                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12808     08 4E 05 F1 | 	add	fp, #8
1280c     A7 1E 02 FB | 	rdlong	local01, fp
12810     08 4E 85 F1 | 	sub	fp, #8
12814     1E 1E 0E F2 | 	cmp	local01, #30 wz
12818     14 4E 05 A1 |  if_e	add	fp, #20
1281c     A7 24 02 AB |  if_e	rdlong	local04, fp
12820     14 4E 85 A1 |  if_e	sub	fp, #20
12824     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
12828     1C 00 90 5D |  if_ne	jmp	#LR__1498
1282c     A7 12 02 FB | 	rdlong	arg01, fp
12830     0C 4E 05 F1 | 	add	fp, #12
12834     A7 14 02 FB | 	rdlong	arg02, fp
12838     0C 4E 85 F1 | 	sub	fp, #12
1283c     CC 06 B1 FD | 	call	#__system___float_add
12840     A7 FA 61 FC | 	wrlong	result1, fp
12844     C0 01 90 FD | 	jmp	#LR__1505
12848                 | LR__1498
12848                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12848     08 4E 05 F1 | 	add	fp, #8
1284c     A7 1E 02 FB | 	rdlong	local01, fp
12850     08 4E 85 F1 | 	sub	fp, #8
12854     1F 1E 0E F2 | 	cmp	local01, #31 wz
12858     24 00 90 5D |  if_ne	jmp	#LR__1499
1285c     14 4E 05 F1 | 	add	fp, #20
12860     A7 22 02 FB | 	rdlong	local03, fp
12864     14 4E 85 F1 | 	sub	fp, #20
12868     1F 22 0E F2 | 	cmp	local03, #31 wz
1286c     A7 04 68 5C |  if_ne	wrlong	#2, fp
12870     08 4E 05 51 |  if_ne	add	fp, #8
12874     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12878     08 4E 85 51 |  if_ne	sub	fp, #8
1287c     88 01 90 5D |  if_ne	jmp	#LR__1505
12880                 | LR__1499
12880                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12880     14 4E 05 F1 | 	add	fp, #20
12884     A7 1E 02 FB | 	rdlong	local01, fp
12888     14 4E 85 F1 | 	sub	fp, #20
1288c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12890     24 00 90 5D |  if_ne	jmp	#LR__1500
12894     08 4E 05 F1 | 	add	fp, #8
12898     A7 22 02 FB | 	rdlong	local03, fp
1289c     08 4E 85 F1 | 	sub	fp, #8
128a0     1F 22 0E F2 | 	cmp	local03, #31 wz
128a4     A7 04 68 5C |  if_ne	wrlong	#2, fp
128a8     08 4E 05 51 |  if_ne	add	fp, #8
128ac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
128b0     08 4E 85 51 |  if_ne	sub	fp, #8
128b4     50 01 90 5D |  if_ne	jmp	#LR__1505
128b8                 | LR__1500
128b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
128b8     08 4E 05 F1 | 	add	fp, #8
128bc     A7 1E 02 FB | 	rdlong	local01, fp
128c0     08 4E 85 F1 | 	sub	fp, #8
128c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
128c8     14 4E 05 A1 |  if_e	add	fp, #20
128cc     A7 22 02 AB |  if_e	rdlong	local03, fp
128d0     14 4E 85 A1 |  if_e	sub	fp, #20
128d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
128d8     1C 00 90 5D |  if_ne	jmp	#LR__1501
128dc     A7 12 02 FB | 	rdlong	arg01, fp
128e0     0C 4E 05 F1 | 	add	fp, #12
128e4     A7 14 02 FB | 	rdlong	arg02, fp
128e8     0C 4E 85 F1 | 	sub	fp, #12
128ec     94 DE B0 FD | 	call	#__system___string_concat
128f0     A7 FA 61 FC | 	wrlong	result1, fp
128f4     10 01 90 FD | 	jmp	#LR__1505
128f8                 | LR__1501
128f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
128f8     08 4E 05 F1 | 	add	fp, #8
128fc     A7 1E 02 FB | 	rdlong	local01, fp
12900     08 4E 85 F1 | 	sub	fp, #8
12904     2B 1E 0E F2 | 	cmp	local01, #43 wz
12908     14 4E 05 A1 |  if_e	add	fp, #20
1290c     A7 22 02 AB |  if_e	rdlong	local03, fp
12910     14 4E 85 A1 |  if_e	sub	fp, #20
12914     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12918     30 00 90 5D |  if_ne	jmp	#LR__1502
1291c     A7 12 02 FB | 	rdlong	arg01, fp
12920     20 E9 BF FD | 	call	#_convertstring
12924     FD 12 02 F6 | 	mov	arg01, result1
12928     0C 4E 05 F1 | 	add	fp, #12
1292c     A7 14 02 FB | 	rdlong	arg02, fp
12930     0C 4E 85 F1 | 	sub	fp, #12
12934     4C DE B0 FD | 	call	#__system___string_concat
12938     A7 FA 61 FC | 	wrlong	result1, fp
1293c     08 4E 05 F1 | 	add	fp, #8
12940     A7 3E 68 FC | 	wrlong	#31, fp
12944     08 4E 85 F1 | 	sub	fp, #8
12948     BC 00 90 FD | 	jmp	#LR__1505
1294c                 | LR__1502
1294c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1294c     08 4E 05 F1 | 	add	fp, #8
12950     A7 1E 02 FB | 	rdlong	local01, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     1F 1E 0E F2 | 	cmp	local01, #31 wz
1295c     14 4E 05 A1 |  if_e	add	fp, #20
12960     A7 22 02 AB |  if_e	rdlong	local03, fp
12964     14 4E 85 A1 |  if_e	sub	fp, #20
12968     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1296c     28 00 90 5D |  if_ne	jmp	#LR__1503
12970     A7 1E 02 FB | 	rdlong	local01, fp
12974     0C 4E 05 F1 | 	add	fp, #12
12978     A7 12 02 FB | 	rdlong	arg01, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     C0 E8 BF FD | 	call	#_convertstring
12984     FD 14 02 F6 | 	mov	arg02, result1
12988     0F 13 02 F6 | 	mov	arg01, local01
1298c     F4 DD B0 FD | 	call	#__system___string_concat
12990     A7 FA 61 FC | 	wrlong	result1, fp
12994     70 00 90 FD | 	jmp	#LR__1505
12998                 | LR__1503
12998                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12998     08 4E 05 F1 | 	add	fp, #8
1299c     A7 1E 02 FB | 	rdlong	local01, fp
129a0     08 4E 85 F1 | 	sub	fp, #8
129a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
129a8     14 4E 05 A1 |  if_e	add	fp, #20
129ac     A7 22 02 AB |  if_e	rdlong	local03, fp
129b0     14 4E 85 A1 |  if_e	sub	fp, #20
129b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
129b8     3C 00 90 5D |  if_ne	jmp	#LR__1504
129bc     A7 12 02 FB | 	rdlong	arg01, fp
129c0     80 E8 BF FD | 	call	#_convertstring
129c4     FD 1E 02 F6 | 	mov	local01, result1
129c8     0C 4E 05 F1 | 	add	fp, #12
129cc     A7 12 02 FB | 	rdlong	arg01, fp
129d0     0C 4E 85 F1 | 	sub	fp, #12
129d4     6C E8 BF FD | 	call	#_convertstring
129d8     FD 14 02 F6 | 	mov	arg02, result1
129dc     0F 13 02 F6 | 	mov	arg01, local01
129e0     A0 DD B0 FD | 	call	#__system___string_concat
129e4     A7 FA 61 FC | 	wrlong	result1, fp
129e8     08 4E 05 F1 | 	add	fp, #8
129ec     A7 3E 68 FC | 	wrlong	#31, fp
129f0     08 4E 85 F1 | 	sub	fp, #8
129f4     10 00 90 FD | 	jmp	#LR__1505
129f8                 | LR__1504
129f8     A7 08 68 FC | 	wrlong	#4, fp
129fc     08 4E 05 F1 | 	add	fp, #8
12a00     A7 FE 69 FC | 	wrlong	#255, fp
12a04     08 4E 85 F1 | 	sub	fp, #8
12a08                 | LR__1505
12a08     A7 12 02 F6 | 	mov	arg01, fp
12a0c     2C 90 BF FD | 	call	#_push
12a10     A7 F0 03 F6 | 	mov	ptra, fp
12a14     B2 00 A0 FD | 	call	#popregs_
12a18                 | _do_plus_ret
12a18     2D 00 64 FD | 	ret
12a1c                 | 
12a1c                 | ' 
12a1c                 | ' sub do_minus
12a1c                 | _do_minus
12a1c     05 4A 05 F6 | 	mov	COUNT_, #5
12a20     A8 00 A0 FD | 	call	#pushregs_
12a24     18 F0 07 F1 | 	add	ptra, #24
12a28     78 8F BF FD | 	call	#_pop
12a2c     FD 1E 02 F6 | 	mov	local01, result1
12a30     FE 20 02 F6 | 	mov	local02, result2
12a34     FF 22 02 F6 | 	mov	local03, result3
12a38     0C 4E 05 F1 | 	add	fp, #12
12a3c     A7 1E 62 FC | 	wrlong	local01, fp
12a40     04 4E 05 F1 | 	add	fp, #4
12a44     A7 20 62 FC | 	wrlong	local02, fp
12a48     04 4E 05 F1 | 	add	fp, #4
12a4c     A7 22 62 FC | 	wrlong	local03, fp
12a50     14 4E 85 F1 | 	sub	fp, #20
12a54     4C 8F BF FD | 	call	#_pop
12a58     FF 22 02 F6 | 	mov	local03, result3
12a5c     A7 FA 61 FC | 	wrlong	result1, fp
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 FC 61 FC | 	wrlong	result2, fp
12a68     04 4E 05 F1 | 	add	fp, #4
12a6c     A7 22 62 FC | 	wrlong	local03, fp
12a70                 | ' 
12a70                 | ' t2=pop()
12a70                 | ' t1=pop()
12a70                 | ' 
12a70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12a70     08 4E 85 F1 | 	sub	fp, #8
12a74     1D 22 0E F2 | 	cmp	local03, #29 wz
12a78     14 4E 05 A1 |  if_e	add	fp, #20
12a7c     A7 24 02 AB |  if_e	rdlong	local04, fp
12a80     14 4E 85 A1 |  if_e	sub	fp, #20
12a84     12 23 02 A6 |  if_e	mov	local03, local04
12a88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12a8c     5C 00 90 5D |  if_ne	jmp	#LR__1511
12a90                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12a90     0C 4E 05 F1 | 	add	fp, #12
12a94     A7 1E 02 FB | 	rdlong	local01, fp
12a98     0C 4E 85 F1 | 	sub	fp, #12
12a9c     A7 22 02 FB | 	rdlong	local03, fp
12aa0     11 1F 12 F2 | 	cmp	local01, local03 wc
12aa4     1C 00 90 3D |  if_ae	jmp	#LR__1510
12aa8     A7 1E 02 FB | 	rdlong	local01, fp
12aac     0C 4E 05 F1 | 	add	fp, #12
12ab0     A7 20 02 FB | 	rdlong	local02, fp
12ab4     0C 4E 85 F1 | 	sub	fp, #12
12ab8     10 1F 82 F1 | 	sub	local01, local02
12abc     A7 1E 62 FC | 	wrlong	local01, fp
12ac0     F4 02 90 FD | 	jmp	#LR__1520
12ac4                 | LR__1510
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     0C 4E 05 F1 | 	add	fp, #12
12acc     A7 20 02 FB | 	rdlong	local02, fp
12ad0     0C 4E 85 F1 | 	sub	fp, #12
12ad4     10 1F 82 F1 | 	sub	local01, local02
12ad8     A7 1E 62 FC | 	wrlong	local01, fp
12adc     08 4E 05 F1 | 	add	fp, #8
12ae0     A7 38 68 FC | 	wrlong	#28, fp
12ae4     08 4E 85 F1 | 	sub	fp, #8
12ae8     CC 02 90 FD | 	jmp	#LR__1520
12aec                 | LR__1511
12aec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12aec     08 4E 05 F1 | 	add	fp, #8
12af0     A7 1E 02 FB | 	rdlong	local01, fp
12af4     08 4E 85 F1 | 	sub	fp, #8
12af8     1D 1E 0E F2 | 	cmp	local01, #29 wz
12afc     14 4E 05 A1 |  if_e	add	fp, #20
12b00     A7 24 02 AB |  if_e	rdlong	local04, fp
12b04     14 4E 85 A1 |  if_e	sub	fp, #20
12b08     12 23 02 A6 |  if_e	mov	local03, local04
12b0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12b10     28 00 90 5D |  if_ne	jmp	#LR__1512
12b14     A7 1E 02 FB | 	rdlong	local01, fp
12b18     0C 4E 05 F1 | 	add	fp, #12
12b1c     A7 20 02 FB | 	rdlong	local02, fp
12b20     0C 4E 85 F1 | 	sub	fp, #12
12b24     10 1F 82 F1 | 	sub	local01, local02
12b28     A7 1E 62 FC | 	wrlong	local01, fp
12b2c     08 4E 05 F1 | 	add	fp, #8
12b30     A7 38 68 FC | 	wrlong	#28, fp
12b34     08 4E 85 F1 | 	sub	fp, #8
12b38     7C 02 90 FD | 	jmp	#LR__1520
12b3c                 | LR__1512
12b3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12b3c     08 4E 05 F1 | 	add	fp, #8
12b40     A7 1E 02 FB | 	rdlong	local01, fp
12b44     08 4E 85 F1 | 	sub	fp, #8
12b48     1D 1E 0E F2 | 	cmp	local01, #29 wz
12b4c     14 4E 05 A1 |  if_e	add	fp, #20
12b50     A7 24 02 AB |  if_e	rdlong	local04, fp
12b54     14 4E 85 A1 |  if_e	sub	fp, #20
12b58     12 23 02 A6 |  if_e	mov	local03, local04
12b5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12b60     34 00 90 5D |  if_ne	jmp	#LR__1513
12b64     A7 12 02 FB | 	rdlong	arg01, fp
12b68     6C 03 B1 FD | 	call	#__system___float_fromuns
12b6c     FD 12 02 F6 | 	mov	arg01, result1
12b70     0C 4E 05 F1 | 	add	fp, #12
12b74     A7 14 02 FB | 	rdlong	arg02, fp
12b78     0C 4E 85 F1 | 	sub	fp, #12
12b7c     1F 14 E6 F4 | 	bitnot	arg02, #31
12b80     88 03 B1 FD | 	call	#__system___float_add
12b84     A7 FA 61 FC | 	wrlong	result1, fp
12b88     08 4E 05 F1 | 	add	fp, #8
12b8c     A7 3C 68 FC | 	wrlong	#30, fp
12b90     08 4E 85 F1 | 	sub	fp, #8
12b94     20 02 90 FD | 	jmp	#LR__1520
12b98                 | LR__1513
12b98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12b98     08 4E 05 F1 | 	add	fp, #8
12b9c     A7 1E 02 FB | 	rdlong	local01, fp
12ba0     08 4E 85 F1 | 	sub	fp, #8
12ba4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ba8     14 4E 05 A1 |  if_e	add	fp, #20
12bac     A7 24 02 AB |  if_e	rdlong	local04, fp
12bb0     14 4E 85 A1 |  if_e	sub	fp, #20
12bb4     12 23 02 A6 |  if_e	mov	local03, local04
12bb8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12bbc     1C 00 90 5D |  if_ne	jmp	#LR__1514
12bc0     A7 1E 02 FB | 	rdlong	local01, fp
12bc4     0C 4E 05 F1 | 	add	fp, #12
12bc8     A7 20 02 FB | 	rdlong	local02, fp
12bcc     0C 4E 85 F1 | 	sub	fp, #12
12bd0     10 1F 82 F1 | 	sub	local01, local02
12bd4     A7 1E 62 FC | 	wrlong	local01, fp
12bd8     DC 01 90 FD | 	jmp	#LR__1520
12bdc                 | LR__1514
12bdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12bdc     08 4E 05 F1 | 	add	fp, #8
12be0     A7 1E 02 FB | 	rdlong	local01, fp
12be4     08 4E 85 F1 | 	sub	fp, #8
12be8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12bec     14 4E 05 A1 |  if_e	add	fp, #20
12bf0     A7 24 02 AB |  if_e	rdlong	local04, fp
12bf4     14 4E 85 A1 |  if_e	sub	fp, #20
12bf8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12bfc     1C 00 90 5D |  if_ne	jmp	#LR__1515
12c00     A7 1E 02 FB | 	rdlong	local01, fp
12c04     0C 4E 05 F1 | 	add	fp, #12
12c08     A7 20 02 FB | 	rdlong	local02, fp
12c0c     0C 4E 85 F1 | 	sub	fp, #12
12c10     10 1F 82 F1 | 	sub	local01, local02
12c14     A7 1E 62 FC | 	wrlong	local01, fp
12c18     9C 01 90 FD | 	jmp	#LR__1520
12c1c                 | LR__1515
12c1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12c1c     08 4E 05 F1 | 	add	fp, #8
12c20     A7 1E 02 FB | 	rdlong	local01, fp
12c24     08 4E 85 F1 | 	sub	fp, #8
12c28     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c2c     14 4E 05 A1 |  if_e	add	fp, #20
12c30     A7 22 02 AB |  if_e	rdlong	local03, fp
12c34     14 4E 85 A1 |  if_e	sub	fp, #20
12c38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c3c     44 00 90 5D |  if_ne	jmp	#LR__1516
12c40     A7 12 02 FB | 	rdlong	arg01, fp
12c44     09 13 52 F6 | 	abs	arg01, arg01 wc
12c48     1F 26 C6 C9 |  if_b	decod	local05, #31
12c4c     00 26 06 36 |  if_ae	mov	local05, #0
12c50     84 02 B1 FD | 	call	#__system___float_fromuns
12c54     13 FB 61 F5 | 	xor	result1, local05
12c58     FD 12 02 F6 | 	mov	arg01, result1
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 14 02 FB | 	rdlong	arg02, fp
12c64     0C 4E 85 F1 | 	sub	fp, #12
12c68     1F 14 E6 F4 | 	bitnot	arg02, #31
12c6c     9C 02 B1 FD | 	call	#__system___float_add
12c70     A7 FA 61 FC | 	wrlong	result1, fp
12c74     08 4E 05 F1 | 	add	fp, #8
12c78     A7 3C 68 FC | 	wrlong	#30, fp
12c7c     08 4E 85 F1 | 	sub	fp, #8
12c80     34 01 90 FD | 	jmp	#LR__1520
12c84                 | LR__1516
12c84                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12c84     08 4E 05 F1 | 	add	fp, #8
12c88     A7 1E 02 FB | 	rdlong	local01, fp
12c8c     08 4E 85 F1 | 	sub	fp, #8
12c90     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c94     14 4E 05 A1 |  if_e	add	fp, #20
12c98     A7 22 02 AB |  if_e	rdlong	local03, fp
12c9c     14 4E 85 A1 |  if_e	sub	fp, #20
12ca0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ca4     2C 00 90 5D |  if_ne	jmp	#LR__1517
12ca8     A7 1E 02 FB | 	rdlong	local01, fp
12cac     0C 4E 05 F1 | 	add	fp, #12
12cb0     A7 12 02 FB | 	rdlong	arg01, fp
12cb4     0C 4E 85 F1 | 	sub	fp, #12
12cb8     1C 02 B1 FD | 	call	#__system___float_fromuns
12cbc     FD 14 02 F6 | 	mov	arg02, result1
12cc0     0F 13 02 F6 | 	mov	arg01, local01
12cc4     1F 14 E6 F4 | 	bitnot	arg02, #31
12cc8     40 02 B1 FD | 	call	#__system___float_add
12ccc     A7 FA 61 FC | 	wrlong	result1, fp
12cd0     E4 00 90 FD | 	jmp	#LR__1520
12cd4                 | LR__1517
12cd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12cd4     08 4E 05 F1 | 	add	fp, #8
12cd8     A7 1E 02 FB | 	rdlong	local01, fp
12cdc     08 4E 85 F1 | 	sub	fp, #8
12ce0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12ce4     14 4E 05 A1 |  if_e	add	fp, #20
12ce8     A7 22 02 AB |  if_e	rdlong	local03, fp
12cec     14 4E 85 A1 |  if_e	sub	fp, #20
12cf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12cf4     3C 00 90 5D |  if_ne	jmp	#LR__1518
12cf8     A7 1E 02 FB | 	rdlong	local01, fp
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 12 02 FB | 	rdlong	arg01, fp
12d04     0C 4E 85 F1 | 	sub	fp, #12
12d08     09 13 52 F6 | 	abs	arg01, arg01 wc
12d0c     1F 26 C6 C9 |  if_b	decod	local05, #31
12d10     00 26 06 36 |  if_ae	mov	local05, #0
12d14     C0 01 B1 FD | 	call	#__system___float_fromuns
12d18     13 FB 61 F5 | 	xor	result1, local05
12d1c     FD 14 02 F6 | 	mov	arg02, result1
12d20     0F 13 02 F6 | 	mov	arg01, local01
12d24     1F 14 E6 F4 | 	bitnot	arg02, #31
12d28     E0 01 B1 FD | 	call	#__system___float_add
12d2c     A7 FA 61 FC | 	wrlong	result1, fp
12d30     84 00 90 FD | 	jmp	#LR__1520
12d34                 | LR__1518
12d34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12d34     08 4E 05 F1 | 	add	fp, #8
12d38     A7 1E 02 FB | 	rdlong	local01, fp
12d3c     08 4E 85 F1 | 	sub	fp, #8
12d40     1E 1E 0E F2 | 	cmp	local01, #30 wz
12d44     14 4E 05 A1 |  if_e	add	fp, #20
12d48     A7 22 02 AB |  if_e	rdlong	local03, fp
12d4c     14 4E 85 A1 |  if_e	sub	fp, #20
12d50     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d54     20 00 90 5D |  if_ne	jmp	#LR__1519
12d58     A7 12 02 FB | 	rdlong	arg01, fp
12d5c     0C 4E 05 F1 | 	add	fp, #12
12d60     A7 14 02 FB | 	rdlong	arg02, fp
12d64     0C 4E 85 F1 | 	sub	fp, #12
12d68     1F 14 E6 F4 | 	bitnot	arg02, #31
12d6c     9C 01 B1 FD | 	call	#__system___float_add
12d70     A7 FA 61 FC | 	wrlong	result1, fp
12d74     40 00 90 FD | 	jmp	#LR__1520
12d78                 | LR__1519
12d78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12d78     08 4E 05 F1 | 	add	fp, #8
12d7c     A7 1E 02 FB | 	rdlong	local01, fp
12d80     08 4E 85 F1 | 	sub	fp, #8
12d84     1F 1E 0E F2 | 	cmp	local01, #31 wz
12d88     14 4E 05 51 |  if_ne	add	fp, #20
12d8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
12d90     14 4E 85 51 |  if_ne	sub	fp, #20
12d94     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12d98     A7 06 68 AC |  if_e	wrlong	#3, fp
12d9c     08 4E 05 A1 |  if_e	add	fp, #8
12da0     A7 FE 69 AC |  if_e	wrlong	#255, fp
12da4     08 4E 85 A1 |  if_e	sub	fp, #8
12da8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12dac     08 4E 05 51 |  if_ne	add	fp, #8
12db0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12db4     08 4E 85 51 |  if_ne	sub	fp, #8
12db8                 | LR__1520
12db8     A7 12 02 F6 | 	mov	arg01, fp
12dbc     7C 8C BF FD | 	call	#_push
12dc0     A7 F0 03 F6 | 	mov	ptra, fp
12dc4     B2 00 A0 FD | 	call	#popregs_
12dc8                 | _do_minus_ret
12dc8     2D 00 64 FD | 	ret
12dcc                 | 
12dcc                 | ' 
12dcc                 | ' sub do_and 
12dcc                 | _do_and
12dcc     03 4A 05 F6 | 	mov	COUNT_, #3
12dd0     A8 00 A0 FD | 	call	#pushregs_
12dd4     18 F0 07 F1 | 	add	ptra, #24
12dd8     C8 8B BF FD | 	call	#_pop
12ddc     FD 12 02 F6 | 	mov	arg01, result1
12de0     FE 1E 02 F6 | 	mov	local01, result2
12de4     FF 20 02 F6 | 	mov	local02, result3
12de8     0C 4E 05 F1 | 	add	fp, #12
12dec     A7 12 62 FC | 	wrlong	arg01, fp
12df0     04 4E 05 F1 | 	add	fp, #4
12df4     A7 1E 62 FC | 	wrlong	local01, fp
12df8     04 4E 05 F1 | 	add	fp, #4
12dfc     A7 20 62 FC | 	wrlong	local02, fp
12e00     14 4E 85 F1 | 	sub	fp, #20
12e04     9C 8B BF FD | 	call	#_pop
12e08     FF 22 02 F6 | 	mov	local03, result3
12e0c     A7 FA 61 FC | 	wrlong	result1, fp
12e10     04 4E 05 F1 | 	add	fp, #4
12e14     A7 FC 61 FC | 	wrlong	result2, fp
12e18     04 4E 05 F1 | 	add	fp, #4
12e1c     A7 22 62 FC | 	wrlong	local03, fp
12e20                 | ' 
12e20                 | ' t2=pop()
12e20                 | ' t1=pop()
12e20                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24     1C 22 0E F2 | 	cmp	local03, #28 wz
12e28     A7 22 02 AB |  if_e	rdlong	local03, fp
12e2c     A7 22 62 AC |  if_e	wrlong	local03, fp
12e30     08 4E 05 A1 |  if_e	add	fp, #8
12e34     A7 3A 68 AC |  if_e	wrlong	#29, fp
12e38     08 4E 85 A1 |  if_e	sub	fp, #8
12e3c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12e3c     14 4E 05 F1 | 	add	fp, #20
12e40     A7 22 02 FB | 	rdlong	local03, fp
12e44     14 4E 85 F1 | 	sub	fp, #20
12e48     1C 22 0E F2 | 	cmp	local03, #28 wz
12e4c     18 00 90 5D |  if_ne	jmp	#LR__1530
12e50     0C 4E 05 F1 | 	add	fp, #12
12e54     A7 22 02 FB | 	rdlong	local03, fp
12e58     A7 22 62 FC | 	wrlong	local03, fp
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 3A 68 FC | 	wrlong	#29, fp
12e64     14 4E 85 F1 | 	sub	fp, #20
12e68                 | LR__1530
12e68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12e68     08 4E 05 F1 | 	add	fp, #8
12e6c     A7 22 02 FB | 	rdlong	local03, fp
12e70     08 4E 85 F1 | 	sub	fp, #8
12e74     1F 22 0E F2 | 	cmp	local03, #31 wz
12e78     14 4E 05 51 |  if_ne	add	fp, #20
12e7c     A7 20 02 5B |  if_ne	rdlong	local02, fp
12e80     14 4E 85 51 |  if_ne	sub	fp, #20
12e84     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
12e88     08 4E 05 51 |  if_ne	add	fp, #8
12e8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
12e90     08 4E 85 51 |  if_ne	sub	fp, #8
12e94     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
12e98     14 4E 05 51 |  if_ne	add	fp, #20
12e9c     14 4E 85 51 |  if_ne	sub	fp, #20
12ea0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
12ea4     A7 0C 68 AC |  if_e	wrlong	#6, fp
12ea8     08 4E 05 A1 |  if_e	add	fp, #8
12eac     A7 FE 69 AC |  if_e	wrlong	#255, fp
12eb0     08 4E 85 A1 |  if_e	sub	fp, #8
12eb4     18 00 90 AD |  if_e	jmp	#LR__1531
12eb8     A7 22 02 FB | 	rdlong	local03, fp
12ebc     0C 4E 05 F1 | 	add	fp, #12
12ec0     A7 1E 02 FB | 	rdlong	local01, fp
12ec4     0C 4E 85 F1 | 	sub	fp, #12
12ec8     0F 23 02 F5 | 	and	local03, local01
12ecc     A7 22 62 FC | 	wrlong	local03, fp
12ed0                 | LR__1531
12ed0     A7 12 02 F6 | 	mov	arg01, fp
12ed4     64 8B BF FD | 	call	#_push
12ed8     A7 F0 03 F6 | 	mov	ptra, fp
12edc     B2 00 A0 FD | 	call	#popregs_
12ee0                 | _do_and_ret
12ee0     2D 00 64 FD | 	ret
12ee4                 | 
12ee4                 | ' 
12ee4                 | ' sub do_or 
12ee4                 | _do_or
12ee4     03 4A 05 F6 | 	mov	COUNT_, #3
12ee8     A8 00 A0 FD | 	call	#pushregs_
12eec     18 F0 07 F1 | 	add	ptra, #24
12ef0     B0 8A BF FD | 	call	#_pop
12ef4     FD 12 02 F6 | 	mov	arg01, result1
12ef8     FE 1E 02 F6 | 	mov	local01, result2
12efc     FF 20 02 F6 | 	mov	local02, result3
12f00     0C 4E 05 F1 | 	add	fp, #12
12f04     A7 12 62 FC | 	wrlong	arg01, fp
12f08     04 4E 05 F1 | 	add	fp, #4
12f0c     A7 1E 62 FC | 	wrlong	local01, fp
12f10     04 4E 05 F1 | 	add	fp, #4
12f14     A7 20 62 FC | 	wrlong	local02, fp
12f18     14 4E 85 F1 | 	sub	fp, #20
12f1c     84 8A BF FD | 	call	#_pop
12f20     FF 22 02 F6 | 	mov	local03, result3
12f24     A7 FA 61 FC | 	wrlong	result1, fp
12f28     04 4E 05 F1 | 	add	fp, #4
12f2c     A7 FC 61 FC | 	wrlong	result2, fp
12f30     04 4E 05 F1 | 	add	fp, #4
12f34     A7 22 62 FC | 	wrlong	local03, fp
12f38                 | ' 
12f38                 | ' t2=pop()
12f38                 | ' t1=pop()
12f38                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12f38     08 4E 85 F1 | 	sub	fp, #8
12f3c     1C 22 0E F2 | 	cmp	local03, #28 wz
12f40     A7 22 02 AB |  if_e	rdlong	local03, fp
12f44     A7 22 62 AC |  if_e	wrlong	local03, fp
12f48     08 4E 05 A1 |  if_e	add	fp, #8
12f4c     A7 3A 68 AC |  if_e	wrlong	#29, fp
12f50     08 4E 85 A1 |  if_e	sub	fp, #8
12f54                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12f54     14 4E 05 F1 | 	add	fp, #20
12f58     A7 22 02 FB | 	rdlong	local03, fp
12f5c     14 4E 85 F1 | 	sub	fp, #20
12f60     1C 22 0E F2 | 	cmp	local03, #28 wz
12f64     18 00 90 5D |  if_ne	jmp	#LR__1540
12f68     0C 4E 05 F1 | 	add	fp, #12
12f6c     A7 22 02 FB | 	rdlong	local03, fp
12f70     A7 22 62 FC | 	wrlong	local03, fp
12f74     08 4E 05 F1 | 	add	fp, #8
12f78     A7 3A 68 FC | 	wrlong	#29, fp
12f7c     14 4E 85 F1 | 	sub	fp, #20
12f80                 | LR__1540
12f80                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
12f80     08 4E 05 F1 | 	add	fp, #8
12f84     A7 22 02 FB | 	rdlong	local03, fp
12f88     08 4E 85 F1 | 	sub	fp, #8
12f8c     1F 22 0E F2 | 	cmp	local03, #31 wz
12f90     14 4E 05 51 |  if_ne	add	fp, #20
12f94     A7 20 02 5B |  if_ne	rdlong	local02, fp
12f98     14 4E 85 51 |  if_ne	sub	fp, #20
12f9c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
12fa0     08 4E 05 51 |  if_ne	add	fp, #8
12fa4     A7 22 02 5B |  if_ne	rdlong	local03, fp
12fa8     08 4E 85 51 |  if_ne	sub	fp, #8
12fac     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
12fb0     14 4E 05 51 |  if_ne	add	fp, #20
12fb4     14 4E 85 51 |  if_ne	sub	fp, #20
12fb8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
12fbc     A7 0C 68 AC |  if_e	wrlong	#6, fp
12fc0     08 4E 05 A1 |  if_e	add	fp, #8
12fc4     A7 FE 69 AC |  if_e	wrlong	#255, fp
12fc8     08 4E 85 A1 |  if_e	sub	fp, #8
12fcc     18 00 90 AD |  if_e	jmp	#LR__1541
12fd0     A7 22 02 FB | 	rdlong	local03, fp
12fd4     0C 4E 05 F1 | 	add	fp, #12
12fd8     A7 1E 02 FB | 	rdlong	local01, fp
12fdc     0C 4E 85 F1 | 	sub	fp, #12
12fe0     0F 23 42 F5 | 	or	local03, local01
12fe4     A7 22 62 FC | 	wrlong	local03, fp
12fe8                 | LR__1541
12fe8     A7 12 02 F6 | 	mov	arg01, fp
12fec     4C 8A BF FD | 	call	#_push
12ff0     A7 F0 03 F6 | 	mov	ptra, fp
12ff4     B2 00 A0 FD | 	call	#popregs_
12ff8                 | _do_or_ret
12ff8     2D 00 64 FD | 	ret
12ffc                 | 
12ffc                 | ' 
12ffc                 | ' sub do_mul
12ffc                 | _do_mul
12ffc     05 4A 05 F6 | 	mov	COUNT_, #5
13000     A8 00 A0 FD | 	call	#pushregs_
13004     18 F0 07 F1 | 	add	ptra, #24
13008     98 89 BF FD | 	call	#_pop
1300c     FD 1E 02 F6 | 	mov	local01, result1
13010     FE 20 02 F6 | 	mov	local02, result2
13014     FF 22 02 F6 | 	mov	local03, result3
13018     0C 4E 05 F1 | 	add	fp, #12
1301c     A7 1E 62 FC | 	wrlong	local01, fp
13020     04 4E 05 F1 | 	add	fp, #4
13024     A7 20 62 FC | 	wrlong	local02, fp
13028     04 4E 05 F1 | 	add	fp, #4
1302c     A7 22 62 FC | 	wrlong	local03, fp
13030     14 4E 85 F1 | 	sub	fp, #20
13034     6C 89 BF FD | 	call	#_pop
13038     FF 22 02 F6 | 	mov	local03, result3
1303c     A7 FA 61 FC | 	wrlong	result1, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 FC 61 FC | 	wrlong	result2, fp
13048     04 4E 05 F1 | 	add	fp, #4
1304c     A7 22 62 FC | 	wrlong	local03, fp
13050                 | ' 
13050                 | ' t2=pop()
13050                 | ' t1=pop()
13050                 | ' 
13050                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
13050     08 4E 85 F1 | 	sub	fp, #8
13054     1D 22 0E F2 | 	cmp	local03, #29 wz
13058     14 4E 05 A1 |  if_e	add	fp, #20
1305c     A7 24 02 AB |  if_e	rdlong	local04, fp
13060     14 4E 85 A1 |  if_e	sub	fp, #20
13064     12 23 02 A6 |  if_e	mov	local03, local04
13068     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1306c     20 00 90 5D |  if_ne	jmp	#LR__1550
13070     A7 20 02 FB | 	rdlong	local02, fp
13074     0C 4E 05 F1 | 	add	fp, #12
13078     A7 22 02 FB | 	rdlong	local03, fp
1307c     11 21 02 FD | 	qmul	local02, local03
13080     0C 4E 85 F1 | 	sub	fp, #12
13084     18 1E 62 FD | 	getqx	local01
13088     A7 1E 62 FC | 	wrlong	local01, fp
1308c     C4 02 90 FD | 	jmp	#LR__1559
13090                 | LR__1550
13090                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
13090     08 4E 05 F1 | 	add	fp, #8
13094     A7 1E 02 FB | 	rdlong	local01, fp
13098     08 4E 85 F1 | 	sub	fp, #8
1309c     1D 1E 0E F2 | 	cmp	local01, #29 wz
130a0     14 4E 05 A1 |  if_e	add	fp, #20
130a4     A7 24 02 AB |  if_e	rdlong	local04, fp
130a8     14 4E 85 A1 |  if_e	sub	fp, #20
130ac     12 23 02 A6 |  if_e	mov	local03, local04
130b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
130b4     2C 00 90 5D |  if_ne	jmp	#LR__1551
130b8     A7 20 02 FB | 	rdlong	local02, fp
130bc     0C 4E 05 F1 | 	add	fp, #12
130c0     A7 22 02 FB | 	rdlong	local03, fp
130c4     11 21 02 FD | 	qmul	local02, local03
130c8     0C 4E 85 F1 | 	sub	fp, #12
130cc     18 1E 62 FD | 	getqx	local01
130d0     A7 1E 62 FC | 	wrlong	local01, fp
130d4     08 4E 05 F1 | 	add	fp, #8
130d8     A7 38 68 FC | 	wrlong	#28, fp
130dc     08 4E 85 F1 | 	sub	fp, #8
130e0     70 02 90 FD | 	jmp	#LR__1559
130e4                 | LR__1551
130e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
130e4     08 4E 05 F1 | 	add	fp, #8
130e8     A7 1E 02 FB | 	rdlong	local01, fp
130ec     08 4E 85 F1 | 	sub	fp, #8
130f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
130f4     14 4E 05 A1 |  if_e	add	fp, #20
130f8     A7 24 02 AB |  if_e	rdlong	local04, fp
130fc     14 4E 85 A1 |  if_e	sub	fp, #20
13100     12 23 02 A6 |  if_e	mov	local03, local04
13104     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13108     30 00 90 5D |  if_ne	jmp	#LR__1552
1310c     A7 12 02 FB | 	rdlong	arg01, fp
13110     C4 FD B0 FD | 	call	#__system___float_fromuns
13114     FD 12 02 F6 | 	mov	arg01, result1
13118     0C 4E 05 F1 | 	add	fp, #12
1311c     A7 14 02 FB | 	rdlong	arg02, fp
13120     0C 4E 85 F1 | 	sub	fp, #12
13124     B4 01 B1 FD | 	call	#__system___float_mul
13128     A7 FA 61 FC | 	wrlong	result1, fp
1312c     08 4E 05 F1 | 	add	fp, #8
13130     A7 3C 68 FC | 	wrlong	#30, fp
13134     08 4E 85 F1 | 	sub	fp, #8
13138     18 02 90 FD | 	jmp	#LR__1559
1313c                 | LR__1552
1313c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1313c     08 4E 05 F1 | 	add	fp, #8
13140     A7 1E 02 FB | 	rdlong	local01, fp
13144     08 4E 85 F1 | 	sub	fp, #8
13148     1C 1E 0E F2 | 	cmp	local01, #28 wz
1314c     14 4E 05 A1 |  if_e	add	fp, #20
13150     A7 24 02 AB |  if_e	rdlong	local04, fp
13154     14 4E 85 A1 |  if_e	sub	fp, #20
13158     12 23 02 A6 |  if_e	mov	local03, local04
1315c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13160     20 00 90 5D |  if_ne	jmp	#LR__1553
13164     A7 20 02 FB | 	rdlong	local02, fp
13168     0C 4E 05 F1 | 	add	fp, #12
1316c     A7 22 02 FB | 	rdlong	local03, fp
13170     11 21 02 FD | 	qmul	local02, local03
13174     0C 4E 85 F1 | 	sub	fp, #12
13178     18 1E 62 FD | 	getqx	local01
1317c     A7 1E 62 FC | 	wrlong	local01, fp
13180     D0 01 90 FD | 	jmp	#LR__1559
13184                 | LR__1553
13184                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
13184     08 4E 05 F1 | 	add	fp, #8
13188     A7 1E 02 FB | 	rdlong	local01, fp
1318c     08 4E 85 F1 | 	sub	fp, #8
13190     1C 1E 0E F2 | 	cmp	local01, #28 wz
13194     14 4E 05 A1 |  if_e	add	fp, #20
13198     A7 24 02 AB |  if_e	rdlong	local04, fp
1319c     14 4E 85 A1 |  if_e	sub	fp, #20
131a0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
131a4     20 00 90 5D |  if_ne	jmp	#LR__1554
131a8     A7 20 02 FB | 	rdlong	local02, fp
131ac     0C 4E 05 F1 | 	add	fp, #12
131b0     A7 22 02 FB | 	rdlong	local03, fp
131b4     11 21 02 FD | 	qmul	local02, local03
131b8     0C 4E 85 F1 | 	sub	fp, #12
131bc     18 1E 62 FD | 	getqx	local01
131c0     A7 1E 62 FC | 	wrlong	local01, fp
131c4     8C 01 90 FD | 	jmp	#LR__1559
131c8                 | LR__1554
131c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
131c8     08 4E 05 F1 | 	add	fp, #8
131cc     A7 1E 02 FB | 	rdlong	local01, fp
131d0     08 4E 85 F1 | 	sub	fp, #8
131d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
131d8     14 4E 05 A1 |  if_e	add	fp, #20
131dc     A7 22 02 AB |  if_e	rdlong	local03, fp
131e0     14 4E 85 A1 |  if_e	sub	fp, #20
131e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
131e8     40 00 90 5D |  if_ne	jmp	#LR__1555
131ec     A7 12 02 FB | 	rdlong	arg01, fp
131f0     09 13 52 F6 | 	abs	arg01, arg01 wc
131f4     1F 26 C6 C9 |  if_b	decod	local05, #31
131f8     00 26 06 36 |  if_ae	mov	local05, #0
131fc     D8 FC B0 FD | 	call	#__system___float_fromuns
13200     13 FB 61 F5 | 	xor	result1, local05
13204     FD 12 02 F6 | 	mov	arg01, result1
13208     0C 4E 05 F1 | 	add	fp, #12
1320c     A7 14 02 FB | 	rdlong	arg02, fp
13210     0C 4E 85 F1 | 	sub	fp, #12
13214     C4 00 B1 FD | 	call	#__system___float_mul
13218     A7 FA 61 FC | 	wrlong	result1, fp
1321c     08 4E 05 F1 | 	add	fp, #8
13220     A7 3C 68 FC | 	wrlong	#30, fp
13224     08 4E 85 F1 | 	sub	fp, #8
13228     28 01 90 FD | 	jmp	#LR__1559
1322c                 | LR__1555
1322c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1322c     08 4E 05 F1 | 	add	fp, #8
13230     A7 1E 02 FB | 	rdlong	local01, fp
13234     08 4E 85 F1 | 	sub	fp, #8
13238     1E 1E 0E F2 | 	cmp	local01, #30 wz
1323c     14 4E 05 A1 |  if_e	add	fp, #20
13240     A7 22 02 AB |  if_e	rdlong	local03, fp
13244     14 4E 85 A1 |  if_e	sub	fp, #20
13248     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1324c     28 00 90 5D |  if_ne	jmp	#LR__1556
13250     A7 1E 02 FB | 	rdlong	local01, fp
13254     0C 4E 05 F1 | 	add	fp, #12
13258     A7 12 02 FB | 	rdlong	arg01, fp
1325c     0C 4E 85 F1 | 	sub	fp, #12
13260     74 FC B0 FD | 	call	#__system___float_fromuns
13264     FD 14 02 F6 | 	mov	arg02, result1
13268     0F 13 02 F6 | 	mov	arg01, local01
1326c     6C 00 B1 FD | 	call	#__system___float_mul
13270     A7 FA 61 FC | 	wrlong	result1, fp
13274     DC 00 90 FD | 	jmp	#LR__1559
13278                 | LR__1556
13278                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
13278     08 4E 05 F1 | 	add	fp, #8
1327c     A7 1E 02 FB | 	rdlong	local01, fp
13280     08 4E 85 F1 | 	sub	fp, #8
13284     1E 1E 0E F2 | 	cmp	local01, #30 wz
13288     14 4E 05 A1 |  if_e	add	fp, #20
1328c     A7 22 02 AB |  if_e	rdlong	local03, fp
13290     14 4E 85 A1 |  if_e	sub	fp, #20
13294     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13298     38 00 90 5D |  if_ne	jmp	#LR__1557
1329c     A7 1E 02 FB | 	rdlong	local01, fp
132a0     0C 4E 05 F1 | 	add	fp, #12
132a4     A7 12 02 FB | 	rdlong	arg01, fp
132a8     0C 4E 85 F1 | 	sub	fp, #12
132ac     09 13 52 F6 | 	abs	arg01, arg01 wc
132b0     1F 26 C6 C9 |  if_b	decod	local05, #31
132b4     00 26 06 36 |  if_ae	mov	local05, #0
132b8     1C FC B0 FD | 	call	#__system___float_fromuns
132bc     13 FB 61 F5 | 	xor	result1, local05
132c0     FD 14 02 F6 | 	mov	arg02, result1
132c4     0F 13 02 F6 | 	mov	arg01, local01
132c8     10 00 B1 FD | 	call	#__system___float_mul
132cc     A7 FA 61 FC | 	wrlong	result1, fp
132d0     80 00 90 FD | 	jmp	#LR__1559
132d4                 | LR__1557
132d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
132d4     08 4E 05 F1 | 	add	fp, #8
132d8     A7 1E 02 FB | 	rdlong	local01, fp
132dc     08 4E 85 F1 | 	sub	fp, #8
132e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
132e4     14 4E 05 A1 |  if_e	add	fp, #20
132e8     A7 22 02 AB |  if_e	rdlong	local03, fp
132ec     14 4E 85 A1 |  if_e	sub	fp, #20
132f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
132f4     1C 00 90 5D |  if_ne	jmp	#LR__1558
132f8     A7 12 02 FB | 	rdlong	arg01, fp
132fc     0C 4E 05 F1 | 	add	fp, #12
13300     A7 14 02 FB | 	rdlong	arg02, fp
13304     0C 4E 85 F1 | 	sub	fp, #12
13308     D0 FF B0 FD | 	call	#__system___float_mul
1330c     A7 FA 61 FC | 	wrlong	result1, fp
13310     40 00 90 FD | 	jmp	#LR__1559
13314                 | LR__1558
13314                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
13314     08 4E 05 F1 | 	add	fp, #8
13318     A7 1E 02 FB | 	rdlong	local01, fp
1331c     08 4E 85 F1 | 	sub	fp, #8
13320     1F 1E 0E F2 | 	cmp	local01, #31 wz
13324     14 4E 05 51 |  if_ne	add	fp, #20
13328     A7 22 02 5B |  if_ne	rdlong	local03, fp
1332c     14 4E 85 51 |  if_ne	sub	fp, #20
13330     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
13334     A7 10 68 AC |  if_e	wrlong	#8, fp
13338     08 4E 05 A1 |  if_e	add	fp, #8
1333c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13340     08 4E 85 A1 |  if_e	sub	fp, #8
13344     A7 12 68 5C |  if_ne	wrlong	#9, fp
13348     08 4E 05 51 |  if_ne	add	fp, #8
1334c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
13350     08 4E 85 51 |  if_ne	sub	fp, #8
13354                 | LR__1559
13354     A7 12 02 F6 | 	mov	arg01, fp
13358     E0 86 BF FD | 	call	#_push
1335c     A7 F0 03 F6 | 	mov	ptra, fp
13360     B2 00 A0 FD | 	call	#popregs_
13364                 | _do_mul_ret
13364     2D 00 64 FD | 	ret
13368                 | 
13368                 | ' 
13368                 | ' sub do_div 
13368                 | _do_div
13368     01 4A 05 F6 | 	mov	COUNT_, #1
1336c     A8 00 A0 FD | 	call	#pushregs_
13370     18 F0 07 F1 | 	add	ptra, #24
13374     2C 86 BF FD | 	call	#_pop
13378     FD 7E 02 F6 | 	mov	muldivb_, result1
1337c     FE 7C 02 F6 | 	mov	muldiva_, result2
13380     FF 1E 02 F6 | 	mov	local01, result3
13384     0C 4E 05 F1 | 	add	fp, #12
13388     A7 7E 62 FC | 	wrlong	muldivb_, fp
1338c     04 4E 05 F1 | 	add	fp, #4
13390     A7 7C 62 FC | 	wrlong	muldiva_, fp
13394     04 4E 05 F1 | 	add	fp, #4
13398     A7 1E 62 FC | 	wrlong	local01, fp
1339c     14 4E 85 F1 | 	sub	fp, #20
133a0     00 86 BF FD | 	call	#_pop
133a4     A7 FA 61 FC | 	wrlong	result1, fp
133a8     04 4E 05 F1 | 	add	fp, #4
133ac     A7 FC 61 FC | 	wrlong	result2, fp
133b0     04 4E 05 F1 | 	add	fp, #4
133b4     A7 FE 61 FC | 	wrlong	result3, fp
133b8                 | ' 
133b8                 | ' t2=pop()
133b8                 | ' t1=pop()
133b8                 | ' 
133b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
133b8     08 4E 85 F1 | 	sub	fp, #8
133bc     1F FE 0D F2 | 	cmp	result3, #31 wz
133c0     14 4E 05 51 |  if_ne	add	fp, #20
133c4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
133c8     14 4E 85 51 |  if_ne	sub	fp, #20
133cc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
133d0     A7 14 68 AC |  if_e	wrlong	#10, fp
133d4     08 4E 05 A1 |  if_e	add	fp, #8
133d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
133dc     08 4E 85 A1 |  if_e	sub	fp, #8
133e0     90 01 90 AD |  if_e	jmp	#LR__1566
133e4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
133e4     08 4E 05 F1 | 	add	fp, #8
133e8     A7 7E 02 FB | 	rdlong	muldivb_, fp
133ec     08 4E 85 F1 | 	sub	fp, #8
133f0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
133f4     1C 00 90 5D |  if_ne	jmp	#LR__1560
133f8     08 4E 05 F1 | 	add	fp, #8
133fc     A7 38 68 FC | 	wrlong	#28, fp
13400     08 4E 85 F1 | 	sub	fp, #8
13404     A7 12 02 FB | 	rdlong	arg01, fp
13408     00 14 06 F6 | 	mov	arg02, #0
1340c     94 03 B1 FD | 	call	#__system___float_tointeger
13410     A7 FA 61 FC | 	wrlong	result1, fp
13414                 | LR__1560
13414                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13414     14 4E 05 F1 | 	add	fp, #20
13418     A7 7E 02 FB | 	rdlong	muldivb_, fp
1341c     14 4E 85 F1 | 	sub	fp, #20
13420     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13424     28 00 90 5D |  if_ne	jmp	#LR__1561
13428     14 4E 05 F1 | 	add	fp, #20
1342c     A7 38 68 FC | 	wrlong	#28, fp
13430     08 4E 85 F1 | 	sub	fp, #8
13434     A7 12 02 FB | 	rdlong	arg01, fp
13438     0C 4E 85 F1 | 	sub	fp, #12
1343c     00 14 06 F6 | 	mov	arg02, #0
13440     60 03 B1 FD | 	call	#__system___float_tointeger
13444     0C 4E 05 F1 | 	add	fp, #12
13448     A7 FA 61 FC | 	wrlong	result1, fp
1344c     0C 4E 85 F1 | 	sub	fp, #12
13450                 | LR__1561
13450                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
13450     08 4E 05 F1 | 	add	fp, #8
13454     A7 7E 02 FB | 	rdlong	muldivb_, fp
13458     08 4E 85 F1 | 	sub	fp, #8
1345c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13460     14 4E 05 A1 |  if_e	add	fp, #20
13464     A7 1E 02 AB |  if_e	rdlong	local01, fp
13468     14 4E 85 A1 |  if_e	sub	fp, #20
1346c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13470     20 00 90 5D |  if_ne	jmp	#LR__1562
13474     0C 4E 05 F1 | 	add	fp, #12
13478     A7 1E 02 FB | 	rdlong	local01, fp
1347c     0C 4E 85 F1 | 	sub	fp, #12
13480     A7 7E 02 FB | 	rdlong	muldivb_, fp
13484     0F 7F 12 FD | 	qdiv	muldivb_, local01
13488     18 1E 62 FD | 	getqx	local01
1348c     A7 1E 62 FC | 	wrlong	local01, fp
13490     E0 00 90 FD | 	jmp	#LR__1566
13494                 | LR__1562
13494                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
13494     08 4E 05 F1 | 	add	fp, #8
13498     A7 7E 02 FB | 	rdlong	muldivb_, fp
1349c     08 4E 85 F1 | 	sub	fp, #8
134a0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
134a4     14 4E 05 A1 |  if_e	add	fp, #20
134a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
134ac     14 4E 85 A1 |  if_e	sub	fp, #20
134b0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
134b4     2C 00 90 5D |  if_ne	jmp	#LR__1563
134b8     0C 4E 05 F1 | 	add	fp, #12
134bc     A7 1E 02 FB | 	rdlong	local01, fp
134c0     0C 4E 85 F1 | 	sub	fp, #12
134c4     A7 7E 02 FB | 	rdlong	muldivb_, fp
134c8     0F 7F 12 FD | 	qdiv	muldivb_, local01
134cc     18 1E 62 FD | 	getqx	local01
134d0     A7 1E 62 FC | 	wrlong	local01, fp
134d4     08 4E 05 F1 | 	add	fp, #8
134d8     A7 38 68 FC | 	wrlong	#28, fp
134dc     08 4E 85 F1 | 	sub	fp, #8
134e0     90 00 90 FD | 	jmp	#LR__1566
134e4                 | LR__1563
134e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
134e4     08 4E 05 F1 | 	add	fp, #8
134e8     A7 7E 02 FB | 	rdlong	muldivb_, fp
134ec     08 4E 85 F1 | 	sub	fp, #8
134f0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
134f4     14 4E 05 A1 |  if_e	add	fp, #20
134f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
134fc     14 4E 85 A1 |  if_e	sub	fp, #20
13500     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13504     1C 00 90 5D |  if_ne	jmp	#LR__1564
13508     A7 7C 02 FB | 	rdlong	muldiva_, fp
1350c     0C 4E 05 F1 | 	add	fp, #12
13510     A7 7E 02 FB | 	rdlong	muldivb_, fp
13514     0C 4E 85 F1 | 	sub	fp, #12
13518     BA 00 A0 FD | 	call	#divide_
1351c     A7 7E 62 FC | 	wrlong	muldivb_, fp
13520     50 00 90 FD | 	jmp	#LR__1566
13524                 | LR__1564
13524                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
13524     08 4E 05 F1 | 	add	fp, #8
13528     A7 7E 02 FB | 	rdlong	muldivb_, fp
1352c     08 4E 85 F1 | 	sub	fp, #8
13530     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13534     14 4E 05 A1 |  if_e	add	fp, #20
13538     A7 1E 02 AB |  if_e	rdlong	local01, fp
1353c     14 4E 85 A1 |  if_e	sub	fp, #20
13540     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13544     1C 00 90 5D |  if_ne	jmp	#LR__1565
13548     A7 7C 02 FB | 	rdlong	muldiva_, fp
1354c     0C 4E 05 F1 | 	add	fp, #12
13550     A7 7E 02 FB | 	rdlong	muldivb_, fp
13554     0C 4E 85 F1 | 	sub	fp, #12
13558     BA 00 A0 FD | 	call	#divide_
1355c     A7 7E 62 FC | 	wrlong	muldivb_, fp
13560     10 00 90 FD | 	jmp	#LR__1566
13564                 | LR__1565
13564     A7 16 68 FC | 	wrlong	#11, fp
13568     08 4E 05 F1 | 	add	fp, #8
1356c     A7 FE 69 FC | 	wrlong	#255, fp
13570     08 4E 85 F1 | 	sub	fp, #8
13574                 | LR__1566
13574     A7 12 02 F6 | 	mov	arg01, fp
13578     C0 84 BF FD | 	call	#_push
1357c     A7 F0 03 F6 | 	mov	ptra, fp
13580     B2 00 A0 FD | 	call	#popregs_
13584                 | _do_div_ret
13584     2D 00 64 FD | 	ret
13588                 | 
13588                 | ' 
13588                 | ' sub do_fdiv 
13588                 | _do_fdiv
13588     02 4A 05 F6 | 	mov	COUNT_, #2
1358c     A8 00 A0 FD | 	call	#pushregs_
13590     18 F0 07 F1 | 	add	ptra, #24
13594     0C 84 BF FD | 	call	#_pop
13598     FD 14 02 F6 | 	mov	arg02, result1
1359c     FE 12 02 F6 | 	mov	arg01, result2
135a0     FF 1E 02 F6 | 	mov	local01, result3
135a4     0C 4E 05 F1 | 	add	fp, #12
135a8     A7 14 62 FC | 	wrlong	arg02, fp
135ac     04 4E 05 F1 | 	add	fp, #4
135b0     A7 12 62 FC | 	wrlong	arg01, fp
135b4     04 4E 05 F1 | 	add	fp, #4
135b8     A7 1E 62 FC | 	wrlong	local01, fp
135bc     14 4E 85 F1 | 	sub	fp, #20
135c0     E0 83 BF FD | 	call	#_pop
135c4     A7 FA 61 FC | 	wrlong	result1, fp
135c8     04 4E 05 F1 | 	add	fp, #4
135cc     A7 FC 61 FC | 	wrlong	result2, fp
135d0     04 4E 05 F1 | 	add	fp, #4
135d4     A7 FE 61 FC | 	wrlong	result3, fp
135d8                 | ' 
135d8                 | ' t2=pop()
135d8                 | ' t1=pop()
135d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
135d8     08 4E 85 F1 | 	sub	fp, #8
135dc     1F FE 0D F2 | 	cmp	result3, #31 wz
135e0     14 4E 05 51 |  if_ne	add	fp, #20
135e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
135e8     14 4E 85 51 |  if_ne	sub	fp, #20
135ec     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
135f0     A7 14 68 AC |  if_e	wrlong	#10, fp
135f4     08 4E 05 A1 |  if_e	add	fp, #8
135f8     A7 FE 69 AC |  if_e	wrlong	#255, fp
135fc     08 4E 85 A1 |  if_e	sub	fp, #8
13600     38 01 90 AD |  if_e	jmp	#LR__1575
13604                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13604     08 4E 05 F1 | 	add	fp, #8
13608     A7 14 02 FB | 	rdlong	arg02, fp
1360c     08 4E 85 F1 | 	sub	fp, #8
13610     1C 14 0E F2 | 	cmp	arg02, #28 wz
13614     28 00 90 5D |  if_ne	jmp	#LR__1570
13618     08 4E 05 F1 | 	add	fp, #8
1361c     A7 3C 68 FC | 	wrlong	#30, fp
13620     08 4E 85 F1 | 	sub	fp, #8
13624     A7 12 02 FB | 	rdlong	arg01, fp
13628     09 13 52 F6 | 	abs	arg01, arg01 wc
1362c     1F 20 C6 C9 |  if_b	decod	local02, #31
13630     00 20 06 36 |  if_ae	mov	local02, #0
13634     A0 F8 B0 FD | 	call	#__system___float_fromuns
13638     10 FB 61 F5 | 	xor	result1, local02
1363c     A7 FA 61 FC | 	wrlong	result1, fp
13640                 | LR__1570
13640                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
13640     08 4E 05 F1 | 	add	fp, #8
13644     A7 14 02 FB | 	rdlong	arg02, fp
13648     08 4E 85 F1 | 	sub	fp, #8
1364c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13650     18 00 90 5D |  if_ne	jmp	#LR__1571
13654     08 4E 05 F1 | 	add	fp, #8
13658     A7 3C 68 FC | 	wrlong	#30, fp
1365c     08 4E 85 F1 | 	sub	fp, #8
13660     A7 12 02 FB | 	rdlong	arg01, fp
13664     70 F8 B0 FD | 	call	#__system___float_fromuns
13668     A7 FA 61 FC | 	wrlong	result1, fp
1366c                 | LR__1571
1366c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1366c     14 4E 05 F1 | 	add	fp, #20
13670     A7 14 02 FB | 	rdlong	arg02, fp
13674     14 4E 85 F1 | 	sub	fp, #20
13678     1C 14 0E F2 | 	cmp	arg02, #28 wz
1367c     34 00 90 5D |  if_ne	jmp	#LR__1572
13680     14 4E 05 F1 | 	add	fp, #20
13684     A7 3C 68 FC | 	wrlong	#30, fp
13688     08 4E 85 F1 | 	sub	fp, #8
1368c     A7 12 02 FB | 	rdlong	arg01, fp
13690     0C 4E 85 F1 | 	sub	fp, #12
13694     09 13 52 F6 | 	abs	arg01, arg01 wc
13698     1F 20 C6 C9 |  if_b	decod	local02, #31
1369c     00 20 06 36 |  if_ae	mov	local02, #0
136a0     34 F8 B0 FD | 	call	#__system___float_fromuns
136a4     10 FB 61 F5 | 	xor	result1, local02
136a8     0C 4E 05 F1 | 	add	fp, #12
136ac     A7 FA 61 FC | 	wrlong	result1, fp
136b0     0C 4E 85 F1 | 	sub	fp, #12
136b4                 | LR__1572
136b4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
136b4     14 4E 05 F1 | 	add	fp, #20
136b8     A7 14 02 FB | 	rdlong	arg02, fp
136bc     14 4E 85 F1 | 	sub	fp, #20
136c0     1D 14 0E F2 | 	cmp	arg02, #29 wz
136c4     24 00 90 5D |  if_ne	jmp	#LR__1573
136c8     14 4E 05 F1 | 	add	fp, #20
136cc     A7 3C 68 FC | 	wrlong	#30, fp
136d0     08 4E 85 F1 | 	sub	fp, #8
136d4     A7 12 02 FB | 	rdlong	arg01, fp
136d8     0C 4E 85 F1 | 	sub	fp, #12
136dc     F8 F7 B0 FD | 	call	#__system___float_fromuns
136e0     0C 4E 05 F1 | 	add	fp, #12
136e4     A7 FA 61 FC | 	wrlong	result1, fp
136e8     0C 4E 85 F1 | 	sub	fp, #12
136ec                 | LR__1573
136ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
136ec     08 4E 05 F1 | 	add	fp, #8
136f0     A7 14 02 FB | 	rdlong	arg02, fp
136f4     08 4E 85 F1 | 	sub	fp, #8
136f8     1E 14 0E F2 | 	cmp	arg02, #30 wz
136fc     14 4E 05 A1 |  if_e	add	fp, #20
13700     A7 1E 02 AB |  if_e	rdlong	local01, fp
13704     14 4E 85 A1 |  if_e	sub	fp, #20
13708     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1370c     1C 00 90 5D |  if_ne	jmp	#LR__1574
13710     A7 12 02 FB | 	rdlong	arg01, fp
13714     0C 4E 05 F1 | 	add	fp, #12
13718     A7 14 02 FB | 	rdlong	arg02, fp
1371c     0C 4E 85 F1 | 	sub	fp, #12
13720     BC FD B0 FD | 	call	#__system___float_div
13724     A7 FA 61 FC | 	wrlong	result1, fp
13728     10 00 90 FD | 	jmp	#LR__1575
1372c                 | LR__1574
1372c     A7 16 68 FC | 	wrlong	#11, fp
13730     08 4E 05 F1 | 	add	fp, #8
13734     A7 FE 69 FC | 	wrlong	#255, fp
13738     08 4E 85 F1 | 	sub	fp, #8
1373c                 | LR__1575
1373c     A7 12 02 F6 | 	mov	arg01, fp
13740     F8 82 BF FD | 	call	#_push
13744     A7 F0 03 F6 | 	mov	ptra, fp
13748     B2 00 A0 FD | 	call	#popregs_
1374c                 | _do_fdiv_ret
1374c     2D 00 64 FD | 	ret
13750                 | 
13750                 | ' 
13750                 | ' 
13750                 | ' sub do_mod 
13750                 | _do_mod
13750     01 4A 05 F6 | 	mov	COUNT_, #1
13754     A8 00 A0 FD | 	call	#pushregs_
13758     18 F0 07 F1 | 	add	ptra, #24
1375c     44 82 BF FD | 	call	#_pop
13760     FD 7E 02 F6 | 	mov	muldivb_, result1
13764     FE 7C 02 F6 | 	mov	muldiva_, result2
13768     FF 1E 02 F6 | 	mov	local01, result3
1376c     0C 4E 05 F1 | 	add	fp, #12
13770     A7 7E 62 FC | 	wrlong	muldivb_, fp
13774     04 4E 05 F1 | 	add	fp, #4
13778     A7 7C 62 FC | 	wrlong	muldiva_, fp
1377c     04 4E 05 F1 | 	add	fp, #4
13780     A7 1E 62 FC | 	wrlong	local01, fp
13784     14 4E 85 F1 | 	sub	fp, #20
13788     18 82 BF FD | 	call	#_pop
1378c     A7 FA 61 FC | 	wrlong	result1, fp
13790     04 4E 05 F1 | 	add	fp, #4
13794     A7 FC 61 FC | 	wrlong	result2, fp
13798     04 4E 05 F1 | 	add	fp, #4
1379c     A7 FE 61 FC | 	wrlong	result3, fp
137a0                 | ' 
137a0                 | ' t2=pop()
137a0                 | ' t1=pop()
137a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
137a0     08 4E 85 F1 | 	sub	fp, #8
137a4     1F FE 0D F2 | 	cmp	result3, #31 wz
137a8     14 4E 05 51 |  if_ne	add	fp, #20
137ac     A7 12 02 5B |  if_ne	rdlong	arg01, fp
137b0     14 4E 85 51 |  if_ne	sub	fp, #20
137b4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
137b8     A7 14 68 AC |  if_e	wrlong	#10, fp
137bc     08 4E 05 A1 |  if_e	add	fp, #8
137c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
137c4     08 4E 85 A1 |  if_e	sub	fp, #8
137c8     90 01 90 AD |  if_e	jmp	#LR__1586
137cc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
137cc     08 4E 05 F1 | 	add	fp, #8
137d0     A7 7E 02 FB | 	rdlong	muldivb_, fp
137d4     08 4E 85 F1 | 	sub	fp, #8
137d8     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
137dc     1C 00 90 5D |  if_ne	jmp	#LR__1580
137e0     08 4E 05 F1 | 	add	fp, #8
137e4     A7 38 68 FC | 	wrlong	#28, fp
137e8     08 4E 85 F1 | 	sub	fp, #8
137ec     A7 12 02 FB | 	rdlong	arg01, fp
137f0     00 14 06 F6 | 	mov	arg02, #0
137f4     AC FF B0 FD | 	call	#__system___float_tointeger
137f8     A7 FA 61 FC | 	wrlong	result1, fp
137fc                 | LR__1580
137fc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
137fc     14 4E 05 F1 | 	add	fp, #20
13800     A7 7E 02 FB | 	rdlong	muldivb_, fp
13804     14 4E 85 F1 | 	sub	fp, #20
13808     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1380c     28 00 90 5D |  if_ne	jmp	#LR__1581
13810     14 4E 05 F1 | 	add	fp, #20
13814     A7 38 68 FC | 	wrlong	#28, fp
13818     08 4E 85 F1 | 	sub	fp, #8
1381c     A7 12 02 FB | 	rdlong	arg01, fp
13820     0C 4E 85 F1 | 	sub	fp, #12
13824     00 14 06 F6 | 	mov	arg02, #0
13828     78 FF B0 FD | 	call	#__system___float_tointeger
1382c     0C 4E 05 F1 | 	add	fp, #12
13830     A7 FA 61 FC | 	wrlong	result1, fp
13834     0C 4E 85 F1 | 	sub	fp, #12
13838                 | LR__1581
13838                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
13838     08 4E 05 F1 | 	add	fp, #8
1383c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13840     08 4E 85 F1 | 	sub	fp, #8
13844     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13848     14 4E 05 A1 |  if_e	add	fp, #20
1384c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13850     14 4E 85 A1 |  if_e	sub	fp, #20
13854     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13858     20 00 90 5D |  if_ne	jmp	#LR__1582
1385c     0C 4E 05 F1 | 	add	fp, #12
13860     A7 1E 02 FB | 	rdlong	local01, fp
13864     0C 4E 85 F1 | 	sub	fp, #12
13868     A7 7E 02 FB | 	rdlong	muldivb_, fp
1386c     0F 7F 12 FD | 	qdiv	muldivb_, local01
13870     19 1E 62 FD | 	getqy	local01
13874     A7 1E 62 FC | 	wrlong	local01, fp
13878     E0 00 90 FD | 	jmp	#LR__1586
1387c                 | LR__1582
1387c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1387c     08 4E 05 F1 | 	add	fp, #8
13880     A7 7E 02 FB | 	rdlong	muldivb_, fp
13884     08 4E 85 F1 | 	sub	fp, #8
13888     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1388c     14 4E 05 A1 |  if_e	add	fp, #20
13890     A7 1E 02 AB |  if_e	rdlong	local01, fp
13894     14 4E 85 A1 |  if_e	sub	fp, #20
13898     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1389c     2C 00 90 5D |  if_ne	jmp	#LR__1583
138a0     0C 4E 05 F1 | 	add	fp, #12
138a4     A7 1E 02 FB | 	rdlong	local01, fp
138a8     0C 4E 85 F1 | 	sub	fp, #12
138ac     A7 7E 02 FB | 	rdlong	muldivb_, fp
138b0     0F 7F 12 FD | 	qdiv	muldivb_, local01
138b4     19 1E 62 FD | 	getqy	local01
138b8     A7 1E 62 FC | 	wrlong	local01, fp
138bc     08 4E 05 F1 | 	add	fp, #8
138c0     A7 38 68 FC | 	wrlong	#28, fp
138c4     08 4E 85 F1 | 	sub	fp, #8
138c8     90 00 90 FD | 	jmp	#LR__1586
138cc                 | LR__1583
138cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
138cc     08 4E 05 F1 | 	add	fp, #8
138d0     A7 7E 02 FB | 	rdlong	muldivb_, fp
138d4     08 4E 85 F1 | 	sub	fp, #8
138d8     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
138dc     14 4E 05 A1 |  if_e	add	fp, #20
138e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
138e4     14 4E 85 A1 |  if_e	sub	fp, #20
138e8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
138ec     1C 00 90 5D |  if_ne	jmp	#LR__1584
138f0     A7 7C 02 FB | 	rdlong	muldiva_, fp
138f4     0C 4E 05 F1 | 	add	fp, #12
138f8     A7 7E 02 FB | 	rdlong	muldivb_, fp
138fc     0C 4E 85 F1 | 	sub	fp, #12
13900     BA 00 A0 FD | 	call	#divide_
13904     A7 7C 62 FC | 	wrlong	muldiva_, fp
13908     50 00 90 FD | 	jmp	#LR__1586
1390c                 | LR__1584
1390c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1390c     08 4E 05 F1 | 	add	fp, #8
13910     A7 7E 02 FB | 	rdlong	muldivb_, fp
13914     08 4E 85 F1 | 	sub	fp, #8
13918     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1391c     14 4E 05 A1 |  if_e	add	fp, #20
13920     A7 1E 02 AB |  if_e	rdlong	local01, fp
13924     14 4E 85 A1 |  if_e	sub	fp, #20
13928     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1392c     1C 00 90 5D |  if_ne	jmp	#LR__1585
13930     A7 7C 02 FB | 	rdlong	muldiva_, fp
13934     0C 4E 05 F1 | 	add	fp, #12
13938     A7 7E 02 FB | 	rdlong	muldivb_, fp
1393c     0C 4E 85 F1 | 	sub	fp, #12
13940     BA 00 A0 FD | 	call	#divide_
13944     A7 7C 62 FC | 	wrlong	muldiva_, fp
13948     10 00 90 FD | 	jmp	#LR__1586
1394c                 | LR__1585
1394c     A7 16 68 FC | 	wrlong	#11, fp
13950     08 4E 05 F1 | 	add	fp, #8
13954     A7 FE 69 FC | 	wrlong	#255, fp
13958     08 4E 85 F1 | 	sub	fp, #8
1395c                 | LR__1586
1395c     A7 12 02 F6 | 	mov	arg01, fp
13960     D8 80 BF FD | 	call	#_push
13964     A7 F0 03 F6 | 	mov	ptra, fp
13968     B2 00 A0 FD | 	call	#popregs_
1396c                 | _do_mod_ret
1396c     2D 00 64 FD | 	ret
13970                 | 
13970                 | ' 
13970                 | ' sub do_shl 
13970                 | _do_shl
13970     03 4A 05 F6 | 	mov	COUNT_, #3
13974     A8 00 A0 FD | 	call	#pushregs_
13978     18 F0 07 F1 | 	add	ptra, #24
1397c     24 80 BF FD | 	call	#_pop
13980     FD 12 02 F6 | 	mov	arg01, result1
13984     FE 1E 02 F6 | 	mov	local01, result2
13988     FF 20 02 F6 | 	mov	local02, result3
1398c     0C 4E 05 F1 | 	add	fp, #12
13990     A7 12 62 FC | 	wrlong	arg01, fp
13994     04 4E 05 F1 | 	add	fp, #4
13998     A7 1E 62 FC | 	wrlong	local01, fp
1399c     04 4E 05 F1 | 	add	fp, #4
139a0     A7 20 62 FC | 	wrlong	local02, fp
139a4     14 4E 85 F1 | 	sub	fp, #20
139a8     F8 7F BF FD | 	call	#_pop
139ac     FF 22 02 F6 | 	mov	local03, result3
139b0     A7 FA 61 FC | 	wrlong	result1, fp
139b4     04 4E 05 F1 | 	add	fp, #4
139b8     A7 FC 61 FC | 	wrlong	result2, fp
139bc     04 4E 05 F1 | 	add	fp, #4
139c0     A7 22 62 FC | 	wrlong	local03, fp
139c4                 | ' 
139c4                 | ' t2=pop()
139c4                 | ' t1=pop()
139c4                 | ' 
139c4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
139c4     08 4E 85 F1 | 	sub	fp, #8
139c8     1C 22 0E F2 | 	cmp	local03, #28 wz
139cc     A7 22 02 AB |  if_e	rdlong	local03, fp
139d0     A7 22 62 AC |  if_e	wrlong	local03, fp
139d4     08 4E 05 A1 |  if_e	add	fp, #8
139d8     A7 3A 68 AC |  if_e	wrlong	#29, fp
139dc     08 4E 85 A1 |  if_e	sub	fp, #8
139e0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
139e0     14 4E 05 F1 | 	add	fp, #20
139e4     A7 22 02 FB | 	rdlong	local03, fp
139e8     14 4E 85 F1 | 	sub	fp, #20
139ec     1C 22 0E F2 | 	cmp	local03, #28 wz
139f0     18 00 90 5D |  if_ne	jmp	#LR__1590
139f4     0C 4E 05 F1 | 	add	fp, #12
139f8     A7 22 02 FB | 	rdlong	local03, fp
139fc     A7 22 62 FC | 	wrlong	local03, fp
13a00     08 4E 05 F1 | 	add	fp, #8
13a04     A7 3A 68 FC | 	wrlong	#29, fp
13a08     14 4E 85 F1 | 	sub	fp, #20
13a0c                 | LR__1590
13a0c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13a0c     08 4E 05 F1 | 	add	fp, #8
13a10     A7 22 02 FB | 	rdlong	local03, fp
13a14     08 4E 85 F1 | 	sub	fp, #8
13a18     1F 22 0E F2 | 	cmp	local03, #31 wz
13a1c     14 4E 05 51 |  if_ne	add	fp, #20
13a20     A7 20 02 5B |  if_ne	rdlong	local02, fp
13a24     14 4E 85 51 |  if_ne	sub	fp, #20
13a28     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13a2c     08 4E 05 51 |  if_ne	add	fp, #8
13a30     A7 22 02 5B |  if_ne	rdlong	local03, fp
13a34     08 4E 85 51 |  if_ne	sub	fp, #8
13a38     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13a3c     14 4E 05 51 |  if_ne	add	fp, #20
13a40     14 4E 85 51 |  if_ne	sub	fp, #20
13a44     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13a48     A7 0C 68 AC |  if_e	wrlong	#6, fp
13a4c     08 4E 05 A1 |  if_e	add	fp, #8
13a50     A7 FE 69 AC |  if_e	wrlong	#255, fp
13a54     08 4E 85 A1 |  if_e	sub	fp, #8
13a58     18 00 90 AD |  if_e	jmp	#LR__1591
13a5c     A7 22 02 FB | 	rdlong	local03, fp
13a60     0C 4E 05 F1 | 	add	fp, #12
13a64     A7 1E 02 FB | 	rdlong	local01, fp
13a68     0C 4E 85 F1 | 	sub	fp, #12
13a6c     0F 23 62 F0 | 	shl	local03, local01
13a70     A7 22 62 FC | 	wrlong	local03, fp
13a74                 | LR__1591
13a74     A7 12 02 F6 | 	mov	arg01, fp
13a78     C0 7F BF FD | 	call	#_push
13a7c     A7 F0 03 F6 | 	mov	ptra, fp
13a80     B2 00 A0 FD | 	call	#popregs_
13a84                 | _do_shl_ret
13a84     2D 00 64 FD | 	ret
13a88                 | 
13a88                 | ' 
13a88                 | ' sub do_shr 
13a88                 | _do_shr
13a88     03 4A 05 F6 | 	mov	COUNT_, #3
13a8c     A8 00 A0 FD | 	call	#pushregs_
13a90     18 F0 07 F1 | 	add	ptra, #24
13a94     0C 7F BF FD | 	call	#_pop
13a98     FD 12 02 F6 | 	mov	arg01, result1
13a9c     FE 1E 02 F6 | 	mov	local01, result2
13aa0     FF 20 02 F6 | 	mov	local02, result3
13aa4     0C 4E 05 F1 | 	add	fp, #12
13aa8     A7 12 62 FC | 	wrlong	arg01, fp
13aac     04 4E 05 F1 | 	add	fp, #4
13ab0     A7 1E 62 FC | 	wrlong	local01, fp
13ab4     04 4E 05 F1 | 	add	fp, #4
13ab8     A7 20 62 FC | 	wrlong	local02, fp
13abc     14 4E 85 F1 | 	sub	fp, #20
13ac0     E0 7E BF FD | 	call	#_pop
13ac4     FF 22 02 F6 | 	mov	local03, result3
13ac8     A7 FA 61 FC | 	wrlong	result1, fp
13acc     04 4E 05 F1 | 	add	fp, #4
13ad0     A7 FC 61 FC | 	wrlong	result2, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 22 62 FC | 	wrlong	local03, fp
13adc                 | ' t2=pop()
13adc                 | ' t1=pop()
13adc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13adc     08 4E 85 F1 | 	sub	fp, #8
13ae0     1C 22 0E F2 | 	cmp	local03, #28 wz
13ae4     A7 22 02 AB |  if_e	rdlong	local03, fp
13ae8     A7 22 62 AC |  if_e	wrlong	local03, fp
13aec     08 4E 05 A1 |  if_e	add	fp, #8
13af0     A7 3A 68 AC |  if_e	wrlong	#29, fp
13af4     08 4E 85 A1 |  if_e	sub	fp, #8
13af8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13af8     14 4E 05 F1 | 	add	fp, #20
13afc     A7 22 02 FB | 	rdlong	local03, fp
13b00     14 4E 85 F1 | 	sub	fp, #20
13b04     1C 22 0E F2 | 	cmp	local03, #28 wz
13b08     18 00 90 5D |  if_ne	jmp	#LR__1600
13b0c     0C 4E 05 F1 | 	add	fp, #12
13b10     A7 22 02 FB | 	rdlong	local03, fp
13b14     A7 22 62 FC | 	wrlong	local03, fp
13b18     08 4E 05 F1 | 	add	fp, #8
13b1c     A7 3A 68 FC | 	wrlong	#29, fp
13b20     14 4E 85 F1 | 	sub	fp, #20
13b24                 | LR__1600
13b24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13b24     08 4E 05 F1 | 	add	fp, #8
13b28     A7 22 02 FB | 	rdlong	local03, fp
13b2c     08 4E 85 F1 | 	sub	fp, #8
13b30     1F 22 0E F2 | 	cmp	local03, #31 wz
13b34     14 4E 05 51 |  if_ne	add	fp, #20
13b38     A7 20 02 5B |  if_ne	rdlong	local02, fp
13b3c     14 4E 85 51 |  if_ne	sub	fp, #20
13b40     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13b44     08 4E 05 51 |  if_ne	add	fp, #8
13b48     A7 22 02 5B |  if_ne	rdlong	local03, fp
13b4c     08 4E 85 51 |  if_ne	sub	fp, #8
13b50     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13b54     14 4E 05 51 |  if_ne	add	fp, #20
13b58     14 4E 85 51 |  if_ne	sub	fp, #20
13b5c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13b60     A7 0C 68 AC |  if_e	wrlong	#6, fp
13b64     08 4E 05 A1 |  if_e	add	fp, #8
13b68     A7 FE 69 AC |  if_e	wrlong	#255, fp
13b6c     08 4E 85 A1 |  if_e	sub	fp, #8
13b70     18 00 90 AD |  if_e	jmp	#LR__1601
13b74     A7 22 02 FB | 	rdlong	local03, fp
13b78     0C 4E 05 F1 | 	add	fp, #12
13b7c     A7 1E 02 FB | 	rdlong	local01, fp
13b80     0C 4E 85 F1 | 	sub	fp, #12
13b84     0F 23 42 F0 | 	shr	local03, local01
13b88     A7 22 62 FC | 	wrlong	local03, fp
13b8c                 | LR__1601
13b8c     A7 12 02 F6 | 	mov	arg01, fp
13b90     A8 7E BF FD | 	call	#_push
13b94     A7 F0 03 F6 | 	mov	ptra, fp
13b98     B2 00 A0 FD | 	call	#popregs_
13b9c                 | _do_shr_ret
13b9c     2D 00 64 FD | 	ret
13ba0                 | 
13ba0                 | ' 
13ba0                 | ' sub do_power 
13ba0                 | _do_power
13ba0     02 4A 05 F6 | 	mov	COUNT_, #2
13ba4     A8 00 A0 FD | 	call	#pushregs_
13ba8     18 F0 07 F1 | 	add	ptra, #24
13bac     F4 7D BF FD | 	call	#_pop
13bb0     FD 14 02 F6 | 	mov	arg02, result1
13bb4     FE 12 02 F6 | 	mov	arg01, result2
13bb8     FF 1E 02 F6 | 	mov	local01, result3
13bbc     0C 4E 05 F1 | 	add	fp, #12
13bc0     A7 14 62 FC | 	wrlong	arg02, fp
13bc4     04 4E 05 F1 | 	add	fp, #4
13bc8     A7 12 62 FC | 	wrlong	arg01, fp
13bcc     04 4E 05 F1 | 	add	fp, #4
13bd0     A7 1E 62 FC | 	wrlong	local01, fp
13bd4     14 4E 85 F1 | 	sub	fp, #20
13bd8     C8 7D BF FD | 	call	#_pop
13bdc     A7 FA 61 FC | 	wrlong	result1, fp
13be0     04 4E 05 F1 | 	add	fp, #4
13be4     A7 FC 61 FC | 	wrlong	result2, fp
13be8     04 4E 05 F1 | 	add	fp, #4
13bec     A7 FE 61 FC | 	wrlong	result3, fp
13bf0                 | ' t2=pop()
13bf0                 | ' t1=pop()
13bf0                 | ' 
13bf0                 | ' 
13bf0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13bf0     08 4E 85 F1 | 	sub	fp, #8
13bf4     1F FE 0D F2 | 	cmp	result3, #31 wz
13bf8     14 4E 05 51 |  if_ne	add	fp, #20
13bfc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13c00     14 4E 85 51 |  if_ne	sub	fp, #20
13c04     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13c08     A7 18 68 AC |  if_e	wrlong	#12, fp
13c0c     08 4E 05 A1 |  if_e	add	fp, #8
13c10     A7 FE 69 AC |  if_e	wrlong	#255, fp
13c14     08 4E 85 A1 |  if_e	sub	fp, #8
13c18     38 01 90 AD |  if_e	jmp	#LR__1615
13c1c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13c1c     08 4E 05 F1 | 	add	fp, #8
13c20     A7 14 02 FB | 	rdlong	arg02, fp
13c24     08 4E 85 F1 | 	sub	fp, #8
13c28     1C 14 0E F2 | 	cmp	arg02, #28 wz
13c2c     28 00 90 5D |  if_ne	jmp	#LR__1610
13c30     08 4E 05 F1 | 	add	fp, #8
13c34     A7 3C 68 FC | 	wrlong	#30, fp
13c38     08 4E 85 F1 | 	sub	fp, #8
13c3c     A7 12 02 FB | 	rdlong	arg01, fp
13c40     09 13 52 F6 | 	abs	arg01, arg01 wc
13c44     1F 20 C6 C9 |  if_b	decod	local02, #31
13c48     00 20 06 36 |  if_ae	mov	local02, #0
13c4c     88 F2 B0 FD | 	call	#__system___float_fromuns
13c50     10 FB 61 F5 | 	xor	result1, local02
13c54     A7 FA 61 FC | 	wrlong	result1, fp
13c58                 | LR__1610
13c58                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13c58     08 4E 05 F1 | 	add	fp, #8
13c5c     A7 14 02 FB | 	rdlong	arg02, fp
13c60     08 4E 85 F1 | 	sub	fp, #8
13c64     1D 14 0E F2 | 	cmp	arg02, #29 wz
13c68     18 00 90 5D |  if_ne	jmp	#LR__1611
13c6c     08 4E 05 F1 | 	add	fp, #8
13c70     A7 3C 68 FC | 	wrlong	#30, fp
13c74     08 4E 85 F1 | 	sub	fp, #8
13c78     A7 12 02 FB | 	rdlong	arg01, fp
13c7c     58 F2 B0 FD | 	call	#__system___float_fromuns
13c80     A7 FA 61 FC | 	wrlong	result1, fp
13c84                 | LR__1611
13c84                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13c84     14 4E 05 F1 | 	add	fp, #20
13c88     A7 14 02 FB | 	rdlong	arg02, fp
13c8c     14 4E 85 F1 | 	sub	fp, #20
13c90     1C 14 0E F2 | 	cmp	arg02, #28 wz
13c94     34 00 90 5D |  if_ne	jmp	#LR__1612
13c98     14 4E 05 F1 | 	add	fp, #20
13c9c     A7 3C 68 FC | 	wrlong	#30, fp
13ca0     08 4E 85 F1 | 	sub	fp, #8
13ca4     A7 12 02 FB | 	rdlong	arg01, fp
13ca8     0C 4E 85 F1 | 	sub	fp, #12
13cac     09 13 52 F6 | 	abs	arg01, arg01 wc
13cb0     1F 20 C6 C9 |  if_b	decod	local02, #31
13cb4     00 20 06 36 |  if_ae	mov	local02, #0
13cb8     1C F2 B0 FD | 	call	#__system___float_fromuns
13cbc     10 FB 61 F5 | 	xor	result1, local02
13cc0     0C 4E 05 F1 | 	add	fp, #12
13cc4     A7 FA 61 FC | 	wrlong	result1, fp
13cc8     0C 4E 85 F1 | 	sub	fp, #12
13ccc                 | LR__1612
13ccc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13ccc     14 4E 05 F1 | 	add	fp, #20
13cd0     A7 14 02 FB | 	rdlong	arg02, fp
13cd4     14 4E 85 F1 | 	sub	fp, #20
13cd8     1D 14 0E F2 | 	cmp	arg02, #29 wz
13cdc     24 00 90 5D |  if_ne	jmp	#LR__1613
13ce0     14 4E 05 F1 | 	add	fp, #20
13ce4     A7 3C 68 FC | 	wrlong	#30, fp
13ce8     08 4E 85 F1 | 	sub	fp, #8
13cec     A7 12 02 FB | 	rdlong	arg01, fp
13cf0     0C 4E 85 F1 | 	sub	fp, #12
13cf4     E0 F1 B0 FD | 	call	#__system___float_fromuns
13cf8     0C 4E 05 F1 | 	add	fp, #12
13cfc     A7 FA 61 FC | 	wrlong	result1, fp
13d00     0C 4E 85 F1 | 	sub	fp, #12
13d04                 | LR__1613
13d04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13d04     08 4E 05 F1 | 	add	fp, #8
13d08     A7 14 02 FB | 	rdlong	arg02, fp
13d0c     08 4E 85 F1 | 	sub	fp, #8
13d10     1E 14 0E F2 | 	cmp	arg02, #30 wz
13d14     14 4E 05 A1 |  if_e	add	fp, #20
13d18     A7 1E 02 AB |  if_e	rdlong	local01, fp
13d1c     14 4E 85 A1 |  if_e	sub	fp, #20
13d20     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13d24     1C 00 90 5D |  if_ne	jmp	#LR__1614
13d28     A7 12 02 FB | 	rdlong	arg01, fp
13d2c     0C 4E 05 F1 | 	add	fp, #12
13d30     A7 14 02 FB | 	rdlong	arg02, fp
13d34     0C 4E 85 F1 | 	sub	fp, #12
13d38     84 04 B1 FD | 	call	#__system____builtin_powf
13d3c     A7 FA 61 FC | 	wrlong	result1, fp
13d40     10 00 90 FD | 	jmp	#LR__1615
13d44                 | LR__1614
13d44     A7 1A 68 FC | 	wrlong	#13, fp
13d48     08 4E 05 F1 | 	add	fp, #8
13d4c     A7 FE 69 FC | 	wrlong	#255, fp
13d50     08 4E 85 F1 | 	sub	fp, #8
13d54                 | LR__1615
13d54     A7 12 02 F6 | 	mov	arg01, fp
13d58     E0 7C BF FD | 	call	#_push
13d5c     A7 F0 03 F6 | 	mov	ptra, fp
13d60     B2 00 A0 FD | 	call	#popregs_
13d64                 | _do_power_ret
13d64     2D 00 64 FD | 	ret
13d68                 | 
13d68                 | ' 
13d68                 | ' 
13d68                 | ' sub do_eq
13d68                 | _do_eq
13d68     05 4A 05 F6 | 	mov	COUNT_, #5
13d6c     A8 00 A0 FD | 	call	#pushregs_
13d70     18 F0 07 F1 | 	add	ptra, #24
13d74     2C 7C BF FD | 	call	#_pop
13d78     FD 1E 02 F6 | 	mov	local01, result1
13d7c     FE 20 02 F6 | 	mov	local02, result2
13d80     FF 22 02 F6 | 	mov	local03, result3
13d84     0C 4E 05 F1 | 	add	fp, #12
13d88     A7 1E 62 FC | 	wrlong	local01, fp
13d8c     04 4E 05 F1 | 	add	fp, #4
13d90     A7 20 62 FC | 	wrlong	local02, fp
13d94     04 4E 05 F1 | 	add	fp, #4
13d98     A7 22 62 FC | 	wrlong	local03, fp
13d9c     14 4E 85 F1 | 	sub	fp, #20
13da0     00 7C BF FD | 	call	#_pop
13da4     FF 22 02 F6 | 	mov	local03, result3
13da8     A7 FA 61 FC | 	wrlong	result1, fp
13dac     04 4E 05 F1 | 	add	fp, #4
13db0     A7 FC 61 FC | 	wrlong	result2, fp
13db4     04 4E 05 F1 | 	add	fp, #4
13db8     A7 22 62 FC | 	wrlong	local03, fp
13dbc                 | ' t2=pop()
13dbc                 | ' t1=pop()
13dbc                 | ' 
13dbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13dbc     08 4E 85 F1 | 	sub	fp, #8
13dc0     1F 22 0E F2 | 	cmp	local03, #31 wz
13dc4     14 4E 05 A1 |  if_e	add	fp, #20
13dc8     A7 24 02 AB |  if_e	rdlong	local04, fp
13dcc     14 4E 85 A1 |  if_e	sub	fp, #20
13dd0     12 23 02 A6 |  if_e	mov	local03, local04
13dd4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13dd8     28 00 90 5D |  if_ne	jmp	#LR__1620
13ddc     00 1E 06 F6 | 	mov	local01, #0
13de0     A7 12 02 FB | 	rdlong	arg01, fp
13de4     0C 4E 05 F1 | 	add	fp, #12
13de8     A7 14 02 FB | 	rdlong	arg02, fp
13dec     0C 4E 85 F1 | 	sub	fp, #12
13df0     5C C9 B0 FD | 	call	#__system___string_cmp
13df4     00 FA 0D F2 | 	cmp	result1, #0 wz
13df8     00 1E 26 A6 |  if_e	not	local01, #0
13dfc     A7 1E 62 FC | 	wrlong	local01, fp
13e00     1C 04 90 FD | 	jmp	#LR__1633
13e04                 | LR__1620
13e04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13e04     08 4E 05 F1 | 	add	fp, #8
13e08     A7 1E 02 FB | 	rdlong	local01, fp
13e0c     08 4E 85 F1 | 	sub	fp, #8
13e10     1E 1E 0E F2 | 	cmp	local01, #30 wz
13e14     14 4E 05 A1 |  if_e	add	fp, #20
13e18     A7 24 02 AB |  if_e	rdlong	local04, fp
13e1c     14 4E 85 A1 |  if_e	sub	fp, #20
13e20     12 23 02 A6 |  if_e	mov	local03, local04
13e24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13e28     2C 00 90 5D |  if_ne	jmp	#LR__1621
13e2c     00 1E 06 F6 | 	mov	local01, #0
13e30     A7 12 02 FB | 	rdlong	arg01, fp
13e34     0C 4E 05 F1 | 	add	fp, #12
13e38     A7 14 02 FB | 	rdlong	arg02, fp
13e3c     0C 4E 85 F1 | 	sub	fp, #12
13e40     01 16 06 F6 | 	mov	arg03, #1
13e44     C8 F8 B0 FD | 	call	#__system___float_cmp
13e48     00 FA 0D F2 | 	cmp	result1, #0 wz
13e4c     00 1E 26 A6 |  if_e	not	local01, #0
13e50     A7 1E 62 FC | 	wrlong	local01, fp
13e54     C8 03 90 FD | 	jmp	#LR__1633
13e58                 | LR__1621
13e58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13e58     08 4E 05 F1 | 	add	fp, #8
13e5c     A7 1E 02 FB | 	rdlong	local01, fp
13e60     08 4E 85 F1 | 	sub	fp, #8
13e64     1E 1E 0E F2 | 	cmp	local01, #30 wz
13e68     14 4E 05 A1 |  if_e	add	fp, #20
13e6c     A7 24 02 AB |  if_e	rdlong	local04, fp
13e70     14 4E 85 A1 |  if_e	sub	fp, #20
13e74     12 23 02 A6 |  if_e	mov	local03, local04
13e78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13e7c     48 00 90 5D |  if_ne	jmp	#LR__1622
13e80     00 1E 06 F6 | 	mov	local01, #0
13e84     A7 20 02 FB | 	rdlong	local02, fp
13e88     0C 4E 05 F1 | 	add	fp, #12
13e8c     A7 12 02 FB | 	rdlong	arg01, fp
13e90     0C 4E 85 F1 | 	sub	fp, #12
13e94     09 13 52 F6 | 	abs	arg01, arg01 wc
13e98     1F 26 C6 C9 |  if_b	decod	local05, #31
13e9c     00 26 06 36 |  if_ae	mov	local05, #0
13ea0     34 F0 B0 FD | 	call	#__system___float_fromuns
13ea4     13 FB 61 F5 | 	xor	result1, local05
13ea8     FD 14 02 F6 | 	mov	arg02, result1
13eac     10 13 02 F6 | 	mov	arg01, local02
13eb0     01 16 06 F6 | 	mov	arg03, #1
13eb4     58 F8 B0 FD | 	call	#__system___float_cmp
13eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
13ebc     00 1E 26 A6 |  if_e	not	local01, #0
13ec0     A7 1E 62 FC | 	wrlong	local01, fp
13ec4     58 03 90 FD | 	jmp	#LR__1633
13ec8                 | LR__1622
13ec8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
13ec8     08 4E 05 F1 | 	add	fp, #8
13ecc     A7 1E 02 FB | 	rdlong	local01, fp
13ed0     08 4E 85 F1 | 	sub	fp, #8
13ed4     1E 1E 0E F2 | 	cmp	local01, #30 wz
13ed8     14 4E 05 A1 |  if_e	add	fp, #20
13edc     A7 24 02 AB |  if_e	rdlong	local04, fp
13ee0     14 4E 85 A1 |  if_e	sub	fp, #20
13ee4     12 23 02 A6 |  if_e	mov	local03, local04
13ee8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13eec     38 00 90 5D |  if_ne	jmp	#LR__1623
13ef0     00 1E 06 F6 | 	mov	local01, #0
13ef4     A7 20 02 FB | 	rdlong	local02, fp
13ef8     0C 4E 05 F1 | 	add	fp, #12
13efc     A7 12 02 FB | 	rdlong	arg01, fp
13f00     0C 4E 85 F1 | 	sub	fp, #12
13f04     D0 EF B0 FD | 	call	#__system___float_fromuns
13f08     FD 14 02 F6 | 	mov	arg02, result1
13f0c     10 13 02 F6 | 	mov	arg01, local02
13f10     01 16 06 F6 | 	mov	arg03, #1
13f14     F8 F7 B0 FD | 	call	#__system___float_cmp
13f18     00 FA 0D F2 | 	cmp	result1, #0 wz
13f1c     00 1E 26 A6 |  if_e	not	local01, #0
13f20     A7 1E 62 FC | 	wrlong	local01, fp
13f24     F8 02 90 FD | 	jmp	#LR__1633
13f28                 | LR__1623
13f28                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
13f28     08 4E 05 F1 | 	add	fp, #8
13f2c     A7 1E 02 FB | 	rdlong	local01, fp
13f30     08 4E 85 F1 | 	sub	fp, #8
13f34     1C 1E 0E F2 | 	cmp	local01, #28 wz
13f38     14 4E 05 A1 |  if_e	add	fp, #20
13f3c     A7 24 02 AB |  if_e	rdlong	local04, fp
13f40     14 4E 85 A1 |  if_e	sub	fp, #20
13f44     12 23 02 A6 |  if_e	mov	local03, local04
13f48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13f4c     44 00 90 5D |  if_ne	jmp	#LR__1624
13f50     00 1E 06 F6 | 	mov	local01, #0
13f54     A7 12 02 FB | 	rdlong	arg01, fp
13f58     09 13 52 F6 | 	abs	arg01, arg01 wc
13f5c     1F 26 C6 C9 |  if_b	decod	local05, #31
13f60     00 26 06 36 |  if_ae	mov	local05, #0
13f64     70 EF B0 FD | 	call	#__system___float_fromuns
13f68     13 FB 61 F5 | 	xor	result1, local05
13f6c     FD 12 02 F6 | 	mov	arg01, result1
13f70     0C 4E 05 F1 | 	add	fp, #12
13f74     A7 14 02 FB | 	rdlong	arg02, fp
13f78     0C 4E 85 F1 | 	sub	fp, #12
13f7c     01 16 06 F6 | 	mov	arg03, #1
13f80     8C F7 B0 FD | 	call	#__system___float_cmp
13f84     00 FA 0D F2 | 	cmp	result1, #0 wz
13f88     00 1E 26 A6 |  if_e	not	local01, #0
13f8c     A7 1E 62 FC | 	wrlong	local01, fp
13f90     8C 02 90 FD | 	jmp	#LR__1633
13f94                 | LR__1624
13f94                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
13f94     08 4E 05 F1 | 	add	fp, #8
13f98     A7 1E 02 FB | 	rdlong	local01, fp
13f9c     08 4E 85 F1 | 	sub	fp, #8
13fa0     1C 1E 0E F2 | 	cmp	local01, #28 wz
13fa4     14 4E 05 A1 |  if_e	add	fp, #20
13fa8     A7 24 02 AB |  if_e	rdlong	local04, fp
13fac     14 4E 85 A1 |  if_e	sub	fp, #20
13fb0     12 23 02 A6 |  if_e	mov	local03, local04
13fb4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13fb8     24 00 90 5D |  if_ne	jmp	#LR__1625
13fbc     00 1E 06 F6 | 	mov	local01, #0
13fc0     A7 20 02 FB | 	rdlong	local02, fp
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 22 02 FB | 	rdlong	local03, fp
13fcc     0C 4E 85 F1 | 	sub	fp, #12
13fd0     11 21 0A F2 | 	cmp	local02, local03 wz
13fd4     01 1E 66 A6 |  if_e	neg	local01, #1
13fd8     A7 1E 62 FC | 	wrlong	local01, fp
13fdc     40 02 90 FD | 	jmp	#LR__1633
13fe0                 | LR__1625
13fe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
13fe0     08 4E 05 F1 | 	add	fp, #8
13fe4     A7 1E 02 FB | 	rdlong	local01, fp
13fe8     08 4E 85 F1 | 	sub	fp, #8
13fec     1C 1E 0E F2 | 	cmp	local01, #28 wz
13ff0     14 4E 05 A1 |  if_e	add	fp, #20
13ff4     A7 24 02 AB |  if_e	rdlong	local04, fp
13ff8     14 4E 85 A1 |  if_e	sub	fp, #20
13ffc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14000     24 00 90 5D |  if_ne	jmp	#LR__1626
14004     00 1E 06 F6 | 	mov	local01, #0
14008     A7 20 02 FB | 	rdlong	local02, fp
1400c     0C 4E 05 F1 | 	add	fp, #12
14010     A7 22 02 FB | 	rdlong	local03, fp
14014     0C 4E 85 F1 | 	sub	fp, #12
14018     11 21 0A F2 | 	cmp	local02, local03 wz
1401c     01 1E 66 A6 |  if_e	neg	local01, #1
14020     A7 1E 62 FC | 	wrlong	local01, fp
14024     F8 01 90 FD | 	jmp	#LR__1633
14028                 | LR__1626
14028                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
14028     08 4E 05 F1 | 	add	fp, #8
1402c     A7 1E 02 FB | 	rdlong	local01, fp
14030     08 4E 85 F1 | 	sub	fp, #8
14034     1D 1E 0E F2 | 	cmp	local01, #29 wz
14038     14 4E 05 A1 |  if_e	add	fp, #20
1403c     A7 22 02 AB |  if_e	rdlong	local03, fp
14040     14 4E 85 A1 |  if_e	sub	fp, #20
14044     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14048     34 00 90 5D |  if_ne	jmp	#LR__1627
1404c     00 1E 06 F6 | 	mov	local01, #0
14050     A7 12 02 FB | 	rdlong	arg01, fp
14054     80 EE B0 FD | 	call	#__system___float_fromuns
14058     FD 12 02 F6 | 	mov	arg01, result1
1405c     0C 4E 05 F1 | 	add	fp, #12
14060     A7 14 02 FB | 	rdlong	arg02, fp
14064     0C 4E 85 F1 | 	sub	fp, #12
14068     01 16 06 F6 | 	mov	arg03, #1
1406c     A0 F6 B0 FD | 	call	#__system___float_cmp
14070     00 FA 0D F2 | 	cmp	result1, #0 wz
14074     00 1E 26 A6 |  if_e	not	local01, #0
14078     A7 1E 62 FC | 	wrlong	local01, fp
1407c     A0 01 90 FD | 	jmp	#LR__1633
14080                 | LR__1627
14080                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
14080     08 4E 05 F1 | 	add	fp, #8
14084     A7 1E 02 FB | 	rdlong	local01, fp
14088     08 4E 85 F1 | 	sub	fp, #8
1408c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14090     14 4E 05 A1 |  if_e	add	fp, #20
14094     A7 22 02 AB |  if_e	rdlong	local03, fp
14098     14 4E 85 A1 |  if_e	sub	fp, #20
1409c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
140a0     24 00 90 5D |  if_ne	jmp	#LR__1628
140a4     00 1E 06 F6 | 	mov	local01, #0
140a8     A7 20 02 FB | 	rdlong	local02, fp
140ac     0C 4E 05 F1 | 	add	fp, #12
140b0     A7 22 02 FB | 	rdlong	local03, fp
140b4     0C 4E 85 F1 | 	sub	fp, #12
140b8     11 21 0A F2 | 	cmp	local02, local03 wz
140bc     01 1E 66 A6 |  if_e	neg	local01, #1
140c0     A7 1E 62 FC | 	wrlong	local01, fp
140c4     58 01 90 FD | 	jmp	#LR__1633
140c8                 | LR__1628
140c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
140c8     08 4E 05 F1 | 	add	fp, #8
140cc     A7 1E 02 FB | 	rdlong	local01, fp
140d0     08 4E 85 F1 | 	sub	fp, #8
140d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
140d8     14 4E 05 A1 |  if_e	add	fp, #20
140dc     A7 22 02 AB |  if_e	rdlong	local03, fp
140e0     14 4E 85 A1 |  if_e	sub	fp, #20
140e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
140e8     24 00 90 5D |  if_ne	jmp	#LR__1629
140ec     00 1E 06 F6 | 	mov	local01, #0
140f0     A7 20 02 FB | 	rdlong	local02, fp
140f4     0C 4E 05 F1 | 	add	fp, #12
140f8     A7 22 02 FB | 	rdlong	local03, fp
140fc     0C 4E 85 F1 | 	sub	fp, #12
14100     11 21 0A F2 | 	cmp	local02, local03 wz
14104     01 1E 66 A6 |  if_e	neg	local01, #1
14108     A7 1E 62 FC | 	wrlong	local01, fp
1410c     10 01 90 FD | 	jmp	#LR__1633
14110                 | LR__1629
14110                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
14110     08 4E 05 F1 | 	add	fp, #8
14114     A7 1E 02 FB | 	rdlong	local01, fp
14118     08 4E 85 F1 | 	sub	fp, #8
1411c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14120     14 4E 05 A1 |  if_e	add	fp, #20
14124     A7 22 02 AB |  if_e	rdlong	local03, fp
14128     14 4E 85 A1 |  if_e	sub	fp, #20
1412c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14130     30 00 90 5D |  if_ne	jmp	#LR__1630
14134     00 1E 06 F6 | 	mov	local01, #0
14138     A7 12 02 FB | 	rdlong	arg01, fp
1413c     04 D1 BF FD | 	call	#_convertstring
14140     FD 12 02 F6 | 	mov	arg01, result1
14144     0C 4E 05 F1 | 	add	fp, #12
14148     A7 14 02 FB | 	rdlong	arg02, fp
1414c     0C 4E 85 F1 | 	sub	fp, #12
14150     FC C5 B0 FD | 	call	#__system___string_cmp
14154     00 FA 0D F2 | 	cmp	result1, #0 wz
14158     00 1E 26 A6 |  if_e	not	local01, #0
1415c     A7 1E 62 FC | 	wrlong	local01, fp
14160     BC 00 90 FD | 	jmp	#LR__1633
14164                 | LR__1630
14164                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
14164     08 4E 05 F1 | 	add	fp, #8
14168     A7 1E 02 FB | 	rdlong	local01, fp
1416c     08 4E 85 F1 | 	sub	fp, #8
14170     1F 1E 0E F2 | 	cmp	local01, #31 wz
14174     14 4E 05 A1 |  if_e	add	fp, #20
14178     A7 22 02 AB |  if_e	rdlong	local03, fp
1417c     14 4E 85 A1 |  if_e	sub	fp, #20
14180     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14184     34 00 90 5D |  if_ne	jmp	#LR__1631
14188     00 1E 06 F6 | 	mov	local01, #0
1418c     A7 20 02 FB | 	rdlong	local02, fp
14190     0C 4E 05 F1 | 	add	fp, #12
14194     A7 12 02 FB | 	rdlong	arg01, fp
14198     0C 4E 85 F1 | 	sub	fp, #12
1419c     A4 D0 BF FD | 	call	#_convertstring
141a0     FD 14 02 F6 | 	mov	arg02, result1
141a4     10 13 02 F6 | 	mov	arg01, local02
141a8     A4 C5 B0 FD | 	call	#__system___string_cmp
141ac     00 FA 0D F2 | 	cmp	result1, #0 wz
141b0     00 1E 26 A6 |  if_e	not	local01, #0
141b4     A7 1E 62 FC | 	wrlong	local01, fp
141b8     64 00 90 FD | 	jmp	#LR__1633
141bc                 | LR__1631
141bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
141bc     08 4E 05 F1 | 	add	fp, #8
141c0     A7 1E 02 FB | 	rdlong	local01, fp
141c4     08 4E 85 F1 | 	sub	fp, #8
141c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
141cc     14 4E 05 A1 |  if_e	add	fp, #20
141d0     A7 22 02 AB |  if_e	rdlong	local03, fp
141d4     14 4E 85 A1 |  if_e	sub	fp, #20
141d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
141dc     3C 00 90 5D |  if_ne	jmp	#LR__1632
141e0     00 1E 06 F6 | 	mov	local01, #0
141e4     A7 12 02 FB | 	rdlong	arg01, fp
141e8     58 D0 BF FD | 	call	#_convertstring
141ec     FD 20 02 F6 | 	mov	local02, result1
141f0     0C 4E 05 F1 | 	add	fp, #12
141f4     A7 12 02 FB | 	rdlong	arg01, fp
141f8     0C 4E 85 F1 | 	sub	fp, #12
141fc     44 D0 BF FD | 	call	#_convertstring
14200     FD 14 02 F6 | 	mov	arg02, result1
14204     10 13 02 F6 | 	mov	arg01, local02
14208     44 C5 B0 FD | 	call	#__system___string_cmp
1420c     00 FA 0D F2 | 	cmp	result1, #0 wz
14210     00 1E 26 A6 |  if_e	not	local01, #0
14214     A7 1E 62 FC | 	wrlong	local01, fp
14218     04 00 90 FD | 	jmp	#LR__1633
1421c                 | LR__1632
1421c     A7 00 68 FC | 	wrlong	#0, fp
14220                 | LR__1633
14220     08 4E 05 F1 | 	add	fp, #8
14224     A7 38 68 FC | 	wrlong	#28, fp
14228     08 4E 85 F1 | 	sub	fp, #8
1422c     A7 12 02 F6 | 	mov	arg01, fp
14230     08 78 BF FD | 	call	#_push
14234     A7 F0 03 F6 | 	mov	ptra, fp
14238     B2 00 A0 FD | 	call	#popregs_
1423c                 | _do_eq_ret
1423c     2D 00 64 FD | 	ret
14240                 | 
14240                 | ' 
14240                 | ' sub do_gt
14240                 | _do_gt
14240     05 4A 05 F6 | 	mov	COUNT_, #5
14244     A8 00 A0 FD | 	call	#pushregs_
14248     18 F0 07 F1 | 	add	ptra, #24
1424c     54 77 BF FD | 	call	#_pop
14250     FD 1E 02 F6 | 	mov	local01, result1
14254     FE 20 02 F6 | 	mov	local02, result2
14258     FF 22 02 F6 | 	mov	local03, result3
1425c     0C 4E 05 F1 | 	add	fp, #12
14260     A7 1E 62 FC | 	wrlong	local01, fp
14264     04 4E 05 F1 | 	add	fp, #4
14268     A7 20 62 FC | 	wrlong	local02, fp
1426c     04 4E 05 F1 | 	add	fp, #4
14270     A7 22 62 FC | 	wrlong	local03, fp
14274     14 4E 85 F1 | 	sub	fp, #20
14278     28 77 BF FD | 	call	#_pop
1427c     FF 22 02 F6 | 	mov	local03, result3
14280     A7 FA 61 FC | 	wrlong	result1, fp
14284     04 4E 05 F1 | 	add	fp, #4
14288     A7 FC 61 FC | 	wrlong	result2, fp
1428c     04 4E 05 F1 | 	add	fp, #4
14290     A7 22 62 FC | 	wrlong	local03, fp
14294                 | ' t2=pop()
14294                 | ' t1=pop()
14294                 | ' 
14294                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
14294     08 4E 85 F1 | 	sub	fp, #8
14298     1F 22 0E F2 | 	cmp	local03, #31 wz
1429c     14 4E 05 A1 |  if_e	add	fp, #20
142a0     A7 24 02 AB |  if_e	rdlong	local04, fp
142a4     14 4E 85 A1 |  if_e	sub	fp, #20
142a8     12 23 02 A6 |  if_e	mov	local03, local04
142ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
142b0     28 00 90 5D |  if_ne	jmp	#LR__1640
142b4     00 1E 06 F6 | 	mov	local01, #0
142b8     A7 12 02 FB | 	rdlong	arg01, fp
142bc     0C 4E 05 F1 | 	add	fp, #12
142c0     A7 14 02 FB | 	rdlong	arg02, fp
142c4     0C 4E 85 F1 | 	sub	fp, #12
142c8     84 C4 B0 FD | 	call	#__system___string_cmp
142cc     01 FA 55 F2 | 	cmps	result1, #1 wc
142d0     00 1E 26 36 |  if_ae	not	local01, #0
142d4     A7 1E 62 FC | 	wrlong	local01, fp
142d8     1C 04 90 FD | 	jmp	#LR__1653
142dc                 | LR__1640
142dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
142dc     08 4E 05 F1 | 	add	fp, #8
142e0     A7 1E 02 FB | 	rdlong	local01, fp
142e4     08 4E 85 F1 | 	sub	fp, #8
142e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
142ec     14 4E 05 A1 |  if_e	add	fp, #20
142f0     A7 24 02 AB |  if_e	rdlong	local04, fp
142f4     14 4E 85 A1 |  if_e	sub	fp, #20
142f8     12 23 02 A6 |  if_e	mov	local03, local04
142fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14300     2C 00 90 5D |  if_ne	jmp	#LR__1641
14304     00 1E 06 F6 | 	mov	local01, #0
14308     A7 12 02 FB | 	rdlong	arg01, fp
1430c     0C 4E 05 F1 | 	add	fp, #12
14310     A7 14 02 FB | 	rdlong	arg02, fp
14314     0C 4E 85 F1 | 	sub	fp, #12
14318     01 16 66 F6 | 	neg	arg03, #1
1431c     F0 F3 B0 FD | 	call	#__system___float_cmp
14320     01 FA 55 F2 | 	cmps	result1, #1 wc
14324     00 1E 26 36 |  if_ae	not	local01, #0
14328     A7 1E 62 FC | 	wrlong	local01, fp
1432c     C8 03 90 FD | 	jmp	#LR__1653
14330                 | LR__1641
14330                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
14330     08 4E 05 F1 | 	add	fp, #8
14334     A7 1E 02 FB | 	rdlong	local01, fp
14338     08 4E 85 F1 | 	sub	fp, #8
1433c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14340     14 4E 05 A1 |  if_e	add	fp, #20
14344     A7 24 02 AB |  if_e	rdlong	local04, fp
14348     14 4E 85 A1 |  if_e	sub	fp, #20
1434c     12 23 02 A6 |  if_e	mov	local03, local04
14350     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14354     48 00 90 5D |  if_ne	jmp	#LR__1642
14358     00 1E 06 F6 | 	mov	local01, #0
1435c     A7 20 02 FB | 	rdlong	local02, fp
14360     0C 4E 05 F1 | 	add	fp, #12
14364     A7 12 02 FB | 	rdlong	arg01, fp
14368     0C 4E 85 F1 | 	sub	fp, #12
1436c     09 13 52 F6 | 	abs	arg01, arg01 wc
14370     1F 26 C6 C9 |  if_b	decod	local05, #31
14374     00 26 06 36 |  if_ae	mov	local05, #0
14378     5C EB B0 FD | 	call	#__system___float_fromuns
1437c     13 FB 61 F5 | 	xor	result1, local05
14380     FD 14 02 F6 | 	mov	arg02, result1
14384     10 13 02 F6 | 	mov	arg01, local02
14388     01 16 66 F6 | 	neg	arg03, #1
1438c     80 F3 B0 FD | 	call	#__system___float_cmp
14390     01 FA 55 F2 | 	cmps	result1, #1 wc
14394     00 1E 26 36 |  if_ae	not	local01, #0
14398     A7 1E 62 FC | 	wrlong	local01, fp
1439c     58 03 90 FD | 	jmp	#LR__1653
143a0                 | LR__1642
143a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
143a0     08 4E 05 F1 | 	add	fp, #8
143a4     A7 1E 02 FB | 	rdlong	local01, fp
143a8     08 4E 85 F1 | 	sub	fp, #8
143ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
143b0     14 4E 05 A1 |  if_e	add	fp, #20
143b4     A7 24 02 AB |  if_e	rdlong	local04, fp
143b8     14 4E 85 A1 |  if_e	sub	fp, #20
143bc     12 23 02 A6 |  if_e	mov	local03, local04
143c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
143c4     38 00 90 5D |  if_ne	jmp	#LR__1643
143c8     00 1E 06 F6 | 	mov	local01, #0
143cc     A7 20 02 FB | 	rdlong	local02, fp
143d0     0C 4E 05 F1 | 	add	fp, #12
143d4     A7 12 02 FB | 	rdlong	arg01, fp
143d8     0C 4E 85 F1 | 	sub	fp, #12
143dc     F8 EA B0 FD | 	call	#__system___float_fromuns
143e0     FD 14 02 F6 | 	mov	arg02, result1
143e4     10 13 02 F6 | 	mov	arg01, local02
143e8     01 16 66 F6 | 	neg	arg03, #1
143ec     20 F3 B0 FD | 	call	#__system___float_cmp
143f0     01 FA 55 F2 | 	cmps	result1, #1 wc
143f4     00 1E 26 36 |  if_ae	not	local01, #0
143f8     A7 1E 62 FC | 	wrlong	local01, fp
143fc     F8 02 90 FD | 	jmp	#LR__1653
14400                 | LR__1643
14400                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
14400     08 4E 05 F1 | 	add	fp, #8
14404     A7 1E 02 FB | 	rdlong	local01, fp
14408     08 4E 85 F1 | 	sub	fp, #8
1440c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14410     14 4E 05 A1 |  if_e	add	fp, #20
14414     A7 24 02 AB |  if_e	rdlong	local04, fp
14418     14 4E 85 A1 |  if_e	sub	fp, #20
1441c     12 23 02 A6 |  if_e	mov	local03, local04
14420     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14424     44 00 90 5D |  if_ne	jmp	#LR__1644
14428     00 1E 06 F6 | 	mov	local01, #0
1442c     A7 12 02 FB | 	rdlong	arg01, fp
14430     09 13 52 F6 | 	abs	arg01, arg01 wc
14434     1F 26 C6 C9 |  if_b	decod	local05, #31
14438     00 26 06 36 |  if_ae	mov	local05, #0
1443c     98 EA B0 FD | 	call	#__system___float_fromuns
14440     13 FB 61 F5 | 	xor	result1, local05
14444     FD 12 02 F6 | 	mov	arg01, result1
14448     0C 4E 05 F1 | 	add	fp, #12
1444c     A7 14 02 FB | 	rdlong	arg02, fp
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     01 16 66 F6 | 	neg	arg03, #1
14458     B4 F2 B0 FD | 	call	#__system___float_cmp
1445c     01 FA 55 F2 | 	cmps	result1, #1 wc
14460     00 1E 26 36 |  if_ae	not	local01, #0
14464     A7 1E 62 FC | 	wrlong	local01, fp
14468     8C 02 90 FD | 	jmp	#LR__1653
1446c                 | LR__1644
1446c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1446c     08 4E 05 F1 | 	add	fp, #8
14470     A7 1E 02 FB | 	rdlong	local01, fp
14474     08 4E 85 F1 | 	sub	fp, #8
14478     1C 1E 0E F2 | 	cmp	local01, #28 wz
1447c     14 4E 05 A1 |  if_e	add	fp, #20
14480     A7 24 02 AB |  if_e	rdlong	local04, fp
14484     14 4E 85 A1 |  if_e	sub	fp, #20
14488     12 23 02 A6 |  if_e	mov	local03, local04
1448c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14490     24 00 90 5D |  if_ne	jmp	#LR__1645
14494     00 1E 06 F6 | 	mov	local01, #0
14498     A7 20 02 FB | 	rdlong	local02, fp
1449c     0C 4E 05 F1 | 	add	fp, #12
144a0     A7 22 02 FB | 	rdlong	local03, fp
144a4     0C 4E 85 F1 | 	sub	fp, #12
144a8     11 21 5A F2 | 	cmps	local02, local03 wcz
144ac     01 1E 66 16 |  if_a	neg	local01, #1
144b0     A7 1E 62 FC | 	wrlong	local01, fp
144b4     40 02 90 FD | 	jmp	#LR__1653
144b8                 | LR__1645
144b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
144b8     08 4E 05 F1 | 	add	fp, #8
144bc     A7 1E 02 FB | 	rdlong	local01, fp
144c0     08 4E 85 F1 | 	sub	fp, #8
144c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
144c8     14 4E 05 A1 |  if_e	add	fp, #20
144cc     A7 24 02 AB |  if_e	rdlong	local04, fp
144d0     14 4E 85 A1 |  if_e	sub	fp, #20
144d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
144d8     24 00 90 5D |  if_ne	jmp	#LR__1646
144dc     00 1E 06 F6 | 	mov	local01, #0
144e0     A7 20 02 FB | 	rdlong	local02, fp
144e4     0C 4E 05 F1 | 	add	fp, #12
144e8     A7 22 02 FB | 	rdlong	local03, fp
144ec     0C 4E 85 F1 | 	sub	fp, #12
144f0     11 21 5A F2 | 	cmps	local02, local03 wcz
144f4     01 1E 66 16 |  if_a	neg	local01, #1
144f8     A7 1E 62 FC | 	wrlong	local01, fp
144fc     F8 01 90 FD | 	jmp	#LR__1653
14500                 | LR__1646
14500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
14500     08 4E 05 F1 | 	add	fp, #8
14504     A7 1E 02 FB | 	rdlong	local01, fp
14508     08 4E 85 F1 | 	sub	fp, #8
1450c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14510     14 4E 05 A1 |  if_e	add	fp, #20
14514     A7 22 02 AB |  if_e	rdlong	local03, fp
14518     14 4E 85 A1 |  if_e	sub	fp, #20
1451c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14520     34 00 90 5D |  if_ne	jmp	#LR__1647
14524     00 1E 06 F6 | 	mov	local01, #0
14528     A7 12 02 FB | 	rdlong	arg01, fp
1452c     A8 E9 B0 FD | 	call	#__system___float_fromuns
14530     FD 12 02 F6 | 	mov	arg01, result1
14534     0C 4E 05 F1 | 	add	fp, #12
14538     A7 14 02 FB | 	rdlong	arg02, fp
1453c     0C 4E 85 F1 | 	sub	fp, #12
14540     01 16 66 F6 | 	neg	arg03, #1
14544     C8 F1 B0 FD | 	call	#__system___float_cmp
14548     01 FA 55 F2 | 	cmps	result1, #1 wc
1454c     00 1E 26 36 |  if_ae	not	local01, #0
14550     A7 1E 62 FC | 	wrlong	local01, fp
14554     A0 01 90 FD | 	jmp	#LR__1653
14558                 | LR__1647
14558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
14558     08 4E 05 F1 | 	add	fp, #8
1455c     A7 1E 02 FB | 	rdlong	local01, fp
14560     08 4E 85 F1 | 	sub	fp, #8
14564     1D 1E 0E F2 | 	cmp	local01, #29 wz
14568     14 4E 05 A1 |  if_e	add	fp, #20
1456c     A7 22 02 AB |  if_e	rdlong	local03, fp
14570     14 4E 85 A1 |  if_e	sub	fp, #20
14574     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14578     24 00 90 5D |  if_ne	jmp	#LR__1648
1457c     00 1E 06 F6 | 	mov	local01, #0
14580     A7 20 02 FB | 	rdlong	local02, fp
14584     0C 4E 05 F1 | 	add	fp, #12
14588     A7 22 02 FB | 	rdlong	local03, fp
1458c     0C 4E 85 F1 | 	sub	fp, #12
14590     11 21 5A F2 | 	cmps	local02, local03 wcz
14594     01 1E 66 16 |  if_a	neg	local01, #1
14598     A7 1E 62 FC | 	wrlong	local01, fp
1459c     58 01 90 FD | 	jmp	#LR__1653
145a0                 | LR__1648
145a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
145a0     08 4E 05 F1 | 	add	fp, #8
145a4     A7 1E 02 FB | 	rdlong	local01, fp
145a8     08 4E 85 F1 | 	sub	fp, #8
145ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
145b0     14 4E 05 A1 |  if_e	add	fp, #20
145b4     A7 22 02 AB |  if_e	rdlong	local03, fp
145b8     14 4E 85 A1 |  if_e	sub	fp, #20
145bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
145c0     24 00 90 5D |  if_ne	jmp	#LR__1649
145c4     00 1E 06 F6 | 	mov	local01, #0
145c8     A7 20 02 FB | 	rdlong	local02, fp
145cc     0C 4E 05 F1 | 	add	fp, #12
145d0     A7 22 02 FB | 	rdlong	local03, fp
145d4     0C 4E 85 F1 | 	sub	fp, #12
145d8     11 21 1A F2 | 	cmp	local02, local03 wcz
145dc     01 1E 66 16 |  if_a	neg	local01, #1
145e0     A7 1E 62 FC | 	wrlong	local01, fp
145e4     10 01 90 FD | 	jmp	#LR__1653
145e8                 | LR__1649
145e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
145e8     08 4E 05 F1 | 	add	fp, #8
145ec     A7 1E 02 FB | 	rdlong	local01, fp
145f0     08 4E 85 F1 | 	sub	fp, #8
145f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
145f8     14 4E 05 A1 |  if_e	add	fp, #20
145fc     A7 22 02 AB |  if_e	rdlong	local03, fp
14600     14 4E 85 A1 |  if_e	sub	fp, #20
14604     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14608     30 00 90 5D |  if_ne	jmp	#LR__1650
1460c     00 1E 06 F6 | 	mov	local01, #0
14610     A7 12 02 FB | 	rdlong	arg01, fp
14614     2C CC BF FD | 	call	#_convertstring
14618     FD 12 02 F6 | 	mov	arg01, result1
1461c     0C 4E 05 F1 | 	add	fp, #12
14620     A7 14 02 FB | 	rdlong	arg02, fp
14624     0C 4E 85 F1 | 	sub	fp, #12
14628     24 C1 B0 FD | 	call	#__system___string_cmp
1462c     01 FA 55 F2 | 	cmps	result1, #1 wc
14630     00 1E 26 36 |  if_ae	not	local01, #0
14634     A7 1E 62 FC | 	wrlong	local01, fp
14638     BC 00 90 FD | 	jmp	#LR__1653
1463c                 | LR__1650
1463c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1463c     08 4E 05 F1 | 	add	fp, #8
14640     A7 1E 02 FB | 	rdlong	local01, fp
14644     08 4E 85 F1 | 	sub	fp, #8
14648     1F 1E 0E F2 | 	cmp	local01, #31 wz
1464c     14 4E 05 A1 |  if_e	add	fp, #20
14650     A7 22 02 AB |  if_e	rdlong	local03, fp
14654     14 4E 85 A1 |  if_e	sub	fp, #20
14658     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1465c     34 00 90 5D |  if_ne	jmp	#LR__1651
14660     00 1E 06 F6 | 	mov	local01, #0
14664     A7 20 02 FB | 	rdlong	local02, fp
14668     0C 4E 05 F1 | 	add	fp, #12
1466c     A7 12 02 FB | 	rdlong	arg01, fp
14670     0C 4E 85 F1 | 	sub	fp, #12
14674     CC CB BF FD | 	call	#_convertstring
14678     FD 14 02 F6 | 	mov	arg02, result1
1467c     10 13 02 F6 | 	mov	arg01, local02
14680     CC C0 B0 FD | 	call	#__system___string_cmp
14684     01 FA 55 F2 | 	cmps	result1, #1 wc
14688     00 1E 26 36 |  if_ae	not	local01, #0
1468c     A7 1E 62 FC | 	wrlong	local01, fp
14690     64 00 90 FD | 	jmp	#LR__1653
14694                 | LR__1651
14694                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
14694     08 4E 05 F1 | 	add	fp, #8
14698     A7 1E 02 FB | 	rdlong	local01, fp
1469c     08 4E 85 F1 | 	sub	fp, #8
146a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
146a4     14 4E 05 A1 |  if_e	add	fp, #20
146a8     A7 22 02 AB |  if_e	rdlong	local03, fp
146ac     14 4E 85 A1 |  if_e	sub	fp, #20
146b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
146b4     3C 00 90 5D |  if_ne	jmp	#LR__1652
146b8     00 1E 06 F6 | 	mov	local01, #0
146bc     A7 12 02 FB | 	rdlong	arg01, fp
146c0     80 CB BF FD | 	call	#_convertstring
146c4     FD 20 02 F6 | 	mov	local02, result1
146c8     0C 4E 05 F1 | 	add	fp, #12
146cc     A7 12 02 FB | 	rdlong	arg01, fp
146d0     0C 4E 85 F1 | 	sub	fp, #12
146d4     6C CB BF FD | 	call	#_convertstring
146d8     FD 14 02 F6 | 	mov	arg02, result1
146dc     10 13 02 F6 | 	mov	arg01, local02
146e0     6C C0 B0 FD | 	call	#__system___string_cmp
146e4     01 FA 55 F2 | 	cmps	result1, #1 wc
146e8     00 1E 26 36 |  if_ae	not	local01, #0
146ec     A7 1E 62 FC | 	wrlong	local01, fp
146f0     04 00 90 FD | 	jmp	#LR__1653
146f4                 | LR__1652
146f4     A7 00 68 FC | 	wrlong	#0, fp
146f8                 | LR__1653
146f8     08 4E 05 F1 | 	add	fp, #8
146fc     A7 38 68 FC | 	wrlong	#28, fp
14700     08 4E 85 F1 | 	sub	fp, #8
14704     A7 12 02 F6 | 	mov	arg01, fp
14708     30 73 BF FD | 	call	#_push
1470c     A7 F0 03 F6 | 	mov	ptra, fp
14710     B2 00 A0 FD | 	call	#popregs_
14714                 | _do_gt_ret
14714     2D 00 64 FD | 	ret
14718                 | 
14718                 | ' 
14718                 | ' sub do_lt
14718                 | _do_lt
14718     05 4A 05 F6 | 	mov	COUNT_, #5
1471c     A8 00 A0 FD | 	call	#pushregs_
14720     18 F0 07 F1 | 	add	ptra, #24
14724     7C 72 BF FD | 	call	#_pop
14728     FD 1E 02 F6 | 	mov	local01, result1
1472c     FE 20 02 F6 | 	mov	local02, result2
14730     FF 22 02 F6 | 	mov	local03, result3
14734     0C 4E 05 F1 | 	add	fp, #12
14738     A7 1E 62 FC | 	wrlong	local01, fp
1473c     04 4E 05 F1 | 	add	fp, #4
14740     A7 20 62 FC | 	wrlong	local02, fp
14744     04 4E 05 F1 | 	add	fp, #4
14748     A7 22 62 FC | 	wrlong	local03, fp
1474c     14 4E 85 F1 | 	sub	fp, #20
14750     50 72 BF FD | 	call	#_pop
14754     FF 22 02 F6 | 	mov	local03, result3
14758     A7 FA 61 FC | 	wrlong	result1, fp
1475c     04 4E 05 F1 | 	add	fp, #4
14760     A7 FC 61 FC | 	wrlong	result2, fp
14764     04 4E 05 F1 | 	add	fp, #4
14768     A7 22 62 FC | 	wrlong	local03, fp
1476c                 | ' t2=pop()
1476c                 | ' t1=pop()
1476c                 | ' 
1476c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1476c     08 4E 85 F1 | 	sub	fp, #8
14770     1F 22 0E F2 | 	cmp	local03, #31 wz
14774     14 4E 05 A1 |  if_e	add	fp, #20
14778     A7 24 02 AB |  if_e	rdlong	local04, fp
1477c     14 4E 85 A1 |  if_e	sub	fp, #20
14780     12 23 02 A6 |  if_e	mov	local03, local04
14784     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14788     28 00 90 5D |  if_ne	jmp	#LR__1660
1478c     00 1E 06 F6 | 	mov	local01, #0
14790     A7 12 02 FB | 	rdlong	arg01, fp
14794     0C 4E 05 F1 | 	add	fp, #12
14798     A7 14 02 FB | 	rdlong	arg02, fp
1479c     0C 4E 85 F1 | 	sub	fp, #12
147a0     AC BF B0 FD | 	call	#__system___string_cmp
147a4     00 FA 55 F2 | 	cmps	result1, #0 wc
147a8     00 1E 26 C6 |  if_b	not	local01, #0
147ac     A7 1E 62 FC | 	wrlong	local01, fp
147b0     0C 04 90 FD | 	jmp	#LR__1673
147b4                 | LR__1660
147b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
147b4     08 4E 05 F1 | 	add	fp, #8
147b8     A7 1E 02 FB | 	rdlong	local01, fp
147bc     08 4E 85 F1 | 	sub	fp, #8
147c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
147c4     14 4E 05 A1 |  if_e	add	fp, #20
147c8     A7 24 02 AB |  if_e	rdlong	local04, fp
147cc     14 4E 85 A1 |  if_e	sub	fp, #20
147d0     12 23 02 A6 |  if_e	mov	local03, local04
147d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
147d8     2C 00 90 5D |  if_ne	jmp	#LR__1661
147dc     00 1E 06 F6 | 	mov	local01, #0
147e0     A7 12 02 FB | 	rdlong	arg01, fp
147e4     0C 4E 05 F1 | 	add	fp, #12
147e8     A7 14 02 FB | 	rdlong	arg02, fp
147ec     0C 4E 85 F1 | 	sub	fp, #12
147f0     01 16 06 F6 | 	mov	arg03, #1
147f4     18 EF B0 FD | 	call	#__system___float_cmp
147f8     00 FA 55 F2 | 	cmps	result1, #0 wc
147fc     00 1E 26 C6 |  if_b	not	local01, #0
14800     A7 1E 62 FC | 	wrlong	local01, fp
14804     B8 03 90 FD | 	jmp	#LR__1673
14808                 | LR__1661
14808                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14808     08 4E 05 F1 | 	add	fp, #8
1480c     A7 1E 02 FB | 	rdlong	local01, fp
14810     08 4E 85 F1 | 	sub	fp, #8
14814     1E 1E 0E F2 | 	cmp	local01, #30 wz
14818     14 4E 05 A1 |  if_e	add	fp, #20
1481c     A7 24 02 AB |  if_e	rdlong	local04, fp
14820     14 4E 85 A1 |  if_e	sub	fp, #20
14824     12 23 02 A6 |  if_e	mov	local03, local04
14828     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1482c     48 00 90 5D |  if_ne	jmp	#LR__1662
14830     00 1E 06 F6 | 	mov	local01, #0
14834     A7 20 02 FB | 	rdlong	local02, fp
14838     0C 4E 05 F1 | 	add	fp, #12
1483c     A7 12 02 FB | 	rdlong	arg01, fp
14840     0C 4E 85 F1 | 	sub	fp, #12
14844     09 13 52 F6 | 	abs	arg01, arg01 wc
14848     1F 26 C6 C9 |  if_b	decod	local05, #31
1484c     00 26 06 36 |  if_ae	mov	local05, #0
14850     84 E6 B0 FD | 	call	#__system___float_fromuns
14854     13 FB 61 F5 | 	xor	result1, local05
14858     FD 14 02 F6 | 	mov	arg02, result1
1485c     10 13 02 F6 | 	mov	arg01, local02
14860     01 16 06 F6 | 	mov	arg03, #1
14864     A8 EE B0 FD | 	call	#__system___float_cmp
14868     00 FA 55 F2 | 	cmps	result1, #0 wc
1486c     00 1E 26 C6 |  if_b	not	local01, #0
14870     A7 1E 62 FC | 	wrlong	local01, fp
14874     48 03 90 FD | 	jmp	#LR__1673
14878                 | LR__1662
14878                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
14878     08 4E 05 F1 | 	add	fp, #8
1487c     A7 1E 02 FB | 	rdlong	local01, fp
14880     08 4E 85 F1 | 	sub	fp, #8
14884     1E 1E 0E F2 | 	cmp	local01, #30 wz
14888     14 4E 05 A1 |  if_e	add	fp, #20
1488c     A7 24 02 AB |  if_e	rdlong	local04, fp
14890     14 4E 85 A1 |  if_e	sub	fp, #20
14894     12 23 02 A6 |  if_e	mov	local03, local04
14898     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1489c     38 00 90 5D |  if_ne	jmp	#LR__1663
148a0     00 1E 06 F6 | 	mov	local01, #0
148a4     A7 20 02 FB | 	rdlong	local02, fp
148a8     0C 4E 05 F1 | 	add	fp, #12
148ac     A7 12 02 FB | 	rdlong	arg01, fp
148b0     0C 4E 85 F1 | 	sub	fp, #12
148b4     20 E6 B0 FD | 	call	#__system___float_fromuns
148b8     FD 14 02 F6 | 	mov	arg02, result1
148bc     10 13 02 F6 | 	mov	arg01, local02
148c0     01 16 06 F6 | 	mov	arg03, #1
148c4     48 EE B0 FD | 	call	#__system___float_cmp
148c8     00 FA 55 F2 | 	cmps	result1, #0 wc
148cc     00 1E 26 C6 |  if_b	not	local01, #0
148d0     A7 1E 62 FC | 	wrlong	local01, fp
148d4     E8 02 90 FD | 	jmp	#LR__1673
148d8                 | LR__1663
148d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
148d8     08 4E 05 F1 | 	add	fp, #8
148dc     A7 1E 02 FB | 	rdlong	local01, fp
148e0     08 4E 85 F1 | 	sub	fp, #8
148e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
148e8     14 4E 05 A1 |  if_e	add	fp, #20
148ec     A7 24 02 AB |  if_e	rdlong	local04, fp
148f0     14 4E 85 A1 |  if_e	sub	fp, #20
148f4     12 23 02 A6 |  if_e	mov	local03, local04
148f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
148fc     44 00 90 5D |  if_ne	jmp	#LR__1664
14900     00 1E 06 F6 | 	mov	local01, #0
14904     A7 12 02 FB | 	rdlong	arg01, fp
14908     09 13 52 F6 | 	abs	arg01, arg01 wc
1490c     1F 26 C6 C9 |  if_b	decod	local05, #31
14910     00 26 06 36 |  if_ae	mov	local05, #0
14914     C0 E5 B0 FD | 	call	#__system___float_fromuns
14918     13 FB 61 F5 | 	xor	result1, local05
1491c     FD 12 02 F6 | 	mov	arg01, result1
14920     0C 4E 05 F1 | 	add	fp, #12
14924     A7 14 02 FB | 	rdlong	arg02, fp
14928     0C 4E 85 F1 | 	sub	fp, #12
1492c     01 16 06 F6 | 	mov	arg03, #1
14930     DC ED B0 FD | 	call	#__system___float_cmp
14934     00 FA 55 F2 | 	cmps	result1, #0 wc
14938     00 1E 26 C6 |  if_b	not	local01, #0
1493c     A7 1E 62 FC | 	wrlong	local01, fp
14940     7C 02 90 FD | 	jmp	#LR__1673
14944                 | LR__1664
14944                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14944     08 4E 05 F1 | 	add	fp, #8
14948     A7 1E 02 FB | 	rdlong	local01, fp
1494c     08 4E 85 F1 | 	sub	fp, #8
14950     1C 1E 0E F2 | 	cmp	local01, #28 wz
14954     14 4E 05 A1 |  if_e	add	fp, #20
14958     A7 24 02 AB |  if_e	rdlong	local04, fp
1495c     14 4E 85 A1 |  if_e	sub	fp, #20
14960     12 23 02 A6 |  if_e	mov	local03, local04
14964     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14968     20 00 90 5D |  if_ne	jmp	#LR__1665
1496c     A7 20 02 FB | 	rdlong	local02, fp
14970     0C 4E 05 F1 | 	add	fp, #12
14974     A7 22 02 FB | 	rdlong	local03, fp
14978     0C 4E 85 F1 | 	sub	fp, #12
1497c     11 21 52 F2 | 	cmps	local02, local03 wc
14980     0F 1F A2 F1 | 	subx	local01, local01
14984     A7 1E 62 FC | 	wrlong	local01, fp
14988     34 02 90 FD | 	jmp	#LR__1673
1498c                 | LR__1665
1498c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1498c     08 4E 05 F1 | 	add	fp, #8
14990     A7 1E 02 FB | 	rdlong	local01, fp
14994     08 4E 85 F1 | 	sub	fp, #8
14998     1C 1E 0E F2 | 	cmp	local01, #28 wz
1499c     14 4E 05 A1 |  if_e	add	fp, #20
149a0     A7 24 02 AB |  if_e	rdlong	local04, fp
149a4     14 4E 85 A1 |  if_e	sub	fp, #20
149a8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
149ac     20 00 90 5D |  if_ne	jmp	#LR__1666
149b0     A7 20 02 FB | 	rdlong	local02, fp
149b4     0C 4E 05 F1 | 	add	fp, #12
149b8     A7 22 02 FB | 	rdlong	local03, fp
149bc     0C 4E 85 F1 | 	sub	fp, #12
149c0     11 21 52 F2 | 	cmps	local02, local03 wc
149c4     0F 1F A2 F1 | 	subx	local01, local01
149c8     A7 1E 62 FC | 	wrlong	local01, fp
149cc     F0 01 90 FD | 	jmp	#LR__1673
149d0                 | LR__1666
149d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
149d0     08 4E 05 F1 | 	add	fp, #8
149d4     A7 1E 02 FB | 	rdlong	local01, fp
149d8     08 4E 85 F1 | 	sub	fp, #8
149dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
149e0     14 4E 05 A1 |  if_e	add	fp, #20
149e4     A7 22 02 AB |  if_e	rdlong	local03, fp
149e8     14 4E 85 A1 |  if_e	sub	fp, #20
149ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
149f0     34 00 90 5D |  if_ne	jmp	#LR__1667
149f4     00 1E 06 F6 | 	mov	local01, #0
149f8     A7 12 02 FB | 	rdlong	arg01, fp
149fc     D8 E4 B0 FD | 	call	#__system___float_fromuns
14a00     FD 12 02 F6 | 	mov	arg01, result1
14a04     0C 4E 05 F1 | 	add	fp, #12
14a08     A7 14 02 FB | 	rdlong	arg02, fp
14a0c     0C 4E 85 F1 | 	sub	fp, #12
14a10     01 16 06 F6 | 	mov	arg03, #1
14a14     F8 EC B0 FD | 	call	#__system___float_cmp
14a18     00 FA 55 F2 | 	cmps	result1, #0 wc
14a1c     00 1E 26 C6 |  if_b	not	local01, #0
14a20     A7 1E 62 FC | 	wrlong	local01, fp
14a24     98 01 90 FD | 	jmp	#LR__1673
14a28                 | LR__1667
14a28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14a28     08 4E 05 F1 | 	add	fp, #8
14a2c     A7 1E 02 FB | 	rdlong	local01, fp
14a30     08 4E 85 F1 | 	sub	fp, #8
14a34     1D 1E 0E F2 | 	cmp	local01, #29 wz
14a38     14 4E 05 A1 |  if_e	add	fp, #20
14a3c     A7 22 02 AB |  if_e	rdlong	local03, fp
14a40     14 4E 85 A1 |  if_e	sub	fp, #20
14a44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14a48     20 00 90 5D |  if_ne	jmp	#LR__1668
14a4c     A7 20 02 FB | 	rdlong	local02, fp
14a50     0C 4E 05 F1 | 	add	fp, #12
14a54     A7 22 02 FB | 	rdlong	local03, fp
14a58     0C 4E 85 F1 | 	sub	fp, #12
14a5c     11 21 52 F2 | 	cmps	local02, local03 wc
14a60     0F 1F A2 F1 | 	subx	local01, local01
14a64     A7 1E 62 FC | 	wrlong	local01, fp
14a68     54 01 90 FD | 	jmp	#LR__1673
14a6c                 | LR__1668
14a6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14a6c     08 4E 05 F1 | 	add	fp, #8
14a70     A7 1E 02 FB | 	rdlong	local01, fp
14a74     08 4E 85 F1 | 	sub	fp, #8
14a78     1D 1E 0E F2 | 	cmp	local01, #29 wz
14a7c     14 4E 05 A1 |  if_e	add	fp, #20
14a80     A7 22 02 AB |  if_e	rdlong	local03, fp
14a84     14 4E 85 A1 |  if_e	sub	fp, #20
14a88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14a8c     20 00 90 5D |  if_ne	jmp	#LR__1669
14a90     A7 20 02 FB | 	rdlong	local02, fp
14a94     0C 4E 05 F1 | 	add	fp, #12
14a98     A7 22 02 FB | 	rdlong	local03, fp
14a9c     0C 4E 85 F1 | 	sub	fp, #12
14aa0     11 21 12 F2 | 	cmp	local02, local03 wc
14aa4     0F 1F A2 F1 | 	subx	local01, local01
14aa8     A7 1E 62 FC | 	wrlong	local01, fp
14aac     10 01 90 FD | 	jmp	#LR__1673
14ab0                 | LR__1669
14ab0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14ab0     08 4E 05 F1 | 	add	fp, #8
14ab4     A7 1E 02 FB | 	rdlong	local01, fp
14ab8     08 4E 85 F1 | 	sub	fp, #8
14abc     2B 1E 0E F2 | 	cmp	local01, #43 wz
14ac0     14 4E 05 A1 |  if_e	add	fp, #20
14ac4     A7 22 02 AB |  if_e	rdlong	local03, fp
14ac8     14 4E 85 A1 |  if_e	sub	fp, #20
14acc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14ad0     30 00 90 5D |  if_ne	jmp	#LR__1670
14ad4     00 1E 06 F6 | 	mov	local01, #0
14ad8     A7 12 02 FB | 	rdlong	arg01, fp
14adc     64 C7 BF FD | 	call	#_convertstring
14ae0     FD 12 02 F6 | 	mov	arg01, result1
14ae4     0C 4E 05 F1 | 	add	fp, #12
14ae8     A7 14 02 FB | 	rdlong	arg02, fp
14aec     0C 4E 85 F1 | 	sub	fp, #12
14af0     5C BC B0 FD | 	call	#__system___string_cmp
14af4     00 FA 55 F2 | 	cmps	result1, #0 wc
14af8     00 1E 26 C6 |  if_b	not	local01, #0
14afc     A7 1E 62 FC | 	wrlong	local01, fp
14b00     BC 00 90 FD | 	jmp	#LR__1673
14b04                 | LR__1670
14b04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14b04     08 4E 05 F1 | 	add	fp, #8
14b08     A7 1E 02 FB | 	rdlong	local01, fp
14b0c     08 4E 85 F1 | 	sub	fp, #8
14b10     1F 1E 0E F2 | 	cmp	local01, #31 wz
14b14     14 4E 05 A1 |  if_e	add	fp, #20
14b18     A7 22 02 AB |  if_e	rdlong	local03, fp
14b1c     14 4E 85 A1 |  if_e	sub	fp, #20
14b20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14b24     34 00 90 5D |  if_ne	jmp	#LR__1671
14b28     00 1E 06 F6 | 	mov	local01, #0
14b2c     A7 20 02 FB | 	rdlong	local02, fp
14b30     0C 4E 05 F1 | 	add	fp, #12
14b34     A7 12 02 FB | 	rdlong	arg01, fp
14b38     0C 4E 85 F1 | 	sub	fp, #12
14b3c     04 C7 BF FD | 	call	#_convertstring
14b40     FD 14 02 F6 | 	mov	arg02, result1
14b44     10 13 02 F6 | 	mov	arg01, local02
14b48     04 BC B0 FD | 	call	#__system___string_cmp
14b4c     00 FA 55 F2 | 	cmps	result1, #0 wc
14b50     00 1E 26 C6 |  if_b	not	local01, #0
14b54     A7 1E 62 FC | 	wrlong	local01, fp
14b58     64 00 90 FD | 	jmp	#LR__1673
14b5c                 | LR__1671
14b5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14b5c     08 4E 05 F1 | 	add	fp, #8
14b60     A7 1E 02 FB | 	rdlong	local01, fp
14b64     08 4E 85 F1 | 	sub	fp, #8
14b68     2B 1E 0E F2 | 	cmp	local01, #43 wz
14b6c     14 4E 05 A1 |  if_e	add	fp, #20
14b70     A7 22 02 AB |  if_e	rdlong	local03, fp
14b74     14 4E 85 A1 |  if_e	sub	fp, #20
14b78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14b7c     3C 00 90 5D |  if_ne	jmp	#LR__1672
14b80     00 1E 06 F6 | 	mov	local01, #0
14b84     A7 12 02 FB | 	rdlong	arg01, fp
14b88     B8 C6 BF FD | 	call	#_convertstring
14b8c     FD 20 02 F6 | 	mov	local02, result1
14b90     0C 4E 05 F1 | 	add	fp, #12
14b94     A7 12 02 FB | 	rdlong	arg01, fp
14b98     0C 4E 85 F1 | 	sub	fp, #12
14b9c     A4 C6 BF FD | 	call	#_convertstring
14ba0     FD 14 02 F6 | 	mov	arg02, result1
14ba4     10 13 02 F6 | 	mov	arg01, local02
14ba8     A4 BB B0 FD | 	call	#__system___string_cmp
14bac     00 FA 55 F2 | 	cmps	result1, #0 wc
14bb0     00 1E 26 C6 |  if_b	not	local01, #0
14bb4     A7 1E 62 FC | 	wrlong	local01, fp
14bb8     04 00 90 FD | 	jmp	#LR__1673
14bbc                 | LR__1672
14bbc     A7 00 68 FC | 	wrlong	#0, fp
14bc0                 | LR__1673
14bc0     08 4E 05 F1 | 	add	fp, #8
14bc4     A7 38 68 FC | 	wrlong	#28, fp
14bc8     08 4E 85 F1 | 	sub	fp, #8
14bcc     A7 12 02 F6 | 	mov	arg01, fp
14bd0     68 6E BF FD | 	call	#_push
14bd4     A7 F0 03 F6 | 	mov	ptra, fp
14bd8     B2 00 A0 FD | 	call	#popregs_
14bdc                 | _do_lt_ret
14bdc     2D 00 64 FD | 	ret
14be0                 | 
14be0                 | ' 
14be0                 | ' sub do_ge
14be0                 | _do_ge
14be0     05 4A 05 F6 | 	mov	COUNT_, #5
14be4     A8 00 A0 FD | 	call	#pushregs_
14be8     18 F0 07 F1 | 	add	ptra, #24
14bec     B4 6D BF FD | 	call	#_pop
14bf0     FD 1E 02 F6 | 	mov	local01, result1
14bf4     FE 20 02 F6 | 	mov	local02, result2
14bf8     FF 22 02 F6 | 	mov	local03, result3
14bfc     0C 4E 05 F1 | 	add	fp, #12
14c00     A7 1E 62 FC | 	wrlong	local01, fp
14c04     04 4E 05 F1 | 	add	fp, #4
14c08     A7 20 62 FC | 	wrlong	local02, fp
14c0c     04 4E 05 F1 | 	add	fp, #4
14c10     A7 22 62 FC | 	wrlong	local03, fp
14c14     14 4E 85 F1 | 	sub	fp, #20
14c18     88 6D BF FD | 	call	#_pop
14c1c     FF 22 02 F6 | 	mov	local03, result3
14c20     A7 FA 61 FC | 	wrlong	result1, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 FC 61 FC | 	wrlong	result2, fp
14c2c     04 4E 05 F1 | 	add	fp, #4
14c30     A7 22 62 FC | 	wrlong	local03, fp
14c34                 | ' t2=pop()
14c34                 | ' t1=pop()
14c34                 | ' 
14c34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14c34     08 4E 85 F1 | 	sub	fp, #8
14c38     1F 22 0E F2 | 	cmp	local03, #31 wz
14c3c     14 4E 05 A1 |  if_e	add	fp, #20
14c40     A7 24 02 AB |  if_e	rdlong	local04, fp
14c44     14 4E 85 A1 |  if_e	sub	fp, #20
14c48     12 23 02 A6 |  if_e	mov	local03, local04
14c4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14c50     28 00 90 5D |  if_ne	jmp	#LR__1680
14c54     00 1E 06 F6 | 	mov	local01, #0
14c58     A7 12 02 FB | 	rdlong	arg01, fp
14c5c     0C 4E 05 F1 | 	add	fp, #12
14c60     A7 14 02 FB | 	rdlong	arg02, fp
14c64     0C 4E 85 F1 | 	sub	fp, #12
14c68     E4 BA B0 FD | 	call	#__system___string_cmp
14c6c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c70     00 1E 26 36 |  if_ae	not	local01, #0
14c74     A7 1E 62 FC | 	wrlong	local01, fp
14c78     1C 04 90 FD | 	jmp	#LR__1693
14c7c                 | LR__1680
14c7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14c7c     08 4E 05 F1 | 	add	fp, #8
14c80     A7 1E 02 FB | 	rdlong	local01, fp
14c84     08 4E 85 F1 | 	sub	fp, #8
14c88     1E 1E 0E F2 | 	cmp	local01, #30 wz
14c8c     14 4E 05 A1 |  if_e	add	fp, #20
14c90     A7 24 02 AB |  if_e	rdlong	local04, fp
14c94     14 4E 85 A1 |  if_e	sub	fp, #20
14c98     12 23 02 A6 |  if_e	mov	local03, local04
14c9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ca0     2C 00 90 5D |  if_ne	jmp	#LR__1681
14ca4     00 1E 06 F6 | 	mov	local01, #0
14ca8     A7 12 02 FB | 	rdlong	arg01, fp
14cac     0C 4E 05 F1 | 	add	fp, #12
14cb0     A7 14 02 FB | 	rdlong	arg02, fp
14cb4     0C 4E 85 F1 | 	sub	fp, #12
14cb8     01 16 66 F6 | 	neg	arg03, #1
14cbc     50 EA B0 FD | 	call	#__system___float_cmp
14cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
14cc4     00 1E 26 36 |  if_ae	not	local01, #0
14cc8     A7 1E 62 FC | 	wrlong	local01, fp
14ccc     C8 03 90 FD | 	jmp	#LR__1693
14cd0                 | LR__1681
14cd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14cd0     08 4E 05 F1 | 	add	fp, #8
14cd4     A7 1E 02 FB | 	rdlong	local01, fp
14cd8     08 4E 85 F1 | 	sub	fp, #8
14cdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
14ce0     14 4E 05 A1 |  if_e	add	fp, #20
14ce4     A7 24 02 AB |  if_e	rdlong	local04, fp
14ce8     14 4E 85 A1 |  if_e	sub	fp, #20
14cec     12 23 02 A6 |  if_e	mov	local03, local04
14cf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14cf4     48 00 90 5D |  if_ne	jmp	#LR__1682
14cf8     00 1E 06 F6 | 	mov	local01, #0
14cfc     A7 20 02 FB | 	rdlong	local02, fp
14d00     0C 4E 05 F1 | 	add	fp, #12
14d04     A7 12 02 FB | 	rdlong	arg01, fp
14d08     0C 4E 85 F1 | 	sub	fp, #12
14d0c     09 13 52 F6 | 	abs	arg01, arg01 wc
14d10     1F 26 C6 C9 |  if_b	decod	local05, #31
14d14     00 26 06 36 |  if_ae	mov	local05, #0
14d18     BC E1 B0 FD | 	call	#__system___float_fromuns
14d1c     13 FB 61 F5 | 	xor	result1, local05
14d20     FD 14 02 F6 | 	mov	arg02, result1
14d24     10 13 02 F6 | 	mov	arg01, local02
14d28     01 16 66 F6 | 	neg	arg03, #1
14d2c     E0 E9 B0 FD | 	call	#__system___float_cmp
14d30     00 FA 55 F2 | 	cmps	result1, #0 wc
14d34     00 1E 26 36 |  if_ae	not	local01, #0
14d38     A7 1E 62 FC | 	wrlong	local01, fp
14d3c     58 03 90 FD | 	jmp	#LR__1693
14d40                 | LR__1682
14d40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14d40     08 4E 05 F1 | 	add	fp, #8
14d44     A7 1E 02 FB | 	rdlong	local01, fp
14d48     08 4E 85 F1 | 	sub	fp, #8
14d4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14d50     14 4E 05 A1 |  if_e	add	fp, #20
14d54     A7 24 02 AB |  if_e	rdlong	local04, fp
14d58     14 4E 85 A1 |  if_e	sub	fp, #20
14d5c     12 23 02 A6 |  if_e	mov	local03, local04
14d60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14d64     38 00 90 5D |  if_ne	jmp	#LR__1683
14d68     00 1E 06 F6 | 	mov	local01, #0
14d6c     A7 20 02 FB | 	rdlong	local02, fp
14d70     0C 4E 05 F1 | 	add	fp, #12
14d74     A7 12 02 FB | 	rdlong	arg01, fp
14d78     0C 4E 85 F1 | 	sub	fp, #12
14d7c     58 E1 B0 FD | 	call	#__system___float_fromuns
14d80     FD 14 02 F6 | 	mov	arg02, result1
14d84     10 13 02 F6 | 	mov	arg01, local02
14d88     01 16 66 F6 | 	neg	arg03, #1
14d8c     80 E9 B0 FD | 	call	#__system___float_cmp
14d90     00 FA 55 F2 | 	cmps	result1, #0 wc
14d94     00 1E 26 36 |  if_ae	not	local01, #0
14d98     A7 1E 62 FC | 	wrlong	local01, fp
14d9c     F8 02 90 FD | 	jmp	#LR__1693
14da0                 | LR__1683
14da0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14da0     08 4E 05 F1 | 	add	fp, #8
14da4     A7 1E 02 FB | 	rdlong	local01, fp
14da8     08 4E 85 F1 | 	sub	fp, #8
14dac     1C 1E 0E F2 | 	cmp	local01, #28 wz
14db0     14 4E 05 A1 |  if_e	add	fp, #20
14db4     A7 24 02 AB |  if_e	rdlong	local04, fp
14db8     14 4E 85 A1 |  if_e	sub	fp, #20
14dbc     12 23 02 A6 |  if_e	mov	local03, local04
14dc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14dc4     44 00 90 5D |  if_ne	jmp	#LR__1684
14dc8     00 1E 06 F6 | 	mov	local01, #0
14dcc     A7 12 02 FB | 	rdlong	arg01, fp
14dd0     09 13 52 F6 | 	abs	arg01, arg01 wc
14dd4     1F 26 C6 C9 |  if_b	decod	local05, #31
14dd8     00 26 06 36 |  if_ae	mov	local05, #0
14ddc     F8 E0 B0 FD | 	call	#__system___float_fromuns
14de0     13 FB 61 F5 | 	xor	result1, local05
14de4     FD 12 02 F6 | 	mov	arg01, result1
14de8     0C 4E 05 F1 | 	add	fp, #12
14dec     A7 14 02 FB | 	rdlong	arg02, fp
14df0     0C 4E 85 F1 | 	sub	fp, #12
14df4     01 16 66 F6 | 	neg	arg03, #1
14df8     14 E9 B0 FD | 	call	#__system___float_cmp
14dfc     00 FA 55 F2 | 	cmps	result1, #0 wc
14e00     00 1E 26 36 |  if_ae	not	local01, #0
14e04     A7 1E 62 FC | 	wrlong	local01, fp
14e08     8C 02 90 FD | 	jmp	#LR__1693
14e0c                 | LR__1684
14e0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14e0c     08 4E 05 F1 | 	add	fp, #8
14e10     A7 1E 02 FB | 	rdlong	local01, fp
14e14     08 4E 85 F1 | 	sub	fp, #8
14e18     1C 1E 0E F2 | 	cmp	local01, #28 wz
14e1c     14 4E 05 A1 |  if_e	add	fp, #20
14e20     A7 24 02 AB |  if_e	rdlong	local04, fp
14e24     14 4E 85 A1 |  if_e	sub	fp, #20
14e28     12 23 02 A6 |  if_e	mov	local03, local04
14e2c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14e30     24 00 90 5D |  if_ne	jmp	#LR__1685
14e34     00 1E 06 F6 | 	mov	local01, #0
14e38     A7 20 02 FB | 	rdlong	local02, fp
14e3c     0C 4E 05 F1 | 	add	fp, #12
14e40     A7 22 02 FB | 	rdlong	local03, fp
14e44     0C 4E 85 F1 | 	sub	fp, #12
14e48     11 21 52 F2 | 	cmps	local02, local03 wc
14e4c     01 1E 66 36 |  if_ae	neg	local01, #1
14e50     A7 1E 62 FC | 	wrlong	local01, fp
14e54     40 02 90 FD | 	jmp	#LR__1693
14e58                 | LR__1685
14e58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14e58     08 4E 05 F1 | 	add	fp, #8
14e5c     A7 1E 02 FB | 	rdlong	local01, fp
14e60     08 4E 85 F1 | 	sub	fp, #8
14e64     1C 1E 0E F2 | 	cmp	local01, #28 wz
14e68     14 4E 05 A1 |  if_e	add	fp, #20
14e6c     A7 24 02 AB |  if_e	rdlong	local04, fp
14e70     14 4E 85 A1 |  if_e	sub	fp, #20
14e74     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14e78     24 00 90 5D |  if_ne	jmp	#LR__1686
14e7c     00 1E 06 F6 | 	mov	local01, #0
14e80     A7 20 02 FB | 	rdlong	local02, fp
14e84     0C 4E 05 F1 | 	add	fp, #12
14e88     A7 22 02 FB | 	rdlong	local03, fp
14e8c     0C 4E 85 F1 | 	sub	fp, #12
14e90     11 21 52 F2 | 	cmps	local02, local03 wc
14e94     01 1E 66 36 |  if_ae	neg	local01, #1
14e98     A7 1E 62 FC | 	wrlong	local01, fp
14e9c     F8 01 90 FD | 	jmp	#LR__1693
14ea0                 | LR__1686
14ea0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
14ea0     08 4E 05 F1 | 	add	fp, #8
14ea4     A7 1E 02 FB | 	rdlong	local01, fp
14ea8     08 4E 85 F1 | 	sub	fp, #8
14eac     1D 1E 0E F2 | 	cmp	local01, #29 wz
14eb0     14 4E 05 A1 |  if_e	add	fp, #20
14eb4     A7 22 02 AB |  if_e	rdlong	local03, fp
14eb8     14 4E 85 A1 |  if_e	sub	fp, #20
14ebc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ec0     34 00 90 5D |  if_ne	jmp	#LR__1687
14ec4     00 1E 06 F6 | 	mov	local01, #0
14ec8     A7 12 02 FB | 	rdlong	arg01, fp
14ecc     08 E0 B0 FD | 	call	#__system___float_fromuns
14ed0     FD 12 02 F6 | 	mov	arg01, result1
14ed4     0C 4E 05 F1 | 	add	fp, #12
14ed8     A7 14 02 FB | 	rdlong	arg02, fp
14edc     0C 4E 85 F1 | 	sub	fp, #12
14ee0     01 16 66 F6 | 	neg	arg03, #1
14ee4     28 E8 B0 FD | 	call	#__system___float_cmp
14ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
14eec     00 1E 26 36 |  if_ae	not	local01, #0
14ef0     A7 1E 62 FC | 	wrlong	local01, fp
14ef4     A0 01 90 FD | 	jmp	#LR__1693
14ef8                 | LR__1687
14ef8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
14ef8     08 4E 05 F1 | 	add	fp, #8
14efc     A7 1E 02 FB | 	rdlong	local01, fp
14f00     08 4E 85 F1 | 	sub	fp, #8
14f04     1D 1E 0E F2 | 	cmp	local01, #29 wz
14f08     14 4E 05 A1 |  if_e	add	fp, #20
14f0c     A7 22 02 AB |  if_e	rdlong	local03, fp
14f10     14 4E 85 A1 |  if_e	sub	fp, #20
14f14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14f18     24 00 90 5D |  if_ne	jmp	#LR__1688
14f1c     00 1E 06 F6 | 	mov	local01, #0
14f20     A7 20 02 FB | 	rdlong	local02, fp
14f24     0C 4E 05 F1 | 	add	fp, #12
14f28     A7 22 02 FB | 	rdlong	local03, fp
14f2c     0C 4E 85 F1 | 	sub	fp, #12
14f30     11 21 52 F2 | 	cmps	local02, local03 wc
14f34     01 1E 66 36 |  if_ae	neg	local01, #1
14f38     A7 1E 62 FC | 	wrlong	local01, fp
14f3c     58 01 90 FD | 	jmp	#LR__1693
14f40                 | LR__1688
14f40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
14f40     08 4E 05 F1 | 	add	fp, #8
14f44     A7 1E 02 FB | 	rdlong	local01, fp
14f48     08 4E 85 F1 | 	sub	fp, #8
14f4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14f50     14 4E 05 A1 |  if_e	add	fp, #20
14f54     A7 22 02 AB |  if_e	rdlong	local03, fp
14f58     14 4E 85 A1 |  if_e	sub	fp, #20
14f5c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14f60     24 00 90 5D |  if_ne	jmp	#LR__1689
14f64     00 1E 06 F6 | 	mov	local01, #0
14f68     A7 20 02 FB | 	rdlong	local02, fp
14f6c     0C 4E 05 F1 | 	add	fp, #12
14f70     A7 22 02 FB | 	rdlong	local03, fp
14f74     0C 4E 85 F1 | 	sub	fp, #12
14f78     11 21 12 F2 | 	cmp	local02, local03 wc
14f7c     01 1E 66 36 |  if_ae	neg	local01, #1
14f80     A7 1E 62 FC | 	wrlong	local01, fp
14f84     10 01 90 FD | 	jmp	#LR__1693
14f88                 | LR__1689
14f88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
14f88     08 4E 05 F1 | 	add	fp, #8
14f8c     A7 1E 02 FB | 	rdlong	local01, fp
14f90     08 4E 85 F1 | 	sub	fp, #8
14f94     2B 1E 0E F2 | 	cmp	local01, #43 wz
14f98     14 4E 05 A1 |  if_e	add	fp, #20
14f9c     A7 22 02 AB |  if_e	rdlong	local03, fp
14fa0     14 4E 85 A1 |  if_e	sub	fp, #20
14fa4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14fa8     30 00 90 5D |  if_ne	jmp	#LR__1690
14fac     00 1E 06 F6 | 	mov	local01, #0
14fb0     A7 12 02 FB | 	rdlong	arg01, fp
14fb4     8C C2 BF FD | 	call	#_convertstring
14fb8     FD 12 02 F6 | 	mov	arg01, result1
14fbc     0C 4E 05 F1 | 	add	fp, #12
14fc0     A7 14 02 FB | 	rdlong	arg02, fp
14fc4     0C 4E 85 F1 | 	sub	fp, #12
14fc8     84 B7 B0 FD | 	call	#__system___string_cmp
14fcc     00 FA 55 F2 | 	cmps	result1, #0 wc
14fd0     00 1E 26 36 |  if_ae	not	local01, #0
14fd4     A7 1E 62 FC | 	wrlong	local01, fp
14fd8     BC 00 90 FD | 	jmp	#LR__1693
14fdc                 | LR__1690
14fdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
14fdc     08 4E 05 F1 | 	add	fp, #8
14fe0     A7 1E 02 FB | 	rdlong	local01, fp
14fe4     08 4E 85 F1 | 	sub	fp, #8
14fe8     1F 1E 0E F2 | 	cmp	local01, #31 wz
14fec     14 4E 05 A1 |  if_e	add	fp, #20
14ff0     A7 22 02 AB |  if_e	rdlong	local03, fp
14ff4     14 4E 85 A1 |  if_e	sub	fp, #20
14ff8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14ffc     34 00 90 5D |  if_ne	jmp	#LR__1691
15000     00 1E 06 F6 | 	mov	local01, #0
15004     A7 20 02 FB | 	rdlong	local02, fp
15008     0C 4E 05 F1 | 	add	fp, #12
1500c     A7 12 02 FB | 	rdlong	arg01, fp
15010     0C 4E 85 F1 | 	sub	fp, #12
15014     2C C2 BF FD | 	call	#_convertstring
15018     FD 14 02 F6 | 	mov	arg02, result1
1501c     10 13 02 F6 | 	mov	arg01, local02
15020     2C B7 B0 FD | 	call	#__system___string_cmp
15024     00 FA 55 F2 | 	cmps	result1, #0 wc
15028     00 1E 26 36 |  if_ae	not	local01, #0
1502c     A7 1E 62 FC | 	wrlong	local01, fp
15030     64 00 90 FD | 	jmp	#LR__1693
15034                 | LR__1691
15034                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
15034     08 4E 05 F1 | 	add	fp, #8
15038     A7 1E 02 FB | 	rdlong	local01, fp
1503c     08 4E 85 F1 | 	sub	fp, #8
15040     2B 1E 0E F2 | 	cmp	local01, #43 wz
15044     14 4E 05 A1 |  if_e	add	fp, #20
15048     A7 22 02 AB |  if_e	rdlong	local03, fp
1504c     14 4E 85 A1 |  if_e	sub	fp, #20
15050     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15054     3C 00 90 5D |  if_ne	jmp	#LR__1692
15058     00 1E 06 F6 | 	mov	local01, #0
1505c     A7 12 02 FB | 	rdlong	arg01, fp
15060     E0 C1 BF FD | 	call	#_convertstring
15064     FD 20 02 F6 | 	mov	local02, result1
15068     0C 4E 05 F1 | 	add	fp, #12
1506c     A7 12 02 FB | 	rdlong	arg01, fp
15070     0C 4E 85 F1 | 	sub	fp, #12
15074     CC C1 BF FD | 	call	#_convertstring
15078     FD 14 02 F6 | 	mov	arg02, result1
1507c     10 13 02 F6 | 	mov	arg01, local02
15080     CC B6 B0 FD | 	call	#__system___string_cmp
15084     00 FA 55 F2 | 	cmps	result1, #0 wc
15088     00 1E 26 36 |  if_ae	not	local01, #0
1508c     A7 1E 62 FC | 	wrlong	local01, fp
15090     04 00 90 FD | 	jmp	#LR__1693
15094                 | LR__1692
15094     A7 00 68 FC | 	wrlong	#0, fp
15098                 | LR__1693
15098     08 4E 05 F1 | 	add	fp, #8
1509c     A7 38 68 FC | 	wrlong	#28, fp
150a0     08 4E 85 F1 | 	sub	fp, #8
150a4     A7 12 02 F6 | 	mov	arg01, fp
150a8     90 69 BF FD | 	call	#_push
150ac     A7 F0 03 F6 | 	mov	ptra, fp
150b0     B2 00 A0 FD | 	call	#popregs_
150b4                 | _do_ge_ret
150b4     2D 00 64 FD | 	ret
150b8                 | 
150b8                 | ' 
150b8                 | ' sub do_le
150b8                 | _do_le
150b8     05 4A 05 F6 | 	mov	COUNT_, #5
150bc     A8 00 A0 FD | 	call	#pushregs_
150c0     18 F0 07 F1 | 	add	ptra, #24
150c4     DC 68 BF FD | 	call	#_pop
150c8     FD 1E 02 F6 | 	mov	local01, result1
150cc     FE 20 02 F6 | 	mov	local02, result2
150d0     FF 22 02 F6 | 	mov	local03, result3
150d4     0C 4E 05 F1 | 	add	fp, #12
150d8     A7 1E 62 FC | 	wrlong	local01, fp
150dc     04 4E 05 F1 | 	add	fp, #4
150e0     A7 20 62 FC | 	wrlong	local02, fp
150e4     04 4E 05 F1 | 	add	fp, #4
150e8     A7 22 62 FC | 	wrlong	local03, fp
150ec     14 4E 85 F1 | 	sub	fp, #20
150f0     B0 68 BF FD | 	call	#_pop
150f4     FF 22 02 F6 | 	mov	local03, result3
150f8     A7 FA 61 FC | 	wrlong	result1, fp
150fc     04 4E 05 F1 | 	add	fp, #4
15100     A7 FC 61 FC | 	wrlong	result2, fp
15104     04 4E 05 F1 | 	add	fp, #4
15108     A7 22 62 FC | 	wrlong	local03, fp
1510c                 | ' t2=pop()
1510c                 | ' t1=pop()
1510c                 | ' 
1510c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1510c     08 4E 85 F1 | 	sub	fp, #8
15110     1F 22 0E F2 | 	cmp	local03, #31 wz
15114     14 4E 05 A1 |  if_e	add	fp, #20
15118     A7 24 02 AB |  if_e	rdlong	local04, fp
1511c     14 4E 85 A1 |  if_e	sub	fp, #20
15120     12 23 02 A6 |  if_e	mov	local03, local04
15124     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15128     28 00 90 5D |  if_ne	jmp	#LR__1700
1512c     00 1E 06 F6 | 	mov	local01, #0
15130     A7 12 02 FB | 	rdlong	arg01, fp
15134     0C 4E 05 F1 | 	add	fp, #12
15138     A7 14 02 FB | 	rdlong	arg02, fp
1513c     0C 4E 85 F1 | 	sub	fp, #12
15140     0C B6 B0 FD | 	call	#__system___string_cmp
15144     01 FA 55 F2 | 	cmps	result1, #1 wc
15148     00 1E 26 C6 |  if_b	not	local01, #0
1514c     A7 1E 62 FC | 	wrlong	local01, fp
15150     1C 04 90 FD | 	jmp	#LR__1713
15154                 | LR__1700
15154                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
15154     08 4E 05 F1 | 	add	fp, #8
15158     A7 1E 02 FB | 	rdlong	local01, fp
1515c     08 4E 85 F1 | 	sub	fp, #8
15160     1E 1E 0E F2 | 	cmp	local01, #30 wz
15164     14 4E 05 A1 |  if_e	add	fp, #20
15168     A7 24 02 AB |  if_e	rdlong	local04, fp
1516c     14 4E 85 A1 |  if_e	sub	fp, #20
15170     12 23 02 A6 |  if_e	mov	local03, local04
15174     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15178     2C 00 90 5D |  if_ne	jmp	#LR__1701
1517c     00 1E 06 F6 | 	mov	local01, #0
15180     A7 12 02 FB | 	rdlong	arg01, fp
15184     0C 4E 05 F1 | 	add	fp, #12
15188     A7 14 02 FB | 	rdlong	arg02, fp
1518c     0C 4E 85 F1 | 	sub	fp, #12
15190     01 16 06 F6 | 	mov	arg03, #1
15194     78 E5 B0 FD | 	call	#__system___float_cmp
15198     01 FA 55 F2 | 	cmps	result1, #1 wc
1519c     00 1E 26 C6 |  if_b	not	local01, #0
151a0     A7 1E 62 FC | 	wrlong	local01, fp
151a4     C8 03 90 FD | 	jmp	#LR__1713
151a8                 | LR__1701
151a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
151a8     08 4E 05 F1 | 	add	fp, #8
151ac     A7 1E 02 FB | 	rdlong	local01, fp
151b0     08 4E 85 F1 | 	sub	fp, #8
151b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
151b8     14 4E 05 A1 |  if_e	add	fp, #20
151bc     A7 24 02 AB |  if_e	rdlong	local04, fp
151c0     14 4E 85 A1 |  if_e	sub	fp, #20
151c4     12 23 02 A6 |  if_e	mov	local03, local04
151c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
151cc     48 00 90 5D |  if_ne	jmp	#LR__1702
151d0     00 1E 06 F6 | 	mov	local01, #0
151d4     A7 20 02 FB | 	rdlong	local02, fp
151d8     0C 4E 05 F1 | 	add	fp, #12
151dc     A7 12 02 FB | 	rdlong	arg01, fp
151e0     0C 4E 85 F1 | 	sub	fp, #12
151e4     09 13 52 F6 | 	abs	arg01, arg01 wc
151e8     1F 26 C6 C9 |  if_b	decod	local05, #31
151ec     00 26 06 36 |  if_ae	mov	local05, #0
151f0     E4 DC B0 FD | 	call	#__system___float_fromuns
151f4     13 FB 61 F5 | 	xor	result1, local05
151f8     FD 14 02 F6 | 	mov	arg02, result1
151fc     10 13 02 F6 | 	mov	arg01, local02
15200     01 16 06 F6 | 	mov	arg03, #1
15204     08 E5 B0 FD | 	call	#__system___float_cmp
15208     01 FA 55 F2 | 	cmps	result1, #1 wc
1520c     00 1E 26 C6 |  if_b	not	local01, #0
15210     A7 1E 62 FC | 	wrlong	local01, fp
15214     58 03 90 FD | 	jmp	#LR__1713
15218                 | LR__1702
15218                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
15218     08 4E 05 F1 | 	add	fp, #8
1521c     A7 1E 02 FB | 	rdlong	local01, fp
15220     08 4E 85 F1 | 	sub	fp, #8
15224     1E 1E 0E F2 | 	cmp	local01, #30 wz
15228     14 4E 05 A1 |  if_e	add	fp, #20
1522c     A7 24 02 AB |  if_e	rdlong	local04, fp
15230     14 4E 85 A1 |  if_e	sub	fp, #20
15234     12 23 02 A6 |  if_e	mov	local03, local04
15238     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1523c     38 00 90 5D |  if_ne	jmp	#LR__1703
15240     00 1E 06 F6 | 	mov	local01, #0
15244     A7 20 02 FB | 	rdlong	local02, fp
15248     0C 4E 05 F1 | 	add	fp, #12
1524c     A7 12 02 FB | 	rdlong	arg01, fp
15250     0C 4E 85 F1 | 	sub	fp, #12
15254     80 DC B0 FD | 	call	#__system___float_fromuns
15258     FD 14 02 F6 | 	mov	arg02, result1
1525c     10 13 02 F6 | 	mov	arg01, local02
15260     01 16 06 F6 | 	mov	arg03, #1
15264     A8 E4 B0 FD | 	call	#__system___float_cmp
15268     01 FA 55 F2 | 	cmps	result1, #1 wc
1526c     00 1E 26 C6 |  if_b	not	local01, #0
15270     A7 1E 62 FC | 	wrlong	local01, fp
15274     F8 02 90 FD | 	jmp	#LR__1713
15278                 | LR__1703
15278                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
15278     08 4E 05 F1 | 	add	fp, #8
1527c     A7 1E 02 FB | 	rdlong	local01, fp
15280     08 4E 85 F1 | 	sub	fp, #8
15284     1C 1E 0E F2 | 	cmp	local01, #28 wz
15288     14 4E 05 A1 |  if_e	add	fp, #20
1528c     A7 24 02 AB |  if_e	rdlong	local04, fp
15290     14 4E 85 A1 |  if_e	sub	fp, #20
15294     12 23 02 A6 |  if_e	mov	local03, local04
15298     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1529c     44 00 90 5D |  if_ne	jmp	#LR__1704
152a0     00 1E 06 F6 | 	mov	local01, #0
152a4     A7 12 02 FB | 	rdlong	arg01, fp
152a8     09 13 52 F6 | 	abs	arg01, arg01 wc
152ac     1F 26 C6 C9 |  if_b	decod	local05, #31
152b0     00 26 06 36 |  if_ae	mov	local05, #0
152b4     20 DC B0 FD | 	call	#__system___float_fromuns
152b8     13 FB 61 F5 | 	xor	result1, local05
152bc     FD 12 02 F6 | 	mov	arg01, result1
152c0     0C 4E 05 F1 | 	add	fp, #12
152c4     A7 14 02 FB | 	rdlong	arg02, fp
152c8     0C 4E 85 F1 | 	sub	fp, #12
152cc     01 16 06 F6 | 	mov	arg03, #1
152d0     3C E4 B0 FD | 	call	#__system___float_cmp
152d4     01 FA 55 F2 | 	cmps	result1, #1 wc
152d8     00 1E 26 C6 |  if_b	not	local01, #0
152dc     A7 1E 62 FC | 	wrlong	local01, fp
152e0     8C 02 90 FD | 	jmp	#LR__1713
152e4                 | LR__1704
152e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
152e4     08 4E 05 F1 | 	add	fp, #8
152e8     A7 1E 02 FB | 	rdlong	local01, fp
152ec     08 4E 85 F1 | 	sub	fp, #8
152f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
152f4     14 4E 05 A1 |  if_e	add	fp, #20
152f8     A7 24 02 AB |  if_e	rdlong	local04, fp
152fc     14 4E 85 A1 |  if_e	sub	fp, #20
15300     12 23 02 A6 |  if_e	mov	local03, local04
15304     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15308     24 00 90 5D |  if_ne	jmp	#LR__1705
1530c     00 1E 06 F6 | 	mov	local01, #0
15310     A7 20 02 FB | 	rdlong	local02, fp
15314     0C 4E 05 F1 | 	add	fp, #12
15318     A7 22 02 FB | 	rdlong	local03, fp
1531c     0C 4E 85 F1 | 	sub	fp, #12
15320     11 21 5A F2 | 	cmps	local02, local03 wcz
15324     01 1E 66 E6 |  if_be	neg	local01, #1
15328     A7 1E 62 FC | 	wrlong	local01, fp
1532c     40 02 90 FD | 	jmp	#LR__1713
15330                 | LR__1705
15330                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
15330     08 4E 05 F1 | 	add	fp, #8
15334     A7 1E 02 FB | 	rdlong	local01, fp
15338     08 4E 85 F1 | 	sub	fp, #8
1533c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15340     14 4E 05 A1 |  if_e	add	fp, #20
15344     A7 24 02 AB |  if_e	rdlong	local04, fp
15348     14 4E 85 A1 |  if_e	sub	fp, #20
1534c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15350     24 00 90 5D |  if_ne	jmp	#LR__1706
15354     00 1E 06 F6 | 	mov	local01, #0
15358     A7 20 02 FB | 	rdlong	local02, fp
1535c     0C 4E 05 F1 | 	add	fp, #12
15360     A7 22 02 FB | 	rdlong	local03, fp
15364     0C 4E 85 F1 | 	sub	fp, #12
15368     11 21 5A F2 | 	cmps	local02, local03 wcz
1536c     01 1E 66 E6 |  if_be	neg	local01, #1
15370     A7 1E 62 FC | 	wrlong	local01, fp
15374     F8 01 90 FD | 	jmp	#LR__1713
15378                 | LR__1706
15378                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
15378     08 4E 05 F1 | 	add	fp, #8
1537c     A7 1E 02 FB | 	rdlong	local01, fp
15380     08 4E 85 F1 | 	sub	fp, #8
15384     1D 1E 0E F2 | 	cmp	local01, #29 wz
15388     14 4E 05 A1 |  if_e	add	fp, #20
1538c     A7 22 02 AB |  if_e	rdlong	local03, fp
15390     14 4E 85 A1 |  if_e	sub	fp, #20
15394     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15398     34 00 90 5D |  if_ne	jmp	#LR__1707
1539c     00 1E 06 F6 | 	mov	local01, #0
153a0     A7 12 02 FB | 	rdlong	arg01, fp
153a4     30 DB B0 FD | 	call	#__system___float_fromuns
153a8     FD 12 02 F6 | 	mov	arg01, result1
153ac     0C 4E 05 F1 | 	add	fp, #12
153b0     A7 14 02 FB | 	rdlong	arg02, fp
153b4     0C 4E 85 F1 | 	sub	fp, #12
153b8     01 16 06 F6 | 	mov	arg03, #1
153bc     50 E3 B0 FD | 	call	#__system___float_cmp
153c0     01 FA 55 F2 | 	cmps	result1, #1 wc
153c4     00 1E 26 C6 |  if_b	not	local01, #0
153c8     A7 1E 62 FC | 	wrlong	local01, fp
153cc     A0 01 90 FD | 	jmp	#LR__1713
153d0                 | LR__1707
153d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
153d0     08 4E 05 F1 | 	add	fp, #8
153d4     A7 1E 02 FB | 	rdlong	local01, fp
153d8     08 4E 85 F1 | 	sub	fp, #8
153dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
153e0     14 4E 05 A1 |  if_e	add	fp, #20
153e4     A7 22 02 AB |  if_e	rdlong	local03, fp
153e8     14 4E 85 A1 |  if_e	sub	fp, #20
153ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
153f0     24 00 90 5D |  if_ne	jmp	#LR__1708
153f4     00 1E 06 F6 | 	mov	local01, #0
153f8     A7 20 02 FB | 	rdlong	local02, fp
153fc     0C 4E 05 F1 | 	add	fp, #12
15400     A7 22 02 FB | 	rdlong	local03, fp
15404     0C 4E 85 F1 | 	sub	fp, #12
15408     11 21 5A F2 | 	cmps	local02, local03 wcz
1540c     01 1E 66 E6 |  if_be	neg	local01, #1
15410     A7 1E 62 FC | 	wrlong	local01, fp
15414     58 01 90 FD | 	jmp	#LR__1713
15418                 | LR__1708
15418                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
15418     08 4E 05 F1 | 	add	fp, #8
1541c     A7 1E 02 FB | 	rdlong	local01, fp
15420     08 4E 85 F1 | 	sub	fp, #8
15424     1D 1E 0E F2 | 	cmp	local01, #29 wz
15428     14 4E 05 A1 |  if_e	add	fp, #20
1542c     A7 22 02 AB |  if_e	rdlong	local03, fp
15430     14 4E 85 A1 |  if_e	sub	fp, #20
15434     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15438     24 00 90 5D |  if_ne	jmp	#LR__1709
1543c     00 1E 06 F6 | 	mov	local01, #0
15440     A7 20 02 FB | 	rdlong	local02, fp
15444     0C 4E 05 F1 | 	add	fp, #12
15448     A7 22 02 FB | 	rdlong	local03, fp
1544c     0C 4E 85 F1 | 	sub	fp, #12
15450     11 21 1A F2 | 	cmp	local02, local03 wcz
15454     01 1E 66 E6 |  if_be	neg	local01, #1
15458     A7 1E 62 FC | 	wrlong	local01, fp
1545c     10 01 90 FD | 	jmp	#LR__1713
15460                 | LR__1709
15460                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
15460     08 4E 05 F1 | 	add	fp, #8
15464     A7 1E 02 FB | 	rdlong	local01, fp
15468     08 4E 85 F1 | 	sub	fp, #8
1546c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15470     14 4E 05 A1 |  if_e	add	fp, #20
15474     A7 22 02 AB |  if_e	rdlong	local03, fp
15478     14 4E 85 A1 |  if_e	sub	fp, #20
1547c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15480     30 00 90 5D |  if_ne	jmp	#LR__1710
15484     00 1E 06 F6 | 	mov	local01, #0
15488     A7 12 02 FB | 	rdlong	arg01, fp
1548c     B4 BD BF FD | 	call	#_convertstring
15490     FD 12 02 F6 | 	mov	arg01, result1
15494     0C 4E 05 F1 | 	add	fp, #12
15498     A7 14 02 FB | 	rdlong	arg02, fp
1549c     0C 4E 85 F1 | 	sub	fp, #12
154a0     AC B2 B0 FD | 	call	#__system___string_cmp
154a4     01 FA 55 F2 | 	cmps	result1, #1 wc
154a8     00 1E 26 C6 |  if_b	not	local01, #0
154ac     A7 1E 62 FC | 	wrlong	local01, fp
154b0     BC 00 90 FD | 	jmp	#LR__1713
154b4                 | LR__1710
154b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
154b4     08 4E 05 F1 | 	add	fp, #8
154b8     A7 1E 02 FB | 	rdlong	local01, fp
154bc     08 4E 85 F1 | 	sub	fp, #8
154c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
154c4     14 4E 05 A1 |  if_e	add	fp, #20
154c8     A7 22 02 AB |  if_e	rdlong	local03, fp
154cc     14 4E 85 A1 |  if_e	sub	fp, #20
154d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
154d4     34 00 90 5D |  if_ne	jmp	#LR__1711
154d8     00 1E 06 F6 | 	mov	local01, #0
154dc     A7 20 02 FB | 	rdlong	local02, fp
154e0     0C 4E 05 F1 | 	add	fp, #12
154e4     A7 12 02 FB | 	rdlong	arg01, fp
154e8     0C 4E 85 F1 | 	sub	fp, #12
154ec     54 BD BF FD | 	call	#_convertstring
154f0     FD 14 02 F6 | 	mov	arg02, result1
154f4     10 13 02 F6 | 	mov	arg01, local02
154f8     54 B2 B0 FD | 	call	#__system___string_cmp
154fc     01 FA 55 F2 | 	cmps	result1, #1 wc
15500     00 1E 26 C6 |  if_b	not	local01, #0
15504     A7 1E 62 FC | 	wrlong	local01, fp
15508     64 00 90 FD | 	jmp	#LR__1713
1550c                 | LR__1711
1550c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1550c     08 4E 05 F1 | 	add	fp, #8
15510     A7 1E 02 FB | 	rdlong	local01, fp
15514     08 4E 85 F1 | 	sub	fp, #8
15518     2B 1E 0E F2 | 	cmp	local01, #43 wz
1551c     14 4E 05 A1 |  if_e	add	fp, #20
15520     A7 22 02 AB |  if_e	rdlong	local03, fp
15524     14 4E 85 A1 |  if_e	sub	fp, #20
15528     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1552c     3C 00 90 5D |  if_ne	jmp	#LR__1712
15530     00 1E 06 F6 | 	mov	local01, #0
15534     A7 12 02 FB | 	rdlong	arg01, fp
15538     08 BD BF FD | 	call	#_convertstring
1553c     FD 20 02 F6 | 	mov	local02, result1
15540     0C 4E 05 F1 | 	add	fp, #12
15544     A7 12 02 FB | 	rdlong	arg01, fp
15548     0C 4E 85 F1 | 	sub	fp, #12
1554c     F4 BC BF FD | 	call	#_convertstring
15550     FD 14 02 F6 | 	mov	arg02, result1
15554     10 13 02 F6 | 	mov	arg01, local02
15558     F4 B1 B0 FD | 	call	#__system___string_cmp
1555c     01 FA 55 F2 | 	cmps	result1, #1 wc
15560     00 1E 26 C6 |  if_b	not	local01, #0
15564     A7 1E 62 FC | 	wrlong	local01, fp
15568     04 00 90 FD | 	jmp	#LR__1713
1556c                 | LR__1712
1556c     A7 00 68 FC | 	wrlong	#0, fp
15570                 | LR__1713
15570     08 4E 05 F1 | 	add	fp, #8
15574     A7 38 68 FC | 	wrlong	#28, fp
15578     08 4E 85 F1 | 	sub	fp, #8
1557c     A7 12 02 F6 | 	mov	arg01, fp
15580     B8 64 BF FD | 	call	#_push
15584     A7 F0 03 F6 | 	mov	ptra, fp
15588     B2 00 A0 FD | 	call	#popregs_
1558c                 | _do_le_ret
1558c     2D 00 64 FD | 	ret
15590                 | 
15590                 | ' 
15590                 | ' 
15590                 | ' sub do_ne
15590                 | _do_ne
15590     05 4A 05 F6 | 	mov	COUNT_, #5
15594     A8 00 A0 FD | 	call	#pushregs_
15598     18 F0 07 F1 | 	add	ptra, #24
1559c     04 64 BF FD | 	call	#_pop
155a0     FD 1E 02 F6 | 	mov	local01, result1
155a4     FE 20 02 F6 | 	mov	local02, result2
155a8     FF 22 02 F6 | 	mov	local03, result3
155ac     0C 4E 05 F1 | 	add	fp, #12
155b0     A7 1E 62 FC | 	wrlong	local01, fp
155b4     04 4E 05 F1 | 	add	fp, #4
155b8     A7 20 62 FC | 	wrlong	local02, fp
155bc     04 4E 05 F1 | 	add	fp, #4
155c0     A7 22 62 FC | 	wrlong	local03, fp
155c4     14 4E 85 F1 | 	sub	fp, #20
155c8     D8 63 BF FD | 	call	#_pop
155cc     FF 22 02 F6 | 	mov	local03, result3
155d0     A7 FA 61 FC | 	wrlong	result1, fp
155d4     04 4E 05 F1 | 	add	fp, #4
155d8     A7 FC 61 FC | 	wrlong	result2, fp
155dc     04 4E 05 F1 | 	add	fp, #4
155e0     A7 22 62 FC | 	wrlong	local03, fp
155e4                 | ' t2=pop()
155e4                 | ' t1=pop()
155e4                 | ' 
155e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
155e4     08 4E 85 F1 | 	sub	fp, #8
155e8     1F 22 0E F2 | 	cmp	local03, #31 wz
155ec     14 4E 05 A1 |  if_e	add	fp, #20
155f0     A7 24 02 AB |  if_e	rdlong	local04, fp
155f4     14 4E 85 A1 |  if_e	sub	fp, #20
155f8     12 23 02 A6 |  if_e	mov	local03, local04
155fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15600     28 00 90 5D |  if_ne	jmp	#LR__1720
15604     00 1E 06 F6 | 	mov	local01, #0
15608     A7 12 02 FB | 	rdlong	arg01, fp
1560c     0C 4E 05 F1 | 	add	fp, #12
15610     A7 14 02 FB | 	rdlong	arg02, fp
15614     0C 4E 85 F1 | 	sub	fp, #12
15618     34 B1 B0 FD | 	call	#__system___string_cmp
1561c     00 FA 0D F2 | 	cmp	result1, #0 wz
15620     00 1E 26 56 |  if_ne	not	local01, #0
15624     A7 1E 62 FC | 	wrlong	local01, fp
15628     1C 04 90 FD | 	jmp	#LR__1733
1562c                 | LR__1720
1562c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1562c     08 4E 05 F1 | 	add	fp, #8
15630     A7 1E 02 FB | 	rdlong	local01, fp
15634     08 4E 85 F1 | 	sub	fp, #8
15638     1E 1E 0E F2 | 	cmp	local01, #30 wz
1563c     14 4E 05 A1 |  if_e	add	fp, #20
15640     A7 24 02 AB |  if_e	rdlong	local04, fp
15644     14 4E 85 A1 |  if_e	sub	fp, #20
15648     12 23 02 A6 |  if_e	mov	local03, local04
1564c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15650     2C 00 90 5D |  if_ne	jmp	#LR__1721
15654     00 1E 06 F6 | 	mov	local01, #0
15658     A7 12 02 FB | 	rdlong	arg01, fp
1565c     0C 4E 05 F1 | 	add	fp, #12
15660     A7 14 02 FB | 	rdlong	arg02, fp
15664     0C 4E 85 F1 | 	sub	fp, #12
15668     01 16 06 F6 | 	mov	arg03, #1
1566c     A0 E0 B0 FD | 	call	#__system___float_cmp
15670     00 FA 0D F2 | 	cmp	result1, #0 wz
15674     00 1E 26 56 |  if_ne	not	local01, #0
15678     A7 1E 62 FC | 	wrlong	local01, fp
1567c     C8 03 90 FD | 	jmp	#LR__1733
15680                 | LR__1721
15680                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
15680     08 4E 05 F1 | 	add	fp, #8
15684     A7 1E 02 FB | 	rdlong	local01, fp
15688     08 4E 85 F1 | 	sub	fp, #8
1568c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15690     14 4E 05 A1 |  if_e	add	fp, #20
15694     A7 24 02 AB |  if_e	rdlong	local04, fp
15698     14 4E 85 A1 |  if_e	sub	fp, #20
1569c     12 23 02 A6 |  if_e	mov	local03, local04
156a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
156a4     48 00 90 5D |  if_ne	jmp	#LR__1722
156a8     00 1E 06 F6 | 	mov	local01, #0
156ac     A7 20 02 FB | 	rdlong	local02, fp
156b0     0C 4E 05 F1 | 	add	fp, #12
156b4     A7 12 02 FB | 	rdlong	arg01, fp
156b8     0C 4E 85 F1 | 	sub	fp, #12
156bc     09 13 52 F6 | 	abs	arg01, arg01 wc
156c0     1F 26 C6 C9 |  if_b	decod	local05, #31
156c4     00 26 06 36 |  if_ae	mov	local05, #0
156c8     0C D8 B0 FD | 	call	#__system___float_fromuns
156cc     13 FB 61 F5 | 	xor	result1, local05
156d0     FD 14 02 F6 | 	mov	arg02, result1
156d4     10 13 02 F6 | 	mov	arg01, local02
156d8     01 16 06 F6 | 	mov	arg03, #1
156dc     30 E0 B0 FD | 	call	#__system___float_cmp
156e0     00 FA 0D F2 | 	cmp	result1, #0 wz
156e4     00 1E 26 56 |  if_ne	not	local01, #0
156e8     A7 1E 62 FC | 	wrlong	local01, fp
156ec     58 03 90 FD | 	jmp	#LR__1733
156f0                 | LR__1722
156f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
156f0     08 4E 05 F1 | 	add	fp, #8
156f4     A7 1E 02 FB | 	rdlong	local01, fp
156f8     08 4E 85 F1 | 	sub	fp, #8
156fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
15700     14 4E 05 A1 |  if_e	add	fp, #20
15704     A7 24 02 AB |  if_e	rdlong	local04, fp
15708     14 4E 85 A1 |  if_e	sub	fp, #20
1570c     12 23 02 A6 |  if_e	mov	local03, local04
15710     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15714     38 00 90 5D |  if_ne	jmp	#LR__1723
15718     00 1E 06 F6 | 	mov	local01, #0
1571c     A7 20 02 FB | 	rdlong	local02, fp
15720     0C 4E 05 F1 | 	add	fp, #12
15724     A7 12 02 FB | 	rdlong	arg01, fp
15728     0C 4E 85 F1 | 	sub	fp, #12
1572c     A8 D7 B0 FD | 	call	#__system___float_fromuns
15730     FD 14 02 F6 | 	mov	arg02, result1
15734     10 13 02 F6 | 	mov	arg01, local02
15738     01 16 06 F6 | 	mov	arg03, #1
1573c     D0 DF B0 FD | 	call	#__system___float_cmp
15740     00 FA 0D F2 | 	cmp	result1, #0 wz
15744     00 1E 26 56 |  if_ne	not	local01, #0
15748     A7 1E 62 FC | 	wrlong	local01, fp
1574c     F8 02 90 FD | 	jmp	#LR__1733
15750                 | LR__1723
15750                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
15750     08 4E 05 F1 | 	add	fp, #8
15754     A7 1E 02 FB | 	rdlong	local01, fp
15758     08 4E 85 F1 | 	sub	fp, #8
1575c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15760     14 4E 05 A1 |  if_e	add	fp, #20
15764     A7 24 02 AB |  if_e	rdlong	local04, fp
15768     14 4E 85 A1 |  if_e	sub	fp, #20
1576c     12 23 02 A6 |  if_e	mov	local03, local04
15770     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15774     44 00 90 5D |  if_ne	jmp	#LR__1724
15778     00 1E 06 F6 | 	mov	local01, #0
1577c     A7 12 02 FB | 	rdlong	arg01, fp
15780     09 13 52 F6 | 	abs	arg01, arg01 wc
15784     1F 26 C6 C9 |  if_b	decod	local05, #31
15788     00 26 06 36 |  if_ae	mov	local05, #0
1578c     48 D7 B0 FD | 	call	#__system___float_fromuns
15790     13 FB 61 F5 | 	xor	result1, local05
15794     FD 12 02 F6 | 	mov	arg01, result1
15798     0C 4E 05 F1 | 	add	fp, #12
1579c     A7 14 02 FB | 	rdlong	arg02, fp
157a0     0C 4E 85 F1 | 	sub	fp, #12
157a4     01 16 06 F6 | 	mov	arg03, #1
157a8     64 DF B0 FD | 	call	#__system___float_cmp
157ac     00 FA 0D F2 | 	cmp	result1, #0 wz
157b0     00 1E 26 56 |  if_ne	not	local01, #0
157b4     A7 1E 62 FC | 	wrlong	local01, fp
157b8     8C 02 90 FD | 	jmp	#LR__1733
157bc                 | LR__1724
157bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
157bc     08 4E 05 F1 | 	add	fp, #8
157c0     A7 1E 02 FB | 	rdlong	local01, fp
157c4     08 4E 85 F1 | 	sub	fp, #8
157c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
157cc     14 4E 05 A1 |  if_e	add	fp, #20
157d0     A7 24 02 AB |  if_e	rdlong	local04, fp
157d4     14 4E 85 A1 |  if_e	sub	fp, #20
157d8     12 23 02 A6 |  if_e	mov	local03, local04
157dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
157e0     24 00 90 5D |  if_ne	jmp	#LR__1725
157e4     00 1E 06 F6 | 	mov	local01, #0
157e8     A7 20 02 FB | 	rdlong	local02, fp
157ec     0C 4E 05 F1 | 	add	fp, #12
157f0     A7 22 02 FB | 	rdlong	local03, fp
157f4     0C 4E 85 F1 | 	sub	fp, #12
157f8     11 21 0A F2 | 	cmp	local02, local03 wz
157fc     01 1E 66 56 |  if_ne	neg	local01, #1
15800     A7 1E 62 FC | 	wrlong	local01, fp
15804     40 02 90 FD | 	jmp	#LR__1733
15808                 | LR__1725
15808                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15808     08 4E 05 F1 | 	add	fp, #8
1580c     A7 1E 02 FB | 	rdlong	local01, fp
15810     08 4E 85 F1 | 	sub	fp, #8
15814     1C 1E 0E F2 | 	cmp	local01, #28 wz
15818     14 4E 05 A1 |  if_e	add	fp, #20
1581c     A7 24 02 AB |  if_e	rdlong	local04, fp
15820     14 4E 85 A1 |  if_e	sub	fp, #20
15824     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15828     24 00 90 5D |  if_ne	jmp	#LR__1726
1582c     00 1E 06 F6 | 	mov	local01, #0
15830     A7 20 02 FB | 	rdlong	local02, fp
15834     0C 4E 05 F1 | 	add	fp, #12
15838     A7 22 02 FB | 	rdlong	local03, fp
1583c     0C 4E 85 F1 | 	sub	fp, #12
15840     11 21 0A F2 | 	cmp	local02, local03 wz
15844     01 1E 66 56 |  if_ne	neg	local01, #1
15848     A7 1E 62 FC | 	wrlong	local01, fp
1584c     F8 01 90 FD | 	jmp	#LR__1733
15850                 | LR__1726
15850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
15850     08 4E 05 F1 | 	add	fp, #8
15854     A7 1E 02 FB | 	rdlong	local01, fp
15858     08 4E 85 F1 | 	sub	fp, #8
1585c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15860     14 4E 05 A1 |  if_e	add	fp, #20
15864     A7 22 02 AB |  if_e	rdlong	local03, fp
15868     14 4E 85 A1 |  if_e	sub	fp, #20
1586c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15870     34 00 90 5D |  if_ne	jmp	#LR__1727
15874     00 1E 06 F6 | 	mov	local01, #0
15878     A7 12 02 FB | 	rdlong	arg01, fp
1587c     58 D6 B0 FD | 	call	#__system___float_fromuns
15880     FD 12 02 F6 | 	mov	arg01, result1
15884     0C 4E 05 F1 | 	add	fp, #12
15888     A7 14 02 FB | 	rdlong	arg02, fp
1588c     0C 4E 85 F1 | 	sub	fp, #12
15890     01 16 06 F6 | 	mov	arg03, #1
15894     78 DE B0 FD | 	call	#__system___float_cmp
15898     00 FA 0D F2 | 	cmp	result1, #0 wz
1589c     00 1E 26 56 |  if_ne	not	local01, #0
158a0     A7 1E 62 FC | 	wrlong	local01, fp
158a4     A0 01 90 FD | 	jmp	#LR__1733
158a8                 | LR__1727
158a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
158a8     08 4E 05 F1 | 	add	fp, #8
158ac     A7 1E 02 FB | 	rdlong	local01, fp
158b0     08 4E 85 F1 | 	sub	fp, #8
158b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
158b8     14 4E 05 A1 |  if_e	add	fp, #20
158bc     A7 22 02 AB |  if_e	rdlong	local03, fp
158c0     14 4E 85 A1 |  if_e	sub	fp, #20
158c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
158c8     24 00 90 5D |  if_ne	jmp	#LR__1728
158cc     00 1E 06 F6 | 	mov	local01, #0
158d0     A7 20 02 FB | 	rdlong	local02, fp
158d4     0C 4E 05 F1 | 	add	fp, #12
158d8     A7 22 02 FB | 	rdlong	local03, fp
158dc     0C 4E 85 F1 | 	sub	fp, #12
158e0     11 21 0A F2 | 	cmp	local02, local03 wz
158e4     01 1E 66 56 |  if_ne	neg	local01, #1
158e8     A7 1E 62 FC | 	wrlong	local01, fp
158ec     58 01 90 FD | 	jmp	#LR__1733
158f0                 | LR__1728
158f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
158f0     08 4E 05 F1 | 	add	fp, #8
158f4     A7 1E 02 FB | 	rdlong	local01, fp
158f8     08 4E 85 F1 | 	sub	fp, #8
158fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
15900     14 4E 05 A1 |  if_e	add	fp, #20
15904     A7 22 02 AB |  if_e	rdlong	local03, fp
15908     14 4E 85 A1 |  if_e	sub	fp, #20
1590c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15910     24 00 90 5D |  if_ne	jmp	#LR__1729
15914     00 1E 06 F6 | 	mov	local01, #0
15918     A7 20 02 FB | 	rdlong	local02, fp
1591c     0C 4E 05 F1 | 	add	fp, #12
15920     A7 22 02 FB | 	rdlong	local03, fp
15924     0C 4E 85 F1 | 	sub	fp, #12
15928     11 21 0A F2 | 	cmp	local02, local03 wz
1592c     01 1E 66 56 |  if_ne	neg	local01, #1
15930     A7 1E 62 FC | 	wrlong	local01, fp
15934     10 01 90 FD | 	jmp	#LR__1733
15938                 | LR__1729
15938                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15938     08 4E 05 F1 | 	add	fp, #8
1593c     A7 1E 02 FB | 	rdlong	local01, fp
15940     08 4E 85 F1 | 	sub	fp, #8
15944     2B 1E 0E F2 | 	cmp	local01, #43 wz
15948     14 4E 05 A1 |  if_e	add	fp, #20
1594c     A7 22 02 AB |  if_e	rdlong	local03, fp
15950     14 4E 85 A1 |  if_e	sub	fp, #20
15954     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15958     30 00 90 5D |  if_ne	jmp	#LR__1730
1595c     00 1E 06 F6 | 	mov	local01, #0
15960     A7 12 02 FB | 	rdlong	arg01, fp
15964     DC B8 BF FD | 	call	#_convertstring
15968     FD 12 02 F6 | 	mov	arg01, result1
1596c     0C 4E 05 F1 | 	add	fp, #12
15970     A7 14 02 FB | 	rdlong	arg02, fp
15974     0C 4E 85 F1 | 	sub	fp, #12
15978     D4 AD B0 FD | 	call	#__system___string_cmp
1597c     00 FA 0D F2 | 	cmp	result1, #0 wz
15980     00 1E 26 56 |  if_ne	not	local01, #0
15984     A7 1E 62 FC | 	wrlong	local01, fp
15988     BC 00 90 FD | 	jmp	#LR__1733
1598c                 | LR__1730
1598c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1598c     08 4E 05 F1 | 	add	fp, #8
15990     A7 1E 02 FB | 	rdlong	local01, fp
15994     08 4E 85 F1 | 	sub	fp, #8
15998     1F 1E 0E F2 | 	cmp	local01, #31 wz
1599c     14 4E 05 A1 |  if_e	add	fp, #20
159a0     A7 22 02 AB |  if_e	rdlong	local03, fp
159a4     14 4E 85 A1 |  if_e	sub	fp, #20
159a8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
159ac     34 00 90 5D |  if_ne	jmp	#LR__1731
159b0     00 1E 06 F6 | 	mov	local01, #0
159b4     A7 20 02 FB | 	rdlong	local02, fp
159b8     0C 4E 05 F1 | 	add	fp, #12
159bc     A7 12 02 FB | 	rdlong	arg01, fp
159c0     0C 4E 85 F1 | 	sub	fp, #12
159c4     7C B8 BF FD | 	call	#_convertstring
159c8     FD 14 02 F6 | 	mov	arg02, result1
159cc     10 13 02 F6 | 	mov	arg01, local02
159d0     7C AD B0 FD | 	call	#__system___string_cmp
159d4     00 FA 0D F2 | 	cmp	result1, #0 wz
159d8     00 1E 26 56 |  if_ne	not	local01, #0
159dc     A7 1E 62 FC | 	wrlong	local01, fp
159e0     64 00 90 FD | 	jmp	#LR__1733
159e4                 | LR__1731
159e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
159e4     08 4E 05 F1 | 	add	fp, #8
159e8     A7 1E 02 FB | 	rdlong	local01, fp
159ec     08 4E 85 F1 | 	sub	fp, #8
159f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
159f4     14 4E 05 A1 |  if_e	add	fp, #20
159f8     A7 22 02 AB |  if_e	rdlong	local03, fp
159fc     14 4E 85 A1 |  if_e	sub	fp, #20
15a00     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15a04     3C 00 90 5D |  if_ne	jmp	#LR__1732
15a08     00 1E 06 F6 | 	mov	local01, #0
15a0c     A7 12 02 FB | 	rdlong	arg01, fp
15a10     30 B8 BF FD | 	call	#_convertstring
15a14     FD 20 02 F6 | 	mov	local02, result1
15a18     0C 4E 05 F1 | 	add	fp, #12
15a1c     A7 12 02 FB | 	rdlong	arg01, fp
15a20     0C 4E 85 F1 | 	sub	fp, #12
15a24     1C B8 BF FD | 	call	#_convertstring
15a28     FD 14 02 F6 | 	mov	arg02, result1
15a2c     10 13 02 F6 | 	mov	arg01, local02
15a30     1C AD B0 FD | 	call	#__system___string_cmp
15a34     00 FA 0D F2 | 	cmp	result1, #0 wz
15a38     00 1E 26 56 |  if_ne	not	local01, #0
15a3c     A7 1E 62 FC | 	wrlong	local01, fp
15a40     04 00 90 FD | 	jmp	#LR__1733
15a44                 | LR__1732
15a44     A7 00 68 FC | 	wrlong	#0, fp
15a48                 | LR__1733
15a48     08 4E 05 F1 | 	add	fp, #8
15a4c     A7 38 68 FC | 	wrlong	#28, fp
15a50     08 4E 85 F1 | 	sub	fp, #8
15a54     A7 12 02 F6 | 	mov	arg01, fp
15a58     E0 5F BF FD | 	call	#_push
15a5c     A7 F0 03 F6 | 	mov	ptra, fp
15a60     B2 00 A0 FD | 	call	#popregs_
15a64                 | _do_ne_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | ' 
15a68                 | ' 
15a68                 | ' 
15a68                 | ' function converttoint (t1 as expr_result) as integer 
15a68                 | _converttoint
15a68     02 4A 05 F6 | 	mov	COUNT_, #2
15a6c     A8 00 A0 FD | 	call	#pushregs_
15a70     09 1F 02 F6 | 	mov	local01, arg01
15a74                 | ' 
15a74                 | ' select case t1.result_type
15a74     08 1E 06 F1 | 	add	local01, #8
15a78     0F 21 02 FB | 	rdlong	local02, local01
15a7c     08 1E 86 F1 | 	sub	local01, #8
15a80     1C 20 0E F2 | 	cmp	local02, #28 wz
15a84     2C 00 90 AD |  if_e	jmp	#LR__1740
15a88     1D 20 0E F2 | 	cmp	local02, #29 wz
15a8c     2C 00 90 AD |  if_e	jmp	#LR__1741
15a90     1E 20 0E F2 | 	cmp	local02, #30 wz
15a94     2C 00 90 AD |  if_e	jmp	#LR__1742
15a98     1F 20 0E F2 | 	cmp	local02, #31 wz
15a9c     34 00 90 AD |  if_e	jmp	#LR__1743
15aa0     2B 20 0E F2 | 	cmp	local02, #43 wz
15aa4     44 00 90 AD |  if_e	jmp	#LR__1744
15aa8     2C 20 0E F2 | 	cmp	local02, #44 wz
15aac     5C 00 90 AD |  if_e	jmp	#LR__1745
15ab0     60 00 90 FD | 	jmp	#LR__1746
15ab4                 | LR__1740
15ab4     0F FB 01 FB | 	rdlong	result1, local01
15ab8     5C 00 90 FD | 	jmp	#LR__1747
15abc                 | LR__1741
15abc     0F FB 01 FB | 	rdlong	result1, local01
15ac0     54 00 90 FD | 	jmp	#LR__1747
15ac4                 | LR__1742
15ac4     0F 13 02 FB | 	rdlong	arg01, local01
15ac8     01 14 06 F6 | 	mov	arg02, #1
15acc     D4 DC B0 FD | 	call	#__system___float_tointeger
15ad0     44 00 90 FD | 	jmp	#LR__1747
15ad4                 | LR__1743
15ad4     0F 13 02 FB | 	rdlong	arg01, local01
15ad8     E8 DF B0 FD | 	call	#__system____builtin_atof
15adc     FD 12 02 F6 | 	mov	arg01, result1
15ae0     01 14 06 F6 | 	mov	arg02, #1
15ae4     BC DC B0 FD | 	call	#__system___float_tointeger
15ae8     2C 00 90 FD | 	jmp	#LR__1747
15aec                 | LR__1744
15aec     0F 13 02 FB | 	rdlong	arg01, local01
15af0     50 B7 BF FD | 	call	#_convertstring
15af4     FD 12 02 F6 | 	mov	arg01, result1
15af8     C8 DF B0 FD | 	call	#__system____builtin_atof
15afc     FD 12 02 F6 | 	mov	arg01, result1
15b00     01 14 06 F6 | 	mov	arg02, #1
15b04     9C DC B0 FD | 	call	#__system___float_tointeger
15b08     0C 00 90 FD | 	jmp	#LR__1747
15b0c                 | LR__1745
15b0c     0F FB 01 FB | 	rdlong	result1, local01
15b10     04 00 90 FD | 	jmp	#LR__1747
15b14                 | LR__1746
15b14     00 FA 05 F6 | 	mov	result1, #0
15b18                 | LR__1747
15b18     A7 F0 03 F6 | 	mov	ptra, fp
15b1c     B2 00 A0 FD | 	call	#popregs_
15b20                 | _converttoint_ret
15b20     2D 00 64 FD | 	ret
15b24                 | 
15b24                 | ' 
15b24                 | ' function converttofloat (t1 as expr_result) as single
15b24                 | _converttofloat
15b24     03 4A 05 F6 | 	mov	COUNT_, #3
15b28     A8 00 A0 FD | 	call	#pushregs_
15b2c     09 1F 02 F6 | 	mov	local01, arg01
15b30                 | ' 
15b30                 | ' select case t1.result_type
15b30     08 1E 06 F1 | 	add	local01, #8
15b34     0F 21 02 FB | 	rdlong	local02, local01
15b38     08 1E 86 F1 | 	sub	local01, #8
15b3c     1C 20 0E F2 | 	cmp	local02, #28 wz
15b40     24 00 90 AD |  if_e	jmp	#LR__1750
15b44     1D 20 0E F2 | 	cmp	local02, #29 wz
15b48     38 00 90 AD |  if_e	jmp	#LR__1751
15b4c     1E 20 0E F2 | 	cmp	local02, #30 wz
15b50     3C 00 90 AD |  if_e	jmp	#LR__1752
15b54     1F 20 0E F2 | 	cmp	local02, #31 wz
15b58     3C 00 90 AD |  if_e	jmp	#LR__1753
15b5c     2B 20 0E F2 | 	cmp	local02, #43 wz
15b60     40 00 90 AD |  if_e	jmp	#LR__1754
15b64     50 00 90 FD | 	jmp	#LR__1755
15b68                 | LR__1750
15b68     0F 13 02 FB | 	rdlong	arg01, local01
15b6c     09 13 52 F6 | 	abs	arg01, arg01 wc
15b70     1F 22 C6 C9 |  if_b	decod	local03, #31
15b74     00 22 06 36 |  if_ae	mov	local03, #0
15b78     5C D3 B0 FD | 	call	#__system___float_fromuns
15b7c     11 FB 61 F5 | 	xor	result1, local03
15b80     38 00 90 FD | 	jmp	#LR__1756
15b84                 | LR__1751
15b84     0F 13 02 FB | 	rdlong	arg01, local01
15b88     4C D3 B0 FD | 	call	#__system___float_fromuns
15b8c     2C 00 90 FD | 	jmp	#LR__1756
15b90                 | LR__1752
15b90     0F FB 01 FB | 	rdlong	result1, local01
15b94     24 00 90 FD | 	jmp	#LR__1756
15b98                 | LR__1753
15b98     0F 13 02 FB | 	rdlong	arg01, local01
15b9c     24 DF B0 FD | 	call	#__system____builtin_atof
15ba0     18 00 90 FD | 	jmp	#LR__1756
15ba4                 | LR__1754
15ba4     0F 13 02 FB | 	rdlong	arg01, local01
15ba8     98 B6 BF FD | 	call	#_convertstring
15bac     FD 12 02 F6 | 	mov	arg01, result1
15bb0     10 DF B0 FD | 	call	#__system____builtin_atof
15bb4     04 00 90 FD | 	jmp	#LR__1756
15bb8                 | LR__1755
15bb8     00 FA 05 F6 | 	mov	result1, #0
15bbc                 | LR__1756
15bbc     A7 F0 03 F6 | 	mov	ptra, fp
15bc0     B2 00 A0 FD | 	call	#popregs_
15bc4                 | _converttofloat_ret
15bc4     2D 00 64 FD | 	ret
15bc8                 | 
15bc8                 | ' 
15bc8                 | ' sub do_rnd
15bc8                 | _do_rnd
15bc8     01 4A 05 F6 | 	mov	COUNT_, #1
15bcc     A8 00 A0 FD | 	call	#pushregs_
15bd0     10 F0 07 F1 | 	add	ptra, #16
15bd4     4A 00 00 FF 
15bd8     80 E4 05 F1 | 	add	objptr, ##38016
15bdc     F2 1E 02 FB | 	rdlong	local01, objptr
15be0     0F 17 02 F6 | 	mov	arg03, local01
15be4     01 16 66 F0 | 	shl	arg03, #1
15be8     0F 17 02 F1 | 	add	arg03, local01
15bec     02 16 66 F0 | 	shl	arg03, #2
15bf0     03 00 00 FF 
15bf4     04 E4 85 F1 | 	sub	objptr, ##1540
15bf8     F2 16 02 F1 | 	add	arg03, objptr
15bfc     0B 17 02 FB | 	rdlong	arg03, arg03
15c00     0C 4E 05 F1 | 	add	fp, #12
15c04     A7 16 62 FC | 	wrlong	arg03, fp
15c08                 | ' 
15c08                 | ' numpar=compiledline(lineptr_e).result.uresult
15c08                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15c08     0C 4E 85 F1 | 	sub	fp, #12
15c0c     02 16 16 F2 | 	cmp	arg03, #2 wc
15c10     47 00 00 FF 
15c14     7C E4 85 F1 | 	sub	objptr, ##36476
15c18     3C 00 90 CD |  if_b	jmp	#LR__1760
15c1c     00 12 06 F6 | 	mov	arg01, #0
15c20     44 05 B1 FD | 	call	#__system___getiolock_0540
15c24     FD 12 02 F6 | 	mov	arg01, result1
15c28     FC AA B0 FD | 	call	#__system___lockmem
15c2c     83 01 00 FF 
15c30     F4 14 06 F6 | 	mov	arg02, ##@LR__5455
15c34     00 12 06 F6 | 	mov	arg01, #0
15c38     00 16 06 F6 | 	mov	arg03, #0
15c3c     DC B7 B0 FD | 	call	#__system___basic_print_string
15c40     00 12 06 F6 | 	mov	arg01, #0
15c44     20 05 B1 FD | 	call	#__system___getiolock_0540
15c48     FD 00 68 FC | 	wrlong	#0, result1
15c4c     27 12 06 F6 | 	mov	arg01, #39
15c50     70 77 B0 FD | 	call	#_printerror
15c54     2C 01 90 FD | 	jmp	#LR__1767
15c58                 | LR__1760
15c58                 | ' if numpar=0 then
15c58     0C 4E 05 F1 | 	add	fp, #12
15c5c     A7 FE 09 FB | 	rdlong	result3, fp wz
15c60     0C 4E 85 F1 | 	sub	fp, #12
15c64     20 00 90 5D |  if_ne	jmp	#LR__1761
15c68     08 4E 05 F1 | 	add	fp, #8
15c6c     A7 3A 68 FC | 	wrlong	#29, fp
15c70     08 4E 85 F1 | 	sub	fp, #8
15c74     1B FA 61 FD | 	getrnd	result1
15c78     A7 FA 61 FC | 	wrlong	result1, fp
15c7c     A7 12 02 F6 | 	mov	arg01, fp
15c80     B8 5D BF FD | 	call	#_push
15c84     FC 00 90 FD | 	jmp	#LR__1766
15c88                 | LR__1761
15c88     18 5D BF FD | 	call	#_pop
15c8c     A7 FA 61 FC | 	wrlong	result1, fp
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 FC 61 FC | 	wrlong	result2, fp
15c98     04 4E 05 F1 | 	add	fp, #4
15c9c     A7 FE 61 FC | 	wrlong	result3, fp
15ca0                 | '   t1=pop()
15ca0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15ca0     08 4E 85 F1 | 	sub	fp, #8
15ca4     1C FE 0D F2 | 	cmp	result3, #28 wz
15ca8     08 4E 05 51 |  if_ne	add	fp, #8
15cac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15cb0     08 4E 85 51 |  if_ne	sub	fp, #8
15cb4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15cb8     2C 00 90 5D |  if_ne	jmp	#LR__1762
15cbc     1B FA 61 FD | 	getrnd	result1
15cc0     A7 1E 02 FB | 	rdlong	local01, fp
15cc4     0F FB 11 FD | 	qdiv	result1, local01
15cc8     A7 12 02 F6 | 	mov	arg01, fp
15ccc     19 1E 62 FD | 	getqy	local01
15cd0     A7 1E 62 FC | 	wrlong	local01, fp
15cd4     08 4E 05 F1 | 	add	fp, #8
15cd8     A7 3A 68 FC | 	wrlong	#29, fp
15cdc     08 4E 85 F1 | 	sub	fp, #8
15ce0     58 5D BF FD | 	call	#_push
15ce4     9C 00 90 FD | 	jmp	#LR__1765
15ce8                 | LR__1762
15ce8     08 4E 05 F1 | 	add	fp, #8
15cec     A7 1E 02 FB | 	rdlong	local01, fp
15cf0     08 4E 85 F1 | 	sub	fp, #8
15cf4     1E 1E 0E F2 | 	cmp	local01, #30 wz
15cf8     48 00 90 5D |  if_ne	jmp	#LR__1763
15cfc     A7 12 02 FB | 	rdlong	arg01, fp
15d00     00 C0 24 FF 
15d04     00 14 06 F6 | 	mov	arg02, ##1233125376
15d08     D4 D7 B0 FD | 	call	#__system___float_div
15d0c     FD 1E 02 F6 | 	mov	local01, result1
15d10     1B 12 62 FD | 	getrnd	arg01
15d14     74 13 06 F4 | 	bitl	arg01, #372
15d18     BC D1 B0 FD | 	call	#__system___float_fromuns
15d1c     FD 14 02 F6 | 	mov	arg02, result1
15d20     0F 13 02 F6 | 	mov	arg01, local01
15d24     B4 D5 B0 FD | 	call	#__system___float_mul
15d28     A7 FA 61 FC | 	wrlong	result1, fp
15d2c     08 4E 05 F1 | 	add	fp, #8
15d30     A7 3C 68 FC | 	wrlong	#30, fp
15d34     08 4E 85 F1 | 	sub	fp, #8
15d38     A7 12 02 F6 | 	mov	arg01, fp
15d3c     FC 5C BF FD | 	call	#_push
15d40     40 00 90 FD | 	jmp	#LR__1764
15d44                 | LR__1763
15d44                 | '     print "rnd: "; : printerror(40) 
15d44     00 12 06 F6 | 	mov	arg01, #0
15d48     1C 04 B1 FD | 	call	#__system___getiolock_0540
15d4c     FD 12 02 F6 | 	mov	arg01, result1
15d50     D4 A9 B0 FD | 	call	#__system___lockmem
15d54     83 01 00 FF 
15d58     FA 14 06 F6 | 	mov	arg02, ##@LR__5456
15d5c     00 12 06 F6 | 	mov	arg01, #0
15d60     00 16 06 F6 | 	mov	arg03, #0
15d64     B4 B6 B0 FD | 	call	#__system___basic_print_string
15d68     00 12 06 F6 | 	mov	arg01, #0
15d6c     F8 03 B1 FD | 	call	#__system___getiolock_0540
15d70     FD 00 68 FC | 	wrlong	#0, result1
15d74     28 12 06 F6 | 	mov	arg01, #40
15d78     48 76 B0 FD | 	call	#_printerror
15d7c     A7 12 02 F6 | 	mov	arg01, fp
15d80     B8 5C BF FD | 	call	#_push
15d84                 | LR__1764
15d84                 | LR__1765
15d84                 | LR__1766
15d84                 | LR__1767
15d84     A7 F0 03 F6 | 	mov	ptra, fp
15d88     B2 00 A0 FD | 	call	#popregs_
15d8c                 | _do_rnd_ret
15d8c     2D 00 64 FD | 	ret
15d90                 | 
15d90                 | ' 
15d90                 | ' sub do_getenvsustain
15d90                 | _do_getenvsustain
15d90     01 4A 05 F6 | 	mov	COUNT_, #1
15d94     A8 00 A0 FD | 	call	#pushregs_
15d98     10 F0 07 F1 | 	add	ptra, #16
15d9c     4A 00 00 FF 
15da0     80 E4 05 F1 | 	add	objptr, ##38016
15da4     F2 1E 02 FB | 	rdlong	local01, objptr
15da8     0F 17 02 F6 | 	mov	arg03, local01
15dac     01 16 66 F0 | 	shl	arg03, #1
15db0     0F 17 02 F1 | 	add	arg03, local01
15db4     02 16 66 F0 | 	shl	arg03, #2
15db8     03 00 00 FF 
15dbc     04 E4 85 F1 | 	sub	objptr, ##1540
15dc0     F2 16 02 F1 | 	add	arg03, objptr
15dc4     0B 17 02 FB | 	rdlong	arg03, arg03
15dc8     0C 4E 05 F1 | 	add	fp, #12
15dcc     A7 16 62 FC | 	wrlong	arg03, fp
15dd0                 | ' 
15dd0                 | ' numpar=compiledline(lineptr_e).result.uresult
15dd0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15dd0     0C 4E 85 F1 | 	sub	fp, #12
15dd4     02 16 16 F2 | 	cmp	arg03, #2 wc
15dd8     47 00 00 FF 
15ddc     7C E4 85 F1 | 	sub	objptr, ##36476
15de0     0C 4E 05 C1 |  if_b	add	fp, #12
15de4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15de8     0C 4E 85 C1 |  if_b	sub	fp, #12
15dec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15df0     00 12 06 F6 | 	mov	arg01, #0
15df4     70 03 B1 FD | 	call	#__system___getiolock_0540
15df8     FD 12 02 F6 | 	mov	arg01, result1
15dfc     28 A9 B0 FD | 	call	#__system___lockmem
15e00     83 01 00 FF 
15e04     00 15 06 F6 | 	mov	arg02, ##@LR__5457
15e08     00 12 06 F6 | 	mov	arg01, #0
15e0c     00 16 06 F6 | 	mov	arg03, #0
15e10     08 B6 B0 FD | 	call	#__system___basic_print_string
15e14     00 12 06 F6 | 	mov	arg01, #0
15e18     4C 03 B1 FD | 	call	#__system___getiolock_0540
15e1c     FD 00 68 FC | 	wrlong	#0, result1
15e20     27 12 06 F6 | 	mov	arg01, #39
15e24     9C 75 B0 FD | 	call	#_printerror
15e28     64 00 90 FD | 	jmp	#LR__1771
15e2c                 | LR__1770
15e2c     74 5B BF FD | 	call	#_pop
15e30     FD 1E 02 F6 | 	mov	local01, result1
15e34     FE 16 02 F6 | 	mov	arg03, result2
15e38     A7 1E 62 FC | 	wrlong	local01, fp
15e3c     04 4E 05 F1 | 	add	fp, #4
15e40     A7 16 62 FC | 	wrlong	arg03, fp
15e44     04 4E 05 F1 | 	add	fp, #4
15e48     A7 FE 61 FC | 	wrlong	result3, fp
15e4c     08 4E 85 F1 | 	sub	fp, #8
15e50     A7 12 02 F6 | 	mov	arg01, fp
15e54     10 FC BF FD | 	call	#_converttoint
15e58     FD 1E 02 F6 | 	mov	local01, result1
15e5c     01 1E 66 F0 | 	shl	local01, #1
15e60     51 00 00 FF 
15e64     C4 E5 05 F1 | 	add	objptr, ##41924
15e68     F2 1E 02 F1 | 	add	local01, objptr
15e6c     0F 1F E2 FA | 	rdword	local01, local01
15e70     A7 1E 62 FC | 	wrlong	local01, fp
15e74     08 4E 05 F1 | 	add	fp, #8
15e78     A7 38 68 FC | 	wrlong	#28, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     51 00 00 FF 
15e88     C4 E5 85 F1 | 	sub	objptr, ##41924
15e8c     AC 5B BF FD | 	call	#_push
15e90                 | LR__1771
15e90     A7 F0 03 F6 | 	mov	ptra, fp
15e94     B2 00 A0 FD | 	call	#popregs_
15e98                 | _do_getenvsustain_ret
15e98     2D 00 64 FD | 	ret
15e9c                 | 
15e9c                 | ' 
15e9c                 | ' sub do_sin
15e9c                 | _do_sin
15e9c     01 4A 05 F6 | 	mov	COUNT_, #1
15ea0     A8 00 A0 FD | 	call	#pushregs_
15ea4     10 F0 07 F1 | 	add	ptra, #16
15ea8     4A 00 00 FF 
15eac     80 E4 05 F1 | 	add	objptr, ##38016
15eb0     F2 1E 02 FB | 	rdlong	local01, objptr
15eb4     0F 17 02 F6 | 	mov	arg03, local01
15eb8     01 16 66 F0 | 	shl	arg03, #1
15ebc     0F 17 02 F1 | 	add	arg03, local01
15ec0     02 16 66 F0 | 	shl	arg03, #2
15ec4     03 00 00 FF 
15ec8     04 E4 85 F1 | 	sub	objptr, ##1540
15ecc     F2 16 02 F1 | 	add	arg03, objptr
15ed0     0B 17 02 FB | 	rdlong	arg03, arg03
15ed4     0C 4E 05 F1 | 	add	fp, #12
15ed8     A7 16 62 FC | 	wrlong	arg03, fp
15edc                 | ' 
15edc                 | ' numpar=compiledline(lineptr_e).result.uresult
15edc                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
15edc     0C 4E 85 F1 | 	sub	fp, #12
15ee0     02 16 16 F2 | 	cmp	arg03, #2 wc
15ee4     47 00 00 FF 
15ee8     7C E4 85 F1 | 	sub	objptr, ##36476
15eec     0C 4E 05 C1 |  if_b	add	fp, #12
15ef0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15ef4     0C 4E 85 C1 |  if_b	sub	fp, #12
15ef8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15efc     00 12 06 F6 | 	mov	arg01, #0
15f00     64 02 B1 FD | 	call	#__system___getiolock_0540
15f04     FD 12 02 F6 | 	mov	arg01, result1
15f08     1C A8 B0 FD | 	call	#__system___lockmem
15f0c     83 01 00 FF 
15f10     10 15 06 F6 | 	mov	arg02, ##@LR__5458
15f14     00 12 06 F6 | 	mov	arg01, #0
15f18     00 16 06 F6 | 	mov	arg03, #0
15f1c     FC B4 B0 FD | 	call	#__system___basic_print_string
15f20     00 12 06 F6 | 	mov	arg01, #0
15f24     40 02 B1 FD | 	call	#__system___getiolock_0540
15f28     FD 00 68 FC | 	wrlong	#0, result1
15f2c     27 12 06 F6 | 	mov	arg01, #39
15f30     90 74 B0 FD | 	call	#_printerror
15f34     64 00 90 FD | 	jmp	#LR__1781
15f38                 | LR__1780
15f38     68 5A BF FD | 	call	#_pop
15f3c     A7 FA 61 FC | 	wrlong	result1, fp
15f40     04 4E 05 F1 | 	add	fp, #4
15f44     A7 FC 61 FC | 	wrlong	result2, fp
15f48     04 4E 05 F1 | 	add	fp, #4
15f4c     A7 FE 61 FC | 	wrlong	result3, fp
15f50     08 4E 85 F1 | 	sub	fp, #8
15f54     51 00 00 FF 
15f58     B8 E5 05 F1 | 	add	objptr, ##41912
15f5c     F2 1E 02 FB | 	rdlong	local01, objptr
15f60     51 00 00 FF 
15f64     B8 E5 85 F1 | 	sub	objptr, ##41912
15f68     A7 12 02 F6 | 	mov	arg01, fp
15f6c     B4 FB BF FD | 	call	#_converttofloat
15f70     FD 14 02 F6 | 	mov	arg02, result1
15f74     0F 13 02 F6 | 	mov	arg01, local01
15f78     60 D3 B0 FD | 	call	#__system___float_mul
15f7c     FD 12 02 F6 | 	mov	arg01, result1
15f80     94 DC B0 FD | 	call	#__system____builtin_sinf
15f84     A7 FA 61 FC | 	wrlong	result1, fp
15f88     08 4E 05 F1 | 	add	fp, #8
15f8c     A7 3C 68 FC | 	wrlong	#30, fp
15f90     08 4E 85 F1 | 	sub	fp, #8
15f94     A7 12 02 F6 | 	mov	arg01, fp
15f98     A0 5A BF FD | 	call	#_push
15f9c                 | LR__1781
15f9c     A7 F0 03 F6 | 	mov	ptra, fp
15fa0     B2 00 A0 FD | 	call	#popregs_
15fa4                 | _do_sin_ret
15fa4     2D 00 64 FD | 	ret
15fa8                 | 
15fa8                 | ' 
15fa8                 | ' 
15fa8                 | ' sub do_mid
15fa8                 | _do_mid
15fa8     00 4A 05 F6 | 	mov	COUNT_, #0
15fac     A8 00 A0 FD | 	call	#pushregs_
15fb0     18 F0 07 F1 | 	add	ptra, #24
15fb4     4A 00 00 FF 
15fb8     80 E4 05 F1 | 	add	objptr, ##38016
15fbc     F2 16 02 FB | 	rdlong	arg03, objptr
15fc0     0B 15 02 F6 | 	mov	arg02, arg03
15fc4     01 14 66 F0 | 	shl	arg02, #1
15fc8     0B 15 02 F1 | 	add	arg02, arg03
15fcc     02 14 66 F0 | 	shl	arg02, #2
15fd0     03 00 00 FF 
15fd4     04 E4 85 F1 | 	sub	objptr, ##1540
15fd8     F2 14 02 F1 | 	add	arg02, objptr
15fdc     0A 17 02 FB | 	rdlong	arg03, arg02
15fe0     0C 4E 05 F1 | 	add	fp, #12
15fe4     A7 16 62 FC | 	wrlong	arg03, fp
15fe8                 | ' 
15fe8                 | ' numpar=compiledline(lineptr_e).result.uresult
15fe8                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15fe8     0C 4E 85 F1 | 	sub	fp, #12
15fec     03 16 0E F2 | 	cmp	arg03, #3 wz
15ff0     47 00 00 FF 
15ff4     7C E4 85 F1 | 	sub	objptr, ##36476
15ff8     3C 00 90 AD |  if_e	jmp	#LR__1790
15ffc     00 12 06 F6 | 	mov	arg01, #0
16000     64 01 B1 FD | 	call	#__system___getiolock_0540
16004     FD 12 02 F6 | 	mov	arg01, result1
16008     1C A7 B0 FD | 	call	#__system___lockmem
1600c     83 01 00 FF 
16010     16 15 06 F6 | 	mov	arg02, ##@LR__5459
16014     00 12 06 F6 | 	mov	arg01, #0
16018     00 16 06 F6 | 	mov	arg03, #0
1601c     FC B3 B0 FD | 	call	#__system___basic_print_string
16020     00 12 06 F6 | 	mov	arg01, #0
16024     40 01 B1 FD | 	call	#__system___getiolock_0540
16028     FD 00 68 FC | 	wrlong	#0, result1
1602c     27 12 06 F6 | 	mov	arg01, #39
16030     90 73 B0 FD | 	call	#_printerror
16034     28 01 90 FD | 	jmp	#LR__1793
16038                 | LR__1790
16038     68 59 BF FD | 	call	#_pop
1603c     FF 16 02 F6 | 	mov	arg03, result3
16040     A7 FA 61 FC | 	wrlong	result1, fp
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 FC 61 FC | 	wrlong	result2, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 16 62 FC | 	wrlong	arg03, fp
16054     08 4E 85 F1 | 	sub	fp, #8
16058     A7 12 02 F6 | 	mov	arg01, fp
1605c     08 FA BF FD | 	call	#_converttoint
16060     FD 16 02 F6 | 	mov	arg03, result1
16064     14 4E 05 F1 | 	add	fp, #20
16068     A7 16 62 FC | 	wrlong	arg03, fp
1606c     14 4E 85 F1 | 	sub	fp, #20
16070     30 59 BF FD | 	call	#_pop
16074     FF 16 02 F6 | 	mov	arg03, result3
16078     A7 FA 61 FC | 	wrlong	result1, fp
1607c     04 4E 05 F1 | 	add	fp, #4
16080     A7 FC 61 FC | 	wrlong	result2, fp
16084     04 4E 05 F1 | 	add	fp, #4
16088     A7 16 62 FC | 	wrlong	arg03, fp
1608c     08 4E 85 F1 | 	sub	fp, #8
16090     A7 12 02 F6 | 	mov	arg01, fp
16094     D0 F9 BF FD | 	call	#_converttoint
16098     FD 16 02 F6 | 	mov	arg03, result1
1609c     10 4E 05 F1 | 	add	fp, #16
160a0     A7 16 62 FC | 	wrlong	arg03, fp
160a4     10 4E 85 F1 | 	sub	fp, #16
160a8     F8 58 BF FD | 	call	#_pop
160ac     FF 16 02 F6 | 	mov	arg03, result3
160b0     A7 FA 61 FC | 	wrlong	result1, fp
160b4     04 4E 05 F1 | 	add	fp, #4
160b8     A7 FC 61 FC | 	wrlong	result2, fp
160bc     04 4E 05 F1 | 	add	fp, #4
160c0     A7 16 62 FC | 	wrlong	arg03, fp
160c4                 | ' t1=pop() : arg2=converttoint(t1)
160c4                 | ' t1=pop() : arg1=converttoint(t1)
160c4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
160c4     08 4E 85 F1 | 	sub	fp, #8
160c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
160cc     18 00 90 5D |  if_ne	jmp	#LR__1791
160d0     A7 12 02 FB | 	rdlong	arg01, fp
160d4     6C B1 BF FD | 	call	#_convertstring
160d8     A7 FA 61 FC | 	wrlong	result1, fp
160dc     08 4E 05 F1 | 	add	fp, #8
160e0     A7 3E 68 FC | 	wrlong	#31, fp
160e4     08 4E 85 F1 | 	sub	fp, #8
160e8                 | LR__1791
160e8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
160e8     08 4E 05 F1 | 	add	fp, #8
160ec     A7 16 02 FB | 	rdlong	arg03, fp
160f0     08 4E 85 F1 | 	sub	fp, #8
160f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
160f8     3C 00 90 AD |  if_e	jmp	#LR__1792
160fc     00 12 06 F6 | 	mov	arg01, #0
16100     64 00 B1 FD | 	call	#__system___getiolock_0540
16104     FD 12 02 F6 | 	mov	arg01, result1
16108     1C A6 B0 FD | 	call	#__system___lockmem
1610c     83 01 00 FF 
16110     1D 15 06 F6 | 	mov	arg02, ##@LR__5460
16114     00 12 06 F6 | 	mov	arg01, #0
16118     00 16 06 F6 | 	mov	arg03, #0
1611c     FC B2 B0 FD | 	call	#__system___basic_print_string
16120     00 12 06 F6 | 	mov	arg01, #0
16124     40 00 B1 FD | 	call	#__system___getiolock_0540
16128     FD 00 68 FC | 	wrlong	#0, result1
1612c     0F 12 06 F6 | 	mov	arg01, #15
16130     90 72 B0 FD | 	call	#_printerror
16134     28 00 90 FD | 	jmp	#LR__1793
16138                 | LR__1792
16138     A7 12 02 FB | 	rdlong	arg01, fp
1613c     10 4E 05 F1 | 	add	fp, #16
16140     A7 14 02 FB | 	rdlong	arg02, fp
16144     04 4E 05 F1 | 	add	fp, #4
16148     A7 16 02 FB | 	rdlong	arg03, fp
1614c     14 4E 85 F1 | 	sub	fp, #20
16150     68 C7 B0 FD | 	call	#__system__Mid_S
16154     A7 FA 61 FC | 	wrlong	result1, fp
16158     A7 12 02 F6 | 	mov	arg01, fp
1615c     DC 58 BF FD | 	call	#_push
16160                 | LR__1793
16160     A7 F0 03 F6 | 	mov	ptra, fp
16164     B2 00 A0 FD | 	call	#popregs_
16168                 | _do_mid_ret
16168     2D 00 64 FD | 	ret
1616c                 | 
1616c                 | ' 
1616c                 | ' sub do_right
1616c                 | _do_right
1616c     00 4A 05 F6 | 	mov	COUNT_, #0
16170     A8 00 A0 FD | 	call	#pushregs_
16174     14 F0 07 F1 | 	add	ptra, #20
16178     4A 00 00 FF 
1617c     80 E4 05 F1 | 	add	objptr, ##38016
16180     F2 16 02 FB | 	rdlong	arg03, objptr
16184     0B 15 02 F6 | 	mov	arg02, arg03
16188     01 14 66 F0 | 	shl	arg02, #1
1618c     0B 15 02 F1 | 	add	arg02, arg03
16190     02 14 66 F0 | 	shl	arg02, #2
16194     03 00 00 FF 
16198     04 E4 85 F1 | 	sub	objptr, ##1540
1619c     F2 14 02 F1 | 	add	arg02, objptr
161a0     0A 17 02 FB | 	rdlong	arg03, arg02
161a4     0C 4E 05 F1 | 	add	fp, #12
161a8     A7 16 62 FC | 	wrlong	arg03, fp
161ac                 | ' 
161ac                 | ' numpar=compiledline(lineptr_e).result.uresult
161ac                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
161ac     0C 4E 85 F1 | 	sub	fp, #12
161b0     02 16 0E F2 | 	cmp	arg03, #2 wz
161b4     47 00 00 FF 
161b8     7C E4 85 F1 | 	sub	objptr, ##36476
161bc     3C 00 90 AD |  if_e	jmp	#LR__1800
161c0     00 12 06 F6 | 	mov	arg01, #0
161c4     A0 FF B0 FD | 	call	#__system___getiolock_0540
161c8     FD 12 02 F6 | 	mov	arg01, result1
161cc     58 A5 B0 FD | 	call	#__system___lockmem
161d0     83 01 00 FF 
161d4     24 15 06 F6 | 	mov	arg02, ##@LR__5461
161d8     00 12 06 F6 | 	mov	arg01, #0
161dc     00 16 06 F6 | 	mov	arg03, #0
161e0     38 B2 B0 FD | 	call	#__system___basic_print_string
161e4     00 12 06 F6 | 	mov	arg01, #0
161e8     7C FF B0 FD | 	call	#__system___getiolock_0540
161ec     FD 00 68 FC | 	wrlong	#0, result1
161f0     27 12 06 F6 | 	mov	arg01, #39
161f4     CC 71 B0 FD | 	call	#_printerror
161f8     E8 00 90 FD | 	jmp	#LR__1803
161fc                 | LR__1800
161fc     A4 57 BF FD | 	call	#_pop
16200     FF 16 02 F6 | 	mov	arg03, result3
16204     A7 FA 61 FC | 	wrlong	result1, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 FC 61 FC | 	wrlong	result2, fp
16210     04 4E 05 F1 | 	add	fp, #4
16214     A7 16 62 FC | 	wrlong	arg03, fp
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     A7 12 02 F6 | 	mov	arg01, fp
16220     44 F8 BF FD | 	call	#_converttoint
16224     FD 16 02 F6 | 	mov	arg03, result1
16228     10 4E 05 F1 | 	add	fp, #16
1622c     A7 16 62 FC | 	wrlong	arg03, fp
16230     10 4E 85 F1 | 	sub	fp, #16
16234     6C 57 BF FD | 	call	#_pop
16238     FF 16 02 F6 | 	mov	arg03, result3
1623c     A7 FA 61 FC | 	wrlong	result1, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 FC 61 FC | 	wrlong	result2, fp
16248     04 4E 05 F1 | 	add	fp, #4
1624c     A7 16 62 FC | 	wrlong	arg03, fp
16250                 | ' t1=pop() : arg=converttoint(t1)
16250                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16250     08 4E 85 F1 | 	sub	fp, #8
16254     2B 16 0E F2 | 	cmp	arg03, #43 wz
16258     18 00 90 5D |  if_ne	jmp	#LR__1801
1625c     A7 12 02 FB | 	rdlong	arg01, fp
16260     E0 AF BF FD | 	call	#_convertstring
16264     A7 FA 61 FC | 	wrlong	result1, fp
16268     08 4E 05 F1 | 	add	fp, #8
1626c     A7 3E 68 FC | 	wrlong	#31, fp
16270     08 4E 85 F1 | 	sub	fp, #8
16274                 | LR__1801
16274                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
16274     08 4E 05 F1 | 	add	fp, #8
16278     A7 16 02 FB | 	rdlong	arg03, fp
1627c     08 4E 85 F1 | 	sub	fp, #8
16280     1F 16 0E F2 | 	cmp	arg03, #31 wz
16284     3C 00 90 AD |  if_e	jmp	#LR__1802
16288     00 12 06 F6 | 	mov	arg01, #0
1628c     D8 FE B0 FD | 	call	#__system___getiolock_0540
16290     FD 12 02 F6 | 	mov	arg01, result1
16294     90 A4 B0 FD | 	call	#__system___lockmem
16298     83 01 00 FF 
1629c     2D 15 06 F6 | 	mov	arg02, ##@LR__5462
162a0     00 12 06 F6 | 	mov	arg01, #0
162a4     00 16 06 F6 | 	mov	arg03, #0
162a8     70 B1 B0 FD | 	call	#__system___basic_print_string
162ac     00 12 06 F6 | 	mov	arg01, #0
162b0     B4 FE B0 FD | 	call	#__system___getiolock_0540
162b4     FD 00 68 FC | 	wrlong	#0, result1
162b8     0F 12 06 F6 | 	mov	arg01, #15
162bc     04 71 B0 FD | 	call	#_printerror
162c0     20 00 90 FD | 	jmp	#LR__1803
162c4                 | LR__1802
162c4     A7 12 02 FB | 	rdlong	arg01, fp
162c8     10 4E 05 F1 | 	add	fp, #16
162cc     A7 14 02 FB | 	rdlong	arg02, fp
162d0     10 4E 85 F1 | 	sub	fp, #16
162d4     54 C5 B0 FD | 	call	#__system__Right_S
162d8     A7 FA 61 FC | 	wrlong	result1, fp
162dc     A7 12 02 F6 | 	mov	arg01, fp
162e0     58 57 BF FD | 	call	#_push
162e4                 | LR__1803
162e4     A7 F0 03 F6 | 	mov	ptra, fp
162e8     B2 00 A0 FD | 	call	#popregs_
162ec                 | _do_right_ret
162ec     2D 00 64 FD | 	ret
162f0                 | 
162f0                 | ' 
162f0                 | ' sub do_left
162f0                 | _do_left
162f0     00 4A 05 F6 | 	mov	COUNT_, #0
162f4     A8 00 A0 FD | 	call	#pushregs_
162f8     14 F0 07 F1 | 	add	ptra, #20
162fc     4A 00 00 FF 
16300     80 E4 05 F1 | 	add	objptr, ##38016
16304     F2 16 02 FB | 	rdlong	arg03, objptr
16308     0B 15 02 F6 | 	mov	arg02, arg03
1630c     01 14 66 F0 | 	shl	arg02, #1
16310     0B 15 02 F1 | 	add	arg02, arg03
16314     02 14 66 F0 | 	shl	arg02, #2
16318     03 00 00 FF 
1631c     04 E4 85 F1 | 	sub	objptr, ##1540
16320     F2 14 02 F1 | 	add	arg02, objptr
16324     0A 17 02 FB | 	rdlong	arg03, arg02
16328     0C 4E 05 F1 | 	add	fp, #12
1632c     A7 16 62 FC | 	wrlong	arg03, fp
16330                 | ' 
16330                 | ' numpar=compiledline(lineptr_e).result.uresult
16330                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
16330     0C 4E 85 F1 | 	sub	fp, #12
16334     02 16 0E F2 | 	cmp	arg03, #2 wz
16338     47 00 00 FF 
1633c     7C E4 85 F1 | 	sub	objptr, ##36476
16340     3C 00 90 AD |  if_e	jmp	#LR__1810
16344     00 12 06 F6 | 	mov	arg01, #0
16348     1C FE B0 FD | 	call	#__system___getiolock_0540
1634c     FD 12 02 F6 | 	mov	arg01, result1
16350     D4 A3 B0 FD | 	call	#__system___lockmem
16354     83 01 00 FF 
16358     36 15 06 F6 | 	mov	arg02, ##@LR__5463
1635c     00 12 06 F6 | 	mov	arg01, #0
16360     00 16 06 F6 | 	mov	arg03, #0
16364     B4 B0 B0 FD | 	call	#__system___basic_print_string
16368     00 12 06 F6 | 	mov	arg01, #0
1636c     F8 FD B0 FD | 	call	#__system___getiolock_0540
16370     FD 00 68 FC | 	wrlong	#0, result1
16374     27 12 06 F6 | 	mov	arg01, #39
16378     48 70 B0 FD | 	call	#_printerror
1637c     E8 00 90 FD | 	jmp	#LR__1813
16380                 | LR__1810
16380     20 56 BF FD | 	call	#_pop
16384     FF 16 02 F6 | 	mov	arg03, result3
16388     A7 FA 61 FC | 	wrlong	result1, fp
1638c     04 4E 05 F1 | 	add	fp, #4
16390     A7 FC 61 FC | 	wrlong	result2, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 16 62 FC | 	wrlong	arg03, fp
1639c     08 4E 85 F1 | 	sub	fp, #8
163a0     A7 12 02 F6 | 	mov	arg01, fp
163a4     C0 F6 BF FD | 	call	#_converttoint
163a8     FD 16 02 F6 | 	mov	arg03, result1
163ac     10 4E 05 F1 | 	add	fp, #16
163b0     A7 16 62 FC | 	wrlong	arg03, fp
163b4     10 4E 85 F1 | 	sub	fp, #16
163b8     E8 55 BF FD | 	call	#_pop
163bc     FF 16 02 F6 | 	mov	arg03, result3
163c0     A7 FA 61 FC | 	wrlong	result1, fp
163c4     04 4E 05 F1 | 	add	fp, #4
163c8     A7 FC 61 FC | 	wrlong	result2, fp
163cc     04 4E 05 F1 | 	add	fp, #4
163d0     A7 16 62 FC | 	wrlong	arg03, fp
163d4                 | ' t1=pop() : arg=converttoint(t1)
163d4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
163d4     08 4E 85 F1 | 	sub	fp, #8
163d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
163dc     18 00 90 5D |  if_ne	jmp	#LR__1811
163e0     A7 12 02 FB | 	rdlong	arg01, fp
163e4     5C AE BF FD | 	call	#_convertstring
163e8     A7 FA 61 FC | 	wrlong	result1, fp
163ec     08 4E 05 F1 | 	add	fp, #8
163f0     A7 3E 68 FC | 	wrlong	#31, fp
163f4     08 4E 85 F1 | 	sub	fp, #8
163f8                 | LR__1811
163f8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
163f8     08 4E 05 F1 | 	add	fp, #8
163fc     A7 16 02 FB | 	rdlong	arg03, fp
16400     08 4E 85 F1 | 	sub	fp, #8
16404     1F 16 0E F2 | 	cmp	arg03, #31 wz
16408     3C 00 90 AD |  if_e	jmp	#LR__1812
1640c     00 12 06 F6 | 	mov	arg01, #0
16410     54 FD B0 FD | 	call	#__system___getiolock_0540
16414     FD 12 02 F6 | 	mov	arg01, result1
16418     0C A3 B0 FD | 	call	#__system___lockmem
1641c     83 01 00 FF 
16420     3E 15 06 F6 | 	mov	arg02, ##@LR__5464
16424     00 12 06 F6 | 	mov	arg01, #0
16428     00 16 06 F6 | 	mov	arg03, #0
1642c     EC AF B0 FD | 	call	#__system___basic_print_string
16430     00 12 06 F6 | 	mov	arg01, #0
16434     30 FD B0 FD | 	call	#__system___getiolock_0540
16438     FD 00 68 FC | 	wrlong	#0, result1
1643c     0F 12 06 F6 | 	mov	arg01, #15
16440     80 6F B0 FD | 	call	#_printerror
16444     20 00 90 FD | 	jmp	#LR__1813
16448                 | LR__1812
16448     A7 12 02 FB | 	rdlong	arg01, fp
1644c     10 4E 05 F1 | 	add	fp, #16
16450     A7 14 02 FB | 	rdlong	arg02, fp
16454     10 4E 85 F1 | 	sub	fp, #16
16458     48 C3 B0 FD | 	call	#__system__Left_S
1645c     A7 FA 61 FC | 	wrlong	result1, fp
16460     A7 12 02 F6 | 	mov	arg01, fp
16464     D4 55 BF FD | 	call	#_push
16468                 | LR__1813
16468     A7 F0 03 F6 | 	mov	ptra, fp
1646c     B2 00 A0 FD | 	call	#popregs_
16470                 | _do_left_ret
16470     2D 00 64 FD | 	ret
16474                 | 
16474                 | ' 
16474                 | ' sub do_asc
16474                 | _do_asc
16474     01 4A 05 F6 | 	mov	COUNT_, #1
16478     A8 00 A0 FD | 	call	#pushregs_
1647c     14 F0 07 F1 | 	add	ptra, #20
16480     4A 00 00 FF 
16484     80 E4 05 F1 | 	add	objptr, ##38016
16488     F2 1E 02 FB | 	rdlong	local01, objptr
1648c     0F 17 02 F6 | 	mov	arg03, local01
16490     01 16 66 F0 | 	shl	arg03, #1
16494     0F 17 02 F1 | 	add	arg03, local01
16498     02 16 66 F0 | 	shl	arg03, #2
1649c     03 00 00 FF 
164a0     04 E4 85 F1 | 	sub	objptr, ##1540
164a4     F2 16 02 F1 | 	add	arg03, objptr
164a8     0B 17 02 FB | 	rdlong	arg03, arg03
164ac     0C 4E 05 F1 | 	add	fp, #12
164b0     A7 16 62 FC | 	wrlong	arg03, fp
164b4                 | ' 
164b4                 | ' numpar=compiledline(lineptr_e).result.uresult
164b4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
164b4     0C 4E 85 F1 | 	sub	fp, #12
164b8     02 16 16 F2 | 	cmp	arg03, #2 wc
164bc     47 00 00 FF 
164c0     7C E4 85 F1 | 	sub	objptr, ##36476
164c4     0C 4E 05 C1 |  if_b	add	fp, #12
164c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
164cc     0C 4E 85 C1 |  if_b	sub	fp, #12
164d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
164d4     00 12 06 F6 | 	mov	arg01, #0
164d8     8C FC B0 FD | 	call	#__system___getiolock_0540
164dc     FD 12 02 F6 | 	mov	arg01, result1
164e0     44 A2 B0 FD | 	call	#__system___lockmem
164e4     83 01 00 FF 
164e8     46 15 06 F6 | 	mov	arg02, ##@LR__5465
164ec     00 12 06 F6 | 	mov	arg01, #0
164f0     00 16 06 F6 | 	mov	arg03, #0
164f4     24 AF B0 FD | 	call	#__system___basic_print_string
164f8     00 12 06 F6 | 	mov	arg01, #0
164fc     68 FC B0 FD | 	call	#__system___getiolock_0540
16500     FD 00 68 FC | 	wrlong	#0, result1
16504     27 12 06 F6 | 	mov	arg01, #39
16508     B8 6E B0 FD | 	call	#_printerror
1650c     B0 00 90 FD | 	jmp	#LR__1823
16510                 | LR__1820
16510     90 54 BF FD | 	call	#_pop
16514     FF 16 02 F6 | 	mov	arg03, result3
16518     A7 FA 61 FC | 	wrlong	result1, fp
1651c     04 4E 05 F1 | 	add	fp, #4
16520     A7 FC 61 FC | 	wrlong	result2, fp
16524     04 4E 05 F1 | 	add	fp, #4
16528     A7 16 62 FC | 	wrlong	arg03, fp
1652c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1652c     08 4E 85 F1 | 	sub	fp, #8
16530     2B 16 0E F2 | 	cmp	arg03, #43 wz
16534     18 00 90 5D |  if_ne	jmp	#LR__1821
16538     A7 12 02 FB | 	rdlong	arg01, fp
1653c     04 AD BF FD | 	call	#_convertstring
16540     A7 FA 61 FC | 	wrlong	result1, fp
16544     08 4E 05 F1 | 	add	fp, #8
16548     A7 3E 68 FC | 	wrlong	#31, fp
1654c     08 4E 85 F1 | 	sub	fp, #8
16550                 | LR__1821
16550                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
16550     08 4E 05 F1 | 	add	fp, #8
16554     A7 16 02 FB | 	rdlong	arg03, fp
16558     08 4E 85 F1 | 	sub	fp, #8
1655c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16560     3C 00 90 AD |  if_e	jmp	#LR__1822
16564     00 12 06 F6 | 	mov	arg01, #0
16568     FC FB B0 FD | 	call	#__system___getiolock_0540
1656c     FD 12 02 F6 | 	mov	arg01, result1
16570     B4 A1 B0 FD | 	call	#__system___lockmem
16574     83 01 00 FF 
16578     4C 15 06 F6 | 	mov	arg02, ##@LR__5466
1657c     00 12 06 F6 | 	mov	arg01, #0
16580     00 16 06 F6 | 	mov	arg03, #0
16584     94 AE B0 FD | 	call	#__system___basic_print_string
16588     00 12 06 F6 | 	mov	arg01, #0
1658c     D8 FB B0 FD | 	call	#__system___getiolock_0540
16590     FD 00 68 FC | 	wrlong	#0, result1
16594     0F 12 06 F6 | 	mov	arg01, #15
16598     28 6E B0 FD | 	call	#_printerror
1659c     20 00 90 FD | 	jmp	#LR__1823
165a0                 | LR__1822
165a0     A7 1E 02 FB | 	rdlong	local01, fp
165a4     0F 1F C2 FA | 	rdbyte	local01, local01
165a8     A7 1E 62 FC | 	wrlong	local01, fp
165ac     08 4E 05 F1 | 	add	fp, #8
165b0     A7 38 68 FC | 	wrlong	#28, fp
165b4     08 4E 85 F1 | 	sub	fp, #8
165b8     A7 12 02 F6 | 	mov	arg01, fp
165bc     7C 54 BF FD | 	call	#_push
165c0                 | LR__1823
165c0     A7 F0 03 F6 | 	mov	ptra, fp
165c4     B2 00 A0 FD | 	call	#popregs_
165c8                 | _do_asc_ret
165c8     2D 00 64 FD | 	ret
165cc                 | 
165cc                 | ' 
165cc                 | ' sub do_len
165cc                 | _do_len
165cc     02 4A 05 F6 | 	mov	COUNT_, #2
165d0     A8 00 A0 FD | 	call	#pushregs_
165d4     14 F0 07 F1 | 	add	ptra, #20
165d8     4A 00 00 FF 
165dc     80 E4 05 F1 | 	add	objptr, ##38016
165e0     F2 1E 02 FB | 	rdlong	local01, objptr
165e4     0F 17 02 F6 | 	mov	arg03, local01
165e8     01 16 66 F0 | 	shl	arg03, #1
165ec     0F 17 02 F1 | 	add	arg03, local01
165f0     02 16 66 F0 | 	shl	arg03, #2
165f4     03 00 00 FF 
165f8     04 E4 85 F1 | 	sub	objptr, ##1540
165fc     F2 16 02 F1 | 	add	arg03, objptr
16600     0B 17 02 FB | 	rdlong	arg03, arg03
16604     0C 4E 05 F1 | 	add	fp, #12
16608     A7 16 62 FC | 	wrlong	arg03, fp
1660c                 | ' 
1660c                 | ' numpar=compiledline(lineptr_e).result.uresult
1660c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1660c     0C 4E 85 F1 | 	sub	fp, #12
16610     02 16 16 F2 | 	cmp	arg03, #2 wc
16614     47 00 00 FF 
16618     7C E4 85 F1 | 	sub	objptr, ##36476
1661c     0C 4E 05 C1 |  if_b	add	fp, #12
16620     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16624     0C 4E 85 C1 |  if_b	sub	fp, #12
16628     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
1662c     00 12 06 F6 | 	mov	arg01, #0
16630     34 FB B0 FD | 	call	#__system___getiolock_0540
16634     FD 12 02 F6 | 	mov	arg01, result1
16638     EC A0 B0 FD | 	call	#__system___lockmem
1663c     83 01 00 FF 
16640     52 15 06 F6 | 	mov	arg02, ##@LR__5467
16644     00 12 06 F6 | 	mov	arg01, #0
16648     00 16 06 F6 | 	mov	arg03, #0
1664c     CC AD B0 FD | 	call	#__system___basic_print_string
16650     00 12 06 F6 | 	mov	arg01, #0
16654     10 FB B0 FD | 	call	#__system___getiolock_0540
16658     FD 00 68 FC | 	wrlong	#0, result1
1665c     27 12 06 F6 | 	mov	arg01, #39
16660     60 6D B0 FD | 	call	#_printerror
16664     C4 00 90 FD | 	jmp	#LR__1835
16668                 | LR__1830
16668     38 53 BF FD | 	call	#_pop
1666c     FF 16 02 F6 | 	mov	arg03, result3
16670     A7 FA 61 FC | 	wrlong	result1, fp
16674     04 4E 05 F1 | 	add	fp, #4
16678     A7 FC 61 FC | 	wrlong	result2, fp
1667c     04 4E 05 F1 | 	add	fp, #4
16680     A7 16 62 FC | 	wrlong	arg03, fp
16684                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16684     08 4E 85 F1 | 	sub	fp, #8
16688     2B 16 0E F2 | 	cmp	arg03, #43 wz
1668c     18 00 90 5D |  if_ne	jmp	#LR__1831
16690     A7 12 02 FB | 	rdlong	arg01, fp
16694     AC AB BF FD | 	call	#_convertstring
16698     A7 FA 61 FC | 	wrlong	result1, fp
1669c     08 4E 05 F1 | 	add	fp, #8
166a0     A7 3E 68 FC | 	wrlong	#31, fp
166a4     08 4E 85 F1 | 	sub	fp, #8
166a8                 | LR__1831
166a8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
166a8     08 4E 05 F1 | 	add	fp, #8
166ac     A7 16 02 FB | 	rdlong	arg03, fp
166b0     08 4E 85 F1 | 	sub	fp, #8
166b4     1F 16 0E F2 | 	cmp	arg03, #31 wz
166b8     3C 00 90 AD |  if_e	jmp	#LR__1832
166bc     00 12 06 F6 | 	mov	arg01, #0
166c0     A4 FA B0 FD | 	call	#__system___getiolock_0540
166c4     FD 12 02 F6 | 	mov	arg01, result1
166c8     5C A0 B0 FD | 	call	#__system___lockmem
166cc     83 01 00 FF 
166d0     58 15 06 F6 | 	mov	arg02, ##@LR__5468
166d4     00 12 06 F6 | 	mov	arg01, #0
166d8     00 16 06 F6 | 	mov	arg03, #0
166dc     3C AD B0 FD | 	call	#__system___basic_print_string
166e0     00 12 06 F6 | 	mov	arg01, #0
166e4     80 FA B0 FD | 	call	#__system___getiolock_0540
166e8     FD 00 68 FC | 	wrlong	#0, result1
166ec     0F 12 06 F6 | 	mov	arg01, #15
166f0     D0 6C B0 FD | 	call	#_printerror
166f4     34 00 90 FD | 	jmp	#LR__1835
166f8                 | LR__1832
166f8     A7 12 02 FB | 	rdlong	arg01, fp
166fc     09 21 02 F6 | 	mov	local02, arg01
16700     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
16704                 | LR__1833
16704     10 FB C9 FA | 	rdbyte	result1, local02 wz
16708     01 20 06 51 |  if_ne	add	local02, #1
1670c     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
16710                 | LR__1834
16710     09 21 82 F1 | 	sub	local02, arg01
16714     A7 20 62 FC | 	wrlong	local02, fp
16718     08 4E 05 F1 | 	add	fp, #8
1671c     A7 38 68 FC | 	wrlong	#28, fp
16720     08 4E 85 F1 | 	sub	fp, #8
16724     A7 12 02 F6 | 	mov	arg01, fp
16728     10 53 BF FD | 	call	#_push
1672c                 | LR__1835
1672c     A7 F0 03 F6 | 	mov	ptra, fp
16730     B2 00 A0 FD | 	call	#popregs_
16734                 | _do_len_ret
16734     2D 00 64 FD | 	ret
16738                 | 
16738                 | ' 
16738                 | ' sub do_chr
16738                 | _do_chr
16738     01 4A 05 F6 | 	mov	COUNT_, #1
1673c     A8 00 A0 FD | 	call	#pushregs_
16740     14 F0 07 F1 | 	add	ptra, #20
16744     4A 00 00 FF 
16748     80 E4 05 F1 | 	add	objptr, ##38016
1674c     F2 1E 02 FB | 	rdlong	local01, objptr
16750     0F 17 02 F6 | 	mov	arg03, local01
16754     01 16 66 F0 | 	shl	arg03, #1
16758     0F 17 02 F1 | 	add	arg03, local01
1675c     02 16 66 F0 | 	shl	arg03, #2
16760     03 00 00 FF 
16764     04 E4 85 F1 | 	sub	objptr, ##1540
16768     F2 16 02 F1 | 	add	arg03, objptr
1676c     0B 17 02 FB | 	rdlong	arg03, arg03
16770     0C 4E 05 F1 | 	add	fp, #12
16774     A7 16 62 FC | 	wrlong	arg03, fp
16778                 | ' 
16778                 | ' numpar=compiledline(lineptr_e).result.uresult
16778                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16778     0C 4E 85 F1 | 	sub	fp, #12
1677c     02 16 16 F2 | 	cmp	arg03, #2 wc
16780     47 00 00 FF 
16784     7C E4 85 F1 | 	sub	objptr, ##36476
16788     0C 4E 05 C1 |  if_b	add	fp, #12
1678c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16790     0C 4E 85 C1 |  if_b	sub	fp, #12
16794     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16798     00 12 06 F6 | 	mov	arg01, #0
1679c     C8 F9 B0 FD | 	call	#__system___getiolock_0540
167a0     FD 12 02 F6 | 	mov	arg01, result1
167a4     80 9F B0 FD | 	call	#__system___lockmem
167a8     83 01 00 FF 
167ac     5E 15 06 F6 | 	mov	arg02, ##@LR__5469
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     00 16 06 F6 | 	mov	arg03, #0
167b8     60 AC B0 FD | 	call	#__system___basic_print_string
167bc     00 12 06 F6 | 	mov	arg01, #0
167c0     A4 F9 B0 FD | 	call	#__system___getiolock_0540
167c4     FD 00 68 FC | 	wrlong	#0, result1
167c8     27 12 06 F6 | 	mov	arg01, #39
167cc     F4 6B B0 FD | 	call	#_printerror
167d0     54 00 90 FD | 	jmp	#LR__1841
167d4                 | LR__1840
167d4     CC 51 BF FD | 	call	#_pop
167d8     FF 1E 02 F6 | 	mov	local01, result3
167dc     A7 FA 61 FC | 	wrlong	result1, fp
167e0     04 4E 05 F1 | 	add	fp, #4
167e4     A7 FC 61 FC | 	wrlong	result2, fp
167e8     04 4E 05 F1 | 	add	fp, #4
167ec     A7 1E 62 FC | 	wrlong	local01, fp
167f0     08 4E 85 F1 | 	sub	fp, #8
167f4     A7 12 02 F6 | 	mov	arg01, fp
167f8     6C F2 BF FD | 	call	#_converttoint
167fc     10 4E 05 F1 | 	add	fp, #16
16800     A7 FA 61 FC | 	wrlong	result1, fp
16804     FD 12 02 F6 | 	mov	arg01, result1
16808     10 4E 85 F1 | 	sub	fp, #16
1680c     58 C1 B0 FD | 	call	#__system__Chr_S
16810     A7 FA 61 FC | 	wrlong	result1, fp
16814     08 4E 05 F1 | 	add	fp, #8
16818     A7 3E 68 FC | 	wrlong	#31, fp
1681c     08 4E 85 F1 | 	sub	fp, #8
16820     A7 12 02 F6 | 	mov	arg01, fp
16824     14 52 BF FD | 	call	#_push
16828                 | LR__1841
16828     A7 F0 03 F6 | 	mov	ptra, fp
1682c     B2 00 A0 FD | 	call	#popregs_
16830                 | _do_chr_ret
16830     2D 00 64 FD | 	ret
16834                 | 
16834                 | ' 
16834                 | ' sub do_val
16834                 | _do_val
16834     03 4A 05 F6 | 	mov	COUNT_, #3
16838     A8 00 A0 FD | 	call	#pushregs_
1683c     20 F0 07 F1 | 	add	ptra, #32
16840     4A 00 00 FF 
16844     80 E4 05 F1 | 	add	objptr, ##38016
16848     F2 16 02 FB | 	rdlong	arg03, objptr
1684c     0B 1F 02 F6 | 	mov	local01, arg03
16850     01 1E 66 F0 | 	shl	local01, #1
16854     0B 1F 02 F1 | 	add	local01, arg03
16858     02 1E 66 F0 | 	shl	local01, #2
1685c     03 00 00 FF 
16860     04 E4 85 F1 | 	sub	objptr, ##1540
16864     F2 1E 02 F1 | 	add	local01, objptr
16868     0F 17 02 FB | 	rdlong	arg03, local01
1686c     0C 4E 05 F1 | 	add	fp, #12
16870     A7 16 62 FC | 	wrlong	arg03, fp
16874                 | ' 
16874                 | ' numpar=compiledline(lineptr_e).result.uresult
16874                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
16874     0C 4E 85 F1 | 	sub	fp, #12
16878     02 16 16 F2 | 	cmp	arg03, #2 wc
1687c     47 00 00 FF 
16880     7C E4 85 F1 | 	sub	objptr, ##36476
16884     0C 4E 05 C1 |  if_b	add	fp, #12
16888     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1688c     0C 4E 85 C1 |  if_b	sub	fp, #12
16890     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16894     00 12 06 F6 | 	mov	arg01, #0
16898     CC F8 B0 FD | 	call	#__system___getiolock_0540
1689c     FD 12 02 F6 | 	mov	arg01, result1
168a0     84 9E B0 FD | 	call	#__system___lockmem
168a4     83 01 00 FF 
168a8     65 15 06 F6 | 	mov	arg02, ##@LR__5470
168ac     00 12 06 F6 | 	mov	arg01, #0
168b0     00 16 06 F6 | 	mov	arg03, #0
168b4     64 AB B0 FD | 	call	#__system___basic_print_string
168b8     00 12 06 F6 | 	mov	arg01, #0
168bc     A8 F8 B0 FD | 	call	#__system___getiolock_0540
168c0     FD 00 68 FC | 	wrlong	#0, result1
168c4     27 12 06 F6 | 	mov	arg01, #39
168c8     F8 6A B0 FD | 	call	#_printerror
168cc     5C 02 90 FD | 	jmp	#LR__1863
168d0                 | LR__1850
168d0     D0 50 BF FD | 	call	#_pop
168d4     FF 16 02 F6 | 	mov	arg03, result3
168d8     A7 FA 61 FC | 	wrlong	result1, fp
168dc     04 4E 05 F1 | 	add	fp, #4
168e0     A7 FC 61 FC | 	wrlong	result2, fp
168e4     04 4E 05 F1 | 	add	fp, #4
168e8     A7 16 62 FC | 	wrlong	arg03, fp
168ec                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
168ec     08 4E 85 F1 | 	sub	fp, #8
168f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
168f4     18 00 90 5D |  if_ne	jmp	#LR__1851
168f8     A7 12 02 FB | 	rdlong	arg01, fp
168fc     44 A9 BF FD | 	call	#_convertstring
16900     A7 FA 61 FC | 	wrlong	result1, fp
16904     08 4E 05 F1 | 	add	fp, #8
16908     A7 3E 68 FC | 	wrlong	#31, fp
1690c     08 4E 85 F1 | 	sub	fp, #8
16910                 | LR__1851
16910                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16910     08 4E 05 F1 | 	add	fp, #8
16914     A7 16 02 FB | 	rdlong	arg03, fp
16918     08 4E 85 F1 | 	sub	fp, #8
1691c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16920     3C 00 90 AD |  if_e	jmp	#LR__1852
16924     00 12 06 F6 | 	mov	arg01, #0
16928     3C F8 B0 FD | 	call	#__system___getiolock_0540
1692c     FD 12 02 F6 | 	mov	arg01, result1
16930     F4 9D B0 FD | 	call	#__system___lockmem
16934     83 01 00 FF 
16938     6B 15 06 F6 | 	mov	arg02, ##@LR__5471
1693c     00 12 06 F6 | 	mov	arg01, #0
16940     00 16 06 F6 | 	mov	arg03, #0
16944     D4 AA B0 FD | 	call	#__system___basic_print_string
16948     00 12 06 F6 | 	mov	arg01, #0
1694c     18 F8 B0 FD | 	call	#__system___getiolock_0540
16950     FD 00 68 FC | 	wrlong	#0, result1
16954     0F 12 06 F6 | 	mov	arg01, #15
16958     68 6A B0 FD | 	call	#_printerror
1695c     CC 01 90 FD | 	jmp	#LR__1863
16960                 | LR__1852
16960                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16960     A7 12 02 FB | 	rdlong	arg01, fp
16964     01 14 06 F6 | 	mov	arg02, #1
16968     38 BE B0 FD | 	call	#__system__Left_S
1696c     FD 12 02 F6 | 	mov	arg01, result1
16970     83 01 00 FF 
16974     71 15 06 F6 | 	mov	arg02, ##@LR__5472
16978     D4 9D B0 FD | 	call	#__system___string_cmp
1697c     00 FA 0D F2 | 	cmp	result1, #0 wz
16980     48 00 90 5D |  if_ne	jmp	#LR__1855
16984     83 01 00 FF 
16988     73 1F 06 F6 | 	mov	local01, ##@LR__5473
1698c     A7 16 02 FB | 	rdlong	arg03, fp
16990     0B 13 02 F6 | 	mov	arg01, arg03
16994     09 21 02 F6 | 	mov	local02, arg01
16998     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
1699c                 | LR__1853
1699c     10 FB C9 FA | 	rdbyte	result1, local02 wz
169a0     01 20 06 51 |  if_ne	add	local02, #1
169a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
169a8                 | LR__1854
169a8     09 21 82 F1 | 	sub	local02, arg01
169ac     10 15 02 F6 | 	mov	arg02, local02
169b0     01 14 86 F1 | 	sub	arg02, #1
169b4     0B 13 02 F6 | 	mov	arg01, arg03
169b8     70 BE B0 FD | 	call	#__system__Right_S
169bc     FD 14 02 F6 | 	mov	arg02, result1
169c0     0F 13 02 F6 | 	mov	arg01, local01
169c4     BC 9D B0 FD | 	call	#__system___string_concat
169c8     A7 FA 61 FC | 	wrlong	result1, fp
169cc                 | LR__1855
169cc                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
169cc     A7 12 02 FB | 	rdlong	arg01, fp
169d0     01 14 06 F6 | 	mov	arg02, #1
169d4     CC BD B0 FD | 	call	#__system__Left_S
169d8     FD 12 02 F6 | 	mov	arg01, result1
169dc     83 01 00 FF 
169e0     76 15 06 F6 | 	mov	arg02, ##@LR__5474
169e4     68 9D B0 FD | 	call	#__system___string_cmp
169e8     00 FA 0D F2 | 	cmp	result1, #0 wz
169ec     48 00 90 5D |  if_ne	jmp	#LR__1858
169f0     83 01 00 FF 
169f4     78 1F 06 F6 | 	mov	local01, ##@LR__5475
169f8     A7 16 02 FB | 	rdlong	arg03, fp
169fc     0B 13 02 F6 | 	mov	arg01, arg03
16a00     09 21 02 F6 | 	mov	local02, arg01
16a04     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
16a08                 | LR__1856
16a08     10 FB C9 FA | 	rdbyte	result1, local02 wz
16a0c     01 20 06 51 |  if_ne	add	local02, #1
16a10     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
16a14                 | LR__1857
16a14     09 21 82 F1 | 	sub	local02, arg01
16a18     10 15 02 F6 | 	mov	arg02, local02
16a1c     01 14 86 F1 | 	sub	arg02, #1
16a20     0B 13 02 F6 | 	mov	arg01, arg03
16a24     04 BE B0 FD | 	call	#__system__Right_S
16a28     FD 14 02 F6 | 	mov	arg02, result1
16a2c     0F 13 02 F6 | 	mov	arg01, local01
16a30     50 9D B0 FD | 	call	#__system___string_concat
16a34     A7 FA 61 FC | 	wrlong	result1, fp
16a38                 | LR__1858
16a38     A7 12 02 FB | 	rdlong	arg01, fp
16a3c     84 D0 B0 FD | 	call	#__system____builtin_atof
16a40     1C 4E 05 F1 | 	add	fp, #28
16a44     A7 FA 61 FC | 	wrlong	result1, fp
16a48     1C 4E 85 F1 | 	sub	fp, #28
16a4c     A7 12 02 FB | 	rdlong	arg01, fp
16a50     00 14 06 F6 | 	mov	arg02, #0
16a54     FC CE B0 FD | 	call	#__system____builtin_atoi
16a58     18 4E 05 F1 | 	add	fp, #24
16a5c     A7 FA 61 FC | 	wrlong	result1, fp
16a60                 | ' fval=val(t1.result.sresult)
16a60                 | ' ival=val%(t1.result.sresult)
16a60                 | ' if fval=ival then
16a60     04 4E 05 F1 | 	add	fp, #4
16a64     A7 1E 02 FB | 	rdlong	local01, fp
16a68     1C 4E 85 F1 | 	sub	fp, #28
16a6c     FD 12 52 F6 | 	abs	arg01, result1 wc
16a70     1F 22 C6 C9 |  if_b	decod	local03, #31
16a74     00 22 06 36 |  if_ae	mov	local03, #0
16a78     5C C4 B0 FD | 	call	#__system___float_fromuns
16a7c     11 FB 61 F5 | 	xor	result1, local03
16a80     FD 14 02 F6 | 	mov	arg02, result1
16a84     0F 13 02 F6 | 	mov	arg01, local01
16a88     01 16 06 F6 | 	mov	arg03, #1
16a8c     80 CC B0 FD | 	call	#__system___float_cmp
16a90     00 FA 0D F2 | 	cmp	result1, #0 wz
16a94     20 00 90 5D |  if_ne	jmp	#LR__1859
16a98     18 4E 05 F1 | 	add	fp, #24
16a9c     A7 1E 02 FB | 	rdlong	local01, fp
16aa0     18 4E 85 F1 | 	sub	fp, #24
16aa4     A7 1E 62 FC | 	wrlong	local01, fp
16aa8     08 4E 05 F1 | 	add	fp, #8
16aac     A7 38 68 FC | 	wrlong	#28, fp
16ab0     08 4E 85 F1 | 	sub	fp, #8
16ab4     6C 00 90 FD | 	jmp	#LR__1862
16ab8                 | LR__1859
16ab8                 | '   if fval=0 andalso ival<>0 then
16ab8     1C 4E 05 F1 | 	add	fp, #28
16abc     A7 12 02 FB | 	rdlong	arg01, fp
16ac0     1C 4E 85 F1 | 	sub	fp, #28
16ac4     00 14 06 F6 | 	mov	arg02, #0
16ac8     01 16 06 F6 | 	mov	arg03, #1
16acc     40 CC B0 FD | 	call	#__system___float_cmp
16ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
16ad4     30 00 90 5D |  if_ne	jmp	#LR__1860
16ad8     18 4E 05 F1 | 	add	fp, #24
16adc     A7 1E 0A FB | 	rdlong	local01, fp wz
16ae0     18 4E 85 F1 | 	sub	fp, #24
16ae4     20 00 90 AD |  if_e	jmp	#LR__1860
16ae8     18 4E 05 F1 | 	add	fp, #24
16aec     A7 1E 02 FB | 	rdlong	local01, fp
16af0     18 4E 85 F1 | 	sub	fp, #24
16af4     A7 1E 62 FC | 	wrlong	local01, fp
16af8     08 4E 05 F1 | 	add	fp, #8
16afc     A7 38 68 FC | 	wrlong	#28, fp
16b00     08 4E 85 F1 | 	sub	fp, #8
16b04     1C 00 90 FD | 	jmp	#LR__1861
16b08                 | LR__1860
16b08     1C 4E 05 F1 | 	add	fp, #28
16b0c     A7 1E 02 FB | 	rdlong	local01, fp
16b10     1C 4E 85 F1 | 	sub	fp, #28
16b14     A7 1E 62 FC | 	wrlong	local01, fp
16b18     08 4E 05 F1 | 	add	fp, #8
16b1c     A7 3C 68 FC | 	wrlong	#30, fp
16b20     08 4E 85 F1 | 	sub	fp, #8
16b24                 | LR__1861
16b24                 | LR__1862
16b24     A7 12 02 F6 | 	mov	arg01, fp
16b28     10 4F BF FD | 	call	#_push
16b2c                 | LR__1863
16b2c     A7 F0 03 F6 | 	mov	ptra, fp
16b30     B2 00 A0 FD | 	call	#popregs_
16b34                 | _do_val_ret
16b34     2D 00 64 FD | 	ret
16b38                 | 
16b38                 | ' 
16b38                 | ' 
16b38                 | ' sub do_hex
16b38                 | _do_hex
16b38     01 4A 05 F6 | 	mov	COUNT_, #1
16b3c     A8 00 A0 FD | 	call	#pushregs_
16b40     18 F0 07 F1 | 	add	ptra, #24
16b44     4A 00 00 FF 
16b48     80 E4 05 F1 | 	add	objptr, ##38016
16b4c     F2 1E 02 FB | 	rdlong	local01, objptr
16b50     0F 17 02 F6 | 	mov	arg03, local01
16b54     01 16 66 F0 | 	shl	arg03, #1
16b58     0F 17 02 F1 | 	add	arg03, local01
16b5c     02 16 66 F0 | 	shl	arg03, #2
16b60     03 00 00 FF 
16b64     04 E4 85 F1 | 	sub	objptr, ##1540
16b68     F2 16 02 F1 | 	add	arg03, objptr
16b6c     0B 17 02 FB | 	rdlong	arg03, arg03
16b70     0C 4E 05 F1 | 	add	fp, #12
16b74     A7 16 62 FC | 	wrlong	arg03, fp
16b78                 | ' 
16b78                 | ' numpar=compiledline(lineptr_e).result.uresult
16b78                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16b78     0C 4E 85 F1 | 	sub	fp, #12
16b7c     03 16 16 F2 | 	cmp	arg03, #3 wc
16b80     47 00 00 FF 
16b84     7C E4 85 F1 | 	sub	objptr, ##36476
16b88     0C 4E 05 C1 |  if_b	add	fp, #12
16b8c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16b90     0C 4E 85 C1 |  if_b	sub	fp, #12
16b94     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16b98     00 12 06 F6 | 	mov	arg01, #0
16b9c     C8 F5 B0 FD | 	call	#__system___getiolock_0540
16ba0     FD 12 02 F6 | 	mov	arg01, result1
16ba4     80 9B B0 FD | 	call	#__system___lockmem
16ba8     83 01 00 FF 
16bac     7B 15 06 F6 | 	mov	arg02, ##@LR__5476
16bb0     00 12 06 F6 | 	mov	arg01, #0
16bb4     00 16 06 F6 | 	mov	arg03, #0
16bb8     60 A8 B0 FD | 	call	#__system___basic_print_string
16bbc     00 12 06 F6 | 	mov	arg01, #0
16bc0     A4 F5 B0 FD | 	call	#__system___getiolock_0540
16bc4     FD 00 68 FC | 	wrlong	#0, result1
16bc8     27 12 06 F6 | 	mov	arg01, #39
16bcc     F4 67 B0 FD | 	call	#_printerror
16bd0     B8 00 90 FD | 	jmp	#LR__1873
16bd4                 | LR__1870
16bd4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16bd4     0C 4E 05 F1 | 	add	fp, #12
16bd8     A7 1E 02 FB | 	rdlong	local01, fp
16bdc     0C 4E 85 F1 | 	sub	fp, #12
16be0     02 1E 0E F2 | 	cmp	local01, #2 wz
16be4     38 00 90 5D |  if_ne	jmp	#LR__1871
16be8     B8 4D BF FD | 	call	#_pop
16bec     FF 1E 02 F6 | 	mov	local01, result3
16bf0     A7 FA 61 FC | 	wrlong	result1, fp
16bf4     04 4E 05 F1 | 	add	fp, #4
16bf8     A7 FC 61 FC | 	wrlong	result2, fp
16bfc     04 4E 05 F1 | 	add	fp, #4
16c00     A7 1E 62 FC | 	wrlong	local01, fp
16c04     08 4E 85 F1 | 	sub	fp, #8
16c08     A7 12 02 F6 | 	mov	arg01, fp
16c0c     58 EE BF FD | 	call	#_converttoint
16c10     14 4E 05 F1 | 	add	fp, #20
16c14     A7 FA 61 FC | 	wrlong	result1, fp
16c18     14 4E 85 F1 | 	sub	fp, #20
16c1c     0C 00 90 FD | 	jmp	#LR__1872
16c20                 | LR__1871
16c20     14 4E 05 F1 | 	add	fp, #20
16c24     A7 10 68 FC | 	wrlong	#8, fp
16c28     14 4E 85 F1 | 	sub	fp, #20
16c2c                 | LR__1872
16c2c     74 4D BF FD | 	call	#_pop
16c30     FF 1E 02 F6 | 	mov	local01, result3
16c34     A7 FA 61 FC | 	wrlong	result1, fp
16c38     04 4E 05 F1 | 	add	fp, #4
16c3c     A7 FC 61 FC | 	wrlong	result2, fp
16c40     04 4E 05 F1 | 	add	fp, #4
16c44     A7 1E 62 FC | 	wrlong	local01, fp
16c48     08 4E 85 F1 | 	sub	fp, #8
16c4c     A7 12 02 F6 | 	mov	arg01, fp
16c50     14 EE BF FD | 	call	#_converttoint
16c54     10 4E 05 F1 | 	add	fp, #16
16c58     A7 FA 61 FC | 	wrlong	result1, fp
16c5c     FD 12 02 F6 | 	mov	arg01, result1
16c60     04 4E 05 F1 | 	add	fp, #4
16c64     A7 14 02 FB | 	rdlong	arg02, fp
16c68     14 4E 85 F1 | 	sub	fp, #20
16c6c     10 16 06 F6 | 	mov	arg03, #16
16c70     84 BD B0 FD | 	call	#__system__Number_S
16c74     A7 FA 61 FC | 	wrlong	result1, fp
16c78     08 4E 05 F1 | 	add	fp, #8
16c7c     A7 3E 68 FC | 	wrlong	#31, fp
16c80     08 4E 85 F1 | 	sub	fp, #8
16c84     A7 12 02 F6 | 	mov	arg01, fp
16c88     B0 4D BF FD | 	call	#_push
16c8c                 | LR__1873
16c8c     A7 F0 03 F6 | 	mov	ptra, fp
16c90     B2 00 A0 FD | 	call	#popregs_
16c94                 | _do_hex_ret
16c94     2D 00 64 FD | 	ret
16c98                 | 
16c98                 | ' 
16c98                 | ' sub do_bin
16c98                 | _do_bin
16c98     01 4A 05 F6 | 	mov	COUNT_, #1
16c9c     A8 00 A0 FD | 	call	#pushregs_
16ca0     18 F0 07 F1 | 	add	ptra, #24
16ca4     4A 00 00 FF 
16ca8     80 E4 05 F1 | 	add	objptr, ##38016
16cac     F2 1E 02 FB | 	rdlong	local01, objptr
16cb0     0F 17 02 F6 | 	mov	arg03, local01
16cb4     01 16 66 F0 | 	shl	arg03, #1
16cb8     0F 17 02 F1 | 	add	arg03, local01
16cbc     02 16 66 F0 | 	shl	arg03, #2
16cc0     03 00 00 FF 
16cc4     04 E4 85 F1 | 	sub	objptr, ##1540
16cc8     F2 16 02 F1 | 	add	arg03, objptr
16ccc     0B 17 02 FB | 	rdlong	arg03, arg03
16cd0     0C 4E 05 F1 | 	add	fp, #12
16cd4     A7 16 62 FC | 	wrlong	arg03, fp
16cd8                 | ' 
16cd8                 | ' numpar=compiledline(lineptr_e).result.uresult
16cd8                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16cd8     0C 4E 85 F1 | 	sub	fp, #12
16cdc     03 16 16 F2 | 	cmp	arg03, #3 wc
16ce0     47 00 00 FF 
16ce4     7C E4 85 F1 | 	sub	objptr, ##36476
16ce8     0C 4E 05 C1 |  if_b	add	fp, #12
16cec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16cf0     0C 4E 85 C1 |  if_b	sub	fp, #12
16cf4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16cf8     00 12 06 F6 | 	mov	arg01, #0
16cfc     68 F4 B0 FD | 	call	#__system___getiolock_0540
16d00     FD 12 02 F6 | 	mov	arg01, result1
16d04     20 9A B0 FD | 	call	#__system___lockmem
16d08     83 01 00 FF 
16d0c     82 15 06 F6 | 	mov	arg02, ##@LR__5477
16d10     00 12 06 F6 | 	mov	arg01, #0
16d14     00 16 06 F6 | 	mov	arg03, #0
16d18     00 A7 B0 FD | 	call	#__system___basic_print_string
16d1c     00 12 06 F6 | 	mov	arg01, #0
16d20     44 F4 B0 FD | 	call	#__system___getiolock_0540
16d24     FD 00 68 FC | 	wrlong	#0, result1
16d28     27 12 06 F6 | 	mov	arg01, #39
16d2c     94 66 B0 FD | 	call	#_printerror
16d30     B8 00 90 FD | 	jmp	#LR__1883
16d34                 | LR__1880
16d34                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16d34     0C 4E 05 F1 | 	add	fp, #12
16d38     A7 1E 02 FB | 	rdlong	local01, fp
16d3c     0C 4E 85 F1 | 	sub	fp, #12
16d40     02 1E 0E F2 | 	cmp	local01, #2 wz
16d44     38 00 90 5D |  if_ne	jmp	#LR__1881
16d48     58 4C BF FD | 	call	#_pop
16d4c     FF 1E 02 F6 | 	mov	local01, result3
16d50     A7 FA 61 FC | 	wrlong	result1, fp
16d54     04 4E 05 F1 | 	add	fp, #4
16d58     A7 FC 61 FC | 	wrlong	result2, fp
16d5c     04 4E 05 F1 | 	add	fp, #4
16d60     A7 1E 62 FC | 	wrlong	local01, fp
16d64     08 4E 85 F1 | 	sub	fp, #8
16d68     A7 12 02 F6 | 	mov	arg01, fp
16d6c     F8 EC BF FD | 	call	#_converttoint
16d70     14 4E 05 F1 | 	add	fp, #20
16d74     A7 FA 61 FC | 	wrlong	result1, fp
16d78     14 4E 85 F1 | 	sub	fp, #20
16d7c     0C 00 90 FD | 	jmp	#LR__1882
16d80                 | LR__1881
16d80     14 4E 05 F1 | 	add	fp, #20
16d84     A7 00 68 FC | 	wrlong	#0, fp
16d88     14 4E 85 F1 | 	sub	fp, #20
16d8c                 | LR__1882
16d8c     14 4C BF FD | 	call	#_pop
16d90     FF 1E 02 F6 | 	mov	local01, result3
16d94     A7 FA 61 FC | 	wrlong	result1, fp
16d98     04 4E 05 F1 | 	add	fp, #4
16d9c     A7 FC 61 FC | 	wrlong	result2, fp
16da0     04 4E 05 F1 | 	add	fp, #4
16da4     A7 1E 62 FC | 	wrlong	local01, fp
16da8     08 4E 85 F1 | 	sub	fp, #8
16dac     A7 12 02 F6 | 	mov	arg01, fp
16db0     B4 EC BF FD | 	call	#_converttoint
16db4     10 4E 05 F1 | 	add	fp, #16
16db8     A7 FA 61 FC | 	wrlong	result1, fp
16dbc     FD 12 02 F6 | 	mov	arg01, result1
16dc0     04 4E 05 F1 | 	add	fp, #4
16dc4     A7 14 02 FB | 	rdlong	arg02, fp
16dc8     14 4E 85 F1 | 	sub	fp, #20
16dcc     02 16 06 F6 | 	mov	arg03, #2
16dd0     24 BC B0 FD | 	call	#__system__Number_S
16dd4     A7 FA 61 FC | 	wrlong	result1, fp
16dd8     08 4E 05 F1 | 	add	fp, #8
16ddc     A7 3E 68 FC | 	wrlong	#31, fp
16de0     08 4E 85 F1 | 	sub	fp, #8
16de4     A7 12 02 F6 | 	mov	arg01, fp
16de8     50 4C BF FD | 	call	#_push
16dec                 | LR__1883
16dec     A7 F0 03 F6 | 	mov	ptra, fp
16df0     B2 00 A0 FD | 	call	#popregs_
16df4                 | _do_bin_ret
16df4     2D 00 64 FD | 	ret
16df8                 | 
16df8                 | ' 
16df8                 | ' sub do_cos
16df8                 | _do_cos
16df8     01 4A 05 F6 | 	mov	COUNT_, #1
16dfc     A8 00 A0 FD | 	call	#pushregs_
16e00     10 F0 07 F1 | 	add	ptra, #16
16e04     4A 00 00 FF 
16e08     80 E4 05 F1 | 	add	objptr, ##38016
16e0c     F2 1E 02 FB | 	rdlong	local01, objptr
16e10     0F 17 02 F6 | 	mov	arg03, local01
16e14     01 16 66 F0 | 	shl	arg03, #1
16e18     0F 17 02 F1 | 	add	arg03, local01
16e1c     02 16 66 F0 | 	shl	arg03, #2
16e20     03 00 00 FF 
16e24     04 E4 85 F1 | 	sub	objptr, ##1540
16e28     F2 16 02 F1 | 	add	arg03, objptr
16e2c     0B 17 02 FB | 	rdlong	arg03, arg03
16e30     0C 4E 05 F1 | 	add	fp, #12
16e34     A7 16 62 FC | 	wrlong	arg03, fp
16e38                 | ' 
16e38                 | ' numpar=compiledline(lineptr_e).result.uresult
16e38                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16e38     0C 4E 85 F1 | 	sub	fp, #12
16e3c     02 16 16 F2 | 	cmp	arg03, #2 wc
16e40     47 00 00 FF 
16e44     7C E4 85 F1 | 	sub	objptr, ##36476
16e48     0C 4E 05 C1 |  if_b	add	fp, #12
16e4c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e50     0C 4E 85 C1 |  if_b	sub	fp, #12
16e54     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16e58     00 12 06 F6 | 	mov	arg01, #0
16e5c     08 F3 B0 FD | 	call	#__system___getiolock_0540
16e60     FD 12 02 F6 | 	mov	arg01, result1
16e64     C0 98 B0 FD | 	call	#__system___lockmem
16e68     83 01 00 FF 
16e6c     89 15 06 F6 | 	mov	arg02, ##@LR__5478
16e70     00 12 06 F6 | 	mov	arg01, #0
16e74     00 16 06 F6 | 	mov	arg03, #0
16e78     A0 A5 B0 FD | 	call	#__system___basic_print_string
16e7c     00 12 06 F6 | 	mov	arg01, #0
16e80     E4 F2 B0 FD | 	call	#__system___getiolock_0540
16e84     FD 00 68 FC | 	wrlong	#0, result1
16e88     27 12 06 F6 | 	mov	arg01, #39
16e8c     34 65 B0 FD | 	call	#_printerror
16e90     78 00 90 FD | 	jmp	#LR__1891
16e94                 | LR__1890
16e94     0C 4B BF FD | 	call	#_pop
16e98     A7 FA 61 FC | 	wrlong	result1, fp
16e9c     04 4E 05 F1 | 	add	fp, #4
16ea0     A7 FC 61 FC | 	wrlong	result2, fp
16ea4     04 4E 05 F1 | 	add	fp, #4
16ea8     A7 FE 61 FC | 	wrlong	result3, fp
16eac     08 4E 85 F1 | 	sub	fp, #8
16eb0     51 00 00 FF 
16eb4     B8 E5 05 F1 | 	add	objptr, ##41912
16eb8     F2 1E 02 FB | 	rdlong	local01, objptr
16ebc     51 00 00 FF 
16ec0     B8 E5 85 F1 | 	sub	objptr, ##41912
16ec4     A7 12 02 F6 | 	mov	arg01, fp
16ec8     58 EC BF FD | 	call	#_converttofloat
16ecc     FD 14 02 F6 | 	mov	arg02, result1
16ed0     0F 13 02 F6 | 	mov	arg01, local01
16ed4     04 C4 B0 FD | 	call	#__system___float_mul
16ed8     FD 14 02 F6 | 	mov	arg02, result1
16edc     87 E4 1F FF 
16ee0     DB 13 06 F6 | 	mov	arg01, ##1070141403
16ee4     1F 14 E6 F4 | 	bitnot	arg02, #31
16ee8     20 C0 B0 FD | 	call	#__system___float_add
16eec     FD 12 02 F6 | 	mov	arg01, result1
16ef0     24 CD B0 FD | 	call	#__system____builtin_sinf
16ef4     A7 FA 61 FC | 	wrlong	result1, fp
16ef8     08 4E 05 F1 | 	add	fp, #8
16efc     A7 3C 68 FC | 	wrlong	#30, fp
16f00     08 4E 85 F1 | 	sub	fp, #8
16f04     A7 12 02 F6 | 	mov	arg01, fp
16f08     30 4B BF FD | 	call	#_push
16f0c                 | LR__1891
16f0c     A7 F0 03 F6 | 	mov	ptra, fp
16f10     B2 00 A0 FD | 	call	#popregs_
16f14                 | _do_cos_ret
16f14     2D 00 64 FD | 	ret
16f18                 | 
16f18                 | ' 
16f18                 | ' sub do_tan
16f18                 | _do_tan
16f18     01 4A 05 F6 | 	mov	COUNT_, #1
16f1c     A8 00 A0 FD | 	call	#pushregs_
16f20     10 F0 07 F1 | 	add	ptra, #16
16f24     4A 00 00 FF 
16f28     80 E4 05 F1 | 	add	objptr, ##38016
16f2c     F2 1E 02 FB | 	rdlong	local01, objptr
16f30     0F 17 02 F6 | 	mov	arg03, local01
16f34     01 16 66 F0 | 	shl	arg03, #1
16f38     0F 17 02 F1 | 	add	arg03, local01
16f3c     02 16 66 F0 | 	shl	arg03, #2
16f40     03 00 00 FF 
16f44     04 E4 85 F1 | 	sub	objptr, ##1540
16f48     F2 16 02 F1 | 	add	arg03, objptr
16f4c     0B 17 02 FB | 	rdlong	arg03, arg03
16f50     0C 4E 05 F1 | 	add	fp, #12
16f54     A7 16 62 FC | 	wrlong	arg03, fp
16f58                 | ' 
16f58                 | ' numpar=compiledline(lineptr_e).result.uresult
16f58                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
16f58     0C 4E 85 F1 | 	sub	fp, #12
16f5c     02 16 16 F2 | 	cmp	arg03, #2 wc
16f60     47 00 00 FF 
16f64     7C E4 85 F1 | 	sub	objptr, ##36476
16f68     0C 4E 05 C1 |  if_b	add	fp, #12
16f6c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16f70     0C 4E 85 C1 |  if_b	sub	fp, #12
16f74     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
16f78     00 12 06 F6 | 	mov	arg01, #0
16f7c     E8 F1 B0 FD | 	call	#__system___getiolock_0540
16f80     FD 12 02 F6 | 	mov	arg01, result1
16f84     A0 97 B0 FD | 	call	#__system___lockmem
16f88     83 01 00 FF 
16f8c     8F 15 06 F6 | 	mov	arg02, ##@LR__5479
16f90     00 12 06 F6 | 	mov	arg01, #0
16f94     00 16 06 F6 | 	mov	arg03, #0
16f98     80 A4 B0 FD | 	call	#__system___basic_print_string
16f9c     00 12 06 F6 | 	mov	arg01, #0
16fa0     C4 F1 B0 FD | 	call	#__system___getiolock_0540
16fa4     FD 00 68 FC | 	wrlong	#0, result1
16fa8     27 12 06 F6 | 	mov	arg01, #39
16fac     14 64 B0 FD | 	call	#_printerror
16fb0     64 00 90 FD | 	jmp	#LR__1901
16fb4                 | LR__1900
16fb4     EC 49 BF FD | 	call	#_pop
16fb8     A7 FA 61 FC | 	wrlong	result1, fp
16fbc     04 4E 05 F1 | 	add	fp, #4
16fc0     A7 FC 61 FC | 	wrlong	result2, fp
16fc4     04 4E 05 F1 | 	add	fp, #4
16fc8     A7 FE 61 FC | 	wrlong	result3, fp
16fcc     08 4E 85 F1 | 	sub	fp, #8
16fd0     51 00 00 FF 
16fd4     B8 E5 05 F1 | 	add	objptr, ##41912
16fd8     F2 1E 02 FB | 	rdlong	local01, objptr
16fdc     51 00 00 FF 
16fe0     B8 E5 85 F1 | 	sub	objptr, ##41912
16fe4     A7 12 02 F6 | 	mov	arg01, fp
16fe8     38 EB BF FD | 	call	#_converttofloat
16fec     FD 14 02 F6 | 	mov	arg02, result1
16ff0     0F 13 02 F6 | 	mov	arg01, local01
16ff4     E4 C2 B0 FD | 	call	#__system___float_mul
16ff8     FD 12 02 F6 | 	mov	arg01, result1
16ffc     64 CD B0 FD | 	call	#__system____builtin_tanf
17000     A7 FA 61 FC | 	wrlong	result1, fp
17004     08 4E 05 F1 | 	add	fp, #8
17008     A7 3C 68 FC | 	wrlong	#30, fp
1700c     08 4E 85 F1 | 	sub	fp, #8
17010     A7 12 02 F6 | 	mov	arg01, fp
17014     24 4A BF FD | 	call	#_push
17018                 | LR__1901
17018     A7 F0 03 F6 | 	mov	ptra, fp
1701c     B2 00 A0 FD | 	call	#popregs_
17020                 | _do_tan_ret
17020     2D 00 64 FD | 	ret
17024                 | 
17024                 | ' 
17024                 | ' sub do_asin
17024                 | _do_asin
17024     01 4A 05 F6 | 	mov	COUNT_, #1
17028     A8 00 A0 FD | 	call	#pushregs_
1702c     10 F0 07 F1 | 	add	ptra, #16
17030     4A 00 00 FF 
17034     80 E4 05 F1 | 	add	objptr, ##38016
17038     F2 1E 02 FB | 	rdlong	local01, objptr
1703c     0F 17 02 F6 | 	mov	arg03, local01
17040     01 16 66 F0 | 	shl	arg03, #1
17044     0F 17 02 F1 | 	add	arg03, local01
17048     02 16 66 F0 | 	shl	arg03, #2
1704c     03 00 00 FF 
17050     04 E4 85 F1 | 	sub	objptr, ##1540
17054     F2 16 02 F1 | 	add	arg03, objptr
17058     0B 17 02 FB | 	rdlong	arg03, arg03
1705c     0C 4E 05 F1 | 	add	fp, #12
17060     A7 16 62 FC | 	wrlong	arg03, fp
17064                 | ' 
17064                 | ' numpar=compiledline(lineptr_e).result.uresult
17064                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
17064     0C 4E 85 F1 | 	sub	fp, #12
17068     02 16 16 F2 | 	cmp	arg03, #2 wc
1706c     47 00 00 FF 
17070     7C E4 85 F1 | 	sub	objptr, ##36476
17074     0C 4E 05 C1 |  if_b	add	fp, #12
17078     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1707c     0C 4E 85 C1 |  if_b	sub	fp, #12
17080     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
17084     00 12 06 F6 | 	mov	arg01, #0
17088     DC F0 B0 FD | 	call	#__system___getiolock_0540
1708c     FD 12 02 F6 | 	mov	arg01, result1
17090     94 96 B0 FD | 	call	#__system___lockmem
17094     83 01 00 FF 
17098     95 15 06 F6 | 	mov	arg02, ##@LR__5480
1709c     00 12 06 F6 | 	mov	arg01, #0
170a0     00 16 06 F6 | 	mov	arg03, #0
170a4     74 A3 B0 FD | 	call	#__system___basic_print_string
170a8     00 12 06 F6 | 	mov	arg01, #0
170ac     B8 F0 B0 FD | 	call	#__system___getiolock_0540
170b0     FD 00 68 FC | 	wrlong	#0, result1
170b4     27 12 06 F6 | 	mov	arg01, #39
170b8     08 63 B0 FD | 	call	#_printerror
170bc     64 00 90 FD | 	jmp	#LR__1911
170c0                 | LR__1910
170c0     E0 48 BF FD | 	call	#_pop
170c4     FF 1E 02 F6 | 	mov	local01, result3
170c8     A7 FA 61 FC | 	wrlong	result1, fp
170cc     04 4E 05 F1 | 	add	fp, #4
170d0     A7 FC 61 FC | 	wrlong	result2, fp
170d4     04 4E 05 F1 | 	add	fp, #4
170d8     A7 1E 62 FC | 	wrlong	local01, fp
170dc     08 4E 85 F1 | 	sub	fp, #8
170e0     A7 12 02 F6 | 	mov	arg01, fp
170e4     3C EA BF FD | 	call	#_converttofloat
170e8     FD 12 02 F6 | 	mov	arg01, result1
170ec     BC CC B0 FD | 	call	#__system____builtin_asinf
170f0     FD 12 02 F6 | 	mov	arg01, result1
170f4     51 00 00 FF 
170f8     BC E5 05 F1 | 	add	objptr, ##41916
170fc     F2 14 02 FB | 	rdlong	arg02, objptr
17100     51 00 00 FF 
17104     BC E5 85 F1 | 	sub	objptr, ##41916
17108     D0 C1 B0 FD | 	call	#__system___float_mul
1710c     A7 FA 61 FC | 	wrlong	result1, fp
17110     08 4E 05 F1 | 	add	fp, #8
17114     A7 3C 68 FC | 	wrlong	#30, fp
17118     08 4E 85 F1 | 	sub	fp, #8
1711c     A7 12 02 F6 | 	mov	arg01, fp
17120     18 49 BF FD | 	call	#_push
17124                 | LR__1911
17124     A7 F0 03 F6 | 	mov	ptra, fp
17128     B2 00 A0 FD | 	call	#popregs_
1712c                 | _do_asin_ret
1712c     2D 00 64 FD | 	ret
17130                 | 
17130                 | ' 
17130                 | ' sub do_acos
17130                 | _do_acos
17130     01 4A 05 F6 | 	mov	COUNT_, #1
17134     A8 00 A0 FD | 	call	#pushregs_
17138     10 F0 07 F1 | 	add	ptra, #16
1713c     4A 00 00 FF 
17140     80 E4 05 F1 | 	add	objptr, ##38016
17144     F2 1E 02 FB | 	rdlong	local01, objptr
17148     0F 17 02 F6 | 	mov	arg03, local01
1714c     01 16 66 F0 | 	shl	arg03, #1
17150     0F 17 02 F1 | 	add	arg03, local01
17154     02 16 66 F0 | 	shl	arg03, #2
17158     03 00 00 FF 
1715c     04 E4 85 F1 | 	sub	objptr, ##1540
17160     F2 16 02 F1 | 	add	arg03, objptr
17164     0B 17 02 FB | 	rdlong	arg03, arg03
17168     0C 4E 05 F1 | 	add	fp, #12
1716c     A7 16 62 FC | 	wrlong	arg03, fp
17170                 | ' 
17170                 | ' numpar=compiledline(lineptr_e).result.uresult
17170                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
17170     0C 4E 85 F1 | 	sub	fp, #12
17174     02 16 16 F2 | 	cmp	arg03, #2 wc
17178     47 00 00 FF 
1717c     7C E4 85 F1 | 	sub	objptr, ##36476
17180     0C 4E 05 C1 |  if_b	add	fp, #12
17184     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17188     0C 4E 85 C1 |  if_b	sub	fp, #12
1718c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
17190     00 12 06 F6 | 	mov	arg01, #0
17194     D0 EF B0 FD | 	call	#__system___getiolock_0540
17198     FD 12 02 F6 | 	mov	arg01, result1
1719c     88 95 B0 FD | 	call	#__system___lockmem
171a0     83 01 00 FF 
171a4     9C 15 06 F6 | 	mov	arg02, ##@LR__5481
171a8     00 12 06 F6 | 	mov	arg01, #0
171ac     00 16 06 F6 | 	mov	arg03, #0
171b0     68 A2 B0 FD | 	call	#__system___basic_print_string
171b4     00 12 06 F6 | 	mov	arg01, #0
171b8     AC EF B0 FD | 	call	#__system___getiolock_0540
171bc     FD 00 68 FC | 	wrlong	#0, result1
171c0     27 12 06 F6 | 	mov	arg01, #39
171c4     FC 61 B0 FD | 	call	#_printerror
171c8     64 00 90 FD | 	jmp	#LR__1921
171cc                 | LR__1920
171cc     D4 47 BF FD | 	call	#_pop
171d0     FF 1E 02 F6 | 	mov	local01, result3
171d4     A7 FA 61 FC | 	wrlong	result1, fp
171d8     04 4E 05 F1 | 	add	fp, #4
171dc     A7 FC 61 FC | 	wrlong	result2, fp
171e0     04 4E 05 F1 | 	add	fp, #4
171e4     A7 1E 62 FC | 	wrlong	local01, fp
171e8     08 4E 85 F1 | 	sub	fp, #8
171ec     A7 12 02 F6 | 	mov	arg01, fp
171f0     30 E9 BF FD | 	call	#_converttofloat
171f4     FD 12 02 F6 | 	mov	arg01, result1
171f8     FC CB B0 FD | 	call	#__system____builtin_acosf
171fc     FD 12 02 F6 | 	mov	arg01, result1
17200     51 00 00 FF 
17204     BC E5 05 F1 | 	add	objptr, ##41916
17208     F2 14 02 FB | 	rdlong	arg02, objptr
1720c     51 00 00 FF 
17210     BC E5 85 F1 | 	sub	objptr, ##41916
17214     C4 C0 B0 FD | 	call	#__system___float_mul
17218     A7 FA 61 FC | 	wrlong	result1, fp
1721c     08 4E 05 F1 | 	add	fp, #8
17220     A7 3C 68 FC | 	wrlong	#30, fp
17224     08 4E 85 F1 | 	sub	fp, #8
17228     A7 12 02 F6 | 	mov	arg01, fp
1722c     0C 48 BF FD | 	call	#_push
17230                 | LR__1921
17230     A7 F0 03 F6 | 	mov	ptra, fp
17234     B2 00 A0 FD | 	call	#popregs_
17238                 | _do_acos_ret
17238     2D 00 64 FD | 	ret
1723c                 | 
1723c                 | ' 
1723c                 | ' sub do_atn
1723c                 | _do_atn
1723c     01 4A 05 F6 | 	mov	COUNT_, #1
17240     A8 00 A0 FD | 	call	#pushregs_
17244     10 F0 07 F1 | 	add	ptra, #16
17248     4A 00 00 FF 
1724c     80 E4 05 F1 | 	add	objptr, ##38016
17250     F2 1E 02 FB | 	rdlong	local01, objptr
17254     0F 17 02 F6 | 	mov	arg03, local01
17258     01 16 66 F0 | 	shl	arg03, #1
1725c     0F 17 02 F1 | 	add	arg03, local01
17260     02 16 66 F0 | 	shl	arg03, #2
17264     03 00 00 FF 
17268     04 E4 85 F1 | 	sub	objptr, ##1540
1726c     F2 16 02 F1 | 	add	arg03, objptr
17270     0B 17 02 FB | 	rdlong	arg03, arg03
17274     0C 4E 05 F1 | 	add	fp, #12
17278     A7 16 62 FC | 	wrlong	arg03, fp
1727c                 | ' 
1727c                 | ' numpar=compiledline(lineptr_e).result.uresult
1727c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
1727c     0C 4E 85 F1 | 	sub	fp, #12
17280     02 16 16 F2 | 	cmp	arg03, #2 wc
17284     47 00 00 FF 
17288     7C E4 85 F1 | 	sub	objptr, ##36476
1728c     0C 4E 05 C1 |  if_b	add	fp, #12
17290     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17294     0C 4E 85 C1 |  if_b	sub	fp, #12
17298     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
1729c     00 12 06 F6 | 	mov	arg01, #0
172a0     C4 EE B0 FD | 	call	#__system___getiolock_0540
172a4     FD 12 02 F6 | 	mov	arg01, result1
172a8     7C 94 B0 FD | 	call	#__system___lockmem
172ac     83 01 00 FF 
172b0     A3 15 06 F6 | 	mov	arg02, ##@LR__5482
172b4     00 12 06 F6 | 	mov	arg01, #0
172b8     00 16 06 F6 | 	mov	arg03, #0
172bc     5C A1 B0 FD | 	call	#__system___basic_print_string
172c0     00 12 06 F6 | 	mov	arg01, #0
172c4     A0 EE B0 FD | 	call	#__system___getiolock_0540
172c8     FD 00 68 FC | 	wrlong	#0, result1
172cc     27 12 06 F6 | 	mov	arg01, #39
172d0     F0 60 B0 FD | 	call	#_printerror
172d4     6C 00 90 FD | 	jmp	#LR__1931
172d8                 | LR__1930
172d8     C8 46 BF FD | 	call	#_pop
172dc     FF 1E 02 F6 | 	mov	local01, result3
172e0     A7 FA 61 FC | 	wrlong	result1, fp
172e4     04 4E 05 F1 | 	add	fp, #4
172e8     A7 FC 61 FC | 	wrlong	result2, fp
172ec     04 4E 05 F1 | 	add	fp, #4
172f0     A7 1E 62 FC | 	wrlong	local01, fp
172f4     08 4E 85 F1 | 	sub	fp, #8
172f8     A7 12 02 F6 | 	mov	arg01, fp
172fc     24 E8 BF FD | 	call	#_converttofloat
17300     FD 12 02 F6 | 	mov	arg01, result1
17304     00 C0 1F FF 
17308     00 14 06 F6 | 	mov	arg02, ##1065353216
1730c     34 CB B0 FD | 	call	#__system____builtin_atan2f
17310     FD 12 02 F6 | 	mov	arg01, result1
17314     51 00 00 FF 
17318     BC E5 05 F1 | 	add	objptr, ##41916
1731c     F2 14 02 FB | 	rdlong	arg02, objptr
17320     51 00 00 FF 
17324     BC E5 85 F1 | 	sub	objptr, ##41916
17328     B0 BF B0 FD | 	call	#__system___float_mul
1732c     A7 FA 61 FC | 	wrlong	result1, fp
17330     08 4E 05 F1 | 	add	fp, #8
17334     A7 3C 68 FC | 	wrlong	#30, fp
17338     08 4E 85 F1 | 	sub	fp, #8
1733c     A7 12 02 F6 | 	mov	arg01, fp
17340     F8 46 BF FD | 	call	#_push
17344                 | LR__1931
17344     A7 F0 03 F6 | 	mov	ptra, fp
17348     B2 00 A0 FD | 	call	#popregs_
1734c                 | _do_atn_ret
1734c     2D 00 64 FD | 	ret
17350                 | 
17350                 | ' 
17350                 | ' sub do_sqr
17350                 | _do_sqr
17350     01 4A 05 F6 | 	mov	COUNT_, #1
17354     A8 00 A0 FD | 	call	#pushregs_
17358     10 F0 07 F1 | 	add	ptra, #16
1735c     4A 00 00 FF 
17360     80 E4 05 F1 | 	add	objptr, ##38016
17364     F2 1E 02 FB | 	rdlong	local01, objptr
17368     0F 17 02 F6 | 	mov	arg03, local01
1736c     01 16 66 F0 | 	shl	arg03, #1
17370     0F 17 02 F1 | 	add	arg03, local01
17374     02 16 66 F0 | 	shl	arg03, #2
17378     03 00 00 FF 
1737c     04 E4 85 F1 | 	sub	objptr, ##1540
17380     F2 16 02 F1 | 	add	arg03, objptr
17384     0B 17 02 FB | 	rdlong	arg03, arg03
17388     0C 4E 05 F1 | 	add	fp, #12
1738c     A7 16 62 FC | 	wrlong	arg03, fp
17390                 | ' 
17390                 | ' numpar=compiledline(lineptr_e).result.uresult
17390                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17390     0C 4E 85 F1 | 	sub	fp, #12
17394     02 16 16 F2 | 	cmp	arg03, #2 wc
17398     47 00 00 FF 
1739c     7C E4 85 F1 | 	sub	objptr, ##36476
173a0     0C 4E 05 C1 |  if_b	add	fp, #12
173a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
173a8     0C 4E 85 C1 |  if_b	sub	fp, #12
173ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
173b0     00 12 06 F6 | 	mov	arg01, #0
173b4     B0 ED B0 FD | 	call	#__system___getiolock_0540
173b8     FD 12 02 F6 | 	mov	arg01, result1
173bc     68 93 B0 FD | 	call	#__system___lockmem
173c0     83 01 00 FF 
173c4     A9 15 06 F6 | 	mov	arg02, ##@LR__5483
173c8     00 12 06 F6 | 	mov	arg01, #0
173cc     00 16 06 F6 | 	mov	arg03, #0
173d0     48 A0 B0 FD | 	call	#__system___basic_print_string
173d4     00 12 06 F6 | 	mov	arg01, #0
173d8     8C ED B0 FD | 	call	#__system___getiolock_0540
173dc     FD 00 68 FC | 	wrlong	#0, result1
173e0     27 12 06 F6 | 	mov	arg01, #39
173e4     DC 5F B0 FD | 	call	#_printerror
173e8     48 00 90 FD | 	jmp	#LR__1941
173ec                 | LR__1940
173ec     B4 45 BF FD | 	call	#_pop
173f0     FF 1E 02 F6 | 	mov	local01, result3
173f4     A7 FA 61 FC | 	wrlong	result1, fp
173f8     04 4E 05 F1 | 	add	fp, #4
173fc     A7 FC 61 FC | 	wrlong	result2, fp
17400     04 4E 05 F1 | 	add	fp, #4
17404     A7 1E 62 FC | 	wrlong	local01, fp
17408     08 4E 85 F1 | 	sub	fp, #8
1740c     A7 12 02 F6 | 	mov	arg01, fp
17410     10 E7 BF FD | 	call	#_converttofloat
17414     FD 12 02 F6 | 	mov	arg01, result1
17418     E8 BD B0 FD | 	call	#__system___float_sqrt
1741c     A7 FA 61 FC | 	wrlong	result1, fp
17420     08 4E 05 F1 | 	add	fp, #8
17424     A7 3C 68 FC | 	wrlong	#30, fp
17428     08 4E 85 F1 | 	sub	fp, #8
1742c     A7 12 02 F6 | 	mov	arg01, fp
17430     08 46 BF FD | 	call	#_push
17434                 | LR__1941
17434     A7 F0 03 F6 | 	mov	ptra, fp
17438     B2 00 A0 FD | 	call	#popregs_
1743c                 | _do_sqr_ret
1743c     2D 00 64 FD | 	ret
17440                 | 
17440                 | ' 
17440                 | ' sub do_stick
17440                 | _do_stick
17440     01 4A 05 F6 | 	mov	COUNT_, #1
17444     A8 00 A0 FD | 	call	#pushregs_
17448     10 F0 07 F1 | 	add	ptra, #16
1744c     4A 00 00 FF 
17450     80 E4 05 F1 | 	add	objptr, ##38016
17454     F2 1E 02 FB | 	rdlong	local01, objptr
17458     0F 17 02 F6 | 	mov	arg03, local01
1745c     01 16 66 F0 | 	shl	arg03, #1
17460     0F 17 02 F1 | 	add	arg03, local01
17464     02 16 66 F0 | 	shl	arg03, #2
17468     03 00 00 FF 
1746c     04 E4 85 F1 | 	sub	objptr, ##1540
17470     F2 16 02 F1 | 	add	arg03, objptr
17474     0B 17 02 FB | 	rdlong	arg03, arg03
17478     0C 4E 05 F1 | 	add	fp, #12
1747c     A7 16 62 FC | 	wrlong	arg03, fp
17480                 | ' 
17480                 | ' numpar=compiledline(lineptr_e).result.uresult
17480                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17480     0C 4E 85 F1 | 	sub	fp, #12
17484     02 16 16 F2 | 	cmp	arg03, #2 wc
17488     47 00 00 FF 
1748c     7C E4 85 F1 | 	sub	objptr, ##36476
17490     3C 00 90 CD |  if_b	jmp	#LR__1950
17494     00 12 06 F6 | 	mov	arg01, #0
17498     CC EC B0 FD | 	call	#__system___getiolock_0540
1749c     FD 12 02 F6 | 	mov	arg01, result1
174a0     84 92 B0 FD | 	call	#__system___lockmem
174a4     83 01 00 FF 
174a8     AF 15 06 F6 | 	mov	arg02, ##@LR__5484
174ac     00 12 06 F6 | 	mov	arg01, #0
174b0     00 16 06 F6 | 	mov	arg03, #0
174b4     64 9F B0 FD | 	call	#__system___basic_print_string
174b8     00 12 06 F6 | 	mov	arg01, #0
174bc     A8 EC B0 FD | 	call	#__system___getiolock_0540
174c0     FD 00 68 FC | 	wrlong	#0, result1
174c4     27 12 06 F6 | 	mov	arg01, #39
174c8     F8 5E B0 FD | 	call	#_printerror
174cc     E8 00 90 FD | 	jmp	#LR__1954
174d0                 | LR__1950
174d0                 | ' 
174d0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
174d0     0C 4E 05 F1 | 	add	fp, #12
174d4     A7 FE 09 FB | 	rdlong	result3, fp wz
174d8     0C 4E 85 F1 | 	sub	fp, #12
174dc     30 00 90 5D |  if_ne	jmp	#LR__1951
174e0     51 00 00 FF 
174e4     2C E5 05 F1 | 	add	objptr, ##41772
174e8     F2 1E 02 FB | 	rdlong	local01, objptr
174ec     51 00 00 FF 
174f0     2C E5 85 F1 | 	sub	objptr, ##41772
174f4     A7 1E 62 FC | 	wrlong	local01, fp
174f8     08 4E 05 F1 | 	add	fp, #8
174fc     A7 3A 68 FC | 	wrlong	#29, fp
17500     08 4E 85 F1 | 	sub	fp, #8
17504     A7 12 02 F6 | 	mov	arg01, fp
17508     30 45 BF FD | 	call	#_push
1750c     A8 00 90 FD | 	jmp	#LR__1954
17510                 | LR__1951
17510     90 44 BF FD | 	call	#_pop
17514     A7 FA 61 FC | 	wrlong	result1, fp
17518     04 4E 05 F1 | 	add	fp, #4
1751c     A7 FC 61 FC | 	wrlong	result2, fp
17520     04 4E 05 F1 | 	add	fp, #4
17524     A7 FE 61 FC | 	wrlong	result3, fp
17528                 | ' 
17528                 | ' t1=pop()
17528                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17528     08 4E 85 F1 | 	sub	fp, #8
1752c     1C FE 0D F2 | 	cmp	result3, #28 wz
17530     08 4E 05 51 |  if_ne	add	fp, #8
17534     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17538     08 4E 85 51 |  if_ne	sub	fp, #8
1753c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17540     6C 00 90 5D |  if_ne	jmp	#LR__1953
17544     A7 1E 02 FB | 	rdlong	local01, fp
17548     52 00 00 FF 
1754c     08 E4 05 F1 | 	add	objptr, ##41992
17550     F2 1E 62 FC | 	wrlong	local01, objptr
17554                 | '   q=t1.result.uresult
17554                 | '   if q<7 then 
17554     52 00 00 FF 
17558     08 E4 85 F1 | 	sub	objptr, ##41992
1755c     07 1E 56 F2 | 	cmps	local01, #7 wc
17560     40 00 90 3D |  if_ae	jmp	#LR__1952
17564     52 00 00 FF 
17568     08 E4 05 F1 | 	add	objptr, ##41992
1756c     F2 1E 02 FB | 	rdlong	local01, objptr
17570     02 1E 66 F0 | 	shl	local01, #2
17574     DC E4 85 F1 | 	sub	objptr, #220
17578     F2 1E 02 F1 | 	add	local01, objptr
1757c     0F 1F 02 FB | 	rdlong	local01, local01
17580     A7 1E 62 FC | 	wrlong	local01, fp
17584     08 4E 05 F1 | 	add	fp, #8
17588     A7 3A 68 FC | 	wrlong	#29, fp
1758c     08 4E 85 F1 | 	sub	fp, #8
17590     A7 12 02 F6 | 	mov	arg01, fp
17594     51 00 00 FF 
17598     2C E5 85 F1 | 	sub	objptr, ##41772
1759c     9C 44 BF FD | 	call	#_push
175a0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
175a0     14 00 90 FD | 	jmp	#LR__1954
175a4                 | LR__1952
175a4     29 12 06 F6 | 	mov	arg01, #41
175a8     18 5E B0 FD | 	call	#_printerror
175ac                 | '      printerror(41) : return
175ac     08 00 90 FD | 	jmp	#LR__1954
175b0                 | LR__1953
175b0     29 12 06 F6 | 	mov	arg01, #41
175b4     0C 5E B0 FD | 	call	#_printerror
175b8                 | LR__1954
175b8     A7 F0 03 F6 | 	mov	ptra, fp
175bc     B2 00 A0 FD | 	call	#popregs_
175c0                 | _do_stick_ret
175c0     2D 00 64 FD | 	ret
175c4                 | 
175c4                 | ' 
175c4                 | ' sub do_strig
175c4                 | _do_strig
175c4     01 4A 05 F6 | 	mov	COUNT_, #1
175c8     A8 00 A0 FD | 	call	#pushregs_
175cc     10 F0 07 F1 | 	add	ptra, #16
175d0     4A 00 00 FF 
175d4     80 E4 05 F1 | 	add	objptr, ##38016
175d8     F2 1E 02 FB | 	rdlong	local01, objptr
175dc     0F 17 02 F6 | 	mov	arg03, local01
175e0     01 16 66 F0 | 	shl	arg03, #1
175e4     0F 17 02 F1 | 	add	arg03, local01
175e8     02 16 66 F0 | 	shl	arg03, #2
175ec     03 00 00 FF 
175f0     04 E4 85 F1 | 	sub	objptr, ##1540
175f4     F2 16 02 F1 | 	add	arg03, objptr
175f8     0B 17 02 FB | 	rdlong	arg03, arg03
175fc     0C 4E 05 F1 | 	add	fp, #12
17600     A7 16 62 FC | 	wrlong	arg03, fp
17604                 | ' 
17604                 | ' numpar=compiledline(lineptr_e).result.uresult
17604                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17604     0C 4E 85 F1 | 	sub	fp, #12
17608     02 16 16 F2 | 	cmp	arg03, #2 wc
1760c     47 00 00 FF 
17610     7C E4 85 F1 | 	sub	objptr, ##36476
17614     3C 00 90 CD |  if_b	jmp	#LR__1960
17618     00 12 06 F6 | 	mov	arg01, #0
1761c     48 EB B0 FD | 	call	#__system___getiolock_0540
17620     FD 12 02 F6 | 	mov	arg01, result1
17624     00 91 B0 FD | 	call	#__system___lockmem
17628     83 01 00 FF 
1762c     B7 15 06 F6 | 	mov	arg02, ##@LR__5485
17630     00 12 06 F6 | 	mov	arg01, #0
17634     00 16 06 F6 | 	mov	arg03, #0
17638     E0 9D B0 FD | 	call	#__system___basic_print_string
1763c     00 12 06 F6 | 	mov	arg01, #0
17640     24 EB B0 FD | 	call	#__system___getiolock_0540
17644     FD 00 68 FC | 	wrlong	#0, result1
17648     27 12 06 F6 | 	mov	arg01, #39
1764c     74 5D B0 FD | 	call	#_printerror
17650     E8 00 90 FD | 	jmp	#LR__1964
17654                 | LR__1960
17654                 | ' 
17654                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17654     0C 4E 05 F1 | 	add	fp, #12
17658     A7 FE 09 FB | 	rdlong	result3, fp wz
1765c     0C 4E 85 F1 | 	sub	fp, #12
17660     30 00 90 5D |  if_ne	jmp	#LR__1961
17664     51 00 00 FF 
17668     48 E5 05 F1 | 	add	objptr, ##41800
1766c     F2 1E 02 FB | 	rdlong	local01, objptr
17670     51 00 00 FF 
17674     48 E5 85 F1 | 	sub	objptr, ##41800
17678     A7 1E 62 FC | 	wrlong	local01, fp
1767c     08 4E 05 F1 | 	add	fp, #8
17680     A7 3A 68 FC | 	wrlong	#29, fp
17684     08 4E 85 F1 | 	sub	fp, #8
17688     A7 12 02 F6 | 	mov	arg01, fp
1768c     AC 43 BF FD | 	call	#_push
17690     A8 00 90 FD | 	jmp	#LR__1964
17694                 | LR__1961
17694     0C 43 BF FD | 	call	#_pop
17698     A7 FA 61 FC | 	wrlong	result1, fp
1769c     04 4E 05 F1 | 	add	fp, #4
176a0     A7 FC 61 FC | 	wrlong	result2, fp
176a4     04 4E 05 F1 | 	add	fp, #4
176a8     A7 FE 61 FC | 	wrlong	result3, fp
176ac                 | ' 
176ac                 | ' t1=pop()
176ac                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176ac     08 4E 85 F1 | 	sub	fp, #8
176b0     1C FE 0D F2 | 	cmp	result3, #28 wz
176b4     08 4E 05 51 |  if_ne	add	fp, #8
176b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
176bc     08 4E 85 51 |  if_ne	sub	fp, #8
176c0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
176c4     6C 00 90 5D |  if_ne	jmp	#LR__1963
176c8     A7 1E 02 FB | 	rdlong	local01, fp
176cc     52 00 00 FF 
176d0     08 E4 05 F1 | 	add	objptr, ##41992
176d4     F2 1E 62 FC | 	wrlong	local01, objptr
176d8                 | '   q=t1.result.uresult
176d8                 | '   if q<7 then 
176d8     52 00 00 FF 
176dc     08 E4 85 F1 | 	sub	objptr, ##41992
176e0     07 1E 56 F2 | 	cmps	local01, #7 wc
176e4     40 00 90 3D |  if_ae	jmp	#LR__1962
176e8     52 00 00 FF 
176ec     08 E4 05 F1 | 	add	objptr, ##41992
176f0     F2 1E 02 FB | 	rdlong	local01, objptr
176f4     02 1E 66 F0 | 	shl	local01, #2
176f8     C0 E4 85 F1 | 	sub	objptr, #192
176fc     F2 1E 02 F1 | 	add	local01, objptr
17700     0F 1F 02 FB | 	rdlong	local01, local01
17704     A7 1E 62 FC | 	wrlong	local01, fp
17708     08 4E 05 F1 | 	add	fp, #8
1770c     A7 3A 68 FC | 	wrlong	#29, fp
17710     08 4E 85 F1 | 	sub	fp, #8
17714     A7 12 02 F6 | 	mov	arg01, fp
17718     51 00 00 FF 
1771c     48 E5 85 F1 | 	sub	objptr, ##41800
17720     18 43 BF FD | 	call	#_push
17724                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17724     14 00 90 FD | 	jmp	#LR__1964
17728                 | LR__1962
17728     29 12 06 F6 | 	mov	arg01, #41
1772c     94 5C B0 FD | 	call	#_printerror
17730                 | '      printerror(41) : return
17730     08 00 90 FD | 	jmp	#LR__1964
17734                 | LR__1963
17734     29 12 06 F6 | 	mov	arg01, #41
17738     88 5C B0 FD | 	call	#_printerror
1773c                 | LR__1964
1773c     A7 F0 03 F6 | 	mov	ptra, fp
17740     B2 00 A0 FD | 	call	#popregs_
17744                 | _do_strig_ret
17744     2D 00 64 FD | 	ret
17748                 | 
17748                 | ' 
17748                 | ' sub do_getpixel
17748                 | _do_getpixel
17748     00 4A 05 F6 | 	mov	COUNT_, #0
1774c     A8 00 A0 FD | 	call	#pushregs_
17750     24 F0 07 F1 | 	add	ptra, #36
17754     4A 00 00 FF 
17758     80 E4 05 F1 | 	add	objptr, ##38016
1775c     F2 16 02 FB | 	rdlong	arg03, objptr
17760     0B 15 02 F6 | 	mov	arg02, arg03
17764     01 14 66 F0 | 	shl	arg02, #1
17768     0B 15 02 F1 | 	add	arg02, arg03
1776c     02 14 66 F0 | 	shl	arg02, #2
17770     03 00 00 FF 
17774     04 E4 85 F1 | 	sub	objptr, ##1540
17778     F2 14 02 F1 | 	add	arg02, objptr
1777c     0A 17 02 FB | 	rdlong	arg03, arg02
17780     18 4E 05 F1 | 	add	fp, #24
17784     A7 16 62 FC | 	wrlong	arg03, fp
17788                 | ' 
17788                 | ' numpar=compiledline(lineptr_e).result.uresult
17788                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17788     18 4E 85 F1 | 	sub	fp, #24
1778c     02 16 0E F2 | 	cmp	arg03, #2 wz
17790     47 00 00 FF 
17794     7C E4 85 F1 | 	sub	objptr, ##36476
17798     3C 00 90 AD |  if_e	jmp	#LR__1970
1779c     00 12 06 F6 | 	mov	arg01, #0
177a0     C4 E9 B0 FD | 	call	#__system___getiolock_0540
177a4     FD 12 02 F6 | 	mov	arg01, result1
177a8     7C 8F B0 FD | 	call	#__system___lockmem
177ac     83 01 00 FF 
177b0     BF 15 06 F6 | 	mov	arg02, ##@LR__5486
177b4     00 12 06 F6 | 	mov	arg01, #0
177b8     00 16 06 F6 | 	mov	arg03, #0
177bc     5C 9C B0 FD | 	call	#__system___basic_print_string
177c0     00 12 06 F6 | 	mov	arg01, #0
177c4     A0 E9 B0 FD | 	call	#__system___getiolock_0540
177c8     FD 00 68 FC | 	wrlong	#0, result1
177cc     27 12 06 F6 | 	mov	arg01, #39
177d0     F0 5B B0 FD | 	call	#_printerror
177d4     B4 00 90 FD | 	jmp	#LR__1971
177d8                 | LR__1970
177d8     C8 41 BF FD | 	call	#_pop
177dc     FD 16 02 F6 | 	mov	arg03, result1
177e0     FE 14 02 F6 | 	mov	arg02, result2
177e4     FF 12 02 F6 | 	mov	arg01, result3
177e8     0C 4E 05 F1 | 	add	fp, #12
177ec     A7 16 62 FC | 	wrlong	arg03, fp
177f0     04 4E 05 F1 | 	add	fp, #4
177f4     A7 14 62 FC | 	wrlong	arg02, fp
177f8     04 4E 05 F1 | 	add	fp, #4
177fc     A7 12 62 FC | 	wrlong	arg01, fp
17800     14 4E 85 F1 | 	sub	fp, #20
17804     9C 41 BF FD | 	call	#_pop
17808     FF 16 02 F6 | 	mov	arg03, result3
1780c     A7 FA 61 FC | 	wrlong	result1, fp
17810     04 4E 05 F1 | 	add	fp, #4
17814     A7 FC 61 FC | 	wrlong	result2, fp
17818     04 4E 05 F1 | 	add	fp, #4
1781c     A7 16 62 FC | 	wrlong	arg03, fp
17820     08 4E 85 F1 | 	sub	fp, #8
17824     A7 12 02 F6 | 	mov	arg01, fp
17828     3C E2 BF FD | 	call	#_converttoint
1782c     1C 4E 05 F1 | 	add	fp, #28
17830     A7 FA 61 FC | 	wrlong	result1, fp
17834     10 4E 85 F1 | 	sub	fp, #16
17838     A7 12 02 F6 | 	mov	arg01, fp
1783c     0C 4E 85 F1 | 	sub	fp, #12
17840     24 E2 BF FD | 	call	#_converttoint
17844     FD 16 02 F6 | 	mov	arg03, result1
17848     20 4E 05 F1 | 	add	fp, #32
1784c     A7 16 62 FC | 	wrlong	arg03, fp
17850     F2 12 02 FB | 	rdlong	arg01, objptr
17854     04 4E 85 F1 | 	sub	fp, #4
17858     A7 FE 01 FB | 	rdlong	result3, fp
1785c     FF 12 02 F1 | 	add	arg01, result3
17860     1C 4E 85 F1 | 	sub	fp, #28
17864     0A 16 66 F0 | 	shl	arg03, #10
17868     0B 13 02 F1 | 	add	arg01, arg03
1786c     90 5D B0 FD | 	call	#_pspeek
17870     FD FA E1 F8 | 	getbyte	result1, result1, #0
17874     A7 FA 61 FC | 	wrlong	result1, fp
17878     08 4E 05 F1 | 	add	fp, #8
1787c     A7 3A 68 FC | 	wrlong	#29, fp
17880     08 4E 85 F1 | 	sub	fp, #8
17884     A7 12 02 F6 | 	mov	arg01, fp
17888     B0 41 BF FD | 	call	#_push
1788c                 | LR__1971
1788c     A7 F0 03 F6 | 	mov	ptra, fp
17890     B2 00 A0 FD | 	call	#popregs_
17894                 | _do_getpixel_ret
17894     2D 00 64 FD | 	ret
17898                 | 
17898                 | ' 
17898                 | ' sub do_log
17898                 | _do_log
17898     01 4A 05 F6 | 	mov	COUNT_, #1
1789c     A8 00 A0 FD | 	call	#pushregs_
178a0     14 F0 07 F1 | 	add	ptra, #20
178a4     4A 00 00 FF 
178a8     80 E4 05 F1 | 	add	objptr, ##38016
178ac     F2 1E 02 FB | 	rdlong	local01, objptr
178b0     0F 17 02 F6 | 	mov	arg03, local01
178b4     01 16 66 F0 | 	shl	arg03, #1
178b8     0F 17 02 F1 | 	add	arg03, local01
178bc     02 16 66 F0 | 	shl	arg03, #2
178c0     03 00 00 FF 
178c4     04 E4 85 F1 | 	sub	objptr, ##1540
178c8     F2 16 02 F1 | 	add	arg03, objptr
178cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
178d0     0C 4E 05 F1 | 	add	fp, #12
178d4     A7 16 62 FC | 	wrlong	arg03, fp
178d8                 | ' 
178d8                 | ' numpar=compiledline(lineptr_e).result.uresult
178d8                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
178d8     0C 4E 85 F1 | 	sub	fp, #12
178dc     47 00 00 FF 
178e0     7C E4 85 F1 | 	sub	objptr, ##36476
178e4     0C 4E 05 51 |  if_ne	add	fp, #12
178e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
178ec     0C 4E 85 51 |  if_ne	sub	fp, #12
178f0     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
178f4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
178f8     00 12 06 F6 | 	mov	arg01, #0
178fc     68 E8 B0 FD | 	call	#__system___getiolock_0540
17900     FD 12 02 F6 | 	mov	arg01, result1
17904     20 8E B0 FD | 	call	#__system___lockmem
17908     83 01 00 FF 
1790c     CA 15 06 F6 | 	mov	arg02, ##@LR__5487
17910     00 12 06 F6 | 	mov	arg01, #0
17914     00 16 06 F6 | 	mov	arg03, #0
17918     00 9B B0 FD | 	call	#__system___basic_print_string
1791c     00 12 06 F6 | 	mov	arg01, #0
17920     44 E8 B0 FD | 	call	#__system___getiolock_0540
17924     FD 00 68 FC | 	wrlong	#0, result1
17928     27 12 06 F6 | 	mov	arg01, #39
1792c     94 5A B0 FD | 	call	#_printerror
17930     D0 00 90 FD | 	jmp	#LR__1983
17934                 | LR__1980
17934                 | ' 
17934                 | ' if numpar=2 then 
17934     0C 4E 05 F1 | 	add	fp, #12
17938     A7 1E 02 FB | 	rdlong	local01, fp
1793c     0C 4E 85 F1 | 	sub	fp, #12
17940     02 1E 0E F2 | 	cmp	local01, #2 wz
17944     48 00 90 5D |  if_ne	jmp	#LR__1981
17948     58 40 BF FD | 	call	#_pop
1794c     FF 1E 02 F6 | 	mov	local01, result3
17950     A7 FA 61 FC | 	wrlong	result1, fp
17954     04 4E 05 F1 | 	add	fp, #4
17958     A7 FC 61 FC | 	wrlong	result2, fp
1795c     04 4E 05 F1 | 	add	fp, #4
17960     A7 1E 62 FC | 	wrlong	local01, fp
17964     08 4E 85 F1 | 	sub	fp, #8
17968     A7 12 02 F6 | 	mov	arg01, fp
1796c     B4 E1 BF FD | 	call	#_converttofloat
17970     FD 14 02 F6 | 	mov	arg02, result1
17974     FC 16 20 FF 
17978     54 12 06 F6 | 	mov	arg01, ##1076754516
1797c     08 C9 B0 FD | 	call	#__system____builtin_logbase
17980     10 4E 05 F1 | 	add	fp, #16
17984     A7 FA 61 FC | 	wrlong	result1, fp
17988     10 4E 85 F1 | 	sub	fp, #16
1798c     10 00 90 FD | 	jmp	#LR__1982
17990                 | LR__1981
17990     10 4E 05 F1 | 	add	fp, #16
17994     00 C0 9F FF 
17998     A7 00 68 FC | 	wrlong	##1065353216, fp
1799c     10 4E 85 F1 | 	sub	fp, #16
179a0                 | LR__1982
179a0     00 40 BF FD | 	call	#_pop
179a4     FF 1E 02 F6 | 	mov	local01, result3
179a8     A7 FA 61 FC | 	wrlong	result1, fp
179ac     04 4E 05 F1 | 	add	fp, #4
179b0     A7 FC 61 FC | 	wrlong	result2, fp
179b4     04 4E 05 F1 | 	add	fp, #4
179b8     A7 1E 62 FC | 	wrlong	local01, fp
179bc     08 4E 85 F1 | 	sub	fp, #8
179c0     A7 12 02 F6 | 	mov	arg01, fp
179c4     5C E1 BF FD | 	call	#_converttofloat
179c8     FD 14 02 F6 | 	mov	arg02, result1
179cc     FC 16 20 FF 
179d0     54 12 06 F6 | 	mov	arg01, ##1076754516
179d4     B0 C8 B0 FD | 	call	#__system____builtin_logbase
179d8     FD 12 02 F6 | 	mov	arg01, result1
179dc     10 4E 05 F1 | 	add	fp, #16
179e0     A7 14 02 FB | 	rdlong	arg02, fp
179e4     10 4E 85 F1 | 	sub	fp, #16
179e8     F4 BA B0 FD | 	call	#__system___float_div
179ec     A7 FA 61 FC | 	wrlong	result1, fp
179f0     08 4E 05 F1 | 	add	fp, #8
179f4     A7 3C 68 FC | 	wrlong	#30, fp
179f8     08 4E 85 F1 | 	sub	fp, #8
179fc     A7 12 02 F6 | 	mov	arg01, fp
17a00     38 40 BF FD | 	call	#_push
17a04                 | LR__1983
17a04     A7 F0 03 F6 | 	mov	ptra, fp
17a08     B2 00 A0 FD | 	call	#popregs_
17a0c                 | _do_log_ret
17a0c     2D 00 64 FD | 	ret
17a10                 | 
17a10                 | ' 
17a10                 | ' sub do_defsprite
17a10                 | _do_defsprite
17a10     07 4A 05 F6 | 	mov	COUNT_, #7
17a14     A8 00 A0 FD | 	call	#pushregs_
17a18     60 F0 07 F1 | 	add	ptra, #96
17a1c     84 3F BF FD | 	call	#_pop
17a20     FD 16 02 F6 | 	mov	arg03, result1
17a24     FE 14 02 F6 | 	mov	arg02, result2
17a28     FF 12 02 F6 | 	mov	arg01, result3
17a2c     30 4E 05 F1 | 	add	fp, #48
17a30     A7 16 62 FC | 	wrlong	arg03, fp
17a34     04 4E 05 F1 | 	add	fp, #4
17a38     A7 14 62 FC | 	wrlong	arg02, fp
17a3c     04 4E 05 F1 | 	add	fp, #4
17a40     A7 12 62 FC | 	wrlong	arg01, fp
17a44     38 4E 85 F1 | 	sub	fp, #56
17a48     58 3F BF FD | 	call	#_pop
17a4c     FD 16 02 F6 | 	mov	arg03, result1
17a50     FE 14 02 F6 | 	mov	arg02, result2
17a54     FF 12 02 F6 | 	mov	arg01, result3
17a58     24 4E 05 F1 | 	add	fp, #36
17a5c     A7 16 62 FC | 	wrlong	arg03, fp
17a60     04 4E 05 F1 | 	add	fp, #4
17a64     A7 14 62 FC | 	wrlong	arg02, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 12 62 FC | 	wrlong	arg01, fp
17a70     2C 4E 85 F1 | 	sub	fp, #44
17a74     2C 3F BF FD | 	call	#_pop
17a78     FD 16 02 F6 | 	mov	arg03, result1
17a7c     FE 14 02 F6 | 	mov	arg02, result2
17a80     FF 12 02 F6 | 	mov	arg01, result3
17a84     18 4E 05 F1 | 	add	fp, #24
17a88     A7 16 62 FC | 	wrlong	arg03, fp
17a8c     04 4E 05 F1 | 	add	fp, #4
17a90     A7 14 62 FC | 	wrlong	arg02, fp
17a94     04 4E 05 F1 | 	add	fp, #4
17a98     A7 12 62 FC | 	wrlong	arg01, fp
17a9c     20 4E 85 F1 | 	sub	fp, #32
17aa0     00 3F BF FD | 	call	#_pop
17aa4     FD 16 02 F6 | 	mov	arg03, result1
17aa8     FE 14 02 F6 | 	mov	arg02, result2
17aac     FF 12 02 F6 | 	mov	arg01, result3
17ab0     0C 4E 05 F1 | 	add	fp, #12
17ab4     A7 16 62 FC | 	wrlong	arg03, fp
17ab8     04 4E 05 F1 | 	add	fp, #4
17abc     A7 14 62 FC | 	wrlong	arg02, fp
17ac0     04 4E 05 F1 | 	add	fp, #4
17ac4     A7 12 62 FC | 	wrlong	arg01, fp
17ac8     14 4E 85 F1 | 	sub	fp, #20
17acc     D4 3E BF FD | 	call	#_pop
17ad0     FF 16 02 F6 | 	mov	arg03, result3
17ad4     A7 FA 61 FC | 	wrlong	result1, fp
17ad8     04 4E 05 F1 | 	add	fp, #4
17adc     A7 FC 61 FC | 	wrlong	result2, fp
17ae0     04 4E 05 F1 | 	add	fp, #4
17ae4     A7 16 62 FC | 	wrlong	arg03, fp
17ae8     08 4E 85 F1 | 	sub	fp, #8
17aec     A7 12 02 F6 | 	mov	arg01, fp
17af0     74 DF BF FD | 	call	#_converttoint
17af4     3C 4E 05 F1 | 	add	fp, #60
17af8     A7 FA 61 FC | 	wrlong	result1, fp
17afc     30 4E 85 F1 | 	sub	fp, #48
17b00     A7 12 02 F6 | 	mov	arg01, fp
17b04     0C 4E 85 F1 | 	sub	fp, #12
17b08     5C DF BF FD | 	call	#_converttoint
17b0c     40 4E 05 F1 | 	add	fp, #64
17b10     A7 FA 61 FC | 	wrlong	result1, fp
17b14     28 4E 85 F1 | 	sub	fp, #40
17b18     A7 12 02 F6 | 	mov	arg01, fp
17b1c     18 4E 85 F1 | 	sub	fp, #24
17b20     44 DF BF FD | 	call	#_converttoint
17b24     44 4E 05 F1 | 	add	fp, #68
17b28     A7 FA 61 FC | 	wrlong	result1, fp
17b2c     20 4E 85 F1 | 	sub	fp, #32
17b30     A7 12 02 F6 | 	mov	arg01, fp
17b34     24 4E 85 F1 | 	sub	fp, #36
17b38     2C DF BF FD | 	call	#_converttoint
17b3c     48 4E 05 F1 | 	add	fp, #72
17b40     A7 FA 61 FC | 	wrlong	result1, fp
17b44     18 4E 85 F1 | 	sub	fp, #24
17b48     A7 12 02 F6 | 	mov	arg01, fp
17b4c     30 4E 85 F1 | 	sub	fp, #48
17b50     14 DF BF FD | 	call	#_converttoint
17b54     4C 4E 05 F1 | 	add	fp, #76
17b58     A7 FA 61 FC | 	wrlong	result1, fp
17b5c                 | ' 
17b5c                 | ' t5=pop()
17b5c                 | ' t4=pop()
17b5c                 | ' t3=pop()
17b5c                 | ' t2=pop()
17b5c                 | ' t1=pop()
17b5c                 | ' 
17b5c                 | ' ' do convert, defsprite is not a racing command
17b5c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17b5c                 | '  
17b5c                 | ' ' todo: check parameters for linits
17b5c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17b5c     10 4E 85 F1 | 	sub	fp, #16
17b60     A7 16 02 FB | 	rdlong	arg03, fp
17b64     3C 4E 85 F1 | 	sub	fp, #60
17b68     02 16 66 F0 | 	shl	arg03, #2
17b6c     51 00 00 FF 
17b70     64 E5 05 F1 | 	add	objptr, ##41828
17b74     F2 16 02 F1 | 	add	arg03, objptr
17b78     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17b7c     51 00 00 FF 
17b80     64 E5 85 F1 | 	sub	objptr, ##41828
17b84     2C 00 90 AD |  if_e	jmp	#LR__1990
17b88     3C 4E 05 F1 | 	add	fp, #60
17b8c     A7 16 02 FB | 	rdlong	arg03, fp
17b90     3C 4E 85 F1 | 	sub	fp, #60
17b94     02 16 66 F0 | 	shl	arg03, #2
17b98     51 00 00 FF 
17b9c     64 E5 05 F1 | 	add	objptr, ##41828
17ba0     F2 16 02 F1 | 	add	arg03, objptr
17ba4     0B 13 02 FB | 	rdlong	arg01, arg03
17ba8     51 00 00 FF 
17bac     64 E5 85 F1 | 	sub	objptr, ##41828
17bb0     68 CB B0 FD | 	call	#__system___gc_free
17bb4                 | LR__1990
17bb4     3C 4E 05 F1 | 	add	fp, #60
17bb8     A7 1E 02 FB | 	rdlong	local01, fp
17bbc     0C 4E 05 F1 | 	add	fp, #12
17bc0     A7 16 02 FB | 	rdlong	arg03, fp
17bc4     04 4E 05 F1 | 	add	fp, #4
17bc8     A7 14 02 FB | 	rdlong	arg02, fp
17bcc     0A 17 02 FD | 	qmul	arg03, arg02
17bd0     02 1E 66 F0 | 	shl	local01, #2
17bd4     51 00 00 FF 
17bd8     64 E5 05 F1 | 	add	objptr, ##41828
17bdc     F2 1E 02 F1 | 	add	local01, objptr
17be0     4C 4E 85 F1 | 	sub	fp, #76
17be4     51 00 00 FF 
17be8     64 E5 85 F1 | 	sub	objptr, ##41828
17bec     18 12 62 FD | 	getqx	arg01
17bf0     EC C9 B0 FD | 	call	#__system___gc_alloc_managed
17bf4     0F FB 61 FC | 	wrlong	result1, local01
17bf8                 | ' for y=a3 to a3+a5-1
17bf8     44 4E 05 F1 | 	add	fp, #68
17bfc     A7 20 02 FB | 	rdlong	local02, fp
17c00     0C 4E 05 F1 | 	add	fp, #12
17c04     A7 20 62 FC | 	wrlong	local02, fp
17c08     0C 4E 85 F1 | 	sub	fp, #12
17c0c     A7 22 02 FB | 	rdlong	local03, fp
17c10     08 4E 05 F1 | 	add	fp, #8
17c14     A7 24 02 FB | 	rdlong	local04, fp
17c18     4C 4E 85 F1 | 	sub	fp, #76
17c1c     12 23 02 F1 | 	add	local03, local04
17c20                 | LR__1991
17c20     50 4E 05 F1 | 	add	fp, #80
17c24     A7 20 02 FB | 	rdlong	local02, fp
17c28     50 4E 85 F1 | 	sub	fp, #80
17c2c     11 21 52 F2 | 	cmps	local02, local03 wc
17c30     F4 00 90 3D |  if_ae	jmp	#LR__1994
17c34                 | '   for x=a2 to a4+a2-1
17c34     40 4E 05 F1 | 	add	fp, #64
17c38     A7 1E 02 FB | 	rdlong	local01, fp
17c3c     14 4E 05 F1 | 	add	fp, #20
17c40     A7 1E 62 FC | 	wrlong	local01, fp
17c44     0C 4E 85 F1 | 	sub	fp, #12
17c48     A7 26 02 FB | 	rdlong	local05, fp
17c4c     08 4E 85 F1 | 	sub	fp, #8
17c50     A7 28 02 FB | 	rdlong	local06, fp
17c54     40 4E 85 F1 | 	sub	fp, #64
17c58     14 27 02 F1 | 	add	local05, local06
17c5c                 | LR__1992
17c5c     54 4E 05 F1 | 	add	fp, #84
17c60     A7 1E 02 FB | 	rdlong	local01, fp
17c64     54 4E 85 F1 | 	sub	fp, #84
17c68     13 1F 52 F2 | 	cmps	local01, local05 wc
17c6c     A0 00 90 3D |  if_ae	jmp	#LR__1993
17c70     3C 4E 05 F1 | 	add	fp, #60
17c74     A7 28 02 FB | 	rdlong	local06, fp
17c78     18 4E 05 F1 | 	add	fp, #24
17c7c     A7 24 02 FB | 	rdlong	local04, fp
17c80     14 4E 85 F1 | 	sub	fp, #20
17c84     A7 20 02 FB | 	rdlong	local02, fp
17c88     10 4E 05 F1 | 	add	fp, #16
17c8c     A7 1E 02 FB | 	rdlong	local01, fp
17c90     0F 17 02 F6 | 	mov	arg03, local01
17c94     0C 4E 85 F1 | 	sub	fp, #12
17c98     A7 14 02 FB | 	rdlong	arg02, fp
17c9c     0A 17 82 F1 | 	sub	arg03, arg02
17ca0     04 4E 05 F1 | 	add	fp, #4
17ca4     A7 14 02 FB | 	rdlong	arg02, fp
17ca8     0A 17 02 FD | 	qmul	arg03, arg02
17cac     02 28 66 F0 | 	shl	local06, #2
17cb0     51 00 00 FF 
17cb4     64 E5 05 F1 | 	add	objptr, ##41828
17cb8     F2 28 02 F1 | 	add	local06, objptr
17cbc     14 29 02 FB | 	rdlong	local06, local06
17cc0     12 2B 02 F6 | 	mov	local07, local04
17cc4     10 2B 82 F1 | 	sub	local07, local02
17cc8     51 00 00 FF 
17ccc     64 E5 85 F1 | 	sub	objptr, ##41828
17cd0     F2 12 02 FB | 	rdlong	arg01, objptr
17cd4     12 13 02 F1 | 	add	arg01, local04
17cd8     48 4E 85 F1 | 	sub	fp, #72
17cdc     0A 1E 66 F0 | 	shl	local01, #10
17ce0     0F 13 02 F1 | 	add	arg01, local01
17ce4     18 24 62 FD | 	getqx	local04
17ce8     12 2B 02 F1 | 	add	local07, local04
17cec     14 2B 02 F1 | 	add	local07, local06
17cf0     0C 59 B0 FD | 	call	#_pspeek
17cf4     15 FB 41 FC | 	wrbyte	result1, local07
17cf8     54 4E 05 F1 | 	add	fp, #84
17cfc     A7 2A 02 FB | 	rdlong	local07, fp
17d00     01 2A 06 F1 | 	add	local07, #1
17d04     A7 2A 62 FC | 	wrlong	local07, fp
17d08     54 4E 85 F1 | 	sub	fp, #84
17d0c     4C FF 9F FD | 	jmp	#LR__1992
17d10                 | LR__1993
17d10     50 4E 05 F1 | 	add	fp, #80
17d14     A7 2A 02 FB | 	rdlong	local07, fp
17d18     01 2A 06 F1 | 	add	local07, #1
17d1c     A7 2A 62 FC | 	wrlong	local07, fp
17d20     50 4E 85 F1 | 	sub	fp, #80
17d24     F8 FE 9F FD | 	jmp	#LR__1991
17d28                 | LR__1994
17d28     3C 4E 05 F1 | 	add	fp, #60
17d2c     A7 2A 02 FB | 	rdlong	local07, fp
17d30     15 13 02 F6 | 	mov	arg01, local07
17d34     3C 4E 85 F1 | 	sub	fp, #60
17d38     02 2A 66 F0 | 	shl	local07, #2
17d3c     51 00 00 FF 
17d40     64 E5 05 F1 | 	add	objptr, ##41828
17d44     F2 2A 02 F1 | 	add	local07, objptr
17d48     15 15 02 FB | 	rdlong	arg02, local07
17d4c     51 00 00 FF 
17d50     64 E5 85 F1 | 	sub	objptr, ##41828
17d54     78 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17d58     3C 4E 05 F1 | 	add	fp, #60
17d5c     A7 12 02 FB | 	rdlong	arg01, fp
17d60     0C 4E 05 F1 | 	add	fp, #12
17d64     A7 14 02 FB | 	rdlong	arg02, fp
17d68     04 4E 05 F1 | 	add	fp, #4
17d6c     A7 16 02 FB | 	rdlong	arg03, fp
17d70     4C 4E 85 F1 | 	sub	fp, #76
17d74     E8 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
17d78     A7 F0 03 F6 | 	mov	ptra, fp
17d7c     B2 00 A0 FD | 	call	#popregs_
17d80                 | _do_defsprite_ret
17d80     2D 00 64 FD | 	ret
17d84                 | 
17d84                 | ' 
17d84                 | ' sub do_sprite
17d84                 | _do_sprite
17d84     00 4A 05 F6 | 	mov	COUNT_, #0
17d88     A8 00 A0 FD | 	call	#pushregs_
17d8c     30 F0 07 F1 | 	add	ptra, #48
17d90     10 3C BF FD | 	call	#_pop
17d94     FD 16 02 F6 | 	mov	arg03, result1
17d98     FE 14 02 F6 | 	mov	arg02, result2
17d9c     FF 12 02 F6 | 	mov	arg01, result3
17da0     18 4E 05 F1 | 	add	fp, #24
17da4     A7 16 62 FC | 	wrlong	arg03, fp
17da8     04 4E 05 F1 | 	add	fp, #4
17dac     A7 14 62 FC | 	wrlong	arg02, fp
17db0     04 4E 05 F1 | 	add	fp, #4
17db4     A7 12 62 FC | 	wrlong	arg01, fp
17db8     20 4E 85 F1 | 	sub	fp, #32
17dbc     E4 3B BF FD | 	call	#_pop
17dc0     FD 16 02 F6 | 	mov	arg03, result1
17dc4     FE 14 02 F6 | 	mov	arg02, result2
17dc8     FF 12 02 F6 | 	mov	arg01, result3
17dcc     0C 4E 05 F1 | 	add	fp, #12
17dd0     A7 16 62 FC | 	wrlong	arg03, fp
17dd4     04 4E 05 F1 | 	add	fp, #4
17dd8     A7 14 62 FC | 	wrlong	arg02, fp
17ddc     04 4E 05 F1 | 	add	fp, #4
17de0     A7 12 62 FC | 	wrlong	arg01, fp
17de4     14 4E 85 F1 | 	sub	fp, #20
17de8     B8 3B BF FD | 	call	#_pop
17dec     FF 16 02 F6 | 	mov	arg03, result3
17df0     A7 FA 61 FC | 	wrlong	result1, fp
17df4     04 4E 05 F1 | 	add	fp, #4
17df8     A7 FC 61 FC | 	wrlong	result2, fp
17dfc     04 4E 05 F1 | 	add	fp, #4
17e00     A7 16 62 FC | 	wrlong	arg03, fp
17e04     08 4E 85 F1 | 	sub	fp, #8
17e08     A7 12 02 F6 | 	mov	arg01, fp
17e0c     58 DC BF FD | 	call	#_converttoint
17e10     24 4E 05 F1 | 	add	fp, #36
17e14     A7 FA 61 FC | 	wrlong	result1, fp
17e18     18 4E 85 F1 | 	sub	fp, #24
17e1c     A7 12 02 F6 | 	mov	arg01, fp
17e20     0C 4E 85 F1 | 	sub	fp, #12
17e24     40 DC BF FD | 	call	#_converttoint
17e28     28 4E 05 F1 | 	add	fp, #40
17e2c     A7 FA 61 FC | 	wrlong	result1, fp
17e30     10 4E 85 F1 | 	sub	fp, #16
17e34     A7 12 02 F6 | 	mov	arg01, fp
17e38     18 4E 85 F1 | 	sub	fp, #24
17e3c     28 DC BF FD | 	call	#_converttoint
17e40     2C 4E 05 F1 | 	add	fp, #44
17e44     A7 FA 61 FC | 	wrlong	result1, fp
17e48     08 4E 85 F1 | 	sub	fp, #8
17e4c     A7 12 02 FB | 	rdlong	arg01, fp
17e50     04 4E 05 F1 | 	add	fp, #4
17e54     A7 14 02 FB | 	rdlong	arg02, fp
17e58     FD 16 02 F6 | 	mov	arg03, result1
17e5c     28 4E 85 F1 | 	sub	fp, #40
17e60     94 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17e64     A7 F0 03 F6 | 	mov	ptra, fp
17e68     B2 00 A0 FD | 	call	#popregs_
17e6c                 | _do_sprite_ret
17e6c     2D 00 64 FD | 	ret
17e70                 | 
17e70                 | ' 
17e70                 | ' sub do_mousex
17e70                 | _do_mousex
17e70     00 4A 05 F6 | 	mov	COUNT_, #0
17e74     A8 00 A0 FD | 	call	#pushregs_
17e78     0C F0 07 F1 | 	add	ptra, #12
17e7c     08 4E 05 F1 | 	add	fp, #8
17e80     A7 3A 68 FC | 	wrlong	#29, fp
17e84     08 4E 85 F1 | 	sub	fp, #8
17e88     51 00 00 FF 
17e8c     1C E5 05 F1 | 	add	objptr, ##41756
17e90     F2 12 02 FB | 	rdlong	arg01, objptr
17e94     51 00 00 FF 
17e98     1C E5 85 F1 | 	sub	objptr, ##41756
17e9c     A7 12 62 FC | 	wrlong	arg01, fp
17ea0     A7 12 02 F6 | 	mov	arg01, fp
17ea4     94 3B BF FD | 	call	#_push
17ea8     A7 F0 03 F6 | 	mov	ptra, fp
17eac     B2 00 A0 FD | 	call	#popregs_
17eb0                 | _do_mousex_ret
17eb0     2D 00 64 FD | 	ret
17eb4                 | 
17eb4                 | ' 
17eb4                 | ' sub do_mousey
17eb4                 | _do_mousey
17eb4     00 4A 05 F6 | 	mov	COUNT_, #0
17eb8     A8 00 A0 FD | 	call	#pushregs_
17ebc     0C F0 07 F1 | 	add	ptra, #12
17ec0     08 4E 05 F1 | 	add	fp, #8
17ec4     A7 3A 68 FC | 	wrlong	#29, fp
17ec8     08 4E 85 F1 | 	sub	fp, #8
17ecc     51 00 00 FF 
17ed0     20 E5 05 F1 | 	add	objptr, ##41760
17ed4     F2 12 02 FB | 	rdlong	arg01, objptr
17ed8     51 00 00 FF 
17edc     20 E5 85 F1 | 	sub	objptr, ##41760
17ee0     A7 12 62 FC | 	wrlong	arg01, fp
17ee4     A7 12 02 F6 | 	mov	arg01, fp
17ee8     50 3B BF FD | 	call	#_push
17eec     A7 F0 03 F6 | 	mov	ptra, fp
17ef0     B2 00 A0 FD | 	call	#popregs_
17ef4                 | _do_mousey_ret
17ef4     2D 00 64 FD | 	ret
17ef8                 | 
17ef8                 | ' 
17ef8                 | ' sub do_mousew
17ef8                 | _do_mousew
17ef8     00 4A 05 F6 | 	mov	COUNT_, #0
17efc     A8 00 A0 FD | 	call	#pushregs_
17f00     0C F0 07 F1 | 	add	ptra, #12
17f04     08 4E 05 F1 | 	add	fp, #8
17f08     A7 38 68 FC | 	wrlong	#28, fp
17f0c     08 4E 85 F1 | 	sub	fp, #8
17f10     51 00 00 FF 
17f14     28 E5 05 F1 | 	add	objptr, ##41768
17f18     F2 12 02 FB | 	rdlong	arg01, objptr
17f1c     51 00 00 FF 
17f20     28 E5 85 F1 | 	sub	objptr, ##41768
17f24     A7 12 62 FC | 	wrlong	arg01, fp
17f28     A7 12 02 F6 | 	mov	arg01, fp
17f2c     0C 3B BF FD | 	call	#_push
17f30     A7 F0 03 F6 | 	mov	ptra, fp
17f34     B2 00 A0 FD | 	call	#popregs_
17f38                 | _do_mousew_ret
17f38     2D 00 64 FD | 	ret
17f3c                 | 
17f3c                 | ' 
17f3c                 | ' sub do_mousek
17f3c                 | _do_mousek
17f3c     00 4A 05 F6 | 	mov	COUNT_, #0
17f40     A8 00 A0 FD | 	call	#pushregs_
17f44     0C F0 07 F1 | 	add	ptra, #12
17f48     08 4E 05 F1 | 	add	fp, #8
17f4c     A7 3A 68 FC | 	wrlong	#29, fp
17f50     08 4E 85 F1 | 	sub	fp, #8
17f54     51 00 00 FF 
17f58     24 E5 05 F1 | 	add	objptr, ##41764
17f5c     F2 12 02 FB | 	rdlong	arg01, objptr
17f60     51 00 00 FF 
17f64     24 E5 85 F1 | 	sub	objptr, ##41764
17f68     A7 12 62 FC | 	wrlong	arg01, fp
17f6c     A7 12 02 F6 | 	mov	arg01, fp
17f70     C8 3A BF FD | 	call	#_push
17f74     A7 F0 03 F6 | 	mov	ptra, fp
17f78     B2 00 A0 FD | 	call	#popregs_
17f7c                 | _do_mousek_ret
17f7c     2D 00 64 FD | 	ret
17f80                 | 
17f80                 | ' 
17f80                 | ' 
17f80                 | ' sub do_rdpin
17f80                 | _do_rdpin
17f80     00 4A 05 F6 | 	mov	COUNT_, #0
17f84     A8 00 A0 FD | 	call	#pushregs_
17f88     0C F0 07 F1 | 	add	ptra, #12
17f8c     14 3A BF FD | 	call	#_pop
17f90     A7 FA 61 FC | 	wrlong	result1, fp
17f94     04 4E 05 F1 | 	add	fp, #4
17f98     A7 FC 61 FC | 	wrlong	result2, fp
17f9c     04 4E 05 F1 | 	add	fp, #4
17fa0     A7 FE 61 FC | 	wrlong	result3, fp
17fa4     08 4E 85 F1 | 	sub	fp, #8
17fa8     A7 12 02 F6 | 	mov	arg01, fp
17fac     B8 DA BF FD | 	call	#_converttoint
17fb0     FD FA 89 FA | 	rdpin	result1, result1
17fb4     52 00 00 FF 
17fb8     14 E4 05 F1 | 	add	objptr, ##42004
17fbc     F2 FA 61 FC | 	wrlong	result1, objptr
17fc0     52 00 00 FF 
17fc4     14 E4 85 F1 | 	sub	objptr, ##42004
17fc8     08 4E 05 F1 | 	add	fp, #8
17fcc     A7 3A 68 FC | 	wrlong	#29, fp
17fd0     08 4E 85 F1 | 	sub	fp, #8
17fd4     A7 08 68 FC | 	wrlong	#4, fp
17fd8     A7 12 02 F6 | 	mov	arg01, fp
17fdc     5C 3A BF FD | 	call	#_push
17fe0     A7 F0 03 F6 | 	mov	ptra, fp
17fe4     B2 00 A0 FD | 	call	#popregs_
17fe8                 | _do_rdpin_ret
17fe8     2D 00 64 FD | 	ret
17fec                 | 
17fec                 | ' 
17fec                 | ' sub do_rqpin
17fec                 | _do_rqpin
17fec     00 4A 05 F6 | 	mov	COUNT_, #0
17ff0     A8 00 A0 FD | 	call	#pushregs_
17ff4     0C F0 07 F1 | 	add	ptra, #12
17ff8     A8 39 BF FD | 	call	#_pop
17ffc     A7 FA 61 FC | 	wrlong	result1, fp
18000     04 4E 05 F1 | 	add	fp, #4
18004     A7 FC 61 FC | 	wrlong	result2, fp
18008     04 4E 05 F1 | 	add	fp, #4
1800c     A7 FE 61 FC | 	wrlong	result3, fp
18010     08 4E 85 F1 | 	sub	fp, #8
18014     A7 12 02 F6 | 	mov	arg01, fp
18018     4C DA BF FD | 	call	#_converttoint
1801c     FD 12 02 F6 | 	mov	arg01, result1
18020     00 FA 05 F6 | 	mov	result1, #0
18024     09 FB 81 FA | 	rqpin	result1, arg01
18028     52 00 00 FF 
1802c     14 E4 05 F1 | 	add	objptr, ##42004
18030     F2 FA 61 FC | 	wrlong	result1, objptr
18034     52 00 00 FF 
18038     14 E4 85 F1 | 	sub	objptr, ##42004
1803c     08 4E 05 F1 | 	add	fp, #8
18040     A7 3A 68 FC | 	wrlong	#29, fp
18044     08 4E 85 F1 | 	sub	fp, #8
18048     A7 08 68 FC | 	wrlong	#4, fp
1804c     A7 12 02 F6 | 	mov	arg01, fp
18050     E8 39 BF FD | 	call	#_push
18054     A7 F0 03 F6 | 	mov	ptra, fp
18058     B2 00 A0 FD | 	call	#popregs_
1805c                 | _do_rqpin_ret
1805c     2D 00 64 FD | 	ret
18060                 | 
18060                 | ' 
18060                 | ' sub do_pinread
18060                 | _do_pinread
18060     00 4A 05 F6 | 	mov	COUNT_, #0
18064     A8 00 A0 FD | 	call	#pushregs_
18068     0C F0 07 F1 | 	add	ptra, #12
1806c     34 39 BF FD | 	call	#_pop
18070     A7 FA 61 FC | 	wrlong	result1, fp
18074     04 4E 05 F1 | 	add	fp, #4
18078     A7 FC 61 FC | 	wrlong	result2, fp
1807c     04 4E 05 F1 | 	add	fp, #4
18080     A7 FE 61 FC | 	wrlong	result3, fp
18084     08 4E 85 F1 | 	sub	fp, #8
18088     A7 12 02 F6 | 	mov	arg01, fp
1808c     D8 D9 BF FD | 	call	#_converttoint
18090     FD 12 02 F6 | 	mov	arg01, result1
18094     20 12 CE F7 | 	test	arg01, #32 wz
18098     FF FB 01 56 |  if_ne	mov	result1, inb
1809c     FE FB 01 A6 |  if_e	mov	result1, ina
180a0     09 FB 41 F0 | 	shr	result1, arg01
180a4     06 12 46 F0 | 	shr	arg01, #6
180a8     09 FB 41 F7 | 	zerox	result1, arg01
180ac     52 00 00 FF 
180b0     14 E4 05 F1 | 	add	objptr, ##42004
180b4     F2 FA 61 FC | 	wrlong	result1, objptr
180b8     52 00 00 FF 
180bc     14 E4 85 F1 | 	sub	objptr, ##42004
180c0     08 4E 05 F1 | 	add	fp, #8
180c4     A7 3A 68 FC | 	wrlong	#29, fp
180c8     08 4E 85 F1 | 	sub	fp, #8
180cc     A7 08 68 FC | 	wrlong	#4, fp
180d0     A7 12 02 F6 | 	mov	arg01, fp
180d4     64 39 BF FD | 	call	#_push
180d8     A7 F0 03 F6 | 	mov	ptra, fp
180dc     B2 00 A0 FD | 	call	#popregs_
180e0                 | _do_pinread_ret
180e0     2D 00 64 FD | 	ret
180e4                 | 
180e4                 | ' 
180e4                 | ' sub do_gettime
180e4                 | _do_gettime
180e4     02 4A 05 F6 | 	mov	COUNT_, #2
180e8     A8 00 A0 FD | 	call	#pushregs_
180ec     14 F0 07 F1 | 	add	ptra, #20
180f0                 | ' 
180f0                 | ' const asm 
180f0     1A 1E 72 FD | 	getct	local01 wc
180f4     1A 20 62 FD | 	getct	local02
180f8                 | ' 
180f8                 | ' return hi1, lo1
180f8     10 FD 01 F6 | 	mov	result2, local02
180fc     A7 1E 62 FC | 	wrlong	local01, fp
18100     04 4E 05 F1 | 	add	fp, #4
18104     A7 FC 61 FC | 	wrlong	result2, fp
18108     0C 4E 05 F1 | 	add	fp, #12
1810c     A7 3A 68 FC | 	wrlong	#29, fp
18110     0C 4E 85 F1 | 	sub	fp, #12
18114     A7 12 02 FB | 	rdlong	arg01, fp
18118     04 4E 05 F1 | 	add	fp, #4
1811c     A7 12 62 FC | 	wrlong	arg01, fp
18120     08 4E 85 F1 | 	sub	fp, #8
18124     A7 12 02 FB | 	rdlong	arg01, fp
18128     0C 4E 05 F1 | 	add	fp, #12
1812c     A7 12 62 FC | 	wrlong	arg01, fp
18130     04 4E 85 F1 | 	sub	fp, #4
18134     A7 12 02 F6 | 	mov	arg01, fp
18138     08 4E 85 F1 | 	sub	fp, #8
1813c     FC 38 BF FD | 	call	#_push
18140     A7 F0 03 F6 | 	mov	ptra, fp
18144     B2 00 A0 FD | 	call	#popregs_
18148                 | _do_gettime_ret
18148     2D 00 64 FD | 	ret
1814c                 | 
1814c                 | '    
1814c                 | ' 
1814c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1814c                 | ' 
1814c                 | ' '' ----------------------------- Clear the screen
1814c                 | ' 
1814c                 | ' sub do_cls
1814c                 | _do_cls
1814c     37 00 00 FF 
18150     3C E4 05 F1 | 	add	objptr, ##28220
18154     F2 12 02 FB | 	rdlong	arg01, objptr
18158     04 E4 85 F1 | 	sub	objptr, #4
1815c     F2 14 02 FB | 	rdlong	arg02, objptr
18160     37 00 00 FF 
18164     38 E4 85 F1 | 	sub	objptr, ##28216
18168     14 6F B0 FD | 	call	#_hg010b_spin2_cls
1816c     37 00 00 FF 
18170     3C E4 05 F1 | 	add	objptr, ##28220
18174     F2 14 02 FB | 	rdlong	arg02, objptr
18178     14 E4 85 F1 | 	sub	objptr, #20
1817c     F2 14 62 FC | 	wrlong	arg02, objptr
18180     37 00 00 FF 
18184     28 E4 85 F1 | 	sub	objptr, ##28200
18188                 | _do_cls_ret
18188     2D 00 64 FD | 	ret
1818c                 | 
1818c                 | ' 
1818c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1818c                 | ' 
1818c                 | ' sub do_color
1818c                 | _do_color
1818c     03 4A 05 F6 | 	mov	COUNT_, #3
18190     A8 00 A0 FD | 	call	#pushregs_
18194     0C 38 BF FD | 	call	#_pop
18198     FD 1E 02 F6 | 	mov	local01, result1
1819c     FE 20 02 F6 | 	mov	local02, result2
181a0     FF 22 02 F6 | 	mov	local03, result3
181a4     37 00 00 FF 
181a8     28 E4 05 F1 | 	add	objptr, ##28200
181ac     F2 1E 62 FC | 	wrlong	local01, objptr
181b0     37 00 00 FF 
181b4     28 E4 85 F1 | 	sub	objptr, ##28200
181b8     A7 F0 03 F6 | 	mov	ptra, fp
181bc     B2 00 A0 FD | 	call	#popregs_
181c0                 | _do_color_ret
181c0     2D 00 64 FD | 	ret
181c4                 | 
181c4                 | ' 
181c4                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
181c4                 | ' 
181c4                 | ' sub do_plot
181c4                 | _do_plot
181c4     00 4A 05 F6 | 	mov	COUNT_, #0
181c8     A8 00 A0 FD | 	call	#pushregs_
181cc     20 F0 07 F1 | 	add	ptra, #32
181d0     D0 37 BF FD | 	call	#_pop
181d4     FD 16 02 F6 | 	mov	arg03, result1
181d8     FE 14 02 F6 | 	mov	arg02, result2
181dc     FF 12 02 F6 | 	mov	arg01, result3
181e0     0C 4E 05 F1 | 	add	fp, #12
181e4     A7 16 62 FC | 	wrlong	arg03, fp
181e8     04 4E 05 F1 | 	add	fp, #4
181ec     A7 14 62 FC | 	wrlong	arg02, fp
181f0     04 4E 05 F1 | 	add	fp, #4
181f4     A7 12 62 FC | 	wrlong	arg01, fp
181f8     14 4E 85 F1 | 	sub	fp, #20
181fc     A4 37 BF FD | 	call	#_pop
18200     FF 16 02 F6 | 	mov	arg03, result3
18204     A7 FA 61 FC | 	wrlong	result1, fp
18208     04 4E 05 F1 | 	add	fp, #4
1820c     A7 FC 61 FC | 	wrlong	result2, fp
18210     04 4E 05 F1 | 	add	fp, #4
18214     A7 16 62 FC | 	wrlong	arg03, fp
18218     08 4E 85 F1 | 	sub	fp, #8
1821c     A7 12 02 F6 | 	mov	arg01, fp
18220     44 D8 BF FD | 	call	#_converttoint
18224     18 4E 05 F1 | 	add	fp, #24
18228     A7 FA 61 FC | 	wrlong	result1, fp
1822c     0C 4E 85 F1 | 	sub	fp, #12
18230     A7 12 02 F6 | 	mov	arg01, fp
18234     0C 4E 85 F1 | 	sub	fp, #12
18238     2C D8 BF FD | 	call	#_converttoint
1823c     1C 4E 05 F1 | 	add	fp, #28
18240     A7 FA 61 FC | 	wrlong	result1, fp
18244     04 4E 85 F1 | 	sub	fp, #4
18248     A7 16 02 FB | 	rdlong	arg03, fp
1824c     37 00 00 FF 
18250     2C E4 05 F1 | 	add	objptr, ##28204
18254     F2 16 62 FC | 	wrlong	arg03, objptr
18258     04 4E 05 F1 | 	add	fp, #4
1825c     A7 14 02 FB | 	rdlong	arg02, fp
18260     1C 4E 85 F1 | 	sub	fp, #28
18264     04 E4 05 F1 | 	add	objptr, #4
18268     F2 14 62 FC | 	wrlong	arg02, objptr
1826c     04 E4 85 F1 | 	sub	objptr, #4
18270     F2 12 02 FB | 	rdlong	arg01, objptr
18274     04 E4 85 F1 | 	sub	objptr, #4
18278     F2 16 02 FB | 	rdlong	arg03, objptr
1827c     37 00 00 FF 
18280     28 E4 85 F1 | 	sub	objptr, ##28200
18284     24 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18288     A7 F0 03 F6 | 	mov	ptra, fp
1828c     B2 00 A0 FD | 	call	#popregs_
18290                 | _do_plot_ret
18290     2D 00 64 FD | 	ret
18294                 | 
18294                 | ' 
18294                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
18294                 | ' 
18294                 | ' sub do_draw
18294                 | _do_draw
18294     00 4A 05 F6 | 	mov	COUNT_, #0
18298     A8 00 A0 FD | 	call	#pushregs_
1829c     20 F0 07 F1 | 	add	ptra, #32
182a0     00 37 BF FD | 	call	#_pop
182a4     FD 1A 02 F6 | 	mov	arg05, result1
182a8     FE 18 02 F6 | 	mov	arg04, result2
182ac     FF 16 02 F6 | 	mov	arg03, result3
182b0     0C 4E 05 F1 | 	add	fp, #12
182b4     A7 1A 62 FC | 	wrlong	arg05, fp
182b8     04 4E 05 F1 | 	add	fp, #4
182bc     A7 18 62 FC | 	wrlong	arg04, fp
182c0     04 4E 05 F1 | 	add	fp, #4
182c4     A7 16 62 FC | 	wrlong	arg03, fp
182c8     14 4E 85 F1 | 	sub	fp, #20
182cc     D4 36 BF FD | 	call	#_pop
182d0     FF 1A 02 F6 | 	mov	arg05, result3
182d4     A7 FA 61 FC | 	wrlong	result1, fp
182d8     04 4E 05 F1 | 	add	fp, #4
182dc     A7 FC 61 FC | 	wrlong	result2, fp
182e0     04 4E 05 F1 | 	add	fp, #4
182e4     A7 1A 62 FC | 	wrlong	arg05, fp
182e8     08 4E 85 F1 | 	sub	fp, #8
182ec     A7 12 02 F6 | 	mov	arg01, fp
182f0     74 D7 BF FD | 	call	#_converttoint
182f4     18 4E 05 F1 | 	add	fp, #24
182f8     A7 FA 61 FC | 	wrlong	result1, fp
182fc     0C 4E 85 F1 | 	sub	fp, #12
18300     A7 12 02 F6 | 	mov	arg01, fp
18304     0C 4E 85 F1 | 	sub	fp, #12
18308     5C D7 BF FD | 	call	#_converttoint
1830c     1C 4E 05 F1 | 	add	fp, #28
18310     A7 FA 61 FC | 	wrlong	result1, fp
18314     37 00 00 FF 
18318     2C E4 05 F1 | 	add	objptr, ##28204
1831c     F2 12 02 FB | 	rdlong	arg01, objptr
18320     04 E4 05 F1 | 	add	objptr, #4
18324     F2 14 02 FB | 	rdlong	arg02, objptr
18328     04 4E 85 F1 | 	sub	fp, #4
1832c     A7 16 02 FB | 	rdlong	arg03, fp
18330     FD 18 02 F6 | 	mov	arg04, result1
18334     18 4E 85 F1 | 	sub	fp, #24
18338     08 E4 85 F1 | 	sub	objptr, #8
1833c     F2 1A 02 FB | 	rdlong	arg05, objptr
18340     37 00 00 FF 
18344     28 E4 85 F1 | 	sub	objptr, ##28200
18348     10 63 B0 FD | 	call	#_hg010b_spin2_draw
1834c     18 4E 05 F1 | 	add	fp, #24
18350     A7 1A 02 FB | 	rdlong	arg05, fp
18354     37 00 00 FF 
18358     2C E4 05 F1 | 	add	objptr, ##28204
1835c     F2 1A 62 FC | 	wrlong	arg05, objptr
18360     04 4E 05 F1 | 	add	fp, #4
18364     A7 1A 02 FB | 	rdlong	arg05, fp
18368     1C 4E 85 F1 | 	sub	fp, #28
1836c     04 E4 05 F1 | 	add	objptr, #4
18370     F2 1A 62 FC | 	wrlong	arg05, objptr
18374     37 00 00 FF 
18378     30 E4 85 F1 | 	sub	objptr, ##28208
1837c     A7 F0 03 F6 | 	mov	ptra, fp
18380     B2 00 A0 FD | 	call	#popregs_
18384                 | _do_draw_ret
18384     2D 00 64 FD | 	ret
18388                 | 
18388                 | ' 
18388                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18388                 | ' 
18388                 | ' sub do_fcircle
18388                 | _do_fcircle
18388     02 4A 05 F6 | 	mov	COUNT_, #2
1838c     A8 00 A0 FD | 	call	#pushregs_
18390     24 F0 07 F1 | 	add	ptra, #36
18394     0C 36 BF FD | 	call	#_pop
18398     FD 18 02 F6 | 	mov	arg04, result1
1839c     FE 16 02 F6 | 	mov	arg03, result2
183a0     FF 14 02 F6 | 	mov	arg02, result3
183a4     18 4E 05 F1 | 	add	fp, #24
183a8     A7 18 62 FC | 	wrlong	arg04, fp
183ac     04 4E 05 F1 | 	add	fp, #4
183b0     A7 16 62 FC | 	wrlong	arg03, fp
183b4     04 4E 05 F1 | 	add	fp, #4
183b8     A7 14 62 FC | 	wrlong	arg02, fp
183bc     20 4E 85 F1 | 	sub	fp, #32
183c0     E0 35 BF FD | 	call	#_pop
183c4     FD 18 02 F6 | 	mov	arg04, result1
183c8     FE 16 02 F6 | 	mov	arg03, result2
183cc     FF 1E 02 F6 | 	mov	local01, result3
183d0     0C 4E 05 F1 | 	add	fp, #12
183d4     A7 18 62 FC | 	wrlong	arg04, fp
183d8     04 4E 05 F1 | 	add	fp, #4
183dc     A7 16 62 FC | 	wrlong	arg03, fp
183e0     04 4E 05 F1 | 	add	fp, #4
183e4     A7 1E 62 FC | 	wrlong	local01, fp
183e8     14 4E 85 F1 | 	sub	fp, #20
183ec     B4 35 BF FD | 	call	#_pop
183f0     A7 FA 61 FC | 	wrlong	result1, fp
183f4     04 4E 05 F1 | 	add	fp, #4
183f8     A7 FC 61 FC | 	wrlong	result2, fp
183fc     04 4E 05 F1 | 	add	fp, #4
18400     A7 FE 61 FC | 	wrlong	result3, fp
18404                 | ' 
18404                 | ' t3=pop()
18404                 | ' t2=pop()
18404                 | ' t1=pop()
18404                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18404     FF 18 02 F6 | 	mov	arg04, result3
18408     08 4E 85 F1 | 	sub	fp, #8
1840c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18410     08 4E 05 51 |  if_ne	add	fp, #8
18414     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18418     08 4E 85 51 |  if_ne	sub	fp, #8
1841c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18420     7C 00 90 5D |  if_ne	jmp	#LR__2000
18424     14 4E 05 F1 | 	add	fp, #20
18428     A7 1E 02 FB | 	rdlong	local01, fp
1842c     14 4E 85 F1 | 	sub	fp, #20
18430     1C 1E 0E F2 | 	cmp	local01, #28 wz
18434     14 4E 05 51 |  if_ne	add	fp, #20
18438     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1843c     14 4E 85 51 |  if_ne	sub	fp, #20
18440     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18444     58 00 90 5D |  if_ne	jmp	#LR__2000
18448     20 4E 05 F1 | 	add	fp, #32
1844c     A7 1E 02 FB | 	rdlong	local01, fp
18450     20 4E 85 F1 | 	sub	fp, #32
18454     1C 1E 0E F2 | 	cmp	local01, #28 wz
18458     20 4E 05 51 |  if_ne	add	fp, #32
1845c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18460     20 4E 85 51 |  if_ne	sub	fp, #32
18464     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18468     34 00 90 5D |  if_ne	jmp	#LR__2000
1846c     A7 12 02 FB | 	rdlong	arg01, fp
18470     0C 4E 05 F1 | 	add	fp, #12
18474     A7 14 02 FB | 	rdlong	arg02, fp
18478     0C 4E 05 F1 | 	add	fp, #12
1847c     A7 16 02 FB | 	rdlong	arg03, fp
18480     18 4E 85 F1 | 	sub	fp, #24
18484     37 00 00 FF 
18488     28 E4 05 F1 | 	add	objptr, ##28200
1848c     F2 18 02 FB | 	rdlong	arg04, objptr
18490     37 00 00 FF 
18494     28 E4 85 F1 | 	sub	objptr, ##28200
18498     44 66 B0 FD | 	call	#_hg010b_spin2_fcircle
1849c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1849c     54 00 90 FD | 	jmp	#LR__2001
184a0                 | LR__2000
184a0     A7 12 02 F6 | 	mov	arg01, fp
184a4     C0 D5 BF FD | 	call	#_converttoint
184a8     FD 1E 02 F6 | 	mov	local01, result1
184ac     0C 4E 05 F1 | 	add	fp, #12
184b0     A7 12 02 F6 | 	mov	arg01, fp
184b4     0C 4E 85 F1 | 	sub	fp, #12
184b8     AC D5 BF FD | 	call	#_converttoint
184bc     FD 20 02 F6 | 	mov	local02, result1
184c0     18 4E 05 F1 | 	add	fp, #24
184c4     A7 12 02 F6 | 	mov	arg01, fp
184c8     18 4E 85 F1 | 	sub	fp, #24
184cc     98 D5 BF FD | 	call	#_converttoint
184d0     FD 16 02 F6 | 	mov	arg03, result1
184d4     37 00 00 FF 
184d8     28 E4 05 F1 | 	add	objptr, ##28200
184dc     F2 18 02 FB | 	rdlong	arg04, objptr
184e0     37 00 00 FF 
184e4     28 E4 85 F1 | 	sub	objptr, ##28200
184e8     0F 13 02 F6 | 	mov	arg01, local01
184ec     10 15 02 F6 | 	mov	arg02, local02
184f0     EC 65 B0 FD | 	call	#_hg010b_spin2_fcircle
184f4                 | LR__2001
184f4     A7 F0 03 F6 | 	mov	ptra, fp
184f8     B2 00 A0 FD | 	call	#popregs_
184fc                 | _do_fcircle_ret
184fc     2D 00 64 FD | 	ret
18500                 | 
18500                 | ' 
18500                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
18500                 | ' 
18500                 | ' sub do_circle
18500                 | _do_circle
18500     02 4A 05 F6 | 	mov	COUNT_, #2
18504     A8 00 A0 FD | 	call	#pushregs_
18508     24 F0 07 F1 | 	add	ptra, #36
1850c     94 34 BF FD | 	call	#_pop
18510     FD 18 02 F6 | 	mov	arg04, result1
18514     FE 16 02 F6 | 	mov	arg03, result2
18518     FF 14 02 F6 | 	mov	arg02, result3
1851c     18 4E 05 F1 | 	add	fp, #24
18520     A7 18 62 FC | 	wrlong	arg04, fp
18524     04 4E 05 F1 | 	add	fp, #4
18528     A7 16 62 FC | 	wrlong	arg03, fp
1852c     04 4E 05 F1 | 	add	fp, #4
18530     A7 14 62 FC | 	wrlong	arg02, fp
18534     20 4E 85 F1 | 	sub	fp, #32
18538     68 34 BF FD | 	call	#_pop
1853c     FD 18 02 F6 | 	mov	arg04, result1
18540     FE 16 02 F6 | 	mov	arg03, result2
18544     FF 1E 02 F6 | 	mov	local01, result3
18548     0C 4E 05 F1 | 	add	fp, #12
1854c     A7 18 62 FC | 	wrlong	arg04, fp
18550     04 4E 05 F1 | 	add	fp, #4
18554     A7 16 62 FC | 	wrlong	arg03, fp
18558     04 4E 05 F1 | 	add	fp, #4
1855c     A7 1E 62 FC | 	wrlong	local01, fp
18560     14 4E 85 F1 | 	sub	fp, #20
18564     3C 34 BF FD | 	call	#_pop
18568     A7 FA 61 FC | 	wrlong	result1, fp
1856c     04 4E 05 F1 | 	add	fp, #4
18570     A7 FC 61 FC | 	wrlong	result2, fp
18574     04 4E 05 F1 | 	add	fp, #4
18578     A7 FE 61 FC | 	wrlong	result3, fp
1857c                 | ' 
1857c                 | ' t3=pop()
1857c                 | ' t2=pop()
1857c                 | ' t1=pop()
1857c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1857c     FF 18 02 F6 | 	mov	arg04, result3
18580     08 4E 85 F1 | 	sub	fp, #8
18584     1C 18 0E F2 | 	cmp	arg04, #28 wz
18588     08 4E 05 51 |  if_ne	add	fp, #8
1858c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18590     08 4E 85 51 |  if_ne	sub	fp, #8
18594     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18598     7C 00 90 5D |  if_ne	jmp	#LR__2010
1859c     14 4E 05 F1 | 	add	fp, #20
185a0     A7 1E 02 FB | 	rdlong	local01, fp
185a4     14 4E 85 F1 | 	sub	fp, #20
185a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
185ac     14 4E 05 51 |  if_ne	add	fp, #20
185b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185b4     14 4E 85 51 |  if_ne	sub	fp, #20
185b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185bc     58 00 90 5D |  if_ne	jmp	#LR__2010
185c0     20 4E 05 F1 | 	add	fp, #32
185c4     A7 1E 02 FB | 	rdlong	local01, fp
185c8     20 4E 85 F1 | 	sub	fp, #32
185cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
185d0     20 4E 05 51 |  if_ne	add	fp, #32
185d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185d8     20 4E 85 51 |  if_ne	sub	fp, #32
185dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185e0     34 00 90 5D |  if_ne	jmp	#LR__2010
185e4     A7 12 02 FB | 	rdlong	arg01, fp
185e8     0C 4E 05 F1 | 	add	fp, #12
185ec     A7 14 02 FB | 	rdlong	arg02, fp
185f0     0C 4E 05 F1 | 	add	fp, #12
185f4     A7 16 02 FB | 	rdlong	arg03, fp
185f8     18 4E 85 F1 | 	sub	fp, #24
185fc     37 00 00 FF 
18600     28 E4 05 F1 | 	add	objptr, ##28200
18604     F2 18 02 FB | 	rdlong	arg04, objptr
18608     37 00 00 FF 
1860c     28 E4 85 F1 | 	sub	objptr, ##28200
18610     D8 65 B0 FD | 	call	#_hg010b_spin2_circle
18614                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18614     54 00 90 FD | 	jmp	#LR__2011
18618                 | LR__2010
18618     A7 12 02 F6 | 	mov	arg01, fp
1861c     48 D4 BF FD | 	call	#_converttoint
18620     FD 1E 02 F6 | 	mov	local01, result1
18624     0C 4E 05 F1 | 	add	fp, #12
18628     A7 12 02 F6 | 	mov	arg01, fp
1862c     0C 4E 85 F1 | 	sub	fp, #12
18630     34 D4 BF FD | 	call	#_converttoint
18634     FD 20 02 F6 | 	mov	local02, result1
18638     18 4E 05 F1 | 	add	fp, #24
1863c     A7 12 02 F6 | 	mov	arg01, fp
18640     18 4E 85 F1 | 	sub	fp, #24
18644     20 D4 BF FD | 	call	#_converttoint
18648     FD 16 02 F6 | 	mov	arg03, result1
1864c     37 00 00 FF 
18650     28 E4 05 F1 | 	add	objptr, ##28200
18654     F2 18 02 FB | 	rdlong	arg04, objptr
18658     37 00 00 FF 
1865c     28 E4 85 F1 | 	sub	objptr, ##28200
18660     0F 13 02 F6 | 	mov	arg01, local01
18664     10 15 02 F6 | 	mov	arg02, local02
18668     80 65 B0 FD | 	call	#_hg010b_spin2_circle
1866c                 | LR__2011
1866c     A7 F0 03 F6 | 	mov	ptra, fp
18670     B2 00 A0 FD | 	call	#popregs_
18674                 | _do_circle_ret
18674     2D 00 64 FD | 	ret
18678                 | 
18678                 | ' 
18678                 | ' ' -------------------------- Draw a rectangle
18678                 | ' 
18678                 | ' sub do_box
18678                 | _do_box
18678     03 4A 05 F6 | 	mov	COUNT_, #3
1867c     A8 00 A0 FD | 	call	#pushregs_
18680     30 F0 07 F1 | 	add	ptra, #48
18684     1C 33 BF FD | 	call	#_pop
18688     FD 1A 02 F6 | 	mov	arg05, result1
1868c     FE 18 02 F6 | 	mov	arg04, result2
18690     FF 16 02 F6 | 	mov	arg03, result3
18694     24 4E 05 F1 | 	add	fp, #36
18698     A7 1A 62 FC | 	wrlong	arg05, fp
1869c     04 4E 05 F1 | 	add	fp, #4
186a0     A7 18 62 FC | 	wrlong	arg04, fp
186a4     04 4E 05 F1 | 	add	fp, #4
186a8     A7 16 62 FC | 	wrlong	arg03, fp
186ac     2C 4E 85 F1 | 	sub	fp, #44
186b0     F0 32 BF FD | 	call	#_pop
186b4     FD 1A 02 F6 | 	mov	arg05, result1
186b8     FE 18 02 F6 | 	mov	arg04, result2
186bc     FF 16 02 F6 | 	mov	arg03, result3
186c0     18 4E 05 F1 | 	add	fp, #24
186c4     A7 1A 62 FC | 	wrlong	arg05, fp
186c8     04 4E 05 F1 | 	add	fp, #4
186cc     A7 18 62 FC | 	wrlong	arg04, fp
186d0     04 4E 05 F1 | 	add	fp, #4
186d4     A7 16 62 FC | 	wrlong	arg03, fp
186d8     20 4E 85 F1 | 	sub	fp, #32
186dc     C4 32 BF FD | 	call	#_pop
186e0     FD 1A 02 F6 | 	mov	arg05, result1
186e4     FE 18 02 F6 | 	mov	arg04, result2
186e8     FF 1E 02 F6 | 	mov	local01, result3
186ec     0C 4E 05 F1 | 	add	fp, #12
186f0     A7 1A 62 FC | 	wrlong	arg05, fp
186f4     04 4E 05 F1 | 	add	fp, #4
186f8     A7 18 62 FC | 	wrlong	arg04, fp
186fc     04 4E 05 F1 | 	add	fp, #4
18700     A7 1E 62 FC | 	wrlong	local01, fp
18704     14 4E 85 F1 | 	sub	fp, #20
18708     98 32 BF FD | 	call	#_pop
1870c     A7 FA 61 FC | 	wrlong	result1, fp
18710     04 4E 05 F1 | 	add	fp, #4
18714     A7 FC 61 FC | 	wrlong	result2, fp
18718     04 4E 05 F1 | 	add	fp, #4
1871c     A7 FE 61 FC | 	wrlong	result3, fp
18720                 | ' 
18720                 | ' t4=pop()
18720                 | ' t3=pop()
18720                 | ' t2=pop()
18720                 | ' t1=pop()
18720                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18720     FF 1A 02 F6 | 	mov	arg05, result3
18724     08 4E 85 F1 | 	sub	fp, #8
18728     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1872c     08 4E 05 51 |  if_ne	add	fp, #8
18730     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18734     08 4E 85 51 |  if_ne	sub	fp, #8
18738     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1873c     A8 00 90 5D |  if_ne	jmp	#LR__2020
18740     14 4E 05 F1 | 	add	fp, #20
18744     A7 1E 02 FB | 	rdlong	local01, fp
18748     14 4E 85 F1 | 	sub	fp, #20
1874c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18750     14 4E 05 51 |  if_ne	add	fp, #20
18754     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18758     14 4E 85 51 |  if_ne	sub	fp, #20
1875c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18760     84 00 90 5D |  if_ne	jmp	#LR__2020
18764     20 4E 05 F1 | 	add	fp, #32
18768     A7 1E 02 FB | 	rdlong	local01, fp
1876c     20 4E 85 F1 | 	sub	fp, #32
18770     1C 1E 0E F2 | 	cmp	local01, #28 wz
18774     20 4E 05 51 |  if_ne	add	fp, #32
18778     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1877c     20 4E 85 51 |  if_ne	sub	fp, #32
18780     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18784     60 00 90 5D |  if_ne	jmp	#LR__2020
18788     2C 4E 05 F1 | 	add	fp, #44
1878c     A7 1E 02 FB | 	rdlong	local01, fp
18790     2C 4E 85 F1 | 	sub	fp, #44
18794     1C 1E 0E F2 | 	cmp	local01, #28 wz
18798     2C 4E 05 51 |  if_ne	add	fp, #44
1879c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
187a0     2C 4E 85 51 |  if_ne	sub	fp, #44
187a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
187a8     3C 00 90 5D |  if_ne	jmp	#LR__2020
187ac     A7 12 02 FB | 	rdlong	arg01, fp
187b0     0C 4E 05 F1 | 	add	fp, #12
187b4     A7 14 02 FB | 	rdlong	arg02, fp
187b8     0C 4E 05 F1 | 	add	fp, #12
187bc     A7 16 02 FB | 	rdlong	arg03, fp
187c0     0C 4E 05 F1 | 	add	fp, #12
187c4     A7 18 02 FB | 	rdlong	arg04, fp
187c8     24 4E 85 F1 | 	sub	fp, #36
187cc     37 00 00 FF 
187d0     28 E4 05 F1 | 	add	objptr, ##28200
187d4     F2 1A 02 FB | 	rdlong	arg05, objptr
187d8     37 00 00 FF 
187dc     28 E4 85 F1 | 	sub	objptr, ##28200
187e0     D4 65 B0 FD | 	call	#_hg010b_spin2_box
187e4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
187e4     6C 00 90 FD | 	jmp	#LR__2021
187e8                 | LR__2020
187e8     A7 12 02 F6 | 	mov	arg01, fp
187ec     78 D2 BF FD | 	call	#_converttoint
187f0     FD 20 02 F6 | 	mov	local02, result1
187f4     0C 4E 05 F1 | 	add	fp, #12
187f8     A7 12 02 F6 | 	mov	arg01, fp
187fc     0C 4E 85 F1 | 	sub	fp, #12
18800     64 D2 BF FD | 	call	#_converttoint
18804     FD 22 02 F6 | 	mov	local03, result1
18808     18 4E 05 F1 | 	add	fp, #24
1880c     A7 12 02 F6 | 	mov	arg01, fp
18810     18 4E 85 F1 | 	sub	fp, #24
18814     50 D2 BF FD | 	call	#_converttoint
18818     FD 1E 02 F6 | 	mov	local01, result1
1881c     24 4E 05 F1 | 	add	fp, #36
18820     A7 12 02 F6 | 	mov	arg01, fp
18824     24 4E 85 F1 | 	sub	fp, #36
18828     3C D2 BF FD | 	call	#_converttoint
1882c     FD 18 02 F6 | 	mov	arg04, result1
18830     37 00 00 FF 
18834     28 E4 05 F1 | 	add	objptr, ##28200
18838     F2 1A 02 FB | 	rdlong	arg05, objptr
1883c     37 00 00 FF 
18840     28 E4 85 F1 | 	sub	objptr, ##28200
18844     10 13 02 F6 | 	mov	arg01, local02
18848     11 15 02 F6 | 	mov	arg02, local03
1884c     0F 17 02 F6 | 	mov	arg03, local01
18850     64 65 B0 FD | 	call	#_hg010b_spin2_box
18854                 | LR__2021
18854     A7 F0 03 F6 | 	mov	ptra, fp
18858     B2 00 A0 FD | 	call	#popregs_
1885c                 | _do_box_ret
1885c     2D 00 64 FD | 	ret
18860                 | 
18860                 | ' 
18860                 | ' sub do_fill
18860                 | _do_fill
18860     03 4A 05 F6 | 	mov	COUNT_, #3
18864     A8 00 A0 FD | 	call	#pushregs_
18868     30 F0 07 F1 | 	add	ptra, #48
1886c     34 31 BF FD | 	call	#_pop
18870     FD 18 02 F6 | 	mov	arg04, result1
18874     FE 16 02 F6 | 	mov	arg03, result2
18878     FF 14 02 F6 | 	mov	arg02, result3
1887c     24 4E 05 F1 | 	add	fp, #36
18880     A7 18 62 FC | 	wrlong	arg04, fp
18884     04 4E 05 F1 | 	add	fp, #4
18888     A7 16 62 FC | 	wrlong	arg03, fp
1888c     04 4E 05 F1 | 	add	fp, #4
18890     A7 14 62 FC | 	wrlong	arg02, fp
18894     2C 4E 85 F1 | 	sub	fp, #44
18898     08 31 BF FD | 	call	#_pop
1889c     FD 18 02 F6 | 	mov	arg04, result1
188a0     FE 16 02 F6 | 	mov	arg03, result2
188a4     FF 14 02 F6 | 	mov	arg02, result3
188a8     18 4E 05 F1 | 	add	fp, #24
188ac     A7 18 62 FC | 	wrlong	arg04, fp
188b0     04 4E 05 F1 | 	add	fp, #4
188b4     A7 16 62 FC | 	wrlong	arg03, fp
188b8     04 4E 05 F1 | 	add	fp, #4
188bc     A7 14 62 FC | 	wrlong	arg02, fp
188c0     20 4E 85 F1 | 	sub	fp, #32
188c4     DC 30 BF FD | 	call	#_pop
188c8     FD 18 02 F6 | 	mov	arg04, result1
188cc     FE 16 02 F6 | 	mov	arg03, result2
188d0     FF 1E 02 F6 | 	mov	local01, result3
188d4     0C 4E 05 F1 | 	add	fp, #12
188d8     A7 18 62 FC | 	wrlong	arg04, fp
188dc     04 4E 05 F1 | 	add	fp, #4
188e0     A7 16 62 FC | 	wrlong	arg03, fp
188e4     04 4E 05 F1 | 	add	fp, #4
188e8     A7 1E 62 FC | 	wrlong	local01, fp
188ec     14 4E 85 F1 | 	sub	fp, #20
188f0     B0 30 BF FD | 	call	#_pop
188f4     A7 FA 61 FC | 	wrlong	result1, fp
188f8     04 4E 05 F1 | 	add	fp, #4
188fc     A7 FC 61 FC | 	wrlong	result2, fp
18900     04 4E 05 F1 | 	add	fp, #4
18904     A7 FE 61 FC | 	wrlong	result3, fp
18908                 | ' 
18908                 | ' t4=pop()
18908                 | ' t3=pop()
18908                 | ' t2=pop()
18908                 | ' t1=pop()
18908                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18908     FF 18 02 F6 | 	mov	arg04, result3
1890c     08 4E 85 F1 | 	sub	fp, #8
18910     1C 18 0E F2 | 	cmp	arg04, #28 wz
18914     08 4E 05 51 |  if_ne	add	fp, #8
18918     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1891c     08 4E 85 51 |  if_ne	sub	fp, #8
18920     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18924     94 00 90 5D |  if_ne	jmp	#LR__2030
18928     14 4E 05 F1 | 	add	fp, #20
1892c     A7 1E 02 FB | 	rdlong	local01, fp
18930     14 4E 85 F1 | 	sub	fp, #20
18934     1C 1E 0E F2 | 	cmp	local01, #28 wz
18938     14 4E 05 51 |  if_ne	add	fp, #20
1893c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18940     14 4E 85 51 |  if_ne	sub	fp, #20
18944     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18948     70 00 90 5D |  if_ne	jmp	#LR__2030
1894c     20 4E 05 F1 | 	add	fp, #32
18950     A7 1E 02 FB | 	rdlong	local01, fp
18954     20 4E 85 F1 | 	sub	fp, #32
18958     1C 1E 0E F2 | 	cmp	local01, #28 wz
1895c     20 4E 05 51 |  if_ne	add	fp, #32
18960     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18964     20 4E 85 51 |  if_ne	sub	fp, #32
18968     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1896c     4C 00 90 5D |  if_ne	jmp	#LR__2030
18970     2C 4E 05 F1 | 	add	fp, #44
18974     A7 1E 02 FB | 	rdlong	local01, fp
18978     2C 4E 85 F1 | 	sub	fp, #44
1897c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18980     2C 4E 05 51 |  if_ne	add	fp, #44
18984     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18988     2C 4E 85 51 |  if_ne	sub	fp, #44
1898c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18990     28 00 90 5D |  if_ne	jmp	#LR__2030
18994     A7 12 02 FB | 	rdlong	arg01, fp
18998     0C 4E 05 F1 | 	add	fp, #12
1899c     A7 14 02 FB | 	rdlong	arg02, fp
189a0     0C 4E 05 F1 | 	add	fp, #12
189a4     A7 16 02 FB | 	rdlong	arg03, fp
189a8     0C 4E 05 F1 | 	add	fp, #12
189ac     A7 18 02 FB | 	rdlong	arg04, fp
189b0     24 4E 85 F1 | 	sub	fp, #36
189b4     94 5E B0 FD | 	call	#_hg010b_spin2_fill
189b8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
189b8     58 00 90 FD | 	jmp	#LR__2031
189bc                 | LR__2030
189bc     A7 12 02 F6 | 	mov	arg01, fp
189c0     A4 D0 BF FD | 	call	#_converttoint
189c4     FD 20 02 F6 | 	mov	local02, result1
189c8     0C 4E 05 F1 | 	add	fp, #12
189cc     A7 12 02 F6 | 	mov	arg01, fp
189d0     0C 4E 85 F1 | 	sub	fp, #12
189d4     90 D0 BF FD | 	call	#_converttoint
189d8     FD 22 02 F6 | 	mov	local03, result1
189dc     18 4E 05 F1 | 	add	fp, #24
189e0     A7 12 02 F6 | 	mov	arg01, fp
189e4     18 4E 85 F1 | 	sub	fp, #24
189e8     7C D0 BF FD | 	call	#_converttoint
189ec     FD 1E 02 F6 | 	mov	local01, result1
189f0     24 4E 05 F1 | 	add	fp, #36
189f4     A7 12 02 F6 | 	mov	arg01, fp
189f8     24 4E 85 F1 | 	sub	fp, #36
189fc     68 D0 BF FD | 	call	#_converttoint
18a00     FD 18 02 F6 | 	mov	arg04, result1
18a04     10 13 02 F6 | 	mov	arg01, local02
18a08     11 15 02 F6 | 	mov	arg02, local03
18a0c     0F 17 02 F6 | 	mov	arg03, local01
18a10     38 5E B0 FD | 	call	#_hg010b_spin2_fill
18a14                 | LR__2031
18a14     A7 F0 03 F6 | 	mov	ptra, fp
18a18     B2 00 A0 FD | 	call	#popregs_
18a1c                 | _do_fill_ret
18a1c     2D 00 64 FD | 	ret
18a20                 | 
18a20                 | ' 
18a20                 | ' ' -------------------------- Draw a frane
18a20                 | ' 
18a20                 | ' sub do_frame
18a20                 | _do_frame
18a20     03 4A 05 F6 | 	mov	COUNT_, #3
18a24     A8 00 A0 FD | 	call	#pushregs_
18a28     30 F0 07 F1 | 	add	ptra, #48
18a2c     74 2F BF FD | 	call	#_pop
18a30     FD 1A 02 F6 | 	mov	arg05, result1
18a34     FE 18 02 F6 | 	mov	arg04, result2
18a38     FF 16 02 F6 | 	mov	arg03, result3
18a3c     24 4E 05 F1 | 	add	fp, #36
18a40     A7 1A 62 FC | 	wrlong	arg05, fp
18a44     04 4E 05 F1 | 	add	fp, #4
18a48     A7 18 62 FC | 	wrlong	arg04, fp
18a4c     04 4E 05 F1 | 	add	fp, #4
18a50     A7 16 62 FC | 	wrlong	arg03, fp
18a54     2C 4E 85 F1 | 	sub	fp, #44
18a58     48 2F BF FD | 	call	#_pop
18a5c     FD 1A 02 F6 | 	mov	arg05, result1
18a60     FE 18 02 F6 | 	mov	arg04, result2
18a64     FF 16 02 F6 | 	mov	arg03, result3
18a68     18 4E 05 F1 | 	add	fp, #24
18a6c     A7 1A 62 FC | 	wrlong	arg05, fp
18a70     04 4E 05 F1 | 	add	fp, #4
18a74     A7 18 62 FC | 	wrlong	arg04, fp
18a78     04 4E 05 F1 | 	add	fp, #4
18a7c     A7 16 62 FC | 	wrlong	arg03, fp
18a80     20 4E 85 F1 | 	sub	fp, #32
18a84     1C 2F BF FD | 	call	#_pop
18a88     FD 1A 02 F6 | 	mov	arg05, result1
18a8c     FE 18 02 F6 | 	mov	arg04, result2
18a90     FF 1E 02 F6 | 	mov	local01, result3
18a94     0C 4E 05 F1 | 	add	fp, #12
18a98     A7 1A 62 FC | 	wrlong	arg05, fp
18a9c     04 4E 05 F1 | 	add	fp, #4
18aa0     A7 18 62 FC | 	wrlong	arg04, fp
18aa4     04 4E 05 F1 | 	add	fp, #4
18aa8     A7 1E 62 FC | 	wrlong	local01, fp
18aac     14 4E 85 F1 | 	sub	fp, #20
18ab0     F0 2E BF FD | 	call	#_pop
18ab4     A7 FA 61 FC | 	wrlong	result1, fp
18ab8     04 4E 05 F1 | 	add	fp, #4
18abc     A7 FC 61 FC | 	wrlong	result2, fp
18ac0     04 4E 05 F1 | 	add	fp, #4
18ac4     A7 FE 61 FC | 	wrlong	result3, fp
18ac8                 | ' 
18ac8                 | ' t4=pop()
18ac8                 | ' t3=pop()
18ac8                 | ' t2=pop()
18ac8                 | ' t1=pop()
18ac8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18ac8     FF 1A 02 F6 | 	mov	arg05, result3
18acc     08 4E 85 F1 | 	sub	fp, #8
18ad0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18ad4     08 4E 05 51 |  if_ne	add	fp, #8
18ad8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18adc     08 4E 85 51 |  if_ne	sub	fp, #8
18ae0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18ae4     A8 00 90 5D |  if_ne	jmp	#LR__2040
18ae8     14 4E 05 F1 | 	add	fp, #20
18aec     A7 1E 02 FB | 	rdlong	local01, fp
18af0     14 4E 85 F1 | 	sub	fp, #20
18af4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18af8     14 4E 05 51 |  if_ne	add	fp, #20
18afc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18b00     14 4E 85 51 |  if_ne	sub	fp, #20
18b04     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18b08     84 00 90 5D |  if_ne	jmp	#LR__2040
18b0c     20 4E 05 F1 | 	add	fp, #32
18b10     A7 1E 02 FB | 	rdlong	local01, fp
18b14     20 4E 85 F1 | 	sub	fp, #32
18b18     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b1c     20 4E 05 51 |  if_ne	add	fp, #32
18b20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18b24     20 4E 85 51 |  if_ne	sub	fp, #32
18b28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18b2c     60 00 90 5D |  if_ne	jmp	#LR__2040
18b30     2C 4E 05 F1 | 	add	fp, #44
18b34     A7 1E 02 FB | 	rdlong	local01, fp
18b38     2C 4E 85 F1 | 	sub	fp, #44
18b3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b40     2C 4E 05 51 |  if_ne	add	fp, #44
18b44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18b48     2C 4E 85 51 |  if_ne	sub	fp, #44
18b4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18b50     3C 00 90 5D |  if_ne	jmp	#LR__2040
18b54     A7 12 02 FB | 	rdlong	arg01, fp
18b58     0C 4E 05 F1 | 	add	fp, #12
18b5c     A7 14 02 FB | 	rdlong	arg02, fp
18b60     0C 4E 05 F1 | 	add	fp, #12
18b64     A7 16 02 FB | 	rdlong	arg03, fp
18b68     0C 4E 05 F1 | 	add	fp, #12
18b6c     A7 18 02 FB | 	rdlong	arg04, fp
18b70     24 4E 85 F1 | 	sub	fp, #36
18b74     37 00 00 FF 
18b78     28 E4 05 F1 | 	add	objptr, ##28200
18b7c     F2 1A 02 FB | 	rdlong	arg05, objptr
18b80     37 00 00 FF 
18b84     28 E4 85 F1 | 	sub	objptr, ##28200
18b88     AC 61 B0 FD | 	call	#_hg010b_spin2_frame
18b8c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18b8c     6C 00 90 FD | 	jmp	#LR__2041
18b90                 | LR__2040
18b90     A7 12 02 F6 | 	mov	arg01, fp
18b94     D0 CE BF FD | 	call	#_converttoint
18b98     FD 20 02 F6 | 	mov	local02, result1
18b9c     0C 4E 05 F1 | 	add	fp, #12
18ba0     A7 12 02 F6 | 	mov	arg01, fp
18ba4     0C 4E 85 F1 | 	sub	fp, #12
18ba8     BC CE BF FD | 	call	#_converttoint
18bac     FD 22 02 F6 | 	mov	local03, result1
18bb0     18 4E 05 F1 | 	add	fp, #24
18bb4     A7 12 02 F6 | 	mov	arg01, fp
18bb8     18 4E 85 F1 | 	sub	fp, #24
18bbc     A8 CE BF FD | 	call	#_converttoint
18bc0     FD 1E 02 F6 | 	mov	local01, result1
18bc4     24 4E 05 F1 | 	add	fp, #36
18bc8     A7 12 02 F6 | 	mov	arg01, fp
18bcc     24 4E 85 F1 | 	sub	fp, #36
18bd0     94 CE BF FD | 	call	#_converttoint
18bd4     FD 18 02 F6 | 	mov	arg04, result1
18bd8     37 00 00 FF 
18bdc     28 E4 05 F1 | 	add	objptr, ##28200
18be0     F2 1A 02 FB | 	rdlong	arg05, objptr
18be4     37 00 00 FF 
18be8     28 E4 85 F1 | 	sub	objptr, ##28200
18bec     10 13 02 F6 | 	mov	arg01, local02
18bf0     11 15 02 F6 | 	mov	arg02, local03
18bf4     0F 17 02 F6 | 	mov	arg03, local01
18bf8     3C 61 B0 FD | 	call	#_hg010b_spin2_frame
18bfc                 | LR__2041
18bfc     A7 F0 03 F6 | 	mov	ptra, fp
18c00     B2 00 A0 FD | 	call	#popregs_
18c04                 | _do_frame_ret
18c04     2D 00 64 FD | 	ret
18c08                 | 
18c08                 | ' 
18c08                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18c08                 | ' 
18c08                 | ' ' ------------------------- Print to the screem
18c08                 | ' 
18c08                 | ' sub do_print  
18c08                 | _do_print
18c08     0B 4A 05 F6 | 	mov	COUNT_, #11
18c0c     A8 00 A0 FD | 	call	#pushregs_
18c10     00 24 06 F6 | 	mov	local04, #0
18c14     8C 2D BF FD | 	call	#_pop
18c18     FD 26 02 F6 | 	mov	local05, result1
18c1c     FE 28 02 F6 | 	mov	local06, result2
18c20     FF 2A 02 F6 | 	mov	local07, result3
18c24     13 1F 02 F6 | 	mov	local01, local05
18c28     14 21 02 F6 | 	mov	local02, local06
18c2c     15 23 02 F6 | 	mov	local03, local07
18c30                 | '  
18c30                 | ' r=0
18c30                 | ' t1=pop() 
18c30                 | ' 'print t1.result_type,t1.result.uresult
18c30                 | ' 
18c30                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18c30     21 22 0E F2 | 	cmp	local03, #33 wz
18c34     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18c38     20 00 90 5D |  if_ne	jmp	#LR__2050
18c3c     11 25 02 F6 | 	mov	local04, local03
18c40     60 2D BF FD | 	call	#_pop
18c44     FD 26 02 F6 | 	mov	local05, result1
18c48     FE 28 02 F6 | 	mov	local06, result2
18c4c     FF 2A 02 F6 | 	mov	local07, result3
18c50     13 1F 02 F6 | 	mov	local01, local05
18c54     14 21 02 F6 | 	mov	local02, local06
18c58     15 23 02 F6 | 	mov	local03, local07
18c5c                 | LR__2050
18c5c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18c5c     20 22 0E F2 | 	cmp	local03, #32 wz
18c60     11 25 02 A6 |  if_e	mov	local04, local03
18c64                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18c64     FF 22 0E F2 | 	cmp	local03, #255 wz
18c68     0C 00 90 5D |  if_ne	jmp	#LR__2051
18c6c     0F 13 02 F6 | 	mov	arg01, local01
18c70     50 47 B0 FD | 	call	#_printerror
18c74     D4 04 90 FD | 	jmp	#LR__2070
18c78                 | LR__2051
18c78                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18c78     2B 22 0E F2 | 	cmp	local03, #43 wz
18c7c     14 00 90 5D |  if_ne	jmp	#LR__2052
18c80     0F 13 02 F6 | 	mov	arg01, local01
18c84     BC 85 BF FD | 	call	#_convertstring
18c88     FD 26 02 F6 | 	mov	local05, result1
18c8c     13 1F 02 F6 | 	mov	local01, local05
18c90     1F 22 06 F6 | 	mov	local03, #31
18c94                 | LR__2052
18c94                 | ' 
18c94                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18c94     2C 22 0E F2 | 	cmp	local03, #44 wz
18c98     80 00 90 5D |  if_ne	jmp	#LR__2053
18c9c     00 12 06 F6 | 	mov	arg01, #0
18ca0     C4 D4 B0 FD | 	call	#__system___getiolock_0540
18ca4     FD 12 02 F6 | 	mov	arg01, result1
18ca8     7C 7A B0 FD | 	call	#__system___lockmem
18cac     83 01 00 FF 
18cb0     D0 15 06 F6 | 	mov	arg02, ##@LR__5488
18cb4     00 12 06 F6 | 	mov	arg01, #0
18cb8     00 16 06 F6 | 	mov	arg03, #0
18cbc     5C 87 B0 FD | 	call	#__system___basic_print_string
18cc0     0A 2C 06 F6 | 	mov	local08, #10
18cc4     00 12 06 F6 | 	mov	arg01, #0
18cc8     0F 15 02 F6 | 	mov	arg02, local01
18ccc     00 16 06 F6 | 	mov	arg03, #0
18cd0     0A 18 06 F6 | 	mov	arg04, #10
18cd4     88 87 B0 FD | 	call	#__system___basic_print_integer
18cd8     FD 2E 02 F6 | 	mov	local09, result1
18cdc     00 12 06 F6 | 	mov	arg01, #0
18ce0     0A 14 06 F6 | 	mov	arg02, #10
18ce4     00 16 06 F6 | 	mov	arg03, #0
18ce8     D8 86 B0 FD | 	call	#__system___basic_print_char
18cec     01 30 06 F6 | 	mov	local10, #1
18cf0     00 12 06 F6 | 	mov	arg01, #0
18cf4     70 D4 B0 FD | 	call	#__system___getiolock_0540
18cf8     FD 00 68 FC | 	wrlong	#0, result1
18cfc     00 32 06 F6 | 	mov	local11, #0
18d00     A0 2C BF FD | 	call	#_pop
18d04     FD 26 02 F6 | 	mov	local05, result1
18d08     FE 28 02 F6 | 	mov	local06, result2
18d0c     FF 2A 02 F6 | 	mov	local07, result3
18d10     13 1F 02 F6 | 	mov	local01, local05
18d14     14 21 02 F6 | 	mov	local02, local06
18d18     15 23 02 F6 | 	mov	local03, local07
18d1c                 | LR__2053
18d1c                 | ' 
18d1c                 | ' if r=print_mod_comma  then
18d1c     21 24 0E F2 | 	cmp	local04, #33 wz
18d20     AC 01 90 5D |  if_ne	jmp	#LR__2058
18d24                 | '   if t1.result_type=result_int then print t1.result.iresult,
18d24     1C 22 0E F2 | 	cmp	local03, #28 wz
18d28     64 00 90 5D |  if_ne	jmp	#LR__2054
18d2c     00 12 06 F6 | 	mov	arg01, #0
18d30     34 D4 B0 FD | 	call	#__system___getiolock_0540
18d34     FD 12 02 F6 | 	mov	arg01, result1
18d38     EC 79 B0 FD | 	call	#__system___lockmem
18d3c     00 28 06 F6 | 	mov	local06, #0
18d40     00 12 06 F6 | 	mov	arg01, #0
18d44     0F 15 02 F6 | 	mov	arg02, local01
18d48     00 16 06 F6 | 	mov	arg03, #0
18d4c     0A 18 06 F6 | 	mov	arg04, #10
18d50     0C 87 B0 FD | 	call	#__system___basic_print_integer
18d54     FD 2A 02 F6 | 	mov	local07, result1
18d58     14 27 02 F6 | 	mov	local05, local06
18d5c     15 27 02 F1 | 	add	local05, local07
18d60     00 32 06 F6 | 	mov	local11, #0
18d64     00 12 06 F6 | 	mov	arg01, #0
18d68     09 14 06 F6 | 	mov	arg02, #9
18d6c     00 16 06 F6 | 	mov	arg03, #0
18d70     50 86 B0 FD | 	call	#__system___basic_print_char
18d74     FD 2E 02 F6 | 	mov	local09, result1
18d78     FD 26 02 F1 | 	add	local05, result1
18d7c     00 12 06 F6 | 	mov	arg01, #0
18d80     E4 D3 B0 FD | 	call	#__system___getiolock_0540
18d84     FD 00 68 FC | 	wrlong	#0, result1
18d88     00 FA 05 F6 | 	mov	result1, #0
18d8c     00 30 06 F6 | 	mov	local10, #0
18d90                 | LR__2054
18d90                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18d90     1D 22 0E F2 | 	cmp	local03, #29 wz
18d94     64 00 90 5D |  if_ne	jmp	#LR__2055
18d98     00 12 06 F6 | 	mov	arg01, #0
18d9c     C8 D3 B0 FD | 	call	#__system___getiolock_0540
18da0     FD 12 02 F6 | 	mov	arg01, result1
18da4     80 79 B0 FD | 	call	#__system___lockmem
18da8     00 28 06 F6 | 	mov	local06, #0
18dac     00 12 06 F6 | 	mov	arg01, #0
18db0     0F 15 02 F6 | 	mov	arg02, local01
18db4     00 16 06 F6 | 	mov	arg03, #0
18db8     0A 18 06 F6 | 	mov	arg04, #10
18dbc     E0 86 B0 FD | 	call	#__system___basic_print_unsigned
18dc0     FD 2A 02 F6 | 	mov	local07, result1
18dc4     14 27 02 F6 | 	mov	local05, local06
18dc8     15 27 02 F1 | 	add	local05, local07
18dcc     00 32 06 F6 | 	mov	local11, #0
18dd0     00 12 06 F6 | 	mov	arg01, #0
18dd4     09 14 06 F6 | 	mov	arg02, #9
18dd8     00 16 06 F6 | 	mov	arg03, #0
18ddc     E4 85 B0 FD | 	call	#__system___basic_print_char
18de0     FD 2E 02 F6 | 	mov	local09, result1
18de4     FD 26 02 F1 | 	add	local05, result1
18de8     00 12 06 F6 | 	mov	arg01, #0
18dec     78 D3 B0 FD | 	call	#__system___getiolock_0540
18df0     FD 00 68 FC | 	wrlong	#0, result1
18df4     00 FA 05 F6 | 	mov	result1, #0
18df8     00 30 06 F6 | 	mov	local10, #0
18dfc                 | LR__2055
18dfc                 | '   if t1.result_type=result_float then print t1.result.fresult,
18dfc     1E 22 0E F2 | 	cmp	local03, #30 wz
18e00     64 00 90 5D |  if_ne	jmp	#LR__2056
18e04     00 12 06 F6 | 	mov	arg01, #0
18e08     5C D3 B0 FD | 	call	#__system___getiolock_0540
18e0c     FD 12 02 F6 | 	mov	arg01, result1
18e10     14 79 B0 FD | 	call	#__system___lockmem
18e14     00 28 06 F6 | 	mov	local06, #0
18e18     00 12 06 F6 | 	mov	arg01, #0
18e1c     0F 15 02 F6 | 	mov	arg02, local01
18e20     00 16 06 F6 | 	mov	arg03, #0
18e24     23 18 06 F6 | 	mov	arg04, #35
18e28     C8 AA B0 FD | 	call	#__system___basic_print_float
18e2c     FD 2A 02 F6 | 	mov	local07, result1
18e30     14 27 02 F6 | 	mov	local05, local06
18e34     15 27 02 F1 | 	add	local05, local07
18e38     00 32 06 F6 | 	mov	local11, #0
18e3c     00 12 06 F6 | 	mov	arg01, #0
18e40     09 14 06 F6 | 	mov	arg02, #9
18e44     00 16 06 F6 | 	mov	arg03, #0
18e48     78 85 B0 FD | 	call	#__system___basic_print_char
18e4c     FD 2E 02 F6 | 	mov	local09, result1
18e50     FD 26 02 F1 | 	add	local05, result1
18e54     00 12 06 F6 | 	mov	arg01, #0
18e58     0C D3 B0 FD | 	call	#__system___getiolock_0540
18e5c     FD 00 68 FC | 	wrlong	#0, result1
18e60     00 FA 05 F6 | 	mov	result1, #0
18e64     00 30 06 F6 | 	mov	local10, #0
18e68                 | LR__2056
18e68                 | '   if t1.result_type=result_string then print t1.result.sresult,
18e68     1F 22 0E F2 | 	cmp	local03, #31 wz
18e6c     60 00 90 5D |  if_ne	jmp	#LR__2057
18e70     00 12 06 F6 | 	mov	arg01, #0
18e74     F0 D2 B0 FD | 	call	#__system___getiolock_0540
18e78     FD 12 02 F6 | 	mov	arg01, result1
18e7c     A8 78 B0 FD | 	call	#__system___lockmem
18e80     00 28 06 F6 | 	mov	local06, #0
18e84     00 12 06 F6 | 	mov	arg01, #0
18e88     0F 15 02 F6 | 	mov	arg02, local01
18e8c     00 16 06 F6 | 	mov	arg03, #0
18e90     88 85 B0 FD | 	call	#__system___basic_print_string
18e94     FD 2A 02 F6 | 	mov	local07, result1
18e98     14 27 02 F6 | 	mov	local05, local06
18e9c     15 27 02 F1 | 	add	local05, local07
18ea0     00 32 06 F6 | 	mov	local11, #0
18ea4     00 12 06 F6 | 	mov	arg01, #0
18ea8     09 14 06 F6 | 	mov	arg02, #9
18eac     00 16 06 F6 | 	mov	arg03, #0
18eb0     10 85 B0 FD | 	call	#__system___basic_print_char
18eb4     FD 2E 02 F6 | 	mov	local09, result1
18eb8     FD 26 02 F1 | 	add	local05, result1
18ebc     00 12 06 F6 | 	mov	arg01, #0
18ec0     A4 D2 B0 FD | 	call	#__system___getiolock_0540
18ec4     FD 00 68 FC | 	wrlong	#0, result1
18ec8     00 FA 05 F6 | 	mov	result1, #0
18ecc     00 30 06 F6 | 	mov	local10, #0
18ed0                 | LR__2057
18ed0                 | LR__2058
18ed0                 | ' if r=print_mod_semicolon then 
18ed0     22 24 0E F2 | 	cmp	local04, #34 wz
18ed4     1C 01 90 5D |  if_ne	jmp	#LR__2063
18ed8                 | '   if t1.result_type=result_int then print t1.result.iresult;
18ed8     1C 22 0E F2 | 	cmp	local03, #28 wz
18edc     50 00 90 5D |  if_ne	jmp	#LR__2059
18ee0     00 12 06 F6 | 	mov	arg01, #0
18ee4     80 D2 B0 FD | 	call	#__system___getiolock_0540
18ee8     FD 12 02 F6 | 	mov	arg01, result1
18eec     38 78 B0 FD | 	call	#__system___lockmem
18ef0     00 28 06 F6 | 	mov	local06, #0
18ef4     00 30 06 F6 | 	mov	local10, #0
18ef8     0A 32 06 F6 | 	mov	local11, #10
18efc     00 12 06 F6 | 	mov	arg01, #0
18f00     0F 15 02 F6 | 	mov	arg02, local01
18f04     00 16 06 F6 | 	mov	arg03, #0
18f08     0A 18 06 F6 | 	mov	arg04, #10
18f0c     50 85 B0 FD | 	call	#__system___basic_print_integer
18f10     FD 2A 02 F6 | 	mov	local07, result1
18f14     14 27 02 F6 | 	mov	local05, local06
18f18     15 27 02 F1 | 	add	local05, local07
18f1c     00 12 06 F6 | 	mov	arg01, #0
18f20     44 D2 B0 FD | 	call	#__system___getiolock_0540
18f24     FD 00 68 FC | 	wrlong	#0, result1
18f28     00 FA 05 F6 | 	mov	result1, #0
18f2c     00 2E 06 F6 | 	mov	local09, #0
18f30                 | LR__2059
18f30                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18f30     1D 22 0E F2 | 	cmp	local03, #29 wz
18f34     50 00 90 5D |  if_ne	jmp	#LR__2060
18f38     00 12 06 F6 | 	mov	arg01, #0
18f3c     28 D2 B0 FD | 	call	#__system___getiolock_0540
18f40     FD 12 02 F6 | 	mov	arg01, result1
18f44     E0 77 B0 FD | 	call	#__system___lockmem
18f48     00 28 06 F6 | 	mov	local06, #0
18f4c     00 30 06 F6 | 	mov	local10, #0
18f50     0A 32 06 F6 | 	mov	local11, #10
18f54     00 12 06 F6 | 	mov	arg01, #0
18f58     0F 15 02 F6 | 	mov	arg02, local01
18f5c     00 16 06 F6 | 	mov	arg03, #0
18f60     0A 18 06 F6 | 	mov	arg04, #10
18f64     38 85 B0 FD | 	call	#__system___basic_print_unsigned
18f68     FD 2A 02 F6 | 	mov	local07, result1
18f6c     14 27 02 F6 | 	mov	local05, local06
18f70     15 27 02 F1 | 	add	local05, local07
18f74     00 12 06 F6 | 	mov	arg01, #0
18f78     EC D1 B0 FD | 	call	#__system___getiolock_0540
18f7c     FD 00 68 FC | 	wrlong	#0, result1
18f80     00 FA 05 F6 | 	mov	result1, #0
18f84     00 2E 06 F6 | 	mov	local09, #0
18f88                 | LR__2060
18f88                 | '   if t1.result_type=result_float then print t1.result.fresult;
18f88     1E 22 0E F2 | 	cmp	local03, #30 wz
18f8c     30 00 90 5D |  if_ne	jmp	#LR__2061
18f90     00 12 06 F6 | 	mov	arg01, #0
18f94     D0 D1 B0 FD | 	call	#__system___getiolock_0540
18f98     FD 12 02 F6 | 	mov	arg01, result1
18f9c     88 77 B0 FD | 	call	#__system___lockmem
18fa0     00 12 06 F6 | 	mov	arg01, #0
18fa4     0F 15 02 F6 | 	mov	arg02, local01
18fa8     00 16 06 F6 | 	mov	arg03, #0
18fac     23 18 06 F6 | 	mov	arg04, #35
18fb0     40 A9 B0 FD | 	call	#__system___basic_print_float
18fb4     00 12 06 F6 | 	mov	arg01, #0
18fb8     AC D1 B0 FD | 	call	#__system___getiolock_0540
18fbc     FD 00 68 FC | 	wrlong	#0, result1
18fc0                 | LR__2061
18fc0                 | '   if t1.result_type=result_string then print t1.result.sresult;
18fc0     1F 22 0E F2 | 	cmp	local03, #31 wz
18fc4     2C 00 90 5D |  if_ne	jmp	#LR__2062
18fc8     00 12 06 F6 | 	mov	arg01, #0
18fcc     98 D1 B0 FD | 	call	#__system___getiolock_0540
18fd0     FD 12 02 F6 | 	mov	arg01, result1
18fd4     50 77 B0 FD | 	call	#__system___lockmem
18fd8     00 12 06 F6 | 	mov	arg01, #0
18fdc     0F 15 02 F6 | 	mov	arg02, local01
18fe0     00 16 06 F6 | 	mov	arg03, #0
18fe4     34 84 B0 FD | 	call	#__system___basic_print_string
18fe8     00 12 06 F6 | 	mov	arg01, #0
18fec     78 D1 B0 FD | 	call	#__system___getiolock_0540
18ff0     FD 00 68 FC | 	wrlong	#0, result1
18ff4                 | LR__2062
18ff4                 | LR__2063
18ff4                 | ' if r=0 then 
18ff4     00 24 0E F2 | 	cmp	local04, #0 wz
18ff8     1C 01 90 5D |  if_ne	jmp	#LR__2068
18ffc                 | '   if t1.result_type=result_int then print t1.result.iresult
18ffc     1C 22 0E F2 | 	cmp	local03, #28 wz
19000     40 00 90 5D |  if_ne	jmp	#LR__2064
19004     00 12 06 F6 | 	mov	arg01, #0
19008     5C D1 B0 FD | 	call	#__system___getiolock_0540
1900c     FD 12 02 F6 | 	mov	arg01, result1
19010     14 77 B0 FD | 	call	#__system___lockmem
19014     00 12 06 F6 | 	mov	arg01, #0
19018     0F 15 02 F6 | 	mov	arg02, local01
1901c     00 16 06 F6 | 	mov	arg03, #0
19020     0A 18 06 F6 | 	mov	arg04, #10
19024     38 84 B0 FD | 	call	#__system___basic_print_integer
19028     00 12 06 F6 | 	mov	arg01, #0
1902c     0A 14 06 F6 | 	mov	arg02, #10
19030     00 16 06 F6 | 	mov	arg03, #0
19034     8C 83 B0 FD | 	call	#__system___basic_print_char
19038     00 12 06 F6 | 	mov	arg01, #0
1903c     28 D1 B0 FD | 	call	#__system___getiolock_0540
19040     FD 00 68 FC | 	wrlong	#0, result1
19044                 | LR__2064
19044                 | '   if t1.result_type=result_uint then print t1.result.uresult
19044     1D 22 0E F2 | 	cmp	local03, #29 wz
19048     40 00 90 5D |  if_ne	jmp	#LR__2065
1904c     00 12 06 F6 | 	mov	arg01, #0
19050     14 D1 B0 FD | 	call	#__system___getiolock_0540
19054     FD 12 02 F6 | 	mov	arg01, result1
19058     CC 76 B0 FD | 	call	#__system___lockmem
1905c     00 12 06 F6 | 	mov	arg01, #0
19060     0F 15 02 F6 | 	mov	arg02, local01
19064     00 16 06 F6 | 	mov	arg03, #0
19068     0A 18 06 F6 | 	mov	arg04, #10
1906c     30 84 B0 FD | 	call	#__system___basic_print_unsigned
19070     00 12 06 F6 | 	mov	arg01, #0
19074     0A 14 06 F6 | 	mov	arg02, #10
19078     00 16 06 F6 | 	mov	arg03, #0
1907c     44 83 B0 FD | 	call	#__system___basic_print_char
19080     00 12 06 F6 | 	mov	arg01, #0
19084     E0 D0 B0 FD | 	call	#__system___getiolock_0540
19088     FD 00 68 FC | 	wrlong	#0, result1
1908c                 | LR__2065
1908c                 | '   if t1.result_type=result_float then print t1.result.fresult
1908c     1E 22 0E F2 | 	cmp	local03, #30 wz
19090     40 00 90 5D |  if_ne	jmp	#LR__2066
19094     00 12 06 F6 | 	mov	arg01, #0
19098     CC D0 B0 FD | 	call	#__system___getiolock_0540
1909c     FD 12 02 F6 | 	mov	arg01, result1
190a0     84 76 B0 FD | 	call	#__system___lockmem
190a4     00 12 06 F6 | 	mov	arg01, #0
190a8     0F 15 02 F6 | 	mov	arg02, local01
190ac     00 16 06 F6 | 	mov	arg03, #0
190b0     23 18 06 F6 | 	mov	arg04, #35
190b4     3C A8 B0 FD | 	call	#__system___basic_print_float
190b8     00 12 06 F6 | 	mov	arg01, #0
190bc     0A 14 06 F6 | 	mov	arg02, #10
190c0     00 16 06 F6 | 	mov	arg03, #0
190c4     FC 82 B0 FD | 	call	#__system___basic_print_char
190c8     00 12 06 F6 | 	mov	arg01, #0
190cc     98 D0 B0 FD | 	call	#__system___getiolock_0540
190d0     FD 00 68 FC | 	wrlong	#0, result1
190d4                 | LR__2066
190d4                 | '   if t1.result_type=result_string then print t1.result.sresult
190d4     1F 22 0E F2 | 	cmp	local03, #31 wz
190d8     3C 00 90 5D |  if_ne	jmp	#LR__2067
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     84 D0 B0 FD | 	call	#__system___getiolock_0540
190e4     FD 12 02 F6 | 	mov	arg01, result1
190e8     3C 76 B0 FD | 	call	#__system___lockmem
190ec     00 12 06 F6 | 	mov	arg01, #0
190f0     0F 15 02 F6 | 	mov	arg02, local01
190f4     00 16 06 F6 | 	mov	arg03, #0
190f8     20 83 B0 FD | 	call	#__system___basic_print_string
190fc     00 12 06 F6 | 	mov	arg01, #0
19100     0A 14 06 F6 | 	mov	arg02, #10
19104     00 16 06 F6 | 	mov	arg03, #0
19108     B8 82 B0 FD | 	call	#__system___basic_print_char
1910c     00 12 06 F6 | 	mov	arg01, #0
19110     54 D0 B0 FD | 	call	#__system___getiolock_0540
19114     FD 00 68 FC | 	wrlong	#0, result1
19118                 | LR__2067
19118                 | LR__2068
19118                 | ' if r=print_mod_empty then print
19118     20 24 0E F2 | 	cmp	local04, #32 wz
1911c     2C 00 90 5D |  if_ne	jmp	#LR__2069
19120     00 12 06 F6 | 	mov	arg01, #0
19124     40 D0 B0 FD | 	call	#__system___getiolock_0540
19128     FD 12 02 F6 | 	mov	arg01, result1
1912c     F8 75 B0 FD | 	call	#__system___lockmem
19130     00 12 06 F6 | 	mov	arg01, #0
19134     0A 14 06 F6 | 	mov	arg02, #10
19138     00 16 06 F6 | 	mov	arg03, #0
1913c     84 82 B0 FD | 	call	#__system___basic_print_char
19140     00 12 06 F6 | 	mov	arg01, #0
19144     20 D0 B0 FD | 	call	#__system___getiolock_0540
19148     FD 00 68 FC | 	wrlong	#0, result1
1914c                 | LR__2069
1914c                 | LR__2070
1914c     A7 F0 03 F6 | 	mov	ptra, fp
19150     B2 00 A0 FD | 	call	#popregs_
19154                 | _do_print_ret
19154     2D 00 64 FD | 	ret
19158                 | 
19158                 | ' 
19158                 | ' 
19158                 | ' sub do_paper
19158                 | _do_paper
19158     03 4A 05 F6 | 	mov	COUNT_, #3
1915c     A8 00 A0 FD | 	call	#pushregs_
19160     40 28 BF FD | 	call	#_pop
19164     FD 1E 02 F6 | 	mov	local01, result1
19168     FE 20 02 F6 | 	mov	local02, result2
1916c     FF 22 02 F6 | 	mov	local03, result3
19170                 | ' t1=pop() 
19170                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19170     1E 22 0E F2 | 	cmp	local03, #30 wz
19174     10 00 90 5D |  if_ne	jmp	#LR__2080
19178     0F 13 02 F6 | 	mov	arg01, local01
1917c     00 14 06 F6 | 	mov	arg02, #0
19180     20 A6 B0 FD | 	call	#__system___float_tointeger
19184     FD 1E 02 F6 | 	mov	local01, result1
19188                 | LR__2080
19188                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19188     1F 22 0E F2 | 	cmp	local03, #31 wz
1918c     18 00 90 5D |  if_ne	jmp	#LR__2081
19190     0F 13 02 F6 | 	mov	arg01, local01
19194     2C A9 B0 FD | 	call	#__system____builtin_atof
19198     FD 12 02 F6 | 	mov	arg01, result1
1919c     00 14 06 F6 | 	mov	arg02, #0
191a0     00 A6 B0 FD | 	call	#__system___float_tointeger
191a4     FD 1E 02 F6 | 	mov	local01, result1
191a8                 | LR__2081
191a8     37 00 00 FF 
191ac     38 E4 05 F1 | 	add	objptr, ##28216
191b0     F2 1E 62 FC | 	wrlong	local01, objptr
191b4     04 E4 05 F1 | 	add	objptr, #4
191b8     F2 12 02 FB | 	rdlong	arg01, objptr
191bc                 | ' 
191bc                 | ' write_color:=ff
191bc     36 00 00 FF 
191c0     FB E5 85 F1 | 	sub	objptr, ##28155
191c4     F2 12 62 FC | 	wrlong	arg01, objptr
191c8                 | ' write_background:=bb
191c8     04 E4 05 F1 | 	add	objptr, #4
191cc     F2 1E 62 FC | 	wrlong	local01, objptr
191d0     45 E4 85 F1 | 	sub	objptr, #69
191d4     A7 F0 03 F6 | 	mov	ptra, fp
191d8     B2 00 A0 FD | 	call	#popregs_
191dc                 | _do_paper_ret
191dc     2D 00 64 FD | 	ret
191e0                 | 
191e0                 | ' 
191e0                 | ' sub do_ink
191e0                 | _do_ink
191e0     03 4A 05 F6 | 	mov	COUNT_, #3
191e4     A8 00 A0 FD | 	call	#pushregs_
191e8     B8 27 BF FD | 	call	#_pop
191ec     FD 1E 02 F6 | 	mov	local01, result1
191f0     FE 20 02 F6 | 	mov	local02, result2
191f4     FF 22 02 F6 | 	mov	local03, result3
191f8                 | ' t1=pop() 
191f8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
191f8     1E 22 0E F2 | 	cmp	local03, #30 wz
191fc     10 00 90 5D |  if_ne	jmp	#LR__2090
19200     0F 13 02 F6 | 	mov	arg01, local01
19204     00 14 06 F6 | 	mov	arg02, #0
19208     98 A5 B0 FD | 	call	#__system___float_tointeger
1920c     FD 1E 02 F6 | 	mov	local01, result1
19210                 | LR__2090
19210                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19210     1F 22 0E F2 | 	cmp	local03, #31 wz
19214     18 00 90 5D |  if_ne	jmp	#LR__2091
19218     0F 13 02 F6 | 	mov	arg01, local01
1921c     A4 A8 B0 FD | 	call	#__system____builtin_atof
19220     FD 12 02 F6 | 	mov	arg01, result1
19224     00 14 06 F6 | 	mov	arg02, #0
19228     78 A5 B0 FD | 	call	#__system___float_tointeger
1922c     FD 1E 02 F6 | 	mov	local01, result1
19230                 | LR__2091
19230     37 00 00 FF 
19234     3C E4 05 F1 | 	add	objptr, ##28220
19238     F2 1E 62 FC | 	wrlong	local01, objptr
1923c     04 E4 85 F1 | 	sub	objptr, #4
19240     F2 14 02 FB | 	rdlong	arg02, objptr
19244                 | ' 
19244                 | ' write_color:=ff
19244     36 00 00 FF 
19248     F7 E5 85 F1 | 	sub	objptr, ##28151
1924c     F2 1E 62 FC | 	wrlong	local01, objptr
19250                 | ' write_background:=bb
19250     04 E4 05 F1 | 	add	objptr, #4
19254     F2 14 62 FC | 	wrlong	arg02, objptr
19258     36 00 00 FF 
1925c     F7 E5 05 F1 | 	add	objptr, ##28151
19260     F2 12 02 FB | 	rdlong	arg01, objptr
19264     37 00 00 FF 
19268     3C E4 85 F1 | 	sub	objptr, ##28220
1926c     7C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
19270     A7 F0 03 F6 | 	mov	ptra, fp
19274     B2 00 A0 FD | 	call	#popregs_
19278                 | _do_ink_ret
19278     2D 00 64 FD | 	ret
1927c                 | 
1927c                 | ' 
1927c                 | ' 
1927c                 | ' sub do_font
1927c                 | _do_font
1927c     03 4A 05 F6 | 	mov	COUNT_, #3
19280     A8 00 A0 FD | 	call	#pushregs_
19284     1C 27 BF FD | 	call	#_pop
19288     FD 1E 02 F6 | 	mov	local01, result1
1928c     FE 20 02 F6 | 	mov	local02, result2
19290     FF 22 02 F6 | 	mov	local03, result3
19294                 | ' t1=pop() 
19294                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19294     1E 22 0E F2 | 	cmp	local03, #30 wz
19298     10 00 90 5D |  if_ne	jmp	#LR__2100
1929c     0F 13 02 F6 | 	mov	arg01, local01
192a0     00 14 06 F6 | 	mov	arg02, #0
192a4     FC A4 B0 FD | 	call	#__system___float_tointeger
192a8     FD 1E 02 F6 | 	mov	local01, result1
192ac                 | LR__2100
192ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
192ac     1F 22 0E F2 | 	cmp	local03, #31 wz
192b0     18 00 90 5D |  if_ne	jmp	#LR__2101
192b4     0F 13 02 F6 | 	mov	arg01, local01
192b8     08 A8 B0 FD | 	call	#__system____builtin_atof
192bc     FD 12 02 F6 | 	mov	arg01, result1
192c0     00 14 06 F6 | 	mov	arg02, #0
192c4     DC A4 B0 FD | 	call	#__system___float_tointeger
192c8     FD 1E 02 F6 | 	mov	local01, result1
192cc                 | LR__2101
192cc     37 00 00 FF 
192d0     40 E4 05 F1 | 	add	objptr, ##28224
192d4     F2 1E 62 FC | 	wrlong	local01, objptr
192d8     37 00 00 FF 
192dc     40 E4 85 F1 | 	sub	objptr, ##28224
192e0     02 1E 66 F0 | 	shl	local01, #2
192e4     0F 13 02 F6 | 	mov	arg01, local01
192e8     44 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
192ec     A7 F0 03 F6 | 	mov	ptra, fp
192f0     B2 00 A0 FD | 	call	#popregs_
192f4                 | _do_font_ret
192f4     2D 00 64 FD | 	ret
192f8                 | 
192f8                 | ' 
192f8                 | ' sub do_mode
192f8                 | _do_mode
192f8     05 4A 05 F6 | 	mov	COUNT_, #5
192fc     A8 00 A0 FD | 	call	#pushregs_
19300     A0 26 BF FD | 	call	#_pop
19304     FD 1E 02 F6 | 	mov	local01, result1
19308     FE 20 02 F6 | 	mov	local02, result2
1930c     FF 22 02 F6 | 	mov	local03, result3
19310                 | ' t1=pop() 
19310                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19310     1E 22 0E F2 | 	cmp	local03, #30 wz
19314     10 00 90 5D |  if_ne	jmp	#LR__2110
19318     0F 13 02 F6 | 	mov	arg01, local01
1931c     00 14 06 F6 | 	mov	arg02, #0
19320     80 A4 B0 FD | 	call	#__system___float_tointeger
19324     FD 1E 02 F6 | 	mov	local01, result1
19328                 | LR__2110
19328                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19328     1F 22 0E F2 | 	cmp	local03, #31 wz
1932c     18 00 90 5D |  if_ne	jmp	#LR__2111
19330     0F 13 02 F6 | 	mov	arg01, local01
19334     8C A7 B0 FD | 	call	#__system____builtin_atof
19338     FD 12 02 F6 | 	mov	arg01, result1
1933c     00 14 06 F6 | 	mov	arg02, #0
19340     60 A4 B0 FD | 	call	#__system___float_tointeger
19344     FD 1E 02 F6 | 	mov	local01, result1
19348                 | LR__2111
19348                 | ' select case t1.result.iresult
19348     0F 25 02 F6 | 	mov	local04, local01
1934c     05 24 26 F3 | 	fle	local04, #5
19350     30 24 62 FD | 	jmprel	local04
19354                 | LR__2112
19354     14 00 90 FD | 	jmp	#LR__2113
19358     A8 00 90 FD | 	jmp	#LR__2114
1935c     10 01 90 FD | 	jmp	#LR__2115
19360     78 01 90 FD | 	jmp	#LR__2116
19364     E0 01 90 FD | 	jmp	#LR__2117
19368     70 02 90 FD | 	jmp	#LR__2118
1936c                 | LR__2113
1936c     37 00 00 FF 
19370     40 E4 05 F1 | 	add	objptr, ##28224
19374     F2 02 68 FC | 	wrlong	#1, objptr
19378     04 E4 85 F1 | 	sub	objptr, #4
1937c     F2 34 69 FC | 	wrlong	#154, objptr
19380     19 00 00 FF 
19384     D4 E4 05 F1 | 	add	objptr, ##13012
19388     F2 02 68 FC | 	wrlong	#1, objptr
1938c     19 00 00 FF 
19390     D8 E4 85 F1 | 	sub	objptr, ##13016
19394     F2 26 69 FC | 	wrlong	#147, objptr
19398     37 00 00 FF 
1939c     38 E4 85 F1 | 	sub	objptr, ##28216
193a0     04 12 06 F6 | 	mov	arg01, #4
193a4     88 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
193a8     37 00 00 FF 
193ac     3C E4 05 F1 | 	add	objptr, ##28220
193b0     F2 12 02 FB | 	rdlong	arg01, objptr
193b4     04 E4 85 F1 | 	sub	objptr, #4
193b8     F2 14 02 FB | 	rdlong	arg02, objptr
193bc                 | ' 
193bc                 | ' write_color:=ff
193bc     36 00 00 FF 
193c0     F7 E5 85 F1 | 	sub	objptr, ##28151
193c4     F2 12 62 FC | 	wrlong	arg01, objptr
193c8                 | ' write_background:=bb
193c8     04 E4 05 F1 | 	add	objptr, #4
193cc     F2 14 62 FC | 	wrlong	arg02, objptr
193d0     01 00 00 FF 
193d4     00 EA 05 F1 | 	add	ptr__dat__, ##512
193d8     51 00 00 FF 
193dc     6F E5 05 F1 | 	add	objptr, ##41839
193e0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
193e4     04 E4 85 F1 | 	sub	objptr, #4
193e8     03 00 80 FF 
193ec     F2 30 69 FC | 	wrlong	##1688, objptr
193f0     51 00 00 FF 
193f4     B0 E5 85 F1 | 	sub	objptr, ##41904
193f8     01 00 00 FF 
193fc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19400     D8 01 90 FD | 	jmp	#LR__2118
19404                 | LR__2114
19404     37 00 00 FF 
19408     40 E4 05 F1 | 	add	objptr, ##28224
1940c     F2 00 68 FC | 	wrlong	#0, objptr
19410     04 E4 85 F1 | 	sub	objptr, #4
19414     F2 2E 68 FC | 	wrlong	#23, objptr
19418     19 00 00 FF 
1941c     D4 E4 05 F1 | 	add	objptr, ##13012
19420     F2 00 68 FC | 	wrlong	#0, objptr
19424     19 00 00 FF 
19428     D8 E4 85 F1 | 	sub	objptr, ##13016
1942c     F2 00 68 FC | 	wrlong	#0, objptr
19430     37 00 00 FF 
19434     38 E4 85 F1 | 	sub	objptr, ##28216
19438     00 12 06 F6 | 	mov	arg01, #0
1943c     F0 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19440     37 00 00 FF 
19444     3C E4 05 F1 | 	add	objptr, ##28220
19448     F2 12 02 FB | 	rdlong	arg01, objptr
1944c     04 E4 85 F1 | 	sub	objptr, #4
19450     F2 14 02 FB | 	rdlong	arg02, objptr
19454                 | ' 
19454                 | ' write_color:=ff
19454     36 00 00 FF 
19458     F7 E5 85 F1 | 	sub	objptr, ##28151
1945c     F2 12 62 FC | 	wrlong	arg01, objptr
19460                 | ' write_background:=bb
19460     04 E4 05 F1 | 	add	objptr, #4
19464     F2 14 62 FC | 	wrlong	arg02, objptr
19468     45 E4 85 F1 | 	sub	objptr, #69
1946c     6C 01 90 FD | 	jmp	#LR__2118
19470                 | LR__2115
19470     37 00 00 FF 
19474     40 E4 05 F1 | 	add	objptr, ##28224
19478     F2 00 68 FC | 	wrlong	#0, objptr
1947c     04 E4 85 F1 | 	sub	objptr, #4
19480     F2 6A 69 FC | 	wrlong	#181, objptr
19484     19 00 00 FF 
19488     D4 E4 05 F1 | 	add	objptr, ##13012
1948c     F2 00 68 FC | 	wrlong	#0, objptr
19490     19 00 00 FF 
19494     D8 E4 85 F1 | 	sub	objptr, ##13016
19498     F2 00 68 FC | 	wrlong	#0, objptr
1949c     37 00 00 FF 
194a0     38 E4 85 F1 | 	sub	objptr, ##28216
194a4     00 12 06 F6 | 	mov	arg01, #0
194a8     84 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
194ac     37 00 00 FF 
194b0     3C E4 05 F1 | 	add	objptr, ##28220
194b4     F2 12 02 FB | 	rdlong	arg01, objptr
194b8     04 E4 85 F1 | 	sub	objptr, #4
194bc     F2 14 02 FB | 	rdlong	arg02, objptr
194c0                 | ' 
194c0                 | ' write_color:=ff
194c0     36 00 00 FF 
194c4     F7 E5 85 F1 | 	sub	objptr, ##28151
194c8     F2 12 62 FC | 	wrlong	arg01, objptr
194cc                 | ' write_background:=bb
194cc     04 E4 05 F1 | 	add	objptr, #4
194d0     F2 14 62 FC | 	wrlong	arg02, objptr
194d4     45 E4 85 F1 | 	sub	objptr, #69
194d8     00 01 90 FD | 	jmp	#LR__2118
194dc                 | LR__2116
194dc     37 00 00 FF 
194e0     40 E4 05 F1 | 	add	objptr, ##28224
194e4     F2 00 68 FC | 	wrlong	#0, objptr
194e8     04 E4 85 F1 | 	sub	objptr, #4
194ec     F2 1E 68 FC | 	wrlong	#15, objptr
194f0     19 00 00 FF 
194f4     D4 E4 05 F1 | 	add	objptr, ##13012
194f8     F2 00 68 FC | 	wrlong	#0, objptr
194fc     19 00 00 FF 
19500     D8 E4 85 F1 | 	sub	objptr, ##13016
19504     F2 00 68 FC | 	wrlong	#0, objptr
19508     37 00 00 FF 
1950c     38 E4 85 F1 | 	sub	objptr, ##28216
19510     00 12 06 F6 | 	mov	arg01, #0
19514     18 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19518     37 00 00 FF 
1951c     3C E4 05 F1 | 	add	objptr, ##28220
19520     F2 12 02 FB | 	rdlong	arg01, objptr
19524     04 E4 85 F1 | 	sub	objptr, #4
19528     F2 14 02 FB | 	rdlong	arg02, objptr
1952c                 | ' 
1952c                 | ' write_color:=ff
1952c     36 00 00 FF 
19530     F7 E5 85 F1 | 	sub	objptr, ##28151
19534     F2 12 62 FC | 	wrlong	arg01, objptr
19538                 | ' write_background:=bb
19538     04 E4 05 F1 | 	add	objptr, #4
1953c     F2 14 62 FC | 	wrlong	arg02, objptr
19540     45 E4 85 F1 | 	sub	objptr, #69
19544     94 00 90 FD | 	jmp	#LR__2118
19548                 | LR__2117
19548     37 00 00 FF 
1954c     40 E4 05 F1 | 	add	objptr, ##28224
19550     F2 02 68 FC | 	wrlong	#1, objptr
19554     04 E4 85 F1 | 	sub	objptr, #4
19558     F2 02 68 FC | 	wrlong	#1, objptr
1955c     19 00 00 FF 
19560     D4 E4 05 F1 | 	add	objptr, ##13012
19564     F2 02 68 FC | 	wrlong	#1, objptr
19568     19 00 00 FF 
1956c     D8 E4 85 F1 | 	sub	objptr, ##13016
19570     F2 1C 68 FC | 	wrlong	#14, objptr
19574     37 00 00 FF 
19578     38 E4 85 F1 | 	sub	objptr, ##28216
1957c     04 12 06 F6 | 	mov	arg01, #4
19580     AC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
19584     37 00 00 FF 
19588     3C E4 05 F1 | 	add	objptr, ##28220
1958c     F2 12 02 FB | 	rdlong	arg01, objptr
19590     04 E4 85 F1 | 	sub	objptr, #4
19594     F2 14 02 FB | 	rdlong	arg02, objptr
19598                 | ' 
19598                 | ' write_color:=ff
19598     36 00 00 FF 
1959c     F7 E5 85 F1 | 	sub	objptr, ##28151
195a0     F2 12 62 FC | 	wrlong	arg01, objptr
195a4                 | ' write_background:=bb
195a4     04 E4 05 F1 | 	add	objptr, #4
195a8     F2 14 62 FC | 	wrlong	arg02, objptr
195ac     07 00 00 FF 
195b0     8A EB 05 F1 | 	add	ptr__dat__, ##3978
195b4     51 00 00 FF 
195b8     6F E5 05 F1 | 	add	objptr, ##41839
195bc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
195c0     04 E4 85 F1 | 	sub	objptr, #4
195c4     03 00 80 FF 
195c8     F2 30 69 FC | 	wrlong	##1688, objptr
195cc     51 00 00 FF 
195d0     B0 E5 85 F1 | 	sub	objptr, ##41904
195d4     07 00 00 FF 
195d8     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
195dc                 | LR__2118
195dc     51 00 00 FF 
195e0     AC E5 05 F1 | 	add	objptr, ##41900
195e4     F2 1E 62 FC | 	wrlong	local01, objptr
195e8     04 E4 85 F1 | 	sub	objptr, #4
195ec     F2 12 02 FB | 	rdlong	arg01, objptr
195f0     0E 00 00 FF 
195f4     4C E5 85 F1 | 	sub	objptr, ##7500
195f8     F2 26 02 FB | 	rdlong	local05, objptr
195fc     43 00 00 FF 
19600     5C E4 85 F1 | 	sub	objptr, ##34396
19604     13 13 82 F1 | 	sub	arg01, local05
19608     00 14 06 F6 | 	mov	arg02, #0
1960c     0A 16 06 F6 | 	mov	arg03, #10
19610     E4 93 B0 FD | 	call	#__system__Number_S
19614     FD 12 02 F6 | 	mov	arg01, result1
19618     83 01 00 FF 
1961c     E2 15 06 F6 | 	mov	arg02, ##@LR__5489
19620     60 71 B0 FD | 	call	#__system___string_concat
19624     50 00 00 FF 
19628     0C E5 05 F1 | 	add	objptr, ##41228
1962c     F2 FA 61 FC | 	wrlong	result1, objptr
19630     19 00 00 FF 
19634     D0 E4 85 F1 | 	sub	objptr, ##13008
19638     F2 12 02 FB | 	rdlong	arg01, objptr
1963c     04 E4 85 F1 | 	sub	objptr, #4
19640     F2 14 02 FB | 	rdlong	arg02, objptr
19644     37 00 00 FF 
19648     38 E4 85 F1 | 	sub	objptr, ##28216
1964c     30 5A B0 FD | 	call	#_hg010b_spin2_cls
19650     83 01 00 FF 
19654     F4 13 06 F6 | 	mov	arg01, ##@LR__5490
19658                 | ' 
19658                 | ' write(text)
19658     E4 5D B0 FD | 	call	#_hg010b_spin2_write
1965c                 | ' crlf
1965c     AC 60 B0 FD | 	call	#_hg010b_spin2_crlf
19660     18 00 00 FF 
19664     4C EB 05 F1 | 	add	ptr__dat__, ##12620
19668     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1966c     18 00 00 FF 
19670     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19674                 | ' 
19674                 | ' write(text)
19674     C8 5D B0 FD | 	call	#_hg010b_spin2_write
19678                 | ' crlf
19678     90 60 B0 FD | 	call	#_hg010b_spin2_crlf
1967c     50 00 00 FF 
19680     0C E5 05 F1 | 	add	objptr, ##41228
19684     F2 12 02 FB | 	rdlong	arg01, objptr
19688     50 00 00 FF 
1968c     0C E5 85 F1 | 	sub	objptr, ##41228
19690                 | ' 
19690                 | ' write(text)
19690     AC 5D B0 FD | 	call	#_hg010b_spin2_write
19694                 | ' crlf
19694     74 60 B0 FD | 	call	#_hg010b_spin2_crlf
19698     A7 F0 03 F6 | 	mov	ptra, fp
1969c     B2 00 A0 FD | 	call	#popregs_
196a0                 | _do_mode_ret
196a0     2D 00 64 FD | 	ret
196a4                 | 
196a4                 | ' 
196a4                 | ' sub do_setwave
196a4                 | _do_setwave
196a4     02 4A 05 F6 | 	mov	COUNT_, #2
196a8     A8 00 A0 FD | 	call	#pushregs_
196ac     18 F0 07 F1 | 	add	ptra, #24
196b0     F0 22 BF FD | 	call	#_pop
196b4     FD 12 02 F6 | 	mov	arg01, result1
196b8     FE 1E 02 F6 | 	mov	local01, result2
196bc     FF 20 02 F6 | 	mov	local02, result3
196c0     A7 12 62 FC | 	wrlong	arg01, fp
196c4     04 4E 05 F1 | 	add	fp, #4
196c8     A7 1E 62 FC | 	wrlong	local01, fp
196cc     04 4E 05 F1 | 	add	fp, #4
196d0     A7 20 62 FC | 	wrlong	local02, fp
196d4     08 4E 85 F1 | 	sub	fp, #8
196d8     C8 22 BF FD | 	call	#_pop
196dc     FD 20 02 F6 | 	mov	local02, result1
196e0     0C 4E 05 F1 | 	add	fp, #12
196e4     A7 20 62 FC | 	wrlong	local02, fp
196e8     04 4E 05 F1 | 	add	fp, #4
196ec     A7 FC 61 FC | 	wrlong	result2, fp
196f0     04 4E 05 F1 | 	add	fp, #4
196f4     A7 FE 61 FC | 	wrlong	result3, fp
196f8     08 4E 85 F1 | 	sub	fp, #8
196fc     A7 12 02 F6 | 	mov	arg01, fp
19700     0C 4E 85 F1 | 	sub	fp, #12
19704     60 C3 BF FD | 	call	#_converttoint
19708     FD 20 02 F6 | 	mov	local02, result1
1970c     10 1F 02 F6 | 	mov	local01, local02
19710     01 1E 66 F0 | 	shl	local01, #1
19714     10 1F 02 F1 | 	add	local01, local02
19718     03 1E 66 F0 | 	shl	local01, #3
1971c     14 00 00 FF 
19720     38 E5 05 F1 | 	add	objptr, ##10552
19724     F2 1E 02 F1 | 	add	local01, objptr
19728     A7 12 02 F6 | 	mov	arg01, fp
1972c     14 00 00 FF 
19730     38 E5 85 F1 | 	sub	objptr, ##10552
19734     30 C3 BF FD | 	call	#_converttoint
19738     04 1E 06 F1 | 	add	local01, #4
1973c     0F FB 41 FC | 	wrbyte	result1, local01
19740     A7 F0 03 F6 | 	mov	ptra, fp
19744     B2 00 A0 FD | 	call	#popregs_
19748                 | _do_setwave_ret
19748     2D 00 64 FD | 	ret
1974c                 | 
1974c                 | ' 
1974c                 | ' sub do_setsustain
1974c                 | _do_setsustain
1974c     02 4A 05 F6 | 	mov	COUNT_, #2
19750     A8 00 A0 FD | 	call	#pushregs_
19754     18 F0 07 F1 | 	add	ptra, #24
19758     48 22 BF FD | 	call	#_pop
1975c     FD 12 02 F6 | 	mov	arg01, result1
19760     FE 1E 02 F6 | 	mov	local01, result2
19764     FF 20 02 F6 | 	mov	local02, result3
19768     A7 12 62 FC | 	wrlong	arg01, fp
1976c     04 4E 05 F1 | 	add	fp, #4
19770     A7 1E 62 FC | 	wrlong	local01, fp
19774     04 4E 05 F1 | 	add	fp, #4
19778     A7 20 62 FC | 	wrlong	local02, fp
1977c     08 4E 85 F1 | 	sub	fp, #8
19780     20 22 BF FD | 	call	#_pop
19784     FD 20 02 F6 | 	mov	local02, result1
19788     0C 4E 05 F1 | 	add	fp, #12
1978c     A7 20 62 FC | 	wrlong	local02, fp
19790     04 4E 05 F1 | 	add	fp, #4
19794     A7 FC 61 FC | 	wrlong	result2, fp
19798     04 4E 05 F1 | 	add	fp, #4
1979c     A7 FE 61 FC | 	wrlong	result3, fp
197a0     08 4E 85 F1 | 	sub	fp, #8
197a4     A7 12 02 F6 | 	mov	arg01, fp
197a8     0C 4E 85 F1 | 	sub	fp, #12
197ac     B8 C2 BF FD | 	call	#_converttoint
197b0     FD 20 02 F6 | 	mov	local02, result1
197b4     10 1F 02 F6 | 	mov	local01, local02
197b8     01 1E 66 F0 | 	shl	local01, #1
197bc     10 1F 02 F1 | 	add	local01, local02
197c0     03 1E 66 F0 | 	shl	local01, #3
197c4     14 00 00 FF 
197c8     38 E5 05 F1 | 	add	objptr, ##10552
197cc     F2 1E 02 F1 | 	add	local01, objptr
197d0     A7 12 02 F6 | 	mov	arg01, fp
197d4     14 00 00 FF 
197d8     38 E5 85 F1 | 	sub	objptr, ##10552
197dc     88 C2 BF FD | 	call	#_converttoint
197e0     14 1E 06 F1 | 	add	local01, #20
197e4     0F FB 51 FC | 	wrword	result1, local01
197e8     A7 F0 03 F6 | 	mov	ptra, fp
197ec     B2 00 A0 FD | 	call	#popregs_
197f0                 | _do_setsustain_ret
197f0     2D 00 64 FD | 	ret
197f4                 | 
197f4                 | ' 
197f4                 | ' sub do_setenv
197f4                 | _do_setenv
197f4     02 4A 05 F6 | 	mov	COUNT_, #2
197f8     A8 00 A0 FD | 	call	#pushregs_
197fc     18 F0 07 F1 | 	add	ptra, #24
19800     A0 21 BF FD | 	call	#_pop
19804     FD 12 02 F6 | 	mov	arg01, result1
19808     FE 1E 02 F6 | 	mov	local01, result2
1980c     FF 20 02 F6 | 	mov	local02, result3
19810     A7 12 62 FC | 	wrlong	arg01, fp
19814     04 4E 05 F1 | 	add	fp, #4
19818     A7 1E 62 FC | 	wrlong	local01, fp
1981c     04 4E 05 F1 | 	add	fp, #4
19820     A7 20 62 FC | 	wrlong	local02, fp
19824     08 4E 85 F1 | 	sub	fp, #8
19828     78 21 BF FD | 	call	#_pop
1982c     FD 20 02 F6 | 	mov	local02, result1
19830     0C 4E 05 F1 | 	add	fp, #12
19834     A7 20 62 FC | 	wrlong	local02, fp
19838     04 4E 05 F1 | 	add	fp, #4
1983c     A7 FC 61 FC | 	wrlong	result2, fp
19840     04 4E 05 F1 | 	add	fp, #4
19844     A7 FE 61 FC | 	wrlong	result3, fp
19848     08 4E 85 F1 | 	sub	fp, #8
1984c     A7 12 02 F6 | 	mov	arg01, fp
19850     0C 4E 85 F1 | 	sub	fp, #12
19854     10 C2 BF FD | 	call	#_converttoint
19858     FD 20 02 F6 | 	mov	local02, result1
1985c     10 1F 02 F6 | 	mov	local01, local02
19860     01 1E 66 F0 | 	shl	local01, #1
19864     10 1F 02 F1 | 	add	local01, local02
19868     03 1E 66 F0 | 	shl	local01, #3
1986c     14 00 00 FF 
19870     38 E5 05 F1 | 	add	objptr, ##10552
19874     F2 1E 02 F1 | 	add	local01, objptr
19878     A7 12 02 F6 | 	mov	arg01, fp
1987c     14 00 00 FF 
19880     38 E5 85 F1 | 	sub	objptr, ##10552
19884     E0 C1 BF FD | 	call	#_converttoint
19888     05 1E 06 F1 | 	add	local01, #5
1988c     0F FB 41 FC | 	wrbyte	result1, local01
19890     A7 F0 03 F6 | 	mov	ptra, fp
19894     B2 00 A0 FD | 	call	#popregs_
19898                 | _do_setenv_ret
19898     2D 00 64 FD | 	ret
1989c                 | 
1989c                 | ' 
1989c                 | ' sub do_setdelay
1989c                 | _do_setdelay
1989c     02 4A 05 F6 | 	mov	COUNT_, #2
198a0     A8 00 A0 FD | 	call	#pushregs_
198a4     18 F0 07 F1 | 	add	ptra, #24
198a8     F8 20 BF FD | 	call	#_pop
198ac     FD 12 02 F6 | 	mov	arg01, result1
198b0     FE 1E 02 F6 | 	mov	local01, result2
198b4     FF 20 02 F6 | 	mov	local02, result3
198b8     A7 12 62 FC | 	wrlong	arg01, fp
198bc     04 4E 05 F1 | 	add	fp, #4
198c0     A7 1E 62 FC | 	wrlong	local01, fp
198c4     04 4E 05 F1 | 	add	fp, #4
198c8     A7 20 62 FC | 	wrlong	local02, fp
198cc     08 4E 85 F1 | 	sub	fp, #8
198d0     D0 20 BF FD | 	call	#_pop
198d4     FD 20 02 F6 | 	mov	local02, result1
198d8     0C 4E 05 F1 | 	add	fp, #12
198dc     A7 20 62 FC | 	wrlong	local02, fp
198e0     04 4E 05 F1 | 	add	fp, #4
198e4     A7 FC 61 FC | 	wrlong	result2, fp
198e8     04 4E 05 F1 | 	add	fp, #4
198ec     A7 FE 61 FC | 	wrlong	result3, fp
198f0     08 4E 85 F1 | 	sub	fp, #8
198f4     A7 12 02 F6 | 	mov	arg01, fp
198f8     0C 4E 85 F1 | 	sub	fp, #12
198fc     68 C1 BF FD | 	call	#_converttoint
19900     FD 20 02 F6 | 	mov	local02, result1
19904     10 1F 02 F6 | 	mov	local01, local02
19908     01 1E 66 F0 | 	shl	local01, #1
1990c     10 1F 02 F1 | 	add	local01, local02
19910     03 1E 66 F0 | 	shl	local01, #3
19914     14 00 00 FF 
19918     38 E5 05 F1 | 	add	objptr, ##10552
1991c     F2 1E 02 F1 | 	add	local01, objptr
19920     A7 12 02 F6 | 	mov	arg01, fp
19924     14 00 00 FF 
19928     38 E5 85 F1 | 	sub	objptr, ##10552
1992c     38 C1 BF FD | 	call	#_converttoint
19930     06 1E 06 F1 | 	add	local01, #6
19934     0F FB 51 FC | 	wrword	result1, local01
19938     A7 F0 03 F6 | 	mov	ptra, fp
1993c     B2 00 A0 FD | 	call	#popregs_
19940                 | _do_setdelay_ret
19940     2D 00 64 FD | 	ret
19944                 | 
19944                 | ' 
19944                 | ' sub do_setlen
19944                 | _do_setlen
19944     02 4A 05 F6 | 	mov	COUNT_, #2
19948     A8 00 A0 FD | 	call	#pushregs_
1994c     18 F0 07 F1 | 	add	ptra, #24
19950     50 20 BF FD | 	call	#_pop
19954     FD 12 02 F6 | 	mov	arg01, result1
19958     FE 1E 02 F6 | 	mov	local01, result2
1995c     FF 20 02 F6 | 	mov	local02, result3
19960     A7 12 62 FC | 	wrlong	arg01, fp
19964     04 4E 05 F1 | 	add	fp, #4
19968     A7 1E 62 FC | 	wrlong	local01, fp
1996c     04 4E 05 F1 | 	add	fp, #4
19970     A7 20 62 FC | 	wrlong	local02, fp
19974     08 4E 85 F1 | 	sub	fp, #8
19978     28 20 BF FD | 	call	#_pop
1997c     FD 20 02 F6 | 	mov	local02, result1
19980     0C 4E 05 F1 | 	add	fp, #12
19984     A7 20 62 FC | 	wrlong	local02, fp
19988     04 4E 05 F1 | 	add	fp, #4
1998c     A7 FC 61 FC | 	wrlong	result2, fp
19990     04 4E 05 F1 | 	add	fp, #4
19994     A7 FE 61 FC | 	wrlong	result3, fp
19998     08 4E 85 F1 | 	sub	fp, #8
1999c     A7 12 02 F6 | 	mov	arg01, fp
199a0     0C 4E 85 F1 | 	sub	fp, #12
199a4     C0 C0 BF FD | 	call	#_converttoint
199a8     FD 20 02 F6 | 	mov	local02, result1
199ac     10 1F 02 F6 | 	mov	local01, local02
199b0     01 1E 66 F0 | 	shl	local01, #1
199b4     10 1F 02 F1 | 	add	local01, local02
199b8     03 1E 66 F0 | 	shl	local01, #3
199bc     14 00 00 FF 
199c0     38 E5 05 F1 | 	add	objptr, ##10552
199c4     F2 1E 02 F1 | 	add	local01, objptr
199c8     A7 12 02 F6 | 	mov	arg01, fp
199cc     14 00 00 FF 
199d0     38 E5 85 F1 | 	sub	objptr, ##10552
199d4     4C C1 BF FD | 	call	#_converttofloat
199d8     08 1E 06 F1 | 	add	local01, #8
199dc     0F FB 61 FC | 	wrlong	result1, local01
199e0     A7 F0 03 F6 | 	mov	ptra, fp
199e4     B2 00 A0 FD | 	call	#popregs_
199e8                 | _do_setlen_ret
199e8     2D 00 64 FD | 	ret
199ec                 | 
199ec                 | ' 
199ec                 | ' sub do_setvol
199ec                 | _do_setvol
199ec     02 4A 05 F6 | 	mov	COUNT_, #2
199f0     A8 00 A0 FD | 	call	#pushregs_
199f4     18 F0 07 F1 | 	add	ptra, #24
199f8     A8 1F BF FD | 	call	#_pop
199fc     FD 12 02 F6 | 	mov	arg01, result1
19a00     FE 1E 02 F6 | 	mov	local01, result2
19a04     FF 20 02 F6 | 	mov	local02, result3
19a08     A7 12 62 FC | 	wrlong	arg01, fp
19a0c     04 4E 05 F1 | 	add	fp, #4
19a10     A7 1E 62 FC | 	wrlong	local01, fp
19a14     04 4E 05 F1 | 	add	fp, #4
19a18     A7 20 62 FC | 	wrlong	local02, fp
19a1c     08 4E 85 F1 | 	sub	fp, #8
19a20     80 1F BF FD | 	call	#_pop
19a24     FD 20 02 F6 | 	mov	local02, result1
19a28     0C 4E 05 F1 | 	add	fp, #12
19a2c     A7 20 62 FC | 	wrlong	local02, fp
19a30     04 4E 05 F1 | 	add	fp, #4
19a34     A7 FC 61 FC | 	wrlong	result2, fp
19a38     04 4E 05 F1 | 	add	fp, #4
19a3c     A7 FE 61 FC | 	wrlong	result3, fp
19a40     08 4E 85 F1 | 	sub	fp, #8
19a44     A7 12 02 F6 | 	mov	arg01, fp
19a48     0C 4E 85 F1 | 	sub	fp, #12
19a4c     18 C0 BF FD | 	call	#_converttoint
19a50     FD 20 02 F6 | 	mov	local02, result1
19a54     10 1F 02 F6 | 	mov	local01, local02
19a58     01 1E 66 F0 | 	shl	local01, #1
19a5c     10 1F 02 F1 | 	add	local01, local02
19a60     03 1E 66 F0 | 	shl	local01, #3
19a64     14 00 00 FF 
19a68     38 E5 05 F1 | 	add	objptr, ##10552
19a6c     F2 1E 02 F1 | 	add	local01, objptr
19a70     A7 12 02 F6 | 	mov	arg01, fp
19a74     14 00 00 FF 
19a78     38 E5 85 F1 | 	sub	objptr, ##10552
19a7c     A4 C0 BF FD | 	call	#_converttofloat
19a80     0C 1E 06 F1 | 	add	local01, #12
19a84     0F FB 61 FC | 	wrlong	result1, local01
19a88     A7 F0 03 F6 | 	mov	ptra, fp
19a8c     B2 00 A0 FD | 	call	#popregs_
19a90                 | _do_setvol_ret
19a90     2D 00 64 FD | 	ret
19a94                 | 
19a94                 | ' 
19a94                 | ' sub do_setpan
19a94                 | _do_setpan
19a94     02 4A 05 F6 | 	mov	COUNT_, #2
19a98     A8 00 A0 FD | 	call	#pushregs_
19a9c     18 F0 07 F1 | 	add	ptra, #24
19aa0     00 1F BF FD | 	call	#_pop
19aa4     FD 12 02 F6 | 	mov	arg01, result1
19aa8     FE 1E 02 F6 | 	mov	local01, result2
19aac     FF 20 02 F6 | 	mov	local02, result3
19ab0     A7 12 62 FC | 	wrlong	arg01, fp
19ab4     04 4E 05 F1 | 	add	fp, #4
19ab8     A7 1E 62 FC | 	wrlong	local01, fp
19abc     04 4E 05 F1 | 	add	fp, #4
19ac0     A7 20 62 FC | 	wrlong	local02, fp
19ac4     08 4E 85 F1 | 	sub	fp, #8
19ac8     D8 1E BF FD | 	call	#_pop
19acc     FD 20 02 F6 | 	mov	local02, result1
19ad0     0C 4E 05 F1 | 	add	fp, #12
19ad4     A7 20 62 FC | 	wrlong	local02, fp
19ad8     04 4E 05 F1 | 	add	fp, #4
19adc     A7 FC 61 FC | 	wrlong	result2, fp
19ae0     04 4E 05 F1 | 	add	fp, #4
19ae4     A7 FE 61 FC | 	wrlong	result3, fp
19ae8     08 4E 85 F1 | 	sub	fp, #8
19aec     A7 12 02 F6 | 	mov	arg01, fp
19af0     0C 4E 85 F1 | 	sub	fp, #12
19af4     70 BF BF FD | 	call	#_converttoint
19af8     FD 20 02 F6 | 	mov	local02, result1
19afc     10 1F 02 F6 | 	mov	local01, local02
19b00     01 1E 66 F0 | 	shl	local01, #1
19b04     10 1F 02 F1 | 	add	local01, local02
19b08     03 1E 66 F0 | 	shl	local01, #3
19b0c     14 00 00 FF 
19b10     38 E5 05 F1 | 	add	objptr, ##10552
19b14     F2 1E 02 F1 | 	add	local01, objptr
19b18     A7 12 02 F6 | 	mov	arg01, fp
19b1c     14 00 00 FF 
19b20     38 E5 85 F1 | 	sub	objptr, ##10552
19b24     FC BF BF FD | 	call	#_converttofloat
19b28     10 1E 06 F1 | 	add	local01, #16
19b2c     0F FB 61 FC | 	wrlong	result1, local01
19b30     A7 F0 03 F6 | 	mov	ptra, fp
19b34     B2 00 A0 FD | 	call	#popregs_
19b38                 | _do_setpan_ret
19b38     2D 00 64 FD | 	ret
19b3c                 | 
19b3c                 | ' 
19b3c                 | ' 
19b3c                 | ' sub do_pinwrite
19b3c                 | _do_pinwrite
19b3c     01 4A 05 F6 | 	mov	COUNT_, #1
19b40     A8 00 A0 FD | 	call	#pushregs_
19b44     18 F0 07 F1 | 	add	ptra, #24
19b48     58 1E BF FD | 	call	#_pop
19b4c     FD 14 02 F6 | 	mov	arg02, result1
19b50     FE 12 02 F6 | 	mov	arg01, result2
19b54     FF 1E 02 F6 | 	mov	local01, result3
19b58     A7 14 62 FC | 	wrlong	arg02, fp
19b5c     04 4E 05 F1 | 	add	fp, #4
19b60     A7 12 62 FC | 	wrlong	arg01, fp
19b64     04 4E 05 F1 | 	add	fp, #4
19b68     A7 1E 62 FC | 	wrlong	local01, fp
19b6c     08 4E 85 F1 | 	sub	fp, #8
19b70     30 1E BF FD | 	call	#_pop
19b74     FF 1E 02 F6 | 	mov	local01, result3
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 FA 61 FC | 	wrlong	result1, fp
19b80     04 4E 05 F1 | 	add	fp, #4
19b84     A7 FC 61 FC | 	wrlong	result2, fp
19b88     04 4E 05 F1 | 	add	fp, #4
19b8c     A7 1E 62 FC | 	wrlong	local01, fp
19b90     08 4E 85 F1 | 	sub	fp, #8
19b94     A7 12 02 F6 | 	mov	arg01, fp
19b98     0C 4E 85 F1 | 	sub	fp, #12
19b9c     C8 BE BF FD | 	call	#_converttoint
19ba0     FD 1E 02 F6 | 	mov	local01, result1
19ba4     A7 12 02 F6 | 	mov	arg01, fp
19ba8     BC BE BF FD | 	call	#_converttoint
19bac     FD 14 02 F6 | 	mov	arg02, result1
19bb0     0F 13 02 F6 | 	mov	arg01, local01
19bb4     24 6D B0 FD | 	call	#__system___pinwrite
19bb8     A7 F0 03 F6 | 	mov	ptra, fp
19bbc     B2 00 A0 FD | 	call	#popregs_
19bc0                 | _do_pinwrite_ret
19bc0     2D 00 64 FD | 	ret
19bc4                 | 
19bc4                 | ' 
19bc4                 | ' sub do_pinfloat
19bc4                 | _do_pinfloat
19bc4     00 4A 05 F6 | 	mov	COUNT_, #0
19bc8     A8 00 A0 FD | 	call	#pushregs_
19bcc     0C F0 07 F1 | 	add	ptra, #12
19bd0     D0 1D BF FD | 	call	#_pop
19bd4     A7 FA 61 FC | 	wrlong	result1, fp
19bd8     04 4E 05 F1 | 	add	fp, #4
19bdc     A7 FC 61 FC | 	wrlong	result2, fp
19be0     04 4E 05 F1 | 	add	fp, #4
19be4     A7 FE 61 FC | 	wrlong	result3, fp
19be8     08 4E 85 F1 | 	sub	fp, #8
19bec     A7 12 02 F6 | 	mov	arg01, fp
19bf0     74 BE BF FD | 	call	#_converttoint
19bf4     50 FA 61 FD | 	fltl	result1
19bf8     A7 F0 03 F6 | 	mov	ptra, fp
19bfc     B2 00 A0 FD | 	call	#popregs_
19c00                 | _do_pinfloat_ret
19c00     2D 00 64 FD | 	ret
19c04                 | 
19c04                 | ' 
19c04                 | ' sub do_pinlo
19c04                 | _do_pinlo
19c04     00 4A 05 F6 | 	mov	COUNT_, #0
19c08     A8 00 A0 FD | 	call	#pushregs_
19c0c     0C F0 07 F1 | 	add	ptra, #12
19c10     90 1D BF FD | 	call	#_pop
19c14     A7 FA 61 FC | 	wrlong	result1, fp
19c18     04 4E 05 F1 | 	add	fp, #4
19c1c     A7 FC 61 FC | 	wrlong	result2, fp
19c20     04 4E 05 F1 | 	add	fp, #4
19c24     A7 FE 61 FC | 	wrlong	result3, fp
19c28     08 4E 85 F1 | 	sub	fp, #8
19c2c     A7 12 02 F6 | 	mov	arg01, fp
19c30     34 BE BF FD | 	call	#_converttoint
19c34     58 FA 61 FD | 	drvl	result1
19c38     A7 F0 03 F6 | 	mov	ptra, fp
19c3c     B2 00 A0 FD | 	call	#popregs_
19c40                 | _do_pinlo_ret
19c40     2D 00 64 FD | 	ret
19c44                 | 
19c44                 | ' 
19c44                 | ' sub do_pinhi
19c44                 | _do_pinhi
19c44     00 4A 05 F6 | 	mov	COUNT_, #0
19c48     A8 00 A0 FD | 	call	#pushregs_
19c4c     0C F0 07 F1 | 	add	ptra, #12
19c50     50 1D BF FD | 	call	#_pop
19c54     A7 FA 61 FC | 	wrlong	result1, fp
19c58     04 4E 05 F1 | 	add	fp, #4
19c5c     A7 FC 61 FC | 	wrlong	result2, fp
19c60     04 4E 05 F1 | 	add	fp, #4
19c64     A7 FE 61 FC | 	wrlong	result3, fp
19c68     08 4E 85 F1 | 	sub	fp, #8
19c6c     A7 12 02 F6 | 	mov	arg01, fp
19c70     F4 BD BF FD | 	call	#_converttoint
19c74     59 FA 61 FD | 	drvh	result1
19c78     A7 F0 03 F6 | 	mov	ptra, fp
19c7c     B2 00 A0 FD | 	call	#popregs_
19c80                 | _do_pinhi_ret
19c80     2D 00 64 FD | 	ret
19c84                 | 
19c84                 | ' 
19c84                 | ' sub do_pintoggle
19c84                 | _do_pintoggle
19c84     00 4A 05 F6 | 	mov	COUNT_, #0
19c88     A8 00 A0 FD | 	call	#pushregs_
19c8c     0C F0 07 F1 | 	add	ptra, #12
19c90     10 1D BF FD | 	call	#_pop
19c94     A7 FA 61 FC | 	wrlong	result1, fp
19c98     04 4E 05 F1 | 	add	fp, #4
19c9c     A7 FC 61 FC | 	wrlong	result2, fp
19ca0     04 4E 05 F1 | 	add	fp, #4
19ca4     A7 FE 61 FC | 	wrlong	result3, fp
19ca8     08 4E 85 F1 | 	sub	fp, #8
19cac     A7 12 02 F6 | 	mov	arg01, fp
19cb0     B4 BD BF FD | 	call	#_converttoint
19cb4     5F FA 61 FD | 	drvnot	result1
19cb8     A7 F0 03 F6 | 	mov	ptra, fp
19cbc     B2 00 A0 FD | 	call	#popregs_
19cc0                 | _do_pintoggle_ret
19cc0     2D 00 64 FD | 	ret
19cc4                 | 
19cc4                 | ' 
19cc4                 | ' 
19cc4                 | ' sub do_pinstart
19cc4                 | _do_pinstart
19cc4     03 4A 05 F6 | 	mov	COUNT_, #3
19cc8     A8 00 A0 FD | 	call	#pushregs_
19ccc     30 F0 07 F1 | 	add	ptra, #48
19cd0     D0 1C BF FD | 	call	#_pop
19cd4     FD 16 02 F6 | 	mov	arg03, result1
19cd8     FE 14 02 F6 | 	mov	arg02, result2
19cdc     FF 18 02 F6 | 	mov	arg04, result3
19ce0     A7 16 62 FC | 	wrlong	arg03, fp
19ce4     04 4E 05 F1 | 	add	fp, #4
19ce8     A7 14 62 FC | 	wrlong	arg02, fp
19cec     04 4E 05 F1 | 	add	fp, #4
19cf0     A7 18 62 FC | 	wrlong	arg04, fp
19cf4     08 4E 85 F1 | 	sub	fp, #8
19cf8     A8 1C BF FD | 	call	#_pop
19cfc     FD 16 02 F6 | 	mov	arg03, result1
19d00     FE 14 02 F6 | 	mov	arg02, result2
19d04     FF 18 02 F6 | 	mov	arg04, result3
19d08     0C 4E 05 F1 | 	add	fp, #12
19d0c     A7 16 62 FC | 	wrlong	arg03, fp
19d10     04 4E 05 F1 | 	add	fp, #4
19d14     A7 14 62 FC | 	wrlong	arg02, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 18 62 FC | 	wrlong	arg04, fp
19d20     14 4E 85 F1 | 	sub	fp, #20
19d24     7C 1C BF FD | 	call	#_pop
19d28     FD 16 02 F6 | 	mov	arg03, result1
19d2c     FE 14 02 F6 | 	mov	arg02, result2
19d30     FF 18 02 F6 | 	mov	arg04, result3
19d34     18 4E 05 F1 | 	add	fp, #24
19d38     A7 16 62 FC | 	wrlong	arg03, fp
19d3c     04 4E 05 F1 | 	add	fp, #4
19d40     A7 14 62 FC | 	wrlong	arg02, fp
19d44     04 4E 05 F1 | 	add	fp, #4
19d48     A7 18 62 FC | 	wrlong	arg04, fp
19d4c     20 4E 85 F1 | 	sub	fp, #32
19d50     50 1C BF FD | 	call	#_pop
19d54     FF 16 02 F6 | 	mov	arg03, result3
19d58     24 4E 05 F1 | 	add	fp, #36
19d5c     A7 FA 61 FC | 	wrlong	result1, fp
19d60     04 4E 05 F1 | 	add	fp, #4
19d64     A7 FC 61 FC | 	wrlong	result2, fp
19d68     04 4E 05 F1 | 	add	fp, #4
19d6c     A7 16 62 FC | 	wrlong	arg03, fp
19d70     08 4E 85 F1 | 	sub	fp, #8
19d74     A7 12 02 F6 | 	mov	arg01, fp
19d78     24 4E 85 F1 | 	sub	fp, #36
19d7c     E8 BC BF FD | 	call	#_converttoint
19d80     FD 1E 02 F6 | 	mov	local01, result1
19d84     18 4E 05 F1 | 	add	fp, #24
19d88     A7 12 02 F6 | 	mov	arg01, fp
19d8c     18 4E 85 F1 | 	sub	fp, #24
19d90     D4 BC BF FD | 	call	#_converttoint
19d94     FD 20 02 F6 | 	mov	local02, result1
19d98     0C 4E 05 F1 | 	add	fp, #12
19d9c     A7 12 02 F6 | 	mov	arg01, fp
19da0     0C 4E 85 F1 | 	sub	fp, #12
19da4     C0 BC BF FD | 	call	#_converttoint
19da8     FD 22 02 F6 | 	mov	local03, result1
19dac     A7 12 02 F6 | 	mov	arg01, fp
19db0     B4 BC BF FD | 	call	#_converttoint
19db4     40 1E 62 FD | 	dirl	local01
19db8     0F 21 02 FC | 	wrpin	local02, local01
19dbc     0F 23 12 FC | 	wxpin	local03, local01
19dc0     0F FB 21 FC | 	wypin	result1, local01
19dc4     41 1E 62 FD | 	dirh	local01
19dc8     A7 F0 03 F6 | 	mov	ptra, fp
19dcc     B2 00 A0 FD | 	call	#popregs_
19dd0                 | _do_pinstart_ret
19dd0     2D 00 64 FD | 	ret
19dd4                 | 
19dd4                 | ' 
19dd4                 | ' 
19dd4                 | ' sub do_wrpin
19dd4                 | _do_wrpin
19dd4     01 4A 05 F6 | 	mov	COUNT_, #1
19dd8     A8 00 A0 FD | 	call	#pushregs_
19ddc     18 F0 07 F1 | 	add	ptra, #24
19de0     C0 1B BF FD | 	call	#_pop
19de4     FD 14 02 F6 | 	mov	arg02, result1
19de8     FE 12 02 F6 | 	mov	arg01, result2
19dec     FF 1E 02 F6 | 	mov	local01, result3
19df0     A7 14 62 FC | 	wrlong	arg02, fp
19df4     04 4E 05 F1 | 	add	fp, #4
19df8     A7 12 62 FC | 	wrlong	arg01, fp
19dfc     04 4E 05 F1 | 	add	fp, #4
19e00     A7 1E 62 FC | 	wrlong	local01, fp
19e04     08 4E 85 F1 | 	sub	fp, #8
19e08     98 1B BF FD | 	call	#_pop
19e0c     FF 1E 02 F6 | 	mov	local01, result3
19e10     0C 4E 05 F1 | 	add	fp, #12
19e14     A7 FA 61 FC | 	wrlong	result1, fp
19e18     04 4E 05 F1 | 	add	fp, #4
19e1c     A7 FC 61 FC | 	wrlong	result2, fp
19e20     04 4E 05 F1 | 	add	fp, #4
19e24     A7 1E 62 FC | 	wrlong	local01, fp
19e28     08 4E 85 F1 | 	sub	fp, #8
19e2c     A7 12 02 F6 | 	mov	arg01, fp
19e30     0C 4E 85 F1 | 	sub	fp, #12
19e34     30 BC BF FD | 	call	#_converttoint
19e38     FD 1E 02 F6 | 	mov	local01, result1
19e3c     A7 12 02 F6 | 	mov	arg01, fp
19e40     24 BC BF FD | 	call	#_converttoint
19e44     0F FB 01 FC | 	wrpin	result1, local01
19e48     A7 F0 03 F6 | 	mov	ptra, fp
19e4c     B2 00 A0 FD | 	call	#popregs_
19e50                 | _do_wrpin_ret
19e50     2D 00 64 FD | 	ret
19e54                 | 
19e54                 | ' 
19e54                 | ' sub do_wxpin
19e54                 | _do_wxpin
19e54     01 4A 05 F6 | 	mov	COUNT_, #1
19e58     A8 00 A0 FD | 	call	#pushregs_
19e5c     18 F0 07 F1 | 	add	ptra, #24
19e60     40 1B BF FD | 	call	#_pop
19e64     FD 14 02 F6 | 	mov	arg02, result1
19e68     FE 12 02 F6 | 	mov	arg01, result2
19e6c     FF 1E 02 F6 | 	mov	local01, result3
19e70     A7 14 62 FC | 	wrlong	arg02, fp
19e74     04 4E 05 F1 | 	add	fp, #4
19e78     A7 12 62 FC | 	wrlong	arg01, fp
19e7c     04 4E 05 F1 | 	add	fp, #4
19e80     A7 1E 62 FC | 	wrlong	local01, fp
19e84     08 4E 85 F1 | 	sub	fp, #8
19e88     18 1B BF FD | 	call	#_pop
19e8c     FF 1E 02 F6 | 	mov	local01, result3
19e90     0C 4E 05 F1 | 	add	fp, #12
19e94     A7 FA 61 FC | 	wrlong	result1, fp
19e98     04 4E 05 F1 | 	add	fp, #4
19e9c     A7 FC 61 FC | 	wrlong	result2, fp
19ea0     04 4E 05 F1 | 	add	fp, #4
19ea4     A7 1E 62 FC | 	wrlong	local01, fp
19ea8     08 4E 85 F1 | 	sub	fp, #8
19eac     A7 12 02 F6 | 	mov	arg01, fp
19eb0     0C 4E 85 F1 | 	sub	fp, #12
19eb4     B0 BB BF FD | 	call	#_converttoint
19eb8     FD 1E 02 F6 | 	mov	local01, result1
19ebc     A7 12 02 F6 | 	mov	arg01, fp
19ec0     A4 BB BF FD | 	call	#_converttoint
19ec4     0F FB 11 FC | 	wxpin	result1, local01
19ec8     A7 F0 03 F6 | 	mov	ptra, fp
19ecc     B2 00 A0 FD | 	call	#popregs_
19ed0                 | _do_wxpin_ret
19ed0     2D 00 64 FD | 	ret
19ed4                 | 
19ed4                 | ' 
19ed4                 | ' sub do_wypin
19ed4                 | _do_wypin
19ed4     01 4A 05 F6 | 	mov	COUNT_, #1
19ed8     A8 00 A0 FD | 	call	#pushregs_
19edc     18 F0 07 F1 | 	add	ptra, #24
19ee0     C0 1A BF FD | 	call	#_pop
19ee4     FD 14 02 F6 | 	mov	arg02, result1
19ee8     FE 12 02 F6 | 	mov	arg01, result2
19eec     FF 1E 02 F6 | 	mov	local01, result3
19ef0     A7 14 62 FC | 	wrlong	arg02, fp
19ef4     04 4E 05 F1 | 	add	fp, #4
19ef8     A7 12 62 FC | 	wrlong	arg01, fp
19efc     04 4E 05 F1 | 	add	fp, #4
19f00     A7 1E 62 FC | 	wrlong	local01, fp
19f04     08 4E 85 F1 | 	sub	fp, #8
19f08     98 1A BF FD | 	call	#_pop
19f0c     FF 1E 02 F6 | 	mov	local01, result3
19f10     0C 4E 05 F1 | 	add	fp, #12
19f14     A7 FA 61 FC | 	wrlong	result1, fp
19f18     04 4E 05 F1 | 	add	fp, #4
19f1c     A7 FC 61 FC | 	wrlong	result2, fp
19f20     04 4E 05 F1 | 	add	fp, #4
19f24     A7 1E 62 FC | 	wrlong	local01, fp
19f28     08 4E 85 F1 | 	sub	fp, #8
19f2c     A7 12 02 F6 | 	mov	arg01, fp
19f30     0C 4E 85 F1 | 	sub	fp, #12
19f34     30 BB BF FD | 	call	#_converttoint
19f38     FD 1E 02 F6 | 	mov	local01, result1
19f3c     A7 12 02 F6 | 	mov	arg01, fp
19f40     24 BB BF FD | 	call	#_converttoint
19f44     0F FB 21 FC | 	wypin	result1, local01
19f48     A7 F0 03 F6 | 	mov	ptra, fp
19f4c     B2 00 A0 FD | 	call	#popregs_
19f50                 | _do_wypin_ret
19f50     2D 00 64 FD | 	ret
19f54                 | 
19f54                 | ' 
19f54                 | ' sub do_position
19f54                 | _do_position
19f54     01 4A 05 F6 | 	mov	COUNT_, #1
19f58     A8 00 A0 FD | 	call	#pushregs_
19f5c     18 F0 07 F1 | 	add	ptra, #24
19f60     40 1A BF FD | 	call	#_pop
19f64     FD 14 02 F6 | 	mov	arg02, result1
19f68     FE 12 02 F6 | 	mov	arg01, result2
19f6c     FF 1E 02 F6 | 	mov	local01, result3
19f70     A7 14 62 FC | 	wrlong	arg02, fp
19f74     04 4E 05 F1 | 	add	fp, #4
19f78     A7 12 62 FC | 	wrlong	arg01, fp
19f7c     04 4E 05 F1 | 	add	fp, #4
19f80     A7 1E 62 FC | 	wrlong	local01, fp
19f84     08 4E 85 F1 | 	sub	fp, #8
19f88     18 1A BF FD | 	call	#_pop
19f8c     FF 1E 02 F6 | 	mov	local01, result3
19f90     0C 4E 05 F1 | 	add	fp, #12
19f94     A7 FA 61 FC | 	wrlong	result1, fp
19f98     04 4E 05 F1 | 	add	fp, #4
19f9c     A7 FC 61 FC | 	wrlong	result2, fp
19fa0     04 4E 05 F1 | 	add	fp, #4
19fa4     A7 1E 62 FC | 	wrlong	local01, fp
19fa8     08 4E 85 F1 | 	sub	fp, #8
19fac     A7 12 02 F6 | 	mov	arg01, fp
19fb0     0C 4E 85 F1 | 	sub	fp, #12
19fb4     B0 BA BF FD | 	call	#_converttoint
19fb8     FD 1E 02 F6 | 	mov	local01, result1
19fbc     A7 12 02 F6 | 	mov	arg01, fp
19fc0     A4 BA BF FD | 	call	#_converttoint
19fc4     FD 14 02 F6 | 	mov	arg02, result1
19fc8     0F 13 02 F6 | 	mov	arg01, local01
19fcc     A0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
19fd0     A7 F0 03 F6 | 	mov	ptra, fp
19fd4     B2 00 A0 FD | 	call	#popregs_
19fd8                 | _do_position_ret
19fd8     2D 00 64 FD | 	ret
19fdc                 | 
19fdc                 | ' 
19fdc                 | ' sub do_poke
19fdc                 | _do_poke
19fdc     01 4A 05 F6 | 	mov	COUNT_, #1
19fe0     A8 00 A0 FD | 	call	#pushregs_
19fe4     20 F0 07 F1 | 	add	ptra, #32
19fe8     B8 19 BF FD | 	call	#_pop
19fec     FD 14 02 F6 | 	mov	arg02, result1
19ff0     FE 12 02 F6 | 	mov	arg01, result2
19ff4     FF 1E 02 F6 | 	mov	local01, result3
19ff8     A7 14 62 FC | 	wrlong	arg02, fp
19ffc     04 4E 05 F1 | 	add	fp, #4
1a000     A7 12 62 FC | 	wrlong	arg01, fp
1a004     04 4E 05 F1 | 	add	fp, #4
1a008     A7 1E 62 FC | 	wrlong	local01, fp
1a00c     08 4E 85 F1 | 	sub	fp, #8
1a010     90 19 BF FD | 	call	#_pop
1a014     FF 1E 02 F6 | 	mov	local01, result3
1a018     0C 4E 05 F1 | 	add	fp, #12
1a01c     A7 FA 61 FC | 	wrlong	result1, fp
1a020     04 4E 05 F1 | 	add	fp, #4
1a024     A7 FC 61 FC | 	wrlong	result2, fp
1a028     04 4E 05 F1 | 	add	fp, #4
1a02c     A7 1E 62 FC | 	wrlong	local01, fp
1a030     08 4E 85 F1 | 	sub	fp, #8
1a034     A7 12 02 F6 | 	mov	arg01, fp
1a038     0C 4E 85 F1 | 	sub	fp, #12
1a03c     28 BA BF FD | 	call	#_converttoint
1a040     18 4E 05 F1 | 	add	fp, #24
1a044     A7 FA 61 FC | 	wrlong	result1, fp
1a048     18 4E 85 F1 | 	sub	fp, #24
1a04c     A7 12 02 F6 | 	mov	arg01, fp
1a050     14 BA BF FD | 	call	#_converttoint
1a054     1C 4E 05 F1 | 	add	fp, #28
1a058     A7 FA 61 FC | 	wrlong	result1, fp
1a05c                 | ' t1=pop() 'value
1a05c                 | ' t2=pop() 
1a05c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a05c                 | ' if a<$80000 then poke a,v else pspoke a,v
1a05c     04 4E 85 F1 | 	sub	fp, #4
1a060     A7 1E 02 FB | 	rdlong	local01, fp
1a064     18 4E 85 F1 | 	sub	fp, #24
1a068     00 04 00 FF 
1a06c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a070     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a074     18 4E 05 F1 | 	add	fp, #24
1a078     A7 12 02 FB | 	rdlong	arg01, fp
1a07c     04 4E 05 F1 | 	add	fp, #4
1a080     A7 14 02 FB | 	rdlong	arg02, fp
1a084     1C 4E 85 F1 | 	sub	fp, #28
1a088     09 15 42 FC | 	wrbyte	arg02, arg01
1a08c     18 00 90 FD | 	jmp	#LR__2121
1a090                 | LR__2120
1a090     18 4E 05 F1 | 	add	fp, #24
1a094     A7 12 02 FB | 	rdlong	arg01, fp
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 14 02 FB | 	rdlong	arg02, fp
1a0a0     1C 4E 85 F1 | 	sub	fp, #28
1a0a4     10 35 B0 FD | 	call	#_pspoke
1a0a8                 | LR__2121
1a0a8     A7 F0 03 F6 | 	mov	ptra, fp
1a0ac     B2 00 A0 FD | 	call	#popregs_
1a0b0                 | _do_poke_ret
1a0b0     2D 00 64 FD | 	ret
1a0b4                 | 
1a0b4                 | ' 
1a0b4                 | ' sub do_dpoke
1a0b4                 | _do_dpoke
1a0b4     01 4A 05 F6 | 	mov	COUNT_, #1
1a0b8     A8 00 A0 FD | 	call	#pushregs_
1a0bc     20 F0 07 F1 | 	add	ptra, #32
1a0c0     E0 18 BF FD | 	call	#_pop
1a0c4     FD 14 02 F6 | 	mov	arg02, result1
1a0c8     FE 12 02 F6 | 	mov	arg01, result2
1a0cc     FF 1E 02 F6 | 	mov	local01, result3
1a0d0     A7 14 62 FC | 	wrlong	arg02, fp
1a0d4     04 4E 05 F1 | 	add	fp, #4
1a0d8     A7 12 62 FC | 	wrlong	arg01, fp
1a0dc     04 4E 05 F1 | 	add	fp, #4
1a0e0     A7 1E 62 FC | 	wrlong	local01, fp
1a0e4     08 4E 85 F1 | 	sub	fp, #8
1a0e8     B8 18 BF FD | 	call	#_pop
1a0ec     FF 1E 02 F6 | 	mov	local01, result3
1a0f0     0C 4E 05 F1 | 	add	fp, #12
1a0f4     A7 FA 61 FC | 	wrlong	result1, fp
1a0f8     04 4E 05 F1 | 	add	fp, #4
1a0fc     A7 FC 61 FC | 	wrlong	result2, fp
1a100     04 4E 05 F1 | 	add	fp, #4
1a104     A7 1E 62 FC | 	wrlong	local01, fp
1a108     08 4E 85 F1 | 	sub	fp, #8
1a10c     A7 12 02 F6 | 	mov	arg01, fp
1a110     0C 4E 85 F1 | 	sub	fp, #12
1a114     50 B9 BF FD | 	call	#_converttoint
1a118     18 4E 05 F1 | 	add	fp, #24
1a11c     A7 FA 61 FC | 	wrlong	result1, fp
1a120     18 4E 85 F1 | 	sub	fp, #24
1a124     A7 12 02 F6 | 	mov	arg01, fp
1a128     3C B9 BF FD | 	call	#_converttoint
1a12c     1C 4E 05 F1 | 	add	fp, #28
1a130     A7 FA 61 FC | 	wrlong	result1, fp
1a134                 | ' t1=pop() 'value
1a134                 | ' t2=pop() 
1a134                 | ' a=converttoint(t2) : v=converttoint(t1)
1a134                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a134     04 4E 85 F1 | 	sub	fp, #4
1a138     A7 1E 02 FB | 	rdlong	local01, fp
1a13c     18 4E 85 F1 | 	sub	fp, #24
1a140     00 04 00 FF 
1a144     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a148     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a14c     18 4E 05 F1 | 	add	fp, #24
1a150     A7 12 02 FB | 	rdlong	arg01, fp
1a154     04 4E 05 F1 | 	add	fp, #4
1a158     A7 14 02 FB | 	rdlong	arg02, fp
1a15c     1C 4E 85 F1 | 	sub	fp, #28
1a160     09 15 52 FC | 	wrword	arg02, arg01
1a164     18 00 90 FD | 	jmp	#LR__2131
1a168                 | LR__2130
1a168     18 4E 05 F1 | 	add	fp, #24
1a16c     A7 12 02 FB | 	rdlong	arg01, fp
1a170     04 4E 05 F1 | 	add	fp, #4
1a174     A7 14 02 FB | 	rdlong	arg02, fp
1a178     1C 4E 85 F1 | 	sub	fp, #28
1a17c     F0 33 B0 FD | 	call	#_psdpoke
1a180                 | LR__2131
1a180     A7 F0 03 F6 | 	mov	ptra, fp
1a184     B2 00 A0 FD | 	call	#popregs_
1a188                 | _do_dpoke_ret
1a188     2D 00 64 FD | 	ret
1a18c                 | 
1a18c                 | ' 
1a18c                 | ' sub do_lpoke
1a18c                 | _do_lpoke
1a18c     01 4A 05 F6 | 	mov	COUNT_, #1
1a190     A8 00 A0 FD | 	call	#pushregs_
1a194     20 F0 07 F1 | 	add	ptra, #32
1a198     08 18 BF FD | 	call	#_pop
1a19c     FD 14 02 F6 | 	mov	arg02, result1
1a1a0     FE 12 02 F6 | 	mov	arg01, result2
1a1a4     FF 1E 02 F6 | 	mov	local01, result3
1a1a8     A7 14 62 FC | 	wrlong	arg02, fp
1a1ac     04 4E 05 F1 | 	add	fp, #4
1a1b0     A7 12 62 FC | 	wrlong	arg01, fp
1a1b4     04 4E 05 F1 | 	add	fp, #4
1a1b8     A7 1E 62 FC | 	wrlong	local01, fp
1a1bc     08 4E 85 F1 | 	sub	fp, #8
1a1c0     E0 17 BF FD | 	call	#_pop
1a1c4     FF 1E 02 F6 | 	mov	local01, result3
1a1c8     0C 4E 05 F1 | 	add	fp, #12
1a1cc     A7 FA 61 FC | 	wrlong	result1, fp
1a1d0     04 4E 05 F1 | 	add	fp, #4
1a1d4     A7 FC 61 FC | 	wrlong	result2, fp
1a1d8     04 4E 05 F1 | 	add	fp, #4
1a1dc     A7 1E 62 FC | 	wrlong	local01, fp
1a1e0     08 4E 85 F1 | 	sub	fp, #8
1a1e4     A7 12 02 F6 | 	mov	arg01, fp
1a1e8     0C 4E 85 F1 | 	sub	fp, #12
1a1ec     78 B8 BF FD | 	call	#_converttoint
1a1f0     18 4E 05 F1 | 	add	fp, #24
1a1f4     A7 FA 61 FC | 	wrlong	result1, fp
1a1f8     18 4E 85 F1 | 	sub	fp, #24
1a1fc     A7 12 02 F6 | 	mov	arg01, fp
1a200     64 B8 BF FD | 	call	#_converttoint
1a204     1C 4E 05 F1 | 	add	fp, #28
1a208     A7 FA 61 FC | 	wrlong	result1, fp
1a20c                 | ' t1=pop() 'value
1a20c                 | ' t2=pop() 
1a20c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a20c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a20c     04 4E 85 F1 | 	sub	fp, #4
1a210     A7 1E 02 FB | 	rdlong	local01, fp
1a214     18 4E 85 F1 | 	sub	fp, #24
1a218     00 04 00 FF 
1a21c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a220     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a224     18 4E 05 F1 | 	add	fp, #24
1a228     A7 12 02 FB | 	rdlong	arg01, fp
1a22c     04 4E 05 F1 | 	add	fp, #4
1a230     A7 14 02 FB | 	rdlong	arg02, fp
1a234     1C 4E 85 F1 | 	sub	fp, #28
1a238     09 15 62 FC | 	wrlong	arg02, arg01
1a23c     18 00 90 FD | 	jmp	#LR__2141
1a240                 | LR__2140
1a240     18 4E 05 F1 | 	add	fp, #24
1a244     A7 12 02 FB | 	rdlong	arg01, fp
1a248     04 4E 05 F1 | 	add	fp, #4
1a24c     A7 14 02 FB | 	rdlong	arg02, fp
1a250     1C 4E 85 F1 | 	sub	fp, #28
1a254     D0 32 B0 FD | 	call	#_pslpoke
1a258                 | LR__2141
1a258     A7 F0 03 F6 | 	mov	ptra, fp
1a25c     B2 00 A0 FD | 	call	#popregs_
1a260                 | _do_lpoke_ret
1a260     2D 00 64 FD | 	ret
1a264                 | 
1a264                 | ' 
1a264                 | ' sub do_peek
1a264                 | _do_peek
1a264     00 4A 05 F6 | 	mov	COUNT_, #0
1a268     A8 00 A0 FD | 	call	#pushregs_
1a26c     14 F0 07 F1 | 	add	ptra, #20
1a270     30 17 BF FD | 	call	#_pop
1a274     A7 FA 61 FC | 	wrlong	result1, fp
1a278     04 4E 05 F1 | 	add	fp, #4
1a27c     A7 FC 61 FC | 	wrlong	result2, fp
1a280     04 4E 05 F1 | 	add	fp, #4
1a284     A7 FE 61 FC | 	wrlong	result3, fp
1a288     08 4E 85 F1 | 	sub	fp, #8
1a28c     A7 12 02 F6 | 	mov	arg01, fp
1a290     D4 B7 BF FD | 	call	#_converttoint
1a294     0C 4E 05 F1 | 	add	fp, #12
1a298     A7 FA 61 FC | 	wrlong	result1, fp
1a29c                 | ' t1=pop()
1a29c                 | ' a=converttoint(t1)
1a29c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a29c     0C 4E 85 F1 | 	sub	fp, #12
1a2a0     00 04 00 FF 
1a2a4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a2a8     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a2ac     0C 4E 05 F1 | 	add	fp, #12
1a2b0     A7 12 02 FB | 	rdlong	arg01, fp
1a2b4     09 FB C1 FA | 	rdbyte	result1, arg01
1a2b8     04 4E 05 F1 | 	add	fp, #4
1a2bc     A7 FA 61 FC | 	wrlong	result1, fp
1a2c0     10 4E 85 F1 | 	sub	fp, #16
1a2c4     20 00 90 FD | 	jmp	#LR__2151
1a2c8                 | LR__2150
1a2c8     0C 4E 05 F1 | 	add	fp, #12
1a2cc     A7 12 02 FB | 	rdlong	arg01, fp
1a2d0     0C 4E 85 F1 | 	sub	fp, #12
1a2d4     28 33 B0 FD | 	call	#_pspeek
1a2d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a2dc     10 4E 05 F1 | 	add	fp, #16
1a2e0     A7 FA 61 FC | 	wrlong	result1, fp
1a2e4     10 4E 85 F1 | 	sub	fp, #16
1a2e8                 | LR__2151
1a2e8     08 4E 05 F1 | 	add	fp, #8
1a2ec     A7 3A 68 FC | 	wrlong	#29, fp
1a2f0     08 4E 05 F1 | 	add	fp, #8
1a2f4     A7 12 02 FB | 	rdlong	arg01, fp
1a2f8     10 4E 85 F1 | 	sub	fp, #16
1a2fc     A7 12 62 FC | 	wrlong	arg01, fp
1a300     A7 12 02 F6 | 	mov	arg01, fp
1a304     34 17 BF FD | 	call	#_push
1a308     A7 F0 03 F6 | 	mov	ptra, fp
1a30c     B2 00 A0 FD | 	call	#popregs_
1a310                 | _do_peek_ret
1a310     2D 00 64 FD | 	ret
1a314                 | 
1a314                 | ' 
1a314                 | ' sub do_dpeek
1a314                 | _do_dpeek
1a314     00 4A 05 F6 | 	mov	COUNT_, #0
1a318     A8 00 A0 FD | 	call	#pushregs_
1a31c     14 F0 07 F1 | 	add	ptra, #20
1a320     80 16 BF FD | 	call	#_pop
1a324     A7 FA 61 FC | 	wrlong	result1, fp
1a328     04 4E 05 F1 | 	add	fp, #4
1a32c     A7 FC 61 FC | 	wrlong	result2, fp
1a330     04 4E 05 F1 | 	add	fp, #4
1a334     A7 FE 61 FC | 	wrlong	result3, fp
1a338     08 4E 85 F1 | 	sub	fp, #8
1a33c     A7 12 02 F6 | 	mov	arg01, fp
1a340     24 B7 BF FD | 	call	#_converttoint
1a344     0C 4E 05 F1 | 	add	fp, #12
1a348     A7 FA 61 FC | 	wrlong	result1, fp
1a34c                 | ' t1=pop()
1a34c                 | ' a=converttoint(t1)
1a34c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a34c     0C 4E 85 F1 | 	sub	fp, #12
1a350     00 04 00 FF 
1a354     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a358     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a35c     0C 4E 05 F1 | 	add	fp, #12
1a360     A7 12 02 FB | 	rdlong	arg01, fp
1a364     09 FB E1 FA | 	rdword	result1, arg01
1a368     04 4E 05 F1 | 	add	fp, #4
1a36c     A7 FA 61 FC | 	wrlong	result1, fp
1a370     10 4E 85 F1 | 	sub	fp, #16
1a374     1C 00 90 FD | 	jmp	#LR__2161
1a378                 | LR__2160
1a378     0C 4E 05 F1 | 	add	fp, #12
1a37c     A7 12 02 FB | 	rdlong	arg01, fp
1a380     0C 4E 85 F1 | 	sub	fp, #12
1a384     28 33 B0 FD | 	call	#_psdpeek
1a388     10 4E 05 F1 | 	add	fp, #16
1a38c     A7 FA 61 FC | 	wrlong	result1, fp
1a390     10 4E 85 F1 | 	sub	fp, #16
1a394                 | LR__2161
1a394     08 4E 05 F1 | 	add	fp, #8
1a398     A7 3A 68 FC | 	wrlong	#29, fp
1a39c     08 4E 05 F1 | 	add	fp, #8
1a3a0     A7 12 02 FB | 	rdlong	arg01, fp
1a3a4     10 4E 85 F1 | 	sub	fp, #16
1a3a8     A7 12 62 FC | 	wrlong	arg01, fp
1a3ac     A7 12 02 F6 | 	mov	arg01, fp
1a3b0     88 16 BF FD | 	call	#_push
1a3b4     A7 F0 03 F6 | 	mov	ptra, fp
1a3b8     B2 00 A0 FD | 	call	#popregs_
1a3bc                 | _do_dpeek_ret
1a3bc     2D 00 64 FD | 	ret
1a3c0                 | 
1a3c0                 | ' 
1a3c0                 | ' 
1a3c0                 | ' sub do_lpeek
1a3c0                 | _do_lpeek
1a3c0     00 4A 05 F6 | 	mov	COUNT_, #0
1a3c4     A8 00 A0 FD | 	call	#pushregs_
1a3c8     14 F0 07 F1 | 	add	ptra, #20
1a3cc     D4 15 BF FD | 	call	#_pop
1a3d0     A7 FA 61 FC | 	wrlong	result1, fp
1a3d4     04 4E 05 F1 | 	add	fp, #4
1a3d8     A7 FC 61 FC | 	wrlong	result2, fp
1a3dc     04 4E 05 F1 | 	add	fp, #4
1a3e0     A7 FE 61 FC | 	wrlong	result3, fp
1a3e4     08 4E 85 F1 | 	sub	fp, #8
1a3e8     A7 12 02 F6 | 	mov	arg01, fp
1a3ec     78 B6 BF FD | 	call	#_converttoint
1a3f0     0C 4E 05 F1 | 	add	fp, #12
1a3f4     A7 FA 61 FC | 	wrlong	result1, fp
1a3f8                 | ' t1=pop()
1a3f8                 | ' a=converttoint(t1)
1a3f8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a3f8     0C 4E 85 F1 | 	sub	fp, #12
1a3fc     00 04 00 FF 
1a400     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a404     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a408     0C 4E 05 F1 | 	add	fp, #12
1a40c     A7 12 02 FB | 	rdlong	arg01, fp
1a410     09 FB 01 FB | 	rdlong	result1, arg01
1a414     04 4E 05 F1 | 	add	fp, #4
1a418     A7 FA 61 FC | 	wrlong	result1, fp
1a41c     10 4E 85 F1 | 	sub	fp, #16
1a420     1C 00 90 FD | 	jmp	#LR__2171
1a424                 | LR__2170
1a424     0C 4E 05 F1 | 	add	fp, #12
1a428     A7 12 02 FB | 	rdlong	arg01, fp
1a42c     0C 4E 85 F1 | 	sub	fp, #12
1a430     24 32 B0 FD | 	call	#_pslpeek
1a434     10 4E 05 F1 | 	add	fp, #16
1a438     A7 FA 61 FC | 	wrlong	result1, fp
1a43c     10 4E 85 F1 | 	sub	fp, #16
1a440                 | LR__2171
1a440     08 4E 05 F1 | 	add	fp, #8
1a444     A7 3A 68 FC | 	wrlong	#29, fp
1a448     08 4E 05 F1 | 	add	fp, #8
1a44c     A7 12 02 FB | 	rdlong	arg01, fp
1a450     10 4E 85 F1 | 	sub	fp, #16
1a454     A7 12 62 FC | 	wrlong	arg01, fp
1a458     A7 12 02 F6 | 	mov	arg01, fp
1a45c     DC 15 BF FD | 	call	#_push
1a460     A7 F0 03 F6 | 	mov	ptra, fp
1a464     B2 00 A0 FD | 	call	#popregs_
1a468                 | _do_lpeek_ret
1a468     2D 00 64 FD | 	ret
1a46c                 | 
1a46c                 | ' 
1a46c                 | ' sub do_fre
1a46c                 | _do_fre
1a46c     01 4A 05 F6 | 	mov	COUNT_, #1
1a470     A8 00 A0 FD | 	call	#pushregs_
1a474     0C F0 07 F1 | 	add	ptra, #12
1a478     51 00 00 FF 
1a47c     A8 E5 05 F1 | 	add	objptr, ##41896
1a480     F2 12 02 FB | 	rdlong	arg01, objptr
1a484     0E 00 00 FF 
1a488     4C E5 85 F1 | 	sub	objptr, ##7500
1a48c     F2 1E 02 FB | 	rdlong	local01, objptr
1a490     0F 13 82 F1 | 	sub	arg01, local01
1a494     0E 00 00 FF 
1a498     B8 E5 05 F1 | 	add	objptr, ##7608
1a49c     F2 12 62 FC | 	wrlong	arg01, objptr
1a4a0     08 4E 05 F1 | 	add	fp, #8
1a4a4     A7 3A 68 FC | 	wrlong	#29, fp
1a4a8     08 4E 85 F1 | 	sub	fp, #8
1a4ac     F2 1E 02 FB | 	rdlong	local01, objptr
1a4b0     52 00 00 FF 
1a4b4     14 E4 85 F1 | 	sub	objptr, ##42004
1a4b8     A7 1E 62 FC | 	wrlong	local01, fp
1a4bc     A7 12 02 F6 | 	mov	arg01, fp
1a4c0     78 15 BF FD | 	call	#_push
1a4c4     A7 F0 03 F6 | 	mov	ptra, fp
1a4c8     B2 00 A0 FD | 	call	#popregs_
1a4cc                 | _do_fre_ret
1a4cc     2D 00 64 FD | 	ret
1a4d0                 | 
1a4d0                 | ' 
1a4d0                 | ' sub do_adr
1a4d0                 | _do_adr
1a4d0                 | _do_adr_ret
1a4d0     2D 00 64 FD | 	ret
1a4d4                 | 
1a4d4                 | ' 
1a4d4                 | ' sub do_getnotevalue
1a4d4                 | _do_getnotevalue
1a4d4     01 4A 05 F6 | 	mov	COUNT_, #1
1a4d8     A8 00 A0 FD | 	call	#pushregs_
1a4dc     1C F0 07 F1 | 	add	ptra, #28
1a4e0     C0 14 BF FD | 	call	#_pop
1a4e4     FF 14 02 F6 | 	mov	arg02, result3
1a4e8     10 4E 05 F1 | 	add	fp, #16
1a4ec     A7 FA 61 FC | 	wrlong	result1, fp
1a4f0     04 4E 05 F1 | 	add	fp, #4
1a4f4     A7 FC 61 FC | 	wrlong	result2, fp
1a4f8     04 4E 05 F1 | 	add	fp, #4
1a4fc     A7 14 62 FC | 	wrlong	arg02, fp
1a500     08 4E 85 F1 | 	sub	fp, #8
1a504     A7 12 02 F6 | 	mov	arg01, fp
1a508     10 4E 85 F1 | 	sub	fp, #16
1a50c     58 B5 BF FD | 	call	#_converttoint
1a510     FD 14 52 F6 | 	abs	arg02, result1 wc
1a514     0C 14 16 FD | 	qdiv	arg02, #12
1a518     0C 4E 05 F1 | 	add	fp, #12
1a51c     A7 FA 61 FC | 	wrlong	result1, fp
1a520     14 00 00 FF 
1a524     D8 E4 05 F1 | 	add	objptr, ##10456
1a528     08 4E 85 F1 | 	sub	fp, #8
1a52c     19 14 62 FD | 	getqy	arg02
1a530     0A 15 82 F6 | 	negc	arg02, arg02
1a534     02 14 66 F0 | 	shl	arg02, #2
1a538     F2 14 02 F1 | 	add	arg02, objptr
1a53c     0A 15 02 FB | 	rdlong	arg02, arg02
1a540     A7 14 62 FC | 	wrlong	arg02, fp
1a544     08 4E 05 F1 | 	add	fp, #8
1a548     A7 14 02 FB | 	rdlong	arg02, fp
1a54c     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a550     0C 14 16 FD | 	qdiv	arg02, #12
1a554     0C 4E 85 F1 | 	sub	fp, #12
1a558     14 00 00 FF 
1a55c     D8 E4 85 F1 | 	sub	objptr, ##10456
1a560     18 14 62 FD | 	getqx	arg02
1a564     0A 13 82 F6 | 	negc	arg01, arg02
1a568     09 13 52 F6 | 	abs	arg01, arg01 wc
1a56c     1F 1E C6 C9 |  if_b	decod	local01, #31
1a570     00 1E 06 36 |  if_ae	mov	local01, #0
1a574     60 89 B0 FD | 	call	#__system___float_fromuns
1a578     0F FB 61 F5 | 	xor	result1, local01
1a57c     08 4E 05 F1 | 	add	fp, #8
1a580     A7 FA 61 FC | 	wrlong	result1, fp
1a584     FD 14 02 F6 | 	mov	arg02, result1
1a588     08 4E 85 F1 | 	sub	fp, #8
1a58c     1E 12 C6 F9 | 	decod	arg01, #30
1a590     2C 9C B0 FD | 	call	#__system____builtin_powf
1a594     FD 12 02 F6 | 	mov	arg01, result1
1a598     04 4E 05 F1 | 	add	fp, #4
1a59c     A7 14 02 FB | 	rdlong	arg02, fp
1a5a0     04 4E 85 F1 | 	sub	fp, #4
1a5a4     34 8D B0 FD | 	call	#__system___float_mul
1a5a8     A7 FA 61 FC | 	wrlong	result1, fp
1a5ac     10 4E 05 F1 | 	add	fp, #16
1a5b0     A7 FA 61 FC | 	wrlong	result1, fp
1a5b4     08 4E 05 F1 | 	add	fp, #8
1a5b8     A7 3C 68 FC | 	wrlong	#30, fp
1a5bc     08 4E 85 F1 | 	sub	fp, #8
1a5c0     A7 12 02 F6 | 	mov	arg01, fp
1a5c4     10 4E 85 F1 | 	sub	fp, #16
1a5c8     70 14 BF FD | 	call	#_push
1a5cc     A7 F0 03 F6 | 	mov	ptra, fp
1a5d0     B2 00 A0 FD | 	call	#popregs_
1a5d4                 | _do_getnotevalue_ret
1a5d4     2D 00 64 FD | 	ret
1a5d8                 | 
1a5d8                 | ' 
1a5d8                 | ' 
1a5d8                 | ' sub do_waitms
1a5d8                 | _do_waitms
1a5d8     01 4A 05 F6 | 	mov	COUNT_, #1
1a5dc     A8 00 A0 FD | 	call	#pushregs_
1a5e0     18 F0 07 F1 | 	add	ptra, #24
1a5e4     BC 13 BF FD | 	call	#_pop
1a5e8     A7 FA 61 FC | 	wrlong	result1, fp
1a5ec     04 4E 05 F1 | 	add	fp, #4
1a5f0     A7 FC 61 FC | 	wrlong	result2, fp
1a5f4     04 4E 05 F1 | 	add	fp, #4
1a5f8     A7 FE 61 FC | 	wrlong	result3, fp
1a5fc                 | ' 
1a5fc                 | ' t1=pop() 'value
1a5fc                 | ' 
1a5fc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a5fc     08 4E 85 F1 | 	sub	fp, #8
1a600     1C FE 0D F2 | 	cmp	result3, #28 wz
1a604     08 4E 05 51 |  if_ne	add	fp, #8
1a608     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a60c     08 4E 85 51 |  if_ne	sub	fp, #8
1a610     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a614     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a618     0C 4E 05 A1 |  if_e	add	fp, #12
1a61c     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a620     0C 4E 85 A1 |  if_e	sub	fp, #12
1a624     14 00 90 AD |  if_e	jmp	#LR__2180
1a628     A7 12 02 F6 | 	mov	arg01, fp
1a62c     38 B4 BF FD | 	call	#_converttoint
1a630     0C 4E 05 F1 | 	add	fp, #12
1a634     A7 FA 61 FC | 	wrlong	result1, fp
1a638     0C 4E 85 F1 | 	sub	fp, #12
1a63c                 | LR__2180
1a63c                 | ' if t<0 then return
1a63c     0C 4E 05 F1 | 	add	fp, #12
1a640     A7 12 02 FB | 	rdlong	arg01, fp
1a644     0C 4E 85 F1 | 	sub	fp, #12
1a648     00 12 56 F2 | 	cmps	arg01, #0 wc
1a64c     B8 00 90 CD |  if_b	jmp	#LR__2185
1a650                 | ' if t < 5000 then 
1a650     0C 4E 05 F1 | 	add	fp, #12
1a654     A7 12 02 FB | 	rdlong	arg01, fp
1a658     0C 4E 85 F1 | 	sub	fp, #12
1a65c     09 00 00 FF 
1a660     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a664     14 00 90 3D |  if_ae	jmp	#LR__2181
1a668     0C 4E 05 F1 | 	add	fp, #12
1a66c     A7 12 02 FB | 	rdlong	arg01, fp
1a670     0C 4E 85 F1 | 	sub	fp, #12
1a674     A4 63 B0 FD | 	call	#__system___waitms
1a678     8C 00 90 FD | 	jmp	#LR__2184
1a67c                 | LR__2181
1a67c     10 4E 05 F1 | 	add	fp, #16
1a680     A7 02 68 FC | 	wrlong	#1, fp
1a684     04 4E 85 F1 | 	sub	fp, #4
1a688     A7 12 02 FB | 	rdlong	arg01, fp
1a68c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a690     09 00 00 FF 
1a694     88 13 16 FD | 	qdiv	arg01, ##5000
1a698                 | '   for i=1 to t/5000
1a698     0C 4E 85 F1 | 	sub	fp, #12
1a69c     18 1E 62 FD | 	getqx	local01
1a6a0     0F 1F 82 F6 | 	negc	local01, local01
1a6a4     01 1E 06 F1 | 	add	local01, #1
1a6a8                 | LR__2182
1a6a8     10 4E 05 F1 | 	add	fp, #16
1a6ac     A7 12 02 FB | 	rdlong	arg01, fp
1a6b0     10 4E 85 F1 | 	sub	fp, #16
1a6b4     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a6b8     28 00 90 3D |  if_ae	jmp	#LR__2183
1a6bc     0C 4E 05 F1 | 	add	fp, #12
1a6c0     A7 12 02 FB | 	rdlong	arg01, fp
1a6c4     0C 4E 85 F1 | 	sub	fp, #12
1a6c8     50 63 B0 FD | 	call	#__system___waitms
1a6cc     10 4E 05 F1 | 	add	fp, #16
1a6d0     A7 12 02 FB | 	rdlong	arg01, fp
1a6d4     01 12 06 F1 | 	add	arg01, #1
1a6d8     A7 12 62 FC | 	wrlong	arg01, fp
1a6dc     10 4E 85 F1 | 	sub	fp, #16
1a6e0     C4 FF 9F FD | 	jmp	#LR__2182
1a6e4                 | LR__2183
1a6e4     0C 4E 05 F1 | 	add	fp, #12
1a6e8     A7 1E 02 FB | 	rdlong	local01, fp
1a6ec     0F 1F 52 F6 | 	abs	local01, local01 wc
1a6f0     09 00 00 FF 
1a6f4     88 1F 16 FD | 	qdiv	local01, ##5000
1a6f8     0C 4E 85 F1 | 	sub	fp, #12
1a6fc     19 1E 62 FD | 	getqy	local01
1a700     0F 13 82 F6 | 	negc	arg01, local01
1a704     14 63 B0 FD | 	call	#__system___waitms
1a708                 | LR__2184
1a708                 | LR__2185
1a708     A7 F0 03 F6 | 	mov	ptra, fp
1a70c     B2 00 A0 FD | 	call	#popregs_
1a710                 | _do_waitms_ret
1a710     2D 00 64 FD | 	ret
1a714                 | 
1a714                 | ' 
1a714                 | ' sub do_waitvbl
1a714                 | _do_waitvbl
1a714     01 12 06 F6 | 	mov	arg01, #1
1a718     F4 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a71c                 | _do_waitvbl_ret
1a71c     2D 00 64 FD | 	ret
1a720                 | 
1a720                 | ' 
1a720                 | ' sub do_waitclock
1a720                 | _do_waitclock
1a720     51 00 00 FF 
1a724     A4 E5 05 F1 | 	add	objptr, ##41892
1a728     F2 00 02 FB | 	rdlong	_var01, objptr
1a72c                 | ' c=hkcnt
1a72c                 | ' do: loop until hkcnt<>c
1a72c                 | LR__2190
1a72c     F2 02 02 FB | 	rdlong	_var02, objptr
1a730     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a734     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a738     51 00 00 FF 
1a73c     A4 E5 85 F1 | 	sub	objptr, ##41892
1a740                 | _do_waitclock_ret
1a740     2D 00 64 FD | 	ret
1a744                 | 
1a744                 | ' 
1a744                 | ' 
1a744                 | ' 
1a744                 | ' sub do_dir
1a744                 | _do_dir
1a744     13 4A 05 F6 | 	mov	COUNT_, #19
1a748     A8 00 A0 FD | 	call	#pushregs_
1a74c     01 00 00 FF 
1a750     38 F0 07 F1 | 	add	ptra, ##568
1a754     83 01 00 FF 
1a758     F5 13 06 F6 | 	mov	arg01, ##@LR__5491
1a75c     54 66 B0 FD | 	call	#__system___chdir
1a760                 | ' 
1a760                 | ' chdir("/sd/bas")       ' set working directory
1a760                 | ' print "Working directory: "; currentdir$ 
1a760     00 12 06 F6 | 	mov	arg01, #0
1a764     00 BA B0 FD | 	call	#__system___getiolock_0540
1a768     FD 12 02 F6 | 	mov	arg01, result1
1a76c     B8 5F B0 FD | 	call	#__system___lockmem
1a770     83 01 00 FF 
1a774     FD 15 06 F6 | 	mov	arg02, ##@LR__5492
1a778     00 12 06 F6 | 	mov	arg01, #0
1a77c     00 16 06 F6 | 	mov	arg03, #0
1a780     98 6C B0 FD | 	call	#__system___basic_print_string
1a784     4A 00 00 FF 
1a788     90 E4 05 F1 | 	add	objptr, ##38032
1a78c     F2 14 02 FB | 	rdlong	arg02, objptr
1a790     4A 00 00 FF 
1a794     90 E4 85 F1 | 	sub	objptr, ##38032
1a798     00 12 06 F6 | 	mov	arg01, #0
1a79c     00 16 06 F6 | 	mov	arg03, #0
1a7a0     78 6C B0 FD | 	call	#__system___basic_print_string
1a7a4     00 12 06 F6 | 	mov	arg01, #0
1a7a8     0A 14 06 F6 | 	mov	arg02, #10
1a7ac     00 16 06 F6 | 	mov	arg03, #0
1a7b0     10 6C B0 FD | 	call	#__system___basic_print_char
1a7b4     01 1E 06 F6 | 	mov	local01, #1
1a7b8     00 12 06 F6 | 	mov	arg01, #0
1a7bc     A8 B9 B0 FD | 	call	#__system___getiolock_0540
1a7c0     FD 00 68 FC | 	wrlong	#0, result1
1a7c4     00 20 06 F6 | 	mov	local02, #0
1a7c8     00 22 06 F6 | 	mov	local03, #0
1a7cc                 | ' px=0
1a7cc                 | ' for i=0 to 127: filelist(i)="" : next i
1a7cc     00 24 06 F6 | 	mov	local04, #0
1a7d0     1C 4E 05 F1 | 	add	fp, #28
1a7d4     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a7d8                 | LR__2200
1a7d8     12 27 02 F6 | 	mov	local05, local04
1a7dc     02 26 66 F0 | 	shl	local05, #2
1a7e0     A7 26 02 F1 | 	add	local05, fp
1a7e4     84 01 00 FF 
1a7e8     11 28 06 F6 | 	mov	local06, ##@LR__5493
1a7ec     13 29 62 FC | 	wrlong	local06, local05
1a7f0     01 24 06 F1 | 	add	local04, #1
1a7f4     80 24 56 F2 | 	cmps	local04, #128 wc
1a7f8     DC FF 9F CD |  if_b	jmp	#LR__2200
1a7fc                 | LR__2201
1a7fc     1C 4E 85 F1 | 	sub	fp, #28
1a800     84 01 00 FF 
1a804     12 12 06 F6 | 	mov	arg01, ##@LR__5494
1a808     10 14 06 F6 | 	mov	arg02, #16
1a80c     90 BA B0 FD | 	call	#__system___basic_dir
1a810     FD 2A 02 F6 | 	mov	local07, result1
1a814     00 2C 06 F6 | 	mov	local08, #0
1a818                 | ' filename=dir$("*", fbDirectory)
1a818                 | ' n=0
1a818                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a818                 | LR__2202
1a818     84 01 00 FF 
1a81c     14 2E 06 F6 | 	mov	local09, ##@LR__5495
1a820     15 13 02 F6 | 	mov	arg01, local07
1a824     17 15 02 F6 | 	mov	arg02, local09
1a828     24 5F B0 FD | 	call	#__system___string_cmp
1a82c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a830     68 00 90 AD |  if_e	jmp	#LR__2203
1a834     00 2E 06 F6 | 	mov	local09, #0
1a838     15 13 02 F6 | 	mov	arg01, local07
1a83c     00 14 06 F6 | 	mov	arg02, #0
1a840     0C 5F B0 FD | 	call	#__system___string_cmp
1a844     00 FA 0D F2 | 	cmp	result1, #0 wz
1a848     50 00 90 AD |  if_e	jmp	#LR__2203
1a84c     80 2C 56 F2 | 	cmps	local08, #128 wc
1a850     48 00 90 3D |  if_ae	jmp	#LR__2203
1a854     84 01 00 FF 
1a858     15 12 06 F6 | 	mov	arg01, ##@LR__5496
1a85c     15 15 02 F6 | 	mov	arg02, local07
1a860     20 5F B0 FD | 	call	#__system___string_concat
1a864     FD 2A 02 F6 | 	mov	local07, result1
1a868     16 27 02 F6 | 	mov	local05, local08
1a86c     02 26 66 F0 | 	shl	local05, #2
1a870     1C 4E 05 F1 | 	add	fp, #28
1a874     A7 26 02 F1 | 	add	local05, fp
1a878     13 2B 62 FC | 	wrlong	local07, local05
1a87c     01 2C 06 F1 | 	add	local08, #1
1a880     00 26 06 F6 | 	mov	local05, #0
1a884     00 12 06 F6 | 	mov	arg01, #0
1a888     00 14 06 F6 | 	mov	arg02, #0
1a88c     1C 4E 85 F1 | 	sub	fp, #28
1a890     0C BA B0 FD | 	call	#__system___basic_dir
1a894     FD 2A 02 F6 | 	mov	local07, result1
1a898     7C FF 9F FD | 	jmp	#LR__2202
1a89c                 | LR__2203
1a89c                 | ' ' now sort this
1a89c                 | ' 
1a89c                 | ' for i =0 to n-1
1a89c     00 24 06 F6 | 	mov	local04, #0
1a8a0     16 31 02 F6 | 	mov	local10, local08
1a8a4                 | LR__2204
1a8a4     18 25 52 F2 | 	cmps	local04, local10 wc
1a8a8     DC 00 90 3D |  if_ae	jmp	#LR__2208
1a8ac     00 32 06 F6 | 	mov	local11, #0
1a8b0                 | '   swapped=false
1a8b0                 | '   for j=0 to n-i-2
1a8b0     00 34 06 F6 | 	mov	local12, #0
1a8b4     16 37 02 F6 | 	mov	local13, local08
1a8b8     12 37 82 F1 | 	sub	local13, local04
1a8bc     01 36 86 F1 | 	sub	local13, #1
1a8c0                 | LR__2205
1a8c0     1B 35 52 F2 | 	cmps	local12, local13 wc
1a8c4     B0 00 90 3D |  if_ae	jmp	#LR__2207
1a8c8                 | '     if filelist(j) > filelist(j+1) then
1a8c8     1A 2F 02 F6 | 	mov	local09, local12
1a8cc     02 2E 66 F0 | 	shl	local09, #2
1a8d0     1C 4E 05 F1 | 	add	fp, #28
1a8d4     A7 2E 02 F1 | 	add	local09, fp
1a8d8     17 13 02 FB | 	rdlong	arg01, local09
1a8dc     1A 2F 02 F6 | 	mov	local09, local12
1a8e0     01 2E 06 F1 | 	add	local09, #1
1a8e4     17 29 02 F6 | 	mov	local06, local09
1a8e8     02 28 66 F0 | 	shl	local06, #2
1a8ec     A7 1E 02 F6 | 	mov	local01, fp
1a8f0     A7 28 02 F1 | 	add	local06, fp
1a8f4     14 27 02 FB | 	rdlong	local05, local06
1a8f8     13 15 02 F6 | 	mov	arg02, local05
1a8fc     1C 4E 85 F1 | 	sub	fp, #28
1a900     4C 5E B0 FD | 	call	#__system___string_cmp
1a904     01 FA 55 F2 | 	cmps	result1, #1 wc
1a908     64 00 90 CD |  if_b	jmp	#LR__2206
1a90c     1A 2F 02 F6 | 	mov	local09, local12
1a910     01 2E 06 F1 | 	add	local09, #1
1a914     02 2E 66 F0 | 	shl	local09, #2
1a918     1C 4E 05 F1 | 	add	fp, #28
1a91c     A7 2E 02 F1 | 	add	local09, fp
1a920     17 33 02 FB | 	rdlong	local11, local09
1a924     1A 29 02 F6 | 	mov	local06, local12
1a928     02 28 66 F0 | 	shl	local06, #2
1a92c     A7 28 02 F1 | 	add	local06, fp
1a930     14 27 02 FB | 	rdlong	local05, local06
1a934     1A 2F 02 F6 | 	mov	local09, local12
1a938     17 29 02 F6 | 	mov	local06, local09
1a93c     02 28 66 F0 | 	shl	local06, #2
1a940     A7 1E 02 F6 | 	mov	local01, fp
1a944     A7 28 02 F1 | 	add	local06, fp
1a948     14 33 62 FC | 	wrlong	local11, local06
1a94c     1A 21 02 F6 | 	mov	local02, local12
1a950     01 20 06 F1 | 	add	local02, #1
1a954     10 39 02 F6 | 	mov	local14, local02
1a958     02 38 66 F0 | 	shl	local14, #2
1a95c     A7 3A 02 F6 | 	mov	local15, fp
1a960     A7 38 02 F1 | 	add	local14, fp
1a964     1C 27 62 FC | 	wrlong	local05, local14
1a968     01 32 66 F6 | 	neg	local11, #1
1a96c     1C 4E 85 F1 | 	sub	fp, #28
1a970                 | LR__2206
1a970     01 34 06 F1 | 	add	local12, #1
1a974     48 FF 9F FD | 	jmp	#LR__2205
1a978                 | LR__2207
1a978                 | ' if not swapped then exit for
1a978     19 3D 22 F6 | 	not	local16, local11
1a97c     00 3C 0E F2 | 	cmp	local16, #0 wz
1a980     01 24 06 A1 |  if_e	add	local04, #1
1a984     1C FF 9F AD |  if_e	jmp	#LR__2204
1a988                 | LR__2208
1a988                 | ' for i=0 to n-1
1a988     00 24 06 F6 | 	mov	local04, #0
1a98c     16 3F 02 F6 | 	mov	local17, local08
1a990                 | LR__2209
1a990     1F 25 52 F2 | 	cmps	local04, local17 wc
1a994     94 00 90 3D |  if_ae	jmp	#LR__2211
1a998                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1a998     00 12 06 F6 | 	mov	arg01, #0
1a99c     C8 B7 B0 FD | 	call	#__system___getiolock_0540
1a9a0     FD 12 02 F6 | 	mov	arg01, result1
1a9a4     80 5D B0 FD | 	call	#__system___lockmem
1a9a8     12 21 02 F6 | 	mov	local02, local04
1a9ac     02 20 66 F0 | 	shl	local02, #2
1a9b0     1C 4E 05 F1 | 	add	fp, #28
1a9b4     A7 38 02 F6 | 	mov	local14, fp
1a9b8     A7 20 02 F1 | 	add	local02, fp
1a9bc     10 15 02 FB | 	rdlong	arg02, local02
1a9c0     00 1E 06 F6 | 	mov	local01, #0
1a9c4     00 12 06 F6 | 	mov	arg01, #0
1a9c8     00 16 06 F6 | 	mov	arg03, #0
1a9cc     1C 4E 85 F1 | 	sub	fp, #28
1a9d0     48 6A B0 FD | 	call	#__system___basic_print_string
1a9d4     00 12 06 F6 | 	mov	arg01, #0
1a9d8     8C B7 B0 FD | 	call	#__system___getiolock_0540
1a9dc     FD 00 68 FC | 	wrlong	#0, result1
1a9e0     40 22 06 F1 | 	add	local03, #64
1a9e4     11 13 02 F6 | 	mov	arg01, local03
1a9e8     C0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a9ec     00 23 56 F2 | 	cmps	local03, #256 wc
1a9f0     30 00 90 CD |  if_b	jmp	#LR__2210
1a9f4     00 22 06 F6 | 	mov	local03, #0
1a9f8     00 12 06 F6 | 	mov	arg01, #0
1a9fc     68 B7 B0 FD | 	call	#__system___getiolock_0540
1aa00     FD 12 02 F6 | 	mov	arg01, result1
1aa04     20 5D B0 FD | 	call	#__system___lockmem
1aa08     00 12 06 F6 | 	mov	arg01, #0
1aa0c     0A 14 06 F6 | 	mov	arg02, #10
1aa10     00 16 06 F6 | 	mov	arg03, #0
1aa14     AC 69 B0 FD | 	call	#__system___basic_print_char
1aa18     00 12 06 F6 | 	mov	arg01, #0
1aa1c     48 B7 B0 FD | 	call	#__system___getiolock_0540
1aa20     FD 00 68 FC | 	wrlong	#0, result1
1aa24                 | LR__2210
1aa24     01 24 06 F1 | 	add	local04, #1
1aa28     64 FF 9F FD | 	jmp	#LR__2209
1aa2c                 | LR__2211
1aa2c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1aa2c     80 2C 56 F2 | 	cmps	local08, #128 wc
1aa30     44 00 90 CD |  if_b	jmp	#LR__2212
1aa34     00 12 06 F6 | 	mov	arg01, #0
1aa38     2C B7 B0 FD | 	call	#__system___getiolock_0540
1aa3c     FD 12 02 F6 | 	mov	arg01, result1
1aa40     E4 5C B0 FD | 	call	#__system___lockmem
1aa44     84 01 00 FF 
1aa48     1C 14 06 F6 | 	mov	arg02, ##@LR__5497
1aa4c     00 12 06 F6 | 	mov	arg01, #0
1aa50     00 16 06 F6 | 	mov	arg03, #0
1aa54     C4 69 B0 FD | 	call	#__system___basic_print_string
1aa58     00 12 06 F6 | 	mov	arg01, #0
1aa5c     0A 14 06 F6 | 	mov	arg02, #10
1aa60     00 16 06 F6 | 	mov	arg03, #0
1aa64     5C 69 B0 FD | 	call	#__system___basic_print_char
1aa68     00 12 06 F6 | 	mov	arg01, #0
1aa6c     F8 B6 B0 FD | 	call	#__system___getiolock_0540
1aa70     FD 00 68 FC | 	wrlong	#0, result1
1aa74     00 1E 06 F6 | 	mov	local01, #0
1aa78                 | LR__2212
1aa78                 | ' print
1aa78     00 12 06 F6 | 	mov	arg01, #0
1aa7c     E8 B6 B0 FD | 	call	#__system___getiolock_0540
1aa80     FD 12 02 F6 | 	mov	arg01, result1
1aa84     A0 5C B0 FD | 	call	#__system___lockmem
1aa88     00 12 06 F6 | 	mov	arg01, #0
1aa8c     0A 14 06 F6 | 	mov	arg02, #10
1aa90     00 16 06 F6 | 	mov	arg03, #0
1aa94     2C 69 B0 FD | 	call	#__system___basic_print_char
1aa98     00 12 06 F6 | 	mov	arg01, #0
1aa9c     C8 B6 B0 FD | 	call	#__system___getiolock_0540
1aaa0     FD 00 68 FC | 	wrlong	#0, result1
1aaa4     00 28 06 F6 | 	mov	local06, #0
1aaa8     00 2C 06 F6 | 	mov	local08, #0
1aaac     00 22 06 F6 | 	mov	local03, #0
1aab0                 | ' return cursor_y
1aab0     3E E4 05 F1 | 	add	objptr, #62
1aab4     F2 40 C2 FA | 	rdbyte	local18, objptr
1aab8     3E E4 85 F1 | 	sub	objptr, #62
1aabc     84 01 00 FF 
1aac0     4E 12 06 F6 | 	mov	arg01, ##@LR__5498
1aac4     21 14 06 F6 | 	mov	arg02, #33
1aac8     D4 B7 B0 FD | 	call	#__system___basic_dir
1aacc     FD 2A 02 F6 | 	mov	local07, result1
1aad0                 | ' n=0
1aad0                 | ' 
1aad0                 | ' px=0: py=v.getcursory()
1aad0                 | ' 
1aad0                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1aad0                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1aad0                 | LR__2213
1aad0     84 01 00 FF 
1aad4     50 2E 06 F6 | 	mov	local09, ##@LR__5499
1aad8     15 13 02 F6 | 	mov	arg01, local07
1aadc     17 15 02 F6 | 	mov	arg02, local09
1aae0     6C 5C B0 FD | 	call	#__system___string_cmp
1aae4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aae8     54 00 90 AD |  if_e	jmp	#LR__2214
1aaec     00 2E 06 F6 | 	mov	local09, #0
1aaf0     15 13 02 F6 | 	mov	arg01, local07
1aaf4     00 14 06 F6 | 	mov	arg02, #0
1aaf8     54 5C B0 FD | 	call	#__system___string_cmp
1aafc     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab00     3C 00 90 AD |  if_e	jmp	#LR__2214
1ab04     80 2C 56 F2 | 	cmps	local08, #128 wc
1ab08     34 00 90 3D |  if_ae	jmp	#LR__2214
1ab0c     16 27 02 F6 | 	mov	local05, local08
1ab10     02 26 66 F0 | 	shl	local05, #2
1ab14     1C 4E 05 F1 | 	add	fp, #28
1ab18     A7 26 02 F1 | 	add	local05, fp
1ab1c     13 2B 62 FC | 	wrlong	local07, local05
1ab20     01 2C 06 F1 | 	add	local08, #1
1ab24     00 26 06 F6 | 	mov	local05, #0
1ab28     00 12 06 F6 | 	mov	arg01, #0
1ab2c     00 14 06 F6 | 	mov	arg02, #0
1ab30     1C 4E 85 F1 | 	sub	fp, #28
1ab34     68 B7 B0 FD | 	call	#__system___basic_dir
1ab38     FD 2A 02 F6 | 	mov	local07, result1
1ab3c     90 FF 9F FD | 	jmp	#LR__2213
1ab40                 | LR__2214
1ab40                 | ' 
1ab40                 | ' for i =0 to n-1
1ab40     00 24 06 F6 | 	mov	local04, #0
1ab44                 | LR__2215
1ab44     16 25 52 F2 | 	cmps	local04, local08 wc
1ab48     D8 00 90 3D |  if_ae	jmp	#LR__2219
1ab4c     00 32 06 F6 | 	mov	local11, #0
1ab50                 | '   swapped=false
1ab50                 | '   for j=0 to n-i-2
1ab50     00 34 06 F6 | 	mov	local12, #0
1ab54     16 43 02 F6 | 	mov	local19, local08
1ab58     12 43 82 F1 | 	sub	local19, local04
1ab5c     01 42 86 F1 | 	sub	local19, #1
1ab60                 | LR__2216
1ab60     21 35 52 F2 | 	cmps	local12, local19 wc
1ab64     AC 00 90 3D |  if_ae	jmp	#LR__2218
1ab68                 | '     if filelist(j) > filelist(j+1) then
1ab68     1A 2F 02 F6 | 	mov	local09, local12
1ab6c     02 2E 66 F0 | 	shl	local09, #2
1ab70     1C 4E 05 F1 | 	add	fp, #28
1ab74     A7 2E 02 F1 | 	add	local09, fp
1ab78     17 13 02 FB | 	rdlong	arg01, local09
1ab7c     1A 2F 02 F6 | 	mov	local09, local12
1ab80     01 2E 06 F1 | 	add	local09, #1
1ab84     17 29 02 F6 | 	mov	local06, local09
1ab88     02 28 66 F0 | 	shl	local06, #2
1ab8c     A7 1E 02 F6 | 	mov	local01, fp
1ab90     A7 28 02 F1 | 	add	local06, fp
1ab94     14 27 02 FB | 	rdlong	local05, local06
1ab98     13 15 02 F6 | 	mov	arg02, local05
1ab9c     1C 4E 85 F1 | 	sub	fp, #28
1aba0     AC 5B B0 FD | 	call	#__system___string_cmp
1aba4     01 FA 55 F2 | 	cmps	result1, #1 wc
1aba8     60 00 90 CD |  if_b	jmp	#LR__2217
1abac     1A 2F 02 F6 | 	mov	local09, local12
1abb0     01 2E 06 F1 | 	add	local09, #1
1abb4     02 2E 66 F0 | 	shl	local09, #2
1abb8     1C 4E 05 F1 | 	add	fp, #28
1abbc     A7 2E 02 F1 | 	add	local09, fp
1abc0     17 3D 02 FB | 	rdlong	local16, local09
1abc4     1A 29 02 F6 | 	mov	local06, local12
1abc8     02 28 66 F0 | 	shl	local06, #2
1abcc     A7 28 02 F1 | 	add	local06, fp
1abd0     14 27 02 FB | 	rdlong	local05, local06
1abd4     1A 2F 02 F6 | 	mov	local09, local12
1abd8     17 29 02 F6 | 	mov	local06, local09
1abdc     02 28 66 F0 | 	shl	local06, #2
1abe0     A7 1E 02 F6 | 	mov	local01, fp
1abe4     A7 28 02 F1 | 	add	local06, fp
1abe8     14 3D 62 FC | 	wrlong	local16, local06
1abec     1A 39 02 F6 | 	mov	local14, local12
1abf0     01 38 06 F1 | 	add	local14, #1
1abf4     02 38 66 F0 | 	shl	local14, #2
1abf8     A7 3A 02 F6 | 	mov	local15, fp
1abfc     A7 38 02 F1 | 	add	local14, fp
1ac00     1C 27 62 FC | 	wrlong	local05, local14
1ac04     01 32 66 F6 | 	neg	local11, #1
1ac08     1C 4E 85 F1 | 	sub	fp, #28
1ac0c                 | LR__2217
1ac0c     01 34 06 F1 | 	add	local12, #1
1ac10     4C FF 9F FD | 	jmp	#LR__2216
1ac14                 | LR__2218
1ac14                 | ' if not swapped then exit for
1ac14     19 3D 22 F6 | 	not	local16, local11
1ac18     00 3C 0E F2 | 	cmp	local16, #0 wz
1ac1c     01 24 06 A1 |  if_e	add	local04, #1
1ac20     20 FF 9F AD |  if_e	jmp	#LR__2215
1ac24                 | LR__2219
1ac24                 | ' for i=0 to n-1
1ac24     00 24 06 F6 | 	mov	local04, #0
1ac28                 | LR__2220
1ac28     16 25 52 F2 | 	cmps	local04, local08 wc
1ac2c     8C 00 90 3D |  if_ae	jmp	#LR__2222
1ac30                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ac30     00 12 06 F6 | 	mov	arg01, #0
1ac34     30 B5 B0 FD | 	call	#__system___getiolock_0540
1ac38     FD 12 02 F6 | 	mov	arg01, result1
1ac3c     E8 5A B0 FD | 	call	#__system___lockmem
1ac40     12 21 02 F6 | 	mov	local02, local04
1ac44     02 20 66 F0 | 	shl	local02, #2
1ac48     1C 4E 05 F1 | 	add	fp, #28
1ac4c     A7 20 02 F1 | 	add	local02, fp
1ac50     10 15 02 FB | 	rdlong	arg02, local02
1ac54     00 12 06 F6 | 	mov	arg01, #0
1ac58     00 16 06 F6 | 	mov	arg03, #0
1ac5c     1C 4E 85 F1 | 	sub	fp, #28
1ac60     B8 67 B0 FD | 	call	#__system___basic_print_string
1ac64     00 12 06 F6 | 	mov	arg01, #0
1ac68     FC B4 B0 FD | 	call	#__system___getiolock_0540
1ac6c     FD 00 68 FC | 	wrlong	#0, result1
1ac70     40 22 06 F1 | 	add	local03, #64
1ac74     11 13 02 F6 | 	mov	arg01, local03
1ac78     30 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ac7c     00 23 56 F2 | 	cmps	local03, #256 wc
1ac80     30 00 90 CD |  if_b	jmp	#LR__2221
1ac84     00 22 06 F6 | 	mov	local03, #0
1ac88     00 12 06 F6 | 	mov	arg01, #0
1ac8c     D8 B4 B0 FD | 	call	#__system___getiolock_0540
1ac90     FD 12 02 F6 | 	mov	arg01, result1
1ac94     90 5A B0 FD | 	call	#__system___lockmem
1ac98     00 12 06 F6 | 	mov	arg01, #0
1ac9c     0A 14 06 F6 | 	mov	arg02, #10
1aca0     00 16 06 F6 | 	mov	arg03, #0
1aca4     1C 67 B0 FD | 	call	#__system___basic_print_char
1aca8     00 12 06 F6 | 	mov	arg01, #0
1acac     B8 B4 B0 FD | 	call	#__system___getiolock_0540
1acb0     FD 00 68 FC | 	wrlong	#0, result1
1acb4                 | LR__2221
1acb4     01 24 06 F1 | 	add	local04, #1
1acb8     6C FF 9F FD | 	jmp	#LR__2220
1acbc                 | LR__2222
1acbc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1acbc     80 2C 56 F2 | 	cmps	local08, #128 wc
1acc0     40 00 90 CD |  if_b	jmp	#LR__2223
1acc4     00 12 06 F6 | 	mov	arg01, #0
1acc8     9C B4 B0 FD | 	call	#__system___getiolock_0540
1accc     FD 12 02 F6 | 	mov	arg01, result1
1acd0     54 5A B0 FD | 	call	#__system___lockmem
1acd4     84 01 00 FF 
1acd8     51 14 06 F6 | 	mov	arg02, ##@LR__5500
1acdc     00 12 06 F6 | 	mov	arg01, #0
1ace0     00 16 06 F6 | 	mov	arg03, #0
1ace4     34 67 B0 FD | 	call	#__system___basic_print_string
1ace8     00 12 06 F6 | 	mov	arg01, #0
1acec     0A 14 06 F6 | 	mov	arg02, #10
1acf0     00 16 06 F6 | 	mov	arg03, #0
1acf4     CC 66 B0 FD | 	call	#__system___basic_print_char
1acf8     00 12 06 F6 | 	mov	arg01, #0
1acfc     68 B4 B0 FD | 	call	#__system___getiolock_0540
1ad00     FD 00 68 FC | 	wrlong	#0, result1
1ad04                 | LR__2223
1ad04                 | ' print
1ad04     00 12 06 F6 | 	mov	arg01, #0
1ad08     5C B4 B0 FD | 	call	#__system___getiolock_0540
1ad0c     FD 12 02 F6 | 	mov	arg01, result1
1ad10     14 5A B0 FD | 	call	#__system___lockmem
1ad14     00 12 06 F6 | 	mov	arg01, #0
1ad18     0A 14 06 F6 | 	mov	arg02, #10
1ad1c     00 16 06 F6 | 	mov	arg03, #0
1ad20     A0 66 B0 FD | 	call	#__system___basic_print_char
1ad24     00 12 06 F6 | 	mov	arg01, #0
1ad28     3C B4 B0 FD | 	call	#__system___getiolock_0540
1ad2c     FD 00 68 FC | 	wrlong	#0, result1
1ad30     A7 F0 03 F6 | 	mov	ptra, fp
1ad34     B2 00 A0 FD | 	call	#popregs_
1ad38                 | _do_dir_ret
1ad38     2D 00 64 FD | 	ret
1ad3c                 | 
1ad3c                 | ' 
1ad3c                 | ' sub do_if
1ad3c                 | _do_if
1ad3c     05 4A 05 F6 | 	mov	COUNT_, #5
1ad40     A8 00 A0 FD | 	call	#pushregs_
1ad44     5C 0C BF FD | 	call	#_pop
1ad48     FD 1E 0A F6 | 	mov	local01, result1 wz
1ad4c     FE 20 02 F6 | 	mov	local02, result2
1ad50     FF 22 02 F6 | 	mov	local03, result3
1ad54                 | ' t1=pop()
1ad54                 | ' ' if uresult=0, jump over else
1ad54                 | ' if t1.result.uresult = 0 then 
1ad54     BC 00 90 5D |  if_ne	jmp	#LR__2232
1ad58                 | '   for i=lineptr_e to lineptr-1
1ad58     4A 00 00 FF 
1ad5c     80 E4 05 F1 | 	add	objptr, ##38016
1ad60     F2 24 02 FB | 	rdlong	local04, objptr
1ad64     04 E4 85 F1 | 	sub	objptr, #4
1ad68     F2 26 02 FB | 	rdlong	local05, objptr
1ad6c     4A 00 00 FF 
1ad70     7C E4 85 F1 | 	sub	objptr, ##38012
1ad74                 | LR__2230
1ad74     13 25 52 F2 | 	cmps	local04, local05 wc
1ad78     78 00 90 3D |  if_ae	jmp	#LR__2231
1ad7c     12 FF 01 F6 | 	mov	result3, local04
1ad80     01 FE 65 F0 | 	shl	result3, #1
1ad84     12 FF 01 F1 | 	add	result3, local04
1ad88     02 FE 65 F0 | 	shl	result3, #2
1ad8c     47 00 00 FF 
1ad90     7C E4 05 F1 | 	add	objptr, ##36476
1ad94     F2 FE 01 F1 | 	add	result3, objptr
1ad98     FF 1E 02 FB | 	rdlong	local01, result3
1ad9c     04 FE 05 F1 | 	add	result3, #4
1ada0     FF FC 01 FB | 	rdlong	result2, result3
1ada4     12 FF 01 F6 | 	mov	result3, local04
1ada8     01 FE 65 F0 | 	shl	result3, #1
1adac     12 FF 01 F1 | 	add	result3, local04
1adb0     02 FE 65 F0 | 	shl	result3, #2
1adb4     F2 FE 01 F1 | 	add	result3, objptr
1adb8     08 FE 05 F1 | 	add	result3, #8
1adbc     FF FE 01 FB | 	rdlong	result3, result3
1adc0     FE 20 02 F6 | 	mov	local02, result2
1adc4     FF 22 02 F6 | 	mov	local03, result3
1adc8                 | '     t1=compiledline(i)
1adc8                 | '     if t1.result_type=token_else then lineptr_e=i : return
1adc8     5A 22 0E F2 | 	cmp	local03, #90 wz
1adcc     47 00 00 FF 
1add0     7C E4 85 F1 | 	sub	objptr, ##36476
1add4     4A 00 00 AF 
1add8     80 E4 05 A1 |  if_e	add	objptr, ##38016
1addc     F2 24 62 AC |  if_e	wrlong	local04, objptr
1ade0     4A 00 00 AF 
1ade4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1ade8     28 00 90 AD |  if_e	jmp	#LR__2233
1adec     01 24 06 F1 | 	add	local04, #1
1adf0     80 FF 9F FD | 	jmp	#LR__2230
1adf4                 | LR__2231
1adf4     4A 00 00 FF 
1adf8     7C E4 05 F1 | 	add	objptr, ##38012
1adfc     F2 26 02 FB | 	rdlong	local05, objptr
1ae00     01 26 86 F1 | 	sub	local05, #1
1ae04     04 E4 05 F1 | 	add	objptr, #4
1ae08     F2 26 62 FC | 	wrlong	local05, objptr
1ae0c     4A 00 00 FF 
1ae10     80 E4 85 F1 | 	sub	objptr, ##38016
1ae14                 | LR__2232
1ae14                 | LR__2233
1ae14     A7 F0 03 F6 | 	mov	ptra, fp
1ae18     B2 00 A0 FD | 	call	#popregs_
1ae1c                 | _do_if_ret
1ae1c     2D 00 64 FD | 	ret
1ae20                 | 
1ae20                 | ' 
1ae20                 | ' sub do_else
1ae20                 | _do_else
1ae20     4A 00 00 FF 
1ae24     7C E4 05 F1 | 	add	objptr, ##38012
1ae28     F2 00 02 FB | 	rdlong	_var01, objptr
1ae2c     01 00 86 F1 | 	sub	_var01, #1
1ae30     04 E4 05 F1 | 	add	objptr, #4
1ae34     F2 00 62 FC | 	wrlong	_var01, objptr
1ae38     4A 00 00 FF 
1ae3c     80 E4 85 F1 | 	sub	objptr, ##38016
1ae40                 | _do_else_ret
1ae40     2D 00 64 FD | 	ret
1ae44                 | 
1ae44                 | ' 
1ae44                 | ' sub do_rad
1ae44                 | _do_rad
1ae44     51 00 00 FF 
1ae48     B8 E5 05 F1 | 	add	objptr, ##41912
1ae4c     00 C0 9F FF 
1ae50     F2 00 68 FC | 	wrlong	##1065353216, objptr
1ae54     04 E4 05 F1 | 	add	objptr, #4
1ae58     00 C0 9F FF 
1ae5c     F2 00 68 FC | 	wrlong	##1065353216, objptr
1ae60     51 00 00 FF 
1ae64     BC E5 85 F1 | 	sub	objptr, ##41916
1ae68                 | _do_rad_ret
1ae68     2D 00 64 FD | 	ret
1ae6c                 | 
1ae6c                 | ' 
1ae6c                 | ' sub do_deg
1ae6c                 | _do_deg
1ae6c     51 00 00 FF 
1ae70     B8 E5 05 F1 | 	add	objptr, ##41912
1ae74     7D 47 9E FF 
1ae78     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1ae7c     04 E4 05 F1 | 	add	objptr, #4
1ae80     97 32 A1 FF 
1ae84     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1ae88     51 00 00 FF 
1ae8c     BC E5 85 F1 | 	sub	objptr, ##41916
1ae90                 | _do_deg_ret
1ae90     2D 00 64 FD | 	ret
1ae94                 | 
1ae94                 | ' 
1ae94                 | ' sub do_round
1ae94                 | _do_round
1ae94     00 4A 05 F6 | 	mov	COUNT_, #0
1ae98     A8 00 A0 FD | 	call	#pushregs_
1ae9c     0C F0 07 F1 | 	add	ptra, #12
1aea0     00 0B BF FD | 	call	#_pop
1aea4     A7 FA 61 FC | 	wrlong	result1, fp
1aea8     04 4E 05 F1 | 	add	fp, #4
1aeac     A7 FC 61 FC | 	wrlong	result2, fp
1aeb0     04 4E 05 F1 | 	add	fp, #4
1aeb4     A7 FE 61 FC | 	wrlong	result3, fp
1aeb8     08 4E 85 F1 | 	sub	fp, #8
1aebc     A7 12 02 F6 | 	mov	arg01, fp
1aec0     A4 AB BF FD | 	call	#_converttoint
1aec4     A7 FA 61 FC | 	wrlong	result1, fp
1aec8     08 4E 05 F1 | 	add	fp, #8
1aecc     A7 38 68 FC | 	wrlong	#28, fp
1aed0     08 4E 85 F1 | 	sub	fp, #8
1aed4     A7 12 02 F6 | 	mov	arg01, fp
1aed8     60 0B BF FD | 	call	#_push
1aedc     A7 F0 03 F6 | 	mov	ptra, fp
1aee0     B2 00 A0 FD | 	call	#popregs_
1aee4                 | _do_round_ret
1aee4     2D 00 64 FD | 	ret
1aee8                 | 
1aee8                 | ' 
1aee8                 | ' sub do_int
1aee8                 | _do_int
1aee8     02 4A 05 F6 | 	mov	COUNT_, #2
1aeec     A8 00 A0 FD | 	call	#pushregs_
1aef0     10 F0 07 F1 | 	add	ptra, #16
1aef4     AC 0A BF FD | 	call	#_pop
1aef8     FE 1E 02 F6 | 	mov	local01, result2
1aefc     FF 20 02 F6 | 	mov	local02, result3
1af00     A7 FA 61 FC | 	wrlong	result1, fp
1af04     04 4E 05 F1 | 	add	fp, #4
1af08     A7 1E 62 FC | 	wrlong	local01, fp
1af0c     04 4E 05 F1 | 	add	fp, #4
1af10     A7 20 62 FC | 	wrlong	local02, fp
1af14                 | ' 
1af14                 | ' t1=pop()
1af14                 | ' select case t1.result_type
1af14     08 4E 85 F1 | 	sub	fp, #8
1af18     1E 20 0E F2 | 	cmp	local02, #30 wz
1af1c     14 00 90 AD |  if_e	jmp	#LR__2240
1af20     1F 20 0E F2 | 	cmp	local02, #31 wz
1af24     20 00 90 AD |  if_e	jmp	#LR__2241
1af28     2B 20 0E F2 | 	cmp	local02, #43 wz
1af2c     34 00 90 AD |  if_e	jmp	#LR__2242
1af30     50 00 90 FD | 	jmp	#LR__2243
1af34                 | LR__2240
1af34     A7 12 02 FB | 	rdlong	arg01, fp
1af38     00 14 06 F6 | 	mov	arg02, #0
1af3c     64 88 B0 FD | 	call	#__system___float_tointeger
1af40     A7 FA 61 FC | 	wrlong	result1, fp
1af44     3C 00 90 FD | 	jmp	#LR__2243
1af48                 | LR__2241
1af48     A7 12 02 FB | 	rdlong	arg01, fp
1af4c     74 8B B0 FD | 	call	#__system____builtin_atof
1af50     FD 12 02 F6 | 	mov	arg01, result1
1af54     00 14 06 F6 | 	mov	arg02, #0
1af58     48 88 B0 FD | 	call	#__system___float_tointeger
1af5c     A7 FA 61 FC | 	wrlong	result1, fp
1af60     20 00 90 FD | 	jmp	#LR__2243
1af64                 | LR__2242
1af64     A7 12 02 FB | 	rdlong	arg01, fp
1af68     D8 62 BF FD | 	call	#_convertstring
1af6c     FD 12 02 F6 | 	mov	arg01, result1
1af70     50 8B B0 FD | 	call	#__system____builtin_atof
1af74     FD 12 02 F6 | 	mov	arg01, result1
1af78     00 14 06 F6 | 	mov	arg02, #0
1af7c     24 88 B0 FD | 	call	#__system___float_tointeger
1af80     A7 FA 61 FC | 	wrlong	result1, fp
1af84                 | LR__2243
1af84     08 4E 05 F1 | 	add	fp, #8
1af88     A7 38 68 FC | 	wrlong	#28, fp
1af8c     08 4E 85 F1 | 	sub	fp, #8
1af90     A7 12 02 F6 | 	mov	arg01, fp
1af94     A4 0A BF FD | 	call	#_push
1af98     A7 F0 03 F6 | 	mov	ptra, fp
1af9c     B2 00 A0 FD | 	call	#popregs_
1afa0                 | _do_int_ret
1afa0     2D 00 64 FD | 	ret
1afa4                 | 
1afa4                 | ' 
1afa4                 | ' 
1afa4                 | ' sub do_nothing
1afa4                 | _do_nothing
1afa4                 | _do_nothing_ret
1afa4     2D 00 64 FD | 	ret
1afa8                 | 
1afa8                 | ' 
1afa8                 | ' sub do_brun
1afa8                 | _do_brun
1afa8     08 4A 05 F6 | 	mov	COUNT_, #8
1afac     A8 00 A0 FD | 	call	#pushregs_
1afb0     F0 09 BF FD | 	call	#_pop
1afb4     FE 1A 02 F6 | 	mov	arg05, result2
1afb8     FF 18 02 F6 | 	mov	arg04, result3
1afbc     FD 1E 02 F6 | 	mov	local01, result1
1afc0     0D 21 02 F6 | 	mov	local02, arg05
1afc4     0C 23 02 F6 | 	mov	local03, arg04
1afc8                 | ' 
1afc8                 | ' t1=pop() 
1afc8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1afc8     2B 22 0E F2 | 	cmp	local03, #43 wz
1afcc     10 00 90 5D |  if_ne	jmp	#LR__2250
1afd0     0F 13 02 F6 | 	mov	arg01, local01
1afd4     6C 62 BF FD | 	call	#_convertstring
1afd8     FD 1E 02 F6 | 	mov	local01, result1
1afdc     1F 22 06 F6 | 	mov	local03, #31
1afe0                 | LR__2250
1afe0                 | ' if t1.result_type=result_string then
1afe0     1F 22 0E F2 | 	cmp	local03, #31 wz
1afe4     EC 01 90 5D |  if_ne	jmp	#LR__2254
1afe8     0F 25 02 F6 | 	mov	local04, local01
1afec                 | '   filename=t1.result.sresult
1afec                 | '   if left$(filename,1)="/" then 
1afec     12 13 02 F6 | 	mov	arg01, local04
1aff0     01 14 06 F6 | 	mov	arg02, #1
1aff4     AC 77 B0 FD | 	call	#__system__Left_S
1aff8     FD 12 02 F6 | 	mov	arg01, result1
1affc     84 01 00 FF 
1b000     83 14 06 F6 | 	mov	arg02, ##@LR__5501
1b004     48 57 B0 FD | 	call	#__system___string_cmp
1b008     00 FA 0D F2 | 	cmp	result1, #0 wz
1b00c     12 27 02 A6 |  if_e	mov	local05, local04
1b010     14 00 90 AD |  if_e	jmp	#LR__2251
1b014     84 01 00 FF 
1b018     85 12 06 F6 | 	mov	arg01, ##@LR__5502
1b01c     12 15 02 F6 | 	mov	arg02, local04
1b020     60 57 B0 FD | 	call	#__system___string_concat
1b024     FD 26 02 F6 | 	mov	local05, result1
1b028                 | LR__2251
1b028                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b028                 | '   open fullfilename for input as #9
1b028     09 12 06 F6 | 	mov	arg01, #9
1b02c     13 15 02 F6 | 	mov	arg02, local05
1b030     00 16 06 F6 | 	mov	arg03, #0
1b034     F4 62 B0 FD | 	call	#__system___basic_open_string
1b038     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b03c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b040     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b044     FD 28 0A F6 | 	mov	local06, result1 wz
1b048                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b048     8C 00 90 AD |  if_e	jmp	#LR__2252
1b04c     00 12 06 F6 | 	mov	arg01, #0
1b050     14 B1 B0 FD | 	call	#__system___getiolock_0540
1b054     FD 12 02 F6 | 	mov	arg01, result1
1b058     CC 56 B0 FD | 	call	#__system___lockmem
1b05c     84 01 00 FF 
1b060     8E 14 06 F6 | 	mov	arg02, ##@LR__5503
1b064     00 12 06 F6 | 	mov	arg01, #0
1b068     00 16 06 F6 | 	mov	arg03, #0
1b06c     AC 63 B0 FD | 	call	#__system___basic_print_string
1b070     00 12 06 F6 | 	mov	arg01, #0
1b074     14 15 02 F6 | 	mov	arg02, local06
1b078     00 16 06 F6 | 	mov	arg03, #0
1b07c     0A 18 06 F6 | 	mov	arg04, #10
1b080     DC 63 B0 FD | 	call	#__system___basic_print_integer
1b084     84 01 00 FF 
1b088     9C 14 06 F6 | 	mov	arg02, ##@LR__5504
1b08c     00 12 06 F6 | 	mov	arg01, #0
1b090     00 16 06 F6 | 	mov	arg03, #0
1b094     84 63 B0 FD | 	call	#__system___basic_print_string
1b098     14 13 02 F6 | 	mov	arg01, local06
1b09c     50 7D B0 FD | 	call	#__system___strerror
1b0a0     FD 14 02 F6 | 	mov	arg02, result1
1b0a4     00 12 06 F6 | 	mov	arg01, #0
1b0a8     00 16 06 F6 | 	mov	arg03, #0
1b0ac     6C 63 B0 FD | 	call	#__system___basic_print_string
1b0b0     00 12 06 F6 | 	mov	arg01, #0
1b0b4     0A 14 06 F6 | 	mov	arg02, #10
1b0b8     00 16 06 F6 | 	mov	arg03, #0
1b0bc     04 63 B0 FD | 	call	#__system___basic_print_char
1b0c0     00 12 06 F6 | 	mov	arg01, #0
1b0c4     A0 B0 B0 FD | 	call	#__system___getiolock_0540
1b0c8     FD 00 68 FC | 	wrlong	#0, result1
1b0cc     09 12 06 F6 | 	mov	arg01, #9
1b0d0     C4 A6 B0 FD | 	call	#__system__close
1b0d4     FC 00 90 FD | 	jmp	#LR__2255
1b0d8                 | LR__2252
1b0d8     01 2A 06 F6 | 	mov	local07, #1
1b0dc     00 2C 06 F6 | 	mov	local08, #0
1b0e0                 | '   do
1b0e0                 | LR__2253
1b0e0                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b0e0     4E 00 00 FF 
1b0e4     B0 E4 05 F1 | 	add	objptr, ##40112
1b0e8     F2 16 02 F6 | 	mov	arg03, objptr
1b0ec     4E 00 00 FF 
1b0f0     B0 E4 85 F1 | 	sub	objptr, ##40112
1b0f4     09 12 06 F6 | 	mov	arg01, #9
1b0f8     15 15 02 F6 | 	mov	arg02, local07
1b0fc     0A 18 C6 F9 | 	decod	arg04, #10
1b100     01 1A 06 F6 | 	mov	arg05, #1
1b104     90 64 B0 FD | 	call	#__system___basic_get
1b108     FD 28 02 F6 | 	mov	local06, result1
1b10c     FD 2A 02 F1 | 	add	local07, result1
1b110     4E 00 00 FF 
1b114     B0 E4 05 F1 | 	add	objptr, ##40112
1b118     F2 12 02 F6 | 	mov	arg01, objptr
1b11c     16 15 02 F6 | 	mov	arg02, local08
1b120     0A 16 C6 F9 | 	decod	arg03, #10
1b124     42 00 00 FF 
1b128     E4 E5 85 F1 | 	sub	objptr, ##34276
1b12c     54 4A B0 FD | 	call	#_psram_spin2_write
1b130     0B 00 00 FF 
1b134     CC E4 85 F1 | 	sub	objptr, ##5836
1b138     14 2D 02 F1 | 	add	local08, local06
1b13c     02 00 00 FF 
1b140     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b144     E0 03 00 AF 
1b148     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b14c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b150     36 00 00 FF 
1b154     FC E5 05 F1 | 	add	objptr, ##28156
1b158     F2 12 02 FB | 	rdlong	arg01, objptr
1b15c     03 12 62 FD | 	cogstop	arg01
1b160     04 E4 05 F1 | 	add	objptr, #4
1b164     F2 12 02 FB | 	rdlong	arg01, objptr
1b168     03 12 62 FD | 	cogstop	arg01
1b16c     04 E4 05 F1 | 	add	objptr, #4
1b170     F2 12 02 FB | 	rdlong	arg01, objptr
1b174     03 12 62 FD | 	cogstop	arg01
1b178     19 00 00 FF 
1b17c     10 E5 05 F1 | 	add	objptr, ##13072
1b180     F2 12 02 FB | 	rdlong	arg01, objptr
1b184     03 12 62 FD | 	cogstop	arg01
1b188     18 00 00 FF 
1b18c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b190     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b194     18 00 00 FF 
1b198     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b19c     19 00 00 FF 
1b1a0     08 E5 85 F1 | 	sub	objptr, ##13064
1b1a4     1E 2C 06 F6 | 	mov	local08, #30
1b1a8     28 E4 61 FD | 	setq	objptr
1b1ac     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b1b0     01 2C 66 C6 |  if_b	neg	local08, #1
1b1b4     1B 00 00 FF 
1b1b8     10 E4 05 F1 | 	add	objptr, ##13840
1b1bc     F2 2C 62 FC | 	wrlong	local08, objptr
1b1c0     52 00 00 FF 
1b1c4     1C E4 85 F1 | 	sub	objptr, ##42012
1b1c8     00 12 06 F6 | 	mov	arg01, #0
1b1cc     01 12 62 FD | 	cogid	arg01
1b1d0     03 12 62 FD | 	cogstop	arg01
1b1d4                 | LR__2254
1b1d4                 | LR__2255
1b1d4     A7 F0 03 F6 | 	mov	ptra, fp
1b1d8     B2 00 A0 FD | 	call	#popregs_
1b1dc                 | _do_brun_ret
1b1dc     2D 00 64 FD | 	ret
1b1e0                 | 
1b1e0                 | ' 
1b1e0                 | ' 
1b1e0                 | ' sub do_mouse
1b1e0                 | _do_mouse
1b1e0     C0 07 BF FD | 	call	#_pop
1b1e4     00 FA 4D F2 | 	cmps	result1, #0 wz
1b1e8                 | ' t1=pop()
1b1e8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b1e8     14 00 90 5D |  if_ne	jmp	#LR__2260
1b1ec     10 12 06 F6 | 	mov	arg01, #16
1b1f0     00 14 06 F6 | 	mov	arg02, #0
1b1f4     00 16 06 F6 | 	mov	arg03, #0
1b1f8     64 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b1fc     10 00 90 FD | 	jmp	#LR__2261
1b200                 | LR__2260
1b200     10 12 06 F6 | 	mov	arg01, #16
1b204     20 14 06 F6 | 	mov	arg02, #32
1b208     20 16 06 F6 | 	mov	arg03, #32
1b20c     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b210                 | LR__2261
1b210                 | _do_mouse_ret
1b210     2D 00 64 FD | 	ret
1b214                 | 
1b214                 | ' 
1b214                 | ' sub do_cursor
1b214                 | _do_cursor
1b214     8C 07 BF FD | 	call	#_pop
1b218     00 FA 4D F2 | 	cmps	result1, #0 wz
1b21c                 | ' t1=pop()
1b21c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b21c     14 00 90 5D |  if_ne	jmp	#LR__2270
1b220     11 12 06 F6 | 	mov	arg01, #17
1b224     00 14 06 F6 | 	mov	arg02, #0
1b228     00 16 06 F6 | 	mov	arg03, #0
1b22c     30 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b230     10 00 90 FD | 	jmp	#LR__2271
1b234                 | LR__2270
1b234     11 12 06 F6 | 	mov	arg01, #17
1b238     08 14 06 F6 | 	mov	arg02, #8
1b23c     10 16 06 F6 | 	mov	arg03, #16
1b240     1C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b244                 | LR__2271
1b244                 | _do_cursor_ret
1b244     2D 00 64 FD | 	ret
1b248                 | 
1b248                 | ' 
1b248                 | ' 
1b248                 | ' sub do_click
1b248                 | _do_click
1b248     58 07 BF FD | 	call	#_pop
1b24c     00 FA 4D F2 | 	cmps	result1, #0 wz
1b250                 | ' t1=pop()
1b250                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b250     50 00 00 AF 
1b254     10 E5 05 A1 |  if_e	add	objptr, ##41232
1b258     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b25c     50 00 00 FF 
1b260     10 E5 C5 F3 | 	sumz	objptr, ##41232
1b264     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b268     50 00 00 5F 
1b26c     10 E5 85 51 |  if_ne	sub	objptr, ##41232
1b270                 | _do_click_ret
1b270     2D 00 64 FD | 	ret
1b274                 | 
1b274                 | ' 
1b274                 | ' 
1b274                 | ' sub do_beep
1b274                 | _do_beep
1b274     02 4A 05 F6 | 	mov	COUNT_, #2
1b278     A8 00 A0 FD | 	call	#pushregs_
1b27c     20 F0 07 F1 | 	add	ptra, #32
1b280     20 07 BF FD | 	call	#_pop
1b284     FD 1E 02 F6 | 	mov	local01, result1
1b288     FE 1C 02 F6 | 	mov	arg06, result2
1b28c     FF 20 02 F6 | 	mov	local02, result3
1b290     0C 4E 05 F1 | 	add	fp, #12
1b294     A7 1E 62 FC | 	wrlong	local01, fp
1b298     04 4E 05 F1 | 	add	fp, #4
1b29c     A7 1C 62 FC | 	wrlong	arg06, fp
1b2a0     04 4E 05 F1 | 	add	fp, #4
1b2a4     A7 20 62 FC | 	wrlong	local02, fp
1b2a8     14 4E 85 F1 | 	sub	fp, #20
1b2ac     F4 06 BF FD | 	call	#_pop
1b2b0     A7 FA 61 FC | 	wrlong	result1, fp
1b2b4     04 4E 05 F1 | 	add	fp, #4
1b2b8     A7 FC 61 FC | 	wrlong	result2, fp
1b2bc     04 4E 05 F1 | 	add	fp, #4
1b2c0     A7 FE 61 FC | 	wrlong	result3, fp
1b2c4                 | ' 
1b2c4                 | ' t2=pop()
1b2c4                 | ' t1=pop()
1b2c4                 | ' 
1b2c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b2c4     08 4E 85 F1 | 	sub	fp, #8
1b2c8     1C FE 0D F2 | 	cmp	result3, #28 wz
1b2cc     08 4E 05 51 |  if_ne	add	fp, #8
1b2d0     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b2d4     08 4E 85 51 |  if_ne	sub	fp, #8
1b2d8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b2dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b2e0     18 4E 05 A1 |  if_e	add	fp, #24
1b2e4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b2e8     18 4E 85 A1 |  if_e	sub	fp, #24
1b2ec     14 00 90 AD |  if_e	jmp	#LR__2280
1b2f0     A7 12 02 F6 | 	mov	arg01, fp
1b2f4     70 A7 BF FD | 	call	#_converttoint
1b2f8     18 4E 05 F1 | 	add	fp, #24
1b2fc     A7 FA 61 FC | 	wrlong	result1, fp
1b300     18 4E 85 F1 | 	sub	fp, #24
1b304                 | LR__2280
1b304     1C 4E 05 F1 | 	add	fp, #28
1b308     A7 FE 48 FC | 	wrbyte	#127, fp
1b30c     01 4E 05 F1 | 	add	fp, #1
1b310     A7 00 49 FC | 	wrbyte	#128, fp
1b314     01 4E 85 F1 | 	sub	fp, #1
1b318     A7 14 02 F6 | 	mov	arg02, fp
1b31c     04 4E 85 F1 | 	sub	fp, #4
1b320     A7 16 02 FB | 	rdlong	arg03, fp
1b324     18 4E 85 F1 | 	sub	fp, #24
1b328     01 16 66 F0 | 	shl	arg03, #1
1b32c     07 12 06 F6 | 	mov	arg01, #7
1b330     0E 18 C6 F9 | 	decod	arg04, #14
1b334     02 1A 06 F6 | 	mov	arg05, #2
1b338     00 1C 06 F6 | 	mov	arg06, #0
1b33c     0B 00 00 FF 
1b340     CC E4 05 F1 | 	add	objptr, ##5836
1b344     3C 50 B0 FD | 	call	#_audio096_spin2_play8
1b348     0B 00 00 FF 
1b34c     CC E4 85 F1 | 	sub	objptr, ##5836
1b350     0C 4E 05 F1 | 	add	fp, #12
1b354     A7 12 02 F6 | 	mov	arg01, fp
1b358     0C 4E 85 F1 | 	sub	fp, #12
1b35c     DC 06 BF FD | 	call	#_push
1b360     74 F2 BF FD | 	call	#_do_waitms
1b364     07 12 06 F6 | 	mov	arg01, #7
1b368     0B 00 00 FF 
1b36c     CC E4 05 F1 | 	add	objptr, ##5836
1b370     B4 50 B0 FD | 	call	#_audio096_spin2_stop
1b374     0B 00 00 FF 
1b378     CC E4 85 F1 | 	sub	objptr, ##5836
1b37c     A7 F0 03 F6 | 	mov	ptra, fp
1b380     B2 00 A0 FD | 	call	#popregs_
1b384                 | _do_beep_ret
1b384     2D 00 64 FD | 	ret
1b388                 | 
1b388                 | ' 
1b388                 | ' sub do_no_command
1b388                 | _do_no_command
1b388     17 12 06 F6 | 	mov	arg01, #23
1b38c     34 20 B0 FD | 	call	#_printerror
1b390                 | _do_no_command_ret
1b390     2D 00 64 FD | 	ret
1b394                 | 
1b394                 | ' 
1b394                 | ' sub do_negative
1b394                 | _do_negative
1b394     02 4A 05 F6 | 	mov	COUNT_, #2
1b398     A8 00 A0 FD | 	call	#pushregs_
1b39c     0C F0 07 F1 | 	add	ptra, #12
1b3a0     00 06 BF FD | 	call	#_pop
1b3a4     FF 1E 02 F6 | 	mov	local01, result3
1b3a8     A7 FA 61 FC | 	wrlong	result1, fp
1b3ac     04 4E 05 F1 | 	add	fp, #4
1b3b0     A7 FC 61 FC | 	wrlong	result2, fp
1b3b4     04 4E 05 F1 | 	add	fp, #4
1b3b8     A7 1E 62 FC | 	wrlong	local01, fp
1b3bc                 | ' t1=pop()
1b3bc                 | ' if t1.result_type=result_int then 
1b3bc     08 4E 85 F1 | 	sub	fp, #8
1b3c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b3c4     A7 20 02 AB |  if_e	rdlong	local02, fp
1b3c8     10 1F 62 A6 |  if_e	neg	local01, local02
1b3cc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b3d0     5C 00 90 AD |  if_e	jmp	#LR__2292
1b3d4     08 4E 05 F1 | 	add	fp, #8
1b3d8     A7 1E 02 FB | 	rdlong	local01, fp
1b3dc     08 4E 85 F1 | 	sub	fp, #8
1b3e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b3e4     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b3e8     A7 20 02 FB | 	rdlong	local02, fp
1b3ec     10 1F 62 F6 | 	neg	local01, local02
1b3f0     A7 1E 62 FC | 	wrlong	local01, fp
1b3f4     08 4E 05 F1 | 	add	fp, #8
1b3f8     A7 38 68 FC | 	wrlong	#28, fp
1b3fc     08 4E 85 F1 | 	sub	fp, #8
1b400     2C 00 90 FD | 	jmp	#LR__2291
1b404                 | LR__2290
1b404     08 4E 05 F1 | 	add	fp, #8
1b408     A7 1E 02 FB | 	rdlong	local01, fp
1b40c     08 4E 85 F1 | 	sub	fp, #8
1b410     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b414     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b418     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b41c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b420     08 4E 05 51 |  if_ne	add	fp, #8
1b424     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b428     08 4E 85 51 |  if_ne	sub	fp, #8
1b42c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b430                 | LR__2291
1b430                 | LR__2292
1b430     A7 12 02 F6 | 	mov	arg01, fp
1b434     04 06 BF FD | 	call	#_push
1b438     A7 F0 03 F6 | 	mov	ptra, fp
1b43c     B2 00 A0 FD | 	call	#popregs_
1b440                 | _do_negative_ret
1b440     2D 00 64 FD | 	ret
1b444                 | 
1b444                 | ' 
1b444                 | ' sub do_abs
1b444                 | _do_abs
1b444     01 4A 05 F6 | 	mov	COUNT_, #1
1b448     A8 00 A0 FD | 	call	#pushregs_
1b44c     0C F0 07 F1 | 	add	ptra, #12
1b450     50 05 BF FD | 	call	#_pop
1b454     FF 1E 02 F6 | 	mov	local01, result3
1b458     A7 FA 61 FC | 	wrlong	result1, fp
1b45c     04 4E 05 F1 | 	add	fp, #4
1b460     A7 FC 61 FC | 	wrlong	result2, fp
1b464     04 4E 05 F1 | 	add	fp, #4
1b468     A7 1E 62 FC | 	wrlong	local01, fp
1b46c                 | ' t1=pop()
1b46c                 | ' if t1.result_type=result_int then 
1b46c     08 4E 85 F1 | 	sub	fp, #8
1b470     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b474     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b478     09 1F 42 A6 |  if_e	abs	local01, arg01
1b47c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b480     2C 00 90 AD |  if_e	jmp	#LR__2300
1b484     08 4E 05 F1 | 	add	fp, #8
1b488     A7 1E 02 FB | 	rdlong	local01, fp
1b48c     08 4E 85 F1 | 	sub	fp, #8
1b490     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b494     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b498     1F FA 05 A4 |  if_e	bitl	result1, #31
1b49c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b4a0     08 4E 05 51 |  if_ne	add	fp, #8
1b4a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b4a8     08 4E 85 51 |  if_ne	sub	fp, #8
1b4ac     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b4b0                 | LR__2300
1b4b0     A7 12 02 F6 | 	mov	arg01, fp
1b4b4     84 05 BF FD | 	call	#_push
1b4b8     A7 F0 03 F6 | 	mov	ptra, fp
1b4bc     B2 00 A0 FD | 	call	#popregs_
1b4c0                 | _do_abs_ret
1b4c0     2D 00 64 FD | 	ret
1b4c4                 | 
1b4c4                 | ' 
1b4c4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b4c4                 | ' 
1b4c4                 | ' ''----------------------------------------------------------------------------------------------------
1b4c4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b4c4                 | ' ''----------------------------------------------------------------------------------------------------
1b4c4                 | ' 
1b4c4                 | ' ''--------------------------- Command function pointers
1b4c4                 | ' 
1b4c4                 | ' sub init_commands
1b4c4                 | _init_commands
1b4c4                 | ' 
1b4c4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b4c4     00 00 06 F6 | 	mov	_var01, #0
1b4c8     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b4cc                 | LR__2310
1b4cc     00 FB 01 F6 | 	mov	result1, _var01
1b4d0     02 FA 65 F0 | 	shl	result1, #2
1b4d4     43 00 00 FF 
1b4d8     60 E4 05 F1 | 	add	objptr, ##34400
1b4dc     F2 FA 01 F1 | 	add	result1, objptr
1b4e0     43 00 00 FF 
1b4e4     60 E4 85 F1 | 	sub	objptr, ##34400
1b4e8     FD E4 61 FC | 	wrlong	objptr, result1
1b4ec     01 00 06 F1 | 	add	_var01, #1
1b4f0     00 01 56 F2 | 	cmps	_var01, #256 wc
1b4f4     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b4f8                 | LR__2311
1b4f8     F2 FA 01 F6 | 	mov	result1, objptr
1b4fc     14 FA 25 F4 | 	bith	result1, #20
1b500     43 00 00 FF 
1b504     64 E4 05 F1 | 	add	objptr, ##34404
1b508     F2 FA 61 FC | 	wrlong	result1, objptr
1b50c     43 00 00 FF 
1b510     64 E4 85 F1 | 	sub	objptr, ##34404
1b514     F2 FA 01 F6 | 	mov	result1, objptr
1b518     15 FA 25 F4 | 	bith	result1, #21
1b51c     43 00 00 FF 
1b520     68 E4 05 F1 | 	add	objptr, ##34408
1b524     F2 FA 61 FC | 	wrlong	result1, objptr
1b528     43 00 00 FF 
1b52c     68 E4 85 F1 | 	sub	objptr, ##34408
1b530     F2 FA 01 F6 | 	mov	result1, objptr
1b534     34 FA 25 F4 | 	bith	result1, #52
1b538     43 00 00 FF 
1b53c     6C E4 05 F1 | 	add	objptr, ##34412
1b540     F2 FA 61 FC | 	wrlong	result1, objptr
1b544     43 00 00 FF 
1b548     6C E4 85 F1 | 	sub	objptr, ##34412
1b54c     F2 FA 01 F6 | 	mov	result1, objptr
1b550     16 FA 25 F4 | 	bith	result1, #22
1b554     43 00 00 FF 
1b558     74 E4 05 F1 | 	add	objptr, ##34420
1b55c     F2 FA 61 FC | 	wrlong	result1, objptr
1b560     43 00 00 FF 
1b564     74 E4 85 F1 | 	sub	objptr, ##34420
1b568     F2 FA 01 F6 | 	mov	result1, objptr
1b56c     00 28 00 FF 
1b570     00 FA 45 F5 | 	or	result1, ##5242880
1b574     43 00 00 FF 
1b578     78 E4 05 F1 | 	add	objptr, ##34424
1b57c     F2 FA 61 FC | 	wrlong	result1, objptr
1b580     43 00 00 FF 
1b584     78 E4 85 F1 | 	sub	objptr, ##34424
1b588     F2 FA 01 F6 | 	mov	result1, objptr
1b58c     35 FA 25 F4 | 	bith	result1, #53
1b590     43 00 00 FF 
1b594     7C E4 05 F1 | 	add	objptr, ##34428
1b598     F2 FA 61 FC | 	wrlong	result1, objptr
1b59c     43 00 00 FF 
1b5a0     7C E4 85 F1 | 	sub	objptr, ##34428
1b5a4     F2 FA 01 F6 | 	mov	result1, objptr
1b5a8     54 FA 25 F4 | 	bith	result1, #84
1b5ac     43 00 00 FF 
1b5b0     80 E4 05 F1 | 	add	objptr, ##34432
1b5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5b8     43 00 00 FF 
1b5bc     80 E4 85 F1 | 	sub	objptr, ##34432
1b5c0     F2 FA 01 F6 | 	mov	result1, objptr
1b5c4     17 FA 25 F4 | 	bith	result1, #23
1b5c8     43 00 00 FF 
1b5cc     84 E4 05 F1 | 	add	objptr, ##34436
1b5d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b5d4     43 00 00 FF 
1b5d8     84 E4 85 F1 | 	sub	objptr, ##34436
1b5dc     F2 FA 01 F6 | 	mov	result1, objptr
1b5e0     00 48 00 FF 
1b5e4     00 FA 45 F5 | 	or	result1, ##9437184
1b5e8     43 00 00 FF 
1b5ec     88 E4 05 F1 | 	add	objptr, ##34440
1b5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b5f4     43 00 00 FF 
1b5f8     88 E4 85 F1 | 	sub	objptr, ##34440
1b5fc     F2 FA 01 F6 | 	mov	result1, objptr
1b600     00 50 00 FF 
1b604     00 FA 45 F5 | 	or	result1, ##10485760
1b608     43 00 00 FF 
1b60c     8C E4 05 F1 | 	add	objptr, ##34444
1b610     F2 FA 61 FC | 	wrlong	result1, objptr
1b614     43 00 00 FF 
1b618     8C E4 85 F1 | 	sub	objptr, ##34444
1b61c     F2 FA 01 F6 | 	mov	result1, objptr
1b620     00 58 00 FF 
1b624     00 FA 45 F5 | 	or	result1, ##11534336
1b628     43 00 00 FF 
1b62c     90 E4 05 F1 | 	add	objptr, ##34448
1b630     F2 FA 61 FC | 	wrlong	result1, objptr
1b634     43 00 00 FF 
1b638     90 E4 85 F1 | 	sub	objptr, ##34448
1b63c     F2 FA 01 F6 | 	mov	result1, objptr
1b640     36 FA 25 F4 | 	bith	result1, #54
1b644     43 00 00 FF 
1b648     A4 E4 05 F1 | 	add	objptr, ##34468
1b64c     F2 FA 61 FC | 	wrlong	result1, objptr
1b650     43 00 00 FF 
1b654     A4 E4 85 F1 | 	sub	objptr, ##34468
1b658     F2 FA 01 F6 | 	mov	result1, objptr
1b65c     00 68 00 FF 
1b660     00 FA 45 F5 | 	or	result1, ##13631488
1b664     43 00 00 FF 
1b668     D4 E4 05 F1 | 	add	objptr, ##34516
1b66c     F2 FA 61 FC | 	wrlong	result1, objptr
1b670     43 00 00 FF 
1b674     D4 E4 85 F1 | 	sub	objptr, ##34516
1b678     F2 FA 01 F6 | 	mov	result1, objptr
1b67c     00 68 00 FF 
1b680     00 FA 45 F5 | 	or	result1, ##13631488
1b684     43 00 00 FF 
1b688     D0 E4 05 F1 | 	add	objptr, ##34512
1b68c     F2 FA 61 FC | 	wrlong	result1, objptr
1b690     43 00 00 FF 
1b694     D0 E4 85 F1 | 	sub	objptr, ##34512
1b698     F2 FA 01 F6 | 	mov	result1, objptr
1b69c     00 68 00 FF 
1b6a0     00 FA 45 F5 | 	or	result1, ##13631488
1b6a4     43 00 00 FF 
1b6a8     D8 E4 05 F1 | 	add	objptr, ##34520
1b6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b0     43 00 00 FF 
1b6b4     D8 E4 85 F1 | 	sub	objptr, ##34520
1b6b8     F2 FA 01 F6 | 	mov	result1, objptr
1b6bc     00 68 00 FF 
1b6c0     00 FA 45 F5 | 	or	result1, ##13631488
1b6c4     43 00 00 FF 
1b6c8     DC E4 05 F1 | 	add	objptr, ##34524
1b6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d0     43 00 00 FF 
1b6d4     DC E4 85 F1 | 	sub	objptr, ##34524
1b6d8     F2 FA 01 F6 | 	mov	result1, objptr
1b6dc     00 68 00 FF 
1b6e0     00 FA 45 F5 | 	or	result1, ##13631488
1b6e4     43 00 00 FF 
1b6e8     0C E5 05 F1 | 	add	objptr, ##34572
1b6ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b6f0     43 00 00 FF 
1b6f4     0C E5 85 F1 | 	sub	objptr, ##34572
1b6f8     F2 FA 01 F6 | 	mov	result1, objptr
1b6fc     55 FA 25 F4 | 	bith	result1, #85
1b700     43 00 00 FF 
1b704     BC E4 05 F1 | 	add	objptr, ##34492
1b708     F2 FA 61 FC | 	wrlong	result1, objptr
1b70c     43 00 00 FF 
1b710     BC E4 85 F1 | 	sub	objptr, ##34492
1b714     F2 FA 01 F6 | 	mov	result1, objptr
1b718     00 68 00 FF 
1b71c     00 FA 45 F5 | 	or	result1, ##13631488
1b720     43 00 00 FF 
1b724     10 E5 05 F1 | 	add	objptr, ##34576
1b728     F2 FA 61 FC | 	wrlong	result1, objptr
1b72c     43 00 00 FF 
1b730     10 E5 85 F1 | 	sub	objptr, ##34576
1b734     F2 FA 01 F6 | 	mov	result1, objptr
1b738     00 68 00 FF 
1b73c     00 FA 45 F5 | 	or	result1, ##13631488
1b740     43 00 00 FF 
1b744     E0 E4 05 F1 | 	add	objptr, ##34528
1b748     F2 FA 61 FC | 	wrlong	result1, objptr
1b74c     43 00 00 FF 
1b750     E0 E4 85 F1 | 	sub	objptr, ##34528
1b754     F2 FA 01 F6 | 	mov	result1, objptr
1b758     00 68 00 FF 
1b75c     00 FA 45 F5 | 	or	result1, ##13631488
1b760     43 00 00 FF 
1b764     E4 E4 05 F1 | 	add	objptr, ##34532
1b768     F2 FA 61 FC | 	wrlong	result1, objptr
1b76c     43 00 00 FF 
1b770     E4 E4 85 F1 | 	sub	objptr, ##34532
1b774     F2 FA 01 F6 | 	mov	result1, objptr
1b778     00 68 00 FF 
1b77c     00 FA 45 F5 | 	or	result1, ##13631488
1b780     43 00 00 FF 
1b784     E8 E4 05 F1 | 	add	objptr, ##34536
1b788     F2 FA 61 FC | 	wrlong	result1, objptr
1b78c     43 00 00 FF 
1b790     E8 E4 85 F1 | 	sub	objptr, ##34536
1b794     F2 FA 01 F6 | 	mov	result1, objptr
1b798     74 FA 25 F4 | 	bith	result1, #116
1b79c     43 00 00 FF 
1b7a0     60 E5 05 F1 | 	add	objptr, ##34656
1b7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7a8     43 00 00 FF 
1b7ac     60 E5 85 F1 | 	sub	objptr, ##34656
1b7b0     F2 FA 01 F6 | 	mov	result1, objptr
1b7b4     18 FA 25 F4 | 	bith	result1, #24
1b7b8     43 00 00 FF 
1b7bc     64 E5 05 F1 | 	add	objptr, ##34660
1b7c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7c4     43 00 00 FF 
1b7c8     64 E5 85 F1 | 	sub	objptr, ##34660
1b7cc     F2 FA 01 F6 | 	mov	result1, objptr
1b7d0     00 88 00 FF 
1b7d4     00 FA 45 F5 | 	or	result1, ##17825792
1b7d8     43 00 00 FF 
1b7dc     68 E5 05 F1 | 	add	objptr, ##34664
1b7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7e4     43 00 00 FF 
1b7e8     68 E5 85 F1 | 	sub	objptr, ##34664
1b7ec     F2 FA 01 F6 | 	mov	result1, objptr
1b7f0     00 90 00 FF 
1b7f4     00 FA 45 F5 | 	or	result1, ##18874368
1b7f8     43 00 00 FF 
1b7fc     6C E5 05 F1 | 	add	objptr, ##34668
1b800     F2 FA 61 FC | 	wrlong	result1, objptr
1b804     43 00 00 FF 
1b808     6C E5 85 F1 | 	sub	objptr, ##34668
1b80c     F2 FA 01 F6 | 	mov	result1, objptr
1b810     00 98 00 FF 
1b814     00 FA 45 F5 | 	or	result1, ##19922944
1b818     43 00 00 FF 
1b81c     70 E5 05 F1 | 	add	objptr, ##34672
1b820     F2 FA 61 FC | 	wrlong	result1, objptr
1b824     43 00 00 FF 
1b828     70 E5 85 F1 | 	sub	objptr, ##34672
1b82c     F2 FA 01 F6 | 	mov	result1, objptr
1b830     00 A0 00 FF 
1b834     00 FA 45 F5 | 	or	result1, ##20971520
1b838     43 00 00 FF 
1b83c     74 E5 05 F1 | 	add	objptr, ##34676
1b840     F2 FA 61 FC | 	wrlong	result1, objptr
1b844     43 00 00 FF 
1b848     74 E5 85 F1 | 	sub	objptr, ##34676
1b84c     F2 FA 01 F6 | 	mov	result1, objptr
1b850     00 A8 00 FF 
1b854     00 FA 45 F5 | 	or	result1, ##22020096
1b858     43 00 00 FF 
1b85c     78 E5 05 F1 | 	add	objptr, ##34680
1b860     F2 FA 61 FC | 	wrlong	result1, objptr
1b864     43 00 00 FF 
1b868     78 E5 85 F1 | 	sub	objptr, ##34680
1b86c     F2 FA 01 F6 | 	mov	result1, objptr
1b870     00 B0 00 FF 
1b874     00 FA 45 F5 | 	or	result1, ##23068672
1b878     43 00 00 FF 
1b87c     7C E5 05 F1 | 	add	objptr, ##34684
1b880     F2 FA 61 FC | 	wrlong	result1, objptr
1b884     43 00 00 FF 
1b888     7C E5 85 F1 | 	sub	objptr, ##34684
1b88c     F2 FA 01 F6 | 	mov	result1, objptr
1b890     00 B8 00 FF 
1b894     00 FA 45 F5 | 	or	result1, ##24117248
1b898     43 00 00 FF 
1b89c     80 E5 05 F1 | 	add	objptr, ##34688
1b8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8a4     43 00 00 FF 
1b8a8     80 E5 85 F1 | 	sub	objptr, ##34688
1b8ac     F2 FA 01 F6 | 	mov	result1, objptr
1b8b0     37 FA 25 F4 | 	bith	result1, #55
1b8b4     43 00 00 FF 
1b8b8     84 E5 05 F1 | 	add	objptr, ##34692
1b8bc     F2 FA 61 FC | 	wrlong	result1, objptr
1b8c0     43 00 00 FF 
1b8c4     84 E5 85 F1 | 	sub	objptr, ##34692
1b8c8     F2 FA 01 F6 | 	mov	result1, objptr
1b8cc     00 C8 00 FF 
1b8d0     00 FA 45 F5 | 	or	result1, ##26214400
1b8d4     43 00 00 FF 
1b8d8     88 E5 05 F1 | 	add	objptr, ##34696
1b8dc     F2 FA 61 FC | 	wrlong	result1, objptr
1b8e0     43 00 00 FF 
1b8e4     88 E5 85 F1 | 	sub	objptr, ##34696
1b8e8     F2 FA 01 F6 | 	mov	result1, objptr
1b8ec     00 D0 00 FF 
1b8f0     00 FA 45 F5 | 	or	result1, ##27262976
1b8f4     43 00 00 FF 
1b8f8     8C E5 05 F1 | 	add	objptr, ##34700
1b8fc     F2 FA 61 FC | 	wrlong	result1, objptr
1b900     43 00 00 FF 
1b904     8C E5 85 F1 | 	sub	objptr, ##34700
1b908     F2 FA 01 F6 | 	mov	result1, objptr
1b90c     00 D8 00 FF 
1b910     00 FA 45 F5 | 	or	result1, ##28311552
1b914     43 00 00 FF 
1b918     90 E5 05 F1 | 	add	objptr, ##34704
1b91c     F2 FA 61 FC | 	wrlong	result1, objptr
1b920     43 00 00 FF 
1b924     90 E5 85 F1 | 	sub	objptr, ##34704
1b928     F2 FA 01 F6 | 	mov	result1, objptr
1b92c     56 FA 25 F4 | 	bith	result1, #86
1b930     43 00 00 FF 
1b934     94 E5 05 F1 | 	add	objptr, ##34708
1b938     F2 FA 61 FC | 	wrlong	result1, objptr
1b93c     43 00 00 FF 
1b940     94 E5 85 F1 | 	sub	objptr, ##34708
1b944     F2 FA 01 F6 | 	mov	result1, objptr
1b948     00 E8 00 FF 
1b94c     00 FA 45 F5 | 	or	result1, ##30408704
1b950     45 00 00 FF 
1b954     5C E4 05 F1 | 	add	objptr, ##35420
1b958     F2 FA 61 FC | 	wrlong	result1, objptr
1b95c     45 00 00 FF 
1b960     5C E4 85 F1 | 	sub	objptr, ##35420
1b964     F2 FA 01 F6 | 	mov	result1, objptr
1b968     75 FA 25 F4 | 	bith	result1, #117
1b96c     43 00 00 FF 
1b970     98 E5 05 F1 | 	add	objptr, ##34712
1b974     F2 FA 61 FC | 	wrlong	result1, objptr
1b978     43 00 00 FF 
1b97c     98 E5 85 F1 | 	sub	objptr, ##34712
1b980     F2 FA 01 F6 | 	mov	result1, objptr
1b984     94 FA 25 F4 | 	bith	result1, #148
1b988     43 00 00 FF 
1b98c     AC E5 05 F1 | 	add	objptr, ##34732
1b990     F2 FA 61 FC | 	wrlong	result1, objptr
1b994     43 00 00 FF 
1b998     AC E5 85 F1 | 	sub	objptr, ##34732
1b99c     F2 FA 01 F6 | 	mov	result1, objptr
1b9a0     19 FA 25 F4 | 	bith	result1, #25
1b9a4     43 00 00 FF 
1b9a8     9C E5 05 F1 | 	add	objptr, ##34716
1b9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b0     43 00 00 FF 
1b9b4     9C E5 85 F1 | 	sub	objptr, ##34716
1b9b8     F2 FA 01 F6 | 	mov	result1, objptr
1b9bc     00 08 01 FF 
1b9c0     00 FA 45 F5 | 	or	result1, ##34603008
1b9c4     43 00 00 FF 
1b9c8     B8 E4 05 F1 | 	add	objptr, ##34488
1b9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d0     43 00 00 FF 
1b9d4     B8 E4 85 F1 | 	sub	objptr, ##34488
1b9d8     F2 FA 01 F6 | 	mov	result1, objptr
1b9dc     00 10 01 FF 
1b9e0     00 FA 45 F5 | 	or	result1, ##35651584
1b9e4     43 00 00 FF 
1b9e8     A0 E5 05 F1 | 	add	objptr, ##34720
1b9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f0     43 00 00 FF 
1b9f4     A0 E5 85 F1 | 	sub	objptr, ##34720
1b9f8     F2 FA 01 F6 | 	mov	result1, objptr
1b9fc     00 18 01 FF 
1ba00     00 FA 45 F5 | 	or	result1, ##36700160
1ba04     43 00 00 FF 
1ba08     A4 E5 05 F1 | 	add	objptr, ##34724
1ba0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba10     43 00 00 FF 
1ba14     A4 E5 85 F1 | 	sub	objptr, ##34724
1ba18     F2 FA 01 F6 | 	mov	result1, objptr
1ba1c     00 20 01 FF 
1ba20     00 FA 45 F5 | 	or	result1, ##37748736
1ba24     43 00 00 FF 
1ba28     A8 E5 05 F1 | 	add	objptr, ##34728
1ba2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba30     43 00 00 FF 
1ba34     A8 E5 85 F1 | 	sub	objptr, ##34728
1ba38     F2 FA 01 F6 | 	mov	result1, objptr
1ba3c     00 28 01 FF 
1ba40     00 FA 45 F5 | 	or	result1, ##38797312
1ba44     43 00 00 FF 
1ba48     B4 E5 05 F1 | 	add	objptr, ##34740
1ba4c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba50     43 00 00 FF 
1ba54     B4 E5 85 F1 | 	sub	objptr, ##34740
1ba58     F2 FA 01 F6 | 	mov	result1, objptr
1ba5c     00 30 01 FF 
1ba60     00 FA 45 F5 | 	or	result1, ##39845888
1ba64     43 00 00 FF 
1ba68     B8 E5 05 F1 | 	add	objptr, ##34744
1ba6c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba70     43 00 00 FF 
1ba74     B8 E5 85 F1 | 	sub	objptr, ##34744
1ba78     F2 FA 01 F6 | 	mov	result1, objptr
1ba7c     00 38 01 FF 
1ba80     00 FA 45 F5 | 	or	result1, ##40894464
1ba84     43 00 00 FF 
1ba88     BC E5 05 F1 | 	add	objptr, ##34748
1ba8c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba90     43 00 00 FF 
1ba94     BC E5 85 F1 | 	sub	objptr, ##34748
1ba98     F2 FA 01 F6 | 	mov	result1, objptr
1ba9c     00 40 01 FF 
1baa0     00 FA 45 F5 | 	or	result1, ##41943040
1baa4     43 00 00 FF 
1baa8     C0 E5 05 F1 | 	add	objptr, ##34752
1baac     F2 FA 61 FC | 	wrlong	result1, objptr
1bab0     43 00 00 FF 
1bab4     C0 E5 85 F1 | 	sub	objptr, ##34752
1bab8     F2 FA 01 F6 | 	mov	result1, objptr
1babc     00 48 01 FF 
1bac0     00 FA 45 F5 | 	or	result1, ##42991616
1bac4     43 00 00 FF 
1bac8     C8 E5 05 F1 | 	add	objptr, ##34760
1bacc     F2 FA 61 FC | 	wrlong	result1, objptr
1bad0     43 00 00 FF 
1bad4     C8 E5 85 F1 | 	sub	objptr, ##34760
1bad8     F2 FA 01 F6 | 	mov	result1, objptr
1badc     00 08 01 FF 
1bae0     00 FA 45 F5 | 	or	result1, ##34603008
1bae4     43 00 00 FF 
1bae8     CC E5 05 F1 | 	add	objptr, ##34764
1baec     F2 FA 61 FC | 	wrlong	result1, objptr
1baf0     43 00 00 FF 
1baf4     CC E5 85 F1 | 	sub	objptr, ##34764
1baf8     F2 FA 01 F6 | 	mov	result1, objptr
1bafc     00 50 01 FF 
1bb00     00 FA 45 F5 | 	or	result1, ##44040192
1bb04     43 00 00 FF 
1bb08     CC E4 05 F1 | 	add	objptr, ##34508
1bb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb10     43 00 00 FF 
1bb14     CC E4 85 F1 | 	sub	objptr, ##34508
1bb18     F2 FA 01 F6 | 	mov	result1, objptr
1bb1c     00 58 01 FF 
1bb20     00 FA 45 F5 | 	or	result1, ##45088768
1bb24     43 00 00 FF 
1bb28     FC E4 05 F1 | 	add	objptr, ##34556
1bb2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb30     43 00 00 FF 
1bb34     FC E4 85 F1 | 	sub	objptr, ##34556
1bb38     F2 FA 01 F6 | 	mov	result1, objptr
1bb3c     00 60 01 FF 
1bb40     00 FA 45 F5 | 	or	result1, ##46137344
1bb44     43 00 00 FF 
1bb48     F8 E4 05 F1 | 	add	objptr, ##34552
1bb4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb50     43 00 00 FF 
1bb54     F8 E4 85 F1 | 	sub	objptr, ##34552
1bb58     F2 FA 01 F6 | 	mov	result1, objptr
1bb5c     00 68 01 FF 
1bb60     00 FA 45 F5 | 	or	result1, ##47185920
1bb64     43 00 00 FF 
1bb68     9C E4 05 F1 | 	add	objptr, ##34460
1bb6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb70     43 00 00 FF 
1bb74     9C E4 85 F1 | 	sub	objptr, ##34460
1bb78     F2 FA 01 F6 | 	mov	result1, objptr
1bb7c     00 70 01 FF 
1bb80     00 FA 45 F5 | 	or	result1, ##48234496
1bb84     43 00 00 FF 
1bb88     A0 E4 05 F1 | 	add	objptr, ##34464
1bb8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb90     43 00 00 FF 
1bb94     A0 E4 85 F1 | 	sub	objptr, ##34464
1bb98     F2 FA 01 F6 | 	mov	result1, objptr
1bb9c     00 78 01 FF 
1bba0     00 FA 45 F5 | 	or	result1, ##49283072
1bba4     43 00 00 FF 
1bba8     08 E5 05 F1 | 	add	objptr, ##34568
1bbac     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb0     43 00 00 FF 
1bbb4     08 E5 85 F1 | 	sub	objptr, ##34568
1bbb8     F2 FA 01 F6 | 	mov	result1, objptr
1bbbc     38 FA 25 F4 | 	bith	result1, #56
1bbc0     43 00 00 FF 
1bbc4     B0 E5 05 F1 | 	add	objptr, ##34736
1bbc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbcc     43 00 00 FF 
1bbd0     B0 E5 85 F1 | 	sub	objptr, ##34736
1bbd4     F2 FA 01 F6 | 	mov	result1, objptr
1bbd8     00 88 01 FF 
1bbdc     00 FA 45 F5 | 	or	result1, ##51380224
1bbe0     43 00 00 FF 
1bbe4     C4 E5 05 F1 | 	add	objptr, ##34756
1bbe8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbec     43 00 00 FF 
1bbf0     C4 E5 85 F1 | 	sub	objptr, ##34756
1bbf4     F2 FA 01 F6 | 	mov	result1, objptr
1bbf8     00 90 01 FF 
1bbfc     00 FA 45 F5 | 	or	result1, ##52428800
1bc00     43 00 00 FF 
1bc04     D0 E5 05 F1 | 	add	objptr, ##34768
1bc08     F2 FA 61 FC | 	wrlong	result1, objptr
1bc0c     43 00 00 FF 
1bc10     D0 E5 85 F1 | 	sub	objptr, ##34768
1bc14     F2 FA 01 F6 | 	mov	result1, objptr
1bc18     00 98 01 FF 
1bc1c     00 FA 45 F5 | 	or	result1, ##53477376
1bc20     43 00 00 FF 
1bc24     D4 E5 05 F1 | 	add	objptr, ##34772
1bc28     F2 FA 61 FC | 	wrlong	result1, objptr
1bc2c     43 00 00 FF 
1bc30     D4 E5 85 F1 | 	sub	objptr, ##34772
1bc34     F2 FA 01 F6 | 	mov	result1, objptr
1bc38     00 A0 01 FF 
1bc3c     00 FA 45 F5 | 	or	result1, ##54525952
1bc40     43 00 00 FF 
1bc44     D8 E5 05 F1 | 	add	objptr, ##34776
1bc48     F2 FA 61 FC | 	wrlong	result1, objptr
1bc4c     43 00 00 FF 
1bc50     D8 E5 85 F1 | 	sub	objptr, ##34776
1bc54     F2 FA 01 F6 | 	mov	result1, objptr
1bc58     00 A8 01 FF 
1bc5c     00 FA 45 F5 | 	or	result1, ##55574528
1bc60     43 00 00 FF 
1bc64     DC E5 05 F1 | 	add	objptr, ##34780
1bc68     F2 FA 61 FC | 	wrlong	result1, objptr
1bc6c     43 00 00 FF 
1bc70     DC E5 85 F1 | 	sub	objptr, ##34780
1bc74     F2 FA 01 F6 | 	mov	result1, objptr
1bc78     00 B0 01 FF 
1bc7c     00 FA 45 F5 | 	or	result1, ##56623104
1bc80     43 00 00 FF 
1bc84     E0 E5 05 F1 | 	add	objptr, ##34784
1bc88     F2 FA 61 FC | 	wrlong	result1, objptr
1bc8c     43 00 00 FF 
1bc90     E0 E5 85 F1 | 	sub	objptr, ##34784
1bc94     F2 FA 01 F6 | 	mov	result1, objptr
1bc98     00 B8 01 FF 
1bc9c     00 FA 45 F5 | 	or	result1, ##57671680
1bca0     43 00 00 FF 
1bca4     E4 E5 05 F1 | 	add	objptr, ##34788
1bca8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcac     43 00 00 FF 
1bcb0     E4 E5 85 F1 | 	sub	objptr, ##34788
1bcb4     F2 FA 01 F6 | 	mov	result1, objptr
1bcb8     94 FA 25 F4 | 	bith	result1, #148
1bcbc     43 00 00 FF 
1bcc0     AC E5 05 F1 | 	add	objptr, ##34732
1bcc4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcc8     43 00 00 FF 
1bccc     AC E5 85 F1 | 	sub	objptr, ##34732
1bcd0     F2 FA 01 F6 | 	mov	result1, objptr
1bcd4     57 FA 25 F4 | 	bith	result1, #87
1bcd8     43 00 00 FF 
1bcdc     EC E5 05 F1 | 	add	objptr, ##34796
1bce0     F2 FA 61 FC | 	wrlong	result1, objptr
1bce4     43 00 00 FF 
1bce8     EC E5 85 F1 | 	sub	objptr, ##34796
1bcec     F2 FA 01 F6 | 	mov	result1, objptr
1bcf0     00 C8 01 FF 
1bcf4     00 FA 45 F5 | 	or	result1, ##59768832
1bcf8     43 00 00 FF 
1bcfc     E8 E5 05 F1 | 	add	objptr, ##34792
1bd00     F2 FA 61 FC | 	wrlong	result1, objptr
1bd04     43 00 00 FF 
1bd08     E8 E5 85 F1 | 	sub	objptr, ##34792
1bd0c     F2 FA 01 F6 | 	mov	result1, objptr
1bd10     00 D0 01 FF 
1bd14     00 FA 45 F5 | 	or	result1, ##60817408
1bd18     44 00 00 FF 
1bd1c     00 E4 05 F1 | 	add	objptr, ##34816
1bd20     F2 FA 61 FC | 	wrlong	result1, objptr
1bd24     44 00 00 FF 
1bd28     00 E4 85 F1 | 	sub	objptr, ##34816
1bd2c     F2 FA 01 F6 | 	mov	result1, objptr
1bd30     00 D8 01 FF 
1bd34     00 FA 45 F5 | 	or	result1, ##61865984
1bd38     44 00 00 FF 
1bd3c     04 E4 05 F1 | 	add	objptr, ##34820
1bd40     F2 FA 61 FC | 	wrlong	result1, objptr
1bd44     44 00 00 FF 
1bd48     04 E4 85 F1 | 	sub	objptr, ##34820
1bd4c     F2 FA 01 F6 | 	mov	result1, objptr
1bd50     76 FA 25 F4 | 	bith	result1, #118
1bd54     43 00 00 FF 
1bd58     F0 E5 05 F1 | 	add	objptr, ##34800
1bd5c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd60     43 00 00 FF 
1bd64     F0 E5 85 F1 | 	sub	objptr, ##34800
1bd68     F2 FA 01 F6 | 	mov	result1, objptr
1bd6c     00 E8 01 FF 
1bd70     00 FA 45 F5 | 	or	result1, ##63963136
1bd74     43 00 00 FF 
1bd78     F4 E5 05 F1 | 	add	objptr, ##34804
1bd7c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd80     43 00 00 FF 
1bd84     F4 E5 85 F1 | 	sub	objptr, ##34804
1bd88     F2 FA 01 F6 | 	mov	result1, objptr
1bd8c     95 FA 25 F4 | 	bith	result1, #149
1bd90     43 00 00 FF 
1bd94     F8 E5 05 F1 | 	add	objptr, ##34808
1bd98     F2 FA 61 FC | 	wrlong	result1, objptr
1bd9c     43 00 00 FF 
1bda0     F8 E5 85 F1 | 	sub	objptr, ##34808
1bda4     F2 FA 01 F6 | 	mov	result1, objptr
1bda8     B4 FA 25 F4 | 	bith	result1, #180
1bdac     43 00 00 FF 
1bdb0     FC E5 05 F1 | 	add	objptr, ##34812
1bdb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb8     43 00 00 FF 
1bdbc     FC E5 85 F1 | 	sub	objptr, ##34812
1bdc0     F2 FA 01 F6 | 	mov	result1, objptr
1bdc4     1A FA 25 F4 | 	bith	result1, #26
1bdc8     44 00 00 FF 
1bdcc     0C E4 05 F1 | 	add	objptr, ##34828
1bdd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd4     44 00 00 FF 
1bdd8     0C E4 85 F1 | 	sub	objptr, ##34828
1bddc     F2 FA 01 F6 | 	mov	result1, objptr
1bde0     00 08 02 FF 
1bde4     00 FA 45 F5 | 	or	result1, ##68157440
1bde8     44 00 00 FF 
1bdec     08 E4 05 F1 | 	add	objptr, ##34824
1bdf0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf4     44 00 00 FF 
1bdf8     08 E4 85 F1 | 	sub	objptr, ##34824
1bdfc     F2 FA 01 F6 | 	mov	result1, objptr
1be00     00 10 02 FF 
1be04     00 FA 45 F5 | 	or	result1, ##69206016
1be08     44 00 00 FF 
1be0c     18 E4 05 F1 | 	add	objptr, ##34840
1be10     F2 FA 61 FC | 	wrlong	result1, objptr
1be14     44 00 00 FF 
1be18     18 E4 85 F1 | 	sub	objptr, ##34840
1be1c     F2 FA 01 F6 | 	mov	result1, objptr
1be20     00 18 02 FF 
1be24     00 FA 45 F5 | 	or	result1, ##70254592
1be28     44 00 00 FF 
1be2c     14 E4 05 F1 | 	add	objptr, ##34836
1be30     F2 FA 61 FC | 	wrlong	result1, objptr
1be34     44 00 00 FF 
1be38     14 E4 85 F1 | 	sub	objptr, ##34836
1be3c     F2 FA 01 F6 | 	mov	result1, objptr
1be40     00 20 02 FF 
1be44     00 FA 45 F5 | 	or	result1, ##71303168
1be48     44 00 00 FF 
1be4c     10 E4 05 F1 | 	add	objptr, ##34832
1be50     F2 FA 61 FC | 	wrlong	result1, objptr
1be54     44 00 00 FF 
1be58     10 E4 85 F1 | 	sub	objptr, ##34832
1be5c     F2 FA 01 F6 | 	mov	result1, objptr
1be60     00 28 02 FF 
1be64     00 FA 45 F5 | 	or	result1, ##72351744
1be68     44 00 00 FF 
1be6c     1C E4 05 F1 | 	add	objptr, ##34844
1be70     F2 FA 61 FC | 	wrlong	result1, objptr
1be74     44 00 00 FF 
1be78     1C E4 85 F1 | 	sub	objptr, ##34844
1be7c     F2 FA 01 F6 | 	mov	result1, objptr
1be80     00 30 02 FF 
1be84     00 FA 45 F5 | 	or	result1, ##73400320
1be88     44 00 00 FF 
1be8c     20 E4 05 F1 | 	add	objptr, ##34848
1be90     F2 FA 61 FC | 	wrlong	result1, objptr
1be94     44 00 00 FF 
1be98     20 E4 85 F1 | 	sub	objptr, ##34848
1be9c     F2 FA 01 F6 | 	mov	result1, objptr
1bea0     00 38 02 FF 
1bea4     00 FA 45 F5 | 	or	result1, ##74448896
1bea8     43 00 00 FF 
1beac     B4 E4 05 F1 | 	add	objptr, ##34484
1beb0     F2 FA 61 FC | 	wrlong	result1, objptr
1beb4     43 00 00 FF 
1beb8     B4 E4 85 F1 | 	sub	objptr, ##34484
1bebc     F2 FA 01 F6 | 	mov	result1, objptr
1bec0     00 40 02 FF 
1bec4     00 FA 45 F5 | 	or	result1, ##75497472
1bec8     44 00 00 FF 
1becc     38 E4 05 F1 | 	add	objptr, ##34872
1bed0     F2 FA 61 FC | 	wrlong	result1, objptr
1bed4     44 00 00 FF 
1bed8     38 E4 85 F1 | 	sub	objptr, ##34872
1bedc     F2 FA 01 F6 | 	mov	result1, objptr
1bee0     00 48 02 FF 
1bee4     00 FA 45 F5 | 	or	result1, ##76546048
1bee8     44 00 00 FF 
1beec     48 E4 05 F1 | 	add	objptr, ##34888
1bef0     F2 FA 61 FC | 	wrlong	result1, objptr
1bef4     44 00 00 FF 
1bef8     48 E4 85 F1 | 	sub	objptr, ##34888
1befc     F2 FA 01 F6 | 	mov	result1, objptr
1bf00     00 50 02 FF 
1bf04     00 FA 45 F5 | 	or	result1, ##77594624
1bf08     44 00 00 FF 
1bf0c     4C E4 05 F1 | 	add	objptr, ##34892
1bf10     F2 FA 61 FC | 	wrlong	result1, objptr
1bf14     44 00 00 FF 
1bf18     4C E4 85 F1 | 	sub	objptr, ##34892
1bf1c     F2 FA 01 F6 | 	mov	result1, objptr
1bf20     00 58 02 FF 
1bf24     00 FA 45 F5 | 	or	result1, ##78643200
1bf28     44 00 00 FF 
1bf2c     44 E4 05 F1 | 	add	objptr, ##34884
1bf30     F2 FA 61 FC | 	wrlong	result1, objptr
1bf34     44 00 00 FF 
1bf38     44 E4 85 F1 | 	sub	objptr, ##34884
1bf3c     F2 FA 01 F6 | 	mov	result1, objptr
1bf40     00 60 02 FF 
1bf44     00 FA 45 F5 | 	or	result1, ##79691776
1bf48     44 00 00 FF 
1bf4c     3C E4 05 F1 | 	add	objptr, ##34876
1bf50     F2 FA 61 FC | 	wrlong	result1, objptr
1bf54     44 00 00 FF 
1bf58     3C E4 85 F1 | 	sub	objptr, ##34876
1bf5c     F2 FA 01 F6 | 	mov	result1, objptr
1bf60     00 68 02 FF 
1bf64     00 FA 45 F5 | 	or	result1, ##80740352
1bf68     44 00 00 FF 
1bf6c     40 E4 05 F1 | 	add	objptr, ##34880
1bf70     F2 FA 61 FC | 	wrlong	result1, objptr
1bf74     44 00 00 FF 
1bf78     40 E4 85 F1 | 	sub	objptr, ##34880
1bf7c     F2 FA 01 F6 | 	mov	result1, objptr
1bf80     00 70 02 FF 
1bf84     00 FA 45 F5 | 	or	result1, ##81788928
1bf88     44 00 00 FF 
1bf8c     50 E4 05 F1 | 	add	objptr, ##34896
1bf90     F2 FA 61 FC | 	wrlong	result1, objptr
1bf94     44 00 00 FF 
1bf98     50 E4 85 F1 | 	sub	objptr, ##34896
1bf9c     F2 FA 01 F6 | 	mov	result1, objptr
1bfa0     00 78 02 FF 
1bfa4     00 FA 45 F5 | 	or	result1, ##82837504
1bfa8     44 00 00 FF 
1bfac     54 E4 05 F1 | 	add	objptr, ##34900
1bfb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb4     44 00 00 FF 
1bfb8     54 E4 85 F1 | 	sub	objptr, ##34900
1bfbc     F2 FA 01 F6 | 	mov	result1, objptr
1bfc0     00 80 02 FF 
1bfc4     00 FA 45 F5 | 	or	result1, ##83886080
1bfc8     44 00 00 FF 
1bfcc     58 E4 05 F1 | 	add	objptr, ##34904
1bfd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd4     44 00 00 FF 
1bfd8     58 E4 85 F1 | 	sub	objptr, ##34904
1bfdc     F2 FA 01 F6 | 	mov	result1, objptr
1bfe0     00 88 02 FF 
1bfe4     00 FA 45 F5 | 	or	result1, ##84934656
1bfe8     44 00 00 FF 
1bfec     5C E4 05 F1 | 	add	objptr, ##34908
1bff0     F2 FA 61 FC | 	wrlong	result1, objptr
1bff4     44 00 00 FF 
1bff8     5C E4 85 F1 | 	sub	objptr, ##34908
1bffc     F2 FA 01 F6 | 	mov	result1, objptr
1c000     00 90 02 FF 
1c004     00 FA 45 F5 | 	or	result1, ##85983232
1c008     44 00 00 FF 
1c00c     60 E4 05 F1 | 	add	objptr, ##34912
1c010     F2 FA 61 FC | 	wrlong	result1, objptr
1c014     44 00 00 FF 
1c018     60 E4 85 F1 | 	sub	objptr, ##34912
1c01c     F2 FA 01 F6 | 	mov	result1, objptr
1c020     00 98 02 FF 
1c024     00 FA 45 F5 | 	or	result1, ##87031808
1c028     44 00 00 FF 
1c02c     64 E4 05 F1 | 	add	objptr, ##34916
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034     44 00 00 FF 
1c038     64 E4 85 F1 | 	sub	objptr, ##34916
1c03c     F2 FA 01 F6 | 	mov	result1, objptr
1c040     00 A0 02 FF 
1c044     00 FA 45 F5 | 	or	result1, ##88080384
1c048     44 00 00 FF 
1c04c     68 E4 05 F1 | 	add	objptr, ##34920
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054     44 00 00 FF 
1c058     68 E4 85 F1 | 	sub	objptr, ##34920
1c05c     F2 FA 01 F6 | 	mov	result1, objptr
1c060     00 A8 02 FF 
1c064     00 FA 45 F5 | 	or	result1, ##89128960
1c068     44 00 00 FF 
1c06c     6C E4 05 F1 | 	add	objptr, ##34924
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074     44 00 00 FF 
1c078     6C E4 85 F1 | 	sub	objptr, ##34924
1c07c     F2 FA 01 F6 | 	mov	result1, objptr
1c080     00 B0 02 FF 
1c084     00 FA 45 F5 | 	or	result1, ##90177536
1c088     44 00 00 FF 
1c08c     78 E4 05 F1 | 	add	objptr, ##34936
1c090     F2 FA 61 FC | 	wrlong	result1, objptr
1c094     44 00 00 FF 
1c098     78 E4 85 F1 | 	sub	objptr, ##34936
1c09c     F2 FA 01 F6 | 	mov	result1, objptr
1c0a0     00 B8 02 FF 
1c0a4     00 FA 45 F5 | 	or	result1, ##91226112
1c0a8     44 00 00 FF 
1c0ac     70 E4 05 F1 | 	add	objptr, ##34928
1c0b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b4     44 00 00 FF 
1c0b8     70 E4 85 F1 | 	sub	objptr, ##34928
1c0bc     F2 FA 01 F6 | 	mov	result1, objptr
1c0c0     00 C0 02 FF 
1c0c4     00 FA 45 F5 | 	or	result1, ##92274688
1c0c8     44 00 00 FF 
1c0cc     74 E4 05 F1 | 	add	objptr, ##34932
1c0d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d4     44 00 00 FF 
1c0d8     74 E4 85 F1 | 	sub	objptr, ##34932
1c0dc     F2 FA 01 F6 | 	mov	result1, objptr
1c0e0     00 C8 02 FF 
1c0e4     00 FA 45 F5 | 	or	result1, ##93323264
1c0e8     44 00 00 FF 
1c0ec     7C E4 05 F1 | 	add	objptr, ##34940
1c0f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f4     44 00 00 FF 
1c0f8     7C E4 85 F1 | 	sub	objptr, ##34940
1c0fc     F2 FA 01 F6 | 	mov	result1, objptr
1c100     00 D0 02 FF 
1c104     00 FA 45 F5 | 	or	result1, ##94371840
1c108     44 00 00 FF 
1c10c     24 E4 05 F1 | 	add	objptr, ##34852
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     24 E4 85 F1 | 	sub	objptr, ##34852
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     00 D8 02 FF 
1c124     00 FA 45 F5 | 	or	result1, ##95420416
1c128     44 00 00 FF 
1c12c     2C E4 05 F1 | 	add	objptr, ##34860
1c130     F2 FA 61 FC | 	wrlong	result1, objptr
1c134     44 00 00 FF 
1c138     2C E4 85 F1 | 	sub	objptr, ##34860
1c13c     F2 FA 01 F6 | 	mov	result1, objptr
1c140     00 E0 02 FF 
1c144     00 FA 45 F5 | 	or	result1, ##96468992
1c148     44 00 00 FF 
1c14c     30 E4 05 F1 | 	add	objptr, ##34864
1c150     F2 FA 61 FC | 	wrlong	result1, objptr
1c154     44 00 00 FF 
1c158     30 E4 85 F1 | 	sub	objptr, ##34864
1c15c     F2 FA 01 F6 | 	mov	result1, objptr
1c160     00 E8 02 FF 
1c164     00 FA 45 F5 | 	or	result1, ##97517568
1c168     44 00 00 FF 
1c16c     80 E4 05 F1 | 	add	objptr, ##34944
1c170     F2 FA 61 FC | 	wrlong	result1, objptr
1c174     44 00 00 FF 
1c178     80 E4 85 F1 | 	sub	objptr, ##34944
1c17c     F2 FA 01 F6 | 	mov	result1, objptr
1c180     00 F0 02 FF 
1c184     00 FA 45 F5 | 	or	result1, ##98566144
1c188     44 00 00 FF 
1c18c     84 E4 05 F1 | 	add	objptr, ##34948
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     44 00 00 FF 
1c198     84 E4 85 F1 | 	sub	objptr, ##34948
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     00 F8 02 FF 
1c1a4     00 FA 45 F5 | 	or	result1, ##99614720
1c1a8     44 00 00 FF 
1c1ac     88 E4 05 F1 | 	add	objptr, ##34952
1c1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b4     44 00 00 FF 
1c1b8     88 E4 85 F1 | 	sub	objptr, ##34952
1c1bc     F2 FA 01 F6 | 	mov	result1, objptr
1c1c0     39 FA 25 F4 | 	bith	result1, #57
1c1c4     44 00 00 FF 
1c1c8     34 E4 05 F1 | 	add	objptr, ##34868
1c1cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d0     44 00 00 FF 
1c1d4     34 E4 85 F1 | 	sub	objptr, ##34868
1c1d8     F2 FA 01 F6 | 	mov	result1, objptr
1c1dc     00 08 03 FF 
1c1e0     00 FA 45 F5 | 	or	result1, ##101711872
1c1e4     44 00 00 FF 
1c1e8     98 E4 05 F1 | 	add	objptr, ##34968
1c1ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f0     44 00 00 FF 
1c1f4     98 E4 85 F1 | 	sub	objptr, ##34968
1c1f8     F2 FA 01 F6 | 	mov	result1, objptr
1c1fc     00 10 03 FF 
1c200     00 FA 45 F5 | 	or	result1, ##102760448
1c204     44 00 00 FF 
1c208     A0 E4 05 F1 | 	add	objptr, ##34976
1c20c     F2 FA 61 FC | 	wrlong	result1, objptr
1c210     44 00 00 FF 
1c214     A0 E4 85 F1 | 	sub	objptr, ##34976
1c218     F2 FA 01 F6 | 	mov	result1, objptr
1c21c     00 18 03 FF 
1c220     00 FA 45 F5 | 	or	result1, ##103809024
1c224     44 00 00 FF 
1c228     94 E4 05 F1 | 	add	objptr, ##34964
1c22c     F2 FA 61 FC | 	wrlong	result1, objptr
1c230     44 00 00 FF 
1c234     94 E4 85 F1 | 	sub	objptr, ##34964
1c238     F2 FA 01 F6 | 	mov	result1, objptr
1c23c     00 20 03 FF 
1c240     00 FA 45 F5 | 	or	result1, ##104857600
1c244     44 00 00 FF 
1c248     90 E4 05 F1 | 	add	objptr, ##34960
1c24c     F2 FA 61 FC | 	wrlong	result1, objptr
1c250     44 00 00 FF 
1c254     90 E4 85 F1 | 	sub	objptr, ##34960
1c258     F2 FA 01 F6 | 	mov	result1, objptr
1c25c     00 28 03 FF 
1c260     00 FA 45 F5 | 	or	result1, ##105906176
1c264     44 00 00 FF 
1c268     8C E4 05 F1 | 	add	objptr, ##34956
1c26c     F2 FA 61 FC | 	wrlong	result1, objptr
1c270     44 00 00 FF 
1c274     8C E4 85 F1 | 	sub	objptr, ##34956
1c278     F2 FA 01 F6 | 	mov	result1, objptr
1c27c     00 30 03 FF 
1c280     00 FA 45 F5 | 	or	result1, ##106954752
1c284     44 00 00 FF 
1c288     9C E4 05 F1 | 	add	objptr, ##34972
1c28c     F2 FA 61 FC | 	wrlong	result1, objptr
1c290     44 00 00 FF 
1c294     9C E4 85 F1 | 	sub	objptr, ##34972
1c298     F2 FA 01 F6 | 	mov	result1, objptr
1c29c     00 38 03 FF 
1c2a0     00 FA 45 F5 | 	or	result1, ##108003328
1c2a4     44 00 00 FF 
1c2a8     A4 E4 05 F1 | 	add	objptr, ##34980
1c2ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b0     44 00 00 FF 
1c2b4     A4 E4 85 F1 | 	sub	objptr, ##34980
1c2b8     F2 FA 01 F6 | 	mov	result1, objptr
1c2bc     00 40 03 FF 
1c2c0     00 FA 45 F5 | 	or	result1, ##109051904
1c2c4     44 00 00 FF 
1c2c8     A8 E4 05 F1 | 	add	objptr, ##34984
1c2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d0     44 00 00 FF 
1c2d4     A8 E4 85 F1 | 	sub	objptr, ##34984
1c2d8     F2 FA 01 F6 | 	mov	result1, objptr
1c2dc     00 48 03 FF 
1c2e0     00 FA 45 F5 | 	or	result1, ##110100480
1c2e4     44 00 00 FF 
1c2e8     AC E4 05 F1 | 	add	objptr, ##34988
1c2ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f0     44 00 00 FF 
1c2f4     AC E4 85 F1 | 	sub	objptr, ##34988
1c2f8     F2 FA 01 F6 | 	mov	result1, objptr
1c2fc     00 50 03 FF 
1c300     00 FA 45 F5 | 	or	result1, ##111149056
1c304     44 00 00 FF 
1c308     B4 E4 05 F1 | 	add	objptr, ##34996
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     44 00 00 FF 
1c314     B4 E4 85 F1 | 	sub	objptr, ##34996
1c318     F2 FA 01 F6 | 	mov	result1, objptr
1c31c     00 58 03 FF 
1c320     00 FA 45 F5 | 	or	result1, ##112197632
1c324     44 00 00 FF 
1c328     B8 E4 05 F1 | 	add	objptr, ##35000
1c32c     F2 FA 61 FC | 	wrlong	result1, objptr
1c330     44 00 00 FF 
1c334     B8 E4 85 F1 | 	sub	objptr, ##35000
1c338     F2 FA 01 F6 | 	mov	result1, objptr
1c33c     00 60 03 FF 
1c340     00 FA 45 F5 | 	or	result1, ##113246208
1c344     44 00 00 FF 
1c348     BC E4 05 F1 | 	add	objptr, ##35004
1c34c     F2 FA 61 FC | 	wrlong	result1, objptr
1c350     44 00 00 FF 
1c354     BC E4 85 F1 | 	sub	objptr, ##35004
1c358     F2 FA 01 F6 | 	mov	result1, objptr
1c35c     00 68 03 FF 
1c360     00 FA 45 F5 | 	or	result1, ##114294784
1c364     44 00 00 FF 
1c368     C0 E4 05 F1 | 	add	objptr, ##35008
1c36c     F2 FA 61 FC | 	wrlong	result1, objptr
1c370     44 00 00 FF 
1c374     C0 E4 85 F1 | 	sub	objptr, ##35008
1c378     F2 FA 01 F6 | 	mov	result1, objptr
1c37c     00 70 03 FF 
1c380     00 FA 45 F5 | 	or	result1, ##115343360
1c384     44 00 00 FF 
1c388     C4 E4 05 F1 | 	add	objptr, ##35012
1c38c     F2 FA 61 FC | 	wrlong	result1, objptr
1c390     44 00 00 FF 
1c394     C4 E4 85 F1 | 	sub	objptr, ##35012
1c398     F2 FA 01 F6 | 	mov	result1, objptr
1c39c     00 78 03 FF 
1c3a0     00 FA 45 F5 | 	or	result1, ##116391936
1c3a4     44 00 00 FF 
1c3a8     C8 E4 05 F1 | 	add	objptr, ##35016
1c3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b0     44 00 00 FF 
1c3b4     C8 E4 85 F1 | 	sub	objptr, ##35016
1c3b8     F2 FA 01 F6 | 	mov	result1, objptr
1c3bc     58 FA 25 F4 | 	bith	result1, #88
1c3c0     44 00 00 FF 
1c3c4     CC E4 05 F1 | 	add	objptr, ##35020
1c3c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3cc     44 00 00 FF 
1c3d0     CC E4 85 F1 | 	sub	objptr, ##35020
1c3d4     F2 FA 01 F6 | 	mov	result1, objptr
1c3d8     00 88 03 FF 
1c3dc     00 FA 45 F5 | 	or	result1, ##118489088
1c3e0     44 00 00 FF 
1c3e4     D0 E4 05 F1 | 	add	objptr, ##35024
1c3e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3ec     44 00 00 FF 
1c3f0     D0 E4 85 F1 | 	sub	objptr, ##35024
1c3f4     F2 FA 01 F6 | 	mov	result1, objptr
1c3f8     00 90 03 FF 
1c3fc     00 FA 45 F5 | 	or	result1, ##119537664
1c400     44 00 00 FF 
1c404     B0 E4 05 F1 | 	add	objptr, ##34992
1c408     F2 FA 61 FC | 	wrlong	result1, objptr
1c40c     44 00 00 FF 
1c410     B0 E4 85 F1 | 	sub	objptr, ##34992
1c414     F2 FA 01 F6 | 	mov	result1, objptr
1c418     00 98 03 FF 
1c41c     00 FA 45 F5 | 	or	result1, ##120586240
1c420     43 00 00 FF 
1c424     A8 E4 05 F1 | 	add	objptr, ##34472
1c428     F2 FA 61 FC | 	wrlong	result1, objptr
1c42c     43 00 00 FF 
1c430     A8 E4 85 F1 | 	sub	objptr, ##34472
1c434     F2 FA 01 F6 | 	mov	result1, objptr
1c438     00 A0 03 FF 
1c43c     00 FA 45 F5 | 	or	result1, ##121634816
1c440     44 00 00 FF 
1c444     D4 E4 05 F1 | 	add	objptr, ##35028
1c448     F2 FA 61 FC | 	wrlong	result1, objptr
1c44c     44 00 00 FF 
1c450     D4 E4 85 F1 | 	sub	objptr, ##35028
1c454     F2 FA 01 F6 | 	mov	result1, objptr
1c458     00 A8 03 FF 
1c45c     00 FA 45 F5 | 	or	result1, ##122683392
1c460     44 00 00 FF 
1c464     D8 E4 05 F1 | 	add	objptr, ##35032
1c468     F2 FA 61 FC | 	wrlong	result1, objptr
1c46c     44 00 00 FF 
1c470     D8 E4 85 F1 | 	sub	objptr, ##35032
1c474     F2 FA 01 F6 | 	mov	result1, objptr
1c478     00 B0 03 FF 
1c47c     00 FA 45 F5 | 	or	result1, ##123731968
1c480     44 00 00 FF 
1c484     EC E4 05 F1 | 	add	objptr, ##35052
1c488     F2 FA 61 FC | 	wrlong	result1, objptr
1c48c     44 00 00 FF 
1c490     EC E4 85 F1 | 	sub	objptr, ##35052
1c494     F2 FA 01 F6 | 	mov	result1, objptr
1c498     00 B8 03 FF 
1c49c     00 FA 45 F5 | 	or	result1, ##124780544
1c4a0     44 00 00 FF 
1c4a4     E8 E4 05 F1 | 	add	objptr, ##35048
1c4a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4ac     44 00 00 FF 
1c4b0     E8 E4 85 F1 | 	sub	objptr, ##35048
1c4b4     F2 FA 01 F6 | 	mov	result1, objptr
1c4b8     77 FA 25 F4 | 	bith	result1, #119
1c4bc     44 00 00 FF 
1c4c0     E0 E4 05 F1 | 	add	objptr, ##35040
1c4c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4c8     44 00 00 FF 
1c4cc     E0 E4 85 F1 | 	sub	objptr, ##35040
1c4d0     F2 FA 01 F6 | 	mov	result1, objptr
1c4d4     00 C8 03 FF 
1c4d8     00 FA 45 F5 | 	or	result1, ##126877696
1c4dc     44 00 00 FF 
1c4e0     DC E4 05 F1 | 	add	objptr, ##35036
1c4e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e8     44 00 00 FF 
1c4ec     DC E4 85 F1 | 	sub	objptr, ##35036
1c4f0     F2 FA 01 F6 | 	mov	result1, objptr
1c4f4     00 D0 03 FF 
1c4f8     00 FA 45 F5 | 	or	result1, ##127926272
1c4fc     44 00 00 FF 
1c500     FC E4 05 F1 | 	add	objptr, ##35068
1c504     F2 FA 61 FC | 	wrlong	result1, objptr
1c508     44 00 00 FF 
1c50c     FC E4 85 F1 | 	sub	objptr, ##35068
1c510     F2 FA 01 F6 | 	mov	result1, objptr
1c514     00 D8 03 FF 
1c518     00 FA 45 F5 | 	or	result1, ##128974848
1c51c     44 00 00 FF 
1c520     F0 E4 05 F1 | 	add	objptr, ##35056
1c524     F2 FA 61 FC | 	wrlong	result1, objptr
1c528     44 00 00 FF 
1c52c     F0 E4 85 F1 | 	sub	objptr, ##35056
1c530     F2 FA 01 F6 | 	mov	result1, objptr
1c534     96 FA 25 F4 | 	bith	result1, #150
1c538     44 00 00 FF 
1c53c     F4 E4 05 F1 | 	add	objptr, ##35060
1c540     F2 FA 61 FC | 	wrlong	result1, objptr
1c544     44 00 00 FF 
1c548     F4 E4 85 F1 | 	sub	objptr, ##35060
1c54c     F2 FA 01 F6 | 	mov	result1, objptr
1c550     00 E8 03 FF 
1c554     00 FA 45 F5 | 	or	result1, ##131072000
1c558     44 00 00 FF 
1c55c     F8 E4 05 F1 | 	add	objptr, ##35064
1c560     F2 FA 61 FC | 	wrlong	result1, objptr
1c564     44 00 00 FF 
1c568     F8 E4 85 F1 | 	sub	objptr, ##35064
1c56c     F2 FA 01 F6 | 	mov	result1, objptr
1c570     B5 FA 25 F4 | 	bith	result1, #181
1c574     44 00 00 FF 
1c578     00 E5 05 F1 | 	add	objptr, ##35072
1c57c     F2 FA 61 FC | 	wrlong	result1, objptr
1c580     44 00 00 FF 
1c584     00 E5 85 F1 | 	sub	objptr, ##35072
1c588     F2 FA 01 F6 | 	mov	result1, objptr
1c58c     D4 FA 25 F4 | 	bith	result1, #212
1c590     44 00 00 FF 
1c594     04 E5 05 F1 | 	add	objptr, ##35076
1c598     F2 FA 61 FC | 	wrlong	result1, objptr
1c59c     44 00 00 FF 
1c5a0     04 E5 85 F1 | 	sub	objptr, ##35076
1c5a4     F2 FA 01 F6 | 	mov	result1, objptr
1c5a8     1B FA 25 F4 | 	bith	result1, #27
1c5ac     44 00 00 FF 
1c5b0     08 E5 05 F1 | 	add	objptr, ##35080
1c5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b8     44 00 00 FF 
1c5bc     08 E5 85 F1 | 	sub	objptr, ##35080
1c5c0     F2 FA 01 F6 | 	mov	result1, objptr
1c5c4     00 08 04 FF 
1c5c8     00 FA 45 F5 | 	or	result1, ##135266304
1c5cc     44 00 00 FF 
1c5d0     0C E5 05 F1 | 	add	objptr, ##35084
1c5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d8     44 00 00 FF 
1c5dc     0C E5 85 F1 | 	sub	objptr, ##35084
1c5e0     F2 FA 01 F6 | 	mov	result1, objptr
1c5e4     00 10 04 FF 
1c5e8     00 FA 45 F5 | 	or	result1, ##136314880
1c5ec     44 00 00 FF 
1c5f0     10 E5 05 F1 | 	add	objptr, ##35088
1c5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f8     44 00 00 FF 
1c5fc     10 E5 85 F1 | 	sub	objptr, ##35088
1c600     F2 FA 01 F6 | 	mov	result1, objptr
1c604     00 18 04 FF 
1c608     00 FA 45 F5 | 	or	result1, ##137363456
1c60c     44 00 00 FF 
1c610     14 E5 05 F1 | 	add	objptr, ##35092
1c614     F2 FA 61 FC | 	wrlong	result1, objptr
1c618     44 00 00 FF 
1c61c     14 E5 85 F1 | 	sub	objptr, ##35092
1c620     F2 FA 01 F6 | 	mov	result1, objptr
1c624     00 20 04 FF 
1c628     00 FA 45 F5 | 	or	result1, ##138412032
1c62c     44 00 00 FF 
1c630     1C E5 05 F1 | 	add	objptr, ##35100
1c634     F2 FA 61 FC | 	wrlong	result1, objptr
1c638     44 00 00 FF 
1c63c     1C E5 85 F1 | 	sub	objptr, ##35100
1c640     F2 FA 01 F6 | 	mov	result1, objptr
1c644     00 28 04 FF 
1c648     00 FA 45 F5 | 	or	result1, ##139460608
1c64c     44 00 00 FF 
1c650     20 E5 05 F1 | 	add	objptr, ##35104
1c654     F2 FA 61 FC | 	wrlong	result1, objptr
1c658     44 00 00 FF 
1c65c     20 E5 85 F1 | 	sub	objptr, ##35104
1c660     F2 FA 01 F6 | 	mov	result1, objptr
1c664     00 30 04 FF 
1c668     00 FA 45 F5 | 	or	result1, ##140509184
1c66c     44 00 00 FF 
1c670     24 E5 05 F1 | 	add	objptr, ##35108
1c674     F2 FA 61 FC | 	wrlong	result1, objptr
1c678     44 00 00 FF 
1c67c     24 E5 85 F1 | 	sub	objptr, ##35108
1c680     F2 FA 01 F6 | 	mov	result1, objptr
1c684     00 38 04 FF 
1c688     00 FA 45 F5 | 	or	result1, ##141557760
1c68c     44 00 00 FF 
1c690     18 E5 05 F1 | 	add	objptr, ##35096
1c694     F2 FA 61 FC | 	wrlong	result1, objptr
1c698     44 00 00 FF 
1c69c     18 E5 85 F1 | 	sub	objptr, ##35096
1c6a0     F2 FA 01 F6 | 	mov	result1, objptr
1c6a4     00 40 04 FF 
1c6a8     00 FA 45 F5 | 	or	result1, ##142606336
1c6ac     44 00 00 FF 
1c6b0     28 E5 05 F1 | 	add	objptr, ##35112
1c6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b8     44 00 00 FF 
1c6bc     28 E5 85 F1 | 	sub	objptr, ##35112
1c6c0     F2 FA 01 F6 | 	mov	result1, objptr
1c6c4     00 48 04 FF 
1c6c8     00 FA 45 F5 | 	or	result1, ##143654912
1c6cc     44 00 00 FF 
1c6d0     5C E5 05 F1 | 	add	objptr, ##35164
1c6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d8     44 00 00 FF 
1c6dc     5C E5 85 F1 | 	sub	objptr, ##35164
1c6e0     F2 FA 01 F6 | 	mov	result1, objptr
1c6e4     00 50 04 FF 
1c6e8     00 FA 45 F5 | 	or	result1, ##144703488
1c6ec     44 00 00 FF 
1c6f0     54 E5 05 F1 | 	add	objptr, ##35156
1c6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f8     44 00 00 FF 
1c6fc     54 E5 85 F1 | 	sub	objptr, ##35156
1c700     F2 FA 01 F6 | 	mov	result1, objptr
1c704     00 58 04 FF 
1c708     00 FA 45 F5 | 	or	result1, ##145752064
1c70c     44 00 00 FF 
1c710     2C E5 05 F1 | 	add	objptr, ##35116
1c714     F2 FA 61 FC | 	wrlong	result1, objptr
1c718     44 00 00 FF 
1c71c     2C E5 85 F1 | 	sub	objptr, ##35116
1c720     F2 FA 01 F6 | 	mov	result1, objptr
1c724     00 60 04 FF 
1c728     00 FA 45 F5 | 	or	result1, ##146800640
1c72c     44 00 00 FF 
1c730     30 E5 05 F1 | 	add	objptr, ##35120
1c734     F2 FA 61 FC | 	wrlong	result1, objptr
1c738     44 00 00 FF 
1c73c     30 E5 85 F1 | 	sub	objptr, ##35120
1c740     F2 FA 01 F6 | 	mov	result1, objptr
1c744     00 68 04 FF 
1c748     00 FA 45 F5 | 	or	result1, ##147849216
1c74c     44 00 00 FF 
1c750     4C E5 05 F1 | 	add	objptr, ##35148
1c754     F2 FA 61 FC | 	wrlong	result1, objptr
1c758     44 00 00 FF 
1c75c     4C E5 85 F1 | 	sub	objptr, ##35148
1c760     F2 FA 01 F6 | 	mov	result1, objptr
1c764     00 70 04 FF 
1c768     00 FA 45 F5 | 	or	result1, ##148897792
1c76c     44 00 00 FF 
1c770     50 E5 05 F1 | 	add	objptr, ##35152
1c774     F2 FA 61 FC | 	wrlong	result1, objptr
1c778     44 00 00 FF 
1c77c     50 E5 85 F1 | 	sub	objptr, ##35152
1c780                 | _init_commands_ret
1c780     2D 00 64 FD | 	ret
1c784                 | 
1c784                 | ' 
1c784                 | ' ''--------------------------------Error strings -------------------------------------
1c784                 | ' sub init_audio
1c784                 | _init_audio
1c784     06 4A 05 F6 | 	mov	COUNT_, #6
1c788     A8 00 A0 FD | 	call	#pushregs_
1c78c     00 C0 1F FF 
1c790     00 1E 06 F6 | 	mov	local01, ##1065353216
1c794                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c794                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c794                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c794                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c794                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c794                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c794                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c794                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c794                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c794     00 20 06 F6 | 	mov	local02, #0
1c798                 | LR__2320
1c798     10 23 02 F6 | 	mov	local03, local02
1c79c     01 22 66 F0 | 	shl	local03, #1
1c7a0     58 7F 23 FF 
1c7a4     00 24 06 F6 | 	mov	local04, ##1191096320
1c7a8     10 13 52 F6 | 	abs	arg01, local02 wc
1c7ac     1F 26 C6 C9 |  if_b	decod	local05, #31
1c7b0     00 26 06 36 |  if_ae	mov	local05, #0
1c7b4     20 67 B0 FD | 	call	#__system___float_fromuns
1c7b8     13 FB 61 F5 | 	xor	result1, local05
1c7bc     FD 12 02 F6 | 	mov	arg01, result1
1c7c0     87 24 20 FF 
1c7c4     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c7c8     10 6B B0 FD | 	call	#__system___float_mul
1c7cc     FD 12 02 F6 | 	mov	arg01, result1
1c7d0     00 00 22 FF 
1c7d4     00 14 06 F6 | 	mov	arg02, ##1140850688
1c7d8     04 6D B0 FD | 	call	#__system___float_div
1c7dc     FD 12 02 F6 | 	mov	arg01, result1
1c7e0     34 74 B0 FD | 	call	#__system____builtin_sinf
1c7e4     FD 14 02 F6 | 	mov	arg02, result1
1c7e8     12 13 02 F6 | 	mov	arg01, local04
1c7ec     EC 6A B0 FD | 	call	#__system___float_mul
1c7f0     FD 12 02 F6 | 	mov	arg01, result1
1c7f4     01 14 06 F6 | 	mov	arg02, #1
1c7f8     A8 6F B0 FD | 	call	#__system___float_tointeger
1c7fc     FD 14 02 F6 | 	mov	arg02, result1
1c800     11 13 02 F6 | 	mov	arg01, local03
1c804     68 0D B0 FD | 	call	#_psdpoke
1c808     01 20 06 F1 | 	add	local02, #1
1c80c     02 00 00 FF 
1c810     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c814     80 FF 9F CD |  if_b	jmp	#LR__2320
1c818                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c818     00 20 06 F6 | 	mov	local02, #0
1c81c                 | LR__2321
1c81c     10 15 02 F6 | 	mov	arg02, local02
1c820     01 14 66 F0 | 	shl	arg02, #1
1c824     0B 12 C6 F9 | 	decod	arg01, #11
1c828     0A 13 02 F1 | 	add	arg01, arg02
1c82c     10 25 02 F6 | 	mov	local04, local02
1c830     07 24 66 F0 | 	shl	local04, #7
1c834     10 25 82 F1 | 	sub	local04, local02
1c838     C0 FF 7F FF 
1c83c     00 15 06 F6 | 	mov	arg02, ##-32512
1c840     12 15 02 F1 | 	add	arg02, local04
1c844     28 0D B0 FD | 	call	#_psdpoke
1c848     09 24 C6 F9 | 	decod	local04, #9
1c84c     10 25 02 F1 | 	add	local04, local02
1c850     01 24 66 F0 | 	shl	local04, #1
1c854     0B 12 C6 F9 | 	decod	arg01, #11
1c858     12 13 02 F1 | 	add	arg01, local04
1c85c     10 27 02 F6 | 	mov	local05, local02
1c860     07 26 66 F0 | 	shl	local05, #7
1c864     10 27 82 F1 | 	sub	local05, local02
1c868     3F 00 00 FF 
1c86c     00 15 06 F6 | 	mov	arg02, ##32512
1c870     13 15 82 F1 | 	sub	arg02, local05
1c874     F8 0C B0 FD | 	call	#_psdpoke
1c878     01 20 06 F1 | 	add	local02, #1
1c87c     01 00 00 FF 
1c880     00 20 56 F2 | 	cmps	local02, ##512 wc
1c884     94 FF 9F CD |  if_b	jmp	#LR__2321
1c888                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c888     00 20 06 F6 | 	mov	local02, #0
1c88c                 | LR__2322
1c88c     10 27 02 F6 | 	mov	local05, local02
1c890     01 26 66 F0 | 	shl	local05, #1
1c894     0C 12 C6 F9 | 	decod	arg01, #12
1c898     13 13 02 F1 | 	add	arg01, local05
1c89c     10 27 02 F6 | 	mov	local05, local02
1c8a0     06 26 66 F0 | 	shl	local05, #6
1c8a4     10 27 82 F1 | 	sub	local05, local02
1c8a8     C1 FF 7F FF 
1c8ac     00 14 06 F6 | 	mov	arg02, ##-32256
1c8b0     13 15 02 F1 | 	add	arg02, local05
1c8b4     B8 0C B0 FD | 	call	#_psdpoke
1c8b8     01 20 06 F1 | 	add	local02, #1
1c8bc     02 00 00 FF 
1c8c0     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c8c4     C4 FF 9F CD |  if_b	jmp	#LR__2322
1c8c8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c8c8     00 20 06 F6 | 	mov	local02, #0
1c8cc                 | LR__2323
1c8cc     10 27 02 F6 | 	mov	local05, local02
1c8d0     01 26 66 F0 | 	shl	local05, #1
1c8d4     0C 00 00 FF 
1c8d8     00 12 06 F6 | 	mov	arg01, ##6144
1c8dc     13 13 02 F1 | 	add	arg01, local05
1c8e0     C0 FF 7F FF 
1c8e4     A8 14 06 F6 | 	mov	arg02, ##-32600
1c8e8     84 0C B0 FD | 	call	#_psdpoke
1c8ec     01 20 06 F1 | 	add	local02, #1
1c8f0     80 20 56 F2 | 	cmps	local02, #128 wc
1c8f4     D4 FF 9F CD |  if_b	jmp	#LR__2323
1c8f8     80 20 06 F6 | 	mov	local02, #128
1c8fc                 | LR__2324
1c8fc     10 27 02 F6 | 	mov	local05, local02
1c900     01 26 66 F0 | 	shl	local05, #1
1c904     0C 00 00 FF 
1c908     00 12 06 F6 | 	mov	arg01, ##6144
1c90c     13 13 02 F1 | 	add	arg01, local05
1c910     3F 00 00 FF 
1c914     58 15 06 F6 | 	mov	arg02, ##32600
1c918     54 0C B0 FD | 	call	#_psdpoke
1c91c     01 20 06 F1 | 	add	local02, #1
1c920     02 00 00 FF 
1c924     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c928     D0 FF 9F CD |  if_b	jmp	#LR__2324
1c92c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c92c     00 20 06 F6 | 	mov	local02, #0
1c930                 | LR__2325
1c930     10 27 02 F6 | 	mov	local05, local02
1c934     01 26 66 F0 | 	shl	local05, #1
1c938     0D 12 C6 F9 | 	decod	arg01, #13
1c93c     13 13 02 F1 | 	add	arg01, local05
1c940     C0 FF 7F FF 
1c944     A8 14 06 F6 | 	mov	arg02, ##-32600
1c948     24 0C B0 FD | 	call	#_psdpoke
1c94c     01 20 06 F1 | 	add	local02, #1
1c950     01 00 00 FF 
1c954     00 20 56 F2 | 	cmps	local02, ##512 wc
1c958     D4 FF 9F CD |  if_b	jmp	#LR__2325
1c95c     09 20 C6 F9 | 	decod	local02, #9
1c960                 | LR__2326
1c960     10 27 02 F6 | 	mov	local05, local02
1c964     01 26 66 F0 | 	shl	local05, #1
1c968     0D 12 C6 F9 | 	decod	arg01, #13
1c96c     13 13 02 F1 | 	add	arg01, local05
1c970     3F 00 00 FF 
1c974     58 15 06 F6 | 	mov	arg02, ##32600
1c978     F4 0B B0 FD | 	call	#_psdpoke
1c97c     01 20 06 F1 | 	add	local02, #1
1c980     02 00 00 FF 
1c984     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c988     D4 FF 9F CD |  if_b	jmp	#LR__2326
1c98c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1c98c     00 20 06 F6 | 	mov	local02, #0
1c990                 | LR__2327
1c990     10 27 02 F6 | 	mov	local05, local02
1c994     01 26 66 F0 | 	shl	local05, #1
1c998     14 00 00 FF 
1c99c     00 12 06 F6 | 	mov	arg01, ##10240
1c9a0     13 13 02 F1 | 	add	arg01, local05
1c9a4     C0 FF 7F FF 
1c9a8     A8 14 06 F6 | 	mov	arg02, ##-32600
1c9ac     C0 0B B0 FD | 	call	#_psdpoke
1c9b0     01 20 06 F1 | 	add	local02, #1
1c9b4     00 21 56 F2 | 	cmps	local02, #256 wc
1c9b8     D4 FF 9F CD |  if_b	jmp	#LR__2327
1c9bc     00 21 06 F6 | 	mov	local02, #256
1c9c0                 | LR__2328
1c9c0     10 27 02 F6 | 	mov	local05, local02
1c9c4     01 26 66 F0 | 	shl	local05, #1
1c9c8     14 00 00 FF 
1c9cc     00 12 06 F6 | 	mov	arg01, ##10240
1c9d0     13 13 02 F1 | 	add	arg01, local05
1c9d4     3F 00 00 FF 
1c9d8     58 15 06 F6 | 	mov	arg02, ##32600
1c9dc     90 0B B0 FD | 	call	#_psdpoke
1c9e0     01 20 06 F1 | 	add	local02, #1
1c9e4     02 00 00 FF 
1c9e8     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c9ec     D0 FF 9F CD |  if_b	jmp	#LR__2328
1c9f0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1c9f0     18 00 00 FF 
1c9f4     00 20 06 F6 | 	mov	local02, ##12288
1c9f8                 | LR__2329
1c9f8     10 13 02 F6 | 	mov	arg01, local02
1c9fc     00 14 06 F6 | 	mov	arg02, #0
1ca00     24 0B B0 FD | 	call	#_pslpoke
1ca04     04 20 06 F1 | 	add	local02, #4
1ca08     77 00 00 FF 
1ca0c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1ca10     E4 FF 9F CD |  if_b	jmp	#LR__2329
1ca14                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1ca14     00 20 06 F6 | 	mov	local02, #0
1ca18                 | LR__2330
1ca18     10 27 02 F6 | 	mov	local05, local02
1ca1c     01 26 66 F0 | 	shl	local05, #1
1ca20     78 00 00 FF 
1ca24     00 22 06 F6 | 	mov	local03, ##61440
1ca28     13 23 02 F1 | 	add	local03, local05
1ca2c     14 00 00 FF 
1ca30     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1ca34     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ca38     14 00 00 FF 
1ca3c     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1ca40     10 12 06 F1 | 	add	arg01, #16
1ca44     10 15 02 F6 | 	mov	arg02, local02
1ca48     01 14 66 F0 | 	shl	arg02, #1
1ca4c     0A 13 02 F1 | 	add	arg01, arg02
1ca50     09 15 E2 FA | 	rdword	arg02, arg01
1ca54     11 13 02 F6 | 	mov	arg01, local03
1ca58     14 0B B0 FD | 	call	#_psdpoke
1ca5c     01 20 06 F1 | 	add	local02, #1
1ca60     02 00 00 FF 
1ca64     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca68     AC FF 9F CD |  if_b	jmp	#LR__2330
1ca6c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1ca6c     00 20 06 F6 | 	mov	local02, #0
1ca70                 | LR__2331
1ca70     10 27 02 F6 | 	mov	local05, local02
1ca74     01 26 66 F0 | 	shl	local05, #1
1ca78     7C 00 00 FF 
1ca7c     00 22 06 F6 | 	mov	local03, ##63488
1ca80     13 23 02 F1 | 	add	local03, local05
1ca84     10 00 00 FF 
1ca88     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1ca8c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ca90     10 00 00 FF 
1ca94     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1ca98     10 12 06 F1 | 	add	arg01, #16
1ca9c     10 15 02 F6 | 	mov	arg02, local02
1caa0     01 14 66 F0 | 	shl	arg02, #1
1caa4     0A 13 02 F1 | 	add	arg01, arg02
1caa8     09 15 E2 FA | 	rdword	arg02, arg01
1caac     11 13 02 F6 | 	mov	arg01, local03
1cab0     BC 0A B0 FD | 	call	#_psdpoke
1cab4     01 20 06 F1 | 	add	local02, #1
1cab8     02 00 00 FF 
1cabc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cac0     AC FF 9F CD |  if_b	jmp	#LR__2331
1cac4                 | ' 
1cac4                 | ' 
1cac4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cac4     00 20 06 F6 | 	mov	local02, #0
1cac8     0C 00 00 FF 
1cacc     D8 E4 05 F1 | 	add	objptr, ##6360
1cad0     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cad4                 | LR__2332
1cad4     10 27 02 F6 | 	mov	local05, local02
1cad8     01 26 66 F0 | 	shl	local05, #1
1cadc     F2 26 02 F1 | 	add	local05, objptr
1cae0     10 23 02 F6 | 	mov	local03, local02
1cae4     08 22 66 F0 | 	shl	local03, #8
1cae8     7F 00 00 FF 
1caec     00 29 06 F6 | 	mov	local06, ##65280
1caf0     11 29 82 F1 | 	sub	local06, local03
1caf4     13 29 52 FC | 	wrword	local06, local05
1caf8     01 20 06 F1 | 	add	local02, #1
1cafc     00 21 56 F2 | 	cmps	local02, #256 wc
1cb00     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cb04                 | LR__2333
1cb04     0C 00 00 FF 
1cb08     D8 E4 85 F1 | 	sub	objptr, ##6360
1cb0c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cb0c     00 20 06 F6 | 	mov	local02, #0
1cb10                 | LR__2334
1cb10     10 27 02 F6 | 	mov	local05, local02
1cb14     01 26 66 F0 | 	shl	local05, #1
1cb18     0D 00 00 FF 
1cb1c     D8 E4 05 F1 | 	add	objptr, ##6872
1cb20     F2 26 02 F1 | 	add	local05, objptr
1cb24     80 BF 23 FF 
1cb28     00 12 06 F6 | 	mov	arg01, ##1199505408
1cb2c     0F 15 02 F6 | 	mov	arg02, local01
1cb30     0D 00 00 FF 
1cb34     D8 E4 85 F1 | 	sub	objptr, ##6872
1cb38     A0 67 B0 FD | 	call	#__system___float_mul
1cb3c     FD 12 02 F6 | 	mov	arg01, result1
1cb40     01 14 06 F6 | 	mov	arg02, #1
1cb44     5C 6C B0 FD | 	call	#__system___float_tointeger
1cb48     13 FB 51 FC | 	wrword	result1, local05
1cb4c     0F 13 02 F6 | 	mov	arg01, local01
1cb50     CC BC 1F FF 
1cb54     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cb58     80 67 B0 FD | 	call	#__system___float_mul
1cb5c     FD 1E 02 F6 | 	mov	local01, result1
1cb60     01 20 06 F1 | 	add	local02, #1
1cb64     00 21 56 F2 | 	cmps	local02, #256 wc
1cb68     A4 FF 9F CD |  if_b	jmp	#LR__2334
1cb6c     0E 00 00 FF 
1cb70     D6 E4 05 F1 | 	add	objptr, ##7382
1cb74     F2 00 58 FC | 	wrword	#0, objptr
1cb78                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cb78     00 20 06 F6 | 	mov	local02, #0
1cb7c     02 E4 05 F1 | 	add	objptr, #2
1cb80     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cb84                 | LR__2335
1cb84     10 27 02 F6 | 	mov	local05, local02
1cb88     01 26 66 F0 | 	shl	local05, #1
1cb8c     F2 26 02 F1 | 	add	local05, objptr
1cb90     7F 00 80 FF 
1cb94     13 01 5A FC | 	wrword	##65280, local05
1cb98     01 20 06 F1 | 	add	local02, #1
1cb9c     FF 20 56 F2 | 	cmps	local02, #255 wc
1cba0     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cba4                 | LR__2336
1cba4     FE E5 05 F1 | 	add	objptr, #510
1cba8     F2 00 58 FC | 	wrword	#0, objptr
1cbac                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cbac     00 20 06 F6 | 	mov	local02, #0
1cbb0     02 E4 05 F1 | 	add	objptr, #2
1cbb4     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cbb8                 | LR__2337
1cbb8     10 27 02 F6 | 	mov	local05, local02
1cbbc     01 26 66 F0 | 	shl	local05, #1
1cbc0     F2 26 02 F1 | 	add	local05, objptr
1cbc4     10 29 02 F6 | 	mov	local06, local02
1cbc8     0C 28 66 F0 | 	shl	local06, #12
1cbcc     13 29 52 FC | 	wrword	local06, local05
1cbd0     01 20 06 F1 | 	add	local02, #1
1cbd4     10 20 56 F2 | 	cmps	local02, #16 wc
1cbd8     DC FF 9F CD |  if_b	jmp	#LR__2337
1cbdc                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cbdc     10 20 06 F6 | 	mov	local02, #16
1cbe0                 | LR__2338
1cbe0     10 27 02 F6 | 	mov	local05, local02
1cbe4     01 26 66 F0 | 	shl	local05, #1
1cbe8     F2 26 02 F1 | 	add	local05, objptr
1cbec     7F 00 80 FF 
1cbf0     13 01 5A FC | 	wrword	##65280, local05
1cbf4     01 20 06 F1 | 	add	local02, #1
1cbf8     F0 20 16 F2 | 	cmp	local02, #240 wc
1cbfc     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cc00                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cc00     F0 20 06 F6 | 	mov	local02, #240
1cc04                 | LR__2339
1cc04     10 27 02 F6 | 	mov	local05, local02
1cc08     01 26 66 F0 | 	shl	local05, #1
1cc0c     F2 26 02 F1 | 	add	local05, objptr
1cc10     FF 22 06 F6 | 	mov	local03, #255
1cc14     10 23 82 F1 | 	sub	local03, local02
1cc18     0C 22 66 F0 | 	shl	local03, #12
1cc1c     13 23 52 FC | 	wrword	local03, local05
1cc20     01 20 06 F1 | 	add	local02, #1
1cc24     00 21 16 F2 | 	cmp	local02, #256 wc
1cc28     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cc2c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cc2c     00 20 06 F6 | 	mov	local02, #0
1cc30     01 00 00 FF 
1cc34     00 E4 05 F1 | 	add	objptr, ##512
1cc38                 | LR__2340
1cc38     10 27 02 F6 | 	mov	local05, local02
1cc3c     01 26 66 F0 | 	shl	local05, #1
1cc40     F2 26 02 F1 | 	add	local05, objptr
1cc44     10 29 02 F6 | 	mov	local06, local02
1cc48     08 28 66 F0 | 	shl	local06, #8
1cc4c     13 29 52 FC | 	wrword	local06, local05
1cc50     01 20 06 F1 | 	add	local02, #1
1cc54     00 21 56 F2 | 	cmps	local02, #256 wc
1cc58     DC FF 9F CD |  if_b	jmp	#LR__2340
1cc5c                 | LR__2341
1cc5c     FE E5 05 F1 | 	add	objptr, #510
1cc60     F2 00 58 FC | 	wrword	#0, objptr
1cc64                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cc64     00 20 06 F6 | 	mov	local02, #0
1cc68     02 E4 05 F1 | 	add	objptr, #2
1cc6c     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cc70                 | LR__2342
1cc70     10 27 02 F6 | 	mov	local05, local02
1cc74     01 26 66 F0 | 	shl	local05, #1
1cc78     F2 26 02 F1 | 	add	local05, objptr
1cc7c     10 29 02 F6 | 	mov	local06, local02
1cc80     04 28 66 F0 | 	shl	local06, #4
1cc84     10 29 02 F1 | 	add	local06, local02
1cc88     04 28 66 F0 | 	shl	local06, #4
1cc8c     13 29 52 FC | 	wrword	local06, local05
1cc90     01 20 06 F1 | 	add	local02, #1
1cc94     F0 20 56 F2 | 	cmps	local02, #240 wc
1cc98     D4 FF 9F CD |  if_b	jmp	#LR__2342
1cc9c     F0 20 06 F6 | 	mov	local02, #240
1cca0                 | LR__2343
1cca0     10 27 02 F6 | 	mov	local05, local02
1cca4     01 26 66 F0 | 	shl	local05, #1
1cca8     F2 26 02 F1 | 	add	local05, objptr
1ccac     FF 22 06 F6 | 	mov	local03, #255
1ccb0     10 23 82 F1 | 	sub	local03, local02
1ccb4     0C 22 66 F0 | 	shl	local03, #12
1ccb8     13 23 52 FC | 	wrword	local03, local05
1ccbc     01 20 06 F1 | 	add	local02, #1
1ccc0     00 21 16 F2 | 	cmp	local02, #256 wc
1ccc4     D8 FF 9F CD |  if_b	jmp	#LR__2343
1ccc8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ccc8     00 20 06 F6 | 	mov	local02, #0
1cccc     01 00 00 FF 
1ccd0     00 E4 05 F1 | 	add	objptr, ##512
1ccd4                 | LR__2344
1ccd4     10 27 02 F6 | 	mov	local05, local02
1ccd8     01 26 66 F0 | 	shl	local05, #1
1ccdc     F2 26 02 F1 | 	add	local05, objptr
1cce0     10 29 02 F6 | 	mov	local06, local02
1cce4     09 28 66 F0 | 	shl	local06, #9
1cce8     13 29 52 FC | 	wrword	local06, local05
1ccec     FF 26 06 F6 | 	mov	local05, #255
1ccf0     10 27 82 F1 | 	sub	local05, local02
1ccf4     01 26 66 F0 | 	shl	local05, #1
1ccf8     F2 26 02 F1 | 	add	local05, objptr
1ccfc     10 29 02 F6 | 	mov	local06, local02
1cd00     09 28 66 F0 | 	shl	local06, #9
1cd04     13 29 52 FC | 	wrword	local06, local05
1cd08     01 20 06 F1 | 	add	local02, #1
1cd0c     80 20 56 F2 | 	cmps	local02, #128 wc
1cd10     C0 FF 9F CD |  if_b	jmp	#LR__2344
1cd14                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cd14     00 20 06 F6 | 	mov	local02, #0
1cd18     01 00 00 FF 
1cd1c     00 E4 05 F1 | 	add	objptr, ##512
1cd20                 | LR__2345
1cd20     10 27 02 F6 | 	mov	local05, local02
1cd24     01 26 66 F0 | 	shl	local05, #1
1cd28     F2 26 02 F1 | 	add	local05, objptr
1cd2c     10 29 02 F6 | 	mov	local06, local02
1cd30     0D 28 66 F0 | 	shl	local06, #13
1cd34     13 29 52 FC | 	wrword	local06, local05
1cd38     01 20 06 F1 | 	add	local02, #1
1cd3c     08 20 56 F2 | 	cmps	local02, #8 wc
1cd40     DC FF 9F CD |  if_b	jmp	#LR__2345
1cd44                 | LR__2346
1cd44                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cd44     08 20 06 F6 | 	mov	local02, #8
1cd48     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1cd4c                 | LR__2347
1cd4c     10 27 02 F6 | 	mov	local05, local02
1cd50     01 26 66 F0 | 	shl	local05, #1
1cd54     F2 26 02 F1 | 	add	local05, objptr
1cd58     10 1F 02 F6 | 	mov	local01, local02
1cd5c     08 1E 86 F1 | 	sub	local01, #8
1cd60     0B 1E 66 F0 | 	shl	local01, #11
1cd64     7F 00 00 FF 
1cd68     00 29 06 F6 | 	mov	local06, ##65280
1cd6c     0F 29 82 F1 | 	sub	local06, local01
1cd70     13 29 52 FC | 	wrword	local06, local05
1cd74     01 20 06 F1 | 	add	local02, #1
1cd78     18 20 16 F2 | 	cmp	local02, #24 wc
1cd7c     CC FF 9F CD |  if_b	jmp	#LR__2347
1cd80                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cd80     18 20 06 F6 | 	mov	local02, #24
1cd84                 | LR__2348
1cd84     10 27 02 F6 | 	mov	local05, local02
1cd88     01 26 66 F0 | 	shl	local05, #1
1cd8c     F2 26 02 F1 | 	add	local05, objptr
1cd90     40 00 80 FF 
1cd94     13 01 58 FC | 	wrword	##32768, local05
1cd98     01 20 06 F1 | 	add	local02, #1
1cd9c     81 20 16 F2 | 	cmp	local02, #129 wc
1cda0     E0 FF 9F CD |  if_b	jmp	#LR__2348
1cda4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cda4     81 20 06 F6 | 	mov	local02, #129
1cda8                 | LR__2349
1cda8     10 27 02 F6 | 	mov	local05, local02
1cdac     01 26 66 F0 | 	shl	local05, #1
1cdb0     F2 26 02 F1 | 	add	local05, objptr
1cdb4     FF 22 06 F6 | 	mov	local03, #255
1cdb8     10 23 82 F1 | 	sub	local03, local02
1cdbc     08 22 66 F0 | 	shl	local03, #8
1cdc0     13 23 52 FC | 	wrword	local03, local05
1cdc4     01 20 06 F1 | 	add	local02, #1
1cdc8     00 21 16 F2 | 	cmp	local02, #256 wc
1cdcc     D8 FF 9F CD |  if_b	jmp	#LR__2349
1cdd0                 | LR__2350
1cdd0     3E 00 00 FF 
1cdd4     FA E4 05 F1 | 	add	objptr, ##31994
1cdd8     F2 00 59 FC | 	wrword	#128, objptr
1cddc     51 00 00 FF 
1cde0     D2 E5 85 F1 | 	sub	objptr, ##41938
1cde4                 | ' for i=0 to 7
1cde4     00 20 06 F6 | 	mov	local02, #0
1cde8     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1cdec                 | LR__2351
1cdec     10 27 02 F6 | 	mov	local05, local02
1cdf0     01 26 66 F0 | 	shl	local05, #1
1cdf4     10 27 02 F1 | 	add	local05, local02
1cdf8     03 26 66 F0 | 	shl	local05, #3
1cdfc     14 00 00 FF 
1ce00     38 E5 05 F1 | 	add	objptr, ##10552
1ce04     F2 26 02 F1 | 	add	local05, objptr
1ce08     00 EE A1 FF 
1ce0c     13 01 68 FC | 	wrlong	##1138491392, local05
1ce10     10 27 02 F6 | 	mov	local05, local02
1ce14     01 26 66 F0 | 	shl	local05, #1
1ce18     10 27 02 F1 | 	add	local05, local02
1ce1c     03 26 66 F0 | 	shl	local05, #3
1ce20     F2 26 02 F1 | 	add	local05, objptr
1ce24     04 26 06 F1 | 	add	local05, #4
1ce28     13 21 42 FC | 	wrbyte	local02, local05
1ce2c     10 27 02 F6 | 	mov	local05, local02
1ce30     01 26 66 F0 | 	shl	local05, #1
1ce34     10 27 02 F1 | 	add	local05, local02
1ce38     03 26 66 F0 | 	shl	local05, #3
1ce3c     F2 26 02 F1 | 	add	local05, objptr
1ce40     05 26 06 F1 | 	add	local05, #5
1ce44     13 21 42 FC | 	wrbyte	local02, local05
1ce48     10 27 02 F6 | 	mov	local05, local02
1ce4c     01 26 66 F0 | 	shl	local05, #1
1ce50     10 27 02 F1 | 	add	local05, local02
1ce54     03 26 66 F0 | 	shl	local05, #3
1ce58     F2 26 02 F1 | 	add	local05, objptr
1ce5c     06 26 06 F1 | 	add	local05, #6
1ce60     13 01 58 FC | 	wrword	#0, local05
1ce64     10 27 02 F6 | 	mov	local05, local02
1ce68     01 26 66 F0 | 	shl	local05, #1
1ce6c     10 27 02 F1 | 	add	local05, local02
1ce70     03 26 66 F0 | 	shl	local05, #3
1ce74     F2 26 02 F1 | 	add	local05, objptr
1ce78     08 26 06 F1 | 	add	local05, #8
1ce7c     00 C0 9F FF 
1ce80     13 01 68 FC | 	wrlong	##1065353216, local05
1ce84     10 27 02 F6 | 	mov	local05, local02
1ce88     01 26 66 F0 | 	shl	local05, #1
1ce8c     10 27 02 F1 | 	add	local05, local02
1ce90     03 26 66 F0 | 	shl	local05, #3
1ce94     F2 26 02 F1 | 	add	local05, objptr
1ce98     0C 26 06 F1 | 	add	local05, #12
1ce9c     00 40 A0 FF 
1cea0     13 01 68 FC | 	wrlong	##1082130432, local05
1cea4     10 27 02 F6 | 	mov	local05, local02
1cea8     01 26 66 F0 | 	shl	local05, #1
1ceac     10 27 02 F1 | 	add	local05, local02
1ceb0     03 26 66 F0 | 	shl	local05, #3
1ceb4     F2 26 02 F1 | 	add	local05, objptr
1ceb8     10 26 06 F1 | 	add	local05, #16
1cebc     13 01 68 FC | 	wrlong	#0, local05
1cec0     10 27 02 F6 | 	mov	local05, local02
1cec4     01 26 66 F0 | 	shl	local05, #1
1cec8     10 27 02 F1 | 	add	local05, local02
1cecc     03 26 66 F0 | 	shl	local05, #3
1ced0     F2 26 02 F1 | 	add	local05, objptr
1ced4     14 26 06 F1 | 	add	local05, #20
1ced8     13 FF 59 FC | 	wrword	#255, local05
1cedc     10 27 02 F6 | 	mov	local05, local02
1cee0     01 26 66 F0 | 	shl	local05, #1
1cee4     3D 00 00 FF 
1cee8     8C E4 05 F1 | 	add	objptr, ##31372
1ceec     F2 26 02 F1 | 	add	local05, objptr
1cef0     13 FF 59 FC | 	wrword	#255, local05
1cef4     01 20 06 F1 | 	add	local02, #1
1cef8     08 20 56 F2 | 	cmps	local02, #8 wc
1cefc     51 00 00 FF 
1cf00     C4 E5 85 F1 | 	sub	objptr, ##41924
1cf04     E4 FE 9F CD |  if_b	jmp	#LR__2351
1cf08                 | LR__2352
1cf08     00 6E 20 FF 
1cf0c     00 28 06 F6 | 	mov	local06, ##1088159744
1cf10                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1cf10     03 26 06 F6 | 	mov	local05, #3
1cf14                 | LR__2353
1cf14     14 13 02 F6 | 	mov	arg01, local06
1cf18     CE C3 1F FF 
1cf1c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cf20     B8 63 B0 FD | 	call	#__system___float_mul
1cf24     FD 28 02 F6 | 	mov	local06, result1
1cf28     FA 27 6E FB | 	djnz	local05, #LR__2353
1cf2c     00 20 06 F6 | 	mov	local02, #0
1cf30                 | LR__2354
1cf30     10 25 02 F6 | 	mov	local04, local02
1cf34     02 24 66 F0 | 	shl	local04, #2
1cf38     14 00 00 FF 
1cf3c     D8 E4 05 F1 | 	add	objptr, ##10456
1cf40     F2 24 02 F1 | 	add	local04, objptr
1cf44     12 29 62 FC | 	wrlong	local06, local04
1cf48     14 13 02 F6 | 	mov	arg01, local06
1cf4c     CE C3 1F FF 
1cf50     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cf54     14 00 00 FF 
1cf58     D8 E4 85 F1 | 	sub	objptr, ##10456
1cf5c     7C 63 B0 FD | 	call	#__system___float_mul
1cf60     FD 28 02 F6 | 	mov	local06, result1
1cf64     01 20 06 F1 | 	add	local02, #1
1cf68     0C 20 56 F2 | 	cmps	local02, #12 wc
1cf6c     C0 FF 9F CD |  if_b	jmp	#LR__2354
1cf70     14 00 00 FF 
1cf74     08 E5 05 F1 | 	add	objptr, ##10504
1cf78     F2 50 6B FC | 	wrlong	#424, objptr
1cf7c     04 E4 05 F1 | 	add	objptr, #4
1cf80     F2 20 6B FC | 	wrlong	#400, objptr
1cf84     04 E4 05 F1 | 	add	objptr, #4
1cf88     F2 F2 6A FC | 	wrlong	#377, objptr
1cf8c     04 E4 05 F1 | 	add	objptr, #4
1cf90     F2 C8 6A FC | 	wrlong	#356, objptr
1cf94     04 E4 05 F1 | 	add	objptr, #4
1cf98     F2 A0 6A FC | 	wrlong	#336, objptr
1cf9c     04 E4 05 F1 | 	add	objptr, #4
1cfa0     F2 7A 6A FC | 	wrlong	#317, objptr
1cfa4     04 E4 05 F1 | 	add	objptr, #4
1cfa8     F2 58 6A FC | 	wrlong	#300, objptr
1cfac     04 E4 05 F1 | 	add	objptr, #4
1cfb0     F2 36 6A FC | 	wrlong	#283, objptr
1cfb4     04 E4 05 F1 | 	add	objptr, #4
1cfb8     F2 16 6A FC | 	wrlong	#267, objptr
1cfbc     04 E4 05 F1 | 	add	objptr, #4
1cfc0     F2 F8 69 FC | 	wrlong	#252, objptr
1cfc4     04 E4 05 F1 | 	add	objptr, #4
1cfc8     F2 DC 69 FC | 	wrlong	#238, objptr
1cfcc     04 E4 05 F1 | 	add	objptr, #4
1cfd0     F2 C0 69 FC | 	wrlong	#224, objptr
1cfd4     3D 00 00 FF 
1cfd8     9E E4 05 F1 | 	add	objptr, ##31390
1cfdc     F2 00 59 FC | 	wrword	#128, objptr
1cfe0     02 E4 85 F1 | 	sub	objptr, #2
1cfe4     F2 00 59 FC | 	wrword	#128, objptr
1cfe8     51 00 00 FF 
1cfec     D0 E5 85 F1 | 	sub	objptr, ##41936
1cff0     A7 F0 03 F6 | 	mov	ptra, fp
1cff4     B2 00 A0 FD | 	call	#popregs_
1cff8                 | _init_audio_ret
1cff8     2D 00 64 FD | 	ret
1cffc                 | 
1cffc                 | ' 
1cffc                 | ' 
1cffc                 | ' function getnoteval(token) as single
1cffc                 | _getnoteval
1cffc     02 4A 05 F6 | 	mov	COUNT_, #2
1d000     A8 00 A0 FD | 	call	#pushregs_
1d004     01 00 00 FF 
1d008     00 13 86 F1 | 	sub	arg01, ##768
1d00c     09 15 52 F6 | 	abs	arg02, arg01 wc
1d010     0C 14 16 FD | 	qdiv	arg02, #12
1d014     14 00 00 FF 
1d018     D8 E4 05 F1 | 	add	objptr, ##10456
1d01c     19 14 62 FD | 	getqy	arg02
1d020     0A 15 82 F6 | 	negc	arg02, arg02
1d024     02 14 66 F0 | 	shl	arg02, #2
1d028     F2 14 02 F1 | 	add	arg02, objptr
1d02c     0A 1F 02 FB | 	rdlong	local01, arg02
1d030     09 15 52 F6 | 	abs	arg02, arg01 wc
1d034     0C 14 16 FD | 	qdiv	arg02, #12
1d038     14 00 00 FF 
1d03c     D8 E4 85 F1 | 	sub	objptr, ##10456
1d040     01 12 06 F6 | 	mov	arg01, #1
1d044                 | ' noteexp=1+(note/12) 
1d044                 | ' return (2.0^noteexp)*notebase
1d044     18 14 62 FD | 	getqx	arg02
1d048     0A 13 82 F3 | 	sumc	arg01, arg02
1d04c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d050     1F 20 C6 C9 |  if_b	decod	local02, #31
1d054     00 20 06 36 |  if_ae	mov	local02, #0
1d058     7C 5E B0 FD | 	call	#__system___float_fromuns
1d05c     10 FB 61 F5 | 	xor	result1, local02
1d060     FD 14 02 F6 | 	mov	arg02, result1
1d064     1E 12 C6 F9 | 	decod	arg01, #30
1d068     54 71 B0 FD | 	call	#__system____builtin_powf
1d06c     FD 12 02 F6 | 	mov	arg01, result1
1d070     0F 15 02 F6 | 	mov	arg02, local01
1d074     64 62 B0 FD | 	call	#__system___float_mul
1d078     A7 F0 03 F6 | 	mov	ptra, fp
1d07c     B2 00 A0 FD | 	call	#popregs_
1d080                 | _getnoteval_ret
1d080     2D 00 64 FD | 	ret
1d084                 | 
1d084                 | ' 
1d084                 | ' 
1d084                 | ' 
1d084                 | ' sub init_error_strings
1d084                 | _init_error_strings
1d084     84 01 00 FF 
1d088     9F 00 06 F6 | 	mov	_var01, ##@LR__5505
1d08c     45 00 00 FF 
1d090     7C E4 05 F1 | 	add	objptr, ##35452
1d094     F2 00 62 FC | 	wrlong	_var01, objptr
1d098     84 01 00 FF 
1d09c     A0 00 06 F6 | 	mov	_var01, ##@LR__5506
1d0a0     04 E4 05 F1 | 	add	objptr, #4
1d0a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a8     84 01 00 FF 
1d0ac     C5 00 06 F6 | 	mov	_var01, ##@LR__5507
1d0b0     04 E4 05 F1 | 	add	objptr, #4
1d0b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b8     84 01 00 FF 
1d0bc     E6 00 06 F6 | 	mov	_var01, ##@LR__5508
1d0c0     04 E4 05 F1 | 	add	objptr, #4
1d0c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c8     84 01 00 FF 
1d0cc     00 01 06 F6 | 	mov	_var01, ##@LR__5509
1d0d0     04 E4 05 F1 | 	add	objptr, #4
1d0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d8     84 01 00 FF 
1d0dc     1C 01 06 F6 | 	mov	_var01, ##@LR__5510
1d0e0     04 E4 05 F1 | 	add	objptr, #4
1d0e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e8     84 01 00 FF 
1d0ec     3E 01 06 F6 | 	mov	_var01, ##@LR__5511
1d0f0     04 E4 05 F1 | 	add	objptr, #4
1d0f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f8     84 01 00 FF 
1d0fc     6C 01 06 F6 | 	mov	_var01, ##@LR__5512
1d100     04 E4 05 F1 | 	add	objptr, #4
1d104     F2 00 62 FC | 	wrlong	_var01, objptr
1d108     84 01 00 FF 
1d10c     97 01 06 F6 | 	mov	_var01, ##@LR__5513
1d110     04 E4 05 F1 | 	add	objptr, #4
1d114     F2 00 62 FC | 	wrlong	_var01, objptr
1d118     84 01 00 FF 
1d11c     B0 01 06 F6 | 	mov	_var01, ##@LR__5514
1d120     04 E4 05 F1 | 	add	objptr, #4
1d124     F2 00 62 FC | 	wrlong	_var01, objptr
1d128     84 01 00 FF 
1d12c     D1 01 06 F6 | 	mov	_var01, ##@LR__5515
1d130     04 E4 05 F1 | 	add	objptr, #4
1d134     F2 00 62 FC | 	wrlong	_var01, objptr
1d138     84 01 00 FF 
1d13c     E8 01 06 F6 | 	mov	_var01, ##@LR__5516
1d140     04 E4 05 F1 | 	add	objptr, #4
1d144     F2 00 62 FC | 	wrlong	_var01, objptr
1d148     85 01 00 FF 
1d14c     06 00 06 F6 | 	mov	_var01, ##@LR__5517
1d150     04 E4 05 F1 | 	add	objptr, #4
1d154     F2 00 62 FC | 	wrlong	_var01, objptr
1d158     85 01 00 FF 
1d15c     2A 00 06 F6 | 	mov	_var01, ##@LR__5518
1d160     04 E4 05 F1 | 	add	objptr, #4
1d164     F2 00 62 FC | 	wrlong	_var01, objptr
1d168     85 01 00 FF 
1d16c     51 00 06 F6 | 	mov	_var01, ##@LR__5519
1d170     04 E4 05 F1 | 	add	objptr, #4
1d174     F2 00 62 FC | 	wrlong	_var01, objptr
1d178     85 01 00 FF 
1d17c     6D 00 06 F6 | 	mov	_var01, ##@LR__5520
1d180     04 E4 05 F1 | 	add	objptr, #4
1d184     F2 00 62 FC | 	wrlong	_var01, objptr
1d188     85 01 00 FF 
1d18c     7E 00 06 F6 | 	mov	_var01, ##@LR__5521
1d190     04 E4 05 F1 | 	add	objptr, #4
1d194     F2 00 62 FC | 	wrlong	_var01, objptr
1d198     85 01 00 FF 
1d19c     8E 00 06 F6 | 	mov	_var01, ##@LR__5522
1d1a0     04 E4 05 F1 | 	add	objptr, #4
1d1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a8     85 01 00 FF 
1d1ac     A9 00 06 F6 | 	mov	_var01, ##@LR__5523
1d1b0     04 E4 05 F1 | 	add	objptr, #4
1d1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b8     85 01 00 FF 
1d1bc     BB 00 06 F6 | 	mov	_var01, ##@LR__5524
1d1c0     04 E4 05 F1 | 	add	objptr, #4
1d1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c8     85 01 00 FF 
1d1cc     D3 00 06 F6 | 	mov	_var01, ##@LR__5525
1d1d0     04 E4 05 F1 | 	add	objptr, #4
1d1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d8     85 01 00 FF 
1d1dc     E7 00 06 F6 | 	mov	_var01, ##@LR__5526
1d1e0     04 E4 05 F1 | 	add	objptr, #4
1d1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e8     85 01 00 FF 
1d1ec     F7 00 06 F6 | 	mov	_var01, ##@LR__5527
1d1f0     04 E4 05 F1 | 	add	objptr, #4
1d1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f8     85 01 00 FF 
1d1fc     14 01 06 F6 | 	mov	_var01, ##@LR__5528
1d200     04 E4 05 F1 | 	add	objptr, #4
1d204     F2 00 62 FC | 	wrlong	_var01, objptr
1d208     85 01 00 FF 
1d20c     25 01 06 F6 | 	mov	_var01, ##@LR__5529
1d210     04 E4 05 F1 | 	add	objptr, #4
1d214     F2 00 62 FC | 	wrlong	_var01, objptr
1d218     85 01 00 FF 
1d21c     36 01 06 F6 | 	mov	_var01, ##@LR__5530
1d220     04 E4 05 F1 | 	add	objptr, #4
1d224     F2 00 62 FC | 	wrlong	_var01, objptr
1d228     85 01 00 FF 
1d22c     61 01 06 F6 | 	mov	_var01, ##@LR__5531
1d230     04 E4 05 F1 | 	add	objptr, #4
1d234     F2 00 62 FC | 	wrlong	_var01, objptr
1d238     85 01 00 FF 
1d23c     7D 01 06 F6 | 	mov	_var01, ##@LR__5532
1d240     04 E4 05 F1 | 	add	objptr, #4
1d244     F2 00 62 FC | 	wrlong	_var01, objptr
1d248     85 01 00 FF 
1d24c     93 01 06 F6 | 	mov	_var01, ##@LR__5533
1d250     04 E4 05 F1 | 	add	objptr, #4
1d254     F2 00 62 FC | 	wrlong	_var01, objptr
1d258     85 01 00 FF 
1d25c     A0 01 06 F6 | 	mov	_var01, ##@LR__5534
1d260     04 E4 05 F1 | 	add	objptr, #4
1d264     F2 00 62 FC | 	wrlong	_var01, objptr
1d268     85 01 00 FF 
1d26c     B2 01 06 F6 | 	mov	_var01, ##@LR__5535
1d270     04 E4 05 F1 | 	add	objptr, #4
1d274     F2 00 62 FC | 	wrlong	_var01, objptr
1d278     85 01 00 FF 
1d27c     C3 01 06 F6 | 	mov	_var01, ##@LR__5536
1d280     04 E4 05 F1 | 	add	objptr, #4
1d284     F2 00 62 FC | 	wrlong	_var01, objptr
1d288     85 01 00 FF 
1d28c     DF 01 06 F6 | 	mov	_var01, ##@LR__5537
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     85 01 00 FF 
1d29c     F0 01 06 F6 | 	mov	_var01, ##@LR__5538
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     85 01 00 FF 
1d2ac     FF 01 06 F6 | 	mov	_var01, ##@LR__5539
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b8     86 01 00 FF 
1d2bc     1A 00 06 F6 | 	mov	_var01, ##@LR__5540
1d2c0     04 E4 05 F1 | 	add	objptr, #4
1d2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c8     86 01 00 FF 
1d2cc     4E 00 06 F6 | 	mov	_var01, ##@LR__5541
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d8     86 01 00 FF 
1d2dc     67 00 06 F6 | 	mov	_var01, ##@LR__5542
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e8     86 01 00 FF 
1d2ec     83 00 06 F6 | 	mov	_var01, ##@LR__5543
1d2f0     04 E4 05 F1 | 	add	objptr, #4
1d2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f8     86 01 00 FF 
1d2fc     A1 00 06 F6 | 	mov	_var01, ##@LR__5544
1d300     04 E4 05 F1 | 	add	objptr, #4
1d304     F2 00 62 FC | 	wrlong	_var01, objptr
1d308     86 01 00 FF 
1d30c     BA 00 06 F6 | 	mov	_var01, ##@LR__5545
1d310     04 E4 05 F1 | 	add	objptr, #4
1d314     F2 00 62 FC | 	wrlong	_var01, objptr
1d318     86 01 00 FF 
1d31c     D9 00 06 F6 | 	mov	_var01, ##@LR__5546
1d320     04 E4 05 F1 | 	add	objptr, #4
1d324     F2 00 62 FC | 	wrlong	_var01, objptr
1d328     86 01 00 FF 
1d32c     E8 00 06 F6 | 	mov	_var01, ##@LR__5547
1d330     04 E4 05 F1 | 	add	objptr, #4
1d334     F2 00 62 FC | 	wrlong	_var01, objptr
1d338     86 01 00 FF 
1d33c     16 01 06 F6 | 	mov	_var01, ##@LR__5548
1d340     04 E4 05 F1 | 	add	objptr, #4
1d344     F2 00 62 FC | 	wrlong	_var01, objptr
1d348     86 01 00 FF 
1d34c     24 01 06 F6 | 	mov	_var01, ##@LR__5549
1d350     04 E4 05 F1 | 	add	objptr, #4
1d354     F2 00 62 FC | 	wrlong	_var01, objptr
1d358     86 01 00 FF 
1d35c     39 01 06 F6 | 	mov	_var01, ##@LR__5550
1d360     04 E4 05 F1 | 	add	objptr, #4
1d364     F2 00 62 FC | 	wrlong	_var01, objptr
1d368     86 01 00 FF 
1d36c     5D 01 06 F6 | 	mov	_var01, ##@LR__5551
1d370     04 E4 05 F1 | 	add	objptr, #4
1d374     F2 00 62 FC | 	wrlong	_var01, objptr
1d378     86 01 00 FF 
1d37c     74 01 06 F6 | 	mov	_var01, ##@LR__5552
1d380     04 E4 05 F1 | 	add	objptr, #4
1d384     F2 00 62 FC | 	wrlong	_var01, objptr
1d388     86 01 00 FF 
1d38c     87 01 06 F6 | 	mov	_var01, ##@LR__5553
1d390     04 E4 05 F1 | 	add	objptr, #4
1d394     F2 00 62 FC | 	wrlong	_var01, objptr
1d398     86 01 00 FF 
1d39c     9E 01 06 F6 | 	mov	_var01, ##@LR__5554
1d3a0     04 E4 05 F1 | 	add	objptr, #4
1d3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a8     86 01 00 FF 
1d3ac     B7 01 06 F6 | 	mov	_var01, ##@LR__5555
1d3b0     04 E4 05 F1 | 	add	objptr, #4
1d3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b8     45 00 00 FF 
1d3bc     44 E5 85 F1 | 	sub	objptr, ##35652
1d3c0                 | _init_error_strings_ret
1d3c0     2D 00 64 FD | 	ret
1d3c4                 | 
1d3c4                 | '         
1d3c4                 | ' sub printerror(err as integer)
1d3c4                 | _printerror
1d3c4     01 4A 05 F6 | 	mov	COUNT_, #1
1d3c8     A8 00 A0 FD | 	call	#pushregs_
1d3cc     09 1F 02 F6 | 	mov	local01, arg01
1d3d0     86 01 00 FF 
1d3d4     D9 13 06 F6 | 	mov	arg01, ##@LR__5556
1d3d8     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d3dc     0F 13 02 F6 | 	mov	arg01, local01
1d3e0     CC 23 B0 FD | 	call	#_hg010b_spin2_inttostr
1d3e4     FD 12 02 F6 | 	mov	arg01, result1
1d3e8     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d3ec     86 01 00 FF 
1d3f0     E0 13 06 F6 | 	mov	arg01, ##@LR__5557
1d3f4     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d3f8     02 1E 66 F0 | 	shl	local01, #2
1d3fc     45 00 00 FF 
1d400     7C E4 05 F1 | 	add	objptr, ##35452
1d404     F2 1E 02 F1 | 	add	local01, objptr
1d408     0F 13 02 FB | 	rdlong	arg01, local01
1d40c     45 00 00 FF 
1d410     7C E4 85 F1 | 	sub	objptr, ##35452
1d414                 | ' 
1d414                 | ' write(text)
1d414     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d418                 | ' crlf
1d418     F0 22 B0 FD | 	call	#_hg010b_spin2_crlf
1d41c     A7 F0 03 F6 | 	mov	ptra, fp
1d420     B2 00 A0 FD | 	call	#popregs_
1d424                 | _printerror_ret
1d424     2D 00 64 FD | 	ret
1d428                 | 
1d428                 | ' 
1d428                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d428                 | ' 
1d428                 | ' sub startpsram
1d428                 | _startpsram
1d428     00 12 06 F6 | 	mov	arg01, #0
1d42c     0A 14 C6 F9 | 	decod	arg02, #10
1d430     0B 16 06 F6 | 	mov	arg03, #11
1d434     07 18 06 F6 | 	mov	arg04, #7
1d438     0B 00 00 FF 
1d43c     CC E4 05 F1 | 	add	objptr, ##5836
1d440     78 24 B0 FD | 	call	#_psram_spin2_startx
1d444     2B 00 00 FF 
1d448     3C E5 05 F1 | 	add	objptr, ##22332
1d44c     F2 FA 61 FC | 	wrlong	result1, objptr
1d450                 | '     return $7FF00 + cog*12
1d450     0C E4 05 F1 | 	add	objptr, #12
1d454     FF 03 80 FF 
1d458     F2 00 6A FC | 	wrlong	##524032, objptr
1d45c     37 00 00 FF 
1d460     14 E4 85 F1 | 	sub	objptr, ##28180
1d464                 | _startpsram_ret
1d464     2D 00 64 FD | 	ret
1d468                 | 
1d468                 | ' 
1d468                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d468                 | _startvideo
1d468     01 4A 05 F6 | 	mov	COUNT_, #1
1d46c     A8 00 A0 FD | 	call	#pushregs_
1d470     37 00 00 FF 
1d474     14 E4 05 F1 | 	add	objptr, ##28180
1d478     F2 18 02 FB | 	rdlong	arg04, objptr
1d47c     37 00 00 FF 
1d480     14 E4 85 F1 | 	sub	objptr, ##28180
1d484     0A 13 02 F6 | 	mov	arg01, arg02
1d488     0C 15 02 F6 | 	mov	arg02, arg04
1d48c     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d490     37 00 00 FF 
1d494     00 E4 05 F1 | 	add	objptr, ##28160
1d498     F2 FA 61 FC | 	wrlong	result1, objptr
1d49c                 | ' 
1d49c                 | ' videocog=v.start(pin,mbox)
1d49c                 | ' 
1d49c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d49c     00 1E 06 F6 | 	mov	local01, #0
1d4a0     2B 00 00 FF 
1d4a4     34 E5 85 F1 | 	sub	objptr, ##22324
1d4a8                 | LR__2360
1d4a8     0F 13 02 F6 | 	mov	arg01, local01
1d4ac     00 28 00 FF 
1d4b0     00 14 06 F6 | 	mov	arg02, ##5242880
1d4b4     5C 28 B0 FD | 	call	#_psram_spin2_setQos
1d4b8     01 1E 06 F1 | 	add	local01, #1
1d4bc     08 1E 56 F2 | 	cmps	local01, #8 wc
1d4c0     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d4c4     2B 00 00 FF 
1d4c8     34 E5 05 F1 | 	add	objptr, ##22324
1d4cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d4d0     7A 00 02 FF 
1d4d4     00 14 06 F6 | 	mov	arg02, ##67171328
1d4d8     2B 00 00 FF 
1d4dc     34 E5 85 F1 | 	sub	objptr, ##22324
1d4e0     30 28 B0 FD | 	call	#_psram_spin2_setQos
1d4e4     0B 00 00 FF 
1d4e8     CC E4 85 F1 | 	sub	objptr, ##5836
1d4ec                 | ' psram.setQoS(videocog, $0400f400) 
1d4ec                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d4ec     F2 14 02 F6 | 	mov	arg02, objptr
1d4f0     00 78 04 FF 
1d4f4     00 14 46 F5 | 	or	arg02, ##149946368
1d4f8     00 16 06 F6 | 	mov	arg03, #0
1d4fc     00 18 06 F6 | 	mov	arg04, #0
1d500     00 12 06 F6 | 	mov	arg01, #0
1d504     C8 3C B0 FD | 	call	#__system___basic_open
1d508                 | ' return videocog
1d508     37 00 00 FF 
1d50c     00 E4 05 F1 | 	add	objptr, ##28160
1d510     F2 FA 01 FB | 	rdlong	result1, objptr
1d514     37 00 00 FF 
1d518     00 E4 85 F1 | 	sub	objptr, ##28160
1d51c     A7 F0 03 F6 | 	mov	ptra, fp
1d520     B2 00 A0 FD | 	call	#popregs_
1d524                 | _startvideo_ret
1d524     2D 00 64 FD | 	ret
1d528                 | 
1d528                 | ' 
1d528                 | ' 
1d528                 | ' 
1d528                 | ' 
1d528                 | ' '' ------------------------------- Convenient psram peek/poke
1d528                 | ' 
1d528                 | ' sub pslpoke(addr as ulong,value as ulong)
1d528                 | _pslpoke
1d528     00 4A 05 F6 | 	mov	COUNT_, #0
1d52c     A8 00 A0 FD | 	call	#pushregs_
1d530     08 F0 07 F1 | 	add	ptra, #8
1d534     A7 12 62 FC | 	wrlong	arg01, fp
1d538     04 4E 05 F1 | 	add	fp, #4
1d53c     A7 14 62 FC | 	wrlong	arg02, fp
1d540     A7 12 02 F6 | 	mov	arg01, fp
1d544     04 4E 85 F1 | 	sub	fp, #4
1d548     A7 14 02 FB | 	rdlong	arg02, fp
1d54c     04 16 06 F6 | 	mov	arg03, #4
1d550     0B 00 00 FF 
1d554     CC E4 05 F1 | 	add	objptr, ##5836
1d558     28 26 B0 FD | 	call	#_psram_spin2_write
1d55c     0B 00 00 FF 
1d560     CC E4 85 F1 | 	sub	objptr, ##5836
1d564     A7 F0 03 F6 | 	mov	ptra, fp
1d568     B2 00 A0 FD | 	call	#popregs_
1d56c                 | _pslpoke_ret
1d56c     2D 00 64 FD | 	ret
1d570                 | 
1d570                 | ' 
1d570                 | ' sub psdpoke(addr as ulong,value as ulong)
1d570                 | _psdpoke
1d570     00 4A 05 F6 | 	mov	COUNT_, #0
1d574     A8 00 A0 FD | 	call	#pushregs_
1d578     08 F0 07 F1 | 	add	ptra, #8
1d57c     A7 12 62 FC | 	wrlong	arg01, fp
1d580     04 4E 05 F1 | 	add	fp, #4
1d584     A7 14 62 FC | 	wrlong	arg02, fp
1d588     A7 12 02 F6 | 	mov	arg01, fp
1d58c     04 4E 85 F1 | 	sub	fp, #4
1d590     A7 14 02 FB | 	rdlong	arg02, fp
1d594     02 16 06 F6 | 	mov	arg03, #2
1d598     0B 00 00 FF 
1d59c     CC E4 05 F1 | 	add	objptr, ##5836
1d5a0     E0 25 B0 FD | 	call	#_psram_spin2_write
1d5a4     0B 00 00 FF 
1d5a8     CC E4 85 F1 | 	sub	objptr, ##5836
1d5ac     A7 F0 03 F6 | 	mov	ptra, fp
1d5b0     B2 00 A0 FD | 	call	#popregs_
1d5b4                 | _psdpoke_ret
1d5b4     2D 00 64 FD | 	ret
1d5b8                 | 
1d5b8                 | ' 
1d5b8                 | ' sub pspoke(addr as ulong,value as ulong)
1d5b8                 | _pspoke
1d5b8     00 4A 05 F6 | 	mov	COUNT_, #0
1d5bc     A8 00 A0 FD | 	call	#pushregs_
1d5c0     08 F0 07 F1 | 	add	ptra, #8
1d5c4     A7 12 62 FC | 	wrlong	arg01, fp
1d5c8     04 4E 05 F1 | 	add	fp, #4
1d5cc     A7 14 62 FC | 	wrlong	arg02, fp
1d5d0     A7 12 02 F6 | 	mov	arg01, fp
1d5d4     04 4E 85 F1 | 	sub	fp, #4
1d5d8     A7 14 02 FB | 	rdlong	arg02, fp
1d5dc     01 16 06 F6 | 	mov	arg03, #1
1d5e0     0B 00 00 FF 
1d5e4     CC E4 05 F1 | 	add	objptr, ##5836
1d5e8     98 25 B0 FD | 	call	#_psram_spin2_write
1d5ec     0B 00 00 FF 
1d5f0     CC E4 85 F1 | 	sub	objptr, ##5836
1d5f4     A7 F0 03 F6 | 	mov	ptra, fp
1d5f8     B2 00 A0 FD | 	call	#popregs_
1d5fc                 | _pspoke_ret
1d5fc     2D 00 64 FD | 	ret
1d600                 | 
1d600                 | ' 
1d600                 | ' function pspeek(adr as ulong) as ubyte
1d600                 | _pspeek
1d600     00 4A 05 F6 | 	mov	COUNT_, #0
1d604     A8 00 A0 FD | 	call	#pushregs_
1d608     0C F0 07 F1 | 	add	ptra, #12
1d60c     04 4E 05 F1 | 	add	fp, #4
1d610     A7 12 62 FC | 	wrlong	arg01, fp
1d614     04 4E 05 F1 | 	add	fp, #4
1d618     A7 12 02 F6 | 	mov	arg01, fp
1d61c     04 4E 85 F1 | 	sub	fp, #4
1d620     A7 14 02 FB | 	rdlong	arg02, fp
1d624     04 4E 85 F1 | 	sub	fp, #4
1d628     01 16 06 F6 | 	mov	arg03, #1
1d62c     0B 00 00 FF 
1d630     CC E4 05 F1 | 	add	objptr, ##5836
1d634     B0 24 B0 FD | 	call	#_psram_spin2_read1
1d638     0B 00 00 FF 
1d63c     CC E4 85 F1 | 	sub	objptr, ##5836
1d640                 | ' psram.read1(varptr(res),adr,1)
1d640                 | ' return res
1d640     08 4E 05 F1 | 	add	fp, #8
1d644     A7 FA C1 FA | 	rdbyte	result1, fp
1d648     08 4E 85 F1 | 	sub	fp, #8
1d64c     A7 F0 03 F6 | 	mov	ptra, fp
1d650     B2 00 A0 FD | 	call	#popregs_
1d654                 | _pspeek_ret
1d654     2D 00 64 FD | 	ret
1d658                 | 
1d658                 | ' 
1d658                 | ' function pslpeek(adr as ulong) as ulong
1d658                 | _pslpeek
1d658     00 4A 05 F6 | 	mov	COUNT_, #0
1d65c     A8 00 A0 FD | 	call	#pushregs_
1d660     0C F0 07 F1 | 	add	ptra, #12
1d664     04 4E 05 F1 | 	add	fp, #4
1d668     A7 12 62 FC | 	wrlong	arg01, fp
1d66c     04 4E 05 F1 | 	add	fp, #4
1d670     A7 12 02 F6 | 	mov	arg01, fp
1d674     04 4E 85 F1 | 	sub	fp, #4
1d678     A7 14 02 FB | 	rdlong	arg02, fp
1d67c     04 4E 85 F1 | 	sub	fp, #4
1d680     04 16 06 F6 | 	mov	arg03, #4
1d684     0B 00 00 FF 
1d688     CC E4 05 F1 | 	add	objptr, ##5836
1d68c     58 24 B0 FD | 	call	#_psram_spin2_read1
1d690     0B 00 00 FF 
1d694     CC E4 85 F1 | 	sub	objptr, ##5836
1d698                 | ' psram.read1(varptr(res),adr,4)
1d698                 | ' return res
1d698     08 4E 05 F1 | 	add	fp, #8
1d69c     A7 FA 01 FB | 	rdlong	result1, fp
1d6a0     08 4E 85 F1 | 	sub	fp, #8
1d6a4     A7 F0 03 F6 | 	mov	ptra, fp
1d6a8     B2 00 A0 FD | 	call	#popregs_
1d6ac                 | _pslpeek_ret
1d6ac     2D 00 64 FD | 	ret
1d6b0                 | 
1d6b0                 | ' 
1d6b0                 | ' function psdpeek(adr as ulong) as ulong
1d6b0                 | _psdpeek
1d6b0     00 4A 05 F6 | 	mov	COUNT_, #0
1d6b4     A8 00 A0 FD | 	call	#pushregs_
1d6b8     0C F0 07 F1 | 	add	ptra, #12
1d6bc     04 4E 05 F1 | 	add	fp, #4
1d6c0     A7 12 62 FC | 	wrlong	arg01, fp
1d6c4     04 4E 05 F1 | 	add	fp, #4
1d6c8     A7 12 02 F6 | 	mov	arg01, fp
1d6cc     04 4E 85 F1 | 	sub	fp, #4
1d6d0     A7 14 02 FB | 	rdlong	arg02, fp
1d6d4     04 4E 85 F1 | 	sub	fp, #4
1d6d8     02 16 06 F6 | 	mov	arg03, #2
1d6dc     0B 00 00 FF 
1d6e0     CC E4 05 F1 | 	add	objptr, ##5836
1d6e4     00 24 B0 FD | 	call	#_psram_spin2_read1
1d6e8     0B 00 00 FF 
1d6ec     CC E4 85 F1 | 	sub	objptr, ##5836
1d6f0                 | ' psram.read1(varptr(res),adr,2)
1d6f0                 | ' return res
1d6f0     08 4E 05 F1 | 	add	fp, #8
1d6f4     A7 FA E1 FA | 	rdword	result1, fp
1d6f8     08 4E 85 F1 | 	sub	fp, #8
1d6fc     A7 F0 03 F6 | 	mov	ptra, fp
1d700     B2 00 A0 FD | 	call	#popregs_
1d704                 | _psdpeek_ret
1d704     2D 00 64 FD | 	ret
1d708                 | 
1d708                 | ' 
1d708                 | ' '' ------------------------------- USB keyboard scan to char translator
1d708                 | ' 
1d708                 | ' function scantochar(key)
1d708                 | _scantochar
1d708                 | ' 
1d708                 | ' select case (key shr 8) and 255
1d708     09 01 02 F6 | 	mov	_var01, arg01
1d70c     08 00 C6 F0 | 	sar	_var01, #8
1d710     FF 00 0E F5 | 	and	_var01, #255 wz
1d714     24 00 90 AD |  if_e	jmp	#LR__2370
1d718     02 00 0E F2 | 	cmp	_var01, #2 wz
1d71c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d720     30 00 90 AD |  if_e	jmp	#LR__2371
1d724     40 00 0E F2 | 	cmp	_var01, #64 wz
1d728     44 00 90 AD |  if_e	jmp	#LR__2372
1d72c     42 00 0E F2 | 	cmp	_var01, #66 wz
1d730     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d734     70 00 90 5D |  if_ne	jmp	#LR__2374
1d738     50 00 90 FD | 	jmp	#LR__2373
1d73c                 | LR__2370
1d73c     09 FB 01 F6 | 	mov	result1, arg01
1d740     7F FA 05 F5 | 	and	result1, #127
1d744     02 FA 65 F0 | 	shl	result1, #2
1d748     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d74c     FD FA C1 FA | 	rdbyte	result1, result1
1d750     54 00 90 FD | 	jmp	#_scantochar_ret
1d754                 | LR__2371
1d754     09 FB 01 F6 | 	mov	result1, arg01
1d758     7F FA 05 F5 | 	and	result1, #127
1d75c     02 FA 65 F0 | 	shl	result1, #2
1d760     01 FA 05 F1 | 	add	result1, #1
1d764     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d768     FD FA C1 FA | 	rdbyte	result1, result1
1d76c     38 00 90 FD | 	jmp	#_scantochar_ret
1d770                 | LR__2372
1d770     09 FB 01 F6 | 	mov	result1, arg01
1d774     7F FA 05 F5 | 	and	result1, #127
1d778     02 FA 65 F0 | 	shl	result1, #2
1d77c     02 FA 05 F1 | 	add	result1, #2
1d780     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d784     FD FA C1 FA | 	rdbyte	result1, result1
1d788     1C 00 90 FD | 	jmp	#_scantochar_ret
1d78c                 | LR__2373
1d78c     09 FB 01 F6 | 	mov	result1, arg01
1d790     7F FA 05 F5 | 	and	result1, #127
1d794     02 FA 65 F0 | 	shl	result1, #2
1d798     03 FA 05 F1 | 	add	result1, #3
1d79c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d7a0     FD FA C1 FA | 	rdbyte	result1, result1
1d7a4     00 00 90 FD | 	jmp	#_scantochar_ret
1d7a8                 | LR__2374
1d7a8                 | _scantochar_ret
1d7a8     2D 00 64 FD | 	ret
1d7ac                 | 
1d7ac                 | _program
1d7ac     01 4A 05 F6 | 	mov	COUNT_, #1
1d7b0     A8 00 A0 FD | 	call	#pushregs_
1d7b4     70 FC BF FD | 	call	#_startpsram
1d7b8     40 12 06 F6 | 	mov	arg01, #64
1d7bc     00 14 06 F6 | 	mov	arg02, #0
1d7c0     00 16 06 F6 | 	mov	arg03, #0
1d7c4     A0 FC BF FD | 	call	#_startvideo
1d7c8     37 00 00 FF 
1d7cc     14 E4 05 F1 | 	add	objptr, ##28180
1d7d0     F2 12 02 FB | 	rdlong	arg01, objptr
1d7d4     00 14 06 F6 | 	mov	arg02, #0
1d7d8     FB 03 00 FF 
1d7dc     00 17 06 F6 | 	mov	arg03, ##521984
1d7e0     2B 00 00 FF 
1d7e4     48 E5 85 F1 | 	sub	objptr, ##22344
1d7e8     D8 28 B0 FD | 	call	#_audio096_spin2_start
1d7ec     FE 16 02 F6 | 	mov	arg03, result2
1d7f0     2B 00 00 FF 
1d7f4     30 E5 05 F1 | 	add	objptr, ##22320
1d7f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d7fc     14 E4 05 F1 | 	add	objptr, #20
1d800     F2 16 62 FC | 	wrlong	arg03, objptr
1d804     37 00 00 FF 
1d808     10 E4 85 F1 | 	sub	objptr, ##28176
1d80c     32 12 06 F6 | 	mov	arg01, #50
1d810     08 32 B0 FD | 	call	#__system___waitms
1d814     37 00 00 FF 
1d818     10 E4 05 F1 | 	add	objptr, ##28176
1d81c     F2 12 02 FB | 	rdlong	arg01, objptr
1d820     37 00 00 FF 
1d824     10 E4 85 F1 | 	sub	objptr, ##28176
1d828     14 12 06 F1 | 	add	arg01, #20
1d82c     20 00 80 FF 
1d830     09 01 58 FC | 	wrword	##16384, arg01
1d834     E4 25 B0 FD | 	call	#_usbnew_spin2_start
1d838     37 00 00 FF 
1d83c     04 E4 05 F1 | 	add	objptr, ##28164
1d840     F2 FA 61 FC | 	wrlong	result1, objptr
1d844                 | '   mouse_limits[0] := xlim
1d844     0F 00 00 FF 
1d848     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d84c     01 00 80 FF 
1d850     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d854                 | '   mouse_limits[1] := ylim
1d854     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d858     01 00 80 FF 
1d85c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d860     36 00 00 FF 
1d864     F3 E4 85 F1 | 	sub	objptr, ##27891
1d868     F2 12 02 F6 | 	mov	arg01, objptr
1d86c     11 E5 85 F1 | 	sub	objptr, #273
1d870     C4 12 06 F1 | 	add	arg01, #196
1d874                 | '   mouse_outptr := ptr
1d874     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d878     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d87c     0F 00 00 FF 
1d880     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d884     0E 00 00 FF 
1d888     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1d88c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d890     0E 00 00 FF 
1d894     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1d898     10 12 06 F6 | 	mov	arg01, #16
1d89c     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d8a0     10 12 06 F6 | 	mov	arg01, #16
1d8a4     20 14 06 F6 | 	mov	arg02, #32
1d8a8     20 16 06 F6 | 	mov	arg03, #32
1d8ac     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d8b0     09 12 C6 F9 | 	decod	arg01, #9
1d8b4     2C 15 06 F6 | 	mov	arg02, #300
1d8b8     B8 26 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d8bc     F2 16 02 F6 | 	mov	arg03, objptr
1d8c0     50 00 00 FF 
1d8c4     18 E5 05 F1 | 	add	objptr, ##41240
1d8c8     F2 14 02 F6 | 	mov	arg02, objptr
1d8cc     0A 17 62 FC | 	wrlong	arg03, arg02
1d8d0     04 14 06 F1 | 	add	arg02, #4
1d8d4     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d8d8     EF 14 02 F6 | 	mov	arg02, entryptr__
1d8dc     1E FA 05 F6 | 	mov	result1, #30
1d8e0     28 E4 61 FD | 	setq	objptr
1d8e4     0A FB F1 FC | 	coginit	result1, arg02 wc
1d8e8     01 FA 65 C6 |  if_b	neg	result1, #1
1d8ec     04 E4 85 F1 | 	sub	objptr, #4
1d8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1d8f4     01 00 00 FF 
1d8f8     90 E4 05 F1 | 	add	objptr, ##656
1d8fc     F2 00 68 FC | 	wrlong	#0, objptr
1d900     1A 00 00 FF 
1d904     70 E5 85 F1 | 	sub	objptr, ##13680
1d908     F2 04 68 FC | 	wrlong	#2, objptr
1d90c     04 E4 05 F1 | 	add	objptr, #4
1d910     F2 26 69 FC | 	wrlong	#147, objptr
1d914     04 E4 05 F1 | 	add	objptr, #4
1d918     F2 34 69 FC | 	wrlong	#154, objptr
1d91c     04 E4 05 F1 | 	add	objptr, #4
1d920     F2 08 68 FC | 	wrlong	#4, objptr
1d924     04 E4 85 F1 | 	sub	objptr, #4
1d928     F2 16 02 FB | 	rdlong	arg03, objptr
1d92c     14 E4 85 F1 | 	sub	objptr, #20
1d930     F2 16 62 FC | 	wrlong	arg03, objptr
1d934     04 E4 05 F1 | 	add	objptr, #4
1d938     F2 00 68 FC | 	wrlong	#0, objptr
1d93c     04 E4 05 F1 | 	add	objptr, #4
1d940     F2 00 68 FC | 	wrlong	#0, objptr
1d944     19 00 00 FF 
1d948     E0 E4 05 F1 | 	add	objptr, ##13024
1d94c     F2 02 68 FC | 	wrlong	#1, objptr
1d950     01 00 00 FF 
1d954     9C E4 05 F1 | 	add	objptr, ##668
1d958     F2 00 68 FC | 	wrlong	#0, objptr
1d95c     01 00 00 FF 
1d960     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d964     08 E4 05 F1 | 	add	objptr, #8
1d968     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d96c     04 E4 85 F1 | 	sub	objptr, #4
1d970     03 00 80 FF 
1d974     F2 3C 69 FC | 	wrlong	##1694, objptr
1d978     0C 00 00 FF 
1d97c     4C E5 85 F1 | 	sub	objptr, ##6476
1d980     F2 18 68 FC | 	wrlong	#12, objptr
1d984     45 00 00 FF 
1d988     64 E4 85 F1 | 	sub	objptr, ##35428
1d98c     01 00 00 FF 
1d990     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d994     2C DB BF FD | 	call	#_init_commands
1d998     E8 F6 BF FD | 	call	#_init_error_strings
1d99c     E4 ED BF FD | 	call	#_init_audio
1d9a0     A0 22 BF FD | 	call	#_do_new
1d9a4     37 00 00 FF 
1d9a8     3C E4 05 F1 | 	add	objptr, ##28220
1d9ac     F2 12 02 FB | 	rdlong	arg01, objptr
1d9b0     04 E4 85 F1 | 	sub	objptr, #4
1d9b4     F2 14 02 FB | 	rdlong	arg02, objptr
1d9b8     37 00 00 FF 
1d9bc     38 E4 85 F1 | 	sub	objptr, ##28216
1d9c0     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1d9c4     37 00 00 FF 
1d9c8     40 E4 05 F1 | 	add	objptr, ##28224
1d9cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d9d0     37 00 00 FF 
1d9d4     40 E4 85 F1 | 	sub	objptr, ##28224
1d9d8     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d9dc                 | ' 
1d9dc                 | ' leading_spaces:=amount
1d9dc     01 00 00 FF 
1d9e0     B6 E4 05 F1 | 	add	objptr, ##694
1d9e4     F2 04 68 FC | 	wrlong	#2, objptr
1d9e8     01 00 00 FF 
1d9ec     B6 E4 85 F1 | 	sub	objptr, ##694
1d9f0     86 01 00 FF 
1d9f4     E3 1F 06 F6 | 	mov	local01, ##@LR__5558
1d9f8     3D 12 06 F6 | 	mov	arg01, #61
1d9fc     3C 14 06 F6 | 	mov	arg02, #60
1da00     3B 16 06 F6 | 	mov	arg03, #59
1da04     3A 18 06 F6 | 	mov	arg04, #58
1da08     B8 77 B0 FD | 	call	#__system___vfs_open_sdcardx
1da0c     FD 14 02 F6 | 	mov	arg02, result1
1da10     0F 13 02 F6 | 	mov	arg01, local01
1da14     DC 30 B0 FD | 	call	#__system___mount
1da18     86 01 00 FF 
1da1c     E7 13 06 F6 | 	mov	arg01, ##@LR__5559
1da20     90 33 B0 FD | 	call	#__system___chdir
1da24     86 01 00 FF 
1da28     EF 1F 06 F6 | 	mov	local01, ##@LR__5560
1da2c     4A 00 00 FF 
1da30     90 E4 05 F1 | 	add	objptr, ##38032
1da34     F2 1E 62 FC | 	wrlong	local01, objptr
1da38     13 00 00 FF 
1da3c     5C E4 85 F1 | 	sub	objptr, ##9820
1da40     F2 12 02 FB | 	rdlong	arg01, objptr
1da44     37 00 00 FF 
1da48     34 E4 85 F1 | 	sub	objptr, ##28212
1da4c     01 12 66 F0 | 	shl	arg01, #1
1da50     01 14 06 F6 | 	mov	arg02, #1
1da54     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da58                 | ' init_commands
1da58                 | ' init_error_strings
1da58                 | ' init_audio
1da58                 | ' do_new
1da58                 | ' cls(ink, paper)
1da58                 | ' v.setfontfamily(font) 				' use ST Mono font
1da58                 | ' v.setleadingspaces(2)
1da58                 | ' mount "/sd", _vfs_open_sdcard()
1da58                 | ' chdir "/sd/bas"
1da58                 | ' currentdir$="/sd/bas"
1da58                 | ' position 2*editor_spaces,1 : print ver$
1da58     00 12 06 F6 | 	mov	arg01, #0
1da5c     08 87 B0 FD | 	call	#__system___getiolock_0540
1da60     FD 12 02 F6 | 	mov	arg01, result1
1da64     C0 2C B0 FD | 	call	#__system___lockmem
1da68     18 00 00 FF 
1da6c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1da70     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1da74     18 00 00 FF 
1da78     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1da7c     00 12 06 F6 | 	mov	arg01, #0
1da80     00 16 06 F6 | 	mov	arg03, #0
1da84     94 39 B0 FD | 	call	#__system___basic_print_string
1da88     00 12 06 F6 | 	mov	arg01, #0
1da8c     0A 14 06 F6 | 	mov	arg02, #10
1da90     00 16 06 F6 | 	mov	arg03, #0
1da94     2C 39 B0 FD | 	call	#__system___basic_print_char
1da98     00 12 06 F6 | 	mov	arg01, #0
1da9c     C8 86 B0 FD | 	call	#__system___getiolock_0540
1daa0     FD 00 68 FC | 	wrlong	#0, result1
1daa4     51 00 00 FF 
1daa8     A8 E5 05 F1 | 	add	objptr, ##41896
1daac     F2 12 02 FB | 	rdlong	arg01, objptr
1dab0     0E 00 00 FF 
1dab4     4C E5 85 F1 | 	sub	objptr, ##7500
1dab8     F2 1E 02 FB | 	rdlong	local01, objptr
1dabc     43 00 00 FF 
1dac0     5C E4 85 F1 | 	sub	objptr, ##34396
1dac4     0F 13 82 F1 | 	sub	arg01, local01
1dac8     00 14 06 F6 | 	mov	arg02, #0
1dacc     0A 16 06 F6 | 	mov	arg03, #10
1dad0     24 4F B0 FD | 	call	#__system__Number_S
1dad4     FD 12 02 F6 | 	mov	arg01, result1
1dad8     86 01 00 FF 
1dadc     F7 15 06 F6 | 	mov	arg02, ##@LR__5561
1dae0     A0 2C B0 FD | 	call	#__system___string_concat
1dae4     FD 1E 02 F6 | 	mov	local01, result1
1dae8     50 00 00 FF 
1daec     0C E5 05 F1 | 	add	objptr, ##41228
1daf0     F2 1E 62 FC | 	wrlong	local01, objptr
1daf4     50 00 00 FF 
1daf8     0C E5 85 F1 | 	sub	objptr, ##41228
1dafc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dafc     00 12 06 F6 | 	mov	arg01, #0
1db00     64 86 B0 FD | 	call	#__system___getiolock_0540
1db04     FD 12 02 F6 | 	mov	arg01, result1
1db08     1C 2C B0 FD | 	call	#__system___lockmem
1db0c     50 00 00 FF 
1db10     0C E5 05 F1 | 	add	objptr, ##41228
1db14     F2 14 02 FB | 	rdlong	arg02, objptr
1db18     50 00 00 FF 
1db1c     0C E5 85 F1 | 	sub	objptr, ##41228
1db20     00 12 06 F6 | 	mov	arg01, #0
1db24     00 16 06 F6 | 	mov	arg03, #0
1db28     F0 38 B0 FD | 	call	#__system___basic_print_string
1db2c     00 12 06 F6 | 	mov	arg01, #0
1db30     0A 14 06 F6 | 	mov	arg02, #10
1db34     00 16 06 F6 | 	mov	arg03, #0
1db38     88 38 B0 FD | 	call	#__system___basic_print_char
1db3c     00 12 06 F6 | 	mov	arg01, #0
1db40     24 86 B0 FD | 	call	#__system___getiolock_0540
1db44     FD 00 68 FC | 	wrlong	#0, result1
1db48     37 00 00 FF 
1db4c     34 E4 05 F1 | 	add	objptr, ##28212
1db50     F2 12 02 FB | 	rdlong	arg01, objptr
1db54     37 00 00 FF 
1db58     34 E4 85 F1 | 	sub	objptr, ##28212
1db5c     01 12 66 F0 | 	shl	arg01, #1
1db60     04 14 06 F6 | 	mov	arg02, #4
1db64     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1db68                 | ' position 2*editor_spaces,4 : print "Ready"
1db68     00 12 06 F6 | 	mov	arg01, #0
1db6c     F8 85 B0 FD | 	call	#__system___getiolock_0540
1db70     FD 12 02 F6 | 	mov	arg01, result1
1db74     B0 2B B0 FD | 	call	#__system___lockmem
1db78     87 01 00 FF 
1db7c     09 14 06 F6 | 	mov	arg02, ##@LR__5562
1db80     00 12 06 F6 | 	mov	arg01, #0
1db84     00 16 06 F6 | 	mov	arg03, #0
1db88     90 38 B0 FD | 	call	#__system___basic_print_string
1db8c     00 12 06 F6 | 	mov	arg01, #0
1db90     0A 14 06 F6 | 	mov	arg02, #10
1db94     00 16 06 F6 | 	mov	arg03, #0
1db98     28 38 B0 FD | 	call	#__system___basic_print_char
1db9c     00 12 06 F6 | 	mov	arg01, #0
1dba0     C4 85 B0 FD | 	call	#__system___getiolock_0540
1dba4     FD 00 68 FC | 	wrlong	#0, result1
1dba8     00 14 06 F6 | 	mov	arg02, #0
1dbac     01 14 D6 F7 | 	test	arg02, #1 wc
1dbb0     5A 4C 64 FD | 	drvc	#38
1dbb4     01 14 D6 F7 | 	test	arg02, #1 wc
1dbb8     5A 4E 64 FD | 	drvc	#39
1dbbc     87 01 00 FF 
1dbc0     0F 1E 06 F6 | 	mov	local01, ##@LR__5563
1dbc4     51 00 00 FF 
1dbc8     D4 E5 05 F1 | 	add	objptr, ##41940
1dbcc     F2 1E 62 FC | 	wrlong	local01, objptr
1dbd0     04 E4 05 F1 | 	add	objptr, #4
1dbd4     FF FF FF FF 
1dbd8     F2 FE 6B FC | 	wrlong	##-1, objptr
1dbdc     51 00 00 FF 
1dbe0     D8 E5 85 F1 | 	sub	objptr, ##41944
1dbe4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dbe4                 | ' loadname="noname.bas"
1dbe4                 | ' do_insert=-1
1dbe4                 | ' 
1dbe4                 | ' '-------------------------------------------------------------------------------------------------------- 
1dbe4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dbe4                 | ' '--------------------------------------------------------------------------------------------------------
1dbe4                 | ' 
1dbe4                 | ' do
1dbe4                 | LR__2380
1dbe4     01 12 06 F6 | 	mov	arg01, #1
1dbe8     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dbec     14 2C BE FD | 	call	#_edit
1dbf0     FD 1E 02 F6 | 	mov	local01, result1
1dbf4     37 00 00 FF 
1dbf8     1C E4 05 F1 | 	add	objptr, ##28188
1dbfc     F2 1E 62 FC | 	wrlong	local01, objptr
1dc00     37 00 00 FF 
1dc04     1C E4 85 F1 | 	sub	objptr, ##28188
1dc08     30 3A BE FD | 	call	#_interpret
1dc0c     87 01 00 FF 
1dc10     1A 1E 06 F6 | 	mov	local01, ##@LR__5564
1dc14     37 00 00 FF 
1dc18     1C E4 05 F1 | 	add	objptr, ##28188
1dc1c     F2 1E 62 FC | 	wrlong	local01, objptr
1dc20     37 00 00 FF 
1dc24     1C E4 85 F1 | 	sub	objptr, ##28188
1dc28     B8 FF 9F FD | 	jmp	#LR__2380
1dc2c     A7 F0 03 F6 | 	mov	ptra, fp
1dc30     B2 00 A0 FD | 	call	#popregs_
1dc34                 | _program_ret
1dc34     2D 00 64 FD | 	ret
1dc38                 | 
1dc38                 | ' '' this is not a main program.
1dc38                 | ' 
1dc38                 | ' '****************************************************************************************************************
1dc38                 | ' '                                                                                                             	*
1dc38                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dc38                 | ' '                                                                                                            	*
1dc38                 | ' ' base - HDMI base pin												*
1dc38                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dc38                 | ' '														*
1dc38                 | ' '														*
1dc38                 | ' '****************************************************************************************************************
1dc38                 | ' 
1dc38                 | ' pub start(base,mb):result |i
1dc38                 | _hg010b_spin2_start
1dc38                 | ' 
1dc38                 | ' '--------------------------- initialize pointers and variables
1dc38                 | ' 
1dc38                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dc38     34 E4 05 F1 | 	add	objptr, #52
1dc3c     F2 FA 01 F6 | 	mov	result1, objptr
1dc40     28 E4 85 F1 | 	sub	objptr, #40
1dc44     F2 FA 61 FC | 	wrlong	result1, objptr
1dc48                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1dc48                 | ' hdmibase:=base							' HDMI base pin, 8*n
1dc48     18 E4 05 F1 | 	add	objptr, #24
1dc4c     F2 12 62 FC | 	wrlong	arg01, objptr
1dc50                 | ' mailbox_ptr:=mb		
1dc50     04 E4 05 F1 | 	add	objptr, #4
1dc54     F2 14 62 FC | 	wrlong	arg02, objptr
1dc58                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dc58     C1 E5 05 F1 | 	add	objptr, #449
1dc5c     F2 14 62 FC | 	wrlong	arg02, objptr
1dc60                 | ' sprite_ptr:=@spr1ptr
1dc60     D8 E4 85 F1 | 	sub	objptr, #216
1dc64     F2 FA 01 F6 | 	mov	result1, objptr
1dc68     E5 E4 85 F1 | 	sub	objptr, #229
1dc6c     F2 FA 61 FC | 	wrlong	result1, objptr
1dc70                 | ' 
1dc70                 | ' 		'
1dc70                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1dc70     E5 E4 05 F1 | 	add	objptr, #229
1dc74     F2 FA 01 FB | 	rdlong	result1, objptr
1dc78     D0 FA 05 F1 | 	add	result1, #208
1dc7c     FD 10 58 FC | 	wrword	#8, result1
1dc80                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1dc80     F2 16 02 FB | 	rdlong	arg03, objptr
1dc84     D2 16 06 F1 | 	add	arg03, #210
1dc88     0B 21 58 FC | 	wrword	#16, arg03
1dc8c                 | ' leading_spaces:=0				'
1dc8c     A5 E5 05 F1 | 	add	objptr, #421
1dc90     F2 00 68 FC | 	wrlong	#0, objptr
1dc94                 | ' 
1dc94                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1dc94     99 E4 85 F1 | 	sub	objptr, #153
1dc98     00 00 A0 FF 
1dc9c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dca0                 | ' emptydl[1]:=0
1dca0     04 E4 05 F1 | 	add	objptr, #4
1dca4     F2 00 68 FC | 	wrlong	#0, objptr
1dca8                 | ' 
1dca8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dca8                 | ' 
1dca8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dca8     28 E5 85 F1 | 	sub	objptr, #296
1dcac     F2 02 68 FC | 	wrlong	#1, objptr
1dcb0                 | ' if s_debug<>0
1dcb0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1dcb0     20 00 80 FF 
1dcb4     F2 00 68 FC | 	wrlong	##16384, objptr
1dcb8     F9 E4 85 F1 | 	sub	objptr, #249
1dcbc                 | ' setmode()							' set the mode, see below
1dcbc     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dcc0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dcc0     49 E4 05 F1 | 	add	objptr, #73
1dcc4     F2 FA 01 F6 | 	mov	result1, objptr
1dcc8     35 E4 85 F1 | 	sub	objptr, #53
1dccc     F2 FA 61 FC | 	wrlong	result1, objptr
1dcd0                 | ' cursor_ptr:=@cursor_x						
1dcd0     28 E4 05 F1 | 	add	objptr, #40
1dcd4     F2 16 02 F6 | 	mov	arg03, objptr
1dcd8     2C E4 85 F1 | 	sub	objptr, #44
1dcdc     F2 16 62 FC | 	wrlong	arg03, objptr
1dce0                 | ' fontnum:=0  							' start with a PC type font 
1dce0     55 E4 05 F1 | 	add	objptr, #85
1dce4     F2 00 68 FC | 	wrlong	#0, objptr
1dce8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dce8     1C E4 05 F1 | 	add	objptr, #28
1dcec     F2 12 02 F6 | 	mov	arg01, objptr
1dcf0     81 E4 85 F1 | 	sub	objptr, #129
1dcf4     10 00 00 FF 
1dcf8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dcfc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dd00     10 00 00 FF 
1dd04     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dd08     10 16 06 F6 | 	mov	arg03, #16
1dd0c     38 29 B0 FD | 	call	#__system____builtin_memmove
1dd10                 | ' leading_spaces:=0
1dd10     01 00 00 FF 
1dd14     B6 E4 05 F1 | 	add	objptr, ##694
1dd18     F2 00 68 FC | 	wrlong	#0, objptr
1dd1c     01 00 00 FF 
1dd20     B6 E4 85 F1 | 	sub	objptr, ##694
1dd24                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd24                 | ' 
1dd24                 | ' initcursor(154)
1dd24     9A 12 06 F6 | 	mov	arg01, #154
1dd28     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dd2c                 | ' 
1dd2c                 | ' '---------------------------- start the cog
1dd2c                 | ' 
1dd2c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dd2c     10 00 00 FF 
1dd30     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dd34     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dd38     10 00 00 FF 
1dd3c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dd40     14 E4 05 F1 | 	add	objptr, #20
1dd44     10 FA 05 F6 | 	mov	result1, #16
1dd48     28 E4 61 FD | 	setq	objptr
1dd4c     0A FB F1 FC | 	coginit	result1, arg02 wc
1dd50     01 FA 65 C6 |  if_b	neg	result1, #1
1dd54     1C E4 05 F1 | 	add	objptr, #28
1dd58     F2 FA 61 FC | 	wrlong	result1, objptr
1dd5c     30 E4 85 F1 | 	sub	objptr, #48
1dd60                 | ' waitms(40)							' wait for stabilize
1dd60     28 12 06 F6 | 	mov	arg01, #40
1dd64     B4 2C B0 FD | 	call	#__system___waitms
1dd68                 | ' return cog							' return the driver's cog #
1dd68     30 E4 05 F1 | 	add	objptr, #48
1dd6c     F2 FA 01 FB | 	rdlong	result1, objptr
1dd70     30 E4 85 F1 | 	sub	objptr, #48
1dd74                 | _hg010b_spin2_start_ret
1dd74     2D 00 64 FD | 	ret
1dd78                 | 
1dd78                 | ' 
1dd78                 | ' 
1dd78                 | ' '**************************************************************************************************************** 
1dd78                 | ' '                                                                                                             	*
1dd78                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dd78                 | ' '  Mode number - see start() above or bits below								*
1dd78                 | ' '                                                                                                             	*
1dd78                 | ' '****************************************************************************************************************
1dd78                 | ' 
1dd78                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dd78                 | ' pub initcursor(color) |i
1dd78                 | _hg010b_spin2_initcursor
1dd78     03 4A 05 F6 | 	mov	COUNT_, #3
1dd7c     A8 00 A0 FD | 	call	#pushregs_
1dd80     09 1F 02 F6 | 	mov	local01, arg01
1dd84                 | ' 
1dd84                 | ' cursor_x:=0							' place the cursor at 0:0
1dd84     3C E4 05 F1 | 	add	objptr, #60
1dd88     F2 00 58 FC | 	wrword	#0, objptr
1dd8c                 | ' cursor_y:=0
1dd8c     02 E4 05 F1 | 	add	objptr, #2
1dd90     F2 00 48 FC | 	wrbyte	#0, objptr
1dd94                 | ' repeat i from 0 to 111
1dd94     00 20 06 F6 | 	mov	local02, #0
1dd98     F8 E5 05 F1 | 	add	objptr, #504
1dd9c     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1dda0                 | LR__2390
1dda0                 | '   cursor[i]:=0
1dda0     10 23 02 F6 | 	mov	local03, local02
1dda4     F2 22 02 F1 | 	add	local03, objptr
1dda8     11 01 48 FC | 	wrbyte	#0, local03
1ddac     01 20 06 F1 | 	add	local02, #1
1ddb0     70 20 56 F2 | 	cmps	local02, #112 wc
1ddb4     E8 FF 9F CD |  if_b	jmp	#LR__2390
1ddb8                 | ' repeat i from 112 to 127
1ddb8     70 20 06 F6 | 	mov	local02, #112
1ddbc                 | LR__2391
1ddbc                 | '   cursor[i]:=color  
1ddbc     10 23 02 F6 | 	mov	local03, local02
1ddc0     F2 22 02 F1 | 	add	local03, objptr
1ddc4     11 1F 42 FC | 	wrbyte	local01, local03
1ddc8     01 20 06 F1 | 	add	local02, #1
1ddcc     80 20 16 F2 | 	cmp	local02, #128 wc
1ddd0     E8 FF 9F CD |  if_b	jmp	#LR__2391
1ddd4                 | LR__2392
1ddd4                 | ' 'repeat i from 0 to 127
1ddd4                 | ' '  if ((i/8)//2)
1ddd4                 | ' '    cursor[i]:=15
1ddd4                 | ' '  else
1ddd4                 | ' '    cursor[i]:=0
1ddd4                 | ' '  if i>=120    
1ddd4                 | ' '    cursor[i]:=40
1ddd4                 | ' setspriteptr(17,@cursor)
1ddd4     F2 14 02 F6 | 	mov	arg02, objptr
1ddd8     01 00 00 FF 
1dddc     36 E4 85 F1 | 	sub	objptr, ##566
1dde0     11 12 06 F6 | 	mov	arg01, #17
1dde4     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dde8                 | ' setspritesize(17,8,16)
1dde8     11 12 06 F6 | 	mov	arg01, #17
1ddec     08 14 06 F6 | 	mov	arg02, #8
1ddf0     10 16 06 F6 | 	mov	arg03, #16
1ddf4     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ddf8                 | ' setspritepos(17,0,0)
1ddf8     11 12 06 F6 | 	mov	arg01, #17
1ddfc     00 14 06 F6 | 	mov	arg02, #0
1de00     00 16 06 F6 | 	mov	arg03, #0
1de04     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1de08                 | ' cursorshape:=14
1de08     0B 00 00 FF 
1de0c     C6 E4 05 F1 | 	add	objptr, ##5830
1de10     F2 1C 68 FC | 	wrlong	#14, objptr
1de14                 | ' cursorcolor:=color
1de14     04 E4 85 F1 | 	sub	objptr, #4
1de18     F2 1E 62 FC | 	wrlong	local01, objptr
1de1c     0B 00 00 FF 
1de20     C2 E4 85 F1 | 	sub	objptr, ##5826
1de24     A7 F0 03 F6 | 	mov	ptra, fp
1de28     B2 00 A0 FD | 	call	#popregs_
1de2c                 | _hg010b_spin2_initcursor_ret
1de2c     2D 00 64 FD | 	ret
1de30                 | 
1de30                 | ' 
1de30                 | ' pub setcursorshape(shape) | i
1de30                 | _hg010b_spin2_setcursorshape
1de30                 | ' 
1de30                 | ' cursorshape:=shape
1de30     0B 00 00 FF 
1de34     C6 E4 05 F1 | 	add	objptr, ##5830
1de38     F2 12 62 FC | 	wrlong	arg01, objptr
1de3c                 | ' repeat i from 0 to (8*cursorshape)-1
1de3c     00 00 06 F6 | 	mov	_var01, #0
1de40     09 03 02 F6 | 	mov	_var02, arg01
1de44     03 02 66 F0 | 	shl	_var02, #3
1de48     01 02 86 F1 | 	sub	_var02, #1
1de4c     00 02 56 F2 | 	cmps	_var02, #0 wc
1de50     01 04 86 F6 | 	negc	_var03, #1
1de54     02 07 02 F6 | 	mov	_var04, _var03
1de58     02 03 02 F1 | 	add	_var02, _var03
1de5c     0A 00 00 FF 
1de60     90 E4 85 F1 | 	sub	objptr, ##5264
1de64     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1de68                 | LR__2400
1de68                 | '   cursor[i]:=0
1de68     00 05 02 F6 | 	mov	_var03, _var01
1de6c     F2 04 02 F1 | 	add	_var03, objptr
1de70     02 01 48 FC | 	wrbyte	#0, _var03
1de74     03 01 02 F1 | 	add	_var01, _var04
1de78     01 01 0A F2 | 	cmp	_var01, _var02 wz
1de7c     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1de80                 | LR__2401
1de80                 | ' repeat i from 8*cursorshape to 127
1de80     0A 00 00 FF 
1de84     90 E4 05 F1 | 	add	objptr, ##5264
1de88     F2 06 02 FB | 	rdlong	_var04, objptr
1de8c     03 01 02 F6 | 	mov	_var01, _var04
1de90     03 00 66 F0 | 	shl	_var01, #3
1de94     0B 00 00 FF 
1de98     C6 E4 85 F1 | 	sub	objptr, ##5830
1de9c     03 06 66 F0 | 	shl	_var04, #3
1dea0     80 06 56 F2 | 	cmps	_var04, #128 wc
1dea4     01 04 A6 F6 | 	negnc	_var03, #1
1dea8     7F 02 06 F6 | 	mov	_var02, #127
1deac     02 03 02 F1 | 	add	_var02, _var03
1deb0     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1deb4                 | LR__2402
1deb4                 | '   cursor[i]:=cursorcolor
1deb4     00 07 02 F6 | 	mov	_var04, _var01
1deb8     01 00 00 FF 
1debc     36 E4 05 F1 | 	add	objptr, ##566
1dec0     F2 06 02 F1 | 	add	_var04, objptr
1dec4     0A 00 00 FF 
1dec8     8C E4 05 F1 | 	add	objptr, ##5260
1decc     F2 12 02 FB | 	rdlong	arg01, objptr
1ded0     0B 00 00 FF 
1ded4     C2 E4 85 F1 | 	sub	objptr, ##5826
1ded8     03 13 42 FC | 	wrbyte	arg01, _var04
1dedc     02 01 02 F1 | 	add	_var01, _var03
1dee0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dee4     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1dee8                 | LR__2403
1dee8                 | _hg010b_spin2_setcursorshape_ret
1dee8     2D 00 64 FD | 	ret
1deec                 | 
1deec                 | ' 
1deec                 | ' pub setcursorcolor(color) | i
1deec                 | _hg010b_spin2_setcursorcolor
1deec                 | ' 
1deec                 | ' cursorcolor:=color
1deec     0B 00 00 FF 
1def0     C2 E4 05 F1 | 	add	objptr, ##5826
1def4     F2 12 62 FC | 	wrlong	arg01, objptr
1def8                 | ' repeat i from 0 to (8*cursorshape)-1
1def8     00 12 06 F6 | 	mov	arg01, #0
1defc     04 E4 05 F1 | 	add	objptr, #4
1df00     F2 00 02 FB | 	rdlong	_var01, objptr
1df04     03 00 66 F0 | 	shl	_var01, #3
1df08     01 00 86 F1 | 	sub	_var01, #1
1df0c     00 00 56 F2 | 	cmps	_var01, #0 wc
1df10     01 02 86 F6 | 	negc	_var02, #1
1df14     01 05 02 F6 | 	mov	_var03, _var02
1df18     01 01 02 F1 | 	add	_var01, _var02
1df1c     0A 00 00 FF 
1df20     90 E4 85 F1 | 	sub	objptr, ##5264
1df24     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1df28                 | LR__2410
1df28                 | '   cursor[i]:=0
1df28     09 03 02 F6 | 	mov	_var02, arg01
1df2c     F2 02 02 F1 | 	add	_var02, objptr
1df30     01 01 48 FC | 	wrbyte	#0, _var02
1df34     02 13 02 F1 | 	add	arg01, _var03
1df38     00 13 0A F2 | 	cmp	arg01, _var01 wz
1df3c     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1df40                 | LR__2411
1df40                 | ' repeat i from 8*cursorshape to 127
1df40     0A 00 00 FF 
1df44     90 E4 05 F1 | 	add	objptr, ##5264
1df48     F2 04 02 FB | 	rdlong	_var03, objptr
1df4c     02 13 02 F6 | 	mov	arg01, _var03
1df50     03 12 66 F0 | 	shl	arg01, #3
1df54     0B 00 00 FF 
1df58     C6 E4 85 F1 | 	sub	objptr, ##5830
1df5c     03 04 66 F0 | 	shl	_var03, #3
1df60     80 04 56 F2 | 	cmps	_var03, #128 wc
1df64     01 02 A6 F6 | 	negnc	_var02, #1
1df68     7F 00 06 F6 | 	mov	_var01, #127
1df6c     01 01 02 F1 | 	add	_var01, _var02
1df70     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1df74                 | LR__2412
1df74                 | '   cursor[i]:=cursorcolor
1df74     09 05 02 F6 | 	mov	_var03, arg01
1df78     01 00 00 FF 
1df7c     36 E4 05 F1 | 	add	objptr, ##566
1df80     F2 04 02 F1 | 	add	_var03, objptr
1df84     0A 00 00 FF 
1df88     8C E4 05 F1 | 	add	objptr, ##5260
1df8c     F2 06 02 FB | 	rdlong	_var04, objptr
1df90     0B 00 00 FF 
1df94     C2 E4 85 F1 | 	sub	objptr, ##5826
1df98     02 07 42 FC | 	wrbyte	_var04, _var03
1df9c     01 13 02 F1 | 	add	arg01, _var02
1dfa0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1dfa4     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1dfa8                 | LR__2413
1dfa8                 | _hg010b_spin2_setcursorcolor_ret
1dfa8     2D 00 64 FD | 	ret
1dfac                 | 
1dfac                 | '   
1dfac                 | '   
1dfac                 | '   
1dfac                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1dfac                 | _hg010b_spin2_setmode
1dfac     02 4A 05 F6 | 	mov	COUNT_, #2
1dfb0     A8 00 A0 FD | 	call	#pushregs_
1dfb4                 | ' 
1dfb4                 | ' 
1dfb4                 | ' dl_ptr:=@emptydl[0]
1dfb4     01 00 00 FF 
1dfb8     1D E4 05 F1 | 	add	objptr, ##541
1dfbc     F2 1A 02 F6 | 	mov	arg05, objptr
1dfc0     FD E5 85 F1 | 	sub	objptr, #509
1dfc4     F2 1A 62 FC | 	wrlong	arg05, objptr
1dfc8                 | ' 
1dfc8                 | ' if cog>0 
1dfc8     10 E4 05 F1 | 	add	objptr, #16
1dfcc     F2 1A 02 FB | 	rdlong	arg05, objptr
1dfd0     30 E4 85 F1 | 	sub	objptr, #48
1dfd4     01 1A 56 F2 | 	cmps	arg05, #1 wc
1dfd8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1dfd8     01 12 06 36 |  if_ae	mov	arg01, #1
1dfdc     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1dfe0                 | ' xres:=1024
1dfe0     01 00 00 FF 
1dfe4     26 E4 05 F1 | 	add	objptr, ##550
1dfe8     02 00 80 FF 
1dfec     F2 00 68 FC | 	wrlong	##1024, objptr
1dff0                 | ' yres:=600
1dff0     04 E4 05 F1 | 	add	objptr, #4
1dff4     01 00 80 FF 
1dff8     F2 B0 68 FC | 	wrlong	##600, objptr
1dffc                 | ' ppl:=(timings[3])
1dffc     10 00 00 FF 
1e000     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e004     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e008     51 E5 85 F1 | 	sub	objptr, #337
1e00c     F2 1A 62 FC | 	wrlong	arg05, objptr
1e010                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e010     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e014     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e018     01 1E 66 F0 | 	shl	local01, #1
1e01c     80 E4 85 F1 | 	sub	objptr, #128
1e020     F2 1E 62 FC | 	wrlong	local01, objptr
1e024                 | ' cpl1:=cpl '' todo remove
1e024     04 E4 05 F1 | 	add	objptr, #4
1e028     F2 1E 62 FC | 	wrlong	local01, objptr
1e02c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e02c     02 00 00 FF 
1e030     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e034     41 E4 85 F1 | 	sub	objptr, #65
1e038     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e03c                 | ' repeat i from 0 to 3
1e03c     00 20 06 F6 | 	mov	local02, #0
1e040     02 00 00 FF 
1e044     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e048     08 E4 05 F1 | 	add	objptr, #8
1e04c     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e050                 | LR__2420
1e050                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e050     10 1F 02 F6 | 	mov	local01, local02
1e054     02 1E 66 F0 | 	shl	local01, #2
1e058     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e05c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e060     11 1A 66 F0 | 	shl	arg05, #17
1e064     0F 1F 02 FB | 	rdlong	local01, local01
1e068     0D 1F 02 F1 | 	add	local01, arg05
1e06c     80 40 38 FF 
1e070     00 1E 06 F1 | 	add	local01, ##1887502336
1e074     10 1B 02 F6 | 	mov	arg05, local02
1e078     02 1A 66 F0 | 	shl	arg05, #2
1e07c     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e080     0D 1F 62 FC | 	wrlong	local01, arg05
1e084     01 20 06 F1 | 	add	local02, #1
1e088     04 20 56 F2 | 	cmps	local02, #4 wc
1e08c     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e090                 | LR__2421
1e090     24 E4 85 F1 | 	sub	objptr, #36
1e094                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e094     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e098     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e09c     14 1E 66 FC | 	wrlong	local01, #20
1e0a0                 | ' hubset(timings[10])
1e0a0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e0a4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e0a8     10 00 00 FF 
1e0ac     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e0b0     00 12 62 FD | 	hubset	arg01
1e0b4                 | ' waitms(1)                                                   	' wait for stabilization
1e0b4     01 12 06 F6 | 	mov	arg01, #1
1e0b8     60 29 B0 FD | 	call	#__system___waitms
1e0bc     10 00 00 FF 
1e0c0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e0c4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e0c8     61 E4 05 F1 | 	add	objptr, #97
1e0cc     F2 20 62 FC | 	wrlong	local02, objptr
1e0d0     10 1F 52 F6 | 	abs	local01, local02 wc
1e0d4     04 1E 46 F0 | 	shr	local01, #4
1e0d8     0F 1F 82 F6 | 	negc	local01, local01
1e0dc     9C E4 05 F1 | 	add	objptr, #156
1e0e0     F2 1E 62 FC | 	wrlong	local01, objptr
1e0e4     A4 E4 85 F1 | 	sub	objptr, #164
1e0e8     F2 20 02 FB | 	rdlong	local02, objptr
1e0ec     08 E4 05 F1 | 	add	objptr, #8
1e0f0     F2 1E 02 FB | 	rdlong	local01, objptr
1e0f4     0F 21 02 FD | 	qmul	local02, local01
1e0f8                 | ' lines:=timings[11]
1e0f8                 | ' t_lines:=lines/16
1e0f8                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e0f8     29 E4 85 F1 | 	sub	objptr, #41
1e0fc     19 1E C6 F9 | 	decod	local01, #25
1e100     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e104     18 20 62 FD | 	getqx	local02
1e108     F2 20 62 FC | 	wrlong	local02, objptr
1e10c     38 E4 85 F1 | 	sub	objptr, #56
1e110     02 20 66 F0 | 	shl	local02, #2
1e114     10 1F 82 F1 | 	sub	local01, local02
1e118     F2 1E 62 FC | 	wrlong	local01, objptr
1e11c     FD E4 05 F1 | 	add	objptr, #253
1e120     F2 20 02 FB | 	rdlong	local02, objptr
1e124     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e128     0D 21 02 FD | 	qmul	local02, arg05
1e12c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e12c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e12c     F9 E4 85 F1 | 	sub	objptr, #249
1e130                 | ' mode_ptr:=@timings						' set pointers to timings
1e130     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e134                 | ' graphmode:=1024+512+192+48							' det global variable
1e134                 | ' makedl(graphmode)							' make a DL for the mode
1e134     03 00 00 FF 
1e138     F0 12 06 F6 | 	mov	arg01, ##1776
1e13c     18 20 62 FD | 	getqx	local02
1e140     10 1F 82 F1 | 	sub	local01, local02
1e144     F2 1E 62 FC | 	wrlong	local01, objptr
1e148     14 E4 05 F1 | 	add	objptr, #20
1e14c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e150     79 E4 05 F1 | 	add	objptr, #121
1e154     03 00 80 FF 
1e158     F2 E0 69 FC | 	wrlong	##1776, objptr
1e15c     91 E4 85 F1 | 	sub	objptr, #145
1e160     10 00 00 FF 
1e164     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e168     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e16c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e16c     F2 1E 02 FB | 	rdlong	local01, objptr
1e170     DD E4 05 F1 | 	add	objptr, #221
1e174     F2 1E 62 FC | 	wrlong	local01, objptr
1e178                 | ' s_font_ptr:=font_ptr
1e178     D5 E4 85 F1 | 	sub	objptr, #213
1e17c     F2 1E 02 FB | 	rdlong	local01, objptr
1e180     D9 E4 05 F1 | 	add	objptr, #217
1e184     F2 1E 62 FC | 	wrlong	local01, objptr
1e188                 | ' s_lines:=lines
1e188     80 E4 85 F1 | 	sub	objptr, #128
1e18c     F2 1E 02 FB | 	rdlong	local01, objptr
1e190     84 E4 05 F1 | 	add	objptr, #132
1e194     F2 1E 62 FC | 	wrlong	local01, objptr
1e198                 | ' s_buflen:=buflen
1e198     AD E4 85 F1 | 	sub	objptr, #173
1e19c     F2 1E 02 FB | 	rdlong	local01, objptr
1e1a0     B5 E4 05 F1 | 	add	objptr, #181
1e1a4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1a8                 | ' s_cpl:=cpl
1e1a8     94 E4 85 F1 | 	sub	objptr, #148
1e1ac     F2 1E 02 FB | 	rdlong	local01, objptr
1e1b0     90 E4 05 F1 | 	add	objptr, #144
1e1b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1b8                 | ' s_cpl1:=cpl
1e1b8     90 E4 85 F1 | 	sub	objptr, #144
1e1bc     F2 1E 02 FB | 	rdlong	local01, objptr
1e1c0     98 E4 05 F1 | 	add	objptr, #152
1e1c4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1c8                 | ' st_lines:=t_lines
1e1c8     0C E4 05 F1 | 	add	objptr, #12
1e1cc     F2 1E 02 FB | 	rdlong	local01, objptr
1e1d0     04 E4 05 F1 | 	add	objptr, #4
1e1d4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1d8                 | ' ppl:=ppl/xzoom  
1e1d8     28 E4 85 F1 | 	sub	objptr, #40
1e1dc     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e1e0     2C E4 05 F1 | 	add	objptr, #44
1e1e4     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e1e8     05 E5 85 F1 | 	sub	objptr, #261
1e1ec     BA 00 A0 FD | 	call	#divide_
1e1f0     D9 E4 05 F1 | 	add	objptr, #217
1e1f4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e1f8                 | ' s_ppl:=ppl
1e1f8     1C E4 05 F1 | 	add	objptr, #28
1e1fc     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e200     F5 E4 85 F1 | 	sub	objptr, #245
1e204                 | ' waitms(20)							' wait 
1e204     14 12 06 F6 | 	mov	arg01, #20
1e208     10 28 B0 FD | 	call	#__system___waitms
1e20c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e20c     04 E4 05 F1 | 	add	objptr, #4
1e210     F2 12 02 FB | 	rdlong	arg01, objptr
1e214     04 E4 85 F1 | 	sub	objptr, #4
1e218     F2 16 02 FB | 	rdlong	arg03, objptr
1e21c     09 17 82 F1 | 	sub	arg03, arg01
1e220     20 14 06 F6 | 	mov	arg02, #32
1e224     00 18 06 F6 | 	mov	arg04, #0
1e228     01 1A 06 F6 | 	mov	arg05, #1
1e22c     0B 00 00 FF 
1e230     CC E4 05 F1 | 	add	objptr, ##5836
1e234     E8 19 B0 FD | 	call	#_psram_spin2_fill
1e238     0B 00 00 FF 
1e23c     CC E4 85 F1 | 	sub	objptr, ##5836
1e240     A7 F0 03 F6 | 	mov	ptra, fp
1e244     B2 00 A0 FD | 	call	#popregs_
1e248                 | _hg010b_spin2_setmode_ret
1e248     2D 00 64 FD | 	ret
1e24c                 | 
1e24c                 | ' 
1e24c                 | ' '****************************************************************************************************************
1e24c                 | ' '                                                                                                             	*
1e24c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e24c                 | ' '                                                                                                             	*
1e24c                 | ' '****************************************************************************************************************
1e24c                 | ' 
1e24c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e24c                 | _hg010b_spin2_makedl
1e24c                 | ' 
1e24c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e24c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e24c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e24c     00 00 06 F6 | 	mov	_var01, #0
1e250     ED E5 05 F1 | 	add	objptr, #493
1e254     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e258                 | LR__2430
1e258                 | '   displaylist[i]:=0 
1e258     00 03 02 F6 | 	mov	_var02, _var01
1e25c     02 02 66 F0 | 	shl	_var02, #2
1e260     F2 02 02 F1 | 	add	_var02, objptr
1e264     01 01 68 FC | 	wrlong	#0, _var02
1e268     01 00 06 F1 | 	add	_var01, #1
1e26c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e270     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e274                 | LR__2431
1e274                 | '                         ' 
1e274                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e274     8C E5 85 F1 | 	sub	objptr, #396
1e278     F2 02 02 FB | 	rdlong	_var02, objptr
1e27c     14 02 66 F0 | 	shl	_var02, #20
1e280     01 02 06 F1 | 	add	_var02, #1
1e284     04 E4 85 F1 | 	sub	objptr, #4
1e288     F2 00 02 FB | 	rdlong	_var01, objptr
1e28c     02 00 66 F0 | 	shl	_var01, #2
1e290     04 00 66 F0 | 	shl	_var01, #4
1e294     00 03 02 F1 | 	add	_var02, _var01
1e298     90 E5 05 F1 | 	add	objptr, #400
1e29c     F2 02 62 FC | 	wrlong	_var02, objptr
1e2a0     ED E5 85 F1 | 	sub	objptr, #493
1e2a4                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e2a4     F2 02 02 FB | 	rdlong	_var02, objptr
1e2a8     04 02 66 F0 | 	shl	_var02, #4
1e2ac     02 02 06 F1 | 	add	_var02, #2
1e2b0     F1 E5 05 F1 | 	add	objptr, #497
1e2b4     F2 02 62 FC | 	wrlong	_var02, objptr
1e2b8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e2b8     04 E4 85 F1 | 	sub	objptr, #4
1e2bc     F2 02 02 F6 | 	mov	_var02, objptr
1e2c0     CD E5 85 F1 | 	sub	objptr, #461
1e2c4     F2 02 62 FC | 	wrlong	_var02, objptr
1e2c8     20 E4 85 F1 | 	sub	objptr, #32
1e2cc                 | _hg010b_spin2_makedl_ret
1e2cc     2D 00 64 FD | 	ret
1e2d0                 | 
1e2d0                 | ' 
1e2d0                 | ' 
1e2d0                 | ' '****************************************************************************************************************
1e2d0                 | ' '                                                                        					*
1e2d0                 | ' '  Graphic primitives                                                    					*
1e2d0                 | ' '                                                                        					*
1e2d0                 | ' '****************************************************************************************************************
1e2d0                 | ' 
1e2d0                 | ' pub setspriteptr(num,ptr)
1e2d0                 | _hg010b_spin2_setspriteptr
1e2d0                 | ' long[@spr1ptr+12*num]:=ptr
1e2d0     11 E5 05 F1 | 	add	objptr, #273
1e2d4     F2 00 02 F6 | 	mov	_var01, objptr
1e2d8     09 03 02 F6 | 	mov	_var02, arg01
1e2dc     01 02 66 F0 | 	shl	_var02, #1
1e2e0     09 03 02 F1 | 	add	_var02, arg01
1e2e4     02 02 66 F0 | 	shl	_var02, #2
1e2e8     01 01 02 F1 | 	add	_var01, _var02
1e2ec     00 15 62 FC | 	wrlong	arg02, _var01
1e2f0     11 E5 85 F1 | 	sub	objptr, #273
1e2f4                 | _hg010b_spin2_setspriteptr_ret
1e2f4     2D 00 64 FD | 	ret
1e2f8                 | 
1e2f8                 | ' 
1e2f8                 | ' pub setspritepos(num,x,y)
1e2f8                 | _hg010b_spin2_setspritepos
1e2f8                 | ' if y>601
1e2f8     01 00 00 FF 
1e2fc     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e300                 | '   y:=601
1e300     01 00 00 3F 
1e304     59 16 06 36 |  if_ae	mov	arg03, ##601
1e308                 | ' if x>1024
1e308     02 00 00 FF 
1e30c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e310                 | '   x:=1024
1e310     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e314                 | ' word[@spr1ptr+12*num+4]:=x
1e314     11 E5 05 F1 | 	add	objptr, #273
1e318     F2 00 02 F6 | 	mov	_var01, objptr
1e31c     09 03 02 F6 | 	mov	_var02, arg01
1e320     01 02 66 F0 | 	shl	_var02, #1
1e324     09 03 02 F1 | 	add	_var02, arg01
1e328     02 02 66 F0 | 	shl	_var02, #2
1e32c     01 01 02 F1 | 	add	_var01, _var02
1e330     04 00 06 F1 | 	add	_var01, #4
1e334     00 15 52 FC | 	wrword	arg02, _var01
1e338                 | ' word[@spr1ptr+12*num+6]:=y
1e338     F2 00 02 F6 | 	mov	_var01, objptr
1e33c     09 03 02 F6 | 	mov	_var02, arg01
1e340     01 02 66 F0 | 	shl	_var02, #1
1e344     09 03 02 F1 | 	add	_var02, arg01
1e348     02 02 66 F0 | 	shl	_var02, #2
1e34c     01 01 02 F1 | 	add	_var01, _var02
1e350     06 00 06 F1 | 	add	_var01, #6
1e354     00 17 52 FC | 	wrword	arg03, _var01
1e358     11 E5 85 F1 | 	sub	objptr, #273
1e35c                 | _hg010b_spin2_setspritepos_ret
1e35c     2D 00 64 FD | 	ret
1e360                 | 
1e360                 | ' 
1e360                 | ' pub setspritesize(num,w,h)
1e360                 | _hg010b_spin2_setspritesize
1e360                 | ' word[@spr1ptr+12*num+8]:=w
1e360     11 E5 05 F1 | 	add	objptr, #273
1e364     F2 00 02 F6 | 	mov	_var01, objptr
1e368     09 03 02 F6 | 	mov	_var02, arg01
1e36c     01 02 66 F0 | 	shl	_var02, #1
1e370     09 03 02 F1 | 	add	_var02, arg01
1e374     02 02 66 F0 | 	shl	_var02, #2
1e378     01 01 02 F1 | 	add	_var01, _var02
1e37c     08 00 06 F1 | 	add	_var01, #8
1e380     00 15 52 FC | 	wrword	arg02, _var01
1e384                 | ' word[@spr1ptr+12*num+10]:=h
1e384     F2 00 02 F6 | 	mov	_var01, objptr
1e388     09 03 02 F6 | 	mov	_var02, arg01
1e38c     01 02 66 F0 | 	shl	_var02, #1
1e390     09 03 02 F1 | 	add	_var02, arg01
1e394     02 02 66 F0 | 	shl	_var02, #2
1e398     01 01 02 F1 | 	add	_var01, _var02
1e39c     0A 00 06 F1 | 	add	_var01, #10
1e3a0     00 17 52 FC | 	wrword	arg03, _var01
1e3a4     11 E5 85 F1 | 	sub	objptr, #273
1e3a8                 | _hg010b_spin2_setspritesize_ret
1e3a8     2D 00 64 FD | 	ret
1e3ac                 | 
1e3ac                 | ' 
1e3ac                 | ' 
1e3ac                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e3ac                 | ' 
1e3ac                 | ' 
1e3ac                 | ' pub putpixel(x,y,c)
1e3ac                 | _hg010b_spin2_putpixel
1e3ac     04 4A 05 F6 | 	mov	COUNT_, #4
1e3b0     A8 00 A0 FD | 	call	#pushregs_
1e3b4     09 1F 02 F6 | 	mov	local01, arg01
1e3b8                 | ' 
1e3b8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e3b8     00 20 06 F6 | 	mov	local02, #0
1e3bc     00 1E 56 F2 | 	cmps	local01, #0 wc
1e3c0     01 20 66 36 |  if_ae	neg	local02, #1
1e3c4     E9 E4 05 F1 | 	add	objptr, #233
1e3c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e3cc     02 1A 66 F0 | 	shl	arg05, #2
1e3d0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e3d4     11 23 A2 F1 | 	subx	local03, local03
1e3d8     11 21 02 F5 | 	and	local02, local03
1e3dc     00 22 06 F6 | 	mov	local03, #0
1e3e0     00 14 56 F2 | 	cmps	arg02, #0 wc
1e3e4     01 22 66 36 |  if_ae	neg	local03, #1
1e3e8     11 21 02 F5 | 	and	local02, local03
1e3ec     04 E4 85 F1 | 	sub	objptr, #4
1e3f0     F2 22 02 FB | 	rdlong	local03, objptr
1e3f4     E5 E4 85 F1 | 	sub	objptr, #229
1e3f8     11 15 52 F2 | 	cmps	arg02, local03 wc
1e3fc     12 25 A2 F1 | 	subx	local04, local04
1e400     12 21 CA F7 | 	test	local02, local04 wz
1e404     48 00 90 AD |  if_e	jmp	#LR__2440
1e408     DD E4 05 F1 | 	add	objptr, #221
1e40c     F2 12 02 FB | 	rdlong	arg01, objptr
1e410     14 E4 05 F1 | 	add	objptr, #20
1e414     F2 24 02 FB | 	rdlong	local04, objptr
1e418     02 24 66 F0 | 	shl	local04, #2
1e41c     0A 25 02 FD | 	qmul	local04, arg02
1e420                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e420     0B 15 02 F6 | 	mov	arg02, arg03
1e424     01 16 06 F6 | 	mov	arg03, #1
1e428     00 18 06 F6 | 	mov	arg04, #0
1e42c     01 1A 06 F6 | 	mov	arg05, #1
1e430     0A 00 00 FF 
1e434     DB E5 05 F1 | 	add	objptr, ##5595
1e438     18 24 62 FD | 	getqx	local04
1e43c     0F 25 02 F1 | 	add	local04, local01
1e440     12 13 02 F1 | 	add	arg01, local04
1e444     D8 17 B0 FD | 	call	#_psram_spin2_fill
1e448     0B 00 00 FF 
1e44c     CC E4 85 F1 | 	sub	objptr, ##5836
1e450                 | LR__2440
1e450     A7 F0 03 F6 | 	mov	ptra, fp
1e454     B2 00 A0 FD | 	call	#popregs_
1e458                 | _hg010b_spin2_putpixel_ret
1e458     2D 00 64 FD | 	ret
1e45c                 | 
1e45c                 | ' 
1e45c                 | ' pub putpixel2(x,y,c)
1e45c                 | _hg010b_spin2_putpixel2
1e45c     02 4A 05 F6 | 	mov	COUNT_, #2
1e460     A8 00 A0 FD | 	call	#pushregs_
1e464     DD E4 05 F1 | 	add	objptr, #221
1e468     F2 1E 02 FB | 	rdlong	local01, objptr
1e46c     14 E4 05 F1 | 	add	objptr, #20
1e470     F2 1A 02 FB | 	rdlong	arg05, objptr
1e474     02 1A 66 F0 | 	shl	arg05, #2
1e478     0A 1B 02 FD | 	qmul	arg05, arg02
1e47c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e47c     0B 15 02 F6 | 	mov	arg02, arg03
1e480     01 16 06 F6 | 	mov	arg03, #1
1e484     00 18 06 F6 | 	mov	arg04, #0
1e488     01 1A 06 F6 | 	mov	arg05, #1
1e48c     0A 00 00 FF 
1e490     DB E5 05 F1 | 	add	objptr, ##5595
1e494     18 20 62 FD | 	getqx	local02
1e498     09 21 02 F1 | 	add	local02, arg01
1e49c     10 1F 02 F1 | 	add	local01, local02
1e4a0     0F 13 02 F6 | 	mov	arg01, local01
1e4a4     78 17 B0 FD | 	call	#_psram_spin2_fill
1e4a8     0B 00 00 FF 
1e4ac     CC E4 85 F1 | 	sub	objptr, ##5836
1e4b0     A7 F0 03 F6 | 	mov	ptra, fp
1e4b4     B2 00 A0 FD | 	call	#popregs_
1e4b8                 | _hg010b_spin2_putpixel2_ret
1e4b8     2D 00 64 FD | 	ret
1e4bc                 | 
1e4bc                 | ' 
1e4bc                 | ' pub getpixel2(x,y): c 
1e4bc                 | _hg010b_spin2_getpixel2
1e4bc     02 4A 05 F6 | 	mov	COUNT_, #2
1e4c0     A8 00 A0 FD | 	call	#pushregs_
1e4c4     0C F0 07 F1 | 	add	ptra, #12
1e4c8     04 4E 05 F1 | 	add	fp, #4
1e4cc     A7 12 62 FC | 	wrlong	arg01, fp
1e4d0     04 4E 05 F1 | 	add	fp, #4
1e4d4     A7 14 62 FC | 	wrlong	arg02, fp
1e4d8     08 4E 85 F1 | 	sub	fp, #8
1e4dc     A7 00 68 FC | 	wrlong	#0, fp
1e4e0     A7 12 02 F6 | 	mov	arg01, fp
1e4e4     DD E4 05 F1 | 	add	objptr, #221
1e4e8     F2 14 02 FB | 	rdlong	arg02, objptr
1e4ec     14 E4 05 F1 | 	add	objptr, #20
1e4f0     F2 16 02 FB | 	rdlong	arg03, objptr
1e4f4     02 16 66 F0 | 	shl	arg03, #2
1e4f8     08 4E 05 F1 | 	add	fp, #8
1e4fc     A7 FA 01 FB | 	rdlong	result1, fp
1e500     FD 16 02 FD | 	qmul	arg03, result1
1e504                 | ' 
1e504                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e504     04 4E 85 F1 | 	sub	fp, #4
1e508     A7 1E 02 FB | 	rdlong	local01, fp
1e50c     04 4E 85 F1 | 	sub	fp, #4
1e510     01 16 06 F6 | 	mov	arg03, #1
1e514     0A 00 00 FF 
1e518     DB E5 05 F1 | 	add	objptr, ##5595
1e51c     18 20 62 FD | 	getqx	local02
1e520     0F 21 02 F1 | 	add	local02, local01
1e524     10 15 02 F1 | 	add	arg02, local02
1e528     BC 15 B0 FD | 	call	#_psram_spin2_read1
1e52c     0B 00 00 FF 
1e530     CC E4 85 F1 | 	sub	objptr, ##5836
1e534                 | ' return c
1e534     A7 FA 01 FB | 	rdlong	result1, fp
1e538     A7 F0 03 F6 | 	mov	ptra, fp
1e53c     B2 00 A0 FD | 	call	#popregs_
1e540                 | _hg010b_spin2_getpixel2_ret
1e540     2D 00 64 FD | 	ret
1e544                 | 
1e544                 | '   
1e544                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e544                 | ' 
1e544                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e544                 | _hg010b_spin2_fastline
1e544     02 4A 05 F6 | 	mov	COUNT_, #2
1e548     A8 00 A0 FD | 	call	#pushregs_
1e54c     09 1F 02 F6 | 	mov	local01, arg01
1e550     0A 21 02 F6 | 	mov	local02, arg02
1e554                 | ' 
1e554                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e554     00 16 56 F2 | 	cmps	arg03, #0 wc
1e558     F4 00 90 CD |  if_b	jmp	#LR__2450
1e55c     01 00 00 FF 
1e560     2A E4 05 F1 | 	add	objptr, ##554
1e564     F2 1A 02 FB | 	rdlong	arg05, objptr
1e568     01 00 00 FF 
1e56c     2A E4 85 F1 | 	sub	objptr, ##554
1e570     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e574     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e578     00 1E 56 F2 | 	cmps	local01, #0 wc
1e57c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e580     CC 00 90 CD |  if_b	jmp	#LR__2450
1e584     01 00 00 FF 
1e588     26 E4 05 F1 | 	add	objptr, ##550
1e58c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e590     01 00 00 FF 
1e594     26 E4 85 F1 | 	sub	objptr, ##550
1e598     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e59c     01 00 00 1F 
1e5a0     26 E4 05 11 |  if_a	add	objptr, ##550
1e5a4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e5a8     01 00 00 1F 
1e5ac     26 E4 85 11 |  if_a	sub	objptr, ##550
1e5b0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e5b4                 | '   return
1e5b4     98 00 90 1D |  if_a	jmp	#LR__2450
1e5b8     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e5bc     0F 1B 02 16 |  if_a	mov	arg05, local01
1e5c0     10 1F 02 16 |  if_a	mov	local01, local02
1e5c4     0D 21 02 16 |  if_a	mov	local02, arg05
1e5c8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e5cc     00 1E 06 C6 |  if_b	mov	local01, #0
1e5d0     01 00 00 FF 
1e5d4     26 E4 05 F1 | 	add	objptr, ##550
1e5d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5dc     01 00 00 FF 
1e5e0     26 E4 85 F1 | 	sub	objptr, ##550
1e5e4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e5e8     01 00 00 3F 
1e5ec     26 E4 05 31 |  if_ae	add	objptr, ##550
1e5f0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e5f4     01 00 00 3F 
1e5f8     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e5fc     DD E4 05 F1 | 	add	objptr, #221
1e600     F2 12 02 FB | 	rdlong	arg01, objptr
1e604     14 E4 05 F1 | 	add	objptr, #20
1e608     F2 1A 02 FB | 	rdlong	arg05, objptr
1e60c     02 1A 66 F0 | 	shl	arg05, #2
1e610     0B 1B 02 FD | 	qmul	arg05, arg03
1e614                 | ' if x1>x2
1e614                 | '   x1,x2:=x2,x1
1e614                 | ' if x1<0 
1e614                 | '   x1:=0
1e614                 | ' if x2>=xres
1e614                 | '   x2:=xres-1  
1e614     01 20 86 31 |  if_ae	sub	local02, #1
1e618                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e618     01 16 06 F6 | 	mov	arg03, #1
1e61c     10 17 02 F1 | 	add	arg03, local02
1e620     0F 17 82 F1 | 	sub	arg03, local01
1e624     0C 15 02 F6 | 	mov	arg02, arg04
1e628     00 18 06 F6 | 	mov	arg04, #0
1e62c     01 1A 06 F6 | 	mov	arg05, #1
1e630     0A 00 00 FF 
1e634     DB E5 05 F1 | 	add	objptr, ##5595
1e638     18 20 62 FD | 	getqx	local02
1e63c     0F 21 02 F1 | 	add	local02, local01
1e640     10 13 02 F1 | 	add	arg01, local02
1e644     D8 15 B0 FD | 	call	#_psram_spin2_fill
1e648     0B 00 00 FF 
1e64c     CC E4 85 F1 | 	sub	objptr, ##5836
1e650                 | LR__2450
1e650     A7 F0 03 F6 | 	mov	ptra, fp
1e654     B2 00 A0 FD | 	call	#popregs_
1e658                 | _hg010b_spin2_fastline_ret
1e658     2D 00 64 FD | 	ret
1e65c                 | 
1e65c                 | ' 
1e65c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e65c                 | _hg010b_spin2_draw
1e65c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e660     A8 00 A0 FD | 	call	#pushregs_
1e664     09 1F 02 F6 | 	mov	local01, arg01
1e668     0A 21 02 F6 | 	mov	local02, arg02
1e66c     0B 23 02 F6 | 	mov	local03, arg03
1e670     0C 25 02 F6 | 	mov	local04, arg04
1e674     0D 27 02 F6 | 	mov	local05, arg05
1e678                 | ' 
1e678                 | ' if (y1==y2)
1e678     12 21 0A F2 | 	cmp	local02, local04 wz
1e67c     18 00 90 5D |  if_ne	jmp	#LR__2460
1e680                 | '   fastline(x1,x2,y1,c)
1e680     0F 13 02 F6 | 	mov	arg01, local01
1e684     11 15 02 F6 | 	mov	arg02, local03
1e688     10 17 02 F6 | 	mov	arg03, local02
1e68c     13 19 02 F6 | 	mov	arg04, local05
1e690     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e694     F8 00 90 FD | 	jmp	#LR__2466
1e698                 | LR__2460
1e698                 | ' else  
1e698                 | '   x:=x1
1e698     0F 29 02 F6 | 	mov	local06, local01
1e69c                 | '   y:=y1
1e69c     10 2B 02 F6 | 	mov	local07, local02
1e6a0                 | ' 
1e6a0                 | '   if (x1<x2) 
1e6a0     11 1F 52 F2 | 	cmps	local01, local03 wc
1e6a4                 | '     xi:=1
1e6a4     01 2C 06 C6 |  if_b	mov	local08, #1
1e6a8                 | '     dx:=x2-x1
1e6a8     11 2F 02 C6 |  if_b	mov	local09, local03
1e6ac     0F 2F 82 C1 |  if_b	sub	local09, local01
1e6b0                 | '   else
1e6b0                 | '     xi:=-1
1e6b0     01 2C 66 36 |  if_ae	neg	local08, #1
1e6b4                 | '     dx:=x1-x2
1e6b4     11 1F 82 31 |  if_ae	sub	local01, local03
1e6b8     0F 2F 02 36 |  if_ae	mov	local09, local01
1e6bc                 | '   
1e6bc                 | '   if (y1<y2) 
1e6bc     12 21 52 F2 | 	cmps	local02, local04 wc
1e6c0                 | '     yi:=1
1e6c0     01 30 06 C6 |  if_b	mov	local10, #1
1e6c4                 | '     dy:=y2-y1
1e6c4     12 33 02 C6 |  if_b	mov	local11, local04
1e6c8     10 33 82 C1 |  if_b	sub	local11, local02
1e6cc                 | '   else
1e6cc                 | '     yi:=-1
1e6cc     01 30 66 36 |  if_ae	neg	local10, #1
1e6d0                 | '     dy:=y1-y2
1e6d0     12 21 82 31 |  if_ae	sub	local02, local04
1e6d4     10 33 02 36 |  if_ae	mov	local11, local02
1e6d8                 | ' 
1e6d8                 | '   putpixel(x,y,c)
1e6d8     13 17 02 F6 | 	mov	arg03, local05
1e6dc     14 13 02 F6 | 	mov	arg01, local06
1e6e0     15 15 02 F6 | 	mov	arg02, local07
1e6e4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e6e8                 | ' 
1e6e8                 | '   if (dx>dy)
1e6e8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e6ec     50 00 90 ED |  if_be	jmp	#LR__2462
1e6f0                 | '     ai:=(dy-dx)*2
1e6f0     19 35 02 F6 | 	mov	local12, local11
1e6f4     17 35 82 F1 | 	sub	local12, local09
1e6f8     01 34 66 F0 | 	shl	local12, #1
1e6fc                 | '     bi:=dy*2
1e6fc     01 32 66 F0 | 	shl	local11, #1
1e700     19 37 02 F6 | 	mov	local13, local11
1e704                 | '     d:= bi-dx
1e704     1B 39 02 F6 | 	mov	local14, local13
1e708     17 39 82 F1 | 	sub	local14, local09
1e70c                 | '     repeat while (x<>x2) 
1e70c                 | LR__2461
1e70c     11 29 0A F2 | 	cmp	local06, local03 wz
1e710     7C 00 90 AD |  if_e	jmp	#LR__2465
1e714                 | '       if (d>=0) 
1e714     00 38 56 F2 | 	cmps	local14, #0 wc
1e718                 | '         x+=xi
1e718     16 29 02 31 |  if_ae	add	local06, local08
1e71c                 | '         y+=yi
1e71c     18 2B 02 31 |  if_ae	add	local07, local10
1e720                 | '         d+=ai
1e720     1A 39 02 31 |  if_ae	add	local14, local12
1e724                 | '       else
1e724                 | '         d+=bi
1e724     1B 39 02 C1 |  if_b	add	local14, local13
1e728                 | '         x+=xi
1e728     16 29 02 C1 |  if_b	add	local06, local08
1e72c                 | '       putpixel(x,y,c)
1e72c     14 13 02 F6 | 	mov	arg01, local06
1e730     15 15 02 F6 | 	mov	arg02, local07
1e734     13 17 02 F6 | 	mov	arg03, local05
1e738     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e73c     CC FF 9F FD | 	jmp	#LR__2461
1e740                 | LR__2462
1e740                 | '   else
1e740                 | '     ai:=(dx-dy)*2
1e740     17 35 02 F6 | 	mov	local12, local09
1e744     19 35 82 F1 | 	sub	local12, local11
1e748     01 34 66 F0 | 	shl	local12, #1
1e74c                 | '     bi:=dx*2
1e74c     01 2E 66 F0 | 	shl	local09, #1
1e750     17 37 02 F6 | 	mov	local13, local09
1e754                 | '     d:=bi-dy
1e754     1B 39 02 F6 | 	mov	local14, local13
1e758     19 39 82 F1 | 	sub	local14, local11
1e75c                 | '     repeat while (y<>y2)
1e75c                 | LR__2463
1e75c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e760     2C 00 90 AD |  if_e	jmp	#LR__2464
1e764                 | '       if (d>=0)
1e764     00 38 56 F2 | 	cmps	local14, #0 wc
1e768                 | '         x+=xi
1e768     16 29 02 31 |  if_ae	add	local06, local08
1e76c                 | '         y+=yi
1e76c     18 2B 02 31 |  if_ae	add	local07, local10
1e770                 | '         d+=ai
1e770     1A 39 02 31 |  if_ae	add	local14, local12
1e774                 | '       else
1e774                 | '         d+=bi
1e774     1B 39 02 C1 |  if_b	add	local14, local13
1e778                 | '         y+=yi
1e778     18 2B 02 C1 |  if_b	add	local07, local10
1e77c                 | '       putpixel(x, y,c)
1e77c     14 13 02 F6 | 	mov	arg01, local06
1e780     15 15 02 F6 | 	mov	arg02, local07
1e784     13 17 02 F6 | 	mov	arg03, local05
1e788     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e78c     CC FF 9F FD | 	jmp	#LR__2463
1e790                 | LR__2464
1e790                 | LR__2465
1e790                 | LR__2466
1e790     A7 F0 03 F6 | 	mov	ptra, fp
1e794     B2 00 A0 FD | 	call	#popregs_
1e798                 | _hg010b_spin2_draw_ret
1e798     2D 00 64 FD | 	ret
1e79c                 | 
1e79c                 | '  
1e79c                 | ' pub fillpush(val) 
1e79c                 | _hg010b_spin2_fillpush
1e79c                 | ' fillstack[fillptr]:=val
1e79c     0B 00 00 FF 
1e7a0     BA E4 05 F1 | 	add	objptr, ##5818
1e7a4     F2 00 02 FB | 	rdlong	_var01, objptr
1e7a8     02 00 66 F0 | 	shl	_var01, #2
1e7ac     0A 00 00 FF 
1e7b0     00 E4 85 F1 | 	sub	objptr, ##5120
1e7b4     F2 00 02 F1 | 	add	_var01, objptr
1e7b8     00 13 62 FC | 	wrlong	arg01, _var01
1e7bc                 | ' fillptr+=1   
1e7bc     0A 00 00 FF 
1e7c0     00 E4 05 F1 | 	add	objptr, ##5120
1e7c4     F2 00 02 FB | 	rdlong	_var01, objptr
1e7c8     01 00 06 F1 | 	add	_var01, #1
1e7cc     F2 00 62 FC | 	wrlong	_var01, objptr
1e7d0     0B 00 00 FF 
1e7d4     BA E4 85 F1 | 	sub	objptr, ##5818
1e7d8                 | _hg010b_spin2_fillpush_ret
1e7d8     2D 00 64 FD | 	ret
1e7dc                 | 
1e7dc                 | ' 
1e7dc                 | '     
1e7dc                 | ' pub fillpop() : val
1e7dc                 | _hg010b_spin2_fillpop
1e7dc                 | ' 
1e7dc                 | ' fillptr-=1
1e7dc     0B 00 00 FF 
1e7e0     BA E4 05 F1 | 	add	objptr, ##5818
1e7e4     F2 FA 01 FB | 	rdlong	result1, objptr
1e7e8     01 FA 85 F1 | 	sub	result1, #1
1e7ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e7f0                 | ' if fillptr<0
1e7f0     0B 00 00 FF 
1e7f4     BA E4 85 F1 | 	sub	objptr, ##5818
1e7f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e7fc                 | '   fillptr:=0
1e7fc     0B 00 00 CF 
1e800     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e804     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e808     0B 00 00 CF 
1e80c     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e810                 | '   val:=-12345
1e810     E7 FF 7F CF 
1e814     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e818     28 00 90 CD |  if_b	jmp	#LR__2470
1e81c                 | ' else 
1e81c                 | '   val:=fillstack[fillptr]
1e81c     0B 00 00 FF 
1e820     BA E4 05 F1 | 	add	objptr, ##5818
1e824     F2 00 02 FB | 	rdlong	_var01, objptr
1e828     02 00 66 F0 | 	shl	_var01, #2
1e82c     0A 00 00 FF 
1e830     00 E4 85 F1 | 	sub	objptr, ##5120
1e834     F2 00 02 F1 | 	add	_var01, objptr
1e838     00 01 02 FB | 	rdlong	_var01, _var01
1e83c     01 00 00 FF 
1e840     BA E4 85 F1 | 	sub	objptr, ##698
1e844                 | LR__2470
1e844                 | ' return val
1e844     00 FB 01 F6 | 	mov	result1, _var01
1e848                 | _hg010b_spin2_fillpop_ret
1e848     2D 00 64 FD | 	ret
1e84c                 | 
1e84c                 | ' 
1e84c                 | '       
1e84c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e84c                 | _hg010b_spin2_fill
1e84c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e850     A8 00 A0 FD | 	call	#pushregs_
1e854                 | ' 
1e854                 | ' newcolor:=newcolor & 255
1e854     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e858                 | ' oldcolor:=oldcolor & 255
1e858     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e85c                 | ' 
1e85c                 | ' if (oldcolor == newcolor) 
1e85c     0F 21 0A F2 | 	cmp	local02, local01 wz
1e860                 | '   return
1e860     70 02 90 AD |  if_e	jmp	#LR__2489
1e864                 | ' 
1e864                 | ' fillptr:=0
1e864     0B 00 00 FF 
1e868     BA E4 05 F1 | 	add	objptr, ##5818
1e86c     F2 00 68 FC | 	wrlong	#0, objptr
1e870                 | ' fillmax:=0
1e870     04 E4 05 F1 | 	add	objptr, #4
1e874     F2 00 68 FC | 	wrlong	#0, objptr
1e878     0B 00 00 FF 
1e87c     BE E4 85 F1 | 	sub	objptr, ##5822
1e880                 | ' fillpush(x)
1e880     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e884                 | ' fillpush(y)
1e884     0A 13 02 F6 | 	mov	arg01, arg02
1e888     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e88c                 | ' y:=fillpop()
1e88c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e890     FD 22 02 F6 | 	mov	local03, result1
1e894                 | ' x:=fillpop()
1e894     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e898     FD 24 02 F6 | 	mov	local04, result1
1e89c                 | ' 'pinhigh(38)
1e89c                 | ' repeat while (x>-1)       
1e89c                 | LR__2480
1e89c     00 24 56 F2 | 	cmps	local04, #0 wc
1e8a0     30 02 90 CD |  if_b	jmp	#LR__2488
1e8a4                 | '  ' pintoggle(39)
1e8a4                 | '   x1 := x
1e8a4     12 27 02 F6 | 	mov	local05, local04
1e8a8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e8a8                 | LR__2481
1e8a8     00 28 06 F6 | 	mov	local06, #0
1e8ac     00 2A 06 F6 | 	mov	local07, #0
1e8b0     00 26 56 F2 | 	cmps	local05, #0 wc
1e8b4     01 2A 66 36 |  if_ae	neg	local07, #1
1e8b8     00 2A 0E F2 | 	cmp	local07, #0 wz
1e8bc     00 28 26 56 |  if_ne	not	local06, #0
1e8c0     00 2C 06 F6 | 	mov	local08, #0
1e8c4     00 2E 06 F6 | 	mov	local09, #0
1e8c8     11 15 02 F6 | 	mov	arg02, local03
1e8cc     13 13 02 F6 | 	mov	arg01, local05
1e8d0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e8d4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8d8     00 2E 26 A6 |  if_e	not	local09, #0
1e8dc     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8e0     00 2C 26 56 |  if_ne	not	local08, #0
1e8e4     16 29 CA F7 | 	test	local06, local08 wz
1e8e8                 | '     x1--
1e8e8     01 26 86 51 |  if_ne	sub	local05, #1
1e8ec     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1e8f0                 | '   x1++
1e8f0     01 26 06 F1 | 	add	local05, #1
1e8f4                 | '   spanabove := 0
1e8f4     00 30 06 F6 | 	mov	local10, #0
1e8f8                 | '   spanbelow := 0
1e8f8     00 32 06 F6 | 	mov	local11, #0
1e8fc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e8fc                 | LR__2482
1e8fc     00 28 06 F6 | 	mov	local06, #0
1e900     02 00 00 FF 
1e904     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e908     00 28 26 C6 |  if_b	not	local06, #0
1e90c     00 2C 06 F6 | 	mov	local08, #0
1e910     00 2E 06 F6 | 	mov	local09, #0
1e914     11 15 02 F6 | 	mov	arg02, local03
1e918     13 13 02 F6 | 	mov	arg01, local05
1e91c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e920     10 FB 09 F2 | 	cmp	result1, local02 wz
1e924     00 2E 26 A6 |  if_e	not	local09, #0
1e928     00 2E 0E F2 | 	cmp	local09, #0 wz
1e92c     00 2C 26 56 |  if_ne	not	local08, #0
1e930     16 29 CA F7 | 	test	local06, local08 wz
1e934     88 01 90 AD |  if_e	jmp	#LR__2487
1e938                 | '     putpixel2 (x1,y, newcolor & 255)
1e938     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e93c     13 13 02 F6 | 	mov	arg01, local05
1e940     11 15 02 F6 | 	mov	arg02, local03
1e944     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e948                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e948     00 28 06 F6 | 	mov	local06, #0
1e94c     00 2A 06 F6 | 	mov	local07, #0
1e950     00 30 0E F2 | 	cmp	local10, #0 wz
1e954     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e958     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e95c     00 2A 0E F2 | 	cmp	local07, #0 wz
1e960     00 28 26 56 |  if_ne	not	local06, #0
1e964     00 2C 06 F6 | 	mov	local08, #0
1e968     00 2E 06 F6 | 	mov	local09, #0
1e96c     11 15 02 F6 | 	mov	arg02, local03
1e970     01 14 86 F1 | 	sub	arg02, #1
1e974     13 13 02 F6 | 	mov	arg01, local05
1e978     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e97c     10 FB 09 F2 | 	cmp	result1, local02 wz
1e980     00 2E 26 A6 |  if_e	not	local09, #0
1e984     00 2E 0E F2 | 	cmp	local09, #0 wz
1e988     00 2C 26 56 |  if_ne	not	local08, #0
1e98c     16 29 CA F7 | 	test	local06, local08 wz
1e990     1C 00 90 AD |  if_e	jmp	#LR__2483
1e994                 | '       fillpush(x1)
1e994     13 13 02 F6 | 	mov	arg01, local05
1e998     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e99c                 | '       fillpush(y-1)
1e99c     11 13 02 F6 | 	mov	arg01, local03
1e9a0     01 12 86 F1 | 	sub	arg01, #1
1e9a4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e9a8                 | '       spanabove := 1 
1e9a8     01 30 06 F6 | 	mov	local10, #1
1e9ac     4C 00 90 FD | 	jmp	#LR__2484
1e9b0                 | LR__2483
1e9b0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e9b0     00 28 06 F6 | 	mov	local06, #0
1e9b4     00 2A 06 F6 | 	mov	local07, #0
1e9b8     00 30 0E F2 | 	cmp	local10, #0 wz
1e9bc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e9c0     01 2A 66 16 |  if_a	neg	local07, #1
1e9c4     00 2A 0E F2 | 	cmp	local07, #0 wz
1e9c8     00 28 26 56 |  if_ne	not	local06, #0
1e9cc     00 2C 06 F6 | 	mov	local08, #0
1e9d0     00 2E 06 F6 | 	mov	local09, #0
1e9d4     11 15 02 F6 | 	mov	arg02, local03
1e9d8     01 14 86 F1 | 	sub	arg02, #1
1e9dc     13 13 02 F6 | 	mov	arg01, local05
1e9e0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e9e4     10 FB 09 F2 | 	cmp	result1, local02 wz
1e9e8     00 2E 26 56 |  if_ne	not	local09, #0
1e9ec     00 2E 0E F2 | 	cmp	local09, #0 wz
1e9f0     00 2C 26 56 |  if_ne	not	local08, #0
1e9f4     16 29 CA F7 | 	test	local06, local08 wz
1e9f8                 | '       spanabove := 0 
1e9f8     00 30 06 56 |  if_ne	mov	local10, #0
1e9fc                 | LR__2484
1e9fc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1e9fc     00 28 06 F6 | 	mov	local06, #0
1ea00     00 2A 06 F6 | 	mov	local07, #0
1ea04     00 32 0E F2 | 	cmp	local11, #0 wz
1ea08     01 00 00 AF 
1ea0c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ea10     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ea14     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea18     00 28 26 56 |  if_ne	not	local06, #0
1ea1c     00 2C 06 F6 | 	mov	local08, #0
1ea20     00 2E 06 F6 | 	mov	local09, #0
1ea24     11 15 02 F6 | 	mov	arg02, local03
1ea28     01 14 06 F1 | 	add	arg02, #1
1ea2c     13 13 02 F6 | 	mov	arg01, local05
1ea30     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ea34     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea38     00 2E 26 A6 |  if_e	not	local09, #0
1ea3c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea40     00 2C 26 56 |  if_ne	not	local08, #0
1ea44     16 29 CA F7 | 	test	local06, local08 wz
1ea48     1C 00 90 AD |  if_e	jmp	#LR__2485
1ea4c                 | '       fillpush(x1)
1ea4c     13 13 02 F6 | 	mov	arg01, local05
1ea50     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea54                 | '       fillpush(y + 1)
1ea54     11 13 02 F6 | 	mov	arg01, local03
1ea58     01 12 06 F1 | 	add	arg01, #1
1ea5c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea60                 | '       spanBelow := 1
1ea60     01 32 06 F6 | 	mov	local11, #1
1ea64     50 00 90 FD | 	jmp	#LR__2486
1ea68                 | LR__2485
1ea68                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ea68     00 28 06 F6 | 	mov	local06, #0
1ea6c     00 2A 06 F6 | 	mov	local07, #0
1ea70     00 32 0E F2 | 	cmp	local11, #0 wz
1ea74     01 00 00 5F 
1ea78     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ea7c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ea80     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea84     00 28 26 56 |  if_ne	not	local06, #0
1ea88     00 2C 06 F6 | 	mov	local08, #0
1ea8c     00 2E 06 F6 | 	mov	local09, #0
1ea90     11 15 02 F6 | 	mov	arg02, local03
1ea94     01 14 06 F1 | 	add	arg02, #1
1ea98     13 13 02 F6 | 	mov	arg01, local05
1ea9c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eaa0     10 FB 09 F2 | 	cmp	result1, local02 wz
1eaa4     00 2E 26 56 |  if_ne	not	local09, #0
1eaa8     00 2E 0E F2 | 	cmp	local09, #0 wz
1eaac     00 2C 26 56 |  if_ne	not	local08, #0
1eab0     16 29 CA F7 | 	test	local06, local08 wz
1eab4                 | '       spanbelow := 0
1eab4     00 32 06 56 |  if_ne	mov	local11, #0
1eab8                 | LR__2486
1eab8                 | '     x1++
1eab8     01 26 06 F1 | 	add	local05, #1
1eabc     3C FE 9F FD | 	jmp	#LR__2482
1eac0                 | LR__2487
1eac0                 | '   y:=fillpop()
1eac0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eac4     FD 22 02 F6 | 	mov	local03, result1
1eac8                 | '   x:=fillpop()
1eac8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eacc     FD 24 02 F6 | 	mov	local04, result1
1ead0     C8 FD 9F FD | 	jmp	#LR__2480
1ead4                 | LR__2488
1ead4                 | LR__2489
1ead4     A7 F0 03 F6 | 	mov	ptra, fp
1ead8     B2 00 A0 FD | 	call	#popregs_
1eadc                 | _hg010b_spin2_fill_ret
1eadc     2D 00 64 FD | 	ret
1eae0                 | 
1eae0                 | ' 'pinlow(38)    
1eae0                 | ' 
1eae0                 | ' '-- A filled circle -----------------------------------------------------
1eae0                 | ' 
1eae0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1eae0                 | _hg010b_spin2_fcircle
1eae0     08 4A 05 F6 | 	mov	COUNT_, #8
1eae4     A8 00 A0 FD | 	call	#pushregs_
1eae8     0B 1F 02 F6 | 	mov	local01, arg03
1eaec     FF FF 7F FF 
1eaf0     FE 1F 06 FD | 	qmul	local01, ##-2
1eaf4     09 21 02 F6 | 	mov	local02, arg01
1eaf8     0A 23 02 F6 | 	mov	local03, arg02
1eafc     0C 25 02 F6 | 	mov	local04, arg04
1eb00                 | ' 
1eb00                 | ' d:=5-4*r
1eb00     0F 19 02 F6 | 	mov	arg04, local01
1eb04     02 18 66 F0 | 	shl	arg04, #2
1eb08     05 26 06 F6 | 	mov	local05, #5
1eb0c     0C 27 82 F1 | 	sub	local05, arg04
1eb10                 | ' x:=0
1eb10     00 28 06 F6 | 	mov	local06, #0
1eb14                 | ' y:=r
1eb14                 | ' da:=(-2*r+5)*4
1eb14                 | ' db:=3*4
1eb14     0C 2A 06 F6 | 	mov	local07, #12
1eb18                 | ' repeat while (x<=y) 
1eb18     18 2C 62 FD | 	getqx	local08
1eb1c     05 2C 06 F1 | 	add	local08, #5
1eb20     02 2C 66 F0 | 	shl	local08, #2
1eb24                 | LR__2490
1eb24     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb28     B4 00 90 1D |  if_a	jmp	#LR__2492
1eb2c                 | '   fastline(x0-x,x0+x,y0-y,c)
1eb2c     10 13 02 F6 | 	mov	arg01, local02
1eb30     14 13 82 F1 | 	sub	arg01, local06
1eb34     10 15 02 F6 | 	mov	arg02, local02
1eb38     14 15 02 F1 | 	add	arg02, local06
1eb3c     11 17 02 F6 | 	mov	arg03, local03
1eb40     0F 17 82 F1 | 	sub	arg03, local01
1eb44     12 19 02 F6 | 	mov	arg04, local04
1eb48     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb4c                 | '   fastline(x0-x,x0+x,y0+y,c)
1eb4c     10 13 02 F6 | 	mov	arg01, local02
1eb50     14 13 82 F1 | 	sub	arg01, local06
1eb54     10 15 02 F6 | 	mov	arg02, local02
1eb58     14 15 02 F1 | 	add	arg02, local06
1eb5c     11 17 02 F6 | 	mov	arg03, local03
1eb60     0F 17 02 F1 | 	add	arg03, local01
1eb64     12 19 02 F6 | 	mov	arg04, local04
1eb68     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb6c                 | '   fastline(x0-y,x0+y,y0-x,c)
1eb6c     10 13 02 F6 | 	mov	arg01, local02
1eb70     0F 13 82 F1 | 	sub	arg01, local01
1eb74     10 15 02 F6 | 	mov	arg02, local02
1eb78     0F 15 02 F1 | 	add	arg02, local01
1eb7c     11 17 02 F6 | 	mov	arg03, local03
1eb80     14 17 82 F1 | 	sub	arg03, local06
1eb84     12 19 02 F6 | 	mov	arg04, local04
1eb88     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eb8c                 | '   fastline(x0-y,x0+y,y0+x,c)
1eb8c     10 13 02 F6 | 	mov	arg01, local02
1eb90     0F 13 82 F1 | 	sub	arg01, local01
1eb94     10 15 02 F6 | 	mov	arg02, local02
1eb98     0F 15 02 F1 | 	add	arg02, local01
1eb9c     11 17 02 F6 | 	mov	arg03, local03
1eba0     14 17 02 F1 | 	add	arg03, local06
1eba4     12 19 02 F6 | 	mov	arg04, local04
1eba8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ebac                 | '   if d>0 
1ebac     01 26 56 F2 | 	cmps	local05, #1 wc
1ebb0     18 00 90 CD |  if_b	jmp	#LR__2491
1ebb4                 | '     d+=da
1ebb4     16 27 02 F1 | 	add	local05, local08
1ebb8                 | '     y-=1
1ebb8     01 1E 86 F1 | 	sub	local01, #1
1ebbc                 | '     x+=1
1ebbc     01 28 06 F1 | 	add	local06, #1
1ebc0                 | '     da+=4*4
1ebc0     10 2C 06 F1 | 	add	local08, #16
1ebc4                 | '     db+=2*4
1ebc4     08 2A 06 F1 | 	add	local07, #8
1ebc8     58 FF 9F FD | 	jmp	#LR__2490
1ebcc                 | LR__2491
1ebcc                 | '   else
1ebcc                 | '     d+=db
1ebcc     15 27 02 F1 | 	add	local05, local07
1ebd0                 | '     x+=1
1ebd0     01 28 06 F1 | 	add	local06, #1
1ebd4                 | '     da+=2*4
1ebd4     08 2C 06 F1 | 	add	local08, #8
1ebd8                 | '     db+=2*4
1ebd8     08 2A 06 F1 | 	add	local07, #8
1ebdc     44 FF 9F FD | 	jmp	#LR__2490
1ebe0                 | LR__2492
1ebe0     A7 F0 03 F6 | 	mov	ptra, fp
1ebe4     B2 00 A0 FD | 	call	#popregs_
1ebe8                 | _hg010b_spin2_fcircle_ret
1ebe8     2D 00 64 FD | 	ret
1ebec                 | 
1ebec                 | '  
1ebec                 | ' '-- A circle ------------------------------------------------------------ 
1ebec                 | '  
1ebec                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ebec                 | _hg010b_spin2_circle
1ebec     08 4A 05 F6 | 	mov	COUNT_, #8
1ebf0     A8 00 A0 FD | 	call	#pushregs_
1ebf4     0B 1F 02 F6 | 	mov	local01, arg03
1ebf8     FF FF 7F FF 
1ebfc     FE 1F 06 FD | 	qmul	local01, ##-2
1ec00     09 21 02 F6 | 	mov	local02, arg01
1ec04     0A 23 02 F6 | 	mov	local03, arg02
1ec08     0C 25 02 F6 | 	mov	local04, arg04
1ec0c                 | ' 
1ec0c                 | '  
1ec0c                 | ' d:=5-4*r
1ec0c     0F 19 02 F6 | 	mov	arg04, local01
1ec10     02 18 66 F0 | 	shl	arg04, #2
1ec14     05 26 06 F6 | 	mov	local05, #5
1ec18     0C 27 82 F1 | 	sub	local05, arg04
1ec1c                 | ' x:=0
1ec1c     00 28 06 F6 | 	mov	local06, #0
1ec20                 | ' y:=r
1ec20                 | ' da:=(-2*r+5)*4
1ec20                 | ' db:=3*4
1ec20     0C 2A 06 F6 | 	mov	local07, #12
1ec24                 | ' repeat while (x<=y) 
1ec24     18 2C 62 FD | 	getqx	local08
1ec28     05 2C 06 F1 | 	add	local08, #5
1ec2c     02 2C 66 F0 | 	shl	local08, #2
1ec30                 | LR__2500
1ec30     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ec34     F4 00 90 1D |  if_a	jmp	#LR__2502
1ec38                 | '   putpixel(x0-x,y0-y,c)
1ec38     10 13 02 F6 | 	mov	arg01, local02
1ec3c     14 13 82 F1 | 	sub	arg01, local06
1ec40     11 15 02 F6 | 	mov	arg02, local03
1ec44     0F 15 82 F1 | 	sub	arg02, local01
1ec48     12 17 02 F6 | 	mov	arg03, local04
1ec4c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec50                 | '   putpixel(x0-x,y0+y,c)
1ec50     10 13 02 F6 | 	mov	arg01, local02
1ec54     14 13 82 F1 | 	sub	arg01, local06
1ec58     11 15 02 F6 | 	mov	arg02, local03
1ec5c     0F 15 02 F1 | 	add	arg02, local01
1ec60     12 17 02 F6 | 	mov	arg03, local04
1ec64     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec68                 | '   putpixel(x0+x,y0-y,c)
1ec68     10 13 02 F6 | 	mov	arg01, local02
1ec6c     14 13 02 F1 | 	add	arg01, local06
1ec70     11 15 02 F6 | 	mov	arg02, local03
1ec74     0F 15 82 F1 | 	sub	arg02, local01
1ec78     12 17 02 F6 | 	mov	arg03, local04
1ec7c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec80                 | '   putpixel(x0+x,y0+y,c)
1ec80     10 13 02 F6 | 	mov	arg01, local02
1ec84     14 13 02 F1 | 	add	arg01, local06
1ec88     11 15 02 F6 | 	mov	arg02, local03
1ec8c     0F 15 02 F1 | 	add	arg02, local01
1ec90     12 17 02 F6 | 	mov	arg03, local04
1ec94     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ec98                 | '   putpixel(x0-y,y0-x,c)
1ec98     10 13 02 F6 | 	mov	arg01, local02
1ec9c     0F 13 82 F1 | 	sub	arg01, local01
1eca0     11 15 02 F6 | 	mov	arg02, local03
1eca4     14 15 82 F1 | 	sub	arg02, local06
1eca8     12 17 02 F6 | 	mov	arg03, local04
1ecac     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecb0                 | '   putpixel(x0-y,y0+x,c)
1ecb0     10 13 02 F6 | 	mov	arg01, local02
1ecb4     0F 13 82 F1 | 	sub	arg01, local01
1ecb8     11 15 02 F6 | 	mov	arg02, local03
1ecbc     14 15 02 F1 | 	add	arg02, local06
1ecc0     12 17 02 F6 | 	mov	arg03, local04
1ecc4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecc8                 | '   putpixel(x0+y,y0-x,c)
1ecc8     10 13 02 F6 | 	mov	arg01, local02
1eccc     0F 13 02 F1 | 	add	arg01, local01
1ecd0     11 15 02 F6 | 	mov	arg02, local03
1ecd4     14 15 82 F1 | 	sub	arg02, local06
1ecd8     12 17 02 F6 | 	mov	arg03, local04
1ecdc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ece0                 | '   putpixel(x0+y,y0+x,c)
1ece0     10 13 02 F6 | 	mov	arg01, local02
1ece4     0F 13 02 F1 | 	add	arg01, local01
1ece8     11 15 02 F6 | 	mov	arg02, local03
1ecec     14 15 02 F1 | 	add	arg02, local06
1ecf0     12 17 02 F6 | 	mov	arg03, local04
1ecf4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ecf8                 | '   if d>0 
1ecf8     01 26 56 F2 | 	cmps	local05, #1 wc
1ecfc     18 00 90 CD |  if_b	jmp	#LR__2501
1ed00                 | '     d+=da
1ed00     16 27 02 F1 | 	add	local05, local08
1ed04                 | '     y-=1
1ed04     01 1E 86 F1 | 	sub	local01, #1
1ed08                 | '     x+=1
1ed08     01 28 06 F1 | 	add	local06, #1
1ed0c                 | '     da+=4*4
1ed0c     10 2C 06 F1 | 	add	local08, #16
1ed10                 | '     db+=2*4
1ed10     08 2A 06 F1 | 	add	local07, #8
1ed14     18 FF 9F FD | 	jmp	#LR__2500
1ed18                 | LR__2501
1ed18                 | '   else
1ed18                 | '     d+=db
1ed18     15 27 02 F1 | 	add	local05, local07
1ed1c                 | '     x+=1
1ed1c     01 28 06 F1 | 	add	local06, #1
1ed20                 | '     da+=2*4
1ed20     08 2C 06 F1 | 	add	local08, #8
1ed24                 | '     db+=2*4
1ed24     08 2A 06 F1 | 	add	local07, #8
1ed28     04 FF 9F FD | 	jmp	#LR__2500
1ed2c                 | LR__2502
1ed2c     A7 F0 03 F6 | 	mov	ptra, fp
1ed30     B2 00 A0 FD | 	call	#popregs_
1ed34                 | _hg010b_spin2_circle_ret
1ed34     2D 00 64 FD | 	ret
1ed38                 | 
1ed38                 | '     
1ed38                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ed38                 | ' 
1ed38                 | ' pub frame(x1,y1,x2,y2,c)
1ed38                 | _hg010b_spin2_frame
1ed38     05 4A 05 F6 | 	mov	COUNT_, #5
1ed3c     A8 00 A0 FD | 	call	#pushregs_
1ed40     09 1F 02 F6 | 	mov	local01, arg01
1ed44     0A 21 02 F6 | 	mov	local02, arg02
1ed48     0B 23 02 F6 | 	mov	local03, arg03
1ed4c     0C 25 02 F6 | 	mov	local04, arg04
1ed50     0D 27 02 F6 | 	mov	local05, arg05
1ed54                 | ' 
1ed54                 | ' fastline(x1,x2,y1,c)
1ed54     0F 13 02 F6 | 	mov	arg01, local01
1ed58     11 15 02 F6 | 	mov	arg02, local03
1ed5c     10 17 02 F6 | 	mov	arg03, local02
1ed60     13 19 02 F6 | 	mov	arg04, local05
1ed64     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed68                 | ' fastline(x1,x2,y2,c)
1ed68     0F 13 02 F6 | 	mov	arg01, local01
1ed6c     11 15 02 F6 | 	mov	arg02, local03
1ed70     12 17 02 F6 | 	mov	arg03, local04
1ed74     13 19 02 F6 | 	mov	arg04, local05
1ed78     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ed7c                 | ' line(x1,y1,x1,y2,c)
1ed7c     0F 13 02 F6 | 	mov	arg01, local01
1ed80     10 15 02 F6 | 	mov	arg02, local02
1ed84     0F 17 02 F6 | 	mov	arg03, local01
1ed88     12 19 02 F6 | 	mov	arg04, local04
1ed8c     13 1B 02 F6 | 	mov	arg05, local05
1ed90                 | ' draw(x1,y1,x2,y2,c)
1ed90     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ed94                 | ' line(x2,y1,x2,y2,c)
1ed94     11 13 02 F6 | 	mov	arg01, local03
1ed98     10 15 02 F6 | 	mov	arg02, local02
1ed9c     11 17 02 F6 | 	mov	arg03, local03
1eda0     12 19 02 F6 | 	mov	arg04, local04
1eda4     13 1B 02 F6 | 	mov	arg05, local05
1eda8                 | ' draw(x1,y1,x2,y2,c)
1eda8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1edac     A7 F0 03 F6 | 	mov	ptra, fp
1edb0     B2 00 A0 FD | 	call	#popregs_
1edb4                 | _hg010b_spin2_frame_ret
1edb4     2D 00 64 FD | 	ret
1edb8                 | 
1edb8                 | ' 
1edb8                 | ' '-- A box (a filled rectangle) ----------------------------------------
1edb8                 | ' 
1edb8                 | ' pub box(x1,y1,x2,y2,c) |yy
1edb8                 | _hg010b_spin2_box
1edb8     06 4A 05 F6 | 	mov	COUNT_, #6
1edbc     A8 00 A0 FD | 	call	#pushregs_
1edc0     09 1F 02 F6 | 	mov	local01, arg01
1edc4     0A 21 02 F6 | 	mov	local02, arg02
1edc8     0B 23 02 F6 | 	mov	local03, arg03
1edcc     0C 25 02 F6 | 	mov	local04, arg04
1edd0     0D 27 02 F6 | 	mov	local05, arg05
1edd4                 | ' 
1edd4                 | ' repeat yy from y1 to y2
1edd4     10 25 52 F2 | 	cmps	local04, local02 wc
1edd8     01 28 86 F6 | 	negc	local06, #1
1eddc     14 25 02 F1 | 	add	local04, local06
1ede0                 | LR__2510
1ede0                 | '   fastline(x1,x2,yy,c)
1ede0     0F 13 02 F6 | 	mov	arg01, local01
1ede4     11 15 02 F6 | 	mov	arg02, local03
1ede8     13 19 02 F6 | 	mov	arg04, local05
1edec     10 17 02 F6 | 	mov	arg03, local02
1edf0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1edf4     14 21 02 F1 | 	add	local02, local06
1edf8     12 21 0A F2 | 	cmp	local02, local04 wz
1edfc     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1ee00     A7 F0 03 F6 | 	mov	ptra, fp
1ee04     B2 00 A0 FD | 	call	#popregs_
1ee08                 | _hg010b_spin2_box_ret
1ee08     2D 00 64 FD | 	ret
1ee0c                 | 
1ee0c                 | '       
1ee0c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ee0c                 | _hg010b_spin2_putcharxycgf
1ee0c                 | ' 
1ee0c                 | '  
1ee0c                 | ' repeat yy from 0 to 15
1ee0c     00 00 06 F6 | 	mov	_var01, #0
1ee10     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1ee14                 | LR__2520
1ee14                 | ' 
1ee14                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ee14     95 E4 05 F1 | 	add	objptr, #149
1ee18     F2 02 02 FB | 	rdlong	_var02, objptr
1ee1c     0A 02 66 F0 | 	shl	_var02, #10
1ee20     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ee24     01 05 02 F1 | 	add	_var03, _var02
1ee28     0B 03 02 F6 | 	mov	_var02, arg03
1ee2c     04 02 66 F0 | 	shl	_var02, #4
1ee30     01 05 02 F1 | 	add	_var03, _var02
1ee34     00 05 02 F1 | 	add	_var03, _var01
1ee38     02 05 C2 FA | 	rdbyte	_var03, _var03
1ee3c                 | '   asm
1ee3c     00 04 0E F4 | 	testb	_var03, #0 wz
1ee40     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ee44     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ee48     01 04 0E F4 | 	testb	_var03, #1 wz
1ee4c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ee50     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ee54     02 04 0E F4 | 	testb	_var03, #2 wz
1ee58     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ee5c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ee60     03 04 0E F4 | 	testb	_var03, #3 wz
1ee64     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ee68     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ee6c     04 04 0E F4 | 	testb	_var03, #4 wz
1ee70     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ee74     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ee78     05 04 0E F4 | 	testb	_var03, #5 wz
1ee7c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ee80     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ee84     06 04 0E F4 | 	testb	_var03, #6 wz
1ee88     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ee8c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ee90     07 04 0E F4 | 	testb	_var03, #7 wz
1ee94     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ee98     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ee9c                 | '   
1ee9c                 | '   ccc[0]:=c1
1ee9c     99 E5 05 F1 | 	add	objptr, #409
1eea0     F2 06 62 FC | 	wrlong	_var04, objptr
1eea4                 | '   ccc[1]:=c2 
1eea4     04 E4 05 F1 | 	add	objptr, #4
1eea8     F2 08 62 FC | 	wrlong	_var05, objptr
1eeac                 | '   long[mailbox0][2]:=8
1eeac     49 E4 85 F1 | 	sub	objptr, #73
1eeb0     F2 04 02 FB | 	rdlong	_var03, objptr
1eeb4     08 04 06 F1 | 	add	_var03, #8
1eeb8     02 11 68 FC | 	wrlong	#8, _var03
1eebc                 | '   long[mailbox0][1]:=@ccc
1eebc     45 E4 05 F1 | 	add	objptr, #69
1eec0     F2 04 02 F6 | 	mov	_var03, objptr
1eec4     45 E4 85 F1 | 	sub	objptr, #69
1eec8     F2 02 02 FB | 	rdlong	_var02, objptr
1eecc     04 02 06 F1 | 	add	_var02, #4
1eed0     01 05 62 FC | 	wrlong	_var03, _var02
1eed4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1eed4     0C E5 85 F1 | 	sub	objptr, #268
1eed8     F2 04 02 FB | 	rdlong	_var03, objptr
1eedc     0A 03 02 F6 | 	mov	_var02, arg02
1eee0     00 03 02 F1 | 	add	_var02, _var01
1eee4     0A 02 66 F0 | 	shl	_var02, #10
1eee8     09 0B 02 F6 | 	mov	_var06, arg01
1eeec     02 0A 66 F0 | 	shl	_var06, #2
1eef0     05 03 02 F1 | 	add	_var02, _var06
1eef4     01 05 02 F1 | 	add	_var03, _var02
1eef8     00 00 78 FF 
1eefc     00 04 06 F1 | 	add	_var03, ##-268435456
1ef00     0C E5 05 F1 | 	add	objptr, #268
1ef04     F2 0A 02 FB | 	rdlong	_var06, objptr
1ef08     05 05 62 FC | 	wrlong	_var03, _var06
1ef0c                 | '   repeat
1ef0c                 | LR__2521
1ef0c     F2 04 02 FB | 	rdlong	_var03, objptr
1ef10     02 03 02 FB | 	rdlong	_var02, _var03
1ef14     00 02 56 F2 | 	cmps	_var02, #0 wc
1ef18     F0 FF 9F CD |  if_b	jmp	#LR__2521
1ef1c     E9 E5 85 F1 | 	sub	objptr, #489
1ef20     01 00 06 F1 | 	add	_var01, #1
1ef24     10 00 56 F2 | 	cmps	_var01, #16 wc
1ef28     E8 FE 9F CD |  if_b	jmp	#LR__2520
1ef2c                 | LR__2522
1ef2c                 | _hg010b_spin2_putcharxycgf_ret
1ef2c     2D 00 64 FD | 	ret
1ef30                 | 
1ef30                 | ' 
1ef30                 | ' 
1ef30                 | ' '**********************************************************************r***
1ef30                 | ' '                                                                        *
1ef30                 | ' ' Font related functions                                                 *
1ef30                 | ' '                                                                        *
1ef30                 | ' '*************************************************************************
1ef30                 | ' 
1ef30                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ef30                 | ' 
1ef30                 | ' pub setfontfamily(afontnum)
1ef30                 | _hg010b_spin2_setfontfamily
1ef30                 | ' 
1ef30                 | ' font_family:=afontnum
1ef30     95 E4 05 F1 | 	add	objptr, #149
1ef34     F2 12 62 FC | 	wrlong	arg01, objptr
1ef38     95 E4 85 F1 | 	sub	objptr, #149
1ef3c                 | ' 'if afontnum==8
1ef3c                 | ' '  font_ptr:=@amiga_font
1ef3c                 | ' 
1ef3c                 | ' if afontnum==4
1ef3c     04 12 0E F2 | 	cmp	arg01, #4 wz
1ef40                 | '   font_ptr:=@st_font
1ef40     08 00 00 AF 
1ef44     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ef48     08 E4 05 A1 |  if_e	add	objptr, #8
1ef4c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef50     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef54     08 00 00 AF 
1ef58     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ef5c                 | ' if afontnum==0
1ef5c     00 12 0E F2 | 	cmp	arg01, #0 wz
1ef60                 | '   font_ptr:=@vga_font
1ef60     08 E4 05 A1 |  if_e	add	objptr, #8
1ef64     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef68     08 E4 85 A1 |  if_e	sub	objptr, #8
1ef6c                 | _hg010b_spin2_setfontfamily_ret
1ef6c     2D 00 64 FD | 	ret
1ef70                 | 
1ef70                 | ' 
1ef70                 | ' '*************************************************************************
1ef70                 | ' '                                                                        *
1ef70                 | ' '  Cursor functions                                                      *
1ef70                 | ' '                                                                        *
1ef70                 | ' '*************************************************************************
1ef70                 | ' 
1ef70                 | ' 
1ef70                 | ' pub setcursorpos(x,y)
1ef70                 | _hg010b_spin2_setcursorpos
1ef70                 | ' 
1ef70                 | ' ''---------- Set the (x,y) position of cursor
1ef70                 | ' 
1ef70                 | ' cursor_x:=x
1ef70     3C E4 05 F1 | 	add	objptr, #60
1ef74     F2 12 52 FC | 	wrword	arg01, objptr
1ef78                 | ' cursor_y:=y
1ef78     02 E4 05 F1 | 	add	objptr, #2
1ef7c     F2 14 42 FC | 	wrbyte	arg02, objptr
1ef80                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ef80     02 E4 85 F1 | 	sub	objptr, #2
1ef84     F2 14 E2 FA | 	rdword	arg02, objptr
1ef88     02 14 66 F0 | 	shl	arg02, #2
1ef8c     02 E4 05 F1 | 	add	objptr, #2
1ef90     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ef94     3E E4 85 F1 | 	sub	objptr, #62
1ef98     04 16 66 F0 | 	shl	arg03, #4
1ef9c     04 16 06 F1 | 	add	arg03, #4
1efa0     11 12 06 F6 | 	mov	arg01, #17
1efa4     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1efa8                 | _hg010b_spin2_setcursorpos_ret
1efa8     2D 00 64 FD | 	ret
1efac                 | 
1efac                 | ' 
1efac                 | ' pub setcursorx(x)
1efac                 | _hg010b_spin2_setcursorx
1efac                 | ' cursor_x:=x
1efac     3C E4 05 F1 | 	add	objptr, #60
1efb0     F2 12 52 FC | 	wrword	arg01, objptr
1efb4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1efb4     F2 14 E2 FA | 	rdword	arg02, objptr
1efb8     02 14 66 F0 | 	shl	arg02, #2
1efbc     02 E4 05 F1 | 	add	objptr, #2
1efc0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1efc4     3E E4 85 F1 | 	sub	objptr, #62
1efc8     04 16 66 F0 | 	shl	arg03, #4
1efcc     04 16 06 F1 | 	add	arg03, #4
1efd0     11 12 06 F6 | 	mov	arg01, #17
1efd4     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1efd8                 | _hg010b_spin2_setcursorx_ret
1efd8     2D 00 64 FD | 	ret
1efdc                 | 
1efdc                 | ' 
1efdc                 | ' pub setcursory(y) 
1efdc                 | _hg010b_spin2_setcursory
1efdc                 | ' cursor_y:=y
1efdc     3E E4 05 F1 | 	add	objptr, #62
1efe0     F2 12 42 FC | 	wrbyte	arg01, objptr
1efe4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1efe4     02 E4 85 F1 | 	sub	objptr, #2
1efe8     F2 14 E2 FA | 	rdword	arg02, objptr
1efec     02 14 66 F0 | 	shl	arg02, #2
1eff0     02 E4 05 F1 | 	add	objptr, #2
1eff4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eff8     3E E4 85 F1 | 	sub	objptr, #62
1effc     04 16 66 F0 | 	shl	arg03, #4
1f000     04 16 06 F1 | 	add	arg03, #4
1f004     11 12 06 F6 | 	mov	arg01, #17
1f008     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f00c                 | _hg010b_spin2_setcursory_ret
1f00c     2D 00 64 FD | 	ret
1f010                 | 
1f010                 | ' 
1f010                 | ' '*************************************************************************
1f010                 | ' '                                                                        *
1f010                 | ' '  VBlank functions                                                      *
1f010                 | ' '                                                                        *
1f010                 | ' '*************************************************************************
1f010                 | ' 
1f010                 | ' pub waitvbl(amount) | i
1f010                 | _hg010b_spin2_waitvbl
1f010     03 4A 05 F6 | 	mov	COUNT_, #3
1f014     A8 00 A0 FD | 	call	#pushregs_
1f018     09 1F 02 F6 | 	mov	local01, arg01
1f01c                 | ' 
1f01c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f01c                 | ' 
1f01c                 | ' repeat i from 1 to amount
1f01c     01 20 06 F6 | 	mov	local02, #1
1f020     01 1E 56 F2 | 	cmps	local01, #1 wc
1f024     01 22 86 F6 | 	negc	local03, #1
1f028     11 1F 02 F1 | 	add	local01, local03
1f02c                 | LR__2530
1f02c                 | '   repeat until vblank==0
1f02c                 | LR__2531
1f02c     49 E4 05 F1 | 	add	objptr, #73
1f030     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f034     49 E4 85 F1 | 	sub	objptr, #73
1f038     0C 00 90 AD |  if_e	jmp	#LR__2532
1f03c                 | '     waitus(100)
1f03c     64 12 06 F6 | 	mov	arg01, #100
1f040     44 1A B0 FD | 	call	#__system___waitus
1f044     E4 FF 9F FD | 	jmp	#LR__2531
1f048                 | LR__2532
1f048                 | '   repeat until vblank==1
1f048                 | LR__2533
1f048     49 E4 05 F1 | 	add	objptr, #73
1f04c     F2 12 02 FB | 	rdlong	arg01, objptr
1f050     49 E4 85 F1 | 	sub	objptr, #73
1f054     01 12 0E F2 | 	cmp	arg01, #1 wz
1f058     0C 00 90 AD |  if_e	jmp	#LR__2534
1f05c                 | '     waitus(100)
1f05c     64 12 06 F6 | 	mov	arg01, #100
1f060     24 1A B0 FD | 	call	#__system___waitus
1f064     E0 FF 9F FD | 	jmp	#LR__2533
1f068                 | LR__2534
1f068     11 21 02 F1 | 	add	local02, local03
1f06c     0F 21 0A F2 | 	cmp	local02, local01 wz
1f070     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f074     A7 F0 03 F6 | 	mov	ptra, fp
1f078     B2 00 A0 FD | 	call	#popregs_
1f07c                 | _hg010b_spin2_waitvbl_ret
1f07c     2D 00 64 FD | 	ret
1f080                 | 
1f080                 | ' 
1f080                 | ' 
1f080                 | ' pub cls(fc,bc)   :c,i
1f080                 | _hg010b_spin2_cls
1f080     02 4A 05 F6 | 	mov	COUNT_, #2
1f084     A8 00 A0 FD | 	call	#pushregs_
1f088     09 1F 02 F6 | 	mov	local01, arg01
1f08c     0A 21 02 F6 | 	mov	local02, arg02
1f090                 | ' 
1f090                 | ' c:=bc
1f090                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f090     DD E4 05 F1 | 	add	objptr, #221
1f094     F2 12 02 FB | 	rdlong	arg01, objptr
1f098     A5 E4 85 F1 | 	sub	objptr, #165
1f09c     F2 16 02 FB | 	rdlong	arg03, objptr
1f0a0     02 16 66 F0 | 	shl	arg03, #2
1f0a4     10 15 02 F6 | 	mov	arg02, local02
1f0a8     00 18 06 F6 | 	mov	arg04, #0
1f0ac     01 1A 06 F6 | 	mov	arg05, #1
1f0b0     0B 00 00 FF 
1f0b4     94 E4 05 F1 | 	add	objptr, ##5780
1f0b8     64 0B B0 FD | 	call	#_psram_spin2_fill
1f0bc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f0bc     0B 00 00 FF 
1f0c0     C8 E4 85 F1 | 	sub	objptr, ##5832
1f0c4     F2 12 02 FB | 	rdlong	arg01, objptr
1f0c8     04 E4 85 F1 | 	sub	objptr, #4
1f0cc     F2 16 02 FB | 	rdlong	arg03, objptr
1f0d0     09 17 82 F1 | 	sub	arg03, arg01
1f0d4     20 14 06 F6 | 	mov	arg02, #32
1f0d8     00 18 06 F6 | 	mov	arg04, #0
1f0dc     01 1A 06 F6 | 	mov	arg05, #1
1f0e0     0B 00 00 FF 
1f0e4     CC E4 05 F1 | 	add	objptr, ##5836
1f0e8     34 0B B0 FD | 	call	#_psram_spin2_fill
1f0ec                 | ' setwritecolors(fc,bc)
1f0ec                 | ' 
1f0ec                 | ' write_color:=ff
1f0ec     0B 00 00 FF 
1f0f0     8B E4 85 F1 | 	sub	objptr, ##5771
1f0f4     F2 1E 62 FC | 	wrlong	local01, objptr
1f0f8                 | ' write_background:=bb
1f0f8     04 E4 05 F1 | 	add	objptr, #4
1f0fc     F2 20 62 FC | 	wrlong	local02, objptr
1f100                 | ' cursor_x:=0
1f100     09 E4 85 F1 | 	sub	objptr, #9
1f104     F2 00 58 FC | 	wrword	#0, objptr
1f108                 | ' cursor_y:=0
1f108     02 E4 05 F1 | 	add	objptr, #2
1f10c     F2 00 48 FC | 	wrbyte	#0, objptr
1f110                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f110     02 E4 85 F1 | 	sub	objptr, #2
1f114     F2 14 E2 FA | 	rdword	arg02, objptr
1f118     02 14 66 F0 | 	shl	arg02, #2
1f11c     02 E4 05 F1 | 	add	objptr, #2
1f120     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f124     3E E4 85 F1 | 	sub	objptr, #62
1f128     04 16 66 F0 | 	shl	arg03, #4
1f12c     04 16 06 F1 | 	add	arg03, #4
1f130     11 12 06 F6 | 	mov	arg01, #17
1f134     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f138                 | ' setcursorcolor(fc)
1f138     0F 13 02 F6 | 	mov	arg01, local01
1f13c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f140     10 FB 01 F6 | 	mov	result1, local02
1f144     00 FC 05 F6 | 	mov	result2, #0
1f148     A7 F0 03 F6 | 	mov	ptra, fp
1f14c     B2 00 A0 FD | 	call	#popregs_
1f150                 | _hg010b_spin2_cls_ret
1f150     2D 00 64 FD | 	ret
1f154                 | 
1f154                 | ' 
1f154                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f154                 | ' 
1f154                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f154                 | _hg010b_spin2_putchar
1f154     02 4A 05 F6 | 	mov	COUNT_, #2
1f158     A8 00 A0 FD | 	call	#pushregs_
1f15c     09 1F 02 F6 | 	mov	local01, arg01
1f160                 | ' 
1f160                 | ' if achar==10
1f160     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f164                 | '   crlf()
1f164     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f168                 | ' if achar==9
1f168     09 1E 0E F2 | 	cmp	local01, #9 wz
1f16c     18 00 90 5D |  if_ne	jmp	#LR__2540
1f170                 | '   cursor_x:=(cursor_x& %11110000)+16
1f170     3C E4 05 F1 | 	add	objptr, #60
1f174     F2 16 E2 FA | 	rdword	arg03, objptr
1f178     F0 16 06 F5 | 	and	arg03, #240
1f17c     10 16 06 F1 | 	add	arg03, #16
1f180     F2 16 52 FC | 	wrword	arg03, objptr
1f184     3C E4 85 F1 | 	sub	objptr, #60
1f188                 | LR__2540
1f188                 | '   
1f188                 | ' if (achar<>9) && (achar<>10) 
1f188     09 1E 0E F2 | 	cmp	local01, #9 wz
1f18c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f190     A8 00 90 AD |  if_e	jmp	#LR__2541
1f194                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f194     3C E4 05 F1 | 	add	objptr, #60
1f198     F2 12 E2 FA | 	rdword	arg01, objptr
1f19c     02 E4 05 F1 | 	add	objptr, #2
1f1a0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f1a4     04 14 66 F0 | 	shl	arg02, #4
1f1a8     04 14 06 F1 | 	add	arg02, #4
1f1ac     03 E4 05 F1 | 	add	objptr, #3
1f1b0     F2 18 02 FB | 	rdlong	arg04, objptr
1f1b4     04 E4 05 F1 | 	add	objptr, #4
1f1b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1bc     45 E4 85 F1 | 	sub	objptr, #69
1f1c0     0F 17 02 F6 | 	mov	arg03, local01
1f1c4     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f1c8     04 E4 05 F1 | 	add	objptr, #4
1f1cc     F2 12 02 FB | 	rdlong	arg01, objptr
1f1d0     10 00 00 FF 
1f1d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f1d8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f1dc     3A E4 05 F1 | 	add	objptr, #58
1f1e0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f1e4     0D 17 02 FD | 	qmul	arg03, arg05
1f1e8                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f1e8     10 00 00 FF 
1f1ec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f1f0     02 E4 85 F1 | 	sub	objptr, #2
1f1f4     F2 20 E2 FA | 	rdword	local02, objptr
1f1f8     01 20 46 F0 | 	shr	local02, #1
1f1fc     0F 15 02 F6 | 	mov	arg02, local01
1f200     01 16 06 F6 | 	mov	arg03, #1
1f204     00 18 06 F6 | 	mov	arg04, #0
1f208     01 1A 06 F6 | 	mov	arg05, #1
1f20c     0B 00 00 FF 
1f210     90 E4 05 F1 | 	add	objptr, ##5776
1f214     18 1E 62 FD | 	getqx	local01
1f218     10 1F 02 F1 | 	add	local01, local02
1f21c     0F 13 02 F1 | 	add	arg01, local01
1f220     FC 09 B0 FD | 	call	#_psram_spin2_fill
1f224                 | '   cursor_x+=2
1f224     0B 00 00 FF 
1f228     90 E4 85 F1 | 	sub	objptr, ##5776
1f22c     F2 20 E2 FA | 	rdword	local02, objptr
1f230     02 20 06 F1 | 	add	local02, #2
1f234     F2 20 52 FC | 	wrword	local02, objptr
1f238     3C E4 85 F1 | 	sub	objptr, #60
1f23c                 | LR__2541
1f23c                 | ' 
1f23c                 | ' if cursor_x>=256
1f23c     3C E4 05 F1 | 	add	objptr, #60
1f240     F2 20 E2 FA | 	rdword	local02, objptr
1f244     3C E4 85 F1 | 	sub	objptr, #60
1f248     00 21 56 F2 | 	cmps	local02, #256 wc
1f24c     64 00 90 CD |  if_b	jmp	#LR__2543
1f250                 | '   cursor_x:=0
1f250     3C E4 05 F1 | 	add	objptr, #60
1f254     F2 00 58 FC | 	wrword	#0, objptr
1f258                 | '   cursor_y+=1
1f258     02 E4 05 F1 | 	add	objptr, #2
1f25c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f260     01 20 06 F1 | 	add	local02, #1
1f264     F2 20 42 FC | 	wrbyte	local02, objptr
1f268                 | '   if cursor_y>st_lines-1
1f268     C3 E4 05 F1 | 	add	objptr, #195
1f26c     F2 20 02 FB | 	rdlong	local02, objptr
1f270     01 20 86 F1 | 	sub	local02, #1
1f274     C3 E4 85 F1 | 	sub	objptr, #195
1f278     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f27c     3E E4 85 F1 | 	sub	objptr, #62
1f280     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f284     2C 00 90 ED |  if_be	jmp	#LR__2542
1f288                 | '     scrollup2()
1f288     00 12 06 F6 | 	mov	arg01, #0
1f28c     01 00 00 FF 
1f290     58 14 06 F6 | 	mov	arg02, ##600
1f294     10 16 06 F6 | 	mov	arg03, #16
1f298     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f29c                 | '     cursor_y:=st_lines-1
1f29c     01 E5 05 F1 | 	add	objptr, #257
1f2a0     F2 20 02 FB | 	rdlong	local02, objptr
1f2a4     01 20 86 F1 | 	sub	local02, #1
1f2a8     C3 E4 85 F1 | 	sub	objptr, #195
1f2ac     F2 20 42 FC | 	wrbyte	local02, objptr
1f2b0     3E E4 85 F1 | 	sub	objptr, #62
1f2b4                 | LR__2542
1f2b4                 | LR__2543
1f2b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f2b4     3C E4 05 F1 | 	add	objptr, #60
1f2b8     F2 14 E2 FA | 	rdword	arg02, objptr
1f2bc     02 14 66 F0 | 	shl	arg02, #2
1f2c0     02 E4 05 F1 | 	add	objptr, #2
1f2c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2c8     3E E4 85 F1 | 	sub	objptr, #62
1f2cc     04 16 66 F0 | 	shl	arg03, #4
1f2d0     04 16 06 F1 | 	add	arg03, #4
1f2d4     11 12 06 F6 | 	mov	arg01, #17
1f2d8     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f2dc     A7 F0 03 F6 | 	mov	ptra, fp
1f2e0     B2 00 A0 FD | 	call	#popregs_
1f2e4                 | _hg010b_spin2_putchar_ret
1f2e4     2D 00 64 FD | 	ret
1f2e8                 | 
1f2e8                 | '     
1f2e8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f2e8                 | ' 
1f2e8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f2e8                 | _hg010b_spin2_putchar2
1f2e8     02 4A 05 F6 | 	mov	COUNT_, #2
1f2ec     A8 00 A0 FD | 	call	#pushregs_
1f2f0     09 1F 02 F6 | 	mov	local01, arg01
1f2f4                 | ' 
1f2f4                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f2f4     3C E4 05 F1 | 	add	objptr, #60
1f2f8     F2 12 E2 FA | 	rdword	arg01, objptr
1f2fc     02 E4 05 F1 | 	add	objptr, #2
1f300     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f304     04 14 66 F0 | 	shl	arg02, #4
1f308     04 14 06 F1 | 	add	arg02, #4
1f30c     03 E4 05 F1 | 	add	objptr, #3
1f310     F2 18 02 FB | 	rdlong	arg04, objptr
1f314     04 E4 05 F1 | 	add	objptr, #4
1f318     F2 1A 02 FB | 	rdlong	arg05, objptr
1f31c     45 E4 85 F1 | 	sub	objptr, #69
1f320     0F 17 02 F6 | 	mov	arg03, local01
1f324     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f328     04 E4 05 F1 | 	add	objptr, #4
1f32c     F2 12 02 FB | 	rdlong	arg01, objptr
1f330     10 00 00 FF 
1f334     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f338     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f33c     3A E4 05 F1 | 	add	objptr, #58
1f340     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f344     0D 17 02 FD | 	qmul	arg03, arg05
1f348                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f348     10 00 00 FF 
1f34c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f350     02 E4 85 F1 | 	sub	objptr, #2
1f354     F2 20 E2 FA | 	rdword	local02, objptr
1f358     01 20 46 F0 | 	shr	local02, #1
1f35c     0F 15 02 F6 | 	mov	arg02, local01
1f360     01 16 06 F6 | 	mov	arg03, #1
1f364     00 18 06 F6 | 	mov	arg04, #0
1f368     01 1A 06 F6 | 	mov	arg05, #1
1f36c     0B 00 00 FF 
1f370     90 E4 05 F1 | 	add	objptr, ##5776
1f374     18 1E 62 FD | 	getqx	local01
1f378     10 1F 02 F1 | 	add	local01, local02
1f37c     0F 13 02 F1 | 	add	arg01, local01
1f380     9C 08 B0 FD | 	call	#_psram_spin2_fill
1f384                 | ' 
1f384                 | ' cursor_x+=2
1f384     0B 00 00 FF 
1f388     90 E4 85 F1 | 	sub	objptr, ##5776
1f38c     F2 20 E2 FA | 	rdword	local02, objptr
1f390     02 20 06 F1 | 	add	local02, #2
1f394     F2 20 52 FC | 	wrword	local02, objptr
1f398                 | ' if cursor_x>=256
1f398     F2 20 E2 FA | 	rdword	local02, objptr
1f39c     3C E4 85 F1 | 	sub	objptr, #60
1f3a0     00 21 56 F2 | 	cmps	local02, #256 wc
1f3a4     64 00 90 CD |  if_b	jmp	#LR__2551
1f3a8                 | '   cursor_x:=0
1f3a8     3C E4 05 F1 | 	add	objptr, #60
1f3ac     F2 00 58 FC | 	wrword	#0, objptr
1f3b0                 | '   cursor_y+=1
1f3b0     02 E4 05 F1 | 	add	objptr, #2
1f3b4     F2 20 C2 FA | 	rdbyte	local02, objptr
1f3b8     01 20 06 F1 | 	add	local02, #1
1f3bc     F2 20 42 FC | 	wrbyte	local02, objptr
1f3c0                 | '   if cursor_y>st_lines-1
1f3c0     C3 E4 05 F1 | 	add	objptr, #195
1f3c4     F2 20 02 FB | 	rdlong	local02, objptr
1f3c8     01 20 86 F1 | 	sub	local02, #1
1f3cc     C3 E4 85 F1 | 	sub	objptr, #195
1f3d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f3d4     3E E4 85 F1 | 	sub	objptr, #62
1f3d8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f3dc     2C 00 90 ED |  if_be	jmp	#LR__2550
1f3e0                 | '     scrollup2()
1f3e0     00 12 06 F6 | 	mov	arg01, #0
1f3e4     01 00 00 FF 
1f3e8     58 14 06 F6 | 	mov	arg02, ##600
1f3ec     10 16 06 F6 | 	mov	arg03, #16
1f3f0     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f3f4                 | '     cursor_y:=st_lines-1
1f3f4     01 E5 05 F1 | 	add	objptr, #257
1f3f8     F2 20 02 FB | 	rdlong	local02, objptr
1f3fc     01 20 86 F1 | 	sub	local02, #1
1f400     C3 E4 85 F1 | 	sub	objptr, #195
1f404     F2 20 42 FC | 	wrbyte	local02, objptr
1f408     3E E4 85 F1 | 	sub	objptr, #62
1f40c                 | LR__2550
1f40c                 | LR__2551
1f40c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f40c     3C E4 05 F1 | 	add	objptr, #60
1f410     F2 14 E2 FA | 	rdword	arg02, objptr
1f414     02 14 66 F0 | 	shl	arg02, #2
1f418     02 E4 05 F1 | 	add	objptr, #2
1f41c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f420     3E E4 85 F1 | 	sub	objptr, #62
1f424     04 16 66 F0 | 	shl	arg03, #4
1f428     04 16 06 F1 | 	add	arg03, #4
1f42c     11 12 06 F6 | 	mov	arg01, #17
1f430     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f434     A7 F0 03 F6 | 	mov	ptra, fp
1f438     B2 00 A0 FD | 	call	#popregs_
1f43c                 | _hg010b_spin2_putchar2_ret
1f43c     2D 00 64 FD | 	ret
1f440                 | 
1f440                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f440                 | ' 
1f440                 | ' pub write(text) | iii,c,ncx,ncy
1f440                 | _hg010b_spin2_write
1f440     04 4A 05 F6 | 	mov	COUNT_, #4
1f444     A8 00 A0 FD | 	call	#pushregs_
1f448     09 1F 02 F6 | 	mov	local01, arg01
1f44c                 | ' 
1f44c                 | ' repeat iii from 0 to strsize(text)-1
1f44c     00 20 06 F6 | 	mov	local02, #0
1f450     0F 13 02 F6 | 	mov	arg01, local01
1f454     09 23 02 F6 | 	mov	local03, arg01
1f458     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f45c                 | LR__2560
1f45c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f460     01 22 06 51 |  if_ne	add	local03, #1
1f464     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f468                 | LR__2561
1f468     09 23 82 F1 | 	sub	local03, arg01
1f46c     01 22 86 F1 | 	sub	local03, #1
1f470     00 22 56 F2 | 	cmps	local03, #0 wc
1f474     01 24 86 F6 | 	negc	local04, #1
1f478     12 23 02 F1 | 	add	local03, local04
1f47c                 | LR__2562
1f47c                 | '   putchar2(byte[text+iii])
1f47c     0F 13 02 F6 | 	mov	arg01, local01
1f480     10 13 02 F1 | 	add	arg01, local02
1f484     09 13 C2 FA | 	rdbyte	arg01, arg01
1f488     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f48c     12 21 02 F1 | 	add	local02, local04
1f490     11 21 0A F2 | 	cmp	local02, local03 wz
1f494     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f498     A7 F0 03 F6 | 	mov	ptra, fp
1f49c     B2 00 A0 FD | 	call	#popregs_
1f4a0                 | _hg010b_spin2_write_ret
1f4a0     2D 00 64 FD | 	ret
1f4a4                 | 
1f4a4                 | '    
1f4a4                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f4a4                 | ' 
1f4a4                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f4a4                 | _hg010b_spin2_scrollup2
1f4a4     03 4A 05 F6 | 	mov	COUNT_, #3
1f4a8     A8 00 A0 FD | 	call	#pushregs_
1f4ac                 | ' 	
1f4ac                 | ' repeat i from 4 to 579 
1f4ac     04 1E 06 F6 | 	mov	local01, #4
1f4b0                 | LR__2570
1f4b0     F9 E4 05 F1 | 	add	objptr, #249
1f4b4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4b8     1C E4 85 F1 | 	sub	objptr, #28
1f4bc     F2 14 02 FB | 	rdlong	arg02, objptr
1f4c0     0F 19 02 F6 | 	mov	arg04, local01
1f4c4     10 18 06 F1 | 	add	arg04, #16
1f4c8     02 18 66 F0 | 	shl	arg04, #2
1f4cc     14 E4 05 F1 | 	add	objptr, #20
1f4d0     F2 16 02 FB | 	rdlong	arg03, objptr
1f4d4     0B 19 02 FD | 	qmul	arg04, arg03
1f4d8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f4d8     F6 03 00 FF 
1f4dc     00 12 06 F6 | 	mov	arg01, ##519168
1f4e0     0D 13 82 F1 | 	sub	arg01, arg05
1f4e4     02 16 66 F0 | 	shl	arg03, #2
1f4e8     0A 00 00 FF 
1f4ec     DB E5 05 F1 | 	add	objptr, ##5595
1f4f0     18 1A 62 FD | 	getqx	arg05
1f4f4     0D 15 02 F1 | 	add	arg02, arg05
1f4f8     EC 05 B0 FD | 	call	#_psram_spin2_read1
1f4fc     0A 00 00 FF 
1f500     D3 E5 85 F1 | 	sub	objptr, ##5587
1f504     F2 1A 02 FB | 	rdlong	arg05, objptr
1f508     1C E4 85 F1 | 	sub	objptr, #28
1f50c     F2 14 02 FB | 	rdlong	arg02, objptr
1f510     0F 19 02 F6 | 	mov	arg04, local01
1f514     02 18 66 F0 | 	shl	arg04, #2
1f518     14 E4 05 F1 | 	add	objptr, #20
1f51c     F2 16 02 FB | 	rdlong	arg03, objptr
1f520     0B 19 02 FD | 	qmul	arg04, arg03
1f524                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f524     F6 03 00 FF 
1f528     00 12 06 F6 | 	mov	arg01, ##519168
1f52c     0D 13 82 F1 | 	sub	arg01, arg05
1f530     02 16 66 F0 | 	shl	arg03, #2
1f534     0A 00 00 FF 
1f538     DB E5 05 F1 | 	add	objptr, ##5595
1f53c     18 1A 62 FD | 	getqx	arg05
1f540     0D 15 02 F1 | 	add	arg02, arg05
1f544     3C 06 B0 FD | 	call	#_psram_spin2_write
1f548     0B 00 00 FF 
1f54c     CC E4 85 F1 | 	sub	objptr, ##5836
1f550     01 1E 06 F1 | 	add	local01, #1
1f554     01 00 00 FF 
1f558     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f55c     50 FF 9F CD |  if_b	jmp	#LR__2570
1f560                 | ' 
1f560                 | ' repeat i from 580 to 599
1f560     01 00 00 FF 
1f564     44 1E 06 F6 | 	mov	local01, ##580
1f568                 | LR__2571
1f568                 | '    fastline(0,1023,i,write_background)   
1f568     45 E4 05 F1 | 	add	objptr, #69
1f56c     F2 18 02 FB | 	rdlong	arg04, objptr
1f570     45 E4 85 F1 | 	sub	objptr, #69
1f574     00 12 06 F6 | 	mov	arg01, #0
1f578     09 14 CE F9 | 	bmask	arg02, #9
1f57c     0F 17 02 F6 | 	mov	arg03, local01
1f580     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f584     01 1E 06 F1 | 	add	local01, #1
1f588     01 00 00 FF 
1f58c     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f590     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f594                 | ' repeat i from 0 to 3
1f594     00 1E 06 F6 | 	mov	local01, #0
1f598                 | LR__2572
1f598                 | '    fastline(0,1023,i,write_background)      
1f598     45 E4 05 F1 | 	add	objptr, #69
1f59c     F2 18 02 FB | 	rdlong	arg04, objptr
1f5a0     45 E4 85 F1 | 	sub	objptr, #69
1f5a4     00 12 06 F6 | 	mov	arg01, #0
1f5a8     09 14 CE F9 | 	bmask	arg02, #9
1f5ac     0F 17 02 F6 | 	mov	arg03, local01
1f5b0     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f5b4     01 1E 06 F1 | 	add	local01, #1
1f5b8     04 1E 56 F2 | 	cmps	local01, #4 wc
1f5bc     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f5c0                 | ' 
1f5c0                 | ' repeat i from 0 to 35
1f5c0     00 1E 06 F6 | 	mov	local01, #0
1f5c4                 | LR__2573
1f5c4     0F 1B 02 F6 | 	mov	arg05, local01
1f5c8     01 1A 06 F1 | 	add	arg05, #1
1f5cc     10 00 00 FF 
1f5d0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f5d4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f5d8     0B 1B 02 FD | 	qmul	arg05, arg03
1f5dc                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f5dc     F6 03 00 FF 
1f5e0     00 12 06 F6 | 	mov	arg01, ##519168
1f5e4     F9 E4 05 F1 | 	add	objptr, #249
1f5e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5ec     0D 13 82 F1 | 	sub	arg01, arg05
1f5f0     F5 E4 85 F1 | 	sub	objptr, #245
1f5f4     F2 14 02 FB | 	rdlong	arg02, objptr
1f5f8     10 00 00 FF 
1f5fc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f600     0B 00 00 FF 
1f604     C8 E4 05 F1 | 	add	objptr, ##5832
1f608     18 1A 62 FD | 	getqx	arg05
1f60c     0D 15 02 F1 | 	add	arg02, arg05
1f610     D4 04 B0 FD | 	call	#_psram_spin2_read1
1f614     10 00 00 FF 
1f618     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f61c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f620     0B 1F 02 FD | 	qmul	local01, arg03
1f624                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f624     F6 03 00 FF 
1f628     00 12 06 F6 | 	mov	arg01, ##519168
1f62c     0A 00 00 FF 
1f630     D3 E5 85 F1 | 	sub	objptr, ##5587
1f634     F2 1A 02 FB | 	rdlong	arg05, objptr
1f638     0D 13 82 F1 | 	sub	arg01, arg05
1f63c     F5 E4 85 F1 | 	sub	objptr, #245
1f640     F2 14 02 FB | 	rdlong	arg02, objptr
1f644     10 00 00 FF 
1f648     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f64c     0B 00 00 FF 
1f650     C8 E4 05 F1 | 	add	objptr, ##5832
1f654     18 1A 62 FD | 	getqx	arg05
1f658     0D 15 02 F1 | 	add	arg02, arg05
1f65c     24 05 B0 FD | 	call	#_psram_spin2_write
1f660     0B 00 00 FF 
1f664     CC E4 85 F1 | 	sub	objptr, ##5836
1f668     01 1E 06 F1 | 	add	local01, #1
1f66c     24 1E 56 F2 | 	cmps	local01, #36 wc
1f670     50 FF 9F CD |  if_b	jmp	#LR__2573
1f674                 | ' repeat i from 0 to timings[7]-1
1f674     00 1E 06 F6 | 	mov	local01, #0
1f678     10 00 00 FF 
1f67c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f680     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f684     10 00 00 FF 
1f688     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f68c     01 20 86 F1 | 	sub	local02, #1
1f690     00 20 56 F2 | 	cmps	local02, #0 wc
1f694     01 22 86 F6 | 	negc	local03, #1
1f698     11 21 02 F1 | 	add	local02, local03
1f69c                 | LR__2574
1f69c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f69c     04 E4 05 F1 | 	add	objptr, #4
1f6a0     F2 12 02 FB | 	rdlong	arg01, objptr
1f6a4     10 00 00 FF 
1f6a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f6ac     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f6b0     10 00 00 FF 
1f6b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f6b8     0D 19 02 F6 | 	mov	arg04, arg05
1f6bc     03 18 66 F0 | 	shl	arg04, #3
1f6c0     0D 19 02 F1 | 	add	arg04, arg05
1f6c4     02 18 66 F0 | 	shl	arg04, #2
1f6c8     0F 19 02 F1 | 	add	arg04, local01
1f6cc     0C 13 02 F1 | 	add	arg01, arg04
1f6d0     20 14 06 F6 | 	mov	arg02, #32
1f6d4     01 16 06 F6 | 	mov	arg03, #1
1f6d8     00 18 06 F6 | 	mov	arg04, #0
1f6dc     01 1A 06 F6 | 	mov	arg05, #1
1f6e0     0B 00 00 FF 
1f6e4     C8 E4 05 F1 | 	add	objptr, ##5832
1f6e8     34 05 B0 FD | 	call	#_psram_spin2_fill
1f6ec     0B 00 00 FF 
1f6f0     CC E4 85 F1 | 	sub	objptr, ##5836
1f6f4     11 1F 02 F1 | 	add	local01, local03
1f6f8     10 1F 0A F2 | 	cmp	local01, local02 wz
1f6fc     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f700     A7 F0 03 F6 | 	mov	ptra, fp
1f704     B2 00 A0 FD | 	call	#popregs_
1f708                 | _hg010b_spin2_scrollup2_ret
1f708     2D 00 64 FD | 	ret
1f70c                 | 
1f70c                 | ' 
1f70c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f70c                 | ' 
1f70c                 | ' pub crlf()
1f70c                 | _hg010b_spin2_crlf
1f70c                 | ' 
1f70c                 | ' cursor_x:=leading_spaces*2
1f70c     01 00 00 FF 
1f710     B6 E4 05 F1 | 	add	objptr, ##694
1f714     F2 16 02 FB | 	rdlong	arg03, objptr
1f718     01 16 66 F0 | 	shl	arg03, #1
1f71c     01 00 00 FF 
1f720     7A E4 85 F1 | 	sub	objptr, ##634
1f724     F2 16 52 FC | 	wrword	arg03, objptr
1f728                 | ' cursor_y+=1
1f728     02 E4 05 F1 | 	add	objptr, #2
1f72c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f730     01 16 06 F1 | 	add	arg03, #1
1f734     F2 16 42 FC | 	wrbyte	arg03, objptr
1f738                 | ' if cursor_y>st_lines-1
1f738     C3 E4 05 F1 | 	add	objptr, #195
1f73c     F2 16 02 FB | 	rdlong	arg03, objptr
1f740     01 16 86 F1 | 	sub	arg03, #1
1f744     C3 E4 85 F1 | 	sub	objptr, #195
1f748     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f74c     3E E4 85 F1 | 	sub	objptr, #62
1f750     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f754     2C 00 90 ED |  if_be	jmp	#LR__2580
1f758                 | '   scrollup2()
1f758     00 12 06 F6 | 	mov	arg01, #0
1f75c     01 00 00 FF 
1f760     58 14 06 F6 | 	mov	arg02, ##600
1f764     10 16 06 F6 | 	mov	arg03, #16
1f768     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1f76c                 | '   cursor_y:=st_lines-1
1f76c     01 E5 05 F1 | 	add	objptr, #257
1f770     F2 16 02 FB | 	rdlong	arg03, objptr
1f774     01 16 86 F1 | 	sub	arg03, #1
1f778     C3 E4 85 F1 | 	sub	objptr, #195
1f77c     F2 16 42 FC | 	wrbyte	arg03, objptr
1f780     3E E4 85 F1 | 	sub	objptr, #62
1f784                 | LR__2580
1f784                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f784     3C E4 05 F1 | 	add	objptr, #60
1f788     F2 14 E2 FA | 	rdword	arg02, objptr
1f78c     02 14 66 F0 | 	shl	arg02, #2
1f790     02 E4 05 F1 | 	add	objptr, #2
1f794     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f798     3E E4 85 F1 | 	sub	objptr, #62
1f79c     04 16 66 F0 | 	shl	arg03, #4
1f7a0     04 16 06 F1 | 	add	arg03, #4
1f7a4     11 12 06 F6 | 	mov	arg01, #17
1f7a8     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1f7ac                 | _hg010b_spin2_crlf_ret
1f7ac     2D 00 64 FD | 	ret
1f7b0                 | 
1f7b0                 | ' 
1f7b0                 | ' 
1f7b0                 | ' '*************************************************************************
1f7b0                 | ' '                                                                        *
1f7b0                 | ' '  Conversions                                                           *
1f7b0                 | ' '                                                                        *
1f7b0                 | ' '*************************************************************************
1f7b0                 | ' 
1f7b0                 | ' ''---------- Convert a integer to dec string, return a pointer
1f7b0                 | ' 
1f7b0                 | ' pub inttostr(i):result |q,pos,k,j
1f7b0                 | _hg010b_spin2_inttostr
1f7b0     03 4A 05 F6 | 	mov	COUNT_, #3
1f7b4     A8 00 A0 FD | 	call	#pushregs_
1f7b8     09 1F 0A F6 | 	mov	local01, arg01 wz
1f7bc                 | ' 
1f7bc                 | ' j:=i
1f7bc                 | ' pos:=10
1f7bc     0A 20 06 F6 | 	mov	local02, #10
1f7c0                 | ' k:=0
1f7c0     00 22 06 F6 | 	mov	local03, #0
1f7c4                 | ' 
1f7c4                 | ' if (j==0)
1f7c4     18 00 90 5D |  if_ne	jmp	#LR__2590
1f7c8                 | '   n_string[0]:=48
1f7c8     4D E4 05 F1 | 	add	objptr, #77
1f7cc     F2 60 48 FC | 	wrbyte	#48, objptr
1f7d0                 | '   n_string[1]:=0
1f7d0     01 E4 05 F1 | 	add	objptr, #1
1f7d4     F2 00 48 FC | 	wrbyte	#0, objptr
1f7d8     4E E4 85 F1 | 	sub	objptr, #78
1f7dc     C4 00 90 FD | 	jmp	#LR__2597
1f7e0                 | LR__2590
1f7e0                 | ' 
1f7e0                 | ' else
1f7e0                 | '   if (j<0)
1f7e0     0F 1F 52 F6 | 	abs	local01, local01 wc
1f7e4                 | '     j:=0-j
1f7e4                 | '     k:=45
1f7e4     2D 22 06 C6 |  if_b	mov	local03, #45
1f7e8                 | ' 
1f7e8                 | '   n_string[11]:=0
1f7e8     58 E4 05 F1 | 	add	objptr, #88
1f7ec     F2 00 48 FC | 	wrbyte	#0, objptr
1f7f0     58 E4 85 F1 | 	sub	objptr, #88
1f7f4     97 24 48 FB | 	callpa	#(@LR__2592-@LR__2591)>>2,fcache_load_ptr_
1f7f8                 | '   repeat while (pos>-1)
1f7f8                 | LR__2591
1f7f8     00 20 56 F2 | 	cmps	local02, #0 wc
1f7fc     40 00 90 CD |  if_b	jmp	#LR__2593
1f800     0F FB 51 F6 | 	abs	result1, local01 wc
1f804     0A FA 15 FD | 	qdiv	result1, #10
1f808                 | '     q:=j//10
1f808     19 FA 61 FD | 	getqy	result1
1f80c     FD FA 81 F6 | 	negc	result1, result1
1f810     0F 1F 52 F6 | 	abs	local01, local01 wc
1f814     0A 1E 16 FD | 	qdiv	local01, #10
1f818                 | '     q:=48+q
1f818     30 FA 05 F1 | 	add	result1, #48
1f81c                 | '     n_string[pos]:=q
1f81c     10 1F 02 F6 | 	mov	local01, local02
1f820     4D E4 05 F1 | 	add	objptr, #77
1f824     F2 1E 02 F1 | 	add	local01, objptr
1f828     0F FB 41 FC | 	wrbyte	result1, local01
1f82c                 | '     j:=j/10
1f82c     4D E4 85 F1 | 	sub	objptr, #77
1f830                 | '     pos-=1
1f830     01 20 86 F1 | 	sub	local02, #1
1f834     18 1E 62 FD | 	getqx	local01
1f838     0F 1F 82 F6 | 	negc	local01, local01
1f83c     B8 FF 9F FD | 	jmp	#LR__2591
1f840                 | LR__2592
1f840                 | LR__2593
1f840                 | '   repeat while n_string[0]==48
1f840                 | LR__2594
1f840     4D E4 05 F1 | 	add	objptr, #77
1f844     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f848     4D E4 85 F1 | 	sub	objptr, #77
1f84c     30 16 0E F2 | 	cmp	arg03, #48 wz
1f850     20 00 90 5D |  if_ne	jmp	#LR__2595
1f854                 | '     bytemove(@n_string,@n_string+1,12)
1f854     4D E4 05 F1 | 	add	objptr, #77
1f858     F2 12 02 F6 | 	mov	arg01, objptr
1f85c     F2 14 02 F6 | 	mov	arg02, objptr
1f860     4D E4 85 F1 | 	sub	objptr, #77
1f864     01 14 06 F1 | 	add	arg02, #1
1f868     0C 16 06 F6 | 	mov	arg03, #12
1f86c     D8 0D B0 FD | 	call	#__system____builtin_memmove
1f870     CC FF 9F FD | 	jmp	#LR__2594
1f874                 | LR__2595
1f874                 | ' 
1f874                 | '   if k==45
1f874     2D 22 0E F2 | 	cmp	local03, #45 wz
1f878     28 00 90 5D |  if_ne	jmp	#LR__2596
1f87c                 | '      bytemove(@n_string+1,@n_string,12)
1f87c     4D E4 05 F1 | 	add	objptr, #77
1f880     F2 12 02 F6 | 	mov	arg01, objptr
1f884     01 12 06 F1 | 	add	arg01, #1
1f888     F2 14 02 F6 | 	mov	arg02, objptr
1f88c     4D E4 85 F1 | 	sub	objptr, #77
1f890     0C 16 06 F6 | 	mov	arg03, #12
1f894     B0 0D B0 FD | 	call	#__system____builtin_memmove
1f898                 | '      n_string[0]:=k
1f898     4D E4 05 F1 | 	add	objptr, #77
1f89c     F2 22 42 FC | 	wrbyte	local03, objptr
1f8a0     4D E4 85 F1 | 	sub	objptr, #77
1f8a4                 | LR__2596
1f8a4                 | LR__2597
1f8a4                 | ' 
1f8a4                 | ' q:=@n_string
1f8a4     4D E4 05 F1 | 	add	objptr, #77
1f8a8     F2 FA 01 F6 | 	mov	result1, objptr
1f8ac     4D E4 85 F1 | 	sub	objptr, #77
1f8b0                 | ' return q
1f8b0     A7 F0 03 F6 | 	mov	ptra, fp
1f8b4     B2 00 A0 FD | 	call	#popregs_
1f8b8                 | _hg010b_spin2_inttostr_ret
1f8b8     2D 00 64 FD | 	ret
1f8bc                 | 
1f8bc                 | ' 
1f8bc                 | ' '..............................................................................
1f8bc                 | ' 
1f8bc                 | ' {{
1f8bc                 | ' }}
1f8bc                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1f8bc                 | _psram_spin2_startx
1f8bc     04 4A 05 F6 | 	mov	COUNT_, #4
1f8c0     A8 00 A0 FD | 	call	#pushregs_
1f8c4     09 1F 02 F6 | 	mov	local01, arg01
1f8c8     0B 21 02 F6 | 	mov	local02, arg03
1f8cc     0C 23 02 F6 | 	mov	local03, arg04
1f8d0                 | '     stop() ' restart driver if required
1f8d0     54 01 B0 FD | 	call	#_psram_spin2_stop
1f8d4     00 1E 0E F2 | 	cmp	local01, #0 wz
1f8d8     14 1E 06 AB |  if_e	rdlong	local01, #20
1f8dc     0F 15 52 F6 | 	abs	arg02, local01 wc
1f8e0     A1 07 00 FF 
1f8e4     40 14 16 FD | 	qdiv	arg02, ##1000000
1f8e8                 | ' 
1f8e8                 | '     ' use current frequency if none specified
1f8e8                 | ' 
1f8e8                 | '     if freq == 0 
1f8e8                 | '         freq := clkfreq 
1f8e8                 | ' 
1f8e8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1f8e8                 | ' 
1f8e8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1f8e8                 | '     if burst < 0
1f8e8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1f8e8     18 14 62 FD | 	getqx	arg02
1f8ec     0A 19 82 F6 | 	negc	arg04, arg02
1f8f0     03 18 66 F0 | 	shl	arg04, #3
1f8f4     84 18 86 F1 | 	sub	arg04, #132
1f8f8     04 18 46 F0 | 	shr	arg04, #4
1f8fc     04 18 66 F0 | 	shl	arg04, #4
1f900     00 18 56 F2 | 	cmps	arg04, #0 wc
1f904     0E FA 65 C6 |  if_b	neg	result1, #14
1f908     10 01 90 CD |  if_b	jmp	#LR__2603
1f90c                 | ' 
1f90c                 | '     ' compute the input delay
1f90c                 | ' 
1f90c                 | '     if delay <= 0
1f90c     01 20 56 F2 | 	cmps	local02, #1 wc
1f910     10 00 90 3D |  if_ae	jmp	#LR__2600
1f914                 | '         delay := lookupDelay(freq)
1f914     0F 13 02 F6 | 	mov	arg01, local01
1f918     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1f91c     FD 20 02 F6 | 	mov	local02, result1
1f920     04 00 90 FD | 	jmp	#LR__2601
1f924                 | LR__2600
1f924                 | '     else
1f924                 | '         delay <#= $f ' limit to 15
1f924     0F 20 66 F3 | 	fles	local02, #15
1f928                 | LR__2601
1f928                 | ' 
1f928                 | '     ' create our lock
1f928                 | ' 
1f928                 | '     driverlock := LOCKNEW()  
1f928     00 FA 05 F6 | 	mov	result1, #0
1f92c     04 FA 61 FD | 	locknew	result1
1f930     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1f934     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1f938                 | '     if driverlock == -1
1f938     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1f93c     FF FF 7F FF 
1f940     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1f944                 | '         return ERR_NO_LOCK
1f944     1A FA 65 A6 |  if_e	neg	result1, #26
1f948     D0 00 90 AD |  if_e	jmp	#LR__2603
1f94c                 | ' 
1f94c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1f94c                 | ' 
1f94c                 | '     long[@startupData][0]:=clkfreq
1f94c     14 1E 06 FB | 	rdlong	local01, #20
1f950     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1f954     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1f958                 | ' '    long[@startupData][1]:=$1000_0000
1f958                 | '     long[@startupData][5]:=@deviceData
1f958     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1f95c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1f960     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1f964     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1f968     14 14 06 F1 | 	add	arg02, #20
1f96c     0A 1F 62 FC | 	wrlong	local01, arg02
1f970                 | '     long[@startupData][6]:=@qosData
1f970     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1f974     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1f978     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1f97c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1f980     18 14 06 F1 | 	add	arg02, #24
1f984     0A 1F 62 FC | 	wrlong	local01, arg02
1f988                 | '     long[@startupData][7]:=$7FF00
1f988     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1f98c     1C 1E 06 F1 | 	add	local01, #28
1f990     FF 03 80 FF 
1f994     0F 01 6A FC | 	wrlong	##524032, local01
1f998                 | ' 
1f998                 | '     ' setup some default bank and QoS parameter values
1f998                 | ' 
1f998                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1f998     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1f99c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1f9a0     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1f9a4     10 18 66 F0 | 	shl	arg04, #16
1f9a8     0C 20 66 F0 | 	shl	local02, #12
1f9ac     10 19 42 F5 | 	or	arg04, local02
1f9b0     18 18 46 F5 | 	or	arg04, #24
1f9b4     0C 15 02 F6 | 	mov	arg02, arg04
1f9b8     02 16 06 F6 | 	mov	arg03, #2
1f9bc     A0 00 A0 FD | 	call	#\builtin_longfill_
1f9c0                 | '     longfill(@qosData, $FFFF0000, 8)
1f9c0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1f9c4     07 16 06 F6 | 	mov	arg03, #7
1f9c8     28 16 62 FD | 	setq	arg03
1f9cc     80 FF FF FF 
1f9d0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1f9d4                 | ' 
1f9d4                 | '     ' get the address of the PSRAM memory driver so we can start it
1f9d4                 | ' 
1f9d4                 | '     driverAddr:= driver.getDriverAddr()
1f9d4                 | '     return @driver_start
1f9d4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1f9d8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1f9dc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1f9e0                 | ' 
1f9e0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1f9e0                 | ' 
1f9e0                 | '     if desiredcog < 0
1f9e0     00 22 56 F2 | 	cmps	local03, #0 wc
1f9e4                 | '         desiredcog := NEWCOG
1f9e4     10 22 06 C6 |  if_b	mov	local03, #16
1f9e8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1f9e8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1f9ec     11 25 02 F6 | 	mov	local04, local03
1f9f0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1f9f4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1f9f8     01 24 66 C6 |  if_b	neg	local04, #1
1f9fc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fa00     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fa04                 | '     repeat until long[@startupData] == 0 
1fa04     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fa08                 | LR__2602
1fa08     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fa0c     F8 FF 9F 5D |  if_ne	jmp	#LR__2602
1fa10                 | ' 
1fa10                 | '     return drivercog
1fa10     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fa14     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fa18     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fa1c                 | LR__2603
1fa1c     A7 F0 03 F6 | 	mov	ptra, fp
1fa20     B2 00 A0 FD | 	call	#popregs_
1fa24                 | _psram_spin2_startx_ret
1fa24     2D 00 64 FD | 	ret
1fa28                 | 
1fa28                 | ' 
1fa28                 | ' '..............................................................................
1fa28                 | ' 
1fa28                 | ' {{
1fa28                 | ' }}
1fa28                 | ' PUB stop() : i
1fa28                 | _psram_spin2_stop
1fa28     00 00 06 F6 | 	mov	_var01, #0
1fa2c                 | '     if drivercog <> -1
1fa2c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fa30     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fa34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fa38     FF FF 7F FF 
1fa3c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fa40     70 00 90 AD |  if_e	jmp	#LR__2613
1fa44                 | '         cogstop(drivercog) ' a rather brutal stop
1fa44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fa48     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fa4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fa50     03 12 62 FD | 	cogstop	arg01
1fa54     97 26 48 FB | 	callpa	#(@LR__2612-@LR__2610)>>2,fcache_load_ptr_
1fa58                 | '         repeat i from 0 to 7
1fa58                 | LR__2610
1fa58                 | '             if long[$7FF00][i*3] < 0
1fa58     00 FB 01 F6 | 	mov	result1, _var01
1fa5c     01 FA 65 F0 | 	shl	result1, #1
1fa60     00 FB 01 F1 | 	add	result1, _var01
1fa64     02 FA 65 F0 | 	shl	result1, #2
1fa68     FF 03 00 FF 
1fa6c     00 FB 05 F1 | 	add	result1, ##524032
1fa70     FD FA 01 FB | 	rdlong	result1, result1
1fa74     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa78     1C 00 90 3D |  if_ae	jmp	#LR__2611
1fa7c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fa7c     00 FB 01 F6 | 	mov	result1, _var01
1fa80     01 FA 65 F0 | 	shl	result1, #1
1fa84     00 FB 01 F1 | 	add	result1, _var01
1fa88     02 FA 65 F0 | 	shl	result1, #2
1fa8c     FF 03 00 FF 
1fa90     00 FB 05 F1 | 	add	result1, ##524032
1fa94     FD 20 68 FC | 	wrlong	#16, result1
1fa98                 | LR__2611
1fa98     01 00 06 F1 | 	add	_var01, #1
1fa9c     08 00 56 F2 | 	cmps	_var01, #8 wc
1faa0     B4 FF 9F CD |  if_b	jmp	#LR__2610
1faa4                 | LR__2612
1faa4                 | '         drivercog := -1
1faa4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1faa8     FF FF FF FF 
1faac     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fab0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fab4                 | LR__2613
1fab4                 | '     if driverlock <> -1
1fab4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fab8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fabc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fac0     FF FF 7F FF 
1fac4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fac8                 | '         LOCKRET(driverlock)
1fac8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1facc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fad0     05 12 62 5D |  if_ne	lockret	arg01
1fad4                 | '         driverlock := -1
1fad4     FF FF FF 5F 
1fad8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fadc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fae0     00 FB 01 F6 | 	mov	result1, _var01
1fae4                 | _psram_spin2_stop_ret
1fae4     2D 00 64 FD | 	ret
1fae8                 | 
1fae8                 | ' 
1fae8                 | ' '..............................................................................
1fae8                 | ' 
1fae8                 | ' {{
1fae8                 | ' }}
1fae8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fae8                 | _psram_spin2_read1
1fae8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fae8                 | '     if drivercog == -1 ' driver must be running
1fae8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1faec     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1faf0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1faf4     FF FF 7F FF 
1faf8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fafc                 | '         return ERR_INACTIVE
1fafc     0F FA 65 A6 |  if_e	neg	result1, #15
1fb00     7C 00 90 AD |  if_e	jmp	#LR__2621
1fb04                 | '     if count == 0 ' don't even bother reading
1fb04     00 16 0E F2 | 	cmp	arg03, #0 wz
1fb08                 | '         return 0
1fb08     00 FA 05 A6 |  if_e	mov	result1, #0
1fb0c     70 00 90 AD |  if_e	jmp	#LR__2621
1fb10                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fb10     00 FA 05 F6 | 	mov	result1, #0
1fb14     01 FA 61 FD | 	cogid	result1
1fb18     FD 00 02 F6 | 	mov	_var01, result1
1fb1c     01 00 66 F0 | 	shl	_var01, #1
1fb20     FD 00 02 F1 | 	add	_var01, result1
1fb24     02 00 66 F0 | 	shl	_var01, #2
1fb28     FF 03 00 FF 
1fb2c     00 03 06 F6 | 	mov	_var02, ##524032
1fb30     00 03 02 F1 | 	add	_var02, _var01
1fb34                 | '     if long[mailbox] < 0
1fb34     01 01 02 FB | 	rdlong	_var01, _var02
1fb38     00 00 56 F2 | 	cmps	_var01, #0 wc
1fb3c                 | '         return ERR_MAILBOX_BUSY
1fb3c     1C FA 65 C6 |  if_b	neg	result1, #28
1fb40     3C 00 90 CD |  if_b	jmp	#LR__2621
1fb44                 | '     long[mailbox][2] := count
1fb44     08 02 06 F1 | 	add	_var02, #8
1fb48     01 17 62 FC | 	wrlong	arg03, _var02
1fb4c                 | '     long[mailbox][1] := dstHubAddr
1fb4c     04 02 86 F1 | 	sub	_var02, #4
1fb50     01 13 62 FC | 	wrlong	arg01, _var02
1fb54     04 02 86 F1 | 	sub	_var02, #4
1fb58                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fb58     0A 05 02 F6 | 	mov	_var03, arg02
1fb5c     D9 04 06 F4 | 	bitl	_var03, #217
1fb60     00 00 58 FF 
1fb64     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fb68     02 01 02 F1 | 	add	_var01, _var03
1fb6c     01 01 62 FC | 	wrlong	_var01, _var02
1fb70                 | '     repeat
1fb70                 | LR__2620
1fb70                 | '         result := long[mailbox]    
1fb70     01 05 02 FB | 	rdlong	_var03, _var02
1fb74     00 04 56 F2 | 	cmps	_var03, #0 wc
1fb78     F4 FF 9F CD |  if_b	jmp	#LR__2620
1fb7c                 | '     while result < 0   
1fb7c                 | '     return -result                       'return success or error
1fb7c     02 FB 61 F6 | 	neg	result1, _var03
1fb80                 | LR__2621
1fb80                 | _psram_spin2_read1_ret
1fb80     2D 00 64 FD | 	ret
1fb84                 | 
1fb84                 | ' 
1fb84                 | ' '..............................................................................
1fb84                 | ' 
1fb84                 | ' {{
1fb84                 | ' }}
1fb84                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fb84                 | _psram_spin2_write
1fb84                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fb84                 | '     if drivercog == -1 ' driver must be running
1fb84     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb88     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fb8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb90     FF FF 7F FF 
1fb94     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fb98                 | '         return ERR_INACTIVE
1fb98     0F FA 65 A6 |  if_e	neg	result1, #15
1fb9c     7C 00 90 AD |  if_e	jmp	#LR__2631
1fba0                 | '     if count == 0 ' don't even bother writing
1fba0     00 16 0E F2 | 	cmp	arg03, #0 wz
1fba4                 | '         return 0
1fba4     00 FA 05 A6 |  if_e	mov	result1, #0
1fba8     70 00 90 AD |  if_e	jmp	#LR__2631
1fbac                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fbac     00 FA 05 F6 | 	mov	result1, #0
1fbb0     01 FA 61 FD | 	cogid	result1
1fbb4     FD 00 02 F6 | 	mov	_var01, result1
1fbb8     01 00 66 F0 | 	shl	_var01, #1
1fbbc     FD 00 02 F1 | 	add	_var01, result1
1fbc0     02 00 66 F0 | 	shl	_var01, #2
1fbc4     FF 03 00 FF 
1fbc8     00 03 06 F6 | 	mov	_var02, ##524032
1fbcc     00 03 02 F1 | 	add	_var02, _var01
1fbd0                 | '     if long[mailbox] < 0
1fbd0     01 01 02 FB | 	rdlong	_var01, _var02
1fbd4     00 00 56 F2 | 	cmps	_var01, #0 wc
1fbd8                 | '         return ERR_MAILBOX_BUSY
1fbd8     1C FA 65 C6 |  if_b	neg	result1, #28
1fbdc     3C 00 90 CD |  if_b	jmp	#LR__2631
1fbe0                 | '     long[mailbox][2] := count
1fbe0     08 02 06 F1 | 	add	_var02, #8
1fbe4     01 17 62 FC | 	wrlong	arg03, _var02
1fbe8                 | '     long[mailbox][1] := srcHubAddr
1fbe8     04 02 86 F1 | 	sub	_var02, #4
1fbec     01 13 62 FC | 	wrlong	arg01, _var02
1fbf0     04 02 86 F1 | 	sub	_var02, #4
1fbf4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fbf4     0A 05 02 F6 | 	mov	_var03, arg02
1fbf8     D9 04 06 F4 | 	bitl	_var03, #217
1fbfc     00 00 78 FF 
1fc00     00 00 06 F6 | 	mov	_var01, ##-268435456
1fc04     02 01 02 F1 | 	add	_var01, _var03
1fc08     01 01 62 FC | 	wrlong	_var01, _var02
1fc0c                 | '     repeat
1fc0c                 | LR__2630
1fc0c                 | '         result := long[mailbox]    
1fc0c     01 05 02 FB | 	rdlong	_var03, _var02
1fc10     00 04 56 F2 | 	cmps	_var03, #0 wc
1fc14     F4 FF 9F CD |  if_b	jmp	#LR__2630
1fc18                 | '     while result < 0   
1fc18                 | '     return -result                       'return success or error
1fc18     02 FB 61 F6 | 	neg	result1, _var03
1fc1c                 | LR__2631
1fc1c                 | _psram_spin2_write_ret
1fc1c     2D 00 64 FD | 	ret
1fc20                 | 
1fc20                 | ' 
1fc20                 | ' ' generalized fill
1fc20                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fc20                 | _psram_spin2_fill
1fc20     09 01 02 F6 | 	mov	_var01, arg01
1fc24     0A 03 02 F6 | 	mov	_var02, arg02
1fc28     0B 05 02 F6 | 	mov	_var03, arg03
1fc2c     0D 07 02 F6 | 	mov	_var04, arg05
1fc30                 | '     case datasize 
1fc30     01 06 86 F1 | 	sub	_var04, #1
1fc34     04 06 26 F3 | 	fle	_var04, #4
1fc38     30 06 62 FD | 	jmprel	_var04
1fc3c                 | LR__2640
1fc3c     10 00 90 FD | 	jmp	#LR__2641
1fc40     18 00 90 FD | 	jmp	#LR__2642
1fc44     2C 00 90 FD | 	jmp	#LR__2644
1fc48     1C 00 90 FD | 	jmp	#LR__2643
1fc4c     24 00 90 FD | 	jmp	#LR__2644
1fc50                 | LR__2641
1fc50                 | '         1: req := driver.R_WRITEBYTE
1fc50     00 00 60 FF 
1fc54     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fc58     20 00 90 FD | 	jmp	#LR__2645
1fc5c                 | LR__2642
1fc5c                 | '         2: req := driver.R_WRITEWORD
1fc5c     00 00 68 FF 
1fc60     00 08 06 F6 | 	mov	_var05, ##-805306368
1fc64     14 00 90 FD | 	jmp	#LR__2645
1fc68                 | LR__2643
1fc68                 | '         4: req := driver.R_WRITELONG
1fc68     00 00 70 FF 
1fc6c     00 08 06 F6 | 	mov	_var05, ##-536870912
1fc70     08 00 90 FD | 	jmp	#LR__2645
1fc74                 | LR__2644
1fc74                 | '         other : return ERR_INVALID
1fc74     06 FA 65 F6 | 	neg	result1, #6
1fc78     94 00 90 FD | 	jmp	#LR__2647
1fc7c                 | LR__2645
1fc7c                 | '     if count == 0   ' nothing to do
1fc7c     00 04 0E F2 | 	cmp	_var03, #0 wz
1fc80                 | '         return 0
1fc80     00 FA 05 A6 |  if_e	mov	result1, #0
1fc84     88 00 90 AD |  if_e	jmp	#LR__2647
1fc88                 | '     if drivercog == -1
1fc88     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc8c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fc90     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc94     FF FF 7F FF 
1fc98     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fc9c                 | '         return ERR_INACTIVE
1fc9c     0F FA 65 A6 |  if_e	neg	result1, #15
1fca0     6C 00 90 AD |  if_e	jmp	#LR__2647
1fca4                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fca4     00 FA 05 F6 | 	mov	result1, #0
1fca8     01 FA 61 FD | 	cogid	result1
1fcac     FD 06 02 F6 | 	mov	_var04, result1
1fcb0     01 06 66 F0 | 	shl	_var04, #1
1fcb4     FD 06 02 F1 | 	add	_var04, result1
1fcb8     02 06 66 F0 | 	shl	_var04, #2
1fcbc     FF 03 00 FF 
1fcc0     00 0B 06 F6 | 	mov	_var06, ##524032
1fcc4     03 0B 02 F1 | 	add	_var06, _var04
1fcc8                 | '     if long[mailbox] < 0
1fcc8     05 07 02 FB | 	rdlong	_var04, _var06
1fccc     00 06 56 F2 | 	cmps	_var04, #0 wc
1fcd0                 | '         return ERR_MAILBOX_BUSY
1fcd0     1C FA 65 C6 |  if_b	neg	result1, #28
1fcd4     38 00 90 CD |  if_b	jmp	#LR__2647
1fcd8                 | '     long[mailbox][2] := count
1fcd8     08 0A 06 F1 | 	add	_var06, #8
1fcdc     05 05 62 FC | 	wrlong	_var03, _var06
1fce0                 | '     long[mailbox][1] := pattern
1fce0     04 0A 86 F1 | 	sub	_var06, #4
1fce4     05 03 62 FC | 	wrlong	_var02, _var06
1fce8     04 0A 86 F1 | 	sub	_var06, #4
1fcec                 | '     long[mailbox] := req + (addr & $1ffffff)
1fcec     04 0D 02 F6 | 	mov	_var07, _var05
1fcf0     00 0F 02 F6 | 	mov	_var08, _var01
1fcf4     D9 0E 06 F4 | 	bitl	_var08, #217
1fcf8     07 0D 02 F1 | 	add	_var07, _var08
1fcfc     05 0D 62 FC | 	wrlong	_var07, _var06
1fd00                 | '     repeat
1fd00                 | LR__2646
1fd00                 | '         r := long[mailbox]
1fd00     05 0F 02 FB | 	rdlong	_var08, _var06
1fd04     00 0E 56 F2 | 	cmps	_var08, #0 wc
1fd08     F4 FF 9F CD |  if_b	jmp	#LR__2646
1fd0c                 | '     while r < 0
1fd0c                 | '     return -r                  ' return 0 for success or negated error code
1fd0c     07 FB 61 F6 | 	neg	result1, _var08
1fd10                 | LR__2647
1fd10                 | _psram_spin2_fill_ret
1fd10     2D 00 64 FD | 	ret
1fd14                 | 
1fd14                 | ' 
1fd14                 | ' '..............................................................................
1fd14                 | ' 
1fd14                 | ' {{
1fd14                 | ' }}
1fd14                 | ' PUB setQos(cog, qos) : result | mailbox
1fd14                 | _psram_spin2_setQos
1fd14     09 01 02 F6 | 	mov	_var01, arg01
1fd18                 | '     if drivercog == -1 ' driver must be running
1fd18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd1c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fd20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd24     FF FF 7F FF 
1fd28     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fd2c                 | '         return ERR_INACTIVE
1fd2c     0F FA 65 A6 |  if_e	neg	result1, #15
1fd30     9C 00 90 AD |  if_e	jmp	#LR__2654
1fd34                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1fd34     00 00 56 F2 | 	cmps	_var01, #0 wc
1fd38     08 00 90 CD |  if_b	jmp	#LR__2650
1fd3c     08 00 56 F2 | 	cmps	_var01, #8 wc
1fd40     08 00 90 CD |  if_b	jmp	#LR__2651
1fd44                 | LR__2650
1fd44                 | '         return ERR_INVALID
1fd44     06 FA 65 F6 | 	neg	result1, #6
1fd48     84 00 90 FD | 	jmp	#LR__2654
1fd4c                 | LR__2651
1fd4c                 | '     long[@qosData][cog] := qos & !$1ff
1fd4c     FF 15 26 F5 | 	andn	arg02, #511
1fd50     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fd54     02 00 66 F0 | 	shl	_var01, #2
1fd58     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1fd5c     00 15 62 FC | 	wrlong	arg02, _var01
1fd60                 | '     mailbox := $7FF00 + drivercog*12
1fd60     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1fd64     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1fd68     02 07 02 F6 | 	mov	_var04, _var03
1fd6c     01 06 66 F0 | 	shl	_var04, #1
1fd70     02 07 02 F1 | 	add	_var04, _var03
1fd74     02 06 66 F0 | 	shl	_var04, #2
1fd78     FF 03 00 FF 
1fd7c     00 09 06 F6 | 	mov	_var05, ##524032
1fd80     03 09 02 F1 | 	add	_var05, _var04
1fd84                 | '     repeat until LOCKTRY(driverlock)
1fd84     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1fd88                 | LR__2652
1fd88     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fd8c     06 12 72 FD | 	locktry	arg01 wc
1fd90     F4 FF 9F 3D |  if_ae	jmp	#LR__2652
1fd94     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fd98                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1fd98     00 06 06 F6 | 	mov	_var04, #0
1fd9c     01 06 62 FD | 	cogid	_var04
1fda0     00 00 78 FF 
1fda4     00 02 06 F6 | 	mov	_var02, ##-268435456
1fda8     03 03 02 F1 | 	add	_var02, _var04
1fdac     04 03 62 FC | 	wrlong	_var02, _var05
1fdb0                 | '     repeat while long[mailbox] < 0
1fdb0                 | LR__2653
1fdb0     04 03 02 FB | 	rdlong	_var02, _var05
1fdb4     00 02 56 F2 | 	cmps	_var02, #0 wc
1fdb8     F4 FF 9F CD |  if_b	jmp	#LR__2653
1fdbc                 | '     LOCKREL(driverlock)
1fdbc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fdc0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fdc4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fdc8     07 12 72 FD | 	lockrel	arg01 wc
1fdcc     00 FA 05 F6 | 	mov	result1, #0
1fdd0                 | LR__2654
1fdd0                 | _psram_spin2_setQos_ret
1fdd0     2D 00 64 FD | 	ret
1fdd4                 | 
1fdd4                 | ' 
1fdd4                 | ' '..............................................................................
1fdd4                 | ' 
1fdd4                 | ' {{
1fdd4                 | ' }}
1fdd4                 | ' PRI lookupDelay(freq) : delay | profile
1fdd4                 | _psram_spin2_lookupDelay
1fdd4                 | '     profile := @delayTable
1fdd4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1fdd8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1fddc                 | '     delay := long[profile][0]
1fddc     00 03 02 FB | 	rdlong	_var02, _var01
1fde0                 | '     repeat while long[profile][1] 
1fde0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1fde4     97 16 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1fde8                 | LR__2660
1fde8     04 00 06 F1 | 	add	_var01, #4
1fdec     00 FB 09 FB | 	rdlong	result1, _var01 wz
1fdf0     04 00 86 F1 | 	sub	_var01, #4
1fdf4     1C 00 90 AD |  if_e	jmp	#LR__2662
1fdf8                 | '         if freq +< long[profile][1] 
1fdf8     04 00 06 F1 | 	add	_var01, #4
1fdfc     00 FB 01 FB | 	rdlong	result1, _var01
1fe00     04 00 86 F1 | 	sub	_var01, #4
1fe04     FD 12 12 F2 | 	cmp	arg01, result1 wc
1fe08                 | '             quit
1fe08                 | '         profile += 4
1fe08     04 00 06 31 |  if_ae	add	_var01, #4
1fe0c                 | '         delay++
1fe0c     01 02 06 31 |  if_ae	add	_var02, #1
1fe10     D4 FF 9F 3D |  if_ae	jmp	#LR__2660
1fe14                 | LR__2661
1fe14                 | LR__2662
1fe14     01 FB 01 F6 | 	mov	result1, _var02
1fe18                 | _psram_spin2_lookupDelay_ret
1fe18     2D 00 64 FD | 	ret
1fe1c                 | 
1fe1c                 | ' 
1fe1c                 | ' PUB start() : r
1fe1c                 | _usbnew_spin2_start
1fe1c     00 00 06 F6 | 	mov	_var01, #0
1fe20                 | '   ifnot driver_cog
1fe20     15 00 00 FF 
1fe24     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1fe28     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1fe2c     15 00 00 FF 
1fe30     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1fe34     38 00 90 5D |  if_ne	jmp	#LR__2670
1fe38                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1fe38     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1fe3c     10 00 06 F6 | 	mov	_var01, #16
1fe40     00 16 06 F6 | 	mov	arg03, #0
1fe44     28 16 62 FD | 	setq	arg03
1fe48     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1fe4c     01 00 66 C6 |  if_b	neg	_var01, #1
1fe50                 | '     if r >= 0
1fe50     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe54                 | '       driver_cog := r+1
1fe54     00 03 02 36 |  if_ae	mov	_var02, _var01
1fe58     01 02 06 31 |  if_ae	add	_var02, #1
1fe5c     15 00 00 3F 
1fe60     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1fe64     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1fe68     15 00 00 3F 
1fe6c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1fe70                 | LR__2670
1fe70     00 FB 01 F6 | 	mov	result1, _var01
1fe74                 | _usbnew_spin2_start_ret
1fe74     2D 00 64 FD | 	ret
1fe78                 | 
1fe78                 | '     '' (Always enabled)
1fe78                 | ' 
1fe78                 | ' '' Get current pressed state of a keyboard key
1fe78                 | ' PUB keystate(key) : r | buf[2],tmp
1fe78                 | _usbnew_spin2_keystate
1fe78     00 04 06 F6 | 	mov	_var03, #0
1fe7c                 | '   if key >= $E0 && key < $E8
1fe7c     E0 12 56 F2 | 	cmps	arg01, #224 wc
1fe80     34 00 90 CD |  if_b	jmp	#LR__2680
1fe84     E8 12 56 F2 | 	cmps	arg01, #232 wc
1fe88     2C 00 90 3D |  if_ae	jmp	#LR__2680
1fe8c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1fe8c     00 FA 05 F6 | 	mov	result1, #0
1fe90     13 00 00 FF 
1fe94     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1fe98     09 07 02 F6 | 	mov	_var04, arg01
1fe9c     E0 06 86 F1 | 	sub	_var04, #224
1fea0     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1fea4     03 09 4A F0 | 	shr	_var05, _var04 wz
1fea8     13 00 00 FF 
1feac     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1feb0     01 FA 65 56 |  if_ne	neg	result1, #1
1feb4     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1feb8                 | LR__2680
1feb8                 | '   else
1feb8                 | '     '' Do this in inline ASM to ensure atomicity
1feb8                 | '     tmp := @hkbd_report
1feb8     13 00 00 FF 
1febc     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1fec0     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1fec4                 | '     org
1fec4     13 00 00 FF 
1fec8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1fecc     97 1E 48 FB | 	callpa	#(@LR__2682-@LR__2681)>>2,fcache_load_ptr_
1fed0                 | LR__2681
1fed0 000             | 	org	0
1fed0 000 28 02 64 FD | 	setq	#1
1fed4 001 04 01 02 FB | 	rdlong	_var01, _var05
1fed8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1fedc 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1fee0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1fee4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1fee8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1feec 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1fef0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1fef4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1fef8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1fefc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1ff00 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1ff04 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1ff08 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1ff0c 00f             | LR__2682
1ff0c                 | 	orgh
1ff0c     02 FB 01 F6 | 	mov	result1, _var03
1ff10                 | _usbnew_spin2_keystate_ret
1ff10     2D 00 64 FD | 	ret
1ff14                 | 
1ff14                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1ff14                 | ' 
1ff14                 | ' '' Return key event from buffer if there is one
1ff14                 | ' PUB get_key() : r | tail
1ff14                 | _usbnew_spin2_get_key
1ff14                 | '   tail := keyq_tail
1ff14     0F 00 00 FF 
1ff18     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1ff1c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1ff20                 | '   if keyq_head == tail
1ff20     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1ff24     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1ff28     0F 00 00 FF 
1ff2c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1ff30     00 03 0A F2 | 	cmp	_var02, _var01 wz
1ff34                 | '     return 0 ' No event
1ff34     00 FA 05 A6 |  if_e	mov	result1, #0
1ff38     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1ff3c                 | '   r := keyq_data[tail]
1ff3c     00 03 02 F6 | 	mov	_var02, _var01
1ff40     02 02 66 F0 | 	shl	_var02, #2
1ff44     0F 00 00 FF 
1ff48     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1ff4c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1ff50     01 FB 01 FB | 	rdlong	result1, _var02
1ff54                 | '   if ++tail == KEYQUEUE_SIZE
1ff54     01 00 06 F1 | 	add	_var01, #1
1ff58     80 00 0E F2 | 	cmp	_var01, #128 wz
1ff5c                 | '     tail := 0
1ff5c     00 00 06 A6 |  if_e	mov	_var01, #0
1ff60                 | '   keyq_tail := tail
1ff60     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1ff64     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1ff68     0F 00 00 FF 
1ff6c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1ff70                 | _usbnew_spin2_get_key_ret
1ff70     2D 00 64 FD | 	ret
1ff74                 | 
1ff74                 | ' 
1ff74                 | ' '' Emulate mouse movement
1ff74                 | ' PUB mouse_move(x,y)
1ff74                 | _usbnew_spin2_mouse_move
1ff74     02 4A 05 F6 | 	mov	COUNT_, #2
1ff78     A8 00 A0 FD | 	call	#pushregs_
1ff7c     09 1F 02 F6 | 	mov	local01, arg01
1ff80     0A 21 02 F6 | 	mov	local02, arg02
1ff84                 | '   mouse_lock := 1
1ff84     14 00 00 FF 
1ff88     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1ff8c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1ff90     14 00 00 FF 
1ff94     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1ff98                 | '   waitus(2) ' hope driver is now done
1ff98     02 12 06 F6 | 	mov	arg01, #2
1ff9c     E8 0A B0 FD | 	call	#__system___waitus
1ffa0                 | '   mouse_xacc := x
1ffa0     14 00 00 FF 
1ffa4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1ffa8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1ffac                 | '   mouse_yacc := y
1ffac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ffb0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1ffb4                 | '   if mouse_outptr
1ffb4     04 00 00 FF 
1ffb8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1ffbc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1ffc0     0F 00 00 FF 
1ffc4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ffc8     24 00 90 AD |  if_e	jmp	#LR__2690
1ffcc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1ffcc     10 20 66 F0 | 	shl	local02, #16
1ffd0     0F 1F 32 F9 | 	getword	local01, local01, #0
1ffd4     0F 21 42 F5 | 	or	local02, local01
1ffd8     0F 00 00 FF 
1ffdc     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1ffe0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1ffe4     0F 00 00 FF 
1ffe8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ffec     0F 21 62 FC | 	wrlong	local02, local01
1fff0                 | LR__2690
1fff0                 | '   mouse_lock := 0
1fff0     14 00 00 FF 
1fff4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1fff8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1fffc     14 00 00 FF 
20000     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20004     A7 F0 03 F6 | 	mov	ptra, fp
20008     B2 00 A0 FD | 	call	#popregs_
2000c                 | _usbnew_spin2_mouse_move_ret
2000c     2D 00 64 FD | 	ret
20010                 | 
20010                 | '     '' Set HAVE_HIDPAD to enable.
20010                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20010                 | ' 
20010                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20010                 | ' PUB hidpad_id(dev) : r
20010                 | _usbnew_spin2_hidpad_id
20010                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20010     13 00 00 FF 
20014     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20018     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2001c     09 01 02 F6 | 	mov	_var01, arg01
20020     03 00 66 F0 | 	shl	_var01, #3
20024     09 01 82 F1 | 	sub	_var01, arg01
20028     02 00 66 F0 | 	shl	_var01, #2
2002c     00 FB 01 F1 | 	add	result1, _var01
20030     FD FA 01 FB | 	rdlong	result1, result1
20034     13 00 00 FF 
20038     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2003c                 | _usbnew_spin2_hidpad_id_ret
2003c     2D 00 64 FD | 	ret
20040                 | 
20040                 | ' 
20040                 | ' '' Get all button states for a device
20040                 | ' PUB hidpad_buttons(dev) : r 
20040                 | _usbnew_spin2_hidpad_buttons
20040                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20040     13 00 00 FF 
20044     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20048     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2004c     09 01 02 F6 | 	mov	_var01, arg01
20050     03 00 66 F0 | 	shl	_var01, #3
20054     09 01 82 F1 | 	sub	_var01, arg01
20058     02 00 66 F0 | 	shl	_var01, #2
2005c     00 FB 01 F1 | 	add	result1, _var01
20060     14 FA 05 F1 | 	add	result1, #20
20064     FD FA 01 FB | 	rdlong	result1, result1
20068     13 00 00 FF 
2006c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20070                 | _usbnew_spin2_hidpad_buttons_ret
20070     2D 00 64 FD | 	ret
20074                 | 
20074                 | ' 
20074                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20074                 | ' PUB hidpad_axis(dev,axnum) : r
20074                 | _usbnew_spin2_hidpad_axis
20074                 | '   if axnum +>= 6
20074     06 14 16 F2 | 	cmp	arg02, #6 wc
20078                 | '     return 0
20078     00 FA 05 36 |  if_ae	mov	result1, #0
2007c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20080                 | '   else 
20080                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20080     13 00 00 FF 
20084     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20088     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2008c     09 01 02 F6 | 	mov	_var01, arg01
20090     03 00 66 F0 | 	shl	_var01, #3
20094     09 01 82 F1 | 	sub	_var01, arg01
20098     02 00 66 F0 | 	shl	_var01, #2
2009c     00 FB 01 F1 | 	add	result1, _var01
200a0     04 00 06 F6 | 	mov	_var01, #4
200a4     0A 01 02 F1 | 	add	_var01, arg02
200a8     01 00 66 F0 | 	shl	_var01, #1
200ac     FD 00 02 F1 | 	add	_var01, result1
200b0     00 FB E1 FA | 	rdword	result1, _var01
200b4     0F FA 65 F7 | 	signx	result1, #15
200b8     13 00 00 FF 
200bc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
200c0                 | _usbnew_spin2_hidpad_axis_ret
200c0     2D 00 64 FD | 	ret
200c4                 | 
200c4                 | ' 
200c4                 | ' 
200c4                 | ' '--------------------------------------------------------------
200c4                 | ' '---------- Init the variables, start the cog. ----------------
200c4                 | ' '--------------------------------------------------------------
200c4                 | ' 
200c4                 | ' pub start(mbox,scope,cache) :cog,base | iii
200c4                 | _audio096_spin2_start
200c4     04 4A 05 F6 | 	mov	COUNT_, #4
200c8     A8 00 A0 FD | 	call	#pushregs_
200cc     09 1F 02 F6 | 	mov	local01, arg01
200d0                 | ' 
200d0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
200d0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
200d0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
200d0                 | ' 
200d0                 | ' mailboxaddr:=mbox 
200d0     F2 1E 62 FC | 	wrlong	local01, objptr
200d4                 | ' scope_ptr:=scope
200d4     04 E4 05 F1 | 	add	objptr, #4
200d8     F2 14 62 FC | 	wrlong	arg02, objptr
200dc                 | ' cache_ptr:=cache
200dc     04 E4 05 F1 | 	add	objptr, #4
200e0     F2 16 62 FC | 	wrlong	arg03, objptr
200e4                 | ' base:=@channel1[0]
200e4     04 E4 05 F1 | 	add	objptr, #4
200e8     F2 20 02 F6 | 	mov	local02, objptr
200ec                 | ' long[$40]:=mbox
200ec     40 1E 66 FC | 	wrlong	local01, #64
200f0                 | ' repeat iii from 0 to 7
200f0     00 22 06 F6 | 	mov	local03, #0
200f4     02 00 00 FF 
200f8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
200fc     0C E4 85 F1 | 	sub	objptr, #12
20100     97 BC 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
20104                 | LR__2700
20104                 | '   long[base+64*iii]:=0
20104     10 1F 02 F6 | 	mov	local01, local02
20108     11 FD 01 F6 | 	mov	result2, local03
2010c     06 FC 65 F0 | 	shl	result2, #6
20110     FE 1E 02 F1 | 	add	local01, result2
20114     0F 01 68 FC | 	wrlong	#0, local01
20118                 | '   long[base+64*iii+4]:=0
20118     10 1F 02 F6 | 	mov	local01, local02
2011c     11 FD 01 F6 | 	mov	result2, local03
20120     06 FC 65 F0 | 	shl	result2, #6
20124     FE 1E 02 F1 | 	add	local01, result2
20128     04 1E 06 F1 | 	add	local01, #4
2012c     0F 01 68 FC | 	wrlong	#0, local01
20130                 | '   long[base+64*iii+12]:=0
20130     10 25 02 F6 | 	mov	local04, local02
20134     11 1F 02 F6 | 	mov	local01, local03
20138     06 1E 66 F0 | 	shl	local01, #6
2013c     0F 25 02 F1 | 	add	local04, local01
20140     0C 24 06 F1 | 	add	local04, #12
20144     12 01 68 FC | 	wrlong	#0, local04
20148                 | '   long[base+64*iii+16]:=2 
20148     10 25 02 F6 | 	mov	local04, local02
2014c     11 1F 02 F6 | 	mov	local01, local03
20150     06 1E 66 F0 | 	shl	local01, #6
20154     0F 25 02 F1 | 	add	local04, local01
20158     10 24 06 F1 | 	add	local04, #16
2015c     12 05 68 FC | 	wrlong	#2, local04
20160                 | '   word[base+64*iii+20]:=0
20160     10 25 02 F6 | 	mov	local04, local02
20164     11 1F 02 F6 | 	mov	local01, local03
20168     06 1E 66 F0 | 	shl	local01, #6
2016c     0F 25 02 F1 | 	add	local04, local01
20170     14 24 06 F1 | 	add	local04, #20
20174     12 01 58 FC | 	wrword	#0, local04
20178                 | '   word[base+64*iii+22]:=8192
20178     10 25 02 F6 | 	mov	local04, local02
2017c     11 1F 02 F6 | 	mov	local01, local03
20180     06 1E 66 F0 | 	shl	local01, #6
20184     0F 25 02 F1 | 	add	local04, local01
20188     16 24 06 F1 | 	add	local04, #22
2018c     10 00 80 FF 
20190     12 01 58 FC | 	wrword	##8192, local04
20194                 | '   word[base+64*iii+24]:=4000+2*iii
20194     11 25 02 F6 | 	mov	local04, local03
20198     01 24 66 F0 | 	shl	local04, #1
2019c     07 00 00 FF 
201a0     A0 1F 06 F6 | 	mov	local01, ##4000
201a4     12 1F 02 F1 | 	add	local01, local04
201a8     10 25 02 F6 | 	mov	local04, local02
201ac     11 FD 01 F6 | 	mov	result2, local03
201b0     06 FC 65 F0 | 	shl	result2, #6
201b4     FE 24 02 F1 | 	add	local04, result2
201b8     18 24 06 F1 | 	add	local04, #24
201bc     12 1F 52 FC | 	wrword	local01, local04
201c0                 | '   word[base+64*iii+26]:=2
201c0     10 25 02 F6 | 	mov	local04, local02
201c4     11 1F 02 F6 | 	mov	local01, local03
201c8     06 1E 66 F0 | 	shl	local01, #6
201cc     0F 25 02 F1 | 	add	local04, local01
201d0     1A 24 06 F1 | 	add	local04, #26
201d4     12 05 58 FC | 	wrword	#2, local04
201d8                 | '   long [base+64*iii+8]:=@null | $C0000000
201d8     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
201dc     3E 1E 26 F4 | 	bith	local01, #62
201e0     10 25 02 F6 | 	mov	local04, local02
201e4     11 17 02 F6 | 	mov	arg03, local03
201e8     06 16 66 F0 | 	shl	arg03, #6
201ec     0B 25 02 F1 | 	add	local04, arg03
201f0     08 24 06 F1 | 	add	local04, #8
201f4     12 1F 62 FC | 	wrlong	local01, local04
201f8                 | '   long[base+64*iii+32]:=0
201f8     10 25 02 F6 | 	mov	local04, local02
201fc     11 1F 02 F6 | 	mov	local01, local03
20200     06 1E 66 F0 | 	shl	local01, #6
20204     0F 25 02 F1 | 	add	local04, local01
20208     20 24 06 F1 | 	add	local04, #32
2020c     12 01 68 FC | 	wrlong	#0, local04
20210                 | '   long[base+64*iii+36]:=0
20210     10 25 02 F6 | 	mov	local04, local02
20214     11 1F 02 F6 | 	mov	local01, local03
20218     06 1E 66 F0 | 	shl	local01, #6
2021c     0F 25 02 F1 | 	add	local04, local01
20220     24 24 06 F1 | 	add	local04, #36
20224     12 01 68 FC | 	wrlong	#0, local04
20228                 | '   long[base+64*iii+40]:=0
20228     10 25 02 F6 | 	mov	local04, local02
2022c     11 1F 02 F6 | 	mov	local01, local03
20230     06 1E 66 F0 | 	shl	local01, #6
20234     0F 25 02 F1 | 	add	local04, local01
20238     28 24 06 F1 | 	add	local04, #40
2023c     12 01 68 FC | 	wrlong	#0, local04
20240                 | '   long[base+64*iii+44]:=0
20240     10 25 02 F6 | 	mov	local04, local02
20244     11 1F 02 F6 | 	mov	local01, local03
20248     06 1E 66 F0 | 	shl	local01, #6
2024c     0F 25 02 F1 | 	add	local04, local01
20250     2C 24 06 F1 | 	add	local04, #44
20254     12 01 68 FC | 	wrlong	#0, local04
20258                 | '   long[base+64*iii+28]:=0
20258     10 25 02 F6 | 	mov	local04, local02
2025c     11 1F 02 F6 | 	mov	local01, local03
20260     06 1E 66 F0 | 	shl	local01, #6
20264     0F 25 02 F1 | 	add	local04, local01
20268     1C 24 06 F1 | 	add	local04, #28
2026c     12 01 68 FC | 	wrlong	#0, local04
20270     01 22 06 F1 | 	add	local03, #1
20274     08 22 56 F2 | 	cmps	local03, #8 wc
20278     88 FE 9F CD |  if_b	jmp	#LR__2700
2027c                 | LR__2701
2027c     02 00 00 FF 
20280     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20284                 | '   
20284                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20284     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20288     F2 16 02 F6 | 	mov	arg03, objptr
2028c     10 24 06 F6 | 	mov	local04, #16
20290     28 16 62 FD | 	setq	arg03
20294     0A 25 F2 FC | 	coginit	local04, arg02 wc
20298     01 24 66 C6 |  if_b	neg	local04, #1
2029c                 | ' waitms(100)
2029c     64 12 06 F6 | 	mov	arg01, #100
202a0     78 07 B0 FD | 	call	#__system___waitms
202a4                 | ' return cog,base
202a4     10 FD 01 F6 | 	mov	result2, local02
202a8     12 FB 01 F6 | 	mov	result1, local04
202ac     A7 F0 03 F6 | 	mov	ptra, fp
202b0     B2 00 A0 FD | 	call	#popregs_
202b4                 | _audio096_spin2_start_ret
202b4     2D 00 64 FD | 	ret
202b8                 | 
202b8                 | ' 
202b8                 | ' ' a simple play procedure to not poke everything. 
202b8                 | ' 
202b8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
202b8                 | _audio096_spin2_play
202b8     0C E4 05 F1 | 	add	objptr, #12
202bc     F2 00 02 F6 | 	mov	_var01, objptr
202c0     06 12 66 F0 | 	shl	arg01, #6
202c4     09 01 02 F1 | 	add	_var01, arg01
202c8     00 13 02 F6 | 	mov	arg01, _var01
202cc     0C 12 06 F1 | 	add	arg01, #12
202d0     09 1B 62 FC | 	wrlong	arg05, arg01
202d4     00 1C 56 F2 | 	cmps	arg06, #0 wc
202d8     00 13 02 36 |  if_ae	mov	arg01, _var01
202dc     10 12 06 31 |  if_ae	add	arg01, #16
202e0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
202e4     02 1A 06 C1 |  if_b	add	arg05, #2
202e8     00 13 02 C6 |  if_b	mov	arg01, _var01
202ec     10 12 06 C1 |  if_b	add	arg01, #16
202f0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
202f4     0B 13 52 F6 | 	abs	arg01, arg03 wc
202f8     0F 1B 80 FF 
202fc     09 1F 1A FD | 	qdiv	##3546895, arg01
20300                 | ' 
20300                 | ' base2:=@channel1[0]+64*channel
20300                 | ' 
20300                 | ' 
20300                 | ' long[base2+12]:= len
20300                 | ' if loop >=0 
20300                 | '   long[base2+16]:= loop
20300     0C E4 85 F1 | 	sub	objptr, #12
20304                 | ' else
20304                 | '   long[base2+16]:= len+2
20304                 | ' word[base2+20]:=vol
20304     00 13 02 F6 | 	mov	arg01, _var01
20308     14 12 06 F1 | 	add	arg01, #20
2030c     09 19 52 FC | 	wrword	arg04, arg01
20310                 | ' word[base2+24]:= 3546895/splfreq 
20310     00 19 02 F6 | 	mov	arg04, _var01
20314     18 18 06 F1 | 	add	arg04, #24
20318                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20318                 | ' long[base2+28]:=$40000000    
20318                 | ' long[base2+32]:=0    
20318                 | ' long[base2+36]:=0    
20318                 | ' long[base2+40]:=0    
20318                 | ' long[base2+44]:=0    
20318                 | ' long[base2+8]:=sample+$C0000000     
20318     00 00 60 FF 
2031c     00 14 06 F1 | 	add	arg02, ##-1073741824
20320     18 12 62 FD | 	getqx	arg01
20324     09 13 82 F6 | 	negc	arg01, arg01
20328     0C 13 52 FC | 	wrword	arg01, arg04
2032c     00 13 02 F6 | 	mov	arg01, _var01
20330     1A 12 06 F1 | 	add	arg01, #26
20334     09 01 5A FC | 	wrword	#256, arg01
20338     00 13 02 F6 | 	mov	arg01, _var01
2033c     1C 12 06 F1 | 	add	arg01, #28
20340     00 00 A0 FF 
20344     09 01 68 FC | 	wrlong	##1073741824, arg01
20348     00 13 02 F6 | 	mov	arg01, _var01
2034c     20 12 06 F1 | 	add	arg01, #32
20350     09 01 68 FC | 	wrlong	#0, arg01
20354     00 13 02 F6 | 	mov	arg01, _var01
20358     24 12 06 F1 | 	add	arg01, #36
2035c     09 01 68 FC | 	wrlong	#0, arg01
20360     00 13 02 F6 | 	mov	arg01, _var01
20364     28 12 06 F1 | 	add	arg01, #40
20368     09 01 68 FC | 	wrlong	#0, arg01
2036c     00 13 02 F6 | 	mov	arg01, _var01
20370     2C 12 06 F1 | 	add	arg01, #44
20374     09 01 68 FC | 	wrlong	#0, arg01
20378     08 00 06 F1 | 	add	_var01, #8
2037c     00 15 62 FC | 	wrlong	arg02, _var01
20380                 | _audio096_spin2_play_ret
20380     2D 00 64 FD | 	ret
20384                 | 
20384                 | ' 
20384                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20384                 | _audio096_spin2_play8
20384                 | ' 
20384                 | ' base2:=@channel1[0]+64*channel
20384     0C E4 05 F1 | 	add	objptr, #12
20388     F2 00 02 F6 | 	mov	_var01, objptr
2038c     06 12 66 F0 | 	shl	arg01, #6
20390     09 01 02 F1 | 	add	_var01, arg01
20394                 | ' long[base2]:=0
20394     00 01 68 FC | 	wrlong	#0, _var01
20398                 | ' long[base2+8]:=sample+$40000000 
20398     00 00 20 FF 
2039c     00 14 06 F1 | 	add	arg02, ##1073741824
203a0     00 13 02 F6 | 	mov	arg01, _var01
203a4     08 12 06 F1 | 	add	arg01, #8
203a8     09 15 62 FC | 	wrlong	arg02, arg01
203ac                 | ' if loop>=0
203ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
203b0     0C E4 85 F1 | 	sub	objptr, #12
203b4     1C 00 90 CD |  if_b	jmp	#LR__2710
203b8                 | '   long[base2+12]:=loop
203b8     00 15 02 F6 | 	mov	arg02, _var01
203bc     0C 14 06 F1 | 	add	arg02, #12
203c0     0A 1D 62 FC | 	wrlong	arg06, arg02
203c4                 | '   long[base2+16]:= len
203c4     00 1D 02 F6 | 	mov	arg06, _var01
203c8     10 1C 06 F1 | 	add	arg06, #16
203cc     0E 1B 62 FC | 	wrlong	arg05, arg06
203d0     1C 00 90 FD | 	jmp	#LR__2711
203d4                 | LR__2710
203d4                 | ' else
203d4                 | '   long[base2+12]:= len
203d4     00 1D 02 F6 | 	mov	arg06, _var01
203d8     0C 1C 06 F1 | 	add	arg06, #12
203dc     0E 1B 62 FC | 	wrlong	arg05, arg06
203e0                 | '   long[base2+16]:= len+1
203e0     01 1A 06 F1 | 	add	arg05, #1
203e4     00 13 02 F6 | 	mov	arg01, _var01
203e8     10 12 06 F1 | 	add	arg01, #16
203ec     09 1B 62 FC | 	wrlong	arg05, arg01
203f0                 | LR__2711
203f0     0B 17 52 F6 | 	abs	arg03, arg03 wc
203f4     0F 1B 80 FF 
203f8     0B 1F 1A FD | 	qdiv	##3546895, arg03
203fc                 | ' word[base2+20]:=vol
203fc     00 17 02 F6 | 	mov	arg03, _var01
20400     14 16 06 F1 | 	add	arg03, #20
20404     0B 19 52 FC | 	wrword	arg04, arg03
20408                 | ' word[base2+24]:= 3546895 /splfreq 
20408     00 13 02 F6 | 	mov	arg01, _var01
2040c     18 12 06 F1 | 	add	arg01, #24
20410                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20410     1A 00 06 F1 | 	add	_var01, #26
20414     18 18 62 FD | 	getqx	arg04
20418     0C 19 82 F6 | 	negc	arg04, arg04
2041c     09 19 52 FC | 	wrword	arg04, arg01
20420     00 01 5A FC | 	wrword	#256, _var01
20424                 | _audio096_spin2_play8_ret
20424     2D 00 64 FD | 	ret
20428                 | 
20428                 | ' 'long[base2+28]:=$40000000
20428                 | ' 
20428                 | '     
20428                 | ' pub stop(channel) 'silence it
20428                 | _audio096_spin2_stop
20428                 | ' 
20428                 | ' word[@channel1[0]+64*channel+20]:=0
20428     0C E4 05 F1 | 	add	objptr, #12
2042c     F2 00 02 F6 | 	mov	_var01, objptr
20430     09 03 02 F6 | 	mov	_var02, arg01
20434     06 02 66 F0 | 	shl	_var02, #6
20438     01 01 02 F1 | 	add	_var01, _var02
2043c     14 00 06 F1 | 	add	_var01, #20
20440     00 01 58 FC | 	wrword	#0, _var01
20444                 | ' word[@channel1[0]+64*channel+20]:=0
20444     F2 00 02 F6 | 	mov	_var01, objptr
20448     06 12 66 F0 | 	shl	arg01, #6
2044c     09 01 02 F1 | 	add	_var01, arg01
20450     14 00 06 F1 | 	add	_var01, #20
20454     00 01 58 FC | 	wrword	#0, _var01
20458     0C E4 85 F1 | 	sub	objptr, #12
2045c                 | _audio096_spin2_stop_ret
2045c     2D 00 64 FD | 	ret
20460                 | hubexit
20460     81 00 80 FD | 	jmp	#cogexit
20464                 | 
20464                 | __system___setbaud
20464     14 7C 06 FB | 	rdlong	muldiva_, #20
20468     09 7F 02 F6 | 	mov	muldivb_, arg01
2046c     BA 00 A0 FD | 	call	#divide_
20470     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
20474                 | LR__2720
20474     3E FA 9D FA | 	rdpin	result1, #62 wc
20478     FE FC A1 F1 | 	subx	result2, result2
2047c     F4 FF 9F CD |  if_b	jmp	#LR__2720
20480                 | LR__2721
20480     40 7C 64 FD | 	dirl	#62
20484     40 7E 64 FD | 	dirl	#63
20488     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2048c     10 7E 66 F0 | 	shl	muldivb_, #16
20490     07 14 06 F6 | 	mov	arg02, #7
20494     3F 15 02 F1 | 	add	arg02, muldivb_
20498     3E F8 0C FC | 	wrpin	#124, #62
2049c     3E 14 16 FC | 	wxpin	arg02, #62
204a0     3F 7C 0C FC | 	wrpin	#62, #63
204a4     14 14 06 F1 | 	add	arg02, #20
204a8     3F 14 16 FC | 	wxpin	arg02, #63
204ac     41 7C 64 FD | 	dirh	#62
204b0     41 7E 64 FD | 	dirh	#63
204b4                 | __system___setbaud_ret
204b4     2D 00 64 FD | 	ret
204b8                 | 
204b8                 | __system___txraw
204b8     01 4A 05 F6 | 	mov	COUNT_, #1
204bc     A8 00 A0 FD | 	call	#pushregs_
204c0     09 1F 02 F6 | 	mov	local01, arg01
204c4     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
204c8                 | LR__2730
204c8     3E FA 9D FA | 	rdpin	result1, #62 wc
204cc     FE FC A1 F1 | 	subx	result2, result2
204d0     F4 FF 9F CD |  if_b	jmp	#LR__2730
204d4                 | LR__2731
204d4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
204d8     C2 01 00 AF 
204dc     00 12 06 A6 |  if_e	mov	arg01, ##230400
204e0     80 FF BF AD |  if_e	call	#__system___setbaud
204e4     58 7C 64 FD | 	drvl	#62
204e8     3E 1E 26 FC | 	wypin	local01, #62
204ec     01 FA 05 F6 | 	mov	result1, #1
204f0     A7 F0 03 F6 | 	mov	ptra, fp
204f4     B2 00 A0 FD | 	call	#popregs_
204f8                 | __system___txraw_ret
204f8     2D 00 64 FD | 	ret
204fc                 | 
204fc                 | __system___rxraw
204fc     0D 4A 05 F6 | 	mov	COUNT_, #13
20500     A8 00 A0 FD | 	call	#pushregs_
20504     09 1F 02 F6 | 	mov	local01, arg01
20508     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2050c     C2 01 00 AF 
20510     00 12 06 A6 |  if_e	mov	arg01, ##230400
20514     4C FF BF AD |  if_e	call	#__system___setbaud
20518     00 1E 0E F2 | 	cmp	local01, #0 wz
2051c     20 00 90 AD |  if_e	jmp	#LR__2740
20520     14 22 06 FB | 	rdlong	local03, #20
20524     0A 22 46 F0 | 	shr	local03, #10
20528     11 1F 02 FD | 	qmul	local01, local03
2052c     1A FA 61 FD | 	getct	result1
20530     18 24 62 FD | 	getqx	local04
20534     12 FB 01 F1 | 	add	result1, local04
20538     FD 26 02 F6 | 	mov	local05, result1
2053c     04 00 90 FD | 	jmp	#LR__2741
20540                 | LR__2740
20540     00 26 06 F6 | 	mov	local05, #0
20544                 | LR__2741
20544     01 28 66 F6 | 	neg	local06, #1
20548     3F 2A 06 F6 | 	mov	local07, #63
2054c     00 2C 06 F6 | 	mov	local08, #0
20550     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20554     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20558     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2055c                 | LR__2742
2055c     08 2E 16 F4 | 	testb	local09, #8 wc
20560     09 2E 76 F4 | 	testbn	local09, #9 andc
20564     0A 2E 46 F0 | 	shr	local09, #10
20568     01 2C 06 C6 |  if_b	mov	local08, #1
2056c     40 7E 6C 3D |  if_ae	testp	#63 wz
20570     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20574     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20578     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
2057c                 | LR__2743
2057c     00 20 06 F6 | 	mov	local02, #0
20580     00 2C 0E F2 | 	cmp	local08, #0 wz
20584     01 20 66 56 |  if_ne	neg	local02, #1
20588     00 30 06 F6 | 	mov	local10, #0
2058c     00 22 06 F6 | 	mov	local03, #0
20590     00 1E 0E F2 | 	cmp	local01, #0 wz
20594     01 22 66 56 |  if_ne	neg	local03, #1
20598     00 24 06 F6 | 	mov	local04, #0
2059c     00 32 06 F6 | 	mov	local11, #0
205a0     1A FA 61 FD | 	getct	result1
205a4     FD 34 02 F6 | 	mov	local12, result1
205a8     1A 37 02 F6 | 	mov	local13, local12
205ac     13 37 82 F1 | 	sub	local13, local05
205b0     00 36 56 F2 | 	cmps	local13, #0 wc
205b4     00 32 26 C6 |  if_b	not	local11, #0
205b8     00 32 0E F2 | 	cmp	local11, #0 wz
205bc     00 24 26 56 |  if_ne	not	local04, #0
205c0     12 23 CA F7 | 	test	local03, local04 wz
205c4     00 30 26 56 |  if_ne	not	local10, #0
205c8     18 21 4A F5 | 	or	local02, local10 wz
205cc     8C FF 9F AD |  if_e	jmp	#LR__2742
205d0     00 2C 0E F2 | 	cmp	local08, #0 wz
205d4     17 29 02 56 |  if_ne	mov	local06, local09
205d8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
205dc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
205e0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
205e4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
205e8     14 FB 01 F6 | 	mov	result1, local06
205ec     A7 F0 03 F6 | 	mov	ptra, fp
205f0     B2 00 A0 FD | 	call	#popregs_
205f4                 | __system___rxraw_ret
205f4     2D 00 64 FD | 	ret
205f8                 | 
205f8                 | __system___getus
205f8     1A FC 71 FD | 	getct	result2 wc
205fc     1A 00 62 FD | 	getct	_var01
20600     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20604     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20608     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2060c     20 00 90 5D |  if_ne	jmp	#LR__2750
20610     14 02 06 FB | 	rdlong	_var02, #20
20614     A1 07 00 FF 
20618     40 02 16 FD | 	qdiv	_var02, ##1000000
2061c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20620     18 FA 61 FD | 	getqx	result1
20624     FD 02 02 F6 | 	mov	_var02, result1
20628     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2062c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20630                 | LR__2750
20630     01 FD 11 FD | 	qdiv	result2, _var02
20634     19 FC 61 FD | 	getqy	result2
20638     28 FC 61 FD | 	setq	result2
2063c     01 01 12 FD | 	qdiv	_var01, _var02
20640     18 FA 61 FD | 	getqx	result1
20644                 | __system___getus_ret
20644     2D 00 64 FD | 	ret
20648                 | 
20648                 | __system____builtin_memmove
20648     09 01 02 F6 | 	mov	_var01, arg01
2064c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20650     10 00 90 CD |  if_b	jmp	#LR__2760
20654     0A 03 02 F6 | 	mov	_var02, arg02
20658     0B 03 02 F1 | 	add	_var02, arg03
2065c     01 13 52 F2 | 	cmps	arg01, _var02 wc
20660     48 00 90 CD |  if_b	jmp	#LR__2766
20664                 | LR__2760
20664     0B 05 02 F6 | 	mov	_var03, arg03
20668     02 04 4E F0 | 	shr	_var03, #2 wz
2066c     18 00 90 AD |  if_e	jmp	#LR__2765
20670     97 0A 48 FB | 	callpa	#(@LR__2763-@LR__2761)>>2,fcache_load_ptr_
20674                 | LR__2761
20674     02 09 D8 FC | 	rep	@LR__2764, _var03
20678                 | LR__2762
20678     0A 05 02 FB | 	rdlong	_var03, arg02
2067c     09 05 62 FC | 	wrlong	_var03, arg01
20680     04 12 06 F1 | 	add	arg01, #4
20684     04 14 06 F1 | 	add	arg02, #4
20688                 | LR__2763
20688                 | LR__2764
20688                 | LR__2765
20688     02 16 CE F7 | 	test	arg03, #2 wz
2068c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20690     09 03 52 5C |  if_ne	wrword	_var02, arg01
20694     02 12 06 51 |  if_ne	add	arg01, #2
20698     02 14 06 51 |  if_ne	add	arg02, #2
2069c     01 16 CE F7 | 	test	arg03, #1 wz
206a0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
206a4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
206a8     28 00 90 FD | 	jmp	#LR__2772
206ac                 | LR__2766
206ac     0B 13 02 F1 | 	add	arg01, arg03
206b0     0B 15 02 F1 | 	add	arg02, arg03
206b4     0B 07 0A F6 | 	mov	_var04, arg03 wz
206b8     18 00 90 AD |  if_e	jmp	#LR__2771
206bc     97 0A 48 FB | 	callpa	#(@LR__2769-@LR__2767)>>2,fcache_load_ptr_
206c0                 | LR__2767
206c0     03 09 D8 FC | 	rep	@LR__2770, _var04
206c4                 | LR__2768
206c4     01 12 86 F1 | 	sub	arg01, #1
206c8     01 14 86 F1 | 	sub	arg02, #1
206cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
206d0     09 03 42 FC | 	wrbyte	_var02, arg01
206d4                 | LR__2769
206d4                 | LR__2770
206d4                 | LR__2771
206d4                 | LR__2772
206d4     00 FB 01 F6 | 	mov	result1, _var01
206d8                 | __system____builtin_memmove_ret
206d8     2D 00 64 FD | 	ret
206dc                 | 
206dc                 | __system____builtin_strcpy
206dc     09 01 02 F6 | 	mov	_var01, arg01
206e0     97 0A 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
206e4                 | LR__2780
206e4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
206e8     09 FB 41 FC | 	wrbyte	result1, arg01
206ec     01 14 06 F1 | 	add	arg02, #1
206f0     01 12 06 F1 | 	add	arg01, #1
206f4     EC FF 9F 5D |  if_ne	jmp	#LR__2780
206f8                 | LR__2781
206f8     00 FB 01 F6 | 	mov	result1, _var01
206fc                 | __system____builtin_strcpy_ret
206fc     2D 00 64 FD | 	ret
20700                 | 
20700                 | __system____topofstack
20700     00 4A 05 F6 | 	mov	COUNT_, #0
20704     A8 00 A0 FD | 	call	#pushregs_
20708     08 F0 07 F1 | 	add	ptra, #8
2070c     04 4E 05 F1 | 	add	fp, #4
20710     A7 12 62 FC | 	wrlong	arg01, fp
20714     A7 FA 01 F6 | 	mov	result1, fp
20718     04 4E 85 F1 | 	sub	fp, #4
2071c     A7 F0 03 F6 | 	mov	ptra, fp
20720     B2 00 A0 FD | 	call	#popregs_
20724                 | __system____topofstack_ret
20724     2D 00 64 FD | 	ret
20728                 | 
20728                 | __system___lockmem
20728     00 FA 05 F6 | 	mov	result1, #0
2072c     01 FA 61 FD | 	cogid	result1
20730     00 FB 05 F1 | 	add	result1, #256
20734                 | LR__2790
20734     09 01 0A FB | 	rdlong	_var01, arg01 wz
20738     09 FB 61 AC |  if_e	wrlong	result1, arg01
2073c     09 01 02 AB |  if_e	rdlong	_var01, arg01
20740     09 01 02 AB |  if_e	rdlong	_var01, arg01
20744     FD 00 0A F2 | 	cmp	_var01, result1 wz
20748     E8 FF 9F 5D |  if_ne	jmp	#LR__2790
2074c                 | __system___lockmem_ret
2074c     2D 00 64 FD | 	ret
20750                 | 
20750                 | __system___string_cmp
20750     97 14 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
20754                 | LR__2800
20754     09 01 C2 FA | 	rdbyte	_var01, arg01
20758     0A 03 C2 FA | 	rdbyte	_var02, arg02
2075c     00 05 02 F6 | 	mov	_var03, _var01
20760     01 05 8A F1 | 	sub	_var03, _var02 wz
20764     01 12 06 F1 | 	add	arg01, #1
20768     01 14 06 F1 | 	add	arg02, #1
2076c     0C 00 90 5D |  if_ne	jmp	#LR__2802
20770     00 00 0E F2 | 	cmp	_var01, #0 wz
20774     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20778     D8 FF 9F 5D |  if_ne	jmp	#LR__2800
2077c                 | LR__2801
2077c                 | LR__2802
2077c     02 FB 01 F6 | 	mov	result1, _var03
20780                 | __system___string_cmp_ret
20780     2D 00 64 FD | 	ret
20784                 | 
20784                 | __system___string_concat
20784     05 4A 05 F6 | 	mov	COUNT_, #5
20788     A8 00 A0 FD | 	call	#pushregs_
2078c     09 1F 02 F6 | 	mov	local01, arg01
20790     0A 21 02 F6 | 	mov	local02, arg02
20794     0F 13 02 F6 | 	mov	arg01, local01
20798     09 23 02 F6 | 	mov	local03, arg01
2079c     97 06 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
207a0                 | LR__2810
207a0     11 FB C9 FA | 	rdbyte	result1, local03 wz
207a4     01 22 06 51 |  if_ne	add	local03, #1
207a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2810
207ac                 | LR__2811
207ac     09 23 82 F1 | 	sub	local03, arg01
207b0     11 25 02 F6 | 	mov	local04, local03
207b4     10 13 02 F6 | 	mov	arg01, local02
207b8     09 23 02 F6 | 	mov	local03, arg01
207bc     97 06 48 FB | 	callpa	#(@LR__2813-@LR__2812)>>2,fcache_load_ptr_
207c0                 | LR__2812
207c0     11 FB C9 FA | 	rdbyte	result1, local03 wz
207c4     01 22 06 51 |  if_ne	add	local03, #1
207c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2812
207cc                 | LR__2813
207cc     09 23 82 F1 | 	sub	local03, arg01
207d0     12 13 02 F6 | 	mov	arg01, local04
207d4     11 13 02 F1 | 	add	arg01, local03
207d8     01 12 06 F1 | 	add	arg01, #1
207dc     00 3E B0 FD | 	call	#__system___gc_alloc_managed
207e0     FD 26 0A F6 | 	mov	local05, result1 wz
207e4     28 00 90 AD |  if_e	jmp	#LR__2814
207e8     13 13 02 F6 | 	mov	arg01, local05
207ec     0F 15 02 F6 | 	mov	arg02, local01
207f0     12 17 02 F6 | 	mov	arg03, local04
207f4     50 FE BF FD | 	call	#__system____builtin_memmove
207f8     13 13 02 F6 | 	mov	arg01, local05
207fc     12 13 02 F1 | 	add	arg01, local04
20800     01 22 06 F1 | 	add	local03, #1
20804     10 15 02 F6 | 	mov	arg02, local02
20808     11 17 02 F6 | 	mov	arg03, local03
2080c     38 FE BF FD | 	call	#__system____builtin_memmove
20810                 | LR__2814
20810     13 FB 01 F6 | 	mov	result1, local05
20814     A7 F0 03 F6 | 	mov	ptra, fp
20818     B2 00 A0 FD | 	call	#popregs_
2081c                 | __system___string_concat_ret
2081c     2D 00 64 FD | 	ret
20820                 | 
20820                 | __system___tx
20820     02 4A 05 F6 | 	mov	COUNT_, #2
20824     A8 00 A0 FD | 	call	#pushregs_
20828     09 1F 02 F6 | 	mov	local01, arg01
2082c     0A 1E 0E F2 | 	cmp	local01, #10 wz
20830     18 00 90 5D |  if_ne	jmp	#LR__2820
20834     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20838     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
2083c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20840     02 20 CE F7 | 	test	local02, #2 wz
20844     0D 12 06 56 |  if_ne	mov	arg01, #13
20848     6C FC BF 5D |  if_ne	call	#__system___txraw
2084c                 | LR__2820
2084c     0F 13 02 F6 | 	mov	arg01, local01
20850     64 FC BF FD | 	call	#__system___txraw
20854     A7 F0 03 F6 | 	mov	ptra, fp
20858     B2 00 A0 FD | 	call	#popregs_
2085c                 | __system___tx_ret
2085c     2D 00 64 FD | 	ret
20860                 | 
20860                 | __system___rx
20860     01 4A 05 F6 | 	mov	COUNT_, #1
20864     A8 00 A0 FD | 	call	#pushregs_
20868                 | LR__2830
20868     00 12 06 F6 | 	mov	arg01, #0
2086c     8C FC BF FD | 	call	#__system___rxraw
20870     FD 1E 02 F6 | 	mov	local01, result1
20874     FF FF 7F FF 
20878     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
2087c     E8 FF 9F AD |  if_e	jmp	#LR__2830
20880     0D 1E 0E F2 | 	cmp	local01, #13 wz
20884     14 00 90 5D |  if_ne	jmp	#LR__2831
20888     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2088c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20890     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20894     02 FA CD F7 | 	test	result1, #2 wz
20898     0A 1E 06 56 |  if_ne	mov	local01, #10
2089c                 | LR__2831
2089c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
208a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
208a4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
208a8     01 12 CE F7 | 	test	arg01, #1 wz
208ac     1C 00 90 AD |  if_e	jmp	#LR__2834
208b0     7F 1E 0E F2 | 	cmp	local01, #127 wz
208b4     0C 00 90 5D |  if_ne	jmp	#LR__2832
208b8     08 12 06 F6 | 	mov	arg01, #8
208bc     60 FF BF FD | 	call	#__system___tx
208c0     08 00 90 FD | 	jmp	#LR__2833
208c4                 | LR__2832
208c4     0F 13 02 F6 | 	mov	arg01, local01
208c8     54 FF BF FD | 	call	#__system___tx
208cc                 | LR__2833
208cc                 | LR__2834
208cc     0F FB 01 F6 | 	mov	result1, local01
208d0     A7 F0 03 F6 | 	mov	ptra, fp
208d4     B2 00 A0 FD | 	call	#popregs_
208d8                 | __system___rx_ret
208d8     2D 00 64 FD | 	ret
208dc                 | 
208dc                 | __system___pinwrite
208dc     09 01 02 F6 | 	mov	_var01, arg01
208e0     1F 00 06 F5 | 	and	_var01, #31
208e4     20 12 CE F7 | 	test	arg01, #32 wz
208e8     06 12 46 F0 | 	shr	arg01, #6
208ec     09 13 CA F9 | 	bmask	arg01, arg01
208f0     00 13 62 F0 | 	shl	arg01, _var01
208f4     00 15 62 F0 | 	shl	arg02, _var01
208f8     1C 00 90 AD |  if_e	jmp	#LR__2840
208fc     09 F7 43 F5 | 	or	dirb, arg01
20900     FD 01 02 F6 | 	mov	_var01, outb
20904     09 01 22 F5 | 	andn	_var01, arg01
20908     09 15 02 F5 | 	and	arg02, arg01
2090c     0A 01 42 F5 | 	or	_var01, arg02
20910     00 FB 03 F6 | 	mov	outb, _var01
20914     18 00 90 FD | 	jmp	#LR__2841
20918                 | LR__2840
20918     09 F5 43 F5 | 	or	dira, arg01
2091c     FC 01 02 F6 | 	mov	_var01, outa
20920     09 01 22 F5 | 	andn	_var01, arg01
20924     09 15 02 F5 | 	and	arg02, arg01
20928     0A 01 42 F5 | 	or	_var01, arg02
2092c     00 F9 03 F6 | 	mov	outa, _var01
20930                 | LR__2841
20930                 | __system___pinwrite_ret
20930     2D 00 64 FD | 	ret
20934                 | 
20934                 | __system___basic_read_line
20934     06 4A 05 F6 | 	mov	COUNT_, #6
20938     A8 00 A0 FD | 	call	#pushregs_
2093c     09 1F 02 F6 | 	mov	local01, arg01
20940     00 20 06 F6 | 	mov	local02, #0
20944     18 22 06 F6 | 	mov	local03, #24
20948     00 24 06 F6 | 	mov	local04, #0
2094c     18 12 06 F6 | 	mov	arg01, #24
20950     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20954     FD 26 0A F6 | 	mov	local05, result1 wz
20958     13 FB 01 A6 |  if_e	mov	result1, local05
2095c     B0 00 90 AD |  if_e	jmp	#LR__2853
20960                 | LR__2850
20960     0F 13 02 F6 | 	mov	arg01, local01
20964     78 0B B0 FD | 	call	#__system___basic_get_char
20968     FD 28 02 F6 | 	mov	local06, result1
2096c     01 28 56 F2 | 	cmps	local06, #1 wc
20970     8C 00 90 CD |  if_b	jmp	#LR__2852
20974     0A 28 0E F2 | 	cmp	local06, #10 wz
20978     10 00 90 5D |  if_ne	jmp	#LR__2851
2097c     00 24 0E F2 | 	cmp	local04, #0 wz
20980     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20984     01 20 86 11 |  if_a	sub	local02, #1
20988     74 00 90 FD | 	jmp	#LR__2852
2098c                 | LR__2851
2098c     0D 28 0E F2 | 	cmp	local06, #13 wz
20990     01 24 06 A6 |  if_e	mov	local04, #1
20994     00 24 06 56 |  if_ne	mov	local04, #0
20998     08 28 0E F2 | 	cmp	local06, #8 wz
2099c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
209a0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
209a4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
209a8     B4 FF 9F AD |  if_e	jmp	#LR__2850
209ac     13 17 02 F6 | 	mov	arg03, local05
209b0     10 17 02 F1 | 	add	arg03, local02
209b4     0B 29 42 FC | 	wrbyte	local06, arg03
209b8     01 20 06 F1 | 	add	local02, #1
209bc     11 21 0A F2 | 	cmp	local02, local03 wz
209c0     9C FF 9F 5D |  if_ne	jmp	#LR__2850
209c4     11 13 02 F6 | 	mov	arg01, local03
209c8     20 12 06 F1 | 	add	arg01, #32
209cc     10 3C B0 FD | 	call	#__system___gc_alloc_managed
209d0     FD 28 0A F6 | 	mov	local06, result1 wz
209d4     14 FB 01 A6 |  if_e	mov	result1, local06
209d8     34 00 90 AD |  if_e	jmp	#LR__2853
209dc     14 13 02 F6 | 	mov	arg01, local06
209e0     13 15 02 F6 | 	mov	arg02, local05
209e4     11 17 02 F6 | 	mov	arg03, local03
209e8     5C FC BF FD | 	call	#__system____builtin_memmove
209ec     20 22 06 F1 | 	add	local03, #32
209f0     13 13 02 F6 | 	mov	arg01, local05
209f4     24 3D B0 FD | 	call	#__system___gc_free
209f8     14 27 02 F6 | 	mov	local05, local06
209fc     60 FF 9F FD | 	jmp	#LR__2850
20a00                 | LR__2852
20a00     13 29 02 F6 | 	mov	local06, local05
20a04     10 29 02 F1 | 	add	local06, local02
20a08     14 01 48 FC | 	wrbyte	#0, local06
20a0c     13 FB 01 F6 | 	mov	result1, local05
20a10                 | LR__2853
20a10     A7 F0 03 F6 | 	mov	ptra, fp
20a14     B2 00 A0 FD | 	call	#popregs_
20a18                 | __system___basic_read_line_ret
20a18     2D 00 64 FD | 	ret
20a1c                 | 
20a1c                 | __system___waitms
20a1c     09 01 02 F6 | 	mov	_var01, arg01
20a20     1A 02 62 FD | 	getct	_var02
20a24     14 04 06 FB | 	rdlong	_var03, #20
20a28     97 14 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
20a2c                 | LR__2860
20a2c     01 00 00 FF 
20a30     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20a34     1C 00 90 CD |  if_b	jmp	#LR__2862
20a38     02 03 02 F1 | 	add	_var02, _var03
20a3c     01 13 02 F6 | 	mov	arg01, _var02
20a40     00 12 66 FA | 	addct1	arg01, #0
20a44     24 22 60 FD | 	waitct1
20a48     01 00 00 FF 
20a4c     E8 01 86 F1 | 	sub	_var01, ##1000
20a50     D8 FF 9F FD | 	jmp	#LR__2860
20a54                 | LR__2861
20a54                 | LR__2862
20a54     01 00 56 F2 | 	cmps	_var01, #1 wc
20a58     28 00 90 CD |  if_b	jmp	#LR__2863
20a5c     02 01 02 FD | 	qmul	_var01, _var03
20a60     01 00 00 FF 
20a64     E8 17 06 F6 | 	mov	arg03, ##1000
20a68     19 FA 61 FD | 	getqy	result1
20a6c     18 12 62 FD | 	getqx	arg01
20a70     28 FA 61 FD | 	setq	result1
20a74     0B 13 12 FD | 	qdiv	arg01, arg03
20a78     18 12 62 FD | 	getqx	arg01
20a7c     01 13 62 FA | 	addct1	arg01, _var02
20a80     24 22 60 FD | 	waitct1
20a84                 | LR__2863
20a84                 | __system___waitms_ret
20a84     2D 00 64 FD | 	ret
20a88                 | 
20a88                 | __system___waitus
20a88     09 01 02 F6 | 	mov	_var01, arg01
20a8c     1A 02 62 FD | 	getct	_var02
20a90     14 04 06 FB | 	rdlong	_var03, #20
20a94     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20a98                 | LR__2870
20a98     A1 07 00 FF 
20a9c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20aa0     1C 00 90 CD |  if_b	jmp	#LR__2872
20aa4     02 03 02 F1 | 	add	_var02, _var03
20aa8     01 13 02 F6 | 	mov	arg01, _var02
20aac     00 12 66 FA | 	addct1	arg01, #0
20ab0     24 22 60 FD | 	waitct1
20ab4     A1 07 00 FF 
20ab8     40 00 86 F1 | 	sub	_var01, ##1000000
20abc     D8 FF 9F FD | 	jmp	#LR__2870
20ac0                 | LR__2871
20ac0                 | LR__2872
20ac0     01 00 56 F2 | 	cmps	_var01, #1 wc
20ac4     28 00 90 CD |  if_b	jmp	#LR__2873
20ac8     02 01 02 FD | 	qmul	_var01, _var03
20acc     A1 07 00 FF 
20ad0     40 16 06 F6 | 	mov	arg03, ##1000000
20ad4     19 FA 61 FD | 	getqy	result1
20ad8     18 12 62 FD | 	getqx	arg01
20adc     28 FA 61 FD | 	setq	result1
20ae0     0B 13 12 FD | 	qdiv	arg01, arg03
20ae4     18 FA 61 FD | 	getqx	result1
20ae8     FD 02 62 FA | 	addct1	_var02, result1
20aec     24 22 60 FD | 	waitct1
20af0                 | LR__2873
20af0                 | __system___waitus_ret
20af0     2D 00 64 FD | 	ret
20af4                 | 
20af4                 | __system___mount
20af4     0B 4A 05 F6 | 	mov	COUNT_, #11
20af8     A8 00 A0 FD | 	call	#pushregs_
20afc     09 1F 02 F6 | 	mov	local01, arg01
20b00     0A 21 0A F6 | 	mov	local02, arg02 wz
20b04     01 22 66 F6 | 	neg	local03, #1
20b08     01 FA 65 A6 |  if_e	neg	result1, #1
20b0c     98 02 90 AD |  if_e	jmp	#LR__2895
20b10     0F FB C1 FA | 	rdbyte	result1, local01
20b14     2F FA 0D F2 | 	cmp	result1, #47 wz
20b18     28 00 90 5D |  if_ne	jmp	#LR__2882
20b1c     0F 13 02 F6 | 	mov	arg01, local01
20b20     09 25 02 F6 | 	mov	local04, arg01
20b24     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20b28                 | LR__2880
20b28     12 FB C9 FA | 	rdbyte	result1, local04 wz
20b2c     01 24 06 51 |  if_ne	add	local04, #1
20b30     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20b34                 | LR__2881
20b34     09 25 82 F1 | 	sub	local04, arg01
20b38     12 FB 01 F6 | 	mov	result1, local04
20b3c     10 FA 55 F2 | 	cmps	result1, #16 wc
20b40     14 00 90 CD |  if_b	jmp	#LR__2883
20b44                 | LR__2882
20b44     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20b48     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20b4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20b50     01 FA 65 F6 | 	neg	result1, #1
20b54     50 02 90 FD | 	jmp	#LR__2895
20b58                 | LR__2883
20b58     00 26 06 F6 | 	mov	local05, #0
20b5c                 | LR__2884
20b5c     04 26 56 F2 | 	cmps	local05, #4 wc
20b60     B0 00 90 3D |  if_ae	jmp	#LR__2889
20b64     13 13 02 F6 | 	mov	arg01, local05
20b68     02 12 66 F0 | 	shl	arg01, #2
20b6c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20b70     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20b74     09 FB 09 FB | 	rdlong	result1, arg01 wz
20b78     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20b7c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20b80     13 23 02 86 |  if_c_and_z	mov	local03, local05
20b84     84 00 90 8D |  if_c_and_z	jmp	#LR__2888
20b88     13 13 02 F6 | 	mov	arg01, local05
20b8c     02 12 66 F0 | 	shl	arg01, #2
20b90     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20b94     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20b98     09 13 02 FB | 	rdlong	arg01, arg01
20b9c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ba0     09 25 02 F6 | 	mov	local04, arg01
20ba4     97 06 48 FB | 	callpa	#(@LR__2886-@LR__2885)>>2,fcache_load_ptr_
20ba8                 | LR__2885
20ba8     12 FB C9 FA | 	rdbyte	result1, local04 wz
20bac     01 24 06 51 |  if_ne	add	local04, #1
20bb0     F4 FF 9F 5D |  if_ne	jmp	#LR__2885
20bb4                 | LR__2886
20bb4     09 25 82 F1 | 	sub	local04, arg01
20bb8     12 29 02 F6 | 	mov	local06, local04
20bbc     14 13 02 F6 | 	mov	arg01, local06
20bc0     0F 13 02 F1 | 	add	arg01, local01
20bc4     09 FB C1 FA | 	rdbyte	result1, arg01
20bc8     2F FA 0D F2 | 	cmp	result1, #47 wz
20bcc     14 2B 02 56 |  if_ne	mov	local07, local06
20bd0     0F 2B 02 51 |  if_ne	add	local07, local01
20bd4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20bd8     30 00 90 5D |  if_ne	jmp	#LR__2887
20bdc     13 17 02 F6 | 	mov	arg03, local05
20be0     02 16 66 F0 | 	shl	arg03, #2
20be4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20be8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20bec     0B 15 02 FB | 	rdlong	arg02, arg03
20bf0     0F 13 02 F6 | 	mov	arg01, local01
20bf4     14 17 02 F6 | 	mov	arg03, local06
20bf8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20bfc     60 4E B0 FD | 	call	#__system__strncmp
20c00     00 FA 0D F2 | 	cmp	result1, #0 wz
20c04     13 23 02 A6 |  if_e	mov	local03, local05
20c08     08 00 90 AD |  if_e	jmp	#LR__2889
20c0c                 | LR__2887
20c0c                 | LR__2888
20c0c     01 26 06 F1 | 	add	local05, #1
20c10     48 FF 9F FD | 	jmp	#LR__2884
20c14                 | LR__2889
20c14     FF FF 7F FF 
20c18     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20c1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20c20     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20c24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20c28     01 FA 65 A6 |  if_e	neg	result1, #1
20c2c     78 01 90 AD |  if_e	jmp	#LR__2895
20c30     11 27 02 F6 | 	mov	local05, local03
20c34     13 2B 02 F6 | 	mov	local07, local05
20c38     02 2A 66 F0 | 	shl	local07, #2
20c3c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20c40     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20c44     15 29 0A FB | 	rdlong	local06, local07 wz
20c48     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20c4c     58 00 90 AD |  if_e	jmp	#LR__2890
20c50     4C 28 06 F1 | 	add	local06, #76
20c54     14 2B 0A FB | 	rdlong	local07, local06 wz
20c58     4C 28 86 F1 | 	sub	local06, #76
20c5c     48 00 90 AD |  if_e	jmp	#LR__2890
20c60     4C 28 06 F1 | 	add	local06, #76
20c64     14 2B 02 FB | 	rdlong	local07, local06
20c68     15 23 02 F6 | 	mov	local03, local07
20c6c     13 2A 46 F7 | 	zerox	local07, #19
20c70     14 22 46 F0 | 	shr	local03, #20
20c74     02 22 66 F0 | 	shl	local03, #2
20c78     ED 22 02 F1 | 	add	local03, __methods__
20c7c     11 23 02 FB | 	rdlong	local03, local03
20c80     13 29 02 F6 | 	mov	local06, local05
20c84     02 28 66 F0 | 	shl	local06, #2
20c88     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20c8c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20c90     14 13 02 FB | 	rdlong	arg01, local06
20c94     F2 28 02 F6 | 	mov	local06, objptr
20c98     15 E5 01 F6 | 	mov	objptr, local07
20c9c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ca0     2D 22 62 FD | 	call	local03
20ca4     14 E5 01 F6 | 	mov	objptr, local06
20ca8                 | LR__2890
20ca8     13 2D 02 F6 | 	mov	local08, local05
20cac     02 2C 66 F0 | 	shl	local08, #2
20cb0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20cb4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20cb8     16 21 62 FC | 	wrlong	local02, local08
20cbc     00 20 0E F2 | 	cmp	local02, #0 wz
20cc0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20cc4     18 00 90 5D |  if_ne	jmp	#LR__2891
20cc8     02 26 66 F0 | 	shl	local05, #2
20ccc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20cd0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20cd4     13 01 68 FC | 	wrlong	#0, local05
20cd8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20cdc     C4 00 90 FD | 	jmp	#LR__2894
20ce0                 | LR__2891
20ce0     13 2F 02 F6 | 	mov	local09, local05
20ce4     04 2E 66 F0 | 	shl	local09, #4
20ce8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20cec     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20cf0     17 13 02 F6 | 	mov	arg01, local09
20cf4     0F 15 02 F6 | 	mov	arg02, local01
20cf8     10 16 06 F6 | 	mov	arg03, #16
20cfc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20d00     B0 4C B0 FD | 	call	#__system__strncpy
20d04     48 20 06 F1 | 	add	local02, #72
20d08     10 2D 0A FB | 	rdlong	local08, local02 wz
20d0c     48 20 86 F1 | 	sub	local02, #72
20d10     7C 00 90 AD |  if_e	jmp	#LR__2893
20d14     48 20 06 F1 | 	add	local02, #72
20d18     10 2D 02 FB | 	rdlong	local08, local02
20d1c     16 31 02 F6 | 	mov	local10, local08
20d20     13 2C 46 F7 | 	zerox	local08, #19
20d24     14 30 46 F0 | 	shr	local10, #20
20d28     02 30 66 F0 | 	shl	local10, #2
20d2c     ED 30 02 F1 | 	add	local10, __methods__
20d30     18 31 02 FB | 	rdlong	local10, local10
20d34     17 13 02 F6 | 	mov	arg01, local09
20d38     F2 32 02 F6 | 	mov	local11, objptr
20d3c     16 E5 01 F6 | 	mov	objptr, local08
20d40     2D 30 62 FD | 	call	local10
20d44     19 E5 01 F6 | 	mov	objptr, local11
20d48     FD 12 0A F6 | 	mov	arg01, result1 wz
20d4c     40 00 90 AD |  if_e	jmp	#LR__2892
20d50     13 2D 02 F6 | 	mov	local08, local05
20d54     02 2C 66 F0 | 	shl	local08, #2
20d58     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20d5c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20d60     16 01 68 FC | 	wrlong	#0, local08
20d64     02 26 66 F0 | 	shl	local05, #2
20d68     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20d6c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20d70     13 01 68 FC | 	wrlong	#0, local05
20d74     09 13 6A F6 | 	neg	arg01, arg01 wz
20d78     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20d7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20d80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d84     01 FA 65 56 |  if_ne	neg	result1, #1
20d88     00 FA 05 A6 |  if_e	mov	result1, #0
20d8c     18 00 90 FD | 	jmp	#LR__2895
20d90                 | LR__2892
20d90                 | LR__2893
20d90     02 26 66 F0 | 	shl	local05, #2
20d94     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d98     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20d9c     13 2F 62 FC | 	wrlong	local09, local05
20da0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20da4                 | LR__2894
20da4     00 FA 05 F6 | 	mov	result1, #0
20da8                 | LR__2895
20da8     A7 F0 03 F6 | 	mov	ptra, fp
20dac     B2 00 A0 FD | 	call	#popregs_
20db0                 | __system___mount_ret
20db0     2D 00 64 FD | 	ret
20db4                 | 
20db4                 | __system___chdir
20db4     00 4A 05 F6 | 	mov	COUNT_, #0
20db8     A8 00 A0 FD | 	call	#pushregs_
20dbc     40 F0 07 F1 | 	add	ptra, #64
20dc0     04 4E 05 F1 | 	add	fp, #4
20dc4     A7 12 62 FC | 	wrlong	arg01, fp
20dc8     04 4E 05 F1 | 	add	fp, #4
20dcc     A7 14 02 F6 | 	mov	arg02, fp
20dd0     08 4E 85 F1 | 	sub	fp, #8
20dd4     80 48 B0 FD | 	call	#__system__stat
20dd8     3C 4E 05 F1 | 	add	fp, #60
20ddc     A7 FA 61 FC | 	wrlong	result1, fp
20de0     3C 4E 85 F1 | 	sub	fp, #60
20de4     00 FA 0D F2 | 	cmp	result1, #0 wz
20de8     3C 4E 05 51 |  if_ne	add	fp, #60
20dec     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20df0     3C 4E 85 51 |  if_ne	sub	fp, #60
20df4     BC 00 90 5D |  if_ne	jmp	#LR__2902
20df8     10 4E 05 F1 | 	add	fp, #16
20dfc     A7 12 02 FB | 	rdlong	arg01, fp
20e00     10 4E 85 F1 | 	sub	fp, #16
20e04     78 00 00 FF 
20e08     00 12 06 F5 | 	and	arg01, ##61440
20e0c     08 00 00 FF 
20e10     00 12 0E F2 | 	cmp	arg01, ##4096 wz
20e14     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
20e18     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
20e1c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
20e20     01 FA 65 56 |  if_ne	neg	result1, #1
20e24     8C 00 90 5D |  if_ne	jmp	#LR__2902
20e28     04 4E 05 F1 | 	add	fp, #4
20e2c     A7 16 02 FB | 	rdlong	arg03, fp
20e30     04 4E 85 F1 | 	sub	fp, #4
20e34     0B 17 C2 FA | 	rdbyte	arg03, arg03
20e38     2F 16 0E F2 | 	cmp	arg03, #47 wz
20e3c     24 00 90 5D |  if_ne	jmp	#LR__2900
20e40     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20e44     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20e48     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20e4c     04 4E 05 F1 | 	add	fp, #4
20e50     A7 14 02 FB | 	rdlong	arg02, fp
20e54     04 4E 85 F1 | 	sub	fp, #4
20e58     00 17 06 F6 | 	mov	arg03, #256
20e5c     54 4B B0 FD | 	call	#__system__strncpy
20e60     4C 00 90 FD | 	jmp	#LR__2901
20e64                 | LR__2900
20e64     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20e68     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20e6c     38 4E 05 F1 | 	add	fp, #56
20e70     A7 12 62 FC | 	wrlong	arg01, fp
20e74     38 4E 85 F1 | 	sub	fp, #56
20e78     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
20e7c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
20e80     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20e84     00 17 06 F6 | 	mov	arg03, #256
20e88     28 4B B0 FD | 	call	#__system__strncpy
20e8c     38 4E 05 F1 | 	add	fp, #56
20e90     A7 12 02 FB | 	rdlong	arg01, fp
20e94     34 4E 85 F1 | 	sub	fp, #52
20e98     A7 14 02 FB | 	rdlong	arg02, fp
20e9c     04 4E 85 F1 | 	sub	fp, #4
20ea0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20ea4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
20ea8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20eac     10 00 B0 FD | 	call	#__system____getvfsforfile
20eb0                 | LR__2901
20eb0     00 FA 05 F6 | 	mov	result1, #0
20eb4                 | LR__2902
20eb4     A7 F0 03 F6 | 	mov	ptra, fp
20eb8     B2 00 A0 FD | 	call	#popregs_
20ebc                 | __system___chdir_ret
20ebc     2D 00 64 FD | 	ret
20ec0                 | 
20ec0                 | __system____getvfsforfile
20ec0     0E 4A 05 F6 | 	mov	COUNT_, #14
20ec4     A8 00 A0 FD | 	call	#pushregs_
20ec8     09 1F 02 F6 | 	mov	local01, arg01
20ecc     0A 21 02 F6 | 	mov	local02, arg02
20ed0     0B 23 02 F6 | 	mov	local03, arg03
20ed4     97 10 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20ed8                 | LR__2910
20ed8     10 FB C1 FA | 	rdbyte	result1, local02
20edc     2F FA 0D F2 | 	cmp	result1, #47 wz
20ee0     01 20 06 A1 |  if_e	add	local02, #1
20ee4     10 25 C2 AA |  if_e	rdbyte	local04, local02
20ee8     01 20 86 A1 |  if_e	sub	local02, #1
20eec     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
20ef0     01 20 06 A1 |  if_e	add	local02, #1
20ef4     E0 FF 9F AD |  if_e	jmp	#LR__2910
20ef8                 | LR__2911
20ef8     10 25 C2 FA | 	rdbyte	local04, local02
20efc     2F 24 0E F2 | 	cmp	local04, #47 wz
20f00     14 00 90 5D |  if_ne	jmp	#LR__2912
20f04     0F 13 02 F6 | 	mov	arg01, local01
20f08     10 15 02 F6 | 	mov	arg02, local02
20f0c     00 17 06 F6 | 	mov	arg03, #256
20f10     A0 4A B0 FD | 	call	#__system__strncpy
20f14     7C 00 90 FD | 	jmp	#LR__2914
20f18                 | LR__2912
20f18     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20f1c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
20f20     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20f24     0F 13 02 F6 | 	mov	arg01, local01
20f28     00 17 06 F6 | 	mov	arg03, #256
20f2c     84 4A B0 FD | 	call	#__system__strncpy
20f30     10 25 CA FA | 	rdbyte	local04, local02 wz
20f34     5C 00 90 AD |  if_e	jmp	#LR__2913
20f38     10 25 C2 FA | 	rdbyte	local04, local02
20f3c     2E 24 0E F2 | 	cmp	local04, #46 wz
20f40     01 20 06 A1 |  if_e	add	local02, #1
20f44     10 27 C2 AA |  if_e	rdbyte	local05, local02
20f48     01 20 86 A1 |  if_e	sub	local02, #1
20f4c     13 29 02 A6 |  if_e	mov	local06, local05
20f50     07 28 4E A7 |  if_e	zerox	local06, #7 wz
20f54     3C 00 90 AD |  if_e	jmp	#LR__2913
20f58     0F 27 C2 FA | 	rdbyte	local05, local01
20f5c     2F 26 0E F2 | 	cmp	local05, #47 wz
20f60     01 1E 06 A1 |  if_e	add	local01, #1
20f64     0F 25 C2 AA |  if_e	rdbyte	local04, local01
20f68     01 1E 86 A1 |  if_e	sub	local01, #1
20f6c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
20f70     7F 01 00 5F 
20f74     4C 15 06 56 |  if_ne	mov	arg02, ##@LR__5000
20f78     0F 13 02 56 |  if_ne	mov	arg01, local01
20f7c     00 17 06 56 |  if_ne	mov	arg03, #256
20f80     7C 4A B0 5D |  if_ne	call	#__system__strncat
20f84     0F 13 02 F6 | 	mov	arg01, local01
20f88     10 15 02 F6 | 	mov	arg02, local02
20f8c     00 17 06 F6 | 	mov	arg03, #256
20f90     6C 4A B0 FD | 	call	#__system__strncat
20f94                 | LR__2913
20f94                 | LR__2914
20f94     0F 13 02 F6 | 	mov	arg01, local01
20f98     24 4C B0 FD | 	call	#__system___normalizeName
20f9c     0F 25 CA FA | 	rdbyte	local04, local01 wz
20fa0     1C 00 90 AD |  if_e	jmp	#LR__2915
20fa4     0F 25 C2 FA | 	rdbyte	local04, local01
20fa8     2F 24 0E F2 | 	cmp	local04, #47 wz
20fac     01 1E 06 A1 |  if_e	add	local01, #1
20fb0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
20fb4     01 1E 86 A1 |  if_e	sub	local01, #1
20fb8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
20fbc     18 00 90 5D |  if_ne	jmp	#LR__2916
20fc0                 | LR__2915
20fc0     01 00 00 FF 
20fc4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
20fc8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
20fcc     01 00 00 FF 
20fd0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
20fd4     EC 01 90 FD | 	jmp	#LR__2930
20fd8                 | LR__2916
20fd8     00 2A 06 F6 | 	mov	local07, #0
20fdc                 | LR__2917
20fdc     04 2A 56 F2 | 	cmps	local07, #4 wc
20fe0     CC 01 90 3D |  if_ae	jmp	#LR__2929
20fe4     15 29 02 F6 | 	mov	local06, local07
20fe8     02 28 66 F0 | 	shl	local06, #2
20fec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ff0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20ff4     14 29 0A FB | 	rdlong	local06, local06 wz
20ff8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ffc     A8 01 90 AD |  if_e	jmp	#LR__2928
21000     15 25 02 F6 | 	mov	local04, local07
21004     02 24 66 F0 | 	shl	local04, #2
21008     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2100c     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21010     12 13 02 FB | 	rdlong	arg01, local04
21014     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21018     09 2D 02 F6 | 	mov	local08, arg01
2101c     97 06 48 FB | 	callpa	#(@LR__2919-@LR__2918)>>2,fcache_load_ptr_
21020                 | LR__2918
21020     16 FB C9 FA | 	rdbyte	result1, local08 wz
21024     01 2C 06 51 |  if_ne	add	local08, #1
21028     F4 FF 9F 5D |  if_ne	jmp	#LR__2918
2102c                 | LR__2919
2102c     09 2D 82 F1 | 	sub	local08, arg01
21030     16 2F 02 F6 | 	mov	local09, local08
21034     17 25 02 F6 | 	mov	local04, local09
21038     0F 25 02 F1 | 	add	local04, local01
2103c     12 29 C2 FA | 	rdbyte	local06, local04
21040     2F 28 0E F2 | 	cmp	local06, #47 wz
21044     17 31 02 56 |  if_ne	mov	local10, local09
21048     0F 31 02 51 |  if_ne	add	local10, local01
2104c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21050     54 01 90 5D |  if_ne	jmp	#LR__2927
21054     15 17 02 F6 | 	mov	arg03, local07
21058     02 16 66 F0 | 	shl	arg03, #2
2105c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21060     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21064     0B 15 02 FB | 	rdlong	arg02, arg03
21068     17 17 02 F6 | 	mov	arg03, local09
2106c     0F 13 02 F6 | 	mov	arg01, local01
21070     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21074     E8 49 B0 FD | 	call	#__system__strncmp
21078     00 FA 4D F2 | 	cmps	result1, #0 wz
2107c     28 01 90 5D |  if_ne	jmp	#LR__2927
21080     15 33 02 F6 | 	mov	local11, local07
21084     02 32 66 F0 | 	shl	local11, #2
21088     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2108c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21090     19 35 02 FB | 	rdlong	local12, local11
21094     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21098     97 22 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
2109c                 | LR__2920
2109c     17 29 02 F6 | 	mov	local06, local09
210a0     01 28 06 F1 | 	add	local06, #1
210a4     0F 29 02 F1 | 	add	local06, local01
210a8     14 33 C2 FA | 	rdbyte	local11, local06
210ac     2E 32 0E F2 | 	cmp	local11, #46 wz
210b0     2C 00 90 5D |  if_ne	jmp	#LR__2922
210b4     17 33 02 F6 | 	mov	local11, local09
210b8     02 32 06 F1 | 	add	local11, #2
210bc     0F 33 02 F1 | 	add	local11, local01
210c0     19 31 C2 FA | 	rdbyte	local10, local11
210c4     2F 30 0E F2 | 	cmp	local10, #47 wz
210c8     17 37 02 56 |  if_ne	mov	local13, local09
210cc     02 36 06 51 |  if_ne	add	local13, #2
210d0     0F 37 02 51 |  if_ne	add	local13, local01
210d4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
210d8     01 2E 06 A1 |  if_e	add	local09, #1
210dc     BC FF 9F AD |  if_e	jmp	#LR__2920
210e0                 | LR__2921
210e0                 | LR__2922
210e0     00 22 0E F2 | 	cmp	local03, #0 wz
210e4     11 13 02 56 |  if_ne	mov	arg01, local03
210e8     0F 15 02 56 |  if_ne	mov	arg02, local01
210ec     00 17 06 56 |  if_ne	mov	arg03, #256
210f0     C0 48 B0 5D |  if_ne	call	#__system__strncpy
210f4     0F 15 02 F6 | 	mov	arg02, local01
210f8     17 15 02 F1 | 	add	arg02, local09
210fc     01 14 06 F1 | 	add	arg02, #1
21100     0F 13 02 F6 | 	mov	arg01, local01
21104     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21108     0F 13 02 F6 | 	mov	arg01, local01
2110c     09 2D 02 F6 | 	mov	local08, arg01
21110     97 06 48 FB | 	callpa	#(@LR__2924-@LR__2923)>>2,fcache_load_ptr_
21114                 | LR__2923
21114     16 FB C9 FA | 	rdbyte	result1, local08 wz
21118     01 2C 06 51 |  if_ne	add	local08, #1
2111c     F4 FF 9F 5D |  if_ne	jmp	#LR__2923
21120                 | LR__2924
21120     09 2D 82 F1 | 	sub	local08, arg01
21124     16 2F 02 F6 | 	mov	local09, local08
21128                 | LR__2925
21128     01 2E 56 F2 | 	cmps	local09, #1 wc
2112c     70 00 90 CD |  if_b	jmp	#LR__2926
21130     17 25 02 F6 | 	mov	local04, local09
21134     0F 25 02 F1 | 	add	local04, local01
21138     12 33 C2 FA | 	rdbyte	local11, local04
2113c     2F 32 0E F2 | 	cmp	local11, #47 wz
21140     17 33 02 A6 |  if_e	mov	local11, local09
21144     0F 33 02 A1 |  if_e	add	local11, local01
21148     19 01 48 AC |  if_e	wrbyte	#0, local11
2114c     01 2E 86 A1 |  if_e	sub	local09, #1
21150     D4 FF 9F AD |  if_e	jmp	#LR__2925
21154     17 25 02 F6 | 	mov	local04, local09
21158     0F 25 02 F1 | 	add	local04, local01
2115c     12 33 C2 FA | 	rdbyte	local11, local04
21160     2E 32 0E F2 | 	cmp	local11, #46 wz
21164     38 00 90 5D |  if_ne	jmp	#LR__2926
21168     02 2E 56 F2 | 	cmps	local09, #2 wc
2116c     30 00 90 CD |  if_b	jmp	#LR__2926
21170     17 39 02 F6 | 	mov	local14, local09
21174     01 38 86 F1 | 	sub	local14, #1
21178     0F 39 02 F1 | 	add	local14, local01
2117c     1C 27 C2 FA | 	rdbyte	local05, local14
21180     2F 26 0E F2 | 	cmp	local05, #47 wz
21184     18 00 90 5D |  if_ne	jmp	#LR__2926
21188     17 25 02 F6 | 	mov	local04, local09
2118c     01 24 86 F1 | 	sub	local04, #1
21190     0F 25 02 F1 | 	add	local04, local01
21194     12 01 48 FC | 	wrbyte	#0, local04
21198     02 2E 86 F1 | 	sub	local09, #2
2119c     88 FF 9F FD | 	jmp	#LR__2925
211a0                 | LR__2926
211a0     1A FB 01 F6 | 	mov	result1, local12
211a4     1C 00 90 FD | 	jmp	#LR__2930
211a8                 | LR__2927
211a8                 | LR__2928
211a8     01 2A 06 F1 | 	add	local07, #1
211ac     2C FE 9F FD | 	jmp	#LR__2917
211b0                 | LR__2929
211b0     03 00 00 FF 
211b4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
211b8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
211bc     03 00 00 FF 
211c0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
211c4                 | LR__2930
211c4     A7 F0 03 F6 | 	mov	ptra, fp
211c8     B2 00 A0 FD | 	call	#popregs_
211cc                 | __system____getvfsforfile_ret
211cc     2D 00 64 FD | 	ret
211d0                 | 
211d0                 | __system___basic_open
211d0     05 4A 05 F6 | 	mov	COUNT_, #5
211d4     A8 00 A0 FD | 	call	#pushregs_
211d8     0A 1F 02 F6 | 	mov	local01, arg02
211dc     0B 21 02 F6 | 	mov	local02, arg03
211e0     0C 23 02 F6 | 	mov	local03, arg04
211e4     00 24 06 F6 | 	mov	local04, #0
211e8     A0 47 B0 FD | 	call	#__system____getftab
211ec     FD 26 0A F6 | 	mov	local05, result1 wz
211f0     18 00 90 5D |  if_ne	jmp	#LR__2940
211f4     EE 12 02 F6 | 	mov	arg01, abortchain
211f8     0C 14 06 F6 | 	mov	arg02, #12
211fc     01 16 06 F6 | 	mov	arg03, #1
21200     DA 00 A0 FD | 	call	#__longjmp
21204     01 FA 65 F6 | 	neg	result1, #1
21208     14 01 90 FD | 	jmp	#LR__2949
2120c                 | LR__2940
2120c     08 26 06 F1 | 	add	local05, #8
21210     13 FB 09 FB | 	rdlong	result1, local05 wz
21214     08 26 86 F1 | 	sub	local05, #8
21218     13 13 02 56 |  if_ne	mov	arg01, local05
2121c     C0 3E B0 5D |  if_ne	call	#__system___closeraw
21220     00 1E 0E F2 | 	cmp	local01, #0 wz
21224     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21228     00 22 0E A2 |  if_e	cmp	local03, #0 wz
2122c     3C 00 90 AD |  if_e	jmp	#LR__2942
21230     0C 12 06 F6 | 	mov	arg01, #12
21234     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
21238     FD 24 0A F6 | 	mov	local04, result1 wz
2123c     18 00 90 5D |  if_ne	jmp	#LR__2941
21240     EE 12 02 F6 | 	mov	arg01, abortchain
21244     07 14 06 F6 | 	mov	arg02, #7
21248     01 16 06 F6 | 	mov	arg03, #1
2124c     DA 00 A0 FD | 	call	#__longjmp
21250     01 FA 65 F6 | 	neg	result1, #1
21254     C8 00 90 FD | 	jmp	#LR__2949
21258                 | LR__2941
21258     12 01 68 FC | 	wrlong	#0, local04
2125c     04 24 06 F1 | 	add	local04, #4
21260     12 01 68 FC | 	wrlong	#0, local04
21264     04 24 86 F1 | 	sub	local04, #4
21268     13 25 62 FC | 	wrlong	local04, local05
2126c                 | LR__2942
2126c     00 1E 0E F2 | 	cmp	local01, #0 wz
21270     20 00 90 AD |  if_e	jmp	#LR__2943
21274     12 1F 62 FC | 	wrlong	local01, local04
21278     12 FB 01 F6 | 	mov	result1, local04
2127c     00 80 04 FF 
21280     00 FA 45 F5 | 	or	result1, ##150994944
21284     1C 26 06 F1 | 	add	local05, #28
21288     13 FB 61 FC | 	wrlong	result1, local05
2128c     1C 26 86 F1 | 	sub	local05, #28
21290     0C 00 90 FD | 	jmp	#LR__2944
21294                 | LR__2943
21294     1C 26 06 F1 | 	add	local05, #28
21298     13 01 68 FC | 	wrlong	#0, local05
2129c     1C 26 86 F1 | 	sub	local05, #28
212a0                 | LR__2944
212a0     00 20 0E F2 | 	cmp	local02, #0 wz
212a4     28 00 90 AD |  if_e	jmp	#LR__2945
212a8     04 24 06 F1 | 	add	local04, #4
212ac     12 21 62 FC | 	wrlong	local02, local04
212b0     04 24 86 F1 | 	sub	local04, #4
212b4     12 FB 01 F6 | 	mov	result1, local04
212b8     00 88 04 FF 
212bc     00 FA 45 F5 | 	or	result1, ##152043520
212c0     20 26 06 F1 | 	add	local05, #32
212c4     13 FB 61 FC | 	wrlong	result1, local05
212c8     20 26 86 F1 | 	sub	local05, #32
212cc     0C 00 90 FD | 	jmp	#LR__2946
212d0                 | LR__2945
212d0     20 26 06 F1 | 	add	local05, #32
212d4     13 01 68 FC | 	wrlong	#0, local05
212d8     20 26 86 F1 | 	sub	local05, #32
212dc                 | LR__2946
212dc     00 22 0E F2 | 	cmp	local03, #0 wz
212e0     24 00 90 AD |  if_e	jmp	#LR__2947
212e4     08 24 06 F1 | 	add	local04, #8
212e8     12 23 62 FC | 	wrlong	local03, local04
212ec     08 24 86 F1 | 	sub	local04, #8
212f0     00 90 04 FF 
212f4     00 24 46 F5 | 	or	local04, ##153092096
212f8     24 26 06 F1 | 	add	local05, #36
212fc     13 25 62 FC | 	wrlong	local04, local05
21300     24 26 86 F1 | 	sub	local05, #36
21304     0C 00 90 FD | 	jmp	#LR__2948
21308                 | LR__2947
21308     24 26 06 F1 | 	add	local05, #36
2130c     13 01 68 FC | 	wrlong	#0, local05
21310     24 26 86 F1 | 	sub	local05, #36
21314                 | LR__2948
21314     08 26 06 F1 | 	add	local05, #8
21318     13 0F 68 FC | 	wrlong	#7, local05
2131c     00 FA 05 F6 | 	mov	result1, #0
21320                 | LR__2949
21320     A7 F0 03 F6 | 	mov	ptra, fp
21324     B2 00 A0 FD | 	call	#popregs_
21328                 | __system___basic_open_ret
21328     2D 00 64 FD | 	ret
2132c                 | 
2132c                 | __system___basic_open_string
2132c     04 4A 05 F6 | 	mov	COUNT_, #4
21330     A8 00 A0 FD | 	call	#pushregs_
21334     0A 1F 02 F6 | 	mov	local01, arg02
21338     0B 21 02 F6 | 	mov	local02, arg03
2133c     4C 46 B0 FD | 	call	#__system____getftab
21340     FD 22 0A F6 | 	mov	local03, result1 wz
21344     18 00 90 5D |  if_ne	jmp	#LR__2950
21348     EE 12 02 F6 | 	mov	arg01, abortchain
2134c     0C 14 06 F6 | 	mov	arg02, #12
21350     01 16 06 F6 | 	mov	arg03, #1
21354     DA 00 A0 FD | 	call	#__longjmp
21358     01 FA 65 F6 | 	neg	result1, #1
2135c     58 00 90 FD | 	jmp	#LR__2952
21360                 | LR__2950
21360     08 22 06 F1 | 	add	local03, #8
21364     11 19 0A FB | 	rdlong	arg04, local03 wz
21368     08 22 86 F1 | 	sub	local03, #8
2136c     11 13 02 56 |  if_ne	mov	arg01, local03
21370     6C 3D B0 5D |  if_ne	call	#__system___closeraw
21374     0F 15 02 F6 | 	mov	arg02, local01
21378     10 17 02 F6 | 	mov	arg03, local02
2137c     11 13 02 F6 | 	mov	arg01, local03
21380     B6 19 06 F6 | 	mov	arg04, #438
21384     54 3A B0 FD | 	call	#__system___openraw
21388     FD 24 02 F6 | 	mov	local04, result1
2138c     00 24 56 F2 | 	cmps	local04, #0 wc
21390     20 00 90 3D |  if_ae	jmp	#LR__2951
21394     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21398     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2139c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
213a0     EE 12 02 F6 | 	mov	arg01, abortchain
213a4     01 16 06 F6 | 	mov	arg03, #1
213a8     DA 00 A0 FD | 	call	#__longjmp
213ac     01 FA 65 F6 | 	neg	result1, #1
213b0     04 00 90 FD | 	jmp	#LR__2952
213b4                 | LR__2951
213b4     12 FB 01 F6 | 	mov	result1, local04
213b8                 | LR__2952
213b8     A7 F0 03 F6 | 	mov	ptra, fp
213bc     B2 00 A0 FD | 	call	#popregs_
213c0                 | __system___basic_open_string_ret
213c0     2D 00 64 FD | 	ret
213c4                 | 
213c4                 | __system___basic_print_char
213c4     03 4A 05 F6 | 	mov	COUNT_, #3
213c8     A8 00 A0 FD | 	call	#pushregs_
213cc     0A 1F 02 F6 | 	mov	local01, arg02
213d0     0C 4D B0 FD | 	call	#__system___gettxfunc
213d4     FD 20 0A F6 | 	mov	local02, result1 wz
213d8     00 FA 05 A6 |  if_e	mov	result1, #0
213dc     30 00 90 AD |  if_e	jmp	#LR__2960
213e0     10 23 02 F6 | 	mov	local03, local02
213e4     13 20 46 F7 | 	zerox	local02, #19
213e8     14 22 46 F0 | 	shr	local03, #20
213ec     02 22 66 F0 | 	shl	local03, #2
213f0     ED 22 02 F1 | 	add	local03, __methods__
213f4     11 23 02 FB | 	rdlong	local03, local03
213f8     0F 13 02 F6 | 	mov	arg01, local01
213fc     F2 1E 02 F6 | 	mov	local01, objptr
21400     10 E5 01 F6 | 	mov	objptr, local02
21404     2D 22 62 FD | 	call	local03
21408     0F E5 01 F6 | 	mov	objptr, local01
2140c     01 FA 05 F6 | 	mov	result1, #1
21410                 | LR__2960
21410     A7 F0 03 F6 | 	mov	ptra, fp
21414     B2 00 A0 FD | 	call	#popregs_
21418                 | __system___basic_print_char_ret
21418     2D 00 64 FD | 	ret
2141c                 | 
2141c                 | __system___basic_print_string
2141c     03 4A 05 F6 | 	mov	COUNT_, #3
21420     A8 00 A0 FD | 	call	#pushregs_
21424     0A 1F 02 F6 | 	mov	local01, arg02
21428     0B 21 02 F6 | 	mov	local02, arg03
2142c     B0 4C B0 FD | 	call	#__system___gettxfunc
21430     FD 22 0A F6 | 	mov	local03, result1 wz
21434     00 FA 05 A6 |  if_e	mov	result1, #0
21438     18 00 90 AD |  if_e	jmp	#LR__2970
2143c     00 1E 0E F2 | 	cmp	local01, #0 wz
21440     00 FA 05 A6 |  if_e	mov	result1, #0
21444     11 13 02 56 |  if_ne	mov	arg01, local03
21448     10 15 02 56 |  if_ne	mov	arg02, local02
2144c     0F 17 02 56 |  if_ne	mov	arg03, local01
21450     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21454                 | LR__2970
21454     A7 F0 03 F6 | 	mov	ptra, fp
21458     B2 00 A0 FD | 	call	#popregs_
2145c                 | __system___basic_print_string_ret
2145c     2D 00 64 FD | 	ret
21460                 | 
21460                 | __system___basic_print_integer
21460     04 4A 05 F6 | 	mov	COUNT_, #4
21464     A8 00 A0 FD | 	call	#pushregs_
21468     0A 1F 02 F6 | 	mov	local01, arg02
2146c     0B 21 02 F6 | 	mov	local02, arg03
21470     0C 23 02 F6 | 	mov	local03, arg04
21474     68 4C B0 FD | 	call	#__system___gettxfunc
21478     FD 24 0A F6 | 	mov	local04, result1 wz
2147c     00 FA 05 A6 |  if_e	mov	result1, #0
21480     12 13 02 56 |  if_ne	mov	arg01, local04
21484     10 15 02 56 |  if_ne	mov	arg02, local02
21488     0F 17 02 56 |  if_ne	mov	arg03, local01
2148c     11 19 02 56 |  if_ne	mov	arg04, local03
21490     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21494     A7 F0 03 F6 | 	mov	ptra, fp
21498     B2 00 A0 FD | 	call	#popregs_
2149c                 | __system___basic_print_integer_ret
2149c     2D 00 64 FD | 	ret
214a0                 | 
214a0                 | __system___basic_print_unsigned
214a0     03 4A 05 F6 | 	mov	COUNT_, #3
214a4     A8 00 A0 FD | 	call	#pushregs_
214a8     0A 1F 02 F6 | 	mov	local01, arg02
214ac     0B 21 02 F6 | 	mov	local02, arg03
214b0     0C 23 02 F6 | 	mov	local03, arg04
214b4     28 4C B0 FD | 	call	#__system___gettxfunc
214b8     FD 12 0A F6 | 	mov	arg01, result1 wz
214bc     00 FA 05 A6 |  if_e	mov	result1, #0
214c0     3A 20 26 54 |  if_ne	bith	local02, #58
214c4     10 15 02 56 |  if_ne	mov	arg02, local02
214c8     0F 17 02 56 |  if_ne	mov	arg03, local01
214cc     11 19 02 56 |  if_ne	mov	arg04, local03
214d0     74 02 B0 5D |  if_ne	call	#__system___fmtnum
214d4     A7 F0 03 F6 | 	mov	ptra, fp
214d8     B2 00 A0 FD | 	call	#popregs_
214dc                 | __system___basic_print_unsigned_ret
214dc     2D 00 64 FD | 	ret
214e0                 | 
214e0                 | __system___basic_get_char
214e0     03 4A 05 F6 | 	mov	COUNT_, #3
214e4     A8 00 A0 FD | 	call	#pushregs_
214e8     38 4C B0 FD | 	call	#__system___getrxfunc
214ec     FD 1E 0A F6 | 	mov	local01, result1 wz
214f0     01 FA 65 A6 |  if_e	neg	result1, #1
214f4     28 00 90 AD |  if_e	jmp	#LR__2980
214f8     0F 21 02 F6 | 	mov	local02, local01
214fc     13 1E 46 F7 | 	zerox	local01, #19
21500     14 20 46 F0 | 	shr	local02, #20
21504     02 20 66 F0 | 	shl	local02, #2
21508     ED 20 02 F1 | 	add	local02, __methods__
2150c     10 21 02 FB | 	rdlong	local02, local02
21510     F2 22 02 F6 | 	mov	local03, objptr
21514     0F E5 01 F6 | 	mov	objptr, local01
21518     2D 20 62 FD | 	call	local02
2151c     11 E5 01 F6 | 	mov	objptr, local03
21520                 | LR__2980
21520     A7 F0 03 F6 | 	mov	ptra, fp
21524     B2 00 A0 FD | 	call	#popregs_
21528                 | __system___basic_get_char_ret
21528     2D 00 64 FD | 	ret
2152c                 | 
2152c                 | __system___basic_put
2152c     04 4A 05 F6 | 	mov	COUNT_, #4
21530     A8 00 A0 FD | 	call	#pushregs_
21534     0D 1F 02 F6 | 	mov	local01, arg05
21538     0F 19 02 FD | 	qmul	arg04, local01
2153c     09 21 02 F6 | 	mov	local02, arg01
21540     0B 23 02 F6 | 	mov	local03, arg03
21544     00 14 0E F2 | 	cmp	arg02, #0 wz
21548     01 14 86 51 |  if_ne	sub	arg02, #1
2154c     10 13 02 56 |  if_ne	mov	arg01, local02
21550     00 16 06 56 |  if_ne	mov	arg03, #0
21554     18 24 62 FD | 	getqx	local04
21558     78 42 B0 5D |  if_ne	call	#__system__lseek
2155c     11 15 02 F6 | 	mov	arg02, local03
21560     12 17 02 F6 | 	mov	arg03, local04
21564     10 13 02 F6 | 	mov	arg01, local02
21568     B4 41 B0 FD | 	call	#__system__write
2156c     FD 24 02 F6 | 	mov	local04, result1
21570     01 24 56 F2 | 	cmps	local04, #1 wc
21574     10 00 90 CD |  if_b	jmp	#LR__2990
21578     12 7D 02 F6 | 	mov	muldiva_, local04
2157c     0F 7F 02 F6 | 	mov	muldivb_, local01
21580     BA 00 A0 FD | 	call	#divide_
21584     3F 25 02 F6 | 	mov	local04, muldivb_
21588                 | LR__2990
21588     12 FB 01 F6 | 	mov	result1, local04
2158c     A7 F0 03 F6 | 	mov	ptra, fp
21590     B2 00 A0 FD | 	call	#popregs_
21594                 | __system___basic_put_ret
21594     2D 00 64 FD | 	ret
21598                 | 
21598                 | __system___basic_get
21598     04 4A 05 F6 | 	mov	COUNT_, #4
2159c     A8 00 A0 FD | 	call	#pushregs_
215a0     0D 1F 02 F6 | 	mov	local01, arg05
215a4     0F 19 02 FD | 	qmul	arg04, local01
215a8     09 21 02 F6 | 	mov	local02, arg01
215ac     0B 23 02 F6 | 	mov	local03, arg03
215b0     00 14 0E F2 | 	cmp	arg02, #0 wz
215b4     01 14 86 51 |  if_ne	sub	arg02, #1
215b8     10 13 02 56 |  if_ne	mov	arg01, local02
215bc     00 16 06 56 |  if_ne	mov	arg03, #0
215c0     18 24 62 FD | 	getqx	local04
215c4     0C 42 B0 5D |  if_ne	call	#__system__lseek
215c8     11 15 02 F6 | 	mov	arg02, local03
215cc     12 17 02 F6 | 	mov	arg03, local04
215d0     10 13 02 F6 | 	mov	arg01, local02
215d4     84 41 B0 FD | 	call	#__system__read
215d8     FD 24 02 F6 | 	mov	local04, result1
215dc     01 24 56 F2 | 	cmps	local04, #1 wc
215e0     10 00 90 CD |  if_b	jmp	#LR__3000
215e4     12 7D 02 F6 | 	mov	muldiva_, local04
215e8     0F 7F 02 F6 | 	mov	muldivb_, local01
215ec     BA 00 A0 FD | 	call	#divide_
215f0     3F 25 02 F6 | 	mov	local04, muldivb_
215f4                 | LR__3000
215f4     12 FB 01 F6 | 	mov	result1, local04
215f8     A7 F0 03 F6 | 	mov	ptra, fp
215fc     B2 00 A0 FD | 	call	#popregs_
21600                 | __system___basic_get_ret
21600     2D 00 64 FD | 	ret
21604                 | 
21604                 | __system___fmtchar
21604     00 4A 05 F6 | 	mov	COUNT_, #0
21608     A8 00 A0 FD | 	call	#pushregs_
2160c     10 F0 07 F1 | 	add	ptra, #16
21610     04 4E 05 F1 | 	add	fp, #4
21614     A7 12 62 FC | 	wrlong	arg01, fp
21618     04 4E 05 F1 | 	add	fp, #4
2161c     A7 14 62 FC | 	wrlong	arg02, fp
21620     04 4E 05 F1 | 	add	fp, #4
21624     A7 16 62 FC | 	wrlong	arg03, fp
21628     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2162c     A7 16 62 FC | 	wrlong	arg03, fp
21630     08 4E 85 F1 | 	sub	fp, #8
21634     A7 12 02 FB | 	rdlong	arg01, fp
21638     04 4E 05 F1 | 	add	fp, #4
2163c     A7 14 02 FB | 	rdlong	arg02, fp
21640     04 4E 05 F1 | 	add	fp, #4
21644     A7 16 02 F6 | 	mov	arg03, fp
21648     0C 4E 85 F1 | 	sub	fp, #12
2164c     0C 00 B0 FD | 	call	#__system___fmtstr
21650     A7 F0 03 F6 | 	mov	ptra, fp
21654     B2 00 A0 FD | 	call	#popregs_
21658                 | __system___fmtchar_ret
21658     2D 00 64 FD | 	ret
2165c                 | 
2165c                 | __system___fmtstr
2165c     09 4A 05 F6 | 	mov	COUNT_, #9
21660     A8 00 A0 FD | 	call	#pushregs_
21664     09 1F 02 F6 | 	mov	local01, arg01
21668     0A 21 02 F6 | 	mov	local02, arg02
2166c     0B 23 02 F6 | 	mov	local03, arg03
21670     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21674     11 13 02 F6 | 	mov	arg01, local03
21678     09 25 02 F6 | 	mov	local04, arg01
2167c     97 06 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
21680                 | LR__3010
21680     12 FB C9 FA | 	rdbyte	result1, local04 wz
21684     01 24 06 51 |  if_ne	add	local04, #1
21688     F4 FF 9F 5D |  if_ne	jmp	#LR__3010
2168c                 | LR__3011
2168c     09 25 82 F1 | 	sub	local04, arg01
21690     00 18 0E F2 | 	cmp	arg04, #0 wz
21694     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21698     10 15 02 F6 | 	mov	arg02, local02
2169c     12 17 02 F6 | 	mov	arg03, local04
216a0     0F 13 02 F6 | 	mov	arg01, local01
216a4     02 18 06 F6 | 	mov	arg04, #2
216a8     D4 46 B0 FD | 	call	#__system___fmtpad
216ac     FD 26 02 F6 | 	mov	local05, result1
216b0     00 26 56 F2 | 	cmps	local05, #0 wc
216b4     13 FB 01 C6 |  if_b	mov	result1, local05
216b8     80 00 90 CD |  if_b	jmp	#LR__3014
216bc     01 24 56 F2 | 	cmps	local04, #1 wc
216c0     50 00 90 CD |  if_b	jmp	#LR__3013
216c4     12 29 02 F6 | 	mov	local06, local04
216c8                 | LR__3012
216c8     0F 2B 02 F6 | 	mov	local07, local01
216cc     0F 2D 02 F6 | 	mov	local08, local01
216d0     13 2A 46 F7 | 	zerox	local07, #19
216d4     14 2C 46 F0 | 	shr	local08, #20
216d8     02 2C 66 F0 | 	shl	local08, #2
216dc     ED 2C 02 F1 | 	add	local08, __methods__
216e0     16 2D 02 FB | 	rdlong	local08, local08
216e4     11 13 C2 FA | 	rdbyte	arg01, local03
216e8     F2 2E 02 F6 | 	mov	local09, objptr
216ec     15 E5 01 F6 | 	mov	objptr, local07
216f0     01 22 06 F1 | 	add	local03, #1
216f4     2D 2C 62 FD | 	call	local08
216f8     17 E5 01 F6 | 	mov	objptr, local09
216fc     FD 2E 02 F6 | 	mov	local09, result1
21700     00 2E 56 F2 | 	cmps	local09, #0 wc
21704     17 FB 01 C6 |  if_b	mov	result1, local09
21708     30 00 90 CD |  if_b	jmp	#LR__3014
2170c     17 27 02 F1 | 	add	local05, local09
21710     ED 29 6E FB | 	djnz	local06, #LR__3012
21714                 | LR__3013
21714     10 15 02 F6 | 	mov	arg02, local02
21718     12 17 02 F6 | 	mov	arg03, local04
2171c     0F 13 02 F6 | 	mov	arg01, local01
21720     01 18 06 F6 | 	mov	arg04, #1
21724     58 46 B0 FD | 	call	#__system___fmtpad
21728     FD 2E 02 F6 | 	mov	local09, result1
2172c     00 2E 56 F2 | 	cmps	local09, #0 wc
21730     17 FB 01 C6 |  if_b	mov	result1, local09
21734     17 27 02 31 |  if_ae	add	local05, local09
21738     13 FB 01 36 |  if_ae	mov	result1, local05
2173c                 | LR__3014
2173c     A7 F0 03 F6 | 	mov	ptra, fp
21740     B2 00 A0 FD | 	call	#popregs_
21744                 | __system___fmtstr_ret
21744     2D 00 64 FD | 	ret
21748                 | 
21748                 | __system___fmtnum
21748     0B 4A 05 F6 | 	mov	COUNT_, #11
2174c     A8 00 A0 FD | 	call	#pushregs_
21750     09 1F 02 F6 | 	mov	local01, arg01
21754     0A 21 02 F6 | 	mov	local02, arg02
21758     0B 23 02 F6 | 	mov	local03, arg03
2175c     0C 25 02 F6 | 	mov	local04, arg04
21760     F8 27 02 F6 | 	mov	local05, ptra
21764     13 29 02 F6 | 	mov	local06, local05
21768     00 2A 06 F6 | 	mov	local07, #0
2176c     10 2D 02 F6 | 	mov	local08, local02
21770     10 2C 46 F0 | 	shr	local08, #16
21774     3F 2C 06 F5 | 	and	local08, #63
21778     10 2F E2 F8 | 	getbyte	local09, local02, #0
2177c     10 31 02 F6 | 	mov	local10, local02
21780     1A 30 46 F0 | 	shr	local10, #26
21784     03 30 06 F5 | 	and	local10, #3
21788     18 33 02 F6 | 	mov	local11, local10
2178c     01 2C 56 F2 | 	cmps	local08, #1 wc
21790     44 F0 07 F1 | 	add	ptra, #68
21794     01 2C 86 31 |  if_ae	sub	local08, #1
21798     41 2E 56 F2 | 	cmps	local09, #65 wc
2179c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
217a0     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
217a4     03 32 0E F2 | 	cmp	local11, #3 wz
217a8     00 32 06 A6 |  if_e	mov	local11, #0
217ac     00 22 56 52 |  if_ne	cmps	local03, #0 wc
217b0     04 32 06 46 |  if_c_and_nz	mov	local11, #4
217b4     11 23 62 46 |  if_c_and_nz	neg	local03, local03
217b8     00 32 0E F2 | 	cmp	local11, #0 wz
217bc     4C 00 90 AD |  if_e	jmp	#LR__3023
217c0     01 2A 06 F6 | 	mov	local07, #1
217c4     17 2D 0A F2 | 	cmp	local08, local09 wz
217c8     18 00 90 5D |  if_ne	jmp	#LR__3021
217cc     05 2C 6E FB | 	djnz	local08, #LR__3020
217d0     0F 13 02 F6 | 	mov	arg01, local01
217d4     10 15 02 F6 | 	mov	arg02, local02
217d8     23 16 06 F6 | 	mov	arg03, #35
217dc     24 FE BF FD | 	call	#__system___fmtchar
217e0     88 00 90 FD | 	jmp	#LR__3027
217e4                 | LR__3020
217e4                 | LR__3021
217e4     02 32 0E F2 | 	cmp	local11, #2 wz
217e8     14 31 02 A6 |  if_e	mov	local10, local06
217ec     01 28 06 A1 |  if_e	add	local06, #1
217f0     18 41 48 AC |  if_e	wrbyte	#32, local10
217f4     14 00 90 AD |  if_e	jmp	#LR__3022
217f8     04 32 0E F2 | 	cmp	local11, #4 wz
217fc     14 5B 48 AC |  if_e	wrbyte	#45, local06
21800     01 28 06 A1 |  if_e	add	local06, #1
21804     14 57 48 5C |  if_ne	wrbyte	#43, local06
21808     01 28 06 51 |  if_ne	add	local06, #1
2180c                 | LR__3022
2180c                 | LR__3023
2180c     14 13 02 F6 | 	mov	arg01, local06
21810     11 15 02 F6 | 	mov	arg02, local03
21814     12 17 02 F6 | 	mov	arg03, local04
21818     16 19 02 F6 | 	mov	arg04, local08
2181c     00 1A 06 F6 | 	mov	arg05, #0
21820     1D 20 2E F4 | 	testbn	local02, #29 wz
21824     01 1A 06 56 |  if_ne	mov	arg05, #1
21828     1C 46 B0 FD | 	call	#__system___uitoa
2182c     FD 2A 02 F1 | 	add	local07, result1
21830     17 2B 5A F2 | 	cmps	local07, local09 wcz
21834     24 00 90 ED |  if_be	jmp	#LR__3026
21838     97 0E 48 FB | 	callpa	#(@LR__3025-@LR__3024)>>2,fcache_load_ptr_
2183c                 | LR__3024
2183c     17 31 02 F6 | 	mov	local10, local09
21840     01 30 56 F2 | 	cmps	local10, #1 wc
21844     01 2E 86 F1 | 	sub	local09, #1
21848     14 31 02 36 |  if_ae	mov	local10, local06
2184c     01 28 06 31 |  if_ae	add	local06, #1
21850     18 47 48 3C |  if_ae	wrbyte	#35, local10
21854     E4 FF 9F 3D |  if_ae	jmp	#LR__3024
21858                 | LR__3025
21858     14 01 48 FC | 	wrbyte	#0, local06
2185c                 | LR__3026
2185c     0F 13 02 F6 | 	mov	arg01, local01
21860     10 15 02 F6 | 	mov	arg02, local02
21864     13 17 02 F6 | 	mov	arg03, local05
21868     F0 FD BF FD | 	call	#__system___fmtstr
2186c                 | LR__3027
2186c     A7 F0 03 F6 | 	mov	ptra, fp
21870     B2 00 A0 FD | 	call	#popregs_
21874                 | __system___fmtnum_ret
21874     2D 00 64 FD | 	ret
21878                 | 
21878                 | __system___fmtfloat
21878     10 4A 05 F6 | 	mov	COUNT_, #16
2187c     A8 00 A0 FD | 	call	#pushregs_
21880     24 F1 07 F1 | 	add	ptra, #292
21884     04 4E 05 F1 | 	add	fp, #4
21888     A7 12 62 FC | 	wrlong	arg01, fp
2188c     04 4E 05 F1 | 	add	fp, #4
21890     A7 14 62 FC | 	wrlong	arg02, fp
21894     04 4E 05 F1 | 	add	fp, #4
21898     A7 16 62 FC | 	wrlong	arg03, fp
2189c     04 4E 05 F1 | 	add	fp, #4
218a0     A7 18 62 FC | 	wrlong	arg04, fp
218a4     0C 4E 05 F1 | 	add	fp, #12
218a8     A7 14 68 FC | 	wrlong	#10, fp
218ac     08 4E 05 F1 | 	add	fp, #8
218b0     A7 00 68 FC | 	wrlong	#0, fp
218b4     08 4E 05 F1 | 	add	fp, #8
218b8     A7 00 68 FC | 	wrlong	#0, fp
218bc     08 4E 05 F1 | 	add	fp, #8
218c0     A7 00 68 FC | 	wrlong	#0, fp
218c4     04 4E 05 F1 | 	add	fp, #4
218c8     A7 04 68 FC | 	wrlong	#2, fp
218cc     04 4E 05 F1 | 	add	fp, #4
218d0     A7 00 68 FC | 	wrlong	#0, fp
218d4     04 4E 05 F1 | 	add	fp, #4
218d8     A7 00 68 FC | 	wrlong	#0, fp
218dc     04 4E 05 F1 | 	add	fp, #4
218e0     A7 00 68 FC | 	wrlong	#0, fp
218e4     04 4E 05 F1 | 	add	fp, #4
218e8     A7 00 68 FC | 	wrlong	#0, fp
218ec     18 4E 05 F1 | 	add	fp, #24
218f0     A7 00 68 FC | 	wrlong	#0, fp
218f4     68 4E 05 F1 | 	add	fp, #104
218f8     A7 1E 02 F6 | 	mov	local01, fp
218fc     08 4E 85 F1 | 	sub	fp, #8
21900     A7 1E 62 FC | 	wrlong	local01, fp
21904     04 4E 05 F1 | 	add	fp, #4
21908     A7 1E 62 FC | 	wrlong	local01, fp
2190c     BC 4E 85 F1 | 	sub	fp, #188
21910     A7 1E 02 FB | 	rdlong	local01, fp
21914     10 1E 46 F0 | 	shr	local01, #16
21918     3F 1E 06 F5 | 	and	local01, #63
2191c     B0 4E 05 F1 | 	add	fp, #176
21920     A7 1E 62 FC | 	wrlong	local01, fp
21924     B0 4E 85 F1 | 	sub	fp, #176
21928     A7 1E 02 FB | 	rdlong	local01, fp
2192c     1C 1E 46 F0 | 	shr	local01, #28
21930     01 1E 06 F5 | 	and	local01, #1
21934     08 4F 05 F1 | 	add	fp, #264
21938     A7 1E 62 FC | 	wrlong	local01, fp
2193c     58 4E 85 F1 | 	sub	fp, #88
21940     A7 1E 0A FB | 	rdlong	local01, fp wz
21944     B8 4E 85 F1 | 	sub	fp, #184
21948     3C 00 90 5D |  if_ne	jmp	#LR__3031
2194c     10 4E 05 F1 | 	add	fp, #16
21950     A7 1E 02 FB | 	rdlong	local01, fp
21954     10 4E 85 F1 | 	sub	fp, #16
21958     61 1E 0E F2 | 	cmp	local01, #97 wz
2195c     18 00 90 5D |  if_ne	jmp	#LR__3030
21960     B8 4E 05 F1 | 	add	fp, #184
21964     A7 1A 68 FC | 	wrlong	#13, fp
21968     84 4E 85 F1 | 	sub	fp, #132
2196c     A7 02 68 FC | 	wrlong	#1, fp
21970     34 4E 85 F1 | 	sub	fp, #52
21974     24 00 90 FD | 	jmp	#LR__3032
21978                 | LR__3030
21978     B8 4E 05 F1 | 	add	fp, #184
2197c     A7 0C 68 FC | 	wrlong	#6, fp
21980     B8 4E 85 F1 | 	sub	fp, #184
21984     14 00 90 FD | 	jmp	#LR__3032
21988                 | LR__3031
21988     B8 4E 05 F1 | 	add	fp, #184
2198c     A7 1E 02 FB | 	rdlong	local01, fp
21990     01 1E 86 F1 | 	sub	local01, #1
21994     A7 1E 62 FC | 	wrlong	local01, fp
21998     B8 4E 85 F1 | 	sub	fp, #184
2199c                 | LR__3032
2199c     08 4E 05 F1 | 	add	fp, #8
219a0     A7 1E 02 FB | 	rdlong	local01, fp
219a4     16 1E 46 F0 | 	shr	local01, #22
219a8     03 1E 06 F5 | 	and	local01, #3
219ac     04 4F 05 F1 | 	add	fp, #260
219b0     A7 1E 62 FC | 	wrlong	local01, fp
219b4     04 4F 85 F1 | 	sub	fp, #260
219b8     A7 1E 02 FB | 	rdlong	local01, fp
219bc     1D 1E 46 F0 | 	shr	local01, #29
219c0     01 1E 06 F5 | 	and	local01, #1
219c4     B4 4E 05 F1 | 	add	fp, #180
219c8     A7 1E 62 FC | 	wrlong	local01, fp
219cc     B4 4E 85 F1 | 	sub	fp, #180
219d0     A7 1E 02 FB | 	rdlong	local01, fp
219d4     0F 1F EA F8 | 	getbyte	local01, local01, #1
219d8     60 4E 05 F1 | 	add	fp, #96
219dc     A7 1E 62 FC | 	wrlong	local01, fp
219e0     60 4E 85 F1 | 	sub	fp, #96
219e4     A7 1E 02 FB | 	rdlong	local01, fp
219e8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
219ec     64 4E 05 F1 | 	add	fp, #100
219f0     A7 1E 62 FC | 	wrlong	local01, fp
219f4     00 1E 06 F6 | 	mov	local01, #0
219f8     5C 4E 85 F1 | 	sub	fp, #92
219fc     A7 1A 02 FB | 	rdlong	arg05, fp
21a00     65 1A 0E F2 | 	cmp	arg05, #101 wz
21a04     01 1E 06 A6 |  if_e	mov	local01, #1
21a08     14 4E 05 F1 | 	add	fp, #20
21a0c     A7 1E 62 FC | 	wrlong	local01, fp
21a10     98 4E 05 F1 | 	add	fp, #152
21a14     A7 20 0A FB | 	rdlong	local02, fp wz
21a18     45 1E 06 56 |  if_ne	mov	local01, #69
21a1c     65 1E 06 A6 |  if_e	mov	local01, #101
21a20     8C 4E 85 F1 | 	sub	fp, #140
21a24     A7 1E 62 FC | 	wrlong	local01, fp
21a28     20 4E 85 F1 | 	sub	fp, #32
21a2c     A7 1E 02 FB | 	rdlong	local01, fp
21a30     10 4E 85 F1 | 	sub	fp, #16
21a34     61 1E 0E F2 | 	cmp	local01, #97 wz
21a38     4C 00 90 5D |  if_ne	jmp	#LR__3033
21a3c     24 4E 05 F1 | 	add	fp, #36
21a40     A7 02 68 FC | 	wrlong	#1, fp
21a44     98 4E 05 F1 | 	add	fp, #152
21a48     A7 20 0A FB | 	rdlong	local02, fp wz
21a4c     50 1E 06 56 |  if_ne	mov	local01, #80
21a50     70 1E 06 A6 |  if_e	mov	local01, #112
21a54     8C 4E 85 F1 | 	sub	fp, #140
21a58     A7 1E 62 FC | 	wrlong	local01, fp
21a5c     14 4E 85 F1 | 	sub	fp, #20
21a60     A7 04 68 FC | 	wrlong	#2, fp
21a64     1C 4E 05 F1 | 	add	fp, #28
21a68     A7 02 68 FC | 	wrlong	#1, fp
21a6c     84 4E 05 F1 | 	add	fp, #132
21a70     A7 20 0A FB | 	rdlong	local02, fp wz
21a74     58 1E 06 56 |  if_ne	mov	local01, #88
21a78     78 1E 06 A6 |  if_e	mov	local01, #120
21a7c     7C 4E 85 F1 | 	sub	fp, #124
21a80     A7 1E 62 FC | 	wrlong	local01, fp
21a84     40 4E 85 F1 | 	sub	fp, #64
21a88                 | LR__3033
21a88     10 4E 05 F1 | 	add	fp, #16
21a8c     A7 1E 02 FB | 	rdlong	local01, fp
21a90     10 4E 85 F1 | 	sub	fp, #16
21a94     23 1E 0E F2 | 	cmp	local01, #35 wz
21a98     3C 00 90 5D |  if_ne	jmp	#LR__3036
21a9c     48 4E 05 F1 | 	add	fp, #72
21aa0     A7 02 68 FC | 	wrlong	#1, fp
21aa4     C8 4E 05 F1 | 	add	fp, #200
21aa8     A7 1E 0A FB | 	rdlong	local01, fp wz
21aac     10 4F 85 F1 | 	sub	fp, #272
21ab0     18 00 90 AD |  if_e	jmp	#LR__3034
21ab4     10 4E 05 F1 | 	add	fp, #16
21ab8     A7 CC 68 FC | 	wrlong	#102, fp
21abc     00 4F 05 F1 | 	add	fp, #256
21ac0     A7 00 68 FC | 	wrlong	#0, fp
21ac4     10 4F 85 F1 | 	sub	fp, #272
21ac8     0C 00 90 FD | 	jmp	#LR__3035
21acc                 | LR__3034
21acc     10 4F 05 F1 | 	add	fp, #272
21ad0     A7 02 68 FC | 	wrlong	#1, fp
21ad4     10 4F 85 F1 | 	sub	fp, #272
21ad8                 | LR__3035
21ad8                 | LR__3036
21ad8     08 4E 05 F1 | 	add	fp, #8
21adc     A7 1E 02 FB | 	rdlong	local01, fp
21ae0     1A 1E 46 F0 | 	shr	local01, #26
21ae4     03 1E 06 F5 | 	and	local01, #3
21ae8     5C 4E 05 F1 | 	add	fp, #92
21aec     A7 1E 62 FC | 	wrlong	local01, fp
21af0     58 4E 85 F1 | 	sub	fp, #88
21af4     A7 FA 01 FB | 	rdlong	result1, fp
21af8     0C 4E 85 F1 | 	sub	fp, #12
21afc     1F FA 4D F0 | 	shr	result1, #31 wz
21b00     20 00 90 AD |  if_e	jmp	#LR__3037
21b04     2C 4E 05 F1 | 	add	fp, #44
21b08     A7 5A 68 FC | 	wrlong	#45, fp
21b0c     20 4E 85 F1 | 	sub	fp, #32
21b10     A7 FA 01 FB | 	rdlong	result1, fp
21b14     1F FA E5 F4 | 	bitnot	result1, #31
21b18     A7 FA 61 FC | 	wrlong	result1, fp
21b1c     0C 4E 85 F1 | 	sub	fp, #12
21b20     3C 00 90 FD | 	jmp	#LR__3039
21b24                 | LR__3037
21b24     64 4E 05 F1 | 	add	fp, #100
21b28     A7 1E 02 FB | 	rdlong	local01, fp
21b2c     64 4E 85 F1 | 	sub	fp, #100
21b30     01 1E 0E F2 | 	cmp	local01, #1 wz
21b34     2C 4E 05 A1 |  if_e	add	fp, #44
21b38     A7 56 68 AC |  if_e	wrlong	#43, fp
21b3c     2C 4E 85 A1 |  if_e	sub	fp, #44
21b40     1C 00 90 AD |  if_e	jmp	#LR__3038
21b44     64 4E 05 F1 | 	add	fp, #100
21b48     A7 1E 02 FB | 	rdlong	local01, fp
21b4c     64 4E 85 F1 | 	sub	fp, #100
21b50     02 1E 0E F2 | 	cmp	local01, #2 wz
21b54     2C 4E 05 A1 |  if_e	add	fp, #44
21b58     A7 40 68 AC |  if_e	wrlong	#32, fp
21b5c     2C 4E 85 A1 |  if_e	sub	fp, #44
21b60                 | LR__3038
21b60                 | LR__3039
21b60     08 4E 05 F1 | 	add	fp, #8
21b64     A7 1E 02 FB | 	rdlong	local01, fp
21b68     18 1E 46 F0 | 	shr	local01, #24
21b6c     03 1E 06 F5 | 	and	local01, #3
21b70     3C 4E 05 F1 | 	add	fp, #60
21b74     A7 1E 62 FC | 	wrlong	local01, fp
21b78     00 1E 06 F6 | 	mov	local01, #0
21b7c     18 4E 85 F1 | 	sub	fp, #24
21b80     A7 22 0A FB | 	rdlong	local03, fp wz
21b84     2C 4E 85 F1 | 	sub	fp, #44
21b88     18 00 90 5D |  if_ne	jmp	#LR__3040
21b8c     1C 4E 05 F1 | 	add	fp, #28
21b90     A7 24 02 FB | 	rdlong	local04, fp
21b94     1C 4E 85 F1 | 	sub	fp, #28
21b98     12 27 02 F6 | 	mov	local05, local04
21b9c     0A 26 0E F2 | 	cmp	local05, #10 wz
21ba0     04 00 90 AD |  if_e	jmp	#LR__3041
21ba4                 | LR__3040
21ba4     01 1E 66 F5 | 	xor	local01, #1
21ba8                 | LR__3041
21ba8     3C 4E 05 F1 | 	add	fp, #60
21bac     A7 1E 62 FC | 	wrlong	local01, fp
21bb0     3C 4E 85 F1 | 	sub	fp, #60
21bb4     00 1E 0E F2 | 	cmp	local01, #0 wz
21bb8     0C 01 90 AD |  if_e	jmp	#LR__3043
21bbc     44 4E 05 F1 | 	add	fp, #68
21bc0     A7 26 02 FB | 	rdlong	local05, fp
21bc4     44 4E 85 F1 | 	sub	fp, #68
21bc8     13 23 02 F6 | 	mov	local03, local05
21bcc     02 22 0E F2 | 	cmp	local03, #2 wz
21bd0     F4 00 90 5D |  if_ne	jmp	#LR__3043
21bd4     0C 4F 05 F1 | 	add	fp, #268
21bd8     A7 28 02 FB | 	rdlong	local06, fp
21bdc     0C 4F 85 F1 | 	sub	fp, #268
21be0     14 25 02 F6 | 	mov	local04, local06
21be4     02 24 0E F2 | 	cmp	local04, #2 wz
21be8     DC 00 90 AD |  if_e	jmp	#LR__3043
21bec     C0 4E 05 F1 | 	add	fp, #192
21bf0     A7 12 02 FB | 	rdlong	arg01, fp
21bf4     94 4E 85 F1 | 	sub	fp, #148
21bf8     A7 14 02 FB | 	rdlong	arg02, fp
21bfc     14 4E 05 F1 | 	add	fp, #20
21c00     A7 16 02 FB | 	rdlong	arg03, fp
21c04     40 4E 85 F1 | 	sub	fp, #64
21c08     A4 44 B0 FD | 	call	#__system__emitsign_0500
21c0c     14 4F 05 F1 | 	add	fp, #276
21c10     A7 FA 61 FC | 	wrlong	result1, fp
21c14     14 4F 85 F1 | 	sub	fp, #276
21c18     00 FA 55 F2 | 	cmps	result1, #0 wc
21c1c     14 4F 05 C1 |  if_b	add	fp, #276
21c20     A7 FA 01 CB |  if_b	rdlong	result1, fp
21c24     14 4F 85 C1 |  if_b	sub	fp, #276
21c28     6C 0B 90 CD |  if_b	jmp	#LR__3093
21c2c     C0 4E 05 F1 | 	add	fp, #192
21c30     A7 1E 02 FB | 	rdlong	local01, fp
21c34     54 4E 05 F1 | 	add	fp, #84
21c38     A7 26 02 FB | 	rdlong	local05, fp
21c3c     13 23 02 F6 | 	mov	local03, local05
21c40     13 1F 02 F1 | 	add	local01, local05
21c44     54 4E 85 F1 | 	sub	fp, #84
21c48     A7 1E 62 FC | 	wrlong	local01, fp
21c4c     58 4E 85 F1 | 	sub	fp, #88
21c50     A7 1E 0A FB | 	rdlong	local01, fp wz
21c54     68 4E 85 F1 | 	sub	fp, #104
21c58     60 00 90 AD |  if_e	jmp	#LR__3042
21c5c     68 4E 05 F1 | 	add	fp, #104
21c60     A7 1E 02 FB | 	rdlong	local01, fp
21c64     AC 4E 05 F1 | 	add	fp, #172
21c68     A7 22 02 FB | 	rdlong	local03, fp
21c6c     11 1F 82 F1 | 	sub	local01, local03
21c70     AC 4E 85 F1 | 	sub	fp, #172
21c74     A7 1E 62 FC | 	wrlong	local01, fp
21c78     68 4E 85 F1 | 	sub	fp, #104
21c7c     00 1E 56 F2 | 	cmps	local01, #0 wc
21c80     68 4E 05 C1 |  if_b	add	fp, #104
21c84     A7 00 68 CC |  if_b	wrlong	#0, fp
21c88     68 4E 85 C1 |  if_b	sub	fp, #104
21c8c     08 4E 05 F1 | 	add	fp, #8
21c90     A7 1E 02 FB | 	rdlong	local01, fp
21c94     E8 1E 06 F4 | 	bitl	local01, #232
21c98     A7 1E 62 FC | 	wrlong	local01, fp
21c9c     60 4E 05 F1 | 	add	fp, #96
21ca0     A7 26 02 FB | 	rdlong	local05, fp
21ca4     13 23 02 F6 | 	mov	local03, local05
21ca8     08 22 66 F0 | 	shl	local03, #8
21cac     11 1F 42 F5 | 	or	local01, local03
21cb0     60 4E 85 F1 | 	sub	fp, #96
21cb4     A7 1E 62 FC | 	wrlong	local01, fp
21cb8     08 4E 85 F1 | 	sub	fp, #8
21cbc                 | LR__3042
21cbc     3C 4E 05 F1 | 	add	fp, #60
21cc0     A7 00 68 FC | 	wrlong	#0, fp
21cc4     3C 4E 85 F1 | 	sub	fp, #60
21cc8                 | LR__3043
21cc8     0C 4E 05 F1 | 	add	fp, #12
21ccc     A7 12 02 FB | 	rdlong	arg01, fp
21cd0     0C 4E 85 F1 | 	sub	fp, #12
21cd4     04 1F B0 FD | 	call	#__system____builtin_ilogb
21cd8     FF FF 3F FF 
21cdc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21ce0     50 00 90 5D |  if_ne	jmp	#LR__3045
21ce4     2C 4E 05 F1 | 	add	fp, #44
21ce8     A7 1E 0A FB | 	rdlong	local01, fp wz
21cec     2C 4E 85 F1 | 	sub	fp, #44
21cf0     24 00 90 AD |  if_e	jmp	#LR__3044
21cf4     C0 4E 05 F1 | 	add	fp, #192
21cf8     A7 20 02 FB | 	rdlong	local02, fp
21cfc     10 23 02 F6 | 	mov	local03, local02
21d00     01 22 06 F1 | 	add	local03, #1
21d04     A7 22 62 FC | 	wrlong	local03, fp
21d08     94 4E 85 F1 | 	sub	fp, #148
21d0c     A7 24 02 FB | 	rdlong	local04, fp
21d10     2C 4E 85 F1 | 	sub	fp, #44
21d14     10 25 42 FC | 	wrbyte	local04, local02
21d18                 | LR__3044
21d18     C0 4E 05 F1 | 	add	fp, #192
21d1c     A7 12 02 FB | 	rdlong	arg01, fp
21d20     C0 4E 85 F1 | 	sub	fp, #192
21d24     7F 01 00 FF 
21d28     4E 15 06 F6 | 	mov	arg02, ##@LR__5001
21d2c     AC E9 BF FD | 	call	#__system____builtin_strcpy
21d30     A4 08 90 FD | 	jmp	#LR__3081
21d34                 | LR__3045
21d34     0C 4E 05 F1 | 	add	fp, #12
21d38     A7 20 02 FB | 	rdlong	local02, fp
21d3c     0C 4E 85 F1 | 	sub	fp, #12
21d40     10 13 02 F6 | 	mov	arg01, local02
21d44     94 1E B0 FD | 	call	#__system____builtin_ilogb
21d48     00 00 40 FF 
21d4c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21d50     50 00 90 5D |  if_ne	jmp	#LR__3047
21d54     2C 4E 05 F1 | 	add	fp, #44
21d58     A7 1E 0A FB | 	rdlong	local01, fp wz
21d5c     2C 4E 85 F1 | 	sub	fp, #44
21d60     24 00 90 AD |  if_e	jmp	#LR__3046
21d64     C0 4E 05 F1 | 	add	fp, #192
21d68     A7 20 02 FB | 	rdlong	local02, fp
21d6c     10 23 02 F6 | 	mov	local03, local02
21d70     01 22 06 F1 | 	add	local03, #1
21d74     A7 22 62 FC | 	wrlong	local03, fp
21d78     94 4E 85 F1 | 	sub	fp, #148
21d7c     A7 24 02 FB | 	rdlong	local04, fp
21d80     2C 4E 85 F1 | 	sub	fp, #44
21d84     10 25 42 FC | 	wrbyte	local04, local02
21d88                 | LR__3046
21d88     C0 4E 05 F1 | 	add	fp, #192
21d8c     A7 12 02 FB | 	rdlong	arg01, fp
21d90     C0 4E 85 F1 | 	sub	fp, #192
21d94     7F 01 00 FF 
21d98     52 15 06 F6 | 	mov	arg02, ##@LR__5002
21d9c     3C E9 BF FD | 	call	#__system____builtin_strcpy
21da0     34 08 90 FD | 	jmp	#LR__3081
21da4                 | LR__3047
21da4     10 4E 05 F1 | 	add	fp, #16
21da8     A7 1E 02 FB | 	rdlong	local01, fp
21dac     10 4E 85 F1 | 	sub	fp, #16
21db0     67 1E 0E F2 | 	cmp	local01, #103 wz
21db4     10 4E 05 51 |  if_ne	add	fp, #16
21db8     A7 22 02 5B |  if_ne	rdlong	local03, fp
21dbc     10 4E 85 51 |  if_ne	sub	fp, #16
21dc0     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21dc4     94 01 90 5D |  if_ne	jmp	#LR__3052
21dc8     0C 4E 05 F1 | 	add	fp, #12
21dcc     A7 12 02 FB | 	rdlong	arg01, fp
21dd0     08 4E 05 F1 | 	add	fp, #8
21dd4     A7 14 02 F6 | 	mov	arg02, fp
21dd8     0C 4E 05 F1 | 	add	fp, #12
21ddc     A7 16 02 F6 | 	mov	arg03, fp
21de0     98 4E 05 F1 | 	add	fp, #152
21de4     A7 18 02 FB | 	rdlong	arg04, fp
21de8     9C 4E 85 F1 | 	sub	fp, #156
21dec     A7 1A 02 FB | 	rdlong	arg05, fp
21df0     1C 4E 85 F1 | 	sub	fp, #28
21df4     C4 40 B0 FD | 	call	#__system__disassemble_0498
21df8     10 4E 05 F1 | 	add	fp, #16
21dfc     A7 1E 02 FB | 	rdlong	local01, fp
21e00     10 4E 85 F1 | 	sub	fp, #16
21e04     23 1E 0E F2 | 	cmp	local01, #35 wz
21e08     A0 00 90 5D |  if_ne	jmp	#LR__3049
21e0c     20 4E 05 F1 | 	add	fp, #32
21e10     A7 1E 02 FB | 	rdlong	local01, fp
21e14     98 4E 05 F1 | 	add	fp, #152
21e18     A7 22 02 FB | 	rdlong	local03, fp
21e1c     B8 4E 85 F1 | 	sub	fp, #184
21e20     11 1F 5A F2 | 	cmps	local01, local03 wcz
21e24     24 4E 05 11 |  if_a	add	fp, #36
21e28     A7 02 68 1C |  if_a	wrlong	#1, fp
21e2c     24 4E 85 11 |  if_a	sub	fp, #36
21e30     A4 01 90 1D |  if_a	jmp	#LR__3055
21e34     20 4E 05 F1 | 	add	fp, #32
21e38     A7 1E 02 FB | 	rdlong	local01, fp
21e3c     20 4E 85 F1 | 	sub	fp, #32
21e40     00 1E 56 F2 | 	cmps	local01, #0 wc
21e44     2C 00 90 3D |  if_ae	jmp	#LR__3048
21e48     B8 4E 05 F1 | 	add	fp, #184
21e4c     A7 1E 02 FB | 	rdlong	local01, fp
21e50     0F 1F 62 F6 | 	neg	local01, local01
21e54     98 4E 85 F1 | 	sub	fp, #152
21e58     A7 22 02 FB | 	rdlong	local03, fp
21e5c     20 4E 85 F1 | 	sub	fp, #32
21e60     0F 23 5A F2 | 	cmps	local03, local01 wcz
21e64     24 4E 05 E1 |  if_be	add	fp, #36
21e68     A7 02 68 EC |  if_be	wrlong	#1, fp
21e6c     24 4E 85 E1 |  if_be	sub	fp, #36
21e70     64 01 90 FD | 	jmp	#LR__3055
21e74                 | LR__3048
21e74     20 4E 05 F1 | 	add	fp, #32
21e78     A7 1E 02 FB | 	rdlong	local01, fp
21e7c     20 4E 85 F1 | 	sub	fp, #32
21e80     01 1E 56 F2 | 	cmps	local01, #1 wc
21e84     50 01 90 CD |  if_b	jmp	#LR__3055
21e88     B8 4E 05 F1 | 	add	fp, #184
21e8c     A7 1E 02 FB | 	rdlong	local01, fp
21e90     98 4E 85 F1 | 	sub	fp, #152
21e94     A7 22 02 FB | 	rdlong	local03, fp
21e98     11 1F 82 F1 | 	sub	local01, local03
21e9c     98 4E 05 F1 | 	add	fp, #152
21ea0     A7 1E 62 FC | 	wrlong	local01, fp
21ea4     B8 4E 85 F1 | 	sub	fp, #184
21ea8     2C 01 90 FD | 	jmp	#LR__3055
21eac                 | LR__3049
21eac     00 1E 06 F6 | 	mov	local01, #0
21eb0     08 4E 05 F1 | 	add	fp, #8
21eb4     A7 20 02 FB | 	rdlong	local02, fp
21eb8     1C 20 46 F0 | 	shr	local02, #28
21ebc     01 20 0E F5 | 	and	local02, #1 wz
21ec0     01 1E 06 A6 |  if_e	mov	local01, #1
21ec4     2C 4E 05 F1 | 	add	fp, #44
21ec8     A7 1E 62 FC | 	wrlong	local01, fp
21ecc     14 4E 85 F1 | 	sub	fp, #20
21ed0     A7 1E 02 FB | 	rdlong	local01, fp
21ed4     98 4E 05 F1 | 	add	fp, #152
21ed8     A7 22 02 FB | 	rdlong	local03, fp
21edc     B8 4E 85 F1 | 	sub	fp, #184
21ee0     11 1F 52 F2 | 	cmps	local01, local03 wc
21ee4     18 00 90 3D |  if_ae	jmp	#LR__3050
21ee8     20 4E 05 F1 | 	add	fp, #32
21eec     A7 24 02 FB | 	rdlong	local04, fp
21ef0     20 4E 85 F1 | 	sub	fp, #32
21ef4     FF FF 7F FF 
21ef8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
21efc     10 00 90 3D |  if_ae	jmp	#LR__3051
21f00                 | LR__3050
21f00     24 4E 05 F1 | 	add	fp, #36
21f04     A7 02 68 FC | 	wrlong	#1, fp
21f08     24 4E 85 F1 | 	sub	fp, #36
21f0c     C8 00 90 FD | 	jmp	#LR__3055
21f10                 | LR__3051
21f10     B8 4E 05 F1 | 	add	fp, #184
21f14     A7 24 02 FB | 	rdlong	local04, fp
21f18     98 4E 85 F1 | 	sub	fp, #152
21f1c     A7 22 02 FB | 	rdlong	local03, fp
21f20     11 25 82 F1 | 	sub	local04, local03
21f24     98 4E 05 F1 | 	add	fp, #152
21f28     A7 24 62 FC | 	wrlong	local04, fp
21f2c     AC 4E 85 F1 | 	sub	fp, #172
21f30     A7 12 02 FB | 	rdlong	arg01, fp
21f34     08 4E 05 F1 | 	add	fp, #8
21f38     A7 14 02 F6 | 	mov	arg02, fp
21f3c     0C 4E 05 F1 | 	add	fp, #12
21f40     A7 16 02 F6 | 	mov	arg03, fp
21f44     12 19 62 F6 | 	neg	arg04, local04
21f48     04 4E 85 F1 | 	sub	fp, #4
21f4c     A7 1A 02 FB | 	rdlong	arg05, fp
21f50     1C 4E 85 F1 | 	sub	fp, #28
21f54     64 3F B0 FD | 	call	#__system__disassemble_0498
21f58     7C 00 90 FD | 	jmp	#LR__3055
21f5c                 | LR__3052
21f5c     24 4E 05 F1 | 	add	fp, #36
21f60     A7 1E 0A FB | 	rdlong	local01, fp wz
21f64     24 4E 85 F1 | 	sub	fp, #36
21f68     34 00 90 AD |  if_e	jmp	#LR__3053
21f6c     0C 4E 05 F1 | 	add	fp, #12
21f70     A7 12 02 FB | 	rdlong	arg01, fp
21f74     08 4E 05 F1 | 	add	fp, #8
21f78     A7 14 02 F6 | 	mov	arg02, fp
21f7c     0C 4E 05 F1 | 	add	fp, #12
21f80     A7 16 02 F6 | 	mov	arg03, fp
21f84     98 4E 05 F1 | 	add	fp, #152
21f88     A7 18 02 FB | 	rdlong	arg04, fp
21f8c     9C 4E 85 F1 | 	sub	fp, #156
21f90     A7 1A 02 FB | 	rdlong	arg05, fp
21f94     1C 4E 85 F1 | 	sub	fp, #28
21f98     20 3F B0 FD | 	call	#__system__disassemble_0498
21f9c     38 00 90 FD | 	jmp	#LR__3054
21fa0                 | LR__3053
21fa0     0C 4E 05 F1 | 	add	fp, #12
21fa4     A7 12 02 FB | 	rdlong	arg01, fp
21fa8     08 4E 05 F1 | 	add	fp, #8
21fac     A7 14 02 F6 | 	mov	arg02, fp
21fb0     0C 4E 05 F1 | 	add	fp, #12
21fb4     A7 16 02 F6 | 	mov	arg03, fp
21fb8     98 4E 05 F1 | 	add	fp, #152
21fbc     A7 24 02 FB | 	rdlong	local04, fp
21fc0     01 24 06 F1 | 	add	local04, #1
21fc4     12 19 62 F6 | 	neg	arg04, local04
21fc8     9C 4E 85 F1 | 	sub	fp, #156
21fcc     A7 1A 02 FB | 	rdlong	arg05, fp
21fd0     1C 4E 85 F1 | 	sub	fp, #28
21fd4     E4 3E B0 FD | 	call	#__system__disassemble_0498
21fd8                 | LR__3054
21fd8                 | LR__3055
21fd8     1C 4E 05 F1 | 	add	fp, #28
21fdc     A7 1E 02 FB | 	rdlong	local01, fp
21fe0     1C 4E 85 F1 | 	sub	fp, #28
21fe4     02 1E 0E F2 | 	cmp	local01, #2 wz
21fe8     4C 00 90 5D |  if_ne	jmp	#LR__3058
21fec     1C 4E 05 F1 | 	add	fp, #28
21ff0     A7 20 68 FC | 	wrlong	#16, fp
21ff4     1C 4E 85 F1 | 	sub	fp, #28
21ff8                 | LR__3056
21ff8     14 4E 05 F1 | 	add	fp, #20
21ffc     A7 1E 0A FB | 	rdlong	local01, fp wz
22000     14 4E 85 F1 | 	sub	fp, #20
22004     30 00 90 AD |  if_e	jmp	#LR__3057
22008     14 4E 05 F1 | 	add	fp, #20
2200c     A7 22 02 FB | 	rdlong	local03, fp
22010     14 4E 85 F1 | 	sub	fp, #20
22014     00 80 00 FF 
22018     00 22 16 F2 | 	cmp	local03, ##16777216 wc
2201c     18 00 90 3D |  if_ae	jmp	#LR__3057
22020     14 4E 05 F1 | 	add	fp, #20
22024     A7 1E 02 FB | 	rdlong	local01, fp
22028     01 1E 66 F0 | 	shl	local01, #1
2202c     A7 1E 62 FC | 	wrlong	local01, fp
22030     14 4E 85 F1 | 	sub	fp, #20
22034     C0 FF 9F FD | 	jmp	#LR__3056
22038                 | LR__3057
22038                 | LR__3058
22038     70 4E 05 F1 | 	add	fp, #112
2203c     A7 12 02 F6 | 	mov	arg01, fp
22040     5C 4E 85 F1 | 	sub	fp, #92
22044     A7 14 02 FB | 	rdlong	arg02, fp
22048     08 4E 05 F1 | 	add	fp, #8
2204c     A7 16 02 FB | 	rdlong	arg03, fp
22050     A0 4E 05 F1 | 	add	fp, #160
22054     A7 1A 02 FB | 	rdlong	arg05, fp
22058     BC 4E 85 F1 | 	sub	fp, #188
2205c     01 18 06 F6 | 	mov	arg04, #1
22060     E4 3D B0 FD | 	call	#__system___uitoa
22064     58 4E 05 F1 | 	add	fp, #88
22068     A7 FA 61 FC | 	wrlong	result1, fp
2206c     38 4E 85 F1 | 	sub	fp, #56
22070     A7 1E 02 FB | 	rdlong	local01, fp
22074     20 4E 85 F1 | 	sub	fp, #32
22078     00 1E 56 F2 | 	cmps	local01, #0 wc
2207c     50 00 90 3D |  if_ae	jmp	#LR__3059
22080     60 4E 05 F1 | 	add	fp, #96
22084     A7 5A 68 FC | 	wrlong	#45, fp
22088     50 4E 05 F1 | 	add	fp, #80
2208c     A7 12 02 F6 | 	mov	arg01, fp
22090     90 4E 85 F1 | 	sub	fp, #144
22094     A7 22 02 FB | 	rdlong	local03, fp
22098     11 15 62 F6 | 	neg	arg02, local03
2209c     18 4E 05 F1 | 	add	fp, #24
220a0     A7 18 02 FB | 	rdlong	arg04, fp
220a4     84 4E 05 F1 | 	add	fp, #132
220a8     A7 28 02 FB | 	rdlong	local06, fp
220ac     BC 4E 85 F1 | 	sub	fp, #188
220b0     14 25 02 F6 | 	mov	local04, local06
220b4     0A 16 06 F6 | 	mov	arg03, #10
220b8     12 1B 02 F6 | 	mov	arg05, local04
220bc     88 3D B0 FD | 	call	#__system___uitoa
220c0     5C 4E 05 F1 | 	add	fp, #92
220c4     A7 FA 61 FC | 	wrlong	result1, fp
220c8     5C 4E 85 F1 | 	sub	fp, #92
220cc     48 00 90 FD | 	jmp	#LR__3060
220d0                 | LR__3059
220d0     60 4E 05 F1 | 	add	fp, #96
220d4     A7 56 68 FC | 	wrlong	#43, fp
220d8     50 4E 05 F1 | 	add	fp, #80
220dc     A7 12 02 F6 | 	mov	arg01, fp
220e0     90 4E 85 F1 | 	sub	fp, #144
220e4     A7 14 02 FB | 	rdlong	arg02, fp
220e8     18 4E 05 F1 | 	add	fp, #24
220ec     A7 18 02 FB | 	rdlong	arg04, fp
220f0     84 4E 05 F1 | 	add	fp, #132
220f4     A7 28 02 FB | 	rdlong	local06, fp
220f8     BC 4E 85 F1 | 	sub	fp, #188
220fc     14 25 02 F6 | 	mov	local04, local06
22100     0A 16 06 F6 | 	mov	arg03, #10
22104     12 1B 02 F6 | 	mov	arg05, local04
22108     3C 3D B0 FD | 	call	#__system___uitoa
2210c     5C 4E 05 F1 | 	add	fp, #92
22110     A7 FA 61 FC | 	wrlong	result1, fp
22114     5C 4E 85 F1 | 	sub	fp, #92
22118                 | LR__3060
22118     24 4E 05 F1 | 	add	fp, #36
2211c     A7 1E 0A FB | 	rdlong	local01, fp wz
22120     24 4E 85 F1 | 	sub	fp, #36
22124     2C 00 90 AD |  if_e	jmp	#LR__3061
22128     50 4E 05 F1 | 	add	fp, #80
2212c     A7 00 68 FC | 	wrlong	#0, fp
22130     04 4E 85 F1 | 	sub	fp, #4
22134     A7 00 68 FC | 	wrlong	#0, fp
22138     6C 4E 05 F1 | 	add	fp, #108
2213c     A7 1E 02 FB | 	rdlong	local01, fp
22140     01 1E 06 F1 | 	add	local01, #1
22144     64 4E 85 F1 | 	sub	fp, #100
22148     A7 1E 62 FC | 	wrlong	local01, fp
2214c     54 4E 85 F1 | 	sub	fp, #84
22150     88 00 90 FD | 	jmp	#LR__3064
22154                 | LR__3061
22154     20 4E 05 F1 | 	add	fp, #32
22158     A7 1E 02 FB | 	rdlong	local01, fp
2215c     20 4E 85 F1 | 	sub	fp, #32
22160     00 1E 56 F2 | 	cmps	local01, #0 wc
22164     40 00 90 3D |  if_ae	jmp	#LR__3062
22168     20 4E 05 F1 | 	add	fp, #32
2216c     A7 20 02 FB | 	rdlong	local02, fp
22170     30 4E 05 F1 | 	add	fp, #48
22174     A7 20 62 FC | 	wrlong	local02, fp
22178     04 4E 85 F1 | 	sub	fp, #4
2217c     A7 20 62 FC | 	wrlong	local02, fp
22180     2C 4E 85 F1 | 	sub	fp, #44
22184     A7 1E 02 FB | 	rdlong	local01, fp
22188     98 4E 05 F1 | 	add	fp, #152
2218c     A7 22 02 FB | 	rdlong	local03, fp
22190     11 1F 02 F1 | 	add	local01, local03
22194     01 1E 06 F1 | 	add	local01, #1
22198     64 4E 85 F1 | 	sub	fp, #100
2219c     A7 1E 62 FC | 	wrlong	local01, fp
221a0     54 4E 85 F1 | 	sub	fp, #84
221a4     34 00 90 FD | 	jmp	#LR__3063
221a8                 | LR__3062
221a8     4C 4E 05 F1 | 	add	fp, #76
221ac     A7 00 68 FC | 	wrlong	#0, fp
221b0     2C 4E 85 F1 | 	sub	fp, #44
221b4     A7 1E 02 FB | 	rdlong	local01, fp
221b8     30 4E 05 F1 | 	add	fp, #48
221bc     A7 1E 62 FC | 	wrlong	local01, fp
221c0     68 4E 05 F1 | 	add	fp, #104
221c4     A7 22 02 FB | 	rdlong	local03, fp
221c8     11 1F 02 F1 | 	add	local01, local03
221cc     01 1E 06 F1 | 	add	local01, #1
221d0     64 4E 85 F1 | 	sub	fp, #100
221d4     A7 1E 62 FC | 	wrlong	local01, fp
221d8     54 4E 85 F1 | 	sub	fp, #84
221dc                 | LR__3063
221dc                 | LR__3064
221dc     54 4E 05 F1 | 	add	fp, #84
221e0     A7 1E 02 FB | 	rdlong	local01, fp
221e4     08 4E 85 F1 | 	sub	fp, #8
221e8     A7 22 02 FB | 	rdlong	local03, fp
221ec     11 1F 82 F1 | 	sub	local01, local03
221f0     01 1E 06 F1 | 	add	local01, #1
221f4     24 4E 85 F1 | 	sub	fp, #36
221f8     A7 1E 62 FC | 	wrlong	local01, fp
221fc     04 4E 05 F1 | 	add	fp, #4
22200     A7 1E 0A FB | 	rdlong	local01, fp wz
22204     2C 4E 85 F1 | 	sub	fp, #44
22208     28 4E 05 51 |  if_ne	add	fp, #40
2220c     A7 22 02 5B |  if_ne	rdlong	local03, fp
22210     01 22 06 51 |  if_ne	add	local03, #1
22214     A7 22 62 5C |  if_ne	wrlong	local03, fp
22218     28 4E 85 51 |  if_ne	sub	fp, #40
2221c     1C 4E 05 F1 | 	add	fp, #28
22220     A7 1E 02 FB | 	rdlong	local01, fp
22224     1C 4E 85 F1 | 	sub	fp, #28
22228     10 1E 0E F2 | 	cmp	local01, #16 wz
2222c     28 4E 05 A1 |  if_e	add	fp, #40
22230     A7 1E 02 AB |  if_e	rdlong	local01, fp
22234     02 1E 06 A1 |  if_e	add	local01, #2
22238     A7 1E 62 AC |  if_e	wrlong	local01, fp
2223c     28 4E 85 A1 |  if_e	sub	fp, #40
22240     24 4E 05 F1 | 	add	fp, #36
22244     A7 1E 0A FB | 	rdlong	local01, fp wz
22248     24 4E 85 F1 | 	sub	fp, #36
2224c     28 00 90 AD |  if_e	jmp	#LR__3065
22250     28 4E 05 F1 | 	add	fp, #40
22254     A7 1E 02 FB | 	rdlong	local01, fp
22258     02 22 06 F6 | 	mov	local03, #2
2225c     34 4E 05 F1 | 	add	fp, #52
22260     A7 26 02 FB | 	rdlong	local05, fp
22264     13 23 02 F1 | 	add	local03, local05
22268     11 1F 02 F1 | 	add	local01, local03
2226c     34 4E 85 F1 | 	sub	fp, #52
22270     A7 1E 62 FC | 	wrlong	local01, fp
22274     28 4E 85 F1 | 	sub	fp, #40
22278                 | LR__3065
22278     28 4E 05 F1 | 	add	fp, #40
2227c     A7 1E 02 FB | 	rdlong	local01, fp
22280     28 4E 85 F1 | 	sub	fp, #40
22284     41 1E 56 F2 | 	cmps	local01, #65 wc
22288     01 FA 65 36 |  if_ae	neg	result1, #1
2228c     08 05 90 3D |  if_ae	jmp	#LR__3093
22290     3C 4E 05 F1 | 	add	fp, #60
22294     A7 1E 0A FB | 	rdlong	local01, fp wz
22298     3C 4E 85 F1 | 	sub	fp, #60
2229c     60 00 90 AD |  if_e	jmp	#LR__3066
222a0     C0 4E 05 F1 | 	add	fp, #192
222a4     A7 12 02 FB | 	rdlong	arg01, fp
222a8     94 4E 85 F1 | 	sub	fp, #148
222ac     A7 14 02 FB | 	rdlong	arg02, fp
222b0     14 4E 05 F1 | 	add	fp, #20
222b4     A7 16 02 FB | 	rdlong	arg03, fp
222b8     40 4E 85 F1 | 	sub	fp, #64
222bc     F0 3D B0 FD | 	call	#__system__emitsign_0500
222c0     18 4F 05 F1 | 	add	fp, #280
222c4     A7 FA 61 FC | 	wrlong	result1, fp
222c8     18 4F 85 F1 | 	sub	fp, #280
222cc     00 FA 55 F2 | 	cmps	result1, #0 wc
222d0     18 4F 05 C1 |  if_b	add	fp, #280
222d4     A7 FA 01 CB |  if_b	rdlong	result1, fp
222d8     18 4F 85 C1 |  if_b	sub	fp, #280
222dc     B8 04 90 CD |  if_b	jmp	#LR__3093
222e0     C0 4E 05 F1 | 	add	fp, #192
222e4     A7 1E 02 FB | 	rdlong	local01, fp
222e8     58 4E 05 F1 | 	add	fp, #88
222ec     A7 22 02 FB | 	rdlong	local03, fp
222f0     11 1F 02 F1 | 	add	local01, local03
222f4     58 4E 85 F1 | 	sub	fp, #88
222f8     A7 1E 62 FC | 	wrlong	local01, fp
222fc     C0 4E 85 F1 | 	sub	fp, #192
22300                 | LR__3066
22300     4C 4E 05 F1 | 	add	fp, #76
22304     A7 1E 02 FB | 	rdlong	local01, fp
22308     34 4E 85 F1 | 	sub	fp, #52
2230c     A7 1E 62 FC | 	wrlong	local01, fp
22310     18 4E 85 F1 | 	sub	fp, #24
22314     97 9E 48 FB | 	callpa	#(@LR__3072-@LR__3067)>>2,fcache_load_ptr_
22318                 | LR__3067
22318     18 4E 05 F1 | 	add	fp, #24
2231c     A7 20 02 FB | 	rdlong	local02, fp
22320     3C 4E 05 F1 | 	add	fp, #60
22324     A7 26 02 FB | 	rdlong	local05, fp
22328     54 4E 85 F1 | 	sub	fp, #84
2232c     13 21 52 F2 | 	cmps	local02, local05 wc
22330     20 01 90 3D |  if_ae	jmp	#LR__3073
22334     18 4E 05 F1 | 	add	fp, #24
22338     A7 28 02 FB | 	rdlong	local06, fp
2233c     18 4E 85 F1 | 	sub	fp, #24
22340     00 28 56 F2 | 	cmps	local06, #0 wc
22344     58 00 90 CD |  if_b	jmp	#LR__3068
22348     18 4E 05 F1 | 	add	fp, #24
2234c     A7 28 02 FB | 	rdlong	local06, fp
22350     40 4E 05 F1 | 	add	fp, #64
22354     A7 2A 02 FB | 	rdlong	local07, fp
22358     58 4E 85 F1 | 	sub	fp, #88
2235c     15 29 52 F2 | 	cmps	local06, local07 wc
22360     3C 00 90 3D |  if_ae	jmp	#LR__3068
22364     C0 4E 05 F1 | 	add	fp, #192
22368     A7 2C 02 FB | 	rdlong	local08, fp
2236c     16 2B 02 F6 | 	mov	local07, local08
22370     01 2A 06 F1 | 	add	local07, #1
22374     A7 2A 62 FC | 	wrlong	local07, fp
22378     A8 4E 85 F1 | 	sub	fp, #168
2237c     A7 2A 02 FB | 	rdlong	local07, fp
22380     15 2F 02 F6 | 	mov	local09, local07
22384     58 4E 05 F1 | 	add	fp, #88
22388     A7 30 02 F6 | 	mov	local10, fp
2238c     A7 2E 02 F1 | 	add	local09, fp
22390     17 33 C2 FA | 	rdbyte	local11, local09
22394     16 33 42 FC | 	wrbyte	local11, local08
22398     70 4E 85 F1 | 	sub	fp, #112
2239c     20 00 90 FD | 	jmp	#LR__3069
223a0                 | LR__3068
223a0     C0 4E 05 F1 | 	add	fp, #192
223a4     A7 2C 02 FB | 	rdlong	local08, fp
223a8     16 2F 02 F6 | 	mov	local09, local08
223ac     01 2E 06 F1 | 	add	local09, #1
223b0     A7 2E 62 FC | 	wrlong	local09, fp
223b4     C0 4E 85 F1 | 	sub	fp, #192
223b8     30 2E 06 F6 | 	mov	local09, #48
223bc     16 61 48 FC | 	wrbyte	#48, local08
223c0                 | LR__3069
223c0     18 4E 05 F1 | 	add	fp, #24
223c4     A7 28 02 FB | 	rdlong	local06, fp
223c8     38 4E 05 F1 | 	add	fp, #56
223cc     A7 34 02 FB | 	rdlong	local12, fp
223d0     50 4E 85 F1 | 	sub	fp, #80
223d4     1A 29 0A F2 | 	cmp	local06, local12 wz
223d8     5C 00 90 5D |  if_ne	jmp	#LR__3071
223dc     10 4F 05 F1 | 	add	fp, #272
223e0     A7 2A 02 FB | 	rdlong	local07, fp
223e4     10 4F 85 F1 | 	sub	fp, #272
223e8     15 2F 0A F6 | 	mov	local09, local07 wz
223ec     28 00 90 5D |  if_ne	jmp	#LR__3070
223f0     54 4E 05 F1 | 	add	fp, #84
223f4     A7 32 02 FB | 	rdlong	local11, fp
223f8     19 31 02 F6 | 	mov	local10, local11
223fc     01 30 86 F1 | 	sub	local10, #1
22400     3C 4E 85 F1 | 	sub	fp, #60
22404     A7 36 02 FB | 	rdlong	local13, fp
22408     18 4E 85 F1 | 	sub	fp, #24
2240c     1B 39 02 F6 | 	mov	local14, local13
22410     18 39 52 F2 | 	cmps	local14, local10 wc
22414     20 00 90 3D |  if_ae	jmp	#LR__3071
22418                 | LR__3070
22418     C0 4E 05 F1 | 	add	fp, #192
2241c     A7 2C 02 FB | 	rdlong	local08, fp
22420     16 35 02 F6 | 	mov	local12, local08
22424     01 34 06 F1 | 	add	local12, #1
22428     A7 34 62 FC | 	wrlong	local12, fp
2242c     C0 4E 85 F1 | 	sub	fp, #192
22430     2E 2E 06 F6 | 	mov	local09, #46
22434     16 5D 48 FC | 	wrbyte	#46, local08
22438                 | LR__3071
22438     18 4E 05 F1 | 	add	fp, #24
2243c     A7 3A 02 FB | 	rdlong	local15, fp
22440     1D 35 02 F6 | 	mov	local12, local15
22444     01 34 06 F1 | 	add	local12, #1
22448     A7 34 62 FC | 	wrlong	local12, fp
2244c     18 4E 85 F1 | 	sub	fp, #24
22450     C4 FE 9F FD | 	jmp	#LR__3067
22454                 | LR__3072
22454                 | LR__3073
22454     34 4E 05 F1 | 	add	fp, #52
22458     A7 1E 0A FB | 	rdlong	local01, fp wz
2245c     34 4E 85 F1 | 	sub	fp, #52
22460     A0 00 90 AD |  if_e	jmp	#LR__3077
22464     C0 4E 05 F1 | 	add	fp, #192
22468     A7 1E 02 FB | 	rdlong	local01, fp
2246c     01 1E 86 F1 | 	sub	local01, #1
22470     A7 1E 62 FC | 	wrlong	local01, fp
22474     C0 4E 85 F1 | 	sub	fp, #192
22478     97 26 48 FB | 	callpa	#(@LR__3075-@LR__3074)>>2,fcache_load_ptr_
2247c                 | LR__3074
2247c     C0 4E 05 F1 | 	add	fp, #192
22480     A7 1E 02 FB | 	rdlong	local01, fp
22484     04 4E 05 F1 | 	add	fp, #4
22488     A7 22 02 FB | 	rdlong	local03, fp
2248c     C4 4E 85 F1 | 	sub	fp, #196
22490     11 1F 5A F2 | 	cmps	local01, local03 wcz
22494     30 00 90 ED |  if_be	jmp	#LR__3076
22498     C0 4E 05 F1 | 	add	fp, #192
2249c     A7 28 02 FB | 	rdlong	local06, fp
224a0     C0 4E 85 F1 | 	sub	fp, #192
224a4     14 25 C2 FA | 	rdbyte	local04, local06
224a8     30 24 0E F2 | 	cmp	local04, #48 wz
224ac     18 00 90 5D |  if_ne	jmp	#LR__3076
224b0     C0 4E 05 F1 | 	add	fp, #192
224b4     A7 1E 02 FB | 	rdlong	local01, fp
224b8     01 1E 86 F1 | 	sub	local01, #1
224bc     A7 1E 62 FC | 	wrlong	local01, fp
224c0     C0 4E 85 F1 | 	sub	fp, #192
224c4     B4 FF 9F FD | 	jmp	#LR__3074
224c8                 | LR__3075
224c8                 | LR__3076
224c8     C0 4E 05 F1 | 	add	fp, #192
224cc     A7 20 02 FB | 	rdlong	local02, fp
224d0     C0 4E 85 F1 | 	sub	fp, #192
224d4     10 1F C2 FA | 	rdbyte	local01, local02
224d8     2E 1E 0E F2 | 	cmp	local01, #46 wz
224dc     C0 4E 05 A1 |  if_e	add	fp, #192
224e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
224e4     01 1E 86 A1 |  if_e	sub	local01, #1
224e8     A7 1E 62 AC |  if_e	wrlong	local01, fp
224ec     C0 4E 85 A1 |  if_e	sub	fp, #192
224f0     C0 4E 05 F1 | 	add	fp, #192
224f4     A7 22 02 FB | 	rdlong	local03, fp
224f8     01 22 06 F1 | 	add	local03, #1
224fc     A7 22 62 FC | 	wrlong	local03, fp
22500     C0 4E 85 F1 | 	sub	fp, #192
22504                 | LR__3077
22504     24 4E 05 F1 | 	add	fp, #36
22508     A7 1E 0A FB | 	rdlong	local01, fp wz
2250c     24 4E 85 F1 | 	sub	fp, #36
22510     B4 00 90 AD |  if_e	jmp	#LR__3080
22514     C0 4E 05 F1 | 	add	fp, #192
22518     A7 20 02 FB | 	rdlong	local02, fp
2251c     10 23 02 F6 | 	mov	local03, local02
22520     01 22 06 F1 | 	add	local03, #1
22524     A7 22 62 FC | 	wrlong	local03, fp
22528     90 4E 85 F1 | 	sub	fp, #144
2252c     A7 24 02 FB | 	rdlong	local04, fp
22530     10 25 42 FC | 	wrbyte	local04, local02
22534     90 4E 05 F1 | 	add	fp, #144
22538     A7 20 02 FB | 	rdlong	local02, fp
2253c     10 23 02 F6 | 	mov	local03, local02
22540     01 22 06 F1 | 	add	local03, #1
22544     A7 22 62 FC | 	wrlong	local03, fp
22548     60 4E 85 F1 | 	sub	fp, #96
2254c     A7 24 02 FB | 	rdlong	local04, fp
22550     10 25 42 FC | 	wrbyte	local04, local02
22554     48 4E 85 F1 | 	sub	fp, #72
22558     A7 00 68 FC | 	wrlong	#0, fp
2255c     18 4E 85 F1 | 	sub	fp, #24
22560                 | LR__3078
22560     18 4E 05 F1 | 	add	fp, #24
22564     A7 20 02 FB | 	rdlong	local02, fp
22568     44 4E 05 F1 | 	add	fp, #68
2256c     A7 26 02 FB | 	rdlong	local05, fp
22570     5C 4E 85 F1 | 	sub	fp, #92
22574     13 21 52 F2 | 	cmps	local02, local05 wc
22578     4C 00 90 3D |  if_ae	jmp	#LR__3079
2257c     C0 4E 05 F1 | 	add	fp, #192
22580     A7 2C 02 FB | 	rdlong	local08, fp
22584     16 35 02 F6 | 	mov	local12, local08
22588     01 34 06 F1 | 	add	local12, #1
2258c     A7 34 62 FC | 	wrlong	local12, fp
22590     A8 4E 85 F1 | 	sub	fp, #168
22594     A7 2A 02 FB | 	rdlong	local07, fp
22598     15 2F 02 F6 | 	mov	local09, local07
2259c     98 4E 05 F1 | 	add	fp, #152
225a0     A7 30 02 F6 | 	mov	local10, fp
225a4     A7 2E 02 F1 | 	add	local09, fp
225a8     17 33 C2 FA | 	rdbyte	local11, local09
225ac     16 33 42 FC | 	wrbyte	local11, local08
225b0     98 4E 85 F1 | 	sub	fp, #152
225b4     A7 34 02 FB | 	rdlong	local12, fp
225b8     01 34 06 F1 | 	add	local12, #1
225bc     A7 34 62 FC | 	wrlong	local12, fp
225c0     18 4E 85 F1 | 	sub	fp, #24
225c4     98 FF 9F FD | 	jmp	#LR__3078
225c8                 | LR__3079
225c8                 | LR__3080
225c8     C0 4E 05 F1 | 	add	fp, #192
225cc     A7 1E 02 FB | 	rdlong	local01, fp
225d0     C0 4E 85 F1 | 	sub	fp, #192
225d4     0F 01 48 FC | 	wrbyte	#0, local01
225d8                 | LR__3081
225d8     6C 4E 05 F1 | 	add	fp, #108
225dc     A7 1E 0A FB | 	rdlong	local01, fp wz
225e0     6C 4E 85 F1 | 	sub	fp, #108
225e4     90 01 90 AD |  if_e	jmp	#LR__3092
225e8     48 4E 05 F1 | 	add	fp, #72
225ec     A7 22 0A FB | 	rdlong	local03, fp wz
225f0     48 4E 85 F1 | 	sub	fp, #72
225f4     80 01 90 AD |  if_e	jmp	#LR__3092
225f8     C4 4E 05 F1 | 	add	fp, #196
225fc     A7 12 02 FB | 	rdlong	arg01, fp
22600     C4 4E 85 F1 | 	sub	fp, #196
22604     09 3D 02 F6 | 	mov	local16, arg01
22608     97 06 48 FB | 	callpa	#(@LR__3083-@LR__3082)>>2,fcache_load_ptr_
2260c                 | LR__3082
2260c     1E FB C9 FA | 	rdbyte	result1, local16 wz
22610     01 3C 06 51 |  if_ne	add	local16, #1
22614     F4 FF 9F 5D |  if_ne	jmp	#LR__3082
22618                 | LR__3083
22618     09 3D 82 F1 | 	sub	local16, arg01
2261c     1E 25 02 F6 | 	mov	local04, local16
22620     6C 4E 05 F1 | 	add	fp, #108
22624     A7 28 02 FB | 	rdlong	local06, fp
22628     6C 4E 85 F1 | 	sub	fp, #108
2262c     14 25 5A F2 | 	cmps	local04, local06 wcz
22630     44 01 90 ED |  if_be	jmp	#LR__3092
22634     C4 4E 05 F1 | 	add	fp, #196
22638     A7 1E 02 FB | 	rdlong	local01, fp
2263c     5C 4E 05 F1 | 	add	fp, #92
22640     A7 1E 62 FC | 	wrlong	local01, fp
22644     FC 4E 85 F1 | 	sub	fp, #252
22648     A7 1E 0A FB | 	rdlong	local01, fp wz
2264c     24 4E 85 F1 | 	sub	fp, #36
22650     20 00 90 AD |  if_e	jmp	#LR__3084
22654     B8 4E 05 F1 | 	add	fp, #184
22658     A7 00 68 FC | 	wrlong	#0, fp
2265c     4C 4E 85 F1 | 	sub	fp, #76
22660     A7 1E 02 FB | 	rdlong	local01, fp
22664     B0 4E 05 F1 | 	add	fp, #176
22668     A7 1E 62 FC | 	wrlong	local01, fp
2266c     1C 4F 85 F1 | 	sub	fp, #284
22670     24 00 90 FD | 	jmp	#LR__3085
22674                 | LR__3084
22674     6C 4E 05 F1 | 	add	fp, #108
22678     A7 1E 02 FB | 	rdlong	local01, fp
2267c     01 1E 86 F1 | 	sub	local01, #1
22680     4C 4E 05 F1 | 	add	fp, #76
22684     A7 22 02 FB | 	rdlong	local03, fp
22688     11 1F 82 F1 | 	sub	local01, local03
2268c     64 4E 05 F1 | 	add	fp, #100
22690     A7 1E 62 FC | 	wrlong	local01, fp
22694     1C 4F 85 F1 | 	sub	fp, #284
22698                 | LR__3085
22698     97 20 48 FB | 	callpa	#(@LR__3087-@LR__3086)>>2,fcache_load_ptr_
2269c                 | LR__3086
2269c     1C 4F 05 F1 | 	add	fp, #284
226a0     A7 1E 0A FB | 	rdlong	local01, fp wz
226a4     1C 4F 85 F1 | 	sub	fp, #284
226a8     30 00 90 AD |  if_e	jmp	#LR__3088
226ac     20 4F 05 F1 | 	add	fp, #288
226b0     A7 20 02 FB | 	rdlong	local02, fp
226b4     10 23 02 F6 | 	mov	local03, local02
226b8     01 22 06 F1 | 	add	local03, #1
226bc     A7 22 62 FC | 	wrlong	local03, fp
226c0     10 55 48 FC | 	wrbyte	#42, local02
226c4     04 4E 85 F1 | 	sub	fp, #4
226c8     A7 1E 02 FB | 	rdlong	local01, fp
226cc     01 1E 86 F1 | 	sub	local01, #1
226d0     A7 1E 62 FC | 	wrlong	local01, fp
226d4     1C 4F 85 F1 | 	sub	fp, #284
226d8     C0 FF 9F FD | 	jmp	#LR__3086
226dc                 | LR__3087
226dc                 | LR__3088
226dc     B8 4E 05 F1 | 	add	fp, #184
226e0     A7 1E 0A FB | 	rdlong	local01, fp wz
226e4     B8 4E 85 F1 | 	sub	fp, #184
226e8     70 00 90 AD |  if_e	jmp	#LR__3091
226ec     20 4F 05 F1 | 	add	fp, #288
226f0     A7 20 02 FB | 	rdlong	local02, fp
226f4     10 23 02 F6 | 	mov	local03, local02
226f8     01 22 06 F1 | 	add	local03, #1
226fc     A7 22 62 FC | 	wrlong	local03, fp
22700     10 5D 48 FC | 	wrbyte	#46, local02
22704     04 4E 85 F1 | 	sub	fp, #4
22708     A7 00 68 FC | 	wrlong	#0, fp
2270c     1C 4F 85 F1 | 	sub	fp, #284
22710                 | LR__3089
22710     1C 4F 05 F1 | 	add	fp, #284
22714     A7 20 02 FB | 	rdlong	local02, fp
22718     64 4E 85 F1 | 	sub	fp, #100
2271c     A7 26 02 FB | 	rdlong	local05, fp
22720     B8 4E 85 F1 | 	sub	fp, #184
22724     13 21 52 F2 | 	cmps	local02, local05 wc
22728     30 00 90 3D |  if_ae	jmp	#LR__3090
2272c     20 4F 05 F1 | 	add	fp, #288
22730     A7 2C 02 FB | 	rdlong	local08, fp
22734     16 35 02 F6 | 	mov	local12, local08
22738     01 34 06 F1 | 	add	local12, #1
2273c     A7 34 62 FC | 	wrlong	local12, fp
22740     16 55 48 FC | 	wrbyte	#42, local08
22744     04 4E 85 F1 | 	sub	fp, #4
22748     A7 34 02 FB | 	rdlong	local12, fp
2274c     01 34 06 F1 | 	add	local12, #1
22750     A7 34 62 FC | 	wrlong	local12, fp
22754     1C 4F 85 F1 | 	sub	fp, #284
22758     B4 FF 9F FD | 	jmp	#LR__3089
2275c                 | LR__3090
2275c                 | LR__3091
2275c     20 4F 05 F1 | 	add	fp, #288
22760     A7 20 02 FB | 	rdlong	local02, fp
22764     10 23 02 F6 | 	mov	local03, local02
22768     01 22 06 F1 | 	add	local03, #1
2276c     A7 22 62 FC | 	wrlong	local03, fp
22770     20 4F 85 F1 | 	sub	fp, #288
22774     10 01 48 FC | 	wrbyte	#0, local02
22778                 | LR__3092
22778     04 4E 05 F1 | 	add	fp, #4
2277c     A7 12 02 FB | 	rdlong	arg01, fp
22780     04 4E 05 F1 | 	add	fp, #4
22784     A7 14 02 FB | 	rdlong	arg02, fp
22788     BC 4E 05 F1 | 	add	fp, #188
2278c     A7 16 02 FB | 	rdlong	arg03, fp
22790     C4 4E 85 F1 | 	sub	fp, #196
22794     C4 EE BF FD | 	call	#__system___fmtstr
22798                 | LR__3093
22798     A7 F0 03 F6 | 	mov	ptra, fp
2279c     B2 00 A0 FD | 	call	#popregs_
227a0                 | __system___fmtfloat_ret
227a0     2D 00 64 FD | 	ret
227a4                 | 
227a4                 | __system__Left_S
227a4     04 4A 05 F6 | 	mov	COUNT_, #4
227a8     A8 00 A0 FD | 	call	#pushregs_
227ac     09 1F 02 F6 | 	mov	local01, arg01
227b0     0A 21 02 F6 | 	mov	local02, arg02
227b4     01 20 56 F2 | 	cmps	local02, #1 wc
227b8     7F 01 00 CF 
227bc     56 FB 05 C6 |  if_b	mov	result1, ##@LR__5003
227c0     5C 00 90 CD |  if_b	jmp	#LR__3103
227c4     0F 13 02 F6 | 	mov	arg01, local01
227c8     09 23 02 F6 | 	mov	local03, arg01
227cc     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
227d0                 | LR__3100
227d0     11 FB C9 FA | 	rdbyte	result1, local03 wz
227d4     01 22 06 51 |  if_ne	add	local03, #1
227d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
227dc                 | LR__3101
227dc     09 23 82 F1 | 	sub	local03, arg01
227e0     11 FB 01 F6 | 	mov	result1, local03
227e4     10 FB 59 F2 | 	cmps	result1, local02 wcz
227e8     0F FB 01 E6 |  if_be	mov	result1, local01
227ec     30 00 90 ED |  if_be	jmp	#LR__3103
227f0     10 13 02 F6 | 	mov	arg01, local02
227f4     02 12 06 F1 | 	add	arg01, #2
227f8     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
227fc     FD 24 0A F6 | 	mov	local04, result1 wz
22800     18 00 90 AD |  if_e	jmp	#LR__3102
22804     12 13 02 F6 | 	mov	arg01, local04
22808     0F 15 02 F6 | 	mov	arg02, local01
2280c     10 17 02 F6 | 	mov	arg03, local02
22810     34 DE BF FD | 	call	#__system____builtin_memmove
22814     12 21 02 F1 | 	add	local02, local04
22818     10 01 48 FC | 	wrbyte	#0, local02
2281c                 | LR__3102
2281c     12 FB 01 F6 | 	mov	result1, local04
22820                 | LR__3103
22820     A7 F0 03 F6 | 	mov	ptra, fp
22824     B2 00 A0 FD | 	call	#popregs_
22828                 | __system__Left_S_ret
22828     2D 00 64 FD | 	ret
2282c                 | 
2282c                 | __system__Right_S
2282c     05 4A 05 F6 | 	mov	COUNT_, #5
22830     A8 00 A0 FD | 	call	#pushregs_
22834     09 1F 02 F6 | 	mov	local01, arg01
22838     0A 21 02 F6 | 	mov	local02, arg02
2283c     01 20 56 F2 | 	cmps	local02, #1 wc
22840     7F 01 00 CF 
22844     57 FB 05 C6 |  if_b	mov	result1, ##@LR__5004
22848     64 00 90 CD |  if_b	jmp	#LR__3113
2284c     0F 13 02 F6 | 	mov	arg01, local01
22850     09 23 02 F6 | 	mov	local03, arg01
22854     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22858                 | LR__3110
22858     11 FB C9 FA | 	rdbyte	result1, local03 wz
2285c     01 22 06 51 |  if_ne	add	local03, #1
22860     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22864                 | LR__3111
22864     09 23 82 F1 | 	sub	local03, arg01
22868     11 FB 01 F6 | 	mov	result1, local03
2286c     FD 24 02 F6 | 	mov	local04, result1
22870     10 25 5A F2 | 	cmps	local04, local02 wcz
22874     0F FB 01 E6 |  if_be	mov	result1, local01
22878     34 00 90 ED |  if_be	jmp	#LR__3113
2287c     10 13 02 F6 | 	mov	arg01, local02
22880     02 12 06 F1 | 	add	arg01, #2
22884     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22888     FD 26 0A F6 | 	mov	local05, result1 wz
2288c     1C 00 90 AD |  if_e	jmp	#LR__3112
22890     10 25 82 F1 | 	sub	local04, local02
22894     0F 25 02 F1 | 	add	local04, local01
22898     01 20 06 F1 | 	add	local02, #1
2289c     13 13 02 F6 | 	mov	arg01, local05
228a0     12 15 02 F6 | 	mov	arg02, local04
228a4     10 17 02 F6 | 	mov	arg03, local02
228a8     9C DD BF FD | 	call	#__system____builtin_memmove
228ac                 | LR__3112
228ac     13 FB 01 F6 | 	mov	result1, local05
228b0                 | LR__3113
228b0     A7 F0 03 F6 | 	mov	ptra, fp
228b4     B2 00 A0 FD | 	call	#popregs_
228b8                 | __system__Right_S_ret
228b8     2D 00 64 FD | 	ret
228bc                 | 
228bc                 | __system__Mid_S
228bc     05 4A 05 F6 | 	mov	COUNT_, #5
228c0     A8 00 A0 FD | 	call	#pushregs_
228c4     09 1F 02 F6 | 	mov	local01, arg01
228c8     0A 21 02 F6 | 	mov	local02, arg02
228cc     01 16 56 F2 | 	cmps	arg03, #1 wc
228d0     7F 01 00 CF 
228d4     58 FB 05 C6 |  if_b	mov	result1, ##@LR__5005
228d8     80 00 90 CD |  if_b	jmp	#LR__3123
228dc     01 20 86 F1 | 	sub	local02, #1
228e0     00 20 56 F3 | 	fges	local02, #0 wc
228e4     0F 13 02 F6 | 	mov	arg01, local01
228e8     09 23 02 F6 | 	mov	local03, arg01
228ec     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
228f0                 | LR__3120
228f0     11 FB C9 FA | 	rdbyte	result1, local03 wz
228f4     01 22 06 51 |  if_ne	add	local03, #1
228f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
228fc                 | LR__3121
228fc     09 23 82 F1 | 	sub	local03, arg01
22900     11 FB 01 F6 | 	mov	result1, local03
22904     FD 14 02 F6 | 	mov	arg02, result1
22908     10 15 52 F2 | 	cmps	arg02, local02 wc
2290c     7F 01 00 CF 
22910     59 FB 05 C6 |  if_b	mov	result1, ##@LR__5006
22914     44 00 90 CD |  if_b	jmp	#LR__3123
22918     0A 25 02 F6 | 	mov	local04, arg02
2291c     10 25 82 F1 | 	sub	local04, local02
22920     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22924     0B 25 02 16 |  if_a	mov	local04, arg03
22928     12 13 02 F6 | 	mov	arg01, local04
2292c     02 12 06 F1 | 	add	arg01, #2
22930     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22934     FD 26 0A F6 | 	mov	local05, result1 wz
22938     1C 00 90 AD |  if_e	jmp	#LR__3122
2293c     0F 21 02 F1 | 	add	local02, local01
22940     13 13 02 F6 | 	mov	arg01, local05
22944     10 15 02 F6 | 	mov	arg02, local02
22948     12 17 02 F6 | 	mov	arg03, local04
2294c     F8 DC BF FD | 	call	#__system____builtin_memmove
22950     13 25 02 F1 | 	add	local04, local05
22954     12 01 48 FC | 	wrbyte	#0, local04
22958                 | LR__3122
22958     13 FB 01 F6 | 	mov	result1, local05
2295c                 | LR__3123
2295c     A7 F0 03 F6 | 	mov	ptra, fp
22960     B2 00 A0 FD | 	call	#popregs_
22964                 | __system__Mid_S_ret
22964     2D 00 64 FD | 	ret
22968                 | 
22968                 | __system__Chr_S
22968     01 4A 05 F6 | 	mov	COUNT_, #1
2296c     A8 00 A0 FD | 	call	#pushregs_
22970     09 1F 02 F6 | 	mov	local01, arg01
22974     03 12 06 F6 | 	mov	arg01, #3
22978     64 1C B0 FD | 	call	#__system___gc_alloc_managed
2297c     00 FA 4D F2 | 	cmps	result1, #0 wz
22980     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22984     01 FA 05 51 |  if_ne	add	result1, #1
22988     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2298c     01 FA 85 51 |  if_ne	sub	result1, #1
22990     A7 F0 03 F6 | 	mov	ptra, fp
22994     B2 00 A0 FD | 	call	#popregs_
22998                 | __system__Chr_S_ret
22998     2D 00 64 FD | 	ret
2299c                 | 
2299c                 | __system__str_S
2299c     02 4A 05 F6 | 	mov	COUNT_, #2
229a0     A8 00 A0 FD | 	call	#pushregs_
229a4     09 1F 02 F6 | 	mov	local01, arg01
229a8     10 12 06 F6 | 	mov	arg01, #16
229ac     30 1C B0 FD | 	call	#__system___gc_alloc_managed
229b0     FD 20 0A F6 | 	mov	local02, result1 wz
229b4     30 00 90 AD |  if_e	jmp	#LR__3130
229b8     F8 13 02 F6 | 	mov	arg01, ptra
229bc     08 F0 07 F1 | 	add	ptra, #8
229c0     09 21 62 FC | 	wrlong	local02, arg01
229c4     04 12 06 F1 | 	add	arg01, #4
229c8     09 01 68 FC | 	wrlong	#0, arg01
229cc     04 12 86 F1 | 	sub	arg01, #4
229d0     00 A8 04 FF 
229d4     00 12 46 F5 | 	or	arg01, ##156237824
229d8     00 14 06 F6 | 	mov	arg02, #0
229dc     0F 17 02 F6 | 	mov	arg03, local01
229e0     67 18 06 F6 | 	mov	arg04, #103
229e4     90 EE BF FD | 	call	#__system___fmtfloat
229e8                 | LR__3130
229e8     10 FB 01 F6 | 	mov	result1, local02
229ec     A7 F0 03 F6 | 	mov	ptra, fp
229f0     B2 00 A0 FD | 	call	#popregs_
229f4                 | __system__str_S_ret
229f4     2D 00 64 FD | 	ret
229f8                 | 
229f8                 | __system__Number_S
229f8     08 4A 05 F6 | 	mov	COUNT_, #8
229fc     A8 00 A0 FD | 	call	#pushregs_
22a00     09 1F 02 F6 | 	mov	local01, arg01
22a04     0A 21 0A F6 | 	mov	local02, arg02 wz
22a08     0B 23 02 F6 | 	mov	local03, arg03
22a0c     3C 00 90 5D |  if_ne	jmp	#LR__3142
22a10     01 20 06 F6 | 	mov	local02, #1
22a14     11 25 02 F6 | 	mov	local04, local03
22a18     01 26 06 F6 | 	mov	local05, #1
22a1c     97 16 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
22a20                 | LR__3140
22a20     00 28 06 F6 | 	mov	local06, #0
22a24     0F 25 1A F2 | 	cmp	local04, local01 wcz
22a28     01 28 66 E6 |  if_be	neg	local06, #1
22a2c     12 27 12 F2 | 	cmp	local05, local04 wc
22a30     15 2B A2 F1 | 	subx	local07, local07
22a34     15 29 CA F7 | 	test	local06, local07 wz
22a38     11 25 02 5D |  if_ne	qmul	local04, local03
22a3c     12 27 02 56 |  if_ne	mov	local05, local04
22a40     01 20 06 51 |  if_ne	add	local02, #1
22a44     18 24 62 5D |  if_ne	getqx	local04
22a48     D4 FF 9F 5D |  if_ne	jmp	#LR__3140
22a4c                 | LR__3141
22a4c                 | LR__3142
22a4c     20 20 36 F3 | 	fle	local02, #32 wc
22a50     10 13 02 F6 | 	mov	arg01, local02
22a54     02 12 06 F1 | 	add	arg01, #2
22a58     84 1B B0 FD | 	call	#__system___gc_alloc_managed
22a5c     FD 28 02 F6 | 	mov	local06, result1
22a60     10 2B 02 F6 | 	mov	local07, local02
22a64     14 2B 02 F1 | 	add	local07, local06
22a68     15 01 48 FC | 	wrbyte	#0, local07
22a6c     97 1A 48 FB | 	callpa	#(@LR__3144-@LR__3143)>>2,fcache_load_ptr_
22a70                 | LR__3143
22a70     01 20 16 F2 | 	cmp	local02, #1 wc
22a74     2C 00 90 CD |  if_b	jmp	#LR__3145
22a78     11 1F 12 FD | 	qdiv	local01, local03
22a7c     01 20 86 F1 | 	sub	local02, #1
22a80     10 2B 02 F6 | 	mov	local07, local02
22a84     14 2B 02 F1 | 	add	local07, local06
22a88     19 2C 62 FD | 	getqy	local08
22a8c     0A 2C 16 F2 | 	cmp	local08, #10 wc
22a90     30 2C 06 C1 |  if_b	add	local08, #48
22a94     37 2C 06 31 |  if_ae	add	local08, #55
22a98     15 2D 42 FC | 	wrbyte	local08, local07
22a9c     18 1E 62 FD | 	getqx	local01
22aa0     CC FF 9F FD | 	jmp	#LR__3143
22aa4                 | LR__3144
22aa4                 | LR__3145
22aa4     14 FB 01 F6 | 	mov	result1, local06
22aa8     A7 F0 03 F6 | 	mov	ptra, fp
22aac     B2 00 A0 FD | 	call	#popregs_
22ab0                 | __system__Number_S_ret
22ab0     2D 00 64 FD | 	ret
22ab4                 | 
22ab4                 | __system__LCase_S
22ab4     07 4A 05 F6 | 	mov	COUNT_, #7
22ab8     A8 00 A0 FD | 	call	#pushregs_
22abc     09 1F 02 F6 | 	mov	local01, arg01
22ac0     09 21 02 F6 | 	mov	local02, arg01
22ac4     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22ac8                 | LR__3150
22ac8     10 FB C9 FA | 	rdbyte	result1, local02 wz
22acc     01 20 06 51 |  if_ne	add	local02, #1
22ad0     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
22ad4                 | LR__3151
22ad4     09 21 82 F1 | 	sub	local02, arg01
22ad8     10 FB 01 F6 | 	mov	result1, local02
22adc     FD 20 0A F6 | 	mov	local02, result1 wz
22ae0     7F 01 00 AF 
22ae4     5A FB 05 A6 |  if_e	mov	result1, ##@LR__5007
22ae8     7C 00 90 AD |  if_e	jmp	#LR__3157
22aec     10 13 02 F6 | 	mov	arg01, local02
22af0     02 12 06 F1 | 	add	arg01, #2
22af4     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
22af8     FD 22 0A F6 | 	mov	local03, result1 wz
22afc     64 00 90 AD |  if_e	jmp	#LR__3156
22b00     01 24 66 F6 | 	neg	local04, #1
22b04     97 26 48 FB | 	callpa	#(@LR__3155-@LR__3152)>>2,fcache_load_ptr_
22b08                 | LR__3152
22b08     01 24 06 F1 | 	add	local04, #1
22b0c     12 27 02 F6 | 	mov	local05, local04
22b10     0F 27 02 F1 | 	add	local05, local01
22b14     13 29 C2 FA | 	rdbyte	local06, local05
22b18     41 28 56 F2 | 	cmps	local06, #65 wc
22b1c     18 00 90 CD |  if_b	jmp	#LR__3153
22b20     5B 28 56 F2 | 	cmps	local06, #91 wc
22b24     12 2B 02 C6 |  if_b	mov	local07, local04
22b28     11 2B 02 C1 |  if_b	add	local07, local03
22b2c     20 28 06 C1 |  if_b	add	local06, #32
22b30     15 29 42 CC |  if_b	wrbyte	local06, local07
22b34     0C 00 90 CD |  if_b	jmp	#LR__3154
22b38                 | LR__3153
22b38     12 2B 02 F6 | 	mov	local07, local04
22b3c     11 2B 02 F1 | 	add	local07, local03
22b40     15 29 42 FC | 	wrbyte	local06, local07
22b44                 | LR__3154
22b44     10 29 02 F6 | 	mov	local06, local02
22b48     01 28 86 F1 | 	sub	local06, #1
22b4c     14 25 0A F2 | 	cmp	local04, local06 wz
22b50     B4 FF 9F 5D |  if_ne	jmp	#LR__3152
22b54                 | LR__3155
22b54     11 21 02 F1 | 	add	local02, local03
22b58     10 01 48 FC | 	wrbyte	#0, local02
22b5c     11 FB 01 F6 | 	mov	result1, local03
22b60     04 00 90 FD | 	jmp	#LR__3157
22b64                 | LR__3156
22b64     11 FB 01 F6 | 	mov	result1, local03
22b68                 | LR__3157
22b68     A7 F0 03 F6 | 	mov	ptra, fp
22b6c     B2 00 A0 FD | 	call	#popregs_
22b70                 | __system__LCase_S_ret
22b70     2D 00 64 FD | 	ret
22b74                 | 
22b74                 | __system__LTrim_S
22b74     05 4A 05 F6 | 	mov	COUNT_, #5
22b78     A8 00 A0 FD | 	call	#pushregs_
22b7c     09 1F 02 F6 | 	mov	local01, arg01
22b80     09 21 02 F6 | 	mov	local02, arg01
22b84     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22b88                 | LR__3160
22b88     10 FB C9 FA | 	rdbyte	result1, local02 wz
22b8c     01 20 06 51 |  if_ne	add	local02, #1
22b90     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22b94                 | LR__3161
22b94     09 21 82 F1 | 	sub	local02, arg01
22b98     10 FB 01 F6 | 	mov	result1, local02
22b9c     FD 20 0A F6 | 	mov	local02, result1 wz
22ba0     7F 01 00 AF 
22ba4     5B FB 05 A6 |  if_e	mov	result1, ##@LR__5008
22ba8     7C 00 90 AD |  if_e	jmp	#LR__3166
22bac     00 22 06 F6 | 	mov	local03, #0
22bb0     10 25 02 F6 | 	mov	local04, local02
22bb4                 | LR__3162
22bb4     12 23 52 F2 | 	cmps	local03, local04 wc
22bb8     68 00 90 3D |  if_ae	jmp	#LR__3165
22bbc     11 17 02 F6 | 	mov	arg03, local03
22bc0     0F 17 02 F1 | 	add	arg03, local01
22bc4     0B 17 C2 FA | 	rdbyte	arg03, arg03
22bc8     20 16 0E F2 | 	cmp	arg03, #32 wz
22bcc     4C 00 90 AD |  if_e	jmp	#LR__3164
22bd0     10 13 02 F6 | 	mov	arg01, local02
22bd4     11 13 82 F1 | 	sub	arg01, local03
22bd8     02 12 06 F1 | 	add	arg01, #2
22bdc     00 1A B0 FD | 	call	#__system___gc_alloc_managed
22be0     FD 26 0A F6 | 	mov	local05, result1 wz
22be4     2C 00 90 AD |  if_e	jmp	#LR__3163
22be8     11 15 02 F6 | 	mov	arg02, local03
22bec     0F 15 02 F1 | 	add	arg02, local01
22bf0     10 17 02 F6 | 	mov	arg03, local02
22bf4     11 17 82 F1 | 	sub	arg03, local03
22bf8     13 13 02 F6 | 	mov	arg01, local05
22bfc     48 DA BF FD | 	call	#__system____builtin_memmove
22c00     11 21 82 F1 | 	sub	local02, local03
22c04     13 21 02 F1 | 	add	local02, local05
22c08     10 01 48 FC | 	wrbyte	#0, local02
22c0c     13 FB 01 F6 | 	mov	result1, local05
22c10     14 00 90 FD | 	jmp	#LR__3166
22c14                 | LR__3163
22c14     13 FB 01 F6 | 	mov	result1, local05
22c18     0C 00 90 FD | 	jmp	#LR__3166
22c1c                 | LR__3164
22c1c     01 22 06 F1 | 	add	local03, #1
22c20     90 FF 9F FD | 	jmp	#LR__3162
22c24                 | LR__3165
22c24     0F FB 01 F6 | 	mov	result1, local01
22c28                 | LR__3166
22c28     A7 F0 03 F6 | 	mov	ptra, fp
22c2c     B2 00 A0 FD | 	call	#popregs_
22c30                 | __system__LTrim_S_ret
22c30     2D 00 64 FD | 	ret
22c34                 | 
22c34                 | __system__RTrim_S
22c34     04 4A 05 F6 | 	mov	COUNT_, #4
22c38     A8 00 A0 FD | 	call	#pushregs_
22c3c     09 1F 02 F6 | 	mov	local01, arg01
22c40     09 21 02 F6 | 	mov	local02, arg01
22c44     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22c48                 | LR__3170
22c48     10 FB C9 FA | 	rdbyte	result1, local02 wz
22c4c     01 20 06 51 |  if_ne	add	local02, #1
22c50     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22c54                 | LR__3171
22c54     09 21 82 F1 | 	sub	local02, arg01
22c58     10 FB 01 F6 | 	mov	result1, local02
22c5c     FD 20 0A F6 | 	mov	local02, result1 wz
22c60     7F 01 00 AF 
22c64     5C FB 05 A6 |  if_e	mov	result1, ##@LR__5009
22c68     74 00 90 AD |  if_e	jmp	#LR__3175
22c6c     10 23 02 F6 | 	mov	local03, local02
22c70     01 22 86 F1 | 	sub	local03, #1
22c74                 | LR__3172
22c74     11 15 02 F6 | 	mov	arg02, local03
22c78     0F 15 02 F1 | 	add	arg02, local01
22c7c     0A 21 C2 FA | 	rdbyte	local02, arg02
22c80     20 20 0E F2 | 	cmp	local02, #32 wz
22c84     44 00 90 AD |  if_e	jmp	#LR__3174
22c88     11 13 02 F6 | 	mov	arg01, local03
22c8c     02 12 06 F1 | 	add	arg01, #2
22c90     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
22c94     FD 24 0A F6 | 	mov	local04, result1 wz
22c98     28 00 90 AD |  if_e	jmp	#LR__3173
22c9c     11 17 02 F6 | 	mov	arg03, local03
22ca0     01 16 06 F1 | 	add	arg03, #1
22ca4     12 13 02 F6 | 	mov	arg01, local04
22ca8     0F 15 02 F6 | 	mov	arg02, local01
22cac     98 D9 BF FD | 	call	#__system____builtin_memmove
22cb0     01 22 06 F1 | 	add	local03, #1
22cb4     12 23 02 F1 | 	add	local03, local04
22cb8     11 01 48 FC | 	wrbyte	#0, local03
22cbc     12 FB 01 F6 | 	mov	result1, local04
22cc0     1C 00 90 FD | 	jmp	#LR__3175
22cc4                 | LR__3173
22cc4     12 FB 01 F6 | 	mov	result1, local04
22cc8     14 00 90 FD | 	jmp	#LR__3175
22ccc                 | LR__3174
22ccc     01 22 86 F1 | 	sub	local03, #1
22cd0     00 22 56 F2 | 	cmps	local03, #0 wc
22cd4     9C FF 9F 3D |  if_ae	jmp	#LR__3172
22cd8     7F 01 00 FF 
22cdc     5D FB 05 F6 | 	mov	result1, ##@LR__5010
22ce0                 | LR__3175
22ce0     A7 F0 03 F6 | 	mov	ptra, fp
22ce4     B2 00 A0 FD | 	call	#popregs_
22ce8                 | __system__RTrim_S_ret
22ce8     2D 00 64 FD | 	ret
22cec                 | 
22cec                 | __system__Instr
22cec     07 4A 05 F6 | 	mov	COUNT_, #7
22cf0     A8 00 A0 FD | 	call	#pushregs_
22cf4     09 1F 02 F6 | 	mov	local01, arg01
22cf8     0A 21 02 F6 | 	mov	local02, arg02
22cfc     0B 23 02 F6 | 	mov	local03, arg03
22d00     11 13 02 F6 | 	mov	arg01, local03
22d04     09 25 02 F6 | 	mov	local04, arg01
22d08     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
22d0c                 | LR__3180
22d0c     12 FB C9 FA | 	rdbyte	result1, local04 wz
22d10     01 24 06 51 |  if_ne	add	local04, #1
22d14     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
22d18                 | LR__3181
22d18     09 25 82 F1 | 	sub	local04, arg01
22d1c     12 27 02 F6 | 	mov	local05, local04
22d20     10 13 02 F6 | 	mov	arg01, local02
22d24     09 25 02 F6 | 	mov	local04, arg01
22d28     97 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
22d2c                 | LR__3182
22d2c     12 FB C9 FA | 	rdbyte	result1, local04 wz
22d30     01 24 06 51 |  if_ne	add	local04, #1
22d34     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
22d38                 | LR__3183
22d38     09 25 82 F1 | 	sub	local04, arg01
22d3c     12 FB 01 F6 | 	mov	result1, local04
22d40     FD 18 0A F6 | 	mov	arg04, result1 wz
22d44     00 FA 05 A6 |  if_e	mov	result1, #0
22d48     98 00 90 AD |  if_e	jmp	#LR__3187
22d4c     00 26 0E F2 | 	cmp	local05, #0 wz
22d50     00 FA 05 A6 |  if_e	mov	result1, #0
22d54     8C 00 90 AD |  if_e	jmp	#LR__3187
22d58     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22d5c     00 FA 05 16 |  if_a	mov	result1, #0
22d60     80 00 90 1D |  if_a	jmp	#LR__3187
22d64     01 1E 56 F2 | 	cmps	local01, #1 wc
22d68     01 1E 06 C6 |  if_b	mov	local01, #1
22d6c     11 29 C2 FA | 	rdbyte	local06, local03
22d70     01 26 0E F2 | 	cmp	local05, #1 wz
22d74     18 00 90 5D |  if_ne	jmp	#LR__3184
22d78     10 13 02 F6 | 	mov	arg01, local02
22d7c     14 15 02 F6 | 	mov	arg02, local06
22d80     0F 17 02 F6 | 	mov	arg03, local01
22d84     00 18 06 F6 | 	mov	arg04, #0
22d88     2C 34 B0 FD | 	call	#__system____ScanForChar
22d8c     54 00 90 FD | 	jmp	#LR__3187
22d90                 | LR__3184
22d90     0F 2B 02 F6 | 	mov	local07, local01
22d94                 | LR__3185
22d94     10 13 02 F6 | 	mov	arg01, local02
22d98     14 15 02 F6 | 	mov	arg02, local06
22d9c     15 17 02 F6 | 	mov	arg03, local07
22da0     00 18 06 F6 | 	mov	arg04, #0
22da4     10 34 B0 FD | 	call	#__system____ScanForChar
22da8     FD 2A 0A F6 | 	mov	local07, result1 wz
22dac     30 00 90 AD |  if_e	jmp	#LR__3186
22db0     13 17 02 F6 | 	mov	arg03, local05
22db4     10 13 02 F6 | 	mov	arg01, local02
22db8     15 15 02 F6 | 	mov	arg02, local07
22dbc     FC FA BF FD | 	call	#__system__Mid_S
22dc0     FD 12 02 F6 | 	mov	arg01, result1
22dc4     11 15 02 F6 | 	mov	arg02, local03
22dc8     84 D9 BF FD | 	call	#__system___string_cmp
22dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
22dd0     15 FB 01 A6 |  if_e	mov	result1, local07
22dd4     0C 00 90 AD |  if_e	jmp	#LR__3187
22dd8     13 2B 02 F1 | 	add	local07, local05
22ddc     B4 FF 9F FD | 	jmp	#LR__3185
22de0                 | LR__3186
22de0     00 FA 05 F6 | 	mov	result1, #0
22de4                 | LR__3187
22de4     A7 F0 03 F6 | 	mov	ptra, fp
22de8     B2 00 A0 FD | 	call	#popregs_
22dec                 | __system__Instr_ret
22dec     2D 00 64 FD | 	ret
22df0                 | 
22df0                 | __system___strerror
22df0     00 12 56 F2 | 	cmps	arg01, #0 wc
22df4     08 00 90 CD |  if_b	jmp	#LR__3190
22df8     1A 12 56 F2 | 	cmps	arg01, #26 wc
22dfc     04 00 90 CD |  if_b	jmp	#LR__3191
22e00                 | LR__3190
22e00     19 12 06 F6 | 	mov	arg01, #25
22e04                 | LR__3191
22e04     02 12 66 F0 | 	shl	arg01, #2
22e08     01 00 00 FF 
22e0c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
22e10     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22e14     09 FB 01 FB | 	rdlong	result1, arg01
22e18     01 00 00 FF 
22e1c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
22e20                 | __system___strerror_ret
22e20     2D 00 64 FD | 	ret
22e24                 | 
22e24                 | __system___int64_shl
22e24     20 16 CE F7 | 	test	arg03, #32 wz
22e28     09 15 02 56 |  if_ne	mov	arg02, arg01
22e2c     00 12 06 56 |  if_ne	mov	arg01, #0
22e30     1F 16 CE F7 | 	test	arg03, #31 wz
22e34     18 00 90 AD |  if_e	jmp	#LR__3200
22e38     0B 15 62 F0 | 	shl	arg02, arg03
22e3c     09 FB 01 F6 | 	mov	result1, arg01
22e40     0B FD 61 F6 | 	neg	result2, arg03
22e44     FE FA 41 F0 | 	shr	result1, result2
22e48     FD 14 42 F5 | 	or	arg02, result1
22e4c     0B 13 62 F0 | 	shl	arg01, arg03
22e50                 | LR__3200
22e50     0A FD 01 F6 | 	mov	result2, arg02
22e54     09 FB 01 F6 | 	mov	result1, arg01
22e58                 | __system___int64_shl_ret
22e58     2D 00 64 FD | 	ret
22e5c                 | 
22e5c                 | __system___usepins
22e5c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22e60     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22e64     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
22e68     00 13 CA F7 | 	test	arg01, _var01 wz
22e6c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
22e70     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
22e74     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
22e78     01 15 CA A7 |  if_e	test	arg02, _var02 wz
22e7c     00 FA 05 56 |  if_ne	mov	result1, #0
22e80     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
22e84     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22e88     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22e8c     09 03 42 F5 | 	or	_var02, arg01
22e90     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22e94     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22e98     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22e9c     0A 03 42 F5 | 	or	_var02, arg02
22ea0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22ea4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22ea8     01 FA 65 F6 | 	neg	result1, #1
22eac                 | __system___usepins_ret
22eac     2D 00 64 FD | 	ret
22eb0                 | 
22eb0                 | __system___freepins
22eb0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22eb4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22eb8     09 01 22 F5 | 	andn	_var01, arg01
22ebc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22ec0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22ec4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22ec8     0A 01 22 F5 | 	andn	_var01, arg02
22ecc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22ed0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22ed4                 | __system___freepins_ret
22ed4     2D 00 64 FD | 	ret
22ed8                 | 
22ed8                 | __system___float_fromuns
22ed8     09 17 0A F6 | 	mov	arg03, arg01 wz
22edc     0B FB 01 A6 |  if_e	mov	result1, arg03
22ee0     24 00 90 AD |  if_e	jmp	#LR__3210
22ee4     0B 15 92 F7 | 	encod	arg02, arg03 wc
22ee8     01 14 06 C1 |  if_b	add	arg02, #1
22eec     01 14 86 F1 | 	sub	arg02, #1
22ef0     1F 12 06 F6 | 	mov	arg01, #31
22ef4     0A 13 82 F1 | 	sub	arg01, arg02
22ef8     09 17 62 F0 | 	shl	arg03, arg01
22efc     02 16 46 F0 | 	shr	arg03, #2
22f00     00 12 06 F6 | 	mov	arg01, #0
22f04     4C 09 B0 FD | 	call	#__system___float_Pack
22f08                 | LR__3210
22f08                 | __system___float_fromuns_ret
22f08     2D 00 64 FD | 	ret
22f0c                 | 
22f0c                 | __system___float_add
22f0c     0F 4A 05 F6 | 	mov	COUNT_, #15
22f10     A8 00 A0 FD | 	call	#pushregs_
22f14     09 1F 02 F6 | 	mov	local01, arg01
22f18     0A 21 02 F6 | 	mov	local02, arg02
22f1c     00 22 06 F6 | 	mov	local03, #0
22f20     0F 25 02 F6 | 	mov	local04, local01
22f24     12 27 02 F6 | 	mov	local05, local04
22f28     16 26 46 F7 | 	zerox	local05, #22
22f2c     12 29 02 F6 | 	mov	local06, local04
22f30     01 28 66 F0 | 	shl	local06, #1
22f34     18 28 46 F0 | 	shr	local06, #24
22f38     1F 24 46 F0 | 	shr	local04, #31
22f3c     10 13 02 F6 | 	mov	arg01, local02
22f40     09 FB 01 F6 | 	mov	result1, arg01
22f44     FD 2A 02 F6 | 	mov	local07, result1
22f48     15 2D 02 F6 | 	mov	local08, local07
22f4c     16 2C 46 F7 | 	zerox	local08, #22
22f50     15 2F 02 F6 | 	mov	local09, local07
22f54     01 2E 66 F0 | 	shl	local09, #1
22f58     18 2E 46 F0 | 	shr	local09, #24
22f5c     17 31 02 F6 | 	mov	local10, local09
22f60     1F 2A 46 F0 | 	shr	local07, #31
22f64     00 32 06 F6 | 	mov	local11, #0
22f68     00 34 06 F6 | 	mov	local12, #0
22f6c     18 29 12 F2 | 	cmp	local06, local10 wc
22f70     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
22f74     2C 00 90 1D |  if_a	jmp	#LR__3220
22f78     16 27 12 32 |  if_ae	cmp	local05, local08 wc
22f7c     24 00 90 3D |  if_ae	jmp	#LR__3220
22f80     13 37 02 F6 | 	mov	local13, local05
22f84     16 27 02 F6 | 	mov	local05, local08
22f88     1B 2D 02 F6 | 	mov	local08, local13
22f8c     14 37 02 F6 | 	mov	local13, local06
22f90     18 29 02 F6 | 	mov	local06, local10
22f94     1B 31 02 F6 | 	mov	local10, local13
22f98     12 37 02 F6 | 	mov	local13, local04
22f9c     15 25 02 F6 | 	mov	local04, local07
22fa0     1B 2B 02 F6 | 	mov	local07, local13
22fa4                 | LR__3220
22fa4     FF 28 0E F2 | 	cmp	local06, #255 wz
22fa8     70 01 90 AD |  if_e	jmp	#LR__3235
22fac     00 28 0E F2 | 	cmp	local06, #0 wz
22fb0     AC 01 90 AD |  if_e	jmp	#LR__3237
22fb4     17 26 26 F4 | 	bith	local05, #23
22fb8                 | LR__3221
22fb8     00 30 0E F2 | 	cmp	local10, #0 wz
22fbc     F0 01 90 AD |  if_e	jmp	#LR__3241
22fc0     17 2C 26 F4 | 	bith	local08, #23
22fc4                 | LR__3222
22fc4     7F 28 86 F1 | 	sub	local06, #127
22fc8     7F 30 86 F1 | 	sub	local10, #127
22fcc     14 39 02 F6 | 	mov	local14, local06
22fd0     18 39 82 F1 | 	sub	local14, local10
22fd4     97 14 48 FB | 	callpa	#(@LR__3224-@LR__3223)>>2,fcache_load_ptr_
22fd8                 | LR__3223
22fd8     20 38 56 F2 | 	cmps	local14, #32 wc
22fdc     20 00 90 CD |  if_b	jmp	#LR__3225
22fe0     16 2F 02 F6 | 	mov	local09, local08
22fe4     00 32 0E F2 | 	cmp	local11, #0 wz
22fe8     6F 32 62 FD | 	wrnz	local11
22fec     19 2F 42 F5 | 	or	local09, local11
22ff0     17 33 02 F6 | 	mov	local11, local09
22ff4     00 2C 06 F6 | 	mov	local08, #0
22ff8     20 38 86 F1 | 	sub	local14, #32
22ffc     D8 FF 9F FD | 	jmp	#LR__3223
23000                 | LR__3224
23000                 | LR__3225
23000     00 38 0E F2 | 	cmp	local14, #0 wz
23004     38 00 90 AD |  if_e	jmp	#LR__3226
23008     16 37 02 F6 | 	mov	local13, local08
2300c     20 30 06 F6 | 	mov	local10, #32
23010     1C 31 82 F1 | 	sub	local10, local14
23014     18 37 62 F0 | 	shl	local13, local10
23018     19 31 02 F6 | 	mov	local10, local11
2301c     20 2E 06 F6 | 	mov	local09, #32
23020     1C 2F 82 F1 | 	sub	local09, local14
23024     17 31 6A F0 | 	shl	local10, local09 wz
23028     1C 33 42 F0 | 	shr	local11, local14
2302c     1C 2D 42 F0 | 	shr	local08, local14
23030     1B 33 42 F5 | 	or	local11, local13
23034     00 3A 06 F6 | 	mov	local15, #0
23038     01 3A 06 56 |  if_ne	mov	local15, #1
2303c     1D 33 42 F5 | 	or	local11, local15
23040                 | LR__3226
23040     12 3B 02 F6 | 	mov	local15, local04
23044     15 3B 62 F5 | 	xor	local15, local07
23048     01 3A CE F7 | 	test	local15, #1 wz
2304c     18 00 90 AD |  if_e	jmp	#LR__3227
23050     16 2D 22 F6 | 	not	local08, local08
23054     19 33 22 F6 | 	not	local11, local11
23058     01 32 0E F1 | 	add	local11, #1 wz
2305c     00 3A 06 F6 | 	mov	local15, #0
23060     01 3A 06 A6 |  if_e	mov	local15, #1
23064     1D 2D 02 F1 | 	add	local08, local15
23068                 | LR__3227
23068     19 35 12 F1 | 	add	local12, local11 wc
2306c     16 27 22 F1 | 	addx	local05, local08
23070     00 26 56 F2 | 	cmps	local05, #0 wc
23074     1C 00 90 3D |  if_ae	jmp	#LR__3228
23078     01 24 66 F5 | 	xor	local04, #1
2307c     13 27 22 F6 | 	not	local05, local05
23080     1A 35 22 F6 | 	not	local12, local12
23084     01 34 0E F1 | 	add	local12, #1 wz
23088     00 3A 06 F6 | 	mov	local15, #0
2308c     01 3A 06 A6 |  if_e	mov	local15, #1
23090     1D 27 02 F1 | 	add	local05, local15
23094                 | LR__3228
23094     00 80 00 FF 
23098     00 26 16 F2 | 	cmp	local05, ##16777216 wc
2309c     28 00 90 CD |  if_b	jmp	#LR__3229
230a0     01 28 06 F1 | 	add	local06, #1
230a4     1A 39 02 F6 | 	mov	local14, local12
230a8     01 38 06 F5 | 	and	local14, #1
230ac     01 34 46 F0 | 	shr	local12, #1
230b0     13 3B 02 F6 | 	mov	local15, local05
230b4     1F 3A 66 F0 | 	shl	local15, #31
230b8     1D 35 42 F5 | 	or	local12, local15
230bc     1C 35 42 F5 | 	or	local12, local14
230c0     01 26 46 F0 | 	shr	local05, #1
230c4     3C 00 90 FD | 	jmp	#LR__3234
230c8                 | LR__3229
230c8     00 40 00 FF 
230cc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
230d0     30 00 90 3D |  if_ae	jmp	#LR__3233
230d4     00 26 0E F2 | 	cmp	local05, #0 wz
230d8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
230dc     08 24 46 A5 |  if_e	or	local04, #8
230e0     01 24 26 A5 |  if_e	andn	local04, #1
230e4     1C 00 90 AD |  if_e	jmp	#LR__3232
230e8                 | LR__3230
230e8     00 40 00 FF 
230ec     00 26 16 F2 | 	cmp	local05, ##8388608 wc
230f0     10 00 90 3D |  if_ae	jmp	#LR__3231
230f4     1A 35 12 F1 | 	add	local12, local12 wc
230f8     13 27 22 F1 | 	addx	local05, local05
230fc     01 28 86 F1 | 	sub	local06, #1
23100     E4 FF 9F FD | 	jmp	#LR__3230
23104                 | LR__3231
23104                 | LR__3232
23104                 | LR__3233
23104                 | LR__3234
23104     13 13 02 F6 | 	mov	arg01, local05
23108     1A 15 02 F6 | 	mov	arg02, local12
2310c     14 17 02 F6 | 	mov	arg03, local06
23110     12 19 02 F6 | 	mov	arg04, local04
23114     E4 34 B0 FD | 	call	#__system__pack_0606
23118     DC 00 90 FD | 	jmp	#LR__3245
2311c                 | LR__3235
2311c     FF 30 0E F2 | 	cmp	local10, #255 wz
23120     10 00 90 5D |  if_ne	jmp	#LR__3236
23124     12 2B 0A F2 | 	cmp	local07, local04 wz
23128     00 F8 3F 5F 
2312c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23130     C4 00 90 5D |  if_ne	jmp	#LR__3245
23134                 | LR__3236
23134     00 26 0E F2 | 	cmp	local05, #0 wz
23138     00 F8 3F 5F 
2313c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23140     B4 00 90 5D |  if_ne	jmp	#LR__3245
23144     1A 15 02 F6 | 	mov	arg02, local12
23148     14 17 02 F6 | 	mov	arg03, local06
2314c     12 19 02 F6 | 	mov	arg04, local04
23150     02 18 46 F5 | 	or	arg04, #2
23154     13 13 02 F6 | 	mov	arg01, local05
23158     A0 34 B0 FD | 	call	#__system__pack_0606
2315c     98 00 90 FD | 	jmp	#LR__3245
23160                 | LR__3237
23160     00 26 0E F2 | 	cmp	local05, #0 wz
23164     28 00 90 AD |  if_e	jmp	#LR__3240
23168     01 26 66 F0 | 	shl	local05, #1
2316c     97 0E 48 FB | 	callpa	#(@LR__3239-@LR__3238)>>2,fcache_load_ptr_
23170                 | LR__3238
23170     00 40 00 FF 
23174     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23178     14 3B 02 C6 |  if_b	mov	local15, local06
2317c     01 3A 86 C1 |  if_b	sub	local15, #1
23180     1D 29 02 C6 |  if_b	mov	local06, local15
23184     01 26 66 C0 |  if_b	shl	local05, #1
23188     E4 FF 9F CD |  if_b	jmp	#LR__3238
2318c                 | LR__3239
2318c     28 FE 9F FD | 	jmp	#LR__3221
23190                 | LR__3240
23190     15 25 02 F5 | 	and	local04, local07
23194     12 19 02 F6 | 	mov	arg04, local04
23198     08 18 46 F5 | 	or	arg04, #8
2319c     00 12 06 F6 | 	mov	arg01, #0
231a0     00 14 06 F6 | 	mov	arg02, #0
231a4     00 16 06 F6 | 	mov	arg03, #0
231a8     50 34 B0 FD | 	call	#__system__pack_0606
231ac     48 00 90 FD | 	jmp	#LR__3245
231b0                 | LR__3241
231b0     00 2C 0E F2 | 	cmp	local08, #0 wz
231b4     28 00 90 AD |  if_e	jmp	#LR__3244
231b8     01 2C 66 F0 | 	shl	local08, #1
231bc     97 0E 48 FB | 	callpa	#(@LR__3243-@LR__3242)>>2,fcache_load_ptr_
231c0                 | LR__3242
231c0     00 40 00 FF 
231c4     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
231c8     18 3B 02 C6 |  if_b	mov	local15, local10
231cc     01 3A 86 C1 |  if_b	sub	local15, #1
231d0     1D 31 02 C6 |  if_b	mov	local10, local15
231d4     01 2C 66 C0 |  if_b	shl	local08, #1
231d8     E4 FF 9F CD |  if_b	jmp	#LR__3242
231dc                 | LR__3243
231dc     E4 FD 9F FD | 	jmp	#LR__3222
231e0                 | LR__3244
231e0     7F 28 86 F1 | 	sub	local06, #127
231e4     13 13 02 F6 | 	mov	arg01, local05
231e8     1A 15 02 F6 | 	mov	arg02, local12
231ec     14 17 02 F6 | 	mov	arg03, local06
231f0     12 19 02 F6 | 	mov	arg04, local04
231f4     04 34 B0 FD | 	call	#__system__pack_0606
231f8                 | LR__3245
231f8     A7 F0 03 F6 | 	mov	ptra, fp
231fc     B2 00 A0 FD | 	call	#popregs_
23200                 | __system___float_add_ret
23200     2D 00 64 FD | 	ret
23204                 | 
23204                 | __system___float_sqrt
23204     04 4A 05 F6 | 	mov	COUNT_, #4
23208     A8 00 A0 FD | 	call	#pushregs_
2320c     09 1F 02 F6 | 	mov	local01, arg01
23210     09 FB 01 F6 | 	mov	result1, arg01
23214     FD 20 02 F6 | 	mov	local02, result1
23218     10 23 02 F6 | 	mov	local03, local02
2321c     16 22 46 F7 | 	zerox	local03, #22
23220     10 25 02 F6 | 	mov	local04, local02
23224     01 24 66 F0 | 	shl	local04, #1
23228     18 24 4E F0 | 	shr	local04, #24 wz
2322c     1F 20 46 F0 | 	shr	local02, #31
23230     70 00 90 AD |  if_e	jmp	#LR__3251
23234     17 22 26 F4 | 	bith	local03, #23
23238                 | LR__3250
23238     00 20 0E F2 | 	cmp	local02, #0 wz
2323c     00 F8 3F 5F 
23240     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23244     88 00 90 5D |  if_ne	jmp	#LR__3254
23248     FF 24 0E F2 | 	cmp	local04, #255 wz
2324c     0F FB 01 A6 |  if_e	mov	result1, local01
23250     7C 00 90 AD |  if_e	jmp	#LR__3254
23254     7F 24 86 F1 | 	sub	local04, #127
23258     01 24 CE F7 | 	test	local04, #1 wz
2325c     01 22 66 50 |  if_ne	shl	local03, #1
23260     05 22 66 F0 | 	shl	local03, #5
23264     11 01 38 FD | 	qsqrt	#0, local03
23268     01 24 86 51 |  if_ne	sub	local04, #1
2326c     12 25 52 F6 | 	abs	local04, local04 wc
23270     01 24 46 F0 | 	shr	local04, #1
23274     12 17 82 F6 | 	negc	arg03, local04
23278     10 19 02 F6 | 	mov	arg04, local02
2327c     18 12 62 FD | 	getqx	arg01
23280     09 15 02 F6 | 	mov	arg02, arg01
23284     19 14 66 F0 | 	shl	arg02, #25
23288     07 12 46 F0 | 	shr	arg01, #7
2328c     00 80 00 FF 
23290     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23294     01 16 06 31 |  if_ae	add	arg03, #1
23298     01 12 46 30 |  if_ae	shr	arg01, #1
2329c     5C 33 B0 FD | 	call	#__system__pack_0606
232a0     2C 00 90 FD | 	jmp	#LR__3254
232a4                 | LR__3251
232a4     00 22 0E F2 | 	cmp	local03, #0 wz
232a8     0F FB 01 A6 |  if_e	mov	result1, local01
232ac     20 00 90 AD |  if_e	jmp	#LR__3254
232b0     01 22 66 F0 | 	shl	local03, #1
232b4     97 0A 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
232b8                 | LR__3252
232b8     00 40 00 FF 
232bc     00 22 16 F2 | 	cmp	local03, ##8388608 wc
232c0     01 24 86 C1 |  if_b	sub	local04, #1
232c4     01 22 66 C0 |  if_b	shl	local03, #1
232c8     EC FF 9F CD |  if_b	jmp	#LR__3252
232cc                 | LR__3253
232cc     68 FF 9F FD | 	jmp	#LR__3250
232d0                 | LR__3254
232d0     A7 F0 03 F6 | 	mov	ptra, fp
232d4     B2 00 A0 FD | 	call	#popregs_
232d8                 | __system___float_sqrt_ret
232d8     2D 00 64 FD | 	ret
232dc                 | 
232dc                 | __system___float_mul
232dc     0B 4A 05 F6 | 	mov	COUNT_, #11
232e0     A8 00 A0 FD | 	call	#pushregs_
232e4     09 1F 02 F6 | 	mov	local01, arg01
232e8     0A 21 02 F6 | 	mov	local02, arg02
232ec     0F 23 02 F6 | 	mov	local03, local01
232f0     11 25 02 F6 | 	mov	local04, local03
232f4     16 24 46 F7 | 	zerox	local04, #22
232f8     11 27 02 F6 | 	mov	local05, local03
232fc     01 26 66 F0 | 	shl	local05, #1
23300     18 26 46 F0 | 	shr	local05, #24
23304     1F 22 46 F0 | 	shr	local03, #31
23308     10 FB 01 F6 | 	mov	result1, local02
2330c     FD 28 02 F6 | 	mov	local06, result1
23310     14 2B 02 F6 | 	mov	local07, local06
23314     16 2A 46 F7 | 	zerox	local07, #22
23318     14 2D 02 F6 | 	mov	local08, local06
2331c     01 2C 66 F0 | 	shl	local08, #1
23320     18 2C 46 F0 | 	shr	local08, #24
23324     1F 28 46 F0 | 	shr	local06, #31
23328     14 23 62 F5 | 	xor	local03, local06
2332c     FF 26 0E F2 | 	cmp	local05, #255 wz
23330     90 00 90 AD |  if_e	jmp	#LR__3263
23334     FF 2C 0E F2 | 	cmp	local08, #255 wz
23338     D8 00 90 AD |  if_e	jmp	#LR__3265
2333c     00 26 0E F2 | 	cmp	local05, #0 wz
23340     0C 01 90 AD |  if_e	jmp	#LR__3266
23344     17 24 26 F4 | 	bith	local04, #23
23348                 | LR__3260
23348     00 2C 0E F2 | 	cmp	local08, #0 wz
2334c     44 01 90 AD |  if_e	jmp	#LR__3270
23350     17 2A 26 F4 | 	bith	local07, #23
23354                 | LR__3261
23354     12 21 02 F6 | 	mov	local02, local04
23358     04 20 66 F0 | 	shl	local02, #4
2335c     15 29 02 F6 | 	mov	local06, local07
23360     05 28 66 F0 | 	shl	local06, #5
23364     14 21 02 FD | 	qmul	local02, local06
23368     16 27 02 F1 | 	add	local05, local08
2336c     FE 26 86 F1 | 	sub	local05, #254
23370     13 2F 02 F6 | 	mov	local09, local05
23374     04 24 66 F0 | 	shl	local04, #4
23378     05 2A 66 F0 | 	shl	local07, #5
2337c     18 30 62 FD | 	getqx	local10
23380     15 25 02 FD | 	qmul	local04, local07
23384     19 32 62 FD | 	getqy	local11
23388     00 80 00 FF 
2338c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23390     18 00 90 CD |  if_b	jmp	#LR__3262
23394     01 2E 06 F1 | 	add	local09, #1
23398     01 30 46 F0 | 	shr	local10, #1
2339c     19 2D 02 F6 | 	mov	local08, local11
233a0     1F 2C 66 F0 | 	shl	local08, #31
233a4     16 31 42 F5 | 	or	local10, local08
233a8     01 32 46 F0 | 	shr	local11, #1
233ac                 | LR__3262
233ac     19 13 02 F6 | 	mov	arg01, local11
233b0     18 15 02 F6 | 	mov	arg02, local10
233b4     17 17 02 F6 | 	mov	arg03, local09
233b8     11 19 02 F6 | 	mov	arg04, local03
233bc     3C 32 B0 FD | 	call	#__system__pack_0606
233c0     10 01 90 FD | 	jmp	#LR__3274
233c4                 | LR__3263
233c4     00 24 0E F2 | 	cmp	local04, #0 wz
233c8     0F FB 01 56 |  if_ne	mov	result1, local01
233cc     04 01 90 5D |  if_ne	jmp	#LR__3274
233d0     FF 2C 56 F2 | 	cmps	local08, #255 wc
233d4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
233d8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
233dc     18 00 90 4D |  if_c_and_nz	jmp	#LR__3264
233e0     00 F8 3F CF 
233e4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
233e8     E8 00 90 CD |  if_b	jmp	#LR__3274
233ec     00 2A 0E F2 | 	cmp	local07, #0 wz
233f0     10 FB 01 56 |  if_ne	mov	result1, local02
233f4     DC 00 90 5D |  if_ne	jmp	#LR__3274
233f8                 | LR__3264
233f8     02 22 46 F5 | 	or	local03, #2
233fc     00 12 06 F6 | 	mov	arg01, #0
23400     00 14 06 F6 | 	mov	arg02, #0
23404     13 17 02 F6 | 	mov	arg03, local05
23408     11 19 02 F6 | 	mov	arg04, local03
2340c     EC 31 B0 FD | 	call	#__system__pack_0606
23410     C0 00 90 FD | 	jmp	#LR__3274
23414                 | LR__3265
23414     00 26 0E F2 | 	cmp	local05, #0 wz
23418     00 24 0E A2 |  if_e	cmp	local04, #0 wz
2341c     00 F8 3F AF 
23420     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23424     AC 00 90 AD |  if_e	jmp	#LR__3274
23428     00 2A 0E F2 | 	cmp	local07, #0 wz
2342c     10 FB 01 56 |  if_ne	mov	result1, local02
23430     A0 00 90 5D |  if_ne	jmp	#LR__3274
23434     16 17 02 F6 | 	mov	arg03, local08
23438     11 19 02 F6 | 	mov	arg04, local03
2343c     02 18 46 F5 | 	or	arg04, #2
23440     00 12 06 F6 | 	mov	arg01, #0
23444     00 14 06 F6 | 	mov	arg02, #0
23448     B0 31 B0 FD | 	call	#__system__pack_0606
2344c     84 00 90 FD | 	jmp	#LR__3274
23450                 | LR__3266
23450     00 24 0E F2 | 	cmp	local04, #0 wz
23454     20 00 90 AD |  if_e	jmp	#LR__3269
23458     01 24 66 F0 | 	shl	local04, #1
2345c     97 0A 48 FB | 	callpa	#(@LR__3268-@LR__3267)>>2,fcache_load_ptr_
23460                 | LR__3267
23460     00 40 00 FF 
23464     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23468     01 26 86 C1 |  if_b	sub	local05, #1
2346c     01 24 66 C0 |  if_b	shl	local04, #1
23470     EC FF 9F CD |  if_b	jmp	#LR__3267
23474                 | LR__3268
23474     D0 FE 9F FD | 	jmp	#LR__3260
23478                 | LR__3269
23478     08 22 46 F5 | 	or	local03, #8
2347c     00 12 06 F6 | 	mov	arg01, #0
23480     00 14 06 F6 | 	mov	arg02, #0
23484     00 16 06 F6 | 	mov	arg03, #0
23488     11 19 02 F6 | 	mov	arg04, local03
2348c     6C 31 B0 FD | 	call	#__system__pack_0606
23490     40 00 90 FD | 	jmp	#LR__3274
23494                 | LR__3270
23494     00 2A 0E F2 | 	cmp	local07, #0 wz
23498     20 00 90 AD |  if_e	jmp	#LR__3273
2349c     01 2A 66 F0 | 	shl	local07, #1
234a0     97 0A 48 FB | 	callpa	#(@LR__3272-@LR__3271)>>2,fcache_load_ptr_
234a4                 | LR__3271
234a4     00 40 00 FF 
234a8     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
234ac     01 2C 86 C1 |  if_b	sub	local08, #1
234b0     01 2A 66 C0 |  if_b	shl	local07, #1
234b4     EC FF 9F CD |  if_b	jmp	#LR__3271
234b8                 | LR__3272
234b8     98 FE 9F FD | 	jmp	#LR__3261
234bc                 | LR__3273
234bc     08 22 46 F5 | 	or	local03, #8
234c0     00 12 06 F6 | 	mov	arg01, #0
234c4     00 14 06 F6 | 	mov	arg02, #0
234c8     00 16 06 F6 | 	mov	arg03, #0
234cc     11 19 02 F6 | 	mov	arg04, local03
234d0     28 31 B0 FD | 	call	#__system__pack_0606
234d4                 | LR__3274
234d4     A7 F0 03 F6 | 	mov	ptra, fp
234d8     B2 00 A0 FD | 	call	#popregs_
234dc                 | __system___float_mul_ret
234dc     2D 00 64 FD | 	ret
234e0                 | 
234e0                 | __system___float_div
234e0     0E 4A 05 F6 | 	mov	COUNT_, #14
234e4     A8 00 A0 FD | 	call	#pushregs_
234e8     09 23 02 F6 | 	mov	local03, arg01
234ec     0A 25 02 F6 | 	mov	local04, arg02
234f0     11 27 02 F6 | 	mov	local05, local03
234f4     13 29 02 F6 | 	mov	local06, local05
234f8     16 28 46 F7 | 	zerox	local06, #22
234fc     13 2B 02 F6 | 	mov	local07, local05
23500     01 2A 66 F0 | 	shl	local07, #1
23504     18 2A 46 F0 | 	shr	local07, #24
23508     1F 26 46 F0 | 	shr	local05, #31
2350c     12 FB 01 F6 | 	mov	result1, local04
23510     FD 2C 02 F6 | 	mov	local08, result1
23514     16 2F 02 F6 | 	mov	local09, local08
23518     16 2E 46 F7 | 	zerox	local09, #22
2351c     16 31 02 F6 | 	mov	local10, local08
23520     01 30 66 F0 | 	shl	local10, #1
23524     18 30 46 F0 | 	shr	local10, #24
23528     1F 2C 46 F0 | 	shr	local08, #31
2352c     16 27 62 F5 | 	xor	local05, local08
23530     FF 2A 0E F2 | 	cmp	local07, #255 wz
23534     D4 00 90 AD |  if_e	jmp	#LR__3285
23538     FF 30 0E F2 | 	cmp	local10, #255 wz
2353c     04 01 90 AD |  if_e	jmp	#LR__3286
23540     00 2A 0E F2 | 	cmp	local07, #0 wz
23544     24 01 90 AD |  if_e	jmp	#LR__3287
23548     17 28 26 F4 | 	bith	local06, #23
2354c                 | LR__3280
2354c     00 30 0E F2 | 	cmp	local10, #0 wz
23550     70 01 90 AD |  if_e	jmp	#LR__3291
23554     17 2E 26 F4 | 	bith	local09, #23
23558                 | LR__3281
23558     18 2B 82 F1 | 	sub	local07, local10
2355c     15 33 02 F6 | 	mov	local11, local07
23560     14 13 02 F6 | 	mov	arg01, local06
23564     02 12 46 F0 | 	shr	arg01, #2
23568     1E 28 66 F0 | 	shl	local06, #30
2356c     14 15 02 F6 | 	mov	arg02, local06
23570     17 17 02 F6 | 	mov	arg03, local09
23574     28 12 62 FD | 	setq	arg01
23578     0B 15 12 FD | 	qdiv	arg02, arg03
2357c     00 34 06 F6 | 	mov	local12, #0
23580     18 1E 62 FD | 	getqx	local01
23584     19 FC 61 FD | 	getqy	result2
23588     FE 20 02 F6 | 	mov	local02, result2
2358c     0F 37 02 F6 | 	mov	local13, local01
23590     00 20 4E F2 | 	cmps	local02, #0 wz
23594     1B 39 02 F6 | 	mov	local14, local13
23598     19 38 66 F0 | 	shl	local14, #25
2359c     01 34 06 56 |  if_ne	mov	local12, #1
235a0     1A 39 42 F5 | 	or	local14, local12
235a4     07 36 46 F0 | 	shr	local13, #7
235a8     00 80 00 FF 
235ac     00 36 16 F2 | 	cmp	local13, ##16777216 wc
235b0     1C 00 90 CD |  if_b	jmp	#LR__3282
235b4     01 32 06 F1 | 	add	local11, #1
235b8     01 38 46 F0 | 	shr	local14, #1
235bc     1B 35 02 F6 | 	mov	local12, local13
235c0     1F 34 66 F0 | 	shl	local12, #31
235c4     1A 39 42 F5 | 	or	local14, local12
235c8     01 36 46 F0 | 	shr	local13, #1
235cc     24 00 90 FD | 	jmp	#LR__3284
235d0                 | LR__3282
235d0     00 40 00 FF 
235d4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
235d8     18 00 90 3D |  if_ae	jmp	#LR__3283
235dc     01 32 86 F1 | 	sub	local11, #1
235e0     01 36 66 F0 | 	shl	local13, #1
235e4     1C 35 02 F6 | 	mov	local12, local14
235e8     1F 34 46 F0 | 	shr	local12, #31
235ec     1A 37 42 F5 | 	or	local13, local12
235f0     01 38 66 F0 | 	shl	local14, #1
235f4                 | LR__3283
235f4                 | LR__3284
235f4     1B 13 02 F6 | 	mov	arg01, local13
235f8     1C 15 02 F6 | 	mov	arg02, local14
235fc     19 17 02 F6 | 	mov	arg03, local11
23600     13 19 02 F6 | 	mov	arg04, local05
23604     F4 2F B0 FD | 	call	#__system__pack_0606
23608     F8 00 90 FD | 	jmp	#LR__3295
2360c                 | LR__3285
2360c     00 28 0E F2 | 	cmp	local06, #0 wz
23610     11 FB 01 56 |  if_ne	mov	result1, local03
23614     EC 00 90 5D |  if_ne	jmp	#LR__3295
23618     FF 30 0E F2 | 	cmp	local10, #255 wz
2361c     00 F8 3F AF 
23620     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23624     DC 00 90 AD |  if_e	jmp	#LR__3295
23628     02 26 46 F5 | 	or	local05, #2
2362c     00 12 06 F6 | 	mov	arg01, #0
23630     00 14 06 F6 | 	mov	arg02, #0
23634     15 17 02 F6 | 	mov	arg03, local07
23638     13 19 02 F6 | 	mov	arg04, local05
2363c     BC 2F B0 FD | 	call	#__system__pack_0606
23640     C0 00 90 FD | 	jmp	#LR__3295
23644                 | LR__3286
23644     00 2E 0E F2 | 	cmp	local09, #0 wz
23648     12 FB 01 56 |  if_ne	mov	result1, local04
2364c     B4 00 90 5D |  if_ne	jmp	#LR__3295
23650     13 19 02 F6 | 	mov	arg04, local05
23654     08 18 46 F5 | 	or	arg04, #8
23658     00 12 06 F6 | 	mov	arg01, #0
2365c     00 14 06 F6 | 	mov	arg02, #0
23660     00 16 06 F6 | 	mov	arg03, #0
23664     94 2F B0 FD | 	call	#__system__pack_0606
23668     98 00 90 FD | 	jmp	#LR__3295
2366c                 | LR__3287
2366c     00 28 0E F2 | 	cmp	local06, #0 wz
23670     20 00 90 AD |  if_e	jmp	#LR__3290
23674     01 28 66 F0 | 	shl	local06, #1
23678     97 0A 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
2367c                 | LR__3288
2367c     00 40 00 FF 
23680     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23684     01 2A 86 C1 |  if_b	sub	local07, #1
23688     01 28 66 C0 |  if_b	shl	local06, #1
2368c     EC FF 9F CD |  if_b	jmp	#LR__3288
23690                 | LR__3289
23690     B8 FE 9F FD | 	jmp	#LR__3280
23694                 | LR__3290
23694     00 30 0E F2 | 	cmp	local10, #0 wz
23698     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
2369c     00 F8 3F AF 
236a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
236a4     5C 00 90 AD |  if_e	jmp	#LR__3295
236a8     13 19 02 F6 | 	mov	arg04, local05
236ac     08 18 46 F5 | 	or	arg04, #8
236b0     00 12 06 F6 | 	mov	arg01, #0
236b4     00 14 06 F6 | 	mov	arg02, #0
236b8     00 16 06 F6 | 	mov	arg03, #0
236bc     3C 2F B0 FD | 	call	#__system__pack_0606
236c0     40 00 90 FD | 	jmp	#LR__3295
236c4                 | LR__3291
236c4     00 2E 0E F2 | 	cmp	local09, #0 wz
236c8     20 00 90 AD |  if_e	jmp	#LR__3294
236cc     01 2E 66 F0 | 	shl	local09, #1
236d0     97 0A 48 FB | 	callpa	#(@LR__3293-@LR__3292)>>2,fcache_load_ptr_
236d4                 | LR__3292
236d4     00 40 00 FF 
236d8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
236dc     01 30 86 C1 |  if_b	sub	local10, #1
236e0     01 2E 66 C0 |  if_b	shl	local09, #1
236e4     EC FF 9F CD |  if_b	jmp	#LR__3292
236e8                 | LR__3293
236e8     6C FE 9F FD | 	jmp	#LR__3281
236ec                 | LR__3294
236ec     02 26 46 F5 | 	or	local05, #2
236f0     00 12 06 F6 | 	mov	arg01, #0
236f4     00 14 06 F6 | 	mov	arg02, #0
236f8     00 16 06 F6 | 	mov	arg03, #0
236fc     13 19 02 F6 | 	mov	arg04, local05
23700     F8 2E B0 FD | 	call	#__system__pack_0606
23704                 | LR__3295
23704     A7 F0 03 F6 | 	mov	ptra, fp
23708     B2 00 A0 FD | 	call	#popregs_
2370c                 | __system___float_div_ret
2370c     2D 00 64 FD | 	ret
23710                 | 
23710                 | __system___float_cmp
23710     00 C0 3F FF 
23714     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23718     00 C0 3F CF 
2371c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23720     0B FB 01 36 |  if_ae	mov	result1, arg03
23724     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23728     00 C0 7F FF 
2372c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23730     00 C0 7F CF 
23734     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23738     0B FB 01 36 |  if_ae	mov	result1, arg03
2373c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23740     00 12 56 F2 | 	cmps	arg01, #0 wc
23744     2C 00 90 3D |  if_ae	jmp	#LR__3300
23748     00 14 56 F2 | 	cmps	arg02, #0 wc
2374c     0A FB 01 C6 |  if_b	mov	result1, arg02
23750     09 FB 81 C1 |  if_b	sub	result1, arg01
23754     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23758     00 14 0E F2 | 	cmp	arg02, #0 wz
2375c     00 00 40 AF 
23760     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23764     00 FA 05 A6 |  if_e	mov	result1, #0
23768     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2376c     01 FA 65 F6 | 	neg	result1, #1
23770     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23774                 | LR__3300
23774     00 14 56 F2 | 	cmps	arg02, #0 wc
23778     1C 00 90 3D |  if_ae	jmp	#LR__3301
2377c     00 12 0E F2 | 	cmp	arg01, #0 wz
23780     00 00 40 AF 
23784     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23788     00 FA 05 A6 |  if_e	mov	result1, #0
2378c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23790     01 FA 05 F6 | 	mov	result1, #1
23794     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23798                 | LR__3301
23798     0A 13 82 F1 | 	sub	arg01, arg02
2379c     09 FB 01 F6 | 	mov	result1, arg01
237a0                 | __system___float_cmp_ret
237a0     2D 00 64 FD | 	ret
237a4                 | 
237a4                 | __system___float_tointeger
237a4     02 4A 05 F6 | 	mov	COUNT_, #2
237a8     A8 00 A0 FD | 	call	#pushregs_
237ac     50 00 B0 FD | 	call	#__system___float_Unpack
237b0     FF FF 7F FF 
237b4     FF FD 55 F2 | 	cmps	result2, ##-1 wc
237b8     34 00 90 CD |  if_b	jmp	#LR__3310
237bc     1F FC 55 F2 | 	cmps	result2, #31 wc
237c0     2C 00 90 3D |  if_ae	jmp	#LR__3310
237c4     02 FE 65 F0 | 	shl	result3, #2
237c8     1E 1E 06 F6 | 	mov	local01, #30
237cc     FE 1E 82 F1 | 	sub	local01, result2
237d0     0F FF 41 F0 | 	shr	result3, local01
237d4     FF 20 02 F6 | 	mov	local02, result3
237d8     0A 21 02 F1 | 	add	local02, arg02
237dc     01 20 46 F0 | 	shr	local02, #1
237e0     00 FA 0D F2 | 	cmp	result1, #0 wz
237e4     10 21 62 56 |  if_ne	neg	local02, local02
237e8     10 FB 01 F6 | 	mov	result1, local02
237ec     04 00 90 FD | 	jmp	#LR__3311
237f0                 | LR__3310
237f0     00 FA 05 F6 | 	mov	result1, #0
237f4                 | LR__3311
237f4     A7 F0 03 F6 | 	mov	ptra, fp
237f8     B2 00 A0 FD | 	call	#popregs_
237fc                 | __system___float_tointeger_ret
237fc     2D 00 64 FD | 	ret
23800                 | 
23800                 | __system___float_Unpack
23800     09 01 02 F6 | 	mov	_var01, arg01
23804     1F 00 46 F0 | 	shr	_var01, #31
23808     09 03 02 F6 | 	mov	_var02, arg01
2380c     01 02 66 F0 | 	shl	_var02, #1
23810     18 02 4E F0 | 	shr	_var02, #24 wz
23814     17 13 06 F4 | 	bitl	arg01, #279
23818     06 12 66 50 |  if_ne	shl	arg01, #6
2381c     1D 12 26 54 |  if_ne	bith	arg01, #29
23820     1C 00 90 5D |  if_ne	jmp	#LR__3320
23824     09 05 92 F7 | 	encod	_var03, arg01 wc
23828     01 04 06 C1 |  if_b	add	_var03, #1
2382c     17 04 86 F1 | 	sub	_var03, #23
23830     02 03 02 F6 | 	mov	_var02, _var03
23834     07 FC 05 F6 | 	mov	result2, #7
23838     02 FD 81 F1 | 	sub	result2, _var03
2383c     FE 12 62 F0 | 	shl	arg01, result2
23840                 | LR__3320
23840     7F 02 86 F1 | 	sub	_var02, #127
23844     09 FF 01 F6 | 	mov	result3, arg01
23848     00 FB 01 F6 | 	mov	result1, _var01
2384c     01 FD 01 F6 | 	mov	result2, _var02
23850                 | __system___float_Unpack_ret
23850     2D 00 64 FD | 	ret
23854                 | 
23854                 | __system___float_Pack
23854     00 00 06 F6 | 	mov	_var01, #0
23858     00 16 0E F2 | 	cmp	arg03, #0 wz
2385c     8C 00 90 AD |  if_e	jmp	#LR__3331
23860     0B 03 92 F7 | 	encod	_var02, arg03 wc
23864     01 02 06 C1 |  if_b	add	_var02, #1
23868     21 00 06 F6 | 	mov	_var01, #33
2386c     01 01 82 F1 | 	sub	_var01, _var02
23870     00 17 62 F0 | 	shl	arg03, _var01
23874     03 02 06 F6 | 	mov	_var02, #3
23878     00 03 82 F1 | 	sub	_var02, _var01
2387c     01 15 02 F1 | 	add	arg02, _var02
23880     0A 05 02 F6 | 	mov	_var03, arg02
23884     00 17 06 F1 | 	add	arg03, #256
23888     0B 03 02 F6 | 	mov	_var02, arg03
2388c     FF 02 2E F5 | 	andn	_var02, #255 wz
23890     01 04 06 A1 |  if_e	add	_var03, #1
23894     7F 04 06 F1 | 	add	_var03, #127
23898     FF FF 7F FF 
2389c     E9 05 46 F3 | 	fges	_var03, ##-23
238a0     FF 04 66 F3 | 	fles	_var03, #255
238a4     01 04 56 F2 | 	cmps	_var03, #1 wc
238a8     1C 00 90 3D |  if_ae	jmp	#LR__3330
238ac     01 16 46 F0 | 	shr	arg03, #1
238b0     1F 02 C6 F9 | 	decod	_var02, #31
238b4     0B 03 02 F1 | 	add	_var02, arg03
238b8     02 05 62 F6 | 	neg	_var03, _var03
238bc     02 03 42 F0 | 	shr	_var02, _var03
238c0     01 17 02 F6 | 	mov	arg03, _var02
238c4     00 04 06 F6 | 	mov	_var03, #0
238c8                 | LR__3330
238c8     09 FB 01 F6 | 	mov	result1, arg01
238cc     1F FA 65 F0 | 	shl	result1, #31
238d0     02 03 02 F6 | 	mov	_var02, _var03
238d4     17 02 66 F0 | 	shl	_var02, #23
238d8     01 FB 41 F5 | 	or	result1, _var02
238dc     0B 07 02 F6 | 	mov	_var04, arg03
238e0     09 06 46 F0 | 	shr	_var04, #9
238e4     03 FB 41 F5 | 	or	result1, _var04
238e8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
238ec                 | LR__3331
238ec     00 FB 01 F6 | 	mov	result1, _var01
238f0                 | __system___float_Pack_ret
238f0     2D 00 64 FD | 	ret
238f4                 | 
238f4                 | __system___basic_print_float
238f4     05 4A 05 F6 | 	mov	COUNT_, #5
238f8     A8 00 A0 FD | 	call	#pushregs_
238fc     09 1F 02 F6 | 	mov	local01, arg01
23900     0A 21 02 F6 | 	mov	local02, arg02
23904     0B 23 0A F6 | 	mov	local03, arg03 wz
23908     0C 25 02 F6 | 	mov	local04, arg04
2390c     14 00 90 5D |  if_ne	jmp	#LR__3340
23910     23 24 0E F2 | 	cmp	local04, #35 wz
23914     80 02 10 AF 
23918     00 26 06 A6 |  if_e	mov	local05, ##537198592
2391c     1D 26 C6 59 |  if_ne	decod	local05, #29
23920     13 23 02 F6 | 	mov	local03, local05
23924                 | LR__3340
23924     0F 13 02 F6 | 	mov	arg01, local01
23928     B4 27 B0 FD | 	call	#__system___gettxfunc
2392c     FD 26 0A F6 | 	mov	local05, result1 wz
23930     00 FA 05 A6 |  if_e	mov	result1, #0
23934     13 13 02 56 |  if_ne	mov	arg01, local05
23938     11 15 02 56 |  if_ne	mov	arg02, local03
2393c     10 17 02 56 |  if_ne	mov	arg03, local02
23940     12 19 02 56 |  if_ne	mov	arg04, local04
23944     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23948     A7 F0 03 F6 | 	mov	ptra, fp
2394c     B2 00 A0 FD | 	call	#popregs_
23950                 | __system___basic_print_float_ret
23950     2D 00 64 FD | 	ret
23954                 | 
23954                 | __system____builtin_atoi
23954     07 4A 05 F6 | 	mov	COUNT_, #7
23958     A8 00 A0 FD | 	call	#pushregs_
2395c                 | __system____builtin_atoi_enter
2395c     09 1F 02 F6 | 	mov	local01, arg01
23960     0A 21 02 F6 | 	mov	local02, arg02
23964     00 22 06 F6 | 	mov	local03, #0
23968     00 24 06 F6 | 	mov	local04, #0
2396c     00 26 06 F6 | 	mov	local05, #0
23970     97 08 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
23974                 | LR__3350
23974     0F 29 C2 FA | 	rdbyte	local06, local01
23978     20 28 0E F2 | 	cmp	local06, #32 wz
2397c     01 1E 06 A1 |  if_e	add	local01, #1
23980     F0 FF 9F AD |  if_e	jmp	#LR__3350
23984                 | LR__3351
23984     0F 2B C2 FA | 	rdbyte	local07, local01
23988                 | LR__3352
23988     2D 2A 0E F2 | 	cmp	local07, #45 wz
2398c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23990     18 00 90 5D |  if_ne	jmp	#LR__3353
23994     01 1E 06 F1 | 	add	local01, #1
23998     2D 2A 0E F2 | 	cmp	local07, #45 wz
2399c     01 28 06 A6 |  if_e	mov	local06, #1
239a0     14 27 C2 A2 |  if_e	subr	local05, local06
239a4     0F 2B C2 FA | 	rdbyte	local07, local01
239a8     DC FF 9F FD | 	jmp	#LR__3352
239ac                 | LR__3353
239ac     97 48 48 FB | 	callpa	#(@LR__3361-@LR__3354)>>2,fcache_load_ptr_
239b0                 | LR__3354
239b0                 | LR__3355
239b0     0F 2B C2 FA | 	rdbyte	local07, local01
239b4     5F 2A 0E F2 | 	cmp	local07, #95 wz
239b8     01 1E 06 F1 | 	add	local01, #1
239bc     F0 FF 9F AD |  if_e	jmp	#LR__3355
239c0     30 2A 0E F2 | 	cmp	local07, #48 wz
239c4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
239c8     00 24 06 A6 |  if_e	mov	local04, #0
239cc     60 00 90 AD |  if_e	jmp	#LR__3360
239d0     31 2A 56 F2 | 	cmps	local07, #49 wc
239d4     18 00 90 CD |  if_b	jmp	#LR__3356
239d8     3A 2A 56 F2 | 	cmps	local07, #58 wc
239dc     15 25 02 C6 |  if_b	mov	local04, local07
239e0     30 24 86 C1 |  if_b	sub	local04, #48
239e4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
239e8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
239ec     40 00 90 CD |  if_b	jmp	#LR__3359
239f0                 | LR__3356
239f0     0B 20 56 F2 | 	cmps	local02, #11 wc
239f4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
239f8     14 00 90 CD |  if_b	jmp	#LR__3357
239fc     67 2A 56 F2 | 	cmps	local07, #103 wc
23a00     61 2A 86 C1 |  if_b	sub	local07, #97
23a04     0A 24 06 C6 |  if_b	mov	local04, #10
23a08     15 25 02 C1 |  if_b	add	local04, local07
23a0c     20 00 90 CD |  if_b	jmp	#LR__3358
23a10                 | LR__3357
23a10     0B 20 56 F2 | 	cmps	local02, #11 wc
23a14     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23a18     24 00 90 CD |  if_b	jmp	#LR__3362
23a1c     47 2A 56 F2 | 	cmps	local07, #71 wc
23a20     41 2A 86 C1 |  if_b	sub	local07, #65
23a24     0A 24 06 C6 |  if_b	mov	local04, #10
23a28     15 25 02 C1 |  if_b	add	local04, local07
23a2c     10 00 90 3D |  if_ae	jmp	#LR__3362
23a30                 | LR__3358
23a30                 | LR__3359
23a30                 | LR__3360
23a30     11 21 02 FD | 	qmul	local02, local03
23a34     18 22 62 FD | 	getqx	local03
23a38     12 23 02 F1 | 	add	local03, local04
23a3c     70 FF 9F FD | 	jmp	#LR__3354
23a40                 | LR__3361
23a40                 | LR__3362
23a40     00 20 0E F2 | 	cmp	local02, #0 wz
23a44     64 00 90 5D |  if_ne	jmp	#LR__3368
23a48     78 2A 0E F2 | 	cmp	local07, #120 wz
23a4c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23a50     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23a54     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23a58     14 00 90 5D |  if_ne	jmp	#LR__3363
23a5c     0F 13 02 F6 | 	mov	arg01, local01
23a60     10 14 06 F6 | 	mov	arg02, #16
23a64     EC FE BF FD | 	call	#__system____builtin_atoi
23a68     FD 22 02 F6 | 	mov	local03, result1
23a6c     3C 00 90 FD | 	jmp	#LR__3367
23a70                 | LR__3363
23a70     62 2A 0E F2 | 	cmp	local07, #98 wz
23a74     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23a78     14 00 90 5D |  if_ne	jmp	#LR__3364
23a7c     0F 13 02 F6 | 	mov	arg01, local01
23a80     02 14 06 F6 | 	mov	arg02, #2
23a84     CC FE BF FD | 	call	#__system____builtin_atoi
23a88     FD 22 02 F6 | 	mov	local03, result1
23a8c     1C 00 90 FD | 	jmp	#LR__3366
23a90                 | LR__3364
23a90     6F 2A 0E F2 | 	cmp	local07, #111 wz
23a94     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23a98     10 00 90 5D |  if_ne	jmp	#LR__3365
23a9c     0F 13 02 F6 | 	mov	arg01, local01
23aa0     08 14 06 F6 | 	mov	arg02, #8
23aa4     AC FE BF FD | 	call	#__system____builtin_atoi
23aa8     FD 22 02 F6 | 	mov	local03, result1
23aac                 | LR__3365
23aac                 | LR__3366
23aac                 | LR__3367
23aac                 | LR__3368
23aac     00 26 0E F2 | 	cmp	local05, #0 wz
23ab0     11 23 62 56 |  if_ne	neg	local03, local03
23ab4     11 FB 01 F6 | 	mov	result1, local03
23ab8     A7 F0 03 F6 | 	mov	ptra, fp
23abc     B2 00 A0 FD | 	call	#popregs_
23ac0                 | __system____builtin_atoi_ret
23ac0     2D 00 64 FD | 	ret
23ac4                 | 
23ac4                 | __system____builtin_atof
23ac4     07 4A 05 F6 | 	mov	COUNT_, #7
23ac8     A8 00 A0 FD | 	call	#pushregs_
23acc     09 1F 02 F6 | 	mov	local01, arg01
23ad0     00 20 06 F6 | 	mov	local02, #0
23ad4     00 22 06 F6 | 	mov	local03, #0
23ad8     00 24 06 F6 | 	mov	local04, #0
23adc     00 26 06 F6 | 	mov	local05, #0
23ae0     97 08 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
23ae4                 | LR__3370
23ae4     0F 17 C2 FA | 	rdbyte	arg03, local01
23ae8     20 16 0E F2 | 	cmp	arg03, #32 wz
23aec     01 1E 06 A1 |  if_e	add	local01, #1
23af0     F0 FF 9F AD |  if_e	jmp	#LR__3370
23af4                 | LR__3371
23af4     0F 29 C2 FA | 	rdbyte	local06, local01
23af8                 | LR__3372
23af8     2B 28 0E F2 | 	cmp	local06, #43 wz
23afc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23b00     14 00 90 5D |  if_ne	jmp	#LR__3373
23b04     2D 28 0E F2 | 	cmp	local06, #45 wz
23b08     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23b0c     01 1E 06 F1 | 	add	local01, #1
23b10     0F 29 C2 FA | 	rdbyte	local06, local01
23b14     E0 FF 9F FD | 	jmp	#LR__3372
23b18                 | LR__3373
23b18                 | LR__3374
23b18     97 08 48 FB | 	callpa	#(@LR__3376-@LR__3375)>>2,fcache_load_ptr_
23b1c                 | LR__3375
23b1c     0F 29 C2 FA | 	rdbyte	local06, local01
23b20     5F 28 0E F2 | 	cmp	local06, #95 wz
23b24     01 1E 06 F1 | 	add	local01, #1
23b28     F0 FF 9F AD |  if_e	jmp	#LR__3375
23b2c                 | LR__3376
23b2c     00 28 0E F2 | 	cmp	local06, #0 wz
23b30     5C 00 90 AD |  if_e	jmp	#LR__3378
23b34     30 28 56 F2 | 	cmps	local06, #48 wc
23b38     44 00 90 CD |  if_b	jmp	#LR__3377
23b3c     3A 28 56 F2 | 	cmps	local06, #58 wc
23b40     3C 00 90 3D |  if_ae	jmp	#LR__3377
23b44     10 13 02 F6 | 	mov	arg01, local02
23b48     00 90 20 FF 
23b4c     00 14 06 F6 | 	mov	arg02, ##1092616192
23b50     88 F7 BF FD | 	call	#__system___float_mul
23b54     FD 20 02 F6 | 	mov	local02, result1
23b58     30 28 86 F1 | 	sub	local06, #48
23b5c     14 13 02 F6 | 	mov	arg01, local06
23b60     74 F3 BF FD | 	call	#__system___float_fromuns
23b64     FD 14 02 F6 | 	mov	arg02, result1
23b68     10 13 02 F6 | 	mov	arg01, local02
23b6c     9C F3 BF FD | 	call	#__system___float_add
23b70     FD 20 02 F6 | 	mov	local02, result1
23b74     00 26 0E F2 | 	cmp	local05, #0 wz
23b78     01 22 86 51 |  if_ne	sub	local03, #1
23b7c     98 FF 9F FD | 	jmp	#LR__3374
23b80                 | LR__3377
23b80     2E 28 0E F2 | 	cmp	local06, #46 wz
23b84     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23b88     01 26 06 A6 |  if_e	mov	local05, #1
23b8c     88 FF 9F AD |  if_e	jmp	#LR__3374
23b90                 | LR__3378
23b90     45 28 0E F2 | 	cmp	local06, #69 wz
23b94     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23b98     18 00 90 5D |  if_ne	jmp	#LR__3379
23b9c     0F 13 02 F6 | 	mov	arg01, local01
23ba0     00 14 06 F6 | 	mov	arg02, #0
23ba4     AC FD BF FD | 	call	#__system____builtin_atoi
23ba8     11 FB 01 F1 | 	add	result1, local03
23bac     FD 2A 02 F6 | 	mov	local07, result1
23bb0     04 00 90 FD | 	jmp	#LR__3380
23bb4                 | LR__3379
23bb4     11 2B 02 F6 | 	mov	local07, local03
23bb8                 | LR__3380
23bb8     15 17 02 F6 | 	mov	arg03, local07
23bbc     10 13 02 F6 | 	mov	arg01, local02
23bc0     00 90 20 FF 
23bc4     00 14 06 F6 | 	mov	arg02, ##1092616192
23bc8     F4 06 B0 FD | 	call	#__system___float_pow_n
23bcc     12 FB 61 F5 | 	xor	result1, local04
23bd0     A7 F0 03 F6 | 	mov	ptra, fp
23bd4     B2 00 A0 FD | 	call	#popregs_
23bd8                 | __system____builtin_atof_ret
23bd8     2D 00 64 FD | 	ret
23bdc                 | 
23bdc                 | __system____builtin_ilogb
23bdc     20 FC BF FD | 	call	#__system___float_Unpack
23be0     00 FE 0D F2 | 	cmp	result3, #0 wz
23be4     00 00 40 AF 
23be8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23bec     24 00 90 AD |  if_e	jmp	#LR__3391
23bf0     80 FC 0D F2 | 	cmp	result2, #128 wz
23bf4     18 00 90 5D |  if_ne	jmp	#LR__3390
23bf8     00 00 10 FF 
23bfc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23c00     1E FA CD A9 |  if_e	bmask	result1, #30
23c04     0C 00 90 AD |  if_e	jmp	#LR__3391
23c08     1F FA C5 F9 | 	decod	result1, #31
23c0c     04 00 90 FD | 	jmp	#LR__3391
23c10                 | LR__3390
23c10     FE FA 01 F6 | 	mov	result1, result2
23c14                 | LR__3391
23c14                 | __system____builtin_ilogb_ret
23c14     2D 00 64 FD | 	ret
23c18                 | 
23c18                 | __system____builtin_sinf
23c18     03 4A 05 F6 | 	mov	COUNT_, #3
23c1c     A8 00 A0 FD | 	call	#pushregs_
23c20     09 1F 02 F6 | 	mov	local01, arg01
23c24     87 64 20 FF 
23c28     DB 15 06 F6 | 	mov	arg02, ##1086918619
23c2c     B0 F8 BF FD | 	call	#__system___float_div
23c30     FD 12 02 F6 | 	mov	arg01, result1
23c34     00 14 06 F6 | 	mov	arg02, #0
23c38     68 FB BF FD | 	call	#__system___float_tointeger
23c3c     FD 16 0A F6 | 	mov	arg03, result1 wz
23c40     44 00 90 AD |  if_e	jmp	#LR__3400
23c44     0B 13 52 F6 | 	abs	arg01, arg03 wc
23c48     1F 20 C6 C9 |  if_b	decod	local02, #31
23c4c     00 20 06 36 |  if_ae	mov	local02, #0
23c50     84 F2 BF FD | 	call	#__system___float_fromuns
23c54     10 FB 61 F5 | 	xor	result1, local02
23c58     FD 12 02 F6 | 	mov	arg01, result1
23c5c     1E 14 C6 F9 | 	decod	arg02, #30
23c60     78 F6 BF FD | 	call	#__system___float_mul
23c64     FD 12 02 F6 | 	mov	arg01, result1
23c68     87 24 20 FF 
23c6c     DB 15 06 F6 | 	mov	arg02, ##1078530011
23c70     68 F6 BF FD | 	call	#__system___float_mul
23c74     FD 14 02 F6 | 	mov	arg02, result1
23c78     0F 13 02 F6 | 	mov	arg01, local01
23c7c     1F 14 E6 F4 | 	bitnot	arg02, #31
23c80     88 F2 BF FD | 	call	#__system___float_add
23c84     FD 1E 02 F6 | 	mov	local01, result1
23c88                 | LR__3400
23c88     0F 13 02 F6 | 	mov	arg01, local01
23c8c     66 E6 1E FF 
23c90     CD 14 06 F6 | 	mov	arg02, ##1036831949
23c94     01 16 06 F6 | 	mov	arg03, #1
23c98     74 FA BF FD | 	call	#__system___float_cmp
23c9c     00 FA 55 F2 | 	cmps	result1, #0 wc
23ca0     5C 00 90 3D |  if_ae	jmp	#LR__3401
23ca4     0F 13 02 F6 | 	mov	arg01, local01
23ca8     66 E6 5E FF 
23cac     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23cb0     01 16 66 F6 | 	neg	arg03, #1
23cb4     58 FA BF FD | 	call	#__system___float_cmp
23cb8     01 FA 55 F2 | 	cmps	result1, #1 wc
23cbc     40 00 90 CD |  if_b	jmp	#LR__3401
23cc0     0F 13 02 F6 | 	mov	arg01, local01
23cc4     0F 15 02 F6 | 	mov	arg02, local01
23cc8     10 F6 BF FD | 	call	#__system___float_mul
23ccc     FD 12 02 F6 | 	mov	arg01, result1
23cd0     0F 15 02 F6 | 	mov	arg02, local01
23cd4     04 F6 BF FD | 	call	#__system___float_mul
23cd8     FD 12 02 F6 | 	mov	arg01, result1
23cdc     00 60 20 FF 
23ce0     00 14 06 F6 | 	mov	arg02, ##1086324736
23ce4     F8 F7 BF FD | 	call	#__system___float_div
23ce8     FD 14 02 F6 | 	mov	arg02, result1
23cec     0F 13 02 F6 | 	mov	arg01, local01
23cf0     1F 14 E6 F4 | 	bitnot	arg02, #31
23cf4     14 F2 BF FD | 	call	#__system___float_add
23cf8     FD 22 02 F6 | 	mov	local03, result1
23cfc     54 00 90 FD | 	jmp	#LR__3402
23d00                 | LR__3401
23d00     0F 13 02 F6 | 	mov	arg01, local01
23d04     7C 91 26 FF 
23d08     83 15 06 F6 | 	mov	arg02, ##1294137731
23d0c     CC F5 BF FD | 	call	#__system___float_mul
23d10     FD 12 02 F6 | 	mov	arg01, result1
23d14     00 14 06 F6 | 	mov	arg02, #0
23d18     88 FA BF FD | 	call	#__system___float_tointeger
23d1c     02 FA 65 F0 | 	shl	result1, #2
23d20     00 00 A0 FF 
23d24     FD 00 48 FD | 	qrotate	##1073741824, result1
23d28     19 12 62 FD | 	getqy	arg01
23d2c     09 13 52 F6 | 	abs	arg01, arg01 wc
23d30     1F 20 C6 C9 |  if_b	decod	local02, #31
23d34     00 20 06 36 |  if_ae	mov	local02, #0
23d38     9C F1 BF FD | 	call	#__system___float_fromuns
23d3c     10 FB 61 F5 | 	xor	result1, local02
23d40     FD 12 02 F6 | 	mov	arg01, result1
23d44     00 40 27 FF 
23d48     00 14 06 F6 | 	mov	arg02, ##1317011456
23d4c     90 F7 BF FD | 	call	#__system___float_div
23d50     FD 22 02 F6 | 	mov	local03, result1
23d54                 | LR__3402
23d54     11 FB 01 F6 | 	mov	result1, local03
23d58     A7 F0 03 F6 | 	mov	ptra, fp
23d5c     B2 00 A0 FD | 	call	#popregs_
23d60                 | __system____builtin_sinf_ret
23d60     2D 00 64 FD | 	ret
23d64                 | 
23d64                 | __system____builtin_tanf
23d64     02 4A 05 F6 | 	mov	COUNT_, #2
23d68     A8 00 A0 FD | 	call	#pushregs_
23d6c     09 1F 02 F6 | 	mov	local01, arg01
23d70     A4 FE BF FD | 	call	#__system____builtin_sinf
23d74     FD 20 02 F6 | 	mov	local02, result1
23d78     0F 15 02 F6 | 	mov	arg02, local01
23d7c     87 E4 1F FF 
23d80     DB 13 06 F6 | 	mov	arg01, ##1070141403
23d84     1F 14 E6 F4 | 	bitnot	arg02, #31
23d88     80 F1 BF FD | 	call	#__system___float_add
23d8c     FD 12 02 F6 | 	mov	arg01, result1
23d90     84 FE BF FD | 	call	#__system____builtin_sinf
23d94     FD 14 02 F6 | 	mov	arg02, result1
23d98     10 13 02 F6 | 	mov	arg01, local02
23d9c     40 F7 BF FD | 	call	#__system___float_div
23da0     A7 F0 03 F6 | 	mov	ptra, fp
23da4     B2 00 A0 FD | 	call	#popregs_
23da8                 | __system____builtin_tanf_ret
23da8     2D 00 64 FD | 	ret
23dac                 | 
23dac                 | __system____builtin_asinf
23dac     01 4A 05 F6 | 	mov	COUNT_, #1
23db0     A8 00 A0 FD | 	call	#pushregs_
23db4     09 1F 02 F6 | 	mov	local01, arg01
23db8     0F 15 02 F6 | 	mov	arg02, local01
23dbc     0F 13 02 F6 | 	mov	arg01, local01
23dc0     18 F5 BF FD | 	call	#__system___float_mul
23dc4     FD 14 02 F6 | 	mov	arg02, result1
23dc8     00 C0 1F FF 
23dcc     00 12 06 F6 | 	mov	arg01, ##1065353216
23dd0     1F 14 E6 F4 | 	bitnot	arg02, #31
23dd4     34 F1 BF FD | 	call	#__system___float_add
23dd8     FD 12 02 F6 | 	mov	arg01, result1
23ddc     24 F4 BF FD | 	call	#__system___float_sqrt
23de0     FD 14 02 F6 | 	mov	arg02, result1
23de4     0F 13 02 F6 | 	mov	arg01, local01
23de8     58 00 B0 FD | 	call	#__system____builtin_atan2f
23dec     A7 F0 03 F6 | 	mov	ptra, fp
23df0     B2 00 A0 FD | 	call	#popregs_
23df4                 | __system____builtin_asinf_ret
23df4     2D 00 64 FD | 	ret
23df8                 | 
23df8                 | __system____builtin_acosf
23df8     01 4A 05 F6 | 	mov	COUNT_, #1
23dfc     A8 00 A0 FD | 	call	#pushregs_
23e00     09 1F 02 F6 | 	mov	local01, arg01
23e04     0F 15 02 F6 | 	mov	arg02, local01
23e08     0F 13 02 F6 | 	mov	arg01, local01
23e0c     CC F4 BF FD | 	call	#__system___float_mul
23e10     FD 14 02 F6 | 	mov	arg02, result1
23e14     00 C0 1F FF 
23e18     00 12 06 F6 | 	mov	arg01, ##1065353216
23e1c     1F 14 E6 F4 | 	bitnot	arg02, #31
23e20     E8 F0 BF FD | 	call	#__system___float_add
23e24     FD 12 02 F6 | 	mov	arg01, result1
23e28     D8 F3 BF FD | 	call	#__system___float_sqrt
23e2c     FD 12 02 F6 | 	mov	arg01, result1
23e30     0F 15 02 F6 | 	mov	arg02, local01
23e34     0C 00 B0 FD | 	call	#__system____builtin_atan2f
23e38     A7 F0 03 F6 | 	mov	ptra, fp
23e3c     B2 00 A0 FD | 	call	#popregs_
23e40                 | __system____builtin_acosf_ret
23e40     2D 00 64 FD | 	ret
23e44                 | 
23e44                 | __system____builtin_atan2f
23e44     04 4A 05 F6 | 	mov	COUNT_, #4
23e48     A8 00 A0 FD | 	call	#pushregs_
23e4c     09 1F 02 F6 | 	mov	local01, arg01
23e50     0A 21 02 F6 | 	mov	local02, arg02
23e54     0F 13 02 F6 | 	mov	arg01, local01
23e58     00 14 06 F6 | 	mov	arg02, #0
23e5c     01 16 06 F6 | 	mov	arg03, #1
23e60     AC F8 BF FD | 	call	#__system___float_cmp
23e64     00 FA 0D F2 | 	cmp	result1, #0 wz
23e68     28 00 90 5D |  if_ne	jmp	#LR__3410
23e6c     10 13 02 F6 | 	mov	arg01, local02
23e70     00 14 06 F6 | 	mov	arg02, #0
23e74     01 16 06 F6 | 	mov	arg03, #1
23e78     94 F8 BF FD | 	call	#__system___float_cmp
23e7c     00 FA 55 F2 | 	cmps	result1, #0 wc
23e80     87 24 60 CF 
23e84     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
23e88     DC 00 90 CD |  if_b	jmp	#LR__3411
23e8c     00 FA 05 F6 | 	mov	result1, #0
23e90     D4 00 90 FD | 	jmp	#LR__3411
23e94                 | LR__3410
23e94     10 13 02 F6 | 	mov	arg01, local02
23e98     10 15 02 F6 | 	mov	arg02, local02
23e9c     3C F4 BF FD | 	call	#__system___float_mul
23ea0     FD 22 02 F6 | 	mov	local03, result1
23ea4     0F 13 02 F6 | 	mov	arg01, local01
23ea8     0F 15 02 F6 | 	mov	arg02, local01
23eac     2C F4 BF FD | 	call	#__system___float_mul
23eb0     FD 14 02 F6 | 	mov	arg02, result1
23eb4     11 13 02 F6 | 	mov	arg01, local03
23eb8     50 F0 BF FD | 	call	#__system___float_add
23ebc     FD 12 02 F6 | 	mov	arg01, result1
23ec0     40 F3 BF FD | 	call	#__system___float_sqrt
23ec4     FD 22 02 F6 | 	mov	local03, result1
23ec8     10 13 02 F6 | 	mov	arg01, local02
23ecc     11 15 02 F6 | 	mov	arg02, local03
23ed0     0C F6 BF FD | 	call	#__system___float_div
23ed4     FD 20 02 F6 | 	mov	local02, result1
23ed8     0F 13 02 F6 | 	mov	arg01, local01
23edc     11 15 02 F6 | 	mov	arg02, local03
23ee0     FC F5 BF FD | 	call	#__system___float_div
23ee4     FD 1E 02 F6 | 	mov	local01, result1
23ee8     00 40 27 FF 
23eec     00 12 06 F6 | 	mov	arg01, ##1317011456
23ef0     10 15 02 F6 | 	mov	arg02, local02
23ef4     E4 F3 BF FD | 	call	#__system___float_mul
23ef8     FD 12 02 F6 | 	mov	arg01, result1
23efc     00 14 06 F6 | 	mov	arg02, #0
23f00     A0 F8 BF FD | 	call	#__system___float_tointeger
23f04     FD 22 02 F6 | 	mov	local03, result1
23f08     00 40 27 FF 
23f0c     00 12 06 F6 | 	mov	arg01, ##1317011456
23f10     0F 15 02 F6 | 	mov	arg02, local01
23f14     C4 F3 BF FD | 	call	#__system___float_mul
23f18     FD 12 02 F6 | 	mov	arg01, result1
23f1c     00 14 06 F6 | 	mov	arg02, #0
23f20     80 F8 BF FD | 	call	#__system___float_tointeger
23f24     FD 22 52 FD | 	qvector	local03, result1
23f28     87 24 20 FF 
23f2c     DB 23 06 F6 | 	mov	local03, ##1078530011
23f30     19 12 62 FD | 	getqy	arg01
23f34     01 12 C6 F0 | 	sar	arg01, #1
23f38     09 13 52 F6 | 	abs	arg01, arg01 wc
23f3c     1F 24 C6 C9 |  if_b	decod	local04, #31
23f40     00 24 06 36 |  if_ae	mov	local04, #0
23f44     90 EF BF FD | 	call	#__system___float_fromuns
23f48     12 FB 61 F5 | 	xor	result1, local04
23f4c     FD 12 02 F6 | 	mov	arg01, result1
23f50     00 40 27 FF 
23f54     00 14 06 F6 | 	mov	arg02, ##1317011456
23f58     84 F5 BF FD | 	call	#__system___float_div
23f5c     FD 14 02 F6 | 	mov	arg02, result1
23f60     11 13 02 F6 | 	mov	arg01, local03
23f64     74 F3 BF FD | 	call	#__system___float_mul
23f68                 | LR__3411
23f68     A7 F0 03 F6 | 	mov	ptra, fp
23f6c     B2 00 A0 FD | 	call	#popregs_
23f70                 | __system____builtin_atan2f_ret
23f70     2D 00 64 FD | 	ret
23f74                 | 
23f74                 | __system____builtin_exp2f
23f74     04 4A 05 F6 | 	mov	COUNT_, #4
23f78     A8 00 A0 FD | 	call	#pushregs_
23f7c     09 1F 02 F6 | 	mov	local01, arg01
23f80     00 7F 21 FF 
23f84     00 14 06 F6 | 	mov	arg02, ##1123942400
23f88     01 16 66 F6 | 	neg	arg03, #1
23f8c     80 F7 BF FD | 	call	#__system___float_cmp
23f90     00 FA 55 F2 | 	cmps	result1, #0 wc
23f94     00 C0 3F 3F 
23f98     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
23f9c     DC 00 90 3D |  if_ae	jmp	#LR__3421
23fa0     0F 13 02 F6 | 	mov	arg01, local01
23fa4     00 7F 61 FF 
23fa8     00 14 06 F6 | 	mov	arg02, ##-1023541248
23fac     01 16 06 F6 | 	mov	arg03, #1
23fb0     5C F7 BF FD | 	call	#__system___float_cmp
23fb4     00 FA 55 F2 | 	cmps	result1, #0 wc
23fb8     00 FA 05 C6 |  if_b	mov	result1, #0
23fbc     BC 00 90 CD |  if_b	jmp	#LR__3421
23fc0     0F 13 02 F6 | 	mov	arg01, local01
23fc4     00 14 06 F6 | 	mov	arg02, #0
23fc8     D8 F7 BF FD | 	call	#__system___float_tointeger
23fcc     FD 20 02 F6 | 	mov	local02, result1
23fd0     10 13 52 F6 | 	abs	arg01, local02 wc
23fd4     1F 22 C6 C9 |  if_b	decod	local03, #31
23fd8     00 22 06 36 |  if_ae	mov	local03, #0
23fdc     F8 EE BF FD | 	call	#__system___float_fromuns
23fe0     11 FB 61 F5 | 	xor	result1, local03
23fe4     FD 14 02 F6 | 	mov	arg02, result1
23fe8     0F 13 02 F6 | 	mov	arg01, local01
23fec     1F 14 E6 F4 | 	bitnot	arg02, #31
23ff0     18 EF BF FD | 	call	#__system___float_add
23ff4     FD 24 02 F6 | 	mov	local04, result1
23ff8     12 13 02 F6 | 	mov	arg01, local04
23ffc     00 14 06 F6 | 	mov	arg02, #0
24000     01 16 06 F6 | 	mov	arg03, #1
24004     08 F7 BF FD | 	call	#__system___float_cmp
24008     00 FA 55 F2 | 	cmps	result1, #0 wc
2400c     18 00 90 3D |  if_ae	jmp	#LR__3420
24010     12 13 02 F6 | 	mov	arg01, local04
24014     00 C0 1F FF 
24018     00 14 06 F6 | 	mov	arg02, ##1065353216
2401c     EC EE BF FD | 	call	#__system___float_add
24020     FD 24 02 F6 | 	mov	local04, result1
24024     01 20 86 F1 | 	sub	local02, #1
24028                 | LR__3420
24028     7F 20 06 F1 | 	add	local02, #127
2402c     17 20 66 F0 | 	shl	local02, #23
24030     12 13 02 F6 | 	mov	arg01, local04
24034     00 80 26 FF 
24038     00 14 06 F6 | 	mov	arg02, ##1291845632
2403c     9C F2 BF FD | 	call	#__system___float_mul
24040     FD 12 02 F6 | 	mov	arg01, result1
24044     00 14 06 F6 | 	mov	arg02, #0
24048     58 F7 BF FD | 	call	#__system___float_tointeger
2404c     FD 24 0A F6 | 	mov	local04, result1 wz
24050     10 FB 01 A6 |  if_e	mov	result1, local02
24054     24 00 90 AD |  if_e	jmp	#LR__3421
24058     3E 24 26 F4 | 	bith	local04, #62
2405c     0F 24 62 FD | 	qexp	local04
24060     10 13 02 F6 | 	mov	arg01, local02
24064     18 14 62 FD | 	getqx	arg02
24068     01 14 06 F1 | 	add	arg02, #1
2406c     01 14 46 F0 | 	shr	arg02, #1
24070     00 80 1F FF 
24074     00 14 06 F1 | 	add	arg02, ##1056964608
24078     60 F2 BF FD | 	call	#__system___float_mul
2407c                 | LR__3421
2407c     A7 F0 03 F6 | 	mov	ptra, fp
24080     B2 00 A0 FD | 	call	#popregs_
24084                 | __system____builtin_exp2f_ret
24084     2D 00 64 FD | 	ret
24088                 | 
24088                 | __system____builtin_log2f
24088     06 4A 05 F6 | 	mov	COUNT_, #6
2408c     A8 00 A0 FD | 	call	#pushregs_
24090     09 1F 02 F6 | 	mov	local01, arg01
24094     09 21 0A F6 | 	mov	local02, arg01 wz
24098     00 00 40 5F 
2409c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
240a0     00 40 00 AF 
240a4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
240a8     08 01 90 AD |  if_e	jmp	#LR__3434
240ac     00 20 56 F2 | 	cmps	local02, #0 wc
240b0     00 E0 3F CF 
240b4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
240b8     F8 00 90 CD |  if_b	jmp	#LR__3434
240bc     0F 13 02 F6 | 	mov	arg01, local01
240c0     00 90 20 FF 
240c4     00 14 06 F6 | 	mov	arg02, ##1092616192
240c8     01 16 06 F6 | 	mov	arg03, #1
240cc     40 F6 BF FD | 	call	#__system___float_cmp
240d0     00 FA 0D F2 | 	cmp	result1, #0 wz
240d4     4D 2A 20 AF 
240d8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
240dc     D4 00 90 AD |  if_e	jmp	#LR__3434
240e0     0F 13 02 F6 | 	mov	arg01, local01
240e4     FC 16 20 FF 
240e8     54 14 06 F6 | 	mov	arg02, ##1076754516
240ec     01 16 06 F6 | 	mov	arg03, #1
240f0     1C F6 BF FD | 	call	#__system___float_cmp
240f4     00 FA 0D F2 | 	cmp	result1, #0 wz
240f8     55 DC 1F AF 
240fc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24100     B0 00 90 AD |  if_e	jmp	#LR__3434
24104     10 23 02 F6 | 	mov	local03, local02
24108     17 22 46 F0 | 	shr	local03, #23
2410c     11 23 E2 F8 | 	getbyte	local03, local03, #0
24110     17 21 06 F4 | 	bitl	local02, #279
24114     10 25 02 F6 | 	mov	local04, local02
24118     FF 22 0E F2 | 	cmp	local03, #255 wz
2411c     1C 00 90 5D |  if_ne	jmp	#LR__3430
24120     00 24 0E F2 | 	cmp	local04, #0 wz
24124     00 C0 3F 5F 
24128     00 26 06 56 |  if_ne	mov	local05, ##2139095040
2412c     00 E0 3F AF 
24130     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24134     13 FB 01 F6 | 	mov	result1, local05
24138     78 00 90 FD | 	jmp	#LR__3434
2413c                 | LR__3430
2413c     00 22 0E F2 | 	cmp	local03, #0 wz
24140     17 24 26 54 |  if_ne	bith	local04, #23
24144     7F 22 86 51 |  if_ne	sub	local03, #127
24148     28 00 90 5D |  if_ne	jmp	#LR__3433
2414c     00 24 0E F2 | 	cmp	local04, #0 wz
24150     00 40 00 AF 
24154     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24158     58 00 90 AD |  if_e	jmp	#LR__3434
2415c     7E 22 66 F6 | 	neg	local03, #126
24160     97 08 48 FB | 	callpa	#(@LR__3432-@LR__3431)>>2,fcache_load_ptr_
24164                 | LR__3431
24164     17 24 2E F4 | 	testbn	local04, #23 wz
24168     01 24 66 A0 |  if_e	shl	local04, #1
2416c     01 22 06 A1 |  if_e	add	local03, #1
24170     F0 FF 9F AD |  if_e	jmp	#LR__3431
24174                 | LR__3432
24174                 | LR__3433
24174     0E 24 62 FD | 	qlog	local04
24178     01 22 86 F1 | 	sub	local03, #1
2417c     11 13 52 F6 | 	abs	arg01, local03 wc
24180     1F 28 C6 C9 |  if_b	decod	local06, #31
24184     00 28 06 36 |  if_ae	mov	local06, #0
24188     18 26 62 FD | 	getqx	local05
2418c     9B 26 06 F4 | 	bitl	local05, #155
24190     08 26 06 F1 | 	add	local05, #8
24194     04 26 46 F0 | 	shr	local05, #4
24198     00 C0 1F FF 
2419c     00 26 06 F1 | 	add	local05, ##1065353216
241a0     34 ED BF FD | 	call	#__system___float_fromuns
241a4     14 FB 61 F5 | 	xor	result1, local06
241a8     FD 14 02 F6 | 	mov	arg02, result1
241ac     13 13 02 F6 | 	mov	arg01, local05
241b0     58 ED BF FD | 	call	#__system___float_add
241b4                 | LR__3434
241b4     A7 F0 03 F6 | 	mov	ptra, fp
241b8     B2 00 A0 FD | 	call	#popregs_
241bc                 | __system____builtin_log2f_ret
241bc     2D 00 64 FD | 	ret
241c0                 | 
241c0                 | __system____builtin_powf
241c0     04 4A 05 F6 | 	mov	COUNT_, #4
241c4     A8 00 A0 FD | 	call	#pushregs_
241c8     09 1F 02 F6 | 	mov	local01, arg01
241cc     0A 21 02 F6 | 	mov	local02, arg02
241d0     10 13 02 F6 | 	mov	arg01, local02
241d4     00 14 06 F6 | 	mov	arg02, #0
241d8     C8 F5 BF FD | 	call	#__system___float_tointeger
241dc     FD 22 02 F6 | 	mov	local03, result1
241e0     11 13 52 F6 | 	abs	arg01, local03 wc
241e4     1F 24 C6 C9 |  if_b	decod	local04, #31
241e8     00 24 06 36 |  if_ae	mov	local04, #0
241ec     E8 EC BF FD | 	call	#__system___float_fromuns
241f0     12 FB 61 F5 | 	xor	result1, local04
241f4     FD 12 02 F6 | 	mov	arg01, result1
241f8     10 15 02 F6 | 	mov	arg02, local02
241fc     01 16 06 F6 | 	mov	arg03, #1
24200     0C F5 BF FD | 	call	#__system___float_cmp
24204     00 FA 0D F2 | 	cmp	result1, #0 wz
24208     18 00 90 5D |  if_ne	jmp	#LR__3440
2420c     00 C0 1F FF 
24210     00 12 06 F6 | 	mov	arg01, ##1065353216
24214     0F 15 02 F6 | 	mov	arg02, local01
24218     11 17 02 F6 | 	mov	arg03, local03
2421c     A0 00 B0 FD | 	call	#__system___float_pow_n
24220     58 00 90 FD | 	jmp	#LR__3441
24224                 | LR__3440
24224     0F 13 02 F6 | 	mov	arg01, local01
24228     00 14 06 F6 | 	mov	arg02, #0
2422c     01 16 06 F6 | 	mov	arg03, #1
24230     DC F4 BF FD | 	call	#__system___float_cmp
24234     00 FA 55 F2 | 	cmps	result1, #0 wc
24238     00 E0 3F CF 
2423c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24240     38 00 90 CD |  if_b	jmp	#LR__3441
24244     0F 13 02 F6 | 	mov	arg01, local01
24248     00 14 06 F6 | 	mov	arg02, #0
2424c     01 16 06 F6 | 	mov	arg03, #1
24250     BC F4 BF FD | 	call	#__system___float_cmp
24254     00 FA 0D F2 | 	cmp	result1, #0 wz
24258     00 FA 05 A6 |  if_e	mov	result1, #0
2425c     1C 00 90 AD |  if_e	jmp	#LR__3441
24260     0F 13 02 F6 | 	mov	arg01, local01
24264     20 FE BF FD | 	call	#__system____builtin_log2f
24268     FD 12 02 F6 | 	mov	arg01, result1
2426c     10 15 02 F6 | 	mov	arg02, local02
24270     68 F0 BF FD | 	call	#__system___float_mul
24274     FD 12 02 F6 | 	mov	arg01, result1
24278     F8 FC BF FD | 	call	#__system____builtin_exp2f
2427c                 | LR__3441
2427c     A7 F0 03 F6 | 	mov	ptra, fp
24280     B2 00 A0 FD | 	call	#popregs_
24284                 | __system____builtin_powf_ret
24284     2D 00 64 FD | 	ret
24288                 | 
24288                 | __system____builtin_logbase
24288     02 4A 05 F6 | 	mov	COUNT_, #2
2428c     A8 00 A0 FD | 	call	#pushregs_
24290     09 1F 02 F6 | 	mov	local01, arg01
24294     0A 13 02 F6 | 	mov	arg01, arg02
24298     EC FD BF FD | 	call	#__system____builtin_log2f
2429c     FD 20 02 F6 | 	mov	local02, result1
242a0     0F 13 02 F6 | 	mov	arg01, local01
242a4     E0 FD BF FD | 	call	#__system____builtin_log2f
242a8     FD 14 02 F6 | 	mov	arg02, result1
242ac     10 13 02 F6 | 	mov	arg01, local02
242b0     2C F2 BF FD | 	call	#__system___float_div
242b4     A7 F0 03 F6 | 	mov	ptra, fp
242b8     B2 00 A0 FD | 	call	#popregs_
242bc                 | __system____builtin_logbase_ret
242bc     2D 00 64 FD | 	ret
242c0                 | 
242c0                 | __system___float_pow_n
242c0     05 4A 05 F6 | 	mov	COUNT_, #5
242c4     A8 00 A0 FD | 	call	#pushregs_
242c8     09 1F 02 F6 | 	mov	local01, arg01
242cc     0A 21 02 F6 | 	mov	local02, arg02
242d0     0B 23 02 F6 | 	mov	local03, arg03
242d4     00 22 56 F2 | 	cmps	local03, #0 wc
242d8     18 00 90 3D |  if_ae	jmp	#LR__3450
242dc     01 24 06 F6 | 	mov	local04, #1
242e0     11 23 62 F6 | 	neg	local03, local03
242e4     00 22 56 F2 | 	cmps	local03, #0 wc
242e8     00 FA 05 C6 |  if_b	mov	result1, #0
242ec     94 00 90 CD |  if_b	jmp	#LR__3458
242f0     04 00 90 FD | 	jmp	#LR__3451
242f4                 | LR__3450
242f4     00 24 06 F6 | 	mov	local04, #0
242f8                 | LR__3451
242f8     00 C0 1F FF 
242fc     00 26 06 F6 | 	mov	local05, ##1065353216
24300                 | LR__3452
24300     01 22 56 F2 | 	cmps	local03, #1 wc
24304     30 00 90 CD |  if_b	jmp	#LR__3454
24308     01 22 CE F7 | 	test	local03, #1 wz
2430c     10 00 90 AD |  if_e	jmp	#LR__3453
24310     13 13 02 F6 | 	mov	arg01, local05
24314     10 15 02 F6 | 	mov	arg02, local02
24318     C0 EF BF FD | 	call	#__system___float_mul
2431c     FD 26 02 F6 | 	mov	local05, result1
24320                 | LR__3453
24320     01 22 C6 F0 | 	sar	local03, #1
24324     10 13 02 F6 | 	mov	arg01, local02
24328     10 15 02 F6 | 	mov	arg02, local02
2432c     AC EF BF FD | 	call	#__system___float_mul
24330     FD 20 02 F6 | 	mov	local02, result1
24334     C8 FF 9F FD | 	jmp	#LR__3452
24338                 | LR__3454
24338     00 24 0E F2 | 	cmp	local04, #0 wz
2433c     14 00 90 AD |  if_e	jmp	#LR__3455
24340     0F 13 02 F6 | 	mov	arg01, local01
24344     13 15 02 F6 | 	mov	arg02, local05
24348     94 F1 BF FD | 	call	#__system___float_div
2434c     FD 26 02 F6 | 	mov	local05, result1
24350     2C 00 90 FD | 	jmp	#LR__3457
24354                 | LR__3455
24354     0F 13 02 F6 | 	mov	arg01, local01
24358     00 C0 1F FF 
2435c     00 14 06 F6 | 	mov	arg02, ##1065353216
24360     01 16 06 F6 | 	mov	arg03, #1
24364     A8 F3 BF FD | 	call	#__system___float_cmp
24368     00 FA 0D F2 | 	cmp	result1, #0 wz
2436c     10 00 90 AD |  if_e	jmp	#LR__3456
24370     0F 13 02 F6 | 	mov	arg01, local01
24374     13 15 02 F6 | 	mov	arg02, local05
24378     60 EF BF FD | 	call	#__system___float_mul
2437c     FD 26 02 F6 | 	mov	local05, result1
24380                 | LR__3456
24380                 | LR__3457
24380     13 FB 01 F6 | 	mov	result1, local05
24384                 | LR__3458
24384     A7 F0 03 F6 | 	mov	ptra, fp
24388     B2 00 A0 FD | 	call	#popregs_
2438c                 | __system___float_pow_n_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | __system___gc_ptrs
24390     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24394     00 03 02 F6 | 	mov	_var02, _var01
24398     76 01 00 FF 
2439c     F8 03 06 F1 | 	add	_var02, ##191992
243a0     00 FD 09 FB | 	rdlong	result2, _var01 wz
243a4     74 00 90 5D |  if_ne	jmp	#LR__3460
243a8     01 FD 01 F6 | 	mov	result2, _var02
243ac     00 FD 81 F1 | 	sub	result2, _var01
243b0     00 03 58 FC | 	wrword	#1, _var01
243b4     00 FB 01 F6 | 	mov	result1, _var01
243b8     02 FA 05 F1 | 	add	result1, #2
243bc     36 00 80 FF 
243c0     FD 20 59 FC | 	wrword	##27792, result1
243c4     00 FB 01 F6 | 	mov	result1, _var01
243c8     04 FA 05 F1 | 	add	result1, #4
243cc     FD 00 58 FC | 	wrword	#0, result1
243d0     00 FB 01 F6 | 	mov	result1, _var01
243d4     06 FA 05 F1 | 	add	result1, #6
243d8     FD 02 58 FC | 	wrword	#1, result1
243dc     10 00 06 F1 | 	add	_var01, #16
243e0     FE FC 51 F6 | 	abs	result2, result2 wc
243e4     04 FC 45 F0 | 	shr	result2, #4
243e8     FE FC 81 F6 | 	negc	result2, result2
243ec     00 FD 51 FC | 	wrword	result2, _var01
243f0     00 FD 01 F6 | 	mov	result2, _var01
243f4     02 FC 05 F1 | 	add	result2, #2
243f8     36 00 80 FF 
243fc     FE 1E 59 FC | 	wrword	##27791, result2
24400     00 FD 01 F6 | 	mov	result2, _var01
24404     04 FC 05 F1 | 	add	result2, #4
24408     FE 00 58 FC | 	wrword	#0, result2
2440c     00 FD 01 F6 | 	mov	result2, _var01
24410     06 FC 05 F1 | 	add	result2, #6
24414     FE 00 58 FC | 	wrword	#0, result2
24418     10 00 86 F1 | 	sub	_var01, #16
2441c                 | LR__3460
2441c     00 FB 01 F6 | 	mov	result1, _var01
24420     01 FD 01 F6 | 	mov	result2, _var02
24424                 | __system___gc_ptrs_ret
24424     2D 00 64 FD | 	ret
24428                 | 
24428                 | __system___gc_tryalloc
24428     0B 4A 05 F6 | 	mov	COUNT_, #11
2442c     A8 00 A0 FD | 	call	#pushregs_
24430     09 1F 02 F6 | 	mov	local01, arg01
24434     0A 21 02 F6 | 	mov	local02, arg02
24438     54 FF BF FD | 	call	#__system___gc_ptrs
2443c     FD 22 02 F6 | 	mov	local03, result1
24440     FE 24 02 F6 | 	mov	local04, result2
24444     11 27 02 F6 | 	mov	local05, local03
24448     00 28 06 F6 | 	mov	local06, #0
2444c     97 1E 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
24450                 | LR__3470
24450     13 2B 02 F6 | 	mov	local07, local05
24454     06 26 06 F1 | 	add	local05, #6
24458     13 15 EA FA | 	rdword	arg02, local05 wz
2445c     11 13 02 F6 | 	mov	arg01, local03
24460     00 FA 05 A6 |  if_e	mov	result1, #0
24464     04 14 66 50 |  if_ne	shl	arg02, #4
24468     0A 13 02 51 |  if_ne	add	arg01, arg02
2446c     09 FB 01 56 |  if_ne	mov	result1, arg01
24470     FD 26 0A F6 | 	mov	local05, result1 wz
24474     13 29 E2 5A |  if_ne	rdword	local06, local05
24478     00 26 0E F2 | 	cmp	local05, #0 wz
2447c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24480     08 00 90 1D |  if_a	jmp	#LR__3472
24484     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
24488     C4 FF 9F 1D |  if_a	jmp	#LR__3470
2448c                 | LR__3471
2448c                 | LR__3472
2448c     00 26 0E F2 | 	cmp	local05, #0 wz
24490     13 FB 01 A6 |  if_e	mov	result1, local05
24494     3C 01 90 AD |  if_e	jmp	#LR__3475
24498     13 FD 01 F6 | 	mov	result2, local05
2449c     06 FC 05 F1 | 	add	result2, #6
244a0     FE 2C E2 FA | 	rdword	local08, result2
244a4     14 1F 52 F2 | 	cmps	local01, local06 wc
244a8     C0 00 90 3D |  if_ae	jmp	#LR__3474
244ac     13 1F 52 FC | 	wrword	local01, local05
244b0     13 13 02 F6 | 	mov	arg01, local05
244b4     0F 2D 02 F6 | 	mov	local08, local01
244b8     04 2C 66 F0 | 	shl	local08, #4
244bc     16 13 02 F1 | 	add	arg01, local08
244c0     0F 29 82 F1 | 	sub	local06, local01
244c4     09 29 52 FC | 	wrword	local06, arg01
244c8     09 2D 02 F6 | 	mov	local08, arg01
244cc     02 2C 06 F1 | 	add	local08, #2
244d0     36 00 80 FF 
244d4     16 1F 59 FC | 	wrword	##27791, local08
244d8     13 15 0A F6 | 	mov	arg02, local05 wz
244dc     00 FA 05 A6 |  if_e	mov	result1, #0
244e0     11 15 82 51 |  if_ne	sub	arg02, local03
244e4     04 14 46 50 |  if_ne	shr	arg02, #4
244e8     0A FB 01 56 |  if_ne	mov	result1, arg02
244ec     09 2D 02 F6 | 	mov	local08, arg01
244f0     04 2C 06 F1 | 	add	local08, #4
244f4     16 FB 51 FC | 	wrword	result1, local08
244f8     13 2D 02 F6 | 	mov	local08, local05
244fc     06 2C 06 F1 | 	add	local08, #6
24500     09 15 02 F6 | 	mov	arg02, arg01
24504     16 2D E2 FA | 	rdword	local08, local08
24508     06 14 06 F1 | 	add	arg02, #6
2450c     0A 2D 52 FC | 	wrword	local08, arg02
24510     09 2F 02 F6 | 	mov	local09, arg01
24514     17 15 0A F6 | 	mov	arg02, local09 wz
24518     00 FA 05 A6 |  if_e	mov	result1, #0
2451c     11 15 82 51 |  if_ne	sub	arg02, local03
24520     04 14 46 50 |  if_ne	shr	arg02, #4
24524     0A FB 01 56 |  if_ne	mov	result1, arg02
24528     FD 2C 02 F6 | 	mov	local08, result1
2452c     09 31 EA FA | 	rdword	local10, arg01 wz
24530     00 FA 05 A6 |  if_e	mov	result1, #0
24534     04 30 66 50 |  if_ne	shl	local10, #4
24538     18 13 02 51 |  if_ne	add	arg01, local10
2453c     09 FB 01 56 |  if_ne	mov	result1, arg01
24540     FD 32 0A F6 | 	mov	local11, result1 wz
24544     24 00 90 AD |  if_e	jmp	#LR__3473
24548     12 33 52 F2 | 	cmps	local11, local04 wc
2454c     1C 00 90 3D |  if_ae	jmp	#LR__3473
24550     17 15 0A F6 | 	mov	arg02, local09 wz
24554     00 FA 05 A6 |  if_e	mov	result1, #0
24558     11 15 82 51 |  if_ne	sub	arg02, local03
2455c     04 14 46 50 |  if_ne	shr	arg02, #4
24560     0A FB 01 56 |  if_ne	mov	result1, arg02
24564     04 32 06 F1 | 	add	local11, #4
24568     19 FB 51 FC | 	wrword	result1, local11
2456c                 | LR__3473
2456c                 | LR__3474
2456c     06 2A 06 F1 | 	add	local07, #6
24570     15 2D 52 FC | 	wrword	local08, local07
24574     36 00 00 FF 
24578     80 2E 06 F6 | 	mov	local09, ##27776
2457c     10 2F 42 F5 | 	or	local09, local02
24580     00 FA 05 F6 | 	mov	result1, #0
24584     01 FA 61 FD | 	cogid	result1
24588     FD 2E 42 F5 | 	or	local09, result1
2458c     13 33 02 F6 | 	mov	local11, local05
24590     02 32 06 F1 | 	add	local11, #2
24594     19 2F 52 FC | 	wrword	local09, local11
24598     11 2F 02 F6 | 	mov	local09, local03
2459c     08 2E 06 F1 | 	add	local09, #8
245a0     13 33 02 F6 | 	mov	local11, local05
245a4     17 2F E2 FA | 	rdword	local09, local09
245a8     06 32 06 F1 | 	add	local11, #6
245ac     19 2F 52 FC | 	wrword	local09, local11
245b0     13 15 0A F6 | 	mov	arg02, local05 wz
245b4     00 FA 05 A6 |  if_e	mov	result1, #0
245b8     11 15 82 51 |  if_ne	sub	arg02, local03
245bc     04 14 46 50 |  if_ne	shr	arg02, #4
245c0     0A FB 01 56 |  if_ne	mov	result1, arg02
245c4     08 22 06 F1 | 	add	local03, #8
245c8     11 FB 51 FC | 	wrword	result1, local03
245cc     08 26 06 F1 | 	add	local05, #8
245d0     13 FB 01 F6 | 	mov	result1, local05
245d4                 | LR__3475
245d4     A7 F0 03 F6 | 	mov	ptra, fp
245d8     B2 00 A0 FD | 	call	#popregs_
245dc                 | __system___gc_tryalloc_ret
245dc     2D 00 64 FD | 	ret
245e0                 | 
245e0                 | __system___gc_alloc_managed
245e0     01 4A 05 F6 | 	mov	COUNT_, #1
245e4     A8 00 A0 FD | 	call	#pushregs_
245e8     09 1F 02 F6 | 	mov	local01, arg01
245ec     00 14 06 F6 | 	mov	arg02, #0
245f0     1C 00 B0 FD | 	call	#__system___gc_doalloc
245f4     FD 14 0A F6 | 	mov	arg02, result1 wz
245f8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
245fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24600     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24604     A7 F0 03 F6 | 	mov	ptra, fp
24608     B2 00 A0 FD | 	call	#popregs_
2460c                 | __system___gc_alloc_managed_ret
2460c     2D 00 64 FD | 	ret
24610                 | 
24610                 | __system___gc_doalloc
24610     06 4A 05 F6 | 	mov	COUNT_, #6
24614     A8 00 A0 FD | 	call	#pushregs_
24618     09 1F 0A F6 | 	mov	local01, arg01 wz
2461c     0A 21 02 F6 | 	mov	local02, arg02
24620     00 FA 05 A6 |  if_e	mov	result1, #0
24624     8C 00 90 AD |  if_e	jmp	#LR__3487
24628     17 1E 06 F1 | 	add	local01, #23
2462c     0F 1E 26 F5 | 	andn	local01, #15
24630     04 1E 46 F0 | 	shr	local01, #4
24634     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24638     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2463c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24640     E4 C0 BF FD | 	call	#__system___lockmem
24644     0F 13 02 F6 | 	mov	arg01, local01
24648     10 15 02 F6 | 	mov	arg02, local02
2464c     D8 FD BF FD | 	call	#__system___gc_tryalloc
24650     FD 22 0A F6 | 	mov	local03, result1 wz
24654     14 00 90 5D |  if_ne	jmp	#LR__3480
24658     70 03 B0 FD | 	call	#__system___gc_docollect
2465c     0F 13 02 F6 | 	mov	arg01, local01
24660     10 15 02 F6 | 	mov	arg02, local02
24664     C0 FD BF FD | 	call	#__system___gc_tryalloc
24668     FD 22 02 F6 | 	mov	local03, result1
2466c                 | LR__3480
2466c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24670     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24674     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24678     09 01 68 FC | 	wrlong	#0, arg01
2467c     00 22 0E F2 | 	cmp	local03, #0 wz
24680     2C 00 90 AD |  if_e	jmp	#LR__3486
24684     04 1E 66 F0 | 	shl	local01, #4
24688     08 1E 86 F1 | 	sub	local01, #8
2468c     0F 25 52 F6 | 	abs	local04, local01 wc
24690     02 24 46 F0 | 	shr	local04, #2
24694     12 27 8A F6 | 	negc	local05, local04 wz
24698     11 29 02 F6 | 	mov	local06, local03
2469c     10 00 90 AD |  if_e	jmp	#LR__3485
246a0     97 06 48 FB | 	callpa	#(@LR__3483-@LR__3481)>>2,fcache_load_ptr_
246a4                 | LR__3481
246a4     13 05 D8 FC | 	rep	@LR__3484, local05
246a8                 | LR__3482
246a8     14 01 68 FC | 	wrlong	#0, local06
246ac     04 28 06 F1 | 	add	local06, #4
246b0                 | LR__3483
246b0                 | LR__3484
246b0                 | LR__3485
246b0                 | LR__3486
246b0     11 FB 01 F6 | 	mov	result1, local03
246b4                 | LR__3487
246b4     A7 F0 03 F6 | 	mov	ptra, fp
246b8     B2 00 A0 FD | 	call	#popregs_
246bc                 | __system___gc_doalloc_ret
246bc     2D 00 64 FD | 	ret
246c0                 | 
246c0                 | __system___gc_isvalidptr
246c0     F8 16 06 F4 | 	bitl	arg03, #248
246c4     08 16 86 F1 | 	sub	arg03, #8
246c8     09 17 52 F2 | 	cmps	arg03, arg01 wc
246cc     08 00 90 CD |  if_b	jmp	#LR__3490
246d0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
246d4     08 00 90 CD |  if_b	jmp	#LR__3491
246d8                 | LR__3490
246d8     00 FA 05 F6 | 	mov	result1, #0
246dc     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
246e0                 | LR__3491
246e0     0B 01 02 F6 | 	mov	_var01, arg03
246e4     09 01 62 F5 | 	xor	_var01, arg01
246e8     0F 00 CE F7 | 	test	_var01, #15 wz
246ec     00 FA 05 56 |  if_ne	mov	result1, #0
246f0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
246f4     0B 01 02 F6 | 	mov	_var01, arg03
246f8     02 00 06 F1 | 	add	_var01, #2
246fc     00 01 E2 FA | 	rdword	_var01, _var01
24700     7F 00 00 FF 
24704     C0 01 06 F5 | 	and	_var01, ##65472
24708     36 00 00 FF 
2470c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24710     00 FA 05 56 |  if_ne	mov	result1, #0
24714     0B FB 01 A6 |  if_e	mov	result1, arg03
24718                 | __system___gc_isvalidptr_ret
24718     2D 00 64 FD | 	ret
2471c                 | 
2471c                 | __system___gc_free
2471c     09 17 02 F6 | 	mov	arg03, arg01
24720     6C FC BF FD | 	call	#__system___gc_ptrs
24724     FD 12 02 F6 | 	mov	arg01, result1
24728     FE 14 02 F6 | 	mov	arg02, result2
2472c     90 FF BF FD | 	call	#__system___gc_isvalidptr
24730     FD 14 0A F6 | 	mov	arg02, result1 wz
24734     28 00 90 AD |  if_e	jmp	#LR__3500
24738     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2473c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24740     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24744     E0 BF BF FD | 	call	#__system___lockmem
24748     0A 13 02 F6 | 	mov	arg01, arg02
2474c     14 00 B0 FD | 	call	#__system___gc_dofree
24750     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24754     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24758     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2475c     09 01 68 FC | 	wrlong	#0, arg01
24760                 | LR__3500
24760                 | __system___gc_free_ret
24760     2D 00 64 FD | 	ret
24764                 | 
24764                 | __system___gc_dofree
24764     06 4A 05 F6 | 	mov	COUNT_, #6
24768     A8 00 A0 FD | 	call	#pushregs_
2476c     09 1F 02 F6 | 	mov	local01, arg01
24770     1C FC BF FD | 	call	#__system___gc_ptrs
24774     FD 20 02 F6 | 	mov	local02, result1
24778     FE 22 02 F6 | 	mov	local03, result2
2477c     0F 15 02 F6 | 	mov	arg02, local01
24780     02 14 06 F1 | 	add	arg02, #2
24784     36 00 80 FF 
24788     0A 1F 59 FC | 	wrword	##27791, arg02
2478c     0F 25 02 F6 | 	mov	local04, local01
24790     0F 13 02 F6 | 	mov	arg01, local01
24794     09 27 EA FA | 	rdword	local05, arg01 wz
24798     00 FA 05 A6 |  if_e	mov	result1, #0
2479c     04 26 66 50 |  if_ne	shl	local05, #4
247a0     13 13 02 51 |  if_ne	add	arg01, local05
247a4     09 FB 01 56 |  if_ne	mov	result1, arg01
247a8     FD 28 02 F6 | 	mov	local06, result1
247ac     97 24 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
247b0                 | LR__3510
247b0     04 24 06 F1 | 	add	local04, #4
247b4     12 15 EA FA | 	rdword	arg02, local04 wz
247b8     10 13 02 F6 | 	mov	arg01, local02
247bc     00 FA 05 A6 |  if_e	mov	result1, #0
247c0     04 14 66 50 |  if_ne	shl	arg02, #4
247c4     0A 13 02 51 |  if_ne	add	arg01, arg02
247c8     09 FB 01 56 |  if_ne	mov	result1, arg01
247cc     FD 24 0A F6 | 	mov	local04, result1 wz
247d0     24 00 90 AD |  if_e	jmp	#LR__3512
247d4     12 13 02 F6 | 	mov	arg01, local04
247d8     00 FA 05 F6 | 	mov	result1, #0
247dc     02 12 06 F1 | 	add	arg01, #2
247e0     09 13 E2 FA | 	rdword	arg01, arg01
247e4     36 00 00 FF 
247e8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
247ec     01 FA 65 A6 |  if_e	neg	result1, #1
247f0     00 FA 0D F2 | 	cmp	result1, #0 wz
247f4     B8 FF 9F AD |  if_e	jmp	#LR__3510
247f8                 | LR__3511
247f8                 | LR__3512
247f8     00 24 0E F2 | 	cmp	local04, #0 wz
247fc     10 25 02 A6 |  if_e	mov	local04, local02
24800     12 15 02 F6 | 	mov	arg02, local04
24804     06 14 06 F1 | 	add	arg02, #6
24808     0F 13 02 F6 | 	mov	arg01, local01
2480c     0A 15 E2 FA | 	rdword	arg02, arg02
24810     06 12 06 F1 | 	add	arg01, #6
24814     09 15 52 FC | 	wrword	arg02, arg01
24818     0F 15 0A F6 | 	mov	arg02, local01 wz
2481c     00 FA 05 A6 |  if_e	mov	result1, #0
24820     10 15 82 51 |  if_ne	sub	arg02, local02
24824     04 14 46 50 |  if_ne	shr	arg02, #4
24828     0A FB 01 56 |  if_ne	mov	result1, arg02
2482c     12 15 02 F6 | 	mov	arg02, local04
24830     06 14 06 F1 | 	add	arg02, #6
24834     0A FB 51 FC | 	wrword	result1, arg02
24838     10 25 0A F2 | 	cmp	local04, local02 wz
2483c     A4 00 90 AD |  if_e	jmp	#LR__3515
24840     12 13 02 F6 | 	mov	arg01, local04
24844     09 27 EA FA | 	rdword	local05, arg01 wz
24848     00 FA 05 A6 |  if_e	mov	result1, #0
2484c     04 26 66 50 |  if_ne	shl	local05, #4
24850     13 13 02 51 |  if_ne	add	arg01, local05
24854     09 FB 01 56 |  if_ne	mov	result1, arg01
24858     0F FB 09 F2 | 	cmp	result1, local01 wz
2485c     84 00 90 5D |  if_ne	jmp	#LR__3514
24860     12 29 E2 FA | 	rdword	local06, local04
24864     0F 15 E2 FA | 	rdword	arg02, local01
24868     0A 29 02 F1 | 	add	local06, arg02
2486c     12 29 52 FC | 	wrword	local06, local04
24870     0F 29 02 F6 | 	mov	local06, local01
24874     02 28 06 F1 | 	add	local06, #2
24878     14 01 58 FC | 	wrword	#0, local06
2487c     0F 13 02 F6 | 	mov	arg01, local01
24880     09 27 EA FA | 	rdword	local05, arg01 wz
24884     00 FA 05 A6 |  if_e	mov	result1, #0
24888     04 26 66 50 |  if_ne	shl	local05, #4
2488c     13 13 02 51 |  if_ne	add	arg01, local05
24890     09 FB 01 56 |  if_ne	mov	result1, arg01
24894     FD 28 02 F6 | 	mov	local06, result1
24898     11 29 52 F2 | 	cmps	local06, local03 wc
2489c     20 00 90 3D |  if_ae	jmp	#LR__3513
248a0     12 15 0A F6 | 	mov	arg02, local04 wz
248a4     00 FA 05 A6 |  if_e	mov	result1, #0
248a8     10 15 82 51 |  if_ne	sub	arg02, local02
248ac     04 14 46 50 |  if_ne	shr	arg02, #4
248b0     0A FB 01 56 |  if_ne	mov	result1, arg02
248b4     14 15 02 F6 | 	mov	arg02, local06
248b8     04 14 06 F1 | 	add	arg02, #4
248bc     0A FB 51 FC | 	wrword	result1, arg02
248c0                 | LR__3513
248c0     0F 15 02 F6 | 	mov	arg02, local01
248c4     06 14 06 F1 | 	add	arg02, #6
248c8     12 FD 01 F6 | 	mov	result2, local04
248cc     0A 15 E2 FA | 	rdword	arg02, arg02
248d0     06 FC 05 F1 | 	add	result2, #6
248d4     FE 14 52 FC | 	wrword	arg02, result2
248d8     06 1E 06 F1 | 	add	local01, #6
248dc     0F 01 58 FC | 	wrword	#0, local01
248e0     12 1F 02 F6 | 	mov	local01, local04
248e4                 | LR__3514
248e4                 | LR__3515
248e4     0F 13 02 F6 | 	mov	arg01, local01
248e8     09 27 EA FA | 	rdword	local05, arg01 wz
248ec     00 FA 05 A6 |  if_e	mov	result1, #0
248f0     04 26 66 50 |  if_ne	shl	local05, #4
248f4     13 13 02 51 |  if_ne	add	arg01, local05
248f8     09 FB 01 56 |  if_ne	mov	result1, arg01
248fc     FD 14 0A F6 | 	mov	arg02, result1 wz
24900     B8 00 90 AD |  if_e	jmp	#LR__3517
24904     11 15 52 F2 | 	cmps	arg02, local03 wc
24908     B0 00 90 3D |  if_ae	jmp	#LR__3517
2490c     0A 13 02 F6 | 	mov	arg01, arg02
24910     00 FA 05 F6 | 	mov	result1, #0
24914     02 12 06 F1 | 	add	arg01, #2
24918     09 13 E2 FA | 	rdword	arg01, arg01
2491c     36 00 00 FF 
24920     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24924     01 FA 65 A6 |  if_e	neg	result1, #1
24928     00 FA 0D F2 | 	cmp	result1, #0 wz
2492c     8C 00 90 AD |  if_e	jmp	#LR__3517
24930     0F 25 02 F6 | 	mov	local04, local01
24934     12 29 E2 FA | 	rdword	local06, local04
24938     0A 13 02 F6 | 	mov	arg01, arg02
2493c     09 1F E2 FA | 	rdword	local01, arg01
24940     0F 29 02 F1 | 	add	local06, local01
24944     12 29 52 FC | 	wrword	local06, local04
24948     09 29 02 F6 | 	mov	local06, arg01
2494c     06 28 06 F1 | 	add	local06, #6
24950     12 1F 02 F6 | 	mov	local01, local04
24954     14 29 E2 FA | 	rdword	local06, local06
24958     06 1E 06 F1 | 	add	local01, #6
2495c     0F 29 52 FC | 	wrword	local06, local01
24960     09 29 02 F6 | 	mov	local06, arg01
24964     02 28 06 F1 | 	add	local06, #2
24968     14 55 59 FC | 	wrword	#170, local06
2496c     09 29 02 F6 | 	mov	local06, arg01
24970     06 28 06 F1 | 	add	local06, #6
24974     14 01 58 FC | 	wrword	#0, local06
24978     09 27 EA FA | 	rdword	local05, arg01 wz
2497c     00 FA 05 A6 |  if_e	mov	result1, #0
24980     04 26 66 50 |  if_ne	shl	local05, #4
24984     13 13 02 51 |  if_ne	add	arg01, local05
24988     09 FB 01 56 |  if_ne	mov	result1, arg01
2498c     FD 28 0A F6 | 	mov	local06, result1 wz
24990     28 00 90 AD |  if_e	jmp	#LR__3516
24994     11 29 52 F2 | 	cmps	local06, local03 wc
24998     20 00 90 3D |  if_ae	jmp	#LR__3516
2499c     12 15 0A F6 | 	mov	arg02, local04 wz
249a0     00 FA 05 A6 |  if_e	mov	result1, #0
249a4     10 15 82 51 |  if_ne	sub	arg02, local02
249a8     04 14 46 50 |  if_ne	shr	arg02, #4
249ac     0A FB 01 56 |  if_ne	mov	result1, arg02
249b0     14 25 02 F6 | 	mov	local04, local06
249b4     04 24 06 F1 | 	add	local04, #4
249b8     12 FB 51 FC | 	wrword	result1, local04
249bc                 | LR__3516
249bc                 | LR__3517
249bc     14 FB 01 F6 | 	mov	result1, local06
249c0     A7 F0 03 F6 | 	mov	ptra, fp
249c4     B2 00 A0 FD | 	call	#popregs_
249c8                 | __system___gc_dofree_ret
249c8     2D 00 64 FD | 	ret
249cc                 | 
249cc                 | __system___gc_docollect
249cc     05 4A 05 F6 | 	mov	COUNT_, #5
249d0     A8 00 A0 FD | 	call	#pushregs_
249d4     B8 F9 BF FD | 	call	#__system___gc_ptrs
249d8     FE 1E 02 F6 | 	mov	local01, result2
249dc     FD 20 02 F6 | 	mov	local02, result1
249e0     10 13 02 F6 | 	mov	arg01, local02
249e4     09 23 EA FA | 	rdword	local03, arg01 wz
249e8     00 FA 05 A6 |  if_e	mov	result1, #0
249ec     04 22 66 50 |  if_ne	shl	local03, #4
249f0     11 13 02 51 |  if_ne	add	arg01, local03
249f4     09 FB 01 56 |  if_ne	mov	result1, arg01
249f8     FD 24 0A F6 | 	mov	local04, result1 wz
249fc     00 FA 05 F6 | 	mov	result1, #0
24a00     01 FA 61 FD | 	cogid	result1
24a04     FD 26 02 F6 | 	mov	local05, result1
24a08     48 00 90 AD |  if_e	jmp	#LR__3522
24a0c     97 22 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
24a10                 | LR__3520
24a10     0F 25 52 F2 | 	cmps	local04, local01 wc
24a14     3C 00 90 3D |  if_ae	jmp	#LR__3522
24a18     12 15 02 F6 | 	mov	arg02, local04
24a1c     02 14 06 F1 | 	add	arg02, #2
24a20     0A 15 E2 FA | 	rdword	arg02, arg02
24a24     20 14 26 F5 | 	andn	arg02, #32
24a28     12 13 02 F6 | 	mov	arg01, local04
24a2c     02 12 06 F1 | 	add	arg01, #2
24a30     09 15 52 FC | 	wrword	arg02, arg01
24a34     12 13 02 F6 | 	mov	arg01, local04
24a38     09 23 EA FA | 	rdword	local03, arg01 wz
24a3c     00 FA 05 A6 |  if_e	mov	result1, #0
24a40     04 22 66 50 |  if_ne	shl	local03, #4
24a44     11 13 02 51 |  if_ne	add	arg01, local03
24a48     09 FB 01 56 |  if_ne	mov	result1, arg01
24a4c     FD 24 0A F6 | 	mov	local04, result1 wz
24a50     BC FF 9F 5D |  if_ne	jmp	#LR__3520
24a54                 | LR__3521
24a54                 | LR__3522
24a54     00 22 06 F6 | 	mov	local03, #0
24a58     00 12 06 F6 | 	mov	arg01, #0
24a5c     A0 BC BF FD | 	call	#__system____topofstack
24a60     FD 14 02 F6 | 	mov	arg02, result1
24a64     11 13 02 F6 | 	mov	arg01, local03
24a68     90 00 B0 FD | 	call	#__system___gc_markhub
24a6c     1C 01 B0 FD | 	call	#__system___gc_markcog
24a70     10 13 02 F6 | 	mov	arg01, local02
24a74     09 23 EA FA | 	rdword	local03, arg01 wz
24a78     00 FA 05 A6 |  if_e	mov	result1, #0
24a7c     04 22 66 50 |  if_ne	shl	local03, #4
24a80     11 13 02 51 |  if_ne	add	arg01, local03
24a84     09 FB 01 56 |  if_ne	mov	result1, arg01
24a88     FD 20 0A F6 | 	mov	local02, result1 wz
24a8c     60 00 90 AD |  if_e	jmp	#LR__3526
24a90                 | LR__3523
24a90     10 25 02 F6 | 	mov	local04, local02
24a94     12 13 02 F6 | 	mov	arg01, local04
24a98     09 23 EA FA | 	rdword	local03, arg01 wz
24a9c     00 FA 05 A6 |  if_e	mov	result1, #0
24aa0     04 22 66 50 |  if_ne	shl	local03, #4
24aa4     11 13 02 51 |  if_ne	add	arg01, local03
24aa8     09 FB 01 56 |  if_ne	mov	result1, arg01
24aac     FD 20 02 F6 | 	mov	local02, result1
24ab0     12 15 02 F6 | 	mov	arg02, local04
24ab4     02 14 06 F1 | 	add	arg02, #2
24ab8     0A 15 E2 FA | 	rdword	arg02, arg02
24abc     20 14 CE F7 | 	test	arg02, #32 wz
24ac0     10 14 CE A7 |  if_e	test	arg02, #16 wz
24ac4     1C 00 90 5D |  if_ne	jmp	#LR__3525
24ac8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24acc     13 15 0A F2 | 	cmp	arg02, local05 wz
24ad0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24ad4     0C 00 90 5D |  if_ne	jmp	#LR__3524
24ad8     12 13 02 F6 | 	mov	arg01, local04
24adc     84 FC BF FD | 	call	#__system___gc_dofree
24ae0     FD 20 02 F6 | 	mov	local02, result1
24ae4                 | LR__3524
24ae4                 | LR__3525
24ae4     00 20 0E F2 | 	cmp	local02, #0 wz
24ae8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24aec     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3523
24af0                 | LR__3526
24af0     A7 F0 03 F6 | 	mov	ptra, fp
24af4     B2 00 A0 FD | 	call	#popregs_
24af8                 | __system___gc_docollect_ret
24af8     2D 00 64 FD | 	ret
24afc                 | 
24afc                 | __system___gc_markhub
24afc     04 4A 05 F6 | 	mov	COUNT_, #4
24b00     A8 00 A0 FD | 	call	#pushregs_
24b04     09 1F 02 F6 | 	mov	local01, arg01
24b08     0A 21 02 F6 | 	mov	local02, arg02
24b0c     80 F8 BF FD | 	call	#__system___gc_ptrs
24b10     FD 22 02 F6 | 	mov	local03, result1
24b14     FE 24 02 F6 | 	mov	local04, result2
24b18                 | LR__3530
24b18     10 1F 52 F2 | 	cmps	local01, local02 wc
24b1c     60 00 90 3D |  if_ae	jmp	#LR__3531
24b20     0F 17 02 FB | 	rdlong	arg03, local01
24b24     04 1E 06 F1 | 	add	local01, #4
24b28     12 15 02 F6 | 	mov	arg02, local04
24b2c     11 13 02 F6 | 	mov	arg01, local03
24b30     8C FB BF FD | 	call	#__system___gc_isvalidptr
24b34     FD 16 0A F6 | 	mov	arg03, result1 wz
24b38     DC FF 9F AD |  if_e	jmp	#LR__3530
24b3c     0B 13 02 F6 | 	mov	arg01, arg03
24b40     00 FA 05 F6 | 	mov	result1, #0
24b44     02 12 06 F1 | 	add	arg01, #2
24b48     09 13 E2 FA | 	rdword	arg01, arg01
24b4c     36 00 00 FF 
24b50     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24b54     01 FA 65 A6 |  if_e	neg	result1, #1
24b58     00 FA 0D F2 | 	cmp	result1, #0 wz
24b5c     B8 FF 9F 5D |  if_ne	jmp	#LR__3530
24b60     0B FD 01 F6 | 	mov	result2, arg03
24b64     02 FC 05 F1 | 	add	result2, #2
24b68     FE FC E1 FA | 	rdword	result2, result2
24b6c     0F FC 25 F5 | 	andn	result2, #15
24b70     2E FC 45 F5 | 	or	result2, #46
24b74     02 16 06 F1 | 	add	arg03, #2
24b78     0B FD 51 FC | 	wrword	result2, arg03
24b7c     98 FF 9F FD | 	jmp	#LR__3530
24b80                 | LR__3531
24b80     A7 F0 03 F6 | 	mov	ptra, fp
24b84     B2 00 A0 FD | 	call	#popregs_
24b88                 | __system___gc_markhub_ret
24b88     2D 00 64 FD | 	ret
24b8c                 | 
24b8c                 | __system___gc_markcog
24b8c     04 4A 05 F6 | 	mov	COUNT_, #4
24b90     A8 00 A0 FD | 	call	#pushregs_
24b94     F8 F7 BF FD | 	call	#__system___gc_ptrs
24b98     FD 1E 02 F6 | 	mov	local01, result1
24b9c     FE 20 02 F6 | 	mov	local02, result2
24ba0     EF 23 06 F6 | 	mov	local03, #495
24ba4                 | LR__3540
24ba4                 | 	'.live	local03
24ba4     00 22 96 F9 | 	alts	local03, #0
24ba8     11 25 02 F6 | 	mov	local04, local03
24bac     0F 13 02 F6 | 	mov	arg01, local01
24bb0     10 15 02 F6 | 	mov	arg02, local02
24bb4     12 17 02 F6 | 	mov	arg03, local04
24bb8     04 FB BF FD | 	call	#__system___gc_isvalidptr
24bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
24bc0     18 00 90 AD |  if_e	jmp	#LR__3541
24bc4     FD 24 02 F6 | 	mov	local04, result1
24bc8     02 24 06 F1 | 	add	local04, #2
24bcc     12 25 E2 FA | 	rdword	local04, local04
24bd0     20 24 46 F5 | 	or	local04, #32
24bd4     02 FA 05 F1 | 	add	result1, #2
24bd8     FD 24 52 FC | 	wrword	local04, result1
24bdc                 | LR__3541
24bdc     01 22 86 F1 | 	sub	local03, #1
24be0     00 22 56 F2 | 	cmps	local03, #0 wc
24be4     BC FF 9F 3D |  if_ae	jmp	#LR__3540
24be8     A7 F0 03 F6 | 	mov	ptra, fp
24bec     B2 00 A0 FD | 	call	#popregs_
24bf0                 | __system___gc_markcog_ret
24bf0     2D 00 64 FD | 	ret
24bf4                 | 
24bf4                 | __system__opendir
24bf4     06 4A 05 F6 | 	mov	COUNT_, #6
24bf8     A8 00 A0 FD | 	call	#pushregs_
24bfc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24c00     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24c04     09 15 02 F6 | 	mov	arg02, arg01
24c08     0F 13 02 F6 | 	mov	arg01, local01
24c0c     00 16 06 F6 | 	mov	arg03, #0
24c10     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24c14     A8 C2 BF FD | 	call	#__system____getvfsforfile
24c18     FD 20 0A F6 | 	mov	local02, result1 wz
24c1c     10 00 90 AD |  if_e	jmp	#LR__3550
24c20     28 20 06 F1 | 	add	local02, #40
24c24     10 17 0A FB | 	rdlong	arg03, local02 wz
24c28     28 20 86 F1 | 	sub	local02, #40
24c2c     14 00 90 5D |  if_ne	jmp	#LR__3551
24c30                 | LR__3550
24c30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24c34     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24c38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24c3c     00 FA 05 F6 | 	mov	result1, #0
24c40     90 00 90 FD | 	jmp	#LR__3553
24c44                 | LR__3551
24c44     5C 12 06 F6 | 	mov	arg01, #92
24c48     10 14 06 F6 | 	mov	arg02, #16
24c4c     C0 F9 BF FD | 	call	#__system___gc_doalloc
24c50     FD 22 0A F6 | 	mov	local03, result1 wz
24c54     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24c58     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24c5c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24c60     00 FA 05 A6 |  if_e	mov	result1, #0
24c64     6C 00 90 AD |  if_e	jmp	#LR__3553
24c68     28 20 06 F1 | 	add	local02, #40
24c6c     10 25 02 FB | 	rdlong	local04, local02
24c70     12 27 02 F6 | 	mov	local05, local04
24c74     28 20 86 F1 | 	sub	local02, #40
24c78     13 26 46 F7 | 	zerox	local05, #19
24c7c     14 24 46 F0 | 	shr	local04, #20
24c80     02 24 66 F0 | 	shl	local04, #2
24c84     ED 24 02 F1 | 	add	local04, __methods__
24c88     12 25 02 FB | 	rdlong	local04, local04
24c8c     11 13 02 F6 | 	mov	arg01, local03
24c90     0F 15 02 F6 | 	mov	arg02, local01
24c94     F2 28 02 F6 | 	mov	local06, objptr
24c98     13 E5 01 F6 | 	mov	objptr, local05
24c9c     2D 24 62 FD | 	call	local04
24ca0     14 E5 01 F6 | 	mov	objptr, local06
24ca4     FD 16 0A F6 | 	mov	arg03, result1 wz
24ca8     20 00 90 AD |  if_e	jmp	#LR__3552
24cac     00 16 4E F2 | 	cmps	arg03, #0 wz
24cb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24cb4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24cb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24cbc     11 13 02 F6 | 	mov	arg01, local03
24cc0     58 FA BF FD | 	call	#__system___gc_free
24cc4     00 FA 05 F6 | 	mov	result1, #0
24cc8     08 00 90 FD | 	jmp	#LR__3553
24ccc                 | LR__3552
24ccc     11 21 62 FC | 	wrlong	local02, local03
24cd0     11 FB 01 F6 | 	mov	result1, local03
24cd4                 | LR__3553
24cd4     A7 F0 03 F6 | 	mov	ptra, fp
24cd8     B2 00 A0 FD | 	call	#popregs_
24cdc                 | __system__opendir_ret
24cdc     2D 00 64 FD | 	ret
24ce0                 | 
24ce0                 | __system__closedir
24ce0     04 4A 05 F6 | 	mov	COUNT_, #4
24ce4     A8 00 A0 FD | 	call	#pushregs_
24ce8     09 1F 02 F6 | 	mov	local01, arg01
24cec     0F 13 02 FB | 	rdlong	arg01, local01
24cf0     2C 12 06 F1 | 	add	arg01, #44
24cf4     09 21 02 FB | 	rdlong	local02, arg01
24cf8     10 23 02 F6 | 	mov	local03, local02
24cfc     13 22 46 F7 | 	zerox	local03, #19
24d00     14 20 46 F0 | 	shr	local02, #20
24d04     02 20 66 F0 | 	shl	local02, #2
24d08     ED 20 02 F1 | 	add	local02, __methods__
24d0c     10 21 02 FB | 	rdlong	local02, local02
24d10     0F 13 02 F6 | 	mov	arg01, local01
24d14     F2 24 02 F6 | 	mov	local04, objptr
24d18     11 E5 01 F6 | 	mov	objptr, local03
24d1c     2D 20 62 FD | 	call	local02
24d20     12 E5 01 F6 | 	mov	objptr, local04
24d24     FD 24 02 F6 | 	mov	local04, result1
24d28     0F 13 02 F6 | 	mov	arg01, local01
24d2c     EC F9 BF FD | 	call	#__system___gc_free
24d30     00 24 4E F2 | 	cmps	local04, #0 wz
24d34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d38     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24d3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d40     01 FA 65 56 |  if_ne	neg	result1, #1
24d44     00 FA 05 A6 |  if_e	mov	result1, #0
24d48     A7 F0 03 F6 | 	mov	ptra, fp
24d4c     B2 00 A0 FD | 	call	#popregs_
24d50                 | __system__closedir_ret
24d50     2D 00 64 FD | 	ret
24d54                 | 
24d54                 | __system__readdir
24d54     04 4A 05 F6 | 	mov	COUNT_, #4
24d58     A8 00 A0 FD | 	call	#pushregs_
24d5c     09 15 0A FB | 	rdlong	arg02, arg01 wz
24d60     08 12 06 F1 | 	add	arg01, #8
24d64     09 1F 02 F6 | 	mov	local01, arg01
24d68     08 12 86 F1 | 	sub	arg01, #8
24d6c     00 FA 05 A6 |  if_e	mov	result1, #0
24d70     5C 00 90 AD |  if_e	jmp	#LR__3561
24d74     30 14 06 F1 | 	add	arg02, #48
24d78     0A 21 02 FB | 	rdlong	local02, arg02
24d7c     10 23 02 F6 | 	mov	local03, local02
24d80     13 22 46 F7 | 	zerox	local03, #19
24d84     14 20 46 F0 | 	shr	local02, #20
24d88     02 20 66 F0 | 	shl	local02, #2
24d8c     ED 20 02 F1 | 	add	local02, __methods__
24d90     10 21 02 FB | 	rdlong	local02, local02
24d94     0F 15 02 F6 | 	mov	arg02, local01
24d98     F2 24 02 F6 | 	mov	local04, objptr
24d9c     11 E5 01 F6 | 	mov	objptr, local03
24da0     2D 20 62 FD | 	call	local02
24da4     12 E5 01 F6 | 	mov	objptr, local04
24da8     00 FA 4D F2 | 	cmps	result1, #0 wz
24dac     1C 00 90 AD |  if_e	jmp	#LR__3560
24db0     01 FA 55 F2 | 	cmps	result1, #1 wc
24db4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24db8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24dbc     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24dc0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24dc4     00 FA 05 F6 | 	mov	result1, #0
24dc8     04 00 90 FD | 	jmp	#LR__3561
24dcc                 | LR__3560
24dcc     0F FB 01 F6 | 	mov	result1, local01
24dd0                 | LR__3561
24dd0     A7 F0 03 F6 | 	mov	ptra, fp
24dd4     B2 00 A0 FD | 	call	#popregs_
24dd8                 | __system__readdir_ret
24dd8     2D 00 64 FD | 	ret
24ddc                 | 
24ddc                 | __system___openraw
24ddc     15 4A 05 F6 | 	mov	COUNT_, #21
24de0     A8 00 A0 FD | 	call	#pushregs_
24de4     09 1F 02 F6 | 	mov	local01, arg01
24de8     0A 21 02 F6 | 	mov	local02, arg02
24dec     0B 23 02 F6 | 	mov	local03, arg03
24df0     0C 25 02 F6 | 	mov	local04, arg04
24df4     04 26 06 F6 | 	mov	local05, #4
24df8     0F 29 02 F6 | 	mov	local06, local01
24dfc     00 2A 06 F6 | 	mov	local07, #0
24e00     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24e04     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
24e08     16 13 02 F6 | 	mov	arg01, local08
24e0c     10 15 02 F6 | 	mov	arg02, local02
24e10     00 16 06 F6 | 	mov	arg03, #0
24e14     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24e18     A4 C0 BF FD | 	call	#__system____getvfsforfile
24e1c     FD 2E 0A F6 | 	mov	local09, result1 wz
24e20     10 00 90 AD |  if_e	jmp	#LR__3570
24e24     20 2E 06 F1 | 	add	local09, #32
24e28     17 FB 09 FB | 	rdlong	result1, local09 wz
24e2c     20 2E 86 F1 | 	sub	local09, #32
24e30     14 00 90 5D |  if_ne	jmp	#LR__3571
24e34                 | LR__3570
24e34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e38     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24e3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e40     01 FA 65 F6 | 	neg	result1, #1
24e44     8C 02 90 FD | 	jmp	#LR__3584
24e48                 | LR__3571
24e48     14 13 02 F6 | 	mov	arg01, local06
24e4c     00 14 06 F6 | 	mov	arg02, #0
24e50     34 16 06 F6 | 	mov	arg03, #52
24e54     09 31 02 F6 | 	mov	local10, arg01
24e58     98 00 A0 FD | 	call	#\builtin_bytefill_
24e5c     20 2E 06 F1 | 	add	local09, #32
24e60     17 33 02 FB | 	rdlong	local11, local09
24e64     19 35 02 F6 | 	mov	local12, local11
24e68     19 37 02 F6 | 	mov	local13, local11
24e6c     20 2E 86 F1 | 	sub	local09, #32
24e70     1B 39 02 F6 | 	mov	local14, local13
24e74     13 34 46 F7 | 	zerox	local12, #19
24e78     14 38 46 F0 | 	shr	local14, #20
24e7c     02 38 66 F0 | 	shl	local14, #2
24e80     ED 38 02 F1 | 	add	local14, __methods__
24e84     1C 39 02 FB | 	rdlong	local14, local14
24e88     14 3B 02 F6 | 	mov	local15, local06
24e8c     16 3D 02 F6 | 	mov	local16, local08
24e90     11 3F 02 F6 | 	mov	local17, local03
24e94     1D 13 02 F6 | 	mov	arg01, local15
24e98     1E 15 02 F6 | 	mov	arg02, local16
24e9c     1F 17 02 F6 | 	mov	arg03, local17
24ea0     F2 40 02 F6 | 	mov	local18, objptr
24ea4     1A E5 01 F6 | 	mov	objptr, local12
24ea8     2D 38 62 FD | 	call	local14
24eac     20 E5 01 F6 | 	mov	objptr, local18
24eb0     FD 42 0A F6 | 	mov	local19, result1 wz
24eb4     04 22 CE 57 |  if_ne	test	local03, #4 wz
24eb8     58 00 90 AD |  if_e	jmp	#LR__3572
24ebc     24 2E 06 F1 | 	add	local09, #36
24ec0     17 33 02 FB | 	rdlong	local11, local09
24ec4     19 35 02 F6 | 	mov	local12, local11
24ec8     19 37 02 F6 | 	mov	local13, local11
24ecc     24 2E 86 F1 | 	sub	local09, #36
24ed0     1B 39 02 F6 | 	mov	local14, local13
24ed4     13 34 46 F7 | 	zerox	local12, #19
24ed8     14 38 46 F0 | 	shr	local14, #20
24edc     02 38 66 F0 | 	shl	local14, #2
24ee0     ED 38 02 F1 | 	add	local14, __methods__
24ee4     1C 39 02 FB | 	rdlong	local14, local14
24ee8     14 3B 02 F6 | 	mov	local15, local06
24eec     16 3D 02 F6 | 	mov	local16, local08
24ef0     12 3F 02 F6 | 	mov	local17, local04
24ef4     1D 13 02 F6 | 	mov	arg01, local15
24ef8     1E 15 02 F6 | 	mov	arg02, local16
24efc     1F 17 02 F6 | 	mov	arg03, local17
24f00     F2 40 02 F6 | 	mov	local18, objptr
24f04     1A E5 01 F6 | 	mov	objptr, local12
24f08     2D 38 62 FD | 	call	local14
24f0c     20 E5 01 F6 | 	mov	objptr, local18
24f10     FD 42 02 F6 | 	mov	local19, result1
24f14                 | LR__3572
24f14     00 42 0E F2 | 	cmp	local19, #0 wz
24f18     8C 01 90 5D |  if_ne	jmp	#LR__3582
24f1c     11 45 02 F6 | 	mov	local20, local03
24f20     03 44 0E F5 | 	and	local20, #3 wz
24f24     02 26 46 55 |  if_ne	or	local05, #2
24f28     01 44 0E F2 | 	cmp	local20, #1 wz
24f2c     01 26 46 55 |  if_ne	or	local05, #1
24f30     20 22 CE F7 | 	test	local03, #32 wz
24f34     C0 26 46 55 |  if_ne	or	local05, #192
24f38     08 28 06 F1 | 	add	local06, #8
24f3c     14 27 62 FC | 	wrlong	local05, local06
24f40     0C 28 06 F1 | 	add	local06, #12
24f44     14 47 0A FB | 	rdlong	local21, local06 wz
24f48     14 28 86 F1 | 	sub	local06, #20
24f4c     18 00 90 5D |  if_ne	jmp	#LR__3573
24f50     04 2E 06 F1 | 	add	local09, #4
24f54     17 47 02 FB | 	rdlong	local21, local09
24f58     04 2E 86 F1 | 	sub	local09, #4
24f5c     14 28 06 F1 | 	add	local06, #20
24f60     14 47 62 FC | 	wrlong	local21, local06
24f64     14 28 86 F1 | 	sub	local06, #20
24f68                 | LR__3573
24f68     18 28 06 F1 | 	add	local06, #24
24f6c     14 47 0A FB | 	rdlong	local21, local06 wz
24f70     18 28 86 F1 | 	sub	local06, #24
24f74     18 00 90 5D |  if_ne	jmp	#LR__3574
24f78     08 2E 06 F1 | 	add	local09, #8
24f7c     17 47 02 FB | 	rdlong	local21, local09
24f80     08 2E 86 F1 | 	sub	local09, #8
24f84     18 28 06 F1 | 	add	local06, #24
24f88     14 47 62 FC | 	wrlong	local21, local06
24f8c     18 28 86 F1 | 	sub	local06, #24
24f90                 | LR__3574
24f90     24 28 06 F1 | 	add	local06, #36
24f94     14 47 0A FB | 	rdlong	local21, local06 wz
24f98     24 28 86 F1 | 	sub	local06, #36
24f9c     17 47 02 AB |  if_e	rdlong	local21, local09
24fa0     24 28 06 A1 |  if_e	add	local06, #36
24fa4     14 47 62 AC |  if_e	wrlong	local21, local06
24fa8     24 28 86 A1 |  if_e	sub	local06, #36
24fac     28 28 06 F1 | 	add	local06, #40
24fb0     14 47 0A FB | 	rdlong	local21, local06 wz
24fb4     28 28 86 F1 | 	sub	local06, #40
24fb8     18 00 90 5D |  if_ne	jmp	#LR__3575
24fbc     10 2E 06 F1 | 	add	local09, #16
24fc0     17 47 02 FB | 	rdlong	local21, local09
24fc4     10 2E 86 F1 | 	sub	local09, #16
24fc8     28 28 06 F1 | 	add	local06, #40
24fcc     14 47 62 FC | 	wrlong	local21, local06
24fd0     28 28 86 F1 | 	sub	local06, #40
24fd4                 | LR__3575
24fd4     30 28 06 F1 | 	add	local06, #48
24fd8     14 47 0A FB | 	rdlong	local21, local06 wz
24fdc     30 28 86 F1 | 	sub	local06, #48
24fe0     18 00 90 5D |  if_ne	jmp	#LR__3576
24fe4     0C 2E 06 F1 | 	add	local09, #12
24fe8     17 47 02 FB | 	rdlong	local21, local09
24fec     0C 2E 86 F1 | 	sub	local09, #12
24ff0     30 28 06 F1 | 	add	local06, #48
24ff4     14 47 62 FC | 	wrlong	local21, local06
24ff8     30 28 86 F1 | 	sub	local06, #48
24ffc                 | LR__3576
24ffc     1C 28 06 F1 | 	add	local06, #28
25000     14 47 0A FB | 	rdlong	local21, local06 wz
25004     1C 28 86 F1 | 	sub	local06, #28
25008     1C 00 90 5D |  if_ne	jmp	#LR__3577
2500c     01 2A 06 F6 | 	mov	local07, #1
25010     F2 12 02 F6 | 	mov	arg01, objptr
25014     00 D0 04 FF 
25018     00 12 46 F5 | 	or	arg01, ##161480704
2501c     1C 28 06 F1 | 	add	local06, #28
25020     14 13 62 FC | 	wrlong	arg01, local06
25024     1C 28 86 F1 | 	sub	local06, #28
25028                 | LR__3577
25028     20 28 06 F1 | 	add	local06, #32
2502c     14 47 0A FB | 	rdlong	local21, local06 wz
25030     20 28 86 F1 | 	sub	local06, #32
25034     1C 00 90 5D |  if_ne	jmp	#LR__3578
25038     01 2A 06 F6 | 	mov	local07, #1
2503c     F2 12 02 F6 | 	mov	arg01, objptr
25040     00 D8 04 FF 
25044     00 12 46 F5 | 	or	arg01, ##162529280
25048     20 28 06 F1 | 	add	local06, #32
2504c     14 13 62 FC | 	wrlong	arg01, local06
25050     20 28 86 F1 | 	sub	local06, #32
25054                 | LR__3578
25054     2C 28 06 F1 | 	add	local06, #44
25058     14 47 0A FB | 	rdlong	local21, local06 wz
2505c     2C 28 86 F1 | 	sub	local06, #44
25060     44 00 90 5D |  if_ne	jmp	#LR__3581
25064     14 2E 06 F1 | 	add	local09, #20
25068     17 47 0A FB | 	rdlong	local21, local09 wz
2506c     14 2E 86 F1 | 	sub	local09, #20
25070     18 00 90 AD |  if_e	jmp	#LR__3579
25074     14 2E 06 F1 | 	add	local09, #20
25078     17 47 02 FB | 	rdlong	local21, local09
2507c     2C 28 06 F1 | 	add	local06, #44
25080     14 47 62 FC | 	wrlong	local21, local06
25084     2C 28 86 F1 | 	sub	local06, #44
25088     1C 00 90 FD | 	jmp	#LR__3580
2508c                 | LR__3579
2508c     01 2A 06 F6 | 	mov	local07, #1
25090     F2 12 02 F6 | 	mov	arg01, objptr
25094     00 E0 04 FF 
25098     00 12 46 F5 | 	or	arg01, ##163577856
2509c     2C 28 06 F1 | 	add	local06, #44
250a0     14 13 62 FC | 	wrlong	arg01, local06
250a4     2C 28 86 F1 | 	sub	local06, #44
250a8                 | LR__3580
250a8                 | LR__3581
250a8                 | LR__3582
250a8     00 2A 0E F2 | 	cmp	local07, #0 wz
250ac     14 13 02 56 |  if_ne	mov	arg01, local06
250b0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
250b4     00 42 0E F2 | 	cmp	local19, #0 wz
250b8     00 12 06 A6 |  if_e	mov	arg01, #0
250bc     10 00 90 5D |  if_ne	jmp	#LR__3583
250c0     00 12 4E F2 | 	cmps	arg01, #0 wz
250c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
250c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
250cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
250d0                 | LR__3583
250d0     21 FB 01 F6 | 	mov	result1, local19
250d4                 | LR__3584
250d4     A7 F0 03 F6 | 	mov	ptra, fp
250d8     B2 00 A0 FD | 	call	#popregs_
250dc                 | __system___openraw_ret
250dc     2D 00 64 FD | 	ret
250e0                 | 
250e0                 | __system___closeraw
250e0     05 4A 05 F6 | 	mov	COUNT_, #5
250e4     A8 00 A0 FD | 	call	#pushregs_
250e8     09 1F 02 F6 | 	mov	local01, arg01
250ec     00 20 06 F6 | 	mov	local02, #0
250f0     08 1E 06 F1 | 	add	local01, #8
250f4     0F FB 09 FB | 	rdlong	result1, local01 wz
250f8     08 1E 86 F1 | 	sub	local01, #8
250fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25100     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25104     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25108     01 FA 65 A6 |  if_e	neg	result1, #1
2510c     A8 00 90 AD |  if_e	jmp	#LR__3592
25110     2C 1E 06 F1 | 	add	local01, #44
25114     0F FB 09 FB | 	rdlong	result1, local01 wz
25118     2C 1E 86 F1 | 	sub	local01, #44
2511c     38 00 90 AD |  if_e	jmp	#LR__3590
25120     2C 1E 06 F1 | 	add	local01, #44
25124     0F 23 02 FB | 	rdlong	local03, local01
25128     11 25 02 F6 | 	mov	local04, local03
2512c     2C 1E 86 F1 | 	sub	local01, #44
25130     13 24 46 F7 | 	zerox	local04, #19
25134     14 22 46 F0 | 	shr	local03, #20
25138     02 22 66 F0 | 	shl	local03, #2
2513c     ED 22 02 F1 | 	add	local03, __methods__
25140     11 23 02 FB | 	rdlong	local03, local03
25144     0F 13 02 F6 | 	mov	arg01, local01
25148     F2 26 02 F6 | 	mov	local05, objptr
2514c     12 E5 01 F6 | 	mov	objptr, local04
25150     2D 22 62 FD | 	call	local03
25154     13 E5 01 F6 | 	mov	objptr, local05
25158                 | LR__3590
25158     24 1E 06 F1 | 	add	local01, #36
2515c     0F 27 0A FB | 	rdlong	local05, local01 wz
25160     24 1E 86 F1 | 	sub	local01, #36
25164     3C 00 90 AD |  if_e	jmp	#LR__3591
25168     24 1E 06 F1 | 	add	local01, #36
2516c     0F 23 02 FB | 	rdlong	local03, local01
25170     11 25 02 F6 | 	mov	local04, local03
25174     24 1E 86 F1 | 	sub	local01, #36
25178     13 24 46 F7 | 	zerox	local04, #19
2517c     14 22 46 F0 | 	shr	local03, #20
25180     02 22 66 F0 | 	shl	local03, #2
25184     ED 22 02 F1 | 	add	local03, __methods__
25188     11 23 02 FB | 	rdlong	local03, local03
2518c     0F 13 02 F6 | 	mov	arg01, local01
25190     F2 26 02 F6 | 	mov	local05, objptr
25194     12 E5 01 F6 | 	mov	objptr, local04
25198     2D 22 62 FD | 	call	local03
2519c     13 E5 01 F6 | 	mov	objptr, local05
251a0     FD 20 02 F6 | 	mov	local02, result1
251a4                 | LR__3591
251a4     0F 13 02 F6 | 	mov	arg01, local01
251a8     00 14 06 F6 | 	mov	arg02, #0
251ac     34 16 06 F6 | 	mov	arg03, #52
251b0     98 00 A0 FD | 	call	#\builtin_bytefill_
251b4     10 FB 01 F6 | 	mov	result1, local02
251b8                 | LR__3592
251b8     A7 F0 03 F6 | 	mov	ptra, fp
251bc     B2 00 A0 FD | 	call	#popregs_
251c0                 | __system___closeraw_ret
251c0     2D 00 64 FD | 	ret
251c4                 | 
251c4                 | __system___vfs_open_sdcardx
251c4     0B 4A 05 F6 | 	mov	COUNT_, #11
251c8     A8 00 A0 FD | 	call	#pushregs_
251cc     09 23 02 F6 | 	mov	local03, arg01
251d0     0A 25 02 F6 | 	mov	local04, arg02
251d4     0B 27 02 F6 | 	mov	local05, arg03
251d8     0C 29 02 F6 | 	mov	local06, arg04
251dc     01 00 00 FF 
251e0     24 12 06 F6 | 	mov	arg01, ##548
251e4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
251e8     FD 2A 02 F6 | 	mov	local07, result1
251ec     01 00 00 FF 
251f0     34 12 06 F6 | 	mov	arg01, ##564
251f4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
251f8     FD 2C 02 F6 | 	mov	local08, result1
251fc     11 19 02 F6 | 	mov	arg04, local03
25200     1F 18 C6 F0 | 	sar	arg04, #31
25204     11 17 02 F6 | 	mov	arg03, local03
25208     01 12 06 F6 | 	mov	arg01, #1
2520c     00 14 06 F6 | 	mov	arg02, #0
25210     10 DC BF FD | 	call	#__system___int64_shl
25214     FD 1E 02 F6 | 	mov	local01, result1
25218     FE 2E 02 F6 | 	mov	local09, result2
2521c     12 19 02 F6 | 	mov	arg04, local04
25220     1F 18 C6 F0 | 	sar	arg04, #31
25224     12 17 02 F6 | 	mov	arg03, local04
25228     01 12 06 F6 | 	mov	arg01, #1
2522c     00 14 06 F6 | 	mov	arg02, #0
25230     F0 DB BF FD | 	call	#__system___int64_shl
25234     FD 1E 42 F5 | 	or	local01, result1
25238     FE 2E 42 F5 | 	or	local09, result2
2523c     13 19 02 F6 | 	mov	arg04, local05
25240     1F 18 C6 F0 | 	sar	arg04, #31
25244     13 17 02 F6 | 	mov	arg03, local05
25248     01 12 06 F6 | 	mov	arg01, #1
2524c     00 14 06 F6 | 	mov	arg02, #0
25250     D0 DB BF FD | 	call	#__system___int64_shl
25254     FD 1E 42 F5 | 	or	local01, result1
25258     FE 2E 42 F5 | 	or	local09, result2
2525c     14 19 02 F6 | 	mov	arg04, local06
25260     1F 18 C6 F0 | 	sar	arg04, #31
25264     14 17 02 F6 | 	mov	arg03, local06
25268     01 12 06 F6 | 	mov	arg01, #1
2526c     00 14 06 F6 | 	mov	arg02, #0
25270     B0 DB BF FD | 	call	#__system___int64_shl
25274     17 15 02 F6 | 	mov	arg02, local09
25278     FD 1E 42 F5 | 	or	local01, result1
2527c     0A FD 41 F5 | 	or	result2, arg02
25280     FE 20 02 F6 | 	mov	local02, result2
25284     0F 13 02 F6 | 	mov	arg01, local01
25288     10 15 02 F6 | 	mov	arg02, local02
2528c     CC DB BF FD | 	call	#__system___usepins
25290     00 FA 0D F2 | 	cmp	result1, #0 wz
25294     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25298     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2529c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
252a0     00 FA 05 A6 |  if_e	mov	result1, #0
252a4     B4 00 90 AD |  if_e	jmp	#LR__3602
252a8     0F 31 02 F6 | 	mov	local10, local01
252ac     10 2F 02 F6 | 	mov	local09, local02
252b0     01 00 00 FF 
252b4     08 2A 06 F1 | 	add	local07, ##520
252b8     15 31 62 FC | 	wrlong	local10, local07
252bc     04 2A 06 F1 | 	add	local07, #4
252c0     15 2F 62 FC | 	wrlong	local09, local07
252c4     01 00 00 FF 
252c8     0C 2A 86 F1 | 	sub	local07, ##524
252cc     14 1B 02 F6 | 	mov	arg05, local06
252d0     00 12 06 F6 | 	mov	arg01, #0
252d4     11 15 02 F6 | 	mov	arg02, local03
252d8     12 17 02 F6 | 	mov	arg03, local04
252dc     13 19 02 F6 | 	mov	arg04, local05
252e0     F2 30 02 F6 | 	mov	local10, objptr
252e4     15 E5 01 F6 | 	mov	objptr, local07
252e8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
252ec     18 E5 01 F6 | 	mov	objptr, local10
252f0     FD 32 0A F6 | 	mov	local11, result1 wz
252f4     24 00 90 5D |  if_ne	jmp	#LR__3600
252f8     7F 01 00 FF 
252fc     B6 15 06 F6 | 	mov	arg02, ##@LR__5017
25300     16 13 02 F6 | 	mov	arg01, local08
25304     00 16 06 F6 | 	mov	arg03, #0
25308     F2 32 02 F6 | 	mov	local11, objptr
2530c     15 E5 01 F6 | 	mov	objptr, local07
25310     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25314     19 E5 01 F6 | 	mov	objptr, local11
25318     FD 32 02 F6 | 	mov	local11, result1
2531c                 | LR__3600
2531c     00 32 0E F2 | 	cmp	local11, #0 wz
25320     24 00 90 AD |  if_e	jmp	#LR__3601
25324     0F 13 02 F6 | 	mov	arg01, local01
25328     10 15 02 F6 | 	mov	arg02, local02
2532c     80 DB BF FD | 	call	#__system___freepins
25330     19 13 6A F6 | 	neg	arg01, local11 wz
25334     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25338     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2533c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25340     00 FA 05 F6 | 	mov	result1, #0
25344     14 00 90 FD | 	jmp	#LR__3602
25348                 | LR__3601
25348     15 13 02 F6 | 	mov	arg01, local07
2534c     F2 32 02 F6 | 	mov	local11, objptr
25350     15 E5 01 F6 | 	mov	objptr, local07
25354     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25358     19 E5 01 F6 | 	mov	objptr, local11
2535c                 | LR__3602
2535c     A7 F0 03 F6 | 	mov	ptra, fp
25360     B2 00 A0 FD | 	call	#popregs_
25364                 | __system___vfs_open_sdcardx_ret
25364     2D 00 64 FD | 	ret
25368                 | 
25368                 | __system____default_getc
25368     03 4A 05 F6 | 	mov	COUNT_, #3
2536c     A8 00 A0 FD | 	call	#pushregs_
25370     09 1F 02 F6 | 	mov	local01, arg01
25374     0F 21 02 FB | 	rdlong	local02, local01
25378     08 20 06 F1 | 	add	local02, #8
2537c     10 23 02 FB | 	rdlong	local03, local02
25380     02 22 CE F7 | 	test	local03, #2 wz
25384     0F 13 02 56 |  if_ne	mov	arg01, local01
25388     00 01 B0 5D |  if_ne	call	#__system____default_flush
2538c     10 23 02 FB | 	rdlong	local03, local02
25390     01 22 46 F5 | 	or	local03, #1
25394     10 23 62 FC | 	wrlong	local03, local02
25398     08 20 86 F1 | 	sub	local02, #8
2539c     10 23 0A FB | 	rdlong	local03, local02 wz
253a0     0C 00 90 5D |  if_ne	jmp	#LR__3610
253a4     0F 13 02 F6 | 	mov	arg01, local01
253a8     68 18 B0 FD | 	call	#__system____default_filbuf
253ac     FD 22 02 F6 | 	mov	local03, result1
253b0                 | LR__3610
253b0     01 22 56 F2 | 	cmps	local03, #1 wc
253b4     01 FA 65 C6 |  if_b	neg	result1, #1
253b8     1C 00 90 CD |  if_b	jmp	#LR__3611
253bc     01 22 86 F1 | 	sub	local03, #1
253c0     10 23 62 FC | 	wrlong	local03, local02
253c4     04 20 06 F1 | 	add	local02, #4
253c8     10 23 02 FB | 	rdlong	local03, local02
253cc     11 FB C1 FA | 	rdbyte	result1, local03
253d0     01 22 06 F1 | 	add	local03, #1
253d4     10 23 62 FC | 	wrlong	local03, local02
253d8                 | LR__3611
253d8     A7 F0 03 F6 | 	mov	ptra, fp
253dc     B2 00 A0 FD | 	call	#popregs_
253e0                 | __system____default_getc_ret
253e0     2D 00 64 FD | 	ret
253e4                 | 
253e4                 | __system____default_putc
253e4     06 4A 05 F6 | 	mov	COUNT_, #6
253e8     A8 00 A0 FD | 	call	#pushregs_
253ec     09 1F 02 F6 | 	mov	local01, arg01
253f0     0A 21 02 F6 | 	mov	local02, arg02
253f4     10 23 02 FB | 	rdlong	local03, local02
253f8     08 22 06 F1 | 	add	local03, #8
253fc     11 FB 01 FB | 	rdlong	result1, local03
25400     01 FA CD F7 | 	test	result1, #1 wz
25404     10 13 02 56 |  if_ne	mov	arg01, local02
25408     80 00 B0 5D |  if_ne	call	#__system____default_flush
2540c     11 25 02 FB | 	rdlong	local04, local03
25410     02 24 46 F5 | 	or	local04, #2
25414     11 25 62 FC | 	wrlong	local04, local03
25418     08 22 86 F1 | 	sub	local03, #8
2541c     11 27 02 FB | 	rdlong	local05, local03
25420     10 22 06 F1 | 	add	local03, #16
25424     11 15 02 FB | 	rdlong	arg02, local03
25428     10 22 86 F1 | 	sub	local03, #16
2542c     13 FB 01 F6 | 	mov	result1, local05
25430     0A FB 01 F1 | 	add	result1, arg02
25434     FD 1E 42 FC | 	wrbyte	local01, result1
25438     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2543c     01 26 06 F1 | 	add	local05, #1
25440     11 27 62 FC | 	wrlong	local05, local03
25444     06 20 06 F1 | 	add	local02, #6
25448     10 29 EA FA | 	rdword	local06, local02 wz
2544c     06 20 86 F1 | 	sub	local02, #6
25450     0C 22 06 51 |  if_ne	add	local03, #12
25454     11 25 02 5B |  if_ne	rdlong	local04, local03
25458     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2545c     0C 00 90 AD |  if_e	jmp	#LR__3620
25460     0A 1E 0E F2 | 	cmp	local01, #10 wz
25464     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25468     10 00 90 5D |  if_ne	jmp	#LR__3621
2546c                 | LR__3620
2546c     10 13 02 F6 | 	mov	arg01, local02
25470     18 00 B0 FD | 	call	#__system____default_flush
25474     00 FA 0D F2 | 	cmp	result1, #0 wz
25478     01 1E 66 56 |  if_ne	neg	local01, #1
2547c                 | LR__3621
2547c     0F FB 01 F6 | 	mov	result1, local01
25480     A7 F0 03 F6 | 	mov	ptra, fp
25484     B2 00 A0 FD | 	call	#popregs_
25488                 | __system____default_putc_ret
25488     2D 00 64 FD | 	ret
2548c                 | 
2548c                 | __system____default_flush
2548c     06 4A 05 F6 | 	mov	COUNT_, #6
25490     A8 00 A0 FD | 	call	#pushregs_
25494     09 1F 02 F6 | 	mov	local01, arg01
25498     0F 21 02 FB | 	rdlong	local02, local01
2549c     10 23 02 FB | 	rdlong	local03, local02
254a0     08 20 06 F1 | 	add	local02, #8
254a4     10 FB 01 FB | 	rdlong	result1, local02
254a8     08 20 86 F1 | 	sub	local02, #8
254ac     02 FA CD F7 | 	test	result1, #2 wz
254b0     D0 00 90 AD |  if_e	jmp	#LR__3632
254b4     01 22 56 F2 | 	cmps	local03, #1 wc
254b8     20 01 90 CD |  if_b	jmp	#LR__3634
254bc     08 1E 06 F1 | 	add	local01, #8
254c0     0F FB 01 FB | 	rdlong	result1, local01
254c4     08 1E 86 F1 | 	sub	local01, #8
254c8     40 FA CD F7 | 	test	result1, #64 wz
254cc     68 00 90 AD |  if_e	jmp	#LR__3631
254d0     08 1E 06 F1 | 	add	local01, #8
254d4     0F 17 02 FB | 	rdlong	arg03, local01
254d8     08 1E 86 F1 | 	sub	local01, #8
254dc     80 16 CE F7 | 	test	arg03, #128 wz
254e0     54 00 90 AD |  if_e	jmp	#LR__3630
254e4     30 1E 06 F1 | 	add	local01, #48
254e8     0F 25 02 FB | 	rdlong	local04, local01
254ec     12 27 02 F6 | 	mov	local05, local04
254f0     30 1E 86 F1 | 	sub	local01, #48
254f4     13 26 46 F7 | 	zerox	local05, #19
254f8     14 24 46 F0 | 	shr	local04, #20
254fc     02 24 66 F0 | 	shl	local04, #2
25500     ED 24 02 F1 | 	add	local04, __methods__
25504     12 25 02 FB | 	rdlong	local04, local04
25508     0F 13 02 F6 | 	mov	arg01, local01
2550c     00 14 06 F6 | 	mov	arg02, #0
25510     02 16 06 F6 | 	mov	arg03, #2
25514     F2 28 02 F6 | 	mov	local06, objptr
25518     13 E5 01 F6 | 	mov	objptr, local05
2551c     2D 24 62 FD | 	call	local04
25520     14 E5 01 F6 | 	mov	objptr, local06
25524     08 1E 06 F1 | 	add	local01, #8
25528     0F 29 02 FB | 	rdlong	local06, local01
2552c     80 28 26 F5 | 	andn	local06, #128
25530     0F 29 62 FC | 	wrlong	local06, local01
25534     08 1E 86 F1 | 	sub	local01, #8
25538                 | LR__3630
25538                 | LR__3631
25538     18 1E 06 F1 | 	add	local01, #24
2553c     0F 25 02 FB | 	rdlong	local04, local01
25540     12 27 02 F6 | 	mov	local05, local04
25544     18 1E 86 F1 | 	sub	local01, #24
25548     13 26 46 F7 | 	zerox	local05, #19
2554c     14 24 46 F0 | 	shr	local04, #20
25550     02 24 66 F0 | 	shl	local04, #2
25554     ED 24 02 F1 | 	add	local04, __methods__
25558     12 25 02 FB | 	rdlong	local04, local04
2555c     10 20 06 F1 | 	add	local02, #16
25560     10 15 02 FB | 	rdlong	arg02, local02
25564     10 20 86 F1 | 	sub	local02, #16
25568     0F 13 02 F6 | 	mov	arg01, local01
2556c     11 17 02 F6 | 	mov	arg03, local03
25570     F2 28 02 F6 | 	mov	local06, objptr
25574     13 E5 01 F6 | 	mov	objptr, local05
25578     2D 24 62 FD | 	call	local04
2557c     14 E5 01 F6 | 	mov	objptr, local06
25580     58 00 90 FD | 	jmp	#LR__3634
25584                 | LR__3632
25584     08 20 06 F1 | 	add	local02, #8
25588     10 29 02 FB | 	rdlong	local06, local02
2558c     08 20 86 F1 | 	sub	local02, #8
25590     01 28 CE F7 | 	test	local06, #1 wz
25594     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25598     40 00 90 AD |  if_e	jmp	#LR__3633
2559c     30 1E 06 F1 | 	add	local01, #48
255a0     0F 25 02 FB | 	rdlong	local04, local01
255a4     12 27 02 F6 | 	mov	local05, local04
255a8     30 1E 86 F1 | 	sub	local01, #48
255ac     13 26 46 F7 | 	zerox	local05, #19
255b0     14 24 46 F0 | 	shr	local04, #20
255b4     02 24 66 F0 | 	shl	local04, #2
255b8     ED 24 02 F1 | 	add	local04, __methods__
255bc     12 25 02 FB | 	rdlong	local04, local04
255c0     0F 13 02 F6 | 	mov	arg01, local01
255c4     11 15 62 F6 | 	neg	arg02, local03
255c8     01 16 06 F6 | 	mov	arg03, #1
255cc     F2 28 02 F6 | 	mov	local06, objptr
255d0     13 E5 01 F6 | 	mov	objptr, local05
255d4     2D 24 62 FD | 	call	local04
255d8     14 E5 01 F6 | 	mov	objptr, local06
255dc                 | LR__3633
255dc                 | LR__3634
255dc     10 01 68 FC | 	wrlong	#0, local02
255e0     04 20 06 F1 | 	add	local02, #4
255e4     10 01 68 FC | 	wrlong	#0, local02
255e8     04 20 06 F1 | 	add	local02, #4
255ec     10 01 68 FC | 	wrlong	#0, local02
255f0     00 FA 05 F6 | 	mov	result1, #0
255f4     A7 F0 03 F6 | 	mov	ptra, fp
255f8     B2 00 A0 FD | 	call	#popregs_
255fc                 | __system____default_flush_ret
255fc     2D 00 64 FD | 	ret
25600                 | 
25600                 | __system____default_buffer_init
25600     02 4A 05 F6 | 	mov	COUNT_, #2
25604     A8 00 A0 FD | 	call	#pushregs_
25608     09 1F 02 F6 | 	mov	local01, arg01
2560c     0F 21 02 FB | 	rdlong	local02, local01
25610     0F 13 02 F6 | 	mov	arg01, local01
25614     34 03 B0 FD | 	call	#__system___isatty
25618     00 FA 0D F2 | 	cmp	result1, #0 wz
2561c     06 1E 06 51 |  if_ne	add	local01, #6
25620     0F 0B 58 5C |  if_ne	wrword	#5, local01
25624     06 1E 06 A1 |  if_e	add	local01, #6
25628     0F 0D 58 AC |  if_e	wrword	#6, local01
2562c     14 20 06 F1 | 	add	local02, #20
25630     10 1F 02 F6 | 	mov	local01, local02
25634     04 20 86 F1 | 	sub	local02, #4
25638     10 1F 62 FC | 	wrlong	local01, local02
2563c     04 20 86 F1 | 	sub	local02, #4
25640     02 00 80 FF 
25644     10 01 68 FC | 	wrlong	##1024, local02
25648     00 FA 05 F6 | 	mov	result1, #0
2564c     A7 F0 03 F6 | 	mov	ptra, fp
25650     B2 00 A0 FD | 	call	#popregs_
25654                 | __system____default_buffer_init_ret
25654     2D 00 64 FD | 	ret
25658                 | 
25658                 | __system__stat
25658     04 4A 05 F6 | 	mov	COUNT_, #4
2565c     A8 00 A0 FD | 	call	#pushregs_
25660     0A 1F 02 F6 | 	mov	local01, arg02
25664     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25668     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
2566c     09 15 02 F6 | 	mov	arg02, arg01
25670     10 13 02 F6 | 	mov	arg01, local02
25674     00 16 06 F6 | 	mov	arg03, #0
25678     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2567c     40 B8 BF FD | 	call	#__system____getvfsforfile
25680     FD 22 0A F6 | 	mov	local03, result1 wz
25684     10 00 90 AD |  if_e	jmp	#LR__3640
25688     34 22 06 F1 | 	add	local03, #52
2568c     11 17 0A FB | 	rdlong	arg03, local03 wz
25690     34 22 86 F1 | 	sub	local03, #52
25694     14 00 90 5D |  if_ne	jmp	#LR__3641
25698                 | LR__3640
25698     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2569c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
256a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
256a4     01 FA 65 F6 | 	neg	result1, #1
256a8     68 00 90 FD | 	jmp	#LR__3642
256ac                 | LR__3641
256ac     0F 13 02 F6 | 	mov	arg01, local01
256b0     00 14 06 F6 | 	mov	arg02, #0
256b4     30 16 06 F6 | 	mov	arg03, #48
256b8     09 25 02 F6 | 	mov	local04, arg01
256bc     98 00 A0 FD | 	call	#\builtin_bytefill_
256c0     12 FB 01 F6 | 	mov	result1, local04
256c4     10 13 CA FA | 	rdbyte	arg01, local02 wz
256c8     08 1E 06 A1 |  if_e	add	local01, #8
256cc     08 00 80 AF 
256d0     0F FF 6B AC |  if_e	wrlong	##4607, local01
256d4     00 FA 05 A6 |  if_e	mov	result1, #0
256d8     38 00 90 AD |  if_e	jmp	#LR__3642
256dc     34 22 06 F1 | 	add	local03, #52
256e0     11 23 02 FB | 	rdlong	local03, local03
256e4     11 25 02 F6 | 	mov	local04, local03
256e8     13 22 46 F7 | 	zerox	local03, #19
256ec     14 24 46 F0 | 	shr	local04, #20
256f0     02 24 66 F0 | 	shl	local04, #2
256f4     ED 24 02 F1 | 	add	local04, __methods__
256f8     12 25 02 FB | 	rdlong	local04, local04
256fc     10 13 02 F6 | 	mov	arg01, local02
25700     0F 15 02 F6 | 	mov	arg02, local01
25704     F2 20 02 F6 | 	mov	local02, objptr
25708     11 E5 01 F6 | 	mov	objptr, local03
2570c     2D 24 62 FD | 	call	local04
25710     10 E5 01 F6 | 	mov	objptr, local02
25714                 | LR__3642
25714     A7 F0 03 F6 | 	mov	ptra, fp
25718     B2 00 A0 FD | 	call	#popregs_
2571c                 | __system__stat_ret
2571c     2D 00 64 FD | 	ret
25720                 | 
25720                 | __system__write
25720     0A 12 16 F2 | 	cmp	arg01, #10 wc
25724     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25728     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2572c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25730     01 FA 65 36 |  if_ae	neg	result1, #1
25734     20 00 90 3D |  if_ae	jmp	#LR__3650
25738     34 12 06 FD | 	qmul	arg01, #52
2573c     02 00 00 FF 
25740     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25744     18 12 62 FD | 	getqx	arg01
25748     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2574c     02 00 00 FF 
25750     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25754     0C 10 B0 FD | 	call	#__system___vfswrite
25758                 | LR__3650
25758                 | __system__write_ret
25758     2D 00 64 FD | 	ret
2575c                 | 
2575c                 | __system__read
2575c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25760     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25764     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25768     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2576c     01 FA 65 36 |  if_ae	neg	result1, #1
25770     20 00 90 3D |  if_ae	jmp	#LR__3660
25774     34 12 06 FD | 	qmul	arg01, #52
25778     02 00 00 FF 
2577c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25780     18 12 62 FD | 	getqx	arg01
25784     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25788     02 00 00 FF 
2578c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25790     98 11 B0 FD | 	call	#__system___vfsread
25794                 | LR__3660
25794                 | __system__read_ret
25794     2D 00 64 FD | 	ret
25798                 | 
25798                 | __system__close
25798     0A 12 16 F2 | 	cmp	arg01, #10 wc
2579c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
257a0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
257a4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
257a8     01 FA 65 36 |  if_ae	neg	result1, #1
257ac     20 00 90 3D |  if_ae	jmp	#LR__3670
257b0     34 12 06 FD | 	qmul	arg01, #52
257b4     02 00 00 FF 
257b8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
257bc     18 12 62 FD | 	getqx	arg01
257c0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
257c4     02 00 00 FF 
257c8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
257cc     10 F9 BF FD | 	call	#__system___closeraw
257d0                 | LR__3670
257d0                 | __system__close_ret
257d0     2D 00 64 FD | 	ret
257d4                 | 
257d4                 | __system__lseek
257d4     06 4A 05 F6 | 	mov	COUNT_, #6
257d8     A8 00 A0 FD | 	call	#pushregs_
257dc     0A 12 16 F2 | 	cmp	arg01, #10 wc
257e0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
257e4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
257e8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
257ec     01 FA 65 36 |  if_ae	neg	result1, #1
257f0     C4 00 90 3D |  if_ae	jmp	#LR__3681
257f4     34 12 06 FD | 	qmul	arg01, #52
257f8     02 00 00 FF 
257fc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25800     18 1E 62 FD | 	getqx	local01
25804     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25808     30 1E 06 F1 | 	add	local01, #48
2580c     0F 13 0A FB | 	rdlong	arg01, local01 wz
25810     30 1E 86 F1 | 	sub	local01, #48
25814     02 00 00 FF 
25818     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2581c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25820     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25824     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25828     01 FA 65 A6 |  if_e	neg	result1, #1
2582c     88 00 90 AD |  if_e	jmp	#LR__3681
25830     08 1E 06 F1 | 	add	local01, #8
25834     0F 21 02 FB | 	rdlong	local02, local01
25838     08 1E 86 F1 | 	sub	local01, #8
2583c     40 20 CE F7 | 	test	local02, #64 wz
25840     08 1E 06 51 |  if_ne	add	local01, #8
25844     0F 21 02 5B |  if_ne	rdlong	local02, local01
25848     80 20 46 55 |  if_ne	or	local02, #128
2584c     0F 21 62 5C |  if_ne	wrlong	local02, local01
25850     08 1E 86 51 |  if_ne	sub	local01, #8
25854     30 1E 06 F1 | 	add	local01, #48
25858     0F 23 02 FB | 	rdlong	local03, local01
2585c     11 25 02 F6 | 	mov	local04, local03
25860     30 1E 86 F1 | 	sub	local01, #48
25864     13 24 46 F7 | 	zerox	local04, #19
25868     14 22 46 F0 | 	shr	local03, #20
2586c     02 22 66 F0 | 	shl	local03, #2
25870     ED 22 02 F1 | 	add	local03, __methods__
25874     11 23 02 FB | 	rdlong	local03, local03
25878     0F 13 02 F6 | 	mov	arg01, local01
2587c     F2 26 02 F6 | 	mov	local05, objptr
25880     12 E5 01 F6 | 	mov	objptr, local04
25884     2D 22 62 FD | 	call	local03
25888     13 E5 01 F6 | 	mov	objptr, local05
2588c     FD 28 02 F6 | 	mov	local06, result1
25890     00 28 56 F2 | 	cmps	local06, #0 wc
25894     1C 00 90 3D |  if_ae	jmp	#LR__3680
25898     14 13 6A F6 | 	neg	arg01, local06 wz
2589c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258a0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
258a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
258a8     01 FA 65 56 |  if_ne	neg	result1, #1
258ac     00 FA 05 A6 |  if_e	mov	result1, #0
258b0     04 00 90 FD | 	jmp	#LR__3681
258b4                 | LR__3680
258b4     14 FB 01 F6 | 	mov	result1, local06
258b8                 | LR__3681
258b8     A7 F0 03 F6 | 	mov	ptra, fp
258bc     B2 00 A0 FD | 	call	#popregs_
258c0                 | __system__lseek_ret
258c0     2D 00 64 FD | 	ret
258c4                 | 
258c4                 | __system___ioctl
258c4     03 4A 05 F6 | 	mov	COUNT_, #3
258c8     A8 00 A0 FD | 	call	#pushregs_
258cc     00 12 4E F2 | 	cmps	arg01, #0 wz
258d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
258d4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
258d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
258dc     01 FA 65 A6 |  if_e	neg	result1, #1
258e0     5C 00 90 AD |  if_e	jmp	#LR__3691
258e4     28 12 06 F1 | 	add	arg01, #40
258e8     09 1F 02 FB | 	rdlong	local01, arg01
258ec     0F 21 02 F6 | 	mov	local02, local01
258f0     28 12 86 F1 | 	sub	arg01, #40
258f4     13 20 46 F7 | 	zerox	local02, #19
258f8     14 1E 46 F0 | 	shr	local01, #20
258fc     02 1E 66 F0 | 	shl	local01, #2
25900     ED 1E 02 F1 | 	add	local01, __methods__
25904     0F 1F 02 FB | 	rdlong	local01, local01
25908     F2 22 02 F6 | 	mov	local03, objptr
2590c     10 E5 01 F6 | 	mov	objptr, local02
25910     2D 1E 62 FD | 	call	local01
25914     11 E5 01 F6 | 	mov	objptr, local03
25918     FD 12 0A F6 | 	mov	arg01, result1 wz
2591c     1C 00 90 AD |  if_e	jmp	#LR__3690
25920     00 12 4E F2 | 	cmps	arg01, #0 wz
25924     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25928     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2592c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25930     01 FA 65 56 |  if_ne	neg	result1, #1
25934     00 FA 05 A6 |  if_e	mov	result1, #0
25938     04 00 90 FD | 	jmp	#LR__3691
2593c                 | LR__3690
2593c     00 FA 05 F6 | 	mov	result1, #0
25940                 | LR__3691
25940     A7 F0 03 F6 | 	mov	ptra, fp
25944     B2 00 A0 FD | 	call	#popregs_
25948                 | __system___ioctl_ret
25948     2D 00 64 FD | 	ret
2594c                 | 
2594c                 | __system___isatty
2594c     00 4A 05 F6 | 	mov	COUNT_, #0
25950     A8 00 A0 FD | 	call	#pushregs_
25954     0C F0 07 F1 | 	add	ptra, #12
25958     04 4E 05 F1 | 	add	fp, #4
2595c     A7 12 62 FC | 	wrlong	arg01, fp
25960     04 4E 05 F1 | 	add	fp, #4
25964     A7 16 02 F6 | 	mov	arg03, fp
25968     08 4E 85 F1 | 	sub	fp, #8
2596c     00 15 06 F6 | 	mov	arg02, #256
25970     50 FF BF FD | 	call	#__system___ioctl
25974     00 FA 0D F2 | 	cmp	result1, #0 wz
25978     01 FA 05 A6 |  if_e	mov	result1, #1
2597c     00 FA 05 56 |  if_ne	mov	result1, #0
25980     A7 F0 03 F6 | 	mov	ptra, fp
25984     B2 00 A0 FD | 	call	#popregs_
25988                 | __system___isatty_ret
25988     2D 00 64 FD | 	ret
2598c                 | 
2598c                 | __system____getftab
2598c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25990     34 12 06 CD |  if_b	qmul	arg01, #52
25994     00 FA 05 36 |  if_ae	mov	result1, #0
25998     02 00 00 CF 
2599c     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
259a0     18 FA 61 CD |  if_b	getqx	result1
259a4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
259a8     02 00 00 CF 
259ac     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
259b0                 | __system____getftab_ret
259b0     2D 00 64 FD | 	ret
259b4                 | 
259b4                 | __system__strncpy
259b4     09 01 02 F6 | 	mov	_var01, arg01
259b8                 | LR__3700
259b8     01 16 86 F1 | 	sub	arg03, #1
259bc     00 16 56 F2 | 	cmps	arg03, #0 wc
259c0     18 00 90 CD |  if_b	jmp	#LR__3701
259c4     0A FB C1 FA | 	rdbyte	result1, arg02
259c8     00 FB 41 FC | 	wrbyte	result1, _var01
259cc     01 14 06 F1 | 	add	arg02, #1
259d0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
259d4     01 00 06 F1 | 	add	_var01, #1
259d8     DC FF 9F 5D |  if_ne	jmp	#LR__3700
259dc                 | LR__3701
259dc     97 0C 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
259e0                 | LR__3702
259e0     01 16 86 F1 | 	sub	arg03, #1
259e4     00 16 56 F2 | 	cmps	arg03, #0 wc
259e8     00 03 02 36 |  if_ae	mov	_var02, _var01
259ec     01 00 06 31 |  if_ae	add	_var01, #1
259f0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
259f4     E8 FF 9F 3D |  if_ae	jmp	#LR__3702
259f8                 | LR__3703
259f8     09 FB 01 F6 | 	mov	result1, arg01
259fc                 | __system__strncpy_ret
259fc     2D 00 64 FD | 	ret
25a00                 | 
25a00                 | __system__strncat
25a00     00 14 4E F2 | 	cmps	arg02, #0 wz
25a04     50 00 90 AD |  if_e	jmp	#LR__3714
25a08     01 16 16 F2 | 	cmp	arg03, #1 wc
25a0c     48 00 90 CD |  if_b	jmp	#LR__3714
25a10     09 01 02 F6 | 	mov	_var01, arg01
25a14     97 1E 48 FB | 	callpa	#(@LR__3712-@LR__3710)>>2,fcache_load_ptr_
25a18                 | LR__3710
25a18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25a1c     01 00 06 51 |  if_ne	add	_var01, #1
25a20     F4 FF 9F 5D |  if_ne	jmp	#LR__3710
25a24     0B 03 02 F6 | 	mov	_var02, arg03
25a28                 | LR__3711
25a28     0A 05 C2 FA | 	rdbyte	_var03, arg02
25a2c     02 07 02 F6 | 	mov	_var04, _var03
25a30     07 06 4E F7 | 	zerox	_var04, #7 wz
25a34     01 14 06 F1 | 	add	arg02, #1
25a38     18 00 90 AD |  if_e	jmp	#LR__3713
25a3c     01 02 86 F1 | 	sub	_var02, #1
25a40     00 02 56 F2 | 	cmps	_var02, #0 wc
25a44     00 07 02 36 |  if_ae	mov	_var04, _var01
25a48     01 00 06 31 |  if_ae	add	_var01, #1
25a4c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25a50     D4 FF 9F 3D |  if_ae	jmp	#LR__3711
25a54                 | LR__3712
25a54                 | LR__3713
25a54     00 01 48 FC | 	wrbyte	#0, _var01
25a58                 | LR__3714
25a58     09 FB 01 F6 | 	mov	result1, arg01
25a5c                 | __system__strncat_ret
25a5c     2D 00 64 FD | 	ret
25a60                 | 
25a60                 | __system__strncmp
25a60     09 01 0A F6 | 	mov	_var01, arg01 wz
25a64     14 00 90 5D |  if_ne	jmp	#LR__3720
25a68     00 14 0E F2 | 	cmp	arg02, #0 wz
25a6c     01 02 66 56 |  if_ne	neg	_var02, #1
25a70     00 02 06 A6 |  if_e	mov	_var02, #0
25a74     01 FB 01 F6 | 	mov	result1, _var02
25a78     74 00 90 FD | 	jmp	#__system__strncmp_ret
25a7c                 | LR__3720
25a7c     00 14 0E F2 | 	cmp	arg02, #0 wz
25a80     01 FA 05 A6 |  if_e	mov	result1, #1
25a84     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25a88     0B 05 02 F6 | 	mov	_var03, arg03
25a8c     97 16 48 FB | 	callpa	#(@LR__3722-@LR__3721)>>2,fcache_load_ptr_
25a90                 | LR__3721
25a90     00 07 C2 FA | 	rdbyte	_var04, _var01
25a94     0A 09 02 F6 | 	mov	_var05, arg02
25a98     04 0B C2 FA | 	rdbyte	_var06, _var05
25a9c     01 04 86 F1 | 	sub	_var03, #1
25aa0     00 04 56 F2 | 	cmps	_var03, #0 wc
25aa4     01 00 06 F1 | 	add	_var01, #1
25aa8     01 14 06 F1 | 	add	arg02, #1
25aac     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25ab0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3723
25ab4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25ab8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3721
25abc                 | LR__3722
25abc                 | LR__3723
25abc     00 04 56 F2 | 	cmps	_var03, #0 wc
25ac0     00 FA 05 C6 |  if_b	mov	result1, #0
25ac4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25ac8     05 07 0A F2 | 	cmp	_var04, _var06 wz
25acc     00 FA 05 A6 |  if_e	mov	result1, #0
25ad0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ad4     00 06 0E F2 | 	cmp	_var04, #0 wz
25ad8     01 FA 65 A6 |  if_e	neg	result1, #1
25adc     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ae0     00 0A 0E F2 | 	cmp	_var06, #0 wz
25ae4     01 FA 05 A6 |  if_e	mov	result1, #1
25ae8     03 FB 01 56 |  if_ne	mov	result1, _var04
25aec     05 FB 81 51 |  if_ne	sub	result1, _var06
25af0                 | __system__strncmp_ret
25af0     2D 00 64 FD | 	ret
25af4                 | 
25af4                 | __system____root_opendir
25af4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25af8     04 12 06 F1 | 	add	arg01, #4
25afc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25b00     00 FA 05 F6 | 	mov	result1, #0
25b04     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25b08                 | __system____root_opendir_ret
25b08     2D 00 64 FD | 	ret
25b0c                 | 
25b0c                 | __system____root_readdir
25b0c     03 4A 05 F6 | 	mov	COUNT_, #3
25b10     A8 00 A0 FD | 	call	#pushregs_
25b14     09 1F 02 F6 | 	mov	local01, arg01
25b18     0A 21 02 F6 | 	mov	local02, arg02
25b1c     04 1E 06 F1 | 	add	local01, #4
25b20     0F 23 02 FB | 	rdlong	local03, local01
25b24     04 1E 86 F1 | 	sub	local01, #4
25b28                 | LR__3730
25b28     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25b2c     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25b30     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25b34     01 FA 65 A6 |  if_e	neg	result1, #1
25b38     48 00 90 AD |  if_e	jmp	#LR__3731
25b3c     11 17 0A FB | 	rdlong	arg03, local03 wz
25b40     04 22 06 A1 |  if_e	add	local03, #4
25b44     E0 FF 9F AD |  if_e	jmp	#LR__3730
25b48     11 15 02 FB | 	rdlong	arg02, local03
25b4c     01 14 06 F1 | 	add	arg02, #1
25b50     10 13 02 F6 | 	mov	arg01, local02
25b54     40 16 06 F6 | 	mov	arg03, #64
25b58     58 FE BF FD | 	call	#__system__strncpy
25b5c     50 20 06 F1 | 	add	local02, #80
25b60     10 03 48 FC | 	wrbyte	#1, local02
25b64     08 20 86 F1 | 	sub	local02, #8
25b68     10 01 68 FC | 	wrlong	#0, local02
25b6c     04 20 06 F1 | 	add	local02, #4
25b70     10 01 68 FC | 	wrlong	#0, local02
25b74     04 22 06 F1 | 	add	local03, #4
25b78     04 1E 06 F1 | 	add	local01, #4
25b7c     0F 23 62 FC | 	wrlong	local03, local01
25b80     00 FA 05 F6 | 	mov	result1, #0
25b84                 | LR__3731
25b84     A7 F0 03 F6 | 	mov	ptra, fp
25b88     B2 00 A0 FD | 	call	#popregs_
25b8c                 | __system____root_readdir_ret
25b8c     2D 00 64 FD | 	ret
25b90                 | 
25b90                 | __system____root_closedir
25b90     00 FA 05 F6 | 	mov	result1, #0
25b94                 | __system____root_closedir_ret
25b94     2D 00 64 FD | 	ret
25b98                 | 
25b98                 | __system____root_stat
25b98     0A 01 02 F6 | 	mov	_var01, arg02
25b9c     00 13 02 F6 | 	mov	arg01, _var01
25ba0     00 14 06 F6 | 	mov	arg02, #0
25ba4     30 16 06 F6 | 	mov	arg03, #48
25ba8     98 00 A0 FD | 	call	#\builtin_bytefill_
25bac     08 00 06 F1 | 	add	_var01, #8
25bb0     08 00 80 FF 
25bb4     00 FF 6B FC | 	wrlong	##4607, _var01
25bb8     00 FA 05 F6 | 	mov	result1, #0
25bbc                 | __system____root_stat_ret
25bbc     2D 00 64 FD | 	ret
25bc0                 | 
25bc0                 | __system___normalizeName
25bc0     00 00 06 F6 | 	mov	_var01, #0
25bc4     09 03 02 F6 | 	mov	_var02, arg01
25bc8     01 05 02 F6 | 	mov	_var03, _var02
25bcc                 | LR__3740
25bcc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25bd0     5C 01 90 AD |  if_e	jmp	#LR__3759
25bd4     00 00 0E F2 | 	cmp	_var01, #0 wz
25bd8     02 07 02 56 |  if_ne	mov	_var04, _var03
25bdc     01 04 06 51 |  if_ne	add	_var03, #1
25be0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25be4     00 00 06 56 |  if_ne	mov	_var01, #0
25be8     01 07 C2 FA | 	rdbyte	_var04, _var02
25bec     2E 06 0E F2 | 	cmp	_var04, #46 wz
25bf0     D8 00 90 5D |  if_ne	jmp	#LR__3752
25bf4     01 02 06 F1 | 	add	_var02, #1
25bf8     01 07 C2 FA | 	rdbyte	_var04, _var02
25bfc     01 02 86 F1 | 	sub	_var02, #1
25c00     2F 06 0E F2 | 	cmp	_var04, #47 wz
25c04     18 00 90 AD |  if_e	jmp	#LR__3741
25c08     01 02 06 F1 | 	add	_var02, #1
25c0c     01 09 C2 FA | 	rdbyte	_var05, _var02
25c10     01 02 86 F1 | 	sub	_var02, #1
25c14     04 0B 02 F6 | 	mov	_var06, _var05
25c18     07 0A 4E F7 | 	zerox	_var06, #7 wz
25c1c     10 00 90 5D |  if_ne	jmp	#LR__3742
25c20                 | LR__3741
25c20     01 0D 02 F6 | 	mov	_var07, _var02
25c24     01 0C 06 F1 | 	add	_var07, #1
25c28     06 03 02 F6 | 	mov	_var02, _var07
25c2c     E0 00 90 FD | 	jmp	#LR__3756
25c30                 | LR__3742
25c30     01 02 06 F1 | 	add	_var02, #1
25c34     01 0D C2 FA | 	rdbyte	_var07, _var02
25c38     01 02 86 F1 | 	sub	_var02, #1
25c3c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25c40     2E 06 0E F2 | 	cmp	_var04, #46 wz
25c44     84 00 90 5D |  if_ne	jmp	#LR__3751
25c48     02 02 06 F1 | 	add	_var02, #2
25c4c     01 0D C2 FA | 	rdbyte	_var07, _var02
25c50     02 02 86 F1 | 	sub	_var02, #2
25c54     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25c58     2F 06 0E F2 | 	cmp	_var04, #47 wz
25c5c     18 00 90 AD |  if_e	jmp	#LR__3743
25c60     02 02 06 F1 | 	add	_var02, #2
25c64     01 09 C2 FA | 	rdbyte	_var05, _var02
25c68     02 02 86 F1 | 	sub	_var02, #2
25c6c     04 0B 02 F6 | 	mov	_var06, _var05
25c70     07 0A 4E F7 | 	zerox	_var06, #7 wz
25c74     54 00 90 5D |  if_ne	jmp	#LR__3750
25c78                 | LR__3743
25c78     02 02 06 F1 | 	add	_var02, #2
25c7c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25c80     40 00 90 ED |  if_be	jmp	#LR__3749
25c84     02 0F 02 F6 | 	mov	_var08, _var03
25c88     01 0E 86 F1 | 	sub	_var08, #1
25c8c                 | LR__3744
25c8c     07 07 C2 FA | 	rdbyte	_var04, _var08
25c90     2F 06 0E F2 | 	cmp	_var04, #47 wz
25c94     0C 00 90 5D |  if_ne	jmp	#LR__3745
25c98     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25c9c     01 0E 86 11 |  if_a	sub	_var08, #1
25ca0     E8 FF 9F 1D |  if_a	jmp	#LR__3744
25ca4                 | LR__3745
25ca4     97 0C 48 FB | 	callpa	#(@LR__3747-@LR__3746)>>2,fcache_load_ptr_
25ca8                 | LR__3746
25ca8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25cac     10 00 90 ED |  if_be	jmp	#LR__3748
25cb0     07 07 C2 FA | 	rdbyte	_var04, _var08
25cb4     2F 06 0E F2 | 	cmp	_var04, #47 wz
25cb8     01 0E 86 51 |  if_ne	sub	_var08, #1
25cbc     E8 FF 9F 5D |  if_ne	jmp	#LR__3746
25cc0                 | LR__3747
25cc0                 | LR__3748
25cc0     07 05 02 F6 | 	mov	_var03, _var08
25cc4                 | LR__3749
25cc4     01 00 06 F6 | 	mov	_var01, #1
25cc8     44 00 90 FD | 	jmp	#LR__3756
25ccc                 | LR__3750
25ccc                 | LR__3751
25ccc                 | LR__3752
25ccc     97 18 48 FB | 	callpa	#(@LR__3754-@LR__3753)>>2,fcache_load_ptr_
25cd0                 | LR__3753
25cd0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25cd4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25cd8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25cdc     20 00 90 AD |  if_e	jmp	#LR__3755
25ce0     01 0B 02 F6 | 	mov	_var06, _var02
25ce4     01 09 02 F6 | 	mov	_var05, _var02
25ce8     01 08 06 F1 | 	add	_var05, #1
25cec     05 11 C2 FA | 	rdbyte	_var09, _var06
25cf0     04 03 02 F6 | 	mov	_var02, _var05
25cf4     02 11 42 FC | 	wrbyte	_var09, _var03
25cf8     01 04 06 F1 | 	add	_var03, #1
25cfc     D0 FF 9F FD | 	jmp	#LR__3753
25d00                 | LR__3754
25d00                 | LR__3755
25d00     01 07 C2 FA | 	rdbyte	_var04, _var02
25d04     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d08     C0 FE 9F 5D |  if_ne	jmp	#LR__3740
25d0c     01 00 06 F6 | 	mov	_var01, #1
25d10                 | LR__3756
25d10     97 0C 48 FB | 	callpa	#(@LR__3758-@LR__3757)>>2,fcache_load_ptr_
25d14                 | LR__3757
25d14     01 07 C2 FA | 	rdbyte	_var04, _var02
25d18     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d1c     01 0D 02 A6 |  if_e	mov	_var07, _var02
25d20     01 0C 06 A1 |  if_e	add	_var07, #1
25d24     06 03 02 A6 |  if_e	mov	_var02, _var07
25d28     E8 FF 9F AD |  if_e	jmp	#LR__3757
25d2c                 | LR__3758
25d2c     9C FE 9F FD | 	jmp	#LR__3740
25d30                 | LR__3759
25d30     02 01 48 FC | 	wrbyte	#0, _var03
25d34                 | __system___normalizeName_ret
25d34     2D 00 64 FD | 	ret
25d38                 | 
25d38                 | __system___strrev
25d38     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25d3c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25d40     09 03 02 F6 | 	mov	_var02, arg01
25d44     97 1A 48 FB | 	callpa	#(@LR__3762-@LR__3760)>>2,fcache_load_ptr_
25d48                 | LR__3760
25d48     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25d4c     01 02 06 51 |  if_ne	add	_var02, #1
25d50     F4 FF 9F 5D |  if_ne	jmp	#LR__3760
25d54     01 02 86 F1 | 	sub	_var02, #1
25d58                 | LR__3761
25d58     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25d5c     1C 00 90 ED |  if_be	jmp	#LR__3763
25d60     09 01 C2 FA | 	rdbyte	_var01, arg01
25d64     01 05 C2 FA | 	rdbyte	_var03, _var02
25d68     09 05 42 FC | 	wrbyte	_var03, arg01
25d6c     01 01 42 FC | 	wrbyte	_var01, _var02
25d70     01 12 06 F1 | 	add	arg01, #1
25d74     01 02 86 F1 | 	sub	_var02, #1
25d78     DC FF 9F FD | 	jmp	#LR__3761
25d7c                 | LR__3762
25d7c                 | LR__3763
25d7c                 | __system___strrev_ret
25d7c     2D 00 64 FD | 	ret
25d80                 | 
25d80                 | __system___fmtpad
25d80     06 4A 05 F6 | 	mov	COUNT_, #6
25d84     A8 00 A0 FD | 	call	#pushregs_
25d88     09 1F 02 F6 | 	mov	local01, arg01
25d8c     0A 21 02 F6 | 	mov	local02, arg02
25d90     0B 23 02 F6 | 	mov	local03, arg03
25d94     10 13 EA F8 | 	getbyte	arg01, local02, #1
25d98     16 20 46 F0 | 	shr	local02, #22
25d9c     03 20 0E F5 | 	and	local02, #3 wz
25da0     00 24 06 F6 | 	mov	local04, #0
25da4     01 20 06 A6 |  if_e	mov	local02, #1
25da8     0C 21 CA F7 | 	test	local02, arg04 wz
25dac     00 FA 05 A6 |  if_e	mov	result1, #0
25db0     88 00 90 AD |  if_e	jmp	#LR__3773
25db4     09 23 C2 F2 | 	subr	local03, arg01
25db8     01 22 56 F2 | 	cmps	local03, #1 wc
25dbc     00 FA 05 C6 |  if_b	mov	result1, #0
25dc0     78 00 90 CD |  if_b	jmp	#LR__3773
25dc4     03 20 0E F2 | 	cmp	local02, #3 wz
25dc8     18 00 90 5D |  if_ne	jmp	#LR__3770
25dcc     01 18 0E F2 | 	cmp	arg04, #1 wz
25dd0     6E 20 62 FD | 	wrz	local02
25dd4     10 23 02 F1 | 	add	local03, local02
25dd8     11 23 52 F6 | 	abs	local03, local03 wc
25ddc     01 22 46 F0 | 	shr	local03, #1
25de0     11 23 82 F6 | 	negc	local03, local03
25de4                 | LR__3770
25de4     01 22 56 F2 | 	cmps	local03, #1 wc
25de8     4C 00 90 CD |  if_b	jmp	#LR__3772
25dec     11 27 02 F6 | 	mov	local05, local03
25df0                 | LR__3771
25df0     0F 21 02 F6 | 	mov	local02, local01
25df4     0F 29 02 F6 | 	mov	local06, local01
25df8     13 20 46 F7 | 	zerox	local02, #19
25dfc     14 28 46 F0 | 	shr	local06, #20
25e00     02 28 66 F0 | 	shl	local06, #2
25e04     ED 28 02 F1 | 	add	local06, __methods__
25e08     14 29 02 FB | 	rdlong	local06, local06
25e0c     20 12 06 F6 | 	mov	arg01, #32
25e10     F2 22 02 F6 | 	mov	local03, objptr
25e14     10 E5 01 F6 | 	mov	objptr, local02
25e18     2D 28 62 FD | 	call	local06
25e1c     11 E5 01 F6 | 	mov	objptr, local03
25e20     FD 28 02 F6 | 	mov	local06, result1
25e24     00 28 56 F2 | 	cmps	local06, #0 wc
25e28     14 FB 01 C6 |  if_b	mov	result1, local06
25e2c     0C 00 90 CD |  if_b	jmp	#LR__3773
25e30     14 25 02 F1 | 	add	local04, local06
25e34     EE 27 6E FB | 	djnz	local05, #LR__3771
25e38                 | LR__3772
25e38     12 FB 01 F6 | 	mov	result1, local04
25e3c                 | LR__3773
25e3c     A7 F0 03 F6 | 	mov	ptra, fp
25e40     B2 00 A0 FD | 	call	#popregs_
25e44                 | __system___fmtpad_ret
25e44     2D 00 64 FD | 	ret
25e48                 | 
25e48                 | __system___uitoa
25e48     04 4A 05 F6 | 	mov	COUNT_, #4
25e4c     A8 00 A0 FD | 	call	#pushregs_
25e50     09 1F 02 F6 | 	mov	local01, arg01
25e54     00 1A 4E F2 | 	cmps	arg05, #0 wz
25e58     0F 1B 02 F6 | 	mov	arg05, local01
25e5c     00 20 06 F6 | 	mov	local02, #0
25e60     37 22 06 56 |  if_ne	mov	local03, #55
25e64     57 22 06 A6 |  if_e	mov	local03, #87
25e68                 | LR__3780
25e68     0B 15 12 FD | 	qdiv	arg02, arg03
25e6c     19 24 62 FD | 	getqy	local04
25e70     0B 15 12 FD | 	qdiv	arg02, arg03
25e74     0A 24 16 F2 | 	cmp	local04, #10 wc
25e78     30 24 06 C1 |  if_b	add	local04, #48
25e7c     11 25 02 31 |  if_ae	add	local04, local03
25e80     0D 25 42 FC | 	wrbyte	local04, arg05
25e84     01 1A 06 F1 | 	add	arg05, #1
25e88     01 20 06 F1 | 	add	local02, #1
25e8c     18 14 62 FD | 	getqx	arg02
25e90     00 14 0E F2 | 	cmp	arg02, #0 wz
25e94     D0 FF 9F 5D |  if_ne	jmp	#LR__3780
25e98     0C 21 12 F2 | 	cmp	local02, arg04 wc
25e9c     C8 FF 9F CD |  if_b	jmp	#LR__3780
25ea0     0D 01 48 FC | 	wrbyte	#0, arg05
25ea4     0F 13 02 F6 | 	mov	arg01, local01
25ea8     8C FE BF FD | 	call	#__system___strrev
25eac     10 FB 01 F6 | 	mov	result1, local02
25eb0     A7 F0 03 F6 | 	mov	ptra, fp
25eb4     B2 00 A0 FD | 	call	#popregs_
25eb8                 | __system___uitoa_ret
25eb8     2D 00 64 FD | 	ret
25ebc                 | 
25ebc                 | __system__disassemble_0498
25ebc     10 4A 05 F6 | 	mov	COUNT_, #16
25ec0     A8 00 A0 FD | 	call	#pushregs_
25ec4     09 1F 02 F6 | 	mov	local01, arg01
25ec8     0A 21 02 F6 | 	mov	local02, arg02
25ecc     0B 23 02 F6 | 	mov	local03, arg03
25ed0     0C 25 02 F6 | 	mov	local04, arg04
25ed4     0D 27 02 F6 | 	mov	local05, arg05
25ed8     13 13 52 F6 | 	abs	arg01, local05 wc
25edc     1F 28 C6 C9 |  if_b	decod	local06, #31
25ee0     00 28 06 36 |  if_ae	mov	local06, #0
25ee4     F0 CF BF FD | 	call	#__system___float_fromuns
25ee8     14 FB 61 F5 | 	xor	result1, local06
25eec     FD 2A 02 F6 | 	mov	local07, result1
25ef0     00 2C 06 F6 | 	mov	local08, #0
25ef4     0F 13 02 F6 | 	mov	arg01, local01
25ef8     00 14 06 F6 | 	mov	arg02, #0
25efc     01 16 06 F6 | 	mov	arg03, #1
25f00     0C D8 BF FD | 	call	#__system___float_cmp
25f04     00 FA 0D F2 | 	cmp	result1, #0 wz
25f08     00 2E 06 A6 |  if_e	mov	local09, #0
25f0c     10 01 68 AC |  if_e	wrlong	#0, local02
25f10     11 2F 62 AC |  if_e	wrlong	local09, local03
25f14     8C 01 90 AD |  if_e	jmp	#LR__3802
25f18     0F 13 02 F6 | 	mov	arg01, local01
25f1c     BC DC BF FD | 	call	#__system____builtin_ilogb
25f20     FD 30 02 F6 | 	mov	local10, result1
25f24     0A 26 0E F2 | 	cmp	local05, #10 wz
25f28     24 00 90 5D |  if_ne	jmp	#LR__3790
25f2c     18 2F 02 F6 | 	mov	local09, local10
25f30     01 2E 66 F0 | 	shl	local09, #1
25f34     18 2F 02 F1 | 	add	local09, local10
25f38     17 31 52 F6 | 	abs	local10, local09 wc
25f3c     0A 30 16 FD | 	qdiv	local10, #10
25f40     09 32 06 F6 | 	mov	local11, #9
25f44     18 30 62 FD | 	getqx	local10
25f48     18 31 82 F6 | 	negc	local10, local10
25f4c     04 00 90 FD | 	jmp	#LR__3791
25f50                 | LR__3790
25f50     18 32 06 F6 | 	mov	local11, #24
25f54                 | LR__3791
25f54                 | LR__3792
25f54     08 2C 56 F2 | 	cmps	local08, #8 wc
25f58     01 2C 06 F1 | 	add	local08, #1
25f5c     60 00 90 3D |  if_ae	jmp	#LR__3793
25f60     00 C0 1F FF 
25f64     00 12 06 F6 | 	mov	arg01, ##1065353216
25f68     15 15 02 F6 | 	mov	arg02, local07
25f6c     18 17 02 F6 | 	mov	arg03, local10
25f70     4C E3 BF FD | 	call	#__system___float_pow_n
25f74     FD 14 02 F6 | 	mov	arg02, result1
25f78     0F 13 02 F6 | 	mov	arg01, local01
25f7c     60 D5 BF FD | 	call	#__system___float_div
25f80     FD 34 02 F6 | 	mov	local12, result1
25f84     1A 13 02 F6 | 	mov	arg01, local12
25f88     00 C0 1F FF 
25f8c     00 14 06 F6 | 	mov	arg02, ##1065353216
25f90     01 16 06 F6 | 	mov	arg03, #1
25f94     78 D7 BF FD | 	call	#__system___float_cmp
25f98     00 FA 55 F2 | 	cmps	result1, #0 wc
25f9c     01 30 86 C1 |  if_b	sub	local10, #1
25fa0     B0 FF 9F CD |  if_b	jmp	#LR__3792
25fa4     15 15 02 F6 | 	mov	arg02, local07
25fa8     1A 13 02 F6 | 	mov	arg01, local12
25fac     01 16 66 F6 | 	neg	arg03, #1
25fb0     5C D7 BF FD | 	call	#__system___float_cmp
25fb4     00 FA 55 F2 | 	cmps	result1, #0 wc
25fb8     01 30 06 31 |  if_ae	add	local10, #1
25fbc     94 FF 9F 3D |  if_ae	jmp	#LR__3792
25fc0                 | LR__3793
25fc0     1A 13 02 F6 | 	mov	arg01, local12
25fc4     14 DC BF FD | 	call	#__system____builtin_ilogb
25fc8     FD 36 02 F6 | 	mov	local13, result1
25fcc     1A 39 02 F6 | 	mov	local14, local12
25fd0     17 39 06 F4 | 	bitl	local14, #279
25fd4     17 38 26 F4 | 	bith	local14, #23
25fd8     1B 39 62 F0 | 	shl	local14, local13
25fdc     02 26 0E F2 | 	cmp	local05, #2 wz
25fe0     02 24 66 A0 |  if_e	shl	local04, #2
25fe4     00 3A 06 F6 | 	mov	local15, #0
25fe8     00 24 56 F2 | 	cmps	local04, #0 wc
25fec     10 00 90 3D |  if_ae	jmp	#LR__3794
25ff0     18 25 C2 F2 | 	subr	local04, local10
25ff4     00 24 56 F2 | 	cmps	local04, #0 wc
25ff8     A0 00 90 CD |  if_b	jmp	#LR__3801
25ffc     04 00 90 FD | 	jmp	#LR__3795
26000                 | LR__3794
26000     01 24 06 F1 | 	add	local04, #1
26004                 | LR__3795
26004     19 25 7A F3 | 	fles	local04, local11 wcz
26008     01 3C 06 F6 | 	mov	local16, #1
2600c     97 22 48 FB | 	callpa	#(@LR__3797-@LR__3796)>>2,fcache_load_ptr_
26010                 | LR__3796
26010     00 40 00 FF 
26014     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26018     38 00 90 3D |  if_ae	jmp	#LR__3798
2601c     01 24 56 F2 | 	cmps	local04, #1 wc
26020     01 24 86 F1 | 	sub	local04, #1
26024     2C 00 90 CD |  if_b	jmp	#LR__3798
26028     13 3B 02 FD | 	qmul	local15, local05
2602c     1C 37 02 F6 | 	mov	local13, local14
26030     17 36 46 F0 | 	shr	local13, #23
26034     17 39 06 F4 | 	bitl	local14, #279
26038     18 3A 62 FD | 	getqx	local15
2603c     13 3D 02 FD | 	qmul	local16, local05
26040     18 3C 62 FD | 	getqx	local16
26044     13 39 02 FD | 	qmul	local14, local05
26048     1B 3B 02 F1 | 	add	local15, local13
2604c     18 38 62 FD | 	getqx	local14
26050     BC FF 9F FD | 	jmp	#LR__3796
26054                 | LR__3797
26054                 | LR__3798
26054     13 2F 02 F6 | 	mov	local09, local05
26058     17 2E 66 F0 | 	shl	local09, #23
2605c     17 37 52 F6 | 	abs	local13, local09 wc
26060     01 36 46 F0 | 	shr	local13, #1
26064     1B 37 82 F6 | 	negc	local13, local13
26068     1B 39 1A F2 | 	cmp	local14, local13 wcz
2606c     20 00 90 1D |  if_a	jmp	#LR__3799
26070     17 26 66 F0 | 	shl	local05, #23
26074     13 37 52 F6 | 	abs	local13, local05 wc
26078     01 36 46 F0 | 	shr	local13, #1
2607c     1B 37 82 F6 | 	negc	local13, local13
26080     1B 39 0A F2 | 	cmp	local14, local13 wz
26084     14 00 90 5D |  if_ne	jmp	#LR__3800
26088     01 3A CE F7 | 	test	local15, #1 wz
2608c     0C 00 90 AD |  if_e	jmp	#LR__3800
26090                 | LR__3799
26090     01 3A 06 F1 | 	add	local15, #1
26094     1E 3B 0A F2 | 	cmp	local15, local16 wz
26098     01 30 06 A1 |  if_e	add	local10, #1
2609c                 | LR__3800
2609c                 | LR__3801
2609c     10 3B 62 FC | 	wrlong	local15, local02
260a0     11 31 62 FC | 	wrlong	local10, local03
260a4                 | LR__3802
260a4     A7 F0 03 F6 | 	mov	ptra, fp
260a8     B2 00 A0 FD | 	call	#popregs_
260ac                 | __system__disassemble_0498_ret
260ac     2D 00 64 FD | 	ret
260b0                 | 
260b0                 | __system__emitsign_0500
260b0     00 FA 05 F6 | 	mov	result1, #0
260b4     00 14 0E F2 | 	cmp	arg02, #0 wz
260b8     09 01 02 56 |  if_ne	mov	_var01, arg01
260bc     01 12 06 51 |  if_ne	add	arg01, #1
260c0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
260c4     01 FA 05 56 |  if_ne	mov	result1, #1
260c8     00 16 0E F2 | 	cmp	arg03, #0 wz
260cc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
260d0     01 12 06 51 |  if_ne	add	arg01, #1
260d4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
260d8     02 FA 05 51 |  if_ne	add	result1, #2
260dc                 | __system__emitsign_0500_ret
260dc     2D 00 64 FD | 	ret
260e0                 | 
260e0                 | __system___gettxfunc
260e0     01 4A 05 F6 | 	mov	COUNT_, #1
260e4     A8 00 A0 FD | 	call	#pushregs_
260e8     A0 F8 BF FD | 	call	#__system____getftab
260ec     FD 1E 0A F6 | 	mov	local01, result1 wz
260f0     10 00 90 AD |  if_e	jmp	#LR__3810
260f4     08 1E 06 F1 | 	add	local01, #8
260f8     0F 15 0A FB | 	rdlong	arg02, local01 wz
260fc     08 1E 86 F1 | 	sub	local01, #8
26100     08 00 90 5D |  if_ne	jmp	#LR__3811
26104                 | LR__3810
26104     00 FA 05 F6 | 	mov	result1, #0
26108     0C 00 90 FD | 	jmp	#LR__3812
2610c                 | LR__3811
2610c     00 98 04 FF 
26110     00 1E 46 F5 | 	or	local01, ##154140672
26114     0F FB 01 F6 | 	mov	result1, local01
26118                 | LR__3812
26118     A7 F0 03 F6 | 	mov	ptra, fp
2611c     B2 00 A0 FD | 	call	#popregs_
26120                 | __system___gettxfunc_ret
26120     2D 00 64 FD | 	ret
26124                 | 
26124                 | __system___getrxfunc
26124     01 4A 05 F6 | 	mov	COUNT_, #1
26128     A8 00 A0 FD | 	call	#pushregs_
2612c     5C F8 BF FD | 	call	#__system____getftab
26130     FD 1E 0A F6 | 	mov	local01, result1 wz
26134     10 00 90 AD |  if_e	jmp	#LR__3820
26138     08 1E 06 F1 | 	add	local01, #8
2613c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26140     08 1E 86 F1 | 	sub	local01, #8
26144     08 00 90 5D |  if_ne	jmp	#LR__3821
26148                 | LR__3820
26148     00 FA 05 F6 | 	mov	result1, #0
2614c     0C 00 90 FD | 	jmp	#LR__3822
26150                 | LR__3821
26150     00 A0 04 FF 
26154     00 1E 46 F5 | 	or	local01, ##155189248
26158     0F FB 01 F6 | 	mov	result1, local01
2615c                 | LR__3822
2615c     A7 F0 03 F6 | 	mov	ptra, fp
26160     B2 00 A0 FD | 	call	#popregs_
26164                 | __system___getrxfunc_ret
26164     2D 00 64 FD | 	ret
26168                 | 
26168                 | __system___getiolock_0540
26168     01 4A 05 F6 | 	mov	COUNT_, #1
2616c     A8 00 A0 FD | 	call	#pushregs_
26170     18 F8 BF FD | 	call	#__system____getftab
26174     FD 1E 0A F6 | 	mov	local01, result1 wz
26178     10 00 90 AD |  if_e	jmp	#LR__3830
2617c     08 1E 06 F1 | 	add	local01, #8
26180     0F FB 09 FB | 	rdlong	result1, local01 wz
26184     08 1E 86 F1 | 	sub	local01, #8
26188     18 00 90 5D |  if_ne	jmp	#LR__3831
2618c                 | LR__3830
2618c     01 00 00 FF 
26190     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26194     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26198     01 00 00 FF 
2619c     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
261a0     08 00 90 FD | 	jmp	#LR__3832
261a4                 | LR__3831
261a4     0C 1E 06 F1 | 	add	local01, #12
261a8     0F FB 01 F6 | 	mov	result1, local01
261ac                 | LR__3832
261ac     A7 F0 03 F6 | 	mov	ptra, fp
261b0     B2 00 A0 FD | 	call	#popregs_
261b4                 | __system___getiolock_0540_ret
261b4     2D 00 64 FD | 	ret
261b8                 | 
261b8                 | __system____ScanForChar
261b8     09 01 02 F6 | 	mov	_var01, arg01
261bc     09 03 02 F6 | 	mov	_var02, arg01
261c0     97 06 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
261c4                 | LR__3840
261c4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
261c8     01 02 06 51 |  if_ne	add	_var02, #1
261cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3840
261d0                 | LR__3841
261d0     09 03 82 F1 | 	sub	_var02, arg01
261d4     01 FB 01 F6 | 	mov	result1, _var02
261d8     FD 12 0A F6 | 	mov	arg01, result1 wz
261dc     00 FA 05 A6 |  if_e	mov	result1, #0
261e0     B8 00 90 AD |  if_e	jmp	#LR__3848
261e4     0A 05 02 F6 | 	mov	_var03, arg02
261e8     07 04 4E F7 | 	zerox	_var03, #7 wz
261ec     00 FA 05 A6 |  if_e	mov	result1, #0
261f0     A8 00 90 AD |  if_e	jmp	#LR__3848
261f4     01 16 16 F2 | 	cmp	arg03, #1 wc
261f8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
261fc     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26200     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26204     94 00 90 4D |  if_c_and_nz	jmp	#LR__3848
26208     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2620c     10 00 90 ED |  if_be	jmp	#LR__3842
26210     00 18 0E F2 | 	cmp	arg04, #0 wz
26214     00 FA 05 A6 |  if_e	mov	result1, #0
26218     80 00 90 AD |  if_e	jmp	#LR__3848
2621c     09 17 02 F6 | 	mov	arg03, arg01
26220                 | LR__3842
26220     01 16 86 F1 | 	sub	arg03, #1
26224     00 18 0E F2 | 	cmp	arg04, #0 wz
26228     38 00 90 5D |  if_ne	jmp	#LR__3844
2622c     0B 07 02 F6 | 	mov	_var04, arg03
26230     09 09 02 F6 | 	mov	_var05, arg01
26234                 | LR__3843
26234     04 07 12 F2 | 	cmp	_var04, _var05 wc
26238     5C 00 90 3D |  if_ae	jmp	#LR__3847
2623c     03 05 02 F6 | 	mov	_var03, _var04
26240     00 05 02 F1 | 	add	_var03, _var01
26244     02 05 C2 FA | 	rdbyte	_var03, _var03
26248     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2624c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26250     01 06 06 A1 |  if_e	add	_var04, #1
26254     03 FB 01 A6 |  if_e	mov	result1, _var04
26258     40 00 90 AD |  if_e	jmp	#LR__3848
2625c     01 06 06 F1 | 	add	_var04, #1
26260     D0 FF 9F FD | 	jmp	#LR__3843
26264                 | LR__3844
26264     0B 07 02 F6 | 	mov	_var04, arg03
26268                 | LR__3845
26268     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2626c     28 00 90 1D |  if_a	jmp	#LR__3846
26270     03 09 02 F6 | 	mov	_var05, _var04
26274     00 09 02 F1 | 	add	_var05, _var01
26278     04 05 C2 FA | 	rdbyte	_var03, _var05
2627c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26280     04 05 0A F2 | 	cmp	_var03, _var05 wz
26284     01 06 06 A1 |  if_e	add	_var04, #1
26288     03 FB 01 A6 |  if_e	mov	result1, _var04
2628c     0C 00 90 AD |  if_e	jmp	#LR__3848
26290     01 06 86 F1 | 	sub	_var04, #1
26294     D0 FF 9F FD | 	jmp	#LR__3845
26298                 | LR__3846
26298                 | LR__3847
26298     00 FA 05 F6 | 	mov	result1, #0
2629c                 | LR__3848
2629c                 | __system____ScanForChar_ret
2629c     2D 00 64 FD | 	ret
262a0                 | 
262a0                 | __system___basic_dir
262a0     05 4A 05 F6 | 	mov	COUNT_, #5
262a4     A8 00 A0 FD | 	call	#pushregs_
262a8     4C F0 07 F1 | 	add	ptra, #76
262ac     04 4E 05 F1 | 	add	fp, #4
262b0     A7 12 62 FC | 	wrlong	arg01, fp
262b4     04 4E 05 F1 | 	add	fp, #4
262b8     A7 14 62 FC | 	wrlong	arg02, fp
262bc     04 4E 85 F1 | 	sub	fp, #4
262c0     A7 14 0A FB | 	rdlong	arg02, fp wz
262c4     04 4E 85 F1 | 	sub	fp, #4
262c8     04 4E 05 51 |  if_ne	add	fp, #4
262cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
262d0     04 4E 85 51 |  if_ne	sub	fp, #4
262d4     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
262d8     70 00 90 AD |  if_e	jmp	#LR__3850
262dc     03 00 00 FF 
262e0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
262e4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
262e8     03 00 00 FF 
262ec     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
262f0     03 00 00 5F 
262f4     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
262f8     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
262fc     03 00 00 5F 
26300     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26304     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26308     7F 01 00 FF 
2630c     B8 13 06 F6 | 	mov	arg01, ##@LR__5018
26310     E0 E8 BF FD | 	call	#__system__opendir
26314     03 00 00 FF 
26318     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2631c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26320     08 4E 05 F1 | 	add	fp, #8
26324     A7 20 02 FB | 	rdlong	local02, fp
26328     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2632c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26330     04 4E 85 F1 | 	sub	fp, #4
26334     A7 20 02 FB | 	rdlong	local02, fp
26338     04 4E 85 F1 | 	sub	fp, #4
2633c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26340     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26344     03 00 00 FF 
26348     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2634c                 | LR__3850
2634c     03 00 00 FF 
26350     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26354     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26358     03 00 00 FF 
2635c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26360     7F 01 00 AF 
26364     BA FB 05 A6 |  if_e	mov	result1, ##@LR__5019
26368     84 02 90 AD |  if_e	jmp	#LR__3863
2636c                 | LR__3851
2636c     03 00 00 FF 
26370     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26374     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26378     03 00 00 FF 
2637c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26380     D0 E9 BF FD | 	call	#__system__readdir
26384     0C 4E 05 F1 | 	add	fp, #12
26388     A7 FA 61 FC | 	wrlong	result1, fp
2638c     0C 4E 85 F1 | 	sub	fp, #12
26390     00 FA 0D F2 | 	cmp	result1, #0 wz
26394     38 00 90 5D |  if_ne	jmp	#LR__3852
26398     03 00 00 FF 
2639c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
263a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
263a4     03 00 00 FF 
263a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
263ac     30 E9 BF FD | 	call	#__system__closedir
263b0     03 00 00 FF 
263b4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
263b8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
263bc     03 00 00 FF 
263c0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
263c4     7F 01 00 FF 
263c8     BC FB 05 F6 | 	mov	result1, ##@LR__5020
263cc     20 02 90 FD | 	jmp	#LR__3863
263d0                 | LR__3852
263d0     0C 4E 05 F1 | 	add	fp, #12
263d4     A7 12 02 FB | 	rdlong	arg01, fp
263d8     0C 4E 85 F1 | 	sub	fp, #12
263dc     03 00 00 FF 
263e0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
263e4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
263e8     03 00 00 FF 
263ec     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
263f0     10 09 B0 FD | 	call	#__system___pat_match
263f4     00 FA 0D F2 | 	cmp	result1, #0 wz
263f8     70 FF 9F AD |  if_e	jmp	#LR__3851
263fc     03 00 00 FF 
26400     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26404     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26408     03 00 00 FF 
2640c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26410     78 01 90 AD |  if_e	jmp	#LR__3859
26414     0C 4E 05 F1 | 	add	fp, #12
26418     A7 12 02 FB | 	rdlong	arg01, fp
2641c     04 4E 05 F1 | 	add	fp, #4
26420     A7 14 02 F6 | 	mov	arg02, fp
26424     10 4E 85 F1 | 	sub	fp, #16
26428     2C F2 BF FD | 	call	#__system__stat
2642c     40 4E 05 F1 | 	add	fp, #64
26430     A7 FA 61 FC | 	wrlong	result1, fp
26434     40 4E 85 F1 | 	sub	fp, #64
26438     00 FA 0D F2 | 	cmp	result1, #0 wz
2643c     7F 01 00 5F 
26440     BE FB 05 56 |  if_ne	mov	result1, ##@LR__5021
26444     A8 01 90 5D |  if_ne	jmp	#LR__3863
26448     18 4E 05 F1 | 	add	fp, #24
2644c     A7 20 02 FB | 	rdlong	local02, fp
26450     78 00 00 FF 
26454     00 20 06 F5 | 	and	local02, ##61440
26458     2C 4E 05 F1 | 	add	fp, #44
2645c     A7 20 62 FC | 	wrlong	local02, fp
26460     38 4E 85 F1 | 	sub	fp, #56
26464     A7 20 02 FB | 	rdlong	local02, fp
26468     0C 4E 85 F1 | 	sub	fp, #12
2646c     10 21 C2 FA | 	rdbyte	local02, local02
26470     2E 20 0E F2 | 	cmp	local02, #46 wz
26474     08 4E 05 A1 |  if_e	add	fp, #8
26478     A7 04 68 AC |  if_e	wrlong	#2, fp
2647c     08 4E C5 F3 | 	sumz	fp, #8
26480     A7 00 68 5C |  if_ne	wrlong	#0, fp
26484     08 4E 85 51 |  if_ne	sub	fp, #8
26488     44 4E 05 F1 | 	add	fp, #68
2648c     A7 20 02 FB | 	rdlong	local02, fp
26490     44 4E 85 F1 | 	sub	fp, #68
26494     08 00 00 FF 
26498     00 20 0E F2 | 	cmp	local02, ##4096 wz
2649c     18 00 90 5D |  if_ne	jmp	#LR__3853
264a0     08 4E 05 F1 | 	add	fp, #8
264a4     A7 20 02 FB | 	rdlong	local02, fp
264a8     10 20 46 F5 | 	or	local02, #16
264ac     A7 20 62 FC | 	wrlong	local02, fp
264b0     08 4E 85 F1 | 	sub	fp, #8
264b4     AC 00 90 FD | 	jmp	#LR__3858
264b8                 | LR__3853
264b8     44 4E 05 F1 | 	add	fp, #68
264bc     A7 20 02 FB | 	rdlong	local02, fp
264c0     44 4E 85 F1 | 	sub	fp, #68
264c4     10 00 00 FF 
264c8     00 20 0E F2 | 	cmp	local02, ##8192 wz
264cc     44 4E 05 51 |  if_ne	add	fp, #68
264d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
264d4     44 4E 85 51 |  if_ne	sub	fp, #68
264d8     18 00 00 5F 
264dc     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
264e0     44 4E 05 51 |  if_ne	add	fp, #68
264e4     0F 23 02 56 |  if_ne	mov	local03, local01
264e8     44 4E 85 51 |  if_ne	sub	fp, #68
264ec     20 00 00 5F 
264f0     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
264f4     18 00 90 5D |  if_ne	jmp	#LR__3854
264f8     08 4E 05 F1 | 	add	fp, #8
264fc     A7 20 02 FB | 	rdlong	local02, fp
26500     04 20 46 F5 | 	or	local02, #4
26504     A7 20 62 FC | 	wrlong	local02, fp
26508     08 4E 85 F1 | 	sub	fp, #8
2650c     54 00 90 FD | 	jmp	#LR__3857
26510                 | LR__3854
26510     18 4E 05 F1 | 	add	fp, #24
26514     A7 20 02 FB | 	rdlong	local02, fp
26518     18 4E 85 F1 | 	sub	fp, #24
2651c     92 20 CE F7 | 	test	local02, #146 wz
26520     18 00 90 5D |  if_ne	jmp	#LR__3855
26524     08 4E 05 F1 | 	add	fp, #8
26528     A7 20 02 FB | 	rdlong	local02, fp
2652c     01 20 46 F5 | 	or	local02, #1
26530     A7 20 62 FC | 	wrlong	local02, fp
26534     08 4E 85 F1 | 	sub	fp, #8
26538     28 00 90 FD | 	jmp	#LR__3856
2653c                 | LR__3855
2653c     44 4E 05 F1 | 	add	fp, #68
26540     A7 24 02 FB | 	rdlong	local04, fp
26544     44 4E 85 F1 | 	sub	fp, #68
26548     08 00 00 FF 
2654c     00 24 0E F2 | 	cmp	local04, ##4096 wz
26550     08 4E 05 51 |  if_ne	add	fp, #8
26554     A7 24 02 5B |  if_ne	rdlong	local04, fp
26558     20 24 46 55 |  if_ne	or	local04, #32
2655c     A7 24 62 5C |  if_ne	wrlong	local04, fp
26560     08 4E 85 51 |  if_ne	sub	fp, #8
26564                 | LR__3856
26564                 | LR__3857
26564                 | LR__3858
26564     08 4E 05 F1 | 	add	fp, #8
26568     A7 24 02 FB | 	rdlong	local04, fp
2656c     08 4E 85 F1 | 	sub	fp, #8
26570     03 00 00 FF 
26574     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26578     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
2657c     03 00 00 FF 
26580     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26584     0F 25 CA F7 | 	test	local04, local01 wz
26588     E0 FD 9F AD |  if_e	jmp	#LR__3851
2658c                 | LR__3859
2658c     0C 4E 05 F1 | 	add	fp, #12
26590     A7 12 02 FB | 	rdlong	arg01, fp
26594     0C 4E 85 F1 | 	sub	fp, #12
26598     09 27 02 F6 | 	mov	local05, arg01
2659c     97 06 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
265a0                 | LR__3860
265a0     13 FB C9 FA | 	rdbyte	result1, local05 wz
265a4     01 26 06 51 |  if_ne	add	local05, #1
265a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
265ac                 | LR__3861
265ac     13 13 C2 F2 | 	subr	arg01, local05
265b0     01 12 06 F1 | 	add	arg01, #1
265b4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
265b8     48 4E 05 F1 | 	add	fp, #72
265bc     A7 FA 61 FC | 	wrlong	result1, fp
265c0     48 4E 85 F1 | 	sub	fp, #72
265c4     00 FA 0D F2 | 	cmp	result1, #0 wz
265c8     18 00 90 AD |  if_e	jmp	#LR__3862
265cc     48 4E 05 F1 | 	add	fp, #72
265d0     A7 12 02 FB | 	rdlong	arg01, fp
265d4     3C 4E 85 F1 | 	sub	fp, #60
265d8     A7 14 02 FB | 	rdlong	arg02, fp
265dc     0C 4E 85 F1 | 	sub	fp, #12
265e0     F8 A0 BF FD | 	call	#__system____builtin_strcpy
265e4                 | LR__3862
265e4     48 4E 05 F1 | 	add	fp, #72
265e8     A7 FA 01 FB | 	rdlong	result1, fp
265ec     48 4E 85 F1 | 	sub	fp, #72
265f0                 | LR__3863
265f0     A7 F0 03 F6 | 	mov	ptra, fp
265f4     B2 00 A0 FD | 	call	#popregs_
265f8                 | __system___basic_dir_ret
265f8     2D 00 64 FD | 	ret
265fc                 | 
265fc                 | __system__pack_0606
265fc     09 01 02 F6 | 	mov	_var01, arg01
26600     7F 16 06 F1 | 	add	arg03, #127
26604     04 18 CE F7 | 	test	arg04, #4 wz
26608     10 00 90 AD |  if_e	jmp	#LR__3870
2660c     00 00 0E F2 | 	cmp	_var01, #0 wz
26610     16 00 C6 A9 |  if_e	decod	_var01, #22
26614     F7 00 26 F4 | 	bith	_var01, #247
26618     B4 00 90 FD | 	jmp	#LR__3879
2661c                 | LR__3870
2661c     02 18 CE F7 | 	test	arg04, #2 wz
26620     00 C0 3F 5F 
26624     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26628     00 14 06 56 |  if_ne	mov	arg02, #0
2662c     A0 00 90 5D |  if_ne	jmp	#LR__3878
26630     08 18 CE F7 | 	test	arg04, #8 wz
26634     00 00 06 56 |  if_ne	mov	_var01, #0
26638     94 00 90 5D |  if_ne	jmp	#LR__3877
2663c     FF 16 56 F2 | 	cmps	arg03, #255 wc
26640     00 C0 3F 3F 
26644     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26648     00 14 06 36 |  if_ae	mov	arg02, #0
2664c     80 00 90 3D |  if_ae	jmp	#LR__3876
26650     01 16 56 F2 | 	cmps	arg03, #1 wc
26654     6C 00 90 3D |  if_ae	jmp	#LR__3874
26658     01 14 46 F0 | 	shr	arg02, #1
2665c     00 03 02 F6 | 	mov	_var02, _var01
26660     01 02 06 F5 | 	and	_var02, #1
26664     1F 02 66 F0 | 	shl	_var02, #31
26668     01 15 42 F5 | 	or	arg02, _var02
2666c     01 00 46 F0 | 	shr	_var01, #1
26670     97 1E 48 FB | 	callpa	#(@LR__3872-@LR__3871)>>2,fcache_load_ptr_
26674                 | LR__3871
26674     00 16 56 F2 | 	cmps	arg03, #0 wc
26678     34 00 90 3D |  if_ae	jmp	#LR__3873
2667c     00 00 0E F2 | 	cmp	_var01, #0 wz
26680     2C 00 90 AD |  if_e	jmp	#LR__3873
26684     0A 13 02 F6 | 	mov	arg01, arg02
26688     01 12 06 F5 | 	and	arg01, #1
2668c     01 16 06 F1 | 	add	arg03, #1
26690     01 14 46 F0 | 	shr	arg02, #1
26694     00 03 02 F6 | 	mov	_var02, _var01
26698     01 02 06 F5 | 	and	_var02, #1
2669c     1F 02 66 F0 | 	shl	_var02, #31
266a0     01 15 42 F5 | 	or	arg02, _var02
266a4     09 15 42 F5 | 	or	arg02, arg01
266a8     01 00 46 F0 | 	shr	_var01, #1
266ac     C4 FF 9F FD | 	jmp	#LR__3871
266b0                 | LR__3872
266b0                 | LR__3873
266b0     00 16 56 F2 | 	cmps	arg03, #0 wc
266b4     18 00 90 3D |  if_ae	jmp	#LR__3875
266b8     00 14 0E F2 | 	cmp	arg02, #0 wz
266bc     6F 14 62 FD | 	wrnz	arg02
266c0     0C 00 90 FD | 	jmp	#LR__3875
266c4                 | LR__3874
266c4     17 01 06 F4 | 	bitl	_var01, #279
266c8     17 16 66 F0 | 	shl	arg03, #23
266cc     0B 01 42 F5 | 	or	_var01, arg03
266d0                 | LR__3875
266d0                 | LR__3876
266d0                 | LR__3877
266d0                 | LR__3878
266d0                 | LR__3879
266d0     01 00 CE F7 | 	test	_var01, #1 wz
266d4     01 14 46 55 |  if_ne	or	arg02, #1
266d8     0A 17 02 F6 | 	mov	arg03, arg02
266dc     00 02 06 F6 | 	mov	_var02, #0
266e0     FF FF 3F FF 
266e4     FF 15 06 F1 | 	add	arg02, ##2147483647
266e8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
266ec     01 02 06 C6 |  if_b	mov	_var02, #1
266f0     01 01 02 F1 | 	add	_var01, _var02
266f4     01 18 CE F7 | 	test	arg04, #1 wz
266f8     1F 00 26 54 |  if_ne	bith	_var01, #31
266fc     00 FB 01 F6 | 	mov	result1, _var01
26700                 | __system__pack_0606_ret
26700     2D 00 64 FD | 	ret
26704                 | 
26704                 | __system___rxtxioctl_0696
26704     00 15 0E F2 | 	cmp	arg02, #256 wz
26708     0C 00 90 AD |  if_e	jmp	#LR__3880
2670c     01 15 0E F2 | 	cmp	arg02, #257 wz
26710     1C 00 90 AD |  if_e	jmp	#LR__3881
26714     30 00 90 FD | 	jmp	#LR__3882
26718                 | LR__3880
26718     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2671c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26720     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26724     0B FB 61 FC | 	wrlong	result1, arg03
26728     00 FA 05 F6 | 	mov	result1, #0
2672c     28 00 90 FD | 	jmp	#LR__3883
26730                 | LR__3881
26730     0B 13 02 FB | 	rdlong	arg01, arg03
26734     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26738     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2673c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26740     00 FA 05 F6 | 	mov	result1, #0
26744     10 00 90 FD | 	jmp	#LR__3883
26748                 | LR__3882
26748     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2674c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26750     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26754     01 FA 65 F6 | 	neg	result1, #1
26758                 | LR__3883
26758                 | __system___rxtxioctl_0696_ret
26758     2D 00 64 FD | 	ret
2675c                 | 
2675c                 | __system____dummy_flush_0697
2675c     00 FA 05 F6 | 	mov	result1, #0
26760                 | __system____dummy_flush_0697_ret
26760     2D 00 64 FD | 	ret
26764                 | 
26764                 | __system___vfswrite
26764     09 4A 05 F6 | 	mov	COUNT_, #9
26768     A8 00 A0 FD | 	call	#pushregs_
2676c     09 1F 02 F6 | 	mov	local01, arg01
26770     0A 21 02 F6 | 	mov	local02, arg02
26774     0B 23 02 F6 | 	mov	local03, arg03
26778     10 25 02 F6 | 	mov	local04, local02
2677c     08 1E 06 F1 | 	add	local01, #8
26780     0F 13 02 FB | 	rdlong	arg01, local01
26784     08 1E 86 F1 | 	sub	local01, #8
26788     02 12 CE F7 | 	test	arg01, #2 wz
2678c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26790     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26794     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26798     01 FA 65 A6 |  if_e	neg	result1, #1
2679c     80 01 90 AD |  if_e	jmp	#LR__3896
267a0     08 1E 06 F1 | 	add	local01, #8
267a4     0F FB 01 FB | 	rdlong	result1, local01
267a8     08 1E 86 F1 | 	sub	local01, #8
267ac     40 FA CD F7 | 	test	result1, #64 wz
267b0     68 00 90 AD |  if_e	jmp	#LR__3891
267b4     08 1E 06 F1 | 	add	local01, #8
267b8     0F 15 02 FB | 	rdlong	arg02, local01
267bc     08 1E 86 F1 | 	sub	local01, #8
267c0     80 14 CE F7 | 	test	arg02, #128 wz
267c4     54 00 90 AD |  if_e	jmp	#LR__3890
267c8     30 1E 06 F1 | 	add	local01, #48
267cc     0F 27 02 FB | 	rdlong	local05, local01
267d0     13 29 02 F6 | 	mov	local06, local05
267d4     30 1E 86 F1 | 	sub	local01, #48
267d8     13 28 46 F7 | 	zerox	local06, #19
267dc     14 26 46 F0 | 	shr	local05, #20
267e0     02 26 66 F0 | 	shl	local05, #2
267e4     ED 26 02 F1 | 	add	local05, __methods__
267e8     13 27 02 FB | 	rdlong	local05, local05
267ec     0F 13 02 F6 | 	mov	arg01, local01
267f0     00 14 06 F6 | 	mov	arg02, #0
267f4     02 16 06 F6 | 	mov	arg03, #2
267f8     F2 2A 02 F6 | 	mov	local07, objptr
267fc     14 E5 01 F6 | 	mov	objptr, local06
26800     2D 26 62 FD | 	call	local05
26804     15 E5 01 F6 | 	mov	objptr, local07
26808     08 1E 06 F1 | 	add	local01, #8
2680c     0F 2B 02 FB | 	rdlong	local07, local01
26810     80 2A 26 F5 | 	andn	local07, #128
26814     0F 2B 62 FC | 	wrlong	local07, local01
26818     08 1E 86 F1 | 	sub	local01, #8
2681c                 | LR__3890
2681c                 | LR__3891
2681c     18 1E 06 F1 | 	add	local01, #24
26820     0F 2B 0A FB | 	rdlong	local07, local01 wz
26824     18 1E 86 F1 | 	sub	local01, #24
26828     80 00 90 AD |  if_e	jmp	#LR__3893
2682c     18 1E 06 F1 | 	add	local01, #24
26830     0F 27 02 FB | 	rdlong	local05, local01
26834     13 29 02 F6 | 	mov	local06, local05
26838     18 1E 86 F1 | 	sub	local01, #24
2683c     13 28 46 F7 | 	zerox	local06, #19
26840     14 26 46 F0 | 	shr	local05, #20
26844     02 26 66 F0 | 	shl	local05, #2
26848     ED 26 02 F1 | 	add	local05, __methods__
2684c     13 27 02 FB | 	rdlong	local05, local05
26850     10 15 02 F6 | 	mov	arg02, local02
26854     11 17 02 F6 | 	mov	arg03, local03
26858     0F 13 02 F6 | 	mov	arg01, local01
2685c     F2 2A 02 F6 | 	mov	local07, objptr
26860     14 E5 01 F6 | 	mov	objptr, local06
26864     2D 26 62 FD | 	call	local05
26868     15 E5 01 F6 | 	mov	objptr, local07
2686c     FD 2C 02 F6 | 	mov	local08, result1
26870     00 2C 56 F2 | 	cmps	local08, #0 wc
26874     2C 00 90 3D |  if_ae	jmp	#LR__3892
26878     08 1E 06 F1 | 	add	local01, #8
2687c     0F 2B 02 FB | 	rdlong	local07, local01
26880     20 2A 46 F5 | 	or	local07, #32
26884     0F 2B 62 FC | 	wrlong	local07, local01
26888     00 2C 4E F2 | 	cmps	local08, #0 wz
2688c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26890     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26894     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26898     01 FA 65 56 |  if_ne	neg	result1, #1
2689c     00 FA 05 A6 |  if_e	mov	result1, #0
268a0     7C 00 90 FD | 	jmp	#LR__3896
268a4                 | LR__3892
268a4     16 FB 01 F6 | 	mov	result1, local08
268a8     74 00 90 FD | 	jmp	#LR__3896
268ac                 | LR__3893
268ac     1C 1E 06 F1 | 	add	local01, #28
268b0     0F 2F 0A FB | 	rdlong	local09, local01 wz
268b4     1C 1E 86 F1 | 	sub	local01, #28
268b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268bc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
268c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268c4     01 FA 65 A6 |  if_e	neg	result1, #1
268c8     54 00 90 AD |  if_e	jmp	#LR__3896
268cc     00 2C 06 F6 | 	mov	local08, #0
268d0                 | LR__3894
268d0     01 22 16 F2 | 	cmp	local03, #1 wc
268d4     44 00 90 CD |  if_b	jmp	#LR__3895
268d8     17 29 02 F6 | 	mov	local06, local09
268dc     17 27 02 F6 | 	mov	local05, local09
268e0     13 28 46 F7 | 	zerox	local06, #19
268e4     14 26 46 F0 | 	shr	local05, #20
268e8     02 26 66 F0 | 	shl	local05, #2
268ec     ED 26 02 F1 | 	add	local05, __methods__
268f0     13 27 02 FB | 	rdlong	local05, local05
268f4     12 13 C2 FA | 	rdbyte	arg01, local04
268f8     0F 15 02 F6 | 	mov	arg02, local01
268fc     F2 2A 02 F6 | 	mov	local07, objptr
26900     14 E5 01 F6 | 	mov	objptr, local06
26904     01 24 06 F1 | 	add	local04, #1
26908     2D 26 62 FD | 	call	local05
2690c     15 E5 01 F6 | 	mov	objptr, local07
26910     FD 2C 02 F1 | 	add	local08, result1
26914     01 22 86 F1 | 	sub	local03, #1
26918     B4 FF 9F FD | 	jmp	#LR__3894
2691c                 | LR__3895
2691c     16 FB 01 F6 | 	mov	result1, local08
26920                 | LR__3896
26920     A7 F0 03 F6 | 	mov	ptra, fp
26924     B2 00 A0 FD | 	call	#popregs_
26928                 | __system___vfswrite_ret
26928     2D 00 64 FD | 	ret
2692c                 | 
2692c                 | __system___vfsread
2692c     03 4A 05 F6 | 	mov	COUNT_, #3
26930     A8 00 A0 FD | 	call	#pushregs_
26934     28 F0 07 F1 | 	add	ptra, #40
26938     04 4E 05 F1 | 	add	fp, #4
2693c     A7 12 62 FC | 	wrlong	arg01, fp
26940     04 4E 05 F1 | 	add	fp, #4
26944     A7 14 62 FC | 	wrlong	arg02, fp
26948     04 4E 05 F1 | 	add	fp, #4
2694c     A7 16 62 FC | 	wrlong	arg03, fp
26950     04 4E 85 F1 | 	sub	fp, #4
26954     A7 FA 01 FB | 	rdlong	result1, fp
26958     14 4E 05 F1 | 	add	fp, #20
2695c     A7 FA 61 FC | 	wrlong	result1, fp
26960     04 4E 05 F1 | 	add	fp, #4
26964     A7 00 68 FC | 	wrlong	#0, fp
26968     1C 4E 85 F1 | 	sub	fp, #28
2696c     A7 12 02 FB | 	rdlong	arg01, fp
26970     04 4E 85 F1 | 	sub	fp, #4
26974     08 12 06 F1 | 	add	arg01, #8
26978     09 FB 01 FB | 	rdlong	result1, arg01
2697c     01 FA CD F7 | 	test	result1, #1 wz
26980     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26984     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26988     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2698c     01 FA 65 A6 |  if_e	neg	result1, #1
26990     74 02 90 AD |  if_e	jmp	#LR__3906
26994     04 4E 05 F1 | 	add	fp, #4
26998     A7 12 02 FB | 	rdlong	arg01, fp
2699c     04 4E 85 F1 | 	sub	fp, #4
269a0     14 12 06 F1 | 	add	arg01, #20
269a4     09 FB 09 FB | 	rdlong	result1, arg01 wz
269a8     B8 00 90 AD |  if_e	jmp	#LR__3901
269ac     04 4E 05 F1 | 	add	fp, #4
269b0     A7 12 02 FB | 	rdlong	arg01, fp
269b4     09 17 02 F6 | 	mov	arg03, arg01
269b8     14 16 06 F1 | 	add	arg03, #20
269bc     0B 1F 02 FB | 	rdlong	local01, arg03
269c0     0F 21 02 F6 | 	mov	local02, local01
269c4     13 1E 46 F7 | 	zerox	local01, #19
269c8     14 20 46 F0 | 	shr	local02, #20
269cc     02 20 66 F0 | 	shl	local02, #2
269d0     ED 20 02 F1 | 	add	local02, __methods__
269d4     10 21 02 FB | 	rdlong	local02, local02
269d8     04 4E 05 F1 | 	add	fp, #4
269dc     A7 14 02 FB | 	rdlong	arg02, fp
269e0     04 4E 05 F1 | 	add	fp, #4
269e4     A7 16 02 FB | 	rdlong	arg03, fp
269e8     0C 4E 85 F1 | 	sub	fp, #12
269ec     F2 22 02 F6 | 	mov	local03, objptr
269f0     0F E5 01 F6 | 	mov	objptr, local01
269f4     2D 20 62 FD | 	call	local02
269f8     11 E5 01 F6 | 	mov	objptr, local03
269fc     10 4E 05 F1 | 	add	fp, #16
26a00     A7 FA 61 FC | 	wrlong	result1, fp
26a04     10 4E 85 F1 | 	sub	fp, #16
26a08     00 FA 55 F2 | 	cmps	result1, #0 wc
26a0c     44 00 90 3D |  if_ae	jmp	#LR__3900
26a10     04 4E 05 F1 | 	add	fp, #4
26a14     A7 22 02 FB | 	rdlong	local03, fp
26a18     11 1F 02 F6 | 	mov	local01, local03
26a1c     08 22 06 F1 | 	add	local03, #8
26a20     11 21 02 FB | 	rdlong	local02, local03
26a24     20 20 46 F5 | 	or	local02, #32
26a28     08 1E 06 F1 | 	add	local01, #8
26a2c     0F 21 62 FC | 	wrlong	local02, local01
26a30     0C 4E 05 F1 | 	add	fp, #12
26a34     A7 12 0A FB | 	rdlong	arg01, fp wz
26a38     10 4E 85 F1 | 	sub	fp, #16
26a3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a40     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26a44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26a48     01 FA 65 56 |  if_ne	neg	result1, #1
26a4c     00 FA 05 A6 |  if_e	mov	result1, #0
26a50     B4 01 90 FD | 	jmp	#LR__3906
26a54                 | LR__3900
26a54     10 4E 05 F1 | 	add	fp, #16
26a58     A7 FA 01 FB | 	rdlong	result1, fp
26a5c     10 4E 85 F1 | 	sub	fp, #16
26a60     A4 01 90 FD | 	jmp	#LR__3906
26a64                 | LR__3901
26a64     04 4E 05 F1 | 	add	fp, #4
26a68     A7 12 02 FB | 	rdlong	arg01, fp
26a6c     20 12 06 F1 | 	add	arg01, #32
26a70     09 13 0A FB | 	rdlong	arg01, arg01 wz
26a74     14 4E 05 F1 | 	add	fp, #20
26a78     A7 12 62 FC | 	wrlong	arg01, fp
26a7c     18 4E 85 F1 | 	sub	fp, #24
26a80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26a84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26a88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a8c     01 FA 65 A6 |  if_e	neg	result1, #1
26a90     74 01 90 AD |  if_e	jmp	#LR__3906
26a94     04 4E 05 F1 | 	add	fp, #4
26a98     A7 22 02 FB | 	rdlong	local03, fp
26a9c     04 4E 85 F1 | 	sub	fp, #4
26aa0     28 22 06 F1 | 	add	local03, #40
26aa4     11 21 0A FB | 	rdlong	local02, local03 wz
26aa8     7C 00 90 AD |  if_e	jmp	#LR__3903
26aac     04 4E 05 F1 | 	add	fp, #4
26ab0     A7 12 02 FB | 	rdlong	arg01, fp
26ab4     09 23 02 F6 | 	mov	local03, arg01
26ab8     28 22 06 F1 | 	add	local03, #40
26abc     11 1F 02 FB | 	rdlong	local01, local03
26ac0     0F 21 02 F6 | 	mov	local02, local01
26ac4     13 1E 46 F7 | 	zerox	local01, #19
26ac8     14 20 46 F0 | 	shr	local02, #20
26acc     02 20 66 F0 | 	shl	local02, #2
26ad0     ED 20 02 F1 | 	add	local02, __methods__
26ad4     10 21 02 FB | 	rdlong	local02, local02
26ad8     20 4E 05 F1 | 	add	fp, #32
26adc     A7 16 02 F6 | 	mov	arg03, fp
26ae0     24 4E 85 F1 | 	sub	fp, #36
26ae4     00 15 06 F6 | 	mov	arg02, #256
26ae8     F2 22 02 F6 | 	mov	local03, objptr
26aec     0F E5 01 F6 | 	mov	objptr, local01
26af0     2D 20 62 FD | 	call	local02
26af4     11 E5 01 F6 | 	mov	objptr, local03
26af8     10 4E 05 F1 | 	add	fp, #16
26afc     A7 FA 61 FC | 	wrlong	result1, fp
26b00     00 FA 4D F2 | 	cmps	result1, #0 wz
26b04     10 4E 85 F1 | 	sub	fp, #16
26b08     1C 00 90 5D |  if_ne	jmp	#LR__3902
26b0c     24 4E 05 F1 | 	add	fp, #36
26b10     A7 20 02 FB | 	rdlong	local02, fp
26b14     24 4E 85 F1 | 	sub	fp, #36
26b18     02 20 CE F7 | 	test	local02, #2 wz
26b1c     20 4E 05 51 |  if_ne	add	fp, #32
26b20     A7 02 68 5C |  if_ne	wrlong	#1, fp
26b24     20 4E 85 51 |  if_ne	sub	fp, #32
26b28                 | LR__3902
26b28                 | LR__3903
26b28     10 4E 05 F1 | 	add	fp, #16
26b2c     A7 00 68 FC | 	wrlong	#0, fp
26b30     10 4E 85 F1 | 	sub	fp, #16
26b34                 | LR__3904
26b34     0C 4E 05 F1 | 	add	fp, #12
26b38     A7 22 02 FB | 	rdlong	local03, fp
26b3c     0C 4E 85 F1 | 	sub	fp, #12
26b40     01 22 16 F2 | 	cmp	local03, #1 wc
26b44     B4 00 90 CD |  if_b	jmp	#LR__3905
26b48     18 4E 05 F1 | 	add	fp, #24
26b4c     A7 20 02 FB | 	rdlong	local02, fp
26b50     10 23 02 F6 | 	mov	local03, local02
26b54     13 22 46 F7 | 	zerox	local03, #19
26b58     14 20 46 F0 | 	shr	local02, #20
26b5c     02 20 66 F0 | 	shl	local02, #2
26b60     ED 20 02 F1 | 	add	local02, __methods__
26b64     10 21 02 FB | 	rdlong	local02, local02
26b68     14 4E 85 F1 | 	sub	fp, #20
26b6c     A7 12 02 FB | 	rdlong	arg01, fp
26b70     04 4E 85 F1 | 	sub	fp, #4
26b74     F2 1E 02 F6 | 	mov	local01, objptr
26b78     11 E5 01 F6 | 	mov	objptr, local03
26b7c     2D 20 62 FD | 	call	local02
26b80     0F E5 01 F6 | 	mov	objptr, local01
26b84     14 4E 05 F1 | 	add	fp, #20
26b88     A7 FA 61 FC | 	wrlong	result1, fp
26b8c     14 4E 85 F1 | 	sub	fp, #20
26b90     00 FA 55 F2 | 	cmps	result1, #0 wc
26b94     64 00 90 CD |  if_b	jmp	#LR__3905
26b98     1C 4E 05 F1 | 	add	fp, #28
26b9c     A7 22 02 FB | 	rdlong	local03, fp
26ba0     11 21 02 F6 | 	mov	local02, local03
26ba4     01 20 06 F1 | 	add	local02, #1
26ba8     A7 20 62 FC | 	wrlong	local02, fp
26bac     08 4E 85 F1 | 	sub	fp, #8
26bb0     A7 20 02 FB | 	rdlong	local02, fp
26bb4     11 21 42 FC | 	wrbyte	local02, local03
26bb8     04 4E 85 F1 | 	sub	fp, #4
26bbc     A7 22 02 FB | 	rdlong	local03, fp
26bc0     01 22 06 F1 | 	add	local03, #1
26bc4     A7 22 62 FC | 	wrlong	local03, fp
26bc8     04 4E 85 F1 | 	sub	fp, #4
26bcc     A7 22 02 FB | 	rdlong	local03, fp
26bd0     01 22 86 F1 | 	sub	local03, #1
26bd4     A7 22 62 FC | 	wrlong	local03, fp
26bd8     14 4E 05 F1 | 	add	fp, #20
26bdc     A7 22 0A FB | 	rdlong	local03, fp wz
26be0     20 4E 85 F1 | 	sub	fp, #32
26be4     4C FF 9F AD |  if_e	jmp	#LR__3904
26be8     14 4E 05 F1 | 	add	fp, #20
26bec     A7 20 02 FB | 	rdlong	local02, fp
26bf0     14 4E 85 F1 | 	sub	fp, #20
26bf4     0A 20 0E F2 | 	cmp	local02, #10 wz
26bf8     38 FF 9F 5D |  if_ne	jmp	#LR__3904
26bfc                 | LR__3905
26bfc     10 4E 05 F1 | 	add	fp, #16
26c00     A7 FA 01 FB | 	rdlong	result1, fp
26c04     10 4E 85 F1 | 	sub	fp, #16
26c08                 | LR__3906
26c08     A7 F0 03 F6 | 	mov	ptra, fp
26c0c     B2 00 A0 FD | 	call	#popregs_
26c10                 | __system___vfsread_ret
26c10     2D 00 64 FD | 	ret
26c14                 | 
26c14                 | __system____default_filbuf
26c14     04 4A 05 F6 | 	mov	COUNT_, #4
26c18     A8 00 A0 FD | 	call	#pushregs_
26c1c     09 1F 02 F6 | 	mov	local01, arg01
26c20     0F 21 02 FB | 	rdlong	local02, local01
26c24     0C 20 06 F1 | 	add	local02, #12
26c28     10 FB 09 FB | 	rdlong	result1, local02 wz
26c2c     0C 20 86 F1 | 	sub	local02, #12
26c30     20 00 90 5D |  if_ne	jmp	#LR__3910
26c34     14 20 06 F1 | 	add	local02, #20
26c38     10 FB 01 F6 | 	mov	result1, local02
26c3c     04 20 86 F1 | 	sub	local02, #4
26c40     10 FB 61 FC | 	wrlong	result1, local02
26c44     04 20 86 F1 | 	sub	local02, #4
26c48     02 00 80 FF 
26c4c     10 01 68 FC | 	wrlong	##1024, local02
26c50     0C 20 86 F1 | 	sub	local02, #12
26c54                 | LR__3910
26c54     14 1E 06 F1 | 	add	local01, #20
26c58     0F 23 02 FB | 	rdlong	local03, local01
26c5c     11 25 02 F6 | 	mov	local04, local03
26c60     14 1E 86 F1 | 	sub	local01, #20
26c64     13 24 46 F7 | 	zerox	local04, #19
26c68     14 22 46 F0 | 	shr	local03, #20
26c6c     02 22 66 F0 | 	shl	local03, #2
26c70     ED 22 02 F1 | 	add	local03, __methods__
26c74     11 23 02 FB | 	rdlong	local03, local03
26c78     10 20 06 F1 | 	add	local02, #16
26c7c     10 15 02 FB | 	rdlong	arg02, local02
26c80     04 20 86 F1 | 	sub	local02, #4
26c84     10 17 02 FB | 	rdlong	arg03, local02
26c88     0C 20 86 F1 | 	sub	local02, #12
26c8c     0F 13 02 F6 | 	mov	arg01, local01
26c90     F2 1E 02 F6 | 	mov	local01, objptr
26c94     12 E5 01 F6 | 	mov	objptr, local04
26c98     2D 22 62 FD | 	call	local03
26c9c     0F E5 01 F6 | 	mov	objptr, local01
26ca0     FD 24 02 F6 | 	mov	local04, result1
26ca4     00 24 56 F2 | 	cmps	local04, #0 wc
26ca8     01 FA 65 C6 |  if_b	neg	result1, #1
26cac     28 00 90 CD |  if_b	jmp	#LR__3911
26cb0     10 25 62 FC | 	wrlong	local04, local02
26cb4     10 20 06 F1 | 	add	local02, #16
26cb8     10 23 02 FB | 	rdlong	local03, local02
26cbc     0C 20 86 F1 | 	sub	local02, #12
26cc0     10 23 62 FC | 	wrlong	local03, local02
26cc4     04 20 06 F1 | 	add	local02, #4
26cc8     10 23 02 FB | 	rdlong	local03, local02
26ccc     01 22 46 F5 | 	or	local03, #1
26cd0     10 23 62 FC | 	wrlong	local03, local02
26cd4     12 FB 01 F6 | 	mov	result1, local04
26cd8                 | LR__3911
26cd8     A7 F0 03 F6 | 	mov	ptra, fp
26cdc     B2 00 A0 FD | 	call	#popregs_
26ce0                 | __system____default_filbuf_ret
26ce0     2D 00 64 FD | 	ret
26ce4                 | 
26ce4                 | __system__getlower_1082
26ce4     41 12 56 F2 | 	cmps	arg01, #65 wc
26ce8     10 00 90 CD |  if_b	jmp	#LR__3920
26cec     5B 12 56 F2 | 	cmps	arg01, #91 wc
26cf0     09 FB 01 C6 |  if_b	mov	result1, arg01
26cf4     20 FA 05 C1 |  if_b	add	result1, #32
26cf8     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
26cfc                 | LR__3920
26cfc     09 FB 01 F6 | 	mov	result1, arg01
26d00                 | __system__getlower_1082_ret
26d00     2D 00 64 FD | 	ret
26d04                 | 
26d04                 | __system___pat_match
26d04     08 4A 05 F6 | 	mov	COUNT_, #8
26d08     A8 00 A0 FD | 	call	#pushregs_
26d0c     09 1F 02 F6 | 	mov	local01, arg01
26d10                 | LR__3930
26d10     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26d14     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26d18     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26d1c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26d20     2C 00 90 AD |  if_e	jmp	#LR__3931
26d24     0A 13 C2 FA | 	rdbyte	arg01, arg02
26d28     B8 FF BF FD | 	call	#__system__getlower_1082
26d2c     FD 22 02 F6 | 	mov	local03, result1
26d30     0F 13 C2 FA | 	rdbyte	arg01, local01
26d34     AC FF BF FD | 	call	#__system__getlower_1082
26d38     11 FB 09 F2 | 	cmp	result1, local03 wz
26d3c     00 FA 05 56 |  if_ne	mov	result1, #0
26d40     FC 00 90 5D |  if_ne	jmp	#LR__3939
26d44     01 1E 06 F1 | 	add	local01, #1
26d48     01 14 06 F1 | 	add	arg02, #1
26d4c     C0 FF 9F FD | 	jmp	#LR__3930
26d50                 | LR__3931
26d50     0A 23 C2 FA | 	rdbyte	local03, arg02
26d54     2A 22 0E F2 | 	cmp	local03, #42 wz
26d58     D4 00 90 5D |  if_ne	jmp	#LR__3938
26d5c     01 14 06 F1 | 	add	arg02, #1
26d60     0A 21 C2 FA | 	rdbyte	local02, arg02
26d64     01 14 86 F1 | 	sub	arg02, #1
26d68     2E 20 0E F2 | 	cmp	local02, #46 wz
26d6c     28 00 90 5D |  if_ne	jmp	#LR__3932
26d70     02 14 06 F1 | 	add	arg02, #2
26d74     0A 21 C2 FA | 	rdbyte	local02, arg02
26d78     02 14 86 F1 | 	sub	arg02, #2
26d7c     2A 20 0E F2 | 	cmp	local02, #42 wz
26d80     03 14 06 A1 |  if_e	add	arg02, #3
26d84     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26d88     03 14 86 A1 |  if_e	sub	arg02, #3
26d8c     12 27 0A A6 |  if_e	mov	local05, local04 wz
26d90     01 FA 05 A6 |  if_e	mov	result1, #1
26d94     A8 00 90 AD |  if_e	jmp	#LR__3939
26d98                 | LR__3932
26d98     01 14 06 F1 | 	add	arg02, #1
26d9c     00 28 06 F6 | 	mov	local06, #0
26da0     97 1E 48 FB | 	callpa	#(@LR__3935-@LR__3933)>>2,fcache_load_ptr_
26da4                 | LR__3933
26da4     14 2B 02 F6 | 	mov	local07, local06
26da8     0A 2B 02 F1 | 	add	local07, arg02
26dac     15 2B CA FA | 	rdbyte	local07, local07 wz
26db0     14 27 02 56 |  if_ne	mov	local05, local06
26db4     01 26 06 51 |  if_ne	add	local05, #1
26db8     13 29 02 56 |  if_ne	mov	local06, local05
26dbc     E4 FF 9F 5D |  if_ne	jmp	#LR__3933
26dc0     00 2C 06 F6 | 	mov	local08, #0
26dc4                 | LR__3934
26dc4     16 2B 02 F6 | 	mov	local07, local08
26dc8     0F 2B 02 F1 | 	add	local07, local01
26dcc     15 2B CA FA | 	rdbyte	local07, local07 wz
26dd0     16 27 02 56 |  if_ne	mov	local05, local08
26dd4     01 26 06 51 |  if_ne	add	local05, #1
26dd8     13 2D 02 56 |  if_ne	mov	local08, local05
26ddc     E4 FF 9F 5D |  if_ne	jmp	#LR__3934
26de0                 | LR__3935
26de0     14 2D 52 F2 | 	cmps	local08, local06 wc
26de4     00 FA 05 C6 |  if_b	mov	result1, #0
26de8     54 00 90 CD |  if_b	jmp	#LR__3939
26dec     16 21 02 F6 | 	mov	local02, local08
26df0     14 21 82 F1 | 	sub	local02, local06
26df4     10 1F 02 F1 | 	add	local01, local02
26df8                 | LR__3936
26df8     01 28 56 F2 | 	cmps	local06, #1 wc
26dfc     30 00 90 CD |  if_b	jmp	#LR__3937
26e00     0F 13 C2 FA | 	rdbyte	arg01, local01
26e04     DC FE BF FD | 	call	#__system__getlower_1082
26e08     FD 2C 02 F6 | 	mov	local08, result1
26e0c     0A 13 C2 FA | 	rdbyte	arg01, arg02
26e10     D0 FE BF FD | 	call	#__system__getlower_1082
26e14     FD 2C 0A F2 | 	cmp	local08, result1 wz
26e18     00 FA 05 56 |  if_ne	mov	result1, #0
26e1c     20 00 90 5D |  if_ne	jmp	#LR__3939
26e20     01 1E 06 F1 | 	add	local01, #1
26e24     01 14 06 F1 | 	add	arg02, #1
26e28     01 28 86 F1 | 	sub	local06, #1
26e2c     C8 FF 9F FD | 	jmp	#LR__3936
26e30                 | LR__3937
26e30                 | LR__3938
26e30     0A 2D CA FA | 	rdbyte	local08, arg02 wz
26e34     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
26e38     01 FA 05 A6 |  if_e	mov	result1, #1
26e3c     00 FA 05 56 |  if_ne	mov	result1, #0
26e40                 | LR__3939
26e40     A7 F0 03 F6 | 	mov	ptra, fp
26e44     B2 00 A0 FD | 	call	#popregs_
26e48                 | __system___pat_match_ret
26e48     2D 00 64 FD | 	ret
26e4c                 | 
26e4c                 | _fatfs_cc_ff_uni2oem
26e4c     00 00 06 F6 | 	mov	_var01, #0
26e50     80 12 16 F2 | 	cmp	arg01, #128 wc
26e54     09 01 02 C6 |  if_b	mov	_var01, arg01
26e58     58 00 90 CD |  if_b	jmp	#LR__3944
26e5c     80 00 00 FF 
26e60     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26e64     4C 00 90 3D |  if_ae	jmp	#LR__3943
26e68     0A FB 31 F9 | 	getword	result1, arg02, #0
26e6c     01 00 00 FF 
26e70     52 FB 0D F2 | 	cmp	result1, ##850 wz
26e74     3C 00 90 5D |  if_ne	jmp	#LR__3943
26e78                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
26e78     00 00 06 F6 | 	mov	_var01, #0
26e7c     97 14 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
26e80                 | LR__3940
26e80     00 FB 31 F9 | 	getword	result1, _var01, #0
26e84     80 FA 15 F2 | 	cmp	result1, #128 wc
26e88     1C 00 90 3D |  if_ae	jmp	#LR__3942
26e8c     00 FB 31 F9 | 	getword	result1, _var01, #0
26e90     01 FA 65 F0 | 	shl	result1, #1
26e94     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
26e98     FD FA E1 FA | 	rdword	result1, result1
26e9c     FD 12 0A F2 | 	cmp	arg01, result1 wz
26ea0     01 00 06 51 |  if_ne	add	_var01, #1
26ea4     D8 FF 9F 5D |  if_ne	jmp	#LR__3940
26ea8                 | LR__3941
26ea8                 | LR__3942
26ea8     00 01 32 F9 | 	getword	_var01, _var01, #0
26eac     80 00 06 F1 | 	add	_var01, #128
26eb0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
26eb4                 | LR__3943
26eb4                 | LR__3944
26eb4                 | ' 			c = (c + 0x80) & 0xFF;
26eb4                 | ' 		}
26eb4                 | ' 	}
26eb4                 | ' 
26eb4                 | ' 	return c;
26eb4     00 FB 01 F6 | 	mov	result1, _var01
26eb8                 | _fatfs_cc_ff_uni2oem_ret
26eb8     2D 00 64 FD | 	ret
26ebc                 | 
26ebc                 | _fatfs_cc_ff_oem2uni
26ebc     00 00 06 F6 | 	mov	_var01, #0
26ec0     09 FB 31 F9 | 	getword	result1, arg01, #0
26ec4     80 FA 15 F2 | 	cmp	result1, #128 wc
26ec8     09 01 02 C6 |  if_b	mov	_var01, arg01
26ecc     2C 00 90 CD |  if_b	jmp	#LR__3951
26ed0     0A 15 32 F9 | 	getword	arg02, arg02, #0
26ed4     01 00 00 FF 
26ed8     52 15 0E F2 | 	cmp	arg02, ##850 wz
26edc     1C 00 90 5D |  if_ne	jmp	#LR__3950
26ee0     09 FB 31 F9 | 	getword	result1, arg01, #0
26ee4     00 FB 15 F2 | 	cmp	result1, #256 wc
26ee8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
26eec     80 12 86 C1 |  if_b	sub	arg01, #128
26ef0     01 12 66 C0 |  if_b	shl	arg01, #1
26ef4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
26ef8     09 01 E2 CA |  if_b	rdword	_var01, arg01
26efc                 | LR__3950
26efc                 | LR__3951
26efc                 | ' 		}
26efc                 | ' 	}
26efc                 | ' 
26efc                 | ' 	return c;
26efc     00 FB 01 F6 | 	mov	result1, _var01
26f00                 | _fatfs_cc_ff_oem2uni_ret
26f00     2D 00 64 FD | 	ret
26f04                 | 
26f04                 | _fatfs_cc_ff_wtoupper
26f04     09 01 02 F6 | 	mov	_var01, arg01
26f08     80 00 00 FF 
26f0c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
26f10     60 01 90 3D |  if_ae	jmp	#LR__3973
26f14     00 03 02 F6 | 	mov	_var02, _var01
26f18     01 01 32 F9 | 	getword	_var01, _var02, #0
26f1c     08 00 00 FF 
26f20     00 00 16 F2 | 	cmp	_var01, ##4096 wc
26f24     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
26f28     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
26f2c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
26f30     01 00 00 3F 
26f34     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
26f38     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
26f3c     01 00 00 3F 
26f40     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
26f44     02 07 02 F6 | 	mov	_var04, _var03
26f48                 | ' 		uc = (WORD)uni;
26f48                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
26f48                 | ' 		for (;;) {
26f48                 | LR__3960
26f48     03 09 E2 FA | 	rdword	_var05, _var04
26f4c     04 05 02 F6 | 	mov	_var03, _var05
26f50     0F 04 4E F7 | 	zerox	_var03, #15 wz
26f54     02 06 06 F1 | 	add	_var04, #2
26f58     14 01 90 AD |  if_e	jmp	#LR__3972
26f5c     01 05 32 F9 | 	getword	_var03, _var02, #0
26f60     04 01 32 F9 | 	getword	_var01, _var05, #0
26f64     00 05 12 F2 | 	cmp	_var03, _var01 wc
26f68     04 01 90 CD |  if_b	jmp	#LR__3972
26f6c     03 0B E2 FA | 	rdword	_var06, _var04
26f70     05 0D 32 F9 | 	getword	_var07, _var06, #0
26f74     08 0C 46 F0 | 	shr	_var07, #8
26f78     05 0B 32 F9 | 	getword	_var06, _var06, #0
26f7c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
26f80     01 05 32 F9 | 	getword	_var03, _var02, #0
26f84     04 0F 32 F9 | 	getword	_var08, _var05, #0
26f88     05 01 32 F9 | 	getword	_var01, _var06, #0
26f8c     00 0F 02 F1 | 	add	_var08, _var01
26f90     07 05 52 F2 | 	cmps	_var03, _var08 wc
26f94     02 06 06 F1 | 	add	_var04, #2
26f98     C4 00 90 3D |  if_ae	jmp	#LR__3971
26f9c                 | ' 				switch (cmd) {
26f9c     06 11 32 F9 | 	getword	_var09, _var07, #0
26fa0     09 10 26 F3 | 	fle	_var09, #9
26fa4     30 10 62 FD | 	jmprel	_var09
26fa8                 | LR__3961
26fa8     24 00 90 FD | 	jmp	#LR__3962
26fac     3C 00 90 FD | 	jmp	#LR__3963
26fb0     54 00 90 FD | 	jmp	#LR__3964
26fb4     5C 00 90 FD | 	jmp	#LR__3965
26fb8     64 00 90 FD | 	jmp	#LR__3966
26fbc     6C 00 90 FD | 	jmp	#LR__3967
26fc0     74 00 90 FD | 	jmp	#LR__3968
26fc4     7C 00 90 FD | 	jmp	#LR__3969
26fc8     84 00 90 FD | 	jmp	#LR__3970
26fcc     A0 00 90 FD | 	jmp	#LR__3972
26fd0                 | LR__3962
26fd0     01 03 32 F9 | 	getword	_var02, _var02, #0
26fd4     04 09 32 F9 | 	getword	_var05, _var05, #0
26fd8     04 03 82 F1 | 	sub	_var02, _var05
26fdc     01 02 66 F0 | 	shl	_var02, #1
26fe0     03 03 02 F1 | 	add	_var02, _var04
26fe4     01 03 E2 FA | 	rdword	_var02, _var02
26fe8     84 00 90 FD | 	jmp	#LR__3972
26fec                 | LR__3963
26fec     01 05 32 F9 | 	getword	_var03, _var02, #0
26ff0     01 03 32 F9 | 	getword	_var02, _var02, #0
26ff4     04 09 32 F9 | 	getword	_var05, _var05, #0
26ff8     04 03 82 F1 | 	sub	_var02, _var05
26ffc     01 02 06 F5 | 	and	_var02, #1
27000     02 03 C2 F2 | 	subr	_var02, _var03
27004     68 00 90 FD | 	jmp	#LR__3972
27008                 | LR__3964
27008     01 03 32 F9 | 	getword	_var02, _var02, #0
2700c     10 02 86 F1 | 	sub	_var02, #16
27010     5C 00 90 FD | 	jmp	#LR__3972
27014                 | LR__3965
27014     01 03 32 F9 | 	getword	_var02, _var02, #0
27018     20 02 86 F1 | 	sub	_var02, #32
2701c     50 00 90 FD | 	jmp	#LR__3972
27020                 | LR__3966
27020     01 03 32 F9 | 	getword	_var02, _var02, #0
27024     30 02 86 F1 | 	sub	_var02, #48
27028     44 00 90 FD | 	jmp	#LR__3972
2702c                 | LR__3967
2702c     01 03 32 F9 | 	getword	_var02, _var02, #0
27030     1A 02 86 F1 | 	sub	_var02, #26
27034     38 00 90 FD | 	jmp	#LR__3972
27038                 | LR__3968
27038     01 03 32 F9 | 	getword	_var02, _var02, #0
2703c     08 02 06 F1 | 	add	_var02, #8
27040     2C 00 90 FD | 	jmp	#LR__3972
27044                 | LR__3969
27044     01 03 32 F9 | 	getword	_var02, _var02, #0
27048     50 02 86 F1 | 	sub	_var02, #80
2704c     20 00 90 FD | 	jmp	#LR__3972
27050                 | LR__3970
27050     01 03 32 F9 | 	getword	_var02, _var02, #0
27054     0E 00 00 FF 
27058     60 02 86 F1 | 	sub	_var02, ##7264
2705c                 | ' 				}
2705c                 | ' 				break;
2705c     10 00 90 FD | 	jmp	#LR__3972
27060                 | LR__3971
27060     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27064     02 0A 06 AA |  if_e	mul	_var06, #2
27068     05 07 02 A1 |  if_e	add	_var04, _var06
2706c     D8 FE 9F FD | 	jmp	#LR__3960
27070                 | LR__3972
27070     01 01 32 F9 | 	getword	_var01, _var02, #0
27074                 | LR__3973
27074                 | ' 		}
27074                 | ' 		uni = uc;
27074                 | ' 	}
27074                 | ' 
27074                 | ' 	return uni;
27074     00 FB 01 F6 | 	mov	result1, _var01
27078                 | _fatfs_cc_ff_wtoupper_ret
27078     2D 00 64 FD | 	ret
2707c                 | 
2707c                 | _fatfs_cc_strncpy
2707c     09 01 02 F6 | 	mov	_var01, arg01
27080     97 12 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
27084                 | ' 
27084                 | ' 	dscan = dst;
27084                 | ' 	sscan = src;
27084                 | ' 	count = n;
27084                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27084                 | LR__3980
27084     01 16 86 F1 | 	sub	arg03, #1
27088     00 16 56 F2 | 	cmps	arg03, #0 wc
2708c     18 00 90 CD |  if_b	jmp	#LR__3982
27090     0A FB C1 FA | 	rdbyte	result1, arg02
27094     00 FB 41 FC | 	wrbyte	result1, _var01
27098     01 14 06 F1 | 	add	arg02, #1
2709c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
270a0                 | ' 		continue;
270a0     01 00 06 F1 | 	add	_var01, #1
270a4     DC FF 9F 5D |  if_ne	jmp	#LR__3980
270a8                 | LR__3981
270a8                 | LR__3982
270a8     97 0C 48 FB | 	callpa	#(@LR__3984-@LR__3983)>>2,fcache_load_ptr_
270ac                 | ' 	while (--count >= 0)
270ac                 | LR__3983
270ac     01 16 86 F1 | 	sub	arg03, #1
270b0     00 16 56 F2 | 	cmps	arg03, #0 wc
270b4     00 03 02 36 |  if_ae	mov	_var02, _var01
270b8     01 00 06 31 |  if_ae	add	_var01, #1
270bc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
270c0     E8 FF 9F 3D |  if_ae	jmp	#LR__3983
270c4                 | LR__3984
270c4                 | ' 		*dscan++ = '\0';
270c4                 | ' 	return(dst);
270c4     09 FB 01 F6 | 	mov	result1, arg01
270c8                 | _fatfs_cc_strncpy_ret
270c8     2D 00 64 FD | 	ret
270cc                 | 
270cc                 | _fatfs_cc_memcmp
270cc                 | ' 	for (n = size; n > 0; n--)
270cc     00 16 0E F2 | 	cmp	arg03, #0 wz
270d0     28 00 90 AD |  if_e	jmp	#LR__3991
270d4                 | LR__3990
270d4     09 01 C2 FA | 	rdbyte	_var01, arg01
270d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
270dc     01 01 0A F2 | 	cmp	_var01, _var02 wz
270e0     01 12 06 A1 |  if_e	add	arg01, #1
270e4     01 14 06 A1 |  if_e	add	arg02, #1
270e8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
270e8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
270ec     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
270f0     01 FB 81 51 |  if_ne	sub	result1, _var02
270f4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
270f8     F6 17 6E FB | 	djnz	arg03, #LR__3990
270fc                 | LR__3991
270fc                 | ' 
270fc                 | ' 	return(0);
270fc     00 FA 05 F6 | 	mov	result1, #0
27100                 | _fatfs_cc_memcmp_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | _fatfs_cc_strncmp
27104     09 01 0A F6 | 	mov	_var01, arg01 wz
27108     14 00 90 5D |  if_ne	jmp	#LR__4000
2710c                 | ' 		return scan2 ? -1 : 0;
2710c     00 14 0E F2 | 	cmp	arg02, #0 wz
27110     01 02 66 56 |  if_ne	neg	_var02, #1
27114     00 02 06 A6 |  if_e	mov	_var02, #0
27118     01 FB 01 F6 | 	mov	result1, _var02
2711c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27120                 | LR__4000
27120     00 14 0E F2 | 	cmp	arg02, #0 wz
27124     01 FA 05 A6 |  if_e	mov	result1, #1
27128     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2712c     0B 05 02 F6 | 	mov	_var03, arg03
27130     97 16 48 FB | 	callpa	#(@LR__4002-@LR__4001)>>2,fcache_load_ptr_
27134                 | ' 	count = n;
27134                 | ' 	do {
27134                 | LR__4001
27134     00 07 C2 FA | 	rdbyte	_var04, _var01
27138     0A 09 02 F6 | 	mov	_var05, arg02
2713c     04 0B C2 FA | 	rdbyte	_var06, _var05
27140     01 04 86 F1 | 	sub	_var03, #1
27144     00 04 56 F2 | 	cmps	_var03, #0 wc
27148     01 00 06 F1 | 	add	_var01, #1
2714c     01 14 06 F1 | 	add	arg02, #1
27150     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27154     08 00 90 2D |  if_nc_and_z	jmp	#LR__4003
27158     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2715c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4001
27160                 | LR__4002
27160                 | LR__4003
27160     00 04 56 F2 | 	cmps	_var03, #0 wc
27164                 | ' 		return(0);
27164     00 FA 05 C6 |  if_b	mov	result1, #0
27168     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2716c     05 07 0A F2 | 	cmp	_var04, _var06 wz
27170                 | ' 		return(0);
27170     00 FA 05 A6 |  if_e	mov	result1, #0
27174     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27178     00 06 0E F2 | 	cmp	_var04, #0 wz
2717c                 | ' 		return(-1);
2717c     01 FA 65 A6 |  if_e	neg	result1, #1
27180     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27184     00 0A 0E F2 | 	cmp	_var06, #0 wz
27188                 | ' 		return(1);
27188     01 FA 05 A6 |  if_e	mov	result1, #1
2718c                 | ' 		return(c1 - c2);
2718c     03 FB 01 56 |  if_ne	mov	result1, _var04
27190     05 FB 81 51 |  if_ne	sub	result1, _var06
27194                 | _fatfs_cc_strncmp_ret
27194     2D 00 64 FD | 	ret
27198                 | 
27198                 | _fatfs_cc_strchr
27198                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
27198                 | ' 	while ((c = *s++) != (char) charwanted)
27198                 | LR__4010
27198     09 01 02 F6 | 	mov	_var01, arg01
2719c     00 03 C2 FA | 	rdbyte	_var02, _var01
271a0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
271a4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
271a8     03 05 0A F2 | 	cmp	_var03, _var04 wz
271ac     01 12 06 F1 | 	add	arg01, #1
271b0     14 00 90 AD |  if_e	jmp	#LR__4011
271b4     01 05 02 F6 | 	mov	_var03, _var02
271b8     07 04 4E F7 | 	zerox	_var03, #7 wz
271bc     00 FA 05 A6 |  if_e	mov	result1, #0
271c0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
271c4     D0 FF 9F FD | 	jmp	#LR__4010
271c8                 | LR__4011
271c8                 | ' 	return((char *)--s);
271c8     01 12 86 F1 | 	sub	arg01, #1
271cc     09 FB 01 F6 | 	mov	result1, arg01
271d0                 | _fatfs_cc_strchr_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | _fatfs_cc_disk_initialize
271d4     04 4A 05 F6 | 	mov	COUNT_, #4
271d8     A8 00 A0 FD | 	call	#pushregs_
271dc     40 F0 07 F1 | 	add	ptra, #64
271e0     04 4E 05 F1 | 	add	fp, #4
271e4     A7 12 42 FC | 	wrbyte	arg01, fp
271e8     01 00 00 FF 
271ec     14 E4 05 F1 | 	add	objptr, ##532
271f0     F2 18 02 FB | 	rdlong	arg04, objptr
271f4     2C 4E 05 F1 | 	add	fp, #44
271f8     A7 18 62 FC | 	wrlong	arg04, fp
271fc     04 E4 85 F1 | 	sub	objptr, #4
27200     F2 18 02 FB | 	rdlong	arg04, objptr
27204     04 4E 05 F1 | 	add	fp, #4
27208     A7 18 62 FC | 	wrlong	arg04, fp
2720c     08 E4 05 F1 | 	add	objptr, #8
27210     F2 18 02 FB | 	rdlong	arg04, objptr
27214     04 4E 05 F1 | 	add	fp, #4
27218     A7 18 62 FC | 	wrlong	arg04, fp
2721c     04 E4 05 F1 | 	add	objptr, #4
27220     F2 18 02 FB | 	rdlong	arg04, objptr
27224     04 4E 05 F1 | 	add	fp, #4
27228     A7 18 62 FC | 	wrlong	arg04, fp
2722c     04 E4 05 F1 | 	add	objptr, #4
27230     F2 02 48 FC | 	wrbyte	#1, objptr
27234     01 00 00 FF 
27238     20 E4 85 F1 | 	sub	objptr, ##544
2723c     38 4E 85 F1 | 	sub	fp, #56
27240     A7 18 CA FA | 	rdbyte	arg04, fp wz
27244     04 4E 85 F1 | 	sub	fp, #4
27248                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27248                 | '             return RES_NOTRDY;
27248     03 FA 05 56 |  if_ne	mov	result1, #3
2724c     D8 05 90 5D |  if_ne	jmp	#LR__4038
27250     13 00 00 FF 
27254     10 13 06 F6 | 	mov	arg01, ##10000
27258     2C 98 BF FD | 	call	#__system___waitus
2725c     30 4E 05 F1 | 	add	fp, #48
27260     A7 12 02 FB | 	rdlong	arg01, fp
27264     09 01 08 FC | 	wrpin	#0, arg01
27268     04 4E 05 F1 | 	add	fp, #4
2726c     A7 12 02 FB | 	rdlong	arg01, fp
27270     09 01 08 FC | 	wrpin	#0, arg01
27274     04 4E 05 F1 | 	add	fp, #4
27278     A7 12 02 FB | 	rdlong	arg01, fp
2727c     09 01 08 FC | 	wrpin	#0, arg01
27280     04 4E 05 F1 | 	add	fp, #4
27284     A7 12 02 FB | 	rdlong	arg01, fp
27288     09 00 80 FF 
2728c     09 01 08 FC | 	wrpin	##4608, arg01
27290     0C 4E 85 F1 | 	sub	fp, #12
27294     A7 12 02 FB | 	rdlong	arg01, fp
27298     59 12 62 FD | 	drvh	arg01
2729c     04 4E 05 F1 | 	add	fp, #4
272a0     A7 12 02 FB | 	rdlong	arg01, fp
272a4     59 12 62 FD | 	drvh	arg01
272a8     04 4E 05 F1 | 	add	fp, #4
272ac     A7 12 02 FB | 	rdlong	arg01, fp
272b0     59 12 62 FD | 	drvh	arg01
272b4     04 4E 05 F1 | 	add	fp, #4
272b8     A7 12 02 FB | 	rdlong	arg01, fp
272bc     59 12 62 FD | 	drvh	arg01
272c0     20 4E 85 F1 | 	sub	fp, #32
272c4     00 04 80 FF 
272c8     A7 20 68 FC | 	wrlong	##524304, fp
272cc     04 4E 05 F1 | 	add	fp, #4
272d0     20 03 80 FF 
272d4     A7 90 68 FC | 	wrlong	##409672, fp
272d8     14 4E 05 F1 | 	add	fp, #20
272dc     A7 1E 02 FB | 	rdlong	local01, fp
272e0     18 4E 85 F1 | 	sub	fp, #24
272e4     A7 16 02 FB | 	rdlong	arg03, fp
272e8     40 1E 62 FD | 	dirl	local01
272ec     A0 03 80 FF 
272f0     0F 91 08 FC | 	wrpin	##475208, local01
272f4     0F 17 12 FC | 	wxpin	arg03, local01
272f8     0F 01 28 FC | 	wypin	#0, local01
272fc     41 1E 62 FD | 	dirh	local01
27300     1C 4E 05 F1 | 	add	fp, #28
27304     A7 20 02 FB | 	rdlong	local02, fp
27308     10 1F 82 F1 | 	sub	local01, local02
2730c     07 1E 06 F5 | 	and	local01, #7
27310     18 1E 66 F0 | 	shl	local01, #24
27314     78 14 06 F6 | 	mov	arg02, #120
27318     0F 15 42 F5 | 	or	arg02, local01
2731c     14 4E 85 F1 | 	sub	fp, #20
27320     A7 14 62 FC | 	wrlong	arg02, fp
27324     14 4E 05 F1 | 	add	fp, #20
27328     A7 12 02 FB | 	rdlong	arg01, fp
2732c     10 14 26 F4 | 	bith	arg02, #16
27330     40 12 62 FD | 	dirl	arg01
27334     09 15 02 FC | 	wrpin	arg02, arg01
27338     09 3F 18 FC | 	wxpin	#31, arg01
2733c     FF FF FF FF 
27340     09 FF 2B FC | 	wypin	##-1, arg01
27344     41 12 62 FD | 	dirh	arg01
27348     04 4E 85 F1 | 	sub	fp, #4
2734c     A7 14 02 FB | 	rdlong	arg02, fp
27350     08 4E 05 F1 | 	add	fp, #8
27354     A7 22 02 FB | 	rdlong	local03, fp
27358     11 15 82 F1 | 	sub	arg02, local03
2735c     07 14 06 F5 | 	and	arg02, #7
27360     18 14 66 F0 | 	shl	arg02, #24
27364     14 4E 85 F1 | 	sub	fp, #20
27368     A7 14 62 FC | 	wrlong	arg02, fp
2736c     29 00 00 FF 
27370     7A 14 46 F5 | 	or	arg02, ##21114
27374     A7 14 62 FC | 	wrlong	arg02, fp
27378     14 4E 05 F1 | 	add	fp, #20
2737c     A7 12 02 FB | 	rdlong	arg01, fp
27380     40 12 62 FD | 	dirl	arg01
27384     09 15 02 FC | 	wrpin	arg02, arg01
27388     09 4F 18 FC | 	wxpin	#39, arg01
2738c     09 01 28 FC | 	wypin	#0, arg01
27390     41 12 62 FD | 	dirh	arg01
27394     28 4E 85 F1 | 	sub	fp, #40
27398     A7 12 02 F6 | 	mov	arg01, fp
2739c     14 4E 85 F1 | 	sub	fp, #20
273a0     0A 14 06 F6 | 	mov	arg02, #10
273a4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
273a8     00 12 06 F6 | 	mov	arg01, #0
273ac     00 14 06 F6 | 	mov	arg02, #0
273b0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
273b4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
273b8     64 12 06 F6 | 	mov	arg01, #100
273bc     C8 96 BF FD | 	call	#__system___waitus
273c0     14 4E 05 F1 | 	add	fp, #20
273c4     A7 12 02 F6 | 	mov	arg01, fp
273c8     14 4E 85 F1 | 	sub	fp, #20
273cc     0A 14 06 F6 | 	mov	arg02, #10
273d0     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
273d4     0C 4E 05 F1 | 	add	fp, #12
273d8     A7 00 48 FC | 	wrbyte	#0, fp
273dc     0C 4E 85 F1 | 	sub	fp, #12
273e0     00 12 06 F6 | 	mov	arg01, #0
273e4     00 14 06 F6 | 	mov	arg02, #0
273e8     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
273ec     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
273f0     01 18 0E F2 | 	cmp	arg04, #1 wz
273f4     B8 03 90 5D |  if_ne	jmp	#LR__4037
273f8     08 12 06 F6 | 	mov	arg01, #8
273fc     AA 15 06 F6 | 	mov	arg02, #426
27400     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27404     FD FA E1 F8 | 	getbyte	result1, result1, #0
27408     01 FA 0D F2 | 	cmp	result1, #1 wz
2740c     98 01 90 5D |  if_ne	jmp	#LR__4023
27410     14 4E 05 F1 | 	add	fp, #20
27414     A7 12 02 F6 | 	mov	arg01, fp
27418     14 4E 85 F1 | 	sub	fp, #20
2741c     04 14 06 F6 | 	mov	arg02, #4
27420     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27424     16 4E 05 F1 | 	add	fp, #22
27428     A7 24 C2 FA | 	rdbyte	local04, fp
2742c     16 4E 85 F1 | 	sub	fp, #22
27430     01 24 0E F2 | 	cmp	local04, #1 wz
27434     17 4E 05 A1 |  if_e	add	fp, #23
27438     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2743c     17 4E 85 A1 |  if_e	sub	fp, #23
27440     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27444     68 03 90 5D |  if_ne	jmp	#LR__4036
27448                 | ' 				for (tmr = 1000; tmr; tmr--) {
27448     18 4E 05 F1 | 	add	fp, #24
2744c     01 00 80 FF 
27450     A7 D0 6B FC | 	wrlong	##1000, fp
27454     18 4E 85 F1 | 	sub	fp, #24
27458                 | LR__4020
27458     18 4E 05 F1 | 	add	fp, #24
2745c     A7 1E 0A FB | 	rdlong	local01, fp wz
27460     18 4E 85 F1 | 	sub	fp, #24
27464     3C 00 90 AD |  if_e	jmp	#LR__4021
27468     A9 12 06 F6 | 	mov	arg01, #169
2746c     1E 14 C6 F9 | 	decod	arg02, #30
27470     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27474     FD 24 02 F6 | 	mov	local04, result1
27478     07 24 4E F7 | 	zerox	local04, #7 wz
2747c     24 00 90 AD |  if_e	jmp	#LR__4021
27480     01 00 00 FF 
27484     E8 13 06 F6 | 	mov	arg01, ##1000
27488     FC 95 BF FD | 	call	#__system___waitus
2748c     18 4E 05 F1 | 	add	fp, #24
27490     A7 24 02 FB | 	rdlong	local04, fp
27494     01 24 86 F1 | 	sub	local04, #1
27498     A7 24 62 FC | 	wrlong	local04, fp
2749c     18 4E 85 F1 | 	sub	fp, #24
274a0     B4 FF 9F FD | 	jmp	#LR__4020
274a4                 | LR__4021
274a4     18 4E 05 F1 | 	add	fp, #24
274a8     A7 24 0A FB | 	rdlong	local04, fp wz
274ac     18 4E 85 F1 | 	sub	fp, #24
274b0     4C 00 90 AD |  if_e	jmp	#LR__4022
274b4     3A 12 06 F6 | 	mov	arg01, #58
274b8     00 14 06 F6 | 	mov	arg02, #0
274bc     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
274c0     FD 22 02 F6 | 	mov	local03, result1
274c4     07 22 4E F7 | 	zerox	local03, #7 wz
274c8     34 00 90 5D |  if_ne	jmp	#LR__4022
274cc     14 4E 05 F1 | 	add	fp, #20
274d0     A7 12 02 F6 | 	mov	arg01, fp
274d4     14 4E 85 F1 | 	sub	fp, #20
274d8     04 14 06 F6 | 	mov	arg02, #4
274dc     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
274e0     14 4E 05 F1 | 	add	fp, #20
274e4     A7 1E C2 FA | 	rdbyte	local01, fp
274e8     40 1E CE F7 | 	test	local01, #64 wz
274ec     0C 24 06 56 |  if_ne	mov	local04, #12
274f0     04 24 06 A6 |  if_e	mov	local04, #4
274f4     08 4E 85 F1 | 	sub	fp, #8
274f8     A7 24 42 FC | 	wrbyte	local04, fp
274fc     0C 4E 85 F1 | 	sub	fp, #12
27500                 | LR__4022
27500     14 24 06 FB | 	rdlong	local04, #20
27504     18 4E 05 F1 | 	add	fp, #24
27508     A7 24 62 FC | 	wrlong	local04, fp
2750c     0C 4E 05 F1 | 	add	fp, #12
27510     A7 24 02 FB | 	rdlong	local04, fp
27514     1B 24 26 F4 | 	bith	local04, #27
27518     A7 24 62 FC | 	wrlong	local04, fp
2751c     0C 4E 85 F1 | 	sub	fp, #12
27520     A7 24 02 FB | 	rdlong	local04, fp
27524     18 4E 85 F1 | 	sub	fp, #24
27528     68 78 04 FF 
2752c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27530     1C 4E 05 C1 |  if_b	add	fp, #28
27534     00 01 80 CF 
27538     A7 08 68 CC |  if_b	wrlong	##131076, fp
2753c     1C 4E 85 C1 |  if_b	sub	fp, #28
27540     6C 02 90 CD |  if_b	jmp	#LR__4036
27544     18 4E 05 F1 | 	add	fp, #24
27548     A7 24 02 FB | 	rdlong	local04, fp
2754c     18 4E 85 F1 | 	sub	fp, #24
27550     E1 F5 05 FF 
27554     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27558     1C 4E 05 C1 |  if_b	add	fp, #28
2755c     00 01 80 CF 
27560     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27564     1C 4E 85 C1 |  if_b	sub	fp, #28
27568     44 02 90 CD |  if_b	jmp	#LR__4036
2756c     18 4E 05 F1 | 	add	fp, #24
27570     A7 24 02 FB | 	rdlong	local04, fp
27574     18 4E 85 F1 | 	sub	fp, #24
27578     3B 58 08 FF 
2757c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27580     1C 4E 05 C1 |  if_b	add	fp, #28
27584     00 01 80 CF 
27588     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2758c     1C 4E 85 C1 |  if_b	sub	fp, #28
27590     1C 02 90 CD |  if_b	jmp	#LR__4036
27594     1C 4E 05 F1 | 	add	fp, #28
27598     80 01 80 FF 
2759c     A7 10 68 FC | 	wrlong	##196616, fp
275a0     1C 4E 85 F1 | 	sub	fp, #28
275a4     08 02 90 FD | 	jmp	#LR__4036
275a8                 | LR__4023
275a8     A9 12 06 F6 | 	mov	arg01, #169
275ac     00 14 06 F6 | 	mov	arg02, #0
275b0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
275b4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
275b8     02 24 16 F2 | 	cmp	local04, #2 wc
275bc     18 00 90 3D |  if_ae	jmp	#LR__4024
275c0     0C 4E 05 F1 | 	add	fp, #12
275c4     A7 04 48 FC | 	wrbyte	#2, fp
275c8     04 4E 05 F1 | 	add	fp, #4
275cc     A7 52 49 FC | 	wrbyte	#169, fp
275d0     10 4E 85 F1 | 	sub	fp, #16
275d4     14 00 90 FD | 	jmp	#LR__4025
275d8                 | LR__4024
275d8     0C 4E 05 F1 | 	add	fp, #12
275dc     A7 02 48 FC | 	wrbyte	#1, fp
275e0     04 4E 05 F1 | 	add	fp, #4
275e4     A7 02 48 FC | 	wrbyte	#1, fp
275e8     10 4E 85 F1 | 	sub	fp, #16
275ec                 | LR__4025
275ec                 | ' 				ty =  0x01 ; cmd =  (1) ;
275ec                 | ' 			}
275ec                 | ' 			for (tmr = 1000; tmr; tmr--) {
275ec     18 4E 05 F1 | 	add	fp, #24
275f0     01 00 80 FF 
275f4     A7 D0 6B FC | 	wrlong	##1000, fp
275f8     18 4E 85 F1 | 	sub	fp, #24
275fc                 | LR__4026
275fc     18 4E 05 F1 | 	add	fp, #24
27600     A7 22 0A FB | 	rdlong	local03, fp wz
27604     18 4E 85 F1 | 	sub	fp, #24
27608     44 00 90 AD |  if_e	jmp	#LR__4027
2760c     10 4E 05 F1 | 	add	fp, #16
27610     A7 12 C2 FA | 	rdbyte	arg01, fp
27614     10 4E 85 F1 | 	sub	fp, #16
27618     00 14 06 F6 | 	mov	arg02, #0
2761c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27620     FD 24 02 F6 | 	mov	local04, result1
27624     07 24 4E F7 | 	zerox	local04, #7 wz
27628     24 00 90 AD |  if_e	jmp	#LR__4027
2762c     01 00 00 FF 
27630     E8 13 06 F6 | 	mov	arg01, ##1000
27634     50 94 BF FD | 	call	#__system___waitus
27638     18 4E 05 F1 | 	add	fp, #24
2763c     A7 24 02 FB | 	rdlong	local04, fp
27640     01 24 86 F1 | 	sub	local04, #1
27644     A7 24 62 FC | 	wrlong	local04, fp
27648     18 4E 85 F1 | 	sub	fp, #24
2764c     AC FF 9F FD | 	jmp	#LR__4026
27650                 | LR__4027
27650     18 4E 05 F1 | 	add	fp, #24
27654     A7 24 0A FB | 	rdlong	local04, fp wz
27658     18 4E 85 F1 | 	sub	fp, #24
2765c     14 00 90 AD |  if_e	jmp	#LR__4028
27660     10 12 06 F6 | 	mov	arg01, #16
27664     09 14 C6 F9 | 	decod	arg02, #9
27668     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
2766c     07 FA 4D F7 | 	zerox	result1, #7 wz
27670     0C 00 90 AD |  if_e	jmp	#LR__4029
27674                 | LR__4028
27674     0C 4E 05 F1 | 	add	fp, #12
27678     A7 00 48 FC | 	wrbyte	#0, fp
2767c     0C 4E 85 F1 | 	sub	fp, #12
27680                 | LR__4029
27680     14 24 06 FB | 	rdlong	local04, #20
27684     18 4E 05 F1 | 	add	fp, #24
27688     A7 24 62 FC | 	wrlong	local04, fp
2768c     18 4E 85 F1 | 	sub	fp, #24
27690     F0 FA 02 FF 
27694     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27698     18 00 90 3D |  if_ae	jmp	#LR__4030
2769c     24 4E 05 F1 | 	add	fp, #36
276a0     A7 24 02 FB | 	rdlong	local04, fp
276a4     1B 24 26 F4 | 	bith	local04, #27
276a8     A7 24 62 FC | 	wrlong	local04, fp
276ac     24 4E 85 F1 | 	sub	fp, #36
276b0     2C 00 90 FD | 	jmp	#LR__4031
276b4                 | LR__4030
276b4     18 4E 05 F1 | 	add	fp, #24
276b8     A7 24 02 FB | 	rdlong	local04, fp
276bc     18 4E 85 F1 | 	sub	fp, #24
276c0     E1 F5 05 FF 
276c4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
276c8     24 4E 05 C1 |  if_b	add	fp, #36
276cc     A7 24 02 CB |  if_b	rdlong	local04, fp
276d0     80 00 04 CF 
276d4     00 24 46 C5 |  if_b	or	local04, ##134283264
276d8     A7 24 62 CC |  if_b	wrlong	local04, fp
276dc     24 4E 85 C1 |  if_b	sub	fp, #36
276e0                 | LR__4031
276e0     18 4E 05 F1 | 	add	fp, #24
276e4     A7 24 02 FB | 	rdlong	local04, fp
276e8     18 4E 85 F1 | 	sub	fp, #24
276ec     F0 FA 02 FF 
276f0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
276f4     1C 4E 05 C1 |  if_b	add	fp, #28
276f8     00 01 80 CF 
276fc     A7 08 68 CC |  if_b	wrlong	##131076, fp
27700     1C 4E 85 C1 |  if_b	sub	fp, #28
27704     A8 00 90 CD |  if_b	jmp	#LR__4035
27708     18 4E 05 F1 | 	add	fp, #24
2770c     A7 24 02 FB | 	rdlong	local04, fp
27710     18 4E 85 F1 | 	sub	fp, #24
27714     68 78 04 FF 
27718     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2771c     1C 4E 05 C1 |  if_b	add	fp, #28
27720     80 01 80 CF 
27724     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27728     1C 4E 85 C1 |  if_b	sub	fp, #28
2772c     80 00 90 CD |  if_b	jmp	#LR__4034
27730     18 4E 05 F1 | 	add	fp, #24
27734     A7 24 02 FB | 	rdlong	local04, fp
27738     18 4E 85 F1 | 	sub	fp, #24
2773c     E1 F5 05 FF 
27740     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27744     1C 4E 05 C1 |  if_b	add	fp, #28
27748     00 02 80 CF 
2774c     A7 10 68 CC |  if_b	wrlong	##262152, fp
27750     1C 4E 85 C1 |  if_b	sub	fp, #28
27754     58 00 90 CD |  if_b	jmp	#LR__4033
27758     18 4E 05 F1 | 	add	fp, #24
2775c     A7 24 02 FB | 	rdlong	local04, fp
27760     18 4E 85 F1 | 	sub	fp, #24
27764     59 73 07 FF 
27768     81 24 16 F2 | 	cmp	local04, ##250000001 wc
2776c     1C 4E 05 C1 |  if_b	add	fp, #28
27770     80 02 80 CF 
27774     A7 14 68 CC |  if_b	wrlong	##327690, fp
27778     1C 4E 85 C1 |  if_b	sub	fp, #28
2777c     30 00 90 CD |  if_b	jmp	#LR__4032
27780     18 4E 05 F1 | 	add	fp, #24
27784     A7 24 02 FB | 	rdlong	local04, fp
27788     18 4E 85 F1 | 	sub	fp, #24
2778c     D1 F0 08 FF 
27790     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27794     1C 4E 05 C1 |  if_b	add	fp, #28
27798     00 03 80 CF 
2779c     A7 18 68 CC |  if_b	wrlong	##393228, fp
277a0     1C 4E 85 F3 | 	sumc	fp, #28
277a4     80 03 80 3F 
277a8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
277ac     1C 4E 85 31 |  if_ae	sub	fp, #28
277b0                 | LR__4032
277b0                 | LR__4033
277b0                 | LR__4034
277b0                 | LR__4035
277b0                 | LR__4036
277b0                 | LR__4037
277b0     0C 4E 05 F1 | 	add	fp, #12
277b4     A7 24 C2 FA | 	rdbyte	local04, fp
277b8     01 00 00 FF 
277bc     21 E4 05 F1 | 	add	objptr, ##545
277c0     F2 24 42 FC | 	wrbyte	local04, objptr
277c4     A7 1E CA FA | 	rdbyte	local01, fp wz
277c8     00 24 06 56 |  if_ne	mov	local04, #0
277cc     01 24 06 A6 |  if_e	mov	local04, #1
277d0     20 4E 05 F1 | 	add	fp, #32
277d4     A7 24 42 FC | 	wrbyte	local04, fp
277d8     A7 24 C2 FA | 	rdbyte	local04, fp
277dc     2C 4E 85 F1 | 	sub	fp, #44
277e0     01 E4 85 F1 | 	sub	objptr, #1
277e4     F2 24 42 FC | 	wrbyte	local04, objptr
277e8     01 00 00 FF 
277ec     20 E4 85 F1 | 	sub	objptr, ##544
277f0     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
277f4     34 4E 05 F1 | 	add	fp, #52
277f8     A7 12 02 FB | 	rdlong	arg01, fp
277fc     18 4E 85 F1 | 	sub	fp, #24
27800     A7 14 02 FB | 	rdlong	arg02, fp
27804     09 15 12 FC | 	wxpin	arg02, arg01
27808     1C 4E 05 F1 | 	add	fp, #28
2780c     A7 12 02 FB | 	rdlong	arg01, fp
27810     14 4E 85 F1 | 	sub	fp, #20
27814     A7 14 02 FB | 	rdlong	arg02, fp
27818     09 15 02 FC | 	wrpin	arg02, arg01
2781c                 | ' 
2781c                 | ' 		}
2781c                 | ' 	}
2781c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2781c                 | ' 	CardType = ty;
2781c                 | ' 	s = ty ? 0 :  0x01 ;
2781c                 | ' 	Stat = s;
2781c                 | ' 
2781c                 | ' 	deselect();
2781c                 | ' 
2781c                 | ' 
2781c                 | ' 	_wxpin( PIN_CLK, ck_div );
2781c                 | ' 	_wrpin( PIN_DI, spm_tx );
2781c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2781c                 | ' 	return s;
2781c     08 4E 05 F1 | 	add	fp, #8
27820     A7 FA C1 FA | 	rdbyte	result1, fp
27824     2C 4E 85 F1 | 	sub	fp, #44
27828                 | LR__4038
27828     A7 F0 03 F6 | 	mov	ptra, fp
2782c     B2 00 A0 FD | 	call	#popregs_
27830                 | _fatfs_cc_disk_initialize_ret
27830     2D 00 64 FD | 	ret
27834                 | 
27834                 | _fatfs_cc_disk_read
27834     05 4A 05 F6 | 	mov	COUNT_, #5
27838     A8 00 A0 FD | 	call	#pushregs_
2783c     0A 1F 02 F6 | 	mov	local01, arg02
27840     0B 21 02 F6 | 	mov	local02, arg03
27844     0C 23 02 F6 | 	mov	local03, arg04
27848     00 12 0E F2 | 	cmp	arg01, #0 wz
2784c     01 FA 05 56 |  if_ne	mov	result1, #1
27850                 | ' 
27850                 | ' 	return Stat;
27850     01 00 00 AF 
27854     20 E4 05 A1 |  if_e	add	objptr, ##544
27858     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2785c     01 00 00 AF 
27860     20 E4 85 A1 |  if_e	sub	objptr, ##544
27864     FD FA E1 F8 | 	getbyte	result1, result1, #0
27868     01 FA CD F7 | 	test	result1, #1 wz
2786c     03 FA 05 56 |  if_ne	mov	result1, #3
27870     84 00 90 5D |  if_ne	jmp	#LR__4042
27874     01 00 00 FF 
27878     21 E4 05 F1 | 	add	objptr, ##545
2787c     F2 24 C2 FA | 	rdbyte	local04, objptr
27880     01 00 00 FF 
27884     21 E4 85 F1 | 	sub	objptr, ##545
27888     08 24 CE F7 | 	test	local04, #8 wz
2788c     09 20 66 A0 |  if_e	shl	local02, #9
27890     02 22 16 F2 | 	cmp	local03, #2 wc
27894     12 24 06 36 |  if_ae	mov	local04, #18
27898     11 24 06 C6 |  if_b	mov	local04, #17
2789c     10 15 02 F6 | 	mov	arg02, local02
278a0     12 13 02 F6 | 	mov	arg01, local04
278a4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
278a8     FD 26 02 F6 | 	mov	local05, result1
278ac     07 26 4E F7 | 	zerox	local05, #7 wz
278b0     30 00 90 5D |  if_ne	jmp	#LR__4041
278b4                 | ' 		do {
278b4                 | LR__4040
278b4     0F 13 02 F6 | 	mov	arg01, local01
278b8     09 14 C6 F9 | 	decod	arg02, #9
278bc     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
278c0     00 FA 0D F2 | 	cmp	result1, #0 wz
278c4     01 00 00 5F 
278c8     00 1E 06 51 |  if_ne	add	local01, ##512
278cc     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4040
278d0     12 25 E2 F8 | 	getbyte	local04, local04, #0
278d4     12 24 0E F2 | 	cmp	local04, #18 wz
278d8     0C 12 06 A6 |  if_e	mov	arg01, #12
278dc     00 14 06 A6 |  if_e	mov	arg02, #0
278e0     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
278e4                 | LR__4041
278e4     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
278e8                 | ' 	}
278e8                 | ' 	deselect();
278e8                 | ' 
278e8                 | ' 	return count ? RES_ERROR : RES_OK;
278e8     00 22 0E F2 | 	cmp	local03, #0 wz
278ec     01 26 06 56 |  if_ne	mov	local05, #1
278f0     00 26 06 A6 |  if_e	mov	local05, #0
278f4     13 FB 01 F6 | 	mov	result1, local05
278f8                 | LR__4042
278f8     A7 F0 03 F6 | 	mov	ptra, fp
278fc     B2 00 A0 FD | 	call	#popregs_
27900                 | _fatfs_cc_disk_read_ret
27900     2D 00 64 FD | 	ret
27904                 | 
27904                 | _fatfs_cc_disk_write
27904     04 4A 05 F6 | 	mov	COUNT_, #4
27908     A8 00 A0 FD | 	call	#pushregs_
2790c     0A 1F 02 F6 | 	mov	local01, arg02
27910     0C 21 02 F6 | 	mov	local02, arg04
27914     0B 23 02 F6 | 	mov	local03, arg03
27918     00 12 0E F2 | 	cmp	arg01, #0 wz
2791c     01 FA 05 56 |  if_ne	mov	result1, #1
27920                 | ' 
27920                 | ' 	return Stat;
27920     01 00 00 AF 
27924     20 E4 05 A1 |  if_e	add	objptr, ##544
27928     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2792c     01 00 00 AF 
27930     20 E4 85 A1 |  if_e	sub	objptr, ##544
27934     FD FA E1 F8 | 	getbyte	result1, result1, #0
27938     01 FA CD F7 | 	test	result1, #1 wz
2793c     03 FA 05 56 |  if_ne	mov	result1, #3
27940     D4 00 90 5D |  if_ne	jmp	#LR__4054
27944     01 00 00 FF 
27948     21 E4 05 F1 | 	add	objptr, ##545
2794c     F2 16 C2 FA | 	rdbyte	arg03, objptr
27950     01 00 00 FF 
27954     21 E4 85 F1 | 	sub	objptr, ##545
27958     08 16 CE F7 | 	test	arg03, #8 wz
2795c     09 22 66 A0 |  if_e	shl	local03, #9
27960     01 20 0E F2 | 	cmp	local02, #1 wz
27964     30 00 90 5D |  if_ne	jmp	#LR__4050
27968     18 12 06 F6 | 	mov	arg01, #24
2796c     11 15 02 F6 | 	mov	arg02, local03
27970     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27974     FD 24 02 F6 | 	mov	local04, result1
27978     07 24 4E F7 | 	zerox	local04, #7 wz
2797c     84 00 90 5D |  if_ne	jmp	#LR__4053
27980     0F 13 02 F6 | 	mov	arg01, local01
27984     FE 14 06 F6 | 	mov	arg02, #254
27988     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
2798c     00 FA 0D F2 | 	cmp	result1, #0 wz
27990     00 20 06 56 |  if_ne	mov	local02, #0
27994     6C 00 90 FD | 	jmp	#LR__4053
27998                 | LR__4050
27998     01 00 00 FF 
2799c     21 E4 05 F1 | 	add	objptr, ##545
279a0     F2 24 C2 FA | 	rdbyte	local04, objptr
279a4     01 00 00 FF 
279a8     21 E4 85 F1 | 	sub	objptr, ##545
279ac     06 24 CE F7 | 	test	local04, #6 wz
279b0     97 12 06 56 |  if_ne	mov	arg01, #151
279b4     10 15 02 56 |  if_ne	mov	arg02, local02
279b8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
279bc     11 15 02 F6 | 	mov	arg02, local03
279c0     19 12 06 F6 | 	mov	arg01, #25
279c4     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279c8     FD 24 02 F6 | 	mov	local04, result1
279cc     07 24 4E F7 | 	zerox	local04, #7 wz
279d0     30 00 90 5D |  if_ne	jmp	#LR__4052
279d4                 | ' 			do {
279d4                 | LR__4051
279d4     0F 13 02 F6 | 	mov	arg01, local01
279d8     FC 14 06 F6 | 	mov	arg02, #252
279dc     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
279e0     00 FA 0D F2 | 	cmp	result1, #0 wz
279e4     01 00 00 5F 
279e8     00 1E 06 51 |  if_ne	add	local01, ##512
279ec     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4051
279f0     00 12 06 F6 | 	mov	arg01, #0
279f4     FD 14 06 F6 | 	mov	arg02, #253
279f8     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
279fc     00 FA 0D F2 | 	cmp	result1, #0 wz
27a00     01 20 06 A6 |  if_e	mov	local02, #1
27a04                 | LR__4052
27a04                 | LR__4053
27a04     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27a08                 | ' 				count = 1;
27a08                 | ' 		}
27a08                 | ' 	}
27a08                 | ' 	deselect();
27a08                 | ' 
27a08                 | ' 	return count ? RES_ERROR : RES_OK;
27a08     00 20 0E F2 | 	cmp	local02, #0 wz
27a0c     01 24 06 56 |  if_ne	mov	local04, #1
27a10     00 24 06 A6 |  if_e	mov	local04, #0
27a14     12 FB 01 F6 | 	mov	result1, local04
27a18                 | LR__4054
27a18     A7 F0 03 F6 | 	mov	ptra, fp
27a1c     B2 00 A0 FD | 	call	#popregs_
27a20                 | _fatfs_cc_disk_write_ret
27a20     2D 00 64 FD | 	ret
27a24                 | 
27a24                 | _fatfs_cc_disk_ioctl
27a24     01 4A 05 F6 | 	mov	COUNT_, #1
27a28     A8 00 A0 FD | 	call	#pushregs_
27a2c     30 F0 07 F1 | 	add	ptra, #48
27a30     04 4E 05 F1 | 	add	fp, #4
27a34     A7 12 42 FC | 	wrbyte	arg01, fp
27a38     04 4E 05 F1 | 	add	fp, #4
27a3c     A7 14 42 FC | 	wrbyte	arg02, fp
27a40     04 4E 05 F1 | 	add	fp, #4
27a44     A7 16 62 FC | 	wrlong	arg03, fp
27a48     08 4E 85 F1 | 	sub	fp, #8
27a4c     A7 12 CA FA | 	rdbyte	arg01, fp wz
27a50     04 4E 85 F1 | 	sub	fp, #4
27a54     01 FA 05 56 |  if_ne	mov	result1, #1
27a58                 | ' 
27a58                 | ' 	return Stat;
27a58     01 00 00 AF 
27a5c     20 E4 05 A1 |  if_e	add	objptr, ##544
27a60     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a64     01 00 00 AF 
27a68     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a70     01 FA CD F7 | 	test	result1, #1 wz
27a74     03 FA 05 56 |  if_ne	mov	result1, #3
27a78     E4 01 90 5D |  if_ne	jmp	#LR__4068
27a7c     10 4E 05 F1 | 	add	fp, #16
27a80     A7 02 68 FC | 	wrlong	#1, fp
27a84                 | ' 
27a84                 | ' 	res = RES_ERROR;
27a84                 | ' 	switch (ctrl) {
27a84     08 4E 85 F1 | 	sub	fp, #8
27a88     A7 1E C2 FA | 	rdbyte	local01, fp
27a8c     08 4E 85 F1 | 	sub	fp, #8
27a90     04 1E 26 F3 | 	fle	local01, #4
27a94     30 1E 62 FD | 	jmprel	local01
27a98                 | LR__4060
27a98     10 00 90 FD | 	jmp	#LR__4061
27a9c     24 00 90 FD | 	jmp	#LR__4062
27aa0     A0 01 90 FD | 	jmp	#LR__4066
27aa4     80 01 90 FD | 	jmp	#LR__4065
27aa8     98 01 90 FD | 	jmp	#LR__4066
27aac                 | LR__4061
27aac     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ab4     10 4E 05 51 |  if_ne	add	fp, #16
27ab8     A7 00 68 5C |  if_ne	wrlong	#0, fp
27abc     10 4E 85 51 |  if_ne	sub	fp, #16
27ac0                 | ' 			break;
27ac0     8C 01 90 FD | 	jmp	#LR__4067
27ac4                 | LR__4062
27ac4     09 12 06 F6 | 	mov	arg01, #9
27ac8     00 14 06 F6 | 	mov	arg02, #0
27acc     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27ad0     FD 1E 02 F6 | 	mov	local01, result1
27ad4     07 1E 4E F7 | 	zerox	local01, #7 wz
27ad8     74 01 90 5D |  if_ne	jmp	#LR__4067
27adc     18 4E 05 F1 | 	add	fp, #24
27ae0     A7 12 02 F6 | 	mov	arg01, fp
27ae4     18 4E 85 F1 | 	sub	fp, #24
27ae8     10 14 06 F6 | 	mov	arg02, #16
27aec     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27af0     00 FA 0D F2 | 	cmp	result1, #0 wz
27af4     58 01 90 AD |  if_e	jmp	#LR__4067
27af8     18 4E 05 F1 | 	add	fp, #24
27afc     A7 1E C2 FA | 	rdbyte	local01, fp
27b00     18 4E 85 F1 | 	sub	fp, #24
27b04     06 1E 46 F0 | 	shr	local01, #6
27b08     01 1E 0E F2 | 	cmp	local01, #1 wz
27b0c     5C 00 90 5D |  if_ne	jmp	#LR__4063
27b10     21 4E 05 F1 | 	add	fp, #33
27b14     A7 1E C2 FA | 	rdbyte	local01, fp
27b18     01 4E 85 F1 | 	sub	fp, #1
27b1c     A7 FA C1 FA | 	rdbyte	result1, fp
27b20     FD FA 31 F9 | 	getword	result1, result1, #0
27b24     08 FA 65 F0 | 	shl	result1, #8
27b28     FD 1E 02 F1 | 	add	local01, result1
27b2c     01 4E 85 F1 | 	sub	fp, #1
27b30     A7 FA C1 FA | 	rdbyte	result1, fp
27b34     3F FA 05 F5 | 	and	result1, #63
27b38     10 FA 65 F0 | 	shl	result1, #16
27b3c     FD 1E 02 F1 | 	add	local01, result1
27b40     01 1E 06 F1 | 	add	local01, #1
27b44     09 4E 05 F1 | 	add	fp, #9
27b48     A7 1E 62 FC | 	wrlong	local01, fp
27b4c     1C 4E 85 F1 | 	sub	fp, #28
27b50     A7 1E 02 FB | 	rdlong	local01, fp
27b54     1C 4E 05 F1 | 	add	fp, #28
27b58     A7 FA 01 FB | 	rdlong	result1, fp
27b5c     28 4E 85 F1 | 	sub	fp, #40
27b60     0A FA 65 F0 | 	shl	result1, #10
27b64     0F FB 61 FC | 	wrlong	result1, local01
27b68     AC 00 90 FD | 	jmp	#LR__4064
27b6c                 | LR__4063
27b6c     1D 4E 05 F1 | 	add	fp, #29
27b70     A7 1E C2 FA | 	rdbyte	local01, fp
27b74     0F 1F 42 F8 | 	getnib	local01, local01, #0
27b78     05 4E 05 F1 | 	add	fp, #5
27b7c     A7 FA C1 FA | 	rdbyte	result1, fp
27b80     80 FA 05 F5 | 	and	result1, #128
27b84     07 FA C5 F0 | 	sar	result1, #7
27b88     FD 1E 02 F1 | 	add	local01, result1
27b8c     01 4E 85 F1 | 	sub	fp, #1
27b90     A7 FA C1 FA | 	rdbyte	result1, fp
27b94     03 FA 05 F5 | 	and	result1, #3
27b98     01 FA 65 F0 | 	shl	result1, #1
27b9c     FD 1E 02 F1 | 	add	local01, result1
27ba0     02 1E 06 F1 | 	add	local01, #2
27ba4     0D 4E 85 F1 | 	sub	fp, #13
27ba8     A7 1E 42 FC | 	wrbyte	local01, fp
27bac     0C 4E 05 F1 | 	add	fp, #12
27bb0     A7 1E C2 FA | 	rdbyte	local01, fp
27bb4     06 1E 46 F0 | 	shr	local01, #6
27bb8     01 4E 85 F1 | 	sub	fp, #1
27bbc     A7 FA C1 FA | 	rdbyte	result1, fp
27bc0     FD FA 31 F9 | 	getword	result1, result1, #0
27bc4     02 FA 65 F0 | 	shl	result1, #2
27bc8     FD 1E 02 F1 | 	add	local01, result1
27bcc     01 4E 85 F1 | 	sub	fp, #1
27bd0     A7 FA C1 FA | 	rdbyte	result1, fp
27bd4     03 FA 05 F5 | 	and	result1, #3
27bd8     FD FA 31 F9 | 	getword	result1, result1, #0
27bdc     0A FA 65 F0 | 	shl	result1, #10
27be0     FD 1E 02 F1 | 	add	local01, result1
27be4     01 1E 06 F1 | 	add	local01, #1
27be8     0A 4E 05 F1 | 	add	fp, #10
27bec     A7 1E 62 FC | 	wrlong	local01, fp
27bf0     1C 4E 85 F1 | 	sub	fp, #28
27bf4     A7 1E 02 FB | 	rdlong	local01, fp
27bf8     1C 4E 05 F1 | 	add	fp, #28
27bfc     A7 FA 01 FB | 	rdlong	result1, fp
27c00     14 4E 85 F1 | 	sub	fp, #20
27c04     A7 16 C2 FA | 	rdbyte	arg03, fp
27c08     14 4E 85 F1 | 	sub	fp, #20
27c0c     09 16 86 F1 | 	sub	arg03, #9
27c10     0B FB 61 F0 | 	shl	result1, arg03
27c14     0F FB 61 FC | 	wrlong	result1, local01
27c18                 | LR__4064
27c18     10 4E 05 F1 | 	add	fp, #16
27c1c     A7 00 68 FC | 	wrlong	#0, fp
27c20     10 4E 85 F1 | 	sub	fp, #16
27c24                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27c24                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27c24                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27c24                 | ' 				}
27c24                 | ' 				res = RES_OK;
27c24                 | ' 			}
27c24                 | ' 			break;
27c24     28 00 90 FD | 	jmp	#LR__4067
27c28                 | LR__4065
27c28     0C 4E 05 F1 | 	add	fp, #12
27c2c     A7 1E 02 FB | 	rdlong	local01, fp
27c30     0F 01 69 FC | 	wrlong	#128, local01
27c34     04 4E 05 F1 | 	add	fp, #4
27c38     A7 00 68 FC | 	wrlong	#0, fp
27c3c     10 4E 85 F1 | 	sub	fp, #16
27c40                 | ' 			*(DWORD*)buff = 128;
27c40                 | ' 			res = RES_OK;
27c40                 | ' 			break;
27c40     0C 00 90 FD | 	jmp	#LR__4067
27c44                 | LR__4066
27c44     10 4E 05 F1 | 	add	fp, #16
27c48     A7 08 68 FC | 	wrlong	#4, fp
27c4c     10 4E 85 F1 | 	sub	fp, #16
27c50                 | LR__4067
27c50     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27c54                 | ' 			res = RES_PARERR;
27c54                 | ' 	}
27c54                 | ' 
27c54                 | ' 	deselect();
27c54                 | ' 
27c54                 | ' 	return res;
27c54     10 4E 05 F1 | 	add	fp, #16
27c58     A7 FA 01 FB | 	rdlong	result1, fp
27c5c     10 4E 85 F1 | 	sub	fp, #16
27c60                 | LR__4068
27c60     A7 F0 03 F6 | 	mov	ptra, fp
27c64     B2 00 A0 FD | 	call	#popregs_
27c68                 | _fatfs_cc_disk_ioctl_ret
27c68     2D 00 64 FD | 	ret
27c6c                 | 
27c6c                 | _fatfs_cc_disk_setpins
27c6c     00 12 0E F2 | 	cmp	arg01, #0 wz
27c70     01 FA 65 56 |  if_ne	neg	result1, #1
27c74     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27c78     01 00 00 FF 
27c7c     10 E4 05 F1 | 	add	objptr, ##528
27c80     F2 14 62 FC | 	wrlong	arg02, objptr
27c84     04 E4 05 F1 | 	add	objptr, #4
27c88     F2 16 62 FC | 	wrlong	arg03, objptr
27c8c     04 E4 05 F1 | 	add	objptr, #4
27c90     F2 18 62 FC | 	wrlong	arg04, objptr
27c94     04 E4 05 F1 | 	add	objptr, #4
27c98     F2 1A 62 FC | 	wrlong	arg05, objptr
27c9c     01 00 00 FF 
27ca0     1C E4 85 F1 | 	sub	objptr, ##540
27ca4     00 FA 05 F6 | 	mov	result1, #0
27ca8                 | _fatfs_cc_disk_setpins_ret
27ca8     2D 00 64 FD | 	ret
27cac                 | 
27cac                 | _fatfs_cc_tchar2uni
27cac     09 01 02 FB | 	rdlong	_var01, arg01
27cb0     00 03 02 F6 | 	mov	_var02, _var01
27cb4     01 00 06 F1 | 	add	_var01, #1
27cb8     00 05 02 F6 | 	mov	_var03, _var01
27cbc     01 07 C2 FA | 	rdbyte	_var04, _var02
27cc0     80 06 CE F7 | 	test	_var04, #128 wz
27cc4     E8 00 90 AD |  if_e	jmp	#LR__4077
27cc8     03 09 02 F6 | 	mov	_var05, _var04
27ccc     E0 08 06 F5 | 	and	_var05, #224
27cd0     C0 08 0E F2 | 	cmp	_var05, #192 wz
27cd4     1F 06 06 A5 |  if_e	and	_var04, #31
27cd8     01 0A 06 A6 |  if_e	mov	_var06, #1
27cdc     34 00 90 AD |  if_e	jmp	#LR__4071
27ce0     03 09 02 F6 | 	mov	_var05, _var04
27ce4     F0 08 06 F5 | 	and	_var05, #240
27ce8     E0 08 0E F2 | 	cmp	_var05, #224 wz
27cec     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27cf0     02 0A 06 A6 |  if_e	mov	_var06, #2
27cf4     1C 00 90 AD |  if_e	jmp	#LR__4070
27cf8     03 09 02 F6 | 	mov	_var05, _var04
27cfc     F8 08 06 F5 | 	and	_var05, #248
27d00     F0 08 0E F2 | 	cmp	_var05, #240 wz
27d04     07 06 06 A5 |  if_e	and	_var04, #7
27d08     03 0A 06 A6 |  if_e	mov	_var06, #3
27d0c                 | ' 			return 0xFFFFFFFF;
27d0c     01 FA 65 56 |  if_ne	neg	result1, #1
27d10     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27d14                 | LR__4070
27d14                 | LR__4071
27d14                 | ' 		}
27d14                 | ' 		do {
27d14                 | LR__4072
27d14     02 0D C2 FA | 	rdbyte	_var07, _var03
27d18     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27d1c     C0 08 06 F5 | 	and	_var05, #192
27d20     80 08 0E F2 | 	cmp	_var05, #128 wz
27d24     01 04 06 F1 | 	add	_var03, #1
27d28     01 FA 65 56 |  if_ne	neg	result1, #1
27d2c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27d30     06 06 66 F0 | 	shl	_var04, #6
27d34     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27d38     3F 02 06 F5 | 	and	_var02, #63
27d3c     01 07 42 F5 | 	or	_var04, _var02
27d40     F4 0B 6E FB | 	djnz	_var06, #LR__4072
27d44     80 06 16 F2 | 	cmp	_var04, #128 wc
27d48     24 00 90 CD |  if_b	jmp	#LR__4074
27d4c     6C 00 00 FF 
27d50     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27d54     0C 00 90 CD |  if_b	jmp	#LR__4073
27d58     70 00 00 FF 
27d5c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27d60     0C 00 90 CD |  if_b	jmp	#LR__4074
27d64                 | LR__4073
27d64     80 08 00 FF 
27d68     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27d6c     08 00 90 CD |  if_b	jmp	#LR__4075
27d70                 | LR__4074
27d70     01 FA 65 F6 | 	neg	result1, #1
27d74     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27d78                 | LR__4075
27d78     80 00 00 FF 
27d7c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27d80     2C 00 90 CD |  if_b	jmp	#LR__4076
27d84     03 03 02 F6 | 	mov	_var02, _var04
27d88     80 00 00 FF 
27d8c     00 02 86 F1 | 	sub	_var02, ##65536
27d90     06 02 66 F0 | 	shl	_var02, #6
27d94     80 FF 01 FF 
27d98     00 02 06 F5 | 	and	_var02, ##67043328
27d9c     6E 00 6C FF 
27da0     00 08 06 F6 | 	mov	_var05, ##-671032320
27da4     01 09 42 F5 | 	or	_var05, _var02
27da8     09 06 46 F7 | 	zerox	_var04, #9
27dac     04 07 42 F5 | 	or	_var04, _var05
27db0                 | LR__4076
27db0                 | LR__4077
27db0     09 05 62 FC | 	wrlong	_var03, arg01
27db4                 | ' 	}
27db4                 | ' #line 811 "ff.c"
27db4                 | ' 	*str = p;
27db4                 | ' 	return uc;
27db4     03 FB 01 F6 | 	mov	result1, _var04
27db8                 | _fatfs_cc_tchar2uni_ret
27db8     2D 00 64 FD | 	ret
27dbc                 | 
27dbc                 | _fatfs_cc_put_utf
27dbc     80 12 16 F2 | 	cmp	arg01, #128 wc
27dc0     18 00 90 3D |  if_ae	jmp	#LR__4080
27dc4     01 16 16 F2 | 	cmp	arg03, #1 wc
27dc8     00 FA 05 C6 |  if_b	mov	result1, #0
27dcc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27dd0     0A 13 42 FC | 	wrbyte	arg01, arg02
27dd4                 | ' 		*buf = (TCHAR)chr;
27dd4                 | ' 		return 1;
27dd4     01 FA 05 F6 | 	mov	result1, #1
27dd8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27ddc                 | LR__4080
27ddc     04 00 00 FF 
27de0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
27de4     40 00 90 3D |  if_ae	jmp	#LR__4081
27de8     02 16 16 F2 | 	cmp	arg03, #2 wc
27dec     00 FA 05 C6 |  if_b	mov	result1, #0
27df0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27df4     09 FB 01 F6 | 	mov	result1, arg01
27df8     06 FA 45 F0 | 	shr	result1, #6
27dfc     1F FA 05 F5 | 	and	result1, #31
27e00     C0 16 06 F6 | 	mov	arg03, #192
27e04     FD 16 42 F5 | 	or	arg03, result1
27e08     0A 17 42 FC | 	wrbyte	arg03, arg02
27e0c     01 14 06 F1 | 	add	arg02, #1
27e10     3F 12 06 F5 | 	and	arg01, #63
27e14     80 FA 05 F6 | 	mov	result1, #128
27e18     09 FB 41 F5 | 	or	result1, arg01
27e1c     0A FB 41 FC | 	wrbyte	result1, arg02
27e20                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
27e20                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27e20                 | ' 		return 2;
27e20     02 FA 05 F6 | 	mov	result1, #2
27e24     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27e28                 | LR__4081
27e28     80 00 00 FF 
27e2c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27e30     70 00 90 3D |  if_ae	jmp	#LR__4084
27e34     03 16 16 F2 | 	cmp	arg03, #3 wc
27e38     18 00 90 CD |  if_b	jmp	#LR__4082
27e3c     6C 00 00 FF 
27e40     00 12 16 F2 | 	cmp	arg01, ##55296 wc
27e44     14 00 90 CD |  if_b	jmp	#LR__4083
27e48     70 00 00 FF 
27e4c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
27e50     08 00 90 3D |  if_ae	jmp	#LR__4083
27e54                 | LR__4082
27e54     00 FA 05 F6 | 	mov	result1, #0
27e58     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27e5c                 | LR__4083
27e5c     09 FB 59 F8 | 	getnib	result1, arg01, #3
27e60     E0 16 06 F6 | 	mov	arg03, #224
27e64     FD 16 42 F5 | 	or	arg03, result1
27e68     0A 17 42 FC | 	wrbyte	arg03, arg02
27e6c     01 14 06 F1 | 	add	arg02, #1
27e70     09 FB 01 F6 | 	mov	result1, arg01
27e74     06 FA 45 F0 | 	shr	result1, #6
27e78     3F FA 05 F5 | 	and	result1, #63
27e7c     80 16 06 F6 | 	mov	arg03, #128
27e80     FD 16 42 F5 | 	or	arg03, result1
27e84     0A 17 42 FC | 	wrbyte	arg03, arg02
27e88     01 14 06 F1 | 	add	arg02, #1
27e8c     3F 12 06 F5 | 	and	arg01, #63
27e90     80 FA 05 F6 | 	mov	result1, #128
27e94     09 FB 41 F5 | 	or	result1, arg01
27e98     0A FB 41 FC | 	wrbyte	result1, arg02
27e9c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
27e9c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
27e9c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27e9c                 | ' 		return 3;
27e9c     03 FA 05 F6 | 	mov	result1, #3
27ea0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27ea4                 | LR__4084
27ea4     04 16 16 F2 | 	cmp	arg03, #4 wc
27ea8     00 FA 05 C6 |  if_b	mov	result1, #0
27eac     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27eb0     09 01 02 F6 | 	mov	_var01, arg01
27eb4     E0 01 06 F4 | 	bitl	_var01, #480
27eb8     00 00 6C FF 
27ebc     00 00 86 F1 | 	sub	_var01, ##-671088640
27ec0     06 00 46 F0 | 	shr	_var01, #6
27ec4     09 13 32 F9 | 	getword	arg01, arg01, #0
27ec8     6E 00 00 FF 
27ecc     00 12 86 F1 | 	sub	arg01, ##56320
27ed0     00 08 00 FF 
27ed4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
27ed8     02 00 00 CF 
27edc     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
27ee0     00 FA 05 36 |  if_ae	mov	result1, #0
27ee4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
27ee8     09 01 42 F5 | 	or	_var01, arg01
27eec     80 00 00 FF 
27ef0     00 00 06 F1 | 	add	_var01, ##65536
27ef4     00 FB 01 F6 | 	mov	result1, _var01
27ef8     12 FA 45 F0 | 	shr	result1, #18
27efc     07 FA 05 F5 | 	and	result1, #7
27f00     F0 16 06 F6 | 	mov	arg03, #240
27f04     FD 16 42 F5 | 	or	arg03, result1
27f08     0A 17 42 FC | 	wrbyte	arg03, arg02
27f0c     01 14 06 F1 | 	add	arg02, #1
27f10     00 FB 01 F6 | 	mov	result1, _var01
27f14     0C FA 45 F0 | 	shr	result1, #12
27f18     3F FA 05 F5 | 	and	result1, #63
27f1c     80 16 06 F6 | 	mov	arg03, #128
27f20     FD 16 42 F5 | 	or	arg03, result1
27f24     0A 17 42 FC | 	wrbyte	arg03, arg02
27f28     01 14 06 F1 | 	add	arg02, #1
27f2c     00 FB 01 F6 | 	mov	result1, _var01
27f30     06 FA 45 F0 | 	shr	result1, #6
27f34     3F FA 05 F5 | 	and	result1, #63
27f38     80 16 06 F6 | 	mov	arg03, #128
27f3c     FD 16 42 F5 | 	or	arg03, result1
27f40     0A 17 42 FC | 	wrbyte	arg03, arg02
27f44     01 14 06 F1 | 	add	arg02, #1
27f48     3F 00 06 F5 | 	and	_var01, #63
27f4c     80 FA 05 F6 | 	mov	result1, #128
27f50     00 FB 41 F5 | 	or	result1, _var01
27f54     0A FB 41 FC | 	wrbyte	result1, arg02
27f58                 | ' 	chr = (hc | chr) + 0x10000;
27f58                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
27f58                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
27f58                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
27f58                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27f58                 | ' 	return 4;
27f58     04 FA 05 F6 | 	mov	result1, #4
27f5c                 | _fatfs_cc_put_utf_ret
27f5c     2D 00 64 FD | 	ret
27f60                 | 
27f60                 | _fatfs_cc_sync_window
27f60     02 4A 05 F6 | 	mov	COUNT_, #2
27f64     A8 00 A0 FD | 	call	#pushregs_
27f68     09 1F 02 F6 | 	mov	local01, arg01
27f6c     00 20 06 F6 | 	mov	local02, #0
27f70     03 1E 06 F1 | 	add	local01, #3
27f74     0F FB C9 FA | 	rdbyte	result1, local01 wz
27f78     03 1E 86 F1 | 	sub	local01, #3
27f7c     A4 00 90 AD |  if_e	jmp	#LR__4092
27f80     01 1E 06 F1 | 	add	local01, #1
27f84     0F 13 C2 FA | 	rdbyte	arg01, local01
27f88     33 1E 06 F1 | 	add	local01, #51
27f8c     0F 15 02 F6 | 	mov	arg02, local01
27f90     04 1E 86 F1 | 	sub	local01, #4
27f94     0F 17 02 FB | 	rdlong	arg03, local01
27f98     30 1E 86 F1 | 	sub	local01, #48
27f9c     01 18 06 F6 | 	mov	arg04, #1
27fa0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
27fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
27fa8     74 00 90 5D |  if_ne	jmp	#LR__4090
27fac     03 1E 06 F1 | 	add	local01, #3
27fb0     0F 01 48 FC | 	wrbyte	#0, local01
27fb4     2D 1E 06 F1 | 	add	local01, #45
27fb8     0F FB 01 FB | 	rdlong	result1, local01
27fbc     0C 1E 86 F1 | 	sub	local01, #12
27fc0     0F 19 02 FB | 	rdlong	arg04, local01
27fc4     0C FB 81 F1 | 	sub	result1, arg04
27fc8     08 1E 86 F1 | 	sub	local01, #8
27fcc     0F 19 02 FB | 	rdlong	arg04, local01
27fd0     1C 1E 86 F1 | 	sub	local01, #28
27fd4     0C FB 11 F2 | 	cmp	result1, arg04 wc
27fd8     48 00 90 3D |  if_ae	jmp	#LR__4091
27fdc     02 1E 06 F1 | 	add	local01, #2
27fe0     0F 19 C2 FA | 	rdbyte	arg04, local01
27fe4     02 1E 86 F1 | 	sub	local01, #2
27fe8     02 18 0E F2 | 	cmp	arg04, #2 wz
27fec     34 00 90 5D |  if_ne	jmp	#LR__4091
27ff0     01 1E 06 F1 | 	add	local01, #1
27ff4     0F 13 C2 FA | 	rdbyte	arg01, local01
27ff8     33 1E 06 F1 | 	add	local01, #51
27ffc     0F 15 02 F6 | 	mov	arg02, local01
28000     04 1E 86 F1 | 	sub	local01, #4
28004     0F 17 02 FB | 	rdlong	arg03, local01
28008     14 1E 86 F1 | 	sub	local01, #20
2800c     0F 1F 02 FB | 	rdlong	local01, local01
28010     0F 17 02 F1 | 	add	arg03, local01
28014     01 18 06 F6 | 	mov	arg04, #1
28018     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2801c     04 00 90 FD | 	jmp	#LR__4091
28020                 | LR__4090
28020     01 20 06 F6 | 	mov	local02, #1
28024                 | LR__4091
28024                 | LR__4092
28024                 | ' 			res = FR_DISK_ERR;
28024                 | ' 		}
28024                 | ' 	}
28024                 | ' 	return res;
28024     10 FB 01 F6 | 	mov	result1, local02
28028     A7 F0 03 F6 | 	mov	ptra, fp
2802c     B2 00 A0 FD | 	call	#popregs_
28030                 | _fatfs_cc_sync_window_ret
28030     2D 00 64 FD | 	ret
28034                 | 
28034                 | _fatfs_cc_move_window
28034     03 4A 05 F6 | 	mov	COUNT_, #3
28038     A8 00 A0 FD | 	call	#pushregs_
2803c     09 1F 02 F6 | 	mov	local01, arg01
28040     0A 21 02 F6 | 	mov	local02, arg02
28044     00 22 06 F6 | 	mov	local03, #0
28048     30 1E 06 F1 | 	add	local01, #48
2804c     0F 19 02 FB | 	rdlong	arg04, local01
28050     30 1E 86 F1 | 	sub	local01, #48
28054     0C 21 0A F2 | 	cmp	local02, arg04 wz
28058     40 00 90 AD |  if_e	jmp	#LR__4101
2805c     0F 13 02 F6 | 	mov	arg01, local01
28060     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28064     FD 22 0A F6 | 	mov	local03, result1 wz
28068     30 00 90 5D |  if_ne	jmp	#LR__4100
2806c     01 1E 06 F1 | 	add	local01, #1
28070     0F 13 C2 FA | 	rdbyte	arg01, local01
28074     33 1E 06 F1 | 	add	local01, #51
28078     0F 15 02 F6 | 	mov	arg02, local01
2807c     10 17 02 F6 | 	mov	arg03, local02
28080     01 18 06 F6 | 	mov	arg04, #1
28084     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28088     00 FA 0D F2 | 	cmp	result1, #0 wz
2808c     01 20 66 56 |  if_ne	neg	local02, #1
28090     01 22 06 56 |  if_ne	mov	local03, #1
28094     04 1E 86 F1 | 	sub	local01, #4
28098     0F 21 62 FC | 	wrlong	local02, local01
2809c                 | LR__4100
2809c                 | LR__4101
2809c                 | ' 				sect = (LBA_t)0 - 1;
2809c                 | ' 				res = FR_DISK_ERR;
2809c                 | ' 			}
2809c                 | ' 			fs->winsect = sect;
2809c                 | ' 		}
2809c                 | ' 	}
2809c                 | ' 	return res;
2809c     11 FB 01 F6 | 	mov	result1, local03
280a0     A7 F0 03 F6 | 	mov	ptra, fp
280a4     B2 00 A0 FD | 	call	#popregs_
280a8                 | _fatfs_cc_move_window_ret
280a8     2D 00 64 FD | 	ret
280ac                 | 
280ac                 | _fatfs_cc_sync_fs
280ac     02 4A 05 F6 | 	mov	COUNT_, #2
280b0     A8 00 A0 FD | 	call	#pushregs_
280b4     09 1F 02 F6 | 	mov	local01, arg01
280b8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
280bc     FD 20 0A F6 | 	mov	local02, result1 wz
280c0     D8 00 90 5D |  if_ne	jmp	#LR__4111
280c4     0F 19 C2 FA | 	rdbyte	arg04, local01
280c8     03 18 0E F2 | 	cmp	arg04, #3 wz
280cc     04 1E 06 A1 |  if_e	add	local01, #4
280d0     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
280d4     04 1E 86 A1 |  if_e	sub	local01, #4
280d8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
280dc     A0 00 90 5D |  if_ne	jmp	#LR__4110
280e0     34 1E 06 F1 | 	add	local01, #52
280e4     0F 13 02 F6 | 	mov	arg01, local01
280e8     00 14 06 F6 | 	mov	arg02, #0
280ec     09 16 C6 F9 | 	decod	arg03, #9
280f0     98 00 A0 FD | 	call	#\builtin_bytefill_
280f4     0F 13 02 F6 | 	mov	arg01, local01
280f8     FE 13 06 F1 | 	add	arg01, #510
280fc     55 00 80 FF 
28100     09 AB 58 FC | 	wrword	##43605, arg01
28104     A9 B0 A0 FF 
28108     0F A5 68 FC | 	wrlong	##1096897106, local01
2810c     0F 13 02 F6 | 	mov	arg01, local01
28110     E4 13 06 F1 | 	add	arg01, #484
28114     B9 A0 B0 FF 
28118     09 E5 68 FC | 	wrlong	##1631679090, arg01
2811c     0F 13 02 F6 | 	mov	arg01, local01
28120     E8 13 06 F1 | 	add	arg01, #488
28124     20 1E 86 F1 | 	sub	local01, #32
28128     0F 15 02 FB | 	rdlong	arg02, local01
2812c     09 15 62 FC | 	wrlong	arg02, arg01
28130     20 1E 06 F1 | 	add	local01, #32
28134     0F 13 02 F6 | 	mov	arg01, local01
28138     EC 13 06 F1 | 	add	arg01, #492
2813c     24 1E 86 F1 | 	sub	local01, #36
28140     0F 15 02 FB | 	rdlong	arg02, local01
28144     09 15 62 FC | 	wrlong	arg02, arg01
28148     10 1E 06 F1 | 	add	local01, #16
2814c     0F 17 02 FB | 	rdlong	arg03, local01
28150     01 16 06 F1 | 	add	arg03, #1
28154     10 1E 06 F1 | 	add	local01, #16
28158     0F 17 62 FC | 	wrlong	arg03, local01
2815c     2F 1E 86 F1 | 	sub	local01, #47
28160     0F 13 C2 FA | 	rdbyte	arg01, local01
28164     33 1E 06 F1 | 	add	local01, #51
28168     0F 15 02 F6 | 	mov	arg02, local01
2816c     01 18 06 F6 | 	mov	arg04, #1
28170     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28174     30 1E 86 F1 | 	sub	local01, #48
28178     0F 01 48 FC | 	wrbyte	#0, local01
2817c     04 1E 86 F1 | 	sub	local01, #4
28180                 | LR__4110
28180     01 1E 06 F1 | 	add	local01, #1
28184     0F 13 C2 FA | 	rdbyte	arg01, local01
28188     00 14 06 F6 | 	mov	arg02, #0
2818c     00 16 06 F6 | 	mov	arg03, #0
28190     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28194     00 FA 0D F2 | 	cmp	result1, #0 wz
28198     01 20 06 56 |  if_ne	mov	local02, #1
2819c                 | LR__4111
2819c                 | ' 	}
2819c                 | ' 
2819c                 | ' 	return res;
2819c     10 FB 01 F6 | 	mov	result1, local02
281a0     A7 F0 03 F6 | 	mov	ptra, fp
281a4     B2 00 A0 FD | 	call	#popregs_
281a8                 | _fatfs_cc_sync_fs_ret
281a8     2D 00 64 FD | 	ret
281ac                 | 
281ac                 | _fatfs_cc_clst2sect
281ac     02 14 86 F1 | 	sub	arg02, #2
281b0     18 12 06 F1 | 	add	arg01, #24
281b4     09 01 02 FB | 	rdlong	_var01, arg01
281b8     18 12 86 F1 | 	sub	arg01, #24
281bc     02 00 86 F1 | 	sub	_var01, #2
281c0     00 15 12 F2 | 	cmp	arg02, _var01 wc
281c4     00 FA 05 36 |  if_ae	mov	result1, #0
281c8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
281cc     0A 12 06 F1 | 	add	arg01, #10
281d0     09 01 E2 FA | 	rdword	_var01, arg01
281d4     0A 01 02 FD | 	qmul	_var01, arg02
281d8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
281d8     22 12 06 F1 | 	add	arg01, #34
281dc     09 FB 01 FB | 	rdlong	result1, arg01
281e0     18 00 62 FD | 	getqx	_var01
281e4     00 FB 01 F1 | 	add	result1, _var01
281e8                 | _fatfs_cc_clst2sect_ret
281e8     2D 00 64 FD | 	ret
281ec                 | 
281ec                 | _fatfs_cc_get_fat
281ec     07 4A 05 F6 | 	mov	COUNT_, #7
281f0     A8 00 A0 FD | 	call	#pushregs_
281f4     0A 1F 02 F6 | 	mov	local01, arg02
281f8     09 21 02 FB | 	rdlong	local02, arg01
281fc     02 1E 16 F2 | 	cmp	local01, #2 wc
28200     14 00 90 CD |  if_b	jmp	#LR__4120
28204     18 20 06 F1 | 	add	local02, #24
28208     10 23 02 FB | 	rdlong	local03, local02
2820c     18 20 86 F1 | 	sub	local02, #24
28210     11 1F 12 F2 | 	cmp	local01, local03 wc
28214     08 00 90 CD |  if_b	jmp	#LR__4121
28218                 | LR__4120
28218     01 24 06 F6 | 	mov	local04, #1
2821c     60 01 90 FD | 	jmp	#LR__4128
28220                 | LR__4121
28220     01 24 66 F6 | 	neg	local04, #1
28224                 | ' 		val = 0xFFFFFFFF;
28224                 | ' 
28224                 | ' 		switch (fs->fs_type) {
28224     10 27 C2 FA | 	rdbyte	local05, local02
28228     01 26 86 F1 | 	sub	local05, #1
2822c     03 26 26 F3 | 	fle	local05, #3
28230     30 26 62 FD | 	jmprel	local05
28234                 | LR__4122
28234     0C 00 90 FD | 	jmp	#LR__4123
28238     B8 00 90 FD | 	jmp	#LR__4124
2823c     F8 00 90 FD | 	jmp	#LR__4125
28240     38 01 90 FD | 	jmp	#LR__4126
28244                 | LR__4123
28244     0F 27 02 F6 | 	mov	local05, local01
28248     0F 13 02 F6 | 	mov	arg01, local01
2824c     01 12 46 F0 | 	shr	arg01, #1
28250     09 27 02 F1 | 	add	local05, arg01
28254     10 13 02 F6 | 	mov	arg01, local02
28258     13 29 02 F6 | 	mov	local06, local05
2825c     09 28 46 F0 | 	shr	local06, #9
28260     24 20 06 F1 | 	add	local02, #36
28264     10 15 02 FB | 	rdlong	arg02, local02
28268     24 20 86 F1 | 	sub	local02, #36
2826c     14 15 02 F1 | 	add	arg02, local06
28270     C0 FD BF FD | 	call	#_fatfs_cc_move_window
28274     00 FA 0D F2 | 	cmp	result1, #0 wz
28278     04 01 90 5D |  if_ne	jmp	#LR__4127
2827c     13 29 02 F6 | 	mov	local06, local05
28280     FF 29 06 F5 | 	and	local06, #511
28284     34 20 06 F1 | 	add	local02, #52
28288     10 29 02 F1 | 	add	local06, local02
2828c     14 2B C2 FA | 	rdbyte	local07, local06
28290     34 20 86 F1 | 	sub	local02, #52
28294     10 13 02 F6 | 	mov	arg01, local02
28298     01 26 06 F1 | 	add	local05, #1
2829c     13 29 02 F6 | 	mov	local06, local05
282a0     09 28 46 F0 | 	shr	local06, #9
282a4     24 20 06 F1 | 	add	local02, #36
282a8     10 15 02 FB | 	rdlong	arg02, local02
282ac     24 20 86 F1 | 	sub	local02, #36
282b0     14 15 02 F1 | 	add	arg02, local06
282b4     7C FD BF FD | 	call	#_fatfs_cc_move_window
282b8     00 FA 0D F2 | 	cmp	result1, #0 wz
282bc     C0 00 90 5D |  if_ne	jmp	#LR__4127
282c0     FF 27 06 F5 | 	and	local05, #511
282c4     34 20 06 F1 | 	add	local02, #52
282c8     10 27 02 F1 | 	add	local05, local02
282cc     13 29 C2 FA | 	rdbyte	local06, local05
282d0     08 28 66 F0 | 	shl	local06, #8
282d4     14 2B 42 F5 | 	or	local07, local06
282d8     01 1E CE F7 | 	test	local01, #1 wz
282dc     04 2A 46 50 |  if_ne	shr	local07, #4
282e0     15 23 02 56 |  if_ne	mov	local03, local07
282e4     0B 2A 46 A7 |  if_e	zerox	local07, #11
282e8     15 23 02 A6 |  if_e	mov	local03, local07
282ec     11 25 02 F6 | 	mov	local04, local03
282f0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
282f0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
282f0                 | ' 			break;
282f0     8C 00 90 FD | 	jmp	#LR__4127
282f4                 | LR__4124
282f4     10 13 02 F6 | 	mov	arg01, local02
282f8     0F 29 02 F6 | 	mov	local06, local01
282fc     08 28 46 F0 | 	shr	local06, #8
28300     24 20 06 F1 | 	add	local02, #36
28304     10 15 02 FB | 	rdlong	arg02, local02
28308     24 20 86 F1 | 	sub	local02, #36
2830c     14 15 02 F1 | 	add	arg02, local06
28310     20 FD BF FD | 	call	#_fatfs_cc_move_window
28314     00 FA 0D F2 | 	cmp	result1, #0 wz
28318     64 00 90 5D |  if_ne	jmp	#LR__4127
2831c     34 20 06 F1 | 	add	local02, #52
28320     01 1E 66 F0 | 	shl	local01, #1
28324     FF 1F 06 F5 | 	and	local01, #511
28328     0F 21 02 F1 | 	add	local02, local01
2832c                 | ' {
2832c                 | ' 
2832c                 | ' 	return *((WORD*)ptr);
2832c     10 FB E1 FA | 	rdword	result1, local02
28330     FD 24 32 F9 | 	getword	local04, result1, #0
28334                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28334                 | ' 			break;
28334     48 00 90 FD | 	jmp	#LR__4127
28338                 | LR__4125
28338     10 13 02 F6 | 	mov	arg01, local02
2833c     0F 29 02 F6 | 	mov	local06, local01
28340     07 28 46 F0 | 	shr	local06, #7
28344     24 20 06 F1 | 	add	local02, #36
28348     10 15 02 FB | 	rdlong	arg02, local02
2834c     24 20 86 F1 | 	sub	local02, #36
28350     14 15 02 F1 | 	add	arg02, local06
28354     DC FC BF FD | 	call	#_fatfs_cc_move_window
28358     00 FA 0D F2 | 	cmp	result1, #0 wz
2835c     20 00 90 5D |  if_ne	jmp	#LR__4127
28360     34 20 06 F1 | 	add	local02, #52
28364     02 1E 66 F0 | 	shl	local01, #2
28368     FF 1F 06 F5 | 	and	local01, #511
2836c     0F 21 02 F1 | 	add	local02, local01
28370                 | ' {
28370                 | ' 
28370                 | ' 	return *((DWORD*)ptr);
28370     10 25 02 FB | 	rdlong	local04, local02
28374     7C 24 06 F4 | 	bitl	local04, #124
28378                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
28378                 | ' 			break;
28378     04 00 90 FD | 	jmp	#LR__4127
2837c                 | LR__4126
2837c     01 24 06 F6 | 	mov	local04, #1
28380                 | LR__4127
28380                 | LR__4128
28380                 | ' 			val = 1;
28380                 | ' 		}
28380                 | ' 	}
28380                 | ' 
28380                 | ' 	return val;
28380     12 FB 01 F6 | 	mov	result1, local04
28384     A7 F0 03 F6 | 	mov	ptra, fp
28388     B2 00 A0 FD | 	call	#popregs_
2838c                 | _fatfs_cc_get_fat_ret
2838c     2D 00 64 FD | 	ret
28390                 | 
28390                 | _fatfs_cc_put_fat
28390     08 4A 05 F6 | 	mov	COUNT_, #8
28394     A8 00 A0 FD | 	call	#pushregs_
28398     09 1F 02 F6 | 	mov	local01, arg01
2839c     0A 21 02 F6 | 	mov	local02, arg02
283a0     0B 23 02 F6 | 	mov	local03, arg03
283a4     02 24 06 F6 | 	mov	local04, #2
283a8     02 20 16 F2 | 	cmp	local02, #2 wc
283ac     E0 01 90 CD |  if_b	jmp	#LR__4137
283b0     18 1E 06 F1 | 	add	local01, #24
283b4     0F 27 02 FB | 	rdlong	local05, local01
283b8     18 1E 86 F1 | 	sub	local01, #24
283bc     13 21 12 F2 | 	cmp	local02, local05 wc
283c0     CC 01 90 3D |  if_ae	jmp	#LR__4137
283c4                 | ' 		switch (fs->fs_type) {
283c4     0F 29 C2 FA | 	rdbyte	local06, local01
283c8     01 28 86 F1 | 	sub	local06, #1
283cc     03 28 26 F3 | 	fle	local06, #3
283d0     30 28 62 FD | 	jmprel	local06
283d4                 | LR__4130
283d4     0C 00 90 FD | 	jmp	#LR__4131
283d8     F8 00 90 FD | 	jmp	#LR__4134
283dc     40 01 90 FD | 	jmp	#LR__4135
283e0     AC 01 90 FD | 	jmp	#LR__4136
283e4                 | LR__4131
283e4     10 2B 02 F6 | 	mov	local07, local02
283e8     10 27 02 F6 | 	mov	local05, local02
283ec     01 26 46 F0 | 	shr	local05, #1
283f0     13 2B 02 F1 | 	add	local07, local05
283f4     0F 13 02 F6 | 	mov	arg01, local01
283f8     15 29 02 F6 | 	mov	local06, local07
283fc     09 28 46 F0 | 	shr	local06, #9
28400     24 1E 06 F1 | 	add	local01, #36
28404     0F 15 02 FB | 	rdlong	arg02, local01
28408     24 1E 86 F1 | 	sub	local01, #36
2840c     14 15 02 F1 | 	add	arg02, local06
28410     20 FC BF FD | 	call	#_fatfs_cc_move_window
28414     FD 24 0A F6 | 	mov	local04, result1 wz
28418     74 01 90 5D |  if_ne	jmp	#LR__4136
2841c     34 1E 06 F1 | 	add	local01, #52
28420     0F 2D 02 F6 | 	mov	local08, local01
28424     15 27 02 F6 | 	mov	local05, local07
28428     FF 27 06 F5 | 	and	local05, #511
2842c     13 2D 02 F1 | 	add	local08, local05
28430     01 20 CE F7 | 	test	local02, #1 wz
28434     34 1E 86 F1 | 	sub	local01, #52
28438     01 2A 06 F1 | 	add	local07, #1
2843c     18 00 90 AD |  if_e	jmp	#LR__4132
28440     16 27 C2 FA | 	rdbyte	local05, local08
28444     13 27 42 F8 | 	getnib	local05, local05, #0
28448     11 29 E2 F8 | 	getbyte	local06, local03, #0
2844c     04 28 66 F0 | 	shl	local06, #4
28450     14 27 42 F5 | 	or	local05, local06
28454     04 00 90 FD | 	jmp	#LR__4133
28458                 | LR__4132
28458     11 27 02 F6 | 	mov	local05, local03
2845c                 | LR__4133
2845c     16 27 42 FC | 	wrbyte	local05, local08
28460     03 1E 06 F1 | 	add	local01, #3
28464     0F 03 48 FC | 	wrbyte	#1, local01
28468     03 1E 86 F1 | 	sub	local01, #3
2846c     0F 13 02 F6 | 	mov	arg01, local01
28470     15 2D 02 F6 | 	mov	local08, local07
28474     09 2C 46 F0 | 	shr	local08, #9
28478     24 1E 06 F1 | 	add	local01, #36
2847c     0F 15 02 FB | 	rdlong	arg02, local01
28480     24 1E 86 F1 | 	sub	local01, #36
28484     16 15 02 F1 | 	add	arg02, local08
28488     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2848c     FD 24 0A F6 | 	mov	local04, result1 wz
28490     FC 00 90 5D |  if_ne	jmp	#LR__4136
28494     34 1E 06 F1 | 	add	local01, #52
28498     0F 2D 02 F6 | 	mov	local08, local01
2849c     FF 2B 06 F5 | 	and	local07, #511
284a0     15 2D 02 F1 | 	add	local08, local07
284a4     01 20 CE F7 | 	test	local02, #1 wz
284a8     04 22 46 50 |  if_ne	shr	local03, #4
284ac     11 27 02 56 |  if_ne	mov	local05, local03
284b0     16 27 C2 AA |  if_e	rdbyte	local05, local08
284b4     F0 26 06 A5 |  if_e	and	local05, #240
284b8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
284bc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
284c0     11 27 42 A5 |  if_e	or	local05, local03
284c4     16 27 42 FC | 	wrbyte	local05, local08
284c8     31 1E 86 F1 | 	sub	local01, #49
284cc     0F 03 48 FC | 	wrbyte	#1, local01
284d0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
284d0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
284d0                 | ' 			fs->wflag = 1;
284d0                 | ' 			break;
284d0     BC 00 90 FD | 	jmp	#LR__4136
284d4                 | LR__4134
284d4     0F 13 02 F6 | 	mov	arg01, local01
284d8     10 2D 02 F6 | 	mov	local08, local02
284dc     08 2C 46 F0 | 	shr	local08, #8
284e0     24 1E 06 F1 | 	add	local01, #36
284e4     0F 15 02 FB | 	rdlong	arg02, local01
284e8     24 1E 86 F1 | 	sub	local01, #36
284ec     16 15 02 F1 | 	add	arg02, local08
284f0     40 FB BF FD | 	call	#_fatfs_cc_move_window
284f4     FD 24 0A F6 | 	mov	local04, result1 wz
284f8     94 00 90 5D |  if_ne	jmp	#LR__4136
284fc     34 1E 06 F1 | 	add	local01, #52
28500     0F 13 02 F6 | 	mov	arg01, local01
28504     01 20 66 F0 | 	shl	local02, #1
28508     FF 21 06 F5 | 	and	local02, #511
2850c     10 13 02 F1 | 	add	arg01, local02
28510     09 23 52 FC | 	wrword	local03, arg01
28514     31 1E 86 F1 | 	sub	local01, #49
28518     0F 03 48 FC | 	wrbyte	#1, local01
2851c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2851c                 | ' 			fs->wflag = 1;
2851c                 | ' 			break;
2851c     70 00 90 FD | 	jmp	#LR__4136
28520                 | LR__4135
28520     0F 13 02 F6 | 	mov	arg01, local01
28524     10 2D 02 F6 | 	mov	local08, local02
28528     07 2C 46 F0 | 	shr	local08, #7
2852c     24 1E 06 F1 | 	add	local01, #36
28530     0F 15 02 FB | 	rdlong	arg02, local01
28534     24 1E 86 F1 | 	sub	local01, #36
28538     16 15 02 F1 | 	add	arg02, local08
2853c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28540     FD 24 0A F6 | 	mov	local04, result1 wz
28544     48 00 90 5D |  if_ne	jmp	#LR__4136
28548     7C 22 06 F4 | 	bitl	local03, #124
2854c     34 1E 06 F1 | 	add	local01, #52
28550     10 2D 02 F6 | 	mov	local08, local02
28554     02 2C 66 F0 | 	shl	local08, #2
28558     FF 2D 06 F5 | 	and	local08, #511
2855c     0F 13 02 F6 | 	mov	arg01, local01
28560     16 13 02 F1 | 	add	arg01, local08
28564                 | ' {
28564                 | ' 
28564                 | ' 	return *((DWORD*)ptr);
28564     09 2D 02 FB | 	rdlong	local08, arg01
28568     00 00 78 FF 
2856c     00 2C 06 F5 | 	and	local08, ##-268435456
28570     16 23 42 F5 | 	or	local03, local08
28574     0F 13 02 F6 | 	mov	arg01, local01
28578     02 20 66 F0 | 	shl	local02, #2
2857c     FF 21 06 F5 | 	and	local02, #511
28580     10 13 02 F1 | 	add	arg01, local02
28584     09 23 62 FC | 	wrlong	local03, arg01
28588     31 1E 86 F1 | 	sub	local01, #49
2858c     0F 03 48 FC | 	wrbyte	#1, local01
28590                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28590                 | ' 			}
28590                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28590                 | ' 			fs->wflag = 1;
28590                 | ' 			break;
28590                 | LR__4136
28590                 | LR__4137
28590                 | ' 		}
28590                 | ' 	}
28590                 | ' 	return res;
28590     12 FB 01 F6 | 	mov	result1, local04
28594     A7 F0 03 F6 | 	mov	ptra, fp
28598     B2 00 A0 FD | 	call	#popregs_
2859c                 | _fatfs_cc_put_fat_ret
2859c     2D 00 64 FD | 	ret
285a0                 | 
285a0                 | _fatfs_cc_remove_chain
285a0     05 4A 05 F6 | 	mov	COUNT_, #5
285a4     A8 00 A0 FD | 	call	#pushregs_
285a8     09 1F 02 F6 | 	mov	local01, arg01
285ac     0A 21 02 F6 | 	mov	local02, arg02
285b0     0B 23 02 F6 | 	mov	local03, arg03
285b4     0F 25 02 FB | 	rdlong	local04, local01
285b8     02 20 16 F2 | 	cmp	local02, #2 wc
285bc     14 00 90 CD |  if_b	jmp	#LR__4140
285c0     18 24 06 F1 | 	add	local04, #24
285c4     12 FB 01 FB | 	rdlong	result1, local04
285c8     18 24 86 F1 | 	sub	local04, #24
285cc     FD 20 12 F2 | 	cmp	local02, result1 wc
285d0     08 00 90 CD |  if_b	jmp	#LR__4141
285d4                 | LR__4140
285d4     02 FA 05 F6 | 	mov	result1, #2
285d8     CC 00 90 FD | 	jmp	#LR__4146
285dc                 | LR__4141
285dc     00 22 0E F2 | 	cmp	local03, #0 wz
285e0     18 00 90 AD |  if_e	jmp	#LR__4142
285e4     11 15 02 F6 | 	mov	arg02, local03
285e8     12 13 02 F6 | 	mov	arg01, local04
285ec     01 16 66 F6 | 	neg	arg03, #1
285f0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
285f4     00 FA 0D F2 | 	cmp	result1, #0 wz
285f8     AC 00 90 5D |  if_ne	jmp	#LR__4146
285fc                 | LR__4142
285fc                 | ' 	}
285fc                 | ' 
285fc                 | ' 
285fc                 | ' 	do {
285fc                 | LR__4143
285fc     10 15 02 F6 | 	mov	arg02, local02
28600     0F 13 02 F6 | 	mov	arg01, local01
28604     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28608     FD 26 0A F6 | 	mov	local05, result1 wz
2860c     94 00 90 AD |  if_e	jmp	#LR__4145
28610     01 26 0E F2 | 	cmp	local05, #1 wz
28614     02 FA 05 A6 |  if_e	mov	result1, #2
28618     8C 00 90 AD |  if_e	jmp	#LR__4146
2861c     FF FF 7F FF 
28620     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28624     01 FA 05 A6 |  if_e	mov	result1, #1
28628     7C 00 90 AD |  if_e	jmp	#LR__4146
2862c     10 15 02 F6 | 	mov	arg02, local02
28630     12 13 02 F6 | 	mov	arg01, local04
28634     00 16 06 F6 | 	mov	arg03, #0
28638     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2863c     FD 22 0A F6 | 	mov	local03, result1 wz
28640     11 FB 01 56 |  if_ne	mov	result1, local03
28644     60 00 90 5D |  if_ne	jmp	#LR__4146
28648     18 24 06 F1 | 	add	local04, #24
2864c     12 23 02 FB | 	rdlong	local03, local04
28650     02 22 86 F1 | 	sub	local03, #2
28654     04 24 86 F1 | 	sub	local04, #4
28658     12 21 02 FB | 	rdlong	local02, local04
2865c     14 24 86 F1 | 	sub	local04, #20
28660     11 21 12 F2 | 	cmp	local02, local03 wc
28664     24 00 90 3D |  if_ae	jmp	#LR__4144
28668     14 24 06 F1 | 	add	local04, #20
2866c     12 23 02 FB | 	rdlong	local03, local04
28670     01 22 06 F1 | 	add	local03, #1
28674     12 23 62 FC | 	wrlong	local03, local04
28678     10 24 86 F1 | 	sub	local04, #16
2867c     12 23 C2 FA | 	rdbyte	local03, local04
28680     01 22 46 F5 | 	or	local03, #1
28684     12 23 42 FC | 	wrbyte	local03, local04
28688     04 24 86 F1 | 	sub	local04, #4
2868c                 | LR__4144
2868c     13 21 02 F6 | 	mov	local02, local05
28690     18 24 06 F1 | 	add	local04, #24
28694     12 27 02 FB | 	rdlong	local05, local04
28698     18 24 86 F1 | 	sub	local04, #24
2869c     13 21 12 F2 | 	cmp	local02, local05 wc
286a0     58 FF 9F CD |  if_b	jmp	#LR__4143
286a4                 | LR__4145
286a4                 | ' #line 1500 "ff.c"
286a4                 | ' 	return FR_OK;
286a4     00 FA 05 F6 | 	mov	result1, #0
286a8                 | LR__4146
286a8     A7 F0 03 F6 | 	mov	ptra, fp
286ac     B2 00 A0 FD | 	call	#popregs_
286b0                 | _fatfs_cc_remove_chain_ret
286b0     2D 00 64 FD | 	ret
286b4                 | 
286b4                 | _fatfs_cc_create_chain
286b4     09 4A 05 F6 | 	mov	COUNT_, #9
286b8     A8 00 A0 FD | 	call	#pushregs_
286bc     09 1F 02 F6 | 	mov	local01, arg01
286c0     0A 21 0A F6 | 	mov	local02, arg02 wz
286c4     0F 23 02 FB | 	rdlong	local03, local01
286c8     28 00 90 5D |  if_ne	jmp	#LR__4150
286cc     10 22 06 F1 | 	add	local03, #16
286d0     11 25 0A FB | 	rdlong	local04, local03 wz
286d4     10 22 86 F1 | 	sub	local03, #16
286d8     18 22 06 51 |  if_ne	add	local03, #24
286dc     11 27 02 5B |  if_ne	rdlong	local05, local03
286e0     18 22 86 51 |  if_ne	sub	local03, #24
286e4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
286e8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4151
286ec     01 24 06 F6 | 	mov	local04, #1
286f0     48 00 90 FD | 	jmp	#LR__4151
286f4                 | LR__4150
286f4     10 15 02 F6 | 	mov	arg02, local02
286f8     0F 13 02 F6 | 	mov	arg01, local01
286fc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28700     FD 24 02 F6 | 	mov	local04, result1
28704     02 24 16 F2 | 	cmp	local04, #2 wc
28708     01 FA 05 C6 |  if_b	mov	result1, #1
2870c     BC 01 90 CD |  if_b	jmp	#LR__4161
28710     FF FF 7F FF 
28714     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28718     12 FB 01 A6 |  if_e	mov	result1, local04
2871c     AC 01 90 AD |  if_e	jmp	#LR__4161
28720     18 22 06 F1 | 	add	local03, #24
28724     11 27 02 FB | 	rdlong	local05, local03
28728     18 22 86 F1 | 	sub	local03, #24
2872c     13 25 12 F2 | 	cmp	local04, local05 wc
28730     12 FB 01 C6 |  if_b	mov	result1, local04
28734     94 01 90 CD |  if_b	jmp	#LR__4161
28738     10 25 02 F6 | 	mov	local04, local02
2873c                 | LR__4151
2873c     14 22 06 F1 | 	add	local03, #20
28740     11 27 0A FB | 	rdlong	local05, local03 wz
28744     14 22 86 F1 | 	sub	local03, #20
28748     00 FA 05 A6 |  if_e	mov	result1, #0
2874c     7C 01 90 AD |  if_e	jmp	#LR__4161
28750     00 28 06 F6 | 	mov	local06, #0
28754     10 25 0A F2 | 	cmp	local04, local02 wz
28758     74 00 90 5D |  if_ne	jmp	#LR__4154
2875c     12 29 02 F6 | 	mov	local06, local04
28760     01 28 06 F1 | 	add	local06, #1
28764     18 22 06 F1 | 	add	local03, #24
28768     11 27 02 FB | 	rdlong	local05, local03
2876c     18 22 86 F1 | 	sub	local03, #24
28770     13 29 12 F2 | 	cmp	local06, local05 wc
28774     02 28 06 36 |  if_ae	mov	local06, #2
28778     14 15 02 F6 | 	mov	arg02, local06
2877c     0F 13 02 F6 | 	mov	arg01, local01
28780     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28784     FD 26 02 F6 | 	mov	local05, result1
28788     01 26 0E F2 | 	cmp	local05, #1 wz
2878c     FF FF 7F 5F 
28790     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28794     13 FB 01 A6 |  if_e	mov	result1, local05
28798     30 01 90 AD |  if_e	jmp	#LR__4161
2879c     00 26 0E F2 | 	cmp	local05, #0 wz
287a0     2C 00 90 AD |  if_e	jmp	#LR__4153
287a4     10 22 06 F1 | 	add	local03, #16
287a8     11 2B 02 FB | 	rdlong	local07, local03
287ac     10 22 86 F1 | 	sub	local03, #16
287b0     02 2A 16 F2 | 	cmp	local07, #2 wc
287b4     14 00 90 CD |  if_b	jmp	#LR__4152
287b8     18 22 06 F1 | 	add	local03, #24
287bc     11 27 02 FB | 	rdlong	local05, local03
287c0     18 22 86 F1 | 	sub	local03, #24
287c4     13 2B 12 F2 | 	cmp	local07, local05 wc
287c8     15 25 02 C6 |  if_b	mov	local04, local07
287cc                 | LR__4152
287cc     00 28 06 F6 | 	mov	local06, #0
287d0                 | LR__4153
287d0                 | LR__4154
287d0     00 28 0E F2 | 	cmp	local06, #0 wz
287d4     60 00 90 5D |  if_ne	jmp	#LR__4157
287d8     12 29 02 F6 | 	mov	local06, local04
287dc                 | ' 			ncl = scl;
287dc                 | ' 			for (;;) {
287dc                 | LR__4155
287dc     01 28 06 F1 | 	add	local06, #1
287e0     18 22 06 F1 | 	add	local03, #24
287e4     11 27 02 FB | 	rdlong	local05, local03
287e8     18 22 86 F1 | 	sub	local03, #24
287ec     13 29 12 F2 | 	cmp	local06, local05 wc
287f0     02 28 06 36 |  if_ae	mov	local06, #2
287f4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
287f8     00 FA 05 16 |  if_a	mov	result1, #0
287fc     CC 00 90 1D |  if_a	jmp	#LR__4161
28800     14 15 02 F6 | 	mov	arg02, local06
28804     0F 13 02 F6 | 	mov	arg01, local01
28808     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2880c     FD 2A 0A F6 | 	mov	local07, result1 wz
28810     24 00 90 AD |  if_e	jmp	#LR__4156
28814     01 2A 0E F2 | 	cmp	local07, #1 wz
28818     FF FF 7F 5F 
2881c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28820     15 FB 01 A6 |  if_e	mov	result1, local07
28824     A4 00 90 AD |  if_e	jmp	#LR__4161
28828     12 29 0A F2 | 	cmp	local06, local04 wz
2882c     00 FA 05 A6 |  if_e	mov	result1, #0
28830     98 00 90 AD |  if_e	jmp	#LR__4161
28834     A4 FF 9F FD | 	jmp	#LR__4155
28838                 | LR__4156
28838                 | LR__4157
28838     11 13 02 F6 | 	mov	arg01, local03
2883c     14 15 02 F6 | 	mov	arg02, local06
28840     01 16 66 F6 | 	neg	arg03, #1
28844     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28848     FD 2C 0A F6 | 	mov	local08, result1 wz
2884c     1C 00 90 5D |  if_ne	jmp	#LR__4158
28850     00 20 0E F2 | 	cmp	local02, #0 wz
28854     14 00 90 AD |  if_e	jmp	#LR__4158
28858     11 13 02 F6 | 	mov	arg01, local03
2885c     10 15 02 F6 | 	mov	arg02, local02
28860     14 17 02 F6 | 	mov	arg03, local06
28864     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28868     FD 2C 02 F6 | 	mov	local08, result1
2886c                 | LR__4158
2886c     00 2C 0E F2 | 	cmp	local08, #0 wz
28870     4C 00 90 5D |  if_ne	jmp	#LR__4159
28874     10 22 06 F1 | 	add	local03, #16
28878     11 29 62 FC | 	wrlong	local06, local03
2887c     08 22 06 F1 | 	add	local03, #8
28880     11 27 02 FB | 	rdlong	local05, local03
28884     02 26 86 F1 | 	sub	local05, #2
28888     04 22 86 F1 | 	sub	local03, #4
2888c     11 2F 02 FB | 	rdlong	local09, local03
28890     14 22 86 F1 | 	sub	local03, #20
28894     13 2F 1A F2 | 	cmp	local09, local05 wcz
28898     14 22 06 E1 |  if_be	add	local03, #20
2889c     11 2F 02 EB |  if_be	rdlong	local09, local03
288a0     01 2E 86 E1 |  if_be	sub	local09, #1
288a4     11 2F 62 EC |  if_be	wrlong	local09, local03
288a8     14 22 86 E1 |  if_be	sub	local03, #20
288ac     04 22 06 F1 | 	add	local03, #4
288b0     11 27 C2 FA | 	rdbyte	local05, local03
288b4     01 26 46 F5 | 	or	local05, #1
288b8     11 27 42 FC | 	wrbyte	local05, local03
288bc     08 00 90 FD | 	jmp	#LR__4160
288c0                 | LR__4159
288c0     01 2C 0E F2 | 	cmp	local08, #1 wz
288c4     01 28 C6 F6 | 	negz	local06, #1
288c8                 | LR__4160
288c8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
288c8                 | ' 	}
288c8                 | ' 
288c8                 | ' 	return ncl;
288c8     14 FB 01 F6 | 	mov	result1, local06
288cc                 | LR__4161
288cc     A7 F0 03 F6 | 	mov	ptra, fp
288d0     B2 00 A0 FD | 	call	#popregs_
288d4                 | _fatfs_cc_create_chain_ret
288d4     2D 00 64 FD | 	ret
288d8                 | 
288d8                 | _fatfs_cc_dir_clear
288d8     06 4A 05 F6 | 	mov	COUNT_, #6
288dc     A8 00 A0 FD | 	call	#pushregs_
288e0     09 1F 02 F6 | 	mov	local01, arg01
288e4     0A 21 02 F6 | 	mov	local02, arg02
288e8     0F 13 02 F6 | 	mov	arg01, local01
288ec     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
288f0     00 FA 0D F2 | 	cmp	result1, #0 wz
288f4     01 FA 05 56 |  if_ne	mov	result1, #1
288f8     90 00 90 5D |  if_ne	jmp	#LR__4172
288fc     0F 13 02 F6 | 	mov	arg01, local01
28900     10 15 02 F6 | 	mov	arg02, local02
28904     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28908     FD 22 02 F6 | 	mov	local03, result1
2890c     30 1E 06 F1 | 	add	local01, #48
28910     0F 23 62 FC | 	wrlong	local03, local01
28914     04 1E 06 F1 | 	add	local01, #4
28918     0F 13 02 F6 | 	mov	arg01, local01
2891c     00 14 06 F6 | 	mov	arg02, #0
28920     09 16 C6 F9 | 	decod	arg03, #9
28924     98 00 A0 FD | 	call	#\builtin_bytefill_
28928     0F 25 02 F6 | 	mov	local04, local01
2892c                 | ' #line 1667 "ff.c"
2892c                 | ' 	{
2892c                 | ' 		ibuf = fs->win; szb = 1;
2892c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2892c     00 26 06 F6 | 	mov	local05, #0
28930     34 1E 86 F1 | 	sub	local01, #52
28934                 | LR__4170
28934     0A 1E 06 F1 | 	add	local01, #10
28938     0F 29 E2 FA | 	rdword	local06, local01
2893c     0A 1E 86 F1 | 	sub	local01, #10
28940     14 27 12 F2 | 	cmp	local05, local06 wc
28944     2C 00 90 3D |  if_ae	jmp	#LR__4171
28948     01 1E 06 F1 | 	add	local01, #1
2894c     0F 13 C2 FA | 	rdbyte	arg01, local01
28950     01 1E 86 F1 | 	sub	local01, #1
28954     12 15 02 F6 | 	mov	arg02, local04
28958     11 17 02 F6 | 	mov	arg03, local03
2895c     13 17 02 F1 | 	add	arg03, local05
28960     01 18 06 F6 | 	mov	arg04, #1
28964     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28968     00 FA 0D F2 | 	cmp	result1, #0 wz
2896c     01 26 06 A1 |  if_e	add	local05, #1
28970     C0 FF 9F AD |  if_e	jmp	#LR__4170
28974                 | LR__4171
28974                 | ' 	}
28974                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28974     0A 1E 06 F1 | 	add	local01, #10
28978     0F 25 E2 FA | 	rdword	local04, local01
2897c     12 27 0A F2 | 	cmp	local05, local04 wz
28980     00 28 06 A6 |  if_e	mov	local06, #0
28984     01 28 06 56 |  if_ne	mov	local06, #1
28988     14 FB 01 F6 | 	mov	result1, local06
2898c                 | LR__4172
2898c     A7 F0 03 F6 | 	mov	ptra, fp
28990     B2 00 A0 FD | 	call	#popregs_
28994                 | _fatfs_cc_dir_clear_ret
28994     2D 00 64 FD | 	ret
28998                 | 
28998                 | _fatfs_cc_dir_sdi
28998     06 4A 05 F6 | 	mov	COUNT_, #6
2899c     A8 00 A0 FD | 	call	#pushregs_
289a0     09 1F 02 F6 | 	mov	local01, arg01
289a4     0A 21 02 F6 | 	mov	local02, arg02
289a8     0F 23 02 FB | 	rdlong	local03, local01
289ac     00 10 00 FF 
289b0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
289b4     1F 20 CE C7 |  if_b	test	local02, #31 wz
289b8                 | ' 		return FR_INT_ERR;
289b8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
289bc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4186
289c0     10 1E 06 F1 | 	add	local01, #16
289c4     0F 21 62 FC | 	wrlong	local02, local01
289c8     08 1E 86 F1 | 	sub	local01, #8
289cc     0F 25 0A FB | 	rdlong	local04, local01 wz
289d0     08 1E 86 F1 | 	sub	local01, #8
289d4     11 27 C2 AA |  if_e	rdbyte	local05, local03
289d8     03 26 16 A2 |  if_e	cmp	local05, #3 wc
289dc     28 22 06 21 |  if_nc_and_z	add	local03, #40
289e0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
289e4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
289e8     00 24 0E F2 | 	cmp	local04, #0 wz
289ec     3C 00 90 5D |  if_ne	jmp	#LR__4180
289f0     10 27 02 F6 | 	mov	local05, local02
289f4     05 26 46 F0 | 	shr	local05, #5
289f8     08 22 06 F1 | 	add	local03, #8
289fc     11 15 E2 FA | 	rdword	arg02, local03
28a00     08 22 86 F1 | 	sub	local03, #8
28a04     0A 27 12 F2 | 	cmp	local05, arg02 wc
28a08     02 FA 05 36 |  if_ae	mov	result1, #2
28a0c     E4 00 90 3D |  if_ae	jmp	#LR__4186
28a10     28 22 06 F1 | 	add	local03, #40
28a14     11 27 02 FB | 	rdlong	local05, local03
28a18     28 22 86 F1 | 	sub	local03, #40
28a1c     18 1E 06 F1 | 	add	local01, #24
28a20     0F 27 62 FC | 	wrlong	local05, local01
28a24     18 1E 86 F1 | 	sub	local01, #24
28a28     7C 00 90 FD | 	jmp	#LR__4185
28a2c                 | LR__4180
28a2c     0A 22 06 F1 | 	add	local03, #10
28a30     11 29 E2 FA | 	rdword	local06, local03
28a34     0A 22 86 F1 | 	sub	local03, #10
28a38     09 28 66 F0 | 	shl	local06, #9
28a3c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28a3c                 | ' 		while (ofs >= csz) {
28a3c                 | LR__4181
28a3c     14 21 12 F2 | 	cmp	local02, local06 wc
28a40     4C 00 90 CD |  if_b	jmp	#LR__4184
28a44     0F 13 02 F6 | 	mov	arg01, local01
28a48     12 15 02 F6 | 	mov	arg02, local04
28a4c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28a50     FD 24 02 F6 | 	mov	local04, result1
28a54     FF FF 7F FF 
28a58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28a5c     01 FA 05 A6 |  if_e	mov	result1, #1
28a60     90 00 90 AD |  if_e	jmp	#LR__4186
28a64     02 24 16 F2 | 	cmp	local04, #2 wc
28a68     14 00 90 CD |  if_b	jmp	#LR__4182
28a6c     18 22 06 F1 | 	add	local03, #24
28a70     11 27 02 FB | 	rdlong	local05, local03
28a74     18 22 86 F1 | 	sub	local03, #24
28a78     13 25 12 F2 | 	cmp	local04, local05 wc
28a7c     08 00 90 CD |  if_b	jmp	#LR__4183
28a80                 | LR__4182
28a80     02 FA 05 F6 | 	mov	result1, #2
28a84     6C 00 90 FD | 	jmp	#LR__4186
28a88                 | LR__4183
28a88     14 21 82 F1 | 	sub	local02, local06
28a8c     AC FF 9F FD | 	jmp	#LR__4181
28a90                 | LR__4184
28a90     11 13 02 F6 | 	mov	arg01, local03
28a94     12 15 02 F6 | 	mov	arg02, local04
28a98     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28a9c     18 1E 06 F1 | 	add	local01, #24
28aa0     0F FB 61 FC | 	wrlong	result1, local01
28aa4     18 1E 86 F1 | 	sub	local01, #24
28aa8                 | LR__4185
28aa8     14 1E 06 F1 | 	add	local01, #20
28aac     0F 25 62 FC | 	wrlong	local04, local01
28ab0     04 1E 06 F1 | 	add	local01, #4
28ab4     0F 27 0A FB | 	rdlong	local05, local01 wz
28ab8     18 1E 86 F1 | 	sub	local01, #24
28abc     02 FA 05 A6 |  if_e	mov	result1, #2
28ac0     30 00 90 AD |  if_e	jmp	#LR__4186
28ac4     10 29 02 F6 | 	mov	local06, local02
28ac8     09 28 46 F0 | 	shr	local06, #9
28acc     18 1E 06 F1 | 	add	local01, #24
28ad0     0F 27 02 FB | 	rdlong	local05, local01
28ad4     14 27 02 F1 | 	add	local05, local06
28ad8     0F 27 62 FC | 	wrlong	local05, local01
28adc     34 22 06 F1 | 	add	local03, #52
28ae0     FF 21 06 F5 | 	and	local02, #511
28ae4     10 23 02 F1 | 	add	local03, local02
28ae8     04 1E 06 F1 | 	add	local01, #4
28aec     0F 23 62 FC | 	wrlong	local03, local01
28af0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28af0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28af0                 | ' 
28af0                 | ' 	return FR_OK;
28af0     00 FA 05 F6 | 	mov	result1, #0
28af4                 | LR__4186
28af4     A7 F0 03 F6 | 	mov	ptra, fp
28af8     B2 00 A0 FD | 	call	#popregs_
28afc                 | _fatfs_cc_dir_sdi_ret
28afc     2D 00 64 FD | 	ret
28b00                 | 
28b00                 | _fatfs_cc_dir_next
28b00     05 4A 05 F6 | 	mov	COUNT_, #5
28b04     A8 00 A0 FD | 	call	#pushregs_
28b08     09 1F 02 F6 | 	mov	local01, arg01
28b0c     0A 21 02 F6 | 	mov	local02, arg02
28b10     0F 23 02 FB | 	rdlong	local03, local01
28b14     10 1E 06 F1 | 	add	local01, #16
28b18     0F 25 02 FB | 	rdlong	local04, local01
28b1c     10 1E 86 F1 | 	sub	local01, #16
28b20     20 24 06 F1 | 	add	local04, #32
28b24     00 10 00 FF 
28b28     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28b2c     18 1E 06 31 |  if_ae	add	local01, #24
28b30     0F 01 68 3C |  if_ae	wrlong	#0, local01
28b34     18 1E 86 31 |  if_ae	sub	local01, #24
28b38     18 1E 06 F1 | 	add	local01, #24
28b3c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28b40     18 1E 86 F1 | 	sub	local01, #24
28b44     04 FA 05 A6 |  if_e	mov	result1, #4
28b48     64 01 90 AD |  if_e	jmp	#LR__4195
28b4c     FF 25 CE F7 | 	test	local04, #511 wz
28b50     3C 01 90 5D |  if_ne	jmp	#LR__4194
28b54     18 1E 06 F1 | 	add	local01, #24
28b58     0F 15 02 FB | 	rdlong	arg02, local01
28b5c     01 14 06 F1 | 	add	arg02, #1
28b60     0F 15 62 FC | 	wrlong	arg02, local01
28b64     04 1E 86 F1 | 	sub	local01, #4
28b68     0F 15 0A FB | 	rdlong	arg02, local01 wz
28b6c     14 1E 86 F1 | 	sub	local01, #20
28b70     2C 00 90 5D |  if_ne	jmp	#LR__4190
28b74     12 15 02 F6 | 	mov	arg02, local04
28b78     05 14 46 F0 | 	shr	arg02, #5
28b7c     08 22 06 F1 | 	add	local03, #8
28b80     11 21 E2 FA | 	rdword	local02, local03
28b84     08 22 86 F1 | 	sub	local03, #8
28b88     10 15 12 F2 | 	cmp	arg02, local02 wc
28b8c     18 1E 06 31 |  if_ae	add	local01, #24
28b90     0F 01 68 3C |  if_ae	wrlong	#0, local01
28b94                 | ' 				dp->sect = 0; return FR_NO_FILE;
28b94     04 FA 05 36 |  if_ae	mov	result1, #4
28b98     14 01 90 3D |  if_ae	jmp	#LR__4195
28b9c     F0 00 90 FD | 	jmp	#LR__4193
28ba0                 | LR__4190
28ba0     12 13 02 F6 | 	mov	arg01, local04
28ba4     09 12 46 F0 | 	shr	arg01, #9
28ba8     0A 22 06 F1 | 	add	local03, #10
28bac     11 15 E2 FA | 	rdword	arg02, local03
28bb0     0A 22 86 F1 | 	sub	local03, #10
28bb4     01 14 86 F1 | 	sub	arg02, #1
28bb8     0A 13 CA F7 | 	test	arg01, arg02 wz
28bbc     D0 00 90 5D |  if_ne	jmp	#LR__4192
28bc0     0F 13 02 F6 | 	mov	arg01, local01
28bc4     14 1E 06 F1 | 	add	local01, #20
28bc8     0F 15 02 FB | 	rdlong	arg02, local01
28bcc     14 1E 86 F1 | 	sub	local01, #20
28bd0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28bd4     FD 26 02 F6 | 	mov	local05, result1
28bd8     02 26 16 F2 | 	cmp	local05, #2 wc
28bdc     02 FA 05 C6 |  if_b	mov	result1, #2
28be0     CC 00 90 CD |  if_b	jmp	#LR__4195
28be4     FF FF 7F FF 
28be8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28bec     01 FA 05 A6 |  if_e	mov	result1, #1
28bf0     BC 00 90 AD |  if_e	jmp	#LR__4195
28bf4     18 22 06 F1 | 	add	local03, #24
28bf8     11 15 02 FB | 	rdlong	arg02, local03
28bfc     18 22 86 F1 | 	sub	local03, #24
28c00     0A 27 12 F2 | 	cmp	local05, arg02 wc
28c04     68 00 90 CD |  if_b	jmp	#LR__4191
28c08     00 20 0E F2 | 	cmp	local02, #0 wz
28c0c     18 1E 06 A1 |  if_e	add	local01, #24
28c10     0F 01 68 AC |  if_e	wrlong	#0, local01
28c14                 | ' 						dp->sect = 0; return FR_NO_FILE;
28c14     04 FA 05 A6 |  if_e	mov	result1, #4
28c18     94 00 90 AD |  if_e	jmp	#LR__4195
28c1c     0F 13 02 F6 | 	mov	arg01, local01
28c20     14 1E 06 F1 | 	add	local01, #20
28c24     0F 15 02 FB | 	rdlong	arg02, local01
28c28     14 1E 86 F1 | 	sub	local01, #20
28c2c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28c30     FD 26 0A F6 | 	mov	local05, result1 wz
28c34     07 FA 05 A6 |  if_e	mov	result1, #7
28c38     74 00 90 AD |  if_e	jmp	#LR__4195
28c3c     01 26 0E F2 | 	cmp	local05, #1 wz
28c40     02 FA 05 A6 |  if_e	mov	result1, #2
28c44     68 00 90 AD |  if_e	jmp	#LR__4195
28c48     FF FF 7F FF 
28c4c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28c50     01 FA 05 A6 |  if_e	mov	result1, #1
28c54     58 00 90 AD |  if_e	jmp	#LR__4195
28c58     13 15 02 F6 | 	mov	arg02, local05
28c5c     11 13 02 F6 | 	mov	arg01, local03
28c60     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28c64     00 FA 0D F2 | 	cmp	result1, #0 wz
28c68     01 FA 05 56 |  if_ne	mov	result1, #1
28c6c     40 00 90 5D |  if_ne	jmp	#LR__4195
28c70                 | LR__4191
28c70     14 1E 06 F1 | 	add	local01, #20
28c74     0F 27 62 FC | 	wrlong	local05, local01
28c78     11 13 02 F6 | 	mov	arg01, local03
28c7c     13 15 02 F6 | 	mov	arg02, local05
28c80     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28c84     04 1E 06 F1 | 	add	local01, #4
28c88     0F FB 61 FC | 	wrlong	result1, local01
28c8c     18 1E 86 F1 | 	sub	local01, #24
28c90                 | LR__4192
28c90                 | LR__4193
28c90                 | LR__4194
28c90     10 1E 06 F1 | 	add	local01, #16
28c94     0F 25 62 FC | 	wrlong	local04, local01
28c98     34 22 06 F1 | 	add	local03, #52
28c9c     FF 25 06 F5 | 	and	local04, #511
28ca0     12 23 02 F1 | 	add	local03, local04
28ca4     0C 1E 06 F1 | 	add	local01, #12
28ca8     0F 23 62 FC | 	wrlong	local03, local01
28cac                 | ' #line 1771 "ff.c"
28cac                 | ' 				}
28cac                 | ' 				dp->clust = clst;
28cac                 | ' 				dp->sect = clst2sect(fs, clst);
28cac                 | ' 			}
28cac                 | ' 		}
28cac                 | ' 	}
28cac                 | ' 	dp->dptr = ofs;
28cac                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28cac                 | ' 
28cac                 | ' 	return FR_OK;
28cac     00 FA 05 F6 | 	mov	result1, #0
28cb0                 | LR__4195
28cb0     A7 F0 03 F6 | 	mov	ptra, fp
28cb4     B2 00 A0 FD | 	call	#popregs_
28cb8                 | _fatfs_cc_dir_next_ret
28cb8     2D 00 64 FD | 	ret
28cbc                 | 
28cbc                 | _fatfs_cc_dir_alloc
28cbc     08 4A 05 F6 | 	mov	COUNT_, #8
28cc0     A8 00 A0 FD | 	call	#pushregs_
28cc4     09 1F 02 F6 | 	mov	local01, arg01
28cc8     0A 21 02 F6 | 	mov	local02, arg02
28ccc     0F 23 02 FB | 	rdlong	local03, local01
28cd0     0F 13 02 F6 | 	mov	arg01, local01
28cd4     00 14 06 F6 | 	mov	arg02, #0
28cd8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28cdc     FD 24 0A F6 | 	mov	local04, result1 wz
28ce0     70 00 90 5D |  if_ne	jmp	#LR__4204
28ce4     00 26 06 F6 | 	mov	local05, #0
28ce8                 | ' 		n = 0;
28ce8                 | ' 		do {
28ce8                 | LR__4200
28ce8     18 1E 06 F1 | 	add	local01, #24
28cec     0F 15 02 FB | 	rdlong	arg02, local01
28cf0     18 1E 86 F1 | 	sub	local01, #24
28cf4     11 13 02 F6 | 	mov	arg01, local03
28cf8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28cfc     FD 24 0A F6 | 	mov	local04, result1 wz
28d00     50 00 90 5D |  if_ne	jmp	#LR__4203
28d04     1C 1E 06 F1 | 	add	local01, #28
28d08     0F 29 02 FB | 	rdlong	local06, local01
28d0c     1C 1E 86 F1 | 	sub	local01, #28
28d10     14 29 C2 FA | 	rdbyte	local06, local06
28d14     E5 28 0E F2 | 	cmp	local06, #229 wz
28d18     1C 1E 06 51 |  if_ne	add	local01, #28
28d1c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28d20     1C 1E 86 51 |  if_ne	sub	local01, #28
28d24     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28d28     10 00 90 5D |  if_ne	jmp	#LR__4201
28d2c     01 26 06 F1 | 	add	local05, #1
28d30     10 27 0A F2 | 	cmp	local05, local02 wz
28d34     1C 00 90 AD |  if_e	jmp	#LR__4203
28d38     04 00 90 FD | 	jmp	#LR__4202
28d3c                 | LR__4201
28d3c     00 26 06 F6 | 	mov	local05, #0
28d40                 | LR__4202
28d40     0F 13 02 F6 | 	mov	arg01, local01
28d44     01 14 06 F6 | 	mov	arg02, #1
28d48     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28d4c     FD 24 0A F6 | 	mov	local04, result1 wz
28d50     94 FF 9F AD |  if_e	jmp	#LR__4200
28d54                 | LR__4203
28d54                 | LR__4204
28d54     04 24 0E F2 | 	cmp	local04, #4 wz
28d58     07 24 06 A6 |  if_e	mov	local04, #7
28d5c                 | ' 	return res;
28d5c     12 FB 01 F6 | 	mov	result1, local04
28d60     A7 F0 03 F6 | 	mov	ptra, fp
28d64     B2 00 A0 FD | 	call	#popregs_
28d68                 | _fatfs_cc_dir_alloc_ret
28d68     2D 00 64 FD | 	ret
28d6c                 | 
28d6c                 | _fatfs_cc_ld_clust
28d6c     09 01 02 F6 | 	mov	_var01, arg01
28d70     0A 13 02 F6 | 	mov	arg01, arg02
28d74     1A 12 06 F1 | 	add	arg01, #26
28d78                 | ' {
28d78                 | ' 
28d78                 | ' 	return *((WORD*)ptr);
28d78     09 FB E1 FA | 	rdword	result1, arg01
28d7c     FD 12 32 F9 | 	getword	arg01, result1, #0
28d80     00 01 C2 FA | 	rdbyte	_var01, _var01
28d84     03 00 0E F2 | 	cmp	_var01, #3 wz
28d88     14 14 06 A1 |  if_e	add	arg02, #20
28d8c                 | ' {
28d8c                 | ' 
28d8c                 | ' 	return *((WORD*)ptr);
28d8c     0A FB E1 AA |  if_e	rdword	result1, arg02
28d90     10 FA 65 A0 |  if_e	shl	result1, #16
28d94     FD 12 42 A5 |  if_e	or	arg01, result1
28d98                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28d98                 | ' 	}
28d98                 | ' 
28d98                 | ' 	return cl;
28d98     09 FB 01 F6 | 	mov	result1, arg01
28d9c                 | _fatfs_cc_ld_clust_ret
28d9c     2D 00 64 FD | 	ret
28da0                 | 
28da0                 | _fatfs_cc_st_clust
28da0     09 01 02 F6 | 	mov	_var01, arg01
28da4     0A 13 02 F6 | 	mov	arg01, arg02
28da8     1A 12 06 F1 | 	add	arg01, #26
28dac     09 17 52 FC | 	wrword	arg03, arg01
28db0     00 01 C2 FA | 	rdbyte	_var01, _var01
28db4     03 00 0E F2 | 	cmp	_var01, #3 wz
28db8     14 14 06 A1 |  if_e	add	arg02, #20
28dbc     10 16 46 A0 |  if_e	shr	arg03, #16
28dc0     0A 17 52 AC |  if_e	wrword	arg03, arg02
28dc4                 | _fatfs_cc_st_clust_ret
28dc4     2D 00 64 FD | 	ret
28dc8                 | 
28dc8                 | _fatfs_cc_cmp_lfn
28dc8     07 4A 05 F6 | 	mov	COUNT_, #7
28dcc     A8 00 A0 FD | 	call	#pushregs_
28dd0     09 1F 02 F6 | 	mov	local01, arg01
28dd4     0A 13 02 F6 | 	mov	arg01, arg02
28dd8     1A 12 06 F1 | 	add	arg01, #26
28ddc                 | ' {
28ddc                 | ' 
28ddc                 | ' 	return *((WORD*)ptr);
28ddc     09 FB E9 FA | 	rdword	result1, arg01 wz
28de0     00 FA 05 56 |  if_ne	mov	result1, #0
28de4     E0 00 90 5D |  if_ne	jmp	#LR__4216
28de8     0A 21 C2 FA | 	rdbyte	local02, arg02
28dec     3F 20 06 F5 | 	and	local02, #63
28df0     01 20 86 F1 | 	sub	local02, #1
28df4     0D 20 06 FD | 	qmul	local02, #13
28df8                 | ' 
28df8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
28df8                 | ' 
28df8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28df8     01 22 06 F6 | 	mov	local03, #1
28dfc     00 24 06 F6 | 	mov	local04, #0
28e00     18 26 62 FD | 	getqx	local05
28e04                 | LR__4210
28e04     0D 24 16 F2 | 	cmp	local04, #13 wc
28e08     9C 00 90 3D |  if_ae	jmp	#LR__4215
28e0c     0A 13 02 F6 | 	mov	arg01, arg02
28e10     12 21 02 F6 | 	mov	local02, local04
28e14     01 00 00 FF 
28e18     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
28e1c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28e20     10 21 C2 FA | 	rdbyte	local02, local02
28e24     01 20 06 FA | 	mul	local02, #1
28e28     10 13 02 F1 | 	add	arg01, local02
28e2c     01 00 00 FF 
28e30     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
28e34                 | ' {
28e34                 | ' 
28e34                 | ' 	return *((WORD*)ptr);
28e34     09 FB E1 FA | 	rdword	result1, arg01
28e38     FD 28 02 F6 | 	mov	local06, result1
28e3c     11 21 02 F6 | 	mov	local02, local03
28e40     0F 20 4E F7 | 	zerox	local02, #15 wz
28e44     44 00 90 AD |  if_e	jmp	#LR__4213
28e48     00 27 16 F2 | 	cmp	local05, #256 wc
28e4c     2C 00 90 3D |  if_ae	jmp	#LR__4211
28e50     14 13 32 F9 | 	getword	arg01, local06, #0
28e54     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28e58     FD 20 02 F6 | 	mov	local02, result1
28e5c     13 23 02 F6 | 	mov	local03, local05
28e60     01 22 66 F0 | 	shl	local03, #1
28e64     0F 23 02 F1 | 	add	local03, local01
28e68     11 13 E2 FA | 	rdword	arg01, local03
28e6c     01 26 06 F1 | 	add	local05, #1
28e70     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28e74     FD 20 0A F2 | 	cmp	local02, result1 wz
28e78     08 00 90 AD |  if_e	jmp	#LR__4212
28e7c                 | LR__4211
28e7c                 | ' 				return 0;
28e7c     00 FA 05 F6 | 	mov	result1, #0
28e80     44 00 90 FD | 	jmp	#LR__4216
28e84                 | LR__4212
28e84     14 23 02 F6 | 	mov	local03, local06
28e88     14 00 90 FD | 	jmp	#LR__4214
28e8c                 | LR__4213
28e8c     14 29 32 F9 | 	getword	local06, local06, #0
28e90     7F 00 00 FF 
28e94     FF 29 0E F2 | 	cmp	local06, ##65535 wz
28e98     00 FA 05 56 |  if_ne	mov	result1, #0
28e9c     28 00 90 5D |  if_ne	jmp	#LR__4216
28ea0                 | LR__4214
28ea0     01 24 06 F1 | 	add	local04, #1
28ea4     5C FF 9F FD | 	jmp	#LR__4210
28ea8                 | LR__4215
28ea8     0A 21 C2 FA | 	rdbyte	local02, arg02
28eac     40 20 CE F7 | 	test	local02, #64 wz
28eb0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
28eb4     01 26 66 50 |  if_ne	shl	local05, #1
28eb8     0F 27 02 51 |  if_ne	add	local05, local01
28ebc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
28ec0     00 FA 05 56 |  if_ne	mov	result1, #0
28ec4                 | ' 
28ec4                 | ' 	return 1;
28ec4     01 FA 05 A6 |  if_e	mov	result1, #1
28ec8                 | LR__4216
28ec8     A7 F0 03 F6 | 	mov	ptra, fp
28ecc     B2 00 A0 FD | 	call	#popregs_
28ed0                 | _fatfs_cc_cmp_lfn_ret
28ed0     2D 00 64 FD | 	ret
28ed4                 | 
28ed4                 | _fatfs_cc_pick_lfn
28ed4     09 01 02 F6 | 	mov	_var01, arg01
28ed8     0A 13 02 F6 | 	mov	arg01, arg02
28edc     1A 12 06 F1 | 	add	arg01, #26
28ee0                 | ' {
28ee0                 | ' 
28ee0                 | ' 	return *((WORD*)ptr);
28ee0     09 FB E9 FA | 	rdword	result1, arg01 wz
28ee4     00 FA 05 56 |  if_ne	mov	result1, #0
28ee8     D4 00 90 5D |  if_ne	jmp	#LR__4225
28eec     0A 03 C2 FA | 	rdbyte	_var02, arg02
28ef0     40 02 26 F5 | 	andn	_var02, #64
28ef4     01 02 86 F1 | 	sub	_var02, #1
28ef8     0D 02 06 FD | 	qmul	_var02, #13
28efc                 | ' 
28efc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
28efc                 | ' 
28efc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28efc     01 04 06 F6 | 	mov	_var03, #1
28f00     00 06 06 F6 | 	mov	_var04, #0
28f04     18 08 62 FD | 	getqx	_var05
28f08                 | LR__4220
28f08     0D 06 16 F2 | 	cmp	_var04, #13 wc
28f0c     80 00 90 3D |  if_ae	jmp	#LR__4223
28f10     0A 13 02 F6 | 	mov	arg01, arg02
28f14     03 03 02 F6 | 	mov	_var02, _var04
28f18     01 00 00 FF 
28f1c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
28f20     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
28f24     01 03 C2 FA | 	rdbyte	_var02, _var02
28f28     01 02 06 FA | 	mul	_var02, #1
28f2c     01 13 02 F1 | 	add	arg01, _var02
28f30     01 00 00 FF 
28f34     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
28f38                 | ' {
28f38                 | ' 
28f38                 | ' 	return *((WORD*)ptr);
28f38     09 FB E1 FA | 	rdword	result1, arg01
28f3c     FD 0A 02 F6 | 	mov	_var06, result1
28f40     02 03 02 F6 | 	mov	_var02, _var03
28f44     0F 02 4E F7 | 	zerox	_var02, #15 wz
28f48     28 00 90 AD |  if_e	jmp	#LR__4221
28f4c     00 09 16 F2 | 	cmp	_var05, #256 wc
28f50     00 FA 05 36 |  if_ae	mov	result1, #0
28f54     68 00 90 3D |  if_ae	jmp	#LR__4225
28f58     04 03 02 F6 | 	mov	_var02, _var05
28f5c     01 02 66 F0 | 	shl	_var02, #1
28f60     00 03 02 F1 | 	add	_var02, _var01
28f64     05 05 02 F6 | 	mov	_var03, _var06
28f68     01 05 52 FC | 	wrword	_var03, _var02
28f6c     01 08 06 F1 | 	add	_var05, #1
28f70     14 00 90 FD | 	jmp	#LR__4222
28f74                 | LR__4221
28f74     05 0B 32 F9 | 	getword	_var06, _var06, #0
28f78     7F 00 00 FF 
28f7c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
28f80     00 FA 05 56 |  if_ne	mov	result1, #0
28f84     38 00 90 5D |  if_ne	jmp	#LR__4225
28f88                 | LR__4222
28f88     01 06 06 F1 | 	add	_var04, #1
28f8c     78 FF 9F FD | 	jmp	#LR__4220
28f90                 | LR__4223
28f90     0A 03 C2 FA | 	rdbyte	_var02, arg02
28f94     40 02 CE F7 | 	test	_var02, #64 wz
28f98     02 0D 02 56 |  if_ne	mov	_var07, _var03
28f9c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
28fa0     18 00 90 AD |  if_e	jmp	#LR__4224
28fa4     00 09 16 F2 | 	cmp	_var05, #256 wc
28fa8     00 FA 05 36 |  if_ae	mov	result1, #0
28fac     10 00 90 3D |  if_ae	jmp	#LR__4225
28fb0     01 08 66 F0 | 	shl	_var05, #1
28fb4     00 09 02 F1 | 	add	_var05, _var01
28fb8     04 01 58 FC | 	wrword	#0, _var05
28fbc                 | LR__4224
28fbc                 | ' 		lfnbuf[i] = 0;
28fbc                 | ' 	}
28fbc                 | ' 
28fbc                 | ' 	return 1;
28fbc     01 FA 05 F6 | 	mov	result1, #1
28fc0                 | LR__4225
28fc0                 | _fatfs_cc_pick_lfn_ret
28fc0     2D 00 64 FD | 	ret
28fc4                 | 
28fc4                 | _fatfs_cc_put_lfn
28fc4     0D 14 06 F1 | 	add	arg02, #13
28fc8     0A 19 42 FC | 	wrbyte	arg04, arg02
28fcc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
28fd0     01 18 86 F1 | 	sub	arg04, #1
28fd4     0D 18 06 FD | 	qmul	arg04, #13
28fd8     09 01 02 F6 | 	mov	_var01, arg01
28fdc     02 14 86 F1 | 	sub	arg02, #2
28fe0     0A 1F 48 FC | 	wrbyte	#15, arg02
28fe4     01 14 06 F1 | 	add	arg02, #1
28fe8     0A 01 48 FC | 	wrbyte	#0, arg02
28fec     0C 14 86 F1 | 	sub	arg02, #12
28ff0     0A 13 02 F6 | 	mov	arg01, arg02
28ff4     1A 12 06 F1 | 	add	arg01, #26
28ff8     09 01 58 FC | 	wrword	#0, arg01
28ffc     00 02 06 F6 | 	mov	_var02, #0
29000     00 04 06 F6 | 	mov	_var03, #0
29004                 | ' 	BYTE* dir,
29004                 | ' 	BYTE ord,
29004                 | ' 	BYTE sum
29004                 | ' )
29004                 | ' {
29004                 | ' 	UINT i, s;
29004                 | ' 	WCHAR wc;
29004                 | ' 
29004                 | ' 
29004                 | ' 	dir[ 13 ] = sum;
29004                 | ' 	dir[ 11 ] =  0x0F ;
29004                 | ' 	dir[ 12 ] = 0;
29004                 | ' 	st_word(dir +  26 , 0);
29004                 | ' 
29004                 | ' 	i = (ord - 1) * 13;
29004                 | ' 	s = wc = 0;
29004                 | ' 	do {
29004     01 00 00 FF 
29008     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2900c     18 06 62 FD | 	getqx	_var04
29010     97 2A 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
29014                 | LR__4230
29014     01 19 32 F9 | 	getword	arg04, _var02, #0
29018     7F 00 00 FF 
2901c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29020     03 13 02 56 |  if_ne	mov	arg01, _var04
29024     01 06 06 51 |  if_ne	add	_var04, #1
29028     01 12 66 50 |  if_ne	shl	arg01, #1
2902c     00 13 02 51 |  if_ne	add	arg01, _var01
29030     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29034     0A 13 02 F6 | 	mov	arg01, arg02
29038     02 19 02 F6 | 	mov	arg04, _var03
2903c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29040     0C 19 C2 FA | 	rdbyte	arg04, arg04
29044     01 18 06 FA | 	mul	arg04, #1
29048     0C 13 02 F1 | 	add	arg01, arg04
2904c     09 03 52 FC | 	wrword	_var02, arg01
29050     01 19 02 F6 | 	mov	arg04, _var02
29054     0F 18 4E F7 | 	zerox	arg04, #15 wz
29058     0F 02 CE A9 |  if_e	bmask	_var02, #15
2905c     01 04 06 F1 | 	add	_var03, #1
29060     0D 04 16 F2 | 	cmp	_var03, #13 wc
29064     AC FF 9F CD |  if_b	jmp	#LR__4230
29068                 | LR__4231
29068     01 00 00 FF 
2906c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29070     01 03 32 F9 | 	getword	_var02, _var02, #0
29074     7F 00 00 FF 
29078     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2907c     01 06 66 50 |  if_ne	shl	_var04, #1
29080     00 07 02 51 |  if_ne	add	_var04, _var01
29084     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29088     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2908c     40 16 46 A5 |  if_e	or	arg03, #64
29090     0A 17 42 FC | 	wrbyte	arg03, arg02
29094                 | _fatfs_cc_put_lfn_ret
29094     2D 00 64 FD | 	ret
29098                 | 
29098                 | _fatfs_cc_gen_numname
29098     08 4A 05 F6 | 	mov	COUNT_, #8
2909c     A8 00 A0 FD | 	call	#pushregs_
290a0     2C F0 07 F1 | 	add	ptra, #44
290a4     09 1F 02 F6 | 	mov	local01, arg01
290a8     0A 21 02 F6 | 	mov	local02, arg02
290ac     0B 23 02 F6 | 	mov	local03, arg03
290b0     0C 25 02 F6 | 	mov	local04, arg04
290b4     0F 13 02 F6 | 	mov	arg01, local01
290b8     10 15 02 F6 | 	mov	arg02, local02
290bc     0B 16 06 F6 | 	mov	arg03, #11
290c0     84 75 BF FD | 	call	#__system____builtin_memmove
290c4     06 24 16 F2 | 	cmp	local04, #6 wc
290c8     48 00 90 CD |  if_b	jmp	#LR__4245
290cc     12 27 02 F6 | 	mov	local05, local04
290d0     97 1E 48 FB | 	callpa	#(@LR__4243-@LR__4240)>>2,fcache_load_ptr_
290d4                 | ' 		sreg = seq;
290d4                 | ' 		while (*lfn) {
290d4                 | LR__4240
290d4     11 29 EA FA | 	rdword	local06, local03 wz
290d8     34 00 90 AD |  if_e	jmp	#LR__4244
290dc     11 2B E2 FA | 	rdword	local07, local03
290e0                 | ' 			wc = *lfn++;
290e0                 | ' 			for (i = 0; i < 16; i++) {
290e0     02 22 06 F1 | 	add	local03, #2
290e4     10 12 DC FC | 	rep	@LR__4242, #16
290e8                 | LR__4241
290e8     01 26 66 F0 | 	shl	local05, #1
290ec     15 29 32 F9 | 	getword	local06, local07, #0
290f0     01 28 06 F5 | 	and	local06, #1
290f4     14 27 02 F1 | 	add	local05, local06
290f8     15 2B 32 F9 | 	getword	local07, local07, #0
290fc     01 2A 46 F0 | 	shr	local07, #1
29100     10 26 2E F4 | 	testbn	local05, #16 wz
29104     88 00 00 5F 
29108     21 26 66 55 |  if_ne	xor	local05, ##69665
2910c                 | LR__4242
2910c     C4 FF 9F FD | 	jmp	#LR__4240
29110                 | LR__4243
29110                 | LR__4244
29110     13 25 02 F6 | 	mov	local04, local05
29114                 | LR__4245
29114     07 2A 06 F6 | 	mov	local07, #7
29118                 | ' 			}
29118                 | ' 		}
29118                 | ' 		seq = (UINT)sreg;
29118                 | ' 	}
29118                 | ' 
29118                 | ' 
29118                 | ' 	i = 7;
29118                 | ' 	do {
29118     10 4E 05 F1 | 	add	fp, #16
2911c     97 1A 48 FB | 	callpa	#(@LR__4247-@LR__4246)>>2,fcache_load_ptr_
29120                 | LR__4246
29120     12 27 42 F8 | 	getnib	local05, local04, #0
29124     30 26 06 F1 | 	add	local05, #48
29128     04 24 46 F0 | 	shr	local04, #4
2912c     13 29 E2 F8 | 	getbyte	local06, local05, #0
29130     3A 28 16 F2 | 	cmp	local06, #58 wc
29134     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29138     07 26 06 31 |  if_ae	add	local05, #7
2913c     15 29 02 F6 | 	mov	local06, local07
29140     01 2A 8E F1 | 	sub	local07, #1 wz
29144     A7 28 02 F1 | 	add	local06, fp
29148     14 27 42 FC | 	wrbyte	local05, local06
2914c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29150     CC FF 9F 5D |  if_ne	jmp	#LR__4246
29154                 | LR__4247
29154     15 29 02 F6 | 	mov	local06, local07
29158     A7 28 02 F1 | 	add	local06, fp
2915c     14 FD 48 FC | 	wrbyte	#126, local06
29160                 | ' 	ns[i] = '~';
29160                 | ' 
29160                 | ' 
29160                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29160     00 26 06 F6 | 	mov	local05, #0
29164     10 4E 85 F1 | 	sub	fp, #16
29168     97 2A 48 FB | 	callpa	#(@LR__4250-@LR__4248)>>2,fcache_load_ptr_
2916c                 | LR__4248
2916c     15 27 12 F2 | 	cmp	local05, local07 wc
29170     4C 00 90 3D |  if_ae	jmp	#LR__4251
29174     13 29 02 F6 | 	mov	local06, local05
29178     0F 29 02 F1 | 	add	local06, local01
2917c     14 29 C2 FA | 	rdbyte	local06, local06
29180     20 28 0E F2 | 	cmp	local06, #32 wz
29184     38 00 90 AD |  if_e	jmp	#LR__4251
29188     13 13 02 F6 | 	mov	arg01, local05
2918c     0F 13 02 F1 | 	add	arg01, local01
29190     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29194     00 FA 05 56 |  if_ne	mov	result1, #0
29198                 | ' 
29198                 | ' 	return 0;
29198     00 FA 05 A6 |  if_e	mov	result1, #0
2919c     00 FA 0D F2 | 	cmp	result1, #0 wz
291a0     14 00 90 AD |  if_e	jmp	#LR__4249
291a4     15 29 02 F6 | 	mov	local06, local07
291a8     01 28 86 F1 | 	sub	local06, #1
291ac     14 27 0A F2 | 	cmp	local05, local06 wz
291b0     0C 00 90 AD |  if_e	jmp	#LR__4251
291b4     01 26 06 F1 | 	add	local05, #1
291b8                 | LR__4249
291b8     01 26 06 F1 | 	add	local05, #1
291bc     AC FF 9F FD | 	jmp	#LR__4248
291c0                 | LR__4250
291c0                 | LR__4251
291c0     97 20 48 FB | 	callpa	#(@LR__4255-@LR__4252)>>2,fcache_load_ptr_
291c4                 | ' 			j++;
291c4                 | ' 		}
291c4                 | ' 	}
291c4                 | ' 	do {
291c4                 | LR__4252
291c4     13 29 02 F6 | 	mov	local06, local05
291c8     0F 29 02 F1 | 	add	local06, local01
291cc     08 2A 16 F2 | 	cmp	local07, #8 wc
291d0     01 26 06 F1 | 	add	local05, #1
291d4     1C 00 90 3D |  if_ae	jmp	#LR__4253
291d8     15 25 02 F6 | 	mov	local04, local07
291dc     10 4E 05 F1 | 	add	fp, #16
291e0     A7 24 02 F1 | 	add	local04, fp
291e4     12 2D C2 FA | 	rdbyte	local08, local04
291e8     01 2A 06 F1 | 	add	local07, #1
291ec     10 4E 85 F1 | 	sub	fp, #16
291f0     04 00 90 FD | 	jmp	#LR__4254
291f4                 | LR__4253
291f4     20 2C 06 F6 | 	mov	local08, #32
291f8                 | LR__4254
291f8     14 2D 42 FC | 	wrbyte	local08, local06
291fc     08 26 16 F2 | 	cmp	local05, #8 wc
29200     C0 FF 9F CD |  if_b	jmp	#LR__4252
29204                 | LR__4255
29204     A7 F0 03 F6 | 	mov	ptra, fp
29208     B2 00 A0 FD | 	call	#popregs_
2920c                 | _fatfs_cc_gen_numname_ret
2920c     2D 00 64 FD | 	ret
29210                 | 
29210                 | _fatfs_cc_sum_sfn
29210     00 00 06 F6 | 	mov	_var01, #0
29214                 | ' )
29214                 | ' {
29214                 | ' 	BYTE sum = 0;
29214                 | ' 	UINT n = 11;
29214                 | ' 
29214                 | ' 	do {
29214     97 12 48 FB | 	callpa	#(@LR__4262-@LR__4260)>>2,fcache_load_ptr_
29218                 | LR__4260
29218     0B 10 DC FC | 	rep	@LR__4263, #11
2921c                 | LR__4261
2921c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29220     01 FA 45 F0 | 	shr	result1, #1
29224     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29228     07 00 66 F0 | 	shl	_var01, #7
2922c     00 FB 01 F1 | 	add	result1, _var01
29230     09 01 C2 FA | 	rdbyte	_var01, arg01
29234     FD 00 02 F1 | 	add	_var01, result1
29238     01 12 06 F1 | 	add	arg01, #1
2923c                 | LR__4262
2923c                 | LR__4263
2923c                 | ' 	return sum;
2923c     00 FB 01 F6 | 	mov	result1, _var01
29240                 | _fatfs_cc_sum_sfn_ret
29240     2D 00 64 FD | 	ret
29244                 | 
29244                 | _fatfs_cc_dir_read
29244     0C 4A 05 F6 | 	mov	COUNT_, #12
29248     A8 00 A0 FD | 	call	#pushregs_
2924c     09 1F 02 F6 | 	mov	local01, arg01
29250     0A 21 02 F6 | 	mov	local02, arg02
29254     04 22 06 F6 | 	mov	local03, #4
29258     0F 25 02 FB | 	rdlong	local04, local01
2925c     FF 26 06 F6 | 	mov	local05, #255
29260     FF 28 06 F6 | 	mov	local06, #255
29264                 | ' )
29264                 | ' {
29264                 | ' 	FRESULT res = FR_NO_FILE;
29264                 | ' 	FATFS *fs = dp->obj.fs;
29264                 | ' 	BYTE attr, b;
29264                 | ' 
29264                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29264                 | ' 
29264                 | ' 
29264                 | ' 	while (dp->sect) {
29264                 | LR__4270
29264     18 1E 06 F1 | 	add	local01, #24
29268     0F FB 09 FB | 	rdlong	result1, local01 wz
2926c     18 1E 86 F1 | 	sub	local01, #24
29270     AC 01 90 AD |  if_e	jmp	#LR__4280
29274     18 1E 06 F1 | 	add	local01, #24
29278     0F 15 02 FB | 	rdlong	arg02, local01
2927c     18 1E 86 F1 | 	sub	local01, #24
29280     12 13 02 F6 | 	mov	arg01, local04
29284     AC ED BF FD | 	call	#_fatfs_cc_move_window
29288     FD 22 0A F6 | 	mov	local03, result1 wz
2928c     90 01 90 5D |  if_ne	jmp	#LR__4280
29290     1C 1E 06 F1 | 	add	local01, #28
29294     0F FB 01 FB | 	rdlong	result1, local01
29298     1C 1E 86 F1 | 	sub	local01, #28
2929c     FD 2A C2 FA | 	rdbyte	local07, result1
292a0     15 FB 01 F6 | 	mov	result1, local07
292a4     07 FA 4D F7 | 	zerox	result1, #7 wz
292a8     04 22 06 A6 |  if_e	mov	local03, #4
292ac                 | ' 			res = FR_NO_FILE; break;
292ac     70 01 90 AD |  if_e	jmp	#LR__4280
292b0     1C 1E 06 F1 | 	add	local01, #28
292b4     0F 2D 02 FB | 	rdlong	local08, local01
292b8     0B 2C 06 F1 | 	add	local08, #11
292bc     16 2F C2 FA | 	rdbyte	local09, local08
292c0     3F 2E 06 F5 | 	and	local09, #63
292c4     16 1E 86 F1 | 	sub	local01, #22
292c8     0F 2F 42 FC | 	wrbyte	local09, local01
292cc     06 1E 86 F1 | 	sub	local01, #6
292d0     15 FB E1 F8 | 	getbyte	result1, local07, #0
292d4     E5 FA 0D F2 | 	cmp	result1, #229 wz
292d8     15 2D 02 56 |  if_ne	mov	local08, local07
292dc     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
292e0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
292e4     1C 00 90 AD |  if_e	jmp	#LR__4271
292e8     00 30 06 F6 | 	mov	local10, #0
292ec     17 2D E2 F8 | 	getbyte	local08, local09, #0
292f0     20 2C 26 F5 | 	andn	local08, #32
292f4     08 2C 0E F2 | 	cmp	local08, #8 wz
292f8     01 30 06 A6 |  if_e	mov	local10, #1
292fc     10 31 0A F2 | 	cmp	local10, local02 wz
29300     08 00 90 AD |  if_e	jmp	#LR__4272
29304                 | LR__4271
29304     FF 26 06 F6 | 	mov	local05, #255
29308     00 01 90 FD | 	jmp	#LR__4279
2930c                 | LR__4272
2930c     17 2F E2 F8 | 	getbyte	local09, local09, #0
29310     0F 2E 0E F2 | 	cmp	local09, #15 wz
29314     B4 00 90 5D |  if_ne	jmp	#LR__4276
29318     15 33 E2 F8 | 	getbyte	local11, local07, #0
2931c     40 32 CE F7 | 	test	local11, #64 wz
29320     30 00 90 AD |  if_e	jmp	#LR__4273
29324     1C 1E 06 F1 | 	add	local01, #28
29328     0F 33 02 FB | 	rdlong	local11, local01
2932c     0D 32 06 F1 | 	add	local11, #13
29330     19 29 C2 FA | 	rdbyte	local06, local11
29334     15 2B E2 F8 | 	getbyte	local07, local07, #0
29338     BF 2A 06 F5 | 	and	local07, #191
2933c     15 27 02 F6 | 	mov	local05, local07
29340     0C 1E 86 F1 | 	sub	local01, #12
29344     0F 33 02 FB | 	rdlong	local11, local01
29348     1C 1E 06 F1 | 	add	local01, #28
2934c     0F 33 62 FC | 	wrlong	local11, local01
29350     2C 1E 86 F1 | 	sub	local01, #44
29354                 | LR__4273
29354     15 2D E2 F8 | 	getbyte	local08, local07, #0
29358     13 31 E2 F8 | 	getbyte	local10, local05, #0
2935c     18 2D 0A F2 | 	cmp	local08, local10 wz
29360     5C 00 90 5D |  if_ne	jmp	#LR__4274
29364     14 31 E2 F8 | 	getbyte	local10, local06, #0
29368     1C 1E 06 F1 | 	add	local01, #28
2936c     0F 2F 02 FB | 	rdlong	local09, local01
29370     1C 1E 86 F1 | 	sub	local01, #28
29374     0D 2E 06 F1 | 	add	local09, #13
29378     17 2D C2 FA | 	rdbyte	local08, local09
2937c     16 2F E2 F8 | 	getbyte	local09, local08, #0
29380     17 31 0A F2 | 	cmp	local10, local09 wz
29384     38 00 90 5D |  if_ne	jmp	#LR__4274
29388     0C 24 06 F1 | 	add	local04, #12
2938c     12 13 02 FB | 	rdlong	arg01, local04
29390     0C 24 86 F1 | 	sub	local04, #12
29394     1C 1E 06 F1 | 	add	local01, #28
29398     0F 35 02 FB | 	rdlong	local12, local01
2939c     1C 1E 86 F1 | 	sub	local01, #28
293a0     1A 15 02 F6 | 	mov	arg02, local12
293a4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
293a8     00 FA 4D F2 | 	cmps	result1, #0 wz
293ac     13 35 02 56 |  if_ne	mov	local12, local05
293b0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
293b4     01 34 86 51 |  if_ne	sub	local12, #1
293b8     1A 33 02 56 |  if_ne	mov	local11, local12
293bc     04 00 90 5D |  if_ne	jmp	#LR__4275
293c0                 | LR__4274
293c0     FF 32 06 F6 | 	mov	local11, #255
293c4                 | LR__4275
293c4     19 27 02 F6 | 	mov	local05, local11
293c8     40 00 90 FD | 	jmp	#LR__4278
293cc                 | LR__4276
293cc     13 33 02 F6 | 	mov	local11, local05
293d0     07 32 4E F7 | 	zerox	local11, #7 wz
293d4     20 00 90 5D |  if_ne	jmp	#LR__4277
293d8     14 29 E2 F8 | 	getbyte	local06, local06, #0
293dc     1C 1E 06 F1 | 	add	local01, #28
293e0     0F 13 02 FB | 	rdlong	arg01, local01
293e4     1C 1E 86 F1 | 	sub	local01, #28
293e8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
293ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
293f0     FD 28 0A F2 | 	cmp	local06, result1 wz
293f4     28 00 90 AD |  if_e	jmp	#LR__4280
293f8                 | LR__4277
293f8     2C 1E 06 F1 | 	add	local01, #44
293fc     FF FF FF FF 
29400     0F FF 6B FC | 	wrlong	##-1, local01
29404     2C 1E 86 F1 | 	sub	local01, #44
29408                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29408                 | ' 					}
29408                 | ' 					break;
29408     14 00 90 FD | 	jmp	#LR__4280
2940c                 | LR__4278
2940c                 | LR__4279
2940c     0F 13 02 F6 | 	mov	arg01, local01
29410     00 14 06 F6 | 	mov	arg02, #0
29414     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29418     FD 22 0A F6 | 	mov	local03, result1 wz
2941c     44 FE 9F AD |  if_e	jmp	#LR__4270
29420                 | LR__4280
29420     00 22 0E F2 | 	cmp	local03, #0 wz
29424     18 1E 06 51 |  if_ne	add	local01, #24
29428     0F 01 68 5C |  if_ne	wrlong	#0, local01
2942c                 | ' 	return res;
2942c     11 FB 01 F6 | 	mov	result1, local03
29430     A7 F0 03 F6 | 	mov	ptra, fp
29434     B2 00 A0 FD | 	call	#popregs_
29438                 | _fatfs_cc_dir_read_ret
29438     2D 00 64 FD | 	ret
2943c                 | 
2943c                 | _fatfs_cc_dir_find
2943c     0B 4A 05 F6 | 	mov	COUNT_, #11
29440     A8 00 A0 FD | 	call	#pushregs_
29444     09 1F 02 F6 | 	mov	local01, arg01
29448     0F 21 02 FB | 	rdlong	local02, local01
2944c     0F 13 02 F6 | 	mov	arg01, local01
29450     00 14 06 F6 | 	mov	arg02, #0
29454     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29458     00 FA 0D F2 | 	cmp	result1, #0 wz
2945c     18 02 90 5D |  if_ne	jmp	#LR__4302
29460     FF 22 06 F6 | 	mov	local03, #255
29464     FF 24 06 F6 | 	mov	local04, #255
29468     2C 1E 06 F1 | 	add	local01, #44
2946c     FF FF FF FF 
29470     0F FF 6B FC | 	wrlong	##-1, local01
29474     2C 1E 86 F1 | 	sub	local01, #44
29478                 | ' #line 2404 "ff.c"
29478                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
29478                 | ' 
29478                 | ' 	do {
29478                 | LR__4290
29478     18 1E 06 F1 | 	add	local01, #24
2947c     0F 15 02 FB | 	rdlong	arg02, local01
29480     18 1E 86 F1 | 	sub	local01, #24
29484     10 13 02 F6 | 	mov	arg01, local02
29488     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2948c     FD 26 0A F6 | 	mov	local05, result1 wz
29490     E0 01 90 5D |  if_ne	jmp	#LR__4301
29494     1C 1E 06 F1 | 	add	local01, #28
29498     0F 17 02 FB | 	rdlong	arg03, local01
2949c     1C 1E 86 F1 | 	sub	local01, #28
294a0     0B 29 C2 FA | 	rdbyte	local06, arg03
294a4     14 17 02 F6 | 	mov	arg03, local06
294a8     07 16 4E F7 | 	zerox	arg03, #7 wz
294ac     04 26 06 A6 |  if_e	mov	local05, #4
294b0     C0 01 90 AD |  if_e	jmp	#LR__4301
294b4     1C 1E 06 F1 | 	add	local01, #28
294b8     0F 2B 02 FB | 	rdlong	local07, local01
294bc     15 17 02 F6 | 	mov	arg03, local07
294c0     0B 16 06 F1 | 	add	arg03, #11
294c4     0B 2D C2 FA | 	rdbyte	local08, arg03
294c8     3F 2C 06 F5 | 	and	local08, #63
294cc     16 1E 86 F1 | 	sub	local01, #22
294d0     0F 2D 42 FC | 	wrbyte	local08, local01
294d4     06 1E 86 F1 | 	sub	local01, #6
294d8     14 17 E2 F8 | 	getbyte	arg03, local06, #0
294dc     E5 16 0E F2 | 	cmp	arg03, #229 wz
294e0     18 00 90 AD |  if_e	jmp	#LR__4291
294e4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
294e8     08 16 CE F7 | 	test	arg03, #8 wz
294ec     16 2B 02 56 |  if_ne	mov	local07, local08
294f0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
294f4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
294f8     18 00 90 AD |  if_e	jmp	#LR__4292
294fc                 | LR__4291
294fc     FF 24 06 F6 | 	mov	local04, #255
29500     2C 1E 06 F1 | 	add	local01, #44
29504     FF FF FF FF 
29508     0F FF 6B FC | 	wrlong	##-1, local01
2950c     2C 1E 86 F1 | 	sub	local01, #44
29510     4C 01 90 FD | 	jmp	#LR__4300
29514                 | LR__4292
29514     16 2D E2 F8 | 	getbyte	local08, local08, #0
29518     0F 2C 0E F2 | 	cmp	local08, #15 wz
2951c     C8 00 90 5D |  if_ne	jmp	#LR__4296
29520     2B 1E 06 F1 | 	add	local01, #43
29524     0F 2D C2 FA | 	rdbyte	local08, local01
29528     2B 1E 86 F1 | 	sub	local01, #43
2952c     40 2C CE F7 | 	test	local08, #64 wz
29530     2C 01 90 5D |  if_ne	jmp	#LR__4299
29534     14 2F E2 F8 | 	getbyte	local09, local06, #0
29538     40 2E CE F7 | 	test	local09, #64 wz
2953c     30 00 90 AD |  if_e	jmp	#LR__4293
29540     1C 1E 06 F1 | 	add	local01, #28
29544     0F 2F 02 FB | 	rdlong	local09, local01
29548     0D 2E 06 F1 | 	add	local09, #13
2954c     17 23 C2 FA | 	rdbyte	local03, local09
29550     14 29 E2 F8 | 	getbyte	local06, local06, #0
29554     BF 28 06 F5 | 	and	local06, #191
29558     14 25 02 F6 | 	mov	local04, local06
2955c     0C 1E 86 F1 | 	sub	local01, #12
29560     0F 2F 02 FB | 	rdlong	local09, local01
29564     1C 1E 06 F1 | 	add	local01, #28
29568     0F 2F 62 FC | 	wrlong	local09, local01
2956c     2C 1E 86 F1 | 	sub	local01, #44
29570                 | LR__4293
29570     14 31 E2 F8 | 	getbyte	local10, local06, #0
29574     12 2B E2 F8 | 	getbyte	local07, local04, #0
29578     15 31 0A F2 | 	cmp	local10, local07 wz
2957c     5C 00 90 5D |  if_ne	jmp	#LR__4294
29580     11 2D E2 F8 | 	getbyte	local08, local03, #0
29584     1C 1E 06 F1 | 	add	local01, #28
29588     0F 2B 02 FB | 	rdlong	local07, local01
2958c     1C 1E 86 F1 | 	sub	local01, #28
29590     0D 2A 06 F1 | 	add	local07, #13
29594     15 29 C2 FA | 	rdbyte	local06, local07
29598     14 2B E2 F8 | 	getbyte	local07, local06, #0
2959c     15 2D 0A F2 | 	cmp	local08, local07 wz
295a0     38 00 90 5D |  if_ne	jmp	#LR__4294
295a4     0C 20 06 F1 | 	add	local02, #12
295a8     10 13 02 FB | 	rdlong	arg01, local02
295ac     0C 20 86 F1 | 	sub	local02, #12
295b0     1C 1E 06 F1 | 	add	local01, #28
295b4     0F 33 02 FB | 	rdlong	local11, local01
295b8     1C 1E 86 F1 | 	sub	local01, #28
295bc     19 15 02 F6 | 	mov	arg02, local11
295c0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
295c4     00 FA 4D F2 | 	cmps	result1, #0 wz
295c8     12 33 02 56 |  if_ne	mov	local11, local04
295cc     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
295d0     01 32 86 51 |  if_ne	sub	local11, #1
295d4     19 2F 02 56 |  if_ne	mov	local09, local11
295d8     04 00 90 5D |  if_ne	jmp	#LR__4295
295dc                 | LR__4294
295dc     FF 2E 06 F6 | 	mov	local09, #255
295e0                 | LR__4295
295e0     17 25 02 F6 | 	mov	local04, local09
295e4     78 00 90 FD | 	jmp	#LR__4299
295e8                 | LR__4296
295e8     12 2F 02 F6 | 	mov	local09, local04
295ec     07 2E 4E F7 | 	zerox	local09, #7 wz
295f0     20 00 90 5D |  if_ne	jmp	#LR__4297
295f4     11 31 E2 F8 | 	getbyte	local10, local03, #0
295f8     1C 1E 06 F1 | 	add	local01, #28
295fc     0F 13 02 FB | 	rdlong	arg01, local01
29600     1C 1E 86 F1 | 	sub	local01, #28
29604     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29608     FD FA E1 F8 | 	getbyte	result1, result1, #0
2960c     FD 30 0A F2 | 	cmp	local10, result1 wz
29610     60 00 90 AD |  if_e	jmp	#LR__4301
29614                 | LR__4297
29614     2B 1E 06 F1 | 	add	local01, #43
29618     0F 2F C2 FA | 	rdbyte	local09, local01
2961c     2B 1E 86 F1 | 	sub	local01, #43
29620     01 2E CE F7 | 	test	local09, #1 wz
29624     24 00 90 5D |  if_ne	jmp	#LR__4298
29628     1C 1E 06 F1 | 	add	local01, #28
2962c     0F 13 02 FB | 	rdlong	arg01, local01
29630     04 1E 06 F1 | 	add	local01, #4
29634     0F 15 02 F6 | 	mov	arg02, local01
29638     20 1E 86 F1 | 	sub	local01, #32
2963c     0B 16 06 F6 | 	mov	arg03, #11
29640     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29644     00 FA 0D F2 | 	cmp	result1, #0 wz
29648     28 00 90 AD |  if_e	jmp	#LR__4301
2964c                 | LR__4298
2964c     FF 24 06 F6 | 	mov	local04, #255
29650     2C 1E 06 F1 | 	add	local01, #44
29654     FF FF FF FF 
29658     0F FF 6B FC | 	wrlong	##-1, local01
2965c     2C 1E 86 F1 | 	sub	local01, #44
29660                 | LR__4299
29660                 | LR__4300
29660     0F 13 02 F6 | 	mov	arg01, local01
29664     00 14 06 F6 | 	mov	arg02, #0
29668     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2966c     FD 26 0A F6 | 	mov	local05, result1 wz
29670     04 FE 9F AD |  if_e	jmp	#LR__4290
29674                 | LR__4301
29674                 | ' 
29674                 | ' 	return res;
29674     13 FB 01 F6 | 	mov	result1, local05
29678                 | LR__4302
29678     A7 F0 03 F6 | 	mov	ptra, fp
2967c     B2 00 A0 FD | 	call	#popregs_
29680                 | _fatfs_cc_dir_find_ret
29680     2D 00 64 FD | 	ret
29684                 | 
29684                 | _fatfs_cc_dir_register
29684     0A 4A 05 F6 | 	mov	COUNT_, #10
29688     A8 00 A0 FD | 	call	#pushregs_
2968c     2C F0 07 F1 | 	add	ptra, #44
29690     04 4E 05 F1 | 	add	fp, #4
29694     A7 12 62 FC | 	wrlong	arg01, fp
29698     09 1F 02 FB | 	rdlong	local01, arg01
2969c     08 4E 05 F1 | 	add	fp, #8
296a0     A7 1E 62 FC | 	wrlong	local01, fp
296a4     08 4E 85 F1 | 	sub	fp, #8
296a8     A7 20 02 FB | 	rdlong	local02, fp
296ac     04 4E 85 F1 | 	sub	fp, #4
296b0     2B 20 06 F1 | 	add	local02, #43
296b4     10 21 C2 FA | 	rdbyte	local02, local02
296b8     A0 20 CE F7 | 	test	local02, #160 wz
296bc     06 FA 05 56 |  if_ne	mov	result1, #6
296c0     F8 03 90 5D |  if_ne	jmp	#LR__4325
296c4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
296c4     14 4E 05 F1 | 	add	fp, #20
296c8     A7 00 68 FC | 	wrlong	#0, fp
296cc     14 4E 85 F1 | 	sub	fp, #20
296d0     97 28 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
296d4                 | LR__4310
296d4     0C 4E 05 F1 | 	add	fp, #12
296d8     A7 20 02 FB | 	rdlong	local02, fp
296dc     0C 20 06 F1 | 	add	local02, #12
296e0     10 23 02 FB | 	rdlong	local03, local02
296e4     08 4E 05 F1 | 	add	fp, #8
296e8     A7 24 02 FB | 	rdlong	local04, fp
296ec     14 4E 85 F1 | 	sub	fp, #20
296f0     01 24 66 F0 | 	shl	local04, #1
296f4     11 25 02 F1 | 	add	local04, local03
296f8     12 21 EA FA | 	rdword	local02, local04 wz
296fc     24 00 90 AD |  if_e	jmp	#LR__4312
29700     14 4E 05 F1 | 	add	fp, #20
29704     A7 26 02 FB | 	rdlong	local05, fp
29708     13 29 02 F6 | 	mov	local06, local05
2970c     13 2B 02 F6 | 	mov	local07, local05
29710     15 2D 02 F6 | 	mov	local08, local07
29714     01 2C 06 F1 | 	add	local08, #1
29718     A7 2C 62 FC | 	wrlong	local08, fp
2971c     14 4E 85 F1 | 	sub	fp, #20
29720     B0 FF 9F FD | 	jmp	#LR__4310
29724                 | LR__4311
29724                 | LR__4312
29724     1C 4E 05 F1 | 	add	fp, #28
29728     A7 12 02 F6 | 	mov	arg01, fp
2972c     18 4E 85 F1 | 	sub	fp, #24
29730     A7 14 02 FB | 	rdlong	arg02, fp
29734     04 4E 85 F1 | 	sub	fp, #4
29738     20 14 06 F1 | 	add	arg02, #32
2973c     0C 16 06 F6 | 	mov	arg03, #12
29740     04 6F BF FD | 	call	#__system____builtin_memmove
29744     27 4E 05 F1 | 	add	fp, #39
29748     A7 2E C2 FA | 	rdbyte	local09, fp
2974c     27 4E 85 F1 | 	sub	fp, #39
29750     01 2E CE F7 | 	test	local09, #1 wz
29754     F4 00 90 AD |  if_e	jmp	#LR__4315
29758     04 4E 05 F1 | 	add	fp, #4
2975c     A7 30 02 FB | 	rdlong	local10, fp
29760     2B 30 06 F1 | 	add	local10, #43
29764     18 81 48 FC | 	wrbyte	#64, local10
29768                 | ' 		dp->fn[ 11 ] =  0x40 ;
29768                 | ' 		for (n = 1; n < 100; n++) {
29768     0C 4E 05 F1 | 	add	fp, #12
2976c     A7 02 68 FC | 	wrlong	#1, fp
29770     10 4E 85 F1 | 	sub	fp, #16
29774                 | LR__4313
29774     10 4E 05 F1 | 	add	fp, #16
29778     A7 20 02 FB | 	rdlong	local02, fp
2977c     10 4E 85 F1 | 	sub	fp, #16
29780     64 20 16 F2 | 	cmp	local02, #100 wc
29784     70 00 90 3D |  if_ae	jmp	#LR__4314
29788     04 4E 05 F1 | 	add	fp, #4
2978c     A7 12 02 FB | 	rdlong	arg01, fp
29790     20 12 06 F1 | 	add	arg01, #32
29794     18 4E 05 F1 | 	add	fp, #24
29798     A7 14 02 F6 | 	mov	arg02, fp
2979c     10 4E 85 F1 | 	sub	fp, #16
297a0     A7 30 02 FB | 	rdlong	local10, fp
297a4     0C 30 06 F1 | 	add	local10, #12
297a8     18 17 02 FB | 	rdlong	arg03, local10
297ac     04 4E 05 F1 | 	add	fp, #4
297b0     A7 18 02 FB | 	rdlong	arg04, fp
297b4     10 4E 85 F1 | 	sub	fp, #16
297b8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
297bc     04 4E 05 F1 | 	add	fp, #4
297c0     A7 12 02 FB | 	rdlong	arg01, fp
297c4     04 4E 85 F1 | 	sub	fp, #4
297c8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
297cc     08 4E 05 F1 | 	add	fp, #8
297d0     A7 FA 61 FC | 	wrlong	result1, fp
297d4     00 FA 4D F2 | 	cmps	result1, #0 wz
297d8     08 4E 85 F1 | 	sub	fp, #8
297dc     18 00 90 5D |  if_ne	jmp	#LR__4314
297e0     10 4E 05 F1 | 	add	fp, #16
297e4     A7 30 02 FB | 	rdlong	local10, fp
297e8     01 30 06 F1 | 	add	local10, #1
297ec     A7 30 62 FC | 	wrlong	local10, fp
297f0     10 4E 85 F1 | 	sub	fp, #16
297f4     7C FF 9F FD | 	jmp	#LR__4313
297f8                 | LR__4314
297f8     10 4E 05 F1 | 	add	fp, #16
297fc     A7 30 02 FB | 	rdlong	local10, fp
29800     10 4E 85 F1 | 	sub	fp, #16
29804     64 30 0E F2 | 	cmp	local10, #100 wz
29808     07 FA 05 A6 |  if_e	mov	result1, #7
2980c     AC 02 90 AD |  if_e	jmp	#LR__4325
29810     08 4E 05 F1 | 	add	fp, #8
29814     A7 30 02 FB | 	rdlong	local10, fp
29818     08 4E 85 F1 | 	sub	fp, #8
2981c     04 30 0E F2 | 	cmp	local10, #4 wz
29820     08 4E 05 51 |  if_ne	add	fp, #8
29824     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29828     08 4E 85 51 |  if_ne	sub	fp, #8
2982c     8C 02 90 5D |  if_ne	jmp	#LR__4325
29830     04 4E 05 F1 | 	add	fp, #4
29834     A7 30 02 FB | 	rdlong	local10, fp
29838     23 4E 05 F1 | 	add	fp, #35
2983c     A7 1E C2 FA | 	rdbyte	local01, fp
29840     27 4E 85 F1 | 	sub	fp, #39
29844     2B 30 06 F1 | 	add	local10, #43
29848     18 1F 42 FC | 	wrbyte	local01, local10
2984c                 | LR__4315
2984c     27 4E 05 F1 | 	add	fp, #39
29850     A7 20 C2 FA | 	rdbyte	local02, fp
29854     27 4E 85 F1 | 	sub	fp, #39
29858     02 20 CE F7 | 	test	local02, #2 wz
2985c     20 00 90 AD |  if_e	jmp	#LR__4316
29860     14 4E 05 F1 | 	add	fp, #20
29864     A7 30 02 FB | 	rdlong	local10, fp
29868     0C 30 06 F1 | 	add	local10, #12
2986c     0D 30 16 FD | 	qdiv	local10, #13
29870     14 4E 85 F1 | 	sub	fp, #20
29874     18 30 62 FD | 	getqx	local10
29878     01 30 06 F1 | 	add	local10, #1
2987c     04 00 90 FD | 	jmp	#LR__4317
29880                 | LR__4316
29880     01 30 06 F6 | 	mov	local10, #1
29884                 | LR__4317
29884     18 4E 05 F1 | 	add	fp, #24
29888     A7 30 62 FC | 	wrlong	local10, fp
2988c     14 4E 85 F1 | 	sub	fp, #20
29890     A7 12 02 FB | 	rdlong	arg01, fp
29894     18 15 02 F6 | 	mov	arg02, local10
29898     04 4E 85 F1 | 	sub	fp, #4
2989c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
298a0     08 4E 05 F1 | 	add	fp, #8
298a4     A7 FA 61 FC | 	wrlong	result1, fp
298a8     08 4E 85 F1 | 	sub	fp, #8
298ac     00 FA 0D F2 | 	cmp	result1, #0 wz
298b0     38 01 90 5D |  if_ne	jmp	#LR__4322
298b4     18 4E 05 F1 | 	add	fp, #24
298b8     A7 30 02 FB | 	rdlong	local10, fp
298bc     01 30 8E F1 | 	sub	local10, #1 wz
298c0     A7 30 62 FC | 	wrlong	local10, fp
298c4     18 4E 85 F1 | 	sub	fp, #24
298c8     20 01 90 AD |  if_e	jmp	#LR__4322
298cc     04 4E 05 F1 | 	add	fp, #4
298d0     A7 30 02 FB | 	rdlong	local10, fp
298d4     18 13 02 F6 | 	mov	arg01, local10
298d8     14 4E 05 F1 | 	add	fp, #20
298dc     A7 18 02 FB | 	rdlong	arg04, fp
298e0     18 4E 85 F1 | 	sub	fp, #24
298e4     05 18 66 F0 | 	shl	arg04, #5
298e8     10 30 06 F1 | 	add	local10, #16
298ec     18 15 02 FB | 	rdlong	arg02, local10
298f0     0C 15 82 F1 | 	sub	arg02, arg04
298f4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
298f8     08 4E 05 F1 | 	add	fp, #8
298fc     A7 FA 61 FC | 	wrlong	result1, fp
29900     08 4E 85 F1 | 	sub	fp, #8
29904     00 FA 0D F2 | 	cmp	result1, #0 wz
29908     E0 00 90 5D |  if_ne	jmp	#LR__4321
2990c     04 4E 05 F1 | 	add	fp, #4
29910     A7 12 02 FB | 	rdlong	arg01, fp
29914     04 4E 85 F1 | 	sub	fp, #4
29918     20 12 06 F1 | 	add	arg01, #32
2991c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29920     FD 30 02 F6 | 	mov	local10, result1
29924     28 4E 05 F1 | 	add	fp, #40
29928     A7 30 42 FC | 	wrbyte	local10, fp
2992c     28 4E 85 F1 | 	sub	fp, #40
29930                 | ' 			sum = sum_sfn(dp->fn);
29930                 | ' 			do {
29930                 | LR__4318
29930     0C 4E 05 F1 | 	add	fp, #12
29934     A7 12 02 FB | 	rdlong	arg01, fp
29938     08 4E 85 F1 | 	sub	fp, #8
2993c     A7 1E 02 FB | 	rdlong	local01, fp
29940     04 4E 85 F1 | 	sub	fp, #4
29944     18 1E 06 F1 | 	add	local01, #24
29948     0F 15 02 FB | 	rdlong	arg02, local01
2994c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29950     08 4E 05 F1 | 	add	fp, #8
29954     A7 FA 61 FC | 	wrlong	result1, fp
29958     00 FA 4D F2 | 	cmps	result1, #0 wz
2995c     08 4E 85 F1 | 	sub	fp, #8
29960     88 00 90 5D |  if_ne	jmp	#LR__4320
29964     0C 4E 05 F1 | 	add	fp, #12
29968     A7 20 02 FB | 	rdlong	local02, fp
2996c     0C 20 06 F1 | 	add	local02, #12
29970     10 13 02 FB | 	rdlong	arg01, local02
29974     08 4E 85 F1 | 	sub	fp, #8
29978     A7 1E 02 FB | 	rdlong	local01, fp
2997c     1C 1E 06 F1 | 	add	local01, #28
29980     0F 15 02 FB | 	rdlong	arg02, local01
29984     14 4E 05 F1 | 	add	fp, #20
29988     A7 16 02 FB | 	rdlong	arg03, fp
2998c     10 4E 05 F1 | 	add	fp, #16
29990     A7 18 C2 FA | 	rdbyte	arg04, fp
29994     28 4E 85 F1 | 	sub	fp, #40
29998     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2999c     0C 4E 05 F1 | 	add	fp, #12
299a0     A7 30 02 FB | 	rdlong	local10, fp
299a4     03 30 06 F1 | 	add	local10, #3
299a8     18 03 48 FC | 	wrbyte	#1, local10
299ac     08 4E 85 F1 | 	sub	fp, #8
299b0     A7 12 02 FB | 	rdlong	arg01, fp
299b4     04 4E 85 F1 | 	sub	fp, #4
299b8     00 14 06 F6 | 	mov	arg02, #0
299bc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
299c0     08 4E 05 F1 | 	add	fp, #8
299c4     A7 FA 61 FC | 	wrlong	result1, fp
299c8     00 FA 4D F2 | 	cmps	result1, #0 wz
299cc     08 4E 85 F1 | 	sub	fp, #8
299d0     18 00 90 5D |  if_ne	jmp	#LR__4319
299d4     18 4E 05 F1 | 	add	fp, #24
299d8     A7 30 02 FB | 	rdlong	local10, fp
299dc     01 30 8E F1 | 	sub	local10, #1 wz
299e0     A7 30 62 FC | 	wrlong	local10, fp
299e4     18 4E 85 F1 | 	sub	fp, #24
299e8     44 FF 9F 5D |  if_ne	jmp	#LR__4318
299ec                 | LR__4319
299ec                 | LR__4320
299ec                 | LR__4321
299ec                 | LR__4322
299ec     08 4E 05 F1 | 	add	fp, #8
299f0     A7 30 0A FB | 	rdlong	local10, fp wz
299f4     08 4E 85 F1 | 	sub	fp, #8
299f8     B4 00 90 5D |  if_ne	jmp	#LR__4324
299fc     0C 4E 05 F1 | 	add	fp, #12
29a00     A7 12 02 FB | 	rdlong	arg01, fp
29a04     08 4E 85 F1 | 	sub	fp, #8
29a08     A7 1E 02 FB | 	rdlong	local01, fp
29a0c     04 4E 85 F1 | 	sub	fp, #4
29a10     18 1E 06 F1 | 	add	local01, #24
29a14     0F 15 02 FB | 	rdlong	arg02, local01
29a18     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29a1c     08 4E 05 F1 | 	add	fp, #8
29a20     A7 FA 61 FC | 	wrlong	result1, fp
29a24     08 4E 85 F1 | 	sub	fp, #8
29a28     00 FA 0D F2 | 	cmp	result1, #0 wz
29a2c     80 00 90 5D |  if_ne	jmp	#LR__4323
29a30     04 4E 05 F1 | 	add	fp, #4
29a34     A7 20 02 FB | 	rdlong	local02, fp
29a38     04 4E 85 F1 | 	sub	fp, #4
29a3c     1C 20 06 F1 | 	add	local02, #28
29a40     10 13 02 FB | 	rdlong	arg01, local02
29a44     00 14 06 F6 | 	mov	arg02, #0
29a48     20 16 06 F6 | 	mov	arg03, #32
29a4c     98 00 A0 FD | 	call	#\builtin_bytefill_
29a50     04 4E 05 F1 | 	add	fp, #4
29a54     A7 14 02 FB | 	rdlong	arg02, fp
29a58     0A 1F 02 F6 | 	mov	local01, arg02
29a5c     1C 1E 06 F1 | 	add	local01, #28
29a60     0F 13 02 FB | 	rdlong	arg01, local01
29a64     04 4E 85 F1 | 	sub	fp, #4
29a68     20 14 06 F1 | 	add	arg02, #32
29a6c     0B 16 06 F6 | 	mov	arg03, #11
29a70     D4 6B BF FD | 	call	#__system____builtin_memmove
29a74     04 4E 05 F1 | 	add	fp, #4
29a78     A7 2E 02 FB | 	rdlong	local09, fp
29a7c     17 31 02 F6 | 	mov	local10, local09
29a80     1C 30 06 F1 | 	add	local10, #28
29a84     18 1F 02 FB | 	rdlong	local01, local10
29a88     2B 2E 06 F1 | 	add	local09, #43
29a8c     17 31 C2 FA | 	rdbyte	local10, local09
29a90     18 30 06 F5 | 	and	local10, #24
29a94     0C 1E 06 F1 | 	add	local01, #12
29a98     0F 31 42 FC | 	wrbyte	local10, local01
29a9c     08 4E 05 F1 | 	add	fp, #8
29aa0     A7 30 02 FB | 	rdlong	local10, fp
29aa4     0C 4E 85 F1 | 	sub	fp, #12
29aa8     03 30 06 F1 | 	add	local10, #3
29aac     18 03 48 FC | 	wrbyte	#1, local10
29ab0                 | LR__4323
29ab0                 | LR__4324
29ab0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29ab0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29ab0                 | ' 
29ab0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29ab0                 | ' 
29ab0                 | ' 			fs->wflag = 1;
29ab0                 | ' 		}
29ab0                 | ' 	}
29ab0                 | ' 
29ab0                 | ' 	return res;
29ab0     08 4E 05 F1 | 	add	fp, #8
29ab4     A7 FA 01 FB | 	rdlong	result1, fp
29ab8     08 4E 85 F1 | 	sub	fp, #8
29abc                 | LR__4325
29abc     A7 F0 03 F6 | 	mov	ptra, fp
29ac0     B2 00 A0 FD | 	call	#popregs_
29ac4                 | _fatfs_cc_dir_register_ret
29ac4     2D 00 64 FD | 	ret
29ac8                 | 
29ac8                 | _fatfs_cc_dir_remove
29ac8     05 4A 05 F6 | 	mov	COUNT_, #5
29acc     A8 00 A0 FD | 	call	#pushregs_
29ad0     09 1F 02 F6 | 	mov	local01, arg01
29ad4     0F 21 02 FB | 	rdlong	local02, local01
29ad8     10 1E 06 F1 | 	add	local01, #16
29adc     0F 23 02 FB | 	rdlong	local03, local01
29ae0     1C 1E 06 F1 | 	add	local01, #28
29ae4     0F 15 02 FB | 	rdlong	arg02, local01
29ae8     2C 1E 86 F1 | 	sub	local01, #44
29aec     FF FF 7F FF 
29af0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29af4     00 24 06 A6 |  if_e	mov	local04, #0
29af8     18 00 90 AD |  if_e	jmp	#LR__4330
29afc     0F 13 02 F6 | 	mov	arg01, local01
29b00     2C 1E 06 F1 | 	add	local01, #44
29b04     0F 15 02 FB | 	rdlong	arg02, local01
29b08     2C 1E 86 F1 | 	sub	local01, #44
29b0c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29b10     FD 24 02 F6 | 	mov	local04, result1
29b14                 | LR__4330
29b14     12 27 0A F6 | 	mov	local05, local04 wz
29b18     64 00 90 5D |  if_ne	jmp	#LR__4333
29b1c                 | ' 		do {
29b1c                 | LR__4331
29b1c     18 1E 06 F1 | 	add	local01, #24
29b20     0F 15 02 FB | 	rdlong	arg02, local01
29b24     18 1E 86 F1 | 	sub	local01, #24
29b28     10 13 02 F6 | 	mov	arg01, local02
29b2c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29b30     FD 26 0A F6 | 	mov	local05, result1 wz
29b34     40 00 90 5D |  if_ne	jmp	#LR__4332
29b38     1C 1E 06 F1 | 	add	local01, #28
29b3c     0F 25 02 FB | 	rdlong	local04, local01
29b40     12 CB 49 FC | 	wrbyte	#229, local04
29b44     03 20 06 F1 | 	add	local02, #3
29b48     10 03 48 FC | 	wrbyte	#1, local02
29b4c     03 20 86 F1 | 	sub	local02, #3
29b50     0C 1E 86 F1 | 	sub	local01, #12
29b54     0F 25 02 FB | 	rdlong	local04, local01
29b58     10 1E 86 F1 | 	sub	local01, #16
29b5c     11 25 12 F2 | 	cmp	local04, local03 wc
29b60     14 00 90 3D |  if_ae	jmp	#LR__4332
29b64     0F 13 02 F6 | 	mov	arg01, local01
29b68     00 14 06 F6 | 	mov	arg02, #0
29b6c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29b70     FD 26 0A F6 | 	mov	local05, result1 wz
29b74     A4 FF 9F AD |  if_e	jmp	#LR__4331
29b78                 | LR__4332
29b78     04 26 0E F2 | 	cmp	local05, #4 wz
29b7c     02 26 06 A6 |  if_e	mov	local05, #2
29b80                 | LR__4333
29b80                 | ' 	}
29b80                 | ' #line 2590 "ff.c"
29b80                 | ' 	return res;
29b80     13 FB 01 F6 | 	mov	result1, local05
29b84     A7 F0 03 F6 | 	mov	ptra, fp
29b88     B2 00 A0 FD | 	call	#popregs_
29b8c                 | _fatfs_cc_dir_remove_ret
29b8c     2D 00 64 FD | 	ret
29b90                 | 
29b90                 | _fatfs_cc_get_fileinfo
29b90     0F 4A 05 F6 | 	mov	COUNT_, #15
29b94     A8 00 A0 FD | 	call	#pushregs_
29b98     09 1F 02 F6 | 	mov	local01, arg01
29b9c     0A 21 02 F6 | 	mov	local02, arg02
29ba0     0F 23 02 FB | 	rdlong	local03, local01
29ba4     1C 20 06 F1 | 	add	local02, #28
29ba8     10 01 48 FC | 	wrbyte	#0, local02
29bac     1C 20 86 F1 | 	sub	local02, #28
29bb0     18 1E 06 F1 | 	add	local01, #24
29bb4     0F 25 0A FB | 	rdlong	local04, local01 wz
29bb8     18 1E 86 F1 | 	sub	local01, #24
29bbc     90 03 90 AD |  if_e	jmp	#LR__4354
29bc0     2C 1E 06 F1 | 	add	local01, #44
29bc4     0F 25 02 FB | 	rdlong	local04, local01
29bc8     2C 1E 86 F1 | 	sub	local01, #44
29bcc     FF FF 7F FF 
29bd0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29bd4     D8 00 90 AD |  if_e	jmp	#LR__4343
29bd8     00 26 06 F6 | 	mov	local05, #0
29bdc     00 28 06 F6 | 	mov	local06, #0
29be0     00 2A 06 F6 | 	mov	local07, #0
29be4                 | ' 			si = di = 0;
29be4                 | ' 			hs = 0;
29be4                 | ' 			while (fs->lfnbuf[si] != 0) {
29be4                 | LR__4340
29be4     0C 22 06 F1 | 	add	local03, #12
29be8     11 25 02 FB | 	rdlong	local04, local03
29bec     0C 22 86 F1 | 	sub	local03, #12
29bf0     14 2D 02 F6 | 	mov	local08, local06
29bf4     01 2C 66 F0 | 	shl	local08, #1
29bf8     12 2D 02 F1 | 	add	local08, local04
29bfc     16 25 EA FA | 	rdword	local04, local08 wz
29c00     90 00 90 AD |  if_e	jmp	#LR__4342
29c04     0C 22 06 F1 | 	add	local03, #12
29c08     11 2F 02 FB | 	rdlong	local09, local03
29c0c     0C 22 86 F1 | 	sub	local03, #12
29c10     14 31 02 F6 | 	mov	local10, local06
29c14     01 30 66 F0 | 	shl	local10, #1
29c18     17 31 02 F1 | 	add	local10, local09
29c1c     18 33 E2 FA | 	rdword	local11, local10
29c20     15 25 02 F6 | 	mov	local04, local07
29c24     0F 24 4E F7 | 	zerox	local04, #15 wz
29c28     01 28 06 F1 | 	add	local06, #1
29c2c     24 00 90 5D |  if_ne	jmp	#LR__4341
29c30     19 35 32 F9 | 	getword	local12, local11, #0
29c34     6C 00 00 FF 
29c38     00 34 16 F2 | 	cmp	local12, ##55296 wc
29c3c     14 00 90 CD |  if_b	jmp	#LR__4341
29c40     19 37 32 F9 | 	getword	local13, local11, #0
29c44     70 00 00 FF 
29c48     00 36 16 F2 | 	cmp	local13, ##57344 wc
29c4c     19 2B 02 C6 |  if_b	mov	local07, local11
29c50                 | ' 					hs = wc; continue;
29c50     90 FF 9F CD |  if_b	jmp	#LR__4340
29c54                 | LR__4341
29c54     15 13 32 F9 | 	getword	arg01, local07, #0
29c58     10 12 66 F0 | 	shl	arg01, #16
29c5c     19 33 32 F9 | 	getword	local11, local11, #0
29c60     19 13 42 F5 | 	or	arg01, local11
29c64     13 15 02 F6 | 	mov	arg02, local05
29c68     1C 20 06 F1 | 	add	local02, #28
29c6c     10 15 02 F1 | 	add	arg02, local02
29c70     FF 16 06 F6 | 	mov	arg03, #255
29c74     13 17 82 F1 | 	sub	arg03, local05
29c78     1C 20 86 F1 | 	sub	local02, #28
29c7c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29c80     FD 38 0A F6 | 	mov	local14, result1 wz
29c84     00 26 06 A6 |  if_e	mov	local05, #0
29c88     1C 27 02 51 |  if_ne	add	local05, local14
29c8c     00 2A 06 56 |  if_ne	mov	local07, #0
29c90     50 FF 9F 5D |  if_ne	jmp	#LR__4340
29c94                 | LR__4342
29c94     15 25 02 F6 | 	mov	local04, local07
29c98     0F 24 4E F7 | 	zerox	local04, #15 wz
29c9c     00 26 06 56 |  if_ne	mov	local05, #0
29ca0     1C 20 06 F1 | 	add	local02, #28
29ca4     10 27 02 F1 | 	add	local05, local02
29ca8     13 01 48 FC | 	wrbyte	#0, local05
29cac     1C 20 86 F1 | 	sub	local02, #28
29cb0                 | LR__4343
29cb0     00 26 06 F6 | 	mov	local05, #0
29cb4     00 28 06 F6 | 	mov	local06, #0
29cb8                 | ' 			fno->fname[di] = 0;
29cb8                 | ' 		}
29cb8                 | ' 	}
29cb8                 | ' 
29cb8                 | ' 	si = di = 0;
29cb8                 | ' 	while (si < 11) {
29cb8                 | LR__4344
29cb8     0B 28 16 F2 | 	cmp	local06, #11 wc
29cbc     20 01 90 3D |  if_ae	jmp	#LR__4347
29cc0     1C 1E 06 F1 | 	add	local01, #28
29cc4     0F 2F 02 FB | 	rdlong	local09, local01
29cc8     1C 1E 86 F1 | 	sub	local01, #28
29ccc     14 31 02 F6 | 	mov	local10, local06
29cd0     17 31 02 F1 | 	add	local10, local09
29cd4     18 33 C2 FA | 	rdbyte	local11, local10
29cd8     19 25 32 F9 | 	getword	local04, local11, #0
29cdc     20 24 0E F2 | 	cmp	local04, #32 wz
29ce0     01 28 06 F1 | 	add	local06, #1
29ce4     D0 FF 9F AD |  if_e	jmp	#LR__4344
29ce8     19 25 32 F9 | 	getword	local04, local11, #0
29cec     05 24 0E F2 | 	cmp	local04, #5 wz
29cf0     E5 32 06 A6 |  if_e	mov	local11, #229
29cf4     09 28 0E F2 | 	cmp	local06, #9 wz
29cf8     20 00 90 5D |  if_ne	jmp	#LR__4345
29cfc     0C 26 16 F2 | 	cmp	local05, #12 wc
29d00     18 00 90 3D |  if_ae	jmp	#LR__4345
29d04     13 37 02 F6 | 	mov	local13, local05
29d08     0C 20 06 F1 | 	add	local02, #12
29d0c     10 37 02 F1 | 	add	local13, local02
29d10     1B 5D 48 FC | 	wrbyte	#46, local13
29d14     01 26 06 F1 | 	add	local05, #1
29d18     0C 20 86 F1 | 	sub	local02, #12
29d1c                 | LR__4345
29d1c     19 13 32 F9 | 	getword	arg01, local11, #0
29d20     07 12 4E F7 | 	zerox	arg01, #7 wz
29d24     00 FA 05 56 |  if_ne	mov	result1, #0
29d28                 | ' 
29d28                 | ' 	return 0;
29d28     00 FA 05 A6 |  if_e	mov	result1, #0
29d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d30     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29d34     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29d38     50 00 90 AD |  if_e	jmp	#LR__4346
29d3c     1C 1E 06 F1 | 	add	local01, #28
29d40     0F 31 02 FB | 	rdlong	local10, local01
29d44     1C 1E 86 F1 | 	sub	local01, #28
29d48     14 2D 02 F6 | 	mov	local08, local06
29d4c     18 2D 02 F1 | 	add	local08, local10
29d50     16 13 CA FA | 	rdbyte	arg01, local08 wz
29d54     00 FA 05 56 |  if_ne	mov	result1, #0
29d58                 | ' 
29d58                 | ' 	return 0;
29d58     00 FA 05 A6 |  if_e	mov	result1, #0
29d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d60     28 00 90 AD |  if_e	jmp	#LR__4346
29d64     19 33 32 F9 | 	getword	local11, local11, #0
29d68     08 32 66 F0 | 	shl	local11, #8
29d6c     1C 1E 06 F1 | 	add	local01, #28
29d70     0F 39 02 FB | 	rdlong	local14, local01
29d74     1C 1E 86 F1 | 	sub	local01, #28
29d78     14 2F 02 F6 | 	mov	local09, local06
29d7c     1C 2F 02 F1 | 	add	local09, local14
29d80     17 35 C2 FA | 	rdbyte	local12, local09
29d84     1A 33 42 F5 | 	or	local11, local12
29d88     01 28 06 F1 | 	add	local06, #1
29d8c                 | LR__4346
29d8c     19 13 02 F6 | 	mov	arg01, local11
29d90     01 00 00 FF 
29d94     52 15 06 F6 | 	mov	arg02, ##850
29d98     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29d9c     FD 32 02 F6 | 	mov	local11, result1
29da0     19 25 02 F6 | 	mov	local04, local11
29da4     0F 24 4E F7 | 	zerox	local04, #15 wz
29da8     00 26 06 A6 |  if_e	mov	local05, #0
29dac     30 00 90 AD |  if_e	jmp	#LR__4347
29db0     19 13 32 F9 | 	getword	arg01, local11, #0
29db4     13 15 02 F6 | 	mov	arg02, local05
29db8     0C 20 06 F1 | 	add	local02, #12
29dbc     10 15 02 F1 | 	add	arg02, local02
29dc0     0C 16 06 F6 | 	mov	arg03, #12
29dc4     13 17 82 F1 | 	sub	arg03, local05
29dc8     0C 20 86 F1 | 	sub	local02, #12
29dcc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
29dd0     FD 38 0A F6 | 	mov	local14, result1 wz
29dd4     00 26 06 A6 |  if_e	mov	local05, #0
29dd8     1C 27 02 51 |  if_ne	add	local05, local14
29ddc     D8 FE 9F 5D |  if_ne	jmp	#LR__4344
29de0                 | LR__4347
29de0     13 25 02 F6 | 	mov	local04, local05
29de4     0C 20 06 F1 | 	add	local02, #12
29de8     10 25 02 F1 | 	add	local04, local02
29dec     12 01 48 FC | 	wrbyte	#0, local04
29df0     10 20 06 F1 | 	add	local02, #16
29df4     10 25 CA FA | 	rdbyte	local04, local02 wz
29df8     1C 20 86 F1 | 	sub	local02, #28
29dfc     F8 00 90 5D |  if_ne	jmp	#LR__4353
29e00     00 26 0E F2 | 	cmp	local05, #0 wz
29e04     1C 00 90 5D |  if_ne	jmp	#LR__4348
29e08     13 37 02 F6 | 	mov	local13, local05
29e0c     1C 20 06 F1 | 	add	local02, #28
29e10     10 37 02 F1 | 	add	local13, local02
29e14     1B 7F 48 FC | 	wrbyte	#63, local13
29e18     01 26 06 F1 | 	add	local05, #1
29e1c     1C 20 86 F1 | 	sub	local02, #28
29e20     A4 00 90 FD | 	jmp	#LR__4352
29e24                 | LR__4348
29e24                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
29e24     00 26 06 F6 | 	mov	local05, #0
29e28     00 28 06 F6 | 	mov	local06, #0
29e2c     08 3A 06 F6 | 	mov	local15, #8
29e30                 | LR__4349
29e30     14 25 02 F6 | 	mov	local04, local06
29e34     0C 20 06 F1 | 	add	local02, #12
29e38     10 25 02 F1 | 	add	local04, local02
29e3c     12 37 CA FA | 	rdbyte	local13, local04 wz
29e40     0C 20 86 F1 | 	sub	local02, #12
29e44     80 00 90 AD |  if_e	jmp	#LR__4351
29e48     14 2D 02 F6 | 	mov	local08, local06
29e4c     0C 20 06 F1 | 	add	local02, #12
29e50     10 2D 02 F1 | 	add	local08, local02
29e54     16 33 C2 FA | 	rdbyte	local11, local08
29e58     19 39 32 F9 | 	getword	local14, local11, #0
29e5c     2E 38 0E F2 | 	cmp	local14, #46 wz
29e60     0C 20 86 F1 | 	sub	local02, #12
29e64     10 3A 06 A6 |  if_e	mov	local15, #16
29e68     19 39 32 F9 | 	getword	local14, local11, #0
29e6c     41 38 16 F2 | 	cmp	local14, #65 wc
29e70     30 00 90 CD |  if_b	jmp	#LR__4350
29e74     19 2D 32 F9 | 	getword	local08, local11, #0
29e78     5B 2C 16 F2 | 	cmp	local08, #91 wc
29e7c     24 00 90 3D |  if_ae	jmp	#LR__4350
29e80     1C 1E 06 F1 | 	add	local01, #28
29e84     0F 2F 02 FB | 	rdlong	local09, local01
29e88     1C 1E 86 F1 | 	sub	local01, #28
29e8c     0C 2E 06 F1 | 	add	local09, #12
29e90     17 31 C2 FA | 	rdbyte	local10, local09
29e94     1D 39 E2 F8 | 	getbyte	local14, local15, #0
29e98     1C 31 CA F7 | 	test	local10, local14 wz
29e9c     19 33 32 59 |  if_ne	getword	local11, local11, #0
29ea0     20 32 06 51 |  if_ne	add	local11, #32
29ea4                 | LR__4350
29ea4     13 39 02 F6 | 	mov	local14, local05
29ea8     1C 20 06 F1 | 	add	local02, #28
29eac     10 39 02 F1 | 	add	local14, local02
29eb0     19 33 32 F9 | 	getword	local11, local11, #0
29eb4     1C 33 42 FC | 	wrbyte	local11, local14
29eb8     01 28 06 F1 | 	add	local06, #1
29ebc     01 26 06 F1 | 	add	local05, #1
29ec0     1C 20 86 F1 | 	sub	local02, #28
29ec4     68 FF 9F FD | 	jmp	#LR__4349
29ec8                 | LR__4351
29ec8                 | LR__4352
29ec8     1C 20 06 F1 | 	add	local02, #28
29ecc     10 27 02 F1 | 	add	local05, local02
29ed0     13 01 48 FC | 	wrbyte	#0, local05
29ed4     1C 1E 06 F1 | 	add	local01, #28
29ed8     0F 25 02 FB | 	rdlong	local04, local01
29edc     1C 1E 86 F1 | 	sub	local01, #28
29ee0     0C 24 06 F1 | 	add	local04, #12
29ee4     12 37 CA FA | 	rdbyte	local13, local04 wz
29ee8     1C 20 86 F1 | 	sub	local02, #28
29eec     0C 20 06 A1 |  if_e	add	local02, #12
29ef0     10 01 48 AC |  if_e	wrbyte	#0, local02
29ef4     0C 20 86 A1 |  if_e	sub	local02, #12
29ef8                 | LR__4353
29ef8     1C 1E 06 F1 | 	add	local01, #28
29efc     0F 35 02 FB | 	rdlong	local12, local01
29f00     0B 34 06 F1 | 	add	local12, #11
29f04     1A 25 C2 FA | 	rdbyte	local04, local12
29f08     3F 24 06 F5 | 	and	local04, #63
29f0c     08 20 06 F1 | 	add	local02, #8
29f10     10 25 42 FC | 	wrbyte	local04, local02
29f14     08 20 86 F1 | 	sub	local02, #8
29f18     0F 13 02 FB | 	rdlong	arg01, local01
29f1c     1C 12 06 F1 | 	add	arg01, #28
29f20                 | ' {
29f20                 | ' 
29f20                 | ' 	return *((DWORD*)ptr);
29f20     09 FB 01 FB | 	rdlong	result1, arg01
29f24     10 FB 61 FC | 	wrlong	result1, local02
29f28     0F 13 02 FB | 	rdlong	arg01, local01
29f2c     16 12 06 F1 | 	add	arg01, #22
29f30                 | ' {
29f30                 | ' 
29f30                 | ' 	return *((WORD*)ptr);
29f30     09 FB E1 FA | 	rdword	result1, arg01
29f34     06 20 06 F1 | 	add	local02, #6
29f38     10 FB 51 FC | 	wrword	result1, local02
29f3c     0F 13 02 FB | 	rdlong	arg01, local01
29f40     18 12 06 F1 | 	add	arg01, #24
29f44                 | ' {
29f44                 | ' 
29f44                 | ' 	return *((WORD*)ptr);
29f44     09 FB E1 FA | 	rdword	result1, arg01
29f48     02 20 86 F1 | 	sub	local02, #2
29f4c     10 FB 51 FC | 	wrword	result1, local02
29f50                 | LR__4354
29f50     A7 F0 03 F6 | 	mov	ptra, fp
29f54     B2 00 A0 FD | 	call	#popregs_
29f58                 | _fatfs_cc_get_fileinfo_ret
29f58     2D 00 64 FD | 	ret
29f5c                 | 
29f5c                 | _fatfs_cc_create_name
29f5c     0D 4A 05 F6 | 	mov	COUNT_, #13
29f60     A8 00 A0 FD | 	call	#pushregs_
29f64     34 F0 07 F1 | 	add	ptra, #52
29f68     04 4E 05 F1 | 	add	fp, #4
29f6c     A7 12 62 FC | 	wrlong	arg01, fp
29f70     04 4E 05 F1 | 	add	fp, #4
29f74     A7 14 62 FC | 	wrlong	arg02, fp
29f78     0A FB 01 FB | 	rdlong	result1, arg02
29f7c     28 4E 05 F1 | 	add	fp, #40
29f80     A7 FA 61 FC | 	wrlong	result1, fp
29f84     2C 4E 85 F1 | 	sub	fp, #44
29f88     A7 FA 01 FB | 	rdlong	result1, fp
29f8c     FD 1E 02 FB | 	rdlong	local01, result1
29f90     0C 1E 06 F1 | 	add	local01, #12
29f94     0F 21 02 FB | 	rdlong	local02, local01
29f98     14 4E 05 F1 | 	add	fp, #20
29f9c     A7 20 62 FC | 	wrlong	local02, fp
29fa0     14 4E 05 F1 | 	add	fp, #20
29fa4     A7 00 68 FC | 	wrlong	#0, fp
29fa8     2C 4E 85 F1 | 	sub	fp, #44
29fac                 | ' 
29fac                 | ' 
29fac                 | ' 
29fac                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
29fac                 | ' 	for (;;) {
29fac                 | LR__4360
29fac     30 4E 05 F1 | 	add	fp, #48
29fb0     A7 12 02 F6 | 	mov	arg01, fp
29fb4     30 4E 85 F1 | 	sub	fp, #48
29fb8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
29fbc     1C 4E 05 F1 | 	add	fp, #28
29fc0     A7 FA 61 FC | 	wrlong	result1, fp
29fc4     1C 4E 85 F1 | 	sub	fp, #28
29fc8     FF FF 7F FF 
29fcc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
29fd0     06 FA 05 A6 |  if_e	mov	result1, #6
29fd4     74 08 90 AD |  if_e	jmp	#LR__4400
29fd8     1C 4E 05 F1 | 	add	fp, #28
29fdc     A7 1E 02 FB | 	rdlong	local01, fp
29fe0     1C 4E 85 F1 | 	sub	fp, #28
29fe4     80 00 00 FF 
29fe8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
29fec     3C 00 90 CD |  if_b	jmp	#LR__4361
29ff0     18 4E 05 F1 | 	add	fp, #24
29ff4     A7 22 02 FB | 	rdlong	local03, fp
29ff8     14 4E 05 F1 | 	add	fp, #20
29ffc     A7 1E 02 FB | 	rdlong	local01, fp
2a000     0F 25 02 F6 | 	mov	local04, local01
2a004     01 24 06 F1 | 	add	local04, #1
2a008     A7 24 62 FC | 	wrlong	local04, fp
2a00c     01 1E 66 F0 | 	shl	local01, #1
2a010     11 1F 02 F1 | 	add	local01, local03
2a014     10 4E 85 F1 | 	sub	fp, #16
2a018     A7 26 02 FB | 	rdlong	local05, fp
2a01c     1C 4E 85 F1 | 	sub	fp, #28
2a020     13 29 02 F6 | 	mov	local06, local05
2a024     10 28 46 F0 | 	shr	local06, #16
2a028     0F 29 52 FC | 	wrword	local06, local01
2a02c                 | LR__4361
2a02c     1C 4E 05 F1 | 	add	fp, #28
2a030     A7 1E 02 FB | 	rdlong	local01, fp
2a034     08 4E 85 F1 | 	sub	fp, #8
2a038     A7 1E 52 FC | 	wrword	local01, fp
2a03c     A7 1E E2 FA | 	rdword	local01, fp
2a040     14 4E 85 F1 | 	sub	fp, #20
2a044     20 1E 16 F2 | 	cmp	local01, #32 wc
2a048     B0 00 90 CD |  if_b	jmp	#LR__4363
2a04c     14 4E 05 F1 | 	add	fp, #20
2a050     A7 1E E2 FA | 	rdword	local01, fp
2a054     14 4E 85 F1 | 	sub	fp, #20
2a058     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a05c     14 4E 05 51 |  if_ne	add	fp, #20
2a060     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a064     14 4E 85 51 |  if_ne	sub	fp, #20
2a068     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a06c     8C 00 90 AD |  if_e	jmp	#LR__4363
2a070     14 4E 05 F1 | 	add	fp, #20
2a074     A7 12 E2 FA | 	rdword	arg01, fp
2a078     14 4E 85 F1 | 	sub	fp, #20
2a07c     80 12 16 F2 | 	cmp	arg01, #128 wc
2a080     24 00 90 3D |  if_ae	jmp	#LR__4362
2a084     7F 01 00 FF 
2a088     C0 13 06 F6 | 	mov	arg01, ##@LR__5022
2a08c     14 4E 05 F1 | 	add	fp, #20
2a090     A7 14 E2 FA | 	rdword	arg02, fp
2a094     14 4E 85 F1 | 	sub	fp, #20
2a098     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a09c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0a0     06 FA 05 56 |  if_ne	mov	result1, #6
2a0a4     A4 07 90 5D |  if_ne	jmp	#LR__4400
2a0a8                 | LR__4362
2a0a8     2C 4E 05 F1 | 	add	fp, #44
2a0ac     A7 28 02 FB | 	rdlong	local06, fp
2a0b0     2C 4E 85 F1 | 	sub	fp, #44
2a0b4     FF 28 16 F2 | 	cmp	local06, #255 wc
2a0b8     06 FA 05 36 |  if_ae	mov	result1, #6
2a0bc     8C 07 90 3D |  if_ae	jmp	#LR__4400
2a0c0     18 4E 05 F1 | 	add	fp, #24
2a0c4     A7 22 02 FB | 	rdlong	local03, fp
2a0c8     14 4E 05 F1 | 	add	fp, #20
2a0cc     A7 20 02 FB | 	rdlong	local02, fp
2a0d0     10 25 02 F6 | 	mov	local04, local02
2a0d4     01 24 06 F1 | 	add	local04, #1
2a0d8     A7 24 62 FC | 	wrlong	local04, fp
2a0dc     10 1F 02 F6 | 	mov	local01, local02
2a0e0     01 1E 66 F0 | 	shl	local01, #1
2a0e4     11 1F 02 F1 | 	add	local01, local03
2a0e8     18 4E 85 F1 | 	sub	fp, #24
2a0ec     A7 28 E2 FA | 	rdword	local06, fp
2a0f0     14 4E 85 F1 | 	sub	fp, #20
2a0f4     0F 29 52 FC | 	wrword	local06, local01
2a0f8     B0 FE 9F FD | 	jmp	#LR__4360
2a0fc                 | LR__4363
2a0fc     14 4E 05 F1 | 	add	fp, #20
2a100     A7 2A E2 FA | 	rdword	local07, fp
2a104     14 4E 85 F1 | 	sub	fp, #20
2a108     20 2A 16 F2 | 	cmp	local07, #32 wc
2a10c     10 4E 05 C1 |  if_b	add	fp, #16
2a110     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a114     10 4E 85 C1 |  if_b	sub	fp, #16
2a118     74 00 90 CD |  if_b	jmp	#LR__4368
2a11c     97 24 48 FB | 	callpa	#(@LR__4366-@LR__4364)>>2,fcache_load_ptr_
2a120                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a120                 | LR__4364
2a120     30 4E 05 F1 | 	add	fp, #48
2a124     A7 24 02 FB | 	rdlong	local04, fp
2a128     30 4E 85 F1 | 	sub	fp, #48
2a12c     12 2B C2 FA | 	rdbyte	local07, local04
2a130     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a134     18 00 90 AD |  if_e	jmp	#LR__4365
2a138     30 4E 05 F1 | 	add	fp, #48
2a13c     A7 24 02 FB | 	rdlong	local04, fp
2a140     30 4E 85 F1 | 	sub	fp, #48
2a144     12 21 C2 FA | 	rdbyte	local02, local04
2a148     5C 20 0E F2 | 	cmp	local02, #92 wz
2a14c     18 00 90 5D |  if_ne	jmp	#LR__4367
2a150                 | LR__4365
2a150     30 4E 05 F1 | 	add	fp, #48
2a154     A7 1E 02 FB | 	rdlong	local01, fp
2a158     01 1E 06 F1 | 	add	local01, #1
2a15c     A7 1E 62 FC | 	wrlong	local01, fp
2a160     30 4E 85 F1 | 	sub	fp, #48
2a164     B8 FF 9F FD | 	jmp	#LR__4364
2a168                 | LR__4366
2a168                 | LR__4367
2a168     10 4E 05 F1 | 	add	fp, #16
2a16c     A7 00 48 FC | 	wrbyte	#0, fp
2a170     20 4E 05 F1 | 	add	fp, #32
2a174     A7 28 02 FB | 	rdlong	local06, fp
2a178     30 4E 85 F1 | 	sub	fp, #48
2a17c     14 2B C2 FA | 	rdbyte	local07, local06
2a180     20 2A 16 F2 | 	cmp	local07, #32 wc
2a184     10 4E 05 C1 |  if_b	add	fp, #16
2a188     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a18c     10 4E 85 C1 |  if_b	sub	fp, #16
2a190                 | LR__4368
2a190     08 4E 05 F1 | 	add	fp, #8
2a194     A7 2A 02 FB | 	rdlong	local07, fp
2a198     28 4E 05 F1 | 	add	fp, #40
2a19c     A7 1E 02 FB | 	rdlong	local01, fp
2a1a0     30 4E 85 F1 | 	sub	fp, #48
2a1a4     15 1F 62 FC | 	wrlong	local01, local07
2a1a8     97 38 48 FB | 	callpa	#(@LR__4370-@LR__4369)>>2,fcache_load_ptr_
2a1ac                 | ' 	}
2a1ac                 | ' 	*path = p;
2a1ac                 | ' #line 2862 "ff.c"
2a1ac                 | ' 	while (di) {
2a1ac                 | LR__4369
2a1ac     2C 4E 05 F1 | 	add	fp, #44
2a1b0     A7 2A 0A FB | 	rdlong	local07, fp wz
2a1b4     2C 4E 85 F1 | 	sub	fp, #44
2a1b8     60 00 90 AD |  if_e	jmp	#LR__4371
2a1bc     18 4E 05 F1 | 	add	fp, #24
2a1c0     A7 28 02 FB | 	rdlong	local06, fp
2a1c4     14 4E 05 F1 | 	add	fp, #20
2a1c8     A7 24 02 FB | 	rdlong	local04, fp
2a1cc     01 24 86 F1 | 	sub	local04, #1
2a1d0     01 24 66 F0 | 	shl	local04, #1
2a1d4     14 25 02 F1 | 	add	local04, local06
2a1d8     12 29 E2 FA | 	rdword	local06, local04
2a1dc     18 4E 85 F1 | 	sub	fp, #24
2a1e0     A7 28 52 FC | 	wrword	local06, fp
2a1e4     A7 2A E2 FA | 	rdword	local07, fp
2a1e8     14 4E 85 F1 | 	sub	fp, #20
2a1ec     20 2A 0E F2 | 	cmp	local07, #32 wz
2a1f0     14 4E 05 51 |  if_ne	add	fp, #20
2a1f4     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a1f8     14 4E 85 51 |  if_ne	sub	fp, #20
2a1fc     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a200     18 00 90 5D |  if_ne	jmp	#LR__4371
2a204     2C 4E 05 F1 | 	add	fp, #44
2a208     A7 1E 02 FB | 	rdlong	local01, fp
2a20c     01 1E 86 F1 | 	sub	local01, #1
2a210     A7 1E 62 FC | 	wrlong	local01, fp
2a214     2C 4E 85 F1 | 	sub	fp, #44
2a218     90 FF 9F FD | 	jmp	#LR__4369
2a21c                 | LR__4370
2a21c                 | LR__4371
2a21c     18 4E 05 F1 | 	add	fp, #24
2a220     A7 2C 02 FB | 	rdlong	local08, fp
2a224     14 4E 05 F1 | 	add	fp, #20
2a228     A7 24 02 FB | 	rdlong	local04, fp
2a22c     01 24 66 F0 | 	shl	local04, #1
2a230     16 25 02 F1 | 	add	local04, local08
2a234     12 01 58 FC | 	wrword	#0, local04
2a238     A7 2A 0A FB | 	rdlong	local07, fp wz
2a23c     2C 4E 85 F1 | 	sub	fp, #44
2a240     06 FA 05 A6 |  if_e	mov	result1, #6
2a244     04 06 90 AD |  if_e	jmp	#LR__4400
2a248                 | ' 
2a248                 | ' 
2a248                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a248     28 4E 05 F1 | 	add	fp, #40
2a24c     A7 00 68 FC | 	wrlong	#0, fp
2a250     28 4E 85 F1 | 	sub	fp, #40
2a254     97 22 48 FB | 	callpa	#(@LR__4373-@LR__4372)>>2,fcache_load_ptr_
2a258                 | LR__4372
2a258     18 4E 05 F1 | 	add	fp, #24
2a25c     A7 2E 02 FB | 	rdlong	local09, fp
2a260     10 4E 05 F1 | 	add	fp, #16
2a264     A7 30 02 FB | 	rdlong	local10, fp
2a268     28 4E 85 F1 | 	sub	fp, #40
2a26c     01 30 66 F0 | 	shl	local10, #1
2a270     17 31 02 F1 | 	add	local10, local09
2a274     18 33 E2 FA | 	rdword	local11, local10
2a278     20 32 0E F2 | 	cmp	local11, #32 wz
2a27c     1C 00 90 5D |  if_ne	jmp	#LR__4374
2a280     28 4E 05 F1 | 	add	fp, #40
2a284     A7 34 02 FB | 	rdlong	local12, fp
2a288     1A 27 02 F6 | 	mov	local05, local12
2a28c     01 26 06 F1 | 	add	local05, #1
2a290     A7 26 62 FC | 	wrlong	local05, fp
2a294     28 4E 85 F1 | 	sub	fp, #40
2a298     BC FF 9F FD | 	jmp	#LR__4372
2a29c                 | LR__4373
2a29c                 | LR__4374
2a29c     28 4E 05 F1 | 	add	fp, #40
2a2a0     A7 2A 02 FB | 	rdlong	local07, fp
2a2a4     28 4E 85 F1 | 	sub	fp, #40
2a2a8     01 2A 16 F2 | 	cmp	local07, #1 wc
2a2ac     28 00 90 3D |  if_ae	jmp	#LR__4375
2a2b0     18 4E 05 F1 | 	add	fp, #24
2a2b4     A7 22 02 FB | 	rdlong	local03, fp
2a2b8     10 4E 05 F1 | 	add	fp, #16
2a2bc     A7 2E 02 FB | 	rdlong	local09, fp
2a2c0     28 4E 85 F1 | 	sub	fp, #40
2a2c4     01 2E 66 F0 | 	shl	local09, #1
2a2c8     11 2F 02 F1 | 	add	local09, local03
2a2cc     17 1F E2 FA | 	rdword	local01, local09
2a2d0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a2d4     14 00 90 5D |  if_ne	jmp	#LR__4376
2a2d8                 | LR__4375
2a2d8     10 4E 05 F1 | 	add	fp, #16
2a2dc     A7 2A C2 FA | 	rdbyte	local07, fp
2a2e0     03 2A 46 F5 | 	or	local07, #3
2a2e4     A7 2A 42 FC | 	wrbyte	local07, fp
2a2e8     10 4E 85 F1 | 	sub	fp, #16
2a2ec                 | LR__4376
2a2ec     97 2C 48 FB | 	callpa	#(@LR__4378-@LR__4377)>>2,fcache_load_ptr_
2a2f0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a2f0                 | LR__4377
2a2f0     2C 4E 05 F1 | 	add	fp, #44
2a2f4     A7 2A 02 FB | 	rdlong	local07, fp
2a2f8     2C 4E 85 F1 | 	sub	fp, #44
2a2fc     01 2A 16 F2 | 	cmp	local07, #1 wc
2a300     44 00 90 CD |  if_b	jmp	#LR__4379
2a304     18 4E 05 F1 | 	add	fp, #24
2a308     A7 28 02 FB | 	rdlong	local06, fp
2a30c     14 4E 05 F1 | 	add	fp, #20
2a310     A7 22 02 FB | 	rdlong	local03, fp
2a314     2C 4E 85 F1 | 	sub	fp, #44
2a318     01 22 86 F1 | 	sub	local03, #1
2a31c     01 22 66 F0 | 	shl	local03, #1
2a320     14 23 02 F1 | 	add	local03, local06
2a324     11 1F E2 FA | 	rdword	local01, local03
2a328     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a32c     18 00 90 AD |  if_e	jmp	#LR__4379
2a330     2C 4E 05 F1 | 	add	fp, #44
2a334     A7 1E 02 FB | 	rdlong	local01, fp
2a338     01 1E 86 F1 | 	sub	local01, #1
2a33c     A7 1E 62 FC | 	wrlong	local01, fp
2a340     2C 4E 85 F1 | 	sub	fp, #44
2a344     A8 FF 9F FD | 	jmp	#LR__4377
2a348                 | LR__4378
2a348                 | LR__4379
2a348     04 4E 05 F1 | 	add	fp, #4
2a34c     A7 12 02 FB | 	rdlong	arg01, fp
2a350     04 4E 85 F1 | 	sub	fp, #4
2a354     20 12 06 F1 | 	add	arg01, #32
2a358     20 14 06 F6 | 	mov	arg02, #32
2a35c     0B 16 06 F6 | 	mov	arg03, #11
2a360     09 37 02 F6 | 	mov	local13, arg01
2a364     98 00 A0 FD | 	call	#\builtin_bytefill_
2a368     1B FB 01 F6 | 	mov	result1, local13
2a36c     0C 4E 05 F1 | 	add	fp, #12
2a370     A7 00 48 FC | 	wrbyte	#0, fp
2a374     A7 2A C2 FA | 	rdbyte	local07, fp
2a378     14 4E 05 F1 | 	add	fp, #20
2a37c     A7 2A 62 FC | 	wrlong	local07, fp
2a380     04 4E 05 F1 | 	add	fp, #4
2a384     A7 10 68 FC | 	wrlong	#8, fp
2a388     24 4E 85 F1 | 	sub	fp, #36
2a38c                 | ' 
2a38c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a38c                 | ' 	i = b = 0; ni = 8;
2a38c                 | ' 	for (;;) {
2a38c                 | LR__4380
2a38c     18 4E 05 F1 | 	add	fp, #24
2a390     A7 22 02 FB | 	rdlong	local03, fp
2a394     10 4E 05 F1 | 	add	fp, #16
2a398     A7 2E 02 FB | 	rdlong	local09, fp
2a39c     17 25 02 F6 | 	mov	local04, local09
2a3a0     01 24 06 F1 | 	add	local04, #1
2a3a4     A7 24 62 FC | 	wrlong	local04, fp
2a3a8     01 2E 66 F0 | 	shl	local09, #1
2a3ac     11 2F 02 F1 | 	add	local09, local03
2a3b0     17 29 E2 FA | 	rdword	local06, local09
2a3b4     14 4E 85 F1 | 	sub	fp, #20
2a3b8     A7 28 52 FC | 	wrword	local06, fp
2a3bc     A7 2A EA FA | 	rdword	local07, fp wz
2a3c0     14 4E 85 F1 | 	sub	fp, #20
2a3c4     74 03 90 AD |  if_e	jmp	#LR__4396
2a3c8     14 4E 05 F1 | 	add	fp, #20
2a3cc     A7 2A E2 FA | 	rdword	local07, fp
2a3d0     14 4E 85 F1 | 	sub	fp, #20
2a3d4     20 2A 0E F2 | 	cmp	local07, #32 wz
2a3d8     30 00 90 AD |  if_e	jmp	#LR__4381
2a3dc     14 4E 05 F1 | 	add	fp, #20
2a3e0     A7 1E E2 FA | 	rdword	local01, fp
2a3e4     14 4E 85 F1 | 	sub	fp, #20
2a3e8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a3ec     34 00 90 5D |  if_ne	jmp	#LR__4382
2a3f0     28 4E 05 F1 | 	add	fp, #40
2a3f4     A7 24 02 FB | 	rdlong	local04, fp
2a3f8     04 4E 05 F1 | 	add	fp, #4
2a3fc     A7 30 02 FB | 	rdlong	local10, fp
2a400     2C 4E 85 F1 | 	sub	fp, #44
2a404     18 25 0A F2 | 	cmp	local04, local10 wz
2a408     18 00 90 AD |  if_e	jmp	#LR__4382
2a40c                 | LR__4381
2a40c     10 4E 05 F1 | 	add	fp, #16
2a410     A7 2A C2 FA | 	rdbyte	local07, fp
2a414     03 2A 46 F5 | 	or	local07, #3
2a418     A7 2A 42 FC | 	wrbyte	local07, fp
2a41c     10 4E 85 F1 | 	sub	fp, #16
2a420                 | ' 			cf |=  0x01  |  0x02 ;
2a420                 | ' 			continue;
2a420     68 FF 9F FD | 	jmp	#LR__4380
2a424                 | LR__4382
2a424     20 4E 05 F1 | 	add	fp, #32
2a428     A7 2A 02 FB | 	rdlong	local07, fp
2a42c     04 4E 05 F1 | 	add	fp, #4
2a430     A7 1E 02 FB | 	rdlong	local01, fp
2a434     24 4E 85 F1 | 	sub	fp, #36
2a438     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a43c     1C 00 90 3D |  if_ae	jmp	#LR__4383
2a440     28 4E 05 F1 | 	add	fp, #40
2a444     A7 2C 02 FB | 	rdlong	local08, fp
2a448     04 4E 05 F1 | 	add	fp, #4
2a44c     A7 30 02 FB | 	rdlong	local10, fp
2a450     2C 4E 85 F1 | 	sub	fp, #44
2a454     18 2D 0A F2 | 	cmp	local08, local10 wz
2a458     B0 00 90 5D |  if_ne	jmp	#LR__4385
2a45c                 | LR__4383
2a45c     24 4E 05 F1 | 	add	fp, #36
2a460     A7 2A 02 FB | 	rdlong	local07, fp
2a464     24 4E 85 F1 | 	sub	fp, #36
2a468     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a46c     18 00 90 5D |  if_ne	jmp	#LR__4384
2a470     10 4E 05 F1 | 	add	fp, #16
2a474     A7 2A C2 FA | 	rdbyte	local07, fp
2a478     03 2A 46 F5 | 	or	local07, #3
2a47c     A7 2A 42 FC | 	wrbyte	local07, fp
2a480     10 4E 85 F1 | 	sub	fp, #16
2a484                 | ' 				cf |=  0x01  |  0x02 ;
2a484                 | ' 				break;
2a484     B4 02 90 FD | 	jmp	#LR__4396
2a488                 | LR__4384
2a488     28 4E 05 F1 | 	add	fp, #40
2a48c     A7 2A 02 FB | 	rdlong	local07, fp
2a490     04 4E 05 F1 | 	add	fp, #4
2a494     A7 1E 02 FB | 	rdlong	local01, fp
2a498     2C 4E 85 F1 | 	sub	fp, #44
2a49c     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a4a0     10 4E 05 51 |  if_ne	add	fp, #16
2a4a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a4a8     03 2A 46 55 |  if_ne	or	local07, #3
2a4ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a4b0     10 4E 85 51 |  if_ne	sub	fp, #16
2a4b4     28 4E 05 F1 | 	add	fp, #40
2a4b8     A7 2A 02 FB | 	rdlong	local07, fp
2a4bc     04 4E 05 F1 | 	add	fp, #4
2a4c0     A7 20 02 FB | 	rdlong	local02, fp
2a4c4     2C 4E 85 F1 | 	sub	fp, #44
2a4c8     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a4cc     6C 02 90 1D |  if_a	jmp	#LR__4396
2a4d0     2C 4E 05 F1 | 	add	fp, #44
2a4d4     A7 2A 02 FB | 	rdlong	local07, fp
2a4d8     04 4E 85 F1 | 	sub	fp, #4
2a4dc     A7 2A 62 FC | 	wrlong	local07, fp
2a4e0     08 4E 85 F1 | 	sub	fp, #8
2a4e4     A7 10 68 FC | 	wrlong	#8, fp
2a4e8     04 4E 05 F1 | 	add	fp, #4
2a4ec     A7 16 68 FC | 	wrlong	#11, fp
2a4f0     18 4E 85 F1 | 	sub	fp, #24
2a4f4     A7 32 C2 FA | 	rdbyte	local11, fp
2a4f8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a4fc     02 2A 66 F0 | 	shl	local07, #2
2a500     A7 2A 42 FC | 	wrbyte	local07, fp
2a504     0C 4E 85 F1 | 	sub	fp, #12
2a508                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a508                 | ' 			continue;
2a508     80 FE 9F FD | 	jmp	#LR__4380
2a50c                 | LR__4385
2a50c     14 4E 05 F1 | 	add	fp, #20
2a510     A7 2A E2 FA | 	rdword	local07, fp
2a514     14 4E 85 F1 | 	sub	fp, #20
2a518     80 2A 16 F2 | 	cmp	local07, #128 wc
2a51c     6C 00 90 CD |  if_b	jmp	#LR__4387
2a520     10 4E 05 F1 | 	add	fp, #16
2a524     A7 2A C2 FA | 	rdbyte	local07, fp
2a528     02 2A 46 F5 | 	or	local07, #2
2a52c     A7 2A 42 FC | 	wrbyte	local07, fp
2a530     04 4E 05 F1 | 	add	fp, #4
2a534     A7 12 E2 FA | 	rdword	arg01, fp
2a538     14 4E 85 F1 | 	sub	fp, #20
2a53c     01 00 00 FF 
2a540     52 15 06 F6 | 	mov	arg02, ##850
2a544     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a548     14 4E 05 F1 | 	add	fp, #20
2a54c     A7 FA 51 FC | 	wrword	result1, fp
2a550     A7 2A E2 FA | 	rdword	local07, fp
2a554     14 4E 85 F1 | 	sub	fp, #20
2a558     80 2A CE F7 | 	test	local07, #128 wz
2a55c     2C 00 90 AD |  if_e	jmp	#LR__4386
2a560     14 4E 05 F1 | 	add	fp, #20
2a564     A7 20 E2 FA | 	rdword	local02, fp
2a568     7F 20 06 F5 | 	and	local02, #127
2a56c     01 00 00 FF 
2a570     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a574     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a578     10 2B C2 FA | 	rdbyte	local07, local02
2a57c     A7 2A 52 FC | 	wrword	local07, fp
2a580     14 4E 85 F1 | 	sub	fp, #20
2a584     01 00 00 FF 
2a588     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a58c                 | LR__4386
2a58c                 | LR__4387
2a58c     14 4E 05 F1 | 	add	fp, #20
2a590     A7 2A E2 FA | 	rdword	local07, fp
2a594     14 4E 85 F1 | 	sub	fp, #20
2a598     00 2B 16 F2 | 	cmp	local07, #256 wc
2a59c     88 00 90 CD |  if_b	jmp	#LR__4389
2a5a0     24 4E 05 F1 | 	add	fp, #36
2a5a4     A7 2A 02 FB | 	rdlong	local07, fp
2a5a8     01 2A 86 F1 | 	sub	local07, #1
2a5ac     04 4E 85 F1 | 	sub	fp, #4
2a5b0     A7 20 02 FB | 	rdlong	local02, fp
2a5b4     20 4E 85 F1 | 	sub	fp, #32
2a5b8     15 21 12 F2 | 	cmp	local02, local07 wc
2a5bc     2C 00 90 CD |  if_b	jmp	#LR__4388
2a5c0     10 4E 05 F1 | 	add	fp, #16
2a5c4     A7 32 C2 FA | 	rdbyte	local11, fp
2a5c8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a5cc     03 2A 46 F5 | 	or	local07, #3
2a5d0     A7 2A 42 FC | 	wrbyte	local07, fp
2a5d4     14 4E 05 F1 | 	add	fp, #20
2a5d8     A7 2A 02 FB | 	rdlong	local07, fp
2a5dc     04 4E 85 F1 | 	sub	fp, #4
2a5e0     A7 2A 62 FC | 	wrlong	local07, fp
2a5e4     20 4E 85 F1 | 	sub	fp, #32
2a5e8                 | ' 				cf |=  0x01  |  0x02 ;
2a5e8                 | ' 				i = ni; continue;
2a5e8     A0 FD 9F FD | 	jmp	#LR__4380
2a5ec                 | LR__4388
2a5ec     04 4E 05 F1 | 	add	fp, #4
2a5f0     A7 2E 02 FB | 	rdlong	local09, fp
2a5f4     1C 4E 05 F1 | 	add	fp, #28
2a5f8     A7 30 02 FB | 	rdlong	local10, fp
2a5fc     18 25 02 F6 | 	mov	local04, local10
2a600     01 24 06 F1 | 	add	local04, #1
2a604     A7 24 62 FC | 	wrlong	local04, fp
2a608     20 2E 06 F1 | 	add	local09, #32
2a60c     17 31 02 F1 | 	add	local10, local09
2a610     0C 4E 85 F1 | 	sub	fp, #12
2a614     A7 22 E2 FA | 	rdword	local03, fp
2a618     14 4E 85 F1 | 	sub	fp, #20
2a61c     08 22 46 F0 | 	shr	local03, #8
2a620     18 23 42 FC | 	wrbyte	local03, local10
2a624     D4 00 90 FD | 	jmp	#LR__4395
2a628                 | LR__4389
2a628     14 4E 05 F1 | 	add	fp, #20
2a62c     A7 2A EA FA | 	rdword	local07, fp wz
2a630     14 4E 85 F1 | 	sub	fp, #20
2a634     20 00 90 AD |  if_e	jmp	#LR__4390
2a638     7F 01 00 FF 
2a63c     C9 13 06 F6 | 	mov	arg01, ##@LR__5023
2a640     14 4E 05 F1 | 	add	fp, #20
2a644     A7 14 E2 FA | 	rdword	arg02, fp
2a648     14 4E 85 F1 | 	sub	fp, #20
2a64c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a650     00 FA 0D F2 | 	cmp	result1, #0 wz
2a654     20 00 90 AD |  if_e	jmp	#LR__4391
2a658                 | LR__4390
2a658     14 4E 05 F1 | 	add	fp, #20
2a65c     A7 BE 58 FC | 	wrword	#95, fp
2a660     04 4E 85 F1 | 	sub	fp, #4
2a664     A7 2A C2 FA | 	rdbyte	local07, fp
2a668     03 2A 46 F5 | 	or	local07, #3
2a66c     A7 2A 42 FC | 	wrbyte	local07, fp
2a670     10 4E 85 F1 | 	sub	fp, #16
2a674     84 00 90 FD | 	jmp	#LR__4394
2a678                 | LR__4391
2a678     14 4E 05 F1 | 	add	fp, #20
2a67c     A7 2A E2 FA | 	rdword	local07, fp
2a680     14 4E 85 F1 | 	sub	fp, #20
2a684     41 2A 16 F2 | 	cmp	local07, #65 wc
2a688     24 00 90 CD |  if_b	jmp	#LR__4392
2a68c     14 4E 05 F1 | 	add	fp, #20
2a690     A7 1E E2 FA | 	rdword	local01, fp
2a694     14 4E 85 F1 | 	sub	fp, #20
2a698     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a69c     0C 4E 05 C1 |  if_b	add	fp, #12
2a6a0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a6a4     02 2A 46 C5 |  if_b	or	local07, #2
2a6a8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a6ac     0C 4E 85 C1 |  if_b	sub	fp, #12
2a6b0                 | LR__4392
2a6b0     14 4E 05 F1 | 	add	fp, #20
2a6b4     A7 2A E2 FA | 	rdword	local07, fp
2a6b8     14 4E 85 F1 | 	sub	fp, #20
2a6bc     61 2A 16 F2 | 	cmp	local07, #97 wc
2a6c0     38 00 90 CD |  if_b	jmp	#LR__4393
2a6c4     14 4E 05 F1 | 	add	fp, #20
2a6c8     A7 1E E2 FA | 	rdword	local01, fp
2a6cc     14 4E 85 F1 | 	sub	fp, #20
2a6d0     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a6d4     24 00 90 3D |  if_ae	jmp	#LR__4393
2a6d8     0C 4E 05 F1 | 	add	fp, #12
2a6dc     A7 2A C2 FA | 	rdbyte	local07, fp
2a6e0     01 2A 46 F5 | 	or	local07, #1
2a6e4     A7 2A 42 FC | 	wrbyte	local07, fp
2a6e8     08 4E 05 F1 | 	add	fp, #8
2a6ec     A7 2A E2 FA | 	rdword	local07, fp
2a6f0     20 2A 86 F1 | 	sub	local07, #32
2a6f4     A7 2A 52 FC | 	wrword	local07, fp
2a6f8     14 4E 85 F1 | 	sub	fp, #20
2a6fc                 | LR__4393
2a6fc                 | LR__4394
2a6fc                 | LR__4395
2a6fc     04 4E 05 F1 | 	add	fp, #4
2a700     A7 32 02 FB | 	rdlong	local11, fp
2a704     19 2F 02 F6 | 	mov	local09, local11
2a708     1C 4E 05 F1 | 	add	fp, #28
2a70c     A7 20 02 FB | 	rdlong	local02, fp
2a710     10 25 02 F6 | 	mov	local04, local02
2a714     01 24 06 F1 | 	add	local04, #1
2a718     A7 24 62 FC | 	wrlong	local04, fp
2a71c     10 31 02 F6 | 	mov	local10, local02
2a720     20 2E 06 F1 | 	add	local09, #32
2a724     17 31 02 F1 | 	add	local10, local09
2a728     0C 4E 85 F1 | 	sub	fp, #12
2a72c     A7 22 E2 FA | 	rdword	local03, fp
2a730     14 4E 85 F1 | 	sub	fp, #20
2a734     18 23 42 FC | 	wrbyte	local03, local10
2a738     50 FC 9F FD | 	jmp	#LR__4380
2a73c                 | LR__4396
2a73c     04 4E 05 F1 | 	add	fp, #4
2a740     A7 32 02 FB | 	rdlong	local11, fp
2a744     04 4E 85 F1 | 	sub	fp, #4
2a748     20 32 06 F1 | 	add	local11, #32
2a74c     19 2B C2 FA | 	rdbyte	local07, local11
2a750     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a754     04 4E 05 A1 |  if_e	add	fp, #4
2a758     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a75c     04 4E 85 A1 |  if_e	sub	fp, #4
2a760     20 2A 06 A1 |  if_e	add	local07, #32
2a764     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a768     24 4E 05 F1 | 	add	fp, #36
2a76c     A7 2A 02 FB | 	rdlong	local07, fp
2a770     24 4E 85 F1 | 	sub	fp, #36
2a774     08 2A 0E F2 | 	cmp	local07, #8 wz
2a778     0C 4E 05 A1 |  if_e	add	fp, #12
2a77c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a780     02 2A 66 A0 |  if_e	shl	local07, #2
2a784     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a788     0C 4E 85 A1 |  if_e	sub	fp, #12
2a78c     0C 4E 05 F1 | 	add	fp, #12
2a790     A7 2A C2 FA | 	rdbyte	local07, fp
2a794     0C 4E 85 F1 | 	sub	fp, #12
2a798     0C 2A 06 F5 | 	and	local07, #12
2a79c     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a7a0     18 00 90 AD |  if_e	jmp	#LR__4397
2a7a4     0C 4E 05 F1 | 	add	fp, #12
2a7a8     A7 1E C2 FA | 	rdbyte	local01, fp
2a7ac     0C 4E 85 F1 | 	sub	fp, #12
2a7b0     03 1E 06 F5 | 	and	local01, #3
2a7b4     03 1E 0E F2 | 	cmp	local01, #3 wz
2a7b8     14 00 90 5D |  if_ne	jmp	#LR__4398
2a7bc                 | LR__4397
2a7bc     10 4E 05 F1 | 	add	fp, #16
2a7c0     A7 2A C2 FA | 	rdbyte	local07, fp
2a7c4     02 2A 46 F5 | 	or	local07, #2
2a7c8     A7 2A 42 FC | 	wrbyte	local07, fp
2a7cc     10 4E 85 F1 | 	sub	fp, #16
2a7d0                 | LR__4398
2a7d0     10 4E 05 F1 | 	add	fp, #16
2a7d4     A7 2A C2 FA | 	rdbyte	local07, fp
2a7d8     10 4E 85 F1 | 	sub	fp, #16
2a7dc     02 2A CE F7 | 	test	local07, #2 wz
2a7e0     48 00 90 5D |  if_ne	jmp	#LR__4399
2a7e4     0C 4E 05 F1 | 	add	fp, #12
2a7e8     A7 2A C2 FA | 	rdbyte	local07, fp
2a7ec     0C 4E 85 F1 | 	sub	fp, #12
2a7f0     01 2A CE F7 | 	test	local07, #1 wz
2a7f4     10 4E 05 51 |  if_ne	add	fp, #16
2a7f8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a7fc     10 2A 46 55 |  if_ne	or	local07, #16
2a800     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a804     10 4E 85 51 |  if_ne	sub	fp, #16
2a808     0C 4E 05 F1 | 	add	fp, #12
2a80c     A7 2A C2 FA | 	rdbyte	local07, fp
2a810     0C 4E 85 F1 | 	sub	fp, #12
2a814     04 2A CE F7 | 	test	local07, #4 wz
2a818     10 4E 05 51 |  if_ne	add	fp, #16
2a81c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a820     08 2A 46 55 |  if_ne	or	local07, #8
2a824     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a828     10 4E 85 51 |  if_ne	sub	fp, #16
2a82c                 | LR__4399
2a82c     04 4E 05 F1 | 	add	fp, #4
2a830     A7 2A 02 FB | 	rdlong	local07, fp
2a834     0C 4E 05 F1 | 	add	fp, #12
2a838     A7 1E C2 FA | 	rdbyte	local01, fp
2a83c     10 4E 85 F1 | 	sub	fp, #16
2a840     2B 2A 06 F1 | 	add	local07, #43
2a844     15 1F 42 FC | 	wrbyte	local01, local07
2a848                 | ' 	}
2a848                 | ' 
2a848                 | ' 	dp->fn[ 11 ] = cf;
2a848                 | ' 
2a848                 | ' 	return FR_OK;
2a848     00 FA 05 F6 | 	mov	result1, #0
2a84c                 | LR__4400
2a84c     A7 F0 03 F6 | 	mov	ptra, fp
2a850     B2 00 A0 FD | 	call	#popregs_
2a854                 | _fatfs_cc_create_name_ret
2a854     2D 00 64 FD | 	ret
2a858                 | 
2a858                 | _fatfs_cc_follow_path
2a858     02 4A 05 F6 | 	mov	COUNT_, #2
2a85c     A8 00 A0 FD | 	call	#pushregs_
2a860     18 F0 07 F1 | 	add	ptra, #24
2a864     04 4E 05 F1 | 	add	fp, #4
2a868     A7 12 62 FC | 	wrlong	arg01, fp
2a86c     04 4E 05 F1 | 	add	fp, #4
2a870     A7 14 62 FC | 	wrlong	arg02, fp
2a874     04 4E 85 F1 | 	sub	fp, #4
2a878     A7 FA 01 FB | 	rdlong	result1, fp
2a87c     FD 1E 02 FB | 	rdlong	local01, result1
2a880     10 4E 05 F1 | 	add	fp, #16
2a884     A7 1E 62 FC | 	wrlong	local01, fp
2a888     14 4E 85 F1 | 	sub	fp, #20
2a88c     97 24 48 FB | 	callpa	#(@LR__4412-@LR__4410)>>2,fcache_load_ptr_
2a890                 | ' )
2a890                 | ' {
2a890                 | ' 	FRESULT res;
2a890                 | ' 	BYTE ns;
2a890                 | ' 	FATFS *fs = dp->obj.fs;
2a890                 | ' #line 3034 "ff.c"
2a890                 | ' 	{
2a890                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2a890                 | LR__4410
2a890     08 4E 05 F1 | 	add	fp, #8
2a894     A7 1E 02 FB | 	rdlong	local01, fp
2a898     08 4E 85 F1 | 	sub	fp, #8
2a89c     0F 1F C2 FA | 	rdbyte	local01, local01
2a8a0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a8a4     18 00 90 AD |  if_e	jmp	#LR__4411
2a8a8     08 4E 05 F1 | 	add	fp, #8
2a8ac     A7 1E 02 FB | 	rdlong	local01, fp
2a8b0     08 4E 85 F1 | 	sub	fp, #8
2a8b4     0F 1F C2 FA | 	rdbyte	local01, local01
2a8b8     5C 1E 0E F2 | 	cmp	local01, #92 wz
2a8bc     18 00 90 5D |  if_ne	jmp	#LR__4413
2a8c0                 | LR__4411
2a8c0     08 4E 05 F1 | 	add	fp, #8
2a8c4     A7 1E 02 FB | 	rdlong	local01, fp
2a8c8     01 1E 06 F1 | 	add	local01, #1
2a8cc     A7 1E 62 FC | 	wrlong	local01, fp
2a8d0     08 4E 85 F1 | 	sub	fp, #8
2a8d4     B8 FF 9F FD | 	jmp	#LR__4410
2a8d8                 | LR__4412
2a8d8                 | LR__4413
2a8d8     04 4E 05 F1 | 	add	fp, #4
2a8dc     A7 1E 02 FB | 	rdlong	local01, fp
2a8e0     08 1E 06 F1 | 	add	local01, #8
2a8e4     0F 01 68 FC | 	wrlong	#0, local01
2a8e8     04 4E 05 F1 | 	add	fp, #4
2a8ec     A7 1E 02 FB | 	rdlong	local01, fp
2a8f0     08 4E 85 F1 | 	sub	fp, #8
2a8f4     0F 1F C2 FA | 	rdbyte	local01, local01
2a8f8     20 1E 16 F2 | 	cmp	local01, #32 wc
2a8fc     30 00 90 3D |  if_ae	jmp	#LR__4414
2a900     04 4E 05 F1 | 	add	fp, #4
2a904     A7 1E 02 FB | 	rdlong	local01, fp
2a908     2B 1E 06 F1 | 	add	local01, #43
2a90c     0F 01 49 FC | 	wrbyte	#128, local01
2a910     A7 12 02 FB | 	rdlong	arg01, fp
2a914     04 4E 85 F1 | 	sub	fp, #4
2a918     00 14 06 F6 | 	mov	arg02, #0
2a91c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2a920     0C 4E 05 F1 | 	add	fp, #12
2a924     A7 FA 61 FC | 	wrlong	result1, fp
2a928     0C 4E 85 F1 | 	sub	fp, #12
2a92c     1C 01 90 FD | 	jmp	#LR__4418
2a930                 | LR__4414
2a930                 | ' 		for (;;) {
2a930                 | LR__4415
2a930     04 4E 05 F1 | 	add	fp, #4
2a934     A7 12 02 FB | 	rdlong	arg01, fp
2a938     04 4E 05 F1 | 	add	fp, #4
2a93c     A7 14 02 F6 | 	mov	arg02, fp
2a940     08 4E 85 F1 | 	sub	fp, #8
2a944     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2a948     0C 4E 05 F1 | 	add	fp, #12
2a94c     A7 FA 61 FC | 	wrlong	result1, fp
2a950     00 FA 4D F2 | 	cmps	result1, #0 wz
2a954     0C 4E 85 F1 | 	sub	fp, #12
2a958     F0 00 90 5D |  if_ne	jmp	#LR__4417
2a95c     04 4E 05 F1 | 	add	fp, #4
2a960     A7 12 02 FB | 	rdlong	arg01, fp
2a964     04 4E 85 F1 | 	sub	fp, #4
2a968     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2a96c     0C 4E 05 F1 | 	add	fp, #12
2a970     A7 FA 61 FC | 	wrlong	result1, fp
2a974     08 4E 85 F1 | 	sub	fp, #8
2a978     A7 1E 02 FB | 	rdlong	local01, fp
2a97c     2B 1E 06 F1 | 	add	local01, #43
2a980     0F 1F C2 FA | 	rdbyte	local01, local01
2a984     0C 4E 05 F1 | 	add	fp, #12
2a988     A7 1E 42 FC | 	wrbyte	local01, fp
2a98c     04 4E 85 F1 | 	sub	fp, #4
2a990     A7 1E 0A FB | 	rdlong	local01, fp wz
2a994     0C 4E 85 F1 | 	sub	fp, #12
2a998     34 00 90 AD |  if_e	jmp	#LR__4416
2a99c     0C 4E 05 F1 | 	add	fp, #12
2a9a0     A7 1E 02 FB | 	rdlong	local01, fp
2a9a4     0C 4E 85 F1 | 	sub	fp, #12
2a9a8     04 1E 0E F2 | 	cmp	local01, #4 wz
2a9ac     9C 00 90 5D |  if_ne	jmp	#LR__4417
2a9b0     10 4E 05 F1 | 	add	fp, #16
2a9b4     A7 1E C2 FA | 	rdbyte	local01, fp
2a9b8     10 4E 85 F1 | 	sub	fp, #16
2a9bc     04 1E CE F7 | 	test	local01, #4 wz
2a9c0     0C 4E 05 A1 |  if_e	add	fp, #12
2a9c4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2a9c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2a9cc                 | ' 					}
2a9cc                 | ' 				}
2a9cc                 | ' 				break;
2a9cc     7C 00 90 FD | 	jmp	#LR__4417
2a9d0                 | LR__4416
2a9d0     10 4E 05 F1 | 	add	fp, #16
2a9d4     A7 1E C2 FA | 	rdbyte	local01, fp
2a9d8     10 4E 85 F1 | 	sub	fp, #16
2a9dc     04 1E CE F7 | 	test	local01, #4 wz
2a9e0     68 00 90 5D |  if_ne	jmp	#LR__4417
2a9e4     04 4E 05 F1 | 	add	fp, #4
2a9e8     A7 1E 02 FB | 	rdlong	local01, fp
2a9ec     04 4E 85 F1 | 	sub	fp, #4
2a9f0     06 1E 06 F1 | 	add	local01, #6
2a9f4     0F 1F C2 FA | 	rdbyte	local01, local01
2a9f8     10 1E CE F7 | 	test	local01, #16 wz
2a9fc     0C 4E 05 A1 |  if_e	add	fp, #12
2aa00     A7 0A 68 AC |  if_e	wrlong	#5, fp
2aa04     0C 4E 85 A1 |  if_e	sub	fp, #12
2aa08                 | ' 				res = FR_NO_PATH; break;
2aa08     40 00 90 AD |  if_e	jmp	#LR__4417
2aa0c     04 4E 05 F1 | 	add	fp, #4
2aa10     A7 20 02 FB | 	rdlong	local02, fp
2aa14     10 1F 02 F6 | 	mov	local01, local02
2aa18     10 4E 05 F1 | 	add	fp, #16
2aa1c     A7 14 02 FB | 	rdlong	arg02, fp
2aa20     0A 13 02 F6 | 	mov	arg01, arg02
2aa24     34 14 06 F1 | 	add	arg02, #52
2aa28     14 4E 85 F1 | 	sub	fp, #20
2aa2c     10 20 06 F1 | 	add	local02, #16
2aa30     10 21 02 FB | 	rdlong	local02, local02
2aa34     FF 21 06 F5 | 	and	local02, #511
2aa38     10 15 02 F1 | 	add	arg02, local02
2aa3c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2aa40     08 1E 06 F1 | 	add	local01, #8
2aa44     0F FB 61 FC | 	wrlong	result1, local01
2aa48     E4 FE 9F FD | 	jmp	#LR__4415
2aa4c                 | LR__4417
2aa4c                 | LR__4418
2aa4c                 | ' 			}
2aa4c                 | ' #line 3090 "ff.c"
2aa4c                 | ' 			{
2aa4c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2aa4c                 | ' 			}
2aa4c                 | ' 		}
2aa4c                 | ' 	}
2aa4c                 | ' 
2aa4c                 | ' 	return res;
2aa4c     0C 4E 05 F1 | 	add	fp, #12
2aa50     A7 FA 01 FB | 	rdlong	result1, fp
2aa54     0C 4E 85 F1 | 	sub	fp, #12
2aa58     A7 F0 03 F6 | 	mov	ptra, fp
2aa5c     B2 00 A0 FD | 	call	#popregs_
2aa60                 | _fatfs_cc_follow_path_ret
2aa60     2D 00 64 FD | 	ret
2aa64                 | 
2aa64                 | _fatfs_cc_get_ldnumber
2aa64     01 00 66 F6 | 	neg	_var01, #1
2aa68     09 03 0A FB | 	rdlong	_var02, arg01 wz
2aa6c     01 05 02 F6 | 	mov	_var03, _var02
2aa70     01 FA 65 A6 |  if_e	neg	result1, #1
2aa74     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2aa78     97 10 48 FB | 	callpa	#(@LR__4421-@LR__4420)>>2,fcache_load_ptr_
2aa7c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2aa7c                 | LR__4420
2aa7c     02 07 C2 FA | 	rdbyte	_var04, _var03
2aa80     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2aa84     20 FA 15 F2 | 	cmp	result1, #32 wc
2aa88     01 04 06 F1 | 	add	_var03, #1
2aa8c     03 09 02 36 |  if_ae	mov	_var05, _var04
2aa90     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2aa94     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2aa98     E0 FF 9F 1D |  if_a	jmp	#LR__4420
2aa9c                 | LR__4421
2aa9c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2aaa0     3A 06 0E F2 | 	cmp	_var04, #58 wz
2aaa4     40 00 90 5D |  if_ne	jmp	#LR__4423
2aaa8     01 0A 06 F6 | 	mov	_var06, #1
2aaac     01 09 C2 FA | 	rdbyte	_var05, _var02
2aab0     30 08 16 F2 | 	cmp	_var05, #48 wc
2aab4     1C 00 90 CD |  if_b	jmp	#LR__4422
2aab8     01 09 C2 FA | 	rdbyte	_var05, _var02
2aabc     3A 08 16 F2 | 	cmp	_var05, #58 wc
2aac0     01 0D 02 C6 |  if_b	mov	_var07, _var02
2aac4     02 0C 06 C1 |  if_b	add	_var07, #2
2aac8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2aacc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2aad0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2aad4                 | LR__4422
2aad4     01 0A 56 F2 | 	cmps	_var06, #1 wc
2aad8     05 01 02 C6 |  if_b	mov	_var01, _var06
2aadc     09 05 62 CC |  if_b	wrlong	_var03, arg01
2aae0                 | ' 			vol = i;
2aae0                 | ' 			*path = tt;
2aae0                 | ' 		}
2aae0                 | ' 		return vol;
2aae0     00 FB 01 F6 | 	mov	result1, _var01
2aae4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2aae8                 | LR__4423
2aae8                 | ' 	}
2aae8                 | ' #line 3170 "ff.c"
2aae8                 | ' 	vol = 0;
2aae8                 | ' 
2aae8                 | ' 	return vol;
2aae8     00 FA 05 F6 | 	mov	result1, #0
2aaec                 | _fatfs_cc_get_ldnumber_ret
2aaec     2D 00 64 FD | 	ret
2aaf0                 | 
2aaf0                 | _fatfs_cc_check_fs
2aaf0     04 4A 05 F6 | 	mov	COUNT_, #4
2aaf4     A8 00 A0 FD | 	call	#pushregs_
2aaf8     09 1F 02 F6 | 	mov	local01, arg01
2aafc     03 1E 06 F1 | 	add	local01, #3
2ab00     0F 01 48 FC | 	wrbyte	#0, local01
2ab04     2D 1E 06 F1 | 	add	local01, #45
2ab08     FF FF FF FF 
2ab0c     0F FF 6B FC | 	wrlong	##-1, local01
2ab10     30 1E 86 F1 | 	sub	local01, #48
2ab14     0F 13 02 F6 | 	mov	arg01, local01
2ab18     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ab1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab20     04 FA 05 56 |  if_ne	mov	result1, #4
2ab24     94 01 90 5D |  if_ne	jmp	#LR__4434
2ab28     34 1E 06 F1 | 	add	local01, #52
2ab2c     0F 13 02 F6 | 	mov	arg01, local01
2ab30     FE 13 06 F1 | 	add	arg01, #510
2ab34                 | ' {
2ab34                 | ' 
2ab34                 | ' 	return *((WORD*)ptr);
2ab34     09 21 E2 FA | 	rdword	local02, arg01
2ab38     0F 23 C2 FA | 	rdbyte	local03, local01
2ab3c     34 1E 86 F1 | 	sub	local01, #52
2ab40     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ab44     EB 24 0E F2 | 	cmp	local04, #235 wz
2ab48     11 17 02 56 |  if_ne	mov	arg03, local03
2ab4c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ab50     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ab54     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ab58     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ab5c     44 01 90 5D |  if_ne	jmp	#LR__4433
2ab60     10 25 32 F9 | 	getword	local04, local02, #0
2ab64     55 00 00 FF 
2ab68     55 24 0E F2 | 	cmp	local04, ##43605 wz
2ab6c     2C 00 90 5D |  if_ne	jmp	#LR__4430
2ab70     34 1E 06 F1 | 	add	local01, #52
2ab74     0F 13 02 F6 | 	mov	arg01, local01
2ab78     34 1E 86 F1 | 	sub	local01, #52
2ab7c     52 12 06 F1 | 	add	arg01, #82
2ab80     7F 01 00 FF 
2ab84     D0 15 06 F6 | 	mov	arg02, ##@LR__5024
2ab88     08 16 06 F6 | 	mov	arg03, #8
2ab8c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2ab90     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab94                 | ' 			return 0;
2ab94     00 FA 05 A6 |  if_e	mov	result1, #0
2ab98     20 01 90 AD |  if_e	jmp	#LR__4434
2ab9c                 | LR__4430
2ab9c     34 1E 06 F1 | 	add	local01, #52
2aba0     0F 13 02 F6 | 	mov	arg01, local01
2aba4     0B 12 06 F1 | 	add	arg01, #11
2aba8                 | ' {
2aba8                 | ' 
2aba8                 | ' 	return *((WORD*)ptr);
2aba8     09 FB E1 FA | 	rdword	result1, arg01
2abac     0D 1E 06 F1 | 	add	local01, #13
2abb0     0F 23 C2 FA | 	rdbyte	local03, local01
2abb4     41 1E 86 F1 | 	sub	local01, #65
2abb8     FD 24 32 F9 | 	getword	local04, result1, #0
2abbc     FD 14 32 F9 | 	getword	arg02, result1, #0
2abc0     01 14 86 F1 | 	sub	arg02, #1
2abc4     0A 25 CA F7 | 	test	local04, arg02 wz
2abc8     D8 00 90 5D |  if_ne	jmp	#LR__4432
2abcc     FD 14 32 F9 | 	getword	arg02, result1, #0
2abd0     01 00 00 FF 
2abd4     00 14 16 F2 | 	cmp	arg02, ##512 wc
2abd8     C8 00 90 CD |  if_b	jmp	#LR__4432
2abdc     FD 14 32 F9 | 	getword	arg02, result1, #0
2abe0     01 00 00 FF 
2abe4     01 14 16 F2 | 	cmp	arg02, ##513 wc
2abe8     B8 00 90 3D |  if_ae	jmp	#LR__4432
2abec     11 13 02 F6 | 	mov	arg01, local03
2abf0     07 12 4E F7 | 	zerox	arg01, #7 wz
2abf4     AC 00 90 AD |  if_e	jmp	#LR__4432
2abf8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2abfc     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ac00     01 22 86 F1 | 	sub	local03, #1
2ac04     11 13 CA F7 | 	test	arg01, local03 wz
2ac08     98 00 90 5D |  if_ne	jmp	#LR__4432
2ac0c     34 1E 06 F1 | 	add	local01, #52
2ac10     0F 13 02 F6 | 	mov	arg01, local01
2ac14     34 1E 86 F1 | 	sub	local01, #52
2ac18     0E 12 06 F1 | 	add	arg01, #14
2ac1c                 | ' {
2ac1c                 | ' 
2ac1c                 | ' 	return *((WORD*)ptr);
2ac1c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ac20     80 00 90 AD |  if_e	jmp	#LR__4432
2ac24     44 1E 06 F1 | 	add	local01, #68
2ac28     0F 13 C2 FA | 	rdbyte	arg01, local01
2ac2c     44 1E 86 F1 | 	sub	local01, #68
2ac30     01 12 86 F1 | 	sub	arg01, #1
2ac34     02 12 16 F2 | 	cmp	arg01, #2 wc
2ac38     68 00 90 3D |  if_ae	jmp	#LR__4432
2ac3c     34 1E 06 F1 | 	add	local01, #52
2ac40     0F 13 02 F6 | 	mov	arg01, local01
2ac44     34 1E 86 F1 | 	sub	local01, #52
2ac48     11 12 06 F1 | 	add	arg01, #17
2ac4c                 | ' {
2ac4c                 | ' 
2ac4c                 | ' 	return *((WORD*)ptr);
2ac4c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ac50     50 00 90 AD |  if_e	jmp	#LR__4432
2ac54     34 1E 06 F1 | 	add	local01, #52
2ac58     0F 13 02 F6 | 	mov	arg01, local01
2ac5c     34 1E 86 F1 | 	sub	local01, #52
2ac60     13 12 06 F1 | 	add	arg01, #19
2ac64                 | ' {
2ac64                 | ' 
2ac64                 | ' 	return *((WORD*)ptr);
2ac64     09 FB E1 FA | 	rdword	result1, arg01
2ac68     FD 22 32 F9 | 	getword	local03, result1, #0
2ac6c     80 22 16 F2 | 	cmp	local03, #128 wc
2ac70     20 00 90 3D |  if_ae	jmp	#LR__4431
2ac74     34 1E 06 F1 | 	add	local01, #52
2ac78     0F 13 02 F6 | 	mov	arg01, local01
2ac7c     34 1E 86 F1 | 	sub	local01, #52
2ac80     20 12 06 F1 | 	add	arg01, #32
2ac84                 | ' {
2ac84                 | ' 
2ac84                 | ' 	return *((DWORD*)ptr);
2ac84     09 FB 01 FB | 	rdlong	result1, arg01
2ac88     80 00 00 FF 
2ac8c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2ac90     10 00 90 CD |  if_b	jmp	#LR__4432
2ac94                 | LR__4431
2ac94     4A 1E 06 F1 | 	add	local01, #74
2ac98                 | ' {
2ac98                 | ' 
2ac98                 | ' 	return *((WORD*)ptr);
2ac98     0F FB E9 FA | 	rdword	result1, local01 wz
2ac9c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ac9c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ac9c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ac9c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ac9c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ac9c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ac9c                 | ' 				return 0;
2ac9c     00 FA 05 56 |  if_ne	mov	result1, #0
2aca0     18 00 90 5D |  if_ne	jmp	#LR__4434
2aca4                 | LR__4432
2aca4                 | LR__4433
2aca4                 | ' 		}
2aca4                 | ' 	}
2aca4                 | ' 	return sign == 0xAA55 ? 2 : 3;
2aca4     10 23 32 F9 | 	getword	local03, local02, #0
2aca8     55 00 00 FF 
2acac     55 22 0E F2 | 	cmp	local03, ##43605 wz
2acb0     02 24 06 A6 |  if_e	mov	local04, #2
2acb4     03 24 06 56 |  if_ne	mov	local04, #3
2acb8     12 FB 01 F6 | 	mov	result1, local04
2acbc                 | LR__4434
2acbc     A7 F0 03 F6 | 	mov	ptra, fp
2acc0     B2 00 A0 FD | 	call	#popregs_
2acc4                 | _fatfs_cc_check_fs_ret
2acc4     2D 00 64 FD | 	ret
2acc8                 | 
2acc8                 | _fatfs_cc_find_volume
2acc8     05 4A 05 F6 | 	mov	COUNT_, #5
2accc     A8 00 A0 FD | 	call	#pushregs_
2acd0     24 F0 07 F1 | 	add	ptra, #36
2acd4     09 1F 02 F6 | 	mov	local01, arg01
2acd8     0A 21 02 F6 | 	mov	local02, arg02
2acdc     0F 13 02 F6 | 	mov	arg01, local01
2ace0     00 14 06 F6 | 	mov	arg02, #0
2ace4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2ace8     02 FA 0D F2 | 	cmp	result1, #2 wz
2acec     0C 00 90 AD |  if_e	jmp	#LR__4440
2acf0     03 FA 15 F2 | 	cmp	result1, #3 wc
2acf4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2acf8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4448
2acfc                 | LR__4440
2acfc                 | ' 	for (i = 0; i < 4; i++) {
2acfc     00 22 06 F6 | 	mov	local03, #0
2ad00     97 26 48 FB | 	callpa	#(@LR__4442-@LR__4441)>>2,fcache_load_ptr_
2ad04                 | LR__4441
2ad04     04 22 16 F2 | 	cmp	local03, #4 wc
2ad08     44 00 90 3D |  if_ae	jmp	#LR__4443
2ad0c     11 25 02 F6 | 	mov	local04, local03
2ad10     02 24 66 F0 | 	shl	local04, #2
2ad14     14 4E 05 F1 | 	add	fp, #20
2ad18     A7 24 02 F1 | 	add	local04, fp
2ad1c     34 1E 06 F1 | 	add	local01, #52
2ad20     0F 13 02 F6 | 	mov	arg01, local01
2ad24     34 1E 86 F1 | 	sub	local01, #52
2ad28     BE 13 06 F1 | 	add	arg01, #446
2ad2c     11 15 02 F6 | 	mov	arg02, local03
2ad30     04 14 66 F0 | 	shl	arg02, #4
2ad34     0A 13 02 F1 | 	add	arg01, arg02
2ad38     08 12 06 F1 | 	add	arg01, #8
2ad3c                 | ' {
2ad3c                 | ' 
2ad3c                 | ' 	return *((DWORD*)ptr);
2ad3c     09 FB 01 FB | 	rdlong	result1, arg01
2ad40     14 4E 85 F1 | 	sub	fp, #20
2ad44     12 FB 61 FC | 	wrlong	result1, local04
2ad48     01 22 06 F1 | 	add	local03, #1
2ad4c     B4 FF 9F FD | 	jmp	#LR__4441
2ad50                 | LR__4442
2ad50                 | LR__4443
2ad50     00 20 0E F2 | 	cmp	local02, #0 wz
2ad54     10 25 02 56 |  if_ne	mov	local04, local02
2ad58     01 24 86 51 |  if_ne	sub	local04, #1
2ad5c     00 24 06 A6 |  if_e	mov	local04, #0
2ad60     12 23 02 F6 | 	mov	local03, local04
2ad64                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2ad64                 | ' 	}
2ad64                 | ' 	i = part ? part - 1 : 0;
2ad64                 | ' 	do {
2ad64                 | LR__4444
2ad64     11 25 02 F6 | 	mov	local04, local03
2ad68     02 24 66 F0 | 	shl	local04, #2
2ad6c     14 4E 05 F1 | 	add	fp, #20
2ad70     A7 24 02 F1 | 	add	local04, fp
2ad74     12 25 0A FB | 	rdlong	local04, local04 wz
2ad78     14 4E 85 F1 | 	sub	fp, #20
2ad7c     28 00 90 AD |  if_e	jmp	#LR__4445
2ad80     11 25 02 F6 | 	mov	local04, local03
2ad84     02 24 66 F0 | 	shl	local04, #2
2ad88     14 4E 05 F1 | 	add	fp, #20
2ad8c     A7 24 02 F1 | 	add	local04, fp
2ad90     12 15 02 FB | 	rdlong	arg02, local04
2ad94     0F 13 02 F6 | 	mov	arg01, local01
2ad98     14 4E 85 F1 | 	sub	fp, #20
2ad9c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2ada0     FD 24 02 F6 | 	mov	local04, result1
2ada4     04 00 90 FD | 	jmp	#LR__4446
2ada8                 | LR__4445
2ada8     03 24 06 F6 | 	mov	local04, #3
2adac                 | LR__4446
2adac     12 27 02 F6 | 	mov	local05, local04
2adb0     00 20 0E F2 | 	cmp	local02, #0 wz
2adb4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2adb8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4447
2adbc     01 22 06 A1 |  if_e	add	local03, #1
2adc0     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2adc4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4444
2adc8                 | LR__4447
2adc8                 | ' 	return fmt;
2adc8     13 FB 01 F6 | 	mov	result1, local05
2adcc                 | LR__4448
2adcc     A7 F0 03 F6 | 	mov	ptra, fp
2add0     B2 00 A0 FD | 	call	#popregs_
2add4                 | _fatfs_cc_find_volume_ret
2add4     2D 00 64 FD | 	ret
2add8                 | 
2add8                 | _fatfs_cc_mount_volume
2add8     0B 4A 05 F6 | 	mov	COUNT_, #11
2addc     A8 00 A0 FD | 	call	#pushregs_
2ade0     0A 1F 02 F6 | 	mov	local01, arg02
2ade4     0B 21 02 F6 | 	mov	local02, arg03
2ade8     0F 01 68 FC | 	wrlong	#0, local01
2adec     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2adf0     FD 22 02 F6 | 	mov	local03, result1
2adf4     00 22 56 F2 | 	cmps	local03, #0 wc
2adf8     0B FA 05 C6 |  if_b	mov	result1, #11
2adfc     3C 05 90 CD |  if_b	jmp	#LR__4460
2ae00     11 17 02 F6 | 	mov	arg03, local03
2ae04     02 16 66 F0 | 	shl	arg03, #2
2ae08     F2 16 02 F1 | 	add	arg03, objptr
2ae0c     0B 25 0A FB | 	rdlong	local04, arg03 wz
2ae10     0C FA 05 A6 |  if_e	mov	result1, #12
2ae14     24 05 90 AD |  if_e	jmp	#LR__4460
2ae18     0F 25 62 FC | 	wrlong	local04, local01
2ae1c     10 21 E2 F8 | 	getbyte	local02, local02, #0
2ae20     FE 20 06 F5 | 	and	local02, #254
2ae24     12 17 CA FA | 	rdbyte	arg03, local04 wz
2ae28     4C 00 90 AD |  if_e	jmp	#LR__4451
2ae2c     01 24 06 F1 | 	add	local04, #1
2ae30     12 13 CA FA | 	rdbyte	arg01, local04 wz
2ae34     01 24 86 F1 | 	sub	local04, #1
2ae38     01 FA 05 56 |  if_ne	mov	result1, #1
2ae3c                 | ' 
2ae3c                 | ' 	return Stat;
2ae3c     01 00 00 AF 
2ae40     20 E4 05 A1 |  if_e	add	objptr, ##544
2ae44     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ae48     01 00 00 AF 
2ae4c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ae50     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2ae54     01 16 CE F7 | 	test	arg03, #1 wz
2ae58     1C 00 90 5D |  if_ne	jmp	#LR__4450
2ae5c     00 20 0E F2 | 	cmp	local02, #0 wz
2ae60     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2ae64     04 FA CD 57 |  if_ne	test	result1, #4 wz
2ae68                 | ' 				return FR_WRITE_PROTECTED;
2ae68     0A FA 05 56 |  if_ne	mov	result1, #10
2ae6c     CC 04 90 5D |  if_ne	jmp	#LR__4460
2ae70                 | ' 			}
2ae70                 | ' 			return FR_OK;
2ae70     00 FA 05 F6 | 	mov	result1, #0
2ae74     C4 04 90 FD | 	jmp	#LR__4460
2ae78                 | LR__4450
2ae78                 | LR__4451
2ae78     12 01 48 FC | 	wrbyte	#0, local04
2ae7c     01 24 06 F1 | 	add	local04, #1
2ae80     12 23 42 FC | 	wrbyte	local03, local04
2ae84     12 13 C2 FA | 	rdbyte	arg01, local04
2ae88     01 24 86 F1 | 	sub	local04, #1
2ae8c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2ae90     FD 16 02 F6 | 	mov	arg03, result1
2ae94     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2ae98     01 26 CE F7 | 	test	local05, #1 wz
2ae9c                 | ' 		return FR_NOT_READY;
2ae9c     03 FA 05 56 |  if_ne	mov	result1, #3
2aea0     98 04 90 5D |  if_ne	jmp	#LR__4460
2aea4     00 20 0E F2 | 	cmp	local02, #0 wz
2aea8     0B 27 02 56 |  if_ne	mov	local05, arg03
2aeac     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2aeb0     04 26 CE 57 |  if_ne	test	local05, #4 wz
2aeb4                 | ' 		return FR_WRITE_PROTECTED;
2aeb4     0A FA 05 56 |  if_ne	mov	result1, #10
2aeb8     80 04 90 5D |  if_ne	jmp	#LR__4460
2aebc     12 13 02 F6 | 	mov	arg01, local04
2aec0     00 14 06 F6 | 	mov	arg02, #0
2aec4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2aec8     FD 12 02 F6 | 	mov	arg01, result1
2aecc     04 12 0E F2 | 	cmp	arg01, #4 wz
2aed0     01 FA 05 A6 |  if_e	mov	result1, #1
2aed4     64 04 90 AD |  if_e	jmp	#LR__4460
2aed8     02 12 16 F2 | 	cmp	arg01, #2 wc
2aedc     0D FA 05 36 |  if_ae	mov	result1, #13
2aee0     58 04 90 3D |  if_ae	jmp	#LR__4460
2aee4     30 24 06 F1 | 	add	local04, #48
2aee8     12 29 02 FB | 	rdlong	local06, local04
2aeec     04 24 06 F1 | 	add	local04, #4
2aef0     12 13 02 F6 | 	mov	arg01, local04
2aef4     34 24 86 F1 | 	sub	local04, #52
2aef8     0B 12 06 F1 | 	add	arg01, #11
2aefc                 | ' {
2aefc                 | ' 
2aefc                 | ' 	return *((WORD*)ptr);
2aefc     09 FB E1 FA | 	rdword	result1, arg01
2af00     01 00 00 FF 
2af04     00 FA 0D F2 | 	cmp	result1, ##512 wz
2af08     0D FA 05 56 |  if_ne	mov	result1, #13
2af0c     2C 04 90 5D |  if_ne	jmp	#LR__4460
2af10     34 24 06 F1 | 	add	local04, #52
2af14     12 13 02 F6 | 	mov	arg01, local04
2af18     34 24 86 F1 | 	sub	local04, #52
2af1c     16 12 06 F1 | 	add	arg01, #22
2af20                 | ' {
2af20                 | ' 
2af20                 | ' 	return *((WORD*)ptr);
2af20     09 FB E1 FA | 	rdword	result1, arg01
2af24     FD 2A 0A F6 | 	mov	local07, result1 wz
2af28     18 00 90 5D |  if_ne	jmp	#LR__4452
2af2c     34 24 06 F1 | 	add	local04, #52
2af30     12 13 02 F6 | 	mov	arg01, local04
2af34     34 24 86 F1 | 	sub	local04, #52
2af38     24 12 06 F1 | 	add	arg01, #36
2af3c                 | ' {
2af3c                 | ' 
2af3c                 | ' 	return *((DWORD*)ptr);
2af3c     09 FB 01 FB | 	rdlong	result1, arg01
2af40     FD 2A 02 F6 | 	mov	local07, result1
2af44                 | LR__4452
2af44     1C 24 06 F1 | 	add	local04, #28
2af48     12 2B 62 FC | 	wrlong	local07, local04
2af4c     28 24 06 F1 | 	add	local04, #40
2af50     12 27 C2 FA | 	rdbyte	local05, local04
2af54     42 24 86 F1 | 	sub	local04, #66
2af58     12 27 42 FC | 	wrbyte	local05, local04
2af5c     12 27 C2 FA | 	rdbyte	local05, local04
2af60     02 24 86 F1 | 	sub	local04, #2
2af64     01 26 0E F2 | 	cmp	local05, #1 wz
2af68     02 24 06 51 |  if_ne	add	local04, #2
2af6c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2af70     02 24 86 51 |  if_ne	sub	local04, #2
2af74     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2af78     0D FA 05 56 |  if_ne	mov	result1, #13
2af7c     BC 03 90 5D |  if_ne	jmp	#LR__4460
2af80     02 24 06 F1 | 	add	local04, #2
2af84     12 27 C2 FA | 	rdbyte	local05, local04
2af88     13 2B 02 FD | 	qmul	local07, local05
2af8c     3F 24 06 F1 | 	add	local04, #63
2af90     12 27 C2 FA | 	rdbyte	local05, local04
2af94     37 24 86 F1 | 	sub	local04, #55
2af98     12 27 52 FC | 	wrword	local05, local04
2af9c     12 27 EA FA | 	rdword	local05, local04 wz
2afa0     0A 24 86 F1 | 	sub	local04, #10
2afa4     18 2A 62 FD | 	getqx	local07
2afa8     20 00 90 AD |  if_e	jmp	#LR__4453
2afac     0A 24 06 F1 | 	add	local04, #10
2afb0     12 27 E2 FA | 	rdword	local05, local04
2afb4     13 23 32 F9 | 	getword	local03, local05, #0
2afb8     0A 24 86 F1 | 	sub	local04, #10
2afbc     13 27 32 F9 | 	getword	local05, local05, #0
2afc0     01 26 86 F1 | 	sub	local05, #1
2afc4     13 23 CA F7 | 	test	local03, local05 wz
2afc8     08 00 90 AD |  if_e	jmp	#LR__4454
2afcc                 | LR__4453
2afcc     0D FA 05 F6 | 	mov	result1, #13
2afd0     68 03 90 FD | 	jmp	#LR__4460
2afd4                 | LR__4454
2afd4     34 24 06 F1 | 	add	local04, #52
2afd8     12 13 02 F6 | 	mov	arg01, local04
2afdc     11 12 06 F1 | 	add	arg01, #17
2afe0                 | ' {
2afe0                 | ' 
2afe0                 | ' 	return *((WORD*)ptr);
2afe0     09 FB E1 FA | 	rdword	result1, arg01
2afe4     2C 24 86 F1 | 	sub	local04, #44
2afe8     12 FB 51 FC | 	wrword	result1, local04
2afec     12 27 E2 FA | 	rdword	local05, local04
2aff0     08 24 86 F1 | 	sub	local04, #8
2aff4     13 13 52 F6 | 	abs	arg01, local05 wc
2aff8     09 13 42 F8 | 	getnib	arg01, arg01, #0
2affc     09 13 8A F6 | 	negc	arg01, arg01 wz
2b000     0D FA 05 56 |  if_ne	mov	result1, #13
2b004     34 03 90 5D |  if_ne	jmp	#LR__4460
2b008     34 24 06 F1 | 	add	local04, #52
2b00c     12 13 02 F6 | 	mov	arg01, local04
2b010     34 24 86 F1 | 	sub	local04, #52
2b014     13 12 06 F1 | 	add	arg01, #19
2b018                 | ' {
2b018                 | ' 
2b018                 | ' 	return *((WORD*)ptr);
2b018     09 FB E1 FA | 	rdword	result1, arg01
2b01c     FD 2C 0A F6 | 	mov	local08, result1 wz
2b020     34 24 06 A1 |  if_e	add	local04, #52
2b024     12 13 02 A6 |  if_e	mov	arg01, local04
2b028     34 24 86 A1 |  if_e	sub	local04, #52
2b02c     20 12 06 A1 |  if_e	add	arg01, #32
2b030                 | ' {
2b030                 | ' 
2b030                 | ' 	return *((DWORD*)ptr);
2b030     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b034     34 24 06 F1 | 	add	local04, #52
2b038     12 13 02 F6 | 	mov	arg01, local04
2b03c     34 24 86 F1 | 	sub	local04, #52
2b040     0E 12 06 F1 | 	add	arg01, #14
2b044                 | ' {
2b044                 | ' 
2b044                 | ' 	return *((WORD*)ptr);
2b044     09 FB E1 FA | 	rdword	result1, arg01
2b048     FD 12 02 F6 | 	mov	arg01, result1
2b04c     09 27 02 F6 | 	mov	local05, arg01
2b050     0F 26 4E F7 | 	zerox	local05, #15 wz
2b054     0D FA 05 A6 |  if_e	mov	result1, #13
2b058     E0 02 90 AD |  if_e	jmp	#LR__4460
2b05c     09 2F 32 F9 | 	getword	local09, arg01, #0
2b060     15 2F 02 F1 | 	add	local09, local07
2b064     08 24 06 F1 | 	add	local04, #8
2b068     12 27 E2 FA | 	rdword	local05, local04
2b06c     08 24 86 F1 | 	sub	local04, #8
2b070     13 27 52 F6 | 	abs	local05, local05 wc
2b074     04 26 46 F0 | 	shr	local05, #4
2b078     13 2F 82 F3 | 	sumc	local09, local05
2b07c     17 2D 12 F2 | 	cmp	local08, local09 wc
2b080     0D FA 05 C6 |  if_b	mov	result1, #13
2b084     B4 02 90 CD |  if_b	jmp	#LR__4460
2b088     17 2D 82 F1 | 	sub	local08, local09
2b08c     0A 24 06 F1 | 	add	local04, #10
2b090     12 27 E2 FA | 	rdword	local05, local04
2b094     13 2D 12 FD | 	qdiv	local08, local05
2b098     0A 24 86 F1 | 	sub	local04, #10
2b09c     18 26 62 FD | 	getqx	local05
2b0a0     00 26 0E F2 | 	cmp	local05, #0 wz
2b0a4     0D FA 05 A6 |  if_e	mov	result1, #13
2b0a8     90 02 90 AD |  if_e	jmp	#LR__4460
2b0ac     00 30 06 F6 | 	mov	local10, #0
2b0b0     FF FF 07 FF 
2b0b4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b0b8     03 30 06 C6 |  if_b	mov	local10, #3
2b0bc     7F 00 00 FF 
2b0c0     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b0c4     02 30 06 C6 |  if_b	mov	local10, #2
2b0c8     07 00 00 FF 
2b0cc     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b0d0     01 30 06 C6 |  if_b	mov	local10, #1
2b0d4     00 30 0E F2 | 	cmp	local10, #0 wz
2b0d8     0D FA 05 A6 |  if_e	mov	result1, #13
2b0dc     5C 02 90 AD |  if_e	jmp	#LR__4460
2b0e0     02 26 06 F1 | 	add	local05, #2
2b0e4     18 24 06 F1 | 	add	local04, #24
2b0e8     12 27 62 FC | 	wrlong	local05, local04
2b0ec     08 24 06 F1 | 	add	local04, #8
2b0f0     12 29 62 FC | 	wrlong	local06, local04
2b0f4     14 27 02 F6 | 	mov	local05, local06
2b0f8     09 13 32 F9 | 	getword	arg01, arg01, #0
2b0fc     09 27 02 F1 | 	add	local05, arg01
2b100     04 24 06 F1 | 	add	local04, #4
2b104     12 27 62 FC | 	wrlong	local05, local04
2b108     14 27 02 F6 | 	mov	local05, local06
2b10c     17 27 02 F1 | 	add	local05, local09
2b110     08 24 06 F1 | 	add	local04, #8
2b114     12 27 62 FC | 	wrlong	local05, local04
2b118     2C 24 86 F1 | 	sub	local04, #44
2b11c     03 30 0E F2 | 	cmp	local10, #3 wz
2b120     5C 00 90 5D |  if_ne	jmp	#LR__4455
2b124     34 24 06 F1 | 	add	local04, #52
2b128     12 13 02 F6 | 	mov	arg01, local04
2b12c     34 24 86 F1 | 	sub	local04, #52
2b130     2A 12 06 F1 | 	add	arg01, #42
2b134                 | ' {
2b134                 | ' 
2b134                 | ' 	return *((WORD*)ptr);
2b134     09 FB E9 FA | 	rdword	result1, arg01 wz
2b138     0D FA 05 56 |  if_ne	mov	result1, #13
2b13c     FC 01 90 5D |  if_ne	jmp	#LR__4460
2b140     08 24 06 F1 | 	add	local04, #8
2b144     12 27 EA FA | 	rdword	local05, local04 wz
2b148     08 24 86 F1 | 	sub	local04, #8
2b14c     0D FA 05 56 |  if_ne	mov	result1, #13
2b150     E8 01 90 5D |  if_ne	jmp	#LR__4460
2b154     34 24 06 F1 | 	add	local04, #52
2b158     12 13 02 F6 | 	mov	arg01, local04
2b15c     2C 12 06 F1 | 	add	arg01, #44
2b160                 | ' {
2b160                 | ' 
2b160                 | ' 	return *((DWORD*)ptr);
2b160     09 FB 01 FB | 	rdlong	result1, arg01
2b164     0C 24 86 F1 | 	sub	local04, #12
2b168     12 FB 61 FC | 	wrlong	result1, local04
2b16c     10 24 86 F1 | 	sub	local04, #16
2b170     12 33 02 FB | 	rdlong	local11, local04
2b174     18 24 86 F1 | 	sub	local04, #24
2b178     02 32 66 F0 | 	shl	local11, #2
2b17c     6C 00 90 FD | 	jmp	#LR__4457
2b180                 | LR__4455
2b180     08 24 06 F1 | 	add	local04, #8
2b184     12 27 EA FA | 	rdword	local05, local04 wz
2b188     08 24 86 F1 | 	sub	local04, #8
2b18c     0D FA 05 A6 |  if_e	mov	result1, #13
2b190     A8 01 90 AD |  if_e	jmp	#LR__4460
2b194     24 24 06 F1 | 	add	local04, #36
2b198     12 27 02 FB | 	rdlong	local05, local04
2b19c     15 27 02 F1 | 	add	local05, local07
2b1a0     04 24 06 F1 | 	add	local04, #4
2b1a4     12 27 62 FC | 	wrlong	local05, local04
2b1a8     28 24 86 F1 | 	sub	local04, #40
2b1ac     02 30 0E F2 | 	cmp	local10, #2 wz
2b1b0     18 24 06 A1 |  if_e	add	local04, #24
2b1b4     12 27 02 AB |  if_e	rdlong	local05, local04
2b1b8     18 24 86 A1 |  if_e	sub	local04, #24
2b1bc     01 26 66 A0 |  if_e	shl	local05, #1
2b1c0     24 00 90 AD |  if_e	jmp	#LR__4456
2b1c4     18 24 06 F1 | 	add	local04, #24
2b1c8     12 33 02 FB | 	rdlong	local11, local04
2b1cc     19 27 02 F6 | 	mov	local05, local11
2b1d0     01 26 66 F0 | 	shl	local05, #1
2b1d4     19 27 02 F1 | 	add	local05, local11
2b1d8     01 26 46 F0 | 	shr	local05, #1
2b1dc     18 24 86 F1 | 	sub	local04, #24
2b1e0     01 32 06 F5 | 	and	local11, #1
2b1e4     19 27 02 F1 | 	add	local05, local11
2b1e8                 | LR__4456
2b1e8     13 33 02 F6 | 	mov	local11, local05
2b1ec                 | LR__4457
2b1ec     FF 33 06 F1 | 	add	local11, #511
2b1f0     09 32 46 F0 | 	shr	local11, #9
2b1f4     1C 24 06 F1 | 	add	local04, #28
2b1f8     12 17 02 FB | 	rdlong	arg03, local04
2b1fc     1C 24 86 F1 | 	sub	local04, #28
2b200     19 17 12 F2 | 	cmp	arg03, local11 wc
2b204     0D FA 05 C6 |  if_b	mov	result1, #13
2b208     30 01 90 CD |  if_b	jmp	#LR__4460
2b20c     14 24 06 F1 | 	add	local04, #20
2b210     FF FF FF FF 
2b214     12 FF 6B FC | 	wrlong	##-1, local04
2b218     04 24 86 F1 | 	sub	local04, #4
2b21c     FF FF FF FF 
2b220     12 FF 6B FC | 	wrlong	##-1, local04
2b224     0C 24 86 F1 | 	sub	local04, #12
2b228     12 01 49 FC | 	wrbyte	#128, local04
2b22c     04 24 86 F1 | 	sub	local04, #4
2b230     03 30 0E F2 | 	cmp	local10, #3 wz
2b234     D0 00 90 5D |  if_ne	jmp	#LR__4459
2b238     34 24 06 F1 | 	add	local04, #52
2b23c     12 13 02 F6 | 	mov	arg01, local04
2b240     34 24 86 F1 | 	sub	local04, #52
2b244     30 12 06 F1 | 	add	arg01, #48
2b248                 | ' {
2b248                 | ' 
2b248                 | ' 	return *((WORD*)ptr);
2b248     09 FB E1 FA | 	rdword	result1, arg01
2b24c     FD 26 32 F9 | 	getword	local05, result1, #0
2b250     01 26 0E F2 | 	cmp	local05, #1 wz
2b254     B0 00 90 5D |  if_ne	jmp	#LR__4459
2b258     01 28 06 F1 | 	add	local06, #1
2b25c     12 13 02 F6 | 	mov	arg01, local04
2b260     14 15 02 F6 | 	mov	arg02, local06
2b264     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b268     00 FA 0D F2 | 	cmp	result1, #0 wz
2b26c     98 00 90 5D |  if_ne	jmp	#LR__4459
2b270     04 24 06 F1 | 	add	local04, #4
2b274     12 01 48 FC | 	wrbyte	#0, local04
2b278     30 24 06 F1 | 	add	local04, #48
2b27c     12 13 02 F6 | 	mov	arg01, local04
2b280     34 24 86 F1 | 	sub	local04, #52
2b284     FE 13 06 F1 | 	add	arg01, #510
2b288                 | ' {
2b288                 | ' 
2b288                 | ' 	return *((WORD*)ptr);
2b288     09 FB E1 FA | 	rdword	result1, arg01
2b28c     FD 26 32 F9 | 	getword	local05, result1, #0
2b290     55 00 00 FF 
2b294     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b298     34 24 06 A1 |  if_e	add	local04, #52
2b29c     12 13 02 A6 |  if_e	mov	arg01, local04
2b2a0     34 24 86 A1 |  if_e	sub	local04, #52
2b2a4                 | ' {
2b2a4                 | ' 
2b2a4                 | ' 	return *((DWORD*)ptr);
2b2a4     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b2a8     A9 B0 20 AF 
2b2ac     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b2b0     54 00 90 5D |  if_ne	jmp	#LR__4458
2b2b4     34 24 06 F1 | 	add	local04, #52
2b2b8     12 13 02 F6 | 	mov	arg01, local04
2b2bc     34 24 86 F1 | 	sub	local04, #52
2b2c0     E4 13 06 F1 | 	add	arg01, #484
2b2c4                 | ' {
2b2c4                 | ' 
2b2c4                 | ' 	return *((DWORD*)ptr);
2b2c4     09 FB 01 FB | 	rdlong	result1, arg01
2b2c8     B9 A0 30 FF 
2b2cc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b2d0     34 00 90 5D |  if_ne	jmp	#LR__4458
2b2d4     34 24 06 F1 | 	add	local04, #52
2b2d8     12 13 02 F6 | 	mov	arg01, local04
2b2dc     E8 13 06 F1 | 	add	arg01, #488
2b2e0                 | ' {
2b2e0                 | ' 
2b2e0                 | ' 	return *((DWORD*)ptr);
2b2e0     09 FB 01 FB | 	rdlong	result1, arg01
2b2e4     20 24 86 F1 | 	sub	local04, #32
2b2e8     12 FB 61 FC | 	wrlong	result1, local04
2b2ec     20 24 06 F1 | 	add	local04, #32
2b2f0     12 13 02 F6 | 	mov	arg01, local04
2b2f4     EC 13 06 F1 | 	add	arg01, #492
2b2f8                 | ' {
2b2f8                 | ' 
2b2f8                 | ' 	return *((DWORD*)ptr);
2b2f8     09 FB 01 FB | 	rdlong	result1, arg01
2b2fc     24 24 86 F1 | 	sub	local04, #36
2b300     12 FB 61 FC | 	wrlong	result1, local04
2b304     10 24 86 F1 | 	sub	local04, #16
2b308                 | LR__4458
2b308                 | LR__4459
2b308     12 31 42 FC | 	wrbyte	local10, local04
2b30c     04 E4 05 F1 | 	add	objptr, #4
2b310     F2 26 E2 FA | 	rdword	local05, objptr
2b314     01 26 06 F1 | 	add	local05, #1
2b318     F2 26 52 FC | 	wrword	local05, objptr
2b31c     F2 32 E2 FA | 	rdword	local11, objptr
2b320     06 24 06 F1 | 	add	local04, #6
2b324     12 33 52 FC | 	wrword	local11, local04
2b328     04 E4 05 F1 | 	add	objptr, #4
2b32c     06 24 06 F1 | 	add	local04, #6
2b330     12 E5 61 FC | 	wrlong	objptr, local04
2b334                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b334                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b334                 | ' 			{
2b334                 | ' 
2b334                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b334                 | ' 
2b334                 | ' 
2b334                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b334                 | ' 
2b334                 | ' 			}
2b334                 | ' 		}
2b334                 | ' 
2b334                 | ' 
2b334                 | ' 	}
2b334                 | ' 
2b334                 | ' 	fs->fs_type = (BYTE)fmt;
2b334                 | ' 	fs->id = ++Fsid;
2b334                 | ' 
2b334                 | ' 	fs->lfnbuf = LfnBuf;
2b334                 | ' #line 3567 "ff.c"
2b334                 | ' 	return FR_OK;
2b334     00 FA 05 F6 | 	mov	result1, #0
2b338     08 E4 85 F1 | 	sub	objptr, #8
2b33c                 | LR__4460
2b33c     A7 F0 03 F6 | 	mov	ptra, fp
2b340     B2 00 A0 FD | 	call	#popregs_
2b344                 | _fatfs_cc_mount_volume_ret
2b344     2D 00 64 FD | 	ret
2b348                 | 
2b348                 | _fatfs_cc_validate
2b348     09 01 0A F6 | 	mov	_var01, arg01 wz
2b34c     09 02 06 F6 | 	mov	_var02, #9
2b350     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b354     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b358     50 00 90 AD |  if_e	jmp	#LR__4470
2b35c     04 00 06 F1 | 	add	_var01, #4
2b360     00 07 E2 FA | 	rdword	_var04, _var01
2b364     04 00 86 F1 | 	sub	_var01, #4
2b368     00 13 02 FB | 	rdlong	arg01, _var01
2b36c     06 12 06 F1 | 	add	arg01, #6
2b370     09 FB E1 FA | 	rdword	result1, arg01
2b374     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b378     30 00 90 5D |  if_ne	jmp	#LR__4470
2b37c     00 07 02 FB | 	rdlong	_var04, _var01
2b380     01 06 06 F1 | 	add	_var04, #1
2b384     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b388     01 FA 05 56 |  if_ne	mov	result1, #1
2b38c                 | ' 
2b38c                 | ' 	return Stat;
2b38c     01 00 00 AF 
2b390     20 E4 05 A1 |  if_e	add	objptr, ##544
2b394     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b398     01 00 00 AF 
2b39c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b3a0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b3a4     01 04 CE F7 | 	test	_var03, #1 wz
2b3a8     00 02 06 A6 |  if_e	mov	_var02, #0
2b3ac                 | LR__4470
2b3ac     00 02 0E F2 | 	cmp	_var02, #0 wz
2b3b0     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b3b4     00 04 06 56 |  if_ne	mov	_var03, #0
2b3b8     0A 05 62 FC | 	wrlong	_var03, arg02
2b3bc                 | ' 			res = FR_OK;
2b3bc                 | ' 		}
2b3bc                 | ' 
2b3bc                 | ' 	}
2b3bc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b3bc                 | ' 	return res;
2b3bc     01 FB 01 F6 | 	mov	result1, _var02
2b3c0                 | _fatfs_cc_validate_ret
2b3c0     2D 00 64 FD | 	ret
2b3c4                 | 
2b3c4                 | _fatfs_cc_f_mount
2b3c4     01 4A 05 F6 | 	mov	COUNT_, #1
2b3c8     A8 00 A0 FD | 	call	#pushregs_
2b3cc     20 F0 07 F1 | 	add	ptra, #32
2b3d0     04 4E 05 F1 | 	add	fp, #4
2b3d4     A7 12 62 FC | 	wrlong	arg01, fp
2b3d8     04 4E 05 F1 | 	add	fp, #4
2b3dc     A7 14 62 FC | 	wrlong	arg02, fp
2b3e0     04 4E 05 F1 | 	add	fp, #4
2b3e4     A7 16 42 FC | 	wrbyte	arg03, fp
2b3e8     04 4E 85 F1 | 	sub	fp, #4
2b3ec     A7 16 02 FB | 	rdlong	arg03, fp
2b3f0     14 4E 05 F1 | 	add	fp, #20
2b3f4     A7 16 62 FC | 	wrlong	arg03, fp
2b3f8     A7 12 02 F6 | 	mov	arg01, fp
2b3fc     1C 4E 85 F1 | 	sub	fp, #28
2b400     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b404     14 4E 05 F1 | 	add	fp, #20
2b408     A7 FA 61 FC | 	wrlong	result1, fp
2b40c     14 4E 85 F1 | 	sub	fp, #20
2b410     00 FA 55 F2 | 	cmps	result1, #0 wc
2b414     0B FA 05 C6 |  if_b	mov	result1, #11
2b418     C0 00 90 CD |  if_b	jmp	#LR__4481
2b41c     14 4E 05 F1 | 	add	fp, #20
2b420     A7 16 02 FB | 	rdlong	arg03, fp
2b424     02 16 66 F0 | 	shl	arg03, #2
2b428     F2 16 02 F1 | 	add	arg03, objptr
2b42c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b430     04 4E 85 F1 | 	sub	fp, #4
2b434     A7 16 62 FC | 	wrlong	arg03, fp
2b438     10 4E 85 F1 | 	sub	fp, #16
2b43c     28 00 90 AD |  if_e	jmp	#LR__4480
2b440     10 4E 05 F1 | 	add	fp, #16
2b444     A7 16 02 FB | 	rdlong	arg03, fp
2b448     10 4E 85 F1 | 	sub	fp, #16
2b44c     01 16 06 F1 | 	add	arg03, #1
2b450     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b454     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b458     10 4E 05 F1 | 	add	fp, #16
2b45c     A7 16 02 FB | 	rdlong	arg03, fp
2b460     10 4E 85 F1 | 	sub	fp, #16
2b464     0B 01 48 FC | 	wrbyte	#0, arg03
2b468                 | LR__4480
2b468     04 4E 05 F1 | 	add	fp, #4
2b46c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b470     04 4E 85 F1 | 	sub	fp, #4
2b474     04 4E 05 51 |  if_ne	add	fp, #4
2b478     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b47c     04 4E 85 51 |  if_ne	sub	fp, #4
2b480     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b484     14 4E 05 F1 | 	add	fp, #20
2b488     A7 1E 02 FB | 	rdlong	local01, fp
2b48c     02 1E 66 F0 | 	shl	local01, #2
2b490     F2 1E 02 F1 | 	add	local01, objptr
2b494     10 4E 85 F1 | 	sub	fp, #16
2b498     A7 16 02 FB | 	rdlong	arg03, fp
2b49c     0F 17 62 FC | 	wrlong	arg03, local01
2b4a0     08 4E 05 F1 | 	add	fp, #8
2b4a4     A7 1E CA FA | 	rdbyte	local01, fp wz
2b4a8     0C 4E 85 F1 | 	sub	fp, #12
2b4ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b4b0     28 00 90 AD |  if_e	jmp	#LR__4481
2b4b4     08 4E 05 F1 | 	add	fp, #8
2b4b8     A7 12 02 F6 | 	mov	arg01, fp
2b4bc     04 4E 85 F1 | 	sub	fp, #4
2b4c0     A7 14 02 F6 | 	mov	arg02, fp
2b4c4     04 4E 85 F1 | 	sub	fp, #4
2b4c8     00 16 06 F6 | 	mov	arg03, #0
2b4cc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b4d0     18 4E 05 F1 | 	add	fp, #24
2b4d4     A7 FA 61 FC | 	wrlong	result1, fp
2b4d8                 | ' 
2b4d8                 | ' 	res = mount_volume(&path, &fs, 0);
2b4d8                 | ' 	return res ;
2b4d8     18 4E 85 F1 | 	sub	fp, #24
2b4dc                 | LR__4481
2b4dc     A7 F0 03 F6 | 	mov	ptra, fp
2b4e0     B2 00 A0 FD | 	call	#popregs_
2b4e4                 | _fatfs_cc_f_mount_ret
2b4e4     2D 00 64 FD | 	ret
2b4e8                 | 
2b4e8                 | _fatfs_cc_f_open
2b4e8     02 4A 05 F6 | 	mov	COUNT_, #2
2b4ec     A8 00 A0 FD | 	call	#pushregs_
2b4f0     60 F0 07 F1 | 	add	ptra, #96
2b4f4     04 4E 05 F1 | 	add	fp, #4
2b4f8     A7 12 62 FC | 	wrlong	arg01, fp
2b4fc     04 4E 05 F1 | 	add	fp, #4
2b500     A7 14 62 FC | 	wrlong	arg02, fp
2b504     04 4E 05 F1 | 	add	fp, #4
2b508     A7 16 42 FC | 	wrbyte	arg03, fp
2b50c     08 4E 85 F1 | 	sub	fp, #8
2b510     A7 18 0A FB | 	rdlong	arg04, fp wz
2b514     04 4E 85 F1 | 	sub	fp, #4
2b518     09 FA 05 A6 |  if_e	mov	result1, #9
2b51c     98 06 90 AD |  if_e	jmp	#LR__4507
2b520     0C 4E 05 F1 | 	add	fp, #12
2b524     A7 18 C2 FA | 	rdbyte	arg04, fp
2b528     3F 18 06 F5 | 	and	arg04, #63
2b52c     A7 18 42 FC | 	wrbyte	arg04, fp
2b530     04 4E 85 F1 | 	sub	fp, #4
2b534     A7 12 02 F6 | 	mov	arg01, fp
2b538     3C 4E 05 F1 | 	add	fp, #60
2b53c     A7 14 02 F6 | 	mov	arg02, fp
2b540     38 4E 85 F1 | 	sub	fp, #56
2b544     A7 16 C2 FA | 	rdbyte	arg03, fp
2b548     0C 4E 85 F1 | 	sub	fp, #12
2b54c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b550     10 4E 05 F1 | 	add	fp, #16
2b554     A7 FA 61 FC | 	wrlong	result1, fp
2b558     10 4E 85 F1 | 	sub	fp, #16
2b55c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b560     2C 06 90 5D |  if_ne	jmp	#LR__4506
2b564     44 4E 05 F1 | 	add	fp, #68
2b568     A7 18 02 FB | 	rdlong	arg04, fp
2b56c     30 4E 85 F1 | 	sub	fp, #48
2b570     A7 18 62 FC | 	wrlong	arg04, fp
2b574     A7 12 02 F6 | 	mov	arg01, fp
2b578     0C 4E 85 F1 | 	sub	fp, #12
2b57c     A7 1E 02 FB | 	rdlong	local01, fp
2b580     08 4E 85 F1 | 	sub	fp, #8
2b584     0F 15 02 F6 | 	mov	arg02, local01
2b588     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b58c     10 4E 05 F1 | 	add	fp, #16
2b590     A7 FA 61 FC | 	wrlong	result1, fp
2b594     10 4E 85 F1 | 	sub	fp, #16
2b598     00 FA 0D F2 | 	cmp	result1, #0 wz
2b59c     1C 00 90 5D |  if_ne	jmp	#LR__4490
2b5a0     3F 4E 05 F1 | 	add	fp, #63
2b5a4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b5a8     3F 4E 85 F1 | 	sub	fp, #63
2b5ac     80 18 CE F7 | 	test	arg04, #128 wz
2b5b0     10 4E 05 51 |  if_ne	add	fp, #16
2b5b4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b5b8     10 4E 85 51 |  if_ne	sub	fp, #16
2b5bc                 | LR__4490
2b5bc     0C 4E 05 F1 | 	add	fp, #12
2b5c0     A7 18 C2 FA | 	rdbyte	arg04, fp
2b5c4     0C 4E 85 F1 | 	sub	fp, #12
2b5c8     1C 18 CE F7 | 	test	arg04, #28 wz
2b5cc     F0 01 90 AD |  if_e	jmp	#LR__4495
2b5d0     10 4E 05 F1 | 	add	fp, #16
2b5d4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b5d8     10 4E 85 F1 | 	sub	fp, #16
2b5dc     48 00 90 AD |  if_e	jmp	#LR__4492
2b5e0     10 4E 05 F1 | 	add	fp, #16
2b5e4     A7 18 02 FB | 	rdlong	arg04, fp
2b5e8     10 4E 85 F1 | 	sub	fp, #16
2b5ec     04 18 0E F2 | 	cmp	arg04, #4 wz
2b5f0     1C 00 90 5D |  if_ne	jmp	#LR__4491
2b5f4     14 4E 05 F1 | 	add	fp, #20
2b5f8     A7 12 02 F6 | 	mov	arg01, fp
2b5fc     14 4E 85 F1 | 	sub	fp, #20
2b600     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b604     10 4E 05 F1 | 	add	fp, #16
2b608     A7 FA 61 FC | 	wrlong	result1, fp
2b60c     10 4E 85 F1 | 	sub	fp, #16
2b610                 | LR__4491
2b610     0C 4E 05 F1 | 	add	fp, #12
2b614     A7 1E C2 FA | 	rdbyte	local01, fp
2b618     08 1E 46 F5 | 	or	local01, #8
2b61c     A7 1E 42 FC | 	wrbyte	local01, fp
2b620     0C 4E 85 F1 | 	sub	fp, #12
2b624     3C 00 90 FD | 	jmp	#LR__4494
2b628                 | LR__4492
2b628     1A 4E 05 F1 | 	add	fp, #26
2b62c     A7 1E C2 FA | 	rdbyte	local01, fp
2b630     1A 4E 85 F1 | 	sub	fp, #26
2b634     11 1E CE F7 | 	test	local01, #17 wz
2b638     10 4E 05 51 |  if_ne	add	fp, #16
2b63c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b640     10 4E 85 51 |  if_ne	sub	fp, #16
2b644     1C 00 90 5D |  if_ne	jmp	#LR__4493
2b648     0C 4E 05 F1 | 	add	fp, #12
2b64c     A7 1E C2 FA | 	rdbyte	local01, fp
2b650     0C 4E 85 F1 | 	sub	fp, #12
2b654     04 1E CE F7 | 	test	local01, #4 wz
2b658     10 4E 05 51 |  if_ne	add	fp, #16
2b65c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b660     10 4E 85 51 |  if_ne	sub	fp, #16
2b664                 | LR__4493
2b664                 | LR__4494
2b664     10 4E 05 F1 | 	add	fp, #16
2b668     A7 1E 0A FB | 	rdlong	local01, fp wz
2b66c     10 4E 85 F1 | 	sub	fp, #16
2b670     A8 01 90 5D |  if_ne	jmp	#LR__4498
2b674     0C 4E 05 F1 | 	add	fp, #12
2b678     A7 1E C2 FA | 	rdbyte	local01, fp
2b67c     0C 4E 85 F1 | 	sub	fp, #12
2b680     08 1E CE F7 | 	test	local01, #8 wz
2b684     94 01 90 AD |  if_e	jmp	#LR__4498
2b688     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b68c     54 4E 05 F1 | 	add	fp, #84
2b690     A7 FA 61 FC | 	wrlong	result1, fp
2b694     24 4E 85 F1 | 	sub	fp, #36
2b698     A7 12 02 FB | 	rdlong	arg01, fp
2b69c     0E 12 06 F1 | 	add	arg01, #14
2b6a0     09 FB 61 FC | 	wrlong	result1, arg01
2b6a4     A7 12 02 FB | 	rdlong	arg01, fp
2b6a8     16 12 06 F1 | 	add	arg01, #22
2b6ac     24 4E 05 F1 | 	add	fp, #36
2b6b0     A7 14 02 FB | 	rdlong	arg02, fp
2b6b4     09 15 62 FC | 	wrlong	arg02, arg01
2b6b8     10 4E 85 F1 | 	sub	fp, #16
2b6bc     A7 12 02 FB | 	rdlong	arg01, fp
2b6c0     14 4E 85 F1 | 	sub	fp, #20
2b6c4     A7 14 02 FB | 	rdlong	arg02, fp
2b6c8     30 4E 85 F1 | 	sub	fp, #48
2b6cc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b6d0     48 4E 05 F1 | 	add	fp, #72
2b6d4     A7 FA 61 FC | 	wrlong	result1, fp
2b6d8     18 4E 85 F1 | 	sub	fp, #24
2b6dc     A7 1E 02 FB | 	rdlong	local01, fp
2b6e0     0B 1E 06 F1 | 	add	local01, #11
2b6e4     0F 41 48 FC | 	wrbyte	#32, local01
2b6e8     14 4E 05 F1 | 	add	fp, #20
2b6ec     A7 12 02 FB | 	rdlong	arg01, fp
2b6f0     14 4E 85 F1 | 	sub	fp, #20
2b6f4     A7 14 02 FB | 	rdlong	arg02, fp
2b6f8     30 4E 85 F1 | 	sub	fp, #48
2b6fc     00 16 06 F6 | 	mov	arg03, #0
2b700     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b704     30 4E 05 F1 | 	add	fp, #48
2b708     A7 12 02 FB | 	rdlong	arg01, fp
2b70c     1C 12 06 F1 | 	add	arg01, #28
2b710     09 01 68 FC | 	wrlong	#0, arg01
2b714     14 4E 05 F1 | 	add	fp, #20
2b718     A7 1E 02 FB | 	rdlong	local01, fp
2b71c     03 1E 06 F1 | 	add	local01, #3
2b720     0F 03 48 FC | 	wrbyte	#1, local01
2b724     04 4E 05 F1 | 	add	fp, #4
2b728     A7 1E 0A FB | 	rdlong	local01, fp wz
2b72c     48 4E 85 F1 | 	sub	fp, #72
2b730     E8 00 90 AD |  if_e	jmp	#LR__4498
2b734     44 4E 05 F1 | 	add	fp, #68
2b738     A7 1E 02 FB | 	rdlong	local01, fp
2b73c     30 1E 06 F1 | 	add	local01, #48
2b740     0F 1F 02 FB | 	rdlong	local01, local01
2b744     14 4E 05 F1 | 	add	fp, #20
2b748     A7 1E 62 FC | 	wrlong	local01, fp
2b74c     44 4E 85 F1 | 	sub	fp, #68
2b750     A7 12 02 F6 | 	mov	arg01, fp
2b754     34 4E 05 F1 | 	add	fp, #52
2b758     A7 14 02 FB | 	rdlong	arg02, fp
2b75c     48 4E 85 F1 | 	sub	fp, #72
2b760     00 16 06 F6 | 	mov	arg03, #0
2b764     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b768     10 4E 05 F1 | 	add	fp, #16
2b76c     A7 FA 61 FC | 	wrlong	result1, fp
2b770     10 4E 85 F1 | 	sub	fp, #16
2b774     00 FA 0D F2 | 	cmp	result1, #0 wz
2b778     A0 00 90 5D |  if_ne	jmp	#LR__4498
2b77c     44 4E 05 F1 | 	add	fp, #68
2b780     A7 12 02 FB | 	rdlong	arg01, fp
2b784     14 4E 05 F1 | 	add	fp, #20
2b788     A7 14 02 FB | 	rdlong	arg02, fp
2b78c     58 4E 85 F1 | 	sub	fp, #88
2b790     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b794     10 4E 05 F1 | 	add	fp, #16
2b798     A7 FA 61 FC | 	wrlong	result1, fp
2b79c     34 4E 05 F1 | 	add	fp, #52
2b7a0     A7 18 02 FB | 	rdlong	arg04, fp
2b7a4     04 4E 05 F1 | 	add	fp, #4
2b7a8     A7 1E 02 FB | 	rdlong	local01, fp
2b7ac     48 4E 85 F1 | 	sub	fp, #72
2b7b0     01 1E 86 F1 | 	sub	local01, #1
2b7b4     10 18 06 F1 | 	add	arg04, #16
2b7b8     0C 1F 62 FC | 	wrlong	local01, arg04
2b7bc     5C 00 90 FD | 	jmp	#LR__4498
2b7c0                 | LR__4495
2b7c0     10 4E 05 F1 | 	add	fp, #16
2b7c4     A7 18 0A FB | 	rdlong	arg04, fp wz
2b7c8     10 4E 85 F1 | 	sub	fp, #16
2b7cc     4C 00 90 5D |  if_ne	jmp	#LR__4497
2b7d0     1A 4E 05 F1 | 	add	fp, #26
2b7d4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7d8     1A 4E 85 F1 | 	sub	fp, #26
2b7dc     10 18 CE F7 | 	test	arg04, #16 wz
2b7e0     10 4E 05 51 |  if_ne	add	fp, #16
2b7e4     A7 08 68 5C |  if_ne	wrlong	#4, fp
2b7e8     10 4E 85 51 |  if_ne	sub	fp, #16
2b7ec     2C 00 90 5D |  if_ne	jmp	#LR__4496
2b7f0     0C 4E 05 F1 | 	add	fp, #12
2b7f4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7f8     0C 4E 85 F1 | 	sub	fp, #12
2b7fc     02 18 CE F7 | 	test	arg04, #2 wz
2b800     1A 4E 05 51 |  if_ne	add	fp, #26
2b804     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2b808     1A 4E 85 51 |  if_ne	sub	fp, #26
2b80c     01 1E CE 57 |  if_ne	test	local01, #1 wz
2b810     10 4E 05 51 |  if_ne	add	fp, #16
2b814     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b818     10 4E 85 51 |  if_ne	sub	fp, #16
2b81c                 | LR__4496
2b81c                 | LR__4497
2b81c                 | LR__4498
2b81c     10 4E 05 F1 | 	add	fp, #16
2b820     A7 1E 0A FB | 	rdlong	local01, fp wz
2b824     10 4E 85 F1 | 	sub	fp, #16
2b828     60 00 90 5D |  if_ne	jmp	#LR__4499
2b82c     0C 4E 05 F1 | 	add	fp, #12
2b830     A7 20 C2 FA | 	rdbyte	local02, fp
2b834     0C 4E 85 F1 | 	sub	fp, #12
2b838     08 20 CE F7 | 	test	local02, #8 wz
2b83c     0C 4E 05 51 |  if_ne	add	fp, #12
2b840     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2b844     40 20 46 55 |  if_ne	or	local02, #64
2b848     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2b84c     0C 4E 85 51 |  if_ne	sub	fp, #12
2b850     04 4E 05 F1 | 	add	fp, #4
2b854     A7 20 02 FB | 	rdlong	local02, fp
2b858     40 4E 05 F1 | 	add	fp, #64
2b85c     A7 1E 02 FB | 	rdlong	local01, fp
2b860     30 1E 06 F1 | 	add	local01, #48
2b864     0F 1F 02 FB | 	rdlong	local01, local01
2b868     20 20 06 F1 | 	add	local02, #32
2b86c     10 1F 62 FC | 	wrlong	local01, local02
2b870     40 4E 85 F1 | 	sub	fp, #64
2b874     A7 20 02 FB | 	rdlong	local02, fp
2b878     2C 4E 05 F1 | 	add	fp, #44
2b87c     A7 1E 02 FB | 	rdlong	local01, fp
2b880     30 4E 85 F1 | 	sub	fp, #48
2b884     24 20 06 F1 | 	add	local02, #36
2b888     10 1F 62 FC | 	wrlong	local01, local02
2b88c                 | LR__4499
2b88c     10 4E 05 F1 | 	add	fp, #16
2b890     A7 20 0A FB | 	rdlong	local02, fp wz
2b894     10 4E 85 F1 | 	sub	fp, #16
2b898     F4 02 90 5D |  if_ne	jmp	#LR__4505
2b89c     04 4E 05 F1 | 	add	fp, #4
2b8a0     A7 20 02 FB | 	rdlong	local02, fp
2b8a4     40 4E 05 F1 | 	add	fp, #64
2b8a8     A7 12 02 FB | 	rdlong	arg01, fp
2b8ac     14 4E 85 F1 | 	sub	fp, #20
2b8b0     A7 14 02 FB | 	rdlong	arg02, fp
2b8b4     30 4E 85 F1 | 	sub	fp, #48
2b8b8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2b8bc     08 20 06 F1 | 	add	local02, #8
2b8c0     10 FB 61 FC | 	wrlong	result1, local02
2b8c4     04 4E 05 F1 | 	add	fp, #4
2b8c8     A7 20 02 FB | 	rdlong	local02, fp
2b8cc     2C 4E 05 F1 | 	add	fp, #44
2b8d0     A7 12 02 FB | 	rdlong	arg01, fp
2b8d4     1C 12 06 F1 | 	add	arg01, #28
2b8d8                 | ' {
2b8d8                 | ' 
2b8d8                 | ' 	return *((DWORD*)ptr);
2b8d8     09 FB 01 FB | 	rdlong	result1, arg01
2b8dc     0C 20 06 F1 | 	add	local02, #12
2b8e0     10 FB 61 FC | 	wrlong	result1, local02
2b8e4     2C 4E 85 F1 | 	sub	fp, #44
2b8e8     A7 20 02 FB | 	rdlong	local02, fp
2b8ec     40 4E 05 F1 | 	add	fp, #64
2b8f0     A7 1E 02 FB | 	rdlong	local01, fp
2b8f4     10 1F 62 FC | 	wrlong	local01, local02
2b8f8     40 4E 85 F1 | 	sub	fp, #64
2b8fc     A7 20 02 FB | 	rdlong	local02, fp
2b900     40 4E 05 F1 | 	add	fp, #64
2b904     A7 1E 02 FB | 	rdlong	local01, fp
2b908     06 1E 06 F1 | 	add	local01, #6
2b90c     0F 1F E2 FA | 	rdword	local01, local01
2b910     04 20 06 F1 | 	add	local02, #4
2b914     10 1F 52 FC | 	wrword	local01, local02
2b918     40 4E 85 F1 | 	sub	fp, #64
2b91c     A7 20 02 FB | 	rdlong	local02, fp
2b920     08 4E 05 F1 | 	add	fp, #8
2b924     A7 1E C2 FA | 	rdbyte	local01, fp
2b928     10 20 06 F1 | 	add	local02, #16
2b92c     10 1F 42 FC | 	wrbyte	local01, local02
2b930     08 4E 85 F1 | 	sub	fp, #8
2b934     A7 20 02 FB | 	rdlong	local02, fp
2b938     11 20 06 F1 | 	add	local02, #17
2b93c     10 01 48 FC | 	wrbyte	#0, local02
2b940     A7 20 02 FB | 	rdlong	local02, fp
2b944     1C 20 06 F1 | 	add	local02, #28
2b948     10 01 68 FC | 	wrlong	#0, local02
2b94c     A7 20 02 FB | 	rdlong	local02, fp
2b950     14 20 06 F1 | 	add	local02, #20
2b954     10 01 68 FC | 	wrlong	#0, local02
2b958     A7 12 02 FB | 	rdlong	arg01, fp
2b95c     04 4E 85 F1 | 	sub	fp, #4
2b960     28 12 06 F1 | 	add	arg01, #40
2b964     00 14 06 F6 | 	mov	arg02, #0
2b968     09 16 C6 F9 | 	decod	arg03, #9
2b96c     98 00 A0 FD | 	call	#\builtin_bytefill_
2b970     0C 4E 05 F1 | 	add	fp, #12
2b974     A7 20 C2 FA | 	rdbyte	local02, fp
2b978     0C 4E 85 F1 | 	sub	fp, #12
2b97c     20 20 CE F7 | 	test	local02, #32 wz
2b980     0C 02 90 AD |  if_e	jmp	#LR__4504
2b984     04 4E 05 F1 | 	add	fp, #4
2b988     A7 1E 02 FB | 	rdlong	local01, fp
2b98c     04 4E 85 F1 | 	sub	fp, #4
2b990     0C 1E 06 F1 | 	add	local01, #12
2b994     0F 21 02 FB | 	rdlong	local02, local01
2b998     01 20 16 F2 | 	cmp	local02, #1 wc
2b99c     F0 01 90 CD |  if_b	jmp	#LR__4504
2b9a0     04 4E 05 F1 | 	add	fp, #4
2b9a4     A7 1E 02 FB | 	rdlong	local01, fp
2b9a8     0F 21 02 F6 | 	mov	local02, local01
2b9ac     0C 1E 06 F1 | 	add	local01, #12
2b9b0     0F 1F 02 FB | 	rdlong	local01, local01
2b9b4     14 20 06 F1 | 	add	local02, #20
2b9b8     10 1F 62 FC | 	wrlong	local01, local02
2b9bc     40 4E 05 F1 | 	add	fp, #64
2b9c0     A7 20 02 FB | 	rdlong	local02, fp
2b9c4     0A 20 06 F1 | 	add	local02, #10
2b9c8     10 21 E2 FA | 	rdword	local02, local02
2b9cc     09 20 66 F0 | 	shl	local02, #9
2b9d0     08 4E 05 F1 | 	add	fp, #8
2b9d4     A7 20 62 FC | 	wrlong	local02, fp
2b9d8     48 4E 85 F1 | 	sub	fp, #72
2b9dc     A7 20 02 FB | 	rdlong	local02, fp
2b9e0     08 20 06 F1 | 	add	local02, #8
2b9e4     10 1F 02 FB | 	rdlong	local01, local02
2b9e8     4C 4E 05 F1 | 	add	fp, #76
2b9ec     A7 1E 62 FC | 	wrlong	local01, fp
2b9f0                 | ' 				fp->fptr = fp->obj.objsize;
2b9f0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2b9f0                 | ' 				clst = fp->obj.sclust;
2b9f0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2b9f0     4C 4E 85 F1 | 	sub	fp, #76
2b9f4     A7 20 02 FB | 	rdlong	local02, fp
2b9f8     0C 20 06 F1 | 	add	local02, #12
2b9fc     10 1F 02 FB | 	rdlong	local01, local02
2ba00     58 4E 05 F1 | 	add	fp, #88
2ba04     A7 1E 62 FC | 	wrlong	local01, fp
2ba08     5C 4E 85 F1 | 	sub	fp, #92
2ba0c                 | LR__4500
2ba0c     10 4E 05 F1 | 	add	fp, #16
2ba10     A7 20 0A FB | 	rdlong	local02, fp wz
2ba14     10 4E 85 F1 | 	sub	fp, #16
2ba18     94 00 90 5D |  if_ne	jmp	#LR__4501
2ba1c     5C 4E 05 F1 | 	add	fp, #92
2ba20     A7 20 02 FB | 	rdlong	local02, fp
2ba24     10 4E 85 F1 | 	sub	fp, #16
2ba28     A7 1E 02 FB | 	rdlong	local01, fp
2ba2c     4C 4E 85 F1 | 	sub	fp, #76
2ba30     0F 21 1A F2 | 	cmp	local02, local01 wcz
2ba34     78 00 90 ED |  if_be	jmp	#LR__4501
2ba38     04 4E 05 F1 | 	add	fp, #4
2ba3c     A7 12 02 FB | 	rdlong	arg01, fp
2ba40     4C 4E 05 F1 | 	add	fp, #76
2ba44     A7 14 02 FB | 	rdlong	arg02, fp
2ba48     50 4E 85 F1 | 	sub	fp, #80
2ba4c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2ba50     50 4E 05 F1 | 	add	fp, #80
2ba54     A7 FA 61 FC | 	wrlong	result1, fp
2ba58     50 4E 85 F1 | 	sub	fp, #80
2ba5c     02 FA 15 F2 | 	cmp	result1, #2 wc
2ba60     10 4E 05 C1 |  if_b	add	fp, #16
2ba64     A7 04 68 CC |  if_b	wrlong	#2, fp
2ba68     10 4E 85 C1 |  if_b	sub	fp, #16
2ba6c     50 4E 05 F1 | 	add	fp, #80
2ba70     A7 20 02 FB | 	rdlong	local02, fp
2ba74     50 4E 85 F1 | 	sub	fp, #80
2ba78     FF FF 7F FF 
2ba7c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2ba80     10 4E 05 A1 |  if_e	add	fp, #16
2ba84     A7 02 68 AC |  if_e	wrlong	#1, fp
2ba88     10 4E 85 A1 |  if_e	sub	fp, #16
2ba8c     5C 4E 05 F1 | 	add	fp, #92
2ba90     A7 20 02 FB | 	rdlong	local02, fp
2ba94     10 4E 85 F1 | 	sub	fp, #16
2ba98     A7 1E 02 FB | 	rdlong	local01, fp
2ba9c     0F 21 82 F1 | 	sub	local02, local01
2baa0     10 4E 05 F1 | 	add	fp, #16
2baa4     A7 20 62 FC | 	wrlong	local02, fp
2baa8     5C 4E 85 F1 | 	sub	fp, #92
2baac     5C FF 9F FD | 	jmp	#LR__4500
2bab0                 | LR__4501
2bab0     04 4E 05 F1 | 	add	fp, #4
2bab4     A7 20 02 FB | 	rdlong	local02, fp
2bab8     4C 4E 05 F1 | 	add	fp, #76
2babc     A7 1E 02 FB | 	rdlong	local01, fp
2bac0     18 20 06 F1 | 	add	local02, #24
2bac4     10 1F 62 FC | 	wrlong	local01, local02
2bac8     40 4E 85 F1 | 	sub	fp, #64
2bacc     A7 20 0A FB | 	rdlong	local02, fp wz
2bad0     10 4E 85 F1 | 	sub	fp, #16
2bad4     B8 00 90 5D |  if_ne	jmp	#LR__4503
2bad8     5C 4E 05 F1 | 	add	fp, #92
2badc     A7 1E 02 FB | 	rdlong	local01, fp
2bae0     5C 4E 85 F1 | 	sub	fp, #92
2bae4     FF 1F CE F7 | 	test	local01, #511 wz
2bae8     A4 00 90 AD |  if_e	jmp	#LR__4503
2baec     44 4E 05 F1 | 	add	fp, #68
2baf0     A7 12 02 FB | 	rdlong	arg01, fp
2baf4     0C 4E 05 F1 | 	add	fp, #12
2baf8     A7 14 02 FB | 	rdlong	arg02, fp
2bafc     50 4E 85 F1 | 	sub	fp, #80
2bb00     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bb04     58 4E 05 F1 | 	add	fp, #88
2bb08     A7 FA 61 FC | 	wrlong	result1, fp
2bb0c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bb10     58 4E 85 F1 | 	sub	fp, #88
2bb14     10 4E 05 A1 |  if_e	add	fp, #16
2bb18     A7 04 68 AC |  if_e	wrlong	#2, fp
2bb1c     10 4E 85 A1 |  if_e	sub	fp, #16
2bb20     6C 00 90 AD |  if_e	jmp	#LR__4502
2bb24     04 4E 05 F1 | 	add	fp, #4
2bb28     A7 20 02 FB | 	rdlong	local02, fp
2bb2c     54 4E 05 F1 | 	add	fp, #84
2bb30     A7 1E 02 FB | 	rdlong	local01, fp
2bb34     04 4E 05 F1 | 	add	fp, #4
2bb38     A7 18 02 FB | 	rdlong	arg04, fp
2bb3c     09 18 46 F0 | 	shr	arg04, #9
2bb40     0C 1F 02 F1 | 	add	local01, arg04
2bb44     1C 20 06 F1 | 	add	local02, #28
2bb48     10 1F 62 FC | 	wrlong	local01, local02
2bb4c     18 4E 85 F1 | 	sub	fp, #24
2bb50     A7 20 02 FB | 	rdlong	local02, fp
2bb54     01 20 06 F1 | 	add	local02, #1
2bb58     10 13 C2 FA | 	rdbyte	arg01, local02
2bb5c     40 4E 85 F1 | 	sub	fp, #64
2bb60     A7 20 02 FB | 	rdlong	local02, fp
2bb64     10 15 02 F6 | 	mov	arg02, local02
2bb68     28 14 06 F1 | 	add	arg02, #40
2bb6c     04 4E 85 F1 | 	sub	fp, #4
2bb70     1C 20 06 F1 | 	add	local02, #28
2bb74     10 17 02 FB | 	rdlong	arg03, local02
2bb78     01 18 06 F6 | 	mov	arg04, #1
2bb7c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bb80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb84     10 4E 05 51 |  if_ne	add	fp, #16
2bb88     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bb8c     10 4E 85 51 |  if_ne	sub	fp, #16
2bb90                 | LR__4502
2bb90                 | LR__4503
2bb90                 | LR__4504
2bb90                 | LR__4505
2bb90                 | LR__4506
2bb90     10 4E 05 F1 | 	add	fp, #16
2bb94     A7 20 0A FB | 	rdlong	local02, fp wz
2bb98     10 4E 85 F1 | 	sub	fp, #16
2bb9c     04 4E 05 51 |  if_ne	add	fp, #4
2bba0     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bba4     04 4E 85 51 |  if_ne	sub	fp, #4
2bba8     10 01 68 5C |  if_ne	wrlong	#0, local02
2bbac                 | ' 
2bbac                 | ' 	return res ;
2bbac     10 4E 05 F1 | 	add	fp, #16
2bbb0     A7 FA 01 FB | 	rdlong	result1, fp
2bbb4     10 4E 85 F1 | 	sub	fp, #16
2bbb8                 | LR__4507
2bbb8     A7 F0 03 F6 | 	mov	ptra, fp
2bbbc     B2 00 A0 FD | 	call	#popregs_
2bbc0                 | _fatfs_cc_f_open_ret
2bbc0     2D 00 64 FD | 	ret
2bbc4                 | 
2bbc4                 | _fatfs_cc_f_read
2bbc4     0E 4A 05 F6 | 	mov	COUNT_, #14
2bbc8     A8 00 A0 FD | 	call	#pushregs_
2bbcc     38 F0 07 F1 | 	add	ptra, #56
2bbd0     04 4E 05 F1 | 	add	fp, #4
2bbd4     A7 12 62 FC | 	wrlong	arg01, fp
2bbd8     04 4E 05 F1 | 	add	fp, #4
2bbdc     A7 14 62 FC | 	wrlong	arg02, fp
2bbe0     04 4E 05 F1 | 	add	fp, #4
2bbe4     A7 16 62 FC | 	wrlong	arg03, fp
2bbe8     04 4E 05 F1 | 	add	fp, #4
2bbec     A7 18 62 FC | 	wrlong	arg04, fp
2bbf0     08 4E 85 F1 | 	sub	fp, #8
2bbf4     A7 FA 01 FB | 	rdlong	result1, fp
2bbf8     2C 4E 05 F1 | 	add	fp, #44
2bbfc     A7 FA 61 FC | 	wrlong	result1, fp
2bc00     24 4E 85 F1 | 	sub	fp, #36
2bc04     A7 FA 01 FB | 	rdlong	result1, fp
2bc08     FD 00 68 FC | 	wrlong	#0, result1
2bc0c     0C 4E 85 F1 | 	sub	fp, #12
2bc10     A7 12 02 FB | 	rdlong	arg01, fp
2bc14     14 4E 05 F1 | 	add	fp, #20
2bc18     A7 14 02 F6 | 	mov	arg02, fp
2bc1c     18 4E 85 F1 | 	sub	fp, #24
2bc20     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bc24     14 4E 05 F1 | 	add	fp, #20
2bc28     A7 FA 61 FC | 	wrlong	result1, fp
2bc2c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc30     14 4E 85 F1 | 	sub	fp, #20
2bc34     20 00 90 5D |  if_ne	jmp	#LR__4510
2bc38     04 4E 05 F1 | 	add	fp, #4
2bc3c     A7 14 02 FB | 	rdlong	arg02, fp
2bc40     11 14 06 F1 | 	add	arg02, #17
2bc44     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bc48     10 4E 05 F1 | 	add	fp, #16
2bc4c     A7 14 62 FC | 	wrlong	arg02, fp
2bc50     14 4E 85 F1 | 	sub	fp, #20
2bc54     10 00 90 AD |  if_e	jmp	#LR__4511
2bc58                 | LR__4510
2bc58     14 4E 05 F1 | 	add	fp, #20
2bc5c     A7 FA 01 FB | 	rdlong	result1, fp
2bc60     14 4E 85 F1 | 	sub	fp, #20
2bc64     EC 05 90 FD | 	jmp	#LR__4530
2bc68                 | LR__4511
2bc68     04 4E 05 F1 | 	add	fp, #4
2bc6c     A7 18 02 FB | 	rdlong	arg04, fp
2bc70     04 4E 85 F1 | 	sub	fp, #4
2bc74     10 18 06 F1 | 	add	arg04, #16
2bc78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bc7c     01 18 CE F7 | 	test	arg04, #1 wz
2bc80     07 FA 05 A6 |  if_e	mov	result1, #7
2bc84     CC 05 90 AD |  if_e	jmp	#LR__4530
2bc88     04 4E 05 F1 | 	add	fp, #4
2bc8c     A7 1E 02 FB | 	rdlong	local01, fp
2bc90     0F 21 02 F6 | 	mov	local02, local01
2bc94     0C 20 06 F1 | 	add	local02, #12
2bc98     10 23 02 FB | 	rdlong	local03, local02
2bc9c     14 1E 06 F1 | 	add	local01, #20
2bca0     0F 1F 02 FB | 	rdlong	local01, local01
2bca4     0F 23 82 F1 | 	sub	local03, local01
2bca8     20 4E 05 F1 | 	add	fp, #32
2bcac     A7 22 62 FC | 	wrlong	local03, fp
2bcb0     18 4E 85 F1 | 	sub	fp, #24
2bcb4     A7 24 02 FB | 	rdlong	local04, fp
2bcb8     0C 4E 85 F1 | 	sub	fp, #12
2bcbc     11 25 1A F2 | 	cmp	local04, local03 wcz
2bcc0     24 4E 05 11 |  if_a	add	fp, #36
2bcc4     A7 24 02 1B |  if_a	rdlong	local04, fp
2bcc8     18 4E 85 11 |  if_a	sub	fp, #24
2bccc     A7 24 62 1C |  if_a	wrlong	local04, fp
2bcd0     0C 4E 85 11 |  if_a	sub	fp, #12
2bcd4                 | ' 
2bcd4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2bcd4                 | LR__4512
2bcd4     0C 4E 05 F1 | 	add	fp, #12
2bcd8     A7 20 02 FB | 	rdlong	local02, fp
2bcdc     0C 4E 85 F1 | 	sub	fp, #12
2bce0     10 25 02 F6 | 	mov	local04, local02
2bce4     01 24 16 F2 | 	cmp	local04, #1 wc
2bce8     64 05 90 CD |  if_b	jmp	#LR__4529
2bcec     04 4E 05 F1 | 	add	fp, #4
2bcf0     A7 22 02 FB | 	rdlong	local03, fp
2bcf4     04 4E 85 F1 | 	sub	fp, #4
2bcf8     14 22 06 F1 | 	add	local03, #20
2bcfc     11 23 02 FB | 	rdlong	local03, local03
2bd00     FF 23 CE F7 | 	test	local03, #511 wz
2bd04     3C 04 90 5D |  if_ne	jmp	#LR__4527
2bd08     04 4E 05 F1 | 	add	fp, #4
2bd0c     A7 1E 02 FB | 	rdlong	local01, fp
2bd10     14 1E 06 F1 | 	add	local01, #20
2bd14     0F 23 02 FB | 	rdlong	local03, local01
2bd18     09 22 46 F0 | 	shr	local03, #9
2bd1c     14 4E 05 F1 | 	add	fp, #20
2bd20     A7 26 02 FB | 	rdlong	local05, fp
2bd24     13 29 02 F6 | 	mov	local06, local05
2bd28     0A 28 06 F1 | 	add	local06, #10
2bd2c     14 2B E2 FA | 	rdword	local07, local06
2bd30     0A 28 86 F1 | 	sub	local06, #10
2bd34     15 2D 32 F9 | 	getword	local08, local07, #0
2bd38     01 2C 86 F1 | 	sub	local08, #1
2bd3c     16 23 0A F5 | 	and	local03, local08 wz
2bd40     18 4E 05 F1 | 	add	fp, #24
2bd44     A7 22 62 FC | 	wrlong	local03, fp
2bd48     30 4E 85 F1 | 	sub	fp, #48
2bd4c     E0 00 90 5D |  if_ne	jmp	#LR__4517
2bd50     04 4E 05 F1 | 	add	fp, #4
2bd54     A7 22 02 FB | 	rdlong	local03, fp
2bd58     04 4E 85 F1 | 	sub	fp, #4
2bd5c     14 22 06 F1 | 	add	local03, #20
2bd60     11 23 0A FB | 	rdlong	local03, local03 wz
2bd64     20 00 90 5D |  if_ne	jmp	#LR__4513
2bd68     04 4E 05 F1 | 	add	fp, #4
2bd6c     A7 22 02 FB | 	rdlong	local03, fp
2bd70     08 22 06 F1 | 	add	local03, #8
2bd74     11 23 02 FB | 	rdlong	local03, local03
2bd78     18 4E 05 F1 | 	add	fp, #24
2bd7c     A7 22 62 FC | 	wrlong	local03, fp
2bd80     1C 4E 85 F1 | 	sub	fp, #28
2bd84     28 00 90 FD | 	jmp	#LR__4514
2bd88                 | LR__4513
2bd88     04 4E 05 F1 | 	add	fp, #4
2bd8c     A7 2C 02 FB | 	rdlong	local08, fp
2bd90     16 13 02 F6 | 	mov	arg01, local08
2bd94     04 4E 85 F1 | 	sub	fp, #4
2bd98     18 2C 06 F1 | 	add	local08, #24
2bd9c     16 15 02 FB | 	rdlong	arg02, local08
2bda0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2bda4     1C 4E 05 F1 | 	add	fp, #28
2bda8     A7 FA 61 FC | 	wrlong	result1, fp
2bdac     1C 4E 85 F1 | 	sub	fp, #28
2bdb0                 | LR__4514
2bdb0     1C 4E 05 F1 | 	add	fp, #28
2bdb4     A7 22 02 FB | 	rdlong	local03, fp
2bdb8     1C 4E 85 F1 | 	sub	fp, #28
2bdbc     02 22 16 F2 | 	cmp	local03, #2 wc
2bdc0     1C 00 90 3D |  if_ae	jmp	#LR__4515
2bdc4     04 4E 05 F1 | 	add	fp, #4
2bdc8     A7 22 02 FB | 	rdlong	local03, fp
2bdcc     04 4E 85 F1 | 	sub	fp, #4
2bdd0     11 22 06 F1 | 	add	local03, #17
2bdd4     11 05 48 FC | 	wrbyte	#2, local03
2bdd8     02 FA 05 F6 | 	mov	result1, #2
2bddc     74 04 90 FD | 	jmp	#LR__4530
2bde0                 | LR__4515
2bde0     1C 4E 05 F1 | 	add	fp, #28
2bde4     A7 22 02 FB | 	rdlong	local03, fp
2bde8     1C 4E 85 F1 | 	sub	fp, #28
2bdec     FF FF 7F FF 
2bdf0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2bdf4     1C 00 90 5D |  if_ne	jmp	#LR__4516
2bdf8     04 4E 05 F1 | 	add	fp, #4
2bdfc     A7 22 02 FB | 	rdlong	local03, fp
2be00     04 4E 85 F1 | 	sub	fp, #4
2be04     11 22 06 F1 | 	add	local03, #17
2be08     11 03 48 FC | 	wrbyte	#1, local03
2be0c     01 FA 05 F6 | 	mov	result1, #1
2be10     40 04 90 FD | 	jmp	#LR__4530
2be14                 | LR__4516
2be14     04 4E 05 F1 | 	add	fp, #4
2be18     A7 22 02 FB | 	rdlong	local03, fp
2be1c     18 4E 05 F1 | 	add	fp, #24
2be20     A7 2C 02 FB | 	rdlong	local08, fp
2be24     1C 4E 85 F1 | 	sub	fp, #28
2be28     18 22 06 F1 | 	add	local03, #24
2be2c     11 2D 62 FC | 	wrlong	local08, local03
2be30                 | LR__4517
2be30     18 4E 05 F1 | 	add	fp, #24
2be34     A7 12 02 FB | 	rdlong	arg01, fp
2be38     14 4E 85 F1 | 	sub	fp, #20
2be3c     A7 22 02 FB | 	rdlong	local03, fp
2be40     04 4E 85 F1 | 	sub	fp, #4
2be44     18 22 06 F1 | 	add	local03, #24
2be48     11 15 02 FB | 	rdlong	arg02, local03
2be4c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2be50     20 4E 05 F1 | 	add	fp, #32
2be54     A7 FA 61 FC | 	wrlong	result1, fp
2be58     20 4E 85 F1 | 	sub	fp, #32
2be5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2be60     1C 00 90 5D |  if_ne	jmp	#LR__4518
2be64     04 4E 05 F1 | 	add	fp, #4
2be68     A7 22 02 FB | 	rdlong	local03, fp
2be6c     04 4E 85 F1 | 	sub	fp, #4
2be70     11 22 06 F1 | 	add	local03, #17
2be74     11 05 48 FC | 	wrbyte	#2, local03
2be78     02 FA 05 F6 | 	mov	result1, #2
2be7c     D4 03 90 FD | 	jmp	#LR__4530
2be80                 | LR__4518
2be80     20 4E 05 F1 | 	add	fp, #32
2be84     A7 22 02 FB | 	rdlong	local03, fp
2be88     10 4E 05 F1 | 	add	fp, #16
2be8c     A7 2C 02 FB | 	rdlong	local08, fp
2be90     16 23 02 F1 | 	add	local03, local08
2be94     10 4E 85 F1 | 	sub	fp, #16
2be98     A7 22 62 FC | 	wrlong	local03, fp
2be9c     14 4E 85 F1 | 	sub	fp, #20
2bea0     A7 22 02 FB | 	rdlong	local03, fp
2bea4     09 22 46 F0 | 	shr	local03, #9
2bea8     20 4E 05 F1 | 	add	fp, #32
2beac     A7 22 62 FC | 	wrlong	local03, fp
2beb0     2C 4E 85 F1 | 	sub	fp, #44
2beb4     01 22 16 F2 | 	cmp	local03, #1 wc
2beb8     5C 01 90 CD |  if_b	jmp	#LR__4522
2bebc     30 4E 05 F1 | 	add	fp, #48
2bec0     A7 22 02 FB | 	rdlong	local03, fp
2bec4     04 4E 85 F1 | 	sub	fp, #4
2bec8     A7 2C 02 FB | 	rdlong	local08, fp
2becc     16 23 02 F1 | 	add	local03, local08
2bed0     14 4E 85 F1 | 	sub	fp, #20
2bed4     A7 2C 02 FB | 	rdlong	local08, fp
2bed8     18 4E 85 F1 | 	sub	fp, #24
2bedc     0A 2C 06 F1 | 	add	local08, #10
2bee0     16 2D E2 FA | 	rdword	local08, local08
2bee4     16 23 1A F2 | 	cmp	local03, local08 wcz
2bee8     28 00 90 ED |  if_be	jmp	#LR__4519
2beec     18 4E 05 F1 | 	add	fp, #24
2bef0     A7 1E 02 FB | 	rdlong	local01, fp
2bef4     0A 1E 06 F1 | 	add	local01, #10
2bef8     0F 23 E2 FA | 	rdword	local03, local01
2befc     18 4E 05 F1 | 	add	fp, #24
2bf00     A7 2C 02 FB | 	rdlong	local08, fp
2bf04     16 23 82 F1 | 	sub	local03, local08
2bf08     04 4E 85 F1 | 	sub	fp, #4
2bf0c     A7 22 62 FC | 	wrlong	local03, fp
2bf10     2C 4E 85 F1 | 	sub	fp, #44
2bf14                 | LR__4519
2bf14     18 4E 05 F1 | 	add	fp, #24
2bf18     A7 1E 02 FB | 	rdlong	local01, fp
2bf1c     01 1E 06 F1 | 	add	local01, #1
2bf20     0F 13 C2 FA | 	rdbyte	arg01, local01
2bf24     1C 4E 05 F1 | 	add	fp, #28
2bf28     A7 14 02 FB | 	rdlong	arg02, fp
2bf2c     14 4E 85 F1 | 	sub	fp, #20
2bf30     A7 16 02 FB | 	rdlong	arg03, fp
2bf34     0C 4E 05 F1 | 	add	fp, #12
2bf38     A7 18 02 FB | 	rdlong	arg04, fp
2bf3c     2C 4E 85 F1 | 	sub	fp, #44
2bf40     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2bf44     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf48     1C 00 90 AD |  if_e	jmp	#LR__4520
2bf4c     04 4E 05 F1 | 	add	fp, #4
2bf50     A7 22 02 FB | 	rdlong	local03, fp
2bf54     04 4E 85 F1 | 	sub	fp, #4
2bf58     11 22 06 F1 | 	add	local03, #17
2bf5c     11 03 48 FC | 	wrbyte	#1, local03
2bf60     01 FA 05 F6 | 	mov	result1, #1
2bf64     EC 02 90 FD | 	jmp	#LR__4530
2bf68                 | LR__4520
2bf68     04 4E 05 F1 | 	add	fp, #4
2bf6c     A7 1E 02 FB | 	rdlong	local01, fp
2bf70     04 4E 85 F1 | 	sub	fp, #4
2bf74     10 1E 06 F1 | 	add	local01, #16
2bf78     0F 23 C2 FA | 	rdbyte	local03, local01
2bf7c     80 22 CE F7 | 	test	local03, #128 wz
2bf80     78 00 90 AD |  if_e	jmp	#LR__4521
2bf84     04 4E 05 F1 | 	add	fp, #4
2bf88     A7 2C 02 FB | 	rdlong	local08, fp
2bf8c     1C 2C 06 F1 | 	add	local08, #28
2bf90     16 2D 02 FB | 	rdlong	local08, local08
2bf94     1C 4E 05 F1 | 	add	fp, #28
2bf98     A7 2E 02 FB | 	rdlong	local09, fp
2bf9c     17 2D 82 F1 | 	sub	local08, local09
2bfa0     0C 4E 05 F1 | 	add	fp, #12
2bfa4     A7 30 02 FB | 	rdlong	local10, fp
2bfa8     2C 4E 85 F1 | 	sub	fp, #44
2bfac     18 33 02 F6 | 	mov	local11, local10
2bfb0     19 2D 12 F2 | 	cmp	local08, local11 wc
2bfb4     44 00 90 3D |  if_ae	jmp	#LR__4521
2bfb8     34 4E 05 F1 | 	add	fp, #52
2bfbc     A7 12 02 FB | 	rdlong	arg01, fp
2bfc0     30 4E 85 F1 | 	sub	fp, #48
2bfc4     A7 14 02 FB | 	rdlong	arg02, fp
2bfc8     0A 33 02 F6 | 	mov	local11, arg02
2bfcc     1C 32 06 F1 | 	add	local11, #28
2bfd0     19 2F 02 FB | 	rdlong	local09, local11
2bfd4     1C 4E 05 F1 | 	add	fp, #28
2bfd8     A7 26 02 FB | 	rdlong	local05, fp
2bfdc     13 2F 82 F1 | 	sub	local09, local05
2bfe0     09 2E 66 F0 | 	shl	local09, #9
2bfe4     17 33 02 F6 | 	mov	local11, local09
2bfe8     17 13 02 F1 | 	add	arg01, local09
2bfec     20 4E 85 F1 | 	sub	fp, #32
2bff0     28 14 06 F1 | 	add	arg02, #40
2bff4     09 16 C6 F9 | 	decod	arg03, #9
2bff8     4C 46 BF FD | 	call	#__system____builtin_memmove
2bffc                 | LR__4521
2bffc     2C 4E 05 F1 | 	add	fp, #44
2c000     A7 22 02 FB | 	rdlong	local03, fp
2c004     09 22 66 F0 | 	shl	local03, #9
2c008     04 4E 85 F1 | 	sub	fp, #4
2c00c     A7 22 62 FC | 	wrlong	local03, fp
2c010     28 4E 85 F1 | 	sub	fp, #40
2c014                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c014                 | ' 				}
2c014                 | ' 
2c014                 | ' 
2c014                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c014                 | ' 				continue;
2c014     B4 01 90 FD | 	jmp	#LR__4528
2c018                 | LR__4522
2c018     04 4E 05 F1 | 	add	fp, #4
2c01c     A7 22 02 FB | 	rdlong	local03, fp
2c020     1C 22 06 F1 | 	add	local03, #28
2c024     11 23 02 FB | 	rdlong	local03, local03
2c028     1C 4E 05 F1 | 	add	fp, #28
2c02c     A7 1E 02 FB | 	rdlong	local01, fp
2c030     20 4E 85 F1 | 	sub	fp, #32
2c034     0F 23 0A F2 | 	cmp	local03, local01 wz
2c038     EC 00 90 AD |  if_e	jmp	#LR__4526
2c03c     04 4E 05 F1 | 	add	fp, #4
2c040     A7 1E 02 FB | 	rdlong	local01, fp
2c044     04 4E 85 F1 | 	sub	fp, #4
2c048     10 1E 06 F1 | 	add	local01, #16
2c04c     0F 23 C2 FA | 	rdbyte	local03, local01
2c050     80 22 CE F7 | 	test	local03, #128 wz
2c054     7C 00 90 AD |  if_e	jmp	#LR__4524
2c058     18 4E 05 F1 | 	add	fp, #24
2c05c     A7 1E 02 FB | 	rdlong	local01, fp
2c060     01 1E 06 F1 | 	add	local01, #1
2c064     0F 13 C2 FA | 	rdbyte	arg01, local01
2c068     14 4E 85 F1 | 	sub	fp, #20
2c06c     A7 22 02 FB | 	rdlong	local03, fp
2c070     11 15 02 F6 | 	mov	arg02, local03
2c074     28 14 06 F1 | 	add	arg02, #40
2c078     04 4E 85 F1 | 	sub	fp, #4
2c07c     1C 22 06 F1 | 	add	local03, #28
2c080     11 17 02 FB | 	rdlong	arg03, local03
2c084     01 18 06 F6 | 	mov	arg04, #1
2c088     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c090     1C 00 90 AD |  if_e	jmp	#LR__4523
2c094     04 4E 05 F1 | 	add	fp, #4
2c098     A7 22 02 FB | 	rdlong	local03, fp
2c09c     04 4E 85 F1 | 	sub	fp, #4
2c0a0     11 22 06 F1 | 	add	local03, #17
2c0a4     11 03 48 FC | 	wrbyte	#1, local03
2c0a8     01 FA 05 F6 | 	mov	result1, #1
2c0ac     A4 01 90 FD | 	jmp	#LR__4530
2c0b0                 | LR__4523
2c0b0     04 4E 05 F1 | 	add	fp, #4
2c0b4     A7 32 02 FB | 	rdlong	local11, fp
2c0b8     19 23 02 F6 | 	mov	local03, local11
2c0bc     04 4E 85 F1 | 	sub	fp, #4
2c0c0     10 32 06 F1 | 	add	local11, #16
2c0c4     19 33 C2 FA | 	rdbyte	local11, local11
2c0c8     7F 32 06 F5 | 	and	local11, #127
2c0cc     10 22 06 F1 | 	add	local03, #16
2c0d0     11 33 42 FC | 	wrbyte	local11, local03
2c0d4                 | LR__4524
2c0d4     18 4E 05 F1 | 	add	fp, #24
2c0d8     A7 1E 02 FB | 	rdlong	local01, fp
2c0dc     01 1E 06 F1 | 	add	local01, #1
2c0e0     0F 13 C2 FA | 	rdbyte	arg01, local01
2c0e4     14 4E 85 F1 | 	sub	fp, #20
2c0e8     A7 14 02 FB | 	rdlong	arg02, fp
2c0ec     28 14 06 F1 | 	add	arg02, #40
2c0f0     1C 4E 05 F1 | 	add	fp, #28
2c0f4     A7 16 02 FB | 	rdlong	arg03, fp
2c0f8     20 4E 85 F1 | 	sub	fp, #32
2c0fc     01 18 06 F6 | 	mov	arg04, #1
2c100     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c104     00 FA 0D F2 | 	cmp	result1, #0 wz
2c108     1C 00 90 AD |  if_e	jmp	#LR__4525
2c10c     04 4E 05 F1 | 	add	fp, #4
2c110     A7 22 02 FB | 	rdlong	local03, fp
2c114     04 4E 85 F1 | 	sub	fp, #4
2c118     11 22 06 F1 | 	add	local03, #17
2c11c     11 03 48 FC | 	wrbyte	#1, local03
2c120     01 FA 05 F6 | 	mov	result1, #1
2c124     2C 01 90 FD | 	jmp	#LR__4530
2c128                 | LR__4525
2c128                 | LR__4526
2c128     04 4E 05 F1 | 	add	fp, #4
2c12c     A7 22 02 FB | 	rdlong	local03, fp
2c130     1C 4E 05 F1 | 	add	fp, #28
2c134     A7 32 02 FB | 	rdlong	local11, fp
2c138     20 4E 85 F1 | 	sub	fp, #32
2c13c     1C 22 06 F1 | 	add	local03, #28
2c140     11 33 62 FC | 	wrlong	local11, local03
2c144                 | LR__4527
2c144     04 4E 05 F1 | 	add	fp, #4
2c148     A7 1E 02 FB | 	rdlong	local01, fp
2c14c     14 1E 06 F1 | 	add	local01, #20
2c150     0F 33 02 FB | 	rdlong	local11, local01
2c154     FF 33 06 F5 | 	and	local11, #511
2c158     09 22 C6 F9 | 	decod	local03, #9
2c15c     19 23 82 F1 | 	sub	local03, local11
2c160     24 4E 05 F1 | 	add	fp, #36
2c164     A7 22 62 FC | 	wrlong	local03, fp
2c168     1C 4E 85 F1 | 	sub	fp, #28
2c16c     A7 32 02 FB | 	rdlong	local11, fp
2c170     0C 4E 85 F1 | 	sub	fp, #12
2c174     19 23 1A F2 | 	cmp	local03, local11 wcz
2c178     0C 4E 05 11 |  if_a	add	fp, #12
2c17c     A7 22 02 1B |  if_a	rdlong	local03, fp
2c180     1C 4E 05 11 |  if_a	add	fp, #28
2c184     A7 22 62 1C |  if_a	wrlong	local03, fp
2c188     28 4E 85 11 |  if_a	sub	fp, #40
2c18c     34 4E 05 F1 | 	add	fp, #52
2c190     A7 12 02 FB | 	rdlong	arg01, fp
2c194     30 4E 85 F1 | 	sub	fp, #48
2c198     A7 28 02 FB | 	rdlong	local06, fp
2c19c     14 15 02 F6 | 	mov	arg02, local06
2c1a0     28 14 06 F1 | 	add	arg02, #40
2c1a4     14 28 06 F1 | 	add	local06, #20
2c1a8     14 33 02 FB | 	rdlong	local11, local06
2c1ac     19 2F 02 F6 | 	mov	local09, local11
2c1b0     17 31 02 F6 | 	mov	local10, local09
2c1b4     FF 31 06 F5 | 	and	local10, #511
2c1b8     18 15 02 F1 | 	add	arg02, local10
2c1bc     24 4E 05 F1 | 	add	fp, #36
2c1c0     A7 16 02 FB | 	rdlong	arg03, fp
2c1c4     28 4E 85 F1 | 	sub	fp, #40
2c1c8     7C 44 BF FD | 	call	#__system____builtin_memmove
2c1cc                 | LR__4528
2c1cc     0C 4E 05 F1 | 	add	fp, #12
2c1d0     A7 22 02 FB | 	rdlong	local03, fp
2c1d4     1C 4E 05 F1 | 	add	fp, #28
2c1d8     A7 2C 02 FB | 	rdlong	local08, fp
2c1dc     16 23 82 F1 | 	sub	local03, local08
2c1e0     1C 4E 85 F1 | 	sub	fp, #28
2c1e4     A7 22 62 FC | 	wrlong	local03, fp
2c1e8     04 4E 05 F1 | 	add	fp, #4
2c1ec     A7 1E 02 FB | 	rdlong	local01, fp
2c1f0     0F 2B 02 FB | 	rdlong	local07, local01
2c1f4     18 4E 05 F1 | 	add	fp, #24
2c1f8     A7 2C 02 FB | 	rdlong	local08, fp
2c1fc     16 2B 02 F1 | 	add	local07, local08
2c200     0F 2B 62 FC | 	wrlong	local07, local01
2c204     0C 4E 05 F1 | 	add	fp, #12
2c208     A7 22 02 FB | 	rdlong	local03, fp
2c20c     0C 4E 85 F1 | 	sub	fp, #12
2c210     A7 34 02 FB | 	rdlong	local12, fp
2c214     1A 23 02 F1 | 	add	local03, local12
2c218     0C 4E 05 F1 | 	add	fp, #12
2c21c     A7 22 62 FC | 	wrlong	local03, fp
2c220     30 4E 85 F1 | 	sub	fp, #48
2c224     A7 36 02 FB | 	rdlong	local13, fp
2c228     1B 23 02 F6 | 	mov	local03, local13
2c22c     14 36 06 F1 | 	add	local13, #20
2c230     1B 39 02 FB | 	rdlong	local14, local13
2c234     24 4E 05 F1 | 	add	fp, #36
2c238     A7 28 02 FB | 	rdlong	local06, fp
2c23c     28 4E 85 F1 | 	sub	fp, #40
2c240     14 39 02 F1 | 	add	local14, local06
2c244     14 22 06 F1 | 	add	local03, #20
2c248     11 39 62 FC | 	wrlong	local14, local03
2c24c     84 FA 9F FD | 	jmp	#LR__4512
2c250                 | LR__4529
2c250                 | ' 
2c250                 | ' 
2c250                 | ' 
2c250                 | ' 
2c250                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c250                 | ' 
2c250                 | ' 	}
2c250                 | ' 
2c250                 | ' 	return FR_OK ;
2c250     00 FA 05 F6 | 	mov	result1, #0
2c254                 | LR__4530
2c254     A7 F0 03 F6 | 	mov	ptra, fp
2c258     B2 00 A0 FD | 	call	#popregs_
2c25c                 | _fatfs_cc_f_read_ret
2c25c     2D 00 64 FD | 	ret
2c260                 | 
2c260                 | _fatfs_cc_f_write
2c260     15 4A 05 F6 | 	mov	COUNT_, #21
2c264     A8 00 A0 FD | 	call	#pushregs_
2c268     34 F0 07 F1 | 	add	ptra, #52
2c26c     04 4E 05 F1 | 	add	fp, #4
2c270     A7 12 62 FC | 	wrlong	arg01, fp
2c274     04 4E 05 F1 | 	add	fp, #4
2c278     A7 14 62 FC | 	wrlong	arg02, fp
2c27c     04 4E 05 F1 | 	add	fp, #4
2c280     A7 16 62 FC | 	wrlong	arg03, fp
2c284     04 4E 05 F1 | 	add	fp, #4
2c288     A7 18 62 FC | 	wrlong	arg04, fp
2c28c     08 4E 85 F1 | 	sub	fp, #8
2c290     A7 FA 01 FB | 	rdlong	result1, fp
2c294     28 4E 05 F1 | 	add	fp, #40
2c298     A7 FA 61 FC | 	wrlong	result1, fp
2c29c     20 4E 85 F1 | 	sub	fp, #32
2c2a0     A7 FA 01 FB | 	rdlong	result1, fp
2c2a4     FD 00 68 FC | 	wrlong	#0, result1
2c2a8     0C 4E 85 F1 | 	sub	fp, #12
2c2ac     A7 12 02 FB | 	rdlong	arg01, fp
2c2b0     14 4E 05 F1 | 	add	fp, #20
2c2b4     A7 14 02 F6 | 	mov	arg02, fp
2c2b8     18 4E 85 F1 | 	sub	fp, #24
2c2bc     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c2c0     14 4E 05 F1 | 	add	fp, #20
2c2c4     A7 FA 61 FC | 	wrlong	result1, fp
2c2c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2c2cc     14 4E 85 F1 | 	sub	fp, #20
2c2d0     20 00 90 5D |  if_ne	jmp	#LR__4540
2c2d4     04 4E 05 F1 | 	add	fp, #4
2c2d8     A7 14 02 FB | 	rdlong	arg02, fp
2c2dc     11 14 06 F1 | 	add	arg02, #17
2c2e0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c2e4     10 4E 05 F1 | 	add	fp, #16
2c2e8     A7 14 62 FC | 	wrlong	arg02, fp
2c2ec     14 4E 85 F1 | 	sub	fp, #20
2c2f0     10 00 90 AD |  if_e	jmp	#LR__4541
2c2f4                 | LR__4540
2c2f4     14 4E 05 F1 | 	add	fp, #20
2c2f8     A7 FA 01 FB | 	rdlong	result1, fp
2c2fc     14 4E 85 F1 | 	sub	fp, #20
2c300     44 07 90 FD | 	jmp	#LR__4563
2c304                 | LR__4541
2c304     04 4E 05 F1 | 	add	fp, #4
2c308     A7 14 02 FB | 	rdlong	arg02, fp
2c30c     04 4E 85 F1 | 	sub	fp, #4
2c310     10 14 06 F1 | 	add	arg02, #16
2c314     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c318     02 14 CE F7 | 	test	arg02, #2 wz
2c31c     07 FA 05 A6 |  if_e	mov	result1, #7
2c320     24 07 90 AD |  if_e	jmp	#LR__4563
2c324     04 4E 05 F1 | 	add	fp, #4
2c328     A7 14 02 FB | 	rdlong	arg02, fp
2c32c     0A 13 02 F6 | 	mov	arg01, arg02
2c330     14 12 06 F1 | 	add	arg01, #20
2c334     09 13 02 FB | 	rdlong	arg01, arg01
2c338     08 4E 05 F1 | 	add	fp, #8
2c33c     A7 FA 01 FB | 	rdlong	result1, fp
2c340     FD 12 02 F1 | 	add	arg01, result1
2c344     0C 4E 85 F1 | 	sub	fp, #12
2c348     14 14 06 F1 | 	add	arg02, #20
2c34c     0A FB 01 FB | 	rdlong	result1, arg02
2c350     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c354     24 00 90 3D |  if_ae	jmp	#LR__4542
2c358     04 4E 05 F1 | 	add	fp, #4
2c35c     A7 14 02 FB | 	rdlong	arg02, fp
2c360     01 FA 65 F6 | 	neg	result1, #1
2c364     14 14 06 F1 | 	add	arg02, #20
2c368     0A 15 02 FB | 	rdlong	arg02, arg02
2c36c     0A FB 81 F1 | 	sub	result1, arg02
2c370     08 4E 05 F1 | 	add	fp, #8
2c374     A7 FA 61 FC | 	wrlong	result1, fp
2c378     0C 4E 85 F1 | 	sub	fp, #12
2c37c                 | LR__4542
2c37c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c37c                 | ' 	}
2c37c                 | ' 
2c37c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c37c                 | LR__4543
2c37c     0C 4E 05 F1 | 	add	fp, #12
2c380     A7 FA 01 FB | 	rdlong	result1, fp
2c384     0C 4E 85 F1 | 	sub	fp, #12
2c388     01 FA 15 F2 | 	cmp	result1, #1 wc
2c38c     90 06 90 CD |  if_b	jmp	#LR__4562
2c390     04 4E 05 F1 | 	add	fp, #4
2c394     A7 FA 01 FB | 	rdlong	result1, fp
2c398     04 4E 85 F1 | 	sub	fp, #4
2c39c     14 FA 05 F1 | 	add	result1, #20
2c3a0     FD FA 01 FB | 	rdlong	result1, result1
2c3a4     FF FB CD F7 | 	test	result1, #511 wz
2c3a8     D8 04 90 5D |  if_ne	jmp	#LR__4558
2c3ac     04 4E 05 F1 | 	add	fp, #4
2c3b0     A7 FA 01 FB | 	rdlong	result1, fp
2c3b4     14 FA 05 F1 | 	add	result1, #20
2c3b8     FD FA 01 FB | 	rdlong	result1, result1
2c3bc     09 FA 45 F0 | 	shr	result1, #9
2c3c0     14 4E 05 F1 | 	add	fp, #20
2c3c4     A7 14 02 FB | 	rdlong	arg02, fp
2c3c8     0A 14 06 F1 | 	add	arg02, #10
2c3cc     0A 19 E2 FA | 	rdword	arg04, arg02
2c3d0     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c3d4     01 14 86 F1 | 	sub	arg02, #1
2c3d8     0A FB 09 F5 | 	and	result1, arg02 wz
2c3dc     14 4E 05 F1 | 	add	fp, #20
2c3e0     A7 FA 61 FC | 	wrlong	result1, fp
2c3e4     2C 4E 85 F1 | 	sub	fp, #44
2c3e8     44 01 90 5D |  if_ne	jmp	#LR__4549
2c3ec     04 4E 05 F1 | 	add	fp, #4
2c3f0     A7 FA 01 FB | 	rdlong	result1, fp
2c3f4     04 4E 85 F1 | 	sub	fp, #4
2c3f8     14 FA 05 F1 | 	add	result1, #20
2c3fc     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c400     44 00 90 5D |  if_ne	jmp	#LR__4544
2c404     04 4E 05 F1 | 	add	fp, #4
2c408     A7 14 02 FB | 	rdlong	arg02, fp
2c40c     08 14 06 F1 | 	add	arg02, #8
2c410     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c414     18 4E 05 F1 | 	add	fp, #24
2c418     A7 14 62 FC | 	wrlong	arg02, fp
2c41c     1C 4E 85 F1 | 	sub	fp, #28
2c420     4C 00 90 5D |  if_ne	jmp	#LR__4545
2c424     04 4E 05 F1 | 	add	fp, #4
2c428     A7 12 02 FB | 	rdlong	arg01, fp
2c42c     04 4E 85 F1 | 	sub	fp, #4
2c430     00 14 06 F6 | 	mov	arg02, #0
2c434     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c438     1C 4E 05 F1 | 	add	fp, #28
2c43c     A7 FA 61 FC | 	wrlong	result1, fp
2c440     1C 4E 85 F1 | 	sub	fp, #28
2c444     28 00 90 FD | 	jmp	#LR__4545
2c448                 | LR__4544
2c448     04 4E 05 F1 | 	add	fp, #4
2c44c     A7 18 02 FB | 	rdlong	arg04, fp
2c450     0C 13 02 F6 | 	mov	arg01, arg04
2c454     04 4E 85 F1 | 	sub	fp, #4
2c458     18 18 06 F1 | 	add	arg04, #24
2c45c     0C 15 02 FB | 	rdlong	arg02, arg04
2c460     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c464     1C 4E 05 F1 | 	add	fp, #28
2c468     A7 FA 61 FC | 	wrlong	result1, fp
2c46c     1C 4E 85 F1 | 	sub	fp, #28
2c470                 | LR__4545
2c470     1C 4E 05 F1 | 	add	fp, #28
2c474     A7 FA 09 FB | 	rdlong	result1, fp wz
2c478     1C 4E 85 F1 | 	sub	fp, #28
2c47c     A0 05 90 AD |  if_e	jmp	#LR__4562
2c480     1C 4E 05 F1 | 	add	fp, #28
2c484     A7 FA 01 FB | 	rdlong	result1, fp
2c488     1C 4E 85 F1 | 	sub	fp, #28
2c48c     01 FA 0D F2 | 	cmp	result1, #1 wz
2c490     1C 00 90 5D |  if_ne	jmp	#LR__4546
2c494     04 4E 05 F1 | 	add	fp, #4
2c498     A7 FA 01 FB | 	rdlong	result1, fp
2c49c     04 4E 85 F1 | 	sub	fp, #4
2c4a0     11 FA 05 F1 | 	add	result1, #17
2c4a4     FD 04 48 FC | 	wrbyte	#2, result1
2c4a8     02 FA 05 F6 | 	mov	result1, #2
2c4ac     98 05 90 FD | 	jmp	#LR__4563
2c4b0                 | LR__4546
2c4b0     1C 4E 05 F1 | 	add	fp, #28
2c4b4     A7 FA 01 FB | 	rdlong	result1, fp
2c4b8     1C 4E 85 F1 | 	sub	fp, #28
2c4bc     FF FF 7F FF 
2c4c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c4c4     1C 00 90 5D |  if_ne	jmp	#LR__4547
2c4c8     04 4E 05 F1 | 	add	fp, #4
2c4cc     A7 FA 01 FB | 	rdlong	result1, fp
2c4d0     04 4E 85 F1 | 	sub	fp, #4
2c4d4     11 FA 05 F1 | 	add	result1, #17
2c4d8     FD 02 48 FC | 	wrbyte	#1, result1
2c4dc     01 FA 05 F6 | 	mov	result1, #1
2c4e0     64 05 90 FD | 	jmp	#LR__4563
2c4e4                 | LR__4547
2c4e4     04 4E 05 F1 | 	add	fp, #4
2c4e8     A7 FA 01 FB | 	rdlong	result1, fp
2c4ec     18 4E 05 F1 | 	add	fp, #24
2c4f0     A7 18 02 FB | 	rdlong	arg04, fp
2c4f4     18 FA 05 F1 | 	add	result1, #24
2c4f8     FD 18 62 FC | 	wrlong	arg04, result1
2c4fc     18 4E 85 F1 | 	sub	fp, #24
2c500     A7 FA 01 FB | 	rdlong	result1, fp
2c504     04 4E 85 F1 | 	sub	fp, #4
2c508     08 FA 05 F1 | 	add	result1, #8
2c50c     FD FA 09 FB | 	rdlong	result1, result1 wz
2c510     1C 00 90 5D |  if_ne	jmp	#LR__4548
2c514     04 4E 05 F1 | 	add	fp, #4
2c518     A7 18 02 FB | 	rdlong	arg04, fp
2c51c     18 4E 05 F1 | 	add	fp, #24
2c520     A7 FA 01 FB | 	rdlong	result1, fp
2c524     1C 4E 85 F1 | 	sub	fp, #28
2c528     08 18 06 F1 | 	add	arg04, #8
2c52c     0C FB 61 FC | 	wrlong	result1, arg04
2c530                 | LR__4548
2c530                 | LR__4549
2c530     04 4E 05 F1 | 	add	fp, #4
2c534     A7 18 02 FB | 	rdlong	arg04, fp
2c538     04 4E 85 F1 | 	sub	fp, #4
2c53c     10 18 06 F1 | 	add	arg04, #16
2c540     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c544     80 18 CE F7 | 	test	arg04, #128 wz
2c548     7C 00 90 AD |  if_e	jmp	#LR__4551
2c54c     18 4E 05 F1 | 	add	fp, #24
2c550     A7 18 02 FB | 	rdlong	arg04, fp
2c554     01 18 06 F1 | 	add	arg04, #1
2c558     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c55c     14 4E 85 F1 | 	sub	fp, #20
2c560     A7 18 02 FB | 	rdlong	arg04, fp
2c564     0C 15 02 F6 | 	mov	arg02, arg04
2c568     28 14 06 F1 | 	add	arg02, #40
2c56c     04 4E 85 F1 | 	sub	fp, #4
2c570     1C 18 06 F1 | 	add	arg04, #28
2c574     0C 17 02 FB | 	rdlong	arg03, arg04
2c578     01 18 06 F6 | 	mov	arg04, #1
2c57c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c580     00 FA 0D F2 | 	cmp	result1, #0 wz
2c584     1C 00 90 AD |  if_e	jmp	#LR__4550
2c588     04 4E 05 F1 | 	add	fp, #4
2c58c     A7 FA 01 FB | 	rdlong	result1, fp
2c590     04 4E 85 F1 | 	sub	fp, #4
2c594     11 FA 05 F1 | 	add	result1, #17
2c598     FD 02 48 FC | 	wrbyte	#1, result1
2c59c     01 FA 05 F6 | 	mov	result1, #1
2c5a0     A4 04 90 FD | 	jmp	#LR__4563
2c5a4                 | LR__4550
2c5a4     04 4E 05 F1 | 	add	fp, #4
2c5a8     A7 18 02 FB | 	rdlong	arg04, fp
2c5ac     0C FB 01 F6 | 	mov	result1, arg04
2c5b0     04 4E 85 F1 | 	sub	fp, #4
2c5b4     10 18 06 F1 | 	add	arg04, #16
2c5b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c5bc     7F 18 06 F5 | 	and	arg04, #127
2c5c0     10 FA 05 F1 | 	add	result1, #16
2c5c4     FD 18 42 FC | 	wrbyte	arg04, result1
2c5c8                 | LR__4551
2c5c8     18 4E 05 F1 | 	add	fp, #24
2c5cc     A7 12 02 FB | 	rdlong	arg01, fp
2c5d0     14 4E 85 F1 | 	sub	fp, #20
2c5d4     A7 14 02 FB | 	rdlong	arg02, fp
2c5d8     04 4E 85 F1 | 	sub	fp, #4
2c5dc     18 14 06 F1 | 	add	arg02, #24
2c5e0     0A 15 02 FB | 	rdlong	arg02, arg02
2c5e4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c5e8     20 4E 05 F1 | 	add	fp, #32
2c5ec     A7 FA 61 FC | 	wrlong	result1, fp
2c5f0     20 4E 85 F1 | 	sub	fp, #32
2c5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5f8     1C 00 90 5D |  if_ne	jmp	#LR__4552
2c5fc     04 4E 05 F1 | 	add	fp, #4
2c600     A7 FA 01 FB | 	rdlong	result1, fp
2c604     04 4E 85 F1 | 	sub	fp, #4
2c608     11 FA 05 F1 | 	add	result1, #17
2c60c     FD 04 48 FC | 	wrbyte	#2, result1
2c610     02 FA 05 F6 | 	mov	result1, #2
2c614     30 04 90 FD | 	jmp	#LR__4563
2c618                 | LR__4552
2c618     20 4E 05 F1 | 	add	fp, #32
2c61c     A7 FA 01 FB | 	rdlong	result1, fp
2c620     0C 4E 05 F1 | 	add	fp, #12
2c624     A7 1E 02 FB | 	rdlong	local01, fp
2c628     0F FB 01 F1 | 	add	result1, local01
2c62c     0C 4E 85 F1 | 	sub	fp, #12
2c630     A7 FA 61 FC | 	wrlong	result1, fp
2c634     14 4E 85 F1 | 	sub	fp, #20
2c638     A7 FA 01 FB | 	rdlong	result1, fp
2c63c     09 FA 45 F0 | 	shr	result1, #9
2c640     1C 4E 05 F1 | 	add	fp, #28
2c644     A7 FA 61 FC | 	wrlong	result1, fp
2c648     28 4E 85 F1 | 	sub	fp, #40
2c64c     01 FA 15 F2 | 	cmp	result1, #1 wc
2c650     60 01 90 CD |  if_b	jmp	#LR__4556
2c654     2C 4E 05 F1 | 	add	fp, #44
2c658     A7 FA 01 FB | 	rdlong	result1, fp
2c65c     04 4E 85 F1 | 	sub	fp, #4
2c660     A7 18 02 FB | 	rdlong	arg04, fp
2c664     0C FB 01 F1 | 	add	result1, arg04
2c668     10 4E 85 F1 | 	sub	fp, #16
2c66c     A7 18 02 FB | 	rdlong	arg04, fp
2c670     18 4E 85 F1 | 	sub	fp, #24
2c674     0A 18 06 F1 | 	add	arg04, #10
2c678     0C 19 E2 FA | 	rdword	arg04, arg04
2c67c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c680     28 00 90 ED |  if_be	jmp	#LR__4553
2c684     18 4E 05 F1 | 	add	fp, #24
2c688     A7 FA 01 FB | 	rdlong	result1, fp
2c68c     0A FA 05 F1 | 	add	result1, #10
2c690     FD FA E1 FA | 	rdword	result1, result1
2c694     14 4E 05 F1 | 	add	fp, #20
2c698     A7 18 02 FB | 	rdlong	arg04, fp
2c69c     0C FB 81 F1 | 	sub	result1, arg04
2c6a0     04 4E 85 F1 | 	sub	fp, #4
2c6a4     A7 FA 61 FC | 	wrlong	result1, fp
2c6a8     28 4E 85 F1 | 	sub	fp, #40
2c6ac                 | LR__4553
2c6ac     18 4E 05 F1 | 	add	fp, #24
2c6b0     A7 18 02 FB | 	rdlong	arg04, fp
2c6b4     01 18 06 F1 | 	add	arg04, #1
2c6b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c6bc     18 4E 05 F1 | 	add	fp, #24
2c6c0     A7 14 02 FB | 	rdlong	arg02, fp
2c6c4     10 4E 85 F1 | 	sub	fp, #16
2c6c8     A7 16 02 FB | 	rdlong	arg03, fp
2c6cc     08 4E 05 F1 | 	add	fp, #8
2c6d0     A7 18 02 FB | 	rdlong	arg04, fp
2c6d4     28 4E 85 F1 | 	sub	fp, #40
2c6d8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6e0     1C 00 90 AD |  if_e	jmp	#LR__4554
2c6e4     04 4E 05 F1 | 	add	fp, #4
2c6e8     A7 1E 02 FB | 	rdlong	local01, fp
2c6ec     04 4E 85 F1 | 	sub	fp, #4
2c6f0     11 1E 06 F1 | 	add	local01, #17
2c6f4     0F 03 48 FC | 	wrbyte	#1, local01
2c6f8     01 FA 05 F6 | 	mov	result1, #1
2c6fc     48 03 90 FD | 	jmp	#LR__4563
2c700                 | LR__4554
2c700     04 4E 05 F1 | 	add	fp, #4
2c704     A7 FA 01 FB | 	rdlong	result1, fp
2c708     1C FA 05 F1 | 	add	result1, #28
2c70c     FD FA 01 FB | 	rdlong	result1, result1
2c710     1C 4E 05 F1 | 	add	fp, #28
2c714     A7 20 02 FB | 	rdlong	local02, fp
2c718     10 FB 81 F1 | 	sub	result1, local02
2c71c     08 4E 05 F1 | 	add	fp, #8
2c720     A7 18 02 FB | 	rdlong	arg04, fp
2c724     28 4E 85 F1 | 	sub	fp, #40
2c728     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c72c     68 00 90 3D |  if_ae	jmp	#LR__4555
2c730     04 4E 05 F1 | 	add	fp, #4
2c734     A7 12 02 FB | 	rdlong	arg01, fp
2c738     28 12 06 F1 | 	add	arg01, #40
2c73c     2C 4E 05 F1 | 	add	fp, #44
2c740     A7 14 02 FB | 	rdlong	arg02, fp
2c744     2C 4E 85 F1 | 	sub	fp, #44
2c748     A7 FA 01 FB | 	rdlong	result1, fp
2c74c     1C FA 05 F1 | 	add	result1, #28
2c750     FD 22 02 FB | 	rdlong	local03, result1
2c754     1C 4E 05 F1 | 	add	fp, #28
2c758     A7 18 02 FB | 	rdlong	arg04, fp
2c75c     20 4E 85 F1 | 	sub	fp, #32
2c760     0C 23 82 F1 | 	sub	local03, arg04
2c764     09 22 66 F0 | 	shl	local03, #9
2c768     11 15 02 F1 | 	add	arg02, local03
2c76c     09 16 C6 F9 | 	decod	arg03, #9
2c770     D4 3E BF FD | 	call	#__system____builtin_memmove
2c774     04 4E 05 F1 | 	add	fp, #4
2c778     A7 18 02 FB | 	rdlong	arg04, fp
2c77c     0C FB 01 F6 | 	mov	result1, arg04
2c780     04 4E 85 F1 | 	sub	fp, #4
2c784     10 18 06 F1 | 	add	arg04, #16
2c788     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c78c     7F 18 06 F5 | 	and	arg04, #127
2c790     10 FA 05 F1 | 	add	result1, #16
2c794     FD 18 42 FC | 	wrbyte	arg04, result1
2c798                 | LR__4555
2c798     28 4E 05 F1 | 	add	fp, #40
2c79c     A7 FA 01 FB | 	rdlong	result1, fp
2c7a0     09 FA 65 F0 | 	shl	result1, #9
2c7a4     04 4E 85 F1 | 	sub	fp, #4
2c7a8     A7 FA 61 FC | 	wrlong	result1, fp
2c7ac     24 4E 85 F1 | 	sub	fp, #36
2c7b0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c7b0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c7b0                 | ' 				}
2c7b0                 | ' 
2c7b0                 | ' 
2c7b0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c7b0                 | ' 				continue;
2c7b0     74 01 90 FD | 	jmp	#LR__4559
2c7b4                 | LR__4556
2c7b4     04 4E 05 F1 | 	add	fp, #4
2c7b8     A7 20 02 FB | 	rdlong	local02, fp
2c7bc     1C 20 06 F1 | 	add	local02, #28
2c7c0     10 FB 01 FB | 	rdlong	result1, local02
2c7c4     1C 4E 05 F1 | 	add	fp, #28
2c7c8     A7 20 02 FB | 	rdlong	local02, fp
2c7cc     20 4E 85 F1 | 	sub	fp, #32
2c7d0     10 FB 09 F2 | 	cmp	result1, local02 wz
2c7d4     90 00 90 AD |  if_e	jmp	#LR__4557
2c7d8     04 4E 05 F1 | 	add	fp, #4
2c7dc     A7 FA 01 FB | 	rdlong	result1, fp
2c7e0     FD 22 02 F6 | 	mov	local03, result1
2c7e4     04 4E 85 F1 | 	sub	fp, #4
2c7e8     14 22 06 F1 | 	add	local03, #20
2c7ec     11 23 02 FB | 	rdlong	local03, local03
2c7f0     0C FA 05 F1 | 	add	result1, #12
2c7f4     FD 24 02 FB | 	rdlong	local04, result1
2c7f8     12 27 02 F6 | 	mov	local05, local04
2c7fc     13 23 12 F2 | 	cmp	local03, local05 wc
2c800     64 00 90 3D |  if_ae	jmp	#LR__4557
2c804     18 4E 05 F1 | 	add	fp, #24
2c808     A7 18 02 FB | 	rdlong	arg04, fp
2c80c     01 18 06 F1 | 	add	arg04, #1
2c810     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c814     14 4E 85 F1 | 	sub	fp, #20
2c818     A7 28 02 FB | 	rdlong	local06, fp
2c81c     28 28 06 F1 | 	add	local06, #40
2c820     14 2B 02 F6 | 	mov	local07, local06
2c824     1C 4E 05 F1 | 	add	fp, #28
2c828     A7 2C 02 FB | 	rdlong	local08, fp
2c82c     20 4E 85 F1 | 	sub	fp, #32
2c830     01 2E 06 F6 | 	mov	local09, #1
2c834     15 15 02 F6 | 	mov	arg02, local07
2c838     16 17 02 F6 | 	mov	arg03, local08
2c83c     01 18 06 F6 | 	mov	arg04, #1
2c840     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2c844     FD 30 0A F6 | 	mov	local10, result1 wz
2c848     1C 00 90 AD |  if_e	jmp	#LR__4557
2c84c     04 4E 05 F1 | 	add	fp, #4
2c850     A7 30 02 FB | 	rdlong	local10, fp
2c854     04 4E 85 F1 | 	sub	fp, #4
2c858     11 30 06 F1 | 	add	local10, #17
2c85c     18 03 48 FC | 	wrbyte	#1, local10
2c860                 | ' 				fp->fptr < fp->obj.objsize &&
2c860                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2c860                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2c860     01 FA 05 F6 | 	mov	result1, #1
2c864     E0 01 90 FD | 	jmp	#LR__4563
2c868                 | LR__4557
2c868     04 4E 05 F1 | 	add	fp, #4
2c86c     A7 18 02 FB | 	rdlong	arg04, fp
2c870     1C 4E 05 F1 | 	add	fp, #28
2c874     A7 FA 01 FB | 	rdlong	result1, fp
2c878     20 4E 85 F1 | 	sub	fp, #32
2c87c     1C 18 06 F1 | 	add	arg04, #28
2c880     0C FB 61 FC | 	wrlong	result1, arg04
2c884                 | LR__4558
2c884     04 4E 05 F1 | 	add	fp, #4
2c888     A7 FA 01 FB | 	rdlong	result1, fp
2c88c     14 FA 05 F1 | 	add	result1, #20
2c890     FD FA 01 FB | 	rdlong	result1, result1
2c894     FF FB 05 F5 | 	and	result1, #511
2c898     09 32 C6 F9 | 	decod	local11, #9
2c89c     FD 32 82 F1 | 	sub	local11, result1
2c8a0     20 4E 05 F1 | 	add	fp, #32
2c8a4     A7 32 62 FC | 	wrlong	local11, fp
2c8a8     18 4E 85 F1 | 	sub	fp, #24
2c8ac     A7 FA 01 FB | 	rdlong	result1, fp
2c8b0     0C 4E 85 F1 | 	sub	fp, #12
2c8b4     FD 32 1A F2 | 	cmp	local11, result1 wcz
2c8b8     0C 4E 05 11 |  if_a	add	fp, #12
2c8bc     A7 32 02 1B |  if_a	rdlong	local11, fp
2c8c0     18 4E 05 11 |  if_a	add	fp, #24
2c8c4     A7 32 62 1C |  if_a	wrlong	local11, fp
2c8c8     24 4E 85 11 |  if_a	sub	fp, #36
2c8cc     04 4E 05 F1 | 	add	fp, #4
2c8d0     A7 32 02 FB | 	rdlong	local11, fp
2c8d4     19 13 02 F6 | 	mov	arg01, local11
2c8d8     28 12 06 F1 | 	add	arg01, #40
2c8dc     14 32 06 F1 | 	add	local11, #20
2c8e0     19 33 02 FB | 	rdlong	local11, local11
2c8e4     FF 33 06 F5 | 	and	local11, #511
2c8e8     19 13 02 F1 | 	add	arg01, local11
2c8ec     2C 4E 05 F1 | 	add	fp, #44
2c8f0     A7 14 02 FB | 	rdlong	arg02, fp
2c8f4     0C 4E 85 F1 | 	sub	fp, #12
2c8f8     A7 16 02 FB | 	rdlong	arg03, fp
2c8fc     24 4E 85 F1 | 	sub	fp, #36
2c900     44 3D BF FD | 	call	#__system____builtin_memmove
2c904     04 4E 05 F1 | 	add	fp, #4
2c908     A7 FA 01 FB | 	rdlong	result1, fp
2c90c     FD 32 02 F6 | 	mov	local11, result1
2c910     04 4E 85 F1 | 	sub	fp, #4
2c914     10 FA 05 F1 | 	add	result1, #16
2c918     FD FA C1 FA | 	rdbyte	result1, result1
2c91c     80 FA 45 F5 | 	or	result1, #128
2c920     10 32 06 F1 | 	add	local11, #16
2c924     19 FB 41 FC | 	wrbyte	result1, local11
2c928                 | LR__4559
2c928     0C 4E 05 F1 | 	add	fp, #12
2c92c     A7 32 02 FB | 	rdlong	local11, fp
2c930     18 4E 05 F1 | 	add	fp, #24
2c934     A7 FA 01 FB | 	rdlong	result1, fp
2c938     FD 32 82 F1 | 	sub	local11, result1
2c93c     18 4E 85 F1 | 	sub	fp, #24
2c940     A7 32 62 FC | 	wrlong	local11, fp
2c944     04 4E 05 F1 | 	add	fp, #4
2c948     A7 34 02 FB | 	rdlong	local12, fp
2c94c     1A 33 02 FB | 	rdlong	local11, local12
2c950     14 4E 05 F1 | 	add	fp, #20
2c954     A7 36 02 FB | 	rdlong	local13, fp
2c958     1B 33 02 F1 | 	add	local11, local13
2c95c     1A 33 62 FC | 	wrlong	local11, local12
2c960     0C 4E 05 F1 | 	add	fp, #12
2c964     A7 32 02 FB | 	rdlong	local11, fp
2c968     0C 4E 85 F1 | 	sub	fp, #12
2c96c     A7 38 02 FB | 	rdlong	local14, fp
2c970     1C 33 02 F1 | 	add	local11, local14
2c974     0C 4E 05 F1 | 	add	fp, #12
2c978     A7 32 62 FC | 	wrlong	local11, fp
2c97c     2C 4E 85 F1 | 	sub	fp, #44
2c980     A7 3A 02 FB | 	rdlong	local15, fp
2c984     1D 33 02 F6 | 	mov	local11, local15
2c988     14 3A 06 F1 | 	add	local15, #20
2c98c     1D 3B 02 FB | 	rdlong	local15, local15
2c990     20 4E 05 F1 | 	add	fp, #32
2c994     A7 3C 02 FB | 	rdlong	local16, fp
2c998     1E 3B 02 F1 | 	add	local15, local16
2c99c     14 32 06 F1 | 	add	local11, #20
2c9a0     19 3B 62 FC | 	wrlong	local15, local11
2c9a4     20 4E 85 F1 | 	sub	fp, #32
2c9a8     A7 3E 02 FB | 	rdlong	local17, fp
2c9ac     1F 33 02 F6 | 	mov	local11, local17
2c9b0     1F 41 02 F6 | 	mov	local18, local17
2c9b4     04 4E 85 F1 | 	sub	fp, #4
2c9b8     14 3E 06 F1 | 	add	local17, #20
2c9bc     1F 43 02 FB | 	rdlong	local19, local17
2c9c0     0C 40 06 F1 | 	add	local18, #12
2c9c4     20 45 02 FB | 	rdlong	local20, local18
2c9c8     22 43 1A F2 | 	cmp	local19, local20 wcz
2c9cc     24 00 90 ED |  if_be	jmp	#LR__4560
2c9d0     04 4E 05 F1 | 	add	fp, #4
2c9d4     A7 26 02 FB | 	rdlong	local05, fp
2c9d8     04 4E 85 F1 | 	sub	fp, #4
2c9dc     13 23 02 F6 | 	mov	local03, local05
2c9e0     14 22 06 F1 | 	add	local03, #20
2c9e4     11 25 02 FB | 	rdlong	local04, local03
2c9e8     14 22 86 F1 | 	sub	local03, #20
2c9ec     12 47 02 F6 | 	mov	local21, local04
2c9f0     20 00 90 FD | 	jmp	#LR__4561
2c9f4                 | LR__4560
2c9f4     04 4E 05 F1 | 	add	fp, #4
2c9f8     A7 2A 02 FB | 	rdlong	local07, fp
2c9fc     04 4E 85 F1 | 	sub	fp, #4
2ca00     15 31 02 F6 | 	mov	local10, local07
2ca04     0C 30 06 F1 | 	add	local10, #12
2ca08     18 2D 02 FB | 	rdlong	local08, local10
2ca0c     0C 30 86 F1 | 	sub	local10, #12
2ca10     16 47 02 F6 | 	mov	local21, local08
2ca14                 | LR__4561
2ca14     0C 32 06 F1 | 	add	local11, #12
2ca18     19 47 62 FC | 	wrlong	local21, local11
2ca1c     5C F9 9F FD | 	jmp	#LR__4543
2ca20                 | LR__4562
2ca20     04 4E 05 F1 | 	add	fp, #4
2ca24     A7 34 02 FB | 	rdlong	local12, fp
2ca28     1A 1F 02 F6 | 	mov	local01, local12
2ca2c     04 4E 85 F1 | 	sub	fp, #4
2ca30     10 34 06 F1 | 	add	local12, #16
2ca34     1A 33 C2 FA | 	rdbyte	local11, local12
2ca38     40 32 46 F5 | 	or	local11, #64
2ca3c     10 1E 06 F1 | 	add	local01, #16
2ca40     0F 33 42 FC | 	wrbyte	local11, local01
2ca44                 | ' 
2ca44                 | ' 
2ca44                 | ' 
2ca44                 | ' 
2ca44                 | ' 
2ca44                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ca44                 | ' 		fp->flag |=  0x80 ;
2ca44                 | ' 
2ca44                 | ' 	}
2ca44                 | ' 
2ca44                 | ' 	fp->flag |=  0x40 ;
2ca44                 | ' 
2ca44                 | ' 	return FR_OK ;
2ca44     00 FA 05 F6 | 	mov	result1, #0
2ca48                 | LR__4563
2ca48     A7 F0 03 F6 | 	mov	ptra, fp
2ca4c     B2 00 A0 FD | 	call	#popregs_
2ca50                 | _fatfs_cc_f_write_ret
2ca50     2D 00 64 FD | 	ret
2ca54                 | 
2ca54                 | _fatfs_cc_f_sync
2ca54     00 4A 05 F6 | 	mov	COUNT_, #0
2ca58     A8 00 A0 FD | 	call	#pushregs_
2ca5c     18 F0 07 F1 | 	add	ptra, #24
2ca60     04 4E 05 F1 | 	add	fp, #4
2ca64     A7 12 62 FC | 	wrlong	arg01, fp
2ca68     08 4E 05 F1 | 	add	fp, #8
2ca6c     A7 14 02 F6 | 	mov	arg02, fp
2ca70     0C 4E 85 F1 | 	sub	fp, #12
2ca74     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ca78     08 4E 05 F1 | 	add	fp, #8
2ca7c     A7 FA 61 FC | 	wrlong	result1, fp
2ca80     08 4E 85 F1 | 	sub	fp, #8
2ca84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca88     C0 01 90 5D |  if_ne	jmp	#LR__4573
2ca8c     04 4E 05 F1 | 	add	fp, #4
2ca90     A7 18 02 FB | 	rdlong	arg04, fp
2ca94     04 4E 85 F1 | 	sub	fp, #4
2ca98     10 18 06 F1 | 	add	arg04, #16
2ca9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2caa0     40 18 CE F7 | 	test	arg04, #64 wz
2caa4     A4 01 90 AD |  if_e	jmp	#LR__4572
2caa8     04 4E 05 F1 | 	add	fp, #4
2caac     A7 18 02 FB | 	rdlong	arg04, fp
2cab0     04 4E 85 F1 | 	sub	fp, #4
2cab4     10 18 06 F1 | 	add	arg04, #16
2cab8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cabc     80 18 CE F7 | 	test	arg04, #128 wz
2cac0     64 00 90 AD |  if_e	jmp	#LR__4570
2cac4     0C 4E 05 F1 | 	add	fp, #12
2cac8     A7 18 02 FB | 	rdlong	arg04, fp
2cacc     01 18 06 F1 | 	add	arg04, #1
2cad0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cad4     08 4E 85 F1 | 	sub	fp, #8
2cad8     A7 18 02 FB | 	rdlong	arg04, fp
2cadc     0C 15 02 F6 | 	mov	arg02, arg04
2cae0     28 14 06 F1 | 	add	arg02, #40
2cae4     04 4E 85 F1 | 	sub	fp, #4
2cae8     1C 18 06 F1 | 	add	arg04, #28
2caec     0C 17 02 FB | 	rdlong	arg03, arg04
2caf0     01 18 06 F6 | 	mov	arg04, #1
2caf4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2caf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cafc     01 FA 05 56 |  if_ne	mov	result1, #1
2cb00     54 01 90 5D |  if_ne	jmp	#LR__4574
2cb04     04 4E 05 F1 | 	add	fp, #4
2cb08     A7 18 02 FB | 	rdlong	arg04, fp
2cb0c     0C 17 02 F6 | 	mov	arg03, arg04
2cb10     04 4E 85 F1 | 	sub	fp, #4
2cb14     10 18 06 F1 | 	add	arg04, #16
2cb18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb1c     7F 18 06 F5 | 	and	arg04, #127
2cb20     10 16 06 F1 | 	add	arg03, #16
2cb24     0B 19 42 FC | 	wrbyte	arg04, arg03
2cb28                 | LR__4570
2cb28     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cb2c     10 4E 05 F1 | 	add	fp, #16
2cb30     A7 FA 61 FC | 	wrlong	result1, fp
2cb34     04 4E 85 F1 | 	sub	fp, #4
2cb38     A7 12 02 FB | 	rdlong	arg01, fp
2cb3c     08 4E 85 F1 | 	sub	fp, #8
2cb40     A7 18 02 FB | 	rdlong	arg04, fp
2cb44     04 4E 85 F1 | 	sub	fp, #4
2cb48     20 18 06 F1 | 	add	arg04, #32
2cb4c     0C 15 02 FB | 	rdlong	arg02, arg04
2cb50     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cb54     08 4E 05 F1 | 	add	fp, #8
2cb58     A7 FA 61 FC | 	wrlong	result1, fp
2cb5c     08 4E 85 F1 | 	sub	fp, #8
2cb60     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb64     E4 00 90 5D |  if_ne	jmp	#LR__4571
2cb68     04 4E 05 F1 | 	add	fp, #4
2cb6c     A7 18 02 FB | 	rdlong	arg04, fp
2cb70     24 18 06 F1 | 	add	arg04, #36
2cb74     0C 19 02 FB | 	rdlong	arg04, arg04
2cb78     10 4E 05 F1 | 	add	fp, #16
2cb7c     A7 18 62 FC | 	wrlong	arg04, fp
2cb80     0C 17 02 F6 | 	mov	arg03, arg04
2cb84     0B 16 06 F1 | 	add	arg03, #11
2cb88     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cb8c     20 16 46 F5 | 	or	arg03, #32
2cb90     0B 18 06 F1 | 	add	arg04, #11
2cb94     0C 17 42 FC | 	wrbyte	arg03, arg04
2cb98     10 4E 85 F1 | 	sub	fp, #16
2cb9c     A7 18 02 FB | 	rdlong	arg04, fp
2cba0     0C 13 02 FB | 	rdlong	arg01, arg04
2cba4     10 4E 05 F1 | 	add	fp, #16
2cba8     A7 14 02 FB | 	rdlong	arg02, fp
2cbac     14 4E 85 F1 | 	sub	fp, #20
2cbb0     08 18 06 F1 | 	add	arg04, #8
2cbb4     0C 17 02 FB | 	rdlong	arg03, arg04
2cbb8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cbbc     14 4E 05 F1 | 	add	fp, #20
2cbc0     A7 12 02 FB | 	rdlong	arg01, fp
2cbc4     1C 12 06 F1 | 	add	arg01, #28
2cbc8     10 4E 85 F1 | 	sub	fp, #16
2cbcc     A7 18 02 FB | 	rdlong	arg04, fp
2cbd0     0C 18 06 F1 | 	add	arg04, #12
2cbd4     0C 15 02 FB | 	rdlong	arg02, arg04
2cbd8     09 15 62 FC | 	wrlong	arg02, arg01
2cbdc     10 4E 05 F1 | 	add	fp, #16
2cbe0     A7 12 02 FB | 	rdlong	arg01, fp
2cbe4     16 12 06 F1 | 	add	arg01, #22
2cbe8     04 4E 85 F1 | 	sub	fp, #4
2cbec     A7 14 02 FB | 	rdlong	arg02, fp
2cbf0     09 15 62 FC | 	wrlong	arg02, arg01
2cbf4     04 4E 05 F1 | 	add	fp, #4
2cbf8     A7 12 02 FB | 	rdlong	arg01, fp
2cbfc     12 12 06 F1 | 	add	arg01, #18
2cc00     09 01 58 FC | 	wrword	#0, arg01
2cc04     08 4E 85 F1 | 	sub	fp, #8
2cc08     A7 18 02 FB | 	rdlong	arg04, fp
2cc0c     03 18 06 F1 | 	add	arg04, #3
2cc10     0C 03 48 FC | 	wrbyte	#1, arg04
2cc14     A7 12 02 FB | 	rdlong	arg01, fp
2cc18     0C 4E 85 F1 | 	sub	fp, #12
2cc1c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cc20     08 4E 05 F1 | 	add	fp, #8
2cc24     A7 FA 61 FC | 	wrlong	result1, fp
2cc28     04 4E 85 F1 | 	sub	fp, #4
2cc2c     A7 18 02 FB | 	rdlong	arg04, fp
2cc30     0C 17 02 F6 | 	mov	arg03, arg04
2cc34     04 4E 85 F1 | 	sub	fp, #4
2cc38     10 18 06 F1 | 	add	arg04, #16
2cc3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cc40     BF 18 06 F5 | 	and	arg04, #191
2cc44     10 16 06 F1 | 	add	arg03, #16
2cc48     0B 19 42 FC | 	wrbyte	arg04, arg03
2cc4c                 | LR__4571
2cc4c                 | LR__4572
2cc4c                 | LR__4573
2cc4c                 | ' 					dir = fp->dir_ptr;
2cc4c                 | ' 					dir[ 11 ] |=  0x20 ;
2cc4c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cc4c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cc4c                 | ' 					st_dword(dir +  22 , tm);
2cc4c                 | ' 					st_word(dir +  18 , 0);
2cc4c                 | ' 					fs->wflag = 1;
2cc4c                 | ' 					res = sync_fs(fs);
2cc4c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cc4c                 | ' 				}
2cc4c                 | ' 			}
2cc4c                 | ' 		}
2cc4c                 | ' 	}
2cc4c                 | ' 
2cc4c                 | ' 	return res ;
2cc4c     08 4E 05 F1 | 	add	fp, #8
2cc50     A7 FA 01 FB | 	rdlong	result1, fp
2cc54     08 4E 85 F1 | 	sub	fp, #8
2cc58                 | LR__4574
2cc58     A7 F0 03 F6 | 	mov	ptra, fp
2cc5c     B2 00 A0 FD | 	call	#popregs_
2cc60                 | _fatfs_cc_f_sync_ret
2cc60     2D 00 64 FD | 	ret
2cc64                 | 
2cc64                 | _fatfs_cc_f_close
2cc64     01 4A 05 F6 | 	mov	COUNT_, #1
2cc68     A8 00 A0 FD | 	call	#pushregs_
2cc6c     10 F0 07 F1 | 	add	ptra, #16
2cc70     04 4E 05 F1 | 	add	fp, #4
2cc74     A7 12 62 FC | 	wrlong	arg01, fp
2cc78     04 4E 85 F1 | 	sub	fp, #4
2cc7c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cc80     08 4E 05 F1 | 	add	fp, #8
2cc84     A7 FA 61 FC | 	wrlong	result1, fp
2cc88     08 4E 85 F1 | 	sub	fp, #8
2cc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc90     38 00 90 5D |  if_ne	jmp	#LR__4580
2cc94     04 4E 05 F1 | 	add	fp, #4
2cc98     A7 12 02 FB | 	rdlong	arg01, fp
2cc9c     08 4E 05 F1 | 	add	fp, #8
2cca0     A7 14 02 F6 | 	mov	arg02, fp
2cca4     0C 4E 85 F1 | 	sub	fp, #12
2cca8     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ccac     08 4E 05 F1 | 	add	fp, #8
2ccb0     A7 FA 61 FC | 	wrlong	result1, fp
2ccb4     08 4E 85 F1 | 	sub	fp, #8
2ccb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccbc     04 4E 05 A1 |  if_e	add	fp, #4
2ccc0     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ccc4     04 4E 85 A1 |  if_e	sub	fp, #4
2ccc8     0F 01 68 AC |  if_e	wrlong	#0, local01
2cccc                 | LR__4580
2cccc                 | ' 
2cccc                 | ' 
2cccc                 | ' 
2cccc                 | ' 
2cccc                 | ' 			fp->obj.fs = 0;
2cccc                 | ' #line 4192 "ff.c"
2cccc                 | ' 		}
2cccc                 | ' 	}
2cccc                 | ' 	return res;
2cccc     08 4E 05 F1 | 	add	fp, #8
2ccd0     A7 FA 01 FB | 	rdlong	result1, fp
2ccd4     08 4E 85 F1 | 	sub	fp, #8
2ccd8     A7 F0 03 F6 | 	mov	ptra, fp
2ccdc     B2 00 A0 FD | 	call	#popregs_
2cce0                 | _fatfs_cc_f_close_ret
2cce0     2D 00 64 FD | 	ret
2cce4                 | 
2cce4                 | _fatfs_cc_f_lseek
2cce4     00 4A 05 F6 | 	mov	COUNT_, #0
2cce8     A8 00 A0 FD | 	call	#pushregs_
2ccec     24 F0 07 F1 | 	add	ptra, #36
2ccf0     04 4E 05 F1 | 	add	fp, #4
2ccf4     A7 12 62 FC | 	wrlong	arg01, fp
2ccf8     04 4E 05 F1 | 	add	fp, #4
2ccfc     A7 14 62 FC | 	wrlong	arg02, fp
2cd00     04 4E 85 F1 | 	sub	fp, #4
2cd04     A7 12 02 FB | 	rdlong	arg01, fp
2cd08     0C 4E 05 F1 | 	add	fp, #12
2cd0c     A7 14 02 F6 | 	mov	arg02, fp
2cd10     10 4E 85 F1 | 	sub	fp, #16
2cd14     30 E6 BF FD | 	call	#_fatfs_cc_validate
2cd18     0C 4E 05 F1 | 	add	fp, #12
2cd1c     A7 FA 61 FC | 	wrlong	result1, fp
2cd20     0C 4E 85 F1 | 	sub	fp, #12
2cd24     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd28     1C 00 90 5D |  if_ne	jmp	#LR__4590
2cd2c     04 4E 05 F1 | 	add	fp, #4
2cd30     A7 18 02 FB | 	rdlong	arg04, fp
2cd34     11 18 06 F1 | 	add	arg04, #17
2cd38     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd3c     08 4E 05 F1 | 	add	fp, #8
2cd40     A7 18 62 FC | 	wrlong	arg04, fp
2cd44     0C 4E 85 F1 | 	sub	fp, #12
2cd48                 | LR__4590
2cd48     0C 4E 05 F1 | 	add	fp, #12
2cd4c     A7 18 0A FB | 	rdlong	arg04, fp wz
2cd50     0C 4E 85 F1 | 	sub	fp, #12
2cd54     0C 4E 05 51 |  if_ne	add	fp, #12
2cd58     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2cd5c     0C 4E 85 51 |  if_ne	sub	fp, #12
2cd60     40 06 90 5D |  if_ne	jmp	#LR__4613
2cd64     04 4E 05 F1 | 	add	fp, #4
2cd68     A7 18 02 FB | 	rdlong	arg04, fp
2cd6c     04 4E 05 F1 | 	add	fp, #4
2cd70     A7 16 02 FB | 	rdlong	arg03, fp
2cd74     08 4E 85 F1 | 	sub	fp, #8
2cd78     0C 18 06 F1 | 	add	arg04, #12
2cd7c     0C 19 02 FB | 	rdlong	arg04, arg04
2cd80     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cd84     3C 00 90 ED |  if_be	jmp	#LR__4591
2cd88     04 4E 05 F1 | 	add	fp, #4
2cd8c     A7 16 02 FB | 	rdlong	arg03, fp
2cd90     04 4E 85 F1 | 	sub	fp, #4
2cd94     10 16 06 F1 | 	add	arg03, #16
2cd98     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cd9c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cda0     02 16 CE F7 | 	test	arg03, #2 wz
2cda4     1C 00 90 5D |  if_ne	jmp	#LR__4591
2cda8     04 4E 05 F1 | 	add	fp, #4
2cdac     A7 16 02 FB | 	rdlong	arg03, fp
2cdb0     0C 16 06 F1 | 	add	arg03, #12
2cdb4     0B 17 02 FB | 	rdlong	arg03, arg03
2cdb8     04 4E 05 F1 | 	add	fp, #4
2cdbc     A7 16 62 FC | 	wrlong	arg03, fp
2cdc0     08 4E 85 F1 | 	sub	fp, #8
2cdc4                 | LR__4591
2cdc4     04 4E 05 F1 | 	add	fp, #4
2cdc8     A7 16 02 FB | 	rdlong	arg03, fp
2cdcc     14 16 06 F1 | 	add	arg03, #20
2cdd0     0B 17 02 FB | 	rdlong	arg03, arg03
2cdd4     1C 4E 05 F1 | 	add	fp, #28
2cdd8     A7 16 62 FC | 	wrlong	arg03, fp
2cddc     1C 4E 85 F1 | 	sub	fp, #28
2cde0     A7 16 02 FB | 	rdlong	arg03, fp
2cde4     18 4E 05 F1 | 	add	fp, #24
2cde8     A7 00 68 FC | 	wrlong	#0, fp
2cdec     14 16 06 F1 | 	add	arg03, #20
2cdf0     0B 01 68 FC | 	wrlong	#0, arg03
2cdf4     14 4E 85 F1 | 	sub	fp, #20
2cdf8     A7 16 02 FB | 	rdlong	arg03, fp
2cdfc     08 4E 85 F1 | 	sub	fp, #8
2ce00     01 16 16 F2 | 	cmp	arg03, #1 wc
2ce04     E4 03 90 CD |  if_b	jmp	#LR__4607
2ce08     10 4E 05 F1 | 	add	fp, #16
2ce0c     A7 16 02 FB | 	rdlong	arg03, fp
2ce10     0A 16 06 F1 | 	add	arg03, #10
2ce14     0B 19 E2 FA | 	rdword	arg04, arg03
2ce18     09 18 66 F0 | 	shl	arg04, #9
2ce1c     08 4E 05 F1 | 	add	fp, #8
2ce20     A7 18 62 FC | 	wrlong	arg04, fp
2ce24     08 4E 05 F1 | 	add	fp, #8
2ce28     A7 18 02 FB | 	rdlong	arg04, fp
2ce2c     20 4E 85 F1 | 	sub	fp, #32
2ce30     01 18 16 F2 | 	cmp	arg04, #1 wc
2ce34     AC 00 90 CD |  if_b	jmp	#LR__4592
2ce38     08 4E 05 F1 | 	add	fp, #8
2ce3c     A7 18 02 FB | 	rdlong	arg04, fp
2ce40     01 18 86 F1 | 	sub	arg04, #1
2ce44     10 4E 05 F1 | 	add	fp, #16
2ce48     A7 16 02 FB | 	rdlong	arg03, fp
2ce4c     0B 19 12 FD | 	qdiv	arg04, arg03
2ce50     08 4E 05 F1 | 	add	fp, #8
2ce54     A7 FA 01 FB | 	rdlong	result1, fp
2ce58     01 FA 85 F1 | 	sub	result1, #1
2ce5c     18 18 62 FD | 	getqx	arg04
2ce60     0B FB 11 FD | 	qdiv	result1, arg03
2ce64     20 4E 85 F1 | 	sub	fp, #32
2ce68     18 16 62 FD | 	getqx	arg03
2ce6c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2ce70     70 00 90 CD |  if_b	jmp	#LR__4592
2ce74     04 4E 05 F1 | 	add	fp, #4
2ce78     A7 16 02 FB | 	rdlong	arg03, fp
2ce7c     1C 4E 05 F1 | 	add	fp, #28
2ce80     A7 FA 01 FB | 	rdlong	result1, fp
2ce84     01 FA 85 F1 | 	sub	result1, #1
2ce88     08 4E 85 F1 | 	sub	fp, #8
2ce8c     A7 18 02 FB | 	rdlong	arg04, fp
2ce90     01 18 86 F1 | 	sub	arg04, #1
2ce94     0C FB 21 F5 | 	andn	result1, arg04
2ce98     14 16 06 F1 | 	add	arg03, #20
2ce9c     0B FB 61 FC | 	wrlong	result1, arg03
2cea0     10 4E 85 F1 | 	sub	fp, #16
2cea4     A7 16 02 FB | 	rdlong	arg03, fp
2cea8     04 4E 85 F1 | 	sub	fp, #4
2ceac     A7 18 02 FB | 	rdlong	arg04, fp
2ceb0     14 18 06 F1 | 	add	arg04, #20
2ceb4     0C 19 02 FB | 	rdlong	arg04, arg04
2ceb8     0C 17 82 F1 | 	sub	arg03, arg04
2cebc     04 4E 05 F1 | 	add	fp, #4
2cec0     A7 16 62 FC | 	wrlong	arg03, fp
2cec4     04 4E 85 F1 | 	sub	fp, #4
2cec8     A7 16 02 FB | 	rdlong	arg03, fp
2cecc     18 16 06 F1 | 	add	arg03, #24
2ced0     0B 17 02 FB | 	rdlong	arg03, arg03
2ced4     10 4E 05 F1 | 	add	fp, #16
2ced8     A7 16 62 FC | 	wrlong	arg03, fp
2cedc     14 4E 85 F1 | 	sub	fp, #20
2cee0     D0 00 90 FD | 	jmp	#LR__4596
2cee4                 | LR__4592
2cee4     04 4E 05 F1 | 	add	fp, #4
2cee8     A7 16 02 FB | 	rdlong	arg03, fp
2ceec     08 16 06 F1 | 	add	arg03, #8
2cef0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2cef4     10 4E 05 F1 | 	add	fp, #16
2cef8     A7 16 62 FC | 	wrlong	arg03, fp
2cefc     14 4E 85 F1 | 	sub	fp, #20
2cf00     94 00 90 5D |  if_ne	jmp	#LR__4595
2cf04     04 4E 05 F1 | 	add	fp, #4
2cf08     A7 12 02 FB | 	rdlong	arg01, fp
2cf0c     04 4E 85 F1 | 	sub	fp, #4
2cf10     00 14 06 F6 | 	mov	arg02, #0
2cf14     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2cf18     14 4E 05 F1 | 	add	fp, #20
2cf1c     A7 FA 61 FC | 	wrlong	result1, fp
2cf20     14 4E 85 F1 | 	sub	fp, #20
2cf24     01 FA 0D F2 | 	cmp	result1, #1 wz
2cf28     1C 00 90 5D |  if_ne	jmp	#LR__4593
2cf2c     04 4E 05 F1 | 	add	fp, #4
2cf30     A7 16 02 FB | 	rdlong	arg03, fp
2cf34     04 4E 85 F1 | 	sub	fp, #4
2cf38     11 16 06 F1 | 	add	arg03, #17
2cf3c     0B 05 48 FC | 	wrbyte	#2, arg03
2cf40     02 FA 05 F6 | 	mov	result1, #2
2cf44     5C 04 90 FD | 	jmp	#LR__4613
2cf48                 | LR__4593
2cf48     14 4E 05 F1 | 	add	fp, #20
2cf4c     A7 FA 01 FB | 	rdlong	result1, fp
2cf50     14 4E 85 F1 | 	sub	fp, #20
2cf54     FF FF 7F FF 
2cf58     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2cf5c     1C 00 90 5D |  if_ne	jmp	#LR__4594
2cf60     04 4E 05 F1 | 	add	fp, #4
2cf64     A7 16 02 FB | 	rdlong	arg03, fp
2cf68     04 4E 85 F1 | 	sub	fp, #4
2cf6c     11 16 06 F1 | 	add	arg03, #17
2cf70     0B 03 48 FC | 	wrbyte	#1, arg03
2cf74     01 FA 05 F6 | 	mov	result1, #1
2cf78     28 04 90 FD | 	jmp	#LR__4613
2cf7c                 | LR__4594
2cf7c     04 4E 05 F1 | 	add	fp, #4
2cf80     A7 16 02 FB | 	rdlong	arg03, fp
2cf84     10 4E 05 F1 | 	add	fp, #16
2cf88     A7 18 02 FB | 	rdlong	arg04, fp
2cf8c     14 4E 85 F1 | 	sub	fp, #20
2cf90     08 16 06 F1 | 	add	arg03, #8
2cf94     0B 19 62 FC | 	wrlong	arg04, arg03
2cf98                 | LR__4595
2cf98     04 4E 05 F1 | 	add	fp, #4
2cf9c     A7 16 02 FB | 	rdlong	arg03, fp
2cfa0     10 4E 05 F1 | 	add	fp, #16
2cfa4     A7 18 02 FB | 	rdlong	arg04, fp
2cfa8     14 4E 85 F1 | 	sub	fp, #20
2cfac     18 16 06 F1 | 	add	arg03, #24
2cfb0     0B 19 62 FC | 	wrlong	arg04, arg03
2cfb4                 | LR__4596
2cfb4     14 4E 05 F1 | 	add	fp, #20
2cfb8     A7 16 0A FB | 	rdlong	arg03, fp wz
2cfbc     14 4E 85 F1 | 	sub	fp, #20
2cfc0     28 02 90 AD |  if_e	jmp	#LR__4606
2cfc4                 | ' 				while (ofs > bcs) {
2cfc4                 | LR__4597
2cfc4     08 4E 05 F1 | 	add	fp, #8
2cfc8     A7 18 02 FB | 	rdlong	arg04, fp
2cfcc     10 4E 05 F1 | 	add	fp, #16
2cfd0     A7 16 02 FB | 	rdlong	arg03, fp
2cfd4     18 4E 85 F1 | 	sub	fp, #24
2cfd8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2cfdc     68 01 90 ED |  if_be	jmp	#LR__4603
2cfe0     08 4E 05 F1 | 	add	fp, #8
2cfe4     A7 18 02 FB | 	rdlong	arg04, fp
2cfe8     10 4E 05 F1 | 	add	fp, #16
2cfec     A7 16 02 FB | 	rdlong	arg03, fp
2cff0     0B 19 82 F1 | 	sub	arg04, arg03
2cff4     10 4E 85 F1 | 	sub	fp, #16
2cff8     A7 18 62 FC | 	wrlong	arg04, fp
2cffc     04 4E 85 F1 | 	sub	fp, #4
2d000     A7 18 02 FB | 	rdlong	arg04, fp
2d004     0C FB 01 F6 | 	mov	result1, arg04
2d008     14 18 06 F1 | 	add	arg04, #20
2d00c     0C 19 02 FB | 	rdlong	arg04, arg04
2d010     14 4E 05 F1 | 	add	fp, #20
2d014     A7 16 02 FB | 	rdlong	arg03, fp
2d018     0B 19 02 F1 | 	add	arg04, arg03
2d01c     14 FA 05 F1 | 	add	result1, #20
2d020     FD 18 62 FC | 	wrlong	arg04, result1
2d024     14 4E 85 F1 | 	sub	fp, #20
2d028     A7 16 02 FB | 	rdlong	arg03, fp
2d02c     04 4E 85 F1 | 	sub	fp, #4
2d030     10 16 06 F1 | 	add	arg03, #16
2d034     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d038     02 16 CE F7 | 	test	arg03, #2 wz
2d03c     3C 00 90 AD |  if_e	jmp	#LR__4598
2d040     04 4E 05 F1 | 	add	fp, #4
2d044     A7 12 02 FB | 	rdlong	arg01, fp
2d048     10 4E 05 F1 | 	add	fp, #16
2d04c     A7 14 02 FB | 	rdlong	arg02, fp
2d050     14 4E 85 F1 | 	sub	fp, #20
2d054     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d058     14 4E 05 F1 | 	add	fp, #20
2d05c     A7 FA 61 FC | 	wrlong	result1, fp
2d060     00 FA 4D F2 | 	cmps	result1, #0 wz
2d064     14 4E 85 F1 | 	sub	fp, #20
2d068     08 4E 05 A1 |  if_e	add	fp, #8
2d06c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d070     08 4E 85 A1 |  if_e	sub	fp, #8
2d074                 | ' 							ofs = 0; break;
2d074     D0 00 90 AD |  if_e	jmp	#LR__4603
2d078     24 00 90 FD | 	jmp	#LR__4599
2d07c                 | LR__4598
2d07c     04 4E 05 F1 | 	add	fp, #4
2d080     A7 12 02 FB | 	rdlong	arg01, fp
2d084     10 4E 05 F1 | 	add	fp, #16
2d088     A7 14 02 FB | 	rdlong	arg02, fp
2d08c     14 4E 85 F1 | 	sub	fp, #20
2d090     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d094     14 4E 05 F1 | 	add	fp, #20
2d098     A7 FA 61 FC | 	wrlong	result1, fp
2d09c     14 4E 85 F1 | 	sub	fp, #20
2d0a0                 | LR__4599
2d0a0     14 4E 05 F1 | 	add	fp, #20
2d0a4     A7 16 02 FB | 	rdlong	arg03, fp
2d0a8     14 4E 85 F1 | 	sub	fp, #20
2d0ac     FF FF 7F FF 
2d0b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d0b4     1C 00 90 5D |  if_ne	jmp	#LR__4600
2d0b8     04 4E 05 F1 | 	add	fp, #4
2d0bc     A7 16 02 FB | 	rdlong	arg03, fp
2d0c0     04 4E 85 F1 | 	sub	fp, #4
2d0c4     11 16 06 F1 | 	add	arg03, #17
2d0c8     0B 03 48 FC | 	wrbyte	#1, arg03
2d0cc     01 FA 05 F6 | 	mov	result1, #1
2d0d0     D0 02 90 FD | 	jmp	#LR__4613
2d0d4                 | LR__4600
2d0d4     14 4E 05 F1 | 	add	fp, #20
2d0d8     A7 16 02 FB | 	rdlong	arg03, fp
2d0dc     14 4E 85 F1 | 	sub	fp, #20
2d0e0     02 16 16 F2 | 	cmp	arg03, #2 wc
2d0e4     24 00 90 CD |  if_b	jmp	#LR__4601
2d0e8     10 4E 05 F1 | 	add	fp, #16
2d0ec     A7 18 02 FB | 	rdlong	arg04, fp
2d0f0     04 4E 05 F1 | 	add	fp, #4
2d0f4     A7 16 02 FB | 	rdlong	arg03, fp
2d0f8     14 4E 85 F1 | 	sub	fp, #20
2d0fc     18 18 06 F1 | 	add	arg04, #24
2d100     0C 19 02 FB | 	rdlong	arg04, arg04
2d104     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d108     1C 00 90 CD |  if_b	jmp	#LR__4602
2d10c                 | LR__4601
2d10c     04 4E 05 F1 | 	add	fp, #4
2d110     A7 16 02 FB | 	rdlong	arg03, fp
2d114     04 4E 85 F1 | 	sub	fp, #4
2d118     11 16 06 F1 | 	add	arg03, #17
2d11c     0B 05 48 FC | 	wrbyte	#2, arg03
2d120     02 FA 05 F6 | 	mov	result1, #2
2d124     7C 02 90 FD | 	jmp	#LR__4613
2d128                 | LR__4602
2d128     04 4E 05 F1 | 	add	fp, #4
2d12c     A7 18 02 FB | 	rdlong	arg04, fp
2d130     10 4E 05 F1 | 	add	fp, #16
2d134     A7 16 02 FB | 	rdlong	arg03, fp
2d138     14 4E 85 F1 | 	sub	fp, #20
2d13c     18 18 06 F1 | 	add	arg04, #24
2d140     0C 17 62 FC | 	wrlong	arg03, arg04
2d144     7C FE 9F FD | 	jmp	#LR__4597
2d148                 | LR__4603
2d148     04 4E 05 F1 | 	add	fp, #4
2d14c     A7 16 02 FB | 	rdlong	arg03, fp
2d150     0B 13 02 F6 | 	mov	arg01, arg03
2d154     14 16 06 F1 | 	add	arg03, #20
2d158     0B 15 02 FB | 	rdlong	arg02, arg03
2d15c     04 4E 05 F1 | 	add	fp, #4
2d160     A7 16 02 FB | 	rdlong	arg03, fp
2d164     0B 15 02 F1 | 	add	arg02, arg03
2d168     14 12 06 F1 | 	add	arg01, #20
2d16c     09 15 62 FC | 	wrlong	arg02, arg01
2d170     A7 16 02 FB | 	rdlong	arg03, fp
2d174     08 4E 85 F1 | 	sub	fp, #8
2d178     FF 17 CE F7 | 	test	arg03, #511 wz
2d17c     6C 00 90 AD |  if_e	jmp	#LR__4605
2d180     10 4E 05 F1 | 	add	fp, #16
2d184     A7 12 02 FB | 	rdlong	arg01, fp
2d188     04 4E 05 F1 | 	add	fp, #4
2d18c     A7 14 02 FB | 	rdlong	arg02, fp
2d190     14 4E 85 F1 | 	sub	fp, #20
2d194     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d198     1C 4E 05 F1 | 	add	fp, #28
2d19c     A7 FA 61 FC | 	wrlong	result1, fp
2d1a0     1C 4E 85 F1 | 	sub	fp, #28
2d1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1a8     1C 00 90 5D |  if_ne	jmp	#LR__4604
2d1ac     04 4E 05 F1 | 	add	fp, #4
2d1b0     A7 16 02 FB | 	rdlong	arg03, fp
2d1b4     04 4E 85 F1 | 	sub	fp, #4
2d1b8     11 16 06 F1 | 	add	arg03, #17
2d1bc     0B 05 48 FC | 	wrbyte	#2, arg03
2d1c0     02 FA 05 F6 | 	mov	result1, #2
2d1c4     DC 01 90 FD | 	jmp	#LR__4613
2d1c8                 | LR__4604
2d1c8     1C 4E 05 F1 | 	add	fp, #28
2d1cc     A7 18 02 FB | 	rdlong	arg04, fp
2d1d0     14 4E 85 F1 | 	sub	fp, #20
2d1d4     A7 16 02 FB | 	rdlong	arg03, fp
2d1d8     09 16 46 F0 | 	shr	arg03, #9
2d1dc     0B 19 02 F1 | 	add	arg04, arg03
2d1e0     14 4E 05 F1 | 	add	fp, #20
2d1e4     A7 18 62 FC | 	wrlong	arg04, fp
2d1e8     1C 4E 85 F1 | 	sub	fp, #28
2d1ec                 | LR__4605
2d1ec                 | LR__4606
2d1ec                 | LR__4607
2d1ec     04 4E 05 F1 | 	add	fp, #4
2d1f0     A7 18 02 FB | 	rdlong	arg04, fp
2d1f4     0C 17 02 F6 | 	mov	arg03, arg04
2d1f8     04 4E 85 F1 | 	sub	fp, #4
2d1fc     14 16 06 F1 | 	add	arg03, #20
2d200     0B 17 02 FB | 	rdlong	arg03, arg03
2d204     0C 18 06 F1 | 	add	arg04, #12
2d208     0C 19 02 FB | 	rdlong	arg04, arg04
2d20c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d210     3C 00 90 ED |  if_be	jmp	#LR__4608
2d214     04 4E 05 F1 | 	add	fp, #4
2d218     A7 18 02 FB | 	rdlong	arg04, fp
2d21c     0C 17 02 F6 | 	mov	arg03, arg04
2d220     14 18 06 F1 | 	add	arg04, #20
2d224     0C 19 02 FB | 	rdlong	arg04, arg04
2d228     0C 16 06 F1 | 	add	arg03, #12
2d22c     0B 19 62 FC | 	wrlong	arg04, arg03
2d230     A7 18 02 FB | 	rdlong	arg04, fp
2d234     0C 17 02 F6 | 	mov	arg03, arg04
2d238     04 4E 85 F1 | 	sub	fp, #4
2d23c     10 18 06 F1 | 	add	arg04, #16
2d240     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d244     40 18 46 F5 | 	or	arg04, #64
2d248     10 16 06 F1 | 	add	arg03, #16
2d24c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d250                 | LR__4608
2d250     04 4E 05 F1 | 	add	fp, #4
2d254     A7 16 02 FB | 	rdlong	arg03, fp
2d258     04 4E 85 F1 | 	sub	fp, #4
2d25c     14 16 06 F1 | 	add	arg03, #20
2d260     0B 17 02 FB | 	rdlong	arg03, arg03
2d264     FF 17 CE F7 | 	test	arg03, #511 wz
2d268     2C 01 90 AD |  if_e	jmp	#LR__4612
2d26c     04 4E 05 F1 | 	add	fp, #4
2d270     A7 18 02 FB | 	rdlong	arg04, fp
2d274     18 4E 05 F1 | 	add	fp, #24
2d278     A7 16 02 FB | 	rdlong	arg03, fp
2d27c     1C 4E 85 F1 | 	sub	fp, #28
2d280     1C 18 06 F1 | 	add	arg04, #28
2d284     0C 19 02 FB | 	rdlong	arg04, arg04
2d288     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d28c     08 01 90 AD |  if_e	jmp	#LR__4612
2d290     04 4E 05 F1 | 	add	fp, #4
2d294     A7 16 02 FB | 	rdlong	arg03, fp
2d298     04 4E 85 F1 | 	sub	fp, #4
2d29c     10 16 06 F1 | 	add	arg03, #16
2d2a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d2a4     80 16 CE F7 | 	test	arg03, #128 wz
2d2a8     7C 00 90 AD |  if_e	jmp	#LR__4610
2d2ac     10 4E 05 F1 | 	add	fp, #16
2d2b0     A7 16 02 FB | 	rdlong	arg03, fp
2d2b4     01 16 06 F1 | 	add	arg03, #1
2d2b8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d2bc     0C 4E 85 F1 | 	sub	fp, #12
2d2c0     A7 16 02 FB | 	rdlong	arg03, fp
2d2c4     0B 15 02 F6 | 	mov	arg02, arg03
2d2c8     28 14 06 F1 | 	add	arg02, #40
2d2cc     04 4E 85 F1 | 	sub	fp, #4
2d2d0     1C 16 06 F1 | 	add	arg03, #28
2d2d4     0B 17 02 FB | 	rdlong	arg03, arg03
2d2d8     01 18 06 F6 | 	mov	arg04, #1
2d2dc     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2e4     1C 00 90 AD |  if_e	jmp	#LR__4609
2d2e8     04 4E 05 F1 | 	add	fp, #4
2d2ec     A7 16 02 FB | 	rdlong	arg03, fp
2d2f0     04 4E 85 F1 | 	sub	fp, #4
2d2f4     11 16 06 F1 | 	add	arg03, #17
2d2f8     0B 03 48 FC | 	wrbyte	#1, arg03
2d2fc     01 FA 05 F6 | 	mov	result1, #1
2d300     A0 00 90 FD | 	jmp	#LR__4613
2d304                 | LR__4609
2d304     04 4E 05 F1 | 	add	fp, #4
2d308     A7 18 02 FB | 	rdlong	arg04, fp
2d30c     0C 17 02 F6 | 	mov	arg03, arg04
2d310     04 4E 85 F1 | 	sub	fp, #4
2d314     10 18 06 F1 | 	add	arg04, #16
2d318     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d31c     7F 18 06 F5 | 	and	arg04, #127
2d320     10 16 06 F1 | 	add	arg03, #16
2d324     0B 19 42 FC | 	wrbyte	arg04, arg03
2d328                 | LR__4610
2d328     10 4E 05 F1 | 	add	fp, #16
2d32c     A7 16 02 FB | 	rdlong	arg03, fp
2d330     01 16 06 F1 | 	add	arg03, #1
2d334     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d338     0C 4E 85 F1 | 	sub	fp, #12
2d33c     A7 14 02 FB | 	rdlong	arg02, fp
2d340     28 14 06 F1 | 	add	arg02, #40
2d344     18 4E 05 F1 | 	add	fp, #24
2d348     A7 16 02 FB | 	rdlong	arg03, fp
2d34c     1C 4E 85 F1 | 	sub	fp, #28
2d350     01 18 06 F6 | 	mov	arg04, #1
2d354     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d358     00 FA 0D F2 | 	cmp	result1, #0 wz
2d35c     1C 00 90 AD |  if_e	jmp	#LR__4611
2d360     04 4E 05 F1 | 	add	fp, #4
2d364     A7 16 02 FB | 	rdlong	arg03, fp
2d368     04 4E 85 F1 | 	sub	fp, #4
2d36c     11 16 06 F1 | 	add	arg03, #17
2d370     0B 03 48 FC | 	wrbyte	#1, arg03
2d374     01 FA 05 F6 | 	mov	result1, #1
2d378     28 00 90 FD | 	jmp	#LR__4613
2d37c                 | LR__4611
2d37c     04 4E 05 F1 | 	add	fp, #4
2d380     A7 18 02 FB | 	rdlong	arg04, fp
2d384     18 4E 05 F1 | 	add	fp, #24
2d388     A7 16 02 FB | 	rdlong	arg03, fp
2d38c     1C 4E 85 F1 | 	sub	fp, #28
2d390     1C 18 06 F1 | 	add	arg04, #28
2d394     0C 17 62 FC | 	wrlong	arg03, arg04
2d398                 | LR__4612
2d398                 | ' 
2d398                 | ' 			fp->sect = nsect;
2d398                 | ' 		}
2d398                 | ' 	}
2d398                 | ' 
2d398                 | ' 	return res ;
2d398     0C 4E 05 F1 | 	add	fp, #12
2d39c     A7 FA 01 FB | 	rdlong	result1, fp
2d3a0     0C 4E 85 F1 | 	sub	fp, #12
2d3a4                 | LR__4613
2d3a4     A7 F0 03 F6 | 	mov	ptra, fp
2d3a8     B2 00 A0 FD | 	call	#popregs_
2d3ac                 | _fatfs_cc_f_lseek_ret
2d3ac     2D 00 64 FD | 	ret
2d3b0                 | 
2d3b0                 | _fatfs_cc_f_opendir
2d3b0     01 4A 05 F6 | 	mov	COUNT_, #1
2d3b4     A8 00 A0 FD | 	call	#pushregs_
2d3b8     14 F0 07 F1 | 	add	ptra, #20
2d3bc     04 4E 05 F1 | 	add	fp, #4
2d3c0     A7 12 62 FC | 	wrlong	arg01, fp
2d3c4     04 4E 05 F1 | 	add	fp, #4
2d3c8     A7 14 62 FC | 	wrlong	arg02, fp
2d3cc     04 4E 85 F1 | 	sub	fp, #4
2d3d0     A7 16 0A FB | 	rdlong	arg03, fp wz
2d3d4     04 4E 85 F1 | 	sub	fp, #4
2d3d8     09 FA 05 A6 |  if_e	mov	result1, #9
2d3dc     78 01 90 AD |  if_e	jmp	#LR__4626
2d3e0     08 4E 05 F1 | 	add	fp, #8
2d3e4     A7 12 02 F6 | 	mov	arg01, fp
2d3e8     08 4E 05 F1 | 	add	fp, #8
2d3ec     A7 14 02 F6 | 	mov	arg02, fp
2d3f0     10 4E 85 F1 | 	sub	fp, #16
2d3f4     00 16 06 F6 | 	mov	arg03, #0
2d3f8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d3fc     0C 4E 05 F1 | 	add	fp, #12
2d400     A7 FA 61 FC | 	wrlong	result1, fp
2d404     0C 4E 85 F1 | 	sub	fp, #12
2d408     00 FA 0D F2 | 	cmp	result1, #0 wz
2d40c     20 01 90 5D |  if_ne	jmp	#LR__4625
2d410     04 4E 05 F1 | 	add	fp, #4
2d414     A7 16 02 FB | 	rdlong	arg03, fp
2d418     0C 4E 05 F1 | 	add	fp, #12
2d41c     A7 FA 01 FB | 	rdlong	result1, fp
2d420     0B FB 61 FC | 	wrlong	result1, arg03
2d424     0C 4E 85 F1 | 	sub	fp, #12
2d428     A7 12 02 FB | 	rdlong	arg01, fp
2d42c     04 4E 05 F1 | 	add	fp, #4
2d430     A7 14 02 FB | 	rdlong	arg02, fp
2d434     08 4E 85 F1 | 	sub	fp, #8
2d438     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d43c     0C 4E 05 F1 | 	add	fp, #12
2d440     A7 FA 61 FC | 	wrlong	result1, fp
2d444     0C 4E 85 F1 | 	sub	fp, #12
2d448     00 FA 0D F2 | 	cmp	result1, #0 wz
2d44c     C4 00 90 5D |  if_ne	jmp	#LR__4624
2d450     04 4E 05 F1 | 	add	fp, #4
2d454     A7 16 02 FB | 	rdlong	arg03, fp
2d458     04 4E 85 F1 | 	sub	fp, #4
2d45c     2B 16 06 F1 | 	add	arg03, #43
2d460     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d464     80 16 CE F7 | 	test	arg03, #128 wz
2d468     58 00 90 5D |  if_ne	jmp	#LR__4622
2d46c     04 4E 05 F1 | 	add	fp, #4
2d470     A7 16 02 FB | 	rdlong	arg03, fp
2d474     04 4E 85 F1 | 	sub	fp, #4
2d478     06 16 06 F1 | 	add	arg03, #6
2d47c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d480     10 16 CE F7 | 	test	arg03, #16 wz
2d484     30 00 90 AD |  if_e	jmp	#LR__4620
2d488     04 4E 05 F1 | 	add	fp, #4
2d48c     A7 16 02 FB | 	rdlong	arg03, fp
2d490     0B 1F 02 F6 | 	mov	local01, arg03
2d494     0C 4E 05 F1 | 	add	fp, #12
2d498     A7 12 02 FB | 	rdlong	arg01, fp
2d49c     10 4E 85 F1 | 	sub	fp, #16
2d4a0     1C 16 06 F1 | 	add	arg03, #28
2d4a4     0B 15 02 FB | 	rdlong	arg02, arg03
2d4a8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d4ac     08 1E 06 F1 | 	add	local01, #8
2d4b0     0F FB 61 FC | 	wrlong	result1, local01
2d4b4     0C 00 90 FD | 	jmp	#LR__4621
2d4b8                 | LR__4620
2d4b8     0C 4E 05 F1 | 	add	fp, #12
2d4bc     A7 0A 68 FC | 	wrlong	#5, fp
2d4c0     0C 4E 85 F1 | 	sub	fp, #12
2d4c4                 | LR__4621
2d4c4                 | LR__4622
2d4c4     0C 4E 05 F1 | 	add	fp, #12
2d4c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2d4cc     0C 4E 85 F1 | 	sub	fp, #12
2d4d0     40 00 90 5D |  if_ne	jmp	#LR__4623
2d4d4     04 4E 05 F1 | 	add	fp, #4
2d4d8     A7 1E 02 FB | 	rdlong	local01, fp
2d4dc     0C 4E 05 F1 | 	add	fp, #12
2d4e0     A7 16 02 FB | 	rdlong	arg03, fp
2d4e4     06 16 06 F1 | 	add	arg03, #6
2d4e8     0B 17 E2 FA | 	rdword	arg03, arg03
2d4ec     04 1E 06 F1 | 	add	local01, #4
2d4f0     0F 17 52 FC | 	wrword	arg03, local01
2d4f4     0C 4E 85 F1 | 	sub	fp, #12
2d4f8     A7 12 02 FB | 	rdlong	arg01, fp
2d4fc     04 4E 85 F1 | 	sub	fp, #4
2d500     00 14 06 F6 | 	mov	arg02, #0
2d504     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d508     0C 4E 05 F1 | 	add	fp, #12
2d50c     A7 FA 61 FC | 	wrlong	result1, fp
2d510     0C 4E 85 F1 | 	sub	fp, #12
2d514                 | LR__4623
2d514                 | LR__4624
2d514     0C 4E 05 F1 | 	add	fp, #12
2d518     A7 1E 02 FB | 	rdlong	local01, fp
2d51c     0C 4E 85 F1 | 	sub	fp, #12
2d520     04 1E 0E F2 | 	cmp	local01, #4 wz
2d524     0C 4E 05 A1 |  if_e	add	fp, #12
2d528     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d52c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d530                 | LR__4625
2d530     0C 4E 05 F1 | 	add	fp, #12
2d534     A7 1E 0A FB | 	rdlong	local01, fp wz
2d538     0C 4E 85 F1 | 	sub	fp, #12
2d53c     04 4E 05 51 |  if_ne	add	fp, #4
2d540     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d544     04 4E 85 51 |  if_ne	sub	fp, #4
2d548     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d54c                 | ' 
2d54c                 | ' 	return res ;
2d54c     0C 4E 05 F1 | 	add	fp, #12
2d550     A7 FA 01 FB | 	rdlong	result1, fp
2d554     0C 4E 85 F1 | 	sub	fp, #12
2d558                 | LR__4626
2d558     A7 F0 03 F6 | 	mov	ptra, fp
2d55c     B2 00 A0 FD | 	call	#popregs_
2d560                 | _fatfs_cc_f_opendir_ret
2d560     2D 00 64 FD | 	ret
2d564                 | 
2d564                 | _fatfs_cc_f_closedir
2d564     00 4A 05 F6 | 	mov	COUNT_, #0
2d568     A8 00 A0 FD | 	call	#pushregs_
2d56c     10 F0 07 F1 | 	add	ptra, #16
2d570     04 4E 05 F1 | 	add	fp, #4
2d574     A7 12 62 FC | 	wrlong	arg01, fp
2d578     08 4E 05 F1 | 	add	fp, #8
2d57c     A7 14 02 F6 | 	mov	arg02, fp
2d580     0C 4E 85 F1 | 	sub	fp, #12
2d584     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d588     08 4E 05 F1 | 	add	fp, #8
2d58c     A7 FA 61 FC | 	wrlong	result1, fp
2d590     08 4E 85 F1 | 	sub	fp, #8
2d594     00 FA 0D F2 | 	cmp	result1, #0 wz
2d598     04 4E 05 A1 |  if_e	add	fp, #4
2d59c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d5a0     04 4E 85 A1 |  if_e	sub	fp, #4
2d5a4     FD 00 68 AC |  if_e	wrlong	#0, result1
2d5a8                 | ' 
2d5a8                 | ' 
2d5a8                 | ' 
2d5a8                 | ' 
2d5a8                 | ' 		dp->obj.fs = 0;
2d5a8                 | ' #line 4633 "ff.c"
2d5a8                 | ' 	}
2d5a8                 | ' 	return res;
2d5a8     08 4E 05 F1 | 	add	fp, #8
2d5ac     A7 FA 01 FB | 	rdlong	result1, fp
2d5b0     08 4E 85 F1 | 	sub	fp, #8
2d5b4     A7 F0 03 F6 | 	mov	ptra, fp
2d5b8     B2 00 A0 FD | 	call	#popregs_
2d5bc                 | _fatfs_cc_f_closedir_ret
2d5bc     2D 00 64 FD | 	ret
2d5c0                 | 
2d5c0                 | _fatfs_cc_f_readdir
2d5c0     00 4A 05 F6 | 	mov	COUNT_, #0
2d5c4     A8 00 A0 FD | 	call	#pushregs_
2d5c8     14 F0 07 F1 | 	add	ptra, #20
2d5cc     04 4E 05 F1 | 	add	fp, #4
2d5d0     A7 12 62 FC | 	wrlong	arg01, fp
2d5d4     04 4E 05 F1 | 	add	fp, #4
2d5d8     A7 14 62 FC | 	wrlong	arg02, fp
2d5dc     04 4E 85 F1 | 	sub	fp, #4
2d5e0     A7 12 02 FB | 	rdlong	arg01, fp
2d5e4     0C 4E 05 F1 | 	add	fp, #12
2d5e8     A7 14 02 F6 | 	mov	arg02, fp
2d5ec     10 4E 85 F1 | 	sub	fp, #16
2d5f0     54 DD BF FD | 	call	#_fatfs_cc_validate
2d5f4     0C 4E 05 F1 | 	add	fp, #12
2d5f8     A7 FA 61 FC | 	wrlong	result1, fp
2d5fc     0C 4E 85 F1 | 	sub	fp, #12
2d600     00 FA 0D F2 | 	cmp	result1, #0 wz
2d604     BC 00 90 5D |  if_ne	jmp	#LR__4633
2d608     08 4E 05 F1 | 	add	fp, #8
2d60c     A7 FA 09 FB | 	rdlong	result1, fp wz
2d610     08 4E 85 F1 | 	sub	fp, #8
2d614     24 00 90 5D |  if_ne	jmp	#LR__4630
2d618     04 4E 05 F1 | 	add	fp, #4
2d61c     A7 12 02 FB | 	rdlong	arg01, fp
2d620     04 4E 85 F1 | 	sub	fp, #4
2d624     00 14 06 F6 | 	mov	arg02, #0
2d628     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d62c     0C 4E 05 F1 | 	add	fp, #12
2d630     A7 FA 61 FC | 	wrlong	result1, fp
2d634     0C 4E 85 F1 | 	sub	fp, #12
2d638     88 00 90 FD | 	jmp	#LR__4632
2d63c                 | LR__4630
2d63c     04 4E 05 F1 | 	add	fp, #4
2d640     A7 12 02 FB | 	rdlong	arg01, fp
2d644     04 4E 85 F1 | 	sub	fp, #4
2d648     00 14 06 F6 | 	mov	arg02, #0
2d64c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d650     0C 4E 05 F1 | 	add	fp, #12
2d654     A7 FA 61 FC | 	wrlong	result1, fp
2d658     0C 4E 85 F1 | 	sub	fp, #12
2d65c     04 FA 0D F2 | 	cmp	result1, #4 wz
2d660     0C 4E 05 A1 |  if_e	add	fp, #12
2d664     A7 00 68 AC |  if_e	wrlong	#0, fp
2d668     0C 4E 85 A1 |  if_e	sub	fp, #12
2d66c     0C 4E 05 F1 | 	add	fp, #12
2d670     A7 FA 09 FB | 	rdlong	result1, fp wz
2d674     0C 4E 85 F1 | 	sub	fp, #12
2d678     48 00 90 5D |  if_ne	jmp	#LR__4631
2d67c     04 4E 05 F1 | 	add	fp, #4
2d680     A7 12 02 FB | 	rdlong	arg01, fp
2d684     04 4E 05 F1 | 	add	fp, #4
2d688     A7 14 02 FB | 	rdlong	arg02, fp
2d68c     08 4E 85 F1 | 	sub	fp, #8
2d690     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d694     04 4E 05 F1 | 	add	fp, #4
2d698     A7 12 02 FB | 	rdlong	arg01, fp
2d69c     04 4E 85 F1 | 	sub	fp, #4
2d6a0     00 14 06 F6 | 	mov	arg02, #0
2d6a4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d6a8     0C 4E 05 F1 | 	add	fp, #12
2d6ac     A7 FA 61 FC | 	wrlong	result1, fp
2d6b0     0C 4E 85 F1 | 	sub	fp, #12
2d6b4     04 FA 0D F2 | 	cmp	result1, #4 wz
2d6b8     0C 4E 05 A1 |  if_e	add	fp, #12
2d6bc     A7 00 68 AC |  if_e	wrlong	#0, fp
2d6c0     0C 4E 85 A1 |  if_e	sub	fp, #12
2d6c4                 | LR__4631
2d6c4                 | LR__4632
2d6c4                 | LR__4633
2d6c4                 | ' 			}
2d6c4                 | ' 			;
2d6c4                 | ' 		}
2d6c4                 | ' 	}
2d6c4                 | ' 	return res ;
2d6c4     0C 4E 05 F1 | 	add	fp, #12
2d6c8     A7 FA 01 FB | 	rdlong	result1, fp
2d6cc     0C 4E 85 F1 | 	sub	fp, #12
2d6d0     A7 F0 03 F6 | 	mov	ptra, fp
2d6d4     B2 00 A0 FD | 	call	#popregs_
2d6d8                 | _fatfs_cc_f_readdir_ret
2d6d8     2D 00 64 FD | 	ret
2d6dc                 | 
2d6dc                 | _fatfs_cc_f_stat
2d6dc     00 4A 05 F6 | 	mov	COUNT_, #0
2d6e0     A8 00 A0 FD | 	call	#pushregs_
2d6e4     40 F0 07 F1 | 	add	ptra, #64
2d6e8     04 4E 05 F1 | 	add	fp, #4
2d6ec     A7 12 62 FC | 	wrlong	arg01, fp
2d6f0     04 4E 05 F1 | 	add	fp, #4
2d6f4     A7 14 62 FC | 	wrlong	arg02, fp
2d6f8     04 4E 85 F1 | 	sub	fp, #4
2d6fc     A7 12 02 F6 | 	mov	arg01, fp
2d700     0C 4E 05 F1 | 	add	fp, #12
2d704     A7 14 02 F6 | 	mov	arg02, fp
2d708     10 4E 85 F1 | 	sub	fp, #16
2d70c     00 16 06 F6 | 	mov	arg03, #0
2d710     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d714     0C 4E 05 F1 | 	add	fp, #12
2d718     A7 FA 61 FC | 	wrlong	result1, fp
2d71c     0C 4E 85 F1 | 	sub	fp, #12
2d720     00 FA 0D F2 | 	cmp	result1, #0 wz
2d724     74 00 90 5D |  if_ne	jmp	#LR__4643
2d728     10 4E 05 F1 | 	add	fp, #16
2d72c     A7 12 02 F6 | 	mov	arg01, fp
2d730     0C 4E 85 F1 | 	sub	fp, #12
2d734     A7 14 02 FB | 	rdlong	arg02, fp
2d738     04 4E 85 F1 | 	sub	fp, #4
2d73c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d740     0C 4E 05 F1 | 	add	fp, #12
2d744     A7 FA 61 FC | 	wrlong	result1, fp
2d748     0C 4E 85 F1 | 	sub	fp, #12
2d74c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d750     48 00 90 5D |  if_ne	jmp	#LR__4642
2d754     3B 4E 05 F1 | 	add	fp, #59
2d758     A7 FA C1 FA | 	rdbyte	result1, fp
2d75c     3B 4E 85 F1 | 	sub	fp, #59
2d760     80 FA CD F7 | 	test	result1, #128 wz
2d764     0C 4E 05 51 |  if_ne	add	fp, #12
2d768     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d76c     0C 4E 85 51 |  if_ne	sub	fp, #12
2d770     28 00 90 5D |  if_ne	jmp	#LR__4641
2d774     08 4E 05 F1 | 	add	fp, #8
2d778     A7 FA 09 FB | 	rdlong	result1, fp wz
2d77c     08 4E 85 F1 | 	sub	fp, #8
2d780     18 00 90 AD |  if_e	jmp	#LR__4640
2d784     10 4E 05 F1 | 	add	fp, #16
2d788     A7 12 02 F6 | 	mov	arg01, fp
2d78c     08 4E 85 F1 | 	sub	fp, #8
2d790     A7 14 02 FB | 	rdlong	arg02, fp
2d794     08 4E 85 F1 | 	sub	fp, #8
2d798     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d79c                 | LR__4640
2d79c                 | LR__4641
2d79c                 | LR__4642
2d79c                 | LR__4643
2d79c                 | ' 			}
2d79c                 | ' 		}
2d79c                 | ' 		;
2d79c                 | ' 	}
2d79c                 | ' 
2d79c                 | ' 	return res ;
2d79c     0C 4E 05 F1 | 	add	fp, #12
2d7a0     A7 FA 01 FB | 	rdlong	result1, fp
2d7a4     0C 4E 85 F1 | 	sub	fp, #12
2d7a8     A7 F0 03 F6 | 	mov	ptra, fp
2d7ac     B2 00 A0 FD | 	call	#popregs_
2d7b0                 | _fatfs_cc_f_stat_ret
2d7b0     2D 00 64 FD | 	ret
2d7b4                 | 
2d7b4                 | _fatfs_cc_f_unlink
2d7b4     00 4A 05 F6 | 	mov	COUNT_, #0
2d7b8     A8 00 A0 FD | 	call	#pushregs_
2d7bc     74 F0 07 F1 | 	add	ptra, #116
2d7c0     04 4E 05 F1 | 	add	fp, #4
2d7c4     A7 12 62 FC | 	wrlong	arg01, fp
2d7c8     68 4E 05 F1 | 	add	fp, #104
2d7cc     A7 00 68 FC | 	wrlong	#0, fp
2d7d0     68 4E 85 F1 | 	sub	fp, #104
2d7d4     A7 12 02 F6 | 	mov	arg01, fp
2d7d8     6C 4E 05 F1 | 	add	fp, #108
2d7dc     A7 14 02 F6 | 	mov	arg02, fp
2d7e0     70 4E 85 F1 | 	sub	fp, #112
2d7e4     02 16 06 F6 | 	mov	arg03, #2
2d7e8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2d7ec     08 4E 05 F1 | 	add	fp, #8
2d7f0     A7 FA 61 FC | 	wrlong	result1, fp
2d7f4     08 4E 85 F1 | 	sub	fp, #8
2d7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7fc     E4 01 90 5D |  if_ne	jmp	#LR__4658
2d800     70 4E 05 F1 | 	add	fp, #112
2d804     A7 16 02 FB | 	rdlong	arg03, fp
2d808     64 4E 85 F1 | 	sub	fp, #100
2d80c     A7 16 62 FC | 	wrlong	arg03, fp
2d810     A7 12 02 F6 | 	mov	arg01, fp
2d814     08 4E 85 F1 | 	sub	fp, #8
2d818     A7 14 02 FB | 	rdlong	arg02, fp
2d81c     04 4E 85 F1 | 	sub	fp, #4
2d820     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2d824     08 4E 05 F1 | 	add	fp, #8
2d828     A7 FA 61 FC | 	wrlong	result1, fp
2d82c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d830     08 4E 85 F1 | 	sub	fp, #8
2d834     AC 01 90 5D |  if_ne	jmp	#LR__4657
2d838     37 4E 05 F1 | 	add	fp, #55
2d83c     A7 FA C1 FA | 	rdbyte	result1, fp
2d840     37 4E 85 F1 | 	sub	fp, #55
2d844     80 FA CD F7 | 	test	result1, #128 wz
2d848     08 4E 05 51 |  if_ne	add	fp, #8
2d84c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d850     08 4E 85 51 |  if_ne	sub	fp, #8
2d854     1C 00 90 5D |  if_ne	jmp	#LR__4650
2d858     12 4E 05 F1 | 	add	fp, #18
2d85c     A7 FA C1 FA | 	rdbyte	result1, fp
2d860     12 4E 85 F1 | 	sub	fp, #18
2d864     01 FA CD F7 | 	test	result1, #1 wz
2d868     08 4E 05 51 |  if_ne	add	fp, #8
2d86c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d870     08 4E 85 51 |  if_ne	sub	fp, #8
2d874                 | LR__4650
2d874     08 4E 05 F1 | 	add	fp, #8
2d878     A7 FA 09 FB | 	rdlong	result1, fp wz
2d87c     08 4E 85 F1 | 	sub	fp, #8
2d880     C8 00 90 5D |  if_ne	jmp	#LR__4653
2d884     70 4E 05 F1 | 	add	fp, #112
2d888     A7 12 02 FB | 	rdlong	arg01, fp
2d88c     48 4E 85 F1 | 	sub	fp, #72
2d890     A7 14 02 FB | 	rdlong	arg02, fp
2d894     28 4E 85 F1 | 	sub	fp, #40
2d898     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2d89c     6C 4E 05 F1 | 	add	fp, #108
2d8a0     A7 FA 61 FC | 	wrlong	result1, fp
2d8a4     5A 4E 85 F1 | 	sub	fp, #90
2d8a8     A7 FA C1 FA | 	rdbyte	result1, fp
2d8ac     12 4E 85 F1 | 	sub	fp, #18
2d8b0     10 FA CD F7 | 	test	result1, #16 wz
2d8b4     94 00 90 AD |  if_e	jmp	#LR__4652
2d8b8     70 4E 05 F1 | 	add	fp, #112
2d8bc     A7 FA 01 FB | 	rdlong	result1, fp
2d8c0     34 4E 85 F1 | 	sub	fp, #52
2d8c4     A7 FA 61 FC | 	wrlong	result1, fp
2d8c8     30 4E 05 F1 | 	add	fp, #48
2d8cc     A7 16 02 FB | 	rdlong	arg03, fp
2d8d0     28 4E 85 F1 | 	sub	fp, #40
2d8d4     A7 16 62 FC | 	wrlong	arg03, fp
2d8d8     08 4E 85 F1 | 	sub	fp, #8
2d8dc     A7 12 02 F6 | 	mov	arg01, fp
2d8e0     3C 4E 85 F1 | 	sub	fp, #60
2d8e4     00 14 06 F6 | 	mov	arg02, #0
2d8e8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2d8ec     08 4E 05 F1 | 	add	fp, #8
2d8f0     A7 FA 61 FC | 	wrlong	result1, fp
2d8f4     08 4E 85 F1 | 	sub	fp, #8
2d8f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8fc     4C 00 90 5D |  if_ne	jmp	#LR__4651
2d900     3C 4E 05 F1 | 	add	fp, #60
2d904     A7 12 02 F6 | 	mov	arg01, fp
2d908     3C 4E 85 F1 | 	sub	fp, #60
2d90c     00 14 06 F6 | 	mov	arg02, #0
2d910     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2d914     08 4E 05 F1 | 	add	fp, #8
2d918     A7 FA 61 FC | 	wrlong	result1, fp
2d91c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d920     08 4E 85 F1 | 	sub	fp, #8
2d924     08 4E 05 A1 |  if_e	add	fp, #8
2d928     A7 0E 68 AC |  if_e	wrlong	#7, fp
2d92c     08 4E 85 A1 |  if_e	sub	fp, #8
2d930     08 4E 05 F1 | 	add	fp, #8
2d934     A7 FA 01 FB | 	rdlong	result1, fp
2d938     08 4E 85 F1 | 	sub	fp, #8
2d93c     04 FA 0D F2 | 	cmp	result1, #4 wz
2d940     08 4E 05 A1 |  if_e	add	fp, #8
2d944     A7 00 68 AC |  if_e	wrlong	#0, fp
2d948     08 4E 85 A1 |  if_e	sub	fp, #8
2d94c                 | LR__4651
2d94c                 | LR__4652
2d94c                 | LR__4653
2d94c     08 4E 05 F1 | 	add	fp, #8
2d950     A7 FA 09 FB | 	rdlong	result1, fp wz
2d954     08 4E 85 F1 | 	sub	fp, #8
2d958     88 00 90 5D |  if_ne	jmp	#LR__4656
2d95c     0C 4E 05 F1 | 	add	fp, #12
2d960     A7 12 02 F6 | 	mov	arg01, fp
2d964     0C 4E 85 F1 | 	sub	fp, #12
2d968     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2d96c     08 4E 05 F1 | 	add	fp, #8
2d970     A7 FA 61 FC | 	wrlong	result1, fp
2d974     08 4E 85 F1 | 	sub	fp, #8
2d978     00 FA 0D F2 | 	cmp	result1, #0 wz
2d97c     38 00 90 5D |  if_ne	jmp	#LR__4654
2d980     6C 4E 05 F1 | 	add	fp, #108
2d984     A7 FA 09 FB | 	rdlong	result1, fp wz
2d988     6C 4E 85 F1 | 	sub	fp, #108
2d98c     28 00 90 AD |  if_e	jmp	#LR__4654
2d990     0C 4E 05 F1 | 	add	fp, #12
2d994     A7 12 02 F6 | 	mov	arg01, fp
2d998     60 4E 05 F1 | 	add	fp, #96
2d99c     A7 14 02 FB | 	rdlong	arg02, fp
2d9a0     6C 4E 85 F1 | 	sub	fp, #108
2d9a4     00 16 06 F6 | 	mov	arg03, #0
2d9a8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2d9ac     08 4E 05 F1 | 	add	fp, #8
2d9b0     A7 FA 61 FC | 	wrlong	result1, fp
2d9b4     08 4E 85 F1 | 	sub	fp, #8
2d9b8                 | LR__4654
2d9b8     08 4E 05 F1 | 	add	fp, #8
2d9bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9c0     08 4E 85 F1 | 	sub	fp, #8
2d9c4     1C 00 90 5D |  if_ne	jmp	#LR__4655
2d9c8     70 4E 05 F1 | 	add	fp, #112
2d9cc     A7 12 02 FB | 	rdlong	arg01, fp
2d9d0     70 4E 85 F1 | 	sub	fp, #112
2d9d4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2d9d8     08 4E 05 F1 | 	add	fp, #8
2d9dc     A7 FA 61 FC | 	wrlong	result1, fp
2d9e0     08 4E 85 F1 | 	sub	fp, #8
2d9e4                 | LR__4655
2d9e4                 | LR__4656
2d9e4                 | LR__4657
2d9e4                 | LR__4658
2d9e4                 | ' 			}
2d9e4                 | ' 		}
2d9e4                 | ' 		;
2d9e4                 | ' 	}
2d9e4                 | ' 
2d9e4                 | ' 	return res ;
2d9e4     08 4E 05 F1 | 	add	fp, #8
2d9e8     A7 FA 01 FB | 	rdlong	result1, fp
2d9ec     08 4E 85 F1 | 	sub	fp, #8
2d9f0     A7 F0 03 F6 | 	mov	ptra, fp
2d9f4     B2 00 A0 FD | 	call	#popregs_
2d9f8                 | _fatfs_cc_f_unlink_ret
2d9f8     2D 00 64 FD | 	ret
2d9fc                 | 
2d9fc                 | _fatfs_cc_f_mkdir
2d9fc     00 4A 05 F6 | 	mov	COUNT_, #0
2da00     A8 00 A0 FD | 	call	#pushregs_
2da04     5C F0 07 F1 | 	add	ptra, #92
2da08     04 4E 05 F1 | 	add	fp, #4
2da0c     A7 12 62 FC | 	wrlong	arg01, fp
2da10     A7 12 02 F6 | 	mov	arg01, fp
2da14     48 4E 05 F1 | 	add	fp, #72
2da18     A7 14 02 F6 | 	mov	arg02, fp
2da1c     4C 4E 85 F1 | 	sub	fp, #76
2da20     02 16 06 F6 | 	mov	arg03, #2
2da24     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2da28     08 4E 05 F1 | 	add	fp, #8
2da2c     A7 FA 61 FC | 	wrlong	result1, fp
2da30     08 4E 85 F1 | 	sub	fp, #8
2da34     00 FA 0D F2 | 	cmp	result1, #0 wz
2da38     C4 02 90 5D |  if_ne	jmp	#LR__4665
2da3c     4C 4E 05 F1 | 	add	fp, #76
2da40     A7 16 02 FB | 	rdlong	arg03, fp
2da44     40 4E 85 F1 | 	sub	fp, #64
2da48     A7 16 62 FC | 	wrlong	arg03, fp
2da4c     A7 12 02 F6 | 	mov	arg01, fp
2da50     08 4E 85 F1 | 	sub	fp, #8
2da54     A7 14 02 FB | 	rdlong	arg02, fp
2da58     04 4E 85 F1 | 	sub	fp, #4
2da5c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2da60     08 4E 05 F1 | 	add	fp, #8
2da64     A7 FA 61 FC | 	wrlong	result1, fp
2da68     00 FA 4D F2 | 	cmps	result1, #0 wz
2da6c     08 4E 85 F1 | 	sub	fp, #8
2da70     08 4E 05 A1 |  if_e	add	fp, #8
2da74     A7 10 68 AC |  if_e	wrlong	#8, fp
2da78     08 4E 85 A1 |  if_e	sub	fp, #8
2da7c     08 4E 05 F1 | 	add	fp, #8
2da80     A7 FA 01 FB | 	rdlong	result1, fp
2da84     08 4E 85 F1 | 	sub	fp, #8
2da88     04 FA 0D F2 | 	cmp	result1, #4 wz
2da8c     70 02 90 5D |  if_ne	jmp	#LR__4664
2da90     4C 4E 05 F1 | 	add	fp, #76
2da94     A7 16 02 FB | 	rdlong	arg03, fp
2da98     10 4E 85 F1 | 	sub	fp, #16
2da9c     A7 16 62 FC | 	wrlong	arg03, fp
2daa0     A7 12 02 F6 | 	mov	arg01, fp
2daa4     3C 4E 85 F1 | 	sub	fp, #60
2daa8     00 14 06 F6 | 	mov	arg02, #0
2daac     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dab0     50 4E 05 F1 | 	add	fp, #80
2dab4     A7 FA 61 FC | 	wrlong	result1, fp
2dab8     48 4E 85 F1 | 	sub	fp, #72
2dabc     A7 00 68 FC | 	wrlong	#0, fp
2dac0     48 4E 05 F1 | 	add	fp, #72
2dac4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dac8     50 4E 85 F1 | 	sub	fp, #80
2dacc     08 4E 05 A1 |  if_e	add	fp, #8
2dad0     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dad4     08 4E 85 A1 |  if_e	sub	fp, #8
2dad8     50 4E 05 F1 | 	add	fp, #80
2dadc     A7 FA 01 FB | 	rdlong	result1, fp
2dae0     50 4E 85 F1 | 	sub	fp, #80
2dae4     01 FA 0D F2 | 	cmp	result1, #1 wz
2dae8     08 4E 05 A1 |  if_e	add	fp, #8
2daec     A7 04 68 AC |  if_e	wrlong	#2, fp
2daf0     08 4E 85 A1 |  if_e	sub	fp, #8
2daf4     50 4E 05 F1 | 	add	fp, #80
2daf8     A7 16 02 FB | 	rdlong	arg03, fp
2dafc     50 4E 85 F1 | 	sub	fp, #80
2db00     FF FF 7F FF 
2db04     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2db08     08 4E 05 A1 |  if_e	add	fp, #8
2db0c     A7 02 68 AC |  if_e	wrlong	#1, fp
2db10     08 4E 85 A1 |  if_e	sub	fp, #8
2db14     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2db18     58 4E 05 F1 | 	add	fp, #88
2db1c     A7 FA 61 FC | 	wrlong	result1, fp
2db20     50 4E 85 F1 | 	sub	fp, #80
2db24     A7 FA 09 FB | 	rdlong	result1, fp wz
2db28     08 4E 85 F1 | 	sub	fp, #8
2db2c     1C 01 90 5D |  if_ne	jmp	#LR__4661
2db30     4C 4E 05 F1 | 	add	fp, #76
2db34     A7 12 02 FB | 	rdlong	arg01, fp
2db38     04 4E 05 F1 | 	add	fp, #4
2db3c     A7 14 02 FB | 	rdlong	arg02, fp
2db40     50 4E 85 F1 | 	sub	fp, #80
2db44     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2db48     08 4E 05 F1 | 	add	fp, #8
2db4c     A7 FA 61 FC | 	wrlong	result1, fp
2db50     00 FA 4D F2 | 	cmps	result1, #0 wz
2db54     08 4E 85 F1 | 	sub	fp, #8
2db58     F0 00 90 5D |  if_ne	jmp	#LR__4660
2db5c     4C 4E 05 F1 | 	add	fp, #76
2db60     A7 12 02 FB | 	rdlong	arg01, fp
2db64     4C 4E 85 F1 | 	sub	fp, #76
2db68     34 12 06 F1 | 	add	arg01, #52
2db6c     20 14 06 F6 | 	mov	arg02, #32
2db70     0B 16 06 F6 | 	mov	arg03, #11
2db74     98 00 A0 FD | 	call	#\builtin_bytefill_
2db78     4C 4E 05 F1 | 	add	fp, #76
2db7c     A7 FA 01 FB | 	rdlong	result1, fp
2db80     34 FA 05 F1 | 	add	result1, #52
2db84     FD 5C 48 FC | 	wrbyte	#46, result1
2db88     A7 16 02 FB | 	rdlong	arg03, fp
2db8c     3F 16 06 F1 | 	add	arg03, #63
2db90     0B 21 48 FC | 	wrbyte	#16, arg03
2db94     A7 12 02 FB | 	rdlong	arg01, fp
2db98     4A 12 06 F1 | 	add	arg01, #74
2db9c     0C 4E 05 F1 | 	add	fp, #12
2dba0     A7 14 02 FB | 	rdlong	arg02, fp
2dba4     09 15 62 FC | 	wrlong	arg02, arg01
2dba8     0C 4E 85 F1 | 	sub	fp, #12
2dbac     A7 14 02 FB | 	rdlong	arg02, fp
2dbb0     0A 13 02 F6 | 	mov	arg01, arg02
2dbb4     34 14 06 F1 | 	add	arg02, #52
2dbb8     04 4E 05 F1 | 	add	fp, #4
2dbbc     A7 16 02 FB | 	rdlong	arg03, fp
2dbc0     50 4E 85 F1 | 	sub	fp, #80
2dbc4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dbc8     4C 4E 05 F1 | 	add	fp, #76
2dbcc     A7 14 02 FB | 	rdlong	arg02, fp
2dbd0     0A 13 02 F6 | 	mov	arg01, arg02
2dbd4     54 12 06 F1 | 	add	arg01, #84
2dbd8     4C 4E 85 F1 | 	sub	fp, #76
2dbdc     34 14 06 F1 | 	add	arg02, #52
2dbe0     20 16 06 F6 | 	mov	arg03, #32
2dbe4     60 2A BF FD | 	call	#__system____builtin_memmove
2dbe8     4C 4E 05 F1 | 	add	fp, #76
2dbec     A7 16 02 FB | 	rdlong	arg03, fp
2dbf0     55 16 06 F1 | 	add	arg03, #85
2dbf4     0B 5D 48 FC | 	wrbyte	#46, arg03
2dbf8     38 4E 85 F1 | 	sub	fp, #56
2dbfc     A7 16 02 FB | 	rdlong	arg03, fp
2dc00     40 4E 05 F1 | 	add	fp, #64
2dc04     A7 16 62 FC | 	wrlong	arg03, fp
2dc08     08 4E 85 F1 | 	sub	fp, #8
2dc0c     A7 14 02 FB | 	rdlong	arg02, fp
2dc10     0A 13 02 F6 | 	mov	arg01, arg02
2dc14     54 14 06 F1 | 	add	arg02, #84
2dc18     4C 4E 85 F1 | 	sub	fp, #76
2dc1c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dc20     4C 4E 05 F1 | 	add	fp, #76
2dc24     A7 16 02 FB | 	rdlong	arg03, fp
2dc28     03 16 06 F1 | 	add	arg03, #3
2dc2c     0B 03 48 FC | 	wrbyte	#1, arg03
2dc30     40 4E 85 F1 | 	sub	fp, #64
2dc34     A7 12 02 F6 | 	mov	arg01, fp
2dc38     0C 4E 85 F1 | 	sub	fp, #12
2dc3c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dc40     08 4E 05 F1 | 	add	fp, #8
2dc44     A7 FA 61 FC | 	wrlong	result1, fp
2dc48     08 4E 85 F1 | 	sub	fp, #8
2dc4c                 | LR__4660
2dc4c                 | LR__4661
2dc4c     08 4E 05 F1 | 	add	fp, #8
2dc50     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc54     08 4E 85 F1 | 	sub	fp, #8
2dc58     88 00 90 5D |  if_ne	jmp	#LR__4662
2dc5c     28 4E 05 F1 | 	add	fp, #40
2dc60     A7 12 02 FB | 	rdlong	arg01, fp
2dc64     16 12 06 F1 | 	add	arg01, #22
2dc68     30 4E 05 F1 | 	add	fp, #48
2dc6c     A7 14 02 FB | 	rdlong	arg02, fp
2dc70     09 15 62 FC | 	wrlong	arg02, arg01
2dc74     0C 4E 85 F1 | 	sub	fp, #12
2dc78     A7 12 02 FB | 	rdlong	arg01, fp
2dc7c     24 4E 85 F1 | 	sub	fp, #36
2dc80     A7 14 02 FB | 	rdlong	arg02, fp
2dc84     28 4E 05 F1 | 	add	fp, #40
2dc88     A7 16 02 FB | 	rdlong	arg03, fp
2dc8c     50 4E 85 F1 | 	sub	fp, #80
2dc90     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2dc94     28 4E 05 F1 | 	add	fp, #40
2dc98     A7 FA 01 FB | 	rdlong	result1, fp
2dc9c     0B FA 05 F1 | 	add	result1, #11
2dca0     FD 20 48 FC | 	wrbyte	#16, result1
2dca4     24 4E 05 F1 | 	add	fp, #36
2dca8     A7 FA 01 FB | 	rdlong	result1, fp
2dcac     03 FA 05 F1 | 	add	result1, #3
2dcb0     FD 02 48 FC | 	wrbyte	#1, result1
2dcb4     44 4E 85 F1 | 	sub	fp, #68
2dcb8     A7 FA 09 FB | 	rdlong	result1, fp wz
2dcbc     08 4E 85 F1 | 	sub	fp, #8
2dcc0     3C 00 90 5D |  if_ne	jmp	#LR__4663
2dcc4     4C 4E 05 F1 | 	add	fp, #76
2dcc8     A7 12 02 FB | 	rdlong	arg01, fp
2dccc     4C 4E 85 F1 | 	sub	fp, #76
2dcd0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2dcd4     08 4E 05 F1 | 	add	fp, #8
2dcd8     A7 FA 61 FC | 	wrlong	result1, fp
2dcdc     08 4E 85 F1 | 	sub	fp, #8
2dce0     1C 00 90 FD | 	jmp	#LR__4663
2dce4                 | LR__4662
2dce4     3C 4E 05 F1 | 	add	fp, #60
2dce8     A7 12 02 F6 | 	mov	arg01, fp
2dcec     14 4E 05 F1 | 	add	fp, #20
2dcf0     A7 14 02 FB | 	rdlong	arg02, fp
2dcf4     50 4E 85 F1 | 	sub	fp, #80
2dcf8     00 16 06 F6 | 	mov	arg03, #0
2dcfc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2dd00                 | LR__4663
2dd00                 | LR__4664
2dd00                 | LR__4665
2dd00                 | ' 				remove_chain(&sobj, dcl, 0);
2dd00                 | ' 			}
2dd00                 | ' 		}
2dd00                 | ' 		;
2dd00                 | ' 	}
2dd00                 | ' 
2dd00                 | ' 	return res ;
2dd00     08 4E 05 F1 | 	add	fp, #8
2dd04     A7 FA 01 FB | 	rdlong	result1, fp
2dd08     08 4E 85 F1 | 	sub	fp, #8
2dd0c     A7 F0 03 F6 | 	mov	ptra, fp
2dd10     B2 00 A0 FD | 	call	#popregs_
2dd14                 | _fatfs_cc_f_mkdir_ret
2dd14     2D 00 64 FD | 	ret
2dd18                 | 
2dd18                 | _fatfs_cc_f_rename
2dd18     01 4A 05 F6 | 	mov	COUNT_, #1
2dd1c     A8 00 A0 FD | 	call	#pushregs_
2dd20     9C F0 07 F1 | 	add	ptra, #156
2dd24     04 4E 05 F1 | 	add	fp, #4
2dd28     A7 12 62 FC | 	wrlong	arg01, fp
2dd2c     04 4E 05 F1 | 	add	fp, #4
2dd30     A7 14 62 FC | 	wrlong	arg02, fp
2dd34     A7 12 02 F6 | 	mov	arg01, fp
2dd38     08 4E 85 F1 | 	sub	fp, #8
2dd3c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2dd40     04 4E 05 F1 | 	add	fp, #4
2dd44     A7 12 02 F6 | 	mov	arg01, fp
2dd48     6C 4E 05 F1 | 	add	fp, #108
2dd4c     A7 14 02 F6 | 	mov	arg02, fp
2dd50     70 4E 85 F1 | 	sub	fp, #112
2dd54     02 16 06 F6 | 	mov	arg03, #2
2dd58     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2dd5c     0C 4E 05 F1 | 	add	fp, #12
2dd60     A7 FA 61 FC | 	wrlong	result1, fp
2dd64     0C 4E 85 F1 | 	sub	fp, #12
2dd68     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd6c     44 03 90 5D |  if_ne	jmp	#LR__4683
2dd70     70 4E 05 F1 | 	add	fp, #112
2dd74     A7 16 02 FB | 	rdlong	arg03, fp
2dd78     60 4E 85 F1 | 	sub	fp, #96
2dd7c     A7 16 62 FC | 	wrlong	arg03, fp
2dd80     A7 12 02 F6 | 	mov	arg01, fp
2dd84     0C 4E 85 F1 | 	sub	fp, #12
2dd88     A7 14 02 FB | 	rdlong	arg02, fp
2dd8c     04 4E 85 F1 | 	sub	fp, #4
2dd90     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2dd94     0C 4E 05 F1 | 	add	fp, #12
2dd98     A7 FA 61 FC | 	wrlong	result1, fp
2dd9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dda0     0C 4E 85 F1 | 	sub	fp, #12
2dda4     1C 00 90 5D |  if_ne	jmp	#LR__4670
2dda8     3B 4E 05 F1 | 	add	fp, #59
2ddac     A7 FA C1 FA | 	rdbyte	result1, fp
2ddb0     3B 4E 85 F1 | 	sub	fp, #59
2ddb4     A0 FA CD F7 | 	test	result1, #160 wz
2ddb8     0C 4E 05 51 |  if_ne	add	fp, #12
2ddbc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ddc0     0C 4E 85 51 |  if_ne	sub	fp, #12
2ddc4                 | LR__4670
2ddc4     0C 4E 05 F1 | 	add	fp, #12
2ddc8     A7 1E 0A FB | 	rdlong	local01, fp wz
2ddcc     0C 4E 85 F1 | 	sub	fp, #12
2ddd0     E0 02 90 5D |  if_ne	jmp	#LR__4682
2ddd4     74 4E 05 F1 | 	add	fp, #116
2ddd8     A7 12 02 F6 | 	mov	arg01, fp
2dddc     48 4E 85 F1 | 	sub	fp, #72
2dde0     A7 14 02 FB | 	rdlong	arg02, fp
2dde4     2C 4E 85 F1 | 	sub	fp, #44
2dde8     20 16 06 F6 | 	mov	arg03, #32
2ddec     58 28 BF FD | 	call	#__system____builtin_memmove
2ddf0     40 4E 05 F1 | 	add	fp, #64
2ddf4     A7 12 02 F6 | 	mov	arg01, fp
2ddf8     30 4E 85 F1 | 	sub	fp, #48
2ddfc     A7 14 02 F6 | 	mov	arg02, fp
2de00     10 4E 85 F1 | 	sub	fp, #16
2de04     30 16 06 F6 | 	mov	arg03, #48
2de08     3C 28 BF FD | 	call	#__system____builtin_memmove
2de0c     40 4E 05 F1 | 	add	fp, #64
2de10     A7 12 02 F6 | 	mov	arg01, fp
2de14     38 4E 85 F1 | 	sub	fp, #56
2de18     A7 14 02 FB | 	rdlong	arg02, fp
2de1c     08 4E 85 F1 | 	sub	fp, #8
2de20     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2de24     0C 4E 05 F1 | 	add	fp, #12
2de28     A7 FA 61 FC | 	wrlong	result1, fp
2de2c     0C 4E 85 F1 | 	sub	fp, #12
2de30     00 FA 0D F2 | 	cmp	result1, #0 wz
2de34     4C 00 90 5D |  if_ne	jmp	#LR__4673
2de38     48 4E 05 F1 | 	add	fp, #72
2de3c     A7 FA 01 FB | 	rdlong	result1, fp
2de40     30 4E 85 F1 | 	sub	fp, #48
2de44     A7 16 02 FB | 	rdlong	arg03, fp
2de48     18 4E 85 F1 | 	sub	fp, #24
2de4c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2de50     20 00 90 5D |  if_ne	jmp	#LR__4671
2de54     50 4E 05 F1 | 	add	fp, #80
2de58     A7 FA 01 FB | 	rdlong	result1, fp
2de5c     30 4E 85 F1 | 	sub	fp, #48
2de60     A7 16 02 FB | 	rdlong	arg03, fp
2de64     20 4E 85 F1 | 	sub	fp, #32
2de68     0B FB 09 F2 | 	cmp	result1, arg03 wz
2de6c     04 1E 06 A6 |  if_e	mov	local01, #4
2de70     04 00 90 AD |  if_e	jmp	#LR__4672
2de74                 | LR__4671
2de74     08 1E 06 F6 | 	mov	local01, #8
2de78                 | LR__4672
2de78     0C 4E 05 F1 | 	add	fp, #12
2de7c     A7 1E 62 FC | 	wrlong	local01, fp
2de80     0C 4E 85 F1 | 	sub	fp, #12
2de84                 | LR__4673
2de84     0C 4E 05 F1 | 	add	fp, #12
2de88     A7 1E 02 FB | 	rdlong	local01, fp
2de8c     0C 4E 85 F1 | 	sub	fp, #12
2de90     04 1E 0E F2 | 	cmp	local01, #4 wz
2de94     CC 01 90 5D |  if_ne	jmp	#LR__4679
2de98     40 4E 05 F1 | 	add	fp, #64
2de9c     A7 12 02 F6 | 	mov	arg01, fp
2dea0     40 4E 85 F1 | 	sub	fp, #64
2dea4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2dea8     0C 4E 05 F1 | 	add	fp, #12
2deac     A7 FA 61 FC | 	wrlong	result1, fp
2deb0     0C 4E 85 F1 | 	sub	fp, #12
2deb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2deb8     A8 01 90 5D |  if_ne	jmp	#LR__4678
2debc     5C 4E 05 F1 | 	add	fp, #92
2dec0     A7 12 02 FB | 	rdlong	arg01, fp
2dec4     38 4E 05 F1 | 	add	fp, #56
2dec8     A7 12 62 FC | 	wrlong	arg01, fp
2decc     0D 12 06 F1 | 	add	arg01, #13
2ded0     20 4E 85 F1 | 	sub	fp, #32
2ded4     A7 14 02 F6 | 	mov	arg02, fp
2ded8     74 4E 85 F1 | 	sub	fp, #116
2dedc     0D 14 06 F1 | 	add	arg02, #13
2dee0     13 16 06 F6 | 	mov	arg03, #19
2dee4     60 27 BF FD | 	call	#__system____builtin_memmove
2dee8     94 4E 05 F1 | 	add	fp, #148
2deec     A7 1E 02 FB | 	rdlong	local01, fp
2def0     15 4E 85 F1 | 	sub	fp, #21
2def4     A7 FA C1 FA | 	rdbyte	result1, fp
2def8     0B 1E 06 F1 | 	add	local01, #11
2defc     0F FB 41 FC | 	wrbyte	result1, local01
2df00     15 4E 05 F1 | 	add	fp, #21
2df04     A7 1E 02 FB | 	rdlong	local01, fp
2df08     94 4E 85 F1 | 	sub	fp, #148
2df0c     0B 1E 06 F1 | 	add	local01, #11
2df10     0F 1F C2 FA | 	rdbyte	local01, local01
2df14     10 1E CE F7 | 	test	local01, #16 wz
2df18     24 00 90 5D |  if_ne	jmp	#LR__4674
2df1c     94 4E 05 F1 | 	add	fp, #148
2df20     A7 FA 01 FB | 	rdlong	result1, fp
2df24     FD 1E 02 F6 | 	mov	local01, result1
2df28     94 4E 85 F1 | 	sub	fp, #148
2df2c     0B FA 05 F1 | 	add	result1, #11
2df30     FD FA C1 FA | 	rdbyte	result1, result1
2df34     20 FA 45 F5 | 	or	result1, #32
2df38     0B 1E 06 F1 | 	add	local01, #11
2df3c     0F FB 41 FC | 	wrbyte	result1, local01
2df40                 | LR__4674
2df40     70 4E 05 F1 | 	add	fp, #112
2df44     A7 1E 02 FB | 	rdlong	local01, fp
2df48     03 1E 06 F1 | 	add	local01, #3
2df4c     0F 03 48 FC | 	wrbyte	#1, local01
2df50     24 4E 05 F1 | 	add	fp, #36
2df54     A7 1E 02 FB | 	rdlong	local01, fp
2df58     94 4E 85 F1 | 	sub	fp, #148
2df5c     0B 1E 06 F1 | 	add	local01, #11
2df60     0F 1F C2 FA | 	rdbyte	local01, local01
2df64     10 1E CE F7 | 	test	local01, #16 wz
2df68     F8 00 90 AD |  if_e	jmp	#LR__4677
2df6c     18 4E 05 F1 | 	add	fp, #24
2df70     A7 16 02 FB | 	rdlong	arg03, fp
2df74     30 4E 05 F1 | 	add	fp, #48
2df78     A7 1E 02 FB | 	rdlong	local01, fp
2df7c     48 4E 85 F1 | 	sub	fp, #72
2df80     0F 17 0A F2 | 	cmp	arg03, local01 wz
2df84     DC 00 90 AD |  if_e	jmp	#LR__4677
2df88     70 4E 05 F1 | 	add	fp, #112
2df8c     A7 12 02 FB | 	rdlong	arg01, fp
2df90     09 1F 02 F6 | 	mov	local01, arg01
2df94     24 4E 05 F1 | 	add	fp, #36
2df98     A7 14 02 FB | 	rdlong	arg02, fp
2df9c     94 4E 85 F1 | 	sub	fp, #148
2dfa0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2dfa4     FD 14 02 F6 | 	mov	arg02, result1
2dfa8     0F 13 02 F6 | 	mov	arg01, local01
2dfac     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2dfb0     98 4E 05 F1 | 	add	fp, #152
2dfb4     A7 FA 61 FC | 	wrlong	result1, fp
2dfb8     00 FA 4D F2 | 	cmps	result1, #0 wz
2dfbc     98 4E 85 F1 | 	sub	fp, #152
2dfc0     0C 4E 05 A1 |  if_e	add	fp, #12
2dfc4     A7 04 68 AC |  if_e	wrlong	#2, fp
2dfc8     0C 4E 85 A1 |  if_e	sub	fp, #12
2dfcc     94 00 90 AD |  if_e	jmp	#LR__4676
2dfd0     70 4E 05 F1 | 	add	fp, #112
2dfd4     A7 12 02 FB | 	rdlong	arg01, fp
2dfd8     28 4E 05 F1 | 	add	fp, #40
2dfdc     A7 14 02 FB | 	rdlong	arg02, fp
2dfe0     98 4E 85 F1 | 	sub	fp, #152
2dfe4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2dfe8     0C 4E 05 F1 | 	add	fp, #12
2dfec     A7 FA 61 FC | 	wrlong	result1, fp
2dff0     64 4E 05 F1 | 	add	fp, #100
2dff4     A7 1E 02 FB | 	rdlong	local01, fp
2dff8     54 1E 06 F1 | 	add	local01, #84
2dffc     24 4E 05 F1 | 	add	fp, #36
2e000     A7 1E 62 FC | 	wrlong	local01, fp
2e004     88 4E 85 F1 | 	sub	fp, #136
2e008     A7 1E 0A FB | 	rdlong	local01, fp wz
2e00c     0C 4E 85 F1 | 	sub	fp, #12
2e010     50 00 90 5D |  if_ne	jmp	#LR__4675
2e014     94 4E 05 F1 | 	add	fp, #148
2e018     A7 1E 02 FB | 	rdlong	local01, fp
2e01c     94 4E 85 F1 | 	sub	fp, #148
2e020     01 1E 06 F1 | 	add	local01, #1
2e024     0F 1F C2 FA | 	rdbyte	local01, local01
2e028     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e02c     34 00 90 5D |  if_ne	jmp	#LR__4675
2e030     70 4E 05 F1 | 	add	fp, #112
2e034     A7 12 02 FB | 	rdlong	arg01, fp
2e038     24 4E 05 F1 | 	add	fp, #36
2e03c     A7 14 02 FB | 	rdlong	arg02, fp
2e040     4C 4E 85 F1 | 	sub	fp, #76
2e044     A7 16 02 FB | 	rdlong	arg03, fp
2e048     48 4E 85 F1 | 	sub	fp, #72
2e04c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e050     70 4E 05 F1 | 	add	fp, #112
2e054     A7 1E 02 FB | 	rdlong	local01, fp
2e058     70 4E 85 F1 | 	sub	fp, #112
2e05c     03 1E 06 F1 | 	add	local01, #3
2e060     0F 03 48 FC | 	wrbyte	#1, local01
2e064                 | LR__4675
2e064                 | LR__4676
2e064                 | LR__4677
2e064                 | LR__4678
2e064                 | LR__4679
2e064     0C 4E 05 F1 | 	add	fp, #12
2e068     A7 1E 0A FB | 	rdlong	local01, fp wz
2e06c     0C 4E 85 F1 | 	sub	fp, #12
2e070     40 00 90 5D |  if_ne	jmp	#LR__4681
2e074     10 4E 05 F1 | 	add	fp, #16
2e078     A7 12 02 F6 | 	mov	arg01, fp
2e07c     10 4E 85 F1 | 	sub	fp, #16
2e080     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e084     0C 4E 05 F1 | 	add	fp, #12
2e088     A7 FA 61 FC | 	wrlong	result1, fp
2e08c     0C 4E 85 F1 | 	sub	fp, #12
2e090     00 FA 0D F2 | 	cmp	result1, #0 wz
2e094     1C 00 90 5D |  if_ne	jmp	#LR__4680
2e098     70 4E 05 F1 | 	add	fp, #112
2e09c     A7 12 02 FB | 	rdlong	arg01, fp
2e0a0     70 4E 85 F1 | 	sub	fp, #112
2e0a4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e0a8     0C 4E 05 F1 | 	add	fp, #12
2e0ac     A7 FA 61 FC | 	wrlong	result1, fp
2e0b0     0C 4E 85 F1 | 	sub	fp, #12
2e0b4                 | LR__4680
2e0b4                 | LR__4681
2e0b4                 | LR__4682
2e0b4                 | LR__4683
2e0b4                 | ' 					res = sync_fs(fs);
2e0b4                 | ' 				}
2e0b4                 | ' 			}
2e0b4                 | ' 
2e0b4                 | ' 		}
2e0b4                 | ' 		;
2e0b4                 | ' 	}
2e0b4                 | ' 
2e0b4                 | ' 	return res ;
2e0b4     0C 4E 05 F1 | 	add	fp, #12
2e0b8     A7 FA 01 FB | 	rdlong	result1, fp
2e0bc     0C 4E 85 F1 | 	sub	fp, #12
2e0c0     A7 F0 03 F6 | 	mov	ptra, fp
2e0c4     B2 00 A0 FD | 	call	#popregs_
2e0c8                 | _fatfs_cc_f_rename_ret
2e0c8     2D 00 64 FD | 	ret
2e0cc                 | 
2e0cc                 | _fatfs_cc_time
2e0cc     00 4A 05 F6 | 	mov	COUNT_, #0
2e0d0     A8 00 A0 FD | 	call	#pushregs_
2e0d4     14 F0 07 F1 | 	add	ptra, #20
2e0d8     04 4E 05 F1 | 	add	fp, #4
2e0dc     A7 12 62 FC | 	wrlong	arg01, fp
2e0e0     04 4E 05 F1 | 	add	fp, #4
2e0e4     A7 12 02 F6 | 	mov	arg01, fp
2e0e8     08 4E 85 F1 | 	sub	fp, #8
2e0ec     00 14 06 F6 | 	mov	arg02, #0
2e0f0     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e0f4     08 4E 05 F1 | 	add	fp, #8
2e0f8     A7 FA 01 FB | 	rdlong	result1, fp
2e0fc     08 4E 05 F1 | 	add	fp, #8
2e100     A7 FA 61 FC | 	wrlong	result1, fp
2e104     0C 4E 85 F1 | 	sub	fp, #12
2e108     A7 FA 09 FB | 	rdlong	result1, fp wz
2e10c     04 4E 85 F1 | 	sub	fp, #4
2e110     18 00 90 AD |  if_e	jmp	#LR__4690
2e114     04 4E 05 F1 | 	add	fp, #4
2e118     A7 FA 01 FB | 	rdlong	result1, fp
2e11c     0C 4E 05 F1 | 	add	fp, #12
2e120     A7 14 02 FB | 	rdlong	arg02, fp
2e124     10 4E 85 F1 | 	sub	fp, #16
2e128     FD 14 62 FC | 	wrlong	arg02, result1
2e12c                 | LR__4690
2e12c                 | '         *tp = now;
2e12c                 | '     return now;
2e12c     10 4E 05 F1 | 	add	fp, #16
2e130     A7 FA 01 FB | 	rdlong	result1, fp
2e134     10 4E 85 F1 | 	sub	fp, #16
2e138     A7 F0 03 F6 | 	mov	ptra, fp
2e13c     B2 00 A0 FD | 	call	#popregs_
2e140                 | _fatfs_cc_time_ret
2e140     2D 00 64 FD | 	ret
2e144                 | 
2e144                 | _fatfs_cc_mktime
2e144     06 4A 05 F6 | 	mov	COUNT_, #6
2e148     A8 00 A0 FD | 	call	#pushregs_
2e14c     09 1F 02 F6 | 	mov	local01, arg01
2e150     14 1E 06 F1 | 	add	local01, #20
2e154     0F 13 02 FB | 	rdlong	arg01, local01
2e158     14 1E 86 F1 | 	sub	local01, #20
2e15c     46 12 56 F2 | 	cmps	arg01, #70 wc
2e160                 | '                 return (time_t) -1;
2e160     01 FA 65 C6 |  if_b	neg	result1, #1
2e164     7C 01 90 CD |  if_b	jmp	#LR__4704
2e168     03 00 00 FF 
2e16c     6C 21 06 F6 | 	mov	local02, ##1900
2e170     14 1E 06 F1 | 	add	local01, #20
2e174     0F FB 01 FB | 	rdlong	result1, local01
2e178     FD 20 02 F1 | 	add	local02, result1
2e17c     08 1E 86 F1 | 	sub	local01, #8
2e180     0F 23 02 FB | 	rdlong	local03, local01
2e184     01 22 86 F1 | 	sub	local03, #1
2e188     04 1E 06 F1 | 	add	local01, #4
2e18c     0F 13 02 FB | 	rdlong	arg01, local01
2e190     10 1E 86 F1 | 	sub	local01, #16
2e194     02 12 66 F0 | 	shl	arg01, #2
2e198     02 00 00 FF 
2e19c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e1a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e1a4     09 FB 01 FB | 	rdlong	result1, arg01
2e1a8     FD 22 02 F1 | 	add	local03, result1
2e1ac     10 13 02 F6 | 	mov	arg01, local02
2e1b0     02 00 00 FF 
2e1b4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e1b8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e1bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1c0     1C 00 90 AD |  if_e	jmp	#LR__4700
2e1c4     00 24 06 F6 | 	mov	local04, #0
2e1c8     10 1E 06 F1 | 	add	local01, #16
2e1cc     0F FB 01 FB | 	rdlong	result1, local01
2e1d0     10 1E 86 F1 | 	sub	local01, #16
2e1d4     02 FA 55 F2 | 	cmps	result1, #2 wc
2e1d8     01 24 06 36 |  if_ae	mov	local04, #1
2e1dc     04 00 90 FD | 	jmp	#LR__4701
2e1e0                 | LR__4700
2e1e0     00 24 06 F6 | 	mov	local04, #0
2e1e4                 | LR__4701
2e1e4     04 1E 06 F1 | 	add	local01, #4
2e1e8     0F FB 01 FB | 	rdlong	result1, local01
2e1ec     04 1E 86 F1 | 	sub	local01, #4
2e1f0     0F 27 02 FB | 	rdlong	local05, local01
2e1f4     08 1E 06 F1 | 	add	local01, #8
2e1f8     0F 13 02 FB | 	rdlong	arg01, local01
2e1fc     07 00 00 FF 
2e200     10 12 06 FD | 	qmul	arg01, ##3600
2e204     12 23 02 F1 | 	add	local03, local04
2e208     FD 24 02 F6 | 	mov	local04, result1
2e20c     04 24 66 F0 | 	shl	local04, #4
2e210     FD 24 82 F1 | 	sub	local04, result1
2e214     02 24 66 F0 | 	shl	local04, #2
2e218     12 27 02 F1 | 	add	local05, local04
2e21c     08 1E 86 F1 | 	sub	local01, #8
2e220     18 24 62 FD | 	getqx	local04
2e224     A8 00 00 FF 
2e228     80 23 06 FD | 	qmul	local03, ##86400
2e22c     12 27 02 F1 | 	add	local05, local04
2e230     10 23 02 F6 | 	mov	local03, local02
2e234     03 00 00 FF 
2e238     B2 23 86 F1 | 	sub	local03, ##1970
2e23c     18 24 62 FD | 	getqx	local04
2e240     99 F0 00 FF 
2e244     80 23 06 FD | 	qmul	local03, ##31536000
2e248     12 27 02 F1 | 	add	local05, local04
2e24c     10 23 02 F6 | 	mov	local03, local02
2e250     03 00 00 FF 
2e254     B1 23 86 F1 | 	sub	local03, ##1969
2e258     11 29 52 F6 | 	abs	local06, local03 wc
2e25c     02 28 46 F0 | 	shr	local06, #2
2e260     14 29 82 F6 | 	negc	local06, local06
2e264     03 00 00 FF 
2e268     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e26c     18 24 62 FD | 	getqx	local04
2e270     12 27 02 F1 | 	add	local05, local04
2e274     18 00 90 CD |  if_b	jmp	#LR__4702
2e278     03 00 00 FF 
2e27c     D0 21 86 F1 | 	sub	local02, ##2000
2e280     10 25 52 F6 | 	abs	local04, local02 wc
2e284     64 24 16 FD | 	qdiv	local04, #100
2e288     18 24 62 FD | 	getqx	local04
2e28c     12 29 A2 F3 | 	sumnc	local06, local04
2e290                 | LR__4702
2e290     A8 00 00 FF 
2e294     80 29 06 FD | 	qmul	local06, ##86400
2e298     18 28 62 FD | 	getqx	local06
2e29c     14 27 02 F1 | 	add	local05, local06
2e2a0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e2a4     02 00 00 FF 
2e2a8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e2ac     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e2b0     14 27 02 F1 | 	add	local05, local06
2e2b4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e2b8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e2bc     02 00 00 FF 
2e2c0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e2c4     01 22 0E F2 | 	cmp	local03, #1 wz
2e2c8     14 00 90 5D |  if_ne	jmp	#LR__4703
2e2cc     0F 13 02 F6 | 	mov	arg01, local01
2e2d0     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e2d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2d8     07 00 00 5F 
2e2dc     10 26 86 51 |  if_ne	sub	local05, ##3600
2e2e0                 | LR__4703
2e2e0                 | '                 s -=  (3600L) ;
2e2e0                 | ' 
2e2e0                 | '         return s;
2e2e0     13 FB 01 F6 | 	mov	result1, local05
2e2e4                 | LR__4704
2e2e4     A7 F0 03 F6 | 	mov	ptra, fp
2e2e8     B2 00 A0 FD | 	call	#popregs_
2e2ec                 | _fatfs_cc_mktime_ret
2e2ec     2D 00 64 FD | 	ret
2e2f0                 | 
2e2f0                 | _fatfs_cc__gmtime_r
2e2f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e2f4     A8 00 A0 FD | 	call	#pushregs_
2e2f8     09 1F 02 FB | 	rdlong	local01, arg01
2e2fc     A8 00 00 FF 
2e300     80 1F 16 FD | 	qdiv	local01, ##86400
2e304     18 FA 61 FD | 	getqx	result1
2e308     04 FA 05 F1 | 	add	result1, #4
2e30c     07 FA 15 FD | 	qdiv	result1, #7
2e310     18 14 06 F1 | 	add	arg02, #24
2e314     D1 7F 27 FF 
2e318     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e31c     D1 7F 27 3F 
2e320     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e324     03 00 00 3F 
2e328     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e32c     03 00 00 CF 
2e330     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e334                 | ' 	  year = 1970;
2e334                 | ' 	}
2e334                 | ' 
2e334                 | ' 	for(;;) {
2e334     19 FA 61 FD | 	getqy	result1
2e338     0A FB 61 FC | 	wrlong	result1, arg02
2e33c     18 14 86 F1 | 	sub	arg02, #24
2e340                 | LR__4710
2e340     10 13 02 F6 | 	mov	arg01, local02
2e344     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e348     00 FA 0D F2 | 	cmp	result1, #0 wz
2e34c     42 F1 00 5F 
2e350     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e354     99 F0 00 AF 
2e358     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e35c     11 1F 12 F2 | 	cmp	local01, local03 wc
2e360                 | ' 	    break;
2e360     01 20 06 31 |  if_ae	add	local02, #1
2e364     11 1F 82 31 |  if_ae	sub	local01, local03
2e368     D4 FF 9F 3D |  if_ae	jmp	#LR__4710
2e36c     A8 00 00 FF 
2e370     80 1F 16 FD | 	qdiv	local01, ##86400
2e374     10 23 02 F6 | 	mov	local03, local02
2e378     03 00 00 FF 
2e37c     6C 23 86 F1 | 	sub	local03, ##1900
2e380     14 14 06 F1 | 	add	arg02, #20
2e384     0A 23 62 FC | 	wrlong	local03, arg02
2e388     08 14 06 F1 | 	add	arg02, #8
2e38c     10 13 02 F6 | 	mov	arg01, local02
2e390     18 20 62 FD | 	getqx	local02
2e394     0A 21 62 FC | 	wrlong	local02, arg02
2e398     1C 14 86 F1 | 	sub	arg02, #28
2e39c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e3a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3a4     1D 22 06 56 |  if_ne	mov	local03, #29
2e3a8     1C 22 06 A6 |  if_e	mov	local03, #28
2e3ac     02 00 00 FF 
2e3b0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e3b4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e3b8     02 00 00 FF 
2e3bc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e3c0                 | ' 
2e3c0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e3c0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e3c0     00 12 06 F6 | 	mov	arg01, #0
2e3c4     97 2A 48 FB | 	callpa	#(@LR__4712-@LR__4711)>>2,fcache_load_ptr_
2e3c8                 | LR__4711
2e3c8     09 23 02 F6 | 	mov	local03, arg01
2e3cc     02 22 66 F0 | 	shl	local03, #2
2e3d0     02 00 00 FF 
2e3d4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e3d8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e3dc     11 23 02 FB | 	rdlong	local03, local03
2e3e0     11 21 52 F2 | 	cmps	local02, local03 wc
2e3e4     02 00 00 FF 
2e3e8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e3ec     2C 00 90 CD |  if_b	jmp	#LR__4713
2e3f0     09 23 02 F6 | 	mov	local03, arg01
2e3f4     02 22 66 F0 | 	shl	local03, #2
2e3f8     02 00 00 FF 
2e3fc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e400     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e404     11 23 02 FB | 	rdlong	local03, local03
2e408     11 21 82 F1 | 	sub	local02, local03
2e40c     01 12 06 F1 | 	add	arg01, #1
2e410     02 00 00 FF 
2e414     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e418     AC FF 9F FD | 	jmp	#LR__4711
2e41c                 | LR__4712
2e41c                 | LR__4713
2e41c     A8 00 00 FF 
2e420     80 1F 16 FD | 	qdiv	local01, ##86400
2e424     10 14 06 F1 | 	add	arg02, #16
2e428     0A 13 62 FC | 	wrlong	arg01, arg02
2e42c     01 20 06 F1 | 	add	local02, #1
2e430     04 14 86 F1 | 	sub	arg02, #4
2e434     0A 21 62 FC | 	wrlong	local02, arg02
2e438     19 1E 62 FD | 	getqy	local01
2e43c     07 00 00 FF 
2e440     10 1E 16 FD | 	qdiv	local01, ##3600
2e444     18 22 62 FD | 	getqx	local03
2e448     07 00 00 FF 
2e44c     10 1E 16 FD | 	qdiv	local01, ##3600
2e450     04 14 86 F1 | 	sub	arg02, #4
2e454     0A 23 62 FC | 	wrlong	local03, arg02
2e458     19 1E 62 FD | 	getqy	local01
2e45c     3C 1E 16 FD | 	qdiv	local01, #60
2e460     18 22 62 FD | 	getqx	local03
2e464     3C 1E 16 FD | 	qdiv	local01, #60
2e468     04 14 86 F1 | 	sub	arg02, #4
2e46c     0A 23 62 FC | 	wrlong	local03, arg02
2e470     04 14 86 F1 | 	sub	arg02, #4
2e474                 | '         stm->tm_isdst = 0;
2e474                 | ' 
2e474                 | ' ;
2e474                 | '         return stm;
2e474     0A FB 01 F6 | 	mov	result1, arg02
2e478     19 22 62 FD | 	getqy	local03
2e47c     0A 23 62 FC | 	wrlong	local03, arg02
2e480     20 14 06 F1 | 	add	arg02, #32
2e484     0A 01 68 FC | 	wrlong	#0, arg02
2e488     A7 F0 03 F6 | 	mov	ptra, fp
2e48c     B2 00 A0 FD | 	call	#popregs_
2e490                 | _fatfs_cc__gmtime_r_ret
2e490     2D 00 64 FD | 	ret
2e494                 | 
2e494                 | _fatfs_cc__tzset
2e494     7F 01 00 FF 
2e498     D9 13 06 F6 | 	mov	arg01, ##@LR__5025
2e49c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e4a0     FD 12 02 F6 | 	mov	arg01, result1
2e4a4     02 00 00 FF 
2e4a8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e4ac     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e4b0     02 00 00 FF 
2e4b4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e4b8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e4bc     02 00 00 FF 
2e4c0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e4c4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e4c8     02 00 00 FF 
2e4cc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e4d0                 | _fatfs_cc__tzset_ret
2e4d0     2D 00 64 FD | 	ret
2e4d4                 | 
2e4d4                 | _fatfs_cc_getenv
2e4d4     06 4A 05 F6 | 	mov	COUNT_, #6
2e4d8     A8 00 A0 FD | 	call	#pushregs_
2e4dc     09 1F 02 F6 | 	mov	local01, arg01
2e4e0     09 21 02 F6 | 	mov	local02, arg01
2e4e4     97 06 48 FB | 	callpa	#(@LR__4721-@LR__4720)>>2,fcache_load_ptr_
2e4e8                 | LR__4720
2e4e8     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e4ec     01 20 06 51 |  if_ne	add	local02, #1
2e4f0     F4 FF 9F 5D |  if_ne	jmp	#LR__4720
2e4f4                 | LR__4721
2e4f4     09 21 82 F1 | 	sub	local02, arg01
2e4f8     10 FB 01 F6 | 	mov	result1, local02
2e4fc     02 00 00 FF 
2e500     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e504     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e508     02 00 00 FF 
2e50c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e510                 | '             return 0;
2e510     00 FA 05 A6 |  if_e	mov	result1, #0
2e514     5C 00 90 AD |  if_e	jmp	#LR__4724
2e518                 | ' 
2e518                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e518     02 00 00 FF 
2e51c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e520     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e524     02 00 00 FF 
2e528     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e52c                 | LR__4722
2e52c     11 25 0A FB | 	rdlong	local04, local03 wz
2e530     3C 00 90 AD |  if_e	jmp	#LR__4723
2e534     12 13 02 F6 | 	mov	arg01, local04
2e538     0F 15 02 F6 | 	mov	arg02, local01
2e53c     10 17 02 F6 | 	mov	arg03, local02
2e540     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e544     00 FA 0D F2 | 	cmp	result1, #0 wz
2e548     10 27 02 A6 |  if_e	mov	local05, local02
2e54c     12 27 02 A1 |  if_e	add	local05, local04
2e550     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e554     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e558                 | ' 			return name+len+1;
2e558     10 25 02 A1 |  if_e	add	local04, local02
2e55c     01 24 06 A1 |  if_e	add	local04, #1
2e560     12 FB 01 A6 |  if_e	mov	result1, local04
2e564     0C 00 90 AD |  if_e	jmp	#LR__4724
2e568     04 22 06 F1 | 	add	local03, #4
2e56c     BC FF 9F FD | 	jmp	#LR__4722
2e570                 | LR__4723
2e570                 | ' 	}
2e570                 | ' 	return 0;
2e570     00 FA 05 F6 | 	mov	result1, #0
2e574                 | LR__4724
2e574     A7 F0 03 F6 | 	mov	ptra, fp
2e578     B2 00 A0 FD | 	call	#popregs_
2e57c                 | _fatfs_cc_getenv_ret
2e57c     2D 00 64 FD | 	ret
2e580                 | 
2e580                 | _fatfs_cc__get_fattime
2e580     00 4A 05 F6 | 	mov	COUNT_, #0
2e584     A8 00 A0 FD | 	call	#pushregs_
2e588     34 F0 07 F1 | 	add	ptra, #52
2e58c     00 12 06 F6 | 	mov	arg01, #0
2e590     38 FB BF FD | 	call	#_fatfs_cc_time
2e594     04 4E 05 F1 | 	add	fp, #4
2e598     A7 FA 61 FC | 	wrlong	result1, fp
2e59c     A7 12 02 F6 | 	mov	arg01, fp
2e5a0     0C 4E 05 F1 | 	add	fp, #12
2e5a4     A7 14 02 F6 | 	mov	arg02, fp
2e5a8     10 4E 85 F1 | 	sub	fp, #16
2e5ac     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e5b0     24 4E 05 F1 | 	add	fp, #36
2e5b4     A7 14 02 FB | 	rdlong	arg02, fp
2e5b8     50 14 86 F1 | 	sub	arg02, #80
2e5bc     09 14 66 F0 | 	shl	arg02, #9
2e5c0     04 4E 85 F1 | 	sub	fp, #4
2e5c4     A7 FA 01 FB | 	rdlong	result1, fp
2e5c8     01 FA 05 F1 | 	add	result1, #1
2e5cc     05 FA 65 F0 | 	shl	result1, #5
2e5d0     FD 14 42 F5 | 	or	arg02, result1
2e5d4     04 4E 85 F1 | 	sub	fp, #4
2e5d8     A7 FA 01 FB | 	rdlong	result1, fp
2e5dc     FD 14 42 F5 | 	or	arg02, result1
2e5e0     14 4E 85 F1 | 	sub	fp, #20
2e5e4     A7 14 62 FC | 	wrlong	arg02, fp
2e5e8     10 4E 05 F1 | 	add	fp, #16
2e5ec     A7 14 02 FB | 	rdlong	arg02, fp
2e5f0     0B 14 66 F0 | 	shl	arg02, #11
2e5f4     04 4E 85 F1 | 	sub	fp, #4
2e5f8     A7 FA 01 FB | 	rdlong	result1, fp
2e5fc     05 FA 65 F0 | 	shl	result1, #5
2e600     FD 14 42 F5 | 	or	arg02, result1
2e604     04 4E 85 F1 | 	sub	fp, #4
2e608     A7 FA 01 FB | 	rdlong	result1, fp
2e60c     FD 14 42 F5 | 	or	arg02, result1
2e610     04 4E 85 F1 | 	sub	fp, #4
2e614     A7 14 62 FC | 	wrlong	arg02, fp
2e618                 | ' 
2e618                 | '     now = time(0);
2e618                 | '     _gmtime_r (&now, &date);
2e618                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e618                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e618                 | '     return (ffdate << 16) | fftime;
2e618     04 4E 85 F1 | 	sub	fp, #4
2e61c     A7 FA 01 FB | 	rdlong	result1, fp
2e620     10 FA 65 F0 | 	shl	result1, #16
2e624     08 4E 85 F1 | 	sub	fp, #8
2e628     0A FB 41 F5 | 	or	result1, arg02
2e62c     A7 F0 03 F6 | 	mov	ptra, fp
2e630     B2 00 A0 FD | 	call	#popregs_
2e634                 | _fatfs_cc__get_fattime_ret
2e634     2D 00 64 FD | 	ret
2e638                 | 
2e638                 | _fatfs_cc_unixtime_0960
2e638     00 4A 05 F6 | 	mov	COUNT_, #0
2e63c     A8 00 A0 FD | 	call	#pushregs_
2e640     34 F0 07 F1 | 	add	ptra, #52
2e644     04 4E 05 F1 | 	add	fp, #4
2e648     A7 12 62 FC | 	wrlong	arg01, fp
2e64c     04 4E 05 F1 | 	add	fp, #4
2e650     A7 14 62 FC | 	wrlong	arg02, fp
2e654     04 4E 85 F1 | 	sub	fp, #4
2e658     A7 14 02 FB | 	rdlong	arg02, fp
2e65c     09 14 46 F0 | 	shr	arg02, #9
2e660     7F 14 06 F5 | 	and	arg02, #127
2e664     50 FA 05 F6 | 	mov	result1, #80
2e668     0A FB 01 F1 | 	add	result1, arg02
2e66c     20 4E 05 F1 | 	add	fp, #32
2e670     A7 FA 61 FC | 	wrlong	result1, fp
2e674     20 4E 85 F1 | 	sub	fp, #32
2e678     A7 FA 01 FB | 	rdlong	result1, fp
2e67c     05 FA 45 F0 | 	shr	result1, #5
2e680     FD FA 41 F8 | 	getnib	result1, result1, #0
2e684     01 FA 85 F1 | 	sub	result1, #1
2e688     1C 4E 05 F1 | 	add	fp, #28
2e68c     A7 FA 61 FC | 	wrlong	result1, fp
2e690     1C 4E 85 F1 | 	sub	fp, #28
2e694     A7 FA 01 FB | 	rdlong	result1, fp
2e698     1F FA 05 F5 | 	and	result1, #31
2e69c     18 4E 05 F1 | 	add	fp, #24
2e6a0     A7 FA 61 FC | 	wrlong	result1, fp
2e6a4     14 4E 85 F1 | 	sub	fp, #20
2e6a8     A7 FA 01 FB | 	rdlong	result1, fp
2e6ac     0B FA 45 F0 | 	shr	result1, #11
2e6b0     1F FA 05 F5 | 	and	result1, #31
2e6b4     10 4E 05 F1 | 	add	fp, #16
2e6b8     A7 FA 61 FC | 	wrlong	result1, fp
2e6bc     10 4E 85 F1 | 	sub	fp, #16
2e6c0     A7 FA 01 FB | 	rdlong	result1, fp
2e6c4     05 FA 45 F0 | 	shr	result1, #5
2e6c8     3F FA 05 F5 | 	and	result1, #63
2e6cc     0C 4E 05 F1 | 	add	fp, #12
2e6d0     A7 FA 61 FC | 	wrlong	result1, fp
2e6d4     0C 4E 85 F1 | 	sub	fp, #12
2e6d8     A7 14 02 FB | 	rdlong	arg02, fp
2e6dc     1F 14 06 F5 | 	and	arg02, #31
2e6e0     01 14 66 F0 | 	shl	arg02, #1
2e6e4     08 4E 05 F1 | 	add	fp, #8
2e6e8     A7 14 62 FC | 	wrlong	arg02, fp
2e6ec     A7 12 02 F6 | 	mov	arg01, fp
2e6f0     10 4E 85 F1 | 	sub	fp, #16
2e6f4     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e6f8     0C 4E 05 F1 | 	add	fp, #12
2e6fc     A7 FA 61 FC | 	wrlong	result1, fp
2e700                 | ' 
2e700                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e700                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e700                 | '     date.tm_mday = (dosdate & 0x1f);
2e700                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e700                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e700                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e700                 | ' 
2e700                 | '     t = mktime(&date);
2e700                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e700                 | '     return t;
2e700     0C 4E 85 F1 | 	sub	fp, #12
2e704     A7 F0 03 F6 | 	mov	ptra, fp
2e708     B2 00 A0 FD | 	call	#popregs_
2e70c                 | _fatfs_cc_unixtime_0960_ret
2e70c     2D 00 64 FD | 	ret
2e710                 | 
2e710                 | _fatfs_cc__set_dos_error_0962
2e710     09 01 02 F6 | 	mov	_var01, arg01
2e714                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e714                 | '     switch (derr) {
2e714     14 00 26 F3 | 	fle	_var01, #20
2e718     30 00 62 FD | 	jmprel	_var01
2e71c                 | LR__4730
2e71c     50 00 90 FD | 	jmp	#LR__4731
2e720     84 00 90 FD | 	jmp	#LR__4745
2e724     80 00 90 FD | 	jmp	#LR__4746
2e728     7C 00 90 FD | 	jmp	#LR__4747
2e72c     48 00 90 FD | 	jmp	#LR__4732
2e730     44 00 90 FD | 	jmp	#LR__4733
2e734     40 00 90 FD | 	jmp	#LR__4734
2e738     44 00 90 FD | 	jmp	#LR__4735
2e73c     48 00 90 FD | 	jmp	#LR__4737
2e740     54 00 90 FD | 	jmp	#LR__4740
2e744     38 00 90 FD | 	jmp	#LR__4736
2e748     4C 00 90 FD | 	jmp	#LR__4741
2e74c     48 00 90 FD | 	jmp	#LR__4742
2e750     44 00 90 FD | 	jmp	#LR__4743
2e754     50 00 90 FD | 	jmp	#LR__4748
2e758     4C 00 90 FD | 	jmp	#LR__4748
2e75c     48 00 90 FD | 	jmp	#LR__4748
2e760     2C 00 90 FD | 	jmp	#LR__4738
2e764     38 00 90 FD | 	jmp	#LR__4744
2e768     2C 00 90 FD | 	jmp	#LR__4739
2e76c     38 00 90 FD | 	jmp	#LR__4748
2e770                 | LR__4731
2e770     00 02 06 F6 | 	mov	_var02, #0
2e774                 | '         r = 0;
2e774                 | '         break;
2e774     34 00 90 FD | 	jmp	#LR__4749
2e778                 | LR__4732
2e778                 | LR__4733
2e778                 | LR__4734
2e778     04 02 06 F6 | 	mov	_var02, #4
2e77c                 | '         r =  4 ;
2e77c                 | '         break;
2e77c     2C 00 90 FD | 	jmp	#LR__4749
2e780                 | LR__4735
2e780                 | LR__4736
2e780     06 02 06 F6 | 	mov	_var02, #6
2e784                 | '         r =  6 ;
2e784                 | '         break;
2e784     24 00 90 FD | 	jmp	#LR__4749
2e788                 | LR__4737
2e788     09 02 06 F6 | 	mov	_var02, #9
2e78c                 | '         r =  9 ;
2e78c                 | '         break;
2e78c     1C 00 90 FD | 	jmp	#LR__4749
2e790                 | LR__4738
2e790     07 02 06 F6 | 	mov	_var02, #7
2e794                 | '         r =  7 ;
2e794                 | '         break;
2e794     14 00 90 FD | 	jmp	#LR__4749
2e798                 | LR__4739
2e798                 | LR__4740
2e798                 | LR__4741
2e798                 | LR__4742
2e798                 | LR__4743
2e798     0A 02 06 F6 | 	mov	_var02, #10
2e79c                 | '         r =  10 ;
2e79c                 | '         break;
2e79c     0C 00 90 FD | 	jmp	#LR__4749
2e7a0                 | LR__4744
2e7a0     0B 02 06 F6 | 	mov	_var02, #11
2e7a4                 | '         r =  11 ;
2e7a4                 | '         break;
2e7a4     04 00 90 FD | 	jmp	#LR__4749
2e7a8                 | LR__4745
2e7a8                 | LR__4746
2e7a8                 | LR__4747
2e7a8                 | LR__4748
2e7a8     0C 02 06 F6 | 	mov	_var02, #12
2e7ac                 | '         r =  12 ;
2e7ac                 | '         break;
2e7ac                 | LR__4749
2e7ac                 | '     }
2e7ac                 | '     return _seterror(r);
2e7ac     00 02 4E F2 | 	cmps	_var02, #0 wz
2e7b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e7b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e7b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e7bc     01 FA 65 56 |  if_ne	neg	result1, #1
2e7c0     00 FA 05 A6 |  if_e	mov	result1, #0
2e7c4                 | _fatfs_cc__set_dos_error_0962_ret
2e7c4     2D 00 64 FD | 	ret
2e7c8                 | 
2e7c8                 | _fatfs_cc_v_creat
2e7c8     04 4A 05 F6 | 	mov	COUNT_, #4
2e7cc     A8 00 A0 FD | 	call	#pushregs_
2e7d0     09 1F 02 F6 | 	mov	local01, arg01
2e7d4     0A 21 02 F6 | 	mov	local02, arg02
2e7d8     03 00 00 FF 
2e7dc     3C 12 06 F6 | 	mov	arg01, ##1596
2e7e0                 | '     return _gc_alloc(size);
2e7e0     10 14 06 F6 | 	mov	arg02, #16
2e7e4     28 5E BF FD | 	call	#__system___gc_doalloc
2e7e8     FD 22 0A F6 | 	mov	local03, result1 wz
2e7ec                 | '       return _seterror( 7 );
2e7ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e7f0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e7f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e7f8     01 FA 65 A6 |  if_e	neg	result1, #1
2e7fc     58 00 90 AD |  if_e	jmp	#LR__4751
2e800     11 13 02 F6 | 	mov	arg01, local03
2e804     00 14 06 F6 | 	mov	arg02, #0
2e808     03 00 00 FF 
2e80c     3C 16 06 F6 | 	mov	arg03, ##1596
2e810     98 00 A0 FD | 	call	#\builtin_bytefill_
2e814     02 00 00 FF 
2e818     14 22 06 F1 | 	add	local03, ##1044
2e81c     11 13 02 F6 | 	mov	arg01, local03
2e820     02 00 00 FF 
2e824     14 22 86 F1 | 	sub	local03, ##1044
2e828     10 15 02 F6 | 	mov	arg02, local02
2e82c     07 16 06 F6 | 	mov	arg03, #7
2e830     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2e834     FD 24 0A F6 | 	mov	local04, result1 wz
2e838     14 00 90 AD |  if_e	jmp	#LR__4750
2e83c     11 13 02 F6 | 	mov	arg01, local03
2e840                 | '     return _gc_free(ptr);
2e840     D8 5E BF FD | 	call	#__system___gc_free
2e844                 | '     free(f);
2e844                 | '     return _set_dos_error(r);
2e844     12 13 02 F6 | 	mov	arg01, local04
2e848     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2e84c     08 00 90 FD | 	jmp	#LR__4751
2e850                 | LR__4750
2e850     0F 23 62 FC | 	wrlong	local03, local01
2e854                 | '   }
2e854                 | '   fil->vfsdata = f;
2e854                 | '   return 0;
2e854     00 FA 05 F6 | 	mov	result1, #0
2e858                 | LR__4751
2e858     A7 F0 03 F6 | 	mov	ptra, fp
2e85c     B2 00 A0 FD | 	call	#popregs_
2e860                 | _fatfs_cc_v_creat_ret
2e860     2D 00 64 FD | 	ret
2e864                 | 
2e864                 | _fatfs_cc_v_close
2e864     02 4A 05 F6 | 	mov	COUNT_, #2
2e868     A8 00 A0 FD | 	call	#pushregs_
2e86c     09 1F 02 FB | 	rdlong	local01, arg01
2e870     02 00 00 FF 
2e874     14 1E 06 F1 | 	add	local01, ##1044
2e878     0F 13 02 F6 | 	mov	arg01, local01
2e87c     02 00 00 FF 
2e880     14 1E 86 F1 | 	sub	local01, ##1044
2e884     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2e888     FD 20 02 F6 | 	mov	local02, result1
2e88c     0F 13 02 F6 | 	mov	arg01, local01
2e890                 | '     return _gc_free(ptr);
2e890     88 5E BF FD | 	call	#__system___gc_free
2e894                 | '     FAT_FIL *f = fil->vfsdata;
2e894                 | '     r=f_close(&f->fil);
2e894                 | '     free(f);
2e894                 | '     return _set_dos_error(r);
2e894     10 13 02 F6 | 	mov	arg01, local02
2e898     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2e89c     A7 F0 03 F6 | 	mov	ptra, fp
2e8a0     B2 00 A0 FD | 	call	#popregs_
2e8a4                 | _fatfs_cc_v_close_ret
2e8a4     2D 00 64 FD | 	ret
2e8a8                 | 
2e8a8                 | _fatfs_cc_v_opendir
2e8a8     04 4A 05 F6 | 	mov	COUNT_, #4
2e8ac     A8 00 A0 FD | 	call	#pushregs_
2e8b0     09 1F 02 F6 | 	mov	local01, arg01
2e8b4     0A 21 02 F6 | 	mov	local02, arg02
2e8b8     30 12 06 F6 | 	mov	arg01, #48
2e8bc                 | '     return _gc_alloc(size);
2e8bc     10 14 06 F6 | 	mov	arg02, #16
2e8c0     4C 5D BF FD | 	call	#__system___gc_doalloc
2e8c4     FD 22 0A F6 | 	mov	local03, result1 wz
2e8c8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e8c8                 | '       return _seterror( 7 );
2e8c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e8cc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e8d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e8d4     01 FA 65 A6 |  if_e	neg	result1, #1
2e8d8     34 00 90 AD |  if_e	jmp	#LR__4761
2e8dc     10 15 02 F6 | 	mov	arg02, local02
2e8e0     11 13 02 F6 | 	mov	arg01, local03
2e8e4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2e8e8     FD 24 0A F6 | 	mov	local04, result1 wz
2e8ec     14 00 90 AD |  if_e	jmp	#LR__4760
2e8f0     11 13 02 F6 | 	mov	arg01, local03
2e8f4                 | '     return _gc_free(ptr);
2e8f4     24 5E BF FD | 	call	#__system___gc_free
2e8f8                 | '         free(f);
2e8f8                 | '         return _set_dos_error(r);
2e8f8     12 13 02 F6 | 	mov	arg01, local04
2e8fc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2e900     0C 00 90 FD | 	jmp	#LR__4761
2e904                 | LR__4760
2e904     04 1E 06 F1 | 	add	local01, #4
2e908     0F 23 62 FC | 	wrlong	local03, local01
2e90c                 | '     }
2e90c                 | '     dir->vfsdata = f;
2e90c                 | '     return 0;
2e90c     00 FA 05 F6 | 	mov	result1, #0
2e910                 | LR__4761
2e910     A7 F0 03 F6 | 	mov	ptra, fp
2e914     B2 00 A0 FD | 	call	#popregs_
2e918                 | _fatfs_cc_v_opendir_ret
2e918     2D 00 64 FD | 	ret
2e91c                 | 
2e91c                 | _fatfs_cc_v_closedir
2e91c     02 4A 05 F6 | 	mov	COUNT_, #2
2e920     A8 00 A0 FD | 	call	#pushregs_
2e924     04 12 06 F1 | 	add	arg01, #4
2e928     09 1F 02 FB | 	rdlong	local01, arg01
2e92c     0F 13 02 F6 | 	mov	arg01, local01
2e930     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2e934     FD 20 02 F6 | 	mov	local02, result1
2e938     0F 13 02 F6 | 	mov	arg01, local01
2e93c                 | '     return _gc_free(ptr);
2e93c     DC 5D BF FD | 	call	#__system___gc_free
2e940     00 20 0E F2 | 	cmp	local02, #0 wz
2e944     10 13 02 56 |  if_ne	mov	arg01, local02
2e948     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2e94c                 | '     return r;
2e94c     10 FB 01 F6 | 	mov	result1, local02
2e950     A7 F0 03 F6 | 	mov	ptra, fp
2e954     B2 00 A0 FD | 	call	#popregs_
2e958                 | _fatfs_cc_v_closedir_ret
2e958     2D 00 64 FD | 	ret
2e95c                 | 
2e95c                 | _fatfs_cc_v_readdir
2e95c     01 4A 05 F6 | 	mov	COUNT_, #1
2e960     A8 00 A0 FD | 	call	#pushregs_
2e964     2C F1 07 F1 | 	add	ptra, #300
2e968     04 4E 05 F1 | 	add	fp, #4
2e96c     A7 12 62 FC | 	wrlong	arg01, fp
2e970     04 4E 05 F1 | 	add	fp, #4
2e974     A7 14 62 FC | 	wrlong	arg02, fp
2e978     04 4E 85 F1 | 	sub	fp, #4
2e97c     A7 16 02 FB | 	rdlong	arg03, fp
2e980     04 16 06 F1 | 	add	arg03, #4
2e984     0B 13 02 FB | 	rdlong	arg01, arg03
2e988     08 4E 05 F1 | 	add	fp, #8
2e98c     A7 14 02 F6 | 	mov	arg02, fp
2e990     0C 4E 85 F1 | 	sub	fp, #12
2e994     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2e998     28 4F 05 F1 | 	add	fp, #296
2e99c     A7 FA 61 FC | 	wrlong	result1, fp
2e9a0     28 4F 85 F1 | 	sub	fp, #296
2e9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e9a8     14 00 90 AD |  if_e	jmp	#LR__4770
2e9ac                 | '         return _set_dos_error(r);
2e9ac     28 4F 05 F1 | 	add	fp, #296
2e9b0     A7 12 02 FB | 	rdlong	arg01, fp
2e9b4     28 4F 85 F1 | 	sub	fp, #296
2e9b8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2e9bc     C4 00 90 FD | 	jmp	#LR__4773
2e9c0                 | LR__4770
2e9c0     28 4E 05 F1 | 	add	fp, #40
2e9c4     A7 16 CA FA | 	rdbyte	arg03, fp wz
2e9c8     28 4E 85 F1 | 	sub	fp, #40
2e9cc                 | '         return -1;
2e9cc     01 FA 65 A6 |  if_e	neg	result1, #1
2e9d0     B0 00 90 AD |  if_e	jmp	#LR__4773
2e9d4     08 4E 05 F1 | 	add	fp, #8
2e9d8     A7 12 02 FB | 	rdlong	arg01, fp
2e9dc     20 4E 05 F1 | 	add	fp, #32
2e9e0     A7 14 02 F6 | 	mov	arg02, fp
2e9e4     28 4E 85 F1 | 	sub	fp, #40
2e9e8     3F 16 06 F6 | 	mov	arg03, #63
2e9ec     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2e9f0     08 4E 05 F1 | 	add	fp, #8
2e9f4     A7 16 02 FB | 	rdlong	arg03, fp
2e9f8     3F 16 06 F1 | 	add	arg03, #63
2e9fc     0B 01 48 FC | 	wrbyte	#0, arg03
2ea00     0C 4E 05 F1 | 	add	fp, #12
2ea04     A7 16 C2 FA | 	rdbyte	arg03, fp
2ea08     14 4E 85 F1 | 	sub	fp, #20
2ea0c     10 16 CE F7 | 	test	arg03, #16 wz
2ea10     18 00 90 AD |  if_e	jmp	#LR__4771
2ea14     08 4E 05 F1 | 	add	fp, #8
2ea18     A7 16 02 FB | 	rdlong	arg03, fp
2ea1c     08 4E 85 F1 | 	sub	fp, #8
2ea20     50 16 06 F1 | 	add	arg03, #80
2ea24     0B 03 48 FC | 	wrbyte	#1, arg03
2ea28     14 00 90 FD | 	jmp	#LR__4772
2ea2c                 | LR__4771
2ea2c     08 4E 05 F1 | 	add	fp, #8
2ea30     A7 16 02 FB | 	rdlong	arg03, fp
2ea34     08 4E 85 F1 | 	sub	fp, #8
2ea38     50 16 06 F1 | 	add	arg03, #80
2ea3c     0B 01 48 FC | 	wrbyte	#0, arg03
2ea40                 | LR__4772
2ea40     08 4E 05 F1 | 	add	fp, #8
2ea44     A7 16 02 FB | 	rdlong	arg03, fp
2ea48     04 4E 05 F1 | 	add	fp, #4
2ea4c     A7 14 02 FB | 	rdlong	arg02, fp
2ea50     48 16 06 F1 | 	add	arg03, #72
2ea54     0B 15 62 FC | 	wrlong	arg02, arg03
2ea58     04 4E 85 F1 | 	sub	fp, #4
2ea5c     A7 1E 02 FB | 	rdlong	local01, fp
2ea60     08 4E 05 F1 | 	add	fp, #8
2ea64     A7 12 E2 FA | 	rdword	arg01, fp
2ea68     02 4E 05 F1 | 	add	fp, #2
2ea6c     A7 14 E2 FA | 	rdword	arg02, fp
2ea70     12 4E 85 F1 | 	sub	fp, #18
2ea74     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ea78     4C 1E 06 F1 | 	add	local01, #76
2ea7c     0F FB 61 FC | 	wrlong	result1, local01
2ea80                 | '         ent->d_type =  (0) ;
2ea80                 | '     }
2ea80                 | '     ent->d_size = finfo.fsize;
2ea80                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ea80                 | '     return 0;
2ea80     00 FA 05 F6 | 	mov	result1, #0
2ea84                 | LR__4773
2ea84     A7 F0 03 F6 | 	mov	ptra, fp
2ea88     B2 00 A0 FD | 	call	#popregs_
2ea8c                 | _fatfs_cc_v_readdir_ret
2ea8c     2D 00 64 FD | 	ret
2ea90                 | 
2ea90                 | _fatfs_cc_v_stat
2ea90     03 4A 05 F6 | 	mov	COUNT_, #3
2ea94     A8 00 A0 FD | 	call	#pushregs_
2ea98     30 F1 07 F1 | 	add	ptra, #304
2ea9c     04 4E 05 F1 | 	add	fp, #4
2eaa0     A7 12 62 FC | 	wrlong	arg01, fp
2eaa4     04 4E 05 F1 | 	add	fp, #4
2eaa8     A7 14 62 FC | 	wrlong	arg02, fp
2eaac     08 4E 85 F1 | 	sub	fp, #8
2eab0     0A 13 02 F6 | 	mov	arg01, arg02
2eab4     00 14 06 F6 | 	mov	arg02, #0
2eab8     30 16 06 F6 | 	mov	arg03, #48
2eabc     98 00 A0 FD | 	call	#\builtin_bytefill_
2eac0     04 4E 05 F1 | 	add	fp, #4
2eac4     A7 FA 01 FB | 	rdlong	result1, fp
2eac8     04 4E 85 F1 | 	sub	fp, #4
2eacc     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ead0     2C 00 90 AD |  if_e	jmp	#LR__4780
2ead4     04 4E 05 F1 | 	add	fp, #4
2ead8     A7 FA 01 FB | 	rdlong	result1, fp
2eadc     04 4E 85 F1 | 	sub	fp, #4
2eae0     FD FA C1 FA | 	rdbyte	result1, result1
2eae4     2E FA 0D F2 | 	cmp	result1, #46 wz
2eae8     04 4E 05 A1 |  if_e	add	fp, #4
2eaec     A7 1E 02 AB |  if_e	rdlong	local01, fp
2eaf0     04 4E 85 A1 |  if_e	sub	fp, #4
2eaf4     01 1E 06 A1 |  if_e	add	local01, #1
2eaf8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2eafc     18 00 90 5D |  if_ne	jmp	#LR__4781
2eb00                 | LR__4780
2eb00     18 4E 05 F1 | 	add	fp, #24
2eb04     A7 20 48 FC | 	wrbyte	#16, fp
2eb08     0C 4E 85 F1 | 	sub	fp, #12
2eb0c     A7 00 68 FC | 	wrlong	#0, fp
2eb10     0C 4E 85 F1 | 	sub	fp, #12
2eb14     24 00 90 FD | 	jmp	#LR__4782
2eb18                 | LR__4781
2eb18     04 4E 05 F1 | 	add	fp, #4
2eb1c     A7 12 02 FB | 	rdlong	arg01, fp
2eb20     0C 4E 05 F1 | 	add	fp, #12
2eb24     A7 14 02 F6 | 	mov	arg02, fp
2eb28     10 4E 85 F1 | 	sub	fp, #16
2eb2c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2eb30     0C 4E 05 F1 | 	add	fp, #12
2eb34     A7 FA 61 FC | 	wrlong	result1, fp
2eb38     0C 4E 85 F1 | 	sub	fp, #12
2eb3c                 | LR__4782
2eb3c     0C 4E 05 F1 | 	add	fp, #12
2eb40     A7 20 0A FB | 	rdlong	local02, fp wz
2eb44     0C 4E 85 F1 | 	sub	fp, #12
2eb48     14 00 90 AD |  if_e	jmp	#LR__4783
2eb4c                 | '         return _set_dos_error(r);
2eb4c     0C 4E 05 F1 | 	add	fp, #12
2eb50     A7 12 02 FB | 	rdlong	arg01, fp
2eb54     0C 4E 85 F1 | 	sub	fp, #12
2eb58     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb5c     14 01 90 FD | 	jmp	#LR__4784
2eb60                 | LR__4783
2eb60     2C 4F 05 F1 | 	add	fp, #300
2eb64     A7 48 6A FC | 	wrlong	#292, fp
2eb68     14 4F 85 F1 | 	sub	fp, #276
2eb6c     A7 22 C2 FA | 	rdbyte	local03, fp
2eb70     18 4E 85 F1 | 	sub	fp, #24
2eb74     01 22 CE F7 | 	test	local03, #1 wz
2eb78     2C 4F 05 A1 |  if_e	add	fp, #300
2eb7c     A7 22 02 AB |  if_e	rdlong	local03, fp
2eb80     92 22 46 A5 |  if_e	or	local03, #146
2eb84     A7 22 62 AC |  if_e	wrlong	local03, fp
2eb88     2C 4F 85 A1 |  if_e	sub	fp, #300
2eb8c     18 4E 05 F1 | 	add	fp, #24
2eb90     A7 22 C2 FA | 	rdbyte	local03, fp
2eb94     18 4E 85 F1 | 	sub	fp, #24
2eb98     10 22 CE F7 | 	test	local03, #16 wz
2eb9c     2C 4F 05 51 |  if_ne	add	fp, #300
2eba0     A7 22 02 5B |  if_ne	rdlong	local03, fp
2eba4     08 00 00 5F 
2eba8     49 22 46 55 |  if_ne	or	local03, ##4169
2ebac     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ebb0     2C 4F 85 51 |  if_ne	sub	fp, #300
2ebb4     08 4E 05 F1 | 	add	fp, #8
2ebb8     A7 22 02 FB | 	rdlong	local03, fp
2ebbc     24 4F 05 F1 | 	add	fp, #292
2ebc0     A7 20 02 FB | 	rdlong	local02, fp
2ebc4     08 22 06 F1 | 	add	local03, #8
2ebc8     11 21 62 FC | 	wrlong	local02, local03
2ebcc     24 4F 85 F1 | 	sub	fp, #292
2ebd0     A7 22 02 FB | 	rdlong	local03, fp
2ebd4     0C 22 06 F1 | 	add	local03, #12
2ebd8     11 03 68 FC | 	wrlong	#1, local03
2ebdc     A7 22 02 FB | 	rdlong	local03, fp
2ebe0     08 4E 05 F1 | 	add	fp, #8
2ebe4     A7 20 02 FB | 	rdlong	local02, fp
2ebe8     18 22 06 F1 | 	add	local03, #24
2ebec     11 21 62 FC | 	wrlong	local02, local03
2ebf0     08 4E 85 F1 | 	sub	fp, #8
2ebf4     A7 22 02 FB | 	rdlong	local03, fp
2ebf8     1C 22 06 F1 | 	add	local03, #28
2ebfc     01 00 80 FF 
2ec00     11 01 68 FC | 	wrlong	##512, local03
2ec04     A7 20 02 FB | 	rdlong	local02, fp
2ec08     10 23 02 F6 | 	mov	local03, local02
2ec0c     18 20 06 F1 | 	add	local02, #24
2ec10     10 21 02 FB | 	rdlong	local02, local02
2ec14     FF 21 06 F1 | 	add	local02, #511
2ec18     10 21 52 F6 | 	abs	local02, local02 wc
2ec1c     09 20 46 F0 | 	shr	local02, #9
2ec20     10 21 82 F6 | 	negc	local02, local02
2ec24     20 22 06 F1 | 	add	local03, #32
2ec28     11 21 62 FC | 	wrlong	local02, local03
2ec2c     A7 20 02 FB | 	rdlong	local02, fp
2ec30     10 23 02 F6 | 	mov	local03, local02
2ec34     10 1F 02 F6 | 	mov	local01, local02
2ec38     0C 4E 05 F1 | 	add	fp, #12
2ec3c     A7 12 E2 FA | 	rdword	arg01, fp
2ec40     02 4E 05 F1 | 	add	fp, #2
2ec44     A7 14 E2 FA | 	rdword	arg02, fp
2ec48     16 4E 85 F1 | 	sub	fp, #22
2ec4c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2ec50     2C 1E 06 F1 | 	add	local01, #44
2ec54     0F FB 61 FC | 	wrlong	result1, local01
2ec58     28 20 06 F1 | 	add	local02, #40
2ec5c     10 FB 61 FC | 	wrlong	result1, local02
2ec60     24 22 06 F1 | 	add	local03, #36
2ec64     11 FB 61 FC | 	wrlong	result1, local03
2ec68                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ec68                 | '     }
2ec68                 | '     buf->st_mode = mode;
2ec68                 | '     buf->st_nlink = 1;
2ec68                 | '     buf->st_size = finfo.fsize;
2ec68                 | '     buf->st_blksize = 512;
2ec68                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ec68                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ec68                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ec68                 | '     return r;
2ec68     0C 4E 05 F1 | 	add	fp, #12
2ec6c     A7 FA 01 FB | 	rdlong	result1, fp
2ec70     0C 4E 85 F1 | 	sub	fp, #12
2ec74                 | LR__4784
2ec74     A7 F0 03 F6 | 	mov	ptra, fp
2ec78     B2 00 A0 FD | 	call	#popregs_
2ec7c                 | _fatfs_cc_v_stat_ret
2ec7c     2D 00 64 FD | 	ret
2ec80                 | 
2ec80                 | _fatfs_cc_v_read
2ec80     00 4A 05 F6 | 	mov	COUNT_, #0
2ec84     A8 00 A0 FD | 	call	#pushregs_
2ec88     1C F0 07 F1 | 	add	ptra, #28
2ec8c     04 4E 05 F1 | 	add	fp, #4
2ec90     A7 12 62 FC | 	wrlong	arg01, fp
2ec94     04 4E 05 F1 | 	add	fp, #4
2ec98     A7 14 62 FC | 	wrlong	arg02, fp
2ec9c     04 4E 05 F1 | 	add	fp, #4
2eca0     A7 16 62 FC | 	wrlong	arg03, fp
2eca4     08 4E 85 F1 | 	sub	fp, #8
2eca8     A7 12 02 FB | 	rdlong	arg01, fp
2ecac     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ecb0     0C 4E 05 F1 | 	add	fp, #12
2ecb4     A7 12 62 FC | 	wrlong	arg01, fp
2ecb8     10 4E 85 F1 | 	sub	fp, #16
2ecbc                 | '         return _seterror( 5 );
2ecbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ecc0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ecc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ecc8     01 FA 65 A6 |  if_e	neg	result1, #1
2eccc     B8 00 90 AD |  if_e	jmp	#LR__4792
2ecd0     10 4E 05 F1 | 	add	fp, #16
2ecd4     A7 12 02 FB | 	rdlong	arg01, fp
2ecd8     02 00 00 FF 
2ecdc     14 12 06 F1 | 	add	arg01, ##1044
2ece0     08 4E 85 F1 | 	sub	fp, #8
2ece4     A7 14 02 FB | 	rdlong	arg02, fp
2ece8     04 4E 05 F1 | 	add	fp, #4
2ecec     A7 16 02 FB | 	rdlong	arg03, fp
2ecf0     0C 4E 05 F1 | 	add	fp, #12
2ecf4     A7 18 02 F6 | 	mov	arg04, fp
2ecf8     18 4E 85 F1 | 	sub	fp, #24
2ecfc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ed00     14 4E 05 F1 | 	add	fp, #20
2ed04     A7 FA 61 FC | 	wrlong	result1, fp
2ed08     14 4E 85 F1 | 	sub	fp, #20
2ed0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed10     34 00 90 AD |  if_e	jmp	#LR__4790
2ed14     04 4E 05 F1 | 	add	fp, #4
2ed18     A7 18 02 FB | 	rdlong	arg04, fp
2ed1c     0C 17 02 F6 | 	mov	arg03, arg04
2ed20     08 18 06 F1 | 	add	arg04, #8
2ed24     0C 19 02 FB | 	rdlong	arg04, arg04
2ed28     20 18 46 F5 | 	or	arg04, #32
2ed2c     08 16 06 F1 | 	add	arg03, #8
2ed30     0B 19 62 FC | 	wrlong	arg04, arg03
2ed34                 | '         fil->state |=  (0x20) ;
2ed34                 | '         return _set_dos_error(r);
2ed34     10 4E 05 F1 | 	add	fp, #16
2ed38     A7 12 02 FB | 	rdlong	arg01, fp
2ed3c     14 4E 85 F1 | 	sub	fp, #20
2ed40     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed44     40 00 90 FD | 	jmp	#LR__4792
2ed48                 | LR__4790
2ed48     18 4E 05 F1 | 	add	fp, #24
2ed4c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ed50     18 4E 85 F1 | 	sub	fp, #24
2ed54     24 00 90 5D |  if_ne	jmp	#LR__4791
2ed58     04 4E 05 F1 | 	add	fp, #4
2ed5c     A7 FA 01 FB | 	rdlong	result1, fp
2ed60     FD 18 02 F6 | 	mov	arg04, result1
2ed64     04 4E 85 F1 | 	sub	fp, #4
2ed68     08 FA 05 F1 | 	add	result1, #8
2ed6c     FD FA 01 FB | 	rdlong	result1, result1
2ed70     10 FA 45 F5 | 	or	result1, #16
2ed74     08 18 06 F1 | 	add	arg04, #8
2ed78     0C FB 61 FC | 	wrlong	result1, arg04
2ed7c                 | LR__4791
2ed7c                 | '         fil->state |=  (0x10) ;
2ed7c                 | '     }
2ed7c                 | '     return x;
2ed7c     18 4E 05 F1 | 	add	fp, #24
2ed80     A7 FA 01 FB | 	rdlong	result1, fp
2ed84     18 4E 85 F1 | 	sub	fp, #24
2ed88                 | LR__4792
2ed88     A7 F0 03 F6 | 	mov	ptra, fp
2ed8c     B2 00 A0 FD | 	call	#popregs_
2ed90                 | _fatfs_cc_v_read_ret
2ed90     2D 00 64 FD | 	ret
2ed94                 | 
2ed94                 | _fatfs_cc_v_write
2ed94     00 4A 05 F6 | 	mov	COUNT_, #0
2ed98     A8 00 A0 FD | 	call	#pushregs_
2ed9c     1C F0 07 F1 | 	add	ptra, #28
2eda0     04 4E 05 F1 | 	add	fp, #4
2eda4     A7 12 62 FC | 	wrlong	arg01, fp
2eda8     04 4E 05 F1 | 	add	fp, #4
2edac     A7 14 62 FC | 	wrlong	arg02, fp
2edb0     04 4E 05 F1 | 	add	fp, #4
2edb4     A7 16 62 FC | 	wrlong	arg03, fp
2edb8     08 4E 85 F1 | 	sub	fp, #8
2edbc     A7 12 02 FB | 	rdlong	arg01, fp
2edc0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2edc4     0C 4E 05 F1 | 	add	fp, #12
2edc8     A7 12 62 FC | 	wrlong	arg01, fp
2edcc     10 4E 85 F1 | 	sub	fp, #16
2edd0                 | '         return _seterror( 5 );
2edd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2edd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2edd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eddc     01 FA 65 A6 |  if_e	neg	result1, #1
2ede0     84 00 90 AD |  if_e	jmp	#LR__4801
2ede4     10 4E 05 F1 | 	add	fp, #16
2ede8     A7 12 02 FB | 	rdlong	arg01, fp
2edec     02 00 00 FF 
2edf0     14 12 06 F1 | 	add	arg01, ##1044
2edf4     08 4E 85 F1 | 	sub	fp, #8
2edf8     A7 14 02 FB | 	rdlong	arg02, fp
2edfc     04 4E 05 F1 | 	add	fp, #4
2ee00     A7 16 02 FB | 	rdlong	arg03, fp
2ee04     0C 4E 05 F1 | 	add	fp, #12
2ee08     A7 18 02 F6 | 	mov	arg04, fp
2ee0c     18 4E 85 F1 | 	sub	fp, #24
2ee10     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ee14     14 4E 05 F1 | 	add	fp, #20
2ee18     A7 FA 61 FC | 	wrlong	result1, fp
2ee1c     14 4E 85 F1 | 	sub	fp, #20
2ee20     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee24     34 00 90 AD |  if_e	jmp	#LR__4800
2ee28     04 4E 05 F1 | 	add	fp, #4
2ee2c     A7 18 02 FB | 	rdlong	arg04, fp
2ee30     0C 17 02 F6 | 	mov	arg03, arg04
2ee34     08 18 06 F1 | 	add	arg04, #8
2ee38     0C 19 02 FB | 	rdlong	arg04, arg04
2ee3c     20 18 46 F5 | 	or	arg04, #32
2ee40     08 16 06 F1 | 	add	arg03, #8
2ee44     0B 19 62 FC | 	wrlong	arg04, arg03
2ee48                 | '         fil->state |=  (0x20) ;
2ee48                 | '         return _set_dos_error(r);
2ee48     10 4E 05 F1 | 	add	fp, #16
2ee4c     A7 12 02 FB | 	rdlong	arg01, fp
2ee50     14 4E 85 F1 | 	sub	fp, #20
2ee54     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ee58     0C 00 90 FD | 	jmp	#LR__4801
2ee5c                 | LR__4800
2ee5c                 | '     }
2ee5c                 | '     return x;
2ee5c     18 4E 05 F1 | 	add	fp, #24
2ee60     A7 FA 01 FB | 	rdlong	result1, fp
2ee64     18 4E 85 F1 | 	sub	fp, #24
2ee68                 | LR__4801
2ee68     A7 F0 03 F6 | 	mov	ptra, fp
2ee6c     B2 00 A0 FD | 	call	#popregs_
2ee70                 | _fatfs_cc_v_write_ret
2ee70     2D 00 64 FD | 	ret
2ee74                 | 
2ee74                 | _fatfs_cc_v_lseek
2ee74     04 4A 05 F6 | 	mov	COUNT_, #4
2ee78     A8 00 A0 FD | 	call	#pushregs_
2ee7c     0A 1F 02 F6 | 	mov	local01, arg02
2ee80     0B 21 02 F6 | 	mov	local02, arg03
2ee84     09 23 02 FB | 	rdlong	local03, arg01
2ee88     02 00 00 FF 
2ee8c     14 22 0E F1 | 	add	local03, ##1044 wz
2ee90                 | '         return _seterror( 5 );
2ee90     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ee94     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ee98     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ee9c     01 FA 65 A6 |  if_e	neg	result1, #1
2eea0     4C 00 90 AD |  if_e	jmp	#LR__4812
2eea4     00 20 0E F2 | 	cmp	local02, #0 wz
2eea8     24 00 90 AD |  if_e	jmp	#LR__4810
2eeac     01 20 0E F2 | 	cmp	local02, #1 wz
2eeb0     14 22 06 A1 |  if_e	add	local03, #20
2eeb4     11 25 02 AB |  if_e	rdlong	local04, local03
2eeb8     14 22 86 A1 |  if_e	sub	local03, #20
2eebc     12 1F 02 A1 |  if_e	add	local01, local04
2eec0     0C 22 06 51 |  if_ne	add	local03, #12
2eec4     11 25 02 5B |  if_ne	rdlong	local04, local03
2eec8     0C 22 86 51 |  if_ne	sub	local03, #12
2eecc     12 1F 02 51 |  if_ne	add	local01, local04
2eed0                 | LR__4810
2eed0     0F 15 02 F6 | 	mov	arg02, local01
2eed4     11 13 02 F6 | 	mov	arg01, local03
2eed8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2eedc     FD 12 0A F6 | 	mov	arg01, result1 wz
2eee0     08 00 90 AD |  if_e	jmp	#LR__4811
2eee4                 | '         return _set_dos_error(result);
2eee4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eee8     04 00 90 FD | 	jmp	#LR__4812
2eeec                 | LR__4811
2eeec                 | '     }
2eeec                 | '     return offset;
2eeec     0F FB 01 F6 | 	mov	result1, local01
2eef0                 | LR__4812
2eef0     A7 F0 03 F6 | 	mov	ptra, fp
2eef4     B2 00 A0 FD | 	call	#popregs_
2eef8                 | _fatfs_cc_v_lseek_ret
2eef8     2D 00 64 FD | 	ret
2eefc                 | 
2eefc                 | _fatfs_cc_v_ioctl
2eefc                 | ' {
2eefc                 | '     return _seterror( 10 );
2eefc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ef00     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2ef04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ef08     01 FA 65 F6 | 	neg	result1, #1
2ef0c                 | _fatfs_cc_v_ioctl_ret
2ef0c     2D 00 64 FD | 	ret
2ef10                 | 
2ef10                 | _fatfs_cc_v_mkdir
2ef10     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2ef14     FD 12 02 F6 | 	mov	arg01, result1
2ef18                 | ' 
2ef18                 | '     r = f_mkdir(name);
2ef18                 | '     return _set_dos_error(r);
2ef18     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef1c                 | _fatfs_cc_v_mkdir_ret
2ef1c     2D 00 64 FD | 	ret
2ef20                 | 
2ef20                 | _fatfs_cc_v_remove
2ef20     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2ef24     FD 12 02 F6 | 	mov	arg01, result1
2ef28                 | ' 
2ef28                 | '     r = f_unlink(name);
2ef28                 | '     return _set_dos_error(r);
2ef28     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef2c                 | _fatfs_cc_v_remove_ret
2ef2c     2D 00 64 FD | 	ret
2ef30                 | 
2ef30                 | _fatfs_cc_v_rmdir
2ef30     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2ef34     FD 12 02 F6 | 	mov	arg01, result1
2ef38                 | ' 
2ef38                 | '     r = f_unlink(name);
2ef38                 | '     return _set_dos_error(r);
2ef38     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef3c                 | _fatfs_cc_v_rmdir_ret
2ef3c     2D 00 64 FD | 	ret
2ef40                 | 
2ef40                 | _fatfs_cc_v_rename
2ef40     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2ef44     FD 12 02 F6 | 	mov	arg01, result1
2ef48                 | '     return _set_dos_error(r);
2ef48     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef4c                 | _fatfs_cc_v_rename_ret
2ef4c     2D 00 64 FD | 	ret
2ef50                 | 
2ef50                 | _fatfs_cc_v_open
2ef50     07 4A 05 F6 | 	mov	COUNT_, #7
2ef54     A8 00 A0 FD | 	call	#pushregs_
2ef58     09 1F 02 F6 | 	mov	local01, arg01
2ef5c     0A 21 02 F6 | 	mov	local02, arg02
2ef60     0B 23 02 F6 | 	mov	local03, arg03
2ef64     03 00 00 FF 
2ef68     3C 12 06 F6 | 	mov	arg01, ##1596
2ef6c                 | '     return _gc_alloc(size);
2ef6c     10 14 06 F6 | 	mov	arg02, #16
2ef70     9C 56 BF FD | 	call	#__system___gc_doalloc
2ef74     FD 24 0A F6 | 	mov	local04, result1 wz
2ef78                 | '       return _seterror( 7 );
2ef78     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ef7c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ef80     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef84     01 FA 65 A6 |  if_e	neg	result1, #1
2ef88     98 00 90 AD |  if_e	jmp	#LR__4826
2ef8c     12 13 02 F6 | 	mov	arg01, local04
2ef90     00 14 06 F6 | 	mov	arg02, #0
2ef94     03 00 00 FF 
2ef98     3C 16 06 F6 | 	mov	arg03, ##1596
2ef9c     98 00 A0 FD | 	call	#\builtin_bytefill_
2efa0                 | '   switch (flags & 3) {
2efa0     11 27 02 F6 | 	mov	local05, local03
2efa4     03 26 0E F5 | 	and	local05, #3 wz
2efa8     0C 00 90 AD |  if_e	jmp	#LR__4820
2efac     01 26 0E F2 | 	cmp	local05, #1 wz
2efb0     0C 00 90 AD |  if_e	jmp	#LR__4821
2efb4     10 00 90 FD | 	jmp	#LR__4822
2efb8                 | LR__4820
2efb8     01 28 06 F6 | 	mov	local06, #1
2efbc                 | '       fs_flags =  0x01 ;
2efbc                 | '       break;
2efbc     0C 00 90 FD | 	jmp	#LR__4823
2efc0                 | LR__4821
2efc0     02 28 06 F6 | 	mov	local06, #2
2efc4                 | '       fs_flags =  0x02 ;
2efc4                 | '       break;
2efc4     04 00 90 FD | 	jmp	#LR__4823
2efc8                 | LR__4822
2efc8     03 28 06 F6 | 	mov	local06, #3
2efcc                 | '       fs_flags =  0x01  |  0x02 ;
2efcc                 | '       break;
2efcc                 | LR__4823
2efcc     08 22 CE F7 | 	test	local03, #8 wz
2efd0     18 28 46 55 |  if_ne	or	local06, #24
2efd4     08 00 90 5D |  if_ne	jmp	#LR__4824
2efd8     20 22 CE F7 | 	test	local03, #32 wz
2efdc     30 28 46 55 |  if_ne	or	local06, #48
2efe0                 | LR__4824
2efe0     02 00 00 FF 
2efe4     14 24 06 F1 | 	add	local04, ##1044
2efe8     12 13 02 F6 | 	mov	arg01, local04
2efec     02 00 00 FF 
2eff0     14 24 86 F1 | 	sub	local04, ##1044
2eff4     10 15 02 F6 | 	mov	arg02, local02
2eff8     14 17 02 F6 | 	mov	arg03, local06
2effc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f000     FD 2A 0A F6 | 	mov	local07, result1 wz
2f004     14 00 90 AD |  if_e	jmp	#LR__4825
2f008     12 13 02 F6 | 	mov	arg01, local04
2f00c                 | '     return _gc_free(ptr);
2f00c     0C 57 BF FD | 	call	#__system___gc_free
2f010                 | '     free(f);
2f010                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f010                 | '     return _set_dos_error(r);
2f010     15 13 02 F6 | 	mov	arg01, local07
2f014     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f018     08 00 90 FD | 	jmp	#LR__4826
2f01c                 | LR__4825
2f01c     0F 25 62 FC | 	wrlong	local04, local01
2f020                 | '   }
2f020                 | '   fil->vfsdata = f;
2f020                 | '   return 0;
2f020     00 FA 05 F6 | 	mov	result1, #0
2f024                 | LR__4826
2f024     A7 F0 03 F6 | 	mov	ptra, fp
2f028     B2 00 A0 FD | 	call	#popregs_
2f02c                 | _fatfs_cc_v_open_ret
2f02c     2D 00 64 FD | 	ret
2f030                 | 
2f030                 | _fatfs_cc_v_flush
2f030     09 13 02 FB | 	rdlong	arg01, arg01
2f034     02 00 00 FF 
2f038     14 12 0E F1 | 	add	arg01, ##1044 wz
2f03c                 | '         return _seterror( 5 );
2f03c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f040     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f044     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f048     01 FA 65 A6 |  if_e	neg	result1, #1
2f04c     0C 00 90 AD |  if_e	jmp	#LR__4830
2f050     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f054     FD 12 02 F6 | 	mov	arg01, result1
2f058                 | '     }
2f058                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f058                 | '     result = f_sync(f);
2f058                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f058                 | '     return _set_dos_error(result);
2f058     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f05c                 | LR__4830
2f05c                 | _fatfs_cc_v_flush_ret
2f05c     2D 00 64 FD | 	ret
2f060                 | 
2f060                 | _fatfs_cc_v_init
2f060                 | ' {
2f060                 | '     return 0;
2f060     00 FA 05 F6 | 	mov	result1, #0
2f064                 | _fatfs_cc_v_init_ret
2f064     2D 00 64 FD | 	ret
2f068                 | 
2f068                 | _fatfs_cc_v_deinit
2f068     7F 01 00 FF 
2f06c     DC 15 06 F6 | 	mov	arg02, ##@LR__5026
2f070     00 12 06 F6 | 	mov	arg01, #0
2f074     00 16 06 F6 | 	mov	arg03, #0
2f078     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f07c     01 00 00 FF 
2f080     08 E4 05 F1 | 	add	objptr, ##520
2f084     F2 12 02 FB | 	rdlong	arg01, objptr
2f088     04 E4 05 F1 | 	add	objptr, #4
2f08c     F2 14 02 FB | 	rdlong	arg02, objptr
2f090     01 00 00 FF 
2f094     0C E4 85 F1 | 	sub	objptr, ##524
2f098     14 3E BF FD | 	call	#__system___freepins
2f09c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f09c                 | '     _freepins(f_pinmask);
2f09c                 | '     return 0;
2f09c     00 FA 05 F6 | 	mov	result1, #0
2f0a0                 | _fatfs_cc_v_deinit_ret
2f0a0     2D 00 64 FD | 	ret
2f0a4                 | 
2f0a4                 | _fatfs_cc_get_vfs
2f0a4     01 4A 05 F6 | 	mov	COUNT_, #1
2f0a8     A8 00 A0 FD | 	call	#pushregs_
2f0ac     09 1F 02 F6 | 	mov	local01, arg01
2f0b0     50 12 06 F6 | 	mov	arg01, #80
2f0b4     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f0b8     FD 12 02 F6 | 	mov	arg01, result1
2f0bc     F2 FA 01 F6 | 	mov	result1, objptr
2f0c0     00 E8 04 FF 
2f0c4     00 FA 45 F5 | 	or	result1, ##164626432
2f0c8     09 FB 61 FC | 	wrlong	result1, arg01
2f0cc     F2 FA 01 F6 | 	mov	result1, objptr
2f0d0     00 F0 04 FF 
2f0d4     00 FA 45 F5 | 	or	result1, ##165675008
2f0d8     04 12 06 F1 | 	add	arg01, #4
2f0dc     09 FB 61 FC | 	wrlong	result1, arg01
2f0e0     F2 FA 01 F6 | 	mov	result1, objptr
2f0e4     00 F8 04 FF 
2f0e8     00 FA 45 F5 | 	or	result1, ##166723584
2f0ec     04 12 06 F1 | 	add	arg01, #4
2f0f0     09 FB 61 FC | 	wrlong	result1, arg01
2f0f4     F2 FA 01 F6 | 	mov	result1, objptr
2f0f8     00 00 05 FF 
2f0fc     00 FA 45 F5 | 	or	result1, ##167772160
2f100     04 12 06 F1 | 	add	arg01, #4
2f104     09 FB 61 FC | 	wrlong	result1, arg01
2f108     F2 FA 01 F6 | 	mov	result1, objptr
2f10c     00 08 05 FF 
2f110     00 FA 45 F5 | 	or	result1, ##168820736
2f114     04 12 06 F1 | 	add	arg01, #4
2f118     09 FB 61 FC | 	wrlong	result1, arg01
2f11c     04 12 06 F1 | 	add	arg01, #4
2f120     09 01 68 FC | 	wrlong	#0, arg01
2f124     04 12 06 F1 | 	add	arg01, #4
2f128     09 1F 62 FC | 	wrlong	local01, arg01
2f12c     04 12 06 F1 | 	add	arg01, #4
2f130     09 01 68 FC | 	wrlong	#0, arg01
2f134     F2 FA 01 F6 | 	mov	result1, objptr
2f138     00 10 05 FF 
2f13c     00 FA 45 F5 | 	or	result1, ##169869312
2f140     04 12 06 F1 | 	add	arg01, #4
2f144     09 FB 61 FC | 	wrlong	result1, arg01
2f148     F2 FA 01 F6 | 	mov	result1, objptr
2f14c     00 18 05 FF 
2f150     00 FA 45 F5 | 	or	result1, ##170917888
2f154     04 12 06 F1 | 	add	arg01, #4
2f158     09 FB 61 FC | 	wrlong	result1, arg01
2f15c     F2 FA 01 F6 | 	mov	result1, objptr
2f160     00 20 05 FF 
2f164     00 FA 45 F5 | 	or	result1, ##171966464
2f168     04 12 06 F1 | 	add	arg01, #4
2f16c     09 FB 61 FC | 	wrlong	result1, arg01
2f170     F2 FA 01 F6 | 	mov	result1, objptr
2f174     00 28 05 FF 
2f178     00 FA 45 F5 | 	or	result1, ##173015040
2f17c     04 12 06 F1 | 	add	arg01, #4
2f180     09 FB 61 FC | 	wrlong	result1, arg01
2f184     F2 FA 01 F6 | 	mov	result1, objptr
2f188     00 30 05 FF 
2f18c     00 FA 45 F5 | 	or	result1, ##174063616
2f190     04 12 06 F1 | 	add	arg01, #4
2f194     09 FB 61 FC | 	wrlong	result1, arg01
2f198     F2 FA 01 F6 | 	mov	result1, objptr
2f19c     00 38 05 FF 
2f1a0     00 FA 45 F5 | 	or	result1, ##175112192
2f1a4     04 12 06 F1 | 	add	arg01, #4
2f1a8     09 FB 61 FC | 	wrlong	result1, arg01
2f1ac     F2 FA 01 F6 | 	mov	result1, objptr
2f1b0     00 40 05 FF 
2f1b4     00 FA 45 F5 | 	or	result1, ##176160768
2f1b8     04 12 06 F1 | 	add	arg01, #4
2f1bc     09 FB 61 FC | 	wrlong	result1, arg01
2f1c0     F2 FA 01 F6 | 	mov	result1, objptr
2f1c4     00 48 05 FF 
2f1c8     00 FA 45 F5 | 	or	result1, ##177209344
2f1cc     04 12 06 F1 | 	add	arg01, #4
2f1d0     09 FB 61 FC | 	wrlong	result1, arg01
2f1d4     F2 FA 01 F6 | 	mov	result1, objptr
2f1d8     00 50 05 FF 
2f1dc     00 FA 45 F5 | 	or	result1, ##178257920
2f1e0     04 12 06 F1 | 	add	arg01, #4
2f1e4     09 FB 61 FC | 	wrlong	result1, arg01
2f1e8     F2 FA 01 F6 | 	mov	result1, objptr
2f1ec     00 58 05 FF 
2f1f0     00 FA 45 F5 | 	or	result1, ##179306496
2f1f4     04 12 06 F1 | 	add	arg01, #4
2f1f8     09 FB 61 FC | 	wrlong	result1, arg01
2f1fc     F2 FA 01 F6 | 	mov	result1, objptr
2f200     00 60 05 FF 
2f204     00 FA 45 F5 | 	or	result1, ##180355072
2f208     04 12 06 F1 | 	add	arg01, #4
2f20c     09 FB 61 FC | 	wrlong	result1, arg01
2f210     F2 FA 01 F6 | 	mov	result1, objptr
2f214     00 68 05 FF 
2f218     00 FA 45 F5 | 	or	result1, ##181403648
2f21c     04 12 06 F1 | 	add	arg01, #4
2f220     09 FB 61 FC | 	wrlong	result1, arg01
2f224     4C 12 86 F1 | 	sub	arg01, #76
2f228                 | ' 
2f228                 | '     v->close = &v_close;
2f228                 | '     v->read = &v_read;
2f228                 | '     v->write = &v_write;
2f228                 | '     v->lseek = &v_lseek;
2f228                 | '     v->ioctl = &v_ioctl;
2f228                 | '     v->flush = 0;
2f228                 | '     v->vfs_data = ptr;
2f228                 | '     v->reserved = 0;
2f228                 | ' 
2f228                 | '     v->open = &v_open;
2f228                 | '     v->creat = &v_creat;
2f228                 | '     v->opendir = &v_opendir;
2f228                 | '     v->closedir = &v_closedir;
2f228                 | '     v->readdir = &v_readdir;
2f228                 | '     v->stat = &v_stat;
2f228                 | ' 
2f228                 | '     v->mkdir = &v_mkdir;
2f228                 | '     v->rmdir = &v_rmdir;
2f228                 | ' 
2f228                 | '     v->remove = &v_remove;
2f228                 | '     v->rename = &v_rename;
2f228                 | ' 
2f228                 | '     v->init = &v_init;
2f228                 | '     v->deinit = &v_deinit;
2f228                 | ' 
2f228                 | '     return v;
2f228     09 FB 01 F6 | 	mov	result1, arg01
2f22c     A7 F0 03 F6 | 	mov	ptra, fp
2f230     B2 00 A0 FD | 	call	#popregs_
2f234                 | _fatfs_cc_get_vfs_ret
2f234     2D 00 64 FD | 	ret
2f238                 | 
2f238                 | _fatfs_cc_xmit_mmc_1109
2f238     01 00 00 FF 
2f23c     10 E4 05 F1 | 	add	objptr, ##528
2f240     F2 00 02 FB | 	rdlong	_var01, objptr
2f244     08 E4 05 F1 | 	add	objptr, #8
2f248     F2 02 02 FB | 	rdlong	_var02, objptr
2f24c     01 00 00 FF 
2f250     18 E4 85 F1 | 	sub	objptr, ##536
2f254     40 02 62 FD | 	dirl	_var02
2f258     28 02 64 FD | 	setq	#1
2f25c     09 05 02 FB | 	rdlong	_var03, arg01
2f260     69 04 62 FD | 	rev	_var03
2f264     1B 04 FE F9 | 	movbyts	_var03, #27
2f268     01 05 22 FC | 	wypin	_var03, _var02
2f26c     0A 05 02 F6 | 	mov	_var03, arg02
2f270     02 14 4E F0 | 	shr	arg02, #2 wz
2f274     03 04 66 F0 | 	shl	_var03, #3
2f278     00 05 22 FC | 	wypin	_var03, _var01
2f27c     41 02 62 FD | 	dirh	_var02
2f280     08 12 06 F1 | 	add	arg01, #8
2f284     69 06 62 FD | 	rev	_var04
2f288     1B 06 FE F9 | 	movbyts	_var04, #27
2f28c                 | LR__4840
2f28c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f290     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f294     04 12 06 51 |  if_ne	add	arg01, #4
2f298     69 06 62 5D |  if_ne	rev	_var04
2f29c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f2a0                 | LR__4841
2f2a0     40 02 72 5D |  if_ne	testp	_var02 wc
2f2a4     F8 FF 9F 1D |  if_a	jmp	#LR__4841
2f2a8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4840
2f2ac                 | LR__4842
2f2ac     40 00 72 FD | 	testp	_var01 wc
2f2b0     F8 FF 9F 3D |  if_ae	jmp	#LR__4842
2f2b4     40 02 62 FD | 	dirl	_var02
2f2b8     FF FF FF FF 
2f2bc     01 FF 2B FC | 	wypin	##-1, _var02
2f2c0     41 02 62 FD | 	dirh	_var02
2f2c4                 | _fatfs_cc_xmit_mmc_1109_ret
2f2c4     2D 00 64 FD | 	ret
2f2c8                 | 
2f2c8                 | _fatfs_cc_rcvr_mmc_1116
2f2c8     01 00 00 FF 
2f2cc     10 E4 05 F1 | 	add	objptr, ##528
2f2d0     F2 00 02 FB | 	rdlong	_var01, objptr
2f2d4     0C E4 05 F1 | 	add	objptr, #12
2f2d8     F2 02 02 FB | 	rdlong	_var02, objptr
2f2dc     01 00 00 FF 
2f2e0     1C E4 85 F1 | 	sub	objptr, ##540
2f2e4     01 03 08 FC | 	akpin	_var02
2f2e8     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f2ec     02 04 4E F0 | 	shr	_var03, #2 wz
2f2f0     30 00 90 AD |  if_e	jmp	#LR__4852
2f2f4     02 07 02 F6 | 	mov	_var04, _var03
2f2f8     05 06 66 F0 | 	shl	_var04, #5
2f2fc     00 07 22 FC | 	wypin	_var04, _var01
2f300     01 7F 18 FC | 	wxpin	#63, _var02
2f304                 | LR__4850
2f304                 | LR__4851
2f304     40 02 72 FD | 	testp	_var02 wc
2f308     F8 FF 9F 3D |  if_ae	jmp	#LR__4851
2f30c     01 07 8A FA | 	rdpin	_var04, _var02
2f310     69 06 62 FD | 	rev	_var04
2f314     1B 06 FE F9 | 	movbyts	_var04, #27
2f318     09 07 62 FC | 	wrlong	_var04, arg01
2f31c     04 12 06 F1 | 	add	arg01, #4
2f320     F8 05 6E FB | 	djnz	_var03, #LR__4850
2f324                 | LR__4852
2f324     03 14 0E F5 | 	and	arg02, #3 wz
2f328     24 00 90 AD |  if_e	jmp	#LR__4855
2f32c     01 4F 18 FC | 	wxpin	#39, _var02
2f330                 | LR__4853
2f330     00 11 28 FC | 	wypin	#8, _var01
2f334                 | LR__4854
2f334     40 02 72 FD | 	testp	_var02 wc
2f338     F8 FF 9F 3D |  if_ae	jmp	#LR__4854
2f33c     01 07 8A FA | 	rdpin	_var04, _var02
2f340     69 06 62 FD | 	rev	_var04
2f344     09 07 42 FC | 	wrbyte	_var04, arg01
2f348     01 12 06 F1 | 	add	arg01, #1
2f34c     F8 15 6E FB | 	djnz	arg02, #LR__4853
2f350                 | LR__4855
2f350                 | _fatfs_cc_rcvr_mmc_1116_ret
2f350     2D 00 64 FD | 	ret
2f354                 | 
2f354                 | _fatfs_cc_wait_ready_1120
2f354     01 4A 05 F6 | 	mov	COUNT_, #1
2f358     A8 00 A0 FD | 	call	#pushregs_
2f35c     10 F0 07 F1 | 	add	ptra, #16
2f360     1A FA 61 FD | 	getct	result1
2f364     08 4E 05 F1 | 	add	fp, #8
2f368     A7 FA 61 FC | 	wrlong	result1, fp
2f36c     14 1E 06 FB | 	rdlong	local01, #20
2f370     01 1E 46 F0 | 	shr	local01, #1
2f374     04 4E 05 F1 | 	add	fp, #4
2f378     A7 1E 62 FC | 	wrlong	local01, fp
2f37c     0C 4E 85 F1 | 	sub	fp, #12
2f380                 | ' {
2f380                 | ' 	BYTE d;
2f380                 | ' 	UINT tmr, tmout;
2f380                 | ' 
2f380                 | ' 	tmr = _cnt();
2f380                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f380                 | ' 	for(;;) {
2f380                 | LR__4860
2f380     04 4E 05 F1 | 	add	fp, #4
2f384     A7 12 02 F6 | 	mov	arg01, fp
2f388     04 4E 85 F1 | 	sub	fp, #4
2f38c     01 14 06 F6 | 	mov	arg02, #1
2f390     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f394     04 4E 05 F1 | 	add	fp, #4
2f398     A7 1E C2 FA | 	rdbyte	local01, fp
2f39c     04 4E 85 F1 | 	sub	fp, #4
2f3a0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f3a4     01 FA 05 A6 |  if_e	mov	result1, #1
2f3a8     28 00 90 AD |  if_e	jmp	#LR__4861
2f3ac     1A FA 61 FD | 	getct	result1
2f3b0     08 4E 05 F1 | 	add	fp, #8
2f3b4     A7 1E 02 FB | 	rdlong	local01, fp
2f3b8     0F FB 81 F1 | 	sub	result1, local01
2f3bc     04 4E 05 F1 | 	add	fp, #4
2f3c0     A7 1E 02 FB | 	rdlong	local01, fp
2f3c4     0C 4E 85 F1 | 	sub	fp, #12
2f3c8     0F FB 11 F2 | 	cmp	result1, local01 wc
2f3cc     00 FA 05 36 |  if_ae	mov	result1, #0
2f3d0     AC FF 9F CD |  if_b	jmp	#LR__4860
2f3d4                 | LR__4861
2f3d4     A7 F0 03 F6 | 	mov	ptra, fp
2f3d8     B2 00 A0 FD | 	call	#popregs_
2f3dc                 | _fatfs_cc_wait_ready_1120_ret
2f3dc     2D 00 64 FD | 	ret
2f3e0                 | 
2f3e0                 | _fatfs_cc_deselect_1126
2f3e0     00 4A 05 F6 | 	mov	COUNT_, #0
2f3e4     A8 00 A0 FD | 	call	#pushregs_
2f3e8     14 F0 07 F1 | 	add	ptra, #20
2f3ec     01 00 00 FF 
2f3f0     14 E4 05 F1 | 	add	objptr, ##532
2f3f4     F2 14 02 FB | 	rdlong	arg02, objptr
2f3f8     04 4E 05 F1 | 	add	fp, #4
2f3fc     A7 14 62 FC | 	wrlong	arg02, fp
2f400     04 E4 85 F1 | 	sub	objptr, #4
2f404     F2 14 02 FB | 	rdlong	arg02, objptr
2f408     04 4E 05 F1 | 	add	fp, #4
2f40c     A7 14 62 FC | 	wrlong	arg02, fp
2f410     08 E4 05 F1 | 	add	objptr, #8
2f414     F2 14 02 FB | 	rdlong	arg02, objptr
2f418     04 4E 05 F1 | 	add	fp, #4
2f41c     A7 14 62 FC | 	wrlong	arg02, fp
2f420     04 E4 05 F1 | 	add	objptr, #4
2f424     F2 14 02 FB | 	rdlong	arg02, objptr
2f428     01 00 00 FF 
2f42c     1C E4 85 F1 | 	sub	objptr, ##540
2f430     04 4E 05 F1 | 	add	fp, #4
2f434     A7 14 62 FC | 	wrlong	arg02, fp
2f438     0C 4E 85 F1 | 	sub	fp, #12
2f43c     A7 12 02 FB | 	rdlong	arg01, fp
2f440     04 4E 85 F1 | 	sub	fp, #4
2f444     59 12 62 FD | 	drvh	arg01
2f448     1F 20 64 FD | 	waitx	#16
2f44c     A7 12 02 F6 | 	mov	arg01, fp
2f450     01 14 06 F6 | 	mov	arg02, #1
2f454     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f458     A7 F0 03 F6 | 	mov	ptra, fp
2f45c     B2 00 A0 FD | 	call	#popregs_
2f460                 | _fatfs_cc_deselect_1126_ret
2f460     2D 00 64 FD | 	ret
2f464                 | 
2f464                 | _fatfs_cc_select_1130
2f464     00 4A 05 F6 | 	mov	COUNT_, #0
2f468     A8 00 A0 FD | 	call	#pushregs_
2f46c     10 F0 07 F1 | 	add	ptra, #16
2f470     01 00 00 FF 
2f474     14 E4 05 F1 | 	add	objptr, ##532
2f478     F2 14 02 FB | 	rdlong	arg02, objptr
2f47c     08 4E 05 F1 | 	add	fp, #8
2f480     A7 14 62 FC | 	wrlong	arg02, fp
2f484     08 E4 05 F1 | 	add	objptr, #8
2f488     F2 12 02 FB | 	rdlong	arg01, objptr
2f48c     01 00 00 FF 
2f490     1C E4 85 F1 | 	sub	objptr, ##540
2f494     04 4E 05 F1 | 	add	fp, #4
2f498     A7 12 62 FC | 	wrlong	arg01, fp
2f49c     50 12 62 FD | 	fltl	arg01
2f4a0     04 4E 85 F1 | 	sub	fp, #4
2f4a4     A7 12 02 FB | 	rdlong	arg01, fp
2f4a8     58 12 62 FD | 	drvl	arg01
2f4ac     1F 20 64 FD | 	waitx	#16
2f4b0     04 4E 05 F1 | 	add	fp, #4
2f4b4     A7 12 02 FB | 	rdlong	arg01, fp
2f4b8     41 12 62 FD | 	dirh	arg01
2f4bc     08 4E 85 F1 | 	sub	fp, #8
2f4c0     A7 12 02 F6 | 	mov	arg01, fp
2f4c4     04 4E 85 F1 | 	sub	fp, #4
2f4c8     01 14 06 F6 | 	mov	arg02, #1
2f4cc     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f4d0     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f4d8     01 FA 05 56 |  if_ne	mov	result1, #1
2f4dc     08 00 90 5D |  if_ne	jmp	#LR__4870
2f4e0     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f4e4                 | ' 
2f4e4                 | ' 	deselect();
2f4e4                 | ' 	return 0;
2f4e4     00 FA 05 F6 | 	mov	result1, #0
2f4e8                 | LR__4870
2f4e8     A7 F0 03 F6 | 	mov	ptra, fp
2f4ec     B2 00 A0 FD | 	call	#popregs_
2f4f0                 | _fatfs_cc_select_1130_ret
2f4f0     2D 00 64 FD | 	ret
2f4f4                 | 
2f4f4                 | _fatfs_cc_rcvr_datablock_1134
2f4f4     01 4A 05 F6 | 	mov	COUNT_, #1
2f4f8     A8 00 A0 FD | 	call	#pushregs_
2f4fc     18 F0 07 F1 | 	add	ptra, #24
2f500     04 4E 05 F1 | 	add	fp, #4
2f504     A7 12 62 FC | 	wrlong	arg01, fp
2f508     04 4E 05 F1 | 	add	fp, #4
2f50c     A7 14 62 FC | 	wrlong	arg02, fp
2f510     1A FA 61 FD | 	getct	result1
2f514     08 4E 05 F1 | 	add	fp, #8
2f518     A7 FA 61 FC | 	wrlong	result1, fp
2f51c     14 1E 06 FB | 	rdlong	local01, #20
2f520     03 1E 46 F0 | 	shr	local01, #3
2f524     04 4E 05 F1 | 	add	fp, #4
2f528     A7 1E 62 FC | 	wrlong	local01, fp
2f52c     14 4E 85 F1 | 	sub	fp, #20
2f530                 | ' 	BYTE *buff,
2f530                 | ' 	UINT btr
2f530                 | ' )
2f530                 | ' {
2f530                 | ' 	BYTE d[2];
2f530                 | ' 	UINT tmr, tmout;
2f530                 | ' 
2f530                 | ' 	tmr = _cnt();
2f530                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f530                 | ' 	for(;;) {
2f530                 | LR__4880
2f530     0C 4E 05 F1 | 	add	fp, #12
2f534     A7 12 02 F6 | 	mov	arg01, fp
2f538     0C 4E 85 F1 | 	sub	fp, #12
2f53c     01 14 06 F6 | 	mov	arg02, #1
2f540     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f544     0C 4E 05 F1 | 	add	fp, #12
2f548     A7 1E C2 FA | 	rdbyte	local01, fp
2f54c     0C 4E 85 F1 | 	sub	fp, #12
2f550     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f554     28 00 90 5D |  if_ne	jmp	#LR__4881
2f558     1A FA 61 FD | 	getct	result1
2f55c     FD 1E 02 F6 | 	mov	local01, result1
2f560     10 4E 05 F1 | 	add	fp, #16
2f564     A7 14 02 FB | 	rdlong	arg02, fp
2f568     0A 1F 82 F1 | 	sub	local01, arg02
2f56c     04 4E 05 F1 | 	add	fp, #4
2f570     A7 14 02 FB | 	rdlong	arg02, fp
2f574     14 4E 85 F1 | 	sub	fp, #20
2f578     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f57c     B0 FF 9F CD |  if_b	jmp	#LR__4880
2f580                 | LR__4881
2f580     0C 4E 05 F1 | 	add	fp, #12
2f584     A7 1E C2 FA | 	rdbyte	local01, fp
2f588     0C 4E 85 F1 | 	sub	fp, #12
2f58c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f590     00 FA 05 56 |  if_ne	mov	result1, #0
2f594     30 00 90 5D |  if_ne	jmp	#LR__4882
2f598     04 4E 05 F1 | 	add	fp, #4
2f59c     A7 12 02 FB | 	rdlong	arg01, fp
2f5a0     04 4E 05 F1 | 	add	fp, #4
2f5a4     A7 14 02 FB | 	rdlong	arg02, fp
2f5a8     08 4E 85 F1 | 	sub	fp, #8
2f5ac     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f5b0     0C 4E 05 F1 | 	add	fp, #12
2f5b4     A7 12 02 F6 | 	mov	arg01, fp
2f5b8     0C 4E 85 F1 | 	sub	fp, #12
2f5bc     02 14 06 F6 | 	mov	arg02, #2
2f5c0     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f5c4                 | ' 
2f5c4                 | ' 	rcvr_mmc(buff, btr);
2f5c4                 | ' 	rcvr_mmc(d, 2);
2f5c4                 | ' 
2f5c4                 | ' 	return 1;
2f5c4     01 FA 05 F6 | 	mov	result1, #1
2f5c8                 | LR__4882
2f5c8     A7 F0 03 F6 | 	mov	ptra, fp
2f5cc     B2 00 A0 FD | 	call	#popregs_
2f5d0                 | _fatfs_cc_rcvr_datablock_1134_ret
2f5d0     2D 00 64 FD | 	ret
2f5d4                 | 
2f5d4                 | _fatfs_cc_xmit_datablock_1136
2f5d4     00 4A 05 F6 | 	mov	COUNT_, #0
2f5d8     A8 00 A0 FD | 	call	#pushregs_
2f5dc     10 F0 07 F1 | 	add	ptra, #16
2f5e0     04 4E 05 F1 | 	add	fp, #4
2f5e4     A7 12 62 FC | 	wrlong	arg01, fp
2f5e8     04 4E 05 F1 | 	add	fp, #4
2f5ec     A7 14 42 FC | 	wrbyte	arg02, fp
2f5f0     08 4E 85 F1 | 	sub	fp, #8
2f5f4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f5f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5fc     00 FA 05 A6 |  if_e	mov	result1, #0
2f600     90 00 90 AD |  if_e	jmp	#LR__4891
2f604     08 4E 05 F1 | 	add	fp, #8
2f608     A7 14 C2 FA | 	rdbyte	arg02, fp
2f60c     04 4E 05 F1 | 	add	fp, #4
2f610     A7 14 42 FC | 	wrbyte	arg02, fp
2f614     A7 12 02 F6 | 	mov	arg01, fp
2f618     0C 4E 85 F1 | 	sub	fp, #12
2f61c     01 14 06 F6 | 	mov	arg02, #1
2f620     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f624     08 4E 05 F1 | 	add	fp, #8
2f628     A7 14 C2 FA | 	rdbyte	arg02, fp
2f62c     08 4E 85 F1 | 	sub	fp, #8
2f630     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f634     58 00 90 AD |  if_e	jmp	#LR__4890
2f638     04 4E 05 F1 | 	add	fp, #4
2f63c     A7 12 02 FB | 	rdlong	arg01, fp
2f640     04 4E 85 F1 | 	sub	fp, #4
2f644     09 14 C6 F9 | 	decod	arg02, #9
2f648     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f64c     0C 4E 05 F1 | 	add	fp, #12
2f650     A7 12 02 F6 | 	mov	arg01, fp
2f654     0C 4E 85 F1 | 	sub	fp, #12
2f658     02 14 06 F6 | 	mov	arg02, #2
2f65c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f660     0C 4E 05 F1 | 	add	fp, #12
2f664     A7 12 02 F6 | 	mov	arg01, fp
2f668     0C 4E 85 F1 | 	sub	fp, #12
2f66c     01 14 06 F6 | 	mov	arg02, #1
2f670     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f674     0C 4E 05 F1 | 	add	fp, #12
2f678     A7 14 C2 FA | 	rdbyte	arg02, fp
2f67c     0C 4E 85 F1 | 	sub	fp, #12
2f680     1F 14 06 F5 | 	and	arg02, #31
2f684     05 14 0E F2 | 	cmp	arg02, #5 wz
2f688                 | ' 			return 0;
2f688     00 FA 05 56 |  if_ne	mov	result1, #0
2f68c     04 00 90 5D |  if_ne	jmp	#LR__4891
2f690                 | LR__4890
2f690                 | ' 	}
2f690                 | ' 
2f690                 | ' 	return 1;
2f690     01 FA 05 F6 | 	mov	result1, #1
2f694                 | LR__4891
2f694     A7 F0 03 F6 | 	mov	ptra, fp
2f698     B2 00 A0 FD | 	call	#popregs_
2f69c                 | _fatfs_cc_xmit_datablock_1136_ret
2f69c     2D 00 64 FD | 	ret
2f6a0                 | 
2f6a0                 | _fatfs_cc_send_cmd_1140
2f6a0     01 4A 05 F6 | 	mov	COUNT_, #1
2f6a4     A8 00 A0 FD | 	call	#pushregs_
2f6a8     1C F0 07 F1 | 	add	ptra, #28
2f6ac                 | _fatfs_cc_send_cmd_1140_enter
2f6ac     04 4E 05 F1 | 	add	fp, #4
2f6b0     A7 12 42 FC | 	wrbyte	arg01, fp
2f6b4     04 4E 05 F1 | 	add	fp, #4
2f6b8     A7 14 62 FC | 	wrlong	arg02, fp
2f6bc     04 4E 85 F1 | 	sub	fp, #4
2f6c0     A7 FA C1 FA | 	rdbyte	result1, fp
2f6c4     04 4E 85 F1 | 	sub	fp, #4
2f6c8     80 FA CD F7 | 	test	result1, #128 wz
2f6cc     44 00 90 AD |  if_e	jmp	#LR__4900
2f6d0     04 4E 05 F1 | 	add	fp, #4
2f6d4     A7 14 C2 FA | 	rdbyte	arg02, fp
2f6d8     7F 14 06 F5 | 	and	arg02, #127
2f6dc     A7 14 42 FC | 	wrbyte	arg02, fp
2f6e0     04 4E 85 F1 | 	sub	fp, #4
2f6e4     37 12 06 F6 | 	mov	arg01, #55
2f6e8     00 14 06 F6 | 	mov	arg02, #0
2f6ec     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2f6f0     0C 4E 05 F1 | 	add	fp, #12
2f6f4     A7 FA 41 FC | 	wrbyte	result1, fp
2f6f8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f6fc     0C 4E 85 F1 | 	sub	fp, #12
2f700     02 14 16 F2 | 	cmp	arg02, #2 wc
2f704     0C 4E 05 31 |  if_ae	add	fp, #12
2f708     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f70c     0C 4E 85 31 |  if_ae	sub	fp, #12
2f710     6C 01 90 3D |  if_ae	jmp	#LR__4904
2f714                 | LR__4900
2f714     04 4E 05 F1 | 	add	fp, #4
2f718     A7 14 C2 FA | 	rdbyte	arg02, fp
2f71c     04 4E 85 F1 | 	sub	fp, #4
2f720     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f724     14 00 90 AD |  if_e	jmp	#LR__4901
2f728     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2f72c     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2f730     00 FA 0D F2 | 	cmp	result1, #0 wz
2f734     FF FA 05 A6 |  if_e	mov	result1, #255
2f738     44 01 90 AD |  if_e	jmp	#LR__4904
2f73c                 | LR__4901
2f73c     04 4E 05 F1 | 	add	fp, #4
2f740     A7 14 C2 FA | 	rdbyte	arg02, fp
2f744     40 FA 05 F6 | 	mov	result1, #64
2f748     0A FB 41 F5 | 	or	result1, arg02
2f74c     10 4E 05 F1 | 	add	fp, #16
2f750     A7 FA 41 FC | 	wrbyte	result1, fp
2f754     0C 4E 85 F1 | 	sub	fp, #12
2f758     A7 FA 01 FB | 	rdlong	result1, fp
2f75c     18 FA 45 F0 | 	shr	result1, #24
2f760     0D 4E 05 F1 | 	add	fp, #13
2f764     A7 FA 41 FC | 	wrbyte	result1, fp
2f768     0D 4E 85 F1 | 	sub	fp, #13
2f76c     A7 FA 01 FB | 	rdlong	result1, fp
2f770     10 FA 45 F0 | 	shr	result1, #16
2f774     0E 4E 05 F1 | 	add	fp, #14
2f778     A7 FA 41 FC | 	wrbyte	result1, fp
2f77c     0E 4E 85 F1 | 	sub	fp, #14
2f780     A7 FA 01 FB | 	rdlong	result1, fp
2f784     08 FA 45 F0 | 	shr	result1, #8
2f788     0F 4E 05 F1 | 	add	fp, #15
2f78c     A7 FA 41 FC | 	wrbyte	result1, fp
2f790     0F 4E 85 F1 | 	sub	fp, #15
2f794     A7 FA 01 FB | 	rdlong	result1, fp
2f798     10 4E 05 F1 | 	add	fp, #16
2f79c     A7 FA 41 FC | 	wrbyte	result1, fp
2f7a0     0C 4E 85 F1 | 	sub	fp, #12
2f7a4     A7 02 48 FC | 	wrbyte	#1, fp
2f7a8     08 4E 85 F1 | 	sub	fp, #8
2f7ac     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f7b0     04 4E 85 F1 | 	sub	fp, #4
2f7b4     0C 4E 05 A1 |  if_e	add	fp, #12
2f7b8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f7bc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f7c0     04 4E 05 F1 | 	add	fp, #4
2f7c4     A7 FA C1 FA | 	rdbyte	result1, fp
2f7c8     04 4E 85 F1 | 	sub	fp, #4
2f7cc     08 FA 0D F2 | 	cmp	result1, #8 wz
2f7d0     0C 4E 05 A1 |  if_e	add	fp, #12
2f7d4     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2f7d8     0C 4E 85 A1 |  if_e	sub	fp, #12
2f7dc     0C 4E 05 F1 | 	add	fp, #12
2f7e0     A7 14 C2 FA | 	rdbyte	arg02, fp
2f7e4     0D 4E 05 F1 | 	add	fp, #13
2f7e8     A7 14 42 FC | 	wrbyte	arg02, fp
2f7ec     05 4E 85 F1 | 	sub	fp, #5
2f7f0     A7 12 02 F6 | 	mov	arg01, fp
2f7f4     14 4E 85 F1 | 	sub	fp, #20
2f7f8     06 14 06 F6 | 	mov	arg02, #6
2f7fc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f800     04 4E 05 F1 | 	add	fp, #4
2f804     A7 1E C2 FA | 	rdbyte	local01, fp
2f808     04 4E 85 F1 | 	sub	fp, #4
2f80c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2f810     10 4E 05 A1 |  if_e	add	fp, #16
2f814     A7 12 02 A6 |  if_e	mov	arg01, fp
2f818     10 4E 85 A1 |  if_e	sub	fp, #16
2f81c     01 14 06 A6 |  if_e	mov	arg02, #1
2f820     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2f824     0C 4E 05 F1 | 	add	fp, #12
2f828     A7 14 48 FC | 	wrbyte	#10, fp
2f82c     0C 4E 85 F1 | 	sub	fp, #12
2f830                 | ' 	n = 10;
2f830                 | ' 	do
2f830                 | LR__4902
2f830     10 4E 05 F1 | 	add	fp, #16
2f834     A7 12 02 F6 | 	mov	arg01, fp
2f838     10 4E 85 F1 | 	sub	fp, #16
2f83c     01 14 06 F6 | 	mov	arg02, #1
2f840     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f844     10 4E 05 F1 | 	add	fp, #16
2f848     A7 1E C2 FA | 	rdbyte	local01, fp
2f84c     10 4E 85 F1 | 	sub	fp, #16
2f850     80 1E CE F7 | 	test	local01, #128 wz
2f854     1C 00 90 AD |  if_e	jmp	#LR__4903
2f858     0C 4E 05 F1 | 	add	fp, #12
2f85c     A7 1E C2 FA | 	rdbyte	local01, fp
2f860     01 1E 86 F1 | 	sub	local01, #1
2f864     A7 1E 42 FC | 	wrbyte	local01, fp
2f868     A7 1E CA FA | 	rdbyte	local01, fp wz
2f86c     0C 4E 85 F1 | 	sub	fp, #12
2f870     BC FF 9F 5D |  if_ne	jmp	#LR__4902
2f874                 | LR__4903
2f874                 | ' 
2f874                 | ' 	return d;
2f874     10 4E 05 F1 | 	add	fp, #16
2f878     A7 FA C1 FA | 	rdbyte	result1, fp
2f87c     10 4E 85 F1 | 	sub	fp, #16
2f880                 | LR__4904
2f880     A7 F0 03 F6 | 	mov	ptra, fp
2f884     B2 00 A0 FD | 	call	#popregs_
2f888                 | _fatfs_cc_send_cmd_1140_ret
2f888     2D 00 64 FD | 	ret
2f88c                 | 
2f88c                 | _fatfs_cc_disk_deinitialize
2f88c     03 4A 05 F6 | 	mov	COUNT_, #3
2f890     A8 00 A0 FD | 	call	#pushregs_
2f894     00 12 4E F2 | 	cmps	arg01, #0 wz
2f898     01 00 00 FF 
2f89c     14 E4 05 F1 | 	add	objptr, ##532
2f8a0     F2 12 02 FB | 	rdlong	arg01, objptr
2f8a4     04 E4 85 F1 | 	sub	objptr, #4
2f8a8     F2 1E 02 FB | 	rdlong	local01, objptr
2f8ac     08 E4 05 F1 | 	add	objptr, #8
2f8b0     F2 20 02 FB | 	rdlong	local02, objptr
2f8b4     04 E4 05 F1 | 	add	objptr, #4
2f8b8     F2 22 02 FB | 	rdlong	local03, objptr
2f8bc     01 00 00 FF 
2f8c0     1C E4 85 F1 | 	sub	objptr, ##540
2f8c4                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f8c4                 | '         return RES_NOTRDY;
2f8c4     03 FA 05 56 |  if_ne	mov	result1, #3
2f8c8     2C 00 90 5D |  if_ne	jmp	#LR__4910
2f8cc     50 12 62 FD | 	fltl	arg01
2f8d0     09 01 08 FC | 	wrpin	#0, arg01
2f8d4     50 1E 62 FD | 	fltl	local01
2f8d8     0F 01 08 FC | 	wrpin	#0, local01
2f8dc     50 20 62 FD | 	fltl	local02
2f8e0     10 01 08 FC | 	wrpin	#0, local02
2f8e4     50 22 62 FD | 	fltl	local03
2f8e8     11 01 08 FC | 	wrpin	#0, local03
2f8ec     0A 12 06 F6 | 	mov	arg01, #10
2f8f0     28 11 BF FD | 	call	#__system___waitms
2f8f4                 | '     }
2f8f4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f8f4                 | '     _pinclear(PIN_SS);
2f8f4                 | '     _pinclear(PIN_CLK);
2f8f4                 | '     _pinclear(PIN_DI);
2f8f4                 | '     _pinclear(PIN_DO);
2f8f4                 | ' 
2f8f4                 | '     _waitms(10);
2f8f4                 | ' 
2f8f4                 | '     return 0;
2f8f4     00 FA 05 F6 | 	mov	result1, #0
2f8f8                 | LR__4910
2f8f8     A7 F0 03 F6 | 	mov	ptra, fp
2f8fc     B2 00 A0 FD | 	call	#popregs_
2f900                 | _fatfs_cc_disk_deinitialize_ret
2f900     2D 00 64 FD | 	ret
2f904                 | 
2f904                 | _fatfs_cc_gettimeofday
2f904     04 4A 05 F6 | 	mov	COUNT_, #4
2f908     A8 00 A0 FD | 	call	#pushregs_
2f90c     09 1F 02 F6 | 	mov	local01, arg01
2f910     E4 0C BF FD | 	call	#__system___getus
2f914     FD 12 02 F6 | 	mov	arg01, result1
2f918     02 00 00 FF 
2f91c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2f920     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2f924     09 FB 01 F6 | 	mov	result1, arg01
2f928     10 FB 81 F1 | 	sub	result1, local02
2f92c     A1 07 00 FF 
2f930     40 FA 15 FD | 	qdiv	result1, ##1000000
2f934     02 00 00 FF 
2f938     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2f93c     18 20 62 FD | 	getqx	local02
2f940     A1 07 00 FF 
2f944     40 FA 15 FD | 	qdiv	result1, ##1000000
2f948     00 20 0E F2 | 	cmp	local02, #0 wz
2f94c     19 22 62 FD | 	getqy	local03
2f950     28 00 90 AD |  if_e	jmp	#LR__4920
2f954     02 00 00 FF 
2f958     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2f95c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2f960     10 25 02 F1 | 	add	local04, local02
2f964     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2f968     11 13 82 F1 | 	sub	arg01, local03
2f96c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2f970     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2f974     02 00 00 FF 
2f978     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2f97c                 | LR__4920
2f97c     02 00 00 FF 
2f980     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2f984     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2f988     02 00 00 FF 
2f98c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2f990     0F 25 62 FC | 	wrlong	local04, local01
2f994     04 1E 06 F1 | 	add	local01, #4
2f998     0F 23 62 FC | 	wrlong	local03, local01
2f99c                 | '         lastsec += secs;
2f99c                 | '         lastus = now - leftover;
2f99c                 | '     }
2f99c                 | '     tv->tv_sec = lastsec;
2f99c                 | '     tv->tv_usec = leftover;
2f99c                 | '     return 0;
2f99c     00 FA 05 F6 | 	mov	result1, #0
2f9a0     A7 F0 03 F6 | 	mov	ptra, fp
2f9a4     B2 00 A0 FD | 	call	#popregs_
2f9a8                 | _fatfs_cc_gettimeofday_ret
2f9a8     2D 00 64 FD | 	ret
2f9ac                 | 
2f9ac                 | _fatfs_cc__is_leap_year
2f9ac     09 FB 51 F6 | 	abs	result1, arg01 wc
2f9b0     03 FA 05 F5 | 	and	result1, #3
2f9b4     FD FA 89 F6 | 	negc	result1, result1 wz
2f9b8     38 00 90 5D |  if_ne	jmp	#LR__4931
2f9bc     09 FB 51 F6 | 	abs	result1, arg01 wc
2f9c0     64 FA 15 FD | 	qdiv	result1, #100
2f9c4     19 FA 61 FD | 	getqy	result1
2f9c8     FD FA 89 F6 | 	negc	result1, result1 wz
2f9cc     1C 00 90 5D |  if_ne	jmp	#LR__4930
2f9d0     09 FB 51 F6 | 	abs	result1, arg01 wc
2f9d4     90 FB 15 FD | 	qdiv	result1, #400
2f9d8                 | '       return (0 == y % 400);
2f9d8     00 FA 05 F6 | 	mov	result1, #0
2f9dc     19 00 62 FD | 	getqy	_var01
2f9e0     00 01 8A F6 | 	negc	_var01, _var01 wz
2f9e4     01 FA 05 A6 |  if_e	mov	result1, #1
2f9e8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2f9ec                 | LR__4930
2f9ec                 | '     return 1;
2f9ec     01 FA 05 F6 | 	mov	result1, #1
2f9f0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2f9f4                 | LR__4931
2f9f4                 | '   }
2f9f4                 | '   return 0;
2f9f4     00 FA 05 F6 | 	mov	result1, #0
2f9f8                 | _fatfs_cc__is_leap_year_ret
2f9f8     2D 00 64 FD | 	ret
2f9fc                 | 
2f9fc                 | _fatfs_cc___tzoffset
2f9fc     09 01 0A F6 | 	mov	_var01, arg01 wz
2fa00     FF FF FF FF 
2fa04     0A FF 6B FC | 	wrlong	##-1, arg02
2fa08     01 02 06 F6 | 	mov	_var02, #1
2fa0c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fa10                 | '                 return 0;
2fa10     00 FA 05 A6 |  if_e	mov	result1, #0
2fa14     94 02 90 AD |  if_e	jmp	#LR__4957
2fa18     0A 01 68 FC | 	wrlong	#0, arg02
2fa1c     02 00 00 FF 
2fa20     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fa24     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fa28                 | ' 
2fa28                 | '        *hasdst = 0;
2fa28                 | ' 
2fa28                 | ' 	n = stdname;
2fa28                 | '         while (*s && isalpha(*s)) {
2fa28     02 00 00 FF 
2fa2c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fa30     97 28 48 FB | 	callpa	#(@LR__4941-@LR__4940)>>2,fcache_load_ptr_
2fa34                 | LR__4940
2fa34     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fa38     48 00 90 AD |  if_e	jmp	#LR__4942
2fa3c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fa40                 | ' {
2fa40                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fa40     80 12 36 F3 | 	fle	arg01, #128 wc
2fa44                 | '     return __ctype[c];
2fa44     02 00 00 FF 
2fa48     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fa4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fa50     09 FB C1 FA | 	rdbyte	result1, arg01
2fa54     02 00 00 FF 
2fa58     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fa5c     0C FA CD F7 | 	test	result1, #12 wz
2fa60     20 00 90 AD |  if_e	jmp	#LR__4942
2fa64     00 09 02 F6 | 	mov	_var05, _var01
2fa68     00 0B 02 F6 | 	mov	_var06, _var01
2fa6c     01 0A 06 F1 | 	add	_var06, #1
2fa70     04 0D C2 FA | 	rdbyte	_var07, _var05
2fa74     05 01 02 F6 | 	mov	_var01, _var06
2fa78     03 0D 42 FC | 	wrbyte	_var07, _var04
2fa7c     01 06 06 F1 | 	add	_var04, #1
2fa80     B0 FF 9F FD | 	jmp	#LR__4940
2fa84                 | LR__4941
2fa84                 | LR__4942
2fa84     03 01 48 FC | 	wrbyte	#0, _var04
2fa88     00 0E 06 F6 | 	mov	_var08, #0
2fa8c     00 05 C2 FA | 	rdbyte	_var03, _var01
2fa90     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fa94     01 02 66 A6 |  if_e	neg	_var02, #1
2fa98     01 00 06 A1 |  if_e	add	_var01, #1
2fa9c     97 28 48 FB | 	callpa	#(@LR__4944-@LR__4943)>>2,fcache_load_ptr_
2faa0                 | '                 sgn = -1;
2faa0                 | '                 s++;
2faa0                 | '         }
2faa0                 | '         while (isdigit(*s)) {
2faa0                 | LR__4943
2faa0     00 13 C2 FA | 	rdbyte	arg01, _var01
2faa4                 | ' {
2faa4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2faa4     80 12 36 F3 | 	fle	arg01, #128 wc
2faa8                 | '     return __ctype[c];
2faa8     02 00 00 FF 
2faac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fab0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fab4     09 FB C1 FA | 	rdbyte	result1, arg01
2fab8     02 00 00 FF 
2fabc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fac0     02 FA CD F7 | 	test	result1, #2 wz
2fac4     28 00 90 AD |  if_e	jmp	#LR__4945
2fac8     07 05 02 F6 | 	mov	_var03, _var08
2facc     02 04 66 F0 | 	shl	_var03, #2
2fad0     07 05 02 F1 | 	add	_var03, _var08
2fad4     01 04 66 F0 | 	shl	_var03, #1
2fad8     00 09 C2 FA | 	rdbyte	_var05, _var01
2fadc     30 08 86 F1 | 	sub	_var05, #48
2fae0     04 05 02 F1 | 	add	_var03, _var05
2fae4     02 0F 02 F6 | 	mov	_var08, _var03
2fae8     01 00 06 F1 | 	add	_var01, #1
2faec     B0 FF 9F FD | 	jmp	#LR__4943
2faf0                 | LR__4944
2faf0                 | LR__4945
2faf0     07 00 00 FF 
2faf4     10 0E 06 FD | 	qmul	_var08, ##3600
2faf8     00 05 C2 FA | 	rdbyte	_var03, _var01
2fafc     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fb00     18 10 62 FD | 	getqx	_var09
2fb04     70 00 90 5D |  if_ne	jmp	#LR__4949
2fb08     00 0E 06 F6 | 	mov	_var08, #0
2fb0c     01 00 06 F1 | 	add	_var01, #1
2fb10     97 28 48 FB | 	callpa	#(@LR__4947-@LR__4946)>>2,fcache_load_ptr_
2fb14                 | '                 x = 0;
2fb14                 | '                 s++;
2fb14                 | '                 while (isdigit(*s)) {
2fb14                 | LR__4946
2fb14     00 13 C2 FA | 	rdbyte	arg01, _var01
2fb18                 | ' {
2fb18                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fb18     80 12 36 F3 | 	fle	arg01, #128 wc
2fb1c                 | '     return __ctype[c];
2fb1c     02 00 00 FF 
2fb20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fb24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fb28     09 FB C1 FA | 	rdbyte	result1, arg01
2fb2c     02 00 00 FF 
2fb30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fb34     02 FA CD F7 | 	test	result1, #2 wz
2fb38     28 00 90 AD |  if_e	jmp	#LR__4948
2fb3c     07 05 02 F6 | 	mov	_var03, _var08
2fb40     02 04 66 F0 | 	shl	_var03, #2
2fb44     07 05 02 F1 | 	add	_var03, _var08
2fb48     01 04 66 F0 | 	shl	_var03, #1
2fb4c     00 09 C2 FA | 	rdbyte	_var05, _var01
2fb50     30 08 86 F1 | 	sub	_var05, #48
2fb54     04 05 02 F1 | 	add	_var03, _var05
2fb58     02 0F 02 F6 | 	mov	_var08, _var03
2fb5c     01 00 06 F1 | 	add	_var01, #1
2fb60     B0 FF 9F FD | 	jmp	#LR__4946
2fb64                 | LR__4947
2fb64                 | LR__4948
2fb64     07 0D 02 F6 | 	mov	_var07, _var08
2fb68     04 0C 66 F0 | 	shl	_var07, #4
2fb6c     07 0D 82 F1 | 	sub	_var07, _var08
2fb70     02 0C 66 F0 | 	shl	_var07, #2
2fb74     06 11 02 F1 | 	add	_var09, _var07
2fb78                 | LR__4949
2fb78     02 00 00 FF 
2fb7c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fb80     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fb84     00 13 C2 FA | 	rdbyte	arg01, _var01
2fb88                 | ' {
2fb88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fb88     80 12 36 F3 | 	fle	arg01, #128 wc
2fb8c                 | '     return __ctype[c];
2fb8c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fb90     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fb94     09 FB C1 FA | 	rdbyte	result1, arg01
2fb98     02 00 00 FF 
2fb9c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fba0     0C FA CD F7 | 	test	result1, #12 wz
2fba4     50 00 90 AD |  if_e	jmp	#LR__4952
2fba8     0A 03 68 FC | 	wrlong	#1, arg02
2fbac                 | '                 *hasdst = 1;
2fbac                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fbac                 | LR__4950
2fbac     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fbb0     44 00 90 AD |  if_e	jmp	#LR__4951
2fbb4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fbb8                 | ' {
2fbb8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fbb8     80 12 36 F3 | 	fle	arg01, #128 wc
2fbbc                 | '     return __ctype[c];
2fbbc     02 00 00 FF 
2fbc0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fbc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fbc8     09 FB C1 FA | 	rdbyte	result1, arg01
2fbcc     02 00 00 FF 
2fbd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fbd4     0C FA CD F7 | 	test	result1, #12 wz
2fbd8     1C 00 90 AD |  if_e	jmp	#LR__4951
2fbdc     00 0B 02 F6 | 	mov	_var06, _var01
2fbe0     01 0A 06 F1 | 	add	_var06, #1
2fbe4     00 0D C2 FA | 	rdbyte	_var07, _var01
2fbe8     05 01 02 F6 | 	mov	_var01, _var06
2fbec     03 0D 42 FC | 	wrbyte	_var07, _var04
2fbf0     01 06 06 F1 | 	add	_var04, #1
2fbf4     B4 FF 9F FD | 	jmp	#LR__4950
2fbf8                 | LR__4951
2fbf8                 | LR__4952
2fbf8     03 01 48 FC | 	wrbyte	#0, _var04
2fbfc     02 00 00 FF 
2fc00     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc04     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fc08     02 00 00 FF 
2fc0c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fc10     20 00 90 AD |  if_e	jmp	#LR__4953
2fc14     02 00 00 FF 
2fc18     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc1c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fc20     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fc24     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fc28     02 00 00 FF 
2fc2c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fc30     1C 00 90 FD | 	jmp	#LR__4954
2fc34                 | LR__4953
2fc34     02 00 00 FF 
2fc38     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fc3c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fc40     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fc44     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fc48     02 00 00 FF 
2fc4c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fc50                 | LR__4954
2fc50     02 00 00 FF 
2fc54     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fc58     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fc5c     02 00 00 FF 
2fc60     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fc64     20 00 90 AD |  if_e	jmp	#LR__4955
2fc68     02 00 00 FF 
2fc6c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fc70     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fc74     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fc78     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fc7c     02 00 00 FF 
2fc80     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fc84     1C 00 90 FD | 	jmp	#LR__4956
2fc88                 | LR__4955
2fc88     02 00 00 FF 
2fc8c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc90     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fc94     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fc98     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fc9c     02 00 00 FF 
2fca0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fca4                 | LR__4956
2fca4     08 03 02 FD | 	qmul	_var02, _var09
2fca8                 | ' 		_tzname[1] = stdname;
2fca8                 | ' 
2fca8                 | '         return sgn * off;
2fca8     18 FA 61 FD | 	getqx	result1
2fcac                 | LR__4957
2fcac                 | _fatfs_cc___tzoffset_ret
2fcac     2D 00 64 FD | 	ret
2fcb0                 | 
2fcb0                 | _fatfs_cc___indst
2fcb0     10 12 06 F1 | 	add	arg01, #16
2fcb4     09 01 02 FB | 	rdlong	_var01, arg01
2fcb8     10 12 86 F1 | 	sub	arg01, #16
2fcbc     02 00 0E F2 | 	cmp	_var01, #2 wz
2fcc0     30 00 90 5D |  if_ne	jmp	#LR__4960
2fcc4     07 00 06 F6 | 	mov	_var01, #7
2fcc8     18 12 06 F1 | 	add	arg01, #24
2fccc     09 03 02 FB | 	rdlong	_var02, arg01
2fcd0     01 01 02 F1 | 	add	_var01, _var02
2fcd4     0C 12 86 F1 | 	sub	arg01, #12
2fcd8     09 05 02 FB | 	rdlong	_var03, arg01
2fcdc     02 01 82 F1 | 	sub	_var01, _var03
2fce0     00 00 56 F2 | 	cmps	_var01, #0 wc
2fce4                 | '                         return 1;
2fce4     01 FA 05 C6 |  if_b	mov	result1, #1
2fce8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fcec                 | '                 return 0;
2fcec     00 FA 05 F6 | 	mov	result1, #0
2fcf0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fcf4                 | LR__4960
2fcf4     10 12 06 F1 | 	add	arg01, #16
2fcf8     09 01 02 FB | 	rdlong	_var01, arg01
2fcfc     10 12 86 F1 | 	sub	arg01, #16
2fd00     0A 00 0E F2 | 	cmp	_var01, #10 wz
2fd04     28 00 90 5D |  if_ne	jmp	#LR__4961
2fd08     18 12 06 F1 | 	add	arg01, #24
2fd0c     09 01 02 FB | 	rdlong	_var01, arg01
2fd10     0C 12 86 F1 | 	sub	arg01, #12
2fd14     09 07 02 FB | 	rdlong	_var04, arg01
2fd18     03 01 82 F1 | 	sub	_var01, _var04
2fd1c     00 00 56 F2 | 	cmps	_var01, #0 wc
2fd20                 | '                         return 0;
2fd20     00 FA 05 C6 |  if_b	mov	result1, #0
2fd24     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fd28                 | '                 return 1;
2fd28     01 FA 05 F6 | 	mov	result1, #1
2fd2c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fd30                 | LR__4961
2fd30                 | '         }
2fd30                 | ' 
2fd30                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2fd30     00 00 06 F6 | 	mov	_var01, #0
2fd34     10 12 06 F1 | 	add	arg01, #16
2fd38     09 03 02 FB | 	rdlong	_var02, arg01
2fd3c     10 12 86 F1 | 	sub	arg01, #16
2fd40     03 02 56 F2 | 	cmps	_var02, #3 wc
2fd44     10 00 90 CD |  if_b	jmp	#LR__4962
2fd48     10 12 06 F1 | 	add	arg01, #16
2fd4c     09 05 02 FB | 	rdlong	_var03, arg01
2fd50     0A 04 56 F2 | 	cmps	_var03, #10 wc
2fd54     01 00 06 C6 |  if_b	mov	_var01, #1
2fd58                 | LR__4962
2fd58     00 FB 01 F6 | 	mov	result1, _var01
2fd5c                 | _fatfs_cc___indst_ret
2fd5c     2D 00 64 FD | 	ret
2fd60                 | 
2fd60                 | ' 	
2fd60                 | ' 	FUNCTION pfunc(c as integer) as integer
2fd60                 | ___strs_cl_pfunc
2fd60                 | ' 		if (i < 16) then
2fd60     04 E4 05 F1 | 	add	objptr, #4
2fd64     F2 FA 01 FB | 	rdlong	result1, objptr
2fd68     04 E4 85 F1 | 	sub	objptr, #4
2fd6c     10 FA 55 F2 | 	cmps	result1, #16 wc
2fd70     2C 00 90 3D |  if_ae	jmp	#LR__4970
2fd74     F2 FA 01 FB | 	rdlong	result1, objptr
2fd78     04 E4 05 F1 | 	add	objptr, #4
2fd7c     F2 00 02 FB | 	rdlong	_var01, objptr
2fd80     FD 00 02 F1 | 	add	_var01, result1
2fd84     00 13 42 FC | 	wrbyte	arg01, _var01
2fd88     F2 FA 01 FB | 	rdlong	result1, objptr
2fd8c     01 FA 05 F1 | 	add	result1, #1
2fd90     F2 FA 61 FC | 	wrlong	result1, objptr
2fd94     04 E4 85 F1 | 	sub	objptr, #4
2fd98                 | ' 			p(i) = c
2fd98                 | ' 			i = i+1
2fd98                 | ' 			return 1
2fd98     01 FA 05 F6 | 	mov	result1, #1
2fd9c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2fda0                 | LR__4970
2fda0                 | ' 			return -1
2fda0     01 FA 65 F6 | 	neg	result1, #1
2fda4                 | ___strs_cl_pfunc_ret
2fda4     2D 00 64 FD | 	ret
2fda8                 | 
2fda8                 | __struct__s_vfs_file_t_putchar
2fda8     04 4A 05 F6 | 	mov	COUNT_, #4
2fdac     A8 00 A0 FD | 	call	#pushregs_
2fdb0     1C E4 05 F1 | 	add	objptr, #28
2fdb4     F2 1E 0A FB | 	rdlong	local01, objptr wz
2fdb8     1C E4 85 F1 | 	sub	objptr, #28
2fdbc     00 FA 05 A6 |  if_e	mov	result1, #0
2fdc0     48 00 90 AD |  if_e	jmp	#LR__4980
2fdc4     1C E4 05 F1 | 	add	objptr, #28
2fdc8     F2 20 02 FB | 	rdlong	local02, objptr
2fdcc     10 23 02 F6 | 	mov	local03, local02
2fdd0     1C E4 85 F1 | 	sub	objptr, #28
2fdd4     13 22 46 F7 | 	zerox	local03, #19
2fdd8     14 20 46 F0 | 	shr	local02, #20
2fddc     02 20 66 F0 | 	shl	local02, #2
2fde0     ED 20 02 F1 | 	add	local02, __methods__
2fde4     10 21 02 FB | 	rdlong	local02, local02
2fde8     F2 14 02 F6 | 	mov	arg02, objptr
2fdec     F2 24 02 F6 | 	mov	local04, objptr
2fdf0     11 E5 01 F6 | 	mov	objptr, local03
2fdf4     2D 20 62 FD | 	call	local02
2fdf8     12 E5 01 F6 | 	mov	objptr, local04
2fdfc                 | '     return (i < 0) ? 0 : 1;
2fdfc     00 FA 55 F2 | 	cmps	result1, #0 wc
2fe00     00 1E 06 C6 |  if_b	mov	local01, #0
2fe04     01 1E 06 36 |  if_ae	mov	local01, #1
2fe08     0F FB 01 F6 | 	mov	result1, local01
2fe0c                 | LR__4980
2fe0c     A7 F0 03 F6 | 	mov	ptra, fp
2fe10     B2 00 A0 FD | 	call	#popregs_
2fe14                 | __struct__s_vfs_file_t_putchar_ret
2fe14     2D 00 64 FD | 	ret
2fe18                 | 
2fe18                 | __struct__s_vfs_file_t_getchar
2fe18     03 4A 05 F6 | 	mov	COUNT_, #3
2fe1c     A8 00 A0 FD | 	call	#pushregs_
2fe20     20 E4 05 F1 | 	add	objptr, #32
2fe24     F2 12 0A FB | 	rdlong	arg01, objptr wz
2fe28     20 E4 85 F1 | 	sub	objptr, #32
2fe2c     01 FA 65 A6 |  if_e	neg	result1, #1
2fe30     38 00 90 AD |  if_e	jmp	#LR__4990
2fe34                 | '     return getcf(__this);
2fe34     20 E4 05 F1 | 	add	objptr, #32
2fe38     F2 1E 02 FB | 	rdlong	local01, objptr
2fe3c     0F 21 02 F6 | 	mov	local02, local01
2fe40     20 E4 85 F1 | 	sub	objptr, #32
2fe44     13 20 46 F7 | 	zerox	local02, #19
2fe48     14 1E 46 F0 | 	shr	local01, #20
2fe4c     02 1E 66 F0 | 	shl	local01, #2
2fe50     ED 1E 02 F1 | 	add	local01, __methods__
2fe54     0F 1F 02 FB | 	rdlong	local01, local01
2fe58     F2 12 02 F6 | 	mov	arg01, objptr
2fe5c     F2 22 02 F6 | 	mov	local03, objptr
2fe60     10 E5 01 F6 | 	mov	objptr, local02
2fe64     2D 1E 62 FD | 	call	local01
2fe68     11 E5 01 F6 | 	mov	objptr, local03
2fe6c                 | LR__4990
2fe6c     A7 F0 03 F6 | 	mov	ptra, fp
2fe70     B2 00 A0 FD | 	call	#popregs_
2fe74                 | __struct__s_vfs_file_t_getchar_ret
2fe74     2D 00 64 FD | 	ret
2fe78                 | 
2fe78                 | __struct___bas_wrap_sender_tx
2fe78     03 4A 05 F6 | 	mov	COUNT_, #3
2fe7c     A8 00 A0 FD | 	call	#pushregs_
2fe80     F2 1E 02 FB | 	rdlong	local01, objptr
2fe84     0F 21 02 F6 | 	mov	local02, local01
2fe88     13 1E 46 F7 | 	zerox	local01, #19
2fe8c     14 20 46 F0 | 	shr	local02, #20
2fe90     02 20 66 F0 | 	shl	local02, #2
2fe94     ED 20 02 F1 | 	add	local02, __methods__
2fe98     10 21 02 FB | 	rdlong	local02, local02
2fe9c     F2 22 02 F6 | 	mov	local03, objptr
2fea0     0F E5 01 F6 | 	mov	objptr, local01
2fea4     2D 20 62 FD | 	call	local02
2fea8     11 E5 01 F6 | 	mov	objptr, local03
2feac     01 FA 05 F6 | 	mov	result1, #1
2feb0     A7 F0 03 F6 | 	mov	ptra, fp
2feb4     B2 00 A0 FD | 	call	#popregs_
2feb8                 | __struct___bas_wrap_sender_tx_ret
2feb8     2D 00 64 FD | 	ret
2febc                 | 
2febc                 | __struct___bas_wrap_sender_rx
2febc     03 4A 05 F6 | 	mov	COUNT_, #3
2fec0     A8 00 A0 FD | 	call	#pushregs_
2fec4     04 E4 05 F1 | 	add	objptr, #4
2fec8     F2 1E 02 FB | 	rdlong	local01, objptr
2fecc     0F 21 02 F6 | 	mov	local02, local01
2fed0     04 E4 85 F1 | 	sub	objptr, #4
2fed4     13 20 46 F7 | 	zerox	local02, #19
2fed8     14 1E 46 F0 | 	shr	local01, #20
2fedc     02 1E 66 F0 | 	shl	local01, #2
2fee0     ED 1E 02 F1 | 	add	local01, __methods__
2fee4     0F 1F 02 FB | 	rdlong	local01, local01
2fee8     F2 22 02 F6 | 	mov	local03, objptr
2feec     10 E5 01 F6 | 	mov	objptr, local02
2fef0     2D 1E 62 FD | 	call	local01
2fef4     11 E5 01 F6 | 	mov	objptr, local03
2fef8     A7 F0 03 F6 | 	mov	ptra, fp
2fefc     B2 00 A0 FD | 	call	#popregs_
2ff00                 | __struct___bas_wrap_sender_rx_ret
2ff00     2D 00 64 FD | 	ret
2ff04                 | 
2ff04                 | __struct___bas_wrap_sender_close
2ff04     03 4A 05 F6 | 	mov	COUNT_, #3
2ff08     A8 00 A0 FD | 	call	#pushregs_
2ff0c     08 E4 05 F1 | 	add	objptr, #8
2ff10     F2 1E 02 FB | 	rdlong	local01, objptr
2ff14     0F 21 02 F6 | 	mov	local02, local01
2ff18     08 E4 85 F1 | 	sub	objptr, #8
2ff1c     13 20 46 F7 | 	zerox	local02, #19
2ff20     14 1E 46 F0 | 	shr	local01, #20
2ff24     02 1E 66 F0 | 	shl	local01, #2
2ff28     ED 1E 02 F1 | 	add	local01, __methods__
2ff2c     0F 1F 02 FB | 	rdlong	local01, local01
2ff30     F2 22 02 F6 | 	mov	local03, objptr
2ff34     10 E5 01 F6 | 	mov	objptr, local02
2ff38     2D 1E 62 FD | 	call	local01
2ff3c     11 E5 01 F6 | 	mov	objptr, local03
2ff40     A7 F0 03 F6 | 	mov	ptra, fp
2ff44     B2 00 A0 FD | 	call	#popregs_
2ff48                 | __struct___bas_wrap_sender_close_ret
2ff48     2D 00 64 FD | 	ret
2ff4c                 | 
2ff4c                 | LR__5000
2ff4c     2F          | 	byte	"/"
2ff4d     00          | 	byte	0
2ff4e                 | LR__5001
2ff4e     69 6E 66    | 	byte	"inf"
2ff51     00          | 	byte	0
2ff52                 | LR__5002
2ff52     6E 61 6E    | 	byte	"nan"
2ff55     00          | 	byte	0
2ff56                 | LR__5003
2ff56                 | 	byte	
2ff56     00          | 	byte	0
2ff57                 | LR__5004
2ff57                 | 	byte	
2ff57     00          | 	byte	0
2ff58                 | LR__5005
2ff58                 | 	byte	
2ff58     00          | 	byte	0
2ff59                 | LR__5006
2ff59                 | 	byte	
2ff59     00          | 	byte	0
2ff5a                 | LR__5007
2ff5a                 | 	byte	
2ff5a     00          | 	byte	0
2ff5b                 | LR__5008
2ff5b                 | 	byte	
2ff5b     00          | 	byte	0
2ff5c                 | LR__5009
2ff5c                 | 	byte	
2ff5c     00          | 	byte	0
2ff5d                 | LR__5010
2ff5d                 | 	byte	
2ff5d     00          | 	byte	0
2ff5e                 | LR__5011
2ff5e     00          | 	byte	0
2ff5f     00          | 	byte	0
2ff60                 | LR__5012
2ff60     00          | 	byte	0
2ff61     00          | 	byte	0
2ff62                 | LR__5013
2ff62     00          | 	byte	0
2ff63     00          | 	byte	0
2ff64                 | LR__5014
2ff64     20 21 21 21 
2ff68     20 63 6F 72 
2ff6c     72 75 70 74 
2ff70     65 64 20 68 
2ff74     65 61 70 3F 
2ff78     3F 3F 20 21 
2ff7c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2ff7f     00          | 	byte	0
2ff80                 | LR__5015
2ff80     20 21 21 21 
2ff84     20 6F 75 74 
2ff88     20 6F 66 20 
2ff8c     68 65 61 70 
2ff90     20 6D 65 6D 
2ff94     6F 72 79 20 
2ff98     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2ff9c     00          | 	byte	0
2ff9d                 | LR__5016
2ff9d     20 21 21 21 
2ffa1     20 63 6F 72 
2ffa5     72 75 70 74 
2ffa9     65 64 20 68 
2ffad     65 61 70 20 
2ffb1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2ffb5     00          | 	byte	0
2ffb6                 | LR__5017
2ffb6     00          | 	byte	0
2ffb7     00          | 	byte	0
2ffb8                 | LR__5018
2ffb8     2E          | 	byte	"."
2ffb9     00          | 	byte	0
2ffba                 | LR__5019
2ffba     00          | 	byte	0
2ffbb     00          | 	byte	0
2ffbc                 | LR__5020
2ffbc     00          | 	byte	0
2ffbd     00          | 	byte	0
2ffbe                 | LR__5021
2ffbe     00          | 	byte	0
2ffbf     00          | 	byte	0
2ffc0                 | LR__5022
2ffc0     2A 3A 3C 3E 
2ffc4     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2ffc8     00          | 	byte	0
2ffc9                 | LR__5023
2ffc9     2B 2C 3B 3D 
2ffcd     5B 5D       | 	byte	"+,;=[]"
2ffcf     00          | 	byte	0
2ffd0                 | LR__5024
2ffd0     46 41 54 33 
2ffd4     32 20 20 20 | 	byte	"FAT32   "
2ffd8     00          | 	byte	0
2ffd9                 | LR__5025
2ffd9     54 5A       | 	byte	"TZ"
2ffdb     00          | 	byte	0
2ffdc                 | LR__5026
2ffdc     00          | 	byte	0
2ffdd     00          | 	byte	0
2ffde                 | LR__5027
2ffde                 | 	byte	
2ffde     00          | 	byte	0
2ffdf                 | LR__5028
2ffdf                 | 	byte	
2ffdf     00          | 	byte	0
2ffe0                 | LR__5029
2ffe0                 | 	byte	
2ffe0     00          | 	byte	0
2ffe1                 | LR__5030
2ffe1                 | 	byte	
2ffe1     00          | 	byte	0
2ffe2                 | LR__5031
2ffe2     22          | 	byte	34
2ffe3     00          | 	byte	0
2ffe4                 | LR__5032
2ffe4     22          | 	byte	34
2ffe5     00          | 	byte	0
2ffe6                 | LR__5033
2ffe6     3A          | 	byte	":"
2ffe7     00          | 	byte	0
2ffe8                 | LR__5034
2ffe8                 | 	byte	
2ffe8     00          | 	byte	0
2ffe9                 | LR__5035
2ffe9                 | 	byte	
2ffe9     00          | 	byte	0
2ffea                 | LR__5036
2ffea                 | 	byte	
2ffea     00          | 	byte	0
2ffeb                 | LR__5037
2ffeb                 | 	byte	
2ffeb     00          | 	byte	0
2ffec                 | LR__5038
2ffec                 | 	byte	
2ffec     00          | 	byte	0
2ffed                 | LR__5039
2ffed                 | 	byte	
2ffed     00          | 	byte	0
2ffee                 | LR__5040
2ffee                 | 	byte	
2ffee     00          | 	byte	0
2ffef                 | LR__5041
2ffef     30          | 	byte	"0"
2fff0     00          | 	byte	0
2fff1                 | LR__5042
2fff1     22          | 	byte	34
2fff2     00          | 	byte	0
2fff3                 | LR__5043
2fff3     22          | 	byte	34
2fff4     00          | 	byte	0
2fff5                 | LR__5044
2fff5     22          | 	byte	34
2fff6     00          | 	byte	0
2fff7                 | LR__5045
2fff7     22          | 	byte	34
2fff8     00          | 	byte	0
2fff9                 | LR__5046
2fff9     22          | 	byte	34
2fffa     00          | 	byte	0
2fffb                 | LR__5047
2fffb     3E          | 	byte	">"
2fffc     00          | 	byte	0
2fffd                 | LR__5048
2fffd     3C          | 	byte	"<"
2fffe     00          | 	byte	0
2ffff                 | LR__5049
2ffff     2B          | 	byte	"+"
30000     00          | 	byte	0
30001                 | LR__5050
30001     2D          | 	byte	"-"
30002     00          | 	byte	0
30003                 | LR__5051
30003     2A          | 	byte	"*"
30004     00          | 	byte	0
30005                 | LR__5052
30005     2F          | 	byte	"/"
30006     00          | 	byte	0
30007                 | LR__5053
30007     5E          | 	byte	"^"
30008     00          | 	byte	0
30009                 | LR__5054
30009     3D          | 	byte	"="
3000a     00          | 	byte	0
3000b                 | LR__5055
3000b     2B          | 	byte	"+"
3000c     00          | 	byte	0
3000d                 | LR__5056
3000d     2B          | 	byte	"+"
3000e     00          | 	byte	0
3000f                 | LR__5057
3000f     2D          | 	byte	"-"
30010     00          | 	byte	0
30011                 | LR__5058
30011     2D          | 	byte	"-"
30012     00          | 	byte	0
30013                 | LR__5059
30013     3C          | 	byte	"<"
30014     00          | 	byte	0
30015                 | LR__5060
30015     3E          | 	byte	">"
30016     00          | 	byte	0
30017                 | LR__5061
30017     22          | 	byte	34
30018     00          | 	byte	0
30019                 | LR__5062
30019     22          | 	byte	34
3001a     00          | 	byte	0
3001b                 | LR__5063
3001b     65 6C 73 65 | 	byte	"else"
3001f     00          | 	byte	0
30020                 | LR__5064
30020     74 68 65 6E | 	byte	"then"
30024     00          | 	byte	0
30025                 | LR__5065
30025     2E          | 	byte	"."
30026     00          | 	byte	0
30027                 | LR__5066
30027     3F          | 	byte	"?"
30028     00          | 	byte	0
30029                 | LR__5067
30029     3F          | 	byte	"?"
3002a     00          | 	byte	0
3002b                 | LR__5068
3002b     6D 6F 75 73 
3002f     65          | 	byte	"mouse"
30030     00          | 	byte	0
30031                 | LR__5069
30031     63 75 72 73 
30035     6F 72       | 	byte	"cursor"
30037     00          | 	byte	0
30038                 | LR__5070
30038     63 6C 69 63 
3003c     6B          | 	byte	"click"
3003d     00          | 	byte	0
3003e                 | LR__5071
3003e     6F 6E       | 	byte	"on"
30040     00          | 	byte	0
30041                 | LR__5072
30041     31          | 	byte	"1"
30042     00          | 	byte	0
30043                 | LR__5073
30043     6F 66 66    | 	byte	"off"
30046     00          | 	byte	0
30047                 | LR__5074
30047     30          | 	byte	"0"
30048     00          | 	byte	0
30049                 | LR__5075
30049     6D 6F 64 65 | 	byte	"mode"
3004d     00          | 	byte	0
3004e                 | LR__5076
3004e     6D 2E       | 	byte	"m."
30050     00          | 	byte	0
30051                 | LR__5077
30051     61 74 61 72 
30055     69          | 	byte	"atari"
30056     00          | 	byte	0
30057                 | LR__5078
30057     30          | 	byte	"0"
30058     00          | 	byte	0
30059                 | LR__5079
30059     70 63 5F 61 
3005d     6D 62 65 72 | 	byte	"pc_amber"
30061     00          | 	byte	0
30062                 | LR__5080
30062     31          | 	byte	"1"
30063     00          | 	byte	0
30064                 | LR__5081
30064     70 63 5F 67 
30068     72 65 65 6E | 	byte	"pc_green"
3006c     00          | 	byte	0
3006d                 | LR__5082
3006d     32          | 	byte	"2"
3006e     00          | 	byte	0
3006f                 | LR__5083
3006f     70 63 5F 77 
30073     68 69 74 65 | 	byte	"pc_white"
30077     00          | 	byte	0
30078                 | LR__5084
30078     33          | 	byte	"3"
30079     00          | 	byte	0
3007a                 | LR__5085
3007a     73 74       | 	byte	"st"
3007c     00          | 	byte	0
3007d                 | LR__5086
3007d     34          | 	byte	"4"
3007e     00          | 	byte	0
3007f                 | LR__5087
3007f                 | 	byte	
3007f     00          | 	byte	0
30080                 | LR__5088
30080     6C 6F 61 64 | 	byte	"load"
30084     00          | 	byte	0
30085                 | LR__5089
30085     73 61 76 65 | 	byte	"save"
30089     00          | 	byte	0
3008a                 | LR__5090
3008a     62 72 75 6E | 	byte	"brun"
3008e     00          | 	byte	0
3008f                 | LR__5091
3008f     72 75 6E    | 	byte	"run"
30092     00          | 	byte	0
30093                 | LR__5092
30093     6C 6F 2E    | 	byte	"lo."
30096     00          | 	byte	0
30097                 | LR__5093
30097     73 2E       | 	byte	"s."
30099     00          | 	byte	0
3009a                 | LR__5094
3009a     62 72 2E    | 	byte	"br."
3009d     00          | 	byte	0
3009e                 | LR__5095
3009e     65 6E 74 65 
300a2     72          | 	byte	"enter"
300a3     00          | 	byte	0
300a4                 | LR__5096
300a4     65 2E       | 	byte	"e."
300a6     00          | 	byte	0
300a7                 | LR__5097
300a7                 | 	byte	
300a7     00          | 	byte	0
300a8                 | LR__5098
300a8                 | 	byte	
300a8     00          | 	byte	0
300a9                 | LR__5099
300a9                 | 	byte	
300a9     00          | 	byte	0
300aa                 | LR__5100
300aa                 | 	byte	
300aa     00          | 	byte	0
300ab                 | LR__5101
300ab                 | 	byte	
300ab     00          | 	byte	0
300ac                 | LR__5102
300ac     52 65 61 64 
300b0     79          | 	byte	"Ready"
300b1     00          | 	byte	0
300b2                 | LR__5103
300b2     2B          | 	byte	"+"
300b3     00          | 	byte	0
300b4                 | LR__5104
300b4     2D          | 	byte	"-"
300b5     00          | 	byte	0
300b6                 | LR__5105
300b6     6F 72       | 	byte	"or"
300b8     00          | 	byte	0
300b9                 | LR__5106
300b9     78 6F 72    | 	byte	"xor"
300bc     00          | 	byte	0
300bd                 | LR__5107
300bd     2A          | 	byte	"*"
300be     00          | 	byte	0
300bf                 | LR__5108
300bf     2F          | 	byte	"/"
300c0     00          | 	byte	0
300c1                 | LR__5109
300c1     61 6E 64    | 	byte	"and"
300c4     00          | 	byte	0
300c5                 | LR__5110
300c5     64 69 76    | 	byte	"div"
300c8     00          | 	byte	0
300c9                 | LR__5111
300c9     6D 6F 64    | 	byte	"mod"
300cc     00          | 	byte	0
300cd                 | LR__5112
300cd     73 68 6C    | 	byte	"shl"
300d0     00          | 	byte	0
300d1                 | LR__5113
300d1     73 68 72    | 	byte	"shr"
300d4     00          | 	byte	0
300d5                 | LR__5114
300d5     5E          | 	byte	"^"
300d6     00          | 	byte	0
300d7                 | LR__5115
300d7     6E 6F 74    | 	byte	"not"
300da     00          | 	byte	0
300db                 | LR__5116
300db     40          | 	byte	"@"
300dc     00          | 	byte	0
300dd                 | LR__5117
300dd     3D          | 	byte	"="
300de     00          | 	byte	0
300df                 | LR__5118
300df     3E 3D       | 	byte	">="
300e1     00          | 	byte	0
300e2                 | LR__5119
300e2     3C 3D       | 	byte	"<="
300e4     00          | 	byte	0
300e5                 | LR__5120
300e5     3C          | 	byte	"<"
300e6     00          | 	byte	0
300e7                 | LR__5121
300e7     3E          | 	byte	">"
300e8     00          | 	byte	0
300e9                 | LR__5122
300e9     3C 3E       | 	byte	"<>"
300eb     00          | 	byte	0
300ec                 | LR__5123
300ec     2B 2B       | 	byte	"++"
300ee     00          | 	byte	0
300ef                 | LR__5124
300ef     2D 2D       | 	byte	"--"
300f1     00          | 	byte	0
300f2                 | LR__5125
300f2     23          | 	byte	"#"
300f3     00          | 	byte	0
300f4                 | LR__5126
300f4     30          | 	byte	"0"
300f5     00          | 	byte	0
300f6                 | LR__5127
300f6     39          | 	byte	"9"
300f7     00          | 	byte	0
300f8                 | LR__5128
300f8     23 72 65 61 
300fc     64          | 	byte	"#read"
300fd     00          | 	byte	0
300fe                 | LR__5129
300fe     23 77 72 69 
30102     74 65       | 	byte	"#write"
30104     00          | 	byte	0
30105                 | LR__5130
30105     23 61 70 70 
30109     65 6E 64    | 	byte	"#append"
3010c     00          | 	byte	0
3010d                 | LR__5131
3010d     23          | 	byte	"#"
3010e     00          | 	byte	0
3010f                 | LR__5132
3010f     23          | 	byte	"#"
30110     00          | 	byte	0
30111                 | LR__5133
30111     2D          | 	byte	"-"
30112     00          | 	byte	0
30113                 | LR__5134
30113     30          | 	byte	"0"
30114     00          | 	byte	0
30115                 | LR__5135
30115     63          | 	byte	"c"
30116     00          | 	byte	0
30117                 | LR__5136
30117     63 23       | 	byte	"c#"
30119     00          | 	byte	0
3011a                 | LR__5137
3011a     64          | 	byte	"d"
3011b     00          | 	byte	0
3011c                 | LR__5138
3011c     64 23       | 	byte	"d#"
3011e     00          | 	byte	0
3011f                 | LR__5139
3011f     65          | 	byte	"e"
30120     00          | 	byte	0
30121                 | LR__5140
30121     66          | 	byte	"f"
30122     00          | 	byte	0
30123                 | LR__5141
30123     66 23       | 	byte	"f#"
30125     00          | 	byte	0
30126                 | LR__5142
30126     67          | 	byte	"g"
30127     00          | 	byte	0
30128                 | LR__5143
30128     67 23       | 	byte	"g#"
3012a     00          | 	byte	0
3012b                 | LR__5144
3012b     61          | 	byte	"a"
3012c     00          | 	byte	0
3012d                 | LR__5145
3012d     61 23       | 	byte	"a#"
3012f     00          | 	byte	0
30130                 | LR__5146
30130     68          | 	byte	"h"
30131     00          | 	byte	0
30132                 | LR__5147
30132     62          | 	byte	"b"
30133     00          | 	byte	0
30134                 | LR__5148
30134     2B          | 	byte	"+"
30135     00          | 	byte	0
30136                 | LR__5149
30136     2D          | 	byte	"-"
30137     00          | 	byte	0
30138                 | LR__5150
30138     3D          | 	byte	"="
30139     00          | 	byte	0
3013a                 | LR__5151
3013a     2C          | 	byte	","
3013b     00          | 	byte	0
3013c                 | LR__5152
3013c     2A          | 	byte	"*"
3013d     00          | 	byte	0
3013e                 | LR__5153
3013e     2F          | 	byte	"/"
3013f     00          | 	byte	0
30140                 | LR__5154
30140     3B          | 	byte	";"
30141     00          | 	byte	0
30142                 | LR__5155
30142     22          | 	byte	34
30143     00          | 	byte	0
30144                 | LR__5156
30144     5E          | 	byte	"^"
30145     00          | 	byte	0
30146                 | LR__5157
30146     29          | 	byte	")"
30147     00          | 	byte	0
30148                 | LR__5158
30148     28          | 	byte	"("
30149     00          | 	byte	0
3014a                 | LR__5159
3014a     3A          | 	byte	":"
3014b     00          | 	byte	0
3014c                 | LR__5160
3014c     20          | 	byte	" "
3014d     00          | 	byte	0
3014e                 | LR__5161
3014e     3E          | 	byte	">"
3014f     00          | 	byte	0
30150                 | LR__5162
30150     3C          | 	byte	"<"
30151     00          | 	byte	0
30152                 | LR__5163
30152     3D          | 	byte	"="
30153     00          | 	byte	0
30154                 | LR__5164
30154     62 65 65 70 | 	byte	"beep"
30158     00          | 	byte	0
30159                 | LR__5165
30159     62 2E       | 	byte	"b."
3015b     00          | 	byte	0
3015c                 | LR__5166
3015c     62 6F 78    | 	byte	"box"
3015f     00          | 	byte	0
30160                 | LR__5167
30160     62 72 75 6E | 	byte	"brun"
30164     00          | 	byte	0
30165                 | LR__5168
30165     62 72 2E    | 	byte	"br."
30168     00          | 	byte	0
30169                 | LR__5169
30169     63 68 61 6E 
3016d     67 65 66 72 
30171     65 71       | 	byte	"changefreq"
30173     00          | 	byte	0
30174                 | LR__5170
30174     63 66 2E    | 	byte	"cf."
30177     00          | 	byte	0
30178                 | LR__5171
30178     63 68 61 6E 
3017c     67 65 70 61 
30180     6E          | 	byte	"changepan"
30181     00          | 	byte	0
30182                 | LR__5172
30182     63 70 2E    | 	byte	"cp."
30185     00          | 	byte	0
30186                 | LR__5173
30186     63 68 61 6E 
3018a     67 65 76 6F 
3018e     6C          | 	byte	"changevol"
3018f     00          | 	byte	0
30190                 | LR__5174
30190     63 76 2E    | 	byte	"cv."
30193     00          | 	byte	0
30194                 | LR__5175
30194     63 68 61 6E 
30198     67 65 77 61 
3019c     76 65       | 	byte	"changewave"
3019e     00          | 	byte	0
3019f                 | LR__5176
3019f     63 77 2E    | 	byte	"cw."
301a2     00          | 	byte	0
301a3                 | LR__5177
301a3     63 69 72 63 
301a7     6C 65       | 	byte	"circle"
301a9     00          | 	byte	0
301aa                 | LR__5178
301aa     63 69 2E    | 	byte	"ci."
301ad     00          | 	byte	0
301ae                 | LR__5179
301ae     63 6C 69 63 
301b2     6B          | 	byte	"click"
301b3     00          | 	byte	0
301b4                 | LR__5180
301b4     63 6C 6F 73 
301b8     65          | 	byte	"close"
301b9     00          | 	byte	0
301ba                 | LR__5181
301ba     63 6C 73    | 	byte	"cls"
301bd     00          | 	byte	0
301be                 | LR__5182
301be     63 6F 6C 6F 
301c2     72          | 	byte	"color"
301c3     00          | 	byte	0
301c4                 | LR__5183
301c4     63 2E       | 	byte	"c."
301c6     00          | 	byte	0
301c7                 | LR__5184
301c7     63 73 61 76 
301cb     65          | 	byte	"csave"
301cc     00          | 	byte	0
301cd                 | LR__5185
301cd     63 73 2E    | 	byte	"cs."
301d0     00          | 	byte	0
301d1                 | LR__5186
301d1     63 75 72 73 
301d5     6F 72       | 	byte	"cursor"
301d7     00          | 	byte	0
301d8                 | LR__5187
301d8     64 65 66 73 
301dc     6E 64       | 	byte	"defsnd"
301de     00          | 	byte	0
301df                 | LR__5188
301df     64 65 66 65 
301e3     6E 76       | 	byte	"defenv"
301e5     00          | 	byte	0
301e6                 | LR__5189
301e6     64 65 66 73 
301ea     70 72 69 74 
301ee     65          | 	byte	"defsprite"
301ef     00          | 	byte	0
301f0                 | LR__5190
301f0     64 73 2E    | 	byte	"ds."
301f3     00          | 	byte	0
301f4                 | LR__5191
301f4     64 65 67    | 	byte	"deg"
301f7     00          | 	byte	0
301f8                 | LR__5192
301f8     64 69 6D    | 	byte	"dim"
301fb     00          | 	byte	0
301fc                 | LR__5193
301fc     64 69 72    | 	byte	"dir"
301ff     00          | 	byte	0
30200                 | LR__5194
30200     64 70 6F 6B 
30204     65          | 	byte	"dpoke"
30205     00          | 	byte	0
30206                 | LR__5195
30206     64 72 61 77 | 	byte	"draw"
3020a     00          | 	byte	0
3020b                 | LR__5196
3020b     64 72 2E    | 	byte	"dr."
3020e     00          | 	byte	0
3020f                 | LR__5197
3020f     65 6C 73 65 | 	byte	"else"
30213     00          | 	byte	0
30214                 | LR__5198
30214     65 6E 64    | 	byte	"end"
30217     00          | 	byte	0
30218                 | LR__5199
30218     65 6E 74 65 
3021c     72          | 	byte	"enter"
3021d     00          | 	byte	0
3021e                 | LR__5200
3021e     65 2E       | 	byte	"e."
30220     00          | 	byte	0
30221                 | LR__5201
30221     66 63 69 72 
30225     63 6C 65    | 	byte	"fcircle"
30228     00          | 	byte	0
30229                 | LR__5202
30229     66 63 2E    | 	byte	"fc."
3022c     00          | 	byte	0
3022d                 | LR__5203
3022d     66 69 6C 6C | 	byte	"fill"
30231     00          | 	byte	0
30232                 | LR__5204
30232     66 69 2E    | 	byte	"fi."
30235     00          | 	byte	0
30236                 | LR__5205
30236     66 6F 6E 74 | 	byte	"font"
3023a     00          | 	byte	0
3023b                 | LR__5206
3023b     66 6F 72    | 	byte	"for"
3023e     00          | 	byte	0
3023f                 | LR__5207
3023f     66 2E       | 	byte	"f."
30241     00          | 	byte	0
30242                 | LR__5208
30242     66 72 61 6D 
30246     65          | 	byte	"frame"
30247     00          | 	byte	0
30248                 | LR__5209
30248     66 72 2E    | 	byte	"fr."
3024b     00          | 	byte	0
3024c                 | LR__5210
3024c     67 65 74    | 	byte	"get"
3024f     00          | 	byte	0
30250                 | LR__5211
30250     67 6F 73 75 
30254     62          | 	byte	"gosub"
30255     00          | 	byte	0
30256                 | LR__5212
30256     67 6F 74 6F | 	byte	"goto"
3025a     00          | 	byte	0
3025b                 | LR__5213
3025b     67 2E       | 	byte	"g."
3025d     00          | 	byte	0
3025e                 | LR__5214
3025e     69 66       | 	byte	"if"
30260     00          | 	byte	0
30261                 | LR__5215
30261     69 6E 6B    | 	byte	"ink"
30264     00          | 	byte	0
30265                 | LR__5216
30265     69 2E       | 	byte	"i."
30267     00          | 	byte	0
30268                 | LR__5217
30268     6C 69 73 74 | 	byte	"list"
3026c     00          | 	byte	0
3026d                 | LR__5218
3026d     6C 2E       | 	byte	"l."
3026f     00          | 	byte	0
30270                 | LR__5219
30270     6C 6F 61 64 | 	byte	"load"
30274     00          | 	byte	0
30275                 | LR__5220
30275     6C 6F 2E    | 	byte	"lo."
30278     00          | 	byte	0
30279                 | LR__5221
30279     6C 70 6F 6B 
3027d     65          | 	byte	"lpoke"
3027e     00          | 	byte	0
3027f                 | LR__5222
3027f     6D 6F 64 65 | 	byte	"mode"
30283     00          | 	byte	0
30284                 | LR__5223
30284     6D 2E       | 	byte	"m."
30286     00          | 	byte	0
30287                 | LR__5224
30287     6D 6F 75 73 
3028b     65          | 	byte	"mouse"
3028c     00          | 	byte	0
3028d                 | LR__5225
3028d     6E 65 77    | 	byte	"new"
30290     00          | 	byte	0
30291                 | LR__5226
30291     6E 65 78 74 | 	byte	"next"
30295     00          | 	byte	0
30296                 | LR__5227
30296     6E 2E       | 	byte	"n."
30298     00          | 	byte	0
30299                 | LR__5228
30299     6F 70 65 6E | 	byte	"open"
3029d     00          | 	byte	0
3029e                 | LR__5229
3029e     70 61 70 65 
302a2     72          | 	byte	"paper"
302a3     00          | 	byte	0
302a4                 | LR__5230
302a4     70 61 2E    | 	byte	"pa."
302a7     00          | 	byte	0
302a8                 | LR__5231
302a8     70 69 6E 66 
302ac     6C 6F 61 74 | 	byte	"pinfloat"
302b0     00          | 	byte	0
302b1                 | LR__5232
302b1     70 69 6E 68 
302b5     69          | 	byte	"pinhi"
302b6     00          | 	byte	0
302b7                 | LR__5233
302b7     70 69 6E 6C 
302bb     6F          | 	byte	"pinlo"
302bc     00          | 	byte	0
302bd                 | LR__5234
302bd     70 69 6E 73 
302c1     74 61 72 74 | 	byte	"pinstart"
302c5     00          | 	byte	0
302c6                 | LR__5235
302c6     70 69 6E 74 
302ca     6F 67 67 6C 
302ce     65          | 	byte	"pintoggle"
302cf     00          | 	byte	0
302d0                 | LR__5236
302d0     70 69 6E 77 
302d4     72 69 74 65 | 	byte	"pinwrite"
302d8     00          | 	byte	0
302d9                 | LR__5237
302d9     70 6C 61 79 | 	byte	"play"
302dd     00          | 	byte	0
302de                 | LR__5238
302de     70 2E       | 	byte	"p."
302e0     00          | 	byte	0
302e1                 | LR__5239
302e1     70 6C 6F 74 | 	byte	"plot"
302e5     00          | 	byte	0
302e6                 | LR__5240
302e6     70 6C 2E    | 	byte	"pl."
302e9     00          | 	byte	0
302ea                 | LR__5241
302ea     70 6F 6B 65 | 	byte	"poke"
302ee     00          | 	byte	0
302ef                 | LR__5242
302ef     70 6F 70    | 	byte	"pop"
302f2     00          | 	byte	0
302f3                 | LR__5243
302f3     70 6F 73 69 
302f7     74 69 6F 6E | 	byte	"position"
302fb     00          | 	byte	0
302fc                 | LR__5244
302fc     70 6F 73 2E | 	byte	"pos."
30300     00          | 	byte	0
30301                 | LR__5245
30301     70 72 69 6E 
30305     74          | 	byte	"print"
30306     00          | 	byte	0
30307                 | LR__5246
30307     3F          | 	byte	"?"
30308     00          | 	byte	0
30309                 | LR__5247
30309     70 75 74    | 	byte	"put"
3030c     00          | 	byte	0
3030d                 | LR__5248
3030d     72 61 64    | 	byte	"rad"
30310     00          | 	byte	0
30311                 | LR__5249
30311     72 65 6C 65 
30315     61 73 65    | 	byte	"release"
30318     00          | 	byte	0
30319                 | LR__5250
30319     72 65 6D    | 	byte	"rem"
3031c     00          | 	byte	0
3031d                 | LR__5251
3031d     27          | 	byte	"'"
3031e     00          | 	byte	0
3031f                 | LR__5252
3031f     72 65 74 75 
30323     72 6E       | 	byte	"return"
30325     00          | 	byte	0
30326                 | LR__5253
30326     72 75 6E    | 	byte	"run"
30329     00          | 	byte	0
3032a                 | LR__5254
3032a     73 61 76 65 | 	byte	"save"
3032e     00          | 	byte	0
3032f                 | LR__5255
3032f     73 2E       | 	byte	"s."
30331     00          | 	byte	0
30332                 | LR__5256
30332     73 65 74 64 
30336     65 6C 61 79 | 	byte	"setdelay"
3033a     00          | 	byte	0
3033b                 | LR__5257
3033b     73 64 2E    | 	byte	"sd."
3033e     00          | 	byte	0
3033f                 | LR__5258
3033f     73 65 74 65 
30343     6E 76       | 	byte	"setenv"
30345     00          | 	byte	0
30346                 | LR__5259
30346     73 65 2E    | 	byte	"se."
30349     00          | 	byte	0
3034a                 | LR__5260
3034a     73 65 74 6C 
3034e     65 6E       | 	byte	"setlen"
30350     00          | 	byte	0
30351                 | LR__5261
30351     73 6C 2E    | 	byte	"sl."
30354     00          | 	byte	0
30355                 | LR__5262
30355     73 65 74 70 
30359     61 6E       | 	byte	"setpan"
3035b     00          | 	byte	0
3035c                 | LR__5263
3035c     73 70       | 	byte	"sp"
3035e     00          | 	byte	0
3035f                 | LR__5264
3035f     73 65 74 73 
30363     75 73 74 61 
30367     69 6E       | 	byte	"setsustain"
30369     00          | 	byte	0
3036a                 | LR__5265
3036a     73 73 2E    | 	byte	"ss."
3036d     00          | 	byte	0
3036e                 | LR__5266
3036e     73 65 74 76 
30372     6F 6C       | 	byte	"setvol"
30374     00          | 	byte	0
30375                 | LR__5267
30375     73 76 2E    | 	byte	"sv."
30378     00          | 	byte	0
30379                 | LR__5268
30379     73 65 74 77 
3037d     61 76 65    | 	byte	"setwave"
30380     00          | 	byte	0
30381                 | LR__5269
30381     73 77 2E    | 	byte	"sw."
30384     00          | 	byte	0
30385                 | LR__5270
30385     73 65 74 77 
30389     61 76       | 	byte	"setwav"
3038b     00          | 	byte	0
3038c                 | LR__5271
3038c     73 68 75 74 
30390     75 70       | 	byte	"shutup"
30392     00          | 	byte	0
30393                 | LR__5272
30393     73 68 2E    | 	byte	"sh."
30396     00          | 	byte	0
30397                 | LR__5273
30397     73 6F 75 6E 
3039b     64          | 	byte	"sound"
3039c     00          | 	byte	0
3039d                 | LR__5274
3039d     73 6F 2E    | 	byte	"so."
303a0     00          | 	byte	0
303a1                 | LR__5275
303a1     73 70 72 69 
303a5     74 65       | 	byte	"sprite"
303a7     00          | 	byte	0
303a8                 | LR__5276
303a8     73 70 72 2E | 	byte	"spr."
303ac     00          | 	byte	0
303ad                 | LR__5277
303ad     74 68 65 6E | 	byte	"then"
303b1     00          | 	byte	0
303b2                 | LR__5278
303b2     77 61 69 74 
303b6     6D 73       | 	byte	"waitms"
303b8     00          | 	byte	0
303b9                 | LR__5279
303b9     77 61 69 74 
303bd     63 6C 6F 63 
303c1     6B          | 	byte	"waitclock"
303c2     00          | 	byte	0
303c3                 | LR__5280
303c3     77 63 2E    | 	byte	"wc."
303c6     00          | 	byte	0
303c7                 | LR__5281
303c7     77 61 69 74 
303cb     76 62 6C    | 	byte	"waitvbl"
303ce     00          | 	byte	0
303cf                 | LR__5282
303cf     77 76 2E    | 	byte	"wv."
303d2     00          | 	byte	0
303d3                 | LR__5283
303d3     77 78 70 69 
303d7     6E          | 	byte	"wxpin"
303d8     00          | 	byte	0
303d9                 | LR__5284
303d9     77 79 70 69 
303dd     6E          | 	byte	"wypin"
303de     00          | 	byte	0
303df                 | LR__5285
303df     61 62 73    | 	byte	"abs"
303e2     00          | 	byte	0
303e3                 | LR__5286
303e3     61 63 6F 73 | 	byte	"acos"
303e7     00          | 	byte	0
303e8                 | LR__5287
303e8     61 64 72    | 	byte	"adr"
303eb     00          | 	byte	0
303ec                 | LR__5288
303ec     61 64 64 72 | 	byte	"addr"
303f0     00          | 	byte	0
303f1                 | LR__5289
303f1     61 73 63    | 	byte	"asc"
303f4     00          | 	byte	0
303f5                 | LR__5290
303f5     61 73 69 6E | 	byte	"asin"
303f9     00          | 	byte	0
303fa                 | LR__5291
303fa     61 74 6E    | 	byte	"atn"
303fd     00          | 	byte	0
303fe                 | LR__5292
303fe     62 69 6E 24 | 	byte	"bin$"
30402     00          | 	byte	0
30403                 | LR__5293
30403     63 68 72 24 | 	byte	"chr$"
30407     00          | 	byte	0
30408                 | LR__5294
30408     63 6F 73    | 	byte	"cos"
3040b     00          | 	byte	0
3040c                 | LR__5295
3040c     64 70 65 65 
30410     6B          | 	byte	"dpeek"
30411     00          | 	byte	0
30412                 | LR__5296
30412     66 72 65    | 	byte	"fre"
30415     00          | 	byte	0
30416                 | LR__5297
30416     67 65 74 70 
3041a     69 78 65 6C | 	byte	"getpixel"
3041e     00          | 	byte	0
3041f                 | LR__5298
3041f     67 65 2E    | 	byte	"ge."
30422     00          | 	byte	0
30423                 | LR__5299
30423     67 65 74 65 
30427     6E 76 73 75 
3042b     73 74 61 69 
3042f     6E          | 	byte	"getenvsustain"
30430     00          | 	byte	0
30431                 | LR__5300
30431     67 65 74 6E 
30435     6F 74 65 76 
30439     61 6C 75 65 | 	byte	"getnotevalue"
3043d     00          | 	byte	0
3043e                 | LR__5301
3043e     67 65 74 74 
30442     69 6D 65    | 	byte	"gettime"
30445     00          | 	byte	0
30446                 | LR__5302
30446     68 65 78 24 | 	byte	"hex$"
3044a     00          | 	byte	0
3044b                 | LR__5303
3044b     69 6E 6B 65 
3044f     79 24       | 	byte	"inkey$"
30451     00          | 	byte	0
30452                 | LR__5304
30452     69 6E 74    | 	byte	"int"
30455     00          | 	byte	0
30456                 | LR__5305
30456     6C 65 66 74 
3045a     24          | 	byte	"left$"
3045b     00          | 	byte	0
3045c                 | LR__5306
3045c     6C 65 6E    | 	byte	"len"
3045f     00          | 	byte	0
30460                 | LR__5307
30460     6C 6F 67    | 	byte	"log"
30463     00          | 	byte	0
30464                 | LR__5308
30464     6C 70 65 65 
30468     6B          | 	byte	"lpeek"
30469     00          | 	byte	0
3046a                 | LR__5309
3046a     6D 69 64 24 | 	byte	"mid$"
3046e     00          | 	byte	0
3046f                 | LR__5310
3046f     6D 6F 75 73 
30473     65 6B       | 	byte	"mousek"
30475     00          | 	byte	0
30476                 | LR__5311
30476     6D 6F 75 73 
3047a     65 77       | 	byte	"mousew"
3047c     00          | 	byte	0
3047d                 | LR__5312
3047d     6D 6F 75 73 
30481     65 78       | 	byte	"mousex"
30483     00          | 	byte	0
30484                 | LR__5313
30484     6D 6F 75 73 
30488     65 79       | 	byte	"mousey"
3048a     00          | 	byte	0
3048b                 | LR__5314
3048b     70 65 65 6B | 	byte	"peek"
3048f     00          | 	byte	0
30490                 | LR__5315
30490     70 69 6E 72 
30494     65 61 64    | 	byte	"pinread"
30497     00          | 	byte	0
30498                 | LR__5316
30498     72 64 70 69 
3049c     6E          | 	byte	"rdpin"
3049d     00          | 	byte	0
3049e                 | LR__5317
3049e     72 69 67 68 
304a2     74 24       | 	byte	"right$"
304a4     00          | 	byte	0
304a5                 | LR__5318
304a5     72 71 70 69 
304a9     6E          | 	byte	"rqpin"
304aa     00          | 	byte	0
304ab                 | LR__5319
304ab     72 6F 75 6E 
304af     64          | 	byte	"round"
304b0     00          | 	byte	0
304b1                 | LR__5320
304b1     72 6E 64    | 	byte	"rnd"
304b4     00          | 	byte	0
304b5                 | LR__5321
304b5     73 69 6E    | 	byte	"sin"
304b8     00          | 	byte	0
304b9                 | LR__5322
304b9     73 71 72    | 	byte	"sqr"
304bc     00          | 	byte	0
304bd                 | LR__5323
304bd     73 74 69 63 
304c1     6B          | 	byte	"stick"
304c2     00          | 	byte	0
304c3                 | LR__5324
304c3     73 74 72 69 
304c7     67          | 	byte	"strig"
304c8     00          | 	byte	0
304c9                 | LR__5325
304c9     73 74 72 24 | 	byte	"str$"
304cd     00          | 	byte	0
304ce                 | LR__5326
304ce     74 61 6E    | 	byte	"tan"
304d1     00          | 	byte	0
304d2                 | LR__5327
304d2     76 61 6C    | 	byte	"val"
304d5     00          | 	byte	0
304d6                 | LR__5328
304d6     76 61 72 70 
304da     74 72       | 	byte	"varptr"
304dc     00          | 	byte	0
304dd                 | LR__5329
304dd     61          | 	byte	"a"
304de     00          | 	byte	0
304df                 | LR__5330
304df     7A          | 	byte	"z"
304e0     00          | 	byte	0
304e1                 | LR__5331
304e1     5F          | 	byte	"_"
304e2     00          | 	byte	0
304e3                 | LR__5332
304e3     61          | 	byte	"a"
304e4     00          | 	byte	0
304e5                 | LR__5333
304e5     7A          | 	byte	"z"
304e6     00          | 	byte	0
304e7                 | LR__5334
304e7     30          | 	byte	"0"
304e8     00          | 	byte	0
304e9                 | LR__5335
304e9     39          | 	byte	"9"
304ea     00          | 	byte	0
304eb                 | LR__5336
304eb     5F          | 	byte	"_"
304ec     00          | 	byte	0
304ed                 | LR__5337
304ed     2E          | 	byte	"."
304ee     00          | 	byte	0
304ef                 | LR__5338
304ef     61          | 	byte	"a"
304f0     00          | 	byte	0
304f1                 | LR__5339
304f1     7A          | 	byte	"z"
304f2     00          | 	byte	0
304f3                 | LR__5340
304f3     30          | 	byte	"0"
304f4     00          | 	byte	0
304f5                 | LR__5341
304f5     39          | 	byte	"9"
304f6     00          | 	byte	0
304f7                 | LR__5342
304f7     5F          | 	byte	"_"
304f8     00          | 	byte	0
304f9                 | LR__5343
304f9     24          | 	byte	"$"
304fa     00          | 	byte	0
304fb                 | LR__5344
304fb     25          | 	byte	"%"
304fc     00          | 	byte	0
304fd                 | LR__5345
304fd     21          | 	byte	"!"
304fe     00          | 	byte	0
304ff                 | LR__5346
304ff     30          | 	byte	"0"
30500     00          | 	byte	0
30501                 | LR__5347
30501     39          | 	byte	"9"
30502     00          | 	byte	0
30503                 | LR__5348
30503     2E          | 	byte	"."
30504     00          | 	byte	0
30505                 | LR__5349
30505     24          | 	byte	"$"
30506     00          | 	byte	0
30507                 | LR__5350
30507     25          | 	byte	"%"
30508     00          | 	byte	0
30509                 | LR__5351
30509     2D          | 	byte	"-"
3050a     00          | 	byte	0
3050b                 | LR__5352
3050b     2E          | 	byte	"."
3050c     00          | 	byte	0
3050d                 | LR__5353
3050d     24          | 	byte	"$"
3050e     00          | 	byte	0
3050f                 | LR__5354
3050f     30          | 	byte	"0"
30510     00          | 	byte	0
30511                 | LR__5355
30511     39          | 	byte	"9"
30512     00          | 	byte	0
30513                 | LR__5356
30513     5F          | 	byte	"_"
30514     00          | 	byte	0
30515                 | LR__5357
30515     2E          | 	byte	"."
30516     00          | 	byte	0
30517                 | LR__5358
30517     45          | 	byte	"E"
30518     00          | 	byte	0
30519                 | LR__5359
30519     65          | 	byte	"e"
3051a     00          | 	byte	0
3051b                 | LR__5360
3051b     2D          | 	byte	"-"
3051c     00          | 	byte	0
3051d                 | LR__5361
3051d     61          | 	byte	"a"
3051e     00          | 	byte	0
3051f                 | LR__5362
3051f     66          | 	byte	"f"
30520     00          | 	byte	0
30521                 | LR__5363
30521     2D          | 	byte	"-"
30522     00          | 	byte	0
30523                 | LR__5364
30523     65          | 	byte	"e"
30524     00          | 	byte	0
30525                 | LR__5365
30525     2E          | 	byte	"."
30526     00          | 	byte	0
30527                 | LR__5366
30527     45          | 	byte	"E"
30528     00          | 	byte	0
30529                 | LR__5367
30529     65          | 	byte	"e"
3052a     00          | 	byte	0
3052b                 | LR__5368
3052b     30          | 	byte	"0"
3052c     00          | 	byte	0
3052d                 | LR__5369
3052d     39          | 	byte	"9"
3052e     00          | 	byte	0
3052f                 | LR__5370
3052f     24          | 	byte	"$"
30530     00          | 	byte	0
30531                 | LR__5371
30531     25          | 	byte	"%"
30532     00          | 	byte	0
30533                 | LR__5372
30533     2D          | 	byte	"-"
30534     00          | 	byte	0
30535                 | LR__5373
30535     24          | 	byte	"$"
30536     00          | 	byte	0
30537                 | LR__5374
30537     30          | 	byte	"0"
30538     00          | 	byte	0
30539                 | LR__5375
30539     39          | 	byte	"9"
3053a     00          | 	byte	0
3053b                 | LR__5376
3053b     5F          | 	byte	"_"
3053c     00          | 	byte	0
3053d                 | LR__5377
3053d     30          | 	byte	"0"
3053e     00          | 	byte	0
3053f                 | LR__5378
3053f     39          | 	byte	"9"
30540     00          | 	byte	0
30541                 | LR__5379
30541     61          | 	byte	"a"
30542     00          | 	byte	0
30543                 | LR__5380
30543     66          | 	byte	"f"
30544     00          | 	byte	0
30545                 | LR__5381
30545     5F          | 	byte	"_"
30546     00          | 	byte	0
30547                 | LR__5382
30547     30          | 	byte	"0"
30548     00          | 	byte	0
30549                 | LR__5383
30549     39          | 	byte	"9"
3054a     00          | 	byte	0
3054b                 | LR__5384
3054b     5F          | 	byte	"_"
3054c     00          | 	byte	0
3054d                 | LR__5385
3054d     22          | 	byte	34
3054e     00          | 	byte	0
3054f                 | LR__5386
3054f     22          | 	byte	34
30550     00          | 	byte	0
30551                 | LR__5387
30551     44 69 6D 3A 
30555     20 61 74 20 
30559     6C 69 6E 65 
3055d     20          | 	byte	"Dim: at line "
3055e     00          | 	byte	0
3055f                 | LR__5388
3055f     3A 20 77 61 
30563     72 6E 69 6E 
30567     67 3A 20 74 
3056b     68 65 20 76 
3056f     61 72 69 61 
30573     62 6C 65 20 
30577     65 78 69 73 
3057b     74 65 64 2E | 	byte	": warning: the variable existed."
3057f     00          | 	byte	0
30580                 | LR__5389
30580     28          | 	byte	"("
30581     00          | 	byte	0
30582                 | LR__5390
30582     61 73       | 	byte	"as"
30584     00          | 	byte	0
30585                 | LR__5391
30585     61 73       | 	byte	"as"
30587     00          | 	byte	0
30588                 | LR__5392
30588     2C          | 	byte	","
30589     00          | 	byte	0
3058a                 | LR__5393
3058a     29          | 	byte	")"
3058b     00          | 	byte	0
3058c                 | LR__5394
3058c     29          | 	byte	")"
3058d     00          | 	byte	0
3058e                 | LR__5395
3058e     61 73       | 	byte	"as"
30590     00          | 	byte	0
30591                 | LR__5396
30591     62 79 74 65 | 	byte	"byte"
30595     00          | 	byte	0
30596                 | LR__5397
30596     75 62 79 74 
3059a     65          | 	byte	"ubyte"
3059b     00          | 	byte	0
3059c                 | LR__5398
3059c     73 68 6F 72 
305a0     74          | 	byte	"short"
305a1     00          | 	byte	0
305a2                 | LR__5399
305a2     75 73 68 6F 
305a6     72 74       | 	byte	"ushort"
305a8     00          | 	byte	0
305a9                 | LR__5400
305a9     6C 6F 6E 67 | 	byte	"long"
305ad     00          | 	byte	0
305ae                 | LR__5401
305ae     69 6E 74 65 
305b2     67 65 72    | 	byte	"integer"
305b5     00          | 	byte	0
305b6                 | LR__5402
305b6     75 6C 6F 6E 
305ba     67          | 	byte	"ulong"
305bb     00          | 	byte	0
305bc                 | LR__5403
305bc     69 6E 74 36 
305c0     34          | 	byte	"int64"
305c1     00          | 	byte	0
305c2                 | LR__5404
305c2     75 69 6E 74 
305c6     36 34       | 	byte	"uint64"
305c8     00          | 	byte	0
305c9                 | LR__5405
305c9     73 69 6E 67 
305cd     6C 65       | 	byte	"single"
305cf     00          | 	byte	0
305d0                 | LR__5406
305d0     64 6F 75 62 
305d4     6C 65       | 	byte	"double"
305d6     00          | 	byte	0
305d7                 | LR__5407
305d7     73 74 72 69 
305db     6E 67       | 	byte	"string"
305dd     00          | 	byte	0
305de                 | LR__5408
305de     74 6F       | 	byte	"to"
305e0     00          | 	byte	0
305e1                 | LR__5409
305e1     73 74 65 70 | 	byte	"step"
305e5     00          | 	byte	0
305e6                 | LR__5410
305e6     73 2E       | 	byte	"s."
305e8     00          | 	byte	0
305e9                 | LR__5411
305e9     24          | 	byte	"$"
305ea     00          | 	byte	0
305eb                 | LR__5412
305eb     26 68       | 	byte	"&h"
305ed     00          | 	byte	0
305ee                 | LR__5413
305ee     25          | 	byte	"%"
305ef     00          | 	byte	0
305f0                 | LR__5414
305f0     26 62       | 	byte	"&b"
305f2     00          | 	byte	0
305f3                 | LR__5415
305f3                 | 	byte	
305f3     00          | 	byte	0
305f4                 | LR__5416
305f4     2F          | 	byte	"/"
305f5     00          | 	byte	0
305f6                 | LR__5417
305f6                 | 	byte	
305f6     00          | 	byte	0
305f7                 | LR__5418
305f7     53 61 76 65 
305fb     64 20 61 73 
305ff     20          | 	byte	"Saved as "
30600     00          | 	byte	0
30601                 | LR__5419
30601     2F          | 	byte	"/"
30602     00          | 	byte	0
30603                 | LR__5420
30603                 | 	byte	
30603     00          | 	byte	0
30604                 | LR__5421
30604     2F          | 	byte	"/"
30605     00          | 	byte	0
30606                 | LR__5422
30606     2F          | 	byte	"/"
30607     00          | 	byte	0
30608                 | LR__5423
30608     2E 62 61 73 | 	byte	".bas"
3060c     00          | 	byte	0
3060d                 | LR__5424
3060d     53 79 73 74 
30611     65 6D 20 65 
30615     72 72 6F 72 
30619     20          | 	byte	"System error "
3061a     00          | 	byte	0
3061b                 | LR__5425
3061b     3A 20       | 	byte	": "
3061d     00          | 	byte	0
3061e                 | LR__5426
3061e     2E 62 61 73 | 	byte	".bas"
30622     00          | 	byte	0
30623                 | LR__5427
30623     2F          | 	byte	"/"
30624     00          | 	byte	0
30625                 | LR__5428
30625                 | 	byte	
30625     00          | 	byte	0
30626                 | LR__5429
30626     4C 6F 61 64 
3062a     65 64 20    | 	byte	"Loaded "
3062d     00          | 	byte	0
3062e                 | LR__5430
3062e     2F          | 	byte	"/"
3062f     00          | 	byte	0
30630                 | LR__5431
30630     53 74 6F 70 
30634     70 65 64 20 
30638     61 74 20 6C 
3063c     69 6E 65 20 | 	byte	"Stopped at line "
30640     00          | 	byte	0
30641                 | LR__5432
30641                 | 	byte	
30641     00          | 	byte	0
30642                 | LR__5433
30642                 | 	byte	
30642     00          | 	byte	0
30643                 | LR__5434
30643     2F 73 64 2F 
30647     6D 65 64 69 
3064b     61 2F 68 2F | 	byte	"/sd/media/h/"
3064f     00          | 	byte	0
30650                 | LR__5435
30650     53 79 73 74 
30654     65 6D 20 65 
30658     72 72 6F 72 
3065c     20          | 	byte	"System error "
3065d     00          | 	byte	0
3065e                 | LR__5436
3065e     3A 20       | 	byte	": "
30660     00          | 	byte	0
30661                 | LR__5437
30661                 | 	byte	
30661     00          | 	byte	0
30662                 | LR__5438
30662                 | 	byte	
30662     00          | 	byte	0
30663                 | LR__5439
30663     2F 73 64 2F 
30667     6D 65 64 69 
3066b     61 2F 73 2F | 	byte	"/sd/media/s/"
3066f     00          | 	byte	0
30670                 | LR__5440
30670     53 79 73 74 
30674     65 6D 20 65 
30678     72 72 6F 72 
3067c     20          | 	byte	"System error "
3067d     00          | 	byte	0
3067e                 | LR__5441
3067e     3A 20       | 	byte	": "
30680     00          | 	byte	0
30681                 | LR__5442
30681                 | 	byte	
30681     00          | 	byte	0
30682                 | LR__5443
30682     6E 6F 6E 61 
30686     6D 65 2E 62 
3068a     61 73       | 	byte	"noname.bas"
3068c     00          | 	byte	0
3068d                 | LR__5444
3068d     66 69 6C 65 
30691     6E 61 6D 65 
30695     20 65 78 70 
30699     65 63 74 65 
3069d     64          | 	byte	"filename expected"
3069e     00          | 	byte	0
3069f                 | LR__5445
3069f     72 65 61 64 | 	byte	"read"
306a3     00          | 	byte	0
306a4                 | LR__5446
306a4     77 72 69 74 
306a8     65          | 	byte	"write"
306a9     00          | 	byte	0
306aa                 | LR__5447
306aa     61 70 70 65 
306ae     6E 64       | 	byte	"append"
306b0     00          | 	byte	0
306b1                 | LR__5448
306b1     63 68 61 6E 
306b5     6E 65 6C 23 
306b9     20 65 78 70 
306bd     65 63 74 65 
306c1     64          | 	byte	"channel# expected"
306c2     00          | 	byte	0
306c3                 | LR__5449
306c3     4F 70 65 6E 
306c7     3A 20 69 6E 
306cb     76 61 6C 69 
306cf     64 20 6D 6F 
306d3     64 65       | 	byte	"Open: invalid mode"
306d5     00          | 	byte	0
306d6                 | LR__5450
306d6     63 68 61 6E 
306da     6E 65 6C 23 
306de     20 65 78 70 
306e2     65 63 74 65 
306e6     64          | 	byte	"channel# expected"
306e7     00          | 	byte	0
306e8                 | LR__5451
306e8     45 72 72 6F 
306ec     72 20       | 	byte	"Error "
306ee     00          | 	byte	0
306ef                 | LR__5452
306ef     3A 20       | 	byte	": "
306f1     00          | 	byte	0
306f2                 | LR__5453
306f2                 | 	byte	
306f2     00          | 	byte	0
306f3                 | LR__5454
306f3                 | 	byte	
306f3     00          | 	byte	0
306f4                 | LR__5455
306f4     72 6E 64 3A 
306f8     20          | 	byte	"rnd: "
306f9     00          | 	byte	0
306fa                 | LR__5456
306fa     72 6E 64 3A 
306fe     20          | 	byte	"rnd: "
306ff     00          | 	byte	0
30700                 | LR__5457
30700     67 65 74 65 
30704     6E 76 73 75 
30708     73 74 61 69 
3070c     6E 3A 20    | 	byte	"getenvsustain: "
3070f     00          | 	byte	0
30710                 | LR__5458
30710     73 69 6E 3A 
30714     20          | 	byte	"sin: "
30715     00          | 	byte	0
30716                 | LR__5459
30716     6D 69 64 24 
3071a     3A 20       | 	byte	"mid$: "
3071c     00          | 	byte	0
3071d                 | LR__5460
3071d     6D 69 64 24 
30721     3A 20       | 	byte	"mid$: "
30723     00          | 	byte	0
30724                 | LR__5461
30724     72 69 67 68 
30728     74 24 3A 20 | 	byte	"right$: "
3072c     00          | 	byte	0
3072d                 | LR__5462
3072d     72 69 67 68 
30731     74 24 3A 20 | 	byte	"right$: "
30735     00          | 	byte	0
30736                 | LR__5463
30736     6C 65 66 74 
3073a     24 3A 20    | 	byte	"left$: "
3073d     00          | 	byte	0
3073e                 | LR__5464
3073e     6C 65 66 74 
30742     24 3A 20    | 	byte	"left$: "
30745     00          | 	byte	0
30746                 | LR__5465
30746     61 73 63 3A 
3074a     20          | 	byte	"asc: "
3074b     00          | 	byte	0
3074c                 | LR__5466
3074c     61 73 63 3A 
30750     20          | 	byte	"asc: "
30751     00          | 	byte	0
30752                 | LR__5467
30752     6C 65 6E 3A 
30756     20          | 	byte	"len: "
30757     00          | 	byte	0
30758                 | LR__5468
30758     6C 65 6E 3A 
3075c     20          | 	byte	"len: "
3075d     00          | 	byte	0
3075e                 | LR__5469
3075e     63 68 72 24 
30762     3A 20       | 	byte	"chr$: "
30764     00          | 	byte	0
30765                 | LR__5470
30765     76 61 6C 3A 
30769     20          | 	byte	"val: "
3076a     00          | 	byte	0
3076b                 | LR__5471
3076b     76 61 6C 3A 
3076f     20          | 	byte	"val: "
30770     00          | 	byte	0
30771                 | LR__5472
30771     24          | 	byte	"$"
30772     00          | 	byte	0
30773                 | LR__5473
30773     26 68       | 	byte	"&h"
30775     00          | 	byte	0
30776                 | LR__5474
30776     25          | 	byte	"%"
30777     00          | 	byte	0
30778                 | LR__5475
30778     26 62       | 	byte	"&b"
3077a     00          | 	byte	0
3077b                 | LR__5476
3077b     68 65 78 24 
3077f     3A 20       | 	byte	"hex$: "
30781     00          | 	byte	0
30782                 | LR__5477
30782     62 69 6E 24 
30786     3A 20       | 	byte	"bin$: "
30788     00          | 	byte	0
30789                 | LR__5478
30789     63 6F 73 3A 
3078d     20          | 	byte	"cos: "
3078e     00          | 	byte	0
3078f                 | LR__5479
3078f     74 61 6E 3A 
30793     20          | 	byte	"tan: "
30794     00          | 	byte	0
30795                 | LR__5480
30795     61 73 69 6E 
30799     3A 20       | 	byte	"asin: "
3079b     00          | 	byte	0
3079c                 | LR__5481
3079c     61 63 6F 73 
307a0     3A 20       | 	byte	"acos: "
307a2     00          | 	byte	0
307a3                 | LR__5482
307a3     61 74 6E 3A 
307a7     20          | 	byte	"atn: "
307a8     00          | 	byte	0
307a9                 | LR__5483
307a9     73 71 72 3A 
307ad     20          | 	byte	"sqr: "
307ae     00          | 	byte	0
307af                 | LR__5484
307af     73 74 69 63 
307b3     6B 3A 20    | 	byte	"stick: "
307b6     00          | 	byte	0
307b7                 | LR__5485
307b7     73 74 72 69 
307bb     67 3A 20    | 	byte	"strig: "
307be     00          | 	byte	0
307bf                 | LR__5486
307bf     67 65 74 70 
307c3     69 78 65 6C 
307c7     3A 20       | 	byte	"getpixel: "
307c9     00          | 	byte	0
307ca                 | LR__5487
307ca     6C 6F 67 3A 
307ce     20          | 	byte	"log: "
307cf     00          | 	byte	0
307d0                 | LR__5488
307d0     50 72 69 6E 
307d4     74 20 74 6F 
307d8     20 63 68 61 
307dc     6E 6E 65 6C 
307e0     20          | 	byte	"Print to channel "
307e1     00          | 	byte	0
307e2                 | LR__5489
307e2     20 42 41 53 
307e6     49 43 20 62 
307ea     79 74 65 73 
307ee     20 66 72 65 
307f2     65          | 	byte	" BASIC bytes free"
307f3     00          | 	byte	0
307f4                 | LR__5490
307f4                 | 	byte	
307f4     00          | 	byte	0
307f5                 | LR__5491
307f5     2F 73 64 2F 
307f9     62 61 73    | 	byte	"/sd/bas"
307fc     00          | 	byte	0
307fd                 | LR__5492
307fd     57 6F 72 6B 
30801     69 6E 67 20 
30805     64 69 72 65 
30809     63 74 6F 72 
3080d     79 3A 20    | 	byte	"Working directory: "
30810     00          | 	byte	0
30811                 | LR__5493
30811                 | 	byte	
30811     00          | 	byte	0
30812                 | LR__5494
30812     2A          | 	byte	"*"
30813     00          | 	byte	0
30814                 | LR__5495
30814                 | 	byte	
30814     00          | 	byte	0
30815                 | LR__5496
30815     5B 64 69 72 
30819     5D 20       | 	byte	"[dir] "
3081b     00          | 	byte	0
3081c                 | LR__5497
3081c     4D 6F 72 65 
30820     20 74 68 61 
30824     6E 20 31 32 
30828     38 20 65 6E 
3082c     74 72 69 65 
30830     73 20 66 6F 
30834     75 6E 64 3A 
30838     20 63 6C 65 
3083c     61 6E 20 79 
30840     6F 75 72 20 
30844     64 69 72 65 
30848     63 74 6F 72 
3084c     79          | 	byte	"More than 128 entries found: clean your directory"
3084d     00          | 	byte	0
3084e                 | LR__5498
3084e     2A          | 	byte	"*"
3084f     00          | 	byte	0
30850                 | LR__5499
30850                 | 	byte	
30850     00          | 	byte	0
30851                 | LR__5500
30851     4D 6F 72 65 
30855     20 74 68 61 
30859     6E 20 31 32 
3085d     38 20 65 6E 
30861     74 72 69 65 
30865     73 20 66 6F 
30869     75 6E 64 3A 
3086d     20 63 6C 65 
30871     61 6E 20 79 
30875     6F 75 72 20 
30879     64 69 72 65 
3087d     63 74 6F 72 
30881     79          | 	byte	"More than 128 entries found: clean your directory"
30882     00          | 	byte	0
30883                 | LR__5501
30883     2F          | 	byte	"/"
30884     00          | 	byte	0
30885                 | LR__5502
30885     2F 73 64 2F 
30889     62 69 6E 2F | 	byte	"/sd/bin/"
3088d     00          | 	byte	0
3088e                 | LR__5503
3088e     53 79 73 74 
30892     65 6D 20 65 
30896     72 72 6F 72 
3089a     20          | 	byte	"System error "
3089b     00          | 	byte	0
3089c                 | LR__5504
3089c     3A 20       | 	byte	": "
3089e     00          | 	byte	0
3089f                 | LR__5505
3089f                 | 	byte	
3089f     00          | 	byte	0
308a0                 | LR__5506
308a0     45 78 70 65 
308a4     63 74 65 64 
308a8     20 6E 75 6D 
308ac     62 65 72 2C 
308b0     20 67 6F 74 
308b4     20 73 6F 6D 
308b8     65 74 68 69 
308bc     6E 67 20 65 
308c0     6C 73 65 2E | 	byte	"Expected number, got something else."
308c4     00          | 	byte	0
308c5                 | LR__5507
308c5     43 61 6E 6E 
308c9     6F 74 20 61 
308cd     64 64 20 61 
308d1     20 6E 75 6D 
308d5     62 65 72 20 
308d9     74 6F 20 61 
308dd     20 73 74 72 
308e1     69 6E 67 2E | 	byte	"Cannot add a number to a string."
308e5     00          | 	byte	0
308e6                 | LR__5508
308e6     43 61 6E 6E 
308ea     6F 74 20 73 
308ee     75 62 73 74 
308f2     72 61 63 74 
308f6     20 73 74 72 
308fa     69 6E 67 73 
308fe     2E          | 	byte	"Cannot substract strings."
308ff     00          | 	byte	0
30900                 | LR__5509
30900     55 6E 6B 6E 
30904     6F 77 6E 20 
30908     65 72 72 6F 
3090c     72 20 77 68 
30910     69 6C 65 20 
30914     61 64 64 69 
30918     6E 67 2E    | 	byte	"Unknown error while adding."
3091b     00          | 	byte	0
3091c                 | LR__5510
3091c     55 6E 6B 6E 
30920     6F 77 6E 20 
30924     65 72 72 6F 
30928     72 20 77 68 
3092c     69 6C 65 20 
30930     73 75 62 73 
30934     74 72 61 63 
30938     74 69 6E 67 
3093c     2E          | 	byte	"Unknown error while substracting."
3093d     00          | 	byte	0
3093e                 | LR__5511
3093e     43 61 6E 6E 
30942     6F 74 20 64 
30946     6F 20 6C 6F 
3094a     67 69 63 20 
3094e     6F 70 65 72 
30952     61 74 69 6F 
30956     6E 20 6F 6E 
3095a     20 73 74 72 
3095e     69 6E 67 20 
30962     6F 72 20 66 
30966     6C 6F 61 74 
3096a     2E          | 	byte	"Cannot do logic operation on string or float."
3096b     00          | 	byte	0
3096c                 | LR__5512
3096c     55 6E 6B 6E 
30970     6F 77 6E 20 
30974     65 72 72 6F 
30978     72 20 77 68 
3097c     69 6C 65 20 
30980     64 6F 69 6E 
30984     67 20 6C 6F 
30988     67 69 63 20 
3098c     6F 70 65 72 
30990     61 74 69 6F 
30994     6E 2E       | 	byte	"Unknown error while doing logic operation."
30996     00          | 	byte	0
30997                 | LR__5513
30997     43 61 6E 6E 
3099b     6F 74 20 6D 
3099f     75 6C 74 69 
309a3     70 6C 79 20 
309a7     73 74 72 69 
309ab     6E 67 73 2E | 	byte	"Cannot multiply strings."
309af     00          | 	byte	0
309b0                 | LR__5514
309b0     55 6E 6B 6E 
309b4     6F 77 6E 20 
309b8     65 72 72 6F 
309bc     72 20 77 68 
309c0     69 6C 65 20 
309c4     6D 75 6C 74 
309c8     69 70 6C 79 
309cc     69 6E 67 2E | 	byte	"Unknown error while multiplying."
309d0     00          | 	byte	0
309d1                 | LR__5515
309d1     43 61 6E 6E 
309d5     6F 74 20 64 
309d9     69 76 69 64 
309dd     65 20 73 74 
309e1     72 69 6E 67 
309e5     73 2E       | 	byte	"Cannot divide strings."
309e7     00          | 	byte	0
309e8                 | LR__5516
309e8     55 6E 6B 6E 
309ec     6F 77 6E 20 
309f0     65 72 72 6F 
309f4     72 20 77 68 
309f8     69 6C 65 20 
309fc     64 69 76 69 
30a00     64 69 6E 67 
30a04     2E          | 	byte	"Unknown error while dividing."
30a05     00          | 	byte	0
30a06                 | LR__5517
30a06     43 61 6E 6E 
30a0a     6F 74 20 63 
30a0e     6F 6D 70 75 
30a12     74 65 20 61 
30a16     20 70 6F 77 
30a1a     65 72 20 6F 
30a1e     66 20 61 20 
30a22     73 74 72 69 
30a26     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30a29     00          | 	byte	0
30a2a                 | LR__5518
30a2a     55 6E 6B 6E 
30a2e     6F 77 6E 20 
30a32     65 72 72 6F 
30a36     72 20 77 68 
30a3a     69 6C 65 20 
30a3e     63 6F 6D 70 
30a42     75 74 69 6E 
30a46     67 20 61 20 
30a4a     70 6F 77 65 
30a4e     72 2E       | 	byte	"Unknown error while computing a power."
30a50     00          | 	byte	0
30a51                 | LR__5519
30a51     52 69 67 68 
30a55     74 20 70 61 
30a59     72 65 6E 74 
30a5d     68 65 73 69 
30a61     73 20 65 78 
30a65     70 65 63 74 
30a69     65 64 2E    | 	byte	"Right parenthesis expected."
30a6c     00          | 	byte	0
30a6d                 | LR__5520
30a6d     45 78 70 65 
30a71     63 74 65 64 
30a75     20 73 74 72 
30a79     69 6E 67 2E | 	byte	"Expected string."
30a7d     00          | 	byte	0
30a7e                 | LR__5521
30a7e     45 78 70 65 
30a82     63 74 65 64 
30a86     20 66 6C 6F 
30a8a     61 74 2E    | 	byte	"Expected float."
30a8d     00          | 	byte	0
30a8e                 | LR__5522
30a8e     45 78 70 65 
30a92     63 74 65 64 
30a96     20 75 6E 73 
30a9a     69 67 6E 65 
30a9e     64 20 69 6E 
30aa2     74 65 67 65 
30aa6     72 2E       | 	byte	"Expected unsigned integer."
30aa8     00          | 	byte	0
30aa9                 | LR__5523
30aa9     45 78 70 65 
30aad     63 74 65 64 
30ab1     20 69 6E 74 
30ab5     65 67 65 72 
30ab9     2E          | 	byte	"Expected integer."
30aba     00          | 	byte	0
30abb                 | LR__5524
30abb     4E 6F 20 6D 
30abf     6F 72 65 20 
30ac3     76 61 72 69 
30ac7     61 62 6C 65 
30acb     20 73 6C 6F 
30acf     74 73 2E    | 	byte	"No more variable slots."
30ad2     00          | 	byte	0
30ad3                 | LR__5525
30ad3     56 61 72 69 
30ad7     61 62 6C 65 
30adb     20 6E 6F 74 
30adf     20 66 6F 75 
30ae3     6E 64 2E    | 	byte	"Variable not found."
30ae6     00          | 	byte	0
30ae7                 | LR__5526
30ae7     43 6F 6D 6D 
30aeb     61 20 65 78 
30aef     70 65 63 74 
30af3     65 64 2E    | 	byte	"Comma expected."
30af6     00          | 	byte	0
30af7                 | LR__5527
30af7     43 6F 6D 6D 
30afb     61 20 6F 72 
30aff     20 73 65 6D 
30b03     69 63 6F 6C 
30b07     6F 6E 20 65 
30b0b     78 70 65 63 
30b0f     74 65 64 2E | 	byte	"Comma or semicolon expected."
30b13     00          | 	byte	0
30b14                 | LR__5528
30b14     55 6E 6B 6E 
30b18     6F 77 6E 20 
30b1c     63 6F 6D 6D 
30b20     61 6E 64 2E | 	byte	"Unknown command."
30b24     00          | 	byte	0
30b25                 | LR__5529
30b25     53 74 61 63 
30b29     6B 20 75 6E 
30b2d     64 65 72 66 
30b31     6C 6F 77 2E | 	byte	"Stack underflow."
30b35     00          | 	byte	0
30b36                 | LR__5530
30b36     43 61 6E 6E 
30b3a     6F 74 20 65 
30b3e     78 65 63 75 
30b42     74 65 20 67 
30b46     6F 74 6F 20 
30b4a     69 6E 20 74 
30b4e     68 65 20 69 
30b52     6D 6D 65 64 
30b56     69 61 74 65 
30b5a     20 6D 6F 64 
30b5e     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
30b60     00          | 	byte	0
30b61                 | LR__5531
30b61     43 61 6E 6E 
30b65     6F 74 20 6C 
30b69     6F 61 64 20 
30b6d     66 72 6F 6D 
30b71     20 74 68 69 
30b75     73 20 66 69 
30b79     6C 65 2E    | 	byte	"Cannot load from this file."
30b7c     00          | 	byte	0
30b7d                 | LR__5532
30b7d     54 68 65 20 
30b81     70 72 6F 67 
30b85     72 61 6D 20 
30b89     69 73 20 65 
30b8d     6D 70 74 79 
30b91     2E          | 	byte	"The program is empty."
30b92     00          | 	byte	0
30b93                 | LR__5533
30b93     49 66 20 61 
30b97     66 74 65 72 
30b9b     20 69 66 2E | 	byte	"If after if."
30b9f     00          | 	byte	0
30ba0                 | LR__5534
30ba0     45 6D 70 74 
30ba4     79 20 65 78 
30ba8     70 72 65 73 
30bac     73 69 6F 6E 
30bb0     2E          | 	byte	"Empty expression."
30bb1     00          | 	byte	0
30bb2                 | LR__5535
30bb2     53 74 72 69 
30bb6     6E 67 20 65 
30bba     78 70 65 63 
30bbe     74 65 64 2E | 	byte	"String expected."
30bc2     00          | 	byte	0
30bc3                 | LR__5536
30bc3     49 6E 74 65 
30bc7     72 70 72 65 
30bcb     74 65 72 20 
30bcf     69 6E 74 65 
30bd3     72 6E 61 6C 
30bd7     20 65 72 72 
30bdb     6F 72 2E    | 	byte	"Interpreter internal error."
30bde     00          | 	byte	0
30bdf                 | LR__5537
30bdf     45 78 70 65 
30be3     63 74 65 64 
30be7     20 61 73 73 
30beb     69 67 6E 2E | 	byte	"Expected assign."
30bef     00          | 	byte	0
30bf0                 | LR__5538
30bf0     45 78 70 65 
30bf4     63 74 65 64 
30bf8     20 27 74 6F 
30bfc     27 2E       | 	byte	"Expected 'to'."
30bfe     00          | 	byte	0
30bff                 | LR__5539
30bff     45 78 70 65 
30c03     63 74 65 64 
30c07     20 69 6E 74 
30c0b     65 67 65 72 
30c0f     20 76 61 72 
30c13     69 61 62 6C 
30c17     65 2E       | 	byte	"Expected integer variable."
30c19     00          | 	byte	0
30c1a                 | LR__5540
30c1a     55 6E 69 6E 
30c1e     69 74 69 61 
30c22     6C 69 7A 65 
30c26     64 20 76 61 
30c2a     72 69 61 62 
30c2e     6C 65 20 69 
30c32     6E 20 27 6E 
30c36     65 78 74 27 
30c3a     2C 20 75 73 
30c3e     65 20 27 66 
30c42     6F 72 27 20 
30c46     62 65 66 6F 
30c4a     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30c4d     00          | 	byte	0
30c4e                 | LR__5541
30c4e     4E 6F 20 6D 
30c52     6F 72 65 20 
30c56     73 6C 6F 74 
30c5a     73 20 66 6F 
30c5e     72 20 27 66 
30c62     6F 72 27 2E | 	byte	"No more slots for 'for'."
30c66     00          | 	byte	0
30c67                 | LR__5542
30c67     27 4E 65 78 
30c6b     74 27 20 64 
30c6f     6F 65 73 6E 
30c73     27 74 20 6D 
30c77     61 74 63 68 
30c7b     20 27 66 6F 
30c7f     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30c82     00          | 	byte	0
30c83                 | LR__5543
30c83     27 47 6F 74 
30c87     6F 27 20 74 
30c8b     61 72 67 65 
30c8f     74 20 6C 69 
30c93     6E 65 20 6E 
30c97     6F 74 20 66 
30c9b     6F 75 6E 64 
30c9f     2E          | 	byte	"'Goto' target line not found."
30ca0     00          | 	byte	0
30ca1                 | LR__5544
30ca1     42 61 64 20 
30ca5     6E 75 6D 62 
30ca9     65 72 20 6F 
30cad     66 20 70 61 
30cb1     72 61 6D 65 
30cb5     74 65 72 73 | 	byte	"Bad number of parameters"
30cb9     00          | 	byte	0
30cba                 | LR__5545
30cba     46 75 6E 63 
30cbe     74 69 6F 6E 
30cc2     20 75 6E 64 
30cc6     65 66 69 6E 
30cca     65 64 20 66 
30cce     6F 72 20 73 
30cd2     74 72 69 6E 
30cd6     67 73       | 	byte	"Function undefined for strings"
30cd8     00          | 	byte	0
30cd9                 | LR__5546
30cd9     42 61 64 20 
30cdd     70 61 72 61 
30ce1     6D 65 74 65 
30ce5     72 2E       | 	byte	"Bad parameter."
30ce7     00          | 	byte	0
30ce8                 | LR__5547
30ce8     43 61 6E 6E 
30cec     6F 74 20 64 
30cf0     65 63 6C 61 
30cf4     72 65 20 61 
30cf8     6E 20 61 72 
30cfc     72 61 79 3A 
30d00     20 74 68 65 
30d04     20 76 61 72 
30d08     69 61 62 6C 
30d0c     65 20 65 78 
30d10     69 73 74 73 
30d14     2E          | 	byte	"Cannot declare an array: the variable exists."
30d15     00          | 	byte	0
30d16                 | LR__5548
30d16     45 78 70 65 
30d1a     63 74 65 64 
30d1e     20 27 28 27 
30d22     2E          | 	byte	"Expected '('."
30d23     00          | 	byte	0
30d24                 | LR__5549
30d24     45 78 70 65 
30d28     63 74 65 64 
30d2c     20 27 29 27 
30d30     20 6F 72 20 
30d34     27 2C 27 2E | 	byte	"Expected ')' or ','."
30d38     00          | 	byte	0
30d39                 | LR__5550
30d39     4E 6F 20 6D 
30d3d     6F 72 65 20 
30d41     74 68 61 6E 
30d45     20 33 20 64 
30d49     69 6D 65 6E 
30d4d     73 69 6F 6E 
30d51     73 20 73 75 
30d55     70 70 6F 72 
30d59     74 65 64    | 	byte	"No more than 3 dimensions supported"
30d5c     00          | 	byte	0
30d5d                 | LR__5551
30d5d     56 61 72 69 
30d61     61 62 6C 65 
30d65     20 6E 61 6D 
30d69     65 20 65 78 
30d6d     70 65 63 74 
30d71     65 64       | 	byte	"Variable name expected"
30d73     00          | 	byte	0
30d74                 | LR__5552
30d74     54 79 70 65 
30d78     20 6E 61 6D 
30d7c     65 20 65 78 
30d80     70 65 63 74 
30d84     65 64       | 	byte	"Type name expected"
30d86     00          | 	byte	0
30d87                 | LR__5553
30d87     54 79 70 65 
30d8b     20 6E 6F 74 
30d8f     20 73 75 70 
30d93     70 6F 72 74 
30d97     65 64 20 79 
30d9b     65 74       | 	byte	"Type not supported yet"
30d9d     00          | 	byte	0
30d9e                 | LR__5554
30d9e     41 72 72 61 
30da2     79 20 69 6E 
30da6     64 65 78 20 
30daa     6F 75 74 20 
30dae     6F 66 20 72 
30db2     61 6E 67 65 | 	byte	"Array index out of range"
30db6     00          | 	byte	0
30db7                 | LR__5555
30db7     42 61 64 20 
30dbb     74 79 70 65 
30dbf     20 77 68 69 
30dc3     6C 65 20 61 
30dc7     73 73 69 67 
30dcb     6E 69 6E 67 
30dcf     20 74 6F 20 
30dd3     61 72 72 61 
30dd7     79          | 	byte	"Bad type while assigning to array"
30dd8     00          | 	byte	0
30dd9                 | LR__5556
30dd9     45 72 72 6F 
30ddd     72 20       | 	byte	"Error "
30ddf     00          | 	byte	0
30de0                 | LR__5557
30de0     3A 20       | 	byte	": "
30de2     00          | 	byte	0
30de3                 | LR__5558
30de3     2F 73 64    | 	byte	"/sd"
30de6     00          | 	byte	0
30de7                 | LR__5559
30de7     2F 73 64 2F 
30deb     62 61 73    | 	byte	"/sd/bas"
30dee     00          | 	byte	0
30def                 | LR__5560
30def     2F 73 64 2F 
30df3     62 61 73    | 	byte	"/sd/bas"
30df6     00          | 	byte	0
30df7                 | LR__5561
30df7     20 42 41 53 
30dfb     49 43 20 62 
30dff     79 74 65 73 
30e03     20 66 72 65 
30e07     65          | 	byte	" BASIC bytes free"
30e08     00          | 	byte	0
30e09                 | LR__5562
30e09     52 65 61 64 
30e0d     79          | 	byte	"Ready"
30e0e     00          | 	byte	0
30e0f                 | LR__5563
30e0f     6E 6F 6E 61 
30e13     6D 65 2E 62 
30e17     61 73       | 	byte	"noname.bas"
30e19     00          | 	byte	0
30e1a                 | LR__5564
30e1a                 | 	byte	
30e1a     00          | 	byte	0
30e1b     00          | 	alignl
30e1c                 | _dat_
30e1c     00 00 00 00 
30e20     00 00 00 00 
30e24     00 00 00 00 
30e28     00 00 00 00 | 	byte	$00[16]
30e2c     61 41 17 0E 
30e30     62 42 00 00 
30e34     63 43 19 10 
30e38     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
30e3c     65 45 18 0F 
30e40     66 46 00 00 
30e44     67 47 00 00 
30e48     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
30e4c     69 49 00 00 
30e50     6A 4A 00 00 
30e54     6B 4B 00 00 
30e58     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
30e5c     6D 4D 00 00 
30e60     6E 4E 1A 11 
30e64     6F 4F 1E 15 
30e68     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
30e6c     71 51 00 00 
30e70     72 52 00 00 
30e74     73 53 1B 12 
30e78     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
30e7c     75 55 00 00 
30e80     76 56 00 00 
30e84     77 57 00 00 
30e88     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
30e8c     79 59 00 00 
30e90     7A 5A 1D 14 
30e94     31 21 04 00 
30e98     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
30e9c     33 23 06 00 
30ea0     34 24 07 00 
30ea4     35 25 08 00 
30ea8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
30eac     37 26 0A 00 
30eb0     38 2A 0B 00 
30eb4     39 28 0C 00 
30eb8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
30ebc     8D 8D 00 00 
30ec0     9B 9B 00 00 
30ec4     88 88 00 00 
30ec8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
30ecc     20 20 00 00 
30ed0     2D 5F 00 00 
30ed4     3D 2B 00 00 
30ed8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
30edc     5D 7D 00 00 
30ee0     5C 7C 00 00 
30ee4     23 7E 00 00 
30ee8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
30eec     27 22 00 00 
30ef0     60 7E 03 00 
30ef4     2C 3C 00 00 
30ef8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
30efc     2F 3F 00 00 
30f00     B9 B9 00 00 
30f04     BA 00 00 00 
30f08     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
30f0c     BC 00 00 00 
30f10     BD 00 00 00 
30f14     BE 00 00 00 
30f18     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
30f1c     C0 00 00 00 
30f20     C1 00 00 00 
30f24     C2 00 00 00 
30f28     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
30f2c     C4 00 00 00 
30f30     C5 00 00 00 
30f34     C6 00 00 00 
30f38     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
30f3c     C8 00 00 00 
30f40     C9 00 00 00 
30f44     CA 00 00 00 
30f48     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
30f4c     7F 7F 00 00 
30f50     CC 00 00 00 
30f54     CD 00 00 00 
30f58     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
30f5c     CF 00 00 00 
30f60     D0 00 00 00 
30f64     D1 00 00 00 
30f68     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
30f6c     2F 2F 00 00 
30f70     2A 2A 00 00 
30f74     2D 2D 00 00 
30f78     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
30f7c     8D 8D 00 00 
30f80     31 31 00 00 
30f84     32 32 00 00 
30f88     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
30f8c     34 34 00 00 
30f90     35 35 00 00 
30f94     36 36 00 00 
30f98     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
30f9c     38 38 00 00 
30fa0     39 39 00 00 
30fa4     30 30 00 00 
30fa8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
30fac     5C 7C 00 00 
30fb0     00 00 00 00 
30fb4     00 00 00 00 
30fb8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
30fbc     00 00 00 00 
      ...             
31014     00 00 00 00 
31018     00 00 00 00 | 	byte	$00[96]
3101c     2B 00 A6 F2 
31020     24 A7 09 80 
31024     5B 88 4D 89 
31028     80 88 A5 88 | atari_spl file "atari.spl"
3102c     6D 88 B8 88 
31030     80 88 CB 88 
31034     92 88 A5 88 
31038     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
3103c     A5 88 CA 88 
31040     A6 88 DD 88 
31044     B8 88 AB 89 
31048     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3104c     C8 AD C6 F1 
31050     91 06 B6 FF 
31054     13 00 4A 00 
31058     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3105c     5D 00 5E 00 
31060     5D 00 5E 00 
31064     5E 00 5D 00 
31068     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3106c     38 00 83 00 
31070     25 00 83 00 
31074     C3 FE D1 04 
31078     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3107c     48 88 38 85 
31080     41 8A CB 88 
31084     28 89 B8 88 
31088     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3108c     15 89 03 89 
31090     02 89 15 89 
31094     16 89 15 89 
31098     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3109c     15 89 3A 89 
310a0     72 89 E3 89 
310a4     52 83 AD 97 
310a8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
310ac     0C 02 B6 FF 
310b0     E1 00 A8 00 
310b4     F3 00 A8 00 
310b8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
310bc     CE 00 CD 00 
310c0     CD 00 BA 00 
310c4     E1 00 BB 00 
310c8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
310cc     DF 00 C9 FF 
310d0     E6 01 B6 06 
310d4     EE DD 8D 98 
310d8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
310dc     97 89 73 89 
310e0     3B 89 60 89 
310e4     60 89 60 89 
310e8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
310ec     73 89 72 89 
310f0     85 89 73 89 
310f4     AA 89 60 89 
310f8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
310fc     E8 8A 18 86 
31100     92 88 A5 C2 
31104     E0 00 C3 05 
31108     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
3110c     F2 00 64 01 
31110     06 01 3E 01 
31114     2B 01 2B 01 
31118     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
3111c     2B 01 2A 01 
31120     2B 01 2B 01 
31124     2B 01 18 01 
31128     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
3112c     39 07 61 F3 
31130     C0 AF 37 85 
31134     0F 88 8B 8A 
31138     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
3113c     AB 89 D0 89 
31140     AB 89 D0 89 
31144     D0 89 CF 89 
31148     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3114c     D0 89 F5 89 
31150     BD 89 08 8A 
31154     CF 89 E8 8A 
31158     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3115c     53 B3 0D F8 
31160     F4 07 38 00 
31164     63 01 63 01 
31168     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3116c     88 01 88 01 
31170     76 01 88 01 
31174     88 01 89 01 
31178     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3117c     75 01 AE 01 
31180     76 01 88 01 
31184     4A 00 46 06 
31188     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3118c     08 8A 9A 86 
31190     33 8B 08 8A 
31194     2D 8A F5 89 
31198     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3119c     2D 8A 2D 8A 
311a0     2E 8A 1B 8A 
311a4     40 8A 2D 8A 
311a8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
311ac     2E 8A 79 8A 
311b0     66 8A C8 8B 
311b4     72 82 2B 97 
311b8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
311bc     1D 02 05 01 
311c0     F8 01 C0 01 
311c4     0B 02 C0 01 
311c8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
311cc     F9 01 D3 01 
311d0     F8 01 D3 01 
311d4     F8 01 D2 01 
311d8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
311dc     E6 01 2B 01 
311e0     8E 02 5F 07 
311e4     F7 E2 ED 9C 
311e8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
311ec     E8 8A 78 8A 
311f0     78 8A 65 8A 
311f4     8B 8A 78 8A 
311f8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
311fc     8B 8A 9D 8A 
31200     9D 8A 8B 8A 
31204     C2 8A 78 8A 
31208     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
3120c     70 8C 18 86 
31210     8B 8A 23 C9 
31214     CB 03 C4 05 
31218     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
3121c     0B 02 7B 02 
31220     1E 02 55 02 
31224     30 02 43 02 
31228     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
3122c     43 02 44 02 
31230     43 02 30 02 
31234     68 02 31 02 
31238     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
3123c     07 08 3F F7 
31240     73 B2 13 85 
31244     15 89 ED 8B 
31248     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
3124c     B0 8A FB 8A 
31250     D5 8A FA 8A 
31254     E8 8A FB 8A 
31258     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3125c     E8 8A 21 8B 
31260     E7 8A 33 8B 
31264     E8 8A 26 8C 
31268     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3126c     8D B0 27 F6 
31270     9C 08 AD 01 
31274     7B 02 8D 02 
31278     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3127c     A1 02 A0 02 
31280     A1 02 A0 02 
31284     A0 02 A0 02 
31288     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3128c     7B 02 D8 02 
31290     7B 02 C6 02 
31294     3E 01 C3 05 
31298     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3129c     00 8C 2A 86 
312a0     E0 8C FA 8A 
312a4     6A 8B FB 8A 
312a8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
312ac     45 8B 45 8B 
312b0     45 8B 6B 8B 
312b4     46 8B 59 8B 
312b8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
312bc     6B 8B 6B 8B 
312c0     6B 8B 6B 8B 
312c4     7D 8B 7D 8B 
312c8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
312cc     90 8B 91 8B 
312d0     90 8B 90 8B 
312d4     A3 8B A3 8B 
312d8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
312dc     B5 8B B6 8B 
312e0     B5 8B B5 8B 
312e4     B6 8B C8 8B 
312e8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
312ec     C8 8B DA 8B 
312f0     DB 8B DB 8B 
312f4     DB 8B DC 8B 
312f8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
312fc     EE 8B EE 8B 
31300     00 8C 01 8C 
31304     00 8C 01 8C 
31308     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
3130c     12 8C 13 8C 
31310     13 8C 26 8C 
31314     26 8C 26 8C 
31318     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
3131c     38 8C 38 8C 
31320     38 8C 38 8C 
31324     4B 8C 4B 8C 
31328     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
3132c     5E 8C 5E 8C 
31330     5E 8C 5E 8C 
31334     70 8C 70 8C 
31338     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3133c     70 8C 83 8C 
31340     83 8C 83 8C 
31344     83 8C 96 8C 
31348     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3134c     95 8C A9 8C 
31350     A9 8C A8 8C 
31354     A8 8C A8 8C 
31358     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3135c     BB 8C BB 8C 
31360     BB 8C CE 8C 
31364     CE 8C CE 8C 
31368     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3136c     E0 8C E1 8C 
31370     E1 8C E0 8C 
31374     F4 8C F2 8C 
31378     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3137c     05 8D 05 8D 
31380     06 8D 06 8D 
31384     19 8D 19 8D 
31388     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3138c     18 8D 2B 8D 
31390     2B 8D 2B 8D 
31394     2A 8D 3E 8D 
31398     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3139c     3E 8D 51 8D 
313a0     50 8D 50 8D 
313a4     50 8D 51 8D 
313a8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
313ac     63 8D 64 8D 
313b0     76 8D 75 8D 
313b4     75 8D 76 8D 
313b8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
313bc     88 8D 88 8D 
313c0     89 8D 9B 8D 
313c4     9A 8D 9B 8D 
313c8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
313cc     AD 8D AE 8D 
313d0     AD 8D AE 8D 
313d4     C1 8D C1 8D 
313d8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
313dc     D3 8D D3 8D 
313e0     D3 8D D3 8D 
313e4     D3 8D E6 8D 
313e8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
313ec     E6 8D E6 8D 
313f0     F9 8D F9 8D 
313f4     F9 8D F8 8D 
313f8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
313fc     0B 8E 0B 8E 
31400     1D 8E 1D 8E 
31404     1E 8E 1E 8E 
31408     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3140c     31 8E 31 8E 
31410     31 8E 42 8E 
31414     43 8E 43 8E 
31418     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
3141c     56 8E 56 8E 
31420     55 8E 56 8E 
31424     68 8E 69 8E 
31428     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
3142c     69 8E 7B 8E 
31430     7C 8E 7B 8E 
31434     7B 8E 8D 8E 
31438     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3143c     8D 8E A1 8E 
31440     A0 8E A1 8E 
31444     A1 8E A0 8E 
31448     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3144c     B3 8E B3 8E 
31450     C6 8E C5 8E 
31454     C6 8E C6 8E 
31458     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3145c     D8 8E D9 8E 
31460     D8 8E EC 8E 
31464     EB 8E EC 8E 
31468     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3146c     FE 8E FE 8E 
31470     FE 8E FE 8E 
31474     10 8F 10 8F 
31478     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3147c     11 8F 23 8F 
31480     24 8F 23 8F 
31484     24 8F 37 8F 
31488     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3148c     36 8F 36 8F 
31490     48 8F 49 8F 
31494     49 8F 49 8F 
31498     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3149c     5B 8F 5C 8F 
314a0     5B 8F 6E 8F 
314a4     6E 8F 6E 8F 
314a8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
314ac     81 8F 81 8F 
314b0     81 8F 81 8F 
314b4     93 8F 93 8F 
314b8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
314bc     93 8F A6 8F 
314c0     A6 8F A6 8F 
314c4     A6 8F B9 8F 
314c8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
314cc     B9 8F B9 8F 
314d0     CC 8F CB 8F 
314d4     CB 8F CC 8F 
314d8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
314dc     DF 8F DE 8F 
314e0     DE 8F F1 8F 
314e4     F1 8F F1 8F 
314e8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
314ec     03 90 04 90 
314f0     04 90 04 90 
314f4     16 90 17 90 
314f8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
314fc     29 90 28 90 
31500     29 90 28 90 
31504     29 90 3C 90 
31508     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3150c     3C 90 4F 90 
31510     4E 90 4E 90 
31514     4E 90 4E 90 
31518     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
3151c     61 90 61 90 
31520     73 90 74 90 
31524     74 90 74 90 
31528     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
3152c     87 90 86 90 
31530     87 90 86 90 
31534     99 90 99 90 
31538     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3153c     AB 90 AB 90 
31540     AC 90 AB 90 
31544     AB 90 BF 90 
31548     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3154c     BE 90 D1 90 
31550     D0 90 D1 90 
31554     D1 90 D1 90 
31558     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3155c     E3 90 E4 90 
31560     F6 90 F6 90 
31564     F6 90 F6 90 
31568     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3156c     09 91 0A 91 
31570     0A 91 1C 91 
31574     1C 91 1C 91 
31578     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3157c     2F 91 2E 91 
31580     2F 91 2F 91 
31584     2E 91 41 91 
31588     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3158c     41 91 53 91 
31590     54 91 54 91 
31594     53 91 54 91 
31598     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3159c     67 91 67 91 
315a0     79 91 7A 91 
315a4     79 91 78 91 
315a8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
315ac     8C 91 8B 91 
315b0     8C 91 8C 91 
315b4     9E 91 9E 91 
315b8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
315bc     B1 91 B1 91 
315c0     B2 91 B1 91 
315c4     B1 91 C4 91 
315c8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
315cc     C4 91 D6 91 
315d0     D7 91 D7 91 
315d4     D7 91 D6 91 
315d8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
315dc     EA 91 EA 91 
315e0     EA 91 FC 91 
315e4     FC 91 FB 91 
315e8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
315ec     0E 92 0F 92 
315f0     0F 92 0E 92 
315f4     21 92 21 92 
315f8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
315fc     21 92 34 92 
31600     33 92 34 92 
31604     34 92 47 92 
31608     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3160c     46 92 47 92 
31610     59 92 59 92 
31614     59 92 59 92 
31618     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3161c     6C 92 6C 92 
31620     6B 92 7E 92 
31624     7E 92 7E 92 
31628     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3162c     92 92 91 92 
31630     91 92 90 92 
31634     91 92 A4 92 
31638     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3163c     A3 92 B6 92 
31640     B6 92 B7 92 
31644     B7 92 B6 92 
31648     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3164c     CA 92 C9 92 
31650     CA 92 DC 92 
31654     DC 92 DC 92 
31658     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3165c     EF 92 EF 92 
31660     EF 92 EF 92 
31664     01 93 01 93 
31668     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3166c     15 93 14 93 
31670     14 93 14 93 
31674     14 93 27 93 
31678     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3167c     27 93 39 93 
31680     3A 93 39 93 
31684     39 93 39 93 
31688     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3168c     4B 93 4C 93 
31690     5F 93 5F 93 
31694     5F 93 5E 93 
31698     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3169c     5F 93 84 93 
316a0     4C 93 96 93 
316a4     5F 93 AE 94 
316a8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
316ac     7B C1 00 00 
316b0     00 00 00 00 
316b4     00 00 00 00 
316b8     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
316bc     00 00 00 00 | 	byte	$00, $00, $00, $00
316c0     00 00 00 00 | zero long 0
316c4     7A D7 00 80 
316c8     87 8A 48 8F 
316cc     EC 8C 76 8D 
316d0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
316d4     3C 8D 82 8D 
316d8     42 8D 88 8D 
316dc     8C 8D 8E 8D 
316e0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
316e4     97 8D DE 8D 
316e8     E1 8D F1 8E 
316ec     D8 8C A3 83 
316f0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
316f4     65 71 C9 65 
316f8     FC 64 C4 65 
316fc     C1 65 BF 65 
31700     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31704     B6 65 B4 65 
31708     B2 65 AE 65 
3170c     AC 65 ED 65 
31710     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31714     5E 65 25 66 
31718     FA 62 23 6B 
3171c     B5 6C 61 0A 
31720     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31724     5D 90 BE 8D 
31728     47 8E C3 8D 
3172c     09 8E C9 8D 
31730     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31734     15 8E 19 8E 
31738     1B 8E 62 8E 
3173c     64 8E 68 8E 
31740     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31744     B5 8E 4C 90 
31748     FA 84 3C 9D 
3174c     98 13 79 6D 
31750     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31754     D9 66 50 66 
31758     D4 66 4B 66 
3175c     8C 66 46 66 
31760     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31764     81 66 3A 66 
31768     7C 66 36 66 
3176c     76 66 30 66 
31770     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31774     6B 66 88 72 
31778     BF 37 E7 B7 
3177c     75 83 8B 8E 
31780     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31784     94 8E 96 8E 
31788     DD 8E 9C 8E 
3178c     E2 8E A2 8E 
31790     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31794     EE 8E AE 8E 
31798     38 8F B5 8E 
3179c     3F 8F FD 8E 
317a0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
317a4     A5 87 1E E3 
317a8     6D 5D FA 71 
317ac     41 64 25 67 
317b0     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
317b4     D9 66 1A 67 
317b8     18 67 15 67 
317bc     12 67 0F 67 
317c0     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
317c4     07 67 C0 66 
317c8     01 67 BC 66 
317cc     B8 66 DE 64 
317d0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
317d4     43 E5 1F 8B 
317d8     14 8A F1 90 
317dc     1C 8F 63 8F 
317e0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
317e4     29 8F 6E 8F 
317e8     72 8F 75 8F 
317ec     34 8F BE 8F 
317f0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
317f4     84 8F 87 8F 
317f8     CC 8F 56 90 
317fc     67 91 49 80 
31800     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31804     46 77 A6 66 
31808     E8 66 B0 67 
3180c     AD 67 ED 67 
31810     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31814     A2 67 E3 67 
31818     9D 67 9A 67 
3181c     98 67 94 67 
31820     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31824     49 67 CD 67 
31828     28 65 5F 6E 
3182c     82 67 3A 01 
31830     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31834     C2 91 A9 8F 
31838     EF 8F AE 8F 
3183c     F4 8F B5 8F 
31840     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31844     01 90 03 90 
31848     07 90 09 90 
3184c     0C 90 53 90 
31850     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31854     18 90 44 93 
31858     85 84 D6 9D 
3185c     87 1F 2F 75 
31860     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31864     C4 68 F6 67 
31868     BE 68 F1 67 
3186c     76 68 2E 68 
31870     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31874     27 68 24 68 
31878     64 68 1E 68 
3187c     5F 68 19 68 
31880     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31884     DC 68 56 72 
31888     7E 36 C2 B8 
3188c     D7 84 73 90 
31890     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31894     7B 90 7F 90 
31898     82 90 84 90 
3189c     CB 90 8B 90 
318a0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
318a4     D7 90 96 90 
318a8     20 91 59 90 
318ac     25 91 A2 90 
318b0     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
318b4     D0 89 40 EE 
318b8     12 64 C4 71 
318bc     29 66 0C 69 
318c0     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
318c4     C0 68 02 69 
318c8     FE 68 FB 68 
318cc     F9 68 F6 68 
318d0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
318d4     EE 68 A8 68 
318d8     2C 69 5F 68 
318dc     E2 68 81 66 
318e0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
318e4     1E EB A6 8A 
318e8     73 8B 5E 93 
318ec     7B 90 48 91 
318f0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
318f4     0D 91 11 91 
318f8     14 91 16 91 
318fc     5C 91 1C 91 
31900     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31904     68 91 AF 91 
31908     2A 91 B5 91 
3190c     75 91 1A 94 
31910     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31914     70 0E CB 6C 
31918     5D 6E C4 67 
3191c     99 69 54 69 
31920     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31924     D2 69 49 69 
31928     89 69 86 69 
3192c     40 69 C4 69 
31930     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31934     35 69 76 69 
31938     58 67 EB 6D 
3193c     E9 6D 89 0F 
31940     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31944     33 94 94 91 
31948     D9 91 56 91 
3194c     E0 91 9F 91 
31950     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31954     EC 91 EE 91 
31958     F1 91 F4 91 
3195c     F7 91 3D 92 
31960     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31964     46 92 21 94 
31968     11 89 A4 9D 
3196c     FD 0E 8F 6C 
31970     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31974     28 6A E1 69 
31978     65 6A 1F 6A 
3197c     5F 6A 1A 6A 
31980     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31984     54 6A 0F 6A 
31988     4F 6A 09 6A 
3198c     06 6A 03 6A 
31990     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31994     23 68 69 77 
31998     3A 4D 38 CA 
3199c     38 86 4E 91 
319a0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
319a4     64 92 24 92 
319a8     6A 92 2A 92 
319ac     70 92 30 92 
319b0     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
319b4     7B 92 7E 92 
319b8     C5 92 84 92 
319bc     CB 92 8A 92 
319c0     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
319c4     4D 8D F9 E2 
319c8     97 59 FE 74 
319cc     DB 68 6D 6A 
319d0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
319d4     A8 6A A5 6A 
319d8     A3 6A 9F 6A 
319dc     9D 6A 9B 6A 
319e0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
319e4     D6 6A 8F 6A 
319e8     CF 6A 46 6A 
319ec     CA 6A E1 67 
319f0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
319f4     D3 F7 15 92 
319f8     90 8C BF 94 
319fc     A6 92 EB 92 
31a00     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31a04     B1 92 F7 92 
31a08     FA 92 FD 92 
31a0c     00 93 02 93 
31a10     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31a14     4F 93 52 93 
31a18     54 93 22 94 
31a1c     5A 93 8F 88 
31a20     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31a24     1C 77 07 6C 
31a28     E8 69 7A 6B 
31a2c     34 6B 75 6B 
31a30     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31a34     29 6B 26 6B 
31a38     24 6B 21 6B 
31a3c     1D 6B 5E 6B 
31a40     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31a44     12 6B 52 6B 
31a48     34 69 34 6E 
31a4c     BA 73 A4 24 
31a50     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31a54     7A 94 B3 93 
31a58     72 93 31 93 
31a5c     78 93 7A 93 
31a60     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31a64     83 93 86 93 
31a68     89 93 D0 93 
31a6c     D2 93 D5 93 
31a70     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31a74     DD 93 40 96 
31a78     30 8B 99 9C 
31a7c     52 10 94 71 
31a80     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31a84     46 6C 79 6B 
31a88     40 6C B7 6B 
31a8c     F7 6B B1 6B 
31a90     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31a94     EC 6B A5 6B 
31a98     A2 6B 9F 6B 
31a9c     9D 6B 9A 6B 
31aa0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31aa4     C8 6A E4 76 
31aa8     20 4B F9 CE 
31aac     2E 8A 1A 92 
31ab0     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31ab4     FB 93 BA 93 
31ab8     01 94 03 94 
31abc     4A 94 09 94 
31ac0     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31ac4     55 94 14 94 
31ac8     9E 94 1A 94 
31acc     61 94 20 94 
31ad0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31ad4     3E 87 E5 CD 
31ad8     5F 50 6C 78 
31adc     B5 6A 04 6C 
31ae0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31ae4     83 6C 7F 6C 
31ae8     7C 6C 36 6C 
31aec     76 6C 74 6C 
31af0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31af4     6B 6C 25 6C 
31af8     66 6C 1F 6C 
31afc     1D 6C 41 6A 
31b00     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31b04     BA FA FC 94 
31b08     5B 8D 97 96 
31b0c     3B 94 C5 94 
31b10     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31b14     89 94 8C 94 
31b18     8F 94 92 94 
31b1c     94 94 DB 94 
31b20     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31b24     E4 94 E7 94 
31b28     2D 95 74 95 
31b2c     C8 96 15 89 
31b30     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31b34     CB 75 31 6F 
31b38     7E 6B 10 6D 
31b3c     C9 6C 0A 6D 
31b40     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31b44     BD 6C FF 6C 
31b48     FB 6C F9 6C 
31b4c     B2 6C F3 6C 
31b50     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31b54     A7 6C E8 6C 
31b58     0D 6B 85 6F 
31b5c     C7 74 10 28 
31b60     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31b64     96 96 47 95 
31b68     06 95 0A 95 
31b6c     0C 95 0F 95 
31b70     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31b74     17 95 5E 95 
31b78     61 95 63 95 
31b7c     22 95 AC 95 
31b80     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31b84     72 95 17 98 
31b88     59 8E 01 96 
31b8c     CF FC 5A 68 
31b90     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31b94     96 6D 50 6D 
31b98     D5 6D 4A 6D 
31b9c     8C 6D 89 6D 
31ba0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31ba4     80 6D 3A 6D 
31ba8     7A 6D 77 6D 
31bac     75 6D 71 6D 
31bb0     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31bb4     18 6C BC 78 
31bb8     9A 4F 7E CF 
31bbc     1F 89 F1 93 
31bc0     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31bc4     D2 95 4E 95 
31bc8     D7 95 53 95 
31bcc     DD 95 E0 95 
31bd0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31bd4     A5 95 EB 95 
31bd8     EE 95 F0 95 
31bdc     37 96 B3 95 
31be0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31be4     1A 98 D5 8D 
31be8     C5 9F CD 0F 
31bec     0F 71 F3 73 
31bf0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31bf4     D9 6D 5E 6E 
31bf8     D3 6D 58 6E 
31bfc     12 6E 0F 6E 
31c00     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31c04     49 6E BF 6D 
31c08     87 6E 76 6D 
31c0c     81 6E 11 6B 
31c10     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31c14     3F 09 44 95 
31c18     E5 8D 3F 99 
31c1c     D4 95 A2 96 
31c20     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31c24     23 96 69 96 
31c28     6B 96 6E 96 
31c2c     71 96 74 96 
31c30     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31c34     BF 96 3C 96 
31c38     C6 96 C8 96 
31c3c     A3 98 51 8D 
31c40     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31c44     CF 75 29 73 
31c48     90 6C EC 6E 
31c4c     62 6E E7 6E 
31c50     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31c54     9A 6E 98 6E 
31c58     95 6E 91 6E 
31c5c     8E 6E CF 6E 
31c60     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31c64     40 6E C3 6E 
31c68     E8 6C 45 6F 
31c6c     A5 7B C9 35 
31c70     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31c74     2D 98 23 97 
31c78     E1 96 A0 96 
31c7c     A4 96 EA 96 
31c80     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31c84     AF 96 F4 96 
31c88     F8 96 3E 97 
31c8c     FD 96 43 97 
31c90     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31c94     08 97 6B 99 
31c98     D6 92 88 91 
31c9c     D8 EE 84 66 
31ca0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31ca4     2E 6F E7 6E 
31ca8     6C 6F 24 6F 
31cac     21 6F 1F 6F 
31cb0     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31cb4     17 6F 13 6F 
31cb8     54 6F 0E 6F 
31cbc     0B 6F 4B 6F 
31cc0     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31cc4     27 6D 1C 7B 
31cc8     19 59 9F DB 
31ccc     66 8E BC 94 
31cd0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31cd4     67 97 26 97 
31cd8     6D 97 2B 97 
31cdc     72 97 32 97 
31ce0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31ce4     C1 97 7F 97 
31ce8     C6 97 85 97 
31cec     CB 97 CE 97 
31cf0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31cf4     EC 8A C4 C6 
31cf8     68 4C F4 7D 
31cfc     63 6E E8 6E 
31d00     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31d04     ED 6F A7 6F 
31d08     E7 6F A0 6F 
31d0c     E1 6F 9B 6F 
31d10     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31d14     D5 6F 8F 6F 
31d18     CE 6F 45 6F 
31d1c     86 6F 68 6D 
31d20     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31d24     C0 13 AD A2 
31d28     A7 8E 79 99 
31d2c     E6 97 E8 97 
31d30     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31d34     F1 97 F3 97 
31d38     F6 97 F9 97 
31d3c     FB 97 FE 97 
31d40     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31d44     4A 98 0A 98 
31d48     93 98 0F 98 
31d4c     7F 9B BF 8C 
31d50     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31d54     91 7B 62 73 
31d58     1A 6E B9 70 
31d5c     EB 6F B3 70 
31d60     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31d64     25 70 20 70 
31d68     1E 70 1B 70 
31d6c     18 70 15 70 
31d70     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31d74     0D 70 09 70 
31d78     07 70 03 70 
31d7c     01 70 FD 6F 
31d80     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31d84     F6 6F F2 6F 
31d88     EF 6F EC 6F 
31d8c     2C 70 E6 6F 
31d90     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
31d94     DD 6F 97 6F 
31d98     D7 6F 84 6E 
31d9c     8F 6F 3F 7D 
31da0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
31da2     00 00 00 00 | zero1 long 0
31da6     FF FF FF FF 
31daa     FF FF       | atarist_spl file "atarist.spl" '512
31dac     00 00 00 00 
31db0     00 00 00 00 
31db4     00 00       | 	byte	$00[10]
31db6     17 7F F2 7F 
31dba     B2 7F 72 7F 
31dbe     33 7F F4 7E 
31dc2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
31dc6     36 7E F5 7D 
31dca     E9 51 F2 0D 
31dce     8E 00 F3 FD 
31dd2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
31dd6     57 FD 58 FD 
31dda     5B FD 5C FD 
31dde     5C FD 60 7D 
31de2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
31de6     D6 7C 98 7C 
31dea     59 7C 1A 7C 
31dee     DC 7B 9E 7B 
31df2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
31df6     F3 05 00 FD 
31dfa     41 FB EA FA 
31dfe     D9 FA DB FA 
31e02     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
31e06     E4 FA 9B 36 
31e0a     F8 7A C0 7A 
31e0e     84 7A 45 7A 
31e12     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
31e16     8E 79 51 79 
31e1a     15 79 D7 78 
31e1e     3C 1F EB FF 
31e22     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
31e26     6D F8 65 F8 
31e2a     68 F8 6D F8 
31e2e     70 F8 74 F8 
31e32     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
31e36     AB 60 79 60 
31e3a     4B 60 1A 60 
31e3e     E9 5F B9 5F 
31e42     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
31e46     FB 59 B2 0B 
31e4a     92 FA 3A F7 
31e4e     96 F6 79 F6 
31e52     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
31e56     82 F6 86 F6 
31e5a     8C F6 DB 5D 
31e5e     F1 5E C1 5E 
31e62     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
31e66     34 5E 04 5E 
31e6a     D6 5D A6 5D 
31e6e     78 5D D4 3E 
31e72     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
31e76     27 F5 BA F4 
31e7a     AB F4 AD F4 
31e7e     B2 F4 B8 F4 
31e82     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
31e86     26 5D 2B 5D 
31e8a     FC 5C CD 5C 
31e8e     9F 5C 70 5C 
31e92     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
31e96     E5 5B B8 5B 
31e9a     DB 24 A7 FC 
31e9e     D1 F4 4D F3 
31ea2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
31ea6     04 F3 0B F3 
31eaa     11 F3 16 F3 
31eae     DE 18 98 5B 
31eb2     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
31eb6     4E 4A 29 48 
31eba     A0 47 6A 47 
31ebe     43 47 20 47 
31ec2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
31ec6     E2 F6 98 F2 
31eca     C5 F1 A3 F1 
31ece     A3 F1 A8 F1 
31ed2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
31ed6     BF F1 00 3D 
31eda     EF 46 CD 46 
31ede     AA 46 86 46 
31ee2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
31ee6     1C 46 F9 45 
31eea     D7 45 EE 43 
31eee     DE 02 E8 F3 
31ef2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
31ef6     61 F0 65 F0 
31efa     6D F0 74 F0 
31efe     7C F0 84 F0 
31f02     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
31f06     8E 45 6D 45 
31f0a     49 45 27 45 
31f0e     05 45 E1 44 
31f12     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
31f16     F1 2F A9 FB 
31f1a     8B F1 9B EF 
31f1e     40 EF 36 EF 
31f22     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
31f26     4D EF 56 EF 
31f2a     5E EF 7B 44 
31f2e     8C 44 69 44 
31f32     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
31f36     03 44 E1 43 
31f3a     C0 43 F5 37 
31f3e     69 33 0F 11 
31f42     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
31f46     66 EE 37 EE 
31f4a     38 EE 40 EE 
31f4e     48 EE 51 EE 
31f52     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
31f56     7D 32 6A 32 
31f5a     51 32 37 32 
31f5e     1F 32 05 32 
31f62     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
31f66     B9 31 A1 31 
31f6a     F1 04 F4 F1 
31f6e     50 EE A0 ED 
31f72     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
31f76     93 ED 9A ED 
31f7a     A4 ED AD ED 
31f7e     F4 27 C1 31 
31f82     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
31f86     78 31 5F 31 
31f8a     46 31 2E 31 
31f8e     15 31 FC 30 
31f92     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
31f96     C4 EF 4A ED 
31f9a     DC EC CB EC 
31f9e     D2 EC DA EC 
31fa2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
31fa6     F9 EC 64 2F 
31faa     0A 31 F1 30 
31fae     D9 30 C0 30 
31fb2     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
31fb6     78 30 5F 30 
31fba     46 30 38 23 
31fbe     A6 F6 19 EE 
31fc2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
31fc6     20 EC 28 EC 
31fca     32 EC 3C EC 
31fce     47 EC 51 EC 
31fd2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
31fd6     A3 22 93 22 
31fda     7F 22 6E 22 
31fde     5D 22 4C 22 
31fe2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
31fe6     77 09 76 F1 
31fea     CC EC F0 EB 
31fee     CD EB CE EB 
31ff2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
31ff6     ED EB F5 EB 
31ffa     3E F6 6B 22 
31ffe     5F 22 4E 22 
32002     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
32006     1B 22 0B 22 
3200a     FA 21 E9 21 
3200e     D8 21 4D FF 
32012     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
32016     92 EB 7B EB 
3201a     82 EB 8C EB 
3201e     97 EB A1 EB 
32022     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
32026     15 22 04 22 
3202a     F3 21 E3 21 
3202e     D2 21 C0 21 
32032     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
32036     8E 21 7D 21 
3203a     9A F8 A4 ED 
3203e     8E EB 2F EB 
32042     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
32046     37 EB 42 EB 
3204a     4C EB 57 EB 
3204e     B2 17 22 19 
32052     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32056     FD 18 EF 18 
3205a     E3 18 D6 18 
3205e     CA 18 BD 18 
32062     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
32066     60 EC 35 EB 
3206a     01 EB 01 EB 
3206e     0C EB 16 EB 
32072     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
32076     34 EB D0 18 
3207a     00 19 F4 18 
3207e     E8 18 DA 18 
32082     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
32086     B6 18 A9 18 
3208a     9D 18 91 05 
3208e     F0 EF CA EB 
32092     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
32096     E8 EA F2 EA 
3209a     FE EA 07 EB 
3209e     12 EB C2 EF 
320a2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
320a6     D9 18 CD 18 
320aa     C0 18 B3 18 
320ae     A7 18 9B 18 
320b2     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
320b6     B8 FC 30 EE 
320ba     61 EB DC EA 
320be     CD EA D2 EA 
320c2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
320c6     F3 EA FE EA 
320ca     D2 09 D1 18 
320ce     C3 18 17 18 
320d2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
320d6     66 11 52 11 
320da     49 11 41 11 
320de     38 11 E0 F4 
320e2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
320e6     C9 EA C5 EA 
320ea     CF EA DB EA 
320ee     E6 EA EF EA 
320f2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
320f6     89 11 80 11 
320fa     78 11 6E 11 
320fe     67 11 5D 11 
32102     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
32106     43 11 32 0D 
3210a     9C F1 07 EC 
3210e     F8 EA CD EA 
32112     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
32116     E4 EA ED EA 
3211a     F8 EA 02 EB 
3211e     55 11 91 11 
32122     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
32126     75 11 6E 11 
3212a     64 11 5E 11 
3212e     54 11 4A 11 
32132     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
32136     A8 EB F1 EA 
3213a     D9 EA DC EA 
3213e     E8 EA F1 EA 
32142     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
32146     A6 EB 9E 11 
3214a     A0 11 96 11 
3214e     8D 11 85 11 
32152     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
32156     6A 11 CA 0D 
3215a     36 0B 57 F8 
3215e     6C ED 57 EB 
32162     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
32166     F4 EA FF EA 
3216a     09 EB 15 EB 
3216e     1E EB 1A FD 
32172     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
32176     ED 0A E8 0A 
3217a     E2 0A DC 0A 
3217e     D6 0A D1 0A 
32182     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
32186     F8 F3 BC EC 
3218a     57 EB 1E EB 
3218e     18 EB 24 EB 
32192     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
32196     42 EB 4D EB 
3219a     08 09 20 0B 
3219e     1A 0B 14 0B 
321a2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
321a6     04 0B FE 0A 
321aa     F9 0A F2 0A 
321ae     84 08 3A F1 
321b2     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
321b6     42 EB 42 EB 
321ba     4E EB 57 EB 
321be     62 EB 6B EB 
321c2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
321c6     48 0B 43 0B 
321ca     3C 0B 36 0B 
321ce     31 0B 2C 0B 
321d2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
321d6     1B 0B 5C 00 
321da     6A EF 1B EC 
321de     81 EB 6A EB 
321e2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
321e6     85 EB 8E EB 
321ea     99 EB A3 EB 
321ee     DD 05 E5 05 
321f2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
321f6     DB 05 D8 05 
321fa     D5 05 D1 05 
321fe     D0 05 CB 05 
32202     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
32206     0C EC BB EB 
3220a     B3 EB BB EB 
3220e     C5 EB D0 EB 
32212     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
32216     E4 F7 2C 06 
3221a     28 06 24 06 
3221e     22 06 1F 06 
32222     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
32226     16 06 14 06 
3222a     0F 06 D0 F3 
3222e     65 ED 2D EC 
32232     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
32236     01 EC 0A EC 
3223a     14 EC 1E EC 
3223e     29 EC FB 03 
32242     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
32246     63 06 60 06 
3224a     5E 06 59 06 
3224e     58 06 54 06 
32252     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
32256     69 F1 21 ED 
3225a     55 EC 33 EC 
3225e     36 EC 40 EC 
32262     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
32266     5C EC 68 EC 
3226a     92 02 D9 02 
3226e     D7 02 D7 02 
32272     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
32276     D1 02 D1 02 
3227a     CE 02 CD 02 
3227e     5D FC 80 EF 
32282     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
32286     83 EC 8A EC 
3228a     93 EC 9C EC 
3228e     A5 EC B1 EC 
32292     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
32296     2B 03 2A 03 
3229a     29 03 26 03 
3229e     25 03 24 03 
322a2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
322a6     1F 03 70 F7 
322aa     D0 EE 27 ED 
322ae     DB EC D4 EC 
322b2     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
322b6     F0 EC FA EC 
322ba     02 ED F9 F4 
322be     7B 03 7C 03 
322c2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
322c6     75 03 73 03 
322ca     72 03 70 03 
322ce     6D 03 6C 03 
322d2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
322d6     54 ED 22 ED 
322da     22 ED 2C ED 
322de     35 ED 3F ED 
322e2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
322e6     14 01 C3 03 
322ea     C1 03 C0 03 
322ee     5F 01 A5 00 
322f2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
322f6     7B 00 7C 00 
322fa     20 00 85 F1 
322fe     2A EE 89 ED 
32302     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
32306     80 ED 87 ED 
3230a     90 ED 9A ED 
3230e     A3 ED 73 00 
32312     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
32316     D0 00 D0 00 
3231a     D0 00 D0 00 
3231e     D0 00 CF 00 
32322     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
32326     80 F0 3D EE 
3232a     D5 ED C7 ED 
3232e     CD ED D6 ED 
32332     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
32336     F2 ED FA ED 
3233a     1D 01 29 01 
3233e     27 01 27 01 
32342     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
32346     25 01 26 01 
3234a     26 01 23 01 
3234e     D0 F7 EC EF 
32352     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
32356     1C EE 24 EE 
3235a     2D EE 37 EE 
3235e     40 EE 47 EE 
32362     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
32366     7D 01 7B 01 
3236a     7A 01 7A 01 
3236e     79 01 78 01 
32372     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
32376     84 FE DE F3 
3237a     6C EF 93 EE 
3237e     72 EE 72 EE 
32382     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
32386     8B EE 95 EE 
3238a     9E EE 15 FC 
3238e     67 FE 67 FE 
32392     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
32396     6B FE 6B FE 
3239a     6D FE 6D FE 
3239e     6D FE 6F FE 
323a2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
323a6     DF EE CC EE 
323aa     CF EE D9 EE 
323ae     E1 EE EA EE 
323b2     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
323b6     5A FE C4 FE 
323ba     C3 FE C5 FE 
323be     C6 FE C6 FE 
323c2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
323c6     C8 FE C7 FE 
323ca     DA FB 85 F1 
323ce     8D EF 31 EF 
323d2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
323d6     34 EF 3E EF 
323da     46 EF 4F EF 
323de     57 EF 0D FF 
323e2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
323e6     1F FF 1F FF 
323ea     21 FF 21 FF 
323ee     21 FF 21 FF 
323f2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
323f6     15 F1 BE EF 
323fa     84 EF 7E EF 
323fe     88 EF 8F EF 
32402     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
32406     A9 EF 06 F2 
3240a     A6 FC AB FC 
3240e     AD FC AE FC 
32412     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
32416     B2 FC B4 FC 
3241a     B6 FC B7 FC 
3241e     8B F4 BD F0 
32422     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
32426     E4 EF EE EF 
3242a     F6 EF FD EF 
3242e     04 F0 0E F0 
32432     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
32436     0B FD 0D FD 
3243a     0F FD 11 FD 
3243e     11 FD 13 FD 
32442     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
32446     17 FD 64 F3 
3244a     CD F0 52 F0 
3244e     41 F0 45 F0 
32452     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32456     5B F0 64 F0 
3245a     6D F0 FB FC 
3245e     65 FD 68 FD 
32462     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
32466     6C FD 6D FD 
3246a     6F FD 70 FD 
3246e     72 FD B3 FB 
32472     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
32476     A4 F0 99 F0 
3247a     A0 F0 A8 F0 
3247e     AE F0 B9 F0 
32482     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
32486     CB FB DD FB 
3248a     DE FB E0 FB 
3248e     E3 FB E3 FB 
32492     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
32496     E9 FB EC FB 
3249a     62 F7 27 F2 
3249e     2A F1 FF F0 
324a2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
324a6     0C F1 13 F1 
324aa     1B F1 23 F1 
324ae     33 F2 3C FC 
324b2     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
324b6     42 FC 45 FC 
324ba     47 FC 48 FC 
324be     4A FC 4C FC 
324c2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
324c6     20 F2 77 F1 
324ca     5C F1 5F F1 
324ce     64 F1 6C F1 
324d2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
324d6     83 F1 DC F8 
324da     9A FC 9A FC 
324de     9B FC 9E FC 
324e2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
324e6     A3 FC A4 FC 
324ea     A6 FC A9 FC 
324ee     90 F4 33 F2 
324f2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
324f6     BA F1 BF F1 
324fa     C7 F1 CE F1 
324fe     D6 F1 DC F1 
32502     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
32506     F3 FC F5 FC 
3250a     FE FB 79 FB 
3250e     62 FB 5F FB 
32512     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
32516     6F FA AF F3 
3251a     53 F2 12 F2 
3251e     0F F2 15 F2 
32522     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
32526     2A F2 32 F2 
3252a     38 F2 9A FB 
3252e     AF FB B1 FB 
32532     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32536     B7 FB B8 FB 
3253a     BA FB BC FB 
3253e     C1 FB 3B F8 
32542     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
32546     6E F2 6C F2 
3254a     74 F2 7A F2 
3254e     81 F2 87 F2 
32552     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32556     06 FC 09 FC 
3255a     0C FC 0E FC 
3255e     0F FC 12 FC 
32562     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
32566     17 FC 1A FC 
3256a     B2 F6 7B F3 
3256e     DD F2 C5 F2 
32572     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
32576     D4 F2 DB F2 
3257a     E0 F2 E8 F2 
3257e     28 F8 60 FC 
32582     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
32586     64 FC 66 FC 
3258a     68 FC 6A FC 
3258e     6D FC 52 FC 
32592     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
32596     78 F3 24 F3 
3259a     1A F3 1E F3 
3259e     24 F3 2A F3 
325a2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
325a6     3D F3 80 FA 
325aa     0C FB 0F FB 
325ae     10 FB 14 FB 
325b2     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
325b6     1B FB 1D FB 
325ba     1F FB 92 FA 
325be     DE F4 AE F3 
325c2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
325c6     79 F3 7E F3 
325ca     84 F3 8C F3 
325ce     92 F3 97 F3 
325d2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
325d6     67 FB 69 FB 
325da     6B FB 6F FB 
325de     71 FB 72 FB 
325e2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
325e6     E3 F8 BA F4 
325ea     EE F3 CC F3 
325ee     CA F3 CF F3 
325f2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
325f6     E2 F3 E8 F3 
325fa     ED F3 B7 FB 
325fe     BC FB BE FB 
32602     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
32606     C4 FB C6 FB 
3260a     C8 FB C9 FB 
3260e     CC FB 8F F7 
32612     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
32616     1E F4 1E F4 
3261a     24 F4 2A F4 
3261e     30 F4 38 F4 
32622     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
32626     AD FA B1 FA 
3262a     B4 FA B6 FA 
3262e     BA FA BB FA 
32632     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
32636     C2 FA C6 FA 
3263a     55 F6 C6 F4 
3263e     7D F4 72 F4 
32642     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
32646     83 F4 89 F4 
3264a     8F F4 94 F4 
3264e     66 FA 03 FB 
32652     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32656     0A FB 0E FB 
3265a     10 FB 11 FB 
3265e     16 FB 18 FB 
32662     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32666     F9 F4 CA F4 
3266a     C5 F4 CB F4 
3266e     D1 F4 D7 F4 
32672     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32676     E8 F4 3F FB 
3267a     56 FB 58 FB 
3267e     5A FB 5E FB 
32682     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32686     64 FB 64 FB 
3268a     69 FB 99 F9 
3268e     E9 F5 33 F5 
32692     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32696     1D F5 22 F5 
3269a     27 F5 2E F5 
3269e     32 F5 37 F5 
326a2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
326a6     BC FA BC FA 
326aa     C1 FA C2 FA 
326ae     C4 FA C8 FA 
326b2     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
326b6     F9 F7 DB F5 
326ba     78 F5 69 F5 
326be     6A F5 70 F5 
326c2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
326c6     7F F5 85 F5 
326ca     6E F7 06 FB 
326ce     0A FB 0B FB 
326d2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
326d6     14 FB 15 FB 
326da     18 FB 1B FB 
326de     1D FB 70 F7 
326e2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
326e6     B6 F5 BB F5 
326ea     C0 F5 C6 F5 
326ee     CA F5 CF F5 
326f2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
326f6     54 FB 56 FB 
326fa     5A FB 5B FB 
326fe     5E FB 5F FB 
32702     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32706     67 FB 52 FB 
3270a     29 F7 33 F6 
3270e     06 F6 02 F6 
32712     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32716     10 F6 16 F6 
3271a     1A F6 1F F6 
3271e     81 FB 9F FB 
32722     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32726     51 FB F2 FA 
3272a     E3 FA E3 FA 
3272e     E5 FA E9 FA 
32732     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32736     64 F6 4D F6 
3273a     4D F6 53 F6 
3273e     57 F6 5C F6 
32742     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32746     6A F6 19 FB 
3274a     1E FB 22 FB 
3274e     23 FB 24 FB 
32752     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32756     2C FB 2E FB 
3275a     32 FB F0 F8 
3275e     01 F7 A5 F6 
32762     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32766     9F F6 A3 F6 
3276a     A6 F6 AC F6 
3276e     B0 F6 EB F7 
32772     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32776     68 FB 6C FB 
3277a     6E FB 71 FB 
3277e     72 FB 74 FB 
32782     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32786     71 F8 21 F7 
3278a     E5 F6 DD F6 
3278e     E1 F6 E6 F6 
32792     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32796     F5 F6 F7 F6 
3279a     F7 FA AB FB 
3279e     AD FB AF FB 
327a2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
327a6     B6 FB B9 FB 
327aa     BB FB BC FB 
327ae     21 FB 07 F8 
327b2     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
327b6     22 F7 26 F7 
327ba     2B F7 2E F7 
327be     34 F7 38 F7 
327c2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
327c6     13 FB 16 FB 
327ca     17 FB 1B FB 
327ce     1E FB 20 FB 
327d2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
327d6     26 FB 77 FA 
327da     F3 F7 7C F7 
327de     67 F7 6A F7 
327e2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
327e6     74 F7 7A F7 
327ea     7E F7 82 F7 
327ee     53 FB 5A FB 
327f2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
327f6     5F FB 63 FB 
327fa     65 FB 67 FB 
327fe     69 FB 6A FB 
32802     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32806     B5 F7 A9 F7 
3280a     AD F7 B0 F7 
3280e     B5 F7 B8 F7 
32812     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32816     6E F8 99 FB 
3281a     9C FB 9D FB 
3281e     9F FB A4 FB 
32822     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32826     A9 FB AB FB 
3282a     AD FB 46 F9 
3282e     26 F8 F0 F7 
32832     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32836     F4 F7 F8 F7 
3283a     FB F7 FF F7 
3283e     03 F8 65 FA 
32842     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32846     2B FB 2F FB 
3284a     30 FB 32 FB 
3284e     34 FB 38 FB 
32852     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32856     E9 F8 4A F8 
3285a     2E F8 2C F8 
3285e     2F F8 36 F8 
32862     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32866     41 F8 44 F8 
3286a     4A FB 67 FB 
3286e     68 FB 6B FB 
32872     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32876     73 FB 74 FB 
3287a     78 FB 7A FB 
3287e     14 FB E7 F8 
32882     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32886     6D F8 70 F8 
3288a     73 F8 78 F8 
3288e     7C F8 80 F8 
32892     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32896     A6 FB A7 FB 
3289a     A9 FB AC FB 
3289e     AF FB B1 FB 
328a2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
328a6     B7 FB 73 FA 
328aa     F8 F8 B4 F8 
328ae     A9 F8 AB F8 
328b2     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
328b6     B4 F8 B8 F8 
328ba     BB F8 FA F8 
328be     64 FB 65 FB 
328c2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
328c6     6D FB 6F FB 
328ca     70 FB 74 FB 
328ce     77 FB 77 FB 
328d2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
328d6     E9 F8 E4 F8 
328da     E8 F8 EB F8 
328de     EE F8 F2 F8 
328e2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
328e6     B5 FA 9F FB 
328ea     A1 FB A4 FB 
328ee     A5 FB A9 FB 
328f2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
328f6     AE FB B1 FB 
328fa     B2 FB C7 F9 
328fe     39 F9 22 F9 
32902     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32906     26 F9 2A F9 
3290a     2E F9 32 F9 
3290e     33 F9 BA FB 
32912     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32916     DE FB E1 FB 
3291a     E2 FB E4 FB 
3291e     E5 FB E7 FB 
32922     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32926     C5 F9 67 F9 
3292a     57 F9 56 F9 
3292e     5B F9 5F F9 
32932     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32936     68 F9 6C F9 
3293a     0B FC 11 FC 
3293e     14 FC 15 FC 
32942     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32946     B5 FB B5 FB 
3294a     B6 FB B8 FB 
3294e     E9 FA C8 F9 
32952     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32956     90 F9 94 F9 
3295a     95 F9 99 F9 
3295e     9D F9 9F F9 
32962     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32966     DE FB DF FB 
3296a     E2 FB E4 FB 
3296e     E6 FB E8 FB 
32972     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32976     EF FB AC FA 
3297a     E9 F9 C7 F9 
3297e     C3 F9 C8 F9 
32982     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32986     D0 F9 D4 F9 
3298a     D6 F9 0E FB 
3298e     11 FC 13 FC 
32992     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32996     19 FC 1B FC 
3299a     1D FC 1E FC 
3299e     21 FC 22 FC 
329a2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
329a6     F7 F9 F7 F9 
329aa     FB F9 FE F9 
329ae     00 FA 03 FA 
329b2     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
329b6     1B FC 45 FC 
329ba     46 FC 48 FC 
329be     4A FC 4B FC 
329c2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
329c6     52 FC 54 FC 
329ca     F3 FB 82 FA 
329ce     35 FA 28 FA 
329d2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
329d6     31 FA 32 FA 
329da     37 FA 37 FA 
329de     3C FA 00 FC 
329e2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
329e6     09 FC 0B FC 
329ea     0F FC 12 FC 
329ee     12 FC 15 FC 
329f2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
329f6     8D FA 60 FA 
329fa     5B FA 5C FA 
329fe     60 FA 61 FA 
32a02     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32a06     6C FA 6D FA 
32a0a     37 FC 3A FC 
32a0e     3B FC 3D FC 
32a12     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32a16     43 FC 44 FC 
32a1a     45 FC 47 FC 
32a1e     51 FB AB FA 
32a22     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32a26     8E FA 91 FA 
32a2a     93 FA 95 FA 
32a2e     98 FA 9B FA 
32a32     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32a36     68 FC 6A FC 
32a3a     6C FC 6E FC 
32a3e     70 FC 72 FC 
32a42     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32a46     76 FC 3B FB 
32a4a     D0 FA BB FA 
32a4e     B9 FA BD FA 
32a52     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32a56     C4 FA C6 FA 
32a5a     CA FA 13 FC 
32a5e     3A FC 3A FC 
32a62     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32a66     41 FC 43 FC 
32a6a     44 FC 47 FC 
32a6e     48 FC 3C FC 
32a72     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32a76     E6 FA E8 FA 
32a7a     EB FA EE FA 
32a7e     F0 FA F2 FA 
32a82     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32a86     61 FC 66 FC 
32a8a     68 FC 6B FC 
32a8e     6C FC 6E FC 
32a92     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32a96     73 FC 75 FC 
32a9a     13 FC 3F FB 
32a9e     17 FB 12 FB 
32aa2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32aa6     1A FB 1D FB 
32aaa     1F FB 20 FB 
32aae     23 FB 92 FC 
32ab2     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32ab6     96 FC 97 FC 
32aba     9A FC 9C FC 
32abe     9E FC 9F FC 
32ac2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32ac6     5A FB 41 FB 
32aca     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32ace     00 00 00 00 | zero2 long 0
32ad2     01 00 00 00 
32ad6     00 00 00 00 
32ada     00 00 00 00 
32ade     00 00 00 00 | mouse  file "mouse2.def"
32ae2     00 00 00 00 
32ae6     00 00 00 00 
32aea     00 00 00 00 
32aee     00 00 00 00 | 	byte	$00[16]
32af2     01 01 00 00 
32af6     00 00 00 00 
32afa     00 00 00 00 
32afe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b02     00 00 00 00 
32b06     00 00 00 00 
32b0a     00 00 00 00 
32b0e     00 00 00 00 | 	byte	$00[16]
32b12     01 0D 01 00 
32b16     00 00 00 00 
32b1a     00 00 00 00 
32b1e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b22     00 00 00 00 
32b26     00 00 00 00 
32b2a     00 00 00 00 
32b2e     00 00 00 00 | 	byte	$00[16]
32b32     01 0D 0D 01 
32b36     00 00 00 00 
32b3a     00 00 00 00 
32b3e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b42     00 00 00 00 
32b46     00 00 00 00 
32b4a     00 00 00 00 
32b4e     00 00 00 00 | 	byte	$00[16]
32b52     01 0D 0D 0D 
32b56     01 00 00 00 
32b5a     00 00 00 00 
32b5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b62     00 00 00 00 
32b66     00 00 00 00 
32b6a     00 00 00 00 
32b6e     00 00 00 00 | 	byte	$00[16]
32b72     01 0D 0D 0D 
32b76     0D 01 00 00 
32b7a     00 00 00 00 
32b7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b82     00 00 00 00 
32b86     00 00 00 00 
32b8a     00 00 00 00 
32b8e     00 00 00 00 | 	byte	$00[16]
32b92     01 0D 0D 0D 
32b96     0D 0D 01 00 
32b9a     00 00 00 00 
32b9e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ba2     00 00 00 00 
32ba6     00 00 00 00 
32baa     00 00 00 00 
32bae     00 00 00 00 | 	byte	$00[16]
32bb2     01 0D 0D 0D 
32bb6     0D 0D 0D 01 
32bba     00 00 00 00 
32bbe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32bc2     00 00 00 00 
32bc6     00 00 00 00 
32bca     00 00 00 00 
32bce     00 00 00 00 | 	byte	$00[16]
32bd2     01 0D 0D 0D 
32bd6     0D 0D 0D 0C 
32bda     01 00 00 00 
32bde     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32be2     00 00 00 00 
32be6     00 00 00 00 
32bea     00 00 00 00 
32bee     00 00 00 00 | 	byte	$00[16]
32bf2     01 0D 0D 0D 
32bf6     0D 0D 0D 0D 
32bfa     0C 01 00 00 
32bfe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32c02     00 00 00 00 
32c06     00 00 00 00 
32c0a     00 00 00 00 
32c0e     00 00 00 00 | 	byte	$00[16]
32c12     01 0D 0D 0D 
32c16     0D 0D 0D 0D 
32c1a     0D 0C 01 00 
32c1e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32c22     00 00 00 00 
32c26     00 00 00 00 
32c2a     00 00 00 00 
32c2e     00 00 00 00 | 	byte	$00[16]
32c32     01 0D 0D 0D 
32c36     0D 0D 0D 0D 
32c3a     0D 0D 0B 01 
32c3e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32c42     00 00 00 00 
32c46     00 00 00 00 
32c4a     00 00 00 00 
32c4e     00 00 00 00 | 	byte	$00[16]
32c52     01 0D 0D 0D 
32c56     0C 0D 0D 03 
32c5a     01 01 01 01 
32c5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32c62     00 00 00 00 
32c66     00 00 00 00 
32c6a     00 00 00 00 
32c6e     00 00 00 00 | 	byte	$00[16]
32c72     01 0D 0D 0C 
32c76     01 09 0D 03 
32c7a     00 00 00 00 
32c7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
32c82     00 00 00 00 
32c86     00 00 00 00 
32c8a     00 00 00 00 
32c8e     00 00 00 00 | 	byte	$00[16]
32c92     01 0D 0C 01 
32c96     00 01 0D 0B 
32c9a     01 00 00 00 
32c9e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
32ca2     00 00 00 00 
32ca6     00 00 00 00 
32caa     00 00 00 00 
32cae     00 00 00 00 | 	byte	$00[16]
32cb2     01 0C 01 00 
32cb6     00 01 0A 0D 
32cba     01 00 00 00 
32cbe     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
32cc2     00 00 00 00 
32cc6     00 00 00 00 
32cca     00 00 00 00 
32cce     00 00 00 00 | 	byte	$00[16]
32cd2     01 01 00 00 
32cd6     00 00 01 0D 
32cda     0B 01 00 00 
32cde     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
32ce2     00 00 00 00 
32ce6     00 00 00 00 
32cea     00 00 00 00 
32cee     00 00 00 00 
32cf2     00 00 00 00 
32cf6     00 00       | 	byte	$00[22]
32cf8     01 0B 0D 01 
32cfc     00 00 00 00 
32d00     00 00 00 00 
32d04     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d08     00 00 00 00 
32d0c     00 00 00 00 
32d10     00 00 00 00 
32d14     00 00 00 00 
32d18     00          | 	byte	$00[17]
32d19     01 01 00 00 
32d1d     00 00 00 00 
32d21     00 00 00 00 
32d25     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d29     00 00 00 00 
      ...             
32ecd     00 00 00 00 
32ed1     00          | 	byte	$00[425]
32ed2     73 32 00 04 
32ed6     00 00 10 00 
32eda     00 00 00 00 
32ede     00 00 00 00 | atari2 file "atari2.s2"
32ee2     43 87 43 87 
32ee6     43 87 44 87 
32eea     43 87 44 87 
32eee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32ef2     43 87 43 87 
32ef6     43 87 44 87 
32efa     43 87 43 87 
32efe     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32f02     44 87 43 87 
32f06     44 87 43 87 
32f0a     43 87 43 87 
32f0e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32f12     43 87 43 87 
32f16     44 87 43 87 
32f1a     44 87 44 87 
32f1e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
32f22     43 87 43 87 
32f26     44 87 43 87 
32f2a     43 87 42 87 
32f2e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32f32     43 87 43 87 
32f36     43 87 43 87 
32f3a     44 87 43 87 
32f3e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32f42     44 87 44 87 
32f46     43 87 44 87 
32f4a     43 87 44 87 
32f4e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
32f52     44 87 43 87 
32f56     44 87 44 87 
32f5a     43 87 43 87 
32f5e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32f62     43 87 44 87 
32f66     44 87 43 87 
32f6a     43 87 44 87 
32f6e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32f72     43 87 43 87 
32f76     43 87 43 87 
32f7a     43 87 43 87 
32f7e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
32f82     42 87 43 87 
32f86     44 87 42 87 
32f8a     43 87 43 87 
32f8e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
32f92     43 87 44 87 
32f96     44 87 43 87 
32f9a     43 87 43 87 
32f9e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32fa2     43 87 5C 87 
32fa6     EE 86 AC 87 
32faa     4C 7C A3 78 
32fae     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
32fb2     BC 78 BB 78 
32fb6     BD 78 BC 78 
32fba     BB 78 BD 78 
32fbe     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
32fc2     BB 78 BB 78 
32fc6     BC 78 BC 78 
32fca     BC 78 BB 78 
32fce     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32fd2     BC 78 BC 78 
32fd6     BC 78 BC 78 
32fda     BC 78 BC 78 
32fde     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32fe2     BB 78 BC 78 
32fe6     A0 78 4C 7C 
32fea     11 7A 29 89 
32fee     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
32ff2     44 87 43 87 
32ff6     44 87 43 87 
32ffa     43 87 42 87 
32ffe     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33002     43 87 43 87 
33006     44 87 ED 85 
3300a     71 85 52 79 
3300e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33012     BC 78 BC 78 
33016     BC 78 BC 78 
3301a     BC 78 BC 78 
3301e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33022     BC 78 BC 78 
33026     BC 78 A0 78 
3302a     CF 7A B9 81 
3302e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33032     44 87 43 87 
33036     43 87 44 87 
3303a     43 87 44 87 
3303e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33042     43 87 43 87 
33046     43 87 43 87 
3304a     44 87 43 87 
3304e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33052     43 87 43 87 
33056     44 87 43 87 
3305a     44 87 43 87 
3305e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33062     44 87 43 87 
33066     43 87 43 87 
3306a     5A 87 39 81 
3306e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33072     A5 78 BC 78 
33076     BB 78 BC 78 
3307a     BB 78 BC 78 
3307e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33082     BC 78 BC 78 
33086     BC 78 BC 78 
3308a     BC 78 8F 79 
3308e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33092     09 85 47 87 
33096     43 87 43 87 
3309a     42 87 42 87 
3309e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
330a2     43 87 43 87 
330a6     43 87 43 87 
330aa     43 87 44 87 
330ae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
330b2     43 87 43 87 
330b6     44 87 43 87 
330ba     42 87 43 87 
330be     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
330c2     44 87 43 87 
330c6     43 87 43 87 
330ca     44 87 44 87 
330ce     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
330d2     94 78 55 7A 
330d6     B9 78 BC 78 
330da     BC 78 BC 78 
330de     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
330e2     BC 78 BB 78 
330e6     BC 78 BC 78 
330ea     BC 78 BC 78 
330ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
330f2     BB 78 BC 78 
330f6     BC 78 BC 78 
330fa     BB 78 BC 78 
330fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33102     BC 78 BC 78 
33106     BD 78 BC 78 
3310a     BC 78 BB 78 
3310e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33112     94 78 B3 84 
33116     36 84 4A 87 
3311a     43 87 43 87 
3311e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
33122     43 87 44 87 
33126     43 87 43 87 
3312a     43 87 43 87 
3312e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33132     43 87 44 87 
33136     43 87 44 87 
3313a     43 87 43 87 
3313e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33142     43 87 43 87 
33146     43 87 45 87 
3314a     43 87 43 87 
3314e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33152     43 87 44 87 
33156     44 87 44 87 
3315a     43 87 43 87 
3315e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33162     43 87 42 87 
33166     43 87 43 87 
3316a     44 87 43 87 
3316e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33172     54 87 3C 82 
33176     36 83 52 79 
3317a     C6 78 BC 78 
3317e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33182     BB 78 BB 78 
33186     BC 78 BC 78 
3318a     BC 78 BC 78 
3318e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33192     BD 78 ED 78 
33196     1B 79 F4 83 
3319a     4D 83 4E 87 
3319e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
331a2     44 87 43 87 
331a6     42 87 44 87 
331aa     43 87 42 87 
331ae     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
331b2     43 87 54 87 
331b6     26 82 B3 84 
331ba     D6 77 BB 78 
331be     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
331c2     BC 78 BB 78 
331c6     BB 78 BB 78 
331ca     BB 78 BB 78 
331ce     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
331d2     BC 78 BC 78 
331d6     26 79 18 75 
331da     36 83 1F 84 
331de     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
331e2     43 87 43 87 
331e6     43 87 43 87 
331ea     43 87 44 87 
331ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
331f2     43 87 44 87 
331f6     44 87 43 87 
331fa     43 87 43 87 
331fe     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
33202     43 87 43 87 
33206     43 87 43 87 
3320a     44 87 44 87 
3320e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
33212     44 87 43 87 
33216     43 87 43 87 
3321a     43 87 44 87 
3321e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33222     44 87 44 87 
33226     44 87 43 87 
3322a     44 87 43 87 
3322e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33232     43 87 43 87 
33236     43 87 44 87 
3323a     44 87 43 87 
3323e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33242     43 87 43 87 
33246     43 87 43 87 
3324a     43 87 44 87 
3324e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33252     43 87 44 87 
33256     43 87 44 87 
3325a     19 87 7D 86 
3325e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33262     B1 78 BC 78 
33266     BC 78 BC 78 
3326a     BC 78 BC 78 
3326e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33272     BC 78 BC 78 
33276     BD 78 BC 78 
3327a     B7 78 3B 7B 
3327e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33282     96 86 44 87 
33286     43 87 43 87 
3328a     43 87 43 87 
3328e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33292     44 87 44 87 
33296     43 87 44 87 
3329a     43 87 44 87 
3329e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
332a2     43 87 44 87 
332a6     43 87 44 87 
332aa     43 87 44 87 
332ae     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
332b2     43 87 44 87 
332b6     43 87 43 87 
332ba     44 87 43 87 
332be     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
332c2     44 87 44 87 
332c6     43 87 43 87 
332ca     43 87 44 87 
332ce     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
332d2     43 87 43 87 
332d6     43 87 43 87 
332da     44 87 44 87 
332de     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
332e2     36 83 CF 7A 
332e6     AB 78 BB 78 
332ea     BC 78 BC 78 
332ee     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
332f2     BB 78 BC 78 
332f6     BC 78 BC 78 
332fa     BC 78 BC 78 
332fe     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33302     BC 78 BC 78 
33306     BC 78 BB 78 
3330a     BC 78 BC 78 
3330e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33312     BB 78 BC 78 
33316     BB 78 BC 78 
3331a     BC 78 BD 78 
3331e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
33322     BC 78 BC 78 
33326     BC 78 BC 78 
3332a     BC 78 BD 78 
3332e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
33332     BC 78 BB 78 
33336     BC 78 BB 78 
3333a     BB 78 BC 78 
3333e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
33342     BC 78 BC 78 
33346     BC 78 BC 78 
3334a     BC 78 BB 78 
3334e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33352     BC 78 BC 78 
33356     BC 78 BD 78 
3335a     BB 78 BC 78 
3335e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33362     BC 78 BC 78 
33366     BC 78 BB 78 
3336a     BC 78 BB 78 
3336e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33372     BB 78 BC 78 
33376     BC 78 BC 78 
3337a     BC 78 BB 78 
3337e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33382     BC 78 BC 78 
33386     BC 78 BB 78 
3338a     BC 78 BB 78 
3338e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33392     BC 78 BC 78 
33396     BC 78 BC 78 
3339a     BB 78 BC 78 
3339e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
333a2     BC 78 9F 78 
333a6     52 79 B3 84 
333aa     2F 86 60 87 
333ae     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
333b2     44 87 43 87 
333b6     43 87 43 87 
333ba     43 87 43 87 
333be     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
333c2     43 87 43 87 
333c6     43 87 44 87 
333ca     43 87 43 87 
333ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
333d2     43 87 43 87 
333d6     43 87 43 87 
333da     43 87 44 87 
333de     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
333e2     44 87 44 87 
333e6     5E 87 BC 80 
333ea     FB 80 94 78 
333ee     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
333f2     BD 78 BC 78 
333f6     BB 78 BC 78 
333fa     BB 78 BB 78 
333fe     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33402     BC 78 BB 78 
33406     BB 78 6B 79 
3340a     D6 77 AC 87 
3340e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33412     43 87 44 87 
33416     43 87 43 87 
3341a     44 87 43 87 
3341e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33422     43 87 44 87 
33426     43 87 5C 87 
3342a     E7 80 00 80 
3342e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33432     BC 78 BD 78 
33436     BC 78 BC 78 
3343a     BC 78 BB 78 
3343e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33442     BC 78 BC 78 
33446     BB 78 BC 78 
3344a     BB 78 BC 78 
3344e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33452     BB 78 BC 78 
33456     BC 78 BC 78 
3345a     BC 78 BC 78 
3345e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33462     BC 78 BC 78 
33466     BC 78 BC 78 
3346a     A0 78 8D 7B 
3346e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33472     60 87 43 87 
33476     44 87 44 87 
3347a     43 87 43 87 
3347e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33482     44 87 43 87 
33486     43 87 43 87 
3348a     44 87 73 86 
3348e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33492     51 7B B6 78 
33496     BC 78 BD 78 
3349a     BC 78 BC 78 
3349e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
334a2     BB 78 BC 78 
334a6     BD 78 BB 78 
334aa     BC 78 BB 78 
334ae     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
334b2     BC 78 BC 78 
334b6     BC 78 BC 78 
334ba     BB 78 BC 78 
334be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
334c2     BC 78 BB 78 
334c6     BB 78 BC 78 
334ca     BC 78 BB 78 
334ce     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
334d2     22 8C AF 84 
334d6     48 87 43 87 
334da     44 87 43 87 
334de     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
334e2     43 87 42 87 
334e6     43 87 43 87 
334ea     44 87 43 87 
334ee     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
334f2     43 87 43 87 
334f6     44 87 44 87 
334fa     43 87 43 87 
334fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33502     43 87 43 87 
33506     43 87 43 87 
3350a     44 87 43 87 
3350e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33512     9F 8B D6 77 
33516     16 7C B3 78 
3351a     BC 78 BB 78 
3351e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33522     BB 78 BC 78 
33526     BB 78 BC 78 
3352a     BC 78 BC 78 
3352e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33532     BC 78 BB 78 
33536     BB 78 BC 78 
3353a     BB 78 BC 78 
3353e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33542     BB 78 BB 78 
33546     BC 78 BC 78 
3354a     BC 78 BB 78 
3354e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33552     BC 78 BC 78 
33556     BC 78 BD 78 
3355a     BB 78 BC 78 
3355e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33562     BC 78 BC 78 
33566     BC 78 BB 78 
3356a     BC 78 BC 78 
3356e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33572     A8 78 54 7E 
33576     F4 83 17 82 
3357a     50 87 43 87 
3357e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33582     44 87 43 87 
33586     44 87 43 87 
3358a     43 87 44 87 
3358e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33592     43 87 28 87 
33596     20 85 CF 7A 
3359a     70 7D AD 78 
3359e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
335a2     BB 78 BC 78 
335a6     BC 78 BC 78 
335aa     BB 78 BB 78 
335ae     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
335b2     BB 78 B2 78 
335b6     9A 7C CF 7A 
335ba     4A 87 0D 87 
335be     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
335c2     43 87 44 87 
335c6     43 87 44 87 
335ca     43 87 43 87 
335ce     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
335d2     44 87 43 87 
335d6     28 87 51 85 
335da     11 7A 1E 7D 
335de     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
335e2     BC 78 BB 78 
335e6     BC 78 BC 78 
335ea     BC 78 BC 78 
335ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
335f2     BB 78 BC 78 
335f6     BB 78 BC 78 
335fa     BC 78 BC 78 
335fe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33602     BB 78 BC 78 
33606     BC 78 BC 78 
3360a     BD 78 BB 78 
3360e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33612     BC 78 BB 78 
33616     BC 78 BC 78 
3361a     BC 78 BB 78 
3361e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33622     BC 78 BC 78 
33626     BC 78 BC 78 
3362a     BB 78 BC 78 
3362e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33632     BC 78 BD 78 
33636     BC 78 BC 78 
3363a     BC 78 BB 78 
3363e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33642     BC 78 BB 78 
33646     BB 78 BC 78 
3364a     BC 78 BB 78 
3364e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33652     BB 78 BB 78 
33656     BB 78 BC 78 
3365a     B6 78 48 7D 
3365e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33662     56 87 43 87 
33666     42 87 44 87 
3366a     44 87 43 87 
3366e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33672     43 87 44 87 
33676     43 87 44 87 
3367a     4C 87 7E 83 
3367e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33682     F7 78 BC 78 
33686     BC 78 BB 78 
3368a     BB 78 BC 78 
3368e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33692     BC 78 BB 78 
33696     BC 78 BC 78 
3369a     BB 78 BC 78 
3369e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
336a2     BB 78 BC 78 
336a6     BC 78 BC 78 
336aa     BC 78 BB 78 
336ae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
336b2     BC 78 BC 78 
336b6     BC 78 BC 78 
336ba     BC 78 BB 78 
336be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
336c2     BC 78 BB 78 
336c6     BB 78 BC 78 
336ca     BC 78 BB 78 
336ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
336d2     BC 78 BC 78 
336d6     BB 78 BC 78 
336da     BC 78 BC 78 
336de     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
336e2     73 32 00 04 
336e6     00 00 10 00 
336ea     00 00 00 00 
336ee     00 00 00 00 | atari12 file "atari12.s2"
336f2     00 6D 00 6D 
336f6     00 6D 00 6D 
336fa     00 6D 00 6D 
336fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33702     00 6D 00 6D 
33706     00 6D 00 6D 
3370a     00 6D 00 6D 
3370e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33712     00 6D 00 6D 
33716     00 6D 00 6D 
3371a     00 6D 00 6D 
3371e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33722     00 6D 00 6D 
33726     00 6D 00 6D 
3372a     00 6D 00 6D 
3372e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33732     00 6D 00 6D 
33736     00 6D 00 6D 
3373a     00 6D 00 6D 
3373e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33742     00 6C 00 6C 
33746     00 6C 00 6C 
3374a     00 6C 00 6C 
3374e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33752     00 6C 00 6C 
33756     00 6C 00 6C 
3375a     00 6C 00 6C 
3375e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33762     00 6C 00 6C 
33766     00 6C 00 6C 
3376a     00 6C 00 6C 
3376e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33772     00 6C 00 6C 
33776     00 6C 00 6C 
3377a     00 6C 00 6C 
3377e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33782     00 6C 00 6C 
33786     00 6C 00 6C 
3378a     00 6C 00 6C 
3378e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33792     00 6C 00 6C 
33796     00 6C 00 6C 
3379a     00 6C 00 6C 
3379e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337a2     00 6C 00 6C 
337a6     00 6C 00 6C 
337aa     00 6C 00 6C 
337ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337b2     00 6C 00 6C 
337b6     00 6C 00 6C 
337ba     00 6C 00 6C 
337be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337c2     00 6C 00 6C 
337c6     00 6C 00 6C 
337ca     00 6C 00 6C 
337ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337d2     00 6C 00 6C 
337d6     00 6C 00 6C 
337da     00 6C 00 6C 
337de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337e2     00 6C 00 6C 
337e6     00 6C 00 6C 
337ea     00 6C 00 6C 
337ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
337f2     00 6C 00 6B 
337f6     00 6B 00 6B 
337fa     00 6B 00 6B 
337fe     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33802     00 6B 00 6B 
33806     00 6B 00 6B 
3380a     00 6B 00 6B 
3380e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33812     00 6B 00 6B 
33816     00 6B 00 6B 
3381a     00 6B 00 6B 
3381e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33822     00 6B 00 6B 
33826     00 6B 00 6B 
3382a     00 6B 00 6B 
3382e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33832     00 6B 00 6B 
33836     00 6B 00 6B 
3383a     00 6B 00 6B 
3383e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33842     00 6B 00 6B 
33846     00 6B 00 6B 
3384a     00 6B 00 6B 
3384e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33852     00 6B 00 6B 
33856     00 6B 00 6B 
3385a     00 6B 00 6B 
3385e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33862     00 6B 00 6B 
33866     00 6B 00 6B 
3386a     00 6B 00 6B 
3386e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33872     00 6B 00 6B 
33876     00 6B 00 6B 
3387a     00 6B 00 6B 
3387e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33882     00 6B 00 6B 
33886     00 6B 00 6B 
3388a     00 6A 00 9D 
3388e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33892     00 9E 00 9E 
33896     00 9E 00 9E 
3389a     00 9E 00 9E 
3389e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338a2     00 9E 00 9E 
338a6     00 9E 00 9E 
338aa     00 9E 00 9E 
338ae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338b2     00 9E 00 9E 
338b6     00 9E 00 9E 
338ba     00 9E 00 9E 
338be     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338c2     00 9E 00 9E 
338c6     00 9E 00 9E 
338ca     00 9E 00 9E 
338ce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338d2     00 9E 00 9E 
338d6     00 9E 00 9E 
338da     00 9E 00 9E 
338de     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338e2     00 9E 00 9E 
338e6     00 9E 00 9E 
338ea     00 9E 00 9E 
338ee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
338f2     00 9E 00 9E 
338f6     00 9E 00 9E 
338fa     00 9E 00 9E 
338fe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33902     00 9E 00 9E 
33906     00 9E 00 9E 
3390a     00 9E 00 9E 
3390e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33912     00 9E 00 9E 
33916     00 9E 00 9E 
3391a     00 9E 00 9E 
3391e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33922     00 9F 00 9F 
33926     00 9F 00 9F 
3392a     00 9F 00 9F 
3392e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33932     00 9F 00 9F 
33936     00 9F 00 9F 
3393a     00 9F 00 9F 
3393e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33942     00 9F 00 9F 
33946     00 9F 00 9F 
3394a     00 9F 00 9F 
3394e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33952     00 9F 00 9F 
33956     00 9F 00 9F 
3395a     00 9F 00 9F 
3395e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33962     00 9F 00 9F 
33966     00 9F 00 9F 
3396a     00 9F 00 9F 
3396e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33972     00 9F 00 9F 
33976     00 9F 00 9F 
3397a     00 9F 00 9F 
3397e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33982     00 9F 00 9F 
33986     00 9F 00 9F 
3398a     00 9F 00 9F 
3398e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33992     00 9F 00 9F 
33996     00 9F 00 9F 
3399a     00 9F 00 9F 
3399e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
339a2     00 9F 00 9F 
339a6     00 9F 00 9F 
339aa     00 9F 00 9F 
339ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
339b2     00 9F 00 9F 
339b6     00 9F 00 9F 
339ba     00 9F 00 9F 
339be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
339c2     00 9F 00 9F 
339c6     00 9F 00 9F 
339ca     00 9F 00 9F 
339ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
339d2     00 9F 00 9F 
339d6     00 9F 00 9F 
339da     00 9F 00 9F 
339de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
339e2     00 9F 00 9F 
339e6     00 9F 00 A0 
339ea     00 A0 00 A0 
339ee     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339f2     00 A0 00 A0 
339f6     00 A0 00 A0 
339fa     00 A0 00 A0 
339fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a02     00 A0 00 A0 
33a06     00 A0 00 A0 
33a0a     00 A0 00 A0 
33a0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a12     00 A0 00 A0 
33a16     00 A0 00 A0 
33a1a     00 A0 00 A0 
33a1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a22     00 A0 00 A0 
33a26     00 A0 00 A0 
33a2a     00 A0 00 A0 
33a2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a32     00 A0 00 A0 
33a36     00 A0 00 A0 
33a3a     00 A0 00 A0 
33a3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a42     00 A0 00 A0 
33a46     00 A0 00 A0 
33a4a     00 A0 00 A0 
33a4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a52     00 A0 00 A0 
33a56     00 A0 00 A0 
33a5a     00 A0 00 A0 
33a5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a62     00 A0 00 A0 
33a66     00 A0 00 A0 
33a6a     00 A0 00 A0 
33a6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a72     00 A0 00 A0 
33a76     00 A0 00 A0 
33a7a     00 A0 00 A0 
33a7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a82     00 A0 00 A0 
33a86     00 A0 00 A0 
33a8a     00 A0 00 A0 
33a8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a92     00 A0 00 A0 
33a96     00 A0 00 A0 
33a9a     00 A0 00 A0 
33a9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33aa2     00 A0 00 A0 
33aa6     00 A0 00 A0 
33aaa     00 A0 00 A0 
33aae     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33ab2     00 6D 00 6D 
33ab6     00 6D 00 6D 
33aba     00 6D 00 6D 
33abe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ac2     00 6D 00 6D 
33ac6     00 6D 00 6D 
33aca     00 6D 00 6D 
33ace     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ad2     00 6D 00 6D 
33ad6     00 6D 00 6D 
33ada     00 6D 00 6D 
33ade     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ae2     00 6D 00 6D 
33ae6     00 6D 00 6D 
33aea     00 6D 00 6D 
33aee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33af2     00 6D 00 6D 
33af6     00 6D 00 6D 
33afa     00 6D 00 6D 
33afe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b02     00 6D 00 6D 
33b06     00 6D 00 6D 
33b0a     00 6D 00 6D 
33b0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b12     00 6D 00 6D 
33b16     00 6D 00 6D 
33b1a     00 6D 00 6D 
33b1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b22     00 6D 00 6D 
33b26     00 6D 00 6D 
33b2a     00 6D 00 6D 
33b2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b32     00 6D 00 6D 
33b36     00 A0 00 A0 
33b3a     00 A0 00 A0 
33b3e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b42     00 A0 00 A0 
33b46     00 A0 00 A0 
33b4a     00 A0 00 A0 
33b4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b52     00 A0 00 A0 
33b56     00 A0 00 A0 
33b5a     00 A0 00 A0 
33b5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b62     00 A0 00 A0 
33b66     00 A0 00 A0 
33b6a     00 A0 00 A0 
33b6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b72     00 A0 00 A0 
33b76     00 A0 00 A0 
33b7a     00 A0 00 A0 
33b7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b82     00 A0 00 A0 
33b86     00 A0 00 A0 
33b8a     00 A0 00 A0 
33b8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33b92     00 A0 00 A0 
33b96     00 A0 00 A0 
33b9a     00 A0 00 A0 
33b9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ba2     00 A0 00 A0 
33ba6     00 A0 00 A0 
33baa     00 A0 00 A0 
33bae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33bb2     00 A0 00 A0 
33bb6     00 A0 00 A0 
33bba     00 A0 00 A0 
33bbe     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33bc2     00 6D 00 6D 
33bc6     00 6D 00 6D 
33bca     00 6D 00 6D 
33bce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bd2     00 6D 00 6D 
33bd6     00 6D 00 6D 
33bda     00 6D 00 6D 
33bde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33be2     00 6D 00 6D 
33be6     00 6D 00 6D 
33bea     00 6D 00 6D 
33bee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bf2     00 6D 00 6D 
33bf6     00 6D 00 6D 
33bfa     00 6D 00 6D 
33bfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c02     00 6D 00 6D 
33c06     00 6D 00 6D 
33c0a     00 6D 00 6D 
33c0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c12     00 6D 00 6D 
33c16     00 6D 00 6D 
33c1a     00 6D 00 6D 
33c1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c22     00 6D 00 6D 
33c26     00 6D 00 6D 
33c2a     00 6D 00 6D 
33c2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c32     00 6D 00 6D 
33c36     00 6D 00 6D 
33c3a     00 6D 00 6D 
33c3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c42     00 6D 00 6D 
33c46     00 6C 00 A0 
33c4a     00 9F 00 A0 
33c4e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33c52     00 A0 00 A0 
33c56     00 A0 00 A0 
33c5a     00 A0 00 A0 
33c5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c62     00 A0 00 A0 
33c66     00 A0 00 A0 
33c6a     00 A0 00 A0 
33c6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c72     00 A0 00 A0 
33c76     00 A0 00 A0 
33c7a     00 A0 00 A0 
33c7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c82     00 A0 00 A0 
33c86     00 A0 00 A0 
33c8a     00 A0 00 A0 
33c8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c92     00 A0 00 A0 
33c96     00 A0 00 A0 
33c9a     00 A0 00 A0 
33c9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ca2     00 A0 00 A0 
33ca6     00 A0 00 A0 
33caa     00 A0 00 A0 
33cae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cb2     00 A0 00 A0 
33cb6     00 A0 00 A0 
33cba     00 A0 00 A0 
33cbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cc2     00 A0 00 A0 
33cc6     00 A0 00 A0 
33cca     00 A0 00 A0 
33cce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cd2     00 A0 00 A0 
33cd6     00 A0 00 A0 
33cda     00 A0 00 A0 
33cde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ce2     00 A0 00 A0 
33ce6     00 A0 00 A0 
33cea     00 A0 00 A0 
33cee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cf2     00 A0 00 A0 
33cf6     00 A0 00 A0 
33cfa     00 A0 00 A0 
33cfe     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33d02     00 A1 00 A1 
33d06     00 A1 00 A1 
33d0a     00 A1 00 A1 
33d0e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33d12     00 A1 00 A1 
33d16     00 A1 00 A1 
33d1a     00 A1 00 A1 
33d1e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33d22     00 A1 00 A1 
33d26     00 A1 00 A1 
33d2a     00 A1 00 A1 
33d2e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33d32     00 A1 00 A1 
33d36     00 A1 00 A1 
33d3a     00 A1 00 A1 
33d3e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33d42     00 A1 00 A1 
33d46     00 A1 00 A1 
33d4a     00 A1 00 A1 
33d4e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33d52     00 A1 00 A1 
33d56     00 A1 00 A1 
33d5a     00 6E 00 6E 
33d5e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33d62     00 6E 00 6E 
33d66     00 6E 00 6E 
33d6a     00 6E 00 6E 
33d6e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33d72     00 6E 00 6E 
33d76     00 6E 00 6E 
33d7a     00 6E 00 6E 
33d7e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33d82     00 6E 00 6E 
33d86     00 6E 00 6E 
33d8a     00 6E 00 6E 
33d8e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33d92     00 6E 00 6D 
33d96     00 6D 00 6D 
33d9a     00 6D 00 6D 
33d9e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33da2     00 6D 00 6D 
33da6     00 6D 00 6D 
33daa     00 6D 00 6D 
33dae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33db2     00 6D 00 6D 
33db6     00 6D 00 6D 
33dba     00 6D 00 6D 
33dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dc2     00 6D 00 6D 
33dc6     00 6D 00 6D 
33dca     00 6D 00 6D 
33dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dd2     00 6D 00 6D 
33dd6     00 6D 00 6D 
33dda     00 6D 00 6D 
33dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33de2     00 6D 00 6D 
33de6     00 6D 00 6D 
33dea     00 6D 00 6D 
33dee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33df2     00 6D 00 6D 
33df6     00 6D 00 6D 
33dfa     00 6D 00 6D 
33dfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e02     00 6D 00 6D 
33e06     00 6D 00 6D 
33e0a     00 6D 00 6D 
33e0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e12     00 6D 00 6D 
33e16     00 6D 00 6D 
33e1a     00 6D 00 6D 
33e1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e22     00 6D 00 6D 
33e26     00 6D 00 6D 
33e2a     00 6D 00 6D 
33e2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e32     00 6D 00 6D 
33e36     00 6D 00 6D 
33e3a     00 6D 00 6D 
33e3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e42     00 6D 00 6D 
33e46     00 6C 00 6C 
33e4a     00 6C 00 6C 
33e4e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33e52     00 6C 00 6C 
33e56     00 6C 00 6C 
33e5a     00 6C 00 6C 
33e5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33e62     00 6C 00 6C 
33e66     00 6C 00 6C 
33e6a     00 9D 00 9F 
33e6e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
33e72     00 9F 00 9F 
33e76     00 9F 00 9F 
33e7a     00 A0 00 A0 
33e7e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e82     00 A0 00 A0 
33e86     00 A0 00 A0 
33e8a     00 A0 00 A0 
33e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e92     00 A0 00 A0 
33e96     00 A0 00 A0 
33e9a     00 A0 00 A0 
33e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ea2     00 A0 00 A0 
33ea6     00 A0 00 A0 
33eaa     00 A0 00 A0 
33eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33eb2     00 A0 00 A0 
33eb6     00 A0 00 A0 
33eba     00 A0 00 A0 
33ebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ec2     00 A0 00 A0 
33ec6     00 A0 00 A0 
33eca     00 A0 00 A0 
33ece     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ed2     00 A0 00 A0 
33ed6     00 A0 00 A0 
33eda     00 A0 00 A0 
33ede     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ee2     00 A0 00 A0 
33ee6     00 A0 00 A0 
33eea     00 A0 00 A0 
33eee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ef2                 | 
33ef2     00 00       |              	org
33ef4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
33ef8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
33efc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
33f00 003             | 
33f00 003 00 30 04 F6 |                 mov     psramaddr,#0
33f04 004             | 
33f04 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
33f08 005 20 00 00 FF 
33f0c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
33f10 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
33f14 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
33f18 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
33f1c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
33f20 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
33f24 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
33f28 00d             | 
33f28 00d 20 00 00 FF 
33f2c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
33f30 00f E0 03 00 FF 
33f34 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
33f38 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
33f3c 012             | 
33f3c 012             |                 
33f3c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
33f40 013             |     
33f40 013 01 2C 60 FD |                 cogid 	t11				' get id
33f44 014 00 00 EC FC |                 coginit #0,#0				' start the new program
33f48 015 03 2C 60 FD |                 cogstop t11				' stop the loader
33f4c 016             | 
33f4c 016 00 00 00 00 | t11 		long 	0
33f50 017 00 FF 07 00 | mailbox 	long 	$7FF00
33f54 018 00 00 00 00 | psramaddr 	long 	0
33f58 019 00 00 00 00 | pslockval	long 	0
33f5c 01a 00 00 00 00 | cmd             long    0
33f60 01b 00 00 00 00 | buf1            long    0
33f64 01c 00 40 00 00 | buf2            long    16384
33f68 01d 6C 3F 03 00 | 	long	@@@_dat_ + 12624
33f6c 01e 50 32 20 52 
33f70 01f 65 74 72 6F 
33f74 020 6D 61 63 68 
33f78 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
33f7c 022 42 41 53 49 
33f80 023 43 20 76 65 
33f84 024 72 73 69 6F 
33f88 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
33f8c 026 33 30 00 00 | 	byte	$33, $30, $00, $00
33f90 027             | 	alignl
33f90 027             | _hg010b_spin2_dat_
33f90 027             | 
33f90 027 00 00 00 00 
33f94 028 00 00 00 00 
33f98 029 00 00 00 00 
33f9c 02a 00 00 00 00 
33fa0 02b 00 00 00    | vga_font       file "vgafont.def"
33fa3 02b 7E 81 A5 81 
33fa7 02c 81 BD 99 81 
33fab 02d 81 7E 00 00 
33faf 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
33fb3 02f 7E FF DB FF 
33fb7 030 FF C3 E7 FF 
33fbb 031 FF 7E 00 00 
33fbf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
33fc3 033 00 36 7F 7F 
33fc7 034 7F 7F 3E 1C 
33fcb 035 08 00 00 00 
33fcf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
33fd3 037 00 08 1C 3E 
33fd7 038 7F 3E 1C 08 
33fdb 039 00 00 00 00 
33fdf 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
33fe3 03b 18 3C 3C E7 
33fe7 03c E7 E7 18 18 
33feb 03d 3C 00 00 00 
33fef 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
33ff3 03f 18 3C 7E FF 
33ff7 040 FF 7E 18 18 
33ffb 041 3C 00 00 00 
33fff 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34003 043 00 00 00 18 
34007 044 3C 3C 18 00 
3400b 045 00 00 00 00 
3400f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34013 047 FF FF FF E7 
34017 048 C3 C3 E7 FF 
3401b 049 FF FF FF FF 
3401f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34023 04b 00 00 3C 66 
34027 04c 42 42 66 3C 
3402b 04d 00 00 00 00 
3402f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
34033 04f FF FF C3 99 
34037 050 BD BD 99 C3 
3403b 051 FF FF FF FF 
3403f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34043 053 78 70 58 4C 
34047 054 1E 33 33 33 
3404b 055 33 1E 00 00 
3404f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34053 057 3C 66 66 66 
34057 058 66 3C 18 7E 
3405b 059 18 18 00 00 
3405f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34063 05b FC CC FC 0C 
34067 05c 0C 0C 0C 0E 
3406b 05d 0F 07 00 00 
3406f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34073 05f FE C6 FE C6 
34077 060 C6 C6 C6 E6 
3407b 061 E7 67 03 00 
3407f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34083 063 18 18 DB 3C 
34087 064 E7 3C DB 18 
3408b 065 18 00 00 00 
3408f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34093 067 03 07 0F 1F 
34097 068 7F 1F 0F 07 
3409b 069 03 01 00 00 
3409f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
340a3 06b 60 70 78 7C 
340a7 06c 7F 7C 78 70 
340ab 06d 60 40 00 00 
340af 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
340b3 06f 18 3C 7E 18 
340b7 070 18 18 7E 3C 
340bb 071 18 00 00 00 
340bf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
340c3 073 66 66 66 66 
340c7 074 66 66 66    | 	byte	$66[7]
340ca 075 00 66 66 00 
340ce 076 00 00 00 00 
340d2 077 00 FE DB DB 
340d6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
340da 079 D8 D8 D8 00 
340de 07a 00 00 00 3E 
340e2 07b 63 06 1C 36 
340e6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
340ea 07d 30 63 3E 00 
340ee 07e 00 00 00 00 
340f2 07f 00 00 00 00 
340f6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
340fa 081 7F 7F 7F 00 
340fe 082 00 00 00 00 
34102 083 00 18 3C 7E 
34106 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3410a 085 3C 18 7E 00 
3410e 086 00 00 00 00 
34112 087 00 18 3C 7E 
34116 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3411a 089 18 18 18 00 
3411e 08a 00 00 00 00 
34122 08b 00 18 18 18 
34126 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3412a 08d 7E 3C 18 00 
3412e 08e 00 00 00 00 
34132 08f 00 00 00 18 
34136 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3413a 091 00 00 00 00 
3413e 092 00 00 00 00 
34142 093 00 00 00    | 	byte	$00[11]
34145 094 0C 06 7F 06 
34149 095 0C 00 00 00 
3414d 096 00 00 00 00 
34151 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34155 098 00 03 03 03 
34159 099 7F 00 00 00 
3415d 09a 00 00 00 00 
34161 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34165 09c 14 36 7F 36 
34169 09d 14 00 00 00 
3416d 09e 00 00 00 00 
34171 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34175 0a0 1C 1C 3E 3E 
34179 0a1 7F 7F 00 00 
3417d 0a2 00 00 00 00 
34181 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34185 0a4 7F 3E 3E 1C 
34189 0a5 1C 08 00 00 
3418d 0a6 00 00 00 00 
34191 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34195 0a8 00 00 00 00 
34199 0a9 00 00 00 00 
3419d 0aa 00 00 00 00 
341a1 0ab 00 00       | 	byte	$00[14]
341a3 0ab 18 3C 3C 3C 
341a7 0ac 18 18 18 00 
341ab 0ad 18 18 00 00 
341af 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
341b3 0af 66 24 00 00 
341b7 0b0 00 00 00 00 
341bb 0b1 00 00 00 00 
341bf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
341c3 0b3 00 36 36 7F 
341c7 0b4 36 36 36 7F 
341cb 0b5 36 36 00 00 
341cf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
341d3 0b7 3E 63 43 03 
341d7 0b8 3E 60 60 61 
341db 0b9 63 3E 18 18 
341df 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
341e3 0bb 00 00 43 63 
341e7 0bc 30 18 0C 06 
341eb 0bd 63 61 00 00 
341ef 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
341f3 0bf 1C 36 36 1C 
341f7 0c0 6E 3B 33 33 
341fb 0c1 33 6E 00 00 
341ff 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34203 0c3 0C 0C 0C 06 
34207 0c4 00 00 00 00 
3420b 0c5 00 00 00 00 
3420f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34213 0c7 30 18 0C 0C 
34217 0c8 0C 0C 0C 0C 
3421b 0c9 18 30 00 00 
3421f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
34223 0cb 0C 18 30 30 
34227 0cc 30 30 30 30 
3422b 0cd 18 0C 00 00 
3422f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
34233 0cf 00 00 00 66 
34237 0d0 3C FF 3C 66 
3423b 0d1 00 00 00 00 
3423f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
34243 0d3 00 00 00 18 
34247 0d4 18 7E 18 18 
3424b 0d5 00 00 00 00 
3424f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
34253 0d7 00 00 00 00 
34257 0d8 00 00 00 00 | 	byte	$00[8]
3425b 0d9 18 18 18 0C 
3425f 0da 00 00 00 00 
34263 0db 00 00 00 00 
34267 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3426b 0dd 00 00 00 00 
3426f 0de 00 00 00 00 
34273 0df 00 00 00 00 
34277 0e0 00 00 00 00 | 	byte	$00[16]
3427b 0e1 18 18 00 00 
3427f 0e2 00 00 00 00 
34283 0e3 00 00 40 60 
34287 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3428b 0e5 03 01 00 00 
3428f 0e6 00 00 00 00 
34293 0e7 1C 36 63 63 
34297 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3429b 0e9 36 1C 00 00 
3429f 0ea 00 00 00 00 
342a3 0eb 18 1C 1E 18 
342a7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
342ab 0ed 18 7E 00 00 
342af 0ee 00 00 00 00 
342b3 0ef 3E 63 60 30 
342b7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
342bb 0f1 63 7F 00 00 
342bf 0f2 00 00 00 00 
342c3 0f3 3E 63 60 60 
342c7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
342cb 0f5 63 3E 00 00 
342cf 0f6 00 00 00 00 
342d3 0f7 30 38 3C 36 
342d7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
342db 0f9 30 78 00 00 
342df 0fa 00 00 00 00 
342e3 0fb 7F 03 03 03 
342e7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
342eb 0fd 63 3E 00 00 
342ef 0fe 00 00 00 00 
342f3 0ff 1C 06 03 03 
342f7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
342fb 101 63 3E 00 00 
342ff 102 00 00 00 00 
34303 103 7F 63 60 60 
34307 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3430b 105 0C 0C 00 00 
3430f 106 00 00 00 00 
34313 107 3E 63 63 63 
34317 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3431b 109 63 3E 00 00 
3431f 10a 00 00 00 00 
34323 10b 3E 63 63 63 
34327 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3432b 10d 30 1E 00 00 
3432f 10e 00 00 00 00 
34333 10f 00 00 00 18 
34337 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3433b 111 18 18 00 00 
3433f 112 00 00 00 00 
34343 113 00 00 00 18 
34347 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3434b 115 18 18 0C 00 
3434f 116 00 00 00 00 
34353 117 00 60 30 18 
34357 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3435b 119 30 60 00 00 
3435f 11a 00 00 00 00 
34363 11b 00 00 00 7E 
34367 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3436b 11d 00 00 00 00 
3436f 11e 00 00 00 00 
34373 11f 00          | 	byte	$00[9]
34374 120 06 0C 18 30 
34378 121 60 30 18 0C 
3437c 122 06 00 00 00 
34380 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34384 124 63 63 30 18 
34388 125 18 18 00 18 
3438c 126 18 00 00 00 
34390 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34394 128 3E 63 63 7B 
34398 129 7B 7B 3B 03 
3439c 12a 3E 00 00 00 
343a0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
343a4 12c 1C 36 63 63 
343a8 12d 7F 63 63 63 
343ac 12e 63 00 00 00 
343b0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
343b4 130 66 66 66 3E 
343b8 131 66 66 66 66 
343bc 132 3F 00 00 00 
343c0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
343c4 134 66 43 03 03 
343c8 135 03 03 43 66 
343cc 136 3C 00 00 00 
343d0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
343d4 138 36 66 66 66 
343d8 139 66 66 66 36 
343dc 13a 1F 00 00 00 
343e0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
343e4 13c 66 46 16 1E 
343e8 13d 16 06 46 66 
343ec 13e 7F 00 00 00 
343f0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
343f4 140 66 46 16 1E 
343f8 141 16 06 06 06 
343fc 142 0F 00 00 00 
34400 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34404 144 66 43 03 03 
34408 145 7B 63 63 66 
3440c 146 5C 00 00 00 
34410 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34414 148 63 63 63 7F 
34418 149 63 63 63 63 
3441c 14a 63 00 00 00 
34420 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
34424 14c 18 18 18 18 
34428 14d 18 18 18 18 | 	byte	$18[8]
3442c 14e 3C 00 00 00 
34430 14f 00 00 00 78 
34434 150 30 30 30 30 
34438 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3443c 152 1E 00 00 00 
34440 153 00 00 00 67 
34444 154 66 66 36 1E 
34448 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3444c 156 67 00 00 00 
34450 157 00 00 00 0F 
34454 158 06 06 06 06 
34458 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3445c 15a 7F 00 00 00 
34460 15b 00 00 00 63 
34464 15c 77 7F 7F 6B 
34468 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3446c 15e 63 00 00 00 
34470 15f 00 00 00 63 
34474 160 67 6F 7F 7B 
34478 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3447c 162 63 00 00 00 
34480 163 00 00 00 3E 
34484 164 63 63 63 63 
34488 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3448c 166 3E 00 00 00 
34490 167 00 00 00 3F 
34494 168 66 66 66 3E 
34498 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3449c 16a 0F 00 00 00 
344a0 16b 00 00 00 3E 
344a4 16c 63 63 63 63 
344a8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
344ac 16e 3E 30 70 00 
344b0 16f 00 00 00 3F 
344b4 170 66 66 66 3E 
344b8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
344bc 172 67 00 00 00 
344c0 173 00 00 00 3E 
344c4 174 63 63 06 1C 
344c8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
344cc 176 3E 00 00 00 
344d0 177 00 00 00 7E 
344d4 178 7E 5A 18 18 
344d8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
344dc 17a 3C 00 00 00 
344e0 17b 00 00 00 63 
344e4 17c 63 63 63 63 
344e8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
344ec 17e 3E 00 00 00 
344f0 17f 00 00 00 63 
344f4 180 63 63 63 63 
344f8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
344fc 182 08 00 00 00 
34500 183 00 00 00 63 
34504 184 63 63 63 6B 
34508 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3450c 186 36 00 00 00 
34510 187 00 00 00 63 
34514 188 63 36 3E 1C 
34518 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3451c 18a 63 00 00 00 
34520 18b 00 00 00 66 
34524 18c 66 66 66 3C 
34528 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3452c 18e 3C 00 00 00 
34530 18f 00 00 00 7F 
34534 190 63 61 30 18 
34538 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3453c 192 7F 00 00 00 
34540 193 00 00 00 3C 
34544 194 0C 0C 0C 0C 
34548 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3454c 196 3C 00 00 00 
34550 197 00 00 00 00 
34554 198 01 03 07 0E 
34558 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3455c 19a 40 00 00 00 
34560 19b 00 00 00 3C 
34564 19c 30 30 30 30 
34568 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3456c 19e 3C 00 00 00 
34570 19f 1C 36 00 00 
34574 1a0 00 00 00 00 
34578 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3457c 1a2 00 00 00 00 
34580 1a3 00 00 00 00 
34584 1a4 00 00 00 00 
34588 1a5 00 00 00 00 
3458c 1a6 00          | 	byte	$00[17]
3458d 1a6 FF 00 00 0C 
34591 1a7 18 00 00 00 
34595 1a8 00 00 00 00 
34599 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3459d 1aa 00 00 00 00 
345a1 1ab 00 00 00 00 
345a5 1ac 00          | 	byte	$00[9]
345a6 1ac 1E 30 3E 33 
345aa 1ad 33 33 6E 00 
345ae 1ae 00 00 00 00 
345b2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
345b6 1b0 1E 36 66 66 
345ba 1b1 66 66 3E 00 
345be 1b2 00 00 00 00 
345c2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
345c6 1b4 3E 63 03 03 
345ca 1b5 03 63 3E 00 
345ce 1b6 00 00 00 00 
345d2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
345d6 1b8 3C 36 33 33 
345da 1b9 33 33 6E 00 
345de 1ba 00 00 00 00 
345e2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
345e6 1bc 3E 63 7F 03 
345ea 1bd 03 63 3E 00 
345ee 1be 00 00 00 00 
345f2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
345f6 1c0 0C 1E 0C 0C 
345fa 1c1 0C 0C 1E 00 
345fe 1c2 00 00 00 00 
34602 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34606 1c4 6E 33 33 33 
3460a 1c5 33 33 3E 30 
3460e 1c6 33 1E 00 00 
34612 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
34616 1c8 36 6E 66 66 
3461a 1c9 66 66 67 00 
3461e 1ca 00 00 00 00 
34622 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
34626 1cc 1C 18 18 18 
3462a 1cd 18 18 3C 00 
3462e 1ce 00 00 00 00 
34632 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
34636 1d0 70 60 60 60 
3463a 1d1 60 60 60 66 
3463e 1d2 66 3C 00 00 
34642 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
34646 1d4 66 36 1E 1E 
3464a 1d5 36 66 67 00 
3464e 1d6 00 00 00 00 
34652 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34656 1d8 18 18 18 18 
3465a 1d9 18 18       | 	byte	$18[6]
3465c 1da 3C 00 00 00 
34660 1db 00 00 00 00 
34664 1dc 00 00 37 7F 
34668 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3466c 1de 63 00 00 00 
34670 1df 00 00 00 00 
34674 1e0 00 00 3B 66 
34678 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3467c 1e2 66 00 00 00 
34680 1e3 00 00 00 00 
34684 1e4 00 00 3E 63 
34688 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3468c 1e6 3E 00 00 00 
34690 1e7 00 00 00 00 
34694 1e8 00 00 3B 66 
34698 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3469c 1ea 3E 06 06 0F 
346a0 1eb 00 00 00 00 
346a4 1ec 00 00 6E 33 
346a8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
346ac 1ee 3E 30 30 78 
346b0 1ef 00 00 00 00 
346b4 1f0 00 00 3B 6E 
346b8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
346bc 1f2 0F 00 00 00 
346c0 1f3 00 00 00 00 
346c4 1f4 00 00 3E 63 
346c8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
346cc 1f6 3E 00 00 00 
346d0 1f7 00 00 00 08 
346d4 1f8 0C 0C 3F 0C 
346d8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
346dc 1fa 38 00 00 00 
346e0 1fb 00 00 00 00 
346e4 1fc 00 00 33 33 
346e8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
346ec 1fe 6E 00 00 00 
346f0 1ff 00 00 00 00 
346f4 200 00 00 63 63 
346f8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
346fc 202 1C 00 00 00 
34700 203 00 00 00 00 
34704 204 00 00 63 63 
34708 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3470c 206 36 00 00 00 
34710 207 00 00 00 00 
34714 208 00 00 63 36 
34718 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3471c 20a 63 00 00 00 
34720 20b 00 00 00 00 
34724 20c 00 00 63 63 
34728 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3472c 20e 7E 60 30 1F 
34730 20f 00 00 00 00 
34734 210 00 00 7F 33 
34738 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3473c 212 7F 00 00 00 
34740 213 00 00 00 70 
34744 214 18 18 18 0E 
34748 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3474c 216 70 00 00 00 
34750 217 00 00 00 18 
34754 218 18 18 18 18 
34758 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3475c 21a 18 00 00 00 
34760 21b 00 00 00 0E 
34764 21c 18 18 18 70 
34768 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3476c 21e 0E 00 00 00 
34770 21f 6E 3B 00 00 
34774 220 00 00 00 00 
34778 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3477c 222 00 00 00 00 
34780 223 00 00 00 00 
34784 224 00 00       | 	byte	$00[10]
34786 224 08 1C 36 63 
3478a 225 63 63 7F 00 
3478e 226 00 00 00 00 
34792 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34796 228 03 03 03 03 
3479a 229 43 66 3C 18 
3479e 22a 30 1E 00 00 
347a2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
347a6 22c 33 33 33 33 
347aa 22d 33 33       | 	byte	$33[6]
347ac 22e 6E 00 00 00 
347b0 22f 00 00 60 30 
347b4 230 18 00 3E 63 
347b8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
347bc 232 3E 00 00 00 
347c0 233 00 00 08 1C 
347c4 234 36 00 1E 30 
347c8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
347cc 236 6E 00 00 00 
347d0 237 00 00 00 00 
347d4 238 33 00 1E 30 
347d8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
347dc 23a 6E 00 00 00 
347e0 23b 00 00 1C 36 
347e4 23c 1C 00 33 33 
347e8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
347ec 23e 6E 00 00 00 
347f0 23f 00 00 60 30 
347f4 240 18 00 3E 63 
347f8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
347fc 242 3E 00 00 00 
34800 243 00 00 00 00 
34804 244 00 00 3E 63 
34808 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3480c 246 3E 18 30 1E 
34810 247 00 00 00 1C 
34814 248 58 78 38 18 
34818 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3481c 24a 3C 00 00 00 
34820 24b 00 00 00 00 
34824 24c 63 00 3E 63 
34828 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3482c 24e 3E 00 00 00 
34830 24f 66 33 00 3E 
34834 250 63 63 63 63 
34838 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3483c 252 3E 00 00 00 
34840 253 00 00 CC 66 
34844 254 33 00 3E 63 
34848 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3484c 256 3E 00 00 00 
34850 257 00 00 18 3C 
34854 258 66 00 1C 18 
34858 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3485c 25a 3C 00 00 00 
34860 25b 30 18 00 7F 
34864 25c 63 61 30 18 
34868 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3486c 25e 7F 00 00 00 
34870 25f 00 63 00 08 
34874 260 1C 36 63 63 
34878 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3487c 262 63 00 00 00 
34880 263 30 18 00 3C 
34884 264 66 43 03 03 
34888 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3488c 266 3C 00 00 00 
34890 267 30 18 00 7F 
34894 268 66 46 16 1E 
34898 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3489c 26a 7F 00 00 00 
348a0 26b 0C 06 00 0F 
348a4 26c 06 06 06 06 
348a8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
348ac 26e 7F 00 00 00 
348b0 26f 30 18 00 1C 
348b4 270 18 18 18 18 
348b8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
348bc 272 3C 00 00 00 
348c0 273 00 00 08 1C 
348c4 274 36 00 3E 63 
348c8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
348cc 276 3E 00 00 00 
348d0 277 00 00 00 00 
348d4 278 63 00 3E 63 
348d8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
348dc 27a 3E 00 00 00 
348e0 27b 00 00 00 6F 
348e4 27c 46 26 06 06 
348e8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
348ec 27e 7F 00 00 00 
348f0 27f 00 00 00 6E 
348f4 280 4C 2C 0C 0C 
348f8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
348fc 282 1E 00 00 00 
34900 283 30 18 00 3E 
34904 284 63 63 06 1C 
34908 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3490c 286 3E 00 00 00 
34910 287 00 00 60 30 
34914 288 18 00 3E 63 
34918 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3491c 28a 3E 00 00 00 
34920 28b 00 63 00 3E 
34924 28c 63 63 63 63 
34928 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3492c 28e 3E 00 00 00 
34930 28f 00 63 00 63 
34934 290 63 63 63 63 
34938 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3493c 292 3E 00 00 00 
34940 293 6C 38 00 7E 
34944 294 7E 5A 18 18 
34948 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3494c 296 3C 00 00 00 
34950 297 00 00 60 48 
34954 298 2C 0C 3F 0C 
34958 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3495c 29a 38 00 00 00 
34960 29b 00 00 00 0F 
34964 29c 26 36 1E 0E 
34968 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3496c 29e 7F 00 00 00 
34970 29f 00 00 00 00 
34974 2a0 00 63 36 1C 
34978 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3497c 2a2 00 00 00 00 
34980 2a3 00 00       | 	byte	$00[6]
34982 2a3 36 1C 08 00 
34986 2a4 3E 63 03 03 
3498a 2a5 03 63 3E 00 
3498e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34992 2a7 30 18 0C 00 
34996 2a8 1E 30 3E 33 
3499a 2a9 33 33 6E 00 
3499e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
349a2 2ab 60 30 18 00 
349a6 2ac 1C 18 18 18 
349aa 2ad 18 18 3C 00 
349ae 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
349b2 2af 60 30 18 00 
349b6 2b0 3E 63 63 63 
349ba 2b1 63 63 3E 00 
349be 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
349c2 2b3 30 18 0C 00 
349c6 2b4 33 33 33 33 
349ca 2b5 33 33 6E 00 
349ce 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
349d2 2b7 00 08 1C 36 
349d6 2b8 63 63 7F 63 
349da 2b9 63 63 63 18 
349de 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
349e2 2bb 00 00 00 00 
349e6 2bc 1E 30 3E 33 
349ea 2bd 33 33 6E 18 
349ee 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
349f2 2bf 00 7F 63 61 
349f6 2c0 30 18 0C 06 
349fa 2c1 43 63 7F 00 
349fe 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34a02 2c3 36 1C 08 00 
34a06 2c4 7F 33 18 0C 
34a0a 2c5 06 63 7F 00 
34a0e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34a12 2c7 00 7F 66 46 
34a16 2c8 16 1E 16 06 
34a1a 2c9 46 66 7F 18 
34a1e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34a22 2cb 00 00 00 00 
34a26 2cc 3E 63 7F 03 
34a2a 2cd 03 63 3E 18 
34a2e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34a32 2cf 00 3C 66 03 
34a36 2d0 1F 03 0F 03 
34a3a 2d1 03 66 3C 00 
34a3e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34a42 2d3 60 30 18 00 
34a46 2d4 7F 33 18 0C 
34a4a 2d5 06 63 7F 00 
34a4e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34a52 2d7 00 3C 66 43 
34a56 2d8 03 03 03 03 
34a5a 2d9 43 66 3C 00 
34a5e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34a62 2db 00 00 00 00 
34a66 2dc 3E 63 06 1C 
34a6a 2dd 30 63 3E 18 
34a6e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34a72 2df 00 00 00 00 
34a76 2e0 00 00       | 	byte	$00[6]
34a78 2e1 6C 36 1B 36 
34a7c 2e2 6C 00 00 00 
34a80 2e3 00 00 00 00 
34a84 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a88 2e5 1B 36 6C 36 
34a8c 2e6 1B 00 00 00 
34a90 2e7 88 22 88 22 
34a94 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34a98 2e9 88 22 88 22 
34a9c 2ea 88 22 88 22 
34aa0 2eb AA 55 AA 55 
34aa4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34aa8 2ed AA 55 AA 55 
34aac 2ee AA 55 AA 55 
34ab0 2ef BB EE BB EE 
34ab4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34ab8 2f1 BB EE BB EE 
34abc 2f2 BB EE BB EE 
34ac0 2f3 18 18 18 18 
34ac4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34ac8 2f5 18 18 18 18 
34acc 2f6 18 18 18 18 
34ad0 2f7 18 18 18 18 
34ad4 2f8 18 18 18    | 	byte	$18[15]
34ad7 2f8 1F 18 18 18 
34adb 2f9 18 18 18 18 
34adf 2fa 18 30 18 00 
34ae3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34ae7 2fc 63 7F 63 63 
34aeb 2fd 63 63 00 00 
34aef 2fe 00 1C 36 00 
34af3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34af7 300 63 7F 63 63 
34afb 301 63 63 00 00 
34aff 302 00 36 1C 00 
34b03 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34b07 304 1E 16 06 46 
34b0b 305 66 7F 00 00 
34b0f 306 00 00 00 00 
34b13 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34b17 308 1C 30 60 63 
34b1b 309 63 3E 18 30 
34b1f 30a 1E 6C 6C 6C 
34b23 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34b27 30c 6F 6C 6C 6C 
34b2b 30d 6C 6C 6C 6C 
34b2f 30e 6C 6C 6C 6C 
34b33 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34b37 310 6C 6C 6C 6C 
34b3b 311 6C 6C 6C 6C 
34b3f 312 6C          | 	byte	$6c[9]
34b40 313 00 00 00 00 
34b44 314 00          | 	byte	$00[5]
34b45 314 7F 60 6F 6C 
34b49 315 6C 6C 6C 6C 
34b4d 316 6C 6C 6C 6C 
34b51 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34b55 318 6F 60 7F 00 
34b59 319 00 00 00 00 
34b5d 31a 00 00 00 18 
34b61 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34b65 31c 61 30 18 0C 
34b69 31d 06 43 63 7F 
34b6d 31e 00 00 00 00 
34b71 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34b75 320 00 7F 33 18 
34b79 321 0C 06 63 7F 
34b7d 322 00 00 00 00 
34b81 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34b85 324 00 00 1F 18 
34b89 325 18 18 18 18 
34b8d 326 18 18 18 18 
34b91 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34b95 328 18 18 F8 00 
34b99 329 00 00 00 00 
34b9d 32a 00 00 00 18 
34ba1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34ba5 32c 18 18 FF 00 
34ba9 32d 00 00 00 00 
34bad 32e 00 00 00 00 
34bb1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bb5 330 00 00 FF 18 
34bb9 331 18 18 18 18 
34bbd 332 18 18 18 18 
34bc1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34bc5 334 18 18 F8 18 
34bc9 335 18 18 18 18 
34bcd 336 18 18 18 00 
34bd1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34bd5 338 00 00 FF 00 
34bd9 339 00 00 00 00 
34bdd 33a 00 00 00 18 
34be1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34be5 33c 18 18 FF 18 
34be9 33d 18 18 18 18 
34bed 33e 18 18 18 63 
34bf1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34bf5 340 36 63 63 7F 
34bf9 341 63 63 63 63 
34bfd 342 00 00 00 00 
34c01 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34c05 344 00 1E 30 3E 
34c09 345 33 33 33 6E 
34c0d 346 00 00 00 6C 
34c11 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34c15 348 EC 0C FC 00 
34c19 349 00 00 00 00 
34c1d 34a 00 00 00 00 
34c21 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34c25 34c FC 0C EC 6C 
34c29 34d 6C 6C 6C 6C 
34c2d 34e 6C 6C 6C 6C 
34c31 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34c35 350 EF 00 FF 00 
34c39 351 00 00 00 00 
34c3d 352 00 00 00 00 
34c41 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34c45 354 FF 00 EF 6C 
34c49 355 6C 6C 6C 6C 
34c4d 356 6C 6C 6C 6C 
34c51 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34c55 358 EC 0C EC 6C 
34c59 359 6C 6C 6C 6C 
34c5d 35a 6C 6C 6C 00 
34c61 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34c65 35c FF 00 FF 00 
34c69 35d 00 00 00 00 
34c6d 35e 00 00 00 6C 
34c71 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34c75 360 EF 00 EF 6C 
34c79 361 6C 6C 6C 6C 
34c7d 362 6C 6C 6C 00 
34c81 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34c85 364 63 3E 63 63 
34c89 365 63 63 3E 63 
34c8d 366 00 00 00 00 
34c91 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34c95 368 30 3C 36 33 
34c99 369 33 33 33 6E 
34c9d 36a 00 00 00 00 
34ca1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34ca5 36c 66 66 6F 66 
34ca9 36d 66 66 36 1F 
34cad 36e 00 00 00 36 
34cb1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34cb5 370 66 66 66 66 
34cb9 371 66 66       | 	byte	$66[6]
34cbb 371 36 1F 00 00 
34cbf 372 00 00 63 00 
34cc3 373 7F 66 46 16 
34cc7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34ccb 375 66 7F 00 00 
34ccf 376 00 6C 38 00 
34cd3 377 38 30 30 3C 
34cd7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34cdb 379 33 6E 00 00 
34cdf 37a 00 36 1C 00 
34ce3 37b 63 67 6F 7F 
34ce7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34ceb 37d 63 63 00 00 
34cef 37e 00 30 18 00 
34cf3 37f 3C 18 18 18 
34cf7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34cfb 381 18 3C 00 00 
34cff 382 00 3C 66 00 
34d03 383 3C 18 18 18 
34d07 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34d0b 385 18 3C 00 00 
34d0f 386 00 00 00 36 
34d13 387 1C 08 00 3E 
34d17 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34d1b 389 63 3E 00 00 
34d1f 38a 00 18 18 18 
34d23 38b 18 18 18 18 
34d27 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34d2b 38d 00 00 00 00 
34d2f 38e 00 00 00 00 
34d33 38f 00 00 00 00 | 	byte	$00[12]
34d37 390 F8 18 18 18 
34d3b 391 18 18 18 18 
34d3f 392 18 FF FF FF 
34d43 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34d47 394 FF FF FF FF 
34d4b 395 FF FF FF FF 
34d4f 396 FF          | 	byte	$ff[9]
34d50 397 00 00 00 00 
34d54 398 00 00 00    | 	byte	$00[7]
34d57 398 FF FF FF FF 
34d5b 399 FF FF FF FF 
34d5f 39a FF          | 	byte	$ff[9]
34d60 39b 00 00 00 7E 
34d64 39c 7E 5A 18 18 
34d68 39d 18 18 18 18 
34d6c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34d70 39f 1C 36 1C 63 
34d74 3a0 63 63 63 63 
34d78 3a1 63 63 63 63 
34d7c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34d80 3a3 FF FF FF FF 
34d84 3a4 FF FF FF    | 	byte	$ff[7]
34d87 3a4 00 00 00 00 
34d8b 3a5 00 00 00 00 
34d8f 3a6 00          | 	byte	$00[9]
34d90 3a7 30 18 00 3E 
34d94 3a8 63 63 63 63 
34d98 3a9 63 63 63 63 
34d9c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34da0 3ab 00 00 00 1E 
34da4 3ac 33 33 33 1B 
34da8 3ad 33 63 63 63 
34dac 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
34db0 3af 1C 36 00 3E 
34db4 3b0 63 63 63 63 
34db8 3b1 63 63 63 63 
34dbc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34dc0 3b3 30 18 00 63 
34dc4 3b4 67 6F 7F 7B 
34dc8 3b5 73 63 63 63 
34dcc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
34dd0 3b7 00 00 60 30 
34dd4 3b8 18 00 3B 66 
34dd8 3b9 66 66 66 66 
34ddc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34de0 3bb 00 00 36 1C 
34de4 3bc 08 00 3B 66 
34de8 3bd 66 66 66 66 
34dec 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34df0 3bf 36 1C 00 3E 
34df4 3c0 63 63 06 1C 
34df8 3c1 30 60 63 63 
34dfc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
34e00 3c3 00 00 36 1C 
34e04 3c4 08 00 3E 63 
34e08 3c5 06 1C 30 63 
34e0c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
34e10 3c7 30 18 00 3F 
34e14 3c8 66 66 66 3E 
34e18 3c9 36 66 66 66 
34e1c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
34e20 3cb 30 18 00 63 
34e24 3cc 63 63 63 63 
34e28 3cd 63 63 63 63 
34e2c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34e30 3cf 00 00 60 30 
34e34 3d0 18 00 3B 6E 
34e38 3d1 66 06 06 06 
34e3c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
34e40 3d3 66 33 00 63 
34e44 3d4 63 63 63 63 
34e48 3d5 63 63 63 63 
34e4c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34e50 3d7 00 00 60 30 
34e54 3d8 18 00 63 63 
34e58 3d9 63 63 63 63 
34e5c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
34e60 3db 30 18 00 66 
34e64 3dc 66 66 66 3C 
34e68 3dd 18 18 18 18 
34e6c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
34e70 3df 00 00 00 08 
34e74 3e0 0C 0C 3F 0C 
34e78 3e1 0C 0C 0C 6C 
34e7c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
34e80 3e3 30 18 00 00 
34e84 3e4 00 00 00 00 
34e88 3e5 00 00 00 00 
34e8c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e90 3e7 00 00 00 00 
34e94 3e8 00 00 00 00 | 	byte	$00[8]
34e98 3e9 7F 00 00 00 
34e9c 3ea 00 00 00 00 
34ea0 3eb 66 33 00 00 
34ea4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
34ea8 3ed 00 00 00 00 
34eac 3ee 00 00 00 00 
34eb0 3ef 00 00 00 00 
34eb4 3f0 00 00 00 00 
34eb8 3f1 00 00 00 00 
34ebc 3f2 00          | 	byte	$00[21]
34ebd 3f2 0C 06 3C 36 
34ec1 3f3 1C 00 00 00 
34ec5 3f4 00 00 00 00 
34ec9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ecd 3f6 00 00 00 63 
34ed1 3f7 3E 00 00 00 
34ed5 3f8 00 00 00 00 
34ed9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34edd 3fa 00 00 00 00 
34ee1 3fb 3E 63 06 1C 
34ee5 3fc 36 63 63 36 
34ee9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
34eed 3fe 00 00 00 00 
34ef1 3ff 00 00 00 00 | 	byte	$00[8]
34ef5 400 18 00 7E 00 
34ef9 401 18 00 00 00 
34efd 402 00 00 00 00 
34f01 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f05 404 00 00 00 00 
34f09 405 00 00 00 00 | 	byte	$00[8]
34f0d 406 18 30 1E 00 
34f11 407 00 00 1C 36 
34f15 408 36 1C 00 00 
34f19 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
34f1d 40a 00 00 00 00 
34f21 40b 63 00 00 00 
34f25 40c 00 00 00 00 
34f29 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f2d 40e 00 00 00 18 
34f31 40f 18 00 00 00 
34f35 410 00 00 00 00 
34f39 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f3d 412 00 00 00 00 
34f41 413 00          | 	byte	$00[5]
34f42 413 CC 66 33 00 
34f46 414 33 33 33 33 
34f4a 415 33 33 6E 00 
34f4e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
34f52 417 00 3F 66 66 
34f56 418 66 3E 36 66 
34f5a 419 66 66 6F 00 
34f5e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
34f62 41b 36 1C 08 00 
34f66 41c 3B 6E 66 06 
34f6a 41d 06 06 0F 00 
34f6e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
34f72 41f 00 00 00 7E 
34f76 420 7E 7E 7E 7E 
34f7a 421 7E 7E 00 00 
34f7e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
34f82 423 00 00 00 00 
34f86 424 00 00 00 00 
34f8a 425 00 00 00 00 
34f8e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f90 427             | 'vga_font       file "vgafont.def"
34f90 427 00 00 00 00 
      ...             
34fc0 433 00 00 00 00 
34fc4 434 00 00 00    | st_font        file "st4font.def"
34fc7 434 FF FF 00 00 
34fcb 435 00 00 00 00 
34fcf 436 00 18 18 18 
34fd3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
34fd7 438 18 18 18 18 
34fdb 439 18 18 18 18 
34fdf 43a 18          | 	byte	$18[9]
34fe0 43b 00 00 00 00 
34fe4 43c 00 00 00    | 	byte	$00[7]
34fe7 43c FF FF 18 18 
34feb 43d 18 18 18 18 
34fef 43e 18 18 18 18 
34ff3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34ff7 440 FF FF 00 00 
34ffb 441 00 00 00 00 
34fff 442 00 18 18 18 
35003 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35007 444 1F 1F 18 18 
3500b 445 18 18 18 18 
3500f 446 18 18 18 18 
35013 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35017 448 F8 F8 18 18 
3501b 449 18 18 18 18 
3501f 44a 18 00 00 00 
35023 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35027 44c 1F 1F 18 18 
3502b 44d 18 18 18 18 
3502f 44e 18 00 00 00 
35033 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35037 450 F8 F8 18 18 
3503b 451 18 18 18 18 
3503f 452 18 18 18 18 
35043 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35047 454 1F 1F 00 00 
3504b 455 00 00 00 00 
3504f 456 00 18 18 18 
35053 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35057 458 F8 F8 00 00 
3505b 459 00 00 00 00 
3505f 45a 00 18 18 18 
35063 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35067 45c FF FF 18 18 
3506b 45d 18 18 18 18 
3506f 45e 18 00 00 18 
35073 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35077 460 66 7E 7E 66 
3507b 461 66 66 66 30 
3507f 462 18 00 00 7E 
35083 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
35087 464 3E 06 06 06 
3508b 465 06 7E 7E 18 
3508f 466 0C 30 18 3C 
35093 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
35097 468 06 06 06 66 
3509b 469 66 7E 3C 00 
3509f 46a 00 30 18 66 
350a3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
350a7 46c 7E 7E 76 76 
350ab 46d 66 66 66 00 
350af 46e 00 30 18 7C 
350b3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
350b7 470 1C 38 70 60 
350bb 471 60 7E 3E 00 
350bf 472 00 30 18 7E 
350c3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
350c7 474 18 0C 0C 06 
350cb 475 06 7E 7E 00 
350cf 476 00 18 18 00 
350d3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
350d7 478 18 18 0C 0C 
350db 479 06 7E 7E 00 
350df 47a 00 30 18 3C 
350e3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
350e7 47c 66 66 66 66 
350eb 47d 66          | 	byte	$66[5]
350ec 47e 7E 3C 00 00 
350f0 47f 00 00 06 06 
350f4 480 06 06 16 1E 
350f8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
350fc 482 7E 7E 00 00 
35100 483 00 00 00 00 
35104 484 00 3C 7C 60 
35108 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3510c 486 7E 7C 30 18 
35110 487 00 00 00 00 
35114 488 00 3C 7E 66 
35118 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3511c 48a 7E 7C 18 0C 
35120 48b 00 00 30 18 
35124 48c 00 3C 3E 06 
35128 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3512c 48e 7E 7C 00 00 
35130 48f 00 00 30 18 
35134 490 00 3E 7E 66 
35138 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3513c 492 66 66 00 00 
35140 493 00 00 30 18 
35144 494 00 7C 7E 06 
35148 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3514c 496 7E 3E 00 00 
35150 497 00 00 30 18 
35154 498 00 7E 7E 30 
35158 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3515c 49a 7E 7E 00 00 
35160 49b 00 00 18 18 
35164 49c 00 7E 7E 30 
35168 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3516c 49e 7E 7E 00 00 
35170 49f 00 00 30 18 
35174 4a0 00 3C 7E 66 
35178 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3517c 4a2 7E 3C 00 00 
35180 4a3 00 00 1C 1C 
35184 4a4 18 18 38 3C 
35188 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3518c 4a6 3C 3C 00 00 
35190 4a7 00 00 00 00 
35194 4a8 00 00 00 00 
35198 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3519c 4aa 00 00 00 00 
351a0 4ab 00 00       | 	byte	$00[6]
351a2 4ab 18 18 18 18 
351a6 4ac 18 18 18 18 | 	byte	$18[8]
351aa 4ad 00 00 18 18 
351ae 4ae 00 00 00 00 
351b2 4af 66 66 66 66 
351b6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
351ba 4b1 00 00 00 00 
351be 4b2 00 00 00 00 
351c2 4b3 00          | 	byte	$00[9]
351c3 4b3 66 66 FF FF 
351c7 4b4 66 66 FF FF 
351cb 4b5 66 66 00 00 
351cf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
351d3 4b7 7C 7E 06 06 
351d7 4b8 3E 7C 60 60 
351db 4b9 7E 3E 18 18 
351df 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
351e3 4bb 66 30 30 18 
351e7 4bc 18 0C 0C 66 
351eb 4bd 66 00 00 00 
351ef 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
351f3 4bf 66 66 3C 1C 
351f7 4c0 1C FC FE 66 
351fb 4c1 66 FE FC 00 
351ff 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35203 4c3 18 18 18 18 
35207 4c4 00 00 00 00 
3520b 4c5 00 00 00 00 
3520f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35213 4c7 18 1C 0C 0C 
35217 4c8 0C 0C 0C 0C 
3521b 4c9 1C 18 30 00 
3521f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
35223 4cb 18 38 30 30 
35227 4cc 30 30 30 30 
3522b 4cd 38 18 0C 00 
3522f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
35233 4cf 66 66 3C 3C 
35237 4d0 FF FF 3C 3C 
3523b 4d1 66 66 00 00 
3523f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
35243 4d3 00 18 18 18 
35247 4d4 7E 7E 18 18 
3524b 4d5 18 00 00 00 
3524f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35253 4d7 00 00 00 00 
35257 4d8 00 00       | 	byte	$00[6]
35259 4d9 18 18 18 18 
3525d 4da 18          | 	byte	$18[5]
3525e 4da 0C 04 00 00 
35262 4db 00 00 00 00 
35266 4dc 7E 7E 00 00 
3526a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3526e 4de 00 00 00 00 
35272 4df 00 00 00 00 
35276 4e0 00 00 00 00 
3527a 4e1 00          | 	byte	$00[13]
3527b 4e1 18 18 18 00 
3527f 4e2 00 00 00 60 
35283 4e3 60 60 30 30 
35287 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3528b 4e5 06 06 06 00 
3528f 4e6 00 00 00 3C 
35293 4e7 7E 66 66 66 
35297 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3529b 4e9 66 7E 3C 00 
3529f 4ea 00 00 00 18 
352a3 4eb 18 1C 1C 18 
352a7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
352ab 4ed 18 7E 7E 00 
352af 4ee 00 00 00 3C 
352b3 4ef 7E 66 66 30 
352b7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
352bb 4f1 0C 7E 7E 00 
352bf 4f2 00 00 00 7E 
352c3 4f3 7E 30 30 18 
352c7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
352cb 4f5 66 7E 3C 00 
352cf 4f6 00 00 00 30 
352d3 4f7 30 38 38 3C 
352d7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
352db 4f9 7E 30 30 00 
352df 4fa 00 00 00 7E 
352e3 4fb 7E 06 06 3E 
352e7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
352eb 4fd 66 7E 3C 00 
352ef 4fe 00 00 00 38 
352f3 4ff 3C 0E 06 06 
352f7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
352fb 501 66 7E 3C 00 
352ff 502 00 00 00 7E 
35303 503 7E 60 60 30 
35307 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3530b 505 0C 0C 0C 00 
3530f 506 00 00 00 3C 
35313 507 7E 66 66 3C 
35317 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3531b 509 66 7E 3C 00 
3531f 50a 00 00 00 3C 
35323 50b 7E 66 66 7E 
35327 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3532b 50d 70 3C 1C 00 
3532f 50e 00 00 00 00 
35333 50f 00 00 18 18 
35337 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3533b 511 18 18 18 00 
3533f 512 00 00 00 00 
35343 513 00 00 18 18 
35347 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3534b 515 18 18 18 0C 
3534f 516 04 00 00 00 
35353 517 70 38 1C 0E 
35357 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3535b 519 70 00 00 00 
3535f 51a 00 00 00 00 
35363 51b 00 00 7E 7E 
35367 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3536b 51d 00 00 00 00 
3536f 51e 00 00 00 00 | 	byte	$00[8]
35373 51f 0E 1C 38 70 
35377 520 E0 70 38 1C 
3537b 521 0E 00 00 00 
3537f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35383 523 7E 66 66 30 
35387 524 30 18 18 18 
3538b 525 00 18 18 00 
3538f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35393 527 7E 66 66 66 
35397 528 66 36 06 66 
3539b 529 66 7E 3C 00 
3539f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
353a3 52b 3C 7E 66 66 
353a7 52c 66 7E 7E 66 
353ab 52d 66 66 66 00 
353af 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
353b3 52f 7E 66 66 7E 
353b7 530 3E 66 66 66 
353bb 531 66 7E 3E 00 
353bf 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
353c3 533 7E 66 66 06 
353c7 534 06 06 06 66 
353cb 535 66 7E 3C 00 
353cf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
353d3 537 7E 66 66 66 
353d7 538 66 66 66 66 
353db 539 66 7E 3E 00 
353df 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
353e3 53b 7E 06 06 3E 
353e7 53c 3E 06 06 06 
353eb 53d 06 7E 7E 00 
353ef 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
353f3 53f 7E 06 06 3E 
353f7 540 3E 06 06 06 
353fb 541 06 06 06 00 
353ff 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35403 543 7E 06 06 76 
35407 544 76 66 66 66 
3540b 545 66 7E 3C 00 
3540f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35413 547 66 66 66 7E 
35417 548 7E 66 66 66 
3541b 549 66 66 66 00 
3541f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
35423 54b 7E 18 18 18 
35427 54c 18 18 18 18 
3542b 54d 18 7E 7E 00 
3542f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
35433 54f 60 60 60 60 
35437 550 60 60 60    | 	byte	$60[7]
3543a 551 66 66 7E 3C 
3543e 552 00 00 00 00 
35442 553 66 66 36 36 
35446 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3544a 555 66 66 C6 C6 
3544e 556 00 00 00 00 
35452 557 06 06 06 06 
35456 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3545a 559 06 06 7E 7E 
3545e 55a 00 00 00 00 
35462 55b C6 C6 EE EE 
35466 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3546a 55d C6 C6 C6 C6 
3546e 55e 00 00 00 00 
35472 55f 66 66 66 6E 
35476 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3547a 561 76 66 66 66 
3547e 562 00 00 00 00 
35482 563 3C 7E 66 66 
35486 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3548a 565 66 66 7E 3C 
3548e 566 00 00 00 00 
35492 567 3E 7E 66 66 
35496 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3549a 569 06 06 06 06 
3549e 56a 00 00 00 00 
354a2 56b 3C 7E 66 66 
354a6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
354aa 56d 66 56 3E 6C 
354ae 56e 00 00 00 00 
354b2 56f 3E 7E 66 66 
354b6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
354ba 571 66 66 C6 C6 
354be 572 00 00 00 00 
354c2 573 7C 7E 06 06 
354c6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
354ca 575 60 60 7E 3E 
354ce 576 00 00 00 00 
354d2 577 7E 7E 18 18 
354d6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
354da 579 18 18 18 18 
354de 57a 00 00 00 00 
354e2 57b 66 66 66 66 
354e6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
354ea 57d 66 66 7E 3C 
354ee 57e 00 00 00 00 
354f2 57f 66 66 66 66 
354f6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
354fa 581 3C 3C 18 18 
354fe 582 00 00 00 00 
35502 583 C6 C6 C6 C6 
35506 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3550a 585 FE EE C6 82 
3550e 586 00 00 00 00 
35512 587 66 66 66 3C 
35516 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3551a 589 3C 66 66 66 
3551e 58a 00 00 00 00 
35522 58b 66 66 66 66 
35526 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3552a 58d 18 18 18 18 
3552e 58e 00 00 00 00 
35532 58f 7E 7E 30 30 
35536 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3553a 591 06 06 7E 7E 
3553e 592 00 00 00 00 
35542 593 3C 3C 0C 0C 
35546 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3554a 595 0C 0C 3C 3C 
3554e 596 00 00 00 00 
35552 597 06 06 0C 0C 
35556 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3555a 599 60 60 C0 C0 
3555e 59a 00 00 00 00 
35562 59b 3C 3C 30 30 
35566 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3556a 59d 30 30 3C 3C 
3556e 59e 00 00 00 00 
35572 59f 18 18 3C 3C 
35576 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3557a 5a1 00 00 00 00 
3557e 5a2 00 00 00 00 
35582 5a3 00 00 00 00 
35586 5a4 00 00 00 00 
3558a 5a5 00 00       | 	byte	$00[18]
3558c 5a6 FE FE 00 00 
35590 5a7 00 00 0C 0C 
35594 5a8 18 18 00 00 
35598 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3559c 5aa 00 00 00 00 
355a0 5ab 00 00 00 00 
355a4 5ac 00          | 	byte	$00[9]
355a5 5ac 3C 7C 60 7C 
355a9 5ad 7E 66 66 7E 
355ad 5ae 7C 00 00 00 
355b1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
355b5 5b0 3E 7E 66 66 
355b9 5b1 66 66 66 7E 
355bd 5b2 3E 00 00 00 
355c1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
355c5 5b4 3C 3E 06 06 
355c9 5b5 06 06 06 7E 
355cd 5b6 7C 00 00 00 
355d1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
355d5 5b8 7C 7E 66 66 
355d9 5b9 66 66 66 7E 
355dd 5ba 7C 00 00 00 
355e1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
355e5 5bc 3C 7E 66 66 
355e9 5bd 7E 06 06 7E 
355ed 5be 7C 00 00 00 
355f1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
355f5 5c0 18 7E 7E 18 
355f9 5c1 18 18 18 18 
355fd 5c2 18 00 00 00 
35601 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35605 5c4 7C 7E 66 66 
35609 5c5 66 66 7E 7C 
3560d 5c6 60 7E 3E 00 
35611 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35615 5c8 3E 7E 66 66 
35619 5c9 66 66 66 66 
3561d 5ca 66 00 00 00 
35621 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35625 5cc 1C 1C 18 18 
35629 5cd 18 18 18 3C 
3562d 5ce 3C 00 00 00 
35631 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35635 5d0 30 30 30 30 
35639 5d1 30 30 30 30 
3563d 5d2 30          | 	byte	$30[9]
3563e 5d2 3E 1E 00 00 
35642 5d3 06 06 06 36 
35646 5d4 36 1E 1E 1E 
3564a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3564e 5d6 00 00 00 00 
35652 5d7 1C 1C 18 18 
35656 5d8 18 18 18 18 
3565a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3565e 5da 00 00 00 00 
35662 5db 00 00 00    | 	byte	$00[7]
35665 5dc 6C FE FE D6 
35669 5dd D6 C6 C6 C6 
3566d 5de C6 00 00 00 
35671 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35675 5e0 3E 7E 66 66 
35679 5e1 66 66 66 66 
3567d 5e2 66 00 00 00 
35681 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35685 5e4 3C 7E 66 66 
35689 5e5 66 66 66 7E 
3568d 5e6 3C 00 00 00 
35691 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35695 5e8 3E 7E 66 66 
35699 5e9 66 66 66 7E 
3569d 5ea 3E 06 06 00 
356a1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
356a5 5ec 7C 7E 66 66 
356a9 5ed 66 66 66 7E 
356ad 5ee 7C 60 60 00 
356b1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
356b5 5f0 3E 7E 66 06 
356b9 5f1 06 06 06 06 
356bd 5f2 06 00 00 00 
356c1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
356c5 5f4 7C 7E 06 0E 
356c9 5f5 3C 70 60 7E 
356cd 5f6 3E 00 00 00 
356d1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
356d5 5f8 7E 7E 18 18 
356d9 5f9 18 18 18 78 
356dd 5fa 70 00 00 00 
356e1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
356e5 5fc 66 66 66 66 
356e9 5fd 66 66 66    | 	byte	$66[7]
356ec 5fe 7E 7C 00 00 
356f0 5ff 00 00 00 00 
356f4 600 00 66 66 66 
356f8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
356fc 602 18 18 00 00 
35700 603 00 00 00 00 
35704 604 00 C6 C6 D6 
35708 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3570c 606 C6 82 00 00 
35710 607 00 00 00 00 
35714 608 00 66 66 3C 
35718 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3571c 60a 66 66 00 00 
35720 60b 00 00 00 00 
35724 60c 00 66 66 66 
35728 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3572c 60e 7C 60 7E 3E 
35730 60f 00 00 00 00 
35734 610 00 7E 7E 30 
35738 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3573c 612 7E 7E 00 00 
35740 613 00 00 30 18 
35744 614 18 18 18 0C 
35748 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3574c 616 18 30 00 00 
35750 617 00 00 18 18 
35754 618 18 18 18 18 
35758 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3575c 61a 18 18 00 00 
35760 61b 00 00 0C 18 
35764 61c 18 18 18 30 
35768 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3576c 61e 18 0C 00 00 
35770 61f 00 00 6C 7E 
35774 620 36 00 00 00 
35778 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3577c 622 00 00 00 00 
35780 623 00 00 00 00 
35784 624 00          | 	byte	$00[9]
35785 624 18 18 18 18 
35789 625 18 18 00 00 
3578d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35790 627             | 'amiga_font     file "amigafont.def"
35790 627 00 6C FE FE 
35794 628 7C 38 10 00 
35798 629 18 18 18 F8 
3579c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
357a0 62b C0 C0 C0 C0 
357a4 62c C0 C0 C0 C0 | 	byte	$c0[8]
357a8 62d 18 18 18 1F 
357ac 62e 1F 00 00 00 
357b0 62f 18 18 18 1F 
357b4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
357b8 631 00 00 00 1F 
357bc 632 1F 18 18 18 
357c0 633 C0 E0 70 38 
357c4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
357c8 635 03 07 0E 1C 
357cc 636 38 70 E0 C0 
357d0 637 80 C0 E0 F0 
357d4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
357d8 639 00 00 00 00 
357dc 63a F0 F0 F0 F0 
357e0 63b 01 03 07 0F 
357e4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
357e8 63d F0 F0 F0 F0 
357ec 63e 00 00 00 00 
357f0 63f 0F 0F 0F 0F 
357f4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
357f8 641 FF FF 00 00 
357fc 642 00 00 00 00 
35800 643 00 00 00 00 
35804 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35808 645 00 00 00 00 
3580c 646 0F 0F 0F 0F 
35810 647 00 38 38 EE 
35814 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35818 649 00 00 00 F8 
3581c 64a F8 18 18 18 
35820 64b 00 00 00 FF 
35824 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35828 64d 18 18 18 FF 
3582c 64e FF 18 18 18 
35830 64f 00 00 3C 7E 
35834 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35838 651 00 00 00 00 
3583c 652 FF FF FF FF 
35840 653 03 03 03 03 
35844 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35848 655 00 00 00 FF 
3584c 656 FF 18 18 18 
35850 657 18 18 18 FF 
35854 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35858 659 0F 0F 0F 0F 
3585c 65a 0F 0F 0F 0F | 	byte	$0f[8]
35860 65b 18 18 18 F8 
35864 65c F8 00 00 00 
35868 65d 1E 06 1E 06 
3586c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35870 65f 00 18 3C 7E 
35874 660 18 18 18 00 
35878 661 00 18 18 18 
3587c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35880 663 00 18 0C 7E 
35884 664 0C 18 00 00 
35888 665 00 18 30 7E 
3588c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35890 667 00 00 00 00 
35894 668 00 00 00 00 
35898 669 00          | 	byte	$00[9]
35899 669 18 18 18 18 
3589d 66a 00 18 00 00 
358a1 66b 66 66 66 00 
358a5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
358a9 66d 66 FF 66 66 
358ad 66e FF 66 00 18 
358b1 66f 7C 06 3C 60 
358b5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
358b9 671 66 36 18 0C 
358bd 672 66 62 00 38 
358c1 673 6C 38 1C F6 
358c5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
358c9 675 18 18 18 00 
358cd 676 00 00 00 00 
358d1 677 70 38 18 18 
358d5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
358d9 679 0E 1C 18 18 
358dd 67a 1C 0E 00 00 
358e1 67b 66 3C FF 3C 
358e5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
358e9 67d 18 18 7E 18 
358ed 67e 18 00 00 00 
358f1 67f 00 00 00 00 
358f5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
358f9 681 00 00 7E 00 
358fd 682 00 00 00 00 
35901 683 00 00 00 00 
35905 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35909 685 60 30 18 0C 
3590d 686 06 02 00 00 
35911 687 3C 66 76 6E 
35915 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35919 689 18 1C 18 18 
3591d 68a 18 7E 00 00 
35921 68b 3C 66 30 18 
35925 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35929 68d 7E 30 18 30 
3592d 68e 66 3C 00 00 
35931 68f 30 38 3C 36 
35935 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35939 691 7E 06 3E 60 
3593d 692 66 3C 00 00 
35941 693 3C 06 3E 66 
35945 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35949 695 7E 60 30 18 
3594d 696 0C 0C 00 00 
35951 697 3C 66 3C 66 
35955 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35959 699 3C 66 7C 60 
3595d 69a 30 1C 00 00 
35961 69b 00 18 18 00 
35965 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35969 69d 00 18 18 00 
3596d 69e 18 18 0C 60 
35971 69f 30 18 0C 18 
35975 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35979 6a1 00 7E 00 00 
3597d 6a2 7E 00 00 06 
35981 6a3 0C 18 30 18 
35985 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35989 6a5 3C 66 30 18 
3598d 6a6 00 18 00 00 
35991 6a7 3C 66 76 76 
35995 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35999 6a9 18 3C 66 66 
3599d 6aa 7E 66 00 00 
359a1 6ab 3E 66 3E 66 
359a5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
359a9 6ad 3C 66 06 06 
359ad 6ae 66 3C 00 00 
359b1 6af 1E 36 66 66 
359b5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
359b9 6b1 7E 06 3E 06 
359bd 6b2 06 7E 00 00 
359c1 6b3 7E 06 3E 06 
359c5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
359c9 6b5 7C 06 06 76 
359cd 6b6 66 7C 00 00 
359d1 6b7 66 66 7E 66 
359d5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
359d9 6b9 7E 18 18 18 
359dd 6ba 18 7E 00 00 
359e1 6bb 60 60 60 60 
359e5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
359e9 6bd 66 36 1E 1E 
359ed 6be 36 66 00 00 
359f1 6bf 06 06 06 06 
359f5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
359f9 6c1 C6 EE FE D6 
359fd 6c2 C6 C6 00 00 
35a01 6c3 66 6E 7E 7E 
35a05 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35a09 6c5 3C 66 66 66 
35a0d 6c6 66 3C 00 00 
35a11 6c7 3E 66 66 3E 
35a15 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35a19 6c9 3C 66 66 66 
35a1d 6ca 36 6C 00 00 
35a21 6cb 3E 66 66 3E 
35a25 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35a29 6cd 3C 06 3C 60 
35a2d 6ce 60 3C 00 00 
35a31 6cf 7E 18 18 18 
35a35 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35a39 6d1 66 66 66 66 
35a3d 6d2 66          | 	byte	$66[5]
35a3e 6d2 7E 00 00 66 
35a42 6d3 66 66 66 3C 
35a46 6d4 18 00 00 C6 
35a4a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35a4e 6d6 C6 00 00 66 
35a52 6d7 66 3C 3C 66 
35a56 6d8 66 00 00 66 
35a5a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35a5e 6da 18 00 00 7E 
35a62 6db 30 18 0C 06 
35a66 6dc 7E 00 00 78 
35a6a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35a6e 6de 78 00 00 02 
35a72 6df 06 0C 18 30 
35a76 6e0 60 00 00 1E 
35a7a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35a7e 6e2 1E 00 00 10 
35a82 6e3 38 6C C6 00 
35a86 6e4 00 00 00 00 
35a8a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35a8e 6e6 FF 00 00 18 
35a92 6e7 3C 7E 7E 3C 
35a96 6e8 18 00 00 00 
35a9a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35a9e 6ea 7C 00 00 06 
35aa2 6eb 06 3E 66 66 
35aa6 6ec 3E 00 00 00 
35aaa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35aae 6ee 3C 00 00 60 
35ab2 6ef 60 7C 66 66 
35ab6 6f0 7C 00 00 00 
35aba 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35abe 6f2 3C 00 00 70 
35ac2 6f3 18 7C 18 18 
35ac6 6f4 18 00 00 00 
35aca 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35ace 6f6 60 3E 00 06 
35ad2 6f7 06 3E 66 66 
35ad6 6f8 66 00 00 18 
35ada 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35ade 6fa 3C 00 00 60 
35ae2 6fb 00 60 60 60 
35ae6 6fc 60 3C 00 06 
35aea 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35aee 6fe 66 00 00 1C 
35af2 6ff 18 18 18 18 
35af6 700 3C 00 00 00 
35afa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35afe 702 C6 00 00 00 
35b02 703 3E 66 66 66 
35b06 704 66 00 00 00 
35b0a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35b0e 706 3C 00 00 00 
35b12 707 3E 66 66 3E 
35b16 708 06 06 00 00 
35b1a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35b1e 70a 60 60 00 00 
35b22 70b 3E 66 06 06 
35b26 70c 06 00 00 00 
35b2a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35b2e 70e 3E 00 00 18 
35b32 70f 7E 18 18 18 
35b36 710 70 00 00 00 
35b3a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35b3e 712 7C 00 00 00 
35b42 713 66 66 66 3C 
35b46 714 18 00 00 00 
35b4a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35b4e 716 6C 00 00 00 
35b52 717 66 3C 18 3C 
35b56 718 66 00 00 00 
35b5a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35b5e 71a 30 1E 00 00 
35b62 71b 7E 30 18 0C 
35b66 71c 7E 00 00 18 
35b6a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35b6e 71e 3C 00 18 18 
35b72 71f 18 18 18 18 
35b76 720 18 18 00 7E 
35b7a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35b7e 722 60 00 10 18 
35b82 723 1C 1E 1C 18 
35b86 724 10 00 08 18 
35b8a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35b8e 726 08 00       | 	byte	$08, $00
35b90 727 00 00 00 00 
35b94 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35b95 728 80 00 00 00 
35b99 729 00 80 00 00 
35b9d 72a 80 80 00 00 
35ba1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35ba5 72c 80 00 80 00 
35ba9 72d 00 40 80 00 
35bad 72e AA AA AA 00 
35bb1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35bb5 730 FF 00 00 00 
35bb9 731 00 FF 00 00 
35bbd 732 FF FF 00 00 
35bc1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35bc5 734 FF 00 FF 00 
35bc9 735 00 FF FF 00 
35bcd 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35bd0 737 00 00 00 00 
35bd4 738 00          | ataripalette   file "ataripalettep2.def"
35bd5 738 11 11 11 00 
35bd9 739 22 22 22 00 
35bdd 73a 33 33 33 00 
35be1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35be5 73c 55 55 55 00 
35be9 73d 66 66 66 00 
35bed 73e 77 77 77 00 
35bf1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35bf5 740 99 99 99 00 
35bf9 741 AA AA AA 00 
35bfd 742 BB BB BB 00 
35c01 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35c05 744 DD DD DD 00 
35c09 745 EE EE EE 00 
35c0d 746 FF FF FF 00 
35c11 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35c15 748 00 14 40 00 
35c19 749 00 1E 60 00 
35c1d 74a 00 28 80 00 
35c21 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35c25 74c 00 3C BF 00 
35c29 74d 00 46 DF 00 
35c2d 74e 00 50 FF 00 
35c31 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35c35 750 39 77 FF 00 
35c39 751 55 8A FF 00 
35c3d 752 71 9E FF 00 
35c41 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35c45 754 AA C5 FF 00 
35c49 755 C6 D8 FF 00 
35c4d 756 E3 EC FF 00 
35c51 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35c55 758 00 00 40 00 
35c59 759 00 00 60 00 
35c5d 75a 00 00 80 00 
35c61 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35c65 75c 00 00 BF 00 
35c69 75d 00 00 DF 00 
35c6d 75e 00 00 FF 00 
35c71 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35c75 760 39 39 FF 00 
35c79 761 55 55 FF 00 
35c7d 762 71 71 FF 00 
35c81 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35c85 764 AA AA FF 00 
35c89 765 C6 C6 FF 00 
35c8d 766 E3 E3 FF 00 
35c91 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35c95 768 20 00 40 00 
35c99 769 30 00 60 00 
35c9d 76a 40 00 80 00 
35ca1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35ca5 76c 60 00 BF 00 
35ca9 76d 70 00 DF 00 
35cad 76e 80 00 FF 00 
35cb1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35cb5 770 9C 39 FF 00 
35cb9 771 AA 55 FF 00 
35cbd 772 B8 71 FF 00 
35cc1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35cc5 774 D5 AA FF 00 
35cc9 775 E3 C6 FF 00 
35ccd 776 F1 E3 FF 00 
35cd1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35cd5 778 40 00 40 00 
35cd9 779 60 00 60 00 
35cdd 77a 80 00 80 00 
35ce1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35ce5 77c BF 00 BF 00 
35ce9 77d DF 00 DF 00 
35ced 77e FF 00 FF 00 
35cf1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35cf5 780 FF 39 FF 00 
35cf9 781 FF 55 FF 00 
35cfd 782 FF 71 FF 00 
35d01 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35d05 784 FF AA FF 00 
35d09 785 FF C6 FF 00 
35d0d 786 FF E3 FF 00 
35d11 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35d15 788 40 00 20 00 
35d19 789 60 00 30 00 
35d1d 78a 80 00 40 00 
35d21 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35d25 78c BF 00 60 00 
35d29 78d DF 00 70 00 
35d2d 78e FF 00 80 00 
35d31 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35d35 790 FF 39 9C 00 
35d39 791 FF 55 AA 00 
35d3d 792 FF 71 B8 00 
35d41 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35d45 794 FF AA D5 00 
35d49 795 FF C6 E3 00 
35d4d 796 FF E3 F1 00 
35d51 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35d55 798 40 00 00 00 
35d59 799 60 00 00 00 
35d5d 79a 80 00 00 00 
35d61 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35d65 79c BF 00 00 00 
35d69 79d DF 00 00 00 
35d6d 79e FF 00 00 00 
35d71 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35d75 7a0 FF 39 39 00 
35d79 7a1 FF 55 55 00 
35d7d 7a2 FF 71 71 00 
35d81 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35d85 7a4 FF AA AA 00 
35d89 7a5 FF C6 C6 00 
35d8d 7a6 FF E3 E3 00 
35d91 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
35d95 7a8 40 10 00 00 
35d99 7a9 60 18 00 00 
35d9d 7aa 80 20 00 00 
35da1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
35da5 7ac BF 30 00 00 
35da9 7ad DF 38 00 00 
35dad 7ae FF 40 00 00 
35db1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
35db5 7b0 FF 6A 39 00 
35db9 7b1 FF 80 55 00 
35dbd 7b2 FF 95 71 00 
35dc1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
35dc5 7b4 FF BF AA 00 
35dc9 7b5 FF D5 C6 00 
35dcd 7b6 FF EA E3 00 
35dd1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
35dd5 7b8 40 20 00 00 
35dd9 7b9 60 30 00 00 
35ddd 7ba 80 40 00 00 
35de1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
35de5 7bc BF 60 00 00 
35de9 7bd DF 70 00 00 
35ded 7be FF 80 00 00 
35df1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
35df5 7c0 FF 9C 39 00 
35df9 7c1 FF AA 55 00 
35dfd 7c2 FF B8 71 00 
35e01 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
35e05 7c4 FF D5 AA 00 
35e09 7c5 FF E3 C6 00 
35e0d 7c6 FF F1 E3 00 
35e11 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
35e15 7c8 40 30 00 00 
35e19 7c9 60 48 00 00 
35e1d 7ca 80 60 00 00 
35e21 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
35e25 7cc BF 90 00 00 
35e29 7cd DF A8 00 00 
35e2d 7ce FF C0 00 00 
35e31 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
35e35 7d0 FF CE 39 00 
35e39 7d1 FF D5 55 00 
35e3d 7d2 FF DC 71 00 
35e41 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
35e45 7d4 FF EA AA 00 
35e49 7d5 FF F1 C6 00 
35e4d 7d6 FF F8 E3 00 
35e51 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
35e55 7d8 30 40 00 00 
35e59 7d9 48 60 00 00 
35e5d 7da 60 80 00 00 
35e61 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
35e65 7dc 90 BF 00 00 
35e69 7dd A8 DF 00 00 
35e6d 7de C0 FF 00 00 
35e71 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
35e75 7e0 CE FF 39 00 
35e79 7e1 D5 FF 55 00 
35e7d 7e2 DC FF 71 00 
35e81 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
35e85 7e4 EA FF AA 00 
35e89 7e5 F1 FF C6 00 
35e8d 7e6 F8 FF E3 00 
35e91 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
35e95 7e8 00 40 00 00 
35e99 7e9 00 60 00 00 
35e9d 7ea 00 80 00 00 
35ea1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
35ea5 7ec 00 BF 00 00 
35ea9 7ed 00 DF 00 00 
35ead 7ee 00 FF 00 00 
35eb1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
35eb5 7f0 39 FF 39 00 
35eb9 7f1 55 FF 55 00 
35ebd 7f2 71 FF 71 00 
35ec1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
35ec5 7f4 AA FF AA 00 
35ec9 7f5 C6 FF C6 00 
35ecd 7f6 E3 FF E3 00 
35ed1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
35ed5 7f8 00 40 14 00 
35ed9 7f9 00 60 1E 00 
35edd 7fa 00 80 28 00 
35ee1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
35ee5 7fc 00 BF 3C 00 
35ee9 7fd 00 DF 46 00 
35eed 7fe 00 FF 50 00 
35ef1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
35ef5 800 39 FF 77 00 
35ef9 801 55 FF 8A 00 
35efd 802 71 FF 9E 00 
35f01 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
35f05 804 AA FF C5 00 
35f09 805 C6 FF D8 00 
35f0d 806 E3 FF EC 00 
35f11 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
35f15 808 00 40 28 00 
35f19 809 00 60 3C 00 
35f1d 80a 00 80 50 00 
35f21 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
35f25 80c 00 BF 78 00 
35f29 80d 00 DF 8C 00 
35f2d 80e 00 FF A0 00 
35f31 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
35f35 810 39 FF B5 00 
35f39 811 55 FF C0 00 
35f3d 812 71 FF CA 00 
35f41 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
35f45 814 AA FF DF 00 
35f49 815 C6 FF EA 00 
35f4d 816 E3 FF F4 00 
35f51 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
35f55 818 00 40 40 00 
35f59 819 00 60 60 00 
35f5d 81a 00 80 80 00 
35f61 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
35f65 81c 00 BF BF 00 
35f69 81d 00 DF DF 00 
35f6d 81e 00 FF FF 00 
35f71 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
35f75 820 39 FF FF 00 
35f79 821 55 FF FF 00 
35f7d 822 71 FF FF 00 
35f81 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
35f85 824 AA FF FF 00 
35f89 825 C6 FF FF 00 
35f8d 826 E3 FF FF 00 
35f91 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
35f95 828 00 28 40 00 
35f99 829 00 3C 60 00 
35f9d 82a 00 50 80 00 
35fa1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
35fa5 82c 00 78 BF 00 
35fa9 82d 00 8C DF 00 
35fad 82e 00 A0 FF 00 
35fb1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
35fb5 830 39 B5 FF 00 
35fb9 831 55 C0 FF 00 
35fbd 832 71 CA FF 00 
35fc1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
35fc5 834 AA DF FF 00 
35fc9 835 C6 EA FF 00 
35fcd 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
35fd0 837             | 
35fd0 837             | '**********************************************************************************
35fd0 837             | '
35fd0 837             | '        Timings and colors definitions
35fd0 837             | '
35fd0 837             | '**********************************************************************************
35fd0 837             | 
35fd0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
35fd0 837 08 00 00 00 
35fd4 838 3C 00 00 00 
35fd8 839 08 00 00 00 
35fdc 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
35fe0 83b 07 00 00 00 
35fe4 83c 04 00 00 00 
35fe8 83d 01 00 00 00 
35fec 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
35ff0 83f 58 02 00 00 
35ff4 840 20 9E 4B 14 
35ff8 841 FB A8 9E 01 
35ffc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36000 843 00 00 00 00 
36004 844 C0 00 00 00 
36008 845 00 00 00 00 
3600c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36010 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36010 847 00 75 C7 97 
36014 848 27 47 F6 0A 
36018 849 05 79 CB 9B 
3601c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
36020 84b             | 
36020 84b             | ''--------  Initialization  ----------------------------------------------------------------
36020 84b             | 
36020 84b 28 0C 64 FD | hdmi            setq    #6
36024 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
36028 84d 28 10 64 FD |                 setq    #8
3602c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36030 84f             | 
36030 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36034 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36038 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3603c 852 D6 C6 01 F1 |                 add     t1,hbase
36040 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36044 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36048 855 7B 0B 80 5F 
3604c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36050 857 66 66 86 FF 
36054 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36058 859             | '
36058 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3605c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36060 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36064 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36068 85d             | 
36068 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3606c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36070 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36074 860             | 
36074 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36074 860             | 
36074 860 28 06 64 FD | p101            setq 	#3
36078 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3607c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36080 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36084 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36088 865 00 A0 05 F6 |                 mov     dlinum, #0
3608c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36090 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36094 868             | 
36094 868             | 
36094 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36098 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3609c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
360a0 86b             |                 
360a0 86b             | 
360a0 86b             | 
360a0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
360a0 86b             |   
360a0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
360a4 86c 29 FE 65 3D |          if_nc  setq2   #255
360a8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
360ac 86e             | 
360ac 86e             | '' -----   up porch (before the picture)
360ac 86e             | 
360ac 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
360b0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
360b4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
360b8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
360bc 872             |  
360bc 872             |    
360bc 872             |  
360bc 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
360c0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
360c4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
360c8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
360cc 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
360d0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
360d4 878             | 
360d4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
360d8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
360dc 87a 48 00 B0 FD | 		call    #dli
360e0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
360e4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
360e8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
360ec 87e             |                 	
360ec 87e             |                 
360ec 87e             | 
360ec 87e             |  
360ec 87e             | '' ------- the main screen drawing starts here
360ec 87e             | 
360ec 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
360f0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
360f4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
360f8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
360fc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36100 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36104 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
36108 885             |               
36108 885             | 
36108 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3610c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36110 887             | 
36110 887             | ' ---------------- All visible lines displayed now, start vblank  
36110 887             | 
36110 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36114 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
36118 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3611c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
36120 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
36124 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
36128 88d             | 
36128 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
36128 88d             | 
36128 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
36128 88d             | 
36128 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3612c 88e             | 
3612c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
36130 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
36134 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
36138 891             | 
36138 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3613c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
36140 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
36144 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
36148 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3614c 896             | 
3614c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36150 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36154 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36158 899 70 00 90 AD |     if_z        jmp     #preload
3615c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36160 89b 94 00 90 AD |     if_z        jmp     #preload2
36164 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
36168 89d 0C 00 90 AD |     if_z        jmp     #p390
3616c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36170 89f 28 00 90 AD |     if_z        jmp     #p391  
36174 8a0             | 
36174 8a0 2D 00 64 FD | p308            ret
36178 8a1             |    
36178 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3617c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36180 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36184 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36188 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3618c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36190 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36194 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36198 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3619c 8aa             |  
3619c 8aa             | '' --------  Reload palette. To do 
3619c 8aa             | 
3619c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
361a0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
361a4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
361a8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
361ac 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
361b0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
361b4 8b0 70 FF 9F FD |         	jmp     #dli                
361b8 8b1             |       
361b8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
361b8 8b1             | 
361b8 8b1             | 
361b8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
361b8 8b1             | 
361b8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
361bc 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
361c0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
361c4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
361c8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
361cc 8b6             |         
361cc 8b6             | '' -------------- Preload a line from PSRAM        
361cc 8b6             |         
361cc 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
361d0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
361d4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
361d8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
361dc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
361e0 8bb             | 
361e0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
361e4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
361e8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
361ec 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
361f0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
361f4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
361f8 8c1             |  
361f8 8c1             |  
361f8 8c1             | preload2      '  incmod  dlinum,#3
361f8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
361fc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36200 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36204 8c4 28 02 64 FD |                 setq	#1
36208 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3620c 8c6             |                 
3620c 8c6             | 
3620c 8c6             | '' -------------- Draw sprites
3620c 8c6             | 
3620c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36210 8c7 10 5C 0E F5 | 		and t8,#16 wz
36214 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
36218 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3621c 8ca             | 		
3621c 8ca             | 
3621c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
36220 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
36224 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
36228 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3622c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
36230 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
36234 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
36238 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3623c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
36240 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
36244 8d4 01 52 86 F1 |                 sub     sprite_h,#1
36248 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3624c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36250 8d7             | 
36250 8d7             | 
36250 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36254 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36258 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3625c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36260 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
36264 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
36268 8dd 00 5E 06 F6 |                 mov 	t9,#0
3626c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36270 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36274 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36278 8e1             |      
36278 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3627c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36280 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36284 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36288 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3628c 8e6             |                 
3628c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36290 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36294 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36298 8e9             |   		
36298 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3629c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
362a0 8eb             | 
362a0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
362a4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
362a8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
362ac 8ee             |  
362ac 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
362b0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
362b4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
362b8 8f1             | 	
362b8 8f1             | 	
362b8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
362bc 8f2 28 CD 01 F1 | 		add	t4,sprite_w
362c0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
362c4 8f4             | 
362c4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
362c8 8f5             | 
362c8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
362cc 8f6 01 58 86 F1 | 	 	sub     t6,#1
362d0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
362d4 8f8             | 
362d4 8f8 28 58 62 FD |                 setq   	t6
362d8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
362dc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
362e0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
362e4 8fc 24 00 90 AD |         if_z    jmp #p898
362e8 8fd             |          
362e8 8fd             |         
362e8 8fd 70 5F 06 F6 |                 mov  t9,#368
362ec 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
362f0 8ff             | 
362f0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
362f4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
362f8 901 FF FF 7F FF 
362fc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36300 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36304 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
36308 905 2D 01 00 F5 |                 and 0-0, t7
3630c 906             |                
3630c 906             | 
3630c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36310 907 E5 E0 7A FA |                 wmlong 368,t3				
36314 908             |                 
36314 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
36318 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3631c 90a 2D 00 64 FD |                 ret
36320 90b             | 	
36320 90b             | 	
36320 90b             |                
36320 90b             |  
36320 90b             | '' -------------- Graphics line ------------------------------------------------------------
36320 90b             |  
36320 90b             | 
36320 90b             | '' consts and vars
36320 90b             | 
36320 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
36324 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
36328 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3632c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
36330 90f             | 
36330 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
36334 910             | 
36334 910             | '------ these longs will be set by setmode function
36334 910             | 
36334 910 00 00 00 00 | m_bs            long    0        'blanks before sync
36338 911 00 00 00 00 | m_sn            long    0        'sync
3633c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
36340 913 00 00 00 00 | m_vi            long    0        'visible pixels #
36344 914             | 'm_border        long    0        'left/right borders
36344 914 00 00 00 00 | i_upporch       long    0        'up porch lines
36348 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3634c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36350 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36354 918 00 00 00 00 | i_totalvis      long    0
36358 919             | 
36358 919             | '-------------------------------------
36358 919             |  
36358 919 00 00 00 00 | linenum         long    0
3635c 91a 00 00 00 00 | frames          long    0
36360 91b 00 00 00 00 | dlinum long 0
36364 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
36368 91d             | 
36368 91d 00 00 00 00 | vblankptr       long    0
3636c 91e 00 00 00 00 | modeptr         long    0
36370 91f 00 00 00 00 | paletteptr      long    0
36374 920 00 00 00 00 | dlptr           long    0
36378 921 01 00 00 00 | hbase           long    1
3637c 922 00 00 00 00 | mailbox         long    0
36380 923 00 00 00 00 | spriteptr          long 0
36384 924             | 
36384 924 00 00 00 00 | cmd             long    0
36388 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3638c 926 00 04 00 00 | buf2            long    1024
36390 927 01 00 00 00 | dlptr2          long    1
36394 928 01 00 00 00 | dl              long    1
36398 929             | 
36398 929 00 00 00 00 | buf1c long 0
3639c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
363a0 92b 01 00 00 00 | framebuf2       long    1
363a4 92c 01 00 00 00 | hsync0          long    1
363a8 92d 01 00 00 00 | hsync1          long    1
363ac 92e             | 
363ac 92e 01 00 00 00 | t1              long    1
363b0 92f 00 00 00 00 | t2 long 0
363b4 930 00 00 00 00 | t3 long 0
363b8 931 00 00 00 00 | t4 long 0
363bc 932             | 
363bc 932 00 00 00 00 | rcnt            long    0  'dl repeat count
363c0 933 00 00 00 00 | rcnt2           long    0
363c4 934 00 00 00 00 | rcnt2a          long    0
363c8 935 00 00 00 00 | roffset         long    0
363cc 936 00 00 00 00 | rdl             long    0  'dl repeat line
363d0 937 00 00 00 00 | dlc             long    0  'dl command
363d4 938             | 
363d4 938 FF FF FF FF | affffffff       long    $ffffffff
363d8 939 00 00 00 00 | sprite1pointer long 0
363dc 93a 00 00 00 00 | sprite1xy      long 0
363e0 93b 00 00 00 00 | sprite1wh      long 0
363e4 93c 00 00 00 00 | sprite2pointer long 0
363e8 93d 00 00 00 00 | sprite2xy      long 0
363ec 93e 00 00 00 00 | sprite2wh      long 0
363f0 93f 00 00 00 00 | sprite3pointer long 0
363f4 940 00 00 00 00 | sprite3xy      long 0
363f8 941 00 00 00 00 | sprite3wh      long 0
363fc 942 00 00 00 00 | sprite4pointer long 0
36400 943 00 00 00 00 | sprite4xy      long 0
36404 944 00 00 00 00 | sprite4wh      long 0
36408 945 00 00 00 00 | sprite5pointer long 0
3640c 946 00 00 00 00 | sprite5xy      long 0
36410 947 00 00 00 00 | sprite5wh      long 0
36414 948 00 00 00 00 | sprite6pointer long 0
36418 949 00 00 00 00 | sprite6xy      long 0
3641c 94a 00 00 00 00 | sprite6wh      long 0
36420 94b 00 00 00 00 | sprite7pointer long 0
36424 94c 00 00 00 00 | sprite7xy      long 0
36428 94d 00 00 00 00 | sprite7wh      long 0
3642c 94e 00 00 00 00 | sprite8pointer long 0
36430 94f 00 00 00 00 | sprite8xy      long 0
36434 950 00 00 00 00 | sprite8wh      long 0
36438 951 00 00 00 00 | sprite9pointer long 0
3643c 952 00 00 00 00 | sprite9xy      long 0
36440 953 00 00 00 00 | sprite9wh      long 0
36444 954 00 00 00 00 | sprite10pointer long 0
36448 955 00 00 00 00 | sprite10xy      long 0
3644c 956 00 00 00 00 | sprite10wh      long 0
36450 957 00 00 00 00 | sprite11pointer long 0
36454 958 00 00 00 00 | sprite11xy      long 0
36458 959 00 00 00 00 | sprite11wh      long 0
3645c 95a 00 00 00 00 | sprite12pointer long 0
36460 95b 00 00 00 00 | sprite12xy      long 0
36464 95c 00 00 00 00 | sprite12wh      long 0
36468 95d 00 00 00 00 | sprite13pointer long 0
3646c 95e 00 00 00 00 | sprite13xy      long 0
36470 95f 00 00 00 00 | sprite13wh      long 0
36474 960 00 00 00 00 | sprite14pointer long 0
36478 961 00 00 00 00 | sprite14xy      long 0
3647c 962 00 00 00 00 | sprite14wh      long 0
36480 963 00 00 00 00 | sprite15pointer long 0
36484 964 00 00 00 00 | sprite15xy      long 0
36488 965 00 00 00 00 | sprite15wh      long 0
3648c 966 00 00 00 00 | sprite16pointer long 0
36490 967 00 00 00 00 | sprite16xy      long 0
36494 968 00 00 00 00 | sprite16wh      long 0
36498 969 00 00 00 00 | sprite17pointer long 0
3649c 96a 00 00 00 00 | sprite17xy      long 0
364a0 96b 00 00 00 00 | sprite17wh      long 0
364a4 96c 00 00 00 00 | sprite18pointer long 0
364a8 96d 00 00 00 00 | sprite18xy      long 0
364ac 96e 00 00 00 00 | sprite18wh      long 0
364b0 96f 00 00 00 00 | spritenum long 0
364b4 970             | 
364b4 970 00 00 00 00 | spriteline long 0
364b8 971 84 03 00 00 | sprite_x long 900
364bc 972 00 00 00 00 | sprite_y long 0
364c0 973 10 00 00 00 | sprite_w long 16
364c4 974 40 00 00 00 | sprite_h long 64
364c8 975 00 00 00 00 | l2 long 0
364cc 976 00 00 00 00 | t5 long 0
364d0 977 00 00 00 00 | t6 long 0
364d4 978 00 00 00 00 | t7 long 0
364d8 979 00 00 00 00 | t8 long 0
364dc 97a 00 00 00 00 | t9 long 0
364e0 97b 00 00 00 00 | preloadaddr long 0
364e4 97c 00 00 00 00 | preloadlineaddr long 0
364e8 97d 00 04 00 00 | a1024 long 1024
364ec 97e             | 
364ec 97e E0 03 00 00 | aa long 992
364f0 97f FF 03 00 00 | a1023 long 1023
364f4 980 00 10 00 00 | a4096 long 4096
364f8 981             |  fit 368
364f8 981             | _psram_spin2_dat_
364f8 981 00 00 00 00 
      ...             
365f0 9bf 00 00 00 00 
365f4 9c0 00 00 00 00 |     listdata long 0[8*8]
365f8 9c1             |             orgh
365f8                 | 
365f8                 | ' driver state
365f8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
365fc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36600                 | 
36600                 | ' delay profile
36600     07 00 00 00 
36604     00 CF 7B 05 
36608     80 D1 F0 08 
3660c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36610     80 C4 60 0F 
36614     80 39 7A 12 
36618     40 2D D9 13 
3661c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36620                 | 
36620                 | ' data to be passed to driver when starting it
36620                 | startupData
36620     00 00 00 00 |     long    0           ' current frequency
36624     00 00 00 00 |     long    FLAGS       ' optional flags for driver
36628     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3662c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36630     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36634     40 66 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
36638     C0 66 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3663c     E0 66 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36640                 | 
36640                 | ' data for memory
36640                 | deviceData
36640                 |     ' 16 bank parameters follow (16MB per bank)
36640     00 00 00 00 
      ...             
36678     00 00 00 00 
3667c     00 00 00 00 |     long    0[16]                               ' banks 0-15
36680                 |     ' 16 banks of pin parameters follow
36680     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36684     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36688     FF FF FF FF 
      ...             
366b8     FF FF FF FF 
366bc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
366c0                 | 
366c0                 | ' data for COG polling
366c0                 | qosData 
366c0     00 00 FF FF 
366c4     00 00 FF FF 
366c8     00 00 FF FF 
366cc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
366d0     00 00 FF FF 
366d4     00 00 FF FF 
366d8     00 00 FF FF 
366dc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
366e0                 |     
366e0                 | ' mailbox storage
366e0                 | 
366e0                 | mailboxes
366e0     00 00 00 00 
      ...             
36738     00 00 00 00 
3673c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36740                 | 	alignl
36740                 | _psram16drv_spin2_dat_
36740                 |                             orgh
36740     00 00 00 00 
      ...             
36758     00 00 00 00 
3675c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36760                 | 
36760                 | driver_start
36760                 |                             org
36760 000             | '..................................................................................................
36760 000             | ' Memory layout for COG RAM once operational:
36760 000             | '
36760 000             | '  COG RAM address      Usage
36760 000             | '  ---------------      ----
36760 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36760 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36760 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36760 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36760 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36760 000             | '  ~$198-$1F3           State and register variables
36760 000             | '
36760 000             | ' Also during driver COG startup:
36760 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36760 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36760 000             | '..................................................................................................
36760 000             |                             
36760 000             | ' Mailbox storage after vector initialization
36760 000             | 
36760 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36764 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36768 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3676c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36770 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36774 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36778 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3677c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36780 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36784 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36788 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3678c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36790 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36794 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36798 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3679c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
367a0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
367a4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
367a8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
367ac 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
367b0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
367b4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
367b8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
367bc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
367c0 018             | 
367c0 018             | ' Mailbox parameter addresses per COG once patched
367c0 018             |                             
367c0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
367c4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
367c8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
367cc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
367d0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
367d4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
367d8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
367dc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
367e0 020             | 
367e0 020             | '..................................................................................................
367e0 020             | ' Per COG request and state setup and service branching
367e0 020             |         
367e0 020             | cog0                 
367e0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
367e4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
367e8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
367ec 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
367f0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
367f4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
367f8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
367fc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36800 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36804 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36808 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3680c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36810 02c             | cog1                        
36810 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36814 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36818 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3681c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36820 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36824 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36828 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3682c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36830 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36834 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36838 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3683c 037 33 CA 63 FD |                             execf   request-0               'jump to service
36840 038             | cog2                         
36840 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36844 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36848 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3684c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36850 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36854 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36858 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3685c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36860 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36864 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36868 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3686c 043 33 CA 63 FD |                             execf   request-0               'jump to service
36870 044             | cog3                        
36870 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36874 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36878 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3687c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36880 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36884 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36888 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3688c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36890 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36894 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36898 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3689c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
368a0 050             | cog4                        
368a0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
368a4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
368a8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
368ac 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
368b0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
368b4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
368b8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
368bc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
368c0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
368c4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
368c8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
368cc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
368d0 05c             | cog5                        
368d0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
368d4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
368d8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
368dc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
368e0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
368e4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
368e8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
368ec 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
368f0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
368f4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
368f8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
368fc 067 33 CA 63 FD |                             execf   request-0               'jump to service
36900 068             | cog6                        
36900 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36904 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36908 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3690c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36910 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36914 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36918 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3691c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36920 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36924 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36928 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3692c 073 33 CA 63 FD |                             execf   request-0               'jump to service
36930 074             | cog7                        
36930 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36934 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36938 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3693c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36940 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36944 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36948 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3694c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36950 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36954 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36958 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3695c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36960 080             |                             fit     128
36960 080             | 
36960 080             |                             fit     128
36960 080             | pad                         long    0[128-$]                'align init code to $80
36960 080             | 
36960 080             | '..................................................................................................
36960 080             | 
36960 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36960 080             | 
36960 080             | init                        
36960 080             |                             ' get driver scratch long address in hub
36960 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36964 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36968 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3696c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36970 084             |                     
36970 084             |                             ' read in the additional LUT RAM code
36970 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36974 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36978 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3697c 087             | 
3697c 087             |                             ' read the startup parameters
3697c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36980 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36984 089             | 
36984 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36984 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36988 08a             | 
36988 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3698c 08b 01 00 00 5F 
36990 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36994 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36998 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3699c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
369a0 090             | 
369a0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
369a0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
369a4 091 01 00 00 FF 
369a8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
369ac 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
369b0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
369b4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
369b8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
369bc 097 08 DE 47 F5 |                             or      a, #8
369c0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
369c4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
369c8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
369cc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
369d0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
369d4 09d 01 DE 07 F1 |                             add     a, #1
369d8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
369dc 09f             |  
369dc 09f             |                             ' setup device control pin states
369dc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
369e0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
369e4 0a1 01 00 00 FF 
369e8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
369ec 0a3             | 
369ec 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
369f0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
369f4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
369f8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
369fc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36a00 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36a04 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36a08 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36a0c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36a10 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36a14 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36a18 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36a1c 0af             | pinloop
36a1c 0af             |                             ' generate minimum CE high time before access
36a1c 0af A1 07 00 FF 
36a20 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36a24 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36a28 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36a2c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36a30 0b4 1F DE 63 FD |                             waitx   a                       'delay
36a34 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36a38 0b6             | 
36a38 0b6             |                             ' setup the COG mailboxes and addresses 
36a38 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36a3c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36a40 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36a44 0b9             | 
36a44 0b9 28 2E 64 FD |                             setq    #24-1
36a48 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36a4c 0bb             | 
36a4c 0bb             |                             ' setup the polling loop for active COGs 
36a4c 0bb 01 C2 63 FD |                             cogid   id
36a50 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36a54 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36a58 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36a5c 0bf 0A F0 07 F6 |                             mov     ptra, #10
36a60 0c0 E1 F1 03 FA |                             mul     ptra, id
36a64 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36a68 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36a6c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36a70 0c4 03 C2 07 FA |                             mul     id, #3
36a74 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36a78 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36a7c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36a80 0c8 D8 01 B0 FD |                             call    #reloadcogs
36a84 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36a88 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36a8c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36a8c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36a90 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36a94 0cd 08 04 DC FC |                             rep     #2, #8
36a98 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36a9c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36aa0 0d0             | 
36aa0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36aa0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36aa0 0d0 01 C2 63 FD |                             cogid   id
36aa4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36aa8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36aac 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36ab0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36ab4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36ab8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36abc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36ac0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36ac4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36ac8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36acc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36ad0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36ad4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36ad8 0de A5 E5 03 F1 |                             add     d, const512
36adc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36ae0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36ae4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36ae8 0e2             |                             
36ae8 0e2             |                             ' setup register values for control vector loop setup after we return
36ae8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36aec 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36af0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36af4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36af8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36afc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36b00 0e8 D0 C3 8F F9 |                             altd    id, #id0
36b04 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36b08 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36b0c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36b10 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36b14 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36b18 0ee             |  
36b18 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36b1c 0ef 07 CA 07 F5 |                             and     request, #7
36b20 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36b24 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36b28 0f2             |                             fit     $100                    'ensure all init code fits this space
36b28 0f2             | 
36b28 0f2             |                             fit     $100                    'ensure all init code fits this space
36b28 0f2             | 
36b28 0f2 00 00 00 00 
      ...             
36b58 0fe 00 00 00 00 
36b5c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36b60 100             | 
36b60 100             | '..................................................................................................
36b60 100             | ' Error result handling and COG notification of request completion
36b60 100             | 
36b60 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36b64 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36b68 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36b6c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36b70 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36b74 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36b78 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36b7c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36b80 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36b84 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36b88 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36b8c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36b90 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36b94 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36b98 10e             | ' Poller re-starts here after a COG is serviced
36b98 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36b9c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36ba0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36ba4 111             | ' Main dynamic polling loop repeats until a request arrives
36ba4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36ba8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36bac 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36bb0 114             | 
36bb0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36bb4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36bb8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36bbc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36bc0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36bc4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36bc8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36bcc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36bd0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36bd4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36bd8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36bdc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36be0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36be4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36be8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36bec 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36bf0 124             | 
36bf0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36bf4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36bf8 126             |  
36bf8 126             | '..................................................................................................
36bf8 126             | ' List handler                               
36bf8 126             | 
36bf8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36bfc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36c00 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36c04 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36c08 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36c0c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36c10 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36c14 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36c18 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36c1c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36c20 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36c24 131 33 00 60 FD |                             execf   0-0                     'process the request 
36c28 132             | 
36c28 132             | '..................................................................................................
36c28 132             | ' Restoring per COG state and resuming where we left off
36c28 132             | 
36c28 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36c2c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36c30 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36c34 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36c38 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36c3c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36c40 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36c44 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36c48 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36c4c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36c50 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36c54 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36c58 13e             |                    
36c58 13e             | '..................................................................................................
36c58 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36c58 13e             | 
36c58 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36c5c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36c60 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36c64 141 D0 DF B7 F9 |                             setd    a, #id0
36c68 142 D8 DF BF F9 |                             sets    a, #addr1
36c6c 143 FE FF FF FF 
36c70 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36c74 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36c78 146 3F DE A7 F9 |                             alti    a, #%111_111 
36c7c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36c80 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36c84 149 01 E2 63 FD |                             cogid   c
36c88 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36c8c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36c90 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36c94 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36c98 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36c9c 14f 00 E0 03 F6 |                             mov     b, 0-0
36ca0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36ca4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36ca8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36cac 153 0C 00 90 AD |             if_z            jmp     #excluded               
36cb0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36cb4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36cb8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36cbc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36cc0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36cc4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36cc8 15a             | 
36cc8 15a             | 'determine priority cogs and build instructions for the polling sequence
36cc8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36ccc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36cd0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36cd4 15d             | 
36cd4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36cd8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36cdc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36ce0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36ce4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36ce8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36cec 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36cf0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36cf4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36cf8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36cfc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36d00 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36d04 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36d08 16a             | endprioloop
36d08 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36d0c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36d10 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36d14 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36d18 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36d1c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36d20 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36d24 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36d28 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36d2c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36d30 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36d34 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36d38 176             | 
36d38 176             | ' populate the round robin COG polling instructions
36d38 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36d3c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36d40 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36d44 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36d48 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36d4c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36d50 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36d54 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36d58 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36d5c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36d60 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36d64 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36d68 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36d6c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36d70 184             | '..................................................................................................
36d70 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36d70 184             | 
36d70 184             | set_latency                                                 '            (a) set latency
36d70 184             | get_latency                                                 '            (b) get latency
36d70 184             | set_burst                                                   '            (c) set burst size of bank
36d70 184             | get_burst                                                   '            (d) get burst size of bank
36d70 184             |                                                             '            (e) dump state
36d70 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36d74 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36d78 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36d7c 187             |                                                             ' | | | | e  account for following AUGS
36d7c 187 04 00 00 FF 
36d80 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36d84 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36d88 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
36d8c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
36d90 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
36d94 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
36d98 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
36d9c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
36da0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
36da4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
36da8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
36dac 193             | 
36dac 193             | '..................................................................................................
36dac 193             | ' Misc EXECF code
36dac 193             | 
36dac 193 33 72 63 FD | start_read_exec             execf   newburstr
36db0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
36db4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
36db8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
36dbc 197             | 
36dbc 197             | '..................................................................................................
36dbc 197             | ' Variables
36dbc 197             | 
36dbc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
36dc0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
36dc4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
36dc8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
36dcc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
36dd0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
36dd4 19d             | 
36dd4 19d 00 00 00 80 | xfreq1          long    $80000000
36dd8 19e 00 00 00 40 | xfreq2          long    $40000000
36ddc 19f 03 00 00 00 | delay           long    3
36de0 1a0             | 
36de0 1a0             | lutcodeaddr                 
36de0 1a0             | startupparams
36de0 1a0             | excludedcogs                                    'careful: shared register use!
36de0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
36de4 1a1 00 00 00 00 | flags           long    0
36de8 1a2             | mask                                            'careful: shared register use!
36de8 1a2 00 00 00 00 | resetmaskA      long    0
36dec 1a3             | limit                                           'careful: shared register use!
36dec 1a3 00 00 00 00 | resetmaskB      long    0
36df0 1a4 00 00 00 00 | datapins        long    0
36df4 1a5             | const512                                        'careful: shared register use!
36df4 1a5 00 00 00 00 | devicelist      long    0
36df8 1a6 00 00 00 00 | coglist         long    0
36dfc 1a7 00 00 00 00 | mbox            long    0 
36e00 1a8             | 
36e00 1a8             | clkpin                                          'shared with code patched during init
36e00 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
36e04 1a9             | cspin                                           'shared with code patched during init
36e04 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
36e08 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
36e0c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
36e10 1ac 01 00 00 00 | clkdelay        long    1
36e14 1ad 00 00 00 00 | regdatabus      long    0
36e18 1ae             | 
36e18 1ae 10 00 00 00 | deviceaddr      long    $10
36e1c 1af             | rrcounter
36e1c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
36e20 1b0             | 
36e20 1b0             | ' jump addresses for the per COG handlers
36e20 1b0 20 00 00 00 | cog0_handler    long    cog0
36e24 1b1 2C 00 00 00 | cog1_handler    long    cog1
36e28 1b2 38 00 00 00 | cog2_handler    long    cog2
36e2c 1b3 44 00 00 00 | cog3_handler    long    cog3
36e30 1b4 50 00 00 00 | cog4_handler    long    cog4
36e34 1b5 5C 00 00 00 | cog5_handler    long    cog5
36e38 1b6 68 00 00 00 | cog6_handler    long    cog6
36e3c 1b7 74 00 00 00 | cog7_handler    long    cog7
36e40 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
36e44 1b9             | 
36e44 1b9             | ' EXECF sequences
36e44 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
36e48 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
36e4c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
36e50 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
36e54 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
36e58 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
36e5c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
36e60 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
36e60 1c0             | 
36e60 1c0             | 
36e60 1c0             | ' SKIPF sequences
36e60 1c0             | skiptable
36e60 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
36e64 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
36e68 1c2 00 00 00 00 |                 long    0                      ' read modify write long
36e6c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
36e70 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
36e74 1c5 00 00 00 00 | pattern2        long    0
36e78 1c6 00 00 00 00 | pattern3        long    0
36e7c 1c7 77 02 00 00 | singlelong      long    %1001110111  
36e80 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
36e84 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
36e88 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
36e8c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
36e90 1cc             | 
36e90 1cc             | ' LUT RAM address values
36e90 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
36e94 1cd DD 02 00 00 | continue_read   long    continue_read_lut
36e98 1ce DB 02 00 00 | continue_write  long    continue_write_lut
36e9c 1cf F6 02 00 00 | noread          long    noread_lut
36ea0 1d0             | 
36ea0 1d0 00 00 00 00 | id0             long    0
36ea4 1d1 01 00 00 00 | id1             long    1
36ea8 1d2 02 00 00 00 | id2             long    2
36eac 1d3 03 00 00 00 | id3             long    3
36eb0 1d4 04 00 00 00 | id4             long    4
36eb4 1d5 05 00 00 00 | id5             long    5
36eb8 1d6 06 00 00 00 | id6             long    6
36ebc 1d7 07 00 00 00 | id7             long    7
36ec0 1d8             | 
36ec0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
36ec0 1d8             | 'and COG updates and need to follow immediately after id0-id7
36ec0 1d8 00 00 00 00 | addr1           long    0
36ec4 1d9 00 00 00 00 | hubdata         long    0
36ec8 1da 00 00 00 00 | count           long    0
36ecc 1db 00 00 00 00 | addr2           long    0
36ed0 1dc 00 00 00 00 | total           long    0
36ed4 1dd 00 00 00 00 | offset1         long    0
36ed8 1de 00 00 00 00 | offset2         long    0
36edc 1df 00 00 00 00 | link            long    0
36ee0 1e0             | 
36ee0 1e0             | burstwrite                                      'note shared register use during init
36ee0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
36ee4 1e1 00 00 00 00 | id              long    0
36ee8 1e2             | 
36ee8 1e2 00 00 00 00 | header          long    0
36eec 1e3 00 00 00 00 | trailer         long    0
36ef0 1e4 00 00 00 00 | cmdaddr         long    0
36ef4 1e5 00 00 00 00 | request         long    0
36ef8 1e6 00 00 00 00 | rrlimit         long    0
36efc 1e7 00 00 00 00 | pinconfig       long    0
36f00 1e8 00 00 00 00 | clks            long    0
36f04 1e9 00 00 00 00 | resume          long    0
36f08 1ea 00 00 00 00 | orighubsize     long    0
36f0c 1eb 00 00 00 00 | wrclks          long    0
36f10 1ec             | 
36f10 1ec 00 00 00 00 | pattern         long    0
36f14 1ed 00 00 00 00 | hubscratch      long    0
36f18 1ee 00 10 00 00 | val4k           long    4096
36f1c 1ef             | 
36f1c 1ef             | ' temporary general purpose regs
36f1c 1ef 00 00 00 00 | a               long    0
36f20 1f0 00 00 00 00 | b               long    0
36f24 1f1 00 00 00 00 | c               long    0
36f28 1f2 00 00 00 00 | d               long    0
36f2c 1f3             |                 fit     502
36f2c 1f3             | 
36f2c 1f3             |                 fit     502
36f2c 1f3             | 
36f2c 1f3             | '..................................................................................................
36f2c 1f3             | 
36f2c 1f3             |             orgh
36f2c                 | 
36f2c                 | lut_code
36f2c                 | 'HW init code up to 80 longs
36f2c                 | 
36f2c                 | '..................................................................................................
36f2c                 | ' Memory layout for LUT RAM once operational:
36f2c                 | '
36f2c                 | '  LUT RAM address      Usage
36f2c                 | '  ---------------      ----
36f2c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
36f2c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
36f2c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
36f2c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
36f2c                 | '
36f2c                 | ' Also during driver COG startup:
36f2c                 | ' $230-$24F is used for HW init setup
36f2c                 | ' $250-$26F is used as temporary vector storage 
36f2c                 | '..................................................................................................
36f2c                 | 
36f2c                 |                 org $230    
36f2c 230             | 
36f2c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
36f2c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
36f30 231 24 16 60 FD |                             pollxfi
36f34 232 FF AA 2A FF 
36f38 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
36f3c 234 28 00 B0 FD |                             call    #sendqspi
36f40 235 07 F8 07 FF 
36f44 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
36f48 237 28 00 B0 FD |                             call    #sendspi
36f4c 238 F8 07 78 FF 
36f50 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
36f54 23a 1C 00 B0 FD |                             call    #sendspi
36f58 23b 7F 78 78 FF 
36f5c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
36f60 23d 10 00 B0 FD |                             call    #sendspi 
36f64 23e 2D 00 64 FD |                             ret
36f68 23f             | 
36f68 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
36f6c 240 32 0C 64 FD |                             skipf   #%110
36f70 241 9C EF 03 F6 |                             mov     pb, xsendimm
36f74 242             | 
36f74 242 10 D0 07 F6 | sendspi                     mov     clks, #16
36f78 243 97 EF 03 F6 |                             mov     pb, ximm8lut
36f7c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
36f80 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
36f84 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
36f88 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
36f8c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
36f90 249 50 48 63 FD |                             fltl    datapins                'float data bus
36f94 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
36f98 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
36f9c 24c             | 
36f9c 24c 00 00 00 00 
36fa0 24d 00 00 00 00 
36fa4 24e 00 00 00 00 
36fa8 24f 00 00 00 00 |                 long    0[$270-32-$]
36fac 250             |                 fit     $270-32  ' keep room for 32 vector longs
36fac 250             |     
36fac 250             |                 fit     $270-32  ' keep room for 32 vector longs
36fac 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
36fac 250             | rw_vect ' PSRAM jump vectors
36fac 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
36fb0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
36fb4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
36fb8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
36fbc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
36fc0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
36fc4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
36fc8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
36fcc 258             | ro_vect ' R/O PSRAM jump vectors
36fcc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
36fd0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
36fd4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
36fd8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
36fdc 25c 00 01 00 00 |                 long    unsupported
36fe0 25d 00 01 00 00 |                 long    unsupported
36fe4 25e 00 01 00 00 |                 long    unsupported
36fe8 25f 00 01 00 00 |                 long    unsupported
36fec 260             | ctrl_vect ' Control jump vectors
36fec 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
36ff0 261 00 01 00 00 |                 long    unsupported
36ff4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
36ff8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
36ffc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37000 265 00 01 00 00 |                 long    unsupported
37004 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
37008 267 3E 01 00 00 |                 long    reconfig 
3700c 268             | no_vect ' Invalid bank jump vectors
3700c 268 01 01 00 00 |                 long    invalidbank
37010 269 01 01 00 00 |                 long    invalidbank
37014 26a 01 01 00 00 |                 long    invalidbank
37018 26b 01 01 00 00 |                 long    invalidbank
3701c 26c 01 01 00 00 |                 long    invalidbank
37020 26d 01 01 00 00 |                 long    invalidbank
37024 26e 01 01 00 00 |                 long    invalidbank
37028 26f 01 01 00 00 |                 long    invalidbank
3702c 270             |                 fit     $270
3702c 270             | 
3702c 270             |                 fit     $270
3702c 270             | '..................................................................................................
3702c 270             | ' PSRAM READS
3702c 270             |                                                             ' a b c d e f
3702c 270             |                                                             ' B W L B R L  (a) byte read
3702c 270             |                                                             ' Y O O U E O  (b) word read
3702c 270             |                                                             ' T R N R S C  (c) long read
3702c 270             |                                                             ' E D G S U K  (d) new burst read
3702c 270             |                                                             '       T M E  (e) resumed sub-burst
3702c 270             |                                                             '         E D  (f) locked sub-burst
3702c 270             | 
3702c 270             | 
3702c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37030 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37034 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37038 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3703c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37040 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37044 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37048 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3704c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37050 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37054 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37058 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3705c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37060 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37064 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37068 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3706c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37070 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37074 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37078 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3707c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37080 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37084 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37088 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3708c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37090 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37094 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37098 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3709c 28c             | 
3709c 28c             |                             ' fall through to read bursts
3709c 28c             |                         
3709c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3709c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
370a0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
370a4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
370a8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
370ac 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
370b0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
370b4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
370b8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
370bc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
370c0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
370c4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
370c8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
370cc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
370d0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
370d4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
370d8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
370dc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
370e0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
370e4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
370e8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
370ec 2a0 E8 D1 03 F1 |                             add     clks, clks
370f0 2a1             | readcommon
370f0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
370f4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
370f8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
370fc 2a4             | 
370fc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37100 2a5 69 C8 63 FD |                             rev     cmdaddr
37104 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37108 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3710c 2a8             | 
3710c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37110 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37114 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37114 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
37118 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3711c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
37120 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
37124 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
37124 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
37128 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3712c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
37130 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
37134 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
37138 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3713c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3713c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
37140 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
37144 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
37148 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3714c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37150 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37154 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37158 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3715c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37160 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
37164 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
37168 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3716c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37170 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37174 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37174 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37178 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3717c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37180 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37184 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37188 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3718c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37190 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37194 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37198 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3719c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
371a0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
371a4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
371a8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
371ac 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
371b0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
371b4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
371b8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
371bc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
371c0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
371c4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
371c8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
371cc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
371d0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
371d4 2da 10 03 90 FD |                             jmp     #writecommon
371d8 2db             | 
371d8 2db             | '..................................................................................................
371d8 2db             | ' Burst continuation testing
371d8 2db             | 
371d8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
371dc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
371e0 2dd             | continue_read_lut          
371e0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
371e4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
371e8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
371ec 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
371f0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
371f4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
371f8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
371fc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37200 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37204 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
37208 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3720c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37210 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37214 2ea             | 
37214 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
37218 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3721c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
37220 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
37224 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
37228 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3722c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
37230 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
37234 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
37238 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3723c 2f4 2A 1C 66 0D |             _ret_           push    #poller
37240 2f5             | 
37240 2f5             | 
37240 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
37244 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
37244 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
37248 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3724c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37250 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37254 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37258 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3725c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37260 2fd 2D 00 64 FD |                             ret                             ' | continue processing
37264 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
37268 2ff             | '..................................................................................................
37268 2ff             | ' Completion of requests
37268 2ff             | 
37268 2ff             | complete_rw_lut             
37268 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3726c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37270 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37274 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37278 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3727c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37280 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37284 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37288 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3728c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37290 309 32 62 64 AD |             if_z            skipf   #%110001
37294 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37298 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3729c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
372a0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
372a4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
372a8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
372ac 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
372b0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
372b4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
372b8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
372bc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
372c0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
372c4 316             |                                                             ' skipcase (a) gfx copy to/from hub
372c4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
372c4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
372c4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
372c8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
372cc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
372d0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
372d4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
372d8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
372dc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
372e0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
372e4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
372e8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
372ec 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
372f0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
372f4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
372f8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
372fc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37300 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37304 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
37308 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3730c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37310 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37314 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
37318 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3731c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
37320 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
37324 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
37328 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3732c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
37330 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
37334 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
37338 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3733c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
37340 335 DF B7 03 A6 |             if_z            mov     addr2, link
37344 336 34 FF 9F AD |             if_z            jmp     #checknext
37348 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3734c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37350 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37354 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37358 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3735c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37360 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
37364 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
37368 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3736c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37370 341             | 
37370 341             | '..................................................................................................
37370 341             | ' PSRAM WRITES
37370 341             |                                                             '  a b c d e f g h
37370 341             | 
37370 341             |                                                             '  B W L F B R L L (a) byte write(s)
37370 341             |                                                             '  Y O O I U E O O (b) word write(s)
37370 341             |                                                             '  T R N L R S C C (c) long write(s)
37370 341             |                                                             '  E D G L S U K K (d) resumed fill
37370 341             |                                                             '          T M E E (e) new burst write
37370 341             |                                                             '            E D D (f) resumed burst
37370 341             |                                                             '              F B (g) locked fill
37370 341             |                                                             '              I U (h) locked burst write
37370 341             |                                                             '              L R 
37370 341             |                                                             '              L S 
37370 341             |                                                             '                T 
37370 341             | 
37370 341             | w_single                   
37370 341             | w_fill_cont           
37370 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37374 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37378 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3737c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37380 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37384 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37388 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3738c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37390 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37394 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37398 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3739c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
373a0 34d             |                ' disable call to r_resume_burst for single longs when z=0
373a0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
373a4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
373a8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
373ac 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
373b0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
373b4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
373b8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
373bc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
373c0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
373c4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
373c8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
373cc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
373d0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
373d4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
373d8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
373dc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
373e0 35d             |         
373e0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
373e0 35d             |             '
373e0 35d             |             '  At least one of these 3 optional components will be sent
373e0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
373e0 35d             |             '     body - N x full longs of data
373e0 35d             |             '     trailer - last partial long of data
373e0 35d             |             '
373e0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
373e0 35d             |             '
373e0 35d             |             'Case    Type                           Sends
373e0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
373e0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
373e0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
373e0 35d             |             ' 4)     Multiple long fill             body only
373e0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
373e0 35d             | 
373e0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
373e0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
373e4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
373e8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
373ec 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
373f0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
373f4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
373f8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
373fc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37400 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37404 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
37408 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3740c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37410 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37414 36a             |                             
37414 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37418 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3741c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
37420 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
37424 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
37428 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3742c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
37430 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37434 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
37438 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3743c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
37440 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37444 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
37448 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3744c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37450 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37454 37a             | 
37454 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37458 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3745c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37460 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37464 37e             |                  
37464 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
37468 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3746c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37470 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37474 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37478 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3747c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37480 385             | 
37480 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37484 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37488 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3748c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37490 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37494 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37498 38b             | 
37498 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37498 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3749c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
374a0 38d 2A B0 63 FD |                             push    addr1                   'save address
374a4 38e             | 
374a4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
374a4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
374a8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
374ac 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
374b0 391             |             
374b0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
374b4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
374b8 393 2B B0 63 FD |                             pop     addr1                   'restore address
374bc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
374c0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
374c4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
374c8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
374cc 398             | 
374cc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
374d0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
374d4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
374d8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
374dc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
374e0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
374e4 39e             | 
374e4 39e             |                             'trailer is done
374e4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
374e8 39f             | 
374e8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
374ec 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
374f0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
374f4 3a2             | 
374f4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
374f8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
374fc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37500 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37504 3a6             |                             
37504 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
37508 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3750c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37510 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37514 3aa             |                                                          
37514 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
37518 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3751c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
37520 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37524 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
37528 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3752c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
37530 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37534 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
37538 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3753c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
37540 3b5             |  
37540 3b5 59 52 63 FD |                             drvh    cspin
37544 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
37548 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3754c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37550 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37554 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37558 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3755c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37560 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37564 3be EA E5 03 F6 |                             mov     d, orighubsize
37568 3bf EF E5 63 F0 |                             shl     d, a
3756c 3c0 F2 E3 83 F1 |                             sub     c, d
37570 3c1 DD E3 03 F1 |                             add     c, offset1
37574 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37578 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3757c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37580 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37584 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37588 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3758c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37590 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37594 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37598 3cb BB D3 03 F6 |                             mov     resume, restorefill
3759c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
375a0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
375a4 3ce 6C FC BF CD |             if_c            call    #yield
375a8 3cf 2D 00 64 FD |                             ret
375ac 3d0             |                            
375ac 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
375ac 3d0             |                       '     rczl    pa                      'rotate left into address offset
375ac 3d0             |                       '     rczl    c wcz                   'restore count and flags
375ac 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
375b0 3d1 02 EC 67 F0 |                             shl     pa, #2
375b4 3d2 28 06 64 AD |             if_z            setq    #3
375b8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
375bc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
375c0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
375c4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
375c8 3d7             | 
375c8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
375cc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
375d0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
375d4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
375d8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
375dc 3dc             |                 fit 1024-32
375dc 3dc             |         
375dc 3dc             | 
375dc 3dc             | '..................................................................................................
375dc 3dc             | 
375dc 3dc             |                 fit 1024-32
375dc 3dc 00 00 00 00 
375e0 3dd 00 00 00 00 
375e4 3de 00 00 00 00 
375e8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
375ec 3e0             |                 org 1024-32
375ec 000             | 
375ec 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
375ec 000 00 00 00 00 |                 long $0000
375f0 001 11 11 00 00 |                 long $1111
375f4 002 22 22 00 00 |                 long $2222
375f8 003 33 33 00 00 |                 long $3333
375fc 004 44 44 00 00 |                 long $4444
37600 005 55 55 00 00 |                 long $5555
37604 006 66 66 00 00 |                 long $6666
37608 007 77 77 00 00 |                 long $7777
3760c 008 88 88 00 00 |                 long $8888
37610 009 99 99 00 00 |                 long $9999
37614 00a AA AA 00 00 |                 long $aaaa
37618 00b BB BB 00 00 |                 long $bbbb
3761c 00c CC CC 00 00 |                 long $cccc
37620 00d DD DD 00 00 |                 long $dddd
37624 00e EE EE 00 00 |                 long $eeee
37628 00f FF FF 00 00 |                 long $ffff
3762c 010             | 
3762c 010             | 'masks
3762c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37630 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37634 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
37638 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3763c 014             | 
3763c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37640 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37644 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
37648 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3764c 018             | 
3764c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37650 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37654 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37658 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3765c 01c             | 
3765c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37660 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37664 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37668 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3766c 020             |         fit 1024
3766c 020             | 
3766c 020             |         fit 1024
3766c 020             | 
3766c 020             | '--------------------------------------------------------------------------------------------------
3766c 020             |         orgh
3766c                 | 
3766c                 | gfxexpansion
3766c                 |                             'simple line drawing graphics expansion of memory driver
3766c                 |                             'jmp     #donerepeats                'just return for now
3766c                 | 
3766c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37670     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37674     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37678     DD E1 03 F6 |                             mov     b, offset1              'get error term
3767c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37680     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37684     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37688     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3768c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37690     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37694     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37698     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3769c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
376a0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
376a4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
376a8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
376ac     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
376b0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
376b4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
376b8     DC E5 33 F9 |                             getword d, total, #0            'get line width
376bc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
376c0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
376c4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
376c8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
376cc     C3 03 80 FD |                             jmp     #readmask               'continue filling
376d0                 | 	alignl
376d0                 | _usbnew_spin2_dat_
376d0                 |                 org     $000
376d0 000             | 
376d0 000             | usb_host_start
376d0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
376d4 001             | 
376d4 001 03 00 00 FF 
376d8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
376dc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
376e0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
376e4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
376e8 006 29 70 63 FD |                 setq2   htmp
376ec 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
376f0 008             | 
376f0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
376f4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
376f8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
376fc 00b             | 
376fc 00b             | '------------------------------------------------------------------------------
376fc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
376fc 00b             | ' special because the receiving function must not respond with either STALL or
376fc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
376fc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
376fc 00b             | ' corrupt packet, it must ignore the transaction
376fc 00b             | '------------------------------------------------------------------------------
376fc 00b             | ' On entry:
376fc 00b             | '   PTRA - start address of the SETUP data struct.
376fc 00b             | ' On exit:
376fc 00b             | '   retval - PID_ACK on success, otherwise error code.
376fc 00b             | '------------------------------------------------------------------------------
376fc 00b             | txn_setup
376fc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37700 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37704 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37708 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3770c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37710 010             | .setup
37710 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37714 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37718 012 2D 00 64 AD |         if_z    ret
3771c 013 7C 0B B0 FD |                 call    #retry_wait
37720 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37724 015 2D 00 64 AD |         if_z    ret
37728 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3772c 017 E0 FF 9F FD |                 jmp     #.setup
37730 018             | 
37730 018             | '------------------------------------------------------------------------------
37730 018             | ' IN/INTERRUPT transaction.
37730 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37730 018             | '------------------------------------------------------------------------------
37730 018             | ' On entry:
37730 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37730 018             | '     CRC(b19..23).
37730 018             | ' On exit:
37730 018             | '------------------------------------------------------------------------------
37730 018             | txn_in
37730 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37734 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37738 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3773c 01b             | 
3773c 01b             |                 ' Fall through to urx_packet
3773c 01b             | 
3773c 01b             | '------------------------------------------------------------------------------
3773c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3773c 01b             | ' received are handshakes and IN DATAx.
3773c 01b             | '------------------------------------------------------------------------------
3773c 01b             | ' On entry:
3773c 01b             | ' On exit:
3773c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3773c 01b             | '     returned.
3773c 01b             | '------------------------------------------------------------------------------
3773c 01b             | urx_packet
3773c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37740 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37744 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37748 01e 1A 92 63 FD |                 getct   hct2
3774c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37750 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37754 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37758 022             | .wait_sop
37758 022 22 A7 8A FA |                 rdpin   urx, dm
3775c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37760 024 08 00 90 CD |         if_c    jmp     #.get_pid
37764 025 FC 25 CC FB |                 jnct2   #.wait_sop
37768 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3776c 027             | .get_pid
3776c 027 28 02 B0 FD |                 call    #urx_next
37770 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37774 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37778 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3777c 02b             | .chk_pid
3777c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37780 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37784 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37788 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3778c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37790 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37794 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37798 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3779c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
377a0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
377a4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
377a8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
377ac 037             | .ack_resend
377ac 037 22 A7 82 FA |                 rqpin   urx, dm
377b0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
377b4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
377b8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
377bc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
377c0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
377c4 03d             | .chk_eop
377c4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
377c8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
377cc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
377d0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
377d4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
377d8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
377dc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
377e0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
377e4 045 2D 00 64 FD |                 ret
377e8 046             | .idle
377e8 046 22 A7 82 FA |                 rqpin   urx, dm
377ec 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
377f0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
377f4 049 2D 00 64 FD |                 ret
377f8 04a             | 
377f8 04a             | '------------------------------------------------------------------------------
377f8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
377f8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
377f8 04a             | ' if one is required.
377f8 04a             | '------------------------------------------------------------------------------
377f8 04a             | ' On entry:
377f8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
377f8 04a             | ' On exit:
377f8 04a             | '------------------------------------------------------------------------------
377f8 04a             | utx_token
377f8 04a 22 A7 82 FA |                 rqpin   urx, dm
377fc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37800 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37804 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37808 04e 34 0D B0 CD |         if_c    call    #utx_pre
3780c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37810 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37814 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37818 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3781c 053             | .next_byte
3781c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37820 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37824 055             | .wait
37824 055 40 46 72 FD |                 testp   dp                      wc
37828 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3782c 057 23 03 08 FC |                 akpin   dp
37830 058 22 A5 22 FC |                 wypin   utx, dm
37834 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37838 05a             | 
37838 05a             | '------------------------------------------------------------------------------
37838 05a             | ' SETUP/OUT/INTERRUPT transaction.
37838 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37838 05a             | '------------------------------------------------------------------------------
37838 05a             | ' On entry:
37838 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37838 05a             | '     CRC(b19..23).
37838 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37838 05a             | '   pkt_data - count of DATAx payload bytes to send.
37838 05a             | ' On exit:
37838 05a             | '------------------------------------------------------------------------------
37838 05a             | txn_out
37838 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3783c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37840 05c 00 00 C0 FF 
37844 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37848 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3784c 05f             | 
3784c 05f             |                 ' Fall through to utx_data
3784c 05f             | 
3784c 05f             | '------------------------------------------------------------------------------
3784c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3784c 05f             | ' calculated while the data byte is being shifted out. Since data stage
3784c 05f             | ' success/fail is not determined until the status stage of the transaction,
3784c 05f             | ' this routine is only concerned about the current DATAx packet.
3784c 05f             | '------------------------------------------------------------------------------
3784c 05f             | ' On entry:
3784c 05f             | '   PTRA - hub start address of the data to read.
3784c 05f             | '   pkt_cnt - data payload size.
3784c 05f             | ' On exit:
3784c 05f             | '------------------------------------------------------------------------------
3784c 05f             | utx_data
3784c 05f 22 A7 82 FA |                 rqpin   urx, dm
37850 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37854 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37858 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3785c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37860 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37864 065 D8 0C B0 CD |         if_c    call    #utx_pre
37868 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3786c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37870 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37874 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37878 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3787c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37880 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37884 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37888 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3788c 06f             | .read_byte
3788c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37890 070 F0 00 B0 FD |                 call    #utx_byte
37894 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37898 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3789c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
378a0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
378a4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
378a8 076             | .send_crc
378a8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
378ac 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
378b0 078 D0 00 B0 FD |                 call    #utx_byte
378b4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
378b8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
378bc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
378c0 07c             | 
378c0 07c             | '------------------------------------------------------------------------------
378c0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
378c0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
378c0 07c             | ' expects that the packet includes at least the CRC word.
378c0 07c             | '
378c0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
378c0 07c             | ' was requested, which makes it difficult to determine where the data stops
378c0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
378c0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
378c0 07c             | ' USB-16 expected residual value of 0xB001.
378c0 07c             | '
378c0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
378c0 07c             | ' so the caller can verify IN success before writing the data to its final
378c0 07c             | ' destination.
378c0 07c             | '------------------------------------------------------------------------------
378c0 07c             | ' On entry:
378c0 07c             | '   pkt_data - max byte count expected to be in the packet.
378c0 07c             | '   newb_flg - signals new byte ready when toggled.
378c0 07c             | ' On exit:
378c0 07c             | '   pkt_cnt - actual number of bytes read.
378c0 07c             | '------------------------------------------------------------------------------
378c0 07c             | urx_data
378c0 07c F7 75 03 F6 |                 mov     htmp2, pb
378c4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
378c8 07e 00 00 C0 FF 
378cc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
378d0 080 BA EF 03 F6 |                 mov     pb, htmp2
378d4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
378d8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
378dc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
378e0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
378e4 085             | .wait_byte
378e4 085             | ' In-line rx for max speed
378e4 085 22 A7 82 FA |                 rqpin   urx, dm
378e8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
378ec 087 53 A5 02 F5 |                 and     utx, urx
378f0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
378f4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
378f8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
378fc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37900 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37904 08d DC FF 9F FD |                 jmp     #.wait_byte
37908 08e             | .get_byte
37908 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3790c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37910 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37914 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37918 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3791c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37920 094             | .end_crc
37920 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37924 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37928 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3792c 097 2D 00 64 1D |         if_a    ret
37930 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37930 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37930 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37930 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37930 098 22 A7 82 FA |                 rqpin   urx, dm
37934 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37938 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3793c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3793c 09b             | .chk_crc
3793c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37940 09c 58 00 00 FF 
37944 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37948 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3794c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37950 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37954 0a1 34 09 B0 FD |                 call    #poll_waitx
37958 0a2             | 
37958 0a2             |                 ' Fall through to utx_handshake
37958 0a2             | 
37958 0a2             | '------------------------------------------------------------------------------
37958 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37958 0a2             | ' the appropriate IP delay has been inserted.
37958 0a2             | '------------------------------------------------------------------------------
37958 0a2             | ' On entry:
37958 0a2             | '   retval - handshake PID to send.
37958 0a2             | ' On exit:
37958 0a2             | '   retval unchanged.
37958 0a2             | '------------------------------------------------------------------------------
37958 0a2             | utx_handshake
37958 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3795c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37960 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37964 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37968 0a6 5F A5 02 F6 |                 mov     utx, retval
3796c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37970 0a8             | .idle
37970 0a8 22 A7 82 FA |                 rqpin   urx, dm
37974 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37978 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3797c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37980 0ac 08 09 90 FD |                 jmp     #poll_waitx
37984 0ad             | 
37984 0ad             | '------------------------------------------------------------------------------
37984 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37984 0ad             | '------------------------------------------------------------------------------
37984 0ad             | ' On entry:
37984 0ad             | '   utx - byte to transmit.
37984 0ad             | ' On exit:
37984 0ad             | '------------------------------------------------------------------------------
37984 0ad             | utx_byte
37984 0ad 40 46 72 FD |                 testp   dp                      wc
37988 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3798c 0af 23 03 08 FC |                 akpin   dp
37990 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37994 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37998 0b2             | 
37998 0b2             | '------------------------------------------------------------------------------
37998 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37998 0b2             | '------------------------------------------------------------------------------
37998 0b2             | ' On entry:
37998 0b2             | ' On exit:
37998 0b2             | '   retval - the byte read.
37998 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37998 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37998 0b2             | '     received.
37998 0b2             | '------------------------------------------------------------------------------
37998 0b2             | urx_next
37998 0b2 22 A7 8A FA |                 rdpin   urx, dm
3799c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
379a0 0b4 53 A5 02 F5 |                 and     utx, urx
379a4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
379a8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
379ac 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
379b0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
379b4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379b8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
379bc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
379c0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
379c4 0bd 2D 00 64 FD |                 ret
379c8 0be             | 
379c8 0be             | '------------------------------------------------------------------------------
379c8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
379c8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
379c8 0be             | ' length, and the PID is not included in the CRC calculation:
379c8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
379c8 0be             | '  CRC5  ENDP ADDRESS PID
379c8 0be             | ' %00000_1111_1111111_xxxxxxxx
379c8 0be             | '------------------------------------------------------------------------------
379c8 0be             | ' On entry:
379c8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
379c8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
379c8 0be             | ' On exit:
379c8 0be             | '   ep_addr_pid - CRC value appended to the packet.
379c8 0be             | '------------------------------------------------------------------------------
379c8 0be             | calc_crc5
379c8 0be FF 03 00 FF 
379cc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
379d0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
379d4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
379d8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
379dc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
379e0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
379e4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
379e8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
379ec 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
379f0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
379f4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
379f8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
379fc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37a00 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37a04 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37a08 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37a0c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37a10 0d0             | 
37a10 0d0             | '------------------------------------------------------------------------------
37a10 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37a10 0d0             | '------------------------------------------------------------------------------
37a10 0d0             | isr1_fsframe
37a10 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37a14 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37a18 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37a1c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37a20 0d4             | .wait
37a20 0d4 40 46 72 FD |                 testp   dp                      wc
37a24 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37a28 0d6 23 03 08 FC |                 akpin   dp
37a2c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37a30 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37a34 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37a38 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37a3c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37a40 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37a44 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37a48 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37a4c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37a50 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37a54 0e1 2C FF BF FD |                 call    #utx_byte
37a58 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37a5c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37a60 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37a64 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37a68 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37a6c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37a70 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37a74 0e9 5B A5 42 F5 |                 or      utx, icrc
37a78 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37a7c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37a80 0ec 20 00 90 FD |                 jmp     #isr1_wait
37a84 0ed             | isr1_lsframe
37a84 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37a88 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37a8c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37a90 0f0             | .wait
37a90 0f0 40 46 72 FD |                 testp   dp                      wc
37a94 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37a98 0f2 23 03 08 FC |                 akpin   dp
37a9c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37aa0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37aa4 0f5             | isr1_wait
37aa4 0f5 22 A5 82 FA |                 rqpin   utx, dm
37aa8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37aac 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37ab0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37ab4 0f9 03 00 00 FF 
37ab8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37abc 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37ac0 0fc F5 FF 3B FB |                 reti1
37ac4 0fd             | 
37ac4 0fd             | '------------------------------------------------------------------------------
37ac4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37ac4 0fd             | ' transaction will complete before the next frame is triggered.
37ac4 0fd             | '------------------------------------------------------------------------------
37ac4 0fd             | ' On entry:
37ac4 0fd             | ' On exit:
37ac4 0fd             | '------------------------------------------------------------------------------
37ac4 0fd             | wait_txn_ok
37ac4 0fd 1A 74 63 FD |                 getct   htmp2
37ac8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37acc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37ad0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37ad4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37ad8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37adc 103 2D 00 64 FD |                 ret
37ae0 104             | 
37ae0 104             | '------------------------------------------------------------------------------
37ae0 104             | ' A device connection was detected, or a bus reset was requested by the USB
37ae0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37ae0 104             | ' and perform a reset sequence prior to device enumeration.
37ae0 104             | '------------------------------------------------------------------------------
37ae0 104             | dev_reset
37ae0 104 22 A7 82 FA |                 rqpin   urx, dm
37ae4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37ae8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37aec 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37af0 108             | reset
37af0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37af4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37af8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37afc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37b00 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37b04 10d 1A 92 62 FD |                 getct   iframe_ct_base
37b08 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37b0c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37b10 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37b14 111 24 70 07 F1 |                 add     htmp, #36
37b18 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37b1c 113             | .framewait
37b1c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37b20 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37b24 115 2D 00 64 FD |                 ret
37b28 116             | 
37b28 116             | '------------------------------------------------------------------------------
37b28 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37b28 116             | '------------------------------------------------------------------------------
37b28 116             | ' On entry:
37b28 116             | '   PTRA - source address.
37b28 116             | '   PB - destination address.
37b28 116             | '   hr0 - length of copy, in bytes.
37b28 116             | ' On exit:
37b28 116             | '------------------------------------------------------------------------------
37b28 116             | hmemcpy
37b28 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37b2c 117 F7 71 43 FC |                 wrbyte  htmp, pb
37b30 118 01 EE 07 F1 |                 add     pb, #1
37b34 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37b38 11a             | 
37b38 11a             | '------------------------------------------------------------------------------
37b38 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37b38 11a             | ' loop until the errant device is disconnected.
37b38 11a             | '------------------------------------------------------------------------------
37b38 11a             | ' On entry:
37b38 11a             | ' On exit:
37b38 11a             | '------------------------------------------------------------------------------
37b38 11a             | host_error
37b38 11a             |           if ERROR_LED >= 0
37b38 11a             |           end
37b38 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37b3c 11b             | 
37b3c 11b             | '------------------------------------------------------------------------------
37b3c 11b             | ' Get HID descriptor buffer for current port
37b3c 11b             | '------------------------------------------------------------------------------
37b3c 11b             | ' On entry:
37b3c 11b             | ' On exit:
37b3c 11b             | '   PB - HID descriptor buffer pointer
37b3c 11b             | '------------------------------------------------------------------------------
37b3c 11b             | get_hid_descr_buffer
37b3c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37b40 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37b44 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37b48 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37b4c 11f             | 
37b4c 11f             | 
37b4c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37b50 120             | 
37b50 120             | ' USB commands and error codes
37b50 120 00 00 00 00 | cmd_data        long    0
37b54 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37b58 122             | 
37b58 122             | ' Parameters block assigned at cog startup
37b58 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37b5c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37b60 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37b64 125             | if ACTIVITY_LED >= 0
37b64 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37b64 125             | end
37b64 125             | if ERROR_LED >= 0
37b64 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37b64 125             | end
37b64 125 00 00 00 00 | hid_descr_p     long    0
37b68 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37b68 126             | 'hkbd_report_p   long    0
37b68 126 00 00 00 00 | hub_descr_p     long    0
37b6c 127 00 00 00 00 | urx_buff_p      long    0
37b70 128 00 00 00 00 | dev_desc_buff_p long    0
37b74 129 00 00 00 00 | con_desc_buff_p long    0
37b78 12a 00 00 00 00 | cache_start_p   long    0
37b7c 12b 00 00 00 00 | cache_end_p     long    0
37b80 12c             | if EMUPAD_MAX_PLAYER > 0
37b80 12c             | emupad_out_ptr  long    0
37b80 12c             | end
37b80 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37b84 12d             | 
37b84 12d             | hdev_init_start
37b84 12d             | hdev_port       res     1
37b84 12d             | hdev_port       res     1
37b84 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37b84 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37b84 12d             | kbm_next_datax  res     1
37b84 12d             | kbm_next_datax  res     1
37b84 12d             | hub_intf_num    res     1
37b84 12d             | hub_intf_num    res     1
37b84 12d             | hub_next_datax  res     1
37b84 12d             | hub_next_datax  res     1
37b84 12d             | hub_status_chg  res     1
37b84 12d             | hub_status_chg  res     1
37b84 12d             | hub_port_status res     1
37b84 12d             | hub_port_status res     1
37b84 12d             | if HAVE_MOUSE
37b84 12d             | ms_intf_num     res     1
37b84 12d             | ms_intf_num     res     1
37b84 12d             | ms_in_max_pkt   res     1
37b84 12d             | ms_in_max_pkt   res     1
37b84 12d             | end
37b84 12d             | kb_intf_num     res     1
37b84 12d             | kb_intf_num     res     1
37b84 12d             | kb_interval     res     1
37b84 12d             | kb_interval     res     1
37b84 12d             | kb_in_max_pkt   res     1
37b84 12d             | kb_in_max_pkt   res     1
37b84 12d             | kb_max_index    res     1
37b84 12d             | kb_max_index    res     1
37b84 12d             | kb_led_states   res     1
37b84 12d             | kb_led_states   res     1
37b84 12d             | gp_intf_num     res     1
37b84 12d             | gp_intf_num     res     1
37b84 12d             | gp_interval     res     1
37b84 12d             | gp_interval     res     1
37b84 12d             | gp_max_index    res     1
37b84 12d             | gp_max_index    res     1
37b84 12d             | gp_descr_len    res     1+MAX_DEVICES
37b84 12d             | gp_descr_len    res     1+MAX_DEVICES
37b84 12d             | hdev_init_end
37b84 12d             | 
37b84 12d             | ' Initialized at cog startup:
37b84 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37b84 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37b84 12d             | iframe_ct_new   res     1
37b84 12d             | iframe_ct_new   res     1
37b84 12d             | iframe_ct_base  res     1
37b84 12d             | iframe_ct_base  res     1
37b84 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37b84 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37b84 12d             | 
37b84 12d             | ' This register block is reset to zero when a USB device connects
37b84 12d             | hreg_init_start
37b84 12d             | hstatus         res     1         ' Host status flags
37b84 12d             | hstatus         res     1         ' Host status flags
37b84 12d             | hctwait         res     1         ' Poll-based wait clocks
37b84 12d             | hctwait         res     1         ' Poll-based wait clocks
37b84 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37b84 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37b84 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37b84 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37b84 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37b84 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37b84 12d             | xfer_retry      res     1         ' Control transfer retry count
37b84 12d             | xfer_retry      res     1         ' Control transfer retry count
37b84 12d             | retry           res     1         ' Transaction retry count
37b84 12d             | retry           res     1         ' Transaction retry count
37b84 12d             | utx             res     1         ' Byte to transmit on USB
37b84 12d             | utx             res     1         ' Byte to transmit on USB
37b84 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37b84 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37b84 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37b84 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37b84 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37b84 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37b84 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37b84 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37b84 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37b84 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37b84 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37b84 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37b84 12d             | frame           res     1         ' USB 1ms frame counter value
37b84 12d             | frame           res     1         ' USB 1ms frame counter value
37b84 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37b84 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37b84 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37b84 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37b84 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37b84 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37b84 12d             | crc             res     1         ' Used for CRC16 calculation
37b84 12d             | crc             res     1         ' Used for CRC16 calculation
37b84 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37b84 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37b84 12d             | retval          res     1         ' Global success/fail return parameter
37b84 12d             | retval          res     1         ' Global success/fail return parameter
37b84 12d             | context_retval  res     1         ' Operation contextual return parameter
37b84 12d             | context_retval  res     1         ' Operation contextual return parameter
37b84 12d             | ' Device stuff
37b84 12d             | hdev_id         res     1+MAX_DEVICES
37b84 12d             | hdev_id         res     1+MAX_DEVICES
37b84 12d             | hdev_bcd        res     1
37b84 12d             | hdev_bcd        res     1
37b84 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37b84 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37b84 12d             | ' Keyboard/mouse stuff
37b84 12d             | hctrl_ep_addr   res     1
37b84 12d             | hctrl_ep_addr   res     1
37b84 12d             | hctrl_max_pkt   res     1
37b84 12d             | hctrl_max_pkt   res     1
37b84 12d             | hconfig_base    res     1
37b84 12d             | hconfig_base    res     1
37b84 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37b84 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37b84 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37b84 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37b84 12d             | hdev_class      res     1
37b84 12d             | hdev_class      res     1
37b84 12d             | hdev_subclass   res     1
37b84 12d             | hdev_subclass   res     1
37b84 12d             | hdev_protocol   res     1
37b84 12d             | hdev_protocol   res     1
37b84 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37b84 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37b84 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37b84 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37b84 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37b84 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37b84 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37b84 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37b84 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37b84 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37b84 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37b84 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37b84 12d             | if HAVE_MOUSE
37b84 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37b84 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37b84 12d             | end
37b84 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37b84 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37b84 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37b84 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37b84 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37b84 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37b84 12d             | hdev_out_addr   res     1
37b84 12d             | hdev_out_addr   res     1
37b84 12d             | 
37b84 12d             | if EMUPAD_MAX_PLAYER > 0
37b84 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37b84 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37b84 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37b84 12d             | end
37b84 12d             | 
37b84 12d             | hreg_init_end
37b84 12d             | 
37b84 12d             | hidr_start
37b84 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37b84 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37b84 12d             | hidr_flags      res     1
37b84 12d             | hidr_flags      res     1
37b84 12d             | hidr_axis       res     3
37b84 12d             | hidr_axis       res     3
37b84 12d             | hidr_buttons    res     1
37b84 12d             | hidr_buttons    res     1
37b84 12d             | hidr_hats       res     1
37b84 12d             | hidr_hats       res     1
37b84 12d             | '' Above are actually useful values, 6 longs
37b84 12d             | hidr_id         res     1
37b84 12d             | hidr_id         res     1
37b84 12d             | hidr_state      res     1
37b84 12d             | hidr_state      res     1
37b84 12d             | hidr_size       res     1
37b84 12d             | hidr_size       res     1
37b84 12d             | hidr_count      res     1
37b84 12d             | hidr_count      res     1
37b84 12d             | hidr_offset     res     1
37b84 12d             | hidr_offset     res     1
37b84 12d             | hidr_usage_idx  res     1
37b84 12d             | hidr_usage_idx  res     1
37b84 12d             | hidr_lminmax    res     1
37b84 12d             | hidr_lminmax    res     1
37b84 12d             | hidr_pminmax    res     1
37b84 12d             | hidr_pminmax    res     1
37b84 12d             | hidr_type       res     1
37b84 12d             | hidr_type       res     1
37b84 12d             | hidr_end
37b84 12d             | 
37b84 12d             | ' Variables dependent on the system freqency
37b84 12d             | _var_64_lower_  res     1
37b84 12d             | _var_64_lower_  res     1
37b84 12d             | _var_64_upper_  res     1
37b84 12d             | _var_64_upper_  res     1
37b84 12d             | _12Mbps_        res     1
37b84 12d             | _12Mbps_        res     1
37b84 12d             | _1_5Mbps_       res     1
37b84 12d             | _1_5Mbps_       res     1
37b84 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37b84 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37b84 12d             | _1us_           res     1         ' 1us
37b84 12d             | _1us_           res     1         ' 1us
37b84 12d             | _10us_          res     1         ' 10us
37b84 12d             | _10us_          res     1         ' 10us
37b84 12d             | _33us_          res     1         ' 33us
37b84 12d             | _33us_          res     1         ' 33us
37b84 12d             | _txn_err_       res     1         ' 250us
37b84 12d             | _txn_err_       res     1         ' 250us
37b84 12d             | _500us_         res     1         ' 500us
37b84 12d             | _500us_         res     1         ' 500us
37b84 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37b84 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37b84 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37b84 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37b84 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37b84 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37b84 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37b84 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37b84 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37b84 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37b84 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37b84 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37b84 12d             | _preamble_wait_ res     1
37b84 12d             | _preamble_wait_ res     1
37b84 12d             | _1ms_           res     1         ' 1ms
37b84 12d             | _1ms_           res     1         ' 1ms
37b84 12d             | _2ms_           res     1         ' 2ms
37b84 12d             | _2ms_           res     1         ' 2ms
37b84 12d             | _suspend_wait_  res     1         ' 3ms
37b84 12d             | _suspend_wait_  res     1         ' 3ms
37b84 12d             | _4ms_           res     1         ' 4ms
37b84 12d             | _4ms_           res     1         ' 4ms
37b84 12d             | _xfer_wait_     res     1         ' 5ms
37b84 12d             | _xfer_wait_     res     1         ' 5ms
37b84 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37b84 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37b84 12d             | _reset_hold_    res     1         ' 15ms
37b84 12d             | _reset_hold_    res     1         ' 15ms
37b84 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37b84 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37b84 12d             | _21ms_          res     1         ' 21ms
37b84 12d             | _21ms_          res     1         ' 21ms
37b84 12d             | _100ms_         res     1         ' 100ms
37b84 12d             | _100ms_         res     1         ' 100ms
37b84 12d             | _500ms_         res     1         ' 500ms
37b84 12d             | _500ms_         res     1         ' 500ms
37b84 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37b84 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37b84 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37b84 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37b84 12d             | '------------------------------------------------------------------------------
37b84 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37b84 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37b84 12d             | _usb_d_ls_nco_  res     1
37b84 12d             | _usb_d_ls_nco_  res     1
37b84 12d             | _usb_h_fs_nco_  res     1
37b84 12d             | _usb_h_fs_nco_  res     1
37b84 12d             | _usb_d_fs_nco_  res     1
37b84 12d             | _usb_d_fs_nco_  res     1
37b84 12d             | '------------------------------------------------------------------------------
37b84 12d             | ' Scratch registers
37b84 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37b84 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37b84 12d             | htmp1           res     1
37b84 12d             | htmp1           res     1
37b84 12d             | htmp2           res     1
37b84 12d             | htmp2           res     1
37b84 12d             | htmp3           res     1
37b84 12d             | htmp3           res     1
37b84 12d             | hrep            res     1         ' Repeat count
37b84 12d             | hrep            res     1         ' Repeat count
37b84 12d             | hsave0          res     1         ' Subroutine parameter saves
37b84 12d             | hsave0          res     1         ' Subroutine parameter saves
37b84 12d             | hsave1          res     1
37b84 12d             | hsave1          res     1
37b84 12d             | hsave2          res     1
37b84 12d             | hsave2          res     1
37b84 12d             | isrtmp1         res     1
37b84 12d             | isrtmp1         res     1
37b84 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37b84 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37b84 12d             | hr0             res     1         ' Multi-purpose registers
37b84 12d             | hr0             res     1         ' Multi-purpose registers
37b84 12d             | hr1             res     1
37b84 12d             | hr1             res     1
37b84 12d             | hr2             res     1
37b84 12d             | hr2             res     1
37b84 12d             | hr3             res     1
37b84 12d             | hr3             res     1
37b84 12d             | hpar1           res     1         ' Routine entry/exit parameters
37b84 12d             | hpar1           res     1         ' Routine entry/exit parameters
37b84 12d             | hpar2           res     1
37b84 12d             | hpar2           res     1
37b84 12d             | hpar3           res     1
37b84 12d             | hpar3           res     1
37b84 12d             | hct2            res     1         ' Function response bus turn-around timer
37b84 12d             | hct2            res     1         ' Function response bus turn-around timer
37b84 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37b84 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37b84 12d             | mod_cnt         res     1         ' Used in idle loops
37b84 12d             | mod_cnt         res     1         ' Used in idle loops
37b84 12d             |                 fit     $1F0
37b84 12d             |                 org     $200
37b84 200             | hlut_start
37b84 200             | 
37b84 200             | '------------------------------------------------------------------------------
37b84 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37b84 200             | ' settings to startup defaults.
37b84 200             | '------------------------------------------------------------------------------
37b84 200             | ' On entry:
37b84 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37b84 200             | '------------------------------------------------------------------------------
37b84 200             | set_speed_full
37b84 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37b88 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37b8c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37b90 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37b94 204             | '                ret                             wcz     ' Restore caller flags on exit
37b94 204             | 
37b94 204             | '------------------------------------------------------------------------------
37b94 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37b94 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37b94 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37b94 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37b94 204             | ' putting the smart pins into reset.
37b94 204             | '------------------------------------------------------------------------------
37b94 204             | ' On entry:
37b94 204             | ' On exit: CZ flags restored to caller states
37b94 204             | '------------------------------------------------------------------------------
37b94 204             | set_speed_low
37b94 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37b98 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37b9c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37ba0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37ba4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37ba8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37bac 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37bb0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37bb4 20c             | 
37bb4 20c             | '------------------------------------------------------------------------------
37bb4 20c             | ' Perform configuration stuff required when a device intitially connects.
37bb4 20c             | '------------------------------------------------------------------------------
37bb4 20c             | ' On entry:
37bb4 20c             | ' On exit:
37bb4 20c             | '------------------------------------------------------------------------------
37bb4 20c             | on_connect
37bb4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37bb8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37bbc 20e             | .retry
37bbc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37bc0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37bc4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37bc8 211 00 08 00 FF 
37bcc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37bd0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37bd4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37bd8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37bdc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37be0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37be4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37be8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37bec 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37bf0 21b 4C 03 B0 FD |                 call    #poll_waitx
37bf4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37bf8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37bfc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37c00 21f B8 FF 9F FD |                 jmp     #.retry
37c04 220             | .get_dev_desc
37c04 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37c08 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37c0c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37c10 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37c14 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37c18 225 88 FB BF FD |                 call    #reset
37c1c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37c20 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37c24 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37c28 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37c2c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37c30 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37c34 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37c38 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37c3c 22e 04 00 00 FF 
37c40 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37c44 230 34 FA BF FD |                 call    #calc_crc5
37c48 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37c4c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37c50 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37c54 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37c58 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37c5c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37c60 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37c64 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37c68 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37c6c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37c70 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37c74 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37c78 23d C4 02 B0 FD |                 call    #poll_waitx
37c7c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37c80 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37c84 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37c88 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37c8c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37c90 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37c94 244 2D 00 64 5D |         if_nz   ret
37c98 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37c9c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37ca0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37ca4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37ca8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37cac 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37cb0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37cb4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37cb8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37cbc 24e 2C FB 9F CD |         if_b    jmp     #host_error
37cc0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37cc4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37cc8 251 2D EC 63 FD |                 call    pa
37ccc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37cd0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37cd4 254 2C EC 63 FD |                 jmp     pa
37cd8 255             | 
37cd8 255             | '------------------------------------------------------------------------------
37cd8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37cd8 255             | ' Status reporting is always in the function-to-host direction.
37cd8 255             | '------------------------------------------------------------------------------
37cd8 255             | ' On entry:
37cd8 255             | '   PTRA - start address of the SETUP data in hub.
37cd8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37cd8 255             | '     stage.
37cd8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37cd8 255             | ' On exit:
37cd8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37cd8 255             | '     contains the count of data stage bytes actually received, which must
37cd8 255             | '     always be <= the count requested.
37cd8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37cd8 255             | '     more specific USB operation error code.
37cd8 255             | '------------------------------------------------------------------------------
37cd8 255             | control_read
37cd8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37cdc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37ce0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37ce4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37ce8 259             | .xfer_start
37ce8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37cec 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37cf0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37cf4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37cf8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37cfc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37d00 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37d04 260 61 00 00 FF 
37d08 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37d0c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37d10 263             | .data
37d10 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37d14 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37d18 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37d1c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37d20 267             | .nak_retry
37d20 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37d24 268             | .in_retry
37d24 268 BC F6 BF FD |                 call    #txn_in
37d28 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37d2c 26a 28 00 90 AD |         if_z    jmp     #.commit
37d30 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37d34 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37d38 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37d3c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37d40 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37d44 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37d48 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37d4c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37d50 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37d54 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37d58 275             | .commit
37d58 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37d5c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37d60 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37d64 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37d68 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37d6c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37d70 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37d74 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37d78 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37d7c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37d80 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37d84 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37d88 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
37d8c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
37d90 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37d94 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
37d98 285             | .pre_status
37d98 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
37d9c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
37da0 287 00 B0 06 F6 |                 mov     pkt_data, #0
37da4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
37da8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37dac 28a 61 00 00 FF 
37db0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
37db4 28c             | .out_retry
37db4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
37db8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37dbc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
37dc0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37dc4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37dc8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37dcc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37dd0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37dd4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37dd8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
37ddc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
37de0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
37de0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
37de0 297             | ' ControlRead() transfer gets things unstuck most of the time...
37de0 297             | .xfer_retry
37de0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
37de4 298 58 01 B0 FD |                 call    #poll_waitx
37de8 299 8C F9 BF FD |                 call    #wait_txn_ok
37dec 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
37df0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
37df4 29c C8 EF 03 F6 |                 mov     pb, hpar3
37df8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
37dfc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
37e00 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
37e04 2a0             | 
37e04 2a0             | '------------------------------------------------------------------------------
37e04 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
37e04 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
37e04 2a0             | ' the SETUP data struct is filled with the required values.
37e04 2a0             | '------------------------------------------------------------------------------
37e04 2a0             | ' On entry:
37e04 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
37e04 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
37e04 2a0             | '     stage.
37e04 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
37e04 2a0             | ' On exit:
37e04 2a0             | '   retval - used to convey the success/failure of each stage.
37e04 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37e04 2a0             | '     more specific USB operation error code.
37e04 2a0             | '------------------------------------------------------------------------------
37e04 2a0             | control_write
37e04 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37e08 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37e0c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37e10 2a3             | 
37e10 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37e14 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
37e18 2a5 F7 91 03 F6 |                 mov     hpar3, pb
37e1c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37e20 2a7             | .xfer_start
37e20 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
37e24 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37e28 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37e2c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e30 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
37e34 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
37e38 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37e3c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37e40 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
37e44 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37e48 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37e4c 2b2             | .data
37e4c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
37e50 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
37e54 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37e58 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
37e5c 2b6             | .out_retry
37e5c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
37e60 2b7 88 F6 BF FD |                 call    #txn_out
37e64 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e68 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
37e6c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37e70 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
37e74 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
37e78 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
37e7c 2be             | .commit
37e7c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
37e80 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
37e84 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
37e88 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37e8c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
37e90 2c3             | pre_status_in
37e90 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
37e94 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37e98 2c5             | .status_retry
37e98 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
37e9c 2c6 44 F5 BF FD |                 call    #txn_in
37ea0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
37ea4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
37ea8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
37eac 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
37eb0 2cb 2D 00 64 AD |         if_z    ret
37eb4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
37eb8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37ebc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
37ec0 2cf             | '               ret                                     ' Caller must handle transfer retirement
37ec0 2cf             | 
37ec0 2cf             | '------------------------------------------------------------------------------
37ec0 2cf             | ' Execute an IN interrupt transaction.
37ec0 2cf             | '------------------------------------------------------------------------------
37ec0 2cf             | ' On entry:
37ec0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
37ec0 2cf             | '   hpar2 - Address of the IN data buffer
37ec0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
37ec0 2cf             | ' On exit:
37ec0 2cf             | '   retval - the result of the operation.
37ec0 2cf             | '   hpar3 - the count of IN data bytes actually received.
37ec0 2cf             | '------------------------------------------------------------------------------
37ec0 2cf             | do_int_in
37ec0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37ec4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37ec8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37ecc 2d2             | 
37ecc 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
37ed0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
37ed4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
37ed8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
37edc 2d6             | .retry
37edc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
37ee0 2d7 00 F5 BF FD |                 call    #txn_in
37ee4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
37ee8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
37eec 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
37ef0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
37ef4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
37ef8 2dd 54 00 B0 FD |                 call    #retry_wait
37efc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37f00 2df 18 00 90 AD |         if_z    jmp     #.post_ret
37f04 2e0 D4 FF 9F FD |                 jmp     #.retry
37f08 2e1             | .commit
37f08 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
37f0c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
37f10 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
37f14 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
37f18 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37f1c 2e6             | .post_ret
37f1c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
37f20 2e7             | 
37f20 2e7             | 
37f20 2e7             | '------------------------------------------------------------------------------
37f20 2e7             | ' Resets the downstream hub port to FS
37f20 2e7             | '------------------------------------------------------------------------------
37f20 2e7             | dwnstream_reset
37f20 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37f24 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
37f28 2e9             | 
37f28 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
37f2c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
37f30 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37f34 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37f38 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
37f3c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
37f40 2ef             | 
37f40 2ef             | '------------------------------------------------------------------------------
37f40 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
37f40 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
37f40 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
37f40 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
37f40 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
37f40 2ef             | '------------------------------------------------------------------------------
37f40 2ef             | ' On entry:
37f40 2ef             | '   hctwait - wait interval in sysclocks.
37f40 2ef             | ' On exit:
37f40 2ef             | '------------------------------------------------------------------------------
37f40 2ef             | poll_waitx
37f40 2ef 1A 92 63 FD |                 getct   hct2
37f44 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
37f48 2f1             | .wait
37f48 2f1 FF 25 CC FB |                 jnct2   #.wait
37f4c 2f2 2D 00 64 FD |                 ret
37f50 2f3             | 
37f50 2f3             | '------------------------------------------------------------------------------
37f50 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
37f50 2f3             | '------------------------------------------------------------------------------
37f50 2f3             | ' On entry:
37f50 2f3             | '   retval - transaction response PID or error code.
37f50 2f3             | ' On exit:
37f50 2f3             | '------------------------------------------------------------------------------
37f50 2f3             | retry_wait
37f50 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f54 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
37f58 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37f5c 2f6 14 00 90 AD |         if_z    jmp     #.nak
37f60 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
37f64 2f8 D8 FF BF FD |                 call    #poll_waitx
37f68 2f9             | .dec
37f68 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
37f6c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
37f70 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
37f74 2fc             | .nak
37f74 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
37f78 2fd C4 FF BF FD |                 call    #poll_waitx
37f7c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
37f80 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
37f84 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
37f88 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
37f8c 302 2D 00 64 FD |                 ret
37f90 303             | 
37f90 303             | host_reset
37f90 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
37f94 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
37f98 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
37f98 305 BD 01 05 FF 
37f9c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
37fa0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
37fa4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
37fa8 309             | ' Check to see if the system clock has been changed.
37fa8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
37fac 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
37fb0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
37fb4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
37fb8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
37fbc 30e 40 46 62 FD |                 dirl    dp
37fc0 30f             | 
37fc0 30f 28 02 64 FD |                 setq    #1
37fc4 310 80 00 80 FF 
37fc8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
37fcc 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
37fd0 313             | .enable
37fd0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
37fd4 314 41 46 62 FD |                 dirh    dp
37fd8 315 1F 36 63 FD |                 waitx   _1us_
37fdc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37fe0 317             | 
37fe0 317             |                 ' Handle Port protection enable and startup delay
37fe0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
37fe4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
37fe8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
37fec 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
37ff0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
37ff4 31c             | 
37ff4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
37ff8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
37ffc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38000 31f 00 00 04 F6 |                 mov     0-0, #0
38004 320             | .regloop
38004 320             | 
38004 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38004 320             | 
38004 320             | discon_entry
38004 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
38008 321             | 
38008 321             |               
38008 321             |         if HAVE_HIDPAD
38008 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3800c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38010 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38014 324 F7 01 68 FC |                 wrlong  #0,pb
38018 325             |         end
38018 325             |         if EMUPAD_MAX_PLAYER > 0
38018 325             |         end
38018 325             | 
38018 325             |                 ' Fall through to disconnected loop
38018 325             | 
38018 325             | '-----------------------------------------------------------------------------------------------------------------
38018 325             | ' Device connect handling (Section 7.1.7.3).
38018 325             | '-----------------------------------------------------------------------------------------------------------------
38018 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
38018 325             | ' device to connect (Section 7.1.7.3).
38018 325             | '-----------------------------------------------------------------------------------------------------------------
38018 325             | disconnected
38018 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3801c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
38020 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38024 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
38028 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3802c 32a             |         if ACTIVITY_LED >= 0
3802c 32a             |         end
3802c 32a 22 A7 82 FA |                 rqpin   urx, dm
38030 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38034 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38038 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3803c 32e             | .se1_test
3803c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38040 32f FC FE BF FD |                 call    #poll_waitx
38044 330 22 A7 82 FA |                 rqpin   urx, dm
38048 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3804c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38050 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38054 334             | .se1            'SE1 is a fatal error condition
38054 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38058 335 E4 FE BF FD |                 call    #poll_waitx
3805c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38060 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38064 338             | .connect_test                                           ' Test lines until stable J/K state seen
38064 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38068 339 22 A7 82 FA |                 rqpin   urx, dm
3806c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38070 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38074 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38078 33d             | connected
38078 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3807c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38080 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38084 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38088 341             | .set_pulse
38088 341 1A 64 63 FD |                 getct   _pulse_time_
3808c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38090 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38090 343             | ' of 1ms and make a correction, if necessary.
38090 343             | '                mov     htmp, _1ms_
38090 343             | '                subs    htmp, iframe_delta
38090 343             | '                adds    _frame1ms_clks_, htmp
38090 343             | '                debug(udec(_frame1ms_clks_))
38090 343             | 
38090 343             |                 ' Fall through to idle/processing loop
38090 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38094 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38098 345             | 
38098 345             | hidle
38098 345 22 A7 82 FA |                 rqpin   urx, dm
3809c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
380a0 347 98 00 90 CD |         if_c    jmp     #.se0_test
380a4 348 24 06 70 FD |                 pollct3                         wc
380a8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
380ac 34a 1A 94 63 FD |                 getct   hct3
380b0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
380b4 34c             | 
380b4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
380b8 34d 00 70 E3 F8 |                 getbyte htmp
380bc 34e             | 
380bc 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
380c0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
380c4 350 40 00 90 AD |         if_z    jmp     #.poll
380c8 351             | 
380c8 351             |         if _HAVE_GAMEPAD
380c8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
380cc 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
380d0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
380d4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
380d8 355 2C 00 90 AD |         if_z    jmp     #.poll
380dc 356             |         end
380dc 356             | 
380dc 356             |         if HAVE_MOUSE
380dc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
380e0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
380e4 358 20 00 90 AD |         if_z    jmp     #.poll
380e8 359             |         end
380e8 359             | 
380e8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
380ec 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
380f0 35b 14 00 90 AD |         if_z    jmp     #.poll
380f4 35c             | 
380f4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
380f8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
380fc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38100 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38104 360             |         if HAVE_MOUSE
38104 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
38108 361             |         else
38108 361             |         end
38108 361             | 
38108 361             | .poll
38108 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3810c 362 2D EC 63 FD |                 call    pa
38110 363             | .skip_poll
38110 363             | 
38110 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38114 364             | 
38114 364             | .nopoll
38114 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
38118 365 44 00 90 AD |         if_z    jmp     #hsuspend
3811c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
38120 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
38124 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
38128 369 1A 84 63 FD |                 getct   hr0
3812c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
38130 36b             |         if ACTIVITY_LED >= 0
38130 36b             |         end
38130 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
38134 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
38138 36d 5C FF 9F FD |                 jmp     #hidle
3813c 36e             | ' Check for extended SE0 state on the bus
3813c 36e             | .se0_test
3813c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
38140 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
38144 370 22 A7 82 FA |                 rqpin   urx, dm
38148 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3814c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38150 373 24 F6 BF FD |                 call    #wait_txn_ok
38154 374 00 00 80 FF 
38158 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3815c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3815c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38160 377             | 
38160 377             | hsuspend
38160 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
38164 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
38168 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3816c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38170 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38174 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38178 37d             | 
38178 37d             |                 ' Fall through to resume wait loop
38178 37d             | 
38178 37d             | hwait_resume
38178 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3817c 37e 02 86 47 F0 |                 shr     hr1, #2
38180 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38184 380             |         if ACTIVITY_LED >= 0
38184 380             |         end
38184 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38188 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3818c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38190 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38194 384 18 00 90 AD |         if_z    jmp     #.resume
38198 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3819c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
381a0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
381a4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
381a8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
381ac 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
381b0 38b             | .resume
381b0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
381b4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
381b8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
381bc 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
381c0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
381c4 390 1F 70 63 FD |                 waitx   htmp
381c8 391 22 07 28 FC |                 wypin   #OUT_J, dm
381cc 392 01 70 47 F0 |                 shr     htmp, #1
381d0 393 1F 70 63 FD |                 waitx   htmp
381d4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
381d8 395 1A 92 62 FD |                 getct   iframe_ct_base
381dc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
381e0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
381e4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
381e8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
381ec 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
381f0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
381f4 39c             | 
381f4 39c             | '------------------------------------------------------------------------------
381f4 39c             | ' Send preamble to enable low-speed HUB ports
381f4 39c             | '------------------------------------------------------------------------------
381f4 39c             | ' On entry:
381f4 39c             | ' On exit:
381f4 39c             | '   USB baud rate set to low-speed
381f4 39c             | '------------------------------------------------------------------------------
381f4 39c             | utx_pre
381f4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
381f8 39d 40 46 62 FD |                 dirl    dp
381fc 39e 28 02 64 FD |                 setq    #1
38200 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38204 3a0 58 44 62 FD |                 drvl    dm
38208 3a1 59 46 62 FD |                 drvh    dp
3820c 3a2             | 
3820c 3a2 1E 00 00 FF 
38210 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38214 3a4             | 
38214 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
38218 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3821c 3a6 28 02 64 3D |         if_nc   setq    #1
38220 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
38224 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
38228 3a9             | .l1
38228 3a9             | 
38228 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3822c 3aa 40 46 62 FD |                 dirl    dp
38230 3ab 28 02 64 FD |                 setq    #1
38234 3ac 80 00 80 FF 
38238 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3823c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
38240 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38244 3b0 41 46 62 FD |                 dirh    dp
38248 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3824c 3b2             | 
3824c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38250 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38254 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38258 3b5             | 
38258 3b5             | hlut_end
38258 3b5             |                 fit     $400
38258 3b5             |                 orgh
38258                 | if OVERLAP_MEMORY
38258                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38258                 | end
38258                 | '------------------------------------------------------------------------------
38258                 | ' Routines called from cog space.
38258                 | '------------------------------------------------------------------------------
38258                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38258                 | '------------------------------------------------------------------------------
38258                 | 
38258                 | '------------------------------------------------------------------------------
38258                 | ' USB host cog initialization.
38258                 | '------------------------------------------------------------------------------
38258                 | usb_host_init
38258                 |                 ' Initialize buffer pointers
38258                 |         if OVERLAP_MEMORY
38258                 |         else
38258     40 15 B0 FE |                 loc     pb, #hid_descr
3825c                 |         end
3825c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38260                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38260                 |                 {
38260                 |                 }
38260                 |         
38260                 |                 {
38260                 |                 }
38260                 |                 'loc     pb,#hkbd_report
38260                 |                 'mov     hkbd_report_p,pb
38260                 | 
38260     08 1D B0 FE |                 loc     pb, #hub_descr
38264     F7 4D 02 F6 |                 mov     hub_descr_p, pb
38268     1D 1D B0 FE |                 loc     pb, #urx_buff
3826c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38270     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38274     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38278     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3827c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38280     18 15 B0 FE |                 loc     pb, #usb_cache_start
38284     F7 55 02 F6 |                 mov     cache_start_p, pb
38288     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3828c     F7 57 02 F6 |                 mov     cache_end_p, pb
38290                 | 
38290                 |         if ERROR_LED >= 0
38290                 |         end
38290                 | 
38290                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38290                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38290                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38290                 | ' Configure and enable the Serial Host USB port.
38290     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38294                 | 
38294                 | '------------------------------------------------------------------------------
38294                 | ' Timing calculations happen before any interrupt(s) are enabled.
38294                 | '------------------------------------------------------------------------------
38294                 | ' On entry:
38294                 | '   htmp - current CLKFREQ value.
38294                 | '------------------------------------------------------------------------------
38294                 | hinit_usb_timings
38294                 | '                getct   htmp2
38294     B8 59 02 F6 |                 mov     save_sysclk, htmp
38298     8D 5B 80 FF 
3829c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
382a0     18 30 63 FD |                 getqx   _12Mbps_
382a4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
382a8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
382ac     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
382b0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
382b4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
382b8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
382bc     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
382c0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
382c4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
382c8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
382cc     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
382d0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
382d4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
382d8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
382dc     80 00 00 FF 
382e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
382e4     18 2C 63 FD |                 getqx   _var_64_lower_
382e8     19 2E 63 FD |                 getqy   _var_64_upper_
382ec     28 2C 63 FD |                 setq    _var_64_lower_
382f0     65 CD 1D FF 
382f4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
382f8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
382fc     01 00 00 FF 
38300     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38304     18 2C 63 FD |                 getqx   _var_64_lower_
38308     19 2E 63 FD |                 getqy   _var_64_upper_
3830c     28 2C 63 FD |                 setq    _var_64_lower_
38310     A1 07 00 FF 
38314     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
38318     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3831c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
38320     09 36 57 F0 |                 shr     _1us_, #9               wc
38324     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
38328     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3832c     18 38 63 FD |                 getqx   _10us_
38330     09 38 57 F0 |                 shr     _10us_, #9              wc
38334     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
38338     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3833c     18 3A 63 FD |                 getqx   _33us_
38340     09 3A 57 F0 |                 shr     _33us_, #9              wc
38344     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
38348     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3834c     18 3C 63 FD |                 getqx   _txn_err_
38350     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38354     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38358     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3835c     18 3E 63 FD |                 getqx   _500us_
38360     09 3E 57 F0 |                 shr     _500us_, #9             wc
38364     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
38368     01 00 00 FF 
3836c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38370     18 40 63 FD |                 getqx   _txn_ok_ls_
38374     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38378     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3837c     01 00 00 FF 
38380     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38384     18 42 63 FD |                 getqx   _txn_ok_fs_
38388     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3838c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38390     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38394     05 00 00 FF 
38398     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3839c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
383a0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
383a4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
383a8     1C 00 00 FF 
383ac     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
383b0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
383b4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
383b8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
383bc     00 00 00 FF 
383c0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
383c4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
383c8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
383cc     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
383d0     04 00 00 FF 
383d4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
383d8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
383dc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
383e0     8D 5B 00 FF 
383e4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
383e8     18 4C 63 FD |                 getqx   _preamble_wait_
383ec     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
383f0     01 00 00 FF 
383f4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
383f8     18 2C 63 FD |                 getqx   _var_64_lower_
383fc     19 2E 63 FD |                 getqy   _var_64_upper_
38400     28 2C 63 FD |                 setq    _var_64_lower_
38404     01 00 00 FF 
38408     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3840c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38410     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38414     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
38418     FF FF 7F FF 
3841c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
38420     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
38424     A7 51 03 F6 |                 mov     _2ms_, _1ms_
38428     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3842c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
38430     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38434     A7 55 03 F6 |                 mov     _4ms_, _1ms_
38438     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3843c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
38440     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38444     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
38448     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3844c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38450     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38454     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38458     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3845c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38460     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38464     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
38468     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3846c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38470     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38474     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38478     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3847c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38480     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38484     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38488                 | '        _ret_   mov     _1sec_, save_sysclk
38488                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38488                 | '                ret
38488                 | {
38488                 | }
38488                 | 
38488                 | '------------------------------------------------------------------------------
38488                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38488                 | ' one. If it is, start the task progression that will configure the device for
38488                 | ' use.
38488                 | '------------------------------------------------------------------------------
38488                 | ' On entry:
38488                 | '   hconfig_base - start address of the cached config descriptor chain.
38488                 | ' On exit:
38488                 | '------------------------------------------------------------------------------
38488                 | hparse_con_desc
38488     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3848c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38490     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38494     4E 70 FF F9 |                 movbyts htmp,#%%1032
38498     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3849c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3849c                 | 
3849c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
384a0     6E ED 03 F1 |                 add     pa, hconfig_base
384a4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
384a8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
384a8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
384a8                 | ' that defines a keyboard and/or mouse.
384a8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
384ac                 | .next_intf
384ac     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
384b0     BC 01 90 3D |         if_ae   jmp     #hset_config
384b4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
384b8     75 F3 03 F1 |                 add     ptrb, hnext_desc
384bc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
384c0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
384c4     0C 00 90 AD |         if_z    jmp     #.intf
384c8     80 71 C7 FA |                 rdbyte  htmp, ptrb
384cc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
384d0     D8 FF 9F FD |                 jmp     #.next_intf
384d4                 | .intf
384d4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
384d8     00 90 07 F6 |                 mov     hpar3, #0
384dc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
384e0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
384e4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
384e8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
384ec                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
384ec                 | 
384ec                 | .endp
384ec     80 71 C7 FA |                 rdbyte  htmp, ptrb
384f0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
384f4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
384f8     78 00 90 3D |         if_ae   jmp     #.get_device
384fc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38500     75 F3 03 F1 |                 add     ptrb, hnext_desc
38504     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38508     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3850c     64 00 90 AD |         if_z    jmp     #.get_device
38510     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38514     04 00 90 AD |         if_z    jmp     #.get_ep
38518     D0 FF 9F FD |                 jmp     #.endp
3851c                 | .get_ep
3851c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
38520     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38524     0F 86 67 F0 |                 shl     hr1, #8 + 7
38528     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3852c     3F 00 00 FF 
38530     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38534     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
38538     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3853c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
38540     00 90 0F F2 |                 cmp     hpar3, #0               wz
38544     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
38548     A0 FF 9F FD |                 jmp     #.endp
3854c                 | .in_ep
3854c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38550     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38554                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38554     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38558     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3855c     8C FF 9F FD |                 jmp     #.endp
38560                 | .out_ep
38560     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38564     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
38568                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38568     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3856c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38570     78 FF 9F FD |                 jmp     #.endp
38574                 | 
38574                 | .get_device
38574     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38578     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3857c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38580     68 00 90 AD |         if_z    jmp     #.gamepad
38584     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38588     AC 00 90 AD |         if_z    jmp     #.hub
3858c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38590     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38594     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38598     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3859c     4C 00 90 AD |         if_z    jmp     #.gamepad
385a0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
385a4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
385a8                 | .keyboard
385a8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
385ac                 |         if HAVE_MOUSE
385ac     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
385b0                 |         else
385b0                 |         end
385b0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
385b4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
385b8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
385bc     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
385c0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
385c4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
385c8                 |                 'debug(udec(kb_intf_num))
385c8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
385c8     E0 FE 9F FD |                 jmp     #.next_intf
385cc                 | if HAVE_MOUSE
385cc                 | .mouse
385cc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
385d0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
385d4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
385d8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
385dc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
385e0                 |                 'getbyte ms_interval, hr2, #3
385e0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
385e4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
385e8                 |                 'debug(udec(kb_intf_num))
385e8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
385e8     C0 FE 9F FD |                 jmp     #.next_intf
385ec                 | end
385ec                 | .gamepad
385ec     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
385f0     C7 71 63 F5 |                 xor     htmp, hpar2
385f4     3F 00 00 FF 
385f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
385fc     AC FE 9F AD |         if_z    jmp     #.next_intf
38600                 |         if HAVE_MOUSE
38600     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38604     C7 71 63 F5 |                 xor     htmp, hpar2
38608     3F 00 00 FF 
3860c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38610     98 FE 9F AD |         if_z    jmp     #.next_intf
38614                 |         end
38614     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
38618     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3861c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38620                 | 
38620     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38624     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
38628     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3862c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38630     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38634                 |                 'debug(udec(gp_intf_num))
38634                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38634     74 FE 9F FD |                 jmp     #.next_intf
38638                 | .hub
38638     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3863c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38640     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38644     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
38648     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3864c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38650     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38654     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38658     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3865c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38660     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38664     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38668     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3866c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3866c     3C FE 9F FD |                 jmp     #.next_intf
38670                 | 
38670                 | '------------------------------------------------------------------------------
38670                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38670                 | ' it according to its function, or functions. In the case of this boot protocol
38670                 | ' keyboard/mouse class driver:
38670                 | ' - SetConfiguration(config_num)
38670                 | ' - SetProtocol(boot)
38670                 | ' - SetIdle(indefinite)
38670                 | ' - Enter the device interrupt IN polling task stage.
38670                 | '------------------------------------------------------------------------------
38670                 | ' On entry:
38670                 | ' On exit:
38670                 | '------------------------------------------------------------------------------
38670                 | hset_config
38670                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38670                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38670     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38674     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38678     00 00 0C F2 |                 cmp     0-0, #0                 wz
3867c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38680                 |         if HAVE_MOUSE
38680     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38684                 |         end
38684     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38688     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3868c                 | .set_config
3868c     6C 0E D0 FE |                 loc     ptra, #set_config
38690     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38694     6E ED 03 F1 |                 add     pa, hconfig_base
38698     F6 8D C3 FA |                 rdbyte  hpar1, pa
3869c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
386a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
386a4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
386a8     A0 02 A0 FD |                 call    #control_write
386ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
386b0     2D 00 64 5D |         if_nz   ret
386b4                 | .kbd_config
386b4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
386b8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
386bc                 | 
386bc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
386c0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
386c4     3F 00 00 FF 
386c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
386cc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
386d0                 | 
386d0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
386d4     34 0E D0 FE |                 loc     ptra, #set_protocol
386d8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
386dc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
386e0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
386e4     A0 02 A0 FD |                 call    #control_write
386e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
386ec     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
386f0     E4 02 90 5D |         if_nz   jmp     #.notify_client
386f4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
386f8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
386fc     30 03 B0 FD |                 call    #hset_idle
38700                 |                 'cmp     retval, #PID_ACK        wz
38700                 |         'if_nz   mov     hkbd_ep_addr, #0
38700                 |         'if_nz   jmp     #.notify_client
38700     A8 99 02 F6 |                 mov     hctwait, _2ms_
38704     EF 02 A0 FD |                 call    #poll_waitx
38708     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3870c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38710     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38714     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38718     2C 03 B0 FD |                 call    #hset_kbdled_report
3871c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38720     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38724     B0 02 90 5D |         if_nz   jmp     #.notify_client
38728     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3872c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38730     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38734     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38738     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3873c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38740     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38744     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38748     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3874c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38750     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38754                 |         if !!HAVE_MOUSE
38754                 |         end
38754                 | 
38754                 | .mouse_config
38754                 | if HAVE_MOUSE
38754     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38758     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3875c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38760     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38764     3F 00 00 FF 
38768     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3876c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38770                 | 
38770                 |                 debug("mouse passed addr check")
38770                 | 
38770     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38774     00 00 80 FF 
38778     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3877c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38780     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38784     55 02 A0 FD |                 call    #control_read
38788     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3878c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38790     44 02 90 5D |         if_nz   jmp     #.notify_client
38794     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38798     56 01 00 F6 |                 mov     0-0, total_data
3879c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
387a0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
387a0                 | 
387a0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
387a4     64 0D D0 FE |                 loc     ptra, #set_protocol
387a8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
387ac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
387b0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
387b4     A0 02 A0 FD |                 call    #control_write
387b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
387bc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
387c0     14 02 90 5D |         if_nz   jmp     #.notify_client
387c4                 |                 debug("mouse passed SetProtocol")
387c4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
387c8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
387cc     60 02 B0 FD |                 call    #hset_idle
387d0                 |                 'cmp     retval, #PID_ACK        wz
387d0                 |         'if_nz   mov     hmouse_ep_addr, #0
387d0                 |         'if_nz   jmp     #.notify_client
387d0                 |                 debug("mouse passed SetIdle")
387d0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
387d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
387d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
387dc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
387e0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
387e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
387e8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
387ec     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
387f0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
387f4     3F 00 00 FF 
387f8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
387fc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38800     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38804     D0 01 90 FD |                 jmp     #.notify_client
38808                 | end
38808                 | .gamepad_config
38808                 | if _HAVE_GAMEPAD
38808     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3880c     00 00 0C F2 |                 cmp     0-0, #0                 wz
38810     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38814     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38818     00 70 03 F6 |                 mov     htmp, 0-0
3881c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38820     3F 00 00 FF 
38824     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38828     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3882c                 | 
3882c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38830     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38834     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38838     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3883c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38840     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38844     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38848     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3884c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38850     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38854     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38858     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3885c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38860     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38864                 | 
38864                 |                 if EMUPAD_MAX_PLAYER > 0
38864                 |                 
38864                 | .rule_loop           
38864                 |                 end
38864                 | 
38864     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38868     5C 00 90 AD |         if_e    jmp     #.xinput
3886c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38870     00 70 03 F6 |                 mov     htmp,0-0
38874     01 A6 02 FF 
38878     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3887c     7C 00 90 AD |         if_e    jmp     #.ps3
38880                 | 
38880     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38884     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38888     00 00 80 5F 
3888c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38890     03 00 80 AF 
38894     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38898     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3889c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
388a0     55 02 A0 FD |                 call    #control_read
388a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
388a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
388ac     00 00 04 56 |         if_nz   mov     0-0, #0
388b0     24 01 90 5D |         if_nz   jmp     #.notify_client
388b4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
388b8     56 01 00 F6 |                 mov     0-0, total_data
388bc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
388c0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
388c0                 | 
388c0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
388c4     10 01 90 FD |                 jmp     #.notify_client
388c8                 | .xinput
388c8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
388cc     2D EF 03 F6 |                 mov     pb,hdev_port
388d0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
388d4     03 EE 27 F3 |                 fle     pb,#3
388d8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
388dc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
388e0                 | 
388e0     03 B0 06 F6 |                 mov     pkt_data, #3
388e4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
388e8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
388ec     5A 00 A0 FD |                 call    #txn_out
388f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
388f4                 | 
388f4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
388f8     DC 00 90 FD |                 jmp     #.notify_client
388fc                 | .ps3
388fc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38900     2D EF 03 F6 |                 mov     pb,hdev_port
38904     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38908     04 EE 27 F3 |                 fle     pb,#4
3890c     F7 EF C3 F9 |                 decod   pb
38910     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38914                 | 
38914     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38918     00 0C D0 FE |                 loc     ptra, #set_report
3891c     01 00 80 FF 
38920     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38924     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38928     03 61 5C FC |                 wrword  #48, ptra[wLength]
3892c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38930     A0 02 A0 FD |                 call    #control_write
38934                 | 
38934     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38938     E0 0B D0 FE |                 loc     ptra, #set_report
3893c     01 00 80 FF 
38940     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38944     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38948     03 09 5C FC |                 wrword  #4, ptra[wLength]
3894c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38950     A0 02 A0 FD |                 call    #control_write
38954     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38958     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3895c     00 00 04 56 |         if_nz   mov     0-0, #0
38960     74 00 90 5D |         if_nz   jmp     #.notify_client
38964                 | 
38964     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38968     6C 00 90 FD |                 jmp     #.notify_client
3896c                 | end
3896c                 | 
3896c                 | .hub_config
3896c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38970     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38974     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38978     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3897c     3F 00 00 FF 
38980     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38984     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38988                 | 
38988     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3898c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38990     26 EF 03 F6 |                 mov     pb, hub_descr_p
38994     55 02 A0 FD |                 call    #control_read
38998     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3899c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
389a0     34 00 90 5D |         if_nz   jmp     #.notify_client
389a4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
389a4                 | 
389a4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
389a8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
389ac     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
389b0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
389b0                 | .pwr_loop
389b0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
389b4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
389b8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
389bc     A0 02 A0 FD |                 call    #control_write
389c0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
389c4                 | 
389c4     B1 99 02 F6 |                 mov     hctwait, _500ms_
389c8     B0 99 02 F1 |                 add     hctwait, _100ms_
389cc     EF 02 A0 FD |                 call    #poll_waitx
389d0                 | 
389d0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
389d4     00 00 90 FD |                 jmp     #.notify_client
389d8                 | 
389d8                 | .notify_client
389d8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
389dc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
389e0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
389e0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
389e0     2D 00 64 FD |                 ret
389e4                 | 
389e4                 | '------------------------------------------------------------------------------
389e4                 | ' Initialize the keyboard/mouse data area to start-up values.
389e4                 | '------------------------------------------------------------------------------
389e4                 | ' On entry:
389e4                 | ' On exit:
389e4                 | '------------------------------------------------------------------------------
389e4                 | init_kbdm_data
389e4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
389e8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
389ec                 | 
389ec     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
389f0     2B ED 03 F6 |                 mov     pa, cache_end_p
389f4                 | .loop
389f4     61 01 4C FC |                 wrbyte  #0, ptra++
389f8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
389fc     F4 FF 9F CD |         if_b    jmp     #.loop
38a00                 |         
38a00                 |         if EMUPAD_MAX_PLAYER > 0
38a00                 |         end
38a00                 | 
38a00                 | 
38a00     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38a04                 | .regloop
38a04     00 EC 8F F9 |                 altd    pa
38a08     00 00 04 F6 |                 mov     0-0, #0
38a0c     01 EC 07 F1 |                 add     pa, #1
38a10     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38a14     EC FF 9F 5D |         if_nz   jmp     #.regloop
38a18                 | 
38a18     E1 E1 61 FF 
38a1c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38a20     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38a24     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38a28     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38a2c                 | 
38a2c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38a30                 | 
38a30                 | '------------------------------------------------------------------------------
38a30                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38a30                 | ' function.
38a30                 | '------------------------------------------------------------------------------
38a30                 | ' On entry:
38a30                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38a30                 | '   hpar2 - index number of the target interface.
38a30                 | ' On exit:
38a30                 | '------------------------------------------------------------------------------
38a30                 | hset_idle
38a30     A8 99 02 F6 |                 mov     hctwait, _2ms_
38a34     EF 02 A0 FD |                 call    #poll_waitx
38a38     D8 0A D0 FE |                 loc     ptra, #set_idle
38a3c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38a40     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38a44     A0 02 80 FD |                 jmp     #control_write
38a48                 | 
38a48                 | '------------------------------------------------------------------------------
38a48                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38a48                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38a48                 | '------------------------------------------------------------------------------
38a48                 | ' On entry:
38a48                 | '   ep_addr_pid - device address and enpoint for the request.
38a48                 | ' On exit:
38a48                 | '   retval - transaction result.
38a48                 | '------------------------------------------------------------------------------
38a48                 | hset_kbdled_report
38a48     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38a4c     CC 0A D0 FE |                 loc     ptra, #set_report
38a50     01 00 80 FF 
38a54     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38a58     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38a5c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38a60     27 EF 03 F6 |                 mov     pb, urx_buff_p
38a64     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38a68     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38a6c                 | 
38a6c                 | '------------------------------------------------------------------------------
38a6c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38a6c                 | '------------------------------------------------------------------------------
38a6c                 | ' On entry:
38a6c                 | ' On exit:
38a6c                 | '------------------------------------------------------------------------------
38a6c                 | hget_kbd_in_report
38a6c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38a70     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38a74     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38a78     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38a7c     CF 02 A0 FD |                 call    #do_int_in
38a80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a84     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38a88                 | 
38a88     00 90 0F F2 |                 cmp     hpar3, #0               wz
38a8c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38a90                 | 
38a90     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38a94     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38a98     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38a9c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38aa0                 | 
38aa0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38aa4     18 00 B0 FD |                 call    #hkbd_compare
38aa8                 |         if EMUPAD_MAX_PLAYER > 0
38aa8                 |         end
38aa8                 | 
38aa8                 | .led_check
38aa8     3B 71 03 F6 |                 mov     htmp, kb_led_states
38aac     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38ab0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38ab4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38ab8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38abc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38ac0                 | 
38ac0                 | '------------------------------------------------------------------------------
38ac0                 | ' Compare current and previous keyboard data buffers for keypress changes.
38ac0                 | '------------------------------------------------------------------------------
38ac0                 | hkbd_compare
38ac0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38ac4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38ac8     61 73 07 FB |                 rdlong  htmp1, ptra++
38acc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38ad0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38ad4     61 73 07 FB |                 rdlong  htmp1, ptra++
38ad8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38adc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38ae0     2D 00 64 AD |         if_z    ret
38ae4                 | 
38ae4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38ae8                 | 
38ae8                 |                 ' Handle modifiers
38ae8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38aec     00 87 C7 FA |                 rdbyte  hr1, ptra
38af0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38af4     63 86 63 FD |                 mergew  hr1
38af8     08 EC 07 F6 |                 mov     pa,#8
38afc                 | .modloop
38afc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38b00     E8 8C 07 F6 |                 mov     hpar1,#$E8
38b04     F6 8D 83 F1 |                 sub     hpar1,pa
38b08     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38b0c     FB ED 6F FB |                 djnz    pa,#.modloop
38b10                 | 
38b10     6F E0 75 FD | .release        modc    _set    wc
38b14                 |                 'alts    hdev_port, #hid_report_p
38b14                 |                 'mov     ptra, hid_report_p
38b14     02 F0 07 F1 |                 add     ptra, #2
38b18     06 EC 07 F6 |                 mov     pa, #6
38b1c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38b20     20 00 90 AD |         if_z    jmp     #.rl3
38b24     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38b28     02 F2 07 F1 |                 add     ptrb, #2
38b2c     06 EE 07 F6 |                 mov     pb, #6
38b30     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38b34     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38b38     08 00 90 AD |         if_z    jmp     #.rl3
38b3c     FC EF 6F FB |                 djnz    pb, #.rl2
38b40     68 00 B0 FD |                 call    #hkbd_translate
38b44     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38b48                 | 
38b48     00 90 07 F6 |                 mov     hpar3, #0
38b4c     1F 90 27 F4 |                 bith    hpar3, #31
38b50                 | 
38b50     6F 00 74 FD | .press          modc    _clr    wc
38b54     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38b58     02 F0 07 F1 |                 add     ptra, #2
38b5c     06 EC 07 F6 |                 mov     pa, #6
38b60     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38b64     20 00 90 AD |         if_z    jmp     #.pl3
38b68     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38b6c     02 F2 07 F1 |                 add     ptrb, #2
38b70     06 EE 07 F6 |                 mov     pb, #6
38b74     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38b78     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38b7c     08 00 90 AD |         if_z    jmp     #.pl3
38b80     FC EF 6F FB |                 djnz    pb, #.pl2
38b84     24 00 B0 FD |                 call    #hkbd_translate
38b88     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38b8c                 | 
38b8c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38b90     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38b94     28 02 64 FD |                 setq #1
38b98     61 73 07 FB |                 rdlong  htmp1, ptra++
38b9c     28 02 64 FD |                 setq #1
38ba0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38ba4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38ba8                 | 
38ba8     2D 00 64 FD |                 ret
38bac                 | 
38bac                 | '------------------------------------------------------------------------------
38bac                 | ' Translate keyboard scancode to ASCII
38bac                 | '------------------------------------------------------------------------------
38bac                 | ' On entry:
38bac                 | '   hpar1 - scancode
38bac                 | '   hpar2 - key modifiers state
38bac                 | '       c - pressed (0) or released (1) flag
38bac                 | ' On exit:
38bac                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38bac                 | '               30..17 = unused
38bac                 | '                   18 = scroll-lock state 
38bac                 | '                   17 = caps-lock state
38bac                 | '                   16 = num-lock state 
38bac                 | '                15..8 = key modifiers state
38bac                 | '                 7..0 = scancode
38bac                 | '------------------------------------------------------------------------------
38bac                 | hkbd_translate
38bac     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38bb0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38bb4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38bb8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38bbc     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38bc0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38bc4                 | 
38bc4                 |         if EMUPAD_MAX_PLAYER > 0
38bc4                 | 
38bc4                 |         if EMUPAD_BT0_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT1_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT2_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT3_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT4_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT5_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT6_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT7_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT8_BIT >= 0
38bc4                 |         end
38bc4                 |         if EMUPAD_BT9_BIT >= 0
38bc4                 |         end
38bc4                 | 
38bc4                 |         end
38bc4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38bc8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38bcc     1F 8C 47 F4 |                 bitc    hpar1, #31
38bd0                 |         if KEYQUEUE_SIZE > 0
38bd0     C4 09 B0 FE |                 loc pb,#keyq_head
38bd4     F7 71 E3 FA |                 rdword htmp,pb
38bd8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38bdc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38be0     B8 75 03 F6 |                 mov htmp2,htmp
38be4     04 74 07 FA |                 mul htmp2,#4
38be8     F7 75 03 F1 |                 add htmp2,pb
38bec     02 74 07 F1 |                 add htmp2,#2
38bf0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38bf4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38bf8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38bfc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38c00                 |         end
38c00     2D 00 7C FD |                 ret wcz
38c04                 | 
38c04                 | if HAVE_MOUSE
38c04                 | '------------------------------------------------------------------------------
38c04                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38c04                 | '------------------------------------------------------------------------------
38c04                 | ' On entry:
38c04                 | ' On exit:
38c04                 | '------------------------------------------------------------------------------
38c04                 | hget_mouse_in_report
38c04     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38c08     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38c0c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38c10     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38c14     CF 02 A0 FD |                 call    #do_int_in
38c18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c1c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38c20                 | 
38c20     00 90 0F F2 |                 cmp     hpar3, #0               wz
38c24     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38c28                 | 
38c28     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38c2c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38c30     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38c34     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38c38                 | 
38c38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38c3c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38c40     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38c44     01 90 87 31 |         if_ae   sub     hpar3, #1
38c48                 | 
38c48     40 09 90 FE |                 loc     pa, #mouse_limits
38c4c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38c50                 | 
38c50                 |                 ' load xacc,yacc,zacc
38c50     28 04 64 FD |                 setq    #3-1
38c54     80 87 07 FB |                 rdlong  hr1,ptrb
38c58                 |                 ' load limits and outptr
38c58     28 04 64 FD |                 setq    #3-1
38c5c     F6 73 03 FB |                 rdlong  htmp1,pa
38c60                 | 
38c60     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38c64     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38c68     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38c6c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38c70     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38c74     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38c78     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38c7c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38c80                 |               
38c80                 | 
38c80     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38c84     07 70 67 F7 |                 signx   htmp, #7
38c88     B8 87 03 F1 |                 add     hr1,htmp
38c8c     00 72 0F F2 |                 cmp     htmp1,#0 wz
38c90     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38c94     00 86 47 53 |         if_ne   fges    hr1,#0
38c98                 | 
38c98     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38c9c     07 70 67 F7 |                 signx   htmp, #7
38ca0     B8 89 03 F1 |                 add     hr2,htmp
38ca4     00 74 0F F2 |                 cmp     htmp2,#0 wz
38ca8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38cac     00 88 47 53 |         if_ne   fges    hr2,#0
38cb0                 |                 
38cb0                 | 
38cb0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38cb4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38cb8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38cbc     B8 8B 03 A1 |         if_z    add     hr3,htmp
38cc0                 | 
38cc0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38cc4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38cc8                 | 
38cc8                 |                 ' write back accumulators
38cc8     28 04 64 FD |                 setq    #3-1
38ccc     80 87 67 FC |                 wrlong  hr1,ptrb
38cd0                 |                 ' if outptr set, write X/Y words
38cd0     00 76 0F F2 |                 cmp htmp3,#0                    wz
38cd4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38cd8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38cdc     2D 00 64 FD |                 ret
38ce0                 | end
38ce0                 | 
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | ' On entry:
38ce0                 | ' On exit:
38ce0                 | '------------------------------------------------------------------------------
38ce0                 | if _HAVE_GAMEPAD
38ce0                 | hget_gp_in_report
38ce0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38ce4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38ce8                 | 
38ce8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38cec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38cf0     00 90 E3 F8 |                 getbyte hpar3
38cf4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38cf8     CF 02 A0 FD |                 call    #do_int_in
38cfc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38d04                 | 
38d04     00 90 0F F2 |                 cmp     hpar3, #0               wz
38d08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38d0c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38d0c                 | 
38d0c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38d10     00 70 E3 F8 |                 getbyte htmp                            ' |
38d14     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38d18     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38d1c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38d20     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38d24     B8 01 C0 F8 |                 setbyte htmp                            ' |
38d28                 | 
38d28                 | ' Note: the following code compares the current and previous reports
38d28                 | ' and process the data if there are changes to ease the debug output.
38d28                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38d28                 | ' gpPreReport buffer.
38d28                 | 
38d28                 |                 ' ----- start of block to remove
38d28                 |                 {
38d28                 |                 }
38d28                 |                 ' ----- end of block to remove
38d28     F4 04 90 FE |                 loc pa,#hpad_translate
38d2c     2A EC 63 FD |                 push pa
38d30                 | 
38d30                 |                 ' FALL THROUGH !!!!
38d30                 | 
38d30                 | '------------------------------------------------------------------------------
38d30                 | ' Decode controller report
38d30                 | '------------------------------------------------------------------------------
38d30                 | hid_decode
38d30                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38d30     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38d34     00 04 00 FF 
38d38     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38d3c                 | 
38d3c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38d40                 | 
38d40     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38d44     00 2A E3 F8 |                 getbyte hidr_type
38d48     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38d4c     34 02 90 AD |         if_z    jmp     #hpad_xinput
38d50     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38d54     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38d58     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38d5c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38d60     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38d64                 |                 
38d64                 | 
38d64                 | '------------------------------------------------------------------------------
38d64                 | ' Handle HID controller (or mouse now
38d64                 | ' On entry:
38d64                 | '   ptrb - controller report
38d64                 | '------------------------------------------------------------------------------
38d64                 | hpad_hid
38d64     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38d68     F7 F1 03 F6 |                 mov     ptra, pb
38d6c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38d70     00 EC 03 F6 |                 mov     pa, 0-0
38d74                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38d74     19 2A 3B FF 
38d78     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38d7c                 | 
38d7c                 | .next
38d7c     00 EC 5F F2 |                 cmps    pa, #0      wcz
38d80     2D 00 7C ED |         if_be   ret     wcz
38d84                 | 
38d84     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38d88     01 EC 87 F1 |                 sub     pa, #1
38d8c     00 8E 07 F6 |                 mov     hpar2, #0
38d90                 | 
38d90     C6 71 03 F6 |                 mov     htmp, hpar1
38d94     03 70 07 F5 |                 and     htmp, #$03
38d98     01 70 0F F2 |                 cmp     htmp, #1    wz
38d9c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
38da0     07 8E 67 A7 |         if_z    signx   hpar2,#7
38da4     01 EC 87 A1 |         if_z    sub     pa, #1
38da8     02 70 0F F2 |                 cmp     htmp, #2    wz
38dac     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
38db0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
38db4     02 EC 87 A1 |         if_z    sub     pa, #2
38db8     03 70 0F F2 |                 cmp     htmp, #3    wz
38dbc     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
38dc0     04 EC 87 A1 |         if_z    sub     pa, #4
38dc4                 | 
38dc4     FC 8C 07 F5 |                 and     hpar1, #$FC
38dc8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
38dc8                 | 
38dc8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
38dcc     0C 01 90 AD |         if_z    jmp     #.report_id
38dd0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
38dd4     24 01 90 AD |         if_z    jmp     #.usage_page
38dd8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
38ddc     2C 01 90 AD |         if_z    jmp     #.usage
38de0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
38de4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
38de8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
38dec     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
38df0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
38df4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
38df8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
38dfc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
38e00     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
38e04     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
38e08     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
38e0c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
38e10     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
38e14     64 FF 9F 5D |         if_nz   jmp     #.next
38e18                 | 
38e18     D8 1D A7 FB |                 tjf     hidr_state,#.next
38e1c                 | 
38e1c     03 8E 07 F5 |                 and     hpar2, #$03
38e20     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
38e24     18 00 90 5D |         if_nz   jmp     #.skip
38e28                 | 
38e28     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
38e2c     20 00 90 AD |         if_z    jmp     #.axes
38e30     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
38e34     5C 00 90 AD |         if_z    jmp     #.hats
38e38     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
38e3c     70 00 90 AD |         if_z    jmp     #.buttons
38e40                 | .skip
38e40     8F 71 03 F6 |                 mov     htmp, hidr_size
38e44     90 71 03 FA |                 mul     htmp, hidr_count
38e48     B8 23 03 F1 |                 add     hidr_offset, htmp
38e4c     2C FF 9F FD |                 jmp     #.next
38e50                 | .axes
38e50                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
38e50     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
38e54     90 87 03 F6 |                 mov     hr1, hidr_count
38e58                 | .l1
38e58     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38e5c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38e60     04 03 B0 FD |                 call    #hpad_getbits
38e64     64 03 B0 FD |                 call    #hpad_normalize
38e68     06 84 1F F2 |                 cmp     hr0, #6         wcz
38e6c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
38e70     00 88 43 C8 |         if_b    getnib  hr2
38e74     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
38e78     5F 01 20 C9 |         if_b    setword retval
38e7c     01 84 07 C1 |         if_b    add     hr0, #1
38e80     8F 23 03 F1 |                 add     hidr_offset, hidr_size
38e84     F4 87 6F FB |                 djnz    hr1, #.l1
38e88                 | 
38e88     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
38e8c     01 1C 07 F6 |                 mov     hidr_state, #1
38e90     E8 FE 9F FD |                 jmp     #.next
38e94                 | .hats
38e94                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
38e94     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38e98     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38e9c     C8 02 B0 FD |                 call    #hpad_getbits
38ea0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
38ea4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
38ea8     01 1C 07 F6 |                 mov     hidr_state, #1
38eac     90 FF 9F FD |                 jmp     #.skip
38eb0                 | .buttons
38eb0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
38eb0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38eb4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38eb8     90 8F 03 FA |                 mul     hpar2, hidr_count
38ebc     A8 02 B0 FD |                 call    #hpad_getbits
38ec0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
38ec4     B8 BF 62 F0 |                 shl     retval, htmp
38ec8     5F 17 43 F5 |                 or      hidr_buttons, retval
38ecc     90 71 03 F1 |                 add     htmp, hidr_count
38ed0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
38ed4     01 1C 07 F6 |                 mov     hidr_state, #1
38ed8     64 FF 9F FD |                 jmp     #.skip
38edc                 | .report_id
38edc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
38ee0     2D 00 7C 5D |         if_nz   ret     wcz
38ee4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
38ee8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
38eec     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
38ef0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
38ef4     01 F2 87 51 |         if_nz   sub     ptrb,#1
38ef8     80 FE 9F FD |                 jmp     #.next
38efc                 | .usage_page
38efc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
38f00     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
38f04     04 1C 07 A6 |         if_z    mov     hidr_state, #4
38f08     70 FE 9F FD |                 jmp     #.next
38f0c                 | .usage
38f0c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
38f10     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
38f14     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
38f18     01 1C 07 A6 |         if_z    mov     hidr_state, #1
38f1c     5C FE 9F AD |         if_z    jmp     #.next
38f20     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
38f24     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
38f28     01 1C 07 A6 |         if_z    mov     hidr_state, #1
38f2c     4C FE 9F AD |         if_z    jmp     #.next
38f30     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
38f34     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
38f38     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
38f3c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
38f40     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
38f44     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
38f48     10 00 90 AD |         if_z    jmp     #.usage_axis
38f4c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
38f50     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
38f54     03 1C 07 A6 |         if_z    mov     hidr_state, #3
38f58     20 FE 9F FD |                 jmp     #.next
38f5c                 | .usage_axis
38f5c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
38f60     18 FE 9F CD |         if_b    jmp     #.next
38f64     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
38f68     C7 01 00 F8 |                 setnib  hpar2
38f6c                 | 
38f6c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
38f70     C7 8F C3 F9 |                 decod   hpar2
38f74     C7 0F 43 F5 |                 or      hidr_flags, hpar2
38f78                 | 
38f78     01 24 07 F1 |                 add     hidr_usage_idx, #1
38f7c     02 1C 07 F6 |                 mov     hidr_state, #2
38f80     F8 FD 9F FD |                 jmp     #.next
38f84                 | 
38f84                 | '------------------------------------------------------------------------------
38f84                 | ' Handle XInput controller
38f84                 | ' On entry:
38f84                 | '   ptrb - controller report
38f84                 | '------------------------------------------------------------------------------
38f84                 | '   Default implementation translates the report to a pseudo-defacto hid
38f84                 | '   standard and jumps to hpad_translate for actions.
38f84                 | '   Implementors may take specific actions for this kind of controller.
38f84                 | '------------------------------------------------------------------------------
38f84                 | hpad_xinput
38f84     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
38f88     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
38f8c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
38f90     14 70 0F F2 |                 cmp     htmp, #$14      wz
38f94     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
38f98                 | 
38f98                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
38f98                 | 
38f98     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
38f9c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
38fa0                 | 
38fa0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
38fa4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
38fa8     5F BF 22 F6 |                 not     retval
38fac     5F 11 2B F9 |                 setword hidr_axis, retval, #1
38fb0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
38fb4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
38fb8     5F BF 22 F6 |                 not     retval
38fbc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
38fc0                 | 
38fc0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
38fc4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
38fc8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
38fcc     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
38fd0     F8 01 B0 FD |                 call    #hpad_normalize
38fd4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
38fd8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
38fdc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
38fe0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
38fe4     E4 01 B0 FD |                 call    #hpad_normalize
38fe8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
38fec                 | 
38fec     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
38ff0     81 BF E6 FA |                 rdword  retval, ptrb[1]
38ff4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
38ff8     00 16 47 F4 |                 bitc    hidr_buttons, #0
38ffc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39000     01 16 47 F4 |                 bitc    hidr_buttons, #1
39004     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39008     02 16 47 F4 |                 bitc    hidr_buttons, #2
3900c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39010     03 16 47 F4 |                 bitc    hidr_buttons, #3
39014     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
39018     04 16 47 F4 |                 bitc    hidr_buttons, #4
3901c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
39020     05 16 47 F4 |                 bitc    hidr_buttons, #5
39024     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
39028     08 16 47 F4 |                 bitc    hidr_buttons, #8
3902c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39030     09 16 47 F4 |                 bitc    hidr_buttons, #9
39034     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39038     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3903c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39040     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39044     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39048     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3904c                 | 
3904c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39050     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39054     7A BB 7A FF 
39058     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3905c     F9 FF 7F FF 
39060     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39064     B9 71 5F F9 |                 altgn   htmp, #htmp1
39068     00 70 43 F8 |                 getnib  htmp
3906c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39070                 | 
39070     AC 01 90 FD |                 jmp     #hpad_translate
39074                 | 
39074                 | '------------------------------------------------------------------------------
39074                 | ' Handle PS3 controller
39074                 | ' On entry:
39074                 | '   ptrb - controller report
39074                 | '------------------------------------------------------------------------------
39074                 | '   Default implementation translates the report to a pseudo-defacto hid
39074                 | '   standard and jumps to hpad_translate for actions.
39074                 | '   Implementors may take specific actions for this kind of controller.
39074                 | '------------------------------------------------------------------------------
39074                 | hpad_ps3
39074     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39078     01 70 0F F2 |                 cmp     htmp, #$01      wz
3907c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39080                 | 
39080                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39080                 | 
39080     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39084     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39088     40 01 B0 FD |                 call    #hpad_normalize
3908c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39090     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39094     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39098     30 01 B0 FD |                 call    #hpad_normalize
3909c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
390a0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
390a4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
390a8     20 01 B0 FD |                 call    #hpad_normalize
390ac     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
390b0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
390b4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
390b8     10 01 B0 FD |                 call    #hpad_normalize
390bc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
390c0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
390c4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
390c8                 | 
390c8     08 8C 07 F6 |                 mov     hpar1, #8
390cc     13 8E 07 F6 |                 mov     hpar2, #19
390d0     94 00 B0 FD |                 call    #hpad_getbits
390d4                 | 
390d4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
390d8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
390dc     00 16 47 F4 |                 bitc    hidr_buttons, #0
390e0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
390e4     01 16 47 F4 |                 bitc    hidr_buttons, #1
390e8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
390ec     02 16 47 F4 |                 bitc    hidr_buttons, #2
390f0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
390f4     03 16 47 F4 |                 bitc    hidr_buttons, #3
390f8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
390fc     04 16 47 F4 |                 bitc    hidr_buttons, #4
39100     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39104     05 16 47 F4 |                 bitc    hidr_buttons, #5
39108     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3910c     06 16 47 F4 |                 bitc    hidr_buttons, #6
39110     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39114     07 16 47 F4 |                 bitc    hidr_buttons, #7
39118     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3911c     08 16 47 F4 |                 bitc    hidr_buttons, #8
39120     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
39124     09 16 47 F4 |                 bitc    hidr_buttons, #9
39128     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3912c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39130     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
39134     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39138     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3913c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39140                 | 
39140     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39144     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
39148     09 FA 79 FF 
3914c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39150     FF FA 7F FF 
39154     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39158     B9 71 5F F9 |                 altgn   htmp, #htmp1
3915c     00 70 43 F8 |                 getnib  htmp
39160     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39164                 | 
39164     B8 00 90 FD |                 jmp     #hpad_translate
39168                 | 
39168                 | '------------------------------------------------------------------------------
39168                 | ' Read bits from report data buffer
39168                 | '------------------------------------------------------------------------------
39168                 | ' On entry:
39168                 | '   PTRB - report buffer
39168                 | '   hpar1 - start bit
39168                 | '   hpar2 - number of bits
39168                 | ' On exit:
39168                 | '   retval - bits
39168                 | '------------------------------------------------------------------------------
39168                 | hpad_getbits
39168     C6 71 03 F6 |                 mov     htmp, hpar1
3916c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39170     F9 71 03 F1 |                 add     htmp, ptrb
39174     B8 BF 02 FB |                 rdlong  retval, htmp
39178                 | 
39178     C6 73 03 F6 |                 mov     htmp1, hpar1
3917c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39180     B9 BF 42 F0 |                 shr     retval, htmp1
39184                 | 
39184     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39188     10 00 90 1D |         if_a    jmp     #.l1
3918c                 | 
3918c     C7 8F C3 F9 |                 decod   hpar2
39190     01 8E 87 F1 |                 sub     hpar2, #1
39194     C7 BF 02 F5 |                 and     retval, hpar2
39198     2D 00 64 FD |                 ret
3919c                 | .l1
3919c     FF 7F 00 FF 
391a0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
391a4     03 70 07 F1 |                 add     htmp, #3
391a8     B8 75 03 FB |                 rdlong  htmp2, htmp
391ac     18 8E 87 F1 |                 sub     hpar2, #24
391b0     C7 8F C3 F9 |                 decod   hpar2
391b4     01 8E 87 F1 |                 sub     hpar2, #1
391b8     B9 75 43 F0 |                 shr     htmp2, htmp1
391bc     C7 75 03 F5 |                 and     htmp2, hpar2
391c0     18 74 67 F0 |                 shl     htmp2, #24
391c4     BA BF 42 F5 |                 or      retval, htmp2
391c8     2D 00 64 FD |                 ret
391cc                 | 
391cc                 | '------------------------------------------------------------------------------
391cc                 | ' Normalize value to signed word (-32768 / 32767)
391cc                 | '------------------------------------------------------------------------------
391cc                 | ' On entry:
391cc                 | '   retval - value to normalize
391cc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
391cc                 | '   - or -
391cc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
391cc                 | '   hidr_size - value bits length
391cc                 | ' On exit:
391cc                 | '   retval - normalized value
391cc                 | '------------------------------------------------------------------------------
391cc                 | hpad_normalize
391cc     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
391d0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
391d4     2D 00 64 AD |         if_z    ret
391d8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
391dc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
391e0     0F 72 77 F7 |                 signx   htmp1, #15      wc
391e4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
391e8     00 BE 66 C7 |         if_c    signx   retval, #0-0
391ec     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
391f0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
391f4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
391f8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
391fc     B8 71 53 F6 |                 abs     htmp            wc
39200     1F BE 0E F4 |                 testb   retval, #31     wz
39204     5F BF 42 F6 |                 abs     retval
39208     B8 BF 12 FD |                 qdiv    retval, htmp
3920c     18 BE 62 FD |                 getqx   retval
39210     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39214     C0 FF 7F FF 
39218     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3921c     2D 00 64 FD |                 ret
39220                 | 
39220                 | '------------------------------------------------------------------------------
39220                 | ' Perform controller actions
39220                 | ' On entry:
39220                 | '    hidr_id        report id
39220                 | '    hidr_axis      axis value (signed word, 2 axes per long)
39220                 | '                      X = hidr_axis+0, #0
39220                 | '                      Y = hidr_axis+0, #1
39220                 | '                      Z = hidr_axis+1, #0
39220                 | '                     RX = hidr_axis+1, #1
39220                 | '                     RY = hidr_axis+2, #0
39220                 | '                     RZ = hidr_axis+2, #1
39220                 | '    hidr_buttons   buttons state (bits 0 to 31)
39220                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
39220                 | '
39220                 | '                     -------3 -------2 -------1 -------0 byte
39220                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
39220                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
39220                 | '                                zyx||| |||||||| ++++++++ n. buttons
39220                 | '                                |||||| ||||++++--------- n. axes
39220                 | '                                |||||| ++++------------- n. hats
39220                 | '                                ++++++------------------ valid axes
39220                 | '------------------------------------------------------------------------------
39220                 | hpad_translate
39220                 | 
39220                 | 
39220                 |         if HAVE_HIDPAD
39220     84 0C F0 FE |                 loc     ptrb,#hidpad_report
39224     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
39228     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3922c     01 70 E7 F2 |                 cmpsub  htmp,#1
39230     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
39234     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
39238     2D 00 7C 3D |         if_ae   ret     wcz
3923c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
39240     B8 F3 03 F1 |                 add     ptrb,htmp
39244     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39248     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3924c     28 0C 64 FD |                 setq    #7-1
39250     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39254                 |         end
39254                 | 
39254                 | 
39254                 |         if EMUPAD_MAX_PLAYER > 0
39254                 | .emupad_no_hat
39254                 |         if EMUPAD_BT0_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT1_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT2_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT3_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT4_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT5_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT6_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT7_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT8_BIT >= 0
39254                 |         end
39254                 |         if EMUPAD_BT9_BIT >= 0
39254                 |         end
39254                 | .emupad_slot_over
39254                 |         end
39254                 | 
39254                 |         if 0
39254                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39254                 | 
39254                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39254                 | 
39254                 |         end
39254     2D 00 64 FD |                 ret
39258                 | end
39258                 | 
39258                 | if EMUPAD_MAX_PLAYER > 0
39258                 | '------------------------------------------------------------------------------
39258                 | ' Clear EmuPad state
39258                 | '------------------------------------------------------------------------------
39258                 | emupad_reset
39258                 | 
39258                 | '------------------------------------------------------------------------------
39258                 | ' Get EmuPad Player number for current device (into retval)
39258                 | ' Z flag is also set if current device is valid
39258                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39258                 | '------------------------------------------------------------------------------
39258                 | emupad_getnum
39258                 | .loop
39258                 | '------------------------------------------------------------------------------
39258                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39258                 | '------------------------------------------------------------------------------
39258                 | emupad_discon
39258                 | .loop         
39258                 |         
39258                 |         ' FALL THROUGH!!!
39258                 | 
39258                 | '------------------------------------------------------------------------------
39258                 | ' Update EmuPad reports (all of them...)
39258                 | '------------------------------------------------------------------------------
39258                 | emupad_write_reports
39258                 | .devloop
39258                 | 
39258                 | end
39258                 | 
39258                 | 
39258                 | '------------------------------------------------------------------------------
39258                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39258                 | '------------------------------------------------------------------------------
39258                 | ' On entry:
39258                 | ' On exit:
39258                 | '------------------------------------------------------------------------------
39258                 | hget_hub_status
39258     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3925c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39260     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
39264     01 90 2F F9 |                 setword hpar3, #1, #1
39268     CF 02 A0 FD |                 call    #do_int_in
3926c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39270     0C 00 90 AD |         if_z    jmp     #.data
39274     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39278     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3927c     2D 00 64 FD |                 ret
39280                 | .data
39280     00 90 0F F2 |                 cmp     hpar3, #0               wz
39284     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39288                 | 
39288     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3928c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39290     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39294     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39298                 |                 debug(ubin_long(hub_status_chg))
39298                 | 
39298     01 5A 06 F6 |                 mov     hdev_port, #1
3929c                 | .loop
3929c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
392a0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
392a4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
392a8     F0 FF 9F 3D |         if_nc   jmp     #.loop
392ac     2D 00 64 FD |                 ret
392b0                 | 
392b0                 | hub_port_handler
392b0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
392b4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
392b8     27 EF 03 F6 |                 mov     pb, urx_buff_p
392bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
392c0     55 02 A0 FD |                 call    #control_read
392c4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
392c8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
392c8                 | 
392c8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
392cc     50 01 90 5D |         if_x0   jmp     #.other
392d0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
392d4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
392d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
392dc     A0 02 A0 FD |                 call    #control_write
392e0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
392e4     7C 01 90 5D |         if_x0   jmp     #.disconnect
392e8     B0 99 02 F6 |                 mov     hctwait, _100ms_
392ec     EF 02 A0 FD |                 call    #poll_waitx
392f0                 | 
392f0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
392f4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
392f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
392fc     A0 02 A0 FD |                 call    #control_write
39300                 | 
39300     02 76 07 F6 |                 mov     htmp3, #2
39304                 | .wait_reset
39304     AC 99 02 F6 |                 mov     hctwait, _8ms_
39308     EF 02 A0 FD |                 call    #poll_waitx
3930c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39310     27 EF 03 F6 |                 mov     pb, urx_buff_p
39314     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39318     55 02 A0 FD |                 call    #control_read
3931c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39320     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
39324     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
39328                 | 
39328     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3932c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
39330     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39334     A0 02 A0 FD |                 call    #control_write
39338                 | 
39338     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3933c                 | .wait_recover
3933c     A7 99 02 F6 |                 mov     hctwait, _1ms_
39340     EF 02 A0 FD |                 call    #poll_waitx
39344     FD 71 6F FB |                 djnz    htmp,#.wait_recover
39348                 | 
39348     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3934c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39350     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39354                 | 
39354     00 08 00 FF 
39358     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3935c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39360     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39364     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39368     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3936c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39370     48 01 90 5D |         if_nz   jmp     #.done
39374                 | .get_dev_desc
39374     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39378     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3937c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39380     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39384     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39388     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3938c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39390     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39394     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39398     AC 99 02 F6 |                 mov     hctwait, _8ms_
3939c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
393a0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
393a4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
393a8     BE 00 A0 FD |                 call    #calc_crc5
393ac     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
393b0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
393b4     F7 AD C2 FA |                 rdbyte  total_data, pb
393b8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
393bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
393c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
393c4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
393c8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
393cc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
393d0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
393d0     9F 99 02 F6 |                 mov     hctwait, _500us_
393d4     EF 02 A0 FD |                 call    #poll_waitx
393d8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
393dc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
393e0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
393e4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
393e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
393ec     CC 00 90 5D |         if_nz   jmp     #.done
393f0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
393f4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
393f8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
393fc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39400     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39404     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
39408     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3940c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39410     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39414     A4 00 90 CD |         if_b    jmp     #.done
39418     6C F0 BF FD |                 call    #hparse_con_desc
3941c     9C 00 90 FD |                 jmp     #.done
39420                 | 
39420                 | .other
39420     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
39424     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
39428     28 00 90 AD |         if_x1   jmp     #.reset_feature
3942c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
39430     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39434     1C 00 90 AD |         if_x1   jmp     #.reset_feature
39438     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3943c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
39440     10 00 90 AD |         if_x1   jmp     #.reset_feature
39444     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
39448     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3944c     04 00 90 AD |         if_x1   jmp     #.reset_feature
39450     68 00 90 FD |                 jmp     #.done
39454                 | .reset_feature
39454     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39458     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3945c     A0 02 A0 FD |                 call    #control_write
39460     58 00 90 FD |                 jmp     #.done
39464                 | .disconnect
39464                 | 
39464     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39468     00 70 E3 F8 |                 getbyte htmp
3946c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39470     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39474     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39478     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3947c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39480     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39484                 |         if EMUPAD_MAX_PLAYER > 0
39484                 |         end
39484                 |         if HAVE_MOUSE
39484     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39488     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3948c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39490                 |         end
39490                 |         if HAVE_HIDPAD
39490     14 0A F0 FE |                 loc ptrb,#hidpad_report
39494     2D 71 03 F6 |                 mov htmp,hdev_port
39498     01 70 E7 F2 |                 cmpsub htmp,#1
3949c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
394a0     B8 F3 03 F1 |                 add ptrb,htmp
394a4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
394a8     80 01 6C FC |                 wrlong #0,ptrb
394ac                 |         end
394ac                 | 
394ac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
394b0     00 00 C4 F8 |                 setbyte #0
394b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
394b8     00 00 04 F6 |                 mov     0-0, #0
394bc                 | 
394bc                 | .done
394bc     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
394c0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
394c4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
394c8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
394cc     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
394d0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
394d4                 | 
394d4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
394d8     27 EF 03 F6 |                 mov     pb, urx_buff_p
394dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394e0     55 02 A0 FD |                 call    #control_read
394e4     00 69 06 FB |                 rdlong  hub_port_status, ptra
394e8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
394e8     2D 00 64 FD |                 ret
394ec                 | 
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' Partially populated SETUP packets
394ec                 | '------------------------------------------------------------------------------
394ec     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
394ed     06          |                 byte    REQ_GET_DESC
394ee     00 01       |                 word    TYPE_DEVICE << 8
394f0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
394f2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
394f4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
394f5     06          |                 byte    REQ_GET_DESC
394f6     00 02       |                 word    TYPE_CONFIG << 8
394f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
394fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
394fc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
394fd     09          |                 byte    REQ_SET_CONFIG
394fe     00 00       |                 word    0       ' Configuration value
39500     00 00       |                 word    0       ' Zero
39502     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39504     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39505     05          |                 byte    REQ_SET_ADDR
39506     00 00       |                 word    0       ' Zero
39508     00 00       |                 word    0       ' Zero
3950a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3950c                 | '------------------------------------------------------------------------------
3950c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3950c                 | ' wValue field dictates which protocol should be used.
3950c                 | '
3950c                 | ' When initialized, all devices default to report protocol. However the host
3950c                 | ' should not make any assumptions about the device state and should set the
3950c                 | ' desired protocol whenever initializing a device.
3950c                 | '------------------------------------------------------------------------------
3950c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3950d     0B          |                 byte    HID_SET_PROTO
3950e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39510                 |                                                 ' (HID 1.11 Section 7.2.6).
39510     00 00       |                 word    0               ' Interface index number.
39512     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39514                 | '------------------------------------------------------------------------------
39514     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39515     0A          |                 byte    HID_SET_IDLE
39516     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
39518                 |                                         ' reporting until a change is detected in the report data
39518                 | 
39518                 |                                         ' (HID 1.11 Section 7.2.4).
39518     00 00       |                 word    0       ' Interface index number.
3951a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3951c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3951d     09          |                 byte    HID_SET_REPORT
3951e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
39520                 |                                         ' (HID 1.11 Section 7.2.2).
39520     00 00       |                 word    0       ' Interface index number.
39522     00 00       |                 word    0       ' Size of the report, in bytes.
39524     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39525     06          |                 byte    REQ_GET_DESC
39526     00 22       |                 word    TYPE_REPORT << 8
39528     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3952a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3952c                 | '------------------------------------------------------------------------------
3952c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3952d     06          |                 byte    REQ_GET_DESC
3952e     00 29       |                 word    TYPE_HUB << 8
39530     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39532     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39534     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39535     03          |                 byte    REQ_SET_FEATURE
39536     00 00       |                 word    0       ' port power
39538     01 00       |                 word    1       ' Port index number (1+)
3953a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3953c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3953d     01          |                 byte    REQ_CLEAR_FEATURE
3953e     00 00       |                 word    0       ' port power
39540     01 00       |                 word    1       ' Port index number (1+)
39542     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39544     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39545     00          |                 byte    REQ_GET_STATUS
39546     00 00       |                 word    0
39548     01 00       |                 word    1       ' Port index number (1+)
3954a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3954c                 | '------------------------------------------------------------------------------
3954c                 | if _HAVE_GAMEPAD
3954c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39550                 | ps3_command_buff
39550     00 00 00 00 
39554     00          |                 byte    $00, $00, $00, $00, $00
39555     00 00 00 00 
39559     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3955a     FF 27 10 00 
3955e     32          |                 byte    $FF, $27, $10, $00, $32
3955f     FF 27 10 00 
39563     32          |                 byte    $FF, $27, $10, $00, $32
39564     FF 27 10 00 
39568     32          |                 byte    $FF, $27, $10, $00, $32
39569     FF 27 10 00 
3956d     32          |                 byte    $FF, $27, $10, $00, $32
3956e     00 00 00 00 
39572     00          |                 byte    $00, $00, $00, $00, $00
39573     00 00 00 00 
39577     00          |                 byte    $00, $00, $00, $00, $00
39578     00 00 00 00 
3957c     00          |                 byte    $00, $00, $00, $00, $00
3957d     00 00 00    |                 byte    $00, $00, $00
39580                 | '------------------------------------------------------------------------------
39580     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39583                 |                                         ' 0x01 All blinking
39583                 |                                         ' 0x02 1 flashes, then on
39583                 |                                         ' 0x03 2 flashes, then on
39583                 |                                         ' 0x04 3 flashes, then on
39583                 |                                         ' 0x05 4 flashes, then on
39583                 |                                         ' 0x06 1 on
39583                 |                                         ' 0x07 2 on
39583                 |                                         ' 0x08 3 on
39583                 |                                         ' 0x09 4 on
39583                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39583                 |                                         ' 0x0B Blinking*
39583                 |                                         ' 0x0C Slow blinking*
39583                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39583     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39586     00          |                 byte    $00             ' Left rumble
39587     00          |                 byte    $00             ' Right rumble
39588     00 00 00    |                 byte    $00, $00, $00
3958b     00          | end
3958c                 | alignl
3958c                 | 
3958c                 | if HAVE_MOUSE
3958c     00 00 00 00 
39590     00 00 00 00 | mouse_limits long 0[2]
39594     00 00 00 00 | mouse_outptr long 0
39598                 | end
39598                 | 
39598                 | if KEYQUEUE_SIZE > 0
39598     00          | keyq_head byte 0
39599     00          | keyq_tail byte 0
3959a     00 00 00 00 
      ...             
39796     00 00 00 00 
3979a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3979c                 | alignl
3979c                 | end
3979c                 | 
3979c                 | if EMUPAD_MAX_PLAYER > 0
3979c                 | emupad_rule_buffer
3979c                 | if EMUPAD_BUILTIN_RULES
3979c                 | file "padmap_builtin.dat"
3979c                 | end
3979c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3979c                 | '' Default rule directly follows!
3979c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3979c                 | end
3979c                 | 
3979c                 | '------------------------------------------------------------------------------
3979c                 | ' The USB data cache area gets zero-filled at every device disconnect
3979c                 | '------------------------------------------------------------------------------
3979c                 | usb_cache_start
3979c                 | 
3979c                 | ' HID descriptor and report buffers
3979c                 | if !!OVERLAP_MEMORY
3979c     00 00 00 00 
      ...             
39e94     00 00 00 00 
39e98     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
39e9c                 | end
39e9c     00 00 00 00 
39ea0     00 00 00 00 | hkbd_report     byte    0[8]
39ea4     00 00 00 00 | hkbd_led_rep    byte    0
39ea8                 | alignl
39ea8                 | 
39ea8                 | if HAVE_HIDPAD
39ea8     00 00 00 00 
      ...             
39f64     00 00 00 00 
39f68     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
39f6c                 | end
39f6c                 | 
39f6c                 | ' HUB descriptor
39f6c     00          | hub_descr       byte    0   ' bDescLength
39f6d     00          |                 byte    0   ' bDescriptorType
39f6e     00          |                 byte    0   ' bNbrPorts
39f6f     00 00       |                 word    0   ' wHubCharacteristics
39f71     00          |                 byte    0   ' bPwrOn2PwrGood
39f72     00          |                 byte    0   ' bHubContrCurrent
39f73     00          |                 byte    0   ' DeviceRemoveable
39f74     00          |                 byte    0   ' PortPwrCtrlMask
39f75                 | 
39f75                 | usb_cache_end
39f75                 | 
39f75                 | if HAVE_MOUSE
39f75     00 00 00 00 | mouse_xacc      long 0
39f79     00 00 00 00 | mouse_yacc      long 0
39f7d     00 00 00 00 | mouse_zacc      long 0
39f81     00          | mouse_bstate    byte 0
39f82     00          | mouse_lpending  byte 0
39f83     00          | mouse_rpending  byte 0
39f84     00          | mouse_mpending  byte 0
39f85     00          | mouse_lock      byte 0
39f86     00 00 00    |                 byte 0[3] ' padding
39f89                 | end
39f89                 | 
39f89     00 00 00 00 
      ...             
3a001     00 00 00 00 
3a005     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a009     00 00 00 00 
3a00d     00 00 00 00 
3a011     00 00 00 00 
3a015     00 00 00 00 
3a019     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a01b     00 00 00 00 
      ...             
3a113     00 00 00 00 
3a117     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a11b                 | 
3a11b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a11c                 | 	alignl
3a11c                 | _audio096_spin2_dat_
3a11c                 | 
3a11c                 | audio       org     0
3a11c                 | 
3a11c     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a120     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a124     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a128                 |  
3a128     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a12c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a130     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a134     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a138                 | 
3a138     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a13c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a140     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a144     0F 24 06 FC |             wrpin   dac2,#right
3a148     0F 00 1E FC |             wxpin   #256,#right    
3a14c     41 9C 64 FD |             dirh    #left addpins 1
3a150     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a154     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a158     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a15c                 |             
3a15c                 | '---------------------------------------------------------------------------------        
3a15c                 | '----------------- The main loop -------------------------------------------------
3a15c                 | '---------------------------------------------------------------------------------
3a15c                 | 
3a15c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a160     10 00 90 CD |       if_c  jmp     #loop1
3a164                 |   
3a164     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a168     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a16c     D5 00 80 F1 |             sub     0-0,a40000000
3a170     FD 01 6E FB |             djnz    cn,#p402
3a174                 |     
3a174     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a178     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a17c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a180     01 00 06 C6 |     if_c    mov     cn,#1
3a184     DA 02 3A F3 |             fle     ct,time3 wcz
3a188     02 00 06 C6 |     if_c    mov     cn,#2     
3a18c     DB 02 3A F3 |             fle     ct,time4 wcz
3a190     03 00 06 C6 |     if_c    mov     cn,#3
3a194     DC 02 3A F3 |             fle     ct,time5 wcz
3a198     04 00 06 C6 |     if_c    mov     cn,#4
3a19c     DD 02 3A F3 |             fle     ct,time6 wcz
3a1a0     05 00 06 C6 |     if_c    mov     cn,#5
3a1a4     DE 02 3A F3 |             fle     ct,time7 wcz
3a1a8     06 00 06 C6 |     if_c    mov     cn,#6
3a1ac     DF 02 3A F3 |             fle     ct,time8 wcz
3a1b0     07 00 06 C6 |     if_c    mov     cn,#7
3a1b4                 | 
3a1b4                 | 
3a1b4                 | '----------------------------------------------------------------------------------
3a1b4                 | '------------- Compute channel samples --------------------------------------------
3a1b4                 | '----------------------------------------------------------------------------------
3a1b4                 | 
3a1b4                 | 
3a1b4     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a1b8     06 C0 65 F0 |             shl     channeladd,#6
3a1bc     E0 F0 03 F1 |             add     ptra,channeladd
3a1c0                 | 
3a1c0     28 16 64 FD |             setq    #11                        	' read parameters
3a1c4     00 D7 05 FB |             rdlong  pointer0,ptra
3a1c8                 |     	    
3a1c8     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a1cc     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a1d0     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a1d4     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a1d8     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a1dc     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a1e0     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a1e4     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a1e8                 |             
3a1e8     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a1ec     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a1f0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a1f4                 | 
3a1f4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a1f8     EC 08 3A F9 |             getword oldrs,sample0,#1
3a1fc     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a200     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a204     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a208     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a20c                 | 
3a20c     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a210     00 04 02 F6 |             mov     dt0,0-0    
3a214     D7 04 82 F1 |             sub     dt0,time0
3a218                 |             
3a218     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a21c     FB 00 00 F1 |             add     0-0,afreq0  	
3a220                 |             
3a220                 | '---- envelopes
3a220                 |             
3a220     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a224     20 00 00 AF 
3a228     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a22c     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a230                 | 
3a230     FB 48 02 F6 |             mov     envs1,afreq0
3a234     F5 48 02 FA |             mul     envs1,envspd0
3a238     24 E7 01 F1 |             add     envph0,envs1 
3a23c                 | 
3a23c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a240     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a244     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a248     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a24c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a250     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a254     00 46 06 36 |     if_ge   mov     envlo,#0
3a258     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a25c     16 E6 65 30 |     if_ge   shl     envph0,#22
3a260                 | 
3a260     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a264     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a268     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a26c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a270     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a274     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a278     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a27c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a280     23 49 02 FA |             mul     envs1,envlo
3a284     25 49 02 F1 |             add     envs1,envs2
3a288     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a28c                 |             
3a28c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a290     1B C6 61 AD |     if_z    getrnd  spl
3a294     58 00 90 AD |     if_z    jmp     #p406
3a298                 |  
3a298     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a29c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a2a0     08 D6 45 F0 |             shr     pointer0,#8
3a2a4                 |          
3a2a4     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a2a8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a2ac     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a2b0     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a2b4                 |         
3a2b4     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a2b8     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a2bc     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a2c0                 |             
3a2c0     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a2c4     ED C4 01 F1 |             add     qq,sstart0            
3a2c8                 | 
3a2c8     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a2cc     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a2d0     1C 01 B0 1D |     if_gt   call    #cache_read
3a2d4                 |          
3a2d4     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a2d8     08 C6 65 50 |     if_nz   shl     spl,#8
3a2dc     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a2e0     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a2e4     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a2e8     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a2ec     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a2f0                 | 
3a2f0                 | 
3a2f0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a2f4     00 C6 01 F6 |             mov     spl,0-0
3a2f8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a2fc     00 C6 01 F6 |             mov     spl,0-0
3a300                 | 
3a300     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a304     00 0A 02 F6 |             mov     ls0,0-0
3a308     20 00 00 FF 
3a30c     00 C4 05 F6 |             mov     qq,##16384
3a310     FE C4 81 F1 |             sub     qq,apan0
3a314     E2 C6 31 FA |             scas    spl,qq
3a318     00 0C 02 F6 |             mov     rs0, 0-0
3a31c                 | 
3a31c     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a320     06 11 02 F1 |             add     rs,rs0
3a324     03 0F 82 F1 |             sub     ls,oldls
3a328     05 0F 02 F1 |             add     ls,ls0
3a32c                 |    
3a32c     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a330     05 D9 21 F9 |             setword sample0,ls0,#0
3a334                 |             
3a334     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a338     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a33c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a340                 |   '  if_z    mov     sample0,#0
3a340     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a344     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a348     04 00 00 AF 
3a34c     00 B0 05 A1 |     if_z    add     time1,##2048
3a350     D8 B2 01 A6 |     if_z    mov     time2,time1
3a354     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a358                 | 
3a358     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a35c     00 D7 65 FC |             wrlong  pointer0,ptra
3a360     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a364     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a368                 |                       
3a368     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a36c     FF C3 25 A7 |     if_z    decmod  front, #511          
3a370                 |          
3a370     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a374     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a378     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a37c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a380                 | 	    
3a380                 | 		    
3a380     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a384     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a388     04 15 02 F6 |             mov     newsample, oldrs       
3a38c                 | 
3a38c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a390     02 AF 01 F1 |             add     time0,dt0    
3a394                 |                                      
3a394     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a398     D8 FD 9F AD |     if_z    jmp     #loop1
3a39c     02 C5 01 F6 |             mov     qq,dt0
3a3a0                 | 
3a3a0                 |     
3a3a0                 |             
3a3a0     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a3a4     40 00 90 3D |     if_nc   jmp     #p399
3a3a8     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a3ac     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a3b0     F4 FF 9F AD |     if_e    jmp     #p398   
3a3b4                 | 		
3a3b4     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a3b8     20 00 90 AD |     if_z    jmp     #p302	   
3a3bc                 |   
3a3bc     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a3c0     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a3c4     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a3c8     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a3cc     60 1E 66 FC |             wrlong  scptr2,#$60
3a3d0     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a3d4     01 00 00 CF 
3a3d8     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a3dc                 | 			    
3a3dc     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a3e0     00 00 00 FF 
3a3e4     FF C3 05 F7 |             incmod  front, ##511
3a3e8     ED C5 6D FB | p399        djnz    qq,#p301
3a3ec                 |             
3a3ec     6C FD 9F FD |             jmp     #loop            'loop
3a3f0                 | 
3a3f0                 | '----------------------------------------------------------------------------------
3a3f0                 | '------------- This is the end of the main loop -----------------------------------
3a3f0                 | '----------------------------------------------------------------------------------
3a3f0                 | 
3a3f0                 | '----------------------------------------------------------------------------------
3a3f0                 | '------------- PSRAM cache ----------- --------------------------------------------
3a3f0                 | '----------------------------------------------------------------------------------
3a3f0                 | 
3a3f0                 | ' There are 8 cache pointers for 8 channels
3a3f0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a3f0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a3f0                 | 
3a3f0                 | 
3a3f0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a3f4                 |             
3a3f4     E2 40 02 F6 | 	    mov     addrhi,qq		
3a3f8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a3fc     14 01 96 F9 | 	    alts    cn,#cache1            
3a400     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a404     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a408                 | 	
3a408     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a40c     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a410     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a414     08 38 66 F0 | 	    shl     cmd,#8
3a418     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a41c     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a420     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a424     13 3B 02 F1 |             add     hubaddr,hubptr 
3a428     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a42c     28 04 64 FD |             setq    #2                          ' write 3 longs
3a430     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a434     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a438     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a43c                 |             
3a43c                 | 	
3a43c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a440     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a444     13 C5 01 F1 | 	    add     qq,hubptr
3a448     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a44c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a450                 |           
3a450                 | 
3a450                 | '--------------------------------------------------------------------------
3a450                 | '------ Interrupt service -------------------------------------------------
3a450                 | '------ Output the sample, get the next one if exists ---------------------
3a450                 | '--------------------------------------------------------------------------
3a450                 | 
3a450     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a454     0F D0 25 FC |             wypin   rsample,#right       '4
3a458     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a45c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a460     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a464     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a468     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a46c                 |     
3a46c     F5 FF 3B FB |             reti1                        '17/19 
3a470                 |           
3a470                 | '---------------------------------------------------------------------------
3a470                 | '-------- End of interrupt -------------------------------------------------
3a470                 | '---------------------------------------------------------------------------    
3a470                 | 
3a470                 | 
3a470                 | '---------------------------------------------------------------------------
3a470                 | '------- Variables ---------------------------------------------------------
3a470                 | '---------------------------------------------------------------------------
3a470                 | 
3a470                 | ' constants
3a470                 | 
3a470     00 00 00 40 | a40000000   long $40000000
3a474     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a478                 | 
3a478                 | ' Time variables
3a478                 | 
3a478     00 00 00 00 | time0       long 0    ' Global sample computing time
3a47c     01 00 00 00 | time1       long 1    ' Local channels time
3a480     02 00 00 00 | time2       long 2
3a484     03 00 00 00 | time3       long 3
3a488     04 00 00 00 | time4       long 4
3a48c     05 00 00 00 | time5       long 5
3a490     06 00 00 00 | time6       long 6
3a494     07 00 00 00 | time7       long 7
3a498     08 00 00 00 | time8       long 8
3a49c                 | 
3a49c     00 00 00 00 | channeladd long 0
3a4a0                 | 
3a4a0     00 00 00 00 | front       long 0
3a4a4                 | 
3a4a4                 | ' temporary variables 
3a4a4     00 00 00 00 | qq          long 0
3a4a8     00 00 00 00 | spl         long 0
3a4ac     00 00 00 00 | zero        long 0
3a4b0     00 00 00 00 | mailbox     long 0
3a4b4     00 00 00 00 | mailbox2 long 0
3a4b8                 | 
3a4b8                 | ' Interrupt ISR variables
3a4b8                 | 
3a4b8     00 00 00 00 | lsample     long 0
3a4bc     00 00 00 00 | rsample     long 0
3a4c0     00 00 00 00 | lsnext      long 0
3a4c4     00 00 00 00 | rsnext      long 0 
3a4c8                 | 
3a4c8                 | ' channel parameter block
3a4c8                 | 
3a4c8     00 00 00 00 | pointer0    long 0     
3a4cc     00 00 00 00 | sample0     long 0
3a4d0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a4d4     00 00 00 00 | lstart0     long 0
3a4d8     00 00 00 00 | lend0       long 0
3a4dc     00 00 00 00 | volpan0     long 0
3a4e0     00 00 00 00 | freqskip0   long 0
3a4e4     00 00 00 00 | command0    long 0
3a4e8     00 00 00 00 | envph0	    long 0
3a4ec     00 00 00 00 | envptr0	    long 0
3a4f0     00 00 00 00 | envspd0	    long 0
3a4f4     00 00 00 00 | envlen0	    long 0
3a4f8     00 00 00 00 | res5	    long 0
3a4fc     00 00 00 00 | res6	    long 0
3a500     00 00 00 00 | res7	    long 0
3a504     00 00 00 00 | res8	    long 0
3a508                 | 
3a508     00 00 00 00 | afreq0      long 0
3a50c     00 00 00 00 | askip0      long 0
3a510     00 00 00 00 | avol0       long 0
3a514     00 00 00 00 | apan0       long 0
3a518                 | 
3a518     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a51c     00 00 00 00 | cn          long 0
3a520     00 00 00 00 | ct          long 0
3a524     00 00 00 00 | dt0         long 0
3a528                 | 
3a528                 | ' Samples
3a528     00 00 00 00 | oldls       long 0
3a52c     00 00 00 00 | oldrs       long 0
3a530                 | 
3a530     00 00 00 00 | ls0         long 0
3a534     00 00 00 00 | rs0         long 0
3a538                 | 
3a538     00 00 00 00 | ls          long 0    
3a53c     00 00 00 00 | rs          long 0
3a540                 | 
3a540     00 00 00 00 | oldsample   long 0
3a544     00 00 00 00 | newsample   long 0
3a548                 | 
3a548     00 00 00 00 | nrsample    long 0
3a54c     00 00 00 00 | nlsample    long 0
3a550                 | 
3a550     00 00 00 00 | scbase long 0
3a554     00 00 00 00 | scptr long 0
3a558     00 00 00 00 | scptr2 long 0
3a55c     00 00 00 00 | scope long 0
3a560                 | 
3a560     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a564     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a568                 | 
3a568     00 18 07 00 | hubptr      long $71800
3a56c     00 00 00 00 | cache1      long 0
3a570     00 00 00 00 | cache2      long 0
3a574     00 00 00 00 | cache3      long 0
3a578     00 00 00 00 | cache4      long 0
3a57c     00 00 00 00 | cache5      long 0
3a580     00 00 00 00 | cache6      long 0
3a584     00 00 00 00 | cache7      long 0
3a588     00 00 00 00 | cache8      long 0
3a58c                 | 
3a58c                 | 
3a58c     00 00 00 00 | cmd         long 0
3a590     00 00 00 00 | hubaddr     long 0
3a594     00 01 00 00 | count       long 256
3a598     00 00 00 00 | addrlo long 0
3a59c     00 00 00 00 | addrhi long 0
3a5a0     00 00 00 00 | pointer00 long 0
3a5a4     00 00 00 00 | envhi long 0
3a5a8     00 00 00 00 | envlo long 0
3a5ac     00 00 00 00 | envs1 long 0
3a5b0     00 00 00 00 | envs2 long 0
3a5b4     00 00 00 00 | noise0 long 0
3a5b8     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a5bc     00 00 00 00 
3a5c0     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a5c4                 | 	alignl
3a5c4                 | __system__dat_
3a5c4     00 00 00 00 
3a5c8     00 00 00 00 | 	byte	$00[8]
3a5cc     03 00 00 00 
3a5d0     00 00 00 00 
3a5d4     00 00 00 00 
3a5d8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a5dc     00 00 00 00 
      ...             
3a868     00 00 00 00 
3a86c     00 00 00 00 | 	byte	$00[660]
3a870     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3a874     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3a878     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3a87c     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3a880     00 00 00 00 
3a884     00 00 00 00 
3a888     00 00 00 00 
3a88c     00 00 00 00 
3a890     00 00 00 00 
3a894     00 00 00 00 
3a898     00 00 00 00 | 	byte	$00[28]
3a89c     04 A9 03 00 | 	long	@@@__system__dat_ + 832
3a8a0     07 A9 03 00 | 	long	@@@__system__dat_ + 835
3a8a4     28 A9 03 00 | 	long	@@@__system__dat_ + 868
3a8a8     41 A9 03 00 | 	long	@@@__system__dat_ + 893
3a8ac     5C A9 03 00 | 	long	@@@__system__dat_ + 920
3a8b0     76 A9 03 00 | 	long	@@@__system__dat_ + 946
3a8b4     86 A9 03 00 | 	long	@@@__system__dat_ + 962
3a8b8     98 A9 03 00 | 	long	@@@__system__dat_ + 980
3a8bc     AA A9 03 00 | 	long	@@@__system__dat_ + 998
3a8c0     BC A9 03 00 | 	long	@@@__system__dat_ + 1016
3a8c4     C8 A9 03 00 | 	long	@@@__system__dat_ + 1028
3a8c8     D9 A9 03 00 | 	long	@@@__system__dat_ + 1045
3a8cc     ED A9 03 00 | 	long	@@@__system__dat_ + 1065
3a8d0     F7 A9 03 00 | 	long	@@@__system__dat_ + 1075
3a8d4     07 AA 03 00 | 	long	@@@__system__dat_ + 1091
3a8d8     16 AA 03 00 | 	long	@@@__system__dat_ + 1106
3a8dc     2C AA 03 00 | 	long	@@@__system__dat_ + 1128
3a8e0     45 AA 03 00 | 	long	@@@__system__dat_ + 1153
3a8e4     59 AA 03 00 | 	long	@@@__system__dat_ + 1173
3a8e8     67 AA 03 00 | 	long	@@@__system__dat_ + 1187
3a8ec     7B AA 03 00 | 	long	@@@__system__dat_ + 1207
3a8f0     87 AA 03 00 | 	long	@@@__system__dat_ + 1219
3a8f4     99 AA 03 00 | 	long	@@@__system__dat_ + 1237
3a8f8     B1 AA 03 00 | 	long	@@@__system__dat_ + 1261
3a8fc     C3 AA 03 00 | 	long	@@@__system__dat_ + 1279
3a900     D6 AA 03 00 | 	long	@@@__system__dat_ + 1298
3a904     4F 4B 00 4E 
3a908     75 6D 65 72 
3a90c     69 63 61 6C 
3a910     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3a914     75 6D 65 6E 
3a918     74 20 6F 75 
3a91c     74 20 6F 66 
3a920     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3a924     61 69 6E 00 
3a928     52 65 73 75 
3a92c     6C 74 20 6E 
3a930     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3a934     65 70 72 65 
3a938     73 65 6E 74 
3a93c     61 62 6C 65 
3a940     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3a944     65 67 61 6C 
3a948     20 6D 75 6C 
3a94c     74 69 62 79 
3a950     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3a954     65 71 75 65 
3a958     6E 63 65 00 
3a95c     4E 6F 20 73 
3a960     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3a964     66 69 6C 65 
3a968     20 6F 72 20 
3a96c     64 69 72 65 
3a970     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3a974     79 00 42 61 
3a978     64 20 66 69 
3a97c     6C 65 20 6E 
3a980     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3a984     72 00 50 65 
3a988     72 6D 69 73 
3a98c     73 69 6F 6E 
3a990     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3a994     69 65 64 00 
3a998     4E 6F 74 20 
3a99c     65 6E 6F 75 
3a9a0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3a9a4     65 6D 6F 72 
3a9a8     79 00 54 65 
3a9ac     6D 70 6F 72 
3a9b0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3a9b4     66 61 69 6C 
3a9b8     75 72 65 00 
3a9bc     46 69 6C 65 
3a9c0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3a9c4     73 74 73 00 
3a9c8     49 6E 76 61 
3a9cc     6C 69 64 20 
3a9d0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3a9d4     6D 65 6E 74 
3a9d8     00 54 6F 6F 
3a9dc     20 6D 61 6E 
3a9e0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3a9e4     65 6E 20 66 
3a9e8     69 6C 65 73 
3a9ec     00 49 2F 4F 
3a9f0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3a9f4     6F 72 00 4E 
3a9f8     6F 74 20 61 
3a9fc     20 64 69 72 
3aa00     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3aa04     72 79 00 49 
3aa08     73 20 61 20 
3aa0c     64 69 72 65 
3aa10     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3aa14     79 00 52 65 
3aa18     61 64 20 6F 
3aa1c     6E 6C 79 20 
3aa20     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3aa24     20 73 79 73 
3aa28     74 65 6D 00 
3aa2c     46 75 6E 63 
3aa30     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3aa34     20 6E 6F 74 
3aa38     20 69 6D 70 
3aa3c     6C 65 6D 65 
3aa40     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3aa44     00 44 69 72 
3aa48     65 63 74 6F 
3aa4c     72 79 20 6E 
3aa50     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3aa54     6D 70 74 79 
3aa58     00 4E 61 6D 
3aa5c     65 20 74 6F 
3aa60     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3aa64     6E 67 00 44 
3aa68     65 76 69 63 
3aa6c     65 20 6E 6F 
3aa70     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3aa74     65 6B 61 62 
3aa78     6C 65 00 42 
3aa7c     61 64 20 61 
3aa80     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3aa84     73 73 00 42 
3aa88     72 6F 6B 65 
3aa8c     6E 20 63 6F 
3aa90     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3aa94     74 69 6F 6E 
3aa98     00 44 65 76 
3aa9c     69 63 65 20 
3aaa0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3aaa4     65 73 6F 75 
3aaa8     72 63 65 20 
3aaac     62 75 73 79 
3aab0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3aab4     73 73 20 64 
3aab8     65 76 69 63 
3aabc     65 20 6C 69 
3aac0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3aac4     6F 20 73 70 
3aac8     61 63 65 20 
3aacc     6F 6E 20 64 
3aad0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3aad4     65 00 55 6E 
3aad8     6B 6E 6F 77 
3aadc     6E 20 65 72 
3aae0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3aae4     00 00 00 00 
3aae8     00 00 00 00 | 	byte	$00[8]
3aaec     05 00 00 00 
3aaf0     00 00 00 00 
3aaf4     00 00 00 00 
3aaf8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aafc     00 00 00 00 | 	byte	$00, $00, $00, $00
3ab00     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ab04     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ab08     00 00 00 00 | 	byte	$00, $00, $00, $00
3ab0c     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ab10     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ab14     00 00 00 00 
3ab18     00 00 00 00 | 	byte	$00[8]
3ab1c     01 00 00 00 
3ab20     06 00 00 00 
3ab24     00 00 00 00 
3ab28     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab2c     00 00 00 00 
3ab30     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ab34     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ab38     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ab3c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ab40     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ab44     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ab48     00 00 00 00 
3ab4c     00 00 00 00 | 	byte	$00[8]
3ab50     01 00 00 00 
3ab54     06 00 00 00 
3ab58     00 00 00 00 
3ab5c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab60     00 00 00 00 
3ab64     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ab68     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ab6c     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ab70     00 00 00 00 | 	byte	$00, $00, $00, $00
3ab74     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ab78     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ab7c     00 00 00 00 
      ...             
3acec     00 00 00 00 
3acf0     00 00 00 00 | 	byte	$00[376]
3acf4     F8 AC 03 00 | 	long	@@@__system__dat_ + 1844
3acf8     00 00 00 00 
3acfc     00 00 00 00 
3ad00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad04                 | 	alignl
3ad04                 | _fatfs_cc_dat_
3ad04     C7 00 FC 00 
3ad08     E9 00 E2 00 
3ad0c     E4 00 E0 00 
3ad10     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3ad14     EA 00 EB 00 
3ad18     E8 00 EF 00 
3ad1c     EE 00 EC 00 
3ad20     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3ad24     C9 00 E6 00 
3ad28     C6 00 F4 00 
3ad2c     F6 00 F2 00 
3ad30     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3ad34     FF 00 D6 00 
3ad38     DC 00 F8 00 
3ad3c     A3 00 D8 00 
3ad40     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3ad44     E1 00 ED 00 
3ad48     F3 00 FA 00 
3ad4c     F1 00 D1 00 
3ad50     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3ad54     BF 00 AE 00 
3ad58     AC 00 BD 00 
3ad5c     BC 00 A1 00 
3ad60     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3ad64     91 25 92 25 
3ad68     93 25 02 25 
3ad6c     24 25 C1 00 
3ad70     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ad74     A9 00 63 25 
3ad78     51 25 57 25 
3ad7c     5D 25 A2 00 
3ad80     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ad84     14 25 34 25 
3ad88     2C 25 1C 25 
3ad8c     00 25 3C 25 
3ad90     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ad94     5A 25 54 25 
3ad98     69 25 66 25 
3ad9c     60 25 50 25 
3ada0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ada4     F0 00 D0 00 
3ada8     CA 00 CB 00 
3adac     C8 00 31 01 
3adb0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3adb4     CF 00 18 25 
3adb8     0C 25 88 25 
3adbc     84 25 A6 00 
3adc0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3adc4     D3 00 DF 00 
3adc8     D4 00 D2 00 
3adcc     F5 00 D5 00 
3add0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3add4     DE 00 DA 00 
3add8     DB 00 D9 00 
3addc     FD 00 DD 00 
3ade0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3ade4     AD 00 B1 00 
3ade8     17 20 BE 00 
3adec     B6 00 A7 00 
3adf0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3adf4     B0 00 A8 00 
3adf8     B7 00 B9 00 
3adfc     B3 00 B2 00 
3ae00     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3ae04     61 00 1A 03 
3ae08     E0 00 17 03 
3ae0c     F8 00 07 03 
3ae10     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3ae14     78 01 00 01 
3ae18     30 01 32 01 
3ae1c     06 01 39 01 
3ae20     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3ae24     2E 01 79 01 
3ae28     06 01 80 01 
3ae2c     4D 00 43 02 
3ae30     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3ae34     82 01 84 01 
3ae38     84 01 86 01 
3ae3c     87 01 87 01 
3ae40     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3ae44     8B 01 8B 01 
3ae48     8D 01 8E 01 
3ae4c     8F 01 90 01 
3ae50     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3ae54     93 01 94 01 
3ae58     F6 01 96 01 
3ae5c     97 01 98 01 
3ae60     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3ae64     9B 01 9C 01 
3ae68     9D 01 20 02 
3ae6c     9F 01 A0 01 
3ae70     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ae74     A2 01 A4 01 
3ae78     A4 01 A6 01 
3ae7c     A7 01 A7 01 
3ae80     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ae84     AB 01 AC 01 
3ae88     AC 01 AE 01 
3ae8c     AF 01 AF 01 
3ae90     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ae94     B3 01 B3 01 
3ae98     B5 01 B5 01 
3ae9c     B7 01 B8 01 
3aea0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3aea4     BB 01 BC 01 
3aea8     BC 01 BE 01 
3aeac     F7 01 C0 01 
3aeb0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3aeb4     C3 01 C4 01 
3aeb8     C5 01 C4 01 
3aebc     C7 01 C8 01 
3aec0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3aec4     CB 01 CA 01 
3aec8     CD 01 10 01 
3aecc     DD 01 01 00 
3aed0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3aed4     12 01 F3 01 
3aed8     03 00 F1 01 
3aedc     F4 01 F4 01 
3aee0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3aee4     22 02 12 01 
3aee8     3A 02 09 00 
3aeec     65 2C 3B 02 
3aef0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3aef4     66 2C 3F 02 
3aef8     40 02 41 02 
3aefc     41 02 46 02 
3af00     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3af04     40 00 81 01 
3af08     86 01 55 02 
3af0c     89 01 8A 01 
3af10     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3af14     5A 02 90 01 
3af18     5C 02 5D 02 
3af1c     5E 02 5F 02 
3af20     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3af24     62 02 94 01 
3af28     64 02 65 02 
3af2c     66 02 67 02 
3af30     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3af34     6A 02 62 2C 
3af38     6C 02 6D 02 
3af3c     6E 02 9C 01 
3af40     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3af44     9D 01 73 02 
3af48     74 02 9F 01 
3af4c     76 02 77 02 
3af50     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3af54     7A 02 7B 02 
3af58     7C 02 64 2C 
3af5c     7E 02 7F 02 
3af60     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3af64     82 02 A9 01 
3af68     84 02 85 02 
3af6c     86 02 87 02 
3af70     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3af74     B1 01 B2 01 
3af78     45 02 8D 02 
3af7c     8E 02 8F 02 
3af80     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3af84     B7 01 7B 03 
3af88     03 00 FD 03 
3af8c     FE 03 FF 03 
3af90     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3af94     86 03 88 03 
3af98     89 03 8A 03 
3af9c     B1 03 11 03 
3afa0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3afa4     A3 03 A3 03 
3afa8     C4 03 08 03 
3afac     CC 03 03 00 
3afb0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3afb4     8F 03 D8 03 
3afb8     18 01 F2 03 
3afbc     0A 00 F9 03 
3afc0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3afc4     F5 03 F6 03 
3afc8     F7 03 F7 03 
3afcc     F9 03 FA 03 
3afd0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3afd4     20 03 50 04 
3afd8     10 07 60 04 
3afdc     22 01 8A 04 
3afe0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3afe4     0E 01 CF 04 
3afe8     01 00 C0 04 
3afec     D0 04 44 01 
3aff0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3aff4     00 00 7D 1D 
3aff8     01 00 63 2C 
3affc     00 1E 96 01 
3b000     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b004     00 1F 08 06 
3b008     10 1F 06 06 
3b00c     20 1F 08 06 
3b010     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b014     40 1F 06 06 
3b018     51 1F 07 00 
3b01c     59 1F 52 1F 
3b020     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b024     5D 1F 56 1F 
3b028     5F 1F 60 1F 
3b02c     08 06 70 1F 
3b030     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b034     BB 1F C8 1F 
3b038     C9 1F CA 1F 
3b03c     CB 1F DA 1F 
3b040     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b044     F9 1F EA 1F 
3b048     EB 1F FA 1F 
3b04c     FB 1F 80 1F 
3b050     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b054     08 06 A0 1F 
3b058     08 06 B0 1F 
3b05c     04 00 B8 1F 
3b060     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b064     BC 1F CC 1F 
3b068     01 00 C3 1F 
3b06c     D0 1F 02 06 
3b070     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b074     E5 1F 01 00 
3b078     EC 1F F3 1F 
3b07c     01 00 FC 1F 
3b080     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b084     32 21 70 21 
3b088     10 02 84 21 
3b08c     01 00 83 21 
3b090     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b094     30 2C 2F 04 
3b098     60 2C 02 01 
3b09c     67 2C 06 01 
3b0a0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b0a4     80 2C 64 01 
3b0a8     00 2D 26 08 
3b0ac     41 FF 1A 03 
3b0b0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b0b4     05 07 09 0E 
3b0b8     10 12 14 16 
3b0bc     18 1C 1E 43 
3b0c0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b0c4     41 41 43 45 
3b0c8     45 45 49 49 
3b0cc     49 41 41 45 
3b0d0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b0d4     4F 55 55 59 
3b0d8     4F 55 4F 9C 
3b0dc     4F 9E 9F 41 
3b0e0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b0e4     A5 A6 A7 A8 
3b0e8     A9 AA AB AC 
3b0ec     AD AE AF B0 
3b0f0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b0f4     41 41 41 B8 
3b0f8     B9 BA BB BC 
3b0fc     BD BE BF C0 
3b100     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b104     C5 41 41 C8 
3b108     C9 CA CB CC 
3b10c     CD CE CF D1 
3b110     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b114     49 49 49 49 
3b118     D9 DA DB DC 
3b11c     DD 49 DF 4F 
3b120     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b124     4F E6 E8 E8 
3b128     55 55 55 59 
3b12c     59 EE EF F0 
3b130     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b134     F5 F6 F7 F8 
3b138     F9 FA FB FC 
3b13c     FD FE FF 00 
3b140     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b144     00 00 00 00 | 	byte	$00, $00, $00, $00
3b148     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b14c     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b150     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b154     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b158     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b15c     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b160     00 00 00 00 
3b164     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b168     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b16c     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b170     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b174     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b178     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b17c     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b180     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b184     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b188     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b18c     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b190     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b194     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b198     FF FF FF FF 
3b19c     1F 00 00 00 
3b1a0     1C 00 00 00 
3b1a4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b1a8     1E 00 00 00 
3b1ac     1F 00 00 00 
3b1b0     1E 00 00 00 
3b1b4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b1b8     1F 00 00 00 
3b1bc     1E 00 00 00 
3b1c0     1F 00 00 00 
3b1c4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b1c8     1F 00 00 00 
3b1cc     00 00 00 00 
3b1d0     1F 00 00 00 
3b1d4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b1d8     5A 00 00 00 
3b1dc     78 00 00 00 
3b1e0     97 00 00 00 
3b1e4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b1e8     D4 00 00 00 
3b1ec     F3 00 00 00 
3b1f0     11 01 00 00 
3b1f4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b1f8     4E 01 00 00 
3b1fc     6D 01 00 00 
3b200     FF FF FF FF 
3b204     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b208     00 00 00 00 
      ...             
3b220     00 00 00 00 
3b224     00 00 00 00 | 	byte	$00[32]
3b228     46 B2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b22c     4A B2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b230     00 00 00 00 
3b234     00 00 00 00 
3b238     00 00 00 00 
3b23c     00 00 00 00 
3b240     00 00       | 	byte	$00[18]
3b242     3F 3F 3F 00 
3b246     55 43 54 00 
3b24a     55 43 54 00 
3b24e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b252     00 00 00 00 
3b256     00 00 00    | 	byte	$00[7]
3b259     CA 9A 3B 00 
3b25d     00 00 00 01 
3b261     01 01 01 01 
3b265     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b269     91 11 11 11 
3b26d     11 01 01 01 
3b271     01 01 01 01 
3b275     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b279     01 01 01 01 
3b27d     01 01 01    | 	byte	$01[7]
3b280     90 20 20 20 
3b284     20 20 20 20 
3b288     20 20 20 20 
3b28c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b290     42 42 42 42 
3b294     42 42 42 42 
3b298     42 42       | 	byte	$42[10]
3b29a     20 20 20 20 
3b29e     20 20 20    | 	byte	$20[7]
3b2a1     44 44 44 44 
3b2a5     44 44       | 	byte	$44[6]
3b2a7     04 04 04 04 
3b2ab     04 04 04 04 
3b2af     04 04 04 04 
3b2b3     04 04 04 04 
3b2b7     04 04 04 04 | 	byte	$04[20]
3b2bb     20 20 20 20 
3b2bf     20 20       | 	byte	$20[6]
3b2c1     48 48 48 48 
3b2c5     48 48       | 	byte	$48[6]
3b2c7     08 08 08 08 
3b2cb     08 08 08 08 
3b2cf     08 08 08 08 
3b2d3     08 08 08 08 
3b2d7     08 08 08 08 | 	byte	$08[20]
3b2db     20 20 20 20 
3b2df     01 00 00 00 
3b2e3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b2e4                 | __methodtable__
3b2e4     88 B3 01 00 | 	long	@_do_no_command
3b2e8     30 25 01 00 | 	long	@_do_plus
3b2ec     1C 2A 01 00 | 	long	@_do_minus
3b2f0     E4 2E 01 00 | 	long	@_do_or
3b2f4     FC 2F 01 00 | 	long	@_do_mul
3b2f8     88 35 01 00 | 	long	@_do_fdiv
3b2fc     CC 2D 01 00 | 	long	@_do_and
3b300     68 33 01 00 | 	long	@_do_div
3b304     50 37 01 00 | 	long	@_do_mod
3b308     70 39 01 00 | 	long	@_do_shl
3b30c     88 3A 01 00 | 	long	@_do_shr
3b310     A0 3B 01 00 | 	long	@_do_power
3b314     B0 18 01 00 | 	long	@_do_getvar
3b318     1C BB 00 00 | 	long	@_do_push
3b31c     B0 12 01 00 | 	long	@_do_assign
3b320     4C 81 01 00 | 	long	@_do_cls
3b324     44 FC 00 00 | 	long	@_do_new
3b328     C4 81 01 00 | 	long	@_do_plot
3b32c     94 82 01 00 | 	long	@_do_draw
3b330     08 8C 01 00 | 	long	@_do_print
3b334     00 85 01 00 | 	long	@_do_circle
3b338     88 83 01 00 | 	long	@_do_fcircle
3b33c     78 86 01 00 | 	long	@_do_box
3b340     20 8A 01 00 | 	long	@_do_frame
3b344     8C 81 01 00 | 	long	@_do_color
3b348     38 95 00 00 | 	long	@_do_for
3b34c     8C 98 00 00 | 	long	@_do_next
3b350     A8 F9 00 00 | 	long	@_do_list
3b354     84 CD 00 00 | 	long	@_do_run
3b358     6C 11 01 00 | 	long	@_do_error
3b35c     64 FE 00 00 | 	long	@_do_fast_goto
3b360     CC 0D 01 00 | 	long	@_do_find_goto
3b364     DC 0F 01 00 | 	long	@_do_slow_goto
3b368     A4 AF 01 00 | 	long	@_do_nothing
3b36c     60 C1 00 00 | 	long	@_test_csave
3b370     C4 C4 00 00 | 	long	@_do_save
3b374     CC C8 00 00 | 	long	@_do_load
3b378     3C 9B 01 00 | 	long	@_do_pinwrite
3b37c     D8 A5 01 00 | 	long	@_do_waitms
3b380     14 A7 01 00 | 	long	@_do_waitvbl
3b384     3C AD 01 00 | 	long	@_do_if
3b388     20 AE 01 00 | 	long	@_do_else
3b38c     68 3D 01 00 | 	long	@_do_eq
3b390     E0 4B 01 00 | 	long	@_do_ge
3b394     B8 50 01 00 | 	long	@_do_le
3b398     40 42 01 00 | 	long	@_do_gt
3b39c     18 47 01 00 | 	long	@_do_lt
3b3a0     90 55 01 00 | 	long	@_do_ne
3b3a4     C8 5B 01 00 | 	long	@_do_rnd
3b3a8     A8 AF 01 00 | 	long	@_do_brun
3b3ac     74 B2 01 00 | 	long	@_do_beep
3b3b0     44 A7 01 00 | 	long	@_do_dir
3b3b4     58 91 01 00 | 	long	@_do_paper
3b3b8     E0 91 01 00 | 	long	@_do_ink
3b3bc     7C 92 01 00 | 	long	@_do_font
3b3c0     F8 92 01 00 | 	long	@_do_mode
3b3c4     E0 B1 01 00 | 	long	@_do_mouse
3b3c8     E4 80 01 00 | 	long	@_do_gettime
3b3cc     14 B2 01 00 | 	long	@_do_cursor
3b3d0     48 B2 01 00 | 	long	@_do_click
3b3d4     70 7E 01 00 | 	long	@_do_mousex
3b3d8     B4 7E 01 00 | 	long	@_do_mousey
3b3dc     3C 7F 01 00 | 	long	@_do_mousek
3b3e0     F8 7E 01 00 | 	long	@_do_mousew
3b3e4     9C 5E 01 00 | 	long	@_do_sin
3b3e8     40 74 01 00 | 	long	@_do_stick
3b3ec     C4 75 01 00 | 	long	@_do_strig
3b3f0     84 7D 01 00 | 	long	@_do_sprite
3b3f4     10 7A 01 00 | 	long	@_do_defsprite
3b3f8     48 77 01 00 | 	long	@_do_getpixel
3b3fc     20 A7 01 00 | 	long	@_do_waitclock
3b400     94 B3 01 00 | 	long	@_do_negative
3b404     80 7F 01 00 | 	long	@_do_rdpin
3b408     EC 7F 01 00 | 	long	@_do_rqpin
3b40c     60 80 01 00 | 	long	@_do_pinread
3b410     D4 9D 01 00 | 	long	@_do_wrpin
3b414     54 9E 01 00 | 	long	@_do_wxpin
3b418     D4 9E 01 00 | 	long	@_do_wypin
3b41c     C4 9B 01 00 | 	long	@_do_pinfloat
3b420     04 9C 01 00 | 	long	@_do_pinlo
3b424     44 9C 01 00 | 	long	@_do_pinhi
3b428     C4 9C 01 00 | 	long	@_do_pinstart
3b42c     84 9C 01 00 | 	long	@_do_pintoggle
3b430     54 9F 01 00 | 	long	@_do_position
3b434     F8 6D 01 00 | 	long	@_do_cos
3b438     18 6F 01 00 | 	long	@_do_tan
3b43c     3C 72 01 00 | 	long	@_do_atn
3b440     24 70 01 00 | 	long	@_do_asin
3b444     30 71 01 00 | 	long	@_do_acos
3b448     50 73 01 00 | 	long	@_do_sqr
3b44c     60 88 01 00 | 	long	@_do_fill
3b450     BC F0 00 00 | 	long	@_do_defsnd
3b454     D4 D0 00 00 | 	long	@_do_defenv
3b458     44 AE 01 00 | 	long	@_do_rad
3b45c     6C AE 01 00 | 	long	@_do_deg
3b460     E8 AE 01 00 | 	long	@_do_int
3b464     68 DD 00 00 | 	long	@_do_play
3b468     9C 98 01 00 | 	long	@_do_setdelay
3b46c     F4 97 01 00 | 	long	@_do_setenv
3b470     44 99 01 00 | 	long	@_do_setlen
3b474     94 9A 01 00 | 	long	@_do_setpan
3b478     EC 99 01 00 | 	long	@_do_setvol
3b47c     A4 96 01 00 | 	long	@_do_setwave
3b480     4C 97 01 00 | 	long	@_do_setsustain
3b484     24 F0 00 00 | 	long	@_do_release
3b488     90 5D 01 00 | 	long	@_do_getenvsustain
3b48c     DC 9F 01 00 | 	long	@_do_poke
3b490     B4 A0 01 00 | 	long	@_do_dpoke
3b494     8C A1 01 00 | 	long	@_do_lpoke
3b498     64 A2 01 00 | 	long	@_do_peek
3b49c     14 A3 01 00 | 	long	@_do_dpeek
3b4a0     C0 A3 01 00 | 	long	@_do_lpeek
3b4a4     D0 A4 01 00 | 	long	@_do_adr
3b4a8     6C A4 01 00 | 	long	@_do_fre
3b4ac     D4 A4 01 00 | 	long	@_do_getnotevalue
3b4b0     68 1E 01 00 | 	long	@_do_getaddr
3b4b4     58 22 01 00 | 	long	@_do_inkey
3b4b8     44 B4 01 00 | 	long	@_do_abs
3b4bc     38 6B 01 00 | 	long	@_do_hex
3b4c0     98 6C 01 00 | 	long	@_do_bin
3b4c4     34 68 01 00 | 	long	@_do_val
3b4c8     38 67 01 00 | 	long	@_do_chr
3b4cc     74 64 01 00 | 	long	@_do_asc
3b4d0     F0 62 01 00 | 	long	@_do_left
3b4d4     6C 61 01 00 | 	long	@_do_right
3b4d8     A8 5F 01 00 | 	long	@_do_mid
3b4dc     CC 65 01 00 | 	long	@_do_len
3b4e0     20 94 00 00 | 	long	@_do_gosub
3b4e4     A8 97 00 00 | 	long	@_do_return
3b4e8     50 CD 00 00 | 	long	@_do_end
3b4ec     54 98 00 00 | 	long	@_do_pop
3b4f0     98 78 01 00 | 	long	@_do_log
3b4f4     A0 E9 00 00 | 	long	@_do_changevol
3b4f8     E8 ED 00 00 | 	long	@_do_changewav
3b4fc     80 EA 00 00 | 	long	@_do_changepan
3b500     90 EB 00 00 | 	long	@_do_changefreq
3b504     14 EF 00 00 | 	long	@_do_shutup
3b508     94 AE 01 00 | 	long	@_do_round
3b50c     C0 C8 00 00 | 	long	@_do_enter
3b510     54 FF 00 00 | 	long	@_do_open
3b514     6C 02 01 00 | 	long	@_do_close
3b518     E8 02 01 00 | 	long	@_do_get
3b51c     8C 08 01 00 | 	long	@_do_put
3b520     54 F1 01 00 | 	long	@_hg010b_spin2_putchar
3b524     78 FE 02 00 | 	long	@__struct___bas_wrap_sender_tx
3b528     BC FE 02 00 | 	long	@__struct___bas_wrap_sender_rx
3b52c     04 FF 02 00 | 	long	@__struct___bas_wrap_sender_close
3b530     A8 FD 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b534     18 FE 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3b538     60 FD 02 00 | 	long	@___strs_cl_pfunc
3b53c     F4 5A 02 00 | 	long	@__system____root_opendir
3b540     90 5B 02 00 | 	long	@__system____root_closedir
3b544     0C 5B 02 00 | 	long	@__system____root_readdir
3b548     98 5B 02 00 | 	long	@__system____root_stat
3b54c     E4 53 02 00 | 	long	@__system____default_putc
3b550     68 53 02 00 | 	long	@__system____default_getc
3b554     8C 54 02 00 | 	long	@__system____default_flush
3b558     64 E8 02 00 | 	long	@_fatfs_cc_v_close
3b55c     80 EC 02 00 | 	long	@_fatfs_cc_v_read
3b560     94 ED 02 00 | 	long	@_fatfs_cc_v_write
3b564     74 EE 02 00 | 	long	@_fatfs_cc_v_lseek
3b568     FC EE 02 00 | 	long	@_fatfs_cc_v_ioctl
3b56c     50 EF 02 00 | 	long	@_fatfs_cc_v_open
3b570     C8 E7 02 00 | 	long	@_fatfs_cc_v_creat
3b574     A8 E8 02 00 | 	long	@_fatfs_cc_v_opendir
3b578     1C E9 02 00 | 	long	@_fatfs_cc_v_closedir
3b57c     5C E9 02 00 | 	long	@_fatfs_cc_v_readdir
3b580     90 EA 02 00 | 	long	@_fatfs_cc_v_stat
3b584     10 EF 02 00 | 	long	@_fatfs_cc_v_mkdir
3b588     30 EF 02 00 | 	long	@_fatfs_cc_v_rmdir
3b58c     20 EF 02 00 | 	long	@_fatfs_cc_v_remove
3b590     40 EF 02 00 | 	long	@_fatfs_cc_v_rename
3b594     60 F0 02 00 | 	long	@_fatfs_cc_v_init
3b598     68 F0 02 00 | 	long	@_fatfs_cc_v_deinit
3b59c     20 08 02 00 | 	long	@__system___tx
3b5a0     60 08 02 00 | 	long	@__system___rx
3b5a4     04 67 02 00 | 	long	@__system___rxtxioctl_0696
3b5a8     5C 67 02 00 | 	long	@__system____dummy_flush_0697
3b5ac     30 F0 02 00 | 	long	@_fatfs_cc_v_flush
3b5b0                 | __heap_base
3b5b0     00 00 00 00 
      ...             
6a3b0     00 00 00 00 
6a3b4     00 00 00 00 | 	long	0[48002]
6a3b8                 | objmem
6a3b8     00 00 00 00 
      ...             
747d0     00 00 00 00 
747d4     00 00 00 00 | 	long	0[10504]
747d8                 | stackspace
747d8     00 00 00 00 | 	long	0[1]
747dc 100             | 	org	COG_BSS_START
747dc 100             | _var01
747dc 100             | 	res	1
747dc 101             | _var02
747dc 101             | 	res	1
747dc 102             | _var03
747dc 102             | 	res	1
747dc 103             | _var04
747dc 103             | 	res	1
747dc 104             | _var05
747dc 104             | 	res	1
747dc 105             | _var06
747dc 105             | 	res	1
747dc 106             | _var07
747dc 106             | 	res	1
747dc 107             | _var08
747dc 107             | 	res	1
747dc 108             | _var09
747dc 108             | 	res	1
747dc 109             | arg01
747dc 109             | 	res	1
747dc 10a             | arg02
747dc 10a             | 	res	1
747dc 10b             | arg03
747dc 10b             | 	res	1
747dc 10c             | arg04
747dc 10c             | 	res	1
747dc 10d             | arg05
747dc 10d             | 	res	1
747dc 10e             | arg06
747dc 10e             | 	res	1
747dc 10f             | local01
747dc 10f             | 	res	1
747dc 110             | local02
747dc 110             | 	res	1
747dc 111             | local03
747dc 111             | 	res	1
747dc 112             | local04
747dc 112             | 	res	1
747dc 113             | local05
747dc 113             | 	res	1
747dc 114             | local06
747dc 114             | 	res	1
747dc 115             | local07
747dc 115             | 	res	1
747dc 116             | local08
747dc 116             | 	res	1
747dc 117             | local09
747dc 117             | 	res	1
747dc 118             | local10
747dc 118             | 	res	1
747dc 119             | local11
747dc 119             | 	res	1
747dc 11a             | local12
747dc 11a             | 	res	1
747dc 11b             | local13
747dc 11b             | 	res	1
747dc 11c             | local14
747dc 11c             | 	res	1
747dc 11d             | local15
747dc 11d             | 	res	1
747dc 11e             | local16
747dc 11e             | 	res	1
747dc 11f             | local17
747dc 11f             | 	res	1
747dc 120             | local18
747dc 120             | 	res	1
747dc 121             | local19
747dc 121             | 	res	1
747dc 122             | local20
747dc 122             | 	res	1
747dc 123             | local21
747dc 123             | 	res	1
747dc 124             | local22
747dc 124             | 	res	1
747dc 125             | local23
747dc 125             | 	res	1
747dc 126             | local24
747dc 126             | 	res	1
747dc 127             | local25
747dc 127             | 	res	1
747dc 128             | local26
747dc 128             | 	res	1
747dc 129             | local27
747dc 129             | 	res	1
747dc 12a             | local28
747dc 12a             | 	res	1
747dc 12b             | local29
747dc 12b             | 	res	1
747dc 12c             | local30
747dc 12c             | 	res	1
747dc 12d             | local31
747dc 12d             | 	res	1
747dc 12e             | local32
747dc 12e             | 	res	1
747dc 12f             | local33
747dc 12f             | 	res	1
747dc 130             | local34
747dc 130             | 	res	1
747dc 131             | local35
747dc 131             | 	res	1
747dc 132             | local36
747dc 132             | 	res	1
747dc 133             | local37
747dc 133             | 	res	1
747dc 134             | local38
747dc 134             | 	res	1
747dc 135             | local39
747dc 135             | 	res	1
747dc 136             | local40
747dc 136             | 	res	1
747dc 137             | local41
747dc 137             | 	res	1
747dc 138             | local42
747dc 138             | 	res	1
747dc 139             | local43
747dc 139             | 	res	1
747dc 13a             | local44
747dc 13a             | 	res	1
747dc 13b             | local45
747dc 13b             | 	res	1
747dc 13c             | local46
747dc 13c             | 	res	1
747dc 13d             | local47
747dc 13d             | 	res	1
747dc 13e             | muldiva_
747dc 13e             | 	res	1
747dc 13f             | muldivb_
747dc 13f             | 	res	1
747dc 140             | 	fit	480
747dc 140             | 
