00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic030.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 30
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 EC D8 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 34 B9 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 68 B6 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 3C A7 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 48 A9 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 A0 A4 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 A0 11 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 88 B0 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 14 43 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 48 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C4 6A 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 7C 68 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 54 7A 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 5C 4B 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     2C E9 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     60 FA B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     DC E5 05 F1 | 	add	objptr, ##41948
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     DC E5 85 F1 | 	sub	objptr, ##41948
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     10 E5 05 F1 | 	add	objptr, ##41232
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     10 E5 85 F1 | 	sub	objptr, ##41232
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     58 FD B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     AC 04 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     A4 FE B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     10 E5 05 F1 | 	add	objptr, ##41232
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     10 E5 85 F1 | 	sub	objptr, ##41232
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B4 E5 05 F1 | 	add	objptr, ##41908
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E4 E4 85 F1 | 	sub	objptr, ##36068
009c0     68 FC B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     74 CE B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     DC E5 05 F1 | 	add	objptr, ##41948
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     DC E5 85 F1 | 	sub	objptr, ##41948
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     D8 E5 05 F1 | 	add	objptr, ##41944
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     D8 E5 85 F1 | 	sub	objptr, ##41944
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     6C CC B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     0C CC B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E4 E5 05 F1 | 	add	objptr, ##41956
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     A6 E5 85 F1 | 	sub	objptr, ##41894
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     A8 E5 05 F1 | 	add	objptr, ##41896
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     A6 E5 85 F1 | 	sub	objptr, ##41894
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     9C CB B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     74 E3 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E4 E5 05 F1 | 	add	objptr, ##41956
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E4 E5 85 F1 | 	sub	objptr, ##41956
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     90 E6 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     10 E5 05 A1 |  if_e	add	objptr, ##41232
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     10 E5 85 A1 |  if_e	sub	objptr, ##41232
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     94 F9 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     E8 00 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     E4 FA B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     98 00 90 5D |  if_ne	jmp	#LR__0021
00cc8     81 01 00 FF 
00ccc     52 49 06 F6 | 	mov	local22, ##@LR__5037
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     30 CA B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     C4 1F B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     D4 FD B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     3E E4 05 F1 | 	add	objptr, #62
00d34     F2 28 C2 FA | 	rdbyte	local06, objptr
00d38     3E E4 85 F1 | 	sub	objptr, #62
00d3c     23 28 16 F2 | 	cmp	local06, #35 wc
00d40     3E E4 05 C1 |  if_b	add	objptr, #62
00d44     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d48     3E E4 85 C1 |  if_b	sub	objptr, #62
00d4c     01 12 06 C1 |  if_b	add	arg01, #1
00d50     F8 EA B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d54     28 ED B1 FD | 	call	#_hg010b_spin2_crlf
00d58                 | '     v.crlf() 
00d58                 | '     return  line$
00d58     24 FB 01 F6 | 	mov	result1, local22
00d5c     DC 06 90 FD | 	jmp	#LR__0048
00d60                 | LR__0021
00d60     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d64                 | '   
00d64                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d64     2B 32 0E F2 | 	cmp	local11, #43 wz
00d68     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d6c     3C E4 05 F1 | 	add	objptr, #60
00d70     F2 28 E2 FA | 	rdword	local06, objptr
00d74     3C E4 85 F1 | 	sub	objptr, #60
00d78     F0 28 16 F2 | 	cmp	local06, #240 wc
00d7c     9C 00 90 CD |  if_b	jmp	#LR__0022
00d80     50 00 00 FF 
00d84     10 E5 05 F1 | 	add	objptr, ##41232
00d88     F2 2C 02 FB | 	rdlong	local08, objptr
00d8c     50 00 00 FF 
00d90     10 E5 85 F1 | 	sub	objptr, ##41232
00d94     16 2B 02 F6 | 	mov	local07, local08
00d98     01 2A 0E F2 | 	cmp	local07, #1 wz
00d9c     7C 00 90 5D |  if_ne	jmp	#LR__0022
00da0     04 00 00 FF 
00da4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00da8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dac     04 00 00 FF 
00db0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00db4     56 00 00 FF 
00db8     44 2A 06 F6 | 	mov	local07, ##44100
00dbc     0E 2C C6 F9 | 	decod	local08, #14
00dc0     00 2E 06 F6 | 	mov	local09, #0
00dc4     03 00 00 FF 
00dc8     DE 30 06 F6 | 	mov	local10, ##1758
00dcc     00 12 06 F6 | 	mov	arg01, #0
00dd0     56 00 00 FF 
00dd4     44 16 06 F6 | 	mov	arg03, ##44100
00dd8     0E 18 C6 F9 | 	decod	arg04, #14
00ddc     00 1A 06 F6 | 	mov	arg05, #0
00de0     03 00 00 FF 
00de4     DE 1C 06 F6 | 	mov	arg06, ##1758
00de8     0B 00 00 FF 
00dec     CC E4 05 F1 | 	add	objptr, ##5836
00df0     38 F8 B1 FD | 	call	#_audio096_spin2_play
00df4     0B 00 00 FF 
00df8     CC E4 85 F1 | 	sub	objptr, ##5836
00dfc     2C 13 06 F6 | 	mov	arg01, #300
00e00     8C FF B1 FD | 	call	#__system___waitms
00e04     00 12 06 F6 | 	mov	arg01, #0
00e08     0B 00 00 FF 
00e0c     CC E4 05 F1 | 	add	objptr, ##5836
00e10     88 F9 B1 FD | 	call	#_audio096_spin2_stop
00e14     0B 00 00 FF 
00e18     CC E4 85 F1 | 	sub	objptr, ##5836
00e1c                 | LR__0022
00e1c                 | '   if key4=77 then i=127 : do: 															' end
00e1c     4D 32 0E F2 | 	cmp	local11, #77 wz
00e20     90 00 90 5D |  if_ne	jmp	#LR__0027
00e24     7F 38 06 F6 | 	mov	local14, #127
00e28                 | LR__0023
00e28                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e28     3E E4 05 F1 | 	add	objptr, #62
00e2c     F2 2E C2 FA | 	rdbyte	local09, objptr
00e30     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e34     16 31 02 F6 | 	mov	local10, local08
00e38     80 30 06 FA | 	mul	local10, #128
00e3c     3A E4 85 F1 | 	sub	objptr, #58
00e40     F2 3A 02 FB | 	rdlong	local15, objptr
00e44     04 E4 85 F1 | 	sub	objptr, #4
00e48     1D 2B 02 F6 | 	mov	local07, local15
00e4c     18 2B 02 F1 | 	add	local07, local10
00e50     1C 2B 02 F1 | 	add	local07, local14
00e54     15 13 02 F6 | 	mov	arg01, local07
00e58     E4 C8 B1 FD | 	call	#_pspeek
00e5c     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e60     20 28 0E F2 | 	cmp	local06, #32 wz
00e64     2C 00 90 AD |  if_e	jmp	#LR__0025
00e68                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e68     7F 38 56 F2 | 	cmps	local14, #127 wc
00e6c     18 00 90 3D |  if_ae	jmp	#LR__0024
00e70     1C 2B 02 F6 | 	mov	local07, local14
00e74     01 2A 66 F0 | 	shl	local07, #1
00e78     15 13 02 F6 | 	mov	arg01, local07
00e7c     02 12 06 F1 | 	add	arg01, #2
00e80     68 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e84     2C 00 90 FD | 	jmp	#LR__0026
00e88                 | LR__0024
00e88     FE 12 06 F6 | 	mov	arg01, #254
00e8c     5C E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e90     20 00 90 FD | 	jmp	#LR__0026
00e94                 | LR__0025
00e94     01 38 86 F1 | 	sub	local14, #1
00e98     37 00 00 FF 
00e9c     34 E4 05 F1 | 	add	objptr, ##28212
00ea0     F2 28 02 FB | 	rdlong	local06, objptr
00ea4     37 00 00 FF 
00ea8     34 E4 85 F1 | 	sub	objptr, ##28212
00eac     14 39 0A F2 | 	cmp	local14, local06 wz
00eb0     74 FF 9F 5D |  if_ne	jmp	#LR__0023
00eb4                 | LR__0026
00eb4                 | LR__0027
00eb4                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00eb4     37 00 00 FF 
00eb8     34 E4 05 F1 | 	add	objptr, ##28212
00ebc     F2 34 02 FB | 	rdlong	local12, objptr
00ec0     37 00 00 FF 
00ec4     34 E4 85 F1 | 	sub	objptr, ##28212
00ec8     1A 29 02 F6 | 	mov	local06, local12
00ecc     14 39 0A F2 | 	cmp	local14, local06 wz
00ed0     2C 00 90 5D |  if_ne	jmp	#LR__0028
00ed4     37 00 00 FF 
00ed8     34 E4 05 F1 | 	add	objptr, ##28212
00edc     F2 2C 02 FB | 	rdlong	local08, objptr
00ee0     37 00 00 FF 
00ee4     34 E4 85 F1 | 	sub	objptr, ##28212
00ee8     16 2B 02 F6 | 	mov	local07, local08
00eec     15 35 02 F6 | 	mov	local12, local07
00ef0     01 34 66 F0 | 	shl	local12, #1
00ef4     1A 29 02 F6 | 	mov	local06, local12
00ef8     14 13 02 F6 | 	mov	arg01, local06
00efc     EC E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f00                 | LR__0028
00f00                 | '     
00f00                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f00     4A 32 0E F2 | 	cmp	local11, #74 wz
00f04     2C 00 90 5D |  if_ne	jmp	#LR__0029
00f08     37 00 00 FF 
00f0c     34 E4 05 F1 | 	add	objptr, ##28212
00f10     F2 2C 02 FB | 	rdlong	local08, objptr
00f14     37 00 00 FF 
00f18     34 E4 85 F1 | 	sub	objptr, ##28212
00f1c     16 2B 02 F6 | 	mov	local07, local08
00f20     15 35 02 F6 | 	mov	local12, local07
00f24     01 34 66 F0 | 	shl	local12, #1
00f28     1A 29 02 F6 | 	mov	local06, local12
00f2c     14 13 02 F6 | 	mov	arg01, local06
00f30     B8 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f34                 | LR__0029
00f34                 | '   if key4=75 then v.setcursory(0)														' pgup
00f34     4B 32 0E F2 | 	cmp	local11, #75 wz
00f38     00 28 06 A6 |  if_e	mov	local06, #0
00f3c     00 12 06 A6 |  if_e	mov	arg01, #0
00f40     D8 E1 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f44                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f44     4E 32 0E F2 | 	cmp	local11, #78 wz
00f48     24 28 06 A6 |  if_e	mov	local06, #36
00f4c     24 12 06 A6 |  if_e	mov	arg01, #36
00f50     C8 E1 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f54                 | '   if key4=76 then 																' del
00f54     4C 32 0E F2 | 	cmp	local11, #76 wz
00f58     AC 01 90 5D |  if_ne	jmp	#LR__0034
00f5c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f5c     3E E4 05 F1 | 	add	objptr, #62
00f60     F2 2A C2 FA | 	rdbyte	local07, objptr
00f64     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f68     80 2C 06 FA | 	mul	local08, #128
00f6c     3A E4 85 F1 | 	sub	objptr, #58
00f70     F2 4A 02 FB | 	rdlong	local23, objptr
00f74     25 39 02 F6 | 	mov	local14, local23
00f78     16 39 02 F1 | 	add	local14, local08
00f7c     38 E4 05 F1 | 	add	objptr, #56
00f80     F2 30 E2 FA | 	rdword	local10, objptr
00f84     18 45 52 F6 | 	abs	local20, local10 wc
00f88     01 44 46 F0 | 	shr	local20, #1
00f8c     22 39 82 F3 | 	sumc	local14, local20
00f90     15 2B E2 F8 | 	getbyte	local07, local07, #0
00f94     80 2A 06 FA | 	mul	local07, #128
00f98     3C E4 85 F1 | 	sub	objptr, #60
00f9c     15 4B 02 F1 | 	add	local23, local07
00fa0     80 4A 06 F1 | 	add	local23, #128
00fa4                 | LR__0030
00fa4     25 39 52 F2 | 	cmps	local14, local23 wc
00fa8     20 00 90 3D |  if_ae	jmp	#LR__0031
00fac     1C 13 02 F6 | 	mov	arg01, local14
00fb0     01 12 06 F1 | 	add	arg01, #1
00fb4     88 C7 B1 FD | 	call	#_pspeek
00fb8     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fbc     1C 13 02 F6 | 	mov	arg01, local14
00fc0     34 C7 B1 FD | 	call	#_pspoke
00fc4     01 38 06 F1 | 	add	local14, #1
00fc8     D8 FF 9F FD | 	jmp	#LR__0030
00fcc                 | LR__0031
00fcc     3E E4 05 F1 | 	add	objptr, #62
00fd0     F2 2E C2 FA | 	rdbyte	local09, objptr
00fd4     80 2E 06 FA | 	mul	local09, #128
00fd8     3A E4 85 F1 | 	sub	objptr, #58
00fdc     F2 12 02 FB | 	rdlong	arg01, objptr
00fe0     04 E4 85 F1 | 	sub	objptr, #4
00fe4     17 13 02 F1 | 	add	arg01, local09
00fe8     7F 12 06 F1 | 	add	arg01, #127
00fec     20 14 06 F6 | 	mov	arg02, #32
00ff0     04 C7 B1 FD | 	call	#_pspoke
00ff4     51 00 00 FF 
00ff8     E4 E5 05 F1 | 	add	objptr, ##41956
00ffc     F2 00 68 FC | 	wrlong	#0, objptr
01000     51 00 00 FF 
01004     A6 E5 85 F1 | 	sub	objptr, ##41894
01008     F2 34 C2 FA | 	rdbyte	local12, objptr
0100c     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01010     80 2C 06 FA | 	mul	local08, #128
01014     3A E4 85 F1 | 	sub	objptr, #58
01018     F2 2E 02 FB | 	rdlong	local09, objptr
0101c     17 39 02 F6 | 	mov	local14, local09
01020     16 39 02 F1 | 	add	local14, local08
01024     38 E4 05 F1 | 	add	objptr, #56
01028     F2 3A E2 FA | 	rdword	local15, objptr
0102c     1D 31 32 F9 | 	getword	local10, local15, #0
01030     18 45 52 F6 | 	abs	local20, local10 wc
01034     01 44 46 F0 | 	shr	local20, #1
01038     22 45 82 F6 | 	negc	local20, local20
0103c     22 39 02 F1 | 	add	local14, local20
01040     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01044     14 2B 02 F6 | 	mov	local07, local06
01048     80 2A 06 FA | 	mul	local07, #128
0104c     17 2D 02 F6 | 	mov	local08, local09
01050     3C E4 85 F1 | 	sub	objptr, #60
01054     16 4D 02 F6 | 	mov	local24, local08
01058     15 4D 02 F1 | 	add	local24, local07
0105c     80 4C 06 F1 | 	add	local24, #128
01060                 | LR__0032
01060     26 39 52 F2 | 	cmps	local14, local24 wc
01064     A0 00 90 3D |  if_ae	jmp	#LR__0033
01068     3C E4 05 F1 | 	add	objptr, #60
0106c     F2 28 E2 FA | 	rdword	local06, objptr
01070     51 00 00 FF 
01074     A8 E5 05 F1 | 	add	objptr, ##41896
01078     F2 2C 02 FB | 	rdlong	local08, objptr
0107c     01 2C 66 F0 | 	shl	local08, #1
01080     16 29 02 F1 | 	add	local06, local08
01084     51 00 00 FF 
01088     A6 E5 85 F1 | 	sub	objptr, ##41894
0108c     F2 34 C2 FA | 	rdbyte	local12, objptr
01090     3E E4 85 F1 | 	sub	objptr, #62
01094     10 34 06 FA | 	mul	local12, #16
01098     04 34 06 F1 | 	add	local12, #4
0109c     1C 13 02 F6 | 	mov	arg01, local14
010a0     9C C6 B1 FD | 	call	#_pspeek
010a4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010a8     41 E4 05 F1 | 	add	objptr, #65
010ac     F2 2C 02 FB | 	rdlong	local08, objptr
010b0     04 E4 05 F1 | 	add	objptr, #4
010b4     F2 30 02 FB | 	rdlong	local10, objptr
010b8     45 E4 85 F1 | 	sub	objptr, #69
010bc     18 2F 02 F6 | 	mov	local09, local10
010c0     14 13 02 F6 | 	mov	arg01, local06
010c4     1A 15 02 F6 | 	mov	arg02, local12
010c8     15 17 02 F6 | 	mov	arg03, local07
010cc     16 19 02 F6 | 	mov	arg04, local08
010d0     17 1B 02 F6 | 	mov	arg05, local09
010d4     74 DE B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010d8     51 00 00 FF 
010dc     E4 E5 05 F1 | 	add	objptr, ##41956
010e0     F2 28 02 FB | 	rdlong	local06, objptr
010e4     01 28 06 F1 | 	add	local06, #1
010e8     F2 28 62 FC | 	wrlong	local06, objptr
010ec     51 00 00 FF 
010f0     E4 E5 85 F1 | 	sub	objptr, ##41956
010f4     1C 29 02 F6 | 	mov	local06, local14
010f8     1C 35 02 F6 | 	mov	local12, local14
010fc     01 34 06 F1 | 	add	local12, #1
01100     1A 39 02 F6 | 	mov	local14, local12
01104     58 FF 9F FD | 	jmp	#LR__0032
01108                 | LR__0033
01108                 | LR__0034
01108                 | ' 
01108                 | '   if key4 = 42 then  'backspace
01108     2A 32 0E F2 | 	cmp	local11, #42 wz
0110c     14 02 90 5D |  if_ne	jmp	#LR__0040
01110                 | '     if v.cursor_x>editor_spaces*2 then 
01110     3C E4 05 F1 | 	add	objptr, #60
01114     F2 34 E2 FA | 	rdword	local12, objptr
01118     1A 29 32 F9 | 	getword	local06, local12, #0
0111c     36 00 00 FF 
01120     F8 E5 05 F1 | 	add	objptr, ##28152
01124     F2 2E 02 FB | 	rdlong	local09, objptr
01128     37 00 00 FF 
0112c     34 E4 85 F1 | 	sub	objptr, ##28212
01130     17 2D 02 F6 | 	mov	local08, local09
01134     16 2B 02 F6 | 	mov	local07, local08
01138     01 2A 66 F0 | 	shl	local07, #1
0113c     15 29 5A F2 | 	cmps	local06, local07 wcz
01140     C8 01 90 ED |  if_be	jmp	#LR__0038
01144     3C E4 05 F1 | 	add	objptr, #60
01148     F2 12 E2 FA | 	rdword	arg01, objptr
0114c     02 12 86 F1 | 	sub	arg01, #2
01150     02 E4 05 F1 | 	add	objptr, #2
01154     F2 14 C2 FA | 	rdbyte	arg02, objptr
01158     3E E4 85 F1 | 	sub	objptr, #62
0115c     50 DF B1 FD | 	call	#_hg010b_spin2_setcursorpos
01160                 | '       position v.cursor_x-2,v.cursor_y
01160                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01160     3E E4 05 F1 | 	add	objptr, #62
01164     F2 2A C2 FA | 	rdbyte	local07, objptr
01168     15 2D E2 F8 | 	getbyte	local08, local07, #0
0116c     80 2C 06 FA | 	mul	local08, #128
01170     3A E4 85 F1 | 	sub	objptr, #58
01174     F2 4E 02 FB | 	rdlong	local25, objptr
01178     27 39 02 F6 | 	mov	local14, local25
0117c     16 39 02 F1 | 	add	local14, local08
01180     38 E4 05 F1 | 	add	objptr, #56
01184     F2 30 E2 FA | 	rdword	local10, objptr
01188     18 45 52 F6 | 	abs	local20, local10 wc
0118c     01 44 46 F0 | 	shr	local20, #1
01190     22 39 82 F3 | 	sumc	local14, local20
01194     15 2B E2 F8 | 	getbyte	local07, local07, #0
01198     80 2A 06 FA | 	mul	local07, #128
0119c     3C E4 85 F1 | 	sub	objptr, #60
011a0     15 4F 02 F1 | 	add	local25, local07
011a4     80 4E 06 F1 | 	add	local25, #128
011a8                 | LR__0035
011a8     27 39 52 F2 | 	cmps	local14, local25 wc
011ac     20 00 90 3D |  if_ae	jmp	#LR__0036
011b0     1C 13 02 F6 | 	mov	arg01, local14
011b4     01 12 06 F1 | 	add	arg01, #1
011b8     84 C5 B1 FD | 	call	#_pspeek
011bc     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011c0     1C 13 02 F6 | 	mov	arg01, local14
011c4     30 C5 B1 FD | 	call	#_pspoke
011c8     01 38 06 F1 | 	add	local14, #1
011cc     D8 FF 9F FD | 	jmp	#LR__0035
011d0                 | LR__0036
011d0     3E E4 05 F1 | 	add	objptr, #62
011d4     F2 2E C2 FA | 	rdbyte	local09, objptr
011d8     80 2E 06 FA | 	mul	local09, #128
011dc     3A E4 85 F1 | 	sub	objptr, #58
011e0     F2 12 02 FB | 	rdlong	arg01, objptr
011e4     04 E4 85 F1 | 	sub	objptr, #4
011e8     17 13 02 F1 | 	add	arg01, local09
011ec     7F 12 06 F1 | 	add	arg01, #127
011f0     20 14 06 F6 | 	mov	arg02, #32
011f4     00 C5 B1 FD | 	call	#_pspoke
011f8     51 00 00 FF 
011fc     E4 E5 05 F1 | 	add	objptr, ##41956
01200     F2 00 68 FC | 	wrlong	#0, objptr
01204     51 00 00 FF 
01208     A6 E5 85 F1 | 	sub	objptr, ##41894
0120c     F2 34 C2 FA | 	rdbyte	local12, objptr
01210     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01214     80 2C 06 FA | 	mul	local08, #128
01218     3A E4 85 F1 | 	sub	objptr, #58
0121c     F2 2E 02 FB | 	rdlong	local09, objptr
01220     17 39 02 F6 | 	mov	local14, local09
01224     16 39 02 F1 | 	add	local14, local08
01228     38 E4 05 F1 | 	add	objptr, #56
0122c     F2 3A E2 FA | 	rdword	local15, objptr
01230     1D 31 32 F9 | 	getword	local10, local15, #0
01234     18 45 52 F6 | 	abs	local20, local10 wc
01238     01 44 46 F0 | 	shr	local20, #1
0123c     22 45 82 F6 | 	negc	local20, local20
01240     22 39 02 F1 | 	add	local14, local20
01244     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01248     14 2B 02 F6 | 	mov	local07, local06
0124c     80 2A 06 FA | 	mul	local07, #128
01250     17 2D 02 F6 | 	mov	local08, local09
01254     3C E4 85 F1 | 	sub	objptr, #60
01258     16 51 02 F6 | 	mov	local26, local08
0125c     15 51 02 F1 | 	add	local26, local07
01260     80 50 06 F1 | 	add	local26, #128
01264                 | LR__0037
01264     28 39 52 F2 | 	cmps	local14, local26 wc
01268     B8 00 90 3D |  if_ae	jmp	#LR__0039
0126c     3C E4 05 F1 | 	add	objptr, #60
01270     F2 28 E2 FA | 	rdword	local06, objptr
01274     51 00 00 FF 
01278     A8 E5 05 F1 | 	add	objptr, ##41896
0127c     F2 2C 02 FB | 	rdlong	local08, objptr
01280     01 2C 66 F0 | 	shl	local08, #1
01284     16 29 02 F1 | 	add	local06, local08
01288     51 00 00 FF 
0128c     A6 E5 85 F1 | 	sub	objptr, ##41894
01290     F2 34 C2 FA | 	rdbyte	local12, objptr
01294     3E E4 85 F1 | 	sub	objptr, #62
01298     10 34 06 FA | 	mul	local12, #16
0129c     04 34 06 F1 | 	add	local12, #4
012a0     1C 13 02 F6 | 	mov	arg01, local14
012a4     98 C4 B1 FD | 	call	#_pspeek
012a8     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012ac     41 E4 05 F1 | 	add	objptr, #65
012b0     F2 2C 02 FB | 	rdlong	local08, objptr
012b4     04 E4 05 F1 | 	add	objptr, #4
012b8     F2 30 02 FB | 	rdlong	local10, objptr
012bc     45 E4 85 F1 | 	sub	objptr, #69
012c0     18 2F 02 F6 | 	mov	local09, local10
012c4     14 13 02 F6 | 	mov	arg01, local06
012c8     1A 15 02 F6 | 	mov	arg02, local12
012cc     15 17 02 F6 | 	mov	arg03, local07
012d0     16 19 02 F6 | 	mov	arg04, local08
012d4     17 1B 02 F6 | 	mov	arg05, local09
012d8     70 DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012dc     51 00 00 FF 
012e0     E4 E5 05 F1 | 	add	objptr, ##41956
012e4     F2 28 02 FB | 	rdlong	local06, objptr
012e8     01 28 06 F1 | 	add	local06, #1
012ec     F2 28 62 FC | 	wrlong	local06, objptr
012f0     51 00 00 FF 
012f4     E4 E5 85 F1 | 	sub	objptr, ##41956
012f8     1C 29 02 F6 | 	mov	local06, local14
012fc     1C 35 02 F6 | 	mov	local12, local14
01300     01 34 06 F1 | 	add	local12, #1
01304     1A 39 02 F6 | 	mov	local14, local12
01308     58 FF 9F FD | 	jmp	#LR__0037
0130c                 | LR__0038
0130c     81 01 00 FF 
01310     53 49 06 F6 | 	mov	local22, ##@LR__5038
01314     04 28 06 F6 | 	mov	local06, #4
01318     3C E4 05 F1 | 	add	objptr, #60
0131c     F2 08 58 FC | 	wrword	#4, objptr
01320     3C E4 85 F1 | 	sub	objptr, #60
01324                 | LR__0039
01324                 | LR__0040
01324                 | ' 
01324                 | '   if key4=82 then 						' arrow up
01324     52 32 0E F2 | 	cmp	local11, #82 wz
01328     20 00 90 5D |  if_ne	jmp	#LR__0041
0132c                 | ' return cursor_y
0132c     3E E4 05 F1 | 	add	objptr, #62
01330     F2 34 C2 FA | 	rdbyte	local12, objptr
01334     3E E4 85 F1 | 	sub	objptr, #62
01338     1A 53 02 F6 | 	mov	local27, local12
0133c     01 52 86 F1 | 	sub	local27, #1
01340     29 29 02 F6 | 	mov	local06, local27
01344     14 13 02 F6 | 	mov	arg01, local06
01348     D0 DD B1 FD | 	call	#_hg010b_spin2_setcursory
0134c                 | LR__0041
0134c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0134c     51 32 0E F2 | 	cmp	local11, #81 wz
01350     24 00 90 5D |  if_ne	jmp	#LR__0042
01354                 | ' return cursor_y
01354     3E E4 05 F1 | 	add	objptr, #62
01358     F2 34 C2 FA | 	rdbyte	local12, objptr
0135c     3E E4 85 F1 | 	sub	objptr, #62
01360     1A 53 02 F6 | 	mov	local27, local12
01364     01 52 06 F1 | 	add	local27, #1
01368     24 52 36 F3 | 	fle	local27, #36 wc
0136c     29 29 02 F6 | 	mov	local06, local27
01370     14 13 02 F6 | 	mov	arg01, local06
01374     A4 DD B1 FD | 	call	#_hg010b_spin2_setcursory
01378                 | LR__0042
01378                 | '   if key4=80 then
01378     50 32 0E F2 | 	cmp	local11, #80 wz
0137c     44 00 90 5D |  if_ne	jmp	#LR__0043
01380                 | ' return cursor_x
01380     3C E4 05 F1 | 	add	objptr, #60
01384     F2 54 E2 FA | 	rdword	local28, objptr
01388     02 54 86 F1 | 	sub	local28, #2
0138c                 | '     cx=v.getcursorx()-2 					' arrow left
0138c                 | '     if cx<editor_spaces then cx=editor_spaces			
0138c     36 00 00 FF 
01390     F8 E5 05 F1 | 	add	objptr, ##28152
01394     F2 34 02 FB | 	rdlong	local12, objptr
01398     37 00 00 FF 
0139c     34 E4 85 F1 | 	sub	objptr, ##28212
013a0     1A 55 52 F2 | 	cmps	local28, local12 wc
013a4     37 00 00 CF 
013a8     34 E4 05 C1 |  if_b	add	objptr, ##28212
013ac     F2 54 02 CB |  if_b	rdlong	local28, objptr
013b0     37 00 00 CF 
013b4     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013b8     2A 29 02 F6 | 	mov	local06, local28
013bc     14 13 02 F6 | 	mov	arg01, local06
013c0     28 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
013c4                 | LR__0043
013c4                 | '   if key4=79 then						' arrow right
013c4     4F 32 0E F2 | 	cmp	local11, #79 wz
013c8     20 00 90 5D |  if_ne	jmp	#LR__0044
013cc                 | ' return cursor_x
013cc     3C E4 05 F1 | 	add	objptr, #60
013d0     F2 54 E2 FA | 	rdword	local28, objptr
013d4     3C E4 85 F1 | 	sub	objptr, #60
013d8     02 54 06 F1 | 	add	local28, #2
013dc                 | '     cx=v.getcursorx()+2 
013dc                 | '     if cx>254  then cx=254 
013dc     FE 54 36 F3 | 	fle	local28, #254 wc
013e0     2A 29 02 F6 | 	mov	local06, local28
013e4     14 13 02 F6 | 	mov	arg01, local06
013e8     00 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
013ec                 | LR__0044
013ec                 | ' 
013ec                 | '   if key4=73 then 						' ins
013ec     49 32 0E F2 | 	cmp	local11, #73 wz
013f0     40 00 90 5D |  if_ne	jmp	#LR__0047
013f4     51 00 00 FF 
013f8     D8 E5 05 F1 | 	add	objptr, ##41944
013fc     F2 28 02 FB | 	rdlong	local06, objptr
01400     14 35 22 F6 | 	not	local12, local06
01404     F2 34 62 FC | 	wrlong	local12, objptr
01408                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01408     51 00 00 FF 
0140c     D8 E5 85 F1 | 	sub	objptr, ##41944
01410     00 34 0E F2 | 	cmp	local12, #0 wz
01414     10 00 90 AD |  if_e	jmp	#LR__0045
01418     0E 28 06 F6 | 	mov	local06, #14
0141c     0E 12 06 F6 | 	mov	arg01, #14
01420     4C CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
01424     0C 00 90 FD | 	jmp	#LR__0046
01428                 | LR__0045
01428     00 28 06 F6 | 	mov	local06, #0
0142c     00 12 06 F6 | 	mov	arg01, #0
01430     3C CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
01434                 | LR__0046
01434                 | LR__0047
01434     00 24 06 F6 | 	mov	local04, #0
01438     E0 F3 9F FD | 	jmp	#LR__0001
0143c                 | LR__0048
0143c     A7 F0 03 F6 | 	mov	ptra, fp
01440     B2 00 A0 FD | 	call	#popregs_
01444                 | _edit_ret
01444     2D 00 64 FD | 	ret
01448                 | 
01448                 | ' 
01448                 | ' ''-----------------------------------------------------------------------------------------------------------
01448                 | ' ' 					A housekeepeer.
01448                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01448                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01448                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01448                 | ' ''-----------------------------------------------------------------------------------------------------------
01448                 | ' 
01448                 | ' sub housekeeper
01448                 | _housekeeper
01448                 | ' 
01448                 | ' do
01448                 | LR__0050
01448                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01448     49 E4 05 F1 | 	add	objptr, #73
0144c                 | LR__0051
0144c     F2 12 02 FB | 	rdlong	arg01, objptr
01450     01 12 0E F2 | 	cmp	arg01, #1 wz
01454     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01458     51 00 00 FF 
0145c     5B E5 05 F1 | 	add	objptr, ##41819
01460     F2 12 02 FB | 	rdlong	arg01, objptr
01464     01 12 06 F1 | 	add	arg01, #1
01468     F2 12 62 FC | 	wrlong	arg01, objptr
0146c     51 00 00 FF 
01470     A4 E5 85 F1 | 	sub	objptr, ##41892
01474     80 00 B0 FD | 	call	#_gethdi
01478     05 12 06 F6 | 	mov	arg01, #5
0147c     10 F9 B1 FD | 	call	#__system___waitms
01480     51 00 00 FF 
01484     A4 E5 05 F1 | 	add	objptr, ##41892
01488     F2 12 02 FB | 	rdlong	arg01, objptr
0148c     01 12 06 F1 | 	add	arg01, #1
01490     F2 12 62 FC | 	wrlong	arg01, objptr
01494     51 00 00 FF 
01498     A4 E5 85 F1 | 	sub	objptr, ##41892
0149c     58 00 B0 FD | 	call	#_gethdi
014a0     05 12 06 F6 | 	mov	arg01, #5
014a4     E8 F8 B1 FD | 	call	#__system___waitms
014a8     51 00 00 FF 
014ac     A4 E5 05 F1 | 	add	objptr, ##41892
014b0     F2 12 02 FB | 	rdlong	arg01, objptr
014b4     01 12 06 F1 | 	add	arg01, #1
014b8     F2 12 62 FC | 	wrlong	arg01, objptr
014bc     51 00 00 FF 
014c0     A4 E5 85 F1 | 	sub	objptr, ##41892
014c4     30 00 B0 FD | 	call	#_gethdi
014c8     05 12 06 F6 | 	mov	arg01, #5
014cc     C0 F8 B1 FD | 	call	#__system___waitms
014d0     51 00 00 FF 
014d4     A4 E5 05 F1 | 	add	objptr, ##41892
014d8     F2 12 02 FB | 	rdlong	arg01, objptr
014dc     01 12 06 F1 | 	add	arg01, #1
014e0     F2 12 62 FC | 	wrlong	arg01, objptr
014e4     51 00 00 FF 
014e8     A4 E5 85 F1 | 	sub	objptr, ##41892
014ec     08 00 B0 FD | 	call	#_gethdi
014f0     54 FF 9F FD | 	jmp	#LR__0050
014f4                 | _housekeeper_ret
014f4     2D 00 64 FD | 	ret
014f8                 | 
014f8                 | ' 
014f8                 | ' '----------------------------------------------------------------------------------------------------------
014f8                 | ' ' gethdi is called from the houseekeeper to read HDI related values
014f8                 | ' '----------------------------------------------------------------------------------------------------------
014f8                 | ' 
014f8                 | ' sub gethdi
014f8                 | _gethdi
014f8     03 4A 05 F6 | 	mov	COUNT_, #3
014fc     A8 00 A0 FD | 	call	#pushregs_
01500                 | '   x := mouse_xacc
01500     14 00 00 FF 
01504     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01508     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
0150c                 | '   y := mouse_yacc
0150c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01510     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
01514     51 00 00 FF 
01518     1C E5 05 F1 | 	add	objptr, ##41756
0151c     F2 14 62 FC | 	wrlong	arg02, objptr
01520     04 E4 05 F1 | 	add	objptr, #4
01524     F2 12 62 FC | 	wrlong	arg01, objptr
01528                 | '   x := 0
01528                 | '   y := mouse_zacc
01528     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
0152c     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01530     08 E4 05 F1 | 	add	objptr, #8
01534     F2 FA 61 FC | 	wrlong	result1, objptr
01538                 | '   return mouse_bstate&7
01538     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
0153c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01540     14 00 00 FF 
01544     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01548     07 FA 05 F5 | 	and	result1, #7
0154c     04 E4 85 F1 | 	sub	objptr, #4
01550     F2 FA 61 FC | 	wrlong	result1, objptr
01554     51 00 00 FF 
01558     24 E5 85 F1 | 	sub	objptr, ##41764
0155c     00 1E 06 F6 | 	mov	local01, #0
01560                 | ' 
01560                 | ' mousex,mousey=kbm.mouse_xy()
01560                 | ' dummy,mousew=kbm.mouse_scroll()
01560                 | ' mousek=kbm.mouse_buttons()
01560                 | ' i=0:
01560                 | ' for j=0 to 6
01560     00 20 06 F6 | 	mov	local02, #0
01564                 | LR__0060
01564                 | '   if kbm.hidpad_id(j)>0 then
01564     10 13 02 F6 | 	mov	arg01, local02
01568     18 EE B1 FD | 	call	#_usbnew_spin2_hidpad_id
0156c     01 FA 55 F2 | 	cmps	result1, #1 wc
01570     8C 00 90 CD |  if_b	jmp	#LR__0061
01574     10 13 02 F6 | 	mov	arg01, local02
01578     00 14 06 F6 | 	mov	arg02, #0
0157c     68 EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01580     FD 22 02 F6 | 	mov	local03, result1
01584     10 13 02 F6 | 	mov	arg01, local02
01588     01 14 06 F6 | 	mov	arg02, #1
0158c     58 EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01590     60 00 00 FF 
01594     00 22 06 F1 | 	add	local03, ##49152
01598     0F 22 46 F0 | 	shr	local03, #15
0159c     01 14 06 F6 | 	mov	arg02, #1
015a0     11 15 02 F1 | 	add	arg02, local03
015a4     60 00 00 FF 
015a8     00 FA 05 F1 | 	add	result1, ##49152
015ac     0F FA 45 F0 | 	shr	result1, #15
015b0     01 12 06 F6 | 	mov	arg01, #1
015b4     FD 12 02 F1 | 	add	arg01, result1
015b8     0F 23 02 F6 | 	mov	local03, local01
015bc     02 22 66 F0 | 	shl	local03, #2
015c0     51 00 00 FF 
015c4     2C E5 05 F1 | 	add	objptr, ##41772
015c8     F2 22 02 F1 | 	add	local03, objptr
015cc     02 12 66 F0 | 	shl	arg01, #2
015d0     09 15 02 F1 | 	add	arg02, arg01
015d4     11 15 62 FC | 	wrlong	arg02, local03
015d8     0F 23 02 F6 | 	mov	local03, local01
015dc     02 22 66 F0 | 	shl	local03, #2
015e0     1C E4 05 F1 | 	add	objptr, #28
015e4     F2 22 02 F1 | 	add	local03, objptr
015e8     10 13 02 F6 | 	mov	arg01, local02
015ec     51 00 00 FF 
015f0     48 E5 85 F1 | 	sub	objptr, ##41800
015f4     BC ED B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
015f8     11 FB 61 FC | 	wrlong	result1, local03
015fc     01 1E 06 F1 | 	add	local01, #1
01600                 | LR__0061
01600     01 20 06 F1 | 	add	local02, #1
01604     07 20 16 F2 | 	cmp	local02, #7 wc
01608     58 FF 9F CD |  if_b	jmp	#LR__0060
0160c     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01610                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01610                 | LR__0062
01610     07 1E 16 F2 | 	cmp	local01, #7 wc
01614     3C 00 90 3D |  if_ae	jmp	#LR__0064
01618     0F 23 02 F6 | 	mov	local03, local01
0161c     02 22 66 F0 | 	shl	local03, #2
01620     51 00 00 FF 
01624     2C E5 05 F1 | 	add	objptr, ##41772
01628     F2 22 02 F1 | 	add	local03, objptr
0162c     11 01 68 FC | 	wrlong	#0, local03
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     1C E4 05 F1 | 	add	objptr, #28
0163c     F2 22 02 F1 | 	add	local03, objptr
01640     11 01 68 FC | 	wrlong	#0, local03
01644     01 1E 06 F1 | 	add	local01, #1
01648     51 00 00 FF 
0164c     48 E5 85 F1 | 	sub	objptr, ##41800
01650     BC FF 9F FD | 	jmp	#LR__0062
01654                 | LR__0063
01654                 | LR__0064
01654     A7 F0 03 F6 | 	mov	ptra, fp
01658     B2 00 A0 FD | 	call	#popregs_
0165c                 | _gethdi_ret
0165c     2D 00 64 FD | 	ret
01660                 | 
01660                 | ' 
01660                 | ' '-------------------------------------------------------------------------------------------------------------
01660                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01660                 | ' '-------------------------------------------------------------------------------------------------------------
01660                 | ' 
01660                 | ' '-------------------------------------------------------------------------------------------------------------
01660                 | ' '
01660                 | ' '                                     LINE INTERPRETER/TOKENIZER
01660                 | ' '
01660                 | ' '-------------------------------------------------------------------------------------------------------------
01660                 | ' 
01660                 | ' 
01660                 | ' sub interpret
01660                 | _interpret
01660     2F 4A 05 F6 | 	mov	COUNT_, #47
01664     A8 00 A0 FD | 	call	#pushregs_
01668     01 00 00 FF 
0166c     7C F0 07 F1 | 	add	ptra, ##636
01670     37 00 00 FF 
01674     1C E4 05 F1 | 	add	objptr, ##28188
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     37 00 00 FF 
01680     1C E4 85 F1 | 	sub	objptr, ##28188
01684     20 19 B2 FD | 	call	#__system__RTrim_S
01688     FD 12 02 F6 | 	mov	arg01, result1
0168c     58 18 B2 FD | 	call	#__system__LTrim_S
01690     37 00 00 FF 
01694     20 E4 05 F1 | 	add	objptr, ##28192
01698     F2 FA 61 FC | 	wrlong	result1, objptr
0169c     04 E4 05 F1 | 	add	objptr, #4
016a0     FF FF FF FF 
016a4     F2 FE 6B FC | 	wrlong	##-1, objptr
016a8     1A 00 00 FF 
016ac     9C E5 05 F1 | 	add	objptr, ##13724
016b0     F2 00 68 FC | 	wrlong	#0, objptr
016b4     07 00 00 FF 
016b8     44 E5 85 F1 | 	sub	objptr, ##3908
016bc     F2 00 68 FC | 	wrlong	#0, objptr
016c0     4A 00 00 FF 
016c4     7C E4 85 F1 | 	sub	objptr, ##38012
016c8     00 1E 06 F6 | 	mov	local01, #0
016cc                 | LR__0070
016cc                 | ' 
016cc                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016cc                 | ' 
016cc                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016cc                 | ' 
016cc                 | ' 108 
016cc                 | ' for i=0 to 125: separators(i)=0 :next i
016cc     00 20 06 F6 | 	mov	local02, #0
016d0     38 4E 05 F1 | 	add	fp, #56
016d4     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016d8                 | LR__0071
016d8     10 23 02 F6 | 	mov	local03, local02
016dc     02 22 66 F0 | 	shl	local03, #2
016e0     A7 22 02 F1 | 	add	local03, fp
016e4     11 01 68 FC | 	wrlong	#0, local03
016e8     01 20 06 F1 | 	add	local02, #1
016ec     7E 20 56 F2 | 	cmps	local02, #126 wc
016f0     E4 FF 9F CD |  if_b	jmp	#LR__0071
016f4                 | LR__0072
016f4     38 4E 85 F1 | 	sub	fp, #56
016f8                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
016f8     00 20 06 F6 | 	mov	local02, #0
016fc     35 00 00 FF 
01700     0C E4 05 F1 | 	add	objptr, ##27148
01704     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01708                 | LR__0073
01708     10 25 02 F6 | 	mov	local04, local02
0170c     03 24 66 F0 | 	shl	local04, #3
01710     F2 24 02 F1 | 	add	local04, objptr
01714     81 01 00 FF 
01718     54 17 06 F6 | 	mov	arg03, ##@LR__5039
0171c     12 17 62 FC | 	wrlong	arg03, local04
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 26 02 F6 | 	mov	local05, objptr
0172c     F2 24 02 F1 | 	add	local04, objptr
01730     00 28 06 F6 | 	mov	local06, #0
01734     04 24 06 F1 | 	add	local04, #4
01738     12 01 68 FC | 	wrlong	#0, local04
0173c     01 20 06 F1 | 	add	local02, #1
01740     7E 20 56 F2 | 	cmps	local02, #126 wc
01744     C0 FF 9F CD |  if_b	jmp	#LR__0073
01748                 | LR__0074
01748     02 00 00 FF 
0174c     10 E4 05 F1 | 	add	objptr, ##1040
01750     F2 12 02 FB | 	rdlong	arg01, objptr
01754     37 00 00 FF 
01758     1C E4 85 F1 | 	sub	objptr, ##28188
0175c     48 18 B2 FD | 	call	#__system__RTrim_S
01760     FD 12 02 F6 | 	mov	arg01, result1
01764     80 17 B2 FD | 	call	#__system__LTrim_S
01768     37 00 00 FF 
0176c     1C E4 05 F1 | 	add	objptr, ##28188
01770     F2 FA 61 FC | 	wrlong	result1, objptr
01774     81 01 00 FF 
01778     55 25 06 F6 | 	mov	local04, ##@LR__5040
0177c     1A 00 00 FF 
01780     D0 E5 05 F1 | 	add	objptr, ##13776
01784     F2 24 62 FC | 	wrlong	local04, objptr
01788     1A 00 00 FF 
0178c     D0 E5 85 F1 | 	sub	objptr, ##13776
01790     F2 12 02 FB | 	rdlong	arg01, objptr
01794     37 00 00 FF 
01798     1C E4 85 F1 | 	sub	objptr, ##28188
0179c     09 2B 02 F6 | 	mov	local07, arg01
017a0     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017a4                 | LR__0075
017a4     15 FB C9 FA | 	rdbyte	result1, local07 wz
017a8     01 2A 06 51 |  if_ne	add	local07, #1
017ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017b0                 | LR__0076
017b0     09 2B 8A F1 | 	sub	local07, arg01 wz
017b4     51 00 00 FF 
017b8     F0 E5 05 F1 | 	add	objptr, ##41968
017bc     F2 2A 62 FC | 	wrlong	local07, objptr
017c0                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017c0     51 00 00 FF 
017c4     F0 E5 85 F1 | 	sub	objptr, ##41968
017c8     38 24 90 AD |  if_e	jmp	#LR__0196
017cc     00 2C 06 F6 | 	mov	local08, #0
017d0                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017d0                 | ' for i=1 to len(line$)
017d0     01 20 06 F6 | 	mov	local02, #1
017d4     37 00 00 FF 
017d8     1C E4 05 F1 | 	add	objptr, ##28188
017dc     F2 12 02 FB | 	rdlong	arg01, objptr
017e0     37 00 00 FF 
017e4     1C E4 85 F1 | 	sub	objptr, ##28188
017e8     09 2B 02 F6 | 	mov	local07, arg01
017ec     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
017f0                 | LR__0077
017f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
017f4     01 2A 06 51 |  if_ne	add	local07, #1
017f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
017fc                 | LR__0078
017fc     09 2B 82 F1 | 	sub	local07, arg01
01800     15 2F 02 F6 | 	mov	local09, local07
01804     01 2E 06 F1 | 	add	local09, #1
01808                 | LR__0079
01808     17 21 52 F2 | 	cmps	local02, local09 wc
0180c     AC 00 90 3D |  if_ae	jmp	#LR__0081
01810                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01810     37 00 00 FF 
01814     1C E4 05 F1 | 	add	objptr, ##28188
01818     F2 12 02 FB | 	rdlong	arg01, objptr
0181c     37 00 00 FF 
01820     1C E4 85 F1 | 	sub	objptr, ##28188
01824     10 15 02 F6 | 	mov	arg02, local02
01828     01 16 06 F6 | 	mov	arg03, #1
0182c     00 14 B2 FD | 	call	#__system__Mid_S
01830     FD 12 02 F6 | 	mov	arg01, result1
01834     81 01 00 FF 
01838     56 15 06 F6 | 	mov	arg02, ##@LR__5041
0183c     84 F2 B1 FD | 	call	#__system___string_cmp
01840     00 FA 0D F2 | 	cmp	result1, #0 wz
01844     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01848     01 2C 06 A6 |  if_e	mov	local08, #1
0184c     3C 00 90 AD |  if_e	jmp	#LR__0080
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 12 02 FB | 	rdlong	arg01, objptr
0185c     37 00 00 FF 
01860     1C E4 85 F1 | 	sub	objptr, ##28188
01864     10 15 02 F6 | 	mov	arg02, local02
01868     01 16 06 F6 | 	mov	arg03, #1
0186c     C0 13 B2 FD | 	call	#__system__Mid_S
01870     FD 12 02 F6 | 	mov	arg01, result1
01874     81 01 00 FF 
01878     58 15 06 F6 | 	mov	arg02, ##@LR__5042
0187c     44 F2 B1 FD | 	call	#__system___string_cmp
01880     00 FA 0D F2 | 	cmp	result1, #0 wz
01884     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01888     00 2C 06 A6 |  if_e	mov	local08, #0
0188c                 | LR__0080
0188c     10 25 02 F6 | 	mov	local04, local02
01890     03 24 66 F0 | 	shl	local04, #3
01894     35 00 00 FF 
01898     0C E4 05 F1 | 	add	objptr, ##27148
0189c     F2 26 02 F6 | 	mov	local05, objptr
018a0     F2 24 02 F1 | 	add	local04, objptr
018a4     04 24 06 F1 | 	add	local04, #4
018a8     12 2D 62 FC | 	wrlong	local08, local04
018ac     01 20 06 F1 | 	add	local02, #1
018b0     35 00 00 FF 
018b4     0C E4 85 F1 | 	sub	objptr, ##27148
018b8     4C FF 9F FD | 	jmp	#LR__0079
018bc                 | LR__0081
018bc     01 20 06 F6 | 	mov	local02, #1
018c0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018c0                 | LR__0082
018c0     37 00 00 FF 
018c4     1C E4 05 F1 | 	add	objptr, ##28188
018c8     F2 12 02 FB | 	rdlong	arg01, objptr
018cc     37 00 00 FF 
018d0     1C E4 85 F1 | 	sub	objptr, ##28188
018d4     10 15 02 F6 | 	mov	arg02, local02
018d8     01 16 06 F6 | 	mov	arg03, #1
018dc     50 13 B2 FD | 	call	#__system__Mid_S
018e0     FD 12 02 F6 | 	mov	arg01, result1
018e4     81 01 00 FF 
018e8     5A 31 06 F6 | 	mov	local10, ##@LR__5043
018ec     18 15 02 F6 | 	mov	arg02, local10
018f0     D0 F1 B1 FD | 	call	#__system___string_cmp
018f4     00 FA 0D F2 | 	cmp	result1, #0 wz
018f8     34 00 90 5D |  if_ne	jmp	#LR__0083
018fc     10 27 02 F6 | 	mov	local05, local02
01900     03 26 66 F0 | 	shl	local05, #3
01904     35 00 00 FF 
01908     0C E4 05 F1 | 	add	objptr, ##27148
0190c     F2 28 02 F6 | 	mov	local06, objptr
01910     F2 26 02 F1 | 	add	local05, objptr
01914     04 26 06 F1 | 	add	local05, #4
01918     13 33 02 FB | 	rdlong	local11, local05
0191c     04 26 86 F1 | 	sub	local05, #4
01920     19 35 0A F6 | 	mov	local12, local11 wz
01924     35 00 00 FF 
01928     0C E4 85 F1 | 	sub	objptr, ##27148
0192c     24 00 90 AD |  if_e	jmp	#LR__0084
01930                 | LR__0083
01930     51 00 00 FF 
01934     F0 E5 05 F1 | 	add	objptr, ##41968
01938     F2 36 02 FB | 	rdlong	local13, objptr
0193c     51 00 00 FF 
01940     F0 E5 85 F1 | 	sub	objptr, ##41968
01944     1B 39 02 F6 | 	mov	local14, local13
01948     1C 21 52 F2 | 	cmps	local02, local14 wc
0194c     01 20 06 C1 |  if_b	add	local02, #1
01950     6C FF 9F CD |  if_b	jmp	#LR__0082
01954                 | LR__0084
01954                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01954     51 00 00 FF 
01958     F0 E5 05 F1 | 	add	objptr, ##41968
0195c     F2 24 02 FB | 	rdlong	local04, objptr
01960     51 00 00 FF 
01964     F0 E5 85 F1 | 	sub	objptr, ##41968
01968     12 21 52 F2 | 	cmps	local02, local04 wc
0196c     A8 00 90 3D |  if_ae	jmp	#LR__0087
01970     37 00 00 FF 
01974     1C E4 05 F1 | 	add	objptr, ##28188
01978     F2 28 02 FB | 	rdlong	local06, objptr
0197c     37 00 00 FF 
01980     1C E4 85 F1 | 	sub	objptr, ##28188
01984     14 13 02 F6 | 	mov	arg01, local06
01988     09 2B 02 F6 | 	mov	local07, arg01
0198c     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01990                 | LR__0085
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
0199c                 | LR__0086
0199c     09 2B 82 F1 | 	sub	local07, arg01
019a0     15 27 02 F6 | 	mov	local05, local07
019a4     13 15 02 F6 | 	mov	arg02, local05
019a8     10 15 82 F1 | 	sub	arg02, local02
019ac     14 13 02 F6 | 	mov	arg01, local06
019b0     EC 11 B2 FD | 	call	#__system__Right_S
019b4     FD 12 02 F6 | 	mov	arg01, result1
019b8     EC 15 B2 FD | 	call	#__system__RTrim_S
019bc     FD 12 02 F6 | 	mov	arg01, result1
019c0     24 15 B2 FD | 	call	#__system__LTrim_S
019c4     51 00 00 FF 
019c8     F4 E5 05 F1 | 	add	objptr, ##41972
019cc     F2 FA 61 FC | 	wrlong	result1, objptr
019d0     1A 00 00 FF 
019d4     D8 E5 85 F1 | 	sub	objptr, ##13784
019d8     F2 12 02 FB | 	rdlong	arg01, objptr
019dc     37 00 00 FF 
019e0     1C E4 85 F1 | 	sub	objptr, ##28188
019e4     01 20 86 F1 | 	sub	local02, #1
019e8     10 15 02 F6 | 	mov	arg02, local02
019ec     28 11 B2 FD | 	call	#__system__Left_S
019f0     FD 12 02 F6 | 	mov	arg01, result1
019f4     B0 15 B2 FD | 	call	#__system__RTrim_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     E8 14 B2 FD | 	call	#__system__LTrim_S
01a00     37 00 00 FF 
01a04     1C E4 05 F1 | 	add	objptr, ##28188
01a08     F2 FA 61 FC | 	wrlong	result1, objptr
01a0c     37 00 00 FF 
01a10     1C E4 85 F1 | 	sub	objptr, ##28188
01a14     1C 00 90 FD | 	jmp	#LR__0088
01a18                 | LR__0087
01a18     81 01 00 FF 
01a1c     5C 25 06 F6 | 	mov	local04, ##@LR__5044
01a20     51 00 00 FF 
01a24     F4 E5 05 F1 | 	add	objptr, ##41972
01a28     F2 24 62 FC | 	wrlong	local04, objptr
01a2c     51 00 00 FF 
01a30     F4 E5 85 F1 | 	sub	objptr, ##41972
01a34                 | LR__0088
01a34                 | ' 
01a34                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a34     37 00 00 FF 
01a38     24 E4 05 F1 | 	add	objptr, ##28196
01a3c     F2 24 02 FB | 	rdlong	local04, objptr
01a40     37 00 00 FF 
01a44     24 E4 85 F1 | 	sub	objptr, ##28196
01a48     FF FF 7F FF 
01a4c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a50     40 00 90 5D |  if_ne	jmp	#LR__0089
01a54     51 00 00 FF 
01a58     F4 E5 05 F1 | 	add	objptr, ##41972
01a5c     F2 12 02 FB | 	rdlong	arg01, objptr
01a60     51 00 00 FF 
01a64     F4 E5 85 F1 | 	sub	objptr, ##41972
01a68     81 01 00 FF 
01a6c     5D 29 06 F6 | 	mov	local06, ##@LR__5045
01a70     14 15 02 F6 | 	mov	arg02, local06
01a74     4C F0 B1 FD | 	call	#__system___string_cmp
01a78     00 FA 0D F2 | 	cmp	result1, #0 wz
01a7c     37 00 00 5F 
01a80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a84     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01a88     37 00 00 5F 
01a8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01a90     08 01 90 5D |  if_ne	jmp	#LR__0093
01a94                 | LR__0089
01a94                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01a94     37 00 00 FF 
01a98     24 E4 05 F1 | 	add	objptr, ##28196
01a9c     F2 24 02 FB | 	rdlong	local04, objptr
01aa0     37 00 00 FF 
01aa4     24 E4 85 F1 | 	sub	objptr, ##28196
01aa8     FF FF 7F FF 
01aac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ab0     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ab4     51 00 00 FF 
01ab8     F4 E5 05 F1 | 	add	objptr, ##41972
01abc     F2 12 02 FB | 	rdlong	arg01, objptr
01ac0     51 00 00 FF 
01ac4     F4 E5 85 F1 | 	sub	objptr, ##41972
01ac8     81 01 00 FF 
01acc     5E 15 06 F6 | 	mov	arg02, ##@LR__5046
01ad0     F0 EF B1 FD | 	call	#__system___string_cmp
01ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ad8     37 00 00 AF 
01adc     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ae0     F2 06 68 AC |  if_e	wrlong	#3, objptr
01ae4     37 00 00 AF 
01ae8     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01aec     AC 00 90 AD |  if_e	jmp	#LR__0093
01af0                 | LR__0090
01af0                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01af0     37 00 00 FF 
01af4     24 E4 05 F1 | 	add	objptr, ##28196
01af8     F2 24 02 FB | 	rdlong	local04, objptr
01afc     37 00 00 FF 
01b00     24 E4 85 F1 | 	sub	objptr, ##28196
01b04     04 24 0E F2 | 	cmp	local04, #4 wz
01b08     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b0c     51 00 00 FF 
01b10     F4 E5 05 F1 | 	add	objptr, ##41972
01b14     F2 12 02 FB | 	rdlong	arg01, objptr
01b18     51 00 00 FF 
01b1c     F4 E5 85 F1 | 	sub	objptr, ##41972
01b20     81 01 00 FF 
01b24     5F 15 06 F6 | 	mov	arg02, ##@LR__5047
01b28     98 EF B1 FD | 	call	#__system___string_cmp
01b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
01b30     37 00 00 5F 
01b34     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b38     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b3c     37 00 00 5F 
01b40     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b44     54 00 90 5D |  if_ne	jmp	#LR__0093
01b48                 | LR__0091
01b48                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b48     37 00 00 FF 
01b4c     24 E4 05 F1 | 	add	objptr, ##28196
01b50     F2 24 02 FB | 	rdlong	local04, objptr
01b54     37 00 00 FF 
01b58     24 E4 85 F1 | 	sub	objptr, ##28196
01b5c     04 24 0E F2 | 	cmp	local04, #4 wz
01b60     38 00 90 5D |  if_ne	jmp	#LR__0092
01b64     51 00 00 FF 
01b68     F4 E5 05 F1 | 	add	objptr, ##41972
01b6c     F2 12 02 FB | 	rdlong	arg01, objptr
01b70     51 00 00 FF 
01b74     F4 E5 85 F1 | 	sub	objptr, ##41972
01b78     81 01 00 FF 
01b7c     60 15 06 F6 | 	mov	arg02, ##@LR__5048
01b80     40 EF B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     37 00 00 AF 
01b8c     24 E4 05 A1 |  if_e	add	objptr, ##28196
01b90     F2 04 68 AC |  if_e	wrlong	#2, objptr
01b94     37 00 00 AF 
01b98     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b9c                 | LR__0092
01b9c                 | LR__0093
01b9c     38 4E 05 F1 | 	add	fp, #56
01ba0     A7 00 68 FC | 	wrlong	#0, fp
01ba4     38 4E 85 F1 | 	sub	fp, #56
01ba8     00 20 06 F6 | 	mov	local02, #0
01bac     01 3A 06 F6 | 	mov	local15, #1
01bb0                 | ' 
01bb0                 | ' ' 1b: find separators
01bb0                 | ' 
01bb0                 | ' 107
01bb0                 | ' separators(0)=0
01bb0                 | ' i=0: j=1
01bb0                 | ' do: 
01bb0                 | LR__0094
01bb0     01 20 06 F1 | 	add	local02, #1
01bb4     37 00 00 FF 
01bb8     1C E4 05 F1 | 	add	objptr, ##28188
01bbc     F2 12 02 FB | 	rdlong	arg01, objptr
01bc0     37 00 00 FF 
01bc4     1C E4 85 F1 | 	sub	objptr, ##28188
01bc8     10 15 02 F6 | 	mov	arg02, local02
01bcc     01 16 06 F6 | 	mov	arg03, #1
01bd0     5C 10 B2 FD | 	call	#__system__Mid_S
01bd4     FD 3C 02 F6 | 	mov	local16, result1
01bd8                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bd8     1E 13 02 F6 | 	mov	arg01, local16
01bdc     04 28 B0 FD | 	call	#_isseparator
01be0     00 FA 0D F2 | 	cmp	result1, #0 wz
01be4     1C 00 90 AD |  if_e	jmp	#LR__0095
01be8     1D 23 02 F6 | 	mov	local03, local15
01bec     02 22 66 F0 | 	shl	local03, #2
01bf0     38 4E 05 F1 | 	add	fp, #56
01bf4     A7 22 02 F1 | 	add	local03, fp
01bf8     11 21 62 FC | 	wrlong	local02, local03
01bfc     01 3A 06 F1 | 	add	local15, #1
01c00     38 4E 85 F1 | 	sub	fp, #56
01c04                 | LR__0095
01c04     51 00 00 FF 
01c08     F0 E5 05 F1 | 	add	objptr, ##41968
01c0c     F2 24 02 FB | 	rdlong	local04, objptr
01c10     51 00 00 FF 
01c14     F0 E5 85 F1 | 	sub	objptr, ##41968
01c18     12 21 5A F2 | 	cmps	local02, local04 wcz
01c1c     90 FF 9F ED |  if_be	jmp	#LR__0094
01c20     1D 23 02 F6 | 	mov	local03, local15
01c24     02 22 66 F0 | 	shl	local03, #2
01c28     38 4E 05 F1 | 	add	fp, #56
01c2c     A7 30 02 F6 | 	mov	local10, fp
01c30     A7 22 02 F1 | 	add	local03, fp
01c34     11 21 62 FC | 	wrlong	local02, local03
01c38     00 3E 06 F6 | 	mov	local17, #0
01c3c                 | ' for i=0 to j-1 
01c3c     00 20 06 F6 | 	mov	local02, #0
01c40     1D 41 02 F6 | 	mov	local18, local15
01c44     38 4E 85 F1 | 	sub	fp, #56
01c48                 | LR__0096
01c48     20 21 52 F2 | 	cmps	local02, local18 wc
01c4c     50 01 90 3D |  if_ae	jmp	#LR__0100
01c50     10 23 02 F6 | 	mov	local03, local02
01c54     02 22 66 F0 | 	shl	local03, #2
01c58     38 4E 05 F1 | 	add	fp, #56
01c5c     A7 22 02 F1 | 	add	local03, fp
01c60     11 27 02 FB | 	rdlong	local05, local03
01c64     51 00 00 FF 
01c68     FC E5 05 F1 | 	add	objptr, ##41980
01c6c     F2 26 62 FC | 	wrlong	local05, objptr
01c70     10 23 02 F6 | 	mov	local03, local02
01c74     01 22 06 F1 | 	add	local03, #1
01c78     02 22 66 F0 | 	shl	local03, #2
01c7c     A7 30 02 F6 | 	mov	local10, fp
01c80     A7 22 02 F1 | 	add	local03, fp
01c84     11 27 02 FB | 	rdlong	local05, local03
01c88     04 E4 05 F1 | 	add	objptr, #4
01c8c     F2 26 62 FC | 	wrlong	local05, objptr
01c90                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01c90     04 E4 85 F1 | 	sub	objptr, #4
01c94     F2 24 02 FB | 	rdlong	local04, objptr
01c98     51 00 00 FF 
01c9c     FC E5 85 F1 | 	sub	objptr, ##41980
01ca0     01 24 56 F2 | 	cmps	local04, #1 wc
01ca4     38 4E 85 F1 | 	sub	fp, #56
01ca8     68 00 90 CD |  if_b	jmp	#LR__0098
01cac     37 00 00 FF 
01cb0     1C E4 05 F1 | 	add	objptr, ##28188
01cb4     F2 12 02 FB | 	rdlong	arg01, objptr
01cb8     1A 00 00 FF 
01cbc     E0 E5 05 F1 | 	add	objptr, ##13792
01cc0     F2 14 02 FB | 	rdlong	arg02, objptr
01cc4     51 00 00 FF 
01cc8     FC E5 85 F1 | 	sub	objptr, ##41980
01ccc     01 16 06 F6 | 	mov	arg03, #1
01cd0     5C 0F B2 FD | 	call	#__system__Mid_S
01cd4     FD 42 02 F6 | 	mov	local19, result1
01cd8     81 01 00 FF 
01cdc     61 15 06 F6 | 	mov	arg02, ##@LR__5049
01ce0     21 13 02 F6 | 	mov	arg01, local19
01ce4     DC ED B1 FD | 	call	#__system___string_cmp
01ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
01cec     24 00 90 AD |  if_e	jmp	#LR__0097
01cf0     1F 31 02 F6 | 	mov	local10, local17
01cf4     03 30 66 F0 | 	shl	local10, #3
01cf8     35 00 00 FF 
01cfc     0C E4 05 F1 | 	add	objptr, ##27148
01d00     F2 30 02 F1 | 	add	local10, objptr
01d04     18 43 62 FC | 	wrlong	local19, local10
01d08     01 3E 06 F1 | 	add	local17, #1
01d0c     35 00 00 FF 
01d10     0C E4 85 F1 | 	sub	objptr, ##27148
01d14                 | LR__0097
01d14                 | LR__0098
01d14     37 00 00 FF 
01d18     1C E4 05 F1 | 	add	objptr, ##28188
01d1c     F2 12 02 FB | 	rdlong	arg01, objptr
01d20     1A 00 00 FF 
01d24     E0 E5 05 F1 | 	add	objptr, ##13792
01d28     F2 14 02 FB | 	rdlong	arg02, objptr
01d2c     01 14 06 F1 | 	add	arg02, #1
01d30     04 E4 05 F1 | 	add	objptr, #4
01d34     F2 16 02 FB | 	rdlong	arg03, objptr
01d38     04 E4 85 F1 | 	sub	objptr, #4
01d3c     F2 32 02 FB | 	rdlong	local11, objptr
01d40     51 00 00 FF 
01d44     FC E5 85 F1 | 	sub	objptr, ##41980
01d48     19 35 02 F6 | 	mov	local12, local11
01d4c     1A 17 82 F1 | 	sub	arg03, local12
01d50     01 16 86 F1 | 	sub	arg03, #1
01d54     D8 0E B2 FD | 	call	#__system__Mid_S
01d58     FD 42 02 F6 | 	mov	local19, result1
01d5c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d5c     81 01 00 FF 
01d60     62 15 06 F6 | 	mov	arg02, ##@LR__5050
01d64     21 13 02 F6 | 	mov	arg01, local19
01d68     58 ED B1 FD | 	call	#__system___string_cmp
01d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d70     24 00 90 AD |  if_e	jmp	#LR__0099
01d74     1F 31 02 F6 | 	mov	local10, local17
01d78     03 30 66 F0 | 	shl	local10, #3
01d7c     35 00 00 FF 
01d80     0C E4 05 F1 | 	add	objptr, ##27148
01d84     F2 30 02 F1 | 	add	local10, objptr
01d88     18 43 62 FC | 	wrlong	local19, local10
01d8c     01 3E 06 F1 | 	add	local17, #1
01d90     35 00 00 FF 
01d94     0C E4 85 F1 | 	sub	objptr, ##27148
01d98                 | LR__0099
01d98     01 20 06 F1 | 	add	local02, #1
01d9c     A8 FE 9F FD | 	jmp	#LR__0096
01da0                 | LR__0100
01da0                 | ' 
01da0                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01da0                 | ' 
01da0                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01da0     37 00 00 FF 
01da4     24 E4 05 F1 | 	add	objptr, ##28196
01da8     F2 24 0A FB | 	rdlong	local04, objptr wz
01dac     37 00 00 FF 
01db0     24 E4 85 F1 | 	sub	objptr, ##28196
01db4     37 00 00 5F 
01db8     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dbc     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dc0     37 00 00 5F 
01dc4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01dc8     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01dcc     B8 00 90 5D |  if_ne	jmp	#LR__0103
01dd0     35 00 00 FF 
01dd4     0C E4 05 F1 | 	add	objptr, ##27148
01dd8     F2 32 02 FB | 	rdlong	local11, objptr
01ddc     35 00 00 FF 
01de0     0C E4 85 F1 | 	sub	objptr, ##27148
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     DC 45 B0 FD | 	call	#_isdec
01dec     FD 34 02 F6 | 	mov	local12, result1
01df0     1A 29 22 F6 | 	not	local06, local12
01df4     00 28 0E F2 | 	cmp	local06, #0 wz
01df8     8C 00 90 AD |  if_e	jmp	#LR__0103
01dfc     1F 21 02 F6 | 	mov	local02, local17
01e00     35 00 00 FF 
01e04     0C E4 05 F1 | 	add	objptr, ##27148
01e08     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e0c                 | LR__0101
01e0c     10 27 02 F6 | 	mov	local05, local02
01e10     01 26 86 F1 | 	sub	local05, #1
01e14     03 26 66 F0 | 	shl	local05, #3
01e18     F2 26 02 F1 | 	add	local05, objptr
01e1c     13 25 02 FB | 	rdlong	local04, local05
01e20     10 29 02 F6 | 	mov	local06, local02
01e24     01 28 86 F1 | 	sub	local06, #1
01e28     03 28 66 F0 | 	shl	local06, #3
01e2c     F2 28 02 F1 | 	add	local06, objptr
01e30     04 28 06 F1 | 	add	local06, #4
01e34     14 23 02 FB | 	rdlong	local03, local06
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     03 28 66 F0 | 	shl	local06, #3
01e40     F2 34 02 F6 | 	mov	local12, objptr
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     14 25 62 FC | 	wrlong	local04, local06
01e4c     10 33 02 F6 | 	mov	local11, local02
01e50     19 37 02 F6 | 	mov	local13, local11
01e54     03 36 66 F0 | 	shl	local13, #3
01e58     F2 36 02 F1 | 	add	local13, objptr
01e5c     04 36 06 F1 | 	add	local13, #4
01e60     1B 23 62 FC | 	wrlong	local03, local13
01e64     01 20 86 F1 | 	sub	local02, #1
01e68     01 20 56 F2 | 	cmps	local02, #1 wc
01e6c     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e70                 | LR__0102
01e70     81 01 00 FF 
01e74     63 25 06 F6 | 	mov	local04, ##@LR__5051
01e78     F2 24 62 FC | 	wrlong	local04, objptr
01e7c     35 00 00 FF 
01e80     0C E4 85 F1 | 	sub	objptr, ##27148
01e84     01 3E 06 F1 | 	add	local17, #1
01e88                 | LR__0103
01e88     00 20 06 F6 | 	mov	local02, #0
01e8c                 | ' 
01e8c                 | ' ' 1e : find strings
01e8c                 | ' 
01e8c                 | ' i=0
01e8c                 | ' do
01e8c                 | LR__0104
01e8c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01e8c     10 27 02 F6 | 	mov	local05, local02
01e90     03 26 66 F0 | 	shl	local05, #3
01e94     35 00 00 FF 
01e98     0C E4 05 F1 | 	add	objptr, ##27148
01e9c     F2 26 02 F1 | 	add	local05, objptr
01ea0     13 13 02 FB | 	rdlong	arg01, local05
01ea4     81 01 00 FF 
01ea8     65 15 06 F6 | 	mov	arg02, ##@LR__5052
01eac     35 00 00 FF 
01eb0     0C E4 85 F1 | 	sub	objptr, ##27148
01eb4     0C EC B1 FD | 	call	#__system___string_cmp
01eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ebc     01 20 06 51 |  if_ne	add	local02, #1
01ec0     20 01 90 5D |  if_ne	jmp	#LR__0109
01ec4     10 45 02 F6 | 	mov	local20, local02
01ec8                 | LR__0105
01ec8     10 31 02 F6 | 	mov	local10, local02
01ecc     01 30 06 F1 | 	add	local10, #1
01ed0     03 30 66 F0 | 	shl	local10, #3
01ed4     35 00 00 FF 
01ed8     0C E4 05 F1 | 	add	objptr, ##27148
01edc     F2 30 02 F1 | 	add	local10, objptr
01ee0     18 43 02 FB | 	rdlong	local19, local10
01ee4     22 31 02 F6 | 	mov	local10, local20
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     F2 30 02 F1 | 	add	local10, objptr
01ef0     22 33 02 F6 | 	mov	local11, local20
01ef4     19 39 02 F6 | 	mov	local14, local11
01ef8     03 38 66 F0 | 	shl	local14, #3
01efc     F2 38 02 F1 | 	add	local14, objptr
01f00     1C 13 02 FB | 	rdlong	arg01, local14
01f04     21 35 02 F6 | 	mov	local12, local19
01f08     1A 15 02 F6 | 	mov	arg02, local12
01f0c     35 00 00 FF 
01f10     0C E4 85 F1 | 	sub	objptr, ##27148
01f14     E0 EB B1 FD | 	call	#__system___string_concat
01f18     18 FB 61 FC | 	wrlong	result1, local10
01f1c     10 3B 02 F6 | 	mov	local15, local02
01f20     01 3A 06 F1 | 	add	local15, #1
01f24     1F 47 02 F6 | 	mov	local21, local17
01f28     01 46 06 F1 | 	add	local21, #1
01f2c     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f30                 | LR__0106
01f30     23 3B 52 F2 | 	cmps	local15, local21 wc
01f34     70 00 90 3D |  if_ae	jmp	#LR__0108
01f38     1D 27 02 F6 | 	mov	local05, local15
01f3c     01 26 06 F1 | 	add	local05, #1
01f40     03 26 66 F0 | 	shl	local05, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 26 02 F1 | 	add	local05, objptr
01f50     13 25 02 FB | 	rdlong	local04, local05
01f54     1D 29 02 F6 | 	mov	local06, local15
01f58     01 28 06 F1 | 	add	local06, #1
01f5c     03 28 66 F0 | 	shl	local06, #3
01f60     F2 28 02 F1 | 	add	local06, objptr
01f64     04 28 06 F1 | 	add	local06, #4
01f68     14 23 02 FB | 	rdlong	local03, local06
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     03 28 66 F0 | 	shl	local06, #3
01f74     F2 34 02 F6 | 	mov	local12, objptr
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     14 25 62 FC | 	wrlong	local04, local06
01f80     1D 33 02 F6 | 	mov	local11, local15
01f84     19 37 02 F6 | 	mov	local13, local11
01f88     03 36 66 F0 | 	shl	local13, #3
01f8c     F2 36 02 F1 | 	add	local13, objptr
01f90     04 36 06 F1 | 	add	local13, #4
01f94     1B 23 62 FC | 	wrlong	local03, local13
01f98     01 3A 06 F1 | 	add	local15, #1
01f9c     35 00 00 FF 
01fa0     0C E4 85 F1 | 	sub	objptr, ##27148
01fa4     88 FF 9F FD | 	jmp	#LR__0106
01fa8                 | LR__0107
01fa8                 | LR__0108
01fa8     01 3E 86 F1 | 	sub	local17, #1
01fac     81 01 00 FF 
01fb0     67 15 06 F6 | 	mov	arg02, ##@LR__5053
01fb4     21 13 02 F6 | 	mov	arg01, local19
01fb8     08 EB B1 FD | 	call	#__system___string_cmp
01fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01fc0     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fc4     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fc8                 | '   if p$<>"""" then k+=1:i+=1
01fc8     81 01 00 FF 
01fcc     69 15 06 F6 | 	mov	arg02, ##@LR__5054
01fd0     21 13 02 F6 | 	mov	arg01, local19
01fd4     EC EA B1 FD | 	call	#__system___string_cmp
01fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fdc     01 3E 06 51 |  if_ne	add	local17, #1
01fe0     01 20 06 51 |  if_ne	add	local02, #1
01fe4                 | LR__0109
01fe4     1F 21 52 F2 | 	cmps	local02, local17 wc
01fe8     A0 FE 9F CD |  if_b	jmp	#LR__0104
01fec     00 20 06 F6 | 	mov	local02, #0
01ff0                 | ' 
01ff0                 | ' ' 1f : concatenate strings if "" detected between
01ff0                 | '  
01ff0                 | ' i=0
01ff0                 | ' do
01ff0                 | LR__0110
01ff0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01ff0     10 27 02 F6 | 	mov	local05, local02
01ff4     03 26 66 F0 | 	shl	local05, #3
01ff8     35 00 00 FF 
01ffc     0C E4 05 F1 | 	add	objptr, ##27148
02000     F2 28 02 F6 | 	mov	local06, objptr
02004     F2 26 02 F1 | 	add	local05, objptr
02008     13 13 02 FB | 	rdlong	arg01, local05
0200c     01 14 06 F6 | 	mov	arg02, #1
02010     35 00 00 FF 
02014     0C E4 85 F1 | 	sub	objptr, ##27148
02018     84 0B B2 FD | 	call	#__system__Right_S
0201c     FD 12 02 F6 | 	mov	arg01, result1
02020     81 01 00 FF 
02024     6B 15 06 F6 | 	mov	arg02, ##@LR__5055
02028     98 EA B1 FD | 	call	#__system___string_cmp
0202c     00 FA 0D F2 | 	cmp	result1, #0 wz
02030     7C 01 90 5D |  if_ne	jmp	#LR__0116
02034     10 29 02 F6 | 	mov	local06, local02
02038     01 28 06 F1 | 	add	local06, #1
0203c     03 28 66 F0 | 	shl	local06, #3
02040     35 00 00 FF 
02044     0C E4 05 F1 | 	add	objptr, ##27148
02048     F2 34 02 F6 | 	mov	local12, objptr
0204c     F2 28 02 F1 | 	add	local06, objptr
02050     14 13 02 FB | 	rdlong	arg01, local06
02054     01 14 06 F6 | 	mov	arg02, #1
02058     35 00 00 FF 
0205c     0C E4 85 F1 | 	sub	objptr, ##27148
02060     B4 0A B2 FD | 	call	#__system__Left_S
02064     FD 12 02 F6 | 	mov	arg01, result1
02068     81 01 00 FF 
0206c     6D 15 06 F6 | 	mov	arg02, ##@LR__5056
02070     50 EA B1 FD | 	call	#__system___string_cmp
02074     00 FA 0D F2 | 	cmp	result1, #0 wz
02078     34 01 90 5D |  if_ne	jmp	#LR__0116
0207c     10 31 02 F6 | 	mov	local10, local02
02080     03 30 66 F0 | 	shl	local10, #3
02084     35 00 00 FF 
02088     0C E4 05 F1 | 	add	objptr, ##27148
0208c     F2 30 02 F1 | 	add	local10, objptr
02090     10 39 02 F6 | 	mov	local14, local02
02094     03 38 66 F0 | 	shl	local14, #3
02098     F2 38 02 F1 | 	add	local14, objptr
0209c     1C 29 02 FB | 	rdlong	local06, local14
020a0     10 37 02 F6 | 	mov	local13, local02
020a4     01 36 06 F1 | 	add	local13, #1
020a8     03 36 66 F0 | 	shl	local13, #3
020ac     F2 36 02 F1 | 	add	local13, objptr
020b0     1B 35 02 FB | 	rdlong	local12, local13
020b4     10 49 02 F6 | 	mov	local22, local02
020b8     01 48 06 F1 | 	add	local22, #1
020bc     24 4B 02 F6 | 	mov	local23, local22
020c0     03 4A 66 F0 | 	shl	local23, #3
020c4     F2 4C 02 F6 | 	mov	local24, objptr
020c8     F2 4A 02 F1 | 	add	local23, objptr
020cc     25 13 02 FB | 	rdlong	arg01, local23
020d0     35 00 00 FF 
020d4     0C E4 85 F1 | 	sub	objptr, ##27148
020d8     09 2B 02 F6 | 	mov	local07, arg01
020dc     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020e0                 | LR__0111
020e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
020e4     01 2A 06 51 |  if_ne	add	local07, #1
020e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
020ec                 | LR__0112
020ec     09 2B 82 F1 | 	sub	local07, arg01
020f0     15 33 02 F6 | 	mov	local11, local07
020f4     01 32 86 F1 | 	sub	local11, #1
020f8     1A 13 02 F6 | 	mov	arg01, local12
020fc     19 15 02 F6 | 	mov	arg02, local11
02100     9C 0A B2 FD | 	call	#__system__Right_S
02104     FD 34 02 F6 | 	mov	local12, result1
02108     14 13 02 F6 | 	mov	arg01, local06
0210c     1A 15 02 F6 | 	mov	arg02, local12
02110     E4 E9 B1 FD | 	call	#__system___string_concat
02114     FD 28 02 F6 | 	mov	local06, result1
02118     18 29 62 FC | 	wrlong	local06, local10
0211c                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
0211c     10 3B 02 F6 | 	mov	local15, local02
02120     01 3A 06 F1 | 	add	local15, #1
02124     1F 4F 02 F6 | 	mov	local25, local17
02128     01 4E 06 F1 | 	add	local25, #1
0212c     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02130                 | LR__0113
02130     27 3B 52 F2 | 	cmps	local15, local25 wc
02134     70 00 90 3D |  if_ae	jmp	#LR__0115
02138     1D 27 02 F6 | 	mov	local05, local15
0213c     01 26 06 F1 | 	add	local05, #1
02140     03 26 66 F0 | 	shl	local05, #3
02144     35 00 00 FF 
02148     0C E4 05 F1 | 	add	objptr, ##27148
0214c     F2 26 02 F1 | 	add	local05, objptr
02150     13 25 02 FB | 	rdlong	local04, local05
02154     1D 29 02 F6 | 	mov	local06, local15
02158     01 28 06 F1 | 	add	local06, #1
0215c     03 28 66 F0 | 	shl	local06, #3
02160     F2 28 02 F1 | 	add	local06, objptr
02164     04 28 06 F1 | 	add	local06, #4
02168     14 23 02 FB | 	rdlong	local03, local06
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     03 28 66 F0 | 	shl	local06, #3
02174     F2 34 02 F6 | 	mov	local12, objptr
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     14 25 62 FC | 	wrlong	local04, local06
02180     1D 33 02 F6 | 	mov	local11, local15
02184     19 37 02 F6 | 	mov	local13, local11
02188     03 36 66 F0 | 	shl	local13, #3
0218c     F2 36 02 F1 | 	add	local13, objptr
02190     04 36 06 F1 | 	add	local13, #4
02194     1B 23 62 FC | 	wrlong	local03, local13
02198     01 3A 06 F1 | 	add	local15, #1
0219c     35 00 00 FF 
021a0     0C E4 85 F1 | 	sub	objptr, ##27148
021a4     88 FF 9F FD | 	jmp	#LR__0113
021a8                 | LR__0114
021a8                 | LR__0115
021a8     01 20 86 F1 | 	sub	local02, #1
021ac     01 3E 86 F1 | 	sub	local17, #1
021b0                 | LR__0116
021b0     01 20 06 F1 | 	add	local02, #1
021b4     1F 21 52 F2 | 	cmps	local02, local17 wc
021b8     34 FE 9F CD |  if_b	jmp	#LR__0110
021bc     00 20 06 F6 | 	mov	local02, #0
021c0                 | '  
021c0                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021c0                 | '  
021c0                 | ' i=0 
021c0                 | ' do
021c0                 | LR__0117
021c0     10 31 02 F6 | 	mov	local10, local02
021c4     03 30 66 F0 | 	shl	local10, #3
021c8     35 00 00 FF 
021cc     0C E4 05 F1 | 	add	objptr, ##27148
021d0     F2 30 02 F1 | 	add	local10, objptr
021d4     18 51 02 FB | 	rdlong	local26, local10
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     01 30 06 F1 | 	add	local10, #1
021e0     03 30 66 F0 | 	shl	local10, #3
021e4     F2 30 02 F1 | 	add	local10, objptr
021e8     18 53 02 FB | 	rdlong	local27, local10
021ec                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
021ec                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
021ec     81 01 00 FF 
021f0     6F 15 06 F6 | 	mov	arg02, ##@LR__5057
021f4     28 13 02 F6 | 	mov	arg01, local26
021f8     35 00 00 FF 
021fc     0C E4 85 F1 | 	sub	objptr, ##27148
02200     C0 E8 B1 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     A8 00 90 AD |  if_e	jmp	#LR__0118
0220c     81 01 00 FF 
02210     71 15 06 F6 | 	mov	arg02, ##@LR__5058
02214     28 13 02 F6 | 	mov	arg01, local26
02218     A8 E8 B1 FD | 	call	#__system___string_cmp
0221c     FD 22 0A F6 | 	mov	local03, result1 wz
02220     90 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     73 29 06 F6 | 	mov	local06, ##@LR__5059
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     14 15 02 F6 | 	mov	arg02, local06
02234     8C E8 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     74 00 90 AD |  if_e	jmp	#LR__0118
02240     81 01 00 FF 
02244     75 35 06 F6 | 	mov	local12, ##@LR__5060
02248     28 13 02 F6 | 	mov	arg01, local26
0224c     1A 15 02 F6 | 	mov	arg02, local12
02250     70 E8 B1 FD | 	call	#__system___string_cmp
02254     00 FA 0D F2 | 	cmp	result1, #0 wz
02258     58 00 90 AD |  if_e	jmp	#LR__0118
0225c     81 01 00 FF 
02260     77 33 06 F6 | 	mov	local11, ##@LR__5061
02264     19 35 02 F6 | 	mov	local12, local11
02268     28 13 02 F6 | 	mov	arg01, local26
0226c     1A 15 02 F6 | 	mov	arg02, local12
02270     50 E8 B1 FD | 	call	#__system___string_cmp
02274     FD 28 0A F6 | 	mov	local06, result1 wz
02278     38 00 90 AD |  if_e	jmp	#LR__0118
0227c     81 01 00 FF 
02280     79 33 06 F6 | 	mov	local11, ##@LR__5062
02284     28 13 02 F6 | 	mov	arg01, local26
02288     19 15 02 F6 | 	mov	arg02, local11
0228c     34 E8 B1 FD | 	call	#__system___string_cmp
02290     FD 34 0A F6 | 	mov	local12, result1 wz
02294     1C 00 90 AD |  if_e	jmp	#LR__0118
02298     81 01 00 FF 
0229c     7B 39 06 F6 | 	mov	local14, ##@LR__5063
022a0     28 13 02 F6 | 	mov	arg01, local26
022a4     1C 15 02 F6 | 	mov	arg02, local14
022a8     18 E8 B1 FD | 	call	#__system___string_cmp
022ac     FD 32 0A F6 | 	mov	local11, result1 wz
022b0     20 00 90 5D |  if_ne	jmp	#LR__0119
022b4                 | LR__0118
022b4     81 01 00 FF 
022b8     7D 55 06 F6 | 	mov	local28, ##@LR__5064
022bc     2A 37 02 F6 | 	mov	local13, local28
022c0     29 13 02 F6 | 	mov	arg01, local27
022c4     1B 15 02 F6 | 	mov	arg02, local13
022c8     F8 E7 B1 FD | 	call	#__system___string_cmp
022cc     FD 38 0A F6 | 	mov	local14, result1 wz
022d0     B8 00 90 AD |  if_e	jmp	#LR__0122
022d4                 | LR__0119
022d4     81 01 00 FF 
022d8     7F 55 06 F6 | 	mov	local28, ##@LR__5065
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     2A 15 02 F6 | 	mov	arg02, local28
022e4     DC E7 B1 FD | 	call	#__system___string_cmp
022e8     FD 36 0A F6 | 	mov	local13, result1 wz
022ec     20 00 90 5D |  if_ne	jmp	#LR__0120
022f0     81 01 00 FF 
022f4     81 4B 06 F6 | 	mov	local23, ##@LR__5066
022f8     25 49 02 F6 | 	mov	local22, local23
022fc     29 13 02 F6 | 	mov	arg01, local27
02300     24 15 02 F6 | 	mov	arg02, local22
02304     BC E7 B1 FD | 	call	#__system___string_cmp
02308     FD 54 0A F6 | 	mov	local28, result1 wz
0230c     7C 00 90 AD |  if_e	jmp	#LR__0122
02310                 | LR__0120
02310     81 01 00 FF 
02314     83 4B 06 F6 | 	mov	local23, ##@LR__5067
02318     28 13 02 F6 | 	mov	arg01, local26
0231c     25 15 02 F6 | 	mov	arg02, local23
02320     A0 E7 B1 FD | 	call	#__system___string_cmp
02324     FD 48 0A F6 | 	mov	local22, result1 wz
02328     20 00 90 5D |  if_ne	jmp	#LR__0121
0232c     81 01 00 FF 
02330     85 57 06 F6 | 	mov	local29, ##@LR__5068
02334     2B 4D 02 F6 | 	mov	local24, local29
02338     29 13 02 F6 | 	mov	arg01, local27
0233c     26 15 02 F6 | 	mov	arg02, local24
02340     80 E7 B1 FD | 	call	#__system___string_cmp
02344     FD 4A 0A F6 | 	mov	local23, result1 wz
02348     40 00 90 AD |  if_e	jmp	#LR__0122
0234c                 | LR__0121
0234c     81 01 00 FF 
02350     87 59 06 F6 | 	mov	local30, ##@LR__5069
02354     2C 57 02 F6 | 	mov	local29, local30
02358     28 13 02 F6 | 	mov	arg01, local26
0235c     2B 15 02 F6 | 	mov	arg02, local29
02360     60 E7 B1 FD | 	call	#__system___string_cmp
02364     FD 4C 0A F6 | 	mov	local24, result1 wz
02368     F0 00 90 5D |  if_ne	jmp	#LR__0126
0236c     81 01 00 FF 
02370     89 5B 06 F6 | 	mov	local31, ##@LR__5070
02374     2D 59 02 F6 | 	mov	local30, local31
02378     29 13 02 F6 | 	mov	arg01, local27
0237c     2C 15 02 F6 | 	mov	arg02, local30
02380     40 E7 B1 FD | 	call	#__system___string_cmp
02384     FD 56 0A F6 | 	mov	local29, result1 wz
02388     D0 00 90 5D |  if_ne	jmp	#LR__0126
0238c                 | LR__0122
0238c     10 31 02 F6 | 	mov	local10, local02
02390     03 30 66 F0 | 	shl	local10, #3
02394     35 00 00 FF 
02398     0C E4 05 F1 | 	add	objptr, ##27148
0239c     F2 30 02 F1 | 	add	local10, objptr
023a0     29 35 02 F6 | 	mov	local12, local27
023a4     28 13 02 F6 | 	mov	arg01, local26
023a8     1A 15 02 F6 | 	mov	arg02, local12
023ac     35 00 00 FF 
023b0     0C E4 85 F1 | 	sub	objptr, ##27148
023b4     40 E7 B1 FD | 	call	#__system___string_concat
023b8     18 FB 61 FC | 	wrlong	result1, local10
023bc                 | '     lparts(i).part$=s1$+s2$
023bc                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023bc     10 3B 02 F6 | 	mov	local15, local02
023c0     01 3A 06 F1 | 	add	local15, #1
023c4     1F 5D 02 F6 | 	mov	local32, local17
023c8     01 5C 06 F1 | 	add	local32, #1
023cc     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023d0                 | LR__0123
023d0     2E 3B 52 F2 | 	cmps	local15, local32 wc
023d4     7C 00 90 3D |  if_ae	jmp	#LR__0125
023d8     1D 27 02 F6 | 	mov	local05, local15
023dc     01 26 06 F1 | 	add	local05, #1
023e0     03 26 66 F0 | 	shl	local05, #3
023e4     35 00 00 FF 
023e8     0C E4 05 F1 | 	add	objptr, ##27148
023ec     F2 26 02 F1 | 	add	local05, objptr
023f0     13 25 02 FB | 	rdlong	local04, local05
023f4     1D 29 02 F6 | 	mov	local06, local15
023f8     01 28 06 F1 | 	add	local06, #1
023fc     03 28 66 F0 | 	shl	local06, #3
02400     F2 28 02 F1 | 	add	local06, objptr
02404     04 28 06 F1 | 	add	local06, #4
02408     14 23 02 FB | 	rdlong	local03, local06
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     03 28 66 F0 | 	shl	local06, #3
02414     F2 34 02 F6 | 	mov	local12, objptr
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     14 25 62 FC | 	wrlong	local04, local06
02420     1D 33 02 F6 | 	mov	local11, local15
02424     19 39 02 F6 | 	mov	local14, local11
02428     1C 37 02 F6 | 	mov	local13, local14
0242c     03 36 66 F0 | 	shl	local13, #3
02430     F2 54 02 F6 | 	mov	local28, objptr
02434     F2 36 02 F1 | 	add	local13, objptr
02438     04 36 06 F1 | 	add	local13, #4
0243c     1B 23 62 FC | 	wrlong	local03, local13
02440     04 36 86 F1 | 	sub	local13, #4
02444     01 3A 06 F1 | 	add	local15, #1
02448     35 00 00 FF 
0244c     0C E4 85 F1 | 	sub	objptr, ##27148
02450     7C FF 9F FD | 	jmp	#LR__0123
02454                 | LR__0124
02454                 | LR__0125
02454     01 20 86 F1 | 	sub	local02, #1
02458     01 3E 86 F1 | 	sub	local17, #1
0245c                 | LR__0126
0245c     01 20 06 F1 | 	add	local02, #1
02460     1F 21 52 F2 | 	cmps	local02, local17 wc
02464     58 FD 9F CD |  if_b	jmp	#LR__0117
02468                 | '  
02468                 | ' ' 1h : now remove parts that are spaces
02468                 | ' 
02468                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02468     00 20 06 F6 | 	mov	local02, #0
0246c     1F 5F 02 F6 | 	mov	local33, local17
02470     01 5E 06 F1 | 	add	local33, #1
02474                 | LR__0127
02474     2F 21 52 F2 | 	cmps	local02, local33 wc
02478     50 00 90 3D |  if_ae	jmp	#LR__0128
0247c     10 31 02 F6 | 	mov	local10, local02
02480     03 30 66 F0 | 	shl	local10, #3
02484     35 00 00 FF 
02488     0C E4 05 F1 | 	add	objptr, ##27148
0248c     F2 30 02 F1 | 	add	local10, objptr
02490     10 35 02 F6 | 	mov	local12, local02
02494     1A 33 02 F6 | 	mov	local11, local12
02498     19 39 02 F6 | 	mov	local14, local11
0249c     03 38 66 F0 | 	shl	local14, #3
024a0     F2 36 02 F6 | 	mov	local13, objptr
024a4     F2 38 02 F1 | 	add	local14, objptr
024a8     1C 13 02 FB | 	rdlong	arg01, local14
024ac     35 00 00 FF 
024b0     0C E4 85 F1 | 	sub	objptr, ##27148
024b4     F0 0A B2 FD | 	call	#__system__RTrim_S
024b8     FD 12 02 F6 | 	mov	arg01, result1
024bc     28 0A B2 FD | 	call	#__system__LTrim_S
024c0     18 FB 61 FC | 	wrlong	result1, local10
024c4     01 20 06 F1 | 	add	local02, #1
024c8     A8 FF 9F FD | 	jmp	#LR__0127
024cc                 | LR__0128
024cc     00 20 06 F6 | 	mov	local02, #0
024d0     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024d4                 | ' i=0
024d4                 | ' do 
024d4                 | LR__0129
024d4                 | '   if len(lparts(i).part$)=0 then 
024d4     10 27 02 F6 | 	mov	local05, local02
024d8     03 26 66 F0 | 	shl	local05, #3
024dc     35 00 00 FF 
024e0     0C E4 05 F1 | 	add	objptr, ##27148
024e4     F2 26 02 F1 | 	add	local05, objptr
024e8     13 13 02 FB | 	rdlong	arg01, local05
024ec     35 00 00 FF 
024f0     0C E4 85 F1 | 	sub	objptr, ##27148
024f4     09 2B 02 F6 | 	mov	local07, arg01
024f8                 | LR__0130
024f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
024fc     01 2A 06 51 |  if_ne	add	local07, #1
02500     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02504     09 2B 8A F1 | 	sub	local07, arg01 wz
02508     C4 00 90 5D |  if_ne	jmp	#LR__0134
0250c                 | '     if i=k-1 then k-=1  :  exit
0250c     1F 25 02 F6 | 	mov	local04, local17
02510     01 24 86 F1 | 	sub	local04, #1
02514     12 21 0A F2 | 	cmp	local02, local04 wz
02518     01 3E 86 A1 |  if_e	sub	local17, #1
0251c     C4 00 90 AD |  if_e	jmp	#LR__0136
02520                 | '     if i<k-1 then 
02520     1F 25 02 F6 | 	mov	local04, local17
02524     01 24 86 F1 | 	sub	local04, #1
02528     12 21 52 F2 | 	cmps	local02, local04 wc
0252c     A0 00 90 3D |  if_ae	jmp	#LR__0133
02530                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02530     10 3B 02 F6 | 	mov	local15, local02
02534     1F 61 02 F6 | 	mov	local34, local17
02538     01 60 86 F1 | 	sub	local34, #1
0253c                 | LR__0131
0253c     30 3B 52 F2 | 	cmps	local15, local34 wc
02540     80 00 90 3D |  if_ae	jmp	#LR__0132
02544     1D 27 02 F6 | 	mov	local05, local15
02548     01 26 06 F1 | 	add	local05, #1
0254c     03 26 66 F0 | 	shl	local05, #3
02550     35 00 00 FF 
02554     0C E4 05 F1 | 	add	objptr, ##27148
02558     F2 26 02 F1 | 	add	local05, objptr
0255c     13 25 02 FB | 	rdlong	local04, local05
02560     1D 29 02 F6 | 	mov	local06, local15
02564     01 28 06 F1 | 	add	local06, #1
02568     03 28 66 F0 | 	shl	local06, #3
0256c     F2 28 02 F1 | 	add	local06, objptr
02570     04 28 06 F1 | 	add	local06, #4
02574     14 23 02 FB | 	rdlong	local03, local06
02578     1D 31 02 F6 | 	mov	local10, local15
0257c     18 29 02 F6 | 	mov	local06, local10
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 34 02 F6 | 	mov	local12, objptr
02588     F2 28 02 F1 | 	add	local06, objptr
0258c     14 25 62 FC | 	wrlong	local04, local06
02590     1D 33 02 F6 | 	mov	local11, local15
02594     19 39 02 F6 | 	mov	local14, local11
02598     1C 37 02 F6 | 	mov	local13, local14
0259c     03 36 66 F0 | 	shl	local13, #3
025a0     F2 54 02 F6 | 	mov	local28, objptr
025a4     F2 36 02 F1 | 	add	local13, objptr
025a8     04 36 06 F1 | 	add	local13, #4
025ac     1B 23 62 FC | 	wrlong	local03, local13
025b0     04 36 86 F1 | 	sub	local13, #4
025b4     01 3A 06 F1 | 	add	local15, #1
025b8     35 00 00 FF 
025bc     0C E4 85 F1 | 	sub	objptr, ##27148
025c0     78 FF 9F FD | 	jmp	#LR__0131
025c4                 | LR__0132
025c4     01 3E 86 F1 | 	sub	local17, #1
025c8                 | '       if i>0 then i-=1 
025c8     01 20 56 F2 | 	cmps	local02, #1 wc
025cc     01 20 86 31 |  if_ae	sub	local02, #1
025d0                 | LR__0133
025d0                 | LR__0134
025d0     01 20 06 F1 | 	add	local02, #1
025d4     1F 25 02 F6 | 	mov	local04, local17
025d8     01 24 86 F1 | 	sub	local04, #1
025dc     12 21 5A F2 | 	cmps	local02, local04 wcz
025e0     F0 FE 9F ED |  if_be	jmp	#LR__0129
025e4                 | LR__0135
025e4                 | LR__0136
025e4                 | ' 
025e4                 | ' ' 1i: lowercase all that is not a string
025e4                 | ' 
025e4                 | ' for j=0 to k-1
025e4     00 3A 06 F6 | 	mov	local15, #0
025e8     1F 63 02 F6 | 	mov	local35, local17
025ec                 | LR__0137
025ec     31 3B 52 F2 | 	cmps	local15, local35 wc
025f0     C8 00 90 3D |  if_ae	jmp	#LR__0140
025f4                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
025f4     1D 27 02 F6 | 	mov	local05, local15
025f8     03 26 66 F0 | 	shl	local05, #3
025fc     35 00 00 FF 
02600     0C E4 05 F1 | 	add	objptr, ##27148
02604     F2 26 02 F1 | 	add	local05, objptr
02608     13 13 02 FB | 	rdlong	arg01, local05
0260c     01 14 06 F6 | 	mov	arg02, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     FC 04 B2 FD | 	call	#__system__Left_S
0261c     FD 12 02 F6 | 	mov	arg01, result1
02620     81 01 00 FF 
02624     8B 15 06 F6 | 	mov	arg02, ##@LR__5071
02628     98 E4 B1 FD | 	call	#__system___string_cmp
0262c     00 FA 0D F2 | 	cmp	result1, #0 wz
02630     44 00 90 5D |  if_ne	jmp	#LR__0138
02634     1D 29 02 F6 | 	mov	local06, local15
02638     03 28 66 F0 | 	shl	local06, #3
0263c     35 00 00 FF 
02640     0C E4 05 F1 | 	add	objptr, ##27148
02644     F2 34 02 F6 | 	mov	local12, objptr
02648     F2 28 02 F1 | 	add	local06, objptr
0264c     14 13 02 FB | 	rdlong	arg01, local06
02650     01 14 06 F6 | 	mov	arg02, #1
02654     35 00 00 FF 
02658     0C E4 85 F1 | 	sub	objptr, ##27148
0265c     40 05 B2 FD | 	call	#__system__Right_S
02660     FD 12 02 F6 | 	mov	arg01, result1
02664     81 01 00 FF 
02668     8D 15 06 F6 | 	mov	arg02, ##@LR__5072
0266c     54 E4 B1 FD | 	call	#__system___string_cmp
02670     00 FA 0D F2 | 	cmp	result1, #0 wz
02674     3C 00 90 AD |  if_e	jmp	#LR__0139
02678                 | LR__0138
02678     1D 31 02 F6 | 	mov	local10, local15
0267c     03 30 66 F0 | 	shl	local10, #3
02680     35 00 00 FF 
02684     0C E4 05 F1 | 	add	objptr, ##27148
02688     F2 30 02 F1 | 	add	local10, objptr
0268c     1D 33 02 F6 | 	mov	local11, local15
02690     19 39 02 F6 | 	mov	local14, local11
02694     03 38 66 F0 | 	shl	local14, #3
02698     F2 36 02 F6 | 	mov	local13, objptr
0269c     F2 38 02 F1 | 	add	local14, objptr
026a0     1C 13 02 FB | 	rdlong	arg01, local14
026a4     35 00 00 FF 
026a8     0C E4 85 F1 | 	sub	objptr, ##27148
026ac     78 07 B2 FD | 	call	#__system__LCase_S
026b0     18 FB 61 FC | 	wrlong	result1, local10
026b4                 | LR__0139
026b4     01 3A 06 F1 | 	add	local15, #1
026b8     30 FF 9F FD | 	jmp	#LR__0137
026bc                 | LR__0140
026bc                 | ' 
026bc                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026bc                 | ' 
026bc                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026bc     00 20 06 F6 | 	mov	local02, #0
026c0     1F 65 02 F6 | 	mov	local36, local17
026c4     01 64 06 F1 | 	add	local36, #1
026c8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026cc                 | LR__0141
026cc     32 21 52 F2 | 	cmps	local02, local36 wc
026d0     30 00 90 3D |  if_ae	jmp	#LR__0143
026d4     10 31 02 F6 | 	mov	local10, local02
026d8     03 30 66 F0 | 	shl	local10, #3
026dc     35 00 00 FF 
026e0     0C E4 05 F1 | 	add	objptr, ##27148
026e4     F2 30 02 F1 | 	add	local10, objptr
026e8     04 30 06 F1 | 	add	local10, #4
026ec     FF FF FF FF 
026f0     18 FF 6B FC | 	wrlong	##-1, local10
026f4     01 20 06 F1 | 	add	local02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     C8 FF 9F FD | 	jmp	#LR__0141
02704                 | LR__0142
02704                 | LR__0143
02704                 | ' 
02704                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02704     35 00 00 FF 
02708     0C E4 05 F1 | 	add	objptr, ##27148
0270c     F2 12 02 FB | 	rdlong	arg01, objptr
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     AC 3C B0 FD | 	call	#_isdec
0271c     00 FA 0D F2 | 	cmp	result1, #0 wz
02720     01 66 06 56 |  if_ne	mov	local37, #1
02724     00 66 06 A6 |  if_e	mov	local37, #0
02728                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02728     35 00 00 FF 
0272c     0C E4 05 F1 | 	add	objptr, ##27148
02730     F2 12 02 FB | 	rdlong	arg01, objptr
02734     35 00 00 FF 
02738     0C E4 85 F1 | 	sub	objptr, ##27148
0273c     81 01 00 FF 
02740     8F 15 06 F6 | 	mov	arg02, ##@LR__5073
02744     7C E3 B1 FD | 	call	#__system___string_cmp
02748     00 FA 0D F2 | 	cmp	result1, #0 wz
0274c     01 66 06 A6 |  if_e	mov	local37, #1
02750     00 20 06 F6 | 	mov	local02, #0
02754                 | ' i=0 : do 
02754                 | LR__0144
02754                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02754     10 27 02 F6 | 	mov	local05, local02
02758     03 26 66 F0 | 	shl	local05, #3
0275c     35 00 00 FF 
02760     0C E4 05 F1 | 	add	objptr, ##27148
02764     F2 26 02 F1 | 	add	local05, objptr
02768     13 13 02 FB | 	rdlong	arg01, local05
0276c     81 01 00 FF 
02770     94 15 06 F6 | 	mov	arg02, ##@LR__5074
02774     35 00 00 FF 
02778     0C E4 85 F1 | 	sub	objptr, ##27148
0277c     44 E3 B1 FD | 	call	#__system___string_cmp
02780     00 FA 0D F2 | 	cmp	result1, #0 wz
02784     0C 00 90 AD |  if_e	jmp	#LR__0145
02788     01 20 06 F1 | 	add	local02, #1
0278c     1F 21 5A F2 | 	cmps	local02, local17 wcz
02790     C0 FF 9F ED |  if_be	jmp	#LR__0144
02794                 | LR__0145
02794                 | ' if i<k then addptr=i+1	 							' then found
02794     1F 21 52 F2 | 	cmps	local02, local17 wc
02798     10 67 02 C6 |  if_b	mov	local37, local02
0279c     01 66 06 C1 |  if_b	add	local37, #1
027a0     35 00 00 FF 
027a4     0C E4 05 F1 | 	add	objptr, ##27148
027a8     33 29 02 F6 | 	mov	local06, local37
027ac     03 28 66 F0 | 	shl	local06, #3
027b0     F2 34 02 F6 | 	mov	local12, objptr
027b4     F2 28 02 F1 | 	add	local06, objptr
027b8     14 15 02 FB | 	rdlong	arg02, local06
027bc     81 01 00 FF 
027c0     99 17 06 F6 | 	mov	arg03, ##@LR__5075
027c4     01 12 06 F6 | 	mov	arg01, #1
027c8     35 00 00 FF 
027cc     0C E4 85 F1 | 	sub	objptr, ##27148
027d0     8C 08 B2 FD | 	call	#__system__Instr
027d4     FD 68 02 F6 | 	mov	local38, result1
027d8                 | ' lp$=lparts(addptr).part$ 
027d8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027d8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027d8     01 68 56 F2 | 	cmps	local38, #1 wc
027dc     68 01 90 CD |  if_b	jmp	#LR__0152
027e0     33 27 02 F6 | 	mov	local05, local37
027e4     03 26 66 F0 | 	shl	local05, #3
027e8     35 00 00 FF 
027ec     0C E4 05 F1 | 	add	objptr, ##27148
027f0     F2 26 02 F1 | 	add	local05, objptr
027f4     13 13 02 FB | 	rdlong	arg01, local05
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     09 2B 02 F6 | 	mov	local07, arg01
02804     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02808                 | LR__0146
02808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0280c     01 2A 06 51 |  if_ne	add	local07, #1
02810     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02814                 | LR__0147
02814     09 2B 82 F1 | 	sub	local07, arg01
02818     15 69 52 F2 | 	cmps	local38, local07 wc
0281c     28 01 90 3D |  if_ae	jmp	#LR__0152
02820     01 3E 06 F1 | 	add	local17, #1
02824                 | '   k+=1
02824                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02824     1F 21 02 F6 | 	mov	local02, local17
02828     33 6B 02 F6 | 	mov	local39, local37
0282c     01 6A 06 F1 | 	add	local39, #1
02830     35 00 00 FF 
02834     0C E4 05 F1 | 	add	objptr, ##27148
02838     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
0283c                 | LR__0148
0283c     10 27 02 F6 | 	mov	local05, local02
02840     01 26 86 F1 | 	sub	local05, #1
02844     03 26 66 F0 | 	shl	local05, #3
02848     F2 26 02 F1 | 	add	local05, objptr
0284c     13 25 02 FB | 	rdlong	local04, local05
02850     10 29 02 F6 | 	mov	local06, local02
02854     01 28 86 F1 | 	sub	local06, #1
02858     03 28 66 F0 | 	shl	local06, #3
0285c     F2 28 02 F1 | 	add	local06, objptr
02860     04 28 06 F1 | 	add	local06, #4
02864     14 23 02 FB | 	rdlong	local03, local06
02868     10 29 02 F6 | 	mov	local06, local02
0286c     03 28 66 F0 | 	shl	local06, #3
02870     F2 28 02 F1 | 	add	local06, objptr
02874     14 25 62 FC | 	wrlong	local04, local06
02878     10 37 02 F6 | 	mov	local13, local02
0287c     03 36 66 F0 | 	shl	local13, #3
02880     F2 36 02 F1 | 	add	local13, objptr
02884     04 36 06 F1 | 	add	local13, #4
02888     1B 23 62 FC | 	wrlong	local03, local13
0288c     01 20 86 F1 | 	sub	local02, #1
02890     35 21 52 F2 | 	cmps	local02, local39 wc
02894     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02898                 | LR__0149
02898     33 31 02 F6 | 	mov	local10, local37
0289c     01 30 06 F1 | 	add	local10, #1
028a0     03 30 66 F0 | 	shl	local10, #3
028a4     F2 30 02 F1 | 	add	local10, objptr
028a8     33 39 02 F6 | 	mov	local14, local37
028ac     03 38 66 F0 | 	shl	local14, #3
028b0     F2 38 02 F1 | 	add	local14, objptr
028b4     1C 29 02 FB | 	rdlong	local06, local14
028b8     33 55 02 F6 | 	mov	local28, local37
028bc     2A 49 02 F6 | 	mov	local22, local28
028c0     03 48 66 F0 | 	shl	local22, #3
028c4     F2 4A 02 F6 | 	mov	local23, objptr
028c8     F2 48 02 F1 | 	add	local22, objptr
028cc     24 13 02 FB | 	rdlong	arg01, local22
028d0     35 00 00 FF 
028d4     0C E4 85 F1 | 	sub	objptr, ##27148
028d8     09 2B 02 F6 | 	mov	local07, arg01
028dc     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028e0                 | LR__0150
028e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028e4     01 2A 06 51 |  if_ne	add	local07, #1
028e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
028ec                 | LR__0151
028ec     09 2B 82 F1 | 	sub	local07, arg01
028f0     15 15 02 F6 | 	mov	arg02, local07
028f4     34 15 82 F1 | 	sub	arg02, local38
028f8     14 13 02 F6 | 	mov	arg01, local06
028fc     A0 02 B2 FD | 	call	#__system__Right_S
02900     18 FB 61 FC | 	wrlong	result1, local10
02904     33 31 02 F6 | 	mov	local10, local37
02908     03 30 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     0C E4 05 F1 | 	add	objptr, ##27148
02914     F2 30 02 F1 | 	add	local10, objptr
02918     33 33 02 F6 | 	mov	local11, local37
0291c     19 39 02 F6 | 	mov	local14, local11
02920     03 38 66 F0 | 	shl	local14, #3
02924     F2 36 02 F6 | 	mov	local13, objptr
02928     F2 38 02 F1 | 	add	local14, objptr
0292c     1C 13 02 FB | 	rdlong	arg01, local14
02930     34 35 02 F6 | 	mov	local12, local38
02934     1A 15 02 F6 | 	mov	arg02, local12
02938     35 00 00 FF 
0293c     0C E4 85 F1 | 	sub	objptr, ##27148
02940     D4 01 B2 FD | 	call	#__system__Left_S
02944     18 FB 61 FC | 	wrlong	result1, local10
02948                 | LR__0152
02948                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02948     33 27 02 F6 | 	mov	local05, local37
0294c     03 26 66 F0 | 	shl	local05, #3
02950     35 00 00 FF 
02954     0C E4 05 F1 | 	add	objptr, ##27148
02958     F2 26 02 F1 | 	add	local05, objptr
0295c     13 13 02 FB | 	rdlong	arg01, local05
02960     01 14 06 F6 | 	mov	arg02, #1
02964     35 00 00 FF 
02968     0C E4 85 F1 | 	sub	objptr, ##27148
0296c     A8 01 B2 FD | 	call	#__system__Left_S
02970     FD 12 02 F6 | 	mov	arg01, result1
02974     81 01 00 FF 
02978     9B 15 06 F6 | 	mov	arg02, ##@LR__5076
0297c     44 E1 B1 FD | 	call	#__system___string_cmp
02980     00 FA 0D F2 | 	cmp	result1, #0 wz
02984     60 01 90 5D |  if_ne	jmp	#LR__0159
02988     33 29 02 F6 | 	mov	local06, local37
0298c     03 28 66 F0 | 	shl	local06, #3
02990     35 00 00 FF 
02994     0C E4 05 F1 | 	add	objptr, ##27148
02998     F2 34 02 F6 | 	mov	local12, objptr
0299c     F2 28 02 F1 | 	add	local06, objptr
029a0     14 13 02 FB | 	rdlong	arg01, local06
029a4     35 00 00 FF 
029a8     0C E4 85 F1 | 	sub	objptr, ##27148
029ac     09 2B 02 F6 | 	mov	local07, arg01
029b0     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029b4                 | LR__0153
029b4     15 FB C9 FA | 	rdbyte	result1, local07 wz
029b8     01 2A 06 51 |  if_ne	add	local07, #1
029bc     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029c0                 | LR__0154
029c0     09 2B 82 F1 | 	sub	local07, arg01
029c4     02 2A 56 F2 | 	cmps	local07, #2 wc
029c8     1C 01 90 CD |  if_b	jmp	#LR__0159
029cc     01 3E 06 F1 | 	add	local17, #1
029d0                 | '   k+=1
029d0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029d0     1F 21 02 F6 | 	mov	local02, local17
029d4     33 6D 02 F6 | 	mov	local40, local37
029d8     01 6C 06 F1 | 	add	local40, #1
029dc     35 00 00 FF 
029e0     0C E4 05 F1 | 	add	objptr, ##27148
029e4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
029e8                 | LR__0155
029e8     10 27 02 F6 | 	mov	local05, local02
029ec     01 26 86 F1 | 	sub	local05, #1
029f0     03 26 66 F0 | 	shl	local05, #3
029f4     F2 26 02 F1 | 	add	local05, objptr
029f8     13 25 02 FB | 	rdlong	local04, local05
029fc     10 29 02 F6 | 	mov	local06, local02
02a00     01 28 86 F1 | 	sub	local06, #1
02a04     03 28 66 F0 | 	shl	local06, #3
02a08     F2 28 02 F1 | 	add	local06, objptr
02a0c     04 28 06 F1 | 	add	local06, #4
02a10     14 23 02 FB | 	rdlong	local03, local06
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     03 28 66 F0 | 	shl	local06, #3
02a1c     F2 28 02 F1 | 	add	local06, objptr
02a20     14 25 62 FC | 	wrlong	local04, local06
02a24     10 37 02 F6 | 	mov	local13, local02
02a28     03 36 66 F0 | 	shl	local13, #3
02a2c     F2 36 02 F1 | 	add	local13, objptr
02a30     04 36 06 F1 | 	add	local13, #4
02a34     1B 23 62 FC | 	wrlong	local03, local13
02a38     01 20 86 F1 | 	sub	local02, #1
02a3c     36 21 52 F2 | 	cmps	local02, local40 wc
02a40     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a44                 | LR__0156
02a44     33 31 02 F6 | 	mov	local10, local37
02a48     01 30 06 F1 | 	add	local10, #1
02a4c     03 30 66 F0 | 	shl	local10, #3
02a50     F2 30 02 F1 | 	add	local10, objptr
02a54     33 39 02 F6 | 	mov	local14, local37
02a58     03 38 66 F0 | 	shl	local14, #3
02a5c     F2 38 02 F1 | 	add	local14, objptr
02a60     1C 29 02 FB | 	rdlong	local06, local14
02a64     33 37 02 F6 | 	mov	local13, local37
02a68     1B 55 02 F6 | 	mov	local28, local13
02a6c     2A 49 02 F6 | 	mov	local22, local28
02a70     03 48 66 F0 | 	shl	local22, #3
02a74     F2 4A 02 F6 | 	mov	local23, objptr
02a78     F2 48 02 F1 | 	add	local22, objptr
02a7c     24 13 02 FB | 	rdlong	arg01, local22
02a80     35 00 00 FF 
02a84     0C E4 85 F1 | 	sub	objptr, ##27148
02a88     09 2B 02 F6 | 	mov	local07, arg01
02a8c     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02a90                 | LR__0157
02a90     15 FB C9 FA | 	rdbyte	result1, local07 wz
02a94     01 2A 06 51 |  if_ne	add	local07, #1
02a98     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02a9c                 | LR__0158
02a9c     09 2B 82 F1 | 	sub	local07, arg01
02aa0     15 39 02 F6 | 	mov	local14, local07
02aa4     1C 33 02 F6 | 	mov	local11, local14
02aa8     01 32 86 F1 | 	sub	local11, #1
02aac     19 35 02 F6 | 	mov	local12, local11
02ab0     14 13 02 F6 | 	mov	arg01, local06
02ab4     1A 15 02 F6 | 	mov	arg02, local12
02ab8     E4 00 B2 FD | 	call	#__system__Right_S
02abc     18 FB 61 FC | 	wrlong	result1, local10
02ac0     33 31 02 F6 | 	mov	local10, local37
02ac4     03 30 66 F0 | 	shl	local10, #3
02ac8     35 00 00 FF 
02acc     0C E4 05 F1 | 	add	objptr, ##27148
02ad0     F2 30 02 F1 | 	add	local10, objptr
02ad4     81 01 00 FF 
02ad8     9D 29 06 F6 | 	mov	local06, ##@LR__5077
02adc     18 29 62 FC | 	wrlong	local06, local10
02ae0     35 00 00 FF 
02ae4     0C E4 85 F1 | 	sub	objptr, ##27148
02ae8                 | LR__0159
02ae8     33 31 02 F6 | 	mov	local10, local37
02aec     03 30 66 F0 | 	shl	local10, #3
02af0     35 00 00 FF 
02af4     0C E4 05 F1 | 	add	objptr, ##27148
02af8     F2 30 02 F1 | 	add	local10, objptr
02afc     18 6F 02 FB | 	rdlong	local41, local10
02b00                 | ' 
02b00                 | ' lp$=lparts(addptr).part$ 
02b00                 | ' 
02b00                 | ' ' process mouse/cursor/click on/off
02b00                 | ' 
02b00                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b00     81 01 00 FF 
02b04     9F 15 06 F6 | 	mov	arg02, ##@LR__5078
02b08     37 13 02 F6 | 	mov	arg01, local41
02b0c     35 00 00 FF 
02b10     0C E4 85 F1 | 	sub	objptr, ##27148
02b14     AC DF B1 FD | 	call	#__system___string_cmp
02b18     00 FA 0D F2 | 	cmp	result1, #0 wz
02b1c     30 00 90 AD |  if_e	jmp	#LR__0160
02b20     81 01 00 FF 
02b24     A5 15 06 F6 | 	mov	arg02, ##@LR__5079
02b28     37 13 02 F6 | 	mov	arg01, local41
02b2c     94 DF B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     18 00 90 AD |  if_e	jmp	#LR__0160
02b38     81 01 00 FF 
02b3c     AC 15 06 F6 | 	mov	arg02, ##@LR__5080
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     7C DF B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b50                 | LR__0160
02b50                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b50     33 27 02 F6 | 	mov	local05, local37
02b54     01 26 06 F1 | 	add	local05, #1
02b58     03 26 66 F0 | 	shl	local05, #3
02b5c     35 00 00 FF 
02b60     0C E4 05 F1 | 	add	objptr, ##27148
02b64     F2 26 02 F1 | 	add	local05, objptr
02b68     13 13 02 FB | 	rdlong	arg01, local05
02b6c     81 01 00 FF 
02b70     B2 15 06 F6 | 	mov	arg02, ##@LR__5081
02b74     35 00 00 FF 
02b78     0C E4 85 F1 | 	sub	objptr, ##27148
02b7c     44 DF B1 FD | 	call	#__system___string_cmp
02b80     00 FA 0D F2 | 	cmp	result1, #0 wz
02b84     38 00 90 5D |  if_ne	jmp	#LR__0161
02b88     33 31 02 F6 | 	mov	local10, local37
02b8c     01 30 06 F1 | 	add	local10, #1
02b90     03 30 66 F0 | 	shl	local10, #3
02b94     35 00 00 FF 
02b98     0C E4 05 F1 | 	add	objptr, ##27148
02b9c     F2 30 02 F1 | 	add	local10, objptr
02ba0     81 01 00 FF 
02ba4     B5 29 06 F6 | 	mov	local06, ##@LR__5082
02ba8     18 29 62 FC | 	wrlong	local06, local10
02bac     14 E4 05 F1 | 	add	objptr, #20
02bb0     01 00 80 FF 
02bb4     F2 00 68 FC | 	wrlong	##512, objptr
02bb8     35 00 00 FF 
02bbc     20 E4 85 F1 | 	sub	objptr, ##27168
02bc0                 | LR__0161
02bc0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bc0     33 27 02 F6 | 	mov	local05, local37
02bc4     01 26 06 F1 | 	add	local05, #1
02bc8     03 26 66 F0 | 	shl	local05, #3
02bcc     35 00 00 FF 
02bd0     0C E4 05 F1 | 	add	objptr, ##27148
02bd4     F2 26 02 F1 | 	add	local05, objptr
02bd8     13 13 02 FB | 	rdlong	arg01, local05
02bdc     81 01 00 FF 
02be0     B7 15 06 F6 | 	mov	arg02, ##@LR__5083
02be4     35 00 00 FF 
02be8     0C E4 85 F1 | 	sub	objptr, ##27148
02bec     D4 DE B1 FD | 	call	#__system___string_cmp
02bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
02bf4     38 00 90 5D |  if_ne	jmp	#LR__0162
02bf8     33 31 02 F6 | 	mov	local10, local37
02bfc     01 30 06 F1 | 	add	local10, #1
02c00     03 30 66 F0 | 	shl	local10, #3
02c04     35 00 00 FF 
02c08     0C E4 05 F1 | 	add	objptr, ##27148
02c0c     F2 30 02 F1 | 	add	local10, objptr
02c10     81 01 00 FF 
02c14     BB 29 06 F6 | 	mov	local06, ##@LR__5084
02c18     18 29 62 FC | 	wrlong	local06, local10
02c1c     14 E4 05 F1 | 	add	objptr, #20
02c20     01 00 80 FF 
02c24     F2 00 68 FC | 	wrlong	##512, objptr
02c28     35 00 00 FF 
02c2c     20 E4 85 F1 | 	sub	objptr, ##27168
02c30                 | LR__0162
02c30                 | LR__0163
02c30                 | ' 		
02c30                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c30                 | ' 
02c30                 | ' if (lp$="mode" orelse lp$="m.") then 
02c30     81 01 00 FF 
02c34     BD 15 06 F6 | 	mov	arg02, ##@LR__5085
02c38     37 13 02 F6 | 	mov	arg01, local41
02c3c     84 DE B1 FD | 	call	#__system___string_cmp
02c40     00 FA 0D F2 | 	cmp	result1, #0 wz
02c44     18 00 90 AD |  if_e	jmp	#LR__0164
02c48     81 01 00 FF 
02c4c     C2 15 06 F6 | 	mov	arg02, ##@LR__5086
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     6C DE B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c60                 | LR__0164
02c60                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c60     33 27 02 F6 | 	mov	local05, local37
02c64     01 26 06 F1 | 	add	local05, #1
02c68     03 26 66 F0 | 	shl	local05, #3
02c6c     35 00 00 FF 
02c70     0C E4 05 F1 | 	add	objptr, ##27148
02c74     F2 26 02 F1 | 	add	local05, objptr
02c78     13 13 02 FB | 	rdlong	arg01, local05
02c7c     81 01 00 FF 
02c80     C5 15 06 F6 | 	mov	arg02, ##@LR__5087
02c84     35 00 00 FF 
02c88     0C E4 85 F1 | 	sub	objptr, ##27148
02c8c     34 DE B1 FD | 	call	#__system___string_cmp
02c90     00 FA 0D F2 | 	cmp	result1, #0 wz
02c94     2C 00 90 5D |  if_ne	jmp	#LR__0165
02c98     33 31 02 F6 | 	mov	local10, local37
02c9c     01 30 06 F1 | 	add	local10, #1
02ca0     03 30 66 F0 | 	shl	local10, #3
02ca4     35 00 00 FF 
02ca8     0C E4 05 F1 | 	add	objptr, ##27148
02cac     F2 30 02 F1 | 	add	local10, objptr
02cb0     81 01 00 FF 
02cb4     CB 29 06 F6 | 	mov	local06, ##@LR__5088
02cb8     18 29 62 FC | 	wrlong	local06, local10
02cbc     35 00 00 FF 
02cc0     0C E4 85 F1 | 	sub	objptr, ##27148
02cc4                 | LR__0165
02cc4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cc4     33 27 02 F6 | 	mov	local05, local37
02cc8     01 26 06 F1 | 	add	local05, #1
02ccc     03 26 66 F0 | 	shl	local05, #3
02cd0     35 00 00 FF 
02cd4     0C E4 05 F1 | 	add	objptr, ##27148
02cd8     F2 26 02 F1 | 	add	local05, objptr
02cdc     13 13 02 FB | 	rdlong	arg01, local05
02ce0     81 01 00 FF 
02ce4     CD 15 06 F6 | 	mov	arg02, ##@LR__5089
02ce8     35 00 00 FF 
02cec     0C E4 85 F1 | 	sub	objptr, ##27148
02cf0     D0 DD B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     2C 00 90 5D |  if_ne	jmp	#LR__0166
02cfc     33 31 02 F6 | 	mov	local10, local37
02d00     01 30 06 F1 | 	add	local10, #1
02d04     03 30 66 F0 | 	shl	local10, #3
02d08     35 00 00 FF 
02d0c     0C E4 05 F1 | 	add	objptr, ##27148
02d10     F2 30 02 F1 | 	add	local10, objptr
02d14     81 01 00 FF 
02d18     D6 29 06 F6 | 	mov	local06, ##@LR__5090
02d1c     18 29 62 FC | 	wrlong	local06, local10
02d20     35 00 00 FF 
02d24     0C E4 85 F1 | 	sub	objptr, ##27148
02d28                 | LR__0166
02d28                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d28     33 27 02 F6 | 	mov	local05, local37
02d2c     01 26 06 F1 | 	add	local05, #1
02d30     03 26 66 F0 | 	shl	local05, #3
02d34     35 00 00 FF 
02d38     0C E4 05 F1 | 	add	objptr, ##27148
02d3c     F2 26 02 F1 | 	add	local05, objptr
02d40     13 13 02 FB | 	rdlong	arg01, local05
02d44     81 01 00 FF 
02d48     D8 15 06 F6 | 	mov	arg02, ##@LR__5091
02d4c     35 00 00 FF 
02d50     0C E4 85 F1 | 	sub	objptr, ##27148
02d54     6C DD B1 FD | 	call	#__system___string_cmp
02d58     00 FA 0D F2 | 	cmp	result1, #0 wz
02d5c     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d60     33 31 02 F6 | 	mov	local10, local37
02d64     01 30 06 F1 | 	add	local10, #1
02d68     03 30 66 F0 | 	shl	local10, #3
02d6c     35 00 00 FF 
02d70     0C E4 05 F1 | 	add	objptr, ##27148
02d74     F2 30 02 F1 | 	add	local10, objptr
02d78     81 01 00 FF 
02d7c     E1 29 06 F6 | 	mov	local06, ##@LR__5092
02d80     18 29 62 FC | 	wrlong	local06, local10
02d84     35 00 00 FF 
02d88     0C E4 85 F1 | 	sub	objptr, ##27148
02d8c                 | LR__0167
02d8c                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02d8c     33 27 02 F6 | 	mov	local05, local37
02d90     01 26 06 F1 | 	add	local05, #1
02d94     03 26 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 26 02 F1 | 	add	local05, objptr
02da4     13 13 02 FB | 	rdlong	arg01, local05
02da8     81 01 00 FF 
02dac     E3 15 06 F6 | 	mov	arg02, ##@LR__5093
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     08 DD B1 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     2C 00 90 5D |  if_ne	jmp	#LR__0168
02dc4     33 31 02 F6 | 	mov	local10, local37
02dc8     01 30 06 F1 | 	add	local10, #1
02dcc     03 30 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 30 02 F1 | 	add	local10, objptr
02ddc     81 01 00 FF 
02de0     EC 29 06 F6 | 	mov	local06, ##@LR__5094
02de4     18 29 62 FC | 	wrlong	local06, local10
02de8     35 00 00 FF 
02dec     0C E4 85 F1 | 	sub	objptr, ##27148
02df0                 | LR__0168
02df0                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02df0     33 27 02 F6 | 	mov	local05, local37
02df4     01 26 06 F1 | 	add	local05, #1
02df8     03 26 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     0C E4 05 F1 | 	add	objptr, ##27148
02e04     F2 26 02 F1 | 	add	local05, objptr
02e08     13 13 02 FB | 	rdlong	arg01, local05
02e0c     81 01 00 FF 
02e10     EE 15 06 F6 | 	mov	arg02, ##@LR__5095
02e14     35 00 00 FF 
02e18     0C E4 85 F1 | 	sub	objptr, ##27148
02e1c     A4 DC B1 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e28     33 31 02 F6 | 	mov	local10, local37
02e2c     01 30 06 F1 | 	add	local10, #1
02e30     03 30 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     0C E4 05 F1 | 	add	objptr, ##27148
02e3c     F2 30 02 F1 | 	add	local10, objptr
02e40     81 01 00 FF 
02e44     F1 29 06 F6 | 	mov	local06, ##@LR__5096
02e48     18 29 62 FC | 	wrlong	local06, local10
02e4c     35 00 00 FF 
02e50     0C E4 85 F1 | 	sub	objptr, ##27148
02e54                 | LR__0169
02e54                 | LR__0170
02e54                 | ' 
02e54                 | ' ' find part types 
02e54                 | ' 
02e54                 | ' for i=0 to k-1
02e54     00 20 06 F6 | 	mov	local02, #0
02e58     1F 71 02 F6 | 	mov	local42, local17
02e5c                 | LR__0171
02e5c     38 21 52 F2 | 	cmps	local02, local42 wc
02e60     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e64     10 31 02 F6 | 	mov	local10, local02
02e68     03 30 66 F0 | 	shl	local10, #3
02e6c     35 00 00 FF 
02e70     0C E4 05 F1 | 	add	objptr, ##27148
02e74     F2 30 02 F1 | 	add	local10, objptr
02e78     10 33 02 F6 | 	mov	local11, local02
02e7c     19 39 02 F6 | 	mov	local14, local11
02e80     1C 37 02 F6 | 	mov	local13, local14
02e84     03 36 66 F0 | 	shl	local13, #3
02e88     F2 36 02 F1 | 	add	local13, objptr
02e8c     1B 13 02 FB | 	rdlong	arg01, local13
02e90     35 00 00 FF 
02e94     0C E4 85 F1 | 	sub	objptr, ##27148
02e98     48 15 B0 FD | 	call	#_isseparator
02e9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ea0     04 30 06 F1 | 	add	local10, #4
02ea4     18 FB 61 FC | 	wrlong	result1, local10
02ea8                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ea8     10 31 02 F6 | 	mov	local10, local02
02eac     03 30 66 F0 | 	shl	local10, #3
02eb0     35 00 00 FF 
02eb4     0C E4 05 F1 | 	add	objptr, ##27148
02eb8     F2 30 02 F1 | 	add	local10, objptr
02ebc     04 30 06 F1 | 	add	local10, #4
02ec0     18 35 02 FB | 	rdlong	local12, local10
02ec4     01 34 56 F2 | 	cmps	local12, #1 wc
02ec8     35 00 00 FF 
02ecc     0C E4 85 F1 | 	sub	objptr, ##27148
02ed0     2C 07 90 3D |  if_ae	jmp	#LR__0182
02ed4     10 31 02 F6 | 	mov	local10, local02
02ed8     03 30 66 F0 | 	shl	local10, #3
02edc     35 00 00 FF 
02ee0     0C E4 05 F1 | 	add	objptr, ##27148
02ee4     F2 30 02 F1 | 	add	local10, objptr
02ee8     10 33 02 F6 | 	mov	local11, local02
02eec     19 39 02 F6 | 	mov	local14, local11
02ef0     1C 37 02 F6 | 	mov	local13, local14
02ef4     03 36 66 F0 | 	shl	local13, #3
02ef8     F2 36 02 F1 | 	add	local13, objptr
02efc     1B 13 02 FB | 	rdlong	arg01, local13
02f00     35 00 00 FF 
02f04     0C E4 85 F1 | 	sub	objptr, ##27148
02f08     24 0D B0 FD | 	call	#_isoperator
02f0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f10     04 30 06 F1 | 	add	local10, #4
02f14     18 FB 61 FC | 	wrlong	result1, local10
02f18                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f18     10 31 02 F6 | 	mov	local10, local02
02f1c     03 30 66 F0 | 	shl	local10, #3
02f20     35 00 00 FF 
02f24     0C E4 05 F1 | 	add	objptr, ##27148
02f28     F2 30 02 F1 | 	add	local10, objptr
02f2c     04 30 06 F1 | 	add	local10, #4
02f30     18 35 02 FB | 	rdlong	local12, local10
02f34     01 34 56 F2 | 	cmps	local12, #1 wc
02f38     35 00 00 FF 
02f3c     0C E4 85 F1 | 	sub	objptr, ##27148
02f40     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f44     10 31 02 F6 | 	mov	local10, local02
02f48     03 30 66 F0 | 	shl	local10, #3
02f4c     35 00 00 FF 
02f50     0C E4 05 F1 | 	add	objptr, ##27148
02f54     F2 30 02 F1 | 	add	local10, objptr
02f58     10 33 02 F6 | 	mov	local11, local02
02f5c     19 39 02 F6 | 	mov	local14, local11
02f60     1C 37 02 F6 | 	mov	local13, local14
02f64     03 36 66 F0 | 	shl	local13, #3
02f68     F2 36 02 F1 | 	add	local13, objptr
02f6c     1B 13 02 FB | 	rdlong	arg01, local13
02f70     35 00 00 FF 
02f74     0C E4 85 F1 | 	sub	objptr, ##27148
02f78                 | ' 
02f78                 | ' select case s
02f78     82 01 00 FF 
02f7c     C6 14 06 F6 | 	mov	arg02, ##@LR__5173
02f80     40 DB B1 FD | 	call	#__system___string_cmp
02f84     00 FA 0D F2 | 	cmp	result1, #0 wz
02f88     1B FA 05 A6 |  if_e	mov	result1, #27
02f8c     00 FA 05 56 |  if_ne	mov	result1, #0
02f90     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f94     04 30 06 F1 | 	add	local10, #4
02f98     18 FB 61 FC | 	wrlong	result1, local10
02f9c                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02f9c     10 31 02 F6 | 	mov	local10, local02
02fa0     03 30 66 F0 | 	shl	local10, #3
02fa4     35 00 00 FF 
02fa8     0C E4 05 F1 | 	add	objptr, ##27148
02fac     F2 30 02 F1 | 	add	local10, objptr
02fb0     04 30 06 F1 | 	add	local10, #4
02fb4     18 35 02 FB | 	rdlong	local12, local10
02fb8     01 34 56 F2 | 	cmps	local12, #1 wc
02fbc     35 00 00 FF 
02fc0     0C E4 85 F1 | 	sub	objptr, ##27148
02fc4     38 06 90 3D |  if_ae	jmp	#LR__0182
02fc8     10 31 02 F6 | 	mov	local10, local02
02fcc     03 30 66 F0 | 	shl	local10, #3
02fd0     35 00 00 FF 
02fd4     0C E4 05 F1 | 	add	objptr, ##27148
02fd8     F2 30 02 F1 | 	add	local10, objptr
02fdc     10 33 02 F6 | 	mov	local11, local02
02fe0     19 39 02 F6 | 	mov	local14, local11
02fe4     1C 37 02 F6 | 	mov	local13, local14
02fe8     03 36 66 F0 | 	shl	local13, #3
02fec     F2 36 02 F1 | 	add	local13, objptr
02ff0     1B 13 02 FB | 	rdlong	arg01, local13
02ff4     35 00 00 FF 
02ff8     0C E4 85 F1 | 	sub	objptr, ##27148
02ffc     E4 15 B0 FD | 	call	#_iscommand
03000     FD FA E1 F8 | 	getbyte	result1, result1, #0
03004     04 30 06 F1 | 	add	local10, #4
03008     18 FB 61 FC | 	wrlong	result1, local10
0300c                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0300c     10 31 02 F6 | 	mov	local10, local02
03010     03 30 66 F0 | 	shl	local10, #3
03014     35 00 00 FF 
03018     0C E4 05 F1 | 	add	objptr, ##27148
0301c     F2 30 02 F1 | 	add	local10, objptr
03020     04 30 06 F1 | 	add	local10, #4
03024     18 35 02 FB | 	rdlong	local12, local10
03028     01 34 56 F2 | 	cmps	local12, #1 wc
0302c     35 00 00 FF 
03030     0C E4 85 F1 | 	sub	objptr, ##27148
03034     C8 05 90 3D |  if_ae	jmp	#LR__0182
03038     10 31 02 F6 | 	mov	local10, local02
0303c     03 30 66 F0 | 	shl	local10, #3
03040     35 00 00 FF 
03044     0C E4 05 F1 | 	add	objptr, ##27148
03048     F2 30 02 F1 | 	add	local10, objptr
0304c     10 33 02 F6 | 	mov	local11, local02
03050     19 39 02 F6 | 	mov	local14, local11
03054     1C 37 02 F6 | 	mov	local13, local14
03058     03 36 66 F0 | 	shl	local13, #3
0305c     F2 54 02 F6 | 	mov	local28, objptr
03060     F2 36 02 F1 | 	add	local13, objptr
03064     1B 13 02 FB | 	rdlong	arg01, local13
03068     35 00 00 FF 
0306c     0C E4 85 F1 | 	sub	objptr, ##27148
03070     B0 24 B0 FD | 	call	#_isfunction
03074     FD FA E1 F8 | 	getbyte	result1, result1, #0
03078     04 30 06 F1 | 	add	local10, #4
0307c     18 FB 61 FC | 	wrlong	result1, local10
03080                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03080     10 31 02 F6 | 	mov	local10, local02
03084     03 30 66 F0 | 	shl	local10, #3
03088     35 00 00 FF 
0308c     0C E4 05 F1 | 	add	objptr, ##27148
03090     F2 30 02 F1 | 	add	local10, objptr
03094     04 30 06 F1 | 	add	local10, #4
03098     18 35 02 FB | 	rdlong	local12, local10
0309c     01 34 56 F2 | 	cmps	local12, #1 wc
030a0     35 00 00 FF 
030a4     0C E4 85 F1 | 	sub	objptr, ##27148
030a8     54 05 90 3D |  if_ae	jmp	#LR__0182
030ac     10 31 02 F6 | 	mov	local10, local02
030b0     03 30 66 F0 | 	shl	local10, #3
030b4     35 00 00 FF 
030b8     0C E4 05 F1 | 	add	objptr, ##27148
030bc     F2 30 02 F1 | 	add	local10, objptr
030c0     10 33 02 F6 | 	mov	local11, local02
030c4     19 39 02 F6 | 	mov	local14, local11
030c8     03 38 66 F0 | 	shl	local14, #3
030cc     F2 36 02 F6 | 	mov	local13, objptr
030d0     F2 38 02 F1 | 	add	local14, objptr
030d4     1C 13 02 FB | 	rdlong	arg01, local14
030d8     35 00 00 FF 
030dc     0C E4 85 F1 | 	sub	objptr, ##27148
030e0     94 0F B0 FD | 	call	#_isnotename
030e4     04 30 06 F1 | 	add	local10, #4
030e8     18 FB 61 FC | 	wrlong	result1, local10
030ec                 | ' lparts(i).token=isnotename(lparts(i).part$) 
030ec                 | ' if lparts(i).token>0 then 
030ec     10 31 02 F6 | 	mov	local10, local02
030f0     03 30 66 F0 | 	shl	local10, #3
030f4     35 00 00 FF 
030f8     0C E4 05 F1 | 	add	objptr, ##27148
030fc     F2 30 02 F1 | 	add	local10, objptr
03100     04 30 06 F1 | 	add	local10, #4
03104     18 29 02 FB | 	rdlong	local06, local10
03108     01 28 56 F2 | 	cmps	local06, #1 wc
0310c     35 00 00 FF 
03110     0C E4 85 F1 | 	sub	objptr, ##27148
03114     8C 00 90 CD |  if_b	jmp	#LR__0172
03118     10 27 02 F6 | 	mov	local05, local02
0311c     03 26 66 F0 | 	shl	local05, #3
03120     35 00 00 FF 
03124     0C E4 05 F1 | 	add	objptr, ##27148
03128     F2 26 02 F1 | 	add	local05, objptr
0312c     04 26 06 F1 | 	add	local05, #4
03130     13 35 02 FB | 	rdlong	local12, local05
03134     1A 13 02 F6 | 	mov	arg01, local12
03138     35 00 00 FF 
0313c     0C E4 85 F1 | 	sub	objptr, ##27148
03140     F8 9F B1 FD | 	call	#_getnoteval
03144     FD 72 02 F6 | 	mov	local43, result1
03148     10 31 02 F6 | 	mov	local10, local02
0314c     03 30 66 F0 | 	shl	local10, #3
03150     35 00 00 FF 
03154     0C E4 05 F1 | 	add	objptr, ##27148
03158     F2 30 02 F1 | 	add	local10, objptr
0315c     39 13 02 F6 | 	mov	arg01, local43
03160     35 00 00 FF 
03164     0C E4 85 F1 | 	sub	objptr, ##27148
03168     A4 FB B1 FD | 	call	#__system__str_S
0316c     18 FB 61 FC | 	wrlong	result1, local10
03170     10 25 02 F6 | 	mov	local04, local02
03174     12 23 02 F6 | 	mov	local03, local04
03178     11 31 02 F6 | 	mov	local10, local03
0317c     03 30 66 F0 | 	shl	local10, #3
03180     35 00 00 FF 
03184     0C E4 05 F1 | 	add	objptr, ##27148
03188     F2 30 02 F1 | 	add	local10, objptr
0318c     04 30 06 F1 | 	add	local10, #4
03190     01 00 80 FF 
03194     18 05 68 FC | 	wrlong	##514, local10
03198     35 00 00 FF 
0319c     0C E4 85 F1 | 	sub	objptr, ##27148
031a0     5C 04 90 FD | 	jmp	#LR__0182
031a4                 | LR__0172
031a4     10 31 02 F6 | 	mov	local10, local02
031a8     03 30 66 F0 | 	shl	local10, #3
031ac     35 00 00 FF 
031b0     0C E4 05 F1 | 	add	objptr, ##27148
031b4     F2 30 02 F1 | 	add	local10, objptr
031b8     10 39 02 F6 | 	mov	local14, local02
031bc     03 38 66 F0 | 	shl	local14, #3
031c0     F2 38 02 F1 | 	add	local14, objptr
031c4     1C 13 02 FB | 	rdlong	arg01, local14
031c8     35 00 00 FF 
031cc     0C E4 85 F1 | 	sub	objptr, ##27148
031d0     3C 0D B0 FD | 	call	#_ischannel
031d4     04 30 06 F1 | 	add	local10, #4
031d8     18 FB 61 FC | 	wrlong	result1, local10
031dc                 | ' 
031dc                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031dc                 | ' 
031dc                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031dc     10 31 02 F6 | 	mov	local10, local02
031e0     03 30 66 F0 | 	shl	local10, #3
031e4     35 00 00 FF 
031e8     0C E4 05 F1 | 	add	objptr, ##27148
031ec     F2 30 02 F1 | 	add	local10, objptr
031f0     04 30 06 F1 | 	add	local10, #4
031f4     18 29 02 FB | 	rdlong	local06, local10
031f8     01 28 56 F2 | 	cmps	local06, #1 wc
031fc     35 00 00 FF 
03200     0C E4 85 F1 | 	sub	objptr, ##27148
03204     74 00 90 CD |  if_b	jmp	#LR__0173
03208     10 31 02 F6 | 	mov	local10, local02
0320c     03 30 66 F0 | 	shl	local10, #3
03210     35 00 00 FF 
03214     0C E4 05 F1 | 	add	objptr, ##27148
03218     F2 30 02 F1 | 	add	local10, objptr
0321c     10 33 02 F6 | 	mov	local11, local02
03220     19 39 02 F6 | 	mov	local14, local11
03224     03 38 66 F0 | 	shl	local14, #3
03228     F2 36 02 F6 | 	mov	local13, objptr
0322c     F2 38 02 F1 | 	add	local14, objptr
03230     1C 13 02 FB | 	rdlong	arg01, local14
03234     01 34 06 F6 | 	mov	local12, #1
03238     01 14 06 F6 | 	mov	arg02, #1
0323c     35 00 00 FF 
03240     0C E4 85 F1 | 	sub	objptr, ##27148
03244     58 F9 B1 FD | 	call	#__system__Right_S
03248     18 FB 61 FC | 	wrlong	result1, local10
0324c     10 25 02 F6 | 	mov	local04, local02
03250     12 23 02 F6 | 	mov	local03, local04
03254     11 31 02 F6 | 	mov	local10, local03
03258     03 30 66 F0 | 	shl	local10, #3
0325c     35 00 00 FF 
03260     0C E4 05 F1 | 	add	objptr, ##27148
03264     F2 30 02 F1 | 	add	local10, objptr
03268     04 30 06 F1 | 	add	local10, #4
0326c     18 59 68 FC | 	wrlong	#44, local10
03270     35 00 00 FF 
03274     0C E4 85 F1 | 	sub	objptr, ##27148
03278     84 03 90 FD | 	jmp	#LR__0182
0327c                 | LR__0173
0327c     10 31 02 F6 | 	mov	local10, local02
03280     03 30 66 F0 | 	shl	local10, #3
03284     35 00 00 FF 
03288     0C E4 05 F1 | 	add	objptr, ##27148
0328c     F2 30 02 F1 | 	add	local10, objptr
03290     10 33 02 F6 | 	mov	local11, local02
03294     19 39 02 F6 | 	mov	local14, local11
03298     03 38 66 F0 | 	shl	local14, #3
0329c     F2 36 02 F6 | 	mov	local13, objptr
032a0     F2 38 02 F1 | 	add	local14, objptr
032a4     1C 13 02 FB | 	rdlong	arg01, local14
032a8     35 00 00 FF 
032ac     0C E4 85 F1 | 	sub	objptr, ##27148
032b0     44 0D B0 FD | 	call	#_isconstant
032b4     04 30 06 F1 | 	add	local10, #4
032b8     18 FB 61 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032bc     10 31 02 F6 | 	mov	local10, local02
032c0     03 30 66 F0 | 	shl	local10, #3
032c4     35 00 00 FF 
032c8     0C E4 05 F1 | 	add	objptr, ##27148
032cc     F2 30 02 F1 | 	add	local10, objptr
032d0     04 30 06 F1 | 	add	local10, #4
032d4     18 35 02 FB | 	rdlong	local12, local10
032d8     01 34 56 F2 | 	cmps	local12, #1 wc
032dc     35 00 00 FF 
032e0     0C E4 85 F1 | 	sub	objptr, ##27148
032e4     94 00 90 CD |  if_b	jmp	#LR__0174
032e8     10 31 02 F6 | 	mov	local10, local02
032ec     03 30 66 F0 | 	shl	local10, #3
032f0     35 00 00 FF 
032f4     0C E4 05 F1 | 	add	objptr, ##27148
032f8     F2 30 02 F1 | 	add	local10, objptr
032fc     10 35 02 F6 | 	mov	local12, local02
03300     1A 33 02 F6 | 	mov	local11, local12
03304     19 39 02 F6 | 	mov	local14, local11
03308     03 38 66 F0 | 	shl	local14, #3
0330c     F2 36 02 F6 | 	mov	local13, objptr
03310     F2 38 02 F1 | 	add	local14, objptr
03314     04 38 06 F1 | 	add	local14, #4
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     04 38 86 F1 | 	sub	local14, #4
03320     35 00 00 FF 
03324     0C E4 85 F1 | 	sub	objptr, ##27148
03328     09 13 52 F6 | 	abs	arg01, arg01 wc
0332c     1F 74 C6 C9 |  if_b	decod	local44, #31
03330     00 74 06 36 |  if_ae	mov	local44, #0
03334     14 FF B1 FD | 	call	#__system___float_fromuns
03338     3A FB 61 F5 | 	xor	result1, local44
0333c     FD 12 02 F6 | 	mov	arg01, result1
03340     CC F9 B1 FD | 	call	#__system__str_S
03344     18 FB 61 FC | 	wrlong	result1, local10
03348     10 25 02 F6 | 	mov	local04, local02
0334c     12 23 02 F6 | 	mov	local03, local04
03350     11 31 02 F6 | 	mov	local10, local03
03354     03 30 66 F0 | 	shl	local10, #3
03358     35 00 00 FF 
0335c     0C E4 05 F1 | 	add	objptr, ##27148
03360     F2 30 02 F1 | 	add	local10, objptr
03364     04 30 06 F1 | 	add	local10, #4
03368     01 00 80 FF 
0336c     18 03 68 FC | 	wrlong	##513, local10
03370     35 00 00 FF 
03374     0C E4 85 F1 | 	sub	objptr, ##27148
03378     84 02 90 FD | 	jmp	#LR__0182
0337c                 | LR__0174
0337c     10 27 02 F6 | 	mov	local05, local02
03380     03 26 66 F0 | 	shl	local05, #3
03384     35 00 00 FF 
03388     0C E4 05 F1 | 	add	objptr, ##27148
0338c     F2 26 02 F1 | 	add	local05, objptr
03390     13 13 02 FB | 	rdlong	arg01, local05
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     98 29 B0 FD | 	call	#_isnum
033a0     FD 76 02 F6 | 	mov	local45, result1
033a4     10 27 02 F6 | 	mov	local05, local02
033a8     03 26 66 F0 | 	shl	local05, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 26 02 F1 | 	add	local05, objptr
033b8     13 13 02 FB | 	rdlong	arg01, local05
033bc     35 00 00 FF 
033c0     0C E4 85 F1 | 	sub	objptr, ##27148
033c4     5C 2D B0 FD | 	call	#_isint
033c8     FD 78 02 F6 | 	mov	local46, result1
033cc     10 27 02 F6 | 	mov	local05, local02
033d0     03 26 66 F0 | 	shl	local05, #3
033d4     35 00 00 FF 
033d8     0C E4 05 F1 | 	add	objptr, ##27148
033dc     F2 26 02 F1 | 	add	local05, objptr
033e0     13 13 02 FB | 	rdlong	arg01, local05
033e4     35 00 00 FF 
033e8     0C E4 85 F1 | 	sub	objptr, ##27148
033ec     D8 2F B0 FD | 	call	#_isdec
033f0     FD 7A 02 F6 | 	mov	local47, result1
033f4                 | ' 
033f4                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
033f4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
033f4     00 76 0E F2 | 	cmp	local45, #0 wz
033f8     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
033fc     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03400     34 00 90 AD |  if_e	jmp	#LR__0175
03404     10 25 02 F6 | 	mov	local04, local02
03408     12 23 02 F6 | 	mov	local03, local04
0340c     11 31 02 F6 | 	mov	local10, local03
03410     03 30 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 30 02 F1 | 	add	local10, objptr
03420     04 30 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     18 01 68 FC | 	wrlong	##512, local10
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     C8 01 90 FD | 	jmp	#LR__0182
03438                 | LR__0175
03438                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03438     00 76 0E F2 | 	cmp	local45, #0 wz
0343c     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03440     3D 25 22 56 |  if_ne	not	local04, local47
03444     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03448     34 00 90 AD |  if_e	jmp	#LR__0176
0344c     10 25 02 F6 | 	mov	local04, local02
03450     12 23 02 F6 | 	mov	local03, local04
03454     11 31 02 F6 | 	mov	local10, local03
03458     03 30 66 F0 | 	shl	local10, #3
0345c     35 00 00 FF 
03460     0C E4 05 F1 | 	add	objptr, ##27148
03464     F2 30 02 F1 | 	add	local10, objptr
03468     04 30 06 F1 | 	add	local10, #4
0346c     01 00 80 FF 
03470     18 03 68 FC | 	wrlong	##513, local10
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     80 01 90 FD | 	jmp	#LR__0182
03480                 | LR__0176
03480                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03480     00 76 0E F2 | 	cmp	local45, #0 wz
03484     3C 25 22 56 |  if_ne	not	local04, local46
03488     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
0348c     3D 23 22 56 |  if_ne	not	local03, local47
03490     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
03494     34 00 90 AD |  if_e	jmp	#LR__0177
03498     10 25 02 F6 | 	mov	local04, local02
0349c     12 23 02 F6 | 	mov	local03, local04
034a0     11 31 02 F6 | 	mov	local10, local03
034a4     03 30 66 F0 | 	shl	local10, #3
034a8     35 00 00 FF 
034ac     0C E4 05 F1 | 	add	objptr, ##27148
034b0     F2 30 02 F1 | 	add	local10, objptr
034b4     04 30 06 F1 | 	add	local10, #4
034b8     01 00 80 FF 
034bc     18 05 68 FC | 	wrlong	##514, local10
034c0     35 00 00 FF 
034c4     0C E4 85 F1 | 	sub	objptr, ##27148
034c8     34 01 90 FD | 	jmp	#LR__0182
034cc                 | LR__0177
034cc                 | ' 
034cc                 | ' if isstring(lparts(i).part$) then 
034cc     10 27 02 F6 | 	mov	local05, local02
034d0     03 26 66 F0 | 	shl	local05, #3
034d4     35 00 00 FF 
034d8     0C E4 05 F1 | 	add	objptr, ##27148
034dc     F2 26 02 F1 | 	add	local05, objptr
034e0     13 13 02 FB | 	rdlong	arg01, local05
034e4     35 00 00 FF 
034e8     0C E4 85 F1 | 	sub	objptr, ##27148
034ec     98 2F B0 FD | 	call	#_isstring
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     A8 00 90 AD |  if_e	jmp	#LR__0180
034f8     10 31 02 F6 | 	mov	local10, local02
034fc     03 30 66 F0 | 	shl	local10, #3
03500     35 00 00 FF 
03504     0C E4 05 F1 | 	add	objptr, ##27148
03508     F2 30 02 F1 | 	add	local10, objptr
0350c     04 30 06 F1 | 	add	local10, #4
03510     01 00 80 FF 
03514     18 07 68 FC | 	wrlong	##515, local10
03518     10 25 02 F6 | 	mov	local04, local02
0351c     12 23 02 F6 | 	mov	local03, local04
03520     11 31 02 F6 | 	mov	local10, local03
03524     03 30 66 F0 | 	shl	local10, #3
03528     F2 30 02 F1 | 	add	local10, objptr
0352c     10 39 02 F6 | 	mov	local14, local02
03530     03 38 66 F0 | 	shl	local14, #3
03534     F2 38 02 F1 | 	add	local14, objptr
03538     1C 29 02 FB | 	rdlong	local06, local14
0353c     02 34 06 F6 | 	mov	local12, #2
03540     10 49 02 F6 | 	mov	local22, local02
03544     24 4B 02 F6 | 	mov	local23, local22
03548     03 4A 66 F0 | 	shl	local23, #3
0354c     F2 4C 02 F6 | 	mov	local24, objptr
03550     F2 4A 02 F1 | 	add	local23, objptr
03554     25 13 02 FB | 	rdlong	arg01, local23
03558     35 00 00 FF 
0355c     0C E4 85 F1 | 	sub	objptr, ##27148
03560     09 2B 02 F6 | 	mov	local07, arg01
03564     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03568                 | LR__0178
03568     15 FB C9 FA | 	rdbyte	result1, local07 wz
0356c     01 2A 06 51 |  if_ne	add	local07, #1
03570     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
03574                 | LR__0179
03574     09 2B 82 F1 | 	sub	local07, arg01
03578     15 37 02 F6 | 	mov	local13, local07
0357c     1B 39 02 F6 | 	mov	local14, local13
03580     02 38 86 F1 | 	sub	local14, #2
03584     1C 33 02 F6 | 	mov	local11, local14
03588     14 13 02 F6 | 	mov	arg01, local06
0358c     1A 15 02 F6 | 	mov	arg02, local12
03590     19 17 02 F6 | 	mov	arg03, local11
03594     98 F6 B1 FD | 	call	#__system__Mid_S
03598     18 FB 61 FC | 	wrlong	result1, local10
0359c     60 00 90 FD | 	jmp	#LR__0182
035a0                 | LR__0180
035a0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035a0     10 23 02 F6 | 	mov	local03, local02
035a4     11 27 02 F6 | 	mov	local05, local03
035a8     03 26 66 F0 | 	shl	local05, #3
035ac     35 00 00 FF 
035b0     0C E4 05 F1 | 	add	objptr, ##27148
035b4     F2 26 02 F1 | 	add	local05, objptr
035b8     13 13 02 FB | 	rdlong	arg01, local05
035bc     35 00 00 FF 
035c0     0C E4 85 F1 | 	sub	objptr, ##27148
035c4     FC 24 B0 FD | 	call	#_isname
035c8     FD 24 0A F6 | 	mov	local04, result1 wz
035cc     30 00 90 AD |  if_e	jmp	#LR__0181
035d0     10 25 02 F6 | 	mov	local04, local02
035d4     12 23 02 F6 | 	mov	local03, local04
035d8     11 31 02 F6 | 	mov	local10, local03
035dc     03 30 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 30 02 F1 | 	add	local10, objptr
035ec     04 30 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     18 09 68 FC | 	wrlong	##516, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600                 | LR__0181
03600                 | LR__0182
03600     01 20 06 F1 | 	add	local02, #1
03604     54 F8 9F FD | 	jmp	#LR__0171
03608                 | LR__0183
03608     1F 31 02 F6 | 	mov	local10, local17
0360c     03 30 66 F0 | 	shl	local10, #3
03610     35 00 00 FF 
03614     0C E4 05 F1 | 	add	objptr, ##27148
03618     F2 30 02 F1 | 	add	local10, objptr
0361c     04 30 06 F1 | 	add	local10, #4
03620     18 FD 6B FC | 	wrlong	#510, local10
03624     1F 31 02 F6 | 	mov	local10, local17
03628     03 30 66 F0 | 	shl	local10, #3
0362c     F2 26 02 F6 | 	mov	local05, objptr
03630     F2 30 02 F1 | 	add	local10, objptr
03634     81 01 00 FF 
03638     F3 29 06 F6 | 	mov	local06, ##@LR__5097
0363c     18 29 62 FC | 	wrlong	local06, local10
03640     10 00 00 FF 
03644     54 E4 05 F1 | 	add	objptr, ##8276
03648     F2 3E 62 FC | 	wrlong	local17, objptr
0364c     45 00 00 FF 
03650     60 E4 85 F1 | 	sub	objptr, ##35424
03654                 | ' 
03654                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03654                 | ' 
03654                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03654                 | '  
03654                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03654     81 01 00 FF 
03658     F4 31 06 F6 | 	mov	local10, ##@LR__5098
0365c     37 13 02 F6 | 	mov	arg01, local41
03660     18 15 02 F6 | 	mov	arg02, local10
03664     5C D4 B1 FD | 	call	#__system___string_cmp
03668     00 FA 0D F2 | 	cmp	result1, #0 wz
0366c     FC 00 90 AD |  if_e	jmp	#LR__0184
03670     81 01 00 FF 
03674     F9 27 06 F6 | 	mov	local05, ##@LR__5099
03678     13 31 02 F6 | 	mov	local10, local05
0367c     37 13 02 F6 | 	mov	arg01, local41
03680     18 15 02 F6 | 	mov	arg02, local10
03684     3C D4 B1 FD | 	call	#__system___string_cmp
03688     00 FA 0D F2 | 	cmp	result1, #0 wz
0368c     DC 00 90 AD |  if_e	jmp	#LR__0184
03690     81 01 00 FF 
03694     FE 29 06 F6 | 	mov	local06, ##@LR__5100
03698     14 27 02 F6 | 	mov	local05, local06
0369c     37 13 02 F6 | 	mov	arg01, local41
036a0     13 15 02 F6 | 	mov	arg02, local05
036a4     1C D4 B1 FD | 	call	#__system___string_cmp
036a8     FD 30 0A F6 | 	mov	local10, result1 wz
036ac     BC 00 90 AD |  if_e	jmp	#LR__0184
036b0     82 01 00 FF 
036b4     03 34 06 F6 | 	mov	local12, ##@LR__5101
036b8     1A 29 02 F6 | 	mov	local06, local12
036bc     37 13 02 F6 | 	mov	arg01, local41
036c0     14 15 02 F6 | 	mov	arg02, local06
036c4     FC D3 B1 FD | 	call	#__system___string_cmp
036c8     FD 26 0A F6 | 	mov	local05, result1 wz
036cc     9C 00 90 AD |  if_e	jmp	#LR__0184
036d0     82 01 00 FF 
036d4     07 32 06 F6 | 	mov	local11, ##@LR__5102
036d8     19 35 02 F6 | 	mov	local12, local11
036dc     37 13 02 F6 | 	mov	arg01, local41
036e0     1A 15 02 F6 | 	mov	arg02, local12
036e4     DC D3 B1 FD | 	call	#__system___string_cmp
036e8     FD 28 0A F6 | 	mov	local06, result1 wz
036ec     7C 00 90 AD |  if_e	jmp	#LR__0184
036f0     82 01 00 FF 
036f4     0B 38 06 F6 | 	mov	local14, ##@LR__5103
036f8     1C 33 02 F6 | 	mov	local11, local14
036fc     37 13 02 F6 | 	mov	arg01, local41
03700     19 15 02 F6 | 	mov	arg02, local11
03704     BC D3 B1 FD | 	call	#__system___string_cmp
03708     FD 34 0A F6 | 	mov	local12, result1 wz
0370c     5C 00 90 AD |  if_e	jmp	#LR__0184
03710     82 01 00 FF 
03714     0E 36 06 F6 | 	mov	local13, ##@LR__5104
03718     1B 39 02 F6 | 	mov	local14, local13
0371c     37 13 02 F6 | 	mov	arg01, local41
03720     1C 15 02 F6 | 	mov	arg02, local14
03724     9C D3 B1 FD | 	call	#__system___string_cmp
03728     FD 32 0A F6 | 	mov	local11, result1 wz
0372c     3C 00 90 AD |  if_e	jmp	#LR__0184
03730     82 01 00 FF 
03734     12 36 06 F6 | 	mov	local13, ##@LR__5105
03738     37 13 02 F6 | 	mov	arg01, local41
0373c     1B 15 02 F6 | 	mov	arg02, local13
03740     80 D3 B1 FD | 	call	#__system___string_cmp
03744     FD 38 0A F6 | 	mov	local14, result1 wz
03748     20 00 90 AD |  if_e	jmp	#LR__0184
0374c     82 01 00 FF 
03750     18 48 06 F6 | 	mov	local22, ##@LR__5106
03754     24 55 02 F6 | 	mov	local28, local22
03758     37 13 02 F6 | 	mov	arg01, local41
0375c     2A 15 02 F6 | 	mov	arg02, local28
03760     60 D3 B1 FD | 	call	#__system___string_cmp
03764     FD 36 0A F6 | 	mov	local13, result1 wz
03768     84 00 90 5D |  if_ne	jmp	#LR__0185
0376c                 | LR__0184
0376c     33 55 02 F6 | 	mov	local28, local37
03770     01 54 06 F1 | 	add	local28, #1
03774     2A 49 02 F6 | 	mov	local22, local28
03778     24 4B 02 F6 | 	mov	local23, local22
0377c     03 4A 66 F0 | 	shl	local23, #3
03780     35 00 00 FF 
03784     0C E4 05 F1 | 	add	objptr, ##27148
03788     F2 4C 02 F6 | 	mov	local24, objptr
0378c     F2 4A 02 F1 | 	add	local23, objptr
03790     04 4A 06 F1 | 	add	local23, #4
03794     25 59 02 FB | 	rdlong	local30, local23
03798     04 4A 86 F1 | 	sub	local23, #4
0379c     2C 57 02 F6 | 	mov	local29, local30
037a0     01 00 00 FF 
037a4     04 56 0E F2 | 	cmp	local29, ##516 wz
037a8     35 00 00 FF 
037ac     0C E4 85 F1 | 	sub	objptr, ##27148
037b0     3C 00 90 5D |  if_ne	jmp	#LR__0185
037b4     33 31 02 F6 | 	mov	local10, local37
037b8     01 30 06 F1 | 	add	local10, #1
037bc     03 30 66 F0 | 	shl	local10, #3
037c0     35 00 00 FF 
037c4     0C E4 05 F1 | 	add	objptr, ##27148
037c8     F2 26 02 F6 | 	mov	local05, objptr
037cc     F2 30 02 F1 | 	add	local10, objptr
037d0     01 00 00 FF 
037d4     03 28 06 F6 | 	mov	local06, ##515
037d8     04 30 06 F1 | 	add	local10, #4
037dc     01 00 80 FF 
037e0     18 07 68 FC | 	wrlong	##515, local10
037e4     04 30 86 F1 | 	sub	local10, #4
037e8     35 00 00 FF 
037ec     0C E4 85 F1 | 	sub	objptr, ##27148
037f0                 | LR__0185
037f0                 | ' 
037f0                 | ' ' determine a type of the line and compile it
037f0                 | ' 
037f0                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
037f0     35 00 00 FF 
037f4     0C E4 05 F1 | 	add	objptr, ##27148
037f8     F2 12 02 FB | 	rdlong	arg01, objptr
037fc     35 00 00 FF 
03800     0C E4 85 F1 | 	sub	objptr, ##27148
03804     C0 2B B0 FD | 	call	#_isdec
03808     00 FA 0D F2 | 	cmp	result1, #0 wz
0380c     30 00 90 AD |  if_e	jmp	#LR__0186
03810     35 00 00 FF 
03814     0C E4 05 F1 | 	add	objptr, ##27148
03818     F2 12 02 FB | 	rdlong	arg01, objptr
0381c     35 00 00 FF 
03820     0C E4 85 F1 | 	sub	objptr, ##27148
03824     00 14 06 F6 | 	mov	arg02, #0
03828     9C 04 B2 FD | 	call	#__system____builtin_atoi
0382c     51 00 00 FF 
03830     C0 E5 05 F1 | 	add	objptr, ##41920
03834     F2 FA 61 FC | 	wrlong	result1, objptr
03838     51 00 00 FF 
0383c     C0 E5 85 F1 | 	sub	objptr, ##41920
03840                 | LR__0186
03840                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03840     51 00 00 FF 
03844     C0 E5 05 F1 | 	add	objptr, ##41920
03848     F2 24 02 FB | 	rdlong	local04, objptr
0384c     51 00 00 FF 
03850     C0 E5 85 F1 | 	sub	objptr, ##41920
03854     01 24 16 F2 | 	cmp	local04, #1 wc
03858     40 00 90 CD |  if_b	jmp	#LR__0187
0385c     01 3E 0E F2 | 	cmp	local17, #1 wz
03860     37 00 00 AF 
03864     24 E4 05 A1 |  if_e	add	objptr, ##28196
03868     F2 26 02 AB |  if_e	rdlong	local05, objptr
0386c     37 00 00 AF 
03870     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03874     13 31 02 A6 |  if_e	mov	local10, local05
03878     03 30 0E A2 |  if_e	cmp	local10, #3 wz
0387c     1C 00 90 5D |  if_ne	jmp	#LR__0187
03880     51 00 00 FF 
03884     C0 E5 05 F1 | 	add	objptr, ##41920
03888     F2 12 02 FB | 	rdlong	arg01, objptr
0388c     51 00 00 FF 
03890     C0 E5 85 F1 | 	sub	objptr, ##41920
03894     54 2C B0 FD | 	call	#_deleteline
03898     48 03 90 FD | 	jmp	#LR__0195
0389c                 | LR__0187
0389c                 | ' 
0389c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
0389c     37 00 00 FF 
038a0     24 E4 05 F1 | 	add	objptr, ##28196
038a4     F2 24 0A FB | 	rdlong	local04, objptr wz
038a8     37 00 00 FF 
038ac     24 E4 85 F1 | 	sub	objptr, ##28196
038b0     37 00 00 5F 
038b4     24 E4 05 51 |  if_ne	add	objptr, ##28196
038b8     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038bc     37 00 00 5F 
038c0     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038c4     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038c8     AC 00 90 5D |  if_ne	jmp	#LR__0189
038cc     35 00 00 FF 
038d0     20 E4 05 F1 | 	add	objptr, ##27168
038d4     F2 34 02 FB | 	rdlong	local12, objptr
038d8     35 00 00 FF 
038dc     20 E4 85 F1 | 	sub	objptr, ##27168
038e0     1B 34 0E F2 | 	cmp	local12, #27 wz
038e4     90 00 90 AD |  if_e	jmp	#LR__0189
038e8     51 00 00 FF 
038ec     C0 E5 05 F1 | 	add	objptr, ##41920
038f0     F2 12 02 FB | 	rdlong	arg01, objptr
038f4     1A 00 00 FF 
038f8     9C E5 85 F1 | 	sub	objptr, ##13724
038fc     F2 16 02 FB | 	rdlong	arg03, objptr
03900     37 00 00 FF 
03904     24 E4 85 F1 | 	sub	objptr, ##28196
03908     00 14 06 F6 | 	mov	arg02, #0
0390c     20 41 B0 FD | 	call	#_compile
03910     FD 1E 0A F6 | 	mov	local01, result1 wz
03914                 | '   err=compile(linenum,0,cont) 
03914                 | '   if err<>0 then printerror(err): goto 104
03914     0C 00 90 AD |  if_e	jmp	#LR__0188
03918     0F 13 02 F6 | 	mov	arg01, local01
0391c     E4 9B B1 FD | 	call	#_printerror
03920     C0 02 90 FD | 	jmp	#LR__0195
03924                 | LR__0188
03924                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03924     51 00 00 FF 
03928     F4 E5 05 F1 | 	add	objptr, ##41972
0392c     F2 12 02 FB | 	rdlong	arg01, objptr
03930     51 00 00 FF 
03934     F4 E5 85 F1 | 	sub	objptr, ##41972
03938     82 01 00 FF 
0393c     1B 14 06 F6 | 	mov	arg02, ##@LR__5107
03940     80 D1 B1 FD | 	call	#__system___string_cmp
03944     00 FA 0D F2 | 	cmp	result1, #0 wz
03948     98 02 90 AD |  if_e	jmp	#LR__0195
0394c     51 00 00 FF 
03950     F4 E5 05 F1 | 	add	objptr, ##41972
03954     F2 24 02 FB | 	rdlong	local04, objptr
03958     1A 00 00 FF 
0395c     D8 E5 85 F1 | 	sub	objptr, ##13784
03960     F2 24 62 FC | 	wrlong	local04, objptr
03964     08 E4 05 F1 | 	add	objptr, #8
03968     F2 08 68 FC | 	wrlong	#4, objptr
0396c     37 00 00 FF 
03970     24 E4 85 F1 | 	sub	objptr, ##28196
03974     54 DD 9F FD | 	jmp	#LR__0070
03978                 | LR__0189
03978                 | '       							
03978                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03978     37 00 00 FF 
0397c     24 E4 05 F1 | 	add	objptr, ##28196
03980     F2 24 02 FB | 	rdlong	local04, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     01 24 0E F2 | 	cmp	local04, #1 wz
03990     37 00 00 5F 
03994     24 E4 05 51 |  if_ne	add	objptr, ##28196
03998     F2 30 02 5B |  if_ne	rdlong	local10, objptr
0399c     37 00 00 5F 
039a0     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039a4     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039a8     AC 00 90 5D |  if_ne	jmp	#LR__0191
039ac     35 00 00 FF 
039b0     18 E4 05 F1 | 	add	objptr, ##27160
039b4     F2 34 02 FB | 	rdlong	local12, objptr
039b8     35 00 00 FF 
039bc     18 E4 85 F1 | 	sub	objptr, ##27160
039c0     1B 34 0E F2 | 	cmp	local12, #27 wz
039c4     90 00 90 AD |  if_e	jmp	#LR__0191
039c8     51 00 00 FF 
039cc     C0 E5 05 F1 | 	add	objptr, ##41920
039d0     F2 12 02 FB | 	rdlong	arg01, objptr
039d4     1A 00 00 FF 
039d8     9C E5 85 F1 | 	sub	objptr, ##13724
039dc     F2 16 02 FB | 	rdlong	arg03, objptr
039e0     37 00 00 FF 
039e4     24 E4 85 F1 | 	sub	objptr, ##28196
039e8     00 14 06 F6 | 	mov	arg02, #0
039ec     40 40 B0 FD | 	call	#_compile
039f0     FD 1E 0A F6 | 	mov	local01, result1 wz
039f4                 | '   err=compile(linenum,0,cont) 
039f4                 | '   if err<>0 then printerror(err): goto 104
039f4     0C 00 90 AD |  if_e	jmp	#LR__0190
039f8     0F 13 02 F6 | 	mov	arg01, local01
039fc     04 9B B1 FD | 	call	#_printerror
03a00     E0 01 90 FD | 	jmp	#LR__0195
03a04                 | LR__0190
03a04                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a04     51 00 00 FF 
03a08     F4 E5 05 F1 | 	add	objptr, ##41972
03a0c     F2 12 02 FB | 	rdlong	arg01, objptr
03a10     51 00 00 FF 
03a14     F4 E5 85 F1 | 	sub	objptr, ##41972
03a18     82 01 00 FF 
03a1c     1C 14 06 F6 | 	mov	arg02, ##@LR__5108
03a20     A0 D0 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     B8 01 90 AD |  if_e	jmp	#LR__0195
03a2c     51 00 00 FF 
03a30     F4 E5 05 F1 | 	add	objptr, ##41972
03a34     F2 24 02 FB | 	rdlong	local04, objptr
03a38     1A 00 00 FF 
03a3c     D8 E5 85 F1 | 	sub	objptr, ##13784
03a40     F2 24 62 FC | 	wrlong	local04, objptr
03a44     08 E4 05 F1 | 	add	objptr, #8
03a48     F2 08 68 FC | 	wrlong	#4, objptr
03a4c     37 00 00 FF 
03a50     24 E4 85 F1 | 	sub	objptr, ##28196
03a54     74 DC 9F FD | 	jmp	#LR__0070
03a58                 | LR__0191
03a58                 | ' 							 
03a58                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a58     37 00 00 FF 
03a5c     24 E4 05 F1 | 	add	objptr, ##28196
03a60     F2 24 0A FB | 	rdlong	local04, objptr wz
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     37 00 00 5F 
03a70     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a74     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a78     37 00 00 5F 
03a7c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a80     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a84     35 00 00 AF 
03a88     20 E4 05 A1 |  if_e	add	objptr, ##27168
03a8c     F2 34 02 AB |  if_e	rdlong	local12, objptr
03a90     35 00 00 AF 
03a94     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03a98     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03a9c     7C 00 90 5D |  if_ne	jmp	#LR__0192
03aa0     51 00 00 FF 
03aa4     C0 E5 05 F1 | 	add	objptr, ##41920
03aa8     F2 12 02 FB | 	rdlong	arg01, objptr
03aac     1A 00 00 FF 
03ab0     9C E5 85 F1 | 	sub	objptr, ##13724
03ab4     F2 16 02 FB | 	rdlong	arg03, objptr
03ab8     37 00 00 FF 
03abc     24 E4 85 F1 | 	sub	objptr, ##28196
03ac0     00 14 06 F6 | 	mov	arg02, #0
03ac4     2C 40 B0 FD | 	call	#_compile_assign
03ac8                 | '   compile_assign(linenum,0,cont)
03ac8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ac8     51 00 00 FF 
03acc     F4 E5 05 F1 | 	add	objptr, ##41972
03ad0     F2 12 02 FB | 	rdlong	arg01, objptr
03ad4     51 00 00 FF 
03ad8     F4 E5 85 F1 | 	sub	objptr, ##41972
03adc     82 01 00 FF 
03ae0     1D 14 06 F6 | 	mov	arg02, ##@LR__5109
03ae4     DC CF B1 FD | 	call	#__system___string_cmp
03ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
03aec     F4 00 90 AD |  if_e	jmp	#LR__0195
03af0     51 00 00 FF 
03af4     F4 E5 05 F1 | 	add	objptr, ##41972
03af8     F2 24 02 FB | 	rdlong	local04, objptr
03afc     1A 00 00 FF 
03b00     D8 E5 85 F1 | 	sub	objptr, ##13784
03b04     F2 24 62 FC | 	wrlong	local04, objptr
03b08     08 E4 05 F1 | 	add	objptr, #8
03b0c     F2 08 68 FC | 	wrlong	#4, objptr
03b10     37 00 00 FF 
03b14     24 E4 85 F1 | 	sub	objptr, ##28196
03b18     B0 DB 9F FD | 	jmp	#LR__0070
03b1c                 | LR__0192
03b1c                 | '     							 
03b1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b1c     37 00 00 FF 
03b20     24 E4 05 F1 | 	add	objptr, ##28196
03b24     F2 24 02 FB | 	rdlong	local04, objptr
03b28     37 00 00 FF 
03b2c     24 E4 85 F1 | 	sub	objptr, ##28196
03b30     01 24 0E F2 | 	cmp	local04, #1 wz
03b34     37 00 00 5F 
03b38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b3c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b40     37 00 00 5F 
03b44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b48     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b4c     35 00 00 AF 
03b50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b54     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b58     35 00 00 AF 
03b5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b60     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b64     7C 00 90 5D |  if_ne	jmp	#LR__0194
03b68     51 00 00 FF 
03b6c     C0 E5 05 F1 | 	add	objptr, ##41920
03b70     F2 12 02 FB | 	rdlong	arg01, objptr
03b74     1A 00 00 FF 
03b78     9C E5 85 F1 | 	sub	objptr, ##13724
03b7c     F2 16 02 FB | 	rdlong	arg03, objptr
03b80     37 00 00 FF 
03b84     24 E4 85 F1 | 	sub	objptr, ##28196
03b88     00 14 06 F6 | 	mov	arg02, #0
03b8c     64 3F B0 FD | 	call	#_compile_assign
03b90                 | '   compile_assign(linenum,0,cont) 
03b90                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03b90     51 00 00 FF 
03b94     F4 E5 05 F1 | 	add	objptr, ##41972
03b98     F2 12 02 FB | 	rdlong	arg01, objptr
03b9c     51 00 00 FF 
03ba0     F4 E5 85 F1 | 	sub	objptr, ##41972
03ba4     82 01 00 FF 
03ba8     1E 14 06 F6 | 	mov	arg02, ##@LR__5110
03bac     14 CF B1 FD | 	call	#__system___string_cmp
03bb0     00 FA 4D F2 | 	cmps	result1, #0 wz
03bb4     2C 00 90 AD |  if_e	jmp	#LR__0193
03bb8     51 00 00 FF 
03bbc     F4 E5 05 F1 | 	add	objptr, ##41972
03bc0     F2 24 02 FB | 	rdlong	local04, objptr
03bc4     1A 00 00 FF 
03bc8     D8 E5 85 F1 | 	sub	objptr, ##13784
03bcc     F2 24 62 FC | 	wrlong	local04, objptr
03bd0     08 E4 05 F1 | 	add	objptr, #8
03bd4     F2 08 68 FC | 	wrlong	#4, objptr
03bd8     37 00 00 FF 
03bdc     24 E4 85 F1 | 	sub	objptr, ##28196
03be0     E8 DA 9F FD | 	jmp	#LR__0070
03be4                 | LR__0193
03be4                 | LR__0194
03be4                 | LR__0195
03be4                 | ' 
03be4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03be4     51 00 00 FF 
03be8     C0 E5 05 F1 | 	add	objptr, ##41920
03bec     F2 24 0A FB | 	rdlong	local04, objptr wz
03bf0     51 00 00 FF 
03bf4     C0 E5 85 F1 | 	sub	objptr, ##41920
03bf8     28 00 90 5D |  if_ne	jmp	#LR__0197
03bfc     02 12 06 F6 | 	mov	arg01, #2
03c00     DC 7D B0 FD | 	call	#_execute_line
03c04                 | LR__0196
03c04     82 01 00 FF 
03c08     1F 12 06 F6 | 	mov	arg01, ##@LR__5111
03c0c                 | ' 
03c0c                 | ' write(text)
03c0c     70 B9 B1 FD | 	call	#_hg010b_spin2_write
03c10                 | ' crlf
03c10     6C BE B1 FD | 	call	#_hg010b_spin2_crlf
03c14     82 01 00 FF 
03c18     20 12 06 F6 | 	mov	arg01, ##@LR__5112
03c1c                 | ' 
03c1c                 | ' write(text)
03c1c     60 B9 B1 FD | 	call	#_hg010b_spin2_write
03c20                 | ' crlf
03c20     5C BE B1 FD | 	call	#_hg010b_spin2_crlf
03c24                 | LR__0197
03c24     A7 F0 03 F6 | 	mov	ptra, fp
03c28     B2 00 A0 FD | 	call	#popregs_
03c2c                 | _interpret_ret
03c2c     2D 00 64 FD | 	ret
03c30                 | 
03c30                 | ' 
03c30                 | ' '---------------------------------------------------------------------------------------------------------------------
03c30                 | ' '
03c30                 | ' '                          END OF TOKENIZER MAIN CODE
03c30                 | ' '
03c30                 | ' '---------------------------------------------------------------------------------------------------------------------
03c30                 | ' 
03c30                 | ' '---------------------------------------------------------------------------------------------------------------------
03c30                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c30                 | ' '---------------------------------------------------------------------------------------------------------------------
03c30                 | ' 
03c30                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c30                 | ' 
03c30                 | ' function isoperator(s as string) as ubyte
03c30                 | _isoperator
03c30     01 4A 05 F6 | 	mov	COUNT_, #1
03c34     A8 00 A0 FD | 	call	#pushregs_
03c38                 | ' 
03c38                 | ' select case s
03c38     09 1F 02 F6 | 	mov	local01, arg01
03c3c     82 01 00 FF 
03c40     26 14 06 F6 | 	mov	arg02, ##@LR__5113
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     78 CE B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     FC 01 90 AD |  if_e	jmp	#LR__0200
03c54     82 01 00 FF 
03c58     28 14 06 F6 | 	mov	arg02, ##@LR__5114
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     60 CE B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     EC 01 90 AD |  if_e	jmp	#LR__0201
03c6c     82 01 00 FF 
03c70     2A 14 06 F6 | 	mov	arg02, ##@LR__5115
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     48 CE B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     DC 01 90 AD |  if_e	jmp	#LR__0202
03c84     82 01 00 FF 
03c88     2D 14 06 F6 | 	mov	arg02, ##@LR__5116
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     30 CE B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     CC 01 90 AD |  if_e	jmp	#LR__0203
03c9c     82 01 00 FF 
03ca0     31 14 06 F6 | 	mov	arg02, ##@LR__5117
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     18 CE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     BC 01 90 AD |  if_e	jmp	#LR__0204
03cb4     82 01 00 FF 
03cb8     33 14 06 F6 | 	mov	arg02, ##@LR__5118
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     00 CE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     AC 01 90 AD |  if_e	jmp	#LR__0205
03ccc     82 01 00 FF 
03cd0     35 14 06 F6 | 	mov	arg02, ##@LR__5119
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     E8 CD B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     9C 01 90 AD |  if_e	jmp	#LR__0206
03ce4     82 01 00 FF 
03ce8     39 14 06 F6 | 	mov	arg02, ##@LR__5120
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     D0 CD B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     8C 01 90 AD |  if_e	jmp	#LR__0207
03cfc     82 01 00 FF 
03d00     3D 14 06 F6 | 	mov	arg02, ##@LR__5121
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     B8 CD B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     7C 01 90 AD |  if_e	jmp	#LR__0208
03d14     82 01 00 FF 
03d18     41 14 06 F6 | 	mov	arg02, ##@LR__5122
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     A0 CD B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     6C 01 90 AD |  if_e	jmp	#LR__0209
03d2c     82 01 00 FF 
03d30     45 14 06 F6 | 	mov	arg02, ##@LR__5123
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     88 CD B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     5C 01 90 AD |  if_e	jmp	#LR__0210
03d44     82 01 00 FF 
03d48     49 14 06 F6 | 	mov	arg02, ##@LR__5124
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     70 CD B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     4C 01 90 AD |  if_e	jmp	#LR__0211
03d5c     82 01 00 FF 
03d60     4B 14 06 F6 | 	mov	arg02, ##@LR__5125
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     58 CD B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     3C 01 90 AD |  if_e	jmp	#LR__0212
03d74     82 01 00 FF 
03d78     4F 14 06 F6 | 	mov	arg02, ##@LR__5126
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     40 CD B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     2C 01 90 AD |  if_e	jmp	#LR__0213
03d8c     82 01 00 FF 
03d90     51 14 06 F6 | 	mov	arg02, ##@LR__5127
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     28 CD B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     1C 01 90 AD |  if_e	jmp	#LR__0214
03da4     82 01 00 FF 
03da8     53 14 06 F6 | 	mov	arg02, ##@LR__5128
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     10 CD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     0C 01 90 AD |  if_e	jmp	#LR__0215
03dbc     82 01 00 FF 
03dc0     56 14 06 F6 | 	mov	arg02, ##@LR__5129
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     F8 CC B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     FC 00 90 AD |  if_e	jmp	#LR__0216
03dd4     82 01 00 FF 
03dd8     59 14 06 F6 | 	mov	arg02, ##@LR__5130
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     E0 CC B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     EC 00 90 AD |  if_e	jmp	#LR__0217
03dec     82 01 00 FF 
03df0     5B 14 06 F6 | 	mov	arg02, ##@LR__5131
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     C8 CC B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     DC 00 90 AD |  if_e	jmp	#LR__0218
03e04     82 01 00 FF 
03e08     5D 14 06 F6 | 	mov	arg02, ##@LR__5132
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     B0 CC B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     CC 00 90 AD |  if_e	jmp	#LR__0219
03e1c     82 01 00 FF 
03e20     60 14 06 F6 | 	mov	arg02, ##@LR__5133
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     98 CC B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     BC 00 90 AD |  if_e	jmp	#LR__0220
03e34     82 01 00 FF 
03e38     63 14 06 F6 | 	mov	arg02, ##@LR__5134
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     80 CC B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     AC 00 90 AD |  if_e	jmp	#LR__0221
03e4c     B0 00 90 FD | 	jmp	#LR__0222
03e50                 | LR__0200
03e50     01 FA 05 F6 | 	mov	result1, #1
03e54     AC 00 90 FD | 	jmp	#LR__0223
03e58                 | LR__0201
03e58     02 FA 05 F6 | 	mov	result1, #2
03e5c     A4 00 90 FD | 	jmp	#LR__0223
03e60                 | LR__0202
03e60     03 FA 05 F6 | 	mov	result1, #3
03e64     9C 00 90 FD | 	jmp	#LR__0223
03e68                 | LR__0203
03e68     04 FA 05 F6 | 	mov	result1, #4
03e6c     94 00 90 FD | 	jmp	#LR__0223
03e70                 | LR__0204
03e70     05 FA 05 F6 | 	mov	result1, #5
03e74     8C 00 90 FD | 	jmp	#LR__0223
03e78                 | LR__0205
03e78     06 FA 05 F6 | 	mov	result1, #6
03e7c     84 00 90 FD | 	jmp	#LR__0223
03e80                 | LR__0206
03e80     07 FA 05 F6 | 	mov	result1, #7
03e84     7C 00 90 FD | 	jmp	#LR__0223
03e88                 | LR__0207
03e88     08 FA 05 F6 | 	mov	result1, #8
03e8c     74 00 90 FD | 	jmp	#LR__0223
03e90                 | LR__0208
03e90     09 FA 05 F6 | 	mov	result1, #9
03e94     6C 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0209
03e98     0A FA 05 F6 | 	mov	result1, #10
03e9c     64 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0210
03ea0     0B FA 05 F6 | 	mov	result1, #11
03ea4     5C 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0211
03ea8     0C FA 05 F6 | 	mov	result1, #12
03eac     54 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0212
03eb0     0D FA 05 F6 | 	mov	result1, #13
03eb4     4C 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0213
03eb8     0E FA 05 F6 | 	mov	result1, #14
03ebc     44 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0214
03ec0     1B FA 05 F6 | 	mov	result1, #27
03ec4     3C 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0215
03ec8     27 FA 05 F6 | 	mov	result1, #39
03ecc     34 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0216
03ed0     26 FA 05 F6 | 	mov	result1, #38
03ed4     2C 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0217
03ed8     10 FA 05 F6 | 	mov	result1, #16
03edc     24 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0218
03ee0     0F FA 05 F6 | 	mov	result1, #15
03ee4     1C 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0219
03ee8     2A FA 05 F6 | 	mov	result1, #42
03eec     14 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0220
03ef0     28 FA 05 F6 | 	mov	result1, #40
03ef4     0C 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0221
03ef8     29 FA 05 F6 | 	mov	result1, #41
03efc     04 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0222
03f00     00 FA 05 F6 | 	mov	result1, #0
03f04                 | LR__0223
03f04     A7 F0 03 F6 | 	mov	ptra, fp
03f08     B2 00 A0 FD | 	call	#popregs_
03f0c                 | _isoperator_ret
03f0c     2D 00 64 FD | 	ret
03f10                 | 
03f10                 | ' 
03f10                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f10                 | ' 
03f10                 | ' function ischannel(s as string) as ulong
03f10                 | _ischannel
03f10     02 4A 05 F6 | 	mov	COUNT_, #2
03f14     A8 00 A0 FD | 	call	#pushregs_
03f18                 | ' if left$(s,1)<>"#" then return 0
03f18     09 1F 02 F6 | 	mov	local01, arg01
03f1c     01 14 06 F6 | 	mov	arg02, #1
03f20     F4 EB B1 FD | 	call	#__system__Left_S
03f24     FD 12 02 F6 | 	mov	arg01, result1
03f28     82 01 00 FF 
03f2c     66 14 06 F6 | 	mov	arg02, ##@LR__5135
03f30     90 CB B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     00 FA 05 56 |  if_ne	mov	result1, #0
03f3c     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f40                 | ' if len(s)<>2 then return 0
03f40     0F 13 02 F6 | 	mov	arg01, local01
03f44     09 21 02 F6 | 	mov	local02, arg01
03f48     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f4c                 | LR__0230
03f4c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f50     01 20 06 51 |  if_ne	add	local02, #1
03f54     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f58                 | LR__0231
03f58     09 21 82 F1 | 	sub	local02, arg01
03f5c     10 FB 01 F6 | 	mov	result1, local02
03f60     02 FA 0D F2 | 	cmp	result1, #2 wz
03f64     00 FA 05 56 |  if_ne	mov	result1, #0
03f68     80 00 90 5D |  if_ne	jmp	#LR__0234
03f6c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03f6c     0F 13 02 F6 | 	mov	arg01, local01
03f70     01 14 06 F6 | 	mov	arg02, #1
03f74     28 EC B1 FD | 	call	#__system__Right_S
03f78     FD 12 02 F6 | 	mov	arg01, result1
03f7c     82 01 00 FF 
03f80     68 14 06 F6 | 	mov	arg02, ##@LR__5136
03f84     3C CB B1 FD | 	call	#__system___string_cmp
03f88     00 FA 55 F2 | 	cmps	result1, #0 wc
03f8c     24 00 90 CD |  if_b	jmp	#LR__0232
03f90     0F 13 02 F6 | 	mov	arg01, local01
03f94     01 14 06 F6 | 	mov	arg02, #1
03f98     04 EC B1 FD | 	call	#__system__Right_S
03f9c     FD 12 02 F6 | 	mov	arg01, result1
03fa0     82 01 00 FF 
03fa4     6A 14 06 F6 | 	mov	arg02, ##@LR__5137
03fa8     18 CB B1 FD | 	call	#__system___string_cmp
03fac     01 FA 55 F2 | 	cmps	result1, #1 wc
03fb0     08 00 90 CD |  if_b	jmp	#LR__0233
03fb4                 | LR__0232
03fb4     00 FA 05 F6 | 	mov	result1, #0
03fb8     30 00 90 FD | 	jmp	#LR__0234
03fbc                 | LR__0233
03fbc                 | ' return token_channel+val(right$(s,1))
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     01 14 06 F6 | 	mov	arg02, #1
03fc4     D8 EB B1 FD | 	call	#__system__Right_S
03fc8     FD 12 02 F6 | 	mov	arg01, result1
03fcc     68 FE B1 FD | 	call	#__system____builtin_atof
03fd0     FD 14 02 F6 | 	mov	arg02, result1
03fd4     00 18 21 FF 
03fd8     00 12 06 F6 | 	mov	arg01, ##1110441984
03fdc     A0 F2 B1 FD | 	call	#__system___float_add
03fe0     FD 12 02 F6 | 	mov	arg01, result1
03fe4     00 14 06 F6 | 	mov	arg02, #0
03fe8     2C FB B1 FD | 	call	#__system___float_tointeger
03fec                 | LR__0234
03fec     A7 F0 03 F6 | 	mov	ptra, fp
03ff0     B2 00 A0 FD | 	call	#popregs_
03ff4                 | _ischannel_ret
03ff4     2D 00 64 FD | 	ret
03ff8                 | 
03ff8                 | ' 
03ff8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
03ff8                 | ' ' todo: add spin2/pasm constants for pin control
03ff8                 | ' 
03ff8                 | ' function isconstant(s as string) as integer
03ff8                 | _isconstant
03ff8     01 4A 05 F6 | 	mov	COUNT_, #1
03ffc     A8 00 A0 FD | 	call	#pushregs_
04000                 | ' 
04000                 | ' select case s
04000     09 1F 02 F6 | 	mov	local01, arg01
04004     82 01 00 FF 
04008     6C 14 06 F6 | 	mov	arg02, ##@LR__5138
0400c     0F 13 02 F6 | 	mov	arg01, local01
04010     B0 CA B1 FD | 	call	#__system___string_cmp
04014     00 FA 0D F2 | 	cmp	result1, #0 wz
04018     34 00 90 AD |  if_e	jmp	#LR__0240
0401c     82 01 00 FF 
04020     72 14 06 F6 | 	mov	arg02, ##@LR__5139
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     98 CA B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     24 00 90 AD |  if_e	jmp	#LR__0241
04034     82 01 00 FF 
04038     79 14 06 F6 | 	mov	arg02, ##@LR__5140
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     80 CA B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     14 00 90 AD |  if_e	jmp	#LR__0242
0404c     18 00 90 FD | 	jmp	#LR__0243
04050                 | LR__0240
04050     01 FA 05 F6 | 	mov	result1, #1
04054     14 00 90 FD | 	jmp	#LR__0244
04058                 | LR__0241
04058     02 FA 05 F6 | 	mov	result1, #2
0405c     0C 00 90 FD | 	jmp	#LR__0244
04060                 | LR__0242
04060     04 FA 05 F6 | 	mov	result1, #4
04064     04 00 90 FD | 	jmp	#LR__0244
04068                 | LR__0243
04068     00 FA 05 F6 | 	mov	result1, #0
0406c                 | LR__0244
0406c     A7 F0 03 F6 | 	mov	ptra, fp
04070     B2 00 A0 FD | 	call	#popregs_
04074                 | _isconstant_ret
04074     2D 00 64 FD | 	ret
04078                 | 
04078                 | ' 
04078                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04078                 | ' 
04078                 | ' function isnotename(s as string) as ulong
04078                 | _isnotename
04078     07 4A 05 F6 | 	mov	COUNT_, #7
0407c     A8 00 A0 FD | 	call	#pushregs_
04080                 | ' if left$(s,1)<>"#" then return 0
04080     09 1F 02 F6 | 	mov	local01, arg01
04084     01 14 06 F6 | 	mov	arg02, #1
04088     8C EA B1 FD | 	call	#__system__Left_S
0408c     FD 12 02 F6 | 	mov	arg01, result1
04090     82 01 00 FF 
04094     81 14 06 F6 | 	mov	arg02, ##@LR__5141
04098     28 CA B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     00 FA 05 56 |  if_ne	mov	result1, #0
040a4     30 03 90 5D |  if_ne	jmp	#LR__0273
040a8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040a8     0F 13 02 F6 | 	mov	arg01, local01
040ac     03 14 06 F6 | 	mov	arg02, #3
040b0     01 16 06 F6 | 	mov	arg03, #1
040b4     78 EB B1 FD | 	call	#__system__Mid_S
040b8     FD 12 02 F6 | 	mov	arg01, result1
040bc     82 01 00 FF 
040c0     83 14 06 F6 | 	mov	arg02, ##@LR__5142
040c4     FC C9 B1 FD | 	call	#__system___string_cmp
040c8     00 FA 0D F2 | 	cmp	result1, #0 wz
040cc     18 00 90 5D |  if_ne	jmp	#LR__0250
040d0     0F 13 02 F6 | 	mov	arg01, local01
040d4     02 14 06 F6 | 	mov	arg02, #2
040d8     02 16 06 F6 | 	mov	arg03, #2
040dc     50 EB B1 FD | 	call	#__system__Mid_S
040e0     FD 20 02 F6 | 	mov	local02, result1
040e4     14 00 90 FD | 	jmp	#LR__0251
040e8                 | LR__0250
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     02 14 06 F6 | 	mov	arg02, #2
040f0     01 16 06 F6 | 	mov	arg03, #1
040f4     38 EB B1 FD | 	call	#__system__Mid_S
040f8     FD 20 02 F6 | 	mov	local02, result1
040fc                 | LR__0251
040fc                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     09 23 02 F6 | 	mov	local03, arg01
04104     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04108                 | LR__0252
04108     11 FB C9 FA | 	rdbyte	result1, local03 wz
0410c     01 22 06 51 |  if_ne	add	local03, #1
04110     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04114                 | LR__0253
04114     09 23 82 F1 | 	sub	local03, arg01
04118     11 15 02 F6 | 	mov	arg02, local03
0411c     01 14 86 F1 | 	sub	arg02, #1
04120     0F 13 02 F6 | 	mov	arg01, local01
04124     01 16 06 F6 | 	mov	arg03, #1
04128     04 EB B1 FD | 	call	#__system__Mid_S
0412c     FD 12 02 F6 | 	mov	arg01, result1
04130     82 01 00 FF 
04134     85 14 06 F6 | 	mov	arg02, ##@LR__5143
04138     88 C9 B1 FD | 	call	#__system___string_cmp
0413c     00 FA 0D F2 | 	cmp	result1, #0 wz
04140     28 00 90 AD |  if_e	jmp	#LR__0254
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     01 14 06 F6 | 	mov	arg02, #1
0414c     50 EA B1 FD | 	call	#__system__Right_S
04150     FD 12 02 F6 | 	mov	arg01, result1
04154     E0 FC B1 FD | 	call	#__system____builtin_atof
04158     FD 12 02 F6 | 	mov	arg01, result1
0415c     00 14 06 F6 | 	mov	arg02, #0
04160     B4 F9 B1 FD | 	call	#__system___float_tointeger
04164     FD 24 02 F6 | 	mov	local04, result1
04168     34 00 90 FD | 	jmp	#LR__0255
0416c                 | LR__0254
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     01 14 06 F6 | 	mov	arg02, #1
04174     28 EA B1 FD | 	call	#__system__Right_S
04178     FD 12 02 F6 | 	mov	arg01, result1
0417c     B8 FC B1 FD | 	call	#__system____builtin_atof
04180     FD 14 02 F6 | 	mov	arg02, result1
04184     00 C0 5F FF 
04188     00 12 06 F6 | 	mov	arg01, ##-1082130432
0418c     C0 F4 B1 FD | 	call	#__system___float_mul
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     00 14 06 F6 | 	mov	arg02, #0
04198     7C F9 B1 FD | 	call	#__system___float_tointeger
0419c     FD 24 02 F6 | 	mov	local04, result1
041a0                 | LR__0255
041a0                 | ' 
041a0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041a0     00 24 0E F2 | 	cmp	local04, #0 wz
041a4     24 00 90 5D |  if_ne	jmp	#LR__0256
041a8     0F 13 02 F6 | 	mov	arg01, local01
041ac     01 14 06 F6 | 	mov	arg02, #1
041b0     EC E9 B1 FD | 	call	#__system__Right_S
041b4     FD 12 02 F6 | 	mov	arg01, result1
041b8     82 01 00 FF 
041bc     87 14 06 F6 | 	mov	arg02, ##@LR__5144
041c0     00 C9 B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     04 24 06 56 |  if_ne	mov	local04, #4
041cc                 | LR__0256
041cc                 | ' 
041cc                 | ' select case s1
041cc     10 27 02 F6 | 	mov	local05, local02
041d0     82 01 00 FF 
041d4     89 14 06 F6 | 	mov	arg02, ##@LR__5145
041d8     13 13 02 F6 | 	mov	arg01, local05
041dc     E4 C8 B1 FD | 	call	#__system___string_cmp
041e0     00 FA 0D F2 | 	cmp	result1, #0 wz
041e4     24 01 90 AD |  if_e	jmp	#LR__0257
041e8     82 01 00 FF 
041ec     8B 14 06 F6 | 	mov	arg02, ##@LR__5146
041f0     13 13 02 F6 | 	mov	arg01, local05
041f4     CC C8 B1 FD | 	call	#__system___string_cmp
041f8     00 FA 0D F2 | 	cmp	result1, #0 wz
041fc     18 01 90 AD |  if_e	jmp	#LR__0258
04200     82 01 00 FF 
04204     8E 14 06 F6 | 	mov	arg02, ##@LR__5147
04208     13 13 02 F6 | 	mov	arg01, local05
0420c     B4 C8 B1 FD | 	call	#__system___string_cmp
04210     00 FA 0D F2 | 	cmp	result1, #0 wz
04214     0C 01 90 AD |  if_e	jmp	#LR__0259
04218     82 01 00 FF 
0421c     90 14 06 F6 | 	mov	arg02, ##@LR__5148
04220     13 13 02 F6 | 	mov	arg01, local05
04224     9C C8 B1 FD | 	call	#__system___string_cmp
04228     00 FA 0D F2 | 	cmp	result1, #0 wz
0422c     00 01 90 AD |  if_e	jmp	#LR__0260
04230     82 01 00 FF 
04234     93 14 06 F6 | 	mov	arg02, ##@LR__5149
04238     13 13 02 F6 | 	mov	arg01, local05
0423c     84 C8 B1 FD | 	call	#__system___string_cmp
04240     00 FA 0D F2 | 	cmp	result1, #0 wz
04244     F4 00 90 AD |  if_e	jmp	#LR__0261
04248     82 01 00 FF 
0424c     95 14 06 F6 | 	mov	arg02, ##@LR__5150
04250     13 13 02 F6 | 	mov	arg01, local05
04254     6C C8 B1 FD | 	call	#__system___string_cmp
04258     00 FA 0D F2 | 	cmp	result1, #0 wz
0425c     E8 00 90 AD |  if_e	jmp	#LR__0262
04260     82 01 00 FF 
04264     97 14 06 F6 | 	mov	arg02, ##@LR__5151
04268     13 13 02 F6 | 	mov	arg01, local05
0426c     54 C8 B1 FD | 	call	#__system___string_cmp
04270     00 FA 0D F2 | 	cmp	result1, #0 wz
04274     DC 00 90 AD |  if_e	jmp	#LR__0263
04278     82 01 00 FF 
0427c     9A 14 06 F6 | 	mov	arg02, ##@LR__5152
04280     13 13 02 F6 | 	mov	arg01, local05
04284     3C C8 B1 FD | 	call	#__system___string_cmp
04288     00 FA 0D F2 | 	cmp	result1, #0 wz
0428c     D0 00 90 AD |  if_e	jmp	#LR__0264
04290     82 01 00 FF 
04294     9C 14 06 F6 | 	mov	arg02, ##@LR__5153
04298     13 13 02 F6 | 	mov	arg01, local05
0429c     24 C8 B1 FD | 	call	#__system___string_cmp
042a0     00 FA 0D F2 | 	cmp	result1, #0 wz
042a4     C4 00 90 AD |  if_e	jmp	#LR__0265
042a8     82 01 00 FF 
042ac     9F 14 06 F6 | 	mov	arg02, ##@LR__5154
042b0     13 13 02 F6 | 	mov	arg01, local05
042b4     0C C8 B1 FD | 	call	#__system___string_cmp
042b8     00 FA 0D F2 | 	cmp	result1, #0 wz
042bc     B8 00 90 AD |  if_e	jmp	#LR__0266
042c0     82 01 00 FF 
042c4     A1 14 06 F6 | 	mov	arg02, ##@LR__5155
042c8     13 13 02 F6 | 	mov	arg01, local05
042cc     F4 C7 B1 FD | 	call	#__system___string_cmp
042d0     00 FA 0D F2 | 	cmp	result1, #0 wz
042d4     AC 00 90 AD |  if_e	jmp	#LR__0267
042d8     82 01 00 FF 
042dc     A4 14 06 F6 | 	mov	arg02, ##@LR__5156
042e0     13 13 02 F6 | 	mov	arg01, local05
042e4     DC C7 B1 FD | 	call	#__system___string_cmp
042e8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ec     A0 00 90 AD |  if_e	jmp	#LR__0268
042f0     82 01 00 FF 
042f4     A6 14 06 F6 | 	mov	arg02, ##@LR__5157
042f8     13 13 02 F6 | 	mov	arg01, local05
042fc     C4 C7 B1 FD | 	call	#__system___string_cmp
04300     00 FA 0D F2 | 	cmp	result1, #0 wz
04304     94 00 90 AD |  if_e	jmp	#LR__0269
04308     9C 00 90 FD | 	jmp	#LR__0270
0430c                 | LR__0257
0430c     01 00 00 FF 
04310     00 29 06 F6 | 	mov	local06, ##768
04314     98 00 90 FD | 	jmp	#LR__0271
04318                 | LR__0258
04318     01 00 00 FF 
0431c     01 29 06 F6 | 	mov	local06, ##769
04320     8C 00 90 FD | 	jmp	#LR__0271
04324                 | LR__0259
04324     01 00 00 FF 
04328     02 29 06 F6 | 	mov	local06, ##770
0432c     80 00 90 FD | 	jmp	#LR__0271
04330                 | LR__0260
04330     01 00 00 FF 
04334     03 29 06 F6 | 	mov	local06, ##771
04338     74 00 90 FD | 	jmp	#LR__0271
0433c                 | LR__0261
0433c     01 00 00 FF 
04340     04 29 06 F6 | 	mov	local06, ##772
04344     68 00 90 FD | 	jmp	#LR__0271
04348                 | LR__0262
04348     01 00 00 FF 
0434c     05 29 06 F6 | 	mov	local06, ##773
04350     5C 00 90 FD | 	jmp	#LR__0271
04354                 | LR__0263
04354     01 00 00 FF 
04358     06 29 06 F6 | 	mov	local06, ##774
0435c     50 00 90 FD | 	jmp	#LR__0271
04360                 | LR__0264
04360     01 00 00 FF 
04364     07 29 06 F6 | 	mov	local06, ##775
04368     44 00 90 FD | 	jmp	#LR__0271
0436c                 | LR__0265
0436c     01 00 00 FF 
04370     08 29 06 F6 | 	mov	local06, ##776
04374     38 00 90 FD | 	jmp	#LR__0271
04378                 | LR__0266
04378     01 00 00 FF 
0437c     09 29 06 F6 | 	mov	local06, ##777
04380     2C 00 90 FD | 	jmp	#LR__0271
04384                 | LR__0267
04384     01 00 00 FF 
04388     0A 29 06 F6 | 	mov	local06, ##778
0438c     20 00 90 FD | 	jmp	#LR__0271
04390                 | LR__0268
04390     01 00 00 FF 
04394     0B 29 06 F6 | 	mov	local06, ##779
04398     14 00 90 FD | 	jmp	#LR__0271
0439c                 | LR__0269
0439c     01 00 00 FF 
043a0     0B 29 06 F6 | 	mov	local06, ##779
043a4     08 00 90 FD | 	jmp	#LR__0271
043a8                 | LR__0270
043a8     00 FA 05 F6 | 	mov	result1, #0
043ac     28 00 90 FD | 	jmp	#LR__0273
043b0                 | LR__0271
043b0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043b0     FF FF 7F FF 
043b4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043b8     18 00 90 CD |  if_b	jmp	#LR__0272
043bc     0A 24 56 F2 | 	cmps	local04, #10 wc
043c0     12 2B 02 C6 |  if_b	mov	local07, local04
043c4     01 2A 66 C0 |  if_b	shl	local07, #1
043c8     12 2B 02 C1 |  if_b	add	local07, local04
043cc     02 2A 66 C0 |  if_b	shl	local07, #2
043d0     15 29 02 C1 |  if_b	add	local06, local07
043d4                 | LR__0272
043d4                 | ' return token
043d4     14 FB 01 F6 | 	mov	result1, local06
043d8                 | LR__0273
043d8     A7 F0 03 F6 | 	mov	ptra, fp
043dc     B2 00 A0 FD | 	call	#popregs_
043e0                 | _isnotename_ret
043e0     2D 00 64 FD | 	ret
043e4                 | 
043e4                 | ' 
043e4                 | ' ' Check if the part is a separator, return a token or 0 if not found
043e4                 | ' 
043e4                 | ' function isseparator(s as string) as ubyte
043e4                 | _isseparator
043e4     01 4A 05 F6 | 	mov	COUNT_, #1
043e8     A8 00 A0 FD | 	call	#pushregs_
043ec                 | ' 
043ec                 | ' select case s
043ec     09 1F 02 F6 | 	mov	local01, arg01
043f0     82 01 00 FF 
043f4     A8 14 06 F6 | 	mov	arg02, ##@LR__5158
043f8     0F 13 02 F6 | 	mov	arg01, local01
043fc     C4 C6 B1 FD | 	call	#__system___string_cmp
04400     00 FA 0D F2 | 	cmp	result1, #0 wz
04404     54 01 90 AD |  if_e	jmp	#LR__0280
04408     82 01 00 FF 
0440c     AA 14 06 F6 | 	mov	arg02, ##@LR__5159
04410     0F 13 02 F6 | 	mov	arg01, local01
04414     AC C6 B1 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     44 01 90 AD |  if_e	jmp	#LR__0281
04420     82 01 00 FF 
04424     AC 14 06 F6 | 	mov	arg02, ##@LR__5160
04428     0F 13 02 F6 | 	mov	arg01, local01
0442c     94 C6 B1 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     34 01 90 AD |  if_e	jmp	#LR__0282
04438     82 01 00 FF 
0443c     AE 14 06 F6 | 	mov	arg02, ##@LR__5161
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     7C C6 B1 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     24 01 90 AD |  if_e	jmp	#LR__0283
04450     82 01 00 FF 
04454     B0 14 06 F6 | 	mov	arg02, ##@LR__5162
04458     0F 13 02 F6 | 	mov	arg01, local01
0445c     64 C6 B1 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     14 01 90 AD |  if_e	jmp	#LR__0284
04468     82 01 00 FF 
0446c     B2 14 06 F6 | 	mov	arg02, ##@LR__5163
04470     0F 13 02 F6 | 	mov	arg01, local01
04474     4C C6 B1 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     04 01 90 AD |  if_e	jmp	#LR__0285
04480     82 01 00 FF 
04484     B4 14 06 F6 | 	mov	arg02, ##@LR__5164
04488     0F 13 02 F6 | 	mov	arg01, local01
0448c     34 C6 B1 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     F4 00 90 AD |  if_e	jmp	#LR__0286
04498     82 01 00 FF 
0449c     B6 14 06 F6 | 	mov	arg02, ##@LR__5165
044a0     0F 13 02 F6 | 	mov	arg01, local01
044a4     1C C6 B1 FD | 	call	#__system___string_cmp
044a8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ac     E4 00 90 AD |  if_e	jmp	#LR__0287
044b0     82 01 00 FF 
044b4     B8 14 06 F6 | 	mov	arg02, ##@LR__5166
044b8     0F 13 02 F6 | 	mov	arg01, local01
044bc     04 C6 B1 FD | 	call	#__system___string_cmp
044c0     00 FA 0D F2 | 	cmp	result1, #0 wz
044c4     D4 00 90 AD |  if_e	jmp	#LR__0288
044c8     82 01 00 FF 
044cc     BA 14 06 F6 | 	mov	arg02, ##@LR__5167
044d0     0F 13 02 F6 | 	mov	arg01, local01
044d4     EC C5 B1 FD | 	call	#__system___string_cmp
044d8     00 FA 0D F2 | 	cmp	result1, #0 wz
044dc     C4 00 90 AD |  if_e	jmp	#LR__0289
044e0     82 01 00 FF 
044e4     BC 14 06 F6 | 	mov	arg02, ##@LR__5168
044e8     0F 13 02 F6 | 	mov	arg01, local01
044ec     D4 C5 B1 FD | 	call	#__system___string_cmp
044f0     00 FA 0D F2 | 	cmp	result1, #0 wz
044f4     B4 00 90 AD |  if_e	jmp	#LR__0290
044f8     82 01 00 FF 
044fc     BE 14 06 F6 | 	mov	arg02, ##@LR__5169
04500     0F 13 02 F6 | 	mov	arg01, local01
04504     BC C5 B1 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     A4 00 90 AD |  if_e	jmp	#LR__0291
04510     82 01 00 FF 
04514     C0 14 06 F6 | 	mov	arg02, ##@LR__5170
04518     0F 13 02 F6 | 	mov	arg01, local01
0451c     A4 C5 B1 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     94 00 90 AD |  if_e	jmp	#LR__0292
04528     82 01 00 FF 
0452c     C2 14 06 F6 | 	mov	arg02, ##@LR__5171
04530     0F 13 02 F6 | 	mov	arg01, local01
04534     8C C5 B1 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     84 00 90 AD |  if_e	jmp	#LR__0293
04540     82 01 00 FF 
04544     C4 14 06 F6 | 	mov	arg02, ##@LR__5172
04548     0F 13 02 F6 | 	mov	arg01, local01
0454c     74 C5 B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     74 00 90 AD |  if_e	jmp	#LR__0294
04558     78 00 90 FD | 	jmp	#LR__0295
0455c                 | LR__0280
0455c     01 FA 05 F6 | 	mov	result1, #1
04560     74 00 90 FD | 	jmp	#LR__0296
04564                 | LR__0281
04564     02 FA 05 F6 | 	mov	result1, #2
04568     6C 00 90 FD | 	jmp	#LR__0296
0456c                 | LR__0282
0456c     1B FA 05 F6 | 	mov	result1, #27
04570     64 00 90 FD | 	jmp	#LR__0296
04574                 | LR__0283
04574     11 FA 05 F6 | 	mov	result1, #17
04578     5C 00 90 FD | 	jmp	#LR__0296
0457c                 | LR__0284
0457c     05 FA 05 F6 | 	mov	result1, #5
04580     54 00 90 FD | 	jmp	#LR__0296
04584                 | LR__0285
04584     06 FA 05 F6 | 	mov	result1, #6
04588     4C 00 90 FD | 	jmp	#LR__0296
0458c                 | LR__0286
0458c     12 FA 05 F6 | 	mov	result1, #18
04590     44 00 90 FD | 	jmp	#LR__0296
04594                 | LR__0287
04594     13 FA 05 F6 | 	mov	result1, #19
04598     3C 00 90 FD | 	jmp	#LR__0296
0459c                 | LR__0288
0459c     0C FA 05 F6 | 	mov	result1, #12
045a0     34 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0289
045a4     14 FA 05 F6 | 	mov	result1, #20
045a8     2C 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0290
045ac     15 FA 05 F6 | 	mov	result1, #21
045b0     24 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0291
045b4     16 FA 05 F6 | 	mov	result1, #22
045b8     1C 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0292
045bc     FF FB 05 F6 | 	mov	result1, #511
045c0     14 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0293
045c4     0F FA 05 F6 | 	mov	result1, #15
045c8     0C 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0294
045cc     10 FA 05 F6 | 	mov	result1, #16
045d0     04 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0295
045d4     00 FA 05 F6 | 	mov	result1, #0
045d8                 | LR__0296
045d8     A7 F0 03 F6 | 	mov	ptra, fp
045dc     B2 00 A0 FD | 	call	#popregs_
045e0                 | _isseparator_ret
045e0     2D 00 64 FD | 	ret
045e4                 | 
045e4                 | ' 
045e4                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
045e4                 | ' 
045e4                 | ' function iscommand(s as string) as ubyte
045e4                 | _iscommand
045e4     01 4A 05 F6 | 	mov	COUNT_, #1
045e8     A8 00 A0 FD | 	call	#pushregs_
045ec                 | ' 
045ec                 | ' select case s
045ec     09 1F 02 F6 | 	mov	local01, arg01
045f0     82 01 00 FF 
045f4     C8 14 06 F6 | 	mov	arg02, ##@LR__5174
045f8     0F 13 02 F6 | 	mov	arg01, local01
045fc     C4 C4 B1 FD | 	call	#__system___string_cmp
04600     00 FA 0D F2 | 	cmp	result1, #0 wz
04604     44 0B 90 AD |  if_e	jmp	#LR__0300
04608     82 01 00 FF 
0460c     CD 14 06 F6 | 	mov	arg02, ##@LR__5175
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     AC C4 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     34 0B 90 AD |  if_e	jmp	#LR__0301
04620     82 01 00 FF 
04624     D0 14 06 F6 | 	mov	arg02, ##@LR__5176
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     94 C4 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     24 0B 90 AD |  if_e	jmp	#LR__0302
04638     82 01 00 FF 
0463c     D4 14 06 F6 | 	mov	arg02, ##@LR__5177
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     7C C4 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     14 0B 90 AD |  if_e	jmp	#LR__0303
04650     82 01 00 FF 
04654     D9 14 06 F6 | 	mov	arg02, ##@LR__5178
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     64 C4 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     04 0B 90 AD |  if_e	jmp	#LR__0304
04668     82 01 00 FF 
0466c     DD 14 06 F6 | 	mov	arg02, ##@LR__5179
04670     0F 13 02 F6 | 	mov	arg01, local01
04674     4C C4 B1 FD | 	call	#__system___string_cmp
04678     00 FA 0D F2 | 	cmp	result1, #0 wz
0467c     F4 0A 90 AD |  if_e	jmp	#LR__0305
04680     82 01 00 FF 
04684     E8 14 06 F6 | 	mov	arg02, ##@LR__5180
04688     0F 13 02 F6 | 	mov	arg01, local01
0468c     34 C4 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     E4 0A 90 AD |  if_e	jmp	#LR__0306
04698     82 01 00 FF 
0469c     EC 14 06 F6 | 	mov	arg02, ##@LR__5181
046a0     0F 13 02 F6 | 	mov	arg01, local01
046a4     1C C4 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     D4 0A 90 AD |  if_e	jmp	#LR__0307
046b0     82 01 00 FF 
046b4     F6 14 06 F6 | 	mov	arg02, ##@LR__5182
046b8     0F 13 02 F6 | 	mov	arg01, local01
046bc     04 C4 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     C4 0A 90 AD |  if_e	jmp	#LR__0308
046c8     82 01 00 FF 
046cc     FA 14 06 F6 | 	mov	arg02, ##@LR__5183
046d0     0F 13 02 F6 | 	mov	arg01, local01
046d4     EC C3 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     B4 0A 90 AD |  if_e	jmp	#LR__0309
046e0     82 01 00 FF 
046e4     04 15 06 F6 | 	mov	arg02, ##@LR__5184
046e8     0F 13 02 F6 | 	mov	arg01, local01
046ec     D4 C3 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     A4 0A 90 AD |  if_e	jmp	#LR__0310
046f8     82 01 00 FF 
046fc     08 15 06 F6 | 	mov	arg02, ##@LR__5185
04700     0F 13 02 F6 | 	mov	arg01, local01
04704     BC C3 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     94 0A 90 AD |  if_e	jmp	#LR__0311
04710     82 01 00 FF 
04714     13 15 06 F6 | 	mov	arg02, ##@LR__5186
04718     0F 13 02 F6 | 	mov	arg01, local01
0471c     A4 C3 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     84 0A 90 AD |  if_e	jmp	#LR__0312
04728     82 01 00 FF 
0472c     17 15 06 F6 | 	mov	arg02, ##@LR__5187
04730     0F 13 02 F6 | 	mov	arg01, local01
04734     8C C3 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     74 0A 90 AD |  if_e	jmp	#LR__0313
04740     82 01 00 FF 
04744     1E 15 06 F6 | 	mov	arg02, ##@LR__5188
04748     0F 13 02 F6 | 	mov	arg01, local01
0474c     74 C3 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     64 0A 90 AD |  if_e	jmp	#LR__0314
04758     82 01 00 FF 
0475c     22 15 06 F6 | 	mov	arg02, ##@LR__5189
04760     0F 13 02 F6 | 	mov	arg01, local01
04764     5C C3 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     54 0A 90 AD |  if_e	jmp	#LR__0315
04770     82 01 00 FF 
04774     28 15 06 F6 | 	mov	arg02, ##@LR__5190
04778     0F 13 02 F6 | 	mov	arg01, local01
0477c     44 C3 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     44 0A 90 AD |  if_e	jmp	#LR__0316
04788     82 01 00 FF 
0478c     2E 15 06 F6 | 	mov	arg02, ##@LR__5191
04790     0F 13 02 F6 | 	mov	arg01, local01
04794     2C C3 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     34 0A 90 AD |  if_e	jmp	#LR__0317
047a0     82 01 00 FF 
047a4     32 15 06 F6 | 	mov	arg02, ##@LR__5192
047a8     0F 13 02 F6 | 	mov	arg01, local01
047ac     14 C3 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     24 0A 90 AD |  if_e	jmp	#LR__0318
047b8     82 01 00 FF 
047bc     38 15 06 F6 | 	mov	arg02, ##@LR__5193
047c0     0F 13 02 F6 | 	mov	arg01, local01
047c4     FC C2 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     14 0A 90 AD |  if_e	jmp	#LR__0319
047d0     82 01 00 FF 
047d4     3B 15 06 F6 | 	mov	arg02, ##@LR__5194
047d8     0F 13 02 F6 | 	mov	arg01, local01
047dc     E4 C2 B1 FD | 	call	#__system___string_cmp
047e0     00 FA 0D F2 | 	cmp	result1, #0 wz
047e4     04 0A 90 AD |  if_e	jmp	#LR__0320
047e8     82 01 00 FF 
047ec     41 15 06 F6 | 	mov	arg02, ##@LR__5195
047f0     0F 13 02 F6 | 	mov	arg01, local01
047f4     CC C2 B1 FD | 	call	#__system___string_cmp
047f8     00 FA 0D F2 | 	cmp	result1, #0 wz
047fc     F4 09 90 AD |  if_e	jmp	#LR__0321
04800     82 01 00 FF 
04804     45 15 06 F6 | 	mov	arg02, ##@LR__5196
04808     0F 13 02 F6 | 	mov	arg01, local01
0480c     B4 C2 B1 FD | 	call	#__system___string_cmp
04810     00 FA 0D F2 | 	cmp	result1, #0 wz
04814     E4 09 90 AD |  if_e	jmp	#LR__0322
04818     82 01 00 FF 
0481c     4C 15 06 F6 | 	mov	arg02, ##@LR__5197
04820     0F 13 02 F6 | 	mov	arg01, local01
04824     9C C2 B1 FD | 	call	#__system___string_cmp
04828     00 FA 0D F2 | 	cmp	result1, #0 wz
0482c     D4 09 90 AD |  if_e	jmp	#LR__0323
04830     82 01 00 FF 
04834     53 15 06 F6 | 	mov	arg02, ##@LR__5198
04838     0F 13 02 F6 | 	mov	arg01, local01
0483c     84 C2 B1 FD | 	call	#__system___string_cmp
04840     00 FA 0D F2 | 	cmp	result1, #0 wz
04844     C4 09 90 AD |  if_e	jmp	#LR__0324
04848     82 01 00 FF 
0484c     5A 15 06 F6 | 	mov	arg02, ##@LR__5199
04850     0F 13 02 F6 | 	mov	arg01, local01
04854     6C C2 B1 FD | 	call	#__system___string_cmp
04858     00 FA 0D F2 | 	cmp	result1, #0 wz
0485c     B4 09 90 AD |  if_e	jmp	#LR__0325
04860     82 01 00 FF 
04864     64 15 06 F6 | 	mov	arg02, ##@LR__5200
04868     0F 13 02 F6 | 	mov	arg01, local01
0486c     54 C2 B1 FD | 	call	#__system___string_cmp
04870     00 FA 0D F2 | 	cmp	result1, #0 wz
04874     A4 09 90 AD |  if_e	jmp	#LR__0326
04878     82 01 00 FF 
0487c     68 15 06 F6 | 	mov	arg02, ##@LR__5201
04880     0F 13 02 F6 | 	mov	arg01, local01
04884     3C C2 B1 FD | 	call	#__system___string_cmp
04888     00 FA 0D F2 | 	cmp	result1, #0 wz
0488c     94 09 90 AD |  if_e	jmp	#LR__0327
04890     82 01 00 FF 
04894     6C 15 06 F6 | 	mov	arg02, ##@LR__5202
04898     0F 13 02 F6 | 	mov	arg01, local01
0489c     24 C2 B1 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     84 09 90 AD |  if_e	jmp	#LR__0328
048a8     82 01 00 FF 
048ac     70 15 06 F6 | 	mov	arg02, ##@LR__5203
048b0     0F 13 02 F6 | 	mov	arg01, local01
048b4     0C C2 B1 FD | 	call	#__system___string_cmp
048b8     00 FA 0D F2 | 	cmp	result1, #0 wz
048bc     74 09 90 AD |  if_e	jmp	#LR__0329
048c0     82 01 00 FF 
048c4     74 15 06 F6 | 	mov	arg02, ##@LR__5204
048c8     0F 13 02 F6 | 	mov	arg01, local01
048cc     F4 C1 B1 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     64 09 90 AD |  if_e	jmp	#LR__0330
048d8     82 01 00 FF 
048dc     7A 15 06 F6 | 	mov	arg02, ##@LR__5205
048e0     0F 13 02 F6 | 	mov	arg01, local01
048e4     DC C1 B1 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     54 09 90 AD |  if_e	jmp	#LR__0331
048f0     82 01 00 FF 
048f4     7F 15 06 F6 | 	mov	arg02, ##@LR__5206
048f8     0F 13 02 F6 | 	mov	arg01, local01
048fc     C4 C1 B1 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     44 09 90 AD |  if_e	jmp	#LR__0332
04908     82 01 00 FF 
0490c     83 15 06 F6 | 	mov	arg02, ##@LR__5207
04910     0F 13 02 F6 | 	mov	arg01, local01
04914     AC C1 B1 FD | 	call	#__system___string_cmp
04918     00 FA 0D F2 | 	cmp	result1, #0 wz
0491c     34 09 90 AD |  if_e	jmp	#LR__0333
04920     82 01 00 FF 
04924     88 15 06 F6 | 	mov	arg02, ##@LR__5208
04928     0F 13 02 F6 | 	mov	arg01, local01
0492c     94 C1 B1 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     24 09 90 AD |  if_e	jmp	#LR__0334
04938     82 01 00 FF 
0493c     8C 15 06 F6 | 	mov	arg02, ##@LR__5209
04940     0F 13 02 F6 | 	mov	arg01, local01
04944     7C C1 B1 FD | 	call	#__system___string_cmp
04948     00 FA 0D F2 | 	cmp	result1, #0 wz
0494c     14 09 90 AD |  if_e	jmp	#LR__0335
04950     82 01 00 FF 
04954     92 15 06 F6 | 	mov	arg02, ##@LR__5210
04958     0F 13 02 F6 | 	mov	arg01, local01
0495c     64 C1 B1 FD | 	call	#__system___string_cmp
04960     00 FA 0D F2 | 	cmp	result1, #0 wz
04964     04 09 90 AD |  if_e	jmp	#LR__0336
04968     82 01 00 FF 
0496c     95 15 06 F6 | 	mov	arg02, ##@LR__5211
04970     0F 13 02 F6 | 	mov	arg01, local01
04974     4C C1 B1 FD | 	call	#__system___string_cmp
04978     00 FA 0D F2 | 	cmp	result1, #0 wz
0497c     F4 08 90 AD |  if_e	jmp	#LR__0337
04980     82 01 00 FF 
04984     9D 15 06 F6 | 	mov	arg02, ##@LR__5212
04988     0F 13 02 F6 | 	mov	arg01, local01
0498c     34 C1 B1 FD | 	call	#__system___string_cmp
04990     00 FA 0D F2 | 	cmp	result1, #0 wz
04994     E4 08 90 AD |  if_e	jmp	#LR__0338
04998     82 01 00 FF 
0499c     A1 15 06 F6 | 	mov	arg02, ##@LR__5213
049a0     0F 13 02 F6 | 	mov	arg01, local01
049a4     1C C1 B1 FD | 	call	#__system___string_cmp
049a8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ac     D4 08 90 AD |  if_e	jmp	#LR__0339
049b0     82 01 00 FF 
049b4     A6 15 06 F6 | 	mov	arg02, ##@LR__5214
049b8     0F 13 02 F6 | 	mov	arg01, local01
049bc     04 C1 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 0D F2 | 	cmp	result1, #0 wz
049c4     C4 08 90 AD |  if_e	jmp	#LR__0340
049c8     82 01 00 FF 
049cc     AA 15 06 F6 | 	mov	arg02, ##@LR__5215
049d0     0F 13 02 F6 | 	mov	arg01, local01
049d4     EC C0 B1 FD | 	call	#__system___string_cmp
049d8     00 FA 0D F2 | 	cmp	result1, #0 wz
049dc     B4 08 90 AD |  if_e	jmp	#LR__0341
049e0     82 01 00 FF 
049e4     AF 15 06 F6 | 	mov	arg02, ##@LR__5216
049e8     0F 13 02 F6 | 	mov	arg01, local01
049ec     D4 C0 B1 FD | 	call	#__system___string_cmp
049f0     00 FA 0D F2 | 	cmp	result1, #0 wz
049f4     A4 08 90 AD |  if_e	jmp	#LR__0342
049f8     82 01 00 FF 
049fc     B3 15 06 F6 | 	mov	arg02, ##@LR__5217
04a00     0F 13 02 F6 | 	mov	arg01, local01
04a04     BC C0 B1 FD | 	call	#__system___string_cmp
04a08     00 FA 0D F2 | 	cmp	result1, #0 wz
04a0c     94 08 90 AD |  if_e	jmp	#LR__0343
04a10     82 01 00 FF 
04a14     B6 15 06 F6 | 	mov	arg02, ##@LR__5218
04a18     0F 13 02 F6 | 	mov	arg01, local01
04a1c     A4 C0 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 0D F2 | 	cmp	result1, #0 wz
04a24     84 08 90 AD |  if_e	jmp	#LR__0344
04a28     82 01 00 FF 
04a2c     BC 15 06 F6 | 	mov	arg02, ##@LR__5219
04a30     0F 13 02 F6 | 	mov	arg01, local01
04a34     8C C0 B1 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     74 08 90 AD |  if_e	jmp	#LR__0345
04a40     82 01 00 FF 
04a44     C0 15 06 F6 | 	mov	arg02, ##@LR__5220
04a48     0F 13 02 F6 | 	mov	arg01, local01
04a4c     74 C0 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     64 08 90 AD |  if_e	jmp	#LR__0346
04a58     82 01 00 FF 
04a5c     C4 15 06 F6 | 	mov	arg02, ##@LR__5221
04a60     0F 13 02 F6 | 	mov	arg01, local01
04a64     5C C0 B1 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     54 08 90 AD |  if_e	jmp	#LR__0347
04a70     82 01 00 FF 
04a74     CA 15 06 F6 | 	mov	arg02, ##@LR__5222
04a78     0F 13 02 F6 | 	mov	arg01, local01
04a7c     44 C0 B1 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     44 08 90 AD |  if_e	jmp	#LR__0348
04a88     82 01 00 FF 
04a8c     CF 15 06 F6 | 	mov	arg02, ##@LR__5223
04a90     0F 13 02 F6 | 	mov	arg01, local01
04a94     2C C0 B1 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     34 08 90 AD |  if_e	jmp	#LR__0349
04aa0     82 01 00 FF 
04aa4     D2 15 06 F6 | 	mov	arg02, ##@LR__5224
04aa8     0F 13 02 F6 | 	mov	arg01, local01
04aac     14 C0 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     24 08 90 AD |  if_e	jmp	#LR__0350
04ab8     82 01 00 FF 
04abc     D5 15 06 F6 | 	mov	arg02, ##@LR__5225
04ac0     0F 13 02 F6 | 	mov	arg01, local01
04ac4     FC BF B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     14 08 90 AD |  if_e	jmp	#LR__0351
04ad0     82 01 00 FF 
04ad4     D9 15 06 F6 | 	mov	arg02, ##@LR__5226
04ad8     0F 13 02 F6 | 	mov	arg01, local01
04adc     E4 BF B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     04 08 90 AD |  if_e	jmp	#LR__0352
04ae8     82 01 00 FF 
04aec     DC 15 06 F6 | 	mov	arg02, ##@LR__5227
04af0     0F 13 02 F6 | 	mov	arg01, local01
04af4     CC BF B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     F4 07 90 AD |  if_e	jmp	#LR__0353
04b00     82 01 00 FF 
04b04     E1 15 06 F6 | 	mov	arg02, ##@LR__5228
04b08     0F 13 02 F6 | 	mov	arg01, local01
04b0c     B4 BF B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     E4 07 90 AD |  if_e	jmp	#LR__0354
04b18     82 01 00 FF 
04b1c     E4 15 06 F6 | 	mov	arg02, ##@LR__5229
04b20     0F 13 02 F6 | 	mov	arg01, local01
04b24     9C BF B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     D4 07 90 AD |  if_e	jmp	#LR__0355
04b30     82 01 00 FF 
04b34     E9 15 06 F6 | 	mov	arg02, ##@LR__5230
04b38     0F 13 02 F6 | 	mov	arg01, local01
04b3c     84 BF B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     C4 07 90 AD |  if_e	jmp	#LR__0356
04b48     82 01 00 FF 
04b4c     ED 15 06 F6 | 	mov	arg02, ##@LR__5231
04b50     0F 13 02 F6 | 	mov	arg01, local01
04b54     6C BF B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     B4 07 90 AD |  if_e	jmp	#LR__0357
04b60     82 01 00 FF 
04b64     F3 15 06 F6 | 	mov	arg02, ##@LR__5232
04b68     0F 13 02 F6 | 	mov	arg01, local01
04b6c     54 BF B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     A4 07 90 AD |  if_e	jmp	#LR__0358
04b78     82 01 00 FF 
04b7c     F8 15 06 F6 | 	mov	arg02, ##@LR__5233
04b80     0F 13 02 F6 | 	mov	arg01, local01
04b84     3C BF B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     94 07 90 AD |  if_e	jmp	#LR__0359
04b90     82 01 00 FF 
04b94     FB 15 06 F6 | 	mov	arg02, ##@LR__5234
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     24 BF B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     84 07 90 AD |  if_e	jmp	#LR__0360
04ba8     83 01 00 FF 
04bac     01 14 06 F6 | 	mov	arg02, ##@LR__5235
04bb0     0F 13 02 F6 | 	mov	arg01, local01
04bb4     0C BF B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     74 07 90 AD |  if_e	jmp	#LR__0361
04bc0     83 01 00 FF 
04bc4     05 14 06 F6 | 	mov	arg02, ##@LR__5236
04bc8     0F 13 02 F6 | 	mov	arg01, local01
04bcc     F4 BE B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     64 07 90 AD |  if_e	jmp	#LR__0362
04bd8     83 01 00 FF 
04bdc     0A 14 06 F6 | 	mov	arg02, ##@LR__5237
04be0     0F 13 02 F6 | 	mov	arg01, local01
04be4     DC BE B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     54 07 90 AD |  if_e	jmp	#LR__0363
04bf0     83 01 00 FF 
04bf4     0D 14 06 F6 | 	mov	arg02, ##@LR__5238
04bf8     0F 13 02 F6 | 	mov	arg01, local01
04bfc     C4 BE B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     44 07 90 AD |  if_e	jmp	#LR__0364
04c08     83 01 00 FF 
04c0c     12 14 06 F6 | 	mov	arg02, ##@LR__5239
04c10     0F 13 02 F6 | 	mov	arg01, local01
04c14     AC BE B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     34 07 90 AD |  if_e	jmp	#LR__0365
04c20     83 01 00 FF 
04c24     18 14 06 F6 | 	mov	arg02, ##@LR__5240
04c28     0F 13 02 F6 | 	mov	arg01, local01
04c2c     94 BE B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     24 07 90 AD |  if_e	jmp	#LR__0366
04c38     83 01 00 FF 
04c3c     1C 14 06 F6 | 	mov	arg02, ##@LR__5241
04c40     0F 13 02 F6 | 	mov	arg01, local01
04c44     7C BE B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     14 07 90 AD |  if_e	jmp	#LR__0367
04c50     83 01 00 FF 
04c54     25 14 06 F6 | 	mov	arg02, ##@LR__5242
04c58     0F 13 02 F6 | 	mov	arg01, local01
04c5c     64 BE B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     04 07 90 AD |  if_e	jmp	#LR__0368
04c68     83 01 00 FF 
04c6c     2B 14 06 F6 | 	mov	arg02, ##@LR__5243
04c70     0F 13 02 F6 | 	mov	arg01, local01
04c74     4C BE B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     F4 06 90 AD |  if_e	jmp	#LR__0369
04c80     83 01 00 FF 
04c84     31 14 06 F6 | 	mov	arg02, ##@LR__5244
04c88     0F 13 02 F6 | 	mov	arg01, local01
04c8c     34 BE B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     E4 06 90 AD |  if_e	jmp	#LR__0370
04c98     83 01 00 FF 
04c9c     3A 14 06 F6 | 	mov	arg02, ##@LR__5245
04ca0     0F 13 02 F6 | 	mov	arg01, local01
04ca4     1C BE B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     D4 06 90 AD |  if_e	jmp	#LR__0371
04cb0     83 01 00 FF 
04cb4     44 14 06 F6 | 	mov	arg02, ##@LR__5246
04cb8     0F 13 02 F6 | 	mov	arg01, local01
04cbc     04 BE B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     C4 06 90 AD |  if_e	jmp	#LR__0372
04cc8     83 01 00 FF 
04ccc     4D 14 06 F6 | 	mov	arg02, ##@LR__5247
04cd0     0F 13 02 F6 | 	mov	arg01, local01
04cd4     EC BD B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     B4 06 90 AD |  if_e	jmp	#LR__0373
04ce0     83 01 00 FF 
04ce4     52 14 06 F6 | 	mov	arg02, ##@LR__5248
04ce8     0F 13 02 F6 | 	mov	arg01, local01
04cec     D4 BD B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     A4 06 90 AD |  if_e	jmp	#LR__0374
04cf8     83 01 00 FF 
04cfc     55 14 06 F6 | 	mov	arg02, ##@LR__5249
04d00     0F 13 02 F6 | 	mov	arg01, local01
04d04     BC BD B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     94 06 90 AD |  if_e	jmp	#LR__0375
04d10     83 01 00 FF 
04d14     5A 14 06 F6 | 	mov	arg02, ##@LR__5250
04d18     0F 13 02 F6 | 	mov	arg01, local01
04d1c     A4 BD B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     84 06 90 AD |  if_e	jmp	#LR__0376
04d28     83 01 00 FF 
04d2c     5E 14 06 F6 | 	mov	arg02, ##@LR__5251
04d30     0F 13 02 F6 | 	mov	arg01, local01
04d34     8C BD B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     74 06 90 AD |  if_e	jmp	#LR__0377
04d40     83 01 00 FF 
04d44     63 14 06 F6 | 	mov	arg02, ##@LR__5252
04d48     0F 13 02 F6 | 	mov	arg01, local01
04d4c     74 BD B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     64 06 90 AD |  if_e	jmp	#LR__0378
04d58     83 01 00 FF 
04d5c     67 14 06 F6 | 	mov	arg02, ##@LR__5253
04d60     0F 13 02 F6 | 	mov	arg01, local01
04d64     5C BD B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     54 06 90 AD |  if_e	jmp	#LR__0379
04d70     83 01 00 FF 
04d74     70 14 06 F6 | 	mov	arg02, ##@LR__5254
04d78     0F 13 02 F6 | 	mov	arg01, local01
04d7c     44 BD B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     44 06 90 AD |  if_e	jmp	#LR__0380
04d88     83 01 00 FF 
04d8c     75 14 06 F6 | 	mov	arg02, ##@LR__5255
04d90     0F 13 02 F6 | 	mov	arg01, local01
04d94     2C BD B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     34 06 90 AD |  if_e	jmp	#LR__0381
04da0     83 01 00 FF 
04da4     7B 14 06 F6 | 	mov	arg02, ##@LR__5256
04da8     0F 13 02 F6 | 	mov	arg01, local01
04dac     14 BD B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     24 06 90 AD |  if_e	jmp	#LR__0382
04db8     83 01 00 FF 
04dbc     7D 14 06 F6 | 	mov	arg02, ##@LR__5257
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     FC BC B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     14 06 90 AD |  if_e	jmp	#LR__0383
04dd0     83 01 00 FF 
04dd4     81 14 06 F6 | 	mov	arg02, ##@LR__5258
04dd8     0F 13 02 F6 | 	mov	arg01, local01
04ddc     E4 BC B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     04 06 90 AD |  if_e	jmp	#LR__0384
04de8     83 01 00 FF 
04dec     85 14 06 F6 | 	mov	arg02, ##@LR__5259
04df0     0F 13 02 F6 | 	mov	arg01, local01
04df4     CC BC B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     F4 05 90 AD |  if_e	jmp	#LR__0385
04e00     83 01 00 FF 
04e04     8D 14 06 F6 | 	mov	arg02, ##@LR__5260
04e08     0F 13 02 F6 | 	mov	arg01, local01
04e0c     B4 BC B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     E4 05 90 AD |  if_e	jmp	#LR__0386
04e18     83 01 00 FF 
04e1c     91 14 06 F6 | 	mov	arg02, ##@LR__5261
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     9C BC B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     D4 05 90 AD |  if_e	jmp	#LR__0387
04e30     83 01 00 FF 
04e34     93 14 06 F6 | 	mov	arg02, ##@LR__5262
04e38     0F 13 02 F6 | 	mov	arg01, local01
04e3c     84 BC B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     C4 05 90 AD |  if_e	jmp	#LR__0388
04e48     83 01 00 FF 
04e4c     9A 14 06 F6 | 	mov	arg02, ##@LR__5263
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     6C BC B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     B4 05 90 AD |  if_e	jmp	#LR__0389
04e60     83 01 00 FF 
04e64     9E 14 06 F6 | 	mov	arg02, ##@LR__5264
04e68     0F 13 02 F6 | 	mov	arg01, local01
04e6c     54 BC B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     A4 05 90 AD |  if_e	jmp	#LR__0390
04e78     83 01 00 FF 
04e7c     A3 14 06 F6 | 	mov	arg02, ##@LR__5265
04e80     0F 13 02 F6 | 	mov	arg01, local01
04e84     3C BC B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     94 05 90 AD |  if_e	jmp	#LR__0391
04e90     83 01 00 FF 
04e94     A6 14 06 F6 | 	mov	arg02, ##@LR__5266
04e98     0F 13 02 F6 | 	mov	arg01, local01
04e9c     24 BC B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     84 05 90 AD |  if_e	jmp	#LR__0392
04ea8     83 01 00 FF 
04eac     AF 14 06 F6 | 	mov	arg02, ##@LR__5267
04eb0     0F 13 02 F6 | 	mov	arg01, local01
04eb4     0C BC B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     74 05 90 AD |  if_e	jmp	#LR__0393
04ec0     83 01 00 FF 
04ec4     B3 14 06 F6 | 	mov	arg02, ##@LR__5268
04ec8     0F 13 02 F6 | 	mov	arg01, local01
04ecc     F4 BB B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     64 05 90 AD |  if_e	jmp	#LR__0394
04ed8     83 01 00 FF 
04edc     BA 14 06 F6 | 	mov	arg02, ##@LR__5269
04ee0     0F 13 02 F6 | 	mov	arg01, local01
04ee4     DC BB B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     54 05 90 AD |  if_e	jmp	#LR__0395
04ef0     83 01 00 FF 
04ef4     BE 14 06 F6 | 	mov	arg02, ##@LR__5270
04ef8     0F 13 02 F6 | 	mov	arg01, local01
04efc     C4 BB B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     44 05 90 AD |  if_e	jmp	#LR__0396
04f08     83 01 00 FF 
04f0c     C5 14 06 F6 | 	mov	arg02, ##@LR__5271
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     AC BB B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     34 05 90 AD |  if_e	jmp	#LR__0397
04f20     83 01 00 FF 
04f24     C9 14 06 F6 | 	mov	arg02, ##@LR__5272
04f28     0F 13 02 F6 | 	mov	arg01, local01
04f2c     94 BB B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     24 05 90 AD |  if_e	jmp	#LR__0398
04f38     83 01 00 FF 
04f3c     D0 14 06 F6 | 	mov	arg02, ##@LR__5273
04f40     0F 13 02 F6 | 	mov	arg01, local01
04f44     7C BB B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     14 05 90 AD |  if_e	jmp	#LR__0399
04f50     83 01 00 FF 
04f54     D3 14 06 F6 | 	mov	arg02, ##@LR__5274
04f58     0F 13 02 F6 | 	mov	arg01, local01
04f5c     64 BB B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     04 05 90 AD |  if_e	jmp	#LR__0400
04f68     83 01 00 FF 
04f6c     DE 14 06 F6 | 	mov	arg02, ##@LR__5275
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     4C BB B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     F4 04 90 AD |  if_e	jmp	#LR__0401
04f80     83 01 00 FF 
04f84     E2 14 06 F6 | 	mov	arg02, ##@LR__5276
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     34 BB B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     E4 04 90 AD |  if_e	jmp	#LR__0402
04f98     83 01 00 FF 
04f9c     E9 14 06 F6 | 	mov	arg02, ##@LR__5277
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     1C BB B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     D4 04 90 AD |  if_e	jmp	#LR__0403
04fb0     83 01 00 FF 
04fb4     ED 14 06 F6 | 	mov	arg02, ##@LR__5278
04fb8     0F 13 02 F6 | 	mov	arg01, local01
04fbc     04 BB B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     C4 04 90 AD |  if_e	jmp	#LR__0404
04fc8     83 01 00 FF 
04fcc     F5 14 06 F6 | 	mov	arg02, ##@LR__5279
04fd0     0F 13 02 F6 | 	mov	arg01, local01
04fd4     EC BA B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     B4 04 90 AD |  if_e	jmp	#LR__0405
04fe0     83 01 00 FF 
04fe4     F9 14 06 F6 | 	mov	arg02, ##@LR__5280
04fe8     0F 13 02 F6 | 	mov	arg01, local01
04fec     D4 BA B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     A4 04 90 AD |  if_e	jmp	#LR__0406
04ff8     83 01 00 FF 
04ffc     00 15 06 F6 | 	mov	arg02, ##@LR__5281
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     BC BA B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     94 04 90 AD |  if_e	jmp	#LR__0407
05010     83 01 00 FF 
05014     07 15 06 F6 | 	mov	arg02, ##@LR__5282
05018     0F 13 02 F6 | 	mov	arg01, local01
0501c     A4 BA B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     84 04 90 AD |  if_e	jmp	#LR__0408
05028     83 01 00 FF 
0502c     0B 15 06 F6 | 	mov	arg02, ##@LR__5283
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     8C BA B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     74 04 90 AD |  if_e	jmp	#LR__0409
05040     83 01 00 FF 
05044     11 15 06 F6 | 	mov	arg02, ##@LR__5284
05048     0F 13 02 F6 | 	mov	arg01, local01
0504c     74 BA B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     64 04 90 AD |  if_e	jmp	#LR__0410
05058     83 01 00 FF 
0505c     15 15 06 F6 | 	mov	arg02, ##@LR__5285
05060     0F 13 02 F6 | 	mov	arg01, local01
05064     5C BA B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     54 04 90 AD |  if_e	jmp	#LR__0411
05070     83 01 00 FF 
05074     1C 15 06 F6 | 	mov	arg02, ##@LR__5286
05078     0F 13 02 F6 | 	mov	arg01, local01
0507c     44 BA B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     44 04 90 AD |  if_e	jmp	#LR__0412
05088     83 01 00 FF 
0508c     21 15 06 F6 | 	mov	arg02, ##@LR__5287
05090     0F 13 02 F6 | 	mov	arg01, local01
05094     2C BA B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     34 04 90 AD |  if_e	jmp	#LR__0413
050a0     83 01 00 FF 
050a4     26 15 06 F6 | 	mov	arg02, ##@LR__5288
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     14 BA B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     24 04 90 AD |  if_e	jmp	#LR__0414
050b8     83 01 00 FF 
050bc     2D 15 06 F6 | 	mov	arg02, ##@LR__5289
050c0     0F 13 02 F6 | 	mov	arg01, local01
050c4     FC B9 B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     14 04 90 AD |  if_e	jmp	#LR__0415
050d0     83 01 00 FF 
050d4     37 15 06 F6 | 	mov	arg02, ##@LR__5290
050d8     0F 13 02 F6 | 	mov	arg01, local01
050dc     E4 B9 B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     04 04 90 AD |  if_e	jmp	#LR__0416
050e8     83 01 00 FF 
050ec     3B 15 06 F6 | 	mov	arg02, ##@LR__5291
050f0     0F 13 02 F6 | 	mov	arg01, local01
050f4     CC B9 B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     F4 03 90 AD |  if_e	jmp	#LR__0417
05100     83 01 00 FF 
05104     43 15 06 F6 | 	mov	arg02, ##@LR__5292
05108     0F 13 02 F6 | 	mov	arg01, local01
0510c     B4 B9 B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     E4 03 90 AD |  if_e	jmp	#LR__0418
05118     83 01 00 FF 
0511c     47 15 06 F6 | 	mov	arg02, ##@LR__5293
05120     0F 13 02 F6 | 	mov	arg01, local01
05124     9C B9 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     D4 03 90 AD |  if_e	jmp	#LR__0419
05130     83 01 00 FF 
05134     4D 15 06 F6 | 	mov	arg02, ##@LR__5294
05138     0F 13 02 F6 | 	mov	arg01, local01
0513c     84 B9 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     C4 03 90 AD |  if_e	jmp	#LR__0420
05148     C8 03 90 FD | 	jmp	#LR__0421
0514c                 | LR__0300
0514c     5C FA 05 F6 | 	mov	result1, #92
05150     C4 03 90 FD | 	jmp	#LR__0422
05154                 | LR__0301
05154     5C FA 05 F6 | 	mov	result1, #92
05158     BC 03 90 FD | 	jmp	#LR__0422
0515c                 | LR__0302
0515c     47 FA 05 F6 | 	mov	result1, #71
05160     B4 03 90 FD | 	jmp	#LR__0422
05164                 | LR__0303
05164     59 FA 05 F6 | 	mov	result1, #89
05168     AC 03 90 FD | 	jmp	#LR__0422
0516c                 | LR__0304
0516c     59 FA 05 F6 | 	mov	result1, #89
05170     A4 03 90 FD | 	jmp	#LR__0422
05174                 | LR__0305
05174     AE FA 05 F6 | 	mov	result1, #174
05178     9C 03 90 FD | 	jmp	#LR__0422
0517c                 | LR__0306
0517c     AE FA 05 F6 | 	mov	result1, #174
05180     94 03 90 FD | 	jmp	#LR__0422
05184                 | LR__0307
05184     B1 FA 05 F6 | 	mov	result1, #177
05188     8C 03 90 FD | 	jmp	#LR__0422
0518c                 | LR__0308
0518c     B1 FA 05 F6 | 	mov	result1, #177
05190     84 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0309
05194     AF FA 05 F6 | 	mov	result1, #175
05198     7C 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0310
0519c     AF FA 05 F6 | 	mov	result1, #175
051a0     74 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0311
051a4     B0 FA 05 F6 | 	mov	result1, #176
051a8     6C 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0312
051ac     B0 FA 05 F6 | 	mov	result1, #176
051b0     64 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0313
051b4     45 FA 05 F6 | 	mov	result1, #69
051b8     5C 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0314
051bc     45 FA 05 F6 | 	mov	result1, #69
051c0     54 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0315
051c4     69 FA 05 F6 | 	mov	result1, #105
051c8     4C 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0316
051cc     B4 FA 05 F6 | 	mov	result1, #180
051d0     44 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0317
051d4     40 FA 05 F6 | 	mov	result1, #64
051d8     3C 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0318
051dc     49 FA 05 F6 | 	mov	result1, #73
051e0     34 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0319
051e4     49 FA 05 F6 | 	mov	result1, #73
051e8     2C 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0320
051ec     50 FA 05 F6 | 	mov	result1, #80
051f0     24 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0321
051f4     50 FA 05 F6 | 	mov	result1, #80
051f8     1C 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0322
051fc     68 FA 05 F6 | 	mov	result1, #104
05200     14 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0323
05204     73 FA 05 F6 | 	mov	result1, #115
05208     0C 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0324
0520c     74 FA 05 F6 | 	mov	result1, #116
05210     04 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0325
05214     6C FA 05 F6 | 	mov	result1, #108
05218     FC 02 90 FD | 	jmp	#LR__0422
0521c                 | LR__0326
0521c     6C FA 05 F6 | 	mov	result1, #108
05220     F4 02 90 FD | 	jmp	#LR__0422
05224                 | LR__0327
05224     89 FA 05 F6 | 	mov	result1, #137
05228     EC 02 90 FD | 	jmp	#LR__0422
0522c                 | LR__0328
0522c     72 FA 05 F6 | 	mov	result1, #114
05230     E4 02 90 FD | 	jmp	#LR__0422
05234                 | LR__0329
05234     5D FA 05 F6 | 	mov	result1, #93
05238     DC 02 90 FD | 	jmp	#LR__0422
0523c                 | LR__0330
0523c     96 FA 05 F6 | 	mov	result1, #150
05240     D4 02 90 FD | 	jmp	#LR__0422
05244                 | LR__0331
05244     43 FA 05 F6 | 	mov	result1, #67
05248     CC 02 90 FD | 	jmp	#LR__0422
0524c                 | LR__0332
0524c     43 FA 05 F6 | 	mov	result1, #67
05250     C4 02 90 FD | 	jmp	#LR__0422
05254                 | LR__0333
05254     5A FA 05 F6 | 	mov	result1, #90
05258     BC 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0334
0525c     AB FA 05 F6 | 	mov	result1, #171
05260     B4 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0335
05264     BD FA 05 F6 | 	mov	result1, #189
05268     AC 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0336
0526c     BD FA 05 F6 | 	mov	result1, #189
05270     A4 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0337
05274     46 FA 05 F6 | 	mov	result1, #70
05278     9C 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0338
0527c     46 FA 05 F6 | 	mov	result1, #70
05280     94 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0339
05284     71 FA 05 F6 | 	mov	result1, #113
05288     8C 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0340
0528c     71 FA 05 F6 | 	mov	result1, #113
05290     84 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0341
05294     60 FA 05 F6 | 	mov	result1, #96
05298     7C 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0342
0529c     4A FA 05 F6 | 	mov	result1, #74
052a0     74 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0343
052a4     4A FA 05 F6 | 	mov	result1, #74
052a8     6C 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0344
052ac     48 FA 05 F6 | 	mov	result1, #72
052b0     64 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0345
052b4     48 FA 05 F6 | 	mov	result1, #72
052b8     5C 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0346
052bc     BB FA 05 F6 | 	mov	result1, #187
052c0     54 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0347
052c4     A9 FA 05 F6 | 	mov	result1, #169
052c8     4C 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0348
052cc     4E FA 05 F6 | 	mov	result1, #78
052d0     44 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0349
052d4     4E FA 05 F6 | 	mov	result1, #78
052d8     3C 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0350
052dc     58 FA 05 F6 | 	mov	result1, #88
052e0     34 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0351
052e4     5F FA 05 F6 | 	mov	result1, #95
052e8     2C 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0352
052ec     5F FA 05 F6 | 	mov	result1, #95
052f0     24 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0353
052f4     4C FA 05 F6 | 	mov	result1, #76
052f8     1C 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0354
052fc     4C FA 05 F6 | 	mov	result1, #76
05300     14 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0355
05304     52 FA 05 F6 | 	mov	result1, #82
05308     0C 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0356
0530c     52 FA 05 F6 | 	mov	result1, #82
05310     04 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0357
05314     97 FA 05 F6 | 	mov	result1, #151
05318     FC 01 90 FD | 	jmp	#LR__0422
0531c                 | LR__0358
0531c     61 FA 05 F6 | 	mov	result1, #97
05320     F4 01 90 FD | 	jmp	#LR__0422
05324                 | LR__0359
05324     61 FA 05 F6 | 	mov	result1, #97
05328     EC 01 90 FD | 	jmp	#LR__0422
0532c                 | LR__0360
0532c     63 FA 05 F6 | 	mov	result1, #99
05330     E4 01 90 FD | 	jmp	#LR__0422
05334                 | LR__0361
05334     41 FA 05 F6 | 	mov	result1, #65
05338     DC 01 90 FD | 	jmp	#LR__0422
0533c                 | LR__0362
0533c     4B FA 05 F6 | 	mov	result1, #75
05340     D4 01 90 FD | 	jmp	#LR__0422
05344                 | LR__0363
05344     4B FA 05 F6 | 	mov	result1, #75
05348     CC 01 90 FD | 	jmp	#LR__0422
0534c                 | LR__0364
0534c     B3 FA 05 F6 | 	mov	result1, #179
05350     C4 01 90 FD | 	jmp	#LR__0422
05354                 | LR__0365
05354     5E FA 05 F6 | 	mov	result1, #94
05358     BC 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0366
0535c     5E FA 05 F6 | 	mov	result1, #94
05360     B4 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0367
05364     7C FA 05 F6 | 	mov	result1, #124
05368     AC 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0368
0536c     7E FA 05 F6 | 	mov	result1, #126
05370     A4 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0369
05374     7D FA 05 F6 | 	mov	result1, #125
05378     9C 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0370
0537c     7F FA 05 F6 | 	mov	result1, #127
05380     94 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0371
05384     80 FA 05 F6 | 	mov	result1, #128
05388     8C 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0372
0538c     55 FA 05 F6 | 	mov	result1, #85
05390     84 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0373
05394     75 FA 05 F6 | 	mov	result1, #117
05398     7C 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0374
0539c     75 FA 05 F6 | 	mov	result1, #117
053a0     74 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0375
053a4     42 FA 05 F6 | 	mov	result1, #66
053a8     6C 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0376
053ac     42 FA 05 F6 | 	mov	result1, #66
053b0     64 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0377
053b4     95 FA 05 F6 | 	mov	result1, #149
053b8     5C 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0378
053bc     AC FA 05 F6 | 	mov	result1, #172
053c0     54 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0379
053c4     81 FA 05 F6 | 	mov	result1, #129
053c8     4C 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0380
053cc     81 FA 05 F6 | 	mov	result1, #129
053d0     44 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0381
053d4     44 FA 05 F6 | 	mov	result1, #68
053d8     3C 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0382
053dc     44 FA 05 F6 | 	mov	result1, #68
053e0     34 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0383
053e4     BC FA 05 F6 | 	mov	result1, #188
053e8     2C 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0384
053ec     88 FA 05 F6 | 	mov	result1, #136
053f0     24 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0385
053f4     92 FA 05 F6 | 	mov	result1, #146
053f8     1C 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0386
053fc     BE FA 05 F6 | 	mov	result1, #190
05400     14 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0387
05404     BE FA 05 F6 | 	mov	result1, #190
05408     0C 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0388
0540c     AA FA 05 F6 | 	mov	result1, #170
05410     04 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0389
05414     4D FA 05 F6 | 	mov	result1, #77
05418     FC 00 90 FD | 	jmp	#LR__0422
0541c                 | LR__0390
0541c     51 FA 05 F6 | 	mov	result1, #81
05420     F4 00 90 FD | 	jmp	#LR__0422
05424                 | LR__0391
05424     51 FA 05 F6 | 	mov	result1, #81
05428     EC 00 90 FD | 	jmp	#LR__0422
0542c                 | LR__0392
0542c     8E FA 05 F6 | 	mov	result1, #142
05430     E4 00 90 FD | 	jmp	#LR__0422
05434                 | LR__0393
05434     8E FA 05 F6 | 	mov	result1, #142
05438     DC 00 90 FD | 	jmp	#LR__0422
0543c                 | LR__0394
0543c     90 FA 05 F6 | 	mov	result1, #144
05440     D4 00 90 FD | 	jmp	#LR__0422
05444                 | LR__0395
05444     90 FA 05 F6 | 	mov	result1, #144
05448     CC 00 90 FD | 	jmp	#LR__0422
0544c                 | LR__0396
0544c     8D FA 05 F6 | 	mov	result1, #141
05450     C4 00 90 FD | 	jmp	#LR__0422
05454                 | LR__0397
05454     8D FA 05 F6 | 	mov	result1, #141
05458     BC 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0398
0545c     8C FA 05 F6 | 	mov	result1, #140
05460     B4 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0399
05464     8C FA 05 F6 | 	mov	result1, #140
05468     AC 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0400
0546c     91 FA 05 F6 | 	mov	result1, #145
05470     A4 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0401
05474     91 FA 05 F6 | 	mov	result1, #145
05478     9C 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0402
0547c     8B FA 05 F6 | 	mov	result1, #139
05480     94 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0403
05484     8B FA 05 F6 | 	mov	result1, #139
05488     8C 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0404
0548c     8F FA 05 F6 | 	mov	result1, #143
05490     84 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0405
05494     8F FA 05 F6 | 	mov	result1, #143
05498     7C 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0406
0549c     8F FA 05 F6 | 	mov	result1, #143
054a0     74 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0407
054a4     B2 FA 05 F6 | 	mov	result1, #178
054a8     6C 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0408
054ac     B2 FA 05 F6 | 	mov	result1, #178
054b0     64 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0409
054b4     75 FA 05 F6 | 	mov	result1, #117
054b8     5C 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0410
054bc     75 FA 05 F6 | 	mov	result1, #117
054c0     54 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0411
054c4     6D FA 05 F6 | 	mov	result1, #109
054c8     4C 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0412
054cc     6D FA 05 F6 | 	mov	result1, #109
054d0     44 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0413
054d4     5B FA 05 F6 | 	mov	result1, #91
054d8     3C 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0414
054dc     56 FA 05 F6 | 	mov	result1, #86
054e0     34 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0415
054e4     70 FA 05 F6 | 	mov	result1, #112
054e8     2C 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0416
054ec     70 FA 05 F6 | 	mov	result1, #112
054f0     24 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0417
054f4     57 FA 05 F6 | 	mov	result1, #87
054f8     1C 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0418
054fc     57 FA 05 F6 | 	mov	result1, #87
05500     14 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0419
05504     77 FA 05 F6 | 	mov	result1, #119
05508     0C 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0420
0550c     78 FA 05 F6 | 	mov	result1, #120
05510     04 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0421
05514     00 FA 05 F6 | 	mov	result1, #0
05518                 | LR__0422
05518     A7 F0 03 F6 | 	mov	ptra, fp
0551c     B2 00 A0 FD | 	call	#popregs_
05520                 | _iscommand_ret
05520     2D 00 64 FD | 	ret
05524                 | 
05524                 | ' 
05524                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05524                 | ' 
05524                 | ' function isfunction(s as string) as ubyte
05524                 | _isfunction
05524     01 4A 05 F6 | 	mov	COUNT_, #1
05528     A8 00 A0 FD | 	call	#pushregs_
0552c                 | ' 
0552c                 | ' select case s
0552c     09 1F 02 F6 | 	mov	local01, arg01
05530     83 01 00 FF 
05534     53 15 06 F6 | 	mov	arg02, ##@LR__5295
05538     0F 13 02 F6 | 	mov	arg01, local01
0553c     84 B5 B1 FD | 	call	#__system___string_cmp
05540     00 FA 0D F2 | 	cmp	result1, #0 wz
05544     0C 04 90 AD |  if_e	jmp	#LR__0430
05548     83 01 00 FF 
0554c     57 15 06 F6 | 	mov	arg02, ##@LR__5296
05550     0F 13 02 F6 | 	mov	arg01, local01
05554     6C B5 B1 FD | 	call	#__system___string_cmp
05558     00 FA 0D F2 | 	cmp	result1, #0 wz
0555c     FC 03 90 AD |  if_e	jmp	#LR__0431
05560     83 01 00 FF 
05564     5C 15 06 F6 | 	mov	arg02, ##@LR__5297
05568     0F 13 02 F6 | 	mov	arg01, local01
0556c     54 B5 B1 FD | 	call	#__system___string_cmp
05570     00 FA 0D F2 | 	cmp	result1, #0 wz
05574     EC 03 90 AD |  if_e	jmp	#LR__0432
05578     83 01 00 FF 
0557c     60 15 06 F6 | 	mov	arg02, ##@LR__5298
05580     0F 13 02 F6 | 	mov	arg01, local01
05584     3C B5 B1 FD | 	call	#__system___string_cmp
05588     00 FA 0D F2 | 	cmp	result1, #0 wz
0558c     DC 03 90 AD |  if_e	jmp	#LR__0433
05590     83 01 00 FF 
05594     65 15 06 F6 | 	mov	arg02, ##@LR__5299
05598     0F 13 02 F6 | 	mov	arg01, local01
0559c     24 B5 B1 FD | 	call	#__system___string_cmp
055a0     00 FA 0D F2 | 	cmp	result1, #0 wz
055a4     CC 03 90 AD |  if_e	jmp	#LR__0434
055a8     83 01 00 FF 
055ac     69 15 06 F6 | 	mov	arg02, ##@LR__5300
055b0     0F 13 02 F6 | 	mov	arg01, local01
055b4     0C B5 B1 FD | 	call	#__system___string_cmp
055b8     00 FA 0D F2 | 	cmp	result1, #0 wz
055bc     BC 03 90 AD |  if_e	jmp	#LR__0435
055c0     83 01 00 FF 
055c4     6E 15 06 F6 | 	mov	arg02, ##@LR__5301
055c8     0F 13 02 F6 | 	mov	arg01, local01
055cc     F4 B4 B1 FD | 	call	#__system___string_cmp
055d0     00 FA 0D F2 | 	cmp	result1, #0 wz
055d4     AC 03 90 AD |  if_e	jmp	#LR__0436
055d8     83 01 00 FF 
055dc     72 15 06 F6 | 	mov	arg02, ##@LR__5302
055e0     0F 13 02 F6 | 	mov	arg01, local01
055e4     DC B4 B1 FD | 	call	#__system___string_cmp
055e8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ec     9C 03 90 AD |  if_e	jmp	#LR__0437
055f0     83 01 00 FF 
055f4     77 15 06 F6 | 	mov	arg02, ##@LR__5303
055f8     0F 13 02 F6 | 	mov	arg01, local01
055fc     C4 B4 B1 FD | 	call	#__system___string_cmp
05600     00 FA 0D F2 | 	cmp	result1, #0 wz
05604     8C 03 90 AD |  if_e	jmp	#LR__0438
05608     83 01 00 FF 
0560c     7C 15 06 F6 | 	mov	arg02, ##@LR__5304
05610     0F 13 02 F6 | 	mov	arg01, local01
05614     AC B4 B1 FD | 	call	#__system___string_cmp
05618     00 FA 0D F2 | 	cmp	result1, #0 wz
0561c     7C 03 90 AD |  if_e	jmp	#LR__0439
05620     83 01 00 FF 
05624     80 15 06 F6 | 	mov	arg02, ##@LR__5305
05628     0F 13 02 F6 | 	mov	arg01, local01
0562c     94 B4 B1 FD | 	call	#__system___string_cmp
05630     00 FA 0D F2 | 	cmp	result1, #0 wz
05634     6C 03 90 AD |  if_e	jmp	#LR__0440
05638     83 01 00 FF 
0563c     86 15 06 F6 | 	mov	arg02, ##@LR__5306
05640     0F 13 02 F6 | 	mov	arg01, local01
05644     7C B4 B1 FD | 	call	#__system___string_cmp
05648     00 FA 0D F2 | 	cmp	result1, #0 wz
0564c     5C 03 90 AD |  if_e	jmp	#LR__0441
05650     83 01 00 FF 
05654     8A 15 06 F6 | 	mov	arg02, ##@LR__5307
05658     0F 13 02 F6 | 	mov	arg01, local01
0565c     64 B4 B1 FD | 	call	#__system___string_cmp
05660     00 FA 0D F2 | 	cmp	result1, #0 wz
05664     4C 03 90 AD |  if_e	jmp	#LR__0442
05668     83 01 00 FF 
0566c     93 15 06 F6 | 	mov	arg02, ##@LR__5308
05670     0F 13 02 F6 | 	mov	arg01, local01
05674     4C B4 B1 FD | 	call	#__system___string_cmp
05678     00 FA 0D F2 | 	cmp	result1, #0 wz
0567c     3C 03 90 AD |  if_e	jmp	#LR__0443
05680     83 01 00 FF 
05684     97 15 06 F6 | 	mov	arg02, ##@LR__5309
05688     0F 13 02 F6 | 	mov	arg01, local01
0568c     34 B4 B1 FD | 	call	#__system___string_cmp
05690     00 FA 0D F2 | 	cmp	result1, #0 wz
05694     2C 03 90 AD |  if_e	jmp	#LR__0444
05698     83 01 00 FF 
0569c     A5 15 06 F6 | 	mov	arg02, ##@LR__5310
056a0     0F 13 02 F6 | 	mov	arg01, local01
056a4     1C B4 B1 FD | 	call	#__system___string_cmp
056a8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ac     1C 03 90 AD |  if_e	jmp	#LR__0445
056b0     83 01 00 FF 
056b4     B2 15 06 F6 | 	mov	arg02, ##@LR__5311
056b8     0F 13 02 F6 | 	mov	arg01, local01
056bc     04 B4 B1 FD | 	call	#__system___string_cmp
056c0     00 FA 0D F2 | 	cmp	result1, #0 wz
056c4     0C 03 90 AD |  if_e	jmp	#LR__0446
056c8     83 01 00 FF 
056cc     BA 15 06 F6 | 	mov	arg02, ##@LR__5312
056d0     0F 13 02 F6 | 	mov	arg01, local01
056d4     EC B3 B1 FD | 	call	#__system___string_cmp
056d8     00 FA 0D F2 | 	cmp	result1, #0 wz
056dc     FC 02 90 AD |  if_e	jmp	#LR__0447
056e0     83 01 00 FF 
056e4     BF 15 06 F6 | 	mov	arg02, ##@LR__5313
056e8     0F 13 02 F6 | 	mov	arg01, local01
056ec     D4 B3 B1 FD | 	call	#__system___string_cmp
056f0     00 FA 0D F2 | 	cmp	result1, #0 wz
056f4     EC 02 90 AD |  if_e	jmp	#LR__0448
056f8     83 01 00 FF 
056fc     C6 15 06 F6 | 	mov	arg02, ##@LR__5314
05700     0F 13 02 F6 | 	mov	arg01, local01
05704     BC B3 B1 FD | 	call	#__system___string_cmp
05708     00 FA 0D F2 | 	cmp	result1, #0 wz
0570c     DC 02 90 AD |  if_e	jmp	#LR__0449
05710     83 01 00 FF 
05714     CA 15 06 F6 | 	mov	arg02, ##@LR__5315
05718     0F 13 02 F6 | 	mov	arg01, local01
0571c     A4 B3 B1 FD | 	call	#__system___string_cmp
05720     00 FA 0D F2 | 	cmp	result1, #0 wz
05724     CC 02 90 AD |  if_e	jmp	#LR__0450
05728     83 01 00 FF 
0572c     D0 15 06 F6 | 	mov	arg02, ##@LR__5316
05730     0F 13 02 F6 | 	mov	arg01, local01
05734     8C B3 B1 FD | 	call	#__system___string_cmp
05738     00 FA 0D F2 | 	cmp	result1, #0 wz
0573c     BC 02 90 AD |  if_e	jmp	#LR__0451
05740     83 01 00 FF 
05744     D4 15 06 F6 | 	mov	arg02, ##@LR__5317
05748     0F 13 02 F6 | 	mov	arg01, local01
0574c     74 B3 B1 FD | 	call	#__system___string_cmp
05750     00 FA 0D F2 | 	cmp	result1, #0 wz
05754     AC 02 90 AD |  if_e	jmp	#LR__0452
05758     83 01 00 FF 
0575c     D8 15 06 F6 | 	mov	arg02, ##@LR__5318
05760     0F 13 02 F6 | 	mov	arg01, local01
05764     5C B3 B1 FD | 	call	#__system___string_cmp
05768     00 FA 0D F2 | 	cmp	result1, #0 wz
0576c     9C 02 90 AD |  if_e	jmp	#LR__0453
05770     83 01 00 FF 
05774     DE 15 06 F6 | 	mov	arg02, ##@LR__5319
05778     0F 13 02 F6 | 	mov	arg01, local01
0577c     44 B3 B1 FD | 	call	#__system___string_cmp
05780     00 FA 0D F2 | 	cmp	result1, #0 wz
05784     8C 02 90 AD |  if_e	jmp	#LR__0454
05788     83 01 00 FF 
0578c     E3 15 06 F6 | 	mov	arg02, ##@LR__5320
05790     0F 13 02 F6 | 	mov	arg01, local01
05794     2C B3 B1 FD | 	call	#__system___string_cmp
05798     00 FA 0D F2 | 	cmp	result1, #0 wz
0579c     7C 02 90 AD |  if_e	jmp	#LR__0455
057a0     83 01 00 FF 
057a4     EA 15 06 F6 | 	mov	arg02, ##@LR__5321
057a8     0F 13 02 F6 | 	mov	arg01, local01
057ac     14 B3 B1 FD | 	call	#__system___string_cmp
057b0     00 FA 0D F2 | 	cmp	result1, #0 wz
057b4     6C 02 90 AD |  if_e	jmp	#LR__0456
057b8     83 01 00 FF 
057bc     F1 15 06 F6 | 	mov	arg02, ##@LR__5322
057c0     0F 13 02 F6 | 	mov	arg01, local01
057c4     FC B2 B1 FD | 	call	#__system___string_cmp
057c8     00 FA 0D F2 | 	cmp	result1, #0 wz
057cc     5C 02 90 AD |  if_e	jmp	#LR__0457
057d0     83 01 00 FF 
057d4     F8 15 06 F6 | 	mov	arg02, ##@LR__5323
057d8     0F 13 02 F6 | 	mov	arg01, local01
057dc     E4 B2 B1 FD | 	call	#__system___string_cmp
057e0     00 FA 0D F2 | 	cmp	result1, #0 wz
057e4     4C 02 90 AD |  if_e	jmp	#LR__0458
057e8     83 01 00 FF 
057ec     FF 15 06 F6 | 	mov	arg02, ##@LR__5324
057f0     0F 13 02 F6 | 	mov	arg01, local01
057f4     CC B2 B1 FD | 	call	#__system___string_cmp
057f8     00 FA 0D F2 | 	cmp	result1, #0 wz
057fc     3C 02 90 AD |  if_e	jmp	#LR__0459
05800     84 01 00 FF 
05804     04 14 06 F6 | 	mov	arg02, ##@LR__5325
05808     0F 13 02 F6 | 	mov	arg01, local01
0580c     B4 B2 B1 FD | 	call	#__system___string_cmp
05810     00 FA 0D F2 | 	cmp	result1, #0 wz
05814     2C 02 90 AD |  if_e	jmp	#LR__0460
05818     84 01 00 FF 
0581c     0C 14 06 F6 | 	mov	arg02, ##@LR__5326
05820     0F 13 02 F6 | 	mov	arg01, local01
05824     9C B2 B1 FD | 	call	#__system___string_cmp
05828     00 FA 0D F2 | 	cmp	result1, #0 wz
0582c     1C 02 90 AD |  if_e	jmp	#LR__0461
05830     84 01 00 FF 
05834     12 14 06 F6 | 	mov	arg02, ##@LR__5327
05838     0F 13 02 F6 | 	mov	arg01, local01
0583c     84 B2 B1 FD | 	call	#__system___string_cmp
05840     00 FA 0D F2 | 	cmp	result1, #0 wz
05844     0C 02 90 AD |  if_e	jmp	#LR__0462
05848     84 01 00 FF 
0584c     19 14 06 F6 | 	mov	arg02, ##@LR__5328
05850     0F 13 02 F6 | 	mov	arg01, local01
05854     6C B2 B1 FD | 	call	#__system___string_cmp
05858     00 FA 0D F2 | 	cmp	result1, #0 wz
0585c     FC 01 90 AD |  if_e	jmp	#LR__0463
05860     84 01 00 FF 
05864     1F 14 06 F6 | 	mov	arg02, ##@LR__5329
05868     0F 13 02 F6 | 	mov	arg01, local01
0586c     54 B2 B1 FD | 	call	#__system___string_cmp
05870     00 FA 0D F2 | 	cmp	result1, #0 wz
05874     EC 01 90 AD |  if_e	jmp	#LR__0464
05878     84 01 00 FF 
0587c     25 14 06 F6 | 	mov	arg02, ##@LR__5330
05880     0F 13 02 F6 | 	mov	arg01, local01
05884     3C B2 B1 FD | 	call	#__system___string_cmp
05888     00 FA 0D F2 | 	cmp	result1, #0 wz
0588c     DC 01 90 AD |  if_e	jmp	#LR__0465
05890     84 01 00 FF 
05894     29 14 06 F6 | 	mov	arg02, ##@LR__5331
05898     0F 13 02 F6 | 	mov	arg01, local01
0589c     24 B2 B1 FD | 	call	#__system___string_cmp
058a0     00 FA 0D F2 | 	cmp	result1, #0 wz
058a4     CC 01 90 AD |  if_e	jmp	#LR__0466
058a8     84 01 00 FF 
058ac     2D 14 06 F6 | 	mov	arg02, ##@LR__5332
058b0     0F 13 02 F6 | 	mov	arg01, local01
058b4     0C B2 B1 FD | 	call	#__system___string_cmp
058b8     00 FA 0D F2 | 	cmp	result1, #0 wz
058bc     BC 01 90 AD |  if_e	jmp	#LR__0467
058c0     84 01 00 FF 
058c4     31 14 06 F6 | 	mov	arg02, ##@LR__5333
058c8     0F 13 02 F6 | 	mov	arg01, local01
058cc     F4 B1 B1 FD | 	call	#__system___string_cmp
058d0     00 FA 0D F2 | 	cmp	result1, #0 wz
058d4     AC 01 90 AD |  if_e	jmp	#LR__0468
058d8     84 01 00 FF 
058dc     37 14 06 F6 | 	mov	arg02, ##@LR__5334
058e0     0F 13 02 F6 | 	mov	arg01, local01
058e4     DC B1 B1 FD | 	call	#__system___string_cmp
058e8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ec     9C 01 90 AD |  if_e	jmp	#LR__0469
058f0     84 01 00 FF 
058f4     3D 14 06 F6 | 	mov	arg02, ##@LR__5335
058f8     0F 13 02 F6 | 	mov	arg01, local01
058fc     C4 B1 B1 FD | 	call	#__system___string_cmp
05900     00 FA 0D F2 | 	cmp	result1, #0 wz
05904     8C 01 90 AD |  if_e	jmp	#LR__0470
05908     84 01 00 FF 
0590c     42 14 06 F6 | 	mov	arg02, ##@LR__5336
05910     0F 13 02 F6 | 	mov	arg01, local01
05914     AC B1 B1 FD | 	call	#__system___string_cmp
05918     00 FA 0D F2 | 	cmp	result1, #0 wz
0591c     7C 01 90 AD |  if_e	jmp	#LR__0471
05920     84 01 00 FF 
05924     46 14 06 F6 | 	mov	arg02, ##@LR__5337
05928     0F 13 02 F6 | 	mov	arg01, local01
0592c     94 B1 B1 FD | 	call	#__system___string_cmp
05930     00 FA 0D F2 | 	cmp	result1, #0 wz
05934     6C 01 90 AD |  if_e	jmp	#LR__0472
05938     84 01 00 FF 
0593c     4A 14 06 F6 | 	mov	arg02, ##@LR__5338
05940     0F 13 02 F6 | 	mov	arg01, local01
05944     7C B1 B1 FD | 	call	#__system___string_cmp
05948     00 FA 0D F2 | 	cmp	result1, #0 wz
0594c     5C 01 90 AD |  if_e	jmp	#LR__0473
05950     60 01 90 FD | 	jmp	#LR__0474
05954                 | LR__0430
05954     9E FA 05 F6 | 	mov	result1, #158
05958     5C 01 90 FD | 	jmp	#LR__0475
0595c                 | LR__0431
0595c     85 FA 05 F6 | 	mov	result1, #133
05960     54 01 90 FD | 	jmp	#LR__0475
05964                 | LR__0432
05964     9B FA 05 F6 | 	mov	result1, #155
05968     4C 01 90 FD | 	jmp	#LR__0475
0596c                 | LR__0433
0596c     9B FA 05 F6 | 	mov	result1, #155
05970     44 01 90 FD | 	jmp	#LR__0475
05974                 | LR__0434
05974     A7 FA 05 F6 | 	mov	result1, #167
05978     3C 01 90 FD | 	jmp	#LR__0475
0597c                 | LR__0435
0597c     84 FA 05 F6 | 	mov	result1, #132
05980     34 01 90 FD | 	jmp	#LR__0475
05984                 | LR__0436
05984     86 FA 05 F6 | 	mov	result1, #134
05988     2C 01 90 FD | 	jmp	#LR__0475
0598c                 | LR__0437
0598c     A2 FA 05 F6 | 	mov	result1, #162
05990     24 01 90 FD | 	jmp	#LR__0475
05994                 | LR__0438
05994     9F FA 05 F6 | 	mov	result1, #159
05998     1C 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0439
0599c     82 FA 05 F6 | 	mov	result1, #130
059a0     14 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0440
059a4     99 FA 05 F6 | 	mov	result1, #153
059a8     0C 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0441
059ac     9C FA 05 F6 | 	mov	result1, #156
059b0     04 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0442
059b4     6F FA 05 F6 | 	mov	result1, #111
059b8     FC 00 90 FD | 	jmp	#LR__0475
059bc                 | LR__0443
059bc     6F FA 05 F6 | 	mov	result1, #111
059c0     F4 00 90 FD | 	jmp	#LR__0475
059c4                 | LR__0444
059c4     93 FA 05 F6 | 	mov	result1, #147
059c8     EC 00 90 FD | 	jmp	#LR__0475
059cc                 | LR__0445
059cc     94 FA 05 F6 | 	mov	result1, #148
059d0     E4 00 90 FD | 	jmp	#LR__0475
059d4                 | LR__0446
059d4     62 FA 05 F6 | 	mov	result1, #98
059d8     DC 00 90 FD | 	jmp	#LR__0475
059dc                 | LR__0447
059dc     A3 FA 05 F6 | 	mov	result1, #163
059e0     D4 00 90 FD | 	jmp	#LR__0475
059e4                 | LR__0448
059e4     9D FA 05 F6 | 	mov	result1, #157
059e8     CC 00 90 FD | 	jmp	#LR__0475
059ec                 | LR__0449
059ec     8A FA 05 F6 | 	mov	result1, #138
059f0     C4 00 90 FD | 	jmp	#LR__0475
059f4                 | LR__0450
059f4     A4 FA 05 F6 | 	mov	result1, #164
059f8     BC 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0451
059fc     A8 FA 05 F6 | 	mov	result1, #168
05a00     B4 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0452
05a04     AD FA 05 F6 | 	mov	result1, #173
05a08     AC 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0453
05a0c     9A FA 05 F6 | 	mov	result1, #154
05a10     A4 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0454
05a14     A6 FA 05 F6 | 	mov	result1, #166
05a18     9C 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0455
05a1c     66 FA 05 F6 | 	mov	result1, #102
05a20     94 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0456
05a24     67 FA 05 F6 | 	mov	result1, #103
05a28     8C 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0457
05a2c     64 FA 05 F6 | 	mov	result1, #100
05a30     84 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0458
05a34     65 FA 05 F6 | 	mov	result1, #101
05a38     7C 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0459
05a3c     98 FA 05 F6 | 	mov	result1, #152
05a40     74 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0460
05a44     7B FA 05 F6 | 	mov	result1, #123
05a48     6C 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0461
05a4c     76 FA 05 F6 | 	mov	result1, #118
05a50     64 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0462
05a54     A5 FA 05 F6 | 	mov	result1, #165
05a58     5C 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0463
05a5c     7A FA 05 F6 | 	mov	result1, #122
05a60     54 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0464
05a64     BF FA 05 F6 | 	mov	result1, #191
05a68     4C 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0465
05a6c     54 FA 05 F6 | 	mov	result1, #84
05a70     44 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0466
05a74     6B FA 05 F6 | 	mov	result1, #107
05a78     3C 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0467
05a7c     87 FA 05 F6 | 	mov	result1, #135
05a80     34 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0468
05a84     6A FA 05 F6 | 	mov	result1, #106
05a88     2C 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0469
05a8c     6E FA 05 F6 | 	mov	result1, #110
05a90     24 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0470
05a94     A1 FA 05 F6 | 	mov	result1, #161
05a98     1C 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0471
05a9c     83 FA 05 F6 | 	mov	result1, #131
05aa0     14 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0472
05aa4     A0 FA 05 F6 | 	mov	result1, #160
05aa8     0C 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0473
05aac     9B FA 05 F6 | 	mov	result1, #155
05ab0     04 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0474
05ab4     00 FA 05 F6 | 	mov	result1, #0
05ab8                 | LR__0475
05ab8     A7 F0 03 F6 | 	mov	ptra, fp
05abc     B2 00 A0 FD | 	call	#popregs_
05ac0                 | _isfunction_ret
05ac0     2D 00 64 FD | 	ret
05ac4                 | 
05ac4                 | ' 
05ac4                 | ' ' Check if the part is a name
05ac4                 | ' 
05ac4                 | ' function isname(s as string) as boolean
05ac4                 | _isname
05ac4     0D 4A 05 F6 | 	mov	COUNT_, #13
05ac8     A8 00 A0 FD | 	call	#pushregs_
05acc     09 1F 02 F6 | 	mov	local01, arg01
05ad0     09 21 02 F6 | 	mov	local02, arg01
05ad4     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05ad8                 | LR__0480
05ad8     10 FB C9 FA | 	rdbyte	result1, local02 wz
05adc     01 20 06 51 |  if_ne	add	local02, #1
05ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05ae4                 | LR__0481
05ae4     09 21 82 F1 | 	sub	local02, arg01
05ae8     10 FB 01 F6 | 	mov	result1, local02
05aec     FD 22 0A F6 | 	mov	local03, result1 wz
05af0     00 FA 05 A6 |  if_e	mov	result1, #0
05af4     34 02 90 AD |  if_e	jmp	#LR__0493
05af8     0F 13 02 F6 | 	mov	arg01, local01
05afc     01 14 06 F6 | 	mov	arg02, #1
05b00     01 16 06 F6 | 	mov	arg03, #1
05b04     28 D1 B1 FD | 	call	#__system__Mid_S
05b08     FD 24 02 F6 | 	mov	local04, result1
05b0c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b0c     84 01 00 FF 
05b10     51 14 06 F6 | 	mov	arg02, ##@LR__5339
05b14     12 13 02 F6 | 	mov	arg01, local04
05b18     A8 AF B1 FD | 	call	#__system___string_cmp
05b1c     00 FA 55 F2 | 	cmps	result1, #0 wc
05b20     18 00 90 CD |  if_b	jmp	#LR__0482
05b24     84 01 00 FF 
05b28     53 14 06 F6 | 	mov	arg02, ##@LR__5340
05b2c     12 13 02 F6 | 	mov	arg01, local04
05b30     90 AF B1 FD | 	call	#__system___string_cmp
05b34     01 FA 55 F2 | 	cmps	result1, #1 wc
05b38     1C 00 90 CD |  if_b	jmp	#LR__0483
05b3c                 | LR__0482
05b3c     84 01 00 FF 
05b40     55 14 06 F6 | 	mov	arg02, ##@LR__5341
05b44     12 13 02 F6 | 	mov	arg01, local04
05b48     78 AF B1 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     00 FA 05 56 |  if_ne	mov	result1, #0
05b54     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b58                 | LR__0483
05b58                 | ' if l>2 then 
05b58     03 22 56 F2 | 	cmps	local03, #3 wc
05b5c     C8 01 90 CD |  if_b	jmp	#LR__0492
05b60                 | '   for i=2 to l
05b60     02 26 06 F6 | 	mov	local05, #2
05b64     11 29 02 F6 | 	mov	local06, local03
05b68     01 28 06 F1 | 	add	local06, #1
05b6c                 | LR__0484
05b6c     14 27 52 F2 | 	cmps	local05, local06 wc
05b70     B4 01 90 3D |  if_ae	jmp	#LR__0491
05b74     0F 13 02 F6 | 	mov	arg01, local01
05b78     13 15 02 F6 | 	mov	arg02, local05
05b7c     01 16 06 F6 | 	mov	arg03, #1
05b80     AC D0 B1 FD | 	call	#__system__Mid_S
05b84     FD 24 02 F6 | 	mov	local04, result1
05b88                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05b88     11 27 52 F2 | 	cmps	local05, local03 wc
05b8c     9C 00 90 3D |  if_ae	jmp	#LR__0487
05b90     84 01 00 FF 
05b94     57 14 06 F6 | 	mov	arg02, ##@LR__5342
05b98     12 13 02 F6 | 	mov	arg01, local04
05b9c     24 AF B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 55 F2 | 	cmps	result1, #0 wc
05ba4     18 00 90 CD |  if_b	jmp	#LR__0485
05ba8     84 01 00 FF 
05bac     59 14 06 F6 | 	mov	arg02, ##@LR__5343
05bb0     12 13 02 F6 | 	mov	arg01, local04
05bb4     0C AF B1 FD | 	call	#__system___string_cmp
05bb8     01 FA 55 F2 | 	cmps	result1, #1 wc
05bbc     6C 00 90 CD |  if_b	jmp	#LR__0487
05bc0                 | LR__0485
05bc0     84 01 00 FF 
05bc4     5B 14 06 F6 | 	mov	arg02, ##@LR__5344
05bc8     12 13 02 F6 | 	mov	arg01, local04
05bcc     F4 AE B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 55 F2 | 	cmps	result1, #0 wc
05bd4     18 00 90 CD |  if_b	jmp	#LR__0486
05bd8     84 01 00 FF 
05bdc     5D 14 06 F6 | 	mov	arg02, ##@LR__5345
05be0     12 13 02 F6 | 	mov	arg01, local04
05be4     DC AE B1 FD | 	call	#__system___string_cmp
05be8     01 FA 55 F2 | 	cmps	result1, #1 wc
05bec     3C 00 90 CD |  if_b	jmp	#LR__0487
05bf0                 | LR__0486
05bf0     84 01 00 FF 
05bf4     5F 2A 06 F6 | 	mov	local07, ##@LR__5346
05bf8     12 13 02 F6 | 	mov	arg01, local04
05bfc     15 15 02 F6 | 	mov	arg02, local07
05c00     C0 AE B1 FD | 	call	#__system___string_cmp
05c04     00 FA 0D F2 | 	cmp	result1, #0 wz
05c08     20 00 90 AD |  if_e	jmp	#LR__0487
05c0c     84 01 00 FF 
05c10     61 2C 06 F6 | 	mov	local08, ##@LR__5347
05c14     12 13 02 F6 | 	mov	arg01, local04
05c18     16 15 02 F6 | 	mov	arg02, local08
05c1c     A4 AE B1 FD | 	call	#__system___string_cmp
05c20     FD 2E 0A F6 | 	mov	local09, result1 wz
05c24     00 FA 05 56 |  if_ne	mov	result1, #0
05c28     00 01 90 5D |  if_ne	jmp	#LR__0493
05c2c                 | LR__0487
05c2c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c2c     11 27 0A F2 | 	cmp	local05, local03 wz
05c30     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c34     84 01 00 FF 
05c38     63 30 06 F6 | 	mov	local10, ##@LR__5348
05c3c     12 13 02 F6 | 	mov	arg01, local04
05c40     18 15 02 F6 | 	mov	arg02, local10
05c44     7C AE B1 FD | 	call	#__system___string_cmp
05c48     FD 32 02 F6 | 	mov	local11, result1
05c4c     00 32 56 F2 | 	cmps	local11, #0 wc
05c50     1C 00 90 CD |  if_b	jmp	#LR__0488
05c54     84 01 00 FF 
05c58     65 14 06 F6 | 	mov	arg02, ##@LR__5349
05c5c     12 13 02 F6 | 	mov	arg01, local04
05c60     60 AE B1 FD | 	call	#__system___string_cmp
05c64     FD 30 02 F6 | 	mov	local10, result1
05c68     01 30 56 F2 | 	cmps	local10, #1 wc
05c6c     B0 00 90 CD |  if_b	jmp	#LR__0490
05c70                 | LR__0488
05c70     84 01 00 FF 
05c74     67 14 06 F6 | 	mov	arg02, ##@LR__5350
05c78     12 13 02 F6 | 	mov	arg01, local04
05c7c     44 AE B1 FD | 	call	#__system___string_cmp
05c80     00 FA 55 F2 | 	cmps	result1, #0 wc
05c84     1C 00 90 CD |  if_b	jmp	#LR__0489
05c88     84 01 00 FF 
05c8c     69 2E 06 F6 | 	mov	local09, ##@LR__5351
05c90     12 13 02 F6 | 	mov	arg01, local04
05c94     17 15 02 F6 | 	mov	arg02, local09
05c98     28 AE B1 FD | 	call	#__system___string_cmp
05c9c     01 FA 55 F2 | 	cmps	result1, #1 wc
05ca0     7C 00 90 CD |  if_b	jmp	#LR__0490
05ca4                 | LR__0489
05ca4     84 01 00 FF 
05ca8     6B 2E 06 F6 | 	mov	local09, ##@LR__5352
05cac     12 13 02 F6 | 	mov	arg01, local04
05cb0     17 15 02 F6 | 	mov	arg02, local09
05cb4     0C AE B1 FD | 	call	#__system___string_cmp
05cb8     00 FA 4D F2 | 	cmps	result1, #0 wz
05cbc     60 00 90 AD |  if_e	jmp	#LR__0490
05cc0     84 01 00 FF 
05cc4     6D 2C 06 F6 | 	mov	local08, ##@LR__5353
05cc8     12 13 02 F6 | 	mov	arg01, local04
05ccc     16 15 02 F6 | 	mov	arg02, local08
05cd0     F0 AD B1 FD | 	call	#__system___string_cmp
05cd4     FD 2E 0A F6 | 	mov	local09, result1 wz
05cd8     44 00 90 AD |  if_e	jmp	#LR__0490
05cdc     84 01 00 FF 
05ce0     6F 34 06 F6 | 	mov	local12, ##@LR__5354
05ce4     1A 2D 02 F6 | 	mov	local08, local12
05ce8     12 13 02 F6 | 	mov	arg01, local04
05cec     16 15 02 F6 | 	mov	arg02, local08
05cf0     D0 AD B1 FD | 	call	#__system___string_cmp
05cf4     FD 2A 0A F6 | 	mov	local07, result1 wz
05cf8     24 00 90 AD |  if_e	jmp	#LR__0490
05cfc     84 01 00 FF 
05d00     71 36 06 F6 | 	mov	local13, ##@LR__5355
05d04     1B 35 02 F6 | 	mov	local12, local13
05d08     12 13 02 F6 | 	mov	arg01, local04
05d0c     1A 15 02 F6 | 	mov	arg02, local12
05d10     B0 AD B1 FD | 	call	#__system___string_cmp
05d14     FD 2C 0A F6 | 	mov	local08, result1 wz
05d18     00 FA 05 56 |  if_ne	mov	result1, #0
05d1c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d20                 | LR__0490
05d20     01 26 06 F1 | 	add	local05, #1
05d24     44 FE 9F FD | 	jmp	#LR__0484
05d28                 | LR__0491
05d28                 | LR__0492
05d28                 | ' return true
05d28     01 FA 65 F6 | 	neg	result1, #1
05d2c                 | LR__0493
05d2c     A7 F0 03 F6 | 	mov	ptra, fp
05d30     B2 00 A0 FD | 	call	#popregs_
05d34                 | _isname_ret
05d34     2D 00 64 FD | 	ret
05d38                 | 
05d38                 | ' 
05d38                 | ' ' Check if the part is a number.  
05d38                 | ' 
05d38                 | ' function isnum(s as string) as boolean 
05d38                 | _isnum
05d38     13 4A 05 F6 | 	mov	COUNT_, #19
05d3c     A8 00 A0 FD | 	call	#pushregs_
05d40     09 1F 02 F6 | 	mov	local01, arg01
05d44     00 20 06 F6 | 	mov	local02, #0
05d48     00 22 06 F6 | 	mov	local03, #0
05d4c     0F 13 02 F6 | 	mov	arg01, local01
05d50     09 25 02 F6 | 	mov	local04, arg01
05d54     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d58                 | LR__0500
05d58     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d5c     01 24 06 51 |  if_ne	add	local04, #1
05d60     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05d64                 | LR__0501
05d64     09 25 82 F1 | 	sub	local04, arg01
05d68     12 FB 01 F6 | 	mov	result1, local04
05d6c     FD 26 0A F6 | 	mov	local05, result1 wz
05d70     00 FA 05 A6 |  if_e	mov	result1, #0
05d74     A0 03 90 AD |  if_e	jmp	#LR__0516
05d78     0F 13 02 F6 | 	mov	arg01, local01
05d7c     01 14 06 F6 | 	mov	arg02, #1
05d80     01 16 06 F6 | 	mov	arg03, #1
05d84     A8 CE B1 FD | 	call	#__system__Mid_S
05d88     FD 28 02 F6 | 	mov	local06, result1
05d8c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05d8c     84 01 00 FF 
05d90     73 14 06 F6 | 	mov	arg02, ##@LR__5356
05d94     14 13 02 F6 | 	mov	arg01, local06
05d98     28 AD B1 FD | 	call	#__system___string_cmp
05d9c     00 FA 55 F2 | 	cmps	result1, #0 wc
05da0     1C 00 90 CD |  if_b	jmp	#LR__0502
05da4     84 01 00 FF 
05da8     75 2A 06 F6 | 	mov	local07, ##@LR__5357
05dac     14 13 02 F6 | 	mov	arg01, local06
05db0     15 15 02 F6 | 	mov	arg02, local07
05db4     0C AD B1 FD | 	call	#__system___string_cmp
05db8     01 FA 55 F2 | 	cmps	result1, #1 wc
05dbc     84 00 90 CD |  if_b	jmp	#LR__0503
05dc0                 | LR__0502
05dc0     84 01 00 FF 
05dc4     77 2C 06 F6 | 	mov	local08, ##@LR__5358
05dc8     16 2B 02 F6 | 	mov	local07, local08
05dcc     14 13 02 F6 | 	mov	arg01, local06
05dd0     15 15 02 F6 | 	mov	arg02, local07
05dd4     EC AC B1 FD | 	call	#__system___string_cmp
05dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ddc     64 00 90 AD |  if_e	jmp	#LR__0503
05de0     84 01 00 FF 
05de4     79 2E 06 F6 | 	mov	local09, ##@LR__5359
05de8     17 2D 02 F6 | 	mov	local08, local09
05dec     14 13 02 F6 | 	mov	arg01, local06
05df0     16 15 02 F6 | 	mov	arg02, local08
05df4     CC AC B1 FD | 	call	#__system___string_cmp
05df8     FD 2A 0A F6 | 	mov	local07, result1 wz
05dfc     44 00 90 AD |  if_e	jmp	#LR__0503
05e00     84 01 00 FF 
05e04     7B 30 06 F6 | 	mov	local10, ##@LR__5360
05e08     18 2F 02 F6 | 	mov	local09, local10
05e0c     14 13 02 F6 | 	mov	arg01, local06
05e10     17 15 02 F6 | 	mov	arg02, local09
05e14     AC AC B1 FD | 	call	#__system___string_cmp
05e18     FD 2C 0A F6 | 	mov	local08, result1 wz
05e1c     24 00 90 AD |  if_e	jmp	#LR__0503
05e20     84 01 00 FF 
05e24     7D 32 06 F6 | 	mov	local11, ##@LR__5361
05e28     19 31 02 F6 | 	mov	local10, local11
05e2c     14 13 02 F6 | 	mov	arg01, local06
05e30     18 15 02 F6 | 	mov	arg02, local10
05e34     8C AC B1 FD | 	call	#__system___string_cmp
05e38     FD 2E 0A F6 | 	mov	local09, result1 wz
05e3c     00 FA 05 56 |  if_ne	mov	result1, #0
05e40     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e44                 | LR__0503
05e44                 | ' if m$="." then ds=1
05e44     84 01 00 FF 
05e48     7F 14 06 F6 | 	mov	arg02, ##@LR__5362
05e4c     14 13 02 F6 | 	mov	arg01, local06
05e50     70 AC B1 FD | 	call	#__system___string_cmp
05e54     00 FA 0D F2 | 	cmp	result1, #0 wz
05e58     01 20 06 A6 |  if_e	mov	local02, #1
05e5c                 | ' if m$="$" then hex=1 else hex=0
05e5c     84 01 00 FF 
05e60     81 14 06 F6 | 	mov	arg02, ##@LR__5363
05e64     14 13 02 F6 | 	mov	arg01, local06
05e68     58 AC B1 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     01 34 06 A6 |  if_e	mov	local12, #1
05e74     00 34 06 56 |  if_ne	mov	local12, #0
05e78                 | ' if m$="%" then bin=1 else bin=0
05e78     84 01 00 FF 
05e7c     83 14 06 F6 | 	mov	arg02, ##@LR__5364
05e80     14 13 02 F6 | 	mov	arg01, local06
05e84     3C AC B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     01 36 06 A6 |  if_e	mov	local13, #1
05e90     00 36 06 56 |  if_ne	mov	local13, #0
05e94                 | ' if l>1 then 
05e94     02 26 56 F2 | 	cmps	local05, #2 wc
05e98     78 02 90 CD |  if_b	jmp	#LR__0515
05e9c                 | '   for i=2 to l
05e9c     02 38 06 F6 | 	mov	local14, #2
05ea0     13 3B 02 F6 | 	mov	local15, local05
05ea4     01 3A 06 F1 | 	add	local15, #1
05ea8                 | LR__0504
05ea8     1D 39 52 F2 | 	cmps	local14, local15 wc
05eac     64 02 90 3D |  if_ae	jmp	#LR__0514
05eb0     0F 13 02 F6 | 	mov	arg01, local01
05eb4     1C 15 02 F6 | 	mov	arg02, local14
05eb8     01 16 06 F6 | 	mov	arg03, #1
05ebc     70 CD B1 FD | 	call	#__system__Mid_S
05ec0     FD 28 02 F6 | 	mov	local06, result1
05ec4     00 3C 06 F6 | 	mov	local16, #0
05ec8                 | '     m$=mid$(s,i,1) : b=false
05ec8                 | '     if m$>="0" andalso m$<="9" then b=true  
05ec8     84 01 00 FF 
05ecc     85 14 06 F6 | 	mov	arg02, ##@LR__5365
05ed0     14 13 02 F6 | 	mov	arg01, local06
05ed4     EC AB B1 FD | 	call	#__system___string_cmp
05ed8     00 FA 55 F2 | 	cmps	result1, #0 wc
05edc     1C 00 90 CD |  if_b	jmp	#LR__0505
05ee0     84 01 00 FF 
05ee4     87 2A 06 F6 | 	mov	local07, ##@LR__5366
05ee8     14 13 02 F6 | 	mov	arg01, local06
05eec     15 15 02 F6 | 	mov	arg02, local07
05ef0     D0 AB B1 FD | 	call	#__system___string_cmp
05ef4     01 FA 55 F2 | 	cmps	result1, #1 wc
05ef8     01 3C 66 C6 |  if_b	neg	local16, #1
05efc                 | LR__0505
05efc                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05efc     84 01 00 FF 
05f00     89 14 06 F6 | 	mov	arg02, ##@LR__5367
05f04     14 13 02 F6 | 	mov	arg01, local06
05f08     B8 AB B1 FD | 	call	#__system___string_cmp
05f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f10     7C 00 90 AD |  if_e	jmp	#LR__0506
05f14     84 01 00 FF 
05f18     8B 2A 06 F6 | 	mov	local07, ##@LR__5368
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     15 15 02 F6 | 	mov	arg02, local07
05f24     9C AB B1 FD | 	call	#__system___string_cmp
05f28     00 FA 0D F2 | 	cmp	result1, #0 wz
05f2c     60 00 90 AD |  if_e	jmp	#LR__0506
05f30     84 01 00 FF 
05f34     8D 2C 06 F6 | 	mov	local08, ##@LR__5369
05f38     16 2B 02 F6 | 	mov	local07, local08
05f3c     14 13 02 F6 | 	mov	arg01, local06
05f40     15 15 02 F6 | 	mov	arg02, local07
05f44     7C AB B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     40 00 90 AD |  if_e	jmp	#LR__0506
05f50     84 01 00 FF 
05f54     8F 2E 06 F6 | 	mov	local09, ##@LR__5370
05f58     17 2D 02 F6 | 	mov	local08, local09
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     16 15 02 F6 | 	mov	arg02, local08
05f64     5C AB B1 FD | 	call	#__system___string_cmp
05f68     FD 2A 0A F6 | 	mov	local07, result1 wz
05f6c     20 00 90 AD |  if_e	jmp	#LR__0506
05f70     84 01 00 FF 
05f74     91 30 06 F6 | 	mov	local10, ##@LR__5371
05f78     18 2F 02 F6 | 	mov	local09, local10
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     17 15 02 F6 | 	mov	arg02, local09
05f84     3C AB B1 FD | 	call	#__system___string_cmp
05f88     FD 2C 0A F6 | 	mov	local08, result1 wz
05f8c     04 00 90 5D |  if_ne	jmp	#LR__0507
05f90                 | LR__0506
05f90     01 3C 66 F6 | 	neg	local16, #1
05f94                 | LR__0507
05f94                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05f94     01 34 0E F2 | 	cmp	local12, #1 wz
05f98     34 00 90 5D |  if_ne	jmp	#LR__0508
05f9c     84 01 00 FF 
05fa0     93 14 06 F6 | 	mov	arg02, ##@LR__5372
05fa4     14 13 02 F6 | 	mov	arg01, local06
05fa8     18 AB B1 FD | 	call	#__system___string_cmp
05fac     00 FA 55 F2 | 	cmps	result1, #0 wc
05fb0     1C 00 90 CD |  if_b	jmp	#LR__0508
05fb4     84 01 00 FF 
05fb8     95 2A 06 F6 | 	mov	local07, ##@LR__5373
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     15 15 02 F6 | 	mov	arg02, local07
05fc4     FC AA B1 FD | 	call	#__system___string_cmp
05fc8     01 FA 55 F2 | 	cmps	result1, #1 wc
05fcc     01 3C 66 C6 |  if_b	neg	local16, #1
05fd0                 | LR__0508
05fd0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
05fd0     01 36 0E F2 | 	cmp	local13, #1 wz
05fd4     58 00 90 5D |  if_ne	jmp	#LR__0510
05fd8     84 01 00 FF 
05fdc     97 14 06 F6 | 	mov	arg02, ##@LR__5374
05fe0     14 13 02 F6 | 	mov	arg01, local06
05fe4     DC AA B1 FD | 	call	#__system___string_cmp
05fe8     00 FA 55 F2 | 	cmps	result1, #0 wc
05fec     1C 00 90 CD |  if_b	jmp	#LR__0509
05ff0     84 01 00 FF 
05ff4     99 2A 06 F6 | 	mov	local07, ##@LR__5375
05ff8     14 13 02 F6 | 	mov	arg01, local06
05ffc     15 15 02 F6 | 	mov	arg02, local07
06000     C0 AA B1 FD | 	call	#__system___string_cmp
06004     01 FA 55 F2 | 	cmps	result1, #1 wc
06008     24 00 90 CD |  if_b	jmp	#LR__0510
0600c                 | LR__0509
0600c     84 01 00 FF 
06010     9B 2C 06 F6 | 	mov	local08, ##@LR__5376
06014     16 2B 02 F6 | 	mov	local07, local08
06018     14 13 02 F6 | 	mov	arg01, local06
0601c     15 15 02 F6 | 	mov	arg02, local07
06020     A0 AA B1 FD | 	call	#__system___string_cmp
06024     00 FA 0D F2 | 	cmp	result1, #0 wz
06028     00 FA 05 56 |  if_ne	mov	result1, #0
0602c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06030                 | LR__0510
06030                 | '     if not b then return false
06030     1E 3D 22 F6 | 	not	local16, local16
06034     00 3C 0E F2 | 	cmp	local16, #0 wz
06038     00 FA 05 56 |  if_ne	mov	result1, #0
0603c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06040                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06040     84 01 00 FF 
06044     9D 14 06 F6 | 	mov	arg02, ##@LR__5377
06048     14 13 02 F6 | 	mov	arg01, local06
0604c     74 AA B1 FD | 	call	#__system___string_cmp
06050     00 FA 0D F2 | 	cmp	result1, #0 wz
06054     3C 00 90 5D |  if_ne	jmp	#LR__0511
06058     1C 15 02 F6 | 	mov	arg02, local14
0605c     01 14 86 F1 | 	sub	arg02, #1
06060     0F 13 02 F6 | 	mov	arg01, local01
06064     01 16 06 F6 | 	mov	arg03, #1
06068     C4 CB B1 FD | 	call	#__system__Mid_S
0606c     FD 12 02 F6 | 	mov	arg01, result1
06070     B4 CD B1 FD | 	call	#__system__LCase_S
06074     FD 12 02 F6 | 	mov	arg01, result1
06078     84 01 00 FF 
0607c     9F 2A 06 F6 | 	mov	local07, ##@LR__5378
06080     15 15 02 F6 | 	mov	arg02, local07
06084     3C AA B1 FD | 	call	#__system___string_cmp
06088     00 FA 0D F2 | 	cmp	result1, #0 wz
0608c     00 FA 05 56 |  if_ne	mov	result1, #0
06090     84 00 90 5D |  if_ne	jmp	#LR__0516
06094                 | LR__0511
06094                 | '     if m$="." then ds+=1: if ds>1 then return false
06094     84 01 00 FF 
06098     A1 14 06 F6 | 	mov	arg02, ##@LR__5379
0609c     14 13 02 F6 | 	mov	arg01, local06
060a0     20 AA B1 FD | 	call	#__system___string_cmp
060a4     00 FA 0D F2 | 	cmp	result1, #0 wz
060a8     01 20 06 A1 |  if_e	add	local02, #1
060ac     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060b0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060b4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060b8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060b8     84 01 00 FF 
060bc     A3 3E 06 F6 | 	mov	local17, ##@LR__5380
060c0     1F 41 02 F6 | 	mov	local18, local17
060c4     14 13 02 F6 | 	mov	arg01, local06
060c8     20 15 02 F6 | 	mov	arg02, local18
060cc     F4 A9 B1 FD | 	call	#__system___string_cmp
060d0     FD 42 0A F6 | 	mov	local19, result1 wz
060d4     20 00 90 AD |  if_e	jmp	#LR__0512
060d8     84 01 00 FF 
060dc     A5 2A 06 F6 | 	mov	local07, ##@LR__5381
060e0     15 3F 02 F6 | 	mov	local17, local07
060e4     14 13 02 F6 | 	mov	arg01, local06
060e8     1F 15 02 F6 | 	mov	arg02, local17
060ec     D4 A9 B1 FD | 	call	#__system___string_cmp
060f0     FD 40 0A F6 | 	mov	local18, result1 wz
060f4     14 00 90 5D |  if_ne	jmp	#LR__0513
060f8                 | LR__0512
060f8     01 22 06 F1 | 	add	local03, #1
060fc     00 34 0E F2 | 	cmp	local12, #0 wz
06100     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06104     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06108     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0610c                 | LR__0513
0610c     01 38 06 F1 | 	add	local14, #1
06110     94 FD 9F FD | 	jmp	#LR__0504
06114                 | LR__0514
06114                 | LR__0515
06114                 | ' return true
06114     01 FA 65 F6 | 	neg	result1, #1
06118                 | LR__0516
06118     A7 F0 03 F6 | 	mov	ptra, fp
0611c     B2 00 A0 FD | 	call	#popregs_
06120                 | _isnum_ret
06120     2D 00 64 FD | 	ret
06124                 | 
06124                 | '   
06124                 | ' ' Check if the part is an integer number.    
06124                 | '   
06124                 | ' function isint(s as string) as boolean
06124                 | _isint
06124     0E 4A 05 F6 | 	mov	COUNT_, #14
06128     A8 00 A0 FD | 	call	#pushregs_
0612c     09 1F 02 F6 | 	mov	local01, arg01
06130     09 21 02 F6 | 	mov	local02, arg01
06134     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06138                 | LR__0520
06138     10 FB C9 FA | 	rdbyte	result1, local02 wz
0613c     01 20 06 51 |  if_ne	add	local02, #1
06140     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06144                 | LR__0521
06144     09 21 82 F1 | 	sub	local02, arg01
06148     10 FB 01 F6 | 	mov	result1, local02
0614c     FD 22 0A F6 | 	mov	local03, result1 wz
06150     00 FA 05 A6 |  if_e	mov	result1, #0
06154     64 02 90 AD |  if_e	jmp	#LR__0534
06158     0F 13 02 F6 | 	mov	arg01, local01
0615c     01 14 06 F6 | 	mov	arg02, #1
06160     01 16 06 F6 | 	mov	arg03, #1
06164     C8 CA B1 FD | 	call	#__system__Mid_S
06168     FD 24 02 F6 | 	mov	local04, result1
0616c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0616c     84 01 00 FF 
06170     A7 14 06 F6 | 	mov	arg02, ##@LR__5382
06174     12 13 02 F6 | 	mov	arg01, local04
06178     48 A9 B1 FD | 	call	#__system___string_cmp
0617c     00 FA 55 F2 | 	cmps	result1, #0 wc
06180     1C 00 90 CD |  if_b	jmp	#LR__0522
06184     84 01 00 FF 
06188     A9 26 06 F6 | 	mov	local05, ##@LR__5383
0618c     12 13 02 F6 | 	mov	arg01, local04
06190     13 15 02 F6 | 	mov	arg02, local05
06194     2C A9 B1 FD | 	call	#__system___string_cmp
06198     01 FA 55 F2 | 	cmps	result1, #1 wc
0619c     64 00 90 CD |  if_b	jmp	#LR__0523
061a0                 | LR__0522
061a0     84 01 00 FF 
061a4     AB 28 06 F6 | 	mov	local06, ##@LR__5384
061a8     14 27 02 F6 | 	mov	local05, local06
061ac     12 13 02 F6 | 	mov	arg01, local04
061b0     13 15 02 F6 | 	mov	arg02, local05
061b4     0C A9 B1 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     44 00 90 AD |  if_e	jmp	#LR__0523
061c0     84 01 00 FF 
061c4     AD 2A 06 F6 | 	mov	local07, ##@LR__5385
061c8     15 29 02 F6 | 	mov	local06, local07
061cc     12 13 02 F6 | 	mov	arg01, local04
061d0     14 15 02 F6 | 	mov	arg02, local06
061d4     EC A8 B1 FD | 	call	#__system___string_cmp
061d8     FD 26 0A F6 | 	mov	local05, result1 wz
061dc     24 00 90 AD |  if_e	jmp	#LR__0523
061e0     84 01 00 FF 
061e4     AF 2C 06 F6 | 	mov	local08, ##@LR__5386
061e8     16 2B 02 F6 | 	mov	local07, local08
061ec     12 13 02 F6 | 	mov	arg01, local04
061f0     15 15 02 F6 | 	mov	arg02, local07
061f4     CC A8 B1 FD | 	call	#__system___string_cmp
061f8     FD 28 0A F6 | 	mov	local06, result1 wz
061fc     00 FA 05 56 |  if_ne	mov	result1, #0
06200     B8 01 90 5D |  if_ne	jmp	#LR__0534
06204                 | LR__0523
06204                 | ' if m$="$" then hex=1 else hex=0
06204     84 01 00 FF 
06208     B1 14 06 F6 | 	mov	arg02, ##@LR__5387
0620c     12 13 02 F6 | 	mov	arg01, local04
06210     B0 A8 B1 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     01 2E 06 A6 |  if_e	mov	local09, #1
0621c     00 2E 06 56 |  if_ne	mov	local09, #0
06220                 | ' if m$="%" then bin=1 else bin=0
06220     84 01 00 FF 
06224     B3 14 06 F6 | 	mov	arg02, ##@LR__5388
06228     12 13 02 F6 | 	mov	arg01, local04
0622c     94 A8 B1 FD | 	call	#__system___string_cmp
06230     00 FA 0D F2 | 	cmp	result1, #0 wz
06234     01 30 06 A6 |  if_e	mov	local10, #1
06238     00 30 06 56 |  if_ne	mov	local10, #0
0623c                 | ' if l>1 then 
0623c     02 22 56 F2 | 	cmps	local03, #2 wc
06240     74 01 90 CD |  if_b	jmp	#LR__0533
06244                 | '   for i=2 to l
06244     02 32 06 F6 | 	mov	local11, #2
06248     11 35 02 F6 | 	mov	local12, local03
0624c     01 34 06 F1 | 	add	local12, #1
06250                 | LR__0524
06250     1A 33 52 F2 | 	cmps	local11, local12 wc
06254     60 01 90 3D |  if_ae	jmp	#LR__0532
06258     0F 13 02 F6 | 	mov	arg01, local01
0625c     19 15 02 F6 | 	mov	arg02, local11
06260     01 16 06 F6 | 	mov	arg03, #1
06264     C8 C9 B1 FD | 	call	#__system__Mid_S
06268     FD 24 02 F6 | 	mov	local04, result1
0626c                 | '     m$=mid$(s,i,1) 
0626c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0626c     00 2E 0E F2 | 	cmp	local09, #0 wz
06270     50 00 90 5D |  if_ne	jmp	#LR__0526
06274     84 01 00 FF 
06278     B5 14 06 F6 | 	mov	arg02, ##@LR__5389
0627c     12 13 02 F6 | 	mov	arg01, local04
06280     40 A8 B1 FD | 	call	#__system___string_cmp
06284     00 FA 55 F2 | 	cmps	result1, #0 wc
06288     18 00 90 CD |  if_b	jmp	#LR__0525
0628c     84 01 00 FF 
06290     B7 14 06 F6 | 	mov	arg02, ##@LR__5390
06294     12 13 02 F6 | 	mov	arg01, local04
06298     28 A8 B1 FD | 	call	#__system___string_cmp
0629c     01 FA 55 F2 | 	cmps	result1, #1 wc
062a0     20 00 90 CD |  if_b	jmp	#LR__0526
062a4                 | LR__0525
062a4     84 01 00 FF 
062a8     B9 28 06 F6 | 	mov	local06, ##@LR__5391
062ac     12 13 02 F6 | 	mov	arg01, local04
062b0     14 15 02 F6 | 	mov	arg02, local06
062b4     0C A8 B1 FD | 	call	#__system___string_cmp
062b8     00 FA 0D F2 | 	cmp	result1, #0 wz
062bc     00 FA 05 56 |  if_ne	mov	result1, #0
062c0     F8 00 90 5D |  if_ne	jmp	#LR__0534
062c4                 | LR__0526
062c4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
062c4     01 2E 0E F2 | 	cmp	local09, #1 wz
062c8     90 00 90 5D |  if_ne	jmp	#LR__0529
062cc     84 01 00 FF 
062d0     BB 14 06 F6 | 	mov	arg02, ##@LR__5392
062d4     12 13 02 F6 | 	mov	arg01, local04
062d8     E8 A7 B1 FD | 	call	#__system___string_cmp
062dc     00 FA 55 F2 | 	cmps	result1, #0 wc
062e0     1C 00 90 CD |  if_b	jmp	#LR__0527
062e4     84 01 00 FF 
062e8     BD 14 06 F6 | 	mov	arg02, ##@LR__5393
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     D0 A7 B1 FD | 	call	#__system___string_cmp
062f4     FD 36 02 F6 | 	mov	local13, result1
062f8     01 36 56 F2 | 	cmps	local13, #1 wc
062fc     5C 00 90 CD |  if_b	jmp	#LR__0529
06300                 | LR__0527
06300     84 01 00 FF 
06304     BF 26 06 F6 | 	mov	local05, ##@LR__5394
06308     12 13 02 F6 | 	mov	arg01, local04
0630c     13 15 02 F6 | 	mov	arg02, local05
06310     B0 A7 B1 FD | 	call	#__system___string_cmp
06314     FD 38 02 F6 | 	mov	local14, result1
06318     00 38 56 F2 | 	cmps	local14, #0 wc
0631c     1C 00 90 CD |  if_b	jmp	#LR__0528
06320     84 01 00 FF 
06324     C1 2A 06 F6 | 	mov	local07, ##@LR__5395
06328     12 13 02 F6 | 	mov	arg01, local04
0632c     15 15 02 F6 | 	mov	arg02, local07
06330     90 A7 B1 FD | 	call	#__system___string_cmp
06334     01 FA 55 F2 | 	cmps	result1, #1 wc
06338     20 00 90 CD |  if_b	jmp	#LR__0529
0633c                 | LR__0528
0633c     84 01 00 FF 
06340     C3 2C 06 F6 | 	mov	local08, ##@LR__5396
06344     12 13 02 F6 | 	mov	arg01, local04
06348     16 15 02 F6 | 	mov	arg02, local08
0634c     74 A7 B1 FD | 	call	#__system___string_cmp
06350     00 FA 0D F2 | 	cmp	result1, #0 wz
06354     00 FA 05 56 |  if_ne	mov	result1, #0
06358     60 00 90 5D |  if_ne	jmp	#LR__0534
0635c                 | LR__0529
0635c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0635c     01 30 0E F2 | 	cmp	local10, #1 wz
06360     4C 00 90 5D |  if_ne	jmp	#LR__0531
06364     84 01 00 FF 
06368     C5 14 06 F6 | 	mov	arg02, ##@LR__5397
0636c     12 13 02 F6 | 	mov	arg01, local04
06370     50 A7 B1 FD | 	call	#__system___string_cmp
06374     00 FA 55 F2 | 	cmps	result1, #0 wc
06378     18 00 90 CD |  if_b	jmp	#LR__0530
0637c     84 01 00 FF 
06380     C7 14 06 F6 | 	mov	arg02, ##@LR__5398
06384     12 13 02 F6 | 	mov	arg01, local04
06388     38 A7 B1 FD | 	call	#__system___string_cmp
0638c     01 FA 55 F2 | 	cmps	result1, #1 wc
06390     1C 00 90 CD |  if_b	jmp	#LR__0531
06394                 | LR__0530
06394     84 01 00 FF 
06398     C9 14 06 F6 | 	mov	arg02, ##@LR__5399
0639c     12 13 02 F6 | 	mov	arg01, local04
063a0     20 A7 B1 FD | 	call	#__system___string_cmp
063a4     00 FA 0D F2 | 	cmp	result1, #0 wz
063a8     00 FA 05 56 |  if_ne	mov	result1, #0
063ac     0C 00 90 5D |  if_ne	jmp	#LR__0534
063b0                 | LR__0531
063b0     01 32 06 F1 | 	add	local11, #1
063b4     98 FE 9F FD | 	jmp	#LR__0524
063b8                 | LR__0532
063b8                 | LR__0533
063b8                 | ' return true
063b8     01 FA 65 F6 | 	neg	result1, #1
063bc                 | LR__0534
063bc     A7 F0 03 F6 | 	mov	ptra, fp
063c0     B2 00 A0 FD | 	call	#popregs_
063c4                 | _isint_ret
063c4     2D 00 64 FD | 	ret
063c8                 | 
063c8                 | ' 
063c8                 | ' ' Check if the part is a positive decimal number.  
063c8                 | ' 
063c8                 | ' function isdec(s as string) as boolean
063c8                 | _isdec
063c8     05 4A 05 F6 | 	mov	COUNT_, #5
063cc     A8 00 A0 FD | 	call	#pushregs_
063d0     09 1F 02 F6 | 	mov	local01, arg01
063d4     09 21 02 F6 | 	mov	local02, arg01
063d8     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
063dc                 | LR__0540
063dc     10 FB C9 FA | 	rdbyte	result1, local02 wz
063e0     01 20 06 51 |  if_ne	add	local02, #1
063e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
063e8                 | LR__0541
063e8     09 21 82 F1 | 	sub	local02, arg01
063ec     10 FB 01 F6 | 	mov	result1, local02
063f0     FD 20 0A F6 | 	mov	local02, result1 wz
063f4     00 FA 05 A6 |  if_e	mov	result1, #0
063f8     80 00 90 AD |  if_e	jmp	#LR__0546
063fc                 | ' for i=1 to l
063fc     01 22 06 F6 | 	mov	local03, #1
06400     10 25 02 F6 | 	mov	local04, local02
06404     01 24 06 F1 | 	add	local04, #1
06408                 | LR__0542
06408     12 23 52 F2 | 	cmps	local03, local04 wc
0640c     68 00 90 3D |  if_ae	jmp	#LR__0545
06410     0F 13 02 F6 | 	mov	arg01, local01
06414     11 15 02 F6 | 	mov	arg02, local03
06418     01 16 06 F6 | 	mov	arg03, #1
0641c     10 C8 B1 FD | 	call	#__system__Mid_S
06420     FD 26 02 F6 | 	mov	local05, result1
06424                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06424     84 01 00 FF 
06428     CB 14 06 F6 | 	mov	arg02, ##@LR__5400
0642c     13 13 02 F6 | 	mov	arg01, local05
06430     90 A6 B1 FD | 	call	#__system___string_cmp
06434     00 FA 55 F2 | 	cmps	result1, #0 wc
06438     18 00 90 CD |  if_b	jmp	#LR__0543
0643c     84 01 00 FF 
06440     CD 14 06 F6 | 	mov	arg02, ##@LR__5401
06444     13 13 02 F6 | 	mov	arg01, local05
06448     78 A6 B1 FD | 	call	#__system___string_cmp
0644c     01 FA 55 F2 | 	cmps	result1, #1 wc
06450     1C 00 90 CD |  if_b	jmp	#LR__0544
06454                 | LR__0543
06454     84 01 00 FF 
06458     CF 14 06 F6 | 	mov	arg02, ##@LR__5402
0645c     13 13 02 F6 | 	mov	arg01, local05
06460     60 A6 B1 FD | 	call	#__system___string_cmp
06464     00 FA 0D F2 | 	cmp	result1, #0 wz
06468     00 FA 05 56 |  if_ne	mov	result1, #0
0646c     0C 00 90 5D |  if_ne	jmp	#LR__0546
06470                 | LR__0544
06470     01 22 06 F1 | 	add	local03, #1
06474     90 FF 9F FD | 	jmp	#LR__0542
06478                 | LR__0545
06478                 | ' return true
06478     01 FA 65 F6 | 	neg	result1, #1
0647c                 | LR__0546
0647c     A7 F0 03 F6 | 	mov	ptra, fp
06480     B2 00 A0 FD | 	call	#popregs_
06484                 | _isdec_ret
06484     2D 00 64 FD | 	ret
06488                 | 
06488                 | ' 
06488                 | ' ' Check if the part is a string.  
06488                 | ' 
06488                 | ' function isstring(s as string) as boolean
06488                 | _isstring
06488     01 4A 05 F6 | 	mov	COUNT_, #1
0648c     A8 00 A0 FD | 	call	#pushregs_
06490                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06490     09 1F 02 F6 | 	mov	local01, arg01
06494     01 14 06 F6 | 	mov	arg02, #1
06498     7C C6 B1 FD | 	call	#__system__Left_S
0649c     FD 12 02 F6 | 	mov	arg01, result1
064a0     84 01 00 FF 
064a4     D1 14 06 F6 | 	mov	arg02, ##@LR__5403
064a8     18 A6 B1 FD | 	call	#__system___string_cmp
064ac     00 FA 4D F2 | 	cmps	result1, #0 wz
064b0     28 00 90 5D |  if_ne	jmp	#LR__0550
064b4     0F 13 02 F6 | 	mov	arg01, local01
064b8     01 14 06 F6 | 	mov	arg02, #1
064bc     E0 C6 B1 FD | 	call	#__system__Right_S
064c0     FD 12 02 F6 | 	mov	arg01, result1
064c4     84 01 00 FF 
064c8     D3 14 06 F6 | 	mov	arg02, ##@LR__5404
064cc     F4 A5 B1 FD | 	call	#__system___string_cmp
064d0     00 FA 4D F2 | 	cmps	result1, #0 wz
064d4     01 FA 65 A6 |  if_e	neg	result1, #1
064d8     04 00 90 AD |  if_e	jmp	#LR__0551
064dc                 | LR__0550
064dc     00 FA 05 F6 | 	mov	result1, #0
064e0                 | LR__0551
064e0     A7 F0 03 F6 | 	mov	ptra, fp
064e4     B2 00 A0 FD | 	call	#popregs_
064e8                 | _isstring_ret
064e8     2D 00 64 FD | 	ret
064ec                 | 
064ec                 | ' 
064ec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
064ec                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
064ec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
064ec                 | ' 
064ec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
064ec                 | ' '
064ec                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
064ec                 | ' '
064ec                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
064ec                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
064ec                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
064ec                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
064ec                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
064ec                 | ' ' 
064ec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
064ec                 | ' 
064ec                 | ' '----- delete a line from a program
064ec                 | ' 
064ec                 | ' function deleteline(aline as ulong) as integer
064ec                 | _deleteline
064ec     03 4A 05 F6 | 	mov	COUNT_, #3
064f0     A8 00 A0 FD | 	call	#pushregs_
064f4     2C F0 07 F1 | 	add	ptra, #44
064f8     04 4E 05 F1 | 	add	fp, #4
064fc     A7 12 62 FC | 	wrlong	arg01, fp
06500     4A 00 00 FF 
06504     84 E4 05 F1 | 	add	objptr, ##38020
06508     F2 1E 02 FB | 	rdlong	local01, objptr
0650c     0C 4E 05 F1 | 	add	fp, #12
06510     A7 1E 62 FC | 	wrlong	local01, fp
06514     10 4E 85 F1 | 	sub	fp, #16
06518                 | ' 
06518                 | ' 
06518                 | ' searchptr=programstart
06518                 | ' 
06518                 | ' do
06518     3E 00 00 FF 
0651c     B8 E5 85 F1 | 	sub	objptr, ##32184
06520                 | LR__0560
06520     14 4E 05 F1 | 	add	fp, #20
06524     A7 12 02 F6 | 	mov	arg01, fp
06528     04 4E 85 F1 | 	sub	fp, #4
0652c     A7 14 02 FB | 	rdlong	arg02, fp
06530     10 4E 85 F1 | 	sub	fp, #16
06534     18 16 06 F6 | 	mov	arg03, #24
06538     20 99 B1 FD | 	call	#_psram_spin2_read1
0653c     10 4E 05 F1 | 	add	fp, #16
06540     A7 1E 02 FB | 	rdlong	local01, fp
06544     08 4E 85 F1 | 	sub	fp, #8
06548     A7 1E 62 FC | 	wrlong	local01, fp
0654c     20 4E 05 F1 | 	add	fp, #32
06550     A7 1E 02 FB | 	rdlong	local01, fp
06554     18 4E 85 F1 | 	sub	fp, #24
06558     A7 1E 62 FC | 	wrlong	local01, fp
0655c     04 4E 05 F1 | 	add	fp, #4
06560     A7 1E 02 FB | 	rdlong	local01, fp
06564     10 4E 85 F1 | 	sub	fp, #16
06568     A7 16 02 FB | 	rdlong	arg03, fp
0656c     04 4E 85 F1 | 	sub	fp, #4
06570     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06574     28 4E 05 C1 |  if_b	add	fp, #40
06578     A7 20 02 CB |  if_b	rdlong	local02, fp
0657c     28 4E 85 C1 |  if_b	sub	fp, #40
06580     FF FF 3F CF 
06584     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06588     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
0658c     0B 00 00 FF 
06590     CC E4 85 F1 | 	sub	objptr, ##5836
06594                 | ' 
06594                 | ' 
06594                 | ' if header(0)<>aline then return -1
06594     14 4E 05 F1 | 	add	fp, #20
06598     A7 1E 02 FB | 	rdlong	local01, fp
0659c     10 4E 85 F1 | 	sub	fp, #16
065a0     A7 22 02 FB | 	rdlong	local03, fp
065a4     04 4E 85 F1 | 	sub	fp, #4
065a8     11 1F 0A F2 | 	cmp	local01, local03 wz
065ac     01 FA 65 56 |  if_ne	neg	result1, #1
065b0     D8 02 90 5D |  if_ne	jmp	#LR__0566
065b4     08 4E 05 F1 | 	add	fp, #8
065b8     A7 12 02 FB | 	rdlong	arg01, fp
065bc     08 4E 85 F1 | 	sub	fp, #8
065c0     01 14 66 F6 | 	neg	arg02, #1
065c4     A0 70 B1 FD | 	call	#_pslpoke
065c8                 | ' 
065c8                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
065c8                 | ' 
065c8                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
065c8     28 4E 05 F1 | 	add	fp, #40
065cc     A7 1E 02 FB | 	rdlong	local01, fp
065d0     28 4E 85 F1 | 	sub	fp, #40
065d4     FF FF 3F FF 
065d8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
065dc     24 4E 05 A1 |  if_e	add	fp, #36
065e0     A7 22 02 AB |  if_e	rdlong	local03, fp
065e4     24 4E 85 A1 |  if_e	sub	fp, #36
065e8     FF FF 7F AF 
065ec     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
065f0     88 00 90 5D |  if_ne	jmp	#LR__0561
065f4     4A 00 00 FF 
065f8     84 E4 05 F1 | 	add	objptr, ##38020
065fc     00 04 80 FF 
06600     F2 00 68 FC | 	wrlong	##524288, objptr
06604     07 00 00 FF 
06608     28 E4 85 F1 | 	sub	objptr, ##3624
0660c     00 04 80 FF 
06610     F2 00 68 FC | 	wrlong	##524288, objptr
06614     07 00 00 FF 
06618     2C E4 05 F1 | 	add	objptr, ##3628
0661c     F2 00 68 FC | 	wrlong	#0, objptr
06620     04 E4 05 F1 | 	add	objptr, #4
06624     FF FF FF FF 
06628     F2 FE 6B FC | 	wrlong	##-1, objptr
0662c     4A 00 00 FF 
06630     8C E4 85 F1 | 	sub	objptr, ##38028
06634     00 12 06 F6 | 	mov	arg01, #0
06638     01 14 66 F6 | 	neg	arg02, #1
0663c     28 70 B1 FD | 	call	#_pslpoke
06640     10 12 06 F6 | 	mov	arg01, #16
06644     01 14 66 F6 | 	neg	arg02, #1
06648     1C 70 B1 FD | 	call	#_pslpoke
0664c     14 12 06 F6 | 	mov	arg01, #20
06650     1E 14 CE F9 | 	bmask	arg02, #30
06654     10 70 B1 FD | 	call	#_pslpoke
06658     50 00 00 FF 
0665c     B4 E4 05 F1 | 	add	objptr, ##41140
06660     00 04 80 FF 
06664     F2 00 68 FC | 	wrlong	##524288, objptr
06668     04 E4 05 F1 | 	add	objptr, #4
0666c     00 04 80 FF 
06670     F2 00 68 FC | 	wrlong	##524288, objptr
06674     50 00 00 FF 
06678     B8 E4 85 F1 | 	sub	objptr, ##41144
0667c                 | LR__0561
0667c                 | ' 
0667c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
0667c     28 4E 05 F1 | 	add	fp, #40
06680     A7 1E 02 FB | 	rdlong	local01, fp
06684     28 4E 85 F1 | 	sub	fp, #40
06688     FF FF 3F FF 
0668c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06690     74 00 90 5D |  if_ne	jmp	#LR__0562
06694     24 4E 05 F1 | 	add	fp, #36
06698     A7 22 02 FB | 	rdlong	local03, fp
0669c     24 4E 85 F1 | 	sub	fp, #36
066a0     FF FF 7F FF 
066a4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
066a8     5C 00 90 AD |  if_e	jmp	#LR__0562
066ac     24 4E 05 F1 | 	add	fp, #36
066b0     A7 12 02 FB | 	rdlong	arg01, fp
066b4     24 4E 85 F1 | 	sub	fp, #36
066b8     14 12 06 F1 | 	add	arg01, #20
066bc     1E 14 CE F9 | 	bmask	arg02, #30
066c0     A4 6F B1 FD | 	call	#_pslpoke
066c4     24 4E 05 F1 | 	add	fp, #36
066c8     A7 1E 02 FB | 	rdlong	local01, fp
066cc     4A 00 00 FF 
066d0     8C E4 05 F1 | 	add	objptr, ##38028
066d4     F2 1E 62 FC | 	wrlong	local01, objptr
066d8     4A 00 00 FF 
066dc     8C E4 85 F1 | 	sub	objptr, ##38028
066e0     A7 12 02 FB | 	rdlong	arg01, fp
066e4     24 4E 85 F1 | 	sub	fp, #36
066e8     AC 70 B1 FD | 	call	#_pslpeek
066ec     4A 00 00 FF 
066f0     88 E4 05 F1 | 	add	objptr, ##38024
066f4     F2 FA 61 FC | 	wrlong	result1, objptr
066f8     4A 00 00 FF 
066fc     88 E4 85 F1 | 	sub	objptr, ##38024
06700                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
06700                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
06700                 | '   lastline=pslpeek(header(4))
06700                 | '   return 0
06700     00 FA 05 F6 | 	mov	result1, #0
06704     84 01 90 FD | 	jmp	#LR__0566
06708                 | LR__0562
06708                 | ' 
06708                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
06708     28 4E 05 F1 | 	add	fp, #40
0670c     A7 1E 02 FB | 	rdlong	local01, fp
06710     28 4E 85 F1 | 	sub	fp, #40
06714     FF FF 3F FF 
06718     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0671c     58 00 90 AD |  if_e	jmp	#LR__0563
06720     24 4E 05 F1 | 	add	fp, #36
06724     A7 22 02 FB | 	rdlong	local03, fp
06728     24 4E 85 F1 | 	sub	fp, #36
0672c     FF FF 7F FF 
06730     FF 23 0E F2 | 	cmp	local03, ##-1 wz
06734     40 00 90 5D |  if_ne	jmp	#LR__0563
06738     28 4E 05 F1 | 	add	fp, #40
0673c     A7 12 02 FB | 	rdlong	arg01, fp
06740     28 4E 85 F1 | 	sub	fp, #40
06744     10 12 06 F1 | 	add	arg01, #16
06748     01 14 66 F6 | 	neg	arg02, #1
0674c     18 6F B1 FD | 	call	#_pslpoke
06750     28 4E 05 F1 | 	add	fp, #40
06754     A7 1E 02 FB | 	rdlong	local01, fp
06758     28 4E 85 F1 | 	sub	fp, #40
0675c     4A 00 00 FF 
06760     84 E4 05 F1 | 	add	objptr, ##38020
06764     F2 1E 62 FC | 	wrlong	local01, objptr
06768     4A 00 00 FF 
0676c     84 E4 85 F1 | 	sub	objptr, ##38020
06770                 | ' '   print "deleted first line"
06770                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06770                 | '   programstart=header(5) ' adjust the program start to point on the first new line
06770                 | '   return 0
06770     00 FA 05 F6 | 	mov	result1, #0
06774     14 01 90 FD | 	jmp	#LR__0566
06778                 | LR__0563
06778                 | ' 
06778                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
06778     28 4E 05 F1 | 	add	fp, #40
0677c     A7 1E 02 FB | 	rdlong	local01, fp
06780     28 4E 85 F1 | 	sub	fp, #40
06784     FF FF 3F FF 
06788     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0678c     24 4E 05 51 |  if_ne	add	fp, #36
06790     A7 22 02 5B |  if_ne	rdlong	local03, fp
06794     24 4E 85 51 |  if_ne	sub	fp, #36
06798     FF FF 7F 5F 
0679c     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
067a0     40 00 90 AD |  if_e	jmp	#LR__0564
067a4     28 4E 05 F1 | 	add	fp, #40
067a8     A7 12 02 FB | 	rdlong	arg01, fp
067ac     10 12 06 F1 | 	add	arg01, #16
067b0     04 4E 85 F1 | 	sub	fp, #4
067b4     A7 14 02 FB | 	rdlong	arg02, fp
067b8     24 4E 85 F1 | 	sub	fp, #36
067bc     A8 6E B1 FD | 	call	#_pslpoke
067c0     24 4E 05 F1 | 	add	fp, #36
067c4     A7 12 02 FB | 	rdlong	arg01, fp
067c8     14 12 06 F1 | 	add	arg01, #20
067cc     04 4E 05 F1 | 	add	fp, #4
067d0     A7 14 02 FB | 	rdlong	arg02, fp
067d4     28 4E 85 F1 | 	sub	fp, #40
067d8     8C 6E B1 FD | 	call	#_pslpoke
067dc                 | '    pslpoke(header(5)+16,header(4))  
067dc                 | '    pslpoke(header(4)+20, header(5))
067dc                 | '    return 0
067dc     00 FA 05 F6 | 	mov	result1, #0
067e0     A8 00 90 FD | 	jmp	#LR__0566
067e4                 | LR__0564
067e4     10 4E 05 F1 | 	add	fp, #16
067e8     A7 1E 02 FB | 	rdlong	local01, fp
067ec     08 4E 85 F1 | 	sub	fp, #8
067f0     A7 1E 62 FC | 	wrlong	local01, fp
067f4     4A 00 00 FF 
067f8     84 E4 05 F1 | 	add	objptr, ##38020
067fc     F2 1E 02 FB | 	rdlong	local01, objptr
06800     08 4E 05 F1 | 	add	fp, #8
06804     A7 1E 62 FC | 	wrlong	local01, fp
06808     10 4E 85 F1 | 	sub	fp, #16
0680c                 | ' 
0680c                 | ' 
0680c                 | ' 
0680c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
0680c                 | ' 
0680c                 | ' lineptr2=searchptr
0680c                 | ' searchptr=programstart
0680c                 | ' 
0680c                 | ' do
0680c     3E 00 00 FF 
06810     B8 E5 85 F1 | 	sub	objptr, ##32184
06814                 | LR__0565
06814     14 4E 05 F1 | 	add	fp, #20
06818     A7 12 02 F6 | 	mov	arg01, fp
0681c     04 4E 85 F1 | 	sub	fp, #4
06820     A7 14 02 FB | 	rdlong	arg02, fp
06824     10 4E 85 F1 | 	sub	fp, #16
06828     18 16 06 F6 | 	mov	arg03, #24
0682c     2C 96 B1 FD | 	call	#_psram_spin2_read1
06830     10 4E 05 F1 | 	add	fp, #16
06834     A7 1E 02 FB | 	rdlong	local01, fp
06838     08 4E 85 F1 | 	sub	fp, #8
0683c     A7 1E 62 FC | 	wrlong	local01, fp
06840     20 4E 05 F1 | 	add	fp, #32
06844     A7 1E 02 FB | 	rdlong	local01, fp
06848     18 4E 85 F1 | 	sub	fp, #24
0684c     A7 1E 62 FC | 	wrlong	local01, fp
06850     04 4E 05 F1 | 	add	fp, #4
06854     A7 1E 02 FB | 	rdlong	local01, fp
06858     10 4E 85 F1 | 	sub	fp, #16
0685c     A7 22 02 FB | 	rdlong	local03, fp
06860     04 4E 85 F1 | 	sub	fp, #4
06864     11 1F 12 F2 | 	cmp	local01, local03 wc
06868     28 4E 05 C1 |  if_b	add	fp, #40
0686c     A7 20 02 CB |  if_b	rdlong	local02, fp
06870     28 4E 85 C1 |  if_b	sub	fp, #40
06874     FF FF 3F CF 
06878     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0687c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0565
06880     0B 00 00 FF 
06884     CC E4 85 F1 | 	sub	objptr, ##5836
06888     00 FA 05 F6 | 	mov	result1, #0
0688c                 | LR__0566
0688c     A7 F0 03 F6 | 	mov	ptra, fp
06890     B2 00 A0 FD | 	call	#popregs_
06894                 | _deleteline_ret
06894     2D 00 64 FD | 	ret
06898                 | 
06898                 | ' 
06898                 | ' sub save_line
06898                 | _save_line
06898     03 4A 05 F6 | 	mov	COUNT_, #3
0689c     A8 00 A0 FD | 	call	#pushregs_
068a0     4A 00 00 FF 
068a4     7C E4 05 F1 | 	add	objptr, ##38012
068a8     F2 16 02 FB | 	rdlong	arg03, objptr
068ac     01 16 06 F1 | 	add	arg03, #1
068b0     05 00 00 FF 
068b4     18 E4 85 F1 | 	sub	objptr, ##2584
068b8     F2 14 02 FB | 	rdlong	arg02, objptr
068bc     0B 15 02 FD | 	qmul	arg02, arg03
068c0     0E 00 00 FF 
068c4     44 E4 85 F1 | 	sub	objptr, ##7236
068c8     F2 12 02 FB | 	rdlong	arg01, objptr
068cc     37 00 00 FF 
068d0     20 E4 85 F1 | 	sub	objptr, ##28192
068d4     09 1F 02 F6 | 	mov	local01, arg01
068d8     18 20 62 FD | 	getqx	local02
068dc     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
068e0                 | LR__0570
068e0     0F FB C9 FA | 	rdbyte	result1, local01 wz
068e4     01 1E 06 51 |  if_ne	add	local01, #1
068e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
068ec                 | LR__0571
068ec     09 1F 82 F1 | 	sub	local01, arg01
068f0     03 1E CE F7 | 	test	local01, #3 wz
068f4     02 1E 46 50 |  if_ne	shr	local01, #2
068f8     01 1E 06 51 |  if_ne	add	local01, #1
068fc     02 1E 66 50 |  if_ne	shl	local01, #2
06900     10 23 02 F6 | 	mov	local03, local02
06904     0F 23 02 F1 | 	add	local03, local01
06908     43 00 00 FF 
0690c     5C E4 05 F1 | 	add	objptr, ##34396
06910     F2 16 02 FB | 	rdlong	arg03, objptr
06914     10 17 02 F1 | 	add	arg03, local02
06918     04 00 00 FF 
0691c     28 E4 05 F1 | 	add	objptr, ##2088
06920     F2 16 62 FC | 	wrlong	arg03, objptr
06924     04 E4 05 F1 | 	add	objptr, #4
06928     F2 1E 62 FC | 	wrlong	local01, objptr
0692c     0C E4 85 F1 | 	sub	objptr, #12
06930     F2 12 02 F6 | 	mov	arg01, objptr
06934     04 00 00 FF 
06938     20 E4 85 F1 | 	sub	objptr, ##2080
0693c     F2 14 02 FB | 	rdlong	arg02, objptr
06940     10 17 02 F6 | 	mov	arg03, local02
06944     37 00 00 FF 
06948     90 E5 85 F1 | 	sub	objptr, ##28560
0694c     A8 95 B1 FD | 	call	#_psram_spin2_write
06950     2B 00 00 FF 
06954     54 E5 05 F1 | 	add	objptr, ##22356
06958     F2 12 02 FB | 	rdlong	arg01, objptr
0695c     0C 00 00 FF 
06960     3C E4 05 F1 | 	add	objptr, ##6204
06964     F2 14 02 FB | 	rdlong	arg02, objptr
06968     10 15 02 F1 | 	add	arg02, local02
0696c     0F 17 02 F6 | 	mov	arg03, local01
06970     37 00 00 FF 
06974     90 E5 85 F1 | 	sub	objptr, ##28560
06978     7C 95 B1 FD | 	call	#_psram_spin2_write
0697c     37 00 00 FF 
06980     90 E5 05 F1 | 	add	objptr, ##28560
06984     F2 1E 02 FB | 	rdlong	local01, objptr
06988     11 1F 02 F1 | 	add	local01, local03
0698c     F2 1E 62 FC | 	wrlong	local01, objptr
06990     43 00 00 FF 
06994     5C E4 85 F1 | 	sub	objptr, ##34396
06998     A7 F0 03 F6 | 	mov	ptra, fp
0699c     B2 00 A0 FD | 	call	#popregs_
069a0                 | _save_line_ret
069a0     2D 00 64 FD | 	ret
069a4                 | 
069a4                 | ' 
069a4                 | ' 
069a4                 | ' function insertline(aline as ulong) as integer
069a4                 | _insertline
069a4     02 4A 05 F6 | 	mov	COUNT_, #2
069a8     A8 00 A0 FD | 	call	#pushregs_
069ac     28 F0 07 F1 | 	add	ptra, #40
069b0     04 4E 05 F1 | 	add	fp, #4
069b4     A7 12 62 FC | 	wrlong	arg01, fp
069b8     4A 00 00 FF 
069bc     84 E4 05 F1 | 	add	objptr, ##38020
069c0     F2 1E 02 FB | 	rdlong	local01, objptr
069c4     04 4E 05 F1 | 	add	fp, #4
069c8     A7 1E 62 FC | 	wrlong	local01, fp
069cc     08 4E 85 F1 | 	sub	fp, #8
069d0                 | ' 
069d0                 | ' do
069d0     3E 00 00 FF 
069d4     B8 E5 85 F1 | 	sub	objptr, ##32184
069d8                 | LR__0580
069d8     10 4E 05 F1 | 	add	fp, #16
069dc     A7 12 02 F6 | 	mov	arg01, fp
069e0     08 4E 85 F1 | 	sub	fp, #8
069e4     A7 14 02 FB | 	rdlong	arg02, fp
069e8     08 4E 85 F1 | 	sub	fp, #8
069ec     18 16 06 F6 | 	mov	arg03, #24
069f0     68 94 B1 FD | 	call	#_psram_spin2_read1
069f4     08 4E 05 F1 | 	add	fp, #8
069f8     A7 1E 02 FB | 	rdlong	local01, fp
069fc     04 4E 05 F1 | 	add	fp, #4
06a00     A7 1E 62 FC | 	wrlong	local01, fp
06a04     18 4E 05 F1 | 	add	fp, #24
06a08     A7 1E 02 FB | 	rdlong	local01, fp
06a0c     1C 4E 85 F1 | 	sub	fp, #28
06a10     A7 1E 62 FC | 	wrlong	local01, fp
06a14     08 4E 05 F1 | 	add	fp, #8
06a18     A7 1E 02 FB | 	rdlong	local01, fp
06a1c     0C 4E 85 F1 | 	sub	fp, #12
06a20     A7 16 02 FB | 	rdlong	arg03, fp
06a24     04 4E 85 F1 | 	sub	fp, #4
06a28     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a2c     24 4E 05 C1 |  if_b	add	fp, #36
06a30     A7 20 02 CB |  if_b	rdlong	local02, fp
06a34     24 4E 85 C1 |  if_b	sub	fp, #36
06a38     FF FF 3F CF 
06a3c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06a40     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06a44     0B 00 00 FF 
06a48     CC E4 85 F1 | 	sub	objptr, ##5836
06a4c                 | ' 
06a4c                 | ' if header(0)=aline then return -1 ' delete it first
06a4c     10 4E 05 F1 | 	add	fp, #16
06a50     A7 1E 02 FB | 	rdlong	local01, fp
06a54     0C 4E 85 F1 | 	sub	fp, #12
06a58     A7 20 02 FB | 	rdlong	local02, fp
06a5c     04 4E 85 F1 | 	sub	fp, #4
06a60     10 1F 0A F2 | 	cmp	local01, local02 wz
06a64     01 FA 65 A6 |  if_e	neg	result1, #1
06a68     48 01 90 AD |  if_e	jmp	#LR__0583
06a6c                 | ' if header(0)<aline then return -2 ' end of program reached
06a6c     10 4E 05 F1 | 	add	fp, #16
06a70     A7 1E 02 FB | 	rdlong	local01, fp
06a74     0C 4E 85 F1 | 	sub	fp, #12
06a78     A7 16 02 FB | 	rdlong	arg03, fp
06a7c     04 4E 85 F1 | 	sub	fp, #4
06a80     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a84     02 FA 65 C6 |  if_b	neg	result1, #2
06a88     28 01 90 CD |  if_b	jmp	#LR__0583
06a8c                 | ' 
06a8c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
06a8c     20 4E 05 F1 | 	add	fp, #32
06a90     A7 1E 02 FB | 	rdlong	local01, fp
06a94     20 4E 85 F1 | 	sub	fp, #32
06a98     FF FF 7F FF 
06a9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06aa0     78 00 90 5D |  if_ne	jmp	#LR__0581
06aa4     43 00 00 FF 
06aa8     5C E4 05 F1 | 	add	objptr, ##34396
06aac     F2 1E 02 FB | 	rdlong	local01, objptr
06ab0     07 00 00 FF 
06ab4     28 E4 05 F1 | 	add	objptr, ##3624
06ab8     F2 1E 62 FC | 	wrlong	local01, objptr
06abc     0C 4E 05 F1 | 	add	fp, #12
06ac0     A7 12 02 FB | 	rdlong	arg01, fp
06ac4     0C 4E 85 F1 | 	sub	fp, #12
06ac8     10 12 06 F1 | 	add	arg01, #16
06acc     07 00 00 FF 
06ad0     28 E4 85 F1 | 	sub	objptr, ##3624
06ad4     F2 14 02 FB | 	rdlong	arg02, objptr
06ad8     43 00 00 FF 
06adc     5C E4 85 F1 | 	sub	objptr, ##34396
06ae0     84 6B B1 FD | 	call	#_pslpoke
06ae4     47 00 00 FF 
06ae8     8C E4 05 F1 | 	add	objptr, ##36492
06aec     FF FF FF FF 
06af0     F2 FE 6B FC | 	wrlong	##-1, objptr
06af4     0C 4E 05 F1 | 	add	fp, #12
06af8     A7 1E 02 FB | 	rdlong	local01, fp
06afc     0C 4E 85 F1 | 	sub	fp, #12
06b00     04 E4 05 F1 | 	add	objptr, #4
06b04     F2 1E 62 FC | 	wrlong	local01, objptr
06b08     47 00 00 FF 
06b0c     90 E4 85 F1 | 	sub	objptr, ##36496
06b10     84 FD BF FD | 	call	#_save_line
06b14                 | '   programstart=programptr
06b14                 | '   pslpoke(lineptr2+16,programptr)
06b14                 | '   ucompiledline(4)=$FFFF_FFFF
06b14                 | '   ucompiledline(5)=lineptr2
06b14                 | '   save_line
06b14                 | '   return 0
06b14     00 FA 05 F6 | 	mov	result1, #0
06b18     98 00 90 FD | 	jmp	#LR__0583
06b1c                 | LR__0581
06b1c                 | ' 
06b1c                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
06b1c     20 4E 05 F1 | 	add	fp, #32
06b20     A7 1E 02 FB | 	rdlong	local01, fp
06b24     20 4E 85 F1 | 	sub	fp, #32
06b28     FF FF 7F FF 
06b2c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06b30     7C 00 90 AD |  if_e	jmp	#LR__0582
06b34     20 4E 05 F1 | 	add	fp, #32
06b38     A7 1E 02 FB | 	rdlong	local01, fp
06b3c     47 00 00 FF 
06b40     8C E4 05 F1 | 	add	objptr, ##36492
06b44     F2 1E 62 FC | 	wrlong	local01, objptr
06b48     14 4E 85 F1 | 	sub	fp, #20
06b4c     A7 1E 02 FB | 	rdlong	local01, fp
06b50     04 E4 05 F1 | 	add	objptr, #4
06b54     F2 1E 62 FC | 	wrlong	local01, objptr
06b58     A7 12 02 FB | 	rdlong	arg01, fp
06b5c     0C 4E 85 F1 | 	sub	fp, #12
06b60     10 12 06 F1 | 	add	arg01, #16
06b64     04 00 00 FF 
06b68     34 E4 85 F1 | 	sub	objptr, ##2100
06b6c     F2 14 02 FB | 	rdlong	arg02, objptr
06b70     43 00 00 FF 
06b74     5C E4 85 F1 | 	sub	objptr, ##34396
06b78     EC 6A B1 FD | 	call	#_pslpoke
06b7c     20 4E 05 F1 | 	add	fp, #32
06b80     A7 12 02 FB | 	rdlong	arg01, fp
06b84     20 4E 85 F1 | 	sub	fp, #32
06b88     14 12 06 F1 | 	add	arg01, #20
06b8c     43 00 00 FF 
06b90     5C E4 05 F1 | 	add	objptr, ##34396
06b94     F2 14 02 FB | 	rdlong	arg02, objptr
06b98     43 00 00 FF 
06b9c     5C E4 85 F1 | 	sub	objptr, ##34396
06ba0     C4 6A B1 FD | 	call	#_pslpoke
06ba4     F0 FC BF FD | 	call	#_save_line
06ba8                 | '   ucompiledline(4)=header(4)
06ba8                 | '   ucompiledline(5)=lineptr2
06ba8                 | '   pslpoke(lineptr2+16,programptr)
06ba8                 | '   pslpoke(header(4)+20,programptr)
06ba8                 | '   save_line
06ba8                 | '   return 0
06ba8     00 FA 05 F6 | 	mov	result1, #0
06bac     04 00 90 FD | 	jmp	#LR__0583
06bb0                 | LR__0582
06bb0     00 FA 05 F6 | 	mov	result1, #0
06bb4                 | LR__0583
06bb4     A7 F0 03 F6 | 	mov	ptra, fp
06bb8     B2 00 A0 FD | 	call	#popregs_
06bbc                 | _insertline_ret
06bbc     2D 00 64 FD | 	ret
06bc0                 | 
06bc0                 | ' 
06bc0                 | ' sub add_line_at_end(aline) 
06bc0                 | _add_line_at_end
06bc0     4A 00 00 FF 
06bc4     88 E4 05 F1 | 	add	objptr, ##38024
06bc8     F2 12 62 FC | 	wrlong	arg01, objptr
06bcc     04 E4 05 F1 | 	add	objptr, #4
06bd0     F2 14 02 FB | 	rdlong	arg02, objptr
06bd4     03 00 00 FF 
06bd8     00 E4 85 F1 | 	sub	objptr, ##1536
06bdc     F2 14 62 FC | 	wrlong	arg02, objptr
06be0     03 00 00 FF 
06be4     00 E4 05 F1 | 	add	objptr, ##1536
06be8     F2 12 02 FB | 	rdlong	arg01, objptr
06bec     14 12 06 F1 | 	add	arg01, #20
06bf0     07 00 00 FF 
06bf4     30 E4 85 F1 | 	sub	objptr, ##3632
06bf8     F2 14 02 FB | 	rdlong	arg02, objptr
06bfc     43 00 00 FF 
06c00     5C E4 85 F1 | 	sub	objptr, ##34396
06c04     60 6A B1 FD | 	call	#_pslpoke
06c08     43 00 00 FF 
06c0c     5C E4 05 F1 | 	add	objptr, ##34396
06c10     F2 14 02 FB | 	rdlong	arg02, objptr
06c14     07 00 00 FF 
06c18     30 E4 05 F1 | 	add	objptr, ##3632
06c1c     F2 14 62 FC | 	wrlong	arg02, objptr
06c20     02 00 00 FF 
06c24     FC E5 85 F1 | 	sub	objptr, ##1532
06c28     FF FF BF FF 
06c2c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06c30                 | ' 
06c30                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06c30                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06c30     04 00 00 FF 
06c34     34 E4 85 F1 | 	sub	objptr, ##2100
06c38     F2 14 02 FB | 	rdlong	arg02, objptr
06c3c     43 00 00 FF 
06c40     5C E4 85 F1 | 	sub	objptr, ##34396
06c44     00 04 00 FF 
06c48     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06c4c     47 00 00 AF 
06c50     8C E4 05 A1 |  if_e	add	objptr, ##36492
06c54     FF FF FF AF 
06c58     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06c5c     47 00 00 AF 
06c60     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06c64     30 FC BF FD | 	call	#_save_line
06c68     43 00 00 FF 
06c6c     5C E4 05 F1 | 	add	objptr, ##34396
06c70     F2 12 02 FB | 	rdlong	arg01, objptr
06c74     43 00 00 FF 
06c78     5C E4 85 F1 | 	sub	objptr, ##34396
06c7c     01 14 66 F6 | 	neg	arg02, #1
06c80     E4 69 B1 FD | 	call	#_pslpoke
06c84                 | _add_line_at_end_ret
06c84     2D 00 64 FD | 	ret
06c88                 | 
06c88                 | ' 
06c88                 | ' function compile_immediate(linetype as ulong) as integer
06c88                 | _compile_immediate
06c88     09 4A 05 F6 | 	mov	COUNT_, #9
06c8c     A8 00 A0 FD | 	call	#pushregs_
06c90                 | _compile_immediate_enter
06c90     09 25 0A F6 | 	mov	local04, arg01 wz
06c94     00 26 06 F6 | 	mov	local05, #0
06c98     00 28 06 F6 | 	mov	local06, #0
06c9c                 | ' 
06c9c                 | ' ' linetype=cont+1, linetype=0 immediate
06c9c                 | ' '  : 1: this is the first part of the line that will continue
06c9c                 | ' ' 2 - this is the continuation of the line
06c9c                 | ' ' 3 - this is the last continued line
06c9c                 | ' ' 4 - this is the one and only part
06c9c                 | ' 
06c9c                 | ' err=0
06c9c                 | ' cmd=0
06c9c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
06c9c     30 00 90 5D |  if_ne	jmp	#LR__0590
06ca0     35 00 00 FF 
06ca4     10 E4 05 F1 | 	add	objptr, ##27152
06ca8     F2 28 02 FB | 	rdlong	local06, objptr
06cac     02 00 00 FF 
06cb0     34 E4 05 F1 | 	add	objptr, ##1076
06cb4     F2 02 68 FC | 	wrlong	#1, objptr
06cb8     00 2A 06 F6 | 	mov	local07, #0
06cbc     13 00 00 FF 
06cc0     38 E4 05 F1 | 	add	objptr, ##9784
06cc4     F2 00 68 FC | 	wrlong	#0, objptr
06cc8     4A 00 00 FF 
06ccc     7C E4 85 F1 | 	sub	objptr, ##38012
06cd0                 | LR__0590
06cd0                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06cd0     02 24 0E F2 | 	cmp	local04, #2 wz
06cd4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06cd8     24 00 90 5D |  if_ne	jmp	#LR__0591
06cdc     35 00 00 FF 
06ce0     10 E4 05 F1 | 	add	objptr, ##27152
06ce4     F2 28 02 FB | 	rdlong	local06, objptr
06ce8     01 2A 06 F6 | 	mov	local07, #1
06cec     02 00 00 FF 
06cf0     34 E4 05 F1 | 	add	objptr, ##1076
06cf4     F2 02 68 FC | 	wrlong	#1, objptr
06cf8     37 00 00 FF 
06cfc     44 E4 85 F1 | 	sub	objptr, ##28228
06d00                 | LR__0591
06d00                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06d00     04 24 0E F2 | 	cmp	local04, #4 wz
06d04     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06d08     30 00 90 5D |  if_ne	jmp	#LR__0592
06d0c     35 00 00 FF 
06d10     18 E4 05 F1 | 	add	objptr, ##27160
06d14     F2 28 02 FB | 	rdlong	local06, objptr
06d18     02 2A 06 F6 | 	mov	local07, #2
06d1c     02 00 00 FF 
06d20     2C E4 05 F1 | 	add	objptr, ##1068
06d24     F2 04 68 FC | 	wrlong	#2, objptr
06d28     13 00 00 FF 
06d2c     38 E4 05 F1 | 	add	objptr, ##9784
06d30     F2 04 68 FC | 	wrlong	#2, objptr
06d34     4A 00 00 FF 
06d38     7C E4 85 F1 | 	sub	objptr, ##38012
06d3c                 | LR__0592
06d3c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
06d3c     05 24 0E F2 | 	cmp	local04, #5 wz
06d40     44 00 90 5D |  if_ne	jmp	#LR__0593
06d44     37 00 00 FF 
06d48     44 E4 05 F1 | 	add	objptr, ##28228
06d4c     F2 FA 01 FB | 	rdlong	result1, objptr
06d50     FD 2A 02 F6 | 	mov	local07, result1
06d54     03 2A 66 F0 | 	shl	local07, #3
06d58     02 00 00 FF 
06d5c     38 E4 85 F1 | 	sub	objptr, ##1080
06d60     F2 2A 02 F1 | 	add	local07, objptr
06d64     04 2A 06 F1 | 	add	local07, #4
06d68     15 29 02 FB | 	rdlong	local06, local07
06d6c     FD 2A 02 F6 | 	mov	local07, result1
06d70     01 2A 06 F1 | 	add	local07, #1
06d74     02 00 00 FF 
06d78     38 E4 05 F1 | 	add	objptr, ##1080
06d7c     F2 2A 62 FC | 	wrlong	local07, objptr
06d80     37 00 00 FF 
06d84     44 E4 85 F1 | 	sub	objptr, ##28228
06d88                 | LR__0593
06d88     00 2C 06 F6 | 	mov	local08, #0
06d8c                 | ' vars=0
06d8c                 | ' 'print  "In compile_immediate cmd=:", cmd
06d8c                 | ' 451 select case cmd
06d8c     5C 28 0E F2 | 	cmp	local06, #92 wz
06d90     80 02 90 AD |  if_e	jmp	#LR__0594
06d94     47 28 0E F2 | 	cmp	local06, #71 wz
06d98     84 02 90 AD |  if_e	jmp	#LR__0595
06d9c     59 28 0E F2 | 	cmp	local06, #89 wz
06da0     88 02 90 AD |  if_e	jmp	#LR__0596
06da4     45 28 0E F2 | 	cmp	local06, #69 wz
06da8     8C 02 90 AD |  if_e	jmp	#LR__0597
06dac     69 28 0E F2 | 	cmp	local06, #105 wz
06db0     90 02 90 AD |  if_e	jmp	#LR__0598
06db4     40 28 0E F2 | 	cmp	local06, #64 wz
06db8     84 05 90 AD |  if_e	jmp	#LR__0665
06dbc     B4 28 0E F2 | 	cmp	local06, #180 wz
06dc0     8C 02 90 AD |  if_e	jmp	#LR__0599
06dc4     49 28 0E F2 | 	cmp	local06, #73 wz
06dc8     8C 02 90 AD |  if_e	jmp	#LR__0600
06dcc     50 28 0E F2 | 	cmp	local06, #80 wz
06dd0     90 02 90 AD |  if_e	jmp	#LR__0601
06dd4     AE 28 0E F2 | 	cmp	local06, #174 wz
06dd8     94 02 90 AD |  if_e	jmp	#LR__0602
06ddc     B0 28 0E F2 | 	cmp	local06, #176 wz
06de0     98 02 90 AD |  if_e	jmp	#LR__0603
06de4     AF 28 0E F2 | 	cmp	local06, #175 wz
06de8     9C 02 90 AD |  if_e	jmp	#LR__0604
06dec     B1 28 0E F2 | 	cmp	local06, #177 wz
06df0     A0 02 90 AD |  if_e	jmp	#LR__0605
06df4     68 28 0E F2 | 	cmp	local06, #104 wz
06df8     A4 02 90 AD |  if_e	jmp	#LR__0606
06dfc     74 28 0E F2 | 	cmp	local06, #116 wz
06e00     A8 02 90 AD |  if_e	jmp	#LR__0607
06e04     73 28 0E F2 | 	cmp	local06, #115 wz
06e08     AC 02 90 AD |  if_e	jmp	#LR__0608
06e0c     6C 28 0E F2 | 	cmp	local06, #108 wz
06e10     B0 02 90 AD |  if_e	jmp	#LR__0609
06e14     89 28 0E F2 | 	cmp	local06, #137 wz
06e18     24 05 90 AD |  if_e	jmp	#LR__0665
06e1c     72 28 0E F2 | 	cmp	local06, #114 wz
06e20     AC 02 90 AD |  if_e	jmp	#LR__0610
06e24     5D 28 0E F2 | 	cmp	local06, #93 wz
06e28     14 05 90 AD |  if_e	jmp	#LR__0665
06e2c     96 28 0E F2 | 	cmp	local06, #150 wz
06e30     A4 02 90 AD |  if_e	jmp	#LR__0611
06e34     43 28 0E F2 | 	cmp	local06, #67 wz
06e38     A4 02 90 AD |  if_e	jmp	#LR__0612
06e3c     5A 28 0E F2 | 	cmp	local06, #90 wz
06e40     A8 02 90 AD |  if_e	jmp	#LR__0613
06e44     AB 28 0E F2 | 	cmp	local06, #171 wz
06e48     F4 04 90 AD |  if_e	jmp	#LR__0665
06e4c     BD 28 0E F2 | 	cmp	local06, #189 wz
06e50     A0 02 90 AD |  if_e	jmp	#LR__0614
06e54     BB 28 0E F2 | 	cmp	local06, #187 wz
06e58     A4 02 90 AD |  if_e	jmp	#LR__0615
06e5c     4E 28 0E F2 | 	cmp	local06, #78 wz
06e60     A8 02 90 AD |  if_e	jmp	#LR__0616
06e64     A9 28 0E F2 | 	cmp	local06, #169 wz
06e68     BC 02 90 AD |  if_e	jmp	#LR__0618
06e6c     46 28 0E F2 | 	cmp	local06, #70 wz
06e70     BC 02 90 AD |  if_e	jmp	#LR__0619
06e74     71 28 0E F2 | 	cmp	local06, #113 wz
06e78     C0 02 90 AD |  if_e	jmp	#LR__0620
06e7c     60 28 0E F2 | 	cmp	local06, #96 wz
06e80     C4 02 90 AD |  if_e	jmp	#LR__0621
06e84     4A 28 0E F2 | 	cmp	local06, #74 wz
06e88     C8 02 90 AD |  if_e	jmp	#LR__0622
06e8c     48 28 0E F2 | 	cmp	local06, #72 wz
06e90     C8 02 90 AD |  if_e	jmp	#LR__0623
06e94     58 28 0E F2 | 	cmp	local06, #88 wz
06e98     CC 02 90 AD |  if_e	jmp	#LR__0624
06e9c     5F 28 0E F2 | 	cmp	local06, #95 wz
06ea0     CC 02 90 AD |  if_e	jmp	#LR__0625
06ea4     8A 28 0E F2 | 	cmp	local06, #138 wz
06ea8     D0 02 90 AD |  if_e	jmp	#LR__0626
06eac     4C 28 0E F2 | 	cmp	local06, #76 wz
06eb0     D4 02 90 AD |  if_e	jmp	#LR__0627
06eb4     52 28 0E F2 | 	cmp	local06, #82 wz
06eb8     D8 02 90 AD |  if_e	jmp	#LR__0628
06ebc     97 28 0E F2 | 	cmp	local06, #151 wz
06ec0     DC 02 90 AD |  if_e	jmp	#LR__0629
06ec4     61 28 0E F2 | 	cmp	local06, #97 wz
06ec8     E0 02 90 AD |  if_e	jmp	#LR__0630
06ecc     63 28 0E F2 | 	cmp	local06, #99 wz
06ed0     E4 02 90 AD |  if_e	jmp	#LR__0631
06ed4     41 28 0E F2 | 	cmp	local06, #65 wz
06ed8     64 04 90 AD |  if_e	jmp	#LR__0665
06edc     4B 28 0E F2 | 	cmp	local06, #75 wz
06ee0     E0 02 90 AD |  if_e	jmp	#LR__0632
06ee4     B3 28 0E F2 | 	cmp	local06, #179 wz
06ee8     E0 02 90 AD |  if_e	jmp	#LR__0633
06eec     5E 28 0E F2 | 	cmp	local06, #94 wz
06ef0     E4 02 90 AD |  if_e	jmp	#LR__0634
06ef4     7C 28 0E F2 | 	cmp	local06, #124 wz
06ef8     E8 02 90 AD |  if_e	jmp	#LR__0635
06efc     7D 28 0E F2 | 	cmp	local06, #125 wz
06f00     EC 02 90 AD |  if_e	jmp	#LR__0636
06f04     7E 28 0E F2 | 	cmp	local06, #126 wz
06f08     F0 02 90 AD |  if_e	jmp	#LR__0637
06f0c     7F 28 0E F2 | 	cmp	local06, #127 wz
06f10     F4 02 90 AD |  if_e	jmp	#LR__0638
06f14     80 28 0E F2 | 	cmp	local06, #128 wz
06f18     F8 02 90 AD |  if_e	jmp	#LR__0639
06f1c     55 28 0E F2 | 	cmp	local06, #85 wz
06f20     FC 02 90 AD |  if_e	jmp	#LR__0640
06f24     75 28 0E F2 | 	cmp	local06, #117 wz
06f28     00 03 90 AD |  if_e	jmp	#LR__0641
06f2c     42 28 0E F2 | 	cmp	local06, #66 wz
06f30     04 03 90 AD |  if_e	jmp	#LR__0642
06f34     95 28 0E F2 | 	cmp	local06, #149 wz
06f38     08 03 90 AD |  if_e	jmp	#LR__0643
06f3c     AC 28 0E F2 | 	cmp	local06, #172 wz
06f40     FC 03 90 AD |  if_e	jmp	#LR__0665
06f44     81 28 0E F2 | 	cmp	local06, #129 wz
06f48     04 03 90 AD |  if_e	jmp	#LR__0644
06f4c     44 28 0E F2 | 	cmp	local06, #68 wz
06f50     08 03 90 AD |  if_e	jmp	#LR__0645
06f54     BC 28 0E F2 | 	cmp	local06, #188 wz
06f58     0C 03 90 AD |  if_e	jmp	#LR__0646
06f5c     88 28 0E F2 | 	cmp	local06, #136 wz
06f60     DC 03 90 AD |  if_e	jmp	#LR__0665
06f64     92 28 0E F2 | 	cmp	local06, #146 wz
06f68     08 03 90 AD |  if_e	jmp	#LR__0647
06f6c     BE 28 0E F2 | 	cmp	local06, #190 wz
06f70     88 04 90 AD |  if_e	jmp	#LR__0666
06f74     AA 28 0E F2 | 	cmp	local06, #170 wz
06f78     C4 03 90 AD |  if_e	jmp	#LR__0665
06f7c     4D 28 0E F2 | 	cmp	local06, #77 wz
06f80     F8 02 90 AD |  if_e	jmp	#LR__0648
06f84     51 28 0E F2 | 	cmp	local06, #81 wz
06f88     FC 02 90 AD |  if_e	jmp	#LR__0649
06f8c     8E 28 0E F2 | 	cmp	local06, #142 wz
06f90     00 03 90 AD |  if_e	jmp	#LR__0650
06f94     90 28 0E F2 | 	cmp	local06, #144 wz
06f98     04 03 90 AD |  if_e	jmp	#LR__0651
06f9c     8D 28 0E F2 | 	cmp	local06, #141 wz
06fa0     08 03 90 AD |  if_e	jmp	#LR__0652
06fa4     8C 28 0E F2 | 	cmp	local06, #140 wz
06fa8     0C 03 90 AD |  if_e	jmp	#LR__0653
06fac     91 28 0E F2 | 	cmp	local06, #145 wz
06fb0     10 03 90 AD |  if_e	jmp	#LR__0654
06fb4     8B 28 0E F2 | 	cmp	local06, #139 wz
06fb8     14 03 90 AD |  if_e	jmp	#LR__0655
06fbc     8F 28 0E F2 | 	cmp	local06, #143 wz
06fc0     18 03 90 AD |  if_e	jmp	#LR__0656
06fc4     B2 28 0E F2 | 	cmp	local06, #178 wz
06fc8     1C 03 90 AD |  if_e	jmp	#LR__0657
06fcc     6D 28 0E F2 | 	cmp	local06, #109 wz
06fd0     20 03 90 AD |  if_e	jmp	#LR__0658
06fd4     70 28 0E F2 | 	cmp	local06, #112 wz
06fd8     64 03 90 AD |  if_e	jmp	#LR__0665
06fdc     56 28 0E F2 | 	cmp	local06, #86 wz
06fe0     1C 03 90 AD |  if_e	jmp	#LR__0659
06fe4     57 28 0E F2 | 	cmp	local06, #87 wz
06fe8     54 03 90 AD |  if_e	jmp	#LR__0665
06fec     79 28 0E F2 | 	cmp	local06, #121 wz
06ff0     18 03 90 AD |  if_e	jmp	#LR__0660
06ff4     77 28 0E F2 | 	cmp	local06, #119 wz
06ff8     1C 03 90 AD |  if_e	jmp	#LR__0661
06ffc     78 28 0E F2 | 	cmp	local06, #120 wz
07000     20 03 90 AD |  if_e	jmp	#LR__0662
07004     01 00 00 FF 
07008     04 28 0E F2 | 	cmp	local06, ##516 wz
0700c     20 03 90 AD |  if_e	jmp	#LR__0663
07010     24 03 90 FD | 	jmp	#LR__0664
07014                 | LR__0594
07014     08 0D B0 FD | 	call	#_compile_fun_2p
07018     FD 26 02 F6 | 	mov	local05, result1
0701c     20 03 90 FD | 	jmp	#LR__0665
07020                 | LR__0595
07020     3C 0E B0 FD | 	call	#_compile_fun_4p
07024     FD 26 02 F6 | 	mov	local05, result1
07028     14 03 90 FD | 	jmp	#LR__0665
0702c                 | LR__0596
0702c     68 33 B0 FD | 	call	#_expr
07030                 | ' expr()
07030                 | ' return 0
07030     00 26 06 F6 | 	mov	local05, #0
07034     08 03 90 FD | 	jmp	#LR__0665
07038                 | LR__0597
07038     58 0D B0 FD | 	call	#_compile_fun_3p
0703c     FD 26 02 F6 | 	mov	local05, result1
07040     FC 02 90 FD | 	jmp	#LR__0665
07044                 | LR__0598
07044     50 33 B0 FD | 	call	#_expr
07048                 | ' expr()
07048                 | ' return 0
07048     00 26 06 F6 | 	mov	local05, #0
0704c     F0 02 90 FD | 	jmp	#LR__0665
07050                 | LR__0599
07050     44 33 B0 FD | 	call	#_expr
07054                 | ' expr()
07054                 | ' return 0
07054     E8 02 90 FD | 	jmp	#LR__0665
07058                 | LR__0600
07058     3C 33 B0 FD | 	call	#_expr
0705c                 | ' expr()
0705c                 | ' return 0
0705c     00 26 06 F6 | 	mov	local05, #0
07060     DC 02 90 FD | 	jmp	#LR__0665
07064                 | LR__0601
07064     98 10 B0 FD | 	call	#_compile_fun_varp
07068     FD 2C 02 F6 | 	mov	local08, result1
0706c     D0 02 90 FD | 	jmp	#LR__0665
07070                 | LR__0602
07070     8C 10 B0 FD | 	call	#_compile_fun_varp
07074     FD 2C 02 F6 | 	mov	local08, result1
07078     C4 02 90 FD | 	jmp	#LR__0665
0707c                 | LR__0603
0707c     80 10 B0 FD | 	call	#_compile_fun_varp
07080     FD 2C 02 F6 | 	mov	local08, result1
07084     B8 02 90 FD | 	jmp	#LR__0665
07088                 | LR__0604
07088     74 10 B0 FD | 	call	#_compile_fun_varp
0708c     FD 2C 02 F6 | 	mov	local08, result1
07090     AC 02 90 FD | 	jmp	#LR__0665
07094                 | LR__0605
07094     68 10 B0 FD | 	call	#_compile_fun_varp
07098     FD 2C 02 F6 | 	mov	local08, result1
0709c     A0 02 90 FD | 	jmp	#LR__0665
070a0                 | LR__0606
070a0     F4 32 B0 FD | 	call	#_expr
070a4                 | ' expr()
070a4                 | ' return 0
070a4     00 26 06 F6 | 	mov	local05, #0
070a8     94 02 90 FD | 	jmp	#LR__0665
070ac                 | LR__0607
070ac     50 10 B0 FD | 	call	#_compile_fun_varp
070b0     FD 2C 02 F6 | 	mov	local08, result1
070b4     88 02 90 FD | 	jmp	#LR__0665
070b8                 | LR__0608
070b8     44 10 B0 FD | 	call	#_compile_fun_varp
070bc     FD 2C 02 F6 | 	mov	local08, result1
070c0     7C 02 90 FD | 	jmp	#LR__0665
070c4                 | LR__0609
070c4     BC 0E B0 FD | 	call	#_compile_fun_5p
070c8     FD 26 02 F6 | 	mov	local05, result1
070cc     70 02 90 FD | 	jmp	#LR__0665
070d0                 | LR__0610
070d0     18 1A B0 FD | 	call	#_compile_dim
070d4     24 03 90 FD | 	jmp	#LR__0666
070d8                 | LR__0611
070d8     44 0C B0 FD | 	call	#_compile_fun_2p
070dc     60 02 90 FD | 	jmp	#LR__0665
070e0                 | LR__0612
070e0     3C 0C B0 FD | 	call	#_compile_fun_2p
070e4     FD 26 02 F6 | 	mov	local05, result1
070e8     54 02 90 FD | 	jmp	#LR__0665
070ec                 | LR__0613
070ec     D4 18 B0 FD | 	call	#_compile_else
070f0     08 03 90 FD | 	jmp	#LR__0666
070f4                 | LR__0614
070f4     08 10 B0 FD | 	call	#_compile_fun_varp
070f8     FD 2C 02 F6 | 	mov	local08, result1
070fc     40 02 90 FD | 	jmp	#LR__0665
07100                 | LR__0615
07100     FC 0F B0 FD | 	call	#_compile_fun_varp
07104     FD 2C 02 F6 | 	mov	local08, result1
07108     34 02 90 FD | 	jmp	#LR__0665
0710c                 | LR__0616
0710c     01 24 16 F2 | 	cmp	local04, #1 wc
07110     08 00 90 CD |  if_b	jmp	#LR__0617
07114     90 2E B0 FD | 	call	#_compile_goto
07118     E0 02 90 FD | 	jmp	#LR__0666
0711c                 | LR__0617
0711c     19 12 06 F6 | 	mov	arg01, #25
07120     E0 63 B1 FD | 	call	#_printerror
07124     D4 02 90 FD | 	jmp	#LR__0666
07128                 | LR__0618
07128     14 2E B0 FD | 	call	#_compile_gosub
0712c     CC 02 90 FD | 	jmp	#LR__0666
07130                 | LR__0619
07130     60 0C B0 FD | 	call	#_compile_fun_3p
07134     FD 26 02 F6 | 	mov	local05, result1
07138     04 02 90 FD | 	jmp	#LR__0665
0713c                 | LR__0620
0713c     20 0D B0 FD | 	call	#_compile_fun_4p
07140     FD 26 02 F6 | 	mov	local05, result1
07144     F8 01 90 FD | 	jmp	#LR__0665
07148                 | LR__0621
07148     4C 32 B0 FD | 	call	#_expr
0714c                 | ' expr()
0714c                 | ' return 0
0714c     00 26 06 F6 | 	mov	local05, #0
07150     EC 01 90 FD | 	jmp	#LR__0665
07154                 | LR__0622
07154     A4 20 B0 FD | 	call	#_compile_for
07158     A0 02 90 FD | 	jmp	#LR__0666
0715c                 | LR__0623
0715c     00 0D B0 FD | 	call	#_compile_fun_4p
07160     FD 26 02 F6 | 	mov	local05, result1
07164     D8 01 90 FD | 	jmp	#LR__0665
07168                 | LR__0624
07168     18 17 B0 FD | 	call	#_compile_if
0716c     8C 02 90 FD | 	jmp	#LR__0666
07170                 | LR__0625
07170     24 32 B0 FD | 	call	#_expr
07174                 | ' expr()
07174                 | ' return 0
07174     00 26 06 F6 | 	mov	local05, #0
07178     C4 01 90 FD | 	jmp	#LR__0665
0717c                 | LR__0626
0717c     18 32 B0 FD | 	call	#_expr
07180                 | ' expr()
07180                 | ' return 0
07180     00 26 06 F6 | 	mov	local05, #0
07184     B8 01 90 FD | 	jmp	#LR__0665
07188                 | LR__0627
07188     74 0F B0 FD | 	call	#_compile_fun_varp
0718c     FD 2C 02 F6 | 	mov	local08, result1
07190     AC 01 90 FD | 	jmp	#LR__0665
07194                 | LR__0628
07194     68 0F B0 FD | 	call	#_compile_fun_varp
07198     FD 2C 02 F6 | 	mov	local08, result1
0719c     A0 01 90 FD | 	jmp	#LR__0665
071a0                 | LR__0629
071a0     7C 0B B0 FD | 	call	#_compile_fun_2p
071a4     FD 26 02 F6 | 	mov	local05, result1
071a8     94 01 90 FD | 	jmp	#LR__0665
071ac                 | LR__0630
071ac     E8 31 B0 FD | 	call	#_expr
071b0                 | ' expr()
071b0                 | ' return 0
071b0     00 26 06 F6 | 	mov	local05, #0
071b4     88 01 90 FD | 	jmp	#LR__0665
071b8                 | LR__0631
071b8     DC 31 B0 FD | 	call	#_expr
071bc                 | ' expr()
071bc                 | ' return 0
071bc     00 26 06 F6 | 	mov	local05, #0
071c0     7C 01 90 FD | 	jmp	#LR__0665
071c4                 | LR__0632
071c4     C8 2B B0 FD | 	call	#_compile_next
071c8     30 02 90 FD | 	jmp	#LR__0666
071cc                 | LR__0633
071cc     C4 0B B0 FD | 	call	#_compile_fun_3p
071d0     FD 26 02 F6 | 	mov	local05, result1
071d4     68 01 90 FD | 	jmp	#LR__0665
071d8                 | LR__0634
071d8     BC 31 B0 FD | 	call	#_expr
071dc                 | ' expr()
071dc                 | ' return 0
071dc     00 26 06 F6 | 	mov	local05, #0
071e0     5C 01 90 FD | 	jmp	#LR__0665
071e4                 | LR__0635
071e4     B0 31 B0 FD | 	call	#_expr
071e8                 | ' expr()
071e8                 | ' return 0
071e8     00 26 06 F6 | 	mov	local05, #0
071ec     50 01 90 FD | 	jmp	#LR__0665
071f0                 | LR__0636
071f0     A4 31 B0 FD | 	call	#_expr
071f4                 | ' expr()
071f4                 | ' return 0
071f4     00 26 06 F6 | 	mov	local05, #0
071f8     44 01 90 FD | 	jmp	#LR__0665
071fc                 | LR__0637
071fc     98 31 B0 FD | 	call	#_expr
07200                 | ' expr()
07200                 | ' return 0
07200     00 26 06 F6 | 	mov	local05, #0
07204     38 01 90 FD | 	jmp	#LR__0665
07208                 | LR__0638
07208     54 0C B0 FD | 	call	#_compile_fun_4p
0720c     FD 26 02 F6 | 	mov	local05, result1
07210     2C 01 90 FD | 	jmp	#LR__0665
07214                 | LR__0639
07214     80 31 B0 FD | 	call	#_expr
07218                 | ' expr()
07218                 | ' return 0
07218     00 26 06 F6 | 	mov	local05, #0
0721c     20 01 90 FD | 	jmp	#LR__0665
07220                 | LR__0640
07220     FC 0A B0 FD | 	call	#_compile_fun_2p
07224     FD 26 02 F6 | 	mov	local05, result1
07228     14 01 90 FD | 	jmp	#LR__0665
0722c                 | LR__0641
0722c     D0 0E B0 FD | 	call	#_compile_fun_varp
07230     FD 2C 02 F6 | 	mov	local08, result1
07234     08 01 90 FD | 	jmp	#LR__0665
07238                 | LR__0642
07238     E4 0A B0 FD | 	call	#_compile_fun_2p
0723c     FD 26 02 F6 | 	mov	local05, result1
07240     FC 00 90 FD | 	jmp	#LR__0665
07244                 | LR__0643
07244     D8 0A B0 FD | 	call	#_compile_fun_2p
07248     FD 26 02 F6 | 	mov	local05, result1
0724c     F0 00 90 FD | 	jmp	#LR__0665
07250                 | LR__0644
07250     CC 0A B0 FD | 	call	#_compile_fun_2p
07254     FD 26 02 F6 | 	mov	local05, result1
07258     E4 00 90 FD | 	jmp	#LR__0665
0725c                 | LR__0645
0725c     4C 0F B0 FD | 	call	#_compile_print
07260     FD 26 02 F6 | 	mov	local05, result1
07264     94 01 90 FD | 	jmp	#LR__0666
07268                 | LR__0646
07268     94 0E B0 FD | 	call	#_compile_fun_varp
0726c     FD 2C 02 F6 | 	mov	local08, result1
07270     CC 00 90 FD | 	jmp	#LR__0665
07274                 | LR__0647
07274     20 31 B0 FD | 	call	#_expr
07278                 | ' expr()
07278                 | ' return 0
07278     C4 00 90 FD | 	jmp	#LR__0665
0727c                 | LR__0648
0727c     80 0E B0 FD | 	call	#_compile_fun_varp
07280     FD 2C 02 F6 | 	mov	local08, result1
07284     B8 00 90 FD | 	jmp	#LR__0665
07288                 | LR__0649
07288     74 0E B0 FD | 	call	#_compile_fun_varp
0728c     FD 2C 02 F6 | 	mov	local08, result1
07290     AC 00 90 FD | 	jmp	#LR__0665
07294                 | LR__0650
07294     88 0A B0 FD | 	call	#_compile_fun_2p
07298     FD 26 02 F6 | 	mov	local05, result1
0729c     A0 00 90 FD | 	jmp	#LR__0665
072a0                 | LR__0651
072a0     7C 0A B0 FD | 	call	#_compile_fun_2p
072a4     FD 26 02 F6 | 	mov	local05, result1
072a8     94 00 90 FD | 	jmp	#LR__0665
072ac                 | LR__0652
072ac     70 0A B0 FD | 	call	#_compile_fun_2p
072b0     FD 26 02 F6 | 	mov	local05, result1
072b4     88 00 90 FD | 	jmp	#LR__0665
072b8                 | LR__0653
072b8     64 0A B0 FD | 	call	#_compile_fun_2p
072bc     FD 26 02 F6 | 	mov	local05, result1
072c0     7C 00 90 FD | 	jmp	#LR__0665
072c4                 | LR__0654
072c4     58 0A B0 FD | 	call	#_compile_fun_2p
072c8     FD 26 02 F6 | 	mov	local05, result1
072cc     70 00 90 FD | 	jmp	#LR__0665
072d0                 | LR__0655
072d0     4C 0A B0 FD | 	call	#_compile_fun_2p
072d4     FD 26 02 F6 | 	mov	local05, result1
072d8     64 00 90 FD | 	jmp	#LR__0665
072dc                 | LR__0656
072dc     40 0A B0 FD | 	call	#_compile_fun_2p
072e0     FD 26 02 F6 | 	mov	local05, result1
072e4     58 00 90 FD | 	jmp	#LR__0665
072e8                 | LR__0657
072e8     14 0E B0 FD | 	call	#_compile_fun_varp
072ec     FD 2C 02 F6 | 	mov	local08, result1
072f0     4C 00 90 FD | 	jmp	#LR__0665
072f4                 | LR__0658
072f4     9C 0A B0 FD | 	call	#_compile_fun_3p
072f8     FD 26 02 F6 | 	mov	local05, result1
072fc     40 00 90 FD | 	jmp	#LR__0665
07300                 | LR__0659
07300     94 30 B0 FD | 	call	#_expr
07304                 | ' expr()
07304                 | ' return 0
07304     00 26 06 F6 | 	mov	local05, #0
07308     34 00 90 FD | 	jmp	#LR__0665
0730c                 | LR__0660
0730c     10 0A B0 FD | 	call	#_compile_fun_2p
07310     FD 26 02 F6 | 	mov	local05, result1
07314     28 00 90 FD | 	jmp	#LR__0665
07318                 | LR__0661
07318     04 0A B0 FD | 	call	#_compile_fun_2p
0731c     FD 26 02 F6 | 	mov	local05, result1
07320     1C 00 90 FD | 	jmp	#LR__0665
07324                 | LR__0662
07324     F8 09 B0 FD | 	call	#_compile_fun_2p
07328     FD 26 02 F6 | 	mov	local05, result1
0732c     10 00 90 FD | 	jmp	#LR__0665
07330                 | LR__0663
07330     E4 01 B0 FD | 	call	#_compile_array_assign
07334     C4 00 90 FD | 	jmp	#LR__0666
07338                 | LR__0664
07338     28 09 B0 FD | 	call	#_compile_unknown
0733c     BC 00 90 FD | 	jmp	#LR__0666
07340                 | LR__0665
07340     14 23 02 F6 | 	mov	local03, local06
07344     16 1F 02 F6 | 	mov	local01, local08
07348     0F 2B 02 F6 | 	mov	local07, local01
0734c     10 2F 02 F6 | 	mov	local09, local02
07350     11 29 02 F6 | 	mov	local06, local03
07354     4A 00 00 FF 
07358     7C E4 05 F1 | 	add	objptr, ##38012
0735c     F2 1E 02 FB | 	rdlong	local01, objptr
07360     0F 2D 02 F6 | 	mov	local08, local01
07364     01 2C 66 F0 | 	shl	local08, #1
07368     0F 2D 02 F1 | 	add	local08, local01
0736c     02 2C 66 F0 | 	shl	local08, #2
07370     03 00 00 FF 
07374     00 E4 85 F1 | 	sub	objptr, ##1536
07378     F2 2C 02 F1 | 	add	local08, objptr
0737c     16 2B 62 FC | 	wrlong	local07, local08
07380     03 00 00 FF 
07384     00 E4 05 F1 | 	add	objptr, ##1536
07388     F2 1E 02 FB | 	rdlong	local01, objptr
0738c     0F 2D 02 F6 | 	mov	local08, local01
07390     01 2C 66 F0 | 	shl	local08, #1
07394     0F 2D 02 F1 | 	add	local08, local01
07398     02 2C 66 F0 | 	shl	local08, #2
0739c     03 00 00 FF 
073a0     00 E4 85 F1 | 	sub	objptr, ##1536
073a4     F2 2C 02 F1 | 	add	local08, objptr
073a8     04 2C 06 F1 | 	add	local08, #4
073ac     16 2F 62 FC | 	wrlong	local09, local08
073b0     03 00 00 FF 
073b4     00 E4 05 F1 | 	add	objptr, ##1536
073b8     F2 1E 02 FB | 	rdlong	local01, objptr
073bc     0F 2D 02 F6 | 	mov	local08, local01
073c0     01 2C 66 F0 | 	shl	local08, #1
073c4     0F 2D 02 F1 | 	add	local08, local01
073c8     02 2C 66 F0 | 	shl	local08, #2
073cc     03 00 00 FF 
073d0     00 E4 85 F1 | 	sub	objptr, ##1536
073d4     F2 2C 02 F1 | 	add	local08, objptr
073d8     08 2C 06 F1 | 	add	local08, #8
073dc     16 29 62 FC | 	wrlong	local06, local08
073e0     03 00 00 FF 
073e4     00 E4 05 F1 | 	add	objptr, ##1536
073e8     F2 2A 02 FB | 	rdlong	local07, objptr
073ec     01 2A 06 F1 | 	add	local07, #1
073f0     F2 2A 62 FC | 	wrlong	local07, objptr
073f4     4A 00 00 FF 
073f8     7C E4 85 F1 | 	sub	objptr, ##38012
073fc                 | LR__0666
073fc                 | ' 
073fc                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
073fc                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
073fc     03 24 0E F2 | 	cmp	local04, #3 wz
07400     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07404     38 00 90 5D |  if_ne	jmp	#LR__0667
07408     4A 00 00 FF 
0740c     7C E4 05 F1 | 	add	objptr, ##38012
07410     F2 2C 02 FB | 	rdlong	local08, objptr
07414     16 1F 02 F6 | 	mov	local01, local08
07418     01 1E 66 F0 | 	shl	local01, #1
0741c     16 1F 02 F1 | 	add	local01, local08
07420     02 1E 66 F0 | 	shl	local01, #2
07424     03 00 00 FF 
07428     00 E4 85 F1 | 	sub	objptr, ##1536
0742c     F2 1E 02 F1 | 	add	local01, objptr
07430     08 1E 06 F1 | 	add	local01, #8
07434     0F FD 6B FC | 	wrlong	#510, local01
07438     47 00 00 FF 
0743c     7C E4 85 F1 | 	sub	objptr, ##36476
07440                 | LR__0667
07440                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07440     4A 00 00 FF 
07444     7C E4 05 F1 | 	add	objptr, ##38012
07448     F2 1E 02 FB | 	rdlong	local01, objptr
0744c     4A 00 00 FF 
07450     7C E4 85 F1 | 	sub	objptr, ##38012
07454     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
07458                 | LR__0668
07458     0F 2D 02 F6 | 	mov	local08, local01
0745c     01 2C 66 F0 | 	shl	local08, #1
07460     0F 2D 02 F1 | 	add	local08, local01
07464     02 2C 66 F0 | 	shl	local08, #2
07468     47 00 00 FF 
0746c     7C E4 05 F1 | 	add	objptr, ##36476
07470     F2 2C 02 F1 | 	add	local08, objptr
07474     08 2C 06 F1 | 	add	local08, #8
07478     16 2D 02 FB | 	rdlong	local08, local08
0747c     9B 2C 0E F2 | 	cmp	local08, #155 wz
07480     47 00 00 FF 
07484     7C E4 85 F1 | 	sub	objptr, ##36476
07488     70 00 90 5D |  if_ne	jmp	#LR__0669
0748c     0F 2D 02 F6 | 	mov	local08, local01
07490     01 2C 86 F1 | 	sub	local08, #1
07494     16 2F 02 F6 | 	mov	local09, local08
07498     01 2E 66 F0 | 	shl	local09, #1
0749c     16 2F 02 F1 | 	add	local09, local08
074a0     02 2E 66 F0 | 	shl	local09, #2
074a4     47 00 00 FF 
074a8     7C E4 05 F1 | 	add	objptr, ##36476
074ac     F2 2E 02 F1 | 	add	local09, objptr
074b0     08 2E 06 F1 | 	add	local09, #8
074b4     17 2D 02 FB | 	rdlong	local08, local09
074b8     11 2C 0E F2 | 	cmp	local08, #17 wz
074bc     47 00 00 FF 
074c0     7C E4 85 F1 | 	sub	objptr, ##36476
074c4     34 00 90 5D |  if_ne	jmp	#LR__0669
074c8     0F 2F 02 F6 | 	mov	local09, local01
074cc     01 2E 86 F1 | 	sub	local09, #1
074d0     17 2D 02 F6 | 	mov	local08, local09
074d4     01 2C 66 F0 | 	shl	local08, #1
074d8     17 2D 02 F1 | 	add	local08, local09
074dc     02 2C 66 F0 | 	shl	local08, #2
074e0     47 00 00 FF 
074e4     7C E4 05 F1 | 	add	objptr, ##36476
074e8     F2 2C 02 F1 | 	add	local08, objptr
074ec     08 2C 06 F1 | 	add	local08, #8
074f0     16 25 68 FC | 	wrlong	#18, local08
074f4     47 00 00 FF 
074f8     7C E4 85 F1 | 	sub	objptr, ##36476
074fc                 | LR__0669
074fc     01 1E 86 F1 | 	sub	local01, #1
07500     01 1E 56 F2 | 	cmps	local01, #1 wc
07504     50 FF 9F 3D |  if_ae	jmp	#LR__0668
07508                 | LR__0670
07508                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07508                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print ucompiledline(i): next i
07508                 | ' return err
07508     13 FB 01 F6 | 	mov	result1, local05
0750c     A7 F0 03 F6 | 	mov	ptra, fp
07510     B2 00 A0 FD | 	call	#popregs_
07514                 | _compile_immediate_ret
07514     2D 00 64 FD | 	ret
07518                 | 
07518                 | ' 
07518                 | ' sub compile_array_assign
07518                 | _compile_array_assign
07518     0A 4A 05 F6 | 	mov	COUNT_, #10
0751c     A8 00 A0 FD | 	call	#pushregs_
07520     00 24 06 F6 | 	mov	local04, #0
07524     37 00 00 FF 
07528     44 E4 05 F1 | 	add	objptr, ##28228
0752c     F2 26 02 FB | 	rdlong	local05, objptr
07530     13 FB 01 F6 | 	mov	result1, local05
07534     01 FA 85 F1 | 	sub	result1, #1
07538     03 FA 65 F0 | 	shl	result1, #3
0753c     02 00 00 FF 
07540     38 E4 85 F1 | 	sub	objptr, ##1080
07544     F2 FA 01 F1 | 	add	result1, objptr
07548     FD 28 02 FB | 	rdlong	local06, result1
0754c                 | ' numpar=0
0754c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0754c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0754c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0754c                 | ' if lparts(ct).token=token_lpar then
0754c     03 26 66 F0 | 	shl	local05, #3
07550     F2 26 02 F1 | 	add	local05, objptr
07554     04 26 06 F1 | 	add	local05, #4
07558     13 27 02 FB | 	rdlong	local05, local05
0755c     15 26 0E F2 | 	cmp	local05, #21 wz
07560     35 00 00 FF 
07564     0C E4 85 F1 | 	sub	objptr, ##27148
07568     D4 01 90 5D |  if_ne	jmp	#LR__0684
0756c     37 00 00 FF 
07570     44 E4 05 F1 | 	add	objptr, ##28228
07574     F2 2A 02 FB | 	rdlong	local07, objptr
07578     01 2A 06 F1 | 	add	local07, #1
0757c     F2 2A 62 FC | 	wrlong	local07, objptr
07580     37 00 00 FF 
07584     44 E4 85 F1 | 	sub	objptr, ##28228
07588                 | '   ct+=1 											' omit this lpar, this is for expr list
07588                 | '   do
07588                 | LR__0680
07588     0C 2E B0 FD | 	call	#_expr
0758c     37 00 00 FF 
07590     44 E4 05 F1 | 	add	objptr, ##28228
07594     F2 26 02 FB | 	rdlong	local05, objptr
07598     01 26 06 F1 | 	add	local05, #1
0759c     F2 26 62 FC | 	wrlong	local05, objptr
075a0     01 24 06 F1 | 	add	local04, #1
075a4     01 26 86 F1 | 	sub	local05, #1
075a8     03 26 66 F0 | 	shl	local05, #3
075ac     02 00 00 FF 
075b0     38 E4 85 F1 | 	sub	objptr, ##1080
075b4     F2 26 02 F1 | 	add	local05, objptr
075b8     04 26 06 F1 | 	add	local05, #4
075bc     13 2B 02 FB | 	rdlong	local07, local05
075c0     14 2A 0E F2 | 	cmp	local07, #20 wz
075c4     35 00 00 FF 
075c8     0C E4 85 F1 | 	sub	objptr, ##27148
075cc     34 00 90 AD |  if_e	jmp	#LR__0681
075d0     37 00 00 FF 
075d4     44 E4 05 F1 | 	add	objptr, ##28228
075d8     F2 2A 02 FB | 	rdlong	local07, objptr
075dc     03 2A 66 F0 | 	shl	local07, #3
075e0     02 00 00 FF 
075e4     38 E4 85 F1 | 	sub	objptr, ##1080
075e8     F2 2A 02 F1 | 	add	local07, objptr
075ec     04 2A 06 F1 | 	add	local07, #4
075f0     15 2B 02 FB | 	rdlong	local07, local07
075f4     FE 2B 0E F2 | 	cmp	local07, #510 wz
075f8     35 00 00 FF 
075fc     0C E4 85 F1 | 	sub	objptr, ##27148
07600     84 FF 9F 5D |  if_ne	jmp	#LR__0680
07604                 | LR__0681
07604     37 00 00 FF 
07608     44 E4 05 F1 | 	add	objptr, ##28228
0760c     F2 2A 02 FB | 	rdlong	local07, objptr
07610     01 2A 06 F1 | 	add	local07, #1
07614     F2 2A 62 FC | 	wrlong	local07, objptr
07618     37 00 00 FF 
0761c     44 E4 85 F1 | 	sub	objptr, ##28228
07620     74 2D B0 FD | 	call	#_expr
07624     01 2C 66 F6 | 	neg	local08, #1
07628     00 2E 06 F6 | 	mov	local09, #0
0762c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0762c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0762c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0762c                 | ' ct+=1 : expr()
0762c                 | ' ' now find the vae
0762c                 | ' 
0762c                 | ' j=-1 : i=0 : do : 
0762c                 | LR__0682
0762c                 | '   if variables(i).name=varname$ then j=i: exit loop
0762c     17 27 02 F6 | 	mov	local05, local09
07630     04 26 66 F0 | 	shl	local05, #4
07634     14 00 00 FF 
07638     F8 E5 05 F1 | 	add	objptr, ##10744
0763c     F2 26 02 F1 | 	add	local05, objptr
07640     13 13 02 FB | 	rdlong	arg01, local05
07644     14 15 02 F6 | 	mov	arg02, local06
07648     14 00 00 FF 
0764c     F8 E5 85 F1 | 	sub	objptr, ##10744
07650     70 94 B1 FD | 	call	#__system___string_cmp
07654     00 FA 0D F2 | 	cmp	result1, #0 wz
07658     17 2D 02 A6 |  if_e	mov	local08, local09
0765c     20 00 90 AD |  if_e	jmp	#LR__0683
07660     01 2E 06 F1 | 	add	local09, #1
07664     35 00 00 FF 
07668     08 E4 05 F1 | 	add	objptr, ##27144
0766c     F2 2A 02 FB | 	rdlong	local07, objptr
07670     35 00 00 FF 
07674     08 E4 85 F1 | 	sub	objptr, ##27144
07678     15 2F 5A F2 | 	cmps	local09, local07 wcz
0767c     AC FF 9F ED |  if_be	jmp	#LR__0682
07680                 | LR__0683
07680     16 1F 02 F6 | 	mov	local01, local08
07684     12 21 02 F6 | 	mov	local02, local04
07688     17 22 06 F6 | 	mov	local03, #23
0768c     0F 2B 02 F6 | 	mov	local07, local01
07690     10 31 02 F6 | 	mov	local10, local02
07694     11 2D 02 F6 | 	mov	local08, local03
07698     4A 00 00 FF 
0769c     7C E4 05 F1 | 	add	objptr, ##38012
076a0     F2 1E 02 FB | 	rdlong	local01, objptr
076a4     0F 2F 02 F6 | 	mov	local09, local01
076a8     01 2E 66 F0 | 	shl	local09, #1
076ac     0F 2F 02 F1 | 	add	local09, local01
076b0     02 2E 66 F0 | 	shl	local09, #2
076b4     03 00 00 FF 
076b8     00 E4 85 F1 | 	sub	objptr, ##1536
076bc     F2 2E 02 F1 | 	add	local09, objptr
076c0     17 2B 62 FC | 	wrlong	local07, local09
076c4     03 00 00 FF 
076c8     00 E4 05 F1 | 	add	objptr, ##1536
076cc     F2 1E 02 FB | 	rdlong	local01, objptr
076d0     0F 2F 02 F6 | 	mov	local09, local01
076d4     01 2E 66 F0 | 	shl	local09, #1
076d8     0F 2F 02 F1 | 	add	local09, local01
076dc     02 2E 66 F0 | 	shl	local09, #2
076e0     03 00 00 FF 
076e4     00 E4 85 F1 | 	sub	objptr, ##1536
076e8     F2 2E 02 F1 | 	add	local09, objptr
076ec     04 2E 06 F1 | 	add	local09, #4
076f0     17 31 62 FC | 	wrlong	local10, local09
076f4     03 00 00 FF 
076f8     00 E4 05 F1 | 	add	objptr, ##1536
076fc     F2 30 02 FB | 	rdlong	local10, objptr
07700     18 1F 02 F6 | 	mov	local01, local10
07704     01 1E 66 F0 | 	shl	local01, #1
07708     18 1F 02 F1 | 	add	local01, local10
0770c     02 1E 66 F0 | 	shl	local01, #2
07710     03 00 00 FF 
07714     00 E4 85 F1 | 	sub	objptr, ##1536
07718     F2 1E 02 F1 | 	add	local01, objptr
0771c     08 1E 06 F1 | 	add	local01, #8
07720     0F 2D 62 FC | 	wrlong	local08, local01
07724     03 00 00 FF 
07728     00 E4 05 F1 | 	add	objptr, ##1536
0772c     F2 2A 02 FB | 	rdlong	local07, objptr
07730     01 2A 06 F1 | 	add	local07, #1
07734     F2 2A 62 FC | 	wrlong	local07, objptr
07738     4A 00 00 FF 
0773c     7C E4 85 F1 | 	sub	objptr, ##38012
07740                 | LR__0684
07740     A7 F0 03 F6 | 	mov	ptra, fp
07744     B2 00 A0 FD | 	call	#popregs_
07748                 | _compile_array_assign_ret
07748     2D 00 64 FD | 	ret
0774c                 | 
0774c                 | ' 
0774c                 | ' 
0774c                 | ' sub compile_immediate_assign(linetype as ulong)
0774c                 | _compile_immediate_assign
0774c     09 4A 05 F6 | 	mov	COUNT_, #9
07750     A8 00 A0 FD | 	call	#pushregs_
07754     09 25 0A F6 | 	mov	local04, arg01 wz
07758     FF 22 06 F6 | 	mov	local03, #255
0775c     01 26 66 F6 | 	neg	local05, #1
07760                 | ' 
07760                 | ' t1.result_type=result_error : t1.result.uresult=0
07760                 | ' i=-1: j=-1
07760                 | ' 
07760                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
07760     2C 00 90 5D |  if_ne	jmp	#LR__0690
07764     35 00 00 FF 
07768     0C E4 05 F1 | 	add	objptr, ##27148
0776c     F2 28 02 FB | 	rdlong	local06, objptr
07770     02 00 00 FF 
07774     38 E4 05 F1 | 	add	objptr, ##1080
07778     F2 04 68 FC | 	wrlong	#2, objptr
0777c     13 00 00 FF 
07780     38 E4 05 F1 | 	add	objptr, ##9784
07784     F2 00 68 FC | 	wrlong	#0, objptr
07788     4A 00 00 FF 
0778c     7C E4 85 F1 | 	sub	objptr, ##38012
07790                 | LR__0690
07790                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07790     02 24 0E F2 | 	cmp	local04, #2 wz
07794     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07798     35 00 00 AF 
0779c     0C E4 05 A1 |  if_e	add	objptr, ##27148
077a0     F2 28 02 AB |  if_e	rdlong	local06, objptr
077a4     02 00 00 AF 
077a8     38 E4 05 A1 |  if_e	add	objptr, ##1080
077ac     F2 04 68 AC |  if_e	wrlong	#2, objptr
077b0     37 00 00 AF 
077b4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
077b8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
077b8     04 24 0E F2 | 	cmp	local04, #4 wz
077bc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
077c0     2C 00 90 5D |  if_ne	jmp	#LR__0691
077c4     35 00 00 FF 
077c8     14 E4 05 F1 | 	add	objptr, ##27156
077cc     F2 28 02 FB | 	rdlong	local06, objptr
077d0     02 00 00 FF 
077d4     30 E4 05 F1 | 	add	objptr, ##1072
077d8     F2 06 68 FC | 	wrlong	#3, objptr
077dc     13 00 00 FF 
077e0     38 E4 05 F1 | 	add	objptr, ##9784
077e4     F2 04 68 FC | 	wrlong	#2, objptr
077e8     4A 00 00 FF 
077ec     7C E4 85 F1 | 	sub	objptr, ##38012
077f0                 | LR__0691
077f0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
077f0     05 24 0E F2 | 	cmp	local04, #5 wz
077f4     3C 00 90 5D |  if_ne	jmp	#LR__0692
077f8     37 00 00 FF 
077fc     44 E4 05 F1 | 	add	objptr, ##28228
07800     F2 FA 01 FB | 	rdlong	result1, objptr
07804     FD 28 02 F6 | 	mov	local06, result1
07808     03 28 66 F0 | 	shl	local06, #3
0780c     02 00 00 FF 
07810     38 E4 85 F1 | 	sub	objptr, ##1080
07814     F2 28 02 F1 | 	add	local06, objptr
07818     14 29 02 FB | 	rdlong	local06, local06
0781c     02 FA 05 F1 | 	add	result1, #2
07820     02 00 00 FF 
07824     38 E4 05 F1 | 	add	objptr, ##1080
07828     F2 FA 61 FC | 	wrlong	result1, objptr
0782c     37 00 00 FF 
07830     44 E4 85 F1 | 	sub	objptr, ##28228
07834                 | LR__0692
07834     14 13 02 F6 | 	mov	arg01, local06
07838     01 14 06 F6 | 	mov	arg02, #1
0783c     60 B3 B1 FD | 	call	#__system__Right_S
07840     54 2B B0 FD | 	call	#_expr
07844                 | '  
07844                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
07844                 | ' 
07844                 | ' suffix2$=right$(varname2$,1)
07844                 | ' expr()
07844                 | ' 
07844                 | ' 
07844                 | ' if varnum>0 then
07844     35 00 00 FF 
07848     08 E4 05 F1 | 	add	objptr, ##27144
0784c     F2 2A 02 FB | 	rdlong	local07, objptr
07850     35 00 00 FF 
07854     08 E4 85 F1 | 	sub	objptr, ##27144
07858     01 2A 56 F2 | 	cmps	local07, #1 wc
0785c     58 00 90 CD |  if_b	jmp	#LR__0695
07860                 | '   for i=0 to varnum-1
07860     00 2C 06 F6 | 	mov	local08, #0
07864     35 00 00 FF 
07868     08 E4 05 F1 | 	add	objptr, ##27144
0786c     F2 2E 02 FB | 	rdlong	local09, objptr
07870     35 00 00 FF 
07874     08 E4 85 F1 | 	sub	objptr, ##27144
07878                 | LR__0693
07878     17 2D 52 F2 | 	cmps	local08, local09 wc
0787c     38 00 90 3D |  if_ae	jmp	#LR__0694
07880                 | '     if variables(i).name=varname2$ then j=i : exit
07880     16 2B 02 F6 | 	mov	local07, local08
07884     04 2A 66 F0 | 	shl	local07, #4
07888     14 00 00 FF 
0788c     F8 E5 05 F1 | 	add	objptr, ##10744
07890     F2 2A 02 F1 | 	add	local07, objptr
07894     15 13 02 FB | 	rdlong	arg01, local07
07898     14 15 02 F6 | 	mov	arg02, local06
0789c     14 00 00 FF 
078a0     F8 E5 85 F1 | 	sub	objptr, ##10744
078a4     1C 92 B1 FD | 	call	#__system___string_cmp
078a8     00 FA 0D F2 | 	cmp	result1, #0 wz
078ac     16 27 02 A6 |  if_e	mov	local05, local08
078b0     01 2C 06 51 |  if_ne	add	local08, #1
078b4     C0 FF 9F 5D |  if_ne	jmp	#LR__0693
078b8                 | LR__0694
078b8                 | LR__0695
078b8                 | ' if  j=-1 andalso varnum<maxvars then   
078b8     FF FF 7F FF 
078bc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
078c0     60 00 90 5D |  if_ne	jmp	#LR__0696
078c4     35 00 00 FF 
078c8     08 E4 05 F1 | 	add	objptr, ##27144
078cc     F2 2A 02 FB | 	rdlong	local07, objptr
078d0     35 00 00 FF 
078d4     08 E4 85 F1 | 	sub	objptr, ##27144
078d8     02 00 00 FF 
078dc     00 2A 56 F2 | 	cmps	local07, ##1024 wc
078e0     40 00 90 3D |  if_ae	jmp	#LR__0696
078e4     35 00 00 FF 
078e8     08 E4 05 F1 | 	add	objptr, ##27144
078ec     F2 2E 02 FB | 	rdlong	local09, objptr
078f0     04 2E 66 F0 | 	shl	local09, #4
078f4     20 00 00 FF 
078f8     10 E4 85 F1 | 	sub	objptr, ##16400
078fc     F2 2E 02 F1 | 	add	local09, objptr
07900     17 29 62 FC | 	wrlong	local06, local09
07904     20 00 00 FF 
07908     10 E4 05 F1 | 	add	objptr, ##16400
0790c     F2 2A 02 FB | 	rdlong	local07, objptr
07910     15 27 02 F6 | 	mov	local05, local07
07914     01 2A 06 F1 | 	add	local07, #1
07918     F2 2A 62 FC | 	wrlong	local07, objptr
0791c     35 00 00 FF 
07920     08 E4 85 F1 | 	sub	objptr, ##27144
07924                 | LR__0696
07924     13 1F 02 F6 | 	mov	local01, local05
07928     17 22 06 F6 | 	mov	local03, #23
0792c     0F 2B 02 F6 | 	mov	local07, local01
07930     10 2F 02 F6 | 	mov	local09, local02
07934     11 1F 02 F6 | 	mov	local01, local03
07938     4A 00 00 FF 
0793c     7C E4 05 F1 | 	add	objptr, ##38012
07940     F2 2C 02 FB | 	rdlong	local08, objptr
07944     16 29 02 F6 | 	mov	local06, local08
07948     01 28 66 F0 | 	shl	local06, #1
0794c     16 29 02 F1 | 	add	local06, local08
07950     02 28 66 F0 | 	shl	local06, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 28 02 F1 | 	add	local06, objptr
07960     14 2B 62 FC | 	wrlong	local07, local06
07964     03 00 00 FF 
07968     00 E4 05 F1 | 	add	objptr, ##1536
0796c     F2 2C 02 FB | 	rdlong	local08, objptr
07970     16 2B 02 F6 | 	mov	local07, local08
07974     01 2A 66 F0 | 	shl	local07, #1
07978     16 2B 02 F1 | 	add	local07, local08
0797c     02 2A 66 F0 | 	shl	local07, #2
07980     03 00 00 FF 
07984     00 E4 85 F1 | 	sub	objptr, ##1536
07988     F2 2A 02 F1 | 	add	local07, objptr
0798c     04 2A 06 F1 | 	add	local07, #4
07990     15 2F 62 FC | 	wrlong	local09, local07
07994     03 00 00 FF 
07998     00 E4 05 F1 | 	add	objptr, ##1536
0799c     F2 2E 02 FB | 	rdlong	local09, objptr
079a0     17 2D 02 F6 | 	mov	local08, local09
079a4     01 2C 66 F0 | 	shl	local08, #1
079a8     17 2D 02 F1 | 	add	local08, local09
079ac     02 2C 66 F0 | 	shl	local08, #2
079b0     03 00 00 FF 
079b4     00 E4 85 F1 | 	sub	objptr, ##1536
079b8     F2 2C 02 F1 | 	add	local08, objptr
079bc     08 2C 06 F1 | 	add	local08, #8
079c0     16 1F 62 FC | 	wrlong	local01, local08
079c4     03 00 00 FF 
079c8     00 E4 05 F1 | 	add	objptr, ##1536
079cc     F2 2A 02 FB | 	rdlong	local07, objptr
079d0     01 2A 06 F1 | 	add	local07, #1
079d4     F2 2A 62 FC | 	wrlong	local07, objptr
079d8     4A 00 00 FF 
079dc     7C E4 85 F1 | 	sub	objptr, ##38012
079e0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
079e0                 | ' 
079e0                 | ' 
079e0                 | ' 
079e0                 | ' 
079e0                 | ' 
079e0                 | ' 
079e0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
079e0                 | '  if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
079e0     03 24 0E F2 | 	cmp	local04, #3 wz
079e4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
079e8     38 00 90 5D |  if_ne	jmp	#LR__0697
079ec     4A 00 00 FF 
079f0     7C E4 05 F1 | 	add	objptr, ##38012
079f4     F2 1E 02 FB | 	rdlong	local01, objptr
079f8     0F 2F 02 F6 | 	mov	local09, local01
079fc     01 2E 66 F0 | 	shl	local09, #1
07a00     0F 2F 02 F1 | 	add	local09, local01
07a04     02 2E 66 F0 | 	shl	local09, #2
07a08     03 00 00 FF 
07a0c     00 E4 85 F1 | 	sub	objptr, ##1536
07a10     F2 2E 02 F1 | 	add	local09, objptr
07a14     08 2E 06 F1 | 	add	local09, #8
07a18     17 FD 6B FC | 	wrlong	#510, local09
07a1c     47 00 00 FF 
07a20     7C E4 85 F1 | 	sub	objptr, ##36476
07a24                 | LR__0697
07a24     A7 F0 03 F6 | 	mov	ptra, fp
07a28     B2 00 A0 FD | 	call	#popregs_
07a2c                 | _compile_immediate_assign_ret
07a2c     2D 00 64 FD | 	ret
07a30                 | 
07a30                 | ' 
07a30                 | ' ' ------------------ compile the line that is calling a command 
07a30                 | ' 
07a30                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
07a30                 | _compile
07a30     03 4A 05 F6 | 	mov	COUNT_, #3
07a34     A8 00 A0 FD | 	call	#pushregs_
07a38     09 1F 02 F6 | 	mov	local01, arg01
07a3c     0B 21 02 F6 | 	mov	local02, arg03
07a40     47 00 00 FF 
07a44     7C E4 05 F1 | 	add	objptr, ##36476
07a48     F2 1E 62 FC | 	wrlong	local01, objptr
07a4c     04 E4 05 F1 | 	add	objptr, #4
07a50     F2 14 62 FC | 	wrlong	arg02, objptr
07a54     47 00 00 FF 
07a58     80 E4 85 F1 | 	sub	objptr, ##36480
07a5c     10 13 02 F6 | 	mov	arg01, local02
07a60     01 12 06 F1 | 	add	arg01, #1
07a64     20 F2 BF FD | 	call	#_compile_immediate
07a68     FD 22 0A F6 | 	mov	local03, result1 wz
07a6c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07a6c                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
07a6c                 | '  
07a6c                 | ' ' print "called compile with line= "; alinemajor;" and cont= "; cont 
07a6c                 | ' 'if alinemajor=0 then err=compile_immediate(0) : return err  
07a6c                 | ' 
07a6c                 | ' ucompiledline(0)=alinemajor
07a6c                 | ' ucompiledline(1)=alineminor
07a6c                 | ' 
07a6c                 | ' 
07a6c                 | ' ' cont: 0: this is the first part of the line that will continue
07a6c                 | ' ' 1 - this is the continuation of the line
07a6c                 | ' ' 2 - this is the last continued line
07a6c                 | ' ' 3 - this is the ome and only part
07a6c                 | ' 
07a6c                 | ' err=compile_immediate(cont+1) 
07a6c                 | ' if err=0 andalso alinemajor>0 then
07a6c     74 00 90 5D |  if_ne	jmp	#LR__0705
07a70     01 1E 16 F2 | 	cmp	local01, #1 wc
07a74     6C 00 90 CD |  if_b	jmp	#LR__0705
07a78                 | '   if cont=3 orelse cont=2 then 
07a78     03 20 0E F2 | 	cmp	local02, #3 wz
07a7c     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07a80     60 00 90 5D |  if_ne	jmp	#LR__0704
07a84                 | '     if alinemajor >lastline then 
07a84     4A 00 00 FF 
07a88     88 E4 05 F1 | 	add	objptr, ##38024
07a8c     F2 14 02 FB | 	rdlong	arg02, objptr
07a90     4A 00 00 FF 
07a94     88 E4 85 F1 | 	sub	objptr, ##38024
07a98     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a9c     0C 00 90 ED |  if_be	jmp	#LR__0700
07aa0     0F 13 02 F6 | 	mov	arg01, local01
07aa4     18 F1 BF FD | 	call	#_add_line_at_end
07aa8     38 00 90 FD | 	jmp	#LR__0703
07aac                 | LR__0700
07aac     0F 13 02 F6 | 	mov	arg01, local01
07ab0     38 EA BF FD | 	call	#_deleteline
07ab4                 | '       deleteline(alinemajor)  
07ab4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07ab4     4A 00 00 FF 
07ab8     88 E4 05 F1 | 	add	objptr, ##38024
07abc     F2 14 02 FB | 	rdlong	arg02, objptr
07ac0     4A 00 00 FF 
07ac4     88 E4 85 F1 | 	sub	objptr, ##38024
07ac8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07acc     0C 00 90 ED |  if_be	jmp	#LR__0701
07ad0     0F 13 02 F6 | 	mov	arg01, local01
07ad4     E8 F0 BF FD | 	call	#_add_line_at_end
07ad8     08 00 90 FD | 	jmp	#LR__0702
07adc                 | LR__0701
07adc     0F 13 02 F6 | 	mov	arg01, local01
07ae0     C0 EE BF FD | 	call	#_insertline
07ae4                 | LR__0702
07ae4                 | LR__0703
07ae4                 | LR__0704
07ae4                 | LR__0705
07ae4                 | ' return err
07ae4     11 FB 01 F6 | 	mov	result1, local03
07ae8     A7 F0 03 F6 | 	mov	ptra, fp
07aec     B2 00 A0 FD | 	call	#popregs_
07af0                 | _compile_ret
07af0     2D 00 64 FD | 	ret
07af4                 | 
07af4                 | ' 
07af4                 | ' ' ------------------ compile the line that is assigning to a variable
07af4                 | ' 
07af4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
07af4                 | _compile_assign
07af4     02 4A 05 F6 | 	mov	COUNT_, #2
07af8     A8 00 A0 FD | 	call	#pushregs_
07afc     09 1F 02 F6 | 	mov	local01, arg01
07b00     0B 21 02 F6 | 	mov	local02, arg03
07b04     47 00 00 FF 
07b08     7C E4 05 F1 | 	add	objptr, ##36476
07b0c     F2 1E 62 FC | 	wrlong	local01, objptr
07b10     04 E4 05 F1 | 	add	objptr, #4
07b14     F2 14 62 FC | 	wrlong	arg02, objptr
07b18     47 00 00 FF 
07b1c     80 E4 85 F1 | 	sub	objptr, ##36480
07b20     10 13 02 F6 | 	mov	arg01, local02
07b24     01 12 06 F1 | 	add	arg01, #1
07b28     20 FC BF FD | 	call	#_compile_immediate_assign
07b2c                 | ' 
07b2c                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
07b2c                 | ' 'if alinemajor=0 then compile_immediate_assign(0) : return  
07b2c                 | ' 
07b2c                 | ' ucompiledline(0)=alinemajor
07b2c                 | ' ucompiledline(1)=alineminor
07b2c                 | ' 
07b2c                 | ' compile_immediate_assign(cont+1) 
07b2c                 | ' 
07b2c                 | ' if alinemajor>0 then
07b2c     01 1E 16 F2 | 	cmp	local01, #1 wc
07b30     6C 00 90 CD |  if_b	jmp	#LR__0715
07b34                 | '   if cont=3 orelse cont=2 then 
07b34     03 20 0E F2 | 	cmp	local02, #3 wz
07b38     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07b3c     60 00 90 5D |  if_ne	jmp	#LR__0714
07b40                 | '     if alinemajor >lastline then 
07b40     4A 00 00 FF 
07b44     88 E4 05 F1 | 	add	objptr, ##38024
07b48     F2 14 02 FB | 	rdlong	arg02, objptr
07b4c     4A 00 00 FF 
07b50     88 E4 85 F1 | 	sub	objptr, ##38024
07b54     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b58     0C 00 90 ED |  if_be	jmp	#LR__0710
07b5c     0F 13 02 F6 | 	mov	arg01, local01
07b60     5C F0 BF FD | 	call	#_add_line_at_end
07b64     38 00 90 FD | 	jmp	#LR__0713
07b68                 | LR__0710
07b68     0F 13 02 F6 | 	mov	arg01, local01
07b6c     7C E9 BF FD | 	call	#_deleteline
07b70                 | '       deleteline(alinemajor)  
07b70                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07b70     4A 00 00 FF 
07b74     88 E4 05 F1 | 	add	objptr, ##38024
07b78     F2 14 02 FB | 	rdlong	arg02, objptr
07b7c     4A 00 00 FF 
07b80     88 E4 85 F1 | 	sub	objptr, ##38024
07b84     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b88     0C 00 90 ED |  if_be	jmp	#LR__0711
07b8c     0F 13 02 F6 | 	mov	arg01, local01
07b90     2C F0 BF FD | 	call	#_add_line_at_end
07b94     08 00 90 FD | 	jmp	#LR__0712
07b98                 | LR__0711
07b98     0F 13 02 F6 | 	mov	arg01, local01
07b9c     04 EE BF FD | 	call	#_insertline
07ba0                 | LR__0712
07ba0                 | LR__0713
07ba0                 | LR__0714
07ba0                 | LR__0715
07ba0     A7 F0 03 F6 | 	mov	ptra, fp
07ba4     B2 00 A0 FD | 	call	#popregs_
07ba8                 | _compile_assign_ret
07ba8     2D 00 64 FD | 	ret
07bac                 | 
07bac                 | ' 
07bac                 | ' sub compile_error(errno)
07bac                 | _compile_error
07bac     FF 04 06 F6 | 	mov	_var03, #255
07bb0     01 07 02 F6 | 	mov	_var04, _var02
07bb4     02 09 02 F6 | 	mov	_var05, _var03
07bb8     4A 00 00 FF 
07bbc     7C E4 05 F1 | 	add	objptr, ##38012
07bc0     F2 0A 02 FB | 	rdlong	_var06, objptr
07bc4     05 0D 02 F6 | 	mov	_var07, _var06
07bc8     01 0C 66 F0 | 	shl	_var07, #1
07bcc     05 0D 02 F1 | 	add	_var07, _var06
07bd0     02 0C 66 F0 | 	shl	_var07, #2
07bd4     03 00 00 FF 
07bd8     00 E4 85 F1 | 	sub	objptr, ##1536
07bdc     F2 0C 02 F1 | 	add	_var07, objptr
07be0     06 13 62 FC | 	wrlong	arg01, _var07
07be4     03 00 00 FF 
07be8     00 E4 05 F1 | 	add	objptr, ##1536
07bec     F2 0C 02 FB | 	rdlong	_var07, objptr
07bf0     06 0B 02 F6 | 	mov	_var06, _var07
07bf4     01 0A 66 F0 | 	shl	_var06, #1
07bf8     06 0B 02 F1 | 	add	_var06, _var07
07bfc     02 0A 66 F0 | 	shl	_var06, #2
07c00     03 00 00 FF 
07c04     00 E4 85 F1 | 	sub	objptr, ##1536
07c08     F2 0A 02 F1 | 	add	_var06, objptr
07c0c     04 0A 06 F1 | 	add	_var06, #4
07c10     05 07 62 FC | 	wrlong	_var04, _var06
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 0C 02 FB | 	rdlong	_var07, objptr
07c20     06 0B 02 F6 | 	mov	_var06, _var07
07c24     01 0A 66 F0 | 	shl	_var06, #1
07c28     06 0B 02 F1 | 	add	_var06, _var07
07c2c     02 0A 66 F0 | 	shl	_var06, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 0A 02 F1 | 	add	_var06, objptr
07c3c     08 0A 06 F1 | 	add	_var06, #8
07c40     05 09 62 FC | 	wrlong	_var05, _var06
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 12 02 FB | 	rdlong	arg01, objptr
07c50     01 12 06 F1 | 	add	arg01, #1
07c54     F2 12 62 FC | 	wrlong	arg01, objptr
07c58     4A 00 00 FF 
07c5c     7C E4 85 F1 | 	sub	objptr, ##38012
07c60                 | _compile_error_ret
07c60     2D 00 64 FD | 	ret
07c64                 | 
07c64                 | ' 
07c64                 | ' sub compile_unknown() 
07c64                 | _compile_unknown
07c64     FF 04 06 F6 | 	mov	_var03, #255
07c68     17 00 06 F6 | 	mov	_var01, #23
07c6c     01 07 02 F6 | 	mov	_var04, _var02
07c70     02 01 02 F6 | 	mov	_var01, _var03
07c74     4A 00 00 FF 
07c78     7C E4 05 F1 | 	add	objptr, ##38012
07c7c     F2 08 02 FB | 	rdlong	_var05, objptr
07c80     04 0B 02 F6 | 	mov	_var06, _var05
07c84     01 0A 66 F0 | 	shl	_var06, #1
07c88     04 0B 02 F1 | 	add	_var06, _var05
07c8c     02 0A 66 F0 | 	shl	_var06, #2
07c90     03 00 00 FF 
07c94     00 E4 85 F1 | 	sub	objptr, ##1536
07c98     F2 0A 02 F1 | 	add	_var06, objptr
07c9c     05 2F 68 FC | 	wrlong	#23, _var06
07ca0     03 00 00 FF 
07ca4     00 E4 05 F1 | 	add	objptr, ##1536
07ca8     F2 0A 02 FB | 	rdlong	_var06, objptr
07cac     05 09 02 F6 | 	mov	_var05, _var06
07cb0     01 08 66 F0 | 	shl	_var05, #1
07cb4     05 09 02 F1 | 	add	_var05, _var06
07cb8     02 08 66 F0 | 	shl	_var05, #2
07cbc     03 00 00 FF 
07cc0     00 E4 85 F1 | 	sub	objptr, ##1536
07cc4     F2 08 02 F1 | 	add	_var05, objptr
07cc8     04 08 06 F1 | 	add	_var05, #4
07ccc     04 07 62 FC | 	wrlong	_var04, _var05
07cd0     03 00 00 FF 
07cd4     00 E4 05 F1 | 	add	objptr, ##1536
07cd8     F2 0A 02 FB | 	rdlong	_var06, objptr
07cdc     05 09 02 F6 | 	mov	_var05, _var06
07ce0     01 08 66 F0 | 	shl	_var05, #1
07ce4     05 09 02 F1 | 	add	_var05, _var06
07ce8     02 08 66 F0 | 	shl	_var05, #2
07cec     03 00 00 FF 
07cf0     00 E4 85 F1 | 	sub	objptr, ##1536
07cf4     F2 08 02 F1 | 	add	_var05, objptr
07cf8     08 08 06 F1 | 	add	_var05, #8
07cfc     04 01 62 FC | 	wrlong	_var01, _var05
07d00     03 00 00 FF 
07d04     00 E4 05 F1 | 	add	objptr, ##1536
07d08     F2 0A 02 FB | 	rdlong	_var06, objptr
07d0c     01 0A 06 F1 | 	add	_var06, #1
07d10     F2 0A 62 FC | 	wrlong	_var06, objptr
07d14     4A 00 00 FF 
07d18     7C E4 85 F1 | 	sub	objptr, ##38012
07d1c                 | _compile_unknown_ret
07d1c     2D 00 64 FD | 	ret
07d20                 | 
07d20                 | ' 
07d20                 | ' function compile_fun_2p() as ulong
07d20                 | _compile_fun_2p
07d20     01 4A 05 F6 | 	mov	COUNT_, #1
07d24     A8 00 A0 FD | 	call	#pushregs_
07d28     6C 26 B0 FD | 	call	#_expr
07d2c                 | ' 
07d2c                 | ' expr()
07d2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d2c     37 00 00 FF 
07d30     44 E4 05 F1 | 	add	objptr, ##28228
07d34     F2 1E 02 FB | 	rdlong	local01, objptr
07d38     03 1E 66 F0 | 	shl	local01, #3
07d3c     02 00 00 FF 
07d40     38 E4 85 F1 | 	sub	objptr, ##1080
07d44     F2 1E 02 F1 | 	add	local01, objptr
07d48     04 1E 06 F1 | 	add	local01, #4
07d4c     0F 1F 02 FB | 	rdlong	local01, local01
07d50     11 1E 0E F2 | 	cmp	local01, #17 wz
07d54     35 00 00 FF 
07d58     0C E4 85 F1 | 	sub	objptr, ##27148
07d5c     15 FA 05 56 |  if_ne	mov	result1, #21
07d60     24 00 90 5D |  if_ne	jmp	#LR__0720
07d64     37 00 00 FF 
07d68     44 E4 05 F1 | 	add	objptr, ##28228
07d6c     F2 1E 02 FB | 	rdlong	local01, objptr
07d70     01 1E 06 F1 | 	add	local01, #1
07d74     F2 1E 62 FC | 	wrlong	local01, objptr
07d78     37 00 00 FF 
07d7c     44 E4 85 F1 | 	sub	objptr, ##28228
07d80     14 26 B0 FD | 	call	#_expr
07d84     00 FA 05 F6 | 	mov	result1, #0
07d88                 | LR__0720
07d88     A7 F0 03 F6 | 	mov	ptra, fp
07d8c     B2 00 A0 FD | 	call	#popregs_
07d90                 | _compile_fun_2p_ret
07d90     2D 00 64 FD | 	ret
07d94                 | 
07d94                 | ' 
07d94                 | ' function compile_fun_3p() as ulong
07d94                 | _compile_fun_3p
07d94     01 4A 05 F6 | 	mov	COUNT_, #1
07d98     A8 00 A0 FD | 	call	#pushregs_
07d9c     F8 25 B0 FD | 	call	#_expr
07da0                 | ' 
07da0                 | ' expr()
07da0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07da0     37 00 00 FF 
07da4     44 E4 05 F1 | 	add	objptr, ##28228
07da8     F2 1E 02 FB | 	rdlong	local01, objptr
07dac     03 1E 66 F0 | 	shl	local01, #3
07db0     02 00 00 FF 
07db4     38 E4 85 F1 | 	sub	objptr, ##1080
07db8     F2 1E 02 F1 | 	add	local01, objptr
07dbc     04 1E 06 F1 | 	add	local01, #4
07dc0     0F 1F 02 FB | 	rdlong	local01, local01
07dc4     11 1E 0E F2 | 	cmp	local01, #17 wz
07dc8     35 00 00 FF 
07dcc     0C E4 85 F1 | 	sub	objptr, ##27148
07dd0     15 FA 05 56 |  if_ne	mov	result1, #21
07dd4     7C 00 90 5D |  if_ne	jmp	#LR__0730
07dd8     37 00 00 FF 
07ddc     44 E4 05 F1 | 	add	objptr, ##28228
07de0     F2 1E 02 FB | 	rdlong	local01, objptr
07de4     01 1E 06 F1 | 	add	local01, #1
07de8     F2 1E 62 FC | 	wrlong	local01, objptr
07dec     37 00 00 FF 
07df0     44 E4 85 F1 | 	sub	objptr, ##28228
07df4     A0 25 B0 FD | 	call	#_expr
07df8                 | ' expr()
07df8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07df8     37 00 00 FF 
07dfc     44 E4 05 F1 | 	add	objptr, ##28228
07e00     F2 1E 02 FB | 	rdlong	local01, objptr
07e04     03 1E 66 F0 | 	shl	local01, #3
07e08     02 00 00 FF 
07e0c     38 E4 85 F1 | 	sub	objptr, ##1080
07e10     F2 1E 02 F1 | 	add	local01, objptr
07e14     04 1E 06 F1 | 	add	local01, #4
07e18     0F 1F 02 FB | 	rdlong	local01, local01
07e1c     11 1E 0E F2 | 	cmp	local01, #17 wz
07e20     35 00 00 FF 
07e24     0C E4 85 F1 | 	sub	objptr, ##27148
07e28     15 FA 05 56 |  if_ne	mov	result1, #21
07e2c     24 00 90 5D |  if_ne	jmp	#LR__0730
07e30     37 00 00 FF 
07e34     44 E4 05 F1 | 	add	objptr, ##28228
07e38     F2 1E 02 FB | 	rdlong	local01, objptr
07e3c     01 1E 06 F1 | 	add	local01, #1
07e40     F2 1E 62 FC | 	wrlong	local01, objptr
07e44     37 00 00 FF 
07e48     44 E4 85 F1 | 	sub	objptr, ##28228
07e4c     48 25 B0 FD | 	call	#_expr
07e50     00 FA 05 F6 | 	mov	result1, #0
07e54                 | LR__0730
07e54     A7 F0 03 F6 | 	mov	ptra, fp
07e58     B2 00 A0 FD | 	call	#popregs_
07e5c                 | _compile_fun_3p_ret
07e5c     2D 00 64 FD | 	ret
07e60                 | 
07e60                 | ' 
07e60                 | ' function compile_fun_4p() as ulong
07e60                 | _compile_fun_4p
07e60     01 4A 05 F6 | 	mov	COUNT_, #1
07e64     A8 00 A0 FD | 	call	#pushregs_
07e68     2C 25 B0 FD | 	call	#_expr
07e6c                 | ' 
07e6c                 | ' expr()
07e6c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e6c     37 00 00 FF 
07e70     44 E4 05 F1 | 	add	objptr, ##28228
07e74     F2 1E 02 FB | 	rdlong	local01, objptr
07e78     03 1E 66 F0 | 	shl	local01, #3
07e7c     02 00 00 FF 
07e80     38 E4 85 F1 | 	sub	objptr, ##1080
07e84     F2 1E 02 F1 | 	add	local01, objptr
07e88     04 1E 06 F1 | 	add	local01, #4
07e8c     0F 1F 02 FB | 	rdlong	local01, local01
07e90     11 1E 0E F2 | 	cmp	local01, #17 wz
07e94     35 00 00 FF 
07e98     0C E4 85 F1 | 	sub	objptr, ##27148
07e9c     15 FA 05 56 |  if_ne	mov	result1, #21
07ea0     D4 00 90 5D |  if_ne	jmp	#LR__0740
07ea4     37 00 00 FF 
07ea8     44 E4 05 F1 | 	add	objptr, ##28228
07eac     F2 1E 02 FB | 	rdlong	local01, objptr
07eb0     01 1E 06 F1 | 	add	local01, #1
07eb4     F2 1E 62 FC | 	wrlong	local01, objptr
07eb8     37 00 00 FF 
07ebc     44 E4 85 F1 | 	sub	objptr, ##28228
07ec0     D4 24 B0 FD | 	call	#_expr
07ec4                 | ' expr()
07ec4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07ec4     37 00 00 FF 
07ec8     44 E4 05 F1 | 	add	objptr, ##28228
07ecc     F2 1E 02 FB | 	rdlong	local01, objptr
07ed0     03 1E 66 F0 | 	shl	local01, #3
07ed4     02 00 00 FF 
07ed8     38 E4 85 F1 | 	sub	objptr, ##1080
07edc     F2 1E 02 F1 | 	add	local01, objptr
07ee0     04 1E 06 F1 | 	add	local01, #4
07ee4     0F 1F 02 FB | 	rdlong	local01, local01
07ee8     11 1E 0E F2 | 	cmp	local01, #17 wz
07eec     35 00 00 FF 
07ef0     0C E4 85 F1 | 	sub	objptr, ##27148
07ef4     15 FA 05 56 |  if_ne	mov	result1, #21
07ef8     7C 00 90 5D |  if_ne	jmp	#LR__0740
07efc     37 00 00 FF 
07f00     44 E4 05 F1 | 	add	objptr, ##28228
07f04     F2 1E 02 FB | 	rdlong	local01, objptr
07f08     01 1E 06 F1 | 	add	local01, #1
07f0c     F2 1E 62 FC | 	wrlong	local01, objptr
07f10     37 00 00 FF 
07f14     44 E4 85 F1 | 	sub	objptr, ##28228
07f18     7C 24 B0 FD | 	call	#_expr
07f1c                 | ' expr()
07f1c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f1c     37 00 00 FF 
07f20     44 E4 05 F1 | 	add	objptr, ##28228
07f24     F2 1E 02 FB | 	rdlong	local01, objptr
07f28     03 1E 66 F0 | 	shl	local01, #3
07f2c     02 00 00 FF 
07f30     38 E4 85 F1 | 	sub	objptr, ##1080
07f34     F2 1E 02 F1 | 	add	local01, objptr
07f38     04 1E 06 F1 | 	add	local01, #4
07f3c     0F 1F 02 FB | 	rdlong	local01, local01
07f40     11 1E 0E F2 | 	cmp	local01, #17 wz
07f44     35 00 00 FF 
07f48     0C E4 85 F1 | 	sub	objptr, ##27148
07f4c     15 FA 05 56 |  if_ne	mov	result1, #21
07f50     24 00 90 5D |  if_ne	jmp	#LR__0740
07f54     37 00 00 FF 
07f58     44 E4 05 F1 | 	add	objptr, ##28228
07f5c     F2 1E 02 FB | 	rdlong	local01, objptr
07f60     01 1E 06 F1 | 	add	local01, #1
07f64     F2 1E 62 FC | 	wrlong	local01, objptr
07f68     37 00 00 FF 
07f6c     44 E4 85 F1 | 	sub	objptr, ##28228
07f70     24 24 B0 FD | 	call	#_expr
07f74     00 FA 05 F6 | 	mov	result1, #0
07f78                 | LR__0740
07f78     A7 F0 03 F6 | 	mov	ptra, fp
07f7c     B2 00 A0 FD | 	call	#popregs_
07f80                 | _compile_fun_4p_ret
07f80     2D 00 64 FD | 	ret
07f84                 | 
07f84                 | ' 
07f84                 | ' 
07f84                 | ' function compile_fun_5p() as ulong
07f84                 | _compile_fun_5p
07f84     01 4A 05 F6 | 	mov	COUNT_, #1
07f88     A8 00 A0 FD | 	call	#pushregs_
07f8c     08 24 B0 FD | 	call	#_expr
07f90                 | ' 
07f90                 | ' expr()
07f90                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f90     37 00 00 FF 
07f94     44 E4 05 F1 | 	add	objptr, ##28228
07f98     F2 1E 02 FB | 	rdlong	local01, objptr
07f9c     03 1E 66 F0 | 	shl	local01, #3
07fa0     02 00 00 FF 
07fa4     38 E4 85 F1 | 	sub	objptr, ##1080
07fa8     F2 1E 02 F1 | 	add	local01, objptr
07fac     04 1E 06 F1 | 	add	local01, #4
07fb0     0F 1F 02 FB | 	rdlong	local01, local01
07fb4     11 1E 0E F2 | 	cmp	local01, #17 wz
07fb8     35 00 00 FF 
07fbc     0C E4 85 F1 | 	sub	objptr, ##27148
07fc0     15 FA 05 56 |  if_ne	mov	result1, #21
07fc4     2C 01 90 5D |  if_ne	jmp	#LR__0750
07fc8     37 00 00 FF 
07fcc     44 E4 05 F1 | 	add	objptr, ##28228
07fd0     F2 1E 02 FB | 	rdlong	local01, objptr
07fd4     01 1E 06 F1 | 	add	local01, #1
07fd8     F2 1E 62 FC | 	wrlong	local01, objptr
07fdc     37 00 00 FF 
07fe0     44 E4 85 F1 | 	sub	objptr, ##28228
07fe4     B0 23 B0 FD | 	call	#_expr
07fe8                 | ' expr()
07fe8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07fe8     37 00 00 FF 
07fec     44 E4 05 F1 | 	add	objptr, ##28228
07ff0     F2 1E 02 FB | 	rdlong	local01, objptr
07ff4     03 1E 66 F0 | 	shl	local01, #3
07ff8     02 00 00 FF 
07ffc     38 E4 85 F1 | 	sub	objptr, ##1080
08000     F2 1E 02 F1 | 	add	local01, objptr
08004     04 1E 06 F1 | 	add	local01, #4
08008     0F 1F 02 FB | 	rdlong	local01, local01
0800c     11 1E 0E F2 | 	cmp	local01, #17 wz
08010     35 00 00 FF 
08014     0C E4 85 F1 | 	sub	objptr, ##27148
08018     15 FA 05 56 |  if_ne	mov	result1, #21
0801c     D4 00 90 5D |  if_ne	jmp	#LR__0750
08020     37 00 00 FF 
08024     44 E4 05 F1 | 	add	objptr, ##28228
08028     F2 1E 02 FB | 	rdlong	local01, objptr
0802c     01 1E 06 F1 | 	add	local01, #1
08030     F2 1E 62 FC | 	wrlong	local01, objptr
08034     37 00 00 FF 
08038     44 E4 85 F1 | 	sub	objptr, ##28228
0803c     58 23 B0 FD | 	call	#_expr
08040                 | ' expr()
08040                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08040     37 00 00 FF 
08044     44 E4 05 F1 | 	add	objptr, ##28228
08048     F2 1E 02 FB | 	rdlong	local01, objptr
0804c     03 1E 66 F0 | 	shl	local01, #3
08050     02 00 00 FF 
08054     38 E4 85 F1 | 	sub	objptr, ##1080
08058     F2 1E 02 F1 | 	add	local01, objptr
0805c     04 1E 06 F1 | 	add	local01, #4
08060     0F 1F 02 FB | 	rdlong	local01, local01
08064     11 1E 0E F2 | 	cmp	local01, #17 wz
08068     35 00 00 FF 
0806c     0C E4 85 F1 | 	sub	objptr, ##27148
08070     15 FA 05 56 |  if_ne	mov	result1, #21
08074     7C 00 90 5D |  if_ne	jmp	#LR__0750
08078     37 00 00 FF 
0807c     44 E4 05 F1 | 	add	objptr, ##28228
08080     F2 1E 02 FB | 	rdlong	local01, objptr
08084     01 1E 06 F1 | 	add	local01, #1
08088     F2 1E 62 FC | 	wrlong	local01, objptr
0808c     37 00 00 FF 
08090     44 E4 85 F1 | 	sub	objptr, ##28228
08094     00 23 B0 FD | 	call	#_expr
08098                 | ' expr()
08098                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08098     37 00 00 FF 
0809c     44 E4 05 F1 | 	add	objptr, ##28228
080a0     F2 1E 02 FB | 	rdlong	local01, objptr
080a4     03 1E 66 F0 | 	shl	local01, #3
080a8     02 00 00 FF 
080ac     38 E4 85 F1 | 	sub	objptr, ##1080
080b0     F2 1E 02 F1 | 	add	local01, objptr
080b4     04 1E 06 F1 | 	add	local01, #4
080b8     0F 1F 02 FB | 	rdlong	local01, local01
080bc     11 1E 0E F2 | 	cmp	local01, #17 wz
080c0     35 00 00 FF 
080c4     0C E4 85 F1 | 	sub	objptr, ##27148
080c8     15 FA 05 56 |  if_ne	mov	result1, #21
080cc     24 00 90 5D |  if_ne	jmp	#LR__0750
080d0     37 00 00 FF 
080d4     44 E4 05 F1 | 	add	objptr, ##28228
080d8     F2 1E 02 FB | 	rdlong	local01, objptr
080dc     01 1E 06 F1 | 	add	local01, #1
080e0     F2 1E 62 FC | 	wrlong	local01, objptr
080e4     37 00 00 FF 
080e8     44 E4 85 F1 | 	sub	objptr, ##28228
080ec     A8 22 B0 FD | 	call	#_expr
080f0     00 FA 05 F6 | 	mov	result1, #0
080f4                 | LR__0750
080f4     A7 F0 03 F6 | 	mov	ptra, fp
080f8     B2 00 A0 FD | 	call	#popregs_
080fc                 | _compile_fun_5p_ret
080fc     2D 00 64 FD | 	ret
08100                 | 
08100                 | ' 
08100                 | ' function compile_fun_varp() as ulong 
08100                 | _compile_fun_varp
08100     02 4A 05 F6 | 	mov	COUNT_, #2
08104     A8 00 A0 FD | 	call	#pushregs_
08108     00 1E 06 F6 | 	mov	local01, #0
0810c                 | ' i=0
0810c                 | ' if lparts(ct).token<>token_end then
0810c     37 00 00 FF 
08110     44 E4 05 F1 | 	add	objptr, ##28228
08114     F2 20 02 FB | 	rdlong	local02, objptr
08118     03 20 66 F0 | 	shl	local02, #3
0811c     02 00 00 FF 
08120     38 E4 85 F1 | 	sub	objptr, ##1080
08124     F2 20 02 F1 | 	add	local02, objptr
08128     04 20 06 F1 | 	add	local02, #4
0812c     10 21 02 FB | 	rdlong	local02, local02
08130     FE 21 0E F2 | 	cmp	local02, #510 wz
08134     35 00 00 FF 
08138     0C E4 85 F1 | 	sub	objptr, ##27148
0813c     5C 00 90 AD |  if_e	jmp	#LR__0762
08140                 | '   do
08140                 | LR__0760
08140     54 22 B0 FD | 	call	#_expr
08144     01 1E 06 F1 | 	add	local01, #1
08148                 | '   expr()
08148                 | '    i+=1
08148                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
08148     37 00 00 FF 
0814c     44 E4 05 F1 | 	add	objptr, ##28228
08150     F2 20 02 FB | 	rdlong	local02, objptr
08154     03 20 66 F0 | 	shl	local02, #3
08158     02 00 00 FF 
0815c     38 E4 85 F1 | 	sub	objptr, ##1080
08160     F2 20 02 F1 | 	add	local02, objptr
08164     04 20 06 F1 | 	add	local02, #4
08168     10 21 02 FB | 	rdlong	local02, local02
0816c     11 20 0E F2 | 	cmp	local02, #17 wz
08170     35 00 00 FF 
08174     0C E4 85 F1 | 	sub	objptr, ##27148
08178     20 00 90 5D |  if_ne	jmp	#LR__0761
0817c     37 00 00 FF 
08180     44 E4 05 F1 | 	add	objptr, ##28228
08184     F2 20 02 FB | 	rdlong	local02, objptr
08188     01 20 06 F1 | 	add	local02, #1
0818c     F2 20 62 FC | 	wrlong	local02, objptr
08190     37 00 00 FF 
08194     44 E4 85 F1 | 	sub	objptr, ##28228
08198     A4 FF 9F FD | 	jmp	#LR__0760
0819c                 | LR__0761
0819c                 | LR__0762
0819c                 | ' return i
0819c     0F FB 01 F6 | 	mov	result1, local01
081a0     A7 F0 03 F6 | 	mov	ptra, fp
081a4     B2 00 A0 FD | 	call	#popregs_
081a8                 | _compile_fun_varp_ret
081a8     2D 00 64 FD | 	ret
081ac                 | 
081ac                 | ' 
081ac                 | ' 
081ac                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
081ac                 | _compile_print
081ac     0B 4A 05 F6 | 	mov	COUNT_, #11
081b0     A8 00 A0 FD | 	call	#pushregs_
081b4     00 1E 06 F6 | 	mov	local01, #0
081b8     1D 22 06 F6 | 	mov	local03, #29
081bc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
081bc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
081bc     37 00 00 FF 
081c0     44 E4 05 F1 | 	add	objptr, ##28228
081c4     F2 24 02 FB | 	rdlong	local04, objptr
081c8     03 24 66 F0 | 	shl	local04, #3
081cc     02 00 00 FF 
081d0     38 E4 85 F1 | 	sub	objptr, ##1080
081d4     F2 24 02 F1 | 	add	local04, objptr
081d8     04 24 06 F1 | 	add	local04, #4
081dc     12 25 02 FB | 	rdlong	local04, local04
081e0     FE 25 0E F2 | 	cmp	local04, #510 wz
081e4     35 00 00 FF 
081e8     0C E4 85 F1 | 	sub	objptr, ##27148
081ec     68 01 90 5D |  if_ne	jmp	#LR__0770
081f0     20 22 06 F6 | 	mov	local03, #32
081f4     0F 27 02 F6 | 	mov	local05, local01
081f8     10 29 02 F6 | 	mov	local06, local02
081fc     11 2B 02 F6 | 	mov	local07, local03
08200     4A 00 00 FF 
08204     7C E4 05 F1 | 	add	objptr, ##38012
08208     F2 2C 02 FB | 	rdlong	local08, objptr
0820c     16 2F 02 F6 | 	mov	local09, local08
08210     01 2E 66 F0 | 	shl	local09, #1
08214     16 2F 02 F1 | 	add	local09, local08
08218     02 2E 66 F0 | 	shl	local09, #2
0821c     03 00 00 FF 
08220     00 E4 85 F1 | 	sub	objptr, ##1536
08224     F2 2E 02 F1 | 	add	local09, objptr
08228     17 27 62 FC | 	wrlong	local05, local09
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 26 02 FB | 	rdlong	local05, objptr
08238     13 31 02 F6 | 	mov	local10, local05
0823c     01 30 66 F0 | 	shl	local10, #1
08240     13 31 02 F1 | 	add	local10, local05
08244     02 30 66 F0 | 	shl	local10, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 30 02 F1 | 	add	local10, objptr
08254     04 30 06 F1 | 	add	local10, #4
08258     18 29 62 FC | 	wrlong	local06, local10
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 26 02 FB | 	rdlong	local05, objptr
08268     13 33 02 F6 | 	mov	local11, local05
0826c     01 32 66 F0 | 	shl	local11, #1
08270     13 33 02 F1 | 	add	local11, local05
08274     02 32 66 F0 | 	shl	local11, #2
08278     03 00 00 FF 
0827c     00 E4 85 F1 | 	sub	objptr, ##1536
08280     F2 32 02 F1 | 	add	local11, objptr
08284     08 32 06 F1 | 	add	local11, #8
08288     19 2B 62 FC | 	wrlong	local07, local11
0828c     03 00 00 FF 
08290     00 E4 05 F1 | 	add	objptr, ##1536
08294     F2 26 02 FB | 	rdlong	local05, objptr
08298     01 26 06 F1 | 	add	local05, #1
0829c     F2 26 62 FC | 	wrlong	local05, objptr
082a0     44 22 06 F6 | 	mov	local03, #68
082a4     0F 27 02 F6 | 	mov	local05, local01
082a8     10 29 02 F6 | 	mov	local06, local02
082ac     11 2B 02 F6 | 	mov	local07, local03
082b0     F2 2C 02 FB | 	rdlong	local08, objptr
082b4     16 2F 02 F6 | 	mov	local09, local08
082b8     01 2E 66 F0 | 	shl	local09, #1
082bc     16 2F 02 F1 | 	add	local09, local08
082c0     02 2E 66 F0 | 	shl	local09, #2
082c4     03 00 00 FF 
082c8     00 E4 85 F1 | 	sub	objptr, ##1536
082cc     F2 2E 02 F1 | 	add	local09, objptr
082d0     17 27 62 FC | 	wrlong	local05, local09
082d4     03 00 00 FF 
082d8     00 E4 05 F1 | 	add	objptr, ##1536
082dc     F2 32 02 FB | 	rdlong	local11, objptr
082e0     19 31 02 F6 | 	mov	local10, local11
082e4     01 30 66 F0 | 	shl	local10, #1
082e8     19 31 02 F1 | 	add	local10, local11
082ec     02 30 66 F0 | 	shl	local10, #2
082f0     03 00 00 FF 
082f4     00 E4 85 F1 | 	sub	objptr, ##1536
082f8     F2 30 02 F1 | 	add	local10, objptr
082fc     04 30 06 F1 | 	add	local10, #4
08300     18 29 62 FC | 	wrlong	local06, local10
08304     03 00 00 FF 
08308     00 E4 05 F1 | 	add	objptr, ##1536
0830c     F2 30 02 FB | 	rdlong	local10, objptr
08310     18 33 02 F6 | 	mov	local11, local10
08314     01 32 66 F0 | 	shl	local11, #1
08318     18 33 02 F1 | 	add	local11, local10
0831c     02 32 66 F0 | 	shl	local11, #2
08320     03 00 00 FF 
08324     00 E4 85 F1 | 	sub	objptr, ##1536
08328     F2 32 02 F1 | 	add	local11, objptr
0832c     08 32 06 F1 | 	add	local11, #8
08330     19 2B 62 FC | 	wrlong	local07, local11
08334     03 00 00 FF 
08338     00 E4 05 F1 | 	add	objptr, ##1536
0833c     F2 26 02 FB | 	rdlong	local05, objptr
08340     01 26 06 F1 | 	add	local05, #1
08344     F2 26 62 FC | 	wrlong	local05, objptr
08348     4A 00 00 FF 
0834c     7C E4 85 F1 | 	sub	objptr, ##38012
08350     00 FA 05 F6 | 	mov	result1, #0
08354     20 05 90 FD | 	jmp	#LR__0777
08358                 | LR__0770
08358                 | ' do
08358                 | LR__0771
08358     3C 20 B0 FD | 	call	#_expr
0835c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0835c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0835c     37 00 00 FF 
08360     44 E4 05 F1 | 	add	objptr, ##28228
08364     F2 24 02 FB | 	rdlong	local04, objptr
08368     03 24 66 F0 | 	shl	local04, #3
0836c     02 00 00 FF 
08370     38 E4 85 F1 | 	sub	objptr, ##1080
08374     F2 24 02 F1 | 	add	local04, objptr
08378     04 24 06 F1 | 	add	local04, #4
0837c     12 2D 02 FB | 	rdlong	local08, local04
08380     11 2C 0E F2 | 	cmp	local08, #17 wz
08384     35 00 00 FF 
08388     0C E4 85 F1 | 	sub	objptr, ##27148
0838c     60 01 90 5D |  if_ne	jmp	#LR__0772
08390     21 22 06 F6 | 	mov	local03, #33
08394     0F 27 02 F6 | 	mov	local05, local01
08398     10 29 02 F6 | 	mov	local06, local02
0839c     11 2B 02 F6 | 	mov	local07, local03
083a0     4A 00 00 FF 
083a4     7C E4 05 F1 | 	add	objptr, ##38012
083a8     F2 2C 02 FB | 	rdlong	local08, objptr
083ac     16 2F 02 F6 | 	mov	local09, local08
083b0     01 2E 66 F0 | 	shl	local09, #1
083b4     16 2F 02 F1 | 	add	local09, local08
083b8     02 2E 66 F0 | 	shl	local09, #2
083bc     03 00 00 FF 
083c0     00 E4 85 F1 | 	sub	objptr, ##1536
083c4     F2 2E 02 F1 | 	add	local09, objptr
083c8     17 27 62 FC | 	wrlong	local05, local09
083cc     03 00 00 FF 
083d0     00 E4 05 F1 | 	add	objptr, ##1536
083d4     F2 32 02 FB | 	rdlong	local11, objptr
083d8     19 31 02 F6 | 	mov	local10, local11
083dc     01 30 66 F0 | 	shl	local10, #1
083e0     19 31 02 F1 | 	add	local10, local11
083e4     02 30 66 F0 | 	shl	local10, #2
083e8     03 00 00 FF 
083ec     00 E4 85 F1 | 	sub	objptr, ##1536
083f0     F2 30 02 F1 | 	add	local10, objptr
083f4     04 30 06 F1 | 	add	local10, #4
083f8     18 29 62 FC | 	wrlong	local06, local10
083fc     03 00 00 FF 
08400     00 E4 05 F1 | 	add	objptr, ##1536
08404     F2 26 02 FB | 	rdlong	local05, objptr
08408     13 33 02 F6 | 	mov	local11, local05
0840c     01 32 66 F0 | 	shl	local11, #1
08410     13 33 02 F1 | 	add	local11, local05
08414     02 32 66 F0 | 	shl	local11, #2
08418     03 00 00 FF 
0841c     00 E4 85 F1 | 	sub	objptr, ##1536
08420     F2 32 02 F1 | 	add	local11, objptr
08424     08 32 06 F1 | 	add	local11, #8
08428     19 2B 62 FC | 	wrlong	local07, local11
0842c     03 00 00 FF 
08430     00 E4 05 F1 | 	add	objptr, ##1536
08434     F2 26 02 FB | 	rdlong	local05, objptr
08438     01 26 06 F1 | 	add	local05, #1
0843c     F2 26 62 FC | 	wrlong	local05, objptr
08440     44 22 06 F6 | 	mov	local03, #68
08444     0F 27 02 F6 | 	mov	local05, local01
08448     10 29 02 F6 | 	mov	local06, local02
0844c     11 2B 02 F6 | 	mov	local07, local03
08450     F2 2C 02 FB | 	rdlong	local08, objptr
08454     16 2F 02 F6 | 	mov	local09, local08
08458     01 2E 66 F0 | 	shl	local09, #1
0845c     16 2F 02 F1 | 	add	local09, local08
08460     02 2E 66 F0 | 	shl	local09, #2
08464     03 00 00 FF 
08468     00 E4 85 F1 | 	sub	objptr, ##1536
0846c     F2 2E 02 F1 | 	add	local09, objptr
08470     17 27 62 FC | 	wrlong	local05, local09
08474     03 00 00 FF 
08478     00 E4 05 F1 | 	add	objptr, ##1536
0847c     F2 32 02 FB | 	rdlong	local11, objptr
08480     19 31 02 F6 | 	mov	local10, local11
08484     01 30 66 F0 | 	shl	local10, #1
08488     19 31 02 F1 | 	add	local10, local11
0848c     02 30 66 F0 | 	shl	local10, #2
08490     03 00 00 FF 
08494     00 E4 85 F1 | 	sub	objptr, ##1536
08498     F2 30 02 F1 | 	add	local10, objptr
0849c     04 30 06 F1 | 	add	local10, #4
084a0     18 29 62 FC | 	wrlong	local06, local10
084a4     03 00 00 FF 
084a8     00 E4 05 F1 | 	add	objptr, ##1536
084ac     F2 30 02 FB | 	rdlong	local10, objptr
084b0     18 33 02 F6 | 	mov	local11, local10
084b4     01 32 66 F0 | 	shl	local11, #1
084b8     18 33 02 F1 | 	add	local11, local10
084bc     02 32 66 F0 | 	shl	local11, #2
084c0     03 00 00 FF 
084c4     00 E4 85 F1 | 	sub	objptr, ##1536
084c8     F2 32 02 F1 | 	add	local11, objptr
084cc     08 32 06 F1 | 	add	local11, #8
084d0     19 2B 62 FC | 	wrlong	local07, local11
084d4     03 00 00 FF 
084d8     00 E4 05 F1 | 	add	objptr, ##1536
084dc     F2 26 02 FB | 	rdlong	local05, objptr
084e0     01 26 06 F1 | 	add	local05, #1
084e4     F2 26 62 FC | 	wrlong	local05, objptr
084e8     4A 00 00 FF 
084ec     7C E4 85 F1 | 	sub	objptr, ##38012
084f0                 | LR__0772
084f0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
084f0     37 00 00 FF 
084f4     44 E4 05 F1 | 	add	objptr, ##28228
084f8     F2 24 02 FB | 	rdlong	local04, objptr
084fc     03 24 66 F0 | 	shl	local04, #3
08500     02 00 00 FF 
08504     38 E4 85 F1 | 	sub	objptr, ##1080
08508     F2 24 02 F1 | 	add	local04, objptr
0850c     04 24 06 F1 | 	add	local04, #4
08510     12 2D 02 FB | 	rdlong	local08, local04
08514     12 2C 0E F2 | 	cmp	local08, #18 wz
08518     35 00 00 FF 
0851c     0C E4 85 F1 | 	sub	objptr, ##27148
08520     60 01 90 5D |  if_ne	jmp	#LR__0773
08524     22 22 06 F6 | 	mov	local03, #34
08528     0F 27 02 F6 | 	mov	local05, local01
0852c     10 29 02 F6 | 	mov	local06, local02
08530     11 2B 02 F6 | 	mov	local07, local03
08534     4A 00 00 FF 
08538     7C E4 05 F1 | 	add	objptr, ##38012
0853c     F2 2C 02 FB | 	rdlong	local08, objptr
08540     16 2F 02 F6 | 	mov	local09, local08
08544     01 2E 66 F0 | 	shl	local09, #1
08548     16 2F 02 F1 | 	add	local09, local08
0854c     02 2E 66 F0 | 	shl	local09, #2
08550     03 00 00 FF 
08554     00 E4 85 F1 | 	sub	objptr, ##1536
08558     F2 2E 02 F1 | 	add	local09, objptr
0855c     17 27 62 FC | 	wrlong	local05, local09
08560     03 00 00 FF 
08564     00 E4 05 F1 | 	add	objptr, ##1536
08568     F2 32 02 FB | 	rdlong	local11, objptr
0856c     19 31 02 F6 | 	mov	local10, local11
08570     01 30 66 F0 | 	shl	local10, #1
08574     19 31 02 F1 | 	add	local10, local11
08578     02 30 66 F0 | 	shl	local10, #2
0857c     03 00 00 FF 
08580     00 E4 85 F1 | 	sub	objptr, ##1536
08584     F2 30 02 F1 | 	add	local10, objptr
08588     04 30 06 F1 | 	add	local10, #4
0858c     18 29 62 FC | 	wrlong	local06, local10
08590     03 00 00 FF 
08594     00 E4 05 F1 | 	add	objptr, ##1536
08598     F2 26 02 FB | 	rdlong	local05, objptr
0859c     13 33 02 F6 | 	mov	local11, local05
085a0     01 32 66 F0 | 	shl	local11, #1
085a4     13 33 02 F1 | 	add	local11, local05
085a8     02 32 66 F0 | 	shl	local11, #2
085ac     03 00 00 FF 
085b0     00 E4 85 F1 | 	sub	objptr, ##1536
085b4     F2 32 02 F1 | 	add	local11, objptr
085b8     08 32 06 F1 | 	add	local11, #8
085bc     19 2B 62 FC | 	wrlong	local07, local11
085c0     03 00 00 FF 
085c4     00 E4 05 F1 | 	add	objptr, ##1536
085c8     F2 26 02 FB | 	rdlong	local05, objptr
085cc     01 26 06 F1 | 	add	local05, #1
085d0     F2 26 62 FC | 	wrlong	local05, objptr
085d4     44 22 06 F6 | 	mov	local03, #68
085d8     0F 27 02 F6 | 	mov	local05, local01
085dc     10 29 02 F6 | 	mov	local06, local02
085e0     11 2B 02 F6 | 	mov	local07, local03
085e4     F2 2C 02 FB | 	rdlong	local08, objptr
085e8     16 2F 02 F6 | 	mov	local09, local08
085ec     01 2E 66 F0 | 	shl	local09, #1
085f0     16 2F 02 F1 | 	add	local09, local08
085f4     02 2E 66 F0 | 	shl	local09, #2
085f8     03 00 00 FF 
085fc     00 E4 85 F1 | 	sub	objptr, ##1536
08600     F2 2E 02 F1 | 	add	local09, objptr
08604     17 27 62 FC | 	wrlong	local05, local09
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 32 02 FB | 	rdlong	local11, objptr
08614     19 31 02 F6 | 	mov	local10, local11
08618     01 30 66 F0 | 	shl	local10, #1
0861c     19 31 02 F1 | 	add	local10, local11
08620     02 30 66 F0 | 	shl	local10, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 30 02 F1 | 	add	local10, objptr
08630     04 30 06 F1 | 	add	local10, #4
08634     18 29 62 FC | 	wrlong	local06, local10
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 30 02 FB | 	rdlong	local10, objptr
08644     18 33 02 F6 | 	mov	local11, local10
08648     01 32 66 F0 | 	shl	local11, #1
0864c     18 33 02 F1 | 	add	local11, local10
08650     02 32 66 F0 | 	shl	local11, #2
08654     03 00 00 FF 
08658     00 E4 85 F1 | 	sub	objptr, ##1536
0865c     F2 32 02 F1 | 	add	local11, objptr
08660     08 32 06 F1 | 	add	local11, #8
08664     19 2B 62 FC | 	wrlong	local07, local11
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 26 02 FB | 	rdlong	local05, objptr
08674     01 26 06 F1 | 	add	local05, #1
08678     F2 26 62 FC | 	wrlong	local05, objptr
0867c     4A 00 00 FF 
08680     7C E4 85 F1 | 	sub	objptr, ##38012
08684                 | LR__0773
08684                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08684     37 00 00 FF 
08688     44 E4 05 F1 | 	add	objptr, ##28228
0868c     F2 24 02 FB | 	rdlong	local04, objptr
08690     03 24 66 F0 | 	shl	local04, #3
08694     02 00 00 FF 
08698     38 E4 85 F1 | 	sub	objptr, ##1080
0869c     F2 24 02 F1 | 	add	local04, objptr
086a0     04 24 06 F1 | 	add	local04, #4
086a4     12 2D 02 FB | 	rdlong	local08, local04
086a8     FE 2D 0E F2 | 	cmp	local08, #510 wz
086ac     35 00 00 FF 
086b0     0C E4 85 F1 | 	sub	objptr, ##27148
086b4     B8 00 90 5D |  if_ne	jmp	#LR__0774
086b8     44 22 06 F6 | 	mov	local03, #68
086bc     0F 27 02 F6 | 	mov	local05, local01
086c0     10 29 02 F6 | 	mov	local06, local02
086c4     11 2B 02 F6 | 	mov	local07, local03
086c8     4A 00 00 FF 
086cc     7C E4 05 F1 | 	add	objptr, ##38012
086d0     F2 2C 02 FB | 	rdlong	local08, objptr
086d4     16 2F 02 F6 | 	mov	local09, local08
086d8     01 2E 66 F0 | 	shl	local09, #1
086dc     16 2F 02 F1 | 	add	local09, local08
086e0     02 2E 66 F0 | 	shl	local09, #2
086e4     03 00 00 FF 
086e8     00 E4 85 F1 | 	sub	objptr, ##1536
086ec     F2 2E 02 F1 | 	add	local09, objptr
086f0     17 27 62 FC | 	wrlong	local05, local09
086f4     03 00 00 FF 
086f8     00 E4 05 F1 | 	add	objptr, ##1536
086fc     F2 32 02 FB | 	rdlong	local11, objptr
08700     19 31 02 F6 | 	mov	local10, local11
08704     01 30 66 F0 | 	shl	local10, #1
08708     19 31 02 F1 | 	add	local10, local11
0870c     02 30 66 F0 | 	shl	local10, #2
08710     03 00 00 FF 
08714     00 E4 85 F1 | 	sub	objptr, ##1536
08718     F2 30 02 F1 | 	add	local10, objptr
0871c     04 30 06 F1 | 	add	local10, #4
08720     18 29 62 FC | 	wrlong	local06, local10
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 30 02 FB | 	rdlong	local10, objptr
08730     18 33 02 F6 | 	mov	local11, local10
08734     01 32 66 F0 | 	shl	local11, #1
08738     18 33 02 F1 | 	add	local11, local10
0873c     02 32 66 F0 | 	shl	local11, #2
08740     03 00 00 FF 
08744     00 E4 85 F1 | 	sub	objptr, ##1536
08748     F2 32 02 F1 | 	add	local11, objptr
0874c     08 32 06 F1 | 	add	local11, #8
08750     19 2B 62 FC | 	wrlong	local07, local11
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 26 02 FB | 	rdlong	local05, objptr
08760     01 26 06 F1 | 	add	local05, #1
08764     F2 26 62 FC | 	wrlong	local05, objptr
08768     4A 00 00 FF 
0876c     7C E4 85 F1 | 	sub	objptr, ##38012
08770                 | LR__0774
08770                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
08770     37 00 00 FF 
08774     44 E4 05 F1 | 	add	objptr, ##28228
08778     F2 24 02 FB | 	rdlong	local04, objptr
0877c     03 24 66 F0 | 	shl	local04, #3
08780     02 00 00 FF 
08784     38 E4 85 F1 | 	sub	objptr, ##1080
08788     F2 24 02 F1 | 	add	local04, objptr
0878c     04 24 06 F1 | 	add	local04, #4
08790     12 2D 02 FB | 	rdlong	local08, local04
08794     11 2C 0E F2 | 	cmp	local08, #17 wz
08798     35 00 00 FF 
0879c     0C E4 85 F1 | 	sub	objptr, ##27148
087a0     6C 00 90 AD |  if_e	jmp	#LR__0775
087a4     37 00 00 FF 
087a8     44 E4 05 F1 | 	add	objptr, ##28228
087ac     F2 2C 02 FB | 	rdlong	local08, objptr
087b0     03 2C 66 F0 | 	shl	local08, #3
087b4     02 00 00 FF 
087b8     38 E4 85 F1 | 	sub	objptr, ##1080
087bc     F2 2C 02 F1 | 	add	local08, objptr
087c0     04 2C 06 F1 | 	add	local08, #4
087c4     16 2D 02 FB | 	rdlong	local08, local08
087c8     12 2C 0E F2 | 	cmp	local08, #18 wz
087cc     35 00 00 FF 
087d0     0C E4 85 F1 | 	sub	objptr, ##27148
087d4     38 00 90 AD |  if_e	jmp	#LR__0775
087d8     37 00 00 FF 
087dc     44 E4 05 F1 | 	add	objptr, ##28228
087e0     F2 32 02 FB | 	rdlong	local11, objptr
087e4     03 32 66 F0 | 	shl	local11, #3
087e8     02 00 00 FF 
087ec     38 E4 85 F1 | 	sub	objptr, ##1080
087f0     F2 32 02 F1 | 	add	local11, objptr
087f4     04 32 06 F1 | 	add	local11, #4
087f8     19 33 02 FB | 	rdlong	local11, local11
087fc     FE 33 0E F2 | 	cmp	local11, #510 wz
08800     35 00 00 FF 
08804     0C E4 85 F1 | 	sub	objptr, ##27148
08808     16 FA 05 56 |  if_ne	mov	result1, #22
0880c     68 00 90 5D |  if_ne	jmp	#LR__0777
08810                 | LR__0775
08810     37 00 00 FF 
08814     44 E4 05 F1 | 	add	objptr, ##28228
08818     F2 24 02 FB | 	rdlong	local04, objptr
0881c     01 24 06 F1 | 	add	local04, #1
08820     F2 24 62 FC | 	wrlong	local04, objptr
08824     03 24 66 F0 | 	shl	local04, #3
08828     02 00 00 FF 
0882c     38 E4 85 F1 | 	sub	objptr, ##1080
08830     F2 24 02 F1 | 	add	local04, objptr
08834     04 24 06 F1 | 	add	local04, #4
08838     12 2D 02 FB | 	rdlong	local08, local04
0883c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08840     35 00 00 FF 
08844     0C E4 85 F1 | 	sub	objptr, ##27148
08848     28 00 90 AD |  if_e	jmp	#LR__0776
0884c     37 00 00 FF 
08850     44 E4 05 F1 | 	add	objptr, ##28228
08854     F2 32 02 FB | 	rdlong	local11, objptr
08858     0E 00 00 FF 
0885c     1C E4 05 F1 | 	add	objptr, ##7196
08860     F2 30 02 FB | 	rdlong	local10, objptr
08864     45 00 00 FF 
08868     60 E4 85 F1 | 	sub	objptr, ##35424
0886c     18 33 52 F2 | 	cmps	local11, local10 wc
08870     E4 FA 9F CD |  if_b	jmp	#LR__0771
08874                 | LR__0776
08874                 | ' return 0
08874     00 FA 05 F6 | 	mov	result1, #0
08878                 | LR__0777
08878     A7 F0 03 F6 | 	mov	ptra, fp
0887c     B2 00 A0 FD | 	call	#popregs_
08880                 | _compile_print_ret
08880     2D 00 64 FD | 	ret
08884                 | 
08884                 | ' 
08884                 | ' function compile_if() as ulong  
08884                 | _compile_if
08884     05 4A 05 F6 | 	mov	COUNT_, #5
08888     A8 00 A0 FD | 	call	#pushregs_
0888c                 | _compile_if_enter
0888c     08 1B B0 FD | 	call	#_expr
08890                 | ' expr()
08890                 | ' return 0
08890     37 00 00 FF 
08894     44 E4 05 F1 | 	add	objptr, ##28228
08898     F2 FA 01 FB | 	rdlong	result1, objptr
0889c     01 FA 05 F1 | 	add	result1, #1
088a0     F2 FA 61 FC | 	wrlong	result1, objptr
088a4     58 22 06 F6 | 	mov	local03, #88
088a8     0F 25 02 F6 | 	mov	local04, local01
088ac     10 27 02 F6 | 	mov	local05, local02
088b0     11 1F 02 F6 | 	mov	local01, local03
088b4     13 00 00 FF 
088b8     38 E4 05 F1 | 	add	objptr, ##9784
088bc     F2 12 02 FB | 	rdlong	arg01, objptr
088c0     09 FB 01 F6 | 	mov	result1, arg01
088c4     01 FA 65 F0 | 	shl	result1, #1
088c8     09 FB 01 F1 | 	add	result1, arg01
088cc     02 FA 65 F0 | 	shl	result1, #2
088d0     03 00 00 FF 
088d4     00 E4 85 F1 | 	sub	objptr, ##1536
088d8     F2 FA 01 F1 | 	add	result1, objptr
088dc     FD 24 62 FC | 	wrlong	local04, result1
088e0     03 00 00 FF 
088e4     00 E4 05 F1 | 	add	objptr, ##1536
088e8     F2 12 02 FB | 	rdlong	arg01, objptr
088ec     09 25 02 F6 | 	mov	local04, arg01
088f0     01 24 66 F0 | 	shl	local04, #1
088f4     09 25 02 F1 | 	add	local04, arg01
088f8     02 24 66 F0 | 	shl	local04, #2
088fc     03 00 00 FF 
08900     00 E4 85 F1 | 	sub	objptr, ##1536
08904     F2 24 02 F1 | 	add	local04, objptr
08908     04 24 06 F1 | 	add	local04, #4
0890c     12 27 62 FC | 	wrlong	local05, local04
08910     03 00 00 FF 
08914     00 E4 05 F1 | 	add	objptr, ##1536
08918     F2 24 02 FB | 	rdlong	local04, objptr
0891c     12 27 02 F6 | 	mov	local05, local04
08920     01 26 66 F0 | 	shl	local05, #1
08924     12 27 02 F1 | 	add	local05, local04
08928     02 26 66 F0 | 	shl	local05, #2
0892c     03 00 00 FF 
08930     00 E4 85 F1 | 	sub	objptr, ##1536
08934     F2 26 02 F1 | 	add	local05, objptr
08938     08 26 06 F1 | 	add	local05, #8
0893c     13 1F 62 FC | 	wrlong	local01, local05
08940     03 00 00 FF 
08944     00 E4 05 F1 | 	add	objptr, ##1536
08948     F2 24 02 FB | 	rdlong	local04, objptr
0894c     01 24 06 F1 | 	add	local04, #1
08950     F2 24 62 FC | 	wrlong	local04, objptr
08954                 | ' 
08954                 | ' 'print "In compile_if"
08954                 | ' compile_fun_1p()
08954                 | ' cmd=lparts(ct).token : ct+=1
08954                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
08954                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08954                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08954     13 00 00 FF 
08958     38 E4 85 F1 | 	sub	objptr, ##9784
0895c     F2 26 02 FB | 	rdlong	local05, objptr
08960     01 26 06 F1 | 	add	local05, #1
08964     03 26 66 F0 | 	shl	local05, #3
08968     02 00 00 FF 
0896c     38 E4 85 F1 | 	sub	objptr, ##1080
08970     F2 26 02 F1 | 	add	local05, objptr
08974     13 13 02 FB | 	rdlong	arg01, local05
08978     35 00 00 FF 
0897c     0C E4 85 F1 | 	sub	objptr, ##27148
08980                 | ' 
08980                 | ' select case s
08980     82 01 00 FF 
08984     C6 14 06 F6 | 	mov	arg02, ##@LR__5173
08988     38 81 B1 FD | 	call	#__system___string_cmp
0898c     00 FA 0D F2 | 	cmp	result1, #0 wz
08990     1B FA 05 A6 |  if_e	mov	result1, #27
08994     00 FA 05 56 |  if_ne	mov	result1, #0
08998     00 FA 0D F2 | 	cmp	result1, #0 wz
0899c     0C 00 90 AD |  if_e	jmp	#LR__0780
089a0     05 12 06 F6 | 	mov	arg01, #5
089a4     A4 ED BF FD | 	call	#_compile_immediate_assign
089a8     08 00 90 FD | 	jmp	#LR__0781
089ac                 | LR__0780
089ac     05 12 06 F6 | 	mov	arg01, #5
089b0     D4 E2 BF FD | 	call	#_compile_immediate
089b4                 | LR__0781
089b4                 | ' 
089b4                 | ' 
089b4                 | ' return 0
089b4     00 FA 05 F6 | 	mov	result1, #0
089b8     A7 F0 03 F6 | 	mov	ptra, fp
089bc     B2 00 A0 FD | 	call	#popregs_
089c0                 | _compile_if_ret
089c0     2D 00 64 FD | 	ret
089c4                 | 
089c4                 | ' 
089c4                 | ' function compile_else() as ulong  
089c4                 | _compile_else
089c4     05 4A 05 F6 | 	mov	COUNT_, #5
089c8     A8 00 A0 FD | 	call	#pushregs_
089cc                 | _compile_else_enter
089cc     5A 22 06 F6 | 	mov	local03, #90
089d0     0F 25 02 F6 | 	mov	local04, local01
089d4     10 27 02 F6 | 	mov	local05, local02
089d8     11 1F 02 F6 | 	mov	local01, local03
089dc     4A 00 00 FF 
089e0     7C E4 05 F1 | 	add	objptr, ##38012
089e4     F2 12 02 FB | 	rdlong	arg01, objptr
089e8     09 FB 01 F6 | 	mov	result1, arg01
089ec     01 FA 65 F0 | 	shl	result1, #1
089f0     09 FB 01 F1 | 	add	result1, arg01
089f4     02 FA 65 F0 | 	shl	result1, #2
089f8     03 00 00 FF 
089fc     00 E4 85 F1 | 	sub	objptr, ##1536
08a00     F2 FA 01 F1 | 	add	result1, objptr
08a04     FD 24 62 FC | 	wrlong	local04, result1
08a08     03 00 00 FF 
08a0c     00 E4 05 F1 | 	add	objptr, ##1536
08a10     F2 FA 01 FB | 	rdlong	result1, objptr
08a14     FD 24 02 F6 | 	mov	local04, result1
08a18     01 24 66 F0 | 	shl	local04, #1
08a1c     FD 24 02 F1 | 	add	local04, result1
08a20     02 24 66 F0 | 	shl	local04, #2
08a24     03 00 00 FF 
08a28     00 E4 85 F1 | 	sub	objptr, ##1536
08a2c     F2 24 02 F1 | 	add	local04, objptr
08a30     04 24 06 F1 | 	add	local04, #4
08a34     12 27 62 FC | 	wrlong	local05, local04
08a38     03 00 00 FF 
08a3c     00 E4 05 F1 | 	add	objptr, ##1536
08a40     F2 24 02 FB | 	rdlong	local04, objptr
08a44     12 27 02 F6 | 	mov	local05, local04
08a48     01 26 66 F0 | 	shl	local05, #1
08a4c     12 27 02 F1 | 	add	local05, local04
08a50     02 26 66 F0 | 	shl	local05, #2
08a54     03 00 00 FF 
08a58     00 E4 85 F1 | 	sub	objptr, ##1536
08a5c     F2 26 02 F1 | 	add	local05, objptr
08a60     08 26 06 F1 | 	add	local05, #8
08a64     13 1F 62 FC | 	wrlong	local01, local05
08a68     03 00 00 FF 
08a6c     00 E4 05 F1 | 	add	objptr, ##1536
08a70     F2 24 02 FB | 	rdlong	local04, objptr
08a74     01 24 06 F1 | 	add	local04, #1
08a78     F2 24 62 FC | 	wrlong	local04, objptr
08a7c                 | ' 
08a7c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08a7c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08a7c     13 00 00 FF 
08a80     38 E4 85 F1 | 	sub	objptr, ##9784
08a84     F2 26 02 FB | 	rdlong	local05, objptr
08a88     01 26 06 F1 | 	add	local05, #1
08a8c     03 26 66 F0 | 	shl	local05, #3
08a90     02 00 00 FF 
08a94     38 E4 85 F1 | 	sub	objptr, ##1080
08a98     F2 26 02 F1 | 	add	local05, objptr
08a9c     13 13 02 FB | 	rdlong	arg01, local05
08aa0     35 00 00 FF 
08aa4     0C E4 85 F1 | 	sub	objptr, ##27148
08aa8                 | ' 
08aa8                 | ' select case s
08aa8     82 01 00 FF 
08aac     C6 14 06 F6 | 	mov	arg02, ##@LR__5173
08ab0     10 80 B1 FD | 	call	#__system___string_cmp
08ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ab8     1B FA 05 A6 |  if_e	mov	result1, #27
08abc     00 FA 05 56 |  if_ne	mov	result1, #0
08ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ac4     0C 00 90 AD |  if_e	jmp	#LR__0790
08ac8     05 12 06 F6 | 	mov	arg01, #5
08acc     7C EC BF FD | 	call	#_compile_immediate_assign
08ad0     08 00 90 FD | 	jmp	#LR__0791
08ad4                 | LR__0790
08ad4     05 12 06 F6 | 	mov	arg01, #5
08ad8     AC E1 BF FD | 	call	#_compile_immediate
08adc                 | LR__0791
08adc                 | ' 
08adc                 | ' 
08adc                 | ' return 0
08adc     00 FA 05 F6 | 	mov	result1, #0
08ae0     A7 F0 03 F6 | 	mov	ptra, fp
08ae4     B2 00 A0 FD | 	call	#popregs_
08ae8                 | _compile_else_ret
08ae8     2D 00 64 FD | 	ret
08aec                 | 
08aec                 | ' 
08aec                 | ' 
08aec                 | ' function compile_dim() as ulong  
08aec                 | _compile_dim
08aec     11 4A 05 F6 | 	mov	COUNT_, #17
08af0     A8 00 A0 FD | 	call	#pushregs_
08af4     01 1E 06 F6 | 	mov	local01, #1
08af8     01 20 06 F6 | 	mov	local02, #1
08afc     01 22 06 F6 | 	mov	local03, #1
08b00                 | ' 
08b00                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08b00                 | ' 
08b00                 | ' if isname(lparts(ct).part$) then 
08b00     37 00 00 FF 
08b04     44 E4 05 F1 | 	add	objptr, ##28228
08b08     F2 18 02 FB | 	rdlong	arg04, objptr
08b0c     03 18 66 F0 | 	shl	arg04, #3
08b10     02 00 00 FF 
08b14     38 E4 85 F1 | 	sub	objptr, ##1080
08b18     F2 18 02 F1 | 	add	arg04, objptr
08b1c     0C 13 02 FB | 	rdlong	arg01, arg04
08b20     35 00 00 FF 
08b24     0C E4 85 F1 | 	sub	objptr, ##27148
08b28     98 CF BF FD | 	call	#_isname
08b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b30     AC 05 90 AD |  if_e	jmp	#LR__0824
08b34     37 00 00 FF 
08b38     44 E4 05 F1 | 	add	objptr, ##28228
08b3c     F2 24 02 FB | 	rdlong	local04, objptr
08b40     03 24 66 F0 | 	shl	local04, #3
08b44     02 00 00 FF 
08b48     38 E4 85 F1 | 	sub	objptr, ##1080
08b4c     F2 24 02 F1 | 	add	local04, objptr
08b50     12 27 02 FB | 	rdlong	local05, local04
08b54     01 28 66 F6 | 	neg	local06, #1
08b58                 | '   varname2$=lparts(ct).part$ 
08b58                 | '   j=-1
08b58                 | '   if varnum>0 then
08b58     04 E4 85 F1 | 	sub	objptr, #4
08b5c     F2 2A 02 FB | 	rdlong	local07, objptr
08b60     35 00 00 FF 
08b64     08 E4 85 F1 | 	sub	objptr, ##27144
08b68     01 2A 56 F2 | 	cmps	local07, #1 wc
08b6c     58 00 90 CD |  if_b	jmp	#LR__0802
08b70                 | '  '   print "in dim, varnum=";varnum
08b70                 | '     for i=0 to varnum-1
08b70     00 2C 06 F6 | 	mov	local08, #0
08b74     35 00 00 FF 
08b78     08 E4 05 F1 | 	add	objptr, ##27144
08b7c     F2 2E 02 FB | 	rdlong	local09, objptr
08b80     35 00 00 FF 
08b84     08 E4 85 F1 | 	sub	objptr, ##27144
08b88                 | LR__0800
08b88     17 2D 52 F2 | 	cmps	local08, local09 wc
08b8c     38 00 90 3D |  if_ae	jmp	#LR__0801
08b90                 | '       if variables(i).name=varname2$ then j=i : exit
08b90     16 25 02 F6 | 	mov	local04, local08
08b94     04 24 66 F0 | 	shl	local04, #4
08b98     14 00 00 FF 
08b9c     F8 E5 05 F1 | 	add	objptr, ##10744
08ba0     F2 24 02 F1 | 	add	local04, objptr
08ba4     12 13 02 FB | 	rdlong	arg01, local04
08ba8     13 15 02 F6 | 	mov	arg02, local05
08bac     14 00 00 FF 
08bb0     F8 E5 85 F1 | 	sub	objptr, ##10744
08bb4     0C 7F B1 FD | 	call	#__system___string_cmp
08bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bbc     16 29 02 A6 |  if_e	mov	local06, local08
08bc0     01 2C 06 51 |  if_ne	add	local08, #1
08bc4     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08bc8                 | LR__0801
08bc8                 | LR__0802
08bc8                 | ' '  if j<>-1 then printerror (42) : return 42
08bc8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08bc8     FF FF 7F FF 
08bcc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08bd0     35 00 00 AF 
08bd4     08 E4 05 A1 |  if_e	add	objptr, ##27144
08bd8     F2 28 02 AB |  if_e	rdlong	local06, objptr
08bdc     35 00 00 AF 
08be0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08be4     78 00 90 AD |  if_e	jmp	#LR__0803
08be8     00 12 06 F6 | 	mov	arg01, #0
08bec     EC D8 B1 FD | 	call	#__system___getiolock_0540
08bf0     FD 12 02 F6 | 	mov	arg01, result1
08bf4     A4 7E B1 FD | 	call	#__system___lockmem
08bf8     84 01 00 FF 
08bfc     D5 14 06 F6 | 	mov	arg02, ##@LR__5405
08c00     00 12 06 F6 | 	mov	arg01, #0
08c04     00 16 06 F6 | 	mov	arg03, #0
08c08     84 8B B1 FD | 	call	#__system___basic_print_string
08c0c     51 00 00 FF 
08c10     C0 E5 05 F1 | 	add	objptr, ##41920
08c14     F2 14 02 FB | 	rdlong	arg02, objptr
08c18     51 00 00 FF 
08c1c     C0 E5 85 F1 | 	sub	objptr, ##41920
08c20     00 12 06 F6 | 	mov	arg01, #0
08c24     00 16 06 F6 | 	mov	arg03, #0
08c28     0A 18 06 F6 | 	mov	arg04, #10
08c2c     E4 8B B1 FD | 	call	#__system___basic_print_unsigned
08c30     84 01 00 FF 
08c34     E3 14 06 F6 | 	mov	arg02, ##@LR__5406
08c38     00 12 06 F6 | 	mov	arg01, #0
08c3c     00 16 06 F6 | 	mov	arg03, #0
08c40     4C 8B B1 FD | 	call	#__system___basic_print_string
08c44     00 12 06 F6 | 	mov	arg01, #0
08c48     0A 14 06 F6 | 	mov	arg02, #10
08c4c     00 16 06 F6 | 	mov	arg03, #0
08c50     E4 8A B1 FD | 	call	#__system___basic_print_char
08c54     00 12 06 F6 | 	mov	arg01, #0
08c58     80 D8 B1 FD | 	call	#__system___getiolock_0540
08c5c     FD 00 68 FC | 	wrlong	#0, result1
08c60                 | LR__0803
08c60                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
08c60     37 00 00 FF 
08c64     44 E4 05 F1 | 	add	objptr, ##28228
08c68     F2 18 02 FB | 	rdlong	arg04, objptr
08c6c     01 18 06 F1 | 	add	arg04, #1
08c70     03 18 66 F0 | 	shl	arg04, #3
08c74     02 00 00 FF 
08c78     38 E4 85 F1 | 	sub	objptr, ##1080
08c7c     F2 18 02 F1 | 	add	arg04, objptr
08c80     0C 13 02 FB | 	rdlong	arg01, arg04
08c84     84 01 00 FF 
08c88     04 15 06 F6 | 	mov	arg02, ##@LR__5407
08c8c     35 00 00 FF 
08c90     0C E4 85 F1 | 	sub	objptr, ##27148
08c94     2C 7E B1 FD | 	call	#__system___string_cmp
08c98     00 FA 0D F2 | 	cmp	result1, #0 wz
08c9c     50 00 90 AD |  if_e	jmp	#LR__0804
08ca0     37 00 00 FF 
08ca4     44 E4 05 F1 | 	add	objptr, ##28228
08ca8     F2 2E 02 FB | 	rdlong	local09, objptr
08cac     01 2E 06 F1 | 	add	local09, #1
08cb0     03 2E 66 F0 | 	shl	local09, #3
08cb4     02 00 00 FF 
08cb8     38 E4 85 F1 | 	sub	objptr, ##1080
08cbc     F2 2E 02 F1 | 	add	local09, objptr
08cc0     17 13 02 FB | 	rdlong	arg01, local09
08cc4     84 01 00 FF 
08cc8     06 15 06 F6 | 	mov	arg02, ##@LR__5408
08ccc     35 00 00 FF 
08cd0     0C E4 85 F1 | 	sub	objptr, ##27148
08cd4     EC 7D B1 FD | 	call	#__system___string_cmp
08cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
08cdc     10 00 90 AD |  if_e	jmp	#LR__0804
08ce0     2B 12 06 F6 | 	mov	arg01, #43
08ce4     1C 48 B1 FD | 	call	#_printerror
08ce8     2B FA 05 F6 | 	mov	result1, #43
08cec     00 05 90 FD | 	jmp	#LR__0826
08cf0                 | LR__0804
08cf0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08cf0     37 00 00 FF 
08cf4     44 E4 05 F1 | 	add	objptr, ##28228
08cf8     F2 14 02 FB | 	rdlong	arg02, objptr
08cfc     01 14 06 F1 | 	add	arg02, #1
08d00     03 14 66 F0 | 	shl	arg02, #3
08d04     02 00 00 FF 
08d08     38 E4 85 F1 | 	sub	objptr, ##1080
08d0c     F2 14 02 F1 | 	add	arg02, objptr
08d10     0A 13 02 FB | 	rdlong	arg01, arg02
08d14     84 01 00 FF 
08d18     09 15 06 F6 | 	mov	arg02, ##@LR__5409
08d1c     35 00 00 FF 
08d20     0C E4 85 F1 | 	sub	objptr, ##27148
08d24     9C 7D B1 FD | 	call	#__system___string_cmp
08d28     00 FA 0D F2 | 	cmp	result1, #0 wz
08d2c     37 00 00 AF 
08d30     44 E4 05 A1 |  if_e	add	objptr, ##28228
08d34     F2 30 02 AB |  if_e	rdlong	local10, objptr
08d38     37 00 00 AF 
08d3c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08d40     01 30 06 A1 |  if_e	add	local10, #1
08d44     7C 01 90 AD |  if_e	jmp	#LR__0810
08d48     37 00 00 FF 
08d4c     44 E4 05 F1 | 	add	objptr, ##28228
08d50     F2 30 02 FB | 	rdlong	local10, objptr
08d54     37 00 00 FF 
08d58     44 E4 85 F1 | 	sub	objptr, ##28228
08d5c     02 30 06 F1 | 	add	local10, #2
08d60     00 32 06 F6 | 	mov	local11, #0
08d64                 | '   l=ct+2 : m=0 : do
08d64                 | LR__0805
08d64                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
08d64                 | '     if isdec(lparts(l).part$) then 
08d64     18 25 02 F6 | 	mov	local04, local10
08d68     03 24 66 F0 | 	shl	local04, #3
08d6c     35 00 00 FF 
08d70     0C E4 05 F1 | 	add	objptr, ##27148
08d74     F2 24 02 F1 | 	add	local04, objptr
08d78     12 13 02 FB | 	rdlong	arg01, local04
08d7c     35 00 00 FF 
08d80     0C E4 85 F1 | 	sub	objptr, ##27148
08d84     40 D6 BF FD | 	call	#_isdec
08d88     00 FA 0D F2 | 	cmp	result1, #0 wz
08d8c     44 00 90 AD |  if_e	jmp	#LR__0806
08d90     19 35 02 F6 | 	mov	local12, local11
08d94     0F 35 06 F1 | 	add	local12, #local01
08d98     18 2F 02 F6 | 	mov	local09, local10
08d9c     03 2E 66 F0 | 	shl	local09, #3
08da0     35 00 00 FF 
08da4     0C E4 05 F1 | 	add	objptr, ##27148
08da8     F2 2E 02 F1 | 	add	local09, objptr
08dac     17 13 02 FB | 	rdlong	arg01, local09
08db0     00 14 06 F6 | 	mov	arg02, #0
08db4     35 00 00 FF 
08db8     0C E4 85 F1 | 	sub	objptr, ##27148
08dbc     08 AF B1 FD | 	call	#__system____builtin_atoi
08dc0     FD 36 02 F6 | 	mov	local13, result1
08dc4                 | 	'.live	local13
08dc4                 | 	'.live	local12
08dc4     00 34 8E F9 | 	altd	local12, #0
08dc8     1B 35 02 F6 | 	mov	local12, local13
08dcc     01 32 06 F1 | 	add	local11, #1
08dd0     10 00 90 FD | 	jmp	#LR__0807
08dd4                 | LR__0806
08dd4     11 12 06 F6 | 	mov	arg01, #17
08dd8     28 47 B1 FD | 	call	#_printerror
08ddc                 | '       printerror (17)  : return(17)
08ddc     11 FA 05 F6 | 	mov	result1, #17
08de0     0C 04 90 FD | 	jmp	#LR__0826
08de4                 | LR__0807
08de4                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
08de4     18 25 02 F6 | 	mov	local04, local10
08de8     01 24 06 F1 | 	add	local04, #1
08dec     03 24 66 F0 | 	shl	local04, #3
08df0     35 00 00 FF 
08df4     0C E4 05 F1 | 	add	objptr, ##27148
08df8     F2 24 02 F1 | 	add	local04, objptr
08dfc     12 13 02 FB | 	rdlong	arg01, local04
08e00     84 01 00 FF 
08e04     0C 15 06 F6 | 	mov	arg02, ##@LR__5410
08e08     35 00 00 FF 
08e0c     0C E4 85 F1 | 	sub	objptr, ##27148
08e10     B0 7C B1 FD | 	call	#__system___string_cmp
08e14     00 FA 0D F2 | 	cmp	result1, #0 wz
08e18     48 00 90 AD |  if_e	jmp	#LR__0808
08e1c     18 37 02 F6 | 	mov	local13, local10
08e20     01 36 06 F1 | 	add	local13, #1
08e24     03 36 66 F0 | 	shl	local13, #3
08e28     35 00 00 FF 
08e2c     0C E4 05 F1 | 	add	objptr, ##27148
08e30     F2 36 02 F1 | 	add	local13, objptr
08e34     1B 13 02 FB | 	rdlong	arg01, local13
08e38     84 01 00 FF 
08e3c     0E 15 06 F6 | 	mov	arg02, ##@LR__5411
08e40     35 00 00 FF 
08e44     0C E4 85 F1 | 	sub	objptr, ##27148
08e48     78 7C B1 FD | 	call	#__system___string_cmp
08e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e50     10 00 90 AD |  if_e	jmp	#LR__0808
08e54     2C 12 06 F6 | 	mov	arg01, #44
08e58     A8 46 B1 FD | 	call	#_printerror
08e5c     2C FA 05 F6 | 	mov	result1, #44
08e60     8C 03 90 FD | 	jmp	#LR__0826
08e64                 | LR__0808
08e64     02 30 06 F1 | 	add	local10, #2
08e68     18 25 02 F6 | 	mov	local04, local10
08e6c     01 24 86 F1 | 	sub	local04, #1
08e70     03 24 66 F0 | 	shl	local04, #3
08e74     35 00 00 FF 
08e78     0C E4 05 F1 | 	add	objptr, ##27148
08e7c     F2 24 02 F1 | 	add	local04, objptr
08e80     12 13 02 FB | 	rdlong	arg01, local04
08e84     84 01 00 FF 
08e88     10 15 06 F6 | 	mov	arg02, ##@LR__5412
08e8c     35 00 00 FF 
08e90     0C E4 85 F1 | 	sub	objptr, ##27148
08e94     2C 7C B1 FD | 	call	#__system___string_cmp
08e98     00 FA 0D F2 | 	cmp	result1, #0 wz
08e9c     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08ea0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08ea4                 | '   if m>3 then printerror(45): return(45)
08ea4     04 32 56 F2 | 	cmps	local11, #4 wc
08ea8     10 00 90 CD |  if_b	jmp	#LR__0809
08eac     2D 12 06 F6 | 	mov	arg01, #45
08eb0     50 46 B1 FD | 	call	#_printerror
08eb4     2D FA 05 F6 | 	mov	result1, #45
08eb8     34 03 90 FD | 	jmp	#LR__0826
08ebc                 | LR__0809
08ebc     00 39 06 F6 | 	mov	local14, #256
08ec0     0C 3A 06 F6 | 	mov	local15, #12
08ec4                 | LR__0810
08ec4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
08ec4                 | '   arraytype=array_no_type : esize=12
08ec4                 | ' 1350 
08ec4                 | '   if lparts(l).part$="as" then
08ec4     18 25 02 F6 | 	mov	local04, local10
08ec8     03 24 66 F0 | 	shl	local04, #3
08ecc     35 00 00 FF 
08ed0     0C E4 05 F1 | 	add	objptr, ##27148
08ed4     F2 24 02 F1 | 	add	local04, objptr
08ed8     12 13 02 FB | 	rdlong	arg01, local04
08edc     84 01 00 FF 
08ee0     12 15 06 F6 | 	mov	arg02, ##@LR__5413
08ee4     35 00 00 FF 
08ee8     0C E4 85 F1 | 	sub	objptr, ##27148
08eec     D4 7B B1 FD | 	call	#__system___string_cmp
08ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ef4     F8 01 90 5D |  if_ne	jmp	#LR__0825
08ef8                 | '     select case lparts(l+1).part$
08ef8     18 35 02 F6 | 	mov	local12, local10
08efc     01 34 06 F1 | 	add	local12, #1
08f00     03 34 66 F0 | 	shl	local12, #3
08f04     35 00 00 FF 
08f08     0C E4 05 F1 | 	add	objptr, ##27148
08f0c     F2 34 02 F1 | 	add	local12, objptr
08f10     1A 3D 02 FB | 	rdlong	local16, local12
08f14     84 01 00 FF 
08f18     15 15 06 F6 | 	mov	arg02, ##@LR__5414
08f1c     1E 13 02 F6 | 	mov	arg01, local16
08f20     35 00 00 FF 
08f24     0C E4 85 F1 | 	sub	objptr, ##27148
08f28     98 7B B1 FD | 	call	#__system___string_cmp
08f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f30     0C 01 90 AD |  if_e	jmp	#LR__0811
08f34     84 01 00 FF 
08f38     1A 15 06 F6 | 	mov	arg02, ##@LR__5415
08f3c     1E 13 02 F6 | 	mov	arg01, local16
08f40     80 7B B1 FD | 	call	#__system___string_cmp
08f44     00 FA 0D F2 | 	cmp	result1, #0 wz
08f48     00 01 90 AD |  if_e	jmp	#LR__0812
08f4c     84 01 00 FF 
08f50     20 15 06 F6 | 	mov	arg02, ##@LR__5416
08f54     1E 13 02 F6 | 	mov	arg01, local16
08f58     68 7B B1 FD | 	call	#__system___string_cmp
08f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f60     F4 00 90 AD |  if_e	jmp	#LR__0813
08f64     84 01 00 FF 
08f68     26 15 06 F6 | 	mov	arg02, ##@LR__5417
08f6c     1E 13 02 F6 | 	mov	arg01, local16
08f70     50 7B B1 FD | 	call	#__system___string_cmp
08f74     00 FA 0D F2 | 	cmp	result1, #0 wz
08f78     E8 00 90 AD |  if_e	jmp	#LR__0814
08f7c     84 01 00 FF 
08f80     2D 15 06 F6 | 	mov	arg02, ##@LR__5418
08f84     1E 13 02 F6 | 	mov	arg01, local16
08f88     38 7B B1 FD | 	call	#__system___string_cmp
08f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f90     DC 00 90 AD |  if_e	jmp	#LR__0815
08f94     84 01 00 FF 
08f98     32 15 06 F6 | 	mov	arg02, ##@LR__5419
08f9c     1E 13 02 F6 | 	mov	arg01, local16
08fa0     20 7B B1 FD | 	call	#__system___string_cmp
08fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
08fa8     D0 00 90 AD |  if_e	jmp	#LR__0816
08fac     84 01 00 FF 
08fb0     3A 15 06 F6 | 	mov	arg02, ##@LR__5420
08fb4     1E 13 02 F6 | 	mov	arg01, local16
08fb8     08 7B B1 FD | 	call	#__system___string_cmp
08fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
08fc0     C4 00 90 AD |  if_e	jmp	#LR__0817
08fc4     84 01 00 FF 
08fc8     40 15 06 F6 | 	mov	arg02, ##@LR__5421
08fcc     1E 13 02 F6 | 	mov	arg01, local16
08fd0     F0 7A B1 FD | 	call	#__system___string_cmp
08fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
08fd8     B8 00 90 AD |  if_e	jmp	#LR__0818
08fdc     84 01 00 FF 
08fe0     46 15 06 F6 | 	mov	arg02, ##@LR__5422
08fe4     1E 13 02 F6 | 	mov	arg01, local16
08fe8     D8 7A B1 FD | 	call	#__system___string_cmp
08fec     00 FA 0D F2 | 	cmp	result1, #0 wz
08ff0     AC 00 90 AD |  if_e	jmp	#LR__0819
08ff4     84 01 00 FF 
08ff8     4D 15 06 F6 | 	mov	arg02, ##@LR__5423
08ffc     1E 13 02 F6 | 	mov	arg01, local16
09000     C0 7A B1 FD | 	call	#__system___string_cmp
09004     00 FA 0D F2 | 	cmp	result1, #0 wz
09008     A0 00 90 AD |  if_e	jmp	#LR__0820
0900c     84 01 00 FF 
09010     54 15 06 F6 | 	mov	arg02, ##@LR__5424
09014     1E 13 02 F6 | 	mov	arg01, local16
09018     A8 7A B1 FD | 	call	#__system___string_cmp
0901c     00 FA 0D F2 | 	cmp	result1, #0 wz
09020     94 00 90 AD |  if_e	jmp	#LR__0821
09024     84 01 00 FF 
09028     5B 15 06 F6 | 	mov	arg02, ##@LR__5425
0902c     1E 13 02 F6 | 	mov	arg01, local16
09030     90 7A B1 FD | 	call	#__system___string_cmp
09034     00 FA 0D F2 | 	cmp	result1, #0 wz
09038     88 00 90 AD |  if_e	jmp	#LR__0822
0903c     90 00 90 FD | 	jmp	#LR__0823
09040                 | LR__0811
09040     01 39 06 F6 | 	mov	local14, #257
09044     01 3A 06 F6 | 	mov	local15, #1
09048     A4 00 90 FD | 	jmp	#LR__0825
0904c                 | LR__0812
0904c     02 39 06 F6 | 	mov	local14, #258
09050     01 3A 06 F6 | 	mov	local15, #1
09054     98 00 90 FD | 	jmp	#LR__0825
09058                 | LR__0813
09058     03 39 06 F6 | 	mov	local14, #259
0905c     02 3A 06 F6 | 	mov	local15, #2
09060     8C 00 90 FD | 	jmp	#LR__0825
09064                 | LR__0814
09064     04 39 06 F6 | 	mov	local14, #260
09068     02 3A 06 F6 | 	mov	local15, #2
0906c     80 00 90 FD | 	jmp	#LR__0825
09070                 | LR__0815
09070     05 39 06 F6 | 	mov	local14, #261
09074     04 3A 06 F6 | 	mov	local15, #4
09078     74 00 90 FD | 	jmp	#LR__0825
0907c                 | LR__0816
0907c     05 39 06 F6 | 	mov	local14, #261
09080     04 3A 06 F6 | 	mov	local15, #4
09084     68 00 90 FD | 	jmp	#LR__0825
09088                 | LR__0817
09088     06 39 06 F6 | 	mov	local14, #262
0908c     04 3A 06 F6 | 	mov	local15, #4
09090     5C 00 90 FD | 	jmp	#LR__0825
09094                 | LR__0818
09094     07 39 06 F6 | 	mov	local14, #263
09098     08 3A 06 F6 | 	mov	local15, #8
0909c     50 00 90 FD | 	jmp	#LR__0825
090a0                 | LR__0819
090a0     08 39 06 F6 | 	mov	local14, #264
090a4     08 3A 06 F6 | 	mov	local15, #8
090a8     44 00 90 FD | 	jmp	#LR__0825
090ac                 | LR__0820
090ac     09 39 06 F6 | 	mov	local14, #265
090b0     04 3A 06 F6 | 	mov	local15, #4
090b4     38 00 90 FD | 	jmp	#LR__0825
090b8                 | LR__0821
090b8     0A 39 06 F6 | 	mov	local14, #266
090bc     08 3A 06 F6 | 	mov	local15, #8
090c0     2C 00 90 FD | 	jmp	#LR__0825
090c4                 | LR__0822
090c4     0B 39 06 F6 | 	mov	local14, #267
090c8     04 3A 06 F6 | 	mov	local15, #4
090cc     20 00 90 FD | 	jmp	#LR__0825
090d0                 | LR__0823
090d0     2F 12 06 F6 | 	mov	arg01, #47
090d4     2C 44 B1 FD | 	call	#_printerror
090d8     2F FA 05 F6 | 	mov	result1, #47
090dc     10 01 90 FD | 	jmp	#LR__0826
090e0                 | LR__0824
090e0     2E 12 06 F6 | 	mov	arg01, #46
090e4     1C 44 B1 FD | 	call	#_printerror
090e8                 | '   printerror(46): return 46
090e8     2E FA 05 F6 | 	mov	result1, #46
090ec     00 01 90 FD | 	jmp	#LR__0826
090f0                 | LR__0825
090f0     0F 3B 02 FD | 	qmul	local15, local01
090f4     18 2A 62 FD | 	getqx	local07
090f8     10 2B 02 FD | 	qmul	local07, local02
090fc     18 3C 62 FD | 	getqx	local16
09100     11 3D 02 FD | 	qmul	local16, local03
09104     51 00 00 FF 
09108     A8 E5 05 F1 | 	add	objptr, ##41896
0910c     F2 3E 02 FB | 	rdlong	local17, objptr
09110     1C 15 02 F6 | 	mov	arg02, local14
09114     18 3C 62 FD | 	getqx	local16
09118     1E 3F 82 F1 | 	sub	local17, local16
0911c     10 3E 86 F1 | 	sub	local17, #16
09120     0F 3E 26 F5 | 	andn	local17, #15
09124     F2 3E 62 FC | 	wrlong	local17, objptr
09128     51 00 00 FF 
0912c     A8 E5 85 F1 | 	sub	objptr, ##41896
09130     1F 13 02 F6 | 	mov	arg01, local17
09134     78 45 B1 FD | 	call	#_psdpoke
09138     1F 13 02 F6 | 	mov	arg01, local17
0913c     02 12 06 F1 | 	add	arg01, #2
09140     1D 15 02 F6 | 	mov	arg02, local15
09144     68 45 B1 FD | 	call	#_psdpoke
09148     1F 13 02 F6 | 	mov	arg01, local17
0914c     04 12 06 F1 | 	add	arg01, #4
09150     0F 15 02 F6 | 	mov	arg02, local01
09154     10 45 B1 FD | 	call	#_pslpoke
09158     1F 13 02 F6 | 	mov	arg01, local17
0915c     08 12 06 F1 | 	add	arg01, #8
09160     10 15 02 F6 | 	mov	arg02, local02
09164     00 45 B1 FD | 	call	#_pslpoke
09168     1F 13 02 F6 | 	mov	arg01, local17
0916c     0C 12 06 F1 | 	add	arg01, #12
09170     11 15 02 F6 | 	mov	arg02, local03
09174     F0 44 B1 FD | 	call	#_pslpoke
09178     14 35 02 F6 | 	mov	local12, local06
0917c     04 34 66 F0 | 	shl	local12, #4
09180     14 00 00 FF 
09184     F8 E5 05 F1 | 	add	objptr, ##10744
09188     F2 34 02 F1 | 	add	local12, objptr
0918c     1A 27 62 FC | 	wrlong	local05, local12
09190     14 35 02 F6 | 	mov	local12, local06
09194     04 34 66 F0 | 	shl	local12, #4
09198     F2 34 02 F1 | 	add	local12, objptr
0919c     04 34 06 F1 | 	add	local12, #4
091a0     1A 3F 62 FC | 	wrlong	local17, local12
091a4     14 35 02 F6 | 	mov	local12, local06
091a8     04 34 66 F0 | 	shl	local12, #4
091ac     F2 34 02 F1 | 	add	local12, objptr
091b0     0C 34 06 F1 | 	add	local12, #12
091b4     1A 39 62 FC | 	wrlong	local14, local12
091b8                 | ' memtop=arrayptr
091b8                 | ' 
091b8                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
091b8                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
091b8                 | ' pslpoke arrayptr+4,dims(0)
091b8                 | ' pslpoke arrayptr+8,dims(1)
091b8                 | ' pslpoke arrayptr+12,dims(2)
091b8                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
091b8                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
091b8                 | ' 
091b8                 | ' 
091b8                 | ' variables(j).name=varname2$
091b8                 | ' variables(j).value.uresult=arrayptr
091b8                 | ' variables(j).vartype=arraytype
091b8                 | ' if j=varnum then varnum+=1
091b8     20 00 00 FF 
091bc     10 E4 05 F1 | 	add	objptr, ##16400
091c0     F2 2A 02 FB | 	rdlong	local07, objptr
091c4     35 00 00 FF 
091c8     08 E4 85 F1 | 	sub	objptr, ##27144
091cc     15 29 0A F2 | 	cmp	local06, local07 wz
091d0     35 00 00 AF 
091d4     08 E4 05 A1 |  if_e	add	objptr, ##27144
091d8     F2 2A 02 AB |  if_e	rdlong	local07, objptr
091dc     01 2A 06 A1 |  if_e	add	local07, #1
091e0     F2 2A 62 AC |  if_e	wrlong	local07, objptr
091e4     35 00 00 AF 
091e8     08 E4 85 A1 |  if_e	sub	objptr, ##27144
091ec                 | ' 
091ec                 | ' return 0
091ec     00 FA 05 F6 | 	mov	result1, #0
091f0                 | LR__0826
091f0     A7 F0 03 F6 | 	mov	ptra, fp
091f4     B2 00 A0 FD | 	call	#popregs_
091f8                 | _compile_dim_ret
091f8     2D 00 64 FD | 	ret
091fc                 | 
091fc                 | ' 
091fc                 | ' 
091fc                 | ' function compile_for() as ulong  
091fc                 | _compile_for
091fc     07 4A 05 F6 | 	mov	COUNT_, #7
09200     A8 00 A0 FD | 	call	#pushregs_
09204                 | ' 
09204                 | ' 
09204                 | ' 
09204                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
09204     37 00 00 FF 
09208     44 E4 05 F1 | 	add	objptr, ##28228
0920c     F2 14 02 FB | 	rdlong	arg02, objptr
09210     01 14 06 F1 | 	add	arg02, #1
09214     03 14 66 F0 | 	shl	arg02, #3
09218     02 00 00 FF 
0921c     38 E4 85 F1 | 	sub	objptr, ##1080
09220     F2 14 02 F1 | 	add	arg02, objptr
09224     0A 13 02 FB | 	rdlong	arg01, arg02
09228     35 00 00 FF 
0922c     0C E4 85 F1 | 	sub	objptr, ##27148
09230                 | ' 
09230                 | ' select case s
09230     82 01 00 FF 
09234     C6 14 06 F6 | 	mov	arg02, ##@LR__5173
09238     88 78 B1 FD | 	call	#__system___string_cmp
0923c     00 FA 0D F2 | 	cmp	result1, #0 wz
09240     1B FA 05 A6 |  if_e	mov	result1, #27
09244     00 FA 05 56 |  if_ne	mov	result1, #0
09248     00 FA 0D F2 | 	cmp	result1, #0 wz
0924c     0C 00 90 AD |  if_e	jmp	#LR__0830
09250     05 12 06 F6 | 	mov	arg01, #5
09254     F4 E4 BF FD | 	call	#_compile_immediate_assign
09258     10 00 90 FD | 	jmp	#LR__0831
0925c                 | LR__0830
0925c     20 12 06 F6 | 	mov	arg01, #32
09260     48 E9 BF FD | 	call	#_compile_error
09264     20 FA 05 F6 | 	mov	result1, #32
09268     E8 02 90 FD | 	jmp	#LR__0837
0926c                 | LR__0831
0926c     4A 00 00 FF 
09270     7C E4 05 F1 | 	add	objptr, ##38012
09274     F2 12 02 FB | 	rdlong	arg01, objptr
09278     09 25 02 F6 | 	mov	local04, arg01
0927c     01 24 86 F1 | 	sub	local04, #1
09280     12 15 02 F6 | 	mov	arg02, local04
09284     01 14 66 F0 | 	shl	arg02, #1
09288     12 15 02 F1 | 	add	arg02, local04
0928c     02 14 66 F0 | 	shl	arg02, #2
09290     03 00 00 FF 
09294     00 E4 85 F1 | 	sub	objptr, ##1536
09298     F2 14 02 F1 | 	add	arg02, objptr
0929c     0A 1F 02 FB | 	rdlong	local01, arg02
092a0     04 14 06 F1 | 	add	arg02, #4
092a4     0A 27 02 FB | 	rdlong	local05, arg02
092a8     01 12 86 F1 | 	sub	arg01, #1
092ac     09 29 02 F6 | 	mov	local06, arg01
092b0     01 28 66 F0 | 	shl	local06, #1
092b4     09 29 02 F1 | 	add	local06, arg01
092b8     02 28 66 F0 | 	shl	local06, #2
092bc     F2 28 02 F1 | 	add	local06, objptr
092c0     08 28 06 F1 | 	add	local06, #8
092c4     14 13 02 FB | 	rdlong	arg01, local06
092c8     13 21 02 F6 | 	mov	local02, local05
092cc     09 23 02 F6 | 	mov	local03, arg01
092d0                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
092d0                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
092d0     17 22 0E F2 | 	cmp	local03, #23 wz
092d4     47 00 00 FF 
092d8     7C E4 85 F1 | 	sub	objptr, ##36476
092dc     10 00 90 AD |  if_e	jmp	#LR__0832
092e0     22 12 06 F6 | 	mov	arg01, #34
092e4     C4 E8 BF FD | 	call	#_compile_error
092e8     22 FA 05 F6 | 	mov	result1, #34
092ec     64 02 90 FD | 	jmp	#LR__0837
092f0                 | LR__0832
092f0     0F 2B 02 F6 | 	mov	local07, local01
092f4                 | ' varnum=t1.result.uresult
092f4                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
092f4     37 00 00 FF 
092f8     44 E4 05 F1 | 	add	objptr, ##28228
092fc     F2 24 02 FB | 	rdlong	local04, objptr
09300     03 24 66 F0 | 	shl	local04, #3
09304     02 00 00 FF 
09308     38 E4 85 F1 | 	sub	objptr, ##1080
0930c     F2 24 02 F1 | 	add	local04, objptr
09310     12 13 02 FB | 	rdlong	arg01, local04
09314     84 01 00 FF 
09318     62 15 06 F6 | 	mov	arg02, ##@LR__5426
0931c     35 00 00 FF 
09320     0C E4 85 F1 | 	sub	objptr, ##27148
09324     9C 77 B1 FD | 	call	#__system___string_cmp
09328     00 FA 0D F2 | 	cmp	result1, #0 wz
0932c     10 00 90 AD |  if_e	jmp	#LR__0833
09330     21 12 06 F6 | 	mov	arg01, #33
09334     74 E8 BF FD | 	call	#_compile_error
09338     21 FA 05 F6 | 	mov	result1, #33
0933c     14 02 90 FD | 	jmp	#LR__0837
09340                 | LR__0833
09340     37 00 00 FF 
09344     44 E4 05 F1 | 	add	objptr, ##28228
09348     F2 24 02 FB | 	rdlong	local04, objptr
0934c     01 24 06 F1 | 	add	local04, #1
09350     F2 24 62 FC | 	wrlong	local04, objptr
09354     37 00 00 FF 
09358     44 E4 85 F1 | 	sub	objptr, ##28228
0935c     38 10 B0 FD | 	call	#_expr
09360                 | ' ct+=1
09360                 | ' expr()  ' there is "to" value pushed on the stack
09360                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09360     37 00 00 FF 
09364     44 E4 05 F1 | 	add	objptr, ##28228
09368     F2 24 02 FB | 	rdlong	local04, objptr
0936c     03 24 66 F0 | 	shl	local04, #3
09370     02 00 00 FF 
09374     38 E4 85 F1 | 	sub	objptr, ##1080
09378     F2 24 02 F1 | 	add	local04, objptr
0937c     12 13 02 FB | 	rdlong	arg01, local04
09380     84 01 00 FF 
09384     65 15 06 F6 | 	mov	arg02, ##@LR__5427
09388     35 00 00 FF 
0938c     0C E4 85 F1 | 	sub	objptr, ##27148
09390     30 77 B1 FD | 	call	#__system___string_cmp
09394     00 FA 0D F2 | 	cmp	result1, #0 wz
09398     3C 00 90 AD |  if_e	jmp	#LR__0834
0939c     37 00 00 FF 
093a0     44 E4 05 F1 | 	add	objptr, ##28228
093a4     F2 28 02 FB | 	rdlong	local06, objptr
093a8     03 28 66 F0 | 	shl	local06, #3
093ac     02 00 00 FF 
093b0     38 E4 85 F1 | 	sub	objptr, ##1080
093b4     F2 28 02 F1 | 	add	local06, objptr
093b8     14 13 02 FB | 	rdlong	arg01, local06
093bc     84 01 00 FF 
093c0     6A 15 06 F6 | 	mov	arg02, ##@LR__5428
093c4     35 00 00 FF 
093c8     0C E4 85 F1 | 	sub	objptr, ##27148
093cc     F4 76 B1 FD | 	call	#__system___string_cmp
093d0     00 FA 0D F2 | 	cmp	result1, #0 wz
093d4     24 00 90 5D |  if_ne	jmp	#LR__0835
093d8                 | LR__0834
093d8     37 00 00 FF 
093dc     44 E4 05 F1 | 	add	objptr, ##28228
093e0     F2 28 02 FB | 	rdlong	local06, objptr
093e4     01 28 06 F1 | 	add	local06, #1
093e8     F2 28 62 FC | 	wrlong	local06, objptr
093ec     37 00 00 FF 
093f0     44 E4 85 F1 | 	sub	objptr, ##28228
093f4     A0 0F B0 FD | 	call	#_expr
093f8     78 00 90 FD | 	jmp	#LR__0836
093fc                 | LR__0835
093fc     4A 00 00 FF 
09400     7C E4 05 F1 | 	add	objptr, ##38012
09404     F2 28 02 FB | 	rdlong	local06, objptr
09408     14 27 02 F6 | 	mov	local05, local06
0940c     01 26 66 F0 | 	shl	local05, #1
09410     14 27 02 F1 | 	add	local05, local06
09414     02 26 66 F0 | 	shl	local05, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 26 02 F1 | 	add	local05, objptr
09424     08 26 06 F1 | 	add	local05, #8
09428     13 39 68 FC | 	wrlong	#28, local05
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 28 02 FB | 	rdlong	local06, objptr
09438     14 27 02 F6 | 	mov	local05, local06
0943c     01 26 66 F0 | 	shl	local05, #1
09440     14 27 02 F1 | 	add	local05, local06
09444     02 26 66 F0 | 	shl	local05, #2
09448     03 00 00 FF 
0944c     00 E4 85 F1 | 	sub	objptr, ##1536
09450     F2 26 02 F1 | 	add	local05, objptr
09454     13 03 68 FC | 	wrlong	#1, local05
09458     03 00 00 FF 
0945c     00 E4 05 F1 | 	add	objptr, ##1536
09460     F2 28 02 FB | 	rdlong	local06, objptr
09464     01 28 06 F1 | 	add	local06, #1
09468     F2 28 62 FC | 	wrlong	local06, objptr
0946c     4A 00 00 FF 
09470     7C E4 85 F1 | 	sub	objptr, ##38012
09474                 | LR__0836
09474     4A 00 00 FF 
09478     7C E4 05 F1 | 	add	objptr, ##38012
0947c     F2 28 02 FB | 	rdlong	local06, objptr
09480     14 27 02 F6 | 	mov	local05, local06
09484     01 26 66 F0 | 	shl	local05, #1
09488     14 27 02 F1 | 	add	local05, local06
0948c     02 26 66 F0 | 	shl	local05, #2
09490     03 00 00 FF 
09494     00 E4 85 F1 | 	sub	objptr, ##1536
09498     F2 26 02 F1 | 	add	local05, objptr
0949c     08 26 06 F1 | 	add	local05, #8
094a0     13 39 68 FC | 	wrlong	#28, local05
094a4     03 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##1536
094ac     F2 28 02 FB | 	rdlong	local06, objptr
094b0     14 27 02 F6 | 	mov	local05, local06
094b4     01 26 66 F0 | 	shl	local05, #1
094b8     14 27 02 F1 | 	add	local05, local06
094bc     02 26 66 F0 | 	shl	local05, #2
094c0     03 00 00 FF 
094c4     00 E4 85 F1 | 	sub	objptr, ##1536
094c8     F2 26 02 F1 | 	add	local05, objptr
094cc     13 2B 62 FC | 	wrlong	local07, local05
094d0     03 00 00 FF 
094d4     00 E4 05 F1 | 	add	objptr, ##1536
094d8     F2 2A 02 FB | 	rdlong	local07, objptr
094dc     01 2A 06 F1 | 	add	local07, #1
094e0     F2 2A 62 FC | 	wrlong	local07, objptr
094e4     15 29 02 F6 | 	mov	local06, local07
094e8     01 28 66 F0 | 	shl	local06, #1
094ec     15 29 02 F1 | 	add	local06, local07
094f0     02 28 66 F0 | 	shl	local06, #2
094f4     03 00 00 FF 
094f8     00 E4 85 F1 | 	sub	objptr, ##1536
094fc     F2 28 02 F1 | 	add	local06, objptr
09500     08 28 06 F1 | 	add	local06, #8
09504     14 95 68 FC | 	wrlong	#74, local06
09508     03 00 00 FF 
0950c     00 E4 05 F1 | 	add	objptr, ##1536
09510     F2 2A 02 FB | 	rdlong	local07, objptr
09514     15 29 02 F6 | 	mov	local06, local07
09518     01 28 66 F0 | 	shl	local06, #1
0951c     15 29 02 F1 | 	add	local06, local07
09520     02 28 66 F0 | 	shl	local06, #2
09524     03 00 00 FF 
09528     00 E4 85 F1 | 	sub	objptr, ##1536
0952c     F2 28 02 F1 | 	add	local06, objptr
09530     14 01 68 FC | 	wrlong	#0, local06
09534     03 00 00 FF 
09538     00 E4 05 F1 | 	add	objptr, ##1536
0953c     F2 2A 02 FB | 	rdlong	local07, objptr
09540     01 2A 06 F1 | 	add	local07, #1
09544     F2 2A 62 FC | 	wrlong	local07, objptr
09548     4A 00 00 FF 
0954c     7C E4 85 F1 | 	sub	objptr, ##38012
09550                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09550                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09550                 | ' 
09550                 | ' 
09550                 | ' return 0
09550     00 FA 05 F6 | 	mov	result1, #0
09554                 | LR__0837
09554     A7 F0 03 F6 | 	mov	ptra, fp
09558     B2 00 A0 FD | 	call	#popregs_
0955c                 | _compile_for_ret
0955c     2D 00 64 FD | 	ret
09560                 | 
09560                 | ' 
09560                 | ' 
09560                 | ' sub do_gosub()
09560                 | _do_gosub
09560     50 00 00 FF 
09564     08 E5 05 F1 | 	add	objptr, ##41224
09568     F2 00 02 FB | 	rdlong	_var01, objptr
0956c     01 00 06 F1 | 	add	_var01, #1
09570     F2 00 62 FC | 	wrlong	_var01, objptr
09574                 | ' gosubtop+=1
09574                 | ' if compiledline(lineptr_e+1).result_type=token_end then
09574     06 00 00 FF 
09578     88 E4 85 F1 | 	sub	objptr, ##3208
0957c     F2 00 02 FB | 	rdlong	_var01, objptr
09580     01 00 06 F1 | 	add	_var01, #1
09584     00 03 02 F6 | 	mov	_var02, _var01
09588     01 02 66 F0 | 	shl	_var02, #1
0958c     00 03 02 F1 | 	add	_var02, _var01
09590     02 02 66 F0 | 	shl	_var02, #2
09594     03 00 00 FF 
09598     04 E4 85 F1 | 	sub	objptr, ##1540
0959c     F2 02 02 F1 | 	add	_var02, objptr
095a0     08 02 06 F1 | 	add	_var02, #8
095a4     01 03 02 FB | 	rdlong	_var02, _var02
095a8     FE 03 0E F2 | 	cmp	_var02, #510 wz
095ac     47 00 00 FF 
095b0     7C E4 85 F1 | 	sub	objptr, ##36476
095b4     58 00 90 5D |  if_ne	jmp	#LR__0840
095b8     50 00 00 FF 
095bc     08 E5 05 F1 | 	add	objptr, ##41224
095c0     F2 02 02 FB | 	rdlong	_var02, objptr
095c4     03 02 66 F0 | 	shl	_var02, #3
095c8     03 00 00 FF 
095cc     60 E5 85 F1 | 	sub	objptr, ##1888
095d0     F2 02 02 F1 | 	add	_var02, objptr
095d4     03 00 00 FF 
095d8     0C E5 05 F1 | 	add	objptr, ##1804
095dc     F2 00 02 FB | 	rdlong	_var01, objptr
095e0     01 01 62 FC | 	wrlong	_var01, _var02
095e4     54 E4 05 F1 | 	add	objptr, #84
095e8     F2 02 02 FB | 	rdlong	_var02, objptr
095ec     03 02 66 F0 | 	shl	_var02, #3
095f0     03 00 00 FF 
095f4     60 E5 85 F1 | 	sub	objptr, ##1888
095f8     F2 02 02 F1 | 	add	_var02, objptr
095fc     04 02 06 F1 | 	add	_var02, #4
09600     01 01 68 FC | 	wrlong	#0, _var02
09604     4C 00 00 FF 
09608     A8 E5 85 F1 | 	sub	objptr, ##39336
0960c     64 00 90 FD | 	jmp	#LR__0841
09610                 | LR__0840
09610     50 00 00 FF 
09614     08 E5 05 F1 | 	add	objptr, ##41224
09618     F2 02 02 FB | 	rdlong	_var02, objptr
0961c     03 02 66 F0 | 	shl	_var02, #3
09620     03 00 00 FF 
09624     60 E5 85 F1 | 	sub	objptr, ##1888
09628     F2 02 02 F1 | 	add	_var02, objptr
0962c     03 00 00 FF 
09630     14 E5 05 F1 | 	add	objptr, ##1812
09634     F2 00 02 FB | 	rdlong	_var01, objptr
09638     01 01 62 FC | 	wrlong	_var01, _var02
0963c     4C E4 05 F1 | 	add	objptr, #76
09640     F2 02 02 FB | 	rdlong	_var02, objptr
09644     03 02 66 F0 | 	shl	_var02, #3
09648     03 00 00 FF 
0964c     60 E5 85 F1 | 	sub	objptr, ##1888
09650     F2 02 02 F1 | 	add	_var02, objptr
09654     02 00 00 FF 
09658     28 E5 85 F1 | 	sub	objptr, ##1320
0965c     F2 00 02 FB | 	rdlong	_var01, objptr
09660     4A 00 00 FF 
09664     80 E4 85 F1 | 	sub	objptr, ##38016
09668     02 00 06 F1 | 	add	_var01, #2
0966c     04 02 06 F1 | 	add	_var02, #4
09670     01 01 62 FC | 	wrlong	_var01, _var02
09674                 | LR__0841
09674                 | _do_gosub_ret
09674     2D 00 64 FD | 	ret
09678                 | 
09678                 | ' 
09678                 | ' 
09678                 | ' sub do_for()
09678                 | _do_for
09678     01 4A 05 F6 | 	mov	COUNT_, #1
0967c     A8 00 A0 FD | 	call	#pushregs_
09680     10 F0 07 F1 | 	add	ptra, #16
09684     50 00 00 FF 
09688     04 E5 05 F1 | 	add	objptr, ##41220
0968c     F2 12 02 FB | 	rdlong	arg01, objptr
09690     01 12 06 F1 | 	add	arg01, #1
09694     F2 12 62 FC | 	wrlong	arg01, objptr
09698     50 00 00 FF 
0969c     04 E5 85 F1 | 	sub	objptr, ##41220
096a0     40 24 B0 FD | 	call	#_pop
096a4     A7 FA 61 FC | 	wrlong	result1, fp
096a8     04 4E 05 F1 | 	add	fp, #4
096ac     A7 FC 61 FC | 	wrlong	result2, fp
096b0     04 4E 05 F1 | 	add	fp, #4
096b4     A7 FE 61 FC | 	wrlong	result3, fp
096b8     08 4E 85 F1 | 	sub	fp, #8
096bc     50 00 00 FF 
096c0     04 E5 05 F1 | 	add	objptr, ##41220
096c4     F2 12 02 FB | 	rdlong	arg01, objptr
096c8     09 1F 02 F6 | 	mov	local01, arg01
096cc     02 1E 66 F0 | 	shl	local01, #2
096d0     09 1F 02 F1 | 	add	local01, arg01
096d4     02 1E 66 F0 | 	shl	local01, #2
096d8     06 00 00 FF 
096dc     70 E4 85 F1 | 	sub	objptr, ##3184
096e0     F2 1E 02 F1 | 	add	local01, objptr
096e4     A7 12 02 FB | 	rdlong	arg01, fp
096e8     08 1E 06 F1 | 	add	local01, #8
096ec     0F 13 62 FC | 	wrlong	arg01, local01
096f0     4A 00 00 FF 
096f4     94 E4 85 F1 | 	sub	objptr, ##38036
096f8     E8 23 B0 FD | 	call	#_pop
096fc     A7 FA 61 FC | 	wrlong	result1, fp
09700     04 4E 05 F1 | 	add	fp, #4
09704     A7 FC 61 FC | 	wrlong	result2, fp
09708     04 4E 05 F1 | 	add	fp, #4
0970c     A7 FE 61 FC | 	wrlong	result3, fp
09710     08 4E 85 F1 | 	sub	fp, #8
09714     50 00 00 FF 
09718     04 E5 05 F1 | 	add	objptr, ##41220
0971c     F2 12 02 FB | 	rdlong	arg01, objptr
09720     09 1F 02 F6 | 	mov	local01, arg01
09724     02 1E 66 F0 | 	shl	local01, #2
09728     09 1F 02 F1 | 	add	local01, arg01
0972c     02 1E 66 F0 | 	shl	local01, #2
09730     06 00 00 FF 
09734     70 E4 85 F1 | 	sub	objptr, ##3184
09738     F2 1E 02 F1 | 	add	local01, objptr
0973c     A7 12 02 F6 | 	mov	arg01, fp
09740     4A 00 00 FF 
09744     94 E4 85 F1 | 	sub	objptr, ##38036
09748     5C C4 B0 FD | 	call	#_converttoint
0974c     FD 12 02 F6 | 	mov	arg01, result1
09750     0C 1E 06 F1 | 	add	local01, #12
09754     0F 13 62 FC | 	wrlong	arg01, local01
09758     88 23 B0 FD | 	call	#_pop
0975c     A7 FA 61 FC | 	wrlong	result1, fp
09760     04 4E 05 F1 | 	add	fp, #4
09764     A7 FC 61 FC | 	wrlong	result2, fp
09768     04 4E 05 F1 | 	add	fp, #4
0976c     A7 FE 61 FC | 	wrlong	result3, fp
09770     08 4E 85 F1 | 	sub	fp, #8
09774     50 00 00 FF 
09778     04 E5 05 F1 | 	add	objptr, ##41220
0977c     F2 12 02 FB | 	rdlong	arg01, objptr
09780     09 1F 02 F6 | 	mov	local01, arg01
09784     02 1E 66 F0 | 	shl	local01, #2
09788     09 1F 02 F1 | 	add	local01, arg01
0978c     02 1E 66 F0 | 	shl	local01, #2
09790     06 00 00 FF 
09794     70 E4 85 F1 | 	sub	objptr, ##3184
09798     F2 1E 02 F1 | 	add	local01, objptr
0979c     A7 12 02 F6 | 	mov	arg01, fp
097a0     4A 00 00 FF 
097a4     94 E4 85 F1 | 	sub	objptr, ##38036
097a8     FC C3 B0 FD | 	call	#_converttoint
097ac     10 1E 06 F1 | 	add	local01, #16
097b0     0F FB 61 FC | 	wrlong	result1, local01
097b4                 | ' fortop+=1
097b4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
097b4                 | ' 'if i> maxfor then printerror(36) : return
097b4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
097b4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
097b4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
097b4                 | ' if compiledline(lineptr_e).result_type=token_end then
097b4     4A 00 00 FF 
097b8     80 E4 05 F1 | 	add	objptr, ##38016
097bc     F2 12 02 FB | 	rdlong	arg01, objptr
097c0     09 1F 02 F6 | 	mov	local01, arg01
097c4     01 1E 66 F0 | 	shl	local01, #1
097c8     09 1F 02 F1 | 	add	local01, arg01
097cc     02 1E 66 F0 | 	shl	local01, #2
097d0     03 00 00 FF 
097d4     04 E4 85 F1 | 	sub	objptr, ##1540
097d8     F2 1E 02 F1 | 	add	local01, objptr
097dc     08 1E 06 F1 | 	add	local01, #8
097e0     0F 1F 02 FB | 	rdlong	local01, local01
097e4     FE 1F 0E F2 | 	cmp	local01, #510 wz
097e8     47 00 00 FF 
097ec     7C E4 85 F1 | 	sub	objptr, ##36476
097f0     70 00 90 5D |  if_ne	jmp	#LR__0850
097f4     50 00 00 FF 
097f8     04 E5 05 F1 | 	add	objptr, ##41220
097fc     F2 12 02 FB | 	rdlong	arg01, objptr
09800     09 1F 02 F6 | 	mov	local01, arg01
09804     02 1E 66 F0 | 	shl	local01, #2
09808     09 1F 02 F1 | 	add	local01, arg01
0980c     02 1E 66 F0 | 	shl	local01, #2
09810     06 00 00 FF 
09814     70 E4 85 F1 | 	sub	objptr, ##3184
09818     F2 1E 02 F1 | 	add	local01, objptr
0981c     06 00 00 FF 
09820     20 E4 05 F1 | 	add	objptr, ##3104
09824     F2 12 02 FB | 	rdlong	arg01, objptr
09828     0F 13 62 FC | 	wrlong	arg01, local01
0982c     50 E4 05 F1 | 	add	objptr, #80
09830     F2 12 02 FB | 	rdlong	arg01, objptr
09834     09 1F 02 F6 | 	mov	local01, arg01
09838     02 1E 66 F0 | 	shl	local01, #2
0983c     09 1F 02 F1 | 	add	local01, arg01
09840     02 1E 66 F0 | 	shl	local01, #2
09844     06 00 00 FF 
09848     70 E4 85 F1 | 	sub	objptr, ##3184
0984c     F2 1E 02 F1 | 	add	local01, objptr
09850     04 1E 06 F1 | 	add	local01, #4
09854     0F 01 68 FC | 	wrlong	#0, local01
09858     4A 00 00 FF 
0985c     94 E4 85 F1 | 	sub	objptr, ##38036
09860     78 00 90 FD | 	jmp	#LR__0851
09864                 | LR__0850
09864     50 00 00 FF 
09868     04 E5 05 F1 | 	add	objptr, ##41220
0986c     F2 12 02 FB | 	rdlong	arg01, objptr
09870     09 1F 02 F6 | 	mov	local01, arg01
09874     02 1E 66 F0 | 	shl	local01, #2
09878     09 1F 02 F1 | 	add	local01, arg01
0987c     02 1E 66 F0 | 	shl	local01, #2
09880     06 00 00 FF 
09884     70 E4 85 F1 | 	sub	objptr, ##3184
09888     F2 1E 02 F1 | 	add	local01, objptr
0988c     06 00 00 FF 
09890     28 E4 05 F1 | 	add	objptr, ##3112
09894     F2 12 02 FB | 	rdlong	arg01, objptr
09898     0F 13 62 FC | 	wrlong	arg01, local01
0989c     48 E4 05 F1 | 	add	objptr, #72
098a0     F2 12 02 FB | 	rdlong	arg01, objptr
098a4     09 1F 02 F6 | 	mov	local01, arg01
098a8     02 1E 66 F0 | 	shl	local01, #2
098ac     09 1F 02 F1 | 	add	local01, arg01
098b0     02 1E 66 F0 | 	shl	local01, #2
098b4     06 00 00 FF 
098b8     70 E4 85 F1 | 	sub	objptr, ##3184
098bc     F2 1E 02 F1 | 	add	local01, objptr
098c0     14 E4 85 F1 | 	sub	objptr, #20
098c4     F2 12 02 FB | 	rdlong	arg01, objptr
098c8     4A 00 00 FF 
098cc     80 E4 85 F1 | 	sub	objptr, ##38016
098d0     01 12 06 F1 | 	add	arg01, #1
098d4     04 1E 06 F1 | 	add	local01, #4
098d8     0F 13 62 FC | 	wrlong	arg01, local01
098dc                 | LR__0851
098dc     A7 F0 03 F6 | 	mov	ptra, fp
098e0     B2 00 A0 FD | 	call	#popregs_
098e4                 | _do_for_ret
098e4     2D 00 64 FD | 	ret
098e8                 | 
098e8                 | ' 
098e8                 | ' ' now do_next todo
098e8                 | ' 
098e8                 | ' sub do_return()
098e8                 | _do_return
098e8                 | ' if gosubtop>0 then
098e8     50 00 00 FF 
098ec     08 E5 05 F1 | 	add	objptr, ##41224
098f0     F2 00 02 FB | 	rdlong	_var01, objptr
098f4     50 00 00 FF 
098f8     08 E5 85 F1 | 	sub	objptr, ##41224
098fc     01 00 56 F2 | 	cmps	_var01, #1 wc
09900     8C 00 90 CD |  if_b	jmp	#LR__0860
09904     50 00 00 FF 
09908     08 E5 05 F1 | 	add	objptr, ##41224
0990c     F2 00 02 FB | 	rdlong	_var01, objptr
09910     03 00 66 F0 | 	shl	_var01, #3
09914     03 00 00 FF 
09918     60 E5 85 F1 | 	sub	objptr, ##1888
0991c     F2 00 02 F1 | 	add	_var01, objptr
09920     00 01 02 FB | 	rdlong	_var01, _var01
09924     03 00 00 FF 
09928     0C E5 05 F1 | 	add	objptr, ##1804
0992c     F2 00 62 FC | 	wrlong	_var01, objptr
09930     54 E4 05 F1 | 	add	objptr, #84
09934     F2 00 02 FB | 	rdlong	_var01, objptr
09938     03 00 66 F0 | 	shl	_var01, #3
0993c     03 00 00 FF 
09940     60 E5 85 F1 | 	sub	objptr, ##1888
09944     F2 00 02 F1 | 	add	_var01, objptr
09948     04 00 06 F1 | 	add	_var01, #4
0994c     00 01 02 FB | 	rdlong	_var01, _var01
09950     03 00 00 FF 
09954     10 E5 05 F1 | 	add	objptr, ##1808
09958     F2 00 62 FC | 	wrlong	_var01, objptr
0995c     06 00 00 FF 
09960     3C E4 85 F1 | 	sub	objptr, ##3132
09964     F2 00 02 FB | 	rdlong	_var01, objptr
09968     01 00 86 F1 | 	sub	_var01, #1
0996c     04 E4 05 F1 | 	add	objptr, #4
09970     F2 00 62 FC | 	wrlong	_var01, objptr
09974     06 00 00 FF 
09978     88 E4 05 F1 | 	add	objptr, ##3208
0997c     F2 00 02 FB | 	rdlong	_var01, objptr
09980     01 00 86 F1 | 	sub	_var01, #1
09984     F2 00 62 FC | 	wrlong	_var01, objptr
09988     50 00 00 FF 
0998c     08 E5 85 F1 | 	sub	objptr, ##41224
09990                 | LR__0860
09990                 | _do_return_ret
09990     2D 00 64 FD | 	ret
09994                 | 
09994                 | ' 
09994                 | ' sub do_pop()
09994                 | _do_pop
09994                 | ' if gosubtop>0 then  gosubtop -=1 
09994     50 00 00 FF 
09998     08 E5 05 F1 | 	add	objptr, ##41224
0999c     F2 00 02 FB | 	rdlong	_var01, objptr
099a0     50 00 00 FF 
099a4     08 E5 85 F1 | 	sub	objptr, ##41224
099a8     01 00 56 F2 | 	cmps	_var01, #1 wc
099ac     50 00 00 3F 
099b0     08 E5 05 31 |  if_ae	add	objptr, ##41224
099b4     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
099b8     01 00 86 31 |  if_ae	sub	_var01, #1
099bc     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
099c0     50 00 00 3F 
099c4     08 E5 85 31 |  if_ae	sub	objptr, ##41224
099c8                 | _do_pop_ret
099c8     2D 00 64 FD | 	ret
099cc                 | 
099cc                 | ' 
099cc                 | ' sub do_next()
099cc                 | _do_next
099cc     04 4A 05 F6 | 	mov	COUNT_, #4
099d0     A8 00 A0 FD | 	call	#pushregs_
099d4     0C 21 B0 FD | 	call	#_pop
099d8     FD 1E 02 F6 | 	mov	local01, result1
099dc     FE 20 02 F6 | 	mov	local02, result2
099e0     FF 22 02 F6 | 	mov	local03, result3
099e4                 | ' 
099e4                 | ' t1=pop() :varnum=t1.result.uresult
099e4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
099e4     50 00 00 FF 
099e8     04 E5 05 F1 | 	add	objptr, ##41220
099ec     F2 12 02 FB | 	rdlong	arg01, objptr
099f0     09 15 02 F6 | 	mov	arg02, arg01
099f4     02 14 66 F0 | 	shl	arg02, #2
099f8     09 15 02 F1 | 	add	arg02, arg01
099fc     02 14 66 F0 | 	shl	arg02, #2
09a00     06 00 00 FF 
09a04     70 E4 85 F1 | 	sub	objptr, ##3184
09a08     F2 14 02 F1 | 	add	arg02, objptr
09a0c     08 14 06 F1 | 	add	arg02, #8
09a10     0A 15 02 FB | 	rdlong	arg02, arg02
09a14     0F 15 0A F2 | 	cmp	arg02, local01 wz
09a18     4A 00 00 FF 
09a1c     94 E4 85 F1 | 	sub	objptr, ##38036
09a20     0C 00 90 AD |  if_e	jmp	#LR__0870
09a24     25 12 06 F6 | 	mov	arg01, #37
09a28     D8 3A B1 FD | 	call	#_printerror
09a2c     54 03 90 FD | 	jmp	#LR__0877
09a30                 | LR__0870
09a30                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
09a30     0F 15 02 F6 | 	mov	arg02, local01
09a34     04 14 66 F0 | 	shl	arg02, #4
09a38     14 00 00 FF 
09a3c     F8 E5 05 F1 | 	add	objptr, ##10744
09a40     F2 14 02 F1 | 	add	arg02, objptr
09a44     0C 14 06 F1 | 	add	arg02, #12
09a48     0A 15 02 FB | 	rdlong	arg02, arg02
09a4c     1E 14 0E F2 | 	cmp	arg02, #30 wz
09a50     14 00 00 FF 
09a54     F8 E5 85 F1 | 	sub	objptr, ##10744
09a58     54 00 90 5D |  if_ne	jmp	#LR__0871
09a5c     0F 15 02 F6 | 	mov	arg02, local01
09a60     04 14 66 F0 | 	shl	arg02, #4
09a64     14 00 00 FF 
09a68     F8 E5 05 F1 | 	add	objptr, ##10744
09a6c     F2 14 02 F1 | 	add	arg02, objptr
09a70     0C 14 06 F1 | 	add	arg02, #12
09a74     0A 39 68 FC | 	wrlong	#28, arg02
09a78     0F 25 02 F6 | 	mov	local04, local01
09a7c     04 24 66 F0 | 	shl	local04, #4
09a80     F2 24 02 F1 | 	add	local04, objptr
09a84     0F 13 02 F6 | 	mov	arg01, local01
09a88     04 12 66 F0 | 	shl	arg01, #4
09a8c     F2 12 02 F1 | 	add	arg01, objptr
09a90     04 12 06 F1 | 	add	arg01, #4
09a94     09 13 02 FB | 	rdlong	arg01, arg01
09a98     14 00 00 FF 
09a9c     F8 E5 85 F1 | 	sub	objptr, ##10744
09aa0     01 14 06 F6 | 	mov	arg02, #1
09aa4     70 A0 B1 FD | 	call	#__system___float_tointeger
09aa8     04 24 06 F1 | 	add	local04, #4
09aac     12 FB 61 FC | 	wrlong	result1, local04
09ab0                 | LR__0871
09ab0     50 00 00 FF 
09ab4     04 E5 05 F1 | 	add	objptr, ##41220
09ab8     F2 12 02 FB | 	rdlong	arg01, objptr
09abc     09 25 02 F6 | 	mov	local04, arg01
09ac0     02 24 66 F0 | 	shl	local04, #2
09ac4     09 25 02 F1 | 	add	local04, arg01
09ac8     02 24 66 F0 | 	shl	local04, #2
09acc     06 00 00 FF 
09ad0     70 E4 85 F1 | 	sub	objptr, ##3184
09ad4     F2 24 02 F1 | 	add	local04, objptr
09ad8     0C 24 06 F1 | 	add	local04, #12
09adc     12 25 02 FB | 	rdlong	local04, local04
09ae0     0F 13 02 F6 | 	mov	arg01, local01
09ae4     04 12 66 F0 | 	shl	arg01, #4
09ae8     35 00 00 FF 
09aec     9C E4 85 F1 | 	sub	objptr, ##27292
09af0     F2 12 02 F1 | 	add	arg01, objptr
09af4     0F FF 01 F6 | 	mov	result3, local01
09af8     04 FE 65 F0 | 	shl	result3, #4
09afc     F2 FE 01 F1 | 	add	result3, objptr
09b00     04 FE 05 F1 | 	add	result3, #4
09b04     FF FE 01 FB | 	rdlong	result3, result3
09b08     12 FF 01 F1 | 	add	result3, local04
09b0c     04 12 06 F1 | 	add	arg01, #4
09b10     09 FF 61 FC | 	wrlong	result3, arg01
09b14                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
09b14                 | ' if fortable(fortop).stepval>=0 then
09b14     3B 00 00 FF 
09b18     0C E5 05 F1 | 	add	objptr, ##30476
09b1c     F2 12 02 FB | 	rdlong	arg01, objptr
09b20     09 25 02 F6 | 	mov	local04, arg01
09b24     02 24 66 F0 | 	shl	local04, #2
09b28     09 25 02 F1 | 	add	local04, arg01
09b2c     02 24 66 F0 | 	shl	local04, #2
09b30     06 00 00 FF 
09b34     70 E4 85 F1 | 	sub	objptr, ##3184
09b38     F2 24 02 F1 | 	add	local04, objptr
09b3c     0C 24 06 F1 | 	add	local04, #12
09b40     12 25 02 FB | 	rdlong	local04, local04
09b44     00 24 56 F2 | 	cmps	local04, #0 wc
09b48     4A 00 00 FF 
09b4c     94 E4 85 F1 | 	sub	objptr, ##38036
09b50     78 00 90 CD |  if_b	jmp	#LR__0872
09b54                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
09b54     04 1E 66 F0 | 	shl	local01, #4
09b58     14 00 00 FF 
09b5c     F8 E5 05 F1 | 	add	objptr, ##10744
09b60     F2 1E 02 F1 | 	add	local01, objptr
09b64     3B 00 00 FF 
09b68     0C E5 05 F1 | 	add	objptr, ##30476
09b6c     F2 24 02 FB | 	rdlong	local04, objptr
09b70     12 13 02 F6 | 	mov	arg01, local04
09b74     02 12 66 F0 | 	shl	arg01, #2
09b78     12 13 02 F1 | 	add	arg01, local04
09b7c     02 12 66 F0 | 	shl	arg01, #2
09b80     06 00 00 FF 
09b84     70 E4 85 F1 | 	sub	objptr, ##3184
09b88     F2 12 02 F1 | 	add	arg01, objptr
09b8c     04 1E 06 F1 | 	add	local01, #4
09b90     0F 25 02 FB | 	rdlong	local04, local01
09b94     10 12 06 F1 | 	add	arg01, #16
09b98     09 13 02 FB | 	rdlong	arg01, arg01
09b9c     09 25 5A F2 | 	cmps	local04, arg01 wcz
09ba0     4A 00 00 FF 
09ba4     94 E4 85 F1 | 	sub	objptr, ##38036
09ba8     9C 00 90 ED |  if_be	jmp	#LR__0874
09bac     50 00 00 FF 
09bb0     04 E5 05 F1 | 	add	objptr, ##41220
09bb4     F2 24 02 FB | 	rdlong	local04, objptr
09bb8     01 24 86 F1 | 	sub	local04, #1
09bbc     F2 24 62 FC | 	wrlong	local04, objptr
09bc0     50 00 00 FF 
09bc4     04 E5 85 F1 | 	sub	objptr, ##41220
09bc8     B8 01 90 FD | 	jmp	#LR__0877
09bcc                 | LR__0872
09bcc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09bcc     0F 13 02 F6 | 	mov	arg01, local01
09bd0     04 12 66 F0 | 	shl	arg01, #4
09bd4     14 00 00 FF 
09bd8     F8 E5 05 F1 | 	add	objptr, ##10744
09bdc     F2 12 02 F1 | 	add	arg01, objptr
09be0     3B 00 00 FF 
09be4     0C E5 05 F1 | 	add	objptr, ##30476
09be8     F2 24 02 FB | 	rdlong	local04, objptr
09bec     12 1F 02 F6 | 	mov	local01, local04
09bf0     02 1E 66 F0 | 	shl	local01, #2
09bf4     12 1F 02 F1 | 	add	local01, local04
09bf8     02 1E 66 F0 | 	shl	local01, #2
09bfc     06 00 00 FF 
09c00     70 E4 85 F1 | 	sub	objptr, ##3184
09c04     F2 1E 02 F1 | 	add	local01, objptr
09c08     04 12 06 F1 | 	add	arg01, #4
09c0c     09 13 02 FB | 	rdlong	arg01, arg01
09c10     10 1E 06 F1 | 	add	local01, #16
09c14     0F 1F 02 FB | 	rdlong	local01, local01
09c18     0F 13 52 F2 | 	cmps	arg01, local01 wc
09c1c     4A 00 00 FF 
09c20     94 E4 85 F1 | 	sub	objptr, ##38036
09c24     20 00 90 3D |  if_ae	jmp	#LR__0873
09c28     50 00 00 FF 
09c2c     04 E5 05 F1 | 	add	objptr, ##41220
09c30     F2 24 02 FB | 	rdlong	local04, objptr
09c34     01 24 86 F1 | 	sub	local04, #1
09c38     F2 24 62 FC | 	wrlong	local04, objptr
09c3c     50 00 00 FF 
09c40     04 E5 85 F1 | 	sub	objptr, ##41220
09c44     3C 01 90 FD | 	jmp	#LR__0877
09c48                 | LR__0873
09c48                 | LR__0874
09c48                 | ' ' if not returned, goto pointer 
09c48                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
09c48     50 00 00 FF 
09c4c     E8 E4 05 F1 | 	add	objptr, ##41192
09c50     F2 24 02 FB | 	rdlong	local04, objptr
09c54     50 00 00 FF 
09c58     E8 E4 85 F1 | 	sub	objptr, ##41192
09c5c     01 24 16 F2 | 	cmp	local04, #1 wc
09c60     DC 00 90 CD |  if_b	jmp	#LR__0875
09c64     50 00 00 FF 
09c68     04 E5 05 F1 | 	add	objptr, ##41220
09c6c     F2 1E 02 FB | 	rdlong	local01, objptr
09c70     0F 25 02 F6 | 	mov	local04, local01
09c74     02 24 66 F0 | 	shl	local04, #2
09c78     0F 25 02 F1 | 	add	local04, local01
09c7c     02 24 66 F0 | 	shl	local04, #2
09c80     06 00 00 FF 
09c84     70 E4 85 F1 | 	sub	objptr, ##3184
09c88     F2 24 02 F1 | 	add	local04, objptr
09c8c     06 00 00 FF 
09c90     20 E4 05 F1 | 	add	objptr, ##3104
09c94     F2 1E 02 FB | 	rdlong	local01, objptr
09c98     50 00 00 FF 
09c9c     B4 E4 85 F1 | 	sub	objptr, ##41140
09ca0     12 25 02 FB | 	rdlong	local04, local04
09ca4     12 1F 0A F2 | 	cmp	local01, local04 wz
09ca8     94 00 90 AD |  if_e	jmp	#LR__0875
09cac     50 00 00 FF 
09cb0     04 E5 05 F1 | 	add	objptr, ##41220
09cb4     F2 1E 02 FB | 	rdlong	local01, objptr
09cb8     0F 25 02 F6 | 	mov	local04, local01
09cbc     02 24 66 F0 | 	shl	local04, #2
09cc0     0F 25 02 F1 | 	add	local04, local01
09cc4     02 24 66 F0 | 	shl	local04, #2
09cc8     06 00 00 FF 
09ccc     70 E4 85 F1 | 	sub	objptr, ##3184
09cd0     F2 24 02 F1 | 	add	local04, objptr
09cd4     12 25 02 FB | 	rdlong	local04, local04
09cd8     06 00 00 FF 
09cdc     20 E4 05 F1 | 	add	objptr, ##3104
09ce0     F2 24 62 FC | 	wrlong	local04, objptr
09ce4     50 E4 05 F1 | 	add	objptr, #80
09ce8     F2 1E 02 FB | 	rdlong	local01, objptr
09cec     0F 25 02 F6 | 	mov	local04, local01
09cf0     02 24 66 F0 | 	shl	local04, #2
09cf4     0F 25 02 F1 | 	add	local04, local01
09cf8     02 24 66 F0 | 	shl	local04, #2
09cfc     06 00 00 FF 
09d00     70 E4 85 F1 | 	sub	objptr, ##3184
09d04     F2 24 02 F1 | 	add	local04, objptr
09d08     04 24 06 F1 | 	add	local04, #4
09d0c     12 25 02 FB | 	rdlong	local04, local04
09d10     06 00 00 FF 
09d14     24 E4 05 F1 | 	add	objptr, ##3108
09d18     F2 24 62 FC | 	wrlong	local04, objptr
09d1c     06 00 00 FF 
09d20     3C E4 85 F1 | 	sub	objptr, ##3132
09d24     F2 24 02 FB | 	rdlong	local04, objptr
09d28     01 24 86 F1 | 	sub	local04, #1
09d2c     04 E4 05 F1 | 	add	objptr, #4
09d30     F2 24 62 FC | 	wrlong	local04, objptr
09d34     4A 00 00 FF 
09d38     80 E4 85 F1 | 	sub	objptr, ##38016
09d3c     44 00 90 FD | 	jmp	#LR__0876
09d40                 | LR__0875
09d40     50 00 00 FF 
09d44     04 E5 05 F1 | 	add	objptr, ##41220
09d48     F2 24 02 FB | 	rdlong	local04, objptr
09d4c     12 1F 02 F6 | 	mov	local01, local04
09d50     02 1E 66 F0 | 	shl	local01, #2
09d54     12 1F 02 F1 | 	add	local01, local04
09d58     02 1E 66 F0 | 	shl	local01, #2
09d5c     06 00 00 FF 
09d60     70 E4 85 F1 | 	sub	objptr, ##3184
09d64     F2 1E 02 F1 | 	add	local01, objptr
09d68     04 1E 06 F1 | 	add	local01, #4
09d6c     0F 1F 02 FB | 	rdlong	local01, local01
09d70     01 1E 86 F1 | 	sub	local01, #1
09d74     14 E4 85 F1 | 	sub	objptr, #20
09d78     F2 1E 62 FC | 	wrlong	local01, objptr
09d7c     4A 00 00 FF 
09d80     80 E4 85 F1 | 	sub	objptr, ##38016
09d84                 | LR__0876
09d84                 | LR__0877
09d84     A7 F0 03 F6 | 	mov	ptra, fp
09d88     B2 00 A0 FD | 	call	#popregs_
09d8c                 | _do_next_ret
09d8c     2D 00 64 FD | 	ret
09d90                 | 
09d90                 | ' 
09d90                 | ' 
09d90                 | ' function compile_next() as ulong
09d90                 | _compile_next
09d90     04 4A 05 F6 | 	mov	COUNT_, #4
09d94     A8 00 A0 FD | 	call	#pushregs_
09d98     37 00 00 FF 
09d9c     44 E4 05 F1 | 	add	objptr, ##28228
09da0     F2 12 02 FB | 	rdlong	arg01, objptr
09da4     03 12 66 F0 | 	shl	arg01, #3
09da8     02 00 00 FF 
09dac     38 E4 85 F1 | 	sub	objptr, ##1080
09db0     F2 12 02 F1 | 	add	arg01, objptr
09db4     09 1F 02 FB | 	rdlong	local01, arg01
09db8                 | ' 
09db8                 | ' varname$=lparts(ct).part$ 
09db8                 | ' 'suffix$=right$(varname$,1)
09db8                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09db8                 | ' if varnum=0 then compile_error(35)  : return 35
09db8     04 E4 85 F1 | 	sub	objptr, #4
09dbc     F2 14 0A FB | 	rdlong	arg02, objptr wz
09dc0     35 00 00 FF 
09dc4     08 E4 85 F1 | 	sub	objptr, ##27144
09dc8     10 00 90 5D |  if_ne	jmp	#LR__0880
09dcc     23 12 06 F6 | 	mov	arg01, #35
09dd0     D8 DD BF FD | 	call	#_compile_error
09dd4     23 FA 05 F6 | 	mov	result1, #35
09dd8     58 01 90 FD | 	jmp	#LR__0884
09ddc                 | LR__0880
09ddc     01 20 66 F6 | 	neg	local02, #1
09de0                 | ' j=-1
09de0                 | ' for i=0 to varnum-1
09de0     00 22 06 F6 | 	mov	local03, #0
09de4     35 00 00 FF 
09de8     08 E4 05 F1 | 	add	objptr, ##27144
09dec     F2 24 02 FB | 	rdlong	local04, objptr
09df0     35 00 00 FF 
09df4     08 E4 85 F1 | 	sub	objptr, ##27144
09df8                 | LR__0881
09df8     12 23 12 F2 | 	cmp	local03, local04 wc
09dfc     38 00 90 3D |  if_ae	jmp	#LR__0882
09e00                 | '   if variables(i).name=varname$ then j=i : exit
09e00     11 15 02 F6 | 	mov	arg02, local03
09e04     04 14 66 F0 | 	shl	arg02, #4
09e08     14 00 00 FF 
09e0c     F8 E5 05 F1 | 	add	objptr, ##10744
09e10     F2 14 02 F1 | 	add	arg02, objptr
09e14     0A 13 02 FB | 	rdlong	arg01, arg02
09e18     0F 15 02 F6 | 	mov	arg02, local01
09e1c     14 00 00 FF 
09e20     F8 E5 85 F1 | 	sub	objptr, ##10744
09e24     9C 6C B1 FD | 	call	#__system___string_cmp
09e28     00 FA 0D F2 | 	cmp	result1, #0 wz
09e2c     11 21 02 A6 |  if_e	mov	local02, local03
09e30     01 22 06 51 |  if_ne	add	local03, #1
09e34     C0 FF 9F 5D |  if_ne	jmp	#LR__0881
09e38                 | LR__0882
09e38                 | ' if j=-1 then compile_error(35) : return 35
09e38     FF FF 7F FF 
09e3c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09e40     10 00 90 5D |  if_ne	jmp	#LR__0883
09e44     23 12 06 F6 | 	mov	arg01, #35
09e48     60 DD BF FD | 	call	#_compile_error
09e4c     23 FA 05 F6 | 	mov	result1, #35
09e50     E0 00 90 FD | 	jmp	#LR__0884
09e54                 | LR__0883
09e54     4A 00 00 FF 
09e58     7C E4 05 F1 | 	add	objptr, ##38012
09e5c     F2 24 02 FB | 	rdlong	local04, objptr
09e60     12 23 02 F6 | 	mov	local03, local04
09e64     01 22 66 F0 | 	shl	local03, #1
09e68     12 23 02 F1 | 	add	local03, local04
09e6c     02 22 66 F0 | 	shl	local03, #2
09e70     03 00 00 FF 
09e74     00 E4 85 F1 | 	sub	objptr, ##1536
09e78     F2 22 02 F1 | 	add	local03, objptr
09e7c     08 22 06 F1 | 	add	local03, #8
09e80     11 39 68 FC | 	wrlong	#28, local03
09e84     03 00 00 FF 
09e88     00 E4 05 F1 | 	add	objptr, ##1536
09e8c     F2 24 02 FB | 	rdlong	local04, objptr
09e90     12 23 02 F6 | 	mov	local03, local04
09e94     01 22 66 F0 | 	shl	local03, #1
09e98     12 23 02 F1 | 	add	local03, local04
09e9c     02 22 66 F0 | 	shl	local03, #2
09ea0     03 00 00 FF 
09ea4     00 E4 85 F1 | 	sub	objptr, ##1536
09ea8     F2 22 02 F1 | 	add	local03, objptr
09eac     11 21 62 FC | 	wrlong	local02, local03
09eb0     03 00 00 FF 
09eb4     00 E4 05 F1 | 	add	objptr, ##1536
09eb8     F2 24 02 FB | 	rdlong	local04, objptr
09ebc     01 24 06 F1 | 	add	local04, #1
09ec0     F2 24 62 FC | 	wrlong	local04, objptr
09ec4     12 23 02 F6 | 	mov	local03, local04
09ec8     01 22 66 F0 | 	shl	local03, #1
09ecc     12 23 02 F1 | 	add	local03, local04
09ed0     02 22 66 F0 | 	shl	local03, #2
09ed4     03 00 00 FF 
09ed8     00 E4 85 F1 | 	sub	objptr, ##1536
09edc     F2 22 02 F1 | 	add	local03, objptr
09ee0     08 22 06 F1 | 	add	local03, #8
09ee4     11 97 68 FC | 	wrlong	#75, local03
09ee8     03 00 00 FF 
09eec     00 E4 05 F1 | 	add	objptr, ##1536
09ef0     F2 24 02 FB | 	rdlong	local04, objptr
09ef4     12 23 02 F6 | 	mov	local03, local04
09ef8     01 22 66 F0 | 	shl	local03, #1
09efc     12 23 02 F1 | 	add	local03, local04
09f00     02 22 66 F0 | 	shl	local03, #2
09f04     03 00 00 FF 
09f08     00 E4 85 F1 | 	sub	objptr, ##1536
09f0c     F2 22 02 F1 | 	add	local03, objptr
09f10     11 01 68 FC | 	wrlong	#0, local03
09f14     03 00 00 FF 
09f18     00 E4 05 F1 | 	add	objptr, ##1536
09f1c     F2 24 02 FB | 	rdlong	local04, objptr
09f20     01 24 06 F1 | 	add	local04, #1
09f24     F2 24 62 FC | 	wrlong	local04, objptr
09f28     4A 00 00 FF 
09f2c     7C E4 85 F1 | 	sub	objptr, ##38012
09f30                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09f30                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09f30                 | ' return 0
09f30     00 FA 05 F6 | 	mov	result1, #0
09f34                 | LR__0884
09f34     A7 F0 03 F6 | 	mov	ptra, fp
09f38     B2 00 A0 FD | 	call	#popregs_
09f3c                 | _compile_next_ret
09f3c     2D 00 64 FD | 	ret
09f40                 | 
09f40                 | ' 
09f40                 | ' 
09f40                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09f40                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09f40                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09f40                 | ' 
09f40                 | ' function compile_gosub() as ulong
09f40                 | _compile_gosub
09f40     01 4A 05 F6 | 	mov	COUNT_, #1
09f44     A8 00 A0 FD | 	call	#pushregs_
09f48     4A 00 00 FF 
09f4c     7C E4 05 F1 | 	add	objptr, ##38012
09f50     F2 1E 02 FB | 	rdlong	local01, objptr
09f54     0F FB 01 F6 | 	mov	result1, local01
09f58     01 FA 65 F0 | 	shl	result1, #1
09f5c     0F FB 01 F1 | 	add	result1, local01
09f60     02 FA 65 F0 | 	shl	result1, #2
09f64     03 00 00 FF 
09f68     00 E4 85 F1 | 	sub	objptr, ##1536
09f6c     F2 FA 01 F1 | 	add	result1, objptr
09f70     08 FA 05 F1 | 	add	result1, #8
09f74     FD 52 69 FC | 	wrlong	#169, result1
09f78     03 00 00 FF 
09f7c     00 E4 05 F1 | 	add	objptr, ##1536
09f80     F2 1E 02 FB | 	rdlong	local01, objptr
09f84     01 1E 06 F1 | 	add	local01, #1
09f88     F2 1E 62 FC | 	wrlong	local01, objptr
09f8c     4A 00 00 FF 
09f90     7C E4 85 F1 | 	sub	objptr, ##38012
09f94     10 00 B0 FD | 	call	#_compile_goto
09f98                 | ' 
09f98                 | ' compiledline(lineptr).result_type=token_gosub
09f98                 | ' lineptr+=1
09f98                 | ' compile_goto()
09f98                 | ' return 0
09f98     00 FA 05 F6 | 	mov	result1, #0
09f9c     A7 F0 03 F6 | 	mov	ptra, fp
09fa0     B2 00 A0 FD | 	call	#popregs_
09fa4                 | _compile_gosub_ret
09fa4     2D 00 64 FD | 	ret
09fa8                 | 
09fa8                 | ' 
09fa8                 | ' function compile_goto( ) as ulong
09fa8                 | _compile_goto
09fa8     03 4A 05 F6 | 	mov	COUNT_, #3
09fac     A8 00 A0 FD | 	call	#pushregs_
09fb0     34 F0 07 F1 | 	add	ptra, #52
09fb4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09fb4     37 00 00 FF 
09fb8     44 E4 05 F1 | 	add	objptr, ##28228
09fbc     F2 16 02 FB | 	rdlong	arg03, objptr
09fc0     03 16 66 F0 | 	shl	arg03, #3
09fc4     02 00 00 FF 
09fc8     38 E4 85 F1 | 	sub	objptr, ##1080
09fcc     F2 16 02 F1 | 	add	arg03, objptr
09fd0     04 16 06 F1 | 	add	arg03, #4
09fd4     0B 17 02 FB | 	rdlong	arg03, arg03
09fd8     01 00 00 FF 
09fdc     00 16 0E F2 | 	cmp	arg03, ##512 wz
09fe0     35 00 00 FF 
09fe4     0C E4 85 F1 | 	sub	objptr, ##27148
09fe8     CC 02 90 5D |  if_ne	jmp	#LR__0895
09fec     37 00 00 FF 
09ff0     44 E4 05 F1 | 	add	objptr, ##28228
09ff4     F2 16 02 FB | 	rdlong	arg03, objptr
09ff8     01 16 06 F1 | 	add	arg03, #1
09ffc     03 16 66 F0 | 	shl	arg03, #3
0a000     02 00 00 FF 
0a004     38 E4 85 F1 | 	sub	objptr, ##1080
0a008     F2 16 02 F1 | 	add	arg03, objptr
0a00c     04 16 06 F1 | 	add	arg03, #4
0a010     0B 17 02 FB | 	rdlong	arg03, arg03
0a014     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a018     35 00 00 FF 
0a01c     0C E4 85 F1 | 	sub	objptr, ##27148
0a020     94 02 90 5D |  if_ne	jmp	#LR__0895
0a024     37 00 00 FF 
0a028     44 E4 05 F1 | 	add	objptr, ##28228
0a02c     F2 16 02 FB | 	rdlong	arg03, objptr
0a030     03 16 66 F0 | 	shl	arg03, #3
0a034     02 00 00 FF 
0a038     38 E4 85 F1 | 	sub	objptr, ##1080
0a03c     F2 16 02 F1 | 	add	arg03, objptr
0a040     0B 13 02 FB | 	rdlong	arg01, arg03
0a044     00 14 06 F6 | 	mov	arg02, #0
0a048     35 00 00 FF 
0a04c     0C E4 85 F1 | 	sub	objptr, ##27148
0a050     74 9C B1 FD | 	call	#__system____builtin_atoi
0a054     04 4E 05 F1 | 	add	fp, #4
0a058     A7 FA 61 FC | 	wrlong	result1, fp
0a05c     4A 00 00 FF 
0a060     7C E4 05 F1 | 	add	objptr, ##38012
0a064     F2 1E 02 FB | 	rdlong	local01, objptr
0a068     0F 21 02 F6 | 	mov	local02, local01
0a06c     01 20 66 F0 | 	shl	local02, #1
0a070     0F 21 02 F1 | 	add	local02, local01
0a074     02 20 66 F0 | 	shl	local02, #2
0a078     03 00 00 FF 
0a07c     00 E4 85 F1 | 	sub	objptr, ##1536
0a080     F2 20 02 F1 | 	add	local02, objptr
0a084     08 20 06 F1 | 	add	local02, #8
0a088     10 9D 68 FC | 	wrlong	#78, local02
0a08c     03 00 00 FF 
0a090     08 E4 05 F1 | 	add	objptr, ##1544
0a094     F2 22 02 FB | 	rdlong	local03, objptr
0a098     4A 00 00 FF 
0a09c     84 E4 85 F1 | 	sub	objptr, ##38020
0a0a0     04 4E 05 F1 | 	add	fp, #4
0a0a4     A7 22 62 FC | 	wrlong	local03, fp
0a0a8     08 4E 85 F1 | 	sub	fp, #8
0a0ac                 | ' 
0a0ac                 | '   gotoline=val%(lparts(ct).part$) 
0a0ac                 | '   compiledline(lineptr).result_type=token_fast_goto
0a0ac                 | ' ' now find a pointer to goto
0a0ac                 | '   gotoptr=programstart
0a0ac                 | '   do
0a0ac                 | LR__0890
0a0ac     10 4E 05 F1 | 	add	fp, #16
0a0b0     A7 12 02 F6 | 	mov	arg01, fp
0a0b4     08 4E 85 F1 | 	sub	fp, #8
0a0b8     A7 14 02 FB | 	rdlong	arg02, fp
0a0bc     08 4E 85 F1 | 	sub	fp, #8
0a0c0     18 16 06 F6 | 	mov	arg03, #24
0a0c4     0B 00 00 FF 
0a0c8     CC E4 05 F1 | 	add	objptr, ##5836
0a0cc     8C 5D B1 FD | 	call	#_psram_spin2_read1
0a0d0     0B 00 00 FF 
0a0d4     CC E4 85 F1 | 	sub	objptr, ##5836
0a0d8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a0d8                 | '     if gotoheader(0)<>$FFFFFFFF then
0a0d8     10 4E 05 F1 | 	add	fp, #16
0a0dc     A7 22 02 FB | 	rdlong	local03, fp
0a0e0     10 4E 85 F1 | 	sub	fp, #16
0a0e4     FF FF 7F FF 
0a0e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a0ec     24 00 90 AD |  if_e	jmp	#LR__0891
0a0f0     08 4E 05 F1 | 	add	fp, #8
0a0f4     A7 22 02 FB | 	rdlong	local03, fp
0a0f8     04 4E 05 F1 | 	add	fp, #4
0a0fc     A7 22 62 FC | 	wrlong	local03, fp
0a100     18 4E 05 F1 | 	add	fp, #24
0a104     A7 22 02 FB | 	rdlong	local03, fp
0a108     1C 4E 85 F1 | 	sub	fp, #28
0a10c     A7 22 62 FC | 	wrlong	local03, fp
0a110     08 4E 85 F1 | 	sub	fp, #8
0a114                 | LR__0891
0a114     24 4E 05 F1 | 	add	fp, #36
0a118     A7 22 02 FB | 	rdlong	local03, fp
0a11c     24 4E 85 F1 | 	sub	fp, #36
0a120     FF FF 3F FF 
0a124     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a128     10 4E 05 51 |  if_ne	add	fp, #16
0a12c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a130     10 4E 85 51 |  if_ne	sub	fp, #16
0a134     FF FF 7F 5F 
0a138     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a13c     1C 00 90 AD |  if_e	jmp	#LR__0892
0a140     10 4E 05 F1 | 	add	fp, #16
0a144     A7 22 02 FB | 	rdlong	local03, fp
0a148     0C 4E 85 F1 | 	sub	fp, #12
0a14c     A7 20 02 FB | 	rdlong	local02, fp
0a150     04 4E 85 F1 | 	sub	fp, #4
0a154     10 23 0A F2 | 	cmp	local03, local02 wz
0a158     50 FF 9F 5D |  if_ne	jmp	#LR__0890
0a15c                 | LR__0892
0a15c                 | '   if gotoheader(0)=gotoline then
0a15c     10 4E 05 F1 | 	add	fp, #16
0a160     A7 22 02 FB | 	rdlong	local03, fp
0a164     0C 4E 85 F1 | 	sub	fp, #12
0a168     A7 1E 02 FB | 	rdlong	local01, fp
0a16c     04 4E 85 F1 | 	sub	fp, #4
0a170     0F 23 0A F2 | 	cmp	local03, local01 wz
0a174     7C 00 90 5D |  if_ne	jmp	#LR__0893
0a178     4A 00 00 FF 
0a17c     7C E4 05 F1 | 	add	objptr, ##38012
0a180     F2 1E 02 FB | 	rdlong	local01, objptr
0a184     0F 21 02 F6 | 	mov	local02, local01
0a188     01 20 66 F0 | 	shl	local02, #1
0a18c     0F 21 02 F1 | 	add	local02, local01
0a190     02 20 66 F0 | 	shl	local02, #2
0a194     03 00 00 FF 
0a198     00 E4 85 F1 | 	sub	objptr, ##1536
0a19c     F2 20 02 F1 | 	add	local02, objptr
0a1a0     0C 4E 05 F1 | 	add	fp, #12
0a1a4     A7 22 02 FB | 	rdlong	local03, fp
0a1a8     10 23 62 FC | 	wrlong	local03, local02
0a1ac     03 00 00 FF 
0a1b0     00 E4 05 F1 | 	add	objptr, ##1536
0a1b4     F2 1E 02 FB | 	rdlong	local01, objptr
0a1b8     0F 21 02 F6 | 	mov	local02, local01
0a1bc     01 20 66 F0 | 	shl	local02, #1
0a1c0     0F 21 02 F1 | 	add	local02, local01
0a1c4     02 20 66 F0 | 	shl	local02, #2
0a1c8     03 00 00 FF 
0a1cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a1d0     F2 20 02 F1 | 	add	local02, objptr
0a1d4     08 4E 85 F1 | 	sub	fp, #8
0a1d8     A7 22 02 FB | 	rdlong	local03, fp
0a1dc     04 4E 85 F1 | 	sub	fp, #4
0a1e0     04 20 06 F1 | 	add	local02, #4
0a1e4     10 23 62 FC | 	wrlong	local03, local02
0a1e8     47 00 00 FF 
0a1ec     7C E4 85 F1 | 	sub	objptr, ##36476
0a1f0     A4 00 90 FD | 	jmp	#LR__0894
0a1f4                 | LR__0893
0a1f4     4A 00 00 FF 
0a1f8     7C E4 05 F1 | 	add	objptr, ##38012
0a1fc     F2 1E 02 FB | 	rdlong	local01, objptr
0a200     0F 21 02 F6 | 	mov	local02, local01
0a204     01 20 66 F0 | 	shl	local02, #1
0a208     0F 21 02 F1 | 	add	local02, local01
0a20c     02 20 66 F0 | 	shl	local02, #2
0a210     03 00 00 FF 
0a214     00 E4 85 F1 | 	sub	objptr, ##1536
0a218     F2 20 02 F1 | 	add	local02, objptr
0a21c     00 00 C0 FF 
0a220     10 01 68 FC | 	wrlong	##-2147483648, local02
0a224     03 00 00 FF 
0a228     00 E4 05 F1 | 	add	objptr, ##1536
0a22c     F2 1E 02 FB | 	rdlong	local01, objptr
0a230     0F 21 02 F6 | 	mov	local02, local01
0a234     01 20 66 F0 | 	shl	local02, #1
0a238     0F 21 02 F1 | 	add	local02, local01
0a23c     02 20 66 F0 | 	shl	local02, #2
0a240     03 00 00 FF 
0a244     00 E4 85 F1 | 	sub	objptr, ##1536
0a248     F2 20 02 F1 | 	add	local02, objptr
0a24c     04 4E 05 F1 | 	add	fp, #4
0a250     A7 22 02 FB | 	rdlong	local03, fp
0a254     04 4E 85 F1 | 	sub	fp, #4
0a258     04 20 06 F1 | 	add	local02, #4
0a25c     10 23 62 FC | 	wrlong	local03, local02
0a260     03 00 00 FF 
0a264     00 E4 05 F1 | 	add	objptr, ##1536
0a268     F2 1E 02 FB | 	rdlong	local01, objptr
0a26c     0F 21 02 F6 | 	mov	local02, local01
0a270     01 20 66 F0 | 	shl	local02, #1
0a274     0F 21 02 F1 | 	add	local02, local01
0a278     02 20 66 F0 | 	shl	local02, #2
0a27c     03 00 00 FF 
0a280     00 E4 85 F1 | 	sub	objptr, ##1536
0a284     F2 20 02 F1 | 	add	local02, objptr
0a288     08 20 06 F1 | 	add	local02, #8
0a28c     10 A7 68 FC | 	wrlong	#83, local02
0a290     47 00 00 FF 
0a294     7C E4 85 F1 | 	sub	objptr, ##36476
0a298                 | LR__0894
0a298     4A 00 00 FF 
0a29c     7C E4 05 F1 | 	add	objptr, ##38012
0a2a0     F2 22 02 FB | 	rdlong	local03, objptr
0a2a4     01 22 06 F1 | 	add	local03, #1
0a2a8     F2 22 62 FC | 	wrlong	local03, objptr
0a2ac     4A 00 00 FF 
0a2b0     7C E4 85 F1 | 	sub	objptr, ##38012
0a2b4     D0 00 90 FD | 	jmp	#LR__0896
0a2b8                 | LR__0895
0a2b8     DC 00 B0 FD | 	call	#_expr
0a2bc     30 4E 05 F1 | 	add	fp, #48
0a2c0     A7 9E 68 FC | 	wrlong	#79, fp
0a2c4     08 4E 85 F1 | 	sub	fp, #8
0a2c8     A7 00 68 FC | 	wrlong	#0, fp
0a2cc     04 4E 05 F1 | 	add	fp, #4
0a2d0     A7 22 02 FB | 	rdlong	local03, fp
0a2d4     04 4E 05 F1 | 	add	fp, #4
0a2d8     A7 1E 02 FB | 	rdlong	local01, fp
0a2dc     30 4E 85 F1 | 	sub	fp, #48
0a2e0     4A 00 00 FF 
0a2e4     7C E4 05 F1 | 	add	objptr, ##38012
0a2e8     F2 20 02 FB | 	rdlong	local02, objptr
0a2ec     10 17 02 F6 | 	mov	arg03, local02
0a2f0     01 16 66 F0 | 	shl	arg03, #1
0a2f4     10 17 02 F1 | 	add	arg03, local02
0a2f8     02 16 66 F0 | 	shl	arg03, #2
0a2fc     03 00 00 FF 
0a300     00 E4 85 F1 | 	sub	objptr, ##1536
0a304     F2 16 02 F1 | 	add	arg03, objptr
0a308     0B 01 68 FC | 	wrlong	#0, arg03
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 20 02 FB | 	rdlong	local02, objptr
0a318     10 17 02 F6 | 	mov	arg03, local02
0a31c     01 16 66 F0 | 	shl	arg03, #1
0a320     10 17 02 F1 | 	add	arg03, local02
0a324     02 16 66 F0 | 	shl	arg03, #2
0a328     03 00 00 FF 
0a32c     00 E4 85 F1 | 	sub	objptr, ##1536
0a330     F2 16 02 F1 | 	add	arg03, objptr
0a334     04 16 06 F1 | 	add	arg03, #4
0a338     0B 23 62 FC | 	wrlong	local03, arg03
0a33c     03 00 00 FF 
0a340     00 E4 05 F1 | 	add	objptr, ##1536
0a344     F2 22 02 FB | 	rdlong	local03, objptr
0a348     11 21 02 F6 | 	mov	local02, local03
0a34c     01 20 66 F0 | 	shl	local02, #1
0a350     11 21 02 F1 | 	add	local02, local03
0a354     02 20 66 F0 | 	shl	local02, #2
0a358     03 00 00 FF 
0a35c     00 E4 85 F1 | 	sub	objptr, ##1536
0a360     F2 20 02 F1 | 	add	local02, objptr
0a364     08 20 06 F1 | 	add	local02, #8
0a368     10 1F 62 FC | 	wrlong	local01, local02
0a36c     03 00 00 FF 
0a370     00 E4 05 F1 | 	add	objptr, ##1536
0a374     F2 22 02 FB | 	rdlong	local03, objptr
0a378     01 22 06 F1 | 	add	local03, #1
0a37c     F2 22 62 FC | 	wrlong	local03, objptr
0a380     4A 00 00 FF 
0a384     7C E4 85 F1 | 	sub	objptr, ##38012
0a388                 | LR__0896
0a388                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0a388                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0a388                 | ' return 0
0a388     00 FA 05 F6 | 	mov	result1, #0
0a38c     A7 F0 03 F6 | 	mov	ptra, fp
0a390     B2 00 A0 FD | 	call	#popregs_
0a394                 | _compile_goto_ret
0a394     2D 00 64 FD | 	ret
0a398                 | 
0a398                 | ' 
0a398                 | ' 
0a398                 | ' 
0a398                 | ' 
0a398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a398                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0a398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a398                 | ' 
0a398                 | ' 
0a398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a398                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0a398                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a398                 | ' 
0a398                 | ' 
0a398                 | ' function expr() as integer 
0a398                 | _expr
0a398     07 4A 05 F6 | 	mov	COUNT_, #7
0a39c     A8 00 A0 FD | 	call	#pushregs_
0a3a0                 | _expr_enter
0a3a0     37 00 00 FF 
0a3a4     44 E4 05 F1 | 	add	objptr, ##28228
0a3a8     F2 24 02 FB | 	rdlong	local04, objptr
0a3ac     03 24 66 F0 | 	shl	local04, #3
0a3b0     02 00 00 FF 
0a3b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b8     F2 24 02 F1 | 	add	local04, objptr
0a3bc     04 24 06 F1 | 	add	local04, #4
0a3c0     12 27 02 FB | 	rdlong	local05, local04
0a3c4                 | ' 
0a3c4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a3c4     FE 27 0E F2 | 	cmp	local05, #510 wz
0a3c8     35 00 00 FF 
0a3cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a3d0     C4 00 90 5D |  if_ne	jmp	#LR__0900
0a3d4     1D 1E 06 F6 | 	mov	local01, #29
0a3d8     FF 22 06 F6 | 	mov	local03, #255
0a3dc     0F 29 02 F6 | 	mov	local06, local01
0a3e0     10 2B 02 F6 | 	mov	local07, local02
0a3e4     11 1F 02 F6 | 	mov	local01, local03
0a3e8     4A 00 00 FF 
0a3ec     7C E4 05 F1 | 	add	objptr, ##38012
0a3f0     F2 26 02 FB | 	rdlong	local05, objptr
0a3f4     13 25 02 F6 | 	mov	local04, local05
0a3f8     01 24 66 F0 | 	shl	local04, #1
0a3fc     13 25 02 F1 | 	add	local04, local05
0a400     02 24 66 F0 | 	shl	local04, #2
0a404     03 00 00 FF 
0a408     00 E4 85 F1 | 	sub	objptr, ##1536
0a40c     F2 24 02 F1 | 	add	local04, objptr
0a410     12 29 62 FC | 	wrlong	local06, local04
0a414     03 00 00 FF 
0a418     00 E4 05 F1 | 	add	objptr, ##1536
0a41c     F2 28 02 FB | 	rdlong	local06, objptr
0a420     14 27 02 F6 | 	mov	local05, local06
0a424     01 26 66 F0 | 	shl	local05, #1
0a428     14 27 02 F1 | 	add	local05, local06
0a42c     02 26 66 F0 | 	shl	local05, #2
0a430     03 00 00 FF 
0a434     00 E4 85 F1 | 	sub	objptr, ##1536
0a438     F2 26 02 F1 | 	add	local05, objptr
0a43c     04 26 06 F1 | 	add	local05, #4
0a440     13 2B 62 FC | 	wrlong	local07, local05
0a444     03 00 00 FF 
0a448     00 E4 05 F1 | 	add	objptr, ##1536
0a44c     F2 2A 02 FB | 	rdlong	local07, objptr
0a450     15 29 02 F6 | 	mov	local06, local07
0a454     01 28 66 F0 | 	shl	local06, #1
0a458     15 29 02 F1 | 	add	local06, local07
0a45c     02 28 66 F0 | 	shl	local06, #2
0a460     03 00 00 FF 
0a464     00 E4 85 F1 | 	sub	objptr, ##1536
0a468     F2 28 02 F1 | 	add	local06, objptr
0a46c     08 28 06 F1 | 	add	local06, #8
0a470     14 1F 62 FC | 	wrlong	local01, local06
0a474     03 00 00 FF 
0a478     00 E4 05 F1 | 	add	objptr, ##1536
0a47c     F2 28 02 FB | 	rdlong	local06, objptr
0a480     01 28 06 F1 | 	add	local06, #1
0a484     F2 28 62 FC | 	wrlong	local06, objptr
0a488     4A 00 00 FF 
0a48c     7C E4 85 F1 | 	sub	objptr, ##38012
0a490     1D FA 05 F6 | 	mov	result1, #29
0a494     54 01 90 FD | 	jmp	#LR__0903
0a498                 | LR__0900
0a498     00 1E 06 F6 | 	mov	local01, #0
0a49c     58 01 B0 FD | 	call	#_addsub
0a4a0     37 00 00 FF 
0a4a4     44 E4 05 F1 | 	add	objptr, ##28228
0a4a8     F2 24 02 FB | 	rdlong	local04, objptr
0a4ac     03 24 66 F0 | 	shl	local04, #3
0a4b0     02 00 00 FF 
0a4b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4b8     F2 24 02 F1 | 	add	local04, objptr
0a4bc     04 24 06 F1 | 	add	local04, #4
0a4c0     12 27 02 FB | 	rdlong	local05, local04
0a4c4                 | ' t3.result.uresult=0
0a4c4                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a4c4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a4c4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a4c4     35 00 00 FF 
0a4c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a4cc                 | LR__0901
0a4cc     1B 26 0E F2 | 	cmp	local05, #27 wz
0a4d0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a4d4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a4d8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a4dc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a4e0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a4e4     00 01 90 5D |  if_ne	jmp	#LR__0902
0a4e8     37 00 00 FF 
0a4ec     44 E4 05 F1 | 	add	objptr, ##28228
0a4f0     F2 28 02 FB | 	rdlong	local06, objptr
0a4f4     01 28 06 F1 | 	add	local06, #1
0a4f8     F2 28 62 FC | 	wrlong	local06, objptr
0a4fc     37 00 00 FF 
0a500     44 E4 85 F1 | 	sub	objptr, ##28228
0a504     F0 00 B0 FD | 	call	#_addsub
0a508     13 23 02 F6 | 	mov	local03, local05
0a50c     0F 29 02 F6 | 	mov	local06, local01
0a510     10 2B 02 F6 | 	mov	local07, local02
0a514     11 27 02 F6 | 	mov	local05, local03
0a518     4A 00 00 FF 
0a51c     7C E4 05 F1 | 	add	objptr, ##38012
0a520     F2 24 02 FB | 	rdlong	local04, objptr
0a524     12 FB 01 F6 | 	mov	result1, local04
0a528     01 FA 65 F0 | 	shl	result1, #1
0a52c     12 FB 01 F1 | 	add	result1, local04
0a530     02 FA 65 F0 | 	shl	result1, #2
0a534     03 00 00 FF 
0a538     00 E4 85 F1 | 	sub	objptr, ##1536
0a53c     F2 FA 01 F1 | 	add	result1, objptr
0a540     FD 28 62 FC | 	wrlong	local06, result1
0a544     03 00 00 FF 
0a548     00 E4 05 F1 | 	add	objptr, ##1536
0a54c     F2 28 02 FB | 	rdlong	local06, objptr
0a550     14 25 02 F6 | 	mov	local04, local06
0a554     01 24 66 F0 | 	shl	local04, #1
0a558     14 25 02 F1 | 	add	local04, local06
0a55c     02 24 66 F0 | 	shl	local04, #2
0a560     03 00 00 FF 
0a564     00 E4 85 F1 | 	sub	objptr, ##1536
0a568     F2 24 02 F1 | 	add	local04, objptr
0a56c     04 24 06 F1 | 	add	local04, #4
0a570     12 2B 62 FC | 	wrlong	local07, local04
0a574     03 00 00 FF 
0a578     00 E4 05 F1 | 	add	objptr, ##1536
0a57c     F2 2A 02 FB | 	rdlong	local07, objptr
0a580     15 29 02 F6 | 	mov	local06, local07
0a584     01 28 66 F0 | 	shl	local06, #1
0a588     15 29 02 F1 | 	add	local06, local07
0a58c     02 28 66 F0 | 	shl	local06, #2
0a590     03 00 00 FF 
0a594     00 E4 85 F1 | 	sub	objptr, ##1536
0a598     F2 28 02 F1 | 	add	local06, objptr
0a59c     08 28 06 F1 | 	add	local06, #8
0a5a0     14 27 62 FC | 	wrlong	local05, local06
0a5a4     03 00 00 FF 
0a5a8     00 E4 05 F1 | 	add	objptr, ##1536
0a5ac     F2 28 02 FB | 	rdlong	local06, objptr
0a5b0     01 28 06 F1 | 	add	local06, #1
0a5b4     F2 28 62 FC | 	wrlong	local06, objptr
0a5b8     13 00 00 FF 
0a5bc     38 E4 85 F1 | 	sub	objptr, ##9784
0a5c0     F2 24 02 FB | 	rdlong	local04, objptr
0a5c4     03 24 66 F0 | 	shl	local04, #3
0a5c8     02 00 00 FF 
0a5cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a5d0     F2 24 02 F1 | 	add	local04, objptr
0a5d4     04 24 06 F1 | 	add	local04, #4
0a5d8     12 27 02 FB | 	rdlong	local05, local04
0a5dc     35 00 00 FF 
0a5e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a5e4     E4 FE 9F FD | 	jmp	#LR__0901
0a5e8                 | LR__0902
0a5e8                 | ' return 0  
0a5e8     00 FA 05 F6 | 	mov	result1, #0
0a5ec                 | LR__0903
0a5ec     A7 F0 03 F6 | 	mov	ptra, fp
0a5f0     B2 00 A0 FD | 	call	#popregs_
0a5f4                 | _expr_ret
0a5f4     2D 00 64 FD | 	ret
0a5f8                 | 
0a5f8                 | ' 
0a5f8                 | ' 
0a5f8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0a5f8                 | ' 
0a5f8                 | ' function addsub() as integer 
0a5f8                 | _addsub
0a5f8     07 4A 05 F6 | 	mov	COUNT_, #7
0a5fc     A8 00 A0 FD | 	call	#pushregs_
0a600                 | _addsub_enter
0a600     00 1E 06 F6 | 	mov	local01, #0
0a604     50 01 B0 FD | 	call	#_muldiv
0a608     37 00 00 FF 
0a60c     44 E4 05 F1 | 	add	objptr, ##28228
0a610     F2 24 02 FB | 	rdlong	local04, objptr
0a614     03 24 66 F0 | 	shl	local04, #3
0a618     02 00 00 FF 
0a61c     38 E4 85 F1 | 	sub	objptr, ##1080
0a620     F2 24 02 F1 | 	add	local04, objptr
0a624     04 24 06 F1 | 	add	local04, #4
0a628     12 27 02 FB | 	rdlong	local05, local04
0a62c                 | ' t3.result.uresult=0
0a62c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a62c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a62c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a62c     35 00 00 FF 
0a630     0C E4 85 F1 | 	sub	objptr, ##27148
0a634                 | LR__0910
0a634     01 26 0E F2 | 	cmp	local05, #1 wz
0a638     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a63c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a640     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a644     00 01 90 5D |  if_ne	jmp	#LR__0911
0a648     37 00 00 FF 
0a64c     44 E4 05 F1 | 	add	objptr, ##28228
0a650     F2 24 02 FB | 	rdlong	local04, objptr
0a654     01 24 06 F1 | 	add	local04, #1
0a658     F2 24 62 FC | 	wrlong	local04, objptr
0a65c     37 00 00 FF 
0a660     44 E4 85 F1 | 	sub	objptr, ##28228
0a664     F0 00 B0 FD | 	call	#_muldiv
0a668     13 23 02 F6 | 	mov	local03, local05
0a66c     0F 29 02 F6 | 	mov	local06, local01
0a670     10 2B 02 F6 | 	mov	local07, local02
0a674     11 27 02 F6 | 	mov	local05, local03
0a678     4A 00 00 FF 
0a67c     7C E4 05 F1 | 	add	objptr, ##38012
0a680     F2 24 02 FB | 	rdlong	local04, objptr
0a684     12 FB 01 F6 | 	mov	result1, local04
0a688     01 FA 65 F0 | 	shl	result1, #1
0a68c     12 FB 01 F1 | 	add	result1, local04
0a690     02 FA 65 F0 | 	shl	result1, #2
0a694     03 00 00 FF 
0a698     00 E4 85 F1 | 	sub	objptr, ##1536
0a69c     F2 FA 01 F1 | 	add	result1, objptr
0a6a0     FD 28 62 FC | 	wrlong	local06, result1
0a6a4     03 00 00 FF 
0a6a8     00 E4 05 F1 | 	add	objptr, ##1536
0a6ac     F2 28 02 FB | 	rdlong	local06, objptr
0a6b0     14 25 02 F6 | 	mov	local04, local06
0a6b4     01 24 66 F0 | 	shl	local04, #1
0a6b8     14 25 02 F1 | 	add	local04, local06
0a6bc     02 24 66 F0 | 	shl	local04, #2
0a6c0     03 00 00 FF 
0a6c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c8     F2 24 02 F1 | 	add	local04, objptr
0a6cc     04 24 06 F1 | 	add	local04, #4
0a6d0     12 2B 62 FC | 	wrlong	local07, local04
0a6d4     03 00 00 FF 
0a6d8     00 E4 05 F1 | 	add	objptr, ##1536
0a6dc     F2 2A 02 FB | 	rdlong	local07, objptr
0a6e0     15 29 02 F6 | 	mov	local06, local07
0a6e4     01 28 66 F0 | 	shl	local06, #1
0a6e8     15 29 02 F1 | 	add	local06, local07
0a6ec     02 28 66 F0 | 	shl	local06, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 28 02 F1 | 	add	local06, objptr
0a6fc     08 28 06 F1 | 	add	local06, #8
0a700     14 27 62 FC | 	wrlong	local05, local06
0a704     03 00 00 FF 
0a708     00 E4 05 F1 | 	add	objptr, ##1536
0a70c     F2 28 02 FB | 	rdlong	local06, objptr
0a710     01 28 06 F1 | 	add	local06, #1
0a714     F2 28 62 FC | 	wrlong	local06, objptr
0a718     13 00 00 FF 
0a71c     38 E4 85 F1 | 	sub	objptr, ##9784
0a720     F2 24 02 FB | 	rdlong	local04, objptr
0a724     03 24 66 F0 | 	shl	local04, #3
0a728     02 00 00 FF 
0a72c     38 E4 85 F1 | 	sub	objptr, ##1080
0a730     F2 24 02 F1 | 	add	local04, objptr
0a734     04 24 06 F1 | 	add	local04, #4
0a738     12 27 02 FB | 	rdlong	local05, local04
0a73c     35 00 00 FF 
0a740     0C E4 85 F1 | 	sub	objptr, ##27148
0a744     EC FE 9F FD | 	jmp	#LR__0910
0a748                 | LR__0911
0a748                 | '   return 0
0a748     00 FA 05 F6 | 	mov	result1, #0
0a74c     A7 F0 03 F6 | 	mov	ptra, fp
0a750     B2 00 A0 FD | 	call	#popregs_
0a754                 | _addsub_ret
0a754     2D 00 64 FD | 	ret
0a758                 | 
0a758                 | ' 
0a758                 | ' sub muldiv()
0a758                 | _muldiv
0a758     08 4A 05 F6 | 	mov	COUNT_, #8
0a75c     A8 00 A0 FD | 	call	#pushregs_
0a760                 | _muldiv_enter
0a760     00 1E 06 F6 | 	mov	local01, #0
0a764     58 01 B0 FD | 	call	#_getvalue
0a768     37 00 00 FF 
0a76c     44 E4 05 F1 | 	add	objptr, ##28228
0a770     F2 24 02 FB | 	rdlong	local04, objptr
0a774     03 24 66 F0 | 	shl	local04, #3
0a778     02 00 00 FF 
0a77c     38 E4 85 F1 | 	sub	objptr, ##1080
0a780     F2 24 02 F1 | 	add	local04, objptr
0a784     04 24 06 F1 | 	add	local04, #4
0a788     12 27 02 FB | 	rdlong	local05, local04
0a78c                 | ' t3.result.uresult=0
0a78c                 | ' getvalue()    
0a78c                 | ' op = lparts(ct).token
0a78c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a78c     35 00 00 FF 
0a790     0C E4 85 F1 | 	sub	objptr, ##27148
0a794                 | LR__0920
0a794     05 26 0E F2 | 	cmp	local05, #5 wz
0a798     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a79c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a7a0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a7a4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a7a8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a7ac     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a7b0     00 01 90 5D |  if_ne	jmp	#LR__0921
0a7b4     37 00 00 FF 
0a7b8     44 E4 05 F1 | 	add	objptr, ##28228
0a7bc     F2 24 02 FB | 	rdlong	local04, objptr
0a7c0     01 24 06 F1 | 	add	local04, #1
0a7c4     F2 24 62 FC | 	wrlong	local04, objptr
0a7c8     37 00 00 FF 
0a7cc     44 E4 85 F1 | 	sub	objptr, ##28228
0a7d0     EC 00 B0 FD | 	call	#_getvalue
0a7d4     13 23 02 F6 | 	mov	local03, local05
0a7d8     0F 29 02 F6 | 	mov	local06, local01
0a7dc     10 2B 02 F6 | 	mov	local07, local02
0a7e0     11 27 02 F6 | 	mov	local05, local03
0a7e4     4A 00 00 FF 
0a7e8     7C E4 05 F1 | 	add	objptr, ##38012
0a7ec     F2 24 02 FB | 	rdlong	local04, objptr
0a7f0     12 2D 02 F6 | 	mov	local08, local04
0a7f4     01 2C 66 F0 | 	shl	local08, #1
0a7f8     12 2D 02 F1 | 	add	local08, local04
0a7fc     02 2C 66 F0 | 	shl	local08, #2
0a800     03 00 00 FF 
0a804     00 E4 85 F1 | 	sub	objptr, ##1536
0a808     F2 2C 02 F1 | 	add	local08, objptr
0a80c     16 29 62 FC | 	wrlong	local06, local08
0a810     03 00 00 FF 
0a814     00 E4 05 F1 | 	add	objptr, ##1536
0a818     F2 2C 02 FB | 	rdlong	local08, objptr
0a81c     16 29 02 F6 | 	mov	local06, local08
0a820     01 28 66 F0 | 	shl	local06, #1
0a824     16 29 02 F1 | 	add	local06, local08
0a828     02 28 66 F0 | 	shl	local06, #2
0a82c     03 00 00 FF 
0a830     00 E4 85 F1 | 	sub	objptr, ##1536
0a834     F2 28 02 F1 | 	add	local06, objptr
0a838     04 28 06 F1 | 	add	local06, #4
0a83c     14 2B 62 FC | 	wrlong	local07, local06
0a840     03 00 00 FF 
0a844     00 E4 05 F1 | 	add	objptr, ##1536
0a848     F2 2C 02 FB | 	rdlong	local08, objptr
0a84c     16 2B 02 F6 | 	mov	local07, local08
0a850     01 2A 66 F0 | 	shl	local07, #1
0a854     16 2B 02 F1 | 	add	local07, local08
0a858     02 2A 66 F0 | 	shl	local07, #2
0a85c     03 00 00 FF 
0a860     00 E4 85 F1 | 	sub	objptr, ##1536
0a864     F2 2A 02 F1 | 	add	local07, objptr
0a868     08 2A 06 F1 | 	add	local07, #8
0a86c     15 27 62 FC | 	wrlong	local05, local07
0a870     03 00 00 FF 
0a874     00 E4 05 F1 | 	add	objptr, ##1536
0a878     F2 28 02 FB | 	rdlong	local06, objptr
0a87c     01 28 06 F1 | 	add	local06, #1
0a880     F2 28 62 FC | 	wrlong	local06, objptr
0a884     13 00 00 FF 
0a888     38 E4 85 F1 | 	sub	objptr, ##9784
0a88c     F2 24 02 FB | 	rdlong	local04, objptr
0a890     03 24 66 F0 | 	shl	local04, #3
0a894     02 00 00 FF 
0a898     38 E4 85 F1 | 	sub	objptr, ##1080
0a89c     F2 24 02 F1 | 	add	local04, objptr
0a8a0     04 24 06 F1 | 	add	local04, #4
0a8a4     12 27 02 FB | 	rdlong	local05, local04
0a8a8     35 00 00 FF 
0a8ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b0     E0 FE 9F FD | 	jmp	#LR__0920
0a8b4                 | LR__0921
0a8b4     A7 F0 03 F6 | 	mov	ptra, fp
0a8b8     B2 00 A0 FD | 	call	#popregs_
0a8bc                 | _muldiv_ret
0a8bc     2D 00 64 FD | 	ret
0a8c0                 | 
0a8c0                 | ' 
0a8c0                 | ' sub getvalue() 
0a8c0                 | _getvalue
0a8c0     0B 4A 05 F6 | 	mov	COUNT_, #11
0a8c4     A8 00 A0 FD | 	call	#pushregs_
0a8c8                 | _getvalue_enter
0a8c8     01 24 06 F6 | 	mov	local04, #1
0a8cc     00 1E 06 F6 | 	mov	local01, #0
0a8d0     1D 22 06 F6 | 	mov	local03, #29
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 16 02 FB | 	rdlong	arg03, objptr
0a8e0     03 16 66 F0 | 	shl	arg03, #3
0a8e4     02 00 00 FF 
0a8e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ec     F2 16 02 F1 | 	add	arg03, objptr
0a8f0     04 16 06 F1 | 	add	arg03, #4
0a8f4     0B 27 02 FB | 	rdlong	local05, arg03
0a8f8                 | ' m=1
0a8f8                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a8f8                 | ' op=lparts(ct).token
0a8f8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0a8f8     02 26 0E F2 | 	cmp	local05, #2 wz
0a8fc     35 00 00 FF 
0a900     0C E4 85 F1 | 	sub	objptr, ##27148
0a904     38 00 90 5D |  if_ne	jmp	#LR__0930
0a908     01 24 66 F6 | 	neg	local04, #1
0a90c     37 00 00 FF 
0a910     44 E4 05 F1 | 	add	objptr, ##28228
0a914     F2 26 02 FB | 	rdlong	local05, objptr
0a918     01 26 06 F1 | 	add	local05, #1
0a91c     F2 26 62 FC | 	wrlong	local05, objptr
0a920     03 26 66 F0 | 	shl	local05, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 26 02 F1 | 	add	local05, objptr
0a930     04 26 06 F1 | 	add	local05, #4
0a934     13 27 02 FB | 	rdlong	local05, local05
0a938     35 00 00 FF 
0a93c     0C E4 85 F1 | 	sub	objptr, ##27148
0a940                 | LR__0930
0a940                 | ' select case op
0a940     01 00 00 FF 
0a944     00 26 0E F2 | 	cmp	local05, ##512 wz
0a948     44 00 90 AD |  if_e	jmp	#LR__0931
0a94c     01 00 00 FF 
0a950     01 26 0E F2 | 	cmp	local05, ##513 wz
0a954     90 01 90 AD |  if_e	jmp	#LR__0934
0a958     01 00 00 FF 
0a95c     02 26 0E F2 | 	cmp	local05, ##514 wz
0a960     44 04 90 AD |  if_e	jmp	#LR__0941
0a964     01 00 00 FF 
0a968     03 26 0E F2 | 	cmp	local05, ##515 wz
0a96c     A8 05 90 AD |  if_e	jmp	#LR__0944
0a970     2C 26 0E F2 | 	cmp	local05, #44 wz
0a974     7C 07 90 AD |  if_e	jmp	#LR__0949
0a978     01 00 00 FF 
0a97c     04 26 0E F2 | 	cmp	local05, ##516 wz
0a980     74 08 90 AD |  if_e	jmp	#LR__0950
0a984     15 26 0E F2 | 	cmp	local05, #21 wz
0a988     94 08 90 AD |  if_e	jmp	#LR__0951
0a98c     04 09 90 FD | 	jmp	#LR__0952
0a990                 | LR__0931
0a990                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a990     01 24 0E F2 | 	cmp	local04, #1 wz
0a994     3C 00 90 5D |  if_ne	jmp	#LR__0932
0a998     37 00 00 FF 
0a99c     44 E4 05 F1 | 	add	objptr, ##28228
0a9a0     F2 26 02 FB | 	rdlong	local05, objptr
0a9a4     03 26 66 F0 | 	shl	local05, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 26 02 F1 | 	add	local05, objptr
0a9b4     13 13 02 FB | 	rdlong	arg01, local05
0a9b8     00 14 06 F6 | 	mov	arg02, #0
0a9bc     35 00 00 FF 
0a9c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c4     00 93 B1 FD | 	call	#__system____builtin_atoi
0a9c8     FD 24 02 FD | 	qmul	local04, result1
0a9cc     18 1E 62 FD | 	getqx	local01
0a9d0     1C 22 06 F6 | 	mov	local03, #28
0a9d4                 | LR__0932
0a9d4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a9d4     FF FF 7F FF 
0a9d8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a9dc     3C 00 90 5D |  if_ne	jmp	#LR__0933
0a9e0     37 00 00 FF 
0a9e4     44 E4 05 F1 | 	add	objptr, ##28228
0a9e8     F2 26 02 FB | 	rdlong	local05, objptr
0a9ec     03 26 66 F0 | 	shl	local05, #3
0a9f0     02 00 00 FF 
0a9f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9f8     F2 26 02 F1 | 	add	local05, objptr
0a9fc     13 13 02 FB | 	rdlong	arg01, local05
0aa00     00 14 06 F6 | 	mov	arg02, #0
0aa04     35 00 00 FF 
0aa08     0C E4 85 F1 | 	sub	objptr, ##27148
0aa0c     B8 92 B1 FD | 	call	#__system____builtin_atoi
0aa10     FD 24 02 FD | 	qmul	local04, result1
0aa14     18 1E 62 FD | 	getqx	local01
0aa18     1C 22 06 F6 | 	mov	local03, #28
0aa1c                 | LR__0933
0aa1c     0F 29 02 F6 | 	mov	local06, local01
0aa20     10 2B 02 F6 | 	mov	local07, local02
0aa24     11 27 02 F6 | 	mov	local05, local03
0aa28     4A 00 00 FF 
0aa2c     7C E4 05 F1 | 	add	objptr, ##38012
0aa30     F2 1E 02 FB | 	rdlong	local01, objptr
0aa34     0F 25 02 F6 | 	mov	local04, local01
0aa38     01 24 66 F0 | 	shl	local04, #1
0aa3c     0F 25 02 F1 | 	add	local04, local01
0aa40     02 24 66 F0 | 	shl	local04, #2
0aa44     03 00 00 FF 
0aa48     00 E4 85 F1 | 	sub	objptr, ##1536
0aa4c     F2 24 02 F1 | 	add	local04, objptr
0aa50     12 29 62 FC | 	wrlong	local06, local04
0aa54     03 00 00 FF 
0aa58     00 E4 05 F1 | 	add	objptr, ##1536
0aa5c     F2 28 02 FB | 	rdlong	local06, objptr
0aa60     14 1F 02 F6 | 	mov	local01, local06
0aa64     01 1E 66 F0 | 	shl	local01, #1
0aa68     14 1F 02 F1 | 	add	local01, local06
0aa6c     02 1E 66 F0 | 	shl	local01, #2
0aa70     03 00 00 FF 
0aa74     00 E4 85 F1 | 	sub	objptr, ##1536
0aa78     F2 1E 02 F1 | 	add	local01, objptr
0aa7c     04 1E 06 F1 | 	add	local01, #4
0aa80     0F 2B 62 FC | 	wrlong	local07, local01
0aa84     03 00 00 FF 
0aa88     00 E4 05 F1 | 	add	objptr, ##1536
0aa8c     F2 2A 02 FB | 	rdlong	local07, objptr
0aa90     15 29 02 F6 | 	mov	local06, local07
0aa94     01 28 66 F0 | 	shl	local06, #1
0aa98     15 29 02 F1 | 	add	local06, local07
0aa9c     02 28 66 F0 | 	shl	local06, #2
0aaa0     03 00 00 FF 
0aaa4     00 E4 85 F1 | 	sub	objptr, ##1536
0aaa8     F2 28 02 F1 | 	add	local06, objptr
0aaac     08 28 06 F1 | 	add	local06, #8
0aab0     14 27 62 FC | 	wrlong	local05, local06
0aab4     03 00 00 FF 
0aab8     00 E4 05 F1 | 	add	objptr, ##1536
0aabc     F2 28 02 FB | 	rdlong	local06, objptr
0aac0     01 28 06 F1 | 	add	local06, #1
0aac4     F2 28 62 FC | 	wrlong	local06, objptr
0aac8     13 00 00 FF 
0aacc     38 E4 85 F1 | 	sub	objptr, ##9784
0aad0     F2 28 02 FB | 	rdlong	local06, objptr
0aad4     01 28 06 F1 | 	add	local06, #1
0aad8     F2 28 62 FC | 	wrlong	local06, objptr
0aadc     37 00 00 FF 
0aae0     44 E4 85 F1 | 	sub	objptr, ##28228
0aae4     D0 07 90 FD | 	jmp	#LR__0953
0aae8                 | LR__0934
0aae8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0aae8     37 00 00 FF 
0aaec     44 E4 05 F1 | 	add	objptr, ##28228
0aaf0     F2 16 02 FB | 	rdlong	arg03, objptr
0aaf4     03 16 66 F0 | 	shl	arg03, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 16 02 F1 | 	add	arg03, objptr
0ab04     0B 13 02 FB | 	rdlong	arg01, arg03
0ab08     01 14 06 F6 | 	mov	arg02, #1
0ab0c     35 00 00 FF 
0ab10     0C E4 85 F1 | 	sub	objptr, ##27148
0ab14     00 80 B1 FD | 	call	#__system__Left_S
0ab18     FD 12 02 F6 | 	mov	arg01, result1
0ab1c     84 01 00 FF 
0ab20     6D 15 06 F6 | 	mov	arg02, ##@LR__5429
0ab24     9C 5F B1 FD | 	call	#__system___string_cmp
0ab28     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab2c     94 00 90 5D |  if_ne	jmp	#LR__0937
0ab30     37 00 00 FF 
0ab34     44 E4 05 F1 | 	add	objptr, ##28228
0ab38     F2 2A 02 FB | 	rdlong	local07, objptr
0ab3c     15 29 02 F6 | 	mov	local06, local07
0ab40     03 28 66 F0 | 	shl	local06, #3
0ab44     02 00 00 FF 
0ab48     38 E4 85 F1 | 	sub	objptr, ##1080
0ab4c     F2 28 02 F1 | 	add	local06, objptr
0ab50     84 01 00 FF 
0ab54     6F 27 06 F6 | 	mov	local05, ##@LR__5430
0ab58     03 2A 66 F0 | 	shl	local07, #3
0ab5c     F2 2A 02 F1 | 	add	local07, objptr
0ab60     15 2B 02 FB | 	rdlong	local07, local07
0ab64     02 00 00 FF 
0ab68     38 E4 05 F1 | 	add	objptr, ##1080
0ab6c     F2 1E 02 FB | 	rdlong	local01, objptr
0ab70     03 1E 66 F0 | 	shl	local01, #3
0ab74     02 00 00 FF 
0ab78     38 E4 85 F1 | 	sub	objptr, ##1080
0ab7c     F2 1E 02 F1 | 	add	local01, objptr
0ab80     0F 13 02 FB | 	rdlong	arg01, local01
0ab84     35 00 00 FF 
0ab88     0C E4 85 F1 | 	sub	objptr, ##27148
0ab8c     09 2D 02 F6 | 	mov	local08, arg01
0ab90     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0ab94                 | LR__0935
0ab94     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ab98     01 2C 06 51 |  if_ne	add	local08, #1
0ab9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0aba0                 | LR__0936
0aba0     09 2D 82 F1 | 	sub	local08, arg01
0aba4     16 15 02 F6 | 	mov	arg02, local08
0aba8     01 14 86 F1 | 	sub	arg02, #1
0abac     15 13 02 F6 | 	mov	arg01, local07
0abb0     EC 7F B1 FD | 	call	#__system__Right_S
0abb4     FD 14 02 F6 | 	mov	arg02, result1
0abb8     13 13 02 F6 | 	mov	arg01, local05
0abbc     38 5F B1 FD | 	call	#__system___string_concat
0abc0     14 FB 61 FC | 	wrlong	result1, local06
0abc4                 | LR__0937
0abc4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0abc4     37 00 00 FF 
0abc8     44 E4 05 F1 | 	add	objptr, ##28228
0abcc     F2 16 02 FB | 	rdlong	arg03, objptr
0abd0     03 16 66 F0 | 	shl	arg03, #3
0abd4     02 00 00 FF 
0abd8     38 E4 85 F1 | 	sub	objptr, ##1080
0abdc     F2 16 02 F1 | 	add	arg03, objptr
0abe0     0B 13 02 FB | 	rdlong	arg01, arg03
0abe4     01 14 06 F6 | 	mov	arg02, #1
0abe8     35 00 00 FF 
0abec     0C E4 85 F1 | 	sub	objptr, ##27148
0abf0     24 7F B1 FD | 	call	#__system__Left_S
0abf4     FD 12 02 F6 | 	mov	arg01, result1
0abf8     84 01 00 FF 
0abfc     72 15 06 F6 | 	mov	arg02, ##@LR__5431
0ac00     C0 5E B1 FD | 	call	#__system___string_cmp
0ac04     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac08     94 00 90 5D |  if_ne	jmp	#LR__0940
0ac0c     37 00 00 FF 
0ac10     44 E4 05 F1 | 	add	objptr, ##28228
0ac14     F2 2A 02 FB | 	rdlong	local07, objptr
0ac18     15 29 02 F6 | 	mov	local06, local07
0ac1c     03 28 66 F0 | 	shl	local06, #3
0ac20     02 00 00 FF 
0ac24     38 E4 85 F1 | 	sub	objptr, ##1080
0ac28     F2 28 02 F1 | 	add	local06, objptr
0ac2c     84 01 00 FF 
0ac30     74 27 06 F6 | 	mov	local05, ##@LR__5432
0ac34     03 2A 66 F0 | 	shl	local07, #3
0ac38     F2 2A 02 F1 | 	add	local07, objptr
0ac3c     15 2B 02 FB | 	rdlong	local07, local07
0ac40     02 00 00 FF 
0ac44     38 E4 05 F1 | 	add	objptr, ##1080
0ac48     F2 1E 02 FB | 	rdlong	local01, objptr
0ac4c     03 1E 66 F0 | 	shl	local01, #3
0ac50     02 00 00 FF 
0ac54     38 E4 85 F1 | 	sub	objptr, ##1080
0ac58     F2 1E 02 F1 | 	add	local01, objptr
0ac5c     0F 13 02 FB | 	rdlong	arg01, local01
0ac60     35 00 00 FF 
0ac64     0C E4 85 F1 | 	sub	objptr, ##27148
0ac68     09 2D 02 F6 | 	mov	local08, arg01
0ac6c     97 06 48 FB | 	callpa	#(@LR__0939-@LR__0938)>>2,fcache_load_ptr_
0ac70                 | LR__0938
0ac70     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ac74     01 2C 06 51 |  if_ne	add	local08, #1
0ac78     F4 FF 9F 5D |  if_ne	jmp	#LR__0938
0ac7c                 | LR__0939
0ac7c     09 2D 82 F1 | 	sub	local08, arg01
0ac80     16 15 02 F6 | 	mov	arg02, local08
0ac84     01 14 86 F1 | 	sub	arg02, #1
0ac88     15 13 02 F6 | 	mov	arg01, local07
0ac8c     10 7F B1 FD | 	call	#__system__Right_S
0ac90     FD 14 02 F6 | 	mov	arg02, result1
0ac94     13 13 02 F6 | 	mov	arg01, local05
0ac98     5C 5E B1 FD | 	call	#__system___string_concat
0ac9c     14 FB 61 FC | 	wrlong	result1, local06
0aca0                 | LR__0940
0aca0     37 00 00 FF 
0aca4     44 E4 05 F1 | 	add	objptr, ##28228
0aca8     F2 28 02 FB | 	rdlong	local06, objptr
0acac     03 28 66 F0 | 	shl	local06, #3
0acb0     02 00 00 FF 
0acb4     38 E4 85 F1 | 	sub	objptr, ##1080
0acb8     F2 28 02 F1 | 	add	local06, objptr
0acbc     14 13 02 FB | 	rdlong	arg01, local06
0acc0     00 14 06 F6 | 	mov	arg02, #0
0acc4     35 00 00 FF 
0acc8     0C E4 85 F1 | 	sub	objptr, ##27148
0accc     F8 8F B1 FD | 	call	#__system____builtin_atoi
0acd0     FD 24 02 FD | 	qmul	local04, result1
0acd4     4A 00 00 FF 
0acd8     7C E4 05 F1 | 	add	objptr, ##38012
0acdc     F2 28 02 FB | 	rdlong	local06, objptr
0ace0     14 2F 02 F6 | 	mov	local09, local06
0ace4     01 2E 66 F0 | 	shl	local09, #1
0ace8     14 2F 02 F1 | 	add	local09, local06
0acec     02 2E 66 F0 | 	shl	local09, #2
0acf0     03 00 00 FF 
0acf4     00 E4 85 F1 | 	sub	objptr, ##1536
0acf8     F2 2E 02 F1 | 	add	local09, objptr
0acfc     03 00 00 FF 
0ad00     00 E4 05 F1 | 	add	objptr, ##1536
0ad04     18 1E 62 FD | 	getqx	local01
0ad08     1C 22 06 F6 | 	mov	local03, #28
0ad0c     0F 29 02 F6 | 	mov	local06, local01
0ad10     10 2B 02 F6 | 	mov	local07, local02
0ad14     17 29 62 FC | 	wrlong	local06, local09
0ad18     11 2F 02 F6 | 	mov	local09, local03
0ad1c     F2 28 02 FB | 	rdlong	local06, objptr
0ad20     14 27 02 F6 | 	mov	local05, local06
0ad24     01 26 66 F0 | 	shl	local05, #1
0ad28     14 27 02 F1 | 	add	local05, local06
0ad2c     02 26 66 F0 | 	shl	local05, #2
0ad30     03 00 00 FF 
0ad34     00 E4 85 F1 | 	sub	objptr, ##1536
0ad38     F2 26 02 F1 | 	add	local05, objptr
0ad3c     04 26 06 F1 | 	add	local05, #4
0ad40     13 2B 62 FC | 	wrlong	local07, local05
0ad44     03 00 00 FF 
0ad48     00 E4 05 F1 | 	add	objptr, ##1536
0ad4c     F2 2A 02 FB | 	rdlong	local07, objptr
0ad50     15 29 02 F6 | 	mov	local06, local07
0ad54     01 28 66 F0 | 	shl	local06, #1
0ad58     15 29 02 F1 | 	add	local06, local07
0ad5c     02 28 66 F0 | 	shl	local06, #2
0ad60     03 00 00 FF 
0ad64     00 E4 85 F1 | 	sub	objptr, ##1536
0ad68     F2 28 02 F1 | 	add	local06, objptr
0ad6c     08 28 06 F1 | 	add	local06, #8
0ad70     14 2F 62 FC | 	wrlong	local09, local06
0ad74     03 00 00 FF 
0ad78     00 E4 05 F1 | 	add	objptr, ##1536
0ad7c     F2 28 02 FB | 	rdlong	local06, objptr
0ad80     01 28 06 F1 | 	add	local06, #1
0ad84     F2 28 62 FC | 	wrlong	local06, objptr
0ad88     13 00 00 FF 
0ad8c     38 E4 85 F1 | 	sub	objptr, ##9784
0ad90     F2 28 02 FB | 	rdlong	local06, objptr
0ad94     01 28 06 F1 | 	add	local06, #1
0ad98     F2 28 62 FC | 	wrlong	local06, objptr
0ad9c     37 00 00 FF 
0ada0     44 E4 85 F1 | 	sub	objptr, ##28228
0ada4     10 05 90 FD | 	jmp	#LR__0953
0ada8                 | LR__0941
0ada8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ada8     01 24 0E F2 | 	cmp	local04, #1 wz
0adac     48 00 90 5D |  if_ne	jmp	#LR__0942
0adb0     00 C0 1F FF 
0adb4     00 28 06 F6 | 	mov	local06, ##1065353216
0adb8     37 00 00 FF 
0adbc     44 E4 05 F1 | 	add	objptr, ##28228
0adc0     F2 2E 02 FB | 	rdlong	local09, objptr
0adc4     03 2E 66 F0 | 	shl	local09, #3
0adc8     02 00 00 FF 
0adcc     38 E4 85 F1 | 	sub	objptr, ##1080
0add0     F2 2E 02 F1 | 	add	local09, objptr
0add4     17 13 02 FB | 	rdlong	arg01, local09
0add8     35 00 00 FF 
0addc     0C E4 85 F1 | 	sub	objptr, ##27148
0ade0     54 90 B1 FD | 	call	#__system____builtin_atof
0ade4     FD 14 02 F6 | 	mov	arg02, result1
0ade8     14 13 02 F6 | 	mov	arg01, local06
0adec     60 88 B1 FD | 	call	#__system___float_mul
0adf0     FD 1E 02 F6 | 	mov	local01, result1
0adf4     1E 22 06 F6 | 	mov	local03, #30
0adf8                 | LR__0942
0adf8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0adf8     FF FF 7F FF 
0adfc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ae00     48 00 90 5D |  if_ne	jmp	#LR__0943
0ae04     00 C0 5F FF 
0ae08     00 28 06 F6 | 	mov	local06, ##-1082130432
0ae0c     37 00 00 FF 
0ae10     44 E4 05 F1 | 	add	objptr, ##28228
0ae14     F2 2E 02 FB | 	rdlong	local09, objptr
0ae18     03 2E 66 F0 | 	shl	local09, #3
0ae1c     02 00 00 FF 
0ae20     38 E4 85 F1 | 	sub	objptr, ##1080
0ae24     F2 2E 02 F1 | 	add	local09, objptr
0ae28     17 13 02 FB | 	rdlong	arg01, local09
0ae2c     35 00 00 FF 
0ae30     0C E4 85 F1 | 	sub	objptr, ##27148
0ae34     00 90 B1 FD | 	call	#__system____builtin_atof
0ae38     FD 14 02 F6 | 	mov	arg02, result1
0ae3c     14 13 02 F6 | 	mov	arg01, local06
0ae40     0C 88 B1 FD | 	call	#__system___float_mul
0ae44     FD 1E 02 F6 | 	mov	local01, result1
0ae48     1E 22 06 F6 | 	mov	local03, #30
0ae4c                 | LR__0943
0ae4c     0F 29 02 F6 | 	mov	local06, local01
0ae50     10 2B 02 F6 | 	mov	local07, local02
0ae54     11 27 02 F6 | 	mov	local05, local03
0ae58     4A 00 00 FF 
0ae5c     7C E4 05 F1 | 	add	objptr, ##38012
0ae60     F2 1E 02 FB | 	rdlong	local01, objptr
0ae64     0F 2F 02 F6 | 	mov	local09, local01
0ae68     01 2E 66 F0 | 	shl	local09, #1
0ae6c     0F 2F 02 F1 | 	add	local09, local01
0ae70     02 2E 66 F0 | 	shl	local09, #2
0ae74     03 00 00 FF 
0ae78     00 E4 85 F1 | 	sub	objptr, ##1536
0ae7c     F2 2E 02 F1 | 	add	local09, objptr
0ae80     17 29 62 FC | 	wrlong	local06, local09
0ae84     03 00 00 FF 
0ae88     00 E4 05 F1 | 	add	objptr, ##1536
0ae8c     F2 2E 02 FB | 	rdlong	local09, objptr
0ae90     17 29 02 F6 | 	mov	local06, local09
0ae94     01 28 66 F0 | 	shl	local06, #1
0ae98     17 29 02 F1 | 	add	local06, local09
0ae9c     02 28 66 F0 | 	shl	local06, #2
0aea0     03 00 00 FF 
0aea4     00 E4 85 F1 | 	sub	objptr, ##1536
0aea8     F2 28 02 F1 | 	add	local06, objptr
0aeac     04 28 06 F1 | 	add	local06, #4
0aeb0     14 2B 62 FC | 	wrlong	local07, local06
0aeb4     03 00 00 FF 
0aeb8     00 E4 05 F1 | 	add	objptr, ##1536
0aebc     F2 2E 02 FB | 	rdlong	local09, objptr
0aec0     17 2B 02 F6 | 	mov	local07, local09
0aec4     01 2A 66 F0 | 	shl	local07, #1
0aec8     17 2B 02 F1 | 	add	local07, local09
0aecc     02 2A 66 F0 | 	shl	local07, #2
0aed0     03 00 00 FF 
0aed4     00 E4 85 F1 | 	sub	objptr, ##1536
0aed8     F2 2A 02 F1 | 	add	local07, objptr
0aedc     08 2A 06 F1 | 	add	local07, #8
0aee0     15 27 62 FC | 	wrlong	local05, local07
0aee4     03 00 00 FF 
0aee8     00 E4 05 F1 | 	add	objptr, ##1536
0aeec     F2 28 02 FB | 	rdlong	local06, objptr
0aef0     01 28 06 F1 | 	add	local06, #1
0aef4     F2 28 62 FC | 	wrlong	local06, objptr
0aef8     13 00 00 FF 
0aefc     38 E4 85 F1 | 	sub	objptr, ##9784
0af00     F2 28 02 FB | 	rdlong	local06, objptr
0af04     01 28 06 F1 | 	add	local06, #1
0af08     F2 28 62 FC | 	wrlong	local06, objptr
0af0c     37 00 00 FF 
0af10     44 E4 85 F1 | 	sub	objptr, ##28228
0af14     A0 03 90 FD | 	jmp	#LR__0953
0af18                 | LR__0944
0af18     1F 22 06 F6 | 	mov	local03, #31
0af1c     37 00 00 FF 
0af20     44 E4 05 F1 | 	add	objptr, ##28228
0af24     F2 16 02 FB | 	rdlong	arg03, objptr
0af28     03 16 66 F0 | 	shl	arg03, #3
0af2c     02 00 00 FF 
0af30     38 E4 85 F1 | 	sub	objptr, ##1080
0af34     F2 16 02 F1 | 	add	arg03, objptr
0af38     0B 13 02 FB | 	rdlong	arg01, arg03
0af3c     35 00 00 FF 
0af40     0C E4 85 F1 | 	sub	objptr, ##27148
0af44     09 2D 02 F6 | 	mov	local08, arg01
0af48     97 06 48 FB | 	callpa	#(@LR__0946-@LR__0945)>>2,fcache_load_ptr_
0af4c                 | LR__0945
0af4c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0af50     01 2C 06 51 |  if_ne	add	local08, #1
0af54     F4 FF 9F 5D |  if_ne	jmp	#LR__0945
0af58                 | LR__0946
0af58     09 2D 82 F1 | 	sub	local08, arg01
0af5c     16 FB 01 F6 | 	mov	result1, local08
0af60     51 00 00 FF 
0af64     F0 E5 05 F1 | 	add	objptr, ##41968
0af68     F2 FA 61 FC | 	wrlong	result1, objptr
0af6c     48 E4 85 F1 | 	sub	objptr, #72
0af70     F2 12 02 FB | 	rdlong	arg01, objptr
0af74     FD 12 82 F1 | 	sub	arg01, result1
0af78     04 12 86 F1 | 	sub	arg01, #4
0af7c     03 12 26 F5 | 	andn	arg01, #3
0af80     F2 12 62 FC | 	wrlong	arg01, objptr
0af84     48 E4 05 F1 | 	add	objptr, #72
0af88     F2 14 02 FB | 	rdlong	arg02, objptr
0af8c     51 00 00 FF 
0af90     F0 E5 85 F1 | 	sub	objptr, ##41968
0af94     D0 26 B1 FD | 	call	#_pslpoke
0af98                 | '     pslpoke memtop,l
0af98                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0af98     01 30 06 F6 | 	mov	local10, #1
0af9c     51 00 00 FF 
0afa0     F0 E5 05 F1 | 	add	objptr, ##41968
0afa4     F2 32 02 FB | 	rdlong	local11, objptr
0afa8     51 00 00 FF 
0afac     F0 E5 85 F1 | 	sub	objptr, ##41968
0afb0     01 32 06 F1 | 	add	local11, #1
0afb4                 | LR__0947
0afb4     19 31 52 F2 | 	cmps	local10, local11 wc
0afb8     5C 00 90 3D |  if_ae	jmp	#LR__0948
0afbc     51 00 00 FF 
0afc0     A8 E5 05 F1 | 	add	objptr, ##41896
0afc4     F2 2A 02 FB | 	rdlong	local07, objptr
0afc8     03 2A 06 F1 | 	add	local07, #3
0afcc     18 2B 02 F1 | 	add	local07, local10
0afd0     1A 00 00 FF 
0afd4     64 E5 85 F1 | 	sub	objptr, ##13668
0afd8     F2 2E 02 FB | 	rdlong	local09, objptr
0afdc     03 2E 66 F0 | 	shl	local09, #3
0afe0     02 00 00 FF 
0afe4     38 E4 85 F1 | 	sub	objptr, ##1080
0afe8     F2 2E 02 F1 | 	add	local09, objptr
0afec     17 13 02 FB | 	rdlong	arg01, local09
0aff0     18 15 02 F6 | 	mov	arg02, local10
0aff4     01 16 06 F6 | 	mov	arg03, #1
0aff8     35 00 00 FF 
0affc     0C E4 85 F1 | 	sub	objptr, ##27148
0b000     2C 7C B1 FD | 	call	#__system__Mid_S
0b004     FD 14 C2 FA | 	rdbyte	arg02, result1
0b008     15 13 02 F6 | 	mov	arg01, local07
0b00c     E8 26 B1 FD | 	call	#_pspoke
0b010     01 30 06 F1 | 	add	local10, #1
0b014     9C FF 9F FD | 	jmp	#LR__0947
0b018                 | LR__0948
0b018     51 00 00 FF 
0b01c     A8 E5 05 F1 | 	add	objptr, ##41896
0b020     F2 1E 02 FB | 	rdlong	local01, objptr
0b024     2B 22 06 F6 | 	mov	local03, #43
0b028     0F 29 02 F6 | 	mov	local06, local01
0b02c     10 2B 02 F6 | 	mov	local07, local02
0b030     11 33 02 F6 | 	mov	local11, local03
0b034     07 00 00 FF 
0b038     2C E5 85 F1 | 	sub	objptr, ##3884
0b03c     F2 30 02 FB | 	rdlong	local10, objptr
0b040     18 2F 02 F6 | 	mov	local09, local10
0b044     01 2E 66 F0 | 	shl	local09, #1
0b048     18 2F 02 F1 | 	add	local09, local10
0b04c     02 2E 66 F0 | 	shl	local09, #2
0b050     03 00 00 FF 
0b054     00 E4 85 F1 | 	sub	objptr, ##1536
0b058     F2 2E 02 F1 | 	add	local09, objptr
0b05c     17 29 62 FC | 	wrlong	local06, local09
0b060     03 00 00 FF 
0b064     00 E4 05 F1 | 	add	objptr, ##1536
0b068     F2 30 02 FB | 	rdlong	local10, objptr
0b06c     18 2F 02 F6 | 	mov	local09, local10
0b070     01 2E 66 F0 | 	shl	local09, #1
0b074     18 2F 02 F1 | 	add	local09, local10
0b078     02 2E 66 F0 | 	shl	local09, #2
0b07c     03 00 00 FF 
0b080     00 E4 85 F1 | 	sub	objptr, ##1536
0b084     F2 2E 02 F1 | 	add	local09, objptr
0b088     04 2E 06 F1 | 	add	local09, #4
0b08c     17 2B 62 FC | 	wrlong	local07, local09
0b090     03 00 00 FF 
0b094     00 E4 05 F1 | 	add	objptr, ##1536
0b098     F2 30 02 FB | 	rdlong	local10, objptr
0b09c     18 2F 02 F6 | 	mov	local09, local10
0b0a0     01 2E 66 F0 | 	shl	local09, #1
0b0a4     18 2F 02 F1 | 	add	local09, local10
0b0a8     02 2E 66 F0 | 	shl	local09, #2
0b0ac     03 00 00 FF 
0b0b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b0b4     F2 2E 02 F1 | 	add	local09, objptr
0b0b8     08 2E 06 F1 | 	add	local09, #8
0b0bc     17 33 62 FC | 	wrlong	local11, local09
0b0c0     03 00 00 FF 
0b0c4     00 E4 05 F1 | 	add	objptr, ##1536
0b0c8     F2 28 02 FB | 	rdlong	local06, objptr
0b0cc     01 28 06 F1 | 	add	local06, #1
0b0d0     F2 28 62 FC | 	wrlong	local06, objptr
0b0d4     13 00 00 FF 
0b0d8     38 E4 85 F1 | 	sub	objptr, ##9784
0b0dc     F2 28 02 FB | 	rdlong	local06, objptr
0b0e0     01 28 06 F1 | 	add	local06, #1
0b0e4     F2 28 62 FC | 	wrlong	local06, objptr
0b0e8     37 00 00 FF 
0b0ec     44 E4 85 F1 | 	sub	objptr, ##28228
0b0f0     C4 01 90 FD | 	jmp	#LR__0953
0b0f4                 | LR__0949
0b0f4     2C 22 06 F6 | 	mov	local03, #44
0b0f8     37 00 00 FF 
0b0fc     44 E4 05 F1 | 	add	objptr, ##28228
0b100     F2 28 02 FB | 	rdlong	local06, objptr
0b104     03 28 66 F0 | 	shl	local06, #3
0b108     02 00 00 FF 
0b10c     38 E4 85 F1 | 	sub	objptr, ##1080
0b110     F2 28 02 F1 | 	add	local06, objptr
0b114     14 13 02 FB | 	rdlong	arg01, local06
0b118     00 14 06 F6 | 	mov	arg02, #0
0b11c     35 00 00 FF 
0b120     0C E4 85 F1 | 	sub	objptr, ##27148
0b124     A0 8B B1 FD | 	call	#__system____builtin_atoi
0b128     FD 1E 02 F6 | 	mov	local01, result1
0b12c     0F 29 02 F6 | 	mov	local06, local01
0b130     10 2B 02 F6 | 	mov	local07, local02
0b134     11 33 02 F6 | 	mov	local11, local03
0b138     4A 00 00 FF 
0b13c     7C E4 05 F1 | 	add	objptr, ##38012
0b140     F2 30 02 FB | 	rdlong	local10, objptr
0b144     18 2F 02 F6 | 	mov	local09, local10
0b148     01 2E 66 F0 | 	shl	local09, #1
0b14c     18 2F 02 F1 | 	add	local09, local10
0b150     02 2E 66 F0 | 	shl	local09, #2
0b154     03 00 00 FF 
0b158     00 E4 85 F1 | 	sub	objptr, ##1536
0b15c     F2 2E 02 F1 | 	add	local09, objptr
0b160     17 29 62 FC | 	wrlong	local06, local09
0b164     03 00 00 FF 
0b168     00 E4 05 F1 | 	add	objptr, ##1536
0b16c     F2 30 02 FB | 	rdlong	local10, objptr
0b170     18 2F 02 F6 | 	mov	local09, local10
0b174     01 2E 66 F0 | 	shl	local09, #1
0b178     18 2F 02 F1 | 	add	local09, local10
0b17c     02 2E 66 F0 | 	shl	local09, #2
0b180     03 00 00 FF 
0b184     00 E4 85 F1 | 	sub	objptr, ##1536
0b188     F2 2E 02 F1 | 	add	local09, objptr
0b18c     04 2E 06 F1 | 	add	local09, #4
0b190     17 2B 62 FC | 	wrlong	local07, local09
0b194     03 00 00 FF 
0b198     00 E4 05 F1 | 	add	objptr, ##1536
0b19c     F2 30 02 FB | 	rdlong	local10, objptr
0b1a0     18 2F 02 F6 | 	mov	local09, local10
0b1a4     01 2E 66 F0 | 	shl	local09, #1
0b1a8     18 2F 02 F1 | 	add	local09, local10
0b1ac     02 2E 66 F0 | 	shl	local09, #2
0b1b0     03 00 00 FF 
0b1b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1b8     F2 2E 02 F1 | 	add	local09, objptr
0b1bc     08 2E 06 F1 | 	add	local09, #8
0b1c0     17 33 62 FC | 	wrlong	local11, local09
0b1c4     03 00 00 FF 
0b1c8     00 E4 05 F1 | 	add	objptr, ##1536
0b1cc     F2 28 02 FB | 	rdlong	local06, objptr
0b1d0     01 28 06 F1 | 	add	local06, #1
0b1d4     F2 28 62 FC | 	wrlong	local06, objptr
0b1d8     13 00 00 FF 
0b1dc     38 E4 85 F1 | 	sub	objptr, ##9784
0b1e0     F2 28 02 FB | 	rdlong	local06, objptr
0b1e4     01 28 06 F1 | 	add	local06, #1
0b1e8     F2 28 62 FC | 	wrlong	local06, objptr
0b1ec     37 00 00 FF 
0b1f0     44 E4 85 F1 | 	sub	objptr, ##28228
0b1f4     C0 00 90 FD | 	jmp	#LR__0953
0b1f8                 | LR__0950
0b1f8     12 13 02 F6 | 	mov	arg01, local04
0b1fc     B8 03 B0 FD | 	call	#_getvar
0b200     37 00 00 FF 
0b204     44 E4 05 F1 | 	add	objptr, ##28228
0b208     F2 28 02 FB | 	rdlong	local06, objptr
0b20c     01 28 06 F1 | 	add	local06, #1
0b210     F2 28 62 FC | 	wrlong	local06, objptr
0b214     37 00 00 FF 
0b218     44 E4 85 F1 | 	sub	objptr, ##28228
0b21c     98 00 90 FD | 	jmp	#LR__0953
0b220                 | LR__0951
0b220     37 00 00 FF 
0b224     44 E4 05 F1 | 	add	objptr, ##28228
0b228     F2 28 02 FB | 	rdlong	local06, objptr
0b22c     01 28 06 F1 | 	add	local06, #1
0b230     F2 28 62 FC | 	wrlong	local06, objptr
0b234     37 00 00 FF 
0b238     44 E4 85 F1 | 	sub	objptr, ##28228
0b23c     58 F1 BF FD | 	call	#_expr
0b240                 | '     ct+=1
0b240                 | '     expr() 
0b240                 | '     if lparts(ct).token=token_rpar then ct+=1
0b240     37 00 00 FF 
0b244     44 E4 05 F1 | 	add	objptr, ##28228
0b248     F2 32 02 FB | 	rdlong	local11, objptr
0b24c     03 32 66 F0 | 	shl	local11, #3
0b250     02 00 00 FF 
0b254     38 E4 85 F1 | 	sub	objptr, ##1080
0b258     F2 32 02 F1 | 	add	local11, objptr
0b25c     04 32 06 F1 | 	add	local11, #4
0b260     19 33 02 FB | 	rdlong	local11, local11
0b264     14 32 0E F2 | 	cmp	local11, #20 wz
0b268     35 00 00 FF 
0b26c     0C E4 85 F1 | 	sub	objptr, ##27148
0b270     44 00 90 5D |  if_ne	jmp	#LR__0953
0b274     37 00 00 FF 
0b278     44 E4 05 F1 | 	add	objptr, ##28228
0b27c     F2 28 02 FB | 	rdlong	local06, objptr
0b280     01 28 06 F1 | 	add	local06, #1
0b284     F2 28 62 FC | 	wrlong	local06, objptr
0b288     37 00 00 FF 
0b28c     44 E4 85 F1 | 	sub	objptr, ##28228
0b290     24 00 90 FD | 	jmp	#LR__0953
0b294                 | LR__0952
0b294     12 13 02 F6 | 	mov	arg01, local04
0b298     28 00 B0 FD | 	call	#_getfun
0b29c     37 00 00 FF 
0b2a0     44 E4 05 F1 | 	add	objptr, ##28228
0b2a4     F2 28 02 FB | 	rdlong	local06, objptr
0b2a8     01 28 06 F1 | 	add	local06, #1
0b2ac     F2 28 62 FC | 	wrlong	local06, objptr
0b2b0     37 00 00 FF 
0b2b4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2b8                 | LR__0953
0b2b8     A7 F0 03 F6 | 	mov	ptra, fp
0b2bc     B2 00 A0 FD | 	call	#popregs_
0b2c0                 | _getvalue_ret
0b2c0     2D 00 64 FD | 	ret
0b2c4                 | 
0b2c4                 | ' 
0b2c4                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0b2c4                 | _getfun
0b2c4     0A 4A 05 F6 | 	mov	COUNT_, #10
0b2c8     A8 00 A0 FD | 	call	#pushregs_
0b2cc                 | _getfun_enter
0b2cc     09 25 02 F6 | 	mov	local04, arg01
0b2d0     37 00 00 FF 
0b2d4     44 E4 05 F1 | 	add	objptr, ##28228
0b2d8     F2 26 02 FB | 	rdlong	local05, objptr
0b2dc     13 29 02 F6 | 	mov	local06, local05
0b2e0     00 2A 06 F6 | 	mov	local07, #0
0b2e4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0b2e4                 | ' oldct=ct
0b2e4                 | ' numpar=0
0b2e4                 | '   
0b2e4                 | ' if lparts(ct+1).token=token_lpar then
0b2e4     01 26 06 F1 | 	add	local05, #1
0b2e8     03 26 66 F0 | 	shl	local05, #3
0b2ec     02 00 00 FF 
0b2f0     38 E4 85 F1 | 	sub	objptr, ##1080
0b2f4     F2 26 02 F1 | 	add	local05, objptr
0b2f8     04 26 06 F1 | 	add	local05, #4
0b2fc     13 27 02 FB | 	rdlong	local05, local05
0b300     15 26 0E F2 | 	cmp	local05, #21 wz
0b304     35 00 00 FF 
0b308     0C E4 85 F1 | 	sub	objptr, ##27148
0b30c     08 01 90 5D |  if_ne	jmp	#LR__0964
0b310     37 00 00 FF 
0b314     44 E4 05 F1 | 	add	objptr, ##28228
0b318     F2 2C 02 FB | 	rdlong	local08, objptr
0b31c     01 2C 06 F1 | 	add	local08, #1
0b320     F2 2C 62 FC | 	wrlong	local08, objptr
0b324     37 00 00 FF 
0b328     44 E4 85 F1 | 	sub	objptr, ##28228
0b32c                 | '   ct+=1 											' omit this lpar, this is for expr list
0b32c                 | '   do
0b32c                 | LR__0960
0b32c     37 00 00 FF 
0b330     44 E4 05 F1 | 	add	objptr, ##28228
0b334     F2 26 02 FB | 	rdlong	local05, objptr
0b338     01 26 06 F1 | 	add	local05, #1
0b33c     F2 26 62 FC | 	wrlong	local05, objptr
0b340                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b340                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b340     03 26 66 F0 | 	shl	local05, #3
0b344     02 00 00 FF 
0b348     38 E4 85 F1 | 	sub	objptr, ##1080
0b34c     F2 26 02 F1 | 	add	local05, objptr
0b350     04 26 06 F1 | 	add	local05, #4
0b354     13 2D 02 FB | 	rdlong	local08, local05
0b358     15 2C 0E F2 | 	cmp	local08, #21 wz
0b35c     35 00 00 FF 
0b360     0C E4 85 F1 | 	sub	objptr, ##27148
0b364     40 00 90 5D |  if_ne	jmp	#LR__0961
0b368     37 00 00 FF 
0b36c     44 E4 05 F1 | 	add	objptr, ##28228
0b370     F2 2C 02 FB | 	rdlong	local08, objptr
0b374     01 2C 06 F1 | 	add	local08, #1
0b378     F2 2C 62 FC | 	wrlong	local08, objptr
0b37c     37 00 00 FF 
0b380     44 E4 85 F1 | 	sub	objptr, ##28228
0b384     10 F0 BF FD | 	call	#_expr
0b388     37 00 00 FF 
0b38c     44 E4 05 F1 | 	add	objptr, ##28228
0b390     F2 2C 02 FB | 	rdlong	local08, objptr
0b394     01 2C 06 F1 | 	add	local08, #1
0b398     F2 2C 62 FC | 	wrlong	local08, objptr
0b39c     37 00 00 FF 
0b3a0     44 E4 85 F1 | 	sub	objptr, ##28228
0b3a4     04 00 90 FD | 	jmp	#LR__0962
0b3a8                 | LR__0961
0b3a8     EC EF BF FD | 	call	#_expr
0b3ac                 | LR__0962
0b3ac     01 2A 06 F1 | 	add	local07, #1
0b3b0     37 00 00 FF 
0b3b4     44 E4 05 F1 | 	add	objptr, ##28228
0b3b8     F2 26 02 FB | 	rdlong	local05, objptr
0b3bc     03 26 66 F0 | 	shl	local05, #3
0b3c0     02 00 00 FF 
0b3c4     38 E4 85 F1 | 	sub	objptr, ##1080
0b3c8     F2 26 02 F1 | 	add	local05, objptr
0b3cc     04 26 06 F1 | 	add	local05, #4
0b3d0     13 2D 02 FB | 	rdlong	local08, local05
0b3d4     14 2C 0E F2 | 	cmp	local08, #20 wz
0b3d8     35 00 00 FF 
0b3dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b3e0     34 00 90 AD |  if_e	jmp	#LR__0963
0b3e4     37 00 00 FF 
0b3e8     44 E4 05 F1 | 	add	objptr, ##28228
0b3ec     F2 2C 02 FB | 	rdlong	local08, objptr
0b3f0     03 2C 66 F0 | 	shl	local08, #3
0b3f4     02 00 00 FF 
0b3f8     38 E4 85 F1 | 	sub	objptr, ##1080
0b3fc     F2 2C 02 F1 | 	add	local08, objptr
0b400     04 2C 06 F1 | 	add	local08, #4
0b404     16 2D 02 FB | 	rdlong	local08, local08
0b408     FE 2D 0E F2 | 	cmp	local08, #510 wz
0b40c     35 00 00 FF 
0b410     0C E4 85 F1 | 	sub	objptr, ##27148
0b414     14 FF 9F 5D |  if_ne	jmp	#LR__0960
0b418                 | LR__0963
0b418                 | LR__0964
0b418     15 1F 02 F6 | 	mov	local01, local07
0b41c     03 28 66 F0 | 	shl	local06, #3
0b420     35 00 00 FF 
0b424     0C E4 05 F1 | 	add	objptr, ##27148
0b428     F2 28 02 F1 | 	add	local06, objptr
0b42c     04 28 06 F1 | 	add	local06, #4
0b430     14 23 02 FB | 	rdlong	local03, local06
0b434     0F 2D 02 F6 | 	mov	local08, local01
0b438     10 2B 02 F6 | 	mov	local07, local02
0b43c     11 29 02 F6 | 	mov	local06, local03
0b440     15 00 00 FF 
0b444     70 E4 05 F1 | 	add	objptr, ##10864
0b448     F2 26 02 FB | 	rdlong	local05, objptr
0b44c     13 13 02 F6 | 	mov	arg01, local05
0b450     01 12 66 F0 | 	shl	arg01, #1
0b454     13 13 02 F1 | 	add	arg01, local05
0b458     02 12 66 F0 | 	shl	arg01, #2
0b45c     03 00 00 FF 
0b460     00 E4 85 F1 | 	sub	objptr, ##1536
0b464     F2 12 02 F1 | 	add	arg01, objptr
0b468     09 2D 62 FC | 	wrlong	local08, arg01
0b46c     03 00 00 FF 
0b470     00 E4 05 F1 | 	add	objptr, ##1536
0b474     F2 2C 02 FB | 	rdlong	local08, objptr
0b478     16 2F 02 F6 | 	mov	local09, local08
0b47c     01 2E 66 F0 | 	shl	local09, #1
0b480     16 2F 02 F1 | 	add	local09, local08
0b484     02 2E 66 F0 | 	shl	local09, #2
0b488     03 00 00 FF 
0b48c     00 E4 85 F1 | 	sub	objptr, ##1536
0b490     F2 2E 02 F1 | 	add	local09, objptr
0b494     04 2E 06 F1 | 	add	local09, #4
0b498     17 2B 62 FC | 	wrlong	local07, local09
0b49c     03 00 00 FF 
0b4a0     00 E4 05 F1 | 	add	objptr, ##1536
0b4a4     F2 2C 02 FB | 	rdlong	local08, objptr
0b4a8     16 31 02 F6 | 	mov	local10, local08
0b4ac     01 30 66 F0 | 	shl	local10, #1
0b4b0     16 31 02 F1 | 	add	local10, local08
0b4b4     02 30 66 F0 | 	shl	local10, #2
0b4b8     03 00 00 FF 
0b4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c0     F2 30 02 F1 | 	add	local10, objptr
0b4c4     08 30 06 F1 | 	add	local10, #8
0b4c8     18 29 62 FC | 	wrlong	local06, local10
0b4cc     03 00 00 FF 
0b4d0     00 E4 05 F1 | 	add	objptr, ##1536
0b4d4     F2 2C 02 FB | 	rdlong	local08, objptr
0b4d8     01 2C 06 F1 | 	add	local08, #1
0b4dc     F2 2C 62 FC | 	wrlong	local08, objptr
0b4e0     4A 00 00 FF 
0b4e4     7C E4 85 F1 | 	sub	objptr, ##38012
0b4e8                 | ' 
0b4e8                 | ' t2.result.uresult=numpar
0b4e8                 | ' 
0b4e8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b4e8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b4e8                 | ' 
0b4e8                 | '   
0b4e8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b4e8     FF FF 7F FF 
0b4ec     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b4f0     B8 00 90 5D |  if_ne	jmp	#LR__0965
0b4f4     15 22 06 F6 | 	mov	local03, #21
0b4f8     0F 2D 02 F6 | 	mov	local08, local01
0b4fc     10 2B 02 F6 | 	mov	local07, local02
0b500     11 29 02 F6 | 	mov	local06, local03
0b504     4A 00 00 FF 
0b508     7C E4 05 F1 | 	add	objptr, ##38012
0b50c     F2 26 02 FB | 	rdlong	local05, objptr
0b510     13 13 02 F6 | 	mov	arg01, local05
0b514     01 12 66 F0 | 	shl	arg01, #1
0b518     13 13 02 F1 | 	add	arg01, local05
0b51c     02 12 66 F0 | 	shl	arg01, #2
0b520     03 00 00 FF 
0b524     00 E4 85 F1 | 	sub	objptr, ##1536
0b528     F2 12 02 F1 | 	add	arg01, objptr
0b52c     09 2D 62 FC | 	wrlong	local08, arg01
0b530     03 00 00 FF 
0b534     00 E4 05 F1 | 	add	objptr, ##1536
0b538     F2 30 02 FB | 	rdlong	local10, objptr
0b53c     18 2F 02 F6 | 	mov	local09, local10
0b540     01 2E 66 F0 | 	shl	local09, #1
0b544     18 2F 02 F1 | 	add	local09, local10
0b548     02 2E 66 F0 | 	shl	local09, #2
0b54c     03 00 00 FF 
0b550     00 E4 85 F1 | 	sub	objptr, ##1536
0b554     F2 2E 02 F1 | 	add	local09, objptr
0b558     04 2E 06 F1 | 	add	local09, #4
0b55c     17 2B 62 FC | 	wrlong	local07, local09
0b560     03 00 00 FF 
0b564     00 E4 05 F1 | 	add	objptr, ##1536
0b568     F2 2E 02 FB | 	rdlong	local09, objptr
0b56c     17 31 02 F6 | 	mov	local10, local09
0b570     01 30 66 F0 | 	shl	local10, #1
0b574     17 31 02 F1 | 	add	local10, local09
0b578     02 30 66 F0 | 	shl	local10, #2
0b57c     03 00 00 FF 
0b580     00 E4 85 F1 | 	sub	objptr, ##1536
0b584     F2 30 02 F1 | 	add	local10, objptr
0b588     08 30 06 F1 | 	add	local10, #8
0b58c     18 29 62 FC | 	wrlong	local06, local10
0b590     03 00 00 FF 
0b594     00 E4 05 F1 | 	add	objptr, ##1536
0b598     F2 2C 02 FB | 	rdlong	local08, objptr
0b59c     01 2C 06 F1 | 	add	local08, #1
0b5a0     F2 2C 62 FC | 	wrlong	local08, objptr
0b5a4     4A 00 00 FF 
0b5a8     7C E4 85 F1 | 	sub	objptr, ##38012
0b5ac                 | LR__0965
0b5ac     A7 F0 03 F6 | 	mov	ptra, fp
0b5b0     B2 00 A0 FD | 	call	#popregs_
0b5b4                 | _getfun_ret
0b5b4     2D 00 64 FD | 	ret
0b5b8                 | 
0b5b8                 | '   
0b5b8                 | '   
0b5b8                 | ' sub getvar(m as integer) 
0b5b8                 | _getvar
0b5b8     0A 4A 05 F6 | 	mov	COUNT_, #10
0b5bc     A8 00 A0 FD | 	call	#pushregs_
0b5c0                 | _getvar_enter
0b5c0     09 25 02 F6 | 	mov	local04, arg01
0b5c4     37 00 00 FF 
0b5c8     44 E4 05 F1 | 	add	objptr, ##28228
0b5cc     F2 14 02 FB | 	rdlong	arg02, objptr
0b5d0     03 14 66 F0 | 	shl	arg02, #3
0b5d4     02 00 00 FF 
0b5d8     38 E4 85 F1 | 	sub	objptr, ##1080
0b5dc     F2 14 02 F1 | 	add	arg02, objptr
0b5e0     0A 27 02 FB | 	rdlong	local05, arg02
0b5e4     13 13 02 F6 | 	mov	arg01, local05
0b5e8     01 14 06 F6 | 	mov	arg02, #1
0b5ec     35 00 00 FF 
0b5f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f4     A8 75 B1 FD | 	call	#__system__Right_S
0b5f8     FD 28 02 F6 | 	mov	local06, result1
0b5fc     01 2A 66 F6 | 	neg	local07, #1
0b600                 | ' 
0b600                 | ' varname$=lparts(ct).part$
0b600                 | ' suffix$=right$(varname$,1)
0b600                 | ' j=-1
0b600                 | ' 
0b600                 | ' for i=0 to varnum-1
0b600     00 2C 06 F6 | 	mov	local08, #0
0b604     35 00 00 FF 
0b608     08 E4 05 F1 | 	add	objptr, ##27144
0b60c     F2 2E 02 FB | 	rdlong	local09, objptr
0b610     35 00 00 FF 
0b614     08 E4 85 F1 | 	sub	objptr, ##27144
0b618                 | LR__0970
0b618     17 2D 52 F2 | 	cmps	local08, local09 wc
0b61c     38 00 90 3D |  if_ae	jmp	#LR__0971
0b620                 | '   if variables(i).name=varname$ then j=i : exit
0b620     16 15 02 F6 | 	mov	arg02, local08
0b624     04 14 66 F0 | 	shl	arg02, #4
0b628     14 00 00 FF 
0b62c     F8 E5 05 F1 | 	add	objptr, ##10744
0b630     F2 14 02 F1 | 	add	arg02, objptr
0b634     0A 13 02 FB | 	rdlong	arg01, arg02
0b638     13 15 02 F6 | 	mov	arg02, local05
0b63c     14 00 00 FF 
0b640     F8 E5 85 F1 | 	sub	objptr, ##10744
0b644     7C 54 B1 FD | 	call	#__system___string_cmp
0b648     00 FA 0D F2 | 	cmp	result1, #0 wz
0b64c     16 2B 02 A6 |  if_e	mov	local07, local08
0b650     01 2C 06 51 |  if_ne	add	local08, #1
0b654     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0b658                 | LR__0971
0b658                 | ' if  j=-1 andalso varnum<maxvars then   
0b658     FF FF 7F FF 
0b65c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b660     A8 00 90 5D |  if_ne	jmp	#LR__0972
0b664     35 00 00 FF 
0b668     08 E4 05 F1 | 	add	objptr, ##27144
0b66c     F2 2E 02 FB | 	rdlong	local09, objptr
0b670     35 00 00 FF 
0b674     08 E4 85 F1 | 	sub	objptr, ##27144
0b678     02 00 00 FF 
0b67c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b680     88 00 90 3D |  if_ae	jmp	#LR__0972
0b684     35 00 00 FF 
0b688     08 E4 05 F1 | 	add	objptr, ##27144
0b68c     F2 2E 02 FB | 	rdlong	local09, objptr
0b690     04 2E 66 F0 | 	shl	local09, #4
0b694     20 00 00 FF 
0b698     10 E4 85 F1 | 	sub	objptr, ##16400
0b69c     F2 2E 02 F1 | 	add	local09, objptr
0b6a0     17 27 62 FC | 	wrlong	local05, local09
0b6a4     20 00 00 FF 
0b6a8     10 E4 05 F1 | 	add	objptr, ##16400
0b6ac     F2 2E 02 FB | 	rdlong	local09, objptr
0b6b0     04 2E 66 F0 | 	shl	local09, #4
0b6b4     20 00 00 FF 
0b6b8     10 E4 85 F1 | 	sub	objptr, ##16400
0b6bc     F2 2E 02 F1 | 	add	local09, objptr
0b6c0     04 2E 06 F1 | 	add	local09, #4
0b6c4     17 01 68 FC | 	wrlong	#0, local09
0b6c8     20 00 00 FF 
0b6cc     10 E4 05 F1 | 	add	objptr, ##16400
0b6d0     F2 2E 02 FB | 	rdlong	local09, objptr
0b6d4     04 2E 66 F0 | 	shl	local09, #4
0b6d8     20 00 00 FF 
0b6dc     10 E4 85 F1 | 	sub	objptr, ##16400
0b6e0     F2 2E 02 F1 | 	add	local09, objptr
0b6e4     0C 2E 06 F1 | 	add	local09, #12
0b6e8     17 39 68 FC | 	wrlong	#28, local09
0b6ec     20 00 00 FF 
0b6f0     10 E4 05 F1 | 	add	objptr, ##16400
0b6f4     F2 2E 02 FB | 	rdlong	local09, objptr
0b6f8     17 2B 02 F6 | 	mov	local07, local09
0b6fc     01 2E 06 F1 | 	add	local09, #1
0b700     F2 2E 62 FC | 	wrlong	local09, objptr
0b704     35 00 00 FF 
0b708     08 E4 85 F1 | 	sub	objptr, ##27144
0b70c                 | LR__0972
0b70c     00 2E 06 F6 | 	mov	local09, #0
0b710                 | ' numpar=0
0b710                 | ' ' check if it is an array
0b710                 | ' 
0b710                 | ' if lparts(ct+1).token=token_lpar then
0b710     37 00 00 FF 
0b714     44 E4 05 F1 | 	add	objptr, ##28228
0b718     F2 2C 02 FB | 	rdlong	local08, objptr
0b71c     01 2C 06 F1 | 	add	local08, #1
0b720     03 2C 66 F0 | 	shl	local08, #3
0b724     02 00 00 FF 
0b728     38 E4 85 F1 | 	sub	objptr, ##1080
0b72c     F2 2C 02 F1 | 	add	local08, objptr
0b730     04 2C 06 F1 | 	add	local08, #4
0b734     16 2D 02 FB | 	rdlong	local08, local08
0b738     15 2C 0E F2 | 	cmp	local08, #21 wz
0b73c     35 00 00 FF 
0b740     0C E4 85 F1 | 	sub	objptr, ##27148
0b744     08 01 90 5D |  if_ne	jmp	#LR__0977
0b748     37 00 00 FF 
0b74c     44 E4 05 F1 | 	add	objptr, ##28228
0b750     F2 30 02 FB | 	rdlong	local10, objptr
0b754     01 30 06 F1 | 	add	local10, #1
0b758     F2 30 62 FC | 	wrlong	local10, objptr
0b75c     37 00 00 FF 
0b760     44 E4 85 F1 | 	sub	objptr, ##28228
0b764                 | '   ct+=1 											' omit this lpar, this is for expr list
0b764                 | '   do
0b764                 | LR__0973
0b764     37 00 00 FF 
0b768     44 E4 05 F1 | 	add	objptr, ##28228
0b76c     F2 2C 02 FB | 	rdlong	local08, objptr
0b770     01 2C 06 F1 | 	add	local08, #1
0b774     F2 2C 62 FC | 	wrlong	local08, objptr
0b778                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b778                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b778     03 2C 66 F0 | 	shl	local08, #3
0b77c     02 00 00 FF 
0b780     38 E4 85 F1 | 	sub	objptr, ##1080
0b784     F2 2C 02 F1 | 	add	local08, objptr
0b788     04 2C 06 F1 | 	add	local08, #4
0b78c     16 31 02 FB | 	rdlong	local10, local08
0b790     15 30 0E F2 | 	cmp	local10, #21 wz
0b794     35 00 00 FF 
0b798     0C E4 85 F1 | 	sub	objptr, ##27148
0b79c     40 00 90 5D |  if_ne	jmp	#LR__0974
0b7a0     37 00 00 FF 
0b7a4     44 E4 05 F1 | 	add	objptr, ##28228
0b7a8     F2 30 02 FB | 	rdlong	local10, objptr
0b7ac     01 30 06 F1 | 	add	local10, #1
0b7b0     F2 30 62 FC | 	wrlong	local10, objptr
0b7b4     37 00 00 FF 
0b7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0b7bc     D8 EB BF FD | 	call	#_expr
0b7c0     37 00 00 FF 
0b7c4     44 E4 05 F1 | 	add	objptr, ##28228
0b7c8     F2 30 02 FB | 	rdlong	local10, objptr
0b7cc     01 30 06 F1 | 	add	local10, #1
0b7d0     F2 30 62 FC | 	wrlong	local10, objptr
0b7d4     37 00 00 FF 
0b7d8     44 E4 85 F1 | 	sub	objptr, ##28228
0b7dc     04 00 90 FD | 	jmp	#LR__0975
0b7e0                 | LR__0974
0b7e0     B4 EB BF FD | 	call	#_expr
0b7e4                 | LR__0975
0b7e4     01 2E 06 F1 | 	add	local09, #1
0b7e8     37 00 00 FF 
0b7ec     44 E4 05 F1 | 	add	objptr, ##28228
0b7f0     F2 2C 02 FB | 	rdlong	local08, objptr
0b7f4     03 2C 66 F0 | 	shl	local08, #3
0b7f8     02 00 00 FF 
0b7fc     38 E4 85 F1 | 	sub	objptr, ##1080
0b800     F2 2C 02 F1 | 	add	local08, objptr
0b804     04 2C 06 F1 | 	add	local08, #4
0b808     16 31 02 FB | 	rdlong	local10, local08
0b80c     14 30 0E F2 | 	cmp	local10, #20 wz
0b810     35 00 00 FF 
0b814     0C E4 85 F1 | 	sub	objptr, ##27148
0b818     34 00 90 AD |  if_e	jmp	#LR__0976
0b81c     37 00 00 FF 
0b820     44 E4 05 F1 | 	add	objptr, ##28228
0b824     F2 30 02 FB | 	rdlong	local10, objptr
0b828     03 30 66 F0 | 	shl	local10, #3
0b82c     02 00 00 FF 
0b830     38 E4 85 F1 | 	sub	objptr, ##1080
0b834     F2 30 02 F1 | 	add	local10, objptr
0b838     04 30 06 F1 | 	add	local10, #4
0b83c     18 31 02 FB | 	rdlong	local10, local10
0b840     FE 31 0E F2 | 	cmp	local10, #510 wz
0b844     35 00 00 FF 
0b848     0C E4 85 F1 | 	sub	objptr, ##27148
0b84c     14 FF 9F 5D |  if_ne	jmp	#LR__0973
0b850                 | LR__0976
0b850                 | LR__0977
0b850     17 21 02 F6 | 	mov	local02, local09
0b854     11 22 06 F6 | 	mov	local03, #17
0b858     15 1F 02 F6 | 	mov	local01, local07
0b85c     0F 31 02 F6 | 	mov	local10, local01
0b860     10 2F 02 F6 | 	mov	local09, local02
0b864     11 2D 02 F6 | 	mov	local08, local03
0b868     4A 00 00 FF 
0b86c     7C E4 05 F1 | 	add	objptr, ##38012
0b870     F2 2A 02 FB | 	rdlong	local07, objptr
0b874     15 29 02 F6 | 	mov	local06, local07
0b878     01 28 66 F0 | 	shl	local06, #1
0b87c     15 29 02 F1 | 	add	local06, local07
0b880     02 28 66 F0 | 	shl	local06, #2
0b884     03 00 00 FF 
0b888     00 E4 85 F1 | 	sub	objptr, ##1536
0b88c     F2 28 02 F1 | 	add	local06, objptr
0b890     14 31 62 FC | 	wrlong	local10, local06
0b894     03 00 00 FF 
0b898     00 E4 05 F1 | 	add	objptr, ##1536
0b89c     F2 30 02 FB | 	rdlong	local10, objptr
0b8a0     18 27 02 F6 | 	mov	local05, local10
0b8a4     01 26 66 F0 | 	shl	local05, #1
0b8a8     18 27 02 F1 | 	add	local05, local10
0b8ac     02 26 66 F0 | 	shl	local05, #2
0b8b0     03 00 00 FF 
0b8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8b8     F2 26 02 F1 | 	add	local05, objptr
0b8bc     04 26 06 F1 | 	add	local05, #4
0b8c0     13 2F 62 FC | 	wrlong	local09, local05
0b8c4     03 00 00 FF 
0b8c8     00 E4 05 F1 | 	add	objptr, ##1536
0b8cc     F2 30 02 FB | 	rdlong	local10, objptr
0b8d0     18 FB 01 F6 | 	mov	result1, local10
0b8d4     01 FA 65 F0 | 	shl	result1, #1
0b8d8     18 FB 01 F1 | 	add	result1, local10
0b8dc     02 FA 65 F0 | 	shl	result1, #2
0b8e0     03 00 00 FF 
0b8e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8e8     F2 FA 01 F1 | 	add	result1, objptr
0b8ec     08 FA 05 F1 | 	add	result1, #8
0b8f0     FD 2C 62 FC | 	wrlong	local08, result1
0b8f4     03 00 00 FF 
0b8f8     00 E4 05 F1 | 	add	objptr, ##1536
0b8fc     F2 30 02 FB | 	rdlong	local10, objptr
0b900     01 30 06 F1 | 	add	local10, #1
0b904     F2 30 62 FC | 	wrlong	local10, objptr
0b908     4A 00 00 FF 
0b90c     7C E4 85 F1 | 	sub	objptr, ##38012
0b910                 | ' 
0b910                 | ' t2.result.twowords(1)=numpar
0b910                 | ' 
0b910                 | ' 
0b910                 | ' 
0b910                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b910                 | ' 
0b910                 | ' 
0b910                 | '  
0b910                 | ' 
0b910                 | ' 701 
0b910                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b910                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b910     FF FF 7F FF 
0b914     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b918     B8 00 90 5D |  if_ne	jmp	#LR__0978
0b91c     15 22 06 F6 | 	mov	local03, #21
0b920     0F 31 02 F6 | 	mov	local10, local01
0b924     10 2F 02 F6 | 	mov	local09, local02
0b928     11 2D 02 F6 | 	mov	local08, local03
0b92c     4A 00 00 FF 
0b930     7C E4 05 F1 | 	add	objptr, ##38012
0b934     F2 2A 02 FB | 	rdlong	local07, objptr
0b938     15 29 02 F6 | 	mov	local06, local07
0b93c     01 28 66 F0 | 	shl	local06, #1
0b940     15 29 02 F1 | 	add	local06, local07
0b944     02 28 66 F0 | 	shl	local06, #2
0b948     03 00 00 FF 
0b94c     00 E4 85 F1 | 	sub	objptr, ##1536
0b950     F2 28 02 F1 | 	add	local06, objptr
0b954     14 31 62 FC | 	wrlong	local10, local06
0b958     03 00 00 FF 
0b95c     00 E4 05 F1 | 	add	objptr, ##1536
0b960     F2 1E 02 FB | 	rdlong	local01, objptr
0b964     0F 27 02 F6 | 	mov	local05, local01
0b968     01 26 66 F0 | 	shl	local05, #1
0b96c     0F 27 02 F1 | 	add	local05, local01
0b970     02 26 66 F0 | 	shl	local05, #2
0b974     03 00 00 FF 
0b978     00 E4 85 F1 | 	sub	objptr, ##1536
0b97c     F2 26 02 F1 | 	add	local05, objptr
0b980     04 26 06 F1 | 	add	local05, #4
0b984     13 2F 62 FC | 	wrlong	local09, local05
0b988     03 00 00 FF 
0b98c     00 E4 05 F1 | 	add	objptr, ##1536
0b990     F2 1E 02 FB | 	rdlong	local01, objptr
0b994     0F FB 01 F6 | 	mov	result1, local01
0b998     01 FA 65 F0 | 	shl	result1, #1
0b99c     0F FB 01 F1 | 	add	result1, local01
0b9a0     02 FA 65 F0 | 	shl	result1, #2
0b9a4     03 00 00 FF 
0b9a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b9ac     F2 FA 01 F1 | 	add	result1, objptr
0b9b0     08 FA 05 F1 | 	add	result1, #8
0b9b4     FD 2C 62 FC | 	wrlong	local08, result1
0b9b8     03 00 00 FF 
0b9bc     00 E4 05 F1 | 	add	objptr, ##1536
0b9c0     F2 30 02 FB | 	rdlong	local10, objptr
0b9c4     01 30 06 F1 | 	add	local10, #1
0b9c8     F2 30 62 FC | 	wrlong	local10, objptr
0b9cc     4A 00 00 FF 
0b9d0     7C E4 85 F1 | 	sub	objptr, ##38012
0b9d4                 | LR__0978
0b9d4     A7 F0 03 F6 | 	mov	ptra, fp
0b9d8     B2 00 A0 FD | 	call	#popregs_
0b9dc                 | _getvar_ret
0b9dc     2D 00 64 FD | 	ret
0b9e0                 | 
0b9e0                 | ' 
0b9e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b9e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' 
0b9e0                 | ' 
0b9e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' '                                                                                                                                       -
0b9e0                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b9e0                 | ' '                                                                                                                                       -
0b9e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' 
0b9e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b9e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b9e0                 | ' 
0b9e0                 | ' function execute_line (astart=0 as integer) as integer
0b9e0                 | _execute_line
0b9e0     04 4A 05 F6 | 	mov	COUNT_, #4
0b9e4     A8 00 A0 FD | 	call	#pushregs_
0b9e8     50 00 00 FF 
0b9ec     B8 E4 05 F1 | 	add	objptr, ##41144
0b9f0     F2 00 68 FC | 	wrlong	#0, objptr
0b9f4                 | ' runptr2=0
0b9f4                 | ' for lineptr_e=astart to lineptr-1
0b9f4     06 00 00 FF 
0b9f8     38 E4 85 F1 | 	sub	objptr, ##3128
0b9fc     F2 12 62 FC | 	wrlong	arg01, objptr
0ba00     04 E4 85 F1 | 	sub	objptr, #4
0ba04     F2 1E 02 FB | 	rdlong	local01, objptr
0ba08     4A 00 00 FF 
0ba0c     7C E4 85 F1 | 	sub	objptr, ##38012
0ba10                 | LR__0980
0ba10     4A 00 00 FF 
0ba14     80 E4 05 F1 | 	add	objptr, ##38016
0ba18     F2 FA 01 FB | 	rdlong	result1, objptr
0ba1c     4A 00 00 FF 
0ba20     80 E4 85 F1 | 	sub	objptr, ##38016
0ba24     0F FB 51 F2 | 	cmps	result1, local01 wc
0ba28     98 00 90 3D |  if_ae	jmp	#LR__0981
0ba2c     4A 00 00 FF 
0ba30     80 E4 05 F1 | 	add	objptr, ##38016
0ba34     F2 FA 01 FB | 	rdlong	result1, objptr
0ba38     FD 20 02 F6 | 	mov	local02, result1
0ba3c     01 20 66 F0 | 	shl	local02, #1
0ba40     FD 20 02 F1 | 	add	local02, result1
0ba44     02 20 66 F0 | 	shl	local02, #2
0ba48     03 00 00 FF 
0ba4c     04 E4 85 F1 | 	sub	objptr, ##1540
0ba50     F2 20 02 F1 | 	add	local02, objptr
0ba54     08 20 06 F1 | 	add	local02, #8
0ba58     10 21 02 FB | 	rdlong	local02, local02
0ba5c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0ba60     02 20 66 F0 | 	shl	local02, #2
0ba64     04 00 00 FF 
0ba68     1C E4 85 F1 | 	sub	objptr, ##2076
0ba6c     F2 20 02 F1 | 	add	local02, objptr
0ba70     10 21 02 FB | 	rdlong	local02, local02
0ba74     10 23 02 F6 | 	mov	local03, local02
0ba78     13 20 46 F7 | 	zerox	local02, #19
0ba7c     14 22 46 F0 | 	shr	local03, #20
0ba80     02 22 66 F0 | 	shl	local03, #2
0ba84     ED 22 02 F1 | 	add	local03, __methods__
0ba88     11 23 02 FB | 	rdlong	local03, local03
0ba8c     43 00 00 FF 
0ba90     60 E4 85 F1 | 	sub	objptr, ##34400
0ba94     F2 24 02 F6 | 	mov	local04, objptr
0ba98     10 E5 01 F6 | 	mov	objptr, local02
0ba9c     2D 22 62 FD | 	call	local03
0baa0     12 E5 01 F6 | 	mov	objptr, local04
0baa4     4A 00 00 FF 
0baa8     80 E4 05 F1 | 	add	objptr, ##38016
0baac     F2 24 02 FB | 	rdlong	local04, objptr
0bab0     01 24 06 F1 | 	add	local04, #1
0bab4     F2 24 62 FC | 	wrlong	local04, objptr
0bab8     4A 00 00 FF 
0babc     80 E4 85 F1 | 	sub	objptr, ##38016
0bac0     4C FF 9F FD | 	jmp	#LR__0980
0bac4                 | LR__0981
0bac4                 | ' return runptr2
0bac4     50 00 00 FF 
0bac8     B8 E4 05 F1 | 	add	objptr, ##41144
0bacc     F2 FA 01 FB | 	rdlong	result1, objptr
0bad0     50 00 00 FF 
0bad4     B8 E4 85 F1 | 	sub	objptr, ##41144
0bad8     A7 F0 03 F6 | 	mov	ptra, fp
0badc     B2 00 A0 FD | 	call	#popregs_
0bae0                 | _execute_line_ret
0bae0     2D 00 64 FD | 	ret
0bae4                 | 
0bae4                 | ' 
0bae4                 | ' 
0bae4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0bae4                 | ' 
0bae4                 | ' function pop() as expr_result
0bae4                 | _pop
0bae4                 | ' 
0bae4                 | ' if stackpointer=0 then
0bae4     43 00 00 FF 
0bae8     58 E4 05 F1 | 	add	objptr, ##34392
0baec     F2 FA 09 FB | 	rdlong	result1, objptr wz
0baf0     43 00 00 FF 
0baf4     58 E4 85 F1 | 	sub	objptr, ##34392
0baf8     FF 04 06 A6 |  if_e	mov	_var03, #255
0bafc     18 00 06 A6 |  if_e	mov	_var01, #24
0bb00     68 00 90 AD |  if_e	jmp	#LR__0990
0bb04     43 00 00 FF 
0bb08     58 E4 05 F1 | 	add	objptr, ##34392
0bb0c     F2 FA 01 FB | 	rdlong	result1, objptr
0bb10     01 FA 85 F1 | 	sub	result1, #1
0bb14     F2 FA 61 FC | 	wrlong	result1, objptr
0bb18     FD FE 01 F6 | 	mov	result3, result1
0bb1c     01 FE 65 F0 | 	shl	result3, #1
0bb20     FD FE 01 F1 | 	add	result3, result1
0bb24     02 FE 65 F0 | 	shl	result3, #2
0bb28     0C 00 00 FF 
0bb2c     0C E4 85 F1 | 	sub	objptr, ##6156
0bb30     F2 FE 01 F1 | 	add	result3, objptr
0bb34     FF 00 02 FB | 	rdlong	_var01, result3
0bb38     04 FE 05 F1 | 	add	result3, #4
0bb3c     FF FE 01 FB | 	rdlong	result3, result3
0bb40     FD FC 01 F6 | 	mov	result2, result1
0bb44     01 FC 65 F0 | 	shl	result2, #1
0bb48     FD FC 01 F1 | 	add	result2, result1
0bb4c     02 FC 65 F0 | 	shl	result2, #2
0bb50     F2 FC 01 F1 | 	add	result2, objptr
0bb54     08 FC 05 F1 | 	add	result2, #8
0bb58     FE FA 01 FB | 	rdlong	result1, result2
0bb5c     FF 02 02 F6 | 	mov	_var02, result3
0bb60     FD 04 02 F6 | 	mov	_var03, result1
0bb64     37 00 00 FF 
0bb68     4C E4 85 F1 | 	sub	objptr, ##28236
0bb6c                 | LR__0990
0bb6c                 | ' return t1
0bb6c     01 FD 01 F6 | 	mov	result2, _var02
0bb70     02 FF 01 F6 | 	mov	result3, _var03
0bb74     00 FB 01 F6 | 	mov	result1, _var01
0bb78                 | _pop_ret
0bb78     2D 00 64 FD | 	ret
0bb7c                 | 
0bb7c                 | ' 
0bb7c                 | ' sub push(t1 as expr_result )
0bb7c                 | _push
0bb7c                 | ' 
0bb7c                 | ' 'print "In push: "; t1.result_type
0bb7c                 | ' 'print "In push: "; t1.result.uresult
0bb7c                 | ' 
0bb7c                 | ' if stackpointer<maxstack then 
0bb7c     43 00 00 FF 
0bb80     58 E4 05 F1 | 	add	objptr, ##34392
0bb84     F2 00 02 FB | 	rdlong	_var01, objptr
0bb88     43 00 00 FF 
0bb8c     58 E4 85 F1 | 	sub	objptr, ##34392
0bb90     01 00 00 FF 
0bb94     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bb98     BC 00 90 3D |  if_ae	jmp	#LR__1000
0bb9c     09 01 02 FB | 	rdlong	_var01, arg01
0bba0     04 12 06 F1 | 	add	arg01, #4
0bba4     09 03 02 FB | 	rdlong	_var02, arg01
0bba8     04 12 06 F1 | 	add	arg01, #4
0bbac     09 13 02 FB | 	rdlong	arg01, arg01
0bbb0     43 00 00 FF 
0bbb4     58 E4 05 F1 | 	add	objptr, ##34392
0bbb8     F2 04 02 FB | 	rdlong	_var03, objptr
0bbbc     02 07 02 F6 | 	mov	_var04, _var03
0bbc0     01 06 66 F0 | 	shl	_var04, #1
0bbc4     02 07 02 F1 | 	add	_var04, _var03
0bbc8     02 06 66 F0 | 	shl	_var04, #2
0bbcc     0C 00 00 FF 
0bbd0     0C E4 85 F1 | 	sub	objptr, ##6156
0bbd4     F2 06 02 F1 | 	add	_var04, objptr
0bbd8     03 01 62 FC | 	wrlong	_var01, _var04
0bbdc     0C 00 00 FF 
0bbe0     0C E4 05 F1 | 	add	objptr, ##6156
0bbe4     F2 06 02 FB | 	rdlong	_var04, objptr
0bbe8     03 05 02 F6 | 	mov	_var03, _var04
0bbec     01 04 66 F0 | 	shl	_var03, #1
0bbf0     03 05 02 F1 | 	add	_var03, _var04
0bbf4     02 04 66 F0 | 	shl	_var03, #2
0bbf8     0C 00 00 FF 
0bbfc     0C E4 85 F1 | 	sub	objptr, ##6156
0bc00     F2 04 02 F1 | 	add	_var03, objptr
0bc04     04 04 06 F1 | 	add	_var03, #4
0bc08     02 03 62 FC | 	wrlong	_var02, _var03
0bc0c     0C 00 00 FF 
0bc10     0C E4 05 F1 | 	add	objptr, ##6156
0bc14     F2 06 02 FB | 	rdlong	_var04, objptr
0bc18     03 05 02 F6 | 	mov	_var03, _var04
0bc1c     01 04 66 F0 | 	shl	_var03, #1
0bc20     03 05 02 F1 | 	add	_var03, _var04
0bc24     02 04 66 F0 | 	shl	_var03, #2
0bc28     0C 00 00 FF 
0bc2c     0C E4 85 F1 | 	sub	objptr, ##6156
0bc30     F2 04 02 F1 | 	add	_var03, objptr
0bc34     08 04 06 F1 | 	add	_var03, #8
0bc38     02 13 62 FC | 	wrlong	arg01, _var03
0bc3c     0C 00 00 FF 
0bc40     0C E4 05 F1 | 	add	objptr, ##6156
0bc44     F2 00 02 FB | 	rdlong	_var01, objptr
0bc48     01 00 06 F1 | 	add	_var01, #1
0bc4c     F2 00 62 FC | 	wrlong	_var01, objptr
0bc50     43 00 00 FF 
0bc54     58 E4 85 F1 | 	sub	objptr, ##34392
0bc58                 | LR__1000
0bc58                 | _push_ret
0bc58     2D 00 64 FD | 	ret
0bc5c                 | 
0bc5c                 | ' 
0bc5c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bc5c                 | ' 
0bc5c                 | ' sub do_push
0bc5c                 | _do_push
0bc5c                 | ' if stackpointer<maxstack then 
0bc5c     43 00 00 FF 
0bc60     58 E4 05 F1 | 	add	objptr, ##34392
0bc64     F2 00 02 FB | 	rdlong	_var01, objptr
0bc68     43 00 00 FF 
0bc6c     58 E4 85 F1 | 	sub	objptr, ##34392
0bc70     01 00 00 FF 
0bc74     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bc78     F8 00 90 3D |  if_ae	jmp	#LR__1010
0bc7c     4A 00 00 FF 
0bc80     80 E4 05 F1 | 	add	objptr, ##38016
0bc84     F2 02 02 FB | 	rdlong	_var02, objptr
0bc88     01 05 02 F6 | 	mov	_var03, _var02
0bc8c     01 04 66 F0 | 	shl	_var03, #1
0bc90     01 05 02 F1 | 	add	_var03, _var02
0bc94     02 04 66 F0 | 	shl	_var03, #2
0bc98     03 00 00 FF 
0bc9c     04 E4 85 F1 | 	sub	objptr, ##1540
0bca0     F2 04 02 F1 | 	add	_var03, objptr
0bca4     02 01 02 FB | 	rdlong	_var01, _var03
0bca8     04 04 06 F1 | 	add	_var03, #4
0bcac     02 07 02 FB | 	rdlong	_var04, _var03
0bcb0     01 05 02 F6 | 	mov	_var03, _var02
0bcb4     01 04 66 F0 | 	shl	_var03, #1
0bcb8     01 05 02 F1 | 	add	_var03, _var02
0bcbc     02 04 66 F0 | 	shl	_var03, #2
0bcc0     F2 04 02 F1 | 	add	_var03, objptr
0bcc4     08 04 06 F1 | 	add	_var03, #8
0bcc8     02 03 02 FB | 	rdlong	_var02, _var03
0bccc     04 00 00 FF 
0bcd0     24 E4 85 F1 | 	sub	objptr, ##2084
0bcd4     F2 04 02 FB | 	rdlong	_var03, objptr
0bcd8     02 09 02 F6 | 	mov	_var05, _var03
0bcdc     01 08 66 F0 | 	shl	_var05, #1
0bce0     02 09 02 F1 | 	add	_var05, _var03
0bce4     02 08 66 F0 | 	shl	_var05, #2
0bce8     0C 00 00 FF 
0bcec     0C E4 85 F1 | 	sub	objptr, ##6156
0bcf0     F2 08 02 F1 | 	add	_var05, objptr
0bcf4     04 01 62 FC | 	wrlong	_var01, _var05
0bcf8     0C 00 00 FF 
0bcfc     0C E4 05 F1 | 	add	objptr, ##6156
0bd00     F2 08 02 FB | 	rdlong	_var05, objptr
0bd04     04 05 02 F6 | 	mov	_var03, _var05
0bd08     01 04 66 F0 | 	shl	_var03, #1
0bd0c     04 05 02 F1 | 	add	_var03, _var05
0bd10     02 04 66 F0 | 	shl	_var03, #2
0bd14     0C 00 00 FF 
0bd18     0C E4 85 F1 | 	sub	objptr, ##6156
0bd1c     F2 04 02 F1 | 	add	_var03, objptr
0bd20     04 04 06 F1 | 	add	_var03, #4
0bd24     02 07 62 FC | 	wrlong	_var04, _var03
0bd28     0C 00 00 FF 
0bd2c     0C E4 05 F1 | 	add	objptr, ##6156
0bd30     F2 08 02 FB | 	rdlong	_var05, objptr
0bd34     04 07 02 F6 | 	mov	_var04, _var05
0bd38     01 06 66 F0 | 	shl	_var04, #1
0bd3c     04 07 02 F1 | 	add	_var04, _var05
0bd40     02 06 66 F0 | 	shl	_var04, #2
0bd44     0C 00 00 FF 
0bd48     0C E4 85 F1 | 	sub	objptr, ##6156
0bd4c     F2 06 02 F1 | 	add	_var04, objptr
0bd50     08 06 06 F1 | 	add	_var04, #8
0bd54     03 03 62 FC | 	wrlong	_var02, _var04
0bd58     0C 00 00 FF 
0bd5c     0C E4 05 F1 | 	add	objptr, ##6156
0bd60     F2 00 02 FB | 	rdlong	_var01, objptr
0bd64     01 00 06 F1 | 	add	_var01, #1
0bd68     F2 00 62 FC | 	wrlong	_var01, objptr
0bd6c     43 00 00 FF 
0bd70     58 E4 85 F1 | 	sub	objptr, ##34392
0bd74                 | LR__1010
0bd74                 | _do_push_ret
0bd74     2D 00 64 FD | 	ret
0bd78                 | 
0bd78                 | ' 
0bd78                 | '   
0bd78                 | ' sub csave_block(address as ulong)
0bd78                 | _csave_block
0bd78     09 01 02 F6 | 	mov	_var01, arg01
0bd7c                 | ' 
0bd7c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0bd7c                 | ' ' we enter it at the state of playing 1 kHz header tone
0bd7c                 | ' 
0bd7c                 | ' for i=0 to 63 step 2
0bd7c     00 02 06 F6 | 	mov	_var02, #0
0bd80                 | LR__1020
0bd80                 | '   do: loop until lpeek(base+64*7)>32768
0bd80     37 00 00 FF 
0bd84     10 E4 05 F1 | 	add	objptr, ##28176
0bd88     97 0C 48 FB | 	callpa	#(@LR__1022-@LR__1021)>>2,fcache_load_ptr_
0bd8c                 | LR__1021
0bd8c     F2 12 02 FB | 	rdlong	arg01, objptr
0bd90     C0 13 06 F1 | 	add	arg01, #448
0bd94     09 FB 01 FB | 	rdlong	result1, arg01
0bd98     40 00 00 FF 
0bd9c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bda0     E8 FF 9F CD |  if_b	jmp	#LR__1021
0bda4                 | LR__1022
0bda4     00 13 02 F6 | 	mov	arg01, _var01
0bda8     01 05 02 F6 | 	mov	_var03, _var02
0bdac     02 04 66 F0 | 	shl	_var03, #2
0bdb0     02 13 02 F1 | 	add	arg01, _var03
0bdb4     09 07 02 FB | 	rdlong	_var04, arg01
0bdb8     1A 00 00 FF 
0bdbc     F8 E5 05 F1 | 	add	objptr, ##13816
0bdc0     F2 06 62 FC | 	wrlong	_var04, objptr
0bdc4     52 00 00 FF 
0bdc8     08 E4 85 F1 | 	sub	objptr, ##41992
0bdcc                 | '   q=lpeek(address+4*i)
0bdcc                 | '      for bit=0 to 31
0bdcc     00 08 06 F6 | 	mov	_var05, #0
0bdd0     97 84 48 FB | 	callpa	#(@LR__1027-@LR__1023)>>2,fcache_load_ptr_
0bdd4                 | LR__1023
0bdd4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bdd4     52 00 00 FF 
0bdd8     08 E4 05 F1 | 	add	objptr, ##41992
0bddc     F2 06 02 FB | 	rdlong	_var04, objptr
0bde0     52 00 00 FF 
0bde4     08 E4 85 F1 | 	sub	objptr, ##41992
0bde8     04 05 C2 F9 | 	decod	_var03, _var05
0bdec     02 07 CA F7 | 	test	_var04, _var03 wz
0bdf0     60 00 90 AD |  if_e	jmp	#LR__1024
0bdf4     04 05 02 F6 | 	mov	_var03, _var05
0bdf8     02 04 66 F0 | 	shl	_var03, #2
0bdfc     4D 00 00 FF 
0be00     B0 E5 05 F1 | 	add	objptr, ##39856
0be04     F2 04 02 F1 | 	add	_var03, objptr
0be08     02 FF 48 FC | 	wrbyte	#127, _var03
0be0c     04 05 02 F6 | 	mov	_var03, _var05
0be10     02 04 66 F0 | 	shl	_var03, #2
0be14     01 04 06 F1 | 	add	_var03, #1
0be18     F2 04 02 F1 | 	add	_var03, objptr
0be1c     02 01 49 FC | 	wrbyte	#128, _var03
0be20     04 05 02 F6 | 	mov	_var03, _var05
0be24     02 04 66 F0 | 	shl	_var03, #2
0be28     02 04 06 F1 | 	add	_var03, #2
0be2c     F2 04 02 F1 | 	add	_var03, objptr
0be30     02 FF 48 FC | 	wrbyte	#127, _var03
0be34     04 05 02 F6 | 	mov	_var03, _var05
0be38     02 04 66 F0 | 	shl	_var03, #2
0be3c     03 04 06 F1 | 	add	_var03, #3
0be40     F2 04 02 F1 | 	add	_var03, objptr
0be44     02 01 49 FC | 	wrbyte	#128, _var03
0be48     4D 00 00 FF 
0be4c     B0 E5 85 F1 | 	sub	objptr, ##39856
0be50     5C 00 90 FD | 	jmp	#LR__1025
0be54                 | LR__1024
0be54     04 05 02 F6 | 	mov	_var03, _var05
0be58     02 04 66 F0 | 	shl	_var03, #2
0be5c     4D 00 00 FF 
0be60     B0 E5 05 F1 | 	add	objptr, ##39856
0be64     F2 04 02 F1 | 	add	_var03, objptr
0be68     02 01 49 FC | 	wrbyte	#128, _var03
0be6c     04 05 02 F6 | 	mov	_var03, _var05
0be70     02 04 66 F0 | 	shl	_var03, #2
0be74     01 04 06 F1 | 	add	_var03, #1
0be78     F2 04 02 F1 | 	add	_var03, objptr
0be7c     02 01 49 FC | 	wrbyte	#128, _var03
0be80     04 05 02 F6 | 	mov	_var03, _var05
0be84     02 04 66 F0 | 	shl	_var03, #2
0be88     02 04 06 F1 | 	add	_var03, #2
0be8c     F2 04 02 F1 | 	add	_var03, objptr
0be90     02 FF 48 FC | 	wrbyte	#127, _var03
0be94     04 05 02 F6 | 	mov	_var03, _var05
0be98     02 04 66 F0 | 	shl	_var03, #2
0be9c     03 04 06 F1 | 	add	_var03, #3
0bea0     F2 04 02 F1 | 	add	_var03, objptr
0bea4     02 FF 48 FC | 	wrbyte	#127, _var03
0bea8     4D 00 00 FF 
0beac     B0 E5 85 F1 | 	sub	objptr, ##39856
0beb0                 | LR__1025
0beb0     01 08 06 F1 | 	add	_var05, #1
0beb4     20 08 56 F2 | 	cmps	_var05, #32 wc
0beb8     18 FF 9F CD |  if_b	jmp	#LR__1023
0bebc                 | '   do: loop until lpeek(base+64*7)<32768
0bebc     37 00 00 FF 
0bec0     10 E4 05 F1 | 	add	objptr, ##28176
0bec4                 | LR__1026
0bec4     F2 12 02 FB | 	rdlong	arg01, objptr
0bec8     C0 13 06 F1 | 	add	arg01, #448
0becc     09 FB 01 FB | 	rdlong	result1, arg01
0bed0     40 00 00 FF 
0bed4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bed8     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bedc                 | LR__1027
0bedc     00 13 02 F6 | 	mov	arg01, _var01
0bee0     04 12 06 F1 | 	add	arg01, #4
0bee4     01 05 02 F6 | 	mov	_var03, _var02
0bee8     02 04 66 F0 | 	shl	_var03, #2
0beec     02 13 02 F1 | 	add	arg01, _var03
0bef0     09 07 02 FB | 	rdlong	_var04, arg01
0bef4     1A 00 00 FF 
0bef8     F8 E5 05 F1 | 	add	objptr, ##13816
0befc     F2 06 62 FC | 	wrlong	_var04, objptr
0bf00     52 00 00 FF 
0bf04     08 E4 85 F1 | 	sub	objptr, ##41992
0bf08                 | '   q=lpeek(address+4+4*i)
0bf08                 | '      for bit=0 to 31
0bf08     00 08 06 F6 | 	mov	_var05, #0
0bf0c     97 94 48 FB | 	callpa	#(@LR__1031-@LR__1028)>>2,fcache_load_ptr_
0bf10                 | LR__1028
0bf10                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bf10     52 00 00 FF 
0bf14     08 E4 05 F1 | 	add	objptr, ##41992
0bf18     F2 06 02 FB | 	rdlong	_var04, objptr
0bf1c     52 00 00 FF 
0bf20     08 E4 85 F1 | 	sub	objptr, ##41992
0bf24     04 05 C2 F9 | 	decod	_var03, _var05
0bf28     02 07 CA F7 | 	test	_var04, _var03 wz
0bf2c     80 00 90 AD |  if_e	jmp	#LR__1029
0bf30     04 0B 02 F6 | 	mov	_var06, _var05
0bf34     02 0A 66 F0 | 	shl	_var06, #2
0bf38     80 04 06 F6 | 	mov	_var03, #128
0bf3c     05 05 02 F1 | 	add	_var03, _var06
0bf40     4D 00 00 FF 
0bf44     B0 E5 05 F1 | 	add	objptr, ##39856
0bf48     F2 04 02 F1 | 	add	_var03, objptr
0bf4c     02 FF 48 FC | 	wrbyte	#127, _var03
0bf50     04 0B 02 F6 | 	mov	_var06, _var05
0bf54     02 0A 66 F0 | 	shl	_var06, #2
0bf58     80 04 06 F6 | 	mov	_var03, #128
0bf5c     05 05 02 F1 | 	add	_var03, _var06
0bf60     01 04 06 F1 | 	add	_var03, #1
0bf64     F2 04 02 F1 | 	add	_var03, objptr
0bf68     02 01 49 FC | 	wrbyte	#128, _var03
0bf6c     04 0B 02 F6 | 	mov	_var06, _var05
0bf70     02 0A 66 F0 | 	shl	_var06, #2
0bf74     80 04 06 F6 | 	mov	_var03, #128
0bf78     05 05 02 F1 | 	add	_var03, _var06
0bf7c     02 04 06 F1 | 	add	_var03, #2
0bf80     F2 04 02 F1 | 	add	_var03, objptr
0bf84     02 FF 48 FC | 	wrbyte	#127, _var03
0bf88     04 0B 02 F6 | 	mov	_var06, _var05
0bf8c     02 0A 66 F0 | 	shl	_var06, #2
0bf90     80 04 06 F6 | 	mov	_var03, #128
0bf94     05 05 02 F1 | 	add	_var03, _var06
0bf98     03 04 06 F1 | 	add	_var03, #3
0bf9c     F2 04 02 F1 | 	add	_var03, objptr
0bfa0     02 01 49 FC | 	wrbyte	#128, _var03
0bfa4     4D 00 00 FF 
0bfa8     B0 E5 85 F1 | 	sub	objptr, ##39856
0bfac     7C 00 90 FD | 	jmp	#LR__1030
0bfb0                 | LR__1029
0bfb0     04 0B 02 F6 | 	mov	_var06, _var05
0bfb4     02 0A 66 F0 | 	shl	_var06, #2
0bfb8     80 04 06 F6 | 	mov	_var03, #128
0bfbc     05 05 02 F1 | 	add	_var03, _var06
0bfc0     4D 00 00 FF 
0bfc4     B0 E5 05 F1 | 	add	objptr, ##39856
0bfc8     F2 04 02 F1 | 	add	_var03, objptr
0bfcc     02 01 49 FC | 	wrbyte	#128, _var03
0bfd0     04 0B 02 F6 | 	mov	_var06, _var05
0bfd4     02 0A 66 F0 | 	shl	_var06, #2
0bfd8     80 04 06 F6 | 	mov	_var03, #128
0bfdc     05 05 02 F1 | 	add	_var03, _var06
0bfe0     01 04 06 F1 | 	add	_var03, #1
0bfe4     F2 04 02 F1 | 	add	_var03, objptr
0bfe8     02 01 49 FC | 	wrbyte	#128, _var03
0bfec     04 0B 02 F6 | 	mov	_var06, _var05
0bff0     02 0A 66 F0 | 	shl	_var06, #2
0bff4     80 04 06 F6 | 	mov	_var03, #128
0bff8     05 05 02 F1 | 	add	_var03, _var06
0bffc     02 04 06 F1 | 	add	_var03, #2
0c000     F2 04 02 F1 | 	add	_var03, objptr
0c004     02 FF 48 FC | 	wrbyte	#127, _var03
0c008     04 0B 02 F6 | 	mov	_var06, _var05
0c00c     02 0A 66 F0 | 	shl	_var06, #2
0c010     80 04 06 F6 | 	mov	_var03, #128
0c014     05 05 02 F1 | 	add	_var03, _var06
0c018     03 04 06 F1 | 	add	_var03, #3
0c01c     F2 04 02 F1 | 	add	_var03, objptr
0c020     02 FF 48 FC | 	wrbyte	#127, _var03
0c024     4D 00 00 FF 
0c028     B0 E5 85 F1 | 	sub	objptr, ##39856
0c02c                 | LR__1030
0c02c     01 08 06 F1 | 	add	_var05, #1
0c030     20 08 56 F2 | 	cmps	_var05, #32 wc
0c034     D8 FE 9F CD |  if_b	jmp	#LR__1028
0c038                 | LR__1031
0c038     02 02 06 F1 | 	add	_var02, #2
0c03c     40 02 56 F2 | 	cmps	_var02, #64 wc
0c040     3C FD 9F CD |  if_b	jmp	#LR__1020
0c044                 | ' do: loop until lpeek(base+64*7)>32768
0c044     37 00 00 FF 
0c048     10 E4 05 F1 | 	add	objptr, ##28176
0c04c     97 84 48 FB | 	callpa	#(@LR__1040-@LR__1032)>>2,fcache_load_ptr_
0c050                 | LR__1032
0c050     F2 12 02 FB | 	rdlong	arg01, objptr
0c054     C0 13 06 F1 | 	add	arg01, #448
0c058     09 FB 01 FB | 	rdlong	result1, arg01
0c05c     40 00 00 FF 
0c060     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0c064     E8 FF 9F CD |  if_b	jmp	#LR__1032
0c068     37 00 00 FF 
0c06c     10 E4 85 F1 | 	sub	objptr, ##28176
0c070                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c070     00 02 06 F6 | 	mov	_var02, #0
0c074                 | LR__1033
0c074     01 07 52 F6 | 	abs	_var04, _var02 wc
0c078     07 06 06 F5 | 	and	_var04, #7
0c07c     03 07 82 F6 | 	negc	_var04, _var04
0c080     04 06 56 F2 | 	cmps	_var04, #4 wc
0c084     20 00 90 3D |  if_ae	jmp	#LR__1034
0c088     01 0B 02 F6 | 	mov	_var06, _var02
0c08c     4D 00 00 FF 
0c090     B0 E5 05 F1 | 	add	objptr, ##39856
0c094     F2 0A 02 F1 | 	add	_var06, objptr
0c098     05 FF 48 FC | 	wrbyte	#127, _var06
0c09c     4D 00 00 FF 
0c0a0     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0a4     1C 00 90 FD | 	jmp	#LR__1035
0c0a8                 | LR__1034
0c0a8     01 0B 02 F6 | 	mov	_var06, _var02
0c0ac     4D 00 00 FF 
0c0b0     B0 E5 05 F1 | 	add	objptr, ##39856
0c0b4     F2 0A 02 F1 | 	add	_var06, objptr
0c0b8     05 01 49 FC | 	wrbyte	#128, _var06
0c0bc     4D 00 00 FF 
0c0c0     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0c4                 | LR__1035
0c0c4     01 02 06 F1 | 	add	_var02, #1
0c0c8     80 02 56 F2 | 	cmps	_var02, #128 wc
0c0cc     A4 FF 9F CD |  if_b	jmp	#LR__1033
0c0d0                 | ' 
0c0d0                 | ' do: loop until lpeek(base+64*7)<32768
0c0d0     37 00 00 FF 
0c0d4     10 E4 05 F1 | 	add	objptr, ##28176
0c0d8                 | LR__1036
0c0d8     F2 12 02 FB | 	rdlong	arg01, objptr
0c0dc     C0 13 06 F1 | 	add	arg01, #448
0c0e0     09 FB 01 FB | 	rdlong	result1, arg01
0c0e4     40 00 00 FF 
0c0e8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c0ec     E8 FF 9F 3D |  if_ae	jmp	#LR__1036
0c0f0     37 00 00 FF 
0c0f4     10 E4 85 F1 | 	sub	objptr, ##28176
0c0f8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c0f8     80 02 06 F6 | 	mov	_var02, #128
0c0fc                 | LR__1037
0c0fc     01 07 52 F6 | 	abs	_var04, _var02 wc
0c100     07 06 06 F5 | 	and	_var04, #7
0c104     03 07 82 F6 | 	negc	_var04, _var04
0c108     04 06 56 F2 | 	cmps	_var04, #4 wc
0c10c     20 00 90 3D |  if_ae	jmp	#LR__1038
0c110     01 0B 02 F6 | 	mov	_var06, _var02
0c114     4D 00 00 FF 
0c118     B0 E5 05 F1 | 	add	objptr, ##39856
0c11c     F2 0A 02 F1 | 	add	_var06, objptr
0c120     05 FF 48 FC | 	wrbyte	#127, _var06
0c124     4D 00 00 FF 
0c128     B0 E5 85 F1 | 	sub	objptr, ##39856
0c12c     1C 00 90 FD | 	jmp	#LR__1039
0c130                 | LR__1038
0c130     01 0B 02 F6 | 	mov	_var06, _var02
0c134     4D 00 00 FF 
0c138     B0 E5 05 F1 | 	add	objptr, ##39856
0c13c     F2 0A 02 F1 | 	add	_var06, objptr
0c140     05 01 49 FC | 	wrbyte	#128, _var06
0c144     4D 00 00 FF 
0c148     B0 E5 85 F1 | 	sub	objptr, ##39856
0c14c                 | LR__1039
0c14c     01 02 06 F1 | 	add	_var02, #1
0c150     00 03 16 F2 | 	cmp	_var02, #256 wc
0c154     A4 FF 9F CD |  if_b	jmp	#LR__1037
0c158                 | LR__1040
0c158                 | _csave_block_ret
0c158     2D 00 64 FD | 	ret
0c15c                 | 
0c15c                 | ' 
0c15c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c15c                 | _csave_addtoblock
0c15c     04 4A 05 F6 | 	mov	COUNT_, #4
0c160     A8 00 A0 FD | 	call	#pushregs_
0c164     09 1F 02 F6 | 	mov	local01, arg01
0c168                 | ' 
0c168                 | ' 
0c168                 | ' if force=0 then
0c168     07 14 4E F7 | 	zerox	arg02, #7 wz
0c16c     78 00 90 5D |  if_ne	jmp	#LR__1050
0c170     50 00 00 FF 
0c174     B0 E4 05 F1 | 	add	objptr, ##41136
0c178     F2 14 02 FB | 	rdlong	arg02, objptr
0c17c     02 00 00 FF 
0c180     00 E4 85 F1 | 	sub	objptr, ##1024
0c184     F2 14 02 F1 | 	add	arg02, objptr
0c188     0A 1F 42 FC | 	wrbyte	local01, arg02
0c18c     02 00 00 FF 
0c190     00 E4 05 F1 | 	add	objptr, ##1024
0c194     F2 1E 02 FB | 	rdlong	local01, objptr
0c198     01 1E 06 F1 | 	add	local01, #1
0c19c     F2 1E 62 FC | 	wrlong	local01, objptr
0c1a0                 | '   block(blockptr)=d
0c1a0                 | '   blockptr+=1
0c1a0                 | '   if blockptr>=255 then
0c1a0     50 00 00 FF 
0c1a4     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1a8     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c1ac     E4 00 90 CD |  if_b	jmp	#LR__1054
0c1b0     4E 00 00 FF 
0c1b4     B0 E4 05 F1 | 	add	objptr, ##40112
0c1b8     F2 12 02 F6 | 	mov	arg01, objptr
0c1bc     4E 00 00 FF 
0c1c0     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1c4     B0 FB BF FD | 	call	#_csave_block
0c1c8     50 00 00 FF 
0c1cc     B0 E4 05 F1 | 	add	objptr, ##41136
0c1d0     F2 00 68 FC | 	wrlong	#0, objptr
0c1d4     50 00 00 FF 
0c1d8     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1dc     2C 13 06 F6 | 	mov	arg01, #300
0c1e0     AC 4B B1 FD | 	call	#__system___waitms
0c1e4     AC 00 90 FD | 	jmp	#LR__1054
0c1e8                 | LR__1050
0c1e8     50 00 00 FF 
0c1ec     B0 E4 05 F1 | 	add	objptr, ##41136
0c1f0     F2 20 02 FB | 	rdlong	local02, objptr
0c1f4     02 00 00 FF 
0c1f8     00 E4 85 F1 | 	sub	objptr, ##1024
0c1fc     F2 20 02 F1 | 	add	local02, objptr
0c200     10 1F 42 FC | 	wrbyte	local01, local02
0c204                 | '   block(blockptr)=d
0c204                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c204     02 00 00 FF 
0c208     00 E4 05 F1 | 	add	objptr, ##1024
0c20c     F2 22 02 FB | 	rdlong	local03, objptr
0c210     50 00 00 FF 
0c214     B0 E4 85 F1 | 	sub	objptr, ##41136
0c218     FF 22 16 F2 | 	cmp	local03, #255 wc
0c21c     40 00 90 3D |  if_ae	jmp	#LR__1053
0c220     50 00 00 FF 
0c224     B0 E4 05 F1 | 	add	objptr, ##41136
0c228     F2 24 02 FB | 	rdlong	local04, objptr
0c22c     50 00 00 FF 
0c230     B0 E4 85 F1 | 	sub	objptr, ##41136
0c234                 | LR__1051
0c234     00 25 56 F2 | 	cmps	local04, #256 wc
0c238     24 00 90 3D |  if_ae	jmp	#LR__1052
0c23c     12 21 02 F6 | 	mov	local02, local04
0c240     4E 00 00 FF 
0c244     B0 E4 05 F1 | 	add	objptr, ##40112
0c248     F2 20 02 F1 | 	add	local02, objptr
0c24c     10 01 48 FC | 	wrbyte	#0, local02
0c250     01 24 06 F1 | 	add	local04, #1
0c254     4E 00 00 FF 
0c258     B0 E4 85 F1 | 	sub	objptr, ##40112
0c25c     D4 FF 9F FD | 	jmp	#LR__1051
0c260                 | LR__1052
0c260                 | LR__1053
0c260     4E 00 00 FF 
0c264     B0 E4 05 F1 | 	add	objptr, ##40112
0c268     F2 12 02 F6 | 	mov	arg01, objptr
0c26c     4E 00 00 FF 
0c270     B0 E4 85 F1 | 	sub	objptr, ##40112
0c274     00 FB BF FD | 	call	#_csave_block
0c278     50 00 00 FF 
0c27c     B0 E4 05 F1 | 	add	objptr, ##41136
0c280     F2 00 68 FC | 	wrlong	#0, objptr
0c284     50 00 00 FF 
0c288     B0 E4 85 F1 | 	sub	objptr, ##41136
0c28c     2C 13 06 F6 | 	mov	arg01, #300
0c290     FC 4A B1 FD | 	call	#__system___waitms
0c294                 | LR__1054
0c294     A7 F0 03 F6 | 	mov	ptra, fp
0c298     B2 00 A0 FD | 	call	#popregs_
0c29c                 | _csave_addtoblock_ret
0c29c     2D 00 64 FD | 	ret
0c2a0                 | 
0c2a0                 | ' 
0c2a0                 | ' sub test_csave
0c2a0                 | _test_csave
0c2a0     04 4A 05 F6 | 	mov	COUNT_, #4
0c2a4     A8 00 A0 FD | 	call	#pushregs_
0c2a8     C0 F0 07 F1 | 	add	ptra, #192
0c2ac                 | ' 'dim fileheader,savestart, saveptr as ulong
0c2ac                 | ' 
0c2ac                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c2ac     4A 00 00 FF 
0c2b0     84 E4 05 F1 | 	add	objptr, ##38020
0c2b4     F2 12 02 FB | 	rdlong	arg01, objptr
0c2b8     4A 00 00 FF 
0c2bc     84 E4 85 F1 | 	sub	objptr, ##38020
0c2c0     D4 14 B1 FD | 	call	#_pslpeek
0c2c4     FF FF 7F FF 
0c2c8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c2cc     0C 00 90 5D |  if_ne	jmp	#LR__1060
0c2d0     1B 12 06 F6 | 	mov	arg01, #27
0c2d4     2C 12 B1 FD | 	call	#_printerror
0c2d8     1C 03 90 FD | 	jmp	#LR__1074
0c2dc                 | LR__1060
0c2dc     04 F8 BF FD | 	call	#_pop
0c2e0     90 4E 05 F1 | 	add	fp, #144
0c2e4     A7 FA 61 FC | 	wrlong	result1, fp
0c2e8     04 4E 05 F1 | 	add	fp, #4
0c2ec     A7 FC 61 FC | 	wrlong	result2, fp
0c2f0     04 4E 05 F1 | 	add	fp, #4
0c2f4     A7 FE 61 FC | 	wrlong	result3, fp
0c2f8                 | ' t1=pop()
0c2f8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c2f8     98 4E 85 F1 | 	sub	fp, #152
0c2fc     1F FE 0D F2 | 	cmp	result3, #31 wz
0c300     24 00 90 AD |  if_e	jmp	#LR__1061
0c304     51 00 00 FF 
0c308     D4 E5 05 F1 | 	add	objptr, ##41940
0c30c     F2 1C 02 FB | 	rdlong	arg06, objptr
0c310     51 00 00 FF 
0c314     D4 E5 85 F1 | 	sub	objptr, ##41940
0c318     8C 4E 05 F1 | 	add	fp, #140
0c31c     A7 1C 62 FC | 	wrlong	arg06, fp
0c320     8C 4E 85 F1 | 	sub	fp, #140
0c324     14 00 90 FD | 	jmp	#LR__1062
0c328                 | LR__1061
0c328     90 4E 05 F1 | 	add	fp, #144
0c32c     A7 1C 02 FB | 	rdlong	arg06, fp
0c330     04 4E 85 F1 | 	sub	fp, #4
0c334     A7 1C 62 FC | 	wrlong	arg06, fp
0c338     8C 4E 85 F1 | 	sub	fp, #140
0c33c                 | LR__1062
0c33c                 | ' 
0c33c                 | ' ' prepare 1 kHz header wave
0c33c                 | ' 
0c33c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c33c     A7 00 68 FC | 	wrlong	#0, fp
0c340     97 34 48 FB | 	callpa	#(@LR__1066-@LR__1063)>>2,fcache_load_ptr_
0c344                 | LR__1063
0c344     A7 1C 02 FB | 	rdlong	arg06, fp
0c348     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c34c     07 1A 06 F5 | 	and	arg05, #7
0c350     0D 1B 82 F6 | 	negc	arg05, arg05
0c354     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c358     20 00 90 3D |  if_ae	jmp	#LR__1064
0c35c     A7 1A 02 FB | 	rdlong	arg05, fp
0c360     4D 00 00 FF 
0c364     B0 E5 05 F1 | 	add	objptr, ##39856
0c368     F2 1A 02 F1 | 	add	arg05, objptr
0c36c     0D FF 48 FC | 	wrbyte	#127, arg05
0c370     4D 00 00 FF 
0c374     B0 E5 85 F1 | 	sub	objptr, ##39856
0c378     1C 00 90 FD | 	jmp	#LR__1065
0c37c                 | LR__1064
0c37c     A7 1A 02 FB | 	rdlong	arg05, fp
0c380     4D 00 00 FF 
0c384     B0 E5 05 F1 | 	add	objptr, ##39856
0c388     F2 1A 02 F1 | 	add	arg05, objptr
0c38c     0D 01 49 FC | 	wrbyte	#128, arg05
0c390     4D 00 00 FF 
0c394     B0 E5 85 F1 | 	sub	objptr, ##39856
0c398                 | LR__1065
0c398     A7 1A 02 FB | 	rdlong	arg05, fp
0c39c     01 1A 06 F1 | 	add	arg05, #1
0c3a0     A7 1A 62 FC | 	wrlong	arg05, fp
0c3a4     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c3a8     98 FF 9F CD |  if_b	jmp	#LR__1063
0c3ac                 | LR__1066
0c3ac     4D 00 00 FF 
0c3b0     B0 E5 05 F1 | 	add	objptr, ##39856
0c3b4     F2 14 02 F6 | 	mov	arg02, objptr
0c3b8     07 12 06 F6 | 	mov	arg01, #7
0c3bc     0F 00 00 FF 
0c3c0     40 17 06 F6 | 	mov	arg03, ##8000
0c3c4     0E 18 C6 F9 | 	decod	arg04, #14
0c3c8     00 1B 06 F6 | 	mov	arg05, #256
0c3cc     00 1C 06 F6 | 	mov	arg06, #0
0c3d0     42 00 00 FF 
0c3d4     E4 E4 85 F1 | 	sub	objptr, ##34020
0c3d8     1C 43 B1 FD | 	call	#_audio096_spin2_play8
0c3dc     0B 00 00 FF 
0c3e0     CC E4 85 F1 | 	sub	objptr, ##5836
0c3e4     05 00 00 FF 
0c3e8     B8 13 06 F6 | 	mov	arg01, ##3000
0c3ec     A0 49 B1 FD | 	call	#__system___waitms
0c3f0     50 00 00 FF 
0c3f4     B0 E4 05 F1 | 	add	objptr, ##41136
0c3f8     F2 00 68 FC | 	wrlong	#0, objptr
0c3fc     50 00 00 FF 
0c400     B0 E4 85 F1 | 	sub	objptr, ##41136
0c404     72 12 06 F6 | 	mov	arg01, #114
0c408     00 14 06 F6 | 	mov	arg02, #0
0c40c     4C FD BF FD | 	call	#_csave_addtoblock
0c410     62 12 06 F6 | 	mov	arg01, #98
0c414     00 14 06 F6 | 	mov	arg02, #0
0c418     40 FD BF FD | 	call	#_csave_addtoblock
0c41c     61 12 06 F6 | 	mov	arg01, #97
0c420     00 14 06 F6 | 	mov	arg02, #0
0c424     34 FD BF FD | 	call	#_csave_addtoblock
0c428     0D 12 06 F6 | 	mov	arg01, #13
0c42c     00 14 06 F6 | 	mov	arg02, #0
0c430     28 FD BF FD | 	call	#_csave_addtoblock
0c434                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c434                 | ' waitms 3000 
0c434                 | ' 
0c434                 | ' blockptr=0
0c434                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c434                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c434     A7 02 68 FC | 	wrlong	#1, fp
0c438     8C 4E 05 F1 | 	add	fp, #140
0c43c     A7 12 02 FB | 	rdlong	arg01, fp
0c440     8C 4E 85 F1 | 	sub	fp, #140
0c444     09 1F 02 F6 | 	mov	local01, arg01
0c448     97 06 48 FB | 	callpa	#(@LR__1068-@LR__1067)>>2,fcache_load_ptr_
0c44c                 | LR__1067
0c44c     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c450     01 1E 06 51 |  if_ne	add	local01, #1
0c454     F4 FF 9F 5D |  if_ne	jmp	#LR__1067
0c458                 | LR__1068
0c458     09 1F 82 F1 | 	sub	local01, arg01
0c45c     0F 21 02 F6 | 	mov	local02, local01
0c460     01 20 06 F1 | 	add	local02, #1
0c464                 | LR__1069
0c464     A7 1A 02 FB | 	rdlong	arg05, fp
0c468     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c46c     34 00 90 3D |  if_ae	jmp	#LR__1070
0c470     8C 4E 05 F1 | 	add	fp, #140
0c474     A7 12 02 FB | 	rdlong	arg01, fp
0c478     8C 4E 85 F1 | 	sub	fp, #140
0c47c     A7 14 02 FB | 	rdlong	arg02, fp
0c480     01 16 06 F6 | 	mov	arg03, #1
0c484     A8 67 B1 FD | 	call	#__system__Mid_S
0c488     FD 12 C2 FA | 	rdbyte	arg01, result1
0c48c     00 14 06 F6 | 	mov	arg02, #0
0c490     C8 FC BF FD | 	call	#_csave_addtoblock
0c494     A7 1A 02 FB | 	rdlong	arg05, fp
0c498     01 1A 06 F1 | 	add	arg05, #1
0c49c     A7 1A 62 FC | 	wrlong	arg05, fp
0c4a0     C0 FF 9F FD | 	jmp	#LR__1069
0c4a4                 | LR__1070
0c4a4     00 12 06 F6 | 	mov	arg01, #0
0c4a8     00 14 06 F6 | 	mov	arg02, #0
0c4ac     AC FC BF FD | 	call	#_csave_addtoblock
0c4b0     72 12 06 F6 | 	mov	arg01, #114
0c4b4     00 14 06 F6 | 	mov	arg02, #0
0c4b8     A0 FC BF FD | 	call	#_csave_addtoblock
0c4bc     62 12 06 F6 | 	mov	arg01, #98
0c4c0     00 14 06 F6 | 	mov	arg02, #0
0c4c4     94 FC BF FD | 	call	#_csave_addtoblock
0c4c8     73 12 06 F6 | 	mov	arg01, #115
0c4cc     00 14 06 F6 | 	mov	arg02, #0
0c4d0     88 FC BF FD | 	call	#_csave_addtoblock
0c4d4     0D 12 06 F6 | 	mov	arg01, #13
0c4d8     00 14 06 F6 | 	mov	arg02, #0
0c4dc     7C FC BF FD | 	call	#_csave_addtoblock
0c4e0     4A 00 00 FF 
0c4e4     84 E4 05 F1 | 	add	objptr, ##38020
0c4e8     F2 22 02 FB | 	rdlong	local03, objptr
0c4ec     4A 00 00 FF 
0c4f0     84 E4 85 F1 | 	sub	objptr, ##38020
0c4f4     9C 4E 05 F1 | 	add	fp, #156
0c4f8     A7 22 62 FC | 	wrlong	local03, fp
0c4fc     9C 4E 85 F1 | 	sub	fp, #156
0c500                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c500                 | ' 
0c500                 | ' saveptr=programstart
0c500                 | ' do
0c500                 | LR__1071
0c500     A0 4E 05 F1 | 	add	fp, #160
0c504     A7 12 02 F6 | 	mov	arg01, fp
0c508     04 4E 85 F1 | 	sub	fp, #4
0c50c     A7 14 02 FB | 	rdlong	arg02, fp
0c510     9C 4E 85 F1 | 	sub	fp, #156
0c514     18 16 06 F6 | 	mov	arg03, #24
0c518     0B 00 00 FF 
0c51c     CC E4 05 F1 | 	add	objptr, ##5836
0c520     38 39 B1 FD | 	call	#_psram_spin2_read1
0c524     0C 4E 05 F1 | 	add	fp, #12
0c528     A7 12 02 F6 | 	mov	arg01, fp
0c52c     9C 4E 05 F1 | 	add	fp, #156
0c530     A7 14 02 FB | 	rdlong	arg02, fp
0c534     04 4E 05 F1 | 	add	fp, #4
0c538     A7 16 02 FB | 	rdlong	arg03, fp
0c53c     AC 4E 85 F1 | 	sub	fp, #172
0c540     18 39 B1 FD | 	call	#_psram_spin2_read1
0c544     0B 00 00 FF 
0c548     CC E4 85 F1 | 	sub	objptr, ##5836
0c54c     AC 4E 05 F1 | 	add	fp, #172
0c550     A7 12 02 FB | 	rdlong	arg01, fp
0c554     AC 4E 85 F1 | 	sub	fp, #172
0c558     00 14 06 F6 | 	mov	arg02, #0
0c55c     FC FB BF FD | 	call	#_csave_addtoblock
0c560                 | ' 
0c560                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c560                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c560                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c560                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c560     A7 00 68 FC | 	wrlong	#0, fp
0c564     AC 4E 05 F1 | 	add	fp, #172
0c568     A7 24 02 FB | 	rdlong	local04, fp
0c56c     AC 4E 85 F1 | 	sub	fp, #172
0c570                 | LR__1072
0c570     A7 22 02 FB | 	rdlong	local03, fp
0c574     12 23 52 F2 | 	cmps	local03, local04 wc
0c578     2C 00 90 3D |  if_ae	jmp	#LR__1073
0c57c     A7 22 02 FB | 	rdlong	local03, fp
0c580     0C 4E 05 F1 | 	add	fp, #12
0c584     A7 22 02 F1 | 	add	local03, fp
0c588     11 13 C2 FA | 	rdbyte	arg01, local03
0c58c     00 14 06 F6 | 	mov	arg02, #0
0c590     0C 4E 85 F1 | 	sub	fp, #12
0c594     C4 FB BF FD | 	call	#_csave_addtoblock
0c598     A7 22 02 FB | 	rdlong	local03, fp
0c59c     01 22 06 F1 | 	add	local03, #1
0c5a0     A7 22 62 FC | 	wrlong	local03, fp
0c5a4     C8 FF 9F FD | 	jmp	#LR__1072
0c5a8                 | LR__1073
0c5a8     B4 4E 05 F1 | 	add	fp, #180
0c5ac     A7 22 02 FB | 	rdlong	local03, fp
0c5b0     18 4E 85 F1 | 	sub	fp, #24
0c5b4     A7 22 62 FC | 	wrlong	local03, fp
0c5b8     18 4E 05 F1 | 	add	fp, #24
0c5bc     A7 22 02 FB | 	rdlong	local03, fp
0c5c0     B4 4E 85 F1 | 	sub	fp, #180
0c5c4     FF FF 3F FF 
0c5c8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c5cc     30 FF 9F 5D |  if_ne	jmp	#LR__1071
0c5d0     00 12 06 F6 | 	mov	arg01, #0
0c5d4     01 14 06 F6 | 	mov	arg02, #1
0c5d8     80 FB BF FD | 	call	#_csave_addtoblock
0c5dc     37 00 00 FF 
0c5e0     10 E4 05 F1 | 	add	objptr, ##28176
0c5e4     F2 12 02 FB | 	rdlong	arg01, objptr
0c5e8     37 00 00 FF 
0c5ec     10 E4 85 F1 | 	sub	objptr, ##28176
0c5f0     D4 13 06 F1 | 	add	arg01, #468
0c5f4     09 01 58 FC | 	wrword	#0, arg01
0c5f8                 | LR__1074
0c5f8     A7 F0 03 F6 | 	mov	ptra, fp
0c5fc     B2 00 A0 FD | 	call	#popregs_
0c600                 | _test_csave_ret
0c600     2D 00 64 FD | 	ret
0c604                 | 
0c604                 | ' 
0c604                 | ' ' ----------------- Save the program
0c604                 | ' 
0c604                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c604                 | _do_save
0c604     04 4A 05 F6 | 	mov	COUNT_, #4
0c608     A8 00 A0 FD | 	call	#pushregs_
0c60c     01 00 00 FF 
0c610     C0 F0 07 F1 | 	add	ptra, ##704
0c614     4A 00 00 FF 
0c618     80 E4 05 F1 | 	add	objptr, ##38016
0c61c     F2 1E 02 FB | 	rdlong	local01, objptr
0c620     0F 21 02 F6 | 	mov	local02, local01
0c624     01 20 66 F0 | 	shl	local02, #1
0c628     0F 21 02 F1 | 	add	local02, local01
0c62c     02 20 66 F0 | 	shl	local02, #2
0c630     03 00 00 FF 
0c634     04 E4 85 F1 | 	sub	objptr, ##1540
0c638     F2 20 02 F1 | 	add	local02, objptr
0c63c     10 23 02 FB | 	rdlong	local03, local02
0c640     01 00 00 FF 
0c644     10 4E 05 F1 | 	add	fp, ##528
0c648     A7 22 62 FC | 	wrlong	local03, fp
0c64c                 | ' 
0c64c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c64c                 | ' 
0c64c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c64c     01 00 00 FF 
0c650     10 4E 85 F1 | 	sub	fp, ##528
0c654     01 22 56 F2 | 	cmps	local03, #1 wc
0c658     47 00 00 FF 
0c65c     7C E4 85 F1 | 	sub	objptr, ##36476
0c660     20 00 90 CD |  if_b	jmp	#LR__1080
0c664     7C F4 BF FD | 	call	#_pop
0c668     A7 FA 61 FC | 	wrlong	result1, fp
0c66c     04 4E 05 F1 | 	add	fp, #4
0c670     A7 FC 61 FC | 	wrlong	result2, fp
0c674     04 4E 05 F1 | 	add	fp, #4
0c678     A7 FE 61 FC | 	wrlong	result3, fp
0c67c     08 4E 85 F1 | 	sub	fp, #8
0c680     24 00 90 FD | 	jmp	#LR__1081
0c684                 | LR__1080
0c684     51 00 00 FF 
0c688     D4 E5 05 F1 | 	add	objptr, ##41940
0c68c     F2 22 02 FB | 	rdlong	local03, objptr
0c690     51 00 00 FF 
0c694     D4 E5 85 F1 | 	sub	objptr, ##41940
0c698     A7 22 62 FC | 	wrlong	local03, fp
0c69c     08 4E 05 F1 | 	add	fp, #8
0c6a0     A7 3E 68 FC | 	wrlong	#31, fp
0c6a4     08 4E 85 F1 | 	sub	fp, #8
0c6a8                 | LR__1081
0c6a8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c6a8     4A 00 00 FF 
0c6ac     84 E4 05 F1 | 	add	objptr, ##38020
0c6b0     F2 12 02 FB | 	rdlong	arg01, objptr
0c6b4     4A 00 00 FF 
0c6b8     84 E4 85 F1 | 	sub	objptr, ##38020
0c6bc     D8 10 B1 FD | 	call	#_pslpeek
0c6c0     FF FF 7F FF 
0c6c4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c6c8     0C 00 90 5D |  if_ne	jmp	#LR__1082
0c6cc     1B 12 06 F6 | 	mov	arg01, #27
0c6d0     30 0E B1 FD | 	call	#_printerror
0c6d4     1C 03 90 FD | 	jmp	#LR__1088
0c6d8                 | LR__1082
0c6d8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c6d8     08 4E 05 F1 | 	add	fp, #8
0c6dc     A7 22 02 FB | 	rdlong	local03, fp
0c6e0     08 4E 85 F1 | 	sub	fp, #8
0c6e4     2B 22 0E F2 | 	cmp	local03, #43 wz
0c6e8     18 00 90 5D |  if_ne	jmp	#LR__1083
0c6ec     A7 12 02 FB | 	rdlong	arg01, fp
0c6f0     90 4C B0 FD | 	call	#_convertstring
0c6f4     A7 FA 61 FC | 	wrlong	result1, fp
0c6f8     08 4E 05 F1 | 	add	fp, #8
0c6fc     A7 3E 68 FC | 	wrlong	#31, fp
0c700     08 4E 85 F1 | 	sub	fp, #8
0c704                 | LR__1083
0c704                 | ' if t1.result_type=result_string then
0c704     08 4E 05 F1 | 	add	fp, #8
0c708     A7 22 02 FB | 	rdlong	local03, fp
0c70c     08 4E 85 F1 | 	sub	fp, #8
0c710     1F 22 0E F2 | 	cmp	local03, #31 wz
0c714     DC 02 90 5D |  if_ne	jmp	#LR__1087
0c718                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c718     A7 12 02 FB | 	rdlong	arg01, fp
0c71c     84 01 00 FF 
0c720     77 15 06 F6 | 	mov	arg02, ##@LR__5433
0c724     9C 43 B1 FD | 	call	#__system___string_cmp
0c728     00 FA 0D F2 | 	cmp	result1, #0 wz
0c72c     51 00 00 AF 
0c730     D4 E5 05 A1 |  if_e	add	objptr, ##41940
0c734     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c738     A7 22 62 AC |  if_e	wrlong	local03, fp
0c73c     51 00 00 AF 
0c740     D4 E5 85 A1 |  if_e	sub	objptr, ##41940
0c744     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c748     51 00 00 5F 
0c74c     D4 E5 05 51 |  if_ne	add	objptr, ##41940
0c750     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c754     51 00 00 5F 
0c758     D4 E5 85 51 |  if_ne	sub	objptr, ##41940
0c75c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c75c     09 12 06 F6 | 	mov	arg01, #9
0c760     A8 93 B1 FD | 	call	#__system__close
0c764     09 22 06 F6 | 	mov	local03, #9
0c768     4A 00 00 FF 
0c76c     90 E4 05 F1 | 	add	objptr, ##38032
0c770     F2 12 02 FB | 	rdlong	arg01, objptr
0c774     4A 00 00 FF 
0c778     90 E4 85 F1 | 	sub	objptr, ##38032
0c77c     84 01 00 FF 
0c780     78 15 06 F6 | 	mov	arg02, ##@LR__5434
0c784     70 43 B1 FD | 	call	#__system___string_concat
0c788     FD 12 02 F6 | 	mov	arg01, result1
0c78c     A7 14 02 FB | 	rdlong	arg02, fp
0c790     64 43 B1 FD | 	call	#__system___string_concat
0c794     FD 14 02 F6 | 	mov	arg02, result1
0c798     11 13 02 F6 | 	mov	arg01, local03
0c79c     0D 16 06 F6 | 	mov	arg03, #13
0c7a0     FC 4E B1 FD | 	call	#__system___basic_open_string
0c7a4     01 00 00 FF 
0c7a8     0C 4E 05 F1 | 	add	fp, ##524
0c7ac     A7 0A 68 FC | 	wrlong	#5, fp
0c7b0     4A 00 00 FF 
0c7b4     84 E4 05 F1 | 	add	objptr, ##38020
0c7b8     F2 22 02 FB | 	rdlong	local03, objptr
0c7bc     4A 00 00 FF 
0c7c0     84 E4 85 F1 | 	sub	objptr, ##38020
0c7c4     10 4E 05 F1 | 	add	fp, #16
0c7c8     A7 22 62 FC | 	wrlong	local03, fp
0c7cc     01 00 00 FF 
0c7d0     1C 4E 85 F1 | 	sub	fp, ##540
0c7d4                 | ' '  put #9,1,fileheader,1
0c7d4                 | '   i=5
0c7d4                 | '   saveptr=programstart
0c7d4                 | '   do
0c7d4                 | LR__1084
0c7d4     01 00 00 FF 
0c7d8     20 4E 05 F1 | 	add	fp, ##544
0c7dc     A7 12 02 F6 | 	mov	arg01, fp
0c7e0     04 4E 85 F1 | 	sub	fp, #4
0c7e4     A7 14 02 FB | 	rdlong	arg02, fp
0c7e8     01 00 00 FF 
0c7ec     1C 4E 85 F1 | 	sub	fp, ##540
0c7f0     18 16 06 F6 | 	mov	arg03, #24
0c7f4     0B 00 00 FF 
0c7f8     CC E4 05 F1 | 	add	objptr, ##5836
0c7fc     5C 36 B1 FD | 	call	#_psram_spin2_read1
0c800     01 00 00 FF 
0c804     38 4E 05 F1 | 	add	fp, ##568
0c808     A7 12 02 F6 | 	mov	arg01, fp
0c80c     10 4E 85 F1 | 	sub	fp, #16
0c810     A7 14 02 FB | 	rdlong	arg02, fp
0c814     04 4E 05 F1 | 	add	fp, #4
0c818     A7 16 02 FB | 	rdlong	arg03, fp
0c81c     01 00 00 FF 
0c820     2C 4E 85 F1 | 	sub	fp, ##556
0c824     34 36 B1 FD | 	call	#_psram_spin2_read1
0c828     0B 00 00 FF 
0c82c     CC E4 85 F1 | 	sub	objptr, ##5836
0c830     84 01 00 FF 
0c834     7A 23 06 F6 | 	mov	local03, ##@LR__5435
0c838     01 00 00 FF 
0c83c     B8 4E 05 F1 | 	add	fp, ##696
0c840     A7 22 62 FC | 	wrlong	local03, fp
0c844                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c844                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c844                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c844     AC 4E 85 F1 | 	sub	fp, #172
0c848     A7 02 68 FC | 	wrlong	#1, fp
0c84c     20 4E 05 F1 | 	add	fp, #32
0c850     A7 24 02 FB | 	rdlong	local04, fp
0c854     01 00 00 FF 
0c858     2C 4E 85 F1 | 	sub	fp, ##556
0c85c     01 24 06 F1 | 	add	local04, #1
0c860                 | LR__1085
0c860     01 00 00 FF 
0c864     0C 4E 05 F1 | 	add	fp, ##524
0c868     A7 22 02 FB | 	rdlong	local03, fp
0c86c     01 00 00 FF 
0c870     0C 4E 85 F1 | 	sub	fp, ##524
0c874     12 23 52 F2 | 	cmps	local03, local04 wc
0c878     64 00 90 3D |  if_ae	jmp	#LR__1086
0c87c     01 00 00 FF 
0c880     B8 4E 05 F1 | 	add	fp, ##696
0c884     A7 1E 02 FB | 	rdlong	local01, fp
0c888     AC 4E 85 F1 | 	sub	fp, #172
0c88c     A7 22 02 FB | 	rdlong	local03, fp
0c890     01 22 86 F1 | 	sub	local03, #1
0c894     2C 4E 05 F1 | 	add	fp, #44
0c898     A7 22 02 F1 | 	add	local03, fp
0c89c     11 13 C2 FA | 	rdbyte	arg01, local03
0c8a0     01 00 00 FF 
0c8a4     38 4E 85 F1 | 	sub	fp, ##568
0c8a8     30 64 B1 FD | 	call	#__system__Chr_S
0c8ac     FD 14 02 F6 | 	mov	arg02, result1
0c8b0     0F 13 02 F6 | 	mov	arg01, local01
0c8b4     40 42 B1 FD | 	call	#__system___string_concat
0c8b8     01 00 00 FF 
0c8bc     B8 4E 05 F1 | 	add	fp, ##696
0c8c0     A7 FA 61 FC | 	wrlong	result1, fp
0c8c4     AC 4E 85 F1 | 	sub	fp, #172
0c8c8     A7 22 02 FB | 	rdlong	local03, fp
0c8cc     01 22 06 F1 | 	add	local03, #1
0c8d0     A7 22 62 FC | 	wrlong	local03, fp
0c8d4     01 00 00 FF 
0c8d8     0C 4E 85 F1 | 	sub	fp, ##524
0c8dc     80 FF 9F FD | 	jmp	#LR__1085
0c8e0                 | LR__1086
0c8e0                 | '  '   put #9,i,header(3),1 : i+=4
0c8e0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c8e0                 | '      print #9, saveline$
0c8e0     09 12 06 F6 | 	mov	arg01, #9
0c8e4     F4 9B B1 FD | 	call	#__system___getiolock_0540
0c8e8     FD 12 02 F6 | 	mov	arg01, result1
0c8ec     AC 41 B1 FD | 	call	#__system___lockmem
0c8f0     01 00 00 FF 
0c8f4     B8 4E 05 F1 | 	add	fp, ##696
0c8f8     A7 14 02 FB | 	rdlong	arg02, fp
0c8fc     01 00 00 FF 
0c900     B8 4E 85 F1 | 	sub	fp, ##696
0c904     09 12 06 F6 | 	mov	arg01, #9
0c908     00 16 06 F6 | 	mov	arg03, #0
0c90c     80 4E B1 FD | 	call	#__system___basic_print_string
0c910     09 12 06 F6 | 	mov	arg01, #9
0c914     0A 14 06 F6 | 	mov	arg02, #10
0c918     00 16 06 F6 | 	mov	arg03, #0
0c91c     18 4E B1 FD | 	call	#__system___basic_print_char
0c920     09 12 06 F6 | 	mov	arg01, #9
0c924     B4 9B B1 FD | 	call	#__system___getiolock_0540
0c928     FD 00 68 FC | 	wrlong	#0, result1
0c92c     01 00 00 FF 
0c930     34 4E 05 F1 | 	add	fp, ##564
0c934     A7 22 02 FB | 	rdlong	local03, fp
0c938     18 4E 85 F1 | 	sub	fp, #24
0c93c     A7 22 62 FC | 	wrlong	local03, fp
0c940     18 4E 05 F1 | 	add	fp, #24
0c944     A7 22 02 FB | 	rdlong	local03, fp
0c948     01 00 00 FF 
0c94c     34 4E 85 F1 | 	sub	fp, ##564
0c950     FF FF 3F FF 
0c954     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c958     78 FE 9F 5D |  if_ne	jmp	#LR__1084
0c95c                 | '   close #9  
0c95c     09 12 06 F6 | 	mov	arg01, #9
0c960     A8 91 B1 FD | 	call	#__system__close
0c964                 | '   print "Saved as ";currentdir$+"/"+loadname
0c964     00 12 06 F6 | 	mov	arg01, #0
0c968     70 9B B1 FD | 	call	#__system___getiolock_0540
0c96c     FD 12 02 F6 | 	mov	arg01, result1
0c970     28 41 B1 FD | 	call	#__system___lockmem
0c974     84 01 00 FF 
0c978     7B 15 06 F6 | 	mov	arg02, ##@LR__5436
0c97c     00 12 06 F6 | 	mov	arg01, #0
0c980     00 16 06 F6 | 	mov	arg03, #0
0c984     08 4E B1 FD | 	call	#__system___basic_print_string
0c988     00 20 06 F6 | 	mov	local02, #0
0c98c     4A 00 00 FF 
0c990     90 E4 05 F1 | 	add	objptr, ##38032
0c994     F2 12 02 FB | 	rdlong	arg01, objptr
0c998     4A 00 00 FF 
0c99c     90 E4 85 F1 | 	sub	objptr, ##38032
0c9a0     84 01 00 FF 
0c9a4     85 15 06 F6 | 	mov	arg02, ##@LR__5437
0c9a8     4C 41 B1 FD | 	call	#__system___string_concat
0c9ac     FD 12 02 F6 | 	mov	arg01, result1
0c9b0     51 00 00 FF 
0c9b4     D4 E5 05 F1 | 	add	objptr, ##41940
0c9b8     F2 14 02 FB | 	rdlong	arg02, objptr
0c9bc     51 00 00 FF 
0c9c0     D4 E5 85 F1 | 	sub	objptr, ##41940
0c9c4     30 41 B1 FD | 	call	#__system___string_concat
0c9c8     FD 14 02 F6 | 	mov	arg02, result1
0c9cc     10 13 02 F6 | 	mov	arg01, local02
0c9d0     00 16 06 F6 | 	mov	arg03, #0
0c9d4     B8 4D B1 FD | 	call	#__system___basic_print_string
0c9d8     00 12 06 F6 | 	mov	arg01, #0
0c9dc     0A 14 06 F6 | 	mov	arg02, #10
0c9e0     00 16 06 F6 | 	mov	arg03, #0
0c9e4     50 4D B1 FD | 	call	#__system___basic_print_char
0c9e8     00 12 06 F6 | 	mov	arg01, #0
0c9ec     EC 9A B1 FD | 	call	#__system___getiolock_0540
0c9f0     FD 00 68 FC | 	wrlong	#0, result1
0c9f4                 | LR__1087
0c9f4                 | LR__1088
0c9f4     A7 F0 03 F6 | 	mov	ptra, fp
0c9f8     B2 00 A0 FD | 	call	#popregs_
0c9fc                 | _do_save_ret
0c9fc     2D 00 64 FD | 	ret
0ca00                 | 
0ca00                 | ' 
0ca00                 | ' '----------------- Load the program
0ca00                 | ' 'lo todo: errors while loading
0ca00                 | ' 
0ca00                 | ' sub do_enter
0ca00                 | _do_enter
0ca00     01 12 06 F6 | 	mov	arg01, #1
0ca04     04 00 B0 FD | 	call	#_do_load
0ca08                 | _do_enter_ret
0ca08     2D 00 64 FD | 	ret
0ca0c                 | 
0ca0c                 | ' 
0ca0c                 | ' 
0ca0c                 | ' sub do_load(mode=0)
0ca0c                 | _do_load
0ca0c     01 4A 05 F6 | 	mov	COUNT_, #1
0ca10     A8 00 A0 FD | 	call	#pushregs_
0ca14     AC F0 07 F1 | 	add	ptra, #172
0ca18     A7 12 62 FC | 	wrlong	arg01, fp
0ca1c     4A 00 00 FF 
0ca20     80 E4 05 F1 | 	add	objptr, ##38016
0ca24     F2 14 02 FB | 	rdlong	arg02, objptr
0ca28     0A 13 02 F6 | 	mov	arg01, arg02
0ca2c     01 12 66 F0 | 	shl	arg01, #1
0ca30     0A 13 02 F1 | 	add	arg01, arg02
0ca34     02 12 66 F0 | 	shl	arg01, #2
0ca38     03 00 00 FF 
0ca3c     04 E4 85 F1 | 	sub	objptr, ##1540
0ca40     F2 12 02 F1 | 	add	arg01, objptr
0ca44     09 15 02 FB | 	rdlong	arg02, arg01
0ca48     1C 4E 05 F1 | 	add	fp, #28
0ca4c     A7 14 62 FC | 	wrlong	arg02, fp
0ca50     8C 4E 05 F1 | 	add	fp, #140
0ca54     A7 12 02 F6 | 	mov	arg01, fp
0ca58     47 00 00 FF 
0ca5c     7C E4 85 F1 | 	sub	objptr, ##36476
0ca60     80 4E 85 F1 | 	sub	fp, #128
0ca64     09 4F 61 FC | 	wrlong	fp, arg01
0ca68                 | ' numpar=compiledline(lineptr_e).result.uresult
0ca68                 | ' lpoke varptr(line2$),varptr(line2)
0ca68                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0ca68     0C 4E 85 F1 | 	sub	fp, #12
0ca6c     A7 1E 02 FB | 	rdlong	local01, fp
0ca70     1C 4E 85 F1 | 	sub	fp, #28
0ca74     01 1E 56 F2 | 	cmps	local01, #1 wc
0ca78     24 00 90 CD |  if_b	jmp	#LR__1090
0ca7c     64 F0 BF FD | 	call	#_pop
0ca80     04 4E 05 F1 | 	add	fp, #4
0ca84     A7 FA 61 FC | 	wrlong	result1, fp
0ca88     04 4E 05 F1 | 	add	fp, #4
0ca8c     A7 FC 61 FC | 	wrlong	result2, fp
0ca90     04 4E 05 F1 | 	add	fp, #4
0ca94     A7 FE 61 FC | 	wrlong	result3, fp
0ca98     0C 4E 85 F1 | 	sub	fp, #12
0ca9c     28 00 90 FD | 	jmp	#LR__1091
0caa0                 | LR__1090
0caa0     51 00 00 FF 
0caa4     D4 E5 05 F1 | 	add	objptr, ##41940
0caa8     F2 1E 02 FB | 	rdlong	local01, objptr
0caac     51 00 00 FF 
0cab0     D4 E5 85 F1 | 	sub	objptr, ##41940
0cab4     04 4E 05 F1 | 	add	fp, #4
0cab8     A7 1E 62 FC | 	wrlong	local01, fp
0cabc     08 4E 05 F1 | 	add	fp, #8
0cac0     A7 3E 68 FC | 	wrlong	#31, fp
0cac4     0C 4E 85 F1 | 	sub	fp, #12
0cac8                 | LR__1091
0cac8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0cac8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0cac8     0C 4E 05 F1 | 	add	fp, #12
0cacc     A7 1E 02 FB | 	rdlong	local01, fp
0cad0     0C 4E 85 F1 | 	sub	fp, #12
0cad4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0cad8     24 00 90 5D |  if_ne	jmp	#LR__1092
0cadc     04 4E 05 F1 | 	add	fp, #4
0cae0     A7 12 02 FB | 	rdlong	arg01, fp
0cae4     04 4E 85 F1 | 	sub	fp, #4
0cae8     98 48 B0 FD | 	call	#_convertstring
0caec     04 4E 05 F1 | 	add	fp, #4
0caf0     A7 FA 61 FC | 	wrlong	result1, fp
0caf4     08 4E 05 F1 | 	add	fp, #8
0caf8     A7 3E 68 FC | 	wrlong	#31, fp
0cafc     0C 4E 85 F1 | 	sub	fp, #12
0cb00                 | LR__1092
0cb00                 | ' if t1.result_type=result_string then
0cb00     0C 4E 05 F1 | 	add	fp, #12
0cb04     A7 1E 02 FB | 	rdlong	local01, fp
0cb08     0C 4E 85 F1 | 	sub	fp, #12
0cb0c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0cb10     D8 02 90 5D |  if_ne	jmp	#LR__1098
0cb14                 | '   if mode=0 then do_new
0cb14     A7 1E 0A FB | 	rdlong	local01, fp wz
0cb18     68 32 B0 AD |  if_e	call	#_do_new
0cb1c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0cb1c     04 4E 05 F1 | 	add	fp, #4
0cb20     A7 12 02 FB | 	rdlong	arg01, fp
0cb24     04 4E 85 F1 | 	sub	fp, #4
0cb28     84 01 00 FF 
0cb2c     87 15 06 F6 | 	mov	arg02, ##@LR__5438
0cb30     90 3F B1 FD | 	call	#__system___string_cmp
0cb34     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb38     24 00 90 5D |  if_ne	jmp	#LR__1093
0cb3c     51 00 00 FF 
0cb40     D4 E5 05 F1 | 	add	objptr, ##41940
0cb44     F2 1E 02 FB | 	rdlong	local01, objptr
0cb48     51 00 00 FF 
0cb4c     D4 E5 85 F1 | 	sub	objptr, ##41940
0cb50     04 4E 05 F1 | 	add	fp, #4
0cb54     A7 1E 62 FC | 	wrlong	local01, fp
0cb58     04 4E 85 F1 | 	sub	fp, #4
0cb5c     20 00 90 FD | 	jmp	#LR__1094
0cb60                 | LR__1093
0cb60     04 4E 05 F1 | 	add	fp, #4
0cb64     A7 1E 02 FB | 	rdlong	local01, fp
0cb68     04 4E 85 F1 | 	sub	fp, #4
0cb6c     51 00 00 FF 
0cb70     D4 E5 05 F1 | 	add	objptr, ##41940
0cb74     F2 1E 62 FC | 	wrlong	local01, objptr
0cb78     51 00 00 FF 
0cb7c     D4 E5 85 F1 | 	sub	objptr, ##41940
0cb80                 | LR__1094
0cb80                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0cb80     09 12 06 F6 | 	mov	arg01, #9
0cb84     84 8F B1 FD | 	call	#__system__close
0cb88     09 1E 06 F6 | 	mov	local01, #9
0cb8c     4A 00 00 FF 
0cb90     90 E4 05 F1 | 	add	objptr, ##38032
0cb94     F2 12 02 FB | 	rdlong	arg01, objptr
0cb98     4A 00 00 FF 
0cb9c     90 E4 85 F1 | 	sub	objptr, ##38032
0cba0     84 01 00 FF 
0cba4     88 15 06 F6 | 	mov	arg02, ##@LR__5439
0cba8     4C 3F B1 FD | 	call	#__system___string_concat
0cbac     FD 12 02 F6 | 	mov	arg01, result1
0cbb0     04 4E 05 F1 | 	add	fp, #4
0cbb4     A7 14 02 FB | 	rdlong	arg02, fp
0cbb8     04 4E 85 F1 | 	sub	fp, #4
0cbbc     38 3F B1 FD | 	call	#__system___string_concat
0cbc0     FD 14 02 F6 | 	mov	arg02, result1
0cbc4     0F 13 02 F6 | 	mov	arg01, local01
0cbc8     00 16 06 F6 | 	mov	arg03, #0
0cbcc     D0 4A B1 FD | 	call	#__system___basic_open_string
0cbd0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cbd4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cbd8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cbdc     14 4E 05 F1 | 	add	fp, #20
0cbe0     A7 FA 61 FC | 	wrlong	result1, fp
0cbe4                 | '   r=geterr() 
0cbe4                 | '   if r then 
0cbe4     14 4E 85 F1 | 	sub	fp, #20
0cbe8     50 01 90 AD |  if_e	jmp	#LR__1096
0cbec                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0cbec     09 12 06 F6 | 	mov	arg01, #9
0cbf0     18 8F B1 FD | 	call	#__system__close
0cbf4     09 1E 06 F6 | 	mov	local01, #9
0cbf8     4A 00 00 FF 
0cbfc     90 E4 05 F1 | 	add	objptr, ##38032
0cc00     F2 12 02 FB | 	rdlong	arg01, objptr
0cc04     4A 00 00 FF 
0cc08     90 E4 85 F1 | 	sub	objptr, ##38032
0cc0c     84 01 00 FF 
0cc10     8A 15 06 F6 | 	mov	arg02, ##@LR__5440
0cc14     E0 3E B1 FD | 	call	#__system___string_concat
0cc18     FD 12 02 F6 | 	mov	arg01, result1
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 14 02 FB | 	rdlong	arg02, fp
0cc24     04 4E 85 F1 | 	sub	fp, #4
0cc28     CC 3E B1 FD | 	call	#__system___string_concat
0cc2c     FD 12 02 F6 | 	mov	arg01, result1
0cc30     84 01 00 FF 
0cc34     8C 15 06 F6 | 	mov	arg02, ##@LR__5441
0cc38     BC 3E B1 FD | 	call	#__system___string_concat
0cc3c     FD 14 02 F6 | 	mov	arg02, result1
0cc40     0F 13 02 F6 | 	mov	arg01, local01
0cc44     00 16 06 F6 | 	mov	arg03, #0
0cc48     54 4A B1 FD | 	call	#__system___basic_open_string
0cc4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cc50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cc54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cc58     14 4E 05 F1 | 	add	fp, #20
0cc5c     A7 FA 61 FC | 	wrlong	result1, fp
0cc60                 | '     r=geterr() 
0cc60                 | '     if r then 
0cc60     14 4E 85 F1 | 	sub	fp, #20
0cc64     A0 00 90 AD |  if_e	jmp	#LR__1095
0cc68                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cc68     00 12 06 F6 | 	mov	arg01, #0
0cc6c     6C 98 B1 FD | 	call	#__system___getiolock_0540
0cc70     FD 12 02 F6 | 	mov	arg01, result1
0cc74     24 3E B1 FD | 	call	#__system___lockmem
0cc78     84 01 00 FF 
0cc7c     91 15 06 F6 | 	mov	arg02, ##@LR__5442
0cc80     00 12 06 F6 | 	mov	arg01, #0
0cc84     00 16 06 F6 | 	mov	arg03, #0
0cc88     04 4B B1 FD | 	call	#__system___basic_print_string
0cc8c     14 4E 05 F1 | 	add	fp, #20
0cc90     A7 14 02 FB | 	rdlong	arg02, fp
0cc94     14 4E 85 F1 | 	sub	fp, #20
0cc98     00 12 06 F6 | 	mov	arg01, #0
0cc9c     00 16 06 F6 | 	mov	arg03, #0
0cca0     0A 18 06 F6 | 	mov	arg04, #10
0cca4     2C 4B B1 FD | 	call	#__system___basic_print_integer
0cca8     84 01 00 FF 
0ccac     9F 15 06 F6 | 	mov	arg02, ##@LR__5443
0ccb0     00 12 06 F6 | 	mov	arg01, #0
0ccb4     00 16 06 F6 | 	mov	arg03, #0
0ccb8     D4 4A B1 FD | 	call	#__system___basic_print_string
0ccbc     00 1E 06 F6 | 	mov	local01, #0
0ccc0     14 4E 05 F1 | 	add	fp, #20
0ccc4     A7 12 02 FB | 	rdlong	arg01, fp
0ccc8     14 4E 85 F1 | 	sub	fp, #20
0cccc     94 64 B1 FD | 	call	#__system___strerror
0ccd0     FD 14 02 F6 | 	mov	arg02, result1
0ccd4     0F 13 02 F6 | 	mov	arg01, local01
0ccd8     00 16 06 F6 | 	mov	arg03, #0
0ccdc     B0 4A B1 FD | 	call	#__system___basic_print_string
0cce0     00 12 06 F6 | 	mov	arg01, #0
0cce4     0A 14 06 F6 | 	mov	arg02, #10
0cce8     00 16 06 F6 | 	mov	arg03, #0
0ccec     48 4A B1 FD | 	call	#__system___basic_print_char
0ccf0     00 12 06 F6 | 	mov	arg01, #0
0ccf4     E4 97 B1 FD | 	call	#__system___getiolock_0540
0ccf8     FD 00 68 FC | 	wrlong	#0, result1
0ccfc     09 12 06 F6 | 	mov	arg01, #9
0cd00     08 8E B1 FD | 	call	#__system__close
0cd04     7C 01 90 FD | 	jmp	#LR__1100
0cd08                 | LR__1095
0cd08     51 00 00 FF 
0cd0c     D4 E5 05 F1 | 	add	objptr, ##41940
0cd10     F2 12 02 FB | 	rdlong	arg01, objptr
0cd14     51 00 00 FF 
0cd18     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd1c     84 01 00 FF 
0cd20     A2 15 06 F6 | 	mov	arg02, ##@LR__5444
0cd24     D0 3D B1 FD | 	call	#__system___string_concat
0cd28     51 00 00 FF 
0cd2c     D4 E5 05 F1 | 	add	objptr, ##41940
0cd30     F2 FA 61 FC | 	wrlong	result1, objptr
0cd34     51 00 00 FF 
0cd38     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd3c                 | LR__1096
0cd3c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0cd3c     09 12 06 F6 | 	mov	arg01, #9
0cd40     C8 8D B1 FD | 	call	#__system__close
0cd44     09 1E 06 F6 | 	mov	local01, #9
0cd48     4A 00 00 FF 
0cd4c     90 E4 05 F1 | 	add	objptr, ##38032
0cd50     F2 12 02 FB | 	rdlong	arg01, objptr
0cd54     4A 00 00 FF 
0cd58     90 E4 85 F1 | 	sub	objptr, ##38032
0cd5c     84 01 00 FF 
0cd60     A7 15 06 F6 | 	mov	arg02, ##@LR__5445
0cd64     90 3D B1 FD | 	call	#__system___string_concat
0cd68     FD 12 02 F6 | 	mov	arg01, result1
0cd6c     51 00 00 FF 
0cd70     D4 E5 05 F1 | 	add	objptr, ##41940
0cd74     F2 14 02 FB | 	rdlong	arg02, objptr
0cd78     51 00 00 FF 
0cd7c     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd80     74 3D B1 FD | 	call	#__system___string_concat
0cd84     FD 14 02 F6 | 	mov	arg02, result1
0cd88     0F 13 02 F6 | 	mov	arg01, local01
0cd8c     00 16 06 F6 | 	mov	arg03, #0
0cd90     0C 49 B1 FD | 	call	#__system___basic_open_string
0cd94                 | '   do
0cd94                 | LR__1097
0cd94     09 12 06 F6 | 	mov	arg01, #9
0cd98     0C 3F B1 FD | 	call	#__system___basic_read_line
0cd9c     FD 1E 02 F6 | 	mov	local01, result1
0cda0     37 00 00 FF 
0cda4     1C E4 05 F1 | 	add	objptr, ##28188
0cda8     F2 1E 62 FC | 	wrlong	local01, objptr
0cdac     37 00 00 FF 
0cdb0     1C E4 85 F1 | 	sub	objptr, ##28188
0cdb4     A8 48 BF FD | 	call	#_interpret
0cdb8     37 00 00 FF 
0cdbc     1C E4 05 F1 | 	add	objptr, ##28188
0cdc0     F2 12 02 FB | 	rdlong	arg01, objptr
0cdc4     37 00 00 FF 
0cdc8     1C E4 85 F1 | 	sub	objptr, ##28188
0cdcc     84 01 00 FF 
0cdd0     A9 15 06 F6 | 	mov	arg02, ##@LR__5446
0cdd4     EC 3C B1 FD | 	call	#__system___string_cmp
0cdd8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cddc     B4 FF 9F 5D |  if_ne	jmp	#LR__1097
0cde0                 | '   close #9   
0cde0     09 12 06 F6 | 	mov	arg01, #9
0cde4     24 8D B1 FD | 	call	#__system__close
0cde8     08 00 90 FD | 	jmp	#LR__1099
0cdec                 | LR__1098
0cdec     1E 12 06 F6 | 	mov	arg01, #30
0cdf0     10 07 B1 FD | 	call	#_printerror
0cdf4                 | LR__1099
0cdf4                 | ' print "Loaded ";currentdir$+"/"+loadname
0cdf4     00 12 06 F6 | 	mov	arg01, #0
0cdf8     E0 96 B1 FD | 	call	#__system___getiolock_0540
0cdfc     FD 12 02 F6 | 	mov	arg01, result1
0ce00     98 3C B1 FD | 	call	#__system___lockmem
0ce04     84 01 00 FF 
0ce08     AA 15 06 F6 | 	mov	arg02, ##@LR__5447
0ce0c     00 12 06 F6 | 	mov	arg01, #0
0ce10     00 16 06 F6 | 	mov	arg03, #0
0ce14     78 49 B1 FD | 	call	#__system___basic_print_string
0ce18     00 1E 06 F6 | 	mov	local01, #0
0ce1c     4A 00 00 FF 
0ce20     90 E4 05 F1 | 	add	objptr, ##38032
0ce24     F2 12 02 FB | 	rdlong	arg01, objptr
0ce28     4A 00 00 FF 
0ce2c     90 E4 85 F1 | 	sub	objptr, ##38032
0ce30     84 01 00 FF 
0ce34     B2 15 06 F6 | 	mov	arg02, ##@LR__5448
0ce38     BC 3C B1 FD | 	call	#__system___string_concat
0ce3c     FD 12 02 F6 | 	mov	arg01, result1
0ce40     51 00 00 FF 
0ce44     D4 E5 05 F1 | 	add	objptr, ##41940
0ce48     F2 14 02 FB | 	rdlong	arg02, objptr
0ce4c     51 00 00 FF 
0ce50     D4 E5 85 F1 | 	sub	objptr, ##41940
0ce54     A0 3C B1 FD | 	call	#__system___string_concat
0ce58     FD 14 02 F6 | 	mov	arg02, result1
0ce5c     0F 13 02 F6 | 	mov	arg01, local01
0ce60     00 16 06 F6 | 	mov	arg03, #0
0ce64     28 49 B1 FD | 	call	#__system___basic_print_string
0ce68     00 12 06 F6 | 	mov	arg01, #0
0ce6c     0A 14 06 F6 | 	mov	arg02, #10
0ce70     00 16 06 F6 | 	mov	arg03, #0
0ce74     C0 48 B1 FD | 	call	#__system___basic_print_char
0ce78     00 12 06 F6 | 	mov	arg01, #0
0ce7c     5C 96 B1 FD | 	call	#__system___getiolock_0540
0ce80     FD 00 68 FC | 	wrlong	#0, result1
0ce84                 | LR__1100
0ce84     A7 F0 03 F6 | 	mov	ptra, fp
0ce88     B2 00 A0 FD | 	call	#popregs_
0ce8c                 | _do_load_ret
0ce8c     2D 00 64 FD | 	ret
0ce90                 | 
0ce90                 | ' 
0ce90                 | ' sub do_end
0ce90                 | _do_end
0ce90     4A 00 00 FF 
0ce94     7C E4 05 F1 | 	add	objptr, ##38012
0ce98     F2 00 02 FB | 	rdlong	_var01, objptr
0ce9c     01 00 86 F1 | 	sub	_var01, #1
0cea0     04 E4 05 F1 | 	add	objptr, #4
0cea4     F2 00 62 FC | 	wrlong	_var01, objptr
0cea8     06 00 00 FF 
0ceac     34 E4 05 F1 | 	add	objptr, ##3124
0ceb0     FF FF BF FF 
0ceb4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0ceb8     50 00 00 FF 
0cebc     B4 E4 85 F1 | 	sub	objptr, ##41140
0cec0                 | _do_end_ret
0cec0     2D 00 64 FD | 	ret
0cec4                 | 
0cec4                 | ' 
0cec4                 | ' '----------------- Run the program 
0cec4                 | ' 
0cec4                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0cec4                 | ' 
0cec4                 | ' sub do_run
0cec4                 | _do_run
0cec4     01 4A 05 F6 | 	mov	COUNT_, #1
0cec8     A8 00 A0 FD | 	call	#pushregs_
0cecc     4A 00 00 FF 
0ced0     80 E4 05 F1 | 	add	objptr, ##38016
0ced4     F2 18 02 FB | 	rdlong	arg04, objptr
0ced8     0C 17 02 F6 | 	mov	arg03, arg04
0cedc     01 16 66 F0 | 	shl	arg03, #1
0cee0     0C 17 02 F1 | 	add	arg03, arg04
0cee4     02 16 66 F0 | 	shl	arg03, #2
0cee8     03 00 00 FF 
0ceec     04 E4 85 F1 | 	sub	objptr, ##1540
0cef0     F2 16 02 F1 | 	add	arg03, objptr
0cef4     0B 15 02 FB | 	rdlong	arg02, arg03
0cef8                 | ' numpar=compiledline(lineptr_e).result.uresult
0cef8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0cef8     01 14 0E F2 | 	cmp	arg02, #1 wz
0cefc     47 00 00 FF 
0cf00     7C E4 85 F1 | 	sub	objptr, ##36476
0cf04     00 12 06 A6 |  if_e	mov	arg01, #0
0cf08     00 FB BF AD |  if_e	call	#_do_load
0cf0c     4A 00 00 FF 
0cf10     84 E4 05 F1 | 	add	objptr, ##38020
0cf14     F2 18 02 FB | 	rdlong	arg04, objptr
0cf18     06 00 00 FF 
0cf1c     30 E4 05 F1 | 	add	objptr, ##3120
0cf20     F2 18 62 FC | 	wrlong	arg04, objptr
0cf24     04 E4 05 F1 | 	add	objptr, #4
0cf28     F2 00 68 FC | 	wrlong	#0, objptr
0cf2c     04 E4 05 F1 | 	add	objptr, #4
0cf30     FF FF FF FF 
0cf34     F2 FE 6B FC | 	wrlong	##-1, objptr
0cf38                 | ' if inrun>0 then 
0cf38     2C E4 05 F1 | 	add	objptr, #44
0cf3c     F2 18 02 FB | 	rdlong	arg04, objptr
0cf40     50 00 00 FF 
0cf44     E8 E4 85 F1 | 	sub	objptr, ##41192
0cf48     01 18 16 F2 | 	cmp	arg04, #1 wc
0cf4c     30 00 90 CD |  if_b	jmp	#LR__1110
0cf50     50 00 00 FF 
0cf54     EC E4 05 F1 | 	add	objptr, ##41196
0cf58     F2 12 02 F6 | 	mov	arg01, objptr
0cf5c     38 E4 85 F1 | 	sub	objptr, #56
0cf60     F2 14 02 FB | 	rdlong	arg02, objptr
0cf64     18 16 06 F6 | 	mov	arg03, #24
0cf68     44 00 00 FF 
0cf6c     E8 E5 85 F1 | 	sub	objptr, ##35304
0cf70     E8 2E B1 FD | 	call	#_psram_spin2_read1
0cf74     0B 00 00 FF 
0cf78     CC E4 85 F1 | 	sub	objptr, ##5836
0cf7c                 | '   psram.read1(varptr(runheader),runptr,24)  
0cf7c                 | '   return
0cf7c     88 02 90 FD | 	jmp	#LR__1116
0cf80                 | LR__1110
0cf80     50 00 00 FF 
0cf84     E8 E4 05 F1 | 	add	objptr, ##41192
0cf88     F2 02 68 FC | 	wrlong	#1, objptr
0cf8c     04 E4 05 F1 | 	add	objptr, #4
0cf90     F2 12 02 F6 | 	mov	arg01, objptr
0cf94     38 E4 85 F1 | 	sub	objptr, #56
0cf98     F2 14 02 FB | 	rdlong	arg02, objptr
0cf9c     18 16 06 F6 | 	mov	arg03, #24
0cfa0     44 00 00 FF 
0cfa4     E8 E5 85 F1 | 	sub	objptr, ##35304
0cfa8     B0 2E B1 FD | 	call	#_psram_spin2_read1
0cfac                 | ' inrun=1
0cfac                 | ' psram.read1(varptr(runheader),runptr,24) 
0cfac                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0cfac     45 00 00 FF 
0cfb0     20 E4 05 F1 | 	add	objptr, ##35360
0cfb4     F2 1E 02 FB | 	rdlong	local01, objptr
0cfb8     50 00 00 FF 
0cfbc     EC E4 85 F1 | 	sub	objptr, ##41196
0cfc0     FF FF 7F FF 
0cfc4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0cfc8     50 00 00 AF 
0cfcc     E8 E4 05 A1 |  if_e	add	objptr, ##41192
0cfd0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0cfd4     50 00 00 AF 
0cfd8     E8 E4 85 A1 |  if_e	sub	objptr, ##41192
0cfdc     28 02 90 AD |  if_e	jmp	#LR__1116
0cfe0                 | ' do 
0cfe0                 | LR__1111
0cfe0                 | '   if runptr<>oldrunptr then
0cfe0     50 00 00 FF 
0cfe4     B4 E4 05 F1 | 	add	objptr, ##41140
0cfe8     F2 1E 02 FB | 	rdlong	local01, objptr
0cfec     08 E4 05 F1 | 	add	objptr, #8
0cff0     F2 18 02 FB | 	rdlong	arg04, objptr
0cff4     50 00 00 FF 
0cff8     BC E4 85 F1 | 	sub	objptr, ##41148
0cffc     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0d000     CC 00 90 AD |  if_e	jmp	#LR__1112
0d004     50 00 00 FF 
0d008     EC E4 05 F1 | 	add	objptr, ##41196
0d00c     F2 12 02 F6 | 	mov	arg01, objptr
0d010     38 E4 85 F1 | 	sub	objptr, #56
0d014     F2 14 02 FB | 	rdlong	arg02, objptr
0d018     18 16 06 F6 | 	mov	arg03, #24
0d01c     44 00 00 FF 
0d020     E8 E5 85 F1 | 	sub	objptr, ##35304
0d024     34 2E B1 FD | 	call	#_psram_spin2_read1
0d028     3B 00 00 FF 
0d02c     B0 E5 05 F1 | 	add	objptr, ##30640
0d030     F2 12 02 F6 | 	mov	arg01, objptr
0d034     09 00 00 FF 
0d038     38 E4 05 F1 | 	add	objptr, ##4664
0d03c     F2 14 02 FB | 	rdlong	arg02, objptr
0d040     0B 00 00 FF 
0d044     50 E4 85 F1 | 	sub	objptr, ##5712
0d048     F2 1E 02 FB | 	rdlong	local01, objptr
0d04c     01 1E 66 F0 | 	shl	local01, #1
0d050     0F 15 02 F1 | 	add	arg02, local01
0d054     0B 00 00 FF 
0d058     90 E4 05 F1 | 	add	objptr, ##5776
0d05c     F2 16 02 FB | 	rdlong	arg03, objptr
0d060     40 E4 85 F1 | 	sub	objptr, #64
0d064     F2 1E 02 FB | 	rdlong	local01, objptr
0d068     0F 17 82 F1 | 	sub	arg03, local01
0d06c     44 00 00 FF 
0d070     E8 E5 85 F1 | 	sub	objptr, ##35304
0d074     E4 2D B1 FD | 	call	#_psram_spin2_read1
0d078     45 00 00 FF 
0d07c     28 E4 05 F1 | 	add	objptr, ##35368
0d080     F2 1E 02 FB | 	rdlong	local01, objptr
0d084     40 E4 85 F1 | 	sub	objptr, #64
0d088     F2 FA 01 FB | 	rdlong	result1, objptr
0d08c     FD 1E 82 F1 | 	sub	local01, result1
0d090     0B 00 00 FF 
0d094     50 E4 85 F1 | 	sub	objptr, ##5712
0d098     F2 FA 01 FB | 	rdlong	result1, objptr
0d09c     FD 1E 12 FD | 	qdiv	local01, result1
0d0a0     05 00 00 FF 
0d0a4     18 E4 05 F1 | 	add	objptr, ##2584
0d0a8     18 1E 62 FD | 	getqx	local01
0d0ac     03 1E 86 F1 | 	sub	local01, #3
0d0b0     F2 1E 62 FC | 	wrlong	local01, objptr
0d0b4     06 00 00 FF 
0d0b8     38 E4 05 F1 | 	add	objptr, ##3128
0d0bc     F2 1E 02 FB | 	rdlong	local01, objptr
0d0c0     08 E4 05 F1 | 	add	objptr, #8
0d0c4     F2 1E 62 FC | 	wrlong	local01, objptr
0d0c8     50 00 00 FF 
0d0cc     BC E4 85 F1 | 	sub	objptr, ##41148
0d0d0                 | LR__1112
0d0d0     50 00 00 FF 
0d0d4     00 E5 05 F1 | 	add	objptr, ##41216
0d0d8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0dc     4C E4 85 F1 | 	sub	objptr, #76
0d0e0     F2 1E 62 FC | 	wrlong	local01, objptr
0d0e4     04 E4 05 F1 | 	add	objptr, #4
0d0e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d0ec     50 00 00 FF 
0d0f0     B8 E4 85 F1 | 	sub	objptr, ##41144
0d0f4     E8 E8 BF FD | 	call	#_execute_line
0d0f8     50 00 00 FF 
0d0fc     B8 E4 05 F1 | 	add	objptr, ##41144
0d100     F2 FA 61 FC | 	wrlong	result1, objptr
0d104     04 E4 85 F1 | 	sub	objptr, #4
0d108     F2 1E 02 FB | 	rdlong	local01, objptr
0d10c     50 00 00 FF 
0d110     B4 E4 85 F1 | 	sub	objptr, ##41140
0d114     FF FF 3F FF 
0d118     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d11c     30 00 90 AD |  if_e	jmp	#LR__1114
0d120     E0 12 06 F6 | 	mov	arg01, #224
0d124     C4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d128     00 FA 0D F2 | 	cmp	result1, #0 wz
0d12c     10 00 90 5D |  if_ne	jmp	#LR__1113
0d130     E4 12 06 F6 | 	mov	arg01, #228
0d134     B4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d138     00 FA 0D F2 | 	cmp	result1, #0 wz
0d13c     A0 FE 9F AD |  if_e	jmp	#LR__1111
0d140                 | LR__1113
0d140     06 12 06 F6 | 	mov	arg01, #6
0d144     A4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d148     00 FA 0D F2 | 	cmp	result1, #0 wz
0d14c     90 FE 9F AD |  if_e	jmp	#LR__1111
0d150                 | LR__1114
0d150                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d150                 | ' if runptr<>$7FFF_FFFF then 
0d150     50 00 00 FF 
0d154     B4 E4 05 F1 | 	add	objptr, ##41140
0d158     F2 1E 02 FB | 	rdlong	local01, objptr
0d15c     50 00 00 FF 
0d160     B4 E4 85 F1 | 	sub	objptr, ##41140
0d164     FF FF 3F FF 
0d168     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d16c     64 00 90 AD |  if_e	jmp	#LR__1115
0d170                 | '     print "Stopped at line ";runheader(0)
0d170     00 12 06 F6 | 	mov	arg01, #0
0d174     64 93 B1 FD | 	call	#__system___getiolock_0540
0d178     FD 12 02 F6 | 	mov	arg01, result1
0d17c     1C 39 B1 FD | 	call	#__system___lockmem
0d180     84 01 00 FF 
0d184     B4 15 06 F6 | 	mov	arg02, ##@LR__5449
0d188     00 12 06 F6 | 	mov	arg01, #0
0d18c     00 16 06 F6 | 	mov	arg03, #0
0d190     FC 45 B1 FD | 	call	#__system___basic_print_string
0d194     50 00 00 FF 
0d198     EC E4 05 F1 | 	add	objptr, ##41196
0d19c     F2 14 02 FB | 	rdlong	arg02, objptr
0d1a0     50 00 00 FF 
0d1a4     EC E4 85 F1 | 	sub	objptr, ##41196
0d1a8     00 12 06 F6 | 	mov	arg01, #0
0d1ac     00 16 06 F6 | 	mov	arg03, #0
0d1b0     0A 18 06 F6 | 	mov	arg04, #10
0d1b4     5C 46 B1 FD | 	call	#__system___basic_print_unsigned
0d1b8     00 12 06 F6 | 	mov	arg01, #0
0d1bc     0A 14 06 F6 | 	mov	arg02, #10
0d1c0     00 16 06 F6 | 	mov	arg03, #0
0d1c4     70 45 B1 FD | 	call	#__system___basic_print_char
0d1c8     00 12 06 F6 | 	mov	arg01, #0
0d1cc     0C 93 B1 FD | 	call	#__system___getiolock_0540
0d1d0     FD 00 68 FC | 	wrlong	#0, result1
0d1d4                 | LR__1115
0d1d4     50 00 00 FF 
0d1d8     E8 E4 05 F1 | 	add	objptr, ##41192
0d1dc     F2 00 68 FC | 	wrlong	#0, objptr
0d1e0     50 00 00 FF 
0d1e4     E8 E4 85 F1 | 	sub	objptr, ##41192
0d1e8     11 12 06 F6 | 	mov	arg01, #17
0d1ec     08 14 06 F6 | 	mov	arg02, #8
0d1f0     10 16 06 F6 | 	mov	arg03, #16
0d1f4     A8 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d1f8     10 12 06 F6 | 	mov	arg01, #16
0d1fc     20 14 06 F6 | 	mov	arg02, #32
0d200     20 16 06 F6 | 	mov	arg03, #32
0d204     98 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d208                 | LR__1116
0d208     A7 F0 03 F6 | 	mov	ptra, fp
0d20c     B2 00 A0 FD | 	call	#popregs_
0d210                 | _do_run_ret
0d210     2D 00 64 FD | 	ret
0d214                 | 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' 
0d214                 | ' sub do_defenv
0d214                 | _do_defenv
0d214     08 4A 05 F6 | 	mov	COUNT_, #8
0d218     A8 00 A0 FD | 	call	#pushregs_
0d21c     B4 F0 07 F1 | 	add	ptra, #180
0d220     4A 00 00 FF 
0d224     80 E4 05 F1 | 	add	objptr, ##38016
0d228     F2 1E 02 FB | 	rdlong	local01, objptr
0d22c     0F 1B 02 F6 | 	mov	arg05, local01
0d230     01 1A 66 F0 | 	shl	arg05, #1
0d234     0F 1B 02 F1 | 	add	arg05, local01
0d238     02 1A 66 F0 | 	shl	arg05, #2
0d23c     03 00 00 FF 
0d240     04 E4 85 F1 | 	sub	objptr, ##1540
0d244     F2 20 02 F6 | 	mov	local02, objptr
0d248     F2 1A 02 F1 | 	add	arg05, objptr
0d24c     0D 1B 02 FB | 	rdlong	arg05, arg05
0d250     10 4E 05 F1 | 	add	fp, #16
0d254     A7 1A 62 FC | 	wrlong	arg05, fp
0d258                 | ' 
0d258                 | ' numpar=compiledline(lineptr_e).result.uresult
0d258                 | ' 
0d258                 | ' 
0d258                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d258                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d258                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d258                 | ' 
0d258                 | ' 
0d258                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d258     10 4E 85 F1 | 	sub	fp, #16
0d25c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d260     47 00 00 FF 
0d264     7C E4 85 F1 | 	sub	objptr, ##36476
0d268     10 4E 05 51 |  if_ne	add	fp, #16
0d26c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d270     10 4E 85 51 |  if_ne	sub	fp, #16
0d274     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d278     10 4E 05 51 |  if_ne	add	fp, #16
0d27c     0F 21 02 56 |  if_ne	mov	local02, local01
0d280     10 4E 85 51 |  if_ne	sub	fp, #16
0d284     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d288     10 0C 90 5D |  if_ne	jmp	#LR__1141
0d28c                 | ' 
0d28c                 | '  
0d28c                 | ' if numpar=2 then
0d28c     10 4E 05 F1 | 	add	fp, #16
0d290     A7 20 02 FB | 	rdlong	local02, fp
0d294     10 4E 85 F1 | 	sub	fp, #16
0d298     02 20 0E F2 | 	cmp	local02, #2 wz
0d29c     24 04 90 5D |  if_ne	jmp	#LR__1133
0d2a0     40 E8 BF FD | 	call	#_pop
0d2a4     FF 1A 02 F6 | 	mov	arg05, result3
0d2a8     5C 4E 05 F1 | 	add	fp, #92
0d2ac     A7 FA 61 FC | 	wrlong	result1, fp
0d2b0     04 4E 05 F1 | 	add	fp, #4
0d2b4     A7 FC 61 FC | 	wrlong	result2, fp
0d2b8     04 4E 05 F1 | 	add	fp, #4
0d2bc     A7 1A 62 FC | 	wrlong	arg05, fp
0d2c0                 | '   t1=pop()
0d2c0                 | '   if t1.result_type=result_string2 then 
0d2c0     64 4E 85 F1 | 	sub	fp, #100
0d2c4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d2c8     20 00 90 5D |  if_ne	jmp	#LR__1120
0d2cc     5C 4E 05 F1 | 	add	fp, #92
0d2d0     A7 12 02 FB | 	rdlong	arg01, fp
0d2d4     5C 4E 85 F1 | 	sub	fp, #92
0d2d8     A8 40 B0 FD | 	call	#_convertstring
0d2dc     68 4E 05 F1 | 	add	fp, #104
0d2e0     A7 FA 61 FC | 	wrlong	result1, fp
0d2e4     68 4E 85 F1 | 	sub	fp, #104
0d2e8     58 00 90 FD | 	jmp	#LR__1123
0d2ec                 | LR__1120
0d2ec     64 4E 05 F1 | 	add	fp, #100
0d2f0     A7 20 02 FB | 	rdlong	local02, fp
0d2f4     64 4E 85 F1 | 	sub	fp, #100
0d2f8     1F 20 0E F2 | 	cmp	local02, #31 wz
0d2fc     18 00 90 5D |  if_ne	jmp	#LR__1121
0d300     5C 4E 05 F1 | 	add	fp, #92
0d304     A7 20 02 FB | 	rdlong	local02, fp
0d308     0C 4E 05 F1 | 	add	fp, #12
0d30c     A7 20 62 FC | 	wrlong	local02, fp
0d310     68 4E 85 F1 | 	sub	fp, #104
0d314     2C 00 90 FD | 	jmp	#LR__1122
0d318                 | LR__1121
0d318     84 01 00 FF 
0d31c     C5 21 06 F6 | 	mov	local02, ##@LR__5450
0d320     68 4E 05 F1 | 	add	fp, #104
0d324     A7 20 62 FC | 	wrlong	local02, fp
0d328     0C 4E 85 F1 | 	sub	fp, #12
0d32c     A7 12 02 F6 | 	mov	arg01, fp
0d330     5C 4E 85 F1 | 	sub	fp, #92
0d334     70 88 B0 FD | 	call	#_converttoint
0d338     24 4E 05 F1 | 	add	fp, #36
0d33c     A7 FA 61 FC | 	wrlong	result1, fp
0d340     24 4E 85 F1 | 	sub	fp, #36
0d344                 | LR__1122
0d344                 | LR__1123
0d344                 | ' 
0d344                 | '     
0d344                 | '   if s1<>"" then 
0d344     68 4E 05 F1 | 	add	fp, #104
0d348     A7 12 02 FB | 	rdlong	arg01, fp
0d34c     68 4E 85 F1 | 	sub	fp, #104
0d350     84 01 00 FF 
0d354     C6 15 06 F6 | 	mov	arg02, ##@LR__5451
0d358     68 37 B1 FD | 	call	#__system___string_cmp
0d35c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d360     24 02 90 AD |  if_e	jmp	#LR__1127
0d364     7C E7 BF FD | 	call	#_pop
0d368     FF 1E 02 F6 | 	mov	local01, result3
0d36c     5C 4E 05 F1 | 	add	fp, #92
0d370     A7 FA 61 FC | 	wrlong	result1, fp
0d374     04 4E 05 F1 | 	add	fp, #4
0d378     A7 FC 61 FC | 	wrlong	result2, fp
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 1E 62 FC | 	wrlong	local01, fp
0d384     08 4E 85 F1 | 	sub	fp, #8
0d388     A7 12 02 F6 | 	mov	arg01, fp
0d38c     5C 4E 85 F1 | 	sub	fp, #92
0d390     14 88 B0 FD | 	call	#_converttoint
0d394     20 4E 05 F1 | 	add	fp, #32
0d398     A7 FA 61 FC | 	wrlong	result1, fp
0d39c     20 4E 85 F1 | 	sub	fp, #32
0d3a0                 | '     t1=pop()
0d3a0                 | '     channel=converttoint(t1) 
0d3a0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d3a0     09 12 06 F6 | 	mov	arg01, #9
0d3a4     64 87 B1 FD | 	call	#__system__close
0d3a8     09 20 06 F6 | 	mov	local02, #9
0d3ac     84 01 00 FF 
0d3b0     C7 13 06 F6 | 	mov	arg01, ##@LR__5452
0d3b4     68 4E 05 F1 | 	add	fp, #104
0d3b8     A7 14 02 FB | 	rdlong	arg02, fp
0d3bc     68 4E 85 F1 | 	sub	fp, #104
0d3c0     34 37 B1 FD | 	call	#__system___string_concat
0d3c4     FD 14 02 F6 | 	mov	arg02, result1
0d3c8     10 13 02 F6 | 	mov	arg01, local02
0d3cc     00 16 06 F6 | 	mov	arg03, #0
0d3d0     CC 42 B1 FD | 	call	#__system___basic_open_string
0d3d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d3d8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d3dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d3e0     0C 4E 05 F1 | 	add	fp, #12
0d3e4     A7 FA 61 FC | 	wrlong	result1, fp
0d3e8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d3e8     0C 4E 85 F1 | 	sub	fp, #12
0d3ec     A0 00 90 AD |  if_e	jmp	#LR__1124
0d3f0     00 12 06 F6 | 	mov	arg01, #0
0d3f4     E4 90 B1 FD | 	call	#__system___getiolock_0540
0d3f8     FD 12 02 F6 | 	mov	arg01, result1
0d3fc     9C 36 B1 FD | 	call	#__system___lockmem
0d400     84 01 00 FF 
0d404     D4 15 06 F6 | 	mov	arg02, ##@LR__5453
0d408     00 12 06 F6 | 	mov	arg01, #0
0d40c     00 16 06 F6 | 	mov	arg03, #0
0d410     7C 43 B1 FD | 	call	#__system___basic_print_string
0d414     0C 4E 05 F1 | 	add	fp, #12
0d418     A7 14 02 FB | 	rdlong	arg02, fp
0d41c     0C 4E 85 F1 | 	sub	fp, #12
0d420     00 12 06 F6 | 	mov	arg01, #0
0d424     00 16 06 F6 | 	mov	arg03, #0
0d428     0A 18 06 F6 | 	mov	arg04, #10
0d42c     A4 43 B1 FD | 	call	#__system___basic_print_integer
0d430     84 01 00 FF 
0d434     E2 15 06 F6 | 	mov	arg02, ##@LR__5454
0d438     00 12 06 F6 | 	mov	arg01, #0
0d43c     00 16 06 F6 | 	mov	arg03, #0
0d440     4C 43 B1 FD | 	call	#__system___basic_print_string
0d444     00 20 06 F6 | 	mov	local02, #0
0d448     0C 4E 05 F1 | 	add	fp, #12
0d44c     A7 12 02 FB | 	rdlong	arg01, fp
0d450     0C 4E 85 F1 | 	sub	fp, #12
0d454     0C 5D B1 FD | 	call	#__system___strerror
0d458     FD 14 02 F6 | 	mov	arg02, result1
0d45c     10 13 02 F6 | 	mov	arg01, local02
0d460     00 16 06 F6 | 	mov	arg03, #0
0d464     28 43 B1 FD | 	call	#__system___basic_print_string
0d468     00 12 06 F6 | 	mov	arg01, #0
0d46c     0A 14 06 F6 | 	mov	arg02, #10
0d470     00 16 06 F6 | 	mov	arg03, #0
0d474     C0 42 B1 FD | 	call	#__system___basic_print_char
0d478     00 12 06 F6 | 	mov	arg01, #0
0d47c     5C 90 B1 FD | 	call	#__system___getiolock_0540
0d480     FD 00 68 FC | 	wrlong	#0, result1
0d484     09 12 06 F6 | 	mov	arg01, #9
0d488     80 86 B1 FD | 	call	#__system__close
0d48c     0C 0A 90 FD | 	jmp	#LR__1141
0d490                 | LR__1124
0d490                 | '     get #9,17,envbuf8(channel,0),256
0d490     20 4E 05 F1 | 	add	fp, #32
0d494     A7 1A 02 FB | 	rdlong	arg05, fp
0d498     20 4E 85 F1 | 	sub	fp, #32
0d49c     0D 17 02 F6 | 	mov	arg03, arg05
0d4a0     09 16 66 F0 | 	shl	arg03, #9
0d4a4     0D 17 02 F1 | 	add	arg03, arg05
0d4a8     0C 00 00 FF 
0d4ac     D8 E4 05 F1 | 	add	objptr, ##6360
0d4b0     F2 16 02 F1 | 	add	arg03, objptr
0d4b4     09 12 06 F6 | 	mov	arg01, #9
0d4b8     11 14 06 F6 | 	mov	arg02, #17
0d4bc     00 19 06 F6 | 	mov	arg04, #256
0d4c0     01 1A 06 F6 | 	mov	arg05, #1
0d4c4     0C 00 00 FF 
0d4c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4cc     3C 44 B1 FD | 	call	#__system___basic_get
0d4d0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d4d0     14 4E 05 F1 | 	add	fp, #20
0d4d4     A7 FE 69 FC | 	wrlong	#255, fp
0d4d8     14 4E 85 F1 | 	sub	fp, #20
0d4dc     0C 00 00 FF 
0d4e0     D8 E4 05 F1 | 	add	objptr, ##6360
0d4e4     97 30 48 FB | 	callpa	#(@LR__1126-@LR__1125)>>2,fcache_load_ptr_
0d4e8                 | LR__1125
0d4e8     20 4E 05 F1 | 	add	fp, #32
0d4ec     A7 18 02 FB | 	rdlong	arg04, fp
0d4f0     0C 21 02 F6 | 	mov	local02, arg04
0d4f4     09 20 66 F0 | 	shl	local02, #9
0d4f8     F2 20 02 F1 | 	add	local02, objptr
0d4fc     0C 4E 85 F1 | 	sub	fp, #12
0d500     A7 1E 02 FB | 	rdlong	local01, fp
0d504     0F 1B 02 F6 | 	mov	arg05, local01
0d508     01 1A 66 F0 | 	shl	arg05, #1
0d50c     10 1B 02 F1 | 	add	arg05, local02
0d510     0C 21 02 F6 | 	mov	local02, arg04
0d514     09 20 66 F0 | 	shl	local02, #9
0d518     0C 21 02 F1 | 	add	local02, arg04
0d51c     F2 20 02 F1 | 	add	local02, objptr
0d520     10 1F 02 F1 | 	add	local01, local02
0d524     0F 21 C2 FA | 	rdbyte	local02, local01
0d528     00 21 06 FA | 	mul	local02, #256
0d52c     0D 21 52 FC | 	wrword	local02, arg05
0d530     A7 20 02 FB | 	rdlong	local02, fp
0d534     01 20 86 F1 | 	sub	local02, #1
0d538     A7 20 62 FC | 	wrlong	local02, fp
0d53c     14 4E 85 F1 | 	sub	fp, #20
0d540     00 20 56 F2 | 	cmps	local02, #0 wc
0d544     A0 FF 9F 3D |  if_ae	jmp	#LR__1125
0d548                 | LR__1126
0d548     0C 00 00 FF 
0d54c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d550                 | '     close #9
0d550     09 12 06 F6 | 	mov	arg01, #9
0d554     B4 85 B1 FD | 	call	#__system__close
0d558     20 4E 05 F1 | 	add	fp, #32
0d55c     A7 20 02 FB | 	rdlong	local02, fp
0d560     20 4E 85 F1 | 	sub	fp, #32
0d564     09 20 66 F0 | 	shl	local02, #9
0d568     0C 00 00 FF 
0d56c     D8 E4 05 F1 | 	add	objptr, ##6360
0d570     F2 20 02 F1 | 	add	local02, objptr
0d574     FE 21 06 F1 | 	add	local02, #510
0d578     10 01 58 FC | 	wrword	#0, local02
0d57c                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d57c                 | '     return
0d57c     0C 00 00 FF 
0d580     D8 E4 85 F1 | 	sub	objptr, ##6360
0d584     14 09 90 FD | 	jmp	#LR__1141
0d588                 | LR__1127
0d588                 | '     if wptr < ($80000 - 2048) then 
0d588     24 4E 05 F1 | 	add	fp, #36
0d58c     A7 22 02 FB | 	rdlong	local03, fp
0d590     24 4E 85 F1 | 	sub	fp, #36
0d594     FC 03 00 FF 
0d598     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d59c     7C 00 90 3D |  if_ae	jmp	#LR__1130
0d5a0                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d5a0     14 4E 05 F1 | 	add	fp, #20
0d5a4     A7 00 68 FC | 	wrlong	#0, fp
0d5a8     14 4E 85 F1 | 	sub	fp, #20
0d5ac     0C 00 00 FF 
0d5b0     D8 E4 05 F1 | 	add	objptr, ##6360
0d5b4     97 2C 48 FB | 	callpa	#(@LR__1129-@LR__1128)>>2,fcache_load_ptr_
0d5b8                 | LR__1128
0d5b8     20 4E 05 F1 | 	add	fp, #32
0d5bc     A7 22 02 FB | 	rdlong	local03, fp
0d5c0     09 22 66 F0 | 	shl	local03, #9
0d5c4     F2 22 02 F1 | 	add	local03, objptr
0d5c8     0C 4E 85 F1 | 	sub	fp, #12
0d5cc     A7 20 02 FB | 	rdlong	local02, fp
0d5d0     10 1F 02 F6 | 	mov	local01, local02
0d5d4     01 1E 66 F0 | 	shl	local01, #1
0d5d8     11 1F 02 F1 | 	add	local01, local03
0d5dc     10 4E 05 F1 | 	add	fp, #16
0d5e0     A7 12 02 FB | 	rdlong	arg01, fp
0d5e4     01 20 66 F0 | 	shl	local02, #1
0d5e8     10 13 02 F1 | 	add	arg01, local02
0d5ec     09 FB E1 FA | 	rdword	result1, arg01
0d5f0     0F FB 51 FC | 	wrword	result1, local01
0d5f4     10 4E 85 F1 | 	sub	fp, #16
0d5f8     A7 22 02 FB | 	rdlong	local03, fp
0d5fc     01 22 06 F1 | 	add	local03, #1
0d600     A7 22 62 FC | 	wrlong	local03, fp
0d604     14 4E 85 F1 | 	sub	fp, #20
0d608     00 23 56 F2 | 	cmps	local03, #256 wc
0d60c     A8 FF 9F CD |  if_b	jmp	#LR__1128
0d610                 | LR__1129
0d610     0C 00 00 FF 
0d614     D8 E4 85 F1 | 	sub	objptr, ##6360
0d618     78 00 90 FD | 	jmp	#LR__1132
0d61c                 | LR__1130
0d61c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d61c     14 4E 05 F1 | 	add	fp, #20
0d620     A7 00 68 FC | 	wrlong	#0, fp
0d624     14 4E 85 F1 | 	sub	fp, #20
0d628                 | LR__1131
0d628     20 4E 05 F1 | 	add	fp, #32
0d62c     A7 22 02 FB | 	rdlong	local03, fp
0d630     09 22 66 F0 | 	shl	local03, #9
0d634     0C 00 00 FF 
0d638     D8 E4 05 F1 | 	add	objptr, ##6360
0d63c     F2 22 02 F1 | 	add	local03, objptr
0d640     0C 4E 85 F1 | 	sub	fp, #12
0d644     A7 20 02 FB | 	rdlong	local02, fp
0d648     10 1F 02 F6 | 	mov	local01, local02
0d64c     01 1E 66 F0 | 	shl	local01, #1
0d650     11 1F 02 F1 | 	add	local01, local03
0d654     10 4E 05 F1 | 	add	fp, #16
0d658     A7 12 02 FB | 	rdlong	arg01, fp
0d65c     24 4E 85 F1 | 	sub	fp, #36
0d660     01 20 66 F0 | 	shl	local02, #1
0d664     10 13 02 F1 | 	add	arg01, local02
0d668     0C 00 00 FF 
0d66c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d670     7C 01 B1 FD | 	call	#_psdpeek
0d674     0F FB 51 FC | 	wrword	result1, local01
0d678     14 4E 05 F1 | 	add	fp, #20
0d67c     A7 22 02 FB | 	rdlong	local03, fp
0d680     01 22 06 F1 | 	add	local03, #1
0d684     A7 22 62 FC | 	wrlong	local03, fp
0d688     14 4E 85 F1 | 	sub	fp, #20
0d68c     00 23 56 F2 | 	cmps	local03, #256 wc
0d690     94 FF 9F CD |  if_b	jmp	#LR__1131
0d694                 | LR__1132
0d694     20 4E 05 F1 | 	add	fp, #32
0d698     A7 22 02 FB | 	rdlong	local03, fp
0d69c     20 4E 85 F1 | 	sub	fp, #32
0d6a0     09 22 66 F0 | 	shl	local03, #9
0d6a4     0C 00 00 FF 
0d6a8     D8 E4 05 F1 | 	add	objptr, ##6360
0d6ac     F2 22 02 F1 | 	add	local03, objptr
0d6b0     FE 23 06 F1 | 	add	local03, #510
0d6b4     11 01 58 FC | 	wrword	#0, local03
0d6b8                 | '     envbuf(channel,255)=0
0d6b8                 | '     return   
0d6b8     0C 00 00 FF 
0d6bc     D8 E4 85 F1 | 	sub	objptr, ##6360
0d6c0     D8 07 90 FD | 	jmp	#LR__1141
0d6c4                 | LR__1133
0d6c4                 | ' 
0d6c4                 | ' if numpar=5 then    'simple adsr
0d6c4     10 4E 05 F1 | 	add	fp, #16
0d6c8     A7 22 02 FB | 	rdlong	local03, fp
0d6cc     10 4E 85 F1 | 	sub	fp, #16
0d6d0     05 22 0E F2 | 	cmp	local03, #5 wz
0d6d4     98 07 90 5D |  if_ne	jmp	#LR__1140
0d6d8     08 E4 BF FD | 	call	#_pop
0d6dc     FF 1E 02 F6 | 	mov	local01, result3
0d6e0     5C 4E 05 F1 | 	add	fp, #92
0d6e4     A7 FA 61 FC | 	wrlong	result1, fp
0d6e8     04 4E 05 F1 | 	add	fp, #4
0d6ec     A7 FC 61 FC | 	wrlong	result2, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 1E 62 FC | 	wrlong	local01, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 12 02 F6 | 	mov	arg01, fp
0d700     5C 4E 85 F1 | 	sub	fp, #92
0d704     5C 85 B0 FD | 	call	#_converttofloat
0d708     FD 22 02 F6 | 	mov	local03, result1
0d70c     34 4E 05 F1 | 	add	fp, #52
0d710     A7 22 62 FC | 	wrlong	local03, fp
0d714     34 4E 85 F1 | 	sub	fp, #52
0d718     C8 E3 BF FD | 	call	#_pop
0d71c     FF 1E 02 F6 | 	mov	local01, result3
0d720     5C 4E 05 F1 | 	add	fp, #92
0d724     A7 FA 61 FC | 	wrlong	result1, fp
0d728     04 4E 05 F1 | 	add	fp, #4
0d72c     A7 FC 61 FC | 	wrlong	result2, fp
0d730     04 4E 05 F1 | 	add	fp, #4
0d734     A7 1E 62 FC | 	wrlong	local01, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     A7 12 02 F6 | 	mov	arg01, fp
0d740     5C 4E 85 F1 | 	sub	fp, #92
0d744     1C 85 B0 FD | 	call	#_converttofloat
0d748     FD 22 02 F6 | 	mov	local03, result1
0d74c     30 4E 05 F1 | 	add	fp, #48
0d750     A7 22 62 FC | 	wrlong	local03, fp
0d754     30 4E 85 F1 | 	sub	fp, #48
0d758     88 E3 BF FD | 	call	#_pop
0d75c     FF 1E 02 F6 | 	mov	local01, result3
0d760     5C 4E 05 F1 | 	add	fp, #92
0d764     A7 FA 61 FC | 	wrlong	result1, fp
0d768     04 4E 05 F1 | 	add	fp, #4
0d76c     A7 FC 61 FC | 	wrlong	result2, fp
0d770     04 4E 05 F1 | 	add	fp, #4
0d774     A7 1E 62 FC | 	wrlong	local01, fp
0d778     08 4E 85 F1 | 	sub	fp, #8
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     5C 4E 85 F1 | 	sub	fp, #92
0d784     DC 84 B0 FD | 	call	#_converttofloat
0d788     FD 22 02 F6 | 	mov	local03, result1
0d78c     2C 4E 05 F1 | 	add	fp, #44
0d790     A7 22 62 FC | 	wrlong	local03, fp
0d794     2C 4E 85 F1 | 	sub	fp, #44
0d798     48 E3 BF FD | 	call	#_pop
0d79c     FF 1E 02 F6 | 	mov	local01, result3
0d7a0     5C 4E 05 F1 | 	add	fp, #92
0d7a4     A7 FA 61 FC | 	wrlong	result1, fp
0d7a8     04 4E 05 F1 | 	add	fp, #4
0d7ac     A7 FC 61 FC | 	wrlong	result2, fp
0d7b0     04 4E 05 F1 | 	add	fp, #4
0d7b4     A7 1E 62 FC | 	wrlong	local01, fp
0d7b8     08 4E 85 F1 | 	sub	fp, #8
0d7bc     A7 12 02 F6 | 	mov	arg01, fp
0d7c0     5C 4E 85 F1 | 	sub	fp, #92
0d7c4     9C 84 B0 FD | 	call	#_converttofloat
0d7c8     FD 22 02 F6 | 	mov	local03, result1
0d7cc     28 4E 05 F1 | 	add	fp, #40
0d7d0     A7 22 62 FC | 	wrlong	local03, fp
0d7d4     28 4E 85 F1 | 	sub	fp, #40
0d7d8     08 E3 BF FD | 	call	#_pop
0d7dc     FF 1E 02 F6 | 	mov	local01, result3
0d7e0     5C 4E 05 F1 | 	add	fp, #92
0d7e4     A7 FA 61 FC | 	wrlong	result1, fp
0d7e8     04 4E 05 F1 | 	add	fp, #4
0d7ec     A7 FC 61 FC | 	wrlong	result2, fp
0d7f0     04 4E 05 F1 | 	add	fp, #4
0d7f4     A7 1E 62 FC | 	wrlong	local01, fp
0d7f8     08 4E 85 F1 | 	sub	fp, #8
0d7fc     A7 12 02 F6 | 	mov	arg01, fp
0d800     5C 4E 85 F1 | 	sub	fp, #92
0d804     A0 83 B0 FD | 	call	#_converttoint
0d808     20 4E 05 F1 | 	add	fp, #32
0d80c     A7 FA 61 FC | 	wrlong	result1, fp
0d810                 | ' 
0d810                 | '   t1=pop() : rr=converttofloat(t1)
0d810                 | '   t1=pop() : ss=converttofloat(t1) 
0d810                 | '   t1=pop() : dd=converttofloat(t1)
0d810                 | '   t1=pop() : aa=converttofloat(t1)
0d810                 | '   t1=pop() : channel=converttoint(t1)
0d810                 | '   if ss<0.0 then ss=0.0 
0d810     10 4E 05 F1 | 	add	fp, #16
0d814     A7 12 02 FB | 	rdlong	arg01, fp
0d818     30 4E 85 F1 | 	sub	fp, #48
0d81c     00 14 06 F6 | 	mov	arg02, #0
0d820     01 16 06 F6 | 	mov	arg03, #1
0d824     5C 62 B1 FD | 	call	#__system___float_cmp
0d828     00 FA 55 F2 | 	cmps	result1, #0 wc
0d82c     30 4E 05 C1 |  if_b	add	fp, #48
0d830     A7 00 68 CC |  if_b	wrlong	#0, fp
0d834     30 4E 85 C1 |  if_b	sub	fp, #48
0d838                 | '   if ss>1.0 then ss=1.0
0d838     30 4E 05 F1 | 	add	fp, #48
0d83c     A7 12 02 FB | 	rdlong	arg01, fp
0d840     30 4E 85 F1 | 	sub	fp, #48
0d844     00 C0 1F FF 
0d848     00 14 06 F6 | 	mov	arg02, ##1065353216
0d84c     01 16 66 F6 | 	neg	arg03, #1
0d850     30 62 B1 FD | 	call	#__system___float_cmp
0d854     01 FA 55 F2 | 	cmps	result1, #1 wc
0d858     30 4E 05 31 |  if_ae	add	fp, #48
0d85c     00 C0 9F 3F 
0d860     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d864     30 4E 85 31 |  if_ae	sub	fp, #48
0d868     28 4E 05 F1 | 	add	fp, #40
0d86c     A7 12 02 FB | 	rdlong	arg01, fp
0d870     04 4E 05 F1 | 	add	fp, #4
0d874     A7 14 02 FB | 	rdlong	arg02, fp
0d878     2C 4E 85 F1 | 	sub	fp, #44
0d87c     00 5A B1 FD | 	call	#__system___float_add
0d880     FD 12 02 F6 | 	mov	arg01, result1
0d884     34 4E 05 F1 | 	add	fp, #52
0d888     A7 14 02 FB | 	rdlong	arg02, fp
0d88c     34 4E 85 F1 | 	sub	fp, #52
0d890     EC 59 B1 FD | 	call	#__system___float_add
0d894     4C 4E 05 F1 | 	add	fp, #76
0d898     A7 FA 61 FC | 	wrlong	result1, fp
0d89c     FD 14 02 F6 | 	mov	arg02, result1
0d8a0     4C 4E 85 F1 | 	sub	fp, #76
0d8a4     00 C0 21 FF 
0d8a8     00 12 06 F6 | 	mov	arg01, ##1132462080
0d8ac     A4 5F B1 FD | 	call	#__system___float_div
0d8b0     50 4E 05 F1 | 	add	fp, #80
0d8b4     A7 FA 61 FC | 	wrlong	result1, fp
0d8b8     28 4E 85 F1 | 	sub	fp, #40
0d8bc     A7 12 02 FB | 	rdlong	arg01, fp
0d8c0     FD 14 02 F6 | 	mov	arg02, result1
0d8c4     28 4E 85 F1 | 	sub	fp, #40
0d8c8     84 5D B1 FD | 	call	#__system___float_mul
0d8cc     FD 12 02 F6 | 	mov	arg01, result1
0d8d0     01 14 06 F6 | 	mov	arg02, #1
0d8d4     40 62 B1 FD | 	call	#__system___float_tointeger
0d8d8     A7 FA 61 FC | 	wrlong	result1, fp
0d8dc     2C 4E 05 F1 | 	add	fp, #44
0d8e0     A7 12 02 FB | 	rdlong	arg01, fp
0d8e4     24 4E 05 F1 | 	add	fp, #36
0d8e8     A7 14 02 FB | 	rdlong	arg02, fp
0d8ec     50 4E 85 F1 | 	sub	fp, #80
0d8f0     5C 5D B1 FD | 	call	#__system___float_mul
0d8f4     FD 12 02 F6 | 	mov	arg01, result1
0d8f8     01 14 06 F6 | 	mov	arg02, #1
0d8fc     18 62 B1 FD | 	call	#__system___float_tointeger
0d900     04 4E 05 F1 | 	add	fp, #4
0d904     A7 FA 61 FC | 	wrlong	result1, fp
0d908     30 4E 05 F1 | 	add	fp, #48
0d90c     A7 12 02 FB | 	rdlong	arg01, fp
0d910     1C 4E 05 F1 | 	add	fp, #28
0d914     A7 14 02 FB | 	rdlong	arg02, fp
0d918     50 4E 85 F1 | 	sub	fp, #80
0d91c     30 5D B1 FD | 	call	#__system___float_mul
0d920     FD 12 02 F6 | 	mov	arg01, result1
0d924     01 14 06 F6 | 	mov	arg02, #1
0d928     EC 61 B1 FD | 	call	#__system___float_tointeger
0d92c     FD 22 02 F6 | 	mov	local03, result1
0d930     0C 4E 05 F1 | 	add	fp, #12
0d934     A7 22 62 FC | 	wrlong	local03, fp
0d938     0C 4E 85 F1 | 	sub	fp, #12
0d93c                 | '   fulltime=aa+dd+rr
0d93c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d93c     00 12 06 F6 | 	mov	arg01, #0
0d940     98 8B B1 FD | 	call	#__system___getiolock_0540
0d944     FD 12 02 F6 | 	mov	arg01, result1
0d948     50 31 B1 FD | 	call	#__system___lockmem
0d94c     A7 14 02 FB | 	rdlong	arg02, fp
0d950     00 12 06 F6 | 	mov	arg01, #0
0d954     00 16 06 F6 | 	mov	arg03, #0
0d958     0A 18 06 F6 | 	mov	arg04, #10
0d95c     74 3E B1 FD | 	call	#__system___basic_print_integer
0d960     00 12 06 F6 | 	mov	arg01, #0
0d964     09 14 06 F6 | 	mov	arg02, #9
0d968     00 16 06 F6 | 	mov	arg03, #0
0d96c     C8 3D B1 FD | 	call	#__system___basic_print_char
0d970     04 4E 05 F1 | 	add	fp, #4
0d974     A7 14 02 FB | 	rdlong	arg02, fp
0d978     04 4E 85 F1 | 	sub	fp, #4
0d97c     00 12 06 F6 | 	mov	arg01, #0
0d980     00 16 06 F6 | 	mov	arg03, #0
0d984     0A 18 06 F6 | 	mov	arg04, #10
0d988     48 3E B1 FD | 	call	#__system___basic_print_integer
0d98c     00 12 06 F6 | 	mov	arg01, #0
0d990     09 14 06 F6 | 	mov	arg02, #9
0d994     00 16 06 F6 | 	mov	arg03, #0
0d998     9C 3D B1 FD | 	call	#__system___basic_print_char
0d99c     0C 4E 05 F1 | 	add	fp, #12
0d9a0     A7 14 02 FB | 	rdlong	arg02, fp
0d9a4     0C 4E 85 F1 | 	sub	fp, #12
0d9a8     00 12 06 F6 | 	mov	arg01, #0
0d9ac     00 16 06 F6 | 	mov	arg03, #0
0d9b0     0A 18 06 F6 | 	mov	arg04, #10
0d9b4     1C 3E B1 FD | 	call	#__system___basic_print_integer
0d9b8     00 12 06 F6 | 	mov	arg01, #0
0d9bc     09 14 06 F6 | 	mov	arg02, #9
0d9c0     00 16 06 F6 | 	mov	arg03, #0
0d9c4     70 3D B1 FD | 	call	#__system___basic_print_char
0d9c8     A7 14 02 FB | 	rdlong	arg02, fp
0d9cc     04 4E 05 F1 | 	add	fp, #4
0d9d0     A7 22 02 FB | 	rdlong	local03, fp
0d9d4     11 15 02 F1 | 	add	arg02, local03
0d9d8     08 4E 05 F1 | 	add	fp, #8
0d9dc     A7 22 02 FB | 	rdlong	local03, fp
0d9e0     0C 4E 85 F1 | 	sub	fp, #12
0d9e4     11 15 02 F1 | 	add	arg02, local03
0d9e8     00 12 06 F6 | 	mov	arg01, #0
0d9ec     00 16 06 F6 | 	mov	arg03, #0
0d9f0     0A 18 06 F6 | 	mov	arg04, #10
0d9f4     DC 3D B1 FD | 	call	#__system___basic_print_integer
0d9f8     00 12 06 F6 | 	mov	arg01, #0
0d9fc     0A 14 06 F6 | 	mov	arg02, #10
0da00     00 16 06 F6 | 	mov	arg03, #0
0da04     30 3D B1 FD | 	call	#__system___basic_print_char
0da08     00 12 06 F6 | 	mov	arg01, #0
0da0c     CC 8A B1 FD | 	call	#__system___getiolock_0540
0da10     FD 00 68 FC | 	wrlong	#0, result1
0da14     F8 BF 23 FF 
0da18     00 22 06 F6 | 	mov	local03, ##1199566848
0da1c     A7 12 02 FB | 	rdlong	arg01, fp
0da20     09 13 52 F6 | 	abs	arg01, arg01 wc
0da24     1F 24 C6 C9 |  if_b	decod	local04, #31
0da28     00 24 06 36 |  if_ae	mov	local04, #0
0da2c     1C 58 B1 FD | 	call	#__system___float_fromuns
0da30     12 FB 61 F5 | 	xor	result1, local04
0da34     FD 14 02 F6 | 	mov	arg02, result1
0da38     11 13 02 F6 | 	mov	arg01, local03
0da3c     14 5E B1 FD | 	call	#__system___float_div
0da40     54 4E 05 F1 | 	add	fp, #84
0da44     A7 FA 61 FC | 	wrlong	result1, fp
0da48     F8 BF 23 FF 
0da4c     00 22 06 F6 | 	mov	local03, ##1199566848
0da50     24 4E 85 F1 | 	sub	fp, #36
0da54     A7 14 02 FB | 	rdlong	arg02, fp
0da58     30 4E 85 F1 | 	sub	fp, #48
0da5c     F8 BF 23 FF 
0da60     00 12 06 F6 | 	mov	arg01, ##1199566848
0da64     E8 5B B1 FD | 	call	#__system___float_mul
0da68     FD 14 02 F6 | 	mov	arg02, result1
0da6c     11 13 02 F6 | 	mov	arg01, local03
0da70     1F 14 E6 F4 | 	bitnot	arg02, #31
0da74     08 58 B1 FD | 	call	#__system___float_add
0da78     FD 22 02 F6 | 	mov	local03, result1
0da7c     04 4E 05 F1 | 	add	fp, #4
0da80     A7 12 02 FB | 	rdlong	arg01, fp
0da84     04 4E 85 F1 | 	sub	fp, #4
0da88     09 13 52 F6 | 	abs	arg01, arg01 wc
0da8c     1F 24 C6 C9 |  if_b	decod	local04, #31
0da90     00 24 06 36 |  if_ae	mov	local04, #0
0da94     B4 57 B1 FD | 	call	#__system___float_fromuns
0da98     12 FB 61 F5 | 	xor	result1, local04
0da9c     FD 14 02 F6 | 	mov	arg02, result1
0daa0     11 13 02 F6 | 	mov	arg01, local03
0daa4     AC 5D B1 FD | 	call	#__system___float_div
0daa8     2C 4E 05 F1 | 	add	fp, #44
0daac     A7 FA 61 FC | 	wrlong	result1, fp
0dab0     04 4E 05 F1 | 	add	fp, #4
0dab4     A7 14 02 FB | 	rdlong	arg02, fp
0dab8     30 4E 85 F1 | 	sub	fp, #48
0dabc     F8 BF 23 FF 
0dac0     00 12 06 F6 | 	mov	arg01, ##1199566848
0dac4     88 5B B1 FD | 	call	#__system___float_mul
0dac8     FD 22 02 F6 | 	mov	local03, result1
0dacc     0C 4E 05 F1 | 	add	fp, #12
0dad0     A7 12 02 FB | 	rdlong	arg01, fp
0dad4     0C 4E 85 F1 | 	sub	fp, #12
0dad8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dadc     1F 24 C6 C9 |  if_b	decod	local04, #31
0dae0     00 24 06 36 |  if_ae	mov	local04, #0
0dae4     64 57 B1 FD | 	call	#__system___float_fromuns
0dae8     12 FB 61 F5 | 	xor	result1, local04
0daec     FD 14 02 F6 | 	mov	arg02, result1
0daf0     11 13 02 F6 | 	mov	arg01, local03
0daf4     5C 5D B1 FD | 	call	#__system___float_div
0daf8     FD 22 02 F6 | 	mov	local03, result1
0dafc     58 4E 05 F1 | 	add	fp, #88
0db00     A7 22 62 FC | 	wrlong	local03, fp
0db04     58 4E 85 F1 | 	sub	fp, #88
0db08                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0db08     00 12 06 F6 | 	mov	arg01, #0
0db0c     CC 89 B1 FD | 	call	#__system___getiolock_0540
0db10     FD 12 02 F6 | 	mov	arg01, result1
0db14     84 2F B1 FD | 	call	#__system___lockmem
0db18     54 4E 05 F1 | 	add	fp, #84
0db1c     A7 14 02 FB | 	rdlong	arg02, fp
0db20     54 4E 85 F1 | 	sub	fp, #84
0db24     00 12 06 F6 | 	mov	arg01, #0
0db28     00 16 06 F6 | 	mov	arg03, #0
0db2c     23 18 06 F6 | 	mov	arg04, #35
0db30     34 61 B1 FD | 	call	#__system___basic_print_float
0db34     00 12 06 F6 | 	mov	arg01, #0
0db38     09 14 06 F6 | 	mov	arg02, #9
0db3c     00 16 06 F6 | 	mov	arg03, #0
0db40     F4 3B B1 FD | 	call	#__system___basic_print_char
0db44     2C 4E 05 F1 | 	add	fp, #44
0db48     A7 14 02 FB | 	rdlong	arg02, fp
0db4c     2C 4E 85 F1 | 	sub	fp, #44
0db50     00 12 06 F6 | 	mov	arg01, #0
0db54     00 16 06 F6 | 	mov	arg03, #0
0db58     23 18 06 F6 | 	mov	arg04, #35
0db5c     08 61 B1 FD | 	call	#__system___basic_print_float
0db60     00 12 06 F6 | 	mov	arg01, #0
0db64     09 14 06 F6 | 	mov	arg02, #9
0db68     00 16 06 F6 | 	mov	arg03, #0
0db6c     C8 3B B1 FD | 	call	#__system___basic_print_char
0db70     58 4E 05 F1 | 	add	fp, #88
0db74     A7 14 02 FB | 	rdlong	arg02, fp
0db78     58 4E 85 F1 | 	sub	fp, #88
0db7c     00 12 06 F6 | 	mov	arg01, #0
0db80     00 16 06 F6 | 	mov	arg03, #0
0db84     23 18 06 F6 | 	mov	arg04, #35
0db88     DC 60 B1 FD | 	call	#__system___basic_print_float
0db8c     00 12 06 F6 | 	mov	arg01, #0
0db90     0A 14 06 F6 | 	mov	arg02, #10
0db94     00 16 06 F6 | 	mov	arg03, #0
0db98     9C 3B B1 FD | 	call	#__system___basic_print_char
0db9c     00 12 06 F6 | 	mov	arg01, #0
0dba0     38 89 B1 FD | 	call	#__system___getiolock_0540
0dba4     FD 00 68 FC | 	wrlong	#0, result1
0dba8     20 4E 05 F1 | 	add	fp, #32
0dbac     A7 26 02 FB | 	rdlong	local05, fp
0dbb0     20 4E 85 F1 | 	sub	fp, #32
0dbb4     01 26 66 F0 | 	shl	local05, #1
0dbb8     51 00 00 FF 
0dbbc     C4 E5 05 F1 | 	add	objptr, ##41924
0dbc0     F2 26 02 F1 | 	add	local05, objptr
0dbc4     A7 28 02 FB | 	rdlong	local06, fp
0dbc8     04 4E 05 F1 | 	add	fp, #4
0dbcc     A7 22 02 FB | 	rdlong	local03, fp
0dbd0     11 29 02 F1 | 	add	local06, local03
0dbd4     13 29 52 FC | 	wrword	local06, local05
0dbd8     24 4E 05 F1 | 	add	fp, #36
0dbdc     A7 00 68 FC | 	wrlong	#0, fp
0dbe0                 | '   suspoints(channel)=a+d
0dbe0                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0dbe0     14 4E 85 F1 | 	sub	fp, #20
0dbe4     A7 00 68 FC | 	wrlong	#0, fp
0dbe8     14 4E 85 F1 | 	sub	fp, #20
0dbec     A7 2A 02 FB | 	rdlong	local07, fp
0dbf0     51 00 00 FF 
0dbf4     C4 E5 85 F1 | 	sub	objptr, ##41924
0dbf8                 | LR__1134
0dbf8     14 4E 05 F1 | 	add	fp, #20
0dbfc     A7 22 02 FB | 	rdlong	local03, fp
0dc00     14 4E 85 F1 | 	sub	fp, #20
0dc04     15 23 52 F2 | 	cmps	local03, local07 wc
0dc08     80 00 90 3D |  if_ae	jmp	#LR__1135
0dc0c     20 4E 05 F1 | 	add	fp, #32
0dc10     A7 28 02 FB | 	rdlong	local06, fp
0dc14     09 28 66 F0 | 	shl	local06, #9
0dc18     0C 00 00 FF 
0dc1c     D8 E4 05 F1 | 	add	objptr, ##6360
0dc20     F2 28 02 F1 | 	add	local06, objptr
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     A7 26 02 FB | 	rdlong	local05, fp
0dc2c     01 26 66 F0 | 	shl	local05, #1
0dc30     14 27 02 F1 | 	add	local05, local06
0dc34     14 4E 05 F1 | 	add	fp, #20
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     28 4E 85 F1 | 	sub	fp, #40
0dc40     0C 00 00 FF 
0dc44     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc48     01 14 06 F6 | 	mov	arg02, #1
0dc4c     C8 5E B1 FD | 	call	#__system___float_tointeger
0dc50     13 FB 51 FC | 	wrword	result1, local05
0dc54     28 4E 05 F1 | 	add	fp, #40
0dc58     A7 12 02 FB | 	rdlong	arg01, fp
0dc5c     2C 4E 05 F1 | 	add	fp, #44
0dc60     A7 14 02 FB | 	rdlong	arg02, fp
0dc64     54 4E 85 F1 | 	sub	fp, #84
0dc68     14 56 B1 FD | 	call	#__system___float_add
0dc6c     28 4E 05 F1 | 	add	fp, #40
0dc70     A7 FA 61 FC | 	wrlong	result1, fp
0dc74     14 4E 85 F1 | 	sub	fp, #20
0dc78     A7 20 02 FB | 	rdlong	local02, fp
0dc7c     01 20 06 F1 | 	add	local02, #1
0dc80     A7 20 62 FC | 	wrlong	local02, fp
0dc84     14 4E 85 F1 | 	sub	fp, #20
0dc88     6C FF 9F FD | 	jmp	#LR__1134
0dc8c                 | LR__1135
0dc8c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0dc8c     A7 22 02 FB | 	rdlong	local03, fp
0dc90     14 4E 05 F1 | 	add	fp, #20
0dc94     A7 22 62 FC | 	wrlong	local03, fp
0dc98     14 4E 85 F1 | 	sub	fp, #20
0dc9c     A7 2C 02 FB | 	rdlong	local08, fp
0dca0     04 4E 05 F1 | 	add	fp, #4
0dca4     A7 22 02 FB | 	rdlong	local03, fp
0dca8     04 4E 85 F1 | 	sub	fp, #4
0dcac     11 2D 02 F1 | 	add	local08, local03
0dcb0                 | LR__1136
0dcb0     14 4E 05 F1 | 	add	fp, #20
0dcb4     A7 22 02 FB | 	rdlong	local03, fp
0dcb8     14 4E 85 F1 | 	sub	fp, #20
0dcbc     16 23 52 F2 | 	cmps	local03, local08 wc
0dcc0     A8 00 90 3D |  if_ae	jmp	#LR__1137
0dcc4     20 4E 05 F1 | 	add	fp, #32
0dcc8     A7 2A 02 FB | 	rdlong	local07, fp
0dccc     09 2A 66 F0 | 	shl	local07, #9
0dcd0     0C 00 00 FF 
0dcd4     D8 E4 05 F1 | 	add	objptr, ##6360
0dcd8     F2 2A 02 F1 | 	add	local07, objptr
0dcdc     0C 4E 85 F1 | 	sub	fp, #12
0dce0     A7 28 02 FB | 	rdlong	local06, fp
0dce4     01 28 66 F0 | 	shl	local06, #1
0dce8     15 29 02 F1 | 	add	local06, local07
0dcec     14 4E 05 F1 | 	add	fp, #20
0dcf0     A7 12 02 FB | 	rdlong	arg01, fp
0dcf4     28 4E 85 F1 | 	sub	fp, #40
0dcf8     0C 00 00 FF 
0dcfc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd00     01 14 06 F6 | 	mov	arg02, #1
0dd04     10 5E B1 FD | 	call	#__system___float_tointeger
0dd08     14 FB 51 FC | 	wrword	result1, local06
0dd0c     28 4E 05 F1 | 	add	fp, #40
0dd10     A7 12 02 FB | 	rdlong	arg01, fp
0dd14     04 4E 05 F1 | 	add	fp, #4
0dd18     A7 14 02 FB | 	rdlong	arg02, fp
0dd1c     2C 4E 85 F1 | 	sub	fp, #44
0dd20     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd24     58 55 B1 FD | 	call	#__system___float_add
0dd28     28 4E 05 F1 | 	add	fp, #40
0dd2c     A7 FA 61 FC | 	wrlong	result1, fp
0dd30     28 4E 85 F1 | 	sub	fp, #40
0dd34     FD 12 02 F6 | 	mov	arg01, result1
0dd38     00 14 06 F6 | 	mov	arg02, #0
0dd3c     01 16 06 F6 | 	mov	arg03, #1
0dd40     40 5D B1 FD | 	call	#__system___float_cmp
0dd44     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd48     28 4E 05 C1 |  if_b	add	fp, #40
0dd4c     A7 00 68 CC |  if_b	wrlong	#0, fp
0dd50     28 4E 85 C1 |  if_b	sub	fp, #40
0dd54     14 4E 05 F1 | 	add	fp, #20
0dd58     A7 20 02 FB | 	rdlong	local02, fp
0dd5c     01 20 06 F1 | 	add	local02, #1
0dd60     A7 20 62 FC | 	wrlong	local02, fp
0dd64     14 4E 85 F1 | 	sub	fp, #20
0dd68     44 FF 9F FD | 	jmp	#LR__1136
0dd6c                 | LR__1137
0dd6c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dd6c     A7 22 02 FB | 	rdlong	local03, fp
0dd70     04 4E 05 F1 | 	add	fp, #4
0dd74     A7 2C 02 FB | 	rdlong	local08, fp
0dd78     16 23 02 F1 | 	add	local03, local08
0dd7c     10 4E 05 F1 | 	add	fp, #16
0dd80     A7 22 62 FC | 	wrlong	local03, fp
0dd84     14 4E 85 F1 | 	sub	fp, #20
0dd88                 | LR__1138
0dd88     14 4E 05 F1 | 	add	fp, #20
0dd8c     A7 26 02 FB | 	rdlong	local05, fp
0dd90     14 4E 85 F1 | 	sub	fp, #20
0dd94     00 27 56 F2 | 	cmps	local05, #256 wc
0dd98     A8 00 90 3D |  if_ae	jmp	#LR__1139
0dd9c     20 4E 05 F1 | 	add	fp, #32
0dda0     A7 2C 02 FB | 	rdlong	local08, fp
0dda4     09 2C 66 F0 | 	shl	local08, #9
0dda8     0C 00 00 FF 
0ddac     D8 E4 05 F1 | 	add	objptr, ##6360
0ddb0     F2 2C 02 F1 | 	add	local08, objptr
0ddb4     0C 4E 85 F1 | 	sub	fp, #12
0ddb8     A7 2A 02 FB | 	rdlong	local07, fp
0ddbc     01 2A 66 F0 | 	shl	local07, #1
0ddc0     16 2B 02 F1 | 	add	local07, local08
0ddc4     14 4E 05 F1 | 	add	fp, #20
0ddc8     A7 12 02 FB | 	rdlong	arg01, fp
0ddcc     28 4E 85 F1 | 	sub	fp, #40
0ddd0     0C 00 00 FF 
0ddd4     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddd8     01 14 06 F6 | 	mov	arg02, #1
0dddc     38 5D B1 FD | 	call	#__system___float_tointeger
0dde0     15 FB 51 FC | 	wrword	result1, local07
0dde4     28 4E 05 F1 | 	add	fp, #40
0dde8     A7 12 02 FB | 	rdlong	arg01, fp
0ddec     30 4E 05 F1 | 	add	fp, #48
0ddf0     A7 14 02 FB | 	rdlong	arg02, fp
0ddf4     58 4E 85 F1 | 	sub	fp, #88
0ddf8     1F 14 E6 F4 | 	bitnot	arg02, #31
0ddfc     80 54 B1 FD | 	call	#__system___float_add
0de00     28 4E 05 F1 | 	add	fp, #40
0de04     A7 FA 61 FC | 	wrlong	result1, fp
0de08     28 4E 85 F1 | 	sub	fp, #40
0de0c     FD 12 02 F6 | 	mov	arg01, result1
0de10     00 14 06 F6 | 	mov	arg02, #0
0de14     01 16 06 F6 | 	mov	arg03, #1
0de18     68 5C B1 FD | 	call	#__system___float_cmp
0de1c     00 FA 55 F2 | 	cmps	result1, #0 wc
0de20     28 4E 05 C1 |  if_b	add	fp, #40
0de24     A7 00 68 CC |  if_b	wrlong	#0, fp
0de28     28 4E 85 C1 |  if_b	sub	fp, #40
0de2c     14 4E 05 F1 | 	add	fp, #20
0de30     A7 2C 02 FB | 	rdlong	local08, fp
0de34     01 2C 06 F1 | 	add	local08, #1
0de38     A7 2C 62 FC | 	wrlong	local08, fp
0de3c     14 4E 85 F1 | 	sub	fp, #20
0de40     44 FF 9F FD | 	jmp	#LR__1138
0de44                 | LR__1139
0de44     20 4E 05 F1 | 	add	fp, #32
0de48     A7 26 02 FB | 	rdlong	local05, fp
0de4c     20 4E 85 F1 | 	sub	fp, #32
0de50     09 26 66 F0 | 	shl	local05, #9
0de54     0C 00 00 FF 
0de58     D8 E4 05 F1 | 	add	objptr, ##6360
0de5c     F2 26 02 F1 | 	add	local05, objptr
0de60     FE 27 06 F1 | 	add	local05, #510
0de64     13 01 58 FC | 	wrword	#0, local05
0de68     0C 00 00 FF 
0de6c     D8 E4 85 F1 | 	sub	objptr, ##6360
0de70                 | LR__1140
0de70     20 4E 05 F1 | 	add	fp, #32
0de74     A7 26 02 FB | 	rdlong	local05, fp
0de78     20 4E 85 F1 | 	sub	fp, #32
0de7c     09 26 66 F0 | 	shl	local05, #9
0de80     0C 00 00 FF 
0de84     D8 E4 05 F1 | 	add	objptr, ##6360
0de88     F2 26 02 F1 | 	add	local05, objptr
0de8c     FE 27 06 F1 | 	add	local05, #510
0de90     13 01 58 FC | 	wrword	#0, local05
0de94     0C 00 00 FF 
0de98     D8 E4 85 F1 | 	sub	objptr, ##6360
0de9c                 | LR__1141
0de9c     A7 F0 03 F6 | 	mov	ptra, fp
0dea0     B2 00 A0 FD | 	call	#popregs_
0dea4                 | _do_defenv_ret
0dea4     2D 00 64 FD | 	ret
0dea8                 | 
0dea8                 | ' 
0dea8                 | ' 
0dea8                 | ' sub do_play
0dea8                 | _do_play
0dea8     06 4A 05 F6 | 	mov	COUNT_, #6
0deac     A8 00 A0 FD | 	call	#pushregs_
0deb0     7C F0 07 F1 | 	add	ptra, #124
0deb4     68 4E 05 F1 | 	add	fp, #104
0deb8     AB CB A1 FF 
0debc     A7 D6 6B FC | 	wrlong	##1133991915, fp
0dec0                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0dec0                 | ' 
0dec0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0dec0     64 4E 85 F1 | 	sub	fp, #100
0dec4     A7 00 68 FC | 	wrlong	#0, fp
0dec8     97 18 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0decc                 | LR__1150
0decc     A7 16 02 FB | 	rdlong	arg03, fp
0ded0     02 16 66 F0 | 	shl	arg03, #2
0ded4     34 4E 05 F1 | 	add	fp, #52
0ded8     A7 16 02 F1 | 	add	arg03, fp
0dedc     00 00 E0 FF 
0dee0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0dee4     34 4E 85 F1 | 	sub	fp, #52
0dee8     A7 1E 02 FB | 	rdlong	local01, fp
0deec     01 1E 06 F1 | 	add	local01, #1
0def0     A7 1E 62 FC | 	wrlong	local01, fp
0def4     09 1E 56 F2 | 	cmps	local01, #9 wc
0def8     D0 FF 9F CD |  if_b	jmp	#LR__1150
0defc                 | LR__1151
0defc     04 4E 85 F1 | 	sub	fp, #4
0df00     4A 00 00 FF 
0df04     80 E4 05 F1 | 	add	objptr, ##38016
0df08     F2 20 02 FB | 	rdlong	local02, objptr
0df0c     10 23 02 F6 | 	mov	local03, local02
0df10     01 22 66 F0 | 	shl	local03, #1
0df14     10 23 02 F1 | 	add	local03, local02
0df18     02 22 66 F0 | 	shl	local03, #2
0df1c     03 00 00 FF 
0df20     04 E4 85 F1 | 	sub	objptr, ##1540
0df24     F2 22 02 F1 | 	add	local03, objptr
0df28     11 25 02 FB | 	rdlong	local04, local03
0df2c     A7 24 62 FC | 	wrlong	local04, fp
0df30                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0df30                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0df30                 | ' numpar=compiledline(lineptr_e).result.uresult
0df30                 | ' for i=numpar to 1 step -1 
0df30     04 4E 05 F1 | 	add	fp, #4
0df34     A7 24 62 FC | 	wrlong	local04, fp
0df38     04 4E 85 F1 | 	sub	fp, #4
0df3c     47 00 00 FF 
0df40     7C E4 85 F1 | 	sub	objptr, ##36476
0df44                 | LR__1152
0df44     9C DB BF FD | 	call	#_pop
0df48     5C 4E 05 F1 | 	add	fp, #92
0df4c     A7 FA 61 FC | 	wrlong	result1, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 FC 61 FC | 	wrlong	result2, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 FE 61 FC | 	wrlong	result3, fp
0df60     60 4E 85 F1 | 	sub	fp, #96
0df64     A7 22 02 FB | 	rdlong	local03, fp
0df68     01 22 86 F1 | 	sub	local03, #1
0df6c     02 22 66 F0 | 	shl	local03, #2
0df70     34 4E 05 F1 | 	add	fp, #52
0df74     A7 22 02 F1 | 	add	local03, fp
0df78     24 4E 05 F1 | 	add	fp, #36
0df7c     A7 26 02 F6 | 	mov	local05, fp
0df80     13 13 02 F6 | 	mov	arg01, local05
0df84     5C 4E 85 F1 | 	sub	fp, #92
0df88     D8 7C B0 FD | 	call	#_converttofloat
0df8c     11 FB 61 FC | 	wrlong	result1, local03
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 1E 02 FB | 	rdlong	local01, fp
0df98     01 1E 86 F1 | 	sub	local01, #1
0df9c     A7 1E 62 FC | 	wrlong	local01, fp
0dfa0     04 4E 85 F1 | 	sub	fp, #4
0dfa4     01 1E 56 F2 | 	cmps	local01, #1 wc
0dfa8     98 FF 9F 3D |  if_ae	jmp	#LR__1152
0dfac                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0dfac     38 4E 05 F1 | 	add	fp, #56
0dfb0     A7 12 02 FB | 	rdlong	arg01, fp
0dfb4     38 4E 85 F1 | 	sub	fp, #56
0dfb8     00 14 06 F6 | 	mov	arg02, #0
0dfbc     01 16 06 F6 | 	mov	arg03, #1
0dfc0     C0 5A B1 FD | 	call	#__system___float_cmp
0dfc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfc8     0C 4E 05 C1 |  if_b	add	fp, #12
0dfcc     A7 00 68 CC |  if_b	wrlong	#0, fp
0dfd0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfd4     2C 00 90 CD |  if_b	jmp	#LR__1153
0dfd8     38 4E 05 F1 | 	add	fp, #56
0dfdc     A7 12 02 FB | 	rdlong	arg01, fp
0dfe0     38 4E 85 F1 | 	sub	fp, #56
0dfe4     01 14 06 F6 | 	mov	arg02, #1
0dfe8     2C 5B B1 FD | 	call	#__system___float_tointeger
0dfec     FD 1E 52 F6 | 	abs	local01, result1 wc
0dff0     07 1E 06 F5 | 	and	local01, #7
0dff4     0F 1F 82 F6 | 	negc	local01, local01
0dff8     0C 4E 05 F1 | 	add	fp, #12
0dffc     A7 1E 62 FC | 	wrlong	local01, fp
0e000     0C 4E 85 F1 | 	sub	fp, #12
0e004                 | LR__1153
0e004                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0e004     3C 4E 05 F1 | 	add	fp, #60
0e008     A7 12 02 FB | 	rdlong	arg01, fp
0e00c     3C 4E 85 F1 | 	sub	fp, #60
0e010     00 14 06 F6 | 	mov	arg02, #0
0e014     01 16 06 F6 | 	mov	arg03, #1
0e018     68 5A B1 FD | 	call	#__system___float_cmp
0e01c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e020     40 00 90 3D |  if_ae	jmp	#LR__1154
0e024     0C 4E 05 F1 | 	add	fp, #12
0e028     A7 20 02 FB | 	rdlong	local02, fp
0e02c     10 23 02 F6 | 	mov	local03, local02
0e030     01 22 66 F0 | 	shl	local03, #1
0e034     10 23 02 F1 | 	add	local03, local02
0e038     03 22 66 F0 | 	shl	local03, #3
0e03c     14 00 00 FF 
0e040     38 E5 05 F1 | 	add	objptr, ##10552
0e044     F2 22 02 F1 | 	add	local03, objptr
0e048     11 23 02 FB | 	rdlong	local03, local03
0e04c     60 4E 05 F1 | 	add	fp, #96
0e050     A7 22 62 FC | 	wrlong	local03, fp
0e054     6C 4E 85 F1 | 	sub	fp, #108
0e058     14 00 00 FF 
0e05c     38 E5 85 F1 | 	sub	objptr, ##10552
0e060     44 00 90 FD | 	jmp	#LR__1155
0e064                 | LR__1154
0e064     3C 4E 05 F1 | 	add	fp, #60
0e068     A7 24 02 FB | 	rdlong	local04, fp
0e06c     30 4E 05 F1 | 	add	fp, #48
0e070     A7 24 62 FC | 	wrlong	local04, fp
0e074     60 4E 85 F1 | 	sub	fp, #96
0e078     A7 20 02 FB | 	rdlong	local02, fp
0e07c     10 23 02 F6 | 	mov	local03, local02
0e080     01 22 66 F0 | 	shl	local03, #1
0e084     10 23 02 F1 | 	add	local03, local02
0e088     03 22 66 F0 | 	shl	local03, #3
0e08c     14 00 00 FF 
0e090     38 E5 05 F1 | 	add	objptr, ##10552
0e094     F2 22 02 F1 | 	add	local03, objptr
0e098     0C 4E 85 F1 | 	sub	fp, #12
0e09c     11 25 62 FC | 	wrlong	local04, local03
0e0a0     14 00 00 FF 
0e0a4     38 E5 85 F1 | 	sub	objptr, ##10552
0e0a8                 | LR__1155
0e0a8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0e0a8     44 4E 05 F1 | 	add	fp, #68
0e0ac     A7 12 02 FB | 	rdlong	arg01, fp
0e0b0     44 4E 85 F1 | 	sub	fp, #68
0e0b4     00 14 06 F6 | 	mov	arg02, #0
0e0b8     01 16 06 F6 | 	mov	arg03, #1
0e0bc     C4 59 B1 FD | 	call	#__system___float_cmp
0e0c0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e0c4     24 00 90 CD |  if_b	jmp	#LR__1156
0e0c8     44 4E 05 F1 | 	add	fp, #68
0e0cc     A7 12 02 FB | 	rdlong	arg01, fp
0e0d0     44 4E 85 F1 | 	sub	fp, #68
0e0d4     89 C1 20 FF 
0e0d8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0e0dc     01 16 66 F6 | 	neg	arg03, #1
0e0e0     A0 59 B1 FD | 	call	#__system___float_cmp
0e0e4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e0e8     44 00 90 CD |  if_b	jmp	#LR__1157
0e0ec                 | LR__1156
0e0ec     0C 4E 05 F1 | 	add	fp, #12
0e0f0     A7 20 02 FB | 	rdlong	local02, fp
0e0f4     10 23 02 F6 | 	mov	local03, local02
0e0f8     01 22 66 F0 | 	shl	local03, #1
0e0fc     10 23 02 F1 | 	add	local03, local02
0e100     03 22 66 F0 | 	shl	local03, #3
0e104     14 00 00 FF 
0e108     38 E5 05 F1 | 	add	objptr, ##10552
0e10c     F2 22 02 F1 | 	add	local03, objptr
0e110     0C 22 06 F1 | 	add	local03, #12
0e114     11 23 02 FB | 	rdlong	local03, local03
0e118     68 4E 05 F1 | 	add	fp, #104
0e11c     A7 22 62 FC | 	wrlong	local03, fp
0e120     74 4E 85 F1 | 	sub	fp, #116
0e124     14 00 00 FF 
0e128     38 E5 85 F1 | 	sub	objptr, ##10552
0e12c     48 00 90 FD | 	jmp	#LR__1158
0e130                 | LR__1157
0e130     44 4E 05 F1 | 	add	fp, #68
0e134     A7 24 02 FB | 	rdlong	local04, fp
0e138     30 4E 05 F1 | 	add	fp, #48
0e13c     A7 24 62 FC | 	wrlong	local04, fp
0e140     68 4E 85 F1 | 	sub	fp, #104
0e144     A7 20 02 FB | 	rdlong	local02, fp
0e148     10 23 02 F6 | 	mov	local03, local02
0e14c     01 22 66 F0 | 	shl	local03, #1
0e150     10 23 02 F1 | 	add	local03, local02
0e154     03 22 66 F0 | 	shl	local03, #3
0e158     14 00 00 FF 
0e15c     38 E5 05 F1 | 	add	objptr, ##10552
0e160     F2 22 02 F1 | 	add	local03, objptr
0e164     0C 4E 85 F1 | 	sub	fp, #12
0e168     0C 22 06 F1 | 	add	local03, #12
0e16c     11 25 62 FC | 	wrlong	local04, local03
0e170     14 00 00 FF 
0e174     38 E5 85 F1 | 	sub	objptr, ##10552
0e178                 | LR__1158
0e178                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e178     48 4E 05 F1 | 	add	fp, #72
0e17c     A7 12 02 FB | 	rdlong	arg01, fp
0e180     48 4E 85 F1 | 	sub	fp, #72
0e184     00 14 06 F6 | 	mov	arg02, #0
0e188     01 16 06 F6 | 	mov	arg03, #1
0e18c     F4 58 B1 FD | 	call	#__system___float_cmp
0e190     00 FA 55 F2 | 	cmps	result1, #0 wc
0e194     24 00 90 CD |  if_b	jmp	#LR__1159
0e198     48 4E 05 F1 | 	add	fp, #72
0e19c     A7 12 02 FB | 	rdlong	arg01, fp
0e1a0     48 4E 85 F1 | 	sub	fp, #72
0e1a4     00 80 20 FF 
0e1a8     00 14 06 F6 | 	mov	arg02, ##1090519040
0e1ac     01 16 66 F6 | 	neg	arg03, #1
0e1b0     D0 58 B1 FD | 	call	#__system___float_cmp
0e1b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e1b8     48 00 90 CD |  if_b	jmp	#LR__1160
0e1bc                 | LR__1159
0e1bc     0C 4E 05 F1 | 	add	fp, #12
0e1c0     A7 22 02 FB | 	rdlong	local03, fp
0e1c4     11 27 02 F6 | 	mov	local05, local03
0e1c8     01 26 66 F0 | 	shl	local05, #1
0e1cc     11 27 02 F1 | 	add	local05, local03
0e1d0     03 26 66 F0 | 	shl	local05, #3
0e1d4     14 00 00 FF 
0e1d8     38 E5 05 F1 | 	add	objptr, ##10552
0e1dc     F2 26 02 F1 | 	add	local05, objptr
0e1e0     04 26 06 F1 | 	add	local05, #4
0e1e4     13 27 C2 FA | 	rdbyte	local05, local05
0e1e8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e1ec     14 4E 05 F1 | 	add	fp, #20
0e1f0     A7 24 62 FC | 	wrlong	local04, fp
0e1f4     20 4E 85 F1 | 	sub	fp, #32
0e1f8     14 00 00 FF 
0e1fc     38 E5 85 F1 | 	sub	objptr, ##10552
0e200     54 00 90 FD | 	jmp	#LR__1161
0e204                 | LR__1160
0e204     48 4E 05 F1 | 	add	fp, #72
0e208     A7 12 02 FB | 	rdlong	arg01, fp
0e20c     48 4E 85 F1 | 	sub	fp, #72
0e210     01 14 06 F6 | 	mov	arg02, #1
0e214     00 59 B1 FD | 	call	#__system___float_tointeger
0e218     20 4E 05 F1 | 	add	fp, #32
0e21c     A7 FA 61 FC | 	wrlong	result1, fp
0e220     14 4E 85 F1 | 	sub	fp, #20
0e224     A7 20 02 FB | 	rdlong	local02, fp
0e228     10 23 02 F6 | 	mov	local03, local02
0e22c     01 22 66 F0 | 	shl	local03, #1
0e230     10 23 02 F1 | 	add	local03, local02
0e234     03 22 66 F0 | 	shl	local03, #3
0e238     14 00 00 FF 
0e23c     38 E5 05 F1 | 	add	objptr, ##10552
0e240     F2 22 02 F1 | 	add	local03, objptr
0e244     0C 4E 85 F1 | 	sub	fp, #12
0e248     04 22 06 F1 | 	add	local03, #4
0e24c     11 FB 41 FC | 	wrbyte	result1, local03
0e250     14 00 00 FF 
0e254     38 E5 85 F1 | 	sub	objptr, ##10552
0e258                 | LR__1161
0e258                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e258     4C 4E 05 F1 | 	add	fp, #76
0e25c     A7 12 02 FB | 	rdlong	arg01, fp
0e260     4C 4E 85 F1 | 	sub	fp, #76
0e264     00 14 06 F6 | 	mov	arg02, #0
0e268     01 16 06 F6 | 	mov	arg03, #1
0e26c     14 58 B1 FD | 	call	#__system___float_cmp
0e270     00 FA 55 F2 | 	cmps	result1, #0 wc
0e274     24 00 90 CD |  if_b	jmp	#LR__1162
0e278     4C 4E 05 F1 | 	add	fp, #76
0e27c     A7 12 02 FB | 	rdlong	arg01, fp
0e280     4C 4E 85 F1 | 	sub	fp, #76
0e284     00 80 20 FF 
0e288     00 14 06 F6 | 	mov	arg02, ##1090519040
0e28c     01 16 66 F6 | 	neg	arg03, #1
0e290     F0 57 B1 FD | 	call	#__system___float_cmp
0e294     01 FA 55 F2 | 	cmps	result1, #1 wc
0e298     48 00 90 CD |  if_b	jmp	#LR__1163
0e29c                 | LR__1162
0e29c     0C 4E 05 F1 | 	add	fp, #12
0e2a0     A7 22 02 FB | 	rdlong	local03, fp
0e2a4     11 27 02 F6 | 	mov	local05, local03
0e2a8     01 26 66 F0 | 	shl	local05, #1
0e2ac     11 27 02 F1 | 	add	local05, local03
0e2b0     03 26 66 F0 | 	shl	local05, #3
0e2b4     14 00 00 FF 
0e2b8     38 E5 05 F1 | 	add	objptr, ##10552
0e2bc     F2 26 02 F1 | 	add	local05, objptr
0e2c0     05 26 06 F1 | 	add	local05, #5
0e2c4     13 27 C2 FA | 	rdbyte	local05, local05
0e2c8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e2cc     18 4E 05 F1 | 	add	fp, #24
0e2d0     A7 24 62 FC | 	wrlong	local04, fp
0e2d4     24 4E 85 F1 | 	sub	fp, #36
0e2d8     14 00 00 FF 
0e2dc     38 E5 85 F1 | 	sub	objptr, ##10552
0e2e0     54 00 90 FD | 	jmp	#LR__1164
0e2e4                 | LR__1163
0e2e4     4C 4E 05 F1 | 	add	fp, #76
0e2e8     A7 12 02 FB | 	rdlong	arg01, fp
0e2ec     4C 4E 85 F1 | 	sub	fp, #76
0e2f0     01 14 06 F6 | 	mov	arg02, #1
0e2f4     20 58 B1 FD | 	call	#__system___float_tointeger
0e2f8     24 4E 05 F1 | 	add	fp, #36
0e2fc     A7 FA 61 FC | 	wrlong	result1, fp
0e300     18 4E 85 F1 | 	sub	fp, #24
0e304     A7 20 02 FB | 	rdlong	local02, fp
0e308     10 23 02 F6 | 	mov	local03, local02
0e30c     01 22 66 F0 | 	shl	local03, #1
0e310     10 23 02 F1 | 	add	local03, local02
0e314     03 22 66 F0 | 	shl	local03, #3
0e318     14 00 00 FF 
0e31c     38 E5 05 F1 | 	add	objptr, ##10552
0e320     F2 22 02 F1 | 	add	local03, objptr
0e324     0C 4E 85 F1 | 	sub	fp, #12
0e328     05 22 06 F1 | 	add	local03, #5
0e32c     11 FB 41 FC | 	wrbyte	result1, local03
0e330     14 00 00 FF 
0e334     38 E5 85 F1 | 	sub	objptr, ##10552
0e338                 | LR__1164
0e338                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e338     50 4E 05 F1 | 	add	fp, #80
0e33c     A7 12 02 FB | 	rdlong	arg01, fp
0e340     50 4E 85 F1 | 	sub	fp, #80
0e344     00 14 06 F6 | 	mov	arg02, #0
0e348     01 16 06 F6 | 	mov	arg03, #1
0e34c     34 57 B1 FD | 	call	#__system___float_cmp
0e350     00 FA 55 F2 | 	cmps	result1, #0 wc
0e354     24 00 90 CD |  if_b	jmp	#LR__1165
0e358     50 4E 05 F1 | 	add	fp, #80
0e35c     A7 12 02 FB | 	rdlong	arg01, fp
0e360     50 4E 85 F1 | 	sub	fp, #80
0e364     00 3D 22 FF 
0e368     00 14 06 F6 | 	mov	arg02, ##1148846080
0e36c     01 16 66 F6 | 	neg	arg03, #1
0e370     10 57 B1 FD | 	call	#__system___float_cmp
0e374     01 FA 55 F2 | 	cmps	result1, #1 wc
0e378     44 00 90 CD |  if_b	jmp	#LR__1166
0e37c                 | LR__1165
0e37c     0C 4E 05 F1 | 	add	fp, #12
0e380     A7 20 02 FB | 	rdlong	local02, fp
0e384     10 23 02 F6 | 	mov	local03, local02
0e388     01 22 66 F0 | 	shl	local03, #1
0e38c     10 23 02 F1 | 	add	local03, local02
0e390     03 22 66 F0 | 	shl	local03, #3
0e394     14 00 00 FF 
0e398     38 E5 05 F1 | 	add	objptr, ##10552
0e39c     F2 22 02 F1 | 	add	local03, objptr
0e3a0     08 22 06 F1 | 	add	local03, #8
0e3a4     11 25 02 FB | 	rdlong	local04, local03
0e3a8     6C 4E 05 F1 | 	add	fp, #108
0e3ac     A7 24 62 FC | 	wrlong	local04, fp
0e3b0     78 4E 85 F1 | 	sub	fp, #120
0e3b4     14 00 00 FF 
0e3b8     38 E5 85 F1 | 	sub	objptr, ##10552
0e3bc     48 00 90 FD | 	jmp	#LR__1167
0e3c0                 | LR__1166
0e3c0     50 4E 05 F1 | 	add	fp, #80
0e3c4     A7 24 02 FB | 	rdlong	local04, fp
0e3c8     28 4E 05 F1 | 	add	fp, #40
0e3cc     A7 24 62 FC | 	wrlong	local04, fp
0e3d0     6C 4E 85 F1 | 	sub	fp, #108
0e3d4     A7 20 02 FB | 	rdlong	local02, fp
0e3d8     10 23 02 F6 | 	mov	local03, local02
0e3dc     01 22 66 F0 | 	shl	local03, #1
0e3e0     10 23 02 F1 | 	add	local03, local02
0e3e4     03 22 66 F0 | 	shl	local03, #3
0e3e8     14 00 00 FF 
0e3ec     38 E5 05 F1 | 	add	objptr, ##10552
0e3f0     F2 22 02 F1 | 	add	local03, objptr
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     08 22 06 F1 | 	add	local03, #8
0e3fc     11 25 62 FC | 	wrlong	local04, local03
0e400     14 00 00 FF 
0e404     38 E5 85 F1 | 	sub	objptr, ##10552
0e408                 | LR__1167
0e408                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e408     40 4E 05 F1 | 	add	fp, #64
0e40c     A7 12 02 FB | 	rdlong	arg01, fp
0e410     40 4E 85 F1 | 	sub	fp, #64
0e414     00 14 06 F6 | 	mov	arg02, #0
0e418     01 16 06 F6 | 	mov	arg03, #1
0e41c     64 56 B1 FD | 	call	#__system___float_cmp
0e420     00 FA 55 F2 | 	cmps	result1, #0 wc
0e424     24 00 90 CD |  if_b	jmp	#LR__1168
0e428     40 4E 05 F1 | 	add	fp, #64
0e42c     A7 12 02 FB | 	rdlong	arg01, fp
0e430     40 4E 85 F1 | 	sub	fp, #64
0e434     20 0E 23 FF 
0e438     00 14 06 F6 | 	mov	arg02, ##1176256512
0e43c     01 16 66 F6 | 	neg	arg03, #1
0e440     40 56 B1 FD | 	call	#__system___float_cmp
0e444     01 FA 55 F2 | 	cmps	result1, #1 wc
0e448     44 00 90 CD |  if_b	jmp	#LR__1169
0e44c                 | LR__1168
0e44c     0C 4E 05 F1 | 	add	fp, #12
0e450     A7 22 02 FB | 	rdlong	local03, fp
0e454     11 25 02 F6 | 	mov	local04, local03
0e458     01 24 66 F0 | 	shl	local04, #1
0e45c     11 25 02 F1 | 	add	local04, local03
0e460     03 24 66 F0 | 	shl	local04, #3
0e464     14 00 00 FF 
0e468     38 E5 05 F1 | 	add	objptr, ##10552
0e46c     F2 24 02 F1 | 	add	local04, objptr
0e470     06 24 06 F1 | 	add	local04, #6
0e474     12 25 E2 FA | 	rdword	local04, local04
0e478     1C 4E 05 F1 | 	add	fp, #28
0e47c     A7 24 62 FC | 	wrlong	local04, fp
0e480     28 4E 85 F1 | 	sub	fp, #40
0e484     14 00 00 FF 
0e488     38 E5 85 F1 | 	sub	objptr, ##10552
0e48c     54 00 90 FD | 	jmp	#LR__1170
0e490                 | LR__1169
0e490     40 4E 05 F1 | 	add	fp, #64
0e494     A7 12 02 FB | 	rdlong	arg01, fp
0e498     40 4E 85 F1 | 	sub	fp, #64
0e49c     01 14 06 F6 | 	mov	arg02, #1
0e4a0     74 56 B1 FD | 	call	#__system___float_tointeger
0e4a4     28 4E 05 F1 | 	add	fp, #40
0e4a8     A7 FA 61 FC | 	wrlong	result1, fp
0e4ac     1C 4E 85 F1 | 	sub	fp, #28
0e4b0     A7 20 02 FB | 	rdlong	local02, fp
0e4b4     10 23 02 F6 | 	mov	local03, local02
0e4b8     01 22 66 F0 | 	shl	local03, #1
0e4bc     10 23 02 F1 | 	add	local03, local02
0e4c0     03 22 66 F0 | 	shl	local03, #3
0e4c4     14 00 00 FF 
0e4c8     38 E5 05 F1 | 	add	objptr, ##10552
0e4cc     F2 22 02 F1 | 	add	local03, objptr
0e4d0     0C 4E 85 F1 | 	sub	fp, #12
0e4d4     06 22 06 F1 | 	add	local03, #6
0e4d8     11 FB 51 FC | 	wrword	result1, local03
0e4dc     14 00 00 FF 
0e4e0     38 E5 85 F1 | 	sub	objptr, ##10552
0e4e4                 | LR__1170
0e4e4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e4e4     54 4E 05 F1 | 	add	fp, #84
0e4e8     A7 12 02 FB | 	rdlong	arg01, fp
0e4ec     54 4E 85 F1 | 	sub	fp, #84
0e4f0     00 C0 5F FF 
0e4f4     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e4f8     01 16 06 F6 | 	mov	arg03, #1
0e4fc     84 55 B1 FD | 	call	#__system___float_cmp
0e500     00 FA 55 F2 | 	cmps	result1, #0 wc
0e504     24 00 90 CD |  if_b	jmp	#LR__1171
0e508     54 4E 05 F1 | 	add	fp, #84
0e50c     A7 12 02 FB | 	rdlong	arg01, fp
0e510     54 4E 85 F1 | 	sub	fp, #84
0e514     00 C0 1F FF 
0e518     00 14 06 F6 | 	mov	arg02, ##1065353216
0e51c     01 16 66 F6 | 	neg	arg03, #1
0e520     60 55 B1 FD | 	call	#__system___float_cmp
0e524     01 FA 55 F2 | 	cmps	result1, #1 wc
0e528     44 00 90 CD |  if_b	jmp	#LR__1172
0e52c                 | LR__1171
0e52c     0C 4E 05 F1 | 	add	fp, #12
0e530     A7 20 02 FB | 	rdlong	local02, fp
0e534     10 23 02 F6 | 	mov	local03, local02
0e538     01 22 66 F0 | 	shl	local03, #1
0e53c     10 23 02 F1 | 	add	local03, local02
0e540     03 22 66 F0 | 	shl	local03, #3
0e544     14 00 00 FF 
0e548     38 E5 05 F1 | 	add	objptr, ##10552
0e54c     F2 22 02 F1 | 	add	local03, objptr
0e550     10 22 06 F1 | 	add	local03, #16
0e554     11 25 02 FB | 	rdlong	local04, local03
0e558     64 4E 05 F1 | 	add	fp, #100
0e55c     A7 24 62 FC | 	wrlong	local04, fp
0e560     70 4E 85 F1 | 	sub	fp, #112
0e564     14 00 00 FF 
0e568     38 E5 85 F1 | 	sub	objptr, ##10552
0e56c     48 00 90 FD | 	jmp	#LR__1173
0e570                 | LR__1172
0e570     54 4E 05 F1 | 	add	fp, #84
0e574     A7 26 02 FB | 	rdlong	local05, fp
0e578     1C 4E 05 F1 | 	add	fp, #28
0e57c     A7 26 62 FC | 	wrlong	local05, fp
0e580     64 4E 85 F1 | 	sub	fp, #100
0e584     A7 20 02 FB | 	rdlong	local02, fp
0e588     10 23 02 F6 | 	mov	local03, local02
0e58c     01 22 66 F0 | 	shl	local03, #1
0e590     10 23 02 F1 | 	add	local03, local02
0e594     03 22 66 F0 | 	shl	local03, #3
0e598     14 00 00 FF 
0e59c     38 E5 05 F1 | 	add	objptr, ##10552
0e5a0     F2 22 02 F1 | 	add	local03, objptr
0e5a4     0C 4E 85 F1 | 	sub	fp, #12
0e5a8     10 22 06 F1 | 	add	local03, #16
0e5ac     11 27 62 FC | 	wrlong	local05, local03
0e5b0     14 00 00 FF 
0e5b4     38 E5 85 F1 | 	sub	objptr, ##10552
0e5b8                 | LR__1173
0e5b8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e5b8     58 4E 05 F1 | 	add	fp, #88
0e5bc     A7 12 02 FB | 	rdlong	arg01, fp
0e5c0     58 4E 85 F1 | 	sub	fp, #88
0e5c4     00 14 06 F6 | 	mov	arg02, #0
0e5c8     01 16 06 F6 | 	mov	arg03, #1
0e5cc     B4 54 B1 FD | 	call	#__system___float_cmp
0e5d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e5d4     24 00 90 CD |  if_b	jmp	#LR__1174
0e5d8     58 4E 05 F1 | 	add	fp, #88
0e5dc     A7 12 02 FB | 	rdlong	arg01, fp
0e5e0     58 4E 85 F1 | 	sub	fp, #88
0e5e4     80 BF 21 FF 
0e5e8     00 14 06 F6 | 	mov	arg02, ##1132396544
0e5ec     01 16 66 F6 | 	neg	arg03, #1
0e5f0     90 54 B1 FD | 	call	#__system___float_cmp
0e5f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e5f8     44 00 90 CD |  if_b	jmp	#LR__1175
0e5fc                 | LR__1174
0e5fc     0C 4E 05 F1 | 	add	fp, #12
0e600     A7 22 02 FB | 	rdlong	local03, fp
0e604     11 27 02 F6 | 	mov	local05, local03
0e608     01 26 66 F0 | 	shl	local05, #1
0e60c     11 27 02 F1 | 	add	local05, local03
0e610     03 26 66 F0 | 	shl	local05, #3
0e614     14 00 00 FF 
0e618     38 E5 05 F1 | 	add	objptr, ##10552
0e61c     F2 26 02 F1 | 	add	local05, objptr
0e620     14 26 06 F1 | 	add	local05, #20
0e624     13 25 E2 FA | 	rdword	local04, local05
0e628     20 4E 05 F1 | 	add	fp, #32
0e62c     A7 24 62 FC | 	wrlong	local04, fp
0e630     2C 4E 85 F1 | 	sub	fp, #44
0e634     14 00 00 FF 
0e638     38 E5 85 F1 | 	sub	objptr, ##10552
0e63c     54 00 90 FD | 	jmp	#LR__1176
0e640                 | LR__1175
0e640     58 4E 05 F1 | 	add	fp, #88
0e644     A7 12 02 FB | 	rdlong	arg01, fp
0e648     58 4E 85 F1 | 	sub	fp, #88
0e64c     01 14 06 F6 | 	mov	arg02, #1
0e650     C4 54 B1 FD | 	call	#__system___float_tointeger
0e654     2C 4E 05 F1 | 	add	fp, #44
0e658     A7 FA 61 FC | 	wrlong	result1, fp
0e65c     20 4E 85 F1 | 	sub	fp, #32
0e660     A7 20 02 FB | 	rdlong	local02, fp
0e664     10 23 02 F6 | 	mov	local03, local02
0e668     01 22 66 F0 | 	shl	local03, #1
0e66c     10 23 02 F1 | 	add	local03, local02
0e670     03 22 66 F0 | 	shl	local03, #3
0e674     14 00 00 FF 
0e678     38 E5 05 F1 | 	add	objptr, ##10552
0e67c     F2 22 02 F1 | 	add	local03, objptr
0e680     0C 4E 85 F1 | 	sub	fp, #12
0e684     14 22 06 F1 | 	add	local03, #20
0e688     11 FB 51 FC | 	wrword	result1, local03
0e68c     14 00 00 FF 
0e690     38 E5 85 F1 | 	sub	objptr, ##10552
0e694                 | LR__1176
0e694     6C 4E 05 F1 | 	add	fp, #108
0e698     A7 14 02 FB | 	rdlong	arg02, fp
0e69c     6C 4E 85 F1 | 	sub	fp, #108
0e6a0     FC 16 20 FF 
0e6a4     54 12 06 F6 | 	mov	arg01, ##1076754516
0e6a8     50 5F B1 FD | 	call	#__system____builtin_logbase
0e6ac     FD 24 02 F6 | 	mov	local04, result1
0e6b0     1E 14 C6 F9 | 	decod	arg02, #30
0e6b4     FC 16 20 FF 
0e6b8     54 12 06 F6 | 	mov	arg01, ##1076754516
0e6bc     3C 5F B1 FD | 	call	#__system____builtin_logbase
0e6c0     FD 14 02 F6 | 	mov	arg02, result1
0e6c4     12 13 02 F6 | 	mov	arg01, local04
0e6c8     88 51 B1 FD | 	call	#__system___float_div
0e6cc     FD 12 02 F6 | 	mov	arg01, result1
0e6d0     00 14 06 F6 | 	mov	arg02, #0
0e6d4     40 54 B1 FD | 	call	#__system___float_tointeger
0e6d8     30 4E 05 F1 | 	add	fp, #48
0e6dc     A7 FA 61 FC | 	wrlong	result1, fp
0e6e0     1E 24 C6 F9 | 	decod	local04, #30
0e6e4     FD 12 02 F6 | 	mov	arg01, result1
0e6e8     30 4E 85 F1 | 	sub	fp, #48
0e6ec     05 12 06 F1 | 	add	arg01, #5
0e6f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6f4     1F 28 C6 C9 |  if_b	decod	local06, #31
0e6f8     00 28 06 36 |  if_ae	mov	local06, #0
0e6fc     4C 4B B1 FD | 	call	#__system___float_fromuns
0e700     14 FB 61 F5 | 	xor	result1, local06
0e704     FD 14 02 F6 | 	mov	arg02, result1
0e708     12 13 02 F6 | 	mov	arg01, local04
0e70c     24 5E B1 FD | 	call	#__system____builtin_powf
0e710     FD 12 02 F6 | 	mov	arg01, result1
0e714     01 14 06 F6 | 	mov	arg02, #1
0e718     FC 53 B1 FD | 	call	#__system___float_tointeger
0e71c     10 4E 05 F1 | 	add	fp, #16
0e720     A7 FA 61 FC | 	wrlong	result1, fp
0e724                 | ' skip=round(2^(lfreq+5))
0e724                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e724     10 4E 85 F1 | 	sub	fp, #16
0e728     40 00 00 FF 
0e72c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e730     30 00 90 CD |  if_b	jmp	#LR__1177
0e734     10 4E 05 F1 | 	add	fp, #16
0e738     A7 1E 02 FB | 	rdlong	local01, fp
0e73c     0F 25 52 F6 | 	abs	local04, local01 wc
0e740     0F 24 46 F0 | 	shr	local04, #15
0e744     12 25 82 F6 | 	negc	local04, local04
0e748     0C 4E 85 F1 | 	sub	fp, #12
0e74c     A7 24 62 FC | 	wrlong	local04, fp
0e750     0C 4E 05 F1 | 	add	fp, #12
0e754     40 00 80 FF 
0e758     A7 00 68 FC | 	wrlong	##32768, fp
0e75c     10 4E 85 F1 | 	sub	fp, #16
0e760     0C 00 90 FD | 	jmp	#LR__1178
0e764                 | LR__1177
0e764     04 4E 05 F1 | 	add	fp, #4
0e768     A7 02 68 FC | 	wrlong	#1, fp
0e76c     04 4E 85 F1 | 	sub	fp, #4
0e770                 | LR__1178
0e770     6C 4E 05 F1 | 	add	fp, #108
0e774     A7 14 02 FB | 	rdlong	arg02, fp
0e778     6C 4E 85 F1 | 	sub	fp, #108
0e77c     3E 2C 25 FF 
0e780     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e784     CC 50 B1 FD | 	call	#__system___float_div
0e788     FD 24 02 F6 | 	mov	local04, result1
0e78c     04 4E 05 F1 | 	add	fp, #4
0e790     A7 12 02 FB | 	rdlong	arg01, fp
0e794     04 4E 85 F1 | 	sub	fp, #4
0e798     09 13 52 F6 | 	abs	arg01, arg01 wc
0e79c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e7a0     00 28 06 36 |  if_ae	mov	local06, #0
0e7a4     A4 4A B1 FD | 	call	#__system___float_fromuns
0e7a8     14 FB 61 F5 | 	xor	result1, local06
0e7ac     FD 1E 02 F6 | 	mov	local01, result1
0e7b0     1E 20 C6 F9 | 	decod	local02, #30
0e7b4     0D 12 06 F6 | 	mov	arg01, #13
0e7b8     30 4E 05 F1 | 	add	fp, #48
0e7bc     A7 26 02 FB | 	rdlong	local05, fp
0e7c0     30 4E 85 F1 | 	sub	fp, #48
0e7c4     13 13 82 F1 | 	sub	arg01, local05
0e7c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7cc     1F 28 C6 C9 |  if_b	decod	local06, #31
0e7d0     00 28 06 36 |  if_ae	mov	local06, #0
0e7d4     74 4A B1 FD | 	call	#__system___float_fromuns
0e7d8     14 FB 61 F5 | 	xor	result1, local06
0e7dc     FD 14 02 F6 | 	mov	arg02, result1
0e7e0     10 13 02 F6 | 	mov	arg01, local02
0e7e4     4C 5D B1 FD | 	call	#__system____builtin_powf
0e7e8     FD 14 02 F6 | 	mov	arg02, result1
0e7ec     0F 13 02 F6 | 	mov	arg01, local01
0e7f0     5C 4E B1 FD | 	call	#__system___float_mul
0e7f4     FD 14 02 F6 | 	mov	arg02, result1
0e7f8     12 13 02 F6 | 	mov	arg01, local04
0e7fc     54 50 B1 FD | 	call	#__system___float_div
0e800     FD 12 02 F6 | 	mov	arg01, result1
0e804     01 14 06 F6 | 	mov	arg02, #1
0e808     0C 53 B1 FD | 	call	#__system___float_tointeger
0e80c     34 4E 05 F1 | 	add	fp, #52
0e810     A7 FA 61 FC | 	wrlong	result1, fp
0e814     34 4E 05 F1 | 	add	fp, #52
0e818     A7 12 02 FB | 	rdlong	arg01, fp
0e81c     10 4E 05 F1 | 	add	fp, #16
0e820     A7 14 02 FB | 	rdlong	arg02, fp
0e824     78 4E 85 F1 | 	sub	fp, #120
0e828     28 50 B1 FD | 	call	#__system___float_div
0e82c     FD 12 02 F6 | 	mov	arg01, result1
0e830     01 14 06 F6 | 	mov	arg02, #1
0e834     E0 52 B1 FD | 	call	#__system___float_tointeger
0e838     FD 24 02 F6 | 	mov	local04, result1
0e83c     14 4E 05 F1 | 	add	fp, #20
0e840     A7 24 62 FC | 	wrlong	local04, fp
0e844     5C 4E 05 F1 | 	add	fp, #92
0e848     A7 14 02 FB | 	rdlong	arg02, fp
0e84c     70 4E 85 F1 | 	sub	fp, #112
0e850     00 00 23 FF 
0e854     00 12 06 F6 | 	mov	arg01, ##1174405120
0e858     F4 4D B1 FD | 	call	#__system___float_mul
0e85c     FD 12 02 F6 | 	mov	arg01, result1
0e860     01 14 06 F6 | 	mov	arg02, #1
0e864     B0 52 B1 FD | 	call	#__system___float_tointeger
0e868     0D 24 C6 F9 | 	decod	local04, #13
0e86c     FD 24 02 F1 | 	add	local04, result1
0e870     18 4E 05 F1 | 	add	fp, #24
0e874     A7 24 62 FC | 	wrlong	local04, fp
0e878     5C 4E 05 F1 | 	add	fp, #92
0e87c     A7 14 02 FB | 	rdlong	arg02, fp
0e880     74 4E 85 F1 | 	sub	fp, #116
0e884     00 3D 22 FF 
0e888     00 12 06 F6 | 	mov	arg01, ##1148846080
0e88c     C0 4D B1 FD | 	call	#__system___float_mul
0e890     FD 12 02 F6 | 	mov	arg01, result1
0e894     01 14 06 F6 | 	mov	arg02, #1
0e898     7C 52 B1 FD | 	call	#__system___float_tointeger
0e89c     1C 4E 05 F1 | 	add	fp, #28
0e8a0     A7 FA 61 FC | 	wrlong	result1, fp
0e8a4     37 00 00 FF 
0e8a8     10 E4 05 F1 | 	add	objptr, ##28176
0e8ac     F2 24 02 FB | 	rdlong	local04, objptr
0e8b0     37 00 00 FF 
0e8b4     10 E4 85 F1 | 	sub	objptr, ##28176
0e8b8     10 4E 85 F1 | 	sub	fp, #16
0e8bc     A7 20 02 FB | 	rdlong	local02, fp
0e8c0     06 20 66 F0 | 	shl	local02, #6
0e8c4     10 25 02 F1 | 	add	local04, local02
0e8c8     04 4E 85 F1 | 	sub	fp, #4
0e8cc     A7 24 62 FC | 	wrlong	local04, fp
0e8d0                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e8d0                 | '  
0e8d0                 | '   
0e8d0                 | ' 'print period,skip
0e8d0                 | ' speed=round(speed_coeff/slen)
0e8d0                 | ' ipan=8192+round(8192*pan)
0e8d0                 | ' ivol=round(1000.0*vol)
0e8d0                 | ' base2=base+64*channel
0e8d0                 | ' 'skip=round(freq*3.9827219) 
0e8d0                 | ' if wave <32 then 
0e8d0     18 4E 05 F1 | 	add	fp, #24
0e8d4     A7 24 02 FB | 	rdlong	local04, fp
0e8d8     20 4E 85 F1 | 	sub	fp, #32
0e8dc     20 24 56 F2 | 	cmps	local04, #32 wc
0e8e0     2C 00 90 3D |  if_ae	jmp	#LR__1179
0e8e4     08 4E 05 F1 | 	add	fp, #8
0e8e8     A7 12 02 FB | 	rdlong	arg01, fp
0e8ec     08 12 06 F1 | 	add	arg01, #8
0e8f0     18 4E 05 F1 | 	add	fp, #24
0e8f4     A7 14 02 FB | 	rdlong	arg02, fp
0e8f8     20 4E 85 F1 | 	sub	fp, #32
0e8fc     0B 14 66 F0 | 	shl	arg02, #11
0e900     00 00 60 FF 
0e904     00 14 06 F1 | 	add	arg02, ##-1073741824
0e908     09 15 62 FC | 	wrlong	arg02, arg01
0e90c     18 00 90 FD | 	jmp	#LR__1180
0e910                 | LR__1179
0e910     08 4E 05 F1 | 	add	fp, #8
0e914     A7 12 02 FB | 	rdlong	arg01, fp
0e918     08 4E 85 F1 | 	sub	fp, #8
0e91c     08 12 06 F1 | 	add	arg01, #8
0e920     00 00 E4 FF 
0e924     09 01 68 FC | 	wrlong	##-939524096, arg01
0e928                 | LR__1180
0e928     08 4E 05 F1 | 	add	fp, #8
0e92c     A7 12 02 FB | 	rdlong	arg01, fp
0e930     10 12 06 F1 | 	add	arg01, #16
0e934     04 00 80 FF 
0e938     09 01 68 FC | 	wrlong	##2048, arg01
0e93c     A7 12 02 FB | 	rdlong	arg01, fp
0e940     0C 12 06 F1 | 	add	arg01, #12
0e944     09 01 68 FC | 	wrlong	#0, arg01
0e948     A7 12 02 FB | 	rdlong	arg01, fp
0e94c     14 12 06 F1 | 	add	arg01, #20
0e950     14 4E 05 F1 | 	add	fp, #20
0e954     A7 14 02 FB | 	rdlong	arg02, fp
0e958     09 15 52 FC | 	wrword	arg02, arg01
0e95c     14 4E 85 F1 | 	sub	fp, #20
0e960     A7 12 02 FB | 	rdlong	arg01, fp
0e964     16 12 06 F1 | 	add	arg01, #22
0e968     10 4E 05 F1 | 	add	fp, #16
0e96c     A7 14 02 FB | 	rdlong	arg02, fp
0e970     09 15 52 FC | 	wrword	arg02, arg01
0e974                 | ' lpoke base2+16,2048
0e974                 | ' lpoke base2+12,0
0e974                 | ' dpoke base2+20,ivol 
0e974                 | ' dpoke base2+22,ipan 
0e974                 | ' if wave<32 then
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 24 02 FB | 	rdlong	local04, fp
0e97c     20 4E 85 F1 | 	sub	fp, #32
0e980     20 24 56 F2 | 	cmps	local04, #32 wc
0e984     38 00 90 3D |  if_ae	jmp	#LR__1181
0e988     08 4E 05 F1 | 	add	fp, #8
0e98c     A7 12 02 FB | 	rdlong	arg01, fp
0e990     18 12 06 F1 | 	add	arg01, #24
0e994     2C 4E 05 F1 | 	add	fp, #44
0e998     A7 14 02 FB | 	rdlong	arg02, fp
0e99c     09 15 52 FC | 	wrword	arg02, arg01
0e9a0     2C 4E 85 F1 | 	sub	fp, #44
0e9a4     A7 12 02 FB | 	rdlong	arg01, fp
0e9a8     1A 12 06 F1 | 	add	arg01, #26
0e9ac     08 4E 05 F1 | 	add	fp, #8
0e9b0     A7 14 02 FB | 	rdlong	arg02, fp
0e9b4     10 4E 85 F1 | 	sub	fp, #16
0e9b8     09 15 52 FC | 	wrword	arg02, arg01
0e9bc     48 00 90 FD | 	jmp	#LR__1182
0e9c0                 | LR__1181
0e9c0     08 4E 05 F1 | 	add	fp, #8
0e9c4     A7 24 02 FB | 	rdlong	local04, fp
0e9c8     18 24 06 F1 | 	add	local04, #24
0e9cc     64 4E 05 F1 | 	add	fp, #100
0e9d0     A7 14 02 FB | 	rdlong	arg02, fp
0e9d4     6C 4E 85 F1 | 	sub	fp, #108
0e9d8     3E 2C 25 FF 
0e9dc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e9e0     70 4E B1 FD | 	call	#__system___float_div
0e9e4     FD 12 02 F6 | 	mov	arg01, result1
0e9e8     01 14 06 F6 | 	mov	arg02, #1
0e9ec     28 51 B1 FD | 	call	#__system___float_tointeger
0e9f0     12 FB 51 FC | 	wrword	result1, local04
0e9f4     08 4E 05 F1 | 	add	fp, #8
0e9f8     A7 12 02 FB | 	rdlong	arg01, fp
0e9fc     08 4E 85 F1 | 	sub	fp, #8
0ea00     1A 12 06 F1 | 	add	arg01, #26
0ea04     09 01 5A FC | 	wrword	#256, arg01
0ea08                 | LR__1182
0ea08     08 4E 05 F1 | 	add	fp, #8
0ea0c     A7 12 02 FB | 	rdlong	arg01, fp
0ea10     1C 12 06 F1 | 	add	arg01, #28
0ea14     09 01 68 FC | 	wrlong	#0, arg01
0ea18     A7 12 02 FB | 	rdlong	arg01, fp
0ea1c     20 12 06 F1 | 	add	arg01, #32
0ea20     09 01 68 FC | 	wrlong	#0, arg01
0ea24                 | ' lpoke base2+28,$0000_0000
0ea24                 | ' lpoke base2+32,0 
0ea24                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0ea24     1C 4E 05 F1 | 	add	fp, #28
0ea28     A7 24 02 FB | 	rdlong	local04, fp
0ea2c     24 4E 85 F1 | 	sub	fp, #36
0ea30     08 24 0E F2 | 	cmp	local04, #8 wz
0ea34     18 00 90 5D |  if_ne	jmp	#LR__1183
0ea38     08 4E 05 F1 | 	add	fp, #8
0ea3c     A7 12 02 FB | 	rdlong	arg01, fp
0ea40     08 4E 85 F1 | 	sub	fp, #8
0ea44     24 12 06 F1 | 	add	arg01, #36
0ea48     09 01 68 FC | 	wrlong	#0, arg01
0ea4c     34 00 90 FD | 	jmp	#LR__1184
0ea50                 | LR__1183
0ea50     08 4E 05 F1 | 	add	fp, #8
0ea54     A7 12 02 FB | 	rdlong	arg01, fp
0ea58     24 12 06 F1 | 	add	arg01, #36
0ea5c     1C 4E 05 F1 | 	add	fp, #28
0ea60     A7 14 02 FB | 	rdlong	arg02, fp
0ea64     24 4E 85 F1 | 	sub	fp, #36
0ea68     09 14 66 F0 | 	shl	arg02, #9
0ea6c     0C 00 00 FF 
0ea70     D8 E4 05 F1 | 	add	objptr, ##6360
0ea74     F2 14 02 F1 | 	add	arg02, objptr
0ea78     0C 00 00 FF 
0ea7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ea80     09 15 62 FC | 	wrlong	arg02, arg01
0ea84                 | LR__1184
0ea84     08 4E 05 F1 | 	add	fp, #8
0ea88     A7 12 02 FB | 	rdlong	arg01, fp
0ea8c     28 12 06 F1 | 	add	arg01, #40
0ea90     0C 4E 05 F1 | 	add	fp, #12
0ea94     A7 14 02 FB | 	rdlong	arg02, fp
0ea98     09 15 62 FC | 	wrlong	arg02, arg01
0ea9c     0C 4E 85 F1 | 	sub	fp, #12
0eaa0     A7 12 02 FB | 	rdlong	arg01, fp
0eaa4     2C 12 06 F1 | 	add	arg01, #44
0eaa8     24 4E 05 F1 | 	add	fp, #36
0eaac     A7 14 02 FB | 	rdlong	arg02, fp
0eab0     09 15 62 FC | 	wrlong	arg02, arg01
0eab4                 | ' lpoke base2+40,speed' speed
0eab4                 | ' lpoke base2+44,sus 'len
0eab4                 | ' 
0eab4                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0eab4     04 4E 85 F1 | 	sub	fp, #4
0eab8     A7 24 02 FB | 	rdlong	local04, fp
0eabc     28 4E 85 F1 | 	sub	fp, #40
0eac0     01 24 56 F2 | 	cmps	local04, #1 wc
0eac4     28 4E 05 31 |  if_ae	add	fp, #40
0eac8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0eacc     28 4E 85 31 |  if_ae	sub	fp, #40
0ead0     BC 22 B1 3D |  if_ae	call	#__system___waitms
0ead4     A7 F0 03 F6 | 	mov	ptra, fp
0ead8     B2 00 A0 FD | 	call	#popregs_
0eadc                 | _do_play_ret
0eadc     2D 00 64 FD | 	ret
0eae0                 | 
0eae0                 | ' 
0eae0                 | ' sub do_changevol
0eae0                 | _do_changevol
0eae0     00 4A 05 F6 | 	mov	COUNT_, #0
0eae4     A8 00 A0 FD | 	call	#pushregs_
0eae8     14 F0 07 F1 | 	add	ptra, #20
0eaec     F4 CF BF FD | 	call	#_pop
0eaf0     FF 14 02 F6 | 	mov	arg02, result3
0eaf4     A7 FA 61 FC | 	wrlong	result1, fp
0eaf8     04 4E 05 F1 | 	add	fp, #4
0eafc     A7 FC 61 FC | 	wrlong	result2, fp
0eb00     04 4E 05 F1 | 	add	fp, #4
0eb04     A7 14 62 FC | 	wrlong	arg02, fp
0eb08     08 4E 85 F1 | 	sub	fp, #8
0eb0c     A7 12 02 F6 | 	mov	arg01, fp
0eb10     50 71 B0 FD | 	call	#_converttofloat
0eb14     FD 12 02 F6 | 	mov	arg01, result1
0eb18     00 3D 22 FF 
0eb1c     00 14 06 F6 | 	mov	arg02, ##1148846080
0eb20     2C 4B B1 FD | 	call	#__system___float_mul
0eb24     FD 12 02 F6 | 	mov	arg01, result1
0eb28     01 14 06 F6 | 	mov	arg02, #1
0eb2c     E8 4F B1 FD | 	call	#__system___float_tointeger
0eb30     FD 14 52 F6 | 	abs	arg02, result1 wc
0eb34     0D 14 46 F7 | 	zerox	arg02, #13
0eb38     0A 15 82 F6 | 	negc	arg02, arg02
0eb3c     10 4E 05 F1 | 	add	fp, #16
0eb40     A7 14 62 FC | 	wrlong	arg02, fp
0eb44     10 4E 85 F1 | 	sub	fp, #16
0eb48     98 CF BF FD | 	call	#_pop
0eb4c     FF 14 02 F6 | 	mov	arg02, result3
0eb50     A7 FA 61 FC | 	wrlong	result1, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FC 61 FC | 	wrlong	result2, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 14 62 FC | 	wrlong	arg02, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     A7 12 02 F6 | 	mov	arg01, fp
0eb6c     38 70 B0 FD | 	call	#_converttoint
0eb70     FD 14 52 F6 | 	abs	arg02, result1 wc
0eb74     07 14 06 F5 | 	and	arg02, #7
0eb78     0A 15 82 F6 | 	negc	arg02, arg02
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 14 62 FC | 	wrlong	arg02, fp
0eb84     37 00 00 FF 
0eb88     10 E4 05 F1 | 	add	objptr, ##28176
0eb8c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb90     37 00 00 FF 
0eb94     10 E4 85 F1 | 	sub	objptr, ##28176
0eb98     06 14 66 F0 | 	shl	arg02, #6
0eb9c     0A 13 02 F1 | 	add	arg01, arg02
0eba0     14 12 06 F1 | 	add	arg01, #20
0eba4     04 4E 05 F1 | 	add	fp, #4
0eba8     A7 14 02 FB | 	rdlong	arg02, fp
0ebac     10 4E 85 F1 | 	sub	fp, #16
0ebb0     09 15 52 FC | 	wrword	arg02, arg01
0ebb4     A7 F0 03 F6 | 	mov	ptra, fp
0ebb8     B2 00 A0 FD | 	call	#popregs_
0ebbc                 | _do_changevol_ret
0ebbc     2D 00 64 FD | 	ret
0ebc0                 | 
0ebc0                 | ' 
0ebc0                 | ' sub do_changepan
0ebc0                 | _do_changepan
0ebc0     01 4A 05 F6 | 	mov	COUNT_, #1
0ebc4     A8 00 A0 FD | 	call	#pushregs_
0ebc8     14 F0 07 F1 | 	add	ptra, #20
0ebcc     14 CF BF FD | 	call	#_pop
0ebd0     A7 FA 61 FC | 	wrlong	result1, fp
0ebd4     04 4E 05 F1 | 	add	fp, #4
0ebd8     A7 FC 61 FC | 	wrlong	result2, fp
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0     A7 FE 61 FC | 	wrlong	result3, fp
0ebe4     08 4E 85 F1 | 	sub	fp, #8
0ebe8     00 00 23 FF 
0ebec     00 1E 06 F6 | 	mov	local01, ##1174405120
0ebf0     A7 12 02 F6 | 	mov	arg01, fp
0ebf4     6C 70 B0 FD | 	call	#_converttofloat
0ebf8     FD 14 02 F6 | 	mov	arg02, result1
0ebfc     0F 13 02 F6 | 	mov	arg01, local01
0ec00     4C 4A B1 FD | 	call	#__system___float_mul
0ec04     FD 12 02 F6 | 	mov	arg01, result1
0ec08     01 14 06 F6 | 	mov	arg02, #1
0ec0c     08 4F B1 FD | 	call	#__system___float_tointeger
0ec10     0D 1E C6 F9 | 	decod	local01, #13
0ec14     FD 1E 02 F1 | 	add	local01, result1
0ec18     10 4E 05 F1 | 	add	fp, #16
0ec1c     A7 1E 62 FC | 	wrlong	local01, fp
0ec20                 | ' t1=pop()
0ec20                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ec20                 | ' if pan<0 then pan=0
0ec20     10 4E 85 F1 | 	sub	fp, #16
0ec24     00 1E 56 F2 | 	cmps	local01, #0 wc
0ec28     10 4E 05 C1 |  if_b	add	fp, #16
0ec2c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ec30     10 4E 85 C1 |  if_b	sub	fp, #16
0ec34                 | ' if pan>16384 then pan=16384
0ec34     10 4E 05 F1 | 	add	fp, #16
0ec38     A7 1E 02 FB | 	rdlong	local01, fp
0ec3c     10 4E 85 F1 | 	sub	fp, #16
0ec40     20 00 00 FF 
0ec44     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ec48     10 4E 05 31 |  if_ae	add	fp, #16
0ec4c     20 00 80 3F 
0ec50     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ec54     10 4E 85 31 |  if_ae	sub	fp, #16
0ec58     88 CE BF FD | 	call	#_pop
0ec5c     FF 1E 02 F6 | 	mov	local01, result3
0ec60     A7 FA 61 FC | 	wrlong	result1, fp
0ec64     04 4E 05 F1 | 	add	fp, #4
0ec68     A7 FC 61 FC | 	wrlong	result2, fp
0ec6c     04 4E 05 F1 | 	add	fp, #4
0ec70     A7 1E 62 FC | 	wrlong	local01, fp
0ec74     08 4E 85 F1 | 	sub	fp, #8
0ec78     A7 12 02 F6 | 	mov	arg01, fp
0ec7c     28 6F B0 FD | 	call	#_converttoint
0ec80     FD 1E 52 F6 | 	abs	local01, result1 wc
0ec84     07 1E 06 F5 | 	and	local01, #7
0ec88     0F 1F 82 F6 | 	negc	local01, local01
0ec8c     0C 4E 05 F1 | 	add	fp, #12
0ec90     A7 1E 62 FC | 	wrlong	local01, fp
0ec94     37 00 00 FF 
0ec98     10 E4 05 F1 | 	add	objptr, ##28176
0ec9c     F2 12 02 FB | 	rdlong	arg01, objptr
0eca0     37 00 00 FF 
0eca4     10 E4 85 F1 | 	sub	objptr, ##28176
0eca8     06 1E 66 F0 | 	shl	local01, #6
0ecac     0F 13 02 F1 | 	add	arg01, local01
0ecb0     16 12 06 F1 | 	add	arg01, #22
0ecb4     04 4E 05 F1 | 	add	fp, #4
0ecb8     A7 14 02 FB | 	rdlong	arg02, fp
0ecbc     10 4E 85 F1 | 	sub	fp, #16
0ecc0     09 15 52 FC | 	wrword	arg02, arg01
0ecc4     A7 F0 03 F6 | 	mov	ptra, fp
0ecc8     B2 00 A0 FD | 	call	#popregs_
0eccc                 | _do_changepan_ret
0eccc     2D 00 64 FD | 	ret
0ecd0                 | 
0ecd0                 | ' 
0ecd0                 | ' sub do_changefreq
0ecd0                 | _do_changefreq
0ecd0     04 4A 05 F6 | 	mov	COUNT_, #4
0ecd4     A8 00 A0 FD | 	call	#pushregs_
0ecd8     28 F0 07 F1 | 	add	ptra, #40
0ecdc     04 CE BF FD | 	call	#_pop
0ece0     FF 14 02 F6 | 	mov	arg02, result3
0ece4     A7 FA 61 FC | 	wrlong	result1, fp
0ece8     04 4E 05 F1 | 	add	fp, #4
0ecec     A7 FC 61 FC | 	wrlong	result2, fp
0ecf0     04 4E 05 F1 | 	add	fp, #4
0ecf4     A7 14 62 FC | 	wrlong	arg02, fp
0ecf8     08 4E 85 F1 | 	sub	fp, #8
0ecfc     A7 12 02 F6 | 	mov	arg01, fp
0ed00     60 6F B0 FD | 	call	#_converttofloat
0ed04     24 4E 05 F1 | 	add	fp, #36
0ed08     A7 FA 61 FC | 	wrlong	result1, fp
0ed0c     24 4E 85 F1 | 	sub	fp, #36
0ed10     FD 14 02 F6 | 	mov	arg02, result1
0ed14     FC 16 20 FF 
0ed18     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed1c     DC 58 B1 FD | 	call	#__system____builtin_logbase
0ed20     FD 1E 02 F6 | 	mov	local01, result1
0ed24     1E 14 C6 F9 | 	decod	arg02, #30
0ed28     FC 16 20 FF 
0ed2c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ed30     C8 58 B1 FD | 	call	#__system____builtin_logbase
0ed34     FD 14 02 F6 | 	mov	arg02, result1
0ed38     0F 13 02 F6 | 	mov	arg01, local01
0ed3c     14 4B B1 FD | 	call	#__system___float_div
0ed40     FD 12 02 F6 | 	mov	arg01, result1
0ed44     00 14 06 F6 | 	mov	arg02, #0
0ed48     CC 4D B1 FD | 	call	#__system___float_tointeger
0ed4c     10 4E 05 F1 | 	add	fp, #16
0ed50     A7 FA 61 FC | 	wrlong	result1, fp
0ed54     1E 1E C6 F9 | 	decod	local01, #30
0ed58     FD 12 02 F6 | 	mov	arg01, result1
0ed5c     10 4E 85 F1 | 	sub	fp, #16
0ed60     05 12 06 F1 | 	add	arg01, #5
0ed64     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed68     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed6c     00 20 06 36 |  if_ae	mov	local02, #0
0ed70     D8 44 B1 FD | 	call	#__system___float_fromuns
0ed74     10 FB 61 F5 | 	xor	result1, local02
0ed78     FD 14 02 F6 | 	mov	arg02, result1
0ed7c     0F 13 02 F6 | 	mov	arg01, local01
0ed80     B0 57 B1 FD | 	call	#__system____builtin_powf
0ed84     FD 12 02 F6 | 	mov	arg01, result1
0ed88     01 14 06 F6 | 	mov	arg02, #1
0ed8c     88 4D B1 FD | 	call	#__system___float_tointeger
0ed90     14 4E 05 F1 | 	add	fp, #20
0ed94     A7 FA 61 FC | 	wrlong	result1, fp
0ed98                 | ' skip=round(2^(lfreq+5))
0ed98                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed98     14 4E 85 F1 | 	sub	fp, #20
0ed9c     40 00 00 FF 
0eda0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0eda4     30 00 90 CD |  if_b	jmp	#LR__1190
0eda8     14 4E 05 F1 | 	add	fp, #20
0edac     A7 1E 02 FB | 	rdlong	local01, fp
0edb0     0F 1F 52 F6 | 	abs	local01, local01 wc
0edb4     0F 1E 46 F0 | 	shr	local01, #15
0edb8     0F 1F 82 F6 | 	negc	local01, local01
0edbc     04 4E 05 F1 | 	add	fp, #4
0edc0     A7 1E 62 FC | 	wrlong	local01, fp
0edc4     04 4E 85 F1 | 	sub	fp, #4
0edc8     40 00 80 FF 
0edcc     A7 00 68 FC | 	wrlong	##32768, fp
0edd0     14 4E 85 F1 | 	sub	fp, #20
0edd4     0C 00 90 FD | 	jmp	#LR__1191
0edd8                 | LR__1190
0edd8     18 4E 05 F1 | 	add	fp, #24
0eddc     A7 02 68 FC | 	wrlong	#1, fp
0ede0     18 4E 85 F1 | 	sub	fp, #24
0ede4                 | LR__1191
0ede4     24 4E 05 F1 | 	add	fp, #36
0ede8     A7 14 02 FB | 	rdlong	arg02, fp
0edec     24 4E 85 F1 | 	sub	fp, #36
0edf0     3E 2C 25 FF 
0edf4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0edf8     58 4A B1 FD | 	call	#__system___float_div
0edfc     FD 1E 02 F6 | 	mov	local01, result1
0ee00     18 4E 05 F1 | 	add	fp, #24
0ee04     A7 12 02 FB | 	rdlong	arg01, fp
0ee08     18 4E 85 F1 | 	sub	fp, #24
0ee0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee10     1F 20 C6 C9 |  if_b	decod	local02, #31
0ee14     00 20 06 36 |  if_ae	mov	local02, #0
0ee18     30 44 B1 FD | 	call	#__system___float_fromuns
0ee1c     10 FB 61 F5 | 	xor	result1, local02
0ee20     FD 22 02 F6 | 	mov	local03, result1
0ee24     1E 24 C6 F9 | 	decod	local04, #30
0ee28     0D 12 06 F6 | 	mov	arg01, #13
0ee2c     10 4E 05 F1 | 	add	fp, #16
0ee30     A7 14 02 FB | 	rdlong	arg02, fp
0ee34     10 4E 85 F1 | 	sub	fp, #16
0ee38     0A 13 82 F1 | 	sub	arg01, arg02
0ee3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee40     1F 20 C6 C9 |  if_b	decod	local02, #31
0ee44     00 20 06 36 |  if_ae	mov	local02, #0
0ee48     00 44 B1 FD | 	call	#__system___float_fromuns
0ee4c     10 FB 61 F5 | 	xor	result1, local02
0ee50     FD 14 02 F6 | 	mov	arg02, result1
0ee54     12 13 02 F6 | 	mov	arg01, local04
0ee58     D8 56 B1 FD | 	call	#__system____builtin_powf
0ee5c     FD 14 02 F6 | 	mov	arg02, result1
0ee60     11 13 02 F6 | 	mov	arg01, local03
0ee64     E8 47 B1 FD | 	call	#__system___float_mul
0ee68     FD 14 02 F6 | 	mov	arg02, result1
0ee6c     0F 13 02 F6 | 	mov	arg01, local01
0ee70     E0 49 B1 FD | 	call	#__system___float_div
0ee74     FD 12 02 F6 | 	mov	arg01, result1
0ee78     01 14 06 F6 | 	mov	arg02, #1
0ee7c     98 4C B1 FD | 	call	#__system___float_tointeger
0ee80     FD 1E 02 F6 | 	mov	local01, result1
0ee84     1C 4E 05 F1 | 	add	fp, #28
0ee88     A7 1E 62 FC | 	wrlong	local01, fp
0ee8c     1C 4E 85 F1 | 	sub	fp, #28
0ee90     50 CC BF FD | 	call	#_pop
0ee94     FF 24 02 F6 | 	mov	local04, result3
0ee98     A7 FA 61 FC | 	wrlong	result1, fp
0ee9c     04 4E 05 F1 | 	add	fp, #4
0eea0     A7 FC 61 FC | 	wrlong	result2, fp
0eea4     04 4E 05 F1 | 	add	fp, #4
0eea8     A7 24 62 FC | 	wrlong	local04, fp
0eeac     08 4E 85 F1 | 	sub	fp, #8
0eeb0     A7 12 02 F6 | 	mov	arg01, fp
0eeb4     F0 6C B0 FD | 	call	#_converttoint
0eeb8     FD 22 52 F6 | 	abs	local03, result1 wc
0eebc     07 22 06 F5 | 	and	local03, #7
0eec0     11 23 82 F6 | 	negc	local03, local03
0eec4     0C 4E 05 F1 | 	add	fp, #12
0eec8     A7 22 62 FC | 	wrlong	local03, fp
0eecc     08 4E 05 F1 | 	add	fp, #8
0eed0     A7 14 02 FB | 	rdlong	arg02, fp
0eed4     10 14 66 F0 | 	shl	arg02, #16
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 24 02 FB | 	rdlong	local04, fp
0eee0     12 15 02 F1 | 	add	arg02, local04
0eee4     04 4E 05 F1 | 	add	fp, #4
0eee8     A7 14 62 FC | 	wrlong	arg02, fp
0eeec     37 00 00 FF 
0eef0     10 E4 05 F1 | 	add	objptr, ##28176
0eef4     F2 12 02 FB | 	rdlong	arg01, objptr
0eef8     37 00 00 FF 
0eefc     10 E4 85 F1 | 	sub	objptr, ##28176
0ef00     14 4E 85 F1 | 	sub	fp, #20
0ef04     A7 24 02 FB | 	rdlong	local04, fp
0ef08     06 24 66 F0 | 	shl	local04, #6
0ef0c     12 13 02 F1 | 	add	arg01, local04
0ef10     18 12 06 F1 | 	add	arg01, #24
0ef14     0C 4E 85 F1 | 	sub	fp, #12
0ef18     09 15 62 FC | 	wrlong	arg02, arg01
0ef1c     A7 F0 03 F6 | 	mov	ptra, fp
0ef20     B2 00 A0 FD | 	call	#popregs_
0ef24                 | _do_changefreq_ret
0ef24     2D 00 64 FD | 	ret
0ef28                 | 
0ef28                 | ' 
0ef28                 | ' sub do_changewav
0ef28                 | _do_changewav
0ef28     00 4A 05 F6 | 	mov	COUNT_, #0
0ef2c     A8 00 A0 FD | 	call	#pushregs_
0ef30     14 F0 07 F1 | 	add	ptra, #20
0ef34     AC CB BF FD | 	call	#_pop
0ef38     FF 14 02 F6 | 	mov	arg02, result3
0ef3c     A7 FA 61 FC | 	wrlong	result1, fp
0ef40     04 4E 05 F1 | 	add	fp, #4
0ef44     A7 FC 61 FC | 	wrlong	result2, fp
0ef48     04 4E 05 F1 | 	add	fp, #4
0ef4c     A7 14 62 FC | 	wrlong	arg02, fp
0ef50     08 4E 85 F1 | 	sub	fp, #8
0ef54     A7 12 02 F6 | 	mov	arg01, fp
0ef58     4C 6C B0 FD | 	call	#_converttoint
0ef5c     10 4E 05 F1 | 	add	fp, #16
0ef60     A7 FA 61 FC | 	wrlong	result1, fp
0ef64                 | ' t1=pop()
0ef64                 | ' wave=converttoint(t1)
0ef64                 | ' if wave<0 then wave=0
0ef64     FD 14 02 F6 | 	mov	arg02, result1
0ef68     10 4E 85 F1 | 	sub	fp, #16
0ef6c     00 14 56 F2 | 	cmps	arg02, #0 wc
0ef70     10 4E 05 C1 |  if_b	add	fp, #16
0ef74     A7 00 68 CC |  if_b	wrlong	#0, fp
0ef78     10 4E 85 C1 |  if_b	sub	fp, #16
0ef7c     64 CB BF FD | 	call	#_pop
0ef80     FF 14 02 F6 | 	mov	arg02, result3
0ef84     A7 FA 61 FC | 	wrlong	result1, fp
0ef88     04 4E 05 F1 | 	add	fp, #4
0ef8c     A7 FC 61 FC | 	wrlong	result2, fp
0ef90     04 4E 05 F1 | 	add	fp, #4
0ef94     A7 14 62 FC | 	wrlong	arg02, fp
0ef98     08 4E 85 F1 | 	sub	fp, #8
0ef9c     A7 12 02 F6 | 	mov	arg01, fp
0efa0     04 6C B0 FD | 	call	#_converttoint
0efa4     FD 14 52 F6 | 	abs	arg02, result1 wc
0efa8     07 14 06 F5 | 	and	arg02, #7
0efac     0A 15 82 F6 | 	negc	arg02, arg02
0efb0     0C 4E 05 F1 | 	add	fp, #12
0efb4     A7 14 62 FC | 	wrlong	arg02, fp
0efb8                 | ' if wave <32 then 
0efb8     04 4E 05 F1 | 	add	fp, #4
0efbc     A7 14 02 FB | 	rdlong	arg02, fp
0efc0     10 4E 85 F1 | 	sub	fp, #16
0efc4     20 14 56 F2 | 	cmps	arg02, #32 wc
0efc8     48 00 90 3D |  if_ae	jmp	#LR__1200
0efcc     37 00 00 FF 
0efd0     10 E4 05 F1 | 	add	objptr, ##28176
0efd4     F2 12 02 FB | 	rdlong	arg01, objptr
0efd8     37 00 00 FF 
0efdc     10 E4 85 F1 | 	sub	objptr, ##28176
0efe0     0C 4E 05 F1 | 	add	fp, #12
0efe4     A7 14 02 FB | 	rdlong	arg02, fp
0efe8     06 14 66 F0 | 	shl	arg02, #6
0efec     0A 13 02 F1 | 	add	arg01, arg02
0eff0     08 12 06 F1 | 	add	arg01, #8
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 14 02 FB | 	rdlong	arg02, fp
0effc     10 4E 85 F1 | 	sub	fp, #16
0f000     0B 14 66 F0 | 	shl	arg02, #11
0f004     00 00 60 FF 
0f008     00 14 06 F1 | 	add	arg02, ##-1073741824
0f00c     09 15 62 FC | 	wrlong	arg02, arg01
0f010     34 00 90 FD | 	jmp	#LR__1201
0f014                 | LR__1200
0f014     37 00 00 FF 
0f018     10 E4 05 F1 | 	add	objptr, ##28176
0f01c     F2 12 02 FB | 	rdlong	arg01, objptr
0f020     37 00 00 FF 
0f024     10 E4 85 F1 | 	sub	objptr, ##28176
0f028     0C 4E 05 F1 | 	add	fp, #12
0f02c     A7 14 02 FB | 	rdlong	arg02, fp
0f030     0C 4E 85 F1 | 	sub	fp, #12
0f034     06 14 66 F0 | 	shl	arg02, #6
0f038     0A 13 02 F1 | 	add	arg01, arg02
0f03c     08 12 06 F1 | 	add	arg01, #8
0f040     00 00 E4 FF 
0f044     09 01 68 FC | 	wrlong	##-939524096, arg01
0f048                 | LR__1201
0f048     A7 F0 03 F6 | 	mov	ptra, fp
0f04c     B2 00 A0 FD | 	call	#popregs_
0f050                 | _do_changewav_ret
0f050     2D 00 64 FD | 	ret
0f054                 | 
0f054                 | ' 
0f054                 | ' 
0f054                 | ' sub do_shutup
0f054                 | _do_shutup
0f054     03 4A 05 F6 | 	mov	COUNT_, #3
0f058     A8 00 A0 FD | 	call	#pushregs_
0f05c     18 F0 07 F1 | 	add	ptra, #24
0f060     4A 00 00 FF 
0f064     80 E4 05 F1 | 	add	objptr, ##38016
0f068     F2 1E 02 FB | 	rdlong	local01, objptr
0f06c     0F 21 02 F6 | 	mov	local02, local01
0f070     01 20 66 F0 | 	shl	local02, #1
0f074     0F 21 02 F1 | 	add	local02, local01
0f078     02 20 66 F0 | 	shl	local02, #2
0f07c     03 00 00 FF 
0f080     04 E4 85 F1 | 	sub	objptr, ##1540
0f084     F2 20 02 F1 | 	add	local02, objptr
0f088     10 23 0A FB | 	rdlong	local03, local02 wz
0f08c     14 4E 05 F1 | 	add	fp, #20
0f090     A7 22 62 FC | 	wrlong	local03, fp
0f094                 | ' 
0f094                 | ' numpar=compiledline(lineptr_e).result.uresult
0f094                 | ' if numpar=0 then
0f094     14 4E 85 F1 | 	sub	fp, #20
0f098     47 00 00 FF 
0f09c     7C E4 85 F1 | 	sub	objptr, ##36476
0f0a0     50 00 90 5D |  if_ne	jmp	#LR__1212
0f0a4                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f0a4     10 4E 05 F1 | 	add	fp, #16
0f0a8     A7 00 68 FC | 	wrlong	#0, fp
0f0ac     37 00 00 FF 
0f0b0     10 E4 05 F1 | 	add	objptr, ##28176
0f0b4     97 16 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0f0b8                 | LR__1210
0f0b8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0bc     A7 22 02 FB | 	rdlong	local03, fp
0f0c0     06 22 66 F0 | 	shl	local03, #6
0f0c4     11 13 02 F1 | 	add	arg01, local03
0f0c8     14 12 06 F1 | 	add	arg01, #20
0f0cc     09 01 58 FC | 	wrword	#0, arg01
0f0d0     A7 22 02 FB | 	rdlong	local03, fp
0f0d4     01 22 06 F1 | 	add	local03, #1
0f0d8     A7 22 62 FC | 	wrlong	local03, fp
0f0dc     08 22 56 F2 | 	cmps	local03, #8 wc
0f0e0     D4 FF 9F CD |  if_b	jmp	#LR__1210
0f0e4                 | LR__1211
0f0e4     37 00 00 FF 
0f0e8     10 E4 85 F1 | 	sub	objptr, ##28176
0f0ec     10 4E 85 F1 | 	sub	fp, #16
0f0f0     64 00 90 FD | 	jmp	#LR__1213
0f0f4                 | LR__1212
0f0f4     EC C9 BF FD | 	call	#_pop
0f0f8     FF 1E 02 F6 | 	mov	local01, result3
0f0fc     A7 FA 61 FC | 	wrlong	result1, fp
0f100     04 4E 05 F1 | 	add	fp, #4
0f104     A7 FC 61 FC | 	wrlong	result2, fp
0f108     04 4E 05 F1 | 	add	fp, #4
0f10c     A7 1E 62 FC | 	wrlong	local01, fp
0f110     08 4E 85 F1 | 	sub	fp, #8
0f114     A7 12 02 F6 | 	mov	arg01, fp
0f118     8C 6A B0 FD | 	call	#_converttoint
0f11c     FD 22 52 F6 | 	abs	local03, result1 wc
0f120     07 22 06 F5 | 	and	local03, #7
0f124     11 21 82 F6 | 	negc	local02, local03
0f128     0C 4E 05 F1 | 	add	fp, #12
0f12c     A7 20 62 FC | 	wrlong	local02, fp
0f130     37 00 00 FF 
0f134     10 E4 05 F1 | 	add	objptr, ##28176
0f138     F2 12 02 FB | 	rdlong	arg01, objptr
0f13c     37 00 00 FF 
0f140     10 E4 85 F1 | 	sub	objptr, ##28176
0f144     0C 4E 85 F1 | 	sub	fp, #12
0f148     06 20 66 F0 | 	shl	local02, #6
0f14c     10 13 02 F1 | 	add	arg01, local02
0f150     14 12 06 F1 | 	add	arg01, #20
0f154     09 01 58 FC | 	wrword	#0, arg01
0f158                 | LR__1213
0f158     A7 F0 03 F6 | 	mov	ptra, fp
0f15c     B2 00 A0 FD | 	call	#popregs_
0f160                 | _do_shutup_ret
0f160     2D 00 64 FD | 	ret
0f164                 | 
0f164                 | ' 
0f164                 | ' 
0f164                 | ' sub do_release
0f164                 | _do_release
0f164     00 4A 05 F6 | 	mov	COUNT_, #0
0f168     A8 00 A0 FD | 	call	#pushregs_
0f16c     10 F0 07 F1 | 	add	ptra, #16
0f170     70 C9 BF FD | 	call	#_pop
0f174     FF 14 02 F6 | 	mov	arg02, result3
0f178     A7 FA 61 FC | 	wrlong	result1, fp
0f17c     04 4E 05 F1 | 	add	fp, #4
0f180     A7 FC 61 FC | 	wrlong	result2, fp
0f184     04 4E 05 F1 | 	add	fp, #4
0f188     A7 14 62 FC | 	wrlong	arg02, fp
0f18c     08 4E 85 F1 | 	sub	fp, #8
0f190     A7 12 02 F6 | 	mov	arg01, fp
0f194     10 6A B0 FD | 	call	#_converttoint
0f198     0C 4E 05 F1 | 	add	fp, #12
0f19c     A7 FA 61 FC | 	wrlong	result1, fp
0f1a0                 | ' t1=pop()
0f1a0                 | ' channel=converttoint(t1)
0f1a0                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f1a0     0C 4E 85 F1 | 	sub	fp, #12
0f1a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1a8     44 00 90 CD |  if_b	jmp	#LR__1220
0f1ac     0C 4E 05 F1 | 	add	fp, #12
0f1b0     A7 14 02 FB | 	rdlong	arg02, fp
0f1b4     0C 4E 85 F1 | 	sub	fp, #12
0f1b8     08 14 56 F2 | 	cmps	arg02, #8 wc
0f1bc     30 00 90 3D |  if_ae	jmp	#LR__1220
0f1c0     37 00 00 FF 
0f1c4     10 E4 05 F1 | 	add	objptr, ##28176
0f1c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f1cc     37 00 00 FF 
0f1d0     10 E4 85 F1 | 	sub	objptr, ##28176
0f1d4     0C 4E 05 F1 | 	add	fp, #12
0f1d8     A7 14 02 FB | 	rdlong	arg02, fp
0f1dc     0C 4E 85 F1 | 	sub	fp, #12
0f1e0     06 14 66 F0 | 	shl	arg02, #6
0f1e4     0A 13 02 F1 | 	add	arg01, arg02
0f1e8     2C 12 06 F1 | 	add	arg01, #44
0f1ec     09 FF 69 FC | 	wrlong	#255, arg01
0f1f0                 | LR__1220
0f1f0     A7 F0 03 F6 | 	mov	ptra, fp
0f1f4     B2 00 A0 FD | 	call	#popregs_
0f1f8                 | _do_release_ret
0f1f8     2D 00 64 FD | 	ret
0f1fc                 | 
0f1fc                 | ' 
0f1fc                 | ' 
0f1fc                 | ' sub do_defsnd
0f1fc                 | _do_defsnd
0f1fc     04 4A 05 F6 | 	mov	COUNT_, #4
0f200     A8 00 A0 FD | 	call	#pushregs_
0f204     88 F0 07 F1 | 	add	ptra, #136
0f208     4A 00 00 FF 
0f20c     80 E4 05 F1 | 	add	objptr, ##38016
0f210     F2 1A 02 FB | 	rdlong	arg05, objptr
0f214     0D 19 02 F6 | 	mov	arg04, arg05
0f218     01 18 66 F0 | 	shl	arg04, #1
0f21c     0D 19 02 F1 | 	add	arg04, arg05
0f220     02 18 66 F0 | 	shl	arg04, #2
0f224     03 00 00 FF 
0f228     04 E4 85 F1 | 	sub	objptr, ##1540
0f22c     F2 18 02 F1 | 	add	arg04, objptr
0f230     0C 1B 02 FB | 	rdlong	arg05, arg04
0f234     A7 1A 62 FC | 	wrlong	arg05, fp
0f238                 | ' 
0f238                 | ' numpar=compiledline(lineptr_e).result.uresult
0f238                 | ' 
0f238                 | ' 
0f238                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f238                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f238                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f238                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f238                 | ' 
0f238                 | ' if numpar<2 then return
0f238     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f23c     47 00 00 FF 
0f240     7C E4 85 F1 | 	sub	objptr, ##36476
0f244     94 08 90 CD |  if_b	jmp	#LR__1253
0f248                 | ' 
0f248                 | '   
0f248                 | ' if numpar=2 then
0f248     A7 1A 02 FB | 	rdlong	arg05, fp
0f24c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f250     A0 03 90 5D |  if_ne	jmp	#LR__1240
0f254     8C C8 BF FD | 	call	#_pop
0f258     FF 1A 02 F6 | 	mov	arg05, result3
0f25c     2C 4E 05 F1 | 	add	fp, #44
0f260     A7 FA 61 FC | 	wrlong	result1, fp
0f264     04 4E 05 F1 | 	add	fp, #4
0f268     A7 FC 61 FC | 	wrlong	result2, fp
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 1A 62 FC | 	wrlong	arg05, fp
0f274                 | '   t1=pop()
0f274                 | '   if t1.result_type=result_string2 then 
0f274     34 4E 85 F1 | 	sub	fp, #52
0f278     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f27c     20 00 90 5D |  if_ne	jmp	#LR__1230
0f280     2C 4E 05 F1 | 	add	fp, #44
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     2C 4E 85 F1 | 	sub	fp, #44
0f28c     F4 20 B0 FD | 	call	#_convertstring
0f290     38 4E 05 F1 | 	add	fp, #56
0f294     A7 FA 61 FC | 	wrlong	result1, fp
0f298     38 4E 85 F1 | 	sub	fp, #56
0f29c     58 00 90 FD | 	jmp	#LR__1233
0f2a0                 | LR__1230
0f2a0     34 4E 05 F1 | 	add	fp, #52
0f2a4     A7 1A 02 FB | 	rdlong	arg05, fp
0f2a8     34 4E 85 F1 | 	sub	fp, #52
0f2ac     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f2b0     18 00 90 5D |  if_ne	jmp	#LR__1231
0f2b4     2C 4E 05 F1 | 	add	fp, #44
0f2b8     A7 1A 02 FB | 	rdlong	arg05, fp
0f2bc     0C 4E 05 F1 | 	add	fp, #12
0f2c0     A7 1A 62 FC | 	wrlong	arg05, fp
0f2c4     38 4E 85 F1 | 	sub	fp, #56
0f2c8     2C 00 90 FD | 	jmp	#LR__1232
0f2cc                 | LR__1231
0f2cc     84 01 00 FF 
0f2d0     E5 1B 06 F6 | 	mov	arg05, ##@LR__5455
0f2d4     38 4E 05 F1 | 	add	fp, #56
0f2d8     A7 1A 62 FC | 	wrlong	arg05, fp
0f2dc     0C 4E 85 F1 | 	sub	fp, #12
0f2e0     A7 12 02 F6 | 	mov	arg01, fp
0f2e4     2C 4E 85 F1 | 	sub	fp, #44
0f2e8     BC 68 B0 FD | 	call	#_converttoint
0f2ec     14 4E 05 F1 | 	add	fp, #20
0f2f0     A7 FA 61 FC | 	wrlong	result1, fp
0f2f4     14 4E 85 F1 | 	sub	fp, #20
0f2f8                 | LR__1232
0f2f8                 | LR__1233
0f2f8                 | ' 
0f2f8                 | '     
0f2f8                 | '   if s<>"" then 
0f2f8     38 4E 05 F1 | 	add	fp, #56
0f2fc     A7 12 02 FB | 	rdlong	arg01, fp
0f300     38 4E 85 F1 | 	sub	fp, #56
0f304     84 01 00 FF 
0f308     E6 15 06 F6 | 	mov	arg02, ##@LR__5456
0f30c     B4 17 B1 FD | 	call	#__system___string_cmp
0f310     00 FA 0D F2 | 	cmp	result1, #0 wz
0f314     E0 01 90 AD |  if_e	jmp	#LR__1236
0f318     C8 C7 BF FD | 	call	#_pop
0f31c     FF 1A 02 F6 | 	mov	arg05, result3
0f320     2C 4E 05 F1 | 	add	fp, #44
0f324     A7 FA 61 FC | 	wrlong	result1, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 FC 61 FC | 	wrlong	result2, fp
0f330     04 4E 05 F1 | 	add	fp, #4
0f334     A7 1A 62 FC | 	wrlong	arg05, fp
0f338     08 4E 85 F1 | 	sub	fp, #8
0f33c     A7 12 02 F6 | 	mov	arg01, fp
0f340     2C 4E 85 F1 | 	sub	fp, #44
0f344     60 68 B0 FD | 	call	#_converttoint
0f348     10 4E 05 F1 | 	add	fp, #16
0f34c     A7 FA 61 FC | 	wrlong	result1, fp
0f350                 | '     t1=pop()
0f350                 | '     channel=converttoint(t1) : if channel>31 then return
0f350     FD 1A 02 F6 | 	mov	arg05, result1
0f354     10 4E 85 F1 | 	sub	fp, #16
0f358     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f35c     7C 07 90 3D |  if_ae	jmp	#LR__1253
0f360                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f360     09 12 06 F6 | 	mov	arg01, #9
0f364     A4 67 B1 FD | 	call	#__system__close
0f368     09 1E 06 F6 | 	mov	local01, #9
0f36c     84 01 00 FF 
0f370     E7 13 06 F6 | 	mov	arg01, ##@LR__5457
0f374     38 4E 05 F1 | 	add	fp, #56
0f378     A7 14 02 FB | 	rdlong	arg02, fp
0f37c     38 4E 85 F1 | 	sub	fp, #56
0f380     74 17 B1 FD | 	call	#__system___string_concat
0f384     FD 14 02 F6 | 	mov	arg02, result1
0f388     0F 13 02 F6 | 	mov	arg01, local01
0f38c     00 16 06 F6 | 	mov	arg03, #0
0f390     0C 23 B1 FD | 	call	#__system___basic_open_string
0f394     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f398     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f39c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f3a0     52 00 00 FF 
0f3a4     14 E4 05 F1 | 	add	objptr, ##42004
0f3a8     F2 FA 61 FC | 	wrlong	result1, objptr
0f3ac                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f3ac     52 00 00 FF 
0f3b0     14 E4 85 F1 | 	sub	objptr, ##42004
0f3b4     B0 00 90 AD |  if_e	jmp	#LR__1234
0f3b8     00 12 06 F6 | 	mov	arg01, #0
0f3bc     1C 71 B1 FD | 	call	#__system___getiolock_0540
0f3c0     FD 12 02 F6 | 	mov	arg01, result1
0f3c4     D4 16 B1 FD | 	call	#__system___lockmem
0f3c8     84 01 00 FF 
0f3cc     F4 15 06 F6 | 	mov	arg02, ##@LR__5458
0f3d0     00 12 06 F6 | 	mov	arg01, #0
0f3d4     00 16 06 F6 | 	mov	arg03, #0
0f3d8     B4 23 B1 FD | 	call	#__system___basic_print_string
0f3dc     52 00 00 FF 
0f3e0     14 E4 05 F1 | 	add	objptr, ##42004
0f3e4     F2 14 02 FB | 	rdlong	arg02, objptr
0f3e8     52 00 00 FF 
0f3ec     14 E4 85 F1 | 	sub	objptr, ##42004
0f3f0     00 12 06 F6 | 	mov	arg01, #0
0f3f4     00 16 06 F6 | 	mov	arg03, #0
0f3f8     0A 18 06 F6 | 	mov	arg04, #10
0f3fc     D4 23 B1 FD | 	call	#__system___basic_print_integer
0f400     85 01 00 FF 
0f404     02 14 06 F6 | 	mov	arg02, ##@LR__5459
0f408     00 12 06 F6 | 	mov	arg01, #0
0f40c     00 16 06 F6 | 	mov	arg03, #0
0f410     7C 23 B1 FD | 	call	#__system___basic_print_string
0f414     00 1E 06 F6 | 	mov	local01, #0
0f418     52 00 00 FF 
0f41c     14 E4 05 F1 | 	add	objptr, ##42004
0f420     F2 12 02 FB | 	rdlong	arg01, objptr
0f424     52 00 00 FF 
0f428     14 E4 85 F1 | 	sub	objptr, ##42004
0f42c     34 3D B1 FD | 	call	#__system___strerror
0f430     FD 14 02 F6 | 	mov	arg02, result1
0f434     0F 13 02 F6 | 	mov	arg01, local01
0f438     00 16 06 F6 | 	mov	arg03, #0
0f43c     50 23 B1 FD | 	call	#__system___basic_print_string
0f440     00 12 06 F6 | 	mov	arg01, #0
0f444     0A 14 06 F6 | 	mov	arg02, #10
0f448     00 16 06 F6 | 	mov	arg03, #0
0f44c     E8 22 B1 FD | 	call	#__system___basic_print_char
0f450     00 12 06 F6 | 	mov	arg01, #0
0f454     84 70 B1 FD | 	call	#__system___getiolock_0540
0f458     FD 00 68 FC | 	wrlong	#0, result1
0f45c     09 12 06 F6 | 	mov	arg01, #9
0f460     A8 66 B1 FD | 	call	#__system__close
0f464     74 06 90 FD | 	jmp	#LR__1253
0f468                 | LR__1234
0f468                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f468     04 4E 05 F1 | 	add	fp, #4
0f46c     A7 00 68 FC | 	wrlong	#0, fp
0f470                 | LR__1235
0f470     A7 1E 02 FB | 	rdlong	local01, fp
0f474     01 1E 66 F0 | 	shl	local01, #1
0f478     11 14 06 F6 | 	mov	arg02, #17
0f47c     0F 15 02 F1 | 	add	arg02, local01
0f480     78 4E 05 F1 | 	add	fp, #120
0f484     A7 16 02 F6 | 	mov	arg03, fp
0f488     7C 4E 85 F1 | 	sub	fp, #124
0f48c     09 12 06 F6 | 	mov	arg01, #9
0f490     01 18 06 F6 | 	mov	arg04, #1
0f494     02 1A 06 F6 | 	mov	arg05, #2
0f498     70 24 B1 FD | 	call	#__system___basic_get
0f49c     10 4E 05 F1 | 	add	fp, #16
0f4a0     A7 12 02 FB | 	rdlong	arg01, fp
0f4a4     0B 12 66 F0 | 	shl	arg01, #11
0f4a8     0C 4E 85 F1 | 	sub	fp, #12
0f4ac     A7 1E 02 FB | 	rdlong	local01, fp
0f4b0     01 1E 66 F0 | 	shl	local01, #1
0f4b4     0F 13 02 F1 | 	add	arg01, local01
0f4b8     78 4E 05 F1 | 	add	fp, #120
0f4bc     A7 14 E2 FA | 	rdword	arg02, fp
0f4c0     7C 4E 85 F1 | 	sub	fp, #124
0f4c4     0F 14 66 F7 | 	signx	arg02, #15
0f4c8     E4 E1 B0 FD | 	call	#_psdpoke
0f4cc     04 4E 05 F1 | 	add	fp, #4
0f4d0     A7 1E 02 FB | 	rdlong	local01, fp
0f4d4     01 1E 06 F1 | 	add	local01, #1
0f4d8     A7 1E 62 FC | 	wrlong	local01, fp
0f4dc     02 00 00 FF 
0f4e0     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f4e4     88 FF 9F CD |  if_b	jmp	#LR__1235
0f4e8     04 4E 85 F1 | 	sub	fp, #4
0f4ec                 | '     close #9
0f4ec     09 12 06 F6 | 	mov	arg01, #9
0f4f0     18 66 B1 FD | 	call	#__system__close
0f4f4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f4f4                 | '     return
0f4f4     E4 05 90 FD | 	jmp	#LR__1253
0f4f8                 | LR__1236
0f4f8                 | '     if wptr < ($80000 - 2048) then 
0f4f8     14 4E 05 F1 | 	add	fp, #20
0f4fc     A7 1E 02 FB | 	rdlong	local01, fp
0f500     14 4E 85 F1 | 	sub	fp, #20
0f504     FC 03 00 FF 
0f508     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f50c     70 00 90 3D |  if_ae	jmp	#LR__1238
0f510                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f510     04 4E 05 F1 | 	add	fp, #4
0f514     A7 00 68 FC | 	wrlong	#0, fp
0f518     04 4E 85 F1 | 	sub	fp, #4
0f51c                 | LR__1237
0f51c     10 4E 05 F1 | 	add	fp, #16
0f520     A7 1E 02 FB | 	rdlong	local01, fp
0f524     0B 1E 66 F0 | 	shl	local01, #11
0f528     0C 4E 85 F1 | 	sub	fp, #12
0f52c     A7 1A 02 FB | 	rdlong	arg05, fp
0f530     0D 19 02 F6 | 	mov	arg04, arg05
0f534     01 18 66 F0 | 	shl	arg04, #1
0f538     0C 1F 02 F1 | 	add	local01, arg04
0f53c     10 4E 05 F1 | 	add	fp, #16
0f540     A7 12 02 FB | 	rdlong	arg01, fp
0f544     14 4E 85 F1 | 	sub	fp, #20
0f548     01 1A 66 F0 | 	shl	arg05, #1
0f54c     0D 13 02 F1 | 	add	arg01, arg05
0f550     09 15 E2 FA | 	rdword	arg02, arg01
0f554     0F 13 02 F6 | 	mov	arg01, local01
0f558     54 E1 B0 FD | 	call	#_psdpoke
0f55c     04 4E 05 F1 | 	add	fp, #4
0f560     A7 1E 02 FB | 	rdlong	local01, fp
0f564     01 1E 06 F1 | 	add	local01, #1
0f568     A7 1E 62 FC | 	wrlong	local01, fp
0f56c     04 4E 85 F1 | 	sub	fp, #4
0f570     02 00 00 FF 
0f574     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f578     A0 FF 9F CD |  if_b	jmp	#LR__1237
0f57c     5C 05 90 FD | 	jmp	#LR__1253
0f580                 | LR__1238
0f580                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 00 68 FC | 	wrlong	#0, fp
0f588     04 4E 85 F1 | 	sub	fp, #4
0f58c                 | LR__1239
0f58c     10 4E 05 F1 | 	add	fp, #16
0f590     A7 1E 02 FB | 	rdlong	local01, fp
0f594     0B 1E 66 F0 | 	shl	local01, #11
0f598     0C 4E 85 F1 | 	sub	fp, #12
0f59c     A7 1A 02 FB | 	rdlong	arg05, fp
0f5a0     0D 19 02 F6 | 	mov	arg04, arg05
0f5a4     01 18 66 F0 | 	shl	arg04, #1
0f5a8     0C 1F 02 F1 | 	add	local01, arg04
0f5ac     10 4E 05 F1 | 	add	fp, #16
0f5b0     A7 12 02 FB | 	rdlong	arg01, fp
0f5b4     14 4E 85 F1 | 	sub	fp, #20
0f5b8     01 1A 66 F0 | 	shl	arg05, #1
0f5bc     0D 13 02 F1 | 	add	arg01, arg05
0f5c0     2C E2 B0 FD | 	call	#_psdpeek
0f5c4     FD 14 02 F6 | 	mov	arg02, result1
0f5c8     0F 13 02 F6 | 	mov	arg01, local01
0f5cc     E0 E0 B0 FD | 	call	#_psdpoke
0f5d0     04 4E 05 F1 | 	add	fp, #4
0f5d4     A7 1E 02 FB | 	rdlong	local01, fp
0f5d8     01 1E 06 F1 | 	add	local01, #1
0f5dc     A7 1E 62 FC | 	wrlong	local01, fp
0f5e0     04 4E 85 F1 | 	sub	fp, #4
0f5e4     02 00 00 FF 
0f5e8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f5ec     9C FF 9F CD |  if_b	jmp	#LR__1239
0f5f0                 | '     return 
0f5f0     E8 04 90 FD | 	jmp	#LR__1253
0f5f4                 | '   
0f5f4                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f5f4                 | '   return
0f5f4                 | LR__1240
0f5f4                 | ' for i=0 to 15 : harm(i)=0: next i  
0f5f4     04 4E 05 F1 | 	add	fp, #4
0f5f8     A7 00 68 FC | 	wrlong	#0, fp
0f5fc     97 16 48 FB | 	callpa	#(@LR__1242-@LR__1241)>>2,fcache_load_ptr_
0f600                 | LR__1241
0f600     A7 1E 02 FB | 	rdlong	local01, fp
0f604     02 1E 66 F0 | 	shl	local01, #2
0f608     38 4E 05 F1 | 	add	fp, #56
0f60c     A7 1E 02 F1 | 	add	local01, fp
0f610     0F 01 68 FC | 	wrlong	#0, local01
0f614     38 4E 85 F1 | 	sub	fp, #56
0f618     A7 1E 02 FB | 	rdlong	local01, fp
0f61c     01 1E 06 F1 | 	add	local01, #1
0f620     A7 1E 62 FC | 	wrlong	local01, fp
0f624     10 1E 56 F2 | 	cmps	local01, #16 wc
0f628     D4 FF 9F CD |  if_b	jmp	#LR__1241
0f62c                 | LR__1242
0f62c     04 4E 85 F1 | 	sub	fp, #4
0f630                 | ' for i=numpar to 2 step -1 
0f630     A7 1E 02 FB | 	rdlong	local01, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 1E 62 FC | 	wrlong	local01, fp
0f63c     04 4E 85 F1 | 	sub	fp, #4
0f640                 | LR__1243
0f640     A0 C4 BF FD | 	call	#_pop
0f644     2C 4E 05 F1 | 	add	fp, #44
0f648     A7 FA 61 FC | 	wrlong	result1, fp
0f64c     04 4E 05 F1 | 	add	fp, #4
0f650     A7 FC 61 FC | 	wrlong	result2, fp
0f654     04 4E 05 F1 | 	add	fp, #4
0f658     A7 FE 61 FC | 	wrlong	result3, fp
0f65c     30 4E 85 F1 | 	sub	fp, #48
0f660     A7 1E 02 FB | 	rdlong	local01, fp
0f664     02 1E 86 F1 | 	sub	local01, #2
0f668     02 1E 66 F0 | 	shl	local01, #2
0f66c     38 4E 05 F1 | 	add	fp, #56
0f670     A7 1E 02 F1 | 	add	local01, fp
0f674     10 4E 85 F1 | 	sub	fp, #16
0f678     A7 12 02 F6 | 	mov	arg01, fp
0f67c     2C 4E 85 F1 | 	sub	fp, #44
0f680     E0 65 B0 FD | 	call	#_converttofloat
0f684     0F FB 61 FC | 	wrlong	result1, local01
0f688     04 4E 05 F1 | 	add	fp, #4
0f68c     A7 1E 02 FB | 	rdlong	local01, fp
0f690     01 1E 86 F1 | 	sub	local01, #1
0f694     A7 1E 62 FC | 	wrlong	local01, fp
0f698     04 4E 85 F1 | 	sub	fp, #4
0f69c     02 1E 56 F2 | 	cmps	local01, #2 wc
0f6a0     9C FF 9F 3D |  if_ae	jmp	#LR__1243
0f6a4     3C C4 BF FD | 	call	#_pop
0f6a8     FF 1E 02 F6 | 	mov	local01, result3
0f6ac     2C 4E 05 F1 | 	add	fp, #44
0f6b0     A7 FA 61 FC | 	wrlong	result1, fp
0f6b4     04 4E 05 F1 | 	add	fp, #4
0f6b8     A7 FC 61 FC | 	wrlong	result2, fp
0f6bc     04 4E 05 F1 | 	add	fp, #4
0f6c0     A7 1E 62 FC | 	wrlong	local01, fp
0f6c4     08 4E 85 F1 | 	sub	fp, #8
0f6c8     A7 12 02 F6 | 	mov	arg01, fp
0f6cc     2C 4E 85 F1 | 	sub	fp, #44
0f6d0     D4 64 B0 FD | 	call	#_converttoint
0f6d4     10 4E 05 F1 | 	add	fp, #16
0f6d8     A7 FA 61 FC | 	wrlong	result1, fp
0f6dc                 | ' t1=pop()
0f6dc                 | ' channel=converttoint(t1) : : if channel>31 then return
0f6dc     FD 1E 02 F6 | 	mov	local01, result1
0f6e0     10 4E 85 F1 | 	sub	fp, #16
0f6e4     20 1E 56 F2 | 	cmps	local01, #32 wc
0f6e8     F0 03 90 3D |  if_ae	jmp	#LR__1253
0f6ec     20 4E 05 F1 | 	add	fp, #32
0f6f0     A7 00 68 FC | 	wrlong	#0, fp
0f6f4                 | ' max=0
0f6f4                 | ' if harm(0)<0 then
0f6f4     1C 4E 05 F1 | 	add	fp, #28
0f6f8     A7 12 02 FB | 	rdlong	arg01, fp
0f6fc     3C 4E 85 F1 | 	sub	fp, #60
0f700     00 14 06 F6 | 	mov	arg02, #0
0f704     01 16 06 F6 | 	mov	arg03, #1
0f708     78 43 B1 FD | 	call	#__system___float_cmp
0f70c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f710     04 01 90 3D |  if_ae	jmp	#LR__1246
0f714     3C 4E 05 F1 | 	add	fp, #60
0f718     A7 FA 01 FB | 	rdlong	result1, fp
0f71c     1F FA 05 F4 | 	bitl	result1, #31
0f720     24 4E 85 F1 | 	sub	fp, #36
0f724     A7 FA 61 FC | 	wrlong	result1, fp
0f728     28 4E 05 F1 | 	add	fp, #40
0f72c     A7 FA 01 FB | 	rdlong	result1, fp
0f730     1F FA 05 F4 | 	bitl	result1, #31
0f734     24 4E 85 F1 | 	sub	fp, #36
0f738     A7 FA 61 FC | 	wrlong	result1, fp
0f73c     20 4E 05 F1 | 	add	fp, #32
0f740     00 C0 9F FF 
0f744     A7 00 68 FC | 	wrlong	##1065353216, fp
0f748     24 4E 85 F1 | 	sub	fp, #36
0f74c     A7 1E 02 FB | 	rdlong	local01, fp
0f750     28 4E 05 F1 | 	add	fp, #40
0f754     A7 1E 62 FC | 	wrlong	local01, fp
0f758     24 4E 85 F1 | 	sub	fp, #36
0f75c     A7 1E 02 FB | 	rdlong	local01, fp
0f760     28 4E 05 F1 | 	add	fp, #40
0f764     A7 1E 62 FC | 	wrlong	local01, fp
0f768                 | '   harm(0)=1
0f768                 | '   harm(1)=even
0f768                 | '   harm(2)=odd
0f768                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f768     40 4E 85 F1 | 	sub	fp, #64
0f76c     A7 06 68 FC | 	wrlong	#3, fp
0f770                 | LR__1244
0f770     A7 1A 02 FB | 	rdlong	arg05, fp
0f774     0D 21 02 F6 | 	mov	local02, arg05
0f778     02 20 66 F0 | 	shl	local02, #2
0f77c     38 4E 05 F1 | 	add	fp, #56
0f780     A7 20 02 F1 | 	add	local02, fp
0f784     02 1A 86 F1 | 	sub	arg05, #2
0f788     02 1A 66 F0 | 	shl	arg05, #2
0f78c     A7 1A 02 F1 | 	add	arg05, fp
0f790     0D 13 02 FB | 	rdlong	arg01, arg05
0f794     24 4E 85 F1 | 	sub	fp, #36
0f798     A7 14 02 FB | 	rdlong	arg02, fp
0f79c     18 4E 85 F1 | 	sub	fp, #24
0f7a0     AC 3E B1 FD | 	call	#__system___float_mul
0f7a4     10 FB 61 FC | 	wrlong	result1, local02
0f7a8     04 4E 05 F1 | 	add	fp, #4
0f7ac     A7 22 02 FB | 	rdlong	local03, fp
0f7b0     02 22 06 F1 | 	add	local03, #2
0f7b4     A7 22 62 FC | 	wrlong	local03, fp
0f7b8     10 22 56 F2 | 	cmps	local03, #16 wc
0f7bc     B0 FF 9F CD |  if_b	jmp	#LR__1244
0f7c0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f7c0     A7 08 68 FC | 	wrlong	#4, fp
0f7c4                 | LR__1245
0f7c4     A7 22 02 FB | 	rdlong	local03, fp
0f7c8     11 21 02 F6 | 	mov	local02, local03
0f7cc     02 20 66 F0 | 	shl	local02, #2
0f7d0     38 4E 05 F1 | 	add	fp, #56
0f7d4     A7 20 02 F1 | 	add	local02, fp
0f7d8     02 22 86 F1 | 	sub	local03, #2
0f7dc     02 22 66 F0 | 	shl	local03, #2
0f7e0     A7 22 02 F1 | 	add	local03, fp
0f7e4     11 13 02 FB | 	rdlong	arg01, local03
0f7e8     20 4E 85 F1 | 	sub	fp, #32
0f7ec     A7 14 02 FB | 	rdlong	arg02, fp
0f7f0     1C 4E 85 F1 | 	sub	fp, #28
0f7f4     58 3E B1 FD | 	call	#__system___float_mul
0f7f8     10 FB 61 FC | 	wrlong	result1, local02
0f7fc     04 4E 05 F1 | 	add	fp, #4
0f800     A7 22 02 FB | 	rdlong	local03, fp
0f804     02 22 06 F1 | 	add	local03, #2
0f808     A7 22 62 FC | 	wrlong	local03, fp
0f80c     0F 22 56 F2 | 	cmps	local03, #15 wc
0f810     B0 FF 9F CD |  if_b	jmp	#LR__1245
0f814     04 4E 85 F1 | 	sub	fp, #4
0f818                 | LR__1246
0f818                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f818     3C 4E 05 F1 | 	add	fp, #60
0f81c     A7 12 02 FB | 	rdlong	arg01, fp
0f820     3C 4E 85 F1 | 	sub	fp, #60
0f824     00 14 06 F6 | 	mov	arg02, #0
0f828     01 16 66 F6 | 	neg	arg03, #1
0f82c     54 42 B1 FD | 	call	#__system___float_cmp
0f830     00 FA 55 F2 | 	cmps	result1, #0 wc
0f834     A4 02 90 CD |  if_b	jmp	#LR__1252
0f838                 | '   for i=0 to 1023
0f838     04 4E 05 F1 | 	add	fp, #4
0f83c     A7 00 68 FC | 	wrlong	#0, fp
0f840     04 4E 85 F1 | 	sub	fp, #4
0f844                 | LR__1247
0f844     24 4E 05 F1 | 	add	fp, #36
0f848     A7 00 68 FC | 	wrlong	#0, fp
0f84c                 | '     spl=0
0f84c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f84c     1C 4E 85 F1 | 	sub	fp, #28
0f850     A7 00 68 FC | 	wrlong	#0, fp
0f854                 | LR__1248
0f854     A7 20 02 FB | 	rdlong	local02, fp
0f858     02 20 66 F0 | 	shl	local02, #2
0f85c     34 4E 05 F1 | 	add	fp, #52
0f860     A7 20 02 F1 | 	add	local02, fp
0f864     10 23 02 FB | 	rdlong	local03, local02
0f868     87 E4 1D FF 
0f86c     DB 21 06 F6 | 	mov	local02, ##1003032539
0f870     38 4E 85 F1 | 	sub	fp, #56
0f874     A7 12 02 FB | 	rdlong	arg01, fp
0f878     04 4E 85 F1 | 	sub	fp, #4
0f87c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f880     1F 24 C6 C9 |  if_b	decod	local04, #31
0f884     00 24 06 36 |  if_ae	mov	local04, #0
0f888     C0 39 B1 FD | 	call	#__system___float_fromuns
0f88c     12 FB 61 F5 | 	xor	result1, local04
0f890     FD 14 02 F6 | 	mov	arg02, result1
0f894     10 13 02 F6 | 	mov	arg01, local02
0f898     B4 3D B1 FD | 	call	#__system___float_mul
0f89c     FD 20 02 F6 | 	mov	local02, result1
0f8a0     08 4E 05 F1 | 	add	fp, #8
0f8a4     A7 12 02 FB | 	rdlong	arg01, fp
0f8a8     08 4E 85 F1 | 	sub	fp, #8
0f8ac     01 12 06 F1 | 	add	arg01, #1
0f8b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8b4     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8b8     00 24 06 36 |  if_ae	mov	local04, #0
0f8bc     8C 39 B1 FD | 	call	#__system___float_fromuns
0f8c0     12 FB 61 F5 | 	xor	result1, local04
0f8c4     FD 14 02 F6 | 	mov	arg02, result1
0f8c8     10 13 02 F6 | 	mov	arg01, local02
0f8cc     80 3D B1 FD | 	call	#__system___float_mul
0f8d0     FD 12 02 F6 | 	mov	arg01, result1
0f8d4     B4 46 B1 FD | 	call	#__system____builtin_sinf
0f8d8     FD 14 02 F6 | 	mov	arg02, result1
0f8dc     11 13 02 F6 | 	mov	arg01, local03
0f8e0     6C 3D B1 FD | 	call	#__system___float_mul
0f8e4     FD 14 02 F6 | 	mov	arg02, result1
0f8e8     24 4E 05 F1 | 	add	fp, #36
0f8ec     A7 12 02 FB | 	rdlong	arg01, fp
0f8f0     24 4E 85 F1 | 	sub	fp, #36
0f8f4     88 39 B1 FD | 	call	#__system___float_add
0f8f8     24 4E 05 F1 | 	add	fp, #36
0f8fc     A7 FA 61 FC | 	wrlong	result1, fp
0f900     1C 4E 85 F1 | 	sub	fp, #28
0f904     A7 16 02 FB | 	rdlong	arg03, fp
0f908     01 16 06 F1 | 	add	arg03, #1
0f90c     A7 16 62 FC | 	wrlong	arg03, fp
0f910     10 16 56 F2 | 	cmps	arg03, #16 wc
0f914     3C FF 9F CD |  if_b	jmp	#LR__1248
0f918                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f918     1C 4E 05 F1 | 	add	fp, #28
0f91c     A7 12 02 FB | 	rdlong	arg01, fp
0f920     1F 12 06 F4 | 	bitl	arg01, #31
0f924     04 4E 85 F1 | 	sub	fp, #4
0f928     A7 14 02 FB | 	rdlong	arg02, fp
0f92c     20 4E 85 F1 | 	sub	fp, #32
0f930     01 16 66 F6 | 	neg	arg03, #1
0f934     4C 41 B1 FD | 	call	#__system___float_cmp
0f938     01 FA 55 F2 | 	cmps	result1, #1 wc
0f93c     18 00 90 CD |  if_b	jmp	#LR__1249
0f940     24 4E 05 F1 | 	add	fp, #36
0f944     A7 FA 01 FB | 	rdlong	result1, fp
0f948     1F FA 05 F4 | 	bitl	result1, #31
0f94c     04 4E 85 F1 | 	sub	fp, #4
0f950     A7 FA 61 FC | 	wrlong	result1, fp
0f954     20 4E 85 F1 | 	sub	fp, #32
0f958                 | LR__1249
0f958     04 4E 05 F1 | 	add	fp, #4
0f95c     A7 22 02 FB | 	rdlong	local03, fp
0f960     01 22 06 F1 | 	add	local03, #1
0f964     A7 22 62 FC | 	wrlong	local03, fp
0f968     04 4E 85 F1 | 	sub	fp, #4
0f96c     02 00 00 FF 
0f970     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f974     CC FE 9F CD |  if_b	jmp	#LR__1247
0f978                 | '   for i=0 to 1023
0f978     04 4E 05 F1 | 	add	fp, #4
0f97c     A7 00 68 FC | 	wrlong	#0, fp
0f980     04 4E 85 F1 | 	sub	fp, #4
0f984                 | LR__1250
0f984     24 4E 05 F1 | 	add	fp, #36
0f988     A7 00 68 FC | 	wrlong	#0, fp
0f98c                 | '     spl=0
0f98c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f98c     1C 4E 85 F1 | 	sub	fp, #28
0f990     A7 00 68 FC | 	wrlong	#0, fp
0f994                 | LR__1251
0f994     A7 22 02 FB | 	rdlong	local03, fp
0f998     02 22 66 F0 | 	shl	local03, #2
0f99c     34 4E 05 F1 | 	add	fp, #52
0f9a0     A7 22 02 F1 | 	add	local03, fp
0f9a4     11 23 02 FB | 	rdlong	local03, local03
0f9a8     1C 4E 85 F1 | 	sub	fp, #28
0f9ac     A7 14 02 FB | 	rdlong	arg02, fp
0f9b0     20 4E 85 F1 | 	sub	fp, #32
0f9b4     58 7F 23 FF 
0f9b8     00 12 06 F6 | 	mov	arg01, ##1191096320
0f9bc     94 3E B1 FD | 	call	#__system___float_div
0f9c0     FD 14 02 F6 | 	mov	arg02, result1
0f9c4     11 13 02 F6 | 	mov	arg01, local03
0f9c8     84 3C B1 FD | 	call	#__system___float_mul
0f9cc     FD 22 02 F6 | 	mov	local03, result1
0f9d0     87 E4 1D FF 
0f9d4     DB 21 06 F6 | 	mov	local02, ##1003032539
0f9d8     04 4E 05 F1 | 	add	fp, #4
0f9dc     A7 12 02 FB | 	rdlong	arg01, fp
0f9e0     04 4E 85 F1 | 	sub	fp, #4
0f9e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9e8     1F 24 C6 C9 |  if_b	decod	local04, #31
0f9ec     00 24 06 36 |  if_ae	mov	local04, #0
0f9f0     58 38 B1 FD | 	call	#__system___float_fromuns
0f9f4     12 FB 61 F5 | 	xor	result1, local04
0f9f8     FD 14 02 F6 | 	mov	arg02, result1
0f9fc     10 13 02 F6 | 	mov	arg01, local02
0fa00     4C 3C B1 FD | 	call	#__system___float_mul
0fa04     FD 20 02 F6 | 	mov	local02, result1
0fa08     08 4E 05 F1 | 	add	fp, #8
0fa0c     A7 12 02 FB | 	rdlong	arg01, fp
0fa10     08 4E 85 F1 | 	sub	fp, #8
0fa14     01 12 06 F1 | 	add	arg01, #1
0fa18     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa1c     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa20     00 24 06 36 |  if_ae	mov	local04, #0
0fa24     24 38 B1 FD | 	call	#__system___float_fromuns
0fa28     12 FB 61 F5 | 	xor	result1, local04
0fa2c     FD 14 02 F6 | 	mov	arg02, result1
0fa30     10 13 02 F6 | 	mov	arg01, local02
0fa34     18 3C B1 FD | 	call	#__system___float_mul
0fa38     FD 12 02 F6 | 	mov	arg01, result1
0fa3c     4C 45 B1 FD | 	call	#__system____builtin_sinf
0fa40     FD 14 02 F6 | 	mov	arg02, result1
0fa44     11 13 02 F6 | 	mov	arg01, local03
0fa48     04 3C B1 FD | 	call	#__system___float_mul
0fa4c     FD 14 02 F6 | 	mov	arg02, result1
0fa50     24 4E 05 F1 | 	add	fp, #36
0fa54     A7 12 02 FB | 	rdlong	arg01, fp
0fa58     24 4E 85 F1 | 	sub	fp, #36
0fa5c     20 38 B1 FD | 	call	#__system___float_add
0fa60     24 4E 05 F1 | 	add	fp, #36
0fa64     A7 FA 61 FC | 	wrlong	result1, fp
0fa68     1C 4E 85 F1 | 	sub	fp, #28
0fa6c     A7 22 02 FB | 	rdlong	local03, fp
0fa70     01 22 06 F1 | 	add	local03, #1
0fa74     A7 22 62 FC | 	wrlong	local03, fp
0fa78     10 22 56 F2 | 	cmps	local03, #16 wc
0fa7c     14 FF 9F CD |  if_b	jmp	#LR__1251
0fa80     08 4E 05 F1 | 	add	fp, #8
0fa84     A7 22 02 FB | 	rdlong	local03, fp
0fa88     0B 22 66 F0 | 	shl	local03, #11
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     A7 20 02 FB | 	rdlong	local02, fp
0fa94     01 20 66 F0 | 	shl	local02, #1
0fa98     10 23 02 F1 | 	add	local03, local02
0fa9c     20 4E 05 F1 | 	add	fp, #32
0faa0     A7 12 02 FB | 	rdlong	arg01, fp
0faa4     24 4E 85 F1 | 	sub	fp, #36
0faa8     01 14 06 F6 | 	mov	arg02, #1
0faac     68 40 B1 FD | 	call	#__system___float_tointeger
0fab0     FD 14 02 F6 | 	mov	arg02, result1
0fab4     11 13 02 F6 | 	mov	arg01, local03
0fab8     F4 DB B0 FD | 	call	#_psdpoke
0fabc     04 4E 05 F1 | 	add	fp, #4
0fac0     A7 22 02 FB | 	rdlong	local03, fp
0fac4     01 22 06 F1 | 	add	local03, #1
0fac8     A7 22 62 FC | 	wrlong	local03, fp
0facc     04 4E 85 F1 | 	sub	fp, #4
0fad0     02 00 00 FF 
0fad4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fad8     A8 FE 9F CD |  if_b	jmp	#LR__1250
0fadc                 | LR__1252
0fadc                 | LR__1253
0fadc     A7 F0 03 F6 | 	mov	ptra, fp
0fae0     B2 00 A0 FD | 	call	#popregs_
0fae4                 | _do_defsnd_ret
0fae4     2D 00 64 FD | 	ret
0fae8                 | 
0fae8                 | ' 
0fae8                 | ' ' ---------------  List the program. 
0fae8                 | ' 
0fae8                 | ' sub do_list
0fae8                 | _do_list
0fae8     02 4A 05 F6 | 	mov	COUNT_, #2
0faec     A8 00 A0 FD | 	call	#pushregs_
0faf0     B8 F0 07 F1 | 	add	ptra, #184
0faf4     04 4E 05 F1 | 	add	fp, #4
0faf8     A7 00 68 FC | 	wrlong	#0, fp
0fafc     04 4E 05 F1 | 	add	fp, #4
0fb00     FF FF BF FF 
0fb04     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fb08     08 4E 85 F1 | 	sub	fp, #8
0fb0c     4A 00 00 FF 
0fb10     80 E4 05 F1 | 	add	objptr, ##38016
0fb14     F2 1E 02 FB | 	rdlong	local01, objptr
0fb18     0F 17 02 F6 | 	mov	arg03, local01
0fb1c     01 16 66 F0 | 	shl	arg03, #1
0fb20     0F 17 02 F1 | 	add	arg03, local01
0fb24     02 16 66 F0 | 	shl	arg03, #2
0fb28     03 00 00 FF 
0fb2c     04 E4 85 F1 | 	sub	objptr, ##1540
0fb30     F2 16 02 F1 | 	add	arg03, objptr
0fb34     0B 17 02 FB | 	rdlong	arg03, arg03
0fb38     A7 16 62 FC | 	wrlong	arg03, fp
0fb3c                 | ' 
0fb3c                 | ' startline=0 : endline=$7FFFFFFF
0fb3c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb3c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fb3c     01 16 0E F2 | 	cmp	arg03, #1 wz
0fb40     47 00 00 FF 
0fb44     7C E4 85 F1 | 	sub	objptr, ##36476
0fb48     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fb4c     94 BF BF FD | 	call	#_pop
0fb50     FF 1E 02 F6 | 	mov	local01, result3
0fb54     0C 4E 05 F1 | 	add	fp, #12
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c     04 4E 05 F1 | 	add	fp, #4
0fb60     A7 FC 61 FC | 	wrlong	result2, fp
0fb64     04 4E 05 F1 | 	add	fp, #4
0fb68     A7 1E 62 FC | 	wrlong	local01, fp
0fb6c     08 4E 85 F1 | 	sub	fp, #8
0fb70     A7 12 02 F6 | 	mov	arg01, fp
0fb74     0C 4E 85 F1 | 	sub	fp, #12
0fb78     2C 60 B0 FD | 	call	#_converttoint
0fb7c     04 4E 05 F1 | 	add	fp, #4
0fb80     A7 FA 61 FC | 	wrlong	result1, fp
0fb84     04 4E 85 F1 | 	sub	fp, #4
0fb88                 | LR__1260
0fb88                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fb88     A7 16 02 FB | 	rdlong	arg03, fp
0fb8c     02 16 0E F2 | 	cmp	arg03, #2 wz
0fb90     7C 00 90 5D |  if_ne	jmp	#LR__1261
0fb94     4C BF BF FD | 	call	#_pop
0fb98     FF 1E 02 F6 | 	mov	local01, result3
0fb9c     0C 4E 05 F1 | 	add	fp, #12
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     04 4E 05 F1 | 	add	fp, #4
0fba8     A7 FC 61 FC | 	wrlong	result2, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 1E 62 FC | 	wrlong	local01, fp
0fbb4     08 4E 85 F1 | 	sub	fp, #8
0fbb8     A7 12 02 F6 | 	mov	arg01, fp
0fbbc     0C 4E 85 F1 | 	sub	fp, #12
0fbc0     E4 5F B0 FD | 	call	#_converttoint
0fbc4     FD 1E 02 F6 | 	mov	local01, result1
0fbc8     08 4E 05 F1 | 	add	fp, #8
0fbcc     A7 1E 62 FC | 	wrlong	local01, fp
0fbd0     08 4E 85 F1 | 	sub	fp, #8
0fbd4     0C BF BF FD | 	call	#_pop
0fbd8     FF 1E 02 F6 | 	mov	local01, result3
0fbdc     0C 4E 05 F1 | 	add	fp, #12
0fbe0     A7 FA 61 FC | 	wrlong	result1, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 FC 61 FC | 	wrlong	result2, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 1E 62 FC | 	wrlong	local01, fp
0fbf4     08 4E 85 F1 | 	sub	fp, #8
0fbf8     A7 12 02 F6 | 	mov	arg01, fp
0fbfc     0C 4E 85 F1 | 	sub	fp, #12
0fc00     A4 5F B0 FD | 	call	#_converttoint
0fc04     04 4E 05 F1 | 	add	fp, #4
0fc08     A7 FA 61 FC | 	wrlong	result1, fp
0fc0c     04 4E 85 F1 | 	sub	fp, #4
0fc10                 | LR__1261
0fc10                 | ' 
0fc10                 | ' 
0fc10                 | ' print
0fc10     00 12 06 F6 | 	mov	arg01, #0
0fc14     C4 68 B1 FD | 	call	#__system___getiolock_0540
0fc18     FD 12 02 F6 | 	mov	arg01, result1
0fc1c     7C 0E B1 FD | 	call	#__system___lockmem
0fc20     00 12 06 F6 | 	mov	arg01, #0
0fc24     0A 14 06 F6 | 	mov	arg02, #10
0fc28     00 16 06 F6 | 	mov	arg03, #0
0fc2c     08 1B B1 FD | 	call	#__system___basic_print_char
0fc30     00 12 06 F6 | 	mov	arg01, #0
0fc34     A4 68 B1 FD | 	call	#__system___getiolock_0540
0fc38     FD 00 68 FC | 	wrlong	#0, result1
0fc3c     4A 00 00 FF 
0fc40     84 E4 05 F1 | 	add	objptr, ##38020
0fc44     F2 20 02 FB | 	rdlong	local02, objptr
0fc48     07 00 00 FF 
0fc4c     88 E5 05 F1 | 	add	objptr, ##3976
0fc50     F2 20 62 FC | 	wrlong	local02, objptr
0fc54     52 00 00 FF 
0fc58     0C E4 85 F1 | 	sub	objptr, ##41996
0fc5c                 | ' do 
0fc5c                 | LR__1262
0fc5c     20 4E 05 F1 | 	add	fp, #32
0fc60     A7 12 02 F6 | 	mov	arg01, fp
0fc64     20 4E 85 F1 | 	sub	fp, #32
0fc68     52 00 00 FF 
0fc6c     0C E4 05 F1 | 	add	objptr, ##41996
0fc70     F2 14 02 FB | 	rdlong	arg02, objptr
0fc74     18 16 06 F6 | 	mov	arg03, #24
0fc78     46 00 00 FF 
0fc7c     40 E5 85 F1 | 	sub	objptr, ##36160
0fc80     D8 01 B1 FD | 	call	#_psram_spin2_read1
0fc84     0B 00 00 FF 
0fc88     CC E4 85 F1 | 	sub	objptr, ##5836
0fc8c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fc8c                 | '   
0fc8c                 | '   if header(0)<> $FFFFFFFF then
0fc8c     20 4E 05 F1 | 	add	fp, #32
0fc90     A7 20 02 FB | 	rdlong	local02, fp
0fc94     20 4E 85 F1 | 	sub	fp, #32
0fc98     FF FF 7F FF 
0fc9c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fca0     A8 00 90 AD |  if_e	jmp	#LR__1264
0fca4     38 4E 05 F1 | 	add	fp, #56
0fca8     3F 16 06 F6 | 	mov	arg03, #63
0fcac     28 16 62 FD | 	setq	arg03
0fcb0     A7 00 68 FC | 	wrlong	#0, fp
0fcb4     A7 12 02 F6 | 	mov	arg01, fp
0fcb8     10 4E 85 F1 | 	sub	fp, #16
0fcbc     A7 14 02 FB | 	rdlong	arg02, fp
0fcc0     04 4E 05 F1 | 	add	fp, #4
0fcc4     A7 16 02 FB | 	rdlong	arg03, fp
0fcc8     2C 4E 85 F1 | 	sub	fp, #44
0fccc     0B 00 00 FF 
0fcd0     CC E4 05 F1 | 	add	objptr, ##5836
0fcd4     84 01 B1 FD | 	call	#_psram_spin2_read1
0fcd8     0B 00 00 FF 
0fcdc     CC E4 85 F1 | 	sub	objptr, ##5836
0fce0                 | '     longfill(linebuf,0,64)
0fce0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fce0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fce0     20 4E 05 F1 | 	add	fp, #32
0fce4     A7 20 02 FB | 	rdlong	local02, fp
0fce8     1C 4E 85 F1 | 	sub	fp, #28
0fcec     A7 1E 02 FB | 	rdlong	local01, fp
0fcf0     04 4E 85 F1 | 	sub	fp, #4
0fcf4     0F 21 52 F2 | 	cmps	local02, local01 wc
0fcf8     30 00 90 CD |  if_b	jmp	#LR__1263
0fcfc     20 4E 05 F1 | 	add	fp, #32
0fd00     A7 20 02 FB | 	rdlong	local02, fp
0fd04     18 4E 85 F1 | 	sub	fp, #24
0fd08     A7 16 02 FB | 	rdlong	arg03, fp
0fd0c     08 4E 85 F1 | 	sub	fp, #8
0fd10     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fd14     14 00 90 1D |  if_a	jmp	#LR__1263
0fd18     38 4E 05 F1 | 	add	fp, #56
0fd1c     A7 12 02 F6 | 	mov	arg01, fp
0fd20     38 4E 85 F1 | 	sub	fp, #56
0fd24                 | ' 
0fd24                 | ' write(text)
0fd24     58 F8 B0 FD | 	call	#_hg010b_spin2_write
0fd28                 | ' crlf
0fd28     54 FD B0 FD | 	call	#_hg010b_spin2_crlf
0fd2c                 | LR__1263
0fd2c     34 4E 05 F1 | 	add	fp, #52
0fd30     A7 20 02 FB | 	rdlong	local02, fp
0fd34     34 4E 85 F1 | 	sub	fp, #52
0fd38     52 00 00 FF 
0fd3c     0C E4 05 F1 | 	add	objptr, ##41996
0fd40     F2 20 62 FC | 	wrlong	local02, objptr
0fd44     52 00 00 FF 
0fd48     0C E4 85 F1 | 	sub	objptr, ##41996
0fd4c                 | LR__1264
0fd4c     34 4E 05 F1 | 	add	fp, #52
0fd50     A7 20 02 FB | 	rdlong	local02, fp
0fd54     34 4E 85 F1 | 	sub	fp, #52
0fd58     FF FF 3F FF 
0fd5c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fd60     20 4E 05 51 |  if_ne	add	fp, #32
0fd64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fd68     20 4E 85 51 |  if_ne	sub	fp, #32
0fd6c     FF FF 7F 5F 
0fd70     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fd74     E4 FE 9F 5D |  if_ne	jmp	#LR__1262
0fd78     A7 F0 03 F6 | 	mov	ptra, fp
0fd7c     B2 00 A0 FD | 	call	#popregs_
0fd80                 | _do_list_ret
0fd80     2D 00 64 FD | 	ret
0fd84                 | 
0fd84                 | ' 
0fd84                 | ' '---------------- Clear the program
0fd84                 | ' 
0fd84                 | ' sub do_new
0fd84                 | _do_new
0fd84     03 4A 05 F6 | 	mov	COUNT_, #3
0fd88     A8 00 A0 FD | 	call	#pushregs_
0fd8c     13 12 C6 F9 | 	decod	arg01, #19
0fd90     01 14 66 F6 | 	neg	arg02, #1
0fd94     D0 D8 B0 FD | 	call	#_pslpoke
0fd98     35 00 00 FF 
0fd9c     08 E4 05 F1 | 	add	objptr, ##27144
0fda0     F2 00 68 FC | 	wrlong	#0, objptr
0fda4                 | ' 
0fda4                 | ' pslpoke(memlo,$FFFFFFFF)
0fda4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fda4     00 1E 06 F6 | 	mov	local01, #0
0fda8     20 00 00 FF 
0fdac     10 E4 85 F1 | 	sub	objptr, ##16400
0fdb0     97 1E 48 FB | 	callpa	#(@LR__1271-@LR__1270)>>2,fcache_load_ptr_
0fdb4                 | LR__1270
0fdb4     0F 17 02 F6 | 	mov	arg03, local01
0fdb8     04 16 66 F0 | 	shl	arg03, #4
0fdbc     F2 16 02 F1 | 	add	arg03, objptr
0fdc0     85 01 00 FF 
0fdc4     05 14 06 F6 | 	mov	arg02, ##@LR__5460
0fdc8     0B 15 62 FC | 	wrlong	arg02, arg03
0fdcc     0F 21 02 F6 | 	mov	local02, local01
0fdd0     04 20 66 F0 | 	shl	local02, #4
0fdd4     F2 20 02 F1 | 	add	local02, objptr
0fdd8     0C 20 06 F1 | 	add	local02, #12
0fddc     10 01 68 FC | 	wrlong	#0, local02
0fde0     01 1E 06 F1 | 	add	local01, #1
0fde4     02 00 00 FF 
0fde8     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fdec     C4 FF 9F CD |  if_b	jmp	#LR__1270
0fdf0                 | LR__1271
0fdf0     35 00 00 FF 
0fdf4     8C E4 05 F1 | 	add	objptr, ##27276
0fdf8     00 04 80 FF 
0fdfc     F2 00 68 FC | 	wrlong	##524288, objptr
0fe00     06 00 00 FF 
0fe04     30 E4 05 F1 | 	add	objptr, ##3120
0fe08     00 04 80 FF 
0fe0c     F2 00 68 FC | 	wrlong	##524288, objptr
0fe10     04 E4 05 F1 | 	add	objptr, #4
0fe14     00 04 80 FF 
0fe18     F2 00 68 FC | 	wrlong	##524288, objptr
0fe1c     0D 00 00 FF 
0fe20     60 E4 85 F1 | 	sub	objptr, ##6752
0fe24     F2 00 68 FC | 	wrlong	#0, objptr
0fe28     07 00 00 FF 
0fe2c     24 E4 05 F1 | 	add	objptr, ##3620
0fe30     F2 00 68 FC | 	wrlong	#0, objptr
0fe34     07 00 00 FF 
0fe38     20 E4 85 F1 | 	sub	objptr, ##3616
0fe3c     00 04 80 FF 
0fe40     F2 00 68 FC | 	wrlong	##524288, objptr
0fe44     07 00 00 FF 
0fe48     2C E4 05 F1 | 	add	objptr, ##3628
0fe4c     F2 00 68 FC | 	wrlong	#0, objptr
0fe50     04 E4 05 F1 | 	add	objptr, #4
0fe54     FF FF FF FF 
0fe58     F2 FE 6B FC | 	wrlong	##-1, objptr
0fe5c     06 00 00 FF 
0fe60     78 E4 05 F1 | 	add	objptr, ##3192
0fe64     F2 00 68 FC | 	wrlong	#0, objptr
0fe68     04 E4 05 F1 | 	add	objptr, #4
0fe6c     F2 00 68 FC | 	wrlong	#0, objptr
0fe70                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0fe70                 | ' stackpointer=0
0fe70                 | ' lineptr=0 
0fe70                 | ' programptr=memlo ': stringptr=0
0fe70                 | ' 
0fe70                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0fe70                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0fe70     00 1E 06 F6 | 	mov	local01, #0
0fe74     06 00 00 FF 
0fe78     74 E4 85 F1 | 	sub	objptr, ##3188
0fe7c     97 16 48 FB | 	callpa	#(@LR__1273-@LR__1272)>>2,fcache_load_ptr_
0fe80                 | LR__1272
0fe80     0F 21 02 F6 | 	mov	local02, local01
0fe84     02 20 66 F0 | 	shl	local02, #2
0fe88     0F 21 02 F1 | 	add	local02, local01
0fe8c     02 20 66 F0 | 	shl	local02, #2
0fe90     F2 20 02 F1 | 	add	local02, objptr
0fe94     08 20 06 F1 | 	add	local02, #8
0fe98     FF FF FF FF 
0fe9c     10 FF 6B FC | 	wrlong	##-1, local02
0fea0     01 1E 06 F1 | 	add	local01, #1
0fea4     41 1E 56 F2 | 	cmps	local01, #65 wc
0fea8     D4 FF 9F CD |  if_b	jmp	#LR__1272
0feac                 | LR__1273
0feac     4A 00 00 FF 
0feb0     94 E4 85 F1 | 	sub	objptr, ##38036
0feb4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0feb4     00 1E 06 F6 | 	mov	local01, #0
0feb8                 | LR__1274
0feb8     0F 21 02 F6 | 	mov	local02, local01
0febc     02 20 66 F0 | 	shl	local02, #2
0fec0     51 00 00 FF 
0fec4     64 E5 05 F1 | 	add	objptr, ##41828
0fec8     F2 20 02 F1 | 	add	local02, objptr
0fecc     10 23 0A FB | 	rdlong	local03, local02 wz
0fed0     51 00 00 FF 
0fed4     64 E5 85 F1 | 	sub	objptr, ##41828
0fed8     34 00 90 AD |  if_e	jmp	#LR__1275
0fedc     0F 13 02 F6 | 	mov	arg01, local01
0fee0     00 14 06 F6 | 	mov	arg02, #0
0fee4     00 16 06 F6 | 	mov	arg03, #0
0fee8     B4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0feec     0F 21 02 F6 | 	mov	local02, local01
0fef0     02 20 66 F0 | 	shl	local02, #2
0fef4     51 00 00 FF 
0fef8     64 E5 05 F1 | 	add	objptr, ##41828
0fefc     F2 20 02 F1 | 	add	local02, objptr
0ff00     10 13 02 FB | 	rdlong	arg01, local02
0ff04     51 00 00 FF 
0ff08     64 E5 85 F1 | 	sub	objptr, ##41828
0ff0c     80 4B B1 FD | 	call	#__system___gc_free
0ff10                 | LR__1275
0ff10     01 1E 06 F1 | 	add	local01, #1
0ff14     10 1E 56 F2 | 	cmps	local01, #16 wc
0ff18     9C FF 9F CD |  if_b	jmp	#LR__1274
0ff1c     51 00 00 FF 
0ff20     B8 E5 05 F1 | 	add	objptr, ##41912
0ff24     00 C0 9F FF 
0ff28     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff2c     04 E4 05 F1 | 	add	objptr, #4
0ff30     00 C0 9F FF 
0ff34     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff38     51 00 00 FF 
0ff3c     B8 E5 85 F1 | 	sub	objptr, ##41912
0ff40     F2 22 02 FB | 	rdlong	local03, objptr
0ff44     51 00 00 FF 
0ff48     A4 E5 05 F1 | 	add	objptr, ##41892
0ff4c     F2 22 62 FC | 	wrlong	local03, objptr
0ff50     51 00 00 FF 
0ff54     A8 E5 85 F1 | 	sub	objptr, ##41896
0ff58     11 12 06 F6 | 	mov	arg01, #17
0ff5c     08 14 06 F6 | 	mov	arg02, #8
0ff60     10 16 06 F6 | 	mov	arg03, #16
0ff64     38 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ff68     10 12 06 F6 | 	mov	arg01, #16
0ff6c     20 14 06 F6 | 	mov	arg02, #32
0ff70     20 16 06 F6 | 	mov	arg03, #32
0ff74     28 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ff78     85 01 00 FF 
0ff7c     06 22 06 F6 | 	mov	local03, ##@LR__5461
0ff80     51 00 00 FF 
0ff84     D4 E5 05 F1 | 	add	objptr, ##41940
0ff88     F2 22 62 FC | 	wrlong	local03, objptr
0ff8c     51 00 00 FF 
0ff90     D4 E5 85 F1 | 	sub	objptr, ##41940
0ff94     2C C9 B0 FD | 	call	#_init_audio
0ff98     A7 F0 03 F6 | 	mov	ptra, fp
0ff9c     B2 00 A0 FD | 	call	#popregs_
0ffa0                 | _do_new_ret
0ffa0     2D 00 64 FD | 	ret
0ffa4                 | 
0ffa4                 | ' 
0ffa4                 | ' '----------------------- goto
0ffa4                 | ' sub do_fast_goto
0ffa4                 | _do_fast_goto
0ffa4     02 4A 05 F6 | 	mov	COUNT_, #2
0ffa8     A8 00 A0 FD | 	call	#pushregs_
0ffac                 | _do_fast_goto_enter
0ffac     4A 00 00 FF 
0ffb0     80 E4 05 F1 | 	add	objptr, ##38016
0ffb4     F2 12 02 FB | 	rdlong	arg01, objptr
0ffb8     09 1F 02 F6 | 	mov	local01, arg01
0ffbc     01 1E 66 F0 | 	shl	local01, #1
0ffc0     09 1F 02 F1 | 	add	local01, arg01
0ffc4     02 1E 66 F0 | 	shl	local01, #2
0ffc8     03 00 00 FF 
0ffcc     04 E4 85 F1 | 	sub	objptr, ##1540
0ffd0     F2 1E 02 F1 | 	add	local01, objptr
0ffd4     0F 21 02 FB | 	rdlong	local02, local01
0ffd8     10 13 02 F6 | 	mov	arg01, local02
0ffdc     47 00 00 FF 
0ffe0     7C E4 85 F1 | 	sub	objptr, ##36476
0ffe4     B0 D7 B0 FD | 	call	#_pslpeek
0ffe8     FD 12 02 F6 | 	mov	arg01, result1
0ffec                 | ' 
0ffec                 | ' testptr=compiledline(lineptr_e).result.uresult
0ffec                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0ffec                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0ffec     4A 00 00 FF 
0fff0     80 E4 05 F1 | 	add	objptr, ##38016
0fff4     F2 FA 01 FB | 	rdlong	result1, objptr
0fff8     FD 1E 02 F6 | 	mov	local01, result1
0fffc     01 1E 66 F0 | 	shl	local01, #1
10000     FD 1E 02 F1 | 	add	local01, result1
10004     02 1E 66 F0 | 	shl	local01, #2
10008     03 00 00 FF 
1000c     04 E4 85 F1 | 	sub	objptr, ##1540
10010     F2 1E 02 F1 | 	add	local01, objptr
10014     04 1E 06 F1 | 	add	local01, #4
10018     0F 1F 02 FB | 	rdlong	local01, local01
1001c     0F 13 0A F2 | 	cmp	arg01, local01 wz
10020     47 00 00 FF 
10024     7C E4 85 F1 | 	sub	objptr, ##36476
10028     58 00 90 5D |  if_ne	jmp	#LR__1280
1002c     50 00 00 FF 
10030     B4 E4 05 F1 | 	add	objptr, ##41140
10034     F2 20 62 FC | 	wrlong	local02, objptr
10038     06 00 00 FF 
1003c     38 E4 85 F1 | 	sub	objptr, ##3128
10040     F2 20 02 FB | 	rdlong	local02, objptr
10044     01 20 86 F1 | 	sub	local02, #1
10048     04 E4 05 F1 | 	add	objptr, #4
1004c     F2 20 62 FC | 	wrlong	local02, objptr
10050                 | '   runptr=testptr
10050                 | '   lineptr_e=lineptr-1
10050                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
10050     06 00 00 FF 
10054     80 E4 05 F1 | 	add	objptr, ##3200
10058     F2 20 02 FB | 	rdlong	local02, objptr
1005c     50 00 00 FF 
10060     00 E5 85 F1 | 	sub	objptr, ##41216
10064     FF FF 3F FF 
10068     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1006c     50 00 00 AF 
10070     00 E5 05 A1 |  if_e	add	objptr, ##41216
10074     F2 00 68 AC |  if_e	wrlong	#0, objptr
10078     50 00 00 AF 
1007c     00 E5 85 A1 |  if_e	sub	objptr, ##41216
10080     04 00 90 FD | 	jmp	#LR__1281
10084                 | LR__1280
10084     84 0E B0 FD | 	call	#_do_find_goto
10088                 | LR__1281
10088     A7 F0 03 F6 | 	mov	ptra, fp
1008c     B2 00 A0 FD | 	call	#popregs_
10090                 | _do_fast_goto_ret
10090     2D 00 64 FD | 	ret
10094                 | 
10094                 | ' 
10094                 | ' sub do_open
10094                 | _do_open
10094     02 4A 05 F6 | 	mov	COUNT_, #2
10098     A8 00 A0 FD | 	call	#pushregs_
1009c     20 F0 07 F1 | 	add	ptra, #32
100a0     4A 00 00 FF 
100a4     80 E4 05 F1 | 	add	objptr, ##38016
100a8     F2 16 02 FB | 	rdlong	arg03, objptr
100ac     0B 15 02 F6 | 	mov	arg02, arg03
100b0     01 14 66 F0 | 	shl	arg02, #1
100b4     0B 15 02 F1 | 	add	arg02, arg03
100b8     02 14 66 F0 | 	shl	arg02, #2
100bc     03 00 00 FF 
100c0     04 E4 85 F1 | 	sub	objptr, ##1540
100c4     F2 14 02 F1 | 	add	arg02, objptr
100c8     0A 17 02 FB | 	rdlong	arg03, arg02
100cc     10 4E 05 F1 | 	add	fp, #16
100d0     A7 16 62 FC | 	wrlong	arg03, fp
100d4     10 4E 85 F1 | 	sub	fp, #16
100d8     47 00 00 FF 
100dc     7C E4 85 F1 | 	sub	objptr, ##36476
100e0     00 BA BF FD | 	call	#_pop
100e4     FF 16 02 F6 | 	mov	arg03, result3
100e8     A7 FA 61 FC | 	wrlong	result1, fp
100ec     04 4E 05 F1 | 	add	fp, #4
100f0     A7 FC 61 FC | 	wrlong	result2, fp
100f4     04 4E 05 F1 | 	add	fp, #4
100f8     A7 16 62 FC | 	wrlong	arg03, fp
100fc                 | ' 
100fc                 | ' numpar=compiledline(lineptr_e).result.uresult
100fc                 | ' 
100fc                 | ' t1=pop()
100fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
100fc     08 4E 85 F1 | 	sub	fp, #8
10100     2B 16 0E F2 | 	cmp	arg03, #43 wz
10104     18 00 90 5D |  if_ne	jmp	#LR__1290
10108     A7 12 02 FB | 	rdlong	arg01, fp
1010c     74 12 B0 FD | 	call	#_convertstring
10110     A7 FA 61 FC | 	wrlong	result1, fp
10114     08 4E 05 F1 | 	add	fp, #8
10118     A7 3E 68 FC | 	wrlong	#31, fp
1011c     08 4E 85 F1 | 	sub	fp, #8
10120                 | LR__1290
10120                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
10120     08 4E 05 F1 | 	add	fp, #8
10124     A7 16 02 FB | 	rdlong	arg03, fp
10128     08 4E 85 F1 | 	sub	fp, #8
1012c     1F 16 0E F2 | 	cmp	arg03, #31 wz
10130     44 00 90 AD |  if_e	jmp	#LR__1291
10134     00 12 06 F6 | 	mov	arg01, #0
10138     A0 63 B1 FD | 	call	#__system___getiolock_0540
1013c     FD 12 02 F6 | 	mov	arg01, result1
10140     58 09 B1 FD | 	call	#__system___lockmem
10144     85 01 00 FF 
10148     11 14 06 F6 | 	mov	arg02, ##@LR__5462
1014c     00 12 06 F6 | 	mov	arg01, #0
10150     00 16 06 F6 | 	mov	arg03, #0
10154     38 16 B1 FD | 	call	#__system___basic_print_string
10158     00 12 06 F6 | 	mov	arg01, #0
1015c     0A 14 06 F6 | 	mov	arg02, #10
10160     00 16 06 F6 | 	mov	arg03, #0
10164     D0 15 B1 FD | 	call	#__system___basic_print_char
10168     00 12 06 F6 | 	mov	arg01, #0
1016c     6C 63 B1 FD | 	call	#__system___getiolock_0540
10170     FD 00 68 FC | 	wrlong	#0, result1
10174     28 02 90 FD | 	jmp	#LR__1302
10178                 | LR__1291
10178     A7 16 02 FB | 	rdlong	arg03, fp
1017c     0C 4E 05 F1 | 	add	fp, #12
10180     A7 16 62 FC | 	wrlong	arg03, fp
10184     0C 4E 85 F1 | 	sub	fp, #12
10188     58 B9 BF FD | 	call	#_pop
1018c     FF 16 02 F6 | 	mov	arg03, result3
10190     A7 FA 61 FC | 	wrlong	result1, fp
10194     04 4E 05 F1 | 	add	fp, #4
10198     A7 FC 61 FC | 	wrlong	result2, fp
1019c     04 4E 05 F1 | 	add	fp, #4
101a0     A7 16 62 FC | 	wrlong	arg03, fp
101a4                 | ' filename=t1.result.sresult
101a4                 | ' t1=pop()
101a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
101a4     08 4E 85 F1 | 	sub	fp, #8
101a8     2B 16 0E F2 | 	cmp	arg03, #43 wz
101ac     18 00 90 5D |  if_ne	jmp	#LR__1292
101b0     A7 12 02 FB | 	rdlong	arg01, fp
101b4     CC 11 B0 FD | 	call	#_convertstring
101b8     A7 FA 61 FC | 	wrlong	result1, fp
101bc     08 4E 05 F1 | 	add	fp, #8
101c0     A7 3E 68 FC | 	wrlong	#31, fp
101c4     08 4E 85 F1 | 	sub	fp, #8
101c8                 | LR__1292
101c8     14 4E 05 F1 | 	add	fp, #20
101cc     A7 00 68 FC | 	wrlong	#0, fp
101d0                 | ' mode=0
101d0                 | ' if t1.result_type=result_string then
101d0     0C 4E 85 F1 | 	sub	fp, #12
101d4     A7 14 02 FB | 	rdlong	arg02, fp
101d8     08 4E 85 F1 | 	sub	fp, #8
101dc     1F 14 0E F2 | 	cmp	arg02, #31 wz
101e0     64 00 90 5D |  if_ne	jmp	#LR__1293
101e4                 | '   if t1.result.sresult="read" then mode=1
101e4     A7 12 02 FB | 	rdlong	arg01, fp
101e8     85 01 00 FF 
101ec     23 14 06 F6 | 	mov	arg02, ##@LR__5463
101f0     D0 08 B1 FD | 	call	#__system___string_cmp
101f4     00 FA 0D F2 | 	cmp	result1, #0 wz
101f8     14 4E 05 A1 |  if_e	add	fp, #20
101fc     A7 02 68 AC |  if_e	wrlong	#1, fp
10200     14 4E 85 A1 |  if_e	sub	fp, #20
10204                 | '   if t1.result.sresult="write" then mode=2
10204     A7 12 02 FB | 	rdlong	arg01, fp
10208     85 01 00 FF 
1020c     28 14 06 F6 | 	mov	arg02, ##@LR__5464
10210     B0 08 B1 FD | 	call	#__system___string_cmp
10214     00 FA 0D F2 | 	cmp	result1, #0 wz
10218     14 4E 05 A1 |  if_e	add	fp, #20
1021c     A7 04 68 AC |  if_e	wrlong	#2, fp
10220     14 4E 85 A1 |  if_e	sub	fp, #20
10224                 | '   if t1.result.sresult="append" then mode=4
10224     A7 12 02 FB | 	rdlong	arg01, fp
10228     85 01 00 FF 
1022c     2E 14 06 F6 | 	mov	arg02, ##@LR__5465
10230     90 08 B1 FD | 	call	#__system___string_cmp
10234     00 FA 0D F2 | 	cmp	result1, #0 wz
10238     14 4E 05 A1 |  if_e	add	fp, #20
1023c     A7 08 68 AC |  if_e	wrlong	#4, fp
10240     14 4E 85 A1 |  if_e	sub	fp, #20
10244     14 00 90 FD | 	jmp	#LR__1294
10248                 | LR__1293
10248     A7 12 02 F6 | 	mov	arg01, fp
1024c     58 59 B0 FD | 	call	#_converttoint
10250     14 4E 05 F1 | 	add	fp, #20
10254     A7 FA 61 FC | 	wrlong	result1, fp
10258     14 4E 85 F1 | 	sub	fp, #20
1025c                 | LR__1294
1025c     84 B8 BF FD | 	call	#_pop
10260     FF 16 02 F6 | 	mov	arg03, result3
10264     A7 FA 61 FC | 	wrlong	result1, fp
10268     04 4E 05 F1 | 	add	fp, #4
1026c     A7 FC 61 FC | 	wrlong	result2, fp
10270     04 4E 05 F1 | 	add	fp, #4
10274     A7 16 62 FC | 	wrlong	arg03, fp
10278                 | ' t1=pop()
10278                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10278     08 4E 85 F1 | 	sub	fp, #8
1027c     2C 16 0E F2 | 	cmp	arg03, #44 wz
10280     44 00 90 AD |  if_e	jmp	#LR__1295
10284     00 12 06 F6 | 	mov	arg01, #0
10288     50 62 B1 FD | 	call	#__system___getiolock_0540
1028c     FD 12 02 F6 | 	mov	arg01, result1
10290     08 08 B1 FD | 	call	#__system___lockmem
10294     85 01 00 FF 
10298     35 14 06 F6 | 	mov	arg02, ##@LR__5466
1029c     00 12 06 F6 | 	mov	arg01, #0
102a0     00 16 06 F6 | 	mov	arg03, #0
102a4     E8 14 B1 FD | 	call	#__system___basic_print_string
102a8     00 12 06 F6 | 	mov	arg01, #0
102ac     0A 14 06 F6 | 	mov	arg02, #10
102b0     00 16 06 F6 | 	mov	arg03, #0
102b4     80 14 B1 FD | 	call	#__system___basic_print_char
102b8     00 12 06 F6 | 	mov	arg01, #0
102bc     1C 62 B1 FD | 	call	#__system___getiolock_0540
102c0     FD 00 68 FC | 	wrlong	#0, result1
102c4     D8 00 90 FD | 	jmp	#LR__1302
102c8                 | LR__1295
102c8     A7 1E 02 FB | 	rdlong	local01, fp
102cc     18 4E 05 F1 | 	add	fp, #24
102d0     A7 1E 62 FC | 	wrlong	local01, fp
102d4                 | ' channel  = t1.result.iresult
102d4                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
102d4                 | ' select case  mode
102d4     04 4E 85 F1 | 	sub	fp, #4
102d8     A7 20 02 FB | 	rdlong	local02, fp
102dc     14 4E 85 F1 | 	sub	fp, #20
102e0     01 20 86 F1 | 	sub	local02, #1
102e4     04 20 26 F3 | 	fle	local02, #4
102e8     30 20 62 FD | 	jmprel	local02
102ec                 | LR__1296
102ec     10 00 90 FD | 	jmp	#LR__1297
102f0     2C 00 90 FD | 	jmp	#LR__1298
102f4     68 00 90 FD | 	jmp	#LR__1300
102f8     44 00 90 FD | 	jmp	#LR__1299
102fc     60 00 90 FD | 	jmp	#LR__1300
10300                 | LR__1297
10300     18 4E 05 F1 | 	add	fp, #24
10304     A7 12 02 FB | 	rdlong	arg01, fp
10308     0C 4E 85 F1 | 	sub	fp, #12
1030c     A7 14 02 FB | 	rdlong	arg02, fp
10310     0C 4E 85 F1 | 	sub	fp, #12
10314     00 16 06 F6 | 	mov	arg03, #0
10318     84 13 B1 FD | 	call	#__system___basic_open_string
1031c     80 00 90 FD | 	jmp	#LR__1301
10320                 | LR__1298
10320     18 4E 05 F1 | 	add	fp, #24
10324     A7 12 02 FB | 	rdlong	arg01, fp
10328     0C 4E 85 F1 | 	sub	fp, #12
1032c     A7 14 02 FB | 	rdlong	arg02, fp
10330     0C 4E 85 F1 | 	sub	fp, #12
10334     0D 16 06 F6 | 	mov	arg03, #13
10338     64 13 B1 FD | 	call	#__system___basic_open_string
1033c     60 00 90 FD | 	jmp	#LR__1301
10340                 | LR__1299
10340     18 4E 05 F1 | 	add	fp, #24
10344     A7 12 02 FB | 	rdlong	arg01, fp
10348     0C 4E 85 F1 | 	sub	fp, #12
1034c     A7 14 02 FB | 	rdlong	arg02, fp
10350     0C 4E 85 F1 | 	sub	fp, #12
10354     25 16 06 F6 | 	mov	arg03, #37
10358     44 13 B1 FD | 	call	#__system___basic_open_string
1035c     40 00 90 FD | 	jmp	#LR__1301
10360                 | LR__1300
10360     00 12 06 F6 | 	mov	arg01, #0
10364     74 61 B1 FD | 	call	#__system___getiolock_0540
10368     FD 12 02 F6 | 	mov	arg01, result1
1036c     2C 07 B1 FD | 	call	#__system___lockmem
10370     85 01 00 FF 
10374     47 14 06 F6 | 	mov	arg02, ##@LR__5467
10378     00 12 06 F6 | 	mov	arg01, #0
1037c     00 16 06 F6 | 	mov	arg03, #0
10380     0C 14 B1 FD | 	call	#__system___basic_print_string
10384     00 12 06 F6 | 	mov	arg01, #0
10388     0A 14 06 F6 | 	mov	arg02, #10
1038c     00 16 06 F6 | 	mov	arg03, #0
10390     A4 13 B1 FD | 	call	#__system___basic_print_char
10394     00 12 06 F6 | 	mov	arg01, #0
10398     40 61 B1 FD | 	call	#__system___getiolock_0540
1039c     FD 00 68 FC | 	wrlong	#0, result1
103a0                 | LR__1301
103a0                 | LR__1302
103a0     A7 F0 03 F6 | 	mov	ptra, fp
103a4     B2 00 A0 FD | 	call	#popregs_
103a8                 | _do_open_ret
103a8     2D 00 64 FD | 	ret
103ac                 | 
103ac                 | ' 
103ac                 | ' 
103ac                 | ' sub do_close
103ac                 | _do_close
103ac     03 4A 05 F6 | 	mov	COUNT_, #3
103b0     A8 00 A0 FD | 	call	#pushregs_
103b4     2C B7 BF FD | 	call	#_pop
103b8     FD 1E 02 F6 | 	mov	local01, result1
103bc     FF 16 02 F6 | 	mov	arg03, result3
103c0     FE 20 02 F6 | 	mov	local02, result2
103c4     0B 23 02 F6 | 	mov	local03, arg03
103c8                 | ' numpar=compiledline(lineptr_e).result.uresult
103c8                 | ' 
103c8                 | ' t1=pop()
103c8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
103c8     2C 22 0E F2 | 	cmp	local03, #44 wz
103cc     44 00 90 AD |  if_e	jmp	#LR__1310
103d0     00 12 06 F6 | 	mov	arg01, #0
103d4     04 61 B1 FD | 	call	#__system___getiolock_0540
103d8     FD 12 02 F6 | 	mov	arg01, result1
103dc     BC 06 B1 FD | 	call	#__system___lockmem
103e0     85 01 00 FF 
103e4     5A 14 06 F6 | 	mov	arg02, ##@LR__5468
103e8     00 12 06 F6 | 	mov	arg01, #0
103ec     00 16 06 F6 | 	mov	arg03, #0
103f0     9C 13 B1 FD | 	call	#__system___basic_print_string
103f4     00 12 06 F6 | 	mov	arg01, #0
103f8     0A 14 06 F6 | 	mov	arg02, #10
103fc     00 16 06 F6 | 	mov	arg03, #0
10400     34 13 B1 FD | 	call	#__system___basic_print_char
10404     00 12 06 F6 | 	mov	arg01, #0
10408     D0 60 B1 FD | 	call	#__system___getiolock_0540
1040c     FD 00 68 FC | 	wrlong	#0, result1
10410     08 00 90 FD | 	jmp	#LR__1311
10414                 | LR__1310
10414                 | ' channel  = t1.result.iresult
10414                 | ' close #channel
10414     0F 13 02 F6 | 	mov	arg01, local01
10418     F0 56 B1 FD | 	call	#__system__close
1041c                 | LR__1311
1041c     A7 F0 03 F6 | 	mov	ptra, fp
10420     B2 00 A0 FD | 	call	#popregs_
10424                 | _do_close_ret
10424     2D 00 64 FD | 	ret
10428                 | 
10428                 | ' 
10428                 | ' sub  do_get
10428                 | _do_get
10428     09 4A 05 F6 | 	mov	COUNT_, #9
1042c     A8 00 A0 FD | 	call	#pushregs_
10430     40 F0 07 F1 | 	add	ptra, #64
10434     4A 00 00 FF 
10438     80 E4 05 F1 | 	add	objptr, ##38016
1043c     F2 1A 02 FB | 	rdlong	arg05, objptr
10440     0D 19 02 F6 | 	mov	arg04, arg05
10444     01 18 66 F0 | 	shl	arg04, #1
10448     0D 19 02 F1 | 	add	arg04, arg05
1044c     02 18 66 F0 | 	shl	arg04, #2
10450     03 00 00 FF 
10454     04 E4 85 F1 | 	sub	objptr, ##1540
10458     F2 18 02 F1 | 	add	arg04, objptr
1045c     0C 1B 02 FB | 	rdlong	arg05, arg04
10460     A7 1A 62 FC | 	wrlong	arg05, fp
10464                 | ' numpar=compiledline(lineptr_e).result.uresult
10464                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10464     04 1A 0E F2 | 	cmp	arg05, #4 wz
10468     47 00 00 FF 
1046c     7C E4 85 F1 | 	sub	objptr, ##36476
10470     48 00 90 5D |  if_ne	jmp	#LR__1320
10474     6C B6 BF FD | 	call	#_pop
10478     FF 1A 02 F6 | 	mov	arg05, result3
1047c     1C 4E 05 F1 | 	add	fp, #28
10480     A7 FA 61 FC | 	wrlong	result1, fp
10484     04 4E 05 F1 | 	add	fp, #4
10488     A7 FC 61 FC | 	wrlong	result2, fp
1048c     04 4E 05 F1 | 	add	fp, #4
10490     A7 1A 62 FC | 	wrlong	arg05, fp
10494     08 4E 85 F1 | 	sub	fp, #8
10498     A7 12 02 F6 | 	mov	arg01, fp
1049c     1C 4E 85 F1 | 	sub	fp, #28
104a0     04 57 B0 FD | 	call	#_converttoint
104a4     52 00 00 FF 
104a8     10 E4 05 F1 | 	add	objptr, ##42000
104ac     F2 FA 61 FC | 	wrlong	result1, objptr
104b0     52 00 00 FF 
104b4     10 E4 85 F1 | 	sub	objptr, ##42000
104b8     18 00 90 FD | 	jmp	#LR__1321
104bc                 | LR__1320
104bc     52 00 00 FF 
104c0     10 E4 05 F1 | 	add	objptr, ##42000
104c4     FF FF FF FF 
104c8     F2 FE 6B FC | 	wrlong	##-1, objptr
104cc     52 00 00 FF 
104d0     10 E4 85 F1 | 	sub	objptr, ##42000
104d4                 | LR__1321
104d4                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
104d4     A7 16 02 FB | 	rdlong	arg03, fp
104d8     03 16 56 F2 | 	cmps	arg03, #3 wc
104dc     40 00 90 CD |  if_b	jmp	#LR__1322
104e0     00 B6 BF FD | 	call	#_pop
104e4     FF 16 02 F6 | 	mov	arg03, result3
104e8     1C 4E 05 F1 | 	add	fp, #28
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     04 4E 05 F1 | 	add	fp, #4
104f4     A7 FC 61 FC | 	wrlong	result2, fp
104f8     04 4E 05 F1 | 	add	fp, #4
104fc     A7 16 62 FC | 	wrlong	arg03, fp
10500     08 4E 85 F1 | 	sub	fp, #8
10504     A7 12 02 F6 | 	mov	arg01, fp
10508     1C 4E 85 F1 | 	sub	fp, #28
1050c     98 56 B0 FD | 	call	#_converttoint
10510     08 4E 05 F1 | 	add	fp, #8
10514     A7 FA 61 FC | 	wrlong	result1, fp
10518     08 4E 85 F1 | 	sub	fp, #8
1051c     0C 00 90 FD | 	jmp	#LR__1323
10520                 | LR__1322
10520     08 4E 05 F1 | 	add	fp, #8
10524     A7 02 68 FC | 	wrlong	#1, fp
10528     08 4E 85 F1 | 	sub	fp, #8
1052c                 | LR__1323
1052c                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
1052c     A7 16 02 FB | 	rdlong	arg03, fp
10530     02 16 56 F2 | 	cmps	arg03, #2 wc
10534     3C 00 90 CD |  if_b	jmp	#LR__1324
10538     A8 B5 BF FD | 	call	#_pop
1053c     FF 16 02 F6 | 	mov	arg03, result3
10540     1C 4E 05 F1 | 	add	fp, #28
10544     A7 FA 61 FC | 	wrlong	result1, fp
10548     04 4E 05 F1 | 	add	fp, #4
1054c     A7 FC 61 FC | 	wrlong	result2, fp
10550     04 4E 05 F1 | 	add	fp, #4
10554     A7 16 62 FC | 	wrlong	arg03, fp
10558     08 4E 85 F1 | 	sub	fp, #8
1055c     A7 12 02 F6 | 	mov	arg01, fp
10560     1C 4E 85 F1 | 	sub	fp, #28
10564     40 56 B0 FD | 	call	#_converttoint
10568     0C 4E 05 F1 | 	add	fp, #12
1056c     A7 FA 61 FC | 	wrlong	result1, fp
10570     0C 4E 85 F1 | 	sub	fp, #12
10574                 | LR__1324
10574     6C B5 BF FD | 	call	#_pop
10578     FF 16 02 F6 | 	mov	arg03, result3
1057c     1C 4E 05 F1 | 	add	fp, #28
10580     A7 FA 61 FC | 	wrlong	result1, fp
10584     04 4E 05 F1 | 	add	fp, #4
10588     A7 FC 61 FC | 	wrlong	result2, fp
1058c     04 4E 05 F1 | 	add	fp, #4
10590     A7 16 62 FC | 	wrlong	arg03, fp
10594     08 4E 85 F1 | 	sub	fp, #8
10598     A7 12 02 F6 | 	mov	arg01, fp
1059c     1C 4E 85 F1 | 	sub	fp, #28
105a0     04 56 B0 FD | 	call	#_converttoint
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 FA 61 FC | 	wrlong	result1, fp
105ac     10 4E 05 F1 | 	add	fp, #16
105b0     A7 16 02 FB | 	rdlong	arg03, fp
105b4     14 4E 85 F1 | 	sub	fp, #20
105b8     02 16 66 F0 | 	shl	arg03, #2
105bc     50 00 00 FF 
105c0     C0 E4 05 F1 | 	add	objptr, ##41152
105c4     F2 1E 02 F6 | 	mov	local01, objptr
105c8     F2 16 02 F1 | 	add	arg03, objptr
105cc     0B 01 68 FC | 	wrlong	#0, arg03
105d0                 | ' t1=pop() : channel=converttoint(t1)
105d0                 | ' 
105d0                 | ' getres(j)=0
105d0                 | ' if pos>=0 then
105d0     01 00 00 FF 
105d4     50 E5 05 F1 | 	add	objptr, ##848
105d8     F2 20 02 FB | 	rdlong	local02, objptr
105dc     52 00 00 FF 
105e0     10 E4 85 F1 | 	sub	objptr, ##42000
105e4     00 20 56 F2 | 	cmps	local02, #0 wc
105e8     F0 01 90 CD |  if_b	jmp	#LR__1331
105ec                 | '   for i=0 to  amount/1024
105ec     10 4E 05 F1 | 	add	fp, #16
105f0     A7 00 68 FC | 	wrlong	#0, fp
105f4     08 4E 85 F1 | 	sub	fp, #8
105f8     A7 22 02 FB | 	rdlong	local03, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     11 25 52 F6 | 	abs	local04, local03 wc
10604     0A 24 46 F0 | 	shr	local04, #10
10608     12 25 82 F6 | 	negc	local04, local04
1060c     01 24 06 F1 | 	add	local04, #1
10610                 | LR__1325
10610     10 4E 05 F1 | 	add	fp, #16
10614     A7 22 02 FB | 	rdlong	local03, fp
10618     10 4E 85 F1 | 	sub	fp, #16
1061c     12 23 52 F2 | 	cmps	local03, local04 wc
10620     9C 03 90 3D |  if_ae	jmp	#LR__1339
10624                 | '     get #channel,pos+1,block(0),amount,r
10624     04 4E 05 F1 | 	add	fp, #4
10628     A7 12 02 FB | 	rdlong	arg01, fp
1062c     52 00 00 FF 
10630     10 E4 05 F1 | 	add	objptr, ##42000
10634     F2 14 02 FB | 	rdlong	arg02, objptr
10638     01 14 06 F1 | 	add	arg02, #1
1063c     03 00 00 FF 
10640     60 E5 85 F1 | 	sub	objptr, ##1888
10644     F2 16 02 F6 | 	mov	arg03, objptr
10648     4E 00 00 FF 
1064c     B0 E4 85 F1 | 	sub	objptr, ##40112
10650     04 4E 05 F1 | 	add	fp, #4
10654     A7 18 02 FB | 	rdlong	arg04, fp
10658     08 4E 85 F1 | 	sub	fp, #8
1065c     01 1A 06 F6 | 	mov	arg05, #1
10660     A8 12 B1 FD | 	call	#__system___basic_get
10664     18 4E 05 F1 | 	add	fp, #24
10668     A7 FA 61 FC | 	wrlong	result1, fp
1066c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1066c     0C 4E 85 F1 | 	sub	fp, #12
10670     A7 20 02 FB | 	rdlong	local02, fp
10674     0C 4E 85 F1 | 	sub	fp, #12
10678     00 04 00 FF 
1067c     00 20 56 F2 | 	cmps	local02, ##524288 wc
10680     7C 00 90 3D |  if_ae	jmp	#LR__1327
10684     14 4E 05 F1 | 	add	fp, #20
10688     A7 00 68 FC | 	wrlong	#0, fp
1068c     04 4E 05 F1 | 	add	fp, #4
10690     A7 26 02 FB | 	rdlong	local05, fp
10694     18 4E 85 F1 | 	sub	fp, #24
10698                 | LR__1326
10698     14 4E 05 F1 | 	add	fp, #20
1069c     A7 20 02 FB | 	rdlong	local02, fp
106a0     14 4E 85 F1 | 	sub	fp, #20
106a4     13 21 52 F2 | 	cmps	local02, local05 wc
106a8     D8 00 90 3D |  if_ae	jmp	#LR__1330
106ac     0C 4E 05 F1 | 	add	fp, #12
106b0     A7 12 02 FB | 	rdlong	arg01, fp
106b4     04 4E 05 F1 | 	add	fp, #4
106b8     A7 22 02 FB | 	rdlong	local03, fp
106bc     0A 22 66 F0 | 	shl	local03, #10
106c0     11 13 02 F1 | 	add	arg01, local03
106c4     04 4E 05 F1 | 	add	fp, #4
106c8     A7 22 02 FB | 	rdlong	local03, fp
106cc     11 13 02 F1 | 	add	arg01, local03
106d0     4E 00 00 FF 
106d4     B0 E4 05 F1 | 	add	objptr, ##40112
106d8     F2 22 02 F1 | 	add	local03, objptr
106dc     11 15 C2 FA | 	rdbyte	arg02, local03
106e0     09 15 42 FC | 	wrbyte	arg02, arg01
106e4     4E 00 00 FF 
106e8     B0 E4 85 F1 | 	sub	objptr, ##40112
106ec     A7 22 02 FB | 	rdlong	local03, fp
106f0     01 22 06 F1 | 	add	local03, #1
106f4     A7 22 62 FC | 	wrlong	local03, fp
106f8     14 4E 85 F1 | 	sub	fp, #20
106fc     98 FF 9F FD | 	jmp	#LR__1326
10700                 | LR__1327
10700     14 4E 05 F1 | 	add	fp, #20
10704     A7 00 68 FC | 	wrlong	#0, fp
10708     04 4E 05 F1 | 	add	fp, #4
1070c     A7 28 02 FB | 	rdlong	local06, fp
10710     18 4E 85 F1 | 	sub	fp, #24
10714                 | LR__1328
10714     14 4E 05 F1 | 	add	fp, #20
10718     A7 20 02 FB | 	rdlong	local02, fp
1071c     14 4E 85 F1 | 	sub	fp, #20
10720     14 21 52 F2 | 	cmps	local02, local06 wc
10724     5C 00 90 3D |  if_ae	jmp	#LR__1329
10728     0C 4E 05 F1 | 	add	fp, #12
1072c     A7 12 02 FB | 	rdlong	arg01, fp
10730     04 4E 05 F1 | 	add	fp, #4
10734     A7 26 02 FB | 	rdlong	local05, fp
10738     0A 26 66 F0 | 	shl	local05, #10
1073c     13 13 02 F1 | 	add	arg01, local05
10740     04 4E 05 F1 | 	add	fp, #4
10744     A7 26 02 FB | 	rdlong	local05, fp
10748     13 13 02 F1 | 	add	arg01, local05
1074c     14 4E 85 F1 | 	sub	fp, #20
10750     4E 00 00 FF 
10754     B0 E4 05 F1 | 	add	objptr, ##40112
10758     F2 26 02 F1 | 	add	local05, objptr
1075c     13 15 C2 FA | 	rdbyte	arg02, local05
10760     4E 00 00 FF 
10764     B0 E4 85 F1 | 	sub	objptr, ##40112
10768     8C CF B0 FD | 	call	#_pspoke
1076c     14 4E 05 F1 | 	add	fp, #20
10770     A7 26 02 FB | 	rdlong	local05, fp
10774     01 26 06 F1 | 	add	local05, #1
10778     A7 26 62 FC | 	wrlong	local05, fp
1077c     14 4E 85 F1 | 	sub	fp, #20
10780     90 FF 9F FD | 	jmp	#LR__1328
10784                 | LR__1329
10784                 | LR__1330
10784     14 4E 05 F1 | 	add	fp, #20
10788     A7 28 02 FB | 	rdlong	local06, fp
1078c     14 23 02 F6 | 	mov	local03, local06
10790     02 22 66 F0 | 	shl	local03, #2
10794     50 00 00 FF 
10798     C0 E4 05 F1 | 	add	objptr, ##41152
1079c     F2 22 02 F1 | 	add	local03, objptr
107a0     02 28 66 F0 | 	shl	local06, #2
107a4     F2 28 02 F1 | 	add	local06, objptr
107a8     14 29 02 FB | 	rdlong	local06, local06
107ac     04 4E 05 F1 | 	add	fp, #4
107b0     A7 26 02 FB | 	rdlong	local05, fp
107b4     13 29 02 F1 | 	add	local06, local05
107b8     11 29 62 FC | 	wrlong	local06, local03
107bc     08 4E 85 F1 | 	sub	fp, #8
107c0     A7 28 02 FB | 	rdlong	local06, fp
107c4     01 28 06 F1 | 	add	local06, #1
107c8     A7 28 62 FC | 	wrlong	local06, fp
107cc     10 4E 85 F1 | 	sub	fp, #16
107d0     50 00 00 FF 
107d4     C0 E4 85 F1 | 	sub	objptr, ##41152
107d8     34 FE 9F FD | 	jmp	#LR__1325
107dc                 | LR__1331
107dc                 | '   for i=0 to  amount/1024
107dc     10 4E 05 F1 | 	add	fp, #16
107e0     A7 00 68 FC | 	wrlong	#0, fp
107e4     08 4E 85 F1 | 	sub	fp, #8
107e8     A7 22 02 FB | 	rdlong	local03, fp
107ec     08 4E 85 F1 | 	sub	fp, #8
107f0     11 2B 52 F6 | 	abs	local07, local03 wc
107f4     0A 2A 46 F0 | 	shr	local07, #10
107f8     15 2B 82 F6 | 	negc	local07, local07
107fc     01 2A 06 F1 | 	add	local07, #1
10800                 | LR__1332
10800     10 4E 05 F1 | 	add	fp, #16
10804     A7 22 02 FB | 	rdlong	local03, fp
10808     10 4E 85 F1 | 	sub	fp, #16
1080c     15 23 52 F2 | 	cmps	local03, local07 wc
10810     AC 01 90 3D |  if_ae	jmp	#LR__1338
10814                 | '     get #channel,,block(0),amount,r
10814     04 4E 05 F1 | 	add	fp, #4
10818     A7 12 02 FB | 	rdlong	arg01, fp
1081c     4E 00 00 FF 
10820     B0 E4 05 F1 | 	add	objptr, ##40112
10824     F2 16 02 F6 | 	mov	arg03, objptr
10828     4E 00 00 FF 
1082c     B0 E4 85 F1 | 	sub	objptr, ##40112
10830     04 4E 05 F1 | 	add	fp, #4
10834     A7 18 02 FB | 	rdlong	arg04, fp
10838     08 4E 85 F1 | 	sub	fp, #8
1083c     00 14 06 F6 | 	mov	arg02, #0
10840     01 1A 06 F6 | 	mov	arg05, #1
10844     C4 10 B1 FD | 	call	#__system___basic_get
10848     18 4E 05 F1 | 	add	fp, #24
1084c     A7 FA 61 FC | 	wrlong	result1, fp
10850                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10850     0C 4E 85 F1 | 	sub	fp, #12
10854     A7 20 02 FB | 	rdlong	local02, fp
10858     0C 4E 85 F1 | 	sub	fp, #12
1085c     00 04 00 FF 
10860     00 20 56 F2 | 	cmps	local02, ##524288 wc
10864     7C 00 90 3D |  if_ae	jmp	#LR__1334
10868     14 4E 05 F1 | 	add	fp, #20
1086c     A7 00 68 FC | 	wrlong	#0, fp
10870     04 4E 05 F1 | 	add	fp, #4
10874     A7 2C 02 FB | 	rdlong	local08, fp
10878     18 4E 85 F1 | 	sub	fp, #24
1087c                 | LR__1333
1087c     14 4E 05 F1 | 	add	fp, #20
10880     A7 20 02 FB | 	rdlong	local02, fp
10884     14 4E 85 F1 | 	sub	fp, #20
10888     16 21 52 F2 | 	cmps	local02, local08 wc
1088c     D8 00 90 3D |  if_ae	jmp	#LR__1337
10890     0C 4E 05 F1 | 	add	fp, #12
10894     A7 12 02 FB | 	rdlong	arg01, fp
10898     04 4E 05 F1 | 	add	fp, #4
1089c     A7 28 02 FB | 	rdlong	local06, fp
108a0     0A 28 66 F0 | 	shl	local06, #10
108a4     14 13 02 F1 | 	add	arg01, local06
108a8     04 4E 05 F1 | 	add	fp, #4
108ac     A7 28 02 FB | 	rdlong	local06, fp
108b0     14 13 02 F1 | 	add	arg01, local06
108b4     4E 00 00 FF 
108b8     B0 E4 05 F1 | 	add	objptr, ##40112
108bc     F2 28 02 F1 | 	add	local06, objptr
108c0     14 15 C2 FA | 	rdbyte	arg02, local06
108c4     09 15 42 FC | 	wrbyte	arg02, arg01
108c8     4E 00 00 FF 
108cc     B0 E4 85 F1 | 	sub	objptr, ##40112
108d0     A7 28 02 FB | 	rdlong	local06, fp
108d4     01 28 06 F1 | 	add	local06, #1
108d8     A7 28 62 FC | 	wrlong	local06, fp
108dc     14 4E 85 F1 | 	sub	fp, #20
108e0     98 FF 9F FD | 	jmp	#LR__1333
108e4                 | LR__1334
108e4     14 4E 05 F1 | 	add	fp, #20
108e8     A7 00 68 FC | 	wrlong	#0, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 2E 02 FB | 	rdlong	local09, fp
108f4     18 4E 85 F1 | 	sub	fp, #24
108f8                 | LR__1335
108f8     14 4E 05 F1 | 	add	fp, #20
108fc     A7 20 02 FB | 	rdlong	local02, fp
10900     14 4E 85 F1 | 	sub	fp, #20
10904     17 21 52 F2 | 	cmps	local02, local09 wc
10908     5C 00 90 3D |  if_ae	jmp	#LR__1336
1090c     0C 4E 05 F1 | 	add	fp, #12
10910     A7 12 02 FB | 	rdlong	arg01, fp
10914     04 4E 05 F1 | 	add	fp, #4
10918     A7 2C 02 FB | 	rdlong	local08, fp
1091c     0A 2C 66 F0 | 	shl	local08, #10
10920     16 13 02 F1 | 	add	arg01, local08
10924     04 4E 05 F1 | 	add	fp, #4
10928     A7 2C 02 FB | 	rdlong	local08, fp
1092c     16 13 02 F1 | 	add	arg01, local08
10930     14 4E 85 F1 | 	sub	fp, #20
10934     4E 00 00 FF 
10938     B0 E4 05 F1 | 	add	objptr, ##40112
1093c     F2 2C 02 F1 | 	add	local08, objptr
10940     16 15 C2 FA | 	rdbyte	arg02, local08
10944     4E 00 00 FF 
10948     B0 E4 85 F1 | 	sub	objptr, ##40112
1094c     A8 CD B0 FD | 	call	#_pspoke
10950     14 4E 05 F1 | 	add	fp, #20
10954     A7 2C 02 FB | 	rdlong	local08, fp
10958     01 2C 06 F1 | 	add	local08, #1
1095c     A7 2C 62 FC | 	wrlong	local08, fp
10960     14 4E 85 F1 | 	sub	fp, #20
10964     90 FF 9F FD | 	jmp	#LR__1335
10968                 | LR__1336
10968                 | LR__1337
10968     14 4E 05 F1 | 	add	fp, #20
1096c     A7 2E 02 FB | 	rdlong	local09, fp
10970     17 29 02 F6 | 	mov	local06, local09
10974     02 28 66 F0 | 	shl	local06, #2
10978     50 00 00 FF 
1097c     C0 E4 05 F1 | 	add	objptr, ##41152
10980     F2 28 02 F1 | 	add	local06, objptr
10984     02 2E 66 F0 | 	shl	local09, #2
10988     F2 2E 02 F1 | 	add	local09, objptr
1098c     17 2F 02 FB | 	rdlong	local09, local09
10990     04 4E 05 F1 | 	add	fp, #4
10994     A7 2C 02 FB | 	rdlong	local08, fp
10998     16 2F 02 F1 | 	add	local09, local08
1099c     14 2F 62 FC | 	wrlong	local09, local06
109a0     08 4E 85 F1 | 	sub	fp, #8
109a4     A7 2E 02 FB | 	rdlong	local09, fp
109a8     01 2E 06 F1 | 	add	local09, #1
109ac     A7 2E 62 FC | 	wrlong	local09, fp
109b0     10 4E 85 F1 | 	sub	fp, #16
109b4     50 00 00 FF 
109b8     C0 E4 85 F1 | 	sub	objptr, ##41152
109bc     40 FE 9F FD | 	jmp	#LR__1332
109c0                 | LR__1338
109c0                 | LR__1339
109c0     A7 F0 03 F6 | 	mov	ptra, fp
109c4     B2 00 A0 FD | 	call	#popregs_
109c8                 | _do_get_ret
109c8     2D 00 64 FD | 	ret
109cc                 | 
109cc                 | ' 
109cc                 | ' sub  do_put
109cc                 | _do_put
109cc     03 4A 05 F6 | 	mov	COUNT_, #3
109d0     A8 00 A0 FD | 	call	#pushregs_
109d4     28 F0 07 F1 | 	add	ptra, #40
109d8     4A 00 00 FF 
109dc     80 E4 05 F1 | 	add	objptr, ##38016
109e0     F2 1A 02 FB | 	rdlong	arg05, objptr
109e4     0D 19 02 F6 | 	mov	arg04, arg05
109e8     01 18 66 F0 | 	shl	arg04, #1
109ec     0D 19 02 F1 | 	add	arg04, arg05
109f0     02 18 66 F0 | 	shl	arg04, #2
109f4     03 00 00 FF 
109f8     04 E4 85 F1 | 	sub	objptr, ##1540
109fc     F2 18 02 F1 | 	add	arg04, objptr
10a00     0C 1B 02 FB | 	rdlong	arg05, arg04
10a04     A7 1A 62 FC | 	wrlong	arg05, fp
10a08                 | ' numpar=compiledline(lineptr_e).result.uresult
10a08                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10a08     04 1A 0E F2 | 	cmp	arg05, #4 wz
10a0c     47 00 00 FF 
10a10     7C E4 85 F1 | 	sub	objptr, ##36476
10a14     48 00 90 5D |  if_ne	jmp	#LR__1340
10a18     C8 B0 BF FD | 	call	#_pop
10a1c     FF 1A 02 F6 | 	mov	arg05, result3
10a20     1C 4E 05 F1 | 	add	fp, #28
10a24     A7 FA 61 FC | 	wrlong	result1, fp
10a28     04 4E 05 F1 | 	add	fp, #4
10a2c     A7 FC 61 FC | 	wrlong	result2, fp
10a30     04 4E 05 F1 | 	add	fp, #4
10a34     A7 1A 62 FC | 	wrlong	arg05, fp
10a38     08 4E 85 F1 | 	sub	fp, #8
10a3c     A7 12 02 F6 | 	mov	arg01, fp
10a40     1C 4E 85 F1 | 	sub	fp, #28
10a44     60 51 B0 FD | 	call	#_converttoint
10a48     52 00 00 FF 
10a4c     10 E4 05 F1 | 	add	objptr, ##42000
10a50     F2 FA 61 FC | 	wrlong	result1, objptr
10a54     52 00 00 FF 
10a58     10 E4 85 F1 | 	sub	objptr, ##42000
10a5c     18 00 90 FD | 	jmp	#LR__1341
10a60                 | LR__1340
10a60     52 00 00 FF 
10a64     10 E4 05 F1 | 	add	objptr, ##42000
10a68     FF FF FF FF 
10a6c     F2 FE 6B FC | 	wrlong	##-1, objptr
10a70     52 00 00 FF 
10a74     10 E4 85 F1 | 	sub	objptr, ##42000
10a78                 | LR__1341
10a78                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10a78     A7 1A 02 FB | 	rdlong	arg05, fp
10a7c     03 1A 56 F2 | 	cmps	arg05, #3 wc
10a80     40 00 90 CD |  if_b	jmp	#LR__1342
10a84     5C B0 BF FD | 	call	#_pop
10a88     FF 1A 02 F6 | 	mov	arg05, result3
10a8c     1C 4E 05 F1 | 	add	fp, #28
10a90     A7 FA 61 FC | 	wrlong	result1, fp
10a94     04 4E 05 F1 | 	add	fp, #4
10a98     A7 FC 61 FC | 	wrlong	result2, fp
10a9c     04 4E 05 F1 | 	add	fp, #4
10aa0     A7 1A 62 FC | 	wrlong	arg05, fp
10aa4     08 4E 85 F1 | 	sub	fp, #8
10aa8     A7 12 02 F6 | 	mov	arg01, fp
10aac     1C 4E 85 F1 | 	sub	fp, #28
10ab0     F4 50 B0 FD | 	call	#_converttoint
10ab4     08 4E 05 F1 | 	add	fp, #8
10ab8     A7 FA 61 FC | 	wrlong	result1, fp
10abc     08 4E 85 F1 | 	sub	fp, #8
10ac0     0C 00 90 FD | 	jmp	#LR__1343
10ac4                 | LR__1342
10ac4     08 4E 05 F1 | 	add	fp, #8
10ac8     A7 02 68 FC | 	wrlong	#1, fp
10acc     08 4E 85 F1 | 	sub	fp, #8
10ad0                 | LR__1343
10ad0                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10ad0     A7 18 02 FB | 	rdlong	arg04, fp
10ad4     02 18 56 F2 | 	cmps	arg04, #2 wc
10ad8     3C 00 90 CD |  if_b	jmp	#LR__1344
10adc     04 B0 BF FD | 	call	#_pop
10ae0     FF 18 02 F6 | 	mov	arg04, result3
10ae4     1C 4E 05 F1 | 	add	fp, #28
10ae8     A7 FA 61 FC | 	wrlong	result1, fp
10aec     04 4E 05 F1 | 	add	fp, #4
10af0     A7 FC 61 FC | 	wrlong	result2, fp
10af4     04 4E 05 F1 | 	add	fp, #4
10af8     A7 18 62 FC | 	wrlong	arg04, fp
10afc     08 4E 85 F1 | 	sub	fp, #8
10b00     A7 12 02 F6 | 	mov	arg01, fp
10b04     1C 4E 85 F1 | 	sub	fp, #28
10b08     9C 50 B0 FD | 	call	#_converttoint
10b0c     0C 4E 05 F1 | 	add	fp, #12
10b10     A7 FA 61 FC | 	wrlong	result1, fp
10b14     0C 4E 85 F1 | 	sub	fp, #12
10b18                 | LR__1344
10b18     C8 AF BF FD | 	call	#_pop
10b1c     FF 18 02 F6 | 	mov	arg04, result3
10b20     1C 4E 05 F1 | 	add	fp, #28
10b24     A7 FA 61 FC | 	wrlong	result1, fp
10b28     04 4E 05 F1 | 	add	fp, #4
10b2c     A7 FC 61 FC | 	wrlong	result2, fp
10b30     04 4E 05 F1 | 	add	fp, #4
10b34     A7 18 62 FC | 	wrlong	arg04, fp
10b38     08 4E 85 F1 | 	sub	fp, #8
10b3c     A7 12 02 F6 | 	mov	arg01, fp
10b40     1C 4E 85 F1 | 	sub	fp, #28
10b44     60 50 B0 FD | 	call	#_converttoint
10b48     04 4E 05 F1 | 	add	fp, #4
10b4c     A7 FA 61 FC | 	wrlong	result1, fp
10b50     10 4E 05 F1 | 	add	fp, #16
10b54     A7 1E 02 FB | 	rdlong	local01, fp
10b58     14 4E 85 F1 | 	sub	fp, #20
10b5c     02 1E 66 F0 | 	shl	local01, #2
10b60     50 00 00 FF 
10b64     C0 E4 05 F1 | 	add	objptr, ##41152
10b68     F2 1E 02 F1 | 	add	local01, objptr
10b6c     0F 01 68 FC | 	wrlong	#0, local01
10b70                 | ' t1=pop() : channel=converttoint(t1)
10b70                 | ' 
10b70                 | ' getres(j)=0
10b70                 | ' if pos>=0 then
10b70     01 00 00 FF 
10b74     50 E5 05 F1 | 	add	objptr, ##848
10b78     F2 20 02 FB | 	rdlong	local02, objptr
10b7c     52 00 00 FF 
10b80     10 E4 85 F1 | 	sub	objptr, ##42000
10b84     00 20 56 F2 | 	cmps	local02, #0 wc
10b88     C0 01 90 CD |  if_b	jmp	#LR__1350
10b8c     10 4E 05 F1 | 	add	fp, #16
10b90     A7 00 68 FC | 	wrlong	#0, fp
10b94     10 4E 85 F1 | 	sub	fp, #16
10b98                 | '    i=0: do
10b98                 | LR__1345
10b98     14 4E 05 F1 | 	add	fp, #20
10b9c     A7 00 68 FC | 	wrlong	#0, fp
10ba0     14 4E 85 F1 | 	sub	fp, #20
10ba4                 | '    j=0: do    
10ba4                 | LR__1346
10ba4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10ba4     0C 4E 05 F1 | 	add	fp, #12
10ba8     A7 20 02 FB | 	rdlong	local02, fp
10bac     0C 4E 85 F1 | 	sub	fp, #12
10bb0     00 04 00 FF 
10bb4     00 20 56 F2 | 	cmps	local02, ##524288 wc
10bb8     4C 00 90 3D |  if_ae	jmp	#LR__1347
10bbc     14 4E 05 F1 | 	add	fp, #20
10bc0     A7 20 02 FB | 	rdlong	local02, fp
10bc4     10 1F 02 F6 | 	mov	local01, local02
10bc8     4E 00 00 FF 
10bcc     B0 E4 05 F1 | 	add	objptr, ##40112
10bd0     F2 1E 02 F1 | 	add	local01, objptr
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     A7 12 02 FB | 	rdlong	arg01, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 18 02 FB | 	rdlong	arg04, fp
10be4     0A 18 66 F0 | 	shl	arg04, #10
10be8     0C 13 02 F1 | 	add	arg01, arg04
10bec     10 4E 85 F1 | 	sub	fp, #16
10bf0     10 13 02 F1 | 	add	arg01, local02
10bf4     09 FB C1 FA | 	rdbyte	result1, arg01
10bf8     4E 00 00 FF 
10bfc     B0 E4 85 F1 | 	sub	objptr, ##40112
10c00     0F FB 41 FC | 	wrbyte	result1, local01
10c04     48 00 90 FD | 	jmp	#LR__1348
10c08                 | LR__1347
10c08     14 4E 05 F1 | 	add	fp, #20
10c0c     A7 20 02 FB | 	rdlong	local02, fp
10c10     10 1F 02 F6 | 	mov	local01, local02
10c14     4E 00 00 FF 
10c18     B0 E4 05 F1 | 	add	objptr, ##40112
10c1c     F2 1E 02 F1 | 	add	local01, objptr
10c20     08 4E 85 F1 | 	sub	fp, #8
10c24     A7 12 02 FB | 	rdlong	arg01, fp
10c28     04 4E 05 F1 | 	add	fp, #4
10c2c     A7 18 02 FB | 	rdlong	arg04, fp
10c30     0A 18 66 F0 | 	shl	arg04, #10
10c34     0C 13 02 F1 | 	add	arg01, arg04
10c38     10 4E 85 F1 | 	sub	fp, #16
10c3c     10 13 02 F1 | 	add	arg01, local02
10c40     4E 00 00 FF 
10c44     B0 E4 85 F1 | 	sub	objptr, ##40112
10c48     F4 CA B0 FD | 	call	#_pspeek
10c4c     0F FB 41 FC | 	wrbyte	result1, local01
10c50                 | LR__1348
10c50     14 4E 05 F1 | 	add	fp, #20
10c54     A7 20 02 FB | 	rdlong	local02, fp
10c58     01 20 06 F1 | 	add	local02, #1
10c5c     A7 20 62 FC | 	wrlong	local02, fp
10c60     14 4E 85 F1 | 	sub	fp, #20
10c64     02 00 00 FF 
10c68     00 20 56 F2 | 	cmps	local02, ##1024 wc
10c6c     2C 00 90 3D |  if_ae	jmp	#LR__1349
10c70     10 4E 05 F1 | 	add	fp, #16
10c74     A7 1E 02 FB | 	rdlong	local01, fp
10c78     0A 1E 66 F0 | 	shl	local01, #10
10c7c     04 4E 05 F1 | 	add	fp, #4
10c80     A7 20 02 FB | 	rdlong	local02, fp
10c84     10 1F 02 F1 | 	add	local01, local02
10c88     0C 4E 85 F1 | 	sub	fp, #12
10c8c     A7 20 02 FB | 	rdlong	local02, fp
10c90     08 4E 85 F1 | 	sub	fp, #8
10c94     10 1F 5A F2 | 	cmps	local01, local02 wcz
10c98     08 FF 9F ED |  if_be	jmp	#LR__1346
10c9c                 | LR__1349
10c9c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10c9c     04 4E 05 F1 | 	add	fp, #4
10ca0     A7 12 02 FB | 	rdlong	arg01, fp
10ca4     52 00 00 FF 
10ca8     10 E4 05 F1 | 	add	objptr, ##42000
10cac     F2 14 02 FB | 	rdlong	arg02, objptr
10cb0     01 14 06 F1 | 	add	arg02, #1
10cb4     03 00 00 FF 
10cb8     60 E5 85 F1 | 	sub	objptr, ##1888
10cbc     F2 16 02 F6 | 	mov	arg03, objptr
10cc0     4E 00 00 FF 
10cc4     B0 E4 85 F1 | 	sub	objptr, ##40112
10cc8     04 4E 05 F1 | 	add	fp, #4
10ccc     A7 18 02 FB | 	rdlong	arg04, fp
10cd0     08 4E 85 F1 | 	sub	fp, #8
10cd4     01 1A 06 F6 | 	mov	arg05, #1
10cd8     C4 0B B1 FD | 	call	#__system___basic_put
10cdc     18 4E 05 F1 | 	add	fp, #24
10ce0     A7 FA 61 FC | 	wrlong	result1, fp
10ce4     14 4E 85 F1 | 	sub	fp, #20
10ce8     A7 1E 02 FB | 	rdlong	local01, fp
10cec     02 1E 66 F0 | 	shl	local01, #2
10cf0     50 00 00 FF 
10cf4     C0 E4 05 F1 | 	add	objptr, ##41152
10cf8     F2 1E 02 F1 | 	add	local01, objptr
10cfc     0F FB 61 FC | 	wrlong	result1, local01
10d00                 | '    if 1024*i+j>amount then exit loop
10d00     0C 4E 05 F1 | 	add	fp, #12
10d04     A7 20 02 FB | 	rdlong	local02, fp
10d08     0A 20 66 F0 | 	shl	local02, #10
10d0c     04 4E 05 F1 | 	add	fp, #4
10d10     A7 1E 02 FB | 	rdlong	local01, fp
10d14     0F 21 02 F1 | 	add	local02, local01
10d18     0C 4E 85 F1 | 	sub	fp, #12
10d1c     A7 1E 02 FB | 	rdlong	local01, fp
10d20     08 4E 85 F1 | 	sub	fp, #8
10d24     0F 21 5A F2 | 	cmps	local02, local01 wcz
10d28     50 00 00 FF 
10d2c     C0 E4 85 F1 | 	sub	objptr, ##41152
10d30     CC 01 90 1D |  if_a	jmp	#LR__1357
10d34     10 4E 05 F1 | 	add	fp, #16
10d38     A7 20 02 FB | 	rdlong	local02, fp
10d3c     01 20 06 F1 | 	add	local02, #1
10d40     A7 20 62 FC | 	wrlong	local02, fp
10d44     10 4E 85 F1 | 	sub	fp, #16
10d48     4C FE 9F FD | 	jmp	#LR__1345
10d4c                 | LR__1350
10d4c     10 4E 05 F1 | 	add	fp, #16
10d50     A7 00 68 FC | 	wrlong	#0, fp
10d54     10 4E 85 F1 | 	sub	fp, #16
10d58                 | '    i=0: do
10d58                 | LR__1351
10d58     14 4E 05 F1 | 	add	fp, #20
10d5c     A7 00 68 FC | 	wrlong	#0, fp
10d60     14 4E 85 F1 | 	sub	fp, #20
10d64                 | '    j=0: do  
10d64                 | LR__1352
10d64                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10d64     0C 4E 05 F1 | 	add	fp, #12
10d68     A7 20 02 FB | 	rdlong	local02, fp
10d6c     0C 4E 85 F1 | 	sub	fp, #12
10d70     00 04 00 FF 
10d74     00 20 56 F2 | 	cmps	local02, ##524288 wc
10d78     4C 00 90 3D |  if_ae	jmp	#LR__1353
10d7c     14 4E 05 F1 | 	add	fp, #20
10d80     A7 20 02 FB | 	rdlong	local02, fp
10d84     10 1F 02 F6 | 	mov	local01, local02
10d88     4E 00 00 FF 
10d8c     B0 E4 05 F1 | 	add	objptr, ##40112
10d90     F2 1E 02 F1 | 	add	local01, objptr
10d94     08 4E 85 F1 | 	sub	fp, #8
10d98     A7 12 02 FB | 	rdlong	arg01, fp
10d9c     04 4E 05 F1 | 	add	fp, #4
10da0     A7 18 02 FB | 	rdlong	arg04, fp
10da4     0A 18 66 F0 | 	shl	arg04, #10
10da8     0C 13 02 F1 | 	add	arg01, arg04
10dac     10 4E 85 F1 | 	sub	fp, #16
10db0     10 13 02 F1 | 	add	arg01, local02
10db4     09 FB C1 FA | 	rdbyte	result1, arg01
10db8     4E 00 00 FF 
10dbc     B0 E4 85 F1 | 	sub	objptr, ##40112
10dc0     0F FB 41 FC | 	wrbyte	result1, local01
10dc4     48 00 90 FD | 	jmp	#LR__1354
10dc8                 | LR__1353
10dc8     14 4E 05 F1 | 	add	fp, #20
10dcc     A7 20 02 FB | 	rdlong	local02, fp
10dd0     10 1F 02 F6 | 	mov	local01, local02
10dd4     4E 00 00 FF 
10dd8     B0 E4 05 F1 | 	add	objptr, ##40112
10ddc     F2 1E 02 F1 | 	add	local01, objptr
10de0     08 4E 85 F1 | 	sub	fp, #8
10de4     A7 12 02 FB | 	rdlong	arg01, fp
10de8     04 4E 05 F1 | 	add	fp, #4
10dec     A7 18 02 FB | 	rdlong	arg04, fp
10df0     0A 18 66 F0 | 	shl	arg04, #10
10df4     0C 13 02 F1 | 	add	arg01, arg04
10df8     10 4E 85 F1 | 	sub	fp, #16
10dfc     10 13 02 F1 | 	add	arg01, local02
10e00     4E 00 00 FF 
10e04     B0 E4 85 F1 | 	sub	objptr, ##40112
10e08     34 C9 B0 FD | 	call	#_pspeek
10e0c     0F FB 41 FC | 	wrbyte	result1, local01
10e10                 | LR__1354
10e10     14 4E 05 F1 | 	add	fp, #20
10e14     A7 20 02 FB | 	rdlong	local02, fp
10e18     01 20 06 F1 | 	add	local02, #1
10e1c     A7 20 62 FC | 	wrlong	local02, fp
10e20     14 4E 85 F1 | 	sub	fp, #20
10e24     02 00 00 FF 
10e28     00 20 56 F2 | 	cmps	local02, ##1024 wc
10e2c     2C 00 90 3D |  if_ae	jmp	#LR__1355
10e30     10 4E 05 F1 | 	add	fp, #16
10e34     A7 1E 02 FB | 	rdlong	local01, fp
10e38     0A 1E 66 F0 | 	shl	local01, #10
10e3c     04 4E 05 F1 | 	add	fp, #4
10e40     A7 20 02 FB | 	rdlong	local02, fp
10e44     10 1F 02 F1 | 	add	local01, local02
10e48     0C 4E 85 F1 | 	sub	fp, #12
10e4c     A7 20 02 FB | 	rdlong	local02, fp
10e50     08 4E 85 F1 | 	sub	fp, #8
10e54     10 1F 5A F2 | 	cmps	local01, local02 wcz
10e58     08 FF 9F ED |  if_be	jmp	#LR__1352
10e5c                 | LR__1355
10e5c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10e5c     04 4E 05 F1 | 	add	fp, #4
10e60     A7 12 02 FB | 	rdlong	arg01, fp
10e64     4E 00 00 FF 
10e68     B0 E4 05 F1 | 	add	objptr, ##40112
10e6c     F2 16 02 F6 | 	mov	arg03, objptr
10e70     4E 00 00 FF 
10e74     B0 E4 85 F1 | 	sub	objptr, ##40112
10e78     04 4E 05 F1 | 	add	fp, #4
10e7c     A7 18 02 FB | 	rdlong	arg04, fp
10e80     08 4E 85 F1 | 	sub	fp, #8
10e84     00 14 06 F6 | 	mov	arg02, #0
10e88     01 1A 06 F6 | 	mov	arg05, #1
10e8c     10 0A B1 FD | 	call	#__system___basic_put
10e90     18 4E 05 F1 | 	add	fp, #24
10e94     A7 FA 61 FC | 	wrlong	result1, fp
10e98     14 4E 85 F1 | 	sub	fp, #20
10e9c     A7 1E 02 FB | 	rdlong	local01, fp
10ea0     02 1E 66 F0 | 	shl	local01, #2
10ea4     50 00 00 FF 
10ea8     C0 E4 05 F1 | 	add	objptr, ##41152
10eac     F2 1E 02 F1 | 	add	local01, objptr
10eb0     0F FB 61 FC | 	wrlong	result1, local01
10eb4                 | '    if 1024*i+j>amount then exit loop
10eb4     0C 4E 05 F1 | 	add	fp, #12
10eb8     A7 20 02 FB | 	rdlong	local02, fp
10ebc     0A 20 66 F0 | 	shl	local02, #10
10ec0     04 4E 05 F1 | 	add	fp, #4
10ec4     A7 1E 02 FB | 	rdlong	local01, fp
10ec8     0F 21 02 F1 | 	add	local02, local01
10ecc     0C 4E 85 F1 | 	sub	fp, #12
10ed0     A7 22 02 FB | 	rdlong	local03, fp
10ed4     08 4E 85 F1 | 	sub	fp, #8
10ed8     11 21 5A F2 | 	cmps	local02, local03 wcz
10edc     50 00 00 FF 
10ee0     C0 E4 85 F1 | 	sub	objptr, ##41152
10ee4     18 00 90 1D |  if_a	jmp	#LR__1356
10ee8     10 4E 05 F1 | 	add	fp, #16
10eec     A7 20 02 FB | 	rdlong	local02, fp
10ef0     01 20 06 F1 | 	add	local02, #1
10ef4     A7 20 62 FC | 	wrlong	local02, fp
10ef8     10 4E 85 F1 | 	sub	fp, #16
10efc     58 FE 9F FD | 	jmp	#LR__1351
10f00                 | LR__1356
10f00                 | LR__1357
10f00     A7 F0 03 F6 | 	mov	ptra, fp
10f04     B2 00 A0 FD | 	call	#popregs_
10f08                 | _do_put_ret
10f08     2D 00 64 FD | 	ret
10f0c                 | 
10f0c                 | '   
10f0c                 | ' sub do_find_goto
10f0c                 | _do_find_goto
10f0c     03 4A 05 F6 | 	mov	COUNT_, #3
10f10     A8 00 A0 FD | 	call	#pushregs_
10f14     24 F0 07 F1 | 	add	ptra, #36
10f18                 | _do_find_goto_enter
10f18     4A 00 00 FF 
10f1c     80 E4 05 F1 | 	add	objptr, ##38016
10f20     F2 1E 02 FB | 	rdlong	local01, objptr
10f24     0F 21 02 F6 | 	mov	local02, local01
10f28     01 20 66 F0 | 	shl	local02, #1
10f2c     0F 21 02 F1 | 	add	local02, local01
10f30     02 20 66 F0 | 	shl	local02, #2
10f34     03 00 00 FF 
10f38     04 E4 85 F1 | 	sub	objptr, ##1540
10f3c     F2 20 02 F1 | 	add	local02, objptr
10f40     04 20 06 F1 | 	add	local02, #4
10f44     10 21 02 FB | 	rdlong	local02, local02
10f48     A7 20 62 FC | 	wrlong	local02, fp
10f4c     03 00 00 FF 
10f50     08 E4 05 F1 | 	add	objptr, ##1544
10f54     F2 22 02 FB | 	rdlong	local03, objptr
10f58     4A 00 00 FF 
10f5c     84 E4 85 F1 | 	sub	objptr, ##38020
10f60     04 4E 05 F1 | 	add	fp, #4
10f64     A7 22 62 FC | 	wrlong	local03, fp
10f68     04 4E 85 F1 | 	sub	fp, #4
10f6c                 | ' 
10f6c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10f6c                 | '  ' print "find goto"                                                                     'print gotoline 
10f6c                 | ' gotoptr=programstart
10f6c                 | ' do
10f6c                 | LR__1360
10f6c     0C 4E 05 F1 | 	add	fp, #12
10f70     A7 12 02 F6 | 	mov	arg01, fp
10f74     08 4E 85 F1 | 	sub	fp, #8
10f78     A7 14 02 FB | 	rdlong	arg02, fp
10f7c     04 4E 85 F1 | 	sub	fp, #4
10f80     18 16 06 F6 | 	mov	arg03, #24
10f84     0B 00 00 FF 
10f88     CC E4 05 F1 | 	add	objptr, ##5836
10f8c     CC EE B0 FD | 	call	#_psram_spin2_read1
10f90     0B 00 00 FF 
10f94     CC E4 85 F1 | 	sub	objptr, ##5836
10f98                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10f98                 | '   if gotoheader(0)<>$FFFFFFFF then
10f98     0C 4E 05 F1 | 	add	fp, #12
10f9c     A7 22 02 FB | 	rdlong	local03, fp
10fa0     0C 4E 85 F1 | 	sub	fp, #12
10fa4     FF FF 7F FF 
10fa8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10fac     24 00 90 AD |  if_e	jmp	#LR__1361
10fb0     04 4E 05 F1 | 	add	fp, #4
10fb4     A7 22 02 FB | 	rdlong	local03, fp
10fb8     04 4E 05 F1 | 	add	fp, #4
10fbc     A7 22 62 FC | 	wrlong	local03, fp
10fc0     18 4E 05 F1 | 	add	fp, #24
10fc4     A7 22 02 FB | 	rdlong	local03, fp
10fc8     1C 4E 85 F1 | 	sub	fp, #28
10fcc     A7 22 62 FC | 	wrlong	local03, fp
10fd0     04 4E 85 F1 | 	sub	fp, #4
10fd4                 | LR__1361
10fd4     20 4E 05 F1 | 	add	fp, #32
10fd8     A7 22 02 FB | 	rdlong	local03, fp
10fdc     20 4E 85 F1 | 	sub	fp, #32
10fe0     FF FF 3F FF 
10fe4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10fe8     0C 4E 05 51 |  if_ne	add	fp, #12
10fec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10ff0     0C 4E 85 51 |  if_ne	sub	fp, #12
10ff4     FF FF 7F 5F 
10ff8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10ffc     18 00 90 AD |  if_e	jmp	#LR__1362
11000     0C 4E 05 F1 | 	add	fp, #12
11004     A7 22 02 FB | 	rdlong	local03, fp
11008     0C 4E 85 F1 | 	sub	fp, #12
1100c     A7 20 02 FB | 	rdlong	local02, fp
11010     10 23 0A F2 | 	cmp	local03, local02 wz
11014     54 FF 9F 5D |  if_ne	jmp	#LR__1360
11018                 | LR__1362
11018                 | ' 
11018                 | ' if gotoheader(0)=gotoline then
11018     0C 4E 05 F1 | 	add	fp, #12
1101c     A7 22 02 FB | 	rdlong	local03, fp
11020     0C 4E 85 F1 | 	sub	fp, #12
11024     A7 1E 02 FB | 	rdlong	local01, fp
11028     0F 23 0A F2 | 	cmp	local03, local01 wz
1102c     D8 00 90 5D |  if_ne	jmp	#LR__1363
11030     4A 00 00 FF 
11034     80 E4 05 F1 | 	add	objptr, ##38016
11038     F2 1E 02 FB | 	rdlong	local01, objptr
1103c     0F 21 02 F6 | 	mov	local02, local01
11040     01 20 66 F0 | 	shl	local02, #1
11044     0F 21 02 F1 | 	add	local02, local01
11048     02 20 66 F0 | 	shl	local02, #2
1104c     03 00 00 FF 
11050     04 E4 85 F1 | 	sub	objptr, ##1540
11054     F2 20 02 F1 | 	add	local02, objptr
11058     08 4E 05 F1 | 	add	fp, #8
1105c     A7 22 02 FB | 	rdlong	local03, fp
11060     10 23 62 FC | 	wrlong	local03, local02
11064     03 00 00 FF 
11068     04 E4 05 F1 | 	add	objptr, ##1540
1106c     F2 1E 02 FB | 	rdlong	local01, objptr
11070     0F 21 02 F6 | 	mov	local02, local01
11074     01 20 66 F0 | 	shl	local02, #1
11078     0F 21 02 F1 | 	add	local02, local01
1107c     02 20 66 F0 | 	shl	local02, #2
11080     03 00 00 FF 
11084     04 E4 85 F1 | 	sub	objptr, ##1540
11088     F2 20 02 F1 | 	add	local02, objptr
1108c     08 20 06 F1 | 	add	local02, #8
11090     10 9D 68 FC | 	wrlong	#78, local02
11094     03 00 00 FF 
11098     04 E4 05 F1 | 	add	objptr, ##1540
1109c     F2 20 02 FB | 	rdlong	local02, objptr
110a0     10 13 02 F6 | 	mov	arg01, local02
110a4     01 12 66 F0 | 	shl	arg01, #1
110a8     10 13 02 F1 | 	add	arg01, local02
110ac     02 12 66 F0 | 	shl	arg01, #2
110b0     03 00 00 FF 
110b4     04 E4 85 F1 | 	sub	objptr, ##1540
110b8     F2 12 02 F1 | 	add	arg01, objptr
110bc     09 00 00 FF 
110c0     40 E4 05 F1 | 	add	objptr, ##4672
110c4     F2 14 02 FB | 	rdlong	arg02, objptr
110c8     02 22 06 F6 | 	mov	local03, #2
110cc     10 23 02 F1 | 	add	local03, local02
110d0     0B 00 00 FF 
110d4     58 E4 85 F1 | 	sub	objptr, ##5720
110d8     F2 16 02 FB | 	rdlong	arg03, objptr
110dc     0B 23 02 FD | 	qmul	local03, arg03
110e0     08 4E 85 F1 | 	sub	fp, #8
110e4     39 00 00 FF 
110e8     98 E5 85 F1 | 	sub	objptr, ##29592
110ec     18 22 62 FD | 	getqx	local03
110f0     11 15 02 F1 | 	add	arg02, local03
110f4     00 EE B0 FD | 	call	#_psram_spin2_write
110f8     0B 00 00 FF 
110fc     CC E4 85 F1 | 	sub	objptr, ##5836
11100     A0 EE BF FD | 	call	#_do_fast_goto
11104     08 00 90 FD | 	jmp	#LR__1364
11108                 | LR__1363
11108     26 12 06 F6 | 	mov	arg01, #38
1110c     F4 C3 B0 FD | 	call	#_printerror
11110                 | LR__1364
11110     A7 F0 03 F6 | 	mov	ptra, fp
11114     B2 00 A0 FD | 	call	#popregs_
11118                 | _do_find_goto_ret
11118     2D 00 64 FD | 	ret
1111c                 | 
1111c                 | ' 
1111c                 | ' sub do_slow_goto
1111c                 | _do_slow_goto
1111c     02 4A 05 F6 | 	mov	COUNT_, #2
11120     A8 00 A0 FD | 	call	#pushregs_
11124     30 F0 07 F1 | 	add	ptra, #48
11128     B8 A9 BF FD | 	call	#_pop
1112c     FF 1E 02 F6 | 	mov	local01, result3
11130     24 4E 05 F1 | 	add	fp, #36
11134     A7 FA 61 FC | 	wrlong	result1, fp
11138     04 4E 05 F1 | 	add	fp, #4
1113c     A7 FC 61 FC | 	wrlong	result2, fp
11140     04 4E 05 F1 | 	add	fp, #4
11144     A7 1E 62 FC | 	wrlong	local01, fp
11148     08 4E 85 F1 | 	sub	fp, #8
1114c     A7 12 02 F6 | 	mov	arg01, fp
11150     24 4E 85 F1 | 	sub	fp, #36
11154     50 4A B0 FD | 	call	#_converttoint
11158     A7 FA 61 FC | 	wrlong	result1, fp
1115c     4A 00 00 FF 
11160     84 E4 05 F1 | 	add	objptr, ##38020
11164     F2 20 02 FB | 	rdlong	local02, objptr
11168     4A 00 00 FF 
1116c     84 E4 85 F1 | 	sub	objptr, ##38020
11170     04 4E 05 F1 | 	add	fp, #4
11174     A7 20 62 FC | 	wrlong	local02, fp
11178     04 4E 85 F1 | 	sub	fp, #4
1117c                 | ' 
1117c                 | ' t1=pop() : gotoline=converttoint(t1)
1117c                 | ' gotoptr=programstart
1117c                 | ' do
1117c                 | LR__1370
1117c     0C 4E 05 F1 | 	add	fp, #12
11180     A7 12 02 F6 | 	mov	arg01, fp
11184     08 4E 85 F1 | 	sub	fp, #8
11188     A7 14 02 FB | 	rdlong	arg02, fp
1118c     04 4E 85 F1 | 	sub	fp, #4
11190     18 16 06 F6 | 	mov	arg03, #24
11194     0B 00 00 FF 
11198     CC E4 05 F1 | 	add	objptr, ##5836
1119c     BC EC B0 FD | 	call	#_psram_spin2_read1
111a0     0B 00 00 FF 
111a4     CC E4 85 F1 | 	sub	objptr, ##5836
111a8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
111a8                 | '   if gotoheader(0)<>$FFFFFFFF then
111a8     0C 4E 05 F1 | 	add	fp, #12
111ac     A7 20 02 FB | 	rdlong	local02, fp
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     FF FF 7F FF 
111b8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
111bc     24 00 90 AD |  if_e	jmp	#LR__1371
111c0     04 4E 05 F1 | 	add	fp, #4
111c4     A7 20 02 FB | 	rdlong	local02, fp
111c8     04 4E 05 F1 | 	add	fp, #4
111cc     A7 20 62 FC | 	wrlong	local02, fp
111d0     18 4E 05 F1 | 	add	fp, #24
111d4     A7 20 02 FB | 	rdlong	local02, fp
111d8     1C 4E 85 F1 | 	sub	fp, #28
111dc     A7 20 62 FC | 	wrlong	local02, fp
111e0     04 4E 85 F1 | 	sub	fp, #4
111e4                 | LR__1371
111e4     20 4E 05 F1 | 	add	fp, #32
111e8     A7 20 02 FB | 	rdlong	local02, fp
111ec     20 4E 85 F1 | 	sub	fp, #32
111f0     FF FF 3F FF 
111f4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
111f8     0C 4E 05 51 |  if_ne	add	fp, #12
111fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11200     0C 4E 85 51 |  if_ne	sub	fp, #12
11204     FF FF 7F 5F 
11208     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1120c     18 00 90 AD |  if_e	jmp	#LR__1372
11210     0C 4E 05 F1 | 	add	fp, #12
11214     A7 20 02 FB | 	rdlong	local02, fp
11218     0C 4E 85 F1 | 	sub	fp, #12
1121c     A7 16 02 FB | 	rdlong	arg03, fp
11220     0B 21 0A F2 | 	cmp	local02, arg03 wz
11224     54 FF 9F 5D |  if_ne	jmp	#LR__1370
11228                 | LR__1372
11228                 | ' if gotoheader(0)=gotoline then  
11228     0C 4E 05 F1 | 	add	fp, #12
1122c     A7 20 02 FB | 	rdlong	local02, fp
11230     0C 4E 85 F1 | 	sub	fp, #12
11234     A7 1E 02 FB | 	rdlong	local01, fp
11238     0F 21 0A F2 | 	cmp	local02, local01 wz
1123c     60 00 90 5D |  if_ne	jmp	#LR__1373
11240     08 4E 05 F1 | 	add	fp, #8
11244     A7 20 02 FB | 	rdlong	local02, fp
11248     08 4E 85 F1 | 	sub	fp, #8
1124c     50 00 00 FF 
11250     B4 E4 05 F1 | 	add	objptr, ##41140
11254     F2 20 62 FC | 	wrlong	local02, objptr
11258     06 00 00 FF 
1125c     38 E4 85 F1 | 	sub	objptr, ##3128
11260     F2 20 02 FB | 	rdlong	local02, objptr
11264     01 20 86 F1 | 	sub	local02, #1
11268     04 E4 05 F1 | 	add	objptr, #4
1126c     F2 20 62 FC | 	wrlong	local02, objptr
11270                 | '    runptr=oldgotoptr
11270                 | '    lineptr_e=lineptr-1
11270                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11270     06 00 00 FF 
11274     80 E4 05 F1 | 	add	objptr, ##3200
11278     F2 20 02 FB | 	rdlong	local02, objptr
1127c     50 00 00 FF 
11280     00 E5 85 F1 | 	sub	objptr, ##41216
11284     FF FF 3F FF 
11288     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1128c     50 00 00 AF 
11290     00 E5 05 A1 |  if_e	add	objptr, ##41216
11294     F2 00 68 AC |  if_e	wrlong	#0, objptr
11298     50 00 00 AF 
1129c     00 E5 85 A1 |  if_e	sub	objptr, ##41216
112a0                 | LR__1373
112a0     A7 F0 03 F6 | 	mov	ptra, fp
112a4     B2 00 A0 FD | 	call	#popregs_
112a8                 | _do_slow_goto_ret
112a8     2D 00 64 FD | 	ret
112ac                 | 
112ac                 | ' 
112ac                 | ' '----------------------- Error processing
112ac                 | ' 
112ac                 | ' sub do_error
112ac                 | _do_error
112ac     01 4A 05 F6 | 	mov	COUNT_, #1
112b0     A8 00 A0 FD | 	call	#pushregs_
112b4     4A 00 00 FF 
112b8     80 E4 05 F1 | 	add	objptr, ##38016
112bc     F2 18 02 FB | 	rdlong	arg04, objptr
112c0     0C 17 02 F6 | 	mov	arg03, arg04
112c4     01 16 66 F0 | 	shl	arg03, #1
112c8     0C 17 02 F1 | 	add	arg03, arg04
112cc     02 16 66 F0 | 	shl	arg03, #2
112d0     03 00 00 FF 
112d4     04 E4 85 F1 | 	sub	objptr, ##1540
112d8     F2 16 02 F1 | 	add	arg03, objptr
112dc     0B 1F 02 FB | 	rdlong	local01, arg03
112e0                 | ' r=compiledline(lineptr_e).result.uresult
112e0                 | ' print "Error ";r;": ";errors$(r)
112e0     00 12 06 F6 | 	mov	arg01, #0
112e4     47 00 00 FF 
112e8     7C E4 85 F1 | 	sub	objptr, ##36476
112ec     EC 51 B1 FD | 	call	#__system___getiolock_0540
112f0     FD 12 02 F6 | 	mov	arg01, result1
112f4     A4 F7 B0 FD | 	call	#__system___lockmem
112f8     85 01 00 FF 
112fc     6C 14 06 F6 | 	mov	arg02, ##@LR__5469
11300     00 12 06 F6 | 	mov	arg01, #0
11304     00 16 06 F6 | 	mov	arg03, #0
11308     84 04 B1 FD | 	call	#__system___basic_print_string
1130c     00 12 06 F6 | 	mov	arg01, #0
11310     0F 15 02 F6 | 	mov	arg02, local01
11314     00 16 06 F6 | 	mov	arg03, #0
11318     0A 18 06 F6 | 	mov	arg04, #10
1131c     F4 04 B1 FD | 	call	#__system___basic_print_unsigned
11320     85 01 00 FF 
11324     73 14 06 F6 | 	mov	arg02, ##@LR__5470
11328     00 12 06 F6 | 	mov	arg01, #0
1132c     00 16 06 F6 | 	mov	arg03, #0
11330     5C 04 B1 FD | 	call	#__system___basic_print_string
11334     02 1E 66 F0 | 	shl	local01, #2
11338     45 00 00 FF 
1133c     7C E4 05 F1 | 	add	objptr, ##35452
11340     F2 1E 02 F1 | 	add	local01, objptr
11344     0F 15 02 FB | 	rdlong	arg02, local01
11348     00 12 06 F6 | 	mov	arg01, #0
1134c     00 16 06 F6 | 	mov	arg03, #0
11350     45 00 00 FF 
11354     7C E4 85 F1 | 	sub	objptr, ##35452
11358     34 04 B1 FD | 	call	#__system___basic_print_string
1135c     00 12 06 F6 | 	mov	arg01, #0
11360     0A 14 06 F6 | 	mov	arg02, #10
11364     00 16 06 F6 | 	mov	arg03, #0
11368     CC 03 B1 FD | 	call	#__system___basic_print_char
1136c     00 12 06 F6 | 	mov	arg01, #0
11370     68 51 B1 FD | 	call	#__system___getiolock_0540
11374     FD 00 68 FC | 	wrlong	#0, result1
11378     A7 F0 03 F6 | 	mov	ptra, fp
1137c     B2 00 A0 FD | 	call	#popregs_
11380                 | _do_error_ret
11380     2D 00 64 FD | 	ret
11384                 | 
11384                 | ' 
11384                 | ' 
11384                 | ' '------------------ Assigning to a variable  
11384                 | ' 
11384                 | ' function  convertstring(psaddr as ulong) as string
11384                 | _convertstring
11384     04 4A 05 F6 | 	mov	COUNT_, #4
11388     A8 00 A0 FD | 	call	#pushregs_
1138c     09 1F 02 F6 | 	mov	local01, arg01
11390     04 C4 B0 FD | 	call	#_pslpeek
11394     FD 20 02 F6 | 	mov	local02, result1
11398     85 01 00 FF 
1139c     76 22 06 F6 | 	mov	local03, ##@LR__5471
113a0                 | ' 'print "in convertstring: psaddr=";psaddr
113a0                 | ' l=pslpeek(psaddr)
113a0                 | ' 'print "in convertstring: len=";l
113a0                 | ' s="" 
113a0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
113a0     01 24 06 F6 | 	mov	local04, #1
113a4     01 20 06 F1 | 	add	local02, #1
113a8                 | LR__1380
113a8     10 25 52 F2 | 	cmps	local04, local02 wc
113ac     30 00 90 3D |  if_ae	jmp	#LR__1381
113b0     0F 13 02 F6 | 	mov	arg01, local01
113b4     03 12 06 F1 | 	add	arg01, #3
113b8     12 13 02 F1 | 	add	arg01, local04
113bc     80 C3 B0 FD | 	call	#_pspeek
113c0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
113c4     14 19 B1 FD | 	call	#__system__Chr_S
113c8     FD 14 02 F6 | 	mov	arg02, result1
113cc     11 13 02 F6 | 	mov	arg01, local03
113d0     24 F7 B0 FD | 	call	#__system___string_concat
113d4     FD 22 02 F6 | 	mov	local03, result1
113d8     01 24 06 F1 | 	add	local04, #1
113dc     C8 FF 9F FD | 	jmp	#LR__1380
113e0                 | LR__1381
113e0                 | ' 'print "in convertstring: str=";s
113e0                 | ' return s
113e0     11 FB 01 F6 | 	mov	result1, local03
113e4     A7 F0 03 F6 | 	mov	ptra, fp
113e8     B2 00 A0 FD | 	call	#popregs_
113ec                 | _convertstring_ret
113ec     2D 00 64 FD | 	ret
113f0                 | 
113f0                 | ' 
113f0                 | ' sub do_assign
113f0                 | _do_assign
113f0     05 4A 05 F6 | 	mov	COUNT_, #5
113f4     A8 00 A0 FD | 	call	#pushregs_
113f8     44 F0 07 F1 | 	add	ptra, #68
113fc     4A 00 00 FF 
11400     80 E4 05 F1 | 	add	objptr, ##38016
11404     F2 16 02 FB | 	rdlong	arg03, objptr
11408     0B 15 02 F6 | 	mov	arg02, arg03
1140c     01 14 66 F0 | 	shl	arg02, #1
11410     0B 15 02 F1 | 	add	arg02, arg03
11414     02 14 66 F0 | 	shl	arg02, #2
11418     03 00 00 FF 
1141c     04 E4 85 F1 | 	sub	objptr, ##1540
11420     F2 14 02 F1 | 	add	arg02, objptr
11424     0A 15 02 FB | 	rdlong	arg02, arg02
11428     18 4E 05 F1 | 	add	fp, #24
1142c     A7 14 62 FC | 	wrlong	arg02, fp
11430                 | ' 
11430                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
11430                 | ' if variables(varnum).vartype<array_no_type then 
11430     18 4E 85 F1 | 	sub	fp, #24
11434     04 14 66 F0 | 	shl	arg02, #4
11438     32 00 00 FF 
1143c     84 E4 85 F1 | 	sub	objptr, ##25732
11440     F2 14 02 F1 | 	add	arg02, objptr
11444     0C 14 06 F1 | 	add	arg02, #12
11448     0A 17 02 FB | 	rdlong	arg03, arg02
1144c     00 17 16 F2 | 	cmp	arg03, #256 wc
11450     14 00 00 FF 
11454     F8 E5 85 F1 | 	sub	objptr, ##10744
11458     18 01 90 3D |  if_ae	jmp	#LR__1390
1145c     84 A6 BF FD | 	call	#_pop
11460     A7 FA 61 FC | 	wrlong	result1, fp
11464     04 4E 05 F1 | 	add	fp, #4
11468     A7 FC 61 FC | 	wrlong	result2, fp
1146c     04 4E 05 F1 | 	add	fp, #4
11470     A7 FE 61 FC | 	wrlong	result3, fp
11474     08 4E 85 F1 | 	sub	fp, #8
11478     A7 16 02 FB | 	rdlong	arg03, fp
1147c     04 4E 05 F1 | 	add	fp, #4
11480     A7 14 02 FB | 	rdlong	arg02, fp
11484     14 4E 05 F1 | 	add	fp, #20
11488     A7 12 02 FB | 	rdlong	arg01, fp
1148c     04 12 66 F0 | 	shl	arg01, #4
11490     14 00 00 FF 
11494     F8 E5 05 F1 | 	add	objptr, ##10744
11498     F2 12 02 F1 | 	add	arg01, objptr
1149c     04 12 06 F1 | 	add	arg01, #4
114a0     09 17 62 FC | 	wrlong	arg03, arg01
114a4     A7 16 02 FB | 	rdlong	arg03, fp
114a8     04 16 66 F0 | 	shl	arg03, #4
114ac     F2 16 02 F1 | 	add	arg03, objptr
114b0     08 16 06 F1 | 	add	arg03, #8
114b4     0B 15 62 FC | 	wrlong	arg02, arg03
114b8     A7 16 02 FB | 	rdlong	arg03, fp
114bc     04 16 66 F0 | 	shl	arg03, #4
114c0     F2 16 02 F1 | 	add	arg03, objptr
114c4     10 4E 85 F1 | 	sub	fp, #16
114c8     A7 14 02 FB | 	rdlong	arg02, fp
114cc     0C 16 06 F1 | 	add	arg03, #12
114d0     0B 15 62 FC | 	wrlong	arg02, arg03
114d4                 | '   t1=pop() 
114d4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
114d4                 | '   if variables(varnum).vartype<>result_string2 then return
114d4     10 4E 05 F1 | 	add	fp, #16
114d8     A7 16 02 FB | 	rdlong	arg03, fp
114dc     18 4E 85 F1 | 	sub	fp, #24
114e0     04 16 66 F0 | 	shl	arg03, #4
114e4     F2 16 02 F1 | 	add	arg03, objptr
114e8     0C 16 06 F1 | 	add	arg03, #12
114ec     0B 17 02 FB | 	rdlong	arg03, arg03
114f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
114f4     14 00 00 FF 
114f8     F8 E5 85 F1 | 	sub	objptr, ##10744
114fc     E4 04 90 5D |  if_ne	jmp	#LR__1413
11500     18 4E 05 F1 | 	add	fp, #24
11504     A7 16 02 FB | 	rdlong	arg03, fp
11508     0B 1F 02 F6 | 	mov	local01, arg03
1150c     04 1E 66 F0 | 	shl	local01, #4
11510     14 00 00 FF 
11514     F8 E5 05 F1 | 	add	objptr, ##10744
11518     F2 1E 02 F1 | 	add	local01, objptr
1151c     18 4E 85 F1 | 	sub	fp, #24
11520     04 16 66 F0 | 	shl	arg03, #4
11524     F2 16 02 F1 | 	add	arg03, objptr
11528     04 16 06 F1 | 	add	arg03, #4
1152c     0B 13 02 FB | 	rdlong	arg01, arg03
11530     14 00 00 FF 
11534     F8 E5 85 F1 | 	sub	objptr, ##10744
11538     48 FE BF FD | 	call	#_convertstring
1153c     04 1E 06 F1 | 	add	local01, #4
11540     0F FB 61 FC | 	wrlong	result1, local01
11544     18 4E 05 F1 | 	add	fp, #24
11548     A7 1E 02 FB | 	rdlong	local01, fp
1154c     18 4E 85 F1 | 	sub	fp, #24
11550     04 1E 66 F0 | 	shl	local01, #4
11554     14 00 00 FF 
11558     F8 E5 05 F1 | 	add	objptr, ##10744
1155c     F2 1E 02 F1 | 	add	local01, objptr
11560     0C 1E 06 F1 | 	add	local01, #12
11564     0F 3F 68 FC | 	wrlong	#31, local01
11568                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
11568                 | '   variables(varnum).vartype=result_string
11568                 | '   return
11568     14 00 00 FF 
1156c     F8 E5 85 F1 | 	sub	objptr, ##10744
11570     70 04 90 FD | 	jmp	#LR__1413
11574                 | LR__1390
11574                 | ' for i=0 to 2 : arrid(i)=0 : next i
11574     1C 4E 05 F1 | 	add	fp, #28
11578     A7 00 68 FC | 	wrlong	#0, fp
1157c     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
11580                 | LR__1391
11580     A7 1E 02 FB | 	rdlong	local01, fp
11584     02 1E 66 F0 | 	shl	local01, #2
11588     18 4E 05 F1 | 	add	fp, #24
1158c     A7 1E 02 F1 | 	add	local01, fp
11590     0F 01 68 FC | 	wrlong	#0, local01
11594     18 4E 85 F1 | 	sub	fp, #24
11598     A7 1E 02 FB | 	rdlong	local01, fp
1159c     01 1E 06 F1 | 	add	local01, #1
115a0     A7 1E 62 FC | 	wrlong	local01, fp
115a4     03 1E 16 F2 | 	cmp	local01, #3 wc
115a8     D4 FF 9F CD |  if_b	jmp	#LR__1391
115ac                 | LR__1392
115ac     4A 00 00 FF 
115b0     80 E4 05 F1 | 	add	objptr, ##38016
115b4     F2 16 02 FB | 	rdlong	arg03, objptr
115b8     0B 1F 02 F6 | 	mov	local01, arg03
115bc     01 1E 66 F0 | 	shl	local01, #1
115c0     0B 1F 02 F1 | 	add	local01, arg03
115c4     02 1E 66 F0 | 	shl	local01, #2
115c8     03 00 00 FF 
115cc     04 E4 85 F1 | 	sub	objptr, ##1540
115d0     F2 1E 02 F1 | 	add	local01, objptr
115d4     04 1E 06 F1 | 	add	local01, #4
115d8     0F 21 02 FB | 	rdlong	local02, local01
115dc     04 4E 05 F1 | 	add	fp, #4
115e0     A7 20 62 FC | 	wrlong	local02, fp
115e4     20 4E 85 F1 | 	sub	fp, #32
115e8     47 00 00 FF 
115ec     7C E4 85 F1 | 	sub	objptr, ##36476
115f0     F0 A4 BF FD | 	call	#_pop
115f4     A7 FA 61 FC | 	wrlong	result1, fp
115f8     04 4E 05 F1 | 	add	fp, #4
115fc     A7 FC 61 FC | 	wrlong	result2, fp
11600     04 4E 05 F1 | 	add	fp, #4
11604     A7 FE 61 FC | 	wrlong	result3, fp
11608                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
11608                 | ' t1=pop() ' var value
11608                 | ' if numpar>0 then
11608     18 4E 05 F1 | 	add	fp, #24
1160c     A7 22 02 FB | 	rdlong	local03, fp
11610     20 4E 85 F1 | 	sub	fp, #32
11614     01 22 16 F2 | 	cmp	local03, #1 wc
11618     78 00 90 CD |  if_b	jmp	#LR__1395
1161c                 | '   for i=numpar to 1 step -1
1161c     20 4E 05 F1 | 	add	fp, #32
11620     A7 24 0A FB | 	rdlong	local04, fp wz
11624     04 4E 85 F1 | 	sub	fp, #4
11628     A7 24 62 FC | 	wrlong	local04, fp
1162c     1C 4E 85 F1 | 	sub	fp, #28
11630     60 00 90 AD |  if_e	jmp	#LR__1394
11634                 | LR__1393
11634     AC A4 BF FD | 	call	#_pop
11638     0C 4E 05 F1 | 	add	fp, #12
1163c     A7 FA 61 FC | 	wrlong	result1, fp
11640     04 4E 05 F1 | 	add	fp, #4
11644     A7 FC 61 FC | 	wrlong	result2, fp
11648     04 4E 05 F1 | 	add	fp, #4
1164c     A7 FE 61 FC | 	wrlong	result3, fp
11650     08 4E 05 F1 | 	add	fp, #8
11654     A7 22 02 FB | 	rdlong	local03, fp
11658     01 22 86 F1 | 	sub	local03, #1
1165c     02 22 66 F0 | 	shl	local03, #2
11660     18 4E 05 F1 | 	add	fp, #24
11664     A7 22 02 F1 | 	add	local03, fp
11668     28 4E 85 F1 | 	sub	fp, #40
1166c     A7 12 02 F6 | 	mov	arg01, fp
11670     0C 4E 85 F1 | 	sub	fp, #12
11674     30 45 B0 FD | 	call	#_converttoint
11678     11 FB 61 FC | 	wrlong	result1, local03
1167c     1C 4E 05 F1 | 	add	fp, #28
11680     A7 24 02 FB | 	rdlong	local04, fp
11684     01 24 8E F1 | 	sub	local04, #1 wz
11688     A7 24 62 FC | 	wrlong	local04, fp
1168c     1C 4E 85 F1 | 	sub	fp, #28
11690     A0 FF 9F 5D |  if_ne	jmp	#LR__1393
11694                 | LR__1394
11694                 | LR__1395
11694     18 4E 05 F1 | 	add	fp, #24
11698     A7 1E 02 FB | 	rdlong	local01, fp
1169c     04 1E 66 F0 | 	shl	local01, #4
116a0     14 00 00 FF 
116a4     F8 E5 05 F1 | 	add	objptr, ##10744
116a8     F2 1E 02 F1 | 	add	local01, objptr
116ac     04 1E 06 F1 | 	add	local01, #4
116b0     0F 13 02 FB | 	rdlong	arg01, local01
116b4     0C 4E 05 F1 | 	add	fp, #12
116b8     A7 12 62 FC | 	wrlong	arg01, fp
116bc     24 4E 85 F1 | 	sub	fp, #36
116c0     14 00 00 FF 
116c4     F8 E5 85 F1 | 	sub	objptr, ##10744
116c8     CC C0 B0 FD | 	call	#_pslpeek
116cc     FD 24 32 F9 | 	getword	local04, result1, #0
116d0     28 4E 05 F1 | 	add	fp, #40
116d4     A7 24 62 FC | 	wrlong	local04, fp
116d8     04 4E 85 F1 | 	sub	fp, #4
116dc     A7 12 02 FB | 	rdlong	arg01, fp
116e0     24 4E 85 F1 | 	sub	fp, #36
116e4     02 12 06 F1 | 	add	arg01, #2
116e8     54 C0 B0 FD | 	call	#_pspeek
116ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
116f0     2C 4E 05 F1 | 	add	fp, #44
116f4     A7 FA 61 FC | 	wrlong	result1, fp
116f8                 | ' esize=pspeek(arrptr+2)
116f8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
116f8     08 4E 85 F1 | 	sub	fp, #8
116fc     A7 12 02 FB | 	rdlong	arg01, fp
11700     24 4E 85 F1 | 	sub	fp, #36
11704     04 12 06 F1 | 	add	arg01, #4
11708     8C C0 B0 FD | 	call	#_pslpeek
1170c     FD 24 02 F6 | 	mov	local04, result1
11710     34 4E 05 F1 | 	add	fp, #52
11714     A7 1E 02 FB | 	rdlong	local01, fp
11718     34 4E 85 F1 | 	sub	fp, #52
1171c     12 1F 12 F2 | 	cmp	local01, local04 wc
11720     54 00 90 3D |  if_ae	jmp	#LR__1396
11724     24 4E 05 F1 | 	add	fp, #36
11728     A7 12 02 FB | 	rdlong	arg01, fp
1172c     24 4E 85 F1 | 	sub	fp, #36
11730     08 12 06 F1 | 	add	arg01, #8
11734     60 C0 B0 FD | 	call	#_pslpeek
11738     FD 1E 02 F6 | 	mov	local01, result1
1173c     38 4E 05 F1 | 	add	fp, #56
11740     A7 24 02 FB | 	rdlong	local04, fp
11744     38 4E 85 F1 | 	sub	fp, #56
11748     0F 25 12 F2 | 	cmp	local04, local01 wc
1174c     28 00 90 3D |  if_ae	jmp	#LR__1396
11750     24 4E 05 F1 | 	add	fp, #36
11754     A7 12 02 FB | 	rdlong	arg01, fp
11758     24 4E 85 F1 | 	sub	fp, #36
1175c     0C 12 06 F1 | 	add	arg01, #12
11760     34 C0 B0 FD | 	call	#_pslpeek
11764     3C 4E 05 F1 | 	add	fp, #60
11768     A7 24 02 FB | 	rdlong	local04, fp
1176c     3C 4E 85 F1 | 	sub	fp, #60
11770     FD 24 12 F2 | 	cmp	local04, result1 wc
11774     0C 00 90 CD |  if_b	jmp	#LR__1397
11778                 | LR__1396
11778     31 12 06 F6 | 	mov	arg01, #49
1177c     84 BD B0 FD | 	call	#_printerror
11780     60 02 90 FD | 	jmp	#LR__1413
11784                 | LR__1397
11784     24 4E 05 F1 | 	add	fp, #36
11788     A7 12 02 FB | 	rdlong	arg01, fp
1178c     09 25 02 F6 | 	mov	local04, arg01
11790     10 24 06 F1 | 	add	local04, #16
11794     24 4E 85 F1 | 	sub	fp, #36
11798     04 12 06 F1 | 	add	arg01, #4
1179c     F8 BF B0 FD | 	call	#_pslpeek
117a0     FD 1E 02 F6 | 	mov	local01, result1
117a4     38 4E 05 F1 | 	add	fp, #56
117a8     A7 20 02 FB | 	rdlong	local02, fp
117ac     10 1F 02 FD | 	qmul	local01, local02
117b0     04 4E 85 F1 | 	sub	fp, #4
117b4     A7 22 02 FB | 	rdlong	local03, fp
117b8     10 4E 85 F1 | 	sub	fp, #16
117bc     A7 12 02 FB | 	rdlong	arg01, fp
117c0     24 4E 85 F1 | 	sub	fp, #36
117c4     08 12 06 F1 | 	add	arg01, #8
117c8     18 20 62 FD | 	getqx	local02
117cc     10 23 02 F1 | 	add	local03, local02
117d0     C4 BF B0 FD | 	call	#_pslpeek
117d4     FD 20 02 F6 | 	mov	local02, result1
117d8     24 4E 05 F1 | 	add	fp, #36
117dc     A7 12 02 FB | 	rdlong	arg01, fp
117e0     24 4E 85 F1 | 	sub	fp, #36
117e4     04 12 06 F1 | 	add	arg01, #4
117e8     AC BF B0 FD | 	call	#_pslpeek
117ec     FD 20 02 FD | 	qmul	local02, result1
117f0     3C 4E 05 F1 | 	add	fp, #60
117f4     A7 20 02 FB | 	rdlong	local02, fp
117f8     18 1E 62 FD | 	getqx	local01
117fc     10 1F 02 FD | 	qmul	local01, local02
11800     10 4E 85 F1 | 	sub	fp, #16
11804     A7 20 02 FB | 	rdlong	local02, fp
11808     18 1E 62 FD | 	getqx	local01
1180c     0F 23 02 F1 | 	add	local03, local01
11810     11 21 02 FD | 	qmul	local02, local03
11814     04 4E 05 F1 | 	add	fp, #4
11818                 | ' 
11818                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
11818                 | ' select case arrtype
11818     18 22 62 FD | 	getqx	local03
1181c     11 25 02 F1 | 	add	local04, local03
11820     A7 24 62 FC | 	wrlong	local04, fp
11824     08 4E 85 F1 | 	sub	fp, #8
11828     A7 26 02 FB | 	rdlong	local05, fp
1182c     28 4E 85 F1 | 	sub	fp, #40
11830     00 27 86 F1 | 	sub	local05, #256
11834     0C 26 26 F3 | 	fle	local05, #12
11838     30 26 62 FD | 	jmprel	local05
1183c                 | LR__1398
1183c     30 00 90 FD | 	jmp	#LR__1399
11840     58 00 90 FD | 	jmp	#LR__1400
11844     6C 00 90 FD | 	jmp	#LR__1401
11848     80 00 90 FD | 	jmp	#LR__1402
1184c     B0 00 90 FD | 	jmp	#LR__1403
11850     E0 00 90 FD | 	jmp	#LR__1404
11854     F4 00 90 FD | 	jmp	#LR__1405
11858     08 01 90 FD | 	jmp	#LR__1406
1185c     1C 01 90 FD | 	jmp	#LR__1407
11860     30 01 90 FD | 	jmp	#LR__1408
11864     44 01 90 FD | 	jmp	#LR__1409
11868     58 01 90 FD | 	jmp	#LR__1410
1186c     6C 01 90 FD | 	jmp	#LR__1411
11870                 | LR__1399
11870     A7 12 02 F6 | 	mov	arg01, fp
11874     30 4E 05 F1 | 	add	fp, #48
11878     A7 14 02 FB | 	rdlong	arg02, fp
1187c     30 4E 85 F1 | 	sub	fp, #48
11880     0C 16 06 F6 | 	mov	arg03, #12
11884     0B 00 00 FF 
11888     CC E4 05 F1 | 	add	objptr, ##5836
1188c     68 E6 B0 FD | 	call	#_psram_spin2_write
11890     0B 00 00 FF 
11894     CC E4 85 F1 | 	sub	objptr, ##5836
11898     48 01 90 FD | 	jmp	#LR__1412
1189c                 | LR__1400
1189c     30 4E 05 F1 | 	add	fp, #48
118a0     A7 12 02 FB | 	rdlong	arg01, fp
118a4     30 4E 85 F1 | 	sub	fp, #48
118a8     A7 14 02 FB | 	rdlong	arg02, fp
118ac     48 BE B0 FD | 	call	#_pspoke
118b0     30 01 90 FD | 	jmp	#LR__1412
118b4                 | LR__1401
118b4     30 4E 05 F1 | 	add	fp, #48
118b8     A7 12 02 FB | 	rdlong	arg01, fp
118bc     30 4E 85 F1 | 	sub	fp, #48
118c0     A7 14 02 FB | 	rdlong	arg02, fp
118c4     30 BE B0 FD | 	call	#_pspoke
118c8     18 01 90 FD | 	jmp	#LR__1412
118cc                 | LR__1402
118cc     30 4E 05 F1 | 	add	fp, #48
118d0     A7 12 02 FB | 	rdlong	arg01, fp
118d4     30 4E 85 F1 | 	sub	fp, #48
118d8     A7 14 02 FB | 	rdlong	arg02, fp
118dc     18 BE B0 FD | 	call	#_pspoke
118e0     30 4E 05 F1 | 	add	fp, #48
118e4     A7 12 02 FB | 	rdlong	arg01, fp
118e8     30 4E 85 F1 | 	sub	fp, #48
118ec     01 12 06 F1 | 	add	arg01, #1
118f0     A7 14 02 FB | 	rdlong	arg02, fp
118f4     08 14 46 F0 | 	shr	arg02, #8
118f8     FC BD B0 FD | 	call	#_pspoke
118fc     E4 00 90 FD | 	jmp	#LR__1412
11900                 | LR__1403
11900     30 4E 05 F1 | 	add	fp, #48
11904     A7 12 02 FB | 	rdlong	arg01, fp
11908     30 4E 85 F1 | 	sub	fp, #48
1190c     A7 14 02 FB | 	rdlong	arg02, fp
11910     E4 BD B0 FD | 	call	#_pspoke
11914     30 4E 05 F1 | 	add	fp, #48
11918     A7 12 02 FB | 	rdlong	arg01, fp
1191c     30 4E 85 F1 | 	sub	fp, #48
11920     01 12 06 F1 | 	add	arg01, #1
11924     A7 14 02 FB | 	rdlong	arg02, fp
11928     08 14 46 F0 | 	shr	arg02, #8
1192c     C8 BD B0 FD | 	call	#_pspoke
11930     B0 00 90 FD | 	jmp	#LR__1412
11934                 | LR__1404
11934     30 4E 05 F1 | 	add	fp, #48
11938     A7 12 02 FB | 	rdlong	arg01, fp
1193c     30 4E 85 F1 | 	sub	fp, #48
11940     A7 14 02 FB | 	rdlong	arg02, fp
11944     20 BD B0 FD | 	call	#_pslpoke
11948     98 00 90 FD | 	jmp	#LR__1412
1194c                 | LR__1405
1194c     30 4E 05 F1 | 	add	fp, #48
11950     A7 12 02 FB | 	rdlong	arg01, fp
11954     30 4E 85 F1 | 	sub	fp, #48
11958     A7 14 02 FB | 	rdlong	arg02, fp
1195c     08 BD B0 FD | 	call	#_pslpoke
11960     80 00 90 FD | 	jmp	#LR__1412
11964                 | LR__1406
11964     30 4E 05 F1 | 	add	fp, #48
11968     A7 12 02 FB | 	rdlong	arg01, fp
1196c     30 4E 85 F1 | 	sub	fp, #48
11970     A7 14 02 FB | 	rdlong	arg02, fp
11974     F0 BC B0 FD | 	call	#_pslpoke
11978     68 00 90 FD | 	jmp	#LR__1412
1197c                 | LR__1407
1197c     30 4E 05 F1 | 	add	fp, #48
11980     A7 12 02 FB | 	rdlong	arg01, fp
11984     30 4E 85 F1 | 	sub	fp, #48
11988     A7 14 02 FB | 	rdlong	arg02, fp
1198c     D8 BC B0 FD | 	call	#_pslpoke
11990     50 00 90 FD | 	jmp	#LR__1412
11994                 | LR__1408
11994     30 4E 05 F1 | 	add	fp, #48
11998     A7 12 02 FB | 	rdlong	arg01, fp
1199c     30 4E 85 F1 | 	sub	fp, #48
119a0     A7 14 02 FB | 	rdlong	arg02, fp
119a4     C0 BC B0 FD | 	call	#_pslpoke
119a8     38 00 90 FD | 	jmp	#LR__1412
119ac                 | LR__1409
119ac     30 4E 05 F1 | 	add	fp, #48
119b0     A7 12 02 FB | 	rdlong	arg01, fp
119b4     30 4E 85 F1 | 	sub	fp, #48
119b8     A7 14 02 FB | 	rdlong	arg02, fp
119bc     A8 BC B0 FD | 	call	#_pslpoke
119c0     20 00 90 FD | 	jmp	#LR__1412
119c4                 | LR__1410
119c4     30 4E 05 F1 | 	add	fp, #48
119c8     A7 12 02 FB | 	rdlong	arg01, fp
119cc     30 4E 85 F1 | 	sub	fp, #48
119d0     A7 14 02 FB | 	rdlong	arg02, fp
119d4     90 BC B0 FD | 	call	#_pslpoke
119d8     08 00 90 FD | 	jmp	#LR__1412
119dc                 | LR__1411
119dc     32 12 06 F6 | 	mov	arg01, #50
119e0     20 BB B0 FD | 	call	#_printerror
119e4                 | LR__1412
119e4                 | LR__1413
119e4     A7 F0 03 F6 | 	mov	ptra, fp
119e8     B2 00 A0 FD | 	call	#popregs_
119ec                 | _do_assign_ret
119ec     2D 00 64 FD | 	ret
119f0                 | 
119f0                 | ' 
119f0                 | ' 
119f0                 | ' ' --------------------- Read a variable and push to the stack
119f0                 | ' 
119f0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
119f0                 | ' 
119f0                 | ' sub do_getvar
119f0                 | _do_getvar
119f0     04 4A 05 F6 | 	mov	COUNT_, #4
119f4     A8 00 A0 FD | 	call	#pushregs_
119f8     3C F0 07 F1 | 	add	ptra, #60
119fc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
119fc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
119fc     4A 00 00 FF 
11a00     80 E4 05 F1 | 	add	objptr, ##38016
11a04     F2 1E 02 FB | 	rdlong	local01, objptr
11a08     0F 17 02 F6 | 	mov	arg03, local01
11a0c     01 16 66 F0 | 	shl	arg03, #1
11a10     0F 17 02 F1 | 	add	arg03, local01
11a14     02 16 66 F0 | 	shl	arg03, #2
11a18     03 00 00 FF 
11a1c     04 E4 85 F1 | 	sub	objptr, ##1540
11a20     F2 16 02 F1 | 	add	arg03, objptr
11a24     04 16 06 F1 | 	add	arg03, #4
11a28     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11a2c     47 00 00 FF 
11a30     7C E4 85 F1 | 	sub	objptr, ##36476
11a34     C4 00 90 5D |  if_ne	jmp	#LR__1421
11a38     4A 00 00 FF 
11a3c     80 E4 05 F1 | 	add	objptr, ##38016
11a40     F2 1E 02 FB | 	rdlong	local01, objptr
11a44     0F 13 02 F6 | 	mov	arg01, local01
11a48     01 12 66 F0 | 	shl	arg01, #1
11a4c     0F 13 02 F1 | 	add	arg01, local01
11a50     02 12 66 F0 | 	shl	arg01, #2
11a54     03 00 00 FF 
11a58     04 E4 85 F1 | 	sub	objptr, ##1540
11a5c     F2 12 02 F1 | 	add	arg01, objptr
11a60     09 1F 02 FB | 	rdlong	local01, arg01
11a64     04 1E 66 F0 | 	shl	local01, #4
11a68     32 00 00 FF 
11a6c     84 E4 85 F1 | 	sub	objptr, ##25732
11a70     F2 1E 02 F1 | 	add	local01, objptr
11a74     04 1E 06 F1 | 	add	local01, #4
11a78     0F 13 02 FB | 	rdlong	arg01, local01
11a7c     04 1E 06 F1 | 	add	local01, #4
11a80     0F 1F 02 FB | 	rdlong	local01, local01
11a84     A7 12 62 FC | 	wrlong	arg01, fp
11a88     04 4E 05 F1 | 	add	fp, #4
11a8c     A7 1E 62 FC | 	wrlong	local01, fp
11a90     35 00 00 FF 
11a94     88 E4 05 F1 | 	add	objptr, ##27272
11a98     F2 1E 02 FB | 	rdlong	local01, objptr
11a9c     0F 13 02 F6 | 	mov	arg01, local01
11aa0     01 12 66 F0 | 	shl	arg01, #1
11aa4     0F 13 02 F1 | 	add	arg01, local01
11aa8     02 12 66 F0 | 	shl	arg01, #2
11aac     03 00 00 FF 
11ab0     04 E4 85 F1 | 	sub	objptr, ##1540
11ab4     F2 12 02 F1 | 	add	arg01, objptr
11ab8     09 1F 02 FB | 	rdlong	local01, arg01
11abc     04 1E 66 F0 | 	shl	local01, #4
11ac0     32 00 00 FF 
11ac4     84 E4 85 F1 | 	sub	objptr, ##25732
11ac8     F2 1E 02 F1 | 	add	local01, objptr
11acc     0C 1E 06 F1 | 	add	local01, #12
11ad0     0F 1F 02 FB | 	rdlong	local01, local01
11ad4     04 4E 05 F1 | 	add	fp, #4
11ad8     A7 1E 62 FC | 	wrlong	local01, fp
11adc                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11adc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11adc                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11adc     08 4E 85 F1 | 	sub	fp, #8
11ae0     00 1F 16 F2 | 	cmp	local01, #256 wc
11ae4     14 00 00 FF 
11ae8     F8 E5 85 F1 | 	sub	objptr, ##10744
11aec     0C 00 90 3D |  if_ae	jmp	#LR__1420
11af0     A7 12 02 F6 | 	mov	arg01, fp
11af4     84 A0 BF FD | 	call	#_push
11af8     A0 04 90 FD | 	jmp	#LR__1442
11afc                 | LR__1420
11afc                 | LR__1421
11afc     4A 00 00 FF 
11b00     80 E4 05 F1 | 	add	objptr, ##38016
11b04     F2 16 02 FB | 	rdlong	arg03, objptr
11b08     0B 15 02 F6 | 	mov	arg02, arg03
11b0c     01 14 66 F0 | 	shl	arg02, #1
11b10     0B 15 02 F1 | 	add	arg02, arg03
11b14     02 14 66 F0 | 	shl	arg02, #2
11b18     03 00 00 FF 
11b1c     04 E4 85 F1 | 	sub	objptr, ##1540
11b20     F2 14 02 F1 | 	add	arg02, objptr
11b24     0A 17 02 FB | 	rdlong	arg03, arg02
11b28     04 16 66 F0 | 	shl	arg03, #4
11b2c     32 00 00 FF 
11b30     84 E4 85 F1 | 	sub	objptr, ##25732
11b34     F2 16 02 F1 | 	add	arg03, objptr
11b38     04 16 06 F1 | 	add	arg03, #4
11b3c     0B 13 02 FB | 	rdlong	arg01, arg03
11b40     0C 4E 05 F1 | 	add	fp, #12
11b44     A7 12 62 FC | 	wrlong	arg01, fp
11b48     0C 4E 85 F1 | 	sub	fp, #12
11b4c     14 00 00 FF 
11b50     F8 E5 85 F1 | 	sub	objptr, ##10744
11b54     40 BC B0 FD | 	call	#_pslpeek
11b58     FD FA 31 F9 | 	getword	result1, result1, #0
11b5c     10 4E 05 F1 | 	add	fp, #16
11b60     A7 FA 61 FC | 	wrlong	result1, fp
11b64     4A 00 00 FF 
11b68     80 E4 05 F1 | 	add	objptr, ##38016
11b6c     F2 16 02 FB | 	rdlong	arg03, objptr
11b70     0B 15 02 F6 | 	mov	arg02, arg03
11b74     01 14 66 F0 | 	shl	arg02, #1
11b78     0B 15 02 F1 | 	add	arg02, arg03
11b7c     02 14 66 F0 | 	shl	arg02, #2
11b80     03 00 00 FF 
11b84     04 E4 85 F1 | 	sub	objptr, ##1540
11b88     F2 14 02 F1 | 	add	arg02, objptr
11b8c     04 14 06 F1 | 	add	arg02, #4
11b90     0A 17 02 FB | 	rdlong	arg03, arg02
11b94     04 4E 05 F1 | 	add	fp, #4
11b98     A7 16 62 FC | 	wrlong	arg03, fp
11b9c     08 4E 85 F1 | 	sub	fp, #8
11ba0     A7 12 02 FB | 	rdlong	arg01, fp
11ba4     0C 4E 85 F1 | 	sub	fp, #12
11ba8     02 12 06 F1 | 	add	arg01, #2
11bac     47 00 00 FF 
11bb0     7C E4 85 F1 | 	sub	objptr, ##36476
11bb4     88 BB B0 FD | 	call	#_pspeek
11bb8     FD FA E1 F8 | 	getbyte	result1, result1, #0
11bbc     18 4E 05 F1 | 	add	fp, #24
11bc0     A7 FA 61 FC | 	wrlong	result1, fp
11bc4     0C 4E 85 F1 | 	sub	fp, #12
11bc8     A7 12 02 FB | 	rdlong	arg01, fp
11bcc     0C 4E 85 F1 | 	sub	fp, #12
11bd0     04 12 06 F1 | 	add	arg01, #4
11bd4     C0 BB B0 FD | 	call	#_pslpeek
11bd8     1C 4E 05 F1 | 	add	fp, #28
11bdc     A7 FA 61 FC | 	wrlong	result1, fp
11be0     10 4E 85 F1 | 	sub	fp, #16
11be4     A7 12 02 FB | 	rdlong	arg01, fp
11be8     0C 4E 85 F1 | 	sub	fp, #12
11bec     08 12 06 F1 | 	add	arg01, #8
11bf0     A4 BB B0 FD | 	call	#_pslpeek
11bf4     20 4E 05 F1 | 	add	fp, #32
11bf8     A7 FA 61 FC | 	wrlong	result1, fp
11bfc     14 4E 85 F1 | 	sub	fp, #20
11c00     A7 12 02 FB | 	rdlong	arg01, fp
11c04     0C 4E 85 F1 | 	sub	fp, #12
11c08     0C 12 06 F1 | 	add	arg01, #12
11c0c     88 BB B0 FD | 	call	#_pslpeek
11c10     24 4E 05 F1 | 	add	fp, #36
11c14     A7 FA 61 FC | 	wrlong	result1, fp
11c18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11c18                 | ' esize=pspeek(arrptr+2)
11c18                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11c18                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11c18                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11c18                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11c18     10 4E 85 F1 | 	sub	fp, #16
11c1c     A7 16 02 FB | 	rdlong	arg03, fp
11c20     14 4E 85 F1 | 	sub	fp, #20
11c24     03 16 16 F2 | 	cmp	arg03, #3 wc
11c28     38 00 90 CD |  if_b	jmp	#LR__1422
11c2c     B4 9E BF FD | 	call	#_pop
11c30     FF 16 02 F6 | 	mov	arg03, result3
11c34     A7 FA 61 FC | 	wrlong	result1, fp
11c38     04 4E 05 F1 | 	add	fp, #4
11c3c     A7 FC 61 FC | 	wrlong	result2, fp
11c40     04 4E 05 F1 | 	add	fp, #4
11c44     A7 16 62 FC | 	wrlong	arg03, fp
11c48     08 4E 85 F1 | 	sub	fp, #8
11c4c     A7 12 02 F6 | 	mov	arg01, fp
11c50     54 3F B0 FD | 	call	#_converttoint
11c54     30 4E 05 F1 | 	add	fp, #48
11c58     A7 FA 61 FC | 	wrlong	result1, fp
11c5c     30 4E 85 F1 | 	sub	fp, #48
11c60     0C 00 90 FD | 	jmp	#LR__1423
11c64                 | LR__1422
11c64     30 4E 05 F1 | 	add	fp, #48
11c68     A7 00 68 FC | 	wrlong	#0, fp
11c6c     30 4E 85 F1 | 	sub	fp, #48
11c70                 | LR__1423
11c70                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11c70     14 4E 05 F1 | 	add	fp, #20
11c74     A7 16 02 FB | 	rdlong	arg03, fp
11c78     14 4E 85 F1 | 	sub	fp, #20
11c7c     02 16 16 F2 | 	cmp	arg03, #2 wc
11c80     38 00 90 CD |  if_b	jmp	#LR__1424
11c84     5C 9E BF FD | 	call	#_pop
11c88     FF 16 02 F6 | 	mov	arg03, result3
11c8c     A7 FA 61 FC | 	wrlong	result1, fp
11c90     04 4E 05 F1 | 	add	fp, #4
11c94     A7 FC 61 FC | 	wrlong	result2, fp
11c98     04 4E 05 F1 | 	add	fp, #4
11c9c     A7 16 62 FC | 	wrlong	arg03, fp
11ca0     08 4E 85 F1 | 	sub	fp, #8
11ca4     A7 12 02 F6 | 	mov	arg01, fp
11ca8     FC 3E B0 FD | 	call	#_converttoint
11cac     2C 4E 05 F1 | 	add	fp, #44
11cb0     A7 FA 61 FC | 	wrlong	result1, fp
11cb4     2C 4E 85 F1 | 	sub	fp, #44
11cb8     0C 00 90 FD | 	jmp	#LR__1425
11cbc                 | LR__1424
11cbc     2C 4E 05 F1 | 	add	fp, #44
11cc0     A7 00 68 FC | 	wrlong	#0, fp
11cc4     2C 4E 85 F1 | 	sub	fp, #44
11cc8                 | LR__1425
11cc8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11cc8     14 4E 05 F1 | 	add	fp, #20
11ccc     A7 16 02 FB | 	rdlong	arg03, fp
11cd0     14 4E 85 F1 | 	sub	fp, #20
11cd4     01 16 16 F2 | 	cmp	arg03, #1 wc
11cd8     38 00 90 CD |  if_b	jmp	#LR__1426
11cdc     04 9E BF FD | 	call	#_pop
11ce0     FF 16 02 F6 | 	mov	arg03, result3
11ce4     A7 FA 61 FC | 	wrlong	result1, fp
11ce8     04 4E 05 F1 | 	add	fp, #4
11cec     A7 FC 61 FC | 	wrlong	result2, fp
11cf0     04 4E 05 F1 | 	add	fp, #4
11cf4     A7 16 62 FC | 	wrlong	arg03, fp
11cf8     08 4E 85 F1 | 	sub	fp, #8
11cfc     A7 12 02 F6 | 	mov	arg01, fp
11d00     A4 3E B0 FD | 	call	#_converttoint
11d04     28 4E 05 F1 | 	add	fp, #40
11d08     A7 FA 61 FC | 	wrlong	result1, fp
11d0c     28 4E 85 F1 | 	sub	fp, #40
11d10     0C 00 90 FD | 	jmp	#LR__1427
11d14                 | LR__1426
11d14     28 4E 05 F1 | 	add	fp, #40
11d18     A7 00 68 FC | 	wrlong	#0, fp
11d1c     28 4E 85 F1 | 	sub	fp, #40
11d20                 | LR__1427
11d20     0C 4E 05 F1 | 	add	fp, #12
11d24     A7 20 02 FB | 	rdlong	local02, fp
11d28     1C 4E 05 F1 | 	add	fp, #28
11d2c     A7 22 02 FB | 	rdlong	local03, fp
11d30     04 4E 05 F1 | 	add	fp, #4
11d34     A7 FC 01 FB | 	rdlong	result2, fp
11d38     10 4E 85 F1 | 	sub	fp, #16
11d3c     A7 FE 01 FB | 	rdlong	result3, fp
11d40     FF FC 01 FD | 	qmul	result2, result3
11d44     10 20 06 F1 | 	add	local02, #16
11d48     14 4E 05 F1 | 	add	fp, #20
11d4c     A7 FC 01 FB | 	rdlong	result2, fp
11d50     18 FA 61 FD | 	getqx	result1
11d54     FF FC 01 FD | 	qmul	result2, result3
11d58     FD 22 02 F1 | 	add	local03, result1
11d5c     10 4E 85 F1 | 	sub	fp, #16
11d60     A7 FE 01 FB | 	rdlong	result3, fp
11d64     18 FC 61 FD | 	getqx	result2
11d68     FF FC 01 FD | 	qmul	result2, result3
11d6c     08 4E 85 F1 | 	sub	fp, #8
11d70     A7 FE 01 FB | 	rdlong	result3, fp
11d74     18 FC 61 FD | 	getqx	result2
11d78     FE 22 02 F1 | 	add	local03, result2
11d7c     FF 22 02 FD | 	qmul	local03, result3
11d80     1C 4E 05 F1 | 	add	fp, #28
11d84                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11d84                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11d84                 | ' 
11d84                 | ' select case vartype
11d84     18 FC 61 FD | 	getqx	result2
11d88     FE 20 02 F1 | 	add	local02, result2
11d8c     A7 20 62 FC | 	wrlong	local02, fp
11d90     24 4E 85 F1 | 	sub	fp, #36
11d94     A7 24 02 FB | 	rdlong	local04, fp
11d98     10 4E 85 F1 | 	sub	fp, #16
11d9c     00 25 86 F1 | 	sub	local04, #256
11da0     0C 24 26 F3 | 	fle	local04, #12
11da4     30 24 62 FD | 	jmprel	local04
11da8                 | LR__1428
11da8     30 00 90 FD | 	jmp	#LR__1429
11dac     58 00 90 FD | 	jmp	#LR__1430
11db0     8C 00 90 FD | 	jmp	#LR__1431
11db4     AC 00 90 FD | 	jmp	#LR__1432
11db8     E8 00 90 FD | 	jmp	#LR__1433
11dbc     08 01 90 FD | 	jmp	#LR__1434
11dc0     24 01 90 FD | 	jmp	#LR__1435
11dc4     40 01 90 FD | 	jmp	#LR__1436
11dc8     50 01 90 FD | 	jmp	#LR__1437
11dcc     60 01 90 FD | 	jmp	#LR__1438
11dd0     7C 01 90 FD | 	jmp	#LR__1439
11dd4     8C 01 90 FD | 	jmp	#LR__1440
11dd8     B8 01 90 FD | 	jmp	#LR__1441
11ddc                 | LR__1429
11ddc     A7 12 02 F6 | 	mov	arg01, fp
11de0     34 4E 05 F1 | 	add	fp, #52
11de4     A7 14 02 FB | 	rdlong	arg02, fp
11de8     34 4E 85 F1 | 	sub	fp, #52
11dec     0C 16 06 F6 | 	mov	arg03, #12
11df0     0B 00 00 FF 
11df4     CC E4 05 F1 | 	add	objptr, ##5836
11df8     60 E0 B0 FD | 	call	#_psram_spin2_read1
11dfc     0B 00 00 FF 
11e00     CC E4 85 F1 | 	sub	objptr, ##5836
11e04     8C 01 90 FD | 	jmp	#LR__1441
11e08                 | LR__1430
11e08     08 4E 05 F1 | 	add	fp, #8
11e0c     A7 38 68 FC | 	wrlong	#28, fp
11e10     2C 4E 05 F1 | 	add	fp, #44
11e14     A7 12 02 FB | 	rdlong	arg01, fp
11e18     34 4E 85 F1 | 	sub	fp, #52
11e1c     20 B9 B0 FD | 	call	#_pspeek
11e20     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e24     A7 FA 61 FC | 	wrlong	result1, fp
11e28     80 FA 15 F2 | 	cmp	result1, #128 wc
11e2c     00 1F 66 36 |  if_ae	neg	local01, #256
11e30     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e34     11 1F 42 35 |  if_ae	or	local01, local03
11e38     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e3c     54 01 90 FD | 	jmp	#LR__1441
11e40                 | LR__1431
11e40     08 4E 05 F1 | 	add	fp, #8
11e44     A7 3A 68 FC | 	wrlong	#29, fp
11e48     2C 4E 05 F1 | 	add	fp, #44
11e4c     A7 12 02 FB | 	rdlong	arg01, fp
11e50     34 4E 85 F1 | 	sub	fp, #52
11e54     E8 B8 B0 FD | 	call	#_pspeek
11e58     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e5c     A7 FA 61 FC | 	wrlong	result1, fp
11e60     30 01 90 FD | 	jmp	#LR__1441
11e64                 | LR__1432
11e64     08 4E 05 F1 | 	add	fp, #8
11e68     A7 38 68 FC | 	wrlong	#28, fp
11e6c     2C 4E 05 F1 | 	add	fp, #44
11e70     A7 12 02 FB | 	rdlong	arg01, fp
11e74     34 4E 85 F1 | 	sub	fp, #52
11e78     1C B9 B0 FD | 	call	#_pslpeek
11e7c     FD FA 31 F9 | 	getword	result1, result1, #0
11e80     A7 FA 61 FC | 	wrlong	result1, fp
11e84     40 00 00 FF 
11e88     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11e8c     FF 7F 00 3F 
11e90     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11e94     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e98     11 1F 42 35 |  if_ae	or	local01, local03
11e9c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11ea0     F0 00 90 FD | 	jmp	#LR__1441
11ea4                 | LR__1433
11ea4     08 4E 05 F1 | 	add	fp, #8
11ea8     A7 3A 68 FC | 	wrlong	#29, fp
11eac     2C 4E 05 F1 | 	add	fp, #44
11eb0     A7 12 02 FB | 	rdlong	arg01, fp
11eb4     34 4E 85 F1 | 	sub	fp, #52
11eb8     DC B8 B0 FD | 	call	#_pslpeek
11ebc     FD FA 31 F9 | 	getword	result1, result1, #0
11ec0     A7 FA 61 FC | 	wrlong	result1, fp
11ec4     CC 00 90 FD | 	jmp	#LR__1441
11ec8                 | LR__1434
11ec8     08 4E 05 F1 | 	add	fp, #8
11ecc     A7 38 68 FC | 	wrlong	#28, fp
11ed0     2C 4E 05 F1 | 	add	fp, #44
11ed4     A7 12 02 FB | 	rdlong	arg01, fp
11ed8     34 4E 85 F1 | 	sub	fp, #52
11edc     B8 B8 B0 FD | 	call	#_pslpeek
11ee0     A7 FA 61 FC | 	wrlong	result1, fp
11ee4     AC 00 90 FD | 	jmp	#LR__1441
11ee8                 | LR__1435
11ee8     08 4E 05 F1 | 	add	fp, #8
11eec     A7 3A 68 FC | 	wrlong	#29, fp
11ef0     2C 4E 05 F1 | 	add	fp, #44
11ef4     A7 12 02 FB | 	rdlong	arg01, fp
11ef8     34 4E 85 F1 | 	sub	fp, #52
11efc     98 B8 B0 FD | 	call	#_pslpeek
11f00     A7 FA 61 FC | 	wrlong	result1, fp
11f04     8C 00 90 FD | 	jmp	#LR__1441
11f08                 | LR__1436
11f08     08 4E 05 F1 | 	add	fp, #8
11f0c     A7 FE 69 FC | 	wrlong	#255, fp
11f10     08 4E 85 F1 | 	sub	fp, #8
11f14     A7 60 68 FC | 	wrlong	#48, fp
11f18     78 00 90 FD | 	jmp	#LR__1441
11f1c                 | LR__1437
11f1c     08 4E 05 F1 | 	add	fp, #8
11f20     A7 FE 69 FC | 	wrlong	#255, fp
11f24     08 4E 85 F1 | 	sub	fp, #8
11f28     A7 60 68 FC | 	wrlong	#48, fp
11f2c     64 00 90 FD | 	jmp	#LR__1441
11f30                 | LR__1438
11f30     08 4E 05 F1 | 	add	fp, #8
11f34     A7 3C 68 FC | 	wrlong	#30, fp
11f38     2C 4E 05 F1 | 	add	fp, #44
11f3c     A7 12 02 FB | 	rdlong	arg01, fp
11f40     34 4E 85 F1 | 	sub	fp, #52
11f44     50 B8 B0 FD | 	call	#_pslpeek
11f48     A7 FA 61 FC | 	wrlong	result1, fp
11f4c     44 00 90 FD | 	jmp	#LR__1441
11f50                 | LR__1439
11f50     08 4E 05 F1 | 	add	fp, #8
11f54     A7 FE 69 FC | 	wrlong	#255, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     A7 60 68 FC | 	wrlong	#48, fp
11f60     30 00 90 FD | 	jmp	#LR__1441
11f64                 | LR__1440
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 3E 68 FC | 	wrlong	#31, fp
11f6c     2C 4E 05 F1 | 	add	fp, #44
11f70     A7 12 02 FB | 	rdlong	arg01, fp
11f74     34 4E 85 F1 | 	sub	fp, #52
11f78     1C B8 B0 FD | 	call	#_pslpeek
11f7c     A7 FA 61 FC | 	wrlong	result1, fp
11f80     00 04 00 FF 
11f84     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11f88     08 4E 05 31 |  if_ae	add	fp, #8
11f8c     A7 56 68 3C |  if_ae	wrlong	#43, fp
11f90     08 4E 85 31 |  if_ae	sub	fp, #8
11f94                 | LR__1441
11f94     A7 12 02 F6 | 	mov	arg01, fp
11f98     E0 9B BF FD | 	call	#_push
11f9c                 | LR__1442
11f9c     A7 F0 03 F6 | 	mov	ptra, fp
11fa0     B2 00 A0 FD | 	call	#popregs_
11fa4                 | _do_getvar_ret
11fa4     2D 00 64 FD | 	ret
11fa8                 | 
11fa8                 | ' 
11fa8                 | ' 
11fa8                 | ' sub do_getaddr
11fa8                 | _do_getaddr
11fa8     01 4A 05 F6 | 	mov	COUNT_, #1
11fac     A8 00 A0 FD | 	call	#pushregs_
11fb0     38 F0 07 F1 | 	add	ptra, #56
11fb4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11fb4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11fb4     4A 00 00 FF 
11fb8     80 E4 05 F1 | 	add	objptr, ##38016
11fbc     F2 12 02 FB | 	rdlong	arg01, objptr
11fc0     09 FD 01 F6 | 	mov	result2, arg01
11fc4     01 FC 65 F0 | 	shl	result2, #1
11fc8     09 FD 01 F1 | 	add	result2, arg01
11fcc     02 FC 65 F0 | 	shl	result2, #2
11fd0     03 00 00 FF 
11fd4     04 E4 85 F1 | 	sub	objptr, ##1540
11fd8     F2 FC 01 F1 | 	add	result2, objptr
11fdc     04 FC 05 F1 | 	add	result2, #4
11fe0     FE FC 09 FB | 	rdlong	result2, result2 wz
11fe4     47 00 00 FF 
11fe8     7C E4 85 F1 | 	sub	objptr, ##36476
11fec     C4 00 90 5D |  if_ne	jmp	#LR__1450
11ff0     4A 00 00 FF 
11ff4     80 E4 05 F1 | 	add	objptr, ##38016
11ff8     F2 12 02 FB | 	rdlong	arg01, objptr
11ffc     09 FD 01 F6 | 	mov	result2, arg01
12000     01 FC 65 F0 | 	shl	result2, #1
12004     09 FD 01 F1 | 	add	result2, arg01
12008     02 FC 65 F0 | 	shl	result2, #2
1200c     03 00 00 FF 
12010     04 E4 85 F1 | 	sub	objptr, ##1540
12014     F2 FC 01 F1 | 	add	result2, objptr
12018     FE 12 02 FB | 	rdlong	arg01, result2
1201c     04 12 66 F0 | 	shl	arg01, #4
12020     32 00 00 FF 
12024     84 E4 85 F1 | 	sub	objptr, ##25732
12028     F2 12 02 F1 | 	add	arg01, objptr
1202c     0C 12 06 F1 | 	add	arg01, #12
12030     09 13 02 FB | 	rdlong	arg01, arg01
12034     08 4E 05 F1 | 	add	fp, #8
12038     A7 12 62 FC | 	wrlong	arg01, fp
1203c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1203c                 | '    if t1.result_type>=array_no_type then goto 2200
1203c     08 4E 85 F1 | 	sub	fp, #8
12040     00 13 16 F2 | 	cmp	arg01, #256 wc
12044     14 00 00 FF 
12048     F8 E5 85 F1 | 	sub	objptr, ##10744
1204c     64 00 90 3D |  if_ae	jmp	#LR__1451
12050     4A 00 00 FF 
12054     80 E4 05 F1 | 	add	objptr, ##38016
12058     F2 12 02 FB | 	rdlong	arg01, objptr
1205c     09 FB 01 F6 | 	mov	result1, arg01
12060     01 FA 65 F0 | 	shl	result1, #1
12064     09 FB 01 F1 | 	add	result1, arg01
12068     02 FA 65 F0 | 	shl	result1, #2
1206c     03 00 00 FF 
12070     04 E4 85 F1 | 	sub	objptr, ##1540
12074     F2 FA 01 F1 | 	add	result1, objptr
12078     FD FA 01 FB | 	rdlong	result1, result1
1207c     04 FA 65 F0 | 	shl	result1, #4
12080     32 00 00 FF 
12084     84 E4 85 F1 | 	sub	objptr, ##25732
12088     F2 FA 01 F1 | 	add	result1, objptr
1208c     04 FA 05 F1 | 	add	result1, #4
12090     14 00 00 FF 
12094     F8 E5 85 F1 | 	sub	objptr, ##10744
12098     A7 FA 61 FC | 	wrlong	result1, fp
1209c     08 4E 05 F1 | 	add	fp, #8
120a0     A7 3A 68 FC | 	wrlong	#29, fp
120a4     08 4E 85 F1 | 	sub	fp, #8
120a8     A7 12 02 F6 | 	mov	arg01, fp
120ac     CC 9A BF FD | 	call	#_push
120b0                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
120b0                 | '   t1.result_type=result_uint
120b0                 | '   push t1 : return
120b0     D8 02 90 FD | 	jmp	#LR__1460
120b4                 | LR__1450
120b4                 | LR__1451
120b4     4A 00 00 FF 
120b8     80 E4 05 F1 | 	add	objptr, ##38016
120bc     F2 FE 01 FB | 	rdlong	result3, objptr
120c0     FF 12 02 F6 | 	mov	arg01, result3
120c4     01 12 66 F0 | 	shl	arg01, #1
120c8     FF 12 02 F1 | 	add	arg01, result3
120cc     02 12 66 F0 | 	shl	arg01, #2
120d0     03 00 00 FF 
120d4     04 E4 85 F1 | 	sub	objptr, ##1540
120d8     F2 12 02 F1 | 	add	arg01, objptr
120dc     09 13 02 FB | 	rdlong	arg01, arg01
120e0     04 12 66 F0 | 	shl	arg01, #4
120e4     32 00 00 FF 
120e8     84 E4 85 F1 | 	sub	objptr, ##25732
120ec     F2 12 02 F1 | 	add	arg01, objptr
120f0     04 12 06 F1 | 	add	arg01, #4
120f4     09 13 02 FB | 	rdlong	arg01, arg01
120f8     0C 4E 05 F1 | 	add	fp, #12
120fc     A7 12 62 FC | 	wrlong	arg01, fp
12100     0C 4E 85 F1 | 	sub	fp, #12
12104     14 00 00 FF 
12108     F8 E5 85 F1 | 	sub	objptr, ##10744
1210c     88 B6 B0 FD | 	call	#_pslpeek
12110     FD FA 31 F9 | 	getword	result1, result1, #0
12114     10 4E 05 F1 | 	add	fp, #16
12118     A7 FA 61 FC | 	wrlong	result1, fp
1211c     4A 00 00 FF 
12120     80 E4 05 F1 | 	add	objptr, ##38016
12124     F2 FE 01 FB | 	rdlong	result3, objptr
12128     FF 12 02 F6 | 	mov	arg01, result3
1212c     01 12 66 F0 | 	shl	arg01, #1
12130     FF 12 02 F1 | 	add	arg01, result3
12134     02 12 66 F0 | 	shl	arg01, #2
12138     03 00 00 FF 
1213c     04 E4 85 F1 | 	sub	objptr, ##1540
12140     F2 12 02 F1 | 	add	arg01, objptr
12144     04 12 06 F1 | 	add	arg01, #4
12148     09 13 02 FB | 	rdlong	arg01, arg01
1214c     04 4E 05 F1 | 	add	fp, #4
12150     A7 12 62 FC | 	wrlong	arg01, fp
12154     08 4E 85 F1 | 	sub	fp, #8
12158     A7 12 02 FB | 	rdlong	arg01, fp
1215c     0C 4E 85 F1 | 	sub	fp, #12
12160     02 12 06 F1 | 	add	arg01, #2
12164     47 00 00 FF 
12168     7C E4 85 F1 | 	sub	objptr, ##36476
1216c     D0 B5 B0 FD | 	call	#_pspeek
12170     FD FA E1 F8 | 	getbyte	result1, result1, #0
12174     18 4E 05 F1 | 	add	fp, #24
12178     A7 FA 61 FC | 	wrlong	result1, fp
1217c     0C 4E 85 F1 | 	sub	fp, #12
12180     A7 12 02 FB | 	rdlong	arg01, fp
12184     0C 4E 85 F1 | 	sub	fp, #12
12188     04 12 06 F1 | 	add	arg01, #4
1218c     08 B6 B0 FD | 	call	#_pslpeek
12190     1C 4E 05 F1 | 	add	fp, #28
12194     A7 FA 61 FC | 	wrlong	result1, fp
12198     10 4E 85 F1 | 	sub	fp, #16
1219c     A7 12 02 FB | 	rdlong	arg01, fp
121a0     0C 4E 85 F1 | 	sub	fp, #12
121a4     08 12 06 F1 | 	add	arg01, #8
121a8     EC B5 B0 FD | 	call	#_pslpeek
121ac     20 4E 05 F1 | 	add	fp, #32
121b0     A7 FA 61 FC | 	wrlong	result1, fp
121b4     14 4E 85 F1 | 	sub	fp, #20
121b8     A7 12 02 FB | 	rdlong	arg01, fp
121bc     0C 4E 85 F1 | 	sub	fp, #12
121c0     0C 12 06 F1 | 	add	arg01, #12
121c4     D0 B5 B0 FD | 	call	#_pslpeek
121c8     24 4E 05 F1 | 	add	fp, #36
121cc     A7 FA 61 FC | 	wrlong	result1, fp
121d0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
121d0                 | ' esize=pspeek(arrptr+2)
121d0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
121d0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
121d0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
121d0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
121d0     10 4E 85 F1 | 	sub	fp, #16
121d4     A7 12 02 FB | 	rdlong	arg01, fp
121d8     14 4E 85 F1 | 	sub	fp, #20
121dc     03 12 16 F2 | 	cmp	arg01, #3 wc
121e0     34 00 90 CD |  if_b	jmp	#LR__1452
121e4     FC 98 BF FD | 	call	#_pop
121e8     A7 FA 61 FC | 	wrlong	result1, fp
121ec     04 4E 05 F1 | 	add	fp, #4
121f0     A7 FC 61 FC | 	wrlong	result2, fp
121f4     04 4E 05 F1 | 	add	fp, #4
121f8     A7 FE 61 FC | 	wrlong	result3, fp
121fc     08 4E 85 F1 | 	sub	fp, #8
12200     A7 12 02 F6 | 	mov	arg01, fp
12204     A0 39 B0 FD | 	call	#_converttoint
12208     30 4E 05 F1 | 	add	fp, #48
1220c     A7 FA 61 FC | 	wrlong	result1, fp
12210     30 4E 85 F1 | 	sub	fp, #48
12214     0C 00 90 FD | 	jmp	#LR__1453
12218                 | LR__1452
12218     30 4E 05 F1 | 	add	fp, #48
1221c     A7 00 68 FC | 	wrlong	#0, fp
12220     30 4E 85 F1 | 	sub	fp, #48
12224                 | LR__1453
12224                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
12224     14 4E 05 F1 | 	add	fp, #20
12228     A7 12 02 FB | 	rdlong	arg01, fp
1222c     14 4E 85 F1 | 	sub	fp, #20
12230     02 12 16 F2 | 	cmp	arg01, #2 wc
12234     34 00 90 CD |  if_b	jmp	#LR__1454
12238     A8 98 BF FD | 	call	#_pop
1223c     A7 FA 61 FC | 	wrlong	result1, fp
12240     04 4E 05 F1 | 	add	fp, #4
12244     A7 FC 61 FC | 	wrlong	result2, fp
12248     04 4E 05 F1 | 	add	fp, #4
1224c     A7 FE 61 FC | 	wrlong	result3, fp
12250     08 4E 85 F1 | 	sub	fp, #8
12254     A7 12 02 F6 | 	mov	arg01, fp
12258     4C 39 B0 FD | 	call	#_converttoint
1225c     2C 4E 05 F1 | 	add	fp, #44
12260     A7 FA 61 FC | 	wrlong	result1, fp
12264     2C 4E 85 F1 | 	sub	fp, #44
12268     0C 00 90 FD | 	jmp	#LR__1455
1226c                 | LR__1454
1226c     2C 4E 05 F1 | 	add	fp, #44
12270     A7 00 68 FC | 	wrlong	#0, fp
12274     2C 4E 85 F1 | 	sub	fp, #44
12278                 | LR__1455
12278                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
12278     14 4E 05 F1 | 	add	fp, #20
1227c     A7 12 02 FB | 	rdlong	arg01, fp
12280     14 4E 85 F1 | 	sub	fp, #20
12284     01 12 16 F2 | 	cmp	arg01, #1 wc
12288     34 00 90 CD |  if_b	jmp	#LR__1456
1228c     54 98 BF FD | 	call	#_pop
12290     A7 FA 61 FC | 	wrlong	result1, fp
12294     04 4E 05 F1 | 	add	fp, #4
12298     A7 FC 61 FC | 	wrlong	result2, fp
1229c     04 4E 05 F1 | 	add	fp, #4
122a0     A7 FE 61 FC | 	wrlong	result3, fp
122a4     08 4E 85 F1 | 	sub	fp, #8
122a8     A7 12 02 F6 | 	mov	arg01, fp
122ac     F8 38 B0 FD | 	call	#_converttoint
122b0     28 4E 05 F1 | 	add	fp, #40
122b4     A7 FA 61 FC | 	wrlong	result1, fp
122b8     28 4E 85 F1 | 	sub	fp, #40
122bc     0C 00 90 FD | 	jmp	#LR__1457
122c0                 | LR__1456
122c0     28 4E 05 F1 | 	add	fp, #40
122c4     A7 00 68 FC | 	wrlong	#0, fp
122c8     28 4E 85 F1 | 	sub	fp, #40
122cc                 | LR__1457
122cc                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
122cc                 | ' if numpar>0 then
122cc     14 4E 05 F1 | 	add	fp, #20
122d0     A7 FE 01 FB | 	rdlong	result3, fp
122d4     14 4E 85 F1 | 	sub	fp, #20
122d8     01 FE 15 F2 | 	cmp	result3, #1 wc
122dc     8C 00 90 CD |  if_b	jmp	#LR__1458
122e0     0C 4E 05 F1 | 	add	fp, #12
122e4     A7 FC 01 FB | 	rdlong	result2, fp
122e8     1C 4E 05 F1 | 	add	fp, #28
122ec     A7 FE 01 FB | 	rdlong	result3, fp
122f0     04 4E 05 F1 | 	add	fp, #4
122f4     A7 12 02 FB | 	rdlong	arg01, fp
122f8     10 4E 85 F1 | 	sub	fp, #16
122fc     A7 FA 01 FB | 	rdlong	result1, fp
12300     FD 12 02 FD | 	qmul	arg01, result1
12304     10 FC 05 F1 | 	add	result2, #16
12308     14 4E 05 F1 | 	add	fp, #20
1230c     A7 1E 02 FB | 	rdlong	local01, fp
12310     18 12 62 FD | 	getqx	arg01
12314     FD 1E 02 FD | 	qmul	local01, result1
12318     09 FF 01 F1 | 	add	result3, arg01
1231c     10 4E 85 F1 | 	sub	fp, #16
12320     A7 1E 02 FB | 	rdlong	local01, fp
12324     18 FA 61 FD | 	getqx	result1
12328     0F FB 01 FD | 	qmul	result1, local01
1232c     08 4E 85 F1 | 	sub	fp, #8
12330     A7 1E 02 FB | 	rdlong	local01, fp
12334     18 FA 61 FD | 	getqx	result1
12338     FD FE 01 F1 | 	add	result3, result1
1233c     0F FF 01 FD | 	qmul	result3, local01
12340     1C 4E 05 F1 | 	add	fp, #28
12344     18 1E 62 FD | 	getqx	local01
12348     0F FD 01 F1 | 	add	result2, local01
1234c     A7 FC 61 FC | 	wrlong	result2, fp
12350     2C 4E 85 F1 | 	sub	fp, #44
12354     A7 3A 68 FC | 	wrlong	#29, fp
12358     2C 4E 05 F1 | 	add	fp, #44
1235c     A7 1E 02 FB | 	rdlong	local01, fp
12360     34 4E 85 F1 | 	sub	fp, #52
12364     A7 1E 62 FC | 	wrlong	local01, fp
12368     18 00 90 FD | 	jmp	#LR__1459
1236c                 | LR__1458
1236c     08 4E 05 F1 | 	add	fp, #8
12370     A7 3A 68 FC | 	wrlong	#29, fp
12374     04 4E 05 F1 | 	add	fp, #4
12378     A7 1E 02 FB | 	rdlong	local01, fp
1237c     0C 4E 85 F1 | 	sub	fp, #12
12380     A7 1E 62 FC | 	wrlong	local01, fp
12384                 | LR__1459
12384     A7 12 02 F6 | 	mov	arg01, fp
12388     F0 97 BF FD | 	call	#_push
1238c                 | LR__1460
1238c     A7 F0 03 F6 | 	mov	ptra, fp
12390     B2 00 A0 FD | 	call	#popregs_
12394                 | _do_getaddr_ret
12394     2D 00 64 FD | 	ret
12398                 | 
12398                 | ' 
12398                 | ' 
12398                 | ' sub do_inkey
12398                 | _do_inkey
12398     02 4A 05 F6 | 	mov	COUNT_, #2
1239c     A8 00 A0 FD | 	call	#pushregs_
123a0     0C F0 07 F1 | 	add	ptra, #12
123a4     E0 DE B0 FD | 	call	#_usbnew_spin2_get_key
123a8     45 00 00 FF 
123ac     74 E4 05 F1 | 	add	objptr, ##35444
123b0     F2 FA 61 FC | 	wrlong	result1, objptr
123b4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
123b4     45 00 00 FF 
123b8     74 E4 85 F1 | 	sub	objptr, ##35444
123bc     00 FA 0D F2 | 	cmp	result1, #0 wz
123c0     94 00 90 AD |  if_e	jmp	#LR__1471
123c4     45 00 00 FF 
123c8     74 E4 05 F1 | 	add	objptr, ##35444
123cc     F2 1C 02 FB | 	rdlong	arg06, objptr
123d0     45 00 00 FF 
123d4     74 E4 85 F1 | 	sub	objptr, ##35444
123d8     00 00 40 FF 
123dc     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
123e0     45 00 00 CF 
123e4     74 E4 05 C1 |  if_b	add	objptr, ##35444
123e8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
123ec     45 00 00 CF 
123f0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
123f4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
123f8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
123fc     58 00 90 3D |  if_ae	jmp	#LR__1471
12400                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12400     50 00 00 FF 
12404     10 E5 05 F1 | 	add	objptr, ##41232
12408     F2 1C 02 FB | 	rdlong	arg06, objptr
1240c     50 00 00 FF 
12410     10 E5 85 F1 | 	sub	objptr, ##41232
12414     01 1C 0E F2 | 	cmp	arg06, #1 wz
12418     3C 00 90 5D |  if_ne	jmp	#LR__1470
1241c     51 00 00 FF 
12420     B4 E5 05 F1 | 	add	objptr, ##41908
12424     F2 14 02 FB | 	rdlong	arg02, objptr
12428     04 E4 85 F1 | 	sub	objptr, #4
1242c     F2 1A 02 FB | 	rdlong	arg05, objptr
12430     07 12 06 F6 | 	mov	arg01, #7
12434     56 00 00 FF 
12438     44 16 06 F6 | 	mov	arg03, ##44100
1243c     0C 18 C6 F9 | 	decod	arg04, #12
12440     01 1C 66 F6 | 	neg	arg06, #1
12444     46 00 00 FF 
12448     E4 E4 85 F1 | 	sub	objptr, ##36068
1244c     DC E1 B0 FD | 	call	#_audio096_spin2_play
12450     0B 00 00 FF 
12454     CC E4 85 F1 | 	sub	objptr, ##5836
12458                 | LR__1470
12458                 | LR__1471
12458                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12458     45 00 00 FF 
1245c     74 E4 05 F1 | 	add	objptr, ##35444
12460     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12464     45 00 00 FF 
12468     74 E4 85 F1 | 	sub	objptr, ##35444
1246c     D4 01 90 AD |  if_e	jmp	#LR__1480
12470     45 00 00 FF 
12474     74 E4 05 F1 | 	add	objptr, ##35444
12478     F2 1C 02 FB | 	rdlong	arg06, objptr
1247c     45 00 00 FF 
12480     74 E4 85 F1 | 	sub	objptr, ##35444
12484     00 00 40 FF 
12488     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1248c     45 00 00 CF 
12490     74 E4 05 C1 |  if_b	add	objptr, ##35444
12494     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12498     45 00 00 CF 
1249c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
124a0     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
124a4     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
124a8     98 01 90 3D |  if_ae	jmp	#LR__1480
124ac                 | '   if leds and 2 = 2 then 
124ac     51 00 00 FF 
124b0     DC E5 05 F1 | 	add	objptr, ##41948
124b4     F2 1E 0A FB | 	rdlong	local01, objptr wz
124b8     51 00 00 FF 
124bc     DC E5 85 F1 | 	sub	objptr, ##41948
124c0     58 01 90 AD |  if_e	jmp	#LR__1479
124c4                 | '     if key>96 andalso key<123 then
124c4     45 00 00 FF 
124c8     74 E4 05 F1 | 	add	objptr, ##35444
124cc     F2 1E 02 FB | 	rdlong	local01, objptr
124d0     45 00 00 FF 
124d4     74 E4 85 F1 | 	sub	objptr, ##35444
124d8     61 1E 16 F2 | 	cmp	local01, #97 wc
124dc     3C 00 90 CD |  if_b	jmp	#LR__1472
124e0     45 00 00 FF 
124e4     74 E4 05 F1 | 	add	objptr, ##35444
124e8     F2 1E 02 FB | 	rdlong	local01, objptr
124ec     45 00 00 FF 
124f0     74 E4 85 F1 | 	sub	objptr, ##35444
124f4     7B 1E 16 F2 | 	cmp	local01, #123 wc
124f8     20 00 90 3D |  if_ae	jmp	#LR__1472
124fc     45 00 00 FF 
12500     74 E4 05 F1 | 	add	objptr, ##35444
12504     F2 1E 02 FB | 	rdlong	local01, objptr
12508     20 1E 86 F1 | 	sub	local01, #32
1250c     F2 1E 62 FC | 	wrlong	local01, objptr
12510     45 00 00 FF 
12514     74 E4 85 F1 | 	sub	objptr, ##35444
12518     00 01 90 FD | 	jmp	#LR__1478
1251c                 | LR__1472
1251c     45 00 00 FF 
12520     74 E4 05 F1 | 	add	objptr, ##35444
12524     F2 1E 02 FB | 	rdlong	local01, objptr
12528     45 00 00 FF 
1252c     74 E4 85 F1 | 	sub	objptr, ##35444
12530     41 1E 16 F2 | 	cmp	local01, #65 wc
12534     3C 00 90 CD |  if_b	jmp	#LR__1473
12538     45 00 00 FF 
1253c     74 E4 05 F1 | 	add	objptr, ##35444
12540     F2 1E 02 FB | 	rdlong	local01, objptr
12544     45 00 00 FF 
12548     74 E4 85 F1 | 	sub	objptr, ##35444
1254c     5B 1E 16 F2 | 	cmp	local01, #91 wc
12550     20 00 90 3D |  if_ae	jmp	#LR__1473
12554     45 00 00 FF 
12558     74 E4 05 F1 | 	add	objptr, ##35444
1255c     F2 1E 02 FB | 	rdlong	local01, objptr
12560     20 1E 06 F1 | 	add	local01, #32
12564     F2 1E 62 FC | 	wrlong	local01, objptr
12568     45 00 00 FF 
1256c     74 E4 85 F1 | 	sub	objptr, ##35444
12570     A8 00 90 FD | 	jmp	#LR__1477
12574                 | LR__1473
12574     45 00 00 FF 
12578     74 E4 05 F1 | 	add	objptr, ##35444
1257c     F2 1E 02 FB | 	rdlong	local01, objptr
12580     45 00 00 FF 
12584     74 E4 85 F1 | 	sub	objptr, ##35444
12588     17 1E 16 F2 | 	cmp	local01, #23 wc
1258c     3C 00 90 CD |  if_b	jmp	#LR__1474
12590     45 00 00 FF 
12594     74 E4 05 F1 | 	add	objptr, ##35444
12598     F2 1E 02 FB | 	rdlong	local01, objptr
1259c     45 00 00 FF 
125a0     74 E4 85 F1 | 	sub	objptr, ##35444
125a4     20 1E 16 F2 | 	cmp	local01, #32 wc
125a8     20 00 90 3D |  if_ae	jmp	#LR__1474
125ac     45 00 00 FF 
125b0     74 E4 05 F1 | 	add	objptr, ##35444
125b4     F2 1E 02 FB | 	rdlong	local01, objptr
125b8     09 1E 86 F1 | 	sub	local01, #9
125bc     F2 1E 62 FC | 	wrlong	local01, objptr
125c0     45 00 00 FF 
125c4     74 E4 85 F1 | 	sub	objptr, ##35444
125c8     50 00 90 FD | 	jmp	#LR__1476
125cc                 | LR__1474
125cc     45 00 00 FF 
125d0     74 E4 05 F1 | 	add	objptr, ##35444
125d4     F2 20 02 FB | 	rdlong	local02, objptr
125d8     45 00 00 FF 
125dc     74 E4 85 F1 | 	sub	objptr, ##35444
125e0     0E 20 16 F2 | 	cmp	local02, #14 wc
125e4     34 00 90 CD |  if_b	jmp	#LR__1475
125e8     45 00 00 FF 
125ec     74 E4 05 F1 | 	add	objptr, ##35444
125f0     F2 1E 02 FB | 	rdlong	local01, objptr
125f4     45 00 00 FF 
125f8     74 E4 85 F1 | 	sub	objptr, ##35444
125fc     17 1E 16 F2 | 	cmp	local01, #23 wc
12600     51 00 00 CF 
12604     E0 E5 05 C1 |  if_b	add	objptr, ##41952
12608     F2 20 02 CB |  if_b	rdlong	local02, objptr
1260c     27 20 06 C1 |  if_b	add	local02, #39
12610     F2 20 62 CC |  if_b	wrlong	local02, objptr
12614     51 00 00 CF 
12618     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
1261c                 | LR__1475
1261c                 | LR__1476
1261c                 | LR__1477
1261c                 | LR__1478
1261c                 | LR__1479
1261c     45 00 00 FF 
12620     74 E4 05 F1 | 	add	objptr, ##35444
12624     F2 12 02 FB | 	rdlong	arg01, objptr
12628     45 00 00 FF 
1262c     74 E4 85 F1 | 	sub	objptr, ##35444
12630     14 B2 B0 FD | 	call	#_scantochar
12634     FD 12 02 F6 | 	mov	arg01, result1
12638     A0 06 B1 FD | 	call	#__system__Chr_S
1263c     A7 FA 61 FC | 	wrlong	result1, fp
12640     0C 00 90 FD | 	jmp	#LR__1481
12644                 | LR__1480
12644     85 01 00 FF 
12648     77 20 06 F6 | 	mov	local02, ##@LR__5472
1264c     A7 20 62 FC | 	wrlong	local02, fp
12650                 | LR__1481
12650     08 4E 05 F1 | 	add	fp, #8
12654     A7 3E 68 FC | 	wrlong	#31, fp
12658     08 4E 85 F1 | 	sub	fp, #8
1265c     A7 12 02 F6 | 	mov	arg01, fp
12660     18 95 BF FD | 	call	#_push
12664     A7 F0 03 F6 | 	mov	ptra, fp
12668     B2 00 A0 FD | 	call	#popregs_
1266c                 | _do_inkey_ret
1266c     2D 00 64 FD | 	ret
12670                 | 
12670                 | '  
12670                 | ' '------------------------ Operators 
12670                 | ' 
12670                 | ' sub do_plus 
12670                 | _do_plus
12670     05 4A 05 F6 | 	mov	COUNT_, #5
12674     A8 00 A0 FD | 	call	#pushregs_
12678     18 F0 07 F1 | 	add	ptra, #24
1267c     64 94 BF FD | 	call	#_pop
12680     FD 1E 02 F6 | 	mov	local01, result1
12684     FE 20 02 F6 | 	mov	local02, result2
12688     FF 22 02 F6 | 	mov	local03, result3
1268c     0C 4E 05 F1 | 	add	fp, #12
12690     A7 1E 62 FC | 	wrlong	local01, fp
12694     04 4E 05 F1 | 	add	fp, #4
12698     A7 20 62 FC | 	wrlong	local02, fp
1269c     04 4E 05 F1 | 	add	fp, #4
126a0     A7 22 62 FC | 	wrlong	local03, fp
126a4     14 4E 85 F1 | 	sub	fp, #20
126a8     38 94 BF FD | 	call	#_pop
126ac     FF 22 02 F6 | 	mov	local03, result3
126b0     A7 FA 61 FC | 	wrlong	result1, fp
126b4     04 4E 05 F1 | 	add	fp, #4
126b8     A7 FC 61 FC | 	wrlong	result2, fp
126bc     04 4E 05 F1 | 	add	fp, #4
126c0     A7 22 62 FC | 	wrlong	local03, fp
126c4                 | ' 
126c4                 | ' t2=pop()
126c4                 | ' t1=pop()
126c4                 | ' 
126c4                 | ' 
126c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
126c4     08 4E 85 F1 | 	sub	fp, #8
126c8     1D 22 0E F2 | 	cmp	local03, #29 wz
126cc     14 4E 05 A1 |  if_e	add	fp, #20
126d0     A7 24 02 AB |  if_e	rdlong	local04, fp
126d4     14 4E 85 A1 |  if_e	sub	fp, #20
126d8     12 23 02 A6 |  if_e	mov	local03, local04
126dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
126e0     1C 00 90 5D |  if_ne	jmp	#LR__1490
126e4     A7 1E 02 FB | 	rdlong	local01, fp
126e8     0C 4E 05 F1 | 	add	fp, #12
126ec     A7 20 02 FB | 	rdlong	local02, fp
126f0     0C 4E 85 F1 | 	sub	fp, #12
126f4     10 1F 02 F1 | 	add	local01, local02
126f8     A7 1E 62 FC | 	wrlong	local01, fp
126fc     48 04 90 FD | 	jmp	#LR__1505
12700                 | LR__1490
12700                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
12700     08 4E 05 F1 | 	add	fp, #8
12704     A7 1E 02 FB | 	rdlong	local01, fp
12708     08 4E 85 F1 | 	sub	fp, #8
1270c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12710     14 4E 05 A1 |  if_e	add	fp, #20
12714     A7 24 02 AB |  if_e	rdlong	local04, fp
12718     14 4E 85 A1 |  if_e	sub	fp, #20
1271c     12 23 02 A6 |  if_e	mov	local03, local04
12720     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12724     28 00 90 5D |  if_ne	jmp	#LR__1491
12728     A7 1E 02 FB | 	rdlong	local01, fp
1272c     0C 4E 05 F1 | 	add	fp, #12
12730     A7 20 02 FB | 	rdlong	local02, fp
12734     0C 4E 85 F1 | 	sub	fp, #12
12738     10 1F 02 F1 | 	add	local01, local02
1273c     A7 1E 62 FC | 	wrlong	local01, fp
12740     08 4E 05 F1 | 	add	fp, #8
12744     A7 38 68 FC | 	wrlong	#28, fp
12748     08 4E 85 F1 | 	sub	fp, #8
1274c     F8 03 90 FD | 	jmp	#LR__1505
12750                 | LR__1491
12750                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12750     08 4E 05 F1 | 	add	fp, #8
12754     A7 1E 02 FB | 	rdlong	local01, fp
12758     08 4E 85 F1 | 	sub	fp, #8
1275c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12760     14 4E 05 A1 |  if_e	add	fp, #20
12764     A7 24 02 AB |  if_e	rdlong	local04, fp
12768     14 4E 85 A1 |  if_e	sub	fp, #20
1276c     12 23 02 A6 |  if_e	mov	local03, local04
12770     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12774     30 00 90 5D |  if_ne	jmp	#LR__1492
12778     A7 12 02 FB | 	rdlong	arg01, fp
1277c     CC 0A B1 FD | 	call	#__system___float_fromuns
12780     FD 12 02 F6 | 	mov	arg01, result1
12784     0C 4E 05 F1 | 	add	fp, #12
12788     A7 14 02 FB | 	rdlong	arg02, fp
1278c     0C 4E 85 F1 | 	sub	fp, #12
12790     EC 0A B1 FD | 	call	#__system___float_add
12794     A7 FA 61 FC | 	wrlong	result1, fp
12798     08 4E 05 F1 | 	add	fp, #8
1279c     A7 3C 68 FC | 	wrlong	#30, fp
127a0     08 4E 85 F1 | 	sub	fp, #8
127a4     A0 03 90 FD | 	jmp	#LR__1505
127a8                 | LR__1492
127a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
127a8     08 4E 05 F1 | 	add	fp, #8
127ac     A7 1E 02 FB | 	rdlong	local01, fp
127b0     08 4E 85 F1 | 	sub	fp, #8
127b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
127b8     14 4E 05 A1 |  if_e	add	fp, #20
127bc     A7 24 02 AB |  if_e	rdlong	local04, fp
127c0     14 4E 85 A1 |  if_e	sub	fp, #20
127c4     12 23 02 A6 |  if_e	mov	local03, local04
127c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127cc     1C 00 90 5D |  if_ne	jmp	#LR__1493
127d0     A7 1E 02 FB | 	rdlong	local01, fp
127d4     0C 4E 05 F1 | 	add	fp, #12
127d8     A7 20 02 FB | 	rdlong	local02, fp
127dc     0C 4E 85 F1 | 	sub	fp, #12
127e0     10 1F 02 F1 | 	add	local01, local02
127e4     A7 1E 62 FC | 	wrlong	local01, fp
127e8     5C 03 90 FD | 	jmp	#LR__1505
127ec                 | LR__1493
127ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
127ec     08 4E 05 F1 | 	add	fp, #8
127f0     A7 1E 02 FB | 	rdlong	local01, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12810     1C 00 90 5D |  if_ne	jmp	#LR__1494
12814     A7 1E 02 FB | 	rdlong	local01, fp
12818     0C 4E 05 F1 | 	add	fp, #12
1281c     A7 20 02 FB | 	rdlong	local02, fp
12820     0C 4E 85 F1 | 	sub	fp, #12
12824     10 1F 02 F1 | 	add	local01, local02
12828     A7 1E 62 FC | 	wrlong	local01, fp
1282c     18 03 90 FD | 	jmp	#LR__1505
12830                 | LR__1494
12830                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12830     08 4E 05 F1 | 	add	fp, #8
12834     A7 1E 02 FB | 	rdlong	local01, fp
12838     08 4E 85 F1 | 	sub	fp, #8
1283c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12840     14 4E 05 A1 |  if_e	add	fp, #20
12844     A7 24 02 AB |  if_e	rdlong	local04, fp
12848     14 4E 85 A1 |  if_e	sub	fp, #20
1284c     12 23 02 A6 |  if_e	mov	local03, local04
12850     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12854     40 00 90 5D |  if_ne	jmp	#LR__1495
12858     A7 12 02 FB | 	rdlong	arg01, fp
1285c     09 13 52 F6 | 	abs	arg01, arg01 wc
12860     1F 26 C6 C9 |  if_b	decod	local05, #31
12864     00 26 06 36 |  if_ae	mov	local05, #0
12868     E0 09 B1 FD | 	call	#__system___float_fromuns
1286c     13 FB 61 F5 | 	xor	result1, local05
12870     FD 12 02 F6 | 	mov	arg01, result1
12874     0C 4E 05 F1 | 	add	fp, #12
12878     A7 14 02 FB | 	rdlong	arg02, fp
1287c     0C 4E 85 F1 | 	sub	fp, #12
12880     FC 09 B1 FD | 	call	#__system___float_add
12884     A7 FA 61 FC | 	wrlong	result1, fp
12888     08 4E 05 F1 | 	add	fp, #8
1288c     A7 3C 68 FC | 	wrlong	#30, fp
12890     08 4E 85 F1 | 	sub	fp, #8
12894     B0 02 90 FD | 	jmp	#LR__1505
12898                 | LR__1495
12898                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
12898     08 4E 05 F1 | 	add	fp, #8
1289c     A7 1E 02 FB | 	rdlong	local01, fp
128a0     08 4E 85 F1 | 	sub	fp, #8
128a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
128a8     14 4E 05 A1 |  if_e	add	fp, #20
128ac     A7 24 02 AB |  if_e	rdlong	local04, fp
128b0     14 4E 85 A1 |  if_e	sub	fp, #20
128b4     12 23 02 A6 |  if_e	mov	local03, local04
128b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
128bc     28 00 90 5D |  if_ne	jmp	#LR__1496
128c0     A7 1E 02 FB | 	rdlong	local01, fp
128c4     0C 4E 05 F1 | 	add	fp, #12
128c8     A7 12 02 FB | 	rdlong	arg01, fp
128cc     0C 4E 85 F1 | 	sub	fp, #12
128d0     78 09 B1 FD | 	call	#__system___float_fromuns
128d4     FD 14 02 F6 | 	mov	arg02, result1
128d8     0F 13 02 F6 | 	mov	arg01, local01
128dc     A0 09 B1 FD | 	call	#__system___float_add
128e0     A7 FA 61 FC | 	wrlong	result1, fp
128e4     60 02 90 FD | 	jmp	#LR__1505
128e8                 | LR__1496
128e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
128e8     08 4E 05 F1 | 	add	fp, #8
128ec     A7 1E 02 FB | 	rdlong	local01, fp
128f0     08 4E 85 F1 | 	sub	fp, #8
128f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
128f8     14 4E 05 A1 |  if_e	add	fp, #20
128fc     A7 24 02 AB |  if_e	rdlong	local04, fp
12900     14 4E 85 A1 |  if_e	sub	fp, #20
12904     12 23 02 A6 |  if_e	mov	local03, local04
12908     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1290c     38 00 90 5D |  if_ne	jmp	#LR__1497
12910     A7 1E 02 FB | 	rdlong	local01, fp
12914     0C 4E 05 F1 | 	add	fp, #12
12918     A7 12 02 FB | 	rdlong	arg01, fp
1291c     0C 4E 85 F1 | 	sub	fp, #12
12920     09 13 52 F6 | 	abs	arg01, arg01 wc
12924     1F 26 C6 C9 |  if_b	decod	local05, #31
12928     00 26 06 36 |  if_ae	mov	local05, #0
1292c     1C 09 B1 FD | 	call	#__system___float_fromuns
12930     13 FB 61 F5 | 	xor	result1, local05
12934     FD 14 02 F6 | 	mov	arg02, result1
12938     0F 13 02 F6 | 	mov	arg01, local01
1293c     40 09 B1 FD | 	call	#__system___float_add
12940     A7 FA 61 FC | 	wrlong	result1, fp
12944     00 02 90 FD | 	jmp	#LR__1505
12948                 | LR__1497
12948                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12948     08 4E 05 F1 | 	add	fp, #8
1294c     A7 1E 02 FB | 	rdlong	local01, fp
12950     08 4E 85 F1 | 	sub	fp, #8
12954     1E 1E 0E F2 | 	cmp	local01, #30 wz
12958     14 4E 05 A1 |  if_e	add	fp, #20
1295c     A7 24 02 AB |  if_e	rdlong	local04, fp
12960     14 4E 85 A1 |  if_e	sub	fp, #20
12964     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
12968     1C 00 90 5D |  if_ne	jmp	#LR__1498
1296c     A7 12 02 FB | 	rdlong	arg01, fp
12970     0C 4E 05 F1 | 	add	fp, #12
12974     A7 14 02 FB | 	rdlong	arg02, fp
12978     0C 4E 85 F1 | 	sub	fp, #12
1297c     00 09 B1 FD | 	call	#__system___float_add
12980     A7 FA 61 FC | 	wrlong	result1, fp
12984     C0 01 90 FD | 	jmp	#LR__1505
12988                 | LR__1498
12988                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12988     08 4E 05 F1 | 	add	fp, #8
1298c     A7 1E 02 FB | 	rdlong	local01, fp
12990     08 4E 85 F1 | 	sub	fp, #8
12994     1F 1E 0E F2 | 	cmp	local01, #31 wz
12998     24 00 90 5D |  if_ne	jmp	#LR__1499
1299c     14 4E 05 F1 | 	add	fp, #20
129a0     A7 22 02 FB | 	rdlong	local03, fp
129a4     14 4E 85 F1 | 	sub	fp, #20
129a8     1F 22 0E F2 | 	cmp	local03, #31 wz
129ac     A7 04 68 5C |  if_ne	wrlong	#2, fp
129b0     08 4E 05 51 |  if_ne	add	fp, #8
129b4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
129b8     08 4E 85 51 |  if_ne	sub	fp, #8
129bc     88 01 90 5D |  if_ne	jmp	#LR__1505
129c0                 | LR__1499
129c0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
129c0     14 4E 05 F1 | 	add	fp, #20
129c4     A7 1E 02 FB | 	rdlong	local01, fp
129c8     14 4E 85 F1 | 	sub	fp, #20
129cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
129d0     24 00 90 5D |  if_ne	jmp	#LR__1500
129d4     08 4E 05 F1 | 	add	fp, #8
129d8     A7 22 02 FB | 	rdlong	local03, fp
129dc     08 4E 85 F1 | 	sub	fp, #8
129e0     1F 22 0E F2 | 	cmp	local03, #31 wz
129e4     A7 04 68 5C |  if_ne	wrlong	#2, fp
129e8     08 4E 05 51 |  if_ne	add	fp, #8
129ec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
129f0     08 4E 85 51 |  if_ne	sub	fp, #8
129f4     50 01 90 5D |  if_ne	jmp	#LR__1505
129f8                 | LR__1500
129f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
129f8     08 4E 05 F1 | 	add	fp, #8
129fc     A7 1E 02 FB | 	rdlong	local01, fp
12a00     08 4E 85 F1 | 	sub	fp, #8
12a04     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a08     14 4E 05 A1 |  if_e	add	fp, #20
12a0c     A7 22 02 AB |  if_e	rdlong	local03, fp
12a10     14 4E 85 A1 |  if_e	sub	fp, #20
12a14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a18     1C 00 90 5D |  if_ne	jmp	#LR__1501
12a1c     A7 12 02 FB | 	rdlong	arg01, fp
12a20     0C 4E 05 F1 | 	add	fp, #12
12a24     A7 14 02 FB | 	rdlong	arg02, fp
12a28     0C 4E 85 F1 | 	sub	fp, #12
12a2c     C8 E0 B0 FD | 	call	#__system___string_concat
12a30     A7 FA 61 FC | 	wrlong	result1, fp
12a34     10 01 90 FD | 	jmp	#LR__1505
12a38                 | LR__1501
12a38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12a38     08 4E 05 F1 | 	add	fp, #8
12a3c     A7 1E 02 FB | 	rdlong	local01, fp
12a40     08 4E 85 F1 | 	sub	fp, #8
12a44     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a48     14 4E 05 A1 |  if_e	add	fp, #20
12a4c     A7 22 02 AB |  if_e	rdlong	local03, fp
12a50     14 4E 85 A1 |  if_e	sub	fp, #20
12a54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a58     30 00 90 5D |  if_ne	jmp	#LR__1502
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     20 E9 BF FD | 	call	#_convertstring
12a64     FD 12 02 F6 | 	mov	arg01, result1
12a68     0C 4E 05 F1 | 	add	fp, #12
12a6c     A7 14 02 FB | 	rdlong	arg02, fp
12a70     0C 4E 85 F1 | 	sub	fp, #12
12a74     80 E0 B0 FD | 	call	#__system___string_concat
12a78     A7 FA 61 FC | 	wrlong	result1, fp
12a7c     08 4E 05 F1 | 	add	fp, #8
12a80     A7 3E 68 FC | 	wrlong	#31, fp
12a84     08 4E 85 F1 | 	sub	fp, #8
12a88     BC 00 90 FD | 	jmp	#LR__1505
12a8c                 | LR__1502
12a8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12a8c     08 4E 05 F1 | 	add	fp, #8
12a90     A7 1E 02 FB | 	rdlong	local01, fp
12a94     08 4E 85 F1 | 	sub	fp, #8
12a98     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a9c     14 4E 05 A1 |  if_e	add	fp, #20
12aa0     A7 22 02 AB |  if_e	rdlong	local03, fp
12aa4     14 4E 85 A1 |  if_e	sub	fp, #20
12aa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12aac     28 00 90 5D |  if_ne	jmp	#LR__1503
12ab0     A7 1E 02 FB | 	rdlong	local01, fp
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 12 02 FB | 	rdlong	arg01, fp
12abc     0C 4E 85 F1 | 	sub	fp, #12
12ac0     C0 E8 BF FD | 	call	#_convertstring
12ac4     FD 14 02 F6 | 	mov	arg02, result1
12ac8     0F 13 02 F6 | 	mov	arg01, local01
12acc     28 E0 B0 FD | 	call	#__system___string_concat
12ad0     A7 FA 61 FC | 	wrlong	result1, fp
12ad4     70 00 90 FD | 	jmp	#LR__1505
12ad8                 | LR__1503
12ad8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12ad8     08 4E 05 F1 | 	add	fp, #8
12adc     A7 1E 02 FB | 	rdlong	local01, fp
12ae0     08 4E 85 F1 | 	sub	fp, #8
12ae4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12ae8     14 4E 05 A1 |  if_e	add	fp, #20
12aec     A7 22 02 AB |  if_e	rdlong	local03, fp
12af0     14 4E 85 A1 |  if_e	sub	fp, #20
12af4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12af8     3C 00 90 5D |  if_ne	jmp	#LR__1504
12afc     A7 12 02 FB | 	rdlong	arg01, fp
12b00     80 E8 BF FD | 	call	#_convertstring
12b04     FD 1E 02 F6 | 	mov	local01, result1
12b08     0C 4E 05 F1 | 	add	fp, #12
12b0c     A7 12 02 FB | 	rdlong	arg01, fp
12b10     0C 4E 85 F1 | 	sub	fp, #12
12b14     6C E8 BF FD | 	call	#_convertstring
12b18     FD 14 02 F6 | 	mov	arg02, result1
12b1c     0F 13 02 F6 | 	mov	arg01, local01
12b20     D4 DF B0 FD | 	call	#__system___string_concat
12b24     A7 FA 61 FC | 	wrlong	result1, fp
12b28     08 4E 05 F1 | 	add	fp, #8
12b2c     A7 3E 68 FC | 	wrlong	#31, fp
12b30     08 4E 85 F1 | 	sub	fp, #8
12b34     10 00 90 FD | 	jmp	#LR__1505
12b38                 | LR__1504
12b38     A7 08 68 FC | 	wrlong	#4, fp
12b3c     08 4E 05 F1 | 	add	fp, #8
12b40     A7 FE 69 FC | 	wrlong	#255, fp
12b44     08 4E 85 F1 | 	sub	fp, #8
12b48                 | LR__1505
12b48     A7 12 02 F6 | 	mov	arg01, fp
12b4c     2C 90 BF FD | 	call	#_push
12b50     A7 F0 03 F6 | 	mov	ptra, fp
12b54     B2 00 A0 FD | 	call	#popregs_
12b58                 | _do_plus_ret
12b58     2D 00 64 FD | 	ret
12b5c                 | 
12b5c                 | ' 
12b5c                 | ' sub do_minus
12b5c                 | _do_minus
12b5c     05 4A 05 F6 | 	mov	COUNT_, #5
12b60     A8 00 A0 FD | 	call	#pushregs_
12b64     18 F0 07 F1 | 	add	ptra, #24
12b68     78 8F BF FD | 	call	#_pop
12b6c     FD 1E 02 F6 | 	mov	local01, result1
12b70     FE 20 02 F6 | 	mov	local02, result2
12b74     FF 22 02 F6 | 	mov	local03, result3
12b78     0C 4E 05 F1 | 	add	fp, #12
12b7c     A7 1E 62 FC | 	wrlong	local01, fp
12b80     04 4E 05 F1 | 	add	fp, #4
12b84     A7 20 62 FC | 	wrlong	local02, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 22 62 FC | 	wrlong	local03, fp
12b90     14 4E 85 F1 | 	sub	fp, #20
12b94     4C 8F BF FD | 	call	#_pop
12b98     FF 22 02 F6 | 	mov	local03, result3
12b9c     A7 FA 61 FC | 	wrlong	result1, fp
12ba0     04 4E 05 F1 | 	add	fp, #4
12ba4     A7 FC 61 FC | 	wrlong	result2, fp
12ba8     04 4E 05 F1 | 	add	fp, #4
12bac     A7 22 62 FC | 	wrlong	local03, fp
12bb0                 | ' 
12bb0                 | ' t2=pop()
12bb0                 | ' t1=pop()
12bb0                 | ' 
12bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12bb0     08 4E 85 F1 | 	sub	fp, #8
12bb4     1D 22 0E F2 | 	cmp	local03, #29 wz
12bb8     14 4E 05 A1 |  if_e	add	fp, #20
12bbc     A7 24 02 AB |  if_e	rdlong	local04, fp
12bc0     14 4E 85 A1 |  if_e	sub	fp, #20
12bc4     12 23 02 A6 |  if_e	mov	local03, local04
12bc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12bcc     5C 00 90 5D |  if_ne	jmp	#LR__1511
12bd0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12bd0     0C 4E 05 F1 | 	add	fp, #12
12bd4     A7 1E 02 FB | 	rdlong	local01, fp
12bd8     0C 4E 85 F1 | 	sub	fp, #12
12bdc     A7 22 02 FB | 	rdlong	local03, fp
12be0     11 1F 12 F2 | 	cmp	local01, local03 wc
12be4     1C 00 90 3D |  if_ae	jmp	#LR__1510
12be8     A7 1E 02 FB | 	rdlong	local01, fp
12bec     0C 4E 05 F1 | 	add	fp, #12
12bf0     A7 20 02 FB | 	rdlong	local02, fp
12bf4     0C 4E 85 F1 | 	sub	fp, #12
12bf8     10 1F 82 F1 | 	sub	local01, local02
12bfc     A7 1E 62 FC | 	wrlong	local01, fp
12c00     F4 02 90 FD | 	jmp	#LR__1520
12c04                 | LR__1510
12c04     A7 1E 02 FB | 	rdlong	local01, fp
12c08     0C 4E 05 F1 | 	add	fp, #12
12c0c     A7 20 02 FB | 	rdlong	local02, fp
12c10     0C 4E 85 F1 | 	sub	fp, #12
12c14     10 1F 82 F1 | 	sub	local01, local02
12c18     A7 1E 62 FC | 	wrlong	local01, fp
12c1c     08 4E 05 F1 | 	add	fp, #8
12c20     A7 38 68 FC | 	wrlong	#28, fp
12c24     08 4E 85 F1 | 	sub	fp, #8
12c28     CC 02 90 FD | 	jmp	#LR__1520
12c2c                 | LR__1511
12c2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12c2c     08 4E 05 F1 | 	add	fp, #8
12c30     A7 1E 02 FB | 	rdlong	local01, fp
12c34     08 4E 85 F1 | 	sub	fp, #8
12c38     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c3c     14 4E 05 A1 |  if_e	add	fp, #20
12c40     A7 24 02 AB |  if_e	rdlong	local04, fp
12c44     14 4E 85 A1 |  if_e	sub	fp, #20
12c48     12 23 02 A6 |  if_e	mov	local03, local04
12c4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c50     28 00 90 5D |  if_ne	jmp	#LR__1512
12c54     A7 1E 02 FB | 	rdlong	local01, fp
12c58     0C 4E 05 F1 | 	add	fp, #12
12c5c     A7 20 02 FB | 	rdlong	local02, fp
12c60     0C 4E 85 F1 | 	sub	fp, #12
12c64     10 1F 82 F1 | 	sub	local01, local02
12c68     A7 1E 62 FC | 	wrlong	local01, fp
12c6c     08 4E 05 F1 | 	add	fp, #8
12c70     A7 38 68 FC | 	wrlong	#28, fp
12c74     08 4E 85 F1 | 	sub	fp, #8
12c78     7C 02 90 FD | 	jmp	#LR__1520
12c7c                 | LR__1512
12c7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12c7c     08 4E 05 F1 | 	add	fp, #8
12c80     A7 1E 02 FB | 	rdlong	local01, fp
12c84     08 4E 85 F1 | 	sub	fp, #8
12c88     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c8c     14 4E 05 A1 |  if_e	add	fp, #20
12c90     A7 24 02 AB |  if_e	rdlong	local04, fp
12c94     14 4E 85 A1 |  if_e	sub	fp, #20
12c98     12 23 02 A6 |  if_e	mov	local03, local04
12c9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12ca0     34 00 90 5D |  if_ne	jmp	#LR__1513
12ca4     A7 12 02 FB | 	rdlong	arg01, fp
12ca8     A0 05 B1 FD | 	call	#__system___float_fromuns
12cac     FD 12 02 F6 | 	mov	arg01, result1
12cb0     0C 4E 05 F1 | 	add	fp, #12
12cb4     A7 14 02 FB | 	rdlong	arg02, fp
12cb8     0C 4E 85 F1 | 	sub	fp, #12
12cbc     1F 14 E6 F4 | 	bitnot	arg02, #31
12cc0     BC 05 B1 FD | 	call	#__system___float_add
12cc4     A7 FA 61 FC | 	wrlong	result1, fp
12cc8     08 4E 05 F1 | 	add	fp, #8
12ccc     A7 3C 68 FC | 	wrlong	#30, fp
12cd0     08 4E 85 F1 | 	sub	fp, #8
12cd4     20 02 90 FD | 	jmp	#LR__1520
12cd8                 | LR__1513
12cd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12cd8     08 4E 05 F1 | 	add	fp, #8
12cdc     A7 1E 02 FB | 	rdlong	local01, fp
12ce0     08 4E 85 F1 | 	sub	fp, #8
12ce4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12ce8     14 4E 05 A1 |  if_e	add	fp, #20
12cec     A7 24 02 AB |  if_e	rdlong	local04, fp
12cf0     14 4E 85 A1 |  if_e	sub	fp, #20
12cf4     12 23 02 A6 |  if_e	mov	local03, local04
12cf8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12cfc     1C 00 90 5D |  if_ne	jmp	#LR__1514
12d00     A7 1E 02 FB | 	rdlong	local01, fp
12d04     0C 4E 05 F1 | 	add	fp, #12
12d08     A7 20 02 FB | 	rdlong	local02, fp
12d0c     0C 4E 85 F1 | 	sub	fp, #12
12d10     10 1F 82 F1 | 	sub	local01, local02
12d14     A7 1E 62 FC | 	wrlong	local01, fp
12d18     DC 01 90 FD | 	jmp	#LR__1520
12d1c                 | LR__1514
12d1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12d1c     08 4E 05 F1 | 	add	fp, #8
12d20     A7 1E 02 FB | 	rdlong	local01, fp
12d24     08 4E 85 F1 | 	sub	fp, #8
12d28     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d2c     14 4E 05 A1 |  if_e	add	fp, #20
12d30     A7 24 02 AB |  if_e	rdlong	local04, fp
12d34     14 4E 85 A1 |  if_e	sub	fp, #20
12d38     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12d3c     1C 00 90 5D |  if_ne	jmp	#LR__1515
12d40     A7 1E 02 FB | 	rdlong	local01, fp
12d44     0C 4E 05 F1 | 	add	fp, #12
12d48     A7 20 02 FB | 	rdlong	local02, fp
12d4c     0C 4E 85 F1 | 	sub	fp, #12
12d50     10 1F 82 F1 | 	sub	local01, local02
12d54     A7 1E 62 FC | 	wrlong	local01, fp
12d58     9C 01 90 FD | 	jmp	#LR__1520
12d5c                 | LR__1515
12d5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12d5c     08 4E 05 F1 | 	add	fp, #8
12d60     A7 1E 02 FB | 	rdlong	local01, fp
12d64     08 4E 85 F1 | 	sub	fp, #8
12d68     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d6c     14 4E 05 A1 |  if_e	add	fp, #20
12d70     A7 22 02 AB |  if_e	rdlong	local03, fp
12d74     14 4E 85 A1 |  if_e	sub	fp, #20
12d78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d7c     44 00 90 5D |  if_ne	jmp	#LR__1516
12d80     A7 12 02 FB | 	rdlong	arg01, fp
12d84     09 13 52 F6 | 	abs	arg01, arg01 wc
12d88     1F 26 C6 C9 |  if_b	decod	local05, #31
12d8c     00 26 06 36 |  if_ae	mov	local05, #0
12d90     B8 04 B1 FD | 	call	#__system___float_fromuns
12d94     13 FB 61 F5 | 	xor	result1, local05
12d98     FD 12 02 F6 | 	mov	arg01, result1
12d9c     0C 4E 05 F1 | 	add	fp, #12
12da0     A7 14 02 FB | 	rdlong	arg02, fp
12da4     0C 4E 85 F1 | 	sub	fp, #12
12da8     1F 14 E6 F4 | 	bitnot	arg02, #31
12dac     D0 04 B1 FD | 	call	#__system___float_add
12db0     A7 FA 61 FC | 	wrlong	result1, fp
12db4     08 4E 05 F1 | 	add	fp, #8
12db8     A7 3C 68 FC | 	wrlong	#30, fp
12dbc     08 4E 85 F1 | 	sub	fp, #8
12dc0     34 01 90 FD | 	jmp	#LR__1520
12dc4                 | LR__1516
12dc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12dc4     08 4E 05 F1 | 	add	fp, #8
12dc8     A7 1E 02 FB | 	rdlong	local01, fp
12dcc     08 4E 85 F1 | 	sub	fp, #8
12dd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12dd4     14 4E 05 A1 |  if_e	add	fp, #20
12dd8     A7 22 02 AB |  if_e	rdlong	local03, fp
12ddc     14 4E 85 A1 |  if_e	sub	fp, #20
12de0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12de4     2C 00 90 5D |  if_ne	jmp	#LR__1517
12de8     A7 1E 02 FB | 	rdlong	local01, fp
12dec     0C 4E 05 F1 | 	add	fp, #12
12df0     A7 12 02 FB | 	rdlong	arg01, fp
12df4     0C 4E 85 F1 | 	sub	fp, #12
12df8     50 04 B1 FD | 	call	#__system___float_fromuns
12dfc     FD 14 02 F6 | 	mov	arg02, result1
12e00     0F 13 02 F6 | 	mov	arg01, local01
12e04     1F 14 E6 F4 | 	bitnot	arg02, #31
12e08     74 04 B1 FD | 	call	#__system___float_add
12e0c     A7 FA 61 FC | 	wrlong	result1, fp
12e10     E4 00 90 FD | 	jmp	#LR__1520
12e14                 | LR__1517
12e14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12e14     08 4E 05 F1 | 	add	fp, #8
12e18     A7 1E 02 FB | 	rdlong	local01, fp
12e1c     08 4E 85 F1 | 	sub	fp, #8
12e20     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e24     14 4E 05 A1 |  if_e	add	fp, #20
12e28     A7 22 02 AB |  if_e	rdlong	local03, fp
12e2c     14 4E 85 A1 |  if_e	sub	fp, #20
12e30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e34     3C 00 90 5D |  if_ne	jmp	#LR__1518
12e38     A7 1E 02 FB | 	rdlong	local01, fp
12e3c     0C 4E 05 F1 | 	add	fp, #12
12e40     A7 12 02 FB | 	rdlong	arg01, fp
12e44     0C 4E 85 F1 | 	sub	fp, #12
12e48     09 13 52 F6 | 	abs	arg01, arg01 wc
12e4c     1F 26 C6 C9 |  if_b	decod	local05, #31
12e50     00 26 06 36 |  if_ae	mov	local05, #0
12e54     F4 03 B1 FD | 	call	#__system___float_fromuns
12e58     13 FB 61 F5 | 	xor	result1, local05
12e5c     FD 14 02 F6 | 	mov	arg02, result1
12e60     0F 13 02 F6 | 	mov	arg01, local01
12e64     1F 14 E6 F4 | 	bitnot	arg02, #31
12e68     14 04 B1 FD | 	call	#__system___float_add
12e6c     A7 FA 61 FC | 	wrlong	result1, fp
12e70     84 00 90 FD | 	jmp	#LR__1520
12e74                 | LR__1518
12e74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12e74     08 4E 05 F1 | 	add	fp, #8
12e78     A7 1E 02 FB | 	rdlong	local01, fp
12e7c     08 4E 85 F1 | 	sub	fp, #8
12e80     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e84     14 4E 05 A1 |  if_e	add	fp, #20
12e88     A7 22 02 AB |  if_e	rdlong	local03, fp
12e8c     14 4E 85 A1 |  if_e	sub	fp, #20
12e90     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e94     20 00 90 5D |  if_ne	jmp	#LR__1519
12e98     A7 12 02 FB | 	rdlong	arg01, fp
12e9c     0C 4E 05 F1 | 	add	fp, #12
12ea0     A7 14 02 FB | 	rdlong	arg02, fp
12ea4     0C 4E 85 F1 | 	sub	fp, #12
12ea8     1F 14 E6 F4 | 	bitnot	arg02, #31
12eac     D0 03 B1 FD | 	call	#__system___float_add
12eb0     A7 FA 61 FC | 	wrlong	result1, fp
12eb4     40 00 90 FD | 	jmp	#LR__1520
12eb8                 | LR__1519
12eb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12eb8     08 4E 05 F1 | 	add	fp, #8
12ebc     A7 1E 02 FB | 	rdlong	local01, fp
12ec0     08 4E 85 F1 | 	sub	fp, #8
12ec4     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ec8     14 4E 05 51 |  if_ne	add	fp, #20
12ecc     A7 22 02 5B |  if_ne	rdlong	local03, fp
12ed0     14 4E 85 51 |  if_ne	sub	fp, #20
12ed4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12ed8     A7 06 68 AC |  if_e	wrlong	#3, fp
12edc     08 4E 05 A1 |  if_e	add	fp, #8
12ee0     A7 FE 69 AC |  if_e	wrlong	#255, fp
12ee4     08 4E 85 A1 |  if_e	sub	fp, #8
12ee8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12eec     08 4E 05 51 |  if_ne	add	fp, #8
12ef0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12ef4     08 4E 85 51 |  if_ne	sub	fp, #8
12ef8                 | LR__1520
12ef8     A7 12 02 F6 | 	mov	arg01, fp
12efc     7C 8C BF FD | 	call	#_push
12f00     A7 F0 03 F6 | 	mov	ptra, fp
12f04     B2 00 A0 FD | 	call	#popregs_
12f08                 | _do_minus_ret
12f08     2D 00 64 FD | 	ret
12f0c                 | 
12f0c                 | ' 
12f0c                 | ' sub do_and 
12f0c                 | _do_and
12f0c     03 4A 05 F6 | 	mov	COUNT_, #3
12f10     A8 00 A0 FD | 	call	#pushregs_
12f14     18 F0 07 F1 | 	add	ptra, #24
12f18     C8 8B BF FD | 	call	#_pop
12f1c     FD 12 02 F6 | 	mov	arg01, result1
12f20     FE 1E 02 F6 | 	mov	local01, result2
12f24     FF 20 02 F6 | 	mov	local02, result3
12f28     0C 4E 05 F1 | 	add	fp, #12
12f2c     A7 12 62 FC | 	wrlong	arg01, fp
12f30     04 4E 05 F1 | 	add	fp, #4
12f34     A7 1E 62 FC | 	wrlong	local01, fp
12f38     04 4E 05 F1 | 	add	fp, #4
12f3c     A7 20 62 FC | 	wrlong	local02, fp
12f40     14 4E 85 F1 | 	sub	fp, #20
12f44     9C 8B BF FD | 	call	#_pop
12f48     FF 22 02 F6 | 	mov	local03, result3
12f4c     A7 FA 61 FC | 	wrlong	result1, fp
12f50     04 4E 05 F1 | 	add	fp, #4
12f54     A7 FC 61 FC | 	wrlong	result2, fp
12f58     04 4E 05 F1 | 	add	fp, #4
12f5c     A7 22 62 FC | 	wrlong	local03, fp
12f60                 | ' 
12f60                 | ' t2=pop()
12f60                 | ' t1=pop()
12f60                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12f60     08 4E 85 F1 | 	sub	fp, #8
12f64     1C 22 0E F2 | 	cmp	local03, #28 wz
12f68     A7 22 02 AB |  if_e	rdlong	local03, fp
12f6c     A7 22 62 AC |  if_e	wrlong	local03, fp
12f70     08 4E 05 A1 |  if_e	add	fp, #8
12f74     A7 3A 68 AC |  if_e	wrlong	#29, fp
12f78     08 4E 85 A1 |  if_e	sub	fp, #8
12f7c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12f7c     14 4E 05 F1 | 	add	fp, #20
12f80     A7 22 02 FB | 	rdlong	local03, fp
12f84     14 4E 85 F1 | 	sub	fp, #20
12f88     1C 22 0E F2 | 	cmp	local03, #28 wz
12f8c     18 00 90 5D |  if_ne	jmp	#LR__1530
12f90     0C 4E 05 F1 | 	add	fp, #12
12f94     A7 22 02 FB | 	rdlong	local03, fp
12f98     A7 22 62 FC | 	wrlong	local03, fp
12f9c     08 4E 05 F1 | 	add	fp, #8
12fa0     A7 3A 68 FC | 	wrlong	#29, fp
12fa4     14 4E 85 F1 | 	sub	fp, #20
12fa8                 | LR__1530
12fa8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12fa8     08 4E 05 F1 | 	add	fp, #8
12fac     A7 22 02 FB | 	rdlong	local03, fp
12fb0     08 4E 85 F1 | 	sub	fp, #8
12fb4     1F 22 0E F2 | 	cmp	local03, #31 wz
12fb8     14 4E 05 51 |  if_ne	add	fp, #20
12fbc     A7 20 02 5B |  if_ne	rdlong	local02, fp
12fc0     14 4E 85 51 |  if_ne	sub	fp, #20
12fc4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
12fc8     08 4E 05 51 |  if_ne	add	fp, #8
12fcc     A7 22 02 5B |  if_ne	rdlong	local03, fp
12fd0     08 4E 85 51 |  if_ne	sub	fp, #8
12fd4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
12fd8     14 4E 05 51 |  if_ne	add	fp, #20
12fdc     14 4E 85 51 |  if_ne	sub	fp, #20
12fe0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
12fe4     A7 0C 68 AC |  if_e	wrlong	#6, fp
12fe8     08 4E 05 A1 |  if_e	add	fp, #8
12fec     A7 FE 69 AC |  if_e	wrlong	#255, fp
12ff0     08 4E 85 A1 |  if_e	sub	fp, #8
12ff4     18 00 90 AD |  if_e	jmp	#LR__1531
12ff8     A7 22 02 FB | 	rdlong	local03, fp
12ffc     0C 4E 05 F1 | 	add	fp, #12
13000     A7 1E 02 FB | 	rdlong	local01, fp
13004     0C 4E 85 F1 | 	sub	fp, #12
13008     0F 23 02 F5 | 	and	local03, local01
1300c     A7 22 62 FC | 	wrlong	local03, fp
13010                 | LR__1531
13010     A7 12 02 F6 | 	mov	arg01, fp
13014     64 8B BF FD | 	call	#_push
13018     A7 F0 03 F6 | 	mov	ptra, fp
1301c     B2 00 A0 FD | 	call	#popregs_
13020                 | _do_and_ret
13020     2D 00 64 FD | 	ret
13024                 | 
13024                 | ' 
13024                 | ' sub do_or 
13024                 | _do_or
13024     03 4A 05 F6 | 	mov	COUNT_, #3
13028     A8 00 A0 FD | 	call	#pushregs_
1302c     18 F0 07 F1 | 	add	ptra, #24
13030     B0 8A BF FD | 	call	#_pop
13034     FD 12 02 F6 | 	mov	arg01, result1
13038     FE 1E 02 F6 | 	mov	local01, result2
1303c     FF 20 02 F6 | 	mov	local02, result3
13040     0C 4E 05 F1 | 	add	fp, #12
13044     A7 12 62 FC | 	wrlong	arg01, fp
13048     04 4E 05 F1 | 	add	fp, #4
1304c     A7 1E 62 FC | 	wrlong	local01, fp
13050     04 4E 05 F1 | 	add	fp, #4
13054     A7 20 62 FC | 	wrlong	local02, fp
13058     14 4E 85 F1 | 	sub	fp, #20
1305c     84 8A BF FD | 	call	#_pop
13060     FF 22 02 F6 | 	mov	local03, result3
13064     A7 FA 61 FC | 	wrlong	result1, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 FC 61 FC | 	wrlong	result2, fp
13070     04 4E 05 F1 | 	add	fp, #4
13074     A7 22 62 FC | 	wrlong	local03, fp
13078                 | ' 
13078                 | ' t2=pop()
13078                 | ' t1=pop()
13078                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13078     08 4E 85 F1 | 	sub	fp, #8
1307c     1C 22 0E F2 | 	cmp	local03, #28 wz
13080     A7 22 02 AB |  if_e	rdlong	local03, fp
13084     A7 22 62 AC |  if_e	wrlong	local03, fp
13088     08 4E 05 A1 |  if_e	add	fp, #8
1308c     A7 3A 68 AC |  if_e	wrlong	#29, fp
13090     08 4E 85 A1 |  if_e	sub	fp, #8
13094                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13094     14 4E 05 F1 | 	add	fp, #20
13098     A7 22 02 FB | 	rdlong	local03, fp
1309c     14 4E 85 F1 | 	sub	fp, #20
130a0     1C 22 0E F2 | 	cmp	local03, #28 wz
130a4     18 00 90 5D |  if_ne	jmp	#LR__1540
130a8     0C 4E 05 F1 | 	add	fp, #12
130ac     A7 22 02 FB | 	rdlong	local03, fp
130b0     A7 22 62 FC | 	wrlong	local03, fp
130b4     08 4E 05 F1 | 	add	fp, #8
130b8     A7 3A 68 FC | 	wrlong	#29, fp
130bc     14 4E 85 F1 | 	sub	fp, #20
130c0                 | LR__1540
130c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
130c0     08 4E 05 F1 | 	add	fp, #8
130c4     A7 22 02 FB | 	rdlong	local03, fp
130c8     08 4E 85 F1 | 	sub	fp, #8
130cc     1F 22 0E F2 | 	cmp	local03, #31 wz
130d0     14 4E 05 51 |  if_ne	add	fp, #20
130d4     A7 20 02 5B |  if_ne	rdlong	local02, fp
130d8     14 4E 85 51 |  if_ne	sub	fp, #20
130dc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
130e0     08 4E 05 51 |  if_ne	add	fp, #8
130e4     A7 22 02 5B |  if_ne	rdlong	local03, fp
130e8     08 4E 85 51 |  if_ne	sub	fp, #8
130ec     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
130f0     14 4E 05 51 |  if_ne	add	fp, #20
130f4     14 4E 85 51 |  if_ne	sub	fp, #20
130f8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
130fc     A7 0C 68 AC |  if_e	wrlong	#6, fp
13100     08 4E 05 A1 |  if_e	add	fp, #8
13104     A7 FE 69 AC |  if_e	wrlong	#255, fp
13108     08 4E 85 A1 |  if_e	sub	fp, #8
1310c     18 00 90 AD |  if_e	jmp	#LR__1541
13110     A7 22 02 FB | 	rdlong	local03, fp
13114     0C 4E 05 F1 | 	add	fp, #12
13118     A7 1E 02 FB | 	rdlong	local01, fp
1311c     0C 4E 85 F1 | 	sub	fp, #12
13120     0F 23 42 F5 | 	or	local03, local01
13124     A7 22 62 FC | 	wrlong	local03, fp
13128                 | LR__1541
13128     A7 12 02 F6 | 	mov	arg01, fp
1312c     4C 8A BF FD | 	call	#_push
13130     A7 F0 03 F6 | 	mov	ptra, fp
13134     B2 00 A0 FD | 	call	#popregs_
13138                 | _do_or_ret
13138     2D 00 64 FD | 	ret
1313c                 | 
1313c                 | ' 
1313c                 | ' sub do_mul
1313c                 | _do_mul
1313c     05 4A 05 F6 | 	mov	COUNT_, #5
13140     A8 00 A0 FD | 	call	#pushregs_
13144     18 F0 07 F1 | 	add	ptra, #24
13148     98 89 BF FD | 	call	#_pop
1314c     FD 1E 02 F6 | 	mov	local01, result1
13150     FE 20 02 F6 | 	mov	local02, result2
13154     FF 22 02 F6 | 	mov	local03, result3
13158     0C 4E 05 F1 | 	add	fp, #12
1315c     A7 1E 62 FC | 	wrlong	local01, fp
13160     04 4E 05 F1 | 	add	fp, #4
13164     A7 20 62 FC | 	wrlong	local02, fp
13168     04 4E 05 F1 | 	add	fp, #4
1316c     A7 22 62 FC | 	wrlong	local03, fp
13170     14 4E 85 F1 | 	sub	fp, #20
13174     6C 89 BF FD | 	call	#_pop
13178     FF 22 02 F6 | 	mov	local03, result3
1317c     A7 FA 61 FC | 	wrlong	result1, fp
13180     04 4E 05 F1 | 	add	fp, #4
13184     A7 FC 61 FC | 	wrlong	result2, fp
13188     04 4E 05 F1 | 	add	fp, #4
1318c     A7 22 62 FC | 	wrlong	local03, fp
13190                 | ' 
13190                 | ' t2=pop()
13190                 | ' t1=pop()
13190                 | ' 
13190                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
13190     08 4E 85 F1 | 	sub	fp, #8
13194     1D 22 0E F2 | 	cmp	local03, #29 wz
13198     14 4E 05 A1 |  if_e	add	fp, #20
1319c     A7 24 02 AB |  if_e	rdlong	local04, fp
131a0     14 4E 85 A1 |  if_e	sub	fp, #20
131a4     12 23 02 A6 |  if_e	mov	local03, local04
131a8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131ac     20 00 90 5D |  if_ne	jmp	#LR__1550
131b0     A7 20 02 FB | 	rdlong	local02, fp
131b4     0C 4E 05 F1 | 	add	fp, #12
131b8     A7 22 02 FB | 	rdlong	local03, fp
131bc     11 21 02 FD | 	qmul	local02, local03
131c0     0C 4E 85 F1 | 	sub	fp, #12
131c4     18 1E 62 FD | 	getqx	local01
131c8     A7 1E 62 FC | 	wrlong	local01, fp
131cc     C4 02 90 FD | 	jmp	#LR__1559
131d0                 | LR__1550
131d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
131d0     08 4E 05 F1 | 	add	fp, #8
131d4     A7 1E 02 FB | 	rdlong	local01, fp
131d8     08 4E 85 F1 | 	sub	fp, #8
131dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
131e0     14 4E 05 A1 |  if_e	add	fp, #20
131e4     A7 24 02 AB |  if_e	rdlong	local04, fp
131e8     14 4E 85 A1 |  if_e	sub	fp, #20
131ec     12 23 02 A6 |  if_e	mov	local03, local04
131f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
131f4     2C 00 90 5D |  if_ne	jmp	#LR__1551
131f8     A7 20 02 FB | 	rdlong	local02, fp
131fc     0C 4E 05 F1 | 	add	fp, #12
13200     A7 22 02 FB | 	rdlong	local03, fp
13204     11 21 02 FD | 	qmul	local02, local03
13208     0C 4E 85 F1 | 	sub	fp, #12
1320c     18 1E 62 FD | 	getqx	local01
13210     A7 1E 62 FC | 	wrlong	local01, fp
13214     08 4E 05 F1 | 	add	fp, #8
13218     A7 38 68 FC | 	wrlong	#28, fp
1321c     08 4E 85 F1 | 	sub	fp, #8
13220     70 02 90 FD | 	jmp	#LR__1559
13224                 | LR__1551
13224                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13224     08 4E 05 F1 | 	add	fp, #8
13228     A7 1E 02 FB | 	rdlong	local01, fp
1322c     08 4E 85 F1 | 	sub	fp, #8
13230     1D 1E 0E F2 | 	cmp	local01, #29 wz
13234     14 4E 05 A1 |  if_e	add	fp, #20
13238     A7 24 02 AB |  if_e	rdlong	local04, fp
1323c     14 4E 85 A1 |  if_e	sub	fp, #20
13240     12 23 02 A6 |  if_e	mov	local03, local04
13244     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13248     30 00 90 5D |  if_ne	jmp	#LR__1552
1324c     A7 12 02 FB | 	rdlong	arg01, fp
13250     F8 FF B0 FD | 	call	#__system___float_fromuns
13254     FD 12 02 F6 | 	mov	arg01, result1
13258     0C 4E 05 F1 | 	add	fp, #12
1325c     A7 14 02 FB | 	rdlong	arg02, fp
13260     0C 4E 85 F1 | 	sub	fp, #12
13264     E8 03 B1 FD | 	call	#__system___float_mul
13268     A7 FA 61 FC | 	wrlong	result1, fp
1326c     08 4E 05 F1 | 	add	fp, #8
13270     A7 3C 68 FC | 	wrlong	#30, fp
13274     08 4E 85 F1 | 	sub	fp, #8
13278     18 02 90 FD | 	jmp	#LR__1559
1327c                 | LR__1552
1327c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1327c     08 4E 05 F1 | 	add	fp, #8
13280     A7 1E 02 FB | 	rdlong	local01, fp
13284     08 4E 85 F1 | 	sub	fp, #8
13288     1C 1E 0E F2 | 	cmp	local01, #28 wz
1328c     14 4E 05 A1 |  if_e	add	fp, #20
13290     A7 24 02 AB |  if_e	rdlong	local04, fp
13294     14 4E 85 A1 |  if_e	sub	fp, #20
13298     12 23 02 A6 |  if_e	mov	local03, local04
1329c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
132a0     20 00 90 5D |  if_ne	jmp	#LR__1553
132a4     A7 20 02 FB | 	rdlong	local02, fp
132a8     0C 4E 05 F1 | 	add	fp, #12
132ac     A7 22 02 FB | 	rdlong	local03, fp
132b0     11 21 02 FD | 	qmul	local02, local03
132b4     0C 4E 85 F1 | 	sub	fp, #12
132b8     18 1E 62 FD | 	getqx	local01
132bc     A7 1E 62 FC | 	wrlong	local01, fp
132c0     D0 01 90 FD | 	jmp	#LR__1559
132c4                 | LR__1553
132c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
132c4     08 4E 05 F1 | 	add	fp, #8
132c8     A7 1E 02 FB | 	rdlong	local01, fp
132cc     08 4E 85 F1 | 	sub	fp, #8
132d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132d4     14 4E 05 A1 |  if_e	add	fp, #20
132d8     A7 24 02 AB |  if_e	rdlong	local04, fp
132dc     14 4E 85 A1 |  if_e	sub	fp, #20
132e0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
132e4     20 00 90 5D |  if_ne	jmp	#LR__1554
132e8     A7 20 02 FB | 	rdlong	local02, fp
132ec     0C 4E 05 F1 | 	add	fp, #12
132f0     A7 22 02 FB | 	rdlong	local03, fp
132f4     11 21 02 FD | 	qmul	local02, local03
132f8     0C 4E 85 F1 | 	sub	fp, #12
132fc     18 1E 62 FD | 	getqx	local01
13300     A7 1E 62 FC | 	wrlong	local01, fp
13304     8C 01 90 FD | 	jmp	#LR__1559
13308                 | LR__1554
13308                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13308     08 4E 05 F1 | 	add	fp, #8
1330c     A7 1E 02 FB | 	rdlong	local01, fp
13310     08 4E 85 F1 | 	sub	fp, #8
13314     1C 1E 0E F2 | 	cmp	local01, #28 wz
13318     14 4E 05 A1 |  if_e	add	fp, #20
1331c     A7 22 02 AB |  if_e	rdlong	local03, fp
13320     14 4E 85 A1 |  if_e	sub	fp, #20
13324     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13328     40 00 90 5D |  if_ne	jmp	#LR__1555
1332c     A7 12 02 FB | 	rdlong	arg01, fp
13330     09 13 52 F6 | 	abs	arg01, arg01 wc
13334     1F 26 C6 C9 |  if_b	decod	local05, #31
13338     00 26 06 36 |  if_ae	mov	local05, #0
1333c     0C FF B0 FD | 	call	#__system___float_fromuns
13340     13 FB 61 F5 | 	xor	result1, local05
13344     FD 12 02 F6 | 	mov	arg01, result1
13348     0C 4E 05 F1 | 	add	fp, #12
1334c     A7 14 02 FB | 	rdlong	arg02, fp
13350     0C 4E 85 F1 | 	sub	fp, #12
13354     F8 02 B1 FD | 	call	#__system___float_mul
13358     A7 FA 61 FC | 	wrlong	result1, fp
1335c     08 4E 05 F1 | 	add	fp, #8
13360     A7 3C 68 FC | 	wrlong	#30, fp
13364     08 4E 85 F1 | 	sub	fp, #8
13368     28 01 90 FD | 	jmp	#LR__1559
1336c                 | LR__1555
1336c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1336c     08 4E 05 F1 | 	add	fp, #8
13370     A7 1E 02 FB | 	rdlong	local01, fp
13374     08 4E 85 F1 | 	sub	fp, #8
13378     1E 1E 0E F2 | 	cmp	local01, #30 wz
1337c     14 4E 05 A1 |  if_e	add	fp, #20
13380     A7 22 02 AB |  if_e	rdlong	local03, fp
13384     14 4E 85 A1 |  if_e	sub	fp, #20
13388     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1338c     28 00 90 5D |  if_ne	jmp	#LR__1556
13390     A7 1E 02 FB | 	rdlong	local01, fp
13394     0C 4E 05 F1 | 	add	fp, #12
13398     A7 12 02 FB | 	rdlong	arg01, fp
1339c     0C 4E 85 F1 | 	sub	fp, #12
133a0     A8 FE B0 FD | 	call	#__system___float_fromuns
133a4     FD 14 02 F6 | 	mov	arg02, result1
133a8     0F 13 02 F6 | 	mov	arg01, local01
133ac     A0 02 B1 FD | 	call	#__system___float_mul
133b0     A7 FA 61 FC | 	wrlong	result1, fp
133b4     DC 00 90 FD | 	jmp	#LR__1559
133b8                 | LR__1556
133b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
133b8     08 4E 05 F1 | 	add	fp, #8
133bc     A7 1E 02 FB | 	rdlong	local01, fp
133c0     08 4E 85 F1 | 	sub	fp, #8
133c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
133c8     14 4E 05 A1 |  if_e	add	fp, #20
133cc     A7 22 02 AB |  if_e	rdlong	local03, fp
133d0     14 4E 85 A1 |  if_e	sub	fp, #20
133d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
133d8     38 00 90 5D |  if_ne	jmp	#LR__1557
133dc     A7 1E 02 FB | 	rdlong	local01, fp
133e0     0C 4E 05 F1 | 	add	fp, #12
133e4     A7 12 02 FB | 	rdlong	arg01, fp
133e8     0C 4E 85 F1 | 	sub	fp, #12
133ec     09 13 52 F6 | 	abs	arg01, arg01 wc
133f0     1F 26 C6 C9 |  if_b	decod	local05, #31
133f4     00 26 06 36 |  if_ae	mov	local05, #0
133f8     50 FE B0 FD | 	call	#__system___float_fromuns
133fc     13 FB 61 F5 | 	xor	result1, local05
13400     FD 14 02 F6 | 	mov	arg02, result1
13404     0F 13 02 F6 | 	mov	arg01, local01
13408     44 02 B1 FD | 	call	#__system___float_mul
1340c     A7 FA 61 FC | 	wrlong	result1, fp
13410     80 00 90 FD | 	jmp	#LR__1559
13414                 | LR__1557
13414                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
13414     08 4E 05 F1 | 	add	fp, #8
13418     A7 1E 02 FB | 	rdlong	local01, fp
1341c     08 4E 85 F1 | 	sub	fp, #8
13420     1E 1E 0E F2 | 	cmp	local01, #30 wz
13424     14 4E 05 A1 |  if_e	add	fp, #20
13428     A7 22 02 AB |  if_e	rdlong	local03, fp
1342c     14 4E 85 A1 |  if_e	sub	fp, #20
13430     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13434     1C 00 90 5D |  if_ne	jmp	#LR__1558
13438     A7 12 02 FB | 	rdlong	arg01, fp
1343c     0C 4E 05 F1 | 	add	fp, #12
13440     A7 14 02 FB | 	rdlong	arg02, fp
13444     0C 4E 85 F1 | 	sub	fp, #12
13448     04 02 B1 FD | 	call	#__system___float_mul
1344c     A7 FA 61 FC | 	wrlong	result1, fp
13450     40 00 90 FD | 	jmp	#LR__1559
13454                 | LR__1558
13454                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
13454     08 4E 05 F1 | 	add	fp, #8
13458     A7 1E 02 FB | 	rdlong	local01, fp
1345c     08 4E 85 F1 | 	sub	fp, #8
13460     1F 1E 0E F2 | 	cmp	local01, #31 wz
13464     14 4E 05 51 |  if_ne	add	fp, #20
13468     A7 22 02 5B |  if_ne	rdlong	local03, fp
1346c     14 4E 85 51 |  if_ne	sub	fp, #20
13470     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
13474     A7 10 68 AC |  if_e	wrlong	#8, fp
13478     08 4E 05 A1 |  if_e	add	fp, #8
1347c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13480     08 4E 85 A1 |  if_e	sub	fp, #8
13484     A7 12 68 5C |  if_ne	wrlong	#9, fp
13488     08 4E 05 51 |  if_ne	add	fp, #8
1348c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
13490     08 4E 85 51 |  if_ne	sub	fp, #8
13494                 | LR__1559
13494     A7 12 02 F6 | 	mov	arg01, fp
13498     E0 86 BF FD | 	call	#_push
1349c     A7 F0 03 F6 | 	mov	ptra, fp
134a0     B2 00 A0 FD | 	call	#popregs_
134a4                 | _do_mul_ret
134a4     2D 00 64 FD | 	ret
134a8                 | 
134a8                 | ' 
134a8                 | ' sub do_div 
134a8                 | _do_div
134a8     01 4A 05 F6 | 	mov	COUNT_, #1
134ac     A8 00 A0 FD | 	call	#pushregs_
134b0     18 F0 07 F1 | 	add	ptra, #24
134b4     2C 86 BF FD | 	call	#_pop
134b8     FD 7E 02 F6 | 	mov	muldivb_, result1
134bc     FE 7C 02 F6 | 	mov	muldiva_, result2
134c0     FF 1E 02 F6 | 	mov	local01, result3
134c4     0C 4E 05 F1 | 	add	fp, #12
134c8     A7 7E 62 FC | 	wrlong	muldivb_, fp
134cc     04 4E 05 F1 | 	add	fp, #4
134d0     A7 7C 62 FC | 	wrlong	muldiva_, fp
134d4     04 4E 05 F1 | 	add	fp, #4
134d8     A7 1E 62 FC | 	wrlong	local01, fp
134dc     14 4E 85 F1 | 	sub	fp, #20
134e0     00 86 BF FD | 	call	#_pop
134e4     A7 FA 61 FC | 	wrlong	result1, fp
134e8     04 4E 05 F1 | 	add	fp, #4
134ec     A7 FC 61 FC | 	wrlong	result2, fp
134f0     04 4E 05 F1 | 	add	fp, #4
134f4     A7 FE 61 FC | 	wrlong	result3, fp
134f8                 | ' 
134f8                 | ' t2=pop()
134f8                 | ' t1=pop()
134f8                 | ' 
134f8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
134f8     08 4E 85 F1 | 	sub	fp, #8
134fc     1F FE 0D F2 | 	cmp	result3, #31 wz
13500     14 4E 05 51 |  if_ne	add	fp, #20
13504     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13508     14 4E 85 51 |  if_ne	sub	fp, #20
1350c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13510     A7 14 68 AC |  if_e	wrlong	#10, fp
13514     08 4E 05 A1 |  if_e	add	fp, #8
13518     A7 FE 69 AC |  if_e	wrlong	#255, fp
1351c     08 4E 85 A1 |  if_e	sub	fp, #8
13520     90 01 90 AD |  if_e	jmp	#LR__1566
13524                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
13524     08 4E 05 F1 | 	add	fp, #8
13528     A7 7E 02 FB | 	rdlong	muldivb_, fp
1352c     08 4E 85 F1 | 	sub	fp, #8
13530     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13534     1C 00 90 5D |  if_ne	jmp	#LR__1560
13538     08 4E 05 F1 | 	add	fp, #8
1353c     A7 38 68 FC | 	wrlong	#28, fp
13540     08 4E 85 F1 | 	sub	fp, #8
13544     A7 12 02 FB | 	rdlong	arg01, fp
13548     00 14 06 F6 | 	mov	arg02, #0
1354c     C8 05 B1 FD | 	call	#__system___float_tointeger
13550     A7 FA 61 FC | 	wrlong	result1, fp
13554                 | LR__1560
13554                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13554     14 4E 05 F1 | 	add	fp, #20
13558     A7 7E 02 FB | 	rdlong	muldivb_, fp
1355c     14 4E 85 F1 | 	sub	fp, #20
13560     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13564     28 00 90 5D |  if_ne	jmp	#LR__1561
13568     14 4E 05 F1 | 	add	fp, #20
1356c     A7 38 68 FC | 	wrlong	#28, fp
13570     08 4E 85 F1 | 	sub	fp, #8
13574     A7 12 02 FB | 	rdlong	arg01, fp
13578     0C 4E 85 F1 | 	sub	fp, #12
1357c     00 14 06 F6 | 	mov	arg02, #0
13580     94 05 B1 FD | 	call	#__system___float_tointeger
13584     0C 4E 05 F1 | 	add	fp, #12
13588     A7 FA 61 FC | 	wrlong	result1, fp
1358c     0C 4E 85 F1 | 	sub	fp, #12
13590                 | LR__1561
13590                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
13590     08 4E 05 F1 | 	add	fp, #8
13594     A7 7E 02 FB | 	rdlong	muldivb_, fp
13598     08 4E 85 F1 | 	sub	fp, #8
1359c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
135a0     14 4E 05 A1 |  if_e	add	fp, #20
135a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
135a8     14 4E 85 A1 |  if_e	sub	fp, #20
135ac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
135b0     20 00 90 5D |  if_ne	jmp	#LR__1562
135b4     0C 4E 05 F1 | 	add	fp, #12
135b8     A7 1E 02 FB | 	rdlong	local01, fp
135bc     0C 4E 85 F1 | 	sub	fp, #12
135c0     A7 7E 02 FB | 	rdlong	muldivb_, fp
135c4     0F 7F 12 FD | 	qdiv	muldivb_, local01
135c8     18 1E 62 FD | 	getqx	local01
135cc     A7 1E 62 FC | 	wrlong	local01, fp
135d0     E0 00 90 FD | 	jmp	#LR__1566
135d4                 | LR__1562
135d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
135d4     08 4E 05 F1 | 	add	fp, #8
135d8     A7 7E 02 FB | 	rdlong	muldivb_, fp
135dc     08 4E 85 F1 | 	sub	fp, #8
135e0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
135e4     14 4E 05 A1 |  if_e	add	fp, #20
135e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
135ec     14 4E 85 A1 |  if_e	sub	fp, #20
135f0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
135f4     2C 00 90 5D |  if_ne	jmp	#LR__1563
135f8     0C 4E 05 F1 | 	add	fp, #12
135fc     A7 1E 02 FB | 	rdlong	local01, fp
13600     0C 4E 85 F1 | 	sub	fp, #12
13604     A7 7E 02 FB | 	rdlong	muldivb_, fp
13608     0F 7F 12 FD | 	qdiv	muldivb_, local01
1360c     18 1E 62 FD | 	getqx	local01
13610     A7 1E 62 FC | 	wrlong	local01, fp
13614     08 4E 05 F1 | 	add	fp, #8
13618     A7 38 68 FC | 	wrlong	#28, fp
1361c     08 4E 85 F1 | 	sub	fp, #8
13620     90 00 90 FD | 	jmp	#LR__1566
13624                 | LR__1563
13624                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
13624     08 4E 05 F1 | 	add	fp, #8
13628     A7 7E 02 FB | 	rdlong	muldivb_, fp
1362c     08 4E 85 F1 | 	sub	fp, #8
13630     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13634     14 4E 05 A1 |  if_e	add	fp, #20
13638     A7 1E 02 AB |  if_e	rdlong	local01, fp
1363c     14 4E 85 A1 |  if_e	sub	fp, #20
13640     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13644     1C 00 90 5D |  if_ne	jmp	#LR__1564
13648     A7 7C 02 FB | 	rdlong	muldiva_, fp
1364c     0C 4E 05 F1 | 	add	fp, #12
13650     A7 7E 02 FB | 	rdlong	muldivb_, fp
13654     0C 4E 85 F1 | 	sub	fp, #12
13658     BA 00 A0 FD | 	call	#divide_
1365c     A7 7E 62 FC | 	wrlong	muldivb_, fp
13660     50 00 90 FD | 	jmp	#LR__1566
13664                 | LR__1564
13664                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
13664     08 4E 05 F1 | 	add	fp, #8
13668     A7 7E 02 FB | 	rdlong	muldivb_, fp
1366c     08 4E 85 F1 | 	sub	fp, #8
13670     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13674     14 4E 05 A1 |  if_e	add	fp, #20
13678     A7 1E 02 AB |  if_e	rdlong	local01, fp
1367c     14 4E 85 A1 |  if_e	sub	fp, #20
13680     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13684     1C 00 90 5D |  if_ne	jmp	#LR__1565
13688     A7 7C 02 FB | 	rdlong	muldiva_, fp
1368c     0C 4E 05 F1 | 	add	fp, #12
13690     A7 7E 02 FB | 	rdlong	muldivb_, fp
13694     0C 4E 85 F1 | 	sub	fp, #12
13698     BA 00 A0 FD | 	call	#divide_
1369c     A7 7E 62 FC | 	wrlong	muldivb_, fp
136a0     10 00 90 FD | 	jmp	#LR__1566
136a4                 | LR__1565
136a4     A7 16 68 FC | 	wrlong	#11, fp
136a8     08 4E 05 F1 | 	add	fp, #8
136ac     A7 FE 69 FC | 	wrlong	#255, fp
136b0     08 4E 85 F1 | 	sub	fp, #8
136b4                 | LR__1566
136b4     A7 12 02 F6 | 	mov	arg01, fp
136b8     C0 84 BF FD | 	call	#_push
136bc     A7 F0 03 F6 | 	mov	ptra, fp
136c0     B2 00 A0 FD | 	call	#popregs_
136c4                 | _do_div_ret
136c4     2D 00 64 FD | 	ret
136c8                 | 
136c8                 | ' 
136c8                 | ' sub do_fdiv 
136c8                 | _do_fdiv
136c8     02 4A 05 F6 | 	mov	COUNT_, #2
136cc     A8 00 A0 FD | 	call	#pushregs_
136d0     18 F0 07 F1 | 	add	ptra, #24
136d4     0C 84 BF FD | 	call	#_pop
136d8     FD 14 02 F6 | 	mov	arg02, result1
136dc     FE 12 02 F6 | 	mov	arg01, result2
136e0     FF 1E 02 F6 | 	mov	local01, result3
136e4     0C 4E 05 F1 | 	add	fp, #12
136e8     A7 14 62 FC | 	wrlong	arg02, fp
136ec     04 4E 05 F1 | 	add	fp, #4
136f0     A7 12 62 FC | 	wrlong	arg01, fp
136f4     04 4E 05 F1 | 	add	fp, #4
136f8     A7 1E 62 FC | 	wrlong	local01, fp
136fc     14 4E 85 F1 | 	sub	fp, #20
13700     E0 83 BF FD | 	call	#_pop
13704     A7 FA 61 FC | 	wrlong	result1, fp
13708     04 4E 05 F1 | 	add	fp, #4
1370c     A7 FC 61 FC | 	wrlong	result2, fp
13710     04 4E 05 F1 | 	add	fp, #4
13714     A7 FE 61 FC | 	wrlong	result3, fp
13718                 | ' 
13718                 | ' t2=pop()
13718                 | ' t1=pop()
13718                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
13718     08 4E 85 F1 | 	sub	fp, #8
1371c     1F FE 0D F2 | 	cmp	result3, #31 wz
13720     14 4E 05 51 |  if_ne	add	fp, #20
13724     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13728     14 4E 85 51 |  if_ne	sub	fp, #20
1372c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13730     A7 14 68 AC |  if_e	wrlong	#10, fp
13734     08 4E 05 A1 |  if_e	add	fp, #8
13738     A7 FE 69 AC |  if_e	wrlong	#255, fp
1373c     08 4E 85 A1 |  if_e	sub	fp, #8
13740     38 01 90 AD |  if_e	jmp	#LR__1575
13744                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13744     08 4E 05 F1 | 	add	fp, #8
13748     A7 14 02 FB | 	rdlong	arg02, fp
1374c     08 4E 85 F1 | 	sub	fp, #8
13750     1C 14 0E F2 | 	cmp	arg02, #28 wz
13754     28 00 90 5D |  if_ne	jmp	#LR__1570
13758     08 4E 05 F1 | 	add	fp, #8
1375c     A7 3C 68 FC | 	wrlong	#30, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 12 02 FB | 	rdlong	arg01, fp
13768     09 13 52 F6 | 	abs	arg01, arg01 wc
1376c     1F 20 C6 C9 |  if_b	decod	local02, #31
13770     00 20 06 36 |  if_ae	mov	local02, #0
13774     D4 FA B0 FD | 	call	#__system___float_fromuns
13778     10 FB 61 F5 | 	xor	result1, local02
1377c     A7 FA 61 FC | 	wrlong	result1, fp
13780                 | LR__1570
13780                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
13780     08 4E 05 F1 | 	add	fp, #8
13784     A7 14 02 FB | 	rdlong	arg02, fp
13788     08 4E 85 F1 | 	sub	fp, #8
1378c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13790     18 00 90 5D |  if_ne	jmp	#LR__1571
13794     08 4E 05 F1 | 	add	fp, #8
13798     A7 3C 68 FC | 	wrlong	#30, fp
1379c     08 4E 85 F1 | 	sub	fp, #8
137a0     A7 12 02 FB | 	rdlong	arg01, fp
137a4     A4 FA B0 FD | 	call	#__system___float_fromuns
137a8     A7 FA 61 FC | 	wrlong	result1, fp
137ac                 | LR__1571
137ac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
137ac     14 4E 05 F1 | 	add	fp, #20
137b0     A7 14 02 FB | 	rdlong	arg02, fp
137b4     14 4E 85 F1 | 	sub	fp, #20
137b8     1C 14 0E F2 | 	cmp	arg02, #28 wz
137bc     34 00 90 5D |  if_ne	jmp	#LR__1572
137c0     14 4E 05 F1 | 	add	fp, #20
137c4     A7 3C 68 FC | 	wrlong	#30, fp
137c8     08 4E 85 F1 | 	sub	fp, #8
137cc     A7 12 02 FB | 	rdlong	arg01, fp
137d0     0C 4E 85 F1 | 	sub	fp, #12
137d4     09 13 52 F6 | 	abs	arg01, arg01 wc
137d8     1F 20 C6 C9 |  if_b	decod	local02, #31
137dc     00 20 06 36 |  if_ae	mov	local02, #0
137e0     68 FA B0 FD | 	call	#__system___float_fromuns
137e4     10 FB 61 F5 | 	xor	result1, local02
137e8     0C 4E 05 F1 | 	add	fp, #12
137ec     A7 FA 61 FC | 	wrlong	result1, fp
137f0     0C 4E 85 F1 | 	sub	fp, #12
137f4                 | LR__1572
137f4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
137f4     14 4E 05 F1 | 	add	fp, #20
137f8     A7 14 02 FB | 	rdlong	arg02, fp
137fc     14 4E 85 F1 | 	sub	fp, #20
13800     1D 14 0E F2 | 	cmp	arg02, #29 wz
13804     24 00 90 5D |  if_ne	jmp	#LR__1573
13808     14 4E 05 F1 | 	add	fp, #20
1380c     A7 3C 68 FC | 	wrlong	#30, fp
13810     08 4E 85 F1 | 	sub	fp, #8
13814     A7 12 02 FB | 	rdlong	arg01, fp
13818     0C 4E 85 F1 | 	sub	fp, #12
1381c     2C FA B0 FD | 	call	#__system___float_fromuns
13820     0C 4E 05 F1 | 	add	fp, #12
13824     A7 FA 61 FC | 	wrlong	result1, fp
13828     0C 4E 85 F1 | 	sub	fp, #12
1382c                 | LR__1573
1382c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1382c     08 4E 05 F1 | 	add	fp, #8
13830     A7 14 02 FB | 	rdlong	arg02, fp
13834     08 4E 85 F1 | 	sub	fp, #8
13838     1E 14 0E F2 | 	cmp	arg02, #30 wz
1383c     14 4E 05 A1 |  if_e	add	fp, #20
13840     A7 1E 02 AB |  if_e	rdlong	local01, fp
13844     14 4E 85 A1 |  if_e	sub	fp, #20
13848     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1384c     1C 00 90 5D |  if_ne	jmp	#LR__1574
13850     A7 12 02 FB | 	rdlong	arg01, fp
13854     0C 4E 05 F1 | 	add	fp, #12
13858     A7 14 02 FB | 	rdlong	arg02, fp
1385c     0C 4E 85 F1 | 	sub	fp, #12
13860     F0 FF B0 FD | 	call	#__system___float_div
13864     A7 FA 61 FC | 	wrlong	result1, fp
13868     10 00 90 FD | 	jmp	#LR__1575
1386c                 | LR__1574
1386c     A7 16 68 FC | 	wrlong	#11, fp
13870     08 4E 05 F1 | 	add	fp, #8
13874     A7 FE 69 FC | 	wrlong	#255, fp
13878     08 4E 85 F1 | 	sub	fp, #8
1387c                 | LR__1575
1387c     A7 12 02 F6 | 	mov	arg01, fp
13880     F8 82 BF FD | 	call	#_push
13884     A7 F0 03 F6 | 	mov	ptra, fp
13888     B2 00 A0 FD | 	call	#popregs_
1388c                 | _do_fdiv_ret
1388c     2D 00 64 FD | 	ret
13890                 | 
13890                 | ' 
13890                 | ' 
13890                 | ' sub do_mod 
13890                 | _do_mod
13890     01 4A 05 F6 | 	mov	COUNT_, #1
13894     A8 00 A0 FD | 	call	#pushregs_
13898     18 F0 07 F1 | 	add	ptra, #24
1389c     44 82 BF FD | 	call	#_pop
138a0     FD 7E 02 F6 | 	mov	muldivb_, result1
138a4     FE 7C 02 F6 | 	mov	muldiva_, result2
138a8     FF 1E 02 F6 | 	mov	local01, result3
138ac     0C 4E 05 F1 | 	add	fp, #12
138b0     A7 7E 62 FC | 	wrlong	muldivb_, fp
138b4     04 4E 05 F1 | 	add	fp, #4
138b8     A7 7C 62 FC | 	wrlong	muldiva_, fp
138bc     04 4E 05 F1 | 	add	fp, #4
138c0     A7 1E 62 FC | 	wrlong	local01, fp
138c4     14 4E 85 F1 | 	sub	fp, #20
138c8     18 82 BF FD | 	call	#_pop
138cc     A7 FA 61 FC | 	wrlong	result1, fp
138d0     04 4E 05 F1 | 	add	fp, #4
138d4     A7 FC 61 FC | 	wrlong	result2, fp
138d8     04 4E 05 F1 | 	add	fp, #4
138dc     A7 FE 61 FC | 	wrlong	result3, fp
138e0                 | ' 
138e0                 | ' t2=pop()
138e0                 | ' t1=pop()
138e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
138e0     08 4E 85 F1 | 	sub	fp, #8
138e4     1F FE 0D F2 | 	cmp	result3, #31 wz
138e8     14 4E 05 51 |  if_ne	add	fp, #20
138ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
138f0     14 4E 85 51 |  if_ne	sub	fp, #20
138f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
138f8     A7 14 68 AC |  if_e	wrlong	#10, fp
138fc     08 4E 05 A1 |  if_e	add	fp, #8
13900     A7 FE 69 AC |  if_e	wrlong	#255, fp
13904     08 4E 85 A1 |  if_e	sub	fp, #8
13908     90 01 90 AD |  if_e	jmp	#LR__1586
1390c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1390c     08 4E 05 F1 | 	add	fp, #8
13910     A7 7E 02 FB | 	rdlong	muldivb_, fp
13914     08 4E 85 F1 | 	sub	fp, #8
13918     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1391c     1C 00 90 5D |  if_ne	jmp	#LR__1580
13920     08 4E 05 F1 | 	add	fp, #8
13924     A7 38 68 FC | 	wrlong	#28, fp
13928     08 4E 85 F1 | 	sub	fp, #8
1392c     A7 12 02 FB | 	rdlong	arg01, fp
13930     00 14 06 F6 | 	mov	arg02, #0
13934     E0 01 B1 FD | 	call	#__system___float_tointeger
13938     A7 FA 61 FC | 	wrlong	result1, fp
1393c                 | LR__1580
1393c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1393c     14 4E 05 F1 | 	add	fp, #20
13940     A7 7E 02 FB | 	rdlong	muldivb_, fp
13944     14 4E 85 F1 | 	sub	fp, #20
13948     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1394c     28 00 90 5D |  if_ne	jmp	#LR__1581
13950     14 4E 05 F1 | 	add	fp, #20
13954     A7 38 68 FC | 	wrlong	#28, fp
13958     08 4E 85 F1 | 	sub	fp, #8
1395c     A7 12 02 FB | 	rdlong	arg01, fp
13960     0C 4E 85 F1 | 	sub	fp, #12
13964     00 14 06 F6 | 	mov	arg02, #0
13968     AC 01 B1 FD | 	call	#__system___float_tointeger
1396c     0C 4E 05 F1 | 	add	fp, #12
13970     A7 FA 61 FC | 	wrlong	result1, fp
13974     0C 4E 85 F1 | 	sub	fp, #12
13978                 | LR__1581
13978                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
13978     08 4E 05 F1 | 	add	fp, #8
1397c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13980     08 4E 85 F1 | 	sub	fp, #8
13984     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13988     14 4E 05 A1 |  if_e	add	fp, #20
1398c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13990     14 4E 85 A1 |  if_e	sub	fp, #20
13994     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13998     20 00 90 5D |  if_ne	jmp	#LR__1582
1399c     0C 4E 05 F1 | 	add	fp, #12
139a0     A7 1E 02 FB | 	rdlong	local01, fp
139a4     0C 4E 85 F1 | 	sub	fp, #12
139a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139ac     0F 7F 12 FD | 	qdiv	muldivb_, local01
139b0     19 1E 62 FD | 	getqy	local01
139b4     A7 1E 62 FC | 	wrlong	local01, fp
139b8     E0 00 90 FD | 	jmp	#LR__1586
139bc                 | LR__1582
139bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
139bc     08 4E 05 F1 | 	add	fp, #8
139c0     A7 7E 02 FB | 	rdlong	muldivb_, fp
139c4     08 4E 85 F1 | 	sub	fp, #8
139c8     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
139cc     14 4E 05 A1 |  if_e	add	fp, #20
139d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
139d4     14 4E 85 A1 |  if_e	sub	fp, #20
139d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
139dc     2C 00 90 5D |  if_ne	jmp	#LR__1583
139e0     0C 4E 05 F1 | 	add	fp, #12
139e4     A7 1E 02 FB | 	rdlong	local01, fp
139e8     0C 4E 85 F1 | 	sub	fp, #12
139ec     A7 7E 02 FB | 	rdlong	muldivb_, fp
139f0     0F 7F 12 FD | 	qdiv	muldivb_, local01
139f4     19 1E 62 FD | 	getqy	local01
139f8     A7 1E 62 FC | 	wrlong	local01, fp
139fc     08 4E 05 F1 | 	add	fp, #8
13a00     A7 38 68 FC | 	wrlong	#28, fp
13a04     08 4E 85 F1 | 	sub	fp, #8
13a08     90 00 90 FD | 	jmp	#LR__1586
13a0c                 | LR__1583
13a0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
13a0c     08 4E 05 F1 | 	add	fp, #8
13a10     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a14     08 4E 85 F1 | 	sub	fp, #8
13a18     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a1c     14 4E 05 A1 |  if_e	add	fp, #20
13a20     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a24     14 4E 85 A1 |  if_e	sub	fp, #20
13a28     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13a2c     1C 00 90 5D |  if_ne	jmp	#LR__1584
13a30     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a34     0C 4E 05 F1 | 	add	fp, #12
13a38     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a3c     0C 4E 85 F1 | 	sub	fp, #12
13a40     BA 00 A0 FD | 	call	#divide_
13a44     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a48     50 00 90 FD | 	jmp	#LR__1586
13a4c                 | LR__1584
13a4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13a4c     08 4E 05 F1 | 	add	fp, #8
13a50     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a54     08 4E 85 F1 | 	sub	fp, #8
13a58     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a5c     14 4E 05 A1 |  if_e	add	fp, #20
13a60     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a64     14 4E 85 A1 |  if_e	sub	fp, #20
13a68     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13a6c     1C 00 90 5D |  if_ne	jmp	#LR__1585
13a70     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a74     0C 4E 05 F1 | 	add	fp, #12
13a78     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a7c     0C 4E 85 F1 | 	sub	fp, #12
13a80     BA 00 A0 FD | 	call	#divide_
13a84     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a88     10 00 90 FD | 	jmp	#LR__1586
13a8c                 | LR__1585
13a8c     A7 16 68 FC | 	wrlong	#11, fp
13a90     08 4E 05 F1 | 	add	fp, #8
13a94     A7 FE 69 FC | 	wrlong	#255, fp
13a98     08 4E 85 F1 | 	sub	fp, #8
13a9c                 | LR__1586
13a9c     A7 12 02 F6 | 	mov	arg01, fp
13aa0     D8 80 BF FD | 	call	#_push
13aa4     A7 F0 03 F6 | 	mov	ptra, fp
13aa8     B2 00 A0 FD | 	call	#popregs_
13aac                 | _do_mod_ret
13aac     2D 00 64 FD | 	ret
13ab0                 | 
13ab0                 | ' 
13ab0                 | ' sub do_shl 
13ab0                 | _do_shl
13ab0     03 4A 05 F6 | 	mov	COUNT_, #3
13ab4     A8 00 A0 FD | 	call	#pushregs_
13ab8     18 F0 07 F1 | 	add	ptra, #24
13abc     24 80 BF FD | 	call	#_pop
13ac0     FD 12 02 F6 | 	mov	arg01, result1
13ac4     FE 1E 02 F6 | 	mov	local01, result2
13ac8     FF 20 02 F6 | 	mov	local02, result3
13acc     0C 4E 05 F1 | 	add	fp, #12
13ad0     A7 12 62 FC | 	wrlong	arg01, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 1E 62 FC | 	wrlong	local01, fp
13adc     04 4E 05 F1 | 	add	fp, #4
13ae0     A7 20 62 FC | 	wrlong	local02, fp
13ae4     14 4E 85 F1 | 	sub	fp, #20
13ae8     F8 7F BF FD | 	call	#_pop
13aec     FF 22 02 F6 | 	mov	local03, result3
13af0     A7 FA 61 FC | 	wrlong	result1, fp
13af4     04 4E 05 F1 | 	add	fp, #4
13af8     A7 FC 61 FC | 	wrlong	result2, fp
13afc     04 4E 05 F1 | 	add	fp, #4
13b00     A7 22 62 FC | 	wrlong	local03, fp
13b04                 | ' 
13b04                 | ' t2=pop()
13b04                 | ' t1=pop()
13b04                 | ' 
13b04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13b04     08 4E 85 F1 | 	sub	fp, #8
13b08     1C 22 0E F2 | 	cmp	local03, #28 wz
13b0c     A7 22 02 AB |  if_e	rdlong	local03, fp
13b10     A7 22 62 AC |  if_e	wrlong	local03, fp
13b14     08 4E 05 A1 |  if_e	add	fp, #8
13b18     A7 3A 68 AC |  if_e	wrlong	#29, fp
13b1c     08 4E 85 A1 |  if_e	sub	fp, #8
13b20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13b20     14 4E 05 F1 | 	add	fp, #20
13b24     A7 22 02 FB | 	rdlong	local03, fp
13b28     14 4E 85 F1 | 	sub	fp, #20
13b2c     1C 22 0E F2 | 	cmp	local03, #28 wz
13b30     18 00 90 5D |  if_ne	jmp	#LR__1590
13b34     0C 4E 05 F1 | 	add	fp, #12
13b38     A7 22 02 FB | 	rdlong	local03, fp
13b3c     A7 22 62 FC | 	wrlong	local03, fp
13b40     08 4E 05 F1 | 	add	fp, #8
13b44     A7 3A 68 FC | 	wrlong	#29, fp
13b48     14 4E 85 F1 | 	sub	fp, #20
13b4c                 | LR__1590
13b4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13b4c     08 4E 05 F1 | 	add	fp, #8
13b50     A7 22 02 FB | 	rdlong	local03, fp
13b54     08 4E 85 F1 | 	sub	fp, #8
13b58     1F 22 0E F2 | 	cmp	local03, #31 wz
13b5c     14 4E 05 51 |  if_ne	add	fp, #20
13b60     A7 20 02 5B |  if_ne	rdlong	local02, fp
13b64     14 4E 85 51 |  if_ne	sub	fp, #20
13b68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13b6c     08 4E 05 51 |  if_ne	add	fp, #8
13b70     A7 22 02 5B |  if_ne	rdlong	local03, fp
13b74     08 4E 85 51 |  if_ne	sub	fp, #8
13b78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13b7c     14 4E 05 51 |  if_ne	add	fp, #20
13b80     14 4E 85 51 |  if_ne	sub	fp, #20
13b84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13b88     A7 0C 68 AC |  if_e	wrlong	#6, fp
13b8c     08 4E 05 A1 |  if_e	add	fp, #8
13b90     A7 FE 69 AC |  if_e	wrlong	#255, fp
13b94     08 4E 85 A1 |  if_e	sub	fp, #8
13b98     18 00 90 AD |  if_e	jmp	#LR__1591
13b9c     A7 22 02 FB | 	rdlong	local03, fp
13ba0     0C 4E 05 F1 | 	add	fp, #12
13ba4     A7 1E 02 FB | 	rdlong	local01, fp
13ba8     0C 4E 85 F1 | 	sub	fp, #12
13bac     0F 23 62 F0 | 	shl	local03, local01
13bb0     A7 22 62 FC | 	wrlong	local03, fp
13bb4                 | LR__1591
13bb4     A7 12 02 F6 | 	mov	arg01, fp
13bb8     C0 7F BF FD | 	call	#_push
13bbc     A7 F0 03 F6 | 	mov	ptra, fp
13bc0     B2 00 A0 FD | 	call	#popregs_
13bc4                 | _do_shl_ret
13bc4     2D 00 64 FD | 	ret
13bc8                 | 
13bc8                 | ' 
13bc8                 | ' sub do_shr 
13bc8                 | _do_shr
13bc8     03 4A 05 F6 | 	mov	COUNT_, #3
13bcc     A8 00 A0 FD | 	call	#pushregs_
13bd0     18 F0 07 F1 | 	add	ptra, #24
13bd4     0C 7F BF FD | 	call	#_pop
13bd8     FD 12 02 F6 | 	mov	arg01, result1
13bdc     FE 1E 02 F6 | 	mov	local01, result2
13be0     FF 20 02 F6 | 	mov	local02, result3
13be4     0C 4E 05 F1 | 	add	fp, #12
13be8     A7 12 62 FC | 	wrlong	arg01, fp
13bec     04 4E 05 F1 | 	add	fp, #4
13bf0     A7 1E 62 FC | 	wrlong	local01, fp
13bf4     04 4E 05 F1 | 	add	fp, #4
13bf8     A7 20 62 FC | 	wrlong	local02, fp
13bfc     14 4E 85 F1 | 	sub	fp, #20
13c00     E0 7E BF FD | 	call	#_pop
13c04     FF 22 02 F6 | 	mov	local03, result3
13c08     A7 FA 61 FC | 	wrlong	result1, fp
13c0c     04 4E 05 F1 | 	add	fp, #4
13c10     A7 FC 61 FC | 	wrlong	result2, fp
13c14     04 4E 05 F1 | 	add	fp, #4
13c18     A7 22 62 FC | 	wrlong	local03, fp
13c1c                 | ' t2=pop()
13c1c                 | ' t1=pop()
13c1c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13c1c     08 4E 85 F1 | 	sub	fp, #8
13c20     1C 22 0E F2 | 	cmp	local03, #28 wz
13c24     A7 22 02 AB |  if_e	rdlong	local03, fp
13c28     A7 22 62 AC |  if_e	wrlong	local03, fp
13c2c     08 4E 05 A1 |  if_e	add	fp, #8
13c30     A7 3A 68 AC |  if_e	wrlong	#29, fp
13c34     08 4E 85 A1 |  if_e	sub	fp, #8
13c38                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13c38     14 4E 05 F1 | 	add	fp, #20
13c3c     A7 22 02 FB | 	rdlong	local03, fp
13c40     14 4E 85 F1 | 	sub	fp, #20
13c44     1C 22 0E F2 | 	cmp	local03, #28 wz
13c48     18 00 90 5D |  if_ne	jmp	#LR__1600
13c4c     0C 4E 05 F1 | 	add	fp, #12
13c50     A7 22 02 FB | 	rdlong	local03, fp
13c54     A7 22 62 FC | 	wrlong	local03, fp
13c58     08 4E 05 F1 | 	add	fp, #8
13c5c     A7 3A 68 FC | 	wrlong	#29, fp
13c60     14 4E 85 F1 | 	sub	fp, #20
13c64                 | LR__1600
13c64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13c64     08 4E 05 F1 | 	add	fp, #8
13c68     A7 22 02 FB | 	rdlong	local03, fp
13c6c     08 4E 85 F1 | 	sub	fp, #8
13c70     1F 22 0E F2 | 	cmp	local03, #31 wz
13c74     14 4E 05 51 |  if_ne	add	fp, #20
13c78     A7 20 02 5B |  if_ne	rdlong	local02, fp
13c7c     14 4E 85 51 |  if_ne	sub	fp, #20
13c80     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13c84     08 4E 05 51 |  if_ne	add	fp, #8
13c88     A7 22 02 5B |  if_ne	rdlong	local03, fp
13c8c     08 4E 85 51 |  if_ne	sub	fp, #8
13c90     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13c94     14 4E 05 51 |  if_ne	add	fp, #20
13c98     14 4E 85 51 |  if_ne	sub	fp, #20
13c9c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13ca0     A7 0C 68 AC |  if_e	wrlong	#6, fp
13ca4     08 4E 05 A1 |  if_e	add	fp, #8
13ca8     A7 FE 69 AC |  if_e	wrlong	#255, fp
13cac     08 4E 85 A1 |  if_e	sub	fp, #8
13cb0     18 00 90 AD |  if_e	jmp	#LR__1601
13cb4     A7 22 02 FB | 	rdlong	local03, fp
13cb8     0C 4E 05 F1 | 	add	fp, #12
13cbc     A7 1E 02 FB | 	rdlong	local01, fp
13cc0     0C 4E 85 F1 | 	sub	fp, #12
13cc4     0F 23 42 F0 | 	shr	local03, local01
13cc8     A7 22 62 FC | 	wrlong	local03, fp
13ccc                 | LR__1601
13ccc     A7 12 02 F6 | 	mov	arg01, fp
13cd0     A8 7E BF FD | 	call	#_push
13cd4     A7 F0 03 F6 | 	mov	ptra, fp
13cd8     B2 00 A0 FD | 	call	#popregs_
13cdc                 | _do_shr_ret
13cdc     2D 00 64 FD | 	ret
13ce0                 | 
13ce0                 | ' 
13ce0                 | ' sub do_power 
13ce0                 | _do_power
13ce0     02 4A 05 F6 | 	mov	COUNT_, #2
13ce4     A8 00 A0 FD | 	call	#pushregs_
13ce8     18 F0 07 F1 | 	add	ptra, #24
13cec     F4 7D BF FD | 	call	#_pop
13cf0     FD 14 02 F6 | 	mov	arg02, result1
13cf4     FE 12 02 F6 | 	mov	arg01, result2
13cf8     FF 1E 02 F6 | 	mov	local01, result3
13cfc     0C 4E 05 F1 | 	add	fp, #12
13d00     A7 14 62 FC | 	wrlong	arg02, fp
13d04     04 4E 05 F1 | 	add	fp, #4
13d08     A7 12 62 FC | 	wrlong	arg01, fp
13d0c     04 4E 05 F1 | 	add	fp, #4
13d10     A7 1E 62 FC | 	wrlong	local01, fp
13d14     14 4E 85 F1 | 	sub	fp, #20
13d18     C8 7D BF FD | 	call	#_pop
13d1c     A7 FA 61 FC | 	wrlong	result1, fp
13d20     04 4E 05 F1 | 	add	fp, #4
13d24     A7 FC 61 FC | 	wrlong	result2, fp
13d28     04 4E 05 F1 | 	add	fp, #4
13d2c     A7 FE 61 FC | 	wrlong	result3, fp
13d30                 | ' t2=pop()
13d30                 | ' t1=pop()
13d30                 | ' 
13d30                 | ' 
13d30                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13d30     08 4E 85 F1 | 	sub	fp, #8
13d34     1F FE 0D F2 | 	cmp	result3, #31 wz
13d38     14 4E 05 51 |  if_ne	add	fp, #20
13d3c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13d40     14 4E 85 51 |  if_ne	sub	fp, #20
13d44     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13d48     A7 18 68 AC |  if_e	wrlong	#12, fp
13d4c     08 4E 05 A1 |  if_e	add	fp, #8
13d50     A7 FE 69 AC |  if_e	wrlong	#255, fp
13d54     08 4E 85 A1 |  if_e	sub	fp, #8
13d58     38 01 90 AD |  if_e	jmp	#LR__1615
13d5c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13d5c     08 4E 05 F1 | 	add	fp, #8
13d60     A7 14 02 FB | 	rdlong	arg02, fp
13d64     08 4E 85 F1 | 	sub	fp, #8
13d68     1C 14 0E F2 | 	cmp	arg02, #28 wz
13d6c     28 00 90 5D |  if_ne	jmp	#LR__1610
13d70     08 4E 05 F1 | 	add	fp, #8
13d74     A7 3C 68 FC | 	wrlong	#30, fp
13d78     08 4E 85 F1 | 	sub	fp, #8
13d7c     A7 12 02 FB | 	rdlong	arg01, fp
13d80     09 13 52 F6 | 	abs	arg01, arg01 wc
13d84     1F 20 C6 C9 |  if_b	decod	local02, #31
13d88     00 20 06 36 |  if_ae	mov	local02, #0
13d8c     BC F4 B0 FD | 	call	#__system___float_fromuns
13d90     10 FB 61 F5 | 	xor	result1, local02
13d94     A7 FA 61 FC | 	wrlong	result1, fp
13d98                 | LR__1610
13d98                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13d98     08 4E 05 F1 | 	add	fp, #8
13d9c     A7 14 02 FB | 	rdlong	arg02, fp
13da0     08 4E 85 F1 | 	sub	fp, #8
13da4     1D 14 0E F2 | 	cmp	arg02, #29 wz
13da8     18 00 90 5D |  if_ne	jmp	#LR__1611
13dac     08 4E 05 F1 | 	add	fp, #8
13db0     A7 3C 68 FC | 	wrlong	#30, fp
13db4     08 4E 85 F1 | 	sub	fp, #8
13db8     A7 12 02 FB | 	rdlong	arg01, fp
13dbc     8C F4 B0 FD | 	call	#__system___float_fromuns
13dc0     A7 FA 61 FC | 	wrlong	result1, fp
13dc4                 | LR__1611
13dc4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13dc4     14 4E 05 F1 | 	add	fp, #20
13dc8     A7 14 02 FB | 	rdlong	arg02, fp
13dcc     14 4E 85 F1 | 	sub	fp, #20
13dd0     1C 14 0E F2 | 	cmp	arg02, #28 wz
13dd4     34 00 90 5D |  if_ne	jmp	#LR__1612
13dd8     14 4E 05 F1 | 	add	fp, #20
13ddc     A7 3C 68 FC | 	wrlong	#30, fp
13de0     08 4E 85 F1 | 	sub	fp, #8
13de4     A7 12 02 FB | 	rdlong	arg01, fp
13de8     0C 4E 85 F1 | 	sub	fp, #12
13dec     09 13 52 F6 | 	abs	arg01, arg01 wc
13df0     1F 20 C6 C9 |  if_b	decod	local02, #31
13df4     00 20 06 36 |  if_ae	mov	local02, #0
13df8     50 F4 B0 FD | 	call	#__system___float_fromuns
13dfc     10 FB 61 F5 | 	xor	result1, local02
13e00     0C 4E 05 F1 | 	add	fp, #12
13e04     A7 FA 61 FC | 	wrlong	result1, fp
13e08     0C 4E 85 F1 | 	sub	fp, #12
13e0c                 | LR__1612
13e0c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13e0c     14 4E 05 F1 | 	add	fp, #20
13e10     A7 14 02 FB | 	rdlong	arg02, fp
13e14     14 4E 85 F1 | 	sub	fp, #20
13e18     1D 14 0E F2 | 	cmp	arg02, #29 wz
13e1c     24 00 90 5D |  if_ne	jmp	#LR__1613
13e20     14 4E 05 F1 | 	add	fp, #20
13e24     A7 3C 68 FC | 	wrlong	#30, fp
13e28     08 4E 85 F1 | 	sub	fp, #8
13e2c     A7 12 02 FB | 	rdlong	arg01, fp
13e30     0C 4E 85 F1 | 	sub	fp, #12
13e34     14 F4 B0 FD | 	call	#__system___float_fromuns
13e38     0C 4E 05 F1 | 	add	fp, #12
13e3c     A7 FA 61 FC | 	wrlong	result1, fp
13e40     0C 4E 85 F1 | 	sub	fp, #12
13e44                 | LR__1613
13e44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13e44     08 4E 05 F1 | 	add	fp, #8
13e48     A7 14 02 FB | 	rdlong	arg02, fp
13e4c     08 4E 85 F1 | 	sub	fp, #8
13e50     1E 14 0E F2 | 	cmp	arg02, #30 wz
13e54     14 4E 05 A1 |  if_e	add	fp, #20
13e58     A7 1E 02 AB |  if_e	rdlong	local01, fp
13e5c     14 4E 85 A1 |  if_e	sub	fp, #20
13e60     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13e64     1C 00 90 5D |  if_ne	jmp	#LR__1614
13e68     A7 12 02 FB | 	rdlong	arg01, fp
13e6c     0C 4E 05 F1 | 	add	fp, #12
13e70     A7 14 02 FB | 	rdlong	arg02, fp
13e74     0C 4E 85 F1 | 	sub	fp, #12
13e78     B8 06 B1 FD | 	call	#__system____builtin_powf
13e7c     A7 FA 61 FC | 	wrlong	result1, fp
13e80     10 00 90 FD | 	jmp	#LR__1615
13e84                 | LR__1614
13e84     A7 1A 68 FC | 	wrlong	#13, fp
13e88     08 4E 05 F1 | 	add	fp, #8
13e8c     A7 FE 69 FC | 	wrlong	#255, fp
13e90     08 4E 85 F1 | 	sub	fp, #8
13e94                 | LR__1615
13e94     A7 12 02 F6 | 	mov	arg01, fp
13e98     E0 7C BF FD | 	call	#_push
13e9c     A7 F0 03 F6 | 	mov	ptra, fp
13ea0     B2 00 A0 FD | 	call	#popregs_
13ea4                 | _do_power_ret
13ea4     2D 00 64 FD | 	ret
13ea8                 | 
13ea8                 | ' 
13ea8                 | ' 
13ea8                 | ' sub do_eq
13ea8                 | _do_eq
13ea8     05 4A 05 F6 | 	mov	COUNT_, #5
13eac     A8 00 A0 FD | 	call	#pushregs_
13eb0     18 F0 07 F1 | 	add	ptra, #24
13eb4     2C 7C BF FD | 	call	#_pop
13eb8     FD 1E 02 F6 | 	mov	local01, result1
13ebc     FE 20 02 F6 | 	mov	local02, result2
13ec0     FF 22 02 F6 | 	mov	local03, result3
13ec4     0C 4E 05 F1 | 	add	fp, #12
13ec8     A7 1E 62 FC | 	wrlong	local01, fp
13ecc     04 4E 05 F1 | 	add	fp, #4
13ed0     A7 20 62 FC | 	wrlong	local02, fp
13ed4     04 4E 05 F1 | 	add	fp, #4
13ed8     A7 22 62 FC | 	wrlong	local03, fp
13edc     14 4E 85 F1 | 	sub	fp, #20
13ee0     00 7C BF FD | 	call	#_pop
13ee4     FF 22 02 F6 | 	mov	local03, result3
13ee8     A7 FA 61 FC | 	wrlong	result1, fp
13eec     04 4E 05 F1 | 	add	fp, #4
13ef0     A7 FC 61 FC | 	wrlong	result2, fp
13ef4     04 4E 05 F1 | 	add	fp, #4
13ef8     A7 22 62 FC | 	wrlong	local03, fp
13efc                 | ' t2=pop()
13efc                 | ' t1=pop()
13efc                 | ' 
13efc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13efc     08 4E 85 F1 | 	sub	fp, #8
13f00     1F 22 0E F2 | 	cmp	local03, #31 wz
13f04     14 4E 05 A1 |  if_e	add	fp, #20
13f08     A7 24 02 AB |  if_e	rdlong	local04, fp
13f0c     14 4E 85 A1 |  if_e	sub	fp, #20
13f10     12 23 02 A6 |  if_e	mov	local03, local04
13f14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13f18     28 00 90 5D |  if_ne	jmp	#LR__1620
13f1c     00 1E 06 F6 | 	mov	local01, #0
13f20     A7 12 02 FB | 	rdlong	arg01, fp
13f24     0C 4E 05 F1 | 	add	fp, #12
13f28     A7 14 02 FB | 	rdlong	arg02, fp
13f2c     0C 4E 85 F1 | 	sub	fp, #12
13f30     90 CB B0 FD | 	call	#__system___string_cmp
13f34     00 FA 0D F2 | 	cmp	result1, #0 wz
13f38     00 1E 26 A6 |  if_e	not	local01, #0
13f3c     A7 1E 62 FC | 	wrlong	local01, fp
13f40     1C 04 90 FD | 	jmp	#LR__1633
13f44                 | LR__1620
13f44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13f44     08 4E 05 F1 | 	add	fp, #8
13f48     A7 1E 02 FB | 	rdlong	local01, fp
13f4c     08 4E 85 F1 | 	sub	fp, #8
13f50     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f54     14 4E 05 A1 |  if_e	add	fp, #20
13f58     A7 24 02 AB |  if_e	rdlong	local04, fp
13f5c     14 4E 85 A1 |  if_e	sub	fp, #20
13f60     12 23 02 A6 |  if_e	mov	local03, local04
13f64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13f68     2C 00 90 5D |  if_ne	jmp	#LR__1621
13f6c     00 1E 06 F6 | 	mov	local01, #0
13f70     A7 12 02 FB | 	rdlong	arg01, fp
13f74     0C 4E 05 F1 | 	add	fp, #12
13f78     A7 14 02 FB | 	rdlong	arg02, fp
13f7c     0C 4E 85 F1 | 	sub	fp, #12
13f80     01 16 06 F6 | 	mov	arg03, #1
13f84     FC FA B0 FD | 	call	#__system___float_cmp
13f88     00 FA 0D F2 | 	cmp	result1, #0 wz
13f8c     00 1E 26 A6 |  if_e	not	local01, #0
13f90     A7 1E 62 FC | 	wrlong	local01, fp
13f94     C8 03 90 FD | 	jmp	#LR__1633
13f98                 | LR__1621
13f98                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13f98     08 4E 05 F1 | 	add	fp, #8
13f9c     A7 1E 02 FB | 	rdlong	local01, fp
13fa0     08 4E 85 F1 | 	sub	fp, #8
13fa4     1E 1E 0E F2 | 	cmp	local01, #30 wz
13fa8     14 4E 05 A1 |  if_e	add	fp, #20
13fac     A7 24 02 AB |  if_e	rdlong	local04, fp
13fb0     14 4E 85 A1 |  if_e	sub	fp, #20
13fb4     12 23 02 A6 |  if_e	mov	local03, local04
13fb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13fbc     48 00 90 5D |  if_ne	jmp	#LR__1622
13fc0     00 1E 06 F6 | 	mov	local01, #0
13fc4     A7 20 02 FB | 	rdlong	local02, fp
13fc8     0C 4E 05 F1 | 	add	fp, #12
13fcc     A7 12 02 FB | 	rdlong	arg01, fp
13fd0     0C 4E 85 F1 | 	sub	fp, #12
13fd4     09 13 52 F6 | 	abs	arg01, arg01 wc
13fd8     1F 26 C6 C9 |  if_b	decod	local05, #31
13fdc     00 26 06 36 |  if_ae	mov	local05, #0
13fe0     68 F2 B0 FD | 	call	#__system___float_fromuns
13fe4     13 FB 61 F5 | 	xor	result1, local05
13fe8     FD 14 02 F6 | 	mov	arg02, result1
13fec     10 13 02 F6 | 	mov	arg01, local02
13ff0     01 16 06 F6 | 	mov	arg03, #1
13ff4     8C FA B0 FD | 	call	#__system___float_cmp
13ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
13ffc     00 1E 26 A6 |  if_e	not	local01, #0
14000     A7 1E 62 FC | 	wrlong	local01, fp
14004     58 03 90 FD | 	jmp	#LR__1633
14008                 | LR__1622
14008                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
14008     08 4E 05 F1 | 	add	fp, #8
1400c     A7 1E 02 FB | 	rdlong	local01, fp
14010     08 4E 85 F1 | 	sub	fp, #8
14014     1E 1E 0E F2 | 	cmp	local01, #30 wz
14018     14 4E 05 A1 |  if_e	add	fp, #20
1401c     A7 24 02 AB |  if_e	rdlong	local04, fp
14020     14 4E 85 A1 |  if_e	sub	fp, #20
14024     12 23 02 A6 |  if_e	mov	local03, local04
14028     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1402c     38 00 90 5D |  if_ne	jmp	#LR__1623
14030     00 1E 06 F6 | 	mov	local01, #0
14034     A7 20 02 FB | 	rdlong	local02, fp
14038     0C 4E 05 F1 | 	add	fp, #12
1403c     A7 12 02 FB | 	rdlong	arg01, fp
14040     0C 4E 85 F1 | 	sub	fp, #12
14044     04 F2 B0 FD | 	call	#__system___float_fromuns
14048     FD 14 02 F6 | 	mov	arg02, result1
1404c     10 13 02 F6 | 	mov	arg01, local02
14050     01 16 06 F6 | 	mov	arg03, #1
14054     2C FA B0 FD | 	call	#__system___float_cmp
14058     00 FA 0D F2 | 	cmp	result1, #0 wz
1405c     00 1E 26 A6 |  if_e	not	local01, #0
14060     A7 1E 62 FC | 	wrlong	local01, fp
14064     F8 02 90 FD | 	jmp	#LR__1633
14068                 | LR__1623
14068                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
14068     08 4E 05 F1 | 	add	fp, #8
1406c     A7 1E 02 FB | 	rdlong	local01, fp
14070     08 4E 85 F1 | 	sub	fp, #8
14074     1C 1E 0E F2 | 	cmp	local01, #28 wz
14078     14 4E 05 A1 |  if_e	add	fp, #20
1407c     A7 24 02 AB |  if_e	rdlong	local04, fp
14080     14 4E 85 A1 |  if_e	sub	fp, #20
14084     12 23 02 A6 |  if_e	mov	local03, local04
14088     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1408c     44 00 90 5D |  if_ne	jmp	#LR__1624
14090     00 1E 06 F6 | 	mov	local01, #0
14094     A7 12 02 FB | 	rdlong	arg01, fp
14098     09 13 52 F6 | 	abs	arg01, arg01 wc
1409c     1F 26 C6 C9 |  if_b	decod	local05, #31
140a0     00 26 06 36 |  if_ae	mov	local05, #0
140a4     A4 F1 B0 FD | 	call	#__system___float_fromuns
140a8     13 FB 61 F5 | 	xor	result1, local05
140ac     FD 12 02 F6 | 	mov	arg01, result1
140b0     0C 4E 05 F1 | 	add	fp, #12
140b4     A7 14 02 FB | 	rdlong	arg02, fp
140b8     0C 4E 85 F1 | 	sub	fp, #12
140bc     01 16 06 F6 | 	mov	arg03, #1
140c0     C0 F9 B0 FD | 	call	#__system___float_cmp
140c4     00 FA 0D F2 | 	cmp	result1, #0 wz
140c8     00 1E 26 A6 |  if_e	not	local01, #0
140cc     A7 1E 62 FC | 	wrlong	local01, fp
140d0     8C 02 90 FD | 	jmp	#LR__1633
140d4                 | LR__1624
140d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
140d4     08 4E 05 F1 | 	add	fp, #8
140d8     A7 1E 02 FB | 	rdlong	local01, fp
140dc     08 4E 85 F1 | 	sub	fp, #8
140e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
140e4     14 4E 05 A1 |  if_e	add	fp, #20
140e8     A7 24 02 AB |  if_e	rdlong	local04, fp
140ec     14 4E 85 A1 |  if_e	sub	fp, #20
140f0     12 23 02 A6 |  if_e	mov	local03, local04
140f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
140f8     24 00 90 5D |  if_ne	jmp	#LR__1625
140fc     00 1E 06 F6 | 	mov	local01, #0
14100     A7 20 02 FB | 	rdlong	local02, fp
14104     0C 4E 05 F1 | 	add	fp, #12
14108     A7 22 02 FB | 	rdlong	local03, fp
1410c     0C 4E 85 F1 | 	sub	fp, #12
14110     11 21 0A F2 | 	cmp	local02, local03 wz
14114     01 1E 66 A6 |  if_e	neg	local01, #1
14118     A7 1E 62 FC | 	wrlong	local01, fp
1411c     40 02 90 FD | 	jmp	#LR__1633
14120                 | LR__1625
14120                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
14120     08 4E 05 F1 | 	add	fp, #8
14124     A7 1E 02 FB | 	rdlong	local01, fp
14128     08 4E 85 F1 | 	sub	fp, #8
1412c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14130     14 4E 05 A1 |  if_e	add	fp, #20
14134     A7 24 02 AB |  if_e	rdlong	local04, fp
14138     14 4E 85 A1 |  if_e	sub	fp, #20
1413c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14140     24 00 90 5D |  if_ne	jmp	#LR__1626
14144     00 1E 06 F6 | 	mov	local01, #0
14148     A7 20 02 FB | 	rdlong	local02, fp
1414c     0C 4E 05 F1 | 	add	fp, #12
14150     A7 22 02 FB | 	rdlong	local03, fp
14154     0C 4E 85 F1 | 	sub	fp, #12
14158     11 21 0A F2 | 	cmp	local02, local03 wz
1415c     01 1E 66 A6 |  if_e	neg	local01, #1
14160     A7 1E 62 FC | 	wrlong	local01, fp
14164     F8 01 90 FD | 	jmp	#LR__1633
14168                 | LR__1626
14168                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
14168     08 4E 05 F1 | 	add	fp, #8
1416c     A7 1E 02 FB | 	rdlong	local01, fp
14170     08 4E 85 F1 | 	sub	fp, #8
14174     1D 1E 0E F2 | 	cmp	local01, #29 wz
14178     14 4E 05 A1 |  if_e	add	fp, #20
1417c     A7 22 02 AB |  if_e	rdlong	local03, fp
14180     14 4E 85 A1 |  if_e	sub	fp, #20
14184     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14188     34 00 90 5D |  if_ne	jmp	#LR__1627
1418c     00 1E 06 F6 | 	mov	local01, #0
14190     A7 12 02 FB | 	rdlong	arg01, fp
14194     B4 F0 B0 FD | 	call	#__system___float_fromuns
14198     FD 12 02 F6 | 	mov	arg01, result1
1419c     0C 4E 05 F1 | 	add	fp, #12
141a0     A7 14 02 FB | 	rdlong	arg02, fp
141a4     0C 4E 85 F1 | 	sub	fp, #12
141a8     01 16 06 F6 | 	mov	arg03, #1
141ac     D4 F8 B0 FD | 	call	#__system___float_cmp
141b0     00 FA 0D F2 | 	cmp	result1, #0 wz
141b4     00 1E 26 A6 |  if_e	not	local01, #0
141b8     A7 1E 62 FC | 	wrlong	local01, fp
141bc     A0 01 90 FD | 	jmp	#LR__1633
141c0                 | LR__1627
141c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
141c0     08 4E 05 F1 | 	add	fp, #8
141c4     A7 1E 02 FB | 	rdlong	local01, fp
141c8     08 4E 85 F1 | 	sub	fp, #8
141cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
141d0     14 4E 05 A1 |  if_e	add	fp, #20
141d4     A7 22 02 AB |  if_e	rdlong	local03, fp
141d8     14 4E 85 A1 |  if_e	sub	fp, #20
141dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
141e0     24 00 90 5D |  if_ne	jmp	#LR__1628
141e4     00 1E 06 F6 | 	mov	local01, #0
141e8     A7 20 02 FB | 	rdlong	local02, fp
141ec     0C 4E 05 F1 | 	add	fp, #12
141f0     A7 22 02 FB | 	rdlong	local03, fp
141f4     0C 4E 85 F1 | 	sub	fp, #12
141f8     11 21 0A F2 | 	cmp	local02, local03 wz
141fc     01 1E 66 A6 |  if_e	neg	local01, #1
14200     A7 1E 62 FC | 	wrlong	local01, fp
14204     58 01 90 FD | 	jmp	#LR__1633
14208                 | LR__1628
14208                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
14208     08 4E 05 F1 | 	add	fp, #8
1420c     A7 1E 02 FB | 	rdlong	local01, fp
14210     08 4E 85 F1 | 	sub	fp, #8
14214     1D 1E 0E F2 | 	cmp	local01, #29 wz
14218     14 4E 05 A1 |  if_e	add	fp, #20
1421c     A7 22 02 AB |  if_e	rdlong	local03, fp
14220     14 4E 85 A1 |  if_e	sub	fp, #20
14224     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14228     24 00 90 5D |  if_ne	jmp	#LR__1629
1422c     00 1E 06 F6 | 	mov	local01, #0
14230     A7 20 02 FB | 	rdlong	local02, fp
14234     0C 4E 05 F1 | 	add	fp, #12
14238     A7 22 02 FB | 	rdlong	local03, fp
1423c     0C 4E 85 F1 | 	sub	fp, #12
14240     11 21 0A F2 | 	cmp	local02, local03 wz
14244     01 1E 66 A6 |  if_e	neg	local01, #1
14248     A7 1E 62 FC | 	wrlong	local01, fp
1424c     10 01 90 FD | 	jmp	#LR__1633
14250                 | LR__1629
14250                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
14250     08 4E 05 F1 | 	add	fp, #8
14254     A7 1E 02 FB | 	rdlong	local01, fp
14258     08 4E 85 F1 | 	sub	fp, #8
1425c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14260     14 4E 05 A1 |  if_e	add	fp, #20
14264     A7 22 02 AB |  if_e	rdlong	local03, fp
14268     14 4E 85 A1 |  if_e	sub	fp, #20
1426c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14270     30 00 90 5D |  if_ne	jmp	#LR__1630
14274     00 1E 06 F6 | 	mov	local01, #0
14278     A7 12 02 FB | 	rdlong	arg01, fp
1427c     04 D1 BF FD | 	call	#_convertstring
14280     FD 12 02 F6 | 	mov	arg01, result1
14284     0C 4E 05 F1 | 	add	fp, #12
14288     A7 14 02 FB | 	rdlong	arg02, fp
1428c     0C 4E 85 F1 | 	sub	fp, #12
14290     30 C8 B0 FD | 	call	#__system___string_cmp
14294     00 FA 0D F2 | 	cmp	result1, #0 wz
14298     00 1E 26 A6 |  if_e	not	local01, #0
1429c     A7 1E 62 FC | 	wrlong	local01, fp
142a0     BC 00 90 FD | 	jmp	#LR__1633
142a4                 | LR__1630
142a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
142a4     08 4E 05 F1 | 	add	fp, #8
142a8     A7 1E 02 FB | 	rdlong	local01, fp
142ac     08 4E 85 F1 | 	sub	fp, #8
142b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
142b4     14 4E 05 A1 |  if_e	add	fp, #20
142b8     A7 22 02 AB |  if_e	rdlong	local03, fp
142bc     14 4E 85 A1 |  if_e	sub	fp, #20
142c0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
142c4     34 00 90 5D |  if_ne	jmp	#LR__1631
142c8     00 1E 06 F6 | 	mov	local01, #0
142cc     A7 20 02 FB | 	rdlong	local02, fp
142d0     0C 4E 05 F1 | 	add	fp, #12
142d4     A7 12 02 FB | 	rdlong	arg01, fp
142d8     0C 4E 85 F1 | 	sub	fp, #12
142dc     A4 D0 BF FD | 	call	#_convertstring
142e0     FD 14 02 F6 | 	mov	arg02, result1
142e4     10 13 02 F6 | 	mov	arg01, local02
142e8     D8 C7 B0 FD | 	call	#__system___string_cmp
142ec     00 FA 0D F2 | 	cmp	result1, #0 wz
142f0     00 1E 26 A6 |  if_e	not	local01, #0
142f4     A7 1E 62 FC | 	wrlong	local01, fp
142f8     64 00 90 FD | 	jmp	#LR__1633
142fc                 | LR__1631
142fc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
142fc     08 4E 05 F1 | 	add	fp, #8
14300     A7 1E 02 FB | 	rdlong	local01, fp
14304     08 4E 85 F1 | 	sub	fp, #8
14308     2B 1E 0E F2 | 	cmp	local01, #43 wz
1430c     14 4E 05 A1 |  if_e	add	fp, #20
14310     A7 22 02 AB |  if_e	rdlong	local03, fp
14314     14 4E 85 A1 |  if_e	sub	fp, #20
14318     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1431c     3C 00 90 5D |  if_ne	jmp	#LR__1632
14320     00 1E 06 F6 | 	mov	local01, #0
14324     A7 12 02 FB | 	rdlong	arg01, fp
14328     58 D0 BF FD | 	call	#_convertstring
1432c     FD 20 02 F6 | 	mov	local02, result1
14330     0C 4E 05 F1 | 	add	fp, #12
14334     A7 12 02 FB | 	rdlong	arg01, fp
14338     0C 4E 85 F1 | 	sub	fp, #12
1433c     44 D0 BF FD | 	call	#_convertstring
14340     FD 14 02 F6 | 	mov	arg02, result1
14344     10 13 02 F6 | 	mov	arg01, local02
14348     78 C7 B0 FD | 	call	#__system___string_cmp
1434c     00 FA 0D F2 | 	cmp	result1, #0 wz
14350     00 1E 26 A6 |  if_e	not	local01, #0
14354     A7 1E 62 FC | 	wrlong	local01, fp
14358     04 00 90 FD | 	jmp	#LR__1633
1435c                 | LR__1632
1435c     A7 00 68 FC | 	wrlong	#0, fp
14360                 | LR__1633
14360     08 4E 05 F1 | 	add	fp, #8
14364     A7 38 68 FC | 	wrlong	#28, fp
14368     08 4E 85 F1 | 	sub	fp, #8
1436c     A7 12 02 F6 | 	mov	arg01, fp
14370     08 78 BF FD | 	call	#_push
14374     A7 F0 03 F6 | 	mov	ptra, fp
14378     B2 00 A0 FD | 	call	#popregs_
1437c                 | _do_eq_ret
1437c     2D 00 64 FD | 	ret
14380                 | 
14380                 | ' 
14380                 | ' sub do_gt
14380                 | _do_gt
14380     05 4A 05 F6 | 	mov	COUNT_, #5
14384     A8 00 A0 FD | 	call	#pushregs_
14388     18 F0 07 F1 | 	add	ptra, #24
1438c     54 77 BF FD | 	call	#_pop
14390     FD 1E 02 F6 | 	mov	local01, result1
14394     FE 20 02 F6 | 	mov	local02, result2
14398     FF 22 02 F6 | 	mov	local03, result3
1439c     0C 4E 05 F1 | 	add	fp, #12
143a0     A7 1E 62 FC | 	wrlong	local01, fp
143a4     04 4E 05 F1 | 	add	fp, #4
143a8     A7 20 62 FC | 	wrlong	local02, fp
143ac     04 4E 05 F1 | 	add	fp, #4
143b0     A7 22 62 FC | 	wrlong	local03, fp
143b4     14 4E 85 F1 | 	sub	fp, #20
143b8     28 77 BF FD | 	call	#_pop
143bc     FF 22 02 F6 | 	mov	local03, result3
143c0     A7 FA 61 FC | 	wrlong	result1, fp
143c4     04 4E 05 F1 | 	add	fp, #4
143c8     A7 FC 61 FC | 	wrlong	result2, fp
143cc     04 4E 05 F1 | 	add	fp, #4
143d0     A7 22 62 FC | 	wrlong	local03, fp
143d4                 | ' t2=pop()
143d4                 | ' t1=pop()
143d4                 | ' 
143d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
143d4     08 4E 85 F1 | 	sub	fp, #8
143d8     1F 22 0E F2 | 	cmp	local03, #31 wz
143dc     14 4E 05 A1 |  if_e	add	fp, #20
143e0     A7 24 02 AB |  if_e	rdlong	local04, fp
143e4     14 4E 85 A1 |  if_e	sub	fp, #20
143e8     12 23 02 A6 |  if_e	mov	local03, local04
143ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
143f0     28 00 90 5D |  if_ne	jmp	#LR__1640
143f4     00 1E 06 F6 | 	mov	local01, #0
143f8     A7 12 02 FB | 	rdlong	arg01, fp
143fc     0C 4E 05 F1 | 	add	fp, #12
14400     A7 14 02 FB | 	rdlong	arg02, fp
14404     0C 4E 85 F1 | 	sub	fp, #12
14408     B8 C6 B0 FD | 	call	#__system___string_cmp
1440c     01 FA 55 F2 | 	cmps	result1, #1 wc
14410     00 1E 26 36 |  if_ae	not	local01, #0
14414     A7 1E 62 FC | 	wrlong	local01, fp
14418     1C 04 90 FD | 	jmp	#LR__1653
1441c                 | LR__1640
1441c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1441c     08 4E 05 F1 | 	add	fp, #8
14420     A7 1E 02 FB | 	rdlong	local01, fp
14424     08 4E 85 F1 | 	sub	fp, #8
14428     1E 1E 0E F2 | 	cmp	local01, #30 wz
1442c     14 4E 05 A1 |  if_e	add	fp, #20
14430     A7 24 02 AB |  if_e	rdlong	local04, fp
14434     14 4E 85 A1 |  if_e	sub	fp, #20
14438     12 23 02 A6 |  if_e	mov	local03, local04
1443c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14440     2C 00 90 5D |  if_ne	jmp	#LR__1641
14444     00 1E 06 F6 | 	mov	local01, #0
14448     A7 12 02 FB | 	rdlong	arg01, fp
1444c     0C 4E 05 F1 | 	add	fp, #12
14450     A7 14 02 FB | 	rdlong	arg02, fp
14454     0C 4E 85 F1 | 	sub	fp, #12
14458     01 16 66 F6 | 	neg	arg03, #1
1445c     24 F6 B0 FD | 	call	#__system___float_cmp
14460     01 FA 55 F2 | 	cmps	result1, #1 wc
14464     00 1E 26 36 |  if_ae	not	local01, #0
14468     A7 1E 62 FC | 	wrlong	local01, fp
1446c     C8 03 90 FD | 	jmp	#LR__1653
14470                 | LR__1641
14470                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
14470     08 4E 05 F1 | 	add	fp, #8
14474     A7 1E 02 FB | 	rdlong	local01, fp
14478     08 4E 85 F1 | 	sub	fp, #8
1447c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14480     14 4E 05 A1 |  if_e	add	fp, #20
14484     A7 24 02 AB |  if_e	rdlong	local04, fp
14488     14 4E 85 A1 |  if_e	sub	fp, #20
1448c     12 23 02 A6 |  if_e	mov	local03, local04
14490     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14494     48 00 90 5D |  if_ne	jmp	#LR__1642
14498     00 1E 06 F6 | 	mov	local01, #0
1449c     A7 20 02 FB | 	rdlong	local02, fp
144a0     0C 4E 05 F1 | 	add	fp, #12
144a4     A7 12 02 FB | 	rdlong	arg01, fp
144a8     0C 4E 85 F1 | 	sub	fp, #12
144ac     09 13 52 F6 | 	abs	arg01, arg01 wc
144b0     1F 26 C6 C9 |  if_b	decod	local05, #31
144b4     00 26 06 36 |  if_ae	mov	local05, #0
144b8     90 ED B0 FD | 	call	#__system___float_fromuns
144bc     13 FB 61 F5 | 	xor	result1, local05
144c0     FD 14 02 F6 | 	mov	arg02, result1
144c4     10 13 02 F6 | 	mov	arg01, local02
144c8     01 16 66 F6 | 	neg	arg03, #1
144cc     B4 F5 B0 FD | 	call	#__system___float_cmp
144d0     01 FA 55 F2 | 	cmps	result1, #1 wc
144d4     00 1E 26 36 |  if_ae	not	local01, #0
144d8     A7 1E 62 FC | 	wrlong	local01, fp
144dc     58 03 90 FD | 	jmp	#LR__1653
144e0                 | LR__1642
144e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
144e0     08 4E 05 F1 | 	add	fp, #8
144e4     A7 1E 02 FB | 	rdlong	local01, fp
144e8     08 4E 85 F1 | 	sub	fp, #8
144ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
144f0     14 4E 05 A1 |  if_e	add	fp, #20
144f4     A7 24 02 AB |  if_e	rdlong	local04, fp
144f8     14 4E 85 A1 |  if_e	sub	fp, #20
144fc     12 23 02 A6 |  if_e	mov	local03, local04
14500     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14504     38 00 90 5D |  if_ne	jmp	#LR__1643
14508     00 1E 06 F6 | 	mov	local01, #0
1450c     A7 20 02 FB | 	rdlong	local02, fp
14510     0C 4E 05 F1 | 	add	fp, #12
14514     A7 12 02 FB | 	rdlong	arg01, fp
14518     0C 4E 85 F1 | 	sub	fp, #12
1451c     2C ED B0 FD | 	call	#__system___float_fromuns
14520     FD 14 02 F6 | 	mov	arg02, result1
14524     10 13 02 F6 | 	mov	arg01, local02
14528     01 16 66 F6 | 	neg	arg03, #1
1452c     54 F5 B0 FD | 	call	#__system___float_cmp
14530     01 FA 55 F2 | 	cmps	result1, #1 wc
14534     00 1E 26 36 |  if_ae	not	local01, #0
14538     A7 1E 62 FC | 	wrlong	local01, fp
1453c     F8 02 90 FD | 	jmp	#LR__1653
14540                 | LR__1643
14540                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
14540     08 4E 05 F1 | 	add	fp, #8
14544     A7 1E 02 FB | 	rdlong	local01, fp
14548     08 4E 85 F1 | 	sub	fp, #8
1454c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14550     14 4E 05 A1 |  if_e	add	fp, #20
14554     A7 24 02 AB |  if_e	rdlong	local04, fp
14558     14 4E 85 A1 |  if_e	sub	fp, #20
1455c     12 23 02 A6 |  if_e	mov	local03, local04
14560     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14564     44 00 90 5D |  if_ne	jmp	#LR__1644
14568     00 1E 06 F6 | 	mov	local01, #0
1456c     A7 12 02 FB | 	rdlong	arg01, fp
14570     09 13 52 F6 | 	abs	arg01, arg01 wc
14574     1F 26 C6 C9 |  if_b	decod	local05, #31
14578     00 26 06 36 |  if_ae	mov	local05, #0
1457c     CC EC B0 FD | 	call	#__system___float_fromuns
14580     13 FB 61 F5 | 	xor	result1, local05
14584     FD 12 02 F6 | 	mov	arg01, result1
14588     0C 4E 05 F1 | 	add	fp, #12
1458c     A7 14 02 FB | 	rdlong	arg02, fp
14590     0C 4E 85 F1 | 	sub	fp, #12
14594     01 16 66 F6 | 	neg	arg03, #1
14598     E8 F4 B0 FD | 	call	#__system___float_cmp
1459c     01 FA 55 F2 | 	cmps	result1, #1 wc
145a0     00 1E 26 36 |  if_ae	not	local01, #0
145a4     A7 1E 62 FC | 	wrlong	local01, fp
145a8     8C 02 90 FD | 	jmp	#LR__1653
145ac                 | LR__1644
145ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
145ac     08 4E 05 F1 | 	add	fp, #8
145b0     A7 1E 02 FB | 	rdlong	local01, fp
145b4     08 4E 85 F1 | 	sub	fp, #8
145b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
145bc     14 4E 05 A1 |  if_e	add	fp, #20
145c0     A7 24 02 AB |  if_e	rdlong	local04, fp
145c4     14 4E 85 A1 |  if_e	sub	fp, #20
145c8     12 23 02 A6 |  if_e	mov	local03, local04
145cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
145d0     24 00 90 5D |  if_ne	jmp	#LR__1645
145d4     00 1E 06 F6 | 	mov	local01, #0
145d8     A7 20 02 FB | 	rdlong	local02, fp
145dc     0C 4E 05 F1 | 	add	fp, #12
145e0     A7 22 02 FB | 	rdlong	local03, fp
145e4     0C 4E 85 F1 | 	sub	fp, #12
145e8     11 21 5A F2 | 	cmps	local02, local03 wcz
145ec     01 1E 66 16 |  if_a	neg	local01, #1
145f0     A7 1E 62 FC | 	wrlong	local01, fp
145f4     40 02 90 FD | 	jmp	#LR__1653
145f8                 | LR__1645
145f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
145f8     08 4E 05 F1 | 	add	fp, #8
145fc     A7 1E 02 FB | 	rdlong	local01, fp
14600     08 4E 85 F1 | 	sub	fp, #8
14604     1C 1E 0E F2 | 	cmp	local01, #28 wz
14608     14 4E 05 A1 |  if_e	add	fp, #20
1460c     A7 24 02 AB |  if_e	rdlong	local04, fp
14610     14 4E 85 A1 |  if_e	sub	fp, #20
14614     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14618     24 00 90 5D |  if_ne	jmp	#LR__1646
1461c     00 1E 06 F6 | 	mov	local01, #0
14620     A7 20 02 FB | 	rdlong	local02, fp
14624     0C 4E 05 F1 | 	add	fp, #12
14628     A7 22 02 FB | 	rdlong	local03, fp
1462c     0C 4E 85 F1 | 	sub	fp, #12
14630     11 21 5A F2 | 	cmps	local02, local03 wcz
14634     01 1E 66 16 |  if_a	neg	local01, #1
14638     A7 1E 62 FC | 	wrlong	local01, fp
1463c     F8 01 90 FD | 	jmp	#LR__1653
14640                 | LR__1646
14640                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
14640     08 4E 05 F1 | 	add	fp, #8
14644     A7 1E 02 FB | 	rdlong	local01, fp
14648     08 4E 85 F1 | 	sub	fp, #8
1464c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14650     14 4E 05 A1 |  if_e	add	fp, #20
14654     A7 22 02 AB |  if_e	rdlong	local03, fp
14658     14 4E 85 A1 |  if_e	sub	fp, #20
1465c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14660     34 00 90 5D |  if_ne	jmp	#LR__1647
14664     00 1E 06 F6 | 	mov	local01, #0
14668     A7 12 02 FB | 	rdlong	arg01, fp
1466c     DC EB B0 FD | 	call	#__system___float_fromuns
14670     FD 12 02 F6 | 	mov	arg01, result1
14674     0C 4E 05 F1 | 	add	fp, #12
14678     A7 14 02 FB | 	rdlong	arg02, fp
1467c     0C 4E 85 F1 | 	sub	fp, #12
14680     01 16 66 F6 | 	neg	arg03, #1
14684     FC F3 B0 FD | 	call	#__system___float_cmp
14688     01 FA 55 F2 | 	cmps	result1, #1 wc
1468c     00 1E 26 36 |  if_ae	not	local01, #0
14690     A7 1E 62 FC | 	wrlong	local01, fp
14694     A0 01 90 FD | 	jmp	#LR__1653
14698                 | LR__1647
14698                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
14698     08 4E 05 F1 | 	add	fp, #8
1469c     A7 1E 02 FB | 	rdlong	local01, fp
146a0     08 4E 85 F1 | 	sub	fp, #8
146a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
146a8     14 4E 05 A1 |  if_e	add	fp, #20
146ac     A7 22 02 AB |  if_e	rdlong	local03, fp
146b0     14 4E 85 A1 |  if_e	sub	fp, #20
146b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
146b8     24 00 90 5D |  if_ne	jmp	#LR__1648
146bc     00 1E 06 F6 | 	mov	local01, #0
146c0     A7 20 02 FB | 	rdlong	local02, fp
146c4     0C 4E 05 F1 | 	add	fp, #12
146c8     A7 22 02 FB | 	rdlong	local03, fp
146cc     0C 4E 85 F1 | 	sub	fp, #12
146d0     11 21 5A F2 | 	cmps	local02, local03 wcz
146d4     01 1E 66 16 |  if_a	neg	local01, #1
146d8     A7 1E 62 FC | 	wrlong	local01, fp
146dc     58 01 90 FD | 	jmp	#LR__1653
146e0                 | LR__1648
146e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
146e0     08 4E 05 F1 | 	add	fp, #8
146e4     A7 1E 02 FB | 	rdlong	local01, fp
146e8     08 4E 85 F1 | 	sub	fp, #8
146ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
146f0     14 4E 05 A1 |  if_e	add	fp, #20
146f4     A7 22 02 AB |  if_e	rdlong	local03, fp
146f8     14 4E 85 A1 |  if_e	sub	fp, #20
146fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14700     24 00 90 5D |  if_ne	jmp	#LR__1649
14704     00 1E 06 F6 | 	mov	local01, #0
14708     A7 20 02 FB | 	rdlong	local02, fp
1470c     0C 4E 05 F1 | 	add	fp, #12
14710     A7 22 02 FB | 	rdlong	local03, fp
14714     0C 4E 85 F1 | 	sub	fp, #12
14718     11 21 1A F2 | 	cmp	local02, local03 wcz
1471c     01 1E 66 16 |  if_a	neg	local01, #1
14720     A7 1E 62 FC | 	wrlong	local01, fp
14724     10 01 90 FD | 	jmp	#LR__1653
14728                 | LR__1649
14728                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
14728     08 4E 05 F1 | 	add	fp, #8
1472c     A7 1E 02 FB | 	rdlong	local01, fp
14730     08 4E 85 F1 | 	sub	fp, #8
14734     2B 1E 0E F2 | 	cmp	local01, #43 wz
14738     14 4E 05 A1 |  if_e	add	fp, #20
1473c     A7 22 02 AB |  if_e	rdlong	local03, fp
14740     14 4E 85 A1 |  if_e	sub	fp, #20
14744     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14748     30 00 90 5D |  if_ne	jmp	#LR__1650
1474c     00 1E 06 F6 | 	mov	local01, #0
14750     A7 12 02 FB | 	rdlong	arg01, fp
14754     2C CC BF FD | 	call	#_convertstring
14758     FD 12 02 F6 | 	mov	arg01, result1
1475c     0C 4E 05 F1 | 	add	fp, #12
14760     A7 14 02 FB | 	rdlong	arg02, fp
14764     0C 4E 85 F1 | 	sub	fp, #12
14768     58 C3 B0 FD | 	call	#__system___string_cmp
1476c     01 FA 55 F2 | 	cmps	result1, #1 wc
14770     00 1E 26 36 |  if_ae	not	local01, #0
14774     A7 1E 62 FC | 	wrlong	local01, fp
14778     BC 00 90 FD | 	jmp	#LR__1653
1477c                 | LR__1650
1477c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1477c     08 4E 05 F1 | 	add	fp, #8
14780     A7 1E 02 FB | 	rdlong	local01, fp
14784     08 4E 85 F1 | 	sub	fp, #8
14788     1F 1E 0E F2 | 	cmp	local01, #31 wz
1478c     14 4E 05 A1 |  if_e	add	fp, #20
14790     A7 22 02 AB |  if_e	rdlong	local03, fp
14794     14 4E 85 A1 |  if_e	sub	fp, #20
14798     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1479c     34 00 90 5D |  if_ne	jmp	#LR__1651
147a0     00 1E 06 F6 | 	mov	local01, #0
147a4     A7 20 02 FB | 	rdlong	local02, fp
147a8     0C 4E 05 F1 | 	add	fp, #12
147ac     A7 12 02 FB | 	rdlong	arg01, fp
147b0     0C 4E 85 F1 | 	sub	fp, #12
147b4     CC CB BF FD | 	call	#_convertstring
147b8     FD 14 02 F6 | 	mov	arg02, result1
147bc     10 13 02 F6 | 	mov	arg01, local02
147c0     00 C3 B0 FD | 	call	#__system___string_cmp
147c4     01 FA 55 F2 | 	cmps	result1, #1 wc
147c8     00 1E 26 36 |  if_ae	not	local01, #0
147cc     A7 1E 62 FC | 	wrlong	local01, fp
147d0     64 00 90 FD | 	jmp	#LR__1653
147d4                 | LR__1651
147d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
147d4     08 4E 05 F1 | 	add	fp, #8
147d8     A7 1E 02 FB | 	rdlong	local01, fp
147dc     08 4E 85 F1 | 	sub	fp, #8
147e0     2B 1E 0E F2 | 	cmp	local01, #43 wz
147e4     14 4E 05 A1 |  if_e	add	fp, #20
147e8     A7 22 02 AB |  if_e	rdlong	local03, fp
147ec     14 4E 85 A1 |  if_e	sub	fp, #20
147f0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
147f4     3C 00 90 5D |  if_ne	jmp	#LR__1652
147f8     00 1E 06 F6 | 	mov	local01, #0
147fc     A7 12 02 FB | 	rdlong	arg01, fp
14800     80 CB BF FD | 	call	#_convertstring
14804     FD 20 02 F6 | 	mov	local02, result1
14808     0C 4E 05 F1 | 	add	fp, #12
1480c     A7 12 02 FB | 	rdlong	arg01, fp
14810     0C 4E 85 F1 | 	sub	fp, #12
14814     6C CB BF FD | 	call	#_convertstring
14818     FD 14 02 F6 | 	mov	arg02, result1
1481c     10 13 02 F6 | 	mov	arg01, local02
14820     A0 C2 B0 FD | 	call	#__system___string_cmp
14824     01 FA 55 F2 | 	cmps	result1, #1 wc
14828     00 1E 26 36 |  if_ae	not	local01, #0
1482c     A7 1E 62 FC | 	wrlong	local01, fp
14830     04 00 90 FD | 	jmp	#LR__1653
14834                 | LR__1652
14834     A7 00 68 FC | 	wrlong	#0, fp
14838                 | LR__1653
14838     08 4E 05 F1 | 	add	fp, #8
1483c     A7 38 68 FC | 	wrlong	#28, fp
14840     08 4E 85 F1 | 	sub	fp, #8
14844     A7 12 02 F6 | 	mov	arg01, fp
14848     30 73 BF FD | 	call	#_push
1484c     A7 F0 03 F6 | 	mov	ptra, fp
14850     B2 00 A0 FD | 	call	#popregs_
14854                 | _do_gt_ret
14854     2D 00 64 FD | 	ret
14858                 | 
14858                 | ' 
14858                 | ' sub do_lt
14858                 | _do_lt
14858     05 4A 05 F6 | 	mov	COUNT_, #5
1485c     A8 00 A0 FD | 	call	#pushregs_
14860     18 F0 07 F1 | 	add	ptra, #24
14864     7C 72 BF FD | 	call	#_pop
14868     FD 1E 02 F6 | 	mov	local01, result1
1486c     FE 20 02 F6 | 	mov	local02, result2
14870     FF 22 02 F6 | 	mov	local03, result3
14874     0C 4E 05 F1 | 	add	fp, #12
14878     A7 1E 62 FC | 	wrlong	local01, fp
1487c     04 4E 05 F1 | 	add	fp, #4
14880     A7 20 62 FC | 	wrlong	local02, fp
14884     04 4E 05 F1 | 	add	fp, #4
14888     A7 22 62 FC | 	wrlong	local03, fp
1488c     14 4E 85 F1 | 	sub	fp, #20
14890     50 72 BF FD | 	call	#_pop
14894     FF 22 02 F6 | 	mov	local03, result3
14898     A7 FA 61 FC | 	wrlong	result1, fp
1489c     04 4E 05 F1 | 	add	fp, #4
148a0     A7 FC 61 FC | 	wrlong	result2, fp
148a4     04 4E 05 F1 | 	add	fp, #4
148a8     A7 22 62 FC | 	wrlong	local03, fp
148ac                 | ' t2=pop()
148ac                 | ' t1=pop()
148ac                 | ' 
148ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
148ac     08 4E 85 F1 | 	sub	fp, #8
148b0     1F 22 0E F2 | 	cmp	local03, #31 wz
148b4     14 4E 05 A1 |  if_e	add	fp, #20
148b8     A7 24 02 AB |  if_e	rdlong	local04, fp
148bc     14 4E 85 A1 |  if_e	sub	fp, #20
148c0     12 23 02 A6 |  if_e	mov	local03, local04
148c4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
148c8     28 00 90 5D |  if_ne	jmp	#LR__1660
148cc     00 1E 06 F6 | 	mov	local01, #0
148d0     A7 12 02 FB | 	rdlong	arg01, fp
148d4     0C 4E 05 F1 | 	add	fp, #12
148d8     A7 14 02 FB | 	rdlong	arg02, fp
148dc     0C 4E 85 F1 | 	sub	fp, #12
148e0     E0 C1 B0 FD | 	call	#__system___string_cmp
148e4     00 FA 55 F2 | 	cmps	result1, #0 wc
148e8     00 1E 26 C6 |  if_b	not	local01, #0
148ec     A7 1E 62 FC | 	wrlong	local01, fp
148f0     0C 04 90 FD | 	jmp	#LR__1673
148f4                 | LR__1660
148f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
148f4     08 4E 05 F1 | 	add	fp, #8
148f8     A7 1E 02 FB | 	rdlong	local01, fp
148fc     08 4E 85 F1 | 	sub	fp, #8
14900     1E 1E 0E F2 | 	cmp	local01, #30 wz
14904     14 4E 05 A1 |  if_e	add	fp, #20
14908     A7 24 02 AB |  if_e	rdlong	local04, fp
1490c     14 4E 85 A1 |  if_e	sub	fp, #20
14910     12 23 02 A6 |  if_e	mov	local03, local04
14914     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14918     2C 00 90 5D |  if_ne	jmp	#LR__1661
1491c     00 1E 06 F6 | 	mov	local01, #0
14920     A7 12 02 FB | 	rdlong	arg01, fp
14924     0C 4E 05 F1 | 	add	fp, #12
14928     A7 14 02 FB | 	rdlong	arg02, fp
1492c     0C 4E 85 F1 | 	sub	fp, #12
14930     01 16 06 F6 | 	mov	arg03, #1
14934     4C F1 B0 FD | 	call	#__system___float_cmp
14938     00 FA 55 F2 | 	cmps	result1, #0 wc
1493c     00 1E 26 C6 |  if_b	not	local01, #0
14940     A7 1E 62 FC | 	wrlong	local01, fp
14944     B8 03 90 FD | 	jmp	#LR__1673
14948                 | LR__1661
14948                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14948     08 4E 05 F1 | 	add	fp, #8
1494c     A7 1E 02 FB | 	rdlong	local01, fp
14950     08 4E 85 F1 | 	sub	fp, #8
14954     1E 1E 0E F2 | 	cmp	local01, #30 wz
14958     14 4E 05 A1 |  if_e	add	fp, #20
1495c     A7 24 02 AB |  if_e	rdlong	local04, fp
14960     14 4E 85 A1 |  if_e	sub	fp, #20
14964     12 23 02 A6 |  if_e	mov	local03, local04
14968     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1496c     48 00 90 5D |  if_ne	jmp	#LR__1662
14970     00 1E 06 F6 | 	mov	local01, #0
14974     A7 20 02 FB | 	rdlong	local02, fp
14978     0C 4E 05 F1 | 	add	fp, #12
1497c     A7 12 02 FB | 	rdlong	arg01, fp
14980     0C 4E 85 F1 | 	sub	fp, #12
14984     09 13 52 F6 | 	abs	arg01, arg01 wc
14988     1F 26 C6 C9 |  if_b	decod	local05, #31
1498c     00 26 06 36 |  if_ae	mov	local05, #0
14990     B8 E8 B0 FD | 	call	#__system___float_fromuns
14994     13 FB 61 F5 | 	xor	result1, local05
14998     FD 14 02 F6 | 	mov	arg02, result1
1499c     10 13 02 F6 | 	mov	arg01, local02
149a0     01 16 06 F6 | 	mov	arg03, #1
149a4     DC F0 B0 FD | 	call	#__system___float_cmp
149a8     00 FA 55 F2 | 	cmps	result1, #0 wc
149ac     00 1E 26 C6 |  if_b	not	local01, #0
149b0     A7 1E 62 FC | 	wrlong	local01, fp
149b4     48 03 90 FD | 	jmp	#LR__1673
149b8                 | LR__1662
149b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
149b8     08 4E 05 F1 | 	add	fp, #8
149bc     A7 1E 02 FB | 	rdlong	local01, fp
149c0     08 4E 85 F1 | 	sub	fp, #8
149c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
149c8     14 4E 05 A1 |  if_e	add	fp, #20
149cc     A7 24 02 AB |  if_e	rdlong	local04, fp
149d0     14 4E 85 A1 |  if_e	sub	fp, #20
149d4     12 23 02 A6 |  if_e	mov	local03, local04
149d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
149dc     38 00 90 5D |  if_ne	jmp	#LR__1663
149e0     00 1E 06 F6 | 	mov	local01, #0
149e4     A7 20 02 FB | 	rdlong	local02, fp
149e8     0C 4E 05 F1 | 	add	fp, #12
149ec     A7 12 02 FB | 	rdlong	arg01, fp
149f0     0C 4E 85 F1 | 	sub	fp, #12
149f4     54 E8 B0 FD | 	call	#__system___float_fromuns
149f8     FD 14 02 F6 | 	mov	arg02, result1
149fc     10 13 02 F6 | 	mov	arg01, local02
14a00     01 16 06 F6 | 	mov	arg03, #1
14a04     7C F0 B0 FD | 	call	#__system___float_cmp
14a08     00 FA 55 F2 | 	cmps	result1, #0 wc
14a0c     00 1E 26 C6 |  if_b	not	local01, #0
14a10     A7 1E 62 FC | 	wrlong	local01, fp
14a14     E8 02 90 FD | 	jmp	#LR__1673
14a18                 | LR__1663
14a18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14a18     08 4E 05 F1 | 	add	fp, #8
14a1c     A7 1E 02 FB | 	rdlong	local01, fp
14a20     08 4E 85 F1 | 	sub	fp, #8
14a24     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a28     14 4E 05 A1 |  if_e	add	fp, #20
14a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
14a30     14 4E 85 A1 |  if_e	sub	fp, #20
14a34     12 23 02 A6 |  if_e	mov	local03, local04
14a38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14a3c     44 00 90 5D |  if_ne	jmp	#LR__1664
14a40     00 1E 06 F6 | 	mov	local01, #0
14a44     A7 12 02 FB | 	rdlong	arg01, fp
14a48     09 13 52 F6 | 	abs	arg01, arg01 wc
14a4c     1F 26 C6 C9 |  if_b	decod	local05, #31
14a50     00 26 06 36 |  if_ae	mov	local05, #0
14a54     F4 E7 B0 FD | 	call	#__system___float_fromuns
14a58     13 FB 61 F5 | 	xor	result1, local05
14a5c     FD 12 02 F6 | 	mov	arg01, result1
14a60     0C 4E 05 F1 | 	add	fp, #12
14a64     A7 14 02 FB | 	rdlong	arg02, fp
14a68     0C 4E 85 F1 | 	sub	fp, #12
14a6c     01 16 06 F6 | 	mov	arg03, #1
14a70     10 F0 B0 FD | 	call	#__system___float_cmp
14a74     00 FA 55 F2 | 	cmps	result1, #0 wc
14a78     00 1E 26 C6 |  if_b	not	local01, #0
14a7c     A7 1E 62 FC | 	wrlong	local01, fp
14a80     7C 02 90 FD | 	jmp	#LR__1673
14a84                 | LR__1664
14a84                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14a84     08 4E 05 F1 | 	add	fp, #8
14a88     A7 1E 02 FB | 	rdlong	local01, fp
14a8c     08 4E 85 F1 | 	sub	fp, #8
14a90     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a94     14 4E 05 A1 |  if_e	add	fp, #20
14a98     A7 24 02 AB |  if_e	rdlong	local04, fp
14a9c     14 4E 85 A1 |  if_e	sub	fp, #20
14aa0     12 23 02 A6 |  if_e	mov	local03, local04
14aa4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14aa8     20 00 90 5D |  if_ne	jmp	#LR__1665
14aac     A7 20 02 FB | 	rdlong	local02, fp
14ab0     0C 4E 05 F1 | 	add	fp, #12
14ab4     A7 22 02 FB | 	rdlong	local03, fp
14ab8     0C 4E 85 F1 | 	sub	fp, #12
14abc     11 21 52 F2 | 	cmps	local02, local03 wc
14ac0     0F 1F A2 F1 | 	subx	local01, local01
14ac4     A7 1E 62 FC | 	wrlong	local01, fp
14ac8     34 02 90 FD | 	jmp	#LR__1673
14acc                 | LR__1665
14acc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14acc     08 4E 05 F1 | 	add	fp, #8
14ad0     A7 1E 02 FB | 	rdlong	local01, fp
14ad4     08 4E 85 F1 | 	sub	fp, #8
14ad8     1C 1E 0E F2 | 	cmp	local01, #28 wz
14adc     14 4E 05 A1 |  if_e	add	fp, #20
14ae0     A7 24 02 AB |  if_e	rdlong	local04, fp
14ae4     14 4E 85 A1 |  if_e	sub	fp, #20
14ae8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14aec     20 00 90 5D |  if_ne	jmp	#LR__1666
14af0     A7 20 02 FB | 	rdlong	local02, fp
14af4     0C 4E 05 F1 | 	add	fp, #12
14af8     A7 22 02 FB | 	rdlong	local03, fp
14afc     0C 4E 85 F1 | 	sub	fp, #12
14b00     11 21 52 F2 | 	cmps	local02, local03 wc
14b04     0F 1F A2 F1 | 	subx	local01, local01
14b08     A7 1E 62 FC | 	wrlong	local01, fp
14b0c     F0 01 90 FD | 	jmp	#LR__1673
14b10                 | LR__1666
14b10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14b10     08 4E 05 F1 | 	add	fp, #8
14b14     A7 1E 02 FB | 	rdlong	local01, fp
14b18     08 4E 85 F1 | 	sub	fp, #8
14b1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b20     14 4E 05 A1 |  if_e	add	fp, #20
14b24     A7 22 02 AB |  if_e	rdlong	local03, fp
14b28     14 4E 85 A1 |  if_e	sub	fp, #20
14b2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14b30     34 00 90 5D |  if_ne	jmp	#LR__1667
14b34     00 1E 06 F6 | 	mov	local01, #0
14b38     A7 12 02 FB | 	rdlong	arg01, fp
14b3c     0C E7 B0 FD | 	call	#__system___float_fromuns
14b40     FD 12 02 F6 | 	mov	arg01, result1
14b44     0C 4E 05 F1 | 	add	fp, #12
14b48     A7 14 02 FB | 	rdlong	arg02, fp
14b4c     0C 4E 85 F1 | 	sub	fp, #12
14b50     01 16 06 F6 | 	mov	arg03, #1
14b54     2C EF B0 FD | 	call	#__system___float_cmp
14b58     00 FA 55 F2 | 	cmps	result1, #0 wc
14b5c     00 1E 26 C6 |  if_b	not	local01, #0
14b60     A7 1E 62 FC | 	wrlong	local01, fp
14b64     98 01 90 FD | 	jmp	#LR__1673
14b68                 | LR__1667
14b68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14b68     08 4E 05 F1 | 	add	fp, #8
14b6c     A7 1E 02 FB | 	rdlong	local01, fp
14b70     08 4E 85 F1 | 	sub	fp, #8
14b74     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b78     14 4E 05 A1 |  if_e	add	fp, #20
14b7c     A7 22 02 AB |  if_e	rdlong	local03, fp
14b80     14 4E 85 A1 |  if_e	sub	fp, #20
14b84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14b88     20 00 90 5D |  if_ne	jmp	#LR__1668
14b8c     A7 20 02 FB | 	rdlong	local02, fp
14b90     0C 4E 05 F1 | 	add	fp, #12
14b94     A7 22 02 FB | 	rdlong	local03, fp
14b98     0C 4E 85 F1 | 	sub	fp, #12
14b9c     11 21 52 F2 | 	cmps	local02, local03 wc
14ba0     0F 1F A2 F1 | 	subx	local01, local01
14ba4     A7 1E 62 FC | 	wrlong	local01, fp
14ba8     54 01 90 FD | 	jmp	#LR__1673
14bac                 | LR__1668
14bac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14bac     08 4E 05 F1 | 	add	fp, #8
14bb0     A7 1E 02 FB | 	rdlong	local01, fp
14bb4     08 4E 85 F1 | 	sub	fp, #8
14bb8     1D 1E 0E F2 | 	cmp	local01, #29 wz
14bbc     14 4E 05 A1 |  if_e	add	fp, #20
14bc0     A7 22 02 AB |  if_e	rdlong	local03, fp
14bc4     14 4E 85 A1 |  if_e	sub	fp, #20
14bc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14bcc     20 00 90 5D |  if_ne	jmp	#LR__1669
14bd0     A7 20 02 FB | 	rdlong	local02, fp
14bd4     0C 4E 05 F1 | 	add	fp, #12
14bd8     A7 22 02 FB | 	rdlong	local03, fp
14bdc     0C 4E 85 F1 | 	sub	fp, #12
14be0     11 21 12 F2 | 	cmp	local02, local03 wc
14be4     0F 1F A2 F1 | 	subx	local01, local01
14be8     A7 1E 62 FC | 	wrlong	local01, fp
14bec     10 01 90 FD | 	jmp	#LR__1673
14bf0                 | LR__1669
14bf0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14bf0     08 4E 05 F1 | 	add	fp, #8
14bf4     A7 1E 02 FB | 	rdlong	local01, fp
14bf8     08 4E 85 F1 | 	sub	fp, #8
14bfc     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c00     14 4E 05 A1 |  if_e	add	fp, #20
14c04     A7 22 02 AB |  if_e	rdlong	local03, fp
14c08     14 4E 85 A1 |  if_e	sub	fp, #20
14c0c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14c10     30 00 90 5D |  if_ne	jmp	#LR__1670
14c14     00 1E 06 F6 | 	mov	local01, #0
14c18     A7 12 02 FB | 	rdlong	arg01, fp
14c1c     64 C7 BF FD | 	call	#_convertstring
14c20     FD 12 02 F6 | 	mov	arg01, result1
14c24     0C 4E 05 F1 | 	add	fp, #12
14c28     A7 14 02 FB | 	rdlong	arg02, fp
14c2c     0C 4E 85 F1 | 	sub	fp, #12
14c30     90 BE B0 FD | 	call	#__system___string_cmp
14c34     00 FA 55 F2 | 	cmps	result1, #0 wc
14c38     00 1E 26 C6 |  if_b	not	local01, #0
14c3c     A7 1E 62 FC | 	wrlong	local01, fp
14c40     BC 00 90 FD | 	jmp	#LR__1673
14c44                 | LR__1670
14c44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14c44     08 4E 05 F1 | 	add	fp, #8
14c48     A7 1E 02 FB | 	rdlong	local01, fp
14c4c     08 4E 85 F1 | 	sub	fp, #8
14c50     1F 1E 0E F2 | 	cmp	local01, #31 wz
14c54     14 4E 05 A1 |  if_e	add	fp, #20
14c58     A7 22 02 AB |  if_e	rdlong	local03, fp
14c5c     14 4E 85 A1 |  if_e	sub	fp, #20
14c60     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14c64     34 00 90 5D |  if_ne	jmp	#LR__1671
14c68     00 1E 06 F6 | 	mov	local01, #0
14c6c     A7 20 02 FB | 	rdlong	local02, fp
14c70     0C 4E 05 F1 | 	add	fp, #12
14c74     A7 12 02 FB | 	rdlong	arg01, fp
14c78     0C 4E 85 F1 | 	sub	fp, #12
14c7c     04 C7 BF FD | 	call	#_convertstring
14c80     FD 14 02 F6 | 	mov	arg02, result1
14c84     10 13 02 F6 | 	mov	arg01, local02
14c88     38 BE B0 FD | 	call	#__system___string_cmp
14c8c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c90     00 1E 26 C6 |  if_b	not	local01, #0
14c94     A7 1E 62 FC | 	wrlong	local01, fp
14c98     64 00 90 FD | 	jmp	#LR__1673
14c9c                 | LR__1671
14c9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14c9c     08 4E 05 F1 | 	add	fp, #8
14ca0     A7 1E 02 FB | 	rdlong	local01, fp
14ca4     08 4E 85 F1 | 	sub	fp, #8
14ca8     2B 1E 0E F2 | 	cmp	local01, #43 wz
14cac     14 4E 05 A1 |  if_e	add	fp, #20
14cb0     A7 22 02 AB |  if_e	rdlong	local03, fp
14cb4     14 4E 85 A1 |  if_e	sub	fp, #20
14cb8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14cbc     3C 00 90 5D |  if_ne	jmp	#LR__1672
14cc0     00 1E 06 F6 | 	mov	local01, #0
14cc4     A7 12 02 FB | 	rdlong	arg01, fp
14cc8     B8 C6 BF FD | 	call	#_convertstring
14ccc     FD 20 02 F6 | 	mov	local02, result1
14cd0     0C 4E 05 F1 | 	add	fp, #12
14cd4     A7 12 02 FB | 	rdlong	arg01, fp
14cd8     0C 4E 85 F1 | 	sub	fp, #12
14cdc     A4 C6 BF FD | 	call	#_convertstring
14ce0     FD 14 02 F6 | 	mov	arg02, result1
14ce4     10 13 02 F6 | 	mov	arg01, local02
14ce8     D8 BD B0 FD | 	call	#__system___string_cmp
14cec     00 FA 55 F2 | 	cmps	result1, #0 wc
14cf0     00 1E 26 C6 |  if_b	not	local01, #0
14cf4     A7 1E 62 FC | 	wrlong	local01, fp
14cf8     04 00 90 FD | 	jmp	#LR__1673
14cfc                 | LR__1672
14cfc     A7 00 68 FC | 	wrlong	#0, fp
14d00                 | LR__1673
14d00     08 4E 05 F1 | 	add	fp, #8
14d04     A7 38 68 FC | 	wrlong	#28, fp
14d08     08 4E 85 F1 | 	sub	fp, #8
14d0c     A7 12 02 F6 | 	mov	arg01, fp
14d10     68 6E BF FD | 	call	#_push
14d14     A7 F0 03 F6 | 	mov	ptra, fp
14d18     B2 00 A0 FD | 	call	#popregs_
14d1c                 | _do_lt_ret
14d1c     2D 00 64 FD | 	ret
14d20                 | 
14d20                 | ' 
14d20                 | ' sub do_ge
14d20                 | _do_ge
14d20     05 4A 05 F6 | 	mov	COUNT_, #5
14d24     A8 00 A0 FD | 	call	#pushregs_
14d28     18 F0 07 F1 | 	add	ptra, #24
14d2c     B4 6D BF FD | 	call	#_pop
14d30     FD 1E 02 F6 | 	mov	local01, result1
14d34     FE 20 02 F6 | 	mov	local02, result2
14d38     FF 22 02 F6 | 	mov	local03, result3
14d3c     0C 4E 05 F1 | 	add	fp, #12
14d40     A7 1E 62 FC | 	wrlong	local01, fp
14d44     04 4E 05 F1 | 	add	fp, #4
14d48     A7 20 62 FC | 	wrlong	local02, fp
14d4c     04 4E 05 F1 | 	add	fp, #4
14d50     A7 22 62 FC | 	wrlong	local03, fp
14d54     14 4E 85 F1 | 	sub	fp, #20
14d58     88 6D BF FD | 	call	#_pop
14d5c     FF 22 02 F6 | 	mov	local03, result3
14d60     A7 FA 61 FC | 	wrlong	result1, fp
14d64     04 4E 05 F1 | 	add	fp, #4
14d68     A7 FC 61 FC | 	wrlong	result2, fp
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 22 62 FC | 	wrlong	local03, fp
14d74                 | ' t2=pop()
14d74                 | ' t1=pop()
14d74                 | ' 
14d74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14d74     08 4E 85 F1 | 	sub	fp, #8
14d78     1F 22 0E F2 | 	cmp	local03, #31 wz
14d7c     14 4E 05 A1 |  if_e	add	fp, #20
14d80     A7 24 02 AB |  if_e	rdlong	local04, fp
14d84     14 4E 85 A1 |  if_e	sub	fp, #20
14d88     12 23 02 A6 |  if_e	mov	local03, local04
14d8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14d90     28 00 90 5D |  if_ne	jmp	#LR__1680
14d94     00 1E 06 F6 | 	mov	local01, #0
14d98     A7 12 02 FB | 	rdlong	arg01, fp
14d9c     0C 4E 05 F1 | 	add	fp, #12
14da0     A7 14 02 FB | 	rdlong	arg02, fp
14da4     0C 4E 85 F1 | 	sub	fp, #12
14da8     18 BD B0 FD | 	call	#__system___string_cmp
14dac     00 FA 55 F2 | 	cmps	result1, #0 wc
14db0     00 1E 26 36 |  if_ae	not	local01, #0
14db4     A7 1E 62 FC | 	wrlong	local01, fp
14db8     1C 04 90 FD | 	jmp	#LR__1693
14dbc                 | LR__1680
14dbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14dbc     08 4E 05 F1 | 	add	fp, #8
14dc0     A7 1E 02 FB | 	rdlong	local01, fp
14dc4     08 4E 85 F1 | 	sub	fp, #8
14dc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
14dcc     14 4E 05 A1 |  if_e	add	fp, #20
14dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
14dd4     14 4E 85 A1 |  if_e	sub	fp, #20
14dd8     12 23 02 A6 |  if_e	mov	local03, local04
14ddc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14de0     2C 00 90 5D |  if_ne	jmp	#LR__1681
14de4     00 1E 06 F6 | 	mov	local01, #0
14de8     A7 12 02 FB | 	rdlong	arg01, fp
14dec     0C 4E 05 F1 | 	add	fp, #12
14df0     A7 14 02 FB | 	rdlong	arg02, fp
14df4     0C 4E 85 F1 | 	sub	fp, #12
14df8     01 16 66 F6 | 	neg	arg03, #1
14dfc     84 EC B0 FD | 	call	#__system___float_cmp
14e00     00 FA 55 F2 | 	cmps	result1, #0 wc
14e04     00 1E 26 36 |  if_ae	not	local01, #0
14e08     A7 1E 62 FC | 	wrlong	local01, fp
14e0c     C8 03 90 FD | 	jmp	#LR__1693
14e10                 | LR__1681
14e10                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14e10     08 4E 05 F1 | 	add	fp, #8
14e14     A7 1E 02 FB | 	rdlong	local01, fp
14e18     08 4E 85 F1 | 	sub	fp, #8
14e1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e20     14 4E 05 A1 |  if_e	add	fp, #20
14e24     A7 24 02 AB |  if_e	rdlong	local04, fp
14e28     14 4E 85 A1 |  if_e	sub	fp, #20
14e2c     12 23 02 A6 |  if_e	mov	local03, local04
14e30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14e34     48 00 90 5D |  if_ne	jmp	#LR__1682
14e38     00 1E 06 F6 | 	mov	local01, #0
14e3c     A7 20 02 FB | 	rdlong	local02, fp
14e40     0C 4E 05 F1 | 	add	fp, #12
14e44     A7 12 02 FB | 	rdlong	arg01, fp
14e48     0C 4E 85 F1 | 	sub	fp, #12
14e4c     09 13 52 F6 | 	abs	arg01, arg01 wc
14e50     1F 26 C6 C9 |  if_b	decod	local05, #31
14e54     00 26 06 36 |  if_ae	mov	local05, #0
14e58     F0 E3 B0 FD | 	call	#__system___float_fromuns
14e5c     13 FB 61 F5 | 	xor	result1, local05
14e60     FD 14 02 F6 | 	mov	arg02, result1
14e64     10 13 02 F6 | 	mov	arg01, local02
14e68     01 16 66 F6 | 	neg	arg03, #1
14e6c     14 EC B0 FD | 	call	#__system___float_cmp
14e70     00 FA 55 F2 | 	cmps	result1, #0 wc
14e74     00 1E 26 36 |  if_ae	not	local01, #0
14e78     A7 1E 62 FC | 	wrlong	local01, fp
14e7c     58 03 90 FD | 	jmp	#LR__1693
14e80                 | LR__1682
14e80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14e80     08 4E 05 F1 | 	add	fp, #8
14e84     A7 1E 02 FB | 	rdlong	local01, fp
14e88     08 4E 85 F1 | 	sub	fp, #8
14e8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e90     14 4E 05 A1 |  if_e	add	fp, #20
14e94     A7 24 02 AB |  if_e	rdlong	local04, fp
14e98     14 4E 85 A1 |  if_e	sub	fp, #20
14e9c     12 23 02 A6 |  if_e	mov	local03, local04
14ea0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14ea4     38 00 90 5D |  if_ne	jmp	#LR__1683
14ea8     00 1E 06 F6 | 	mov	local01, #0
14eac     A7 20 02 FB | 	rdlong	local02, fp
14eb0     0C 4E 05 F1 | 	add	fp, #12
14eb4     A7 12 02 FB | 	rdlong	arg01, fp
14eb8     0C 4E 85 F1 | 	sub	fp, #12
14ebc     8C E3 B0 FD | 	call	#__system___float_fromuns
14ec0     FD 14 02 F6 | 	mov	arg02, result1
14ec4     10 13 02 F6 | 	mov	arg01, local02
14ec8     01 16 66 F6 | 	neg	arg03, #1
14ecc     B4 EB B0 FD | 	call	#__system___float_cmp
14ed0     00 FA 55 F2 | 	cmps	result1, #0 wc
14ed4     00 1E 26 36 |  if_ae	not	local01, #0
14ed8     A7 1E 62 FC | 	wrlong	local01, fp
14edc     F8 02 90 FD | 	jmp	#LR__1693
14ee0                 | LR__1683
14ee0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14ee0     08 4E 05 F1 | 	add	fp, #8
14ee4     A7 1E 02 FB | 	rdlong	local01, fp
14ee8     08 4E 85 F1 | 	sub	fp, #8
14eec     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ef0     14 4E 05 A1 |  if_e	add	fp, #20
14ef4     A7 24 02 AB |  if_e	rdlong	local04, fp
14ef8     14 4E 85 A1 |  if_e	sub	fp, #20
14efc     12 23 02 A6 |  if_e	mov	local03, local04
14f00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14f04     44 00 90 5D |  if_ne	jmp	#LR__1684
14f08     00 1E 06 F6 | 	mov	local01, #0
14f0c     A7 12 02 FB | 	rdlong	arg01, fp
14f10     09 13 52 F6 | 	abs	arg01, arg01 wc
14f14     1F 26 C6 C9 |  if_b	decod	local05, #31
14f18     00 26 06 36 |  if_ae	mov	local05, #0
14f1c     2C E3 B0 FD | 	call	#__system___float_fromuns
14f20     13 FB 61 F5 | 	xor	result1, local05
14f24     FD 12 02 F6 | 	mov	arg01, result1
14f28     0C 4E 05 F1 | 	add	fp, #12
14f2c     A7 14 02 FB | 	rdlong	arg02, fp
14f30     0C 4E 85 F1 | 	sub	fp, #12
14f34     01 16 66 F6 | 	neg	arg03, #1
14f38     48 EB B0 FD | 	call	#__system___float_cmp
14f3c     00 FA 55 F2 | 	cmps	result1, #0 wc
14f40     00 1E 26 36 |  if_ae	not	local01, #0
14f44     A7 1E 62 FC | 	wrlong	local01, fp
14f48     8C 02 90 FD | 	jmp	#LR__1693
14f4c                 | LR__1684
14f4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14f4c     08 4E 05 F1 | 	add	fp, #8
14f50     A7 1E 02 FB | 	rdlong	local01, fp
14f54     08 4E 85 F1 | 	sub	fp, #8
14f58     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f5c     14 4E 05 A1 |  if_e	add	fp, #20
14f60     A7 24 02 AB |  if_e	rdlong	local04, fp
14f64     14 4E 85 A1 |  if_e	sub	fp, #20
14f68     12 23 02 A6 |  if_e	mov	local03, local04
14f6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14f70     24 00 90 5D |  if_ne	jmp	#LR__1685
14f74     00 1E 06 F6 | 	mov	local01, #0
14f78     A7 20 02 FB | 	rdlong	local02, fp
14f7c     0C 4E 05 F1 | 	add	fp, #12
14f80     A7 22 02 FB | 	rdlong	local03, fp
14f84     0C 4E 85 F1 | 	sub	fp, #12
14f88     11 21 52 F2 | 	cmps	local02, local03 wc
14f8c     01 1E 66 36 |  if_ae	neg	local01, #1
14f90     A7 1E 62 FC | 	wrlong	local01, fp
14f94     40 02 90 FD | 	jmp	#LR__1693
14f98                 | LR__1685
14f98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14f98     08 4E 05 F1 | 	add	fp, #8
14f9c     A7 1E 02 FB | 	rdlong	local01, fp
14fa0     08 4E 85 F1 | 	sub	fp, #8
14fa4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14fa8     14 4E 05 A1 |  if_e	add	fp, #20
14fac     A7 24 02 AB |  if_e	rdlong	local04, fp
14fb0     14 4E 85 A1 |  if_e	sub	fp, #20
14fb4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14fb8     24 00 90 5D |  if_ne	jmp	#LR__1686
14fbc     00 1E 06 F6 | 	mov	local01, #0
14fc0     A7 20 02 FB | 	rdlong	local02, fp
14fc4     0C 4E 05 F1 | 	add	fp, #12
14fc8     A7 22 02 FB | 	rdlong	local03, fp
14fcc     0C 4E 85 F1 | 	sub	fp, #12
14fd0     11 21 52 F2 | 	cmps	local02, local03 wc
14fd4     01 1E 66 36 |  if_ae	neg	local01, #1
14fd8     A7 1E 62 FC | 	wrlong	local01, fp
14fdc     F8 01 90 FD | 	jmp	#LR__1693
14fe0                 | LR__1686
14fe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
14fe0     08 4E 05 F1 | 	add	fp, #8
14fe4     A7 1E 02 FB | 	rdlong	local01, fp
14fe8     08 4E 85 F1 | 	sub	fp, #8
14fec     1D 1E 0E F2 | 	cmp	local01, #29 wz
14ff0     14 4E 05 A1 |  if_e	add	fp, #20
14ff4     A7 22 02 AB |  if_e	rdlong	local03, fp
14ff8     14 4E 85 A1 |  if_e	sub	fp, #20
14ffc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15000     34 00 90 5D |  if_ne	jmp	#LR__1687
15004     00 1E 06 F6 | 	mov	local01, #0
15008     A7 12 02 FB | 	rdlong	arg01, fp
1500c     3C E2 B0 FD | 	call	#__system___float_fromuns
15010     FD 12 02 F6 | 	mov	arg01, result1
15014     0C 4E 05 F1 | 	add	fp, #12
15018     A7 14 02 FB | 	rdlong	arg02, fp
1501c     0C 4E 85 F1 | 	sub	fp, #12
15020     01 16 66 F6 | 	neg	arg03, #1
15024     5C EA B0 FD | 	call	#__system___float_cmp
15028     00 FA 55 F2 | 	cmps	result1, #0 wc
1502c     00 1E 26 36 |  if_ae	not	local01, #0
15030     A7 1E 62 FC | 	wrlong	local01, fp
15034     A0 01 90 FD | 	jmp	#LR__1693
15038                 | LR__1687
15038                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
15038     08 4E 05 F1 | 	add	fp, #8
1503c     A7 1E 02 FB | 	rdlong	local01, fp
15040     08 4E 85 F1 | 	sub	fp, #8
15044     1D 1E 0E F2 | 	cmp	local01, #29 wz
15048     14 4E 05 A1 |  if_e	add	fp, #20
1504c     A7 22 02 AB |  if_e	rdlong	local03, fp
15050     14 4E 85 A1 |  if_e	sub	fp, #20
15054     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15058     24 00 90 5D |  if_ne	jmp	#LR__1688
1505c     00 1E 06 F6 | 	mov	local01, #0
15060     A7 20 02 FB | 	rdlong	local02, fp
15064     0C 4E 05 F1 | 	add	fp, #12
15068     A7 22 02 FB | 	rdlong	local03, fp
1506c     0C 4E 85 F1 | 	sub	fp, #12
15070     11 21 52 F2 | 	cmps	local02, local03 wc
15074     01 1E 66 36 |  if_ae	neg	local01, #1
15078     A7 1E 62 FC | 	wrlong	local01, fp
1507c     58 01 90 FD | 	jmp	#LR__1693
15080                 | LR__1688
15080                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
15080     08 4E 05 F1 | 	add	fp, #8
15084     A7 1E 02 FB | 	rdlong	local01, fp
15088     08 4E 85 F1 | 	sub	fp, #8
1508c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15090     14 4E 05 A1 |  if_e	add	fp, #20
15094     A7 22 02 AB |  if_e	rdlong	local03, fp
15098     14 4E 85 A1 |  if_e	sub	fp, #20
1509c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
150a0     24 00 90 5D |  if_ne	jmp	#LR__1689
150a4     00 1E 06 F6 | 	mov	local01, #0
150a8     A7 20 02 FB | 	rdlong	local02, fp
150ac     0C 4E 05 F1 | 	add	fp, #12
150b0     A7 22 02 FB | 	rdlong	local03, fp
150b4     0C 4E 85 F1 | 	sub	fp, #12
150b8     11 21 12 F2 | 	cmp	local02, local03 wc
150bc     01 1E 66 36 |  if_ae	neg	local01, #1
150c0     A7 1E 62 FC | 	wrlong	local01, fp
150c4     10 01 90 FD | 	jmp	#LR__1693
150c8                 | LR__1689
150c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
150c8     08 4E 05 F1 | 	add	fp, #8
150cc     A7 1E 02 FB | 	rdlong	local01, fp
150d0     08 4E 85 F1 | 	sub	fp, #8
150d4     2B 1E 0E F2 | 	cmp	local01, #43 wz
150d8     14 4E 05 A1 |  if_e	add	fp, #20
150dc     A7 22 02 AB |  if_e	rdlong	local03, fp
150e0     14 4E 85 A1 |  if_e	sub	fp, #20
150e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
150e8     30 00 90 5D |  if_ne	jmp	#LR__1690
150ec     00 1E 06 F6 | 	mov	local01, #0
150f0     A7 12 02 FB | 	rdlong	arg01, fp
150f4     8C C2 BF FD | 	call	#_convertstring
150f8     FD 12 02 F6 | 	mov	arg01, result1
150fc     0C 4E 05 F1 | 	add	fp, #12
15100     A7 14 02 FB | 	rdlong	arg02, fp
15104     0C 4E 85 F1 | 	sub	fp, #12
15108     B8 B9 B0 FD | 	call	#__system___string_cmp
1510c     00 FA 55 F2 | 	cmps	result1, #0 wc
15110     00 1E 26 36 |  if_ae	not	local01, #0
15114     A7 1E 62 FC | 	wrlong	local01, fp
15118     BC 00 90 FD | 	jmp	#LR__1693
1511c                 | LR__1690
1511c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1511c     08 4E 05 F1 | 	add	fp, #8
15120     A7 1E 02 FB | 	rdlong	local01, fp
15124     08 4E 85 F1 | 	sub	fp, #8
15128     1F 1E 0E F2 | 	cmp	local01, #31 wz
1512c     14 4E 05 A1 |  if_e	add	fp, #20
15130     A7 22 02 AB |  if_e	rdlong	local03, fp
15134     14 4E 85 A1 |  if_e	sub	fp, #20
15138     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1513c     34 00 90 5D |  if_ne	jmp	#LR__1691
15140     00 1E 06 F6 | 	mov	local01, #0
15144     A7 20 02 FB | 	rdlong	local02, fp
15148     0C 4E 05 F1 | 	add	fp, #12
1514c     A7 12 02 FB | 	rdlong	arg01, fp
15150     0C 4E 85 F1 | 	sub	fp, #12
15154     2C C2 BF FD | 	call	#_convertstring
15158     FD 14 02 F6 | 	mov	arg02, result1
1515c     10 13 02 F6 | 	mov	arg01, local02
15160     60 B9 B0 FD | 	call	#__system___string_cmp
15164     00 FA 55 F2 | 	cmps	result1, #0 wc
15168     00 1E 26 36 |  if_ae	not	local01, #0
1516c     A7 1E 62 FC | 	wrlong	local01, fp
15170     64 00 90 FD | 	jmp	#LR__1693
15174                 | LR__1691
15174                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
15174     08 4E 05 F1 | 	add	fp, #8
15178     A7 1E 02 FB | 	rdlong	local01, fp
1517c     08 4E 85 F1 | 	sub	fp, #8
15180     2B 1E 0E F2 | 	cmp	local01, #43 wz
15184     14 4E 05 A1 |  if_e	add	fp, #20
15188     A7 22 02 AB |  if_e	rdlong	local03, fp
1518c     14 4E 85 A1 |  if_e	sub	fp, #20
15190     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15194     3C 00 90 5D |  if_ne	jmp	#LR__1692
15198     00 1E 06 F6 | 	mov	local01, #0
1519c     A7 12 02 FB | 	rdlong	arg01, fp
151a0     E0 C1 BF FD | 	call	#_convertstring
151a4     FD 20 02 F6 | 	mov	local02, result1
151a8     0C 4E 05 F1 | 	add	fp, #12
151ac     A7 12 02 FB | 	rdlong	arg01, fp
151b0     0C 4E 85 F1 | 	sub	fp, #12
151b4     CC C1 BF FD | 	call	#_convertstring
151b8     FD 14 02 F6 | 	mov	arg02, result1
151bc     10 13 02 F6 | 	mov	arg01, local02
151c0     00 B9 B0 FD | 	call	#__system___string_cmp
151c4     00 FA 55 F2 | 	cmps	result1, #0 wc
151c8     00 1E 26 36 |  if_ae	not	local01, #0
151cc     A7 1E 62 FC | 	wrlong	local01, fp
151d0     04 00 90 FD | 	jmp	#LR__1693
151d4                 | LR__1692
151d4     A7 00 68 FC | 	wrlong	#0, fp
151d8                 | LR__1693
151d8     08 4E 05 F1 | 	add	fp, #8
151dc     A7 38 68 FC | 	wrlong	#28, fp
151e0     08 4E 85 F1 | 	sub	fp, #8
151e4     A7 12 02 F6 | 	mov	arg01, fp
151e8     90 69 BF FD | 	call	#_push
151ec     A7 F0 03 F6 | 	mov	ptra, fp
151f0     B2 00 A0 FD | 	call	#popregs_
151f4                 | _do_ge_ret
151f4     2D 00 64 FD | 	ret
151f8                 | 
151f8                 | ' 
151f8                 | ' sub do_le
151f8                 | _do_le
151f8     05 4A 05 F6 | 	mov	COUNT_, #5
151fc     A8 00 A0 FD | 	call	#pushregs_
15200     18 F0 07 F1 | 	add	ptra, #24
15204     DC 68 BF FD | 	call	#_pop
15208     FD 1E 02 F6 | 	mov	local01, result1
1520c     FE 20 02 F6 | 	mov	local02, result2
15210     FF 22 02 F6 | 	mov	local03, result3
15214     0C 4E 05 F1 | 	add	fp, #12
15218     A7 1E 62 FC | 	wrlong	local01, fp
1521c     04 4E 05 F1 | 	add	fp, #4
15220     A7 20 62 FC | 	wrlong	local02, fp
15224     04 4E 05 F1 | 	add	fp, #4
15228     A7 22 62 FC | 	wrlong	local03, fp
1522c     14 4E 85 F1 | 	sub	fp, #20
15230     B0 68 BF FD | 	call	#_pop
15234     FF 22 02 F6 | 	mov	local03, result3
15238     A7 FA 61 FC | 	wrlong	result1, fp
1523c     04 4E 05 F1 | 	add	fp, #4
15240     A7 FC 61 FC | 	wrlong	result2, fp
15244     04 4E 05 F1 | 	add	fp, #4
15248     A7 22 62 FC | 	wrlong	local03, fp
1524c                 | ' t2=pop()
1524c                 | ' t1=pop()
1524c                 | ' 
1524c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1524c     08 4E 85 F1 | 	sub	fp, #8
15250     1F 22 0E F2 | 	cmp	local03, #31 wz
15254     14 4E 05 A1 |  if_e	add	fp, #20
15258     A7 24 02 AB |  if_e	rdlong	local04, fp
1525c     14 4E 85 A1 |  if_e	sub	fp, #20
15260     12 23 02 A6 |  if_e	mov	local03, local04
15264     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15268     28 00 90 5D |  if_ne	jmp	#LR__1700
1526c     00 1E 06 F6 | 	mov	local01, #0
15270     A7 12 02 FB | 	rdlong	arg01, fp
15274     0C 4E 05 F1 | 	add	fp, #12
15278     A7 14 02 FB | 	rdlong	arg02, fp
1527c     0C 4E 85 F1 | 	sub	fp, #12
15280     40 B8 B0 FD | 	call	#__system___string_cmp
15284     01 FA 55 F2 | 	cmps	result1, #1 wc
15288     00 1E 26 C6 |  if_b	not	local01, #0
1528c     A7 1E 62 FC | 	wrlong	local01, fp
15290     1C 04 90 FD | 	jmp	#LR__1713
15294                 | LR__1700
15294                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
15294     08 4E 05 F1 | 	add	fp, #8
15298     A7 1E 02 FB | 	rdlong	local01, fp
1529c     08 4E 85 F1 | 	sub	fp, #8
152a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
152a4     14 4E 05 A1 |  if_e	add	fp, #20
152a8     A7 24 02 AB |  if_e	rdlong	local04, fp
152ac     14 4E 85 A1 |  if_e	sub	fp, #20
152b0     12 23 02 A6 |  if_e	mov	local03, local04
152b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
152b8     2C 00 90 5D |  if_ne	jmp	#LR__1701
152bc     00 1E 06 F6 | 	mov	local01, #0
152c0     A7 12 02 FB | 	rdlong	arg01, fp
152c4     0C 4E 05 F1 | 	add	fp, #12
152c8     A7 14 02 FB | 	rdlong	arg02, fp
152cc     0C 4E 85 F1 | 	sub	fp, #12
152d0     01 16 06 F6 | 	mov	arg03, #1
152d4     AC E7 B0 FD | 	call	#__system___float_cmp
152d8     01 FA 55 F2 | 	cmps	result1, #1 wc
152dc     00 1E 26 C6 |  if_b	not	local01, #0
152e0     A7 1E 62 FC | 	wrlong	local01, fp
152e4     C8 03 90 FD | 	jmp	#LR__1713
152e8                 | LR__1701
152e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
152e8     08 4E 05 F1 | 	add	fp, #8
152ec     A7 1E 02 FB | 	rdlong	local01, fp
152f0     08 4E 85 F1 | 	sub	fp, #8
152f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
152f8     14 4E 05 A1 |  if_e	add	fp, #20
152fc     A7 24 02 AB |  if_e	rdlong	local04, fp
15300     14 4E 85 A1 |  if_e	sub	fp, #20
15304     12 23 02 A6 |  if_e	mov	local03, local04
15308     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1530c     48 00 90 5D |  if_ne	jmp	#LR__1702
15310     00 1E 06 F6 | 	mov	local01, #0
15314     A7 20 02 FB | 	rdlong	local02, fp
15318     0C 4E 05 F1 | 	add	fp, #12
1531c     A7 12 02 FB | 	rdlong	arg01, fp
15320     0C 4E 85 F1 | 	sub	fp, #12
15324     09 13 52 F6 | 	abs	arg01, arg01 wc
15328     1F 26 C6 C9 |  if_b	decod	local05, #31
1532c     00 26 06 36 |  if_ae	mov	local05, #0
15330     18 DF B0 FD | 	call	#__system___float_fromuns
15334     13 FB 61 F5 | 	xor	result1, local05
15338     FD 14 02 F6 | 	mov	arg02, result1
1533c     10 13 02 F6 | 	mov	arg01, local02
15340     01 16 06 F6 | 	mov	arg03, #1
15344     3C E7 B0 FD | 	call	#__system___float_cmp
15348     01 FA 55 F2 | 	cmps	result1, #1 wc
1534c     00 1E 26 C6 |  if_b	not	local01, #0
15350     A7 1E 62 FC | 	wrlong	local01, fp
15354     58 03 90 FD | 	jmp	#LR__1713
15358                 | LR__1702
15358                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
15358     08 4E 05 F1 | 	add	fp, #8
1535c     A7 1E 02 FB | 	rdlong	local01, fp
15360     08 4E 85 F1 | 	sub	fp, #8
15364     1E 1E 0E F2 | 	cmp	local01, #30 wz
15368     14 4E 05 A1 |  if_e	add	fp, #20
1536c     A7 24 02 AB |  if_e	rdlong	local04, fp
15370     14 4E 85 A1 |  if_e	sub	fp, #20
15374     12 23 02 A6 |  if_e	mov	local03, local04
15378     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1537c     38 00 90 5D |  if_ne	jmp	#LR__1703
15380     00 1E 06 F6 | 	mov	local01, #0
15384     A7 20 02 FB | 	rdlong	local02, fp
15388     0C 4E 05 F1 | 	add	fp, #12
1538c     A7 12 02 FB | 	rdlong	arg01, fp
15390     0C 4E 85 F1 | 	sub	fp, #12
15394     B4 DE B0 FD | 	call	#__system___float_fromuns
15398     FD 14 02 F6 | 	mov	arg02, result1
1539c     10 13 02 F6 | 	mov	arg01, local02
153a0     01 16 06 F6 | 	mov	arg03, #1
153a4     DC E6 B0 FD | 	call	#__system___float_cmp
153a8     01 FA 55 F2 | 	cmps	result1, #1 wc
153ac     00 1E 26 C6 |  if_b	not	local01, #0
153b0     A7 1E 62 FC | 	wrlong	local01, fp
153b4     F8 02 90 FD | 	jmp	#LR__1713
153b8                 | LR__1703
153b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
153b8     08 4E 05 F1 | 	add	fp, #8
153bc     A7 1E 02 FB | 	rdlong	local01, fp
153c0     08 4E 85 F1 | 	sub	fp, #8
153c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
153c8     14 4E 05 A1 |  if_e	add	fp, #20
153cc     A7 24 02 AB |  if_e	rdlong	local04, fp
153d0     14 4E 85 A1 |  if_e	sub	fp, #20
153d4     12 23 02 A6 |  if_e	mov	local03, local04
153d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
153dc     44 00 90 5D |  if_ne	jmp	#LR__1704
153e0     00 1E 06 F6 | 	mov	local01, #0
153e4     A7 12 02 FB | 	rdlong	arg01, fp
153e8     09 13 52 F6 | 	abs	arg01, arg01 wc
153ec     1F 26 C6 C9 |  if_b	decod	local05, #31
153f0     00 26 06 36 |  if_ae	mov	local05, #0
153f4     54 DE B0 FD | 	call	#__system___float_fromuns
153f8     13 FB 61 F5 | 	xor	result1, local05
153fc     FD 12 02 F6 | 	mov	arg01, result1
15400     0C 4E 05 F1 | 	add	fp, #12
15404     A7 14 02 FB | 	rdlong	arg02, fp
15408     0C 4E 85 F1 | 	sub	fp, #12
1540c     01 16 06 F6 | 	mov	arg03, #1
15410     70 E6 B0 FD | 	call	#__system___float_cmp
15414     01 FA 55 F2 | 	cmps	result1, #1 wc
15418     00 1E 26 C6 |  if_b	not	local01, #0
1541c     A7 1E 62 FC | 	wrlong	local01, fp
15420     8C 02 90 FD | 	jmp	#LR__1713
15424                 | LR__1704
15424                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
15424     08 4E 05 F1 | 	add	fp, #8
15428     A7 1E 02 FB | 	rdlong	local01, fp
1542c     08 4E 85 F1 | 	sub	fp, #8
15430     1C 1E 0E F2 | 	cmp	local01, #28 wz
15434     14 4E 05 A1 |  if_e	add	fp, #20
15438     A7 24 02 AB |  if_e	rdlong	local04, fp
1543c     14 4E 85 A1 |  if_e	sub	fp, #20
15440     12 23 02 A6 |  if_e	mov	local03, local04
15444     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15448     24 00 90 5D |  if_ne	jmp	#LR__1705
1544c     00 1E 06 F6 | 	mov	local01, #0
15450     A7 20 02 FB | 	rdlong	local02, fp
15454     0C 4E 05 F1 | 	add	fp, #12
15458     A7 22 02 FB | 	rdlong	local03, fp
1545c     0C 4E 85 F1 | 	sub	fp, #12
15460     11 21 5A F2 | 	cmps	local02, local03 wcz
15464     01 1E 66 E6 |  if_be	neg	local01, #1
15468     A7 1E 62 FC | 	wrlong	local01, fp
1546c     40 02 90 FD | 	jmp	#LR__1713
15470                 | LR__1705
15470                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
15470     08 4E 05 F1 | 	add	fp, #8
15474     A7 1E 02 FB | 	rdlong	local01, fp
15478     08 4E 85 F1 | 	sub	fp, #8
1547c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15480     14 4E 05 A1 |  if_e	add	fp, #20
15484     A7 24 02 AB |  if_e	rdlong	local04, fp
15488     14 4E 85 A1 |  if_e	sub	fp, #20
1548c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15490     24 00 90 5D |  if_ne	jmp	#LR__1706
15494     00 1E 06 F6 | 	mov	local01, #0
15498     A7 20 02 FB | 	rdlong	local02, fp
1549c     0C 4E 05 F1 | 	add	fp, #12
154a0     A7 22 02 FB | 	rdlong	local03, fp
154a4     0C 4E 85 F1 | 	sub	fp, #12
154a8     11 21 5A F2 | 	cmps	local02, local03 wcz
154ac     01 1E 66 E6 |  if_be	neg	local01, #1
154b0     A7 1E 62 FC | 	wrlong	local01, fp
154b4     F8 01 90 FD | 	jmp	#LR__1713
154b8                 | LR__1706
154b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
154b8     08 4E 05 F1 | 	add	fp, #8
154bc     A7 1E 02 FB | 	rdlong	local01, fp
154c0     08 4E 85 F1 | 	sub	fp, #8
154c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
154c8     14 4E 05 A1 |  if_e	add	fp, #20
154cc     A7 22 02 AB |  if_e	rdlong	local03, fp
154d0     14 4E 85 A1 |  if_e	sub	fp, #20
154d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
154d8     34 00 90 5D |  if_ne	jmp	#LR__1707
154dc     00 1E 06 F6 | 	mov	local01, #0
154e0     A7 12 02 FB | 	rdlong	arg01, fp
154e4     64 DD B0 FD | 	call	#__system___float_fromuns
154e8     FD 12 02 F6 | 	mov	arg01, result1
154ec     0C 4E 05 F1 | 	add	fp, #12
154f0     A7 14 02 FB | 	rdlong	arg02, fp
154f4     0C 4E 85 F1 | 	sub	fp, #12
154f8     01 16 06 F6 | 	mov	arg03, #1
154fc     84 E5 B0 FD | 	call	#__system___float_cmp
15500     01 FA 55 F2 | 	cmps	result1, #1 wc
15504     00 1E 26 C6 |  if_b	not	local01, #0
15508     A7 1E 62 FC | 	wrlong	local01, fp
1550c     A0 01 90 FD | 	jmp	#LR__1713
15510                 | LR__1707
15510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
15510     08 4E 05 F1 | 	add	fp, #8
15514     A7 1E 02 FB | 	rdlong	local01, fp
15518     08 4E 85 F1 | 	sub	fp, #8
1551c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15520     14 4E 05 A1 |  if_e	add	fp, #20
15524     A7 22 02 AB |  if_e	rdlong	local03, fp
15528     14 4E 85 A1 |  if_e	sub	fp, #20
1552c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15530     24 00 90 5D |  if_ne	jmp	#LR__1708
15534     00 1E 06 F6 | 	mov	local01, #0
15538     A7 20 02 FB | 	rdlong	local02, fp
1553c     0C 4E 05 F1 | 	add	fp, #12
15540     A7 22 02 FB | 	rdlong	local03, fp
15544     0C 4E 85 F1 | 	sub	fp, #12
15548     11 21 5A F2 | 	cmps	local02, local03 wcz
1554c     01 1E 66 E6 |  if_be	neg	local01, #1
15550     A7 1E 62 FC | 	wrlong	local01, fp
15554     58 01 90 FD | 	jmp	#LR__1713
15558                 | LR__1708
15558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
15558     08 4E 05 F1 | 	add	fp, #8
1555c     A7 1E 02 FB | 	rdlong	local01, fp
15560     08 4E 85 F1 | 	sub	fp, #8
15564     1D 1E 0E F2 | 	cmp	local01, #29 wz
15568     14 4E 05 A1 |  if_e	add	fp, #20
1556c     A7 22 02 AB |  if_e	rdlong	local03, fp
15570     14 4E 85 A1 |  if_e	sub	fp, #20
15574     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15578     24 00 90 5D |  if_ne	jmp	#LR__1709
1557c     00 1E 06 F6 | 	mov	local01, #0
15580     A7 20 02 FB | 	rdlong	local02, fp
15584     0C 4E 05 F1 | 	add	fp, #12
15588     A7 22 02 FB | 	rdlong	local03, fp
1558c     0C 4E 85 F1 | 	sub	fp, #12
15590     11 21 1A F2 | 	cmp	local02, local03 wcz
15594     01 1E 66 E6 |  if_be	neg	local01, #1
15598     A7 1E 62 FC | 	wrlong	local01, fp
1559c     10 01 90 FD | 	jmp	#LR__1713
155a0                 | LR__1709
155a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
155a0     08 4E 05 F1 | 	add	fp, #8
155a4     A7 1E 02 FB | 	rdlong	local01, fp
155a8     08 4E 85 F1 | 	sub	fp, #8
155ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
155b0     14 4E 05 A1 |  if_e	add	fp, #20
155b4     A7 22 02 AB |  if_e	rdlong	local03, fp
155b8     14 4E 85 A1 |  if_e	sub	fp, #20
155bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
155c0     30 00 90 5D |  if_ne	jmp	#LR__1710
155c4     00 1E 06 F6 | 	mov	local01, #0
155c8     A7 12 02 FB | 	rdlong	arg01, fp
155cc     B4 BD BF FD | 	call	#_convertstring
155d0     FD 12 02 F6 | 	mov	arg01, result1
155d4     0C 4E 05 F1 | 	add	fp, #12
155d8     A7 14 02 FB | 	rdlong	arg02, fp
155dc     0C 4E 85 F1 | 	sub	fp, #12
155e0     E0 B4 B0 FD | 	call	#__system___string_cmp
155e4     01 FA 55 F2 | 	cmps	result1, #1 wc
155e8     00 1E 26 C6 |  if_b	not	local01, #0
155ec     A7 1E 62 FC | 	wrlong	local01, fp
155f0     BC 00 90 FD | 	jmp	#LR__1713
155f4                 | LR__1710
155f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
155f4     08 4E 05 F1 | 	add	fp, #8
155f8     A7 1E 02 FB | 	rdlong	local01, fp
155fc     08 4E 85 F1 | 	sub	fp, #8
15600     1F 1E 0E F2 | 	cmp	local01, #31 wz
15604     14 4E 05 A1 |  if_e	add	fp, #20
15608     A7 22 02 AB |  if_e	rdlong	local03, fp
1560c     14 4E 85 A1 |  if_e	sub	fp, #20
15610     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15614     34 00 90 5D |  if_ne	jmp	#LR__1711
15618     00 1E 06 F6 | 	mov	local01, #0
1561c     A7 20 02 FB | 	rdlong	local02, fp
15620     0C 4E 05 F1 | 	add	fp, #12
15624     A7 12 02 FB | 	rdlong	arg01, fp
15628     0C 4E 85 F1 | 	sub	fp, #12
1562c     54 BD BF FD | 	call	#_convertstring
15630     FD 14 02 F6 | 	mov	arg02, result1
15634     10 13 02 F6 | 	mov	arg01, local02
15638     88 B4 B0 FD | 	call	#__system___string_cmp
1563c     01 FA 55 F2 | 	cmps	result1, #1 wc
15640     00 1E 26 C6 |  if_b	not	local01, #0
15644     A7 1E 62 FC | 	wrlong	local01, fp
15648     64 00 90 FD | 	jmp	#LR__1713
1564c                 | LR__1711
1564c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1564c     08 4E 05 F1 | 	add	fp, #8
15650     A7 1E 02 FB | 	rdlong	local01, fp
15654     08 4E 85 F1 | 	sub	fp, #8
15658     2B 1E 0E F2 | 	cmp	local01, #43 wz
1565c     14 4E 05 A1 |  if_e	add	fp, #20
15660     A7 22 02 AB |  if_e	rdlong	local03, fp
15664     14 4E 85 A1 |  if_e	sub	fp, #20
15668     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1566c     3C 00 90 5D |  if_ne	jmp	#LR__1712
15670     00 1E 06 F6 | 	mov	local01, #0
15674     A7 12 02 FB | 	rdlong	arg01, fp
15678     08 BD BF FD | 	call	#_convertstring
1567c     FD 20 02 F6 | 	mov	local02, result1
15680     0C 4E 05 F1 | 	add	fp, #12
15684     A7 12 02 FB | 	rdlong	arg01, fp
15688     0C 4E 85 F1 | 	sub	fp, #12
1568c     F4 BC BF FD | 	call	#_convertstring
15690     FD 14 02 F6 | 	mov	arg02, result1
15694     10 13 02 F6 | 	mov	arg01, local02
15698     28 B4 B0 FD | 	call	#__system___string_cmp
1569c     01 FA 55 F2 | 	cmps	result1, #1 wc
156a0     00 1E 26 C6 |  if_b	not	local01, #0
156a4     A7 1E 62 FC | 	wrlong	local01, fp
156a8     04 00 90 FD | 	jmp	#LR__1713
156ac                 | LR__1712
156ac     A7 00 68 FC | 	wrlong	#0, fp
156b0                 | LR__1713
156b0     08 4E 05 F1 | 	add	fp, #8
156b4     A7 38 68 FC | 	wrlong	#28, fp
156b8     08 4E 85 F1 | 	sub	fp, #8
156bc     A7 12 02 F6 | 	mov	arg01, fp
156c0     B8 64 BF FD | 	call	#_push
156c4     A7 F0 03 F6 | 	mov	ptra, fp
156c8     B2 00 A0 FD | 	call	#popregs_
156cc                 | _do_le_ret
156cc     2D 00 64 FD | 	ret
156d0                 | 
156d0                 | ' 
156d0                 | ' 
156d0                 | ' sub do_ne
156d0                 | _do_ne
156d0     05 4A 05 F6 | 	mov	COUNT_, #5
156d4     A8 00 A0 FD | 	call	#pushregs_
156d8     18 F0 07 F1 | 	add	ptra, #24
156dc     04 64 BF FD | 	call	#_pop
156e0     FD 1E 02 F6 | 	mov	local01, result1
156e4     FE 20 02 F6 | 	mov	local02, result2
156e8     FF 22 02 F6 | 	mov	local03, result3
156ec     0C 4E 05 F1 | 	add	fp, #12
156f0     A7 1E 62 FC | 	wrlong	local01, fp
156f4     04 4E 05 F1 | 	add	fp, #4
156f8     A7 20 62 FC | 	wrlong	local02, fp
156fc     04 4E 05 F1 | 	add	fp, #4
15700     A7 22 62 FC | 	wrlong	local03, fp
15704     14 4E 85 F1 | 	sub	fp, #20
15708     D8 63 BF FD | 	call	#_pop
1570c     FF 22 02 F6 | 	mov	local03, result3
15710     A7 FA 61 FC | 	wrlong	result1, fp
15714     04 4E 05 F1 | 	add	fp, #4
15718     A7 FC 61 FC | 	wrlong	result2, fp
1571c     04 4E 05 F1 | 	add	fp, #4
15720     A7 22 62 FC | 	wrlong	local03, fp
15724                 | ' t2=pop()
15724                 | ' t1=pop()
15724                 | ' 
15724                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
15724     08 4E 85 F1 | 	sub	fp, #8
15728     1F 22 0E F2 | 	cmp	local03, #31 wz
1572c     14 4E 05 A1 |  if_e	add	fp, #20
15730     A7 24 02 AB |  if_e	rdlong	local04, fp
15734     14 4E 85 A1 |  if_e	sub	fp, #20
15738     12 23 02 A6 |  if_e	mov	local03, local04
1573c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15740     28 00 90 5D |  if_ne	jmp	#LR__1720
15744     00 1E 06 F6 | 	mov	local01, #0
15748     A7 12 02 FB | 	rdlong	arg01, fp
1574c     0C 4E 05 F1 | 	add	fp, #12
15750     A7 14 02 FB | 	rdlong	arg02, fp
15754     0C 4E 85 F1 | 	sub	fp, #12
15758     68 B3 B0 FD | 	call	#__system___string_cmp
1575c     00 FA 0D F2 | 	cmp	result1, #0 wz
15760     00 1E 26 56 |  if_ne	not	local01, #0
15764     A7 1E 62 FC | 	wrlong	local01, fp
15768     1C 04 90 FD | 	jmp	#LR__1733
1576c                 | LR__1720
1576c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1576c     08 4E 05 F1 | 	add	fp, #8
15770     A7 1E 02 FB | 	rdlong	local01, fp
15774     08 4E 85 F1 | 	sub	fp, #8
15778     1E 1E 0E F2 | 	cmp	local01, #30 wz
1577c     14 4E 05 A1 |  if_e	add	fp, #20
15780     A7 24 02 AB |  if_e	rdlong	local04, fp
15784     14 4E 85 A1 |  if_e	sub	fp, #20
15788     12 23 02 A6 |  if_e	mov	local03, local04
1578c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15790     2C 00 90 5D |  if_ne	jmp	#LR__1721
15794     00 1E 06 F6 | 	mov	local01, #0
15798     A7 12 02 FB | 	rdlong	arg01, fp
1579c     0C 4E 05 F1 | 	add	fp, #12
157a0     A7 14 02 FB | 	rdlong	arg02, fp
157a4     0C 4E 85 F1 | 	sub	fp, #12
157a8     01 16 06 F6 | 	mov	arg03, #1
157ac     D4 E2 B0 FD | 	call	#__system___float_cmp
157b0     00 FA 0D F2 | 	cmp	result1, #0 wz
157b4     00 1E 26 56 |  if_ne	not	local01, #0
157b8     A7 1E 62 FC | 	wrlong	local01, fp
157bc     C8 03 90 FD | 	jmp	#LR__1733
157c0                 | LR__1721
157c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
157c0     08 4E 05 F1 | 	add	fp, #8
157c4     A7 1E 02 FB | 	rdlong	local01, fp
157c8     08 4E 85 F1 | 	sub	fp, #8
157cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
157d0     14 4E 05 A1 |  if_e	add	fp, #20
157d4     A7 24 02 AB |  if_e	rdlong	local04, fp
157d8     14 4E 85 A1 |  if_e	sub	fp, #20
157dc     12 23 02 A6 |  if_e	mov	local03, local04
157e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
157e4     48 00 90 5D |  if_ne	jmp	#LR__1722
157e8     00 1E 06 F6 | 	mov	local01, #0
157ec     A7 20 02 FB | 	rdlong	local02, fp
157f0     0C 4E 05 F1 | 	add	fp, #12
157f4     A7 12 02 FB | 	rdlong	arg01, fp
157f8     0C 4E 85 F1 | 	sub	fp, #12
157fc     09 13 52 F6 | 	abs	arg01, arg01 wc
15800     1F 26 C6 C9 |  if_b	decod	local05, #31
15804     00 26 06 36 |  if_ae	mov	local05, #0
15808     40 DA B0 FD | 	call	#__system___float_fromuns
1580c     13 FB 61 F5 | 	xor	result1, local05
15810     FD 14 02 F6 | 	mov	arg02, result1
15814     10 13 02 F6 | 	mov	arg01, local02
15818     01 16 06 F6 | 	mov	arg03, #1
1581c     64 E2 B0 FD | 	call	#__system___float_cmp
15820     00 FA 0D F2 | 	cmp	result1, #0 wz
15824     00 1E 26 56 |  if_ne	not	local01, #0
15828     A7 1E 62 FC | 	wrlong	local01, fp
1582c     58 03 90 FD | 	jmp	#LR__1733
15830                 | LR__1722
15830                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
15830     08 4E 05 F1 | 	add	fp, #8
15834     A7 1E 02 FB | 	rdlong	local01, fp
15838     08 4E 85 F1 | 	sub	fp, #8
1583c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15840     14 4E 05 A1 |  if_e	add	fp, #20
15844     A7 24 02 AB |  if_e	rdlong	local04, fp
15848     14 4E 85 A1 |  if_e	sub	fp, #20
1584c     12 23 02 A6 |  if_e	mov	local03, local04
15850     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15854     38 00 90 5D |  if_ne	jmp	#LR__1723
15858     00 1E 06 F6 | 	mov	local01, #0
1585c     A7 20 02 FB | 	rdlong	local02, fp
15860     0C 4E 05 F1 | 	add	fp, #12
15864     A7 12 02 FB | 	rdlong	arg01, fp
15868     0C 4E 85 F1 | 	sub	fp, #12
1586c     DC D9 B0 FD | 	call	#__system___float_fromuns
15870     FD 14 02 F6 | 	mov	arg02, result1
15874     10 13 02 F6 | 	mov	arg01, local02
15878     01 16 06 F6 | 	mov	arg03, #1
1587c     04 E2 B0 FD | 	call	#__system___float_cmp
15880     00 FA 0D F2 | 	cmp	result1, #0 wz
15884     00 1E 26 56 |  if_ne	not	local01, #0
15888     A7 1E 62 FC | 	wrlong	local01, fp
1588c     F8 02 90 FD | 	jmp	#LR__1733
15890                 | LR__1723
15890                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
15890     08 4E 05 F1 | 	add	fp, #8
15894     A7 1E 02 FB | 	rdlong	local01, fp
15898     08 4E 85 F1 | 	sub	fp, #8
1589c     1C 1E 0E F2 | 	cmp	local01, #28 wz
158a0     14 4E 05 A1 |  if_e	add	fp, #20
158a4     A7 24 02 AB |  if_e	rdlong	local04, fp
158a8     14 4E 85 A1 |  if_e	sub	fp, #20
158ac     12 23 02 A6 |  if_e	mov	local03, local04
158b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
158b4     44 00 90 5D |  if_ne	jmp	#LR__1724
158b8     00 1E 06 F6 | 	mov	local01, #0
158bc     A7 12 02 FB | 	rdlong	arg01, fp
158c0     09 13 52 F6 | 	abs	arg01, arg01 wc
158c4     1F 26 C6 C9 |  if_b	decod	local05, #31
158c8     00 26 06 36 |  if_ae	mov	local05, #0
158cc     7C D9 B0 FD | 	call	#__system___float_fromuns
158d0     13 FB 61 F5 | 	xor	result1, local05
158d4     FD 12 02 F6 | 	mov	arg01, result1
158d8     0C 4E 05 F1 | 	add	fp, #12
158dc     A7 14 02 FB | 	rdlong	arg02, fp
158e0     0C 4E 85 F1 | 	sub	fp, #12
158e4     01 16 06 F6 | 	mov	arg03, #1
158e8     98 E1 B0 FD | 	call	#__system___float_cmp
158ec     00 FA 0D F2 | 	cmp	result1, #0 wz
158f0     00 1E 26 56 |  if_ne	not	local01, #0
158f4     A7 1E 62 FC | 	wrlong	local01, fp
158f8     8C 02 90 FD | 	jmp	#LR__1733
158fc                 | LR__1724
158fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
158fc     08 4E 05 F1 | 	add	fp, #8
15900     A7 1E 02 FB | 	rdlong	local01, fp
15904     08 4E 85 F1 | 	sub	fp, #8
15908     1C 1E 0E F2 | 	cmp	local01, #28 wz
1590c     14 4E 05 A1 |  if_e	add	fp, #20
15910     A7 24 02 AB |  if_e	rdlong	local04, fp
15914     14 4E 85 A1 |  if_e	sub	fp, #20
15918     12 23 02 A6 |  if_e	mov	local03, local04
1591c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15920     24 00 90 5D |  if_ne	jmp	#LR__1725
15924     00 1E 06 F6 | 	mov	local01, #0
15928     A7 20 02 FB | 	rdlong	local02, fp
1592c     0C 4E 05 F1 | 	add	fp, #12
15930     A7 22 02 FB | 	rdlong	local03, fp
15934     0C 4E 85 F1 | 	sub	fp, #12
15938     11 21 0A F2 | 	cmp	local02, local03 wz
1593c     01 1E 66 56 |  if_ne	neg	local01, #1
15940     A7 1E 62 FC | 	wrlong	local01, fp
15944     40 02 90 FD | 	jmp	#LR__1733
15948                 | LR__1725
15948                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15948     08 4E 05 F1 | 	add	fp, #8
1594c     A7 1E 02 FB | 	rdlong	local01, fp
15950     08 4E 85 F1 | 	sub	fp, #8
15954     1C 1E 0E F2 | 	cmp	local01, #28 wz
15958     14 4E 05 A1 |  if_e	add	fp, #20
1595c     A7 24 02 AB |  if_e	rdlong	local04, fp
15960     14 4E 85 A1 |  if_e	sub	fp, #20
15964     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15968     24 00 90 5D |  if_ne	jmp	#LR__1726
1596c     00 1E 06 F6 | 	mov	local01, #0
15970     A7 20 02 FB | 	rdlong	local02, fp
15974     0C 4E 05 F1 | 	add	fp, #12
15978     A7 22 02 FB | 	rdlong	local03, fp
1597c     0C 4E 85 F1 | 	sub	fp, #12
15980     11 21 0A F2 | 	cmp	local02, local03 wz
15984     01 1E 66 56 |  if_ne	neg	local01, #1
15988     A7 1E 62 FC | 	wrlong	local01, fp
1598c     F8 01 90 FD | 	jmp	#LR__1733
15990                 | LR__1726
15990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
15990     08 4E 05 F1 | 	add	fp, #8
15994     A7 1E 02 FB | 	rdlong	local01, fp
15998     08 4E 85 F1 | 	sub	fp, #8
1599c     1D 1E 0E F2 | 	cmp	local01, #29 wz
159a0     14 4E 05 A1 |  if_e	add	fp, #20
159a4     A7 22 02 AB |  if_e	rdlong	local03, fp
159a8     14 4E 85 A1 |  if_e	sub	fp, #20
159ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
159b0     34 00 90 5D |  if_ne	jmp	#LR__1727
159b4     00 1E 06 F6 | 	mov	local01, #0
159b8     A7 12 02 FB | 	rdlong	arg01, fp
159bc     8C D8 B0 FD | 	call	#__system___float_fromuns
159c0     FD 12 02 F6 | 	mov	arg01, result1
159c4     0C 4E 05 F1 | 	add	fp, #12
159c8     A7 14 02 FB | 	rdlong	arg02, fp
159cc     0C 4E 85 F1 | 	sub	fp, #12
159d0     01 16 06 F6 | 	mov	arg03, #1
159d4     AC E0 B0 FD | 	call	#__system___float_cmp
159d8     00 FA 0D F2 | 	cmp	result1, #0 wz
159dc     00 1E 26 56 |  if_ne	not	local01, #0
159e0     A7 1E 62 FC | 	wrlong	local01, fp
159e4     A0 01 90 FD | 	jmp	#LR__1733
159e8                 | LR__1727
159e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
159e8     08 4E 05 F1 | 	add	fp, #8
159ec     A7 1E 02 FB | 	rdlong	local01, fp
159f0     08 4E 85 F1 | 	sub	fp, #8
159f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
159f8     14 4E 05 A1 |  if_e	add	fp, #20
159fc     A7 22 02 AB |  if_e	rdlong	local03, fp
15a00     14 4E 85 A1 |  if_e	sub	fp, #20
15a04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15a08     24 00 90 5D |  if_ne	jmp	#LR__1728
15a0c     00 1E 06 F6 | 	mov	local01, #0
15a10     A7 20 02 FB | 	rdlong	local02, fp
15a14     0C 4E 05 F1 | 	add	fp, #12
15a18     A7 22 02 FB | 	rdlong	local03, fp
15a1c     0C 4E 85 F1 | 	sub	fp, #12
15a20     11 21 0A F2 | 	cmp	local02, local03 wz
15a24     01 1E 66 56 |  if_ne	neg	local01, #1
15a28     A7 1E 62 FC | 	wrlong	local01, fp
15a2c     58 01 90 FD | 	jmp	#LR__1733
15a30                 | LR__1728
15a30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
15a30     08 4E 05 F1 | 	add	fp, #8
15a34     A7 1E 02 FB | 	rdlong	local01, fp
15a38     08 4E 85 F1 | 	sub	fp, #8
15a3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a40     14 4E 05 A1 |  if_e	add	fp, #20
15a44     A7 22 02 AB |  if_e	rdlong	local03, fp
15a48     14 4E 85 A1 |  if_e	sub	fp, #20
15a4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15a50     24 00 90 5D |  if_ne	jmp	#LR__1729
15a54     00 1E 06 F6 | 	mov	local01, #0
15a58     A7 20 02 FB | 	rdlong	local02, fp
15a5c     0C 4E 05 F1 | 	add	fp, #12
15a60     A7 22 02 FB | 	rdlong	local03, fp
15a64     0C 4E 85 F1 | 	sub	fp, #12
15a68     11 21 0A F2 | 	cmp	local02, local03 wz
15a6c     01 1E 66 56 |  if_ne	neg	local01, #1
15a70     A7 1E 62 FC | 	wrlong	local01, fp
15a74     10 01 90 FD | 	jmp	#LR__1733
15a78                 | LR__1729
15a78                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15a78     08 4E 05 F1 | 	add	fp, #8
15a7c     A7 1E 02 FB | 	rdlong	local01, fp
15a80     08 4E 85 F1 | 	sub	fp, #8
15a84     2B 1E 0E F2 | 	cmp	local01, #43 wz
15a88     14 4E 05 A1 |  if_e	add	fp, #20
15a8c     A7 22 02 AB |  if_e	rdlong	local03, fp
15a90     14 4E 85 A1 |  if_e	sub	fp, #20
15a94     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15a98     30 00 90 5D |  if_ne	jmp	#LR__1730
15a9c     00 1E 06 F6 | 	mov	local01, #0
15aa0     A7 12 02 FB | 	rdlong	arg01, fp
15aa4     DC B8 BF FD | 	call	#_convertstring
15aa8     FD 12 02 F6 | 	mov	arg01, result1
15aac     0C 4E 05 F1 | 	add	fp, #12
15ab0     A7 14 02 FB | 	rdlong	arg02, fp
15ab4     0C 4E 85 F1 | 	sub	fp, #12
15ab8     08 B0 B0 FD | 	call	#__system___string_cmp
15abc     00 FA 0D F2 | 	cmp	result1, #0 wz
15ac0     00 1E 26 56 |  if_ne	not	local01, #0
15ac4     A7 1E 62 FC | 	wrlong	local01, fp
15ac8     BC 00 90 FD | 	jmp	#LR__1733
15acc                 | LR__1730
15acc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15acc     08 4E 05 F1 | 	add	fp, #8
15ad0     A7 1E 02 FB | 	rdlong	local01, fp
15ad4     08 4E 85 F1 | 	sub	fp, #8
15ad8     1F 1E 0E F2 | 	cmp	local01, #31 wz
15adc     14 4E 05 A1 |  if_e	add	fp, #20
15ae0     A7 22 02 AB |  if_e	rdlong	local03, fp
15ae4     14 4E 85 A1 |  if_e	sub	fp, #20
15ae8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15aec     34 00 90 5D |  if_ne	jmp	#LR__1731
15af0     00 1E 06 F6 | 	mov	local01, #0
15af4     A7 20 02 FB | 	rdlong	local02, fp
15af8     0C 4E 05 F1 | 	add	fp, #12
15afc     A7 12 02 FB | 	rdlong	arg01, fp
15b00     0C 4E 85 F1 | 	sub	fp, #12
15b04     7C B8 BF FD | 	call	#_convertstring
15b08     FD 14 02 F6 | 	mov	arg02, result1
15b0c     10 13 02 F6 | 	mov	arg01, local02
15b10     B0 AF B0 FD | 	call	#__system___string_cmp
15b14     00 FA 0D F2 | 	cmp	result1, #0 wz
15b18     00 1E 26 56 |  if_ne	not	local01, #0
15b1c     A7 1E 62 FC | 	wrlong	local01, fp
15b20     64 00 90 FD | 	jmp	#LR__1733
15b24                 | LR__1731
15b24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15b24     08 4E 05 F1 | 	add	fp, #8
15b28     A7 1E 02 FB | 	rdlong	local01, fp
15b2c     08 4E 85 F1 | 	sub	fp, #8
15b30     2B 1E 0E F2 | 	cmp	local01, #43 wz
15b34     14 4E 05 A1 |  if_e	add	fp, #20
15b38     A7 22 02 AB |  if_e	rdlong	local03, fp
15b3c     14 4E 85 A1 |  if_e	sub	fp, #20
15b40     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b44     3C 00 90 5D |  if_ne	jmp	#LR__1732
15b48     00 1E 06 F6 | 	mov	local01, #0
15b4c     A7 12 02 FB | 	rdlong	arg01, fp
15b50     30 B8 BF FD | 	call	#_convertstring
15b54     FD 20 02 F6 | 	mov	local02, result1
15b58     0C 4E 05 F1 | 	add	fp, #12
15b5c     A7 12 02 FB | 	rdlong	arg01, fp
15b60     0C 4E 85 F1 | 	sub	fp, #12
15b64     1C B8 BF FD | 	call	#_convertstring
15b68     FD 14 02 F6 | 	mov	arg02, result1
15b6c     10 13 02 F6 | 	mov	arg01, local02
15b70     50 AF B0 FD | 	call	#__system___string_cmp
15b74     00 FA 0D F2 | 	cmp	result1, #0 wz
15b78     00 1E 26 56 |  if_ne	not	local01, #0
15b7c     A7 1E 62 FC | 	wrlong	local01, fp
15b80     04 00 90 FD | 	jmp	#LR__1733
15b84                 | LR__1732
15b84     A7 00 68 FC | 	wrlong	#0, fp
15b88                 | LR__1733
15b88     08 4E 05 F1 | 	add	fp, #8
15b8c     A7 38 68 FC | 	wrlong	#28, fp
15b90     08 4E 85 F1 | 	sub	fp, #8
15b94     A7 12 02 F6 | 	mov	arg01, fp
15b98     E0 5F BF FD | 	call	#_push
15b9c     A7 F0 03 F6 | 	mov	ptra, fp
15ba0     B2 00 A0 FD | 	call	#popregs_
15ba4                 | _do_ne_ret
15ba4     2D 00 64 FD | 	ret
15ba8                 | 
15ba8                 | ' 
15ba8                 | ' 
15ba8                 | ' 
15ba8                 | ' function converttoint (t1 as expr_result) as integer 
15ba8                 | _converttoint
15ba8     02 4A 05 F6 | 	mov	COUNT_, #2
15bac     A8 00 A0 FD | 	call	#pushregs_
15bb0     09 1F 02 F6 | 	mov	local01, arg01
15bb4                 | ' 
15bb4                 | ' select case t1.result_type
15bb4     08 1E 06 F1 | 	add	local01, #8
15bb8     0F 21 02 FB | 	rdlong	local02, local01
15bbc     08 1E 86 F1 | 	sub	local01, #8
15bc0     1C 20 0E F2 | 	cmp	local02, #28 wz
15bc4     2C 00 90 AD |  if_e	jmp	#LR__1740
15bc8     1D 20 0E F2 | 	cmp	local02, #29 wz
15bcc     2C 00 90 AD |  if_e	jmp	#LR__1741
15bd0     1E 20 0E F2 | 	cmp	local02, #30 wz
15bd4     2C 00 90 AD |  if_e	jmp	#LR__1742
15bd8     1F 20 0E F2 | 	cmp	local02, #31 wz
15bdc     34 00 90 AD |  if_e	jmp	#LR__1743
15be0     2B 20 0E F2 | 	cmp	local02, #43 wz
15be4     44 00 90 AD |  if_e	jmp	#LR__1744
15be8     2C 20 0E F2 | 	cmp	local02, #44 wz
15bec     5C 00 90 AD |  if_e	jmp	#LR__1745
15bf0     60 00 90 FD | 	jmp	#LR__1746
15bf4                 | LR__1740
15bf4     0F FB 01 FB | 	rdlong	result1, local01
15bf8     5C 00 90 FD | 	jmp	#LR__1747
15bfc                 | LR__1741
15bfc     0F FB 01 FB | 	rdlong	result1, local01
15c00     54 00 90 FD | 	jmp	#LR__1747
15c04                 | LR__1742
15c04     0F 13 02 FB | 	rdlong	arg01, local01
15c08     01 14 06 F6 | 	mov	arg02, #1
15c0c     08 DF B0 FD | 	call	#__system___float_tointeger
15c10     44 00 90 FD | 	jmp	#LR__1747
15c14                 | LR__1743
15c14     0F 13 02 FB | 	rdlong	arg01, local01
15c18     1C E2 B0 FD | 	call	#__system____builtin_atof
15c1c     FD 12 02 F6 | 	mov	arg01, result1
15c20     01 14 06 F6 | 	mov	arg02, #1
15c24     F0 DE B0 FD | 	call	#__system___float_tointeger
15c28     2C 00 90 FD | 	jmp	#LR__1747
15c2c                 | LR__1744
15c2c     0F 13 02 FB | 	rdlong	arg01, local01
15c30     50 B7 BF FD | 	call	#_convertstring
15c34     FD 12 02 F6 | 	mov	arg01, result1
15c38     FC E1 B0 FD | 	call	#__system____builtin_atof
15c3c     FD 12 02 F6 | 	mov	arg01, result1
15c40     01 14 06 F6 | 	mov	arg02, #1
15c44     D0 DE B0 FD | 	call	#__system___float_tointeger
15c48     0C 00 90 FD | 	jmp	#LR__1747
15c4c                 | LR__1745
15c4c     0F FB 01 FB | 	rdlong	result1, local01
15c50     04 00 90 FD | 	jmp	#LR__1747
15c54                 | LR__1746
15c54     00 FA 05 F6 | 	mov	result1, #0
15c58                 | LR__1747
15c58     A7 F0 03 F6 | 	mov	ptra, fp
15c5c     B2 00 A0 FD | 	call	#popregs_
15c60                 | _converttoint_ret
15c60     2D 00 64 FD | 	ret
15c64                 | 
15c64                 | ' 
15c64                 | ' function converttofloat (t1 as expr_result) as single
15c64                 | _converttofloat
15c64     03 4A 05 F6 | 	mov	COUNT_, #3
15c68     A8 00 A0 FD | 	call	#pushregs_
15c6c     09 1F 02 F6 | 	mov	local01, arg01
15c70                 | ' 
15c70                 | ' select case t1.result_type
15c70     08 1E 06 F1 | 	add	local01, #8
15c74     0F 21 02 FB | 	rdlong	local02, local01
15c78     08 1E 86 F1 | 	sub	local01, #8
15c7c     1C 20 0E F2 | 	cmp	local02, #28 wz
15c80     24 00 90 AD |  if_e	jmp	#LR__1750
15c84     1D 20 0E F2 | 	cmp	local02, #29 wz
15c88     38 00 90 AD |  if_e	jmp	#LR__1751
15c8c     1E 20 0E F2 | 	cmp	local02, #30 wz
15c90     3C 00 90 AD |  if_e	jmp	#LR__1752
15c94     1F 20 0E F2 | 	cmp	local02, #31 wz
15c98     3C 00 90 AD |  if_e	jmp	#LR__1753
15c9c     2B 20 0E F2 | 	cmp	local02, #43 wz
15ca0     40 00 90 AD |  if_e	jmp	#LR__1754
15ca4     50 00 90 FD | 	jmp	#LR__1755
15ca8                 | LR__1750
15ca8     0F 13 02 FB | 	rdlong	arg01, local01
15cac     09 13 52 F6 | 	abs	arg01, arg01 wc
15cb0     1F 22 C6 C9 |  if_b	decod	local03, #31
15cb4     00 22 06 36 |  if_ae	mov	local03, #0
15cb8     90 D5 B0 FD | 	call	#__system___float_fromuns
15cbc     11 FB 61 F5 | 	xor	result1, local03
15cc0     38 00 90 FD | 	jmp	#LR__1756
15cc4                 | LR__1751
15cc4     0F 13 02 FB | 	rdlong	arg01, local01
15cc8     80 D5 B0 FD | 	call	#__system___float_fromuns
15ccc     2C 00 90 FD | 	jmp	#LR__1756
15cd0                 | LR__1752
15cd0     0F FB 01 FB | 	rdlong	result1, local01
15cd4     24 00 90 FD | 	jmp	#LR__1756
15cd8                 | LR__1753
15cd8     0F 13 02 FB | 	rdlong	arg01, local01
15cdc     58 E1 B0 FD | 	call	#__system____builtin_atof
15ce0     18 00 90 FD | 	jmp	#LR__1756
15ce4                 | LR__1754
15ce4     0F 13 02 FB | 	rdlong	arg01, local01
15ce8     98 B6 BF FD | 	call	#_convertstring
15cec     FD 12 02 F6 | 	mov	arg01, result1
15cf0     44 E1 B0 FD | 	call	#__system____builtin_atof
15cf4     04 00 90 FD | 	jmp	#LR__1756
15cf8                 | LR__1755
15cf8     00 FA 05 F6 | 	mov	result1, #0
15cfc                 | LR__1756
15cfc     A7 F0 03 F6 | 	mov	ptra, fp
15d00     B2 00 A0 FD | 	call	#popregs_
15d04                 | _converttofloat_ret
15d04     2D 00 64 FD | 	ret
15d08                 | 
15d08                 | ' 
15d08                 | ' sub do_rnd
15d08                 | _do_rnd
15d08     01 4A 05 F6 | 	mov	COUNT_, #1
15d0c     A8 00 A0 FD | 	call	#pushregs_
15d10     10 F0 07 F1 | 	add	ptra, #16
15d14     4A 00 00 FF 
15d18     80 E4 05 F1 | 	add	objptr, ##38016
15d1c     F2 1E 02 FB | 	rdlong	local01, objptr
15d20     0F 17 02 F6 | 	mov	arg03, local01
15d24     01 16 66 F0 | 	shl	arg03, #1
15d28     0F 17 02 F1 | 	add	arg03, local01
15d2c     02 16 66 F0 | 	shl	arg03, #2
15d30     03 00 00 FF 
15d34     04 E4 85 F1 | 	sub	objptr, ##1540
15d38     F2 16 02 F1 | 	add	arg03, objptr
15d3c     0B 17 02 FB | 	rdlong	arg03, arg03
15d40     0C 4E 05 F1 | 	add	fp, #12
15d44     A7 16 62 FC | 	wrlong	arg03, fp
15d48                 | ' 
15d48                 | ' numpar=compiledline(lineptr_e).result.uresult
15d48                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15d48     0C 4E 85 F1 | 	sub	fp, #12
15d4c     02 16 16 F2 | 	cmp	arg03, #2 wc
15d50     47 00 00 FF 
15d54     7C E4 85 F1 | 	sub	objptr, ##36476
15d58     3C 00 90 CD |  if_b	jmp	#LR__1760
15d5c     00 12 06 F6 | 	mov	arg01, #0
15d60     78 07 B1 FD | 	call	#__system___getiolock_0540
15d64     FD 12 02 F6 | 	mov	arg01, result1
15d68     30 AD B0 FD | 	call	#__system___lockmem
15d6c     85 01 00 FF 
15d70     78 14 06 F6 | 	mov	arg02, ##@LR__5473
15d74     00 12 06 F6 | 	mov	arg01, #0
15d78     00 16 06 F6 | 	mov	arg03, #0
15d7c     10 BA B0 FD | 	call	#__system___basic_print_string
15d80     00 12 06 F6 | 	mov	arg01, #0
15d84     54 07 B1 FD | 	call	#__system___getiolock_0540
15d88     FD 00 68 FC | 	wrlong	#0, result1
15d8c     27 12 06 F6 | 	mov	arg01, #39
15d90     70 77 B0 FD | 	call	#_printerror
15d94     2C 01 90 FD | 	jmp	#LR__1767
15d98                 | LR__1760
15d98                 | ' if numpar=0 then
15d98     0C 4E 05 F1 | 	add	fp, #12
15d9c     A7 FE 09 FB | 	rdlong	result3, fp wz
15da0     0C 4E 85 F1 | 	sub	fp, #12
15da4     20 00 90 5D |  if_ne	jmp	#LR__1761
15da8     08 4E 05 F1 | 	add	fp, #8
15dac     A7 3A 68 FC | 	wrlong	#29, fp
15db0     08 4E 85 F1 | 	sub	fp, #8
15db4     1B FA 61 FD | 	getrnd	result1
15db8     A7 FA 61 FC | 	wrlong	result1, fp
15dbc     A7 12 02 F6 | 	mov	arg01, fp
15dc0     B8 5D BF FD | 	call	#_push
15dc4     FC 00 90 FD | 	jmp	#LR__1766
15dc8                 | LR__1761
15dc8     18 5D BF FD | 	call	#_pop
15dcc     A7 FA 61 FC | 	wrlong	result1, fp
15dd0     04 4E 05 F1 | 	add	fp, #4
15dd4     A7 FC 61 FC | 	wrlong	result2, fp
15dd8     04 4E 05 F1 | 	add	fp, #4
15ddc     A7 FE 61 FC | 	wrlong	result3, fp
15de0                 | '   t1=pop()
15de0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15de0     08 4E 85 F1 | 	sub	fp, #8
15de4     1C FE 0D F2 | 	cmp	result3, #28 wz
15de8     08 4E 05 51 |  if_ne	add	fp, #8
15dec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15df0     08 4E 85 51 |  if_ne	sub	fp, #8
15df4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15df8     2C 00 90 5D |  if_ne	jmp	#LR__1762
15dfc     1B FA 61 FD | 	getrnd	result1
15e00     A7 1E 02 FB | 	rdlong	local01, fp
15e04     0F FB 11 FD | 	qdiv	result1, local01
15e08     A7 12 02 F6 | 	mov	arg01, fp
15e0c     19 1E 62 FD | 	getqy	local01
15e10     A7 1E 62 FC | 	wrlong	local01, fp
15e14     08 4E 05 F1 | 	add	fp, #8
15e18     A7 3A 68 FC | 	wrlong	#29, fp
15e1c     08 4E 85 F1 | 	sub	fp, #8
15e20     58 5D BF FD | 	call	#_push
15e24     9C 00 90 FD | 	jmp	#LR__1765
15e28                 | LR__1762
15e28     08 4E 05 F1 | 	add	fp, #8
15e2c     A7 1E 02 FB | 	rdlong	local01, fp
15e30     08 4E 85 F1 | 	sub	fp, #8
15e34     1E 1E 0E F2 | 	cmp	local01, #30 wz
15e38     48 00 90 5D |  if_ne	jmp	#LR__1763
15e3c     A7 12 02 FB | 	rdlong	arg01, fp
15e40     00 C0 24 FF 
15e44     00 14 06 F6 | 	mov	arg02, ##1233125376
15e48     08 DA B0 FD | 	call	#__system___float_div
15e4c     FD 1E 02 F6 | 	mov	local01, result1
15e50     1B 12 62 FD | 	getrnd	arg01
15e54     74 13 06 F4 | 	bitl	arg01, #372
15e58     F0 D3 B0 FD | 	call	#__system___float_fromuns
15e5c     FD 14 02 F6 | 	mov	arg02, result1
15e60     0F 13 02 F6 | 	mov	arg01, local01
15e64     E8 D7 B0 FD | 	call	#__system___float_mul
15e68     A7 FA 61 FC | 	wrlong	result1, fp
15e6c     08 4E 05 F1 | 	add	fp, #8
15e70     A7 3C 68 FC | 	wrlong	#30, fp
15e74     08 4E 85 F1 | 	sub	fp, #8
15e78     A7 12 02 F6 | 	mov	arg01, fp
15e7c     FC 5C BF FD | 	call	#_push
15e80     40 00 90 FD | 	jmp	#LR__1764
15e84                 | LR__1763
15e84                 | '     print "rnd: "; : printerror(40) 
15e84     00 12 06 F6 | 	mov	arg01, #0
15e88     50 06 B1 FD | 	call	#__system___getiolock_0540
15e8c     FD 12 02 F6 | 	mov	arg01, result1
15e90     08 AC B0 FD | 	call	#__system___lockmem
15e94     85 01 00 FF 
15e98     7E 14 06 F6 | 	mov	arg02, ##@LR__5474
15e9c     00 12 06 F6 | 	mov	arg01, #0
15ea0     00 16 06 F6 | 	mov	arg03, #0
15ea4     E8 B8 B0 FD | 	call	#__system___basic_print_string
15ea8     00 12 06 F6 | 	mov	arg01, #0
15eac     2C 06 B1 FD | 	call	#__system___getiolock_0540
15eb0     FD 00 68 FC | 	wrlong	#0, result1
15eb4     28 12 06 F6 | 	mov	arg01, #40
15eb8     48 76 B0 FD | 	call	#_printerror
15ebc     A7 12 02 F6 | 	mov	arg01, fp
15ec0     B8 5C BF FD | 	call	#_push
15ec4                 | LR__1764
15ec4                 | LR__1765
15ec4                 | LR__1766
15ec4                 | LR__1767
15ec4     A7 F0 03 F6 | 	mov	ptra, fp
15ec8     B2 00 A0 FD | 	call	#popregs_
15ecc                 | _do_rnd_ret
15ecc     2D 00 64 FD | 	ret
15ed0                 | 
15ed0                 | ' 
15ed0                 | ' sub do_getenvsustain
15ed0                 | _do_getenvsustain
15ed0     01 4A 05 F6 | 	mov	COUNT_, #1
15ed4     A8 00 A0 FD | 	call	#pushregs_
15ed8     10 F0 07 F1 | 	add	ptra, #16
15edc     4A 00 00 FF 
15ee0     80 E4 05 F1 | 	add	objptr, ##38016
15ee4     F2 1E 02 FB | 	rdlong	local01, objptr
15ee8     0F 17 02 F6 | 	mov	arg03, local01
15eec     01 16 66 F0 | 	shl	arg03, #1
15ef0     0F 17 02 F1 | 	add	arg03, local01
15ef4     02 16 66 F0 | 	shl	arg03, #2
15ef8     03 00 00 FF 
15efc     04 E4 85 F1 | 	sub	objptr, ##1540
15f00     F2 16 02 F1 | 	add	arg03, objptr
15f04     0B 17 02 FB | 	rdlong	arg03, arg03
15f08     0C 4E 05 F1 | 	add	fp, #12
15f0c     A7 16 62 FC | 	wrlong	arg03, fp
15f10                 | ' 
15f10                 | ' numpar=compiledline(lineptr_e).result.uresult
15f10                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15f10     0C 4E 85 F1 | 	sub	fp, #12
15f14     02 16 16 F2 | 	cmp	arg03, #2 wc
15f18     47 00 00 FF 
15f1c     7C E4 85 F1 | 	sub	objptr, ##36476
15f20     0C 4E 05 C1 |  if_b	add	fp, #12
15f24     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15f28     0C 4E 85 C1 |  if_b	sub	fp, #12
15f2c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15f30     00 12 06 F6 | 	mov	arg01, #0
15f34     A4 05 B1 FD | 	call	#__system___getiolock_0540
15f38     FD 12 02 F6 | 	mov	arg01, result1
15f3c     5C AB B0 FD | 	call	#__system___lockmem
15f40     85 01 00 FF 
15f44     84 14 06 F6 | 	mov	arg02, ##@LR__5475
15f48     00 12 06 F6 | 	mov	arg01, #0
15f4c     00 16 06 F6 | 	mov	arg03, #0
15f50     3C B8 B0 FD | 	call	#__system___basic_print_string
15f54     00 12 06 F6 | 	mov	arg01, #0
15f58     80 05 B1 FD | 	call	#__system___getiolock_0540
15f5c     FD 00 68 FC | 	wrlong	#0, result1
15f60     27 12 06 F6 | 	mov	arg01, #39
15f64     9C 75 B0 FD | 	call	#_printerror
15f68     64 00 90 FD | 	jmp	#LR__1771
15f6c                 | LR__1770
15f6c     74 5B BF FD | 	call	#_pop
15f70     FD 1E 02 F6 | 	mov	local01, result1
15f74     FE 16 02 F6 | 	mov	arg03, result2
15f78     A7 1E 62 FC | 	wrlong	local01, fp
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 16 62 FC | 	wrlong	arg03, fp
15f84     04 4E 05 F1 | 	add	fp, #4
15f88     A7 FE 61 FC | 	wrlong	result3, fp
15f8c     08 4E 85 F1 | 	sub	fp, #8
15f90     A7 12 02 F6 | 	mov	arg01, fp
15f94     10 FC BF FD | 	call	#_converttoint
15f98     FD 1E 02 F6 | 	mov	local01, result1
15f9c     01 1E 66 F0 | 	shl	local01, #1
15fa0     51 00 00 FF 
15fa4     C4 E5 05 F1 | 	add	objptr, ##41924
15fa8     F2 1E 02 F1 | 	add	local01, objptr
15fac     0F 1F E2 FA | 	rdword	local01, local01
15fb0     A7 1E 62 FC | 	wrlong	local01, fp
15fb4     08 4E 05 F1 | 	add	fp, #8
15fb8     A7 38 68 FC | 	wrlong	#28, fp
15fbc     08 4E 85 F1 | 	sub	fp, #8
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     51 00 00 FF 
15fc8     C4 E5 85 F1 | 	sub	objptr, ##41924
15fcc     AC 5B BF FD | 	call	#_push
15fd0                 | LR__1771
15fd0     A7 F0 03 F6 | 	mov	ptra, fp
15fd4     B2 00 A0 FD | 	call	#popregs_
15fd8                 | _do_getenvsustain_ret
15fd8     2D 00 64 FD | 	ret
15fdc                 | 
15fdc                 | ' 
15fdc                 | ' sub do_sin
15fdc                 | _do_sin
15fdc     01 4A 05 F6 | 	mov	COUNT_, #1
15fe0     A8 00 A0 FD | 	call	#pushregs_
15fe4     10 F0 07 F1 | 	add	ptra, #16
15fe8     4A 00 00 FF 
15fec     80 E4 05 F1 | 	add	objptr, ##38016
15ff0     F2 1E 02 FB | 	rdlong	local01, objptr
15ff4     0F 17 02 F6 | 	mov	arg03, local01
15ff8     01 16 66 F0 | 	shl	arg03, #1
15ffc     0F 17 02 F1 | 	add	arg03, local01
16000     02 16 66 F0 | 	shl	arg03, #2
16004     03 00 00 FF 
16008     04 E4 85 F1 | 	sub	objptr, ##1540
1600c     F2 16 02 F1 | 	add	arg03, objptr
16010     0B 17 02 FB | 	rdlong	arg03, arg03
16014     0C 4E 05 F1 | 	add	fp, #12
16018     A7 16 62 FC | 	wrlong	arg03, fp
1601c                 | ' 
1601c                 | ' numpar=compiledline(lineptr_e).result.uresult
1601c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1601c     0C 4E 85 F1 | 	sub	fp, #12
16020     02 16 16 F2 | 	cmp	arg03, #2 wc
16024     47 00 00 FF 
16028     7C E4 85 F1 | 	sub	objptr, ##36476
1602c     0C 4E 05 C1 |  if_b	add	fp, #12
16030     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16034     0C 4E 85 C1 |  if_b	sub	fp, #12
16038     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
1603c     00 12 06 F6 | 	mov	arg01, #0
16040     98 04 B1 FD | 	call	#__system___getiolock_0540
16044     FD 12 02 F6 | 	mov	arg01, result1
16048     50 AA B0 FD | 	call	#__system___lockmem
1604c     85 01 00 FF 
16050     94 14 06 F6 | 	mov	arg02, ##@LR__5476
16054     00 12 06 F6 | 	mov	arg01, #0
16058     00 16 06 F6 | 	mov	arg03, #0
1605c     30 B7 B0 FD | 	call	#__system___basic_print_string
16060     00 12 06 F6 | 	mov	arg01, #0
16064     74 04 B1 FD | 	call	#__system___getiolock_0540
16068     FD 00 68 FC | 	wrlong	#0, result1
1606c     27 12 06 F6 | 	mov	arg01, #39
16070     90 74 B0 FD | 	call	#_printerror
16074     64 00 90 FD | 	jmp	#LR__1781
16078                 | LR__1780
16078     68 5A BF FD | 	call	#_pop
1607c     A7 FA 61 FC | 	wrlong	result1, fp
16080     04 4E 05 F1 | 	add	fp, #4
16084     A7 FC 61 FC | 	wrlong	result2, fp
16088     04 4E 05 F1 | 	add	fp, #4
1608c     A7 FE 61 FC | 	wrlong	result3, fp
16090     08 4E 85 F1 | 	sub	fp, #8
16094     51 00 00 FF 
16098     B8 E5 05 F1 | 	add	objptr, ##41912
1609c     F2 1E 02 FB | 	rdlong	local01, objptr
160a0     51 00 00 FF 
160a4     B8 E5 85 F1 | 	sub	objptr, ##41912
160a8     A7 12 02 F6 | 	mov	arg01, fp
160ac     B4 FB BF FD | 	call	#_converttofloat
160b0     FD 14 02 F6 | 	mov	arg02, result1
160b4     0F 13 02 F6 | 	mov	arg01, local01
160b8     94 D5 B0 FD | 	call	#__system___float_mul
160bc     FD 12 02 F6 | 	mov	arg01, result1
160c0     C8 DE B0 FD | 	call	#__system____builtin_sinf
160c4     A7 FA 61 FC | 	wrlong	result1, fp
160c8     08 4E 05 F1 | 	add	fp, #8
160cc     A7 3C 68 FC | 	wrlong	#30, fp
160d0     08 4E 85 F1 | 	sub	fp, #8
160d4     A7 12 02 F6 | 	mov	arg01, fp
160d8     A0 5A BF FD | 	call	#_push
160dc                 | LR__1781
160dc     A7 F0 03 F6 | 	mov	ptra, fp
160e0     B2 00 A0 FD | 	call	#popregs_
160e4                 | _do_sin_ret
160e4     2D 00 64 FD | 	ret
160e8                 | 
160e8                 | ' 
160e8                 | ' 
160e8                 | ' sub do_mid
160e8                 | _do_mid
160e8     00 4A 05 F6 | 	mov	COUNT_, #0
160ec     A8 00 A0 FD | 	call	#pushregs_
160f0     18 F0 07 F1 | 	add	ptra, #24
160f4     4A 00 00 FF 
160f8     80 E4 05 F1 | 	add	objptr, ##38016
160fc     F2 16 02 FB | 	rdlong	arg03, objptr
16100     0B 15 02 F6 | 	mov	arg02, arg03
16104     01 14 66 F0 | 	shl	arg02, #1
16108     0B 15 02 F1 | 	add	arg02, arg03
1610c     02 14 66 F0 | 	shl	arg02, #2
16110     03 00 00 FF 
16114     04 E4 85 F1 | 	sub	objptr, ##1540
16118     F2 14 02 F1 | 	add	arg02, objptr
1611c     0A 17 02 FB | 	rdlong	arg03, arg02
16120     0C 4E 05 F1 | 	add	fp, #12
16124     A7 16 62 FC | 	wrlong	arg03, fp
16128                 | ' 
16128                 | ' numpar=compiledline(lineptr_e).result.uresult
16128                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16128     0C 4E 85 F1 | 	sub	fp, #12
1612c     03 16 0E F2 | 	cmp	arg03, #3 wz
16130     47 00 00 FF 
16134     7C E4 85 F1 | 	sub	objptr, ##36476
16138     3C 00 90 AD |  if_e	jmp	#LR__1790
1613c     00 12 06 F6 | 	mov	arg01, #0
16140     98 03 B1 FD | 	call	#__system___getiolock_0540
16144     FD 12 02 F6 | 	mov	arg01, result1
16148     50 A9 B0 FD | 	call	#__system___lockmem
1614c     85 01 00 FF 
16150     9A 14 06 F6 | 	mov	arg02, ##@LR__5477
16154     00 12 06 F6 | 	mov	arg01, #0
16158     00 16 06 F6 | 	mov	arg03, #0
1615c     30 B6 B0 FD | 	call	#__system___basic_print_string
16160     00 12 06 F6 | 	mov	arg01, #0
16164     74 03 B1 FD | 	call	#__system___getiolock_0540
16168     FD 00 68 FC | 	wrlong	#0, result1
1616c     27 12 06 F6 | 	mov	arg01, #39
16170     90 73 B0 FD | 	call	#_printerror
16174     28 01 90 FD | 	jmp	#LR__1793
16178                 | LR__1790
16178     68 59 BF FD | 	call	#_pop
1617c     FF 16 02 F6 | 	mov	arg03, result3
16180     A7 FA 61 FC | 	wrlong	result1, fp
16184     04 4E 05 F1 | 	add	fp, #4
16188     A7 FC 61 FC | 	wrlong	result2, fp
1618c     04 4E 05 F1 | 	add	fp, #4
16190     A7 16 62 FC | 	wrlong	arg03, fp
16194     08 4E 85 F1 | 	sub	fp, #8
16198     A7 12 02 F6 | 	mov	arg01, fp
1619c     08 FA BF FD | 	call	#_converttoint
161a0     FD 16 02 F6 | 	mov	arg03, result1
161a4     14 4E 05 F1 | 	add	fp, #20
161a8     A7 16 62 FC | 	wrlong	arg03, fp
161ac     14 4E 85 F1 | 	sub	fp, #20
161b0     30 59 BF FD | 	call	#_pop
161b4     FF 16 02 F6 | 	mov	arg03, result3
161b8     A7 FA 61 FC | 	wrlong	result1, fp
161bc     04 4E 05 F1 | 	add	fp, #4
161c0     A7 FC 61 FC | 	wrlong	result2, fp
161c4     04 4E 05 F1 | 	add	fp, #4
161c8     A7 16 62 FC | 	wrlong	arg03, fp
161cc     08 4E 85 F1 | 	sub	fp, #8
161d0     A7 12 02 F6 | 	mov	arg01, fp
161d4     D0 F9 BF FD | 	call	#_converttoint
161d8     FD 16 02 F6 | 	mov	arg03, result1
161dc     10 4E 05 F1 | 	add	fp, #16
161e0     A7 16 62 FC | 	wrlong	arg03, fp
161e4     10 4E 85 F1 | 	sub	fp, #16
161e8     F8 58 BF FD | 	call	#_pop
161ec     FF 16 02 F6 | 	mov	arg03, result3
161f0     A7 FA 61 FC | 	wrlong	result1, fp
161f4     04 4E 05 F1 | 	add	fp, #4
161f8     A7 FC 61 FC | 	wrlong	result2, fp
161fc     04 4E 05 F1 | 	add	fp, #4
16200     A7 16 62 FC | 	wrlong	arg03, fp
16204                 | ' t1=pop() : arg2=converttoint(t1)
16204                 | ' t1=pop() : arg1=converttoint(t1)
16204                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16204     08 4E 85 F1 | 	sub	fp, #8
16208     2B 16 0E F2 | 	cmp	arg03, #43 wz
1620c     18 00 90 5D |  if_ne	jmp	#LR__1791
16210     A7 12 02 FB | 	rdlong	arg01, fp
16214     6C B1 BF FD | 	call	#_convertstring
16218     A7 FA 61 FC | 	wrlong	result1, fp
1621c     08 4E 05 F1 | 	add	fp, #8
16220     A7 3E 68 FC | 	wrlong	#31, fp
16224     08 4E 85 F1 | 	sub	fp, #8
16228                 | LR__1791
16228                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16228     08 4E 05 F1 | 	add	fp, #8
1622c     A7 16 02 FB | 	rdlong	arg03, fp
16230     08 4E 85 F1 | 	sub	fp, #8
16234     1F 16 0E F2 | 	cmp	arg03, #31 wz
16238     3C 00 90 AD |  if_e	jmp	#LR__1792
1623c     00 12 06 F6 | 	mov	arg01, #0
16240     98 02 B1 FD | 	call	#__system___getiolock_0540
16244     FD 12 02 F6 | 	mov	arg01, result1
16248     50 A8 B0 FD | 	call	#__system___lockmem
1624c     85 01 00 FF 
16250     A1 14 06 F6 | 	mov	arg02, ##@LR__5478
16254     00 12 06 F6 | 	mov	arg01, #0
16258     00 16 06 F6 | 	mov	arg03, #0
1625c     30 B5 B0 FD | 	call	#__system___basic_print_string
16260     00 12 06 F6 | 	mov	arg01, #0
16264     74 02 B1 FD | 	call	#__system___getiolock_0540
16268     FD 00 68 FC | 	wrlong	#0, result1
1626c     0F 12 06 F6 | 	mov	arg01, #15
16270     90 72 B0 FD | 	call	#_printerror
16274     28 00 90 FD | 	jmp	#LR__1793
16278                 | LR__1792
16278     A7 12 02 FB | 	rdlong	arg01, fp
1627c     10 4E 05 F1 | 	add	fp, #16
16280     A7 14 02 FB | 	rdlong	arg02, fp
16284     04 4E 05 F1 | 	add	fp, #4
16288     A7 16 02 FB | 	rdlong	arg03, fp
1628c     14 4E 85 F1 | 	sub	fp, #20
16290     9C C9 B0 FD | 	call	#__system__Mid_S
16294     A7 FA 61 FC | 	wrlong	result1, fp
16298     A7 12 02 F6 | 	mov	arg01, fp
1629c     DC 58 BF FD | 	call	#_push
162a0                 | LR__1793
162a0     A7 F0 03 F6 | 	mov	ptra, fp
162a4     B2 00 A0 FD | 	call	#popregs_
162a8                 | _do_mid_ret
162a8     2D 00 64 FD | 	ret
162ac                 | 
162ac                 | ' 
162ac                 | ' sub do_right
162ac                 | _do_right
162ac     00 4A 05 F6 | 	mov	COUNT_, #0
162b0     A8 00 A0 FD | 	call	#pushregs_
162b4     14 F0 07 F1 | 	add	ptra, #20
162b8     4A 00 00 FF 
162bc     80 E4 05 F1 | 	add	objptr, ##38016
162c0     F2 16 02 FB | 	rdlong	arg03, objptr
162c4     0B 15 02 F6 | 	mov	arg02, arg03
162c8     01 14 66 F0 | 	shl	arg02, #1
162cc     0B 15 02 F1 | 	add	arg02, arg03
162d0     02 14 66 F0 | 	shl	arg02, #2
162d4     03 00 00 FF 
162d8     04 E4 85 F1 | 	sub	objptr, ##1540
162dc     F2 14 02 F1 | 	add	arg02, objptr
162e0     0A 17 02 FB | 	rdlong	arg03, arg02
162e4     0C 4E 05 F1 | 	add	fp, #12
162e8     A7 16 62 FC | 	wrlong	arg03, fp
162ec                 | ' 
162ec                 | ' numpar=compiledline(lineptr_e).result.uresult
162ec                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
162ec     0C 4E 85 F1 | 	sub	fp, #12
162f0     02 16 0E F2 | 	cmp	arg03, #2 wz
162f4     47 00 00 FF 
162f8     7C E4 85 F1 | 	sub	objptr, ##36476
162fc     3C 00 90 AD |  if_e	jmp	#LR__1800
16300     00 12 06 F6 | 	mov	arg01, #0
16304     D4 01 B1 FD | 	call	#__system___getiolock_0540
16308     FD 12 02 F6 | 	mov	arg01, result1
1630c     8C A7 B0 FD | 	call	#__system___lockmem
16310     85 01 00 FF 
16314     A8 14 06 F6 | 	mov	arg02, ##@LR__5479
16318     00 12 06 F6 | 	mov	arg01, #0
1631c     00 16 06 F6 | 	mov	arg03, #0
16320     6C B4 B0 FD | 	call	#__system___basic_print_string
16324     00 12 06 F6 | 	mov	arg01, #0
16328     B0 01 B1 FD | 	call	#__system___getiolock_0540
1632c     FD 00 68 FC | 	wrlong	#0, result1
16330     27 12 06 F6 | 	mov	arg01, #39
16334     CC 71 B0 FD | 	call	#_printerror
16338     E8 00 90 FD | 	jmp	#LR__1803
1633c                 | LR__1800
1633c     A4 57 BF FD | 	call	#_pop
16340     FF 16 02 F6 | 	mov	arg03, result3
16344     A7 FA 61 FC | 	wrlong	result1, fp
16348     04 4E 05 F1 | 	add	fp, #4
1634c     A7 FC 61 FC | 	wrlong	result2, fp
16350     04 4E 05 F1 | 	add	fp, #4
16354     A7 16 62 FC | 	wrlong	arg03, fp
16358     08 4E 85 F1 | 	sub	fp, #8
1635c     A7 12 02 F6 | 	mov	arg01, fp
16360     44 F8 BF FD | 	call	#_converttoint
16364     FD 16 02 F6 | 	mov	arg03, result1
16368     10 4E 05 F1 | 	add	fp, #16
1636c     A7 16 62 FC | 	wrlong	arg03, fp
16370     10 4E 85 F1 | 	sub	fp, #16
16374     6C 57 BF FD | 	call	#_pop
16378     FF 16 02 F6 | 	mov	arg03, result3
1637c     A7 FA 61 FC | 	wrlong	result1, fp
16380     04 4E 05 F1 | 	add	fp, #4
16384     A7 FC 61 FC | 	wrlong	result2, fp
16388     04 4E 05 F1 | 	add	fp, #4
1638c     A7 16 62 FC | 	wrlong	arg03, fp
16390                 | ' t1=pop() : arg=converttoint(t1)
16390                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16390     08 4E 85 F1 | 	sub	fp, #8
16394     2B 16 0E F2 | 	cmp	arg03, #43 wz
16398     18 00 90 5D |  if_ne	jmp	#LR__1801
1639c     A7 12 02 FB | 	rdlong	arg01, fp
163a0     E0 AF BF FD | 	call	#_convertstring
163a4     A7 FA 61 FC | 	wrlong	result1, fp
163a8     08 4E 05 F1 | 	add	fp, #8
163ac     A7 3E 68 FC | 	wrlong	#31, fp
163b0     08 4E 85 F1 | 	sub	fp, #8
163b4                 | LR__1801
163b4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
163b4     08 4E 05 F1 | 	add	fp, #8
163b8     A7 16 02 FB | 	rdlong	arg03, fp
163bc     08 4E 85 F1 | 	sub	fp, #8
163c0     1F 16 0E F2 | 	cmp	arg03, #31 wz
163c4     3C 00 90 AD |  if_e	jmp	#LR__1802
163c8     00 12 06 F6 | 	mov	arg01, #0
163cc     0C 01 B1 FD | 	call	#__system___getiolock_0540
163d0     FD 12 02 F6 | 	mov	arg01, result1
163d4     C4 A6 B0 FD | 	call	#__system___lockmem
163d8     85 01 00 FF 
163dc     B1 14 06 F6 | 	mov	arg02, ##@LR__5480
163e0     00 12 06 F6 | 	mov	arg01, #0
163e4     00 16 06 F6 | 	mov	arg03, #0
163e8     A4 B3 B0 FD | 	call	#__system___basic_print_string
163ec     00 12 06 F6 | 	mov	arg01, #0
163f0     E8 00 B1 FD | 	call	#__system___getiolock_0540
163f4     FD 00 68 FC | 	wrlong	#0, result1
163f8     0F 12 06 F6 | 	mov	arg01, #15
163fc     04 71 B0 FD | 	call	#_printerror
16400     20 00 90 FD | 	jmp	#LR__1803
16404                 | LR__1802
16404     A7 12 02 FB | 	rdlong	arg01, fp
16408     10 4E 05 F1 | 	add	fp, #16
1640c     A7 14 02 FB | 	rdlong	arg02, fp
16410     10 4E 85 F1 | 	sub	fp, #16
16414     88 C7 B0 FD | 	call	#__system__Right_S
16418     A7 FA 61 FC | 	wrlong	result1, fp
1641c     A7 12 02 F6 | 	mov	arg01, fp
16420     58 57 BF FD | 	call	#_push
16424                 | LR__1803
16424     A7 F0 03 F6 | 	mov	ptra, fp
16428     B2 00 A0 FD | 	call	#popregs_
1642c                 | _do_right_ret
1642c     2D 00 64 FD | 	ret
16430                 | 
16430                 | ' 
16430                 | ' sub do_left
16430                 | _do_left
16430     00 4A 05 F6 | 	mov	COUNT_, #0
16434     A8 00 A0 FD | 	call	#pushregs_
16438     14 F0 07 F1 | 	add	ptra, #20
1643c     4A 00 00 FF 
16440     80 E4 05 F1 | 	add	objptr, ##38016
16444     F2 16 02 FB | 	rdlong	arg03, objptr
16448     0B 15 02 F6 | 	mov	arg02, arg03
1644c     01 14 66 F0 | 	shl	arg02, #1
16450     0B 15 02 F1 | 	add	arg02, arg03
16454     02 14 66 F0 | 	shl	arg02, #2
16458     03 00 00 FF 
1645c     04 E4 85 F1 | 	sub	objptr, ##1540
16460     F2 14 02 F1 | 	add	arg02, objptr
16464     0A 17 02 FB | 	rdlong	arg03, arg02
16468     0C 4E 05 F1 | 	add	fp, #12
1646c     A7 16 62 FC | 	wrlong	arg03, fp
16470                 | ' 
16470                 | ' numpar=compiledline(lineptr_e).result.uresult
16470                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
16470     0C 4E 85 F1 | 	sub	fp, #12
16474     02 16 0E F2 | 	cmp	arg03, #2 wz
16478     47 00 00 FF 
1647c     7C E4 85 F1 | 	sub	objptr, ##36476
16480     3C 00 90 AD |  if_e	jmp	#LR__1810
16484     00 12 06 F6 | 	mov	arg01, #0
16488     50 00 B1 FD | 	call	#__system___getiolock_0540
1648c     FD 12 02 F6 | 	mov	arg01, result1
16490     08 A6 B0 FD | 	call	#__system___lockmem
16494     85 01 00 FF 
16498     BA 14 06 F6 | 	mov	arg02, ##@LR__5481
1649c     00 12 06 F6 | 	mov	arg01, #0
164a0     00 16 06 F6 | 	mov	arg03, #0
164a4     E8 B2 B0 FD | 	call	#__system___basic_print_string
164a8     00 12 06 F6 | 	mov	arg01, #0
164ac     2C 00 B1 FD | 	call	#__system___getiolock_0540
164b0     FD 00 68 FC | 	wrlong	#0, result1
164b4     27 12 06 F6 | 	mov	arg01, #39
164b8     48 70 B0 FD | 	call	#_printerror
164bc     E8 00 90 FD | 	jmp	#LR__1813
164c0                 | LR__1810
164c0     20 56 BF FD | 	call	#_pop
164c4     FF 16 02 F6 | 	mov	arg03, result3
164c8     A7 FA 61 FC | 	wrlong	result1, fp
164cc     04 4E 05 F1 | 	add	fp, #4
164d0     A7 FC 61 FC | 	wrlong	result2, fp
164d4     04 4E 05 F1 | 	add	fp, #4
164d8     A7 16 62 FC | 	wrlong	arg03, fp
164dc     08 4E 85 F1 | 	sub	fp, #8
164e0     A7 12 02 F6 | 	mov	arg01, fp
164e4     C0 F6 BF FD | 	call	#_converttoint
164e8     FD 16 02 F6 | 	mov	arg03, result1
164ec     10 4E 05 F1 | 	add	fp, #16
164f0     A7 16 62 FC | 	wrlong	arg03, fp
164f4     10 4E 85 F1 | 	sub	fp, #16
164f8     E8 55 BF FD | 	call	#_pop
164fc     FF 16 02 F6 | 	mov	arg03, result3
16500     A7 FA 61 FC | 	wrlong	result1, fp
16504     04 4E 05 F1 | 	add	fp, #4
16508     A7 FC 61 FC | 	wrlong	result2, fp
1650c     04 4E 05 F1 | 	add	fp, #4
16510     A7 16 62 FC | 	wrlong	arg03, fp
16514                 | ' t1=pop() : arg=converttoint(t1)
16514                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16514     08 4E 85 F1 | 	sub	fp, #8
16518     2B 16 0E F2 | 	cmp	arg03, #43 wz
1651c     18 00 90 5D |  if_ne	jmp	#LR__1811
16520     A7 12 02 FB | 	rdlong	arg01, fp
16524     5C AE BF FD | 	call	#_convertstring
16528     A7 FA 61 FC | 	wrlong	result1, fp
1652c     08 4E 05 F1 | 	add	fp, #8
16530     A7 3E 68 FC | 	wrlong	#31, fp
16534     08 4E 85 F1 | 	sub	fp, #8
16538                 | LR__1811
16538                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
16538     08 4E 05 F1 | 	add	fp, #8
1653c     A7 16 02 FB | 	rdlong	arg03, fp
16540     08 4E 85 F1 | 	sub	fp, #8
16544     1F 16 0E F2 | 	cmp	arg03, #31 wz
16548     3C 00 90 AD |  if_e	jmp	#LR__1812
1654c     00 12 06 F6 | 	mov	arg01, #0
16550     88 FF B0 FD | 	call	#__system___getiolock_0540
16554     FD 12 02 F6 | 	mov	arg01, result1
16558     40 A5 B0 FD | 	call	#__system___lockmem
1655c     85 01 00 FF 
16560     C2 14 06 F6 | 	mov	arg02, ##@LR__5482
16564     00 12 06 F6 | 	mov	arg01, #0
16568     00 16 06 F6 | 	mov	arg03, #0
1656c     20 B2 B0 FD | 	call	#__system___basic_print_string
16570     00 12 06 F6 | 	mov	arg01, #0
16574     64 FF B0 FD | 	call	#__system___getiolock_0540
16578     FD 00 68 FC | 	wrlong	#0, result1
1657c     0F 12 06 F6 | 	mov	arg01, #15
16580     80 6F B0 FD | 	call	#_printerror
16584     20 00 90 FD | 	jmp	#LR__1813
16588                 | LR__1812
16588     A7 12 02 FB | 	rdlong	arg01, fp
1658c     10 4E 05 F1 | 	add	fp, #16
16590     A7 14 02 FB | 	rdlong	arg02, fp
16594     10 4E 85 F1 | 	sub	fp, #16
16598     7C C5 B0 FD | 	call	#__system__Left_S
1659c     A7 FA 61 FC | 	wrlong	result1, fp
165a0     A7 12 02 F6 | 	mov	arg01, fp
165a4     D4 55 BF FD | 	call	#_push
165a8                 | LR__1813
165a8     A7 F0 03 F6 | 	mov	ptra, fp
165ac     B2 00 A0 FD | 	call	#popregs_
165b0                 | _do_left_ret
165b0     2D 00 64 FD | 	ret
165b4                 | 
165b4                 | ' 
165b4                 | ' sub do_asc
165b4                 | _do_asc
165b4     01 4A 05 F6 | 	mov	COUNT_, #1
165b8     A8 00 A0 FD | 	call	#pushregs_
165bc     14 F0 07 F1 | 	add	ptra, #20
165c0     4A 00 00 FF 
165c4     80 E4 05 F1 | 	add	objptr, ##38016
165c8     F2 1E 02 FB | 	rdlong	local01, objptr
165cc     0F 17 02 F6 | 	mov	arg03, local01
165d0     01 16 66 F0 | 	shl	arg03, #1
165d4     0F 17 02 F1 | 	add	arg03, local01
165d8     02 16 66 F0 | 	shl	arg03, #2
165dc     03 00 00 FF 
165e0     04 E4 85 F1 | 	sub	objptr, ##1540
165e4     F2 16 02 F1 | 	add	arg03, objptr
165e8     0B 17 02 FB | 	rdlong	arg03, arg03
165ec     0C 4E 05 F1 | 	add	fp, #12
165f0     A7 16 62 FC | 	wrlong	arg03, fp
165f4                 | ' 
165f4                 | ' numpar=compiledline(lineptr_e).result.uresult
165f4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
165f4     0C 4E 85 F1 | 	sub	fp, #12
165f8     02 16 16 F2 | 	cmp	arg03, #2 wc
165fc     47 00 00 FF 
16600     7C E4 85 F1 | 	sub	objptr, ##36476
16604     0C 4E 05 C1 |  if_b	add	fp, #12
16608     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1660c     0C 4E 85 C1 |  if_b	sub	fp, #12
16610     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
16614     00 12 06 F6 | 	mov	arg01, #0
16618     C0 FE B0 FD | 	call	#__system___getiolock_0540
1661c     FD 12 02 F6 | 	mov	arg01, result1
16620     78 A4 B0 FD | 	call	#__system___lockmem
16624     85 01 00 FF 
16628     CA 14 06 F6 | 	mov	arg02, ##@LR__5483
1662c     00 12 06 F6 | 	mov	arg01, #0
16630     00 16 06 F6 | 	mov	arg03, #0
16634     58 B1 B0 FD | 	call	#__system___basic_print_string
16638     00 12 06 F6 | 	mov	arg01, #0
1663c     9C FE B0 FD | 	call	#__system___getiolock_0540
16640     FD 00 68 FC | 	wrlong	#0, result1
16644     27 12 06 F6 | 	mov	arg01, #39
16648     B8 6E B0 FD | 	call	#_printerror
1664c     B0 00 90 FD | 	jmp	#LR__1823
16650                 | LR__1820
16650     90 54 BF FD | 	call	#_pop
16654     FF 16 02 F6 | 	mov	arg03, result3
16658     A7 FA 61 FC | 	wrlong	result1, fp
1665c     04 4E 05 F1 | 	add	fp, #4
16660     A7 FC 61 FC | 	wrlong	result2, fp
16664     04 4E 05 F1 | 	add	fp, #4
16668     A7 16 62 FC | 	wrlong	arg03, fp
1666c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1666c     08 4E 85 F1 | 	sub	fp, #8
16670     2B 16 0E F2 | 	cmp	arg03, #43 wz
16674     18 00 90 5D |  if_ne	jmp	#LR__1821
16678     A7 12 02 FB | 	rdlong	arg01, fp
1667c     04 AD BF FD | 	call	#_convertstring
16680     A7 FA 61 FC | 	wrlong	result1, fp
16684     08 4E 05 F1 | 	add	fp, #8
16688     A7 3E 68 FC | 	wrlong	#31, fp
1668c     08 4E 85 F1 | 	sub	fp, #8
16690                 | LR__1821
16690                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
16690     08 4E 05 F1 | 	add	fp, #8
16694     A7 16 02 FB | 	rdlong	arg03, fp
16698     08 4E 85 F1 | 	sub	fp, #8
1669c     1F 16 0E F2 | 	cmp	arg03, #31 wz
166a0     3C 00 90 AD |  if_e	jmp	#LR__1822
166a4     00 12 06 F6 | 	mov	arg01, #0
166a8     30 FE B0 FD | 	call	#__system___getiolock_0540
166ac     FD 12 02 F6 | 	mov	arg01, result1
166b0     E8 A3 B0 FD | 	call	#__system___lockmem
166b4     85 01 00 FF 
166b8     D0 14 06 F6 | 	mov	arg02, ##@LR__5484
166bc     00 12 06 F6 | 	mov	arg01, #0
166c0     00 16 06 F6 | 	mov	arg03, #0
166c4     C8 B0 B0 FD | 	call	#__system___basic_print_string
166c8     00 12 06 F6 | 	mov	arg01, #0
166cc     0C FE B0 FD | 	call	#__system___getiolock_0540
166d0     FD 00 68 FC | 	wrlong	#0, result1
166d4     0F 12 06 F6 | 	mov	arg01, #15
166d8     28 6E B0 FD | 	call	#_printerror
166dc     20 00 90 FD | 	jmp	#LR__1823
166e0                 | LR__1822
166e0     A7 1E 02 FB | 	rdlong	local01, fp
166e4     0F 1F C2 FA | 	rdbyte	local01, local01
166e8     A7 1E 62 FC | 	wrlong	local01, fp
166ec     08 4E 05 F1 | 	add	fp, #8
166f0     A7 38 68 FC | 	wrlong	#28, fp
166f4     08 4E 85 F1 | 	sub	fp, #8
166f8     A7 12 02 F6 | 	mov	arg01, fp
166fc     7C 54 BF FD | 	call	#_push
16700                 | LR__1823
16700     A7 F0 03 F6 | 	mov	ptra, fp
16704     B2 00 A0 FD | 	call	#popregs_
16708                 | _do_asc_ret
16708     2D 00 64 FD | 	ret
1670c                 | 
1670c                 | ' 
1670c                 | ' sub do_len
1670c                 | _do_len
1670c     02 4A 05 F6 | 	mov	COUNT_, #2
16710     A8 00 A0 FD | 	call	#pushregs_
16714     14 F0 07 F1 | 	add	ptra, #20
16718     4A 00 00 FF 
1671c     80 E4 05 F1 | 	add	objptr, ##38016
16720     F2 1E 02 FB | 	rdlong	local01, objptr
16724     0F 17 02 F6 | 	mov	arg03, local01
16728     01 16 66 F0 | 	shl	arg03, #1
1672c     0F 17 02 F1 | 	add	arg03, local01
16730     02 16 66 F0 | 	shl	arg03, #2
16734     03 00 00 FF 
16738     04 E4 85 F1 | 	sub	objptr, ##1540
1673c     F2 16 02 F1 | 	add	arg03, objptr
16740     0B 17 02 FB | 	rdlong	arg03, arg03
16744     0C 4E 05 F1 | 	add	fp, #12
16748     A7 16 62 FC | 	wrlong	arg03, fp
1674c                 | ' 
1674c                 | ' numpar=compiledline(lineptr_e).result.uresult
1674c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1674c     0C 4E 85 F1 | 	sub	fp, #12
16750     02 16 16 F2 | 	cmp	arg03, #2 wc
16754     47 00 00 FF 
16758     7C E4 85 F1 | 	sub	objptr, ##36476
1675c     0C 4E 05 C1 |  if_b	add	fp, #12
16760     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16764     0C 4E 85 C1 |  if_b	sub	fp, #12
16768     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
1676c     00 12 06 F6 | 	mov	arg01, #0
16770     68 FD B0 FD | 	call	#__system___getiolock_0540
16774     FD 12 02 F6 | 	mov	arg01, result1
16778     20 A3 B0 FD | 	call	#__system___lockmem
1677c     85 01 00 FF 
16780     D6 14 06 F6 | 	mov	arg02, ##@LR__5485
16784     00 12 06 F6 | 	mov	arg01, #0
16788     00 16 06 F6 | 	mov	arg03, #0
1678c     00 B0 B0 FD | 	call	#__system___basic_print_string
16790     00 12 06 F6 | 	mov	arg01, #0
16794     44 FD B0 FD | 	call	#__system___getiolock_0540
16798     FD 00 68 FC | 	wrlong	#0, result1
1679c     27 12 06 F6 | 	mov	arg01, #39
167a0     60 6D B0 FD | 	call	#_printerror
167a4     C4 00 90 FD | 	jmp	#LR__1835
167a8                 | LR__1830
167a8     38 53 BF FD | 	call	#_pop
167ac     FF 16 02 F6 | 	mov	arg03, result3
167b0     A7 FA 61 FC | 	wrlong	result1, fp
167b4     04 4E 05 F1 | 	add	fp, #4
167b8     A7 FC 61 FC | 	wrlong	result2, fp
167bc     04 4E 05 F1 | 	add	fp, #4
167c0     A7 16 62 FC | 	wrlong	arg03, fp
167c4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
167c4     08 4E 85 F1 | 	sub	fp, #8
167c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
167cc     18 00 90 5D |  if_ne	jmp	#LR__1831
167d0     A7 12 02 FB | 	rdlong	arg01, fp
167d4     AC AB BF FD | 	call	#_convertstring
167d8     A7 FA 61 FC | 	wrlong	result1, fp
167dc     08 4E 05 F1 | 	add	fp, #8
167e0     A7 3E 68 FC | 	wrlong	#31, fp
167e4     08 4E 85 F1 | 	sub	fp, #8
167e8                 | LR__1831
167e8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
167e8     08 4E 05 F1 | 	add	fp, #8
167ec     A7 16 02 FB | 	rdlong	arg03, fp
167f0     08 4E 85 F1 | 	sub	fp, #8
167f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
167f8     3C 00 90 AD |  if_e	jmp	#LR__1832
167fc     00 12 06 F6 | 	mov	arg01, #0
16800     D8 FC B0 FD | 	call	#__system___getiolock_0540
16804     FD 12 02 F6 | 	mov	arg01, result1
16808     90 A2 B0 FD | 	call	#__system___lockmem
1680c     85 01 00 FF 
16810     DC 14 06 F6 | 	mov	arg02, ##@LR__5486
16814     00 12 06 F6 | 	mov	arg01, #0
16818     00 16 06 F6 | 	mov	arg03, #0
1681c     70 AF B0 FD | 	call	#__system___basic_print_string
16820     00 12 06 F6 | 	mov	arg01, #0
16824     B4 FC B0 FD | 	call	#__system___getiolock_0540
16828     FD 00 68 FC | 	wrlong	#0, result1
1682c     0F 12 06 F6 | 	mov	arg01, #15
16830     D0 6C B0 FD | 	call	#_printerror
16834     34 00 90 FD | 	jmp	#LR__1835
16838                 | LR__1832
16838     A7 12 02 FB | 	rdlong	arg01, fp
1683c     09 21 02 F6 | 	mov	local02, arg01
16840     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
16844                 | LR__1833
16844     10 FB C9 FA | 	rdbyte	result1, local02 wz
16848     01 20 06 51 |  if_ne	add	local02, #1
1684c     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
16850                 | LR__1834
16850     09 21 82 F1 | 	sub	local02, arg01
16854     A7 20 62 FC | 	wrlong	local02, fp
16858     08 4E 05 F1 | 	add	fp, #8
1685c     A7 38 68 FC | 	wrlong	#28, fp
16860     08 4E 85 F1 | 	sub	fp, #8
16864     A7 12 02 F6 | 	mov	arg01, fp
16868     10 53 BF FD | 	call	#_push
1686c                 | LR__1835
1686c     A7 F0 03 F6 | 	mov	ptra, fp
16870     B2 00 A0 FD | 	call	#popregs_
16874                 | _do_len_ret
16874     2D 00 64 FD | 	ret
16878                 | 
16878                 | ' 
16878                 | ' sub do_chr
16878                 | _do_chr
16878     01 4A 05 F6 | 	mov	COUNT_, #1
1687c     A8 00 A0 FD | 	call	#pushregs_
16880     14 F0 07 F1 | 	add	ptra, #20
16884     4A 00 00 FF 
16888     80 E4 05 F1 | 	add	objptr, ##38016
1688c     F2 1E 02 FB | 	rdlong	local01, objptr
16890     0F 17 02 F6 | 	mov	arg03, local01
16894     01 16 66 F0 | 	shl	arg03, #1
16898     0F 17 02 F1 | 	add	arg03, local01
1689c     02 16 66 F0 | 	shl	arg03, #2
168a0     03 00 00 FF 
168a4     04 E4 85 F1 | 	sub	objptr, ##1540
168a8     F2 16 02 F1 | 	add	arg03, objptr
168ac     0B 17 02 FB | 	rdlong	arg03, arg03
168b0     0C 4E 05 F1 | 	add	fp, #12
168b4     A7 16 62 FC | 	wrlong	arg03, fp
168b8                 | ' 
168b8                 | ' numpar=compiledline(lineptr_e).result.uresult
168b8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
168b8     0C 4E 85 F1 | 	sub	fp, #12
168bc     02 16 16 F2 | 	cmp	arg03, #2 wc
168c0     47 00 00 FF 
168c4     7C E4 85 F1 | 	sub	objptr, ##36476
168c8     0C 4E 05 C1 |  if_b	add	fp, #12
168cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
168d0     0C 4E 85 C1 |  if_b	sub	fp, #12
168d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
168d8     00 12 06 F6 | 	mov	arg01, #0
168dc     FC FB B0 FD | 	call	#__system___getiolock_0540
168e0     FD 12 02 F6 | 	mov	arg01, result1
168e4     B4 A1 B0 FD | 	call	#__system___lockmem
168e8     85 01 00 FF 
168ec     E2 14 06 F6 | 	mov	arg02, ##@LR__5487
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     00 16 06 F6 | 	mov	arg03, #0
168f8     94 AE B0 FD | 	call	#__system___basic_print_string
168fc     00 12 06 F6 | 	mov	arg01, #0
16900     D8 FB B0 FD | 	call	#__system___getiolock_0540
16904     FD 00 68 FC | 	wrlong	#0, result1
16908     27 12 06 F6 | 	mov	arg01, #39
1690c     F4 6B B0 FD | 	call	#_printerror
16910     54 00 90 FD | 	jmp	#LR__1841
16914                 | LR__1840
16914     CC 51 BF FD | 	call	#_pop
16918     FF 1E 02 F6 | 	mov	local01, result3
1691c     A7 FA 61 FC | 	wrlong	result1, fp
16920     04 4E 05 F1 | 	add	fp, #4
16924     A7 FC 61 FC | 	wrlong	result2, fp
16928     04 4E 05 F1 | 	add	fp, #4
1692c     A7 1E 62 FC | 	wrlong	local01, fp
16930     08 4E 85 F1 | 	sub	fp, #8
16934     A7 12 02 F6 | 	mov	arg01, fp
16938     6C F2 BF FD | 	call	#_converttoint
1693c     10 4E 05 F1 | 	add	fp, #16
16940     A7 FA 61 FC | 	wrlong	result1, fp
16944     FD 12 02 F6 | 	mov	arg01, result1
16948     10 4E 85 F1 | 	sub	fp, #16
1694c     8C C3 B0 FD | 	call	#__system__Chr_S
16950     A7 FA 61 FC | 	wrlong	result1, fp
16954     08 4E 05 F1 | 	add	fp, #8
16958     A7 3E 68 FC | 	wrlong	#31, fp
1695c     08 4E 85 F1 | 	sub	fp, #8
16960     A7 12 02 F6 | 	mov	arg01, fp
16964     14 52 BF FD | 	call	#_push
16968                 | LR__1841
16968     A7 F0 03 F6 | 	mov	ptra, fp
1696c     B2 00 A0 FD | 	call	#popregs_
16970                 | _do_chr_ret
16970     2D 00 64 FD | 	ret
16974                 | 
16974                 | ' 
16974                 | ' sub do_val
16974                 | _do_val
16974     03 4A 05 F6 | 	mov	COUNT_, #3
16978     A8 00 A0 FD | 	call	#pushregs_
1697c     20 F0 07 F1 | 	add	ptra, #32
16980     4A 00 00 FF 
16984     80 E4 05 F1 | 	add	objptr, ##38016
16988     F2 16 02 FB | 	rdlong	arg03, objptr
1698c     0B 1F 02 F6 | 	mov	local01, arg03
16990     01 1E 66 F0 | 	shl	local01, #1
16994     0B 1F 02 F1 | 	add	local01, arg03
16998     02 1E 66 F0 | 	shl	local01, #2
1699c     03 00 00 FF 
169a0     04 E4 85 F1 | 	sub	objptr, ##1540
169a4     F2 1E 02 F1 | 	add	local01, objptr
169a8     0F 17 02 FB | 	rdlong	arg03, local01
169ac     0C 4E 05 F1 | 	add	fp, #12
169b0     A7 16 62 FC | 	wrlong	arg03, fp
169b4                 | ' 
169b4                 | ' numpar=compiledline(lineptr_e).result.uresult
169b4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
169b4     0C 4E 85 F1 | 	sub	fp, #12
169b8     02 16 16 F2 | 	cmp	arg03, #2 wc
169bc     47 00 00 FF 
169c0     7C E4 85 F1 | 	sub	objptr, ##36476
169c4     0C 4E 05 C1 |  if_b	add	fp, #12
169c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
169cc     0C 4E 85 C1 |  if_b	sub	fp, #12
169d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
169d4     00 12 06 F6 | 	mov	arg01, #0
169d8     00 FB B0 FD | 	call	#__system___getiolock_0540
169dc     FD 12 02 F6 | 	mov	arg01, result1
169e0     B8 A0 B0 FD | 	call	#__system___lockmem
169e4     85 01 00 FF 
169e8     E9 14 06 F6 | 	mov	arg02, ##@LR__5488
169ec     00 12 06 F6 | 	mov	arg01, #0
169f0     00 16 06 F6 | 	mov	arg03, #0
169f4     98 AD B0 FD | 	call	#__system___basic_print_string
169f8     00 12 06 F6 | 	mov	arg01, #0
169fc     DC FA B0 FD | 	call	#__system___getiolock_0540
16a00     FD 00 68 FC | 	wrlong	#0, result1
16a04     27 12 06 F6 | 	mov	arg01, #39
16a08     F8 6A B0 FD | 	call	#_printerror
16a0c     5C 02 90 FD | 	jmp	#LR__1863
16a10                 | LR__1850
16a10     D0 50 BF FD | 	call	#_pop
16a14     FF 16 02 F6 | 	mov	arg03, result3
16a18     A7 FA 61 FC | 	wrlong	result1, fp
16a1c     04 4E 05 F1 | 	add	fp, #4
16a20     A7 FC 61 FC | 	wrlong	result2, fp
16a24     04 4E 05 F1 | 	add	fp, #4
16a28     A7 16 62 FC | 	wrlong	arg03, fp
16a2c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16a2c     08 4E 85 F1 | 	sub	fp, #8
16a30     2B 16 0E F2 | 	cmp	arg03, #43 wz
16a34     18 00 90 5D |  if_ne	jmp	#LR__1851
16a38     A7 12 02 FB | 	rdlong	arg01, fp
16a3c     44 A9 BF FD | 	call	#_convertstring
16a40     A7 FA 61 FC | 	wrlong	result1, fp
16a44     08 4E 05 F1 | 	add	fp, #8
16a48     A7 3E 68 FC | 	wrlong	#31, fp
16a4c     08 4E 85 F1 | 	sub	fp, #8
16a50                 | LR__1851
16a50                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16a50     08 4E 05 F1 | 	add	fp, #8
16a54     A7 16 02 FB | 	rdlong	arg03, fp
16a58     08 4E 85 F1 | 	sub	fp, #8
16a5c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16a60     3C 00 90 AD |  if_e	jmp	#LR__1852
16a64     00 12 06 F6 | 	mov	arg01, #0
16a68     70 FA B0 FD | 	call	#__system___getiolock_0540
16a6c     FD 12 02 F6 | 	mov	arg01, result1
16a70     28 A0 B0 FD | 	call	#__system___lockmem
16a74     85 01 00 FF 
16a78     EF 14 06 F6 | 	mov	arg02, ##@LR__5489
16a7c     00 12 06 F6 | 	mov	arg01, #0
16a80     00 16 06 F6 | 	mov	arg03, #0
16a84     08 AD B0 FD | 	call	#__system___basic_print_string
16a88     00 12 06 F6 | 	mov	arg01, #0
16a8c     4C FA B0 FD | 	call	#__system___getiolock_0540
16a90     FD 00 68 FC | 	wrlong	#0, result1
16a94     0F 12 06 F6 | 	mov	arg01, #15
16a98     68 6A B0 FD | 	call	#_printerror
16a9c     CC 01 90 FD | 	jmp	#LR__1863
16aa0                 | LR__1852
16aa0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16aa0     A7 12 02 FB | 	rdlong	arg01, fp
16aa4     01 14 06 F6 | 	mov	arg02, #1
16aa8     6C C0 B0 FD | 	call	#__system__Left_S
16aac     FD 12 02 F6 | 	mov	arg01, result1
16ab0     85 01 00 FF 
16ab4     F5 14 06 F6 | 	mov	arg02, ##@LR__5490
16ab8     08 A0 B0 FD | 	call	#__system___string_cmp
16abc     00 FA 0D F2 | 	cmp	result1, #0 wz
16ac0     48 00 90 5D |  if_ne	jmp	#LR__1855
16ac4     85 01 00 FF 
16ac8     F7 1E 06 F6 | 	mov	local01, ##@LR__5491
16acc     A7 16 02 FB | 	rdlong	arg03, fp
16ad0     0B 13 02 F6 | 	mov	arg01, arg03
16ad4     09 21 02 F6 | 	mov	local02, arg01
16ad8     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
16adc                 | LR__1853
16adc     10 FB C9 FA | 	rdbyte	result1, local02 wz
16ae0     01 20 06 51 |  if_ne	add	local02, #1
16ae4     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
16ae8                 | LR__1854
16ae8     09 21 82 F1 | 	sub	local02, arg01
16aec     10 15 02 F6 | 	mov	arg02, local02
16af0     01 14 86 F1 | 	sub	arg02, #1
16af4     0B 13 02 F6 | 	mov	arg01, arg03
16af8     A4 C0 B0 FD | 	call	#__system__Right_S
16afc     FD 14 02 F6 | 	mov	arg02, result1
16b00     0F 13 02 F6 | 	mov	arg01, local01
16b04     F0 9F B0 FD | 	call	#__system___string_concat
16b08     A7 FA 61 FC | 	wrlong	result1, fp
16b0c                 | LR__1855
16b0c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16b0c     A7 12 02 FB | 	rdlong	arg01, fp
16b10     01 14 06 F6 | 	mov	arg02, #1
16b14     00 C0 B0 FD | 	call	#__system__Left_S
16b18     FD 12 02 F6 | 	mov	arg01, result1
16b1c     85 01 00 FF 
16b20     FA 14 06 F6 | 	mov	arg02, ##@LR__5492
16b24     9C 9F B0 FD | 	call	#__system___string_cmp
16b28     00 FA 0D F2 | 	cmp	result1, #0 wz
16b2c     48 00 90 5D |  if_ne	jmp	#LR__1858
16b30     85 01 00 FF 
16b34     FC 1E 06 F6 | 	mov	local01, ##@LR__5493
16b38     A7 16 02 FB | 	rdlong	arg03, fp
16b3c     0B 13 02 F6 | 	mov	arg01, arg03
16b40     09 21 02 F6 | 	mov	local02, arg01
16b44     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
16b48                 | LR__1856
16b48     10 FB C9 FA | 	rdbyte	result1, local02 wz
16b4c     01 20 06 51 |  if_ne	add	local02, #1
16b50     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
16b54                 | LR__1857
16b54     09 21 82 F1 | 	sub	local02, arg01
16b58     10 15 02 F6 | 	mov	arg02, local02
16b5c     01 14 86 F1 | 	sub	arg02, #1
16b60     0B 13 02 F6 | 	mov	arg01, arg03
16b64     38 C0 B0 FD | 	call	#__system__Right_S
16b68     FD 14 02 F6 | 	mov	arg02, result1
16b6c     0F 13 02 F6 | 	mov	arg01, local01
16b70     84 9F B0 FD | 	call	#__system___string_concat
16b74     A7 FA 61 FC | 	wrlong	result1, fp
16b78                 | LR__1858
16b78     A7 12 02 FB | 	rdlong	arg01, fp
16b7c     B8 D2 B0 FD | 	call	#__system____builtin_atof
16b80     1C 4E 05 F1 | 	add	fp, #28
16b84     A7 FA 61 FC | 	wrlong	result1, fp
16b88     1C 4E 85 F1 | 	sub	fp, #28
16b8c     A7 12 02 FB | 	rdlong	arg01, fp
16b90     00 14 06 F6 | 	mov	arg02, #0
16b94     30 D1 B0 FD | 	call	#__system____builtin_atoi
16b98     18 4E 05 F1 | 	add	fp, #24
16b9c     A7 FA 61 FC | 	wrlong	result1, fp
16ba0                 | ' fval=val(t1.result.sresult)
16ba0                 | ' ival=val%(t1.result.sresult)
16ba0                 | ' if fval=ival then
16ba0     04 4E 05 F1 | 	add	fp, #4
16ba4     A7 1E 02 FB | 	rdlong	local01, fp
16ba8     1C 4E 85 F1 | 	sub	fp, #28
16bac     FD 12 52 F6 | 	abs	arg01, result1 wc
16bb0     1F 22 C6 C9 |  if_b	decod	local03, #31
16bb4     00 22 06 36 |  if_ae	mov	local03, #0
16bb8     90 C6 B0 FD | 	call	#__system___float_fromuns
16bbc     11 FB 61 F5 | 	xor	result1, local03
16bc0     FD 14 02 F6 | 	mov	arg02, result1
16bc4     0F 13 02 F6 | 	mov	arg01, local01
16bc8     01 16 06 F6 | 	mov	arg03, #1
16bcc     B4 CE B0 FD | 	call	#__system___float_cmp
16bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
16bd4     20 00 90 5D |  if_ne	jmp	#LR__1859
16bd8     18 4E 05 F1 | 	add	fp, #24
16bdc     A7 1E 02 FB | 	rdlong	local01, fp
16be0     18 4E 85 F1 | 	sub	fp, #24
16be4     A7 1E 62 FC | 	wrlong	local01, fp
16be8     08 4E 05 F1 | 	add	fp, #8
16bec     A7 38 68 FC | 	wrlong	#28, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     6C 00 90 FD | 	jmp	#LR__1862
16bf8                 | LR__1859
16bf8                 | '   if fval=0 andalso ival<>0 then
16bf8     1C 4E 05 F1 | 	add	fp, #28
16bfc     A7 12 02 FB | 	rdlong	arg01, fp
16c00     1C 4E 85 F1 | 	sub	fp, #28
16c04     00 14 06 F6 | 	mov	arg02, #0
16c08     01 16 06 F6 | 	mov	arg03, #1
16c0c     74 CE B0 FD | 	call	#__system___float_cmp
16c10     00 FA 0D F2 | 	cmp	result1, #0 wz
16c14     30 00 90 5D |  if_ne	jmp	#LR__1860
16c18     18 4E 05 F1 | 	add	fp, #24
16c1c     A7 1E 0A FB | 	rdlong	local01, fp wz
16c20     18 4E 85 F1 | 	sub	fp, #24
16c24     20 00 90 AD |  if_e	jmp	#LR__1860
16c28     18 4E 05 F1 | 	add	fp, #24
16c2c     A7 1E 02 FB | 	rdlong	local01, fp
16c30     18 4E 85 F1 | 	sub	fp, #24
16c34     A7 1E 62 FC | 	wrlong	local01, fp
16c38     08 4E 05 F1 | 	add	fp, #8
16c3c     A7 38 68 FC | 	wrlong	#28, fp
16c40     08 4E 85 F1 | 	sub	fp, #8
16c44     1C 00 90 FD | 	jmp	#LR__1861
16c48                 | LR__1860
16c48     1C 4E 05 F1 | 	add	fp, #28
16c4c     A7 1E 02 FB | 	rdlong	local01, fp
16c50     1C 4E 85 F1 | 	sub	fp, #28
16c54     A7 1E 62 FC | 	wrlong	local01, fp
16c58     08 4E 05 F1 | 	add	fp, #8
16c5c     A7 3C 68 FC | 	wrlong	#30, fp
16c60     08 4E 85 F1 | 	sub	fp, #8
16c64                 | LR__1861
16c64                 | LR__1862
16c64     A7 12 02 F6 | 	mov	arg01, fp
16c68     10 4F BF FD | 	call	#_push
16c6c                 | LR__1863
16c6c     A7 F0 03 F6 | 	mov	ptra, fp
16c70     B2 00 A0 FD | 	call	#popregs_
16c74                 | _do_val_ret
16c74     2D 00 64 FD | 	ret
16c78                 | 
16c78                 | ' 
16c78                 | ' 
16c78                 | ' sub do_hex
16c78                 | _do_hex
16c78     01 4A 05 F6 | 	mov	COUNT_, #1
16c7c     A8 00 A0 FD | 	call	#pushregs_
16c80     18 F0 07 F1 | 	add	ptra, #24
16c84     4A 00 00 FF 
16c88     80 E4 05 F1 | 	add	objptr, ##38016
16c8c     F2 1E 02 FB | 	rdlong	local01, objptr
16c90     0F 17 02 F6 | 	mov	arg03, local01
16c94     01 16 66 F0 | 	shl	arg03, #1
16c98     0F 17 02 F1 | 	add	arg03, local01
16c9c     02 16 66 F0 | 	shl	arg03, #2
16ca0     03 00 00 FF 
16ca4     04 E4 85 F1 | 	sub	objptr, ##1540
16ca8     F2 16 02 F1 | 	add	arg03, objptr
16cac     0B 17 02 FB | 	rdlong	arg03, arg03
16cb0     0C 4E 05 F1 | 	add	fp, #12
16cb4     A7 16 62 FC | 	wrlong	arg03, fp
16cb8                 | ' 
16cb8                 | ' numpar=compiledline(lineptr_e).result.uresult
16cb8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16cb8     0C 4E 85 F1 | 	sub	fp, #12
16cbc     03 16 16 F2 | 	cmp	arg03, #3 wc
16cc0     47 00 00 FF 
16cc4     7C E4 85 F1 | 	sub	objptr, ##36476
16cc8     0C 4E 05 C1 |  if_b	add	fp, #12
16ccc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16cd0     0C 4E 85 C1 |  if_b	sub	fp, #12
16cd4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16cd8     00 12 06 F6 | 	mov	arg01, #0
16cdc     FC F7 B0 FD | 	call	#__system___getiolock_0540
16ce0     FD 12 02 F6 | 	mov	arg01, result1
16ce4     B4 9D B0 FD | 	call	#__system___lockmem
16ce8     85 01 00 FF 
16cec     FF 14 06 F6 | 	mov	arg02, ##@LR__5494
16cf0     00 12 06 F6 | 	mov	arg01, #0
16cf4     00 16 06 F6 | 	mov	arg03, #0
16cf8     94 AA B0 FD | 	call	#__system___basic_print_string
16cfc     00 12 06 F6 | 	mov	arg01, #0
16d00     D8 F7 B0 FD | 	call	#__system___getiolock_0540
16d04     FD 00 68 FC | 	wrlong	#0, result1
16d08     27 12 06 F6 | 	mov	arg01, #39
16d0c     F4 67 B0 FD | 	call	#_printerror
16d10     B8 00 90 FD | 	jmp	#LR__1873
16d14                 | LR__1870
16d14                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16d14     0C 4E 05 F1 | 	add	fp, #12
16d18     A7 1E 02 FB | 	rdlong	local01, fp
16d1c     0C 4E 85 F1 | 	sub	fp, #12
16d20     02 1E 0E F2 | 	cmp	local01, #2 wz
16d24     38 00 90 5D |  if_ne	jmp	#LR__1871
16d28     B8 4D BF FD | 	call	#_pop
16d2c     FF 1E 02 F6 | 	mov	local01, result3
16d30     A7 FA 61 FC | 	wrlong	result1, fp
16d34     04 4E 05 F1 | 	add	fp, #4
16d38     A7 FC 61 FC | 	wrlong	result2, fp
16d3c     04 4E 05 F1 | 	add	fp, #4
16d40     A7 1E 62 FC | 	wrlong	local01, fp
16d44     08 4E 85 F1 | 	sub	fp, #8
16d48     A7 12 02 F6 | 	mov	arg01, fp
16d4c     58 EE BF FD | 	call	#_converttoint
16d50     14 4E 05 F1 | 	add	fp, #20
16d54     A7 FA 61 FC | 	wrlong	result1, fp
16d58     14 4E 85 F1 | 	sub	fp, #20
16d5c     0C 00 90 FD | 	jmp	#LR__1872
16d60                 | LR__1871
16d60     14 4E 05 F1 | 	add	fp, #20
16d64     A7 10 68 FC | 	wrlong	#8, fp
16d68     14 4E 85 F1 | 	sub	fp, #20
16d6c                 | LR__1872
16d6c     74 4D BF FD | 	call	#_pop
16d70     FF 1E 02 F6 | 	mov	local01, result3
16d74     A7 FA 61 FC | 	wrlong	result1, fp
16d78     04 4E 05 F1 | 	add	fp, #4
16d7c     A7 FC 61 FC | 	wrlong	result2, fp
16d80     04 4E 05 F1 | 	add	fp, #4
16d84     A7 1E 62 FC | 	wrlong	local01, fp
16d88     08 4E 85 F1 | 	sub	fp, #8
16d8c     A7 12 02 F6 | 	mov	arg01, fp
16d90     14 EE BF FD | 	call	#_converttoint
16d94     10 4E 05 F1 | 	add	fp, #16
16d98     A7 FA 61 FC | 	wrlong	result1, fp
16d9c     FD 12 02 F6 | 	mov	arg01, result1
16da0     04 4E 05 F1 | 	add	fp, #4
16da4     A7 14 02 FB | 	rdlong	arg02, fp
16da8     14 4E 85 F1 | 	sub	fp, #20
16dac     10 16 06 F6 | 	mov	arg03, #16
16db0     B8 BF B0 FD | 	call	#__system__Number_S
16db4     A7 FA 61 FC | 	wrlong	result1, fp
16db8     08 4E 05 F1 | 	add	fp, #8
16dbc     A7 3E 68 FC | 	wrlong	#31, fp
16dc0     08 4E 85 F1 | 	sub	fp, #8
16dc4     A7 12 02 F6 | 	mov	arg01, fp
16dc8     B0 4D BF FD | 	call	#_push
16dcc                 | LR__1873
16dcc     A7 F0 03 F6 | 	mov	ptra, fp
16dd0     B2 00 A0 FD | 	call	#popregs_
16dd4                 | _do_hex_ret
16dd4     2D 00 64 FD | 	ret
16dd8                 | 
16dd8                 | ' 
16dd8                 | ' sub do_bin
16dd8                 | _do_bin
16dd8     01 4A 05 F6 | 	mov	COUNT_, #1
16ddc     A8 00 A0 FD | 	call	#pushregs_
16de0     18 F0 07 F1 | 	add	ptra, #24
16de4     4A 00 00 FF 
16de8     80 E4 05 F1 | 	add	objptr, ##38016
16dec     F2 1E 02 FB | 	rdlong	local01, objptr
16df0     0F 17 02 F6 | 	mov	arg03, local01
16df4     01 16 66 F0 | 	shl	arg03, #1
16df8     0F 17 02 F1 | 	add	arg03, local01
16dfc     02 16 66 F0 | 	shl	arg03, #2
16e00     03 00 00 FF 
16e04     04 E4 85 F1 | 	sub	objptr, ##1540
16e08     F2 16 02 F1 | 	add	arg03, objptr
16e0c     0B 17 02 FB | 	rdlong	arg03, arg03
16e10     0C 4E 05 F1 | 	add	fp, #12
16e14     A7 16 62 FC | 	wrlong	arg03, fp
16e18                 | ' 
16e18                 | ' numpar=compiledline(lineptr_e).result.uresult
16e18                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16e18     0C 4E 85 F1 | 	sub	fp, #12
16e1c     03 16 16 F2 | 	cmp	arg03, #3 wc
16e20     47 00 00 FF 
16e24     7C E4 85 F1 | 	sub	objptr, ##36476
16e28     0C 4E 05 C1 |  if_b	add	fp, #12
16e2c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e30     0C 4E 85 C1 |  if_b	sub	fp, #12
16e34     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16e38     00 12 06 F6 | 	mov	arg01, #0
16e3c     9C F6 B0 FD | 	call	#__system___getiolock_0540
16e40     FD 12 02 F6 | 	mov	arg01, result1
16e44     54 9C B0 FD | 	call	#__system___lockmem
16e48     85 01 00 FF 
16e4c     06 15 06 F6 | 	mov	arg02, ##@LR__5495
16e50     00 12 06 F6 | 	mov	arg01, #0
16e54     00 16 06 F6 | 	mov	arg03, #0
16e58     34 A9 B0 FD | 	call	#__system___basic_print_string
16e5c     00 12 06 F6 | 	mov	arg01, #0
16e60     78 F6 B0 FD | 	call	#__system___getiolock_0540
16e64     FD 00 68 FC | 	wrlong	#0, result1
16e68     27 12 06 F6 | 	mov	arg01, #39
16e6c     94 66 B0 FD | 	call	#_printerror
16e70     B8 00 90 FD | 	jmp	#LR__1883
16e74                 | LR__1880
16e74                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16e74     0C 4E 05 F1 | 	add	fp, #12
16e78     A7 1E 02 FB | 	rdlong	local01, fp
16e7c     0C 4E 85 F1 | 	sub	fp, #12
16e80     02 1E 0E F2 | 	cmp	local01, #2 wz
16e84     38 00 90 5D |  if_ne	jmp	#LR__1881
16e88     58 4C BF FD | 	call	#_pop
16e8c     FF 1E 02 F6 | 	mov	local01, result3
16e90     A7 FA 61 FC | 	wrlong	result1, fp
16e94     04 4E 05 F1 | 	add	fp, #4
16e98     A7 FC 61 FC | 	wrlong	result2, fp
16e9c     04 4E 05 F1 | 	add	fp, #4
16ea0     A7 1E 62 FC | 	wrlong	local01, fp
16ea4     08 4E 85 F1 | 	sub	fp, #8
16ea8     A7 12 02 F6 | 	mov	arg01, fp
16eac     F8 EC BF FD | 	call	#_converttoint
16eb0     14 4E 05 F1 | 	add	fp, #20
16eb4     A7 FA 61 FC | 	wrlong	result1, fp
16eb8     14 4E 85 F1 | 	sub	fp, #20
16ebc     0C 00 90 FD | 	jmp	#LR__1882
16ec0                 | LR__1881
16ec0     14 4E 05 F1 | 	add	fp, #20
16ec4     A7 00 68 FC | 	wrlong	#0, fp
16ec8     14 4E 85 F1 | 	sub	fp, #20
16ecc                 | LR__1882
16ecc     14 4C BF FD | 	call	#_pop
16ed0     FF 1E 02 F6 | 	mov	local01, result3
16ed4     A7 FA 61 FC | 	wrlong	result1, fp
16ed8     04 4E 05 F1 | 	add	fp, #4
16edc     A7 FC 61 FC | 	wrlong	result2, fp
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 1E 62 FC | 	wrlong	local01, fp
16ee8     08 4E 85 F1 | 	sub	fp, #8
16eec     A7 12 02 F6 | 	mov	arg01, fp
16ef0     B4 EC BF FD | 	call	#_converttoint
16ef4     10 4E 05 F1 | 	add	fp, #16
16ef8     A7 FA 61 FC | 	wrlong	result1, fp
16efc     FD 12 02 F6 | 	mov	arg01, result1
16f00     04 4E 05 F1 | 	add	fp, #4
16f04     A7 14 02 FB | 	rdlong	arg02, fp
16f08     14 4E 85 F1 | 	sub	fp, #20
16f0c     02 16 06 F6 | 	mov	arg03, #2
16f10     58 BE B0 FD | 	call	#__system__Number_S
16f14     A7 FA 61 FC | 	wrlong	result1, fp
16f18     08 4E 05 F1 | 	add	fp, #8
16f1c     A7 3E 68 FC | 	wrlong	#31, fp
16f20     08 4E 85 F1 | 	sub	fp, #8
16f24     A7 12 02 F6 | 	mov	arg01, fp
16f28     50 4C BF FD | 	call	#_push
16f2c                 | LR__1883
16f2c     A7 F0 03 F6 | 	mov	ptra, fp
16f30     B2 00 A0 FD | 	call	#popregs_
16f34                 | _do_bin_ret
16f34     2D 00 64 FD | 	ret
16f38                 | 
16f38                 | ' 
16f38                 | ' sub do_cos
16f38                 | _do_cos
16f38     01 4A 05 F6 | 	mov	COUNT_, #1
16f3c     A8 00 A0 FD | 	call	#pushregs_
16f40     10 F0 07 F1 | 	add	ptra, #16
16f44     4A 00 00 FF 
16f48     80 E4 05 F1 | 	add	objptr, ##38016
16f4c     F2 1E 02 FB | 	rdlong	local01, objptr
16f50     0F 17 02 F6 | 	mov	arg03, local01
16f54     01 16 66 F0 | 	shl	arg03, #1
16f58     0F 17 02 F1 | 	add	arg03, local01
16f5c     02 16 66 F0 | 	shl	arg03, #2
16f60     03 00 00 FF 
16f64     04 E4 85 F1 | 	sub	objptr, ##1540
16f68     F2 16 02 F1 | 	add	arg03, objptr
16f6c     0B 17 02 FB | 	rdlong	arg03, arg03
16f70     0C 4E 05 F1 | 	add	fp, #12
16f74     A7 16 62 FC | 	wrlong	arg03, fp
16f78                 | ' 
16f78                 | ' numpar=compiledline(lineptr_e).result.uresult
16f78                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16f78     0C 4E 85 F1 | 	sub	fp, #12
16f7c     02 16 16 F2 | 	cmp	arg03, #2 wc
16f80     47 00 00 FF 
16f84     7C E4 85 F1 | 	sub	objptr, ##36476
16f88     0C 4E 05 C1 |  if_b	add	fp, #12
16f8c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16f90     0C 4E 85 C1 |  if_b	sub	fp, #12
16f94     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16f98     00 12 06 F6 | 	mov	arg01, #0
16f9c     3C F5 B0 FD | 	call	#__system___getiolock_0540
16fa0     FD 12 02 F6 | 	mov	arg01, result1
16fa4     F4 9A B0 FD | 	call	#__system___lockmem
16fa8     85 01 00 FF 
16fac     0D 15 06 F6 | 	mov	arg02, ##@LR__5496
16fb0     00 12 06 F6 | 	mov	arg01, #0
16fb4     00 16 06 F6 | 	mov	arg03, #0
16fb8     D4 A7 B0 FD | 	call	#__system___basic_print_string
16fbc     00 12 06 F6 | 	mov	arg01, #0
16fc0     18 F5 B0 FD | 	call	#__system___getiolock_0540
16fc4     FD 00 68 FC | 	wrlong	#0, result1
16fc8     27 12 06 F6 | 	mov	arg01, #39
16fcc     34 65 B0 FD | 	call	#_printerror
16fd0     78 00 90 FD | 	jmp	#LR__1891
16fd4                 | LR__1890
16fd4     0C 4B BF FD | 	call	#_pop
16fd8     A7 FA 61 FC | 	wrlong	result1, fp
16fdc     04 4E 05 F1 | 	add	fp, #4
16fe0     A7 FC 61 FC | 	wrlong	result2, fp
16fe4     04 4E 05 F1 | 	add	fp, #4
16fe8     A7 FE 61 FC | 	wrlong	result3, fp
16fec     08 4E 85 F1 | 	sub	fp, #8
16ff0     51 00 00 FF 
16ff4     B8 E5 05 F1 | 	add	objptr, ##41912
16ff8     F2 1E 02 FB | 	rdlong	local01, objptr
16ffc     51 00 00 FF 
17000     B8 E5 85 F1 | 	sub	objptr, ##41912
17004     A7 12 02 F6 | 	mov	arg01, fp
17008     58 EC BF FD | 	call	#_converttofloat
1700c     FD 14 02 F6 | 	mov	arg02, result1
17010     0F 13 02 F6 | 	mov	arg01, local01
17014     38 C6 B0 FD | 	call	#__system___float_mul
17018     FD 14 02 F6 | 	mov	arg02, result1
1701c     87 E4 1F FF 
17020     DB 13 06 F6 | 	mov	arg01, ##1070141403
17024     1F 14 E6 F4 | 	bitnot	arg02, #31
17028     54 C2 B0 FD | 	call	#__system___float_add
1702c     FD 12 02 F6 | 	mov	arg01, result1
17030     58 CF B0 FD | 	call	#__system____builtin_sinf
17034     A7 FA 61 FC | 	wrlong	result1, fp
17038     08 4E 05 F1 | 	add	fp, #8
1703c     A7 3C 68 FC | 	wrlong	#30, fp
17040     08 4E 85 F1 | 	sub	fp, #8
17044     A7 12 02 F6 | 	mov	arg01, fp
17048     30 4B BF FD | 	call	#_push
1704c                 | LR__1891
1704c     A7 F0 03 F6 | 	mov	ptra, fp
17050     B2 00 A0 FD | 	call	#popregs_
17054                 | _do_cos_ret
17054     2D 00 64 FD | 	ret
17058                 | 
17058                 | ' 
17058                 | ' sub do_tan
17058                 | _do_tan
17058     01 4A 05 F6 | 	mov	COUNT_, #1
1705c     A8 00 A0 FD | 	call	#pushregs_
17060     10 F0 07 F1 | 	add	ptra, #16
17064     4A 00 00 FF 
17068     80 E4 05 F1 | 	add	objptr, ##38016
1706c     F2 1E 02 FB | 	rdlong	local01, objptr
17070     0F 17 02 F6 | 	mov	arg03, local01
17074     01 16 66 F0 | 	shl	arg03, #1
17078     0F 17 02 F1 | 	add	arg03, local01
1707c     02 16 66 F0 | 	shl	arg03, #2
17080     03 00 00 FF 
17084     04 E4 85 F1 | 	sub	objptr, ##1540
17088     F2 16 02 F1 | 	add	arg03, objptr
1708c     0B 17 02 FB | 	rdlong	arg03, arg03
17090     0C 4E 05 F1 | 	add	fp, #12
17094     A7 16 62 FC | 	wrlong	arg03, fp
17098                 | ' 
17098                 | ' numpar=compiledline(lineptr_e).result.uresult
17098                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17098     0C 4E 85 F1 | 	sub	fp, #12
1709c     02 16 16 F2 | 	cmp	arg03, #2 wc
170a0     47 00 00 FF 
170a4     7C E4 85 F1 | 	sub	objptr, ##36476
170a8     0C 4E 05 C1 |  if_b	add	fp, #12
170ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
170b0     0C 4E 85 C1 |  if_b	sub	fp, #12
170b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
170b8     00 12 06 F6 | 	mov	arg01, #0
170bc     1C F4 B0 FD | 	call	#__system___getiolock_0540
170c0     FD 12 02 F6 | 	mov	arg01, result1
170c4     D4 99 B0 FD | 	call	#__system___lockmem
170c8     85 01 00 FF 
170cc     13 15 06 F6 | 	mov	arg02, ##@LR__5497
170d0     00 12 06 F6 | 	mov	arg01, #0
170d4     00 16 06 F6 | 	mov	arg03, #0
170d8     B4 A6 B0 FD | 	call	#__system___basic_print_string
170dc     00 12 06 F6 | 	mov	arg01, #0
170e0     F8 F3 B0 FD | 	call	#__system___getiolock_0540
170e4     FD 00 68 FC | 	wrlong	#0, result1
170e8     27 12 06 F6 | 	mov	arg01, #39
170ec     14 64 B0 FD | 	call	#_printerror
170f0     64 00 90 FD | 	jmp	#LR__1901
170f4                 | LR__1900
170f4     EC 49 BF FD | 	call	#_pop
170f8     A7 FA 61 FC | 	wrlong	result1, fp
170fc     04 4E 05 F1 | 	add	fp, #4
17100     A7 FC 61 FC | 	wrlong	result2, fp
17104     04 4E 05 F1 | 	add	fp, #4
17108     A7 FE 61 FC | 	wrlong	result3, fp
1710c     08 4E 85 F1 | 	sub	fp, #8
17110     51 00 00 FF 
17114     B8 E5 05 F1 | 	add	objptr, ##41912
17118     F2 1E 02 FB | 	rdlong	local01, objptr
1711c     51 00 00 FF 
17120     B8 E5 85 F1 | 	sub	objptr, ##41912
17124     A7 12 02 F6 | 	mov	arg01, fp
17128     38 EB BF FD | 	call	#_converttofloat
1712c     FD 14 02 F6 | 	mov	arg02, result1
17130     0F 13 02 F6 | 	mov	arg01, local01
17134     18 C5 B0 FD | 	call	#__system___float_mul
17138     FD 12 02 F6 | 	mov	arg01, result1
1713c     98 CF B0 FD | 	call	#__system____builtin_tanf
17140     A7 FA 61 FC | 	wrlong	result1, fp
17144     08 4E 05 F1 | 	add	fp, #8
17148     A7 3C 68 FC | 	wrlong	#30, fp
1714c     08 4E 85 F1 | 	sub	fp, #8
17150     A7 12 02 F6 | 	mov	arg01, fp
17154     24 4A BF FD | 	call	#_push
17158                 | LR__1901
17158     A7 F0 03 F6 | 	mov	ptra, fp
1715c     B2 00 A0 FD | 	call	#popregs_
17160                 | _do_tan_ret
17160     2D 00 64 FD | 	ret
17164                 | 
17164                 | ' 
17164                 | ' sub do_asin
17164                 | _do_asin
17164     01 4A 05 F6 | 	mov	COUNT_, #1
17168     A8 00 A0 FD | 	call	#pushregs_
1716c     10 F0 07 F1 | 	add	ptra, #16
17170     4A 00 00 FF 
17174     80 E4 05 F1 | 	add	objptr, ##38016
17178     F2 1E 02 FB | 	rdlong	local01, objptr
1717c     0F 17 02 F6 | 	mov	arg03, local01
17180     01 16 66 F0 | 	shl	arg03, #1
17184     0F 17 02 F1 | 	add	arg03, local01
17188     02 16 66 F0 | 	shl	arg03, #2
1718c     03 00 00 FF 
17190     04 E4 85 F1 | 	sub	objptr, ##1540
17194     F2 16 02 F1 | 	add	arg03, objptr
17198     0B 17 02 FB | 	rdlong	arg03, arg03
1719c     0C 4E 05 F1 | 	add	fp, #12
171a0     A7 16 62 FC | 	wrlong	arg03, fp
171a4                 | ' 
171a4                 | ' numpar=compiledline(lineptr_e).result.uresult
171a4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
171a4     0C 4E 85 F1 | 	sub	fp, #12
171a8     02 16 16 F2 | 	cmp	arg03, #2 wc
171ac     47 00 00 FF 
171b0     7C E4 85 F1 | 	sub	objptr, ##36476
171b4     0C 4E 05 C1 |  if_b	add	fp, #12
171b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
171bc     0C 4E 85 C1 |  if_b	sub	fp, #12
171c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
171c4     00 12 06 F6 | 	mov	arg01, #0
171c8     10 F3 B0 FD | 	call	#__system___getiolock_0540
171cc     FD 12 02 F6 | 	mov	arg01, result1
171d0     C8 98 B0 FD | 	call	#__system___lockmem
171d4     85 01 00 FF 
171d8     19 15 06 F6 | 	mov	arg02, ##@LR__5498
171dc     00 12 06 F6 | 	mov	arg01, #0
171e0     00 16 06 F6 | 	mov	arg03, #0
171e4     A8 A5 B0 FD | 	call	#__system___basic_print_string
171e8     00 12 06 F6 | 	mov	arg01, #0
171ec     EC F2 B0 FD | 	call	#__system___getiolock_0540
171f0     FD 00 68 FC | 	wrlong	#0, result1
171f4     27 12 06 F6 | 	mov	arg01, #39
171f8     08 63 B0 FD | 	call	#_printerror
171fc     64 00 90 FD | 	jmp	#LR__1911
17200                 | LR__1910
17200     E0 48 BF FD | 	call	#_pop
17204     FF 1E 02 F6 | 	mov	local01, result3
17208     A7 FA 61 FC | 	wrlong	result1, fp
1720c     04 4E 05 F1 | 	add	fp, #4
17210     A7 FC 61 FC | 	wrlong	result2, fp
17214     04 4E 05 F1 | 	add	fp, #4
17218     A7 1E 62 FC | 	wrlong	local01, fp
1721c     08 4E 85 F1 | 	sub	fp, #8
17220     A7 12 02 F6 | 	mov	arg01, fp
17224     3C EA BF FD | 	call	#_converttofloat
17228     FD 12 02 F6 | 	mov	arg01, result1
1722c     F0 CE B0 FD | 	call	#__system____builtin_asinf
17230     FD 12 02 F6 | 	mov	arg01, result1
17234     51 00 00 FF 
17238     BC E5 05 F1 | 	add	objptr, ##41916
1723c     F2 14 02 FB | 	rdlong	arg02, objptr
17240     51 00 00 FF 
17244     BC E5 85 F1 | 	sub	objptr, ##41916
17248     04 C4 B0 FD | 	call	#__system___float_mul
1724c     A7 FA 61 FC | 	wrlong	result1, fp
17250     08 4E 05 F1 | 	add	fp, #8
17254     A7 3C 68 FC | 	wrlong	#30, fp
17258     08 4E 85 F1 | 	sub	fp, #8
1725c     A7 12 02 F6 | 	mov	arg01, fp
17260     18 49 BF FD | 	call	#_push
17264                 | LR__1911
17264     A7 F0 03 F6 | 	mov	ptra, fp
17268     B2 00 A0 FD | 	call	#popregs_
1726c                 | _do_asin_ret
1726c     2D 00 64 FD | 	ret
17270                 | 
17270                 | ' 
17270                 | ' sub do_acos
17270                 | _do_acos
17270     01 4A 05 F6 | 	mov	COUNT_, #1
17274     A8 00 A0 FD | 	call	#pushregs_
17278     10 F0 07 F1 | 	add	ptra, #16
1727c     4A 00 00 FF 
17280     80 E4 05 F1 | 	add	objptr, ##38016
17284     F2 1E 02 FB | 	rdlong	local01, objptr
17288     0F 17 02 F6 | 	mov	arg03, local01
1728c     01 16 66 F0 | 	shl	arg03, #1
17290     0F 17 02 F1 | 	add	arg03, local01
17294     02 16 66 F0 | 	shl	arg03, #2
17298     03 00 00 FF 
1729c     04 E4 85 F1 | 	sub	objptr, ##1540
172a0     F2 16 02 F1 | 	add	arg03, objptr
172a4     0B 17 02 FB | 	rdlong	arg03, arg03
172a8     0C 4E 05 F1 | 	add	fp, #12
172ac     A7 16 62 FC | 	wrlong	arg03, fp
172b0                 | ' 
172b0                 | ' numpar=compiledline(lineptr_e).result.uresult
172b0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
172b0     0C 4E 85 F1 | 	sub	fp, #12
172b4     02 16 16 F2 | 	cmp	arg03, #2 wc
172b8     47 00 00 FF 
172bc     7C E4 85 F1 | 	sub	objptr, ##36476
172c0     0C 4E 05 C1 |  if_b	add	fp, #12
172c4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
172c8     0C 4E 85 C1 |  if_b	sub	fp, #12
172cc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
172d0     00 12 06 F6 | 	mov	arg01, #0
172d4     04 F2 B0 FD | 	call	#__system___getiolock_0540
172d8     FD 12 02 F6 | 	mov	arg01, result1
172dc     BC 97 B0 FD | 	call	#__system___lockmem
172e0     85 01 00 FF 
172e4     20 15 06 F6 | 	mov	arg02, ##@LR__5499
172e8     00 12 06 F6 | 	mov	arg01, #0
172ec     00 16 06 F6 | 	mov	arg03, #0
172f0     9C A4 B0 FD | 	call	#__system___basic_print_string
172f4     00 12 06 F6 | 	mov	arg01, #0
172f8     E0 F1 B0 FD | 	call	#__system___getiolock_0540
172fc     FD 00 68 FC | 	wrlong	#0, result1
17300     27 12 06 F6 | 	mov	arg01, #39
17304     FC 61 B0 FD | 	call	#_printerror
17308     64 00 90 FD | 	jmp	#LR__1921
1730c                 | LR__1920
1730c     D4 47 BF FD | 	call	#_pop
17310     FF 1E 02 F6 | 	mov	local01, result3
17314     A7 FA 61 FC | 	wrlong	result1, fp
17318     04 4E 05 F1 | 	add	fp, #4
1731c     A7 FC 61 FC | 	wrlong	result2, fp
17320     04 4E 05 F1 | 	add	fp, #4
17324     A7 1E 62 FC | 	wrlong	local01, fp
17328     08 4E 85 F1 | 	sub	fp, #8
1732c     A7 12 02 F6 | 	mov	arg01, fp
17330     30 E9 BF FD | 	call	#_converttofloat
17334     FD 12 02 F6 | 	mov	arg01, result1
17338     30 CE B0 FD | 	call	#__system____builtin_acosf
1733c     FD 12 02 F6 | 	mov	arg01, result1
17340     51 00 00 FF 
17344     BC E5 05 F1 | 	add	objptr, ##41916
17348     F2 14 02 FB | 	rdlong	arg02, objptr
1734c     51 00 00 FF 
17350     BC E5 85 F1 | 	sub	objptr, ##41916
17354     F8 C2 B0 FD | 	call	#__system___float_mul
17358     A7 FA 61 FC | 	wrlong	result1, fp
1735c     08 4E 05 F1 | 	add	fp, #8
17360     A7 3C 68 FC | 	wrlong	#30, fp
17364     08 4E 85 F1 | 	sub	fp, #8
17368     A7 12 02 F6 | 	mov	arg01, fp
1736c     0C 48 BF FD | 	call	#_push
17370                 | LR__1921
17370     A7 F0 03 F6 | 	mov	ptra, fp
17374     B2 00 A0 FD | 	call	#popregs_
17378                 | _do_acos_ret
17378     2D 00 64 FD | 	ret
1737c                 | 
1737c                 | ' 
1737c                 | ' sub do_atn
1737c                 | _do_atn
1737c     01 4A 05 F6 | 	mov	COUNT_, #1
17380     A8 00 A0 FD | 	call	#pushregs_
17384     10 F0 07 F1 | 	add	ptra, #16
17388     4A 00 00 FF 
1738c     80 E4 05 F1 | 	add	objptr, ##38016
17390     F2 1E 02 FB | 	rdlong	local01, objptr
17394     0F 17 02 F6 | 	mov	arg03, local01
17398     01 16 66 F0 | 	shl	arg03, #1
1739c     0F 17 02 F1 | 	add	arg03, local01
173a0     02 16 66 F0 | 	shl	arg03, #2
173a4     03 00 00 FF 
173a8     04 E4 85 F1 | 	sub	objptr, ##1540
173ac     F2 16 02 F1 | 	add	arg03, objptr
173b0     0B 17 02 FB | 	rdlong	arg03, arg03
173b4     0C 4E 05 F1 | 	add	fp, #12
173b8     A7 16 62 FC | 	wrlong	arg03, fp
173bc                 | ' 
173bc                 | ' numpar=compiledline(lineptr_e).result.uresult
173bc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
173bc     0C 4E 85 F1 | 	sub	fp, #12
173c0     02 16 16 F2 | 	cmp	arg03, #2 wc
173c4     47 00 00 FF 
173c8     7C E4 85 F1 | 	sub	objptr, ##36476
173cc     0C 4E 05 C1 |  if_b	add	fp, #12
173d0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
173d4     0C 4E 85 C1 |  if_b	sub	fp, #12
173d8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
173dc     00 12 06 F6 | 	mov	arg01, #0
173e0     F8 F0 B0 FD | 	call	#__system___getiolock_0540
173e4     FD 12 02 F6 | 	mov	arg01, result1
173e8     B0 96 B0 FD | 	call	#__system___lockmem
173ec     85 01 00 FF 
173f0     27 15 06 F6 | 	mov	arg02, ##@LR__5500
173f4     00 12 06 F6 | 	mov	arg01, #0
173f8     00 16 06 F6 | 	mov	arg03, #0
173fc     90 A3 B0 FD | 	call	#__system___basic_print_string
17400     00 12 06 F6 | 	mov	arg01, #0
17404     D4 F0 B0 FD | 	call	#__system___getiolock_0540
17408     FD 00 68 FC | 	wrlong	#0, result1
1740c     27 12 06 F6 | 	mov	arg01, #39
17410     F0 60 B0 FD | 	call	#_printerror
17414     6C 00 90 FD | 	jmp	#LR__1931
17418                 | LR__1930
17418     C8 46 BF FD | 	call	#_pop
1741c     FF 1E 02 F6 | 	mov	local01, result3
17420     A7 FA 61 FC | 	wrlong	result1, fp
17424     04 4E 05 F1 | 	add	fp, #4
17428     A7 FC 61 FC | 	wrlong	result2, fp
1742c     04 4E 05 F1 | 	add	fp, #4
17430     A7 1E 62 FC | 	wrlong	local01, fp
17434     08 4E 85 F1 | 	sub	fp, #8
17438     A7 12 02 F6 | 	mov	arg01, fp
1743c     24 E8 BF FD | 	call	#_converttofloat
17440     FD 12 02 F6 | 	mov	arg01, result1
17444     00 C0 1F FF 
17448     00 14 06 F6 | 	mov	arg02, ##1065353216
1744c     68 CD B0 FD | 	call	#__system____builtin_atan2f
17450     FD 12 02 F6 | 	mov	arg01, result1
17454     51 00 00 FF 
17458     BC E5 05 F1 | 	add	objptr, ##41916
1745c     F2 14 02 FB | 	rdlong	arg02, objptr
17460     51 00 00 FF 
17464     BC E5 85 F1 | 	sub	objptr, ##41916
17468     E4 C1 B0 FD | 	call	#__system___float_mul
1746c     A7 FA 61 FC | 	wrlong	result1, fp
17470     08 4E 05 F1 | 	add	fp, #8
17474     A7 3C 68 FC | 	wrlong	#30, fp
17478     08 4E 85 F1 | 	sub	fp, #8
1747c     A7 12 02 F6 | 	mov	arg01, fp
17480     F8 46 BF FD | 	call	#_push
17484                 | LR__1931
17484     A7 F0 03 F6 | 	mov	ptra, fp
17488     B2 00 A0 FD | 	call	#popregs_
1748c                 | _do_atn_ret
1748c     2D 00 64 FD | 	ret
17490                 | 
17490                 | ' 
17490                 | ' sub do_sqr
17490                 | _do_sqr
17490     01 4A 05 F6 | 	mov	COUNT_, #1
17494     A8 00 A0 FD | 	call	#pushregs_
17498     10 F0 07 F1 | 	add	ptra, #16
1749c     4A 00 00 FF 
174a0     80 E4 05 F1 | 	add	objptr, ##38016
174a4     F2 1E 02 FB | 	rdlong	local01, objptr
174a8     0F 17 02 F6 | 	mov	arg03, local01
174ac     01 16 66 F0 | 	shl	arg03, #1
174b0     0F 17 02 F1 | 	add	arg03, local01
174b4     02 16 66 F0 | 	shl	arg03, #2
174b8     03 00 00 FF 
174bc     04 E4 85 F1 | 	sub	objptr, ##1540
174c0     F2 16 02 F1 | 	add	arg03, objptr
174c4     0B 17 02 FB | 	rdlong	arg03, arg03
174c8     0C 4E 05 F1 | 	add	fp, #12
174cc     A7 16 62 FC | 	wrlong	arg03, fp
174d0                 | ' 
174d0                 | ' numpar=compiledline(lineptr_e).result.uresult
174d0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
174d0     0C 4E 85 F1 | 	sub	fp, #12
174d4     02 16 16 F2 | 	cmp	arg03, #2 wc
174d8     47 00 00 FF 
174dc     7C E4 85 F1 | 	sub	objptr, ##36476
174e0     0C 4E 05 C1 |  if_b	add	fp, #12
174e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
174e8     0C 4E 85 C1 |  if_b	sub	fp, #12
174ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
174f0     00 12 06 F6 | 	mov	arg01, #0
174f4     E4 EF B0 FD | 	call	#__system___getiolock_0540
174f8     FD 12 02 F6 | 	mov	arg01, result1
174fc     9C 95 B0 FD | 	call	#__system___lockmem
17500     85 01 00 FF 
17504     2D 15 06 F6 | 	mov	arg02, ##@LR__5501
17508     00 12 06 F6 | 	mov	arg01, #0
1750c     00 16 06 F6 | 	mov	arg03, #0
17510     7C A2 B0 FD | 	call	#__system___basic_print_string
17514     00 12 06 F6 | 	mov	arg01, #0
17518     C0 EF B0 FD | 	call	#__system___getiolock_0540
1751c     FD 00 68 FC | 	wrlong	#0, result1
17520     27 12 06 F6 | 	mov	arg01, #39
17524     DC 5F B0 FD | 	call	#_printerror
17528     48 00 90 FD | 	jmp	#LR__1941
1752c                 | LR__1940
1752c     B4 45 BF FD | 	call	#_pop
17530     FF 1E 02 F6 | 	mov	local01, result3
17534     A7 FA 61 FC | 	wrlong	result1, fp
17538     04 4E 05 F1 | 	add	fp, #4
1753c     A7 FC 61 FC | 	wrlong	result2, fp
17540     04 4E 05 F1 | 	add	fp, #4
17544     A7 1E 62 FC | 	wrlong	local01, fp
17548     08 4E 85 F1 | 	sub	fp, #8
1754c     A7 12 02 F6 | 	mov	arg01, fp
17550     10 E7 BF FD | 	call	#_converttofloat
17554     FD 12 02 F6 | 	mov	arg01, result1
17558     1C C0 B0 FD | 	call	#__system___float_sqrt
1755c     A7 FA 61 FC | 	wrlong	result1, fp
17560     08 4E 05 F1 | 	add	fp, #8
17564     A7 3C 68 FC | 	wrlong	#30, fp
17568     08 4E 85 F1 | 	sub	fp, #8
1756c     A7 12 02 F6 | 	mov	arg01, fp
17570     08 46 BF FD | 	call	#_push
17574                 | LR__1941
17574     A7 F0 03 F6 | 	mov	ptra, fp
17578     B2 00 A0 FD | 	call	#popregs_
1757c                 | _do_sqr_ret
1757c     2D 00 64 FD | 	ret
17580                 | 
17580                 | ' 
17580                 | ' sub do_stick
17580                 | _do_stick
17580     01 4A 05 F6 | 	mov	COUNT_, #1
17584     A8 00 A0 FD | 	call	#pushregs_
17588     10 F0 07 F1 | 	add	ptra, #16
1758c     4A 00 00 FF 
17590     80 E4 05 F1 | 	add	objptr, ##38016
17594     F2 1E 02 FB | 	rdlong	local01, objptr
17598     0F 17 02 F6 | 	mov	arg03, local01
1759c     01 16 66 F0 | 	shl	arg03, #1
175a0     0F 17 02 F1 | 	add	arg03, local01
175a4     02 16 66 F0 | 	shl	arg03, #2
175a8     03 00 00 FF 
175ac     04 E4 85 F1 | 	sub	objptr, ##1540
175b0     F2 16 02 F1 | 	add	arg03, objptr
175b4     0B 17 02 FB | 	rdlong	arg03, arg03
175b8     0C 4E 05 F1 | 	add	fp, #12
175bc     A7 16 62 FC | 	wrlong	arg03, fp
175c0                 | ' 
175c0                 | ' numpar=compiledline(lineptr_e).result.uresult
175c0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
175c0     0C 4E 85 F1 | 	sub	fp, #12
175c4     02 16 16 F2 | 	cmp	arg03, #2 wc
175c8     47 00 00 FF 
175cc     7C E4 85 F1 | 	sub	objptr, ##36476
175d0     3C 00 90 CD |  if_b	jmp	#LR__1950
175d4     00 12 06 F6 | 	mov	arg01, #0
175d8     00 EF B0 FD | 	call	#__system___getiolock_0540
175dc     FD 12 02 F6 | 	mov	arg01, result1
175e0     B8 94 B0 FD | 	call	#__system___lockmem
175e4     85 01 00 FF 
175e8     33 15 06 F6 | 	mov	arg02, ##@LR__5502
175ec     00 12 06 F6 | 	mov	arg01, #0
175f0     00 16 06 F6 | 	mov	arg03, #0
175f4     98 A1 B0 FD | 	call	#__system___basic_print_string
175f8     00 12 06 F6 | 	mov	arg01, #0
175fc     DC EE B0 FD | 	call	#__system___getiolock_0540
17600     FD 00 68 FC | 	wrlong	#0, result1
17604     27 12 06 F6 | 	mov	arg01, #39
17608     F8 5E B0 FD | 	call	#_printerror
1760c     E8 00 90 FD | 	jmp	#LR__1954
17610                 | LR__1950
17610                 | ' 
17610                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17610     0C 4E 05 F1 | 	add	fp, #12
17614     A7 FE 09 FB | 	rdlong	result3, fp wz
17618     0C 4E 85 F1 | 	sub	fp, #12
1761c     30 00 90 5D |  if_ne	jmp	#LR__1951
17620     51 00 00 FF 
17624     2C E5 05 F1 | 	add	objptr, ##41772
17628     F2 1E 02 FB | 	rdlong	local01, objptr
1762c     51 00 00 FF 
17630     2C E5 85 F1 | 	sub	objptr, ##41772
17634     A7 1E 62 FC | 	wrlong	local01, fp
17638     08 4E 05 F1 | 	add	fp, #8
1763c     A7 3A 68 FC | 	wrlong	#29, fp
17640     08 4E 85 F1 | 	sub	fp, #8
17644     A7 12 02 F6 | 	mov	arg01, fp
17648     30 45 BF FD | 	call	#_push
1764c     A8 00 90 FD | 	jmp	#LR__1954
17650                 | LR__1951
17650     90 44 BF FD | 	call	#_pop
17654     A7 FA 61 FC | 	wrlong	result1, fp
17658     04 4E 05 F1 | 	add	fp, #4
1765c     A7 FC 61 FC | 	wrlong	result2, fp
17660     04 4E 05 F1 | 	add	fp, #4
17664     A7 FE 61 FC | 	wrlong	result3, fp
17668                 | ' 
17668                 | ' t1=pop()
17668                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17668     08 4E 85 F1 | 	sub	fp, #8
1766c     1C FE 0D F2 | 	cmp	result3, #28 wz
17670     08 4E 05 51 |  if_ne	add	fp, #8
17674     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17678     08 4E 85 51 |  if_ne	sub	fp, #8
1767c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17680     6C 00 90 5D |  if_ne	jmp	#LR__1953
17684     A7 1E 02 FB | 	rdlong	local01, fp
17688     52 00 00 FF 
1768c     08 E4 05 F1 | 	add	objptr, ##41992
17690     F2 1E 62 FC | 	wrlong	local01, objptr
17694                 | '   q=t1.result.uresult
17694                 | '   if q<7 then 
17694     52 00 00 FF 
17698     08 E4 85 F1 | 	sub	objptr, ##41992
1769c     07 1E 56 F2 | 	cmps	local01, #7 wc
176a0     40 00 90 3D |  if_ae	jmp	#LR__1952
176a4     52 00 00 FF 
176a8     08 E4 05 F1 | 	add	objptr, ##41992
176ac     F2 1E 02 FB | 	rdlong	local01, objptr
176b0     02 1E 66 F0 | 	shl	local01, #2
176b4     DC E4 85 F1 | 	sub	objptr, #220
176b8     F2 1E 02 F1 | 	add	local01, objptr
176bc     0F 1F 02 FB | 	rdlong	local01, local01
176c0     A7 1E 62 FC | 	wrlong	local01, fp
176c4     08 4E 05 F1 | 	add	fp, #8
176c8     A7 3A 68 FC | 	wrlong	#29, fp
176cc     08 4E 85 F1 | 	sub	fp, #8
176d0     A7 12 02 F6 | 	mov	arg01, fp
176d4     51 00 00 FF 
176d8     2C E5 85 F1 | 	sub	objptr, ##41772
176dc     9C 44 BF FD | 	call	#_push
176e0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
176e0     14 00 90 FD | 	jmp	#LR__1954
176e4                 | LR__1952
176e4     29 12 06 F6 | 	mov	arg01, #41
176e8     18 5E B0 FD | 	call	#_printerror
176ec                 | '      printerror(41) : return
176ec     08 00 90 FD | 	jmp	#LR__1954
176f0                 | LR__1953
176f0     29 12 06 F6 | 	mov	arg01, #41
176f4     0C 5E B0 FD | 	call	#_printerror
176f8                 | LR__1954
176f8     A7 F0 03 F6 | 	mov	ptra, fp
176fc     B2 00 A0 FD | 	call	#popregs_
17700                 | _do_stick_ret
17700     2D 00 64 FD | 	ret
17704                 | 
17704                 | ' 
17704                 | ' sub do_strig
17704                 | _do_strig
17704     01 4A 05 F6 | 	mov	COUNT_, #1
17708     A8 00 A0 FD | 	call	#pushregs_
1770c     10 F0 07 F1 | 	add	ptra, #16
17710     4A 00 00 FF 
17714     80 E4 05 F1 | 	add	objptr, ##38016
17718     F2 1E 02 FB | 	rdlong	local01, objptr
1771c     0F 17 02 F6 | 	mov	arg03, local01
17720     01 16 66 F0 | 	shl	arg03, #1
17724     0F 17 02 F1 | 	add	arg03, local01
17728     02 16 66 F0 | 	shl	arg03, #2
1772c     03 00 00 FF 
17730     04 E4 85 F1 | 	sub	objptr, ##1540
17734     F2 16 02 F1 | 	add	arg03, objptr
17738     0B 17 02 FB | 	rdlong	arg03, arg03
1773c     0C 4E 05 F1 | 	add	fp, #12
17740     A7 16 62 FC | 	wrlong	arg03, fp
17744                 | ' 
17744                 | ' numpar=compiledline(lineptr_e).result.uresult
17744                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17744     0C 4E 85 F1 | 	sub	fp, #12
17748     02 16 16 F2 | 	cmp	arg03, #2 wc
1774c     47 00 00 FF 
17750     7C E4 85 F1 | 	sub	objptr, ##36476
17754     3C 00 90 CD |  if_b	jmp	#LR__1960
17758     00 12 06 F6 | 	mov	arg01, #0
1775c     7C ED B0 FD | 	call	#__system___getiolock_0540
17760     FD 12 02 F6 | 	mov	arg01, result1
17764     34 93 B0 FD | 	call	#__system___lockmem
17768     85 01 00 FF 
1776c     3B 15 06 F6 | 	mov	arg02, ##@LR__5503
17770     00 12 06 F6 | 	mov	arg01, #0
17774     00 16 06 F6 | 	mov	arg03, #0
17778     14 A0 B0 FD | 	call	#__system___basic_print_string
1777c     00 12 06 F6 | 	mov	arg01, #0
17780     58 ED B0 FD | 	call	#__system___getiolock_0540
17784     FD 00 68 FC | 	wrlong	#0, result1
17788     27 12 06 F6 | 	mov	arg01, #39
1778c     74 5D B0 FD | 	call	#_printerror
17790     E8 00 90 FD | 	jmp	#LR__1964
17794                 | LR__1960
17794                 | ' 
17794                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17794     0C 4E 05 F1 | 	add	fp, #12
17798     A7 FE 09 FB | 	rdlong	result3, fp wz
1779c     0C 4E 85 F1 | 	sub	fp, #12
177a0     30 00 90 5D |  if_ne	jmp	#LR__1961
177a4     51 00 00 FF 
177a8     48 E5 05 F1 | 	add	objptr, ##41800
177ac     F2 1E 02 FB | 	rdlong	local01, objptr
177b0     51 00 00 FF 
177b4     48 E5 85 F1 | 	sub	objptr, ##41800
177b8     A7 1E 62 FC | 	wrlong	local01, fp
177bc     08 4E 05 F1 | 	add	fp, #8
177c0     A7 3A 68 FC | 	wrlong	#29, fp
177c4     08 4E 85 F1 | 	sub	fp, #8
177c8     A7 12 02 F6 | 	mov	arg01, fp
177cc     AC 43 BF FD | 	call	#_push
177d0     A8 00 90 FD | 	jmp	#LR__1964
177d4                 | LR__1961
177d4     0C 43 BF FD | 	call	#_pop
177d8     A7 FA 61 FC | 	wrlong	result1, fp
177dc     04 4E 05 F1 | 	add	fp, #4
177e0     A7 FC 61 FC | 	wrlong	result2, fp
177e4     04 4E 05 F1 | 	add	fp, #4
177e8     A7 FE 61 FC | 	wrlong	result3, fp
177ec                 | ' 
177ec                 | ' t1=pop()
177ec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
177ec     08 4E 85 F1 | 	sub	fp, #8
177f0     1C FE 0D F2 | 	cmp	result3, #28 wz
177f4     08 4E 05 51 |  if_ne	add	fp, #8
177f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
177fc     08 4E 85 51 |  if_ne	sub	fp, #8
17800     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17804     6C 00 90 5D |  if_ne	jmp	#LR__1963
17808     A7 1E 02 FB | 	rdlong	local01, fp
1780c     52 00 00 FF 
17810     08 E4 05 F1 | 	add	objptr, ##41992
17814     F2 1E 62 FC | 	wrlong	local01, objptr
17818                 | '   q=t1.result.uresult
17818                 | '   if q<7 then 
17818     52 00 00 FF 
1781c     08 E4 85 F1 | 	sub	objptr, ##41992
17820     07 1E 56 F2 | 	cmps	local01, #7 wc
17824     40 00 90 3D |  if_ae	jmp	#LR__1962
17828     52 00 00 FF 
1782c     08 E4 05 F1 | 	add	objptr, ##41992
17830     F2 1E 02 FB | 	rdlong	local01, objptr
17834     02 1E 66 F0 | 	shl	local01, #2
17838     C0 E4 85 F1 | 	sub	objptr, #192
1783c     F2 1E 02 F1 | 	add	local01, objptr
17840     0F 1F 02 FB | 	rdlong	local01, local01
17844     A7 1E 62 FC | 	wrlong	local01, fp
17848     08 4E 05 F1 | 	add	fp, #8
1784c     A7 3A 68 FC | 	wrlong	#29, fp
17850     08 4E 85 F1 | 	sub	fp, #8
17854     A7 12 02 F6 | 	mov	arg01, fp
17858     51 00 00 FF 
1785c     48 E5 85 F1 | 	sub	objptr, ##41800
17860     18 43 BF FD | 	call	#_push
17864                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17864     14 00 90 FD | 	jmp	#LR__1964
17868                 | LR__1962
17868     29 12 06 F6 | 	mov	arg01, #41
1786c     94 5C B0 FD | 	call	#_printerror
17870                 | '      printerror(41) : return
17870     08 00 90 FD | 	jmp	#LR__1964
17874                 | LR__1963
17874     29 12 06 F6 | 	mov	arg01, #41
17878     88 5C B0 FD | 	call	#_printerror
1787c                 | LR__1964
1787c     A7 F0 03 F6 | 	mov	ptra, fp
17880     B2 00 A0 FD | 	call	#popregs_
17884                 | _do_strig_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | ' 
17888                 | ' sub do_getpixel
17888                 | _do_getpixel
17888     00 4A 05 F6 | 	mov	COUNT_, #0
1788c     A8 00 A0 FD | 	call	#pushregs_
17890     24 F0 07 F1 | 	add	ptra, #36
17894     4A 00 00 FF 
17898     80 E4 05 F1 | 	add	objptr, ##38016
1789c     F2 16 02 FB | 	rdlong	arg03, objptr
178a0     0B 15 02 F6 | 	mov	arg02, arg03
178a4     01 14 66 F0 | 	shl	arg02, #1
178a8     0B 15 02 F1 | 	add	arg02, arg03
178ac     02 14 66 F0 | 	shl	arg02, #2
178b0     03 00 00 FF 
178b4     04 E4 85 F1 | 	sub	objptr, ##1540
178b8     F2 14 02 F1 | 	add	arg02, objptr
178bc     0A 17 02 FB | 	rdlong	arg03, arg02
178c0     18 4E 05 F1 | 	add	fp, #24
178c4     A7 16 62 FC | 	wrlong	arg03, fp
178c8                 | ' 
178c8                 | ' numpar=compiledline(lineptr_e).result.uresult
178c8                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
178c8     18 4E 85 F1 | 	sub	fp, #24
178cc     02 16 0E F2 | 	cmp	arg03, #2 wz
178d0     47 00 00 FF 
178d4     7C E4 85 F1 | 	sub	objptr, ##36476
178d8     3C 00 90 AD |  if_e	jmp	#LR__1970
178dc     00 12 06 F6 | 	mov	arg01, #0
178e0     F8 EB B0 FD | 	call	#__system___getiolock_0540
178e4     FD 12 02 F6 | 	mov	arg01, result1
178e8     B0 91 B0 FD | 	call	#__system___lockmem
178ec     85 01 00 FF 
178f0     43 15 06 F6 | 	mov	arg02, ##@LR__5504
178f4     00 12 06 F6 | 	mov	arg01, #0
178f8     00 16 06 F6 | 	mov	arg03, #0
178fc     90 9E B0 FD | 	call	#__system___basic_print_string
17900     00 12 06 F6 | 	mov	arg01, #0
17904     D4 EB B0 FD | 	call	#__system___getiolock_0540
17908     FD 00 68 FC | 	wrlong	#0, result1
1790c     27 12 06 F6 | 	mov	arg01, #39
17910     F0 5B B0 FD | 	call	#_printerror
17914     B4 00 90 FD | 	jmp	#LR__1971
17918                 | LR__1970
17918     C8 41 BF FD | 	call	#_pop
1791c     FD 16 02 F6 | 	mov	arg03, result1
17920     FE 14 02 F6 | 	mov	arg02, result2
17924     FF 12 02 F6 | 	mov	arg01, result3
17928     0C 4E 05 F1 | 	add	fp, #12
1792c     A7 16 62 FC | 	wrlong	arg03, fp
17930     04 4E 05 F1 | 	add	fp, #4
17934     A7 14 62 FC | 	wrlong	arg02, fp
17938     04 4E 05 F1 | 	add	fp, #4
1793c     A7 12 62 FC | 	wrlong	arg01, fp
17940     14 4E 85 F1 | 	sub	fp, #20
17944     9C 41 BF FD | 	call	#_pop
17948     FF 16 02 F6 | 	mov	arg03, result3
1794c     A7 FA 61 FC | 	wrlong	result1, fp
17950     04 4E 05 F1 | 	add	fp, #4
17954     A7 FC 61 FC | 	wrlong	result2, fp
17958     04 4E 05 F1 | 	add	fp, #4
1795c     A7 16 62 FC | 	wrlong	arg03, fp
17960     08 4E 85 F1 | 	sub	fp, #8
17964     A7 12 02 F6 | 	mov	arg01, fp
17968     3C E2 BF FD | 	call	#_converttoint
1796c     1C 4E 05 F1 | 	add	fp, #28
17970     A7 FA 61 FC | 	wrlong	result1, fp
17974     10 4E 85 F1 | 	sub	fp, #16
17978     A7 12 02 F6 | 	mov	arg01, fp
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     24 E2 BF FD | 	call	#_converttoint
17984     FD 16 02 F6 | 	mov	arg03, result1
17988     20 4E 05 F1 | 	add	fp, #32
1798c     A7 16 62 FC | 	wrlong	arg03, fp
17990     F2 12 02 FB | 	rdlong	arg01, objptr
17994     04 4E 85 F1 | 	sub	fp, #4
17998     A7 FE 01 FB | 	rdlong	result3, fp
1799c     FF 12 02 F1 | 	add	arg01, result3
179a0     1C 4E 85 F1 | 	sub	fp, #28
179a4     0A 16 66 F0 | 	shl	arg03, #10
179a8     0B 13 02 F1 | 	add	arg01, arg03
179ac     90 5D B0 FD | 	call	#_pspeek
179b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
179b4     A7 FA 61 FC | 	wrlong	result1, fp
179b8     08 4E 05 F1 | 	add	fp, #8
179bc     A7 3A 68 FC | 	wrlong	#29, fp
179c0     08 4E 85 F1 | 	sub	fp, #8
179c4     A7 12 02 F6 | 	mov	arg01, fp
179c8     B0 41 BF FD | 	call	#_push
179cc                 | LR__1971
179cc     A7 F0 03 F6 | 	mov	ptra, fp
179d0     B2 00 A0 FD | 	call	#popregs_
179d4                 | _do_getpixel_ret
179d4     2D 00 64 FD | 	ret
179d8                 | 
179d8                 | ' 
179d8                 | ' sub do_log
179d8                 | _do_log
179d8     01 4A 05 F6 | 	mov	COUNT_, #1
179dc     A8 00 A0 FD | 	call	#pushregs_
179e0     14 F0 07 F1 | 	add	ptra, #20
179e4     4A 00 00 FF 
179e8     80 E4 05 F1 | 	add	objptr, ##38016
179ec     F2 1E 02 FB | 	rdlong	local01, objptr
179f0     0F 17 02 F6 | 	mov	arg03, local01
179f4     01 16 66 F0 | 	shl	arg03, #1
179f8     0F 17 02 F1 | 	add	arg03, local01
179fc     02 16 66 F0 | 	shl	arg03, #2
17a00     03 00 00 FF 
17a04     04 E4 85 F1 | 	sub	objptr, ##1540
17a08     F2 16 02 F1 | 	add	arg03, objptr
17a0c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17a10     0C 4E 05 F1 | 	add	fp, #12
17a14     A7 16 62 FC | 	wrlong	arg03, fp
17a18                 | ' 
17a18                 | ' numpar=compiledline(lineptr_e).result.uresult
17a18                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17a18     0C 4E 85 F1 | 	sub	fp, #12
17a1c     47 00 00 FF 
17a20     7C E4 85 F1 | 	sub	objptr, ##36476
17a24     0C 4E 05 51 |  if_ne	add	fp, #12
17a28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17a2c     0C 4E 85 51 |  if_ne	sub	fp, #12
17a30     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
17a34     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
17a38     00 12 06 F6 | 	mov	arg01, #0
17a3c     9C EA B0 FD | 	call	#__system___getiolock_0540
17a40     FD 12 02 F6 | 	mov	arg01, result1
17a44     54 90 B0 FD | 	call	#__system___lockmem
17a48     85 01 00 FF 
17a4c     4E 15 06 F6 | 	mov	arg02, ##@LR__5505
17a50     00 12 06 F6 | 	mov	arg01, #0
17a54     00 16 06 F6 | 	mov	arg03, #0
17a58     34 9D B0 FD | 	call	#__system___basic_print_string
17a5c     00 12 06 F6 | 	mov	arg01, #0
17a60     78 EA B0 FD | 	call	#__system___getiolock_0540
17a64     FD 00 68 FC | 	wrlong	#0, result1
17a68     27 12 06 F6 | 	mov	arg01, #39
17a6c     94 5A B0 FD | 	call	#_printerror
17a70     D0 00 90 FD | 	jmp	#LR__1983
17a74                 | LR__1980
17a74                 | ' 
17a74                 | ' if numpar=2 then 
17a74     0C 4E 05 F1 | 	add	fp, #12
17a78     A7 1E 02 FB | 	rdlong	local01, fp
17a7c     0C 4E 85 F1 | 	sub	fp, #12
17a80     02 1E 0E F2 | 	cmp	local01, #2 wz
17a84     48 00 90 5D |  if_ne	jmp	#LR__1981
17a88     58 40 BF FD | 	call	#_pop
17a8c     FF 1E 02 F6 | 	mov	local01, result3
17a90     A7 FA 61 FC | 	wrlong	result1, fp
17a94     04 4E 05 F1 | 	add	fp, #4
17a98     A7 FC 61 FC | 	wrlong	result2, fp
17a9c     04 4E 05 F1 | 	add	fp, #4
17aa0     A7 1E 62 FC | 	wrlong	local01, fp
17aa4     08 4E 85 F1 | 	sub	fp, #8
17aa8     A7 12 02 F6 | 	mov	arg01, fp
17aac     B4 E1 BF FD | 	call	#_converttofloat
17ab0     FD 14 02 F6 | 	mov	arg02, result1
17ab4     FC 16 20 FF 
17ab8     54 12 06 F6 | 	mov	arg01, ##1076754516
17abc     3C CB B0 FD | 	call	#__system____builtin_logbase
17ac0     10 4E 05 F1 | 	add	fp, #16
17ac4     A7 FA 61 FC | 	wrlong	result1, fp
17ac8     10 4E 85 F1 | 	sub	fp, #16
17acc     10 00 90 FD | 	jmp	#LR__1982
17ad0                 | LR__1981
17ad0     10 4E 05 F1 | 	add	fp, #16
17ad4     00 C0 9F FF 
17ad8     A7 00 68 FC | 	wrlong	##1065353216, fp
17adc     10 4E 85 F1 | 	sub	fp, #16
17ae0                 | LR__1982
17ae0     00 40 BF FD | 	call	#_pop
17ae4     FF 1E 02 F6 | 	mov	local01, result3
17ae8     A7 FA 61 FC | 	wrlong	result1, fp
17aec     04 4E 05 F1 | 	add	fp, #4
17af0     A7 FC 61 FC | 	wrlong	result2, fp
17af4     04 4E 05 F1 | 	add	fp, #4
17af8     A7 1E 62 FC | 	wrlong	local01, fp
17afc     08 4E 85 F1 | 	sub	fp, #8
17b00     A7 12 02 F6 | 	mov	arg01, fp
17b04     5C E1 BF FD | 	call	#_converttofloat
17b08     FD 14 02 F6 | 	mov	arg02, result1
17b0c     FC 16 20 FF 
17b10     54 12 06 F6 | 	mov	arg01, ##1076754516
17b14     E4 CA B0 FD | 	call	#__system____builtin_logbase
17b18     FD 12 02 F6 | 	mov	arg01, result1
17b1c     10 4E 05 F1 | 	add	fp, #16
17b20     A7 14 02 FB | 	rdlong	arg02, fp
17b24     10 4E 85 F1 | 	sub	fp, #16
17b28     28 BD B0 FD | 	call	#__system___float_div
17b2c     A7 FA 61 FC | 	wrlong	result1, fp
17b30     08 4E 05 F1 | 	add	fp, #8
17b34     A7 3C 68 FC | 	wrlong	#30, fp
17b38     08 4E 85 F1 | 	sub	fp, #8
17b3c     A7 12 02 F6 | 	mov	arg01, fp
17b40     38 40 BF FD | 	call	#_push
17b44                 | LR__1983
17b44     A7 F0 03 F6 | 	mov	ptra, fp
17b48     B2 00 A0 FD | 	call	#popregs_
17b4c                 | _do_log_ret
17b4c     2D 00 64 FD | 	ret
17b50                 | 
17b50                 | ' 
17b50                 | ' sub do_defsprite
17b50                 | _do_defsprite
17b50     07 4A 05 F6 | 	mov	COUNT_, #7
17b54     A8 00 A0 FD | 	call	#pushregs_
17b58     60 F0 07 F1 | 	add	ptra, #96
17b5c     84 3F BF FD | 	call	#_pop
17b60     FD 16 02 F6 | 	mov	arg03, result1
17b64     FE 14 02 F6 | 	mov	arg02, result2
17b68     FF 12 02 F6 | 	mov	arg01, result3
17b6c     30 4E 05 F1 | 	add	fp, #48
17b70     A7 16 62 FC | 	wrlong	arg03, fp
17b74     04 4E 05 F1 | 	add	fp, #4
17b78     A7 14 62 FC | 	wrlong	arg02, fp
17b7c     04 4E 05 F1 | 	add	fp, #4
17b80     A7 12 62 FC | 	wrlong	arg01, fp
17b84     38 4E 85 F1 | 	sub	fp, #56
17b88     58 3F BF FD | 	call	#_pop
17b8c     FD 16 02 F6 | 	mov	arg03, result1
17b90     FE 14 02 F6 | 	mov	arg02, result2
17b94     FF 12 02 F6 | 	mov	arg01, result3
17b98     24 4E 05 F1 | 	add	fp, #36
17b9c     A7 16 62 FC | 	wrlong	arg03, fp
17ba0     04 4E 05 F1 | 	add	fp, #4
17ba4     A7 14 62 FC | 	wrlong	arg02, fp
17ba8     04 4E 05 F1 | 	add	fp, #4
17bac     A7 12 62 FC | 	wrlong	arg01, fp
17bb0     2C 4E 85 F1 | 	sub	fp, #44
17bb4     2C 3F BF FD | 	call	#_pop
17bb8     FD 16 02 F6 | 	mov	arg03, result1
17bbc     FE 14 02 F6 | 	mov	arg02, result2
17bc0     FF 12 02 F6 | 	mov	arg01, result3
17bc4     18 4E 05 F1 | 	add	fp, #24
17bc8     A7 16 62 FC | 	wrlong	arg03, fp
17bcc     04 4E 05 F1 | 	add	fp, #4
17bd0     A7 14 62 FC | 	wrlong	arg02, fp
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 12 62 FC | 	wrlong	arg01, fp
17bdc     20 4E 85 F1 | 	sub	fp, #32
17be0     00 3F BF FD | 	call	#_pop
17be4     FD 16 02 F6 | 	mov	arg03, result1
17be8     FE 14 02 F6 | 	mov	arg02, result2
17bec     FF 12 02 F6 | 	mov	arg01, result3
17bf0     0C 4E 05 F1 | 	add	fp, #12
17bf4     A7 16 62 FC | 	wrlong	arg03, fp
17bf8     04 4E 05 F1 | 	add	fp, #4
17bfc     A7 14 62 FC | 	wrlong	arg02, fp
17c00     04 4E 05 F1 | 	add	fp, #4
17c04     A7 12 62 FC | 	wrlong	arg01, fp
17c08     14 4E 85 F1 | 	sub	fp, #20
17c0c     D4 3E BF FD | 	call	#_pop
17c10     FF 16 02 F6 | 	mov	arg03, result3
17c14     A7 FA 61 FC | 	wrlong	result1, fp
17c18     04 4E 05 F1 | 	add	fp, #4
17c1c     A7 FC 61 FC | 	wrlong	result2, fp
17c20     04 4E 05 F1 | 	add	fp, #4
17c24     A7 16 62 FC | 	wrlong	arg03, fp
17c28     08 4E 85 F1 | 	sub	fp, #8
17c2c     A7 12 02 F6 | 	mov	arg01, fp
17c30     74 DF BF FD | 	call	#_converttoint
17c34     3C 4E 05 F1 | 	add	fp, #60
17c38     A7 FA 61 FC | 	wrlong	result1, fp
17c3c     30 4E 85 F1 | 	sub	fp, #48
17c40     A7 12 02 F6 | 	mov	arg01, fp
17c44     0C 4E 85 F1 | 	sub	fp, #12
17c48     5C DF BF FD | 	call	#_converttoint
17c4c     40 4E 05 F1 | 	add	fp, #64
17c50     A7 FA 61 FC | 	wrlong	result1, fp
17c54     28 4E 85 F1 | 	sub	fp, #40
17c58     A7 12 02 F6 | 	mov	arg01, fp
17c5c     18 4E 85 F1 | 	sub	fp, #24
17c60     44 DF BF FD | 	call	#_converttoint
17c64     44 4E 05 F1 | 	add	fp, #68
17c68     A7 FA 61 FC | 	wrlong	result1, fp
17c6c     20 4E 85 F1 | 	sub	fp, #32
17c70     A7 12 02 F6 | 	mov	arg01, fp
17c74     24 4E 85 F1 | 	sub	fp, #36
17c78     2C DF BF FD | 	call	#_converttoint
17c7c     48 4E 05 F1 | 	add	fp, #72
17c80     A7 FA 61 FC | 	wrlong	result1, fp
17c84     18 4E 85 F1 | 	sub	fp, #24
17c88     A7 12 02 F6 | 	mov	arg01, fp
17c8c     30 4E 85 F1 | 	sub	fp, #48
17c90     14 DF BF FD | 	call	#_converttoint
17c94     4C 4E 05 F1 | 	add	fp, #76
17c98     A7 FA 61 FC | 	wrlong	result1, fp
17c9c                 | ' 
17c9c                 | ' t5=pop()
17c9c                 | ' t4=pop()
17c9c                 | ' t3=pop()
17c9c                 | ' t2=pop()
17c9c                 | ' t1=pop()
17c9c                 | ' 
17c9c                 | ' ' do convert, defsprite is not a racing command
17c9c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17c9c                 | '  
17c9c                 | ' ' todo: check parameters for linits
17c9c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17c9c     10 4E 85 F1 | 	sub	fp, #16
17ca0     A7 16 02 FB | 	rdlong	arg03, fp
17ca4     3C 4E 85 F1 | 	sub	fp, #60
17ca8     02 16 66 F0 | 	shl	arg03, #2
17cac     51 00 00 FF 
17cb0     64 E5 05 F1 | 	add	objptr, ##41828
17cb4     F2 16 02 F1 | 	add	arg03, objptr
17cb8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17cbc     51 00 00 FF 
17cc0     64 E5 85 F1 | 	sub	objptr, ##41828
17cc4     2C 00 90 AD |  if_e	jmp	#LR__1990
17cc8     3C 4E 05 F1 | 	add	fp, #60
17ccc     A7 16 02 FB | 	rdlong	arg03, fp
17cd0     3C 4E 85 F1 | 	sub	fp, #60
17cd4     02 16 66 F0 | 	shl	arg03, #2
17cd8     51 00 00 FF 
17cdc     64 E5 05 F1 | 	add	objptr, ##41828
17ce0     F2 16 02 F1 | 	add	arg03, objptr
17ce4     0B 13 02 FB | 	rdlong	arg01, arg03
17ce8     51 00 00 FF 
17cec     64 E5 85 F1 | 	sub	objptr, ##41828
17cf0     9C CD B0 FD | 	call	#__system___gc_free
17cf4                 | LR__1990
17cf4     3C 4E 05 F1 | 	add	fp, #60
17cf8     A7 1E 02 FB | 	rdlong	local01, fp
17cfc     0C 4E 05 F1 | 	add	fp, #12
17d00     A7 16 02 FB | 	rdlong	arg03, fp
17d04     04 4E 05 F1 | 	add	fp, #4
17d08     A7 14 02 FB | 	rdlong	arg02, fp
17d0c     0A 17 02 FD | 	qmul	arg03, arg02
17d10     02 1E 66 F0 | 	shl	local01, #2
17d14     51 00 00 FF 
17d18     64 E5 05 F1 | 	add	objptr, ##41828
17d1c     F2 1E 02 F1 | 	add	local01, objptr
17d20     4C 4E 85 F1 | 	sub	fp, #76
17d24     51 00 00 FF 
17d28     64 E5 85 F1 | 	sub	objptr, ##41828
17d2c     18 12 62 FD | 	getqx	arg01
17d30     20 CC B0 FD | 	call	#__system___gc_alloc_managed
17d34     0F FB 61 FC | 	wrlong	result1, local01
17d38                 | ' for y=a3 to a3+a5-1
17d38     44 4E 05 F1 | 	add	fp, #68
17d3c     A7 20 02 FB | 	rdlong	local02, fp
17d40     0C 4E 05 F1 | 	add	fp, #12
17d44     A7 20 62 FC | 	wrlong	local02, fp
17d48     0C 4E 85 F1 | 	sub	fp, #12
17d4c     A7 22 02 FB | 	rdlong	local03, fp
17d50     08 4E 05 F1 | 	add	fp, #8
17d54     A7 24 02 FB | 	rdlong	local04, fp
17d58     4C 4E 85 F1 | 	sub	fp, #76
17d5c     12 23 02 F1 | 	add	local03, local04
17d60                 | LR__1991
17d60     50 4E 05 F1 | 	add	fp, #80
17d64     A7 20 02 FB | 	rdlong	local02, fp
17d68     50 4E 85 F1 | 	sub	fp, #80
17d6c     11 21 52 F2 | 	cmps	local02, local03 wc
17d70     F4 00 90 3D |  if_ae	jmp	#LR__1994
17d74                 | '   for x=a2 to a4+a2-1
17d74     40 4E 05 F1 | 	add	fp, #64
17d78     A7 1E 02 FB | 	rdlong	local01, fp
17d7c     14 4E 05 F1 | 	add	fp, #20
17d80     A7 1E 62 FC | 	wrlong	local01, fp
17d84     0C 4E 85 F1 | 	sub	fp, #12
17d88     A7 26 02 FB | 	rdlong	local05, fp
17d8c     08 4E 85 F1 | 	sub	fp, #8
17d90     A7 28 02 FB | 	rdlong	local06, fp
17d94     40 4E 85 F1 | 	sub	fp, #64
17d98     14 27 02 F1 | 	add	local05, local06
17d9c                 | LR__1992
17d9c     54 4E 05 F1 | 	add	fp, #84
17da0     A7 1E 02 FB | 	rdlong	local01, fp
17da4     54 4E 85 F1 | 	sub	fp, #84
17da8     13 1F 52 F2 | 	cmps	local01, local05 wc
17dac     A0 00 90 3D |  if_ae	jmp	#LR__1993
17db0     3C 4E 05 F1 | 	add	fp, #60
17db4     A7 28 02 FB | 	rdlong	local06, fp
17db8     18 4E 05 F1 | 	add	fp, #24
17dbc     A7 24 02 FB | 	rdlong	local04, fp
17dc0     14 4E 85 F1 | 	sub	fp, #20
17dc4     A7 20 02 FB | 	rdlong	local02, fp
17dc8     10 4E 05 F1 | 	add	fp, #16
17dcc     A7 1E 02 FB | 	rdlong	local01, fp
17dd0     0F 17 02 F6 | 	mov	arg03, local01
17dd4     0C 4E 85 F1 | 	sub	fp, #12
17dd8     A7 14 02 FB | 	rdlong	arg02, fp
17ddc     0A 17 82 F1 | 	sub	arg03, arg02
17de0     04 4E 05 F1 | 	add	fp, #4
17de4     A7 14 02 FB | 	rdlong	arg02, fp
17de8     0A 17 02 FD | 	qmul	arg03, arg02
17dec     02 28 66 F0 | 	shl	local06, #2
17df0     51 00 00 FF 
17df4     64 E5 05 F1 | 	add	objptr, ##41828
17df8     F2 28 02 F1 | 	add	local06, objptr
17dfc     14 29 02 FB | 	rdlong	local06, local06
17e00     12 2B 02 F6 | 	mov	local07, local04
17e04     10 2B 82 F1 | 	sub	local07, local02
17e08     51 00 00 FF 
17e0c     64 E5 85 F1 | 	sub	objptr, ##41828
17e10     F2 12 02 FB | 	rdlong	arg01, objptr
17e14     12 13 02 F1 | 	add	arg01, local04
17e18     48 4E 85 F1 | 	sub	fp, #72
17e1c     0A 1E 66 F0 | 	shl	local01, #10
17e20     0F 13 02 F1 | 	add	arg01, local01
17e24     18 24 62 FD | 	getqx	local04
17e28     12 2B 02 F1 | 	add	local07, local04
17e2c     14 2B 02 F1 | 	add	local07, local06
17e30     0C 59 B0 FD | 	call	#_pspeek
17e34     15 FB 41 FC | 	wrbyte	result1, local07
17e38     54 4E 05 F1 | 	add	fp, #84
17e3c     A7 2A 02 FB | 	rdlong	local07, fp
17e40     01 2A 06 F1 | 	add	local07, #1
17e44     A7 2A 62 FC | 	wrlong	local07, fp
17e48     54 4E 85 F1 | 	sub	fp, #84
17e4c     4C FF 9F FD | 	jmp	#LR__1992
17e50                 | LR__1993
17e50     50 4E 05 F1 | 	add	fp, #80
17e54     A7 2A 02 FB | 	rdlong	local07, fp
17e58     01 2A 06 F1 | 	add	local07, #1
17e5c     A7 2A 62 FC | 	wrlong	local07, fp
17e60     50 4E 85 F1 | 	sub	fp, #80
17e64     F8 FE 9F FD | 	jmp	#LR__1991
17e68                 | LR__1994
17e68     3C 4E 05 F1 | 	add	fp, #60
17e6c     A7 2A 02 FB | 	rdlong	local07, fp
17e70     15 13 02 F6 | 	mov	arg01, local07
17e74     3C 4E 85 F1 | 	sub	fp, #60
17e78     02 2A 66 F0 | 	shl	local07, #2
17e7c     51 00 00 FF 
17e80     64 E5 05 F1 | 	add	objptr, ##41828
17e84     F2 2A 02 F1 | 	add	local07, objptr
17e88     15 15 02 FB | 	rdlong	arg02, local07
17e8c     51 00 00 FF 
17e90     64 E5 85 F1 | 	sub	objptr, ##41828
17e94     78 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17e98     3C 4E 05 F1 | 	add	fp, #60
17e9c     A7 12 02 FB | 	rdlong	arg01, fp
17ea0     0C 4E 05 F1 | 	add	fp, #12
17ea4     A7 14 02 FB | 	rdlong	arg02, fp
17ea8     04 4E 05 F1 | 	add	fp, #4
17eac     A7 16 02 FB | 	rdlong	arg03, fp
17eb0     4C 4E 85 F1 | 	sub	fp, #76
17eb4     E8 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
17eb8     A7 F0 03 F6 | 	mov	ptra, fp
17ebc     B2 00 A0 FD | 	call	#popregs_
17ec0                 | _do_defsprite_ret
17ec0     2D 00 64 FD | 	ret
17ec4                 | 
17ec4                 | ' 
17ec4                 | ' sub do_sprite
17ec4                 | _do_sprite
17ec4     00 4A 05 F6 | 	mov	COUNT_, #0
17ec8     A8 00 A0 FD | 	call	#pushregs_
17ecc     30 F0 07 F1 | 	add	ptra, #48
17ed0     10 3C BF FD | 	call	#_pop
17ed4     FD 16 02 F6 | 	mov	arg03, result1
17ed8     FE 14 02 F6 | 	mov	arg02, result2
17edc     FF 12 02 F6 | 	mov	arg01, result3
17ee0     18 4E 05 F1 | 	add	fp, #24
17ee4     A7 16 62 FC | 	wrlong	arg03, fp
17ee8     04 4E 05 F1 | 	add	fp, #4
17eec     A7 14 62 FC | 	wrlong	arg02, fp
17ef0     04 4E 05 F1 | 	add	fp, #4
17ef4     A7 12 62 FC | 	wrlong	arg01, fp
17ef8     20 4E 85 F1 | 	sub	fp, #32
17efc     E4 3B BF FD | 	call	#_pop
17f00     FD 16 02 F6 | 	mov	arg03, result1
17f04     FE 14 02 F6 | 	mov	arg02, result2
17f08     FF 12 02 F6 | 	mov	arg01, result3
17f0c     0C 4E 05 F1 | 	add	fp, #12
17f10     A7 16 62 FC | 	wrlong	arg03, fp
17f14     04 4E 05 F1 | 	add	fp, #4
17f18     A7 14 62 FC | 	wrlong	arg02, fp
17f1c     04 4E 05 F1 | 	add	fp, #4
17f20     A7 12 62 FC | 	wrlong	arg01, fp
17f24     14 4E 85 F1 | 	sub	fp, #20
17f28     B8 3B BF FD | 	call	#_pop
17f2c     FF 16 02 F6 | 	mov	arg03, result3
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 FC 61 FC | 	wrlong	result2, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 16 62 FC | 	wrlong	arg03, fp
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     A7 12 02 F6 | 	mov	arg01, fp
17f4c     58 DC BF FD | 	call	#_converttoint
17f50     24 4E 05 F1 | 	add	fp, #36
17f54     A7 FA 61 FC | 	wrlong	result1, fp
17f58     18 4E 85 F1 | 	sub	fp, #24
17f5c     A7 12 02 F6 | 	mov	arg01, fp
17f60     0C 4E 85 F1 | 	sub	fp, #12
17f64     40 DC BF FD | 	call	#_converttoint
17f68     28 4E 05 F1 | 	add	fp, #40
17f6c     A7 FA 61 FC | 	wrlong	result1, fp
17f70     10 4E 85 F1 | 	sub	fp, #16
17f74     A7 12 02 F6 | 	mov	arg01, fp
17f78     18 4E 85 F1 | 	sub	fp, #24
17f7c     28 DC BF FD | 	call	#_converttoint
17f80     2C 4E 05 F1 | 	add	fp, #44
17f84     A7 FA 61 FC | 	wrlong	result1, fp
17f88     08 4E 85 F1 | 	sub	fp, #8
17f8c     A7 12 02 FB | 	rdlong	arg01, fp
17f90     04 4E 05 F1 | 	add	fp, #4
17f94     A7 14 02 FB | 	rdlong	arg02, fp
17f98     FD 16 02 F6 | 	mov	arg03, result1
17f9c     28 4E 85 F1 | 	sub	fp, #40
17fa0     94 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17fa4     A7 F0 03 F6 | 	mov	ptra, fp
17fa8     B2 00 A0 FD | 	call	#popregs_
17fac                 | _do_sprite_ret
17fac     2D 00 64 FD | 	ret
17fb0                 | 
17fb0                 | ' 
17fb0                 | ' sub do_mousex
17fb0                 | _do_mousex
17fb0     00 4A 05 F6 | 	mov	COUNT_, #0
17fb4     A8 00 A0 FD | 	call	#pushregs_
17fb8     0C F0 07 F1 | 	add	ptra, #12
17fbc     08 4E 05 F1 | 	add	fp, #8
17fc0     A7 3A 68 FC | 	wrlong	#29, fp
17fc4     08 4E 85 F1 | 	sub	fp, #8
17fc8     51 00 00 FF 
17fcc     1C E5 05 F1 | 	add	objptr, ##41756
17fd0     F2 12 02 FB | 	rdlong	arg01, objptr
17fd4     51 00 00 FF 
17fd8     1C E5 85 F1 | 	sub	objptr, ##41756
17fdc     A7 12 62 FC | 	wrlong	arg01, fp
17fe0     A7 12 02 F6 | 	mov	arg01, fp
17fe4     94 3B BF FD | 	call	#_push
17fe8     A7 F0 03 F6 | 	mov	ptra, fp
17fec     B2 00 A0 FD | 	call	#popregs_
17ff0                 | _do_mousex_ret
17ff0     2D 00 64 FD | 	ret
17ff4                 | 
17ff4                 | ' 
17ff4                 | ' sub do_mousey
17ff4                 | _do_mousey
17ff4     00 4A 05 F6 | 	mov	COUNT_, #0
17ff8     A8 00 A0 FD | 	call	#pushregs_
17ffc     0C F0 07 F1 | 	add	ptra, #12
18000     08 4E 05 F1 | 	add	fp, #8
18004     A7 3A 68 FC | 	wrlong	#29, fp
18008     08 4E 85 F1 | 	sub	fp, #8
1800c     51 00 00 FF 
18010     20 E5 05 F1 | 	add	objptr, ##41760
18014     F2 12 02 FB | 	rdlong	arg01, objptr
18018     51 00 00 FF 
1801c     20 E5 85 F1 | 	sub	objptr, ##41760
18020     A7 12 62 FC | 	wrlong	arg01, fp
18024     A7 12 02 F6 | 	mov	arg01, fp
18028     50 3B BF FD | 	call	#_push
1802c     A7 F0 03 F6 | 	mov	ptra, fp
18030     B2 00 A0 FD | 	call	#popregs_
18034                 | _do_mousey_ret
18034     2D 00 64 FD | 	ret
18038                 | 
18038                 | ' 
18038                 | ' sub do_mousew
18038                 | _do_mousew
18038     00 4A 05 F6 | 	mov	COUNT_, #0
1803c     A8 00 A0 FD | 	call	#pushregs_
18040     0C F0 07 F1 | 	add	ptra, #12
18044     08 4E 05 F1 | 	add	fp, #8
18048     A7 38 68 FC | 	wrlong	#28, fp
1804c     08 4E 85 F1 | 	sub	fp, #8
18050     51 00 00 FF 
18054     28 E5 05 F1 | 	add	objptr, ##41768
18058     F2 12 02 FB | 	rdlong	arg01, objptr
1805c     51 00 00 FF 
18060     28 E5 85 F1 | 	sub	objptr, ##41768
18064     A7 12 62 FC | 	wrlong	arg01, fp
18068     A7 12 02 F6 | 	mov	arg01, fp
1806c     0C 3B BF FD | 	call	#_push
18070     A7 F0 03 F6 | 	mov	ptra, fp
18074     B2 00 A0 FD | 	call	#popregs_
18078                 | _do_mousew_ret
18078     2D 00 64 FD | 	ret
1807c                 | 
1807c                 | ' 
1807c                 | ' sub do_mousek
1807c                 | _do_mousek
1807c     00 4A 05 F6 | 	mov	COUNT_, #0
18080     A8 00 A0 FD | 	call	#pushregs_
18084     0C F0 07 F1 | 	add	ptra, #12
18088     08 4E 05 F1 | 	add	fp, #8
1808c     A7 3A 68 FC | 	wrlong	#29, fp
18090     08 4E 85 F1 | 	sub	fp, #8
18094     51 00 00 FF 
18098     24 E5 05 F1 | 	add	objptr, ##41764
1809c     F2 12 02 FB | 	rdlong	arg01, objptr
180a0     51 00 00 FF 
180a4     24 E5 85 F1 | 	sub	objptr, ##41764
180a8     A7 12 62 FC | 	wrlong	arg01, fp
180ac     A7 12 02 F6 | 	mov	arg01, fp
180b0     C8 3A BF FD | 	call	#_push
180b4     A7 F0 03 F6 | 	mov	ptra, fp
180b8     B2 00 A0 FD | 	call	#popregs_
180bc                 | _do_mousek_ret
180bc     2D 00 64 FD | 	ret
180c0                 | 
180c0                 | ' 
180c0                 | ' 
180c0                 | ' sub do_rdpin
180c0                 | _do_rdpin
180c0     00 4A 05 F6 | 	mov	COUNT_, #0
180c4     A8 00 A0 FD | 	call	#pushregs_
180c8     0C F0 07 F1 | 	add	ptra, #12
180cc     14 3A BF FD | 	call	#_pop
180d0     A7 FA 61 FC | 	wrlong	result1, fp
180d4     04 4E 05 F1 | 	add	fp, #4
180d8     A7 FC 61 FC | 	wrlong	result2, fp
180dc     04 4E 05 F1 | 	add	fp, #4
180e0     A7 FE 61 FC | 	wrlong	result3, fp
180e4     08 4E 85 F1 | 	sub	fp, #8
180e8     A7 12 02 F6 | 	mov	arg01, fp
180ec     B8 DA BF FD | 	call	#_converttoint
180f0     FD FA 89 FA | 	rdpin	result1, result1
180f4     52 00 00 FF 
180f8     14 E4 05 F1 | 	add	objptr, ##42004
180fc     F2 FA 61 FC | 	wrlong	result1, objptr
18100     52 00 00 FF 
18104     14 E4 85 F1 | 	sub	objptr, ##42004
18108     08 4E 05 F1 | 	add	fp, #8
1810c     A7 3A 68 FC | 	wrlong	#29, fp
18110     08 4E 85 F1 | 	sub	fp, #8
18114     A7 08 68 FC | 	wrlong	#4, fp
18118     A7 12 02 F6 | 	mov	arg01, fp
1811c     5C 3A BF FD | 	call	#_push
18120     A7 F0 03 F6 | 	mov	ptra, fp
18124     B2 00 A0 FD | 	call	#popregs_
18128                 | _do_rdpin_ret
18128     2D 00 64 FD | 	ret
1812c                 | 
1812c                 | ' 
1812c                 | ' sub do_rqpin
1812c                 | _do_rqpin
1812c     00 4A 05 F6 | 	mov	COUNT_, #0
18130     A8 00 A0 FD | 	call	#pushregs_
18134     0C F0 07 F1 | 	add	ptra, #12
18138     A8 39 BF FD | 	call	#_pop
1813c     A7 FA 61 FC | 	wrlong	result1, fp
18140     04 4E 05 F1 | 	add	fp, #4
18144     A7 FC 61 FC | 	wrlong	result2, fp
18148     04 4E 05 F1 | 	add	fp, #4
1814c     A7 FE 61 FC | 	wrlong	result3, fp
18150     08 4E 85 F1 | 	sub	fp, #8
18154     A7 12 02 F6 | 	mov	arg01, fp
18158     4C DA BF FD | 	call	#_converttoint
1815c     FD 12 02 F6 | 	mov	arg01, result1
18160     00 FA 05 F6 | 	mov	result1, #0
18164     09 FB 81 FA | 	rqpin	result1, arg01
18168     52 00 00 FF 
1816c     14 E4 05 F1 | 	add	objptr, ##42004
18170     F2 FA 61 FC | 	wrlong	result1, objptr
18174     52 00 00 FF 
18178     14 E4 85 F1 | 	sub	objptr, ##42004
1817c     08 4E 05 F1 | 	add	fp, #8
18180     A7 3A 68 FC | 	wrlong	#29, fp
18184     08 4E 85 F1 | 	sub	fp, #8
18188     A7 08 68 FC | 	wrlong	#4, fp
1818c     A7 12 02 F6 | 	mov	arg01, fp
18190     E8 39 BF FD | 	call	#_push
18194     A7 F0 03 F6 | 	mov	ptra, fp
18198     B2 00 A0 FD | 	call	#popregs_
1819c                 | _do_rqpin_ret
1819c     2D 00 64 FD | 	ret
181a0                 | 
181a0                 | ' 
181a0                 | ' sub do_pinread
181a0                 | _do_pinread
181a0     00 4A 05 F6 | 	mov	COUNT_, #0
181a4     A8 00 A0 FD | 	call	#pushregs_
181a8     0C F0 07 F1 | 	add	ptra, #12
181ac     34 39 BF FD | 	call	#_pop
181b0     A7 FA 61 FC | 	wrlong	result1, fp
181b4     04 4E 05 F1 | 	add	fp, #4
181b8     A7 FC 61 FC | 	wrlong	result2, fp
181bc     04 4E 05 F1 | 	add	fp, #4
181c0     A7 FE 61 FC | 	wrlong	result3, fp
181c4     08 4E 85 F1 | 	sub	fp, #8
181c8     A7 12 02 F6 | 	mov	arg01, fp
181cc     D8 D9 BF FD | 	call	#_converttoint
181d0     FD 12 02 F6 | 	mov	arg01, result1
181d4     20 12 CE F7 | 	test	arg01, #32 wz
181d8     FF FB 01 56 |  if_ne	mov	result1, inb
181dc     FE FB 01 A6 |  if_e	mov	result1, ina
181e0     09 FB 41 F0 | 	shr	result1, arg01
181e4     06 12 46 F0 | 	shr	arg01, #6
181e8     09 FB 41 F7 | 	zerox	result1, arg01
181ec     52 00 00 FF 
181f0     14 E4 05 F1 | 	add	objptr, ##42004
181f4     F2 FA 61 FC | 	wrlong	result1, objptr
181f8     52 00 00 FF 
181fc     14 E4 85 F1 | 	sub	objptr, ##42004
18200     08 4E 05 F1 | 	add	fp, #8
18204     A7 3A 68 FC | 	wrlong	#29, fp
18208     08 4E 85 F1 | 	sub	fp, #8
1820c     A7 08 68 FC | 	wrlong	#4, fp
18210     A7 12 02 F6 | 	mov	arg01, fp
18214     64 39 BF FD | 	call	#_push
18218     A7 F0 03 F6 | 	mov	ptra, fp
1821c     B2 00 A0 FD | 	call	#popregs_
18220                 | _do_pinread_ret
18220     2D 00 64 FD | 	ret
18224                 | 
18224                 | ' 
18224                 | ' sub do_gettime
18224                 | _do_gettime
18224     02 4A 05 F6 | 	mov	COUNT_, #2
18228     A8 00 A0 FD | 	call	#pushregs_
1822c     14 F0 07 F1 | 	add	ptra, #20
18230                 | ' 
18230                 | ' const asm 
18230     1A 1E 72 FD | 	getct	local01 wc
18234     1A 20 62 FD | 	getct	local02
18238                 | ' 
18238                 | ' return hi1, lo1
18238     10 FD 01 F6 | 	mov	result2, local02
1823c     A7 1E 62 FC | 	wrlong	local01, fp
18240     04 4E 05 F1 | 	add	fp, #4
18244     A7 FC 61 FC | 	wrlong	result2, fp
18248     0C 4E 05 F1 | 	add	fp, #12
1824c     A7 3A 68 FC | 	wrlong	#29, fp
18250     0C 4E 85 F1 | 	sub	fp, #12
18254     A7 12 02 FB | 	rdlong	arg01, fp
18258     04 4E 05 F1 | 	add	fp, #4
1825c     A7 12 62 FC | 	wrlong	arg01, fp
18260     08 4E 85 F1 | 	sub	fp, #8
18264     A7 12 02 FB | 	rdlong	arg01, fp
18268     0C 4E 05 F1 | 	add	fp, #12
1826c     A7 12 62 FC | 	wrlong	arg01, fp
18270     04 4E 85 F1 | 	sub	fp, #4
18274     A7 12 02 F6 | 	mov	arg01, fp
18278     08 4E 85 F1 | 	sub	fp, #8
1827c     FC 38 BF FD | 	call	#_push
18280     A7 F0 03 F6 | 	mov	ptra, fp
18284     B2 00 A0 FD | 	call	#popregs_
18288                 | _do_gettime_ret
18288     2D 00 64 FD | 	ret
1828c                 | 
1828c                 | '    
1828c                 | ' 
1828c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1828c                 | ' 
1828c                 | ' '' ----------------------------- Clear the screen
1828c                 | ' 
1828c                 | ' sub do_cls
1828c                 | _do_cls
1828c     37 00 00 FF 
18290     3C E4 05 F1 | 	add	objptr, ##28220
18294     F2 12 02 FB | 	rdlong	arg01, objptr
18298     04 E4 85 F1 | 	sub	objptr, #4
1829c     F2 14 02 FB | 	rdlong	arg02, objptr
182a0     37 00 00 FF 
182a4     38 E4 85 F1 | 	sub	objptr, ##28216
182a8     14 6F B0 FD | 	call	#_hg010b_spin2_cls
182ac     37 00 00 FF 
182b0     3C E4 05 F1 | 	add	objptr, ##28220
182b4     F2 14 02 FB | 	rdlong	arg02, objptr
182b8     14 E4 85 F1 | 	sub	objptr, #20
182bc     F2 14 62 FC | 	wrlong	arg02, objptr
182c0     37 00 00 FF 
182c4     28 E4 85 F1 | 	sub	objptr, ##28200
182c8                 | _do_cls_ret
182c8     2D 00 64 FD | 	ret
182cc                 | 
182cc                 | ' 
182cc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
182cc                 | ' 
182cc                 | ' sub do_color
182cc                 | _do_color
182cc     03 4A 05 F6 | 	mov	COUNT_, #3
182d0     A8 00 A0 FD | 	call	#pushregs_
182d4     0C 38 BF FD | 	call	#_pop
182d8     FD 1E 02 F6 | 	mov	local01, result1
182dc     FE 20 02 F6 | 	mov	local02, result2
182e0     FF 22 02 F6 | 	mov	local03, result3
182e4     37 00 00 FF 
182e8     28 E4 05 F1 | 	add	objptr, ##28200
182ec     F2 1E 62 FC | 	wrlong	local01, objptr
182f0     37 00 00 FF 
182f4     28 E4 85 F1 | 	sub	objptr, ##28200
182f8     A7 F0 03 F6 | 	mov	ptra, fp
182fc     B2 00 A0 FD | 	call	#popregs_
18300                 | _do_color_ret
18300     2D 00 64 FD | 	ret
18304                 | 
18304                 | ' 
18304                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
18304                 | ' 
18304                 | ' sub do_plot
18304                 | _do_plot
18304     00 4A 05 F6 | 	mov	COUNT_, #0
18308     A8 00 A0 FD | 	call	#pushregs_
1830c     20 F0 07 F1 | 	add	ptra, #32
18310     D0 37 BF FD | 	call	#_pop
18314     FD 16 02 F6 | 	mov	arg03, result1
18318     FE 14 02 F6 | 	mov	arg02, result2
1831c     FF 12 02 F6 | 	mov	arg01, result3
18320     0C 4E 05 F1 | 	add	fp, #12
18324     A7 16 62 FC | 	wrlong	arg03, fp
18328     04 4E 05 F1 | 	add	fp, #4
1832c     A7 14 62 FC | 	wrlong	arg02, fp
18330     04 4E 05 F1 | 	add	fp, #4
18334     A7 12 62 FC | 	wrlong	arg01, fp
18338     14 4E 85 F1 | 	sub	fp, #20
1833c     A4 37 BF FD | 	call	#_pop
18340     FF 16 02 F6 | 	mov	arg03, result3
18344     A7 FA 61 FC | 	wrlong	result1, fp
18348     04 4E 05 F1 | 	add	fp, #4
1834c     A7 FC 61 FC | 	wrlong	result2, fp
18350     04 4E 05 F1 | 	add	fp, #4
18354     A7 16 62 FC | 	wrlong	arg03, fp
18358     08 4E 85 F1 | 	sub	fp, #8
1835c     A7 12 02 F6 | 	mov	arg01, fp
18360     44 D8 BF FD | 	call	#_converttoint
18364     18 4E 05 F1 | 	add	fp, #24
18368     A7 FA 61 FC | 	wrlong	result1, fp
1836c     0C 4E 85 F1 | 	sub	fp, #12
18370     A7 12 02 F6 | 	mov	arg01, fp
18374     0C 4E 85 F1 | 	sub	fp, #12
18378     2C D8 BF FD | 	call	#_converttoint
1837c     1C 4E 05 F1 | 	add	fp, #28
18380     A7 FA 61 FC | 	wrlong	result1, fp
18384     04 4E 85 F1 | 	sub	fp, #4
18388     A7 16 02 FB | 	rdlong	arg03, fp
1838c     37 00 00 FF 
18390     2C E4 05 F1 | 	add	objptr, ##28204
18394     F2 16 62 FC | 	wrlong	arg03, objptr
18398     04 4E 05 F1 | 	add	fp, #4
1839c     A7 14 02 FB | 	rdlong	arg02, fp
183a0     1C 4E 85 F1 | 	sub	fp, #28
183a4     04 E4 05 F1 | 	add	objptr, #4
183a8     F2 14 62 FC | 	wrlong	arg02, objptr
183ac     04 E4 85 F1 | 	sub	objptr, #4
183b0     F2 12 02 FB | 	rdlong	arg01, objptr
183b4     04 E4 85 F1 | 	sub	objptr, #4
183b8     F2 16 02 FB | 	rdlong	arg03, objptr
183bc     37 00 00 FF 
183c0     28 E4 85 F1 | 	sub	objptr, ##28200
183c4     24 61 B0 FD | 	call	#_hg010b_spin2_putpixel
183c8     A7 F0 03 F6 | 	mov	ptra, fp
183cc     B2 00 A0 FD | 	call	#popregs_
183d0                 | _do_plot_ret
183d0     2D 00 64 FD | 	ret
183d4                 | 
183d4                 | ' 
183d4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
183d4                 | ' 
183d4                 | ' sub do_draw
183d4                 | _do_draw
183d4     00 4A 05 F6 | 	mov	COUNT_, #0
183d8     A8 00 A0 FD | 	call	#pushregs_
183dc     20 F0 07 F1 | 	add	ptra, #32
183e0     00 37 BF FD | 	call	#_pop
183e4     FD 1A 02 F6 | 	mov	arg05, result1
183e8     FE 18 02 F6 | 	mov	arg04, result2
183ec     FF 16 02 F6 | 	mov	arg03, result3
183f0     0C 4E 05 F1 | 	add	fp, #12
183f4     A7 1A 62 FC | 	wrlong	arg05, fp
183f8     04 4E 05 F1 | 	add	fp, #4
183fc     A7 18 62 FC | 	wrlong	arg04, fp
18400     04 4E 05 F1 | 	add	fp, #4
18404     A7 16 62 FC | 	wrlong	arg03, fp
18408     14 4E 85 F1 | 	sub	fp, #20
1840c     D4 36 BF FD | 	call	#_pop
18410     FF 1A 02 F6 | 	mov	arg05, result3
18414     A7 FA 61 FC | 	wrlong	result1, fp
18418     04 4E 05 F1 | 	add	fp, #4
1841c     A7 FC 61 FC | 	wrlong	result2, fp
18420     04 4E 05 F1 | 	add	fp, #4
18424     A7 1A 62 FC | 	wrlong	arg05, fp
18428     08 4E 85 F1 | 	sub	fp, #8
1842c     A7 12 02 F6 | 	mov	arg01, fp
18430     74 D7 BF FD | 	call	#_converttoint
18434     18 4E 05 F1 | 	add	fp, #24
18438     A7 FA 61 FC | 	wrlong	result1, fp
1843c     0C 4E 85 F1 | 	sub	fp, #12
18440     A7 12 02 F6 | 	mov	arg01, fp
18444     0C 4E 85 F1 | 	sub	fp, #12
18448     5C D7 BF FD | 	call	#_converttoint
1844c     1C 4E 05 F1 | 	add	fp, #28
18450     A7 FA 61 FC | 	wrlong	result1, fp
18454     37 00 00 FF 
18458     2C E4 05 F1 | 	add	objptr, ##28204
1845c     F2 12 02 FB | 	rdlong	arg01, objptr
18460     04 E4 05 F1 | 	add	objptr, #4
18464     F2 14 02 FB | 	rdlong	arg02, objptr
18468     04 4E 85 F1 | 	sub	fp, #4
1846c     A7 16 02 FB | 	rdlong	arg03, fp
18470     FD 18 02 F6 | 	mov	arg04, result1
18474     18 4E 85 F1 | 	sub	fp, #24
18478     08 E4 85 F1 | 	sub	objptr, #8
1847c     F2 1A 02 FB | 	rdlong	arg05, objptr
18480     37 00 00 FF 
18484     28 E4 85 F1 | 	sub	objptr, ##28200
18488     10 63 B0 FD | 	call	#_hg010b_spin2_draw
1848c     18 4E 05 F1 | 	add	fp, #24
18490     A7 1A 02 FB | 	rdlong	arg05, fp
18494     37 00 00 FF 
18498     2C E4 05 F1 | 	add	objptr, ##28204
1849c     F2 1A 62 FC | 	wrlong	arg05, objptr
184a0     04 4E 05 F1 | 	add	fp, #4
184a4     A7 1A 02 FB | 	rdlong	arg05, fp
184a8     1C 4E 85 F1 | 	sub	fp, #28
184ac     04 E4 05 F1 | 	add	objptr, #4
184b0     F2 1A 62 FC | 	wrlong	arg05, objptr
184b4     37 00 00 FF 
184b8     30 E4 85 F1 | 	sub	objptr, ##28208
184bc     A7 F0 03 F6 | 	mov	ptra, fp
184c0     B2 00 A0 FD | 	call	#popregs_
184c4                 | _do_draw_ret
184c4     2D 00 64 FD | 	ret
184c8                 | 
184c8                 | ' 
184c8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
184c8                 | ' 
184c8                 | ' sub do_fcircle
184c8                 | _do_fcircle
184c8     02 4A 05 F6 | 	mov	COUNT_, #2
184cc     A8 00 A0 FD | 	call	#pushregs_
184d0     24 F0 07 F1 | 	add	ptra, #36
184d4     0C 36 BF FD | 	call	#_pop
184d8     FD 18 02 F6 | 	mov	arg04, result1
184dc     FE 16 02 F6 | 	mov	arg03, result2
184e0     FF 14 02 F6 | 	mov	arg02, result3
184e4     18 4E 05 F1 | 	add	fp, #24
184e8     A7 18 62 FC | 	wrlong	arg04, fp
184ec     04 4E 05 F1 | 	add	fp, #4
184f0     A7 16 62 FC | 	wrlong	arg03, fp
184f4     04 4E 05 F1 | 	add	fp, #4
184f8     A7 14 62 FC | 	wrlong	arg02, fp
184fc     20 4E 85 F1 | 	sub	fp, #32
18500     E0 35 BF FD | 	call	#_pop
18504     FD 18 02 F6 | 	mov	arg04, result1
18508     FE 16 02 F6 | 	mov	arg03, result2
1850c     FF 1E 02 F6 | 	mov	local01, result3
18510     0C 4E 05 F1 | 	add	fp, #12
18514     A7 18 62 FC | 	wrlong	arg04, fp
18518     04 4E 05 F1 | 	add	fp, #4
1851c     A7 16 62 FC | 	wrlong	arg03, fp
18520     04 4E 05 F1 | 	add	fp, #4
18524     A7 1E 62 FC | 	wrlong	local01, fp
18528     14 4E 85 F1 | 	sub	fp, #20
1852c     B4 35 BF FD | 	call	#_pop
18530     A7 FA 61 FC | 	wrlong	result1, fp
18534     04 4E 05 F1 | 	add	fp, #4
18538     A7 FC 61 FC | 	wrlong	result2, fp
1853c     04 4E 05 F1 | 	add	fp, #4
18540     A7 FE 61 FC | 	wrlong	result3, fp
18544                 | ' 
18544                 | ' t3=pop()
18544                 | ' t2=pop()
18544                 | ' t1=pop()
18544                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18544     FF 18 02 F6 | 	mov	arg04, result3
18548     08 4E 85 F1 | 	sub	fp, #8
1854c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18550     08 4E 05 51 |  if_ne	add	fp, #8
18554     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18558     08 4E 85 51 |  if_ne	sub	fp, #8
1855c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18560     7C 00 90 5D |  if_ne	jmp	#LR__2000
18564     14 4E 05 F1 | 	add	fp, #20
18568     A7 1E 02 FB | 	rdlong	local01, fp
1856c     14 4E 85 F1 | 	sub	fp, #20
18570     1C 1E 0E F2 | 	cmp	local01, #28 wz
18574     14 4E 05 51 |  if_ne	add	fp, #20
18578     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1857c     14 4E 85 51 |  if_ne	sub	fp, #20
18580     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18584     58 00 90 5D |  if_ne	jmp	#LR__2000
18588     20 4E 05 F1 | 	add	fp, #32
1858c     A7 1E 02 FB | 	rdlong	local01, fp
18590     20 4E 85 F1 | 	sub	fp, #32
18594     1C 1E 0E F2 | 	cmp	local01, #28 wz
18598     20 4E 05 51 |  if_ne	add	fp, #32
1859c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185a0     20 4E 85 51 |  if_ne	sub	fp, #32
185a4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185a8     34 00 90 5D |  if_ne	jmp	#LR__2000
185ac     A7 12 02 FB | 	rdlong	arg01, fp
185b0     0C 4E 05 F1 | 	add	fp, #12
185b4     A7 14 02 FB | 	rdlong	arg02, fp
185b8     0C 4E 05 F1 | 	add	fp, #12
185bc     A7 16 02 FB | 	rdlong	arg03, fp
185c0     18 4E 85 F1 | 	sub	fp, #24
185c4     37 00 00 FF 
185c8     28 E4 05 F1 | 	add	objptr, ##28200
185cc     F2 18 02 FB | 	rdlong	arg04, objptr
185d0     37 00 00 FF 
185d4     28 E4 85 F1 | 	sub	objptr, ##28200
185d8     44 66 B0 FD | 	call	#_hg010b_spin2_fcircle
185dc                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
185dc     54 00 90 FD | 	jmp	#LR__2001
185e0                 | LR__2000
185e0     A7 12 02 F6 | 	mov	arg01, fp
185e4     C0 D5 BF FD | 	call	#_converttoint
185e8     FD 1E 02 F6 | 	mov	local01, result1
185ec     0C 4E 05 F1 | 	add	fp, #12
185f0     A7 12 02 F6 | 	mov	arg01, fp
185f4     0C 4E 85 F1 | 	sub	fp, #12
185f8     AC D5 BF FD | 	call	#_converttoint
185fc     FD 20 02 F6 | 	mov	local02, result1
18600     18 4E 05 F1 | 	add	fp, #24
18604     A7 12 02 F6 | 	mov	arg01, fp
18608     18 4E 85 F1 | 	sub	fp, #24
1860c     98 D5 BF FD | 	call	#_converttoint
18610     FD 16 02 F6 | 	mov	arg03, result1
18614     37 00 00 FF 
18618     28 E4 05 F1 | 	add	objptr, ##28200
1861c     F2 18 02 FB | 	rdlong	arg04, objptr
18620     37 00 00 FF 
18624     28 E4 85 F1 | 	sub	objptr, ##28200
18628     0F 13 02 F6 | 	mov	arg01, local01
1862c     10 15 02 F6 | 	mov	arg02, local02
18630     EC 65 B0 FD | 	call	#_hg010b_spin2_fcircle
18634                 | LR__2001
18634     A7 F0 03 F6 | 	mov	ptra, fp
18638     B2 00 A0 FD | 	call	#popregs_
1863c                 | _do_fcircle_ret
1863c     2D 00 64 FD | 	ret
18640                 | 
18640                 | ' 
18640                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
18640                 | ' 
18640                 | ' sub do_circle
18640                 | _do_circle
18640     02 4A 05 F6 | 	mov	COUNT_, #2
18644     A8 00 A0 FD | 	call	#pushregs_
18648     24 F0 07 F1 | 	add	ptra, #36
1864c     94 34 BF FD | 	call	#_pop
18650     FD 18 02 F6 | 	mov	arg04, result1
18654     FE 16 02 F6 | 	mov	arg03, result2
18658     FF 14 02 F6 | 	mov	arg02, result3
1865c     18 4E 05 F1 | 	add	fp, #24
18660     A7 18 62 FC | 	wrlong	arg04, fp
18664     04 4E 05 F1 | 	add	fp, #4
18668     A7 16 62 FC | 	wrlong	arg03, fp
1866c     04 4E 05 F1 | 	add	fp, #4
18670     A7 14 62 FC | 	wrlong	arg02, fp
18674     20 4E 85 F1 | 	sub	fp, #32
18678     68 34 BF FD | 	call	#_pop
1867c     FD 18 02 F6 | 	mov	arg04, result1
18680     FE 16 02 F6 | 	mov	arg03, result2
18684     FF 1E 02 F6 | 	mov	local01, result3
18688     0C 4E 05 F1 | 	add	fp, #12
1868c     A7 18 62 FC | 	wrlong	arg04, fp
18690     04 4E 05 F1 | 	add	fp, #4
18694     A7 16 62 FC | 	wrlong	arg03, fp
18698     04 4E 05 F1 | 	add	fp, #4
1869c     A7 1E 62 FC | 	wrlong	local01, fp
186a0     14 4E 85 F1 | 	sub	fp, #20
186a4     3C 34 BF FD | 	call	#_pop
186a8     A7 FA 61 FC | 	wrlong	result1, fp
186ac     04 4E 05 F1 | 	add	fp, #4
186b0     A7 FC 61 FC | 	wrlong	result2, fp
186b4     04 4E 05 F1 | 	add	fp, #4
186b8     A7 FE 61 FC | 	wrlong	result3, fp
186bc                 | ' 
186bc                 | ' t3=pop()
186bc                 | ' t2=pop()
186bc                 | ' t1=pop()
186bc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
186bc     FF 18 02 F6 | 	mov	arg04, result3
186c0     08 4E 85 F1 | 	sub	fp, #8
186c4     1C 18 0E F2 | 	cmp	arg04, #28 wz
186c8     08 4E 05 51 |  if_ne	add	fp, #8
186cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
186d0     08 4E 85 51 |  if_ne	sub	fp, #8
186d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
186d8     7C 00 90 5D |  if_ne	jmp	#LR__2010
186dc     14 4E 05 F1 | 	add	fp, #20
186e0     A7 1E 02 FB | 	rdlong	local01, fp
186e4     14 4E 85 F1 | 	sub	fp, #20
186e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
186ec     14 4E 05 51 |  if_ne	add	fp, #20
186f0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
186f4     14 4E 85 51 |  if_ne	sub	fp, #20
186f8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
186fc     58 00 90 5D |  if_ne	jmp	#LR__2010
18700     20 4E 05 F1 | 	add	fp, #32
18704     A7 1E 02 FB | 	rdlong	local01, fp
18708     20 4E 85 F1 | 	sub	fp, #32
1870c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18710     20 4E 05 51 |  if_ne	add	fp, #32
18714     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18718     20 4E 85 51 |  if_ne	sub	fp, #32
1871c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18720     34 00 90 5D |  if_ne	jmp	#LR__2010
18724     A7 12 02 FB | 	rdlong	arg01, fp
18728     0C 4E 05 F1 | 	add	fp, #12
1872c     A7 14 02 FB | 	rdlong	arg02, fp
18730     0C 4E 05 F1 | 	add	fp, #12
18734     A7 16 02 FB | 	rdlong	arg03, fp
18738     18 4E 85 F1 | 	sub	fp, #24
1873c     37 00 00 FF 
18740     28 E4 05 F1 | 	add	objptr, ##28200
18744     F2 18 02 FB | 	rdlong	arg04, objptr
18748     37 00 00 FF 
1874c     28 E4 85 F1 | 	sub	objptr, ##28200
18750     D8 65 B0 FD | 	call	#_hg010b_spin2_circle
18754                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18754     54 00 90 FD | 	jmp	#LR__2011
18758                 | LR__2010
18758     A7 12 02 F6 | 	mov	arg01, fp
1875c     48 D4 BF FD | 	call	#_converttoint
18760     FD 1E 02 F6 | 	mov	local01, result1
18764     0C 4E 05 F1 | 	add	fp, #12
18768     A7 12 02 F6 | 	mov	arg01, fp
1876c     0C 4E 85 F1 | 	sub	fp, #12
18770     34 D4 BF FD | 	call	#_converttoint
18774     FD 20 02 F6 | 	mov	local02, result1
18778     18 4E 05 F1 | 	add	fp, #24
1877c     A7 12 02 F6 | 	mov	arg01, fp
18780     18 4E 85 F1 | 	sub	fp, #24
18784     20 D4 BF FD | 	call	#_converttoint
18788     FD 16 02 F6 | 	mov	arg03, result1
1878c     37 00 00 FF 
18790     28 E4 05 F1 | 	add	objptr, ##28200
18794     F2 18 02 FB | 	rdlong	arg04, objptr
18798     37 00 00 FF 
1879c     28 E4 85 F1 | 	sub	objptr, ##28200
187a0     0F 13 02 F6 | 	mov	arg01, local01
187a4     10 15 02 F6 | 	mov	arg02, local02
187a8     80 65 B0 FD | 	call	#_hg010b_spin2_circle
187ac                 | LR__2011
187ac     A7 F0 03 F6 | 	mov	ptra, fp
187b0     B2 00 A0 FD | 	call	#popregs_
187b4                 | _do_circle_ret
187b4     2D 00 64 FD | 	ret
187b8                 | 
187b8                 | ' 
187b8                 | ' ' -------------------------- Draw a rectangle
187b8                 | ' 
187b8                 | ' sub do_box
187b8                 | _do_box
187b8     03 4A 05 F6 | 	mov	COUNT_, #3
187bc     A8 00 A0 FD | 	call	#pushregs_
187c0     30 F0 07 F1 | 	add	ptra, #48
187c4     1C 33 BF FD | 	call	#_pop
187c8     FD 1A 02 F6 | 	mov	arg05, result1
187cc     FE 18 02 F6 | 	mov	arg04, result2
187d0     FF 16 02 F6 | 	mov	arg03, result3
187d4     24 4E 05 F1 | 	add	fp, #36
187d8     A7 1A 62 FC | 	wrlong	arg05, fp
187dc     04 4E 05 F1 | 	add	fp, #4
187e0     A7 18 62 FC | 	wrlong	arg04, fp
187e4     04 4E 05 F1 | 	add	fp, #4
187e8     A7 16 62 FC | 	wrlong	arg03, fp
187ec     2C 4E 85 F1 | 	sub	fp, #44
187f0     F0 32 BF FD | 	call	#_pop
187f4     FD 1A 02 F6 | 	mov	arg05, result1
187f8     FE 18 02 F6 | 	mov	arg04, result2
187fc     FF 16 02 F6 | 	mov	arg03, result3
18800     18 4E 05 F1 | 	add	fp, #24
18804     A7 1A 62 FC | 	wrlong	arg05, fp
18808     04 4E 05 F1 | 	add	fp, #4
1880c     A7 18 62 FC | 	wrlong	arg04, fp
18810     04 4E 05 F1 | 	add	fp, #4
18814     A7 16 62 FC | 	wrlong	arg03, fp
18818     20 4E 85 F1 | 	sub	fp, #32
1881c     C4 32 BF FD | 	call	#_pop
18820     FD 1A 02 F6 | 	mov	arg05, result1
18824     FE 18 02 F6 | 	mov	arg04, result2
18828     FF 1E 02 F6 | 	mov	local01, result3
1882c     0C 4E 05 F1 | 	add	fp, #12
18830     A7 1A 62 FC | 	wrlong	arg05, fp
18834     04 4E 05 F1 | 	add	fp, #4
18838     A7 18 62 FC | 	wrlong	arg04, fp
1883c     04 4E 05 F1 | 	add	fp, #4
18840     A7 1E 62 FC | 	wrlong	local01, fp
18844     14 4E 85 F1 | 	sub	fp, #20
18848     98 32 BF FD | 	call	#_pop
1884c     A7 FA 61 FC | 	wrlong	result1, fp
18850     04 4E 05 F1 | 	add	fp, #4
18854     A7 FC 61 FC | 	wrlong	result2, fp
18858     04 4E 05 F1 | 	add	fp, #4
1885c     A7 FE 61 FC | 	wrlong	result3, fp
18860                 | ' 
18860                 | ' t4=pop()
18860                 | ' t3=pop()
18860                 | ' t2=pop()
18860                 | ' t1=pop()
18860                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18860     FF 1A 02 F6 | 	mov	arg05, result3
18864     08 4E 85 F1 | 	sub	fp, #8
18868     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1886c     08 4E 05 51 |  if_ne	add	fp, #8
18870     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18874     08 4E 85 51 |  if_ne	sub	fp, #8
18878     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1887c     A8 00 90 5D |  if_ne	jmp	#LR__2020
18880     14 4E 05 F1 | 	add	fp, #20
18884     A7 1E 02 FB | 	rdlong	local01, fp
18888     14 4E 85 F1 | 	sub	fp, #20
1888c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18890     14 4E 05 51 |  if_ne	add	fp, #20
18894     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18898     14 4E 85 51 |  if_ne	sub	fp, #20
1889c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
188a0     84 00 90 5D |  if_ne	jmp	#LR__2020
188a4     20 4E 05 F1 | 	add	fp, #32
188a8     A7 1E 02 FB | 	rdlong	local01, fp
188ac     20 4E 85 F1 | 	sub	fp, #32
188b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
188b4     20 4E 05 51 |  if_ne	add	fp, #32
188b8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
188bc     20 4E 85 51 |  if_ne	sub	fp, #32
188c0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
188c4     60 00 90 5D |  if_ne	jmp	#LR__2020
188c8     2C 4E 05 F1 | 	add	fp, #44
188cc     A7 1E 02 FB | 	rdlong	local01, fp
188d0     2C 4E 85 F1 | 	sub	fp, #44
188d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
188d8     2C 4E 05 51 |  if_ne	add	fp, #44
188dc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
188e0     2C 4E 85 51 |  if_ne	sub	fp, #44
188e4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
188e8     3C 00 90 5D |  if_ne	jmp	#LR__2020
188ec     A7 12 02 FB | 	rdlong	arg01, fp
188f0     0C 4E 05 F1 | 	add	fp, #12
188f4     A7 14 02 FB | 	rdlong	arg02, fp
188f8     0C 4E 05 F1 | 	add	fp, #12
188fc     A7 16 02 FB | 	rdlong	arg03, fp
18900     0C 4E 05 F1 | 	add	fp, #12
18904     A7 18 02 FB | 	rdlong	arg04, fp
18908     24 4E 85 F1 | 	sub	fp, #36
1890c     37 00 00 FF 
18910     28 E4 05 F1 | 	add	objptr, ##28200
18914     F2 1A 02 FB | 	rdlong	arg05, objptr
18918     37 00 00 FF 
1891c     28 E4 85 F1 | 	sub	objptr, ##28200
18920     D4 65 B0 FD | 	call	#_hg010b_spin2_box
18924                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18924     6C 00 90 FD | 	jmp	#LR__2021
18928                 | LR__2020
18928     A7 12 02 F6 | 	mov	arg01, fp
1892c     78 D2 BF FD | 	call	#_converttoint
18930     FD 20 02 F6 | 	mov	local02, result1
18934     0C 4E 05 F1 | 	add	fp, #12
18938     A7 12 02 F6 | 	mov	arg01, fp
1893c     0C 4E 85 F1 | 	sub	fp, #12
18940     64 D2 BF FD | 	call	#_converttoint
18944     FD 22 02 F6 | 	mov	local03, result1
18948     18 4E 05 F1 | 	add	fp, #24
1894c     A7 12 02 F6 | 	mov	arg01, fp
18950     18 4E 85 F1 | 	sub	fp, #24
18954     50 D2 BF FD | 	call	#_converttoint
18958     FD 1E 02 F6 | 	mov	local01, result1
1895c     24 4E 05 F1 | 	add	fp, #36
18960     A7 12 02 F6 | 	mov	arg01, fp
18964     24 4E 85 F1 | 	sub	fp, #36
18968     3C D2 BF FD | 	call	#_converttoint
1896c     FD 18 02 F6 | 	mov	arg04, result1
18970     37 00 00 FF 
18974     28 E4 05 F1 | 	add	objptr, ##28200
18978     F2 1A 02 FB | 	rdlong	arg05, objptr
1897c     37 00 00 FF 
18980     28 E4 85 F1 | 	sub	objptr, ##28200
18984     10 13 02 F6 | 	mov	arg01, local02
18988     11 15 02 F6 | 	mov	arg02, local03
1898c     0F 17 02 F6 | 	mov	arg03, local01
18990     64 65 B0 FD | 	call	#_hg010b_spin2_box
18994                 | LR__2021
18994     A7 F0 03 F6 | 	mov	ptra, fp
18998     B2 00 A0 FD | 	call	#popregs_
1899c                 | _do_box_ret
1899c     2D 00 64 FD | 	ret
189a0                 | 
189a0                 | ' 
189a0                 | ' sub do_fill
189a0                 | _do_fill
189a0     03 4A 05 F6 | 	mov	COUNT_, #3
189a4     A8 00 A0 FD | 	call	#pushregs_
189a8     30 F0 07 F1 | 	add	ptra, #48
189ac     34 31 BF FD | 	call	#_pop
189b0     FD 18 02 F6 | 	mov	arg04, result1
189b4     FE 16 02 F6 | 	mov	arg03, result2
189b8     FF 14 02 F6 | 	mov	arg02, result3
189bc     24 4E 05 F1 | 	add	fp, #36
189c0     A7 18 62 FC | 	wrlong	arg04, fp
189c4     04 4E 05 F1 | 	add	fp, #4
189c8     A7 16 62 FC | 	wrlong	arg03, fp
189cc     04 4E 05 F1 | 	add	fp, #4
189d0     A7 14 62 FC | 	wrlong	arg02, fp
189d4     2C 4E 85 F1 | 	sub	fp, #44
189d8     08 31 BF FD | 	call	#_pop
189dc     FD 18 02 F6 | 	mov	arg04, result1
189e0     FE 16 02 F6 | 	mov	arg03, result2
189e4     FF 14 02 F6 | 	mov	arg02, result3
189e8     18 4E 05 F1 | 	add	fp, #24
189ec     A7 18 62 FC | 	wrlong	arg04, fp
189f0     04 4E 05 F1 | 	add	fp, #4
189f4     A7 16 62 FC | 	wrlong	arg03, fp
189f8     04 4E 05 F1 | 	add	fp, #4
189fc     A7 14 62 FC | 	wrlong	arg02, fp
18a00     20 4E 85 F1 | 	sub	fp, #32
18a04     DC 30 BF FD | 	call	#_pop
18a08     FD 18 02 F6 | 	mov	arg04, result1
18a0c     FE 16 02 F6 | 	mov	arg03, result2
18a10     FF 1E 02 F6 | 	mov	local01, result3
18a14     0C 4E 05 F1 | 	add	fp, #12
18a18     A7 18 62 FC | 	wrlong	arg04, fp
18a1c     04 4E 05 F1 | 	add	fp, #4
18a20     A7 16 62 FC | 	wrlong	arg03, fp
18a24     04 4E 05 F1 | 	add	fp, #4
18a28     A7 1E 62 FC | 	wrlong	local01, fp
18a2c     14 4E 85 F1 | 	sub	fp, #20
18a30     B0 30 BF FD | 	call	#_pop
18a34     A7 FA 61 FC | 	wrlong	result1, fp
18a38     04 4E 05 F1 | 	add	fp, #4
18a3c     A7 FC 61 FC | 	wrlong	result2, fp
18a40     04 4E 05 F1 | 	add	fp, #4
18a44     A7 FE 61 FC | 	wrlong	result3, fp
18a48                 | ' 
18a48                 | ' t4=pop()
18a48                 | ' t3=pop()
18a48                 | ' t2=pop()
18a48                 | ' t1=pop()
18a48                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18a48     FF 18 02 F6 | 	mov	arg04, result3
18a4c     08 4E 85 F1 | 	sub	fp, #8
18a50     1C 18 0E F2 | 	cmp	arg04, #28 wz
18a54     08 4E 05 51 |  if_ne	add	fp, #8
18a58     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18a5c     08 4E 85 51 |  if_ne	sub	fp, #8
18a60     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18a64     94 00 90 5D |  if_ne	jmp	#LR__2030
18a68     14 4E 05 F1 | 	add	fp, #20
18a6c     A7 1E 02 FB | 	rdlong	local01, fp
18a70     14 4E 85 F1 | 	sub	fp, #20
18a74     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a78     14 4E 05 51 |  if_ne	add	fp, #20
18a7c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18a80     14 4E 85 51 |  if_ne	sub	fp, #20
18a84     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18a88     70 00 90 5D |  if_ne	jmp	#LR__2030
18a8c     20 4E 05 F1 | 	add	fp, #32
18a90     A7 1E 02 FB | 	rdlong	local01, fp
18a94     20 4E 85 F1 | 	sub	fp, #32
18a98     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a9c     20 4E 05 51 |  if_ne	add	fp, #32
18aa0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18aa4     20 4E 85 51 |  if_ne	sub	fp, #32
18aa8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18aac     4C 00 90 5D |  if_ne	jmp	#LR__2030
18ab0     2C 4E 05 F1 | 	add	fp, #44
18ab4     A7 1E 02 FB | 	rdlong	local01, fp
18ab8     2C 4E 85 F1 | 	sub	fp, #44
18abc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ac0     2C 4E 05 51 |  if_ne	add	fp, #44
18ac4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18ac8     2C 4E 85 51 |  if_ne	sub	fp, #44
18acc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18ad0     28 00 90 5D |  if_ne	jmp	#LR__2030
18ad4     A7 12 02 FB | 	rdlong	arg01, fp
18ad8     0C 4E 05 F1 | 	add	fp, #12
18adc     A7 14 02 FB | 	rdlong	arg02, fp
18ae0     0C 4E 05 F1 | 	add	fp, #12
18ae4     A7 16 02 FB | 	rdlong	arg03, fp
18ae8     0C 4E 05 F1 | 	add	fp, #12
18aec     A7 18 02 FB | 	rdlong	arg04, fp
18af0     24 4E 85 F1 | 	sub	fp, #36
18af4     94 5E B0 FD | 	call	#_hg010b_spin2_fill
18af8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18af8     58 00 90 FD | 	jmp	#LR__2031
18afc                 | LR__2030
18afc     A7 12 02 F6 | 	mov	arg01, fp
18b00     A4 D0 BF FD | 	call	#_converttoint
18b04     FD 20 02 F6 | 	mov	local02, result1
18b08     0C 4E 05 F1 | 	add	fp, #12
18b0c     A7 12 02 F6 | 	mov	arg01, fp
18b10     0C 4E 85 F1 | 	sub	fp, #12
18b14     90 D0 BF FD | 	call	#_converttoint
18b18     FD 22 02 F6 | 	mov	local03, result1
18b1c     18 4E 05 F1 | 	add	fp, #24
18b20     A7 12 02 F6 | 	mov	arg01, fp
18b24     18 4E 85 F1 | 	sub	fp, #24
18b28     7C D0 BF FD | 	call	#_converttoint
18b2c     FD 1E 02 F6 | 	mov	local01, result1
18b30     24 4E 05 F1 | 	add	fp, #36
18b34     A7 12 02 F6 | 	mov	arg01, fp
18b38     24 4E 85 F1 | 	sub	fp, #36
18b3c     68 D0 BF FD | 	call	#_converttoint
18b40     FD 18 02 F6 | 	mov	arg04, result1
18b44     10 13 02 F6 | 	mov	arg01, local02
18b48     11 15 02 F6 | 	mov	arg02, local03
18b4c     0F 17 02 F6 | 	mov	arg03, local01
18b50     38 5E B0 FD | 	call	#_hg010b_spin2_fill
18b54                 | LR__2031
18b54     A7 F0 03 F6 | 	mov	ptra, fp
18b58     B2 00 A0 FD | 	call	#popregs_
18b5c                 | _do_fill_ret
18b5c     2D 00 64 FD | 	ret
18b60                 | 
18b60                 | ' 
18b60                 | ' ' -------------------------- Draw a frane
18b60                 | ' 
18b60                 | ' sub do_frame
18b60                 | _do_frame
18b60     03 4A 05 F6 | 	mov	COUNT_, #3
18b64     A8 00 A0 FD | 	call	#pushregs_
18b68     30 F0 07 F1 | 	add	ptra, #48
18b6c     74 2F BF FD | 	call	#_pop
18b70     FD 1A 02 F6 | 	mov	arg05, result1
18b74     FE 18 02 F6 | 	mov	arg04, result2
18b78     FF 16 02 F6 | 	mov	arg03, result3
18b7c     24 4E 05 F1 | 	add	fp, #36
18b80     A7 1A 62 FC | 	wrlong	arg05, fp
18b84     04 4E 05 F1 | 	add	fp, #4
18b88     A7 18 62 FC | 	wrlong	arg04, fp
18b8c     04 4E 05 F1 | 	add	fp, #4
18b90     A7 16 62 FC | 	wrlong	arg03, fp
18b94     2C 4E 85 F1 | 	sub	fp, #44
18b98     48 2F BF FD | 	call	#_pop
18b9c     FD 1A 02 F6 | 	mov	arg05, result1
18ba0     FE 18 02 F6 | 	mov	arg04, result2
18ba4     FF 16 02 F6 | 	mov	arg03, result3
18ba8     18 4E 05 F1 | 	add	fp, #24
18bac     A7 1A 62 FC | 	wrlong	arg05, fp
18bb0     04 4E 05 F1 | 	add	fp, #4
18bb4     A7 18 62 FC | 	wrlong	arg04, fp
18bb8     04 4E 05 F1 | 	add	fp, #4
18bbc     A7 16 62 FC | 	wrlong	arg03, fp
18bc0     20 4E 85 F1 | 	sub	fp, #32
18bc4     1C 2F BF FD | 	call	#_pop
18bc8     FD 1A 02 F6 | 	mov	arg05, result1
18bcc     FE 18 02 F6 | 	mov	arg04, result2
18bd0     FF 1E 02 F6 | 	mov	local01, result3
18bd4     0C 4E 05 F1 | 	add	fp, #12
18bd8     A7 1A 62 FC | 	wrlong	arg05, fp
18bdc     04 4E 05 F1 | 	add	fp, #4
18be0     A7 18 62 FC | 	wrlong	arg04, fp
18be4     04 4E 05 F1 | 	add	fp, #4
18be8     A7 1E 62 FC | 	wrlong	local01, fp
18bec     14 4E 85 F1 | 	sub	fp, #20
18bf0     F0 2E BF FD | 	call	#_pop
18bf4     A7 FA 61 FC | 	wrlong	result1, fp
18bf8     04 4E 05 F1 | 	add	fp, #4
18bfc     A7 FC 61 FC | 	wrlong	result2, fp
18c00     04 4E 05 F1 | 	add	fp, #4
18c04     A7 FE 61 FC | 	wrlong	result3, fp
18c08                 | ' 
18c08                 | ' t4=pop()
18c08                 | ' t3=pop()
18c08                 | ' t2=pop()
18c08                 | ' t1=pop()
18c08                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18c08     FF 1A 02 F6 | 	mov	arg05, result3
18c0c     08 4E 85 F1 | 	sub	fp, #8
18c10     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18c14     08 4E 05 51 |  if_ne	add	fp, #8
18c18     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18c1c     08 4E 85 51 |  if_ne	sub	fp, #8
18c20     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18c24     A8 00 90 5D |  if_ne	jmp	#LR__2040
18c28     14 4E 05 F1 | 	add	fp, #20
18c2c     A7 1E 02 FB | 	rdlong	local01, fp
18c30     14 4E 85 F1 | 	sub	fp, #20
18c34     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c38     14 4E 05 51 |  if_ne	add	fp, #20
18c3c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c40     14 4E 85 51 |  if_ne	sub	fp, #20
18c44     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c48     84 00 90 5D |  if_ne	jmp	#LR__2040
18c4c     20 4E 05 F1 | 	add	fp, #32
18c50     A7 1E 02 FB | 	rdlong	local01, fp
18c54     20 4E 85 F1 | 	sub	fp, #32
18c58     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c5c     20 4E 05 51 |  if_ne	add	fp, #32
18c60     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c64     20 4E 85 51 |  if_ne	sub	fp, #32
18c68     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c6c     60 00 90 5D |  if_ne	jmp	#LR__2040
18c70     2C 4E 05 F1 | 	add	fp, #44
18c74     A7 1E 02 FB | 	rdlong	local01, fp
18c78     2C 4E 85 F1 | 	sub	fp, #44
18c7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c80     2C 4E 05 51 |  if_ne	add	fp, #44
18c84     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c88     2C 4E 85 51 |  if_ne	sub	fp, #44
18c8c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c90     3C 00 90 5D |  if_ne	jmp	#LR__2040
18c94     A7 12 02 FB | 	rdlong	arg01, fp
18c98     0C 4E 05 F1 | 	add	fp, #12
18c9c     A7 14 02 FB | 	rdlong	arg02, fp
18ca0     0C 4E 05 F1 | 	add	fp, #12
18ca4     A7 16 02 FB | 	rdlong	arg03, fp
18ca8     0C 4E 05 F1 | 	add	fp, #12
18cac     A7 18 02 FB | 	rdlong	arg04, fp
18cb0     24 4E 85 F1 | 	sub	fp, #36
18cb4     37 00 00 FF 
18cb8     28 E4 05 F1 | 	add	objptr, ##28200
18cbc     F2 1A 02 FB | 	rdlong	arg05, objptr
18cc0     37 00 00 FF 
18cc4     28 E4 85 F1 | 	sub	objptr, ##28200
18cc8     AC 61 B0 FD | 	call	#_hg010b_spin2_frame
18ccc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18ccc     6C 00 90 FD | 	jmp	#LR__2041
18cd0                 | LR__2040
18cd0     A7 12 02 F6 | 	mov	arg01, fp
18cd4     D0 CE BF FD | 	call	#_converttoint
18cd8     FD 20 02 F6 | 	mov	local02, result1
18cdc     0C 4E 05 F1 | 	add	fp, #12
18ce0     A7 12 02 F6 | 	mov	arg01, fp
18ce4     0C 4E 85 F1 | 	sub	fp, #12
18ce8     BC CE BF FD | 	call	#_converttoint
18cec     FD 22 02 F6 | 	mov	local03, result1
18cf0     18 4E 05 F1 | 	add	fp, #24
18cf4     A7 12 02 F6 | 	mov	arg01, fp
18cf8     18 4E 85 F1 | 	sub	fp, #24
18cfc     A8 CE BF FD | 	call	#_converttoint
18d00     FD 1E 02 F6 | 	mov	local01, result1
18d04     24 4E 05 F1 | 	add	fp, #36
18d08     A7 12 02 F6 | 	mov	arg01, fp
18d0c     24 4E 85 F1 | 	sub	fp, #36
18d10     94 CE BF FD | 	call	#_converttoint
18d14     FD 18 02 F6 | 	mov	arg04, result1
18d18     37 00 00 FF 
18d1c     28 E4 05 F1 | 	add	objptr, ##28200
18d20     F2 1A 02 FB | 	rdlong	arg05, objptr
18d24     37 00 00 FF 
18d28     28 E4 85 F1 | 	sub	objptr, ##28200
18d2c     10 13 02 F6 | 	mov	arg01, local02
18d30     11 15 02 F6 | 	mov	arg02, local03
18d34     0F 17 02 F6 | 	mov	arg03, local01
18d38     3C 61 B0 FD | 	call	#_hg010b_spin2_frame
18d3c                 | LR__2041
18d3c     A7 F0 03 F6 | 	mov	ptra, fp
18d40     B2 00 A0 FD | 	call	#popregs_
18d44                 | _do_frame_ret
18d44     2D 00 64 FD | 	ret
18d48                 | 
18d48                 | ' 
18d48                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18d48                 | ' 
18d48                 | ' ' ------------------------- Print to the screem
18d48                 | ' 
18d48                 | ' sub do_print  
18d48                 | _do_print
18d48     0B 4A 05 F6 | 	mov	COUNT_, #11
18d4c     A8 00 A0 FD | 	call	#pushregs_
18d50     00 24 06 F6 | 	mov	local04, #0
18d54     8C 2D BF FD | 	call	#_pop
18d58     FD 26 02 F6 | 	mov	local05, result1
18d5c     FE 28 02 F6 | 	mov	local06, result2
18d60     FF 2A 02 F6 | 	mov	local07, result3
18d64     13 1F 02 F6 | 	mov	local01, local05
18d68     14 21 02 F6 | 	mov	local02, local06
18d6c     15 23 02 F6 | 	mov	local03, local07
18d70                 | '  
18d70                 | ' r=0
18d70                 | ' t1=pop() 
18d70                 | ' 'print t1.result_type,t1.result.uresult
18d70                 | ' 
18d70                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18d70     21 22 0E F2 | 	cmp	local03, #33 wz
18d74     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18d78     20 00 90 5D |  if_ne	jmp	#LR__2050
18d7c     11 25 02 F6 | 	mov	local04, local03
18d80     60 2D BF FD | 	call	#_pop
18d84     FD 26 02 F6 | 	mov	local05, result1
18d88     FE 28 02 F6 | 	mov	local06, result2
18d8c     FF 2A 02 F6 | 	mov	local07, result3
18d90     13 1F 02 F6 | 	mov	local01, local05
18d94     14 21 02 F6 | 	mov	local02, local06
18d98     15 23 02 F6 | 	mov	local03, local07
18d9c                 | LR__2050
18d9c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18d9c     20 22 0E F2 | 	cmp	local03, #32 wz
18da0     11 25 02 A6 |  if_e	mov	local04, local03
18da4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18da4     FF 22 0E F2 | 	cmp	local03, #255 wz
18da8     0C 00 90 5D |  if_ne	jmp	#LR__2051
18dac     0F 13 02 F6 | 	mov	arg01, local01
18db0     50 47 B0 FD | 	call	#_printerror
18db4     D4 04 90 FD | 	jmp	#LR__2070
18db8                 | LR__2051
18db8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18db8     2B 22 0E F2 | 	cmp	local03, #43 wz
18dbc     14 00 90 5D |  if_ne	jmp	#LR__2052
18dc0     0F 13 02 F6 | 	mov	arg01, local01
18dc4     BC 85 BF FD | 	call	#_convertstring
18dc8     FD 26 02 F6 | 	mov	local05, result1
18dcc     13 1F 02 F6 | 	mov	local01, local05
18dd0     1F 22 06 F6 | 	mov	local03, #31
18dd4                 | LR__2052
18dd4                 | ' 
18dd4                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18dd4     2C 22 0E F2 | 	cmp	local03, #44 wz
18dd8     80 00 90 5D |  if_ne	jmp	#LR__2053
18ddc     00 12 06 F6 | 	mov	arg01, #0
18de0     F8 D6 B0 FD | 	call	#__system___getiolock_0540
18de4     FD 12 02 F6 | 	mov	arg01, result1
18de8     B0 7C B0 FD | 	call	#__system___lockmem
18dec     85 01 00 FF 
18df0     54 15 06 F6 | 	mov	arg02, ##@LR__5506
18df4     00 12 06 F6 | 	mov	arg01, #0
18df8     00 16 06 F6 | 	mov	arg03, #0
18dfc     90 89 B0 FD | 	call	#__system___basic_print_string
18e00     0A 2C 06 F6 | 	mov	local08, #10
18e04     00 12 06 F6 | 	mov	arg01, #0
18e08     0F 15 02 F6 | 	mov	arg02, local01
18e0c     00 16 06 F6 | 	mov	arg03, #0
18e10     0A 18 06 F6 | 	mov	arg04, #10
18e14     BC 89 B0 FD | 	call	#__system___basic_print_integer
18e18     FD 2E 02 F6 | 	mov	local09, result1
18e1c     00 12 06 F6 | 	mov	arg01, #0
18e20     0A 14 06 F6 | 	mov	arg02, #10
18e24     00 16 06 F6 | 	mov	arg03, #0
18e28     0C 89 B0 FD | 	call	#__system___basic_print_char
18e2c     01 30 06 F6 | 	mov	local10, #1
18e30     00 12 06 F6 | 	mov	arg01, #0
18e34     A4 D6 B0 FD | 	call	#__system___getiolock_0540
18e38     FD 00 68 FC | 	wrlong	#0, result1
18e3c     00 32 06 F6 | 	mov	local11, #0
18e40     A0 2C BF FD | 	call	#_pop
18e44     FD 26 02 F6 | 	mov	local05, result1
18e48     FE 28 02 F6 | 	mov	local06, result2
18e4c     FF 2A 02 F6 | 	mov	local07, result3
18e50     13 1F 02 F6 | 	mov	local01, local05
18e54     14 21 02 F6 | 	mov	local02, local06
18e58     15 23 02 F6 | 	mov	local03, local07
18e5c                 | LR__2053
18e5c                 | ' 
18e5c                 | ' if r=print_mod_comma  then
18e5c     21 24 0E F2 | 	cmp	local04, #33 wz
18e60     AC 01 90 5D |  if_ne	jmp	#LR__2058
18e64                 | '   if t1.result_type=result_int then print t1.result.iresult,
18e64     1C 22 0E F2 | 	cmp	local03, #28 wz
18e68     64 00 90 5D |  if_ne	jmp	#LR__2054
18e6c     00 12 06 F6 | 	mov	arg01, #0
18e70     68 D6 B0 FD | 	call	#__system___getiolock_0540
18e74     FD 12 02 F6 | 	mov	arg01, result1
18e78     20 7C B0 FD | 	call	#__system___lockmem
18e7c     00 28 06 F6 | 	mov	local06, #0
18e80     00 12 06 F6 | 	mov	arg01, #0
18e84     0F 15 02 F6 | 	mov	arg02, local01
18e88     00 16 06 F6 | 	mov	arg03, #0
18e8c     0A 18 06 F6 | 	mov	arg04, #10
18e90     40 89 B0 FD | 	call	#__system___basic_print_integer
18e94     FD 2A 02 F6 | 	mov	local07, result1
18e98     14 27 02 F6 | 	mov	local05, local06
18e9c     15 27 02 F1 | 	add	local05, local07
18ea0     00 32 06 F6 | 	mov	local11, #0
18ea4     00 12 06 F6 | 	mov	arg01, #0
18ea8     09 14 06 F6 | 	mov	arg02, #9
18eac     00 16 06 F6 | 	mov	arg03, #0
18eb0     84 88 B0 FD | 	call	#__system___basic_print_char
18eb4     FD 2E 02 F6 | 	mov	local09, result1
18eb8     FD 26 02 F1 | 	add	local05, result1
18ebc     00 12 06 F6 | 	mov	arg01, #0
18ec0     18 D6 B0 FD | 	call	#__system___getiolock_0540
18ec4     FD 00 68 FC | 	wrlong	#0, result1
18ec8     00 FA 05 F6 | 	mov	result1, #0
18ecc     00 30 06 F6 | 	mov	local10, #0
18ed0                 | LR__2054
18ed0                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18ed0     1D 22 0E F2 | 	cmp	local03, #29 wz
18ed4     64 00 90 5D |  if_ne	jmp	#LR__2055
18ed8     00 12 06 F6 | 	mov	arg01, #0
18edc     FC D5 B0 FD | 	call	#__system___getiolock_0540
18ee0     FD 12 02 F6 | 	mov	arg01, result1
18ee4     B4 7B B0 FD | 	call	#__system___lockmem
18ee8     00 28 06 F6 | 	mov	local06, #0
18eec     00 12 06 F6 | 	mov	arg01, #0
18ef0     0F 15 02 F6 | 	mov	arg02, local01
18ef4     00 16 06 F6 | 	mov	arg03, #0
18ef8     0A 18 06 F6 | 	mov	arg04, #10
18efc     14 89 B0 FD | 	call	#__system___basic_print_unsigned
18f00     FD 2A 02 F6 | 	mov	local07, result1
18f04     14 27 02 F6 | 	mov	local05, local06
18f08     15 27 02 F1 | 	add	local05, local07
18f0c     00 32 06 F6 | 	mov	local11, #0
18f10     00 12 06 F6 | 	mov	arg01, #0
18f14     09 14 06 F6 | 	mov	arg02, #9
18f18     00 16 06 F6 | 	mov	arg03, #0
18f1c     18 88 B0 FD | 	call	#__system___basic_print_char
18f20     FD 2E 02 F6 | 	mov	local09, result1
18f24     FD 26 02 F1 | 	add	local05, result1
18f28     00 12 06 F6 | 	mov	arg01, #0
18f2c     AC D5 B0 FD | 	call	#__system___getiolock_0540
18f30     FD 00 68 FC | 	wrlong	#0, result1
18f34     00 FA 05 F6 | 	mov	result1, #0
18f38     00 30 06 F6 | 	mov	local10, #0
18f3c                 | LR__2055
18f3c                 | '   if t1.result_type=result_float then print t1.result.fresult,
18f3c     1E 22 0E F2 | 	cmp	local03, #30 wz
18f40     64 00 90 5D |  if_ne	jmp	#LR__2056
18f44     00 12 06 F6 | 	mov	arg01, #0
18f48     90 D5 B0 FD | 	call	#__system___getiolock_0540
18f4c     FD 12 02 F6 | 	mov	arg01, result1
18f50     48 7B B0 FD | 	call	#__system___lockmem
18f54     00 28 06 F6 | 	mov	local06, #0
18f58     00 12 06 F6 | 	mov	arg01, #0
18f5c     0F 15 02 F6 | 	mov	arg02, local01
18f60     00 16 06 F6 | 	mov	arg03, #0
18f64     23 18 06 F6 | 	mov	arg04, #35
18f68     FC AC B0 FD | 	call	#__system___basic_print_float
18f6c     FD 2A 02 F6 | 	mov	local07, result1
18f70     14 27 02 F6 | 	mov	local05, local06
18f74     15 27 02 F1 | 	add	local05, local07
18f78     00 32 06 F6 | 	mov	local11, #0
18f7c     00 12 06 F6 | 	mov	arg01, #0
18f80     09 14 06 F6 | 	mov	arg02, #9
18f84     00 16 06 F6 | 	mov	arg03, #0
18f88     AC 87 B0 FD | 	call	#__system___basic_print_char
18f8c     FD 2E 02 F6 | 	mov	local09, result1
18f90     FD 26 02 F1 | 	add	local05, result1
18f94     00 12 06 F6 | 	mov	arg01, #0
18f98     40 D5 B0 FD | 	call	#__system___getiolock_0540
18f9c     FD 00 68 FC | 	wrlong	#0, result1
18fa0     00 FA 05 F6 | 	mov	result1, #0
18fa4     00 30 06 F6 | 	mov	local10, #0
18fa8                 | LR__2056
18fa8                 | '   if t1.result_type=result_string then print t1.result.sresult,
18fa8     1F 22 0E F2 | 	cmp	local03, #31 wz
18fac     60 00 90 5D |  if_ne	jmp	#LR__2057
18fb0     00 12 06 F6 | 	mov	arg01, #0
18fb4     24 D5 B0 FD | 	call	#__system___getiolock_0540
18fb8     FD 12 02 F6 | 	mov	arg01, result1
18fbc     DC 7A B0 FD | 	call	#__system___lockmem
18fc0     00 28 06 F6 | 	mov	local06, #0
18fc4     00 12 06 F6 | 	mov	arg01, #0
18fc8     0F 15 02 F6 | 	mov	arg02, local01
18fcc     00 16 06 F6 | 	mov	arg03, #0
18fd0     BC 87 B0 FD | 	call	#__system___basic_print_string
18fd4     FD 2A 02 F6 | 	mov	local07, result1
18fd8     14 27 02 F6 | 	mov	local05, local06
18fdc     15 27 02 F1 | 	add	local05, local07
18fe0     00 32 06 F6 | 	mov	local11, #0
18fe4     00 12 06 F6 | 	mov	arg01, #0
18fe8     09 14 06 F6 | 	mov	arg02, #9
18fec     00 16 06 F6 | 	mov	arg03, #0
18ff0     44 87 B0 FD | 	call	#__system___basic_print_char
18ff4     FD 2E 02 F6 | 	mov	local09, result1
18ff8     FD 26 02 F1 | 	add	local05, result1
18ffc     00 12 06 F6 | 	mov	arg01, #0
19000     D8 D4 B0 FD | 	call	#__system___getiolock_0540
19004     FD 00 68 FC | 	wrlong	#0, result1
19008     00 FA 05 F6 | 	mov	result1, #0
1900c     00 30 06 F6 | 	mov	local10, #0
19010                 | LR__2057
19010                 | LR__2058
19010                 | ' if r=print_mod_semicolon then 
19010     22 24 0E F2 | 	cmp	local04, #34 wz
19014     1C 01 90 5D |  if_ne	jmp	#LR__2063
19018                 | '   if t1.result_type=result_int then print t1.result.iresult;
19018     1C 22 0E F2 | 	cmp	local03, #28 wz
1901c     50 00 90 5D |  if_ne	jmp	#LR__2059
19020     00 12 06 F6 | 	mov	arg01, #0
19024     B4 D4 B0 FD | 	call	#__system___getiolock_0540
19028     FD 12 02 F6 | 	mov	arg01, result1
1902c     6C 7A B0 FD | 	call	#__system___lockmem
19030     00 28 06 F6 | 	mov	local06, #0
19034     00 30 06 F6 | 	mov	local10, #0
19038     0A 32 06 F6 | 	mov	local11, #10
1903c     00 12 06 F6 | 	mov	arg01, #0
19040     0F 15 02 F6 | 	mov	arg02, local01
19044     00 16 06 F6 | 	mov	arg03, #0
19048     0A 18 06 F6 | 	mov	arg04, #10
1904c     84 87 B0 FD | 	call	#__system___basic_print_integer
19050     FD 2A 02 F6 | 	mov	local07, result1
19054     14 27 02 F6 | 	mov	local05, local06
19058     15 27 02 F1 | 	add	local05, local07
1905c     00 12 06 F6 | 	mov	arg01, #0
19060     78 D4 B0 FD | 	call	#__system___getiolock_0540
19064     FD 00 68 FC | 	wrlong	#0, result1
19068     00 FA 05 F6 | 	mov	result1, #0
1906c     00 2E 06 F6 | 	mov	local09, #0
19070                 | LR__2059
19070                 | '   if t1.result_type=result_uint then print t1.result.uresult;
19070     1D 22 0E F2 | 	cmp	local03, #29 wz
19074     50 00 90 5D |  if_ne	jmp	#LR__2060
19078     00 12 06 F6 | 	mov	arg01, #0
1907c     5C D4 B0 FD | 	call	#__system___getiolock_0540
19080     FD 12 02 F6 | 	mov	arg01, result1
19084     14 7A B0 FD | 	call	#__system___lockmem
19088     00 28 06 F6 | 	mov	local06, #0
1908c     00 30 06 F6 | 	mov	local10, #0
19090     0A 32 06 F6 | 	mov	local11, #10
19094     00 12 06 F6 | 	mov	arg01, #0
19098     0F 15 02 F6 | 	mov	arg02, local01
1909c     00 16 06 F6 | 	mov	arg03, #0
190a0     0A 18 06 F6 | 	mov	arg04, #10
190a4     6C 87 B0 FD | 	call	#__system___basic_print_unsigned
190a8     FD 2A 02 F6 | 	mov	local07, result1
190ac     14 27 02 F6 | 	mov	local05, local06
190b0     15 27 02 F1 | 	add	local05, local07
190b4     00 12 06 F6 | 	mov	arg01, #0
190b8     20 D4 B0 FD | 	call	#__system___getiolock_0540
190bc     FD 00 68 FC | 	wrlong	#0, result1
190c0     00 FA 05 F6 | 	mov	result1, #0
190c4     00 2E 06 F6 | 	mov	local09, #0
190c8                 | LR__2060
190c8                 | '   if t1.result_type=result_float then print t1.result.fresult;
190c8     1E 22 0E F2 | 	cmp	local03, #30 wz
190cc     30 00 90 5D |  if_ne	jmp	#LR__2061
190d0     00 12 06 F6 | 	mov	arg01, #0
190d4     04 D4 B0 FD | 	call	#__system___getiolock_0540
190d8     FD 12 02 F6 | 	mov	arg01, result1
190dc     BC 79 B0 FD | 	call	#__system___lockmem
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     0F 15 02 F6 | 	mov	arg02, local01
190e8     00 16 06 F6 | 	mov	arg03, #0
190ec     23 18 06 F6 | 	mov	arg04, #35
190f0     74 AB B0 FD | 	call	#__system___basic_print_float
190f4     00 12 06 F6 | 	mov	arg01, #0
190f8     E0 D3 B0 FD | 	call	#__system___getiolock_0540
190fc     FD 00 68 FC | 	wrlong	#0, result1
19100                 | LR__2061
19100                 | '   if t1.result_type=result_string then print t1.result.sresult;
19100     1F 22 0E F2 | 	cmp	local03, #31 wz
19104     2C 00 90 5D |  if_ne	jmp	#LR__2062
19108     00 12 06 F6 | 	mov	arg01, #0
1910c     CC D3 B0 FD | 	call	#__system___getiolock_0540
19110     FD 12 02 F6 | 	mov	arg01, result1
19114     84 79 B0 FD | 	call	#__system___lockmem
19118     00 12 06 F6 | 	mov	arg01, #0
1911c     0F 15 02 F6 | 	mov	arg02, local01
19120     00 16 06 F6 | 	mov	arg03, #0
19124     68 86 B0 FD | 	call	#__system___basic_print_string
19128     00 12 06 F6 | 	mov	arg01, #0
1912c     AC D3 B0 FD | 	call	#__system___getiolock_0540
19130     FD 00 68 FC | 	wrlong	#0, result1
19134                 | LR__2062
19134                 | LR__2063
19134                 | ' if r=0 then 
19134     00 24 0E F2 | 	cmp	local04, #0 wz
19138     1C 01 90 5D |  if_ne	jmp	#LR__2068
1913c                 | '   if t1.result_type=result_int then print t1.result.iresult
1913c     1C 22 0E F2 | 	cmp	local03, #28 wz
19140     40 00 90 5D |  if_ne	jmp	#LR__2064
19144     00 12 06 F6 | 	mov	arg01, #0
19148     90 D3 B0 FD | 	call	#__system___getiolock_0540
1914c     FD 12 02 F6 | 	mov	arg01, result1
19150     48 79 B0 FD | 	call	#__system___lockmem
19154     00 12 06 F6 | 	mov	arg01, #0
19158     0F 15 02 F6 | 	mov	arg02, local01
1915c     00 16 06 F6 | 	mov	arg03, #0
19160     0A 18 06 F6 | 	mov	arg04, #10
19164     6C 86 B0 FD | 	call	#__system___basic_print_integer
19168     00 12 06 F6 | 	mov	arg01, #0
1916c     0A 14 06 F6 | 	mov	arg02, #10
19170     00 16 06 F6 | 	mov	arg03, #0
19174     C0 85 B0 FD | 	call	#__system___basic_print_char
19178     00 12 06 F6 | 	mov	arg01, #0
1917c     5C D3 B0 FD | 	call	#__system___getiolock_0540
19180     FD 00 68 FC | 	wrlong	#0, result1
19184                 | LR__2064
19184                 | '   if t1.result_type=result_uint then print t1.result.uresult
19184     1D 22 0E F2 | 	cmp	local03, #29 wz
19188     40 00 90 5D |  if_ne	jmp	#LR__2065
1918c     00 12 06 F6 | 	mov	arg01, #0
19190     48 D3 B0 FD | 	call	#__system___getiolock_0540
19194     FD 12 02 F6 | 	mov	arg01, result1
19198     00 79 B0 FD | 	call	#__system___lockmem
1919c     00 12 06 F6 | 	mov	arg01, #0
191a0     0F 15 02 F6 | 	mov	arg02, local01
191a4     00 16 06 F6 | 	mov	arg03, #0
191a8     0A 18 06 F6 | 	mov	arg04, #10
191ac     64 86 B0 FD | 	call	#__system___basic_print_unsigned
191b0     00 12 06 F6 | 	mov	arg01, #0
191b4     0A 14 06 F6 | 	mov	arg02, #10
191b8     00 16 06 F6 | 	mov	arg03, #0
191bc     78 85 B0 FD | 	call	#__system___basic_print_char
191c0     00 12 06 F6 | 	mov	arg01, #0
191c4     14 D3 B0 FD | 	call	#__system___getiolock_0540
191c8     FD 00 68 FC | 	wrlong	#0, result1
191cc                 | LR__2065
191cc                 | '   if t1.result_type=result_float then print t1.result.fresult
191cc     1E 22 0E F2 | 	cmp	local03, #30 wz
191d0     40 00 90 5D |  if_ne	jmp	#LR__2066
191d4     00 12 06 F6 | 	mov	arg01, #0
191d8     00 D3 B0 FD | 	call	#__system___getiolock_0540
191dc     FD 12 02 F6 | 	mov	arg01, result1
191e0     B8 78 B0 FD | 	call	#__system___lockmem
191e4     00 12 06 F6 | 	mov	arg01, #0
191e8     0F 15 02 F6 | 	mov	arg02, local01
191ec     00 16 06 F6 | 	mov	arg03, #0
191f0     23 18 06 F6 | 	mov	arg04, #35
191f4     70 AA B0 FD | 	call	#__system___basic_print_float
191f8     00 12 06 F6 | 	mov	arg01, #0
191fc     0A 14 06 F6 | 	mov	arg02, #10
19200     00 16 06 F6 | 	mov	arg03, #0
19204     30 85 B0 FD | 	call	#__system___basic_print_char
19208     00 12 06 F6 | 	mov	arg01, #0
1920c     CC D2 B0 FD | 	call	#__system___getiolock_0540
19210     FD 00 68 FC | 	wrlong	#0, result1
19214                 | LR__2066
19214                 | '   if t1.result_type=result_string then print t1.result.sresult
19214     1F 22 0E F2 | 	cmp	local03, #31 wz
19218     3C 00 90 5D |  if_ne	jmp	#LR__2067
1921c     00 12 06 F6 | 	mov	arg01, #0
19220     B8 D2 B0 FD | 	call	#__system___getiolock_0540
19224     FD 12 02 F6 | 	mov	arg01, result1
19228     70 78 B0 FD | 	call	#__system___lockmem
1922c     00 12 06 F6 | 	mov	arg01, #0
19230     0F 15 02 F6 | 	mov	arg02, local01
19234     00 16 06 F6 | 	mov	arg03, #0
19238     54 85 B0 FD | 	call	#__system___basic_print_string
1923c     00 12 06 F6 | 	mov	arg01, #0
19240     0A 14 06 F6 | 	mov	arg02, #10
19244     00 16 06 F6 | 	mov	arg03, #0
19248     EC 84 B0 FD | 	call	#__system___basic_print_char
1924c     00 12 06 F6 | 	mov	arg01, #0
19250     88 D2 B0 FD | 	call	#__system___getiolock_0540
19254     FD 00 68 FC | 	wrlong	#0, result1
19258                 | LR__2067
19258                 | LR__2068
19258                 | ' if r=print_mod_empty then print
19258     20 24 0E F2 | 	cmp	local04, #32 wz
1925c     2C 00 90 5D |  if_ne	jmp	#LR__2069
19260     00 12 06 F6 | 	mov	arg01, #0
19264     74 D2 B0 FD | 	call	#__system___getiolock_0540
19268     FD 12 02 F6 | 	mov	arg01, result1
1926c     2C 78 B0 FD | 	call	#__system___lockmem
19270     00 12 06 F6 | 	mov	arg01, #0
19274     0A 14 06 F6 | 	mov	arg02, #10
19278     00 16 06 F6 | 	mov	arg03, #0
1927c     B8 84 B0 FD | 	call	#__system___basic_print_char
19280     00 12 06 F6 | 	mov	arg01, #0
19284     54 D2 B0 FD | 	call	#__system___getiolock_0540
19288     FD 00 68 FC | 	wrlong	#0, result1
1928c                 | LR__2069
1928c                 | LR__2070
1928c     A7 F0 03 F6 | 	mov	ptra, fp
19290     B2 00 A0 FD | 	call	#popregs_
19294                 | _do_print_ret
19294     2D 00 64 FD | 	ret
19298                 | 
19298                 | ' 
19298                 | ' 
19298                 | ' sub do_paper
19298                 | _do_paper
19298     03 4A 05 F6 | 	mov	COUNT_, #3
1929c     A8 00 A0 FD | 	call	#pushregs_
192a0     40 28 BF FD | 	call	#_pop
192a4     FD 1E 02 F6 | 	mov	local01, result1
192a8     FE 20 02 F6 | 	mov	local02, result2
192ac     FF 22 02 F6 | 	mov	local03, result3
192b0                 | ' t1=pop() 
192b0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
192b0     1E 22 0E F2 | 	cmp	local03, #30 wz
192b4     10 00 90 5D |  if_ne	jmp	#LR__2080
192b8     0F 13 02 F6 | 	mov	arg01, local01
192bc     00 14 06 F6 | 	mov	arg02, #0
192c0     54 A8 B0 FD | 	call	#__system___float_tointeger
192c4     FD 1E 02 F6 | 	mov	local01, result1
192c8                 | LR__2080
192c8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
192c8     1F 22 0E F2 | 	cmp	local03, #31 wz
192cc     18 00 90 5D |  if_ne	jmp	#LR__2081
192d0     0F 13 02 F6 | 	mov	arg01, local01
192d4     60 AB B0 FD | 	call	#__system____builtin_atof
192d8     FD 12 02 F6 | 	mov	arg01, result1
192dc     00 14 06 F6 | 	mov	arg02, #0
192e0     34 A8 B0 FD | 	call	#__system___float_tointeger
192e4     FD 1E 02 F6 | 	mov	local01, result1
192e8                 | LR__2081
192e8     37 00 00 FF 
192ec     38 E4 05 F1 | 	add	objptr, ##28216
192f0     F2 1E 62 FC | 	wrlong	local01, objptr
192f4     04 E4 05 F1 | 	add	objptr, #4
192f8     F2 12 02 FB | 	rdlong	arg01, objptr
192fc                 | ' 
192fc                 | ' write_color:=ff
192fc     36 00 00 FF 
19300     FB E5 85 F1 | 	sub	objptr, ##28155
19304     F2 12 62 FC | 	wrlong	arg01, objptr
19308                 | ' write_background:=bb
19308     04 E4 05 F1 | 	add	objptr, #4
1930c     F2 1E 62 FC | 	wrlong	local01, objptr
19310     45 E4 85 F1 | 	sub	objptr, #69
19314     A7 F0 03 F6 | 	mov	ptra, fp
19318     B2 00 A0 FD | 	call	#popregs_
1931c                 | _do_paper_ret
1931c     2D 00 64 FD | 	ret
19320                 | 
19320                 | ' 
19320                 | ' sub do_ink
19320                 | _do_ink
19320     03 4A 05 F6 | 	mov	COUNT_, #3
19324     A8 00 A0 FD | 	call	#pushregs_
19328     B8 27 BF FD | 	call	#_pop
1932c     FD 1E 02 F6 | 	mov	local01, result1
19330     FE 20 02 F6 | 	mov	local02, result2
19334     FF 22 02 F6 | 	mov	local03, result3
19338                 | ' t1=pop() 
19338                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19338     1E 22 0E F2 | 	cmp	local03, #30 wz
1933c     10 00 90 5D |  if_ne	jmp	#LR__2090
19340     0F 13 02 F6 | 	mov	arg01, local01
19344     00 14 06 F6 | 	mov	arg02, #0
19348     CC A7 B0 FD | 	call	#__system___float_tointeger
1934c     FD 1E 02 F6 | 	mov	local01, result1
19350                 | LR__2090
19350                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19350     1F 22 0E F2 | 	cmp	local03, #31 wz
19354     18 00 90 5D |  if_ne	jmp	#LR__2091
19358     0F 13 02 F6 | 	mov	arg01, local01
1935c     D8 AA B0 FD | 	call	#__system____builtin_atof
19360     FD 12 02 F6 | 	mov	arg01, result1
19364     00 14 06 F6 | 	mov	arg02, #0
19368     AC A7 B0 FD | 	call	#__system___float_tointeger
1936c     FD 1E 02 F6 | 	mov	local01, result1
19370                 | LR__2091
19370     37 00 00 FF 
19374     3C E4 05 F1 | 	add	objptr, ##28220
19378     F2 1E 62 FC | 	wrlong	local01, objptr
1937c     04 E4 85 F1 | 	sub	objptr, #4
19380     F2 14 02 FB | 	rdlong	arg02, objptr
19384                 | ' 
19384                 | ' write_color:=ff
19384     36 00 00 FF 
19388     F7 E5 85 F1 | 	sub	objptr, ##28151
1938c     F2 1E 62 FC | 	wrlong	local01, objptr
19390                 | ' write_background:=bb
19390     04 E4 05 F1 | 	add	objptr, #4
19394     F2 14 62 FC | 	wrlong	arg02, objptr
19398     36 00 00 FF 
1939c     F7 E5 05 F1 | 	add	objptr, ##28151
193a0     F2 12 02 FB | 	rdlong	arg01, objptr
193a4     37 00 00 FF 
193a8     3C E4 85 F1 | 	sub	objptr, ##28220
193ac     7C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
193b0     A7 F0 03 F6 | 	mov	ptra, fp
193b4     B2 00 A0 FD | 	call	#popregs_
193b8                 | _do_ink_ret
193b8     2D 00 64 FD | 	ret
193bc                 | 
193bc                 | ' 
193bc                 | ' 
193bc                 | ' sub do_font
193bc                 | _do_font
193bc     03 4A 05 F6 | 	mov	COUNT_, #3
193c0     A8 00 A0 FD | 	call	#pushregs_
193c4     1C 27 BF FD | 	call	#_pop
193c8     FD 1E 02 F6 | 	mov	local01, result1
193cc     FE 20 02 F6 | 	mov	local02, result2
193d0     FF 22 02 F6 | 	mov	local03, result3
193d4                 | ' t1=pop() 
193d4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
193d4     1E 22 0E F2 | 	cmp	local03, #30 wz
193d8     10 00 90 5D |  if_ne	jmp	#LR__2100
193dc     0F 13 02 F6 | 	mov	arg01, local01
193e0     00 14 06 F6 | 	mov	arg02, #0
193e4     30 A7 B0 FD | 	call	#__system___float_tointeger
193e8     FD 1E 02 F6 | 	mov	local01, result1
193ec                 | LR__2100
193ec                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
193ec     1F 22 0E F2 | 	cmp	local03, #31 wz
193f0     18 00 90 5D |  if_ne	jmp	#LR__2101
193f4     0F 13 02 F6 | 	mov	arg01, local01
193f8     3C AA B0 FD | 	call	#__system____builtin_atof
193fc     FD 12 02 F6 | 	mov	arg01, result1
19400     00 14 06 F6 | 	mov	arg02, #0
19404     10 A7 B0 FD | 	call	#__system___float_tointeger
19408     FD 1E 02 F6 | 	mov	local01, result1
1940c                 | LR__2101
1940c     37 00 00 FF 
19410     40 E4 05 F1 | 	add	objptr, ##28224
19414     F2 1E 62 FC | 	wrlong	local01, objptr
19418     37 00 00 FF 
1941c     40 E4 85 F1 | 	sub	objptr, ##28224
19420     02 1E 66 F0 | 	shl	local01, #2
19424     0F 13 02 F6 | 	mov	arg01, local01
19428     44 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
1942c     A7 F0 03 F6 | 	mov	ptra, fp
19430     B2 00 A0 FD | 	call	#popregs_
19434                 | _do_font_ret
19434     2D 00 64 FD | 	ret
19438                 | 
19438                 | ' 
19438                 | ' sub do_mode
19438                 | _do_mode
19438     05 4A 05 F6 | 	mov	COUNT_, #5
1943c     A8 00 A0 FD | 	call	#pushregs_
19440     A0 26 BF FD | 	call	#_pop
19444     FD 1E 02 F6 | 	mov	local01, result1
19448     FE 20 02 F6 | 	mov	local02, result2
1944c     FF 22 02 F6 | 	mov	local03, result3
19450                 | ' t1=pop() 
19450                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19450     1E 22 0E F2 | 	cmp	local03, #30 wz
19454     10 00 90 5D |  if_ne	jmp	#LR__2110
19458     0F 13 02 F6 | 	mov	arg01, local01
1945c     00 14 06 F6 | 	mov	arg02, #0
19460     B4 A6 B0 FD | 	call	#__system___float_tointeger
19464     FD 1E 02 F6 | 	mov	local01, result1
19468                 | LR__2110
19468                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19468     1F 22 0E F2 | 	cmp	local03, #31 wz
1946c     18 00 90 5D |  if_ne	jmp	#LR__2111
19470     0F 13 02 F6 | 	mov	arg01, local01
19474     C0 A9 B0 FD | 	call	#__system____builtin_atof
19478     FD 12 02 F6 | 	mov	arg01, result1
1947c     00 14 06 F6 | 	mov	arg02, #0
19480     94 A6 B0 FD | 	call	#__system___float_tointeger
19484     FD 1E 02 F6 | 	mov	local01, result1
19488                 | LR__2111
19488                 | ' select case t1.result.iresult
19488     0F 25 02 F6 | 	mov	local04, local01
1948c     05 24 26 F3 | 	fle	local04, #5
19490     30 24 62 FD | 	jmprel	local04
19494                 | LR__2112
19494     14 00 90 FD | 	jmp	#LR__2113
19498     A8 00 90 FD | 	jmp	#LR__2114
1949c     10 01 90 FD | 	jmp	#LR__2115
194a0     78 01 90 FD | 	jmp	#LR__2116
194a4     E0 01 90 FD | 	jmp	#LR__2117
194a8     70 02 90 FD | 	jmp	#LR__2118
194ac                 | LR__2113
194ac     37 00 00 FF 
194b0     40 E4 05 F1 | 	add	objptr, ##28224
194b4     F2 02 68 FC | 	wrlong	#1, objptr
194b8     04 E4 85 F1 | 	sub	objptr, #4
194bc     F2 34 69 FC | 	wrlong	#154, objptr
194c0     19 00 00 FF 
194c4     D4 E4 05 F1 | 	add	objptr, ##13012
194c8     F2 02 68 FC | 	wrlong	#1, objptr
194cc     19 00 00 FF 
194d0     D8 E4 85 F1 | 	sub	objptr, ##13016
194d4     F2 26 69 FC | 	wrlong	#147, objptr
194d8     37 00 00 FF 
194dc     38 E4 85 F1 | 	sub	objptr, ##28216
194e0     04 12 06 F6 | 	mov	arg01, #4
194e4     88 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
194e8     37 00 00 FF 
194ec     3C E4 05 F1 | 	add	objptr, ##28220
194f0     F2 12 02 FB | 	rdlong	arg01, objptr
194f4     04 E4 85 F1 | 	sub	objptr, #4
194f8     F2 14 02 FB | 	rdlong	arg02, objptr
194fc                 | ' 
194fc                 | ' write_color:=ff
194fc     36 00 00 FF 
19500     F7 E5 85 F1 | 	sub	objptr, ##28151
19504     F2 12 62 FC | 	wrlong	arg01, objptr
19508                 | ' write_background:=bb
19508     04 E4 05 F1 | 	add	objptr, #4
1950c     F2 14 62 FC | 	wrlong	arg02, objptr
19510     01 00 00 FF 
19514     00 EA 05 F1 | 	add	ptr__dat__, ##512
19518     51 00 00 FF 
1951c     6F E5 05 F1 | 	add	objptr, ##41839
19520     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19524     04 E4 85 F1 | 	sub	objptr, #4
19528     03 00 80 FF 
1952c     F2 30 69 FC | 	wrlong	##1688, objptr
19530     51 00 00 FF 
19534     B0 E5 85 F1 | 	sub	objptr, ##41904
19538     01 00 00 FF 
1953c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19540     D8 01 90 FD | 	jmp	#LR__2118
19544                 | LR__2114
19544     37 00 00 FF 
19548     40 E4 05 F1 | 	add	objptr, ##28224
1954c     F2 00 68 FC | 	wrlong	#0, objptr
19550     04 E4 85 F1 | 	sub	objptr, #4
19554     F2 2E 68 FC | 	wrlong	#23, objptr
19558     19 00 00 FF 
1955c     D4 E4 05 F1 | 	add	objptr, ##13012
19560     F2 00 68 FC | 	wrlong	#0, objptr
19564     19 00 00 FF 
19568     D8 E4 85 F1 | 	sub	objptr, ##13016
1956c     F2 00 68 FC | 	wrlong	#0, objptr
19570     37 00 00 FF 
19574     38 E4 85 F1 | 	sub	objptr, ##28216
19578     00 12 06 F6 | 	mov	arg01, #0
1957c     F0 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19580     37 00 00 FF 
19584     3C E4 05 F1 | 	add	objptr, ##28220
19588     F2 12 02 FB | 	rdlong	arg01, objptr
1958c     04 E4 85 F1 | 	sub	objptr, #4
19590     F2 14 02 FB | 	rdlong	arg02, objptr
19594                 | ' 
19594                 | ' write_color:=ff
19594     36 00 00 FF 
19598     F7 E5 85 F1 | 	sub	objptr, ##28151
1959c     F2 12 62 FC | 	wrlong	arg01, objptr
195a0                 | ' write_background:=bb
195a0     04 E4 05 F1 | 	add	objptr, #4
195a4     F2 14 62 FC | 	wrlong	arg02, objptr
195a8     45 E4 85 F1 | 	sub	objptr, #69
195ac     6C 01 90 FD | 	jmp	#LR__2118
195b0                 | LR__2115
195b0     37 00 00 FF 
195b4     40 E4 05 F1 | 	add	objptr, ##28224
195b8     F2 00 68 FC | 	wrlong	#0, objptr
195bc     04 E4 85 F1 | 	sub	objptr, #4
195c0     F2 6A 69 FC | 	wrlong	#181, objptr
195c4     19 00 00 FF 
195c8     D4 E4 05 F1 | 	add	objptr, ##13012
195cc     F2 00 68 FC | 	wrlong	#0, objptr
195d0     19 00 00 FF 
195d4     D8 E4 85 F1 | 	sub	objptr, ##13016
195d8     F2 00 68 FC | 	wrlong	#0, objptr
195dc     37 00 00 FF 
195e0     38 E4 85 F1 | 	sub	objptr, ##28216
195e4     00 12 06 F6 | 	mov	arg01, #0
195e8     84 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
195ec     37 00 00 FF 
195f0     3C E4 05 F1 | 	add	objptr, ##28220
195f4     F2 12 02 FB | 	rdlong	arg01, objptr
195f8     04 E4 85 F1 | 	sub	objptr, #4
195fc     F2 14 02 FB | 	rdlong	arg02, objptr
19600                 | ' 
19600                 | ' write_color:=ff
19600     36 00 00 FF 
19604     F7 E5 85 F1 | 	sub	objptr, ##28151
19608     F2 12 62 FC | 	wrlong	arg01, objptr
1960c                 | ' write_background:=bb
1960c     04 E4 05 F1 | 	add	objptr, #4
19610     F2 14 62 FC | 	wrlong	arg02, objptr
19614     45 E4 85 F1 | 	sub	objptr, #69
19618     00 01 90 FD | 	jmp	#LR__2118
1961c                 | LR__2116
1961c     37 00 00 FF 
19620     40 E4 05 F1 | 	add	objptr, ##28224
19624     F2 00 68 FC | 	wrlong	#0, objptr
19628     04 E4 85 F1 | 	sub	objptr, #4
1962c     F2 1E 68 FC | 	wrlong	#15, objptr
19630     19 00 00 FF 
19634     D4 E4 05 F1 | 	add	objptr, ##13012
19638     F2 00 68 FC | 	wrlong	#0, objptr
1963c     19 00 00 FF 
19640     D8 E4 85 F1 | 	sub	objptr, ##13016
19644     F2 00 68 FC | 	wrlong	#0, objptr
19648     37 00 00 FF 
1964c     38 E4 85 F1 | 	sub	objptr, ##28216
19650     00 12 06 F6 | 	mov	arg01, #0
19654     18 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19658     37 00 00 FF 
1965c     3C E4 05 F1 | 	add	objptr, ##28220
19660     F2 12 02 FB | 	rdlong	arg01, objptr
19664     04 E4 85 F1 | 	sub	objptr, #4
19668     F2 14 02 FB | 	rdlong	arg02, objptr
1966c                 | ' 
1966c                 | ' write_color:=ff
1966c     36 00 00 FF 
19670     F7 E5 85 F1 | 	sub	objptr, ##28151
19674     F2 12 62 FC | 	wrlong	arg01, objptr
19678                 | ' write_background:=bb
19678     04 E4 05 F1 | 	add	objptr, #4
1967c     F2 14 62 FC | 	wrlong	arg02, objptr
19680     45 E4 85 F1 | 	sub	objptr, #69
19684     94 00 90 FD | 	jmp	#LR__2118
19688                 | LR__2117
19688     37 00 00 FF 
1968c     40 E4 05 F1 | 	add	objptr, ##28224
19690     F2 02 68 FC | 	wrlong	#1, objptr
19694     04 E4 85 F1 | 	sub	objptr, #4
19698     F2 02 68 FC | 	wrlong	#1, objptr
1969c     19 00 00 FF 
196a0     D4 E4 05 F1 | 	add	objptr, ##13012
196a4     F2 02 68 FC | 	wrlong	#1, objptr
196a8     19 00 00 FF 
196ac     D8 E4 85 F1 | 	sub	objptr, ##13016
196b0     F2 1C 68 FC | 	wrlong	#14, objptr
196b4     37 00 00 FF 
196b8     38 E4 85 F1 | 	sub	objptr, ##28216
196bc     04 12 06 F6 | 	mov	arg01, #4
196c0     AC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
196c4     37 00 00 FF 
196c8     3C E4 05 F1 | 	add	objptr, ##28220
196cc     F2 12 02 FB | 	rdlong	arg01, objptr
196d0     04 E4 85 F1 | 	sub	objptr, #4
196d4     F2 14 02 FB | 	rdlong	arg02, objptr
196d8                 | ' 
196d8                 | ' write_color:=ff
196d8     36 00 00 FF 
196dc     F7 E5 85 F1 | 	sub	objptr, ##28151
196e0     F2 12 62 FC | 	wrlong	arg01, objptr
196e4                 | ' write_background:=bb
196e4     04 E4 05 F1 | 	add	objptr, #4
196e8     F2 14 62 FC | 	wrlong	arg02, objptr
196ec     07 00 00 FF 
196f0     8A EB 05 F1 | 	add	ptr__dat__, ##3978
196f4     51 00 00 FF 
196f8     6F E5 05 F1 | 	add	objptr, ##41839
196fc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19700     04 E4 85 F1 | 	sub	objptr, #4
19704     03 00 80 FF 
19708     F2 30 69 FC | 	wrlong	##1688, objptr
1970c     51 00 00 FF 
19710     B0 E5 85 F1 | 	sub	objptr, ##41904
19714     07 00 00 FF 
19718     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
1971c                 | LR__2118
1971c     51 00 00 FF 
19720     AC E5 05 F1 | 	add	objptr, ##41900
19724     F2 1E 62 FC | 	wrlong	local01, objptr
19728     04 E4 85 F1 | 	sub	objptr, #4
1972c     F2 12 02 FB | 	rdlong	arg01, objptr
19730     0E 00 00 FF 
19734     4C E5 85 F1 | 	sub	objptr, ##7500
19738     F2 26 02 FB | 	rdlong	local05, objptr
1973c     43 00 00 FF 
19740     5C E4 85 F1 | 	sub	objptr, ##34396
19744     13 13 82 F1 | 	sub	arg01, local05
19748     00 14 06 F6 | 	mov	arg02, #0
1974c     0A 16 06 F6 | 	mov	arg03, #10
19750     18 96 B0 FD | 	call	#__system__Number_S
19754     FD 12 02 F6 | 	mov	arg01, result1
19758     85 01 00 FF 
1975c     66 15 06 F6 | 	mov	arg02, ##@LR__5507
19760     94 73 B0 FD | 	call	#__system___string_concat
19764     50 00 00 FF 
19768     0C E5 05 F1 | 	add	objptr, ##41228
1976c     F2 FA 61 FC | 	wrlong	result1, objptr
19770     19 00 00 FF 
19774     D0 E4 85 F1 | 	sub	objptr, ##13008
19778     F2 12 02 FB | 	rdlong	arg01, objptr
1977c     04 E4 85 F1 | 	sub	objptr, #4
19780     F2 14 02 FB | 	rdlong	arg02, objptr
19784     37 00 00 FF 
19788     38 E4 85 F1 | 	sub	objptr, ##28216
1978c     30 5A B0 FD | 	call	#_hg010b_spin2_cls
19790     85 01 00 FF 
19794     78 13 06 F6 | 	mov	arg01, ##@LR__5508
19798                 | ' 
19798                 | ' write(text)
19798     E4 5D B0 FD | 	call	#_hg010b_spin2_write
1979c                 | ' crlf
1979c     E0 62 B0 FD | 	call	#_hg010b_spin2_crlf
197a0     18 00 00 FF 
197a4     4C EB 05 F1 | 	add	ptr__dat__, ##12620
197a8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
197ac     18 00 00 FF 
197b0     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
197b4                 | ' 
197b4                 | ' write(text)
197b4     C8 5D B0 FD | 	call	#_hg010b_spin2_write
197b8                 | ' crlf
197b8     C4 62 B0 FD | 	call	#_hg010b_spin2_crlf
197bc     50 00 00 FF 
197c0     0C E5 05 F1 | 	add	objptr, ##41228
197c4     F2 12 02 FB | 	rdlong	arg01, objptr
197c8     50 00 00 FF 
197cc     0C E5 85 F1 | 	sub	objptr, ##41228
197d0                 | ' 
197d0                 | ' write(text)
197d0     AC 5D B0 FD | 	call	#_hg010b_spin2_write
197d4                 | ' crlf
197d4     A8 62 B0 FD | 	call	#_hg010b_spin2_crlf
197d8     A7 F0 03 F6 | 	mov	ptra, fp
197dc     B2 00 A0 FD | 	call	#popregs_
197e0                 | _do_mode_ret
197e0     2D 00 64 FD | 	ret
197e4                 | 
197e4                 | ' 
197e4                 | ' sub do_setwave
197e4                 | _do_setwave
197e4     02 4A 05 F6 | 	mov	COUNT_, #2
197e8     A8 00 A0 FD | 	call	#pushregs_
197ec     18 F0 07 F1 | 	add	ptra, #24
197f0     F0 22 BF FD | 	call	#_pop
197f4     FD 12 02 F6 | 	mov	arg01, result1
197f8     FE 1E 02 F6 | 	mov	local01, result2
197fc     FF 20 02 F6 | 	mov	local02, result3
19800     A7 12 62 FC | 	wrlong	arg01, fp
19804     04 4E 05 F1 | 	add	fp, #4
19808     A7 1E 62 FC | 	wrlong	local01, fp
1980c     04 4E 05 F1 | 	add	fp, #4
19810     A7 20 62 FC | 	wrlong	local02, fp
19814     08 4E 85 F1 | 	sub	fp, #8
19818     C8 22 BF FD | 	call	#_pop
1981c     FD 20 02 F6 | 	mov	local02, result1
19820     0C 4E 05 F1 | 	add	fp, #12
19824     A7 20 62 FC | 	wrlong	local02, fp
19828     04 4E 05 F1 | 	add	fp, #4
1982c     A7 FC 61 FC | 	wrlong	result2, fp
19830     04 4E 05 F1 | 	add	fp, #4
19834     A7 FE 61 FC | 	wrlong	result3, fp
19838     08 4E 85 F1 | 	sub	fp, #8
1983c     A7 12 02 F6 | 	mov	arg01, fp
19840     0C 4E 85 F1 | 	sub	fp, #12
19844     60 C3 BF FD | 	call	#_converttoint
19848     FD 20 02 F6 | 	mov	local02, result1
1984c     10 1F 02 F6 | 	mov	local01, local02
19850     01 1E 66 F0 | 	shl	local01, #1
19854     10 1F 02 F1 | 	add	local01, local02
19858     03 1E 66 F0 | 	shl	local01, #3
1985c     14 00 00 FF 
19860     38 E5 05 F1 | 	add	objptr, ##10552
19864     F2 1E 02 F1 | 	add	local01, objptr
19868     A7 12 02 F6 | 	mov	arg01, fp
1986c     14 00 00 FF 
19870     38 E5 85 F1 | 	sub	objptr, ##10552
19874     30 C3 BF FD | 	call	#_converttoint
19878     04 1E 06 F1 | 	add	local01, #4
1987c     0F FB 41 FC | 	wrbyte	result1, local01
19880     A7 F0 03 F6 | 	mov	ptra, fp
19884     B2 00 A0 FD | 	call	#popregs_
19888                 | _do_setwave_ret
19888     2D 00 64 FD | 	ret
1988c                 | 
1988c                 | ' 
1988c                 | ' sub do_setsustain
1988c                 | _do_setsustain
1988c     02 4A 05 F6 | 	mov	COUNT_, #2
19890     A8 00 A0 FD | 	call	#pushregs_
19894     18 F0 07 F1 | 	add	ptra, #24
19898     48 22 BF FD | 	call	#_pop
1989c     FD 12 02 F6 | 	mov	arg01, result1
198a0     FE 1E 02 F6 | 	mov	local01, result2
198a4     FF 20 02 F6 | 	mov	local02, result3
198a8     A7 12 62 FC | 	wrlong	arg01, fp
198ac     04 4E 05 F1 | 	add	fp, #4
198b0     A7 1E 62 FC | 	wrlong	local01, fp
198b4     04 4E 05 F1 | 	add	fp, #4
198b8     A7 20 62 FC | 	wrlong	local02, fp
198bc     08 4E 85 F1 | 	sub	fp, #8
198c0     20 22 BF FD | 	call	#_pop
198c4     FD 20 02 F6 | 	mov	local02, result1
198c8     0C 4E 05 F1 | 	add	fp, #12
198cc     A7 20 62 FC | 	wrlong	local02, fp
198d0     04 4E 05 F1 | 	add	fp, #4
198d4     A7 FC 61 FC | 	wrlong	result2, fp
198d8     04 4E 05 F1 | 	add	fp, #4
198dc     A7 FE 61 FC | 	wrlong	result3, fp
198e0     08 4E 85 F1 | 	sub	fp, #8
198e4     A7 12 02 F6 | 	mov	arg01, fp
198e8     0C 4E 85 F1 | 	sub	fp, #12
198ec     B8 C2 BF FD | 	call	#_converttoint
198f0     FD 20 02 F6 | 	mov	local02, result1
198f4     10 1F 02 F6 | 	mov	local01, local02
198f8     01 1E 66 F0 | 	shl	local01, #1
198fc     10 1F 02 F1 | 	add	local01, local02
19900     03 1E 66 F0 | 	shl	local01, #3
19904     14 00 00 FF 
19908     38 E5 05 F1 | 	add	objptr, ##10552
1990c     F2 1E 02 F1 | 	add	local01, objptr
19910     A7 12 02 F6 | 	mov	arg01, fp
19914     14 00 00 FF 
19918     38 E5 85 F1 | 	sub	objptr, ##10552
1991c     88 C2 BF FD | 	call	#_converttoint
19920     14 1E 06 F1 | 	add	local01, #20
19924     0F FB 51 FC | 	wrword	result1, local01
19928     A7 F0 03 F6 | 	mov	ptra, fp
1992c     B2 00 A0 FD | 	call	#popregs_
19930                 | _do_setsustain_ret
19930     2D 00 64 FD | 	ret
19934                 | 
19934                 | ' 
19934                 | ' sub do_setenv
19934                 | _do_setenv
19934     02 4A 05 F6 | 	mov	COUNT_, #2
19938     A8 00 A0 FD | 	call	#pushregs_
1993c     18 F0 07 F1 | 	add	ptra, #24
19940     A0 21 BF FD | 	call	#_pop
19944     FD 12 02 F6 | 	mov	arg01, result1
19948     FE 1E 02 F6 | 	mov	local01, result2
1994c     FF 20 02 F6 | 	mov	local02, result3
19950     A7 12 62 FC | 	wrlong	arg01, fp
19954     04 4E 05 F1 | 	add	fp, #4
19958     A7 1E 62 FC | 	wrlong	local01, fp
1995c     04 4E 05 F1 | 	add	fp, #4
19960     A7 20 62 FC | 	wrlong	local02, fp
19964     08 4E 85 F1 | 	sub	fp, #8
19968     78 21 BF FD | 	call	#_pop
1996c     FD 20 02 F6 | 	mov	local02, result1
19970     0C 4E 05 F1 | 	add	fp, #12
19974     A7 20 62 FC | 	wrlong	local02, fp
19978     04 4E 05 F1 | 	add	fp, #4
1997c     A7 FC 61 FC | 	wrlong	result2, fp
19980     04 4E 05 F1 | 	add	fp, #4
19984     A7 FE 61 FC | 	wrlong	result3, fp
19988     08 4E 85 F1 | 	sub	fp, #8
1998c     A7 12 02 F6 | 	mov	arg01, fp
19990     0C 4E 85 F1 | 	sub	fp, #12
19994     10 C2 BF FD | 	call	#_converttoint
19998     FD 20 02 F6 | 	mov	local02, result1
1999c     10 1F 02 F6 | 	mov	local01, local02
199a0     01 1E 66 F0 | 	shl	local01, #1
199a4     10 1F 02 F1 | 	add	local01, local02
199a8     03 1E 66 F0 | 	shl	local01, #3
199ac     14 00 00 FF 
199b0     38 E5 05 F1 | 	add	objptr, ##10552
199b4     F2 1E 02 F1 | 	add	local01, objptr
199b8     A7 12 02 F6 | 	mov	arg01, fp
199bc     14 00 00 FF 
199c0     38 E5 85 F1 | 	sub	objptr, ##10552
199c4     E0 C1 BF FD | 	call	#_converttoint
199c8     05 1E 06 F1 | 	add	local01, #5
199cc     0F FB 41 FC | 	wrbyte	result1, local01
199d0     A7 F0 03 F6 | 	mov	ptra, fp
199d4     B2 00 A0 FD | 	call	#popregs_
199d8                 | _do_setenv_ret
199d8     2D 00 64 FD | 	ret
199dc                 | 
199dc                 | ' 
199dc                 | ' sub do_setdelay
199dc                 | _do_setdelay
199dc     02 4A 05 F6 | 	mov	COUNT_, #2
199e0     A8 00 A0 FD | 	call	#pushregs_
199e4     18 F0 07 F1 | 	add	ptra, #24
199e8     F8 20 BF FD | 	call	#_pop
199ec     FD 12 02 F6 | 	mov	arg01, result1
199f0     FE 1E 02 F6 | 	mov	local01, result2
199f4     FF 20 02 F6 | 	mov	local02, result3
199f8     A7 12 62 FC | 	wrlong	arg01, fp
199fc     04 4E 05 F1 | 	add	fp, #4
19a00     A7 1E 62 FC | 	wrlong	local01, fp
19a04     04 4E 05 F1 | 	add	fp, #4
19a08     A7 20 62 FC | 	wrlong	local02, fp
19a0c     08 4E 85 F1 | 	sub	fp, #8
19a10     D0 20 BF FD | 	call	#_pop
19a14     FD 20 02 F6 | 	mov	local02, result1
19a18     0C 4E 05 F1 | 	add	fp, #12
19a1c     A7 20 62 FC | 	wrlong	local02, fp
19a20     04 4E 05 F1 | 	add	fp, #4
19a24     A7 FC 61 FC | 	wrlong	result2, fp
19a28     04 4E 05 F1 | 	add	fp, #4
19a2c     A7 FE 61 FC | 	wrlong	result3, fp
19a30     08 4E 85 F1 | 	sub	fp, #8
19a34     A7 12 02 F6 | 	mov	arg01, fp
19a38     0C 4E 85 F1 | 	sub	fp, #12
19a3c     68 C1 BF FD | 	call	#_converttoint
19a40     FD 20 02 F6 | 	mov	local02, result1
19a44     10 1F 02 F6 | 	mov	local01, local02
19a48     01 1E 66 F0 | 	shl	local01, #1
19a4c     10 1F 02 F1 | 	add	local01, local02
19a50     03 1E 66 F0 | 	shl	local01, #3
19a54     14 00 00 FF 
19a58     38 E5 05 F1 | 	add	objptr, ##10552
19a5c     F2 1E 02 F1 | 	add	local01, objptr
19a60     A7 12 02 F6 | 	mov	arg01, fp
19a64     14 00 00 FF 
19a68     38 E5 85 F1 | 	sub	objptr, ##10552
19a6c     38 C1 BF FD | 	call	#_converttoint
19a70     06 1E 06 F1 | 	add	local01, #6
19a74     0F FB 51 FC | 	wrword	result1, local01
19a78     A7 F0 03 F6 | 	mov	ptra, fp
19a7c     B2 00 A0 FD | 	call	#popregs_
19a80                 | _do_setdelay_ret
19a80     2D 00 64 FD | 	ret
19a84                 | 
19a84                 | ' 
19a84                 | ' sub do_setlen
19a84                 | _do_setlen
19a84     02 4A 05 F6 | 	mov	COUNT_, #2
19a88     A8 00 A0 FD | 	call	#pushregs_
19a8c     18 F0 07 F1 | 	add	ptra, #24
19a90     50 20 BF FD | 	call	#_pop
19a94     FD 12 02 F6 | 	mov	arg01, result1
19a98     FE 1E 02 F6 | 	mov	local01, result2
19a9c     FF 20 02 F6 | 	mov	local02, result3
19aa0     A7 12 62 FC | 	wrlong	arg01, fp
19aa4     04 4E 05 F1 | 	add	fp, #4
19aa8     A7 1E 62 FC | 	wrlong	local01, fp
19aac     04 4E 05 F1 | 	add	fp, #4
19ab0     A7 20 62 FC | 	wrlong	local02, fp
19ab4     08 4E 85 F1 | 	sub	fp, #8
19ab8     28 20 BF FD | 	call	#_pop
19abc     FD 20 02 F6 | 	mov	local02, result1
19ac0     0C 4E 05 F1 | 	add	fp, #12
19ac4     A7 20 62 FC | 	wrlong	local02, fp
19ac8     04 4E 05 F1 | 	add	fp, #4
19acc     A7 FC 61 FC | 	wrlong	result2, fp
19ad0     04 4E 05 F1 | 	add	fp, #4
19ad4     A7 FE 61 FC | 	wrlong	result3, fp
19ad8     08 4E 85 F1 | 	sub	fp, #8
19adc     A7 12 02 F6 | 	mov	arg01, fp
19ae0     0C 4E 85 F1 | 	sub	fp, #12
19ae4     C0 C0 BF FD | 	call	#_converttoint
19ae8     FD 20 02 F6 | 	mov	local02, result1
19aec     10 1F 02 F6 | 	mov	local01, local02
19af0     01 1E 66 F0 | 	shl	local01, #1
19af4     10 1F 02 F1 | 	add	local01, local02
19af8     03 1E 66 F0 | 	shl	local01, #3
19afc     14 00 00 FF 
19b00     38 E5 05 F1 | 	add	objptr, ##10552
19b04     F2 1E 02 F1 | 	add	local01, objptr
19b08     A7 12 02 F6 | 	mov	arg01, fp
19b0c     14 00 00 FF 
19b10     38 E5 85 F1 | 	sub	objptr, ##10552
19b14     4C C1 BF FD | 	call	#_converttofloat
19b18     08 1E 06 F1 | 	add	local01, #8
19b1c     0F FB 61 FC | 	wrlong	result1, local01
19b20     A7 F0 03 F6 | 	mov	ptra, fp
19b24     B2 00 A0 FD | 	call	#popregs_
19b28                 | _do_setlen_ret
19b28     2D 00 64 FD | 	ret
19b2c                 | 
19b2c                 | ' 
19b2c                 | ' sub do_setvol
19b2c                 | _do_setvol
19b2c     02 4A 05 F6 | 	mov	COUNT_, #2
19b30     A8 00 A0 FD | 	call	#pushregs_
19b34     18 F0 07 F1 | 	add	ptra, #24
19b38     A8 1F BF FD | 	call	#_pop
19b3c     FD 12 02 F6 | 	mov	arg01, result1
19b40     FE 1E 02 F6 | 	mov	local01, result2
19b44     FF 20 02 F6 | 	mov	local02, result3
19b48     A7 12 62 FC | 	wrlong	arg01, fp
19b4c     04 4E 05 F1 | 	add	fp, #4
19b50     A7 1E 62 FC | 	wrlong	local01, fp
19b54     04 4E 05 F1 | 	add	fp, #4
19b58     A7 20 62 FC | 	wrlong	local02, fp
19b5c     08 4E 85 F1 | 	sub	fp, #8
19b60     80 1F BF FD | 	call	#_pop
19b64     FD 20 02 F6 | 	mov	local02, result1
19b68     0C 4E 05 F1 | 	add	fp, #12
19b6c     A7 20 62 FC | 	wrlong	local02, fp
19b70     04 4E 05 F1 | 	add	fp, #4
19b74     A7 FC 61 FC | 	wrlong	result2, fp
19b78     04 4E 05 F1 | 	add	fp, #4
19b7c     A7 FE 61 FC | 	wrlong	result3, fp
19b80     08 4E 85 F1 | 	sub	fp, #8
19b84     A7 12 02 F6 | 	mov	arg01, fp
19b88     0C 4E 85 F1 | 	sub	fp, #12
19b8c     18 C0 BF FD | 	call	#_converttoint
19b90     FD 20 02 F6 | 	mov	local02, result1
19b94     10 1F 02 F6 | 	mov	local01, local02
19b98     01 1E 66 F0 | 	shl	local01, #1
19b9c     10 1F 02 F1 | 	add	local01, local02
19ba0     03 1E 66 F0 | 	shl	local01, #3
19ba4     14 00 00 FF 
19ba8     38 E5 05 F1 | 	add	objptr, ##10552
19bac     F2 1E 02 F1 | 	add	local01, objptr
19bb0     A7 12 02 F6 | 	mov	arg01, fp
19bb4     14 00 00 FF 
19bb8     38 E5 85 F1 | 	sub	objptr, ##10552
19bbc     A4 C0 BF FD | 	call	#_converttofloat
19bc0     0C 1E 06 F1 | 	add	local01, #12
19bc4     0F FB 61 FC | 	wrlong	result1, local01
19bc8     A7 F0 03 F6 | 	mov	ptra, fp
19bcc     B2 00 A0 FD | 	call	#popregs_
19bd0                 | _do_setvol_ret
19bd0     2D 00 64 FD | 	ret
19bd4                 | 
19bd4                 | ' 
19bd4                 | ' sub do_setpan
19bd4                 | _do_setpan
19bd4     02 4A 05 F6 | 	mov	COUNT_, #2
19bd8     A8 00 A0 FD | 	call	#pushregs_
19bdc     18 F0 07 F1 | 	add	ptra, #24
19be0     00 1F BF FD | 	call	#_pop
19be4     FD 12 02 F6 | 	mov	arg01, result1
19be8     FE 1E 02 F6 | 	mov	local01, result2
19bec     FF 20 02 F6 | 	mov	local02, result3
19bf0     A7 12 62 FC | 	wrlong	arg01, fp
19bf4     04 4E 05 F1 | 	add	fp, #4
19bf8     A7 1E 62 FC | 	wrlong	local01, fp
19bfc     04 4E 05 F1 | 	add	fp, #4
19c00     A7 20 62 FC | 	wrlong	local02, fp
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08     D8 1E BF FD | 	call	#_pop
19c0c     FD 20 02 F6 | 	mov	local02, result1
19c10     0C 4E 05 F1 | 	add	fp, #12
19c14     A7 20 62 FC | 	wrlong	local02, fp
19c18     04 4E 05 F1 | 	add	fp, #4
19c1c     A7 FC 61 FC | 	wrlong	result2, fp
19c20     04 4E 05 F1 | 	add	fp, #4
19c24     A7 FE 61 FC | 	wrlong	result3, fp
19c28     08 4E 85 F1 | 	sub	fp, #8
19c2c     A7 12 02 F6 | 	mov	arg01, fp
19c30     0C 4E 85 F1 | 	sub	fp, #12
19c34     70 BF BF FD | 	call	#_converttoint
19c38     FD 20 02 F6 | 	mov	local02, result1
19c3c     10 1F 02 F6 | 	mov	local01, local02
19c40     01 1E 66 F0 | 	shl	local01, #1
19c44     10 1F 02 F1 | 	add	local01, local02
19c48     03 1E 66 F0 | 	shl	local01, #3
19c4c     14 00 00 FF 
19c50     38 E5 05 F1 | 	add	objptr, ##10552
19c54     F2 1E 02 F1 | 	add	local01, objptr
19c58     A7 12 02 F6 | 	mov	arg01, fp
19c5c     14 00 00 FF 
19c60     38 E5 85 F1 | 	sub	objptr, ##10552
19c64     FC BF BF FD | 	call	#_converttofloat
19c68     10 1E 06 F1 | 	add	local01, #16
19c6c     0F FB 61 FC | 	wrlong	result1, local01
19c70     A7 F0 03 F6 | 	mov	ptra, fp
19c74     B2 00 A0 FD | 	call	#popregs_
19c78                 | _do_setpan_ret
19c78     2D 00 64 FD | 	ret
19c7c                 | 
19c7c                 | ' 
19c7c                 | ' 
19c7c                 | ' sub do_pinwrite
19c7c                 | _do_pinwrite
19c7c     01 4A 05 F6 | 	mov	COUNT_, #1
19c80     A8 00 A0 FD | 	call	#pushregs_
19c84     18 F0 07 F1 | 	add	ptra, #24
19c88     58 1E BF FD | 	call	#_pop
19c8c     FD 14 02 F6 | 	mov	arg02, result1
19c90     FE 12 02 F6 | 	mov	arg01, result2
19c94     FF 1E 02 F6 | 	mov	local01, result3
19c98     A7 14 62 FC | 	wrlong	arg02, fp
19c9c     04 4E 05 F1 | 	add	fp, #4
19ca0     A7 12 62 FC | 	wrlong	arg01, fp
19ca4     04 4E 05 F1 | 	add	fp, #4
19ca8     A7 1E 62 FC | 	wrlong	local01, fp
19cac     08 4E 85 F1 | 	sub	fp, #8
19cb0     30 1E BF FD | 	call	#_pop
19cb4     FF 1E 02 F6 | 	mov	local01, result3
19cb8     0C 4E 05 F1 | 	add	fp, #12
19cbc     A7 FA 61 FC | 	wrlong	result1, fp
19cc0     04 4E 05 F1 | 	add	fp, #4
19cc4     A7 FC 61 FC | 	wrlong	result2, fp
19cc8     04 4E 05 F1 | 	add	fp, #4
19ccc     A7 1E 62 FC | 	wrlong	local01, fp
19cd0     08 4E 85 F1 | 	sub	fp, #8
19cd4     A7 12 02 F6 | 	mov	arg01, fp
19cd8     0C 4E 85 F1 | 	sub	fp, #12
19cdc     C8 BE BF FD | 	call	#_converttoint
19ce0     FD 1E 02 F6 | 	mov	local01, result1
19ce4     A7 12 02 F6 | 	mov	arg01, fp
19ce8     BC BE BF FD | 	call	#_converttoint
19cec     FD 14 02 F6 | 	mov	arg02, result1
19cf0     0F 13 02 F6 | 	mov	arg01, local01
19cf4     58 6F B0 FD | 	call	#__system___pinwrite
19cf8     A7 F0 03 F6 | 	mov	ptra, fp
19cfc     B2 00 A0 FD | 	call	#popregs_
19d00                 | _do_pinwrite_ret
19d00     2D 00 64 FD | 	ret
19d04                 | 
19d04                 | ' 
19d04                 | ' sub do_pinfloat
19d04                 | _do_pinfloat
19d04     00 4A 05 F6 | 	mov	COUNT_, #0
19d08     A8 00 A0 FD | 	call	#pushregs_
19d0c     0C F0 07 F1 | 	add	ptra, #12
19d10     D0 1D BF FD | 	call	#_pop
19d14     A7 FA 61 FC | 	wrlong	result1, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 FC 61 FC | 	wrlong	result2, fp
19d20     04 4E 05 F1 | 	add	fp, #4
19d24     A7 FE 61 FC | 	wrlong	result3, fp
19d28     08 4E 85 F1 | 	sub	fp, #8
19d2c     A7 12 02 F6 | 	mov	arg01, fp
19d30     74 BE BF FD | 	call	#_converttoint
19d34     50 FA 61 FD | 	fltl	result1
19d38     A7 F0 03 F6 | 	mov	ptra, fp
19d3c     B2 00 A0 FD | 	call	#popregs_
19d40                 | _do_pinfloat_ret
19d40     2D 00 64 FD | 	ret
19d44                 | 
19d44                 | ' 
19d44                 | ' sub do_pinlo
19d44                 | _do_pinlo
19d44     00 4A 05 F6 | 	mov	COUNT_, #0
19d48     A8 00 A0 FD | 	call	#pushregs_
19d4c     0C F0 07 F1 | 	add	ptra, #12
19d50     90 1D BF FD | 	call	#_pop
19d54     A7 FA 61 FC | 	wrlong	result1, fp
19d58     04 4E 05 F1 | 	add	fp, #4
19d5c     A7 FC 61 FC | 	wrlong	result2, fp
19d60     04 4E 05 F1 | 	add	fp, #4
19d64     A7 FE 61 FC | 	wrlong	result3, fp
19d68     08 4E 85 F1 | 	sub	fp, #8
19d6c     A7 12 02 F6 | 	mov	arg01, fp
19d70     34 BE BF FD | 	call	#_converttoint
19d74     58 FA 61 FD | 	drvl	result1
19d78     A7 F0 03 F6 | 	mov	ptra, fp
19d7c     B2 00 A0 FD | 	call	#popregs_
19d80                 | _do_pinlo_ret
19d80     2D 00 64 FD | 	ret
19d84                 | 
19d84                 | ' 
19d84                 | ' sub do_pinhi
19d84                 | _do_pinhi
19d84     00 4A 05 F6 | 	mov	COUNT_, #0
19d88     A8 00 A0 FD | 	call	#pushregs_
19d8c     0C F0 07 F1 | 	add	ptra, #12
19d90     50 1D BF FD | 	call	#_pop
19d94     A7 FA 61 FC | 	wrlong	result1, fp
19d98     04 4E 05 F1 | 	add	fp, #4
19d9c     A7 FC 61 FC | 	wrlong	result2, fp
19da0     04 4E 05 F1 | 	add	fp, #4
19da4     A7 FE 61 FC | 	wrlong	result3, fp
19da8     08 4E 85 F1 | 	sub	fp, #8
19dac     A7 12 02 F6 | 	mov	arg01, fp
19db0     F4 BD BF FD | 	call	#_converttoint
19db4     59 FA 61 FD | 	drvh	result1
19db8     A7 F0 03 F6 | 	mov	ptra, fp
19dbc     B2 00 A0 FD | 	call	#popregs_
19dc0                 | _do_pinhi_ret
19dc0     2D 00 64 FD | 	ret
19dc4                 | 
19dc4                 | ' 
19dc4                 | ' sub do_pintoggle
19dc4                 | _do_pintoggle
19dc4     00 4A 05 F6 | 	mov	COUNT_, #0
19dc8     A8 00 A0 FD | 	call	#pushregs_
19dcc     0C F0 07 F1 | 	add	ptra, #12
19dd0     10 1D BF FD | 	call	#_pop
19dd4     A7 FA 61 FC | 	wrlong	result1, fp
19dd8     04 4E 05 F1 | 	add	fp, #4
19ddc     A7 FC 61 FC | 	wrlong	result2, fp
19de0     04 4E 05 F1 | 	add	fp, #4
19de4     A7 FE 61 FC | 	wrlong	result3, fp
19de8     08 4E 85 F1 | 	sub	fp, #8
19dec     A7 12 02 F6 | 	mov	arg01, fp
19df0     B4 BD BF FD | 	call	#_converttoint
19df4     5F FA 61 FD | 	drvnot	result1
19df8     A7 F0 03 F6 | 	mov	ptra, fp
19dfc     B2 00 A0 FD | 	call	#popregs_
19e00                 | _do_pintoggle_ret
19e00     2D 00 64 FD | 	ret
19e04                 | 
19e04                 | ' 
19e04                 | ' 
19e04                 | ' sub do_pinstart
19e04                 | _do_pinstart
19e04     03 4A 05 F6 | 	mov	COUNT_, #3
19e08     A8 00 A0 FD | 	call	#pushregs_
19e0c     30 F0 07 F1 | 	add	ptra, #48
19e10     D0 1C BF FD | 	call	#_pop
19e14     FD 16 02 F6 | 	mov	arg03, result1
19e18     FE 14 02 F6 | 	mov	arg02, result2
19e1c     FF 18 02 F6 | 	mov	arg04, result3
19e20     A7 16 62 FC | 	wrlong	arg03, fp
19e24     04 4E 05 F1 | 	add	fp, #4
19e28     A7 14 62 FC | 	wrlong	arg02, fp
19e2c     04 4E 05 F1 | 	add	fp, #4
19e30     A7 18 62 FC | 	wrlong	arg04, fp
19e34     08 4E 85 F1 | 	sub	fp, #8
19e38     A8 1C BF FD | 	call	#_pop
19e3c     FD 16 02 F6 | 	mov	arg03, result1
19e40     FE 14 02 F6 | 	mov	arg02, result2
19e44     FF 18 02 F6 | 	mov	arg04, result3
19e48     0C 4E 05 F1 | 	add	fp, #12
19e4c     A7 16 62 FC | 	wrlong	arg03, fp
19e50     04 4E 05 F1 | 	add	fp, #4
19e54     A7 14 62 FC | 	wrlong	arg02, fp
19e58     04 4E 05 F1 | 	add	fp, #4
19e5c     A7 18 62 FC | 	wrlong	arg04, fp
19e60     14 4E 85 F1 | 	sub	fp, #20
19e64     7C 1C BF FD | 	call	#_pop
19e68     FD 16 02 F6 | 	mov	arg03, result1
19e6c     FE 14 02 F6 | 	mov	arg02, result2
19e70     FF 18 02 F6 | 	mov	arg04, result3
19e74     18 4E 05 F1 | 	add	fp, #24
19e78     A7 16 62 FC | 	wrlong	arg03, fp
19e7c     04 4E 05 F1 | 	add	fp, #4
19e80     A7 14 62 FC | 	wrlong	arg02, fp
19e84     04 4E 05 F1 | 	add	fp, #4
19e88     A7 18 62 FC | 	wrlong	arg04, fp
19e8c     20 4E 85 F1 | 	sub	fp, #32
19e90     50 1C BF FD | 	call	#_pop
19e94     FF 16 02 F6 | 	mov	arg03, result3
19e98     24 4E 05 F1 | 	add	fp, #36
19e9c     A7 FA 61 FC | 	wrlong	result1, fp
19ea0     04 4E 05 F1 | 	add	fp, #4
19ea4     A7 FC 61 FC | 	wrlong	result2, fp
19ea8     04 4E 05 F1 | 	add	fp, #4
19eac     A7 16 62 FC | 	wrlong	arg03, fp
19eb0     08 4E 85 F1 | 	sub	fp, #8
19eb4     A7 12 02 F6 | 	mov	arg01, fp
19eb8     24 4E 85 F1 | 	sub	fp, #36
19ebc     E8 BC BF FD | 	call	#_converttoint
19ec0     FD 1E 02 F6 | 	mov	local01, result1
19ec4     18 4E 05 F1 | 	add	fp, #24
19ec8     A7 12 02 F6 | 	mov	arg01, fp
19ecc     18 4E 85 F1 | 	sub	fp, #24
19ed0     D4 BC BF FD | 	call	#_converttoint
19ed4     FD 20 02 F6 | 	mov	local02, result1
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 12 02 F6 | 	mov	arg01, fp
19ee0     0C 4E 85 F1 | 	sub	fp, #12
19ee4     C0 BC BF FD | 	call	#_converttoint
19ee8     FD 22 02 F6 | 	mov	local03, result1
19eec     A7 12 02 F6 | 	mov	arg01, fp
19ef0     B4 BC BF FD | 	call	#_converttoint
19ef4     40 1E 62 FD | 	dirl	local01
19ef8     0F 21 02 FC | 	wrpin	local02, local01
19efc     0F 23 12 FC | 	wxpin	local03, local01
19f00     0F FB 21 FC | 	wypin	result1, local01
19f04     41 1E 62 FD | 	dirh	local01
19f08     A7 F0 03 F6 | 	mov	ptra, fp
19f0c     B2 00 A0 FD | 	call	#popregs_
19f10                 | _do_pinstart_ret
19f10     2D 00 64 FD | 	ret
19f14                 | 
19f14                 | ' 
19f14                 | ' 
19f14                 | ' sub do_wrpin
19f14                 | _do_wrpin
19f14     01 4A 05 F6 | 	mov	COUNT_, #1
19f18     A8 00 A0 FD | 	call	#pushregs_
19f1c     18 F0 07 F1 | 	add	ptra, #24
19f20     C0 1B BF FD | 	call	#_pop
19f24     FD 14 02 F6 | 	mov	arg02, result1
19f28     FE 12 02 F6 | 	mov	arg01, result2
19f2c     FF 1E 02 F6 | 	mov	local01, result3
19f30     A7 14 62 FC | 	wrlong	arg02, fp
19f34     04 4E 05 F1 | 	add	fp, #4
19f38     A7 12 62 FC | 	wrlong	arg01, fp
19f3c     04 4E 05 F1 | 	add	fp, #4
19f40     A7 1E 62 FC | 	wrlong	local01, fp
19f44     08 4E 85 F1 | 	sub	fp, #8
19f48     98 1B BF FD | 	call	#_pop
19f4c     FF 1E 02 F6 | 	mov	local01, result3
19f50     0C 4E 05 F1 | 	add	fp, #12
19f54     A7 FA 61 FC | 	wrlong	result1, fp
19f58     04 4E 05 F1 | 	add	fp, #4
19f5c     A7 FC 61 FC | 	wrlong	result2, fp
19f60     04 4E 05 F1 | 	add	fp, #4
19f64     A7 1E 62 FC | 	wrlong	local01, fp
19f68     08 4E 85 F1 | 	sub	fp, #8
19f6c     A7 12 02 F6 | 	mov	arg01, fp
19f70     0C 4E 85 F1 | 	sub	fp, #12
19f74     30 BC BF FD | 	call	#_converttoint
19f78     FD 1E 02 F6 | 	mov	local01, result1
19f7c     A7 12 02 F6 | 	mov	arg01, fp
19f80     24 BC BF FD | 	call	#_converttoint
19f84     0F FB 01 FC | 	wrpin	result1, local01
19f88     A7 F0 03 F6 | 	mov	ptra, fp
19f8c     B2 00 A0 FD | 	call	#popregs_
19f90                 | _do_wrpin_ret
19f90     2D 00 64 FD | 	ret
19f94                 | 
19f94                 | ' 
19f94                 | ' sub do_wxpin
19f94                 | _do_wxpin
19f94     01 4A 05 F6 | 	mov	COUNT_, #1
19f98     A8 00 A0 FD | 	call	#pushregs_
19f9c     18 F0 07 F1 | 	add	ptra, #24
19fa0     40 1B BF FD | 	call	#_pop
19fa4     FD 14 02 F6 | 	mov	arg02, result1
19fa8     FE 12 02 F6 | 	mov	arg01, result2
19fac     FF 1E 02 F6 | 	mov	local01, result3
19fb0     A7 14 62 FC | 	wrlong	arg02, fp
19fb4     04 4E 05 F1 | 	add	fp, #4
19fb8     A7 12 62 FC | 	wrlong	arg01, fp
19fbc     04 4E 05 F1 | 	add	fp, #4
19fc0     A7 1E 62 FC | 	wrlong	local01, fp
19fc4     08 4E 85 F1 | 	sub	fp, #8
19fc8     18 1B BF FD | 	call	#_pop
19fcc     FF 1E 02 F6 | 	mov	local01, result3
19fd0     0C 4E 05 F1 | 	add	fp, #12
19fd4     A7 FA 61 FC | 	wrlong	result1, fp
19fd8     04 4E 05 F1 | 	add	fp, #4
19fdc     A7 FC 61 FC | 	wrlong	result2, fp
19fe0     04 4E 05 F1 | 	add	fp, #4
19fe4     A7 1E 62 FC | 	wrlong	local01, fp
19fe8     08 4E 85 F1 | 	sub	fp, #8
19fec     A7 12 02 F6 | 	mov	arg01, fp
19ff0     0C 4E 85 F1 | 	sub	fp, #12
19ff4     B0 BB BF FD | 	call	#_converttoint
19ff8     FD 1E 02 F6 | 	mov	local01, result1
19ffc     A7 12 02 F6 | 	mov	arg01, fp
1a000     A4 BB BF FD | 	call	#_converttoint
1a004     0F FB 11 FC | 	wxpin	result1, local01
1a008     A7 F0 03 F6 | 	mov	ptra, fp
1a00c     B2 00 A0 FD | 	call	#popregs_
1a010                 | _do_wxpin_ret
1a010     2D 00 64 FD | 	ret
1a014                 | 
1a014                 | ' 
1a014                 | ' sub do_wypin
1a014                 | _do_wypin
1a014     01 4A 05 F6 | 	mov	COUNT_, #1
1a018     A8 00 A0 FD | 	call	#pushregs_
1a01c     18 F0 07 F1 | 	add	ptra, #24
1a020     C0 1A BF FD | 	call	#_pop
1a024     FD 14 02 F6 | 	mov	arg02, result1
1a028     FE 12 02 F6 | 	mov	arg01, result2
1a02c     FF 1E 02 F6 | 	mov	local01, result3
1a030     A7 14 62 FC | 	wrlong	arg02, fp
1a034     04 4E 05 F1 | 	add	fp, #4
1a038     A7 12 62 FC | 	wrlong	arg01, fp
1a03c     04 4E 05 F1 | 	add	fp, #4
1a040     A7 1E 62 FC | 	wrlong	local01, fp
1a044     08 4E 85 F1 | 	sub	fp, #8
1a048     98 1A BF FD | 	call	#_pop
1a04c     FF 1E 02 F6 | 	mov	local01, result3
1a050     0C 4E 05 F1 | 	add	fp, #12
1a054     A7 FA 61 FC | 	wrlong	result1, fp
1a058     04 4E 05 F1 | 	add	fp, #4
1a05c     A7 FC 61 FC | 	wrlong	result2, fp
1a060     04 4E 05 F1 | 	add	fp, #4
1a064     A7 1E 62 FC | 	wrlong	local01, fp
1a068     08 4E 85 F1 | 	sub	fp, #8
1a06c     A7 12 02 F6 | 	mov	arg01, fp
1a070     0C 4E 85 F1 | 	sub	fp, #12
1a074     30 BB BF FD | 	call	#_converttoint
1a078     FD 1E 02 F6 | 	mov	local01, result1
1a07c     A7 12 02 F6 | 	mov	arg01, fp
1a080     24 BB BF FD | 	call	#_converttoint
1a084     0F FB 21 FC | 	wypin	result1, local01
1a088     A7 F0 03 F6 | 	mov	ptra, fp
1a08c     B2 00 A0 FD | 	call	#popregs_
1a090                 | _do_wypin_ret
1a090     2D 00 64 FD | 	ret
1a094                 | 
1a094                 | ' 
1a094                 | ' sub do_position
1a094                 | _do_position
1a094     01 4A 05 F6 | 	mov	COUNT_, #1
1a098     A8 00 A0 FD | 	call	#pushregs_
1a09c     18 F0 07 F1 | 	add	ptra, #24
1a0a0     40 1A BF FD | 	call	#_pop
1a0a4     FD 14 02 F6 | 	mov	arg02, result1
1a0a8     FE 12 02 F6 | 	mov	arg01, result2
1a0ac     FF 1E 02 F6 | 	mov	local01, result3
1a0b0     A7 14 62 FC | 	wrlong	arg02, fp
1a0b4     04 4E 05 F1 | 	add	fp, #4
1a0b8     A7 12 62 FC | 	wrlong	arg01, fp
1a0bc     04 4E 05 F1 | 	add	fp, #4
1a0c0     A7 1E 62 FC | 	wrlong	local01, fp
1a0c4     08 4E 85 F1 | 	sub	fp, #8
1a0c8     18 1A BF FD | 	call	#_pop
1a0cc     FF 1E 02 F6 | 	mov	local01, result3
1a0d0     0C 4E 05 F1 | 	add	fp, #12
1a0d4     A7 FA 61 FC | 	wrlong	result1, fp
1a0d8     04 4E 05 F1 | 	add	fp, #4
1a0dc     A7 FC 61 FC | 	wrlong	result2, fp
1a0e0     04 4E 05 F1 | 	add	fp, #4
1a0e4     A7 1E 62 FC | 	wrlong	local01, fp
1a0e8     08 4E 85 F1 | 	sub	fp, #8
1a0ec     A7 12 02 F6 | 	mov	arg01, fp
1a0f0     0C 4E 85 F1 | 	sub	fp, #12
1a0f4     B0 BA BF FD | 	call	#_converttoint
1a0f8     FD 1E 02 F6 | 	mov	local01, result1
1a0fc     A7 12 02 F6 | 	mov	arg01, fp
1a100     A4 BA BF FD | 	call	#_converttoint
1a104     FD 14 02 F6 | 	mov	arg02, result1
1a108     0F 13 02 F6 | 	mov	arg01, local01
1a10c     A0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a110     A7 F0 03 F6 | 	mov	ptra, fp
1a114     B2 00 A0 FD | 	call	#popregs_
1a118                 | _do_position_ret
1a118     2D 00 64 FD | 	ret
1a11c                 | 
1a11c                 | ' 
1a11c                 | ' sub do_poke
1a11c                 | _do_poke
1a11c     01 4A 05 F6 | 	mov	COUNT_, #1
1a120     A8 00 A0 FD | 	call	#pushregs_
1a124     20 F0 07 F1 | 	add	ptra, #32
1a128     B8 19 BF FD | 	call	#_pop
1a12c     FD 14 02 F6 | 	mov	arg02, result1
1a130     FE 12 02 F6 | 	mov	arg01, result2
1a134     FF 1E 02 F6 | 	mov	local01, result3
1a138     A7 14 62 FC | 	wrlong	arg02, fp
1a13c     04 4E 05 F1 | 	add	fp, #4
1a140     A7 12 62 FC | 	wrlong	arg01, fp
1a144     04 4E 05 F1 | 	add	fp, #4
1a148     A7 1E 62 FC | 	wrlong	local01, fp
1a14c     08 4E 85 F1 | 	sub	fp, #8
1a150     90 19 BF FD | 	call	#_pop
1a154     FF 1E 02 F6 | 	mov	local01, result3
1a158     0C 4E 05 F1 | 	add	fp, #12
1a15c     A7 FA 61 FC | 	wrlong	result1, fp
1a160     04 4E 05 F1 | 	add	fp, #4
1a164     A7 FC 61 FC | 	wrlong	result2, fp
1a168     04 4E 05 F1 | 	add	fp, #4
1a16c     A7 1E 62 FC | 	wrlong	local01, fp
1a170     08 4E 85 F1 | 	sub	fp, #8
1a174     A7 12 02 F6 | 	mov	arg01, fp
1a178     0C 4E 85 F1 | 	sub	fp, #12
1a17c     28 BA BF FD | 	call	#_converttoint
1a180     18 4E 05 F1 | 	add	fp, #24
1a184     A7 FA 61 FC | 	wrlong	result1, fp
1a188     18 4E 85 F1 | 	sub	fp, #24
1a18c     A7 12 02 F6 | 	mov	arg01, fp
1a190     14 BA BF FD | 	call	#_converttoint
1a194     1C 4E 05 F1 | 	add	fp, #28
1a198     A7 FA 61 FC | 	wrlong	result1, fp
1a19c                 | ' t1=pop() 'value
1a19c                 | ' t2=pop() 
1a19c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a19c                 | ' if a<$80000 then poke a,v else pspoke a,v
1a19c     04 4E 85 F1 | 	sub	fp, #4
1a1a0     A7 1E 02 FB | 	rdlong	local01, fp
1a1a4     18 4E 85 F1 | 	sub	fp, #24
1a1a8     00 04 00 FF 
1a1ac     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a1b0     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a1b4     18 4E 05 F1 | 	add	fp, #24
1a1b8     A7 12 02 FB | 	rdlong	arg01, fp
1a1bc     04 4E 05 F1 | 	add	fp, #4
1a1c0     A7 14 02 FB | 	rdlong	arg02, fp
1a1c4     1C 4E 85 F1 | 	sub	fp, #28
1a1c8     09 15 42 FC | 	wrbyte	arg02, arg01
1a1cc     18 00 90 FD | 	jmp	#LR__2121
1a1d0                 | LR__2120
1a1d0     18 4E 05 F1 | 	add	fp, #24
1a1d4     A7 12 02 FB | 	rdlong	arg01, fp
1a1d8     04 4E 05 F1 | 	add	fp, #4
1a1dc     A7 14 02 FB | 	rdlong	arg02, fp
1a1e0     1C 4E 85 F1 | 	sub	fp, #28
1a1e4     10 35 B0 FD | 	call	#_pspoke
1a1e8                 | LR__2121
1a1e8     A7 F0 03 F6 | 	mov	ptra, fp
1a1ec     B2 00 A0 FD | 	call	#popregs_
1a1f0                 | _do_poke_ret
1a1f0     2D 00 64 FD | 	ret
1a1f4                 | 
1a1f4                 | ' 
1a1f4                 | ' sub do_dpoke
1a1f4                 | _do_dpoke
1a1f4     01 4A 05 F6 | 	mov	COUNT_, #1
1a1f8     A8 00 A0 FD | 	call	#pushregs_
1a1fc     20 F0 07 F1 | 	add	ptra, #32
1a200     E0 18 BF FD | 	call	#_pop
1a204     FD 14 02 F6 | 	mov	arg02, result1
1a208     FE 12 02 F6 | 	mov	arg01, result2
1a20c     FF 1E 02 F6 | 	mov	local01, result3
1a210     A7 14 62 FC | 	wrlong	arg02, fp
1a214     04 4E 05 F1 | 	add	fp, #4
1a218     A7 12 62 FC | 	wrlong	arg01, fp
1a21c     04 4E 05 F1 | 	add	fp, #4
1a220     A7 1E 62 FC | 	wrlong	local01, fp
1a224     08 4E 85 F1 | 	sub	fp, #8
1a228     B8 18 BF FD | 	call	#_pop
1a22c     FF 1E 02 F6 | 	mov	local01, result3
1a230     0C 4E 05 F1 | 	add	fp, #12
1a234     A7 FA 61 FC | 	wrlong	result1, fp
1a238     04 4E 05 F1 | 	add	fp, #4
1a23c     A7 FC 61 FC | 	wrlong	result2, fp
1a240     04 4E 05 F1 | 	add	fp, #4
1a244     A7 1E 62 FC | 	wrlong	local01, fp
1a248     08 4E 85 F1 | 	sub	fp, #8
1a24c     A7 12 02 F6 | 	mov	arg01, fp
1a250     0C 4E 85 F1 | 	sub	fp, #12
1a254     50 B9 BF FD | 	call	#_converttoint
1a258     18 4E 05 F1 | 	add	fp, #24
1a25c     A7 FA 61 FC | 	wrlong	result1, fp
1a260     18 4E 85 F1 | 	sub	fp, #24
1a264     A7 12 02 F6 | 	mov	arg01, fp
1a268     3C B9 BF FD | 	call	#_converttoint
1a26c     1C 4E 05 F1 | 	add	fp, #28
1a270     A7 FA 61 FC | 	wrlong	result1, fp
1a274                 | ' t1=pop() 'value
1a274                 | ' t2=pop() 
1a274                 | ' a=converttoint(t2) : v=converttoint(t1)
1a274                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a274     04 4E 85 F1 | 	sub	fp, #4
1a278     A7 1E 02 FB | 	rdlong	local01, fp
1a27c     18 4E 85 F1 | 	sub	fp, #24
1a280     00 04 00 FF 
1a284     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a288     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a28c     18 4E 05 F1 | 	add	fp, #24
1a290     A7 12 02 FB | 	rdlong	arg01, fp
1a294     04 4E 05 F1 | 	add	fp, #4
1a298     A7 14 02 FB | 	rdlong	arg02, fp
1a29c     1C 4E 85 F1 | 	sub	fp, #28
1a2a0     09 15 52 FC | 	wrword	arg02, arg01
1a2a4     18 00 90 FD | 	jmp	#LR__2131
1a2a8                 | LR__2130
1a2a8     18 4E 05 F1 | 	add	fp, #24
1a2ac     A7 12 02 FB | 	rdlong	arg01, fp
1a2b0     04 4E 05 F1 | 	add	fp, #4
1a2b4     A7 14 02 FB | 	rdlong	arg02, fp
1a2b8     1C 4E 85 F1 | 	sub	fp, #28
1a2bc     F0 33 B0 FD | 	call	#_psdpoke
1a2c0                 | LR__2131
1a2c0     A7 F0 03 F6 | 	mov	ptra, fp
1a2c4     B2 00 A0 FD | 	call	#popregs_
1a2c8                 | _do_dpoke_ret
1a2c8     2D 00 64 FD | 	ret
1a2cc                 | 
1a2cc                 | ' 
1a2cc                 | ' sub do_lpoke
1a2cc                 | _do_lpoke
1a2cc     01 4A 05 F6 | 	mov	COUNT_, #1
1a2d0     A8 00 A0 FD | 	call	#pushregs_
1a2d4     20 F0 07 F1 | 	add	ptra, #32
1a2d8     08 18 BF FD | 	call	#_pop
1a2dc     FD 14 02 F6 | 	mov	arg02, result1
1a2e0     FE 12 02 F6 | 	mov	arg01, result2
1a2e4     FF 1E 02 F6 | 	mov	local01, result3
1a2e8     A7 14 62 FC | 	wrlong	arg02, fp
1a2ec     04 4E 05 F1 | 	add	fp, #4
1a2f0     A7 12 62 FC | 	wrlong	arg01, fp
1a2f4     04 4E 05 F1 | 	add	fp, #4
1a2f8     A7 1E 62 FC | 	wrlong	local01, fp
1a2fc     08 4E 85 F1 | 	sub	fp, #8
1a300     E0 17 BF FD | 	call	#_pop
1a304     FF 1E 02 F6 | 	mov	local01, result3
1a308     0C 4E 05 F1 | 	add	fp, #12
1a30c     A7 FA 61 FC | 	wrlong	result1, fp
1a310     04 4E 05 F1 | 	add	fp, #4
1a314     A7 FC 61 FC | 	wrlong	result2, fp
1a318     04 4E 05 F1 | 	add	fp, #4
1a31c     A7 1E 62 FC | 	wrlong	local01, fp
1a320     08 4E 85 F1 | 	sub	fp, #8
1a324     A7 12 02 F6 | 	mov	arg01, fp
1a328     0C 4E 85 F1 | 	sub	fp, #12
1a32c     78 B8 BF FD | 	call	#_converttoint
1a330     18 4E 05 F1 | 	add	fp, #24
1a334     A7 FA 61 FC | 	wrlong	result1, fp
1a338     18 4E 85 F1 | 	sub	fp, #24
1a33c     A7 12 02 F6 | 	mov	arg01, fp
1a340     64 B8 BF FD | 	call	#_converttoint
1a344     1C 4E 05 F1 | 	add	fp, #28
1a348     A7 FA 61 FC | 	wrlong	result1, fp
1a34c                 | ' t1=pop() 'value
1a34c                 | ' t2=pop() 
1a34c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a34c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a34c     04 4E 85 F1 | 	sub	fp, #4
1a350     A7 1E 02 FB | 	rdlong	local01, fp
1a354     18 4E 85 F1 | 	sub	fp, #24
1a358     00 04 00 FF 
1a35c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a360     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a364     18 4E 05 F1 | 	add	fp, #24
1a368     A7 12 02 FB | 	rdlong	arg01, fp
1a36c     04 4E 05 F1 | 	add	fp, #4
1a370     A7 14 02 FB | 	rdlong	arg02, fp
1a374     1C 4E 85 F1 | 	sub	fp, #28
1a378     09 15 62 FC | 	wrlong	arg02, arg01
1a37c     18 00 90 FD | 	jmp	#LR__2141
1a380                 | LR__2140
1a380     18 4E 05 F1 | 	add	fp, #24
1a384     A7 12 02 FB | 	rdlong	arg01, fp
1a388     04 4E 05 F1 | 	add	fp, #4
1a38c     A7 14 02 FB | 	rdlong	arg02, fp
1a390     1C 4E 85 F1 | 	sub	fp, #28
1a394     D0 32 B0 FD | 	call	#_pslpoke
1a398                 | LR__2141
1a398     A7 F0 03 F6 | 	mov	ptra, fp
1a39c     B2 00 A0 FD | 	call	#popregs_
1a3a0                 | _do_lpoke_ret
1a3a0     2D 00 64 FD | 	ret
1a3a4                 | 
1a3a4                 | ' 
1a3a4                 | ' sub do_peek
1a3a4                 | _do_peek
1a3a4     00 4A 05 F6 | 	mov	COUNT_, #0
1a3a8     A8 00 A0 FD | 	call	#pushregs_
1a3ac     14 F0 07 F1 | 	add	ptra, #20
1a3b0     30 17 BF FD | 	call	#_pop
1a3b4     A7 FA 61 FC | 	wrlong	result1, fp
1a3b8     04 4E 05 F1 | 	add	fp, #4
1a3bc     A7 FC 61 FC | 	wrlong	result2, fp
1a3c0     04 4E 05 F1 | 	add	fp, #4
1a3c4     A7 FE 61 FC | 	wrlong	result3, fp
1a3c8     08 4E 85 F1 | 	sub	fp, #8
1a3cc     A7 12 02 F6 | 	mov	arg01, fp
1a3d0     D4 B7 BF FD | 	call	#_converttoint
1a3d4     0C 4E 05 F1 | 	add	fp, #12
1a3d8     A7 FA 61 FC | 	wrlong	result1, fp
1a3dc                 | ' t1=pop()
1a3dc                 | ' a=converttoint(t1)
1a3dc                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a3dc     0C 4E 85 F1 | 	sub	fp, #12
1a3e0     00 04 00 FF 
1a3e4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a3e8     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a3ec     0C 4E 05 F1 | 	add	fp, #12
1a3f0     A7 12 02 FB | 	rdlong	arg01, fp
1a3f4     09 FB C1 FA | 	rdbyte	result1, arg01
1a3f8     04 4E 05 F1 | 	add	fp, #4
1a3fc     A7 FA 61 FC | 	wrlong	result1, fp
1a400     10 4E 85 F1 | 	sub	fp, #16
1a404     20 00 90 FD | 	jmp	#LR__2151
1a408                 | LR__2150
1a408     0C 4E 05 F1 | 	add	fp, #12
1a40c     A7 12 02 FB | 	rdlong	arg01, fp
1a410     0C 4E 85 F1 | 	sub	fp, #12
1a414     28 33 B0 FD | 	call	#_pspeek
1a418     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a41c     10 4E 05 F1 | 	add	fp, #16
1a420     A7 FA 61 FC | 	wrlong	result1, fp
1a424     10 4E 85 F1 | 	sub	fp, #16
1a428                 | LR__2151
1a428     08 4E 05 F1 | 	add	fp, #8
1a42c     A7 3A 68 FC | 	wrlong	#29, fp
1a430     08 4E 05 F1 | 	add	fp, #8
1a434     A7 12 02 FB | 	rdlong	arg01, fp
1a438     10 4E 85 F1 | 	sub	fp, #16
1a43c     A7 12 62 FC | 	wrlong	arg01, fp
1a440     A7 12 02 F6 | 	mov	arg01, fp
1a444     34 17 BF FD | 	call	#_push
1a448     A7 F0 03 F6 | 	mov	ptra, fp
1a44c     B2 00 A0 FD | 	call	#popregs_
1a450                 | _do_peek_ret
1a450     2D 00 64 FD | 	ret
1a454                 | 
1a454                 | ' 
1a454                 | ' sub do_dpeek
1a454                 | _do_dpeek
1a454     00 4A 05 F6 | 	mov	COUNT_, #0
1a458     A8 00 A0 FD | 	call	#pushregs_
1a45c     14 F0 07 F1 | 	add	ptra, #20
1a460     80 16 BF FD | 	call	#_pop
1a464     A7 FA 61 FC | 	wrlong	result1, fp
1a468     04 4E 05 F1 | 	add	fp, #4
1a46c     A7 FC 61 FC | 	wrlong	result2, fp
1a470     04 4E 05 F1 | 	add	fp, #4
1a474     A7 FE 61 FC | 	wrlong	result3, fp
1a478     08 4E 85 F1 | 	sub	fp, #8
1a47c     A7 12 02 F6 | 	mov	arg01, fp
1a480     24 B7 BF FD | 	call	#_converttoint
1a484     0C 4E 05 F1 | 	add	fp, #12
1a488     A7 FA 61 FC | 	wrlong	result1, fp
1a48c                 | ' t1=pop()
1a48c                 | ' a=converttoint(t1)
1a48c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a48c     0C 4E 85 F1 | 	sub	fp, #12
1a490     00 04 00 FF 
1a494     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a498     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a49c     0C 4E 05 F1 | 	add	fp, #12
1a4a0     A7 12 02 FB | 	rdlong	arg01, fp
1a4a4     09 FB E1 FA | 	rdword	result1, arg01
1a4a8     04 4E 05 F1 | 	add	fp, #4
1a4ac     A7 FA 61 FC | 	wrlong	result1, fp
1a4b0     10 4E 85 F1 | 	sub	fp, #16
1a4b4     1C 00 90 FD | 	jmp	#LR__2161
1a4b8                 | LR__2160
1a4b8     0C 4E 05 F1 | 	add	fp, #12
1a4bc     A7 12 02 FB | 	rdlong	arg01, fp
1a4c0     0C 4E 85 F1 | 	sub	fp, #12
1a4c4     28 33 B0 FD | 	call	#_psdpeek
1a4c8     10 4E 05 F1 | 	add	fp, #16
1a4cc     A7 FA 61 FC | 	wrlong	result1, fp
1a4d0     10 4E 85 F1 | 	sub	fp, #16
1a4d4                 | LR__2161
1a4d4     08 4E 05 F1 | 	add	fp, #8
1a4d8     A7 3A 68 FC | 	wrlong	#29, fp
1a4dc     08 4E 05 F1 | 	add	fp, #8
1a4e0     A7 12 02 FB | 	rdlong	arg01, fp
1a4e4     10 4E 85 F1 | 	sub	fp, #16
1a4e8     A7 12 62 FC | 	wrlong	arg01, fp
1a4ec     A7 12 02 F6 | 	mov	arg01, fp
1a4f0     88 16 BF FD | 	call	#_push
1a4f4     A7 F0 03 F6 | 	mov	ptra, fp
1a4f8     B2 00 A0 FD | 	call	#popregs_
1a4fc                 | _do_dpeek_ret
1a4fc     2D 00 64 FD | 	ret
1a500                 | 
1a500                 | ' 
1a500                 | ' 
1a500                 | ' sub do_lpeek
1a500                 | _do_lpeek
1a500     00 4A 05 F6 | 	mov	COUNT_, #0
1a504     A8 00 A0 FD | 	call	#pushregs_
1a508     14 F0 07 F1 | 	add	ptra, #20
1a50c     D4 15 BF FD | 	call	#_pop
1a510     A7 FA 61 FC | 	wrlong	result1, fp
1a514     04 4E 05 F1 | 	add	fp, #4
1a518     A7 FC 61 FC | 	wrlong	result2, fp
1a51c     04 4E 05 F1 | 	add	fp, #4
1a520     A7 FE 61 FC | 	wrlong	result3, fp
1a524     08 4E 85 F1 | 	sub	fp, #8
1a528     A7 12 02 F6 | 	mov	arg01, fp
1a52c     78 B6 BF FD | 	call	#_converttoint
1a530     0C 4E 05 F1 | 	add	fp, #12
1a534     A7 FA 61 FC | 	wrlong	result1, fp
1a538                 | ' t1=pop()
1a538                 | ' a=converttoint(t1)
1a538                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a538     0C 4E 85 F1 | 	sub	fp, #12
1a53c     00 04 00 FF 
1a540     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a544     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a548     0C 4E 05 F1 | 	add	fp, #12
1a54c     A7 12 02 FB | 	rdlong	arg01, fp
1a550     09 FB 01 FB | 	rdlong	result1, arg01
1a554     04 4E 05 F1 | 	add	fp, #4
1a558     A7 FA 61 FC | 	wrlong	result1, fp
1a55c     10 4E 85 F1 | 	sub	fp, #16
1a560     1C 00 90 FD | 	jmp	#LR__2171
1a564                 | LR__2170
1a564     0C 4E 05 F1 | 	add	fp, #12
1a568     A7 12 02 FB | 	rdlong	arg01, fp
1a56c     0C 4E 85 F1 | 	sub	fp, #12
1a570     24 32 B0 FD | 	call	#_pslpeek
1a574     10 4E 05 F1 | 	add	fp, #16
1a578     A7 FA 61 FC | 	wrlong	result1, fp
1a57c     10 4E 85 F1 | 	sub	fp, #16
1a580                 | LR__2171
1a580     08 4E 05 F1 | 	add	fp, #8
1a584     A7 3A 68 FC | 	wrlong	#29, fp
1a588     08 4E 05 F1 | 	add	fp, #8
1a58c     A7 12 02 FB | 	rdlong	arg01, fp
1a590     10 4E 85 F1 | 	sub	fp, #16
1a594     A7 12 62 FC | 	wrlong	arg01, fp
1a598     A7 12 02 F6 | 	mov	arg01, fp
1a59c     DC 15 BF FD | 	call	#_push
1a5a0     A7 F0 03 F6 | 	mov	ptra, fp
1a5a4     B2 00 A0 FD | 	call	#popregs_
1a5a8                 | _do_lpeek_ret
1a5a8     2D 00 64 FD | 	ret
1a5ac                 | 
1a5ac                 | ' 
1a5ac                 | ' sub do_fre
1a5ac                 | _do_fre
1a5ac     01 4A 05 F6 | 	mov	COUNT_, #1
1a5b0     A8 00 A0 FD | 	call	#pushregs_
1a5b4     0C F0 07 F1 | 	add	ptra, #12
1a5b8     51 00 00 FF 
1a5bc     A8 E5 05 F1 | 	add	objptr, ##41896
1a5c0     F2 12 02 FB | 	rdlong	arg01, objptr
1a5c4     0E 00 00 FF 
1a5c8     4C E5 85 F1 | 	sub	objptr, ##7500
1a5cc     F2 1E 02 FB | 	rdlong	local01, objptr
1a5d0     0F 13 82 F1 | 	sub	arg01, local01
1a5d4     0E 00 00 FF 
1a5d8     B8 E5 05 F1 | 	add	objptr, ##7608
1a5dc     F2 12 62 FC | 	wrlong	arg01, objptr
1a5e0     08 4E 05 F1 | 	add	fp, #8
1a5e4     A7 3A 68 FC | 	wrlong	#29, fp
1a5e8     08 4E 85 F1 | 	sub	fp, #8
1a5ec     F2 1E 02 FB | 	rdlong	local01, objptr
1a5f0     52 00 00 FF 
1a5f4     14 E4 85 F1 | 	sub	objptr, ##42004
1a5f8     A7 1E 62 FC | 	wrlong	local01, fp
1a5fc     A7 12 02 F6 | 	mov	arg01, fp
1a600     78 15 BF FD | 	call	#_push
1a604     A7 F0 03 F6 | 	mov	ptra, fp
1a608     B2 00 A0 FD | 	call	#popregs_
1a60c                 | _do_fre_ret
1a60c     2D 00 64 FD | 	ret
1a610                 | 
1a610                 | ' 
1a610                 | ' sub do_adr
1a610                 | _do_adr
1a610                 | _do_adr_ret
1a610     2D 00 64 FD | 	ret
1a614                 | 
1a614                 | ' 
1a614                 | ' sub do_getnotevalue
1a614                 | _do_getnotevalue
1a614     01 4A 05 F6 | 	mov	COUNT_, #1
1a618     A8 00 A0 FD | 	call	#pushregs_
1a61c     1C F0 07 F1 | 	add	ptra, #28
1a620     C0 14 BF FD | 	call	#_pop
1a624     FF 14 02 F6 | 	mov	arg02, result3
1a628     10 4E 05 F1 | 	add	fp, #16
1a62c     A7 FA 61 FC | 	wrlong	result1, fp
1a630     04 4E 05 F1 | 	add	fp, #4
1a634     A7 FC 61 FC | 	wrlong	result2, fp
1a638     04 4E 05 F1 | 	add	fp, #4
1a63c     A7 14 62 FC | 	wrlong	arg02, fp
1a640     08 4E 85 F1 | 	sub	fp, #8
1a644     A7 12 02 F6 | 	mov	arg01, fp
1a648     10 4E 85 F1 | 	sub	fp, #16
1a64c     58 B5 BF FD | 	call	#_converttoint
1a650     FD 14 52 F6 | 	abs	arg02, result1 wc
1a654     0C 14 16 FD | 	qdiv	arg02, #12
1a658     0C 4E 05 F1 | 	add	fp, #12
1a65c     A7 FA 61 FC | 	wrlong	result1, fp
1a660     14 00 00 FF 
1a664     D8 E4 05 F1 | 	add	objptr, ##10456
1a668     08 4E 85 F1 | 	sub	fp, #8
1a66c     19 14 62 FD | 	getqy	arg02
1a670     0A 15 82 F6 | 	negc	arg02, arg02
1a674     02 14 66 F0 | 	shl	arg02, #2
1a678     F2 14 02 F1 | 	add	arg02, objptr
1a67c     0A 15 02 FB | 	rdlong	arg02, arg02
1a680     A7 14 62 FC | 	wrlong	arg02, fp
1a684     08 4E 05 F1 | 	add	fp, #8
1a688     A7 14 02 FB | 	rdlong	arg02, fp
1a68c     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a690     0C 14 16 FD | 	qdiv	arg02, #12
1a694     0C 4E 85 F1 | 	sub	fp, #12
1a698     14 00 00 FF 
1a69c     D8 E4 85 F1 | 	sub	objptr, ##10456
1a6a0     18 14 62 FD | 	getqx	arg02
1a6a4     0A 13 82 F6 | 	negc	arg01, arg02
1a6a8     09 13 52 F6 | 	abs	arg01, arg01 wc
1a6ac     1F 1E C6 C9 |  if_b	decod	local01, #31
1a6b0     00 1E 06 36 |  if_ae	mov	local01, #0
1a6b4     94 8B B0 FD | 	call	#__system___float_fromuns
1a6b8     0F FB 61 F5 | 	xor	result1, local01
1a6bc     08 4E 05 F1 | 	add	fp, #8
1a6c0     A7 FA 61 FC | 	wrlong	result1, fp
1a6c4     FD 14 02 F6 | 	mov	arg02, result1
1a6c8     08 4E 85 F1 | 	sub	fp, #8
1a6cc     1E 12 C6 F9 | 	decod	arg01, #30
1a6d0     60 9E B0 FD | 	call	#__system____builtin_powf
1a6d4     FD 12 02 F6 | 	mov	arg01, result1
1a6d8     04 4E 05 F1 | 	add	fp, #4
1a6dc     A7 14 02 FB | 	rdlong	arg02, fp
1a6e0     04 4E 85 F1 | 	sub	fp, #4
1a6e4     68 8F B0 FD | 	call	#__system___float_mul
1a6e8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ec     10 4E 05 F1 | 	add	fp, #16
1a6f0     A7 FA 61 FC | 	wrlong	result1, fp
1a6f4     08 4E 05 F1 | 	add	fp, #8
1a6f8     A7 3C 68 FC | 	wrlong	#30, fp
1a6fc     08 4E 85 F1 | 	sub	fp, #8
1a700     A7 12 02 F6 | 	mov	arg01, fp
1a704     10 4E 85 F1 | 	sub	fp, #16
1a708     70 14 BF FD | 	call	#_push
1a70c     A7 F0 03 F6 | 	mov	ptra, fp
1a710     B2 00 A0 FD | 	call	#popregs_
1a714                 | _do_getnotevalue_ret
1a714     2D 00 64 FD | 	ret
1a718                 | 
1a718                 | ' 
1a718                 | ' 
1a718                 | ' sub do_waitms
1a718                 | _do_waitms
1a718     01 4A 05 F6 | 	mov	COUNT_, #1
1a71c     A8 00 A0 FD | 	call	#pushregs_
1a720     18 F0 07 F1 | 	add	ptra, #24
1a724     BC 13 BF FD | 	call	#_pop
1a728     A7 FA 61 FC | 	wrlong	result1, fp
1a72c     04 4E 05 F1 | 	add	fp, #4
1a730     A7 FC 61 FC | 	wrlong	result2, fp
1a734     04 4E 05 F1 | 	add	fp, #4
1a738     A7 FE 61 FC | 	wrlong	result3, fp
1a73c                 | ' 
1a73c                 | ' t1=pop() 'value
1a73c                 | ' 
1a73c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a73c     08 4E 85 F1 | 	sub	fp, #8
1a740     1C FE 0D F2 | 	cmp	result3, #28 wz
1a744     08 4E 05 51 |  if_ne	add	fp, #8
1a748     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a74c     08 4E 85 51 |  if_ne	sub	fp, #8
1a750     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a754     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a758     0C 4E 05 A1 |  if_e	add	fp, #12
1a75c     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a760     0C 4E 85 A1 |  if_e	sub	fp, #12
1a764     14 00 90 AD |  if_e	jmp	#LR__2180
1a768     A7 12 02 F6 | 	mov	arg01, fp
1a76c     38 B4 BF FD | 	call	#_converttoint
1a770     0C 4E 05 F1 | 	add	fp, #12
1a774     A7 FA 61 FC | 	wrlong	result1, fp
1a778     0C 4E 85 F1 | 	sub	fp, #12
1a77c                 | LR__2180
1a77c                 | ' if t<0 then return
1a77c     0C 4E 05 F1 | 	add	fp, #12
1a780     A7 12 02 FB | 	rdlong	arg01, fp
1a784     0C 4E 85 F1 | 	sub	fp, #12
1a788     00 12 56 F2 | 	cmps	arg01, #0 wc
1a78c     B8 00 90 CD |  if_b	jmp	#LR__2185
1a790                 | ' if t < 5000 then 
1a790     0C 4E 05 F1 | 	add	fp, #12
1a794     A7 12 02 FB | 	rdlong	arg01, fp
1a798     0C 4E 85 F1 | 	sub	fp, #12
1a79c     09 00 00 FF 
1a7a0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a7a4     14 00 90 3D |  if_ae	jmp	#LR__2181
1a7a8     0C 4E 05 F1 | 	add	fp, #12
1a7ac     A7 12 02 FB | 	rdlong	arg01, fp
1a7b0     0C 4E 85 F1 | 	sub	fp, #12
1a7b4     D8 65 B0 FD | 	call	#__system___waitms
1a7b8     8C 00 90 FD | 	jmp	#LR__2184
1a7bc                 | LR__2181
1a7bc     10 4E 05 F1 | 	add	fp, #16
1a7c0     A7 02 68 FC | 	wrlong	#1, fp
1a7c4     04 4E 85 F1 | 	sub	fp, #4
1a7c8     A7 12 02 FB | 	rdlong	arg01, fp
1a7cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1a7d0     09 00 00 FF 
1a7d4     88 13 16 FD | 	qdiv	arg01, ##5000
1a7d8                 | '   for i=1 to t/5000
1a7d8     0C 4E 85 F1 | 	sub	fp, #12
1a7dc     18 1E 62 FD | 	getqx	local01
1a7e0     0F 1F 82 F6 | 	negc	local01, local01
1a7e4     01 1E 06 F1 | 	add	local01, #1
1a7e8                 | LR__2182
1a7e8     10 4E 05 F1 | 	add	fp, #16
1a7ec     A7 12 02 FB | 	rdlong	arg01, fp
1a7f0     10 4E 85 F1 | 	sub	fp, #16
1a7f4     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a7f8     28 00 90 3D |  if_ae	jmp	#LR__2183
1a7fc     0C 4E 05 F1 | 	add	fp, #12
1a800     A7 12 02 FB | 	rdlong	arg01, fp
1a804     0C 4E 85 F1 | 	sub	fp, #12
1a808     84 65 B0 FD | 	call	#__system___waitms
1a80c     10 4E 05 F1 | 	add	fp, #16
1a810     A7 12 02 FB | 	rdlong	arg01, fp
1a814     01 12 06 F1 | 	add	arg01, #1
1a818     A7 12 62 FC | 	wrlong	arg01, fp
1a81c     10 4E 85 F1 | 	sub	fp, #16
1a820     C4 FF 9F FD | 	jmp	#LR__2182
1a824                 | LR__2183
1a824     0C 4E 05 F1 | 	add	fp, #12
1a828     A7 1E 02 FB | 	rdlong	local01, fp
1a82c     0F 1F 52 F6 | 	abs	local01, local01 wc
1a830     09 00 00 FF 
1a834     88 1F 16 FD | 	qdiv	local01, ##5000
1a838     0C 4E 85 F1 | 	sub	fp, #12
1a83c     19 1E 62 FD | 	getqy	local01
1a840     0F 13 82 F6 | 	negc	arg01, local01
1a844     48 65 B0 FD | 	call	#__system___waitms
1a848                 | LR__2184
1a848                 | LR__2185
1a848     A7 F0 03 F6 | 	mov	ptra, fp
1a84c     B2 00 A0 FD | 	call	#popregs_
1a850                 | _do_waitms_ret
1a850     2D 00 64 FD | 	ret
1a854                 | 
1a854                 | ' 
1a854                 | ' sub do_waitvbl
1a854                 | _do_waitvbl
1a854     01 12 06 F6 | 	mov	arg01, #1
1a858     F4 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a85c                 | _do_waitvbl_ret
1a85c     2D 00 64 FD | 	ret
1a860                 | 
1a860                 | ' 
1a860                 | ' sub do_waitclock
1a860                 | _do_waitclock
1a860     51 00 00 FF 
1a864     A4 E5 05 F1 | 	add	objptr, ##41892
1a868     F2 00 02 FB | 	rdlong	_var01, objptr
1a86c                 | ' c=hkcnt
1a86c                 | ' do: loop until hkcnt<>c
1a86c                 | LR__2190
1a86c     F2 02 02 FB | 	rdlong	_var02, objptr
1a870     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a874     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a878     51 00 00 FF 
1a87c     A4 E5 85 F1 | 	sub	objptr, ##41892
1a880                 | _do_waitclock_ret
1a880     2D 00 64 FD | 	ret
1a884                 | 
1a884                 | ' 
1a884                 | ' 
1a884                 | ' 
1a884                 | ' sub do_dir
1a884                 | _do_dir
1a884     13 4A 05 F6 | 	mov	COUNT_, #19
1a888     A8 00 A0 FD | 	call	#pushregs_
1a88c     01 00 00 FF 
1a890     38 F0 07 F1 | 	add	ptra, ##568
1a894     85 01 00 FF 
1a898     79 13 06 F6 | 	mov	arg01, ##@LR__5509
1a89c     88 68 B0 FD | 	call	#__system___chdir
1a8a0                 | ' 
1a8a0                 | ' chdir("/sd/bas")       ' set working directory
1a8a0                 | ' print "Working directory: "; currentdir$ 
1a8a0     00 12 06 F6 | 	mov	arg01, #0
1a8a4     34 BC B0 FD | 	call	#__system___getiolock_0540
1a8a8     FD 12 02 F6 | 	mov	arg01, result1
1a8ac     EC 61 B0 FD | 	call	#__system___lockmem
1a8b0     85 01 00 FF 
1a8b4     81 15 06 F6 | 	mov	arg02, ##@LR__5510
1a8b8     00 12 06 F6 | 	mov	arg01, #0
1a8bc     00 16 06 F6 | 	mov	arg03, #0
1a8c0     CC 6E B0 FD | 	call	#__system___basic_print_string
1a8c4     4A 00 00 FF 
1a8c8     90 E4 05 F1 | 	add	objptr, ##38032
1a8cc     F2 14 02 FB | 	rdlong	arg02, objptr
1a8d0     4A 00 00 FF 
1a8d4     90 E4 85 F1 | 	sub	objptr, ##38032
1a8d8     00 12 06 F6 | 	mov	arg01, #0
1a8dc     00 16 06 F6 | 	mov	arg03, #0
1a8e0     AC 6E B0 FD | 	call	#__system___basic_print_string
1a8e4     00 12 06 F6 | 	mov	arg01, #0
1a8e8     0A 14 06 F6 | 	mov	arg02, #10
1a8ec     00 16 06 F6 | 	mov	arg03, #0
1a8f0     44 6E B0 FD | 	call	#__system___basic_print_char
1a8f4     01 1E 06 F6 | 	mov	local01, #1
1a8f8     00 12 06 F6 | 	mov	arg01, #0
1a8fc     DC BB B0 FD | 	call	#__system___getiolock_0540
1a900     FD 00 68 FC | 	wrlong	#0, result1
1a904     00 20 06 F6 | 	mov	local02, #0
1a908     00 22 06 F6 | 	mov	local03, #0
1a90c                 | ' px=0
1a90c                 | ' for i=0 to 127: filelist(i)="" : next i
1a90c     00 24 06 F6 | 	mov	local04, #0
1a910     1C 4E 05 F1 | 	add	fp, #28
1a914     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a918                 | LR__2200
1a918     12 27 02 F6 | 	mov	local05, local04
1a91c     02 26 66 F0 | 	shl	local05, #2
1a920     A7 26 02 F1 | 	add	local05, fp
1a924     85 01 00 FF 
1a928     95 29 06 F6 | 	mov	local06, ##@LR__5511
1a92c     13 29 62 FC | 	wrlong	local06, local05
1a930     01 24 06 F1 | 	add	local04, #1
1a934     80 24 56 F2 | 	cmps	local04, #128 wc
1a938     DC FF 9F CD |  if_b	jmp	#LR__2200
1a93c                 | LR__2201
1a93c     1C 4E 85 F1 | 	sub	fp, #28
1a940     85 01 00 FF 
1a944     96 13 06 F6 | 	mov	arg01, ##@LR__5512
1a948     10 14 06 F6 | 	mov	arg02, #16
1a94c     C4 BC B0 FD | 	call	#__system___basic_dir
1a950     FD 2A 02 F6 | 	mov	local07, result1
1a954     00 2C 06 F6 | 	mov	local08, #0
1a958                 | ' filename=dir$("*", fbDirectory)
1a958                 | ' n=0
1a958                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a958                 | LR__2202
1a958     85 01 00 FF 
1a95c     98 2F 06 F6 | 	mov	local09, ##@LR__5513
1a960     15 13 02 F6 | 	mov	arg01, local07
1a964     17 15 02 F6 | 	mov	arg02, local09
1a968     58 61 B0 FD | 	call	#__system___string_cmp
1a96c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a970     68 00 90 AD |  if_e	jmp	#LR__2203
1a974     00 2E 06 F6 | 	mov	local09, #0
1a978     15 13 02 F6 | 	mov	arg01, local07
1a97c     00 14 06 F6 | 	mov	arg02, #0
1a980     40 61 B0 FD | 	call	#__system___string_cmp
1a984     00 FA 0D F2 | 	cmp	result1, #0 wz
1a988     50 00 90 AD |  if_e	jmp	#LR__2203
1a98c     80 2C 56 F2 | 	cmps	local08, #128 wc
1a990     48 00 90 3D |  if_ae	jmp	#LR__2203
1a994     85 01 00 FF 
1a998     99 13 06 F6 | 	mov	arg01, ##@LR__5514
1a99c     15 15 02 F6 | 	mov	arg02, local07
1a9a0     54 61 B0 FD | 	call	#__system___string_concat
1a9a4     FD 2A 02 F6 | 	mov	local07, result1
1a9a8     16 27 02 F6 | 	mov	local05, local08
1a9ac     02 26 66 F0 | 	shl	local05, #2
1a9b0     1C 4E 05 F1 | 	add	fp, #28
1a9b4     A7 26 02 F1 | 	add	local05, fp
1a9b8     13 2B 62 FC | 	wrlong	local07, local05
1a9bc     01 2C 06 F1 | 	add	local08, #1
1a9c0     00 26 06 F6 | 	mov	local05, #0
1a9c4     00 12 06 F6 | 	mov	arg01, #0
1a9c8     00 14 06 F6 | 	mov	arg02, #0
1a9cc     1C 4E 85 F1 | 	sub	fp, #28
1a9d0     40 BC B0 FD | 	call	#__system___basic_dir
1a9d4     FD 2A 02 F6 | 	mov	local07, result1
1a9d8     7C FF 9F FD | 	jmp	#LR__2202
1a9dc                 | LR__2203
1a9dc                 | ' ' now sort this
1a9dc                 | ' 
1a9dc                 | ' for i =0 to n-1
1a9dc     00 24 06 F6 | 	mov	local04, #0
1a9e0     16 31 02 F6 | 	mov	local10, local08
1a9e4                 | LR__2204
1a9e4     18 25 52 F2 | 	cmps	local04, local10 wc
1a9e8     DC 00 90 3D |  if_ae	jmp	#LR__2208
1a9ec     00 32 06 F6 | 	mov	local11, #0
1a9f0                 | '   swapped=false
1a9f0                 | '   for j=0 to n-i-2
1a9f0     00 34 06 F6 | 	mov	local12, #0
1a9f4     16 37 02 F6 | 	mov	local13, local08
1a9f8     12 37 82 F1 | 	sub	local13, local04
1a9fc     01 36 86 F1 | 	sub	local13, #1
1aa00                 | LR__2205
1aa00     1B 35 52 F2 | 	cmps	local12, local13 wc
1aa04     B0 00 90 3D |  if_ae	jmp	#LR__2207
1aa08                 | '     if filelist(j) > filelist(j+1) then
1aa08     1A 2F 02 F6 | 	mov	local09, local12
1aa0c     02 2E 66 F0 | 	shl	local09, #2
1aa10     1C 4E 05 F1 | 	add	fp, #28
1aa14     A7 2E 02 F1 | 	add	local09, fp
1aa18     17 13 02 FB | 	rdlong	arg01, local09
1aa1c     1A 2F 02 F6 | 	mov	local09, local12
1aa20     01 2E 06 F1 | 	add	local09, #1
1aa24     17 29 02 F6 | 	mov	local06, local09
1aa28     02 28 66 F0 | 	shl	local06, #2
1aa2c     A7 1E 02 F6 | 	mov	local01, fp
1aa30     A7 28 02 F1 | 	add	local06, fp
1aa34     14 27 02 FB | 	rdlong	local05, local06
1aa38     13 15 02 F6 | 	mov	arg02, local05
1aa3c     1C 4E 85 F1 | 	sub	fp, #28
1aa40     80 60 B0 FD | 	call	#__system___string_cmp
1aa44     01 FA 55 F2 | 	cmps	result1, #1 wc
1aa48     64 00 90 CD |  if_b	jmp	#LR__2206
1aa4c     1A 2F 02 F6 | 	mov	local09, local12
1aa50     01 2E 06 F1 | 	add	local09, #1
1aa54     02 2E 66 F0 | 	shl	local09, #2
1aa58     1C 4E 05 F1 | 	add	fp, #28
1aa5c     A7 2E 02 F1 | 	add	local09, fp
1aa60     17 33 02 FB | 	rdlong	local11, local09
1aa64     1A 29 02 F6 | 	mov	local06, local12
1aa68     02 28 66 F0 | 	shl	local06, #2
1aa6c     A7 28 02 F1 | 	add	local06, fp
1aa70     14 27 02 FB | 	rdlong	local05, local06
1aa74     1A 2F 02 F6 | 	mov	local09, local12
1aa78     17 29 02 F6 | 	mov	local06, local09
1aa7c     02 28 66 F0 | 	shl	local06, #2
1aa80     A7 1E 02 F6 | 	mov	local01, fp
1aa84     A7 28 02 F1 | 	add	local06, fp
1aa88     14 33 62 FC | 	wrlong	local11, local06
1aa8c     1A 21 02 F6 | 	mov	local02, local12
1aa90     01 20 06 F1 | 	add	local02, #1
1aa94     10 39 02 F6 | 	mov	local14, local02
1aa98     02 38 66 F0 | 	shl	local14, #2
1aa9c     A7 3A 02 F6 | 	mov	local15, fp
1aaa0     A7 38 02 F1 | 	add	local14, fp
1aaa4     1C 27 62 FC | 	wrlong	local05, local14
1aaa8     01 32 66 F6 | 	neg	local11, #1
1aaac     1C 4E 85 F1 | 	sub	fp, #28
1aab0                 | LR__2206
1aab0     01 34 06 F1 | 	add	local12, #1
1aab4     48 FF 9F FD | 	jmp	#LR__2205
1aab8                 | LR__2207
1aab8                 | ' if not swapped then exit for
1aab8     19 3D 22 F6 | 	not	local16, local11
1aabc     00 3C 0E F2 | 	cmp	local16, #0 wz
1aac0     01 24 06 A1 |  if_e	add	local04, #1
1aac4     1C FF 9F AD |  if_e	jmp	#LR__2204
1aac8                 | LR__2208
1aac8                 | ' for i=0 to n-1
1aac8     00 24 06 F6 | 	mov	local04, #0
1aacc     16 3F 02 F6 | 	mov	local17, local08
1aad0                 | LR__2209
1aad0     1F 25 52 F2 | 	cmps	local04, local17 wc
1aad4     94 00 90 3D |  if_ae	jmp	#LR__2211
1aad8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1aad8     00 12 06 F6 | 	mov	arg01, #0
1aadc     FC B9 B0 FD | 	call	#__system___getiolock_0540
1aae0     FD 12 02 F6 | 	mov	arg01, result1
1aae4     B4 5F B0 FD | 	call	#__system___lockmem
1aae8     12 21 02 F6 | 	mov	local02, local04
1aaec     02 20 66 F0 | 	shl	local02, #2
1aaf0     1C 4E 05 F1 | 	add	fp, #28
1aaf4     A7 38 02 F6 | 	mov	local14, fp
1aaf8     A7 20 02 F1 | 	add	local02, fp
1aafc     10 15 02 FB | 	rdlong	arg02, local02
1ab00     00 1E 06 F6 | 	mov	local01, #0
1ab04     00 12 06 F6 | 	mov	arg01, #0
1ab08     00 16 06 F6 | 	mov	arg03, #0
1ab0c     1C 4E 85 F1 | 	sub	fp, #28
1ab10     7C 6C B0 FD | 	call	#__system___basic_print_string
1ab14     00 12 06 F6 | 	mov	arg01, #0
1ab18     C0 B9 B0 FD | 	call	#__system___getiolock_0540
1ab1c     FD 00 68 FC | 	wrlong	#0, result1
1ab20     40 22 06 F1 | 	add	local03, #64
1ab24     11 13 02 F6 | 	mov	arg01, local03
1ab28     C0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ab2c     00 23 56 F2 | 	cmps	local03, #256 wc
1ab30     30 00 90 CD |  if_b	jmp	#LR__2210
1ab34     00 22 06 F6 | 	mov	local03, #0
1ab38     00 12 06 F6 | 	mov	arg01, #0
1ab3c     9C B9 B0 FD | 	call	#__system___getiolock_0540
1ab40     FD 12 02 F6 | 	mov	arg01, result1
1ab44     54 5F B0 FD | 	call	#__system___lockmem
1ab48     00 12 06 F6 | 	mov	arg01, #0
1ab4c     0A 14 06 F6 | 	mov	arg02, #10
1ab50     00 16 06 F6 | 	mov	arg03, #0
1ab54     E0 6B B0 FD | 	call	#__system___basic_print_char
1ab58     00 12 06 F6 | 	mov	arg01, #0
1ab5c     7C B9 B0 FD | 	call	#__system___getiolock_0540
1ab60     FD 00 68 FC | 	wrlong	#0, result1
1ab64                 | LR__2210
1ab64     01 24 06 F1 | 	add	local04, #1
1ab68     64 FF 9F FD | 	jmp	#LR__2209
1ab6c                 | LR__2211
1ab6c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ab6c     80 2C 56 F2 | 	cmps	local08, #128 wc
1ab70     44 00 90 CD |  if_b	jmp	#LR__2212
1ab74     00 12 06 F6 | 	mov	arg01, #0
1ab78     60 B9 B0 FD | 	call	#__system___getiolock_0540
1ab7c     FD 12 02 F6 | 	mov	arg01, result1
1ab80     18 5F B0 FD | 	call	#__system___lockmem
1ab84     85 01 00 FF 
1ab88     A0 15 06 F6 | 	mov	arg02, ##@LR__5515
1ab8c     00 12 06 F6 | 	mov	arg01, #0
1ab90     00 16 06 F6 | 	mov	arg03, #0
1ab94     F8 6B B0 FD | 	call	#__system___basic_print_string
1ab98     00 12 06 F6 | 	mov	arg01, #0
1ab9c     0A 14 06 F6 | 	mov	arg02, #10
1aba0     00 16 06 F6 | 	mov	arg03, #0
1aba4     90 6B B0 FD | 	call	#__system___basic_print_char
1aba8     00 12 06 F6 | 	mov	arg01, #0
1abac     2C B9 B0 FD | 	call	#__system___getiolock_0540
1abb0     FD 00 68 FC | 	wrlong	#0, result1
1abb4     00 1E 06 F6 | 	mov	local01, #0
1abb8                 | LR__2212
1abb8                 | ' print
1abb8     00 12 06 F6 | 	mov	arg01, #0
1abbc     1C B9 B0 FD | 	call	#__system___getiolock_0540
1abc0     FD 12 02 F6 | 	mov	arg01, result1
1abc4     D4 5E B0 FD | 	call	#__system___lockmem
1abc8     00 12 06 F6 | 	mov	arg01, #0
1abcc     0A 14 06 F6 | 	mov	arg02, #10
1abd0     00 16 06 F6 | 	mov	arg03, #0
1abd4     60 6B B0 FD | 	call	#__system___basic_print_char
1abd8     00 12 06 F6 | 	mov	arg01, #0
1abdc     FC B8 B0 FD | 	call	#__system___getiolock_0540
1abe0     FD 00 68 FC | 	wrlong	#0, result1
1abe4     00 28 06 F6 | 	mov	local06, #0
1abe8     00 2C 06 F6 | 	mov	local08, #0
1abec     00 22 06 F6 | 	mov	local03, #0
1abf0                 | ' return cursor_y
1abf0     3E E4 05 F1 | 	add	objptr, #62
1abf4     F2 40 C2 FA | 	rdbyte	local18, objptr
1abf8     3E E4 85 F1 | 	sub	objptr, #62
1abfc     85 01 00 FF 
1ac00     D2 13 06 F6 | 	mov	arg01, ##@LR__5516
1ac04     21 14 06 F6 | 	mov	arg02, #33
1ac08     08 BA B0 FD | 	call	#__system___basic_dir
1ac0c     FD 2A 02 F6 | 	mov	local07, result1
1ac10                 | ' n=0
1ac10                 | ' 
1ac10                 | ' px=0: py=v.getcursory()
1ac10                 | ' 
1ac10                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1ac10                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1ac10                 | LR__2213
1ac10     85 01 00 FF 
1ac14     D4 2F 06 F6 | 	mov	local09, ##@LR__5517
1ac18     15 13 02 F6 | 	mov	arg01, local07
1ac1c     17 15 02 F6 | 	mov	arg02, local09
1ac20     A0 5E B0 FD | 	call	#__system___string_cmp
1ac24     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac28     54 00 90 AD |  if_e	jmp	#LR__2214
1ac2c     00 2E 06 F6 | 	mov	local09, #0
1ac30     15 13 02 F6 | 	mov	arg01, local07
1ac34     00 14 06 F6 | 	mov	arg02, #0
1ac38     88 5E B0 FD | 	call	#__system___string_cmp
1ac3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac40     3C 00 90 AD |  if_e	jmp	#LR__2214
1ac44     80 2C 56 F2 | 	cmps	local08, #128 wc
1ac48     34 00 90 3D |  if_ae	jmp	#LR__2214
1ac4c     16 27 02 F6 | 	mov	local05, local08
1ac50     02 26 66 F0 | 	shl	local05, #2
1ac54     1C 4E 05 F1 | 	add	fp, #28
1ac58     A7 26 02 F1 | 	add	local05, fp
1ac5c     13 2B 62 FC | 	wrlong	local07, local05
1ac60     01 2C 06 F1 | 	add	local08, #1
1ac64     00 26 06 F6 | 	mov	local05, #0
1ac68     00 12 06 F6 | 	mov	arg01, #0
1ac6c     00 14 06 F6 | 	mov	arg02, #0
1ac70     1C 4E 85 F1 | 	sub	fp, #28
1ac74     9C B9 B0 FD | 	call	#__system___basic_dir
1ac78     FD 2A 02 F6 | 	mov	local07, result1
1ac7c     90 FF 9F FD | 	jmp	#LR__2213
1ac80                 | LR__2214
1ac80                 | ' 
1ac80                 | ' for i =0 to n-1
1ac80     00 24 06 F6 | 	mov	local04, #0
1ac84                 | LR__2215
1ac84     16 25 52 F2 | 	cmps	local04, local08 wc
1ac88     D8 00 90 3D |  if_ae	jmp	#LR__2219
1ac8c     00 32 06 F6 | 	mov	local11, #0
1ac90                 | '   swapped=false
1ac90                 | '   for j=0 to n-i-2
1ac90     00 34 06 F6 | 	mov	local12, #0
1ac94     16 43 02 F6 | 	mov	local19, local08
1ac98     12 43 82 F1 | 	sub	local19, local04
1ac9c     01 42 86 F1 | 	sub	local19, #1
1aca0                 | LR__2216
1aca0     21 35 52 F2 | 	cmps	local12, local19 wc
1aca4     AC 00 90 3D |  if_ae	jmp	#LR__2218
1aca8                 | '     if filelist(j) > filelist(j+1) then
1aca8     1A 2F 02 F6 | 	mov	local09, local12
1acac     02 2E 66 F0 | 	shl	local09, #2
1acb0     1C 4E 05 F1 | 	add	fp, #28
1acb4     A7 2E 02 F1 | 	add	local09, fp
1acb8     17 13 02 FB | 	rdlong	arg01, local09
1acbc     1A 2F 02 F6 | 	mov	local09, local12
1acc0     01 2E 06 F1 | 	add	local09, #1
1acc4     17 29 02 F6 | 	mov	local06, local09
1acc8     02 28 66 F0 | 	shl	local06, #2
1accc     A7 1E 02 F6 | 	mov	local01, fp
1acd0     A7 28 02 F1 | 	add	local06, fp
1acd4     14 27 02 FB | 	rdlong	local05, local06
1acd8     13 15 02 F6 | 	mov	arg02, local05
1acdc     1C 4E 85 F1 | 	sub	fp, #28
1ace0     E0 5D B0 FD | 	call	#__system___string_cmp
1ace4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ace8     60 00 90 CD |  if_b	jmp	#LR__2217
1acec     1A 2F 02 F6 | 	mov	local09, local12
1acf0     01 2E 06 F1 | 	add	local09, #1
1acf4     02 2E 66 F0 | 	shl	local09, #2
1acf8     1C 4E 05 F1 | 	add	fp, #28
1acfc     A7 2E 02 F1 | 	add	local09, fp
1ad00     17 3D 02 FB | 	rdlong	local16, local09
1ad04     1A 29 02 F6 | 	mov	local06, local12
1ad08     02 28 66 F0 | 	shl	local06, #2
1ad0c     A7 28 02 F1 | 	add	local06, fp
1ad10     14 27 02 FB | 	rdlong	local05, local06
1ad14     1A 2F 02 F6 | 	mov	local09, local12
1ad18     17 29 02 F6 | 	mov	local06, local09
1ad1c     02 28 66 F0 | 	shl	local06, #2
1ad20     A7 1E 02 F6 | 	mov	local01, fp
1ad24     A7 28 02 F1 | 	add	local06, fp
1ad28     14 3D 62 FC | 	wrlong	local16, local06
1ad2c     1A 39 02 F6 | 	mov	local14, local12
1ad30     01 38 06 F1 | 	add	local14, #1
1ad34     02 38 66 F0 | 	shl	local14, #2
1ad38     A7 3A 02 F6 | 	mov	local15, fp
1ad3c     A7 38 02 F1 | 	add	local14, fp
1ad40     1C 27 62 FC | 	wrlong	local05, local14
1ad44     01 32 66 F6 | 	neg	local11, #1
1ad48     1C 4E 85 F1 | 	sub	fp, #28
1ad4c                 | LR__2217
1ad4c     01 34 06 F1 | 	add	local12, #1
1ad50     4C FF 9F FD | 	jmp	#LR__2216
1ad54                 | LR__2218
1ad54                 | ' if not swapped then exit for
1ad54     19 3D 22 F6 | 	not	local16, local11
1ad58     00 3C 0E F2 | 	cmp	local16, #0 wz
1ad5c     01 24 06 A1 |  if_e	add	local04, #1
1ad60     20 FF 9F AD |  if_e	jmp	#LR__2215
1ad64                 | LR__2219
1ad64                 | ' for i=0 to n-1
1ad64     00 24 06 F6 | 	mov	local04, #0
1ad68                 | LR__2220
1ad68     16 25 52 F2 | 	cmps	local04, local08 wc
1ad6c     8C 00 90 3D |  if_ae	jmp	#LR__2222
1ad70                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ad70     00 12 06 F6 | 	mov	arg01, #0
1ad74     64 B7 B0 FD | 	call	#__system___getiolock_0540
1ad78     FD 12 02 F6 | 	mov	arg01, result1
1ad7c     1C 5D B0 FD | 	call	#__system___lockmem
1ad80     12 21 02 F6 | 	mov	local02, local04
1ad84     02 20 66 F0 | 	shl	local02, #2
1ad88     1C 4E 05 F1 | 	add	fp, #28
1ad8c     A7 20 02 F1 | 	add	local02, fp
1ad90     10 15 02 FB | 	rdlong	arg02, local02
1ad94     00 12 06 F6 | 	mov	arg01, #0
1ad98     00 16 06 F6 | 	mov	arg03, #0
1ad9c     1C 4E 85 F1 | 	sub	fp, #28
1ada0     EC 69 B0 FD | 	call	#__system___basic_print_string
1ada4     00 12 06 F6 | 	mov	arg01, #0
1ada8     30 B7 B0 FD | 	call	#__system___getiolock_0540
1adac     FD 00 68 FC | 	wrlong	#0, result1
1adb0     40 22 06 F1 | 	add	local03, #64
1adb4     11 13 02 F6 | 	mov	arg01, local03
1adb8     30 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1adbc     00 23 56 F2 | 	cmps	local03, #256 wc
1adc0     30 00 90 CD |  if_b	jmp	#LR__2221
1adc4     00 22 06 F6 | 	mov	local03, #0
1adc8     00 12 06 F6 | 	mov	arg01, #0
1adcc     0C B7 B0 FD | 	call	#__system___getiolock_0540
1add0     FD 12 02 F6 | 	mov	arg01, result1
1add4     C4 5C B0 FD | 	call	#__system___lockmem
1add8     00 12 06 F6 | 	mov	arg01, #0
1addc     0A 14 06 F6 | 	mov	arg02, #10
1ade0     00 16 06 F6 | 	mov	arg03, #0
1ade4     50 69 B0 FD | 	call	#__system___basic_print_char
1ade8     00 12 06 F6 | 	mov	arg01, #0
1adec     EC B6 B0 FD | 	call	#__system___getiolock_0540
1adf0     FD 00 68 FC | 	wrlong	#0, result1
1adf4                 | LR__2221
1adf4     01 24 06 F1 | 	add	local04, #1
1adf8     6C FF 9F FD | 	jmp	#LR__2220
1adfc                 | LR__2222
1adfc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1adfc     80 2C 56 F2 | 	cmps	local08, #128 wc
1ae00     40 00 90 CD |  if_b	jmp	#LR__2223
1ae04     00 12 06 F6 | 	mov	arg01, #0
1ae08     D0 B6 B0 FD | 	call	#__system___getiolock_0540
1ae0c     FD 12 02 F6 | 	mov	arg01, result1
1ae10     88 5C B0 FD | 	call	#__system___lockmem
1ae14     85 01 00 FF 
1ae18     D5 15 06 F6 | 	mov	arg02, ##@LR__5518
1ae1c     00 12 06 F6 | 	mov	arg01, #0
1ae20     00 16 06 F6 | 	mov	arg03, #0
1ae24     68 69 B0 FD | 	call	#__system___basic_print_string
1ae28     00 12 06 F6 | 	mov	arg01, #0
1ae2c     0A 14 06 F6 | 	mov	arg02, #10
1ae30     00 16 06 F6 | 	mov	arg03, #0
1ae34     00 69 B0 FD | 	call	#__system___basic_print_char
1ae38     00 12 06 F6 | 	mov	arg01, #0
1ae3c     9C B6 B0 FD | 	call	#__system___getiolock_0540
1ae40     FD 00 68 FC | 	wrlong	#0, result1
1ae44                 | LR__2223
1ae44                 | ' print
1ae44     00 12 06 F6 | 	mov	arg01, #0
1ae48     90 B6 B0 FD | 	call	#__system___getiolock_0540
1ae4c     FD 12 02 F6 | 	mov	arg01, result1
1ae50     48 5C B0 FD | 	call	#__system___lockmem
1ae54     00 12 06 F6 | 	mov	arg01, #0
1ae58     0A 14 06 F6 | 	mov	arg02, #10
1ae5c     00 16 06 F6 | 	mov	arg03, #0
1ae60     D4 68 B0 FD | 	call	#__system___basic_print_char
1ae64     00 12 06 F6 | 	mov	arg01, #0
1ae68     70 B6 B0 FD | 	call	#__system___getiolock_0540
1ae6c     FD 00 68 FC | 	wrlong	#0, result1
1ae70     A7 F0 03 F6 | 	mov	ptra, fp
1ae74     B2 00 A0 FD | 	call	#popregs_
1ae78                 | _do_dir_ret
1ae78     2D 00 64 FD | 	ret
1ae7c                 | 
1ae7c                 | ' 
1ae7c                 | ' sub do_if
1ae7c                 | _do_if
1ae7c     05 4A 05 F6 | 	mov	COUNT_, #5
1ae80     A8 00 A0 FD | 	call	#pushregs_
1ae84     5C 0C BF FD | 	call	#_pop
1ae88     FD 1E 0A F6 | 	mov	local01, result1 wz
1ae8c     FE 20 02 F6 | 	mov	local02, result2
1ae90     FF 22 02 F6 | 	mov	local03, result3
1ae94                 | ' t1=pop()
1ae94                 | ' ' if uresult=0, jump over else
1ae94                 | ' if t1.result.uresult = 0 then 
1ae94     BC 00 90 5D |  if_ne	jmp	#LR__2232
1ae98                 | '   for i=lineptr_e to lineptr-1
1ae98     4A 00 00 FF 
1ae9c     80 E4 05 F1 | 	add	objptr, ##38016
1aea0     F2 24 02 FB | 	rdlong	local04, objptr
1aea4     04 E4 85 F1 | 	sub	objptr, #4
1aea8     F2 26 02 FB | 	rdlong	local05, objptr
1aeac     4A 00 00 FF 
1aeb0     7C E4 85 F1 | 	sub	objptr, ##38012
1aeb4                 | LR__2230
1aeb4     13 25 52 F2 | 	cmps	local04, local05 wc
1aeb8     78 00 90 3D |  if_ae	jmp	#LR__2231
1aebc     12 FF 01 F6 | 	mov	result3, local04
1aec0     01 FE 65 F0 | 	shl	result3, #1
1aec4     12 FF 01 F1 | 	add	result3, local04
1aec8     02 FE 65 F0 | 	shl	result3, #2
1aecc     47 00 00 FF 
1aed0     7C E4 05 F1 | 	add	objptr, ##36476
1aed4     F2 FE 01 F1 | 	add	result3, objptr
1aed8     FF 1E 02 FB | 	rdlong	local01, result3
1aedc     04 FE 05 F1 | 	add	result3, #4
1aee0     FF FC 01 FB | 	rdlong	result2, result3
1aee4     12 FF 01 F6 | 	mov	result3, local04
1aee8     01 FE 65 F0 | 	shl	result3, #1
1aeec     12 FF 01 F1 | 	add	result3, local04
1aef0     02 FE 65 F0 | 	shl	result3, #2
1aef4     F2 FE 01 F1 | 	add	result3, objptr
1aef8     08 FE 05 F1 | 	add	result3, #8
1aefc     FF FE 01 FB | 	rdlong	result3, result3
1af00     FE 20 02 F6 | 	mov	local02, result2
1af04     FF 22 02 F6 | 	mov	local03, result3
1af08                 | '     t1=compiledline(i)
1af08                 | '     if t1.result_type=token_else then lineptr_e=i : return
1af08     5A 22 0E F2 | 	cmp	local03, #90 wz
1af0c     47 00 00 FF 
1af10     7C E4 85 F1 | 	sub	objptr, ##36476
1af14     4A 00 00 AF 
1af18     80 E4 05 A1 |  if_e	add	objptr, ##38016
1af1c     F2 24 62 AC |  if_e	wrlong	local04, objptr
1af20     4A 00 00 AF 
1af24     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1af28     28 00 90 AD |  if_e	jmp	#LR__2233
1af2c     01 24 06 F1 | 	add	local04, #1
1af30     80 FF 9F FD | 	jmp	#LR__2230
1af34                 | LR__2231
1af34     4A 00 00 FF 
1af38     7C E4 05 F1 | 	add	objptr, ##38012
1af3c     F2 26 02 FB | 	rdlong	local05, objptr
1af40     01 26 86 F1 | 	sub	local05, #1
1af44     04 E4 05 F1 | 	add	objptr, #4
1af48     F2 26 62 FC | 	wrlong	local05, objptr
1af4c     4A 00 00 FF 
1af50     80 E4 85 F1 | 	sub	objptr, ##38016
1af54                 | LR__2232
1af54                 | LR__2233
1af54     A7 F0 03 F6 | 	mov	ptra, fp
1af58     B2 00 A0 FD | 	call	#popregs_
1af5c                 | _do_if_ret
1af5c     2D 00 64 FD | 	ret
1af60                 | 
1af60                 | ' 
1af60                 | ' sub do_else
1af60                 | _do_else
1af60     4A 00 00 FF 
1af64     7C E4 05 F1 | 	add	objptr, ##38012
1af68     F2 00 02 FB | 	rdlong	_var01, objptr
1af6c     01 00 86 F1 | 	sub	_var01, #1
1af70     04 E4 05 F1 | 	add	objptr, #4
1af74     F2 00 62 FC | 	wrlong	_var01, objptr
1af78     4A 00 00 FF 
1af7c     80 E4 85 F1 | 	sub	objptr, ##38016
1af80                 | _do_else_ret
1af80     2D 00 64 FD | 	ret
1af84                 | 
1af84                 | ' 
1af84                 | ' sub do_rad
1af84                 | _do_rad
1af84     51 00 00 FF 
1af88     B8 E5 05 F1 | 	add	objptr, ##41912
1af8c     00 C0 9F FF 
1af90     F2 00 68 FC | 	wrlong	##1065353216, objptr
1af94     04 E4 05 F1 | 	add	objptr, #4
1af98     00 C0 9F FF 
1af9c     F2 00 68 FC | 	wrlong	##1065353216, objptr
1afa0     51 00 00 FF 
1afa4     BC E5 85 F1 | 	sub	objptr, ##41916
1afa8                 | _do_rad_ret
1afa8     2D 00 64 FD | 	ret
1afac                 | 
1afac                 | ' 
1afac                 | ' sub do_deg
1afac                 | _do_deg
1afac     51 00 00 FF 
1afb0     B8 E5 05 F1 | 	add	objptr, ##41912
1afb4     7D 47 9E FF 
1afb8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1afbc     04 E4 05 F1 | 	add	objptr, #4
1afc0     97 32 A1 FF 
1afc4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1afc8     51 00 00 FF 
1afcc     BC E5 85 F1 | 	sub	objptr, ##41916
1afd0                 | _do_deg_ret
1afd0     2D 00 64 FD | 	ret
1afd4                 | 
1afd4                 | ' 
1afd4                 | ' sub do_round
1afd4                 | _do_round
1afd4     00 4A 05 F6 | 	mov	COUNT_, #0
1afd8     A8 00 A0 FD | 	call	#pushregs_
1afdc     0C F0 07 F1 | 	add	ptra, #12
1afe0     00 0B BF FD | 	call	#_pop
1afe4     A7 FA 61 FC | 	wrlong	result1, fp
1afe8     04 4E 05 F1 | 	add	fp, #4
1afec     A7 FC 61 FC | 	wrlong	result2, fp
1aff0     04 4E 05 F1 | 	add	fp, #4
1aff4     A7 FE 61 FC | 	wrlong	result3, fp
1aff8     08 4E 85 F1 | 	sub	fp, #8
1affc     A7 12 02 F6 | 	mov	arg01, fp
1b000     A4 AB BF FD | 	call	#_converttoint
1b004     A7 FA 61 FC | 	wrlong	result1, fp
1b008     08 4E 05 F1 | 	add	fp, #8
1b00c     A7 38 68 FC | 	wrlong	#28, fp
1b010     08 4E 85 F1 | 	sub	fp, #8
1b014     A7 12 02 F6 | 	mov	arg01, fp
1b018     60 0B BF FD | 	call	#_push
1b01c     A7 F0 03 F6 | 	mov	ptra, fp
1b020     B2 00 A0 FD | 	call	#popregs_
1b024                 | _do_round_ret
1b024     2D 00 64 FD | 	ret
1b028                 | 
1b028                 | ' 
1b028                 | ' sub do_int
1b028                 | _do_int
1b028     02 4A 05 F6 | 	mov	COUNT_, #2
1b02c     A8 00 A0 FD | 	call	#pushregs_
1b030     10 F0 07 F1 | 	add	ptra, #16
1b034     AC 0A BF FD | 	call	#_pop
1b038     FE 1E 02 F6 | 	mov	local01, result2
1b03c     FF 20 02 F6 | 	mov	local02, result3
1b040     A7 FA 61 FC | 	wrlong	result1, fp
1b044     04 4E 05 F1 | 	add	fp, #4
1b048     A7 1E 62 FC | 	wrlong	local01, fp
1b04c     04 4E 05 F1 | 	add	fp, #4
1b050     A7 20 62 FC | 	wrlong	local02, fp
1b054                 | ' 
1b054                 | ' t1=pop()
1b054                 | ' select case t1.result_type
1b054     08 4E 85 F1 | 	sub	fp, #8
1b058     1E 20 0E F2 | 	cmp	local02, #30 wz
1b05c     14 00 90 AD |  if_e	jmp	#LR__2240
1b060     1F 20 0E F2 | 	cmp	local02, #31 wz
1b064     20 00 90 AD |  if_e	jmp	#LR__2241
1b068     2B 20 0E F2 | 	cmp	local02, #43 wz
1b06c     34 00 90 AD |  if_e	jmp	#LR__2242
1b070     50 00 90 FD | 	jmp	#LR__2243
1b074                 | LR__2240
1b074     A7 12 02 FB | 	rdlong	arg01, fp
1b078     00 14 06 F6 | 	mov	arg02, #0
1b07c     98 8A B0 FD | 	call	#__system___float_tointeger
1b080     A7 FA 61 FC | 	wrlong	result1, fp
1b084     3C 00 90 FD | 	jmp	#LR__2243
1b088                 | LR__2241
1b088     A7 12 02 FB | 	rdlong	arg01, fp
1b08c     A8 8D B0 FD | 	call	#__system____builtin_atof
1b090     FD 12 02 F6 | 	mov	arg01, result1
1b094     00 14 06 F6 | 	mov	arg02, #0
1b098     7C 8A B0 FD | 	call	#__system___float_tointeger
1b09c     A7 FA 61 FC | 	wrlong	result1, fp
1b0a0     20 00 90 FD | 	jmp	#LR__2243
1b0a4                 | LR__2242
1b0a4     A7 12 02 FB | 	rdlong	arg01, fp
1b0a8     D8 62 BF FD | 	call	#_convertstring
1b0ac     FD 12 02 F6 | 	mov	arg01, result1
1b0b0     84 8D B0 FD | 	call	#__system____builtin_atof
1b0b4     FD 12 02 F6 | 	mov	arg01, result1
1b0b8     00 14 06 F6 | 	mov	arg02, #0
1b0bc     58 8A B0 FD | 	call	#__system___float_tointeger
1b0c0     A7 FA 61 FC | 	wrlong	result1, fp
1b0c4                 | LR__2243
1b0c4     08 4E 05 F1 | 	add	fp, #8
1b0c8     A7 38 68 FC | 	wrlong	#28, fp
1b0cc     08 4E 85 F1 | 	sub	fp, #8
1b0d0     A7 12 02 F6 | 	mov	arg01, fp
1b0d4     A4 0A BF FD | 	call	#_push
1b0d8     A7 F0 03 F6 | 	mov	ptra, fp
1b0dc     B2 00 A0 FD | 	call	#popregs_
1b0e0                 | _do_int_ret
1b0e0     2D 00 64 FD | 	ret
1b0e4                 | 
1b0e4                 | ' 
1b0e4                 | ' 
1b0e4                 | ' sub do_nothing
1b0e4                 | _do_nothing
1b0e4                 | _do_nothing_ret
1b0e4     2D 00 64 FD | 	ret
1b0e8                 | 
1b0e8                 | ' 
1b0e8                 | ' sub do_brun
1b0e8                 | _do_brun
1b0e8     08 4A 05 F6 | 	mov	COUNT_, #8
1b0ec     A8 00 A0 FD | 	call	#pushregs_
1b0f0     F0 09 BF FD | 	call	#_pop
1b0f4     FE 1A 02 F6 | 	mov	arg05, result2
1b0f8     FF 18 02 F6 | 	mov	arg04, result3
1b0fc     FD 1E 02 F6 | 	mov	local01, result1
1b100     0D 21 02 F6 | 	mov	local02, arg05
1b104     0C 23 02 F6 | 	mov	local03, arg04
1b108                 | ' 
1b108                 | ' t1=pop() 
1b108                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b108     2B 22 0E F2 | 	cmp	local03, #43 wz
1b10c     10 00 90 5D |  if_ne	jmp	#LR__2250
1b110     0F 13 02 F6 | 	mov	arg01, local01
1b114     6C 62 BF FD | 	call	#_convertstring
1b118     FD 1E 02 F6 | 	mov	local01, result1
1b11c     1F 22 06 F6 | 	mov	local03, #31
1b120                 | LR__2250
1b120                 | ' if t1.result_type=result_string then
1b120     1F 22 0E F2 | 	cmp	local03, #31 wz
1b124     EC 01 90 5D |  if_ne	jmp	#LR__2254
1b128     0F 25 02 F6 | 	mov	local04, local01
1b12c                 | '   filename=t1.result.sresult
1b12c                 | '   if left$(filename,1)="/" then 
1b12c     12 13 02 F6 | 	mov	arg01, local04
1b130     01 14 06 F6 | 	mov	arg02, #1
1b134     E0 79 B0 FD | 	call	#__system__Left_S
1b138     FD 12 02 F6 | 	mov	arg01, result1
1b13c     86 01 00 FF 
1b140     07 14 06 F6 | 	mov	arg02, ##@LR__5519
1b144     7C 59 B0 FD | 	call	#__system___string_cmp
1b148     00 FA 0D F2 | 	cmp	result1, #0 wz
1b14c     12 27 02 A6 |  if_e	mov	local05, local04
1b150     14 00 90 AD |  if_e	jmp	#LR__2251
1b154     86 01 00 FF 
1b158     09 12 06 F6 | 	mov	arg01, ##@LR__5520
1b15c     12 15 02 F6 | 	mov	arg02, local04
1b160     94 59 B0 FD | 	call	#__system___string_concat
1b164     FD 26 02 F6 | 	mov	local05, result1
1b168                 | LR__2251
1b168                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b168                 | '   open fullfilename for input as #9
1b168     09 12 06 F6 | 	mov	arg01, #9
1b16c     13 15 02 F6 | 	mov	arg02, local05
1b170     00 16 06 F6 | 	mov	arg03, #0
1b174     28 65 B0 FD | 	call	#__system___basic_open_string
1b178     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b17c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b180     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b184     FD 28 0A F6 | 	mov	local06, result1 wz
1b188                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b188     8C 00 90 AD |  if_e	jmp	#LR__2252
1b18c     00 12 06 F6 | 	mov	arg01, #0
1b190     48 B3 B0 FD | 	call	#__system___getiolock_0540
1b194     FD 12 02 F6 | 	mov	arg01, result1
1b198     00 59 B0 FD | 	call	#__system___lockmem
1b19c     86 01 00 FF 
1b1a0     12 14 06 F6 | 	mov	arg02, ##@LR__5521
1b1a4     00 12 06 F6 | 	mov	arg01, #0
1b1a8     00 16 06 F6 | 	mov	arg03, #0
1b1ac     E0 65 B0 FD | 	call	#__system___basic_print_string
1b1b0     00 12 06 F6 | 	mov	arg01, #0
1b1b4     14 15 02 F6 | 	mov	arg02, local06
1b1b8     00 16 06 F6 | 	mov	arg03, #0
1b1bc     0A 18 06 F6 | 	mov	arg04, #10
1b1c0     10 66 B0 FD | 	call	#__system___basic_print_integer
1b1c4     86 01 00 FF 
1b1c8     20 14 06 F6 | 	mov	arg02, ##@LR__5522
1b1cc     00 12 06 F6 | 	mov	arg01, #0
1b1d0     00 16 06 F6 | 	mov	arg03, #0
1b1d4     B8 65 B0 FD | 	call	#__system___basic_print_string
1b1d8     14 13 02 F6 | 	mov	arg01, local06
1b1dc     84 7F B0 FD | 	call	#__system___strerror
1b1e0     FD 14 02 F6 | 	mov	arg02, result1
1b1e4     00 12 06 F6 | 	mov	arg01, #0
1b1e8     00 16 06 F6 | 	mov	arg03, #0
1b1ec     A0 65 B0 FD | 	call	#__system___basic_print_string
1b1f0     00 12 06 F6 | 	mov	arg01, #0
1b1f4     0A 14 06 F6 | 	mov	arg02, #10
1b1f8     00 16 06 F6 | 	mov	arg03, #0
1b1fc     38 65 B0 FD | 	call	#__system___basic_print_char
1b200     00 12 06 F6 | 	mov	arg01, #0
1b204     D4 B2 B0 FD | 	call	#__system___getiolock_0540
1b208     FD 00 68 FC | 	wrlong	#0, result1
1b20c     09 12 06 F6 | 	mov	arg01, #9
1b210     F8 A8 B0 FD | 	call	#__system__close
1b214     FC 00 90 FD | 	jmp	#LR__2255
1b218                 | LR__2252
1b218     01 2A 06 F6 | 	mov	local07, #1
1b21c     00 2C 06 F6 | 	mov	local08, #0
1b220                 | '   do
1b220                 | LR__2253
1b220                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b220     4E 00 00 FF 
1b224     B0 E4 05 F1 | 	add	objptr, ##40112
1b228     F2 16 02 F6 | 	mov	arg03, objptr
1b22c     4E 00 00 FF 
1b230     B0 E4 85 F1 | 	sub	objptr, ##40112
1b234     09 12 06 F6 | 	mov	arg01, #9
1b238     15 15 02 F6 | 	mov	arg02, local07
1b23c     0A 18 C6 F9 | 	decod	arg04, #10
1b240     01 1A 06 F6 | 	mov	arg05, #1
1b244     C4 66 B0 FD | 	call	#__system___basic_get
1b248     FD 28 02 F6 | 	mov	local06, result1
1b24c     FD 2A 02 F1 | 	add	local07, result1
1b250     4E 00 00 FF 
1b254     B0 E4 05 F1 | 	add	objptr, ##40112
1b258     F2 12 02 F6 | 	mov	arg01, objptr
1b25c     16 15 02 F6 | 	mov	arg02, local08
1b260     0A 16 C6 F9 | 	decod	arg03, #10
1b264     42 00 00 FF 
1b268     E4 E5 85 F1 | 	sub	objptr, ##34276
1b26c     88 4C B0 FD | 	call	#_psram_spin2_write
1b270     0B 00 00 FF 
1b274     CC E4 85 F1 | 	sub	objptr, ##5836
1b278     14 2D 02 F1 | 	add	local08, local06
1b27c     02 00 00 FF 
1b280     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b284     E0 03 00 AF 
1b288     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b28c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b290     36 00 00 FF 
1b294     FC E5 05 F1 | 	add	objptr, ##28156
1b298     F2 12 02 FB | 	rdlong	arg01, objptr
1b29c     03 12 62 FD | 	cogstop	arg01
1b2a0     04 E4 05 F1 | 	add	objptr, #4
1b2a4     F2 12 02 FB | 	rdlong	arg01, objptr
1b2a8     03 12 62 FD | 	cogstop	arg01
1b2ac     04 E4 05 F1 | 	add	objptr, #4
1b2b0     F2 12 02 FB | 	rdlong	arg01, objptr
1b2b4     03 12 62 FD | 	cogstop	arg01
1b2b8     19 00 00 FF 
1b2bc     10 E5 05 F1 | 	add	objptr, ##13072
1b2c0     F2 12 02 FB | 	rdlong	arg01, objptr
1b2c4     03 12 62 FD | 	cogstop	arg01
1b2c8     18 00 00 FF 
1b2cc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b2d0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b2d4     18 00 00 FF 
1b2d8     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b2dc     19 00 00 FF 
1b2e0     08 E5 85 F1 | 	sub	objptr, ##13064
1b2e4     1E 2C 06 F6 | 	mov	local08, #30
1b2e8     28 E4 61 FD | 	setq	objptr
1b2ec     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b2f0     01 2C 66 C6 |  if_b	neg	local08, #1
1b2f4     1B 00 00 FF 
1b2f8     10 E4 05 F1 | 	add	objptr, ##13840
1b2fc     F2 2C 62 FC | 	wrlong	local08, objptr
1b300     52 00 00 FF 
1b304     1C E4 85 F1 | 	sub	objptr, ##42012
1b308     00 12 06 F6 | 	mov	arg01, #0
1b30c     01 12 62 FD | 	cogid	arg01
1b310     03 12 62 FD | 	cogstop	arg01
1b314                 | LR__2254
1b314                 | LR__2255
1b314     A7 F0 03 F6 | 	mov	ptra, fp
1b318     B2 00 A0 FD | 	call	#popregs_
1b31c                 | _do_brun_ret
1b31c     2D 00 64 FD | 	ret
1b320                 | 
1b320                 | ' 
1b320                 | ' 
1b320                 | ' sub do_mouse
1b320                 | _do_mouse
1b320     C0 07 BF FD | 	call	#_pop
1b324     00 FA 4D F2 | 	cmps	result1, #0 wz
1b328                 | ' t1=pop()
1b328                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b328     14 00 90 5D |  if_ne	jmp	#LR__2260
1b32c     10 12 06 F6 | 	mov	arg01, #16
1b330     00 14 06 F6 | 	mov	arg02, #0
1b334     00 16 06 F6 | 	mov	arg03, #0
1b338     64 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b33c     10 00 90 FD | 	jmp	#LR__2261
1b340                 | LR__2260
1b340     10 12 06 F6 | 	mov	arg01, #16
1b344     20 14 06 F6 | 	mov	arg02, #32
1b348     20 16 06 F6 | 	mov	arg03, #32
1b34c     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b350                 | LR__2261
1b350                 | _do_mouse_ret
1b350     2D 00 64 FD | 	ret
1b354                 | 
1b354                 | ' 
1b354                 | ' sub do_cursor
1b354                 | _do_cursor
1b354     8C 07 BF FD | 	call	#_pop
1b358     00 FA 4D F2 | 	cmps	result1, #0 wz
1b35c                 | ' t1=pop()
1b35c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b35c     14 00 90 5D |  if_ne	jmp	#LR__2270
1b360     11 12 06 F6 | 	mov	arg01, #17
1b364     00 14 06 F6 | 	mov	arg02, #0
1b368     00 16 06 F6 | 	mov	arg03, #0
1b36c     30 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b370     10 00 90 FD | 	jmp	#LR__2271
1b374                 | LR__2270
1b374     11 12 06 F6 | 	mov	arg01, #17
1b378     08 14 06 F6 | 	mov	arg02, #8
1b37c     10 16 06 F6 | 	mov	arg03, #16
1b380     1C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b384                 | LR__2271
1b384                 | _do_cursor_ret
1b384     2D 00 64 FD | 	ret
1b388                 | 
1b388                 | ' 
1b388                 | ' 
1b388                 | ' sub do_click
1b388                 | _do_click
1b388     58 07 BF FD | 	call	#_pop
1b38c     00 FA 4D F2 | 	cmps	result1, #0 wz
1b390                 | ' t1=pop()
1b390                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b390     50 00 00 AF 
1b394     10 E5 05 A1 |  if_e	add	objptr, ##41232
1b398     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b39c     50 00 00 FF 
1b3a0     10 E5 C5 F3 | 	sumz	objptr, ##41232
1b3a4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b3a8     50 00 00 5F 
1b3ac     10 E5 85 51 |  if_ne	sub	objptr, ##41232
1b3b0                 | _do_click_ret
1b3b0     2D 00 64 FD | 	ret
1b3b4                 | 
1b3b4                 | ' 
1b3b4                 | ' 
1b3b4                 | ' sub do_beep
1b3b4                 | _do_beep
1b3b4     02 4A 05 F6 | 	mov	COUNT_, #2
1b3b8     A8 00 A0 FD | 	call	#pushregs_
1b3bc     20 F0 07 F1 | 	add	ptra, #32
1b3c0     20 07 BF FD | 	call	#_pop
1b3c4     FD 1E 02 F6 | 	mov	local01, result1
1b3c8     FE 1C 02 F6 | 	mov	arg06, result2
1b3cc     FF 20 02 F6 | 	mov	local02, result3
1b3d0     0C 4E 05 F1 | 	add	fp, #12
1b3d4     A7 1E 62 FC | 	wrlong	local01, fp
1b3d8     04 4E 05 F1 | 	add	fp, #4
1b3dc     A7 1C 62 FC | 	wrlong	arg06, fp
1b3e0     04 4E 05 F1 | 	add	fp, #4
1b3e4     A7 20 62 FC | 	wrlong	local02, fp
1b3e8     14 4E 85 F1 | 	sub	fp, #20
1b3ec     F4 06 BF FD | 	call	#_pop
1b3f0     A7 FA 61 FC | 	wrlong	result1, fp
1b3f4     04 4E 05 F1 | 	add	fp, #4
1b3f8     A7 FC 61 FC | 	wrlong	result2, fp
1b3fc     04 4E 05 F1 | 	add	fp, #4
1b400     A7 FE 61 FC | 	wrlong	result3, fp
1b404                 | ' 
1b404                 | ' t2=pop()
1b404                 | ' t1=pop()
1b404                 | ' 
1b404                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b404     08 4E 85 F1 | 	sub	fp, #8
1b408     1C FE 0D F2 | 	cmp	result3, #28 wz
1b40c     08 4E 05 51 |  if_ne	add	fp, #8
1b410     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b414     08 4E 85 51 |  if_ne	sub	fp, #8
1b418     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b41c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b420     18 4E 05 A1 |  if_e	add	fp, #24
1b424     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b428     18 4E 85 A1 |  if_e	sub	fp, #24
1b42c     14 00 90 AD |  if_e	jmp	#LR__2280
1b430     A7 12 02 F6 | 	mov	arg01, fp
1b434     70 A7 BF FD | 	call	#_converttoint
1b438     18 4E 05 F1 | 	add	fp, #24
1b43c     A7 FA 61 FC | 	wrlong	result1, fp
1b440     18 4E 85 F1 | 	sub	fp, #24
1b444                 | LR__2280
1b444     1C 4E 05 F1 | 	add	fp, #28
1b448     A7 FE 48 FC | 	wrbyte	#127, fp
1b44c     01 4E 05 F1 | 	add	fp, #1
1b450     A7 00 49 FC | 	wrbyte	#128, fp
1b454     01 4E 85 F1 | 	sub	fp, #1
1b458     A7 14 02 F6 | 	mov	arg02, fp
1b45c     04 4E 85 F1 | 	sub	fp, #4
1b460     A7 16 02 FB | 	rdlong	arg03, fp
1b464     18 4E 85 F1 | 	sub	fp, #24
1b468     01 16 66 F0 | 	shl	arg03, #1
1b46c     07 12 06 F6 | 	mov	arg01, #7
1b470     0E 18 C6 F9 | 	decod	arg04, #14
1b474     02 1A 06 F6 | 	mov	arg05, #2
1b478     00 1C 06 F6 | 	mov	arg06, #0
1b47c     0B 00 00 FF 
1b480     CC E4 05 F1 | 	add	objptr, ##5836
1b484     70 52 B0 FD | 	call	#_audio096_spin2_play8
1b488     0B 00 00 FF 
1b48c     CC E4 85 F1 | 	sub	objptr, ##5836
1b490     0C 4E 05 F1 | 	add	fp, #12
1b494     A7 12 02 F6 | 	mov	arg01, fp
1b498     0C 4E 85 F1 | 	sub	fp, #12
1b49c     DC 06 BF FD | 	call	#_push
1b4a0     74 F2 BF FD | 	call	#_do_waitms
1b4a4     07 12 06 F6 | 	mov	arg01, #7
1b4a8     0B 00 00 FF 
1b4ac     CC E4 05 F1 | 	add	objptr, ##5836
1b4b0     E8 52 B0 FD | 	call	#_audio096_spin2_stop
1b4b4     0B 00 00 FF 
1b4b8     CC E4 85 F1 | 	sub	objptr, ##5836
1b4bc     A7 F0 03 F6 | 	mov	ptra, fp
1b4c0     B2 00 A0 FD | 	call	#popregs_
1b4c4                 | _do_beep_ret
1b4c4     2D 00 64 FD | 	ret
1b4c8                 | 
1b4c8                 | ' 
1b4c8                 | ' sub do_no_command
1b4c8                 | _do_no_command
1b4c8     17 12 06 F6 | 	mov	arg01, #23
1b4cc     34 20 B0 FD | 	call	#_printerror
1b4d0                 | _do_no_command_ret
1b4d0     2D 00 64 FD | 	ret
1b4d4                 | 
1b4d4                 | ' 
1b4d4                 | ' sub do_negative
1b4d4                 | _do_negative
1b4d4     02 4A 05 F6 | 	mov	COUNT_, #2
1b4d8     A8 00 A0 FD | 	call	#pushregs_
1b4dc     0C F0 07 F1 | 	add	ptra, #12
1b4e0     00 06 BF FD | 	call	#_pop
1b4e4     FF 1E 02 F6 | 	mov	local01, result3
1b4e8     A7 FA 61 FC | 	wrlong	result1, fp
1b4ec     04 4E 05 F1 | 	add	fp, #4
1b4f0     A7 FC 61 FC | 	wrlong	result2, fp
1b4f4     04 4E 05 F1 | 	add	fp, #4
1b4f8     A7 1E 62 FC | 	wrlong	local01, fp
1b4fc                 | ' t1=pop()
1b4fc                 | ' if t1.result_type=result_int then 
1b4fc     08 4E 85 F1 | 	sub	fp, #8
1b500     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b504     A7 20 02 AB |  if_e	rdlong	local02, fp
1b508     10 1F 62 A6 |  if_e	neg	local01, local02
1b50c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b510     5C 00 90 AD |  if_e	jmp	#LR__2292
1b514     08 4E 05 F1 | 	add	fp, #8
1b518     A7 1E 02 FB | 	rdlong	local01, fp
1b51c     08 4E 85 F1 | 	sub	fp, #8
1b520     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b524     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b528     A7 20 02 FB | 	rdlong	local02, fp
1b52c     10 1F 62 F6 | 	neg	local01, local02
1b530     A7 1E 62 FC | 	wrlong	local01, fp
1b534     08 4E 05 F1 | 	add	fp, #8
1b538     A7 38 68 FC | 	wrlong	#28, fp
1b53c     08 4E 85 F1 | 	sub	fp, #8
1b540     2C 00 90 FD | 	jmp	#LR__2291
1b544                 | LR__2290
1b544     08 4E 05 F1 | 	add	fp, #8
1b548     A7 1E 02 FB | 	rdlong	local01, fp
1b54c     08 4E 85 F1 | 	sub	fp, #8
1b550     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b554     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b558     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b55c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b560     08 4E 05 51 |  if_ne	add	fp, #8
1b564     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b568     08 4E 85 51 |  if_ne	sub	fp, #8
1b56c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b570                 | LR__2291
1b570                 | LR__2292
1b570     A7 12 02 F6 | 	mov	arg01, fp
1b574     04 06 BF FD | 	call	#_push
1b578     A7 F0 03 F6 | 	mov	ptra, fp
1b57c     B2 00 A0 FD | 	call	#popregs_
1b580                 | _do_negative_ret
1b580     2D 00 64 FD | 	ret
1b584                 | 
1b584                 | ' 
1b584                 | ' sub do_abs
1b584                 | _do_abs
1b584     01 4A 05 F6 | 	mov	COUNT_, #1
1b588     A8 00 A0 FD | 	call	#pushregs_
1b58c     0C F0 07 F1 | 	add	ptra, #12
1b590     50 05 BF FD | 	call	#_pop
1b594     FF 1E 02 F6 | 	mov	local01, result3
1b598     A7 FA 61 FC | 	wrlong	result1, fp
1b59c     04 4E 05 F1 | 	add	fp, #4
1b5a0     A7 FC 61 FC | 	wrlong	result2, fp
1b5a4     04 4E 05 F1 | 	add	fp, #4
1b5a8     A7 1E 62 FC | 	wrlong	local01, fp
1b5ac                 | ' t1=pop()
1b5ac                 | ' if t1.result_type=result_int then 
1b5ac     08 4E 85 F1 | 	sub	fp, #8
1b5b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b5b4     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b5b8     09 1F 42 A6 |  if_e	abs	local01, arg01
1b5bc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b5c0     2C 00 90 AD |  if_e	jmp	#LR__2300
1b5c4     08 4E 05 F1 | 	add	fp, #8
1b5c8     A7 1E 02 FB | 	rdlong	local01, fp
1b5cc     08 4E 85 F1 | 	sub	fp, #8
1b5d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b5d4     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b5d8     1F FA 05 A4 |  if_e	bitl	result1, #31
1b5dc     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b5e0     08 4E 05 51 |  if_ne	add	fp, #8
1b5e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b5e8     08 4E 85 51 |  if_ne	sub	fp, #8
1b5ec     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b5f0                 | LR__2300
1b5f0     A7 12 02 F6 | 	mov	arg01, fp
1b5f4     84 05 BF FD | 	call	#_push
1b5f8     A7 F0 03 F6 | 	mov	ptra, fp
1b5fc     B2 00 A0 FD | 	call	#popregs_
1b600                 | _do_abs_ret
1b600     2D 00 64 FD | 	ret
1b604                 | 
1b604                 | ' 
1b604                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b604                 | ' 
1b604                 | ' ''----------------------------------------------------------------------------------------------------
1b604                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b604                 | ' ''----------------------------------------------------------------------------------------------------
1b604                 | ' 
1b604                 | ' ''--------------------------- Command function pointers
1b604                 | ' 
1b604                 | ' sub init_commands
1b604                 | _init_commands
1b604                 | ' 
1b604                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b604     00 00 06 F6 | 	mov	_var01, #0
1b608     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b60c                 | LR__2310
1b60c     00 FB 01 F6 | 	mov	result1, _var01
1b610     02 FA 65 F0 | 	shl	result1, #2
1b614     43 00 00 FF 
1b618     60 E4 05 F1 | 	add	objptr, ##34400
1b61c     F2 FA 01 F1 | 	add	result1, objptr
1b620     43 00 00 FF 
1b624     60 E4 85 F1 | 	sub	objptr, ##34400
1b628     FD E4 61 FC | 	wrlong	objptr, result1
1b62c     01 00 06 F1 | 	add	_var01, #1
1b630     00 01 56 F2 | 	cmps	_var01, #256 wc
1b634     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b638                 | LR__2311
1b638     F2 FA 01 F6 | 	mov	result1, objptr
1b63c     14 FA 25 F4 | 	bith	result1, #20
1b640     43 00 00 FF 
1b644     64 E4 05 F1 | 	add	objptr, ##34404
1b648     F2 FA 61 FC | 	wrlong	result1, objptr
1b64c     43 00 00 FF 
1b650     64 E4 85 F1 | 	sub	objptr, ##34404
1b654     F2 FA 01 F6 | 	mov	result1, objptr
1b658     15 FA 25 F4 | 	bith	result1, #21
1b65c     43 00 00 FF 
1b660     68 E4 05 F1 | 	add	objptr, ##34408
1b664     F2 FA 61 FC | 	wrlong	result1, objptr
1b668     43 00 00 FF 
1b66c     68 E4 85 F1 | 	sub	objptr, ##34408
1b670     F2 FA 01 F6 | 	mov	result1, objptr
1b674     34 FA 25 F4 | 	bith	result1, #52
1b678     43 00 00 FF 
1b67c     6C E4 05 F1 | 	add	objptr, ##34412
1b680     F2 FA 61 FC | 	wrlong	result1, objptr
1b684     43 00 00 FF 
1b688     6C E4 85 F1 | 	sub	objptr, ##34412
1b68c     F2 FA 01 F6 | 	mov	result1, objptr
1b690     16 FA 25 F4 | 	bith	result1, #22
1b694     43 00 00 FF 
1b698     74 E4 05 F1 | 	add	objptr, ##34420
1b69c     F2 FA 61 FC | 	wrlong	result1, objptr
1b6a0     43 00 00 FF 
1b6a4     74 E4 85 F1 | 	sub	objptr, ##34420
1b6a8     F2 FA 01 F6 | 	mov	result1, objptr
1b6ac     00 28 00 FF 
1b6b0     00 FA 45 F5 | 	or	result1, ##5242880
1b6b4     43 00 00 FF 
1b6b8     78 E4 05 F1 | 	add	objptr, ##34424
1b6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1b6c0     43 00 00 FF 
1b6c4     78 E4 85 F1 | 	sub	objptr, ##34424
1b6c8     F2 FA 01 F6 | 	mov	result1, objptr
1b6cc     35 FA 25 F4 | 	bith	result1, #53
1b6d0     43 00 00 FF 
1b6d4     7C E4 05 F1 | 	add	objptr, ##34428
1b6d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6dc     43 00 00 FF 
1b6e0     7C E4 85 F1 | 	sub	objptr, ##34428
1b6e4     F2 FA 01 F6 | 	mov	result1, objptr
1b6e8     54 FA 25 F4 | 	bith	result1, #84
1b6ec     43 00 00 FF 
1b6f0     80 E4 05 F1 | 	add	objptr, ##34432
1b6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b6f8     43 00 00 FF 
1b6fc     80 E4 85 F1 | 	sub	objptr, ##34432
1b700     F2 FA 01 F6 | 	mov	result1, objptr
1b704     17 FA 25 F4 | 	bith	result1, #23
1b708     43 00 00 FF 
1b70c     84 E4 05 F1 | 	add	objptr, ##34436
1b710     F2 FA 61 FC | 	wrlong	result1, objptr
1b714     43 00 00 FF 
1b718     84 E4 85 F1 | 	sub	objptr, ##34436
1b71c     F2 FA 01 F6 | 	mov	result1, objptr
1b720     00 48 00 FF 
1b724     00 FA 45 F5 | 	or	result1, ##9437184
1b728     43 00 00 FF 
1b72c     88 E4 05 F1 | 	add	objptr, ##34440
1b730     F2 FA 61 FC | 	wrlong	result1, objptr
1b734     43 00 00 FF 
1b738     88 E4 85 F1 | 	sub	objptr, ##34440
1b73c     F2 FA 01 F6 | 	mov	result1, objptr
1b740     00 50 00 FF 
1b744     00 FA 45 F5 | 	or	result1, ##10485760
1b748     43 00 00 FF 
1b74c     8C E4 05 F1 | 	add	objptr, ##34444
1b750     F2 FA 61 FC | 	wrlong	result1, objptr
1b754     43 00 00 FF 
1b758     8C E4 85 F1 | 	sub	objptr, ##34444
1b75c     F2 FA 01 F6 | 	mov	result1, objptr
1b760     00 58 00 FF 
1b764     00 FA 45 F5 | 	or	result1, ##11534336
1b768     43 00 00 FF 
1b76c     90 E4 05 F1 | 	add	objptr, ##34448
1b770     F2 FA 61 FC | 	wrlong	result1, objptr
1b774     43 00 00 FF 
1b778     90 E4 85 F1 | 	sub	objptr, ##34448
1b77c     F2 FA 01 F6 | 	mov	result1, objptr
1b780     36 FA 25 F4 | 	bith	result1, #54
1b784     43 00 00 FF 
1b788     A4 E4 05 F1 | 	add	objptr, ##34468
1b78c     F2 FA 61 FC | 	wrlong	result1, objptr
1b790     43 00 00 FF 
1b794     A4 E4 85 F1 | 	sub	objptr, ##34468
1b798     F2 FA 01 F6 | 	mov	result1, objptr
1b79c     00 68 00 FF 
1b7a0     00 FA 45 F5 | 	or	result1, ##13631488
1b7a4     43 00 00 FF 
1b7a8     D4 E4 05 F1 | 	add	objptr, ##34516
1b7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b7b0     43 00 00 FF 
1b7b4     D4 E4 85 F1 | 	sub	objptr, ##34516
1b7b8     F2 FA 01 F6 | 	mov	result1, objptr
1b7bc     00 68 00 FF 
1b7c0     00 FA 45 F5 | 	or	result1, ##13631488
1b7c4     43 00 00 FF 
1b7c8     D0 E4 05 F1 | 	add	objptr, ##34512
1b7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b7d0     43 00 00 FF 
1b7d4     D0 E4 85 F1 | 	sub	objptr, ##34512
1b7d8     F2 FA 01 F6 | 	mov	result1, objptr
1b7dc     00 68 00 FF 
1b7e0     00 FA 45 F5 | 	or	result1, ##13631488
1b7e4     43 00 00 FF 
1b7e8     D8 E4 05 F1 | 	add	objptr, ##34520
1b7ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b7f0     43 00 00 FF 
1b7f4     D8 E4 85 F1 | 	sub	objptr, ##34520
1b7f8     F2 FA 01 F6 | 	mov	result1, objptr
1b7fc     00 68 00 FF 
1b800     00 FA 45 F5 | 	or	result1, ##13631488
1b804     43 00 00 FF 
1b808     DC E4 05 F1 | 	add	objptr, ##34524
1b80c     F2 FA 61 FC | 	wrlong	result1, objptr
1b810     43 00 00 FF 
1b814     DC E4 85 F1 | 	sub	objptr, ##34524
1b818     F2 FA 01 F6 | 	mov	result1, objptr
1b81c     00 68 00 FF 
1b820     00 FA 45 F5 | 	or	result1, ##13631488
1b824     43 00 00 FF 
1b828     0C E5 05 F1 | 	add	objptr, ##34572
1b82c     F2 FA 61 FC | 	wrlong	result1, objptr
1b830     43 00 00 FF 
1b834     0C E5 85 F1 | 	sub	objptr, ##34572
1b838     F2 FA 01 F6 | 	mov	result1, objptr
1b83c     55 FA 25 F4 | 	bith	result1, #85
1b840     43 00 00 FF 
1b844     BC E4 05 F1 | 	add	objptr, ##34492
1b848     F2 FA 61 FC | 	wrlong	result1, objptr
1b84c     43 00 00 FF 
1b850     BC E4 85 F1 | 	sub	objptr, ##34492
1b854     F2 FA 01 F6 | 	mov	result1, objptr
1b858     00 68 00 FF 
1b85c     00 FA 45 F5 | 	or	result1, ##13631488
1b860     43 00 00 FF 
1b864     10 E5 05 F1 | 	add	objptr, ##34576
1b868     F2 FA 61 FC | 	wrlong	result1, objptr
1b86c     43 00 00 FF 
1b870     10 E5 85 F1 | 	sub	objptr, ##34576
1b874     F2 FA 01 F6 | 	mov	result1, objptr
1b878     00 68 00 FF 
1b87c     00 FA 45 F5 | 	or	result1, ##13631488
1b880     43 00 00 FF 
1b884     E0 E4 05 F1 | 	add	objptr, ##34528
1b888     F2 FA 61 FC | 	wrlong	result1, objptr
1b88c     43 00 00 FF 
1b890     E0 E4 85 F1 | 	sub	objptr, ##34528
1b894     F2 FA 01 F6 | 	mov	result1, objptr
1b898     00 68 00 FF 
1b89c     00 FA 45 F5 | 	or	result1, ##13631488
1b8a0     43 00 00 FF 
1b8a4     E4 E4 05 F1 | 	add	objptr, ##34532
1b8a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8ac     43 00 00 FF 
1b8b0     E4 E4 85 F1 | 	sub	objptr, ##34532
1b8b4     F2 FA 01 F6 | 	mov	result1, objptr
1b8b8     00 68 00 FF 
1b8bc     00 FA 45 F5 | 	or	result1, ##13631488
1b8c0     43 00 00 FF 
1b8c4     E8 E4 05 F1 | 	add	objptr, ##34536
1b8c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8cc     43 00 00 FF 
1b8d0     E8 E4 85 F1 | 	sub	objptr, ##34536
1b8d4     F2 FA 01 F6 | 	mov	result1, objptr
1b8d8     74 FA 25 F4 | 	bith	result1, #116
1b8dc     43 00 00 FF 
1b8e0     60 E5 05 F1 | 	add	objptr, ##34656
1b8e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8e8     43 00 00 FF 
1b8ec     60 E5 85 F1 | 	sub	objptr, ##34656
1b8f0     F2 FA 01 F6 | 	mov	result1, objptr
1b8f4     18 FA 25 F4 | 	bith	result1, #24
1b8f8     43 00 00 FF 
1b8fc     64 E5 05 F1 | 	add	objptr, ##34660
1b900     F2 FA 61 FC | 	wrlong	result1, objptr
1b904     43 00 00 FF 
1b908     64 E5 85 F1 | 	sub	objptr, ##34660
1b90c     F2 FA 01 F6 | 	mov	result1, objptr
1b910     00 88 00 FF 
1b914     00 FA 45 F5 | 	or	result1, ##17825792
1b918     43 00 00 FF 
1b91c     68 E5 05 F1 | 	add	objptr, ##34664
1b920     F2 FA 61 FC | 	wrlong	result1, objptr
1b924     43 00 00 FF 
1b928     68 E5 85 F1 | 	sub	objptr, ##34664
1b92c     F2 FA 01 F6 | 	mov	result1, objptr
1b930     00 90 00 FF 
1b934     00 FA 45 F5 | 	or	result1, ##18874368
1b938     43 00 00 FF 
1b93c     6C E5 05 F1 | 	add	objptr, ##34668
1b940     F2 FA 61 FC | 	wrlong	result1, objptr
1b944     43 00 00 FF 
1b948     6C E5 85 F1 | 	sub	objptr, ##34668
1b94c     F2 FA 01 F6 | 	mov	result1, objptr
1b950     00 98 00 FF 
1b954     00 FA 45 F5 | 	or	result1, ##19922944
1b958     43 00 00 FF 
1b95c     70 E5 05 F1 | 	add	objptr, ##34672
1b960     F2 FA 61 FC | 	wrlong	result1, objptr
1b964     43 00 00 FF 
1b968     70 E5 85 F1 | 	sub	objptr, ##34672
1b96c     F2 FA 01 F6 | 	mov	result1, objptr
1b970     00 A0 00 FF 
1b974     00 FA 45 F5 | 	or	result1, ##20971520
1b978     43 00 00 FF 
1b97c     74 E5 05 F1 | 	add	objptr, ##34676
1b980     F2 FA 61 FC | 	wrlong	result1, objptr
1b984     43 00 00 FF 
1b988     74 E5 85 F1 | 	sub	objptr, ##34676
1b98c     F2 FA 01 F6 | 	mov	result1, objptr
1b990     00 A8 00 FF 
1b994     00 FA 45 F5 | 	or	result1, ##22020096
1b998     43 00 00 FF 
1b99c     78 E5 05 F1 | 	add	objptr, ##34680
1b9a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9a4     43 00 00 FF 
1b9a8     78 E5 85 F1 | 	sub	objptr, ##34680
1b9ac     F2 FA 01 F6 | 	mov	result1, objptr
1b9b0     00 B0 00 FF 
1b9b4     00 FA 45 F5 | 	or	result1, ##23068672
1b9b8     43 00 00 FF 
1b9bc     7C E5 05 F1 | 	add	objptr, ##34684
1b9c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9c4     43 00 00 FF 
1b9c8     7C E5 85 F1 | 	sub	objptr, ##34684
1b9cc     F2 FA 01 F6 | 	mov	result1, objptr
1b9d0     00 B8 00 FF 
1b9d4     00 FA 45 F5 | 	or	result1, ##24117248
1b9d8     43 00 00 FF 
1b9dc     80 E5 05 F1 | 	add	objptr, ##34688
1b9e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9e4     43 00 00 FF 
1b9e8     80 E5 85 F1 | 	sub	objptr, ##34688
1b9ec     F2 FA 01 F6 | 	mov	result1, objptr
1b9f0     37 FA 25 F4 | 	bith	result1, #55
1b9f4     43 00 00 FF 
1b9f8     84 E5 05 F1 | 	add	objptr, ##34692
1b9fc     F2 FA 61 FC | 	wrlong	result1, objptr
1ba00     43 00 00 FF 
1ba04     84 E5 85 F1 | 	sub	objptr, ##34692
1ba08     F2 FA 01 F6 | 	mov	result1, objptr
1ba0c     00 C8 00 FF 
1ba10     00 FA 45 F5 | 	or	result1, ##26214400
1ba14     43 00 00 FF 
1ba18     88 E5 05 F1 | 	add	objptr, ##34696
1ba1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba20     43 00 00 FF 
1ba24     88 E5 85 F1 | 	sub	objptr, ##34696
1ba28     F2 FA 01 F6 | 	mov	result1, objptr
1ba2c     00 D0 00 FF 
1ba30     00 FA 45 F5 | 	or	result1, ##27262976
1ba34     43 00 00 FF 
1ba38     8C E5 05 F1 | 	add	objptr, ##34700
1ba3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba40     43 00 00 FF 
1ba44     8C E5 85 F1 | 	sub	objptr, ##34700
1ba48     F2 FA 01 F6 | 	mov	result1, objptr
1ba4c     00 D8 00 FF 
1ba50     00 FA 45 F5 | 	or	result1, ##28311552
1ba54     43 00 00 FF 
1ba58     90 E5 05 F1 | 	add	objptr, ##34704
1ba5c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba60     43 00 00 FF 
1ba64     90 E5 85 F1 | 	sub	objptr, ##34704
1ba68     F2 FA 01 F6 | 	mov	result1, objptr
1ba6c     56 FA 25 F4 | 	bith	result1, #86
1ba70     43 00 00 FF 
1ba74     94 E5 05 F1 | 	add	objptr, ##34708
1ba78     F2 FA 61 FC | 	wrlong	result1, objptr
1ba7c     43 00 00 FF 
1ba80     94 E5 85 F1 | 	sub	objptr, ##34708
1ba84     F2 FA 01 F6 | 	mov	result1, objptr
1ba88     00 E8 00 FF 
1ba8c     00 FA 45 F5 | 	or	result1, ##30408704
1ba90     45 00 00 FF 
1ba94     5C E4 05 F1 | 	add	objptr, ##35420
1ba98     F2 FA 61 FC | 	wrlong	result1, objptr
1ba9c     45 00 00 FF 
1baa0     5C E4 85 F1 | 	sub	objptr, ##35420
1baa4     F2 FA 01 F6 | 	mov	result1, objptr
1baa8     75 FA 25 F4 | 	bith	result1, #117
1baac     43 00 00 FF 
1bab0     98 E5 05 F1 | 	add	objptr, ##34712
1bab4     F2 FA 61 FC | 	wrlong	result1, objptr
1bab8     43 00 00 FF 
1babc     98 E5 85 F1 | 	sub	objptr, ##34712
1bac0     F2 FA 01 F6 | 	mov	result1, objptr
1bac4     94 FA 25 F4 | 	bith	result1, #148
1bac8     43 00 00 FF 
1bacc     AC E5 05 F1 | 	add	objptr, ##34732
1bad0     F2 FA 61 FC | 	wrlong	result1, objptr
1bad4     43 00 00 FF 
1bad8     AC E5 85 F1 | 	sub	objptr, ##34732
1badc     F2 FA 01 F6 | 	mov	result1, objptr
1bae0     19 FA 25 F4 | 	bith	result1, #25
1bae4     43 00 00 FF 
1bae8     9C E5 05 F1 | 	add	objptr, ##34716
1baec     F2 FA 61 FC | 	wrlong	result1, objptr
1baf0     43 00 00 FF 
1baf4     9C E5 85 F1 | 	sub	objptr, ##34716
1baf8     F2 FA 01 F6 | 	mov	result1, objptr
1bafc     00 08 01 FF 
1bb00     00 FA 45 F5 | 	or	result1, ##34603008
1bb04     43 00 00 FF 
1bb08     B8 E4 05 F1 | 	add	objptr, ##34488
1bb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb10     43 00 00 FF 
1bb14     B8 E4 85 F1 | 	sub	objptr, ##34488
1bb18     F2 FA 01 F6 | 	mov	result1, objptr
1bb1c     00 10 01 FF 
1bb20     00 FA 45 F5 | 	or	result1, ##35651584
1bb24     43 00 00 FF 
1bb28     A0 E5 05 F1 | 	add	objptr, ##34720
1bb2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb30     43 00 00 FF 
1bb34     A0 E5 85 F1 | 	sub	objptr, ##34720
1bb38     F2 FA 01 F6 | 	mov	result1, objptr
1bb3c     00 18 01 FF 
1bb40     00 FA 45 F5 | 	or	result1, ##36700160
1bb44     43 00 00 FF 
1bb48     A4 E5 05 F1 | 	add	objptr, ##34724
1bb4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb50     43 00 00 FF 
1bb54     A4 E5 85 F1 | 	sub	objptr, ##34724
1bb58     F2 FA 01 F6 | 	mov	result1, objptr
1bb5c     00 20 01 FF 
1bb60     00 FA 45 F5 | 	or	result1, ##37748736
1bb64     43 00 00 FF 
1bb68     A8 E5 05 F1 | 	add	objptr, ##34728
1bb6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb70     43 00 00 FF 
1bb74     A8 E5 85 F1 | 	sub	objptr, ##34728
1bb78     F2 FA 01 F6 | 	mov	result1, objptr
1bb7c     00 28 01 FF 
1bb80     00 FA 45 F5 | 	or	result1, ##38797312
1bb84     43 00 00 FF 
1bb88     B4 E5 05 F1 | 	add	objptr, ##34740
1bb8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb90     43 00 00 FF 
1bb94     B4 E5 85 F1 | 	sub	objptr, ##34740
1bb98     F2 FA 01 F6 | 	mov	result1, objptr
1bb9c     00 30 01 FF 
1bba0     00 FA 45 F5 | 	or	result1, ##39845888
1bba4     43 00 00 FF 
1bba8     B8 E5 05 F1 | 	add	objptr, ##34744
1bbac     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb0     43 00 00 FF 
1bbb4     B8 E5 85 F1 | 	sub	objptr, ##34744
1bbb8     F2 FA 01 F6 | 	mov	result1, objptr
1bbbc     00 38 01 FF 
1bbc0     00 FA 45 F5 | 	or	result1, ##40894464
1bbc4     43 00 00 FF 
1bbc8     BC E5 05 F1 | 	add	objptr, ##34748
1bbcc     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd0     43 00 00 FF 
1bbd4     BC E5 85 F1 | 	sub	objptr, ##34748
1bbd8     F2 FA 01 F6 | 	mov	result1, objptr
1bbdc     00 40 01 FF 
1bbe0     00 FA 45 F5 | 	or	result1, ##41943040
1bbe4     43 00 00 FF 
1bbe8     C0 E5 05 F1 | 	add	objptr, ##34752
1bbec     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf0     43 00 00 FF 
1bbf4     C0 E5 85 F1 | 	sub	objptr, ##34752
1bbf8     F2 FA 01 F6 | 	mov	result1, objptr
1bbfc     00 48 01 FF 
1bc00     00 FA 45 F5 | 	or	result1, ##42991616
1bc04     43 00 00 FF 
1bc08     C8 E5 05 F1 | 	add	objptr, ##34760
1bc0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc10     43 00 00 FF 
1bc14     C8 E5 85 F1 | 	sub	objptr, ##34760
1bc18     F2 FA 01 F6 | 	mov	result1, objptr
1bc1c     00 08 01 FF 
1bc20     00 FA 45 F5 | 	or	result1, ##34603008
1bc24     43 00 00 FF 
1bc28     CC E5 05 F1 | 	add	objptr, ##34764
1bc2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc30     43 00 00 FF 
1bc34     CC E5 85 F1 | 	sub	objptr, ##34764
1bc38     F2 FA 01 F6 | 	mov	result1, objptr
1bc3c     00 50 01 FF 
1bc40     00 FA 45 F5 | 	or	result1, ##44040192
1bc44     43 00 00 FF 
1bc48     CC E4 05 F1 | 	add	objptr, ##34508
1bc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc50     43 00 00 FF 
1bc54     CC E4 85 F1 | 	sub	objptr, ##34508
1bc58     F2 FA 01 F6 | 	mov	result1, objptr
1bc5c     00 58 01 FF 
1bc60     00 FA 45 F5 | 	or	result1, ##45088768
1bc64     43 00 00 FF 
1bc68     FC E4 05 F1 | 	add	objptr, ##34556
1bc6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc70     43 00 00 FF 
1bc74     FC E4 85 F1 | 	sub	objptr, ##34556
1bc78     F2 FA 01 F6 | 	mov	result1, objptr
1bc7c     00 60 01 FF 
1bc80     00 FA 45 F5 | 	or	result1, ##46137344
1bc84     43 00 00 FF 
1bc88     F8 E4 05 F1 | 	add	objptr, ##34552
1bc8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc90     43 00 00 FF 
1bc94     F8 E4 85 F1 | 	sub	objptr, ##34552
1bc98     F2 FA 01 F6 | 	mov	result1, objptr
1bc9c     00 68 01 FF 
1bca0     00 FA 45 F5 | 	or	result1, ##47185920
1bca4     43 00 00 FF 
1bca8     9C E4 05 F1 | 	add	objptr, ##34460
1bcac     F2 FA 61 FC | 	wrlong	result1, objptr
1bcb0     43 00 00 FF 
1bcb4     9C E4 85 F1 | 	sub	objptr, ##34460
1bcb8     F2 FA 01 F6 | 	mov	result1, objptr
1bcbc     00 70 01 FF 
1bcc0     00 FA 45 F5 | 	or	result1, ##48234496
1bcc4     43 00 00 FF 
1bcc8     A0 E4 05 F1 | 	add	objptr, ##34464
1bccc     F2 FA 61 FC | 	wrlong	result1, objptr
1bcd0     43 00 00 FF 
1bcd4     A0 E4 85 F1 | 	sub	objptr, ##34464
1bcd8     F2 FA 01 F6 | 	mov	result1, objptr
1bcdc     00 78 01 FF 
1bce0     00 FA 45 F5 | 	or	result1, ##49283072
1bce4     43 00 00 FF 
1bce8     08 E5 05 F1 | 	add	objptr, ##34568
1bcec     F2 FA 61 FC | 	wrlong	result1, objptr
1bcf0     43 00 00 FF 
1bcf4     08 E5 85 F1 | 	sub	objptr, ##34568
1bcf8     F2 FA 01 F6 | 	mov	result1, objptr
1bcfc     38 FA 25 F4 | 	bith	result1, #56
1bd00     43 00 00 FF 
1bd04     B0 E5 05 F1 | 	add	objptr, ##34736
1bd08     F2 FA 61 FC | 	wrlong	result1, objptr
1bd0c     43 00 00 FF 
1bd10     B0 E5 85 F1 | 	sub	objptr, ##34736
1bd14     F2 FA 01 F6 | 	mov	result1, objptr
1bd18     00 88 01 FF 
1bd1c     00 FA 45 F5 | 	or	result1, ##51380224
1bd20     43 00 00 FF 
1bd24     C4 E5 05 F1 | 	add	objptr, ##34756
1bd28     F2 FA 61 FC | 	wrlong	result1, objptr
1bd2c     43 00 00 FF 
1bd30     C4 E5 85 F1 | 	sub	objptr, ##34756
1bd34     F2 FA 01 F6 | 	mov	result1, objptr
1bd38     00 90 01 FF 
1bd3c     00 FA 45 F5 | 	or	result1, ##52428800
1bd40     43 00 00 FF 
1bd44     D0 E5 05 F1 | 	add	objptr, ##34768
1bd48     F2 FA 61 FC | 	wrlong	result1, objptr
1bd4c     43 00 00 FF 
1bd50     D0 E5 85 F1 | 	sub	objptr, ##34768
1bd54     F2 FA 01 F6 | 	mov	result1, objptr
1bd58     00 98 01 FF 
1bd5c     00 FA 45 F5 | 	or	result1, ##53477376
1bd60     43 00 00 FF 
1bd64     D4 E5 05 F1 | 	add	objptr, ##34772
1bd68     F2 FA 61 FC | 	wrlong	result1, objptr
1bd6c     43 00 00 FF 
1bd70     D4 E5 85 F1 | 	sub	objptr, ##34772
1bd74     F2 FA 01 F6 | 	mov	result1, objptr
1bd78     00 A0 01 FF 
1bd7c     00 FA 45 F5 | 	or	result1, ##54525952
1bd80     43 00 00 FF 
1bd84     D8 E5 05 F1 | 	add	objptr, ##34776
1bd88     F2 FA 61 FC | 	wrlong	result1, objptr
1bd8c     43 00 00 FF 
1bd90     D8 E5 85 F1 | 	sub	objptr, ##34776
1bd94     F2 FA 01 F6 | 	mov	result1, objptr
1bd98     00 A8 01 FF 
1bd9c     00 FA 45 F5 | 	or	result1, ##55574528
1bda0     43 00 00 FF 
1bda4     DC E5 05 F1 | 	add	objptr, ##34780
1bda8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdac     43 00 00 FF 
1bdb0     DC E5 85 F1 | 	sub	objptr, ##34780
1bdb4     F2 FA 01 F6 | 	mov	result1, objptr
1bdb8     00 B0 01 FF 
1bdbc     00 FA 45 F5 | 	or	result1, ##56623104
1bdc0     43 00 00 FF 
1bdc4     E0 E5 05 F1 | 	add	objptr, ##34784
1bdc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdcc     43 00 00 FF 
1bdd0     E0 E5 85 F1 | 	sub	objptr, ##34784
1bdd4     F2 FA 01 F6 | 	mov	result1, objptr
1bdd8     00 B8 01 FF 
1bddc     00 FA 45 F5 | 	or	result1, ##57671680
1bde0     43 00 00 FF 
1bde4     E4 E5 05 F1 | 	add	objptr, ##34788
1bde8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdec     43 00 00 FF 
1bdf0     E4 E5 85 F1 | 	sub	objptr, ##34788
1bdf4     F2 FA 01 F6 | 	mov	result1, objptr
1bdf8     94 FA 25 F4 | 	bith	result1, #148
1bdfc     43 00 00 FF 
1be00     AC E5 05 F1 | 	add	objptr, ##34732
1be04     F2 FA 61 FC | 	wrlong	result1, objptr
1be08     43 00 00 FF 
1be0c     AC E5 85 F1 | 	sub	objptr, ##34732
1be10     F2 FA 01 F6 | 	mov	result1, objptr
1be14     57 FA 25 F4 | 	bith	result1, #87
1be18     43 00 00 FF 
1be1c     EC E5 05 F1 | 	add	objptr, ##34796
1be20     F2 FA 61 FC | 	wrlong	result1, objptr
1be24     43 00 00 FF 
1be28     EC E5 85 F1 | 	sub	objptr, ##34796
1be2c     F2 FA 01 F6 | 	mov	result1, objptr
1be30     00 C8 01 FF 
1be34     00 FA 45 F5 | 	or	result1, ##59768832
1be38     43 00 00 FF 
1be3c     E8 E5 05 F1 | 	add	objptr, ##34792
1be40     F2 FA 61 FC | 	wrlong	result1, objptr
1be44     43 00 00 FF 
1be48     E8 E5 85 F1 | 	sub	objptr, ##34792
1be4c     F2 FA 01 F6 | 	mov	result1, objptr
1be50     00 D0 01 FF 
1be54     00 FA 45 F5 | 	or	result1, ##60817408
1be58     44 00 00 FF 
1be5c     00 E4 05 F1 | 	add	objptr, ##34816
1be60     F2 FA 61 FC | 	wrlong	result1, objptr
1be64     44 00 00 FF 
1be68     00 E4 85 F1 | 	sub	objptr, ##34816
1be6c     F2 FA 01 F6 | 	mov	result1, objptr
1be70     00 D8 01 FF 
1be74     00 FA 45 F5 | 	or	result1, ##61865984
1be78     44 00 00 FF 
1be7c     04 E4 05 F1 | 	add	objptr, ##34820
1be80     F2 FA 61 FC | 	wrlong	result1, objptr
1be84     44 00 00 FF 
1be88     04 E4 85 F1 | 	sub	objptr, ##34820
1be8c     F2 FA 01 F6 | 	mov	result1, objptr
1be90     76 FA 25 F4 | 	bith	result1, #118
1be94     43 00 00 FF 
1be98     F0 E5 05 F1 | 	add	objptr, ##34800
1be9c     F2 FA 61 FC | 	wrlong	result1, objptr
1bea0     43 00 00 FF 
1bea4     F0 E5 85 F1 | 	sub	objptr, ##34800
1bea8     F2 FA 01 F6 | 	mov	result1, objptr
1beac     00 E8 01 FF 
1beb0     00 FA 45 F5 | 	or	result1, ##63963136
1beb4     43 00 00 FF 
1beb8     F4 E5 05 F1 | 	add	objptr, ##34804
1bebc     F2 FA 61 FC | 	wrlong	result1, objptr
1bec0     43 00 00 FF 
1bec4     F4 E5 85 F1 | 	sub	objptr, ##34804
1bec8     F2 FA 01 F6 | 	mov	result1, objptr
1becc     95 FA 25 F4 | 	bith	result1, #149
1bed0     43 00 00 FF 
1bed4     F8 E5 05 F1 | 	add	objptr, ##34808
1bed8     F2 FA 61 FC | 	wrlong	result1, objptr
1bedc     43 00 00 FF 
1bee0     F8 E5 85 F1 | 	sub	objptr, ##34808
1bee4     F2 FA 01 F6 | 	mov	result1, objptr
1bee8     B4 FA 25 F4 | 	bith	result1, #180
1beec     43 00 00 FF 
1bef0     FC E5 05 F1 | 	add	objptr, ##34812
1bef4     F2 FA 61 FC | 	wrlong	result1, objptr
1bef8     43 00 00 FF 
1befc     FC E5 85 F1 | 	sub	objptr, ##34812
1bf00     F2 FA 01 F6 | 	mov	result1, objptr
1bf04     1A FA 25 F4 | 	bith	result1, #26
1bf08     44 00 00 FF 
1bf0c     0C E4 05 F1 | 	add	objptr, ##34828
1bf10     F2 FA 61 FC | 	wrlong	result1, objptr
1bf14     44 00 00 FF 
1bf18     0C E4 85 F1 | 	sub	objptr, ##34828
1bf1c     F2 FA 01 F6 | 	mov	result1, objptr
1bf20     00 08 02 FF 
1bf24     00 FA 45 F5 | 	or	result1, ##68157440
1bf28     44 00 00 FF 
1bf2c     08 E4 05 F1 | 	add	objptr, ##34824
1bf30     F2 FA 61 FC | 	wrlong	result1, objptr
1bf34     44 00 00 FF 
1bf38     08 E4 85 F1 | 	sub	objptr, ##34824
1bf3c     F2 FA 01 F6 | 	mov	result1, objptr
1bf40     00 10 02 FF 
1bf44     00 FA 45 F5 | 	or	result1, ##69206016
1bf48     44 00 00 FF 
1bf4c     18 E4 05 F1 | 	add	objptr, ##34840
1bf50     F2 FA 61 FC | 	wrlong	result1, objptr
1bf54     44 00 00 FF 
1bf58     18 E4 85 F1 | 	sub	objptr, ##34840
1bf5c     F2 FA 01 F6 | 	mov	result1, objptr
1bf60     00 18 02 FF 
1bf64     00 FA 45 F5 | 	or	result1, ##70254592
1bf68     44 00 00 FF 
1bf6c     14 E4 05 F1 | 	add	objptr, ##34836
1bf70     F2 FA 61 FC | 	wrlong	result1, objptr
1bf74     44 00 00 FF 
1bf78     14 E4 85 F1 | 	sub	objptr, ##34836
1bf7c     F2 FA 01 F6 | 	mov	result1, objptr
1bf80     00 20 02 FF 
1bf84     00 FA 45 F5 | 	or	result1, ##71303168
1bf88     44 00 00 FF 
1bf8c     10 E4 05 F1 | 	add	objptr, ##34832
1bf90     F2 FA 61 FC | 	wrlong	result1, objptr
1bf94     44 00 00 FF 
1bf98     10 E4 85 F1 | 	sub	objptr, ##34832
1bf9c     F2 FA 01 F6 | 	mov	result1, objptr
1bfa0     00 28 02 FF 
1bfa4     00 FA 45 F5 | 	or	result1, ##72351744
1bfa8     44 00 00 FF 
1bfac     1C E4 05 F1 | 	add	objptr, ##34844
1bfb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb4     44 00 00 FF 
1bfb8     1C E4 85 F1 | 	sub	objptr, ##34844
1bfbc     F2 FA 01 F6 | 	mov	result1, objptr
1bfc0     00 30 02 FF 
1bfc4     00 FA 45 F5 | 	or	result1, ##73400320
1bfc8     44 00 00 FF 
1bfcc     20 E4 05 F1 | 	add	objptr, ##34848
1bfd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd4     44 00 00 FF 
1bfd8     20 E4 85 F1 | 	sub	objptr, ##34848
1bfdc     F2 FA 01 F6 | 	mov	result1, objptr
1bfe0     00 38 02 FF 
1bfe4     00 FA 45 F5 | 	or	result1, ##74448896
1bfe8     43 00 00 FF 
1bfec     B4 E4 05 F1 | 	add	objptr, ##34484
1bff0     F2 FA 61 FC | 	wrlong	result1, objptr
1bff4     43 00 00 FF 
1bff8     B4 E4 85 F1 | 	sub	objptr, ##34484
1bffc     F2 FA 01 F6 | 	mov	result1, objptr
1c000     00 40 02 FF 
1c004     00 FA 45 F5 | 	or	result1, ##75497472
1c008     44 00 00 FF 
1c00c     38 E4 05 F1 | 	add	objptr, ##34872
1c010     F2 FA 61 FC | 	wrlong	result1, objptr
1c014     44 00 00 FF 
1c018     38 E4 85 F1 | 	sub	objptr, ##34872
1c01c     F2 FA 01 F6 | 	mov	result1, objptr
1c020     00 48 02 FF 
1c024     00 FA 45 F5 | 	or	result1, ##76546048
1c028     44 00 00 FF 
1c02c     48 E4 05 F1 | 	add	objptr, ##34888
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034     44 00 00 FF 
1c038     48 E4 85 F1 | 	sub	objptr, ##34888
1c03c     F2 FA 01 F6 | 	mov	result1, objptr
1c040     00 50 02 FF 
1c044     00 FA 45 F5 | 	or	result1, ##77594624
1c048     44 00 00 FF 
1c04c     4C E4 05 F1 | 	add	objptr, ##34892
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054     44 00 00 FF 
1c058     4C E4 85 F1 | 	sub	objptr, ##34892
1c05c     F2 FA 01 F6 | 	mov	result1, objptr
1c060     00 58 02 FF 
1c064     00 FA 45 F5 | 	or	result1, ##78643200
1c068     44 00 00 FF 
1c06c     44 E4 05 F1 | 	add	objptr, ##34884
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074     44 00 00 FF 
1c078     44 E4 85 F1 | 	sub	objptr, ##34884
1c07c     F2 FA 01 F6 | 	mov	result1, objptr
1c080     00 60 02 FF 
1c084     00 FA 45 F5 | 	or	result1, ##79691776
1c088     44 00 00 FF 
1c08c     3C E4 05 F1 | 	add	objptr, ##34876
1c090     F2 FA 61 FC | 	wrlong	result1, objptr
1c094     44 00 00 FF 
1c098     3C E4 85 F1 | 	sub	objptr, ##34876
1c09c     F2 FA 01 F6 | 	mov	result1, objptr
1c0a0     00 68 02 FF 
1c0a4     00 FA 45 F5 | 	or	result1, ##80740352
1c0a8     44 00 00 FF 
1c0ac     40 E4 05 F1 | 	add	objptr, ##34880
1c0b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b4     44 00 00 FF 
1c0b8     40 E4 85 F1 | 	sub	objptr, ##34880
1c0bc     F2 FA 01 F6 | 	mov	result1, objptr
1c0c0     00 70 02 FF 
1c0c4     00 FA 45 F5 | 	or	result1, ##81788928
1c0c8     44 00 00 FF 
1c0cc     50 E4 05 F1 | 	add	objptr, ##34896
1c0d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d4     44 00 00 FF 
1c0d8     50 E4 85 F1 | 	sub	objptr, ##34896
1c0dc     F2 FA 01 F6 | 	mov	result1, objptr
1c0e0     00 78 02 FF 
1c0e4     00 FA 45 F5 | 	or	result1, ##82837504
1c0e8     44 00 00 FF 
1c0ec     54 E4 05 F1 | 	add	objptr, ##34900
1c0f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f4     44 00 00 FF 
1c0f8     54 E4 85 F1 | 	sub	objptr, ##34900
1c0fc     F2 FA 01 F6 | 	mov	result1, objptr
1c100     00 80 02 FF 
1c104     00 FA 45 F5 | 	or	result1, ##83886080
1c108     44 00 00 FF 
1c10c     58 E4 05 F1 | 	add	objptr, ##34904
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     58 E4 85 F1 | 	sub	objptr, ##34904
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     00 88 02 FF 
1c124     00 FA 45 F5 | 	or	result1, ##84934656
1c128     44 00 00 FF 
1c12c     5C E4 05 F1 | 	add	objptr, ##34908
1c130     F2 FA 61 FC | 	wrlong	result1, objptr
1c134     44 00 00 FF 
1c138     5C E4 85 F1 | 	sub	objptr, ##34908
1c13c     F2 FA 01 F6 | 	mov	result1, objptr
1c140     00 90 02 FF 
1c144     00 FA 45 F5 | 	or	result1, ##85983232
1c148     44 00 00 FF 
1c14c     60 E4 05 F1 | 	add	objptr, ##34912
1c150     F2 FA 61 FC | 	wrlong	result1, objptr
1c154     44 00 00 FF 
1c158     60 E4 85 F1 | 	sub	objptr, ##34912
1c15c     F2 FA 01 F6 | 	mov	result1, objptr
1c160     00 98 02 FF 
1c164     00 FA 45 F5 | 	or	result1, ##87031808
1c168     44 00 00 FF 
1c16c     64 E4 05 F1 | 	add	objptr, ##34916
1c170     F2 FA 61 FC | 	wrlong	result1, objptr
1c174     44 00 00 FF 
1c178     64 E4 85 F1 | 	sub	objptr, ##34916
1c17c     F2 FA 01 F6 | 	mov	result1, objptr
1c180     00 A0 02 FF 
1c184     00 FA 45 F5 | 	or	result1, ##88080384
1c188     44 00 00 FF 
1c18c     68 E4 05 F1 | 	add	objptr, ##34920
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     44 00 00 FF 
1c198     68 E4 85 F1 | 	sub	objptr, ##34920
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     00 A8 02 FF 
1c1a4     00 FA 45 F5 | 	or	result1, ##89128960
1c1a8     44 00 00 FF 
1c1ac     6C E4 05 F1 | 	add	objptr, ##34924
1c1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b4     44 00 00 FF 
1c1b8     6C E4 85 F1 | 	sub	objptr, ##34924
1c1bc     F2 FA 01 F6 | 	mov	result1, objptr
1c1c0     00 B0 02 FF 
1c1c4     00 FA 45 F5 | 	or	result1, ##90177536
1c1c8     44 00 00 FF 
1c1cc     78 E4 05 F1 | 	add	objptr, ##34936
1c1d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d4     44 00 00 FF 
1c1d8     78 E4 85 F1 | 	sub	objptr, ##34936
1c1dc     F2 FA 01 F6 | 	mov	result1, objptr
1c1e0     00 B8 02 FF 
1c1e4     00 FA 45 F5 | 	or	result1, ##91226112
1c1e8     44 00 00 FF 
1c1ec     70 E4 05 F1 | 	add	objptr, ##34928
1c1f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f4     44 00 00 FF 
1c1f8     70 E4 85 F1 | 	sub	objptr, ##34928
1c1fc     F2 FA 01 F6 | 	mov	result1, objptr
1c200     00 C0 02 FF 
1c204     00 FA 45 F5 | 	or	result1, ##92274688
1c208     44 00 00 FF 
1c20c     74 E4 05 F1 | 	add	objptr, ##34932
1c210     F2 FA 61 FC | 	wrlong	result1, objptr
1c214     44 00 00 FF 
1c218     74 E4 85 F1 | 	sub	objptr, ##34932
1c21c     F2 FA 01 F6 | 	mov	result1, objptr
1c220     00 C8 02 FF 
1c224     00 FA 45 F5 | 	or	result1, ##93323264
1c228     44 00 00 FF 
1c22c     7C E4 05 F1 | 	add	objptr, ##34940
1c230     F2 FA 61 FC | 	wrlong	result1, objptr
1c234     44 00 00 FF 
1c238     7C E4 85 F1 | 	sub	objptr, ##34940
1c23c     F2 FA 01 F6 | 	mov	result1, objptr
1c240     00 D0 02 FF 
1c244     00 FA 45 F5 | 	or	result1, ##94371840
1c248     44 00 00 FF 
1c24c     24 E4 05 F1 | 	add	objptr, ##34852
1c250     F2 FA 61 FC | 	wrlong	result1, objptr
1c254     44 00 00 FF 
1c258     24 E4 85 F1 | 	sub	objptr, ##34852
1c25c     F2 FA 01 F6 | 	mov	result1, objptr
1c260     00 D8 02 FF 
1c264     00 FA 45 F5 | 	or	result1, ##95420416
1c268     44 00 00 FF 
1c26c     2C E4 05 F1 | 	add	objptr, ##34860
1c270     F2 FA 61 FC | 	wrlong	result1, objptr
1c274     44 00 00 FF 
1c278     2C E4 85 F1 | 	sub	objptr, ##34860
1c27c     F2 FA 01 F6 | 	mov	result1, objptr
1c280     00 E0 02 FF 
1c284     00 FA 45 F5 | 	or	result1, ##96468992
1c288     44 00 00 FF 
1c28c     30 E4 05 F1 | 	add	objptr, ##34864
1c290     F2 FA 61 FC | 	wrlong	result1, objptr
1c294     44 00 00 FF 
1c298     30 E4 85 F1 | 	sub	objptr, ##34864
1c29c     F2 FA 01 F6 | 	mov	result1, objptr
1c2a0     00 E8 02 FF 
1c2a4     00 FA 45 F5 | 	or	result1, ##97517568
1c2a8     44 00 00 FF 
1c2ac     80 E4 05 F1 | 	add	objptr, ##34944
1c2b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b4     44 00 00 FF 
1c2b8     80 E4 85 F1 | 	sub	objptr, ##34944
1c2bc     F2 FA 01 F6 | 	mov	result1, objptr
1c2c0     00 F0 02 FF 
1c2c4     00 FA 45 F5 | 	or	result1, ##98566144
1c2c8     44 00 00 FF 
1c2cc     84 E4 05 F1 | 	add	objptr, ##34948
1c2d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d4     44 00 00 FF 
1c2d8     84 E4 85 F1 | 	sub	objptr, ##34948
1c2dc     F2 FA 01 F6 | 	mov	result1, objptr
1c2e0     00 F8 02 FF 
1c2e4     00 FA 45 F5 | 	or	result1, ##99614720
1c2e8     44 00 00 FF 
1c2ec     88 E4 05 F1 | 	add	objptr, ##34952
1c2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f4     44 00 00 FF 
1c2f8     88 E4 85 F1 | 	sub	objptr, ##34952
1c2fc     F2 FA 01 F6 | 	mov	result1, objptr
1c300     39 FA 25 F4 | 	bith	result1, #57
1c304     44 00 00 FF 
1c308     34 E4 05 F1 | 	add	objptr, ##34868
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     44 00 00 FF 
1c314     34 E4 85 F1 | 	sub	objptr, ##34868
1c318     F2 FA 01 F6 | 	mov	result1, objptr
1c31c     00 08 03 FF 
1c320     00 FA 45 F5 | 	or	result1, ##101711872
1c324     44 00 00 FF 
1c328     98 E4 05 F1 | 	add	objptr, ##34968
1c32c     F2 FA 61 FC | 	wrlong	result1, objptr
1c330     44 00 00 FF 
1c334     98 E4 85 F1 | 	sub	objptr, ##34968
1c338     F2 FA 01 F6 | 	mov	result1, objptr
1c33c     00 10 03 FF 
1c340     00 FA 45 F5 | 	or	result1, ##102760448
1c344     44 00 00 FF 
1c348     A0 E4 05 F1 | 	add	objptr, ##34976
1c34c     F2 FA 61 FC | 	wrlong	result1, objptr
1c350     44 00 00 FF 
1c354     A0 E4 85 F1 | 	sub	objptr, ##34976
1c358     F2 FA 01 F6 | 	mov	result1, objptr
1c35c     00 18 03 FF 
1c360     00 FA 45 F5 | 	or	result1, ##103809024
1c364     44 00 00 FF 
1c368     94 E4 05 F1 | 	add	objptr, ##34964
1c36c     F2 FA 61 FC | 	wrlong	result1, objptr
1c370     44 00 00 FF 
1c374     94 E4 85 F1 | 	sub	objptr, ##34964
1c378     F2 FA 01 F6 | 	mov	result1, objptr
1c37c     00 20 03 FF 
1c380     00 FA 45 F5 | 	or	result1, ##104857600
1c384     44 00 00 FF 
1c388     90 E4 05 F1 | 	add	objptr, ##34960
1c38c     F2 FA 61 FC | 	wrlong	result1, objptr
1c390     44 00 00 FF 
1c394     90 E4 85 F1 | 	sub	objptr, ##34960
1c398     F2 FA 01 F6 | 	mov	result1, objptr
1c39c     00 28 03 FF 
1c3a0     00 FA 45 F5 | 	or	result1, ##105906176
1c3a4     44 00 00 FF 
1c3a8     8C E4 05 F1 | 	add	objptr, ##34956
1c3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b0     44 00 00 FF 
1c3b4     8C E4 85 F1 | 	sub	objptr, ##34956
1c3b8     F2 FA 01 F6 | 	mov	result1, objptr
1c3bc     00 30 03 FF 
1c3c0     00 FA 45 F5 | 	or	result1, ##106954752
1c3c4     44 00 00 FF 
1c3c8     9C E4 05 F1 | 	add	objptr, ##34972
1c3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d0     44 00 00 FF 
1c3d4     9C E4 85 F1 | 	sub	objptr, ##34972
1c3d8     F2 FA 01 F6 | 	mov	result1, objptr
1c3dc     00 38 03 FF 
1c3e0     00 FA 45 F5 | 	or	result1, ##108003328
1c3e4     44 00 00 FF 
1c3e8     A4 E4 05 F1 | 	add	objptr, ##34980
1c3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f0     44 00 00 FF 
1c3f4     A4 E4 85 F1 | 	sub	objptr, ##34980
1c3f8     F2 FA 01 F6 | 	mov	result1, objptr
1c3fc     00 40 03 FF 
1c400     00 FA 45 F5 | 	or	result1, ##109051904
1c404     44 00 00 FF 
1c408     A8 E4 05 F1 | 	add	objptr, ##34984
1c40c     F2 FA 61 FC | 	wrlong	result1, objptr
1c410     44 00 00 FF 
1c414     A8 E4 85 F1 | 	sub	objptr, ##34984
1c418     F2 FA 01 F6 | 	mov	result1, objptr
1c41c     00 48 03 FF 
1c420     00 FA 45 F5 | 	or	result1, ##110100480
1c424     44 00 00 FF 
1c428     AC E4 05 F1 | 	add	objptr, ##34988
1c42c     F2 FA 61 FC | 	wrlong	result1, objptr
1c430     44 00 00 FF 
1c434     AC E4 85 F1 | 	sub	objptr, ##34988
1c438     F2 FA 01 F6 | 	mov	result1, objptr
1c43c     00 50 03 FF 
1c440     00 FA 45 F5 | 	or	result1, ##111149056
1c444     44 00 00 FF 
1c448     B4 E4 05 F1 | 	add	objptr, ##34996
1c44c     F2 FA 61 FC | 	wrlong	result1, objptr
1c450     44 00 00 FF 
1c454     B4 E4 85 F1 | 	sub	objptr, ##34996
1c458     F2 FA 01 F6 | 	mov	result1, objptr
1c45c     00 58 03 FF 
1c460     00 FA 45 F5 | 	or	result1, ##112197632
1c464     44 00 00 FF 
1c468     B8 E4 05 F1 | 	add	objptr, ##35000
1c46c     F2 FA 61 FC | 	wrlong	result1, objptr
1c470     44 00 00 FF 
1c474     B8 E4 85 F1 | 	sub	objptr, ##35000
1c478     F2 FA 01 F6 | 	mov	result1, objptr
1c47c     00 60 03 FF 
1c480     00 FA 45 F5 | 	or	result1, ##113246208
1c484     44 00 00 FF 
1c488     BC E4 05 F1 | 	add	objptr, ##35004
1c48c     F2 FA 61 FC | 	wrlong	result1, objptr
1c490     44 00 00 FF 
1c494     BC E4 85 F1 | 	sub	objptr, ##35004
1c498     F2 FA 01 F6 | 	mov	result1, objptr
1c49c     00 68 03 FF 
1c4a0     00 FA 45 F5 | 	or	result1, ##114294784
1c4a4     44 00 00 FF 
1c4a8     C0 E4 05 F1 | 	add	objptr, ##35008
1c4ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c4b0     44 00 00 FF 
1c4b4     C0 E4 85 F1 | 	sub	objptr, ##35008
1c4b8     F2 FA 01 F6 | 	mov	result1, objptr
1c4bc     00 70 03 FF 
1c4c0     00 FA 45 F5 | 	or	result1, ##115343360
1c4c4     44 00 00 FF 
1c4c8     C4 E4 05 F1 | 	add	objptr, ##35012
1c4cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c4d0     44 00 00 FF 
1c4d4     C4 E4 85 F1 | 	sub	objptr, ##35012
1c4d8     F2 FA 01 F6 | 	mov	result1, objptr
1c4dc     00 78 03 FF 
1c4e0     00 FA 45 F5 | 	or	result1, ##116391936
1c4e4     44 00 00 FF 
1c4e8     C8 E4 05 F1 | 	add	objptr, ##35016
1c4ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f0     44 00 00 FF 
1c4f4     C8 E4 85 F1 | 	sub	objptr, ##35016
1c4f8     F2 FA 01 F6 | 	mov	result1, objptr
1c4fc     58 FA 25 F4 | 	bith	result1, #88
1c500     44 00 00 FF 
1c504     CC E4 05 F1 | 	add	objptr, ##35020
1c508     F2 FA 61 FC | 	wrlong	result1, objptr
1c50c     44 00 00 FF 
1c510     CC E4 85 F1 | 	sub	objptr, ##35020
1c514     F2 FA 01 F6 | 	mov	result1, objptr
1c518     00 88 03 FF 
1c51c     00 FA 45 F5 | 	or	result1, ##118489088
1c520     44 00 00 FF 
1c524     D0 E4 05 F1 | 	add	objptr, ##35024
1c528     F2 FA 61 FC | 	wrlong	result1, objptr
1c52c     44 00 00 FF 
1c530     D0 E4 85 F1 | 	sub	objptr, ##35024
1c534     F2 FA 01 F6 | 	mov	result1, objptr
1c538     00 90 03 FF 
1c53c     00 FA 45 F5 | 	or	result1, ##119537664
1c540     44 00 00 FF 
1c544     B0 E4 05 F1 | 	add	objptr, ##34992
1c548     F2 FA 61 FC | 	wrlong	result1, objptr
1c54c     44 00 00 FF 
1c550     B0 E4 85 F1 | 	sub	objptr, ##34992
1c554     F2 FA 01 F6 | 	mov	result1, objptr
1c558     00 98 03 FF 
1c55c     00 FA 45 F5 | 	or	result1, ##120586240
1c560     43 00 00 FF 
1c564     A8 E4 05 F1 | 	add	objptr, ##34472
1c568     F2 FA 61 FC | 	wrlong	result1, objptr
1c56c     43 00 00 FF 
1c570     A8 E4 85 F1 | 	sub	objptr, ##34472
1c574     F2 FA 01 F6 | 	mov	result1, objptr
1c578     00 A0 03 FF 
1c57c     00 FA 45 F5 | 	or	result1, ##121634816
1c580     44 00 00 FF 
1c584     D4 E4 05 F1 | 	add	objptr, ##35028
1c588     F2 FA 61 FC | 	wrlong	result1, objptr
1c58c     44 00 00 FF 
1c590     D4 E4 85 F1 | 	sub	objptr, ##35028
1c594     F2 FA 01 F6 | 	mov	result1, objptr
1c598     00 A8 03 FF 
1c59c     00 FA 45 F5 | 	or	result1, ##122683392
1c5a0     44 00 00 FF 
1c5a4     D8 E4 05 F1 | 	add	objptr, ##35032
1c5a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5ac     44 00 00 FF 
1c5b0     D8 E4 85 F1 | 	sub	objptr, ##35032
1c5b4     F2 FA 01 F6 | 	mov	result1, objptr
1c5b8     00 B0 03 FF 
1c5bc     00 FA 45 F5 | 	or	result1, ##123731968
1c5c0     44 00 00 FF 
1c5c4     EC E4 05 F1 | 	add	objptr, ##35052
1c5c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5cc     44 00 00 FF 
1c5d0     EC E4 85 F1 | 	sub	objptr, ##35052
1c5d4     F2 FA 01 F6 | 	mov	result1, objptr
1c5d8     00 B8 03 FF 
1c5dc     00 FA 45 F5 | 	or	result1, ##124780544
1c5e0     44 00 00 FF 
1c5e4     E8 E4 05 F1 | 	add	objptr, ##35048
1c5e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5ec     44 00 00 FF 
1c5f0     E8 E4 85 F1 | 	sub	objptr, ##35048
1c5f4     F2 FA 01 F6 | 	mov	result1, objptr
1c5f8     77 FA 25 F4 | 	bith	result1, #119
1c5fc     44 00 00 FF 
1c600     E0 E4 05 F1 | 	add	objptr, ##35040
1c604     F2 FA 61 FC | 	wrlong	result1, objptr
1c608     44 00 00 FF 
1c60c     E0 E4 85 F1 | 	sub	objptr, ##35040
1c610     F2 FA 01 F6 | 	mov	result1, objptr
1c614     00 C8 03 FF 
1c618     00 FA 45 F5 | 	or	result1, ##126877696
1c61c     44 00 00 FF 
1c620     DC E4 05 F1 | 	add	objptr, ##35036
1c624     F2 FA 61 FC | 	wrlong	result1, objptr
1c628     44 00 00 FF 
1c62c     DC E4 85 F1 | 	sub	objptr, ##35036
1c630     F2 FA 01 F6 | 	mov	result1, objptr
1c634     00 D0 03 FF 
1c638     00 FA 45 F5 | 	or	result1, ##127926272
1c63c     44 00 00 FF 
1c640     FC E4 05 F1 | 	add	objptr, ##35068
1c644     F2 FA 61 FC | 	wrlong	result1, objptr
1c648     44 00 00 FF 
1c64c     FC E4 85 F1 | 	sub	objptr, ##35068
1c650     F2 FA 01 F6 | 	mov	result1, objptr
1c654     00 D8 03 FF 
1c658     00 FA 45 F5 | 	or	result1, ##128974848
1c65c     44 00 00 FF 
1c660     F0 E4 05 F1 | 	add	objptr, ##35056
1c664     F2 FA 61 FC | 	wrlong	result1, objptr
1c668     44 00 00 FF 
1c66c     F0 E4 85 F1 | 	sub	objptr, ##35056
1c670     F2 FA 01 F6 | 	mov	result1, objptr
1c674     96 FA 25 F4 | 	bith	result1, #150
1c678     44 00 00 FF 
1c67c     F4 E4 05 F1 | 	add	objptr, ##35060
1c680     F2 FA 61 FC | 	wrlong	result1, objptr
1c684     44 00 00 FF 
1c688     F4 E4 85 F1 | 	sub	objptr, ##35060
1c68c     F2 FA 01 F6 | 	mov	result1, objptr
1c690     00 E8 03 FF 
1c694     00 FA 45 F5 | 	or	result1, ##131072000
1c698     44 00 00 FF 
1c69c     F8 E4 05 F1 | 	add	objptr, ##35064
1c6a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c6a4     44 00 00 FF 
1c6a8     F8 E4 85 F1 | 	sub	objptr, ##35064
1c6ac     F2 FA 01 F6 | 	mov	result1, objptr
1c6b0     B5 FA 25 F4 | 	bith	result1, #181
1c6b4     44 00 00 FF 
1c6b8     00 E5 05 F1 | 	add	objptr, ##35072
1c6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6c0     44 00 00 FF 
1c6c4     00 E5 85 F1 | 	sub	objptr, ##35072
1c6c8     F2 FA 01 F6 | 	mov	result1, objptr
1c6cc     D4 FA 25 F4 | 	bith	result1, #212
1c6d0     44 00 00 FF 
1c6d4     04 E5 05 F1 | 	add	objptr, ##35076
1c6d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6dc     44 00 00 FF 
1c6e0     04 E5 85 F1 | 	sub	objptr, ##35076
1c6e4     F2 FA 01 F6 | 	mov	result1, objptr
1c6e8     1B FA 25 F4 | 	bith	result1, #27
1c6ec     44 00 00 FF 
1c6f0     08 E5 05 F1 | 	add	objptr, ##35080
1c6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f8     44 00 00 FF 
1c6fc     08 E5 85 F1 | 	sub	objptr, ##35080
1c700     F2 FA 01 F6 | 	mov	result1, objptr
1c704     00 08 04 FF 
1c708     00 FA 45 F5 | 	or	result1, ##135266304
1c70c     44 00 00 FF 
1c710     0C E5 05 F1 | 	add	objptr, ##35084
1c714     F2 FA 61 FC | 	wrlong	result1, objptr
1c718     44 00 00 FF 
1c71c     0C E5 85 F1 | 	sub	objptr, ##35084
1c720     F2 FA 01 F6 | 	mov	result1, objptr
1c724     00 10 04 FF 
1c728     00 FA 45 F5 | 	or	result1, ##136314880
1c72c     44 00 00 FF 
1c730     10 E5 05 F1 | 	add	objptr, ##35088
1c734     F2 FA 61 FC | 	wrlong	result1, objptr
1c738     44 00 00 FF 
1c73c     10 E5 85 F1 | 	sub	objptr, ##35088
1c740     F2 FA 01 F6 | 	mov	result1, objptr
1c744     00 18 04 FF 
1c748     00 FA 45 F5 | 	or	result1, ##137363456
1c74c     44 00 00 FF 
1c750     14 E5 05 F1 | 	add	objptr, ##35092
1c754     F2 FA 61 FC | 	wrlong	result1, objptr
1c758     44 00 00 FF 
1c75c     14 E5 85 F1 | 	sub	objptr, ##35092
1c760     F2 FA 01 F6 | 	mov	result1, objptr
1c764     00 20 04 FF 
1c768     00 FA 45 F5 | 	or	result1, ##138412032
1c76c     44 00 00 FF 
1c770     1C E5 05 F1 | 	add	objptr, ##35100
1c774     F2 FA 61 FC | 	wrlong	result1, objptr
1c778     44 00 00 FF 
1c77c     1C E5 85 F1 | 	sub	objptr, ##35100
1c780     F2 FA 01 F6 | 	mov	result1, objptr
1c784     00 28 04 FF 
1c788     00 FA 45 F5 | 	or	result1, ##139460608
1c78c     44 00 00 FF 
1c790     20 E5 05 F1 | 	add	objptr, ##35104
1c794     F2 FA 61 FC | 	wrlong	result1, objptr
1c798     44 00 00 FF 
1c79c     20 E5 85 F1 | 	sub	objptr, ##35104
1c7a0     F2 FA 01 F6 | 	mov	result1, objptr
1c7a4     00 30 04 FF 
1c7a8     00 FA 45 F5 | 	or	result1, ##140509184
1c7ac     44 00 00 FF 
1c7b0     24 E5 05 F1 | 	add	objptr, ##35108
1c7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7b8     44 00 00 FF 
1c7bc     24 E5 85 F1 | 	sub	objptr, ##35108
1c7c0     F2 FA 01 F6 | 	mov	result1, objptr
1c7c4     00 38 04 FF 
1c7c8     00 FA 45 F5 | 	or	result1, ##141557760
1c7cc     44 00 00 FF 
1c7d0     18 E5 05 F1 | 	add	objptr, ##35096
1c7d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7d8     44 00 00 FF 
1c7dc     18 E5 85 F1 | 	sub	objptr, ##35096
1c7e0     F2 FA 01 F6 | 	mov	result1, objptr
1c7e4     00 40 04 FF 
1c7e8     00 FA 45 F5 | 	or	result1, ##142606336
1c7ec     44 00 00 FF 
1c7f0     28 E5 05 F1 | 	add	objptr, ##35112
1c7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7f8     44 00 00 FF 
1c7fc     28 E5 85 F1 | 	sub	objptr, ##35112
1c800     F2 FA 01 F6 | 	mov	result1, objptr
1c804     00 48 04 FF 
1c808     00 FA 45 F5 | 	or	result1, ##143654912
1c80c     44 00 00 FF 
1c810     5C E5 05 F1 | 	add	objptr, ##35164
1c814     F2 FA 61 FC | 	wrlong	result1, objptr
1c818     44 00 00 FF 
1c81c     5C E5 85 F1 | 	sub	objptr, ##35164
1c820     F2 FA 01 F6 | 	mov	result1, objptr
1c824     00 50 04 FF 
1c828     00 FA 45 F5 | 	or	result1, ##144703488
1c82c     44 00 00 FF 
1c830     54 E5 05 F1 | 	add	objptr, ##35156
1c834     F2 FA 61 FC | 	wrlong	result1, objptr
1c838     44 00 00 FF 
1c83c     54 E5 85 F1 | 	sub	objptr, ##35156
1c840     F2 FA 01 F6 | 	mov	result1, objptr
1c844     00 58 04 FF 
1c848     00 FA 45 F5 | 	or	result1, ##145752064
1c84c     44 00 00 FF 
1c850     2C E5 05 F1 | 	add	objptr, ##35116
1c854     F2 FA 61 FC | 	wrlong	result1, objptr
1c858     44 00 00 FF 
1c85c     2C E5 85 F1 | 	sub	objptr, ##35116
1c860     F2 FA 01 F6 | 	mov	result1, objptr
1c864     00 60 04 FF 
1c868     00 FA 45 F5 | 	or	result1, ##146800640
1c86c     44 00 00 FF 
1c870     30 E5 05 F1 | 	add	objptr, ##35120
1c874     F2 FA 61 FC | 	wrlong	result1, objptr
1c878     44 00 00 FF 
1c87c     30 E5 85 F1 | 	sub	objptr, ##35120
1c880     F2 FA 01 F6 | 	mov	result1, objptr
1c884     00 68 04 FF 
1c888     00 FA 45 F5 | 	or	result1, ##147849216
1c88c     44 00 00 FF 
1c890     4C E5 05 F1 | 	add	objptr, ##35148
1c894     F2 FA 61 FC | 	wrlong	result1, objptr
1c898     44 00 00 FF 
1c89c     4C E5 85 F1 | 	sub	objptr, ##35148
1c8a0     F2 FA 01 F6 | 	mov	result1, objptr
1c8a4     00 70 04 FF 
1c8a8     00 FA 45 F5 | 	or	result1, ##148897792
1c8ac     44 00 00 FF 
1c8b0     50 E5 05 F1 | 	add	objptr, ##35152
1c8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8b8     44 00 00 FF 
1c8bc     50 E5 85 F1 | 	sub	objptr, ##35152
1c8c0                 | _init_commands_ret
1c8c0     2D 00 64 FD | 	ret
1c8c4                 | 
1c8c4                 | ' 
1c8c4                 | ' ''--------------------------------Error strings -------------------------------------
1c8c4                 | ' sub init_audio
1c8c4                 | _init_audio
1c8c4     06 4A 05 F6 | 	mov	COUNT_, #6
1c8c8     A8 00 A0 FD | 	call	#pushregs_
1c8cc     00 C0 1F FF 
1c8d0     00 1E 06 F6 | 	mov	local01, ##1065353216
1c8d4                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c8d4                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c8d4                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c8d4                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c8d4                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c8d4                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c8d4                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c8d4                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c8d4                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c8d4     00 20 06 F6 | 	mov	local02, #0
1c8d8                 | LR__2320
1c8d8     10 23 02 F6 | 	mov	local03, local02
1c8dc     01 22 66 F0 | 	shl	local03, #1
1c8e0     58 7F 23 FF 
1c8e4     00 24 06 F6 | 	mov	local04, ##1191096320
1c8e8     10 13 52 F6 | 	abs	arg01, local02 wc
1c8ec     1F 26 C6 C9 |  if_b	decod	local05, #31
1c8f0     00 26 06 36 |  if_ae	mov	local05, #0
1c8f4     54 69 B0 FD | 	call	#__system___float_fromuns
1c8f8     13 FB 61 F5 | 	xor	result1, local05
1c8fc     FD 12 02 F6 | 	mov	arg01, result1
1c900     87 24 20 FF 
1c904     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c908     44 6D B0 FD | 	call	#__system___float_mul
1c90c     FD 12 02 F6 | 	mov	arg01, result1
1c910     00 00 22 FF 
1c914     00 14 06 F6 | 	mov	arg02, ##1140850688
1c918     38 6F B0 FD | 	call	#__system___float_div
1c91c     FD 12 02 F6 | 	mov	arg01, result1
1c920     68 76 B0 FD | 	call	#__system____builtin_sinf
1c924     FD 14 02 F6 | 	mov	arg02, result1
1c928     12 13 02 F6 | 	mov	arg01, local04
1c92c     20 6D B0 FD | 	call	#__system___float_mul
1c930     FD 12 02 F6 | 	mov	arg01, result1
1c934     01 14 06 F6 | 	mov	arg02, #1
1c938     DC 71 B0 FD | 	call	#__system___float_tointeger
1c93c     FD 14 02 F6 | 	mov	arg02, result1
1c940     11 13 02 F6 | 	mov	arg01, local03
1c944     68 0D B0 FD | 	call	#_psdpoke
1c948     01 20 06 F1 | 	add	local02, #1
1c94c     02 00 00 FF 
1c950     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c954     80 FF 9F CD |  if_b	jmp	#LR__2320
1c958                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c958     00 20 06 F6 | 	mov	local02, #0
1c95c                 | LR__2321
1c95c     10 15 02 F6 | 	mov	arg02, local02
1c960     01 14 66 F0 | 	shl	arg02, #1
1c964     0B 12 C6 F9 | 	decod	arg01, #11
1c968     0A 13 02 F1 | 	add	arg01, arg02
1c96c     10 25 02 F6 | 	mov	local04, local02
1c970     07 24 66 F0 | 	shl	local04, #7
1c974     10 25 82 F1 | 	sub	local04, local02
1c978     C0 FF 7F FF 
1c97c     00 15 06 F6 | 	mov	arg02, ##-32512
1c980     12 15 02 F1 | 	add	arg02, local04
1c984     28 0D B0 FD | 	call	#_psdpoke
1c988     09 24 C6 F9 | 	decod	local04, #9
1c98c     10 25 02 F1 | 	add	local04, local02
1c990     01 24 66 F0 | 	shl	local04, #1
1c994     0B 12 C6 F9 | 	decod	arg01, #11
1c998     12 13 02 F1 | 	add	arg01, local04
1c99c     10 27 02 F6 | 	mov	local05, local02
1c9a0     07 26 66 F0 | 	shl	local05, #7
1c9a4     10 27 82 F1 | 	sub	local05, local02
1c9a8     3F 00 00 FF 
1c9ac     00 15 06 F6 | 	mov	arg02, ##32512
1c9b0     13 15 82 F1 | 	sub	arg02, local05
1c9b4     F8 0C B0 FD | 	call	#_psdpoke
1c9b8     01 20 06 F1 | 	add	local02, #1
1c9bc     01 00 00 FF 
1c9c0     00 20 56 F2 | 	cmps	local02, ##512 wc
1c9c4     94 FF 9F CD |  if_b	jmp	#LR__2321
1c9c8                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c9c8     00 20 06 F6 | 	mov	local02, #0
1c9cc                 | LR__2322
1c9cc     10 27 02 F6 | 	mov	local05, local02
1c9d0     01 26 66 F0 | 	shl	local05, #1
1c9d4     0C 12 C6 F9 | 	decod	arg01, #12
1c9d8     13 13 02 F1 | 	add	arg01, local05
1c9dc     10 27 02 F6 | 	mov	local05, local02
1c9e0     06 26 66 F0 | 	shl	local05, #6
1c9e4     10 27 82 F1 | 	sub	local05, local02
1c9e8     C1 FF 7F FF 
1c9ec     00 14 06 F6 | 	mov	arg02, ##-32256
1c9f0     13 15 02 F1 | 	add	arg02, local05
1c9f4     B8 0C B0 FD | 	call	#_psdpoke
1c9f8     01 20 06 F1 | 	add	local02, #1
1c9fc     02 00 00 FF 
1ca00     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca04     C4 FF 9F CD |  if_b	jmp	#LR__2322
1ca08                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1ca08     00 20 06 F6 | 	mov	local02, #0
1ca0c                 | LR__2323
1ca0c     10 27 02 F6 | 	mov	local05, local02
1ca10     01 26 66 F0 | 	shl	local05, #1
1ca14     0C 00 00 FF 
1ca18     00 12 06 F6 | 	mov	arg01, ##6144
1ca1c     13 13 02 F1 | 	add	arg01, local05
1ca20     C0 FF 7F FF 
1ca24     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca28     84 0C B0 FD | 	call	#_psdpoke
1ca2c     01 20 06 F1 | 	add	local02, #1
1ca30     80 20 56 F2 | 	cmps	local02, #128 wc
1ca34     D4 FF 9F CD |  if_b	jmp	#LR__2323
1ca38     80 20 06 F6 | 	mov	local02, #128
1ca3c                 | LR__2324
1ca3c     10 27 02 F6 | 	mov	local05, local02
1ca40     01 26 66 F0 | 	shl	local05, #1
1ca44     0C 00 00 FF 
1ca48     00 12 06 F6 | 	mov	arg01, ##6144
1ca4c     13 13 02 F1 | 	add	arg01, local05
1ca50     3F 00 00 FF 
1ca54     58 15 06 F6 | 	mov	arg02, ##32600
1ca58     54 0C B0 FD | 	call	#_psdpoke
1ca5c     01 20 06 F1 | 	add	local02, #1
1ca60     02 00 00 FF 
1ca64     00 20 16 F2 | 	cmp	local02, ##1024 wc
1ca68     D0 FF 9F CD |  if_b	jmp	#LR__2324
1ca6c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1ca6c     00 20 06 F6 | 	mov	local02, #0
1ca70                 | LR__2325
1ca70     10 27 02 F6 | 	mov	local05, local02
1ca74     01 26 66 F0 | 	shl	local05, #1
1ca78     0D 12 C6 F9 | 	decod	arg01, #13
1ca7c     13 13 02 F1 | 	add	arg01, local05
1ca80     C0 FF 7F FF 
1ca84     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca88     24 0C B0 FD | 	call	#_psdpoke
1ca8c     01 20 06 F1 | 	add	local02, #1
1ca90     01 00 00 FF 
1ca94     00 20 56 F2 | 	cmps	local02, ##512 wc
1ca98     D4 FF 9F CD |  if_b	jmp	#LR__2325
1ca9c     09 20 C6 F9 | 	decod	local02, #9
1caa0                 | LR__2326
1caa0     10 27 02 F6 | 	mov	local05, local02
1caa4     01 26 66 F0 | 	shl	local05, #1
1caa8     0D 12 C6 F9 | 	decod	arg01, #13
1caac     13 13 02 F1 | 	add	arg01, local05
1cab0     3F 00 00 FF 
1cab4     58 15 06 F6 | 	mov	arg02, ##32600
1cab8     F4 0B B0 FD | 	call	#_psdpoke
1cabc     01 20 06 F1 | 	add	local02, #1
1cac0     02 00 00 FF 
1cac4     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cac8     D4 FF 9F CD |  if_b	jmp	#LR__2326
1cacc                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1cacc     00 20 06 F6 | 	mov	local02, #0
1cad0                 | LR__2327
1cad0     10 27 02 F6 | 	mov	local05, local02
1cad4     01 26 66 F0 | 	shl	local05, #1
1cad8     14 00 00 FF 
1cadc     00 12 06 F6 | 	mov	arg01, ##10240
1cae0     13 13 02 F1 | 	add	arg01, local05
1cae4     C0 FF 7F FF 
1cae8     A8 14 06 F6 | 	mov	arg02, ##-32600
1caec     C0 0B B0 FD | 	call	#_psdpoke
1caf0     01 20 06 F1 | 	add	local02, #1
1caf4     00 21 56 F2 | 	cmps	local02, #256 wc
1caf8     D4 FF 9F CD |  if_b	jmp	#LR__2327
1cafc     00 21 06 F6 | 	mov	local02, #256
1cb00                 | LR__2328
1cb00     10 27 02 F6 | 	mov	local05, local02
1cb04     01 26 66 F0 | 	shl	local05, #1
1cb08     14 00 00 FF 
1cb0c     00 12 06 F6 | 	mov	arg01, ##10240
1cb10     13 13 02 F1 | 	add	arg01, local05
1cb14     3F 00 00 FF 
1cb18     58 15 06 F6 | 	mov	arg02, ##32600
1cb1c     90 0B B0 FD | 	call	#_psdpoke
1cb20     01 20 06 F1 | 	add	local02, #1
1cb24     02 00 00 FF 
1cb28     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb2c     D0 FF 9F CD |  if_b	jmp	#LR__2328
1cb30                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1cb30     18 00 00 FF 
1cb34     00 20 06 F6 | 	mov	local02, ##12288
1cb38                 | LR__2329
1cb38     10 13 02 F6 | 	mov	arg01, local02
1cb3c     00 14 06 F6 | 	mov	arg02, #0
1cb40     24 0B B0 FD | 	call	#_pslpoke
1cb44     04 20 06 F1 | 	add	local02, #4
1cb48     77 00 00 FF 
1cb4c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1cb50     E4 FF 9F CD |  if_b	jmp	#LR__2329
1cb54                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1cb54     00 20 06 F6 | 	mov	local02, #0
1cb58                 | LR__2330
1cb58     10 27 02 F6 | 	mov	local05, local02
1cb5c     01 26 66 F0 | 	shl	local05, #1
1cb60     78 00 00 FF 
1cb64     00 22 06 F6 | 	mov	local03, ##61440
1cb68     13 23 02 F1 | 	add	local03, local05
1cb6c     14 00 00 FF 
1cb70     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1cb74     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cb78     14 00 00 FF 
1cb7c     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cb80     10 12 06 F1 | 	add	arg01, #16
1cb84     10 15 02 F6 | 	mov	arg02, local02
1cb88     01 14 66 F0 | 	shl	arg02, #1
1cb8c     0A 13 02 F1 | 	add	arg01, arg02
1cb90     09 15 E2 FA | 	rdword	arg02, arg01
1cb94     11 13 02 F6 | 	mov	arg01, local03
1cb98     14 0B B0 FD | 	call	#_psdpoke
1cb9c     01 20 06 F1 | 	add	local02, #1
1cba0     02 00 00 FF 
1cba4     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cba8     AC FF 9F CD |  if_b	jmp	#LR__2330
1cbac                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cbac     00 20 06 F6 | 	mov	local02, #0
1cbb0                 | LR__2331
1cbb0     10 27 02 F6 | 	mov	local05, local02
1cbb4     01 26 66 F0 | 	shl	local05, #1
1cbb8     7C 00 00 FF 
1cbbc     00 22 06 F6 | 	mov	local03, ##63488
1cbc0     13 23 02 F1 | 	add	local03, local05
1cbc4     10 00 00 FF 
1cbc8     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cbcc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cbd0     10 00 00 FF 
1cbd4     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cbd8     10 12 06 F1 | 	add	arg01, #16
1cbdc     10 15 02 F6 | 	mov	arg02, local02
1cbe0     01 14 66 F0 | 	shl	arg02, #1
1cbe4     0A 13 02 F1 | 	add	arg01, arg02
1cbe8     09 15 E2 FA | 	rdword	arg02, arg01
1cbec     11 13 02 F6 | 	mov	arg01, local03
1cbf0     BC 0A B0 FD | 	call	#_psdpoke
1cbf4     01 20 06 F1 | 	add	local02, #1
1cbf8     02 00 00 FF 
1cbfc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cc00     AC FF 9F CD |  if_b	jmp	#LR__2331
1cc04                 | ' 
1cc04                 | ' 
1cc04                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cc04     00 20 06 F6 | 	mov	local02, #0
1cc08     0C 00 00 FF 
1cc0c     D8 E4 05 F1 | 	add	objptr, ##6360
1cc10     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cc14                 | LR__2332
1cc14     10 27 02 F6 | 	mov	local05, local02
1cc18     01 26 66 F0 | 	shl	local05, #1
1cc1c     F2 26 02 F1 | 	add	local05, objptr
1cc20     10 23 02 F6 | 	mov	local03, local02
1cc24     08 22 66 F0 | 	shl	local03, #8
1cc28     7F 00 00 FF 
1cc2c     00 29 06 F6 | 	mov	local06, ##65280
1cc30     11 29 82 F1 | 	sub	local06, local03
1cc34     13 29 52 FC | 	wrword	local06, local05
1cc38     01 20 06 F1 | 	add	local02, #1
1cc3c     00 21 56 F2 | 	cmps	local02, #256 wc
1cc40     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cc44                 | LR__2333
1cc44     0C 00 00 FF 
1cc48     D8 E4 85 F1 | 	sub	objptr, ##6360
1cc4c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cc4c     00 20 06 F6 | 	mov	local02, #0
1cc50                 | LR__2334
1cc50     10 27 02 F6 | 	mov	local05, local02
1cc54     01 26 66 F0 | 	shl	local05, #1
1cc58     0D 00 00 FF 
1cc5c     D8 E4 05 F1 | 	add	objptr, ##6872
1cc60     F2 26 02 F1 | 	add	local05, objptr
1cc64     80 BF 23 FF 
1cc68     00 12 06 F6 | 	mov	arg01, ##1199505408
1cc6c     0F 15 02 F6 | 	mov	arg02, local01
1cc70     0D 00 00 FF 
1cc74     D8 E4 85 F1 | 	sub	objptr, ##6872
1cc78     D4 69 B0 FD | 	call	#__system___float_mul
1cc7c     FD 12 02 F6 | 	mov	arg01, result1
1cc80     01 14 06 F6 | 	mov	arg02, #1
1cc84     90 6E B0 FD | 	call	#__system___float_tointeger
1cc88     13 FB 51 FC | 	wrword	result1, local05
1cc8c     0F 13 02 F6 | 	mov	arg01, local01
1cc90     CC BC 1F FF 
1cc94     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cc98     B4 69 B0 FD | 	call	#__system___float_mul
1cc9c     FD 1E 02 F6 | 	mov	local01, result1
1cca0     01 20 06 F1 | 	add	local02, #1
1cca4     00 21 56 F2 | 	cmps	local02, #256 wc
1cca8     A4 FF 9F CD |  if_b	jmp	#LR__2334
1ccac     0E 00 00 FF 
1ccb0     D6 E4 05 F1 | 	add	objptr, ##7382
1ccb4     F2 00 58 FC | 	wrword	#0, objptr
1ccb8                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1ccb8     00 20 06 F6 | 	mov	local02, #0
1ccbc     02 E4 05 F1 | 	add	objptr, #2
1ccc0     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1ccc4                 | LR__2335
1ccc4     10 27 02 F6 | 	mov	local05, local02
1ccc8     01 26 66 F0 | 	shl	local05, #1
1cccc     F2 26 02 F1 | 	add	local05, objptr
1ccd0     7F 00 80 FF 
1ccd4     13 01 5A FC | 	wrword	##65280, local05
1ccd8     01 20 06 F1 | 	add	local02, #1
1ccdc     FF 20 56 F2 | 	cmps	local02, #255 wc
1cce0     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cce4                 | LR__2336
1cce4     FE E5 05 F1 | 	add	objptr, #510
1cce8     F2 00 58 FC | 	wrword	#0, objptr
1ccec                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1ccec     00 20 06 F6 | 	mov	local02, #0
1ccf0     02 E4 05 F1 | 	add	objptr, #2
1ccf4     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1ccf8                 | LR__2337
1ccf8     10 27 02 F6 | 	mov	local05, local02
1ccfc     01 26 66 F0 | 	shl	local05, #1
1cd00     F2 26 02 F1 | 	add	local05, objptr
1cd04     10 29 02 F6 | 	mov	local06, local02
1cd08     0C 28 66 F0 | 	shl	local06, #12
1cd0c     13 29 52 FC | 	wrword	local06, local05
1cd10     01 20 06 F1 | 	add	local02, #1
1cd14     10 20 56 F2 | 	cmps	local02, #16 wc
1cd18     DC FF 9F CD |  if_b	jmp	#LR__2337
1cd1c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cd1c     10 20 06 F6 | 	mov	local02, #16
1cd20                 | LR__2338
1cd20     10 27 02 F6 | 	mov	local05, local02
1cd24     01 26 66 F0 | 	shl	local05, #1
1cd28     F2 26 02 F1 | 	add	local05, objptr
1cd2c     7F 00 80 FF 
1cd30     13 01 5A FC | 	wrword	##65280, local05
1cd34     01 20 06 F1 | 	add	local02, #1
1cd38     F0 20 16 F2 | 	cmp	local02, #240 wc
1cd3c     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cd40                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cd40     F0 20 06 F6 | 	mov	local02, #240
1cd44                 | LR__2339
1cd44     10 27 02 F6 | 	mov	local05, local02
1cd48     01 26 66 F0 | 	shl	local05, #1
1cd4c     F2 26 02 F1 | 	add	local05, objptr
1cd50     FF 22 06 F6 | 	mov	local03, #255
1cd54     10 23 82 F1 | 	sub	local03, local02
1cd58     0C 22 66 F0 | 	shl	local03, #12
1cd5c     13 23 52 FC | 	wrword	local03, local05
1cd60     01 20 06 F1 | 	add	local02, #1
1cd64     00 21 16 F2 | 	cmp	local02, #256 wc
1cd68     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cd6c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cd6c     00 20 06 F6 | 	mov	local02, #0
1cd70     01 00 00 FF 
1cd74     00 E4 05 F1 | 	add	objptr, ##512
1cd78                 | LR__2340
1cd78     10 27 02 F6 | 	mov	local05, local02
1cd7c     01 26 66 F0 | 	shl	local05, #1
1cd80     F2 26 02 F1 | 	add	local05, objptr
1cd84     10 29 02 F6 | 	mov	local06, local02
1cd88     08 28 66 F0 | 	shl	local06, #8
1cd8c     13 29 52 FC | 	wrword	local06, local05
1cd90     01 20 06 F1 | 	add	local02, #1
1cd94     00 21 56 F2 | 	cmps	local02, #256 wc
1cd98     DC FF 9F CD |  if_b	jmp	#LR__2340
1cd9c                 | LR__2341
1cd9c     FE E5 05 F1 | 	add	objptr, #510
1cda0     F2 00 58 FC | 	wrword	#0, objptr
1cda4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cda4     00 20 06 F6 | 	mov	local02, #0
1cda8     02 E4 05 F1 | 	add	objptr, #2
1cdac     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cdb0                 | LR__2342
1cdb0     10 27 02 F6 | 	mov	local05, local02
1cdb4     01 26 66 F0 | 	shl	local05, #1
1cdb8     F2 26 02 F1 | 	add	local05, objptr
1cdbc     10 29 02 F6 | 	mov	local06, local02
1cdc0     04 28 66 F0 | 	shl	local06, #4
1cdc4     10 29 02 F1 | 	add	local06, local02
1cdc8     04 28 66 F0 | 	shl	local06, #4
1cdcc     13 29 52 FC | 	wrword	local06, local05
1cdd0     01 20 06 F1 | 	add	local02, #1
1cdd4     F0 20 56 F2 | 	cmps	local02, #240 wc
1cdd8     D4 FF 9F CD |  if_b	jmp	#LR__2342
1cddc     F0 20 06 F6 | 	mov	local02, #240
1cde0                 | LR__2343
1cde0     10 27 02 F6 | 	mov	local05, local02
1cde4     01 26 66 F0 | 	shl	local05, #1
1cde8     F2 26 02 F1 | 	add	local05, objptr
1cdec     FF 22 06 F6 | 	mov	local03, #255
1cdf0     10 23 82 F1 | 	sub	local03, local02
1cdf4     0C 22 66 F0 | 	shl	local03, #12
1cdf8     13 23 52 FC | 	wrword	local03, local05
1cdfc     01 20 06 F1 | 	add	local02, #1
1ce00     00 21 16 F2 | 	cmp	local02, #256 wc
1ce04     D8 FF 9F CD |  if_b	jmp	#LR__2343
1ce08                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ce08     00 20 06 F6 | 	mov	local02, #0
1ce0c     01 00 00 FF 
1ce10     00 E4 05 F1 | 	add	objptr, ##512
1ce14                 | LR__2344
1ce14     10 27 02 F6 | 	mov	local05, local02
1ce18     01 26 66 F0 | 	shl	local05, #1
1ce1c     F2 26 02 F1 | 	add	local05, objptr
1ce20     10 29 02 F6 | 	mov	local06, local02
1ce24     09 28 66 F0 | 	shl	local06, #9
1ce28     13 29 52 FC | 	wrword	local06, local05
1ce2c     FF 26 06 F6 | 	mov	local05, #255
1ce30     10 27 82 F1 | 	sub	local05, local02
1ce34     01 26 66 F0 | 	shl	local05, #1
1ce38     F2 26 02 F1 | 	add	local05, objptr
1ce3c     10 29 02 F6 | 	mov	local06, local02
1ce40     09 28 66 F0 | 	shl	local06, #9
1ce44     13 29 52 FC | 	wrword	local06, local05
1ce48     01 20 06 F1 | 	add	local02, #1
1ce4c     80 20 56 F2 | 	cmps	local02, #128 wc
1ce50     C0 FF 9F CD |  if_b	jmp	#LR__2344
1ce54                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1ce54     00 20 06 F6 | 	mov	local02, #0
1ce58     01 00 00 FF 
1ce5c     00 E4 05 F1 | 	add	objptr, ##512
1ce60                 | LR__2345
1ce60     10 27 02 F6 | 	mov	local05, local02
1ce64     01 26 66 F0 | 	shl	local05, #1
1ce68     F2 26 02 F1 | 	add	local05, objptr
1ce6c     10 29 02 F6 | 	mov	local06, local02
1ce70     0D 28 66 F0 | 	shl	local06, #13
1ce74     13 29 52 FC | 	wrword	local06, local05
1ce78     01 20 06 F1 | 	add	local02, #1
1ce7c     08 20 56 F2 | 	cmps	local02, #8 wc
1ce80     DC FF 9F CD |  if_b	jmp	#LR__2345
1ce84                 | LR__2346
1ce84                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1ce84     08 20 06 F6 | 	mov	local02, #8
1ce88     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1ce8c                 | LR__2347
1ce8c     10 27 02 F6 | 	mov	local05, local02
1ce90     01 26 66 F0 | 	shl	local05, #1
1ce94     F2 26 02 F1 | 	add	local05, objptr
1ce98     10 1F 02 F6 | 	mov	local01, local02
1ce9c     08 1E 86 F1 | 	sub	local01, #8
1cea0     0B 1E 66 F0 | 	shl	local01, #11
1cea4     7F 00 00 FF 
1cea8     00 29 06 F6 | 	mov	local06, ##65280
1ceac     0F 29 82 F1 | 	sub	local06, local01
1ceb0     13 29 52 FC | 	wrword	local06, local05
1ceb4     01 20 06 F1 | 	add	local02, #1
1ceb8     18 20 16 F2 | 	cmp	local02, #24 wc
1cebc     CC FF 9F CD |  if_b	jmp	#LR__2347
1cec0                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cec0     18 20 06 F6 | 	mov	local02, #24
1cec4                 | LR__2348
1cec4     10 27 02 F6 | 	mov	local05, local02
1cec8     01 26 66 F0 | 	shl	local05, #1
1cecc     F2 26 02 F1 | 	add	local05, objptr
1ced0     40 00 80 FF 
1ced4     13 01 58 FC | 	wrword	##32768, local05
1ced8     01 20 06 F1 | 	add	local02, #1
1cedc     81 20 16 F2 | 	cmp	local02, #129 wc
1cee0     E0 FF 9F CD |  if_b	jmp	#LR__2348
1cee4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cee4     81 20 06 F6 | 	mov	local02, #129
1cee8                 | LR__2349
1cee8     10 27 02 F6 | 	mov	local05, local02
1ceec     01 26 66 F0 | 	shl	local05, #1
1cef0     F2 26 02 F1 | 	add	local05, objptr
1cef4     FF 22 06 F6 | 	mov	local03, #255
1cef8     10 23 82 F1 | 	sub	local03, local02
1cefc     08 22 66 F0 | 	shl	local03, #8
1cf00     13 23 52 FC | 	wrword	local03, local05
1cf04     01 20 06 F1 | 	add	local02, #1
1cf08     00 21 16 F2 | 	cmp	local02, #256 wc
1cf0c     D8 FF 9F CD |  if_b	jmp	#LR__2349
1cf10                 | LR__2350
1cf10     3E 00 00 FF 
1cf14     FA E4 05 F1 | 	add	objptr, ##31994
1cf18     F2 00 59 FC | 	wrword	#128, objptr
1cf1c     51 00 00 FF 
1cf20     D2 E5 85 F1 | 	sub	objptr, ##41938
1cf24                 | ' for i=0 to 7
1cf24     00 20 06 F6 | 	mov	local02, #0
1cf28     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1cf2c                 | LR__2351
1cf2c     10 27 02 F6 | 	mov	local05, local02
1cf30     01 26 66 F0 | 	shl	local05, #1
1cf34     10 27 02 F1 | 	add	local05, local02
1cf38     03 26 66 F0 | 	shl	local05, #3
1cf3c     14 00 00 FF 
1cf40     38 E5 05 F1 | 	add	objptr, ##10552
1cf44     F2 26 02 F1 | 	add	local05, objptr
1cf48     00 EE A1 FF 
1cf4c     13 01 68 FC | 	wrlong	##1138491392, local05
1cf50     10 27 02 F6 | 	mov	local05, local02
1cf54     01 26 66 F0 | 	shl	local05, #1
1cf58     10 27 02 F1 | 	add	local05, local02
1cf5c     03 26 66 F0 | 	shl	local05, #3
1cf60     F2 26 02 F1 | 	add	local05, objptr
1cf64     04 26 06 F1 | 	add	local05, #4
1cf68     13 21 42 FC | 	wrbyte	local02, local05
1cf6c     10 27 02 F6 | 	mov	local05, local02
1cf70     01 26 66 F0 | 	shl	local05, #1
1cf74     10 27 02 F1 | 	add	local05, local02
1cf78     03 26 66 F0 | 	shl	local05, #3
1cf7c     F2 26 02 F1 | 	add	local05, objptr
1cf80     05 26 06 F1 | 	add	local05, #5
1cf84     13 21 42 FC | 	wrbyte	local02, local05
1cf88     10 27 02 F6 | 	mov	local05, local02
1cf8c     01 26 66 F0 | 	shl	local05, #1
1cf90     10 27 02 F1 | 	add	local05, local02
1cf94     03 26 66 F0 | 	shl	local05, #3
1cf98     F2 26 02 F1 | 	add	local05, objptr
1cf9c     06 26 06 F1 | 	add	local05, #6
1cfa0     13 01 58 FC | 	wrword	#0, local05
1cfa4     10 27 02 F6 | 	mov	local05, local02
1cfa8     01 26 66 F0 | 	shl	local05, #1
1cfac     10 27 02 F1 | 	add	local05, local02
1cfb0     03 26 66 F0 | 	shl	local05, #3
1cfb4     F2 26 02 F1 | 	add	local05, objptr
1cfb8     08 26 06 F1 | 	add	local05, #8
1cfbc     00 C0 9F FF 
1cfc0     13 01 68 FC | 	wrlong	##1065353216, local05
1cfc4     10 27 02 F6 | 	mov	local05, local02
1cfc8     01 26 66 F0 | 	shl	local05, #1
1cfcc     10 27 02 F1 | 	add	local05, local02
1cfd0     03 26 66 F0 | 	shl	local05, #3
1cfd4     F2 26 02 F1 | 	add	local05, objptr
1cfd8     0C 26 06 F1 | 	add	local05, #12
1cfdc     00 40 A0 FF 
1cfe0     13 01 68 FC | 	wrlong	##1082130432, local05
1cfe4     10 27 02 F6 | 	mov	local05, local02
1cfe8     01 26 66 F0 | 	shl	local05, #1
1cfec     10 27 02 F1 | 	add	local05, local02
1cff0     03 26 66 F0 | 	shl	local05, #3
1cff4     F2 26 02 F1 | 	add	local05, objptr
1cff8     10 26 06 F1 | 	add	local05, #16
1cffc     13 01 68 FC | 	wrlong	#0, local05
1d000     10 27 02 F6 | 	mov	local05, local02
1d004     01 26 66 F0 | 	shl	local05, #1
1d008     10 27 02 F1 | 	add	local05, local02
1d00c     03 26 66 F0 | 	shl	local05, #3
1d010     F2 26 02 F1 | 	add	local05, objptr
1d014     14 26 06 F1 | 	add	local05, #20
1d018     13 FF 59 FC | 	wrword	#255, local05
1d01c     10 27 02 F6 | 	mov	local05, local02
1d020     01 26 66 F0 | 	shl	local05, #1
1d024     3D 00 00 FF 
1d028     8C E4 05 F1 | 	add	objptr, ##31372
1d02c     F2 26 02 F1 | 	add	local05, objptr
1d030     13 FF 59 FC | 	wrword	#255, local05
1d034     01 20 06 F1 | 	add	local02, #1
1d038     08 20 56 F2 | 	cmps	local02, #8 wc
1d03c     51 00 00 FF 
1d040     C4 E5 85 F1 | 	sub	objptr, ##41924
1d044     E4 FE 9F CD |  if_b	jmp	#LR__2351
1d048                 | LR__2352
1d048     00 6E 20 FF 
1d04c     00 28 06 F6 | 	mov	local06, ##1088159744
1d050                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1d050     03 26 06 F6 | 	mov	local05, #3
1d054                 | LR__2353
1d054     14 13 02 F6 | 	mov	arg01, local06
1d058     CE C3 1F FF 
1d05c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d060     EC 65 B0 FD | 	call	#__system___float_mul
1d064     FD 28 02 F6 | 	mov	local06, result1
1d068     FA 27 6E FB | 	djnz	local05, #LR__2353
1d06c     00 20 06 F6 | 	mov	local02, #0
1d070                 | LR__2354
1d070     10 25 02 F6 | 	mov	local04, local02
1d074     02 24 66 F0 | 	shl	local04, #2
1d078     14 00 00 FF 
1d07c     D8 E4 05 F1 | 	add	objptr, ##10456
1d080     F2 24 02 F1 | 	add	local04, objptr
1d084     12 29 62 FC | 	wrlong	local06, local04
1d088     14 13 02 F6 | 	mov	arg01, local06
1d08c     CE C3 1F FF 
1d090     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d094     14 00 00 FF 
1d098     D8 E4 85 F1 | 	sub	objptr, ##10456
1d09c     B0 65 B0 FD | 	call	#__system___float_mul
1d0a0     FD 28 02 F6 | 	mov	local06, result1
1d0a4     01 20 06 F1 | 	add	local02, #1
1d0a8     0C 20 56 F2 | 	cmps	local02, #12 wc
1d0ac     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d0b0     14 00 00 FF 
1d0b4     08 E5 05 F1 | 	add	objptr, ##10504
1d0b8     F2 50 6B FC | 	wrlong	#424, objptr
1d0bc     04 E4 05 F1 | 	add	objptr, #4
1d0c0     F2 20 6B FC | 	wrlong	#400, objptr
1d0c4     04 E4 05 F1 | 	add	objptr, #4
1d0c8     F2 F2 6A FC | 	wrlong	#377, objptr
1d0cc     04 E4 05 F1 | 	add	objptr, #4
1d0d0     F2 C8 6A FC | 	wrlong	#356, objptr
1d0d4     04 E4 05 F1 | 	add	objptr, #4
1d0d8     F2 A0 6A FC | 	wrlong	#336, objptr
1d0dc     04 E4 05 F1 | 	add	objptr, #4
1d0e0     F2 7A 6A FC | 	wrlong	#317, objptr
1d0e4     04 E4 05 F1 | 	add	objptr, #4
1d0e8     F2 58 6A FC | 	wrlong	#300, objptr
1d0ec     04 E4 05 F1 | 	add	objptr, #4
1d0f0     F2 36 6A FC | 	wrlong	#283, objptr
1d0f4     04 E4 05 F1 | 	add	objptr, #4
1d0f8     F2 16 6A FC | 	wrlong	#267, objptr
1d0fc     04 E4 05 F1 | 	add	objptr, #4
1d100     F2 F8 69 FC | 	wrlong	#252, objptr
1d104     04 E4 05 F1 | 	add	objptr, #4
1d108     F2 DC 69 FC | 	wrlong	#238, objptr
1d10c     04 E4 05 F1 | 	add	objptr, #4
1d110     F2 C0 69 FC | 	wrlong	#224, objptr
1d114     3D 00 00 FF 
1d118     9E E4 05 F1 | 	add	objptr, ##31390
1d11c     F2 00 59 FC | 	wrword	#128, objptr
1d120     02 E4 85 F1 | 	sub	objptr, #2
1d124     F2 00 59 FC | 	wrword	#128, objptr
1d128     51 00 00 FF 
1d12c     D0 E5 85 F1 | 	sub	objptr, ##41936
1d130     A7 F0 03 F6 | 	mov	ptra, fp
1d134     B2 00 A0 FD | 	call	#popregs_
1d138                 | _init_audio_ret
1d138     2D 00 64 FD | 	ret
1d13c                 | 
1d13c                 | ' 
1d13c                 | ' 
1d13c                 | ' function getnoteval(token) as single
1d13c                 | _getnoteval
1d13c     02 4A 05 F6 | 	mov	COUNT_, #2
1d140     A8 00 A0 FD | 	call	#pushregs_
1d144     01 00 00 FF 
1d148     00 13 86 F1 | 	sub	arg01, ##768
1d14c     09 15 52 F6 | 	abs	arg02, arg01 wc
1d150     0C 14 16 FD | 	qdiv	arg02, #12
1d154     14 00 00 FF 
1d158     D8 E4 05 F1 | 	add	objptr, ##10456
1d15c     19 14 62 FD | 	getqy	arg02
1d160     0A 15 82 F6 | 	negc	arg02, arg02
1d164     02 14 66 F0 | 	shl	arg02, #2
1d168     F2 14 02 F1 | 	add	arg02, objptr
1d16c     0A 1F 02 FB | 	rdlong	local01, arg02
1d170     09 15 52 F6 | 	abs	arg02, arg01 wc
1d174     0C 14 16 FD | 	qdiv	arg02, #12
1d178     14 00 00 FF 
1d17c     D8 E4 85 F1 | 	sub	objptr, ##10456
1d180     01 12 06 F6 | 	mov	arg01, #1
1d184                 | ' noteexp=1+(note/12) 
1d184                 | ' return (2.0^noteexp)*notebase
1d184     18 14 62 FD | 	getqx	arg02
1d188     0A 13 82 F3 | 	sumc	arg01, arg02
1d18c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d190     1F 20 C6 C9 |  if_b	decod	local02, #31
1d194     00 20 06 36 |  if_ae	mov	local02, #0
1d198     B0 60 B0 FD | 	call	#__system___float_fromuns
1d19c     10 FB 61 F5 | 	xor	result1, local02
1d1a0     FD 14 02 F6 | 	mov	arg02, result1
1d1a4     1E 12 C6 F9 | 	decod	arg01, #30
1d1a8     88 73 B0 FD | 	call	#__system____builtin_powf
1d1ac     FD 12 02 F6 | 	mov	arg01, result1
1d1b0     0F 15 02 F6 | 	mov	arg02, local01
1d1b4     98 64 B0 FD | 	call	#__system___float_mul
1d1b8     A7 F0 03 F6 | 	mov	ptra, fp
1d1bc     B2 00 A0 FD | 	call	#popregs_
1d1c0                 | _getnoteval_ret
1d1c0     2D 00 64 FD | 	ret
1d1c4                 | 
1d1c4                 | ' 
1d1c4                 | ' 
1d1c4                 | ' 
1d1c4                 | ' sub init_error_strings
1d1c4                 | _init_error_strings
1d1c4     86 01 00 FF 
1d1c8     23 00 06 F6 | 	mov	_var01, ##@LR__5523
1d1cc     45 00 00 FF 
1d1d0     7C E4 05 F1 | 	add	objptr, ##35452
1d1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d8     86 01 00 FF 
1d1dc     24 00 06 F6 | 	mov	_var01, ##@LR__5524
1d1e0     04 E4 05 F1 | 	add	objptr, #4
1d1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e8     86 01 00 FF 
1d1ec     49 00 06 F6 | 	mov	_var01, ##@LR__5525
1d1f0     04 E4 05 F1 | 	add	objptr, #4
1d1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f8     86 01 00 FF 
1d1fc     6A 00 06 F6 | 	mov	_var01, ##@LR__5526
1d200     04 E4 05 F1 | 	add	objptr, #4
1d204     F2 00 62 FC | 	wrlong	_var01, objptr
1d208     86 01 00 FF 
1d20c     84 00 06 F6 | 	mov	_var01, ##@LR__5527
1d210     04 E4 05 F1 | 	add	objptr, #4
1d214     F2 00 62 FC | 	wrlong	_var01, objptr
1d218     86 01 00 FF 
1d21c     A0 00 06 F6 | 	mov	_var01, ##@LR__5528
1d220     04 E4 05 F1 | 	add	objptr, #4
1d224     F2 00 62 FC | 	wrlong	_var01, objptr
1d228     86 01 00 FF 
1d22c     C2 00 06 F6 | 	mov	_var01, ##@LR__5529
1d230     04 E4 05 F1 | 	add	objptr, #4
1d234     F2 00 62 FC | 	wrlong	_var01, objptr
1d238     86 01 00 FF 
1d23c     F0 00 06 F6 | 	mov	_var01, ##@LR__5530
1d240     04 E4 05 F1 | 	add	objptr, #4
1d244     F2 00 62 FC | 	wrlong	_var01, objptr
1d248     86 01 00 FF 
1d24c     1B 01 06 F6 | 	mov	_var01, ##@LR__5531
1d250     04 E4 05 F1 | 	add	objptr, #4
1d254     F2 00 62 FC | 	wrlong	_var01, objptr
1d258     86 01 00 FF 
1d25c     34 01 06 F6 | 	mov	_var01, ##@LR__5532
1d260     04 E4 05 F1 | 	add	objptr, #4
1d264     F2 00 62 FC | 	wrlong	_var01, objptr
1d268     86 01 00 FF 
1d26c     55 01 06 F6 | 	mov	_var01, ##@LR__5533
1d270     04 E4 05 F1 | 	add	objptr, #4
1d274     F2 00 62 FC | 	wrlong	_var01, objptr
1d278     86 01 00 FF 
1d27c     6C 01 06 F6 | 	mov	_var01, ##@LR__5534
1d280     04 E4 05 F1 | 	add	objptr, #4
1d284     F2 00 62 FC | 	wrlong	_var01, objptr
1d288     86 01 00 FF 
1d28c     8A 01 06 F6 | 	mov	_var01, ##@LR__5535
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     86 01 00 FF 
1d29c     AE 01 06 F6 | 	mov	_var01, ##@LR__5536
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     86 01 00 FF 
1d2ac     D5 01 06 F6 | 	mov	_var01, ##@LR__5537
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b8     86 01 00 FF 
1d2bc     F1 01 06 F6 | 	mov	_var01, ##@LR__5538
1d2c0     04 E4 05 F1 | 	add	objptr, #4
1d2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c8     87 01 00 FF 
1d2cc     02 00 06 F6 | 	mov	_var01, ##@LR__5539
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d8     87 01 00 FF 
1d2dc     12 00 06 F6 | 	mov	_var01, ##@LR__5540
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e8     87 01 00 FF 
1d2ec     2D 00 06 F6 | 	mov	_var01, ##@LR__5541
1d2f0     04 E4 05 F1 | 	add	objptr, #4
1d2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f8     87 01 00 FF 
1d2fc     3F 00 06 F6 | 	mov	_var01, ##@LR__5542
1d300     04 E4 05 F1 | 	add	objptr, #4
1d304     F2 00 62 FC | 	wrlong	_var01, objptr
1d308     87 01 00 FF 
1d30c     57 00 06 F6 | 	mov	_var01, ##@LR__5543
1d310     04 E4 05 F1 | 	add	objptr, #4
1d314     F2 00 62 FC | 	wrlong	_var01, objptr
1d318     87 01 00 FF 
1d31c     6B 00 06 F6 | 	mov	_var01, ##@LR__5544
1d320     04 E4 05 F1 | 	add	objptr, #4
1d324     F2 00 62 FC | 	wrlong	_var01, objptr
1d328     87 01 00 FF 
1d32c     7B 00 06 F6 | 	mov	_var01, ##@LR__5545
1d330     04 E4 05 F1 | 	add	objptr, #4
1d334     F2 00 62 FC | 	wrlong	_var01, objptr
1d338     87 01 00 FF 
1d33c     98 00 06 F6 | 	mov	_var01, ##@LR__5546
1d340     04 E4 05 F1 | 	add	objptr, #4
1d344     F2 00 62 FC | 	wrlong	_var01, objptr
1d348     87 01 00 FF 
1d34c     A9 00 06 F6 | 	mov	_var01, ##@LR__5547
1d350     04 E4 05 F1 | 	add	objptr, #4
1d354     F2 00 62 FC | 	wrlong	_var01, objptr
1d358     87 01 00 FF 
1d35c     BA 00 06 F6 | 	mov	_var01, ##@LR__5548
1d360     04 E4 05 F1 | 	add	objptr, #4
1d364     F2 00 62 FC | 	wrlong	_var01, objptr
1d368     87 01 00 FF 
1d36c     E5 00 06 F6 | 	mov	_var01, ##@LR__5549
1d370     04 E4 05 F1 | 	add	objptr, #4
1d374     F2 00 62 FC | 	wrlong	_var01, objptr
1d378     87 01 00 FF 
1d37c     01 01 06 F6 | 	mov	_var01, ##@LR__5550
1d380     04 E4 05 F1 | 	add	objptr, #4
1d384     F2 00 62 FC | 	wrlong	_var01, objptr
1d388     87 01 00 FF 
1d38c     17 01 06 F6 | 	mov	_var01, ##@LR__5551
1d390     04 E4 05 F1 | 	add	objptr, #4
1d394     F2 00 62 FC | 	wrlong	_var01, objptr
1d398     87 01 00 FF 
1d39c     24 01 06 F6 | 	mov	_var01, ##@LR__5552
1d3a0     04 E4 05 F1 | 	add	objptr, #4
1d3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a8     87 01 00 FF 
1d3ac     36 01 06 F6 | 	mov	_var01, ##@LR__5553
1d3b0     04 E4 05 F1 | 	add	objptr, #4
1d3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b8     87 01 00 FF 
1d3bc     47 01 06 F6 | 	mov	_var01, ##@LR__5554
1d3c0     04 E4 05 F1 | 	add	objptr, #4
1d3c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c8     87 01 00 FF 
1d3cc     63 01 06 F6 | 	mov	_var01, ##@LR__5555
1d3d0     04 E4 05 F1 | 	add	objptr, #4
1d3d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3d8     87 01 00 FF 
1d3dc     74 01 06 F6 | 	mov	_var01, ##@LR__5556
1d3e0     04 E4 05 F1 | 	add	objptr, #4
1d3e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3e8     87 01 00 FF 
1d3ec     83 01 06 F6 | 	mov	_var01, ##@LR__5557
1d3f0     04 E4 05 F1 | 	add	objptr, #4
1d3f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3f8     87 01 00 FF 
1d3fc     9E 01 06 F6 | 	mov	_var01, ##@LR__5558
1d400     04 E4 05 F1 | 	add	objptr, #4
1d404     F2 00 62 FC | 	wrlong	_var01, objptr
1d408     87 01 00 FF 
1d40c     D2 01 06 F6 | 	mov	_var01, ##@LR__5559
1d410     04 E4 05 F1 | 	add	objptr, #4
1d414     F2 00 62 FC | 	wrlong	_var01, objptr
1d418     87 01 00 FF 
1d41c     EB 01 06 F6 | 	mov	_var01, ##@LR__5560
1d420     04 E4 05 F1 | 	add	objptr, #4
1d424     F2 00 62 FC | 	wrlong	_var01, objptr
1d428     88 01 00 FF 
1d42c     07 00 06 F6 | 	mov	_var01, ##@LR__5561
1d430     04 E4 05 F1 | 	add	objptr, #4
1d434     F2 00 62 FC | 	wrlong	_var01, objptr
1d438     88 01 00 FF 
1d43c     25 00 06 F6 | 	mov	_var01, ##@LR__5562
1d440     04 E4 05 F1 | 	add	objptr, #4
1d444     F2 00 62 FC | 	wrlong	_var01, objptr
1d448     88 01 00 FF 
1d44c     3E 00 06 F6 | 	mov	_var01, ##@LR__5563
1d450     04 E4 05 F1 | 	add	objptr, #4
1d454     F2 00 62 FC | 	wrlong	_var01, objptr
1d458     88 01 00 FF 
1d45c     5D 00 06 F6 | 	mov	_var01, ##@LR__5564
1d460     04 E4 05 F1 | 	add	objptr, #4
1d464     F2 00 62 FC | 	wrlong	_var01, objptr
1d468     88 01 00 FF 
1d46c     6C 00 06 F6 | 	mov	_var01, ##@LR__5565
1d470     04 E4 05 F1 | 	add	objptr, #4
1d474     F2 00 62 FC | 	wrlong	_var01, objptr
1d478     88 01 00 FF 
1d47c     9A 00 06 F6 | 	mov	_var01, ##@LR__5566
1d480     04 E4 05 F1 | 	add	objptr, #4
1d484     F2 00 62 FC | 	wrlong	_var01, objptr
1d488     88 01 00 FF 
1d48c     A8 00 06 F6 | 	mov	_var01, ##@LR__5567
1d490     04 E4 05 F1 | 	add	objptr, #4
1d494     F2 00 62 FC | 	wrlong	_var01, objptr
1d498     88 01 00 FF 
1d49c     BD 00 06 F6 | 	mov	_var01, ##@LR__5568
1d4a0     04 E4 05 F1 | 	add	objptr, #4
1d4a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4a8     88 01 00 FF 
1d4ac     E1 00 06 F6 | 	mov	_var01, ##@LR__5569
1d4b0     04 E4 05 F1 | 	add	objptr, #4
1d4b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4b8     88 01 00 FF 
1d4bc     F8 00 06 F6 | 	mov	_var01, ##@LR__5570
1d4c0     04 E4 05 F1 | 	add	objptr, #4
1d4c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4c8     88 01 00 FF 
1d4cc     0B 01 06 F6 | 	mov	_var01, ##@LR__5571
1d4d0     04 E4 05 F1 | 	add	objptr, #4
1d4d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4d8     88 01 00 FF 
1d4dc     22 01 06 F6 | 	mov	_var01, ##@LR__5572
1d4e0     04 E4 05 F1 | 	add	objptr, #4
1d4e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4e8     88 01 00 FF 
1d4ec     3B 01 06 F6 | 	mov	_var01, ##@LR__5573
1d4f0     04 E4 05 F1 | 	add	objptr, #4
1d4f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4f8     45 00 00 FF 
1d4fc     44 E5 85 F1 | 	sub	objptr, ##35652
1d500                 | _init_error_strings_ret
1d500     2D 00 64 FD | 	ret
1d504                 | 
1d504                 | '         
1d504                 | ' sub printerror(err as integer)
1d504                 | _printerror
1d504     01 4A 05 F6 | 	mov	COUNT_, #1
1d508     A8 00 A0 FD | 	call	#pushregs_
1d50c     09 1F 02 F6 | 	mov	local01, arg01
1d510     88 01 00 FF 
1d514     5D 13 06 F6 | 	mov	arg01, ##@LR__5574
1d518     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d51c     0F 13 02 F6 | 	mov	arg01, local01
1d520     00 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1d524     FD 12 02 F6 | 	mov	arg01, result1
1d528     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d52c     88 01 00 FF 
1d530     64 13 06 F6 | 	mov	arg01, ##@LR__5575
1d534     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d538     02 1E 66 F0 | 	shl	local01, #2
1d53c     45 00 00 FF 
1d540     7C E4 05 F1 | 	add	objptr, ##35452
1d544     F2 1E 02 F1 | 	add	local01, objptr
1d548     0F 13 02 FB | 	rdlong	arg01, local01
1d54c     45 00 00 FF 
1d550     7C E4 85 F1 | 	sub	objptr, ##35452
1d554                 | ' 
1d554                 | ' write(text)
1d554     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d558                 | ' crlf
1d558     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d55c     A7 F0 03 F6 | 	mov	ptra, fp
1d560     B2 00 A0 FD | 	call	#popregs_
1d564                 | _printerror_ret
1d564     2D 00 64 FD | 	ret
1d568                 | 
1d568                 | ' 
1d568                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d568                 | ' 
1d568                 | ' sub startpsram
1d568                 | _startpsram
1d568     00 12 06 F6 | 	mov	arg01, #0
1d56c     0A 14 C6 F9 | 	decod	arg02, #10
1d570     0B 16 06 F6 | 	mov	arg03, #11
1d574     07 18 06 F6 | 	mov	arg04, #7
1d578     0B 00 00 FF 
1d57c     CC E4 05 F1 | 	add	objptr, ##5836
1d580     AC 26 B0 FD | 	call	#_psram_spin2_startx
1d584     2B 00 00 FF 
1d588     3C E5 05 F1 | 	add	objptr, ##22332
1d58c     F2 FA 61 FC | 	wrlong	result1, objptr
1d590                 | '     return $7FF00 + cog*12
1d590     0C E4 05 F1 | 	add	objptr, #12
1d594     FF 03 80 FF 
1d598     F2 00 6A FC | 	wrlong	##524032, objptr
1d59c     37 00 00 FF 
1d5a0     14 E4 85 F1 | 	sub	objptr, ##28180
1d5a4                 | _startpsram_ret
1d5a4     2D 00 64 FD | 	ret
1d5a8                 | 
1d5a8                 | ' 
1d5a8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d5a8                 | _startvideo
1d5a8     01 4A 05 F6 | 	mov	COUNT_, #1
1d5ac     A8 00 A0 FD | 	call	#pushregs_
1d5b0     37 00 00 FF 
1d5b4     14 E4 05 F1 | 	add	objptr, ##28180
1d5b8     F2 18 02 FB | 	rdlong	arg04, objptr
1d5bc     37 00 00 FF 
1d5c0     14 E4 85 F1 | 	sub	objptr, ##28180
1d5c4     0A 13 02 F6 | 	mov	arg01, arg02
1d5c8     0C 15 02 F6 | 	mov	arg02, arg04
1d5cc     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d5d0     37 00 00 FF 
1d5d4     00 E4 05 F1 | 	add	objptr, ##28160
1d5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d5dc                 | ' 
1d5dc                 | ' videocog=v.start(pin,mbox)
1d5dc                 | ' 
1d5dc                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d5dc     00 1E 06 F6 | 	mov	local01, #0
1d5e0     2B 00 00 FF 
1d5e4     34 E5 85 F1 | 	sub	objptr, ##22324
1d5e8                 | LR__2360
1d5e8     0F 13 02 F6 | 	mov	arg01, local01
1d5ec     00 28 00 FF 
1d5f0     00 14 06 F6 | 	mov	arg02, ##5242880
1d5f4     90 2A B0 FD | 	call	#_psram_spin2_setQos
1d5f8     01 1E 06 F1 | 	add	local01, #1
1d5fc     08 1E 56 F2 | 	cmps	local01, #8 wc
1d600     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d604     2B 00 00 FF 
1d608     34 E5 05 F1 | 	add	objptr, ##22324
1d60c     F2 12 02 FB | 	rdlong	arg01, objptr
1d610     7A 00 02 FF 
1d614     00 14 06 F6 | 	mov	arg02, ##67171328
1d618     2B 00 00 FF 
1d61c     34 E5 85 F1 | 	sub	objptr, ##22324
1d620     64 2A B0 FD | 	call	#_psram_spin2_setQos
1d624     0B 00 00 FF 
1d628     CC E4 85 F1 | 	sub	objptr, ##5836
1d62c                 | ' psram.setQoS(videocog, $0400f400) 
1d62c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d62c     F2 14 02 F6 | 	mov	arg02, objptr
1d630     00 78 04 FF 
1d634     00 14 46 F5 | 	or	arg02, ##149946368
1d638     00 16 06 F6 | 	mov	arg03, #0
1d63c     00 18 06 F6 | 	mov	arg04, #0
1d640     00 12 06 F6 | 	mov	arg01, #0
1d644     FC 3E B0 FD | 	call	#__system___basic_open
1d648                 | ' return videocog
1d648     37 00 00 FF 
1d64c     00 E4 05 F1 | 	add	objptr, ##28160
1d650     F2 FA 01 FB | 	rdlong	result1, objptr
1d654     37 00 00 FF 
1d658     00 E4 85 F1 | 	sub	objptr, ##28160
1d65c     A7 F0 03 F6 | 	mov	ptra, fp
1d660     B2 00 A0 FD | 	call	#popregs_
1d664                 | _startvideo_ret
1d664     2D 00 64 FD | 	ret
1d668                 | 
1d668                 | ' 
1d668                 | ' 
1d668                 | ' 
1d668                 | ' 
1d668                 | ' '' ------------------------------- Convenient psram peek/poke
1d668                 | ' 
1d668                 | ' sub pslpoke(addr as ulong,value as ulong)
1d668                 | _pslpoke
1d668     00 4A 05 F6 | 	mov	COUNT_, #0
1d66c     A8 00 A0 FD | 	call	#pushregs_
1d670     08 F0 07 F1 | 	add	ptra, #8
1d674     A7 12 62 FC | 	wrlong	arg01, fp
1d678     04 4E 05 F1 | 	add	fp, #4
1d67c     A7 14 62 FC | 	wrlong	arg02, fp
1d680     A7 12 02 F6 | 	mov	arg01, fp
1d684     04 4E 85 F1 | 	sub	fp, #4
1d688     A7 14 02 FB | 	rdlong	arg02, fp
1d68c     04 16 06 F6 | 	mov	arg03, #4
1d690     0B 00 00 FF 
1d694     CC E4 05 F1 | 	add	objptr, ##5836
1d698     5C 28 B0 FD | 	call	#_psram_spin2_write
1d69c     0B 00 00 FF 
1d6a0     CC E4 85 F1 | 	sub	objptr, ##5836
1d6a4     A7 F0 03 F6 | 	mov	ptra, fp
1d6a8     B2 00 A0 FD | 	call	#popregs_
1d6ac                 | _pslpoke_ret
1d6ac     2D 00 64 FD | 	ret
1d6b0                 | 
1d6b0                 | ' 
1d6b0                 | ' sub psdpoke(addr as ulong,value as ulong)
1d6b0                 | _psdpoke
1d6b0     00 4A 05 F6 | 	mov	COUNT_, #0
1d6b4     A8 00 A0 FD | 	call	#pushregs_
1d6b8     08 F0 07 F1 | 	add	ptra, #8
1d6bc     A7 12 62 FC | 	wrlong	arg01, fp
1d6c0     04 4E 05 F1 | 	add	fp, #4
1d6c4     A7 14 62 FC | 	wrlong	arg02, fp
1d6c8     A7 12 02 F6 | 	mov	arg01, fp
1d6cc     04 4E 85 F1 | 	sub	fp, #4
1d6d0     A7 14 02 FB | 	rdlong	arg02, fp
1d6d4     02 16 06 F6 | 	mov	arg03, #2
1d6d8     0B 00 00 FF 
1d6dc     CC E4 05 F1 | 	add	objptr, ##5836
1d6e0     14 28 B0 FD | 	call	#_psram_spin2_write
1d6e4     0B 00 00 FF 
1d6e8     CC E4 85 F1 | 	sub	objptr, ##5836
1d6ec     A7 F0 03 F6 | 	mov	ptra, fp
1d6f0     B2 00 A0 FD | 	call	#popregs_
1d6f4                 | _psdpoke_ret
1d6f4     2D 00 64 FD | 	ret
1d6f8                 | 
1d6f8                 | ' 
1d6f8                 | ' sub pspoke(addr as ulong,value as ulong)
1d6f8                 | _pspoke
1d6f8     00 4A 05 F6 | 	mov	COUNT_, #0
1d6fc     A8 00 A0 FD | 	call	#pushregs_
1d700     08 F0 07 F1 | 	add	ptra, #8
1d704     A7 12 62 FC | 	wrlong	arg01, fp
1d708     04 4E 05 F1 | 	add	fp, #4
1d70c     A7 14 62 FC | 	wrlong	arg02, fp
1d710     A7 12 02 F6 | 	mov	arg01, fp
1d714     04 4E 85 F1 | 	sub	fp, #4
1d718     A7 14 02 FB | 	rdlong	arg02, fp
1d71c     01 16 06 F6 | 	mov	arg03, #1
1d720     0B 00 00 FF 
1d724     CC E4 05 F1 | 	add	objptr, ##5836
1d728     CC 27 B0 FD | 	call	#_psram_spin2_write
1d72c     0B 00 00 FF 
1d730     CC E4 85 F1 | 	sub	objptr, ##5836
1d734     A7 F0 03 F6 | 	mov	ptra, fp
1d738     B2 00 A0 FD | 	call	#popregs_
1d73c                 | _pspoke_ret
1d73c     2D 00 64 FD | 	ret
1d740                 | 
1d740                 | ' 
1d740                 | ' function pspeek(adr as ulong) as ubyte
1d740                 | _pspeek
1d740     00 4A 05 F6 | 	mov	COUNT_, #0
1d744     A8 00 A0 FD | 	call	#pushregs_
1d748     0C F0 07 F1 | 	add	ptra, #12
1d74c     04 4E 05 F1 | 	add	fp, #4
1d750     A7 12 62 FC | 	wrlong	arg01, fp
1d754     04 4E 05 F1 | 	add	fp, #4
1d758     A7 12 02 F6 | 	mov	arg01, fp
1d75c     04 4E 85 F1 | 	sub	fp, #4
1d760     A7 14 02 FB | 	rdlong	arg02, fp
1d764     04 4E 85 F1 | 	sub	fp, #4
1d768     01 16 06 F6 | 	mov	arg03, #1
1d76c     0B 00 00 FF 
1d770     CC E4 05 F1 | 	add	objptr, ##5836
1d774     E4 26 B0 FD | 	call	#_psram_spin2_read1
1d778     0B 00 00 FF 
1d77c     CC E4 85 F1 | 	sub	objptr, ##5836
1d780                 | ' psram.read1(varptr(res),adr,1)
1d780                 | ' return res
1d780     08 4E 05 F1 | 	add	fp, #8
1d784     A7 FA C1 FA | 	rdbyte	result1, fp
1d788     08 4E 85 F1 | 	sub	fp, #8
1d78c     A7 F0 03 F6 | 	mov	ptra, fp
1d790     B2 00 A0 FD | 	call	#popregs_
1d794                 | _pspeek_ret
1d794     2D 00 64 FD | 	ret
1d798                 | 
1d798                 | ' 
1d798                 | ' function pslpeek(adr as ulong) as ulong
1d798                 | _pslpeek
1d798     00 4A 05 F6 | 	mov	COUNT_, #0
1d79c     A8 00 A0 FD | 	call	#pushregs_
1d7a0     0C F0 07 F1 | 	add	ptra, #12
1d7a4     04 4E 05 F1 | 	add	fp, #4
1d7a8     A7 12 62 FC | 	wrlong	arg01, fp
1d7ac     04 4E 05 F1 | 	add	fp, #4
1d7b0     A7 12 02 F6 | 	mov	arg01, fp
1d7b4     04 4E 85 F1 | 	sub	fp, #4
1d7b8     A7 14 02 FB | 	rdlong	arg02, fp
1d7bc     04 4E 85 F1 | 	sub	fp, #4
1d7c0     04 16 06 F6 | 	mov	arg03, #4
1d7c4     0B 00 00 FF 
1d7c8     CC E4 05 F1 | 	add	objptr, ##5836
1d7cc     8C 26 B0 FD | 	call	#_psram_spin2_read1
1d7d0     0B 00 00 FF 
1d7d4     CC E4 85 F1 | 	sub	objptr, ##5836
1d7d8                 | ' psram.read1(varptr(res),adr,4)
1d7d8                 | ' return res
1d7d8     08 4E 05 F1 | 	add	fp, #8
1d7dc     A7 FA 01 FB | 	rdlong	result1, fp
1d7e0     08 4E 85 F1 | 	sub	fp, #8
1d7e4     A7 F0 03 F6 | 	mov	ptra, fp
1d7e8     B2 00 A0 FD | 	call	#popregs_
1d7ec                 | _pslpeek_ret
1d7ec     2D 00 64 FD | 	ret
1d7f0                 | 
1d7f0                 | ' 
1d7f0                 | ' function psdpeek(adr as ulong) as ulong
1d7f0                 | _psdpeek
1d7f0     00 4A 05 F6 | 	mov	COUNT_, #0
1d7f4     A8 00 A0 FD | 	call	#pushregs_
1d7f8     0C F0 07 F1 | 	add	ptra, #12
1d7fc     04 4E 05 F1 | 	add	fp, #4
1d800     A7 12 62 FC | 	wrlong	arg01, fp
1d804     04 4E 05 F1 | 	add	fp, #4
1d808     A7 12 02 F6 | 	mov	arg01, fp
1d80c     04 4E 85 F1 | 	sub	fp, #4
1d810     A7 14 02 FB | 	rdlong	arg02, fp
1d814     04 4E 85 F1 | 	sub	fp, #4
1d818     02 16 06 F6 | 	mov	arg03, #2
1d81c     0B 00 00 FF 
1d820     CC E4 05 F1 | 	add	objptr, ##5836
1d824     34 26 B0 FD | 	call	#_psram_spin2_read1
1d828     0B 00 00 FF 
1d82c     CC E4 85 F1 | 	sub	objptr, ##5836
1d830                 | ' psram.read1(varptr(res),adr,2)
1d830                 | ' return res
1d830     08 4E 05 F1 | 	add	fp, #8
1d834     A7 FA E1 FA | 	rdword	result1, fp
1d838     08 4E 85 F1 | 	sub	fp, #8
1d83c     A7 F0 03 F6 | 	mov	ptra, fp
1d840     B2 00 A0 FD | 	call	#popregs_
1d844                 | _psdpeek_ret
1d844     2D 00 64 FD | 	ret
1d848                 | 
1d848                 | ' 
1d848                 | ' '' ------------------------------- USB keyboard scan to char translator
1d848                 | ' 
1d848                 | ' function scantochar(key)
1d848                 | _scantochar
1d848                 | ' 
1d848                 | ' select case (key shr 8) and 255
1d848     09 01 02 F6 | 	mov	_var01, arg01
1d84c     08 00 C6 F0 | 	sar	_var01, #8
1d850     FF 00 0E F5 | 	and	_var01, #255 wz
1d854     24 00 90 AD |  if_e	jmp	#LR__2370
1d858     02 00 0E F2 | 	cmp	_var01, #2 wz
1d85c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d860     30 00 90 AD |  if_e	jmp	#LR__2371
1d864     40 00 0E F2 | 	cmp	_var01, #64 wz
1d868     44 00 90 AD |  if_e	jmp	#LR__2372
1d86c     42 00 0E F2 | 	cmp	_var01, #66 wz
1d870     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d874     70 00 90 5D |  if_ne	jmp	#LR__2374
1d878     50 00 90 FD | 	jmp	#LR__2373
1d87c                 | LR__2370
1d87c     09 FB 01 F6 | 	mov	result1, arg01
1d880     7F FA 05 F5 | 	and	result1, #127
1d884     02 FA 65 F0 | 	shl	result1, #2
1d888     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d88c     FD FA C1 FA | 	rdbyte	result1, result1
1d890     54 00 90 FD | 	jmp	#_scantochar_ret
1d894                 | LR__2371
1d894     09 FB 01 F6 | 	mov	result1, arg01
1d898     7F FA 05 F5 | 	and	result1, #127
1d89c     02 FA 65 F0 | 	shl	result1, #2
1d8a0     01 FA 05 F1 | 	add	result1, #1
1d8a4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8a8     FD FA C1 FA | 	rdbyte	result1, result1
1d8ac     38 00 90 FD | 	jmp	#_scantochar_ret
1d8b0                 | LR__2372
1d8b0     09 FB 01 F6 | 	mov	result1, arg01
1d8b4     7F FA 05 F5 | 	and	result1, #127
1d8b8     02 FA 65 F0 | 	shl	result1, #2
1d8bc     02 FA 05 F1 | 	add	result1, #2
1d8c0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8c4     FD FA C1 FA | 	rdbyte	result1, result1
1d8c8     1C 00 90 FD | 	jmp	#_scantochar_ret
1d8cc                 | LR__2373
1d8cc     09 FB 01 F6 | 	mov	result1, arg01
1d8d0     7F FA 05 F5 | 	and	result1, #127
1d8d4     02 FA 65 F0 | 	shl	result1, #2
1d8d8     03 FA 05 F1 | 	add	result1, #3
1d8dc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8e0     FD FA C1 FA | 	rdbyte	result1, result1
1d8e4     00 00 90 FD | 	jmp	#_scantochar_ret
1d8e8                 | LR__2374
1d8e8                 | _scantochar_ret
1d8e8     2D 00 64 FD | 	ret
1d8ec                 | 
1d8ec                 | _program
1d8ec     01 4A 05 F6 | 	mov	COUNT_, #1
1d8f0     A8 00 A0 FD | 	call	#pushregs_
1d8f4     70 FC BF FD | 	call	#_startpsram
1d8f8     40 12 06 F6 | 	mov	arg01, #64
1d8fc     00 14 06 F6 | 	mov	arg02, #0
1d900     00 16 06 F6 | 	mov	arg03, #0
1d904     A0 FC BF FD | 	call	#_startvideo
1d908     37 00 00 FF 
1d90c     14 E4 05 F1 | 	add	objptr, ##28180
1d910     F2 12 02 FB | 	rdlong	arg01, objptr
1d914     00 14 06 F6 | 	mov	arg02, #0
1d918     FB 03 00 FF 
1d91c     00 17 06 F6 | 	mov	arg03, ##521984
1d920     2B 00 00 FF 
1d924     48 E5 85 F1 | 	sub	objptr, ##22344
1d928     0C 2B B0 FD | 	call	#_audio096_spin2_start
1d92c     FE 16 02 F6 | 	mov	arg03, result2
1d930     2B 00 00 FF 
1d934     30 E5 05 F1 | 	add	objptr, ##22320
1d938     F2 FA 61 FC | 	wrlong	result1, objptr
1d93c     14 E4 05 F1 | 	add	objptr, #20
1d940     F2 16 62 FC | 	wrlong	arg03, objptr
1d944     37 00 00 FF 
1d948     10 E4 85 F1 | 	sub	objptr, ##28176
1d94c     32 12 06 F6 | 	mov	arg01, #50
1d950     3C 34 B0 FD | 	call	#__system___waitms
1d954     37 00 00 FF 
1d958     10 E4 05 F1 | 	add	objptr, ##28176
1d95c     F2 12 02 FB | 	rdlong	arg01, objptr
1d960     37 00 00 FF 
1d964     10 E4 85 F1 | 	sub	objptr, ##28176
1d968     14 12 06 F1 | 	add	arg01, #20
1d96c     20 00 80 FF 
1d970     09 01 58 FC | 	wrword	##16384, arg01
1d974     18 28 B0 FD | 	call	#_usbnew_spin2_start
1d978     37 00 00 FF 
1d97c     04 E4 05 F1 | 	add	objptr, ##28164
1d980     F2 FA 61 FC | 	wrlong	result1, objptr
1d984                 | '   mouse_limits[0] := xlim
1d984     0F 00 00 FF 
1d988     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d98c     01 00 80 FF 
1d990     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d994                 | '   mouse_limits[1] := ylim
1d994     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d998     01 00 80 FF 
1d99c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d9a0     36 00 00 FF 
1d9a4     F3 E4 85 F1 | 	sub	objptr, ##27891
1d9a8     F2 12 02 F6 | 	mov	arg01, objptr
1d9ac     11 E5 85 F1 | 	sub	objptr, #273
1d9b0     C4 12 06 F1 | 	add	arg01, #196
1d9b4                 | '   mouse_outptr := ptr
1d9b4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d9b8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d9bc     0F 00 00 FF 
1d9c0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d9c4     0E 00 00 FF 
1d9c8     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1d9cc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d9d0     0E 00 00 FF 
1d9d4     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1d9d8     10 12 06 F6 | 	mov	arg01, #16
1d9dc     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d9e0     10 12 06 F6 | 	mov	arg01, #16
1d9e4     20 14 06 F6 | 	mov	arg02, #32
1d9e8     20 16 06 F6 | 	mov	arg03, #32
1d9ec     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d9f0     09 12 C6 F9 | 	decod	arg01, #9
1d9f4     2C 15 06 F6 | 	mov	arg02, #300
1d9f8     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d9fc     F2 16 02 F6 | 	mov	arg03, objptr
1da00     50 00 00 FF 
1da04     18 E5 05 F1 | 	add	objptr, ##41240
1da08     F2 14 02 F6 | 	mov	arg02, objptr
1da0c     0A 17 62 FC | 	wrlong	arg03, arg02
1da10     04 14 06 F1 | 	add	arg02, #4
1da14     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1da18     EF 14 02 F6 | 	mov	arg02, entryptr__
1da1c     1E FA 05 F6 | 	mov	result1, #30
1da20     28 E4 61 FD | 	setq	objptr
1da24     0A FB F1 FC | 	coginit	result1, arg02 wc
1da28     01 FA 65 C6 |  if_b	neg	result1, #1
1da2c     04 E4 85 F1 | 	sub	objptr, #4
1da30     F2 FA 61 FC | 	wrlong	result1, objptr
1da34     01 00 00 FF 
1da38     90 E4 05 F1 | 	add	objptr, ##656
1da3c     F2 00 68 FC | 	wrlong	#0, objptr
1da40     1A 00 00 FF 
1da44     70 E5 85 F1 | 	sub	objptr, ##13680
1da48     F2 04 68 FC | 	wrlong	#2, objptr
1da4c     04 E4 05 F1 | 	add	objptr, #4
1da50     F2 26 69 FC | 	wrlong	#147, objptr
1da54     04 E4 05 F1 | 	add	objptr, #4
1da58     F2 34 69 FC | 	wrlong	#154, objptr
1da5c     04 E4 05 F1 | 	add	objptr, #4
1da60     F2 08 68 FC | 	wrlong	#4, objptr
1da64     04 E4 85 F1 | 	sub	objptr, #4
1da68     F2 16 02 FB | 	rdlong	arg03, objptr
1da6c     14 E4 85 F1 | 	sub	objptr, #20
1da70     F2 16 62 FC | 	wrlong	arg03, objptr
1da74     04 E4 05 F1 | 	add	objptr, #4
1da78     F2 00 68 FC | 	wrlong	#0, objptr
1da7c     04 E4 05 F1 | 	add	objptr, #4
1da80     F2 00 68 FC | 	wrlong	#0, objptr
1da84     19 00 00 FF 
1da88     E0 E4 05 F1 | 	add	objptr, ##13024
1da8c     F2 02 68 FC | 	wrlong	#1, objptr
1da90     01 00 00 FF 
1da94     9C E4 05 F1 | 	add	objptr, ##668
1da98     F2 00 68 FC | 	wrlong	#0, objptr
1da9c     01 00 00 FF 
1daa0     00 EA 05 F1 | 	add	ptr__dat__, ##512
1daa4     08 E4 05 F1 | 	add	objptr, #8
1daa8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1daac     04 E4 85 F1 | 	sub	objptr, #4
1dab0     03 00 80 FF 
1dab4     F2 3C 69 FC | 	wrlong	##1694, objptr
1dab8     0C 00 00 FF 
1dabc     4C E5 85 F1 | 	sub	objptr, ##6476
1dac0     F2 18 68 FC | 	wrlong	#12, objptr
1dac4     45 00 00 FF 
1dac8     64 E4 85 F1 | 	sub	objptr, ##35428
1dacc     01 00 00 FF 
1dad0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1dad4     2C DB BF FD | 	call	#_init_commands
1dad8     E8 F6 BF FD | 	call	#_init_error_strings
1dadc     E4 ED BF FD | 	call	#_init_audio
1dae0     A0 22 BF FD | 	call	#_do_new
1dae4     37 00 00 FF 
1dae8     3C E4 05 F1 | 	add	objptr, ##28220
1daec     F2 12 02 FB | 	rdlong	arg01, objptr
1daf0     04 E4 85 F1 | 	sub	objptr, #4
1daf4     F2 14 02 FB | 	rdlong	arg02, objptr
1daf8     37 00 00 FF 
1dafc     38 E4 85 F1 | 	sub	objptr, ##28216
1db00     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1db04     37 00 00 FF 
1db08     40 E4 05 F1 | 	add	objptr, ##28224
1db0c     F2 12 02 FB | 	rdlong	arg01, objptr
1db10     37 00 00 FF 
1db14     40 E4 85 F1 | 	sub	objptr, ##28224
1db18     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1db1c                 | ' 
1db1c                 | ' leading_spaces:=amount
1db1c     01 00 00 FF 
1db20     B6 E4 05 F1 | 	add	objptr, ##694
1db24     F2 04 68 FC | 	wrlong	#2, objptr
1db28     01 00 00 FF 
1db2c     B6 E4 85 F1 | 	sub	objptr, ##694
1db30     88 01 00 FF 
1db34     67 1F 06 F6 | 	mov	local01, ##@LR__5576
1db38     3D 12 06 F6 | 	mov	arg01, #61
1db3c     3C 14 06 F6 | 	mov	arg02, #60
1db40     3B 16 06 F6 | 	mov	arg03, #59
1db44     3A 18 06 F6 | 	mov	arg04, #58
1db48     EC 79 B0 FD | 	call	#__system___vfs_open_sdcardx
1db4c     FD 14 02 F6 | 	mov	arg02, result1
1db50     0F 13 02 F6 | 	mov	arg01, local01
1db54     10 33 B0 FD | 	call	#__system___mount
1db58     88 01 00 FF 
1db5c     6B 13 06 F6 | 	mov	arg01, ##@LR__5577
1db60     C4 35 B0 FD | 	call	#__system___chdir
1db64     88 01 00 FF 
1db68     73 1F 06 F6 | 	mov	local01, ##@LR__5578
1db6c     4A 00 00 FF 
1db70     90 E4 05 F1 | 	add	objptr, ##38032
1db74     F2 1E 62 FC | 	wrlong	local01, objptr
1db78     13 00 00 FF 
1db7c     5C E4 85 F1 | 	sub	objptr, ##9820
1db80     F2 12 02 FB | 	rdlong	arg01, objptr
1db84     37 00 00 FF 
1db88     34 E4 85 F1 | 	sub	objptr, ##28212
1db8c     01 12 66 F0 | 	shl	arg01, #1
1db90     01 14 06 F6 | 	mov	arg02, #1
1db94     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1db98                 | ' init_commands
1db98                 | ' init_error_strings
1db98                 | ' init_audio
1db98                 | ' do_new
1db98                 | ' cls(ink, paper)
1db98                 | ' v.setfontfamily(font) 				' use ST Mono font
1db98                 | ' v.setleadingspaces(2)
1db98                 | ' mount "/sd", _vfs_open_sdcard()
1db98                 | ' chdir "/sd/bas"
1db98                 | ' currentdir$="/sd/bas"
1db98                 | ' position 2*editor_spaces,1 : print ver$
1db98     00 12 06 F6 | 	mov	arg01, #0
1db9c     3C 89 B0 FD | 	call	#__system___getiolock_0540
1dba0     FD 12 02 F6 | 	mov	arg01, result1
1dba4     F4 2E B0 FD | 	call	#__system___lockmem
1dba8     18 00 00 FF 
1dbac     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1dbb0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1dbb4     18 00 00 FF 
1dbb8     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1dbbc     00 12 06 F6 | 	mov	arg01, #0
1dbc0     00 16 06 F6 | 	mov	arg03, #0
1dbc4     C8 3B B0 FD | 	call	#__system___basic_print_string
1dbc8     00 12 06 F6 | 	mov	arg01, #0
1dbcc     0A 14 06 F6 | 	mov	arg02, #10
1dbd0     00 16 06 F6 | 	mov	arg03, #0
1dbd4     60 3B B0 FD | 	call	#__system___basic_print_char
1dbd8     00 12 06 F6 | 	mov	arg01, #0
1dbdc     FC 88 B0 FD | 	call	#__system___getiolock_0540
1dbe0     FD 00 68 FC | 	wrlong	#0, result1
1dbe4     51 00 00 FF 
1dbe8     A8 E5 05 F1 | 	add	objptr, ##41896
1dbec     F2 12 02 FB | 	rdlong	arg01, objptr
1dbf0     0E 00 00 FF 
1dbf4     4C E5 85 F1 | 	sub	objptr, ##7500
1dbf8     F2 1E 02 FB | 	rdlong	local01, objptr
1dbfc     43 00 00 FF 
1dc00     5C E4 85 F1 | 	sub	objptr, ##34396
1dc04     0F 13 82 F1 | 	sub	arg01, local01
1dc08     00 14 06 F6 | 	mov	arg02, #0
1dc0c     0A 16 06 F6 | 	mov	arg03, #10
1dc10     58 51 B0 FD | 	call	#__system__Number_S
1dc14     FD 12 02 F6 | 	mov	arg01, result1
1dc18     88 01 00 FF 
1dc1c     7B 15 06 F6 | 	mov	arg02, ##@LR__5579
1dc20     D4 2E B0 FD | 	call	#__system___string_concat
1dc24     FD 1E 02 F6 | 	mov	local01, result1
1dc28     50 00 00 FF 
1dc2c     0C E5 05 F1 | 	add	objptr, ##41228
1dc30     F2 1E 62 FC | 	wrlong	local01, objptr
1dc34     50 00 00 FF 
1dc38     0C E5 85 F1 | 	sub	objptr, ##41228
1dc3c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dc3c     00 12 06 F6 | 	mov	arg01, #0
1dc40     98 88 B0 FD | 	call	#__system___getiolock_0540
1dc44     FD 12 02 F6 | 	mov	arg01, result1
1dc48     50 2E B0 FD | 	call	#__system___lockmem
1dc4c     50 00 00 FF 
1dc50     0C E5 05 F1 | 	add	objptr, ##41228
1dc54     F2 14 02 FB | 	rdlong	arg02, objptr
1dc58     50 00 00 FF 
1dc5c     0C E5 85 F1 | 	sub	objptr, ##41228
1dc60     00 12 06 F6 | 	mov	arg01, #0
1dc64     00 16 06 F6 | 	mov	arg03, #0
1dc68     24 3B B0 FD | 	call	#__system___basic_print_string
1dc6c     00 12 06 F6 | 	mov	arg01, #0
1dc70     0A 14 06 F6 | 	mov	arg02, #10
1dc74     00 16 06 F6 | 	mov	arg03, #0
1dc78     BC 3A B0 FD | 	call	#__system___basic_print_char
1dc7c     00 12 06 F6 | 	mov	arg01, #0
1dc80     58 88 B0 FD | 	call	#__system___getiolock_0540
1dc84     FD 00 68 FC | 	wrlong	#0, result1
1dc88     37 00 00 FF 
1dc8c     34 E4 05 F1 | 	add	objptr, ##28212
1dc90     F2 12 02 FB | 	rdlong	arg01, objptr
1dc94     37 00 00 FF 
1dc98     34 E4 85 F1 | 	sub	objptr, ##28212
1dc9c     01 12 66 F0 | 	shl	arg01, #1
1dca0     04 14 06 F6 | 	mov	arg02, #4
1dca4     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dca8                 | ' position 2*editor_spaces,4 : print "Ready"
1dca8     00 12 06 F6 | 	mov	arg01, #0
1dcac     2C 88 B0 FD | 	call	#__system___getiolock_0540
1dcb0     FD 12 02 F6 | 	mov	arg01, result1
1dcb4     E4 2D B0 FD | 	call	#__system___lockmem
1dcb8     88 01 00 FF 
1dcbc     8D 15 06 F6 | 	mov	arg02, ##@LR__5580
1dcc0     00 12 06 F6 | 	mov	arg01, #0
1dcc4     00 16 06 F6 | 	mov	arg03, #0
1dcc8     C4 3A B0 FD | 	call	#__system___basic_print_string
1dccc     00 12 06 F6 | 	mov	arg01, #0
1dcd0     0A 14 06 F6 | 	mov	arg02, #10
1dcd4     00 16 06 F6 | 	mov	arg03, #0
1dcd8     5C 3A B0 FD | 	call	#__system___basic_print_char
1dcdc     00 12 06 F6 | 	mov	arg01, #0
1dce0     F8 87 B0 FD | 	call	#__system___getiolock_0540
1dce4     FD 00 68 FC | 	wrlong	#0, result1
1dce8     00 14 06 F6 | 	mov	arg02, #0
1dcec     01 14 D6 F7 | 	test	arg02, #1 wc
1dcf0     5A 4C 64 FD | 	drvc	#38
1dcf4     01 14 D6 F7 | 	test	arg02, #1 wc
1dcf8     5A 4E 64 FD | 	drvc	#39
1dcfc     88 01 00 FF 
1dd00     93 1F 06 F6 | 	mov	local01, ##@LR__5581
1dd04     51 00 00 FF 
1dd08     D4 E5 05 F1 | 	add	objptr, ##41940
1dd0c     F2 1E 62 FC | 	wrlong	local01, objptr
1dd10     04 E4 05 F1 | 	add	objptr, #4
1dd14     FF FF FF FF 
1dd18     F2 FE 6B FC | 	wrlong	##-1, objptr
1dd1c     51 00 00 FF 
1dd20     D8 E5 85 F1 | 	sub	objptr, ##41944
1dd24                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dd24                 | ' loadname="noname.bas"
1dd24                 | ' do_insert=-1
1dd24                 | ' 
1dd24                 | ' '-------------------------------------------------------------------------------------------------------- 
1dd24                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dd24                 | ' '--------------------------------------------------------------------------------------------------------
1dd24                 | ' 
1dd24                 | ' do
1dd24                 | LR__2380
1dd24     01 12 06 F6 | 	mov	arg01, #1
1dd28     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dd2c     D4 2A BE FD | 	call	#_edit
1dd30     FD 1E 02 F6 | 	mov	local01, result1
1dd34     37 00 00 FF 
1dd38     1C E4 05 F1 | 	add	objptr, ##28188
1dd3c     F2 1E 62 FC | 	wrlong	local01, objptr
1dd40     37 00 00 FF 
1dd44     1C E4 85 F1 | 	sub	objptr, ##28188
1dd48     14 39 BE FD | 	call	#_interpret
1dd4c     88 01 00 FF 
1dd50     9E 1F 06 F6 | 	mov	local01, ##@LR__5582
1dd54     37 00 00 FF 
1dd58     1C E4 05 F1 | 	add	objptr, ##28188
1dd5c     F2 1E 62 FC | 	wrlong	local01, objptr
1dd60     37 00 00 FF 
1dd64     1C E4 85 F1 | 	sub	objptr, ##28188
1dd68     B8 FF 9F FD | 	jmp	#LR__2380
1dd6c     A7 F0 03 F6 | 	mov	ptra, fp
1dd70     B2 00 A0 FD | 	call	#popregs_
1dd74                 | _program_ret
1dd74     2D 00 64 FD | 	ret
1dd78                 | 
1dd78                 | ' '' this is not a main program.
1dd78                 | ' 
1dd78                 | ' '****************************************************************************************************************
1dd78                 | ' '                                                                                                             	*
1dd78                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dd78                 | ' '                                                                                                            	*
1dd78                 | ' ' base - HDMI base pin												*
1dd78                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dd78                 | ' '														*
1dd78                 | ' '														*
1dd78                 | ' '****************************************************************************************************************
1dd78                 | ' 
1dd78                 | ' pub start(base,mb):result |i
1dd78                 | _hg010b_spin2_start
1dd78                 | ' 
1dd78                 | ' '--------------------------- initialize pointers and variables
1dd78                 | ' 
1dd78                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dd78     34 E4 05 F1 | 	add	objptr, #52
1dd7c     F2 FA 01 F6 | 	mov	result1, objptr
1dd80     28 E4 85 F1 | 	sub	objptr, #40
1dd84     F2 FA 61 FC | 	wrlong	result1, objptr
1dd88                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1dd88                 | ' hdmibase:=base							' HDMI base pin, 8*n
1dd88     18 E4 05 F1 | 	add	objptr, #24
1dd8c     F2 12 62 FC | 	wrlong	arg01, objptr
1dd90                 | ' mailbox_ptr:=mb		
1dd90     04 E4 05 F1 | 	add	objptr, #4
1dd94     F2 14 62 FC | 	wrlong	arg02, objptr
1dd98                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dd98     C1 E5 05 F1 | 	add	objptr, #449
1dd9c     F2 14 62 FC | 	wrlong	arg02, objptr
1dda0                 | ' sprite_ptr:=@spr1ptr
1dda0     D8 E4 85 F1 | 	sub	objptr, #216
1dda4     F2 FA 01 F6 | 	mov	result1, objptr
1dda8     E5 E4 85 F1 | 	sub	objptr, #229
1ddac     F2 FA 61 FC | 	wrlong	result1, objptr
1ddb0                 | ' 
1ddb0                 | ' 		'
1ddb0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ddb0     E5 E4 05 F1 | 	add	objptr, #229
1ddb4     F2 FA 01 FB | 	rdlong	result1, objptr
1ddb8     D0 FA 05 F1 | 	add	result1, #208
1ddbc     FD 10 58 FC | 	wrword	#8, result1
1ddc0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1ddc0     F2 16 02 FB | 	rdlong	arg03, objptr
1ddc4     D2 16 06 F1 | 	add	arg03, #210
1ddc8     0B 21 58 FC | 	wrword	#16, arg03
1ddcc                 | ' leading_spaces:=0				'
1ddcc     A5 E5 05 F1 | 	add	objptr, #421
1ddd0     F2 00 68 FC | 	wrlong	#0, objptr
1ddd4                 | ' 
1ddd4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1ddd4     99 E4 85 F1 | 	sub	objptr, #153
1ddd8     00 00 A0 FF 
1dddc     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dde0                 | ' emptydl[1]:=0
1dde0     04 E4 05 F1 | 	add	objptr, #4
1dde4     F2 00 68 FC | 	wrlong	#0, objptr
1dde8                 | ' 
1dde8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dde8                 | ' 
1dde8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dde8     28 E5 85 F1 | 	sub	objptr, #296
1ddec     F2 02 68 FC | 	wrlong	#1, objptr
1ddf0                 | ' if s_debug<>0
1ddf0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1ddf0     20 00 80 FF 
1ddf4     F2 00 68 FC | 	wrlong	##16384, objptr
1ddf8     F9 E4 85 F1 | 	sub	objptr, #249
1ddfc                 | ' setmode()							' set the mode, see below
1ddfc     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1de00                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1de00     49 E4 05 F1 | 	add	objptr, #73
1de04     F2 FA 01 F6 | 	mov	result1, objptr
1de08     35 E4 85 F1 | 	sub	objptr, #53
1de0c     F2 FA 61 FC | 	wrlong	result1, objptr
1de10                 | ' cursor_ptr:=@cursor_x						
1de10     28 E4 05 F1 | 	add	objptr, #40
1de14     F2 16 02 F6 | 	mov	arg03, objptr
1de18     2C E4 85 F1 | 	sub	objptr, #44
1de1c     F2 16 62 FC | 	wrlong	arg03, objptr
1de20                 | ' fontnum:=0  							' start with a PC type font 
1de20     55 E4 05 F1 | 	add	objptr, #85
1de24     F2 00 68 FC | 	wrlong	#0, objptr
1de28                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1de28     1C E4 05 F1 | 	add	objptr, #28
1de2c     F2 12 02 F6 | 	mov	arg01, objptr
1de30     81 E4 85 F1 | 	sub	objptr, #129
1de34     10 00 00 FF 
1de38     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1de3c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1de40     10 00 00 FF 
1de44     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1de48     10 16 06 F6 | 	mov	arg03, #16
1de4c     6C 2B B0 FD | 	call	#__system____builtin_memmove
1de50                 | ' leading_spaces:=0
1de50     01 00 00 FF 
1de54     B6 E4 05 F1 | 	add	objptr, ##694
1de58     F2 00 68 FC | 	wrlong	#0, objptr
1de5c     01 00 00 FF 
1de60     B6 E4 85 F1 | 	sub	objptr, ##694
1de64                 | ' '---------------------------- initialize a cursor (MSDOS type)
1de64                 | ' 
1de64                 | ' initcursor(154)
1de64     9A 12 06 F6 | 	mov	arg01, #154
1de68     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1de6c                 | ' 
1de6c                 | ' '---------------------------- start the cog
1de6c                 | ' 
1de6c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1de6c     10 00 00 FF 
1de70     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1de74     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1de78     10 00 00 FF 
1de7c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1de80     14 E4 05 F1 | 	add	objptr, #20
1de84     10 FA 05 F6 | 	mov	result1, #16
1de88     28 E4 61 FD | 	setq	objptr
1de8c     0A FB F1 FC | 	coginit	result1, arg02 wc
1de90     01 FA 65 C6 |  if_b	neg	result1, #1
1de94     1C E4 05 F1 | 	add	objptr, #28
1de98     F2 FA 61 FC | 	wrlong	result1, objptr
1de9c     30 E4 85 F1 | 	sub	objptr, #48
1dea0                 | ' waitms(40)							' wait for stabilize
1dea0     28 12 06 F6 | 	mov	arg01, #40
1dea4     E8 2E B0 FD | 	call	#__system___waitms
1dea8                 | ' return cog							' return the driver's cog #
1dea8     30 E4 05 F1 | 	add	objptr, #48
1deac     F2 FA 01 FB | 	rdlong	result1, objptr
1deb0     30 E4 85 F1 | 	sub	objptr, #48
1deb4                 | _hg010b_spin2_start_ret
1deb4     2D 00 64 FD | 	ret
1deb8                 | 
1deb8                 | ' 
1deb8                 | ' 
1deb8                 | ' '**************************************************************************************************************** 
1deb8                 | ' '                                                                                                             	*
1deb8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1deb8                 | ' '  Mode number - see start() above or bits below								*
1deb8                 | ' '                                                                                                             	*
1deb8                 | ' '****************************************************************************************************************
1deb8                 | ' 
1deb8                 | ' '---------------------------- initialize a cursor (MSDOS type)
1deb8                 | ' pub initcursor(color) |i
1deb8                 | _hg010b_spin2_initcursor
1deb8     03 4A 05 F6 | 	mov	COUNT_, #3
1debc     A8 00 A0 FD | 	call	#pushregs_
1dec0     09 1F 02 F6 | 	mov	local01, arg01
1dec4                 | ' 
1dec4                 | ' cursor_x:=0							' place the cursor at 0:0
1dec4     3C E4 05 F1 | 	add	objptr, #60
1dec8     F2 00 58 FC | 	wrword	#0, objptr
1decc                 | ' cursor_y:=0
1decc     02 E4 05 F1 | 	add	objptr, #2
1ded0     F2 00 48 FC | 	wrbyte	#0, objptr
1ded4                 | ' repeat i from 0 to 111
1ded4     00 20 06 F6 | 	mov	local02, #0
1ded8     F8 E5 05 F1 | 	add	objptr, #504
1dedc     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1dee0                 | LR__2390
1dee0                 | '   cursor[i]:=0
1dee0     10 23 02 F6 | 	mov	local03, local02
1dee4     F2 22 02 F1 | 	add	local03, objptr
1dee8     11 01 48 FC | 	wrbyte	#0, local03
1deec     01 20 06 F1 | 	add	local02, #1
1def0     70 20 56 F2 | 	cmps	local02, #112 wc
1def4     E8 FF 9F CD |  if_b	jmp	#LR__2390
1def8                 | ' repeat i from 112 to 127
1def8     70 20 06 F6 | 	mov	local02, #112
1defc                 | LR__2391
1defc                 | '   cursor[i]:=color  
1defc     10 23 02 F6 | 	mov	local03, local02
1df00     F2 22 02 F1 | 	add	local03, objptr
1df04     11 1F 42 FC | 	wrbyte	local01, local03
1df08     01 20 06 F1 | 	add	local02, #1
1df0c     80 20 16 F2 | 	cmp	local02, #128 wc
1df10     E8 FF 9F CD |  if_b	jmp	#LR__2391
1df14                 | LR__2392
1df14                 | ' 'repeat i from 0 to 127
1df14                 | ' '  if ((i/8)//2)
1df14                 | ' '    cursor[i]:=15
1df14                 | ' '  else
1df14                 | ' '    cursor[i]:=0
1df14                 | ' '  if i>=120    
1df14                 | ' '    cursor[i]:=40
1df14                 | ' setspriteptr(17,@cursor)
1df14     F2 14 02 F6 | 	mov	arg02, objptr
1df18     01 00 00 FF 
1df1c     36 E4 85 F1 | 	sub	objptr, ##566
1df20     11 12 06 F6 | 	mov	arg01, #17
1df24     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1df28                 | ' setspritesize(17,8,16)
1df28     11 12 06 F6 | 	mov	arg01, #17
1df2c     08 14 06 F6 | 	mov	arg02, #8
1df30     10 16 06 F6 | 	mov	arg03, #16
1df34     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1df38                 | ' setspritepos(17,0,0)
1df38     11 12 06 F6 | 	mov	arg01, #17
1df3c     00 14 06 F6 | 	mov	arg02, #0
1df40     00 16 06 F6 | 	mov	arg03, #0
1df44     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1df48                 | ' cursorshape:=14
1df48     0B 00 00 FF 
1df4c     C6 E4 05 F1 | 	add	objptr, ##5830
1df50     F2 1C 68 FC | 	wrlong	#14, objptr
1df54                 | ' cursorcolor:=color
1df54     04 E4 85 F1 | 	sub	objptr, #4
1df58     F2 1E 62 FC | 	wrlong	local01, objptr
1df5c     0B 00 00 FF 
1df60     C2 E4 85 F1 | 	sub	objptr, ##5826
1df64     A7 F0 03 F6 | 	mov	ptra, fp
1df68     B2 00 A0 FD | 	call	#popregs_
1df6c                 | _hg010b_spin2_initcursor_ret
1df6c     2D 00 64 FD | 	ret
1df70                 | 
1df70                 | ' 
1df70                 | ' pub setcursorshape(shape) | i
1df70                 | _hg010b_spin2_setcursorshape
1df70                 | ' 
1df70                 | ' cursorshape:=shape
1df70     0B 00 00 FF 
1df74     C6 E4 05 F1 | 	add	objptr, ##5830
1df78     F2 12 62 FC | 	wrlong	arg01, objptr
1df7c                 | ' repeat i from 0 to (8*cursorshape)-1
1df7c     00 00 06 F6 | 	mov	_var01, #0
1df80     09 03 02 F6 | 	mov	_var02, arg01
1df84     03 02 66 F0 | 	shl	_var02, #3
1df88     01 02 86 F1 | 	sub	_var02, #1
1df8c     00 02 56 F2 | 	cmps	_var02, #0 wc
1df90     01 04 86 F6 | 	negc	_var03, #1
1df94     02 07 02 F6 | 	mov	_var04, _var03
1df98     02 03 02 F1 | 	add	_var02, _var03
1df9c     0A 00 00 FF 
1dfa0     90 E4 85 F1 | 	sub	objptr, ##5264
1dfa4     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1dfa8                 | LR__2400
1dfa8                 | '   cursor[i]:=0
1dfa8     00 05 02 F6 | 	mov	_var03, _var01
1dfac     F2 04 02 F1 | 	add	_var03, objptr
1dfb0     02 01 48 FC | 	wrbyte	#0, _var03
1dfb4     03 01 02 F1 | 	add	_var01, _var04
1dfb8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dfbc     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1dfc0                 | LR__2401
1dfc0                 | ' repeat i from 8*cursorshape to 127
1dfc0     0A 00 00 FF 
1dfc4     90 E4 05 F1 | 	add	objptr, ##5264
1dfc8     F2 06 02 FB | 	rdlong	_var04, objptr
1dfcc     03 01 02 F6 | 	mov	_var01, _var04
1dfd0     03 00 66 F0 | 	shl	_var01, #3
1dfd4     0B 00 00 FF 
1dfd8     C6 E4 85 F1 | 	sub	objptr, ##5830
1dfdc     03 06 66 F0 | 	shl	_var04, #3
1dfe0     80 06 56 F2 | 	cmps	_var04, #128 wc
1dfe4     01 04 A6 F6 | 	negnc	_var03, #1
1dfe8     7F 02 06 F6 | 	mov	_var02, #127
1dfec     02 03 02 F1 | 	add	_var02, _var03
1dff0     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1dff4                 | LR__2402
1dff4                 | '   cursor[i]:=cursorcolor
1dff4     00 07 02 F6 | 	mov	_var04, _var01
1dff8     01 00 00 FF 
1dffc     36 E4 05 F1 | 	add	objptr, ##566
1e000     F2 06 02 F1 | 	add	_var04, objptr
1e004     0A 00 00 FF 
1e008     8C E4 05 F1 | 	add	objptr, ##5260
1e00c     F2 12 02 FB | 	rdlong	arg01, objptr
1e010     0B 00 00 FF 
1e014     C2 E4 85 F1 | 	sub	objptr, ##5826
1e018     03 13 42 FC | 	wrbyte	arg01, _var04
1e01c     02 01 02 F1 | 	add	_var01, _var03
1e020     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e024     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1e028                 | LR__2403
1e028                 | _hg010b_spin2_setcursorshape_ret
1e028     2D 00 64 FD | 	ret
1e02c                 | 
1e02c                 | ' 
1e02c                 | ' pub setcursorcolor(color) | i
1e02c                 | _hg010b_spin2_setcursorcolor
1e02c                 | ' 
1e02c                 | ' cursorcolor:=color
1e02c     0B 00 00 FF 
1e030     C2 E4 05 F1 | 	add	objptr, ##5826
1e034     F2 12 62 FC | 	wrlong	arg01, objptr
1e038                 | ' repeat i from 0 to (8*cursorshape)-1
1e038     00 12 06 F6 | 	mov	arg01, #0
1e03c     04 E4 05 F1 | 	add	objptr, #4
1e040     F2 00 02 FB | 	rdlong	_var01, objptr
1e044     03 00 66 F0 | 	shl	_var01, #3
1e048     01 00 86 F1 | 	sub	_var01, #1
1e04c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e050     01 02 86 F6 | 	negc	_var02, #1
1e054     01 05 02 F6 | 	mov	_var03, _var02
1e058     01 01 02 F1 | 	add	_var01, _var02
1e05c     0A 00 00 FF 
1e060     90 E4 85 F1 | 	sub	objptr, ##5264
1e064     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1e068                 | LR__2410
1e068                 | '   cursor[i]:=0
1e068     09 03 02 F6 | 	mov	_var02, arg01
1e06c     F2 02 02 F1 | 	add	_var02, objptr
1e070     01 01 48 FC | 	wrbyte	#0, _var02
1e074     02 13 02 F1 | 	add	arg01, _var03
1e078     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e07c     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1e080                 | LR__2411
1e080                 | ' repeat i from 8*cursorshape to 127
1e080     0A 00 00 FF 
1e084     90 E4 05 F1 | 	add	objptr, ##5264
1e088     F2 04 02 FB | 	rdlong	_var03, objptr
1e08c     02 13 02 F6 | 	mov	arg01, _var03
1e090     03 12 66 F0 | 	shl	arg01, #3
1e094     0B 00 00 FF 
1e098     C6 E4 85 F1 | 	sub	objptr, ##5830
1e09c     03 04 66 F0 | 	shl	_var03, #3
1e0a0     80 04 56 F2 | 	cmps	_var03, #128 wc
1e0a4     01 02 A6 F6 | 	negnc	_var02, #1
1e0a8     7F 00 06 F6 | 	mov	_var01, #127
1e0ac     01 01 02 F1 | 	add	_var01, _var02
1e0b0     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1e0b4                 | LR__2412
1e0b4                 | '   cursor[i]:=cursorcolor
1e0b4     09 05 02 F6 | 	mov	_var03, arg01
1e0b8     01 00 00 FF 
1e0bc     36 E4 05 F1 | 	add	objptr, ##566
1e0c0     F2 04 02 F1 | 	add	_var03, objptr
1e0c4     0A 00 00 FF 
1e0c8     8C E4 05 F1 | 	add	objptr, ##5260
1e0cc     F2 06 02 FB | 	rdlong	_var04, objptr
1e0d0     0B 00 00 FF 
1e0d4     C2 E4 85 F1 | 	sub	objptr, ##5826
1e0d8     02 07 42 FC | 	wrbyte	_var04, _var03
1e0dc     01 13 02 F1 | 	add	arg01, _var02
1e0e0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e0e4     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1e0e8                 | LR__2413
1e0e8                 | _hg010b_spin2_setcursorcolor_ret
1e0e8     2D 00 64 FD | 	ret
1e0ec                 | 
1e0ec                 | '   
1e0ec                 | '   
1e0ec                 | '   
1e0ec                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e0ec                 | _hg010b_spin2_setmode
1e0ec     02 4A 05 F6 | 	mov	COUNT_, #2
1e0f0     A8 00 A0 FD | 	call	#pushregs_
1e0f4                 | ' 
1e0f4                 | ' 
1e0f4                 | ' dl_ptr:=@emptydl[0]
1e0f4     01 00 00 FF 
1e0f8     1D E4 05 F1 | 	add	objptr, ##541
1e0fc     F2 1A 02 F6 | 	mov	arg05, objptr
1e100     FD E5 85 F1 | 	sub	objptr, #509
1e104     F2 1A 62 FC | 	wrlong	arg05, objptr
1e108                 | ' 
1e108                 | ' if cog>0 
1e108     10 E4 05 F1 | 	add	objptr, #16
1e10c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e110     30 E4 85 F1 | 	sub	objptr, #48
1e114     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e118                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e118     01 12 06 36 |  if_ae	mov	arg01, #1
1e11c     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e120                 | ' xres:=1024
1e120     01 00 00 FF 
1e124     26 E4 05 F1 | 	add	objptr, ##550
1e128     02 00 80 FF 
1e12c     F2 00 68 FC | 	wrlong	##1024, objptr
1e130                 | ' yres:=600
1e130     04 E4 05 F1 | 	add	objptr, #4
1e134     01 00 80 FF 
1e138     F2 B0 68 FC | 	wrlong	##600, objptr
1e13c                 | ' ppl:=(timings[3])
1e13c     10 00 00 FF 
1e140     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e144     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e148     51 E5 85 F1 | 	sub	objptr, #337
1e14c     F2 1A 62 FC | 	wrlong	arg05, objptr
1e150                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e150     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e154     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e158     01 1E 66 F0 | 	shl	local01, #1
1e15c     80 E4 85 F1 | 	sub	objptr, #128
1e160     F2 1E 62 FC | 	wrlong	local01, objptr
1e164                 | ' cpl1:=cpl '' todo remove
1e164     04 E4 05 F1 | 	add	objptr, #4
1e168     F2 1E 62 FC | 	wrlong	local01, objptr
1e16c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e16c     02 00 00 FF 
1e170     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e174     41 E4 85 F1 | 	sub	objptr, #65
1e178     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e17c                 | ' repeat i from 0 to 3
1e17c     00 20 06 F6 | 	mov	local02, #0
1e180     02 00 00 FF 
1e184     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e188     08 E4 05 F1 | 	add	objptr, #8
1e18c     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e190                 | LR__2420
1e190                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e190     10 1F 02 F6 | 	mov	local01, local02
1e194     02 1E 66 F0 | 	shl	local01, #2
1e198     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e19c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e1a0     11 1A 66 F0 | 	shl	arg05, #17
1e1a4     0F 1F 02 FB | 	rdlong	local01, local01
1e1a8     0D 1F 02 F1 | 	add	local01, arg05
1e1ac     80 40 38 FF 
1e1b0     00 1E 06 F1 | 	add	local01, ##1887502336
1e1b4     10 1B 02 F6 | 	mov	arg05, local02
1e1b8     02 1A 66 F0 | 	shl	arg05, #2
1e1bc     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e1c0     0D 1F 62 FC | 	wrlong	local01, arg05
1e1c4     01 20 06 F1 | 	add	local02, #1
1e1c8     04 20 56 F2 | 	cmps	local02, #4 wc
1e1cc     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e1d0                 | LR__2421
1e1d0     24 E4 85 F1 | 	sub	objptr, #36
1e1d4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e1d4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e1d8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e1dc     14 1E 66 FC | 	wrlong	local01, #20
1e1e0                 | ' hubset(timings[10])
1e1e0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e1e4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e1e8     10 00 00 FF 
1e1ec     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e1f0     00 12 62 FD | 	hubset	arg01
1e1f4                 | ' waitms(1)                                                   	' wait for stabilization
1e1f4     01 12 06 F6 | 	mov	arg01, #1
1e1f8     94 2B B0 FD | 	call	#__system___waitms
1e1fc     10 00 00 FF 
1e200     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e204     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e208     61 E4 05 F1 | 	add	objptr, #97
1e20c     F2 20 62 FC | 	wrlong	local02, objptr
1e210     10 1F 52 F6 | 	abs	local01, local02 wc
1e214     04 1E 46 F0 | 	shr	local01, #4
1e218     0F 1F 82 F6 | 	negc	local01, local01
1e21c     9C E4 05 F1 | 	add	objptr, #156
1e220     F2 1E 62 FC | 	wrlong	local01, objptr
1e224     A4 E4 85 F1 | 	sub	objptr, #164
1e228     F2 20 02 FB | 	rdlong	local02, objptr
1e22c     08 E4 05 F1 | 	add	objptr, #8
1e230     F2 1E 02 FB | 	rdlong	local01, objptr
1e234     0F 21 02 FD | 	qmul	local02, local01
1e238                 | ' lines:=timings[11]
1e238                 | ' t_lines:=lines/16
1e238                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e238     29 E4 85 F1 | 	sub	objptr, #41
1e23c     19 1E C6 F9 | 	decod	local01, #25
1e240     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e244     18 20 62 FD | 	getqx	local02
1e248     F2 20 62 FC | 	wrlong	local02, objptr
1e24c     38 E4 85 F1 | 	sub	objptr, #56
1e250     02 20 66 F0 | 	shl	local02, #2
1e254     10 1F 82 F1 | 	sub	local01, local02
1e258     F2 1E 62 FC | 	wrlong	local01, objptr
1e25c     FD E4 05 F1 | 	add	objptr, #253
1e260     F2 20 02 FB | 	rdlong	local02, objptr
1e264     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e268     0D 21 02 FD | 	qmul	local02, arg05
1e26c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e26c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e26c     F9 E4 85 F1 | 	sub	objptr, #249
1e270                 | ' mode_ptr:=@timings						' set pointers to timings
1e270     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e274                 | ' graphmode:=1024+512+192+48							' det global variable
1e274                 | ' makedl(graphmode)							' make a DL for the mode
1e274     03 00 00 FF 
1e278     F0 12 06 F6 | 	mov	arg01, ##1776
1e27c     18 20 62 FD | 	getqx	local02
1e280     10 1F 82 F1 | 	sub	local01, local02
1e284     F2 1E 62 FC | 	wrlong	local01, objptr
1e288     14 E4 05 F1 | 	add	objptr, #20
1e28c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e290     79 E4 05 F1 | 	add	objptr, #121
1e294     03 00 80 FF 
1e298     F2 E0 69 FC | 	wrlong	##1776, objptr
1e29c     91 E4 85 F1 | 	sub	objptr, #145
1e2a0     10 00 00 FF 
1e2a4     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e2a8     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e2ac                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e2ac     F2 1E 02 FB | 	rdlong	local01, objptr
1e2b0     DD E4 05 F1 | 	add	objptr, #221
1e2b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2b8                 | ' s_font_ptr:=font_ptr
1e2b8     D5 E4 85 F1 | 	sub	objptr, #213
1e2bc     F2 1E 02 FB | 	rdlong	local01, objptr
1e2c0     D9 E4 05 F1 | 	add	objptr, #217
1e2c4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2c8                 | ' s_lines:=lines
1e2c8     80 E4 85 F1 | 	sub	objptr, #128
1e2cc     F2 1E 02 FB | 	rdlong	local01, objptr
1e2d0     84 E4 05 F1 | 	add	objptr, #132
1e2d4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2d8                 | ' s_buflen:=buflen
1e2d8     AD E4 85 F1 | 	sub	objptr, #173
1e2dc     F2 1E 02 FB | 	rdlong	local01, objptr
1e2e0     B5 E4 05 F1 | 	add	objptr, #181
1e2e4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2e8                 | ' s_cpl:=cpl
1e2e8     94 E4 85 F1 | 	sub	objptr, #148
1e2ec     F2 1E 02 FB | 	rdlong	local01, objptr
1e2f0     90 E4 05 F1 | 	add	objptr, #144
1e2f4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2f8                 | ' s_cpl1:=cpl
1e2f8     90 E4 85 F1 | 	sub	objptr, #144
1e2fc     F2 1E 02 FB | 	rdlong	local01, objptr
1e300     98 E4 05 F1 | 	add	objptr, #152
1e304     F2 1E 62 FC | 	wrlong	local01, objptr
1e308                 | ' st_lines:=t_lines
1e308     0C E4 05 F1 | 	add	objptr, #12
1e30c     F2 1E 02 FB | 	rdlong	local01, objptr
1e310     04 E4 05 F1 | 	add	objptr, #4
1e314     F2 1E 62 FC | 	wrlong	local01, objptr
1e318                 | ' ppl:=ppl/xzoom  
1e318     28 E4 85 F1 | 	sub	objptr, #40
1e31c     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e320     2C E4 05 F1 | 	add	objptr, #44
1e324     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e328     05 E5 85 F1 | 	sub	objptr, #261
1e32c     BA 00 A0 FD | 	call	#divide_
1e330     D9 E4 05 F1 | 	add	objptr, #217
1e334     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e338                 | ' s_ppl:=ppl
1e338     1C E4 05 F1 | 	add	objptr, #28
1e33c     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e340     F5 E4 85 F1 | 	sub	objptr, #245
1e344                 | ' waitms(20)							' wait 
1e344     14 12 06 F6 | 	mov	arg01, #20
1e348     44 2A B0 FD | 	call	#__system___waitms
1e34c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e34c     04 E4 05 F1 | 	add	objptr, #4
1e350     F2 12 02 FB | 	rdlong	arg01, objptr
1e354     04 E4 85 F1 | 	sub	objptr, #4
1e358     F2 16 02 FB | 	rdlong	arg03, objptr
1e35c     09 17 82 F1 | 	sub	arg03, arg01
1e360     20 14 06 F6 | 	mov	arg02, #32
1e364     00 18 06 F6 | 	mov	arg04, #0
1e368     01 1A 06 F6 | 	mov	arg05, #1
1e36c     0B 00 00 FF 
1e370     CC E4 05 F1 | 	add	objptr, ##5836
1e374     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e378     0B 00 00 FF 
1e37c     CC E4 85 F1 | 	sub	objptr, ##5836
1e380     A7 F0 03 F6 | 	mov	ptra, fp
1e384     B2 00 A0 FD | 	call	#popregs_
1e388                 | _hg010b_spin2_setmode_ret
1e388     2D 00 64 FD | 	ret
1e38c                 | 
1e38c                 | ' 
1e38c                 | ' '****************************************************************************************************************
1e38c                 | ' '                                                                                                             	*
1e38c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e38c                 | ' '                                                                                                             	*
1e38c                 | ' '****************************************************************************************************************
1e38c                 | ' 
1e38c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e38c                 | _hg010b_spin2_makedl
1e38c                 | ' 
1e38c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e38c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e38c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e38c     00 00 06 F6 | 	mov	_var01, #0
1e390     ED E5 05 F1 | 	add	objptr, #493
1e394     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e398                 | LR__2430
1e398                 | '   displaylist[i]:=0 
1e398     00 03 02 F6 | 	mov	_var02, _var01
1e39c     02 02 66 F0 | 	shl	_var02, #2
1e3a0     F2 02 02 F1 | 	add	_var02, objptr
1e3a4     01 01 68 FC | 	wrlong	#0, _var02
1e3a8     01 00 06 F1 | 	add	_var01, #1
1e3ac     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e3b0     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e3b4                 | LR__2431
1e3b4                 | '                         ' 
1e3b4                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e3b4     8C E5 85 F1 | 	sub	objptr, #396
1e3b8     F2 02 02 FB | 	rdlong	_var02, objptr
1e3bc     14 02 66 F0 | 	shl	_var02, #20
1e3c0     01 02 06 F1 | 	add	_var02, #1
1e3c4     04 E4 85 F1 | 	sub	objptr, #4
1e3c8     F2 00 02 FB | 	rdlong	_var01, objptr
1e3cc     02 00 66 F0 | 	shl	_var01, #2
1e3d0     04 00 66 F0 | 	shl	_var01, #4
1e3d4     00 03 02 F1 | 	add	_var02, _var01
1e3d8     90 E5 05 F1 | 	add	objptr, #400
1e3dc     F2 02 62 FC | 	wrlong	_var02, objptr
1e3e0     ED E5 85 F1 | 	sub	objptr, #493
1e3e4                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e3e4     F2 02 02 FB | 	rdlong	_var02, objptr
1e3e8     04 02 66 F0 | 	shl	_var02, #4
1e3ec     02 02 06 F1 | 	add	_var02, #2
1e3f0     F1 E5 05 F1 | 	add	objptr, #497
1e3f4     F2 02 62 FC | 	wrlong	_var02, objptr
1e3f8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e3f8     04 E4 85 F1 | 	sub	objptr, #4
1e3fc     F2 02 02 F6 | 	mov	_var02, objptr
1e400     CD E5 85 F1 | 	sub	objptr, #461
1e404     F2 02 62 FC | 	wrlong	_var02, objptr
1e408     20 E4 85 F1 | 	sub	objptr, #32
1e40c                 | _hg010b_spin2_makedl_ret
1e40c     2D 00 64 FD | 	ret
1e410                 | 
1e410                 | ' 
1e410                 | ' 
1e410                 | ' '****************************************************************************************************************
1e410                 | ' '                                                                        					*
1e410                 | ' '  Graphic primitives                                                    					*
1e410                 | ' '                                                                        					*
1e410                 | ' '****************************************************************************************************************
1e410                 | ' 
1e410                 | ' pub setspriteptr(num,ptr)
1e410                 | _hg010b_spin2_setspriteptr
1e410                 | ' long[@spr1ptr+12*num]:=ptr
1e410     11 E5 05 F1 | 	add	objptr, #273
1e414     F2 00 02 F6 | 	mov	_var01, objptr
1e418     09 03 02 F6 | 	mov	_var02, arg01
1e41c     01 02 66 F0 | 	shl	_var02, #1
1e420     09 03 02 F1 | 	add	_var02, arg01
1e424     02 02 66 F0 | 	shl	_var02, #2
1e428     01 01 02 F1 | 	add	_var01, _var02
1e42c     00 15 62 FC | 	wrlong	arg02, _var01
1e430     11 E5 85 F1 | 	sub	objptr, #273
1e434                 | _hg010b_spin2_setspriteptr_ret
1e434     2D 00 64 FD | 	ret
1e438                 | 
1e438                 | ' 
1e438                 | ' pub setspritepos(num,x,y)
1e438                 | _hg010b_spin2_setspritepos
1e438                 | ' if y>601
1e438     01 00 00 FF 
1e43c     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e440                 | '   y:=601
1e440     01 00 00 3F 
1e444     59 16 06 36 |  if_ae	mov	arg03, ##601
1e448                 | ' if x>1024
1e448     02 00 00 FF 
1e44c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e450                 | '   x:=1024
1e450     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e454                 | ' word[@spr1ptr+12*num+4]:=x
1e454     11 E5 05 F1 | 	add	objptr, #273
1e458     F2 00 02 F6 | 	mov	_var01, objptr
1e45c     09 03 02 F6 | 	mov	_var02, arg01
1e460     01 02 66 F0 | 	shl	_var02, #1
1e464     09 03 02 F1 | 	add	_var02, arg01
1e468     02 02 66 F0 | 	shl	_var02, #2
1e46c     01 01 02 F1 | 	add	_var01, _var02
1e470     04 00 06 F1 | 	add	_var01, #4
1e474     00 15 52 FC | 	wrword	arg02, _var01
1e478                 | ' word[@spr1ptr+12*num+6]:=y
1e478     F2 00 02 F6 | 	mov	_var01, objptr
1e47c     09 03 02 F6 | 	mov	_var02, arg01
1e480     01 02 66 F0 | 	shl	_var02, #1
1e484     09 03 02 F1 | 	add	_var02, arg01
1e488     02 02 66 F0 | 	shl	_var02, #2
1e48c     01 01 02 F1 | 	add	_var01, _var02
1e490     06 00 06 F1 | 	add	_var01, #6
1e494     00 17 52 FC | 	wrword	arg03, _var01
1e498     11 E5 85 F1 | 	sub	objptr, #273
1e49c                 | _hg010b_spin2_setspritepos_ret
1e49c     2D 00 64 FD | 	ret
1e4a0                 | 
1e4a0                 | ' 
1e4a0                 | ' pub setspritesize(num,w,h)
1e4a0                 | _hg010b_spin2_setspritesize
1e4a0                 | ' word[@spr1ptr+12*num+8]:=w
1e4a0     11 E5 05 F1 | 	add	objptr, #273
1e4a4     F2 00 02 F6 | 	mov	_var01, objptr
1e4a8     09 03 02 F6 | 	mov	_var02, arg01
1e4ac     01 02 66 F0 | 	shl	_var02, #1
1e4b0     09 03 02 F1 | 	add	_var02, arg01
1e4b4     02 02 66 F0 | 	shl	_var02, #2
1e4b8     01 01 02 F1 | 	add	_var01, _var02
1e4bc     08 00 06 F1 | 	add	_var01, #8
1e4c0     00 15 52 FC | 	wrword	arg02, _var01
1e4c4                 | ' word[@spr1ptr+12*num+10]:=h
1e4c4     F2 00 02 F6 | 	mov	_var01, objptr
1e4c8     09 03 02 F6 | 	mov	_var02, arg01
1e4cc     01 02 66 F0 | 	shl	_var02, #1
1e4d0     09 03 02 F1 | 	add	_var02, arg01
1e4d4     02 02 66 F0 | 	shl	_var02, #2
1e4d8     01 01 02 F1 | 	add	_var01, _var02
1e4dc     0A 00 06 F1 | 	add	_var01, #10
1e4e0     00 17 52 FC | 	wrword	arg03, _var01
1e4e4     11 E5 85 F1 | 	sub	objptr, #273
1e4e8                 | _hg010b_spin2_setspritesize_ret
1e4e8     2D 00 64 FD | 	ret
1e4ec                 | 
1e4ec                 | ' 
1e4ec                 | ' 
1e4ec                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e4ec                 | ' 
1e4ec                 | ' 
1e4ec                 | ' pub putpixel(x,y,c)
1e4ec                 | _hg010b_spin2_putpixel
1e4ec     04 4A 05 F6 | 	mov	COUNT_, #4
1e4f0     A8 00 A0 FD | 	call	#pushregs_
1e4f4     09 1F 02 F6 | 	mov	local01, arg01
1e4f8                 | ' 
1e4f8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e4f8     00 20 06 F6 | 	mov	local02, #0
1e4fc     00 1E 56 F2 | 	cmps	local01, #0 wc
1e500     01 20 66 36 |  if_ae	neg	local02, #1
1e504     E9 E4 05 F1 | 	add	objptr, #233
1e508     F2 1A 02 FB | 	rdlong	arg05, objptr
1e50c     02 1A 66 F0 | 	shl	arg05, #2
1e510     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e514     11 23 A2 F1 | 	subx	local03, local03
1e518     11 21 02 F5 | 	and	local02, local03
1e51c     00 22 06 F6 | 	mov	local03, #0
1e520     00 14 56 F2 | 	cmps	arg02, #0 wc
1e524     01 22 66 36 |  if_ae	neg	local03, #1
1e528     11 21 02 F5 | 	and	local02, local03
1e52c     04 E4 85 F1 | 	sub	objptr, #4
1e530     F2 22 02 FB | 	rdlong	local03, objptr
1e534     E5 E4 85 F1 | 	sub	objptr, #229
1e538     11 15 52 F2 | 	cmps	arg02, local03 wc
1e53c     12 25 A2 F1 | 	subx	local04, local04
1e540     12 21 CA F7 | 	test	local02, local04 wz
1e544     48 00 90 AD |  if_e	jmp	#LR__2440
1e548     DD E4 05 F1 | 	add	objptr, #221
1e54c     F2 12 02 FB | 	rdlong	arg01, objptr
1e550     14 E4 05 F1 | 	add	objptr, #20
1e554     F2 24 02 FB | 	rdlong	local04, objptr
1e558     02 24 66 F0 | 	shl	local04, #2
1e55c     0A 25 02 FD | 	qmul	local04, arg02
1e560                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e560     0B 15 02 F6 | 	mov	arg02, arg03
1e564     01 16 06 F6 | 	mov	arg03, #1
1e568     00 18 06 F6 | 	mov	arg04, #0
1e56c     01 1A 06 F6 | 	mov	arg05, #1
1e570     0A 00 00 FF 
1e574     DB E5 05 F1 | 	add	objptr, ##5595
1e578     18 24 62 FD | 	getqx	local04
1e57c     0F 25 02 F1 | 	add	local04, local01
1e580     12 13 02 F1 | 	add	arg01, local04
1e584     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e588     0B 00 00 FF 
1e58c     CC E4 85 F1 | 	sub	objptr, ##5836
1e590                 | LR__2440
1e590     A7 F0 03 F6 | 	mov	ptra, fp
1e594     B2 00 A0 FD | 	call	#popregs_
1e598                 | _hg010b_spin2_putpixel_ret
1e598     2D 00 64 FD | 	ret
1e59c                 | 
1e59c                 | ' 
1e59c                 | ' pub putpixel2(x,y,c)
1e59c                 | _hg010b_spin2_putpixel2
1e59c     02 4A 05 F6 | 	mov	COUNT_, #2
1e5a0     A8 00 A0 FD | 	call	#pushregs_
1e5a4     DD E4 05 F1 | 	add	objptr, #221
1e5a8     F2 1E 02 FB | 	rdlong	local01, objptr
1e5ac     14 E4 05 F1 | 	add	objptr, #20
1e5b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5b4     02 1A 66 F0 | 	shl	arg05, #2
1e5b8     0A 1B 02 FD | 	qmul	arg05, arg02
1e5bc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e5bc     0B 15 02 F6 | 	mov	arg02, arg03
1e5c0     01 16 06 F6 | 	mov	arg03, #1
1e5c4     00 18 06 F6 | 	mov	arg04, #0
1e5c8     01 1A 06 F6 | 	mov	arg05, #1
1e5cc     0A 00 00 FF 
1e5d0     DB E5 05 F1 | 	add	objptr, ##5595
1e5d4     18 20 62 FD | 	getqx	local02
1e5d8     09 21 02 F1 | 	add	local02, arg01
1e5dc     10 1F 02 F1 | 	add	local01, local02
1e5e0     0F 13 02 F6 | 	mov	arg01, local01
1e5e4     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e5e8     0B 00 00 FF 
1e5ec     CC E4 85 F1 | 	sub	objptr, ##5836
1e5f0     A7 F0 03 F6 | 	mov	ptra, fp
1e5f4     B2 00 A0 FD | 	call	#popregs_
1e5f8                 | _hg010b_spin2_putpixel2_ret
1e5f8     2D 00 64 FD | 	ret
1e5fc                 | 
1e5fc                 | ' 
1e5fc                 | ' pub getpixel2(x,y): c 
1e5fc                 | _hg010b_spin2_getpixel2
1e5fc     02 4A 05 F6 | 	mov	COUNT_, #2
1e600     A8 00 A0 FD | 	call	#pushregs_
1e604     0C F0 07 F1 | 	add	ptra, #12
1e608     04 4E 05 F1 | 	add	fp, #4
1e60c     A7 12 62 FC | 	wrlong	arg01, fp
1e610     04 4E 05 F1 | 	add	fp, #4
1e614     A7 14 62 FC | 	wrlong	arg02, fp
1e618     08 4E 85 F1 | 	sub	fp, #8
1e61c     A7 00 68 FC | 	wrlong	#0, fp
1e620     A7 12 02 F6 | 	mov	arg01, fp
1e624     DD E4 05 F1 | 	add	objptr, #221
1e628     F2 14 02 FB | 	rdlong	arg02, objptr
1e62c     14 E4 05 F1 | 	add	objptr, #20
1e630     F2 16 02 FB | 	rdlong	arg03, objptr
1e634     02 16 66 F0 | 	shl	arg03, #2
1e638     08 4E 05 F1 | 	add	fp, #8
1e63c     A7 FA 01 FB | 	rdlong	result1, fp
1e640     FD 16 02 FD | 	qmul	arg03, result1
1e644                 | ' 
1e644                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e644     04 4E 85 F1 | 	sub	fp, #4
1e648     A7 1E 02 FB | 	rdlong	local01, fp
1e64c     04 4E 85 F1 | 	sub	fp, #4
1e650     01 16 06 F6 | 	mov	arg03, #1
1e654     0A 00 00 FF 
1e658     DB E5 05 F1 | 	add	objptr, ##5595
1e65c     18 20 62 FD | 	getqx	local02
1e660     0F 21 02 F1 | 	add	local02, local01
1e664     10 15 02 F1 | 	add	arg02, local02
1e668     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e66c     0B 00 00 FF 
1e670     CC E4 85 F1 | 	sub	objptr, ##5836
1e674                 | ' return c
1e674     A7 FA 01 FB | 	rdlong	result1, fp
1e678     A7 F0 03 F6 | 	mov	ptra, fp
1e67c     B2 00 A0 FD | 	call	#popregs_
1e680                 | _hg010b_spin2_getpixel2_ret
1e680     2D 00 64 FD | 	ret
1e684                 | 
1e684                 | '   
1e684                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e684                 | ' 
1e684                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e684                 | _hg010b_spin2_fastline
1e684     02 4A 05 F6 | 	mov	COUNT_, #2
1e688     A8 00 A0 FD | 	call	#pushregs_
1e68c     09 1F 02 F6 | 	mov	local01, arg01
1e690     0A 21 02 F6 | 	mov	local02, arg02
1e694                 | ' 
1e694                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e694     00 16 56 F2 | 	cmps	arg03, #0 wc
1e698     F4 00 90 CD |  if_b	jmp	#LR__2450
1e69c     01 00 00 FF 
1e6a0     2A E4 05 F1 | 	add	objptr, ##554
1e6a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1e6a8     01 00 00 FF 
1e6ac     2A E4 85 F1 | 	sub	objptr, ##554
1e6b0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e6b4     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e6b8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e6bc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e6c0     CC 00 90 CD |  if_b	jmp	#LR__2450
1e6c4     01 00 00 FF 
1e6c8     26 E4 05 F1 | 	add	objptr, ##550
1e6cc     F2 1A 02 FB | 	rdlong	arg05, objptr
1e6d0     01 00 00 FF 
1e6d4     26 E4 85 F1 | 	sub	objptr, ##550
1e6d8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e6dc     01 00 00 1F 
1e6e0     26 E4 05 11 |  if_a	add	objptr, ##550
1e6e4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e6e8     01 00 00 1F 
1e6ec     26 E4 85 11 |  if_a	sub	objptr, ##550
1e6f0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e6f4                 | '   return
1e6f4     98 00 90 1D |  if_a	jmp	#LR__2450
1e6f8     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e6fc     0F 1B 02 16 |  if_a	mov	arg05, local01
1e700     10 1F 02 16 |  if_a	mov	local01, local02
1e704     0D 21 02 16 |  if_a	mov	local02, arg05
1e708     00 1E 56 F2 | 	cmps	local01, #0 wc
1e70c     00 1E 06 C6 |  if_b	mov	local01, #0
1e710     01 00 00 FF 
1e714     26 E4 05 F1 | 	add	objptr, ##550
1e718     F2 1A 02 FB | 	rdlong	arg05, objptr
1e71c     01 00 00 FF 
1e720     26 E4 85 F1 | 	sub	objptr, ##550
1e724     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e728     01 00 00 3F 
1e72c     26 E4 05 31 |  if_ae	add	objptr, ##550
1e730     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e734     01 00 00 3F 
1e738     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e73c     DD E4 05 F1 | 	add	objptr, #221
1e740     F2 12 02 FB | 	rdlong	arg01, objptr
1e744     14 E4 05 F1 | 	add	objptr, #20
1e748     F2 1A 02 FB | 	rdlong	arg05, objptr
1e74c     02 1A 66 F0 | 	shl	arg05, #2
1e750     0B 1B 02 FD | 	qmul	arg05, arg03
1e754                 | ' if x1>x2
1e754                 | '   x1,x2:=x2,x1
1e754                 | ' if x1<0 
1e754                 | '   x1:=0
1e754                 | ' if x2>=xres
1e754                 | '   x2:=xres-1  
1e754     01 20 86 31 |  if_ae	sub	local02, #1
1e758                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e758     01 16 06 F6 | 	mov	arg03, #1
1e75c     10 17 02 F1 | 	add	arg03, local02
1e760     0F 17 82 F1 | 	sub	arg03, local01
1e764     0C 15 02 F6 | 	mov	arg02, arg04
1e768     00 18 06 F6 | 	mov	arg04, #0
1e76c     01 1A 06 F6 | 	mov	arg05, #1
1e770     0A 00 00 FF 
1e774     DB E5 05 F1 | 	add	objptr, ##5595
1e778     18 20 62 FD | 	getqx	local02
1e77c     0F 21 02 F1 | 	add	local02, local01
1e780     10 13 02 F1 | 	add	arg01, local02
1e784     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e788     0B 00 00 FF 
1e78c     CC E4 85 F1 | 	sub	objptr, ##5836
1e790                 | LR__2450
1e790     A7 F0 03 F6 | 	mov	ptra, fp
1e794     B2 00 A0 FD | 	call	#popregs_
1e798                 | _hg010b_spin2_fastline_ret
1e798     2D 00 64 FD | 	ret
1e79c                 | 
1e79c                 | ' 
1e79c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e79c                 | _hg010b_spin2_draw
1e79c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e7a0     A8 00 A0 FD | 	call	#pushregs_
1e7a4     09 1F 02 F6 | 	mov	local01, arg01
1e7a8     0A 21 02 F6 | 	mov	local02, arg02
1e7ac     0B 23 02 F6 | 	mov	local03, arg03
1e7b0     0C 25 02 F6 | 	mov	local04, arg04
1e7b4     0D 27 02 F6 | 	mov	local05, arg05
1e7b8                 | ' 
1e7b8                 | ' if (y1==y2)
1e7b8     12 21 0A F2 | 	cmp	local02, local04 wz
1e7bc     18 00 90 5D |  if_ne	jmp	#LR__2460
1e7c0                 | '   fastline(x1,x2,y1,c)
1e7c0     0F 13 02 F6 | 	mov	arg01, local01
1e7c4     11 15 02 F6 | 	mov	arg02, local03
1e7c8     10 17 02 F6 | 	mov	arg03, local02
1e7cc     13 19 02 F6 | 	mov	arg04, local05
1e7d0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e7d4     F8 00 90 FD | 	jmp	#LR__2466
1e7d8                 | LR__2460
1e7d8                 | ' else  
1e7d8                 | '   x:=x1
1e7d8     0F 29 02 F6 | 	mov	local06, local01
1e7dc                 | '   y:=y1
1e7dc     10 2B 02 F6 | 	mov	local07, local02
1e7e0                 | ' 
1e7e0                 | '   if (x1<x2) 
1e7e0     11 1F 52 F2 | 	cmps	local01, local03 wc
1e7e4                 | '     xi:=1
1e7e4     01 2C 06 C6 |  if_b	mov	local08, #1
1e7e8                 | '     dx:=x2-x1
1e7e8     11 2F 02 C6 |  if_b	mov	local09, local03
1e7ec     0F 2F 82 C1 |  if_b	sub	local09, local01
1e7f0                 | '   else
1e7f0                 | '     xi:=-1
1e7f0     01 2C 66 36 |  if_ae	neg	local08, #1
1e7f4                 | '     dx:=x1-x2
1e7f4     11 1F 82 31 |  if_ae	sub	local01, local03
1e7f8     0F 2F 02 36 |  if_ae	mov	local09, local01
1e7fc                 | '   
1e7fc                 | '   if (y1<y2) 
1e7fc     12 21 52 F2 | 	cmps	local02, local04 wc
1e800                 | '     yi:=1
1e800     01 30 06 C6 |  if_b	mov	local10, #1
1e804                 | '     dy:=y2-y1
1e804     12 33 02 C6 |  if_b	mov	local11, local04
1e808     10 33 82 C1 |  if_b	sub	local11, local02
1e80c                 | '   else
1e80c                 | '     yi:=-1
1e80c     01 30 66 36 |  if_ae	neg	local10, #1
1e810                 | '     dy:=y1-y2
1e810     12 21 82 31 |  if_ae	sub	local02, local04
1e814     10 33 02 36 |  if_ae	mov	local11, local02
1e818                 | ' 
1e818                 | '   putpixel(x,y,c)
1e818     13 17 02 F6 | 	mov	arg03, local05
1e81c     14 13 02 F6 | 	mov	arg01, local06
1e820     15 15 02 F6 | 	mov	arg02, local07
1e824     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e828                 | ' 
1e828                 | '   if (dx>dy)
1e828     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e82c     50 00 90 ED |  if_be	jmp	#LR__2462
1e830                 | '     ai:=(dy-dx)*2
1e830     19 35 02 F6 | 	mov	local12, local11
1e834     17 35 82 F1 | 	sub	local12, local09
1e838     01 34 66 F0 | 	shl	local12, #1
1e83c                 | '     bi:=dy*2
1e83c     01 32 66 F0 | 	shl	local11, #1
1e840     19 37 02 F6 | 	mov	local13, local11
1e844                 | '     d:= bi-dx
1e844     1B 39 02 F6 | 	mov	local14, local13
1e848     17 39 82 F1 | 	sub	local14, local09
1e84c                 | '     repeat while (x<>x2) 
1e84c                 | LR__2461
1e84c     11 29 0A F2 | 	cmp	local06, local03 wz
1e850     7C 00 90 AD |  if_e	jmp	#LR__2465
1e854                 | '       if (d>=0) 
1e854     00 38 56 F2 | 	cmps	local14, #0 wc
1e858                 | '         x+=xi
1e858     16 29 02 31 |  if_ae	add	local06, local08
1e85c                 | '         y+=yi
1e85c     18 2B 02 31 |  if_ae	add	local07, local10
1e860                 | '         d+=ai
1e860     1A 39 02 31 |  if_ae	add	local14, local12
1e864                 | '       else
1e864                 | '         d+=bi
1e864     1B 39 02 C1 |  if_b	add	local14, local13
1e868                 | '         x+=xi
1e868     16 29 02 C1 |  if_b	add	local06, local08
1e86c                 | '       putpixel(x,y,c)
1e86c     14 13 02 F6 | 	mov	arg01, local06
1e870     15 15 02 F6 | 	mov	arg02, local07
1e874     13 17 02 F6 | 	mov	arg03, local05
1e878     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e87c     CC FF 9F FD | 	jmp	#LR__2461
1e880                 | LR__2462
1e880                 | '   else
1e880                 | '     ai:=(dx-dy)*2
1e880     17 35 02 F6 | 	mov	local12, local09
1e884     19 35 82 F1 | 	sub	local12, local11
1e888     01 34 66 F0 | 	shl	local12, #1
1e88c                 | '     bi:=dx*2
1e88c     01 2E 66 F0 | 	shl	local09, #1
1e890     17 37 02 F6 | 	mov	local13, local09
1e894                 | '     d:=bi-dy
1e894     1B 39 02 F6 | 	mov	local14, local13
1e898     19 39 82 F1 | 	sub	local14, local11
1e89c                 | '     repeat while (y<>y2)
1e89c                 | LR__2463
1e89c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e8a0     2C 00 90 AD |  if_e	jmp	#LR__2464
1e8a4                 | '       if (d>=0)
1e8a4     00 38 56 F2 | 	cmps	local14, #0 wc
1e8a8                 | '         x+=xi
1e8a8     16 29 02 31 |  if_ae	add	local06, local08
1e8ac                 | '         y+=yi
1e8ac     18 2B 02 31 |  if_ae	add	local07, local10
1e8b0                 | '         d+=ai
1e8b0     1A 39 02 31 |  if_ae	add	local14, local12
1e8b4                 | '       else
1e8b4                 | '         d+=bi
1e8b4     1B 39 02 C1 |  if_b	add	local14, local13
1e8b8                 | '         y+=yi
1e8b8     18 2B 02 C1 |  if_b	add	local07, local10
1e8bc                 | '       putpixel(x, y,c)
1e8bc     14 13 02 F6 | 	mov	arg01, local06
1e8c0     15 15 02 F6 | 	mov	arg02, local07
1e8c4     13 17 02 F6 | 	mov	arg03, local05
1e8c8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e8cc     CC FF 9F FD | 	jmp	#LR__2463
1e8d0                 | LR__2464
1e8d0                 | LR__2465
1e8d0                 | LR__2466
1e8d0     A7 F0 03 F6 | 	mov	ptra, fp
1e8d4     B2 00 A0 FD | 	call	#popregs_
1e8d8                 | _hg010b_spin2_draw_ret
1e8d8     2D 00 64 FD | 	ret
1e8dc                 | 
1e8dc                 | '  
1e8dc                 | ' pub fillpush(val) 
1e8dc                 | _hg010b_spin2_fillpush
1e8dc                 | ' fillstack[fillptr]:=val
1e8dc     0B 00 00 FF 
1e8e0     BA E4 05 F1 | 	add	objptr, ##5818
1e8e4     F2 00 02 FB | 	rdlong	_var01, objptr
1e8e8     02 00 66 F0 | 	shl	_var01, #2
1e8ec     0A 00 00 FF 
1e8f0     00 E4 85 F1 | 	sub	objptr, ##5120
1e8f4     F2 00 02 F1 | 	add	_var01, objptr
1e8f8     00 13 62 FC | 	wrlong	arg01, _var01
1e8fc                 | ' fillptr+=1   
1e8fc     0A 00 00 FF 
1e900     00 E4 05 F1 | 	add	objptr, ##5120
1e904     F2 00 02 FB | 	rdlong	_var01, objptr
1e908     01 00 06 F1 | 	add	_var01, #1
1e90c     F2 00 62 FC | 	wrlong	_var01, objptr
1e910     0B 00 00 FF 
1e914     BA E4 85 F1 | 	sub	objptr, ##5818
1e918                 | _hg010b_spin2_fillpush_ret
1e918     2D 00 64 FD | 	ret
1e91c                 | 
1e91c                 | ' 
1e91c                 | '     
1e91c                 | ' pub fillpop() : val
1e91c                 | _hg010b_spin2_fillpop
1e91c                 | ' 
1e91c                 | ' fillptr-=1
1e91c     0B 00 00 FF 
1e920     BA E4 05 F1 | 	add	objptr, ##5818
1e924     F2 FA 01 FB | 	rdlong	result1, objptr
1e928     01 FA 85 F1 | 	sub	result1, #1
1e92c     F2 FA 61 FC | 	wrlong	result1, objptr
1e930                 | ' if fillptr<0
1e930     0B 00 00 FF 
1e934     BA E4 85 F1 | 	sub	objptr, ##5818
1e938     00 FA 55 F2 | 	cmps	result1, #0 wc
1e93c                 | '   fillptr:=0
1e93c     0B 00 00 CF 
1e940     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e944     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e948     0B 00 00 CF 
1e94c     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e950                 | '   val:=-12345
1e950     E7 FF 7F CF 
1e954     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e958     28 00 90 CD |  if_b	jmp	#LR__2470
1e95c                 | ' else 
1e95c                 | '   val:=fillstack[fillptr]
1e95c     0B 00 00 FF 
1e960     BA E4 05 F1 | 	add	objptr, ##5818
1e964     F2 00 02 FB | 	rdlong	_var01, objptr
1e968     02 00 66 F0 | 	shl	_var01, #2
1e96c     0A 00 00 FF 
1e970     00 E4 85 F1 | 	sub	objptr, ##5120
1e974     F2 00 02 F1 | 	add	_var01, objptr
1e978     00 01 02 FB | 	rdlong	_var01, _var01
1e97c     01 00 00 FF 
1e980     BA E4 85 F1 | 	sub	objptr, ##698
1e984                 | LR__2470
1e984                 | ' return val
1e984     00 FB 01 F6 | 	mov	result1, _var01
1e988                 | _hg010b_spin2_fillpop_ret
1e988     2D 00 64 FD | 	ret
1e98c                 | 
1e98c                 | ' 
1e98c                 | '       
1e98c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e98c                 | _hg010b_spin2_fill
1e98c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e990     A8 00 A0 FD | 	call	#pushregs_
1e994                 | ' 
1e994                 | ' newcolor:=newcolor & 255
1e994     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e998                 | ' oldcolor:=oldcolor & 255
1e998     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e99c                 | ' 
1e99c                 | ' if (oldcolor == newcolor) 
1e99c     0F 21 0A F2 | 	cmp	local02, local01 wz
1e9a0                 | '   return
1e9a0     70 02 90 AD |  if_e	jmp	#LR__2489
1e9a4                 | ' 
1e9a4                 | ' fillptr:=0
1e9a4     0B 00 00 FF 
1e9a8     BA E4 05 F1 | 	add	objptr, ##5818
1e9ac     F2 00 68 FC | 	wrlong	#0, objptr
1e9b0                 | ' fillmax:=0
1e9b0     04 E4 05 F1 | 	add	objptr, #4
1e9b4     F2 00 68 FC | 	wrlong	#0, objptr
1e9b8     0B 00 00 FF 
1e9bc     BE E4 85 F1 | 	sub	objptr, ##5822
1e9c0                 | ' fillpush(x)
1e9c0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e9c4                 | ' fillpush(y)
1e9c4     0A 13 02 F6 | 	mov	arg01, arg02
1e9c8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e9cc                 | ' y:=fillpop()
1e9cc     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e9d0     FD 22 02 F6 | 	mov	local03, result1
1e9d4                 | ' x:=fillpop()
1e9d4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e9d8     FD 24 02 F6 | 	mov	local04, result1
1e9dc                 | ' 'pinhigh(38)
1e9dc                 | ' repeat while (x>-1)       
1e9dc                 | LR__2480
1e9dc     00 24 56 F2 | 	cmps	local04, #0 wc
1e9e0     30 02 90 CD |  if_b	jmp	#LR__2488
1e9e4                 | '  ' pintoggle(39)
1e9e4                 | '   x1 := x
1e9e4     12 27 02 F6 | 	mov	local05, local04
1e9e8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e9e8                 | LR__2481
1e9e8     00 28 06 F6 | 	mov	local06, #0
1e9ec     00 2A 06 F6 | 	mov	local07, #0
1e9f0     00 26 56 F2 | 	cmps	local05, #0 wc
1e9f4     01 2A 66 36 |  if_ae	neg	local07, #1
1e9f8     00 2A 0E F2 | 	cmp	local07, #0 wz
1e9fc     00 28 26 56 |  if_ne	not	local06, #0
1ea00     00 2C 06 F6 | 	mov	local08, #0
1ea04     00 2E 06 F6 | 	mov	local09, #0
1ea08     11 15 02 F6 | 	mov	arg02, local03
1ea0c     13 13 02 F6 | 	mov	arg01, local05
1ea10     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ea14     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea18     00 2E 26 A6 |  if_e	not	local09, #0
1ea1c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea20     00 2C 26 56 |  if_ne	not	local08, #0
1ea24     16 29 CA F7 | 	test	local06, local08 wz
1ea28                 | '     x1--
1ea28     01 26 86 51 |  if_ne	sub	local05, #1
1ea2c     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1ea30                 | '   x1++
1ea30     01 26 06 F1 | 	add	local05, #1
1ea34                 | '   spanabove := 0
1ea34     00 30 06 F6 | 	mov	local10, #0
1ea38                 | '   spanbelow := 0
1ea38     00 32 06 F6 | 	mov	local11, #0
1ea3c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1ea3c                 | LR__2482
1ea3c     00 28 06 F6 | 	mov	local06, #0
1ea40     02 00 00 FF 
1ea44     00 26 56 F2 | 	cmps	local05, ##1024 wc
1ea48     00 28 26 C6 |  if_b	not	local06, #0
1ea4c     00 2C 06 F6 | 	mov	local08, #0
1ea50     00 2E 06 F6 | 	mov	local09, #0
1ea54     11 15 02 F6 | 	mov	arg02, local03
1ea58     13 13 02 F6 | 	mov	arg01, local05
1ea5c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ea60     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea64     00 2E 26 A6 |  if_e	not	local09, #0
1ea68     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea6c     00 2C 26 56 |  if_ne	not	local08, #0
1ea70     16 29 CA F7 | 	test	local06, local08 wz
1ea74     88 01 90 AD |  if_e	jmp	#LR__2487
1ea78                 | '     putpixel2 (x1,y, newcolor & 255)
1ea78     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1ea7c     13 13 02 F6 | 	mov	arg01, local05
1ea80     11 15 02 F6 | 	mov	arg02, local03
1ea84     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1ea88                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1ea88     00 28 06 F6 | 	mov	local06, #0
1ea8c     00 2A 06 F6 | 	mov	local07, #0
1ea90     00 30 0E F2 | 	cmp	local10, #0 wz
1ea94     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1ea98     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1ea9c     00 2A 0E F2 | 	cmp	local07, #0 wz
1eaa0     00 28 26 56 |  if_ne	not	local06, #0
1eaa4     00 2C 06 F6 | 	mov	local08, #0
1eaa8     00 2E 06 F6 | 	mov	local09, #0
1eaac     11 15 02 F6 | 	mov	arg02, local03
1eab0     01 14 86 F1 | 	sub	arg02, #1
1eab4     13 13 02 F6 | 	mov	arg01, local05
1eab8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eabc     10 FB 09 F2 | 	cmp	result1, local02 wz
1eac0     00 2E 26 A6 |  if_e	not	local09, #0
1eac4     00 2E 0E F2 | 	cmp	local09, #0 wz
1eac8     00 2C 26 56 |  if_ne	not	local08, #0
1eacc     16 29 CA F7 | 	test	local06, local08 wz
1ead0     1C 00 90 AD |  if_e	jmp	#LR__2483
1ead4                 | '       fillpush(x1)
1ead4     13 13 02 F6 | 	mov	arg01, local05
1ead8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1eadc                 | '       fillpush(y-1)
1eadc     11 13 02 F6 | 	mov	arg01, local03
1eae0     01 12 86 F1 | 	sub	arg01, #1
1eae4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eae8                 | '       spanabove := 1 
1eae8     01 30 06 F6 | 	mov	local10, #1
1eaec     4C 00 90 FD | 	jmp	#LR__2484
1eaf0                 | LR__2483
1eaf0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1eaf0     00 28 06 F6 | 	mov	local06, #0
1eaf4     00 2A 06 F6 | 	mov	local07, #0
1eaf8     00 30 0E F2 | 	cmp	local10, #0 wz
1eafc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1eb00     01 2A 66 16 |  if_a	neg	local07, #1
1eb04     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb08     00 28 26 56 |  if_ne	not	local06, #0
1eb0c     00 2C 06 F6 | 	mov	local08, #0
1eb10     00 2E 06 F6 | 	mov	local09, #0
1eb14     11 15 02 F6 | 	mov	arg02, local03
1eb18     01 14 86 F1 | 	sub	arg02, #1
1eb1c     13 13 02 F6 | 	mov	arg01, local05
1eb20     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eb24     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb28     00 2E 26 56 |  if_ne	not	local09, #0
1eb2c     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb30     00 2C 26 56 |  if_ne	not	local08, #0
1eb34     16 29 CA F7 | 	test	local06, local08 wz
1eb38                 | '       spanabove := 0 
1eb38     00 30 06 56 |  if_ne	mov	local10, #0
1eb3c                 | LR__2484
1eb3c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1eb3c     00 28 06 F6 | 	mov	local06, #0
1eb40     00 2A 06 F6 | 	mov	local07, #0
1eb44     00 32 0E F2 | 	cmp	local11, #0 wz
1eb48     01 00 00 AF 
1eb4c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1eb50     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1eb54     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb58     00 28 26 56 |  if_ne	not	local06, #0
1eb5c     00 2C 06 F6 | 	mov	local08, #0
1eb60     00 2E 06 F6 | 	mov	local09, #0
1eb64     11 15 02 F6 | 	mov	arg02, local03
1eb68     01 14 06 F1 | 	add	arg02, #1
1eb6c     13 13 02 F6 | 	mov	arg01, local05
1eb70     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eb74     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb78     00 2E 26 A6 |  if_e	not	local09, #0
1eb7c     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb80     00 2C 26 56 |  if_ne	not	local08, #0
1eb84     16 29 CA F7 | 	test	local06, local08 wz
1eb88     1C 00 90 AD |  if_e	jmp	#LR__2485
1eb8c                 | '       fillpush(x1)
1eb8c     13 13 02 F6 | 	mov	arg01, local05
1eb90     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eb94                 | '       fillpush(y + 1)
1eb94     11 13 02 F6 | 	mov	arg01, local03
1eb98     01 12 06 F1 | 	add	arg01, #1
1eb9c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1eba0                 | '       spanBelow := 1
1eba0     01 32 06 F6 | 	mov	local11, #1
1eba4     50 00 90 FD | 	jmp	#LR__2486
1eba8                 | LR__2485
1eba8                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1eba8     00 28 06 F6 | 	mov	local06, #0
1ebac     00 2A 06 F6 | 	mov	local07, #0
1ebb0     00 32 0E F2 | 	cmp	local11, #0 wz
1ebb4     01 00 00 5F 
1ebb8     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ebbc     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ebc0     00 2A 0E F2 | 	cmp	local07, #0 wz
1ebc4     00 28 26 56 |  if_ne	not	local06, #0
1ebc8     00 2C 06 F6 | 	mov	local08, #0
1ebcc     00 2E 06 F6 | 	mov	local09, #0
1ebd0     11 15 02 F6 | 	mov	arg02, local03
1ebd4     01 14 06 F1 | 	add	arg02, #1
1ebd8     13 13 02 F6 | 	mov	arg01, local05
1ebdc     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ebe0     10 FB 09 F2 | 	cmp	result1, local02 wz
1ebe4     00 2E 26 56 |  if_ne	not	local09, #0
1ebe8     00 2E 0E F2 | 	cmp	local09, #0 wz
1ebec     00 2C 26 56 |  if_ne	not	local08, #0
1ebf0     16 29 CA F7 | 	test	local06, local08 wz
1ebf4                 | '       spanbelow := 0
1ebf4     00 32 06 56 |  if_ne	mov	local11, #0
1ebf8                 | LR__2486
1ebf8                 | '     x1++
1ebf8     01 26 06 F1 | 	add	local05, #1
1ebfc     3C FE 9F FD | 	jmp	#LR__2482
1ec00                 | LR__2487
1ec00                 | '   y:=fillpop()
1ec00     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec04     FD 22 02 F6 | 	mov	local03, result1
1ec08                 | '   x:=fillpop()
1ec08     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec0c     FD 24 02 F6 | 	mov	local04, result1
1ec10     C8 FD 9F FD | 	jmp	#LR__2480
1ec14                 | LR__2488
1ec14                 | LR__2489
1ec14     A7 F0 03 F6 | 	mov	ptra, fp
1ec18     B2 00 A0 FD | 	call	#popregs_
1ec1c                 | _hg010b_spin2_fill_ret
1ec1c     2D 00 64 FD | 	ret
1ec20                 | 
1ec20                 | ' 'pinlow(38)    
1ec20                 | ' 
1ec20                 | ' '-- A filled circle -----------------------------------------------------
1ec20                 | ' 
1ec20                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ec20                 | _hg010b_spin2_fcircle
1ec20     08 4A 05 F6 | 	mov	COUNT_, #8
1ec24     A8 00 A0 FD | 	call	#pushregs_
1ec28     0B 1F 02 F6 | 	mov	local01, arg03
1ec2c     FF FF 7F FF 
1ec30     FE 1F 06 FD | 	qmul	local01, ##-2
1ec34     09 21 02 F6 | 	mov	local02, arg01
1ec38     0A 23 02 F6 | 	mov	local03, arg02
1ec3c     0C 25 02 F6 | 	mov	local04, arg04
1ec40                 | ' 
1ec40                 | ' d:=5-4*r
1ec40     0F 19 02 F6 | 	mov	arg04, local01
1ec44     02 18 66 F0 | 	shl	arg04, #2
1ec48     05 26 06 F6 | 	mov	local05, #5
1ec4c     0C 27 82 F1 | 	sub	local05, arg04
1ec50                 | ' x:=0
1ec50     00 28 06 F6 | 	mov	local06, #0
1ec54                 | ' y:=r
1ec54                 | ' da:=(-2*r+5)*4
1ec54                 | ' db:=3*4
1ec54     0C 2A 06 F6 | 	mov	local07, #12
1ec58                 | ' repeat while (x<=y) 
1ec58     18 2C 62 FD | 	getqx	local08
1ec5c     05 2C 06 F1 | 	add	local08, #5
1ec60     02 2C 66 F0 | 	shl	local08, #2
1ec64                 | LR__2490
1ec64     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ec68     B4 00 90 1D |  if_a	jmp	#LR__2492
1ec6c                 | '   fastline(x0-x,x0+x,y0-y,c)
1ec6c     10 13 02 F6 | 	mov	arg01, local02
1ec70     14 13 82 F1 | 	sub	arg01, local06
1ec74     10 15 02 F6 | 	mov	arg02, local02
1ec78     14 15 02 F1 | 	add	arg02, local06
1ec7c     11 17 02 F6 | 	mov	arg03, local03
1ec80     0F 17 82 F1 | 	sub	arg03, local01
1ec84     12 19 02 F6 | 	mov	arg04, local04
1ec88     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ec8c                 | '   fastline(x0-x,x0+x,y0+y,c)
1ec8c     10 13 02 F6 | 	mov	arg01, local02
1ec90     14 13 82 F1 | 	sub	arg01, local06
1ec94     10 15 02 F6 | 	mov	arg02, local02
1ec98     14 15 02 F1 | 	add	arg02, local06
1ec9c     11 17 02 F6 | 	mov	arg03, local03
1eca0     0F 17 02 F1 | 	add	arg03, local01
1eca4     12 19 02 F6 | 	mov	arg04, local04
1eca8     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ecac                 | '   fastline(x0-y,x0+y,y0-x,c)
1ecac     10 13 02 F6 | 	mov	arg01, local02
1ecb0     0F 13 82 F1 | 	sub	arg01, local01
1ecb4     10 15 02 F6 | 	mov	arg02, local02
1ecb8     0F 15 02 F1 | 	add	arg02, local01
1ecbc     11 17 02 F6 | 	mov	arg03, local03
1ecc0     14 17 82 F1 | 	sub	arg03, local06
1ecc4     12 19 02 F6 | 	mov	arg04, local04
1ecc8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1eccc                 | '   fastline(x0-y,x0+y,y0+x,c)
1eccc     10 13 02 F6 | 	mov	arg01, local02
1ecd0     0F 13 82 F1 | 	sub	arg01, local01
1ecd4     10 15 02 F6 | 	mov	arg02, local02
1ecd8     0F 15 02 F1 | 	add	arg02, local01
1ecdc     11 17 02 F6 | 	mov	arg03, local03
1ece0     14 17 02 F1 | 	add	arg03, local06
1ece4     12 19 02 F6 | 	mov	arg04, local04
1ece8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ecec                 | '   if d>0 
1ecec     01 26 56 F2 | 	cmps	local05, #1 wc
1ecf0     18 00 90 CD |  if_b	jmp	#LR__2491
1ecf4                 | '     d+=da
1ecf4     16 27 02 F1 | 	add	local05, local08
1ecf8                 | '     y-=1
1ecf8     01 1E 86 F1 | 	sub	local01, #1
1ecfc                 | '     x+=1
1ecfc     01 28 06 F1 | 	add	local06, #1
1ed00                 | '     da+=4*4
1ed00     10 2C 06 F1 | 	add	local08, #16
1ed04                 | '     db+=2*4
1ed04     08 2A 06 F1 | 	add	local07, #8
1ed08     58 FF 9F FD | 	jmp	#LR__2490
1ed0c                 | LR__2491
1ed0c                 | '   else
1ed0c                 | '     d+=db
1ed0c     15 27 02 F1 | 	add	local05, local07
1ed10                 | '     x+=1
1ed10     01 28 06 F1 | 	add	local06, #1
1ed14                 | '     da+=2*4
1ed14     08 2C 06 F1 | 	add	local08, #8
1ed18                 | '     db+=2*4
1ed18     08 2A 06 F1 | 	add	local07, #8
1ed1c     44 FF 9F FD | 	jmp	#LR__2490
1ed20                 | LR__2492
1ed20     A7 F0 03 F6 | 	mov	ptra, fp
1ed24     B2 00 A0 FD | 	call	#popregs_
1ed28                 | _hg010b_spin2_fcircle_ret
1ed28     2D 00 64 FD | 	ret
1ed2c                 | 
1ed2c                 | '  
1ed2c                 | ' '-- A circle ------------------------------------------------------------ 
1ed2c                 | '  
1ed2c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ed2c                 | _hg010b_spin2_circle
1ed2c     08 4A 05 F6 | 	mov	COUNT_, #8
1ed30     A8 00 A0 FD | 	call	#pushregs_
1ed34     0B 1F 02 F6 | 	mov	local01, arg03
1ed38     FF FF 7F FF 
1ed3c     FE 1F 06 FD | 	qmul	local01, ##-2
1ed40     09 21 02 F6 | 	mov	local02, arg01
1ed44     0A 23 02 F6 | 	mov	local03, arg02
1ed48     0C 25 02 F6 | 	mov	local04, arg04
1ed4c                 | ' 
1ed4c                 | '  
1ed4c                 | ' d:=5-4*r
1ed4c     0F 19 02 F6 | 	mov	arg04, local01
1ed50     02 18 66 F0 | 	shl	arg04, #2
1ed54     05 26 06 F6 | 	mov	local05, #5
1ed58     0C 27 82 F1 | 	sub	local05, arg04
1ed5c                 | ' x:=0
1ed5c     00 28 06 F6 | 	mov	local06, #0
1ed60                 | ' y:=r
1ed60                 | ' da:=(-2*r+5)*4
1ed60                 | ' db:=3*4
1ed60     0C 2A 06 F6 | 	mov	local07, #12
1ed64                 | ' repeat while (x<=y) 
1ed64     18 2C 62 FD | 	getqx	local08
1ed68     05 2C 06 F1 | 	add	local08, #5
1ed6c     02 2C 66 F0 | 	shl	local08, #2
1ed70                 | LR__2500
1ed70     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ed74     F4 00 90 1D |  if_a	jmp	#LR__2502
1ed78                 | '   putpixel(x0-x,y0-y,c)
1ed78     10 13 02 F6 | 	mov	arg01, local02
1ed7c     14 13 82 F1 | 	sub	arg01, local06
1ed80     11 15 02 F6 | 	mov	arg02, local03
1ed84     0F 15 82 F1 | 	sub	arg02, local01
1ed88     12 17 02 F6 | 	mov	arg03, local04
1ed8c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ed90                 | '   putpixel(x0-x,y0+y,c)
1ed90     10 13 02 F6 | 	mov	arg01, local02
1ed94     14 13 82 F1 | 	sub	arg01, local06
1ed98     11 15 02 F6 | 	mov	arg02, local03
1ed9c     0F 15 02 F1 | 	add	arg02, local01
1eda0     12 17 02 F6 | 	mov	arg03, local04
1eda4     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eda8                 | '   putpixel(x0+x,y0-y,c)
1eda8     10 13 02 F6 | 	mov	arg01, local02
1edac     14 13 02 F1 | 	add	arg01, local06
1edb0     11 15 02 F6 | 	mov	arg02, local03
1edb4     0F 15 82 F1 | 	sub	arg02, local01
1edb8     12 17 02 F6 | 	mov	arg03, local04
1edbc     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1edc0                 | '   putpixel(x0+x,y0+y,c)
1edc0     10 13 02 F6 | 	mov	arg01, local02
1edc4     14 13 02 F1 | 	add	arg01, local06
1edc8     11 15 02 F6 | 	mov	arg02, local03
1edcc     0F 15 02 F1 | 	add	arg02, local01
1edd0     12 17 02 F6 | 	mov	arg03, local04
1edd4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1edd8                 | '   putpixel(x0-y,y0-x,c)
1edd8     10 13 02 F6 | 	mov	arg01, local02
1eddc     0F 13 82 F1 | 	sub	arg01, local01
1ede0     11 15 02 F6 | 	mov	arg02, local03
1ede4     14 15 82 F1 | 	sub	arg02, local06
1ede8     12 17 02 F6 | 	mov	arg03, local04
1edec     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1edf0                 | '   putpixel(x0-y,y0+x,c)
1edf0     10 13 02 F6 | 	mov	arg01, local02
1edf4     0F 13 82 F1 | 	sub	arg01, local01
1edf8     11 15 02 F6 | 	mov	arg02, local03
1edfc     14 15 02 F1 | 	add	arg02, local06
1ee00     12 17 02 F6 | 	mov	arg03, local04
1ee04     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee08                 | '   putpixel(x0+y,y0-x,c)
1ee08     10 13 02 F6 | 	mov	arg01, local02
1ee0c     0F 13 02 F1 | 	add	arg01, local01
1ee10     11 15 02 F6 | 	mov	arg02, local03
1ee14     14 15 82 F1 | 	sub	arg02, local06
1ee18     12 17 02 F6 | 	mov	arg03, local04
1ee1c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee20                 | '   putpixel(x0+y,y0+x,c)
1ee20     10 13 02 F6 | 	mov	arg01, local02
1ee24     0F 13 02 F1 | 	add	arg01, local01
1ee28     11 15 02 F6 | 	mov	arg02, local03
1ee2c     14 15 02 F1 | 	add	arg02, local06
1ee30     12 17 02 F6 | 	mov	arg03, local04
1ee34     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee38                 | '   if d>0 
1ee38     01 26 56 F2 | 	cmps	local05, #1 wc
1ee3c     18 00 90 CD |  if_b	jmp	#LR__2501
1ee40                 | '     d+=da
1ee40     16 27 02 F1 | 	add	local05, local08
1ee44                 | '     y-=1
1ee44     01 1E 86 F1 | 	sub	local01, #1
1ee48                 | '     x+=1
1ee48     01 28 06 F1 | 	add	local06, #1
1ee4c                 | '     da+=4*4
1ee4c     10 2C 06 F1 | 	add	local08, #16
1ee50                 | '     db+=2*4
1ee50     08 2A 06 F1 | 	add	local07, #8
1ee54     18 FF 9F FD | 	jmp	#LR__2500
1ee58                 | LR__2501
1ee58                 | '   else
1ee58                 | '     d+=db
1ee58     15 27 02 F1 | 	add	local05, local07
1ee5c                 | '     x+=1
1ee5c     01 28 06 F1 | 	add	local06, #1
1ee60                 | '     da+=2*4
1ee60     08 2C 06 F1 | 	add	local08, #8
1ee64                 | '     db+=2*4
1ee64     08 2A 06 F1 | 	add	local07, #8
1ee68     04 FF 9F FD | 	jmp	#LR__2500
1ee6c                 | LR__2502
1ee6c     A7 F0 03 F6 | 	mov	ptra, fp
1ee70     B2 00 A0 FD | 	call	#popregs_
1ee74                 | _hg010b_spin2_circle_ret
1ee74     2D 00 64 FD | 	ret
1ee78                 | 
1ee78                 | '     
1ee78                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ee78                 | ' 
1ee78                 | ' pub frame(x1,y1,x2,y2,c)
1ee78                 | _hg010b_spin2_frame
1ee78     05 4A 05 F6 | 	mov	COUNT_, #5
1ee7c     A8 00 A0 FD | 	call	#pushregs_
1ee80     09 1F 02 F6 | 	mov	local01, arg01
1ee84     0A 21 02 F6 | 	mov	local02, arg02
1ee88     0B 23 02 F6 | 	mov	local03, arg03
1ee8c     0C 25 02 F6 | 	mov	local04, arg04
1ee90     0D 27 02 F6 | 	mov	local05, arg05
1ee94                 | ' 
1ee94                 | ' fastline(x1,x2,y1,c)
1ee94     0F 13 02 F6 | 	mov	arg01, local01
1ee98     11 15 02 F6 | 	mov	arg02, local03
1ee9c     10 17 02 F6 | 	mov	arg03, local02
1eea0     13 19 02 F6 | 	mov	arg04, local05
1eea4     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1eea8                 | ' fastline(x1,x2,y2,c)
1eea8     0F 13 02 F6 | 	mov	arg01, local01
1eeac     11 15 02 F6 | 	mov	arg02, local03
1eeb0     12 17 02 F6 | 	mov	arg03, local04
1eeb4     13 19 02 F6 | 	mov	arg04, local05
1eeb8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1eebc                 | ' line(x1,y1,x1,y2,c)
1eebc     0F 13 02 F6 | 	mov	arg01, local01
1eec0     10 15 02 F6 | 	mov	arg02, local02
1eec4     0F 17 02 F6 | 	mov	arg03, local01
1eec8     12 19 02 F6 | 	mov	arg04, local04
1eecc     13 1B 02 F6 | 	mov	arg05, local05
1eed0                 | ' draw(x1,y1,x2,y2,c)
1eed0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1eed4                 | ' line(x2,y1,x2,y2,c)
1eed4     11 13 02 F6 | 	mov	arg01, local03
1eed8     10 15 02 F6 | 	mov	arg02, local02
1eedc     11 17 02 F6 | 	mov	arg03, local03
1eee0     12 19 02 F6 | 	mov	arg04, local04
1eee4     13 1B 02 F6 | 	mov	arg05, local05
1eee8                 | ' draw(x1,y1,x2,y2,c)
1eee8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1eeec     A7 F0 03 F6 | 	mov	ptra, fp
1eef0     B2 00 A0 FD | 	call	#popregs_
1eef4                 | _hg010b_spin2_frame_ret
1eef4     2D 00 64 FD | 	ret
1eef8                 | 
1eef8                 | ' 
1eef8                 | ' '-- A box (a filled rectangle) ----------------------------------------
1eef8                 | ' 
1eef8                 | ' pub box(x1,y1,x2,y2,c) |yy
1eef8                 | _hg010b_spin2_box
1eef8     06 4A 05 F6 | 	mov	COUNT_, #6
1eefc     A8 00 A0 FD | 	call	#pushregs_
1ef00     09 1F 02 F6 | 	mov	local01, arg01
1ef04     0A 21 02 F6 | 	mov	local02, arg02
1ef08     0B 23 02 F6 | 	mov	local03, arg03
1ef0c     0C 25 02 F6 | 	mov	local04, arg04
1ef10     0D 27 02 F6 | 	mov	local05, arg05
1ef14                 | ' 
1ef14                 | ' repeat yy from y1 to y2
1ef14     10 25 52 F2 | 	cmps	local04, local02 wc
1ef18     01 28 86 F6 | 	negc	local06, #1
1ef1c     14 25 02 F1 | 	add	local04, local06
1ef20                 | LR__2510
1ef20                 | '   fastline(x1,x2,yy,c)
1ef20     0F 13 02 F6 | 	mov	arg01, local01
1ef24     11 15 02 F6 | 	mov	arg02, local03
1ef28     13 19 02 F6 | 	mov	arg04, local05
1ef2c     10 17 02 F6 | 	mov	arg03, local02
1ef30     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef34     14 21 02 F1 | 	add	local02, local06
1ef38     12 21 0A F2 | 	cmp	local02, local04 wz
1ef3c     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1ef40     A7 F0 03 F6 | 	mov	ptra, fp
1ef44     B2 00 A0 FD | 	call	#popregs_
1ef48                 | _hg010b_spin2_box_ret
1ef48     2D 00 64 FD | 	ret
1ef4c                 | 
1ef4c                 | '       
1ef4c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ef4c                 | _hg010b_spin2_putcharxycgf
1ef4c                 | ' 
1ef4c                 | '  
1ef4c                 | ' repeat yy from 0 to 15
1ef4c     00 00 06 F6 | 	mov	_var01, #0
1ef50     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1ef54                 | LR__2520
1ef54                 | ' 
1ef54                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ef54     95 E4 05 F1 | 	add	objptr, #149
1ef58     F2 02 02 FB | 	rdlong	_var02, objptr
1ef5c     0A 02 66 F0 | 	shl	_var02, #10
1ef60     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ef64     01 05 02 F1 | 	add	_var03, _var02
1ef68     0B 03 02 F6 | 	mov	_var02, arg03
1ef6c     04 02 66 F0 | 	shl	_var02, #4
1ef70     01 05 02 F1 | 	add	_var03, _var02
1ef74     00 05 02 F1 | 	add	_var03, _var01
1ef78     02 05 C2 FA | 	rdbyte	_var03, _var03
1ef7c                 | '   asm
1ef7c     00 04 0E F4 | 	testb	_var03, #0 wz
1ef80     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ef84     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ef88     01 04 0E F4 | 	testb	_var03, #1 wz
1ef8c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ef90     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ef94     02 04 0E F4 | 	testb	_var03, #2 wz
1ef98     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ef9c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1efa0     03 04 0E F4 | 	testb	_var03, #3 wz
1efa4     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1efa8     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1efac     04 04 0E F4 | 	testb	_var03, #4 wz
1efb0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1efb4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1efb8     05 04 0E F4 | 	testb	_var03, #5 wz
1efbc     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1efc0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1efc4     06 04 0E F4 | 	testb	_var03, #6 wz
1efc8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1efcc     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1efd0     07 04 0E F4 | 	testb	_var03, #7 wz
1efd4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1efd8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1efdc                 | '   
1efdc                 | '   ccc[0]:=c1
1efdc     99 E5 05 F1 | 	add	objptr, #409
1efe0     F2 06 62 FC | 	wrlong	_var04, objptr
1efe4                 | '   ccc[1]:=c2 
1efe4     04 E4 05 F1 | 	add	objptr, #4
1efe8     F2 08 62 FC | 	wrlong	_var05, objptr
1efec                 | '   long[mailbox0][2]:=8
1efec     49 E4 85 F1 | 	sub	objptr, #73
1eff0     F2 04 02 FB | 	rdlong	_var03, objptr
1eff4     08 04 06 F1 | 	add	_var03, #8
1eff8     02 11 68 FC | 	wrlong	#8, _var03
1effc                 | '   long[mailbox0][1]:=@ccc
1effc     45 E4 05 F1 | 	add	objptr, #69
1f000     F2 04 02 F6 | 	mov	_var03, objptr
1f004     45 E4 85 F1 | 	sub	objptr, #69
1f008     F2 02 02 FB | 	rdlong	_var02, objptr
1f00c     04 02 06 F1 | 	add	_var02, #4
1f010     01 05 62 FC | 	wrlong	_var03, _var02
1f014                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f014     0C E5 85 F1 | 	sub	objptr, #268
1f018     F2 04 02 FB | 	rdlong	_var03, objptr
1f01c     0A 03 02 F6 | 	mov	_var02, arg02
1f020     00 03 02 F1 | 	add	_var02, _var01
1f024     0A 02 66 F0 | 	shl	_var02, #10
1f028     09 0B 02 F6 | 	mov	_var06, arg01
1f02c     02 0A 66 F0 | 	shl	_var06, #2
1f030     05 03 02 F1 | 	add	_var02, _var06
1f034     01 05 02 F1 | 	add	_var03, _var02
1f038     00 00 78 FF 
1f03c     00 04 06 F1 | 	add	_var03, ##-268435456
1f040     0C E5 05 F1 | 	add	objptr, #268
1f044     F2 0A 02 FB | 	rdlong	_var06, objptr
1f048     05 05 62 FC | 	wrlong	_var03, _var06
1f04c                 | '   repeat
1f04c                 | LR__2521
1f04c     F2 04 02 FB | 	rdlong	_var03, objptr
1f050     02 03 02 FB | 	rdlong	_var02, _var03
1f054     00 02 56 F2 | 	cmps	_var02, #0 wc
1f058     F0 FF 9F CD |  if_b	jmp	#LR__2521
1f05c     E9 E5 85 F1 | 	sub	objptr, #489
1f060     01 00 06 F1 | 	add	_var01, #1
1f064     10 00 56 F2 | 	cmps	_var01, #16 wc
1f068     E8 FE 9F CD |  if_b	jmp	#LR__2520
1f06c                 | LR__2522
1f06c                 | _hg010b_spin2_putcharxycgf_ret
1f06c     2D 00 64 FD | 	ret
1f070                 | 
1f070                 | ' 
1f070                 | ' 
1f070                 | ' '**********************************************************************r***
1f070                 | ' '                                                                        *
1f070                 | ' ' Font related functions                                                 *
1f070                 | ' '                                                                        *
1f070                 | ' '*************************************************************************
1f070                 | ' 
1f070                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f070                 | ' 
1f070                 | ' pub setfontfamily(afontnum)
1f070                 | _hg010b_spin2_setfontfamily
1f070                 | ' 
1f070                 | ' font_family:=afontnum
1f070     95 E4 05 F1 | 	add	objptr, #149
1f074     F2 12 62 FC | 	wrlong	arg01, objptr
1f078     95 E4 85 F1 | 	sub	objptr, #149
1f07c                 | ' 'if afontnum==8
1f07c                 | ' '  font_ptr:=@amiga_font
1f07c                 | ' 
1f07c                 | ' if afontnum==4
1f07c     04 12 0E F2 | 	cmp	arg01, #4 wz
1f080                 | '   font_ptr:=@st_font
1f080     08 00 00 AF 
1f084     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f088     08 E4 05 A1 |  if_e	add	objptr, #8
1f08c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f090     08 E4 85 A1 |  if_e	sub	objptr, #8
1f094     08 00 00 AF 
1f098     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f09c                 | ' if afontnum==0
1f09c     00 12 0E F2 | 	cmp	arg01, #0 wz
1f0a0                 | '   font_ptr:=@vga_font
1f0a0     08 E4 05 A1 |  if_e	add	objptr, #8
1f0a4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f0a8     08 E4 85 A1 |  if_e	sub	objptr, #8
1f0ac                 | _hg010b_spin2_setfontfamily_ret
1f0ac     2D 00 64 FD | 	ret
1f0b0                 | 
1f0b0                 | ' 
1f0b0                 | ' '*************************************************************************
1f0b0                 | ' '                                                                        *
1f0b0                 | ' '  Cursor functions                                                      *
1f0b0                 | ' '                                                                        *
1f0b0                 | ' '*************************************************************************
1f0b0                 | ' 
1f0b0                 | ' 
1f0b0                 | ' pub setcursorpos(x,y)
1f0b0                 | _hg010b_spin2_setcursorpos
1f0b0                 | ' 
1f0b0                 | ' ''---------- Set the (x,y) position of cursor
1f0b0                 | ' 
1f0b0                 | ' cursor_x:=x
1f0b0     3C E4 05 F1 | 	add	objptr, #60
1f0b4     F2 12 52 FC | 	wrword	arg01, objptr
1f0b8                 | ' cursor_y:=y
1f0b8     02 E4 05 F1 | 	add	objptr, #2
1f0bc     F2 14 42 FC | 	wrbyte	arg02, objptr
1f0c0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f0c0     02 E4 85 F1 | 	sub	objptr, #2
1f0c4     F2 14 E2 FA | 	rdword	arg02, objptr
1f0c8     02 14 66 F0 | 	shl	arg02, #2
1f0cc     02 E4 05 F1 | 	add	objptr, #2
1f0d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f0d4     3E E4 85 F1 | 	sub	objptr, #62
1f0d8     04 16 66 F0 | 	shl	arg03, #4
1f0dc     04 16 06 F1 | 	add	arg03, #4
1f0e0     11 12 06 F6 | 	mov	arg01, #17
1f0e4     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f0e8                 | _hg010b_spin2_setcursorpos_ret
1f0e8     2D 00 64 FD | 	ret
1f0ec                 | 
1f0ec                 | ' 
1f0ec                 | ' pub setcursorx(x)
1f0ec                 | _hg010b_spin2_setcursorx
1f0ec                 | ' cursor_x:=x
1f0ec     3C E4 05 F1 | 	add	objptr, #60
1f0f0     F2 12 52 FC | 	wrword	arg01, objptr
1f0f4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f0f4     F2 14 E2 FA | 	rdword	arg02, objptr
1f0f8     02 14 66 F0 | 	shl	arg02, #2
1f0fc     02 E4 05 F1 | 	add	objptr, #2
1f100     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f104     3E E4 85 F1 | 	sub	objptr, #62
1f108     04 16 66 F0 | 	shl	arg03, #4
1f10c     04 16 06 F1 | 	add	arg03, #4
1f110     11 12 06 F6 | 	mov	arg01, #17
1f114     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f118                 | _hg010b_spin2_setcursorx_ret
1f118     2D 00 64 FD | 	ret
1f11c                 | 
1f11c                 | ' 
1f11c                 | ' pub setcursory(y) 
1f11c                 | _hg010b_spin2_setcursory
1f11c                 | ' cursor_y:=y
1f11c     3E E4 05 F1 | 	add	objptr, #62
1f120     F2 12 42 FC | 	wrbyte	arg01, objptr
1f124                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f124     02 E4 85 F1 | 	sub	objptr, #2
1f128     F2 14 E2 FA | 	rdword	arg02, objptr
1f12c     02 14 66 F0 | 	shl	arg02, #2
1f130     02 E4 05 F1 | 	add	objptr, #2
1f134     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f138     3E E4 85 F1 | 	sub	objptr, #62
1f13c     04 16 66 F0 | 	shl	arg03, #4
1f140     04 16 06 F1 | 	add	arg03, #4
1f144     11 12 06 F6 | 	mov	arg01, #17
1f148     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f14c                 | _hg010b_spin2_setcursory_ret
1f14c     2D 00 64 FD | 	ret
1f150                 | 
1f150                 | ' 
1f150                 | ' '*************************************************************************
1f150                 | ' '                                                                        *
1f150                 | ' '  VBlank functions                                                      *
1f150                 | ' '                                                                        *
1f150                 | ' '*************************************************************************
1f150                 | ' 
1f150                 | ' pub waitvbl(amount) | i
1f150                 | _hg010b_spin2_waitvbl
1f150     03 4A 05 F6 | 	mov	COUNT_, #3
1f154     A8 00 A0 FD | 	call	#pushregs_
1f158     09 1F 02 F6 | 	mov	local01, arg01
1f15c                 | ' 
1f15c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f15c                 | ' 
1f15c                 | ' repeat i from 1 to amount
1f15c     01 20 06 F6 | 	mov	local02, #1
1f160     01 1E 56 F2 | 	cmps	local01, #1 wc
1f164     01 22 86 F6 | 	negc	local03, #1
1f168     11 1F 02 F1 | 	add	local01, local03
1f16c                 | LR__2530
1f16c                 | '   repeat until vblank==0
1f16c                 | LR__2531
1f16c     49 E4 05 F1 | 	add	objptr, #73
1f170     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f174     49 E4 85 F1 | 	sub	objptr, #73
1f178     0C 00 90 AD |  if_e	jmp	#LR__2532
1f17c                 | '     waitus(100)
1f17c     64 12 06 F6 | 	mov	arg01, #100
1f180     78 1C B0 FD | 	call	#__system___waitus
1f184     E4 FF 9F FD | 	jmp	#LR__2531
1f188                 | LR__2532
1f188                 | '   repeat until vblank==1
1f188                 | LR__2533
1f188     49 E4 05 F1 | 	add	objptr, #73
1f18c     F2 12 02 FB | 	rdlong	arg01, objptr
1f190     49 E4 85 F1 | 	sub	objptr, #73
1f194     01 12 0E F2 | 	cmp	arg01, #1 wz
1f198     0C 00 90 AD |  if_e	jmp	#LR__2534
1f19c                 | '     waitus(100)
1f19c     64 12 06 F6 | 	mov	arg01, #100
1f1a0     58 1C B0 FD | 	call	#__system___waitus
1f1a4     E0 FF 9F FD | 	jmp	#LR__2533
1f1a8                 | LR__2534
1f1a8     11 21 02 F1 | 	add	local02, local03
1f1ac     0F 21 0A F2 | 	cmp	local02, local01 wz
1f1b0     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f1b4     A7 F0 03 F6 | 	mov	ptra, fp
1f1b8     B2 00 A0 FD | 	call	#popregs_
1f1bc                 | _hg010b_spin2_waitvbl_ret
1f1bc     2D 00 64 FD | 	ret
1f1c0                 | 
1f1c0                 | ' 
1f1c0                 | ' 
1f1c0                 | ' pub cls(fc,bc)   :c,i
1f1c0                 | _hg010b_spin2_cls
1f1c0     02 4A 05 F6 | 	mov	COUNT_, #2
1f1c4     A8 00 A0 FD | 	call	#pushregs_
1f1c8     09 1F 02 F6 | 	mov	local01, arg01
1f1cc     0A 21 02 F6 | 	mov	local02, arg02
1f1d0                 | ' 
1f1d0                 | ' c:=bc
1f1d0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f1d0     DD E4 05 F1 | 	add	objptr, #221
1f1d4     F2 12 02 FB | 	rdlong	arg01, objptr
1f1d8     A5 E4 85 F1 | 	sub	objptr, #165
1f1dc     F2 16 02 FB | 	rdlong	arg03, objptr
1f1e0     02 16 66 F0 | 	shl	arg03, #2
1f1e4     10 15 02 F6 | 	mov	arg02, local02
1f1e8     00 18 06 F6 | 	mov	arg04, #0
1f1ec     01 1A 06 F6 | 	mov	arg05, #1
1f1f0     0B 00 00 FF 
1f1f4     94 E4 05 F1 | 	add	objptr, ##5780
1f1f8     98 0D B0 FD | 	call	#_psram_spin2_fill
1f1fc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f1fc     0B 00 00 FF 
1f200     C8 E4 85 F1 | 	sub	objptr, ##5832
1f204     F2 12 02 FB | 	rdlong	arg01, objptr
1f208     04 E4 85 F1 | 	sub	objptr, #4
1f20c     F2 16 02 FB | 	rdlong	arg03, objptr
1f210     09 17 82 F1 | 	sub	arg03, arg01
1f214     20 14 06 F6 | 	mov	arg02, #32
1f218     00 18 06 F6 | 	mov	arg04, #0
1f21c     01 1A 06 F6 | 	mov	arg05, #1
1f220     0B 00 00 FF 
1f224     CC E4 05 F1 | 	add	objptr, ##5836
1f228     68 0D B0 FD | 	call	#_psram_spin2_fill
1f22c                 | ' setwritecolors(fc,bc)
1f22c                 | ' 
1f22c                 | ' write_color:=ff
1f22c     0B 00 00 FF 
1f230     8B E4 85 F1 | 	sub	objptr, ##5771
1f234     F2 1E 62 FC | 	wrlong	local01, objptr
1f238                 | ' write_background:=bb
1f238     04 E4 05 F1 | 	add	objptr, #4
1f23c     F2 20 62 FC | 	wrlong	local02, objptr
1f240                 | ' cursor_x:=0
1f240     09 E4 85 F1 | 	sub	objptr, #9
1f244     F2 00 58 FC | 	wrword	#0, objptr
1f248                 | ' cursor_y:=0
1f248     02 E4 05 F1 | 	add	objptr, #2
1f24c     F2 00 48 FC | 	wrbyte	#0, objptr
1f250                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f250     02 E4 85 F1 | 	sub	objptr, #2
1f254     F2 14 E2 FA | 	rdword	arg02, objptr
1f258     02 14 66 F0 | 	shl	arg02, #2
1f25c     02 E4 05 F1 | 	add	objptr, #2
1f260     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f264     3E E4 85 F1 | 	sub	objptr, #62
1f268     04 16 66 F0 | 	shl	arg03, #4
1f26c     04 16 06 F1 | 	add	arg03, #4
1f270     11 12 06 F6 | 	mov	arg01, #17
1f274     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f278                 | ' setcursorcolor(fc)
1f278     0F 13 02 F6 | 	mov	arg01, local01
1f27c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f280     10 FB 01 F6 | 	mov	result1, local02
1f284     00 FC 05 F6 | 	mov	result2, #0
1f288     A7 F0 03 F6 | 	mov	ptra, fp
1f28c     B2 00 A0 FD | 	call	#popregs_
1f290                 | _hg010b_spin2_cls_ret
1f290     2D 00 64 FD | 	ret
1f294                 | 
1f294                 | ' 
1f294                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f294                 | ' 
1f294                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f294                 | _hg010b_spin2_putchar
1f294     02 4A 05 F6 | 	mov	COUNT_, #2
1f298     A8 00 A0 FD | 	call	#pushregs_
1f29c     09 1F 02 F6 | 	mov	local01, arg01
1f2a0                 | ' 
1f2a0                 | ' if achar==10
1f2a0     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f2a4                 | '   crlf()
1f2a4     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f2a8                 | ' if achar==9
1f2a8     09 1E 0E F2 | 	cmp	local01, #9 wz
1f2ac     18 00 90 5D |  if_ne	jmp	#LR__2540
1f2b0                 | '   cursor_x:=(cursor_x& %11110000)+16
1f2b0     3C E4 05 F1 | 	add	objptr, #60
1f2b4     F2 16 E2 FA | 	rdword	arg03, objptr
1f2b8     F0 16 06 F5 | 	and	arg03, #240
1f2bc     10 16 06 F1 | 	add	arg03, #16
1f2c0     F2 16 52 FC | 	wrword	arg03, objptr
1f2c4     3C E4 85 F1 | 	sub	objptr, #60
1f2c8                 | LR__2540
1f2c8                 | '   
1f2c8                 | ' if (achar<>9) && (achar<>10) 
1f2c8     09 1E 0E F2 | 	cmp	local01, #9 wz
1f2cc     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f2d0     A8 00 90 AD |  if_e	jmp	#LR__2541
1f2d4                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f2d4     3C E4 05 F1 | 	add	objptr, #60
1f2d8     F2 12 E2 FA | 	rdword	arg01, objptr
1f2dc     02 E4 05 F1 | 	add	objptr, #2
1f2e0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f2e4     04 14 66 F0 | 	shl	arg02, #4
1f2e8     04 14 06 F1 | 	add	arg02, #4
1f2ec     03 E4 05 F1 | 	add	objptr, #3
1f2f0     F2 18 02 FB | 	rdlong	arg04, objptr
1f2f4     04 E4 05 F1 | 	add	objptr, #4
1f2f8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f2fc     45 E4 85 F1 | 	sub	objptr, #69
1f300     0F 17 02 F6 | 	mov	arg03, local01
1f304     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f308     04 E4 05 F1 | 	add	objptr, #4
1f30c     F2 12 02 FB | 	rdlong	arg01, objptr
1f310     10 00 00 FF 
1f314     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f318     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f31c     3A E4 05 F1 | 	add	objptr, #58
1f320     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f324     0D 17 02 FD | 	qmul	arg03, arg05
1f328                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f328     10 00 00 FF 
1f32c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f330     02 E4 85 F1 | 	sub	objptr, #2
1f334     F2 20 E2 FA | 	rdword	local02, objptr
1f338     01 20 46 F0 | 	shr	local02, #1
1f33c     0F 15 02 F6 | 	mov	arg02, local01
1f340     01 16 06 F6 | 	mov	arg03, #1
1f344     00 18 06 F6 | 	mov	arg04, #0
1f348     01 1A 06 F6 | 	mov	arg05, #1
1f34c     0B 00 00 FF 
1f350     90 E4 05 F1 | 	add	objptr, ##5776
1f354     18 1E 62 FD | 	getqx	local01
1f358     10 1F 02 F1 | 	add	local01, local02
1f35c     0F 13 02 F1 | 	add	arg01, local01
1f360     30 0C B0 FD | 	call	#_psram_spin2_fill
1f364                 | '   cursor_x+=2
1f364     0B 00 00 FF 
1f368     90 E4 85 F1 | 	sub	objptr, ##5776
1f36c     F2 20 E2 FA | 	rdword	local02, objptr
1f370     02 20 06 F1 | 	add	local02, #2
1f374     F2 20 52 FC | 	wrword	local02, objptr
1f378     3C E4 85 F1 | 	sub	objptr, #60
1f37c                 | LR__2541
1f37c                 | ' 
1f37c                 | ' if cursor_x>=256
1f37c     3C E4 05 F1 | 	add	objptr, #60
1f380     F2 20 E2 FA | 	rdword	local02, objptr
1f384     3C E4 85 F1 | 	sub	objptr, #60
1f388     00 21 56 F2 | 	cmps	local02, #256 wc
1f38c     64 00 90 CD |  if_b	jmp	#LR__2543
1f390                 | '   cursor_x:=0
1f390     3C E4 05 F1 | 	add	objptr, #60
1f394     F2 00 58 FC | 	wrword	#0, objptr
1f398                 | '   cursor_y+=1
1f398     02 E4 05 F1 | 	add	objptr, #2
1f39c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f3a0     01 20 06 F1 | 	add	local02, #1
1f3a4     F2 20 42 FC | 	wrbyte	local02, objptr
1f3a8                 | '   if cursor_y>st_lines-1
1f3a8     C3 E4 05 F1 | 	add	objptr, #195
1f3ac     F2 20 02 FB | 	rdlong	local02, objptr
1f3b0     01 20 86 F1 | 	sub	local02, #1
1f3b4     C3 E4 85 F1 | 	sub	objptr, #195
1f3b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f3bc     3E E4 85 F1 | 	sub	objptr, #62
1f3c0     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f3c4     2C 00 90 ED |  if_be	jmp	#LR__2542
1f3c8                 | '     scrollup2()
1f3c8     00 12 06 F6 | 	mov	arg01, #0
1f3cc     01 00 00 FF 
1f3d0     58 14 06 F6 | 	mov	arg02, ##600
1f3d4     10 16 06 F6 | 	mov	arg03, #16
1f3d8     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f3dc                 | '     cursor_y:=st_lines-1
1f3dc     01 E5 05 F1 | 	add	objptr, #257
1f3e0     F2 20 02 FB | 	rdlong	local02, objptr
1f3e4     01 20 86 F1 | 	sub	local02, #1
1f3e8     C3 E4 85 F1 | 	sub	objptr, #195
1f3ec     F2 20 42 FC | 	wrbyte	local02, objptr
1f3f0     3E E4 85 F1 | 	sub	objptr, #62
1f3f4                 | LR__2542
1f3f4                 | LR__2543
1f3f4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f3f4     3C E4 05 F1 | 	add	objptr, #60
1f3f8     F2 14 E2 FA | 	rdword	arg02, objptr
1f3fc     02 14 66 F0 | 	shl	arg02, #2
1f400     02 E4 05 F1 | 	add	objptr, #2
1f404     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f408     3E E4 85 F1 | 	sub	objptr, #62
1f40c     04 16 66 F0 | 	shl	arg03, #4
1f410     04 16 06 F1 | 	add	arg03, #4
1f414     11 12 06 F6 | 	mov	arg01, #17
1f418     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f41c     A7 F0 03 F6 | 	mov	ptra, fp
1f420     B2 00 A0 FD | 	call	#popregs_
1f424                 | _hg010b_spin2_putchar_ret
1f424     2D 00 64 FD | 	ret
1f428                 | 
1f428                 | '     
1f428                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f428                 | ' 
1f428                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f428                 | _hg010b_spin2_putchar2
1f428     02 4A 05 F6 | 	mov	COUNT_, #2
1f42c     A8 00 A0 FD | 	call	#pushregs_
1f430     09 1F 02 F6 | 	mov	local01, arg01
1f434                 | ' 
1f434                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f434     3C E4 05 F1 | 	add	objptr, #60
1f438     F2 12 E2 FA | 	rdword	arg01, objptr
1f43c     02 E4 05 F1 | 	add	objptr, #2
1f440     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f444     04 14 66 F0 | 	shl	arg02, #4
1f448     04 14 06 F1 | 	add	arg02, #4
1f44c     03 E4 05 F1 | 	add	objptr, #3
1f450     F2 18 02 FB | 	rdlong	arg04, objptr
1f454     04 E4 05 F1 | 	add	objptr, #4
1f458     F2 1A 02 FB | 	rdlong	arg05, objptr
1f45c     45 E4 85 F1 | 	sub	objptr, #69
1f460     0F 17 02 F6 | 	mov	arg03, local01
1f464     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f468     04 E4 05 F1 | 	add	objptr, #4
1f46c     F2 12 02 FB | 	rdlong	arg01, objptr
1f470     10 00 00 FF 
1f474     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f478     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f47c     3A E4 05 F1 | 	add	objptr, #58
1f480     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f484     0D 17 02 FD | 	qmul	arg03, arg05
1f488                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f488     10 00 00 FF 
1f48c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f490     02 E4 85 F1 | 	sub	objptr, #2
1f494     F2 20 E2 FA | 	rdword	local02, objptr
1f498     01 20 46 F0 | 	shr	local02, #1
1f49c     0F 15 02 F6 | 	mov	arg02, local01
1f4a0     01 16 06 F6 | 	mov	arg03, #1
1f4a4     00 18 06 F6 | 	mov	arg04, #0
1f4a8     01 1A 06 F6 | 	mov	arg05, #1
1f4ac     0B 00 00 FF 
1f4b0     90 E4 05 F1 | 	add	objptr, ##5776
1f4b4     18 1E 62 FD | 	getqx	local01
1f4b8     10 1F 02 F1 | 	add	local01, local02
1f4bc     0F 13 02 F1 | 	add	arg01, local01
1f4c0     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f4c4                 | ' 
1f4c4                 | ' cursor_x+=2
1f4c4     0B 00 00 FF 
1f4c8     90 E4 85 F1 | 	sub	objptr, ##5776
1f4cc     F2 20 E2 FA | 	rdword	local02, objptr
1f4d0     02 20 06 F1 | 	add	local02, #2
1f4d4     F2 20 52 FC | 	wrword	local02, objptr
1f4d8                 | ' if cursor_x>=256
1f4d8     F2 20 E2 FA | 	rdword	local02, objptr
1f4dc     3C E4 85 F1 | 	sub	objptr, #60
1f4e0     00 21 56 F2 | 	cmps	local02, #256 wc
1f4e4     64 00 90 CD |  if_b	jmp	#LR__2551
1f4e8                 | '   cursor_x:=0
1f4e8     3C E4 05 F1 | 	add	objptr, #60
1f4ec     F2 00 58 FC | 	wrword	#0, objptr
1f4f0                 | '   cursor_y+=1
1f4f0     02 E4 05 F1 | 	add	objptr, #2
1f4f4     F2 20 C2 FA | 	rdbyte	local02, objptr
1f4f8     01 20 06 F1 | 	add	local02, #1
1f4fc     F2 20 42 FC | 	wrbyte	local02, objptr
1f500                 | '   if cursor_y>st_lines-1
1f500     C3 E4 05 F1 | 	add	objptr, #195
1f504     F2 20 02 FB | 	rdlong	local02, objptr
1f508     01 20 86 F1 | 	sub	local02, #1
1f50c     C3 E4 85 F1 | 	sub	objptr, #195
1f510     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f514     3E E4 85 F1 | 	sub	objptr, #62
1f518     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f51c     2C 00 90 ED |  if_be	jmp	#LR__2550
1f520                 | '     scrollup2()
1f520     00 12 06 F6 | 	mov	arg01, #0
1f524     01 00 00 FF 
1f528     58 14 06 F6 | 	mov	arg02, ##600
1f52c     10 16 06 F6 | 	mov	arg03, #16
1f530     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f534                 | '     cursor_y:=st_lines-1
1f534     01 E5 05 F1 | 	add	objptr, #257
1f538     F2 20 02 FB | 	rdlong	local02, objptr
1f53c     01 20 86 F1 | 	sub	local02, #1
1f540     C3 E4 85 F1 | 	sub	objptr, #195
1f544     F2 20 42 FC | 	wrbyte	local02, objptr
1f548     3E E4 85 F1 | 	sub	objptr, #62
1f54c                 | LR__2550
1f54c                 | LR__2551
1f54c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f54c     3C E4 05 F1 | 	add	objptr, #60
1f550     F2 14 E2 FA | 	rdword	arg02, objptr
1f554     02 14 66 F0 | 	shl	arg02, #2
1f558     02 E4 05 F1 | 	add	objptr, #2
1f55c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f560     3E E4 85 F1 | 	sub	objptr, #62
1f564     04 16 66 F0 | 	shl	arg03, #4
1f568     04 16 06 F1 | 	add	arg03, #4
1f56c     11 12 06 F6 | 	mov	arg01, #17
1f570     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f574     A7 F0 03 F6 | 	mov	ptra, fp
1f578     B2 00 A0 FD | 	call	#popregs_
1f57c                 | _hg010b_spin2_putchar2_ret
1f57c     2D 00 64 FD | 	ret
1f580                 | 
1f580                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f580                 | ' 
1f580                 | ' pub write(text) | iii,c,ncx,ncy
1f580                 | _hg010b_spin2_write
1f580     04 4A 05 F6 | 	mov	COUNT_, #4
1f584     A8 00 A0 FD | 	call	#pushregs_
1f588     09 1F 02 F6 | 	mov	local01, arg01
1f58c                 | ' 
1f58c                 | ' repeat iii from 0 to strsize(text)-1
1f58c     00 20 06 F6 | 	mov	local02, #0
1f590     0F 13 02 F6 | 	mov	arg01, local01
1f594     09 23 02 F6 | 	mov	local03, arg01
1f598     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f59c                 | LR__2560
1f59c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f5a0     01 22 06 51 |  if_ne	add	local03, #1
1f5a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f5a8                 | LR__2561
1f5a8     09 23 82 F1 | 	sub	local03, arg01
1f5ac     01 22 86 F1 | 	sub	local03, #1
1f5b0     00 22 56 F2 | 	cmps	local03, #0 wc
1f5b4     01 24 86 F6 | 	negc	local04, #1
1f5b8     12 23 02 F1 | 	add	local03, local04
1f5bc                 | LR__2562
1f5bc                 | '   putchar2(byte[text+iii])
1f5bc     0F 13 02 F6 | 	mov	arg01, local01
1f5c0     10 13 02 F1 | 	add	arg01, local02
1f5c4     09 13 C2 FA | 	rdbyte	arg01, arg01
1f5c8     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f5cc     12 21 02 F1 | 	add	local02, local04
1f5d0     11 21 0A F2 | 	cmp	local02, local03 wz
1f5d4     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f5d8     A7 F0 03 F6 | 	mov	ptra, fp
1f5dc     B2 00 A0 FD | 	call	#popregs_
1f5e0                 | _hg010b_spin2_write_ret
1f5e0     2D 00 64 FD | 	ret
1f5e4                 | 
1f5e4                 | '    
1f5e4                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f5e4                 | ' 
1f5e4                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f5e4                 | _hg010b_spin2_scrollup2
1f5e4     03 4A 05 F6 | 	mov	COUNT_, #3
1f5e8     A8 00 A0 FD | 	call	#pushregs_
1f5ec                 | ' 	
1f5ec                 | ' repeat i from 4 to 579 
1f5ec     04 1E 06 F6 | 	mov	local01, #4
1f5f0                 | LR__2570
1f5f0     F9 E4 05 F1 | 	add	objptr, #249
1f5f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5f8     1C E4 85 F1 | 	sub	objptr, #28
1f5fc     F2 14 02 FB | 	rdlong	arg02, objptr
1f600     0F 19 02 F6 | 	mov	arg04, local01
1f604     10 18 06 F1 | 	add	arg04, #16
1f608     02 18 66 F0 | 	shl	arg04, #2
1f60c     14 E4 05 F1 | 	add	objptr, #20
1f610     F2 16 02 FB | 	rdlong	arg03, objptr
1f614     0B 19 02 FD | 	qmul	arg04, arg03
1f618                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f618     F6 03 00 FF 
1f61c     00 12 06 F6 | 	mov	arg01, ##519168
1f620     0D 13 82 F1 | 	sub	arg01, arg05
1f624     02 16 66 F0 | 	shl	arg03, #2
1f628     0A 00 00 FF 
1f62c     DB E5 05 F1 | 	add	objptr, ##5595
1f630     18 1A 62 FD | 	getqx	arg05
1f634     0D 15 02 F1 | 	add	arg02, arg05
1f638     20 08 B0 FD | 	call	#_psram_spin2_read1
1f63c     0A 00 00 FF 
1f640     D3 E5 85 F1 | 	sub	objptr, ##5587
1f644     F2 1A 02 FB | 	rdlong	arg05, objptr
1f648     1C E4 85 F1 | 	sub	objptr, #28
1f64c     F2 14 02 FB | 	rdlong	arg02, objptr
1f650     0F 19 02 F6 | 	mov	arg04, local01
1f654     02 18 66 F0 | 	shl	arg04, #2
1f658     14 E4 05 F1 | 	add	objptr, #20
1f65c     F2 16 02 FB | 	rdlong	arg03, objptr
1f660     0B 19 02 FD | 	qmul	arg04, arg03
1f664                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f664     F6 03 00 FF 
1f668     00 12 06 F6 | 	mov	arg01, ##519168
1f66c     0D 13 82 F1 | 	sub	arg01, arg05
1f670     02 16 66 F0 | 	shl	arg03, #2
1f674     0A 00 00 FF 
1f678     DB E5 05 F1 | 	add	objptr, ##5595
1f67c     18 1A 62 FD | 	getqx	arg05
1f680     0D 15 02 F1 | 	add	arg02, arg05
1f684     70 08 B0 FD | 	call	#_psram_spin2_write
1f688     0B 00 00 FF 
1f68c     CC E4 85 F1 | 	sub	objptr, ##5836
1f690     01 1E 06 F1 | 	add	local01, #1
1f694     01 00 00 FF 
1f698     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f69c     50 FF 9F CD |  if_b	jmp	#LR__2570
1f6a0                 | ' 
1f6a0                 | ' repeat i from 580 to 599
1f6a0     01 00 00 FF 
1f6a4     44 1E 06 F6 | 	mov	local01, ##580
1f6a8                 | LR__2571
1f6a8                 | '    fastline(0,1023,i,write_background)   
1f6a8     45 E4 05 F1 | 	add	objptr, #69
1f6ac     F2 18 02 FB | 	rdlong	arg04, objptr
1f6b0     45 E4 85 F1 | 	sub	objptr, #69
1f6b4     00 12 06 F6 | 	mov	arg01, #0
1f6b8     09 14 CE F9 | 	bmask	arg02, #9
1f6bc     0F 17 02 F6 | 	mov	arg03, local01
1f6c0     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f6c4     01 1E 06 F1 | 	add	local01, #1
1f6c8     01 00 00 FF 
1f6cc     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f6d0     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f6d4                 | ' repeat i from 0 to 3
1f6d4     00 1E 06 F6 | 	mov	local01, #0
1f6d8                 | LR__2572
1f6d8                 | '    fastline(0,1023,i,write_background)      
1f6d8     45 E4 05 F1 | 	add	objptr, #69
1f6dc     F2 18 02 FB | 	rdlong	arg04, objptr
1f6e0     45 E4 85 F1 | 	sub	objptr, #69
1f6e4     00 12 06 F6 | 	mov	arg01, #0
1f6e8     09 14 CE F9 | 	bmask	arg02, #9
1f6ec     0F 17 02 F6 | 	mov	arg03, local01
1f6f0     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f6f4     01 1E 06 F1 | 	add	local01, #1
1f6f8     04 1E 56 F2 | 	cmps	local01, #4 wc
1f6fc     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f700                 | ' 
1f700                 | ' repeat i from 0 to 35
1f700     00 1E 06 F6 | 	mov	local01, #0
1f704                 | LR__2573
1f704     0F 1B 02 F6 | 	mov	arg05, local01
1f708     01 1A 06 F1 | 	add	arg05, #1
1f70c     10 00 00 FF 
1f710     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f714     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f718     0B 1B 02 FD | 	qmul	arg05, arg03
1f71c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f71c     F6 03 00 FF 
1f720     00 12 06 F6 | 	mov	arg01, ##519168
1f724     F9 E4 05 F1 | 	add	objptr, #249
1f728     F2 1A 02 FB | 	rdlong	arg05, objptr
1f72c     0D 13 82 F1 | 	sub	arg01, arg05
1f730     F5 E4 85 F1 | 	sub	objptr, #245
1f734     F2 14 02 FB | 	rdlong	arg02, objptr
1f738     10 00 00 FF 
1f73c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f740     0B 00 00 FF 
1f744     C8 E4 05 F1 | 	add	objptr, ##5832
1f748     18 1A 62 FD | 	getqx	arg05
1f74c     0D 15 02 F1 | 	add	arg02, arg05
1f750     08 07 B0 FD | 	call	#_psram_spin2_read1
1f754     10 00 00 FF 
1f758     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f75c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f760     0B 1F 02 FD | 	qmul	local01, arg03
1f764                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f764     F6 03 00 FF 
1f768     00 12 06 F6 | 	mov	arg01, ##519168
1f76c     0A 00 00 FF 
1f770     D3 E5 85 F1 | 	sub	objptr, ##5587
1f774     F2 1A 02 FB | 	rdlong	arg05, objptr
1f778     0D 13 82 F1 | 	sub	arg01, arg05
1f77c     F5 E4 85 F1 | 	sub	objptr, #245
1f780     F2 14 02 FB | 	rdlong	arg02, objptr
1f784     10 00 00 FF 
1f788     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f78c     0B 00 00 FF 
1f790     C8 E4 05 F1 | 	add	objptr, ##5832
1f794     18 1A 62 FD | 	getqx	arg05
1f798     0D 15 02 F1 | 	add	arg02, arg05
1f79c     58 07 B0 FD | 	call	#_psram_spin2_write
1f7a0     0B 00 00 FF 
1f7a4     CC E4 85 F1 | 	sub	objptr, ##5836
1f7a8     01 1E 06 F1 | 	add	local01, #1
1f7ac     24 1E 56 F2 | 	cmps	local01, #36 wc
1f7b0     50 FF 9F CD |  if_b	jmp	#LR__2573
1f7b4                 | ' repeat i from 0 to timings[7]-1
1f7b4     00 1E 06 F6 | 	mov	local01, #0
1f7b8     10 00 00 FF 
1f7bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7c0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f7c4     10 00 00 FF 
1f7c8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7cc     01 20 86 F1 | 	sub	local02, #1
1f7d0     00 20 56 F2 | 	cmps	local02, #0 wc
1f7d4     01 22 86 F6 | 	negc	local03, #1
1f7d8     11 21 02 F1 | 	add	local02, local03
1f7dc                 | LR__2574
1f7dc                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f7dc     04 E4 05 F1 | 	add	objptr, #4
1f7e0     F2 12 02 FB | 	rdlong	arg01, objptr
1f7e4     10 00 00 FF 
1f7e8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7ec     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f7f0     10 00 00 FF 
1f7f4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7f8     0D 19 02 F6 | 	mov	arg04, arg05
1f7fc     03 18 66 F0 | 	shl	arg04, #3
1f800     0D 19 02 F1 | 	add	arg04, arg05
1f804     02 18 66 F0 | 	shl	arg04, #2
1f808     0F 19 02 F1 | 	add	arg04, local01
1f80c     0C 13 02 F1 | 	add	arg01, arg04
1f810     20 14 06 F6 | 	mov	arg02, #32
1f814     01 16 06 F6 | 	mov	arg03, #1
1f818     00 18 06 F6 | 	mov	arg04, #0
1f81c     01 1A 06 F6 | 	mov	arg05, #1
1f820     0B 00 00 FF 
1f824     C8 E4 05 F1 | 	add	objptr, ##5832
1f828     68 07 B0 FD | 	call	#_psram_spin2_fill
1f82c     0B 00 00 FF 
1f830     CC E4 85 F1 | 	sub	objptr, ##5836
1f834     11 1F 02 F1 | 	add	local01, local03
1f838     10 1F 0A F2 | 	cmp	local01, local02 wz
1f83c     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f840     A7 F0 03 F6 | 	mov	ptra, fp
1f844     B2 00 A0 FD | 	call	#popregs_
1f848                 | _hg010b_spin2_scrollup2_ret
1f848     2D 00 64 FD | 	ret
1f84c                 | 
1f84c                 | '  
1f84c                 | ' ''----------- Scroll the screen one line down 
1f84c                 | ' 
1f84c                 | ' pub scrolldown(start=0) | i
1f84c                 | _hg010b_spin2_scrolldown
1f84c     05 4A 05 F6 | 	mov	COUNT_, #5
1f850     A8 00 A0 FD | 	call	#pushregs_
1f854     09 1F 02 F6 | 	mov	local01, arg01
1f858                 | ' 
1f858                 | ' repeat i from 579 to (start*16)+4
1f858     01 00 00 FF 
1f85c     43 20 06 F6 | 	mov	local02, ##579
1f860     0F 23 02 F6 | 	mov	local03, local01
1f864     04 22 66 F0 | 	shl	local03, #4
1f868     04 22 06 F1 | 	add	local03, #4
1f86c     01 00 00 FF 
1f870     43 22 56 F2 | 	cmps	local03, ##579 wc
1f874     01 24 86 F6 | 	negc	local04, #1
1f878     12 27 02 F6 | 	mov	local05, local04
1f87c     12 23 02 F1 | 	add	local03, local04
1f880                 | LR__2580
1f880     F9 E4 05 F1 | 	add	objptr, #249
1f884     F2 24 02 FB | 	rdlong	local04, objptr
1f888     1C E4 85 F1 | 	sub	objptr, #28
1f88c     F2 14 02 FB | 	rdlong	arg02, objptr
1f890     10 1B 02 F6 | 	mov	arg05, local02
1f894     02 1A 66 F0 | 	shl	arg05, #2
1f898     14 E4 05 F1 | 	add	objptr, #20
1f89c     F2 16 02 FB | 	rdlong	arg03, objptr
1f8a0     0B 1B 02 FD | 	qmul	arg05, arg03
1f8a4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f8a4     F6 03 00 FF 
1f8a8     00 12 06 F6 | 	mov	arg01, ##519168
1f8ac     12 13 82 F1 | 	sub	arg01, local04
1f8b0     02 16 66 F0 | 	shl	arg03, #2
1f8b4     0A 00 00 FF 
1f8b8     DB E5 05 F1 | 	add	objptr, ##5595
1f8bc     18 24 62 FD | 	getqx	local04
1f8c0     12 15 02 F1 | 	add	arg02, local04
1f8c4     94 05 B0 FD | 	call	#_psram_spin2_read1
1f8c8     0A 00 00 FF 
1f8cc     D3 E5 85 F1 | 	sub	objptr, ##5587
1f8d0     F2 24 02 FB | 	rdlong	local04, objptr
1f8d4     1C E4 85 F1 | 	sub	objptr, #28
1f8d8     F2 14 02 FB | 	rdlong	arg02, objptr
1f8dc     10 1B 02 F6 | 	mov	arg05, local02
1f8e0     10 1A 06 F1 | 	add	arg05, #16
1f8e4     02 1A 66 F0 | 	shl	arg05, #2
1f8e8     14 E4 05 F1 | 	add	objptr, #20
1f8ec     F2 16 02 FB | 	rdlong	arg03, objptr
1f8f0     0B 1B 02 FD | 	qmul	arg05, arg03
1f8f4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f8f4     F6 03 00 FF 
1f8f8     00 12 06 F6 | 	mov	arg01, ##519168
1f8fc     12 13 82 F1 | 	sub	arg01, local04
1f900     02 16 66 F0 | 	shl	arg03, #2
1f904     0A 00 00 FF 
1f908     DB E5 05 F1 | 	add	objptr, ##5595
1f90c     18 24 62 FD | 	getqx	local04
1f910     12 15 02 F1 | 	add	arg02, local04
1f914     E0 05 B0 FD | 	call	#_psram_spin2_write
1f918     0B 00 00 FF 
1f91c     CC E4 85 F1 | 	sub	objptr, ##5836
1f920     13 21 02 F1 | 	add	local02, local05
1f924     11 21 0A F2 | 	cmp	local02, local03 wz
1f928     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f92c                 | ' 
1f92c                 | ' repeat i from (start*16)+4 to (start*16)+19
1f92c     0F 21 02 F6 | 	mov	local02, local01
1f930     04 20 66 F0 | 	shl	local02, #4
1f934     04 20 06 F1 | 	add	local02, #4
1f938     0F 27 02 F6 | 	mov	local05, local01
1f93c     04 26 66 F0 | 	shl	local05, #4
1f940     13 26 06 F1 | 	add	local05, #19
1f944     0F 25 02 F6 | 	mov	local04, local01
1f948     04 24 66 F0 | 	shl	local04, #4
1f94c     04 24 06 F1 | 	add	local04, #4
1f950     12 27 52 F2 | 	cmps	local05, local04 wc
1f954     01 24 86 F6 | 	negc	local04, #1
1f958     12 23 02 F6 | 	mov	local03, local04
1f95c     12 27 02 F1 | 	add	local05, local04
1f960                 | LR__2581
1f960                 | '    fastline(0,1023,i,write_background)    
1f960     45 E4 05 F1 | 	add	objptr, #69
1f964     F2 18 02 FB | 	rdlong	arg04, objptr
1f968     45 E4 85 F1 | 	sub	objptr, #69
1f96c     00 12 06 F6 | 	mov	arg01, #0
1f970     09 14 CE F9 | 	bmask	arg02, #9
1f974     10 17 02 F6 | 	mov	arg03, local02
1f978     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f97c     11 21 02 F1 | 	add	local02, local03
1f980     13 21 0A F2 | 	cmp	local02, local05 wz
1f984     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f988                 | '    
1f988                 | ' repeat i from 35 to start
1f988     23 20 06 F6 | 	mov	local02, #35
1f98c     23 1E 56 F2 | 	cmps	local01, #35 wc
1f990     01 24 86 F6 | 	negc	local04, #1
1f994     0F 27 02 F6 | 	mov	local05, local01
1f998     12 27 02 F1 | 	add	local05, local04
1f99c                 | LR__2582
1f99c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f99c     F6 03 00 FF 
1f9a0     00 12 06 F6 | 	mov	arg01, ##519168
1f9a4     F9 E4 05 F1 | 	add	objptr, #249
1f9a8     F2 22 02 FB | 	rdlong	local03, objptr
1f9ac     11 13 82 F1 | 	sub	arg01, local03
1f9b0     F5 E4 85 F1 | 	sub	objptr, #245
1f9b4     F2 14 02 FB | 	rdlong	arg02, objptr
1f9b8     10 23 02 F6 | 	mov	local03, local02
1f9bc     07 22 66 F0 | 	shl	local03, #7
1f9c0     11 15 02 F1 | 	add	arg02, local03
1f9c4     80 16 06 F6 | 	mov	arg03, #128
1f9c8     0B 00 00 FF 
1f9cc     C8 E4 05 F1 | 	add	objptr, ##5832
1f9d0     88 04 B0 FD | 	call	#_psram_spin2_read1
1f9d4                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f9d4     F6 03 00 FF 
1f9d8     00 12 06 F6 | 	mov	arg01, ##519168
1f9dc     0A 00 00 FF 
1f9e0     D3 E5 85 F1 | 	sub	objptr, ##5587
1f9e4     F2 22 02 FB | 	rdlong	local03, objptr
1f9e8     11 13 82 F1 | 	sub	arg01, local03
1f9ec     F5 E4 85 F1 | 	sub	objptr, #245
1f9f0     F2 14 02 FB | 	rdlong	arg02, objptr
1f9f4     10 23 02 F6 | 	mov	local03, local02
1f9f8     01 22 06 F1 | 	add	local03, #1
1f9fc     07 22 66 F0 | 	shl	local03, #7
1fa00     11 15 02 F1 | 	add	arg02, local03
1fa04     80 16 06 F6 | 	mov	arg03, #128
1fa08     0B 00 00 FF 
1fa0c     C8 E4 05 F1 | 	add	objptr, ##5832
1fa10     E4 04 B0 FD | 	call	#_psram_spin2_write
1fa14     0B 00 00 FF 
1fa18     CC E4 85 F1 | 	sub	objptr, ##5836
1fa1c     12 21 02 F1 | 	add	local02, local04
1fa20     13 21 0A F2 | 	cmp	local02, local05 wz
1fa24     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1fa28                 | ' repeat i from 0 to 127
1fa28     00 20 06 F6 | 	mov	local02, #0
1fa2c                 | LR__2583
1fa2c                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1fa2c     04 E4 05 F1 | 	add	objptr, #4
1fa30     F2 12 02 FB | 	rdlong	arg01, objptr
1fa34     0F 27 02 F6 | 	mov	local05, local01
1fa38     07 26 66 F0 | 	shl	local05, #7
1fa3c     13 13 02 F1 | 	add	arg01, local05
1fa40     10 13 02 F1 | 	add	arg01, local02
1fa44     20 14 06 F6 | 	mov	arg02, #32
1fa48     01 16 06 F6 | 	mov	arg03, #1
1fa4c     00 18 06 F6 | 	mov	arg04, #0
1fa50     01 1A 06 F6 | 	mov	arg05, #1
1fa54     0B 00 00 FF 
1fa58     C8 E4 05 F1 | 	add	objptr, ##5832
1fa5c     34 05 B0 FD | 	call	#_psram_spin2_fill
1fa60     0B 00 00 FF 
1fa64     CC E4 85 F1 | 	sub	objptr, ##5836
1fa68     01 20 06 F1 | 	add	local02, #1
1fa6c     80 20 56 F2 | 	cmps	local02, #128 wc
1fa70     B8 FF 9F CD |  if_b	jmp	#LR__2583
1fa74     A7 F0 03 F6 | 	mov	ptra, fp
1fa78     B2 00 A0 FD | 	call	#popregs_
1fa7c                 | _hg010b_spin2_scrolldown_ret
1fa7c     2D 00 64 FD | 	ret
1fa80                 | 
1fa80                 | ' 
1fa80                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1fa80                 | ' 
1fa80                 | ' pub crlf()
1fa80                 | _hg010b_spin2_crlf
1fa80                 | ' 
1fa80                 | ' cursor_x:=leading_spaces*2
1fa80     01 00 00 FF 
1fa84     B6 E4 05 F1 | 	add	objptr, ##694
1fa88     F2 16 02 FB | 	rdlong	arg03, objptr
1fa8c     01 16 66 F0 | 	shl	arg03, #1
1fa90     01 00 00 FF 
1fa94     7A E4 85 F1 | 	sub	objptr, ##634
1fa98     F2 16 52 FC | 	wrword	arg03, objptr
1fa9c                 | ' cursor_y+=1
1fa9c     02 E4 05 F1 | 	add	objptr, #2
1faa0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1faa4     01 16 06 F1 | 	add	arg03, #1
1faa8     F2 16 42 FC | 	wrbyte	arg03, objptr
1faac                 | ' if cursor_y>st_lines-1
1faac     C3 E4 05 F1 | 	add	objptr, #195
1fab0     F2 16 02 FB | 	rdlong	arg03, objptr
1fab4     01 16 86 F1 | 	sub	arg03, #1
1fab8     C3 E4 85 F1 | 	sub	objptr, #195
1fabc     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fac0     3E E4 85 F1 | 	sub	objptr, #62
1fac4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1fac8     2C 00 90 ED |  if_be	jmp	#LR__2590
1facc                 | '   scrollup2()
1facc     00 12 06 F6 | 	mov	arg01, #0
1fad0     01 00 00 FF 
1fad4     58 14 06 F6 | 	mov	arg02, ##600
1fad8     10 16 06 F6 | 	mov	arg03, #16
1fadc     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1fae0                 | '   cursor_y:=st_lines-1
1fae0     01 E5 05 F1 | 	add	objptr, #257
1fae4     F2 16 02 FB | 	rdlong	arg03, objptr
1fae8     01 16 86 F1 | 	sub	arg03, #1
1faec     C3 E4 85 F1 | 	sub	objptr, #195
1faf0     F2 16 42 FC | 	wrbyte	arg03, objptr
1faf4     3E E4 85 F1 | 	sub	objptr, #62
1faf8                 | LR__2590
1faf8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1faf8     3C E4 05 F1 | 	add	objptr, #60
1fafc     F2 14 E2 FA | 	rdword	arg02, objptr
1fb00     02 14 66 F0 | 	shl	arg02, #2
1fb04     02 E4 05 F1 | 	add	objptr, #2
1fb08     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fb0c     3E E4 85 F1 | 	sub	objptr, #62
1fb10     04 16 66 F0 | 	shl	arg03, #4
1fb14     04 16 06 F1 | 	add	arg03, #4
1fb18     11 12 06 F6 | 	mov	arg01, #17
1fb1c     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1fb20                 | _hg010b_spin2_crlf_ret
1fb20     2D 00 64 FD | 	ret
1fb24                 | 
1fb24                 | ' 
1fb24                 | ' 
1fb24                 | ' '*************************************************************************
1fb24                 | ' '                                                                        *
1fb24                 | ' '  Conversions                                                           *
1fb24                 | ' '                                                                        *
1fb24                 | ' '*************************************************************************
1fb24                 | ' 
1fb24                 | ' ''---------- Convert a integer to dec string, return a pointer
1fb24                 | ' 
1fb24                 | ' pub inttostr(i):result |q,pos,k,j
1fb24                 | _hg010b_spin2_inttostr
1fb24     03 4A 05 F6 | 	mov	COUNT_, #3
1fb28     A8 00 A0 FD | 	call	#pushregs_
1fb2c     09 1F 0A F6 | 	mov	local01, arg01 wz
1fb30                 | ' 
1fb30                 | ' j:=i
1fb30                 | ' pos:=10
1fb30     0A 20 06 F6 | 	mov	local02, #10
1fb34                 | ' k:=0
1fb34     00 22 06 F6 | 	mov	local03, #0
1fb38                 | ' 
1fb38                 | ' if (j==0)
1fb38     18 00 90 5D |  if_ne	jmp	#LR__2600
1fb3c                 | '   n_string[0]:=48
1fb3c     4D E4 05 F1 | 	add	objptr, #77
1fb40     F2 60 48 FC | 	wrbyte	#48, objptr
1fb44                 | '   n_string[1]:=0
1fb44     01 E4 05 F1 | 	add	objptr, #1
1fb48     F2 00 48 FC | 	wrbyte	#0, objptr
1fb4c     4E E4 85 F1 | 	sub	objptr, #78
1fb50     C4 00 90 FD | 	jmp	#LR__2607
1fb54                 | LR__2600
1fb54                 | ' 
1fb54                 | ' else
1fb54                 | '   if (j<0)
1fb54     0F 1F 52 F6 | 	abs	local01, local01 wc
1fb58                 | '     j:=0-j
1fb58                 | '     k:=45
1fb58     2D 22 06 C6 |  if_b	mov	local03, #45
1fb5c                 | ' 
1fb5c                 | '   n_string[11]:=0
1fb5c     58 E4 05 F1 | 	add	objptr, #88
1fb60     F2 00 48 FC | 	wrbyte	#0, objptr
1fb64     58 E4 85 F1 | 	sub	objptr, #88
1fb68     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1fb6c                 | '   repeat while (pos>-1)
1fb6c                 | LR__2601
1fb6c     00 20 56 F2 | 	cmps	local02, #0 wc
1fb70     40 00 90 CD |  if_b	jmp	#LR__2603
1fb74     0F FB 51 F6 | 	abs	result1, local01 wc
1fb78     0A FA 15 FD | 	qdiv	result1, #10
1fb7c                 | '     q:=j//10
1fb7c     19 FA 61 FD | 	getqy	result1
1fb80     FD FA 81 F6 | 	negc	result1, result1
1fb84     0F 1F 52 F6 | 	abs	local01, local01 wc
1fb88     0A 1E 16 FD | 	qdiv	local01, #10
1fb8c                 | '     q:=48+q
1fb8c     30 FA 05 F1 | 	add	result1, #48
1fb90                 | '     n_string[pos]:=q
1fb90     10 1F 02 F6 | 	mov	local01, local02
1fb94     4D E4 05 F1 | 	add	objptr, #77
1fb98     F2 1E 02 F1 | 	add	local01, objptr
1fb9c     0F FB 41 FC | 	wrbyte	result1, local01
1fba0                 | '     j:=j/10
1fba0     4D E4 85 F1 | 	sub	objptr, #77
1fba4                 | '     pos-=1
1fba4     01 20 86 F1 | 	sub	local02, #1
1fba8     18 1E 62 FD | 	getqx	local01
1fbac     0F 1F 82 F6 | 	negc	local01, local01
1fbb0     B8 FF 9F FD | 	jmp	#LR__2601
1fbb4                 | LR__2602
1fbb4                 | LR__2603
1fbb4                 | '   repeat while n_string[0]==48
1fbb4                 | LR__2604
1fbb4     4D E4 05 F1 | 	add	objptr, #77
1fbb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbbc     4D E4 85 F1 | 	sub	objptr, #77
1fbc0     30 16 0E F2 | 	cmp	arg03, #48 wz
1fbc4     20 00 90 5D |  if_ne	jmp	#LR__2605
1fbc8                 | '     bytemove(@n_string,@n_string+1,12)
1fbc8     4D E4 05 F1 | 	add	objptr, #77
1fbcc     F2 12 02 F6 | 	mov	arg01, objptr
1fbd0     F2 14 02 F6 | 	mov	arg02, objptr
1fbd4     4D E4 85 F1 | 	sub	objptr, #77
1fbd8     01 14 06 F1 | 	add	arg02, #1
1fbdc     0C 16 06 F6 | 	mov	arg03, #12
1fbe0     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fbe4     CC FF 9F FD | 	jmp	#LR__2604
1fbe8                 | LR__2605
1fbe8                 | ' 
1fbe8                 | '   if k==45
1fbe8     2D 22 0E F2 | 	cmp	local03, #45 wz
1fbec     28 00 90 5D |  if_ne	jmp	#LR__2606
1fbf0                 | '      bytemove(@n_string+1,@n_string,12)
1fbf0     4D E4 05 F1 | 	add	objptr, #77
1fbf4     F2 12 02 F6 | 	mov	arg01, objptr
1fbf8     01 12 06 F1 | 	add	arg01, #1
1fbfc     F2 14 02 F6 | 	mov	arg02, objptr
1fc00     4D E4 85 F1 | 	sub	objptr, #77
1fc04     0C 16 06 F6 | 	mov	arg03, #12
1fc08     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fc0c                 | '      n_string[0]:=k
1fc0c     4D E4 05 F1 | 	add	objptr, #77
1fc10     F2 22 42 FC | 	wrbyte	local03, objptr
1fc14     4D E4 85 F1 | 	sub	objptr, #77
1fc18                 | LR__2606
1fc18                 | LR__2607
1fc18                 | ' 
1fc18                 | ' q:=@n_string
1fc18     4D E4 05 F1 | 	add	objptr, #77
1fc1c     F2 FA 01 F6 | 	mov	result1, objptr
1fc20     4D E4 85 F1 | 	sub	objptr, #77
1fc24                 | ' return q
1fc24     A7 F0 03 F6 | 	mov	ptra, fp
1fc28     B2 00 A0 FD | 	call	#popregs_
1fc2c                 | _hg010b_spin2_inttostr_ret
1fc2c     2D 00 64 FD | 	ret
1fc30                 | 
1fc30                 | ' 
1fc30                 | ' '..............................................................................
1fc30                 | ' 
1fc30                 | ' {{
1fc30                 | ' }}
1fc30                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fc30                 | _psram_spin2_startx
1fc30     04 4A 05 F6 | 	mov	COUNT_, #4
1fc34     A8 00 A0 FD | 	call	#pushregs_
1fc38     09 1F 02 F6 | 	mov	local01, arg01
1fc3c     0B 21 02 F6 | 	mov	local02, arg03
1fc40     0C 23 02 F6 | 	mov	local03, arg04
1fc44                 | '     stop() ' restart driver if required
1fc44     54 01 B0 FD | 	call	#_psram_spin2_stop
1fc48     00 1E 0E F2 | 	cmp	local01, #0 wz
1fc4c     14 1E 06 AB |  if_e	rdlong	local01, #20
1fc50     0F 15 52 F6 | 	abs	arg02, local01 wc
1fc54     A1 07 00 FF 
1fc58     40 14 16 FD | 	qdiv	arg02, ##1000000
1fc5c                 | ' 
1fc5c                 | '     ' use current frequency if none specified
1fc5c                 | ' 
1fc5c                 | '     if freq == 0 
1fc5c                 | '         freq := clkfreq 
1fc5c                 | ' 
1fc5c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fc5c                 | ' 
1fc5c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fc5c                 | '     if burst < 0
1fc5c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fc5c     18 14 62 FD | 	getqx	arg02
1fc60     0A 19 82 F6 | 	negc	arg04, arg02
1fc64     03 18 66 F0 | 	shl	arg04, #3
1fc68     84 18 86 F1 | 	sub	arg04, #132
1fc6c     04 18 46 F0 | 	shr	arg04, #4
1fc70     04 18 66 F0 | 	shl	arg04, #4
1fc74     00 18 56 F2 | 	cmps	arg04, #0 wc
1fc78     0E FA 65 C6 |  if_b	neg	result1, #14
1fc7c     10 01 90 CD |  if_b	jmp	#LR__2613
1fc80                 | ' 
1fc80                 | '     ' compute the input delay
1fc80                 | ' 
1fc80                 | '     if delay <= 0
1fc80     01 20 56 F2 | 	cmps	local02, #1 wc
1fc84     10 00 90 3D |  if_ae	jmp	#LR__2610
1fc88                 | '         delay := lookupDelay(freq)
1fc88     0F 13 02 F6 | 	mov	arg01, local01
1fc8c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fc90     FD 20 02 F6 | 	mov	local02, result1
1fc94     04 00 90 FD | 	jmp	#LR__2611
1fc98                 | LR__2610
1fc98                 | '     else
1fc98                 | '         delay <#= $f ' limit to 15
1fc98     0F 20 66 F3 | 	fles	local02, #15
1fc9c                 | LR__2611
1fc9c                 | ' 
1fc9c                 | '     ' create our lock
1fc9c                 | ' 
1fc9c                 | '     driverlock := LOCKNEW()  
1fc9c     00 FA 05 F6 | 	mov	result1, #0
1fca0     04 FA 61 FD | 	locknew	result1
1fca4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fca8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fcac                 | '     if driverlock == -1
1fcac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fcb0     FF FF 7F FF 
1fcb4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fcb8                 | '         return ERR_NO_LOCK
1fcb8     1A FA 65 A6 |  if_e	neg	result1, #26
1fcbc     D0 00 90 AD |  if_e	jmp	#LR__2613
1fcc0                 | ' 
1fcc0                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fcc0                 | ' 
1fcc0                 | '     long[@startupData][0]:=clkfreq
1fcc0     14 1E 06 FB | 	rdlong	local01, #20
1fcc4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fcc8     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fccc                 | ' '    long[@startupData][1]:=$1000_0000
1fccc                 | '     long[@startupData][5]:=@deviceData
1fccc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fcd0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fcd4     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fcd8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fcdc     14 14 06 F1 | 	add	arg02, #20
1fce0     0A 1F 62 FC | 	wrlong	local01, arg02
1fce4                 | '     long[@startupData][6]:=@qosData
1fce4     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fce8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fcec     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fcf0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fcf4     18 14 06 F1 | 	add	arg02, #24
1fcf8     0A 1F 62 FC | 	wrlong	local01, arg02
1fcfc                 | '     long[@startupData][7]:=$7FF00
1fcfc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd00     1C 1E 06 F1 | 	add	local01, #28
1fd04     FF 03 80 FF 
1fd08     0F 01 6A FC | 	wrlong	##524032, local01
1fd0c                 | ' 
1fd0c                 | '     ' setup some default bank and QoS parameter values
1fd0c                 | ' 
1fd0c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fd0c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fd10     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fd14     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fd18     10 18 66 F0 | 	shl	arg04, #16
1fd1c     0C 20 66 F0 | 	shl	local02, #12
1fd20     10 19 42 F5 | 	or	arg04, local02
1fd24     18 18 46 F5 | 	or	arg04, #24
1fd28     0C 15 02 F6 | 	mov	arg02, arg04
1fd2c     02 16 06 F6 | 	mov	arg03, #2
1fd30     A0 00 A0 FD | 	call	#\builtin_longfill_
1fd34                 | '     longfill(@qosData, $FFFF0000, 8)
1fd34     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fd38     07 16 06 F6 | 	mov	arg03, #7
1fd3c     28 16 62 FD | 	setq	arg03
1fd40     80 FF FF FF 
1fd44     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fd48                 | ' 
1fd48                 | '     ' get the address of the PSRAM memory driver so we can start it
1fd48                 | ' 
1fd48                 | '     driverAddr:= driver.getDriverAddr()
1fd48                 | '     return @driver_start
1fd48     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fd4c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fd50     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fd54                 | ' 
1fd54                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fd54                 | ' 
1fd54                 | '     if desiredcog < 0
1fd54     00 22 56 F2 | 	cmps	local03, #0 wc
1fd58                 | '         desiredcog := NEWCOG
1fd58     10 22 06 C6 |  if_b	mov	local03, #16
1fd5c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fd5c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fd60     11 25 02 F6 | 	mov	local04, local03
1fd64     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fd68     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fd6c     01 24 66 C6 |  if_b	neg	local04, #1
1fd70     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fd74     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fd78                 | '     repeat until long[@startupData] == 0 
1fd78     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fd7c                 | LR__2612
1fd7c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fd80     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fd84                 | ' 
1fd84                 | '     return drivercog
1fd84     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fd88     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fd8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd90                 | LR__2613
1fd90     A7 F0 03 F6 | 	mov	ptra, fp
1fd94     B2 00 A0 FD | 	call	#popregs_
1fd98                 | _psram_spin2_startx_ret
1fd98     2D 00 64 FD | 	ret
1fd9c                 | 
1fd9c                 | ' 
1fd9c                 | ' '..............................................................................
1fd9c                 | ' 
1fd9c                 | ' {{
1fd9c                 | ' }}
1fd9c                 | ' PUB stop() : i
1fd9c                 | _psram_spin2_stop
1fd9c     00 00 06 F6 | 	mov	_var01, #0
1fda0                 | '     if drivercog <> -1
1fda0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fda4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fda8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdac     FF FF 7F FF 
1fdb0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fdb4     70 00 90 AD |  if_e	jmp	#LR__2623
1fdb8                 | '         cogstop(drivercog) ' a rather brutal stop
1fdb8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fdbc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fdc0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdc4     03 12 62 FD | 	cogstop	arg01
1fdc8     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fdcc                 | '         repeat i from 0 to 7
1fdcc                 | LR__2620
1fdcc                 | '             if long[$7FF00][i*3] < 0
1fdcc     00 FB 01 F6 | 	mov	result1, _var01
1fdd0     01 FA 65 F0 | 	shl	result1, #1
1fdd4     00 FB 01 F1 | 	add	result1, _var01
1fdd8     02 FA 65 F0 | 	shl	result1, #2
1fddc     FF 03 00 FF 
1fde0     00 FB 05 F1 | 	add	result1, ##524032
1fde4     FD FA 01 FB | 	rdlong	result1, result1
1fde8     00 FA 55 F2 | 	cmps	result1, #0 wc
1fdec     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fdf0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fdf0     00 FB 01 F6 | 	mov	result1, _var01
1fdf4     01 FA 65 F0 | 	shl	result1, #1
1fdf8     00 FB 01 F1 | 	add	result1, _var01
1fdfc     02 FA 65 F0 | 	shl	result1, #2
1fe00     FF 03 00 FF 
1fe04     00 FB 05 F1 | 	add	result1, ##524032
1fe08     FD 20 68 FC | 	wrlong	#16, result1
1fe0c                 | LR__2621
1fe0c     01 00 06 F1 | 	add	_var01, #1
1fe10     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe14     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fe18                 | LR__2622
1fe18                 | '         drivercog := -1
1fe18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe1c     FF FF FF FF 
1fe20     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fe24     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe28                 | LR__2623
1fe28                 | '     if driverlock <> -1
1fe28     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fe2c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe30     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fe34     FF FF 7F FF 
1fe38     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fe3c                 | '         LOCKRET(driverlock)
1fe3c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fe40     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fe44     05 12 62 5D |  if_ne	lockret	arg01
1fe48                 | '         driverlock := -1
1fe48     FF FF FF 5F 
1fe4c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fe50     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fe54     00 FB 01 F6 | 	mov	result1, _var01
1fe58                 | _psram_spin2_stop_ret
1fe58     2D 00 64 FD | 	ret
1fe5c                 | 
1fe5c                 | ' 
1fe5c                 | ' '..............................................................................
1fe5c                 | ' 
1fe5c                 | ' {{
1fe5c                 | ' }}
1fe5c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fe5c                 | _psram_spin2_read1
1fe5c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fe5c                 | '     if drivercog == -1 ' driver must be running
1fe5c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe60     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fe64     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe68     FF FF 7F FF 
1fe6c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fe70                 | '         return ERR_INACTIVE
1fe70     0F FA 65 A6 |  if_e	neg	result1, #15
1fe74     7C 00 90 AD |  if_e	jmp	#LR__2631
1fe78                 | '     if count == 0 ' don't even bother reading
1fe78     00 16 0E F2 | 	cmp	arg03, #0 wz
1fe7c                 | '         return 0
1fe7c     00 FA 05 A6 |  if_e	mov	result1, #0
1fe80     70 00 90 AD |  if_e	jmp	#LR__2631
1fe84                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fe84     00 FA 05 F6 | 	mov	result1, #0
1fe88     01 FA 61 FD | 	cogid	result1
1fe8c     FD 00 02 F6 | 	mov	_var01, result1
1fe90     01 00 66 F0 | 	shl	_var01, #1
1fe94     FD 00 02 F1 | 	add	_var01, result1
1fe98     02 00 66 F0 | 	shl	_var01, #2
1fe9c     FF 03 00 FF 
1fea0     00 03 06 F6 | 	mov	_var02, ##524032
1fea4     00 03 02 F1 | 	add	_var02, _var01
1fea8                 | '     if long[mailbox] < 0
1fea8     01 01 02 FB | 	rdlong	_var01, _var02
1feac     00 00 56 F2 | 	cmps	_var01, #0 wc
1feb0                 | '         return ERR_MAILBOX_BUSY
1feb0     1C FA 65 C6 |  if_b	neg	result1, #28
1feb4     3C 00 90 CD |  if_b	jmp	#LR__2631
1feb8                 | '     long[mailbox][2] := count
1feb8     08 02 06 F1 | 	add	_var02, #8
1febc     01 17 62 FC | 	wrlong	arg03, _var02
1fec0                 | '     long[mailbox][1] := dstHubAddr
1fec0     04 02 86 F1 | 	sub	_var02, #4
1fec4     01 13 62 FC | 	wrlong	arg01, _var02
1fec8     04 02 86 F1 | 	sub	_var02, #4
1fecc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fecc     0A 05 02 F6 | 	mov	_var03, arg02
1fed0     D9 04 06 F4 | 	bitl	_var03, #217
1fed4     00 00 58 FF 
1fed8     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fedc     02 01 02 F1 | 	add	_var01, _var03
1fee0     01 01 62 FC | 	wrlong	_var01, _var02
1fee4                 | '     repeat
1fee4                 | LR__2630
1fee4                 | '         result := long[mailbox]    
1fee4     01 05 02 FB | 	rdlong	_var03, _var02
1fee8     00 04 56 F2 | 	cmps	_var03, #0 wc
1feec     F4 FF 9F CD |  if_b	jmp	#LR__2630
1fef0                 | '     while result < 0   
1fef0                 | '     return -result                       'return success or error
1fef0     02 FB 61 F6 | 	neg	result1, _var03
1fef4                 | LR__2631
1fef4                 | _psram_spin2_read1_ret
1fef4     2D 00 64 FD | 	ret
1fef8                 | 
1fef8                 | ' 
1fef8                 | ' '..............................................................................
1fef8                 | ' 
1fef8                 | ' {{
1fef8                 | ' }}
1fef8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fef8                 | _psram_spin2_write
1fef8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fef8                 | '     if drivercog == -1 ' driver must be running
1fef8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fefc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1ff00     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff04     FF FF 7F FF 
1ff08     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1ff0c                 | '         return ERR_INACTIVE
1ff0c     0F FA 65 A6 |  if_e	neg	result1, #15
1ff10     7C 00 90 AD |  if_e	jmp	#LR__2641
1ff14                 | '     if count == 0 ' don't even bother writing
1ff14     00 16 0E F2 | 	cmp	arg03, #0 wz
1ff18                 | '         return 0
1ff18     00 FA 05 A6 |  if_e	mov	result1, #0
1ff1c     70 00 90 AD |  if_e	jmp	#LR__2641
1ff20                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1ff20     00 FA 05 F6 | 	mov	result1, #0
1ff24     01 FA 61 FD | 	cogid	result1
1ff28     FD 00 02 F6 | 	mov	_var01, result1
1ff2c     01 00 66 F0 | 	shl	_var01, #1
1ff30     FD 00 02 F1 | 	add	_var01, result1
1ff34     02 00 66 F0 | 	shl	_var01, #2
1ff38     FF 03 00 FF 
1ff3c     00 03 06 F6 | 	mov	_var02, ##524032
1ff40     00 03 02 F1 | 	add	_var02, _var01
1ff44                 | '     if long[mailbox] < 0
1ff44     01 01 02 FB | 	rdlong	_var01, _var02
1ff48     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff4c                 | '         return ERR_MAILBOX_BUSY
1ff4c     1C FA 65 C6 |  if_b	neg	result1, #28
1ff50     3C 00 90 CD |  if_b	jmp	#LR__2641
1ff54                 | '     long[mailbox][2] := count
1ff54     08 02 06 F1 | 	add	_var02, #8
1ff58     01 17 62 FC | 	wrlong	arg03, _var02
1ff5c                 | '     long[mailbox][1] := srcHubAddr
1ff5c     04 02 86 F1 | 	sub	_var02, #4
1ff60     01 13 62 FC | 	wrlong	arg01, _var02
1ff64     04 02 86 F1 | 	sub	_var02, #4
1ff68                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1ff68     0A 05 02 F6 | 	mov	_var03, arg02
1ff6c     D9 04 06 F4 | 	bitl	_var03, #217
1ff70     00 00 78 FF 
1ff74     00 00 06 F6 | 	mov	_var01, ##-268435456
1ff78     02 01 02 F1 | 	add	_var01, _var03
1ff7c     01 01 62 FC | 	wrlong	_var01, _var02
1ff80                 | '     repeat
1ff80                 | LR__2640
1ff80                 | '         result := long[mailbox]    
1ff80     01 05 02 FB | 	rdlong	_var03, _var02
1ff84     00 04 56 F2 | 	cmps	_var03, #0 wc
1ff88     F4 FF 9F CD |  if_b	jmp	#LR__2640
1ff8c                 | '     while result < 0   
1ff8c                 | '     return -result                       'return success or error
1ff8c     02 FB 61 F6 | 	neg	result1, _var03
1ff90                 | LR__2641
1ff90                 | _psram_spin2_write_ret
1ff90     2D 00 64 FD | 	ret
1ff94                 | 
1ff94                 | ' 
1ff94                 | ' ' generalized fill
1ff94                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1ff94                 | _psram_spin2_fill
1ff94     09 01 02 F6 | 	mov	_var01, arg01
1ff98     0A 03 02 F6 | 	mov	_var02, arg02
1ff9c     0B 05 02 F6 | 	mov	_var03, arg03
1ffa0     0D 07 02 F6 | 	mov	_var04, arg05
1ffa4                 | '     case datasize 
1ffa4     01 06 86 F1 | 	sub	_var04, #1
1ffa8     04 06 26 F3 | 	fle	_var04, #4
1ffac     30 06 62 FD | 	jmprel	_var04
1ffb0                 | LR__2650
1ffb0     10 00 90 FD | 	jmp	#LR__2651
1ffb4     18 00 90 FD | 	jmp	#LR__2652
1ffb8     2C 00 90 FD | 	jmp	#LR__2654
1ffbc     1C 00 90 FD | 	jmp	#LR__2653
1ffc0     24 00 90 FD | 	jmp	#LR__2654
1ffc4                 | LR__2651
1ffc4                 | '         1: req := driver.R_WRITEBYTE
1ffc4     00 00 60 FF 
1ffc8     00 08 06 F6 | 	mov	_var05, ##-1073741824
1ffcc     20 00 90 FD | 	jmp	#LR__2655
1ffd0                 | LR__2652
1ffd0                 | '         2: req := driver.R_WRITEWORD
1ffd0     00 00 68 FF 
1ffd4     00 08 06 F6 | 	mov	_var05, ##-805306368
1ffd8     14 00 90 FD | 	jmp	#LR__2655
1ffdc                 | LR__2653
1ffdc                 | '         4: req := driver.R_WRITELONG
1ffdc     00 00 70 FF 
1ffe0     00 08 06 F6 | 	mov	_var05, ##-536870912
1ffe4     08 00 90 FD | 	jmp	#LR__2655
1ffe8                 | LR__2654
1ffe8                 | '         other : return ERR_INVALID
1ffe8     06 FA 65 F6 | 	neg	result1, #6
1ffec     94 00 90 FD | 	jmp	#LR__2657
1fff0                 | LR__2655
1fff0                 | '     if count == 0   ' nothing to do
1fff0     00 04 0E F2 | 	cmp	_var03, #0 wz
1fff4                 | '         return 0
1fff4     00 FA 05 A6 |  if_e	mov	result1, #0
1fff8     88 00 90 AD |  if_e	jmp	#LR__2657
1fffc                 | '     if drivercog == -1
1fffc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20000     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
20004     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20008     FF FF 7F FF 
2000c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
20010                 | '         return ERR_INACTIVE
20010     0F FA 65 A6 |  if_e	neg	result1, #15
20014     6C 00 90 AD |  if_e	jmp	#LR__2657
20018                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
20018     00 FA 05 F6 | 	mov	result1, #0
2001c     01 FA 61 FD | 	cogid	result1
20020     FD 06 02 F6 | 	mov	_var04, result1
20024     01 06 66 F0 | 	shl	_var04, #1
20028     FD 06 02 F1 | 	add	_var04, result1
2002c     02 06 66 F0 | 	shl	_var04, #2
20030     FF 03 00 FF 
20034     00 0B 06 F6 | 	mov	_var06, ##524032
20038     03 0B 02 F1 | 	add	_var06, _var04
2003c                 | '     if long[mailbox] < 0
2003c     05 07 02 FB | 	rdlong	_var04, _var06
20040     00 06 56 F2 | 	cmps	_var04, #0 wc
20044                 | '         return ERR_MAILBOX_BUSY
20044     1C FA 65 C6 |  if_b	neg	result1, #28
20048     38 00 90 CD |  if_b	jmp	#LR__2657
2004c                 | '     long[mailbox][2] := count
2004c     08 0A 06 F1 | 	add	_var06, #8
20050     05 05 62 FC | 	wrlong	_var03, _var06
20054                 | '     long[mailbox][1] := pattern
20054     04 0A 86 F1 | 	sub	_var06, #4
20058     05 03 62 FC | 	wrlong	_var02, _var06
2005c     04 0A 86 F1 | 	sub	_var06, #4
20060                 | '     long[mailbox] := req + (addr & $1ffffff)
20060     04 0D 02 F6 | 	mov	_var07, _var05
20064     00 0F 02 F6 | 	mov	_var08, _var01
20068     D9 0E 06 F4 | 	bitl	_var08, #217
2006c     07 0D 02 F1 | 	add	_var07, _var08
20070     05 0D 62 FC | 	wrlong	_var07, _var06
20074                 | '     repeat
20074                 | LR__2656
20074                 | '         r := long[mailbox]
20074     05 0F 02 FB | 	rdlong	_var08, _var06
20078     00 0E 56 F2 | 	cmps	_var08, #0 wc
2007c     F4 FF 9F CD |  if_b	jmp	#LR__2656
20080                 | '     while r < 0
20080                 | '     return -r                  ' return 0 for success or negated error code
20080     07 FB 61 F6 | 	neg	result1, _var08
20084                 | LR__2657
20084                 | _psram_spin2_fill_ret
20084     2D 00 64 FD | 	ret
20088                 | 
20088                 | ' 
20088                 | ' '..............................................................................
20088                 | ' 
20088                 | ' {{
20088                 | ' }}
20088                 | ' PUB setQos(cog, qos) : result | mailbox
20088                 | _psram_spin2_setQos
20088     09 01 02 F6 | 	mov	_var01, arg01
2008c                 | '     if drivercog == -1 ' driver must be running
2008c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20090     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20094     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20098     FF FF 7F FF 
2009c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
200a0                 | '         return ERR_INACTIVE
200a0     0F FA 65 A6 |  if_e	neg	result1, #15
200a4     9C 00 90 AD |  if_e	jmp	#LR__2664
200a8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
200a8     00 00 56 F2 | 	cmps	_var01, #0 wc
200ac     08 00 90 CD |  if_b	jmp	#LR__2660
200b0     08 00 56 F2 | 	cmps	_var01, #8 wc
200b4     08 00 90 CD |  if_b	jmp	#LR__2661
200b8                 | LR__2660
200b8                 | '         return ERR_INVALID
200b8     06 FA 65 F6 | 	neg	result1, #6
200bc     84 00 90 FD | 	jmp	#LR__2664
200c0                 | LR__2661
200c0                 | '     long[@qosData][cog] := qos & !$1ff
200c0     FF 15 26 F5 | 	andn	arg02, #511
200c4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
200c8     02 00 66 F0 | 	shl	_var01, #2
200cc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
200d0     00 15 62 FC | 	wrlong	arg02, _var01
200d4                 | '     mailbox := $7FF00 + drivercog*12
200d4     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
200d8     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
200dc     02 07 02 F6 | 	mov	_var04, _var03
200e0     01 06 66 F0 | 	shl	_var04, #1
200e4     02 07 02 F1 | 	add	_var04, _var03
200e8     02 06 66 F0 | 	shl	_var04, #2
200ec     FF 03 00 FF 
200f0     00 09 06 F6 | 	mov	_var05, ##524032
200f4     03 09 02 F1 | 	add	_var05, _var04
200f8                 | '     repeat until LOCKTRY(driverlock)
200f8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
200fc                 | LR__2662
200fc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20100     06 12 72 FD | 	locktry	arg01 wc
20104     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
20108     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2010c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
2010c     00 06 06 F6 | 	mov	_var04, #0
20110     01 06 62 FD | 	cogid	_var04
20114     00 00 78 FF 
20118     00 02 06 F6 | 	mov	_var02, ##-268435456
2011c     03 03 02 F1 | 	add	_var02, _var04
20120     04 03 62 FC | 	wrlong	_var02, _var05
20124                 | '     repeat while long[mailbox] < 0
20124                 | LR__2663
20124     04 03 02 FB | 	rdlong	_var02, _var05
20128     00 02 56 F2 | 	cmps	_var02, #0 wc
2012c     F4 FF 9F CD |  if_b	jmp	#LR__2663
20130                 | '     LOCKREL(driverlock)
20130     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20134     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20138     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2013c     07 12 72 FD | 	lockrel	arg01 wc
20140     00 FA 05 F6 | 	mov	result1, #0
20144                 | LR__2664
20144                 | _psram_spin2_setQos_ret
20144     2D 00 64 FD | 	ret
20148                 | 
20148                 | ' 
20148                 | ' '..............................................................................
20148                 | ' 
20148                 | ' {{
20148                 | ' }}
20148                 | ' PRI lookupDelay(freq) : delay | profile
20148                 | _psram_spin2_lookupDelay
20148                 | '     profile := @delayTable
20148     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
2014c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
20150                 | '     delay := long[profile][0]
20150     00 03 02 FB | 	rdlong	_var02, _var01
20154                 | '     repeat while long[profile][1] 
20154     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
20158     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
2015c                 | LR__2670
2015c     04 00 06 F1 | 	add	_var01, #4
20160     00 FB 09 FB | 	rdlong	result1, _var01 wz
20164     04 00 86 F1 | 	sub	_var01, #4
20168     1C 00 90 AD |  if_e	jmp	#LR__2672
2016c                 | '         if freq +< long[profile][1] 
2016c     04 00 06 F1 | 	add	_var01, #4
20170     00 FB 01 FB | 	rdlong	result1, _var01
20174     04 00 86 F1 | 	sub	_var01, #4
20178     FD 12 12 F2 | 	cmp	arg01, result1 wc
2017c                 | '             quit
2017c                 | '         profile += 4
2017c     04 00 06 31 |  if_ae	add	_var01, #4
20180                 | '         delay++
20180     01 02 06 31 |  if_ae	add	_var02, #1
20184     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
20188                 | LR__2671
20188                 | LR__2672
20188     01 FB 01 F6 | 	mov	result1, _var02
2018c                 | _psram_spin2_lookupDelay_ret
2018c     2D 00 64 FD | 	ret
20190                 | 
20190                 | ' 
20190                 | ' PUB start() : r
20190                 | _usbnew_spin2_start
20190     00 00 06 F6 | 	mov	_var01, #0
20194                 | '   ifnot driver_cog
20194     15 00 00 FF 
20198     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
2019c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
201a0     15 00 00 FF 
201a4     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
201a8     38 00 90 5D |  if_ne	jmp	#LR__2680
201ac                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
201ac     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
201b0     10 00 06 F6 | 	mov	_var01, #16
201b4     00 16 06 F6 | 	mov	arg03, #0
201b8     28 16 62 FD | 	setq	arg03
201bc     0A 01 F2 FC | 	coginit	_var01, arg02 wc
201c0     01 00 66 C6 |  if_b	neg	_var01, #1
201c4                 | '     if r >= 0
201c4     00 00 56 F2 | 	cmps	_var01, #0 wc
201c8                 | '       driver_cog := r+1
201c8     00 03 02 36 |  if_ae	mov	_var02, _var01
201cc     01 02 06 31 |  if_ae	add	_var02, #1
201d0     15 00 00 3F 
201d4     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
201d8     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
201dc     15 00 00 3F 
201e0     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
201e4                 | LR__2680
201e4     00 FB 01 F6 | 	mov	result1, _var01
201e8                 | _usbnew_spin2_start_ret
201e8     2D 00 64 FD | 	ret
201ec                 | 
201ec                 | '     '' (Always enabled)
201ec                 | ' 
201ec                 | ' '' Get current pressed state of a keyboard key
201ec                 | ' PUB keystate(key) : r | buf[2],tmp
201ec                 | _usbnew_spin2_keystate
201ec     00 04 06 F6 | 	mov	_var03, #0
201f0                 | '   if key >= $E0 && key < $E8
201f0     E0 12 56 F2 | 	cmps	arg01, #224 wc
201f4     34 00 90 CD |  if_b	jmp	#LR__2690
201f8     E8 12 56 F2 | 	cmps	arg01, #232 wc
201fc     2C 00 90 3D |  if_ae	jmp	#LR__2690
20200                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20200     00 FA 05 F6 | 	mov	result1, #0
20204     13 00 00 FF 
20208     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2020c     09 07 02 F6 | 	mov	_var04, arg01
20210     E0 06 86 F1 | 	sub	_var04, #224
20214     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20218     03 09 4A F0 | 	shr	_var05, _var04 wz
2021c     13 00 00 FF 
20220     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20224     01 FA 65 56 |  if_ne	neg	result1, #1
20228     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
2022c                 | LR__2690
2022c                 | '   else
2022c                 | '     '' Do this in inline ASM to ensure atomicity
2022c                 | '     tmp := @hkbd_report
2022c     13 00 00 FF 
20230     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20234     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20238                 | '     org
20238     13 00 00 FF 
2023c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20240     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
20244                 | LR__2691
20244 000             | 	org	0
20244 000 28 02 64 FD | 	setq	#1
20248 001 04 01 02 FB | 	rdlong	_var01, _var05
2024c 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20250 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
20254 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20258 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2025c 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20260 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20264 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20268 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2026c 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20270 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20274 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20278 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2027c 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20280 00f             | LR__2692
20280                 | 	orgh
20280     02 FB 01 F6 | 	mov	result1, _var03
20284                 | _usbnew_spin2_keystate_ret
20284     2D 00 64 FD | 	ret
20288                 | 
20288                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20288                 | ' 
20288                 | ' '' Return key event from buffer if there is one
20288                 | ' PUB get_key() : r | tail
20288                 | _usbnew_spin2_get_key
20288                 | '   tail := keyq_tail
20288     0F 00 00 FF 
2028c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20290     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20294                 | '   if keyq_head == tail
20294     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20298     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
2029c     0F 00 00 FF 
202a0     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
202a4     00 03 0A F2 | 	cmp	_var02, _var01 wz
202a8                 | '     return 0 ' No event
202a8     00 FA 05 A6 |  if_e	mov	result1, #0
202ac     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
202b0                 | '   r := keyq_data[tail]
202b0     00 03 02 F6 | 	mov	_var02, _var01
202b4     02 02 66 F0 | 	shl	_var02, #2
202b8     0F 00 00 FF 
202bc     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
202c0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
202c4     01 FB 01 FB | 	rdlong	result1, _var02
202c8                 | '   if ++tail == KEYQUEUE_SIZE
202c8     01 00 06 F1 | 	add	_var01, #1
202cc     80 00 0E F2 | 	cmp	_var01, #128 wz
202d0                 | '     tail := 0
202d0     00 00 06 A6 |  if_e	mov	_var01, #0
202d4                 | '   keyq_tail := tail
202d4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
202d8     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
202dc     0F 00 00 FF 
202e0     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
202e4                 | _usbnew_spin2_get_key_ret
202e4     2D 00 64 FD | 	ret
202e8                 | 
202e8                 | ' 
202e8                 | ' '' Emulate mouse movement
202e8                 | ' PUB mouse_move(x,y)
202e8                 | _usbnew_spin2_mouse_move
202e8     02 4A 05 F6 | 	mov	COUNT_, #2
202ec     A8 00 A0 FD | 	call	#pushregs_
202f0     09 1F 02 F6 | 	mov	local01, arg01
202f4     0A 21 02 F6 | 	mov	local02, arg02
202f8                 | '   mouse_lock := 1
202f8     14 00 00 FF 
202fc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20300     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20304     14 00 00 FF 
20308     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
2030c                 | '   waitus(2) ' hope driver is now done
2030c     02 12 06 F6 | 	mov	arg01, #2
20310     E8 0A B0 FD | 	call	#__system___waitus
20314                 | '   mouse_xacc := x
20314     14 00 00 FF 
20318     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
2031c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20320                 | '   mouse_yacc := y
20320     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20324     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20328                 | '   if mouse_outptr
20328     04 00 00 FF 
2032c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
20330     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20334     0F 00 00 FF 
20338     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
2033c     24 00 90 AD |  if_e	jmp	#LR__2700
20340                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20340     10 20 66 F0 | 	shl	local02, #16
20344     0F 1F 32 F9 | 	getword	local01, local01, #0
20348     0F 21 42 F5 | 	or	local02, local01
2034c     0F 00 00 FF 
20350     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
20354     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20358     0F 00 00 FF 
2035c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20360     0F 21 62 FC | 	wrlong	local02, local01
20364                 | LR__2700
20364                 | '   mouse_lock := 0
20364     14 00 00 FF 
20368     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2036c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20370     14 00 00 FF 
20374     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20378     A7 F0 03 F6 | 	mov	ptra, fp
2037c     B2 00 A0 FD | 	call	#popregs_
20380                 | _usbnew_spin2_mouse_move_ret
20380     2D 00 64 FD | 	ret
20384                 | 
20384                 | '     '' Set HAVE_HIDPAD to enable.
20384                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20384                 | ' 
20384                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20384                 | ' PUB hidpad_id(dev) : r
20384                 | _usbnew_spin2_hidpad_id
20384                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20384     13 00 00 FF 
20388     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2038c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20390     09 01 02 F6 | 	mov	_var01, arg01
20394     03 00 66 F0 | 	shl	_var01, #3
20398     09 01 82 F1 | 	sub	_var01, arg01
2039c     02 00 66 F0 | 	shl	_var01, #2
203a0     00 FB 01 F1 | 	add	result1, _var01
203a4     FD FA 01 FB | 	rdlong	result1, result1
203a8     13 00 00 FF 
203ac     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
203b0                 | _usbnew_spin2_hidpad_id_ret
203b0     2D 00 64 FD | 	ret
203b4                 | 
203b4                 | ' 
203b4                 | ' '' Get all button states for a device
203b4                 | ' PUB hidpad_buttons(dev) : r 
203b4                 | _usbnew_spin2_hidpad_buttons
203b4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
203b4     13 00 00 FF 
203b8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
203bc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
203c0     09 01 02 F6 | 	mov	_var01, arg01
203c4     03 00 66 F0 | 	shl	_var01, #3
203c8     09 01 82 F1 | 	sub	_var01, arg01
203cc     02 00 66 F0 | 	shl	_var01, #2
203d0     00 FB 01 F1 | 	add	result1, _var01
203d4     14 FA 05 F1 | 	add	result1, #20
203d8     FD FA 01 FB | 	rdlong	result1, result1
203dc     13 00 00 FF 
203e0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
203e4                 | _usbnew_spin2_hidpad_buttons_ret
203e4     2D 00 64 FD | 	ret
203e8                 | 
203e8                 | ' 
203e8                 | ' '' Get state of an axis (normalized between -32768 and 32767)
203e8                 | ' PUB hidpad_axis(dev,axnum) : r
203e8                 | _usbnew_spin2_hidpad_axis
203e8                 | '   if axnum +>= 6
203e8     06 14 16 F2 | 	cmp	arg02, #6 wc
203ec                 | '     return 0
203ec     00 FA 05 36 |  if_ae	mov	result1, #0
203f0     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
203f4                 | '   else 
203f4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
203f4     13 00 00 FF 
203f8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
203fc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20400     09 01 02 F6 | 	mov	_var01, arg01
20404     03 00 66 F0 | 	shl	_var01, #3
20408     09 01 82 F1 | 	sub	_var01, arg01
2040c     02 00 66 F0 | 	shl	_var01, #2
20410     00 FB 01 F1 | 	add	result1, _var01
20414     04 00 06 F6 | 	mov	_var01, #4
20418     0A 01 02 F1 | 	add	_var01, arg02
2041c     01 00 66 F0 | 	shl	_var01, #1
20420     FD 00 02 F1 | 	add	_var01, result1
20424     00 FB E1 FA | 	rdword	result1, _var01
20428     0F FA 65 F7 | 	signx	result1, #15
2042c     13 00 00 FF 
20430     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20434                 | _usbnew_spin2_hidpad_axis_ret
20434     2D 00 64 FD | 	ret
20438                 | 
20438                 | ' 
20438                 | ' 
20438                 | ' '--------------------------------------------------------------
20438                 | ' '---------- Init the variables, start the cog. ----------------
20438                 | ' '--------------------------------------------------------------
20438                 | ' 
20438                 | ' pub start(mbox,scope,cache) :cog,base | iii
20438                 | _audio096_spin2_start
20438     04 4A 05 F6 | 	mov	COUNT_, #4
2043c     A8 00 A0 FD | 	call	#pushregs_
20440     09 1F 02 F6 | 	mov	local01, arg01
20444                 | ' 
20444                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20444                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20444                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20444                 | ' 
20444                 | ' mailboxaddr:=mbox 
20444     F2 1E 62 FC | 	wrlong	local01, objptr
20448                 | ' scope_ptr:=scope
20448     04 E4 05 F1 | 	add	objptr, #4
2044c     F2 14 62 FC | 	wrlong	arg02, objptr
20450                 | ' cache_ptr:=cache
20450     04 E4 05 F1 | 	add	objptr, #4
20454     F2 16 62 FC | 	wrlong	arg03, objptr
20458                 | ' base:=@channel1[0]
20458     04 E4 05 F1 | 	add	objptr, #4
2045c     F2 20 02 F6 | 	mov	local02, objptr
20460                 | ' long[$40]:=mbox
20460     40 1E 66 FC | 	wrlong	local01, #64
20464                 | ' repeat iii from 0 to 7
20464     00 22 06 F6 | 	mov	local03, #0
20468     02 00 00 FF 
2046c     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20470     0C E4 85 F1 | 	sub	objptr, #12
20474     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
20478                 | LR__2710
20478                 | '   long[base+64*iii]:=0
20478     10 1F 02 F6 | 	mov	local01, local02
2047c     11 FD 01 F6 | 	mov	result2, local03
20480     06 FC 65 F0 | 	shl	result2, #6
20484     FE 1E 02 F1 | 	add	local01, result2
20488     0F 01 68 FC | 	wrlong	#0, local01
2048c                 | '   long[base+64*iii+4]:=0
2048c     10 1F 02 F6 | 	mov	local01, local02
20490     11 FD 01 F6 | 	mov	result2, local03
20494     06 FC 65 F0 | 	shl	result2, #6
20498     FE 1E 02 F1 | 	add	local01, result2
2049c     04 1E 06 F1 | 	add	local01, #4
204a0     0F 01 68 FC | 	wrlong	#0, local01
204a4                 | '   long[base+64*iii+12]:=0
204a4     10 25 02 F6 | 	mov	local04, local02
204a8     11 1F 02 F6 | 	mov	local01, local03
204ac     06 1E 66 F0 | 	shl	local01, #6
204b0     0F 25 02 F1 | 	add	local04, local01
204b4     0C 24 06 F1 | 	add	local04, #12
204b8     12 01 68 FC | 	wrlong	#0, local04
204bc                 | '   long[base+64*iii+16]:=2 
204bc     10 25 02 F6 | 	mov	local04, local02
204c0     11 1F 02 F6 | 	mov	local01, local03
204c4     06 1E 66 F0 | 	shl	local01, #6
204c8     0F 25 02 F1 | 	add	local04, local01
204cc     10 24 06 F1 | 	add	local04, #16
204d0     12 05 68 FC | 	wrlong	#2, local04
204d4                 | '   word[base+64*iii+20]:=0
204d4     10 25 02 F6 | 	mov	local04, local02
204d8     11 1F 02 F6 | 	mov	local01, local03
204dc     06 1E 66 F0 | 	shl	local01, #6
204e0     0F 25 02 F1 | 	add	local04, local01
204e4     14 24 06 F1 | 	add	local04, #20
204e8     12 01 58 FC | 	wrword	#0, local04
204ec                 | '   word[base+64*iii+22]:=8192
204ec     10 25 02 F6 | 	mov	local04, local02
204f0     11 1F 02 F6 | 	mov	local01, local03
204f4     06 1E 66 F0 | 	shl	local01, #6
204f8     0F 25 02 F1 | 	add	local04, local01
204fc     16 24 06 F1 | 	add	local04, #22
20500     10 00 80 FF 
20504     12 01 58 FC | 	wrword	##8192, local04
20508                 | '   word[base+64*iii+24]:=4000+2*iii
20508     11 25 02 F6 | 	mov	local04, local03
2050c     01 24 66 F0 | 	shl	local04, #1
20510     07 00 00 FF 
20514     A0 1F 06 F6 | 	mov	local01, ##4000
20518     12 1F 02 F1 | 	add	local01, local04
2051c     10 25 02 F6 | 	mov	local04, local02
20520     11 FD 01 F6 | 	mov	result2, local03
20524     06 FC 65 F0 | 	shl	result2, #6
20528     FE 24 02 F1 | 	add	local04, result2
2052c     18 24 06 F1 | 	add	local04, #24
20530     12 1F 52 FC | 	wrword	local01, local04
20534                 | '   word[base+64*iii+26]:=2
20534     10 25 02 F6 | 	mov	local04, local02
20538     11 1F 02 F6 | 	mov	local01, local03
2053c     06 1E 66 F0 | 	shl	local01, #6
20540     0F 25 02 F1 | 	add	local04, local01
20544     1A 24 06 F1 | 	add	local04, #26
20548     12 05 58 FC | 	wrword	#2, local04
2054c                 | '   long [base+64*iii+8]:=@null | $C0000000
2054c     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
20550     3E 1E 26 F4 | 	bith	local01, #62
20554     10 25 02 F6 | 	mov	local04, local02
20558     11 17 02 F6 | 	mov	arg03, local03
2055c     06 16 66 F0 | 	shl	arg03, #6
20560     0B 25 02 F1 | 	add	local04, arg03
20564     08 24 06 F1 | 	add	local04, #8
20568     12 1F 62 FC | 	wrlong	local01, local04
2056c                 | '   long[base+64*iii+32]:=0
2056c     10 25 02 F6 | 	mov	local04, local02
20570     11 1F 02 F6 | 	mov	local01, local03
20574     06 1E 66 F0 | 	shl	local01, #6
20578     0F 25 02 F1 | 	add	local04, local01
2057c     20 24 06 F1 | 	add	local04, #32
20580     12 01 68 FC | 	wrlong	#0, local04
20584                 | '   long[base+64*iii+36]:=0
20584     10 25 02 F6 | 	mov	local04, local02
20588     11 1F 02 F6 | 	mov	local01, local03
2058c     06 1E 66 F0 | 	shl	local01, #6
20590     0F 25 02 F1 | 	add	local04, local01
20594     24 24 06 F1 | 	add	local04, #36
20598     12 01 68 FC | 	wrlong	#0, local04
2059c                 | '   long[base+64*iii+40]:=0
2059c     10 25 02 F6 | 	mov	local04, local02
205a0     11 1F 02 F6 | 	mov	local01, local03
205a4     06 1E 66 F0 | 	shl	local01, #6
205a8     0F 25 02 F1 | 	add	local04, local01
205ac     28 24 06 F1 | 	add	local04, #40
205b0     12 01 68 FC | 	wrlong	#0, local04
205b4                 | '   long[base+64*iii+44]:=0
205b4     10 25 02 F6 | 	mov	local04, local02
205b8     11 1F 02 F6 | 	mov	local01, local03
205bc     06 1E 66 F0 | 	shl	local01, #6
205c0     0F 25 02 F1 | 	add	local04, local01
205c4     2C 24 06 F1 | 	add	local04, #44
205c8     12 01 68 FC | 	wrlong	#0, local04
205cc                 | '   long[base+64*iii+28]:=0
205cc     10 25 02 F6 | 	mov	local04, local02
205d0     11 1F 02 F6 | 	mov	local01, local03
205d4     06 1E 66 F0 | 	shl	local01, #6
205d8     0F 25 02 F1 | 	add	local04, local01
205dc     1C 24 06 F1 | 	add	local04, #28
205e0     12 01 68 FC | 	wrlong	#0, local04
205e4     01 22 06 F1 | 	add	local03, #1
205e8     08 22 56 F2 | 	cmps	local03, #8 wc
205ec     88 FE 9F CD |  if_b	jmp	#LR__2710
205f0                 | LR__2711
205f0     02 00 00 FF 
205f4     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
205f8                 | '   
205f8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
205f8     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
205fc     F2 16 02 F6 | 	mov	arg03, objptr
20600     10 24 06 F6 | 	mov	local04, #16
20604     28 16 62 FD | 	setq	arg03
20608     0A 25 F2 FC | 	coginit	local04, arg02 wc
2060c     01 24 66 C6 |  if_b	neg	local04, #1
20610                 | ' waitms(100)
20610     64 12 06 F6 | 	mov	arg01, #100
20614     78 07 B0 FD | 	call	#__system___waitms
20618                 | ' return cog,base
20618     10 FD 01 F6 | 	mov	result2, local02
2061c     12 FB 01 F6 | 	mov	result1, local04
20620     A7 F0 03 F6 | 	mov	ptra, fp
20624     B2 00 A0 FD | 	call	#popregs_
20628                 | _audio096_spin2_start_ret
20628     2D 00 64 FD | 	ret
2062c                 | 
2062c                 | ' 
2062c                 | ' ' a simple play procedure to not poke everything. 
2062c                 | ' 
2062c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
2062c                 | _audio096_spin2_play
2062c     0C E4 05 F1 | 	add	objptr, #12
20630     F2 00 02 F6 | 	mov	_var01, objptr
20634     06 12 66 F0 | 	shl	arg01, #6
20638     09 01 02 F1 | 	add	_var01, arg01
2063c     00 13 02 F6 | 	mov	arg01, _var01
20640     0C 12 06 F1 | 	add	arg01, #12
20644     09 1B 62 FC | 	wrlong	arg05, arg01
20648     00 1C 56 F2 | 	cmps	arg06, #0 wc
2064c     00 13 02 36 |  if_ae	mov	arg01, _var01
20650     10 12 06 31 |  if_ae	add	arg01, #16
20654     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
20658     02 1A 06 C1 |  if_b	add	arg05, #2
2065c     00 13 02 C6 |  if_b	mov	arg01, _var01
20660     10 12 06 C1 |  if_b	add	arg01, #16
20664     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20668     0B 13 52 F6 | 	abs	arg01, arg03 wc
2066c     0F 1B 80 FF 
20670     09 1F 1A FD | 	qdiv	##3546895, arg01
20674                 | ' 
20674                 | ' base2:=@channel1[0]+64*channel
20674                 | ' 
20674                 | ' 
20674                 | ' long[base2+12]:= len
20674                 | ' if loop >=0 
20674                 | '   long[base2+16]:= loop
20674     0C E4 85 F1 | 	sub	objptr, #12
20678                 | ' else
20678                 | '   long[base2+16]:= len+2
20678                 | ' word[base2+20]:=vol
20678     00 13 02 F6 | 	mov	arg01, _var01
2067c     14 12 06 F1 | 	add	arg01, #20
20680     09 19 52 FC | 	wrword	arg04, arg01
20684                 | ' word[base2+24]:= 3546895/splfreq 
20684     00 19 02 F6 | 	mov	arg04, _var01
20688     18 18 06 F1 | 	add	arg04, #24
2068c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2068c                 | ' long[base2+28]:=$40000000    
2068c                 | ' long[base2+32]:=0    
2068c                 | ' long[base2+36]:=0    
2068c                 | ' long[base2+40]:=0    
2068c                 | ' long[base2+44]:=0    
2068c                 | ' long[base2+8]:=sample+$C0000000     
2068c     00 00 60 FF 
20690     00 14 06 F1 | 	add	arg02, ##-1073741824
20694     18 12 62 FD | 	getqx	arg01
20698     09 13 82 F6 | 	negc	arg01, arg01
2069c     0C 13 52 FC | 	wrword	arg01, arg04
206a0     00 13 02 F6 | 	mov	arg01, _var01
206a4     1A 12 06 F1 | 	add	arg01, #26
206a8     09 01 5A FC | 	wrword	#256, arg01
206ac     00 13 02 F6 | 	mov	arg01, _var01
206b0     1C 12 06 F1 | 	add	arg01, #28
206b4     00 00 A0 FF 
206b8     09 01 68 FC | 	wrlong	##1073741824, arg01
206bc     00 13 02 F6 | 	mov	arg01, _var01
206c0     20 12 06 F1 | 	add	arg01, #32
206c4     09 01 68 FC | 	wrlong	#0, arg01
206c8     00 13 02 F6 | 	mov	arg01, _var01
206cc     24 12 06 F1 | 	add	arg01, #36
206d0     09 01 68 FC | 	wrlong	#0, arg01
206d4     00 13 02 F6 | 	mov	arg01, _var01
206d8     28 12 06 F1 | 	add	arg01, #40
206dc     09 01 68 FC | 	wrlong	#0, arg01
206e0     00 13 02 F6 | 	mov	arg01, _var01
206e4     2C 12 06 F1 | 	add	arg01, #44
206e8     09 01 68 FC | 	wrlong	#0, arg01
206ec     08 00 06 F1 | 	add	_var01, #8
206f0     00 15 62 FC | 	wrlong	arg02, _var01
206f4                 | _audio096_spin2_play_ret
206f4     2D 00 64 FD | 	ret
206f8                 | 
206f8                 | ' 
206f8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
206f8                 | _audio096_spin2_play8
206f8                 | ' 
206f8                 | ' base2:=@channel1[0]+64*channel
206f8     0C E4 05 F1 | 	add	objptr, #12
206fc     F2 00 02 F6 | 	mov	_var01, objptr
20700     06 12 66 F0 | 	shl	arg01, #6
20704     09 01 02 F1 | 	add	_var01, arg01
20708                 | ' long[base2]:=0
20708     00 01 68 FC | 	wrlong	#0, _var01
2070c                 | ' long[base2+8]:=sample+$40000000 
2070c     00 00 20 FF 
20710     00 14 06 F1 | 	add	arg02, ##1073741824
20714     00 13 02 F6 | 	mov	arg01, _var01
20718     08 12 06 F1 | 	add	arg01, #8
2071c     09 15 62 FC | 	wrlong	arg02, arg01
20720                 | ' if loop>=0
20720     00 1C 56 F2 | 	cmps	arg06, #0 wc
20724     0C E4 85 F1 | 	sub	objptr, #12
20728     1C 00 90 CD |  if_b	jmp	#LR__2720
2072c                 | '   long[base2+12]:=loop
2072c     00 15 02 F6 | 	mov	arg02, _var01
20730     0C 14 06 F1 | 	add	arg02, #12
20734     0A 1D 62 FC | 	wrlong	arg06, arg02
20738                 | '   long[base2+16]:= len
20738     00 1D 02 F6 | 	mov	arg06, _var01
2073c     10 1C 06 F1 | 	add	arg06, #16
20740     0E 1B 62 FC | 	wrlong	arg05, arg06
20744     1C 00 90 FD | 	jmp	#LR__2721
20748                 | LR__2720
20748                 | ' else
20748                 | '   long[base2+12]:= len
20748     00 1D 02 F6 | 	mov	arg06, _var01
2074c     0C 1C 06 F1 | 	add	arg06, #12
20750     0E 1B 62 FC | 	wrlong	arg05, arg06
20754                 | '   long[base2+16]:= len+1
20754     01 1A 06 F1 | 	add	arg05, #1
20758     00 13 02 F6 | 	mov	arg01, _var01
2075c     10 12 06 F1 | 	add	arg01, #16
20760     09 1B 62 FC | 	wrlong	arg05, arg01
20764                 | LR__2721
20764     0B 17 52 F6 | 	abs	arg03, arg03 wc
20768     0F 1B 80 FF 
2076c     0B 1F 1A FD | 	qdiv	##3546895, arg03
20770                 | ' word[base2+20]:=vol
20770     00 17 02 F6 | 	mov	arg03, _var01
20774     14 16 06 F1 | 	add	arg03, #20
20778     0B 19 52 FC | 	wrword	arg04, arg03
2077c                 | ' word[base2+24]:= 3546895 /splfreq 
2077c     00 13 02 F6 | 	mov	arg01, _var01
20780     18 12 06 F1 | 	add	arg01, #24
20784                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20784     1A 00 06 F1 | 	add	_var01, #26
20788     18 18 62 FD | 	getqx	arg04
2078c     0C 19 82 F6 | 	negc	arg04, arg04
20790     09 19 52 FC | 	wrword	arg04, arg01
20794     00 01 5A FC | 	wrword	#256, _var01
20798                 | _audio096_spin2_play8_ret
20798     2D 00 64 FD | 	ret
2079c                 | 
2079c                 | ' 'long[base2+28]:=$40000000
2079c                 | ' 
2079c                 | '     
2079c                 | ' pub stop(channel) 'silence it
2079c                 | _audio096_spin2_stop
2079c                 | ' 
2079c                 | ' word[@channel1[0]+64*channel+20]:=0
2079c     0C E4 05 F1 | 	add	objptr, #12
207a0     F2 00 02 F6 | 	mov	_var01, objptr
207a4     09 03 02 F6 | 	mov	_var02, arg01
207a8     06 02 66 F0 | 	shl	_var02, #6
207ac     01 01 02 F1 | 	add	_var01, _var02
207b0     14 00 06 F1 | 	add	_var01, #20
207b4     00 01 58 FC | 	wrword	#0, _var01
207b8                 | ' word[@channel1[0]+64*channel+20]:=0
207b8     F2 00 02 F6 | 	mov	_var01, objptr
207bc     06 12 66 F0 | 	shl	arg01, #6
207c0     09 01 02 F1 | 	add	_var01, arg01
207c4     14 00 06 F1 | 	add	_var01, #20
207c8     00 01 58 FC | 	wrword	#0, _var01
207cc     0C E4 85 F1 | 	sub	objptr, #12
207d0                 | _audio096_spin2_stop_ret
207d0     2D 00 64 FD | 	ret
207d4                 | hubexit
207d4     81 00 80 FD | 	jmp	#cogexit
207d8                 | 
207d8                 | __system___setbaud
207d8     14 7C 06 FB | 	rdlong	muldiva_, #20
207dc     09 7F 02 F6 | 	mov	muldivb_, arg01
207e0     BA 00 A0 FD | 	call	#divide_
207e4     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
207e8                 | LR__2730
207e8     3E FA 9D FA | 	rdpin	result1, #62 wc
207ec     FE FC A1 F1 | 	subx	result2, result2
207f0     F4 FF 9F CD |  if_b	jmp	#LR__2730
207f4                 | LR__2731
207f4     40 7C 64 FD | 	dirl	#62
207f8     40 7E 64 FD | 	dirl	#63
207fc     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20800     10 7E 66 F0 | 	shl	muldivb_, #16
20804     07 14 06 F6 | 	mov	arg02, #7
20808     3F 15 02 F1 | 	add	arg02, muldivb_
2080c     3E F8 0C FC | 	wrpin	#124, #62
20810     3E 14 16 FC | 	wxpin	arg02, #62
20814     3F 7C 0C FC | 	wrpin	#62, #63
20818     14 14 06 F1 | 	add	arg02, #20
2081c     3F 14 16 FC | 	wxpin	arg02, #63
20820     41 7C 64 FD | 	dirh	#62
20824     41 7E 64 FD | 	dirh	#63
20828                 | __system___setbaud_ret
20828     2D 00 64 FD | 	ret
2082c                 | 
2082c                 | __system___txraw
2082c     01 4A 05 F6 | 	mov	COUNT_, #1
20830     A8 00 A0 FD | 	call	#pushregs_
20834     09 1F 02 F6 | 	mov	local01, arg01
20838     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
2083c                 | LR__2740
2083c     3E FA 9D FA | 	rdpin	result1, #62 wc
20840     FE FC A1 F1 | 	subx	result2, result2
20844     F4 FF 9F CD |  if_b	jmp	#LR__2740
20848                 | LR__2741
20848     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
2084c     C2 01 00 AF 
20850     00 12 06 A6 |  if_e	mov	arg01, ##230400
20854     80 FF BF AD |  if_e	call	#__system___setbaud
20858     58 7C 64 FD | 	drvl	#62
2085c     3E 1E 26 FC | 	wypin	local01, #62
20860     01 FA 05 F6 | 	mov	result1, #1
20864     A7 F0 03 F6 | 	mov	ptra, fp
20868     B2 00 A0 FD | 	call	#popregs_
2086c                 | __system___txraw_ret
2086c     2D 00 64 FD | 	ret
20870                 | 
20870                 | __system___rxraw
20870     0D 4A 05 F6 | 	mov	COUNT_, #13
20874     A8 00 A0 FD | 	call	#pushregs_
20878     09 1F 02 F6 | 	mov	local01, arg01
2087c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20880     C2 01 00 AF 
20884     00 12 06 A6 |  if_e	mov	arg01, ##230400
20888     4C FF BF AD |  if_e	call	#__system___setbaud
2088c     00 1E 0E F2 | 	cmp	local01, #0 wz
20890     20 00 90 AD |  if_e	jmp	#LR__2750
20894     14 22 06 FB | 	rdlong	local03, #20
20898     0A 22 46 F0 | 	shr	local03, #10
2089c     11 1F 02 FD | 	qmul	local01, local03
208a0     1A FA 61 FD | 	getct	result1
208a4     18 24 62 FD | 	getqx	local04
208a8     12 FB 01 F1 | 	add	result1, local04
208ac     FD 26 02 F6 | 	mov	local05, result1
208b0     04 00 90 FD | 	jmp	#LR__2751
208b4                 | LR__2750
208b4     00 26 06 F6 | 	mov	local05, #0
208b8                 | LR__2751
208b8     01 28 66 F6 | 	neg	local06, #1
208bc     3F 2A 06 F6 | 	mov	local07, #63
208c0     00 2C 06 F6 | 	mov	local08, #0
208c4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
208c8     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
208cc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
208d0                 | LR__2752
208d0     08 2E 16 F4 | 	testb	local09, #8 wc
208d4     09 2E 76 F4 | 	testbn	local09, #9 andc
208d8     0A 2E 46 F0 | 	shr	local09, #10
208dc     01 2C 06 C6 |  if_b	mov	local08, #1
208e0     40 7E 6C 3D |  if_ae	testp	#63 wz
208e4     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
208e8     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
208ec     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
208f0                 | LR__2753
208f0     00 20 06 F6 | 	mov	local02, #0
208f4     00 2C 0E F2 | 	cmp	local08, #0 wz
208f8     01 20 66 56 |  if_ne	neg	local02, #1
208fc     00 30 06 F6 | 	mov	local10, #0
20900     00 22 06 F6 | 	mov	local03, #0
20904     00 1E 0E F2 | 	cmp	local01, #0 wz
20908     01 22 66 56 |  if_ne	neg	local03, #1
2090c     00 24 06 F6 | 	mov	local04, #0
20910     00 32 06 F6 | 	mov	local11, #0
20914     1A FA 61 FD | 	getct	result1
20918     FD 34 02 F6 | 	mov	local12, result1
2091c     1A 37 02 F6 | 	mov	local13, local12
20920     13 37 82 F1 | 	sub	local13, local05
20924     00 36 56 F2 | 	cmps	local13, #0 wc
20928     00 32 26 C6 |  if_b	not	local11, #0
2092c     00 32 0E F2 | 	cmp	local11, #0 wz
20930     00 24 26 56 |  if_ne	not	local04, #0
20934     12 23 CA F7 | 	test	local03, local04 wz
20938     00 30 26 56 |  if_ne	not	local10, #0
2093c     18 21 4A F5 | 	or	local02, local10 wz
20940     8C FF 9F AD |  if_e	jmp	#LR__2752
20944     00 2C 0E F2 | 	cmp	local08, #0 wz
20948     17 29 02 56 |  if_ne	mov	local06, local09
2094c     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
20950     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20954     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
20958     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2095c     14 FB 01 F6 | 	mov	result1, local06
20960     A7 F0 03 F6 | 	mov	ptra, fp
20964     B2 00 A0 FD | 	call	#popregs_
20968                 | __system___rxraw_ret
20968     2D 00 64 FD | 	ret
2096c                 | 
2096c                 | __system___getus
2096c     1A FC 71 FD | 	getct	result2 wc
20970     1A 00 62 FD | 	getct	_var01
20974     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20978     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2097c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20980     20 00 90 5D |  if_ne	jmp	#LR__2760
20984     14 02 06 FB | 	rdlong	_var02, #20
20988     A1 07 00 FF 
2098c     40 02 16 FD | 	qdiv	_var02, ##1000000
20990     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20994     18 FA 61 FD | 	getqx	result1
20998     FD 02 02 F6 | 	mov	_var02, result1
2099c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
209a0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
209a4                 | LR__2760
209a4     01 FD 11 FD | 	qdiv	result2, _var02
209a8     19 FC 61 FD | 	getqy	result2
209ac     28 FC 61 FD | 	setq	result2
209b0     01 01 12 FD | 	qdiv	_var01, _var02
209b4     18 FA 61 FD | 	getqx	result1
209b8                 | __system___getus_ret
209b8     2D 00 64 FD | 	ret
209bc                 | 
209bc                 | __system____builtin_memmove
209bc     09 01 02 F6 | 	mov	_var01, arg01
209c0     0A 13 52 F2 | 	cmps	arg01, arg02 wc
209c4     10 00 90 CD |  if_b	jmp	#LR__2770
209c8     0A 03 02 F6 | 	mov	_var02, arg02
209cc     0B 03 02 F1 | 	add	_var02, arg03
209d0     01 13 52 F2 | 	cmps	arg01, _var02 wc
209d4     48 00 90 CD |  if_b	jmp	#LR__2776
209d8                 | LR__2770
209d8     0B 05 02 F6 | 	mov	_var03, arg03
209dc     02 04 4E F0 | 	shr	_var03, #2 wz
209e0     18 00 90 AD |  if_e	jmp	#LR__2775
209e4     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
209e8                 | LR__2771
209e8     02 09 D8 FC | 	rep	@LR__2774, _var03
209ec                 | LR__2772
209ec     0A 05 02 FB | 	rdlong	_var03, arg02
209f0     09 05 62 FC | 	wrlong	_var03, arg01
209f4     04 12 06 F1 | 	add	arg01, #4
209f8     04 14 06 F1 | 	add	arg02, #4
209fc                 | LR__2773
209fc                 | LR__2774
209fc                 | LR__2775
209fc     02 16 CE F7 | 	test	arg03, #2 wz
20a00     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20a04     09 03 52 5C |  if_ne	wrword	_var02, arg01
20a08     02 12 06 51 |  if_ne	add	arg01, #2
20a0c     02 14 06 51 |  if_ne	add	arg02, #2
20a10     01 16 CE F7 | 	test	arg03, #1 wz
20a14     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
20a18     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
20a1c     28 00 90 FD | 	jmp	#LR__2782
20a20                 | LR__2776
20a20     0B 13 02 F1 | 	add	arg01, arg03
20a24     0B 15 02 F1 | 	add	arg02, arg03
20a28     0B 07 0A F6 | 	mov	_var04, arg03 wz
20a2c     18 00 90 AD |  if_e	jmp	#LR__2781
20a30     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
20a34                 | LR__2777
20a34     03 09 D8 FC | 	rep	@LR__2780, _var04
20a38                 | LR__2778
20a38     01 12 86 F1 | 	sub	arg01, #1
20a3c     01 14 86 F1 | 	sub	arg02, #1
20a40     0A 03 C2 FA | 	rdbyte	_var02, arg02
20a44     09 03 42 FC | 	wrbyte	_var02, arg01
20a48                 | LR__2779
20a48                 | LR__2780
20a48                 | LR__2781
20a48                 | LR__2782
20a48     00 FB 01 F6 | 	mov	result1, _var01
20a4c                 | __system____builtin_memmove_ret
20a4c     2D 00 64 FD | 	ret
20a50                 | 
20a50                 | __system____builtin_strcpy
20a50     09 01 02 F6 | 	mov	_var01, arg01
20a54     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
20a58                 | LR__2790
20a58     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20a5c     09 FB 41 FC | 	wrbyte	result1, arg01
20a60     01 14 06 F1 | 	add	arg02, #1
20a64     01 12 06 F1 | 	add	arg01, #1
20a68     EC FF 9F 5D |  if_ne	jmp	#LR__2790
20a6c                 | LR__2791
20a6c     00 FB 01 F6 | 	mov	result1, _var01
20a70                 | __system____builtin_strcpy_ret
20a70     2D 00 64 FD | 	ret
20a74                 | 
20a74                 | __system____topofstack
20a74     00 4A 05 F6 | 	mov	COUNT_, #0
20a78     A8 00 A0 FD | 	call	#pushregs_
20a7c     08 F0 07 F1 | 	add	ptra, #8
20a80     04 4E 05 F1 | 	add	fp, #4
20a84     A7 12 62 FC | 	wrlong	arg01, fp
20a88     A7 FA 01 F6 | 	mov	result1, fp
20a8c     04 4E 85 F1 | 	sub	fp, #4
20a90     A7 F0 03 F6 | 	mov	ptra, fp
20a94     B2 00 A0 FD | 	call	#popregs_
20a98                 | __system____topofstack_ret
20a98     2D 00 64 FD | 	ret
20a9c                 | 
20a9c                 | __system___lockmem
20a9c     00 FA 05 F6 | 	mov	result1, #0
20aa0     01 FA 61 FD | 	cogid	result1
20aa4     00 FB 05 F1 | 	add	result1, #256
20aa8                 | LR__2800
20aa8     09 01 0A FB | 	rdlong	_var01, arg01 wz
20aac     09 FB 61 AC |  if_e	wrlong	result1, arg01
20ab0     09 01 02 AB |  if_e	rdlong	_var01, arg01
20ab4     09 01 02 AB |  if_e	rdlong	_var01, arg01
20ab8     FD 00 0A F2 | 	cmp	_var01, result1 wz
20abc     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20ac0                 | __system___lockmem_ret
20ac0     2D 00 64 FD | 	ret
20ac4                 | 
20ac4                 | __system___string_cmp
20ac4     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20ac8                 | LR__2810
20ac8     09 01 C2 FA | 	rdbyte	_var01, arg01
20acc     0A 03 C2 FA | 	rdbyte	_var02, arg02
20ad0     00 05 02 F6 | 	mov	_var03, _var01
20ad4     01 05 8A F1 | 	sub	_var03, _var02 wz
20ad8     01 12 06 F1 | 	add	arg01, #1
20adc     01 14 06 F1 | 	add	arg02, #1
20ae0     0C 00 90 5D |  if_ne	jmp	#LR__2812
20ae4     00 00 0E F2 | 	cmp	_var01, #0 wz
20ae8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20aec     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
20af0                 | LR__2811
20af0                 | LR__2812
20af0     02 FB 01 F6 | 	mov	result1, _var03
20af4                 | __system___string_cmp_ret
20af4     2D 00 64 FD | 	ret
20af8                 | 
20af8                 | __system___string_concat
20af8     05 4A 05 F6 | 	mov	COUNT_, #5
20afc     A8 00 A0 FD | 	call	#pushregs_
20b00     09 1F 02 F6 | 	mov	local01, arg01
20b04     0A 21 02 F6 | 	mov	local02, arg02
20b08     0F 13 02 F6 | 	mov	arg01, local01
20b0c     09 23 02 F6 | 	mov	local03, arg01
20b10     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
20b14                 | LR__2820
20b14     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b18     01 22 06 51 |  if_ne	add	local03, #1
20b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
20b20                 | LR__2821
20b20     09 23 82 F1 | 	sub	local03, arg01
20b24     11 25 02 F6 | 	mov	local04, local03
20b28     10 13 02 F6 | 	mov	arg01, local02
20b2c     09 23 02 F6 | 	mov	local03, arg01
20b30     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
20b34                 | LR__2822
20b34     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b38     01 22 06 51 |  if_ne	add	local03, #1
20b3c     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
20b40                 | LR__2823
20b40     09 23 82 F1 | 	sub	local03, arg01
20b44     12 13 02 F6 | 	mov	arg01, local04
20b48     11 13 02 F1 | 	add	arg01, local03
20b4c     01 12 06 F1 | 	add	arg01, #1
20b50     00 3E B0 FD | 	call	#__system___gc_alloc_managed
20b54     FD 26 0A F6 | 	mov	local05, result1 wz
20b58     28 00 90 AD |  if_e	jmp	#LR__2824
20b5c     13 13 02 F6 | 	mov	arg01, local05
20b60     0F 15 02 F6 | 	mov	arg02, local01
20b64     12 17 02 F6 | 	mov	arg03, local04
20b68     50 FE BF FD | 	call	#__system____builtin_memmove
20b6c     13 13 02 F6 | 	mov	arg01, local05
20b70     12 13 02 F1 | 	add	arg01, local04
20b74     01 22 06 F1 | 	add	local03, #1
20b78     10 15 02 F6 | 	mov	arg02, local02
20b7c     11 17 02 F6 | 	mov	arg03, local03
20b80     38 FE BF FD | 	call	#__system____builtin_memmove
20b84                 | LR__2824
20b84     13 FB 01 F6 | 	mov	result1, local05
20b88     A7 F0 03 F6 | 	mov	ptra, fp
20b8c     B2 00 A0 FD | 	call	#popregs_
20b90                 | __system___string_concat_ret
20b90     2D 00 64 FD | 	ret
20b94                 | 
20b94                 | __system___tx
20b94     02 4A 05 F6 | 	mov	COUNT_, #2
20b98     A8 00 A0 FD | 	call	#pushregs_
20b9c     09 1F 02 F6 | 	mov	local01, arg01
20ba0     0A 1E 0E F2 | 	cmp	local01, #10 wz
20ba4     18 00 90 5D |  if_ne	jmp	#LR__2830
20ba8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20bac     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20bb0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20bb4     02 20 CE F7 | 	test	local02, #2 wz
20bb8     0D 12 06 56 |  if_ne	mov	arg01, #13
20bbc     6C FC BF 5D |  if_ne	call	#__system___txraw
20bc0                 | LR__2830
20bc0     0F 13 02 F6 | 	mov	arg01, local01
20bc4     64 FC BF FD | 	call	#__system___txraw
20bc8     A7 F0 03 F6 | 	mov	ptra, fp
20bcc     B2 00 A0 FD | 	call	#popregs_
20bd0                 | __system___tx_ret
20bd0     2D 00 64 FD | 	ret
20bd4                 | 
20bd4                 | __system___rx
20bd4     01 4A 05 F6 | 	mov	COUNT_, #1
20bd8     A8 00 A0 FD | 	call	#pushregs_
20bdc                 | LR__2840
20bdc     00 12 06 F6 | 	mov	arg01, #0
20be0     8C FC BF FD | 	call	#__system___rxraw
20be4     FD 1E 02 F6 | 	mov	local01, result1
20be8     FF FF 7F FF 
20bec     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20bf0     E8 FF 9F AD |  if_e	jmp	#LR__2840
20bf4     0D 1E 0E F2 | 	cmp	local01, #13 wz
20bf8     14 00 90 5D |  if_ne	jmp	#LR__2841
20bfc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c00     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20c04     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c08     02 FA CD F7 | 	test	result1, #2 wz
20c0c     0A 1E 06 56 |  if_ne	mov	local01, #10
20c10                 | LR__2841
20c10     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c14     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20c18     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c1c     01 12 CE F7 | 	test	arg01, #1 wz
20c20     1C 00 90 AD |  if_e	jmp	#LR__2844
20c24     7F 1E 0E F2 | 	cmp	local01, #127 wz
20c28     0C 00 90 5D |  if_ne	jmp	#LR__2842
20c2c     08 12 06 F6 | 	mov	arg01, #8
20c30     60 FF BF FD | 	call	#__system___tx
20c34     08 00 90 FD | 	jmp	#LR__2843
20c38                 | LR__2842
20c38     0F 13 02 F6 | 	mov	arg01, local01
20c3c     54 FF BF FD | 	call	#__system___tx
20c40                 | LR__2843
20c40                 | LR__2844
20c40     0F FB 01 F6 | 	mov	result1, local01
20c44     A7 F0 03 F6 | 	mov	ptra, fp
20c48     B2 00 A0 FD | 	call	#popregs_
20c4c                 | __system___rx_ret
20c4c     2D 00 64 FD | 	ret
20c50                 | 
20c50                 | __system___pinwrite
20c50     09 01 02 F6 | 	mov	_var01, arg01
20c54     1F 00 06 F5 | 	and	_var01, #31
20c58     20 12 CE F7 | 	test	arg01, #32 wz
20c5c     06 12 46 F0 | 	shr	arg01, #6
20c60     09 13 CA F9 | 	bmask	arg01, arg01
20c64     00 13 62 F0 | 	shl	arg01, _var01
20c68     00 15 62 F0 | 	shl	arg02, _var01
20c6c     1C 00 90 AD |  if_e	jmp	#LR__2850
20c70     09 F7 43 F5 | 	or	dirb, arg01
20c74     FD 01 02 F6 | 	mov	_var01, outb
20c78     09 01 22 F5 | 	andn	_var01, arg01
20c7c     09 15 02 F5 | 	and	arg02, arg01
20c80     0A 01 42 F5 | 	or	_var01, arg02
20c84     00 FB 03 F6 | 	mov	outb, _var01
20c88     18 00 90 FD | 	jmp	#LR__2851
20c8c                 | LR__2850
20c8c     09 F5 43 F5 | 	or	dira, arg01
20c90     FC 01 02 F6 | 	mov	_var01, outa
20c94     09 01 22 F5 | 	andn	_var01, arg01
20c98     09 15 02 F5 | 	and	arg02, arg01
20c9c     0A 01 42 F5 | 	or	_var01, arg02
20ca0     00 F9 03 F6 | 	mov	outa, _var01
20ca4                 | LR__2851
20ca4                 | __system___pinwrite_ret
20ca4     2D 00 64 FD | 	ret
20ca8                 | 
20ca8                 | __system___basic_read_line
20ca8     06 4A 05 F6 | 	mov	COUNT_, #6
20cac     A8 00 A0 FD | 	call	#pushregs_
20cb0     09 1F 02 F6 | 	mov	local01, arg01
20cb4     00 20 06 F6 | 	mov	local02, #0
20cb8     18 22 06 F6 | 	mov	local03, #24
20cbc     00 24 06 F6 | 	mov	local04, #0
20cc0     18 12 06 F6 | 	mov	arg01, #24
20cc4     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20cc8     FD 26 0A F6 | 	mov	local05, result1 wz
20ccc     13 FB 01 A6 |  if_e	mov	result1, local05
20cd0     B0 00 90 AD |  if_e	jmp	#LR__2863
20cd4                 | LR__2860
20cd4     0F 13 02 F6 | 	mov	arg01, local01
20cd8     78 0B B0 FD | 	call	#__system___basic_get_char
20cdc     FD 28 02 F6 | 	mov	local06, result1
20ce0     01 28 56 F2 | 	cmps	local06, #1 wc
20ce4     8C 00 90 CD |  if_b	jmp	#LR__2862
20ce8     0A 28 0E F2 | 	cmp	local06, #10 wz
20cec     10 00 90 5D |  if_ne	jmp	#LR__2861
20cf0     00 24 0E F2 | 	cmp	local04, #0 wz
20cf4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20cf8     01 20 86 11 |  if_a	sub	local02, #1
20cfc     74 00 90 FD | 	jmp	#LR__2862
20d00                 | LR__2861
20d00     0D 28 0E F2 | 	cmp	local06, #13 wz
20d04     01 24 06 A6 |  if_e	mov	local04, #1
20d08     00 24 06 56 |  if_ne	mov	local04, #0
20d0c     08 28 0E F2 | 	cmp	local06, #8 wz
20d10     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20d14     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20d18     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20d1c     B4 FF 9F AD |  if_e	jmp	#LR__2860
20d20     13 17 02 F6 | 	mov	arg03, local05
20d24     10 17 02 F1 | 	add	arg03, local02
20d28     0B 29 42 FC | 	wrbyte	local06, arg03
20d2c     01 20 06 F1 | 	add	local02, #1
20d30     11 21 0A F2 | 	cmp	local02, local03 wz
20d34     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20d38     11 13 02 F6 | 	mov	arg01, local03
20d3c     20 12 06 F1 | 	add	arg01, #32
20d40     10 3C B0 FD | 	call	#__system___gc_alloc_managed
20d44     FD 28 0A F6 | 	mov	local06, result1 wz
20d48     14 FB 01 A6 |  if_e	mov	result1, local06
20d4c     34 00 90 AD |  if_e	jmp	#LR__2863
20d50     14 13 02 F6 | 	mov	arg01, local06
20d54     13 15 02 F6 | 	mov	arg02, local05
20d58     11 17 02 F6 | 	mov	arg03, local03
20d5c     5C FC BF FD | 	call	#__system____builtin_memmove
20d60     20 22 06 F1 | 	add	local03, #32
20d64     13 13 02 F6 | 	mov	arg01, local05
20d68     24 3D B0 FD | 	call	#__system___gc_free
20d6c     14 27 02 F6 | 	mov	local05, local06
20d70     60 FF 9F FD | 	jmp	#LR__2860
20d74                 | LR__2862
20d74     13 29 02 F6 | 	mov	local06, local05
20d78     10 29 02 F1 | 	add	local06, local02
20d7c     14 01 48 FC | 	wrbyte	#0, local06
20d80     13 FB 01 F6 | 	mov	result1, local05
20d84                 | LR__2863
20d84     A7 F0 03 F6 | 	mov	ptra, fp
20d88     B2 00 A0 FD | 	call	#popregs_
20d8c                 | __system___basic_read_line_ret
20d8c     2D 00 64 FD | 	ret
20d90                 | 
20d90                 | __system___waitms
20d90     09 01 02 F6 | 	mov	_var01, arg01
20d94     1A 02 62 FD | 	getct	_var02
20d98     14 04 06 FB | 	rdlong	_var03, #20
20d9c     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20da0                 | LR__2870
20da0     01 00 00 FF 
20da4     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20da8     1C 00 90 CD |  if_b	jmp	#LR__2872
20dac     02 03 02 F1 | 	add	_var02, _var03
20db0     01 13 02 F6 | 	mov	arg01, _var02
20db4     00 12 66 FA | 	addct1	arg01, #0
20db8     24 22 60 FD | 	waitct1
20dbc     01 00 00 FF 
20dc0     E8 01 86 F1 | 	sub	_var01, ##1000
20dc4     D8 FF 9F FD | 	jmp	#LR__2870
20dc8                 | LR__2871
20dc8                 | LR__2872
20dc8     01 00 56 F2 | 	cmps	_var01, #1 wc
20dcc     28 00 90 CD |  if_b	jmp	#LR__2873
20dd0     02 01 02 FD | 	qmul	_var01, _var03
20dd4     01 00 00 FF 
20dd8     E8 17 06 F6 | 	mov	arg03, ##1000
20ddc     19 FA 61 FD | 	getqy	result1
20de0     18 12 62 FD | 	getqx	arg01
20de4     28 FA 61 FD | 	setq	result1
20de8     0B 13 12 FD | 	qdiv	arg01, arg03
20dec     18 12 62 FD | 	getqx	arg01
20df0     01 13 62 FA | 	addct1	arg01, _var02
20df4     24 22 60 FD | 	waitct1
20df8                 | LR__2873
20df8                 | __system___waitms_ret
20df8     2D 00 64 FD | 	ret
20dfc                 | 
20dfc                 | __system___waitus
20dfc     09 01 02 F6 | 	mov	_var01, arg01
20e00     1A 02 62 FD | 	getct	_var02
20e04     14 04 06 FB | 	rdlong	_var03, #20
20e08     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20e0c                 | LR__2880
20e0c     A1 07 00 FF 
20e10     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20e14     1C 00 90 CD |  if_b	jmp	#LR__2882
20e18     02 03 02 F1 | 	add	_var02, _var03
20e1c     01 13 02 F6 | 	mov	arg01, _var02
20e20     00 12 66 FA | 	addct1	arg01, #0
20e24     24 22 60 FD | 	waitct1
20e28     A1 07 00 FF 
20e2c     40 00 86 F1 | 	sub	_var01, ##1000000
20e30     D8 FF 9F FD | 	jmp	#LR__2880
20e34                 | LR__2881
20e34                 | LR__2882
20e34     01 00 56 F2 | 	cmps	_var01, #1 wc
20e38     28 00 90 CD |  if_b	jmp	#LR__2883
20e3c     02 01 02 FD | 	qmul	_var01, _var03
20e40     A1 07 00 FF 
20e44     40 16 06 F6 | 	mov	arg03, ##1000000
20e48     19 FA 61 FD | 	getqy	result1
20e4c     18 12 62 FD | 	getqx	arg01
20e50     28 FA 61 FD | 	setq	result1
20e54     0B 13 12 FD | 	qdiv	arg01, arg03
20e58     18 FA 61 FD | 	getqx	result1
20e5c     FD 02 62 FA | 	addct1	_var02, result1
20e60     24 22 60 FD | 	waitct1
20e64                 | LR__2883
20e64                 | __system___waitus_ret
20e64     2D 00 64 FD | 	ret
20e68                 | 
20e68                 | __system___mount
20e68     0B 4A 05 F6 | 	mov	COUNT_, #11
20e6c     A8 00 A0 FD | 	call	#pushregs_
20e70     09 1F 02 F6 | 	mov	local01, arg01
20e74     0A 21 0A F6 | 	mov	local02, arg02 wz
20e78     01 22 66 F6 | 	neg	local03, #1
20e7c     01 FA 65 A6 |  if_e	neg	result1, #1
20e80     98 02 90 AD |  if_e	jmp	#LR__2905
20e84     0F FB C1 FA | 	rdbyte	result1, local01
20e88     2F FA 0D F2 | 	cmp	result1, #47 wz
20e8c     28 00 90 5D |  if_ne	jmp	#LR__2892
20e90     0F 13 02 F6 | 	mov	arg01, local01
20e94     09 25 02 F6 | 	mov	local04, arg01
20e98     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20e9c                 | LR__2890
20e9c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20ea0     01 24 06 51 |  if_ne	add	local04, #1
20ea4     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20ea8                 | LR__2891
20ea8     09 25 82 F1 | 	sub	local04, arg01
20eac     12 FB 01 F6 | 	mov	result1, local04
20eb0     10 FA 55 F2 | 	cmps	result1, #16 wc
20eb4     14 00 90 CD |  if_b	jmp	#LR__2893
20eb8                 | LR__2892
20eb8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20ebc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20ec0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20ec4     01 FA 65 F6 | 	neg	result1, #1
20ec8     50 02 90 FD | 	jmp	#LR__2905
20ecc                 | LR__2893
20ecc     00 26 06 F6 | 	mov	local05, #0
20ed0                 | LR__2894
20ed0     04 26 56 F2 | 	cmps	local05, #4 wc
20ed4     B0 00 90 3D |  if_ae	jmp	#LR__2899
20ed8     13 13 02 F6 | 	mov	arg01, local05
20edc     02 12 66 F0 | 	shl	arg01, #2
20ee0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ee4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20ee8     09 FB 09 FB | 	rdlong	result1, arg01 wz
20eec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ef0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20ef4     13 23 02 86 |  if_c_and_z	mov	local03, local05
20ef8     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20efc     13 13 02 F6 | 	mov	arg01, local05
20f00     02 12 66 F0 | 	shl	arg01, #2
20f04     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f08     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20f0c     09 13 02 FB | 	rdlong	arg01, arg01
20f10     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f14     09 25 02 F6 | 	mov	local04, arg01
20f18     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20f1c                 | LR__2895
20f1c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20f20     01 24 06 51 |  if_ne	add	local04, #1
20f24     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20f28                 | LR__2896
20f28     09 25 82 F1 | 	sub	local04, arg01
20f2c     12 29 02 F6 | 	mov	local06, local04
20f30     14 13 02 F6 | 	mov	arg01, local06
20f34     0F 13 02 F1 | 	add	arg01, local01
20f38     09 FB C1 FA | 	rdbyte	result1, arg01
20f3c     2F FA 0D F2 | 	cmp	result1, #47 wz
20f40     14 2B 02 56 |  if_ne	mov	local07, local06
20f44     0F 2B 02 51 |  if_ne	add	local07, local01
20f48     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20f4c     30 00 90 5D |  if_ne	jmp	#LR__2897
20f50     13 17 02 F6 | 	mov	arg03, local05
20f54     02 16 66 F0 | 	shl	arg03, #2
20f58     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f5c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20f60     0B 15 02 FB | 	rdlong	arg02, arg03
20f64     0F 13 02 F6 | 	mov	arg01, local01
20f68     14 17 02 F6 | 	mov	arg03, local06
20f6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f70     60 4E B0 FD | 	call	#__system__strncmp
20f74     00 FA 0D F2 | 	cmp	result1, #0 wz
20f78     13 23 02 A6 |  if_e	mov	local03, local05
20f7c     08 00 90 AD |  if_e	jmp	#LR__2899
20f80                 | LR__2897
20f80                 | LR__2898
20f80     01 26 06 F1 | 	add	local05, #1
20f84     48 FF 9F FD | 	jmp	#LR__2894
20f88                 | LR__2899
20f88     FF FF 7F FF 
20f8c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20f90     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20f94     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20f98     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20f9c     01 FA 65 A6 |  if_e	neg	result1, #1
20fa0     78 01 90 AD |  if_e	jmp	#LR__2905
20fa4     11 27 02 F6 | 	mov	local05, local03
20fa8     13 2B 02 F6 | 	mov	local07, local05
20fac     02 2A 66 F0 | 	shl	local07, #2
20fb0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20fb4     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20fb8     15 29 0A FB | 	rdlong	local06, local07 wz
20fbc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20fc0     58 00 90 AD |  if_e	jmp	#LR__2900
20fc4     4C 28 06 F1 | 	add	local06, #76
20fc8     14 2B 0A FB | 	rdlong	local07, local06 wz
20fcc     4C 28 86 F1 | 	sub	local06, #76
20fd0     48 00 90 AD |  if_e	jmp	#LR__2900
20fd4     4C 28 06 F1 | 	add	local06, #76
20fd8     14 2B 02 FB | 	rdlong	local07, local06
20fdc     15 23 02 F6 | 	mov	local03, local07
20fe0     13 2A 46 F7 | 	zerox	local07, #19
20fe4     14 22 46 F0 | 	shr	local03, #20
20fe8     02 22 66 F0 | 	shl	local03, #2
20fec     ED 22 02 F1 | 	add	local03, __methods__
20ff0     11 23 02 FB | 	rdlong	local03, local03
20ff4     13 29 02 F6 | 	mov	local06, local05
20ff8     02 28 66 F0 | 	shl	local06, #2
20ffc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21000     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21004     14 13 02 FB | 	rdlong	arg01, local06
21008     F2 28 02 F6 | 	mov	local06, objptr
2100c     15 E5 01 F6 | 	mov	objptr, local07
21010     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21014     2D 22 62 FD | 	call	local03
21018     14 E5 01 F6 | 	mov	objptr, local06
2101c                 | LR__2900
2101c     13 2D 02 F6 | 	mov	local08, local05
21020     02 2C 66 F0 | 	shl	local08, #2
21024     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21028     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
2102c     16 21 62 FC | 	wrlong	local02, local08
21030     00 20 0E F2 | 	cmp	local02, #0 wz
21034     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21038     18 00 90 5D |  if_ne	jmp	#LR__2901
2103c     02 26 66 F0 | 	shl	local05, #2
21040     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21044     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21048     13 01 68 FC | 	wrlong	#0, local05
2104c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21050     C4 00 90 FD | 	jmp	#LR__2904
21054                 | LR__2901
21054     13 2F 02 F6 | 	mov	local09, local05
21058     04 2E 66 F0 | 	shl	local09, #4
2105c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
21060     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
21064     17 13 02 F6 | 	mov	arg01, local09
21068     0F 15 02 F6 | 	mov	arg02, local01
2106c     10 16 06 F6 | 	mov	arg03, #16
21070     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
21074     B0 4C B0 FD | 	call	#__system__strncpy
21078     48 20 06 F1 | 	add	local02, #72
2107c     10 2D 0A FB | 	rdlong	local08, local02 wz
21080     48 20 86 F1 | 	sub	local02, #72
21084     7C 00 90 AD |  if_e	jmp	#LR__2903
21088     48 20 06 F1 | 	add	local02, #72
2108c     10 2D 02 FB | 	rdlong	local08, local02
21090     16 31 02 F6 | 	mov	local10, local08
21094     13 2C 46 F7 | 	zerox	local08, #19
21098     14 30 46 F0 | 	shr	local10, #20
2109c     02 30 66 F0 | 	shl	local10, #2
210a0     ED 30 02 F1 | 	add	local10, __methods__
210a4     18 31 02 FB | 	rdlong	local10, local10
210a8     17 13 02 F6 | 	mov	arg01, local09
210ac     F2 32 02 F6 | 	mov	local11, objptr
210b0     16 E5 01 F6 | 	mov	objptr, local08
210b4     2D 30 62 FD | 	call	local10
210b8     19 E5 01 F6 | 	mov	objptr, local11
210bc     FD 12 0A F6 | 	mov	arg01, result1 wz
210c0     40 00 90 AD |  if_e	jmp	#LR__2902
210c4     13 2D 02 F6 | 	mov	local08, local05
210c8     02 2C 66 F0 | 	shl	local08, #2
210cc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
210d0     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
210d4     16 01 68 FC | 	wrlong	#0, local08
210d8     02 26 66 F0 | 	shl	local05, #2
210dc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
210e0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
210e4     13 01 68 FC | 	wrlong	#0, local05
210e8     09 13 6A F6 | 	neg	arg01, arg01 wz
210ec     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
210f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
210f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
210f8     01 FA 65 56 |  if_ne	neg	result1, #1
210fc     00 FA 05 A6 |  if_e	mov	result1, #0
21100     18 00 90 FD | 	jmp	#LR__2905
21104                 | LR__2902
21104                 | LR__2903
21104     02 26 66 F0 | 	shl	local05, #2
21108     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2110c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21110     13 2F 62 FC | 	wrlong	local09, local05
21114     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21118                 | LR__2904
21118     00 FA 05 F6 | 	mov	result1, #0
2111c                 | LR__2905
2111c     A7 F0 03 F6 | 	mov	ptra, fp
21120     B2 00 A0 FD | 	call	#popregs_
21124                 | __system___mount_ret
21124     2D 00 64 FD | 	ret
21128                 | 
21128                 | __system___chdir
21128     00 4A 05 F6 | 	mov	COUNT_, #0
2112c     A8 00 A0 FD | 	call	#pushregs_
21130     40 F0 07 F1 | 	add	ptra, #64
21134     04 4E 05 F1 | 	add	fp, #4
21138     A7 12 62 FC | 	wrlong	arg01, fp
2113c     04 4E 05 F1 | 	add	fp, #4
21140     A7 14 02 F6 | 	mov	arg02, fp
21144     08 4E 85 F1 | 	sub	fp, #8
21148     80 48 B0 FD | 	call	#__system__stat
2114c     3C 4E 05 F1 | 	add	fp, #60
21150     A7 FA 61 FC | 	wrlong	result1, fp
21154     3C 4E 85 F1 | 	sub	fp, #60
21158     00 FA 0D F2 | 	cmp	result1, #0 wz
2115c     3C 4E 05 51 |  if_ne	add	fp, #60
21160     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21164     3C 4E 85 51 |  if_ne	sub	fp, #60
21168     BC 00 90 5D |  if_ne	jmp	#LR__2912
2116c     10 4E 05 F1 | 	add	fp, #16
21170     A7 12 02 FB | 	rdlong	arg01, fp
21174     10 4E 85 F1 | 	sub	fp, #16
21178     78 00 00 FF 
2117c     00 12 06 F5 | 	and	arg01, ##61440
21180     08 00 00 FF 
21184     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21188     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2118c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21190     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21194     01 FA 65 56 |  if_ne	neg	result1, #1
21198     8C 00 90 5D |  if_ne	jmp	#LR__2912
2119c     04 4E 05 F1 | 	add	fp, #4
211a0     A7 16 02 FB | 	rdlong	arg03, fp
211a4     04 4E 85 F1 | 	sub	fp, #4
211a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
211ac     2F 16 0E F2 | 	cmp	arg03, #47 wz
211b0     24 00 90 5D |  if_ne	jmp	#LR__2910
211b4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
211b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
211bc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
211c0     04 4E 05 F1 | 	add	fp, #4
211c4     A7 14 02 FB | 	rdlong	arg02, fp
211c8     04 4E 85 F1 | 	sub	fp, #4
211cc     00 17 06 F6 | 	mov	arg03, #256
211d0     54 4B B0 FD | 	call	#__system__strncpy
211d4     4C 00 90 FD | 	jmp	#LR__2911
211d8                 | LR__2910
211d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
211dc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
211e0     38 4E 05 F1 | 	add	fp, #56
211e4     A7 12 62 FC | 	wrlong	arg01, fp
211e8     38 4E 85 F1 | 	sub	fp, #56
211ec     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
211f0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
211f4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
211f8     00 17 06 F6 | 	mov	arg03, #256
211fc     28 4B B0 FD | 	call	#__system__strncpy
21200     38 4E 05 F1 | 	add	fp, #56
21204     A7 12 02 FB | 	rdlong	arg01, fp
21208     34 4E 85 F1 | 	sub	fp, #52
2120c     A7 14 02 FB | 	rdlong	arg02, fp
21210     04 4E 85 F1 | 	sub	fp, #4
21214     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21218     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
2121c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21220     10 00 B0 FD | 	call	#__system____getvfsforfile
21224                 | LR__2911
21224     00 FA 05 F6 | 	mov	result1, #0
21228                 | LR__2912
21228     A7 F0 03 F6 | 	mov	ptra, fp
2122c     B2 00 A0 FD | 	call	#popregs_
21230                 | __system___chdir_ret
21230     2D 00 64 FD | 	ret
21234                 | 
21234                 | __system____getvfsforfile
21234     0E 4A 05 F6 | 	mov	COUNT_, #14
21238     A8 00 A0 FD | 	call	#pushregs_
2123c     09 1F 02 F6 | 	mov	local01, arg01
21240     0A 21 02 F6 | 	mov	local02, arg02
21244     0B 23 02 F6 | 	mov	local03, arg03
21248     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
2124c                 | LR__2920
2124c     10 FB C1 FA | 	rdbyte	result1, local02
21250     2F FA 0D F2 | 	cmp	result1, #47 wz
21254     01 20 06 A1 |  if_e	add	local02, #1
21258     10 25 C2 AA |  if_e	rdbyte	local04, local02
2125c     01 20 86 A1 |  if_e	sub	local02, #1
21260     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21264     01 20 06 A1 |  if_e	add	local02, #1
21268     E0 FF 9F AD |  if_e	jmp	#LR__2920
2126c                 | LR__2921
2126c     10 25 C2 FA | 	rdbyte	local04, local02
21270     2F 24 0E F2 | 	cmp	local04, #47 wz
21274     14 00 90 5D |  if_ne	jmp	#LR__2922
21278     0F 13 02 F6 | 	mov	arg01, local01
2127c     10 15 02 F6 | 	mov	arg02, local02
21280     00 17 06 F6 | 	mov	arg03, #256
21284     A0 4A B0 FD | 	call	#__system__strncpy
21288     7C 00 90 FD | 	jmp	#LR__2924
2128c                 | LR__2922
2128c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21290     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21294     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21298     0F 13 02 F6 | 	mov	arg01, local01
2129c     00 17 06 F6 | 	mov	arg03, #256
212a0     84 4A B0 FD | 	call	#__system__strncpy
212a4     10 25 CA FA | 	rdbyte	local04, local02 wz
212a8     5C 00 90 AD |  if_e	jmp	#LR__2923
212ac     10 25 C2 FA | 	rdbyte	local04, local02
212b0     2E 24 0E F2 | 	cmp	local04, #46 wz
212b4     01 20 06 A1 |  if_e	add	local02, #1
212b8     10 27 C2 AA |  if_e	rdbyte	local05, local02
212bc     01 20 86 A1 |  if_e	sub	local02, #1
212c0     13 29 02 A6 |  if_e	mov	local06, local05
212c4     07 28 4E A7 |  if_e	zerox	local06, #7 wz
212c8     3C 00 90 AD |  if_e	jmp	#LR__2923
212cc     0F 27 C2 FA | 	rdbyte	local05, local01
212d0     2F 26 0E F2 | 	cmp	local05, #47 wz
212d4     01 1E 06 A1 |  if_e	add	local01, #1
212d8     0F 25 C2 AA |  if_e	rdbyte	local04, local01
212dc     01 1E 86 A1 |  if_e	sub	local01, #1
212e0     00 24 4E A2 |  if_e	cmps	local04, #0 wz
212e4     81 01 00 5F 
212e8     C0 14 06 56 |  if_ne	mov	arg02, ##@LR__5010
212ec     0F 13 02 56 |  if_ne	mov	arg01, local01
212f0     00 17 06 56 |  if_ne	mov	arg03, #256
212f4     7C 4A B0 5D |  if_ne	call	#__system__strncat
212f8     0F 13 02 F6 | 	mov	arg01, local01
212fc     10 15 02 F6 | 	mov	arg02, local02
21300     00 17 06 F6 | 	mov	arg03, #256
21304     6C 4A B0 FD | 	call	#__system__strncat
21308                 | LR__2923
21308                 | LR__2924
21308     0F 13 02 F6 | 	mov	arg01, local01
2130c     24 4C B0 FD | 	call	#__system___normalizeName
21310     0F 25 CA FA | 	rdbyte	local04, local01 wz
21314     1C 00 90 AD |  if_e	jmp	#LR__2925
21318     0F 25 C2 FA | 	rdbyte	local04, local01
2131c     2F 24 0E F2 | 	cmp	local04, #47 wz
21320     01 1E 06 A1 |  if_e	add	local01, #1
21324     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21328     01 1E 86 A1 |  if_e	sub	local01, #1
2132c     00 28 4E A2 |  if_e	cmps	local06, #0 wz
21330     18 00 90 5D |  if_ne	jmp	#LR__2926
21334                 | LR__2925
21334     01 00 00 FF 
21338     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
2133c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21340     01 00 00 FF 
21344     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21348     EC 01 90 FD | 	jmp	#LR__2940
2134c                 | LR__2926
2134c     00 2A 06 F6 | 	mov	local07, #0
21350                 | LR__2927
21350     04 2A 56 F2 | 	cmps	local07, #4 wc
21354     CC 01 90 3D |  if_ae	jmp	#LR__2939
21358     15 29 02 F6 | 	mov	local06, local07
2135c     02 28 66 F0 | 	shl	local06, #2
21360     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21364     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21368     14 29 0A FB | 	rdlong	local06, local06 wz
2136c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21370     A8 01 90 AD |  if_e	jmp	#LR__2938
21374     15 25 02 F6 | 	mov	local04, local07
21378     02 24 66 F0 | 	shl	local04, #2
2137c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21380     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21384     12 13 02 FB | 	rdlong	arg01, local04
21388     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2138c     09 2D 02 F6 | 	mov	local08, arg01
21390     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
21394                 | LR__2928
21394     16 FB C9 FA | 	rdbyte	result1, local08 wz
21398     01 2C 06 51 |  if_ne	add	local08, #1
2139c     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
213a0                 | LR__2929
213a0     09 2D 82 F1 | 	sub	local08, arg01
213a4     16 2F 02 F6 | 	mov	local09, local08
213a8     17 25 02 F6 | 	mov	local04, local09
213ac     0F 25 02 F1 | 	add	local04, local01
213b0     12 29 C2 FA | 	rdbyte	local06, local04
213b4     2F 28 0E F2 | 	cmp	local06, #47 wz
213b8     17 31 02 56 |  if_ne	mov	local10, local09
213bc     0F 31 02 51 |  if_ne	add	local10, local01
213c0     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
213c4     54 01 90 5D |  if_ne	jmp	#LR__2937
213c8     15 17 02 F6 | 	mov	arg03, local07
213cc     02 16 66 F0 | 	shl	arg03, #2
213d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
213d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
213d8     0B 15 02 FB | 	rdlong	arg02, arg03
213dc     17 17 02 F6 | 	mov	arg03, local09
213e0     0F 13 02 F6 | 	mov	arg01, local01
213e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
213e8     E8 49 B0 FD | 	call	#__system__strncmp
213ec     00 FA 4D F2 | 	cmps	result1, #0 wz
213f0     28 01 90 5D |  if_ne	jmp	#LR__2937
213f4     15 33 02 F6 | 	mov	local11, local07
213f8     02 32 66 F0 | 	shl	local11, #2
213fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21400     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21404     19 35 02 FB | 	rdlong	local12, local11
21408     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2140c     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21410                 | LR__2930
21410     17 29 02 F6 | 	mov	local06, local09
21414     01 28 06 F1 | 	add	local06, #1
21418     0F 29 02 F1 | 	add	local06, local01
2141c     14 33 C2 FA | 	rdbyte	local11, local06
21420     2E 32 0E F2 | 	cmp	local11, #46 wz
21424     2C 00 90 5D |  if_ne	jmp	#LR__2932
21428     17 33 02 F6 | 	mov	local11, local09
2142c     02 32 06 F1 | 	add	local11, #2
21430     0F 33 02 F1 | 	add	local11, local01
21434     19 31 C2 FA | 	rdbyte	local10, local11
21438     2F 30 0E F2 | 	cmp	local10, #47 wz
2143c     17 37 02 56 |  if_ne	mov	local13, local09
21440     02 36 06 51 |  if_ne	add	local13, #2
21444     0F 37 02 51 |  if_ne	add	local13, local01
21448     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
2144c     01 2E 06 A1 |  if_e	add	local09, #1
21450     BC FF 9F AD |  if_e	jmp	#LR__2930
21454                 | LR__2931
21454                 | LR__2932
21454     00 22 0E F2 | 	cmp	local03, #0 wz
21458     11 13 02 56 |  if_ne	mov	arg01, local03
2145c     0F 15 02 56 |  if_ne	mov	arg02, local01
21460     00 17 06 56 |  if_ne	mov	arg03, #256
21464     C0 48 B0 5D |  if_ne	call	#__system__strncpy
21468     0F 15 02 F6 | 	mov	arg02, local01
2146c     17 15 02 F1 | 	add	arg02, local09
21470     01 14 06 F1 | 	add	arg02, #1
21474     0F 13 02 F6 | 	mov	arg01, local01
21478     D4 F5 BF FD | 	call	#__system____builtin_strcpy
2147c     0F 13 02 F6 | 	mov	arg01, local01
21480     09 2D 02 F6 | 	mov	local08, arg01
21484     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
21488                 | LR__2933
21488     16 FB C9 FA | 	rdbyte	result1, local08 wz
2148c     01 2C 06 51 |  if_ne	add	local08, #1
21490     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
21494                 | LR__2934
21494     09 2D 82 F1 | 	sub	local08, arg01
21498     16 2F 02 F6 | 	mov	local09, local08
2149c                 | LR__2935
2149c     01 2E 56 F2 | 	cmps	local09, #1 wc
214a0     70 00 90 CD |  if_b	jmp	#LR__2936
214a4     17 25 02 F6 | 	mov	local04, local09
214a8     0F 25 02 F1 | 	add	local04, local01
214ac     12 33 C2 FA | 	rdbyte	local11, local04
214b0     2F 32 0E F2 | 	cmp	local11, #47 wz
214b4     17 33 02 A6 |  if_e	mov	local11, local09
214b8     0F 33 02 A1 |  if_e	add	local11, local01
214bc     19 01 48 AC |  if_e	wrbyte	#0, local11
214c0     01 2E 86 A1 |  if_e	sub	local09, #1
214c4     D4 FF 9F AD |  if_e	jmp	#LR__2935
214c8     17 25 02 F6 | 	mov	local04, local09
214cc     0F 25 02 F1 | 	add	local04, local01
214d0     12 33 C2 FA | 	rdbyte	local11, local04
214d4     2E 32 0E F2 | 	cmp	local11, #46 wz
214d8     38 00 90 5D |  if_ne	jmp	#LR__2936
214dc     02 2E 56 F2 | 	cmps	local09, #2 wc
214e0     30 00 90 CD |  if_b	jmp	#LR__2936
214e4     17 39 02 F6 | 	mov	local14, local09
214e8     01 38 86 F1 | 	sub	local14, #1
214ec     0F 39 02 F1 | 	add	local14, local01
214f0     1C 27 C2 FA | 	rdbyte	local05, local14
214f4     2F 26 0E F2 | 	cmp	local05, #47 wz
214f8     18 00 90 5D |  if_ne	jmp	#LR__2936
214fc     17 25 02 F6 | 	mov	local04, local09
21500     01 24 86 F1 | 	sub	local04, #1
21504     0F 25 02 F1 | 	add	local04, local01
21508     12 01 48 FC | 	wrbyte	#0, local04
2150c     02 2E 86 F1 | 	sub	local09, #2
21510     88 FF 9F FD | 	jmp	#LR__2935
21514                 | LR__2936
21514     1A FB 01 F6 | 	mov	result1, local12
21518     1C 00 90 FD | 	jmp	#LR__2940
2151c                 | LR__2937
2151c                 | LR__2938
2151c     01 2A 06 F1 | 	add	local07, #1
21520     2C FE 9F FD | 	jmp	#LR__2927
21524                 | LR__2939
21524     03 00 00 FF 
21528     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
2152c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21530     03 00 00 FF 
21534     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
21538                 | LR__2940
21538     A7 F0 03 F6 | 	mov	ptra, fp
2153c     B2 00 A0 FD | 	call	#popregs_
21540                 | __system____getvfsforfile_ret
21540     2D 00 64 FD | 	ret
21544                 | 
21544                 | __system___basic_open
21544     05 4A 05 F6 | 	mov	COUNT_, #5
21548     A8 00 A0 FD | 	call	#pushregs_
2154c     0A 1F 02 F6 | 	mov	local01, arg02
21550     0B 21 02 F6 | 	mov	local02, arg03
21554     0C 23 02 F6 | 	mov	local03, arg04
21558     00 24 06 F6 | 	mov	local04, #0
2155c     A0 47 B0 FD | 	call	#__system____getftab
21560     FD 26 0A F6 | 	mov	local05, result1 wz
21564     18 00 90 5D |  if_ne	jmp	#LR__2950
21568     EE 12 02 F6 | 	mov	arg01, abortchain
2156c     0C 14 06 F6 | 	mov	arg02, #12
21570     01 16 06 F6 | 	mov	arg03, #1
21574     DA 00 A0 FD | 	call	#__longjmp
21578     01 FA 65 F6 | 	neg	result1, #1
2157c     14 01 90 FD | 	jmp	#LR__2959
21580                 | LR__2950
21580     08 26 06 F1 | 	add	local05, #8
21584     13 FB 09 FB | 	rdlong	result1, local05 wz
21588     08 26 86 F1 | 	sub	local05, #8
2158c     13 13 02 56 |  if_ne	mov	arg01, local05
21590     C0 3E B0 5D |  if_ne	call	#__system___closeraw
21594     00 1E 0E F2 | 	cmp	local01, #0 wz
21598     00 20 0E A2 |  if_e	cmp	local02, #0 wz
2159c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
215a0     3C 00 90 AD |  if_e	jmp	#LR__2952
215a4     0C 12 06 F6 | 	mov	arg01, #12
215a8     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
215ac     FD 24 0A F6 | 	mov	local04, result1 wz
215b0     18 00 90 5D |  if_ne	jmp	#LR__2951
215b4     EE 12 02 F6 | 	mov	arg01, abortchain
215b8     07 14 06 F6 | 	mov	arg02, #7
215bc     01 16 06 F6 | 	mov	arg03, #1
215c0     DA 00 A0 FD | 	call	#__longjmp
215c4     01 FA 65 F6 | 	neg	result1, #1
215c8     C8 00 90 FD | 	jmp	#LR__2959
215cc                 | LR__2951
215cc     12 01 68 FC | 	wrlong	#0, local04
215d0     04 24 06 F1 | 	add	local04, #4
215d4     12 01 68 FC | 	wrlong	#0, local04
215d8     04 24 86 F1 | 	sub	local04, #4
215dc     13 25 62 FC | 	wrlong	local04, local05
215e0                 | LR__2952
215e0     00 1E 0E F2 | 	cmp	local01, #0 wz
215e4     20 00 90 AD |  if_e	jmp	#LR__2953
215e8     12 1F 62 FC | 	wrlong	local01, local04
215ec     12 FB 01 F6 | 	mov	result1, local04
215f0     00 80 04 FF 
215f4     00 FA 45 F5 | 	or	result1, ##150994944
215f8     1C 26 06 F1 | 	add	local05, #28
215fc     13 FB 61 FC | 	wrlong	result1, local05
21600     1C 26 86 F1 | 	sub	local05, #28
21604     0C 00 90 FD | 	jmp	#LR__2954
21608                 | LR__2953
21608     1C 26 06 F1 | 	add	local05, #28
2160c     13 01 68 FC | 	wrlong	#0, local05
21610     1C 26 86 F1 | 	sub	local05, #28
21614                 | LR__2954
21614     00 20 0E F2 | 	cmp	local02, #0 wz
21618     28 00 90 AD |  if_e	jmp	#LR__2955
2161c     04 24 06 F1 | 	add	local04, #4
21620     12 21 62 FC | 	wrlong	local02, local04
21624     04 24 86 F1 | 	sub	local04, #4
21628     12 FB 01 F6 | 	mov	result1, local04
2162c     00 88 04 FF 
21630     00 FA 45 F5 | 	or	result1, ##152043520
21634     20 26 06 F1 | 	add	local05, #32
21638     13 FB 61 FC | 	wrlong	result1, local05
2163c     20 26 86 F1 | 	sub	local05, #32
21640     0C 00 90 FD | 	jmp	#LR__2956
21644                 | LR__2955
21644     20 26 06 F1 | 	add	local05, #32
21648     13 01 68 FC | 	wrlong	#0, local05
2164c     20 26 86 F1 | 	sub	local05, #32
21650                 | LR__2956
21650     00 22 0E F2 | 	cmp	local03, #0 wz
21654     24 00 90 AD |  if_e	jmp	#LR__2957
21658     08 24 06 F1 | 	add	local04, #8
2165c     12 23 62 FC | 	wrlong	local03, local04
21660     08 24 86 F1 | 	sub	local04, #8
21664     00 90 04 FF 
21668     00 24 46 F5 | 	or	local04, ##153092096
2166c     24 26 06 F1 | 	add	local05, #36
21670     13 25 62 FC | 	wrlong	local04, local05
21674     24 26 86 F1 | 	sub	local05, #36
21678     0C 00 90 FD | 	jmp	#LR__2958
2167c                 | LR__2957
2167c     24 26 06 F1 | 	add	local05, #36
21680     13 01 68 FC | 	wrlong	#0, local05
21684     24 26 86 F1 | 	sub	local05, #36
21688                 | LR__2958
21688     08 26 06 F1 | 	add	local05, #8
2168c     13 0F 68 FC | 	wrlong	#7, local05
21690     00 FA 05 F6 | 	mov	result1, #0
21694                 | LR__2959
21694     A7 F0 03 F6 | 	mov	ptra, fp
21698     B2 00 A0 FD | 	call	#popregs_
2169c                 | __system___basic_open_ret
2169c     2D 00 64 FD | 	ret
216a0                 | 
216a0                 | __system___basic_open_string
216a0     04 4A 05 F6 | 	mov	COUNT_, #4
216a4     A8 00 A0 FD | 	call	#pushregs_
216a8     0A 1F 02 F6 | 	mov	local01, arg02
216ac     0B 21 02 F6 | 	mov	local02, arg03
216b0     4C 46 B0 FD | 	call	#__system____getftab
216b4     FD 22 0A F6 | 	mov	local03, result1 wz
216b8     18 00 90 5D |  if_ne	jmp	#LR__2960
216bc     EE 12 02 F6 | 	mov	arg01, abortchain
216c0     0C 14 06 F6 | 	mov	arg02, #12
216c4     01 16 06 F6 | 	mov	arg03, #1
216c8     DA 00 A0 FD | 	call	#__longjmp
216cc     01 FA 65 F6 | 	neg	result1, #1
216d0     58 00 90 FD | 	jmp	#LR__2962
216d4                 | LR__2960
216d4     08 22 06 F1 | 	add	local03, #8
216d8     11 19 0A FB | 	rdlong	arg04, local03 wz
216dc     08 22 86 F1 | 	sub	local03, #8
216e0     11 13 02 56 |  if_ne	mov	arg01, local03
216e4     6C 3D B0 5D |  if_ne	call	#__system___closeraw
216e8     0F 15 02 F6 | 	mov	arg02, local01
216ec     10 17 02 F6 | 	mov	arg03, local02
216f0     11 13 02 F6 | 	mov	arg01, local03
216f4     B6 19 06 F6 | 	mov	arg04, #438
216f8     54 3A B0 FD | 	call	#__system___openraw
216fc     FD 24 02 F6 | 	mov	local04, result1
21700     00 24 56 F2 | 	cmps	local04, #0 wc
21704     20 00 90 3D |  if_ae	jmp	#LR__2961
21708     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2170c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21710     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21714     EE 12 02 F6 | 	mov	arg01, abortchain
21718     01 16 06 F6 | 	mov	arg03, #1
2171c     DA 00 A0 FD | 	call	#__longjmp
21720     01 FA 65 F6 | 	neg	result1, #1
21724     04 00 90 FD | 	jmp	#LR__2962
21728                 | LR__2961
21728     12 FB 01 F6 | 	mov	result1, local04
2172c                 | LR__2962
2172c     A7 F0 03 F6 | 	mov	ptra, fp
21730     B2 00 A0 FD | 	call	#popregs_
21734                 | __system___basic_open_string_ret
21734     2D 00 64 FD | 	ret
21738                 | 
21738                 | __system___basic_print_char
21738     03 4A 05 F6 | 	mov	COUNT_, #3
2173c     A8 00 A0 FD | 	call	#pushregs_
21740     0A 1F 02 F6 | 	mov	local01, arg02
21744     0C 4D B0 FD | 	call	#__system___gettxfunc
21748     FD 20 0A F6 | 	mov	local02, result1 wz
2174c     00 FA 05 A6 |  if_e	mov	result1, #0
21750     30 00 90 AD |  if_e	jmp	#LR__2970
21754     10 23 02 F6 | 	mov	local03, local02
21758     13 20 46 F7 | 	zerox	local02, #19
2175c     14 22 46 F0 | 	shr	local03, #20
21760     02 22 66 F0 | 	shl	local03, #2
21764     ED 22 02 F1 | 	add	local03, __methods__
21768     11 23 02 FB | 	rdlong	local03, local03
2176c     0F 13 02 F6 | 	mov	arg01, local01
21770     F2 1E 02 F6 | 	mov	local01, objptr
21774     10 E5 01 F6 | 	mov	objptr, local02
21778     2D 22 62 FD | 	call	local03
2177c     0F E5 01 F6 | 	mov	objptr, local01
21780     01 FA 05 F6 | 	mov	result1, #1
21784                 | LR__2970
21784     A7 F0 03 F6 | 	mov	ptra, fp
21788     B2 00 A0 FD | 	call	#popregs_
2178c                 | __system___basic_print_char_ret
2178c     2D 00 64 FD | 	ret
21790                 | 
21790                 | __system___basic_print_string
21790     03 4A 05 F6 | 	mov	COUNT_, #3
21794     A8 00 A0 FD | 	call	#pushregs_
21798     0A 1F 02 F6 | 	mov	local01, arg02
2179c     0B 21 02 F6 | 	mov	local02, arg03
217a0     B0 4C B0 FD | 	call	#__system___gettxfunc
217a4     FD 22 0A F6 | 	mov	local03, result1 wz
217a8     00 FA 05 A6 |  if_e	mov	result1, #0
217ac     18 00 90 AD |  if_e	jmp	#LR__2980
217b0     00 1E 0E F2 | 	cmp	local01, #0 wz
217b4     00 FA 05 A6 |  if_e	mov	result1, #0
217b8     11 13 02 56 |  if_ne	mov	arg01, local03
217bc     10 15 02 56 |  if_ne	mov	arg02, local02
217c0     0F 17 02 56 |  if_ne	mov	arg03, local01
217c4     08 02 B0 5D |  if_ne	call	#__system___fmtstr
217c8                 | LR__2980
217c8     A7 F0 03 F6 | 	mov	ptra, fp
217cc     B2 00 A0 FD | 	call	#popregs_
217d0                 | __system___basic_print_string_ret
217d0     2D 00 64 FD | 	ret
217d4                 | 
217d4                 | __system___basic_print_integer
217d4     04 4A 05 F6 | 	mov	COUNT_, #4
217d8     A8 00 A0 FD | 	call	#pushregs_
217dc     0A 1F 02 F6 | 	mov	local01, arg02
217e0     0B 21 02 F6 | 	mov	local02, arg03
217e4     0C 23 02 F6 | 	mov	local03, arg04
217e8     68 4C B0 FD | 	call	#__system___gettxfunc
217ec     FD 24 0A F6 | 	mov	local04, result1 wz
217f0     00 FA 05 A6 |  if_e	mov	result1, #0
217f4     12 13 02 56 |  if_ne	mov	arg01, local04
217f8     10 15 02 56 |  if_ne	mov	arg02, local02
217fc     0F 17 02 56 |  if_ne	mov	arg03, local01
21800     11 19 02 56 |  if_ne	mov	arg04, local03
21804     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21808     A7 F0 03 F6 | 	mov	ptra, fp
2180c     B2 00 A0 FD | 	call	#popregs_
21810                 | __system___basic_print_integer_ret
21810     2D 00 64 FD | 	ret
21814                 | 
21814                 | __system___basic_print_unsigned
21814     03 4A 05 F6 | 	mov	COUNT_, #3
21818     A8 00 A0 FD | 	call	#pushregs_
2181c     0A 1F 02 F6 | 	mov	local01, arg02
21820     0B 21 02 F6 | 	mov	local02, arg03
21824     0C 23 02 F6 | 	mov	local03, arg04
21828     28 4C B0 FD | 	call	#__system___gettxfunc
2182c     FD 12 0A F6 | 	mov	arg01, result1 wz
21830     00 FA 05 A6 |  if_e	mov	result1, #0
21834     3A 20 26 54 |  if_ne	bith	local02, #58
21838     10 15 02 56 |  if_ne	mov	arg02, local02
2183c     0F 17 02 56 |  if_ne	mov	arg03, local01
21840     11 19 02 56 |  if_ne	mov	arg04, local03
21844     74 02 B0 5D |  if_ne	call	#__system___fmtnum
21848     A7 F0 03 F6 | 	mov	ptra, fp
2184c     B2 00 A0 FD | 	call	#popregs_
21850                 | __system___basic_print_unsigned_ret
21850     2D 00 64 FD | 	ret
21854                 | 
21854                 | __system___basic_get_char
21854     03 4A 05 F6 | 	mov	COUNT_, #3
21858     A8 00 A0 FD | 	call	#pushregs_
2185c     38 4C B0 FD | 	call	#__system___getrxfunc
21860     FD 1E 0A F6 | 	mov	local01, result1 wz
21864     01 FA 65 A6 |  if_e	neg	result1, #1
21868     28 00 90 AD |  if_e	jmp	#LR__2990
2186c     0F 21 02 F6 | 	mov	local02, local01
21870     13 1E 46 F7 | 	zerox	local01, #19
21874     14 20 46 F0 | 	shr	local02, #20
21878     02 20 66 F0 | 	shl	local02, #2
2187c     ED 20 02 F1 | 	add	local02, __methods__
21880     10 21 02 FB | 	rdlong	local02, local02
21884     F2 22 02 F6 | 	mov	local03, objptr
21888     0F E5 01 F6 | 	mov	objptr, local01
2188c     2D 20 62 FD | 	call	local02
21890     11 E5 01 F6 | 	mov	objptr, local03
21894                 | LR__2990
21894     A7 F0 03 F6 | 	mov	ptra, fp
21898     B2 00 A0 FD | 	call	#popregs_
2189c                 | __system___basic_get_char_ret
2189c     2D 00 64 FD | 	ret
218a0                 | 
218a0                 | __system___basic_put
218a0     04 4A 05 F6 | 	mov	COUNT_, #4
218a4     A8 00 A0 FD | 	call	#pushregs_
218a8     0D 1F 02 F6 | 	mov	local01, arg05
218ac     0F 19 02 FD | 	qmul	arg04, local01
218b0     09 21 02 F6 | 	mov	local02, arg01
218b4     0B 23 02 F6 | 	mov	local03, arg03
218b8     00 14 0E F2 | 	cmp	arg02, #0 wz
218bc     01 14 86 51 |  if_ne	sub	arg02, #1
218c0     10 13 02 56 |  if_ne	mov	arg01, local02
218c4     00 16 06 56 |  if_ne	mov	arg03, #0
218c8     18 24 62 FD | 	getqx	local04
218cc     78 42 B0 5D |  if_ne	call	#__system__lseek
218d0     11 15 02 F6 | 	mov	arg02, local03
218d4     12 17 02 F6 | 	mov	arg03, local04
218d8     10 13 02 F6 | 	mov	arg01, local02
218dc     B4 41 B0 FD | 	call	#__system__write
218e0     FD 24 02 F6 | 	mov	local04, result1
218e4     01 24 56 F2 | 	cmps	local04, #1 wc
218e8     10 00 90 CD |  if_b	jmp	#LR__3000
218ec     12 7D 02 F6 | 	mov	muldiva_, local04
218f0     0F 7F 02 F6 | 	mov	muldivb_, local01
218f4     BA 00 A0 FD | 	call	#divide_
218f8     3F 25 02 F6 | 	mov	local04, muldivb_
218fc                 | LR__3000
218fc     12 FB 01 F6 | 	mov	result1, local04
21900     A7 F0 03 F6 | 	mov	ptra, fp
21904     B2 00 A0 FD | 	call	#popregs_
21908                 | __system___basic_put_ret
21908     2D 00 64 FD | 	ret
2190c                 | 
2190c                 | __system___basic_get
2190c     04 4A 05 F6 | 	mov	COUNT_, #4
21910     A8 00 A0 FD | 	call	#pushregs_
21914     0D 1F 02 F6 | 	mov	local01, arg05
21918     0F 19 02 FD | 	qmul	arg04, local01
2191c     09 21 02 F6 | 	mov	local02, arg01
21920     0B 23 02 F6 | 	mov	local03, arg03
21924     00 14 0E F2 | 	cmp	arg02, #0 wz
21928     01 14 86 51 |  if_ne	sub	arg02, #1
2192c     10 13 02 56 |  if_ne	mov	arg01, local02
21930     00 16 06 56 |  if_ne	mov	arg03, #0
21934     18 24 62 FD | 	getqx	local04
21938     0C 42 B0 5D |  if_ne	call	#__system__lseek
2193c     11 15 02 F6 | 	mov	arg02, local03
21940     12 17 02 F6 | 	mov	arg03, local04
21944     10 13 02 F6 | 	mov	arg01, local02
21948     84 41 B0 FD | 	call	#__system__read
2194c     FD 24 02 F6 | 	mov	local04, result1
21950     01 24 56 F2 | 	cmps	local04, #1 wc
21954     10 00 90 CD |  if_b	jmp	#LR__3010
21958     12 7D 02 F6 | 	mov	muldiva_, local04
2195c     0F 7F 02 F6 | 	mov	muldivb_, local01
21960     BA 00 A0 FD | 	call	#divide_
21964     3F 25 02 F6 | 	mov	local04, muldivb_
21968                 | LR__3010
21968     12 FB 01 F6 | 	mov	result1, local04
2196c     A7 F0 03 F6 | 	mov	ptra, fp
21970     B2 00 A0 FD | 	call	#popregs_
21974                 | __system___basic_get_ret
21974     2D 00 64 FD | 	ret
21978                 | 
21978                 | __system___fmtchar
21978     00 4A 05 F6 | 	mov	COUNT_, #0
2197c     A8 00 A0 FD | 	call	#pushregs_
21980     10 F0 07 F1 | 	add	ptra, #16
21984     04 4E 05 F1 | 	add	fp, #4
21988     A7 12 62 FC | 	wrlong	arg01, fp
2198c     04 4E 05 F1 | 	add	fp, #4
21990     A7 14 62 FC | 	wrlong	arg02, fp
21994     04 4E 05 F1 | 	add	fp, #4
21998     A7 16 62 FC | 	wrlong	arg03, fp
2199c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
219a0     A7 16 62 FC | 	wrlong	arg03, fp
219a4     08 4E 85 F1 | 	sub	fp, #8
219a8     A7 12 02 FB | 	rdlong	arg01, fp
219ac     04 4E 05 F1 | 	add	fp, #4
219b0     A7 14 02 FB | 	rdlong	arg02, fp
219b4     04 4E 05 F1 | 	add	fp, #4
219b8     A7 16 02 F6 | 	mov	arg03, fp
219bc     0C 4E 85 F1 | 	sub	fp, #12
219c0     0C 00 B0 FD | 	call	#__system___fmtstr
219c4     A7 F0 03 F6 | 	mov	ptra, fp
219c8     B2 00 A0 FD | 	call	#popregs_
219cc                 | __system___fmtchar_ret
219cc     2D 00 64 FD | 	ret
219d0                 | 
219d0                 | __system___fmtstr
219d0     09 4A 05 F6 | 	mov	COUNT_, #9
219d4     A8 00 A0 FD | 	call	#pushregs_
219d8     09 1F 02 F6 | 	mov	local01, arg01
219dc     0A 21 02 F6 | 	mov	local02, arg02
219e0     0B 23 02 F6 | 	mov	local03, arg03
219e4     10 19 E2 F8 | 	getbyte	arg04, local02, #0
219e8     11 13 02 F6 | 	mov	arg01, local03
219ec     09 25 02 F6 | 	mov	local04, arg01
219f0     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
219f4                 | LR__3020
219f4     12 FB C9 FA | 	rdbyte	result1, local04 wz
219f8     01 24 06 51 |  if_ne	add	local04, #1
219fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
21a00                 | LR__3021
21a00     09 25 82 F1 | 	sub	local04, arg01
21a04     00 18 0E F2 | 	cmp	arg04, #0 wz
21a08     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21a0c     10 15 02 F6 | 	mov	arg02, local02
21a10     12 17 02 F6 | 	mov	arg03, local04
21a14     0F 13 02 F6 | 	mov	arg01, local01
21a18     02 18 06 F6 | 	mov	arg04, #2
21a1c     D4 46 B0 FD | 	call	#__system___fmtpad
21a20     FD 26 02 F6 | 	mov	local05, result1
21a24     00 26 56 F2 | 	cmps	local05, #0 wc
21a28     13 FB 01 C6 |  if_b	mov	result1, local05
21a2c     80 00 90 CD |  if_b	jmp	#LR__3024
21a30     01 24 56 F2 | 	cmps	local04, #1 wc
21a34     50 00 90 CD |  if_b	jmp	#LR__3023
21a38     12 29 02 F6 | 	mov	local06, local04
21a3c                 | LR__3022
21a3c     0F 2B 02 F6 | 	mov	local07, local01
21a40     0F 2D 02 F6 | 	mov	local08, local01
21a44     13 2A 46 F7 | 	zerox	local07, #19
21a48     14 2C 46 F0 | 	shr	local08, #20
21a4c     02 2C 66 F0 | 	shl	local08, #2
21a50     ED 2C 02 F1 | 	add	local08, __methods__
21a54     16 2D 02 FB | 	rdlong	local08, local08
21a58     11 13 C2 FA | 	rdbyte	arg01, local03
21a5c     F2 2E 02 F6 | 	mov	local09, objptr
21a60     15 E5 01 F6 | 	mov	objptr, local07
21a64     01 22 06 F1 | 	add	local03, #1
21a68     2D 2C 62 FD | 	call	local08
21a6c     17 E5 01 F6 | 	mov	objptr, local09
21a70     FD 2E 02 F6 | 	mov	local09, result1
21a74     00 2E 56 F2 | 	cmps	local09, #0 wc
21a78     17 FB 01 C6 |  if_b	mov	result1, local09
21a7c     30 00 90 CD |  if_b	jmp	#LR__3024
21a80     17 27 02 F1 | 	add	local05, local09
21a84     ED 29 6E FB | 	djnz	local06, #LR__3022
21a88                 | LR__3023
21a88     10 15 02 F6 | 	mov	arg02, local02
21a8c     12 17 02 F6 | 	mov	arg03, local04
21a90     0F 13 02 F6 | 	mov	arg01, local01
21a94     01 18 06 F6 | 	mov	arg04, #1
21a98     58 46 B0 FD | 	call	#__system___fmtpad
21a9c     FD 2E 02 F6 | 	mov	local09, result1
21aa0     00 2E 56 F2 | 	cmps	local09, #0 wc
21aa4     17 FB 01 C6 |  if_b	mov	result1, local09
21aa8     17 27 02 31 |  if_ae	add	local05, local09
21aac     13 FB 01 36 |  if_ae	mov	result1, local05
21ab0                 | LR__3024
21ab0     A7 F0 03 F6 | 	mov	ptra, fp
21ab4     B2 00 A0 FD | 	call	#popregs_
21ab8                 | __system___fmtstr_ret
21ab8     2D 00 64 FD | 	ret
21abc                 | 
21abc                 | __system___fmtnum
21abc     0B 4A 05 F6 | 	mov	COUNT_, #11
21ac0     A8 00 A0 FD | 	call	#pushregs_
21ac4     09 1F 02 F6 | 	mov	local01, arg01
21ac8     0A 21 02 F6 | 	mov	local02, arg02
21acc     0B 23 02 F6 | 	mov	local03, arg03
21ad0     0C 25 02 F6 | 	mov	local04, arg04
21ad4     F8 27 02 F6 | 	mov	local05, ptra
21ad8     13 29 02 F6 | 	mov	local06, local05
21adc     00 2A 06 F6 | 	mov	local07, #0
21ae0     10 2D 02 F6 | 	mov	local08, local02
21ae4     10 2C 46 F0 | 	shr	local08, #16
21ae8     3F 2C 06 F5 | 	and	local08, #63
21aec     10 2F E2 F8 | 	getbyte	local09, local02, #0
21af0     10 31 02 F6 | 	mov	local10, local02
21af4     1A 30 46 F0 | 	shr	local10, #26
21af8     03 30 06 F5 | 	and	local10, #3
21afc     18 33 02 F6 | 	mov	local11, local10
21b00     01 2C 56 F2 | 	cmps	local08, #1 wc
21b04     44 F0 07 F1 | 	add	ptra, #68
21b08     01 2C 86 31 |  if_ae	sub	local08, #1
21b0c     41 2E 56 F2 | 	cmps	local09, #65 wc
21b10     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
21b14     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
21b18     03 32 0E F2 | 	cmp	local11, #3 wz
21b1c     00 32 06 A6 |  if_e	mov	local11, #0
21b20     00 22 56 52 |  if_ne	cmps	local03, #0 wc
21b24     04 32 06 46 |  if_c_and_nz	mov	local11, #4
21b28     11 23 62 46 |  if_c_and_nz	neg	local03, local03
21b2c     00 32 0E F2 | 	cmp	local11, #0 wz
21b30     4C 00 90 AD |  if_e	jmp	#LR__3033
21b34     01 2A 06 F6 | 	mov	local07, #1
21b38     17 2D 0A F2 | 	cmp	local08, local09 wz
21b3c     18 00 90 5D |  if_ne	jmp	#LR__3031
21b40     05 2C 6E FB | 	djnz	local08, #LR__3030
21b44     0F 13 02 F6 | 	mov	arg01, local01
21b48     10 15 02 F6 | 	mov	arg02, local02
21b4c     23 16 06 F6 | 	mov	arg03, #35
21b50     24 FE BF FD | 	call	#__system___fmtchar
21b54     88 00 90 FD | 	jmp	#LR__3037
21b58                 | LR__3030
21b58                 | LR__3031
21b58     02 32 0E F2 | 	cmp	local11, #2 wz
21b5c     14 31 02 A6 |  if_e	mov	local10, local06
21b60     01 28 06 A1 |  if_e	add	local06, #1
21b64     18 41 48 AC |  if_e	wrbyte	#32, local10
21b68     14 00 90 AD |  if_e	jmp	#LR__3032
21b6c     04 32 0E F2 | 	cmp	local11, #4 wz
21b70     14 5B 48 AC |  if_e	wrbyte	#45, local06
21b74     01 28 06 A1 |  if_e	add	local06, #1
21b78     14 57 48 5C |  if_ne	wrbyte	#43, local06
21b7c     01 28 06 51 |  if_ne	add	local06, #1
21b80                 | LR__3032
21b80                 | LR__3033
21b80     14 13 02 F6 | 	mov	arg01, local06
21b84     11 15 02 F6 | 	mov	arg02, local03
21b88     12 17 02 F6 | 	mov	arg03, local04
21b8c     16 19 02 F6 | 	mov	arg04, local08
21b90     00 1A 06 F6 | 	mov	arg05, #0
21b94     1D 20 2E F4 | 	testbn	local02, #29 wz
21b98     01 1A 06 56 |  if_ne	mov	arg05, #1
21b9c     1C 46 B0 FD | 	call	#__system___uitoa
21ba0     FD 2A 02 F1 | 	add	local07, result1
21ba4     17 2B 5A F2 | 	cmps	local07, local09 wcz
21ba8     24 00 90 ED |  if_be	jmp	#LR__3036
21bac     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21bb0                 | LR__3034
21bb0     17 31 02 F6 | 	mov	local10, local09
21bb4     01 30 56 F2 | 	cmps	local10, #1 wc
21bb8     01 2E 86 F1 | 	sub	local09, #1
21bbc     14 31 02 36 |  if_ae	mov	local10, local06
21bc0     01 28 06 31 |  if_ae	add	local06, #1
21bc4     18 47 48 3C |  if_ae	wrbyte	#35, local10
21bc8     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21bcc                 | LR__3035
21bcc     14 01 48 FC | 	wrbyte	#0, local06
21bd0                 | LR__3036
21bd0     0F 13 02 F6 | 	mov	arg01, local01
21bd4     10 15 02 F6 | 	mov	arg02, local02
21bd8     13 17 02 F6 | 	mov	arg03, local05
21bdc     F0 FD BF FD | 	call	#__system___fmtstr
21be0                 | LR__3037
21be0     A7 F0 03 F6 | 	mov	ptra, fp
21be4     B2 00 A0 FD | 	call	#popregs_
21be8                 | __system___fmtnum_ret
21be8     2D 00 64 FD | 	ret
21bec                 | 
21bec                 | __system___fmtfloat
21bec     10 4A 05 F6 | 	mov	COUNT_, #16
21bf0     A8 00 A0 FD | 	call	#pushregs_
21bf4     24 F1 07 F1 | 	add	ptra, #292
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 12 62 FC | 	wrlong	arg01, fp
21c00     04 4E 05 F1 | 	add	fp, #4
21c04     A7 14 62 FC | 	wrlong	arg02, fp
21c08     04 4E 05 F1 | 	add	fp, #4
21c0c     A7 16 62 FC | 	wrlong	arg03, fp
21c10     04 4E 05 F1 | 	add	fp, #4
21c14     A7 18 62 FC | 	wrlong	arg04, fp
21c18     0C 4E 05 F1 | 	add	fp, #12
21c1c     A7 14 68 FC | 	wrlong	#10, fp
21c20     08 4E 05 F1 | 	add	fp, #8
21c24     A7 00 68 FC | 	wrlong	#0, fp
21c28     08 4E 05 F1 | 	add	fp, #8
21c2c     A7 00 68 FC | 	wrlong	#0, fp
21c30     08 4E 05 F1 | 	add	fp, #8
21c34     A7 00 68 FC | 	wrlong	#0, fp
21c38     04 4E 05 F1 | 	add	fp, #4
21c3c     A7 04 68 FC | 	wrlong	#2, fp
21c40     04 4E 05 F1 | 	add	fp, #4
21c44     A7 00 68 FC | 	wrlong	#0, fp
21c48     04 4E 05 F1 | 	add	fp, #4
21c4c     A7 00 68 FC | 	wrlong	#0, fp
21c50     04 4E 05 F1 | 	add	fp, #4
21c54     A7 00 68 FC | 	wrlong	#0, fp
21c58     04 4E 05 F1 | 	add	fp, #4
21c5c     A7 00 68 FC | 	wrlong	#0, fp
21c60     18 4E 05 F1 | 	add	fp, #24
21c64     A7 00 68 FC | 	wrlong	#0, fp
21c68     68 4E 05 F1 | 	add	fp, #104
21c6c     A7 1E 02 F6 | 	mov	local01, fp
21c70     08 4E 85 F1 | 	sub	fp, #8
21c74     A7 1E 62 FC | 	wrlong	local01, fp
21c78     04 4E 05 F1 | 	add	fp, #4
21c7c     A7 1E 62 FC | 	wrlong	local01, fp
21c80     BC 4E 85 F1 | 	sub	fp, #188
21c84     A7 1E 02 FB | 	rdlong	local01, fp
21c88     10 1E 46 F0 | 	shr	local01, #16
21c8c     3F 1E 06 F5 | 	and	local01, #63
21c90     B0 4E 05 F1 | 	add	fp, #176
21c94     A7 1E 62 FC | 	wrlong	local01, fp
21c98     B0 4E 85 F1 | 	sub	fp, #176
21c9c     A7 1E 02 FB | 	rdlong	local01, fp
21ca0     1C 1E 46 F0 | 	shr	local01, #28
21ca4     01 1E 06 F5 | 	and	local01, #1
21ca8     08 4F 05 F1 | 	add	fp, #264
21cac     A7 1E 62 FC | 	wrlong	local01, fp
21cb0     58 4E 85 F1 | 	sub	fp, #88
21cb4     A7 1E 0A FB | 	rdlong	local01, fp wz
21cb8     B8 4E 85 F1 | 	sub	fp, #184
21cbc     3C 00 90 5D |  if_ne	jmp	#LR__3041
21cc0     10 4E 05 F1 | 	add	fp, #16
21cc4     A7 1E 02 FB | 	rdlong	local01, fp
21cc8     10 4E 85 F1 | 	sub	fp, #16
21ccc     61 1E 0E F2 | 	cmp	local01, #97 wz
21cd0     18 00 90 5D |  if_ne	jmp	#LR__3040
21cd4     B8 4E 05 F1 | 	add	fp, #184
21cd8     A7 1A 68 FC | 	wrlong	#13, fp
21cdc     84 4E 85 F1 | 	sub	fp, #132
21ce0     A7 02 68 FC | 	wrlong	#1, fp
21ce4     34 4E 85 F1 | 	sub	fp, #52
21ce8     24 00 90 FD | 	jmp	#LR__3042
21cec                 | LR__3040
21cec     B8 4E 05 F1 | 	add	fp, #184
21cf0     A7 0C 68 FC | 	wrlong	#6, fp
21cf4     B8 4E 85 F1 | 	sub	fp, #184
21cf8     14 00 90 FD | 	jmp	#LR__3042
21cfc                 | LR__3041
21cfc     B8 4E 05 F1 | 	add	fp, #184
21d00     A7 1E 02 FB | 	rdlong	local01, fp
21d04     01 1E 86 F1 | 	sub	local01, #1
21d08     A7 1E 62 FC | 	wrlong	local01, fp
21d0c     B8 4E 85 F1 | 	sub	fp, #184
21d10                 | LR__3042
21d10     08 4E 05 F1 | 	add	fp, #8
21d14     A7 1E 02 FB | 	rdlong	local01, fp
21d18     16 1E 46 F0 | 	shr	local01, #22
21d1c     03 1E 06 F5 | 	and	local01, #3
21d20     04 4F 05 F1 | 	add	fp, #260
21d24     A7 1E 62 FC | 	wrlong	local01, fp
21d28     04 4F 85 F1 | 	sub	fp, #260
21d2c     A7 1E 02 FB | 	rdlong	local01, fp
21d30     1D 1E 46 F0 | 	shr	local01, #29
21d34     01 1E 06 F5 | 	and	local01, #1
21d38     B4 4E 05 F1 | 	add	fp, #180
21d3c     A7 1E 62 FC | 	wrlong	local01, fp
21d40     B4 4E 85 F1 | 	sub	fp, #180
21d44     A7 1E 02 FB | 	rdlong	local01, fp
21d48     0F 1F EA F8 | 	getbyte	local01, local01, #1
21d4c     60 4E 05 F1 | 	add	fp, #96
21d50     A7 1E 62 FC | 	wrlong	local01, fp
21d54     60 4E 85 F1 | 	sub	fp, #96
21d58     A7 1E 02 FB | 	rdlong	local01, fp
21d5c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21d60     64 4E 05 F1 | 	add	fp, #100
21d64     A7 1E 62 FC | 	wrlong	local01, fp
21d68     00 1E 06 F6 | 	mov	local01, #0
21d6c     5C 4E 85 F1 | 	sub	fp, #92
21d70     A7 1A 02 FB | 	rdlong	arg05, fp
21d74     65 1A 0E F2 | 	cmp	arg05, #101 wz
21d78     01 1E 06 A6 |  if_e	mov	local01, #1
21d7c     14 4E 05 F1 | 	add	fp, #20
21d80     A7 1E 62 FC | 	wrlong	local01, fp
21d84     98 4E 05 F1 | 	add	fp, #152
21d88     A7 20 0A FB | 	rdlong	local02, fp wz
21d8c     45 1E 06 56 |  if_ne	mov	local01, #69
21d90     65 1E 06 A6 |  if_e	mov	local01, #101
21d94     8C 4E 85 F1 | 	sub	fp, #140
21d98     A7 1E 62 FC | 	wrlong	local01, fp
21d9c     20 4E 85 F1 | 	sub	fp, #32
21da0     A7 1E 02 FB | 	rdlong	local01, fp
21da4     10 4E 85 F1 | 	sub	fp, #16
21da8     61 1E 0E F2 | 	cmp	local01, #97 wz
21dac     4C 00 90 5D |  if_ne	jmp	#LR__3043
21db0     24 4E 05 F1 | 	add	fp, #36
21db4     A7 02 68 FC | 	wrlong	#1, fp
21db8     98 4E 05 F1 | 	add	fp, #152
21dbc     A7 20 0A FB | 	rdlong	local02, fp wz
21dc0     50 1E 06 56 |  if_ne	mov	local01, #80
21dc4     70 1E 06 A6 |  if_e	mov	local01, #112
21dc8     8C 4E 85 F1 | 	sub	fp, #140
21dcc     A7 1E 62 FC | 	wrlong	local01, fp
21dd0     14 4E 85 F1 | 	sub	fp, #20
21dd4     A7 04 68 FC | 	wrlong	#2, fp
21dd8     1C 4E 05 F1 | 	add	fp, #28
21ddc     A7 02 68 FC | 	wrlong	#1, fp
21de0     84 4E 05 F1 | 	add	fp, #132
21de4     A7 20 0A FB | 	rdlong	local02, fp wz
21de8     58 1E 06 56 |  if_ne	mov	local01, #88
21dec     78 1E 06 A6 |  if_e	mov	local01, #120
21df0     7C 4E 85 F1 | 	sub	fp, #124
21df4     A7 1E 62 FC | 	wrlong	local01, fp
21df8     40 4E 85 F1 | 	sub	fp, #64
21dfc                 | LR__3043
21dfc     10 4E 05 F1 | 	add	fp, #16
21e00     A7 1E 02 FB | 	rdlong	local01, fp
21e04     10 4E 85 F1 | 	sub	fp, #16
21e08     23 1E 0E F2 | 	cmp	local01, #35 wz
21e0c     3C 00 90 5D |  if_ne	jmp	#LR__3046
21e10     48 4E 05 F1 | 	add	fp, #72
21e14     A7 02 68 FC | 	wrlong	#1, fp
21e18     C8 4E 05 F1 | 	add	fp, #200
21e1c     A7 1E 0A FB | 	rdlong	local01, fp wz
21e20     10 4F 85 F1 | 	sub	fp, #272
21e24     18 00 90 AD |  if_e	jmp	#LR__3044
21e28     10 4E 05 F1 | 	add	fp, #16
21e2c     A7 CC 68 FC | 	wrlong	#102, fp
21e30     00 4F 05 F1 | 	add	fp, #256
21e34     A7 00 68 FC | 	wrlong	#0, fp
21e38     10 4F 85 F1 | 	sub	fp, #272
21e3c     0C 00 90 FD | 	jmp	#LR__3045
21e40                 | LR__3044
21e40     10 4F 05 F1 | 	add	fp, #272
21e44     A7 02 68 FC | 	wrlong	#1, fp
21e48     10 4F 85 F1 | 	sub	fp, #272
21e4c                 | LR__3045
21e4c                 | LR__3046
21e4c     08 4E 05 F1 | 	add	fp, #8
21e50     A7 1E 02 FB | 	rdlong	local01, fp
21e54     1A 1E 46 F0 | 	shr	local01, #26
21e58     03 1E 06 F5 | 	and	local01, #3
21e5c     5C 4E 05 F1 | 	add	fp, #92
21e60     A7 1E 62 FC | 	wrlong	local01, fp
21e64     58 4E 85 F1 | 	sub	fp, #88
21e68     A7 FA 01 FB | 	rdlong	result1, fp
21e6c     0C 4E 85 F1 | 	sub	fp, #12
21e70     1F FA 4D F0 | 	shr	result1, #31 wz
21e74     20 00 90 AD |  if_e	jmp	#LR__3047
21e78     2C 4E 05 F1 | 	add	fp, #44
21e7c     A7 5A 68 FC | 	wrlong	#45, fp
21e80     20 4E 85 F1 | 	sub	fp, #32
21e84     A7 FA 01 FB | 	rdlong	result1, fp
21e88     1F FA E5 F4 | 	bitnot	result1, #31
21e8c     A7 FA 61 FC | 	wrlong	result1, fp
21e90     0C 4E 85 F1 | 	sub	fp, #12
21e94     3C 00 90 FD | 	jmp	#LR__3049
21e98                 | LR__3047
21e98     64 4E 05 F1 | 	add	fp, #100
21e9c     A7 1E 02 FB | 	rdlong	local01, fp
21ea0     64 4E 85 F1 | 	sub	fp, #100
21ea4     01 1E 0E F2 | 	cmp	local01, #1 wz
21ea8     2C 4E 05 A1 |  if_e	add	fp, #44
21eac     A7 56 68 AC |  if_e	wrlong	#43, fp
21eb0     2C 4E 85 A1 |  if_e	sub	fp, #44
21eb4     1C 00 90 AD |  if_e	jmp	#LR__3048
21eb8     64 4E 05 F1 | 	add	fp, #100
21ebc     A7 1E 02 FB | 	rdlong	local01, fp
21ec0     64 4E 85 F1 | 	sub	fp, #100
21ec4     02 1E 0E F2 | 	cmp	local01, #2 wz
21ec8     2C 4E 05 A1 |  if_e	add	fp, #44
21ecc     A7 40 68 AC |  if_e	wrlong	#32, fp
21ed0     2C 4E 85 A1 |  if_e	sub	fp, #44
21ed4                 | LR__3048
21ed4                 | LR__3049
21ed4     08 4E 05 F1 | 	add	fp, #8
21ed8     A7 1E 02 FB | 	rdlong	local01, fp
21edc     18 1E 46 F0 | 	shr	local01, #24
21ee0     03 1E 06 F5 | 	and	local01, #3
21ee4     3C 4E 05 F1 | 	add	fp, #60
21ee8     A7 1E 62 FC | 	wrlong	local01, fp
21eec     00 1E 06 F6 | 	mov	local01, #0
21ef0     18 4E 85 F1 | 	sub	fp, #24
21ef4     A7 22 0A FB | 	rdlong	local03, fp wz
21ef8     2C 4E 85 F1 | 	sub	fp, #44
21efc     18 00 90 5D |  if_ne	jmp	#LR__3050
21f00     1C 4E 05 F1 | 	add	fp, #28
21f04     A7 24 02 FB | 	rdlong	local04, fp
21f08     1C 4E 85 F1 | 	sub	fp, #28
21f0c     12 27 02 F6 | 	mov	local05, local04
21f10     0A 26 0E F2 | 	cmp	local05, #10 wz
21f14     04 00 90 AD |  if_e	jmp	#LR__3051
21f18                 | LR__3050
21f18     01 1E 66 F5 | 	xor	local01, #1
21f1c                 | LR__3051
21f1c     3C 4E 05 F1 | 	add	fp, #60
21f20     A7 1E 62 FC | 	wrlong	local01, fp
21f24     3C 4E 85 F1 | 	sub	fp, #60
21f28     00 1E 0E F2 | 	cmp	local01, #0 wz
21f2c     0C 01 90 AD |  if_e	jmp	#LR__3053
21f30     44 4E 05 F1 | 	add	fp, #68
21f34     A7 26 02 FB | 	rdlong	local05, fp
21f38     44 4E 85 F1 | 	sub	fp, #68
21f3c     13 23 02 F6 | 	mov	local03, local05
21f40     02 22 0E F2 | 	cmp	local03, #2 wz
21f44     F4 00 90 5D |  if_ne	jmp	#LR__3053
21f48     0C 4F 05 F1 | 	add	fp, #268
21f4c     A7 28 02 FB | 	rdlong	local06, fp
21f50     0C 4F 85 F1 | 	sub	fp, #268
21f54     14 25 02 F6 | 	mov	local04, local06
21f58     02 24 0E F2 | 	cmp	local04, #2 wz
21f5c     DC 00 90 AD |  if_e	jmp	#LR__3053
21f60     C0 4E 05 F1 | 	add	fp, #192
21f64     A7 12 02 FB | 	rdlong	arg01, fp
21f68     94 4E 85 F1 | 	sub	fp, #148
21f6c     A7 14 02 FB | 	rdlong	arg02, fp
21f70     14 4E 05 F1 | 	add	fp, #20
21f74     A7 16 02 FB | 	rdlong	arg03, fp
21f78     40 4E 85 F1 | 	sub	fp, #64
21f7c     A4 44 B0 FD | 	call	#__system__emitsign_0500
21f80     14 4F 05 F1 | 	add	fp, #276
21f84     A7 FA 61 FC | 	wrlong	result1, fp
21f88     14 4F 85 F1 | 	sub	fp, #276
21f8c     00 FA 55 F2 | 	cmps	result1, #0 wc
21f90     14 4F 05 C1 |  if_b	add	fp, #276
21f94     A7 FA 01 CB |  if_b	rdlong	result1, fp
21f98     14 4F 85 C1 |  if_b	sub	fp, #276
21f9c     6C 0B 90 CD |  if_b	jmp	#LR__3103
21fa0     C0 4E 05 F1 | 	add	fp, #192
21fa4     A7 1E 02 FB | 	rdlong	local01, fp
21fa8     54 4E 05 F1 | 	add	fp, #84
21fac     A7 26 02 FB | 	rdlong	local05, fp
21fb0     13 23 02 F6 | 	mov	local03, local05
21fb4     13 1F 02 F1 | 	add	local01, local05
21fb8     54 4E 85 F1 | 	sub	fp, #84
21fbc     A7 1E 62 FC | 	wrlong	local01, fp
21fc0     58 4E 85 F1 | 	sub	fp, #88
21fc4     A7 1E 0A FB | 	rdlong	local01, fp wz
21fc8     68 4E 85 F1 | 	sub	fp, #104
21fcc     60 00 90 AD |  if_e	jmp	#LR__3052
21fd0     68 4E 05 F1 | 	add	fp, #104
21fd4     A7 1E 02 FB | 	rdlong	local01, fp
21fd8     AC 4E 05 F1 | 	add	fp, #172
21fdc     A7 22 02 FB | 	rdlong	local03, fp
21fe0     11 1F 82 F1 | 	sub	local01, local03
21fe4     AC 4E 85 F1 | 	sub	fp, #172
21fe8     A7 1E 62 FC | 	wrlong	local01, fp
21fec     68 4E 85 F1 | 	sub	fp, #104
21ff0     00 1E 56 F2 | 	cmps	local01, #0 wc
21ff4     68 4E 05 C1 |  if_b	add	fp, #104
21ff8     A7 00 68 CC |  if_b	wrlong	#0, fp
21ffc     68 4E 85 C1 |  if_b	sub	fp, #104
22000     08 4E 05 F1 | 	add	fp, #8
22004     A7 1E 02 FB | 	rdlong	local01, fp
22008     E8 1E 06 F4 | 	bitl	local01, #232
2200c     A7 1E 62 FC | 	wrlong	local01, fp
22010     60 4E 05 F1 | 	add	fp, #96
22014     A7 26 02 FB | 	rdlong	local05, fp
22018     13 23 02 F6 | 	mov	local03, local05
2201c     08 22 66 F0 | 	shl	local03, #8
22020     11 1F 42 F5 | 	or	local01, local03
22024     60 4E 85 F1 | 	sub	fp, #96
22028     A7 1E 62 FC | 	wrlong	local01, fp
2202c     08 4E 85 F1 | 	sub	fp, #8
22030                 | LR__3052
22030     3C 4E 05 F1 | 	add	fp, #60
22034     A7 00 68 FC | 	wrlong	#0, fp
22038     3C 4E 85 F1 | 	sub	fp, #60
2203c                 | LR__3053
2203c     0C 4E 05 F1 | 	add	fp, #12
22040     A7 12 02 FB | 	rdlong	arg01, fp
22044     0C 4E 85 F1 | 	sub	fp, #12
22048     04 1F B0 FD | 	call	#__system____builtin_ilogb
2204c     FF FF 3F FF 
22050     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
22054     50 00 90 5D |  if_ne	jmp	#LR__3055
22058     2C 4E 05 F1 | 	add	fp, #44
2205c     A7 1E 0A FB | 	rdlong	local01, fp wz
22060     2C 4E 85 F1 | 	sub	fp, #44
22064     24 00 90 AD |  if_e	jmp	#LR__3054
22068     C0 4E 05 F1 | 	add	fp, #192
2206c     A7 20 02 FB | 	rdlong	local02, fp
22070     10 23 02 F6 | 	mov	local03, local02
22074     01 22 06 F1 | 	add	local03, #1
22078     A7 22 62 FC | 	wrlong	local03, fp
2207c     94 4E 85 F1 | 	sub	fp, #148
22080     A7 24 02 FB | 	rdlong	local04, fp
22084     2C 4E 85 F1 | 	sub	fp, #44
22088     10 25 42 FC | 	wrbyte	local04, local02
2208c                 | LR__3054
2208c     C0 4E 05 F1 | 	add	fp, #192
22090     A7 12 02 FB | 	rdlong	arg01, fp
22094     C0 4E 85 F1 | 	sub	fp, #192
22098     81 01 00 FF 
2209c     C2 14 06 F6 | 	mov	arg02, ##@LR__5011
220a0     AC E9 BF FD | 	call	#__system____builtin_strcpy
220a4     A4 08 90 FD | 	jmp	#LR__3091
220a8                 | LR__3055
220a8     0C 4E 05 F1 | 	add	fp, #12
220ac     A7 20 02 FB | 	rdlong	local02, fp
220b0     0C 4E 85 F1 | 	sub	fp, #12
220b4     10 13 02 F6 | 	mov	arg01, local02
220b8     94 1E B0 FD | 	call	#__system____builtin_ilogb
220bc     00 00 40 FF 
220c0     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
220c4     50 00 90 5D |  if_ne	jmp	#LR__3057
220c8     2C 4E 05 F1 | 	add	fp, #44
220cc     A7 1E 0A FB | 	rdlong	local01, fp wz
220d0     2C 4E 85 F1 | 	sub	fp, #44
220d4     24 00 90 AD |  if_e	jmp	#LR__3056
220d8     C0 4E 05 F1 | 	add	fp, #192
220dc     A7 20 02 FB | 	rdlong	local02, fp
220e0     10 23 02 F6 | 	mov	local03, local02
220e4     01 22 06 F1 | 	add	local03, #1
220e8     A7 22 62 FC | 	wrlong	local03, fp
220ec     94 4E 85 F1 | 	sub	fp, #148
220f0     A7 24 02 FB | 	rdlong	local04, fp
220f4     2C 4E 85 F1 | 	sub	fp, #44
220f8     10 25 42 FC | 	wrbyte	local04, local02
220fc                 | LR__3056
220fc     C0 4E 05 F1 | 	add	fp, #192
22100     A7 12 02 FB | 	rdlong	arg01, fp
22104     C0 4E 85 F1 | 	sub	fp, #192
22108     81 01 00 FF 
2210c     C6 14 06 F6 | 	mov	arg02, ##@LR__5012
22110     3C E9 BF FD | 	call	#__system____builtin_strcpy
22114     34 08 90 FD | 	jmp	#LR__3091
22118                 | LR__3057
22118     10 4E 05 F1 | 	add	fp, #16
2211c     A7 1E 02 FB | 	rdlong	local01, fp
22120     10 4E 85 F1 | 	sub	fp, #16
22124     67 1E 0E F2 | 	cmp	local01, #103 wz
22128     10 4E 05 51 |  if_ne	add	fp, #16
2212c     A7 22 02 5B |  if_ne	rdlong	local03, fp
22130     10 4E 85 51 |  if_ne	sub	fp, #16
22134     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
22138     94 01 90 5D |  if_ne	jmp	#LR__3062
2213c     0C 4E 05 F1 | 	add	fp, #12
22140     A7 12 02 FB | 	rdlong	arg01, fp
22144     08 4E 05 F1 | 	add	fp, #8
22148     A7 14 02 F6 | 	mov	arg02, fp
2214c     0C 4E 05 F1 | 	add	fp, #12
22150     A7 16 02 F6 | 	mov	arg03, fp
22154     98 4E 05 F1 | 	add	fp, #152
22158     A7 18 02 FB | 	rdlong	arg04, fp
2215c     9C 4E 85 F1 | 	sub	fp, #156
22160     A7 1A 02 FB | 	rdlong	arg05, fp
22164     1C 4E 85 F1 | 	sub	fp, #28
22168     C4 40 B0 FD | 	call	#__system__disassemble_0498
2216c     10 4E 05 F1 | 	add	fp, #16
22170     A7 1E 02 FB | 	rdlong	local01, fp
22174     10 4E 85 F1 | 	sub	fp, #16
22178     23 1E 0E F2 | 	cmp	local01, #35 wz
2217c     A0 00 90 5D |  if_ne	jmp	#LR__3059
22180     20 4E 05 F1 | 	add	fp, #32
22184     A7 1E 02 FB | 	rdlong	local01, fp
22188     98 4E 05 F1 | 	add	fp, #152
2218c     A7 22 02 FB | 	rdlong	local03, fp
22190     B8 4E 85 F1 | 	sub	fp, #184
22194     11 1F 5A F2 | 	cmps	local01, local03 wcz
22198     24 4E 05 11 |  if_a	add	fp, #36
2219c     A7 02 68 1C |  if_a	wrlong	#1, fp
221a0     24 4E 85 11 |  if_a	sub	fp, #36
221a4     A4 01 90 1D |  if_a	jmp	#LR__3065
221a8     20 4E 05 F1 | 	add	fp, #32
221ac     A7 1E 02 FB | 	rdlong	local01, fp
221b0     20 4E 85 F1 | 	sub	fp, #32
221b4     00 1E 56 F2 | 	cmps	local01, #0 wc
221b8     2C 00 90 3D |  if_ae	jmp	#LR__3058
221bc     B8 4E 05 F1 | 	add	fp, #184
221c0     A7 1E 02 FB | 	rdlong	local01, fp
221c4     0F 1F 62 F6 | 	neg	local01, local01
221c8     98 4E 85 F1 | 	sub	fp, #152
221cc     A7 22 02 FB | 	rdlong	local03, fp
221d0     20 4E 85 F1 | 	sub	fp, #32
221d4     0F 23 5A F2 | 	cmps	local03, local01 wcz
221d8     24 4E 05 E1 |  if_be	add	fp, #36
221dc     A7 02 68 EC |  if_be	wrlong	#1, fp
221e0     24 4E 85 E1 |  if_be	sub	fp, #36
221e4     64 01 90 FD | 	jmp	#LR__3065
221e8                 | LR__3058
221e8     20 4E 05 F1 | 	add	fp, #32
221ec     A7 1E 02 FB | 	rdlong	local01, fp
221f0     20 4E 85 F1 | 	sub	fp, #32
221f4     01 1E 56 F2 | 	cmps	local01, #1 wc
221f8     50 01 90 CD |  if_b	jmp	#LR__3065
221fc     B8 4E 05 F1 | 	add	fp, #184
22200     A7 1E 02 FB | 	rdlong	local01, fp
22204     98 4E 85 F1 | 	sub	fp, #152
22208     A7 22 02 FB | 	rdlong	local03, fp
2220c     11 1F 82 F1 | 	sub	local01, local03
22210     98 4E 05 F1 | 	add	fp, #152
22214     A7 1E 62 FC | 	wrlong	local01, fp
22218     B8 4E 85 F1 | 	sub	fp, #184
2221c     2C 01 90 FD | 	jmp	#LR__3065
22220                 | LR__3059
22220     00 1E 06 F6 | 	mov	local01, #0
22224     08 4E 05 F1 | 	add	fp, #8
22228     A7 20 02 FB | 	rdlong	local02, fp
2222c     1C 20 46 F0 | 	shr	local02, #28
22230     01 20 0E F5 | 	and	local02, #1 wz
22234     01 1E 06 A6 |  if_e	mov	local01, #1
22238     2C 4E 05 F1 | 	add	fp, #44
2223c     A7 1E 62 FC | 	wrlong	local01, fp
22240     14 4E 85 F1 | 	sub	fp, #20
22244     A7 1E 02 FB | 	rdlong	local01, fp
22248     98 4E 05 F1 | 	add	fp, #152
2224c     A7 22 02 FB | 	rdlong	local03, fp
22250     B8 4E 85 F1 | 	sub	fp, #184
22254     11 1F 52 F2 | 	cmps	local01, local03 wc
22258     18 00 90 3D |  if_ae	jmp	#LR__3060
2225c     20 4E 05 F1 | 	add	fp, #32
22260     A7 24 02 FB | 	rdlong	local04, fp
22264     20 4E 85 F1 | 	sub	fp, #32
22268     FF FF 7F FF 
2226c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22270     10 00 90 3D |  if_ae	jmp	#LR__3061
22274                 | LR__3060
22274     24 4E 05 F1 | 	add	fp, #36
22278     A7 02 68 FC | 	wrlong	#1, fp
2227c     24 4E 85 F1 | 	sub	fp, #36
22280     C8 00 90 FD | 	jmp	#LR__3065
22284                 | LR__3061
22284     B8 4E 05 F1 | 	add	fp, #184
22288     A7 24 02 FB | 	rdlong	local04, fp
2228c     98 4E 85 F1 | 	sub	fp, #152
22290     A7 22 02 FB | 	rdlong	local03, fp
22294     11 25 82 F1 | 	sub	local04, local03
22298     98 4E 05 F1 | 	add	fp, #152
2229c     A7 24 62 FC | 	wrlong	local04, fp
222a0     AC 4E 85 F1 | 	sub	fp, #172
222a4     A7 12 02 FB | 	rdlong	arg01, fp
222a8     08 4E 05 F1 | 	add	fp, #8
222ac     A7 14 02 F6 | 	mov	arg02, fp
222b0     0C 4E 05 F1 | 	add	fp, #12
222b4     A7 16 02 F6 | 	mov	arg03, fp
222b8     12 19 62 F6 | 	neg	arg04, local04
222bc     04 4E 85 F1 | 	sub	fp, #4
222c0     A7 1A 02 FB | 	rdlong	arg05, fp
222c4     1C 4E 85 F1 | 	sub	fp, #28
222c8     64 3F B0 FD | 	call	#__system__disassemble_0498
222cc     7C 00 90 FD | 	jmp	#LR__3065
222d0                 | LR__3062
222d0     24 4E 05 F1 | 	add	fp, #36
222d4     A7 1E 0A FB | 	rdlong	local01, fp wz
222d8     24 4E 85 F1 | 	sub	fp, #36
222dc     34 00 90 AD |  if_e	jmp	#LR__3063
222e0     0C 4E 05 F1 | 	add	fp, #12
222e4     A7 12 02 FB | 	rdlong	arg01, fp
222e8     08 4E 05 F1 | 	add	fp, #8
222ec     A7 14 02 F6 | 	mov	arg02, fp
222f0     0C 4E 05 F1 | 	add	fp, #12
222f4     A7 16 02 F6 | 	mov	arg03, fp
222f8     98 4E 05 F1 | 	add	fp, #152
222fc     A7 18 02 FB | 	rdlong	arg04, fp
22300     9C 4E 85 F1 | 	sub	fp, #156
22304     A7 1A 02 FB | 	rdlong	arg05, fp
22308     1C 4E 85 F1 | 	sub	fp, #28
2230c     20 3F B0 FD | 	call	#__system__disassemble_0498
22310     38 00 90 FD | 	jmp	#LR__3064
22314                 | LR__3063
22314     0C 4E 05 F1 | 	add	fp, #12
22318     A7 12 02 FB | 	rdlong	arg01, fp
2231c     08 4E 05 F1 | 	add	fp, #8
22320     A7 14 02 F6 | 	mov	arg02, fp
22324     0C 4E 05 F1 | 	add	fp, #12
22328     A7 16 02 F6 | 	mov	arg03, fp
2232c     98 4E 05 F1 | 	add	fp, #152
22330     A7 24 02 FB | 	rdlong	local04, fp
22334     01 24 06 F1 | 	add	local04, #1
22338     12 19 62 F6 | 	neg	arg04, local04
2233c     9C 4E 85 F1 | 	sub	fp, #156
22340     A7 1A 02 FB | 	rdlong	arg05, fp
22344     1C 4E 85 F1 | 	sub	fp, #28
22348     E4 3E B0 FD | 	call	#__system__disassemble_0498
2234c                 | LR__3064
2234c                 | LR__3065
2234c     1C 4E 05 F1 | 	add	fp, #28
22350     A7 1E 02 FB | 	rdlong	local01, fp
22354     1C 4E 85 F1 | 	sub	fp, #28
22358     02 1E 0E F2 | 	cmp	local01, #2 wz
2235c     4C 00 90 5D |  if_ne	jmp	#LR__3068
22360     1C 4E 05 F1 | 	add	fp, #28
22364     A7 20 68 FC | 	wrlong	#16, fp
22368     1C 4E 85 F1 | 	sub	fp, #28
2236c                 | LR__3066
2236c     14 4E 05 F1 | 	add	fp, #20
22370     A7 1E 0A FB | 	rdlong	local01, fp wz
22374     14 4E 85 F1 | 	sub	fp, #20
22378     30 00 90 AD |  if_e	jmp	#LR__3067
2237c     14 4E 05 F1 | 	add	fp, #20
22380     A7 22 02 FB | 	rdlong	local03, fp
22384     14 4E 85 F1 | 	sub	fp, #20
22388     00 80 00 FF 
2238c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22390     18 00 90 3D |  if_ae	jmp	#LR__3067
22394     14 4E 05 F1 | 	add	fp, #20
22398     A7 1E 02 FB | 	rdlong	local01, fp
2239c     01 1E 66 F0 | 	shl	local01, #1
223a0     A7 1E 62 FC | 	wrlong	local01, fp
223a4     14 4E 85 F1 | 	sub	fp, #20
223a8     C0 FF 9F FD | 	jmp	#LR__3066
223ac                 | LR__3067
223ac                 | LR__3068
223ac     70 4E 05 F1 | 	add	fp, #112
223b0     A7 12 02 F6 | 	mov	arg01, fp
223b4     5C 4E 85 F1 | 	sub	fp, #92
223b8     A7 14 02 FB | 	rdlong	arg02, fp
223bc     08 4E 05 F1 | 	add	fp, #8
223c0     A7 16 02 FB | 	rdlong	arg03, fp
223c4     A0 4E 05 F1 | 	add	fp, #160
223c8     A7 1A 02 FB | 	rdlong	arg05, fp
223cc     BC 4E 85 F1 | 	sub	fp, #188
223d0     01 18 06 F6 | 	mov	arg04, #1
223d4     E4 3D B0 FD | 	call	#__system___uitoa
223d8     58 4E 05 F1 | 	add	fp, #88
223dc     A7 FA 61 FC | 	wrlong	result1, fp
223e0     38 4E 85 F1 | 	sub	fp, #56
223e4     A7 1E 02 FB | 	rdlong	local01, fp
223e8     20 4E 85 F1 | 	sub	fp, #32
223ec     00 1E 56 F2 | 	cmps	local01, #0 wc
223f0     50 00 90 3D |  if_ae	jmp	#LR__3069
223f4     60 4E 05 F1 | 	add	fp, #96
223f8     A7 5A 68 FC | 	wrlong	#45, fp
223fc     50 4E 05 F1 | 	add	fp, #80
22400     A7 12 02 F6 | 	mov	arg01, fp
22404     90 4E 85 F1 | 	sub	fp, #144
22408     A7 22 02 FB | 	rdlong	local03, fp
2240c     11 15 62 F6 | 	neg	arg02, local03
22410     18 4E 05 F1 | 	add	fp, #24
22414     A7 18 02 FB | 	rdlong	arg04, fp
22418     84 4E 05 F1 | 	add	fp, #132
2241c     A7 28 02 FB | 	rdlong	local06, fp
22420     BC 4E 85 F1 | 	sub	fp, #188
22424     14 25 02 F6 | 	mov	local04, local06
22428     0A 16 06 F6 | 	mov	arg03, #10
2242c     12 1B 02 F6 | 	mov	arg05, local04
22430     88 3D B0 FD | 	call	#__system___uitoa
22434     5C 4E 05 F1 | 	add	fp, #92
22438     A7 FA 61 FC | 	wrlong	result1, fp
2243c     5C 4E 85 F1 | 	sub	fp, #92
22440     48 00 90 FD | 	jmp	#LR__3070
22444                 | LR__3069
22444     60 4E 05 F1 | 	add	fp, #96
22448     A7 56 68 FC | 	wrlong	#43, fp
2244c     50 4E 05 F1 | 	add	fp, #80
22450     A7 12 02 F6 | 	mov	arg01, fp
22454     90 4E 85 F1 | 	sub	fp, #144
22458     A7 14 02 FB | 	rdlong	arg02, fp
2245c     18 4E 05 F1 | 	add	fp, #24
22460     A7 18 02 FB | 	rdlong	arg04, fp
22464     84 4E 05 F1 | 	add	fp, #132
22468     A7 28 02 FB | 	rdlong	local06, fp
2246c     BC 4E 85 F1 | 	sub	fp, #188
22470     14 25 02 F6 | 	mov	local04, local06
22474     0A 16 06 F6 | 	mov	arg03, #10
22478     12 1B 02 F6 | 	mov	arg05, local04
2247c     3C 3D B0 FD | 	call	#__system___uitoa
22480     5C 4E 05 F1 | 	add	fp, #92
22484     A7 FA 61 FC | 	wrlong	result1, fp
22488     5C 4E 85 F1 | 	sub	fp, #92
2248c                 | LR__3070
2248c     24 4E 05 F1 | 	add	fp, #36
22490     A7 1E 0A FB | 	rdlong	local01, fp wz
22494     24 4E 85 F1 | 	sub	fp, #36
22498     2C 00 90 AD |  if_e	jmp	#LR__3071
2249c     50 4E 05 F1 | 	add	fp, #80
224a0     A7 00 68 FC | 	wrlong	#0, fp
224a4     04 4E 85 F1 | 	sub	fp, #4
224a8     A7 00 68 FC | 	wrlong	#0, fp
224ac     6C 4E 05 F1 | 	add	fp, #108
224b0     A7 1E 02 FB | 	rdlong	local01, fp
224b4     01 1E 06 F1 | 	add	local01, #1
224b8     64 4E 85 F1 | 	sub	fp, #100
224bc     A7 1E 62 FC | 	wrlong	local01, fp
224c0     54 4E 85 F1 | 	sub	fp, #84
224c4     88 00 90 FD | 	jmp	#LR__3074
224c8                 | LR__3071
224c8     20 4E 05 F1 | 	add	fp, #32
224cc     A7 1E 02 FB | 	rdlong	local01, fp
224d0     20 4E 85 F1 | 	sub	fp, #32
224d4     00 1E 56 F2 | 	cmps	local01, #0 wc
224d8     40 00 90 3D |  if_ae	jmp	#LR__3072
224dc     20 4E 05 F1 | 	add	fp, #32
224e0     A7 20 02 FB | 	rdlong	local02, fp
224e4     30 4E 05 F1 | 	add	fp, #48
224e8     A7 20 62 FC | 	wrlong	local02, fp
224ec     04 4E 85 F1 | 	sub	fp, #4
224f0     A7 20 62 FC | 	wrlong	local02, fp
224f4     2C 4E 85 F1 | 	sub	fp, #44
224f8     A7 1E 02 FB | 	rdlong	local01, fp
224fc     98 4E 05 F1 | 	add	fp, #152
22500     A7 22 02 FB | 	rdlong	local03, fp
22504     11 1F 02 F1 | 	add	local01, local03
22508     01 1E 06 F1 | 	add	local01, #1
2250c     64 4E 85 F1 | 	sub	fp, #100
22510     A7 1E 62 FC | 	wrlong	local01, fp
22514     54 4E 85 F1 | 	sub	fp, #84
22518     34 00 90 FD | 	jmp	#LR__3073
2251c                 | LR__3072
2251c     4C 4E 05 F1 | 	add	fp, #76
22520     A7 00 68 FC | 	wrlong	#0, fp
22524     2C 4E 85 F1 | 	sub	fp, #44
22528     A7 1E 02 FB | 	rdlong	local01, fp
2252c     30 4E 05 F1 | 	add	fp, #48
22530     A7 1E 62 FC | 	wrlong	local01, fp
22534     68 4E 05 F1 | 	add	fp, #104
22538     A7 22 02 FB | 	rdlong	local03, fp
2253c     11 1F 02 F1 | 	add	local01, local03
22540     01 1E 06 F1 | 	add	local01, #1
22544     64 4E 85 F1 | 	sub	fp, #100
22548     A7 1E 62 FC | 	wrlong	local01, fp
2254c     54 4E 85 F1 | 	sub	fp, #84
22550                 | LR__3073
22550                 | LR__3074
22550     54 4E 05 F1 | 	add	fp, #84
22554     A7 1E 02 FB | 	rdlong	local01, fp
22558     08 4E 85 F1 | 	sub	fp, #8
2255c     A7 22 02 FB | 	rdlong	local03, fp
22560     11 1F 82 F1 | 	sub	local01, local03
22564     01 1E 06 F1 | 	add	local01, #1
22568     24 4E 85 F1 | 	sub	fp, #36
2256c     A7 1E 62 FC | 	wrlong	local01, fp
22570     04 4E 05 F1 | 	add	fp, #4
22574     A7 1E 0A FB | 	rdlong	local01, fp wz
22578     2C 4E 85 F1 | 	sub	fp, #44
2257c     28 4E 05 51 |  if_ne	add	fp, #40
22580     A7 22 02 5B |  if_ne	rdlong	local03, fp
22584     01 22 06 51 |  if_ne	add	local03, #1
22588     A7 22 62 5C |  if_ne	wrlong	local03, fp
2258c     28 4E 85 51 |  if_ne	sub	fp, #40
22590     1C 4E 05 F1 | 	add	fp, #28
22594     A7 1E 02 FB | 	rdlong	local01, fp
22598     1C 4E 85 F1 | 	sub	fp, #28
2259c     10 1E 0E F2 | 	cmp	local01, #16 wz
225a0     28 4E 05 A1 |  if_e	add	fp, #40
225a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
225a8     02 1E 06 A1 |  if_e	add	local01, #2
225ac     A7 1E 62 AC |  if_e	wrlong	local01, fp
225b0     28 4E 85 A1 |  if_e	sub	fp, #40
225b4     24 4E 05 F1 | 	add	fp, #36
225b8     A7 1E 0A FB | 	rdlong	local01, fp wz
225bc     24 4E 85 F1 | 	sub	fp, #36
225c0     28 00 90 AD |  if_e	jmp	#LR__3075
225c4     28 4E 05 F1 | 	add	fp, #40
225c8     A7 1E 02 FB | 	rdlong	local01, fp
225cc     02 22 06 F6 | 	mov	local03, #2
225d0     34 4E 05 F1 | 	add	fp, #52
225d4     A7 26 02 FB | 	rdlong	local05, fp
225d8     13 23 02 F1 | 	add	local03, local05
225dc     11 1F 02 F1 | 	add	local01, local03
225e0     34 4E 85 F1 | 	sub	fp, #52
225e4     A7 1E 62 FC | 	wrlong	local01, fp
225e8     28 4E 85 F1 | 	sub	fp, #40
225ec                 | LR__3075
225ec     28 4E 05 F1 | 	add	fp, #40
225f0     A7 1E 02 FB | 	rdlong	local01, fp
225f4     28 4E 85 F1 | 	sub	fp, #40
225f8     41 1E 56 F2 | 	cmps	local01, #65 wc
225fc     01 FA 65 36 |  if_ae	neg	result1, #1
22600     08 05 90 3D |  if_ae	jmp	#LR__3103
22604     3C 4E 05 F1 | 	add	fp, #60
22608     A7 1E 0A FB | 	rdlong	local01, fp wz
2260c     3C 4E 85 F1 | 	sub	fp, #60
22610     60 00 90 AD |  if_e	jmp	#LR__3076
22614     C0 4E 05 F1 | 	add	fp, #192
22618     A7 12 02 FB | 	rdlong	arg01, fp
2261c     94 4E 85 F1 | 	sub	fp, #148
22620     A7 14 02 FB | 	rdlong	arg02, fp
22624     14 4E 05 F1 | 	add	fp, #20
22628     A7 16 02 FB | 	rdlong	arg03, fp
2262c     40 4E 85 F1 | 	sub	fp, #64
22630     F0 3D B0 FD | 	call	#__system__emitsign_0500
22634     18 4F 05 F1 | 	add	fp, #280
22638     A7 FA 61 FC | 	wrlong	result1, fp
2263c     18 4F 85 F1 | 	sub	fp, #280
22640     00 FA 55 F2 | 	cmps	result1, #0 wc
22644     18 4F 05 C1 |  if_b	add	fp, #280
22648     A7 FA 01 CB |  if_b	rdlong	result1, fp
2264c     18 4F 85 C1 |  if_b	sub	fp, #280
22650     B8 04 90 CD |  if_b	jmp	#LR__3103
22654     C0 4E 05 F1 | 	add	fp, #192
22658     A7 1E 02 FB | 	rdlong	local01, fp
2265c     58 4E 05 F1 | 	add	fp, #88
22660     A7 22 02 FB | 	rdlong	local03, fp
22664     11 1F 02 F1 | 	add	local01, local03
22668     58 4E 85 F1 | 	sub	fp, #88
2266c     A7 1E 62 FC | 	wrlong	local01, fp
22670     C0 4E 85 F1 | 	sub	fp, #192
22674                 | LR__3076
22674     4C 4E 05 F1 | 	add	fp, #76
22678     A7 1E 02 FB | 	rdlong	local01, fp
2267c     34 4E 85 F1 | 	sub	fp, #52
22680     A7 1E 62 FC | 	wrlong	local01, fp
22684     18 4E 85 F1 | 	sub	fp, #24
22688     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
2268c                 | LR__3077
2268c     18 4E 05 F1 | 	add	fp, #24
22690     A7 20 02 FB | 	rdlong	local02, fp
22694     3C 4E 05 F1 | 	add	fp, #60
22698     A7 26 02 FB | 	rdlong	local05, fp
2269c     54 4E 85 F1 | 	sub	fp, #84
226a0     13 21 52 F2 | 	cmps	local02, local05 wc
226a4     20 01 90 3D |  if_ae	jmp	#LR__3083
226a8     18 4E 05 F1 | 	add	fp, #24
226ac     A7 28 02 FB | 	rdlong	local06, fp
226b0     18 4E 85 F1 | 	sub	fp, #24
226b4     00 28 56 F2 | 	cmps	local06, #0 wc
226b8     58 00 90 CD |  if_b	jmp	#LR__3078
226bc     18 4E 05 F1 | 	add	fp, #24
226c0     A7 28 02 FB | 	rdlong	local06, fp
226c4     40 4E 05 F1 | 	add	fp, #64
226c8     A7 2A 02 FB | 	rdlong	local07, fp
226cc     58 4E 85 F1 | 	sub	fp, #88
226d0     15 29 52 F2 | 	cmps	local06, local07 wc
226d4     3C 00 90 3D |  if_ae	jmp	#LR__3078
226d8     C0 4E 05 F1 | 	add	fp, #192
226dc     A7 2C 02 FB | 	rdlong	local08, fp
226e0     16 2B 02 F6 | 	mov	local07, local08
226e4     01 2A 06 F1 | 	add	local07, #1
226e8     A7 2A 62 FC | 	wrlong	local07, fp
226ec     A8 4E 85 F1 | 	sub	fp, #168
226f0     A7 2A 02 FB | 	rdlong	local07, fp
226f4     15 2F 02 F6 | 	mov	local09, local07
226f8     58 4E 05 F1 | 	add	fp, #88
226fc     A7 30 02 F6 | 	mov	local10, fp
22700     A7 2E 02 F1 | 	add	local09, fp
22704     17 33 C2 FA | 	rdbyte	local11, local09
22708     16 33 42 FC | 	wrbyte	local11, local08
2270c     70 4E 85 F1 | 	sub	fp, #112
22710     20 00 90 FD | 	jmp	#LR__3079
22714                 | LR__3078
22714     C0 4E 05 F1 | 	add	fp, #192
22718     A7 2C 02 FB | 	rdlong	local08, fp
2271c     16 2F 02 F6 | 	mov	local09, local08
22720     01 2E 06 F1 | 	add	local09, #1
22724     A7 2E 62 FC | 	wrlong	local09, fp
22728     C0 4E 85 F1 | 	sub	fp, #192
2272c     30 2E 06 F6 | 	mov	local09, #48
22730     16 61 48 FC | 	wrbyte	#48, local08
22734                 | LR__3079
22734     18 4E 05 F1 | 	add	fp, #24
22738     A7 28 02 FB | 	rdlong	local06, fp
2273c     38 4E 05 F1 | 	add	fp, #56
22740     A7 34 02 FB | 	rdlong	local12, fp
22744     50 4E 85 F1 | 	sub	fp, #80
22748     1A 29 0A F2 | 	cmp	local06, local12 wz
2274c     5C 00 90 5D |  if_ne	jmp	#LR__3081
22750     10 4F 05 F1 | 	add	fp, #272
22754     A7 2A 02 FB | 	rdlong	local07, fp
22758     10 4F 85 F1 | 	sub	fp, #272
2275c     15 2F 0A F6 | 	mov	local09, local07 wz
22760     28 00 90 5D |  if_ne	jmp	#LR__3080
22764     54 4E 05 F1 | 	add	fp, #84
22768     A7 32 02 FB | 	rdlong	local11, fp
2276c     19 31 02 F6 | 	mov	local10, local11
22770     01 30 86 F1 | 	sub	local10, #1
22774     3C 4E 85 F1 | 	sub	fp, #60
22778     A7 36 02 FB | 	rdlong	local13, fp
2277c     18 4E 85 F1 | 	sub	fp, #24
22780     1B 39 02 F6 | 	mov	local14, local13
22784     18 39 52 F2 | 	cmps	local14, local10 wc
22788     20 00 90 3D |  if_ae	jmp	#LR__3081
2278c                 | LR__3080
2278c     C0 4E 05 F1 | 	add	fp, #192
22790     A7 2C 02 FB | 	rdlong	local08, fp
22794     16 35 02 F6 | 	mov	local12, local08
22798     01 34 06 F1 | 	add	local12, #1
2279c     A7 34 62 FC | 	wrlong	local12, fp
227a0     C0 4E 85 F1 | 	sub	fp, #192
227a4     2E 2E 06 F6 | 	mov	local09, #46
227a8     16 5D 48 FC | 	wrbyte	#46, local08
227ac                 | LR__3081
227ac     18 4E 05 F1 | 	add	fp, #24
227b0     A7 3A 02 FB | 	rdlong	local15, fp
227b4     1D 35 02 F6 | 	mov	local12, local15
227b8     01 34 06 F1 | 	add	local12, #1
227bc     A7 34 62 FC | 	wrlong	local12, fp
227c0     18 4E 85 F1 | 	sub	fp, #24
227c4     C4 FE 9F FD | 	jmp	#LR__3077
227c8                 | LR__3082
227c8                 | LR__3083
227c8     34 4E 05 F1 | 	add	fp, #52
227cc     A7 1E 0A FB | 	rdlong	local01, fp wz
227d0     34 4E 85 F1 | 	sub	fp, #52
227d4     A0 00 90 AD |  if_e	jmp	#LR__3087
227d8     C0 4E 05 F1 | 	add	fp, #192
227dc     A7 1E 02 FB | 	rdlong	local01, fp
227e0     01 1E 86 F1 | 	sub	local01, #1
227e4     A7 1E 62 FC | 	wrlong	local01, fp
227e8     C0 4E 85 F1 | 	sub	fp, #192
227ec     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
227f0                 | LR__3084
227f0     C0 4E 05 F1 | 	add	fp, #192
227f4     A7 1E 02 FB | 	rdlong	local01, fp
227f8     04 4E 05 F1 | 	add	fp, #4
227fc     A7 22 02 FB | 	rdlong	local03, fp
22800     C4 4E 85 F1 | 	sub	fp, #196
22804     11 1F 5A F2 | 	cmps	local01, local03 wcz
22808     30 00 90 ED |  if_be	jmp	#LR__3086
2280c     C0 4E 05 F1 | 	add	fp, #192
22810     A7 28 02 FB | 	rdlong	local06, fp
22814     C0 4E 85 F1 | 	sub	fp, #192
22818     14 25 C2 FA | 	rdbyte	local04, local06
2281c     30 24 0E F2 | 	cmp	local04, #48 wz
22820     18 00 90 5D |  if_ne	jmp	#LR__3086
22824     C0 4E 05 F1 | 	add	fp, #192
22828     A7 1E 02 FB | 	rdlong	local01, fp
2282c     01 1E 86 F1 | 	sub	local01, #1
22830     A7 1E 62 FC | 	wrlong	local01, fp
22834     C0 4E 85 F1 | 	sub	fp, #192
22838     B4 FF 9F FD | 	jmp	#LR__3084
2283c                 | LR__3085
2283c                 | LR__3086
2283c     C0 4E 05 F1 | 	add	fp, #192
22840     A7 20 02 FB | 	rdlong	local02, fp
22844     C0 4E 85 F1 | 	sub	fp, #192
22848     10 1F C2 FA | 	rdbyte	local01, local02
2284c     2E 1E 0E F2 | 	cmp	local01, #46 wz
22850     C0 4E 05 A1 |  if_e	add	fp, #192
22854     A7 1E 02 AB |  if_e	rdlong	local01, fp
22858     01 1E 86 A1 |  if_e	sub	local01, #1
2285c     A7 1E 62 AC |  if_e	wrlong	local01, fp
22860     C0 4E 85 A1 |  if_e	sub	fp, #192
22864     C0 4E 05 F1 | 	add	fp, #192
22868     A7 22 02 FB | 	rdlong	local03, fp
2286c     01 22 06 F1 | 	add	local03, #1
22870     A7 22 62 FC | 	wrlong	local03, fp
22874     C0 4E 85 F1 | 	sub	fp, #192
22878                 | LR__3087
22878     24 4E 05 F1 | 	add	fp, #36
2287c     A7 1E 0A FB | 	rdlong	local01, fp wz
22880     24 4E 85 F1 | 	sub	fp, #36
22884     B4 00 90 AD |  if_e	jmp	#LR__3090
22888     C0 4E 05 F1 | 	add	fp, #192
2288c     A7 20 02 FB | 	rdlong	local02, fp
22890     10 23 02 F6 | 	mov	local03, local02
22894     01 22 06 F1 | 	add	local03, #1
22898     A7 22 62 FC | 	wrlong	local03, fp
2289c     90 4E 85 F1 | 	sub	fp, #144
228a0     A7 24 02 FB | 	rdlong	local04, fp
228a4     10 25 42 FC | 	wrbyte	local04, local02
228a8     90 4E 05 F1 | 	add	fp, #144
228ac     A7 20 02 FB | 	rdlong	local02, fp
228b0     10 23 02 F6 | 	mov	local03, local02
228b4     01 22 06 F1 | 	add	local03, #1
228b8     A7 22 62 FC | 	wrlong	local03, fp
228bc     60 4E 85 F1 | 	sub	fp, #96
228c0     A7 24 02 FB | 	rdlong	local04, fp
228c4     10 25 42 FC | 	wrbyte	local04, local02
228c8     48 4E 85 F1 | 	sub	fp, #72
228cc     A7 00 68 FC | 	wrlong	#0, fp
228d0     18 4E 85 F1 | 	sub	fp, #24
228d4                 | LR__3088
228d4     18 4E 05 F1 | 	add	fp, #24
228d8     A7 20 02 FB | 	rdlong	local02, fp
228dc     44 4E 05 F1 | 	add	fp, #68
228e0     A7 26 02 FB | 	rdlong	local05, fp
228e4     5C 4E 85 F1 | 	sub	fp, #92
228e8     13 21 52 F2 | 	cmps	local02, local05 wc
228ec     4C 00 90 3D |  if_ae	jmp	#LR__3089
228f0     C0 4E 05 F1 | 	add	fp, #192
228f4     A7 2C 02 FB | 	rdlong	local08, fp
228f8     16 35 02 F6 | 	mov	local12, local08
228fc     01 34 06 F1 | 	add	local12, #1
22900     A7 34 62 FC | 	wrlong	local12, fp
22904     A8 4E 85 F1 | 	sub	fp, #168
22908     A7 2A 02 FB | 	rdlong	local07, fp
2290c     15 2F 02 F6 | 	mov	local09, local07
22910     98 4E 05 F1 | 	add	fp, #152
22914     A7 30 02 F6 | 	mov	local10, fp
22918     A7 2E 02 F1 | 	add	local09, fp
2291c     17 33 C2 FA | 	rdbyte	local11, local09
22920     16 33 42 FC | 	wrbyte	local11, local08
22924     98 4E 85 F1 | 	sub	fp, #152
22928     A7 34 02 FB | 	rdlong	local12, fp
2292c     01 34 06 F1 | 	add	local12, #1
22930     A7 34 62 FC | 	wrlong	local12, fp
22934     18 4E 85 F1 | 	sub	fp, #24
22938     98 FF 9F FD | 	jmp	#LR__3088
2293c                 | LR__3089
2293c                 | LR__3090
2293c     C0 4E 05 F1 | 	add	fp, #192
22940     A7 1E 02 FB | 	rdlong	local01, fp
22944     C0 4E 85 F1 | 	sub	fp, #192
22948     0F 01 48 FC | 	wrbyte	#0, local01
2294c                 | LR__3091
2294c     6C 4E 05 F1 | 	add	fp, #108
22950     A7 1E 0A FB | 	rdlong	local01, fp wz
22954     6C 4E 85 F1 | 	sub	fp, #108
22958     90 01 90 AD |  if_e	jmp	#LR__3102
2295c     48 4E 05 F1 | 	add	fp, #72
22960     A7 22 0A FB | 	rdlong	local03, fp wz
22964     48 4E 85 F1 | 	sub	fp, #72
22968     80 01 90 AD |  if_e	jmp	#LR__3102
2296c     C4 4E 05 F1 | 	add	fp, #196
22970     A7 12 02 FB | 	rdlong	arg01, fp
22974     C4 4E 85 F1 | 	sub	fp, #196
22978     09 3D 02 F6 | 	mov	local16, arg01
2297c     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
22980                 | LR__3092
22980     1E FB C9 FA | 	rdbyte	result1, local16 wz
22984     01 3C 06 51 |  if_ne	add	local16, #1
22988     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
2298c                 | LR__3093
2298c     09 3D 82 F1 | 	sub	local16, arg01
22990     1E 25 02 F6 | 	mov	local04, local16
22994     6C 4E 05 F1 | 	add	fp, #108
22998     A7 28 02 FB | 	rdlong	local06, fp
2299c     6C 4E 85 F1 | 	sub	fp, #108
229a0     14 25 5A F2 | 	cmps	local04, local06 wcz
229a4     44 01 90 ED |  if_be	jmp	#LR__3102
229a8     C4 4E 05 F1 | 	add	fp, #196
229ac     A7 1E 02 FB | 	rdlong	local01, fp
229b0     5C 4E 05 F1 | 	add	fp, #92
229b4     A7 1E 62 FC | 	wrlong	local01, fp
229b8     FC 4E 85 F1 | 	sub	fp, #252
229bc     A7 1E 0A FB | 	rdlong	local01, fp wz
229c0     24 4E 85 F1 | 	sub	fp, #36
229c4     20 00 90 AD |  if_e	jmp	#LR__3094
229c8     B8 4E 05 F1 | 	add	fp, #184
229cc     A7 00 68 FC | 	wrlong	#0, fp
229d0     4C 4E 85 F1 | 	sub	fp, #76
229d4     A7 1E 02 FB | 	rdlong	local01, fp
229d8     B0 4E 05 F1 | 	add	fp, #176
229dc     A7 1E 62 FC | 	wrlong	local01, fp
229e0     1C 4F 85 F1 | 	sub	fp, #284
229e4     24 00 90 FD | 	jmp	#LR__3095
229e8                 | LR__3094
229e8     6C 4E 05 F1 | 	add	fp, #108
229ec     A7 1E 02 FB | 	rdlong	local01, fp
229f0     01 1E 86 F1 | 	sub	local01, #1
229f4     4C 4E 05 F1 | 	add	fp, #76
229f8     A7 22 02 FB | 	rdlong	local03, fp
229fc     11 1F 82 F1 | 	sub	local01, local03
22a00     64 4E 05 F1 | 	add	fp, #100
22a04     A7 1E 62 FC | 	wrlong	local01, fp
22a08     1C 4F 85 F1 | 	sub	fp, #284
22a0c                 | LR__3095
22a0c     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
22a10                 | LR__3096
22a10     1C 4F 05 F1 | 	add	fp, #284
22a14     A7 1E 0A FB | 	rdlong	local01, fp wz
22a18     1C 4F 85 F1 | 	sub	fp, #284
22a1c     30 00 90 AD |  if_e	jmp	#LR__3098
22a20     20 4F 05 F1 | 	add	fp, #288
22a24     A7 20 02 FB | 	rdlong	local02, fp
22a28     10 23 02 F6 | 	mov	local03, local02
22a2c     01 22 06 F1 | 	add	local03, #1
22a30     A7 22 62 FC | 	wrlong	local03, fp
22a34     10 55 48 FC | 	wrbyte	#42, local02
22a38     04 4E 85 F1 | 	sub	fp, #4
22a3c     A7 1E 02 FB | 	rdlong	local01, fp
22a40     01 1E 86 F1 | 	sub	local01, #1
22a44     A7 1E 62 FC | 	wrlong	local01, fp
22a48     1C 4F 85 F1 | 	sub	fp, #284
22a4c     C0 FF 9F FD | 	jmp	#LR__3096
22a50                 | LR__3097
22a50                 | LR__3098
22a50     B8 4E 05 F1 | 	add	fp, #184
22a54     A7 1E 0A FB | 	rdlong	local01, fp wz
22a58     B8 4E 85 F1 | 	sub	fp, #184
22a5c     70 00 90 AD |  if_e	jmp	#LR__3101
22a60     20 4F 05 F1 | 	add	fp, #288
22a64     A7 20 02 FB | 	rdlong	local02, fp
22a68     10 23 02 F6 | 	mov	local03, local02
22a6c     01 22 06 F1 | 	add	local03, #1
22a70     A7 22 62 FC | 	wrlong	local03, fp
22a74     10 5D 48 FC | 	wrbyte	#46, local02
22a78     04 4E 85 F1 | 	sub	fp, #4
22a7c     A7 00 68 FC | 	wrlong	#0, fp
22a80     1C 4F 85 F1 | 	sub	fp, #284
22a84                 | LR__3099
22a84     1C 4F 05 F1 | 	add	fp, #284
22a88     A7 20 02 FB | 	rdlong	local02, fp
22a8c     64 4E 85 F1 | 	sub	fp, #100
22a90     A7 26 02 FB | 	rdlong	local05, fp
22a94     B8 4E 85 F1 | 	sub	fp, #184
22a98     13 21 52 F2 | 	cmps	local02, local05 wc
22a9c     30 00 90 3D |  if_ae	jmp	#LR__3100
22aa0     20 4F 05 F1 | 	add	fp, #288
22aa4     A7 2C 02 FB | 	rdlong	local08, fp
22aa8     16 35 02 F6 | 	mov	local12, local08
22aac     01 34 06 F1 | 	add	local12, #1
22ab0     A7 34 62 FC | 	wrlong	local12, fp
22ab4     16 55 48 FC | 	wrbyte	#42, local08
22ab8     04 4E 85 F1 | 	sub	fp, #4
22abc     A7 34 02 FB | 	rdlong	local12, fp
22ac0     01 34 06 F1 | 	add	local12, #1
22ac4     A7 34 62 FC | 	wrlong	local12, fp
22ac8     1C 4F 85 F1 | 	sub	fp, #284
22acc     B4 FF 9F FD | 	jmp	#LR__3099
22ad0                 | LR__3100
22ad0                 | LR__3101
22ad0     20 4F 05 F1 | 	add	fp, #288
22ad4     A7 20 02 FB | 	rdlong	local02, fp
22ad8     10 23 02 F6 | 	mov	local03, local02
22adc     01 22 06 F1 | 	add	local03, #1
22ae0     A7 22 62 FC | 	wrlong	local03, fp
22ae4     20 4F 85 F1 | 	sub	fp, #288
22ae8     10 01 48 FC | 	wrbyte	#0, local02
22aec                 | LR__3102
22aec     04 4E 05 F1 | 	add	fp, #4
22af0     A7 12 02 FB | 	rdlong	arg01, fp
22af4     04 4E 05 F1 | 	add	fp, #4
22af8     A7 14 02 FB | 	rdlong	arg02, fp
22afc     BC 4E 05 F1 | 	add	fp, #188
22b00     A7 16 02 FB | 	rdlong	arg03, fp
22b04     C4 4E 85 F1 | 	sub	fp, #196
22b08     C4 EE BF FD | 	call	#__system___fmtstr
22b0c                 | LR__3103
22b0c     A7 F0 03 F6 | 	mov	ptra, fp
22b10     B2 00 A0 FD | 	call	#popregs_
22b14                 | __system___fmtfloat_ret
22b14     2D 00 64 FD | 	ret
22b18                 | 
22b18                 | __system__Left_S
22b18     04 4A 05 F6 | 	mov	COUNT_, #4
22b1c     A8 00 A0 FD | 	call	#pushregs_
22b20     09 1F 02 F6 | 	mov	local01, arg01
22b24     0A 21 02 F6 | 	mov	local02, arg02
22b28     01 20 56 F2 | 	cmps	local02, #1 wc
22b2c     81 01 00 CF 
22b30     CA FA 05 C6 |  if_b	mov	result1, ##@LR__5013
22b34     5C 00 90 CD |  if_b	jmp	#LR__3113
22b38     0F 13 02 F6 | 	mov	arg01, local01
22b3c     09 23 02 F6 | 	mov	local03, arg01
22b40     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22b44                 | LR__3110
22b44     11 FB C9 FA | 	rdbyte	result1, local03 wz
22b48     01 22 06 51 |  if_ne	add	local03, #1
22b4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22b50                 | LR__3111
22b50     09 23 82 F1 | 	sub	local03, arg01
22b54     11 FB 01 F6 | 	mov	result1, local03
22b58     10 FB 59 F2 | 	cmps	result1, local02 wcz
22b5c     0F FB 01 E6 |  if_be	mov	result1, local01
22b60     30 00 90 ED |  if_be	jmp	#LR__3113
22b64     10 13 02 F6 | 	mov	arg01, local02
22b68     02 12 06 F1 | 	add	arg01, #2
22b6c     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
22b70     FD 24 0A F6 | 	mov	local04, result1 wz
22b74     18 00 90 AD |  if_e	jmp	#LR__3112
22b78     12 13 02 F6 | 	mov	arg01, local04
22b7c     0F 15 02 F6 | 	mov	arg02, local01
22b80     10 17 02 F6 | 	mov	arg03, local02
22b84     34 DE BF FD | 	call	#__system____builtin_memmove
22b88     12 21 02 F1 | 	add	local02, local04
22b8c     10 01 48 FC | 	wrbyte	#0, local02
22b90                 | LR__3112
22b90     12 FB 01 F6 | 	mov	result1, local04
22b94                 | LR__3113
22b94     A7 F0 03 F6 | 	mov	ptra, fp
22b98     B2 00 A0 FD | 	call	#popregs_
22b9c                 | __system__Left_S_ret
22b9c     2D 00 64 FD | 	ret
22ba0                 | 
22ba0                 | __system__Right_S
22ba0     05 4A 05 F6 | 	mov	COUNT_, #5
22ba4     A8 00 A0 FD | 	call	#pushregs_
22ba8     09 1F 02 F6 | 	mov	local01, arg01
22bac     0A 21 02 F6 | 	mov	local02, arg02
22bb0     01 20 56 F2 | 	cmps	local02, #1 wc
22bb4     81 01 00 CF 
22bb8     CB FA 05 C6 |  if_b	mov	result1, ##@LR__5014
22bbc     64 00 90 CD |  if_b	jmp	#LR__3123
22bc0     0F 13 02 F6 | 	mov	arg01, local01
22bc4     09 23 02 F6 | 	mov	local03, arg01
22bc8     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22bcc                 | LR__3120
22bcc     11 FB C9 FA | 	rdbyte	result1, local03 wz
22bd0     01 22 06 51 |  if_ne	add	local03, #1
22bd4     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22bd8                 | LR__3121
22bd8     09 23 82 F1 | 	sub	local03, arg01
22bdc     11 FB 01 F6 | 	mov	result1, local03
22be0     FD 24 02 F6 | 	mov	local04, result1
22be4     10 25 5A F2 | 	cmps	local04, local02 wcz
22be8     0F FB 01 E6 |  if_be	mov	result1, local01
22bec     34 00 90 ED |  if_be	jmp	#LR__3123
22bf0     10 13 02 F6 | 	mov	arg01, local02
22bf4     02 12 06 F1 | 	add	arg01, #2
22bf8     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22bfc     FD 26 0A F6 | 	mov	local05, result1 wz
22c00     1C 00 90 AD |  if_e	jmp	#LR__3122
22c04     10 25 82 F1 | 	sub	local04, local02
22c08     0F 25 02 F1 | 	add	local04, local01
22c0c     01 20 06 F1 | 	add	local02, #1
22c10     13 13 02 F6 | 	mov	arg01, local05
22c14     12 15 02 F6 | 	mov	arg02, local04
22c18     10 17 02 F6 | 	mov	arg03, local02
22c1c     9C DD BF FD | 	call	#__system____builtin_memmove
22c20                 | LR__3122
22c20     13 FB 01 F6 | 	mov	result1, local05
22c24                 | LR__3123
22c24     A7 F0 03 F6 | 	mov	ptra, fp
22c28     B2 00 A0 FD | 	call	#popregs_
22c2c                 | __system__Right_S_ret
22c2c     2D 00 64 FD | 	ret
22c30                 | 
22c30                 | __system__Mid_S
22c30     05 4A 05 F6 | 	mov	COUNT_, #5
22c34     A8 00 A0 FD | 	call	#pushregs_
22c38     09 1F 02 F6 | 	mov	local01, arg01
22c3c     0A 21 02 F6 | 	mov	local02, arg02
22c40     01 16 56 F2 | 	cmps	arg03, #1 wc
22c44     81 01 00 CF 
22c48     CC FA 05 C6 |  if_b	mov	result1, ##@LR__5015
22c4c     80 00 90 CD |  if_b	jmp	#LR__3133
22c50     01 20 86 F1 | 	sub	local02, #1
22c54     00 20 56 F3 | 	fges	local02, #0 wc
22c58     0F 13 02 F6 | 	mov	arg01, local01
22c5c     09 23 02 F6 | 	mov	local03, arg01
22c60     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22c64                 | LR__3130
22c64     11 FB C9 FA | 	rdbyte	result1, local03 wz
22c68     01 22 06 51 |  if_ne	add	local03, #1
22c6c     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22c70                 | LR__3131
22c70     09 23 82 F1 | 	sub	local03, arg01
22c74     11 FB 01 F6 | 	mov	result1, local03
22c78     FD 14 02 F6 | 	mov	arg02, result1
22c7c     10 15 52 F2 | 	cmps	arg02, local02 wc
22c80     81 01 00 CF 
22c84     CD FA 05 C6 |  if_b	mov	result1, ##@LR__5016
22c88     44 00 90 CD |  if_b	jmp	#LR__3133
22c8c     0A 25 02 F6 | 	mov	local04, arg02
22c90     10 25 82 F1 | 	sub	local04, local02
22c94     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22c98     0B 25 02 16 |  if_a	mov	local04, arg03
22c9c     12 13 02 F6 | 	mov	arg01, local04
22ca0     02 12 06 F1 | 	add	arg01, #2
22ca4     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22ca8     FD 26 0A F6 | 	mov	local05, result1 wz
22cac     1C 00 90 AD |  if_e	jmp	#LR__3132
22cb0     0F 21 02 F1 | 	add	local02, local01
22cb4     13 13 02 F6 | 	mov	arg01, local05
22cb8     10 15 02 F6 | 	mov	arg02, local02
22cbc     12 17 02 F6 | 	mov	arg03, local04
22cc0     F8 DC BF FD | 	call	#__system____builtin_memmove
22cc4     13 25 02 F1 | 	add	local04, local05
22cc8     12 01 48 FC | 	wrbyte	#0, local04
22ccc                 | LR__3132
22ccc     13 FB 01 F6 | 	mov	result1, local05
22cd0                 | LR__3133
22cd0     A7 F0 03 F6 | 	mov	ptra, fp
22cd4     B2 00 A0 FD | 	call	#popregs_
22cd8                 | __system__Mid_S_ret
22cd8     2D 00 64 FD | 	ret
22cdc                 | 
22cdc                 | __system__Chr_S
22cdc     01 4A 05 F6 | 	mov	COUNT_, #1
22ce0     A8 00 A0 FD | 	call	#pushregs_
22ce4     09 1F 02 F6 | 	mov	local01, arg01
22ce8     03 12 06 F6 | 	mov	arg01, #3
22cec     64 1C B0 FD | 	call	#__system___gc_alloc_managed
22cf0     00 FA 4D F2 | 	cmps	result1, #0 wz
22cf4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22cf8     01 FA 05 51 |  if_ne	add	result1, #1
22cfc     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22d00     01 FA 85 51 |  if_ne	sub	result1, #1
22d04     A7 F0 03 F6 | 	mov	ptra, fp
22d08     B2 00 A0 FD | 	call	#popregs_
22d0c                 | __system__Chr_S_ret
22d0c     2D 00 64 FD | 	ret
22d10                 | 
22d10                 | __system__str_S
22d10     02 4A 05 F6 | 	mov	COUNT_, #2
22d14     A8 00 A0 FD | 	call	#pushregs_
22d18     09 1F 02 F6 | 	mov	local01, arg01
22d1c     10 12 06 F6 | 	mov	arg01, #16
22d20     30 1C B0 FD | 	call	#__system___gc_alloc_managed
22d24     FD 20 0A F6 | 	mov	local02, result1 wz
22d28     30 00 90 AD |  if_e	jmp	#LR__3140
22d2c     F8 13 02 F6 | 	mov	arg01, ptra
22d30     08 F0 07 F1 | 	add	ptra, #8
22d34     09 21 62 FC | 	wrlong	local02, arg01
22d38     04 12 06 F1 | 	add	arg01, #4
22d3c     09 01 68 FC | 	wrlong	#0, arg01
22d40     04 12 86 F1 | 	sub	arg01, #4
22d44     00 A8 04 FF 
22d48     00 12 46 F5 | 	or	arg01, ##156237824
22d4c     00 14 06 F6 | 	mov	arg02, #0
22d50     0F 17 02 F6 | 	mov	arg03, local01
22d54     67 18 06 F6 | 	mov	arg04, #103
22d58     90 EE BF FD | 	call	#__system___fmtfloat
22d5c                 | LR__3140
22d5c     10 FB 01 F6 | 	mov	result1, local02
22d60     A7 F0 03 F6 | 	mov	ptra, fp
22d64     B2 00 A0 FD | 	call	#popregs_
22d68                 | __system__str_S_ret
22d68     2D 00 64 FD | 	ret
22d6c                 | 
22d6c                 | __system__Number_S
22d6c     08 4A 05 F6 | 	mov	COUNT_, #8
22d70     A8 00 A0 FD | 	call	#pushregs_
22d74     09 1F 02 F6 | 	mov	local01, arg01
22d78     0A 21 0A F6 | 	mov	local02, arg02 wz
22d7c     0B 23 02 F6 | 	mov	local03, arg03
22d80     3C 00 90 5D |  if_ne	jmp	#LR__3152
22d84     01 20 06 F6 | 	mov	local02, #1
22d88     11 25 02 F6 | 	mov	local04, local03
22d8c     01 26 06 F6 | 	mov	local05, #1
22d90     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22d94                 | LR__3150
22d94     00 28 06 F6 | 	mov	local06, #0
22d98     0F 25 1A F2 | 	cmp	local04, local01 wcz
22d9c     01 28 66 E6 |  if_be	neg	local06, #1
22da0     12 27 12 F2 | 	cmp	local05, local04 wc
22da4     15 2B A2 F1 | 	subx	local07, local07
22da8     15 29 CA F7 | 	test	local06, local07 wz
22dac     11 25 02 5D |  if_ne	qmul	local04, local03
22db0     12 27 02 56 |  if_ne	mov	local05, local04
22db4     01 20 06 51 |  if_ne	add	local02, #1
22db8     18 24 62 5D |  if_ne	getqx	local04
22dbc     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22dc0                 | LR__3151
22dc0                 | LR__3152
22dc0     20 20 36 F3 | 	fle	local02, #32 wc
22dc4     10 13 02 F6 | 	mov	arg01, local02
22dc8     02 12 06 F1 | 	add	arg01, #2
22dcc     84 1B B0 FD | 	call	#__system___gc_alloc_managed
22dd0     FD 28 02 F6 | 	mov	local06, result1
22dd4     10 2B 02 F6 | 	mov	local07, local02
22dd8     14 2B 02 F1 | 	add	local07, local06
22ddc     15 01 48 FC | 	wrbyte	#0, local07
22de0     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22de4                 | LR__3153
22de4     01 20 16 F2 | 	cmp	local02, #1 wc
22de8     2C 00 90 CD |  if_b	jmp	#LR__3155
22dec     11 1F 12 FD | 	qdiv	local01, local03
22df0     01 20 86 F1 | 	sub	local02, #1
22df4     10 2B 02 F6 | 	mov	local07, local02
22df8     14 2B 02 F1 | 	add	local07, local06
22dfc     19 2C 62 FD | 	getqy	local08
22e00     0A 2C 16 F2 | 	cmp	local08, #10 wc
22e04     30 2C 06 C1 |  if_b	add	local08, #48
22e08     37 2C 06 31 |  if_ae	add	local08, #55
22e0c     15 2D 42 FC | 	wrbyte	local08, local07
22e10     18 1E 62 FD | 	getqx	local01
22e14     CC FF 9F FD | 	jmp	#LR__3153
22e18                 | LR__3154
22e18                 | LR__3155
22e18     14 FB 01 F6 | 	mov	result1, local06
22e1c     A7 F0 03 F6 | 	mov	ptra, fp
22e20     B2 00 A0 FD | 	call	#popregs_
22e24                 | __system__Number_S_ret
22e24     2D 00 64 FD | 	ret
22e28                 | 
22e28                 | __system__LCase_S
22e28     07 4A 05 F6 | 	mov	COUNT_, #7
22e2c     A8 00 A0 FD | 	call	#pushregs_
22e30     09 1F 02 F6 | 	mov	local01, arg01
22e34     09 21 02 F6 | 	mov	local02, arg01
22e38     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22e3c                 | LR__3160
22e3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e40     01 20 06 51 |  if_ne	add	local02, #1
22e44     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22e48                 | LR__3161
22e48     09 21 82 F1 | 	sub	local02, arg01
22e4c     10 FB 01 F6 | 	mov	result1, local02
22e50     FD 20 0A F6 | 	mov	local02, result1 wz
22e54     81 01 00 AF 
22e58     CE FA 05 A6 |  if_e	mov	result1, ##@LR__5017
22e5c     7C 00 90 AD |  if_e	jmp	#LR__3167
22e60     10 13 02 F6 | 	mov	arg01, local02
22e64     02 12 06 F1 | 	add	arg01, #2
22e68     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
22e6c     FD 22 0A F6 | 	mov	local03, result1 wz
22e70     64 00 90 AD |  if_e	jmp	#LR__3166
22e74     01 24 66 F6 | 	neg	local04, #1
22e78     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22e7c                 | LR__3162
22e7c     01 24 06 F1 | 	add	local04, #1
22e80     12 27 02 F6 | 	mov	local05, local04
22e84     0F 27 02 F1 | 	add	local05, local01
22e88     13 29 C2 FA | 	rdbyte	local06, local05
22e8c     41 28 56 F2 | 	cmps	local06, #65 wc
22e90     18 00 90 CD |  if_b	jmp	#LR__3163
22e94     5B 28 56 F2 | 	cmps	local06, #91 wc
22e98     12 2B 02 C6 |  if_b	mov	local07, local04
22e9c     11 2B 02 C1 |  if_b	add	local07, local03
22ea0     20 28 06 C1 |  if_b	add	local06, #32
22ea4     15 29 42 CC |  if_b	wrbyte	local06, local07
22ea8     0C 00 90 CD |  if_b	jmp	#LR__3164
22eac                 | LR__3163
22eac     12 2B 02 F6 | 	mov	local07, local04
22eb0     11 2B 02 F1 | 	add	local07, local03
22eb4     15 29 42 FC | 	wrbyte	local06, local07
22eb8                 | LR__3164
22eb8     10 29 02 F6 | 	mov	local06, local02
22ebc     01 28 86 F1 | 	sub	local06, #1
22ec0     14 25 0A F2 | 	cmp	local04, local06 wz
22ec4     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22ec8                 | LR__3165
22ec8     11 21 02 F1 | 	add	local02, local03
22ecc     10 01 48 FC | 	wrbyte	#0, local02
22ed0     11 FB 01 F6 | 	mov	result1, local03
22ed4     04 00 90 FD | 	jmp	#LR__3167
22ed8                 | LR__3166
22ed8     11 FB 01 F6 | 	mov	result1, local03
22edc                 | LR__3167
22edc     A7 F0 03 F6 | 	mov	ptra, fp
22ee0     B2 00 A0 FD | 	call	#popregs_
22ee4                 | __system__LCase_S_ret
22ee4     2D 00 64 FD | 	ret
22ee8                 | 
22ee8                 | __system__LTrim_S
22ee8     05 4A 05 F6 | 	mov	COUNT_, #5
22eec     A8 00 A0 FD | 	call	#pushregs_
22ef0     09 1F 02 F6 | 	mov	local01, arg01
22ef4     09 21 02 F6 | 	mov	local02, arg01
22ef8     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22efc                 | LR__3170
22efc     10 FB C9 FA | 	rdbyte	result1, local02 wz
22f00     01 20 06 51 |  if_ne	add	local02, #1
22f04     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22f08                 | LR__3171
22f08     09 21 82 F1 | 	sub	local02, arg01
22f0c     10 FB 01 F6 | 	mov	result1, local02
22f10     FD 20 0A F6 | 	mov	local02, result1 wz
22f14     81 01 00 AF 
22f18     CF FA 05 A6 |  if_e	mov	result1, ##@LR__5018
22f1c     7C 00 90 AD |  if_e	jmp	#LR__3176
22f20     00 22 06 F6 | 	mov	local03, #0
22f24     10 25 02 F6 | 	mov	local04, local02
22f28                 | LR__3172
22f28     12 23 52 F2 | 	cmps	local03, local04 wc
22f2c     68 00 90 3D |  if_ae	jmp	#LR__3175
22f30     11 17 02 F6 | 	mov	arg03, local03
22f34     0F 17 02 F1 | 	add	arg03, local01
22f38     0B 17 C2 FA | 	rdbyte	arg03, arg03
22f3c     20 16 0E F2 | 	cmp	arg03, #32 wz
22f40     4C 00 90 AD |  if_e	jmp	#LR__3174
22f44     10 13 02 F6 | 	mov	arg01, local02
22f48     11 13 82 F1 | 	sub	arg01, local03
22f4c     02 12 06 F1 | 	add	arg01, #2
22f50     00 1A B0 FD | 	call	#__system___gc_alloc_managed
22f54     FD 26 0A F6 | 	mov	local05, result1 wz
22f58     2C 00 90 AD |  if_e	jmp	#LR__3173
22f5c     11 15 02 F6 | 	mov	arg02, local03
22f60     0F 15 02 F1 | 	add	arg02, local01
22f64     10 17 02 F6 | 	mov	arg03, local02
22f68     11 17 82 F1 | 	sub	arg03, local03
22f6c     13 13 02 F6 | 	mov	arg01, local05
22f70     48 DA BF FD | 	call	#__system____builtin_memmove
22f74     11 21 82 F1 | 	sub	local02, local03
22f78     13 21 02 F1 | 	add	local02, local05
22f7c     10 01 48 FC | 	wrbyte	#0, local02
22f80     13 FB 01 F6 | 	mov	result1, local05
22f84     14 00 90 FD | 	jmp	#LR__3176
22f88                 | LR__3173
22f88     13 FB 01 F6 | 	mov	result1, local05
22f8c     0C 00 90 FD | 	jmp	#LR__3176
22f90                 | LR__3174
22f90     01 22 06 F1 | 	add	local03, #1
22f94     90 FF 9F FD | 	jmp	#LR__3172
22f98                 | LR__3175
22f98     0F FB 01 F6 | 	mov	result1, local01
22f9c                 | LR__3176
22f9c     A7 F0 03 F6 | 	mov	ptra, fp
22fa0     B2 00 A0 FD | 	call	#popregs_
22fa4                 | __system__LTrim_S_ret
22fa4     2D 00 64 FD | 	ret
22fa8                 | 
22fa8                 | __system__RTrim_S
22fa8     04 4A 05 F6 | 	mov	COUNT_, #4
22fac     A8 00 A0 FD | 	call	#pushregs_
22fb0     09 1F 02 F6 | 	mov	local01, arg01
22fb4     09 21 02 F6 | 	mov	local02, arg01
22fb8     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
22fbc                 | LR__3180
22fbc     10 FB C9 FA | 	rdbyte	result1, local02 wz
22fc0     01 20 06 51 |  if_ne	add	local02, #1
22fc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
22fc8                 | LR__3181
22fc8     09 21 82 F1 | 	sub	local02, arg01
22fcc     10 FB 01 F6 | 	mov	result1, local02
22fd0     FD 20 0A F6 | 	mov	local02, result1 wz
22fd4     81 01 00 AF 
22fd8     D0 FA 05 A6 |  if_e	mov	result1, ##@LR__5019
22fdc     74 00 90 AD |  if_e	jmp	#LR__3185
22fe0     10 23 02 F6 | 	mov	local03, local02
22fe4     01 22 86 F1 | 	sub	local03, #1
22fe8                 | LR__3182
22fe8     11 15 02 F6 | 	mov	arg02, local03
22fec     0F 15 02 F1 | 	add	arg02, local01
22ff0     0A 21 C2 FA | 	rdbyte	local02, arg02
22ff4     20 20 0E F2 | 	cmp	local02, #32 wz
22ff8     44 00 90 AD |  if_e	jmp	#LR__3184
22ffc     11 13 02 F6 | 	mov	arg01, local03
23000     02 12 06 F1 | 	add	arg01, #2
23004     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
23008     FD 24 0A F6 | 	mov	local04, result1 wz
2300c     28 00 90 AD |  if_e	jmp	#LR__3183
23010     11 17 02 F6 | 	mov	arg03, local03
23014     01 16 06 F1 | 	add	arg03, #1
23018     12 13 02 F6 | 	mov	arg01, local04
2301c     0F 15 02 F6 | 	mov	arg02, local01
23020     98 D9 BF FD | 	call	#__system____builtin_memmove
23024     01 22 06 F1 | 	add	local03, #1
23028     12 23 02 F1 | 	add	local03, local04
2302c     11 01 48 FC | 	wrbyte	#0, local03
23030     12 FB 01 F6 | 	mov	result1, local04
23034     1C 00 90 FD | 	jmp	#LR__3185
23038                 | LR__3183
23038     12 FB 01 F6 | 	mov	result1, local04
2303c     14 00 90 FD | 	jmp	#LR__3185
23040                 | LR__3184
23040     01 22 86 F1 | 	sub	local03, #1
23044     00 22 56 F2 | 	cmps	local03, #0 wc
23048     9C FF 9F 3D |  if_ae	jmp	#LR__3182
2304c     81 01 00 FF 
23050     D1 FA 05 F6 | 	mov	result1, ##@LR__5020
23054                 | LR__3185
23054     A7 F0 03 F6 | 	mov	ptra, fp
23058     B2 00 A0 FD | 	call	#popregs_
2305c                 | __system__RTrim_S_ret
2305c     2D 00 64 FD | 	ret
23060                 | 
23060                 | __system__Instr
23060     07 4A 05 F6 | 	mov	COUNT_, #7
23064     A8 00 A0 FD | 	call	#pushregs_
23068     09 1F 02 F6 | 	mov	local01, arg01
2306c     0A 21 02 F6 | 	mov	local02, arg02
23070     0B 23 02 F6 | 	mov	local03, arg03
23074     11 13 02 F6 | 	mov	arg01, local03
23078     09 25 02 F6 | 	mov	local04, arg01
2307c     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
23080                 | LR__3190
23080     12 FB C9 FA | 	rdbyte	result1, local04 wz
23084     01 24 06 51 |  if_ne	add	local04, #1
23088     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
2308c                 | LR__3191
2308c     09 25 82 F1 | 	sub	local04, arg01
23090     12 27 02 F6 | 	mov	local05, local04
23094     10 13 02 F6 | 	mov	arg01, local02
23098     09 25 02 F6 | 	mov	local04, arg01
2309c     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
230a0                 | LR__3192
230a0     12 FB C9 FA | 	rdbyte	result1, local04 wz
230a4     01 24 06 51 |  if_ne	add	local04, #1
230a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
230ac                 | LR__3193
230ac     09 25 82 F1 | 	sub	local04, arg01
230b0     12 FB 01 F6 | 	mov	result1, local04
230b4     FD 18 0A F6 | 	mov	arg04, result1 wz
230b8     00 FA 05 A6 |  if_e	mov	result1, #0
230bc     98 00 90 AD |  if_e	jmp	#LR__3197
230c0     00 26 0E F2 | 	cmp	local05, #0 wz
230c4     00 FA 05 A6 |  if_e	mov	result1, #0
230c8     8C 00 90 AD |  if_e	jmp	#LR__3197
230cc     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
230d0     00 FA 05 16 |  if_a	mov	result1, #0
230d4     80 00 90 1D |  if_a	jmp	#LR__3197
230d8     01 1E 56 F2 | 	cmps	local01, #1 wc
230dc     01 1E 06 C6 |  if_b	mov	local01, #1
230e0     11 29 C2 FA | 	rdbyte	local06, local03
230e4     01 26 0E F2 | 	cmp	local05, #1 wz
230e8     18 00 90 5D |  if_ne	jmp	#LR__3194
230ec     10 13 02 F6 | 	mov	arg01, local02
230f0     14 15 02 F6 | 	mov	arg02, local06
230f4     0F 17 02 F6 | 	mov	arg03, local01
230f8     00 18 06 F6 | 	mov	arg04, #0
230fc     2C 34 B0 FD | 	call	#__system____ScanForChar
23100     54 00 90 FD | 	jmp	#LR__3197
23104                 | LR__3194
23104     0F 2B 02 F6 | 	mov	local07, local01
23108                 | LR__3195
23108     10 13 02 F6 | 	mov	arg01, local02
2310c     14 15 02 F6 | 	mov	arg02, local06
23110     15 17 02 F6 | 	mov	arg03, local07
23114     00 18 06 F6 | 	mov	arg04, #0
23118     10 34 B0 FD | 	call	#__system____ScanForChar
2311c     FD 2A 0A F6 | 	mov	local07, result1 wz
23120     30 00 90 AD |  if_e	jmp	#LR__3196
23124     13 17 02 F6 | 	mov	arg03, local05
23128     10 13 02 F6 | 	mov	arg01, local02
2312c     15 15 02 F6 | 	mov	arg02, local07
23130     FC FA BF FD | 	call	#__system__Mid_S
23134     FD 12 02 F6 | 	mov	arg01, result1
23138     11 15 02 F6 | 	mov	arg02, local03
2313c     84 D9 BF FD | 	call	#__system___string_cmp
23140     00 FA 0D F2 | 	cmp	result1, #0 wz
23144     15 FB 01 A6 |  if_e	mov	result1, local07
23148     0C 00 90 AD |  if_e	jmp	#LR__3197
2314c     13 2B 02 F1 | 	add	local07, local05
23150     B4 FF 9F FD | 	jmp	#LR__3195
23154                 | LR__3196
23154     00 FA 05 F6 | 	mov	result1, #0
23158                 | LR__3197
23158     A7 F0 03 F6 | 	mov	ptra, fp
2315c     B2 00 A0 FD | 	call	#popregs_
23160                 | __system__Instr_ret
23160     2D 00 64 FD | 	ret
23164                 | 
23164                 | __system___strerror
23164     00 12 56 F2 | 	cmps	arg01, #0 wc
23168     08 00 90 CD |  if_b	jmp	#LR__3200
2316c     1A 12 56 F2 | 	cmps	arg01, #26 wc
23170     04 00 90 CD |  if_b	jmp	#LR__3201
23174                 | LR__3200
23174     19 12 06 F6 | 	mov	arg01, #25
23178                 | LR__3201
23178     02 12 66 F0 | 	shl	arg01, #2
2317c     01 00 00 FF 
23180     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23184     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23188     09 FB 01 FB | 	rdlong	result1, arg01
2318c     01 00 00 FF 
23190     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23194                 | __system___strerror_ret
23194     2D 00 64 FD | 	ret
23198                 | 
23198                 | __system___int64_shl
23198     20 16 CE F7 | 	test	arg03, #32 wz
2319c     09 15 02 56 |  if_ne	mov	arg02, arg01
231a0     00 12 06 56 |  if_ne	mov	arg01, #0
231a4     1F 16 CE F7 | 	test	arg03, #31 wz
231a8     18 00 90 AD |  if_e	jmp	#LR__3210
231ac     0B 15 62 F0 | 	shl	arg02, arg03
231b0     09 FB 01 F6 | 	mov	result1, arg01
231b4     0B FD 61 F6 | 	neg	result2, arg03
231b8     FE FA 41 F0 | 	shr	result1, result2
231bc     FD 14 42 F5 | 	or	arg02, result1
231c0     0B 13 62 F0 | 	shl	arg01, arg03
231c4                 | LR__3210
231c4     0A FD 01 F6 | 	mov	result2, arg02
231c8     09 FB 01 F6 | 	mov	result1, arg01
231cc                 | __system___int64_shl_ret
231cc     2D 00 64 FD | 	ret
231d0                 | 
231d0                 | __system___usepins
231d0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
231d4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
231d8     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
231dc     00 13 CA F7 | 	test	arg01, _var01 wz
231e0     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
231e4     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
231e8     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
231ec     01 15 CA A7 |  if_e	test	arg02, _var02 wz
231f0     00 FA 05 56 |  if_ne	mov	result1, #0
231f4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
231f8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
231fc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23200     09 03 42 F5 | 	or	_var02, arg01
23204     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23208     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2320c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23210     0A 03 42 F5 | 	or	_var02, arg02
23214     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23218     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2321c     01 FA 65 F6 | 	neg	result1, #1
23220                 | __system___usepins_ret
23220     2D 00 64 FD | 	ret
23224                 | 
23224                 | __system___freepins
23224     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23228     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2322c     09 01 22 F5 | 	andn	_var01, arg01
23230     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23234     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23238     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2323c     0A 01 22 F5 | 	andn	_var01, arg02
23240     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23244     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23248                 | __system___freepins_ret
23248     2D 00 64 FD | 	ret
2324c                 | 
2324c                 | __system___float_fromuns
2324c     09 17 0A F6 | 	mov	arg03, arg01 wz
23250     0B FB 01 A6 |  if_e	mov	result1, arg03
23254     24 00 90 AD |  if_e	jmp	#LR__3220
23258     0B 15 92 F7 | 	encod	arg02, arg03 wc
2325c     01 14 06 C1 |  if_b	add	arg02, #1
23260     01 14 86 F1 | 	sub	arg02, #1
23264     1F 12 06 F6 | 	mov	arg01, #31
23268     0A 13 82 F1 | 	sub	arg01, arg02
2326c     09 17 62 F0 | 	shl	arg03, arg01
23270     02 16 46 F0 | 	shr	arg03, #2
23274     00 12 06 F6 | 	mov	arg01, #0
23278     4C 09 B0 FD | 	call	#__system___float_Pack
2327c                 | LR__3220
2327c                 | __system___float_fromuns_ret
2327c     2D 00 64 FD | 	ret
23280                 | 
23280                 | __system___float_add
23280     0F 4A 05 F6 | 	mov	COUNT_, #15
23284     A8 00 A0 FD | 	call	#pushregs_
23288     09 1F 02 F6 | 	mov	local01, arg01
2328c     0A 21 02 F6 | 	mov	local02, arg02
23290     00 22 06 F6 | 	mov	local03, #0
23294     0F 25 02 F6 | 	mov	local04, local01
23298     12 27 02 F6 | 	mov	local05, local04
2329c     16 26 46 F7 | 	zerox	local05, #22
232a0     12 29 02 F6 | 	mov	local06, local04
232a4     01 28 66 F0 | 	shl	local06, #1
232a8     18 28 46 F0 | 	shr	local06, #24
232ac     1F 24 46 F0 | 	shr	local04, #31
232b0     10 13 02 F6 | 	mov	arg01, local02
232b4     09 FB 01 F6 | 	mov	result1, arg01
232b8     FD 2A 02 F6 | 	mov	local07, result1
232bc     15 2D 02 F6 | 	mov	local08, local07
232c0     16 2C 46 F7 | 	zerox	local08, #22
232c4     15 2F 02 F6 | 	mov	local09, local07
232c8     01 2E 66 F0 | 	shl	local09, #1
232cc     18 2E 46 F0 | 	shr	local09, #24
232d0     17 31 02 F6 | 	mov	local10, local09
232d4     1F 2A 46 F0 | 	shr	local07, #31
232d8     00 32 06 F6 | 	mov	local11, #0
232dc     00 34 06 F6 | 	mov	local12, #0
232e0     18 29 12 F2 | 	cmp	local06, local10 wc
232e4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
232e8     2C 00 90 1D |  if_a	jmp	#LR__3230
232ec     16 27 12 32 |  if_ae	cmp	local05, local08 wc
232f0     24 00 90 3D |  if_ae	jmp	#LR__3230
232f4     13 37 02 F6 | 	mov	local13, local05
232f8     16 27 02 F6 | 	mov	local05, local08
232fc     1B 2D 02 F6 | 	mov	local08, local13
23300     14 37 02 F6 | 	mov	local13, local06
23304     18 29 02 F6 | 	mov	local06, local10
23308     1B 31 02 F6 | 	mov	local10, local13
2330c     12 37 02 F6 | 	mov	local13, local04
23310     15 25 02 F6 | 	mov	local04, local07
23314     1B 2B 02 F6 | 	mov	local07, local13
23318                 | LR__3230
23318     FF 28 0E F2 | 	cmp	local06, #255 wz
2331c     70 01 90 AD |  if_e	jmp	#LR__3245
23320     00 28 0E F2 | 	cmp	local06, #0 wz
23324     AC 01 90 AD |  if_e	jmp	#LR__3247
23328     17 26 26 F4 | 	bith	local05, #23
2332c                 | LR__3231
2332c     00 30 0E F2 | 	cmp	local10, #0 wz
23330     F0 01 90 AD |  if_e	jmp	#LR__3251
23334     17 2C 26 F4 | 	bith	local08, #23
23338                 | LR__3232
23338     7F 28 86 F1 | 	sub	local06, #127
2333c     7F 30 86 F1 | 	sub	local10, #127
23340     14 39 02 F6 | 	mov	local14, local06
23344     18 39 82 F1 | 	sub	local14, local10
23348     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
2334c                 | LR__3233
2334c     20 38 56 F2 | 	cmps	local14, #32 wc
23350     20 00 90 CD |  if_b	jmp	#LR__3235
23354     16 2F 02 F6 | 	mov	local09, local08
23358     00 32 0E F2 | 	cmp	local11, #0 wz
2335c     6F 32 62 FD | 	wrnz	local11
23360     19 2F 42 F5 | 	or	local09, local11
23364     17 33 02 F6 | 	mov	local11, local09
23368     00 2C 06 F6 | 	mov	local08, #0
2336c     20 38 86 F1 | 	sub	local14, #32
23370     D8 FF 9F FD | 	jmp	#LR__3233
23374                 | LR__3234
23374                 | LR__3235
23374     00 38 0E F2 | 	cmp	local14, #0 wz
23378     38 00 90 AD |  if_e	jmp	#LR__3236
2337c     16 37 02 F6 | 	mov	local13, local08
23380     20 30 06 F6 | 	mov	local10, #32
23384     1C 31 82 F1 | 	sub	local10, local14
23388     18 37 62 F0 | 	shl	local13, local10
2338c     19 31 02 F6 | 	mov	local10, local11
23390     20 2E 06 F6 | 	mov	local09, #32
23394     1C 2F 82 F1 | 	sub	local09, local14
23398     17 31 6A F0 | 	shl	local10, local09 wz
2339c     1C 33 42 F0 | 	shr	local11, local14
233a0     1C 2D 42 F0 | 	shr	local08, local14
233a4     1B 33 42 F5 | 	or	local11, local13
233a8     00 3A 06 F6 | 	mov	local15, #0
233ac     01 3A 06 56 |  if_ne	mov	local15, #1
233b0     1D 33 42 F5 | 	or	local11, local15
233b4                 | LR__3236
233b4     12 3B 02 F6 | 	mov	local15, local04
233b8     15 3B 62 F5 | 	xor	local15, local07
233bc     01 3A CE F7 | 	test	local15, #1 wz
233c0     18 00 90 AD |  if_e	jmp	#LR__3237
233c4     16 2D 22 F6 | 	not	local08, local08
233c8     19 33 22 F6 | 	not	local11, local11
233cc     01 32 0E F1 | 	add	local11, #1 wz
233d0     00 3A 06 F6 | 	mov	local15, #0
233d4     01 3A 06 A6 |  if_e	mov	local15, #1
233d8     1D 2D 02 F1 | 	add	local08, local15
233dc                 | LR__3237
233dc     19 35 12 F1 | 	add	local12, local11 wc
233e0     16 27 22 F1 | 	addx	local05, local08
233e4     00 26 56 F2 | 	cmps	local05, #0 wc
233e8     1C 00 90 3D |  if_ae	jmp	#LR__3238
233ec     01 24 66 F5 | 	xor	local04, #1
233f0     13 27 22 F6 | 	not	local05, local05
233f4     1A 35 22 F6 | 	not	local12, local12
233f8     01 34 0E F1 | 	add	local12, #1 wz
233fc     00 3A 06 F6 | 	mov	local15, #0
23400     01 3A 06 A6 |  if_e	mov	local15, #1
23404     1D 27 02 F1 | 	add	local05, local15
23408                 | LR__3238
23408     00 80 00 FF 
2340c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
23410     28 00 90 CD |  if_b	jmp	#LR__3239
23414     01 28 06 F1 | 	add	local06, #1
23418     1A 39 02 F6 | 	mov	local14, local12
2341c     01 38 06 F5 | 	and	local14, #1
23420     01 34 46 F0 | 	shr	local12, #1
23424     13 3B 02 F6 | 	mov	local15, local05
23428     1F 3A 66 F0 | 	shl	local15, #31
2342c     1D 35 42 F5 | 	or	local12, local15
23430     1C 35 42 F5 | 	or	local12, local14
23434     01 26 46 F0 | 	shr	local05, #1
23438     3C 00 90 FD | 	jmp	#LR__3244
2343c                 | LR__3239
2343c     00 40 00 FF 
23440     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23444     30 00 90 3D |  if_ae	jmp	#LR__3243
23448     00 26 0E F2 | 	cmp	local05, #0 wz
2344c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
23450     08 24 46 A5 |  if_e	or	local04, #8
23454     01 24 26 A5 |  if_e	andn	local04, #1
23458     1C 00 90 AD |  if_e	jmp	#LR__3242
2345c                 | LR__3240
2345c     00 40 00 FF 
23460     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23464     10 00 90 3D |  if_ae	jmp	#LR__3241
23468     1A 35 12 F1 | 	add	local12, local12 wc
2346c     13 27 22 F1 | 	addx	local05, local05
23470     01 28 86 F1 | 	sub	local06, #1
23474     E4 FF 9F FD | 	jmp	#LR__3240
23478                 | LR__3241
23478                 | LR__3242
23478                 | LR__3243
23478                 | LR__3244
23478     13 13 02 F6 | 	mov	arg01, local05
2347c     1A 15 02 F6 | 	mov	arg02, local12
23480     14 17 02 F6 | 	mov	arg03, local06
23484     12 19 02 F6 | 	mov	arg04, local04
23488     E4 34 B0 FD | 	call	#__system__pack_0606
2348c     DC 00 90 FD | 	jmp	#LR__3255
23490                 | LR__3245
23490     FF 30 0E F2 | 	cmp	local10, #255 wz
23494     10 00 90 5D |  if_ne	jmp	#LR__3246
23498     12 2B 0A F2 | 	cmp	local07, local04 wz
2349c     00 F8 3F 5F 
234a0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
234a4     C4 00 90 5D |  if_ne	jmp	#LR__3255
234a8                 | LR__3246
234a8     00 26 0E F2 | 	cmp	local05, #0 wz
234ac     00 F8 3F 5F 
234b0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
234b4     B4 00 90 5D |  if_ne	jmp	#LR__3255
234b8     1A 15 02 F6 | 	mov	arg02, local12
234bc     14 17 02 F6 | 	mov	arg03, local06
234c0     12 19 02 F6 | 	mov	arg04, local04
234c4     02 18 46 F5 | 	or	arg04, #2
234c8     13 13 02 F6 | 	mov	arg01, local05
234cc     A0 34 B0 FD | 	call	#__system__pack_0606
234d0     98 00 90 FD | 	jmp	#LR__3255
234d4                 | LR__3247
234d4     00 26 0E F2 | 	cmp	local05, #0 wz
234d8     28 00 90 AD |  if_e	jmp	#LR__3250
234dc     01 26 66 F0 | 	shl	local05, #1
234e0     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
234e4                 | LR__3248
234e4     00 40 00 FF 
234e8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
234ec     14 3B 02 C6 |  if_b	mov	local15, local06
234f0     01 3A 86 C1 |  if_b	sub	local15, #1
234f4     1D 29 02 C6 |  if_b	mov	local06, local15
234f8     01 26 66 C0 |  if_b	shl	local05, #1
234fc     E4 FF 9F CD |  if_b	jmp	#LR__3248
23500                 | LR__3249
23500     28 FE 9F FD | 	jmp	#LR__3231
23504                 | LR__3250
23504     15 25 02 F5 | 	and	local04, local07
23508     12 19 02 F6 | 	mov	arg04, local04
2350c     08 18 46 F5 | 	or	arg04, #8
23510     00 12 06 F6 | 	mov	arg01, #0
23514     00 14 06 F6 | 	mov	arg02, #0
23518     00 16 06 F6 | 	mov	arg03, #0
2351c     50 34 B0 FD | 	call	#__system__pack_0606
23520     48 00 90 FD | 	jmp	#LR__3255
23524                 | LR__3251
23524     00 2C 0E F2 | 	cmp	local08, #0 wz
23528     28 00 90 AD |  if_e	jmp	#LR__3254
2352c     01 2C 66 F0 | 	shl	local08, #1
23530     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
23534                 | LR__3252
23534     00 40 00 FF 
23538     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
2353c     18 3B 02 C6 |  if_b	mov	local15, local10
23540     01 3A 86 C1 |  if_b	sub	local15, #1
23544     1D 31 02 C6 |  if_b	mov	local10, local15
23548     01 2C 66 C0 |  if_b	shl	local08, #1
2354c     E4 FF 9F CD |  if_b	jmp	#LR__3252
23550                 | LR__3253
23550     E4 FD 9F FD | 	jmp	#LR__3232
23554                 | LR__3254
23554     7F 28 86 F1 | 	sub	local06, #127
23558     13 13 02 F6 | 	mov	arg01, local05
2355c     1A 15 02 F6 | 	mov	arg02, local12
23560     14 17 02 F6 | 	mov	arg03, local06
23564     12 19 02 F6 | 	mov	arg04, local04
23568     04 34 B0 FD | 	call	#__system__pack_0606
2356c                 | LR__3255
2356c     A7 F0 03 F6 | 	mov	ptra, fp
23570     B2 00 A0 FD | 	call	#popregs_
23574                 | __system___float_add_ret
23574     2D 00 64 FD | 	ret
23578                 | 
23578                 | __system___float_sqrt
23578     04 4A 05 F6 | 	mov	COUNT_, #4
2357c     A8 00 A0 FD | 	call	#pushregs_
23580     09 1F 02 F6 | 	mov	local01, arg01
23584     09 FB 01 F6 | 	mov	result1, arg01
23588     FD 20 02 F6 | 	mov	local02, result1
2358c     10 23 02 F6 | 	mov	local03, local02
23590     16 22 46 F7 | 	zerox	local03, #22
23594     10 25 02 F6 | 	mov	local04, local02
23598     01 24 66 F0 | 	shl	local04, #1
2359c     18 24 4E F0 | 	shr	local04, #24 wz
235a0     1F 20 46 F0 | 	shr	local02, #31
235a4     70 00 90 AD |  if_e	jmp	#LR__3261
235a8     17 22 26 F4 | 	bith	local03, #23
235ac                 | LR__3260
235ac     00 20 0E F2 | 	cmp	local02, #0 wz
235b0     00 F8 3F 5F 
235b4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
235b8     88 00 90 5D |  if_ne	jmp	#LR__3264
235bc     FF 24 0E F2 | 	cmp	local04, #255 wz
235c0     0F FB 01 A6 |  if_e	mov	result1, local01
235c4     7C 00 90 AD |  if_e	jmp	#LR__3264
235c8     7F 24 86 F1 | 	sub	local04, #127
235cc     01 24 CE F7 | 	test	local04, #1 wz
235d0     01 22 66 50 |  if_ne	shl	local03, #1
235d4     05 22 66 F0 | 	shl	local03, #5
235d8     11 01 38 FD | 	qsqrt	#0, local03
235dc     01 24 86 51 |  if_ne	sub	local04, #1
235e0     12 25 52 F6 | 	abs	local04, local04 wc
235e4     01 24 46 F0 | 	shr	local04, #1
235e8     12 17 82 F6 | 	negc	arg03, local04
235ec     10 19 02 F6 | 	mov	arg04, local02
235f0     18 12 62 FD | 	getqx	arg01
235f4     09 15 02 F6 | 	mov	arg02, arg01
235f8     19 14 66 F0 | 	shl	arg02, #25
235fc     07 12 46 F0 | 	shr	arg01, #7
23600     00 80 00 FF 
23604     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23608     01 16 06 31 |  if_ae	add	arg03, #1
2360c     01 12 46 30 |  if_ae	shr	arg01, #1
23610     5C 33 B0 FD | 	call	#__system__pack_0606
23614     2C 00 90 FD | 	jmp	#LR__3264
23618                 | LR__3261
23618     00 22 0E F2 | 	cmp	local03, #0 wz
2361c     0F FB 01 A6 |  if_e	mov	result1, local01
23620     20 00 90 AD |  if_e	jmp	#LR__3264
23624     01 22 66 F0 | 	shl	local03, #1
23628     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
2362c                 | LR__3262
2362c     00 40 00 FF 
23630     00 22 16 F2 | 	cmp	local03, ##8388608 wc
23634     01 24 86 C1 |  if_b	sub	local04, #1
23638     01 22 66 C0 |  if_b	shl	local03, #1
2363c     EC FF 9F CD |  if_b	jmp	#LR__3262
23640                 | LR__3263
23640     68 FF 9F FD | 	jmp	#LR__3260
23644                 | LR__3264
23644     A7 F0 03 F6 | 	mov	ptra, fp
23648     B2 00 A0 FD | 	call	#popregs_
2364c                 | __system___float_sqrt_ret
2364c     2D 00 64 FD | 	ret
23650                 | 
23650                 | __system___float_mul
23650     0B 4A 05 F6 | 	mov	COUNT_, #11
23654     A8 00 A0 FD | 	call	#pushregs_
23658     09 1F 02 F6 | 	mov	local01, arg01
2365c     0A 21 02 F6 | 	mov	local02, arg02
23660     0F 23 02 F6 | 	mov	local03, local01
23664     11 25 02 F6 | 	mov	local04, local03
23668     16 24 46 F7 | 	zerox	local04, #22
2366c     11 27 02 F6 | 	mov	local05, local03
23670     01 26 66 F0 | 	shl	local05, #1
23674     18 26 46 F0 | 	shr	local05, #24
23678     1F 22 46 F0 | 	shr	local03, #31
2367c     10 FB 01 F6 | 	mov	result1, local02
23680     FD 28 02 F6 | 	mov	local06, result1
23684     14 2B 02 F6 | 	mov	local07, local06
23688     16 2A 46 F7 | 	zerox	local07, #22
2368c     14 2D 02 F6 | 	mov	local08, local06
23690     01 2C 66 F0 | 	shl	local08, #1
23694     18 2C 46 F0 | 	shr	local08, #24
23698     1F 28 46 F0 | 	shr	local06, #31
2369c     14 23 62 F5 | 	xor	local03, local06
236a0     FF 26 0E F2 | 	cmp	local05, #255 wz
236a4     90 00 90 AD |  if_e	jmp	#LR__3273
236a8     FF 2C 0E F2 | 	cmp	local08, #255 wz
236ac     D8 00 90 AD |  if_e	jmp	#LR__3275
236b0     00 26 0E F2 | 	cmp	local05, #0 wz
236b4     0C 01 90 AD |  if_e	jmp	#LR__3276
236b8     17 24 26 F4 | 	bith	local04, #23
236bc                 | LR__3270
236bc     00 2C 0E F2 | 	cmp	local08, #0 wz
236c0     44 01 90 AD |  if_e	jmp	#LR__3280
236c4     17 2A 26 F4 | 	bith	local07, #23
236c8                 | LR__3271
236c8     12 21 02 F6 | 	mov	local02, local04
236cc     04 20 66 F0 | 	shl	local02, #4
236d0     15 29 02 F6 | 	mov	local06, local07
236d4     05 28 66 F0 | 	shl	local06, #5
236d8     14 21 02 FD | 	qmul	local02, local06
236dc     16 27 02 F1 | 	add	local05, local08
236e0     FE 26 86 F1 | 	sub	local05, #254
236e4     13 2F 02 F6 | 	mov	local09, local05
236e8     04 24 66 F0 | 	shl	local04, #4
236ec     05 2A 66 F0 | 	shl	local07, #5
236f0     18 30 62 FD | 	getqx	local10
236f4     15 25 02 FD | 	qmul	local04, local07
236f8     19 32 62 FD | 	getqy	local11
236fc     00 80 00 FF 
23700     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23704     18 00 90 CD |  if_b	jmp	#LR__3272
23708     01 2E 06 F1 | 	add	local09, #1
2370c     01 30 46 F0 | 	shr	local10, #1
23710     19 2D 02 F6 | 	mov	local08, local11
23714     1F 2C 66 F0 | 	shl	local08, #31
23718     16 31 42 F5 | 	or	local10, local08
2371c     01 32 46 F0 | 	shr	local11, #1
23720                 | LR__3272
23720     19 13 02 F6 | 	mov	arg01, local11
23724     18 15 02 F6 | 	mov	arg02, local10
23728     17 17 02 F6 | 	mov	arg03, local09
2372c     11 19 02 F6 | 	mov	arg04, local03
23730     3C 32 B0 FD | 	call	#__system__pack_0606
23734     10 01 90 FD | 	jmp	#LR__3284
23738                 | LR__3273
23738     00 24 0E F2 | 	cmp	local04, #0 wz
2373c     0F FB 01 56 |  if_ne	mov	result1, local01
23740     04 01 90 5D |  if_ne	jmp	#LR__3284
23744     FF 2C 56 F2 | 	cmps	local08, #255 wc
23748     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
2374c     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
23750     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
23754     00 F8 3F CF 
23758     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2375c     E8 00 90 CD |  if_b	jmp	#LR__3284
23760     00 2A 0E F2 | 	cmp	local07, #0 wz
23764     10 FB 01 56 |  if_ne	mov	result1, local02
23768     DC 00 90 5D |  if_ne	jmp	#LR__3284
2376c                 | LR__3274
2376c     02 22 46 F5 | 	or	local03, #2
23770     00 12 06 F6 | 	mov	arg01, #0
23774     00 14 06 F6 | 	mov	arg02, #0
23778     13 17 02 F6 | 	mov	arg03, local05
2377c     11 19 02 F6 | 	mov	arg04, local03
23780     EC 31 B0 FD | 	call	#__system__pack_0606
23784     C0 00 90 FD | 	jmp	#LR__3284
23788                 | LR__3275
23788     00 26 0E F2 | 	cmp	local05, #0 wz
2378c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23790     00 F8 3F AF 
23794     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23798     AC 00 90 AD |  if_e	jmp	#LR__3284
2379c     00 2A 0E F2 | 	cmp	local07, #0 wz
237a0     10 FB 01 56 |  if_ne	mov	result1, local02
237a4     A0 00 90 5D |  if_ne	jmp	#LR__3284
237a8     16 17 02 F6 | 	mov	arg03, local08
237ac     11 19 02 F6 | 	mov	arg04, local03
237b0     02 18 46 F5 | 	or	arg04, #2
237b4     00 12 06 F6 | 	mov	arg01, #0
237b8     00 14 06 F6 | 	mov	arg02, #0
237bc     B0 31 B0 FD | 	call	#__system__pack_0606
237c0     84 00 90 FD | 	jmp	#LR__3284
237c4                 | LR__3276
237c4     00 24 0E F2 | 	cmp	local04, #0 wz
237c8     20 00 90 AD |  if_e	jmp	#LR__3279
237cc     01 24 66 F0 | 	shl	local04, #1
237d0     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
237d4                 | LR__3277
237d4     00 40 00 FF 
237d8     00 24 16 F2 | 	cmp	local04, ##8388608 wc
237dc     01 26 86 C1 |  if_b	sub	local05, #1
237e0     01 24 66 C0 |  if_b	shl	local04, #1
237e4     EC FF 9F CD |  if_b	jmp	#LR__3277
237e8                 | LR__3278
237e8     D0 FE 9F FD | 	jmp	#LR__3270
237ec                 | LR__3279
237ec     08 22 46 F5 | 	or	local03, #8
237f0     00 12 06 F6 | 	mov	arg01, #0
237f4     00 14 06 F6 | 	mov	arg02, #0
237f8     00 16 06 F6 | 	mov	arg03, #0
237fc     11 19 02 F6 | 	mov	arg04, local03
23800     6C 31 B0 FD | 	call	#__system__pack_0606
23804     40 00 90 FD | 	jmp	#LR__3284
23808                 | LR__3280
23808     00 2A 0E F2 | 	cmp	local07, #0 wz
2380c     20 00 90 AD |  if_e	jmp	#LR__3283
23810     01 2A 66 F0 | 	shl	local07, #1
23814     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
23818                 | LR__3281
23818     00 40 00 FF 
2381c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
23820     01 2C 86 C1 |  if_b	sub	local08, #1
23824     01 2A 66 C0 |  if_b	shl	local07, #1
23828     EC FF 9F CD |  if_b	jmp	#LR__3281
2382c                 | LR__3282
2382c     98 FE 9F FD | 	jmp	#LR__3271
23830                 | LR__3283
23830     08 22 46 F5 | 	or	local03, #8
23834     00 12 06 F6 | 	mov	arg01, #0
23838     00 14 06 F6 | 	mov	arg02, #0
2383c     00 16 06 F6 | 	mov	arg03, #0
23840     11 19 02 F6 | 	mov	arg04, local03
23844     28 31 B0 FD | 	call	#__system__pack_0606
23848                 | LR__3284
23848     A7 F0 03 F6 | 	mov	ptra, fp
2384c     B2 00 A0 FD | 	call	#popregs_
23850                 | __system___float_mul_ret
23850     2D 00 64 FD | 	ret
23854                 | 
23854                 | __system___float_div
23854     0E 4A 05 F6 | 	mov	COUNT_, #14
23858     A8 00 A0 FD | 	call	#pushregs_
2385c     09 23 02 F6 | 	mov	local03, arg01
23860     0A 25 02 F6 | 	mov	local04, arg02
23864     11 27 02 F6 | 	mov	local05, local03
23868     13 29 02 F6 | 	mov	local06, local05
2386c     16 28 46 F7 | 	zerox	local06, #22
23870     13 2B 02 F6 | 	mov	local07, local05
23874     01 2A 66 F0 | 	shl	local07, #1
23878     18 2A 46 F0 | 	shr	local07, #24
2387c     1F 26 46 F0 | 	shr	local05, #31
23880     12 FB 01 F6 | 	mov	result1, local04
23884     FD 2C 02 F6 | 	mov	local08, result1
23888     16 2F 02 F6 | 	mov	local09, local08
2388c     16 2E 46 F7 | 	zerox	local09, #22
23890     16 31 02 F6 | 	mov	local10, local08
23894     01 30 66 F0 | 	shl	local10, #1
23898     18 30 46 F0 | 	shr	local10, #24
2389c     1F 2C 46 F0 | 	shr	local08, #31
238a0     16 27 62 F5 | 	xor	local05, local08
238a4     FF 2A 0E F2 | 	cmp	local07, #255 wz
238a8     D4 00 90 AD |  if_e	jmp	#LR__3295
238ac     FF 30 0E F2 | 	cmp	local10, #255 wz
238b0     04 01 90 AD |  if_e	jmp	#LR__3296
238b4     00 2A 0E F2 | 	cmp	local07, #0 wz
238b8     24 01 90 AD |  if_e	jmp	#LR__3297
238bc     17 28 26 F4 | 	bith	local06, #23
238c0                 | LR__3290
238c0     00 30 0E F2 | 	cmp	local10, #0 wz
238c4     70 01 90 AD |  if_e	jmp	#LR__3301
238c8     17 2E 26 F4 | 	bith	local09, #23
238cc                 | LR__3291
238cc     18 2B 82 F1 | 	sub	local07, local10
238d0     15 33 02 F6 | 	mov	local11, local07
238d4     14 13 02 F6 | 	mov	arg01, local06
238d8     02 12 46 F0 | 	shr	arg01, #2
238dc     1E 28 66 F0 | 	shl	local06, #30
238e0     14 15 02 F6 | 	mov	arg02, local06
238e4     17 17 02 F6 | 	mov	arg03, local09
238e8     28 12 62 FD | 	setq	arg01
238ec     0B 15 12 FD | 	qdiv	arg02, arg03
238f0     00 34 06 F6 | 	mov	local12, #0
238f4     18 1E 62 FD | 	getqx	local01
238f8     19 FC 61 FD | 	getqy	result2
238fc     FE 20 02 F6 | 	mov	local02, result2
23900     0F 37 02 F6 | 	mov	local13, local01
23904     00 20 4E F2 | 	cmps	local02, #0 wz
23908     1B 39 02 F6 | 	mov	local14, local13
2390c     19 38 66 F0 | 	shl	local14, #25
23910     01 34 06 56 |  if_ne	mov	local12, #1
23914     1A 39 42 F5 | 	or	local14, local12
23918     07 36 46 F0 | 	shr	local13, #7
2391c     00 80 00 FF 
23920     00 36 16 F2 | 	cmp	local13, ##16777216 wc
23924     1C 00 90 CD |  if_b	jmp	#LR__3292
23928     01 32 06 F1 | 	add	local11, #1
2392c     01 38 46 F0 | 	shr	local14, #1
23930     1B 35 02 F6 | 	mov	local12, local13
23934     1F 34 66 F0 | 	shl	local12, #31
23938     1A 39 42 F5 | 	or	local14, local12
2393c     01 36 46 F0 | 	shr	local13, #1
23940     24 00 90 FD | 	jmp	#LR__3294
23944                 | LR__3292
23944     00 40 00 FF 
23948     00 36 16 F2 | 	cmp	local13, ##8388608 wc
2394c     18 00 90 3D |  if_ae	jmp	#LR__3293
23950     01 32 86 F1 | 	sub	local11, #1
23954     01 36 66 F0 | 	shl	local13, #1
23958     1C 35 02 F6 | 	mov	local12, local14
2395c     1F 34 46 F0 | 	shr	local12, #31
23960     1A 37 42 F5 | 	or	local13, local12
23964     01 38 66 F0 | 	shl	local14, #1
23968                 | LR__3293
23968                 | LR__3294
23968     1B 13 02 F6 | 	mov	arg01, local13
2396c     1C 15 02 F6 | 	mov	arg02, local14
23970     19 17 02 F6 | 	mov	arg03, local11
23974     13 19 02 F6 | 	mov	arg04, local05
23978     F4 2F B0 FD | 	call	#__system__pack_0606
2397c     F8 00 90 FD | 	jmp	#LR__3305
23980                 | LR__3295
23980     00 28 0E F2 | 	cmp	local06, #0 wz
23984     11 FB 01 56 |  if_ne	mov	result1, local03
23988     EC 00 90 5D |  if_ne	jmp	#LR__3305
2398c     FF 30 0E F2 | 	cmp	local10, #255 wz
23990     00 F8 3F AF 
23994     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23998     DC 00 90 AD |  if_e	jmp	#LR__3305
2399c     02 26 46 F5 | 	or	local05, #2
239a0     00 12 06 F6 | 	mov	arg01, #0
239a4     00 14 06 F6 | 	mov	arg02, #0
239a8     15 17 02 F6 | 	mov	arg03, local07
239ac     13 19 02 F6 | 	mov	arg04, local05
239b0     BC 2F B0 FD | 	call	#__system__pack_0606
239b4     C0 00 90 FD | 	jmp	#LR__3305
239b8                 | LR__3296
239b8     00 2E 0E F2 | 	cmp	local09, #0 wz
239bc     12 FB 01 56 |  if_ne	mov	result1, local04
239c0     B4 00 90 5D |  if_ne	jmp	#LR__3305
239c4     13 19 02 F6 | 	mov	arg04, local05
239c8     08 18 46 F5 | 	or	arg04, #8
239cc     00 12 06 F6 | 	mov	arg01, #0
239d0     00 14 06 F6 | 	mov	arg02, #0
239d4     00 16 06 F6 | 	mov	arg03, #0
239d8     94 2F B0 FD | 	call	#__system__pack_0606
239dc     98 00 90 FD | 	jmp	#LR__3305
239e0                 | LR__3297
239e0     00 28 0E F2 | 	cmp	local06, #0 wz
239e4     20 00 90 AD |  if_e	jmp	#LR__3300
239e8     01 28 66 F0 | 	shl	local06, #1
239ec     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
239f0                 | LR__3298
239f0     00 40 00 FF 
239f4     00 28 16 F2 | 	cmp	local06, ##8388608 wc
239f8     01 2A 86 C1 |  if_b	sub	local07, #1
239fc     01 28 66 C0 |  if_b	shl	local06, #1
23a00     EC FF 9F CD |  if_b	jmp	#LR__3298
23a04                 | LR__3299
23a04     B8 FE 9F FD | 	jmp	#LR__3290
23a08                 | LR__3300
23a08     00 30 0E F2 | 	cmp	local10, #0 wz
23a0c     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
23a10     00 F8 3F AF 
23a14     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23a18     5C 00 90 AD |  if_e	jmp	#LR__3305
23a1c     13 19 02 F6 | 	mov	arg04, local05
23a20     08 18 46 F5 | 	or	arg04, #8
23a24     00 12 06 F6 | 	mov	arg01, #0
23a28     00 14 06 F6 | 	mov	arg02, #0
23a2c     00 16 06 F6 | 	mov	arg03, #0
23a30     3C 2F B0 FD | 	call	#__system__pack_0606
23a34     40 00 90 FD | 	jmp	#LR__3305
23a38                 | LR__3301
23a38     00 2E 0E F2 | 	cmp	local09, #0 wz
23a3c     20 00 90 AD |  if_e	jmp	#LR__3304
23a40     01 2E 66 F0 | 	shl	local09, #1
23a44     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
23a48                 | LR__3302
23a48     00 40 00 FF 
23a4c     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23a50     01 30 86 C1 |  if_b	sub	local10, #1
23a54     01 2E 66 C0 |  if_b	shl	local09, #1
23a58     EC FF 9F CD |  if_b	jmp	#LR__3302
23a5c                 | LR__3303
23a5c     6C FE 9F FD | 	jmp	#LR__3291
23a60                 | LR__3304
23a60     02 26 46 F5 | 	or	local05, #2
23a64     00 12 06 F6 | 	mov	arg01, #0
23a68     00 14 06 F6 | 	mov	arg02, #0
23a6c     00 16 06 F6 | 	mov	arg03, #0
23a70     13 19 02 F6 | 	mov	arg04, local05
23a74     F8 2E B0 FD | 	call	#__system__pack_0606
23a78                 | LR__3305
23a78     A7 F0 03 F6 | 	mov	ptra, fp
23a7c     B2 00 A0 FD | 	call	#popregs_
23a80                 | __system___float_div_ret
23a80     2D 00 64 FD | 	ret
23a84                 | 
23a84                 | __system___float_cmp
23a84     00 C0 3F FF 
23a88     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23a8c     00 C0 3F CF 
23a90     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23a94     0B FB 01 36 |  if_ae	mov	result1, arg03
23a98     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23a9c     00 C0 7F FF 
23aa0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23aa4     00 C0 7F CF 
23aa8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23aac     0B FB 01 36 |  if_ae	mov	result1, arg03
23ab0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23ab4     00 12 56 F2 | 	cmps	arg01, #0 wc
23ab8     2C 00 90 3D |  if_ae	jmp	#LR__3310
23abc     00 14 56 F2 | 	cmps	arg02, #0 wc
23ac0     0A FB 01 C6 |  if_b	mov	result1, arg02
23ac4     09 FB 81 C1 |  if_b	sub	result1, arg01
23ac8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23acc     00 14 0E F2 | 	cmp	arg02, #0 wz
23ad0     00 00 40 AF 
23ad4     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23ad8     00 FA 05 A6 |  if_e	mov	result1, #0
23adc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23ae0     01 FA 65 F6 | 	neg	result1, #1
23ae4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23ae8                 | LR__3310
23ae8     00 14 56 F2 | 	cmps	arg02, #0 wc
23aec     1C 00 90 3D |  if_ae	jmp	#LR__3311
23af0     00 12 0E F2 | 	cmp	arg01, #0 wz
23af4     00 00 40 AF 
23af8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23afc     00 FA 05 A6 |  if_e	mov	result1, #0
23b00     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23b04     01 FA 05 F6 | 	mov	result1, #1
23b08     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23b0c                 | LR__3311
23b0c     0A 13 82 F1 | 	sub	arg01, arg02
23b10     09 FB 01 F6 | 	mov	result1, arg01
23b14                 | __system___float_cmp_ret
23b14     2D 00 64 FD | 	ret
23b18                 | 
23b18                 | __system___float_tointeger
23b18     02 4A 05 F6 | 	mov	COUNT_, #2
23b1c     A8 00 A0 FD | 	call	#pushregs_
23b20     50 00 B0 FD | 	call	#__system___float_Unpack
23b24     FF FF 7F FF 
23b28     FF FD 55 F2 | 	cmps	result2, ##-1 wc
23b2c     34 00 90 CD |  if_b	jmp	#LR__3320
23b30     1F FC 55 F2 | 	cmps	result2, #31 wc
23b34     2C 00 90 3D |  if_ae	jmp	#LR__3320
23b38     02 FE 65 F0 | 	shl	result3, #2
23b3c     1E 1E 06 F6 | 	mov	local01, #30
23b40     FE 1E 82 F1 | 	sub	local01, result2
23b44     0F FF 41 F0 | 	shr	result3, local01
23b48     FF 20 02 F6 | 	mov	local02, result3
23b4c     0A 21 02 F1 | 	add	local02, arg02
23b50     01 20 46 F0 | 	shr	local02, #1
23b54     00 FA 0D F2 | 	cmp	result1, #0 wz
23b58     10 21 62 56 |  if_ne	neg	local02, local02
23b5c     10 FB 01 F6 | 	mov	result1, local02
23b60     04 00 90 FD | 	jmp	#LR__3321
23b64                 | LR__3320
23b64     00 FA 05 F6 | 	mov	result1, #0
23b68                 | LR__3321
23b68     A7 F0 03 F6 | 	mov	ptra, fp
23b6c     B2 00 A0 FD | 	call	#popregs_
23b70                 | __system___float_tointeger_ret
23b70     2D 00 64 FD | 	ret
23b74                 | 
23b74                 | __system___float_Unpack
23b74     09 01 02 F6 | 	mov	_var01, arg01
23b78     1F 00 46 F0 | 	shr	_var01, #31
23b7c     09 03 02 F6 | 	mov	_var02, arg01
23b80     01 02 66 F0 | 	shl	_var02, #1
23b84     18 02 4E F0 | 	shr	_var02, #24 wz
23b88     17 13 06 F4 | 	bitl	arg01, #279
23b8c     06 12 66 50 |  if_ne	shl	arg01, #6
23b90     1D 12 26 54 |  if_ne	bith	arg01, #29
23b94     1C 00 90 5D |  if_ne	jmp	#LR__3330
23b98     09 05 92 F7 | 	encod	_var03, arg01 wc
23b9c     01 04 06 C1 |  if_b	add	_var03, #1
23ba0     17 04 86 F1 | 	sub	_var03, #23
23ba4     02 03 02 F6 | 	mov	_var02, _var03
23ba8     07 FC 05 F6 | 	mov	result2, #7
23bac     02 FD 81 F1 | 	sub	result2, _var03
23bb0     FE 12 62 F0 | 	shl	arg01, result2
23bb4                 | LR__3330
23bb4     7F 02 86 F1 | 	sub	_var02, #127
23bb8     09 FF 01 F6 | 	mov	result3, arg01
23bbc     00 FB 01 F6 | 	mov	result1, _var01
23bc0     01 FD 01 F6 | 	mov	result2, _var02
23bc4                 | __system___float_Unpack_ret
23bc4     2D 00 64 FD | 	ret
23bc8                 | 
23bc8                 | __system___float_Pack
23bc8     00 00 06 F6 | 	mov	_var01, #0
23bcc     00 16 0E F2 | 	cmp	arg03, #0 wz
23bd0     8C 00 90 AD |  if_e	jmp	#LR__3341
23bd4     0B 03 92 F7 | 	encod	_var02, arg03 wc
23bd8     01 02 06 C1 |  if_b	add	_var02, #1
23bdc     21 00 06 F6 | 	mov	_var01, #33
23be0     01 01 82 F1 | 	sub	_var01, _var02
23be4     00 17 62 F0 | 	shl	arg03, _var01
23be8     03 02 06 F6 | 	mov	_var02, #3
23bec     00 03 82 F1 | 	sub	_var02, _var01
23bf0     01 15 02 F1 | 	add	arg02, _var02
23bf4     0A 05 02 F6 | 	mov	_var03, arg02
23bf8     00 17 06 F1 | 	add	arg03, #256
23bfc     0B 03 02 F6 | 	mov	_var02, arg03
23c00     FF 02 2E F5 | 	andn	_var02, #255 wz
23c04     01 04 06 A1 |  if_e	add	_var03, #1
23c08     7F 04 06 F1 | 	add	_var03, #127
23c0c     FF FF 7F FF 
23c10     E9 05 46 F3 | 	fges	_var03, ##-23
23c14     FF 04 66 F3 | 	fles	_var03, #255
23c18     01 04 56 F2 | 	cmps	_var03, #1 wc
23c1c     1C 00 90 3D |  if_ae	jmp	#LR__3340
23c20     01 16 46 F0 | 	shr	arg03, #1
23c24     1F 02 C6 F9 | 	decod	_var02, #31
23c28     0B 03 02 F1 | 	add	_var02, arg03
23c2c     02 05 62 F6 | 	neg	_var03, _var03
23c30     02 03 42 F0 | 	shr	_var02, _var03
23c34     01 17 02 F6 | 	mov	arg03, _var02
23c38     00 04 06 F6 | 	mov	_var03, #0
23c3c                 | LR__3340
23c3c     09 FB 01 F6 | 	mov	result1, arg01
23c40     1F FA 65 F0 | 	shl	result1, #31
23c44     02 03 02 F6 | 	mov	_var02, _var03
23c48     17 02 66 F0 | 	shl	_var02, #23
23c4c     01 FB 41 F5 | 	or	result1, _var02
23c50     0B 07 02 F6 | 	mov	_var04, arg03
23c54     09 06 46 F0 | 	shr	_var04, #9
23c58     03 FB 41 F5 | 	or	result1, _var04
23c5c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23c60                 | LR__3341
23c60     00 FB 01 F6 | 	mov	result1, _var01
23c64                 | __system___float_Pack_ret
23c64     2D 00 64 FD | 	ret
23c68                 | 
23c68                 | __system___basic_print_float
23c68     05 4A 05 F6 | 	mov	COUNT_, #5
23c6c     A8 00 A0 FD | 	call	#pushregs_
23c70     09 1F 02 F6 | 	mov	local01, arg01
23c74     0A 21 02 F6 | 	mov	local02, arg02
23c78     0B 23 0A F6 | 	mov	local03, arg03 wz
23c7c     0C 25 02 F6 | 	mov	local04, arg04
23c80     14 00 90 5D |  if_ne	jmp	#LR__3350
23c84     23 24 0E F2 | 	cmp	local04, #35 wz
23c88     80 02 10 AF 
23c8c     00 26 06 A6 |  if_e	mov	local05, ##537198592
23c90     1D 26 C6 59 |  if_ne	decod	local05, #29
23c94     13 23 02 F6 | 	mov	local03, local05
23c98                 | LR__3350
23c98     0F 13 02 F6 | 	mov	arg01, local01
23c9c     B4 27 B0 FD | 	call	#__system___gettxfunc
23ca0     FD 26 0A F6 | 	mov	local05, result1 wz
23ca4     00 FA 05 A6 |  if_e	mov	result1, #0
23ca8     13 13 02 56 |  if_ne	mov	arg01, local05
23cac     11 15 02 56 |  if_ne	mov	arg02, local03
23cb0     10 17 02 56 |  if_ne	mov	arg03, local02
23cb4     12 19 02 56 |  if_ne	mov	arg04, local04
23cb8     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23cbc     A7 F0 03 F6 | 	mov	ptra, fp
23cc0     B2 00 A0 FD | 	call	#popregs_
23cc4                 | __system___basic_print_float_ret
23cc4     2D 00 64 FD | 	ret
23cc8                 | 
23cc8                 | __system____builtin_atoi
23cc8     07 4A 05 F6 | 	mov	COUNT_, #7
23ccc     A8 00 A0 FD | 	call	#pushregs_
23cd0                 | __system____builtin_atoi_enter
23cd0     09 1F 02 F6 | 	mov	local01, arg01
23cd4     0A 21 02 F6 | 	mov	local02, arg02
23cd8     00 22 06 F6 | 	mov	local03, #0
23cdc     00 24 06 F6 | 	mov	local04, #0
23ce0     00 26 06 F6 | 	mov	local05, #0
23ce4     97 08 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
23ce8                 | LR__3360
23ce8     0F 29 C2 FA | 	rdbyte	local06, local01
23cec     20 28 0E F2 | 	cmp	local06, #32 wz
23cf0     01 1E 06 A1 |  if_e	add	local01, #1
23cf4     F0 FF 9F AD |  if_e	jmp	#LR__3360
23cf8                 | LR__3361
23cf8     0F 2B C2 FA | 	rdbyte	local07, local01
23cfc                 | LR__3362
23cfc     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d00     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23d04     18 00 90 5D |  if_ne	jmp	#LR__3363
23d08     01 1E 06 F1 | 	add	local01, #1
23d0c     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d10     01 28 06 A6 |  if_e	mov	local06, #1
23d14     14 27 C2 A2 |  if_e	subr	local05, local06
23d18     0F 2B C2 FA | 	rdbyte	local07, local01
23d1c     DC FF 9F FD | 	jmp	#LR__3362
23d20                 | LR__3363
23d20     97 48 48 FB | 	callpa	#(@LR__3371-@LR__3364)>>2,fcache_load_ptr_
23d24                 | LR__3364
23d24                 | LR__3365
23d24     0F 2B C2 FA | 	rdbyte	local07, local01
23d28     5F 2A 0E F2 | 	cmp	local07, #95 wz
23d2c     01 1E 06 F1 | 	add	local01, #1
23d30     F0 FF 9F AD |  if_e	jmp	#LR__3365
23d34     30 2A 0E F2 | 	cmp	local07, #48 wz
23d38     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23d3c     00 24 06 A6 |  if_e	mov	local04, #0
23d40     60 00 90 AD |  if_e	jmp	#LR__3370
23d44     31 2A 56 F2 | 	cmps	local07, #49 wc
23d48     18 00 90 CD |  if_b	jmp	#LR__3366
23d4c     3A 2A 56 F2 | 	cmps	local07, #58 wc
23d50     15 25 02 C6 |  if_b	mov	local04, local07
23d54     30 24 86 C1 |  if_b	sub	local04, #48
23d58     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23d5c     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23d60     40 00 90 CD |  if_b	jmp	#LR__3369
23d64                 | LR__3366
23d64     0B 20 56 F2 | 	cmps	local02, #11 wc
23d68     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23d6c     14 00 90 CD |  if_b	jmp	#LR__3367
23d70     67 2A 56 F2 | 	cmps	local07, #103 wc
23d74     61 2A 86 C1 |  if_b	sub	local07, #97
23d78     0A 24 06 C6 |  if_b	mov	local04, #10
23d7c     15 25 02 C1 |  if_b	add	local04, local07
23d80     20 00 90 CD |  if_b	jmp	#LR__3368
23d84                 | LR__3367
23d84     0B 20 56 F2 | 	cmps	local02, #11 wc
23d88     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23d8c     24 00 90 CD |  if_b	jmp	#LR__3372
23d90     47 2A 56 F2 | 	cmps	local07, #71 wc
23d94     41 2A 86 C1 |  if_b	sub	local07, #65
23d98     0A 24 06 C6 |  if_b	mov	local04, #10
23d9c     15 25 02 C1 |  if_b	add	local04, local07
23da0     10 00 90 3D |  if_ae	jmp	#LR__3372
23da4                 | LR__3368
23da4                 | LR__3369
23da4                 | LR__3370
23da4     11 21 02 FD | 	qmul	local02, local03
23da8     18 22 62 FD | 	getqx	local03
23dac     12 23 02 F1 | 	add	local03, local04
23db0     70 FF 9F FD | 	jmp	#LR__3364
23db4                 | LR__3371
23db4                 | LR__3372
23db4     00 20 0E F2 | 	cmp	local02, #0 wz
23db8     64 00 90 5D |  if_ne	jmp	#LR__3378
23dbc     78 2A 0E F2 | 	cmp	local07, #120 wz
23dc0     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23dc4     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23dc8     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23dcc     14 00 90 5D |  if_ne	jmp	#LR__3373
23dd0     0F 13 02 F6 | 	mov	arg01, local01
23dd4     10 14 06 F6 | 	mov	arg02, #16
23dd8     EC FE BF FD | 	call	#__system____builtin_atoi
23ddc     FD 22 02 F6 | 	mov	local03, result1
23de0     3C 00 90 FD | 	jmp	#LR__3377
23de4                 | LR__3373
23de4     62 2A 0E F2 | 	cmp	local07, #98 wz
23de8     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23dec     14 00 90 5D |  if_ne	jmp	#LR__3374
23df0     0F 13 02 F6 | 	mov	arg01, local01
23df4     02 14 06 F6 | 	mov	arg02, #2
23df8     CC FE BF FD | 	call	#__system____builtin_atoi
23dfc     FD 22 02 F6 | 	mov	local03, result1
23e00     1C 00 90 FD | 	jmp	#LR__3376
23e04                 | LR__3374
23e04     6F 2A 0E F2 | 	cmp	local07, #111 wz
23e08     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23e0c     10 00 90 5D |  if_ne	jmp	#LR__3375
23e10     0F 13 02 F6 | 	mov	arg01, local01
23e14     08 14 06 F6 | 	mov	arg02, #8
23e18     AC FE BF FD | 	call	#__system____builtin_atoi
23e1c     FD 22 02 F6 | 	mov	local03, result1
23e20                 | LR__3375
23e20                 | LR__3376
23e20                 | LR__3377
23e20                 | LR__3378
23e20     00 26 0E F2 | 	cmp	local05, #0 wz
23e24     11 23 62 56 |  if_ne	neg	local03, local03
23e28     11 FB 01 F6 | 	mov	result1, local03
23e2c     A7 F0 03 F6 | 	mov	ptra, fp
23e30     B2 00 A0 FD | 	call	#popregs_
23e34                 | __system____builtin_atoi_ret
23e34     2D 00 64 FD | 	ret
23e38                 | 
23e38                 | __system____builtin_atof
23e38     07 4A 05 F6 | 	mov	COUNT_, #7
23e3c     A8 00 A0 FD | 	call	#pushregs_
23e40     09 1F 02 F6 | 	mov	local01, arg01
23e44     00 20 06 F6 | 	mov	local02, #0
23e48     00 22 06 F6 | 	mov	local03, #0
23e4c     00 24 06 F6 | 	mov	local04, #0
23e50     00 26 06 F6 | 	mov	local05, #0
23e54     97 08 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
23e58                 | LR__3380
23e58     0F 17 C2 FA | 	rdbyte	arg03, local01
23e5c     20 16 0E F2 | 	cmp	arg03, #32 wz
23e60     01 1E 06 A1 |  if_e	add	local01, #1
23e64     F0 FF 9F AD |  if_e	jmp	#LR__3380
23e68                 | LR__3381
23e68     0F 29 C2 FA | 	rdbyte	local06, local01
23e6c                 | LR__3382
23e6c     2B 28 0E F2 | 	cmp	local06, #43 wz
23e70     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23e74     14 00 90 5D |  if_ne	jmp	#LR__3383
23e78     2D 28 0E F2 | 	cmp	local06, #45 wz
23e7c     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23e80     01 1E 06 F1 | 	add	local01, #1
23e84     0F 29 C2 FA | 	rdbyte	local06, local01
23e88     E0 FF 9F FD | 	jmp	#LR__3382
23e8c                 | LR__3383
23e8c                 | LR__3384
23e8c     97 08 48 FB | 	callpa	#(@LR__3386-@LR__3385)>>2,fcache_load_ptr_
23e90                 | LR__3385
23e90     0F 29 C2 FA | 	rdbyte	local06, local01
23e94     5F 28 0E F2 | 	cmp	local06, #95 wz
23e98     01 1E 06 F1 | 	add	local01, #1
23e9c     F0 FF 9F AD |  if_e	jmp	#LR__3385
23ea0                 | LR__3386
23ea0     00 28 0E F2 | 	cmp	local06, #0 wz
23ea4     5C 00 90 AD |  if_e	jmp	#LR__3388
23ea8     30 28 56 F2 | 	cmps	local06, #48 wc
23eac     44 00 90 CD |  if_b	jmp	#LR__3387
23eb0     3A 28 56 F2 | 	cmps	local06, #58 wc
23eb4     3C 00 90 3D |  if_ae	jmp	#LR__3387
23eb8     10 13 02 F6 | 	mov	arg01, local02
23ebc     00 90 20 FF 
23ec0     00 14 06 F6 | 	mov	arg02, ##1092616192
23ec4     88 F7 BF FD | 	call	#__system___float_mul
23ec8     FD 20 02 F6 | 	mov	local02, result1
23ecc     30 28 86 F1 | 	sub	local06, #48
23ed0     14 13 02 F6 | 	mov	arg01, local06
23ed4     74 F3 BF FD | 	call	#__system___float_fromuns
23ed8     FD 14 02 F6 | 	mov	arg02, result1
23edc     10 13 02 F6 | 	mov	arg01, local02
23ee0     9C F3 BF FD | 	call	#__system___float_add
23ee4     FD 20 02 F6 | 	mov	local02, result1
23ee8     00 26 0E F2 | 	cmp	local05, #0 wz
23eec     01 22 86 51 |  if_ne	sub	local03, #1
23ef0     98 FF 9F FD | 	jmp	#LR__3384
23ef4                 | LR__3387
23ef4     2E 28 0E F2 | 	cmp	local06, #46 wz
23ef8     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23efc     01 26 06 A6 |  if_e	mov	local05, #1
23f00     88 FF 9F AD |  if_e	jmp	#LR__3384
23f04                 | LR__3388
23f04     45 28 0E F2 | 	cmp	local06, #69 wz
23f08     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23f0c     18 00 90 5D |  if_ne	jmp	#LR__3389
23f10     0F 13 02 F6 | 	mov	arg01, local01
23f14     00 14 06 F6 | 	mov	arg02, #0
23f18     AC FD BF FD | 	call	#__system____builtin_atoi
23f1c     11 FB 01 F1 | 	add	result1, local03
23f20     FD 2A 02 F6 | 	mov	local07, result1
23f24     04 00 90 FD | 	jmp	#LR__3390
23f28                 | LR__3389
23f28     11 2B 02 F6 | 	mov	local07, local03
23f2c                 | LR__3390
23f2c     15 17 02 F6 | 	mov	arg03, local07
23f30     10 13 02 F6 | 	mov	arg01, local02
23f34     00 90 20 FF 
23f38     00 14 06 F6 | 	mov	arg02, ##1092616192
23f3c     F4 06 B0 FD | 	call	#__system___float_pow_n
23f40     12 FB 61 F5 | 	xor	result1, local04
23f44     A7 F0 03 F6 | 	mov	ptra, fp
23f48     B2 00 A0 FD | 	call	#popregs_
23f4c                 | __system____builtin_atof_ret
23f4c     2D 00 64 FD | 	ret
23f50                 | 
23f50                 | __system____builtin_ilogb
23f50     20 FC BF FD | 	call	#__system___float_Unpack
23f54     00 FE 0D F2 | 	cmp	result3, #0 wz
23f58     00 00 40 AF 
23f5c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23f60     24 00 90 AD |  if_e	jmp	#LR__3401
23f64     80 FC 0D F2 | 	cmp	result2, #128 wz
23f68     18 00 90 5D |  if_ne	jmp	#LR__3400
23f6c     00 00 10 FF 
23f70     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23f74     1E FA CD A9 |  if_e	bmask	result1, #30
23f78     0C 00 90 AD |  if_e	jmp	#LR__3401
23f7c     1F FA C5 F9 | 	decod	result1, #31
23f80     04 00 90 FD | 	jmp	#LR__3401
23f84                 | LR__3400
23f84     FE FA 01 F6 | 	mov	result1, result2
23f88                 | LR__3401
23f88                 | __system____builtin_ilogb_ret
23f88     2D 00 64 FD | 	ret
23f8c                 | 
23f8c                 | __system____builtin_sinf
23f8c     03 4A 05 F6 | 	mov	COUNT_, #3
23f90     A8 00 A0 FD | 	call	#pushregs_
23f94     09 1F 02 F6 | 	mov	local01, arg01
23f98     87 64 20 FF 
23f9c     DB 15 06 F6 | 	mov	arg02, ##1086918619
23fa0     B0 F8 BF FD | 	call	#__system___float_div
23fa4     FD 12 02 F6 | 	mov	arg01, result1
23fa8     00 14 06 F6 | 	mov	arg02, #0
23fac     68 FB BF FD | 	call	#__system___float_tointeger
23fb0     FD 16 0A F6 | 	mov	arg03, result1 wz
23fb4     44 00 90 AD |  if_e	jmp	#LR__3410
23fb8     0B 13 52 F6 | 	abs	arg01, arg03 wc
23fbc     1F 20 C6 C9 |  if_b	decod	local02, #31
23fc0     00 20 06 36 |  if_ae	mov	local02, #0
23fc4     84 F2 BF FD | 	call	#__system___float_fromuns
23fc8     10 FB 61 F5 | 	xor	result1, local02
23fcc     FD 12 02 F6 | 	mov	arg01, result1
23fd0     1E 14 C6 F9 | 	decod	arg02, #30
23fd4     78 F6 BF FD | 	call	#__system___float_mul
23fd8     FD 12 02 F6 | 	mov	arg01, result1
23fdc     87 24 20 FF 
23fe0     DB 15 06 F6 | 	mov	arg02, ##1078530011
23fe4     68 F6 BF FD | 	call	#__system___float_mul
23fe8     FD 14 02 F6 | 	mov	arg02, result1
23fec     0F 13 02 F6 | 	mov	arg01, local01
23ff0     1F 14 E6 F4 | 	bitnot	arg02, #31
23ff4     88 F2 BF FD | 	call	#__system___float_add
23ff8     FD 1E 02 F6 | 	mov	local01, result1
23ffc                 | LR__3410
23ffc     0F 13 02 F6 | 	mov	arg01, local01
24000     66 E6 1E FF 
24004     CD 14 06 F6 | 	mov	arg02, ##1036831949
24008     01 16 06 F6 | 	mov	arg03, #1
2400c     74 FA BF FD | 	call	#__system___float_cmp
24010     00 FA 55 F2 | 	cmps	result1, #0 wc
24014     5C 00 90 3D |  if_ae	jmp	#LR__3411
24018     0F 13 02 F6 | 	mov	arg01, local01
2401c     66 E6 5E FF 
24020     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24024     01 16 66 F6 | 	neg	arg03, #1
24028     58 FA BF FD | 	call	#__system___float_cmp
2402c     01 FA 55 F2 | 	cmps	result1, #1 wc
24030     40 00 90 CD |  if_b	jmp	#LR__3411
24034     0F 13 02 F6 | 	mov	arg01, local01
24038     0F 15 02 F6 | 	mov	arg02, local01
2403c     10 F6 BF FD | 	call	#__system___float_mul
24040     FD 12 02 F6 | 	mov	arg01, result1
24044     0F 15 02 F6 | 	mov	arg02, local01
24048     04 F6 BF FD | 	call	#__system___float_mul
2404c     FD 12 02 F6 | 	mov	arg01, result1
24050     00 60 20 FF 
24054     00 14 06 F6 | 	mov	arg02, ##1086324736
24058     F8 F7 BF FD | 	call	#__system___float_div
2405c     FD 14 02 F6 | 	mov	arg02, result1
24060     0F 13 02 F6 | 	mov	arg01, local01
24064     1F 14 E6 F4 | 	bitnot	arg02, #31
24068     14 F2 BF FD | 	call	#__system___float_add
2406c     FD 22 02 F6 | 	mov	local03, result1
24070     54 00 90 FD | 	jmp	#LR__3412
24074                 | LR__3411
24074     0F 13 02 F6 | 	mov	arg01, local01
24078     7C 91 26 FF 
2407c     83 15 06 F6 | 	mov	arg02, ##1294137731
24080     CC F5 BF FD | 	call	#__system___float_mul
24084     FD 12 02 F6 | 	mov	arg01, result1
24088     00 14 06 F6 | 	mov	arg02, #0
2408c     88 FA BF FD | 	call	#__system___float_tointeger
24090     02 FA 65 F0 | 	shl	result1, #2
24094     00 00 A0 FF 
24098     FD 00 48 FD | 	qrotate	##1073741824, result1
2409c     19 12 62 FD | 	getqy	arg01
240a0     09 13 52 F6 | 	abs	arg01, arg01 wc
240a4     1F 20 C6 C9 |  if_b	decod	local02, #31
240a8     00 20 06 36 |  if_ae	mov	local02, #0
240ac     9C F1 BF FD | 	call	#__system___float_fromuns
240b0     10 FB 61 F5 | 	xor	result1, local02
240b4     FD 12 02 F6 | 	mov	arg01, result1
240b8     00 40 27 FF 
240bc     00 14 06 F6 | 	mov	arg02, ##1317011456
240c0     90 F7 BF FD | 	call	#__system___float_div
240c4     FD 22 02 F6 | 	mov	local03, result1
240c8                 | LR__3412
240c8     11 FB 01 F6 | 	mov	result1, local03
240cc     A7 F0 03 F6 | 	mov	ptra, fp
240d0     B2 00 A0 FD | 	call	#popregs_
240d4                 | __system____builtin_sinf_ret
240d4     2D 00 64 FD | 	ret
240d8                 | 
240d8                 | __system____builtin_tanf
240d8     02 4A 05 F6 | 	mov	COUNT_, #2
240dc     A8 00 A0 FD | 	call	#pushregs_
240e0     09 1F 02 F6 | 	mov	local01, arg01
240e4     A4 FE BF FD | 	call	#__system____builtin_sinf
240e8     FD 20 02 F6 | 	mov	local02, result1
240ec     0F 15 02 F6 | 	mov	arg02, local01
240f0     87 E4 1F FF 
240f4     DB 13 06 F6 | 	mov	arg01, ##1070141403
240f8     1F 14 E6 F4 | 	bitnot	arg02, #31
240fc     80 F1 BF FD | 	call	#__system___float_add
24100     FD 12 02 F6 | 	mov	arg01, result1
24104     84 FE BF FD | 	call	#__system____builtin_sinf
24108     FD 14 02 F6 | 	mov	arg02, result1
2410c     10 13 02 F6 | 	mov	arg01, local02
24110     40 F7 BF FD | 	call	#__system___float_div
24114     A7 F0 03 F6 | 	mov	ptra, fp
24118     B2 00 A0 FD | 	call	#popregs_
2411c                 | __system____builtin_tanf_ret
2411c     2D 00 64 FD | 	ret
24120                 | 
24120                 | __system____builtin_asinf
24120     01 4A 05 F6 | 	mov	COUNT_, #1
24124     A8 00 A0 FD | 	call	#pushregs_
24128     09 1F 02 F6 | 	mov	local01, arg01
2412c     0F 15 02 F6 | 	mov	arg02, local01
24130     0F 13 02 F6 | 	mov	arg01, local01
24134     18 F5 BF FD | 	call	#__system___float_mul
24138     FD 14 02 F6 | 	mov	arg02, result1
2413c     00 C0 1F FF 
24140     00 12 06 F6 | 	mov	arg01, ##1065353216
24144     1F 14 E6 F4 | 	bitnot	arg02, #31
24148     34 F1 BF FD | 	call	#__system___float_add
2414c     FD 12 02 F6 | 	mov	arg01, result1
24150     24 F4 BF FD | 	call	#__system___float_sqrt
24154     FD 14 02 F6 | 	mov	arg02, result1
24158     0F 13 02 F6 | 	mov	arg01, local01
2415c     58 00 B0 FD | 	call	#__system____builtin_atan2f
24160     A7 F0 03 F6 | 	mov	ptra, fp
24164     B2 00 A0 FD | 	call	#popregs_
24168                 | __system____builtin_asinf_ret
24168     2D 00 64 FD | 	ret
2416c                 | 
2416c                 | __system____builtin_acosf
2416c     01 4A 05 F6 | 	mov	COUNT_, #1
24170     A8 00 A0 FD | 	call	#pushregs_
24174     09 1F 02 F6 | 	mov	local01, arg01
24178     0F 15 02 F6 | 	mov	arg02, local01
2417c     0F 13 02 F6 | 	mov	arg01, local01
24180     CC F4 BF FD | 	call	#__system___float_mul
24184     FD 14 02 F6 | 	mov	arg02, result1
24188     00 C0 1F FF 
2418c     00 12 06 F6 | 	mov	arg01, ##1065353216
24190     1F 14 E6 F4 | 	bitnot	arg02, #31
24194     E8 F0 BF FD | 	call	#__system___float_add
24198     FD 12 02 F6 | 	mov	arg01, result1
2419c     D8 F3 BF FD | 	call	#__system___float_sqrt
241a0     FD 12 02 F6 | 	mov	arg01, result1
241a4     0F 15 02 F6 | 	mov	arg02, local01
241a8     0C 00 B0 FD | 	call	#__system____builtin_atan2f
241ac     A7 F0 03 F6 | 	mov	ptra, fp
241b0     B2 00 A0 FD | 	call	#popregs_
241b4                 | __system____builtin_acosf_ret
241b4     2D 00 64 FD | 	ret
241b8                 | 
241b8                 | __system____builtin_atan2f
241b8     04 4A 05 F6 | 	mov	COUNT_, #4
241bc     A8 00 A0 FD | 	call	#pushregs_
241c0     09 1F 02 F6 | 	mov	local01, arg01
241c4     0A 21 02 F6 | 	mov	local02, arg02
241c8     0F 13 02 F6 | 	mov	arg01, local01
241cc     00 14 06 F6 | 	mov	arg02, #0
241d0     01 16 06 F6 | 	mov	arg03, #1
241d4     AC F8 BF FD | 	call	#__system___float_cmp
241d8     00 FA 0D F2 | 	cmp	result1, #0 wz
241dc     28 00 90 5D |  if_ne	jmp	#LR__3420
241e0     10 13 02 F6 | 	mov	arg01, local02
241e4     00 14 06 F6 | 	mov	arg02, #0
241e8     01 16 06 F6 | 	mov	arg03, #1
241ec     94 F8 BF FD | 	call	#__system___float_cmp
241f0     00 FA 55 F2 | 	cmps	result1, #0 wc
241f4     87 24 60 CF 
241f8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
241fc     DC 00 90 CD |  if_b	jmp	#LR__3421
24200     00 FA 05 F6 | 	mov	result1, #0
24204     D4 00 90 FD | 	jmp	#LR__3421
24208                 | LR__3420
24208     10 13 02 F6 | 	mov	arg01, local02
2420c     10 15 02 F6 | 	mov	arg02, local02
24210     3C F4 BF FD | 	call	#__system___float_mul
24214     FD 22 02 F6 | 	mov	local03, result1
24218     0F 13 02 F6 | 	mov	arg01, local01
2421c     0F 15 02 F6 | 	mov	arg02, local01
24220     2C F4 BF FD | 	call	#__system___float_mul
24224     FD 14 02 F6 | 	mov	arg02, result1
24228     11 13 02 F6 | 	mov	arg01, local03
2422c     50 F0 BF FD | 	call	#__system___float_add
24230     FD 12 02 F6 | 	mov	arg01, result1
24234     40 F3 BF FD | 	call	#__system___float_sqrt
24238     FD 22 02 F6 | 	mov	local03, result1
2423c     10 13 02 F6 | 	mov	arg01, local02
24240     11 15 02 F6 | 	mov	arg02, local03
24244     0C F6 BF FD | 	call	#__system___float_div
24248     FD 20 02 F6 | 	mov	local02, result1
2424c     0F 13 02 F6 | 	mov	arg01, local01
24250     11 15 02 F6 | 	mov	arg02, local03
24254     FC F5 BF FD | 	call	#__system___float_div
24258     FD 1E 02 F6 | 	mov	local01, result1
2425c     00 40 27 FF 
24260     00 12 06 F6 | 	mov	arg01, ##1317011456
24264     10 15 02 F6 | 	mov	arg02, local02
24268     E4 F3 BF FD | 	call	#__system___float_mul
2426c     FD 12 02 F6 | 	mov	arg01, result1
24270     00 14 06 F6 | 	mov	arg02, #0
24274     A0 F8 BF FD | 	call	#__system___float_tointeger
24278     FD 22 02 F6 | 	mov	local03, result1
2427c     00 40 27 FF 
24280     00 12 06 F6 | 	mov	arg01, ##1317011456
24284     0F 15 02 F6 | 	mov	arg02, local01
24288     C4 F3 BF FD | 	call	#__system___float_mul
2428c     FD 12 02 F6 | 	mov	arg01, result1
24290     00 14 06 F6 | 	mov	arg02, #0
24294     80 F8 BF FD | 	call	#__system___float_tointeger
24298     FD 22 52 FD | 	qvector	local03, result1
2429c     87 24 20 FF 
242a0     DB 23 06 F6 | 	mov	local03, ##1078530011
242a4     19 12 62 FD | 	getqy	arg01
242a8     01 12 C6 F0 | 	sar	arg01, #1
242ac     09 13 52 F6 | 	abs	arg01, arg01 wc
242b0     1F 24 C6 C9 |  if_b	decod	local04, #31
242b4     00 24 06 36 |  if_ae	mov	local04, #0
242b8     90 EF BF FD | 	call	#__system___float_fromuns
242bc     12 FB 61 F5 | 	xor	result1, local04
242c0     FD 12 02 F6 | 	mov	arg01, result1
242c4     00 40 27 FF 
242c8     00 14 06 F6 | 	mov	arg02, ##1317011456
242cc     84 F5 BF FD | 	call	#__system___float_div
242d0     FD 14 02 F6 | 	mov	arg02, result1
242d4     11 13 02 F6 | 	mov	arg01, local03
242d8     74 F3 BF FD | 	call	#__system___float_mul
242dc                 | LR__3421
242dc     A7 F0 03 F6 | 	mov	ptra, fp
242e0     B2 00 A0 FD | 	call	#popregs_
242e4                 | __system____builtin_atan2f_ret
242e4     2D 00 64 FD | 	ret
242e8                 | 
242e8                 | __system____builtin_exp2f
242e8     04 4A 05 F6 | 	mov	COUNT_, #4
242ec     A8 00 A0 FD | 	call	#pushregs_
242f0     09 1F 02 F6 | 	mov	local01, arg01
242f4     00 7F 21 FF 
242f8     00 14 06 F6 | 	mov	arg02, ##1123942400
242fc     01 16 66 F6 | 	neg	arg03, #1
24300     80 F7 BF FD | 	call	#__system___float_cmp
24304     00 FA 55 F2 | 	cmps	result1, #0 wc
24308     00 C0 3F 3F 
2430c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
24310     DC 00 90 3D |  if_ae	jmp	#LR__3431
24314     0F 13 02 F6 | 	mov	arg01, local01
24318     00 7F 61 FF 
2431c     00 14 06 F6 | 	mov	arg02, ##-1023541248
24320     01 16 06 F6 | 	mov	arg03, #1
24324     5C F7 BF FD | 	call	#__system___float_cmp
24328     00 FA 55 F2 | 	cmps	result1, #0 wc
2432c     00 FA 05 C6 |  if_b	mov	result1, #0
24330     BC 00 90 CD |  if_b	jmp	#LR__3431
24334     0F 13 02 F6 | 	mov	arg01, local01
24338     00 14 06 F6 | 	mov	arg02, #0
2433c     D8 F7 BF FD | 	call	#__system___float_tointeger
24340     FD 20 02 F6 | 	mov	local02, result1
24344     10 13 52 F6 | 	abs	arg01, local02 wc
24348     1F 22 C6 C9 |  if_b	decod	local03, #31
2434c     00 22 06 36 |  if_ae	mov	local03, #0
24350     F8 EE BF FD | 	call	#__system___float_fromuns
24354     11 FB 61 F5 | 	xor	result1, local03
24358     FD 14 02 F6 | 	mov	arg02, result1
2435c     0F 13 02 F6 | 	mov	arg01, local01
24360     1F 14 E6 F4 | 	bitnot	arg02, #31
24364     18 EF BF FD | 	call	#__system___float_add
24368     FD 24 02 F6 | 	mov	local04, result1
2436c     12 13 02 F6 | 	mov	arg01, local04
24370     00 14 06 F6 | 	mov	arg02, #0
24374     01 16 06 F6 | 	mov	arg03, #1
24378     08 F7 BF FD | 	call	#__system___float_cmp
2437c     00 FA 55 F2 | 	cmps	result1, #0 wc
24380     18 00 90 3D |  if_ae	jmp	#LR__3430
24384     12 13 02 F6 | 	mov	arg01, local04
24388     00 C0 1F FF 
2438c     00 14 06 F6 | 	mov	arg02, ##1065353216
24390     EC EE BF FD | 	call	#__system___float_add
24394     FD 24 02 F6 | 	mov	local04, result1
24398     01 20 86 F1 | 	sub	local02, #1
2439c                 | LR__3430
2439c     7F 20 06 F1 | 	add	local02, #127
243a0     17 20 66 F0 | 	shl	local02, #23
243a4     12 13 02 F6 | 	mov	arg01, local04
243a8     00 80 26 FF 
243ac     00 14 06 F6 | 	mov	arg02, ##1291845632
243b0     9C F2 BF FD | 	call	#__system___float_mul
243b4     FD 12 02 F6 | 	mov	arg01, result1
243b8     00 14 06 F6 | 	mov	arg02, #0
243bc     58 F7 BF FD | 	call	#__system___float_tointeger
243c0     FD 24 0A F6 | 	mov	local04, result1 wz
243c4     10 FB 01 A6 |  if_e	mov	result1, local02
243c8     24 00 90 AD |  if_e	jmp	#LR__3431
243cc     3E 24 26 F4 | 	bith	local04, #62
243d0     0F 24 62 FD | 	qexp	local04
243d4     10 13 02 F6 | 	mov	arg01, local02
243d8     18 14 62 FD | 	getqx	arg02
243dc     01 14 06 F1 | 	add	arg02, #1
243e0     01 14 46 F0 | 	shr	arg02, #1
243e4     00 80 1F FF 
243e8     00 14 06 F1 | 	add	arg02, ##1056964608
243ec     60 F2 BF FD | 	call	#__system___float_mul
243f0                 | LR__3431
243f0     A7 F0 03 F6 | 	mov	ptra, fp
243f4     B2 00 A0 FD | 	call	#popregs_
243f8                 | __system____builtin_exp2f_ret
243f8     2D 00 64 FD | 	ret
243fc                 | 
243fc                 | __system____builtin_log2f
243fc     06 4A 05 F6 | 	mov	COUNT_, #6
24400     A8 00 A0 FD | 	call	#pushregs_
24404     09 1F 02 F6 | 	mov	local01, arg01
24408     09 21 0A F6 | 	mov	local02, arg01 wz
2440c     00 00 40 5F 
24410     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24414     00 40 00 AF 
24418     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2441c     08 01 90 AD |  if_e	jmp	#LR__3444
24420     00 20 56 F2 | 	cmps	local02, #0 wc
24424     00 E0 3F CF 
24428     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2442c     F8 00 90 CD |  if_b	jmp	#LR__3444
24430     0F 13 02 F6 | 	mov	arg01, local01
24434     00 90 20 FF 
24438     00 14 06 F6 | 	mov	arg02, ##1092616192
2443c     01 16 06 F6 | 	mov	arg03, #1
24440     40 F6 BF FD | 	call	#__system___float_cmp
24444     00 FA 0D F2 | 	cmp	result1, #0 wz
24448     4D 2A 20 AF 
2444c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
24450     D4 00 90 AD |  if_e	jmp	#LR__3444
24454     0F 13 02 F6 | 	mov	arg01, local01
24458     FC 16 20 FF 
2445c     54 14 06 F6 | 	mov	arg02, ##1076754516
24460     01 16 06 F6 | 	mov	arg03, #1
24464     1C F6 BF FD | 	call	#__system___float_cmp
24468     00 FA 0D F2 | 	cmp	result1, #0 wz
2446c     55 DC 1F AF 
24470     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24474     B0 00 90 AD |  if_e	jmp	#LR__3444
24478     10 23 02 F6 | 	mov	local03, local02
2447c     17 22 46 F0 | 	shr	local03, #23
24480     11 23 E2 F8 | 	getbyte	local03, local03, #0
24484     17 21 06 F4 | 	bitl	local02, #279
24488     10 25 02 F6 | 	mov	local04, local02
2448c     FF 22 0E F2 | 	cmp	local03, #255 wz
24490     1C 00 90 5D |  if_ne	jmp	#LR__3440
24494     00 24 0E F2 | 	cmp	local04, #0 wz
24498     00 C0 3F 5F 
2449c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
244a0     00 E0 3F AF 
244a4     00 26 06 A6 |  if_e	mov	local05, ##2143289344
244a8     13 FB 01 F6 | 	mov	result1, local05
244ac     78 00 90 FD | 	jmp	#LR__3444
244b0                 | LR__3440
244b0     00 22 0E F2 | 	cmp	local03, #0 wz
244b4     17 24 26 54 |  if_ne	bith	local04, #23
244b8     7F 22 86 51 |  if_ne	sub	local03, #127
244bc     28 00 90 5D |  if_ne	jmp	#LR__3443
244c0     00 24 0E F2 | 	cmp	local04, #0 wz
244c4     00 40 00 AF 
244c8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
244cc     58 00 90 AD |  if_e	jmp	#LR__3444
244d0     7E 22 66 F6 | 	neg	local03, #126
244d4     97 08 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
244d8                 | LR__3441
244d8     17 24 2E F4 | 	testbn	local04, #23 wz
244dc     01 24 66 A0 |  if_e	shl	local04, #1
244e0     01 22 06 A1 |  if_e	add	local03, #1
244e4     F0 FF 9F AD |  if_e	jmp	#LR__3441
244e8                 | LR__3442
244e8                 | LR__3443
244e8     0E 24 62 FD | 	qlog	local04
244ec     01 22 86 F1 | 	sub	local03, #1
244f0     11 13 52 F6 | 	abs	arg01, local03 wc
244f4     1F 28 C6 C9 |  if_b	decod	local06, #31
244f8     00 28 06 36 |  if_ae	mov	local06, #0
244fc     18 26 62 FD | 	getqx	local05
24500     9B 26 06 F4 | 	bitl	local05, #155
24504     08 26 06 F1 | 	add	local05, #8
24508     04 26 46 F0 | 	shr	local05, #4
2450c     00 C0 1F FF 
24510     00 26 06 F1 | 	add	local05, ##1065353216
24514     34 ED BF FD | 	call	#__system___float_fromuns
24518     14 FB 61 F5 | 	xor	result1, local06
2451c     FD 14 02 F6 | 	mov	arg02, result1
24520     13 13 02 F6 | 	mov	arg01, local05
24524     58 ED BF FD | 	call	#__system___float_add
24528                 | LR__3444
24528     A7 F0 03 F6 | 	mov	ptra, fp
2452c     B2 00 A0 FD | 	call	#popregs_
24530                 | __system____builtin_log2f_ret
24530     2D 00 64 FD | 	ret
24534                 | 
24534                 | __system____builtin_powf
24534     04 4A 05 F6 | 	mov	COUNT_, #4
24538     A8 00 A0 FD | 	call	#pushregs_
2453c     09 1F 02 F6 | 	mov	local01, arg01
24540     0A 21 02 F6 | 	mov	local02, arg02
24544     10 13 02 F6 | 	mov	arg01, local02
24548     00 14 06 F6 | 	mov	arg02, #0
2454c     C8 F5 BF FD | 	call	#__system___float_tointeger
24550     FD 22 02 F6 | 	mov	local03, result1
24554     11 13 52 F6 | 	abs	arg01, local03 wc
24558     1F 24 C6 C9 |  if_b	decod	local04, #31
2455c     00 24 06 36 |  if_ae	mov	local04, #0
24560     E8 EC BF FD | 	call	#__system___float_fromuns
24564     12 FB 61 F5 | 	xor	result1, local04
24568     FD 12 02 F6 | 	mov	arg01, result1
2456c     10 15 02 F6 | 	mov	arg02, local02
24570     01 16 06 F6 | 	mov	arg03, #1
24574     0C F5 BF FD | 	call	#__system___float_cmp
24578     00 FA 0D F2 | 	cmp	result1, #0 wz
2457c     18 00 90 5D |  if_ne	jmp	#LR__3450
24580     00 C0 1F FF 
24584     00 12 06 F6 | 	mov	arg01, ##1065353216
24588     0F 15 02 F6 | 	mov	arg02, local01
2458c     11 17 02 F6 | 	mov	arg03, local03
24590     A0 00 B0 FD | 	call	#__system___float_pow_n
24594     58 00 90 FD | 	jmp	#LR__3451
24598                 | LR__3450
24598     0F 13 02 F6 | 	mov	arg01, local01
2459c     00 14 06 F6 | 	mov	arg02, #0
245a0     01 16 06 F6 | 	mov	arg03, #1
245a4     DC F4 BF FD | 	call	#__system___float_cmp
245a8     00 FA 55 F2 | 	cmps	result1, #0 wc
245ac     00 E0 3F CF 
245b0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
245b4     38 00 90 CD |  if_b	jmp	#LR__3451
245b8     0F 13 02 F6 | 	mov	arg01, local01
245bc     00 14 06 F6 | 	mov	arg02, #0
245c0     01 16 06 F6 | 	mov	arg03, #1
245c4     BC F4 BF FD | 	call	#__system___float_cmp
245c8     00 FA 0D F2 | 	cmp	result1, #0 wz
245cc     00 FA 05 A6 |  if_e	mov	result1, #0
245d0     1C 00 90 AD |  if_e	jmp	#LR__3451
245d4     0F 13 02 F6 | 	mov	arg01, local01
245d8     20 FE BF FD | 	call	#__system____builtin_log2f
245dc     FD 12 02 F6 | 	mov	arg01, result1
245e0     10 15 02 F6 | 	mov	arg02, local02
245e4     68 F0 BF FD | 	call	#__system___float_mul
245e8     FD 12 02 F6 | 	mov	arg01, result1
245ec     F8 FC BF FD | 	call	#__system____builtin_exp2f
245f0                 | LR__3451
245f0     A7 F0 03 F6 | 	mov	ptra, fp
245f4     B2 00 A0 FD | 	call	#popregs_
245f8                 | __system____builtin_powf_ret
245f8     2D 00 64 FD | 	ret
245fc                 | 
245fc                 | __system____builtin_logbase
245fc     02 4A 05 F6 | 	mov	COUNT_, #2
24600     A8 00 A0 FD | 	call	#pushregs_
24604     09 1F 02 F6 | 	mov	local01, arg01
24608     0A 13 02 F6 | 	mov	arg01, arg02
2460c     EC FD BF FD | 	call	#__system____builtin_log2f
24610     FD 20 02 F6 | 	mov	local02, result1
24614     0F 13 02 F6 | 	mov	arg01, local01
24618     E0 FD BF FD | 	call	#__system____builtin_log2f
2461c     FD 14 02 F6 | 	mov	arg02, result1
24620     10 13 02 F6 | 	mov	arg01, local02
24624     2C F2 BF FD | 	call	#__system___float_div
24628     A7 F0 03 F6 | 	mov	ptra, fp
2462c     B2 00 A0 FD | 	call	#popregs_
24630                 | __system____builtin_logbase_ret
24630     2D 00 64 FD | 	ret
24634                 | 
24634                 | __system___float_pow_n
24634     05 4A 05 F6 | 	mov	COUNT_, #5
24638     A8 00 A0 FD | 	call	#pushregs_
2463c     09 1F 02 F6 | 	mov	local01, arg01
24640     0A 21 02 F6 | 	mov	local02, arg02
24644     0B 23 02 F6 | 	mov	local03, arg03
24648     00 22 56 F2 | 	cmps	local03, #0 wc
2464c     18 00 90 3D |  if_ae	jmp	#LR__3460
24650     01 24 06 F6 | 	mov	local04, #1
24654     11 23 62 F6 | 	neg	local03, local03
24658     00 22 56 F2 | 	cmps	local03, #0 wc
2465c     00 FA 05 C6 |  if_b	mov	result1, #0
24660     94 00 90 CD |  if_b	jmp	#LR__3468
24664     04 00 90 FD | 	jmp	#LR__3461
24668                 | LR__3460
24668     00 24 06 F6 | 	mov	local04, #0
2466c                 | LR__3461
2466c     00 C0 1F FF 
24670     00 26 06 F6 | 	mov	local05, ##1065353216
24674                 | LR__3462
24674     01 22 56 F2 | 	cmps	local03, #1 wc
24678     30 00 90 CD |  if_b	jmp	#LR__3464
2467c     01 22 CE F7 | 	test	local03, #1 wz
24680     10 00 90 AD |  if_e	jmp	#LR__3463
24684     13 13 02 F6 | 	mov	arg01, local05
24688     10 15 02 F6 | 	mov	arg02, local02
2468c     C0 EF BF FD | 	call	#__system___float_mul
24690     FD 26 02 F6 | 	mov	local05, result1
24694                 | LR__3463
24694     01 22 C6 F0 | 	sar	local03, #1
24698     10 13 02 F6 | 	mov	arg01, local02
2469c     10 15 02 F6 | 	mov	arg02, local02
246a0     AC EF BF FD | 	call	#__system___float_mul
246a4     FD 20 02 F6 | 	mov	local02, result1
246a8     C8 FF 9F FD | 	jmp	#LR__3462
246ac                 | LR__3464
246ac     00 24 0E F2 | 	cmp	local04, #0 wz
246b0     14 00 90 AD |  if_e	jmp	#LR__3465
246b4     0F 13 02 F6 | 	mov	arg01, local01
246b8     13 15 02 F6 | 	mov	arg02, local05
246bc     94 F1 BF FD | 	call	#__system___float_div
246c0     FD 26 02 F6 | 	mov	local05, result1
246c4     2C 00 90 FD | 	jmp	#LR__3467
246c8                 | LR__3465
246c8     0F 13 02 F6 | 	mov	arg01, local01
246cc     00 C0 1F FF 
246d0     00 14 06 F6 | 	mov	arg02, ##1065353216
246d4     01 16 06 F6 | 	mov	arg03, #1
246d8     A8 F3 BF FD | 	call	#__system___float_cmp
246dc     00 FA 0D F2 | 	cmp	result1, #0 wz
246e0     10 00 90 AD |  if_e	jmp	#LR__3466
246e4     0F 13 02 F6 | 	mov	arg01, local01
246e8     13 15 02 F6 | 	mov	arg02, local05
246ec     60 EF BF FD | 	call	#__system___float_mul
246f0     FD 26 02 F6 | 	mov	local05, result1
246f4                 | LR__3466
246f4                 | LR__3467
246f4     13 FB 01 F6 | 	mov	result1, local05
246f8                 | LR__3468
246f8     A7 F0 03 F6 | 	mov	ptra, fp
246fc     B2 00 A0 FD | 	call	#popregs_
24700                 | __system___float_pow_n_ret
24700     2D 00 64 FD | 	ret
24704                 | 
24704                 | __system___gc_ptrs
24704     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24708     00 03 02 F6 | 	mov	_var02, _var01
2470c     76 01 00 FF 
24710     F8 03 06 F1 | 	add	_var02, ##191992
24714     00 FD 09 FB | 	rdlong	result2, _var01 wz
24718     74 00 90 5D |  if_ne	jmp	#LR__3470
2471c     01 FD 01 F6 | 	mov	result2, _var02
24720     00 FD 81 F1 | 	sub	result2, _var01
24724     00 03 58 FC | 	wrword	#1, _var01
24728     00 FB 01 F6 | 	mov	result1, _var01
2472c     02 FA 05 F1 | 	add	result1, #2
24730     36 00 80 FF 
24734     FD 20 59 FC | 	wrword	##27792, result1
24738     00 FB 01 F6 | 	mov	result1, _var01
2473c     04 FA 05 F1 | 	add	result1, #4
24740     FD 00 58 FC | 	wrword	#0, result1
24744     00 FB 01 F6 | 	mov	result1, _var01
24748     06 FA 05 F1 | 	add	result1, #6
2474c     FD 02 58 FC | 	wrword	#1, result1
24750     10 00 06 F1 | 	add	_var01, #16
24754     FE FC 51 F6 | 	abs	result2, result2 wc
24758     04 FC 45 F0 | 	shr	result2, #4
2475c     FE FC 81 F6 | 	negc	result2, result2
24760     00 FD 51 FC | 	wrword	result2, _var01
24764     00 FD 01 F6 | 	mov	result2, _var01
24768     02 FC 05 F1 | 	add	result2, #2
2476c     36 00 80 FF 
24770     FE 1E 59 FC | 	wrword	##27791, result2
24774     00 FD 01 F6 | 	mov	result2, _var01
24778     04 FC 05 F1 | 	add	result2, #4
2477c     FE 00 58 FC | 	wrword	#0, result2
24780     00 FD 01 F6 | 	mov	result2, _var01
24784     06 FC 05 F1 | 	add	result2, #6
24788     FE 00 58 FC | 	wrword	#0, result2
2478c     10 00 86 F1 | 	sub	_var01, #16
24790                 | LR__3470
24790     00 FB 01 F6 | 	mov	result1, _var01
24794     01 FD 01 F6 | 	mov	result2, _var02
24798                 | __system___gc_ptrs_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | __system___gc_tryalloc
2479c     0B 4A 05 F6 | 	mov	COUNT_, #11
247a0     A8 00 A0 FD | 	call	#pushregs_
247a4     09 1F 02 F6 | 	mov	local01, arg01
247a8     0A 21 02 F6 | 	mov	local02, arg02
247ac     54 FF BF FD | 	call	#__system___gc_ptrs
247b0     FD 22 02 F6 | 	mov	local03, result1
247b4     FE 24 02 F6 | 	mov	local04, result2
247b8     11 27 02 F6 | 	mov	local05, local03
247bc     00 28 06 F6 | 	mov	local06, #0
247c0     97 1E 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
247c4                 | LR__3480
247c4     13 2B 02 F6 | 	mov	local07, local05
247c8     06 26 06 F1 | 	add	local05, #6
247cc     13 15 EA FA | 	rdword	arg02, local05 wz
247d0     11 13 02 F6 | 	mov	arg01, local03
247d4     00 FA 05 A6 |  if_e	mov	result1, #0
247d8     04 14 66 50 |  if_ne	shl	arg02, #4
247dc     0A 13 02 51 |  if_ne	add	arg01, arg02
247e0     09 FB 01 56 |  if_ne	mov	result1, arg01
247e4     FD 26 0A F6 | 	mov	local05, result1 wz
247e8     13 29 E2 5A |  if_ne	rdword	local06, local05
247ec     00 26 0E F2 | 	cmp	local05, #0 wz
247f0     12 27 52 52 |  if_ne	cmps	local05, local04 wc
247f4     08 00 90 1D |  if_a	jmp	#LR__3482
247f8     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
247fc     C4 FF 9F 1D |  if_a	jmp	#LR__3480
24800                 | LR__3481
24800                 | LR__3482
24800     00 26 0E F2 | 	cmp	local05, #0 wz
24804     13 FB 01 A6 |  if_e	mov	result1, local05
24808     3C 01 90 AD |  if_e	jmp	#LR__3485
2480c     13 FD 01 F6 | 	mov	result2, local05
24810     06 FC 05 F1 | 	add	result2, #6
24814     FE 2C E2 FA | 	rdword	local08, result2
24818     14 1F 52 F2 | 	cmps	local01, local06 wc
2481c     C0 00 90 3D |  if_ae	jmp	#LR__3484
24820     13 1F 52 FC | 	wrword	local01, local05
24824     13 13 02 F6 | 	mov	arg01, local05
24828     0F 2D 02 F6 | 	mov	local08, local01
2482c     04 2C 66 F0 | 	shl	local08, #4
24830     16 13 02 F1 | 	add	arg01, local08
24834     0F 29 82 F1 | 	sub	local06, local01
24838     09 29 52 FC | 	wrword	local06, arg01
2483c     09 2D 02 F6 | 	mov	local08, arg01
24840     02 2C 06 F1 | 	add	local08, #2
24844     36 00 80 FF 
24848     16 1F 59 FC | 	wrword	##27791, local08
2484c     13 15 0A F6 | 	mov	arg02, local05 wz
24850     00 FA 05 A6 |  if_e	mov	result1, #0
24854     11 15 82 51 |  if_ne	sub	arg02, local03
24858     04 14 46 50 |  if_ne	shr	arg02, #4
2485c     0A FB 01 56 |  if_ne	mov	result1, arg02
24860     09 2D 02 F6 | 	mov	local08, arg01
24864     04 2C 06 F1 | 	add	local08, #4
24868     16 FB 51 FC | 	wrword	result1, local08
2486c     13 2D 02 F6 | 	mov	local08, local05
24870     06 2C 06 F1 | 	add	local08, #6
24874     09 15 02 F6 | 	mov	arg02, arg01
24878     16 2D E2 FA | 	rdword	local08, local08
2487c     06 14 06 F1 | 	add	arg02, #6
24880     0A 2D 52 FC | 	wrword	local08, arg02
24884     09 2F 02 F6 | 	mov	local09, arg01
24888     17 15 0A F6 | 	mov	arg02, local09 wz
2488c     00 FA 05 A6 |  if_e	mov	result1, #0
24890     11 15 82 51 |  if_ne	sub	arg02, local03
24894     04 14 46 50 |  if_ne	shr	arg02, #4
24898     0A FB 01 56 |  if_ne	mov	result1, arg02
2489c     FD 2C 02 F6 | 	mov	local08, result1
248a0     09 31 EA FA | 	rdword	local10, arg01 wz
248a4     00 FA 05 A6 |  if_e	mov	result1, #0
248a8     04 30 66 50 |  if_ne	shl	local10, #4
248ac     18 13 02 51 |  if_ne	add	arg01, local10
248b0     09 FB 01 56 |  if_ne	mov	result1, arg01
248b4     FD 32 0A F6 | 	mov	local11, result1 wz
248b8     24 00 90 AD |  if_e	jmp	#LR__3483
248bc     12 33 52 F2 | 	cmps	local11, local04 wc
248c0     1C 00 90 3D |  if_ae	jmp	#LR__3483
248c4     17 15 0A F6 | 	mov	arg02, local09 wz
248c8     00 FA 05 A6 |  if_e	mov	result1, #0
248cc     11 15 82 51 |  if_ne	sub	arg02, local03
248d0     04 14 46 50 |  if_ne	shr	arg02, #4
248d4     0A FB 01 56 |  if_ne	mov	result1, arg02
248d8     04 32 06 F1 | 	add	local11, #4
248dc     19 FB 51 FC | 	wrword	result1, local11
248e0                 | LR__3483
248e0                 | LR__3484
248e0     06 2A 06 F1 | 	add	local07, #6
248e4     15 2D 52 FC | 	wrword	local08, local07
248e8     36 00 00 FF 
248ec     80 2E 06 F6 | 	mov	local09, ##27776
248f0     10 2F 42 F5 | 	or	local09, local02
248f4     00 FA 05 F6 | 	mov	result1, #0
248f8     01 FA 61 FD | 	cogid	result1
248fc     FD 2E 42 F5 | 	or	local09, result1
24900     13 33 02 F6 | 	mov	local11, local05
24904     02 32 06 F1 | 	add	local11, #2
24908     19 2F 52 FC | 	wrword	local09, local11
2490c     11 2F 02 F6 | 	mov	local09, local03
24910     08 2E 06 F1 | 	add	local09, #8
24914     13 33 02 F6 | 	mov	local11, local05
24918     17 2F E2 FA | 	rdword	local09, local09
2491c     06 32 06 F1 | 	add	local11, #6
24920     19 2F 52 FC | 	wrword	local09, local11
24924     13 15 0A F6 | 	mov	arg02, local05 wz
24928     00 FA 05 A6 |  if_e	mov	result1, #0
2492c     11 15 82 51 |  if_ne	sub	arg02, local03
24930     04 14 46 50 |  if_ne	shr	arg02, #4
24934     0A FB 01 56 |  if_ne	mov	result1, arg02
24938     08 22 06 F1 | 	add	local03, #8
2493c     11 FB 51 FC | 	wrword	result1, local03
24940     08 26 06 F1 | 	add	local05, #8
24944     13 FB 01 F6 | 	mov	result1, local05
24948                 | LR__3485
24948     A7 F0 03 F6 | 	mov	ptra, fp
2494c     B2 00 A0 FD | 	call	#popregs_
24950                 | __system___gc_tryalloc_ret
24950     2D 00 64 FD | 	ret
24954                 | 
24954                 | __system___gc_alloc_managed
24954     01 4A 05 F6 | 	mov	COUNT_, #1
24958     A8 00 A0 FD | 	call	#pushregs_
2495c     09 1F 02 F6 | 	mov	local01, arg01
24960     00 14 06 F6 | 	mov	arg02, #0
24964     1C 00 B0 FD | 	call	#__system___gc_doalloc
24968     FD 14 0A F6 | 	mov	arg02, result1 wz
2496c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
24970     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24974     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24978     A7 F0 03 F6 | 	mov	ptra, fp
2497c     B2 00 A0 FD | 	call	#popregs_
24980                 | __system___gc_alloc_managed_ret
24980     2D 00 64 FD | 	ret
24984                 | 
24984                 | __system___gc_doalloc
24984     06 4A 05 F6 | 	mov	COUNT_, #6
24988     A8 00 A0 FD | 	call	#pushregs_
2498c     09 1F 0A F6 | 	mov	local01, arg01 wz
24990     0A 21 02 F6 | 	mov	local02, arg02
24994     00 FA 05 A6 |  if_e	mov	result1, #0
24998     8C 00 90 AD |  if_e	jmp	#LR__3497
2499c     17 1E 06 F1 | 	add	local01, #23
249a0     0F 1E 26 F5 | 	andn	local01, #15
249a4     04 1E 46 F0 | 	shr	local01, #4
249a8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
249ac     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
249b0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
249b4     E4 C0 BF FD | 	call	#__system___lockmem
249b8     0F 13 02 F6 | 	mov	arg01, local01
249bc     10 15 02 F6 | 	mov	arg02, local02
249c0     D8 FD BF FD | 	call	#__system___gc_tryalloc
249c4     FD 22 0A F6 | 	mov	local03, result1 wz
249c8     14 00 90 5D |  if_ne	jmp	#LR__3490
249cc     70 03 B0 FD | 	call	#__system___gc_docollect
249d0     0F 13 02 F6 | 	mov	arg01, local01
249d4     10 15 02 F6 | 	mov	arg02, local02
249d8     C0 FD BF FD | 	call	#__system___gc_tryalloc
249dc     FD 22 02 F6 | 	mov	local03, result1
249e0                 | LR__3490
249e0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
249e4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
249e8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
249ec     09 01 68 FC | 	wrlong	#0, arg01
249f0     00 22 0E F2 | 	cmp	local03, #0 wz
249f4     2C 00 90 AD |  if_e	jmp	#LR__3496
249f8     04 1E 66 F0 | 	shl	local01, #4
249fc     08 1E 86 F1 | 	sub	local01, #8
24a00     0F 25 52 F6 | 	abs	local04, local01 wc
24a04     02 24 46 F0 | 	shr	local04, #2
24a08     12 27 8A F6 | 	negc	local05, local04 wz
24a0c     11 29 02 F6 | 	mov	local06, local03
24a10     10 00 90 AD |  if_e	jmp	#LR__3495
24a14     97 06 48 FB | 	callpa	#(@LR__3493-@LR__3491)>>2,fcache_load_ptr_
24a18                 | LR__3491
24a18     13 05 D8 FC | 	rep	@LR__3494, local05
24a1c                 | LR__3492
24a1c     14 01 68 FC | 	wrlong	#0, local06
24a20     04 28 06 F1 | 	add	local06, #4
24a24                 | LR__3493
24a24                 | LR__3494
24a24                 | LR__3495
24a24                 | LR__3496
24a24     11 FB 01 F6 | 	mov	result1, local03
24a28                 | LR__3497
24a28     A7 F0 03 F6 | 	mov	ptra, fp
24a2c     B2 00 A0 FD | 	call	#popregs_
24a30                 | __system___gc_doalloc_ret
24a30     2D 00 64 FD | 	ret
24a34                 | 
24a34                 | __system___gc_isvalidptr
24a34     F8 16 06 F4 | 	bitl	arg03, #248
24a38     08 16 86 F1 | 	sub	arg03, #8
24a3c     09 17 52 F2 | 	cmps	arg03, arg01 wc
24a40     08 00 90 CD |  if_b	jmp	#LR__3500
24a44     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24a48     08 00 90 CD |  if_b	jmp	#LR__3501
24a4c                 | LR__3500
24a4c     00 FA 05 F6 | 	mov	result1, #0
24a50     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24a54                 | LR__3501
24a54     0B 01 02 F6 | 	mov	_var01, arg03
24a58     09 01 62 F5 | 	xor	_var01, arg01
24a5c     0F 00 CE F7 | 	test	_var01, #15 wz
24a60     00 FA 05 56 |  if_ne	mov	result1, #0
24a64     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24a68     0B 01 02 F6 | 	mov	_var01, arg03
24a6c     02 00 06 F1 | 	add	_var01, #2
24a70     00 01 E2 FA | 	rdword	_var01, _var01
24a74     7F 00 00 FF 
24a78     C0 01 06 F5 | 	and	_var01, ##65472
24a7c     36 00 00 FF 
24a80     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24a84     00 FA 05 56 |  if_ne	mov	result1, #0
24a88     0B FB 01 A6 |  if_e	mov	result1, arg03
24a8c                 | __system___gc_isvalidptr_ret
24a8c     2D 00 64 FD | 	ret
24a90                 | 
24a90                 | __system___gc_free
24a90     09 17 02 F6 | 	mov	arg03, arg01
24a94     6C FC BF FD | 	call	#__system___gc_ptrs
24a98     FD 12 02 F6 | 	mov	arg01, result1
24a9c     FE 14 02 F6 | 	mov	arg02, result2
24aa0     90 FF BF FD | 	call	#__system___gc_isvalidptr
24aa4     FD 14 0A F6 | 	mov	arg02, result1 wz
24aa8     28 00 90 AD |  if_e	jmp	#LR__3510
24aac     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24ab0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24ab4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24ab8     E0 BF BF FD | 	call	#__system___lockmem
24abc     0A 13 02 F6 | 	mov	arg01, arg02
24ac0     14 00 B0 FD | 	call	#__system___gc_dofree
24ac4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24ac8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24acc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24ad0     09 01 68 FC | 	wrlong	#0, arg01
24ad4                 | LR__3510
24ad4                 | __system___gc_free_ret
24ad4     2D 00 64 FD | 	ret
24ad8                 | 
24ad8                 | __system___gc_dofree
24ad8     06 4A 05 F6 | 	mov	COUNT_, #6
24adc     A8 00 A0 FD | 	call	#pushregs_
24ae0     09 1F 02 F6 | 	mov	local01, arg01
24ae4     1C FC BF FD | 	call	#__system___gc_ptrs
24ae8     FD 20 02 F6 | 	mov	local02, result1
24aec     FE 22 02 F6 | 	mov	local03, result2
24af0     0F 15 02 F6 | 	mov	arg02, local01
24af4     02 14 06 F1 | 	add	arg02, #2
24af8     36 00 80 FF 
24afc     0A 1F 59 FC | 	wrword	##27791, arg02
24b00     0F 25 02 F6 | 	mov	local04, local01
24b04     0F 13 02 F6 | 	mov	arg01, local01
24b08     09 27 EA FA | 	rdword	local05, arg01 wz
24b0c     00 FA 05 A6 |  if_e	mov	result1, #0
24b10     04 26 66 50 |  if_ne	shl	local05, #4
24b14     13 13 02 51 |  if_ne	add	arg01, local05
24b18     09 FB 01 56 |  if_ne	mov	result1, arg01
24b1c     FD 28 02 F6 | 	mov	local06, result1
24b20     97 24 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
24b24                 | LR__3520
24b24     04 24 06 F1 | 	add	local04, #4
24b28     12 15 EA FA | 	rdword	arg02, local04 wz
24b2c     10 13 02 F6 | 	mov	arg01, local02
24b30     00 FA 05 A6 |  if_e	mov	result1, #0
24b34     04 14 66 50 |  if_ne	shl	arg02, #4
24b38     0A 13 02 51 |  if_ne	add	arg01, arg02
24b3c     09 FB 01 56 |  if_ne	mov	result1, arg01
24b40     FD 24 0A F6 | 	mov	local04, result1 wz
24b44     24 00 90 AD |  if_e	jmp	#LR__3522
24b48     12 13 02 F6 | 	mov	arg01, local04
24b4c     00 FA 05 F6 | 	mov	result1, #0
24b50     02 12 06 F1 | 	add	arg01, #2
24b54     09 13 E2 FA | 	rdword	arg01, arg01
24b58     36 00 00 FF 
24b5c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24b60     01 FA 65 A6 |  if_e	neg	result1, #1
24b64     00 FA 0D F2 | 	cmp	result1, #0 wz
24b68     B8 FF 9F AD |  if_e	jmp	#LR__3520
24b6c                 | LR__3521
24b6c                 | LR__3522
24b6c     00 24 0E F2 | 	cmp	local04, #0 wz
24b70     10 25 02 A6 |  if_e	mov	local04, local02
24b74     12 15 02 F6 | 	mov	arg02, local04
24b78     06 14 06 F1 | 	add	arg02, #6
24b7c     0F 13 02 F6 | 	mov	arg01, local01
24b80     0A 15 E2 FA | 	rdword	arg02, arg02
24b84     06 12 06 F1 | 	add	arg01, #6
24b88     09 15 52 FC | 	wrword	arg02, arg01
24b8c     0F 15 0A F6 | 	mov	arg02, local01 wz
24b90     00 FA 05 A6 |  if_e	mov	result1, #0
24b94     10 15 82 51 |  if_ne	sub	arg02, local02
24b98     04 14 46 50 |  if_ne	shr	arg02, #4
24b9c     0A FB 01 56 |  if_ne	mov	result1, arg02
24ba0     12 15 02 F6 | 	mov	arg02, local04
24ba4     06 14 06 F1 | 	add	arg02, #6
24ba8     0A FB 51 FC | 	wrword	result1, arg02
24bac     10 25 0A F2 | 	cmp	local04, local02 wz
24bb0     A4 00 90 AD |  if_e	jmp	#LR__3525
24bb4     12 13 02 F6 | 	mov	arg01, local04
24bb8     09 27 EA FA | 	rdword	local05, arg01 wz
24bbc     00 FA 05 A6 |  if_e	mov	result1, #0
24bc0     04 26 66 50 |  if_ne	shl	local05, #4
24bc4     13 13 02 51 |  if_ne	add	arg01, local05
24bc8     09 FB 01 56 |  if_ne	mov	result1, arg01
24bcc     0F FB 09 F2 | 	cmp	result1, local01 wz
24bd0     84 00 90 5D |  if_ne	jmp	#LR__3524
24bd4     12 29 E2 FA | 	rdword	local06, local04
24bd8     0F 15 E2 FA | 	rdword	arg02, local01
24bdc     0A 29 02 F1 | 	add	local06, arg02
24be0     12 29 52 FC | 	wrword	local06, local04
24be4     0F 29 02 F6 | 	mov	local06, local01
24be8     02 28 06 F1 | 	add	local06, #2
24bec     14 01 58 FC | 	wrword	#0, local06
24bf0     0F 13 02 F6 | 	mov	arg01, local01
24bf4     09 27 EA FA | 	rdword	local05, arg01 wz
24bf8     00 FA 05 A6 |  if_e	mov	result1, #0
24bfc     04 26 66 50 |  if_ne	shl	local05, #4
24c00     13 13 02 51 |  if_ne	add	arg01, local05
24c04     09 FB 01 56 |  if_ne	mov	result1, arg01
24c08     FD 28 02 F6 | 	mov	local06, result1
24c0c     11 29 52 F2 | 	cmps	local06, local03 wc
24c10     20 00 90 3D |  if_ae	jmp	#LR__3523
24c14     12 15 0A F6 | 	mov	arg02, local04 wz
24c18     00 FA 05 A6 |  if_e	mov	result1, #0
24c1c     10 15 82 51 |  if_ne	sub	arg02, local02
24c20     04 14 46 50 |  if_ne	shr	arg02, #4
24c24     0A FB 01 56 |  if_ne	mov	result1, arg02
24c28     14 15 02 F6 | 	mov	arg02, local06
24c2c     04 14 06 F1 | 	add	arg02, #4
24c30     0A FB 51 FC | 	wrword	result1, arg02
24c34                 | LR__3523
24c34     0F 15 02 F6 | 	mov	arg02, local01
24c38     06 14 06 F1 | 	add	arg02, #6
24c3c     12 FD 01 F6 | 	mov	result2, local04
24c40     0A 15 E2 FA | 	rdword	arg02, arg02
24c44     06 FC 05 F1 | 	add	result2, #6
24c48     FE 14 52 FC | 	wrword	arg02, result2
24c4c     06 1E 06 F1 | 	add	local01, #6
24c50     0F 01 58 FC | 	wrword	#0, local01
24c54     12 1F 02 F6 | 	mov	local01, local04
24c58                 | LR__3524
24c58                 | LR__3525
24c58     0F 13 02 F6 | 	mov	arg01, local01
24c5c     09 27 EA FA | 	rdword	local05, arg01 wz
24c60     00 FA 05 A6 |  if_e	mov	result1, #0
24c64     04 26 66 50 |  if_ne	shl	local05, #4
24c68     13 13 02 51 |  if_ne	add	arg01, local05
24c6c     09 FB 01 56 |  if_ne	mov	result1, arg01
24c70     FD 14 0A F6 | 	mov	arg02, result1 wz
24c74     B8 00 90 AD |  if_e	jmp	#LR__3527
24c78     11 15 52 F2 | 	cmps	arg02, local03 wc
24c7c     B0 00 90 3D |  if_ae	jmp	#LR__3527
24c80     0A 13 02 F6 | 	mov	arg01, arg02
24c84     00 FA 05 F6 | 	mov	result1, #0
24c88     02 12 06 F1 | 	add	arg01, #2
24c8c     09 13 E2 FA | 	rdword	arg01, arg01
24c90     36 00 00 FF 
24c94     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24c98     01 FA 65 A6 |  if_e	neg	result1, #1
24c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
24ca0     8C 00 90 AD |  if_e	jmp	#LR__3527
24ca4     0F 25 02 F6 | 	mov	local04, local01
24ca8     12 29 E2 FA | 	rdword	local06, local04
24cac     0A 13 02 F6 | 	mov	arg01, arg02
24cb0     09 1F E2 FA | 	rdword	local01, arg01
24cb4     0F 29 02 F1 | 	add	local06, local01
24cb8     12 29 52 FC | 	wrword	local06, local04
24cbc     09 29 02 F6 | 	mov	local06, arg01
24cc0     06 28 06 F1 | 	add	local06, #6
24cc4     12 1F 02 F6 | 	mov	local01, local04
24cc8     14 29 E2 FA | 	rdword	local06, local06
24ccc     06 1E 06 F1 | 	add	local01, #6
24cd0     0F 29 52 FC | 	wrword	local06, local01
24cd4     09 29 02 F6 | 	mov	local06, arg01
24cd8     02 28 06 F1 | 	add	local06, #2
24cdc     14 55 59 FC | 	wrword	#170, local06
24ce0     09 29 02 F6 | 	mov	local06, arg01
24ce4     06 28 06 F1 | 	add	local06, #6
24ce8     14 01 58 FC | 	wrword	#0, local06
24cec     09 27 EA FA | 	rdword	local05, arg01 wz
24cf0     00 FA 05 A6 |  if_e	mov	result1, #0
24cf4     04 26 66 50 |  if_ne	shl	local05, #4
24cf8     13 13 02 51 |  if_ne	add	arg01, local05
24cfc     09 FB 01 56 |  if_ne	mov	result1, arg01
24d00     FD 28 0A F6 | 	mov	local06, result1 wz
24d04     28 00 90 AD |  if_e	jmp	#LR__3526
24d08     11 29 52 F2 | 	cmps	local06, local03 wc
24d0c     20 00 90 3D |  if_ae	jmp	#LR__3526
24d10     12 15 0A F6 | 	mov	arg02, local04 wz
24d14     00 FA 05 A6 |  if_e	mov	result1, #0
24d18     10 15 82 51 |  if_ne	sub	arg02, local02
24d1c     04 14 46 50 |  if_ne	shr	arg02, #4
24d20     0A FB 01 56 |  if_ne	mov	result1, arg02
24d24     14 25 02 F6 | 	mov	local04, local06
24d28     04 24 06 F1 | 	add	local04, #4
24d2c     12 FB 51 FC | 	wrword	result1, local04
24d30                 | LR__3526
24d30                 | LR__3527
24d30     14 FB 01 F6 | 	mov	result1, local06
24d34     A7 F0 03 F6 | 	mov	ptra, fp
24d38     B2 00 A0 FD | 	call	#popregs_
24d3c                 | __system___gc_dofree_ret
24d3c     2D 00 64 FD | 	ret
24d40                 | 
24d40                 | __system___gc_docollect
24d40     05 4A 05 F6 | 	mov	COUNT_, #5
24d44     A8 00 A0 FD | 	call	#pushregs_
24d48     B8 F9 BF FD | 	call	#__system___gc_ptrs
24d4c     FE 1E 02 F6 | 	mov	local01, result2
24d50     FD 20 02 F6 | 	mov	local02, result1
24d54     10 13 02 F6 | 	mov	arg01, local02
24d58     09 23 EA FA | 	rdword	local03, arg01 wz
24d5c     00 FA 05 A6 |  if_e	mov	result1, #0
24d60     04 22 66 50 |  if_ne	shl	local03, #4
24d64     11 13 02 51 |  if_ne	add	arg01, local03
24d68     09 FB 01 56 |  if_ne	mov	result1, arg01
24d6c     FD 24 0A F6 | 	mov	local04, result1 wz
24d70     00 FA 05 F6 | 	mov	result1, #0
24d74     01 FA 61 FD | 	cogid	result1
24d78     FD 26 02 F6 | 	mov	local05, result1
24d7c     48 00 90 AD |  if_e	jmp	#LR__3532
24d80     97 22 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
24d84                 | LR__3530
24d84     0F 25 52 F2 | 	cmps	local04, local01 wc
24d88     3C 00 90 3D |  if_ae	jmp	#LR__3532
24d8c     12 15 02 F6 | 	mov	arg02, local04
24d90     02 14 06 F1 | 	add	arg02, #2
24d94     0A 15 E2 FA | 	rdword	arg02, arg02
24d98     20 14 26 F5 | 	andn	arg02, #32
24d9c     12 13 02 F6 | 	mov	arg01, local04
24da0     02 12 06 F1 | 	add	arg01, #2
24da4     09 15 52 FC | 	wrword	arg02, arg01
24da8     12 13 02 F6 | 	mov	arg01, local04
24dac     09 23 EA FA | 	rdword	local03, arg01 wz
24db0     00 FA 05 A6 |  if_e	mov	result1, #0
24db4     04 22 66 50 |  if_ne	shl	local03, #4
24db8     11 13 02 51 |  if_ne	add	arg01, local03
24dbc     09 FB 01 56 |  if_ne	mov	result1, arg01
24dc0     FD 24 0A F6 | 	mov	local04, result1 wz
24dc4     BC FF 9F 5D |  if_ne	jmp	#LR__3530
24dc8                 | LR__3531
24dc8                 | LR__3532
24dc8     00 22 06 F6 | 	mov	local03, #0
24dcc     00 12 06 F6 | 	mov	arg01, #0
24dd0     A0 BC BF FD | 	call	#__system____topofstack
24dd4     FD 14 02 F6 | 	mov	arg02, result1
24dd8     11 13 02 F6 | 	mov	arg01, local03
24ddc     90 00 B0 FD | 	call	#__system___gc_markhub
24de0     1C 01 B0 FD | 	call	#__system___gc_markcog
24de4     10 13 02 F6 | 	mov	arg01, local02
24de8     09 23 EA FA | 	rdword	local03, arg01 wz
24dec     00 FA 05 A6 |  if_e	mov	result1, #0
24df0     04 22 66 50 |  if_ne	shl	local03, #4
24df4     11 13 02 51 |  if_ne	add	arg01, local03
24df8     09 FB 01 56 |  if_ne	mov	result1, arg01
24dfc     FD 20 0A F6 | 	mov	local02, result1 wz
24e00     60 00 90 AD |  if_e	jmp	#LR__3536
24e04                 | LR__3533
24e04     10 25 02 F6 | 	mov	local04, local02
24e08     12 13 02 F6 | 	mov	arg01, local04
24e0c     09 23 EA FA | 	rdword	local03, arg01 wz
24e10     00 FA 05 A6 |  if_e	mov	result1, #0
24e14     04 22 66 50 |  if_ne	shl	local03, #4
24e18     11 13 02 51 |  if_ne	add	arg01, local03
24e1c     09 FB 01 56 |  if_ne	mov	result1, arg01
24e20     FD 20 02 F6 | 	mov	local02, result1
24e24     12 15 02 F6 | 	mov	arg02, local04
24e28     02 14 06 F1 | 	add	arg02, #2
24e2c     0A 15 E2 FA | 	rdword	arg02, arg02
24e30     20 14 CE F7 | 	test	arg02, #32 wz
24e34     10 14 CE A7 |  if_e	test	arg02, #16 wz
24e38     1C 00 90 5D |  if_ne	jmp	#LR__3535
24e3c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24e40     13 15 0A F2 | 	cmp	arg02, local05 wz
24e44     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24e48     0C 00 90 5D |  if_ne	jmp	#LR__3534
24e4c     12 13 02 F6 | 	mov	arg01, local04
24e50     84 FC BF FD | 	call	#__system___gc_dofree
24e54     FD 20 02 F6 | 	mov	local02, result1
24e58                 | LR__3534
24e58                 | LR__3535
24e58     00 20 0E F2 | 	cmp	local02, #0 wz
24e5c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24e60     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3533
24e64                 | LR__3536
24e64     A7 F0 03 F6 | 	mov	ptra, fp
24e68     B2 00 A0 FD | 	call	#popregs_
24e6c                 | __system___gc_docollect_ret
24e6c     2D 00 64 FD | 	ret
24e70                 | 
24e70                 | __system___gc_markhub
24e70     04 4A 05 F6 | 	mov	COUNT_, #4
24e74     A8 00 A0 FD | 	call	#pushregs_
24e78     09 1F 02 F6 | 	mov	local01, arg01
24e7c     0A 21 02 F6 | 	mov	local02, arg02
24e80     80 F8 BF FD | 	call	#__system___gc_ptrs
24e84     FD 22 02 F6 | 	mov	local03, result1
24e88     FE 24 02 F6 | 	mov	local04, result2
24e8c                 | LR__3540
24e8c     10 1F 52 F2 | 	cmps	local01, local02 wc
24e90     60 00 90 3D |  if_ae	jmp	#LR__3541
24e94     0F 17 02 FB | 	rdlong	arg03, local01
24e98     04 1E 06 F1 | 	add	local01, #4
24e9c     12 15 02 F6 | 	mov	arg02, local04
24ea0     11 13 02 F6 | 	mov	arg01, local03
24ea4     8C FB BF FD | 	call	#__system___gc_isvalidptr
24ea8     FD 16 0A F6 | 	mov	arg03, result1 wz
24eac     DC FF 9F AD |  if_e	jmp	#LR__3540
24eb0     0B 13 02 F6 | 	mov	arg01, arg03
24eb4     00 FA 05 F6 | 	mov	result1, #0
24eb8     02 12 06 F1 | 	add	arg01, #2
24ebc     09 13 E2 FA | 	rdword	arg01, arg01
24ec0     36 00 00 FF 
24ec4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24ec8     01 FA 65 A6 |  if_e	neg	result1, #1
24ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
24ed0     B8 FF 9F 5D |  if_ne	jmp	#LR__3540
24ed4     0B FD 01 F6 | 	mov	result2, arg03
24ed8     02 FC 05 F1 | 	add	result2, #2
24edc     FE FC E1 FA | 	rdword	result2, result2
24ee0     0F FC 25 F5 | 	andn	result2, #15
24ee4     2E FC 45 F5 | 	or	result2, #46
24ee8     02 16 06 F1 | 	add	arg03, #2
24eec     0B FD 51 FC | 	wrword	result2, arg03
24ef0     98 FF 9F FD | 	jmp	#LR__3540
24ef4                 | LR__3541
24ef4     A7 F0 03 F6 | 	mov	ptra, fp
24ef8     B2 00 A0 FD | 	call	#popregs_
24efc                 | __system___gc_markhub_ret
24efc     2D 00 64 FD | 	ret
24f00                 | 
24f00                 | __system___gc_markcog
24f00     04 4A 05 F6 | 	mov	COUNT_, #4
24f04     A8 00 A0 FD | 	call	#pushregs_
24f08     F8 F7 BF FD | 	call	#__system___gc_ptrs
24f0c     FD 1E 02 F6 | 	mov	local01, result1
24f10     FE 20 02 F6 | 	mov	local02, result2
24f14     EF 23 06 F6 | 	mov	local03, #495
24f18                 | LR__3550
24f18                 | 	'.live	local03
24f18     00 22 96 F9 | 	alts	local03, #0
24f1c     11 25 02 F6 | 	mov	local04, local03
24f20     0F 13 02 F6 | 	mov	arg01, local01
24f24     10 15 02 F6 | 	mov	arg02, local02
24f28     12 17 02 F6 | 	mov	arg03, local04
24f2c     04 FB BF FD | 	call	#__system___gc_isvalidptr
24f30     00 FA 0D F2 | 	cmp	result1, #0 wz
24f34     18 00 90 AD |  if_e	jmp	#LR__3551
24f38     FD 24 02 F6 | 	mov	local04, result1
24f3c     02 24 06 F1 | 	add	local04, #2
24f40     12 25 E2 FA | 	rdword	local04, local04
24f44     20 24 46 F5 | 	or	local04, #32
24f48     02 FA 05 F1 | 	add	result1, #2
24f4c     FD 24 52 FC | 	wrword	local04, result1
24f50                 | LR__3551
24f50     01 22 86 F1 | 	sub	local03, #1
24f54     00 22 56 F2 | 	cmps	local03, #0 wc
24f58     BC FF 9F 3D |  if_ae	jmp	#LR__3550
24f5c     A7 F0 03 F6 | 	mov	ptra, fp
24f60     B2 00 A0 FD | 	call	#popregs_
24f64                 | __system___gc_markcog_ret
24f64     2D 00 64 FD | 	ret
24f68                 | 
24f68                 | __system__opendir
24f68     06 4A 05 F6 | 	mov	COUNT_, #6
24f6c     A8 00 A0 FD | 	call	#pushregs_
24f70     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24f74     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24f78     09 15 02 F6 | 	mov	arg02, arg01
24f7c     0F 13 02 F6 | 	mov	arg01, local01
24f80     00 16 06 F6 | 	mov	arg03, #0
24f84     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24f88     A8 C2 BF FD | 	call	#__system____getvfsforfile
24f8c     FD 20 0A F6 | 	mov	local02, result1 wz
24f90     10 00 90 AD |  if_e	jmp	#LR__3560
24f94     28 20 06 F1 | 	add	local02, #40
24f98     10 17 0A FB | 	rdlong	arg03, local02 wz
24f9c     28 20 86 F1 | 	sub	local02, #40
24fa0     14 00 90 5D |  if_ne	jmp	#LR__3561
24fa4                 | LR__3560
24fa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24fa8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24fac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24fb0     00 FA 05 F6 | 	mov	result1, #0
24fb4     90 00 90 FD | 	jmp	#LR__3563
24fb8                 | LR__3561
24fb8     5C 12 06 F6 | 	mov	arg01, #92
24fbc     10 14 06 F6 | 	mov	arg02, #16
24fc0     C0 F9 BF FD | 	call	#__system___gc_doalloc
24fc4     FD 22 0A F6 | 	mov	local03, result1 wz
24fc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24fcc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24fd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24fd4     00 FA 05 A6 |  if_e	mov	result1, #0
24fd8     6C 00 90 AD |  if_e	jmp	#LR__3563
24fdc     28 20 06 F1 | 	add	local02, #40
24fe0     10 25 02 FB | 	rdlong	local04, local02
24fe4     12 27 02 F6 | 	mov	local05, local04
24fe8     28 20 86 F1 | 	sub	local02, #40
24fec     13 26 46 F7 | 	zerox	local05, #19
24ff0     14 24 46 F0 | 	shr	local04, #20
24ff4     02 24 66 F0 | 	shl	local04, #2
24ff8     ED 24 02 F1 | 	add	local04, __methods__
24ffc     12 25 02 FB | 	rdlong	local04, local04
25000     11 13 02 F6 | 	mov	arg01, local03
25004     0F 15 02 F6 | 	mov	arg02, local01
25008     F2 28 02 F6 | 	mov	local06, objptr
2500c     13 E5 01 F6 | 	mov	objptr, local05
25010     2D 24 62 FD | 	call	local04
25014     14 E5 01 F6 | 	mov	objptr, local06
25018     FD 16 0A F6 | 	mov	arg03, result1 wz
2501c     20 00 90 AD |  if_e	jmp	#LR__3562
25020     00 16 4E F2 | 	cmps	arg03, #0 wz
25024     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25028     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2502c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25030     11 13 02 F6 | 	mov	arg01, local03
25034     58 FA BF FD | 	call	#__system___gc_free
25038     00 FA 05 F6 | 	mov	result1, #0
2503c     08 00 90 FD | 	jmp	#LR__3563
25040                 | LR__3562
25040     11 21 62 FC | 	wrlong	local02, local03
25044     11 FB 01 F6 | 	mov	result1, local03
25048                 | LR__3563
25048     A7 F0 03 F6 | 	mov	ptra, fp
2504c     B2 00 A0 FD | 	call	#popregs_
25050                 | __system__opendir_ret
25050     2D 00 64 FD | 	ret
25054                 | 
25054                 | __system__closedir
25054     04 4A 05 F6 | 	mov	COUNT_, #4
25058     A8 00 A0 FD | 	call	#pushregs_
2505c     09 1F 02 F6 | 	mov	local01, arg01
25060     0F 13 02 FB | 	rdlong	arg01, local01
25064     2C 12 06 F1 | 	add	arg01, #44
25068     09 21 02 FB | 	rdlong	local02, arg01
2506c     10 23 02 F6 | 	mov	local03, local02
25070     13 22 46 F7 | 	zerox	local03, #19
25074     14 20 46 F0 | 	shr	local02, #20
25078     02 20 66 F0 | 	shl	local02, #2
2507c     ED 20 02 F1 | 	add	local02, __methods__
25080     10 21 02 FB | 	rdlong	local02, local02
25084     0F 13 02 F6 | 	mov	arg01, local01
25088     F2 24 02 F6 | 	mov	local04, objptr
2508c     11 E5 01 F6 | 	mov	objptr, local03
25090     2D 20 62 FD | 	call	local02
25094     12 E5 01 F6 | 	mov	objptr, local04
25098     FD 24 02 F6 | 	mov	local04, result1
2509c     0F 13 02 F6 | 	mov	arg01, local01
250a0     EC F9 BF FD | 	call	#__system___gc_free
250a4     00 24 4E F2 | 	cmps	local04, #0 wz
250a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
250ac     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
250b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
250b4     01 FA 65 56 |  if_ne	neg	result1, #1
250b8     00 FA 05 A6 |  if_e	mov	result1, #0
250bc     A7 F0 03 F6 | 	mov	ptra, fp
250c0     B2 00 A0 FD | 	call	#popregs_
250c4                 | __system__closedir_ret
250c4     2D 00 64 FD | 	ret
250c8                 | 
250c8                 | __system__readdir
250c8     04 4A 05 F6 | 	mov	COUNT_, #4
250cc     A8 00 A0 FD | 	call	#pushregs_
250d0     09 15 0A FB | 	rdlong	arg02, arg01 wz
250d4     08 12 06 F1 | 	add	arg01, #8
250d8     09 1F 02 F6 | 	mov	local01, arg01
250dc     08 12 86 F1 | 	sub	arg01, #8
250e0     00 FA 05 A6 |  if_e	mov	result1, #0
250e4     5C 00 90 AD |  if_e	jmp	#LR__3571
250e8     30 14 06 F1 | 	add	arg02, #48
250ec     0A 21 02 FB | 	rdlong	local02, arg02
250f0     10 23 02 F6 | 	mov	local03, local02
250f4     13 22 46 F7 | 	zerox	local03, #19
250f8     14 20 46 F0 | 	shr	local02, #20
250fc     02 20 66 F0 | 	shl	local02, #2
25100     ED 20 02 F1 | 	add	local02, __methods__
25104     10 21 02 FB | 	rdlong	local02, local02
25108     0F 15 02 F6 | 	mov	arg02, local01
2510c     F2 24 02 F6 | 	mov	local04, objptr
25110     11 E5 01 F6 | 	mov	objptr, local03
25114     2D 20 62 FD | 	call	local02
25118     12 E5 01 F6 | 	mov	objptr, local04
2511c     00 FA 4D F2 | 	cmps	result1, #0 wz
25120     1C 00 90 AD |  if_e	jmp	#LR__3570
25124     01 FA 55 F2 | 	cmps	result1, #1 wc
25128     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2512c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25130     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25134     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25138     00 FA 05 F6 | 	mov	result1, #0
2513c     04 00 90 FD | 	jmp	#LR__3571
25140                 | LR__3570
25140     0F FB 01 F6 | 	mov	result1, local01
25144                 | LR__3571
25144     A7 F0 03 F6 | 	mov	ptra, fp
25148     B2 00 A0 FD | 	call	#popregs_
2514c                 | __system__readdir_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | __system___openraw
25150     15 4A 05 F6 | 	mov	COUNT_, #21
25154     A8 00 A0 FD | 	call	#pushregs_
25158     09 1F 02 F6 | 	mov	local01, arg01
2515c     0A 21 02 F6 | 	mov	local02, arg02
25160     0B 23 02 F6 | 	mov	local03, arg03
25164     0C 25 02 F6 | 	mov	local04, arg04
25168     04 26 06 F6 | 	mov	local05, #4
2516c     0F 29 02 F6 | 	mov	local06, local01
25170     00 2A 06 F6 | 	mov	local07, #0
25174     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25178     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
2517c     16 13 02 F6 | 	mov	arg01, local08
25180     10 15 02 F6 | 	mov	arg02, local02
25184     00 16 06 F6 | 	mov	arg03, #0
25188     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2518c     A4 C0 BF FD | 	call	#__system____getvfsforfile
25190     FD 2E 0A F6 | 	mov	local09, result1 wz
25194     10 00 90 AD |  if_e	jmp	#LR__3580
25198     20 2E 06 F1 | 	add	local09, #32
2519c     17 FB 09 FB | 	rdlong	result1, local09 wz
251a0     20 2E 86 F1 | 	sub	local09, #32
251a4     14 00 90 5D |  if_ne	jmp	#LR__3581
251a8                 | LR__3580
251a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
251ac     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
251b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
251b4     01 FA 65 F6 | 	neg	result1, #1
251b8     8C 02 90 FD | 	jmp	#LR__3594
251bc                 | LR__3581
251bc     14 13 02 F6 | 	mov	arg01, local06
251c0     00 14 06 F6 | 	mov	arg02, #0
251c4     34 16 06 F6 | 	mov	arg03, #52
251c8     09 31 02 F6 | 	mov	local10, arg01
251cc     98 00 A0 FD | 	call	#\builtin_bytefill_
251d0     20 2E 06 F1 | 	add	local09, #32
251d4     17 33 02 FB | 	rdlong	local11, local09
251d8     19 35 02 F6 | 	mov	local12, local11
251dc     19 37 02 F6 | 	mov	local13, local11
251e0     20 2E 86 F1 | 	sub	local09, #32
251e4     1B 39 02 F6 | 	mov	local14, local13
251e8     13 34 46 F7 | 	zerox	local12, #19
251ec     14 38 46 F0 | 	shr	local14, #20
251f0     02 38 66 F0 | 	shl	local14, #2
251f4     ED 38 02 F1 | 	add	local14, __methods__
251f8     1C 39 02 FB | 	rdlong	local14, local14
251fc     14 3B 02 F6 | 	mov	local15, local06
25200     16 3D 02 F6 | 	mov	local16, local08
25204     11 3F 02 F6 | 	mov	local17, local03
25208     1D 13 02 F6 | 	mov	arg01, local15
2520c     1E 15 02 F6 | 	mov	arg02, local16
25210     1F 17 02 F6 | 	mov	arg03, local17
25214     F2 40 02 F6 | 	mov	local18, objptr
25218     1A E5 01 F6 | 	mov	objptr, local12
2521c     2D 38 62 FD | 	call	local14
25220     20 E5 01 F6 | 	mov	objptr, local18
25224     FD 42 0A F6 | 	mov	local19, result1 wz
25228     04 22 CE 57 |  if_ne	test	local03, #4 wz
2522c     58 00 90 AD |  if_e	jmp	#LR__3582
25230     24 2E 06 F1 | 	add	local09, #36
25234     17 33 02 FB | 	rdlong	local11, local09
25238     19 35 02 F6 | 	mov	local12, local11
2523c     19 37 02 F6 | 	mov	local13, local11
25240     24 2E 86 F1 | 	sub	local09, #36
25244     1B 39 02 F6 | 	mov	local14, local13
25248     13 34 46 F7 | 	zerox	local12, #19
2524c     14 38 46 F0 | 	shr	local14, #20
25250     02 38 66 F0 | 	shl	local14, #2
25254     ED 38 02 F1 | 	add	local14, __methods__
25258     1C 39 02 FB | 	rdlong	local14, local14
2525c     14 3B 02 F6 | 	mov	local15, local06
25260     16 3D 02 F6 | 	mov	local16, local08
25264     12 3F 02 F6 | 	mov	local17, local04
25268     1D 13 02 F6 | 	mov	arg01, local15
2526c     1E 15 02 F6 | 	mov	arg02, local16
25270     1F 17 02 F6 | 	mov	arg03, local17
25274     F2 40 02 F6 | 	mov	local18, objptr
25278     1A E5 01 F6 | 	mov	objptr, local12
2527c     2D 38 62 FD | 	call	local14
25280     20 E5 01 F6 | 	mov	objptr, local18
25284     FD 42 02 F6 | 	mov	local19, result1
25288                 | LR__3582
25288     00 42 0E F2 | 	cmp	local19, #0 wz
2528c     8C 01 90 5D |  if_ne	jmp	#LR__3592
25290     11 45 02 F6 | 	mov	local20, local03
25294     03 44 0E F5 | 	and	local20, #3 wz
25298     02 26 46 55 |  if_ne	or	local05, #2
2529c     01 44 0E F2 | 	cmp	local20, #1 wz
252a0     01 26 46 55 |  if_ne	or	local05, #1
252a4     20 22 CE F7 | 	test	local03, #32 wz
252a8     C0 26 46 55 |  if_ne	or	local05, #192
252ac     08 28 06 F1 | 	add	local06, #8
252b0     14 27 62 FC | 	wrlong	local05, local06
252b4     0C 28 06 F1 | 	add	local06, #12
252b8     14 47 0A FB | 	rdlong	local21, local06 wz
252bc     14 28 86 F1 | 	sub	local06, #20
252c0     18 00 90 5D |  if_ne	jmp	#LR__3583
252c4     04 2E 06 F1 | 	add	local09, #4
252c8     17 47 02 FB | 	rdlong	local21, local09
252cc     04 2E 86 F1 | 	sub	local09, #4
252d0     14 28 06 F1 | 	add	local06, #20
252d4     14 47 62 FC | 	wrlong	local21, local06
252d8     14 28 86 F1 | 	sub	local06, #20
252dc                 | LR__3583
252dc     18 28 06 F1 | 	add	local06, #24
252e0     14 47 0A FB | 	rdlong	local21, local06 wz
252e4     18 28 86 F1 | 	sub	local06, #24
252e8     18 00 90 5D |  if_ne	jmp	#LR__3584
252ec     08 2E 06 F1 | 	add	local09, #8
252f0     17 47 02 FB | 	rdlong	local21, local09
252f4     08 2E 86 F1 | 	sub	local09, #8
252f8     18 28 06 F1 | 	add	local06, #24
252fc     14 47 62 FC | 	wrlong	local21, local06
25300     18 28 86 F1 | 	sub	local06, #24
25304                 | LR__3584
25304     24 28 06 F1 | 	add	local06, #36
25308     14 47 0A FB | 	rdlong	local21, local06 wz
2530c     24 28 86 F1 | 	sub	local06, #36
25310     17 47 02 AB |  if_e	rdlong	local21, local09
25314     24 28 06 A1 |  if_e	add	local06, #36
25318     14 47 62 AC |  if_e	wrlong	local21, local06
2531c     24 28 86 A1 |  if_e	sub	local06, #36
25320     28 28 06 F1 | 	add	local06, #40
25324     14 47 0A FB | 	rdlong	local21, local06 wz
25328     28 28 86 F1 | 	sub	local06, #40
2532c     18 00 90 5D |  if_ne	jmp	#LR__3585
25330     10 2E 06 F1 | 	add	local09, #16
25334     17 47 02 FB | 	rdlong	local21, local09
25338     10 2E 86 F1 | 	sub	local09, #16
2533c     28 28 06 F1 | 	add	local06, #40
25340     14 47 62 FC | 	wrlong	local21, local06
25344     28 28 86 F1 | 	sub	local06, #40
25348                 | LR__3585
25348     30 28 06 F1 | 	add	local06, #48
2534c     14 47 0A FB | 	rdlong	local21, local06 wz
25350     30 28 86 F1 | 	sub	local06, #48
25354     18 00 90 5D |  if_ne	jmp	#LR__3586
25358     0C 2E 06 F1 | 	add	local09, #12
2535c     17 47 02 FB | 	rdlong	local21, local09
25360     0C 2E 86 F1 | 	sub	local09, #12
25364     30 28 06 F1 | 	add	local06, #48
25368     14 47 62 FC | 	wrlong	local21, local06
2536c     30 28 86 F1 | 	sub	local06, #48
25370                 | LR__3586
25370     1C 28 06 F1 | 	add	local06, #28
25374     14 47 0A FB | 	rdlong	local21, local06 wz
25378     1C 28 86 F1 | 	sub	local06, #28
2537c     1C 00 90 5D |  if_ne	jmp	#LR__3587
25380     01 2A 06 F6 | 	mov	local07, #1
25384     F2 12 02 F6 | 	mov	arg01, objptr
25388     00 D0 04 FF 
2538c     00 12 46 F5 | 	or	arg01, ##161480704
25390     1C 28 06 F1 | 	add	local06, #28
25394     14 13 62 FC | 	wrlong	arg01, local06
25398     1C 28 86 F1 | 	sub	local06, #28
2539c                 | LR__3587
2539c     20 28 06 F1 | 	add	local06, #32
253a0     14 47 0A FB | 	rdlong	local21, local06 wz
253a4     20 28 86 F1 | 	sub	local06, #32
253a8     1C 00 90 5D |  if_ne	jmp	#LR__3588
253ac     01 2A 06 F6 | 	mov	local07, #1
253b0     F2 12 02 F6 | 	mov	arg01, objptr
253b4     00 D8 04 FF 
253b8     00 12 46 F5 | 	or	arg01, ##162529280
253bc     20 28 06 F1 | 	add	local06, #32
253c0     14 13 62 FC | 	wrlong	arg01, local06
253c4     20 28 86 F1 | 	sub	local06, #32
253c8                 | LR__3588
253c8     2C 28 06 F1 | 	add	local06, #44
253cc     14 47 0A FB | 	rdlong	local21, local06 wz
253d0     2C 28 86 F1 | 	sub	local06, #44
253d4     44 00 90 5D |  if_ne	jmp	#LR__3591
253d8     14 2E 06 F1 | 	add	local09, #20
253dc     17 47 0A FB | 	rdlong	local21, local09 wz
253e0     14 2E 86 F1 | 	sub	local09, #20
253e4     18 00 90 AD |  if_e	jmp	#LR__3589
253e8     14 2E 06 F1 | 	add	local09, #20
253ec     17 47 02 FB | 	rdlong	local21, local09
253f0     2C 28 06 F1 | 	add	local06, #44
253f4     14 47 62 FC | 	wrlong	local21, local06
253f8     2C 28 86 F1 | 	sub	local06, #44
253fc     1C 00 90 FD | 	jmp	#LR__3590
25400                 | LR__3589
25400     01 2A 06 F6 | 	mov	local07, #1
25404     F2 12 02 F6 | 	mov	arg01, objptr
25408     00 E0 04 FF 
2540c     00 12 46 F5 | 	or	arg01, ##163577856
25410     2C 28 06 F1 | 	add	local06, #44
25414     14 13 62 FC | 	wrlong	arg01, local06
25418     2C 28 86 F1 | 	sub	local06, #44
2541c                 | LR__3590
2541c                 | LR__3591
2541c                 | LR__3592
2541c     00 2A 0E F2 | 	cmp	local07, #0 wz
25420     14 13 02 56 |  if_ne	mov	arg01, local06
25424     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
25428     00 42 0E F2 | 	cmp	local19, #0 wz
2542c     00 12 06 A6 |  if_e	mov	arg01, #0
25430     10 00 90 5D |  if_ne	jmp	#LR__3593
25434     00 12 4E F2 | 	cmps	arg01, #0 wz
25438     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2543c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25440     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25444                 | LR__3593
25444     21 FB 01 F6 | 	mov	result1, local19
25448                 | LR__3594
25448     A7 F0 03 F6 | 	mov	ptra, fp
2544c     B2 00 A0 FD | 	call	#popregs_
25450                 | __system___openraw_ret
25450     2D 00 64 FD | 	ret
25454                 | 
25454                 | __system___closeraw
25454     05 4A 05 F6 | 	mov	COUNT_, #5
25458     A8 00 A0 FD | 	call	#pushregs_
2545c     09 1F 02 F6 | 	mov	local01, arg01
25460     00 20 06 F6 | 	mov	local02, #0
25464     08 1E 06 F1 | 	add	local01, #8
25468     0F FB 09 FB | 	rdlong	result1, local01 wz
2546c     08 1E 86 F1 | 	sub	local01, #8
25470     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25474     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25478     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2547c     01 FA 65 A6 |  if_e	neg	result1, #1
25480     A8 00 90 AD |  if_e	jmp	#LR__3602
25484     2C 1E 06 F1 | 	add	local01, #44
25488     0F FB 09 FB | 	rdlong	result1, local01 wz
2548c     2C 1E 86 F1 | 	sub	local01, #44
25490     38 00 90 AD |  if_e	jmp	#LR__3600
25494     2C 1E 06 F1 | 	add	local01, #44
25498     0F 23 02 FB | 	rdlong	local03, local01
2549c     11 25 02 F6 | 	mov	local04, local03
254a0     2C 1E 86 F1 | 	sub	local01, #44
254a4     13 24 46 F7 | 	zerox	local04, #19
254a8     14 22 46 F0 | 	shr	local03, #20
254ac     02 22 66 F0 | 	shl	local03, #2
254b0     ED 22 02 F1 | 	add	local03, __methods__
254b4     11 23 02 FB | 	rdlong	local03, local03
254b8     0F 13 02 F6 | 	mov	arg01, local01
254bc     F2 26 02 F6 | 	mov	local05, objptr
254c0     12 E5 01 F6 | 	mov	objptr, local04
254c4     2D 22 62 FD | 	call	local03
254c8     13 E5 01 F6 | 	mov	objptr, local05
254cc                 | LR__3600
254cc     24 1E 06 F1 | 	add	local01, #36
254d0     0F 27 0A FB | 	rdlong	local05, local01 wz
254d4     24 1E 86 F1 | 	sub	local01, #36
254d8     3C 00 90 AD |  if_e	jmp	#LR__3601
254dc     24 1E 06 F1 | 	add	local01, #36
254e0     0F 23 02 FB | 	rdlong	local03, local01
254e4     11 25 02 F6 | 	mov	local04, local03
254e8     24 1E 86 F1 | 	sub	local01, #36
254ec     13 24 46 F7 | 	zerox	local04, #19
254f0     14 22 46 F0 | 	shr	local03, #20
254f4     02 22 66 F0 | 	shl	local03, #2
254f8     ED 22 02 F1 | 	add	local03, __methods__
254fc     11 23 02 FB | 	rdlong	local03, local03
25500     0F 13 02 F6 | 	mov	arg01, local01
25504     F2 26 02 F6 | 	mov	local05, objptr
25508     12 E5 01 F6 | 	mov	objptr, local04
2550c     2D 22 62 FD | 	call	local03
25510     13 E5 01 F6 | 	mov	objptr, local05
25514     FD 20 02 F6 | 	mov	local02, result1
25518                 | LR__3601
25518     0F 13 02 F6 | 	mov	arg01, local01
2551c     00 14 06 F6 | 	mov	arg02, #0
25520     34 16 06 F6 | 	mov	arg03, #52
25524     98 00 A0 FD | 	call	#\builtin_bytefill_
25528     10 FB 01 F6 | 	mov	result1, local02
2552c                 | LR__3602
2552c     A7 F0 03 F6 | 	mov	ptra, fp
25530     B2 00 A0 FD | 	call	#popregs_
25534                 | __system___closeraw_ret
25534     2D 00 64 FD | 	ret
25538                 | 
25538                 | __system___vfs_open_sdcardx
25538     0B 4A 05 F6 | 	mov	COUNT_, #11
2553c     A8 00 A0 FD | 	call	#pushregs_
25540     09 23 02 F6 | 	mov	local03, arg01
25544     0A 25 02 F6 | 	mov	local04, arg02
25548     0B 27 02 F6 | 	mov	local05, arg03
2554c     0C 29 02 F6 | 	mov	local06, arg04
25550     01 00 00 FF 
25554     24 12 06 F6 | 	mov	arg01, ##548
25558     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2555c     FD 2A 02 F6 | 	mov	local07, result1
25560     01 00 00 FF 
25564     34 12 06 F6 | 	mov	arg01, ##564
25568     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2556c     FD 2C 02 F6 | 	mov	local08, result1
25570     11 19 02 F6 | 	mov	arg04, local03
25574     1F 18 C6 F0 | 	sar	arg04, #31
25578     11 17 02 F6 | 	mov	arg03, local03
2557c     01 12 06 F6 | 	mov	arg01, #1
25580     00 14 06 F6 | 	mov	arg02, #0
25584     10 DC BF FD | 	call	#__system___int64_shl
25588     FD 1E 02 F6 | 	mov	local01, result1
2558c     FE 2E 02 F6 | 	mov	local09, result2
25590     12 19 02 F6 | 	mov	arg04, local04
25594     1F 18 C6 F0 | 	sar	arg04, #31
25598     12 17 02 F6 | 	mov	arg03, local04
2559c     01 12 06 F6 | 	mov	arg01, #1
255a0     00 14 06 F6 | 	mov	arg02, #0
255a4     F0 DB BF FD | 	call	#__system___int64_shl
255a8     FD 1E 42 F5 | 	or	local01, result1
255ac     FE 2E 42 F5 | 	or	local09, result2
255b0     13 19 02 F6 | 	mov	arg04, local05
255b4     1F 18 C6 F0 | 	sar	arg04, #31
255b8     13 17 02 F6 | 	mov	arg03, local05
255bc     01 12 06 F6 | 	mov	arg01, #1
255c0     00 14 06 F6 | 	mov	arg02, #0
255c4     D0 DB BF FD | 	call	#__system___int64_shl
255c8     FD 1E 42 F5 | 	or	local01, result1
255cc     FE 2E 42 F5 | 	or	local09, result2
255d0     14 19 02 F6 | 	mov	arg04, local06
255d4     1F 18 C6 F0 | 	sar	arg04, #31
255d8     14 17 02 F6 | 	mov	arg03, local06
255dc     01 12 06 F6 | 	mov	arg01, #1
255e0     00 14 06 F6 | 	mov	arg02, #0
255e4     B0 DB BF FD | 	call	#__system___int64_shl
255e8     17 15 02 F6 | 	mov	arg02, local09
255ec     FD 1E 42 F5 | 	or	local01, result1
255f0     0A FD 41 F5 | 	or	result2, arg02
255f4     FE 20 02 F6 | 	mov	local02, result2
255f8     0F 13 02 F6 | 	mov	arg01, local01
255fc     10 15 02 F6 | 	mov	arg02, local02
25600     CC DB BF FD | 	call	#__system___usepins
25604     00 FA 0D F2 | 	cmp	result1, #0 wz
25608     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2560c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
25610     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25614     00 FA 05 A6 |  if_e	mov	result1, #0
25618     B4 00 90 AD |  if_e	jmp	#LR__3612
2561c     0F 31 02 F6 | 	mov	local10, local01
25620     10 2F 02 F6 | 	mov	local09, local02
25624     01 00 00 FF 
25628     08 2A 06 F1 | 	add	local07, ##520
2562c     15 31 62 FC | 	wrlong	local10, local07
25630     04 2A 06 F1 | 	add	local07, #4
25634     15 2F 62 FC | 	wrlong	local09, local07
25638     01 00 00 FF 
2563c     0C 2A 86 F1 | 	sub	local07, ##524
25640     14 1B 02 F6 | 	mov	arg05, local06
25644     00 12 06 F6 | 	mov	arg01, #0
25648     11 15 02 F6 | 	mov	arg02, local03
2564c     12 17 02 F6 | 	mov	arg03, local04
25650     13 19 02 F6 | 	mov	arg04, local05
25654     F2 30 02 F6 | 	mov	local10, objptr
25658     15 E5 01 F6 | 	mov	objptr, local07
2565c     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
25660     18 E5 01 F6 | 	mov	objptr, local10
25664     FD 32 0A F6 | 	mov	local11, result1 wz
25668     24 00 90 5D |  if_ne	jmp	#LR__3610
2566c     81 01 00 FF 
25670     2A 15 06 F6 | 	mov	arg02, ##@LR__5027
25674     16 13 02 F6 | 	mov	arg01, local08
25678     00 16 06 F6 | 	mov	arg03, #0
2567c     F2 32 02 F6 | 	mov	local11, objptr
25680     15 E5 01 F6 | 	mov	objptr, local07
25684     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25688     19 E5 01 F6 | 	mov	objptr, local11
2568c     FD 32 02 F6 | 	mov	local11, result1
25690                 | LR__3610
25690     00 32 0E F2 | 	cmp	local11, #0 wz
25694     24 00 90 AD |  if_e	jmp	#LR__3611
25698     0F 13 02 F6 | 	mov	arg01, local01
2569c     10 15 02 F6 | 	mov	arg02, local02
256a0     80 DB BF FD | 	call	#__system___freepins
256a4     19 13 6A F6 | 	neg	arg01, local11 wz
256a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
256ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
256b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
256b4     00 FA 05 F6 | 	mov	result1, #0
256b8     14 00 90 FD | 	jmp	#LR__3612
256bc                 | LR__3611
256bc     15 13 02 F6 | 	mov	arg01, local07
256c0     F2 32 02 F6 | 	mov	local11, objptr
256c4     15 E5 01 F6 | 	mov	objptr, local07
256c8     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
256cc     19 E5 01 F6 | 	mov	objptr, local11
256d0                 | LR__3612
256d0     A7 F0 03 F6 | 	mov	ptra, fp
256d4     B2 00 A0 FD | 	call	#popregs_
256d8                 | __system___vfs_open_sdcardx_ret
256d8     2D 00 64 FD | 	ret
256dc                 | 
256dc                 | __system____default_getc
256dc     03 4A 05 F6 | 	mov	COUNT_, #3
256e0     A8 00 A0 FD | 	call	#pushregs_
256e4     09 1F 02 F6 | 	mov	local01, arg01
256e8     0F 21 02 FB | 	rdlong	local02, local01
256ec     08 20 06 F1 | 	add	local02, #8
256f0     10 23 02 FB | 	rdlong	local03, local02
256f4     02 22 CE F7 | 	test	local03, #2 wz
256f8     0F 13 02 56 |  if_ne	mov	arg01, local01
256fc     00 01 B0 5D |  if_ne	call	#__system____default_flush
25700     10 23 02 FB | 	rdlong	local03, local02
25704     01 22 46 F5 | 	or	local03, #1
25708     10 23 62 FC | 	wrlong	local03, local02
2570c     08 20 86 F1 | 	sub	local02, #8
25710     10 23 0A FB | 	rdlong	local03, local02 wz
25714     0C 00 90 5D |  if_ne	jmp	#LR__3620
25718     0F 13 02 F6 | 	mov	arg01, local01
2571c     68 18 B0 FD | 	call	#__system____default_filbuf
25720     FD 22 02 F6 | 	mov	local03, result1
25724                 | LR__3620
25724     01 22 56 F2 | 	cmps	local03, #1 wc
25728     01 FA 65 C6 |  if_b	neg	result1, #1
2572c     1C 00 90 CD |  if_b	jmp	#LR__3621
25730     01 22 86 F1 | 	sub	local03, #1
25734     10 23 62 FC | 	wrlong	local03, local02
25738     04 20 06 F1 | 	add	local02, #4
2573c     10 23 02 FB | 	rdlong	local03, local02
25740     11 FB C1 FA | 	rdbyte	result1, local03
25744     01 22 06 F1 | 	add	local03, #1
25748     10 23 62 FC | 	wrlong	local03, local02
2574c                 | LR__3621
2574c     A7 F0 03 F6 | 	mov	ptra, fp
25750     B2 00 A0 FD | 	call	#popregs_
25754                 | __system____default_getc_ret
25754     2D 00 64 FD | 	ret
25758                 | 
25758                 | __system____default_putc
25758     06 4A 05 F6 | 	mov	COUNT_, #6
2575c     A8 00 A0 FD | 	call	#pushregs_
25760     09 1F 02 F6 | 	mov	local01, arg01
25764     0A 21 02 F6 | 	mov	local02, arg02
25768     10 23 02 FB | 	rdlong	local03, local02
2576c     08 22 06 F1 | 	add	local03, #8
25770     11 FB 01 FB | 	rdlong	result1, local03
25774     01 FA CD F7 | 	test	result1, #1 wz
25778     10 13 02 56 |  if_ne	mov	arg01, local02
2577c     80 00 B0 5D |  if_ne	call	#__system____default_flush
25780     11 25 02 FB | 	rdlong	local04, local03
25784     02 24 46 F5 | 	or	local04, #2
25788     11 25 62 FC | 	wrlong	local04, local03
2578c     08 22 86 F1 | 	sub	local03, #8
25790     11 27 02 FB | 	rdlong	local05, local03
25794     10 22 06 F1 | 	add	local03, #16
25798     11 15 02 FB | 	rdlong	arg02, local03
2579c     10 22 86 F1 | 	sub	local03, #16
257a0     13 FB 01 F6 | 	mov	result1, local05
257a4     0A FB 01 F1 | 	add	result1, arg02
257a8     FD 1E 42 FC | 	wrbyte	local01, result1
257ac     0F 1F E2 F8 | 	getbyte	local01, local01, #0
257b0     01 26 06 F1 | 	add	local05, #1
257b4     11 27 62 FC | 	wrlong	local05, local03
257b8     06 20 06 F1 | 	add	local02, #6
257bc     10 29 EA FA | 	rdword	local06, local02 wz
257c0     06 20 86 F1 | 	sub	local02, #6
257c4     0C 22 06 51 |  if_ne	add	local03, #12
257c8     11 25 02 5B |  if_ne	rdlong	local04, local03
257cc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
257d0     0C 00 90 AD |  if_e	jmp	#LR__3630
257d4     0A 1E 0E F2 | 	cmp	local01, #10 wz
257d8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
257dc     10 00 90 5D |  if_ne	jmp	#LR__3631
257e0                 | LR__3630
257e0     10 13 02 F6 | 	mov	arg01, local02
257e4     18 00 B0 FD | 	call	#__system____default_flush
257e8     00 FA 0D F2 | 	cmp	result1, #0 wz
257ec     01 1E 66 56 |  if_ne	neg	local01, #1
257f0                 | LR__3631
257f0     0F FB 01 F6 | 	mov	result1, local01
257f4     A7 F0 03 F6 | 	mov	ptra, fp
257f8     B2 00 A0 FD | 	call	#popregs_
257fc                 | __system____default_putc_ret
257fc     2D 00 64 FD | 	ret
25800                 | 
25800                 | __system____default_flush
25800     06 4A 05 F6 | 	mov	COUNT_, #6
25804     A8 00 A0 FD | 	call	#pushregs_
25808     09 1F 02 F6 | 	mov	local01, arg01
2580c     0F 21 02 FB | 	rdlong	local02, local01
25810     10 23 02 FB | 	rdlong	local03, local02
25814     08 20 06 F1 | 	add	local02, #8
25818     10 FB 01 FB | 	rdlong	result1, local02
2581c     08 20 86 F1 | 	sub	local02, #8
25820     02 FA CD F7 | 	test	result1, #2 wz
25824     D0 00 90 AD |  if_e	jmp	#LR__3642
25828     01 22 56 F2 | 	cmps	local03, #1 wc
2582c     20 01 90 CD |  if_b	jmp	#LR__3644
25830     08 1E 06 F1 | 	add	local01, #8
25834     0F FB 01 FB | 	rdlong	result1, local01
25838     08 1E 86 F1 | 	sub	local01, #8
2583c     40 FA CD F7 | 	test	result1, #64 wz
25840     68 00 90 AD |  if_e	jmp	#LR__3641
25844     08 1E 06 F1 | 	add	local01, #8
25848     0F 17 02 FB | 	rdlong	arg03, local01
2584c     08 1E 86 F1 | 	sub	local01, #8
25850     80 16 CE F7 | 	test	arg03, #128 wz
25854     54 00 90 AD |  if_e	jmp	#LR__3640
25858     30 1E 06 F1 | 	add	local01, #48
2585c     0F 25 02 FB | 	rdlong	local04, local01
25860     12 27 02 F6 | 	mov	local05, local04
25864     30 1E 86 F1 | 	sub	local01, #48
25868     13 26 46 F7 | 	zerox	local05, #19
2586c     14 24 46 F0 | 	shr	local04, #20
25870     02 24 66 F0 | 	shl	local04, #2
25874     ED 24 02 F1 | 	add	local04, __methods__
25878     12 25 02 FB | 	rdlong	local04, local04
2587c     0F 13 02 F6 | 	mov	arg01, local01
25880     00 14 06 F6 | 	mov	arg02, #0
25884     02 16 06 F6 | 	mov	arg03, #2
25888     F2 28 02 F6 | 	mov	local06, objptr
2588c     13 E5 01 F6 | 	mov	objptr, local05
25890     2D 24 62 FD | 	call	local04
25894     14 E5 01 F6 | 	mov	objptr, local06
25898     08 1E 06 F1 | 	add	local01, #8
2589c     0F 29 02 FB | 	rdlong	local06, local01
258a0     80 28 26 F5 | 	andn	local06, #128
258a4     0F 29 62 FC | 	wrlong	local06, local01
258a8     08 1E 86 F1 | 	sub	local01, #8
258ac                 | LR__3640
258ac                 | LR__3641
258ac     18 1E 06 F1 | 	add	local01, #24
258b0     0F 25 02 FB | 	rdlong	local04, local01
258b4     12 27 02 F6 | 	mov	local05, local04
258b8     18 1E 86 F1 | 	sub	local01, #24
258bc     13 26 46 F7 | 	zerox	local05, #19
258c0     14 24 46 F0 | 	shr	local04, #20
258c4     02 24 66 F0 | 	shl	local04, #2
258c8     ED 24 02 F1 | 	add	local04, __methods__
258cc     12 25 02 FB | 	rdlong	local04, local04
258d0     10 20 06 F1 | 	add	local02, #16
258d4     10 15 02 FB | 	rdlong	arg02, local02
258d8     10 20 86 F1 | 	sub	local02, #16
258dc     0F 13 02 F6 | 	mov	arg01, local01
258e0     11 17 02 F6 | 	mov	arg03, local03
258e4     F2 28 02 F6 | 	mov	local06, objptr
258e8     13 E5 01 F6 | 	mov	objptr, local05
258ec     2D 24 62 FD | 	call	local04
258f0     14 E5 01 F6 | 	mov	objptr, local06
258f4     58 00 90 FD | 	jmp	#LR__3644
258f8                 | LR__3642
258f8     08 20 06 F1 | 	add	local02, #8
258fc     10 29 02 FB | 	rdlong	local06, local02
25900     08 20 86 F1 | 	sub	local02, #8
25904     01 28 CE F7 | 	test	local06, #1 wz
25908     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2590c     40 00 90 AD |  if_e	jmp	#LR__3643
25910     30 1E 06 F1 | 	add	local01, #48
25914     0F 25 02 FB | 	rdlong	local04, local01
25918     12 27 02 F6 | 	mov	local05, local04
2591c     30 1E 86 F1 | 	sub	local01, #48
25920     13 26 46 F7 | 	zerox	local05, #19
25924     14 24 46 F0 | 	shr	local04, #20
25928     02 24 66 F0 | 	shl	local04, #2
2592c     ED 24 02 F1 | 	add	local04, __methods__
25930     12 25 02 FB | 	rdlong	local04, local04
25934     0F 13 02 F6 | 	mov	arg01, local01
25938     11 15 62 F6 | 	neg	arg02, local03
2593c     01 16 06 F6 | 	mov	arg03, #1
25940     F2 28 02 F6 | 	mov	local06, objptr
25944     13 E5 01 F6 | 	mov	objptr, local05
25948     2D 24 62 FD | 	call	local04
2594c     14 E5 01 F6 | 	mov	objptr, local06
25950                 | LR__3643
25950                 | LR__3644
25950     10 01 68 FC | 	wrlong	#0, local02
25954     04 20 06 F1 | 	add	local02, #4
25958     10 01 68 FC | 	wrlong	#0, local02
2595c     04 20 06 F1 | 	add	local02, #4
25960     10 01 68 FC | 	wrlong	#0, local02
25964     00 FA 05 F6 | 	mov	result1, #0
25968     A7 F0 03 F6 | 	mov	ptra, fp
2596c     B2 00 A0 FD | 	call	#popregs_
25970                 | __system____default_flush_ret
25970     2D 00 64 FD | 	ret
25974                 | 
25974                 | __system____default_buffer_init
25974     02 4A 05 F6 | 	mov	COUNT_, #2
25978     A8 00 A0 FD | 	call	#pushregs_
2597c     09 1F 02 F6 | 	mov	local01, arg01
25980     0F 21 02 FB | 	rdlong	local02, local01
25984     0F 13 02 F6 | 	mov	arg01, local01
25988     34 03 B0 FD | 	call	#__system___isatty
2598c     00 FA 0D F2 | 	cmp	result1, #0 wz
25990     06 1E 06 51 |  if_ne	add	local01, #6
25994     0F 0B 58 5C |  if_ne	wrword	#5, local01
25998     06 1E 06 A1 |  if_e	add	local01, #6
2599c     0F 0D 58 AC |  if_e	wrword	#6, local01
259a0     14 20 06 F1 | 	add	local02, #20
259a4     10 1F 02 F6 | 	mov	local01, local02
259a8     04 20 86 F1 | 	sub	local02, #4
259ac     10 1F 62 FC | 	wrlong	local01, local02
259b0     04 20 86 F1 | 	sub	local02, #4
259b4     02 00 80 FF 
259b8     10 01 68 FC | 	wrlong	##1024, local02
259bc     00 FA 05 F6 | 	mov	result1, #0
259c0     A7 F0 03 F6 | 	mov	ptra, fp
259c4     B2 00 A0 FD | 	call	#popregs_
259c8                 | __system____default_buffer_init_ret
259c8     2D 00 64 FD | 	ret
259cc                 | 
259cc                 | __system__stat
259cc     04 4A 05 F6 | 	mov	COUNT_, #4
259d0     A8 00 A0 FD | 	call	#pushregs_
259d4     0A 1F 02 F6 | 	mov	local01, arg02
259d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
259dc     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
259e0     09 15 02 F6 | 	mov	arg02, arg01
259e4     10 13 02 F6 | 	mov	arg01, local02
259e8     00 16 06 F6 | 	mov	arg03, #0
259ec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
259f0     40 B8 BF FD | 	call	#__system____getvfsforfile
259f4     FD 22 0A F6 | 	mov	local03, result1 wz
259f8     10 00 90 AD |  if_e	jmp	#LR__3650
259fc     34 22 06 F1 | 	add	local03, #52
25a00     11 17 0A FB | 	rdlong	arg03, local03 wz
25a04     34 22 86 F1 | 	sub	local03, #52
25a08     14 00 90 5D |  if_ne	jmp	#LR__3651
25a0c                 | LR__3650
25a0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a10     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25a14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a18     01 FA 65 F6 | 	neg	result1, #1
25a1c     68 00 90 FD | 	jmp	#LR__3652
25a20                 | LR__3651
25a20     0F 13 02 F6 | 	mov	arg01, local01
25a24     00 14 06 F6 | 	mov	arg02, #0
25a28     30 16 06 F6 | 	mov	arg03, #48
25a2c     09 25 02 F6 | 	mov	local04, arg01
25a30     98 00 A0 FD | 	call	#\builtin_bytefill_
25a34     12 FB 01 F6 | 	mov	result1, local04
25a38     10 13 CA FA | 	rdbyte	arg01, local02 wz
25a3c     08 1E 06 A1 |  if_e	add	local01, #8
25a40     08 00 80 AF 
25a44     0F FF 6B AC |  if_e	wrlong	##4607, local01
25a48     00 FA 05 A6 |  if_e	mov	result1, #0
25a4c     38 00 90 AD |  if_e	jmp	#LR__3652
25a50     34 22 06 F1 | 	add	local03, #52
25a54     11 23 02 FB | 	rdlong	local03, local03
25a58     11 25 02 F6 | 	mov	local04, local03
25a5c     13 22 46 F7 | 	zerox	local03, #19
25a60     14 24 46 F0 | 	shr	local04, #20
25a64     02 24 66 F0 | 	shl	local04, #2
25a68     ED 24 02 F1 | 	add	local04, __methods__
25a6c     12 25 02 FB | 	rdlong	local04, local04
25a70     10 13 02 F6 | 	mov	arg01, local02
25a74     0F 15 02 F6 | 	mov	arg02, local01
25a78     F2 20 02 F6 | 	mov	local02, objptr
25a7c     11 E5 01 F6 | 	mov	objptr, local03
25a80     2D 24 62 FD | 	call	local04
25a84     10 E5 01 F6 | 	mov	objptr, local02
25a88                 | LR__3652
25a88     A7 F0 03 F6 | 	mov	ptra, fp
25a8c     B2 00 A0 FD | 	call	#popregs_
25a90                 | __system__stat_ret
25a90     2D 00 64 FD | 	ret
25a94                 | 
25a94                 | __system__write
25a94     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a98     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a9c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25aa0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25aa4     01 FA 65 36 |  if_ae	neg	result1, #1
25aa8     20 00 90 3D |  if_ae	jmp	#LR__3660
25aac     34 12 06 FD | 	qmul	arg01, #52
25ab0     02 00 00 FF 
25ab4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25ab8     18 12 62 FD | 	getqx	arg01
25abc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25ac0     02 00 00 FF 
25ac4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25ac8     0C 10 B0 FD | 	call	#__system___vfswrite
25acc                 | LR__3660
25acc                 | __system__write_ret
25acc     2D 00 64 FD | 	ret
25ad0                 | 
25ad0                 | __system__read
25ad0     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ad4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25ad8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25adc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25ae0     01 FA 65 36 |  if_ae	neg	result1, #1
25ae4     20 00 90 3D |  if_ae	jmp	#LR__3670
25ae8     34 12 06 FD | 	qmul	arg01, #52
25aec     02 00 00 FF 
25af0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25af4     18 12 62 FD | 	getqx	arg01
25af8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25afc     02 00 00 FF 
25b00     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b04     98 11 B0 FD | 	call	#__system___vfsread
25b08                 | LR__3670
25b08                 | __system__read_ret
25b08     2D 00 64 FD | 	ret
25b0c                 | 
25b0c                 | __system__close
25b0c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b10     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b14     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b18     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b1c     01 FA 65 36 |  if_ae	neg	result1, #1
25b20     20 00 90 3D |  if_ae	jmp	#LR__3680
25b24     34 12 06 FD | 	qmul	arg01, #52
25b28     02 00 00 FF 
25b2c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b30     18 12 62 FD | 	getqx	arg01
25b34     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b38     02 00 00 FF 
25b3c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b40     10 F9 BF FD | 	call	#__system___closeraw
25b44                 | LR__3680
25b44                 | __system__close_ret
25b44     2D 00 64 FD | 	ret
25b48                 | 
25b48                 | __system__lseek
25b48     06 4A 05 F6 | 	mov	COUNT_, #6
25b4c     A8 00 A0 FD | 	call	#pushregs_
25b50     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b54     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b58     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b5c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b60     01 FA 65 36 |  if_ae	neg	result1, #1
25b64     C4 00 90 3D |  if_ae	jmp	#LR__3691
25b68     34 12 06 FD | 	qmul	arg01, #52
25b6c     02 00 00 FF 
25b70     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b74     18 1E 62 FD | 	getqx	local01
25b78     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25b7c     30 1E 06 F1 | 	add	local01, #48
25b80     0F 13 0A FB | 	rdlong	arg01, local01 wz
25b84     30 1E 86 F1 | 	sub	local01, #48
25b88     02 00 00 FF 
25b8c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b90     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25b94     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25b98     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25b9c     01 FA 65 A6 |  if_e	neg	result1, #1
25ba0     88 00 90 AD |  if_e	jmp	#LR__3691
25ba4     08 1E 06 F1 | 	add	local01, #8
25ba8     0F 21 02 FB | 	rdlong	local02, local01
25bac     08 1E 86 F1 | 	sub	local01, #8
25bb0     40 20 CE F7 | 	test	local02, #64 wz
25bb4     08 1E 06 51 |  if_ne	add	local01, #8
25bb8     0F 21 02 5B |  if_ne	rdlong	local02, local01
25bbc     80 20 46 55 |  if_ne	or	local02, #128
25bc0     0F 21 62 5C |  if_ne	wrlong	local02, local01
25bc4     08 1E 86 51 |  if_ne	sub	local01, #8
25bc8     30 1E 06 F1 | 	add	local01, #48
25bcc     0F 23 02 FB | 	rdlong	local03, local01
25bd0     11 25 02 F6 | 	mov	local04, local03
25bd4     30 1E 86 F1 | 	sub	local01, #48
25bd8     13 24 46 F7 | 	zerox	local04, #19
25bdc     14 22 46 F0 | 	shr	local03, #20
25be0     02 22 66 F0 | 	shl	local03, #2
25be4     ED 22 02 F1 | 	add	local03, __methods__
25be8     11 23 02 FB | 	rdlong	local03, local03
25bec     0F 13 02 F6 | 	mov	arg01, local01
25bf0     F2 26 02 F6 | 	mov	local05, objptr
25bf4     12 E5 01 F6 | 	mov	objptr, local04
25bf8     2D 22 62 FD | 	call	local03
25bfc     13 E5 01 F6 | 	mov	objptr, local05
25c00     FD 28 02 F6 | 	mov	local06, result1
25c04     00 28 56 F2 | 	cmps	local06, #0 wc
25c08     1C 00 90 3D |  if_ae	jmp	#LR__3690
25c0c     14 13 6A F6 | 	neg	arg01, local06 wz
25c10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25c14     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25c18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25c1c     01 FA 65 56 |  if_ne	neg	result1, #1
25c20     00 FA 05 A6 |  if_e	mov	result1, #0
25c24     04 00 90 FD | 	jmp	#LR__3691
25c28                 | LR__3690
25c28     14 FB 01 F6 | 	mov	result1, local06
25c2c                 | LR__3691
25c2c     A7 F0 03 F6 | 	mov	ptra, fp
25c30     B2 00 A0 FD | 	call	#popregs_
25c34                 | __system__lseek_ret
25c34     2D 00 64 FD | 	ret
25c38                 | 
25c38                 | __system___ioctl
25c38     03 4A 05 F6 | 	mov	COUNT_, #3
25c3c     A8 00 A0 FD | 	call	#pushregs_
25c40     00 12 4E F2 | 	cmps	arg01, #0 wz
25c44     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25c48     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25c4c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25c50     01 FA 65 A6 |  if_e	neg	result1, #1
25c54     5C 00 90 AD |  if_e	jmp	#LR__3701
25c58     28 12 06 F1 | 	add	arg01, #40
25c5c     09 1F 02 FB | 	rdlong	local01, arg01
25c60     0F 21 02 F6 | 	mov	local02, local01
25c64     28 12 86 F1 | 	sub	arg01, #40
25c68     13 20 46 F7 | 	zerox	local02, #19
25c6c     14 1E 46 F0 | 	shr	local01, #20
25c70     02 1E 66 F0 | 	shl	local01, #2
25c74     ED 1E 02 F1 | 	add	local01, __methods__
25c78     0F 1F 02 FB | 	rdlong	local01, local01
25c7c     F2 22 02 F6 | 	mov	local03, objptr
25c80     10 E5 01 F6 | 	mov	objptr, local02
25c84     2D 1E 62 FD | 	call	local01
25c88     11 E5 01 F6 | 	mov	objptr, local03
25c8c     FD 12 0A F6 | 	mov	arg01, result1 wz
25c90     1C 00 90 AD |  if_e	jmp	#LR__3700
25c94     00 12 4E F2 | 	cmps	arg01, #0 wz
25c98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25c9c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25ca0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25ca4     01 FA 65 56 |  if_ne	neg	result1, #1
25ca8     00 FA 05 A6 |  if_e	mov	result1, #0
25cac     04 00 90 FD | 	jmp	#LR__3701
25cb0                 | LR__3700
25cb0     00 FA 05 F6 | 	mov	result1, #0
25cb4                 | LR__3701
25cb4     A7 F0 03 F6 | 	mov	ptra, fp
25cb8     B2 00 A0 FD | 	call	#popregs_
25cbc                 | __system___ioctl_ret
25cbc     2D 00 64 FD | 	ret
25cc0                 | 
25cc0                 | __system___isatty
25cc0     00 4A 05 F6 | 	mov	COUNT_, #0
25cc4     A8 00 A0 FD | 	call	#pushregs_
25cc8     0C F0 07 F1 | 	add	ptra, #12
25ccc     04 4E 05 F1 | 	add	fp, #4
25cd0     A7 12 62 FC | 	wrlong	arg01, fp
25cd4     04 4E 05 F1 | 	add	fp, #4
25cd8     A7 16 02 F6 | 	mov	arg03, fp
25cdc     08 4E 85 F1 | 	sub	fp, #8
25ce0     00 15 06 F6 | 	mov	arg02, #256
25ce4     50 FF BF FD | 	call	#__system___ioctl
25ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
25cec     01 FA 05 A6 |  if_e	mov	result1, #1
25cf0     00 FA 05 56 |  if_ne	mov	result1, #0
25cf4     A7 F0 03 F6 | 	mov	ptra, fp
25cf8     B2 00 A0 FD | 	call	#popregs_
25cfc                 | __system___isatty_ret
25cfc     2D 00 64 FD | 	ret
25d00                 | 
25d00                 | __system____getftab
25d00     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d04     34 12 06 CD |  if_b	qmul	arg01, #52
25d08     00 FA 05 36 |  if_ae	mov	result1, #0
25d0c     02 00 00 CF 
25d10     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25d14     18 FA 61 CD |  if_b	getqx	result1
25d18     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25d1c     02 00 00 CF 
25d20     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25d24                 | __system____getftab_ret
25d24     2D 00 64 FD | 	ret
25d28                 | 
25d28                 | __system__strncpy
25d28     09 01 02 F6 | 	mov	_var01, arg01
25d2c                 | LR__3710
25d2c     01 16 86 F1 | 	sub	arg03, #1
25d30     00 16 56 F2 | 	cmps	arg03, #0 wc
25d34     18 00 90 CD |  if_b	jmp	#LR__3711
25d38     0A FB C1 FA | 	rdbyte	result1, arg02
25d3c     00 FB 41 FC | 	wrbyte	result1, _var01
25d40     01 14 06 F1 | 	add	arg02, #1
25d44     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25d48     01 00 06 F1 | 	add	_var01, #1
25d4c     DC FF 9F 5D |  if_ne	jmp	#LR__3710
25d50                 | LR__3711
25d50     97 0C 48 FB | 	callpa	#(@LR__3713-@LR__3712)>>2,fcache_load_ptr_
25d54                 | LR__3712
25d54     01 16 86 F1 | 	sub	arg03, #1
25d58     00 16 56 F2 | 	cmps	arg03, #0 wc
25d5c     00 03 02 36 |  if_ae	mov	_var02, _var01
25d60     01 00 06 31 |  if_ae	add	_var01, #1
25d64     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25d68     E8 FF 9F 3D |  if_ae	jmp	#LR__3712
25d6c                 | LR__3713
25d6c     09 FB 01 F6 | 	mov	result1, arg01
25d70                 | __system__strncpy_ret
25d70     2D 00 64 FD | 	ret
25d74                 | 
25d74                 | __system__strncat
25d74     00 14 4E F2 | 	cmps	arg02, #0 wz
25d78     50 00 90 AD |  if_e	jmp	#LR__3724
25d7c     01 16 16 F2 | 	cmp	arg03, #1 wc
25d80     48 00 90 CD |  if_b	jmp	#LR__3724
25d84     09 01 02 F6 | 	mov	_var01, arg01
25d88     97 1E 48 FB | 	callpa	#(@LR__3722-@LR__3720)>>2,fcache_load_ptr_
25d8c                 | LR__3720
25d8c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25d90     01 00 06 51 |  if_ne	add	_var01, #1
25d94     F4 FF 9F 5D |  if_ne	jmp	#LR__3720
25d98     0B 03 02 F6 | 	mov	_var02, arg03
25d9c                 | LR__3721
25d9c     0A 05 C2 FA | 	rdbyte	_var03, arg02
25da0     02 07 02 F6 | 	mov	_var04, _var03
25da4     07 06 4E F7 | 	zerox	_var04, #7 wz
25da8     01 14 06 F1 | 	add	arg02, #1
25dac     18 00 90 AD |  if_e	jmp	#LR__3723
25db0     01 02 86 F1 | 	sub	_var02, #1
25db4     00 02 56 F2 | 	cmps	_var02, #0 wc
25db8     00 07 02 36 |  if_ae	mov	_var04, _var01
25dbc     01 00 06 31 |  if_ae	add	_var01, #1
25dc0     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25dc4     D4 FF 9F 3D |  if_ae	jmp	#LR__3721
25dc8                 | LR__3722
25dc8                 | LR__3723
25dc8     00 01 48 FC | 	wrbyte	#0, _var01
25dcc                 | LR__3724
25dcc     09 FB 01 F6 | 	mov	result1, arg01
25dd0                 | __system__strncat_ret
25dd0     2D 00 64 FD | 	ret
25dd4                 | 
25dd4                 | __system__strncmp
25dd4     09 01 0A F6 | 	mov	_var01, arg01 wz
25dd8     14 00 90 5D |  if_ne	jmp	#LR__3730
25ddc     00 14 0E F2 | 	cmp	arg02, #0 wz
25de0     01 02 66 56 |  if_ne	neg	_var02, #1
25de4     00 02 06 A6 |  if_e	mov	_var02, #0
25de8     01 FB 01 F6 | 	mov	result1, _var02
25dec     74 00 90 FD | 	jmp	#__system__strncmp_ret
25df0                 | LR__3730
25df0     00 14 0E F2 | 	cmp	arg02, #0 wz
25df4     01 FA 05 A6 |  if_e	mov	result1, #1
25df8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25dfc     0B 05 02 F6 | 	mov	_var03, arg03
25e00     97 16 48 FB | 	callpa	#(@LR__3732-@LR__3731)>>2,fcache_load_ptr_
25e04                 | LR__3731
25e04     00 07 C2 FA | 	rdbyte	_var04, _var01
25e08     0A 09 02 F6 | 	mov	_var05, arg02
25e0c     04 0B C2 FA | 	rdbyte	_var06, _var05
25e10     01 04 86 F1 | 	sub	_var03, #1
25e14     00 04 56 F2 | 	cmps	_var03, #0 wc
25e18     01 00 06 F1 | 	add	_var01, #1
25e1c     01 14 06 F1 | 	add	arg02, #1
25e20     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25e24     08 00 90 2D |  if_nc_and_z	jmp	#LR__3733
25e28     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25e2c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3731
25e30                 | LR__3732
25e30                 | LR__3733
25e30     00 04 56 F2 | 	cmps	_var03, #0 wc
25e34     00 FA 05 C6 |  if_b	mov	result1, #0
25e38     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25e3c     05 07 0A F2 | 	cmp	_var04, _var06 wz
25e40     00 FA 05 A6 |  if_e	mov	result1, #0
25e44     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25e48     00 06 0E F2 | 	cmp	_var04, #0 wz
25e4c     01 FA 65 A6 |  if_e	neg	result1, #1
25e50     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25e54     00 0A 0E F2 | 	cmp	_var06, #0 wz
25e58     01 FA 05 A6 |  if_e	mov	result1, #1
25e5c     03 FB 01 56 |  if_ne	mov	result1, _var04
25e60     05 FB 81 51 |  if_ne	sub	result1, _var06
25e64                 | __system__strncmp_ret
25e64     2D 00 64 FD | 	ret
25e68                 | 
25e68                 | __system____root_opendir
25e68     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25e6c     04 12 06 F1 | 	add	arg01, #4
25e70     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25e74     00 FA 05 F6 | 	mov	result1, #0
25e78     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25e7c                 | __system____root_opendir_ret
25e7c     2D 00 64 FD | 	ret
25e80                 | 
25e80                 | __system____root_readdir
25e80     03 4A 05 F6 | 	mov	COUNT_, #3
25e84     A8 00 A0 FD | 	call	#pushregs_
25e88     09 1F 02 F6 | 	mov	local01, arg01
25e8c     0A 21 02 F6 | 	mov	local02, arg02
25e90     04 1E 06 F1 | 	add	local01, #4
25e94     0F 23 02 FB | 	rdlong	local03, local01
25e98     04 1E 86 F1 | 	sub	local01, #4
25e9c                 | LR__3740
25e9c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25ea0     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25ea4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25ea8     01 FA 65 A6 |  if_e	neg	result1, #1
25eac     48 00 90 AD |  if_e	jmp	#LR__3741
25eb0     11 17 0A FB | 	rdlong	arg03, local03 wz
25eb4     04 22 06 A1 |  if_e	add	local03, #4
25eb8     E0 FF 9F AD |  if_e	jmp	#LR__3740
25ebc     11 15 02 FB | 	rdlong	arg02, local03
25ec0     01 14 06 F1 | 	add	arg02, #1
25ec4     10 13 02 F6 | 	mov	arg01, local02
25ec8     40 16 06 F6 | 	mov	arg03, #64
25ecc     58 FE BF FD | 	call	#__system__strncpy
25ed0     50 20 06 F1 | 	add	local02, #80
25ed4     10 03 48 FC | 	wrbyte	#1, local02
25ed8     08 20 86 F1 | 	sub	local02, #8
25edc     10 01 68 FC | 	wrlong	#0, local02
25ee0     04 20 06 F1 | 	add	local02, #4
25ee4     10 01 68 FC | 	wrlong	#0, local02
25ee8     04 22 06 F1 | 	add	local03, #4
25eec     04 1E 06 F1 | 	add	local01, #4
25ef0     0F 23 62 FC | 	wrlong	local03, local01
25ef4     00 FA 05 F6 | 	mov	result1, #0
25ef8                 | LR__3741
25ef8     A7 F0 03 F6 | 	mov	ptra, fp
25efc     B2 00 A0 FD | 	call	#popregs_
25f00                 | __system____root_readdir_ret
25f00     2D 00 64 FD | 	ret
25f04                 | 
25f04                 | __system____root_closedir
25f04     00 FA 05 F6 | 	mov	result1, #0
25f08                 | __system____root_closedir_ret
25f08     2D 00 64 FD | 	ret
25f0c                 | 
25f0c                 | __system____root_stat
25f0c     0A 01 02 F6 | 	mov	_var01, arg02
25f10     00 13 02 F6 | 	mov	arg01, _var01
25f14     00 14 06 F6 | 	mov	arg02, #0
25f18     30 16 06 F6 | 	mov	arg03, #48
25f1c     98 00 A0 FD | 	call	#\builtin_bytefill_
25f20     08 00 06 F1 | 	add	_var01, #8
25f24     08 00 80 FF 
25f28     00 FF 6B FC | 	wrlong	##4607, _var01
25f2c     00 FA 05 F6 | 	mov	result1, #0
25f30                 | __system____root_stat_ret
25f30     2D 00 64 FD | 	ret
25f34                 | 
25f34                 | __system___normalizeName
25f34     00 00 06 F6 | 	mov	_var01, #0
25f38     09 03 02 F6 | 	mov	_var02, arg01
25f3c     01 05 02 F6 | 	mov	_var03, _var02
25f40                 | LR__3750
25f40     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25f44     5C 01 90 AD |  if_e	jmp	#LR__3769
25f48     00 00 0E F2 | 	cmp	_var01, #0 wz
25f4c     02 07 02 56 |  if_ne	mov	_var04, _var03
25f50     01 04 06 51 |  if_ne	add	_var03, #1
25f54     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25f58     00 00 06 56 |  if_ne	mov	_var01, #0
25f5c     01 07 C2 FA | 	rdbyte	_var04, _var02
25f60     2E 06 0E F2 | 	cmp	_var04, #46 wz
25f64     D8 00 90 5D |  if_ne	jmp	#LR__3762
25f68     01 02 06 F1 | 	add	_var02, #1
25f6c     01 07 C2 FA | 	rdbyte	_var04, _var02
25f70     01 02 86 F1 | 	sub	_var02, #1
25f74     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f78     18 00 90 AD |  if_e	jmp	#LR__3751
25f7c     01 02 06 F1 | 	add	_var02, #1
25f80     01 09 C2 FA | 	rdbyte	_var05, _var02
25f84     01 02 86 F1 | 	sub	_var02, #1
25f88     04 0B 02 F6 | 	mov	_var06, _var05
25f8c     07 0A 4E F7 | 	zerox	_var06, #7 wz
25f90     10 00 90 5D |  if_ne	jmp	#LR__3752
25f94                 | LR__3751
25f94     01 0D 02 F6 | 	mov	_var07, _var02
25f98     01 0C 06 F1 | 	add	_var07, #1
25f9c     06 03 02 F6 | 	mov	_var02, _var07
25fa0     E0 00 90 FD | 	jmp	#LR__3766
25fa4                 | LR__3752
25fa4     01 02 06 F1 | 	add	_var02, #1
25fa8     01 0D C2 FA | 	rdbyte	_var07, _var02
25fac     01 02 86 F1 | 	sub	_var02, #1
25fb0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25fb4     2E 06 0E F2 | 	cmp	_var04, #46 wz
25fb8     84 00 90 5D |  if_ne	jmp	#LR__3761
25fbc     02 02 06 F1 | 	add	_var02, #2
25fc0     01 0D C2 FA | 	rdbyte	_var07, _var02
25fc4     02 02 86 F1 | 	sub	_var02, #2
25fc8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25fcc     2F 06 0E F2 | 	cmp	_var04, #47 wz
25fd0     18 00 90 AD |  if_e	jmp	#LR__3753
25fd4     02 02 06 F1 | 	add	_var02, #2
25fd8     01 09 C2 FA | 	rdbyte	_var05, _var02
25fdc     02 02 86 F1 | 	sub	_var02, #2
25fe0     04 0B 02 F6 | 	mov	_var06, _var05
25fe4     07 0A 4E F7 | 	zerox	_var06, #7 wz
25fe8     54 00 90 5D |  if_ne	jmp	#LR__3760
25fec                 | LR__3753
25fec     02 02 06 F1 | 	add	_var02, #2
25ff0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25ff4     40 00 90 ED |  if_be	jmp	#LR__3759
25ff8     02 0F 02 F6 | 	mov	_var08, _var03
25ffc     01 0E 86 F1 | 	sub	_var08, #1
26000                 | LR__3754
26000     07 07 C2 FA | 	rdbyte	_var04, _var08
26004     2F 06 0E F2 | 	cmp	_var04, #47 wz
26008     0C 00 90 5D |  if_ne	jmp	#LR__3755
2600c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26010     01 0E 86 11 |  if_a	sub	_var08, #1
26014     E8 FF 9F 1D |  if_a	jmp	#LR__3754
26018                 | LR__3755
26018     97 0C 48 FB | 	callpa	#(@LR__3757-@LR__3756)>>2,fcache_load_ptr_
2601c                 | LR__3756
2601c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26020     10 00 90 ED |  if_be	jmp	#LR__3758
26024     07 07 C2 FA | 	rdbyte	_var04, _var08
26028     2F 06 0E F2 | 	cmp	_var04, #47 wz
2602c     01 0E 86 51 |  if_ne	sub	_var08, #1
26030     E8 FF 9F 5D |  if_ne	jmp	#LR__3756
26034                 | LR__3757
26034                 | LR__3758
26034     07 05 02 F6 | 	mov	_var03, _var08
26038                 | LR__3759
26038     01 00 06 F6 | 	mov	_var01, #1
2603c     44 00 90 FD | 	jmp	#LR__3766
26040                 | LR__3760
26040                 | LR__3761
26040                 | LR__3762
26040     97 18 48 FB | 	callpa	#(@LR__3764-@LR__3763)>>2,fcache_load_ptr_
26044                 | LR__3763
26044     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26048     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2604c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
26050     20 00 90 AD |  if_e	jmp	#LR__3765
26054     01 0B 02 F6 | 	mov	_var06, _var02
26058     01 09 02 F6 | 	mov	_var05, _var02
2605c     01 08 06 F1 | 	add	_var05, #1
26060     05 11 C2 FA | 	rdbyte	_var09, _var06
26064     04 03 02 F6 | 	mov	_var02, _var05
26068     02 11 42 FC | 	wrbyte	_var09, _var03
2606c     01 04 06 F1 | 	add	_var03, #1
26070     D0 FF 9F FD | 	jmp	#LR__3763
26074                 | LR__3764
26074                 | LR__3765
26074     01 07 C2 FA | 	rdbyte	_var04, _var02
26078     2F 06 0E F2 | 	cmp	_var04, #47 wz
2607c     C0 FE 9F 5D |  if_ne	jmp	#LR__3750
26080     01 00 06 F6 | 	mov	_var01, #1
26084                 | LR__3766
26084     97 0C 48 FB | 	callpa	#(@LR__3768-@LR__3767)>>2,fcache_load_ptr_
26088                 | LR__3767
26088     01 07 C2 FA | 	rdbyte	_var04, _var02
2608c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26090     01 0D 02 A6 |  if_e	mov	_var07, _var02
26094     01 0C 06 A1 |  if_e	add	_var07, #1
26098     06 03 02 A6 |  if_e	mov	_var02, _var07
2609c     E8 FF 9F AD |  if_e	jmp	#LR__3767
260a0                 | LR__3768
260a0     9C FE 9F FD | 	jmp	#LR__3750
260a4                 | LR__3769
260a4     02 01 48 FC | 	wrbyte	#0, _var03
260a8                 | __system___normalizeName_ret
260a8     2D 00 64 FD | 	ret
260ac                 | 
260ac                 | __system___strrev
260ac     09 01 CA FA | 	rdbyte	_var01, arg01 wz
260b0     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
260b4     09 03 02 F6 | 	mov	_var02, arg01
260b8     97 1A 48 FB | 	callpa	#(@LR__3772-@LR__3770)>>2,fcache_load_ptr_
260bc                 | LR__3770
260bc     01 01 CA FA | 	rdbyte	_var01, _var02 wz
260c0     01 02 06 51 |  if_ne	add	_var02, #1
260c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3770
260c8     01 02 86 F1 | 	sub	_var02, #1
260cc                 | LR__3771
260cc     09 03 5A F2 | 	cmps	_var02, arg01 wcz
260d0     1C 00 90 ED |  if_be	jmp	#LR__3773
260d4     09 01 C2 FA | 	rdbyte	_var01, arg01
260d8     01 05 C2 FA | 	rdbyte	_var03, _var02
260dc     09 05 42 FC | 	wrbyte	_var03, arg01
260e0     01 01 42 FC | 	wrbyte	_var01, _var02
260e4     01 12 06 F1 | 	add	arg01, #1
260e8     01 02 86 F1 | 	sub	_var02, #1
260ec     DC FF 9F FD | 	jmp	#LR__3771
260f0                 | LR__3772
260f0                 | LR__3773
260f0                 | __system___strrev_ret
260f0     2D 00 64 FD | 	ret
260f4                 | 
260f4                 | __system___fmtpad
260f4     06 4A 05 F6 | 	mov	COUNT_, #6
260f8     A8 00 A0 FD | 	call	#pushregs_
260fc     09 1F 02 F6 | 	mov	local01, arg01
26100     0A 21 02 F6 | 	mov	local02, arg02
26104     0B 23 02 F6 | 	mov	local03, arg03
26108     10 13 EA F8 | 	getbyte	arg01, local02, #1
2610c     16 20 46 F0 | 	shr	local02, #22
26110     03 20 0E F5 | 	and	local02, #3 wz
26114     00 24 06 F6 | 	mov	local04, #0
26118     01 20 06 A6 |  if_e	mov	local02, #1
2611c     0C 21 CA F7 | 	test	local02, arg04 wz
26120     00 FA 05 A6 |  if_e	mov	result1, #0
26124     88 00 90 AD |  if_e	jmp	#LR__3783
26128     09 23 C2 F2 | 	subr	local03, arg01
2612c     01 22 56 F2 | 	cmps	local03, #1 wc
26130     00 FA 05 C6 |  if_b	mov	result1, #0
26134     78 00 90 CD |  if_b	jmp	#LR__3783
26138     03 20 0E F2 | 	cmp	local02, #3 wz
2613c     18 00 90 5D |  if_ne	jmp	#LR__3780
26140     01 18 0E F2 | 	cmp	arg04, #1 wz
26144     6E 20 62 FD | 	wrz	local02
26148     10 23 02 F1 | 	add	local03, local02
2614c     11 23 52 F6 | 	abs	local03, local03 wc
26150     01 22 46 F0 | 	shr	local03, #1
26154     11 23 82 F6 | 	negc	local03, local03
26158                 | LR__3780
26158     01 22 56 F2 | 	cmps	local03, #1 wc
2615c     4C 00 90 CD |  if_b	jmp	#LR__3782
26160     11 27 02 F6 | 	mov	local05, local03
26164                 | LR__3781
26164     0F 21 02 F6 | 	mov	local02, local01
26168     0F 29 02 F6 | 	mov	local06, local01
2616c     13 20 46 F7 | 	zerox	local02, #19
26170     14 28 46 F0 | 	shr	local06, #20
26174     02 28 66 F0 | 	shl	local06, #2
26178     ED 28 02 F1 | 	add	local06, __methods__
2617c     14 29 02 FB | 	rdlong	local06, local06
26180     20 12 06 F6 | 	mov	arg01, #32
26184     F2 22 02 F6 | 	mov	local03, objptr
26188     10 E5 01 F6 | 	mov	objptr, local02
2618c     2D 28 62 FD | 	call	local06
26190     11 E5 01 F6 | 	mov	objptr, local03
26194     FD 28 02 F6 | 	mov	local06, result1
26198     00 28 56 F2 | 	cmps	local06, #0 wc
2619c     14 FB 01 C6 |  if_b	mov	result1, local06
261a0     0C 00 90 CD |  if_b	jmp	#LR__3783
261a4     14 25 02 F1 | 	add	local04, local06
261a8     EE 27 6E FB | 	djnz	local05, #LR__3781
261ac                 | LR__3782
261ac     12 FB 01 F6 | 	mov	result1, local04
261b0                 | LR__3783
261b0     A7 F0 03 F6 | 	mov	ptra, fp
261b4     B2 00 A0 FD | 	call	#popregs_
261b8                 | __system___fmtpad_ret
261b8     2D 00 64 FD | 	ret
261bc                 | 
261bc                 | __system___uitoa
261bc     04 4A 05 F6 | 	mov	COUNT_, #4
261c0     A8 00 A0 FD | 	call	#pushregs_
261c4     09 1F 02 F6 | 	mov	local01, arg01
261c8     00 1A 4E F2 | 	cmps	arg05, #0 wz
261cc     0F 1B 02 F6 | 	mov	arg05, local01
261d0     00 20 06 F6 | 	mov	local02, #0
261d4     37 22 06 56 |  if_ne	mov	local03, #55
261d8     57 22 06 A6 |  if_e	mov	local03, #87
261dc                 | LR__3790
261dc     0B 15 12 FD | 	qdiv	arg02, arg03
261e0     19 24 62 FD | 	getqy	local04
261e4     0B 15 12 FD | 	qdiv	arg02, arg03
261e8     0A 24 16 F2 | 	cmp	local04, #10 wc
261ec     30 24 06 C1 |  if_b	add	local04, #48
261f0     11 25 02 31 |  if_ae	add	local04, local03
261f4     0D 25 42 FC | 	wrbyte	local04, arg05
261f8     01 1A 06 F1 | 	add	arg05, #1
261fc     01 20 06 F1 | 	add	local02, #1
26200     18 14 62 FD | 	getqx	arg02
26204     00 14 0E F2 | 	cmp	arg02, #0 wz
26208     D0 FF 9F 5D |  if_ne	jmp	#LR__3790
2620c     0C 21 12 F2 | 	cmp	local02, arg04 wc
26210     C8 FF 9F CD |  if_b	jmp	#LR__3790
26214     0D 01 48 FC | 	wrbyte	#0, arg05
26218     0F 13 02 F6 | 	mov	arg01, local01
2621c     8C FE BF FD | 	call	#__system___strrev
26220     10 FB 01 F6 | 	mov	result1, local02
26224     A7 F0 03 F6 | 	mov	ptra, fp
26228     B2 00 A0 FD | 	call	#popregs_
2622c                 | __system___uitoa_ret
2622c     2D 00 64 FD | 	ret
26230                 | 
26230                 | __system__disassemble_0498
26230     10 4A 05 F6 | 	mov	COUNT_, #16
26234     A8 00 A0 FD | 	call	#pushregs_
26238     09 1F 02 F6 | 	mov	local01, arg01
2623c     0A 21 02 F6 | 	mov	local02, arg02
26240     0B 23 02 F6 | 	mov	local03, arg03
26244     0C 25 02 F6 | 	mov	local04, arg04
26248     0D 27 02 F6 | 	mov	local05, arg05
2624c     13 13 52 F6 | 	abs	arg01, local05 wc
26250     1F 28 C6 C9 |  if_b	decod	local06, #31
26254     00 28 06 36 |  if_ae	mov	local06, #0
26258     F0 CF BF FD | 	call	#__system___float_fromuns
2625c     14 FB 61 F5 | 	xor	result1, local06
26260     FD 2A 02 F6 | 	mov	local07, result1
26264     00 2C 06 F6 | 	mov	local08, #0
26268     0F 13 02 F6 | 	mov	arg01, local01
2626c     00 14 06 F6 | 	mov	arg02, #0
26270     01 16 06 F6 | 	mov	arg03, #1
26274     0C D8 BF FD | 	call	#__system___float_cmp
26278     00 FA 0D F2 | 	cmp	result1, #0 wz
2627c     00 2E 06 A6 |  if_e	mov	local09, #0
26280     10 01 68 AC |  if_e	wrlong	#0, local02
26284     11 2F 62 AC |  if_e	wrlong	local09, local03
26288     8C 01 90 AD |  if_e	jmp	#LR__3812
2628c     0F 13 02 F6 | 	mov	arg01, local01
26290     BC DC BF FD | 	call	#__system____builtin_ilogb
26294     FD 30 02 F6 | 	mov	local10, result1
26298     0A 26 0E F2 | 	cmp	local05, #10 wz
2629c     24 00 90 5D |  if_ne	jmp	#LR__3800
262a0     18 2F 02 F6 | 	mov	local09, local10
262a4     01 2E 66 F0 | 	shl	local09, #1
262a8     18 2F 02 F1 | 	add	local09, local10
262ac     17 31 52 F6 | 	abs	local10, local09 wc
262b0     0A 30 16 FD | 	qdiv	local10, #10
262b4     09 32 06 F6 | 	mov	local11, #9
262b8     18 30 62 FD | 	getqx	local10
262bc     18 31 82 F6 | 	negc	local10, local10
262c0     04 00 90 FD | 	jmp	#LR__3801
262c4                 | LR__3800
262c4     18 32 06 F6 | 	mov	local11, #24
262c8                 | LR__3801
262c8                 | LR__3802
262c8     08 2C 56 F2 | 	cmps	local08, #8 wc
262cc     01 2C 06 F1 | 	add	local08, #1
262d0     60 00 90 3D |  if_ae	jmp	#LR__3803
262d4     00 C0 1F FF 
262d8     00 12 06 F6 | 	mov	arg01, ##1065353216
262dc     15 15 02 F6 | 	mov	arg02, local07
262e0     18 17 02 F6 | 	mov	arg03, local10
262e4     4C E3 BF FD | 	call	#__system___float_pow_n
262e8     FD 14 02 F6 | 	mov	arg02, result1
262ec     0F 13 02 F6 | 	mov	arg01, local01
262f0     60 D5 BF FD | 	call	#__system___float_div
262f4     FD 34 02 F6 | 	mov	local12, result1
262f8     1A 13 02 F6 | 	mov	arg01, local12
262fc     00 C0 1F FF 
26300     00 14 06 F6 | 	mov	arg02, ##1065353216
26304     01 16 06 F6 | 	mov	arg03, #1
26308     78 D7 BF FD | 	call	#__system___float_cmp
2630c     00 FA 55 F2 | 	cmps	result1, #0 wc
26310     01 30 86 C1 |  if_b	sub	local10, #1
26314     B0 FF 9F CD |  if_b	jmp	#LR__3802
26318     15 15 02 F6 | 	mov	arg02, local07
2631c     1A 13 02 F6 | 	mov	arg01, local12
26320     01 16 66 F6 | 	neg	arg03, #1
26324     5C D7 BF FD | 	call	#__system___float_cmp
26328     00 FA 55 F2 | 	cmps	result1, #0 wc
2632c     01 30 06 31 |  if_ae	add	local10, #1
26330     94 FF 9F 3D |  if_ae	jmp	#LR__3802
26334                 | LR__3803
26334     1A 13 02 F6 | 	mov	arg01, local12
26338     14 DC BF FD | 	call	#__system____builtin_ilogb
2633c     FD 36 02 F6 | 	mov	local13, result1
26340     1A 39 02 F6 | 	mov	local14, local12
26344     17 39 06 F4 | 	bitl	local14, #279
26348     17 38 26 F4 | 	bith	local14, #23
2634c     1B 39 62 F0 | 	shl	local14, local13
26350     02 26 0E F2 | 	cmp	local05, #2 wz
26354     02 24 66 A0 |  if_e	shl	local04, #2
26358     00 3A 06 F6 | 	mov	local15, #0
2635c     00 24 56 F2 | 	cmps	local04, #0 wc
26360     10 00 90 3D |  if_ae	jmp	#LR__3804
26364     18 25 C2 F2 | 	subr	local04, local10
26368     00 24 56 F2 | 	cmps	local04, #0 wc
2636c     A0 00 90 CD |  if_b	jmp	#LR__3811
26370     04 00 90 FD | 	jmp	#LR__3805
26374                 | LR__3804
26374     01 24 06 F1 | 	add	local04, #1
26378                 | LR__3805
26378     19 25 7A F3 | 	fles	local04, local11 wcz
2637c     01 3C 06 F6 | 	mov	local16, #1
26380     97 22 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
26384                 | LR__3806
26384     00 40 00 FF 
26388     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
2638c     38 00 90 3D |  if_ae	jmp	#LR__3808
26390     01 24 56 F2 | 	cmps	local04, #1 wc
26394     01 24 86 F1 | 	sub	local04, #1
26398     2C 00 90 CD |  if_b	jmp	#LR__3808
2639c     13 3B 02 FD | 	qmul	local15, local05
263a0     1C 37 02 F6 | 	mov	local13, local14
263a4     17 36 46 F0 | 	shr	local13, #23
263a8     17 39 06 F4 | 	bitl	local14, #279
263ac     18 3A 62 FD | 	getqx	local15
263b0     13 3D 02 FD | 	qmul	local16, local05
263b4     18 3C 62 FD | 	getqx	local16
263b8     13 39 02 FD | 	qmul	local14, local05
263bc     1B 3B 02 F1 | 	add	local15, local13
263c0     18 38 62 FD | 	getqx	local14
263c4     BC FF 9F FD | 	jmp	#LR__3806
263c8                 | LR__3807
263c8                 | LR__3808
263c8     13 2F 02 F6 | 	mov	local09, local05
263cc     17 2E 66 F0 | 	shl	local09, #23
263d0     17 37 52 F6 | 	abs	local13, local09 wc
263d4     01 36 46 F0 | 	shr	local13, #1
263d8     1B 37 82 F6 | 	negc	local13, local13
263dc     1B 39 1A F2 | 	cmp	local14, local13 wcz
263e0     20 00 90 1D |  if_a	jmp	#LR__3809
263e4     17 26 66 F0 | 	shl	local05, #23
263e8     13 37 52 F6 | 	abs	local13, local05 wc
263ec     01 36 46 F0 | 	shr	local13, #1
263f0     1B 37 82 F6 | 	negc	local13, local13
263f4     1B 39 0A F2 | 	cmp	local14, local13 wz
263f8     14 00 90 5D |  if_ne	jmp	#LR__3810
263fc     01 3A CE F7 | 	test	local15, #1 wz
26400     0C 00 90 AD |  if_e	jmp	#LR__3810
26404                 | LR__3809
26404     01 3A 06 F1 | 	add	local15, #1
26408     1E 3B 0A F2 | 	cmp	local15, local16 wz
2640c     01 30 06 A1 |  if_e	add	local10, #1
26410                 | LR__3810
26410                 | LR__3811
26410     10 3B 62 FC | 	wrlong	local15, local02
26414     11 31 62 FC | 	wrlong	local10, local03
26418                 | LR__3812
26418     A7 F0 03 F6 | 	mov	ptra, fp
2641c     B2 00 A0 FD | 	call	#popregs_
26420                 | __system__disassemble_0498_ret
26420     2D 00 64 FD | 	ret
26424                 | 
26424                 | __system__emitsign_0500
26424     00 FA 05 F6 | 	mov	result1, #0
26428     00 14 0E F2 | 	cmp	arg02, #0 wz
2642c     09 01 02 56 |  if_ne	mov	_var01, arg01
26430     01 12 06 51 |  if_ne	add	arg01, #1
26434     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
26438     01 FA 05 56 |  if_ne	mov	result1, #1
2643c     00 16 0E F2 | 	cmp	arg03, #0 wz
26440     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26444     01 12 06 51 |  if_ne	add	arg01, #1
26448     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2644c     02 FA 05 51 |  if_ne	add	result1, #2
26450                 | __system__emitsign_0500_ret
26450     2D 00 64 FD | 	ret
26454                 | 
26454                 | __system___gettxfunc
26454     01 4A 05 F6 | 	mov	COUNT_, #1
26458     A8 00 A0 FD | 	call	#pushregs_
2645c     A0 F8 BF FD | 	call	#__system____getftab
26460     FD 1E 0A F6 | 	mov	local01, result1 wz
26464     10 00 90 AD |  if_e	jmp	#LR__3820
26468     08 1E 06 F1 | 	add	local01, #8
2646c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26470     08 1E 86 F1 | 	sub	local01, #8
26474     08 00 90 5D |  if_ne	jmp	#LR__3821
26478                 | LR__3820
26478     00 FA 05 F6 | 	mov	result1, #0
2647c     0C 00 90 FD | 	jmp	#LR__3822
26480                 | LR__3821
26480     00 98 04 FF 
26484     00 1E 46 F5 | 	or	local01, ##154140672
26488     0F FB 01 F6 | 	mov	result1, local01
2648c                 | LR__3822
2648c     A7 F0 03 F6 | 	mov	ptra, fp
26490     B2 00 A0 FD | 	call	#popregs_
26494                 | __system___gettxfunc_ret
26494     2D 00 64 FD | 	ret
26498                 | 
26498                 | __system___getrxfunc
26498     01 4A 05 F6 | 	mov	COUNT_, #1
2649c     A8 00 A0 FD | 	call	#pushregs_
264a0     5C F8 BF FD | 	call	#__system____getftab
264a4     FD 1E 0A F6 | 	mov	local01, result1 wz
264a8     10 00 90 AD |  if_e	jmp	#LR__3830
264ac     08 1E 06 F1 | 	add	local01, #8
264b0     0F 15 0A FB | 	rdlong	arg02, local01 wz
264b4     08 1E 86 F1 | 	sub	local01, #8
264b8     08 00 90 5D |  if_ne	jmp	#LR__3831
264bc                 | LR__3830
264bc     00 FA 05 F6 | 	mov	result1, #0
264c0     0C 00 90 FD | 	jmp	#LR__3832
264c4                 | LR__3831
264c4     00 A0 04 FF 
264c8     00 1E 46 F5 | 	or	local01, ##155189248
264cc     0F FB 01 F6 | 	mov	result1, local01
264d0                 | LR__3832
264d0     A7 F0 03 F6 | 	mov	ptra, fp
264d4     B2 00 A0 FD | 	call	#popregs_
264d8                 | __system___getrxfunc_ret
264d8     2D 00 64 FD | 	ret
264dc                 | 
264dc                 | __system___getiolock_0540
264dc     01 4A 05 F6 | 	mov	COUNT_, #1
264e0     A8 00 A0 FD | 	call	#pushregs_
264e4     18 F8 BF FD | 	call	#__system____getftab
264e8     FD 1E 0A F6 | 	mov	local01, result1 wz
264ec     10 00 90 AD |  if_e	jmp	#LR__3840
264f0     08 1E 06 F1 | 	add	local01, #8
264f4     0F FB 09 FB | 	rdlong	result1, local01 wz
264f8     08 1E 86 F1 | 	sub	local01, #8
264fc     18 00 90 5D |  if_ne	jmp	#LR__3841
26500                 | LR__3840
26500     01 00 00 FF 
26504     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26508     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2650c     01 00 00 FF 
26510     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26514     08 00 90 FD | 	jmp	#LR__3842
26518                 | LR__3841
26518     0C 1E 06 F1 | 	add	local01, #12
2651c     0F FB 01 F6 | 	mov	result1, local01
26520                 | LR__3842
26520     A7 F0 03 F6 | 	mov	ptra, fp
26524     B2 00 A0 FD | 	call	#popregs_
26528                 | __system___getiolock_0540_ret
26528     2D 00 64 FD | 	ret
2652c                 | 
2652c                 | __system____ScanForChar
2652c     09 01 02 F6 | 	mov	_var01, arg01
26530     09 03 02 F6 | 	mov	_var02, arg01
26534     97 06 48 FB | 	callpa	#(@LR__3851-@LR__3850)>>2,fcache_load_ptr_
26538                 | LR__3850
26538     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2653c     01 02 06 51 |  if_ne	add	_var02, #1
26540     F4 FF 9F 5D |  if_ne	jmp	#LR__3850
26544                 | LR__3851
26544     09 03 82 F1 | 	sub	_var02, arg01
26548     01 FB 01 F6 | 	mov	result1, _var02
2654c     FD 12 0A F6 | 	mov	arg01, result1 wz
26550     00 FA 05 A6 |  if_e	mov	result1, #0
26554     B8 00 90 AD |  if_e	jmp	#LR__3858
26558     0A 05 02 F6 | 	mov	_var03, arg02
2655c     07 04 4E F7 | 	zerox	_var03, #7 wz
26560     00 FA 05 A6 |  if_e	mov	result1, #0
26564     A8 00 90 AD |  if_e	jmp	#LR__3858
26568     01 16 16 F2 | 	cmp	arg03, #1 wc
2656c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
26570     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26574     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26578     94 00 90 4D |  if_c_and_nz	jmp	#LR__3858
2657c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
26580     10 00 90 ED |  if_be	jmp	#LR__3852
26584     00 18 0E F2 | 	cmp	arg04, #0 wz
26588     00 FA 05 A6 |  if_e	mov	result1, #0
2658c     80 00 90 AD |  if_e	jmp	#LR__3858
26590     09 17 02 F6 | 	mov	arg03, arg01
26594                 | LR__3852
26594     01 16 86 F1 | 	sub	arg03, #1
26598     00 18 0E F2 | 	cmp	arg04, #0 wz
2659c     38 00 90 5D |  if_ne	jmp	#LR__3854
265a0     0B 07 02 F6 | 	mov	_var04, arg03
265a4     09 09 02 F6 | 	mov	_var05, arg01
265a8                 | LR__3853
265a8     04 07 12 F2 | 	cmp	_var04, _var05 wc
265ac     5C 00 90 3D |  if_ae	jmp	#LR__3857
265b0     03 05 02 F6 | 	mov	_var03, _var04
265b4     00 05 02 F1 | 	add	_var03, _var01
265b8     02 05 C2 FA | 	rdbyte	_var03, _var03
265bc     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
265c0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
265c4     01 06 06 A1 |  if_e	add	_var04, #1
265c8     03 FB 01 A6 |  if_e	mov	result1, _var04
265cc     40 00 90 AD |  if_e	jmp	#LR__3858
265d0     01 06 06 F1 | 	add	_var04, #1
265d4     D0 FF 9F FD | 	jmp	#LR__3853
265d8                 | LR__3854
265d8     0B 07 02 F6 | 	mov	_var04, arg03
265dc                 | LR__3855
265dc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
265e0     28 00 90 1D |  if_a	jmp	#LR__3856
265e4     03 09 02 F6 | 	mov	_var05, _var04
265e8     00 09 02 F1 | 	add	_var05, _var01
265ec     04 05 C2 FA | 	rdbyte	_var03, _var05
265f0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
265f4     04 05 0A F2 | 	cmp	_var03, _var05 wz
265f8     01 06 06 A1 |  if_e	add	_var04, #1
265fc     03 FB 01 A6 |  if_e	mov	result1, _var04
26600     0C 00 90 AD |  if_e	jmp	#LR__3858
26604     01 06 86 F1 | 	sub	_var04, #1
26608     D0 FF 9F FD | 	jmp	#LR__3855
2660c                 | LR__3856
2660c                 | LR__3857
2660c     00 FA 05 F6 | 	mov	result1, #0
26610                 | LR__3858
26610                 | __system____ScanForChar_ret
26610     2D 00 64 FD | 	ret
26614                 | 
26614                 | __system___basic_dir
26614     05 4A 05 F6 | 	mov	COUNT_, #5
26618     A8 00 A0 FD | 	call	#pushregs_
2661c     4C F0 07 F1 | 	add	ptra, #76
26620     04 4E 05 F1 | 	add	fp, #4
26624     A7 12 62 FC | 	wrlong	arg01, fp
26628     04 4E 05 F1 | 	add	fp, #4
2662c     A7 14 62 FC | 	wrlong	arg02, fp
26630     04 4E 85 F1 | 	sub	fp, #4
26634     A7 14 0A FB | 	rdlong	arg02, fp wz
26638     04 4E 85 F1 | 	sub	fp, #4
2663c     04 4E 05 51 |  if_ne	add	fp, #4
26640     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26644     04 4E 85 51 |  if_ne	sub	fp, #4
26648     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
2664c     70 00 90 AD |  if_e	jmp	#LR__3860
26650     03 00 00 FF 
26654     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26658     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2665c     03 00 00 FF 
26660     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26664     03 00 00 5F 
26668     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
2666c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
26670     03 00 00 5F 
26674     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26678     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2667c     81 01 00 FF 
26680     2C 13 06 F6 | 	mov	arg01, ##@LR__5028
26684     E0 E8 BF FD | 	call	#__system__opendir
26688     03 00 00 FF 
2668c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26690     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26694     08 4E 05 F1 | 	add	fp, #8
26698     A7 20 02 FB | 	rdlong	local02, fp
2669c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
266a0     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
266a4     04 4E 85 F1 | 	sub	fp, #4
266a8     A7 20 02 FB | 	rdlong	local02, fp
266ac     04 4E 85 F1 | 	sub	fp, #4
266b0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
266b4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
266b8     03 00 00 FF 
266bc     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
266c0                 | LR__3860
266c0     03 00 00 FF 
266c4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266c8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266cc     03 00 00 FF 
266d0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266d4     81 01 00 AF 
266d8     2E FB 05 A6 |  if_e	mov	result1, ##@LR__5029
266dc     84 02 90 AD |  if_e	jmp	#LR__3873
266e0                 | LR__3861
266e0     03 00 00 FF 
266e4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
266ec     03 00 00 FF 
266f0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266f4     D0 E9 BF FD | 	call	#__system__readdir
266f8     0C 4E 05 F1 | 	add	fp, #12
266fc     A7 FA 61 FC | 	wrlong	result1, fp
26700     0C 4E 85 F1 | 	sub	fp, #12
26704     00 FA 0D F2 | 	cmp	result1, #0 wz
26708     38 00 90 5D |  if_ne	jmp	#LR__3862
2670c     03 00 00 FF 
26710     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26714     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26718     03 00 00 FF 
2671c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26720     30 E9 BF FD | 	call	#__system__closedir
26724     03 00 00 FF 
26728     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2672c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
26730     03 00 00 FF 
26734     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26738     81 01 00 FF 
2673c     30 FB 05 F6 | 	mov	result1, ##@LR__5030
26740     20 02 90 FD | 	jmp	#LR__3873
26744                 | LR__3862
26744     0C 4E 05 F1 | 	add	fp, #12
26748     A7 12 02 FB | 	rdlong	arg01, fp
2674c     0C 4E 85 F1 | 	sub	fp, #12
26750     03 00 00 FF 
26754     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
26758     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2675c     03 00 00 FF 
26760     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26764     10 09 B0 FD | 	call	#__system___pat_match
26768     00 FA 0D F2 | 	cmp	result1, #0 wz
2676c     70 FF 9F AD |  if_e	jmp	#LR__3861
26770     03 00 00 FF 
26774     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26778     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2677c     03 00 00 FF 
26780     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26784     78 01 90 AD |  if_e	jmp	#LR__3869
26788     0C 4E 05 F1 | 	add	fp, #12
2678c     A7 12 02 FB | 	rdlong	arg01, fp
26790     04 4E 05 F1 | 	add	fp, #4
26794     A7 14 02 F6 | 	mov	arg02, fp
26798     10 4E 85 F1 | 	sub	fp, #16
2679c     2C F2 BF FD | 	call	#__system__stat
267a0     40 4E 05 F1 | 	add	fp, #64
267a4     A7 FA 61 FC | 	wrlong	result1, fp
267a8     40 4E 85 F1 | 	sub	fp, #64
267ac     00 FA 0D F2 | 	cmp	result1, #0 wz
267b0     81 01 00 5F 
267b4     32 FB 05 56 |  if_ne	mov	result1, ##@LR__5031
267b8     A8 01 90 5D |  if_ne	jmp	#LR__3873
267bc     18 4E 05 F1 | 	add	fp, #24
267c0     A7 20 02 FB | 	rdlong	local02, fp
267c4     78 00 00 FF 
267c8     00 20 06 F5 | 	and	local02, ##61440
267cc     2C 4E 05 F1 | 	add	fp, #44
267d0     A7 20 62 FC | 	wrlong	local02, fp
267d4     38 4E 85 F1 | 	sub	fp, #56
267d8     A7 20 02 FB | 	rdlong	local02, fp
267dc     0C 4E 85 F1 | 	sub	fp, #12
267e0     10 21 C2 FA | 	rdbyte	local02, local02
267e4     2E 20 0E F2 | 	cmp	local02, #46 wz
267e8     08 4E 05 A1 |  if_e	add	fp, #8
267ec     A7 04 68 AC |  if_e	wrlong	#2, fp
267f0     08 4E C5 F3 | 	sumz	fp, #8
267f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
267f8     08 4E 85 51 |  if_ne	sub	fp, #8
267fc     44 4E 05 F1 | 	add	fp, #68
26800     A7 20 02 FB | 	rdlong	local02, fp
26804     44 4E 85 F1 | 	sub	fp, #68
26808     08 00 00 FF 
2680c     00 20 0E F2 | 	cmp	local02, ##4096 wz
26810     18 00 90 5D |  if_ne	jmp	#LR__3863
26814     08 4E 05 F1 | 	add	fp, #8
26818     A7 20 02 FB | 	rdlong	local02, fp
2681c     10 20 46 F5 | 	or	local02, #16
26820     A7 20 62 FC | 	wrlong	local02, fp
26824     08 4E 85 F1 | 	sub	fp, #8
26828     AC 00 90 FD | 	jmp	#LR__3868
2682c                 | LR__3863
2682c     44 4E 05 F1 | 	add	fp, #68
26830     A7 20 02 FB | 	rdlong	local02, fp
26834     44 4E 85 F1 | 	sub	fp, #68
26838     10 00 00 FF 
2683c     00 20 0E F2 | 	cmp	local02, ##8192 wz
26840     44 4E 05 51 |  if_ne	add	fp, #68
26844     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26848     44 4E 85 51 |  if_ne	sub	fp, #68
2684c     18 00 00 5F 
26850     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26854     44 4E 05 51 |  if_ne	add	fp, #68
26858     0F 23 02 56 |  if_ne	mov	local03, local01
2685c     44 4E 85 51 |  if_ne	sub	fp, #68
26860     20 00 00 5F 
26864     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
26868     18 00 90 5D |  if_ne	jmp	#LR__3864
2686c     08 4E 05 F1 | 	add	fp, #8
26870     A7 20 02 FB | 	rdlong	local02, fp
26874     04 20 46 F5 | 	or	local02, #4
26878     A7 20 62 FC | 	wrlong	local02, fp
2687c     08 4E 85 F1 | 	sub	fp, #8
26880     54 00 90 FD | 	jmp	#LR__3867
26884                 | LR__3864
26884     18 4E 05 F1 | 	add	fp, #24
26888     A7 20 02 FB | 	rdlong	local02, fp
2688c     18 4E 85 F1 | 	sub	fp, #24
26890     92 20 CE F7 | 	test	local02, #146 wz
26894     18 00 90 5D |  if_ne	jmp	#LR__3865
26898     08 4E 05 F1 | 	add	fp, #8
2689c     A7 20 02 FB | 	rdlong	local02, fp
268a0     01 20 46 F5 | 	or	local02, #1
268a4     A7 20 62 FC | 	wrlong	local02, fp
268a8     08 4E 85 F1 | 	sub	fp, #8
268ac     28 00 90 FD | 	jmp	#LR__3866
268b0                 | LR__3865
268b0     44 4E 05 F1 | 	add	fp, #68
268b4     A7 24 02 FB | 	rdlong	local04, fp
268b8     44 4E 85 F1 | 	sub	fp, #68
268bc     08 00 00 FF 
268c0     00 24 0E F2 | 	cmp	local04, ##4096 wz
268c4     08 4E 05 51 |  if_ne	add	fp, #8
268c8     A7 24 02 5B |  if_ne	rdlong	local04, fp
268cc     20 24 46 55 |  if_ne	or	local04, #32
268d0     A7 24 62 5C |  if_ne	wrlong	local04, fp
268d4     08 4E 85 51 |  if_ne	sub	fp, #8
268d8                 | LR__3866
268d8                 | LR__3867
268d8                 | LR__3868
268d8     08 4E 05 F1 | 	add	fp, #8
268dc     A7 24 02 FB | 	rdlong	local04, fp
268e0     08 4E 85 F1 | 	sub	fp, #8
268e4     03 00 00 FF 
268e8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
268ec     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
268f0     03 00 00 FF 
268f4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
268f8     0F 25 CA F7 | 	test	local04, local01 wz
268fc     E0 FD 9F AD |  if_e	jmp	#LR__3861
26900                 | LR__3869
26900     0C 4E 05 F1 | 	add	fp, #12
26904     A7 12 02 FB | 	rdlong	arg01, fp
26908     0C 4E 85 F1 | 	sub	fp, #12
2690c     09 27 02 F6 | 	mov	local05, arg01
26910     97 06 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
26914                 | LR__3870
26914     13 FB C9 FA | 	rdbyte	result1, local05 wz
26918     01 26 06 51 |  if_ne	add	local05, #1
2691c     F4 FF 9F 5D |  if_ne	jmp	#LR__3870
26920                 | LR__3871
26920     13 13 C2 F2 | 	subr	arg01, local05
26924     01 12 06 F1 | 	add	arg01, #1
26928     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2692c     48 4E 05 F1 | 	add	fp, #72
26930     A7 FA 61 FC | 	wrlong	result1, fp
26934     48 4E 85 F1 | 	sub	fp, #72
26938     00 FA 0D F2 | 	cmp	result1, #0 wz
2693c     18 00 90 AD |  if_e	jmp	#LR__3872
26940     48 4E 05 F1 | 	add	fp, #72
26944     A7 12 02 FB | 	rdlong	arg01, fp
26948     3C 4E 85 F1 | 	sub	fp, #60
2694c     A7 14 02 FB | 	rdlong	arg02, fp
26950     0C 4E 85 F1 | 	sub	fp, #12
26954     F8 A0 BF FD | 	call	#__system____builtin_strcpy
26958                 | LR__3872
26958     48 4E 05 F1 | 	add	fp, #72
2695c     A7 FA 01 FB | 	rdlong	result1, fp
26960     48 4E 85 F1 | 	sub	fp, #72
26964                 | LR__3873
26964     A7 F0 03 F6 | 	mov	ptra, fp
26968     B2 00 A0 FD | 	call	#popregs_
2696c                 | __system___basic_dir_ret
2696c     2D 00 64 FD | 	ret
26970                 | 
26970                 | __system__pack_0606
26970     09 01 02 F6 | 	mov	_var01, arg01
26974     7F 16 06 F1 | 	add	arg03, #127
26978     04 18 CE F7 | 	test	arg04, #4 wz
2697c     10 00 90 AD |  if_e	jmp	#LR__3880
26980     00 00 0E F2 | 	cmp	_var01, #0 wz
26984     16 00 C6 A9 |  if_e	decod	_var01, #22
26988     F7 00 26 F4 | 	bith	_var01, #247
2698c     B4 00 90 FD | 	jmp	#LR__3889
26990                 | LR__3880
26990     02 18 CE F7 | 	test	arg04, #2 wz
26994     00 C0 3F 5F 
26998     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2699c     00 14 06 56 |  if_ne	mov	arg02, #0
269a0     A0 00 90 5D |  if_ne	jmp	#LR__3888
269a4     08 18 CE F7 | 	test	arg04, #8 wz
269a8     00 00 06 56 |  if_ne	mov	_var01, #0
269ac     94 00 90 5D |  if_ne	jmp	#LR__3887
269b0     FF 16 56 F2 | 	cmps	arg03, #255 wc
269b4     00 C0 3F 3F 
269b8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
269bc     00 14 06 36 |  if_ae	mov	arg02, #0
269c0     80 00 90 3D |  if_ae	jmp	#LR__3886
269c4     01 16 56 F2 | 	cmps	arg03, #1 wc
269c8     6C 00 90 3D |  if_ae	jmp	#LR__3884
269cc     01 14 46 F0 | 	shr	arg02, #1
269d0     00 03 02 F6 | 	mov	_var02, _var01
269d4     01 02 06 F5 | 	and	_var02, #1
269d8     1F 02 66 F0 | 	shl	_var02, #31
269dc     01 15 42 F5 | 	or	arg02, _var02
269e0     01 00 46 F0 | 	shr	_var01, #1
269e4     97 1E 48 FB | 	callpa	#(@LR__3882-@LR__3881)>>2,fcache_load_ptr_
269e8                 | LR__3881
269e8     00 16 56 F2 | 	cmps	arg03, #0 wc
269ec     34 00 90 3D |  if_ae	jmp	#LR__3883
269f0     00 00 0E F2 | 	cmp	_var01, #0 wz
269f4     2C 00 90 AD |  if_e	jmp	#LR__3883
269f8     0A 13 02 F6 | 	mov	arg01, arg02
269fc     01 12 06 F5 | 	and	arg01, #1
26a00     01 16 06 F1 | 	add	arg03, #1
26a04     01 14 46 F0 | 	shr	arg02, #1
26a08     00 03 02 F6 | 	mov	_var02, _var01
26a0c     01 02 06 F5 | 	and	_var02, #1
26a10     1F 02 66 F0 | 	shl	_var02, #31
26a14     01 15 42 F5 | 	or	arg02, _var02
26a18     09 15 42 F5 | 	or	arg02, arg01
26a1c     01 00 46 F0 | 	shr	_var01, #1
26a20     C4 FF 9F FD | 	jmp	#LR__3881
26a24                 | LR__3882
26a24                 | LR__3883
26a24     00 16 56 F2 | 	cmps	arg03, #0 wc
26a28     18 00 90 3D |  if_ae	jmp	#LR__3885
26a2c     00 14 0E F2 | 	cmp	arg02, #0 wz
26a30     6F 14 62 FD | 	wrnz	arg02
26a34     0C 00 90 FD | 	jmp	#LR__3885
26a38                 | LR__3884
26a38     17 01 06 F4 | 	bitl	_var01, #279
26a3c     17 16 66 F0 | 	shl	arg03, #23
26a40     0B 01 42 F5 | 	or	_var01, arg03
26a44                 | LR__3885
26a44                 | LR__3886
26a44                 | LR__3887
26a44                 | LR__3888
26a44                 | LR__3889
26a44     01 00 CE F7 | 	test	_var01, #1 wz
26a48     01 14 46 55 |  if_ne	or	arg02, #1
26a4c     0A 17 02 F6 | 	mov	arg03, arg02
26a50     00 02 06 F6 | 	mov	_var02, #0
26a54     FF FF 3F FF 
26a58     FF 15 06 F1 | 	add	arg02, ##2147483647
26a5c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26a60     01 02 06 C6 |  if_b	mov	_var02, #1
26a64     01 01 02 F1 | 	add	_var01, _var02
26a68     01 18 CE F7 | 	test	arg04, #1 wz
26a6c     1F 00 26 54 |  if_ne	bith	_var01, #31
26a70     00 FB 01 F6 | 	mov	result1, _var01
26a74                 | __system__pack_0606_ret
26a74     2D 00 64 FD | 	ret
26a78                 | 
26a78                 | __system___rxtxioctl_0696
26a78     00 15 0E F2 | 	cmp	arg02, #256 wz
26a7c     0C 00 90 AD |  if_e	jmp	#LR__3890
26a80     01 15 0E F2 | 	cmp	arg02, #257 wz
26a84     1C 00 90 AD |  if_e	jmp	#LR__3891
26a88     30 00 90 FD | 	jmp	#LR__3892
26a8c                 | LR__3890
26a8c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a90     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26a94     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a98     0B FB 61 FC | 	wrlong	result1, arg03
26a9c     00 FA 05 F6 | 	mov	result1, #0
26aa0     28 00 90 FD | 	jmp	#LR__3893
26aa4                 | LR__3891
26aa4     0B 13 02 FB | 	rdlong	arg01, arg03
26aa8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26aac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26ab0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26ab4     00 FA 05 F6 | 	mov	result1, #0
26ab8     10 00 90 FD | 	jmp	#LR__3893
26abc                 | LR__3892
26abc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26ac0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26ac4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26ac8     01 FA 65 F6 | 	neg	result1, #1
26acc                 | LR__3893
26acc                 | __system___rxtxioctl_0696_ret
26acc     2D 00 64 FD | 	ret
26ad0                 | 
26ad0                 | __system____dummy_flush_0697
26ad0     00 FA 05 F6 | 	mov	result1, #0
26ad4                 | __system____dummy_flush_0697_ret
26ad4     2D 00 64 FD | 	ret
26ad8                 | 
26ad8                 | __system___vfswrite
26ad8     09 4A 05 F6 | 	mov	COUNT_, #9
26adc     A8 00 A0 FD | 	call	#pushregs_
26ae0     09 1F 02 F6 | 	mov	local01, arg01
26ae4     0A 21 02 F6 | 	mov	local02, arg02
26ae8     0B 23 02 F6 | 	mov	local03, arg03
26aec     10 25 02 F6 | 	mov	local04, local02
26af0     08 1E 06 F1 | 	add	local01, #8
26af4     0F 13 02 FB | 	rdlong	arg01, local01
26af8     08 1E 86 F1 | 	sub	local01, #8
26afc     02 12 CE F7 | 	test	arg01, #2 wz
26b00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26b04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26b08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b0c     01 FA 65 A6 |  if_e	neg	result1, #1
26b10     80 01 90 AD |  if_e	jmp	#LR__3906
26b14     08 1E 06 F1 | 	add	local01, #8
26b18     0F FB 01 FB | 	rdlong	result1, local01
26b1c     08 1E 86 F1 | 	sub	local01, #8
26b20     40 FA CD F7 | 	test	result1, #64 wz
26b24     68 00 90 AD |  if_e	jmp	#LR__3901
26b28     08 1E 06 F1 | 	add	local01, #8
26b2c     0F 15 02 FB | 	rdlong	arg02, local01
26b30     08 1E 86 F1 | 	sub	local01, #8
26b34     80 14 CE F7 | 	test	arg02, #128 wz
26b38     54 00 90 AD |  if_e	jmp	#LR__3900
26b3c     30 1E 06 F1 | 	add	local01, #48
26b40     0F 27 02 FB | 	rdlong	local05, local01
26b44     13 29 02 F6 | 	mov	local06, local05
26b48     30 1E 86 F1 | 	sub	local01, #48
26b4c     13 28 46 F7 | 	zerox	local06, #19
26b50     14 26 46 F0 | 	shr	local05, #20
26b54     02 26 66 F0 | 	shl	local05, #2
26b58     ED 26 02 F1 | 	add	local05, __methods__
26b5c     13 27 02 FB | 	rdlong	local05, local05
26b60     0F 13 02 F6 | 	mov	arg01, local01
26b64     00 14 06 F6 | 	mov	arg02, #0
26b68     02 16 06 F6 | 	mov	arg03, #2
26b6c     F2 2A 02 F6 | 	mov	local07, objptr
26b70     14 E5 01 F6 | 	mov	objptr, local06
26b74     2D 26 62 FD | 	call	local05
26b78     15 E5 01 F6 | 	mov	objptr, local07
26b7c     08 1E 06 F1 | 	add	local01, #8
26b80     0F 2B 02 FB | 	rdlong	local07, local01
26b84     80 2A 26 F5 | 	andn	local07, #128
26b88     0F 2B 62 FC | 	wrlong	local07, local01
26b8c     08 1E 86 F1 | 	sub	local01, #8
26b90                 | LR__3900
26b90                 | LR__3901
26b90     18 1E 06 F1 | 	add	local01, #24
26b94     0F 2B 0A FB | 	rdlong	local07, local01 wz
26b98     18 1E 86 F1 | 	sub	local01, #24
26b9c     80 00 90 AD |  if_e	jmp	#LR__3903
26ba0     18 1E 06 F1 | 	add	local01, #24
26ba4     0F 27 02 FB | 	rdlong	local05, local01
26ba8     13 29 02 F6 | 	mov	local06, local05
26bac     18 1E 86 F1 | 	sub	local01, #24
26bb0     13 28 46 F7 | 	zerox	local06, #19
26bb4     14 26 46 F0 | 	shr	local05, #20
26bb8     02 26 66 F0 | 	shl	local05, #2
26bbc     ED 26 02 F1 | 	add	local05, __methods__
26bc0     13 27 02 FB | 	rdlong	local05, local05
26bc4     10 15 02 F6 | 	mov	arg02, local02
26bc8     11 17 02 F6 | 	mov	arg03, local03
26bcc     0F 13 02 F6 | 	mov	arg01, local01
26bd0     F2 2A 02 F6 | 	mov	local07, objptr
26bd4     14 E5 01 F6 | 	mov	objptr, local06
26bd8     2D 26 62 FD | 	call	local05
26bdc     15 E5 01 F6 | 	mov	objptr, local07
26be0     FD 2C 02 F6 | 	mov	local08, result1
26be4     00 2C 56 F2 | 	cmps	local08, #0 wc
26be8     2C 00 90 3D |  if_ae	jmp	#LR__3902
26bec     08 1E 06 F1 | 	add	local01, #8
26bf0     0F 2B 02 FB | 	rdlong	local07, local01
26bf4     20 2A 46 F5 | 	or	local07, #32
26bf8     0F 2B 62 FC | 	wrlong	local07, local01
26bfc     00 2C 4E F2 | 	cmps	local08, #0 wz
26c00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26c04     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26c08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26c0c     01 FA 65 56 |  if_ne	neg	result1, #1
26c10     00 FA 05 A6 |  if_e	mov	result1, #0
26c14     7C 00 90 FD | 	jmp	#LR__3906
26c18                 | LR__3902
26c18     16 FB 01 F6 | 	mov	result1, local08
26c1c     74 00 90 FD | 	jmp	#LR__3906
26c20                 | LR__3903
26c20     1C 1E 06 F1 | 	add	local01, #28
26c24     0F 2F 0A FB | 	rdlong	local09, local01 wz
26c28     1C 1E 86 F1 | 	sub	local01, #28
26c2c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26c30     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26c34     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c38     01 FA 65 A6 |  if_e	neg	result1, #1
26c3c     54 00 90 AD |  if_e	jmp	#LR__3906
26c40     00 2C 06 F6 | 	mov	local08, #0
26c44                 | LR__3904
26c44     01 22 16 F2 | 	cmp	local03, #1 wc
26c48     44 00 90 CD |  if_b	jmp	#LR__3905
26c4c     17 29 02 F6 | 	mov	local06, local09
26c50     17 27 02 F6 | 	mov	local05, local09
26c54     13 28 46 F7 | 	zerox	local06, #19
26c58     14 26 46 F0 | 	shr	local05, #20
26c5c     02 26 66 F0 | 	shl	local05, #2
26c60     ED 26 02 F1 | 	add	local05, __methods__
26c64     13 27 02 FB | 	rdlong	local05, local05
26c68     12 13 C2 FA | 	rdbyte	arg01, local04
26c6c     0F 15 02 F6 | 	mov	arg02, local01
26c70     F2 2A 02 F6 | 	mov	local07, objptr
26c74     14 E5 01 F6 | 	mov	objptr, local06
26c78     01 24 06 F1 | 	add	local04, #1
26c7c     2D 26 62 FD | 	call	local05
26c80     15 E5 01 F6 | 	mov	objptr, local07
26c84     FD 2C 02 F1 | 	add	local08, result1
26c88     01 22 86 F1 | 	sub	local03, #1
26c8c     B4 FF 9F FD | 	jmp	#LR__3904
26c90                 | LR__3905
26c90     16 FB 01 F6 | 	mov	result1, local08
26c94                 | LR__3906
26c94     A7 F0 03 F6 | 	mov	ptra, fp
26c98     B2 00 A0 FD | 	call	#popregs_
26c9c                 | __system___vfswrite_ret
26c9c     2D 00 64 FD | 	ret
26ca0                 | 
26ca0                 | __system___vfsread
26ca0     03 4A 05 F6 | 	mov	COUNT_, #3
26ca4     A8 00 A0 FD | 	call	#pushregs_
26ca8     28 F0 07 F1 | 	add	ptra, #40
26cac     04 4E 05 F1 | 	add	fp, #4
26cb0     A7 12 62 FC | 	wrlong	arg01, fp
26cb4     04 4E 05 F1 | 	add	fp, #4
26cb8     A7 14 62 FC | 	wrlong	arg02, fp
26cbc     04 4E 05 F1 | 	add	fp, #4
26cc0     A7 16 62 FC | 	wrlong	arg03, fp
26cc4     04 4E 85 F1 | 	sub	fp, #4
26cc8     A7 FA 01 FB | 	rdlong	result1, fp
26ccc     14 4E 05 F1 | 	add	fp, #20
26cd0     A7 FA 61 FC | 	wrlong	result1, fp
26cd4     04 4E 05 F1 | 	add	fp, #4
26cd8     A7 00 68 FC | 	wrlong	#0, fp
26cdc     1C 4E 85 F1 | 	sub	fp, #28
26ce0     A7 12 02 FB | 	rdlong	arg01, fp
26ce4     04 4E 85 F1 | 	sub	fp, #4
26ce8     08 12 06 F1 | 	add	arg01, #8
26cec     09 FB 01 FB | 	rdlong	result1, arg01
26cf0     01 FA CD F7 | 	test	result1, #1 wz
26cf4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26cf8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26cfc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d00     01 FA 65 A6 |  if_e	neg	result1, #1
26d04     74 02 90 AD |  if_e	jmp	#LR__3916
26d08     04 4E 05 F1 | 	add	fp, #4
26d0c     A7 12 02 FB | 	rdlong	arg01, fp
26d10     04 4E 85 F1 | 	sub	fp, #4
26d14     14 12 06 F1 | 	add	arg01, #20
26d18     09 FB 09 FB | 	rdlong	result1, arg01 wz
26d1c     B8 00 90 AD |  if_e	jmp	#LR__3911
26d20     04 4E 05 F1 | 	add	fp, #4
26d24     A7 12 02 FB | 	rdlong	arg01, fp
26d28     09 17 02 F6 | 	mov	arg03, arg01
26d2c     14 16 06 F1 | 	add	arg03, #20
26d30     0B 1F 02 FB | 	rdlong	local01, arg03
26d34     0F 21 02 F6 | 	mov	local02, local01
26d38     13 1E 46 F7 | 	zerox	local01, #19
26d3c     14 20 46 F0 | 	shr	local02, #20
26d40     02 20 66 F0 | 	shl	local02, #2
26d44     ED 20 02 F1 | 	add	local02, __methods__
26d48     10 21 02 FB | 	rdlong	local02, local02
26d4c     04 4E 05 F1 | 	add	fp, #4
26d50     A7 14 02 FB | 	rdlong	arg02, fp
26d54     04 4E 05 F1 | 	add	fp, #4
26d58     A7 16 02 FB | 	rdlong	arg03, fp
26d5c     0C 4E 85 F1 | 	sub	fp, #12
26d60     F2 22 02 F6 | 	mov	local03, objptr
26d64     0F E5 01 F6 | 	mov	objptr, local01
26d68     2D 20 62 FD | 	call	local02
26d6c     11 E5 01 F6 | 	mov	objptr, local03
26d70     10 4E 05 F1 | 	add	fp, #16
26d74     A7 FA 61 FC | 	wrlong	result1, fp
26d78     10 4E 85 F1 | 	sub	fp, #16
26d7c     00 FA 55 F2 | 	cmps	result1, #0 wc
26d80     44 00 90 3D |  if_ae	jmp	#LR__3910
26d84     04 4E 05 F1 | 	add	fp, #4
26d88     A7 22 02 FB | 	rdlong	local03, fp
26d8c     11 1F 02 F6 | 	mov	local01, local03
26d90     08 22 06 F1 | 	add	local03, #8
26d94     11 21 02 FB | 	rdlong	local02, local03
26d98     20 20 46 F5 | 	or	local02, #32
26d9c     08 1E 06 F1 | 	add	local01, #8
26da0     0F 21 62 FC | 	wrlong	local02, local01
26da4     0C 4E 05 F1 | 	add	fp, #12
26da8     A7 12 0A FB | 	rdlong	arg01, fp wz
26dac     10 4E 85 F1 | 	sub	fp, #16
26db0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26db4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26db8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26dbc     01 FA 65 56 |  if_ne	neg	result1, #1
26dc0     00 FA 05 A6 |  if_e	mov	result1, #0
26dc4     B4 01 90 FD | 	jmp	#LR__3916
26dc8                 | LR__3910
26dc8     10 4E 05 F1 | 	add	fp, #16
26dcc     A7 FA 01 FB | 	rdlong	result1, fp
26dd0     10 4E 85 F1 | 	sub	fp, #16
26dd4     A4 01 90 FD | 	jmp	#LR__3916
26dd8                 | LR__3911
26dd8     04 4E 05 F1 | 	add	fp, #4
26ddc     A7 12 02 FB | 	rdlong	arg01, fp
26de0     20 12 06 F1 | 	add	arg01, #32
26de4     09 13 0A FB | 	rdlong	arg01, arg01 wz
26de8     14 4E 05 F1 | 	add	fp, #20
26dec     A7 12 62 FC | 	wrlong	arg01, fp
26df0     18 4E 85 F1 | 	sub	fp, #24
26df4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26df8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26dfc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e00     01 FA 65 A6 |  if_e	neg	result1, #1
26e04     74 01 90 AD |  if_e	jmp	#LR__3916
26e08     04 4E 05 F1 | 	add	fp, #4
26e0c     A7 22 02 FB | 	rdlong	local03, fp
26e10     04 4E 85 F1 | 	sub	fp, #4
26e14     28 22 06 F1 | 	add	local03, #40
26e18     11 21 0A FB | 	rdlong	local02, local03 wz
26e1c     7C 00 90 AD |  if_e	jmp	#LR__3913
26e20     04 4E 05 F1 | 	add	fp, #4
26e24     A7 12 02 FB | 	rdlong	arg01, fp
26e28     09 23 02 F6 | 	mov	local03, arg01
26e2c     28 22 06 F1 | 	add	local03, #40
26e30     11 1F 02 FB | 	rdlong	local01, local03
26e34     0F 21 02 F6 | 	mov	local02, local01
26e38     13 1E 46 F7 | 	zerox	local01, #19
26e3c     14 20 46 F0 | 	shr	local02, #20
26e40     02 20 66 F0 | 	shl	local02, #2
26e44     ED 20 02 F1 | 	add	local02, __methods__
26e48     10 21 02 FB | 	rdlong	local02, local02
26e4c     20 4E 05 F1 | 	add	fp, #32
26e50     A7 16 02 F6 | 	mov	arg03, fp
26e54     24 4E 85 F1 | 	sub	fp, #36
26e58     00 15 06 F6 | 	mov	arg02, #256
26e5c     F2 22 02 F6 | 	mov	local03, objptr
26e60     0F E5 01 F6 | 	mov	objptr, local01
26e64     2D 20 62 FD | 	call	local02
26e68     11 E5 01 F6 | 	mov	objptr, local03
26e6c     10 4E 05 F1 | 	add	fp, #16
26e70     A7 FA 61 FC | 	wrlong	result1, fp
26e74     00 FA 4D F2 | 	cmps	result1, #0 wz
26e78     10 4E 85 F1 | 	sub	fp, #16
26e7c     1C 00 90 5D |  if_ne	jmp	#LR__3912
26e80     24 4E 05 F1 | 	add	fp, #36
26e84     A7 20 02 FB | 	rdlong	local02, fp
26e88     24 4E 85 F1 | 	sub	fp, #36
26e8c     02 20 CE F7 | 	test	local02, #2 wz
26e90     20 4E 05 51 |  if_ne	add	fp, #32
26e94     A7 02 68 5C |  if_ne	wrlong	#1, fp
26e98     20 4E 85 51 |  if_ne	sub	fp, #32
26e9c                 | LR__3912
26e9c                 | LR__3913
26e9c     10 4E 05 F1 | 	add	fp, #16
26ea0     A7 00 68 FC | 	wrlong	#0, fp
26ea4     10 4E 85 F1 | 	sub	fp, #16
26ea8                 | LR__3914
26ea8     0C 4E 05 F1 | 	add	fp, #12
26eac     A7 22 02 FB | 	rdlong	local03, fp
26eb0     0C 4E 85 F1 | 	sub	fp, #12
26eb4     01 22 16 F2 | 	cmp	local03, #1 wc
26eb8     B4 00 90 CD |  if_b	jmp	#LR__3915
26ebc     18 4E 05 F1 | 	add	fp, #24
26ec0     A7 20 02 FB | 	rdlong	local02, fp
26ec4     10 23 02 F6 | 	mov	local03, local02
26ec8     13 22 46 F7 | 	zerox	local03, #19
26ecc     14 20 46 F0 | 	shr	local02, #20
26ed0     02 20 66 F0 | 	shl	local02, #2
26ed4     ED 20 02 F1 | 	add	local02, __methods__
26ed8     10 21 02 FB | 	rdlong	local02, local02
26edc     14 4E 85 F1 | 	sub	fp, #20
26ee0     A7 12 02 FB | 	rdlong	arg01, fp
26ee4     04 4E 85 F1 | 	sub	fp, #4
26ee8     F2 1E 02 F6 | 	mov	local01, objptr
26eec     11 E5 01 F6 | 	mov	objptr, local03
26ef0     2D 20 62 FD | 	call	local02
26ef4     0F E5 01 F6 | 	mov	objptr, local01
26ef8     14 4E 05 F1 | 	add	fp, #20
26efc     A7 FA 61 FC | 	wrlong	result1, fp
26f00     14 4E 85 F1 | 	sub	fp, #20
26f04     00 FA 55 F2 | 	cmps	result1, #0 wc
26f08     64 00 90 CD |  if_b	jmp	#LR__3915
26f0c     1C 4E 05 F1 | 	add	fp, #28
26f10     A7 22 02 FB | 	rdlong	local03, fp
26f14     11 21 02 F6 | 	mov	local02, local03
26f18     01 20 06 F1 | 	add	local02, #1
26f1c     A7 20 62 FC | 	wrlong	local02, fp
26f20     08 4E 85 F1 | 	sub	fp, #8
26f24     A7 20 02 FB | 	rdlong	local02, fp
26f28     11 21 42 FC | 	wrbyte	local02, local03
26f2c     04 4E 85 F1 | 	sub	fp, #4
26f30     A7 22 02 FB | 	rdlong	local03, fp
26f34     01 22 06 F1 | 	add	local03, #1
26f38     A7 22 62 FC | 	wrlong	local03, fp
26f3c     04 4E 85 F1 | 	sub	fp, #4
26f40     A7 22 02 FB | 	rdlong	local03, fp
26f44     01 22 86 F1 | 	sub	local03, #1
26f48     A7 22 62 FC | 	wrlong	local03, fp
26f4c     14 4E 05 F1 | 	add	fp, #20
26f50     A7 22 0A FB | 	rdlong	local03, fp wz
26f54     20 4E 85 F1 | 	sub	fp, #32
26f58     4C FF 9F AD |  if_e	jmp	#LR__3914
26f5c     14 4E 05 F1 | 	add	fp, #20
26f60     A7 20 02 FB | 	rdlong	local02, fp
26f64     14 4E 85 F1 | 	sub	fp, #20
26f68     0A 20 0E F2 | 	cmp	local02, #10 wz
26f6c     38 FF 9F 5D |  if_ne	jmp	#LR__3914
26f70                 | LR__3915
26f70     10 4E 05 F1 | 	add	fp, #16
26f74     A7 FA 01 FB | 	rdlong	result1, fp
26f78     10 4E 85 F1 | 	sub	fp, #16
26f7c                 | LR__3916
26f7c     A7 F0 03 F6 | 	mov	ptra, fp
26f80     B2 00 A0 FD | 	call	#popregs_
26f84                 | __system___vfsread_ret
26f84     2D 00 64 FD | 	ret
26f88                 | 
26f88                 | __system____default_filbuf
26f88     04 4A 05 F6 | 	mov	COUNT_, #4
26f8c     A8 00 A0 FD | 	call	#pushregs_
26f90     09 1F 02 F6 | 	mov	local01, arg01
26f94     0F 21 02 FB | 	rdlong	local02, local01
26f98     0C 20 06 F1 | 	add	local02, #12
26f9c     10 FB 09 FB | 	rdlong	result1, local02 wz
26fa0     0C 20 86 F1 | 	sub	local02, #12
26fa4     20 00 90 5D |  if_ne	jmp	#LR__3920
26fa8     14 20 06 F1 | 	add	local02, #20
26fac     10 FB 01 F6 | 	mov	result1, local02
26fb0     04 20 86 F1 | 	sub	local02, #4
26fb4     10 FB 61 FC | 	wrlong	result1, local02
26fb8     04 20 86 F1 | 	sub	local02, #4
26fbc     02 00 80 FF 
26fc0     10 01 68 FC | 	wrlong	##1024, local02
26fc4     0C 20 86 F1 | 	sub	local02, #12
26fc8                 | LR__3920
26fc8     14 1E 06 F1 | 	add	local01, #20
26fcc     0F 23 02 FB | 	rdlong	local03, local01
26fd0     11 25 02 F6 | 	mov	local04, local03
26fd4     14 1E 86 F1 | 	sub	local01, #20
26fd8     13 24 46 F7 | 	zerox	local04, #19
26fdc     14 22 46 F0 | 	shr	local03, #20
26fe0     02 22 66 F0 | 	shl	local03, #2
26fe4     ED 22 02 F1 | 	add	local03, __methods__
26fe8     11 23 02 FB | 	rdlong	local03, local03
26fec     10 20 06 F1 | 	add	local02, #16
26ff0     10 15 02 FB | 	rdlong	arg02, local02
26ff4     04 20 86 F1 | 	sub	local02, #4
26ff8     10 17 02 FB | 	rdlong	arg03, local02
26ffc     0C 20 86 F1 | 	sub	local02, #12
27000     0F 13 02 F6 | 	mov	arg01, local01
27004     F2 1E 02 F6 | 	mov	local01, objptr
27008     12 E5 01 F6 | 	mov	objptr, local04
2700c     2D 22 62 FD | 	call	local03
27010     0F E5 01 F6 | 	mov	objptr, local01
27014     FD 24 02 F6 | 	mov	local04, result1
27018     00 24 56 F2 | 	cmps	local04, #0 wc
2701c     01 FA 65 C6 |  if_b	neg	result1, #1
27020     28 00 90 CD |  if_b	jmp	#LR__3921
27024     10 25 62 FC | 	wrlong	local04, local02
27028     10 20 06 F1 | 	add	local02, #16
2702c     10 23 02 FB | 	rdlong	local03, local02
27030     0C 20 86 F1 | 	sub	local02, #12
27034     10 23 62 FC | 	wrlong	local03, local02
27038     04 20 06 F1 | 	add	local02, #4
2703c     10 23 02 FB | 	rdlong	local03, local02
27040     01 22 46 F5 | 	or	local03, #1
27044     10 23 62 FC | 	wrlong	local03, local02
27048     12 FB 01 F6 | 	mov	result1, local04
2704c                 | LR__3921
2704c     A7 F0 03 F6 | 	mov	ptra, fp
27050     B2 00 A0 FD | 	call	#popregs_
27054                 | __system____default_filbuf_ret
27054     2D 00 64 FD | 	ret
27058                 | 
27058                 | __system__getlower_1082
27058     41 12 56 F2 | 	cmps	arg01, #65 wc
2705c     10 00 90 CD |  if_b	jmp	#LR__3930
27060     5B 12 56 F2 | 	cmps	arg01, #91 wc
27064     09 FB 01 C6 |  if_b	mov	result1, arg01
27068     20 FA 05 C1 |  if_b	add	result1, #32
2706c     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
27070                 | LR__3930
27070     09 FB 01 F6 | 	mov	result1, arg01
27074                 | __system__getlower_1082_ret
27074     2D 00 64 FD | 	ret
27078                 | 
27078                 | __system___pat_match
27078     08 4A 05 F6 | 	mov	COUNT_, #8
2707c     A8 00 A0 FD | 	call	#pushregs_
27080     09 1F 02 F6 | 	mov	local01, arg01
27084                 | LR__3940
27084     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27088     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2708c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27090     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27094     2C 00 90 AD |  if_e	jmp	#LR__3941
27098     0A 13 C2 FA | 	rdbyte	arg01, arg02
2709c     B8 FF BF FD | 	call	#__system__getlower_1082
270a0     FD 22 02 F6 | 	mov	local03, result1
270a4     0F 13 C2 FA | 	rdbyte	arg01, local01
270a8     AC FF BF FD | 	call	#__system__getlower_1082
270ac     11 FB 09 F2 | 	cmp	result1, local03 wz
270b0     00 FA 05 56 |  if_ne	mov	result1, #0
270b4     FC 00 90 5D |  if_ne	jmp	#LR__3949
270b8     01 1E 06 F1 | 	add	local01, #1
270bc     01 14 06 F1 | 	add	arg02, #1
270c0     C0 FF 9F FD | 	jmp	#LR__3940
270c4                 | LR__3941
270c4     0A 23 C2 FA | 	rdbyte	local03, arg02
270c8     2A 22 0E F2 | 	cmp	local03, #42 wz
270cc     D4 00 90 5D |  if_ne	jmp	#LR__3948
270d0     01 14 06 F1 | 	add	arg02, #1
270d4     0A 21 C2 FA | 	rdbyte	local02, arg02
270d8     01 14 86 F1 | 	sub	arg02, #1
270dc     2E 20 0E F2 | 	cmp	local02, #46 wz
270e0     28 00 90 5D |  if_ne	jmp	#LR__3942
270e4     02 14 06 F1 | 	add	arg02, #2
270e8     0A 21 C2 FA | 	rdbyte	local02, arg02
270ec     02 14 86 F1 | 	sub	arg02, #2
270f0     2A 20 0E F2 | 	cmp	local02, #42 wz
270f4     03 14 06 A1 |  if_e	add	arg02, #3
270f8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
270fc     03 14 86 A1 |  if_e	sub	arg02, #3
27100     12 27 0A A6 |  if_e	mov	local05, local04 wz
27104     01 FA 05 A6 |  if_e	mov	result1, #1
27108     A8 00 90 AD |  if_e	jmp	#LR__3949
2710c                 | LR__3942
2710c     01 14 06 F1 | 	add	arg02, #1
27110     00 28 06 F6 | 	mov	local06, #0
27114     97 1E 48 FB | 	callpa	#(@LR__3945-@LR__3943)>>2,fcache_load_ptr_
27118                 | LR__3943
27118     14 2B 02 F6 | 	mov	local07, local06
2711c     0A 2B 02 F1 | 	add	local07, arg02
27120     15 2B CA FA | 	rdbyte	local07, local07 wz
27124     14 27 02 56 |  if_ne	mov	local05, local06
27128     01 26 06 51 |  if_ne	add	local05, #1
2712c     13 29 02 56 |  if_ne	mov	local06, local05
27130     E4 FF 9F 5D |  if_ne	jmp	#LR__3943
27134     00 2C 06 F6 | 	mov	local08, #0
27138                 | LR__3944
27138     16 2B 02 F6 | 	mov	local07, local08
2713c     0F 2B 02 F1 | 	add	local07, local01
27140     15 2B CA FA | 	rdbyte	local07, local07 wz
27144     16 27 02 56 |  if_ne	mov	local05, local08
27148     01 26 06 51 |  if_ne	add	local05, #1
2714c     13 2D 02 56 |  if_ne	mov	local08, local05
27150     E4 FF 9F 5D |  if_ne	jmp	#LR__3944
27154                 | LR__3945
27154     14 2D 52 F2 | 	cmps	local08, local06 wc
27158     00 FA 05 C6 |  if_b	mov	result1, #0
2715c     54 00 90 CD |  if_b	jmp	#LR__3949
27160     16 21 02 F6 | 	mov	local02, local08
27164     14 21 82 F1 | 	sub	local02, local06
27168     10 1F 02 F1 | 	add	local01, local02
2716c                 | LR__3946
2716c     01 28 56 F2 | 	cmps	local06, #1 wc
27170     30 00 90 CD |  if_b	jmp	#LR__3947
27174     0F 13 C2 FA | 	rdbyte	arg01, local01
27178     DC FE BF FD | 	call	#__system__getlower_1082
2717c     FD 2C 02 F6 | 	mov	local08, result1
27180     0A 13 C2 FA | 	rdbyte	arg01, arg02
27184     D0 FE BF FD | 	call	#__system__getlower_1082
27188     FD 2C 0A F2 | 	cmp	local08, result1 wz
2718c     00 FA 05 56 |  if_ne	mov	result1, #0
27190     20 00 90 5D |  if_ne	jmp	#LR__3949
27194     01 1E 06 F1 | 	add	local01, #1
27198     01 14 06 F1 | 	add	arg02, #1
2719c     01 28 86 F1 | 	sub	local06, #1
271a0     C8 FF 9F FD | 	jmp	#LR__3946
271a4                 | LR__3947
271a4                 | LR__3948
271a4     0A 2D CA FA | 	rdbyte	local08, arg02 wz
271a8     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
271ac     01 FA 05 A6 |  if_e	mov	result1, #1
271b0     00 FA 05 56 |  if_ne	mov	result1, #0
271b4                 | LR__3949
271b4     A7 F0 03 F6 | 	mov	ptra, fp
271b8     B2 00 A0 FD | 	call	#popregs_
271bc                 | __system___pat_match_ret
271bc     2D 00 64 FD | 	ret
271c0                 | 
271c0                 | _fatfs_cc_ff_uni2oem
271c0     00 00 06 F6 | 	mov	_var01, #0
271c4     80 12 16 F2 | 	cmp	arg01, #128 wc
271c8     09 01 02 C6 |  if_b	mov	_var01, arg01
271cc     58 00 90 CD |  if_b	jmp	#LR__3954
271d0     80 00 00 FF 
271d4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
271d8     4C 00 90 3D |  if_ae	jmp	#LR__3953
271dc     0A FB 31 F9 | 	getword	result1, arg02, #0
271e0     01 00 00 FF 
271e4     52 FB 0D F2 | 	cmp	result1, ##850 wz
271e8     3C 00 90 5D |  if_ne	jmp	#LR__3953
271ec                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
271ec     00 00 06 F6 | 	mov	_var01, #0
271f0     97 14 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
271f4                 | LR__3950
271f4     00 FB 31 F9 | 	getword	result1, _var01, #0
271f8     80 FA 15 F2 | 	cmp	result1, #128 wc
271fc     1C 00 90 3D |  if_ae	jmp	#LR__3952
27200     00 FB 31 F9 | 	getword	result1, _var01, #0
27204     01 FA 65 F0 | 	shl	result1, #1
27208     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2720c     FD FA E1 FA | 	rdword	result1, result1
27210     FD 12 0A F2 | 	cmp	arg01, result1 wz
27214     01 00 06 51 |  if_ne	add	_var01, #1
27218     D8 FF 9F 5D |  if_ne	jmp	#LR__3950
2721c                 | LR__3951
2721c                 | LR__3952
2721c     00 01 32 F9 | 	getword	_var01, _var01, #0
27220     80 00 06 F1 | 	add	_var01, #128
27224     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27228                 | LR__3953
27228                 | LR__3954
27228                 | ' 			c = (c + 0x80) & 0xFF;
27228                 | ' 		}
27228                 | ' 	}
27228                 | ' 
27228                 | ' 	return c;
27228     00 FB 01 F6 | 	mov	result1, _var01
2722c                 | _fatfs_cc_ff_uni2oem_ret
2722c     2D 00 64 FD | 	ret
27230                 | 
27230                 | _fatfs_cc_ff_oem2uni
27230     00 00 06 F6 | 	mov	_var01, #0
27234     09 FB 31 F9 | 	getword	result1, arg01, #0
27238     80 FA 15 F2 | 	cmp	result1, #128 wc
2723c     09 01 02 C6 |  if_b	mov	_var01, arg01
27240     2C 00 90 CD |  if_b	jmp	#LR__3961
27244     0A 15 32 F9 | 	getword	arg02, arg02, #0
27248     01 00 00 FF 
2724c     52 15 0E F2 | 	cmp	arg02, ##850 wz
27250     1C 00 90 5D |  if_ne	jmp	#LR__3960
27254     09 FB 31 F9 | 	getword	result1, arg01, #0
27258     00 FB 15 F2 | 	cmp	result1, #256 wc
2725c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
27260     80 12 86 C1 |  if_b	sub	arg01, #128
27264     01 12 66 C0 |  if_b	shl	arg01, #1
27268     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2726c     09 01 E2 CA |  if_b	rdword	_var01, arg01
27270                 | LR__3960
27270                 | LR__3961
27270                 | ' 		}
27270                 | ' 	}
27270                 | ' 
27270                 | ' 	return c;
27270     00 FB 01 F6 | 	mov	result1, _var01
27274                 | _fatfs_cc_ff_oem2uni_ret
27274     2D 00 64 FD | 	ret
27278                 | 
27278                 | _fatfs_cc_ff_wtoupper
27278     09 01 02 F6 | 	mov	_var01, arg01
2727c     80 00 00 FF 
27280     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27284     60 01 90 3D |  if_ae	jmp	#LR__3983
27288     00 03 02 F6 | 	mov	_var02, _var01
2728c     01 01 32 F9 | 	getword	_var01, _var02, #0
27290     08 00 00 FF 
27294     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27298     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2729c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
272a0     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
272a4     01 00 00 3F 
272a8     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
272ac     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
272b0     01 00 00 3F 
272b4     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
272b8     02 07 02 F6 | 	mov	_var04, _var03
272bc                 | ' 		uc = (WORD)uni;
272bc                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
272bc                 | ' 		for (;;) {
272bc                 | LR__3970
272bc     03 09 E2 FA | 	rdword	_var05, _var04
272c0     04 05 02 F6 | 	mov	_var03, _var05
272c4     0F 04 4E F7 | 	zerox	_var03, #15 wz
272c8     02 06 06 F1 | 	add	_var04, #2
272cc     14 01 90 AD |  if_e	jmp	#LR__3982
272d0     01 05 32 F9 | 	getword	_var03, _var02, #0
272d4     04 01 32 F9 | 	getword	_var01, _var05, #0
272d8     00 05 12 F2 | 	cmp	_var03, _var01 wc
272dc     04 01 90 CD |  if_b	jmp	#LR__3982
272e0     03 0B E2 FA | 	rdword	_var06, _var04
272e4     05 0D 32 F9 | 	getword	_var07, _var06, #0
272e8     08 0C 46 F0 | 	shr	_var07, #8
272ec     05 0B 32 F9 | 	getword	_var06, _var06, #0
272f0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
272f4     01 05 32 F9 | 	getword	_var03, _var02, #0
272f8     04 0F 32 F9 | 	getword	_var08, _var05, #0
272fc     05 01 32 F9 | 	getword	_var01, _var06, #0
27300     00 0F 02 F1 | 	add	_var08, _var01
27304     07 05 52 F2 | 	cmps	_var03, _var08 wc
27308     02 06 06 F1 | 	add	_var04, #2
2730c     C4 00 90 3D |  if_ae	jmp	#LR__3981
27310                 | ' 				switch (cmd) {
27310     06 11 32 F9 | 	getword	_var09, _var07, #0
27314     09 10 26 F3 | 	fle	_var09, #9
27318     30 10 62 FD | 	jmprel	_var09
2731c                 | LR__3971
2731c     24 00 90 FD | 	jmp	#LR__3972
27320     3C 00 90 FD | 	jmp	#LR__3973
27324     54 00 90 FD | 	jmp	#LR__3974
27328     5C 00 90 FD | 	jmp	#LR__3975
2732c     64 00 90 FD | 	jmp	#LR__3976
27330     6C 00 90 FD | 	jmp	#LR__3977
27334     74 00 90 FD | 	jmp	#LR__3978
27338     7C 00 90 FD | 	jmp	#LR__3979
2733c     84 00 90 FD | 	jmp	#LR__3980
27340     A0 00 90 FD | 	jmp	#LR__3982
27344                 | LR__3972
27344     01 03 32 F9 | 	getword	_var02, _var02, #0
27348     04 09 32 F9 | 	getword	_var05, _var05, #0
2734c     04 03 82 F1 | 	sub	_var02, _var05
27350     01 02 66 F0 | 	shl	_var02, #1
27354     03 03 02 F1 | 	add	_var02, _var04
27358     01 03 E2 FA | 	rdword	_var02, _var02
2735c     84 00 90 FD | 	jmp	#LR__3982
27360                 | LR__3973
27360     01 05 32 F9 | 	getword	_var03, _var02, #0
27364     01 03 32 F9 | 	getword	_var02, _var02, #0
27368     04 09 32 F9 | 	getword	_var05, _var05, #0
2736c     04 03 82 F1 | 	sub	_var02, _var05
27370     01 02 06 F5 | 	and	_var02, #1
27374     02 03 C2 F2 | 	subr	_var02, _var03
27378     68 00 90 FD | 	jmp	#LR__3982
2737c                 | LR__3974
2737c     01 03 32 F9 | 	getword	_var02, _var02, #0
27380     10 02 86 F1 | 	sub	_var02, #16
27384     5C 00 90 FD | 	jmp	#LR__3982
27388                 | LR__3975
27388     01 03 32 F9 | 	getword	_var02, _var02, #0
2738c     20 02 86 F1 | 	sub	_var02, #32
27390     50 00 90 FD | 	jmp	#LR__3982
27394                 | LR__3976
27394     01 03 32 F9 | 	getword	_var02, _var02, #0
27398     30 02 86 F1 | 	sub	_var02, #48
2739c     44 00 90 FD | 	jmp	#LR__3982
273a0                 | LR__3977
273a0     01 03 32 F9 | 	getword	_var02, _var02, #0
273a4     1A 02 86 F1 | 	sub	_var02, #26
273a8     38 00 90 FD | 	jmp	#LR__3982
273ac                 | LR__3978
273ac     01 03 32 F9 | 	getword	_var02, _var02, #0
273b0     08 02 06 F1 | 	add	_var02, #8
273b4     2C 00 90 FD | 	jmp	#LR__3982
273b8                 | LR__3979
273b8     01 03 32 F9 | 	getword	_var02, _var02, #0
273bc     50 02 86 F1 | 	sub	_var02, #80
273c0     20 00 90 FD | 	jmp	#LR__3982
273c4                 | LR__3980
273c4     01 03 32 F9 | 	getword	_var02, _var02, #0
273c8     0E 00 00 FF 
273cc     60 02 86 F1 | 	sub	_var02, ##7264
273d0                 | ' 				}
273d0                 | ' 				break;
273d0     10 00 90 FD | 	jmp	#LR__3982
273d4                 | LR__3981
273d4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
273d8     02 0A 06 AA |  if_e	mul	_var06, #2
273dc     05 07 02 A1 |  if_e	add	_var04, _var06
273e0     D8 FE 9F FD | 	jmp	#LR__3970
273e4                 | LR__3982
273e4     01 01 32 F9 | 	getword	_var01, _var02, #0
273e8                 | LR__3983
273e8                 | ' 		}
273e8                 | ' 		uni = uc;
273e8                 | ' 	}
273e8                 | ' 
273e8                 | ' 	return uni;
273e8     00 FB 01 F6 | 	mov	result1, _var01
273ec                 | _fatfs_cc_ff_wtoupper_ret
273ec     2D 00 64 FD | 	ret
273f0                 | 
273f0                 | _fatfs_cc_strncpy
273f0     09 01 02 F6 | 	mov	_var01, arg01
273f4     97 12 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
273f8                 | ' 
273f8                 | ' 	dscan = dst;
273f8                 | ' 	sscan = src;
273f8                 | ' 	count = n;
273f8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
273f8                 | LR__3990
273f8     01 16 86 F1 | 	sub	arg03, #1
273fc     00 16 56 F2 | 	cmps	arg03, #0 wc
27400     18 00 90 CD |  if_b	jmp	#LR__3992
27404     0A FB C1 FA | 	rdbyte	result1, arg02
27408     00 FB 41 FC | 	wrbyte	result1, _var01
2740c     01 14 06 F1 | 	add	arg02, #1
27410     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27414                 | ' 		continue;
27414     01 00 06 F1 | 	add	_var01, #1
27418     DC FF 9F 5D |  if_ne	jmp	#LR__3990
2741c                 | LR__3991
2741c                 | LR__3992
2741c     97 0C 48 FB | 	callpa	#(@LR__3994-@LR__3993)>>2,fcache_load_ptr_
27420                 | ' 	while (--count >= 0)
27420                 | LR__3993
27420     01 16 86 F1 | 	sub	arg03, #1
27424     00 16 56 F2 | 	cmps	arg03, #0 wc
27428     00 03 02 36 |  if_ae	mov	_var02, _var01
2742c     01 00 06 31 |  if_ae	add	_var01, #1
27430     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27434     E8 FF 9F 3D |  if_ae	jmp	#LR__3993
27438                 | LR__3994
27438                 | ' 		*dscan++ = '\0';
27438                 | ' 	return(dst);
27438     09 FB 01 F6 | 	mov	result1, arg01
2743c                 | _fatfs_cc_strncpy_ret
2743c     2D 00 64 FD | 	ret
27440                 | 
27440                 | _fatfs_cc_memcmp
27440                 | ' 	for (n = size; n > 0; n--)
27440     00 16 0E F2 | 	cmp	arg03, #0 wz
27444     28 00 90 AD |  if_e	jmp	#LR__4001
27448                 | LR__4000
27448     09 01 C2 FA | 	rdbyte	_var01, arg01
2744c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27450     01 01 0A F2 | 	cmp	_var01, _var02 wz
27454     01 12 06 A1 |  if_e	add	arg01, #1
27458     01 14 06 A1 |  if_e	add	arg02, #1
2745c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2745c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
27460     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27464     01 FB 81 51 |  if_ne	sub	result1, _var02
27468     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2746c     F6 17 6E FB | 	djnz	arg03, #LR__4000
27470                 | LR__4001
27470                 | ' 
27470                 | ' 	return(0);
27470     00 FA 05 F6 | 	mov	result1, #0
27474                 | _fatfs_cc_memcmp_ret
27474     2D 00 64 FD | 	ret
27478                 | 
27478                 | _fatfs_cc_strncmp
27478     09 01 0A F6 | 	mov	_var01, arg01 wz
2747c     14 00 90 5D |  if_ne	jmp	#LR__4010
27480                 | ' 		return scan2 ? -1 : 0;
27480     00 14 0E F2 | 	cmp	arg02, #0 wz
27484     01 02 66 56 |  if_ne	neg	_var02, #1
27488     00 02 06 A6 |  if_e	mov	_var02, #0
2748c     01 FB 01 F6 | 	mov	result1, _var02
27490     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27494                 | LR__4010
27494     00 14 0E F2 | 	cmp	arg02, #0 wz
27498     01 FA 05 A6 |  if_e	mov	result1, #1
2749c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
274a0     0B 05 02 F6 | 	mov	_var03, arg03
274a4     97 16 48 FB | 	callpa	#(@LR__4012-@LR__4011)>>2,fcache_load_ptr_
274a8                 | ' 	count = n;
274a8                 | ' 	do {
274a8                 | LR__4011
274a8     00 07 C2 FA | 	rdbyte	_var04, _var01
274ac     0A 09 02 F6 | 	mov	_var05, arg02
274b0     04 0B C2 FA | 	rdbyte	_var06, _var05
274b4     01 04 86 F1 | 	sub	_var03, #1
274b8     00 04 56 F2 | 	cmps	_var03, #0 wc
274bc     01 00 06 F1 | 	add	_var01, #1
274c0     01 14 06 F1 | 	add	arg02, #1
274c4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
274c8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4013
274cc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
274d0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4011
274d4                 | LR__4012
274d4                 | LR__4013
274d4     00 04 56 F2 | 	cmps	_var03, #0 wc
274d8                 | ' 		return(0);
274d8     00 FA 05 C6 |  if_b	mov	result1, #0
274dc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
274e0     05 07 0A F2 | 	cmp	_var04, _var06 wz
274e4                 | ' 		return(0);
274e4     00 FA 05 A6 |  if_e	mov	result1, #0
274e8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
274ec     00 06 0E F2 | 	cmp	_var04, #0 wz
274f0                 | ' 		return(-1);
274f0     01 FA 65 A6 |  if_e	neg	result1, #1
274f4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
274f8     00 0A 0E F2 | 	cmp	_var06, #0 wz
274fc                 | ' 		return(1);
274fc     01 FA 05 A6 |  if_e	mov	result1, #1
27500                 | ' 		return(c1 - c2);
27500     03 FB 01 56 |  if_ne	mov	result1, _var04
27504     05 FB 81 51 |  if_ne	sub	result1, _var06
27508                 | _fatfs_cc_strncmp_ret
27508     2D 00 64 FD | 	ret
2750c                 | 
2750c                 | _fatfs_cc_strchr
2750c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
2750c                 | ' 	while ((c = *s++) != (char) charwanted)
2750c                 | LR__4020
2750c     09 01 02 F6 | 	mov	_var01, arg01
27510     00 03 C2 FA | 	rdbyte	_var02, _var01
27514     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
27518     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2751c     03 05 0A F2 | 	cmp	_var03, _var04 wz
27520     01 12 06 F1 | 	add	arg01, #1
27524     14 00 90 AD |  if_e	jmp	#LR__4021
27528     01 05 02 F6 | 	mov	_var03, _var02
2752c     07 04 4E F7 | 	zerox	_var03, #7 wz
27530     00 FA 05 A6 |  if_e	mov	result1, #0
27534     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
27538     D0 FF 9F FD | 	jmp	#LR__4020
2753c                 | LR__4021
2753c                 | ' 	return((char *)--s);
2753c     01 12 86 F1 | 	sub	arg01, #1
27540     09 FB 01 F6 | 	mov	result1, arg01
27544                 | _fatfs_cc_strchr_ret
27544     2D 00 64 FD | 	ret
27548                 | 
27548                 | _fatfs_cc_disk_initialize
27548     04 4A 05 F6 | 	mov	COUNT_, #4
2754c     A8 00 A0 FD | 	call	#pushregs_
27550     40 F0 07 F1 | 	add	ptra, #64
27554     04 4E 05 F1 | 	add	fp, #4
27558     A7 12 42 FC | 	wrbyte	arg01, fp
2755c     01 00 00 FF 
27560     14 E4 05 F1 | 	add	objptr, ##532
27564     F2 18 02 FB | 	rdlong	arg04, objptr
27568     2C 4E 05 F1 | 	add	fp, #44
2756c     A7 18 62 FC | 	wrlong	arg04, fp
27570     04 E4 85 F1 | 	sub	objptr, #4
27574     F2 18 02 FB | 	rdlong	arg04, objptr
27578     04 4E 05 F1 | 	add	fp, #4
2757c     A7 18 62 FC | 	wrlong	arg04, fp
27580     08 E4 05 F1 | 	add	objptr, #8
27584     F2 18 02 FB | 	rdlong	arg04, objptr
27588     04 4E 05 F1 | 	add	fp, #4
2758c     A7 18 62 FC | 	wrlong	arg04, fp
27590     04 E4 05 F1 | 	add	objptr, #4
27594     F2 18 02 FB | 	rdlong	arg04, objptr
27598     04 4E 05 F1 | 	add	fp, #4
2759c     A7 18 62 FC | 	wrlong	arg04, fp
275a0     04 E4 05 F1 | 	add	objptr, #4
275a4     F2 02 48 FC | 	wrbyte	#1, objptr
275a8     01 00 00 FF 
275ac     20 E4 85 F1 | 	sub	objptr, ##544
275b0     38 4E 85 F1 | 	sub	fp, #56
275b4     A7 18 CA FA | 	rdbyte	arg04, fp wz
275b8     04 4E 85 F1 | 	sub	fp, #4
275bc                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
275bc                 | '             return RES_NOTRDY;
275bc     03 FA 05 56 |  if_ne	mov	result1, #3
275c0     D8 05 90 5D |  if_ne	jmp	#LR__4048
275c4     13 00 00 FF 
275c8     10 13 06 F6 | 	mov	arg01, ##10000
275cc     2C 98 BF FD | 	call	#__system___waitus
275d0     30 4E 05 F1 | 	add	fp, #48
275d4     A7 12 02 FB | 	rdlong	arg01, fp
275d8     09 01 08 FC | 	wrpin	#0, arg01
275dc     04 4E 05 F1 | 	add	fp, #4
275e0     A7 12 02 FB | 	rdlong	arg01, fp
275e4     09 01 08 FC | 	wrpin	#0, arg01
275e8     04 4E 05 F1 | 	add	fp, #4
275ec     A7 12 02 FB | 	rdlong	arg01, fp
275f0     09 01 08 FC | 	wrpin	#0, arg01
275f4     04 4E 05 F1 | 	add	fp, #4
275f8     A7 12 02 FB | 	rdlong	arg01, fp
275fc     09 00 80 FF 
27600     09 01 08 FC | 	wrpin	##4608, arg01
27604     0C 4E 85 F1 | 	sub	fp, #12
27608     A7 12 02 FB | 	rdlong	arg01, fp
2760c     59 12 62 FD | 	drvh	arg01
27610     04 4E 05 F1 | 	add	fp, #4
27614     A7 12 02 FB | 	rdlong	arg01, fp
27618     59 12 62 FD | 	drvh	arg01
2761c     04 4E 05 F1 | 	add	fp, #4
27620     A7 12 02 FB | 	rdlong	arg01, fp
27624     59 12 62 FD | 	drvh	arg01
27628     04 4E 05 F1 | 	add	fp, #4
2762c     A7 12 02 FB | 	rdlong	arg01, fp
27630     59 12 62 FD | 	drvh	arg01
27634     20 4E 85 F1 | 	sub	fp, #32
27638     00 04 80 FF 
2763c     A7 20 68 FC | 	wrlong	##524304, fp
27640     04 4E 05 F1 | 	add	fp, #4
27644     20 03 80 FF 
27648     A7 90 68 FC | 	wrlong	##409672, fp
2764c     14 4E 05 F1 | 	add	fp, #20
27650     A7 1E 02 FB | 	rdlong	local01, fp
27654     18 4E 85 F1 | 	sub	fp, #24
27658     A7 16 02 FB | 	rdlong	arg03, fp
2765c     40 1E 62 FD | 	dirl	local01
27660     A0 03 80 FF 
27664     0F 91 08 FC | 	wrpin	##475208, local01
27668     0F 17 12 FC | 	wxpin	arg03, local01
2766c     0F 01 28 FC | 	wypin	#0, local01
27670     41 1E 62 FD | 	dirh	local01
27674     1C 4E 05 F1 | 	add	fp, #28
27678     A7 20 02 FB | 	rdlong	local02, fp
2767c     10 1F 82 F1 | 	sub	local01, local02
27680     07 1E 06 F5 | 	and	local01, #7
27684     18 1E 66 F0 | 	shl	local01, #24
27688     78 14 06 F6 | 	mov	arg02, #120
2768c     0F 15 42 F5 | 	or	arg02, local01
27690     14 4E 85 F1 | 	sub	fp, #20
27694     A7 14 62 FC | 	wrlong	arg02, fp
27698     14 4E 05 F1 | 	add	fp, #20
2769c     A7 12 02 FB | 	rdlong	arg01, fp
276a0     10 14 26 F4 | 	bith	arg02, #16
276a4     40 12 62 FD | 	dirl	arg01
276a8     09 15 02 FC | 	wrpin	arg02, arg01
276ac     09 3F 18 FC | 	wxpin	#31, arg01
276b0     FF FF FF FF 
276b4     09 FF 2B FC | 	wypin	##-1, arg01
276b8     41 12 62 FD | 	dirh	arg01
276bc     04 4E 85 F1 | 	sub	fp, #4
276c0     A7 14 02 FB | 	rdlong	arg02, fp
276c4     08 4E 05 F1 | 	add	fp, #8
276c8     A7 22 02 FB | 	rdlong	local03, fp
276cc     11 15 82 F1 | 	sub	arg02, local03
276d0     07 14 06 F5 | 	and	arg02, #7
276d4     18 14 66 F0 | 	shl	arg02, #24
276d8     14 4E 85 F1 | 	sub	fp, #20
276dc     A7 14 62 FC | 	wrlong	arg02, fp
276e0     29 00 00 FF 
276e4     7A 14 46 F5 | 	or	arg02, ##21114
276e8     A7 14 62 FC | 	wrlong	arg02, fp
276ec     14 4E 05 F1 | 	add	fp, #20
276f0     A7 12 02 FB | 	rdlong	arg01, fp
276f4     40 12 62 FD | 	dirl	arg01
276f8     09 15 02 FC | 	wrpin	arg02, arg01
276fc     09 4F 18 FC | 	wxpin	#39, arg01
27700     09 01 28 FC | 	wypin	#0, arg01
27704     41 12 62 FD | 	dirh	arg01
27708     28 4E 85 F1 | 	sub	fp, #40
2770c     A7 12 02 F6 | 	mov	arg01, fp
27710     14 4E 85 F1 | 	sub	fp, #20
27714     0A 14 06 F6 | 	mov	arg02, #10
27718     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2771c     00 12 06 F6 | 	mov	arg01, #0
27720     00 14 06 F6 | 	mov	arg02, #0
27724     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27728     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
2772c     64 12 06 F6 | 	mov	arg01, #100
27730     C8 96 BF FD | 	call	#__system___waitus
27734     14 4E 05 F1 | 	add	fp, #20
27738     A7 12 02 F6 | 	mov	arg01, fp
2773c     14 4E 85 F1 | 	sub	fp, #20
27740     0A 14 06 F6 | 	mov	arg02, #10
27744     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27748     0C 4E 05 F1 | 	add	fp, #12
2774c     A7 00 48 FC | 	wrbyte	#0, fp
27750     0C 4E 85 F1 | 	sub	fp, #12
27754     00 12 06 F6 | 	mov	arg01, #0
27758     00 14 06 F6 | 	mov	arg02, #0
2775c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27760     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
27764     01 18 0E F2 | 	cmp	arg04, #1 wz
27768     B8 03 90 5D |  if_ne	jmp	#LR__4047
2776c     08 12 06 F6 | 	mov	arg01, #8
27770     AA 15 06 F6 | 	mov	arg02, #426
27774     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27778     FD FA E1 F8 | 	getbyte	result1, result1, #0
2777c     01 FA 0D F2 | 	cmp	result1, #1 wz
27780     98 01 90 5D |  if_ne	jmp	#LR__4033
27784     14 4E 05 F1 | 	add	fp, #20
27788     A7 12 02 F6 | 	mov	arg01, fp
2778c     14 4E 85 F1 | 	sub	fp, #20
27790     04 14 06 F6 | 	mov	arg02, #4
27794     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27798     16 4E 05 F1 | 	add	fp, #22
2779c     A7 24 C2 FA | 	rdbyte	local04, fp
277a0     16 4E 85 F1 | 	sub	fp, #22
277a4     01 24 0E F2 | 	cmp	local04, #1 wz
277a8     17 4E 05 A1 |  if_e	add	fp, #23
277ac     A7 22 C2 AA |  if_e	rdbyte	local03, fp
277b0     17 4E 85 A1 |  if_e	sub	fp, #23
277b4     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
277b8     68 03 90 5D |  if_ne	jmp	#LR__4046
277bc                 | ' 				for (tmr = 1000; tmr; tmr--) {
277bc     18 4E 05 F1 | 	add	fp, #24
277c0     01 00 80 FF 
277c4     A7 D0 6B FC | 	wrlong	##1000, fp
277c8     18 4E 85 F1 | 	sub	fp, #24
277cc                 | LR__4030
277cc     18 4E 05 F1 | 	add	fp, #24
277d0     A7 1E 0A FB | 	rdlong	local01, fp wz
277d4     18 4E 85 F1 | 	sub	fp, #24
277d8     3C 00 90 AD |  if_e	jmp	#LR__4031
277dc     A9 12 06 F6 | 	mov	arg01, #169
277e0     1E 14 C6 F9 | 	decod	arg02, #30
277e4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277e8     FD 24 02 F6 | 	mov	local04, result1
277ec     07 24 4E F7 | 	zerox	local04, #7 wz
277f0     24 00 90 AD |  if_e	jmp	#LR__4031
277f4     01 00 00 FF 
277f8     E8 13 06 F6 | 	mov	arg01, ##1000
277fc     FC 95 BF FD | 	call	#__system___waitus
27800     18 4E 05 F1 | 	add	fp, #24
27804     A7 24 02 FB | 	rdlong	local04, fp
27808     01 24 86 F1 | 	sub	local04, #1
2780c     A7 24 62 FC | 	wrlong	local04, fp
27810     18 4E 85 F1 | 	sub	fp, #24
27814     B4 FF 9F FD | 	jmp	#LR__4030
27818                 | LR__4031
27818     18 4E 05 F1 | 	add	fp, #24
2781c     A7 24 0A FB | 	rdlong	local04, fp wz
27820     18 4E 85 F1 | 	sub	fp, #24
27824     4C 00 90 AD |  if_e	jmp	#LR__4032
27828     3A 12 06 F6 | 	mov	arg01, #58
2782c     00 14 06 F6 | 	mov	arg02, #0
27830     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27834     FD 22 02 F6 | 	mov	local03, result1
27838     07 22 4E F7 | 	zerox	local03, #7 wz
2783c     34 00 90 5D |  if_ne	jmp	#LR__4032
27840     14 4E 05 F1 | 	add	fp, #20
27844     A7 12 02 F6 | 	mov	arg01, fp
27848     14 4E 85 F1 | 	sub	fp, #20
2784c     04 14 06 F6 | 	mov	arg02, #4
27850     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27854     14 4E 05 F1 | 	add	fp, #20
27858     A7 1E C2 FA | 	rdbyte	local01, fp
2785c     40 1E CE F7 | 	test	local01, #64 wz
27860     0C 24 06 56 |  if_ne	mov	local04, #12
27864     04 24 06 A6 |  if_e	mov	local04, #4
27868     08 4E 85 F1 | 	sub	fp, #8
2786c     A7 24 42 FC | 	wrbyte	local04, fp
27870     0C 4E 85 F1 | 	sub	fp, #12
27874                 | LR__4032
27874     14 24 06 FB | 	rdlong	local04, #20
27878     18 4E 05 F1 | 	add	fp, #24
2787c     A7 24 62 FC | 	wrlong	local04, fp
27880     0C 4E 05 F1 | 	add	fp, #12
27884     A7 24 02 FB | 	rdlong	local04, fp
27888     1B 24 26 F4 | 	bith	local04, #27
2788c     A7 24 62 FC | 	wrlong	local04, fp
27890     0C 4E 85 F1 | 	sub	fp, #12
27894     A7 24 02 FB | 	rdlong	local04, fp
27898     18 4E 85 F1 | 	sub	fp, #24
2789c     68 78 04 FF 
278a0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
278a4     1C 4E 05 C1 |  if_b	add	fp, #28
278a8     00 01 80 CF 
278ac     A7 08 68 CC |  if_b	wrlong	##131076, fp
278b0     1C 4E 85 C1 |  if_b	sub	fp, #28
278b4     6C 02 90 CD |  if_b	jmp	#LR__4046
278b8     18 4E 05 F1 | 	add	fp, #24
278bc     A7 24 02 FB | 	rdlong	local04, fp
278c0     18 4E 85 F1 | 	sub	fp, #24
278c4     E1 F5 05 FF 
278c8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
278cc     1C 4E 05 C1 |  if_b	add	fp, #28
278d0     00 01 80 CF 
278d4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
278d8     1C 4E 85 C1 |  if_b	sub	fp, #28
278dc     44 02 90 CD |  if_b	jmp	#LR__4046
278e0     18 4E 05 F1 | 	add	fp, #24
278e4     A7 24 02 FB | 	rdlong	local04, fp
278e8     18 4E 85 F1 | 	sub	fp, #24
278ec     3B 58 08 FF 
278f0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
278f4     1C 4E 05 C1 |  if_b	add	fp, #28
278f8     00 01 80 CF 
278fc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
27900     1C 4E 85 C1 |  if_b	sub	fp, #28
27904     1C 02 90 CD |  if_b	jmp	#LR__4046
27908     1C 4E 05 F1 | 	add	fp, #28
2790c     80 01 80 FF 
27910     A7 10 68 FC | 	wrlong	##196616, fp
27914     1C 4E 85 F1 | 	sub	fp, #28
27918     08 02 90 FD | 	jmp	#LR__4046
2791c                 | LR__4033
2791c     A9 12 06 F6 | 	mov	arg01, #169
27920     00 14 06 F6 | 	mov	arg02, #0
27924     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27928     FD 24 E2 F8 | 	getbyte	local04, result1, #0
2792c     02 24 16 F2 | 	cmp	local04, #2 wc
27930     18 00 90 3D |  if_ae	jmp	#LR__4034
27934     0C 4E 05 F1 | 	add	fp, #12
27938     A7 04 48 FC | 	wrbyte	#2, fp
2793c     04 4E 05 F1 | 	add	fp, #4
27940     A7 52 49 FC | 	wrbyte	#169, fp
27944     10 4E 85 F1 | 	sub	fp, #16
27948     14 00 90 FD | 	jmp	#LR__4035
2794c                 | LR__4034
2794c     0C 4E 05 F1 | 	add	fp, #12
27950     A7 02 48 FC | 	wrbyte	#1, fp
27954     04 4E 05 F1 | 	add	fp, #4
27958     A7 02 48 FC | 	wrbyte	#1, fp
2795c     10 4E 85 F1 | 	sub	fp, #16
27960                 | LR__4035
27960                 | ' 				ty =  0x01 ; cmd =  (1) ;
27960                 | ' 			}
27960                 | ' 			for (tmr = 1000; tmr; tmr--) {
27960     18 4E 05 F1 | 	add	fp, #24
27964     01 00 80 FF 
27968     A7 D0 6B FC | 	wrlong	##1000, fp
2796c     18 4E 85 F1 | 	sub	fp, #24
27970                 | LR__4036
27970     18 4E 05 F1 | 	add	fp, #24
27974     A7 22 0A FB | 	rdlong	local03, fp wz
27978     18 4E 85 F1 | 	sub	fp, #24
2797c     44 00 90 AD |  if_e	jmp	#LR__4037
27980     10 4E 05 F1 | 	add	fp, #16
27984     A7 12 C2 FA | 	rdbyte	arg01, fp
27988     10 4E 85 F1 | 	sub	fp, #16
2798c     00 14 06 F6 | 	mov	arg02, #0
27990     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27994     FD 24 02 F6 | 	mov	local04, result1
27998     07 24 4E F7 | 	zerox	local04, #7 wz
2799c     24 00 90 AD |  if_e	jmp	#LR__4037
279a0     01 00 00 FF 
279a4     E8 13 06 F6 | 	mov	arg01, ##1000
279a8     50 94 BF FD | 	call	#__system___waitus
279ac     18 4E 05 F1 | 	add	fp, #24
279b0     A7 24 02 FB | 	rdlong	local04, fp
279b4     01 24 86 F1 | 	sub	local04, #1
279b8     A7 24 62 FC | 	wrlong	local04, fp
279bc     18 4E 85 F1 | 	sub	fp, #24
279c0     AC FF 9F FD | 	jmp	#LR__4036
279c4                 | LR__4037
279c4     18 4E 05 F1 | 	add	fp, #24
279c8     A7 24 0A FB | 	rdlong	local04, fp wz
279cc     18 4E 85 F1 | 	sub	fp, #24
279d0     14 00 90 AD |  if_e	jmp	#LR__4038
279d4     10 12 06 F6 | 	mov	arg01, #16
279d8     09 14 C6 F9 | 	decod	arg02, #9
279dc     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279e0     07 FA 4D F7 | 	zerox	result1, #7 wz
279e4     0C 00 90 AD |  if_e	jmp	#LR__4039
279e8                 | LR__4038
279e8     0C 4E 05 F1 | 	add	fp, #12
279ec     A7 00 48 FC | 	wrbyte	#0, fp
279f0     0C 4E 85 F1 | 	sub	fp, #12
279f4                 | LR__4039
279f4     14 24 06 FB | 	rdlong	local04, #20
279f8     18 4E 05 F1 | 	add	fp, #24
279fc     A7 24 62 FC | 	wrlong	local04, fp
27a00     18 4E 85 F1 | 	sub	fp, #24
27a04     F0 FA 02 FF 
27a08     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27a0c     18 00 90 3D |  if_ae	jmp	#LR__4040
27a10     24 4E 05 F1 | 	add	fp, #36
27a14     A7 24 02 FB | 	rdlong	local04, fp
27a18     1B 24 26 F4 | 	bith	local04, #27
27a1c     A7 24 62 FC | 	wrlong	local04, fp
27a20     24 4E 85 F1 | 	sub	fp, #36
27a24     2C 00 90 FD | 	jmp	#LR__4041
27a28                 | LR__4040
27a28     18 4E 05 F1 | 	add	fp, #24
27a2c     A7 24 02 FB | 	rdlong	local04, fp
27a30     18 4E 85 F1 | 	sub	fp, #24
27a34     E1 F5 05 FF 
27a38     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27a3c     24 4E 05 C1 |  if_b	add	fp, #36
27a40     A7 24 02 CB |  if_b	rdlong	local04, fp
27a44     80 00 04 CF 
27a48     00 24 46 C5 |  if_b	or	local04, ##134283264
27a4c     A7 24 62 CC |  if_b	wrlong	local04, fp
27a50     24 4E 85 C1 |  if_b	sub	fp, #36
27a54                 | LR__4041
27a54     18 4E 05 F1 | 	add	fp, #24
27a58     A7 24 02 FB | 	rdlong	local04, fp
27a5c     18 4E 85 F1 | 	sub	fp, #24
27a60     F0 FA 02 FF 
27a64     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27a68     1C 4E 05 C1 |  if_b	add	fp, #28
27a6c     00 01 80 CF 
27a70     A7 08 68 CC |  if_b	wrlong	##131076, fp
27a74     1C 4E 85 C1 |  if_b	sub	fp, #28
27a78     A8 00 90 CD |  if_b	jmp	#LR__4045
27a7c     18 4E 05 F1 | 	add	fp, #24
27a80     A7 24 02 FB | 	rdlong	local04, fp
27a84     18 4E 85 F1 | 	sub	fp, #24
27a88     68 78 04 FF 
27a8c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27a90     1C 4E 05 C1 |  if_b	add	fp, #28
27a94     80 01 80 CF 
27a98     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27a9c     1C 4E 85 C1 |  if_b	sub	fp, #28
27aa0     80 00 90 CD |  if_b	jmp	#LR__4044
27aa4     18 4E 05 F1 | 	add	fp, #24
27aa8     A7 24 02 FB | 	rdlong	local04, fp
27aac     18 4E 85 F1 | 	sub	fp, #24
27ab0     E1 F5 05 FF 
27ab4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27ab8     1C 4E 05 C1 |  if_b	add	fp, #28
27abc     00 02 80 CF 
27ac0     A7 10 68 CC |  if_b	wrlong	##262152, fp
27ac4     1C 4E 85 C1 |  if_b	sub	fp, #28
27ac8     58 00 90 CD |  if_b	jmp	#LR__4043
27acc     18 4E 05 F1 | 	add	fp, #24
27ad0     A7 24 02 FB | 	rdlong	local04, fp
27ad4     18 4E 85 F1 | 	sub	fp, #24
27ad8     59 73 07 FF 
27adc     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27ae0     1C 4E 05 C1 |  if_b	add	fp, #28
27ae4     80 02 80 CF 
27ae8     A7 14 68 CC |  if_b	wrlong	##327690, fp
27aec     1C 4E 85 C1 |  if_b	sub	fp, #28
27af0     30 00 90 CD |  if_b	jmp	#LR__4042
27af4     18 4E 05 F1 | 	add	fp, #24
27af8     A7 24 02 FB | 	rdlong	local04, fp
27afc     18 4E 85 F1 | 	sub	fp, #24
27b00     D1 F0 08 FF 
27b04     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27b08     1C 4E 05 C1 |  if_b	add	fp, #28
27b0c     00 03 80 CF 
27b10     A7 18 68 CC |  if_b	wrlong	##393228, fp
27b14     1C 4E 85 F3 | 	sumc	fp, #28
27b18     80 03 80 3F 
27b1c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27b20     1C 4E 85 31 |  if_ae	sub	fp, #28
27b24                 | LR__4042
27b24                 | LR__4043
27b24                 | LR__4044
27b24                 | LR__4045
27b24                 | LR__4046
27b24                 | LR__4047
27b24     0C 4E 05 F1 | 	add	fp, #12
27b28     A7 24 C2 FA | 	rdbyte	local04, fp
27b2c     01 00 00 FF 
27b30     21 E4 05 F1 | 	add	objptr, ##545
27b34     F2 24 42 FC | 	wrbyte	local04, objptr
27b38     A7 1E CA FA | 	rdbyte	local01, fp wz
27b3c     00 24 06 56 |  if_ne	mov	local04, #0
27b40     01 24 06 A6 |  if_e	mov	local04, #1
27b44     20 4E 05 F1 | 	add	fp, #32
27b48     A7 24 42 FC | 	wrbyte	local04, fp
27b4c     A7 24 C2 FA | 	rdbyte	local04, fp
27b50     2C 4E 85 F1 | 	sub	fp, #44
27b54     01 E4 85 F1 | 	sub	objptr, #1
27b58     F2 24 42 FC | 	wrbyte	local04, objptr
27b5c     01 00 00 FF 
27b60     20 E4 85 F1 | 	sub	objptr, ##544
27b64     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27b68     34 4E 05 F1 | 	add	fp, #52
27b6c     A7 12 02 FB | 	rdlong	arg01, fp
27b70     18 4E 85 F1 | 	sub	fp, #24
27b74     A7 14 02 FB | 	rdlong	arg02, fp
27b78     09 15 12 FC | 	wxpin	arg02, arg01
27b7c     1C 4E 05 F1 | 	add	fp, #28
27b80     A7 12 02 FB | 	rdlong	arg01, fp
27b84     14 4E 85 F1 | 	sub	fp, #20
27b88     A7 14 02 FB | 	rdlong	arg02, fp
27b8c     09 15 02 FC | 	wrpin	arg02, arg01
27b90                 | ' 
27b90                 | ' 		}
27b90                 | ' 	}
27b90                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b90                 | ' 	CardType = ty;
27b90                 | ' 	s = ty ? 0 :  0x01 ;
27b90                 | ' 	Stat = s;
27b90                 | ' 
27b90                 | ' 	deselect();
27b90                 | ' 
27b90                 | ' 
27b90                 | ' 	_wxpin( PIN_CLK, ck_div );
27b90                 | ' 	_wrpin( PIN_DI, spm_tx );
27b90                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b90                 | ' 	return s;
27b90     08 4E 05 F1 | 	add	fp, #8
27b94     A7 FA C1 FA | 	rdbyte	result1, fp
27b98     2C 4E 85 F1 | 	sub	fp, #44
27b9c                 | LR__4048
27b9c     A7 F0 03 F6 | 	mov	ptra, fp
27ba0     B2 00 A0 FD | 	call	#popregs_
27ba4                 | _fatfs_cc_disk_initialize_ret
27ba4     2D 00 64 FD | 	ret
27ba8                 | 
27ba8                 | _fatfs_cc_disk_read
27ba8     05 4A 05 F6 | 	mov	COUNT_, #5
27bac     A8 00 A0 FD | 	call	#pushregs_
27bb0     0A 1F 02 F6 | 	mov	local01, arg02
27bb4     0B 21 02 F6 | 	mov	local02, arg03
27bb8     0C 23 02 F6 | 	mov	local03, arg04
27bbc     00 12 0E F2 | 	cmp	arg01, #0 wz
27bc0     01 FA 05 56 |  if_ne	mov	result1, #1
27bc4                 | ' 
27bc4                 | ' 	return Stat;
27bc4     01 00 00 AF 
27bc8     20 E4 05 A1 |  if_e	add	objptr, ##544
27bcc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27bd0     01 00 00 AF 
27bd4     20 E4 85 A1 |  if_e	sub	objptr, ##544
27bd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
27bdc     01 FA CD F7 | 	test	result1, #1 wz
27be0     03 FA 05 56 |  if_ne	mov	result1, #3
27be4     84 00 90 5D |  if_ne	jmp	#LR__4052
27be8     01 00 00 FF 
27bec     21 E4 05 F1 | 	add	objptr, ##545
27bf0     F2 24 C2 FA | 	rdbyte	local04, objptr
27bf4     01 00 00 FF 
27bf8     21 E4 85 F1 | 	sub	objptr, ##545
27bfc     08 24 CE F7 | 	test	local04, #8 wz
27c00     09 20 66 A0 |  if_e	shl	local02, #9
27c04     02 22 16 F2 | 	cmp	local03, #2 wc
27c08     12 24 06 36 |  if_ae	mov	local04, #18
27c0c     11 24 06 C6 |  if_b	mov	local04, #17
27c10     10 15 02 F6 | 	mov	arg02, local02
27c14     12 13 02 F6 | 	mov	arg01, local04
27c18     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c1c     FD 26 02 F6 | 	mov	local05, result1
27c20     07 26 4E F7 | 	zerox	local05, #7 wz
27c24     30 00 90 5D |  if_ne	jmp	#LR__4051
27c28                 | ' 		do {
27c28                 | LR__4050
27c28     0F 13 02 F6 | 	mov	arg01, local01
27c2c     09 14 C6 F9 | 	decod	arg02, #9
27c30     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27c34     00 FA 0D F2 | 	cmp	result1, #0 wz
27c38     01 00 00 5F 
27c3c     00 1E 06 51 |  if_ne	add	local01, ##512
27c40     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4050
27c44     12 25 E2 F8 | 	getbyte	local04, local04, #0
27c48     12 24 0E F2 | 	cmp	local04, #18 wz
27c4c     0C 12 06 A6 |  if_e	mov	arg01, #12
27c50     00 14 06 A6 |  if_e	mov	arg02, #0
27c54     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27c58                 | LR__4051
27c58     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27c5c                 | ' 	}
27c5c                 | ' 	deselect();
27c5c                 | ' 
27c5c                 | ' 	return count ? RES_ERROR : RES_OK;
27c5c     00 22 0E F2 | 	cmp	local03, #0 wz
27c60     01 26 06 56 |  if_ne	mov	local05, #1
27c64     00 26 06 A6 |  if_e	mov	local05, #0
27c68     13 FB 01 F6 | 	mov	result1, local05
27c6c                 | LR__4052
27c6c     A7 F0 03 F6 | 	mov	ptra, fp
27c70     B2 00 A0 FD | 	call	#popregs_
27c74                 | _fatfs_cc_disk_read_ret
27c74     2D 00 64 FD | 	ret
27c78                 | 
27c78                 | _fatfs_cc_disk_write
27c78     04 4A 05 F6 | 	mov	COUNT_, #4
27c7c     A8 00 A0 FD | 	call	#pushregs_
27c80     0A 1F 02 F6 | 	mov	local01, arg02
27c84     0C 21 02 F6 | 	mov	local02, arg04
27c88     0B 23 02 F6 | 	mov	local03, arg03
27c8c     00 12 0E F2 | 	cmp	arg01, #0 wz
27c90     01 FA 05 56 |  if_ne	mov	result1, #1
27c94                 | ' 
27c94                 | ' 	return Stat;
27c94     01 00 00 AF 
27c98     20 E4 05 A1 |  if_e	add	objptr, ##544
27c9c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27ca0     01 00 00 AF 
27ca4     20 E4 85 A1 |  if_e	sub	objptr, ##544
27ca8     FD FA E1 F8 | 	getbyte	result1, result1, #0
27cac     01 FA CD F7 | 	test	result1, #1 wz
27cb0     03 FA 05 56 |  if_ne	mov	result1, #3
27cb4     D4 00 90 5D |  if_ne	jmp	#LR__4064
27cb8     01 00 00 FF 
27cbc     21 E4 05 F1 | 	add	objptr, ##545
27cc0     F2 16 C2 FA | 	rdbyte	arg03, objptr
27cc4     01 00 00 FF 
27cc8     21 E4 85 F1 | 	sub	objptr, ##545
27ccc     08 16 CE F7 | 	test	arg03, #8 wz
27cd0     09 22 66 A0 |  if_e	shl	local03, #9
27cd4     01 20 0E F2 | 	cmp	local02, #1 wz
27cd8     30 00 90 5D |  if_ne	jmp	#LR__4060
27cdc     18 12 06 F6 | 	mov	arg01, #24
27ce0     11 15 02 F6 | 	mov	arg02, local03
27ce4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27ce8     FD 24 02 F6 | 	mov	local04, result1
27cec     07 24 4E F7 | 	zerox	local04, #7 wz
27cf0     84 00 90 5D |  if_ne	jmp	#LR__4063
27cf4     0F 13 02 F6 | 	mov	arg01, local01
27cf8     FE 14 06 F6 | 	mov	arg02, #254
27cfc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27d00     00 FA 0D F2 | 	cmp	result1, #0 wz
27d04     00 20 06 56 |  if_ne	mov	local02, #0
27d08     6C 00 90 FD | 	jmp	#LR__4063
27d0c                 | LR__4060
27d0c     01 00 00 FF 
27d10     21 E4 05 F1 | 	add	objptr, ##545
27d14     F2 24 C2 FA | 	rdbyte	local04, objptr
27d18     01 00 00 FF 
27d1c     21 E4 85 F1 | 	sub	objptr, ##545
27d20     06 24 CE F7 | 	test	local04, #6 wz
27d24     97 12 06 56 |  if_ne	mov	arg01, #151
27d28     10 15 02 56 |  if_ne	mov	arg02, local02
27d2c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27d30     11 15 02 F6 | 	mov	arg02, local03
27d34     19 12 06 F6 | 	mov	arg01, #25
27d38     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d3c     FD 24 02 F6 | 	mov	local04, result1
27d40     07 24 4E F7 | 	zerox	local04, #7 wz
27d44     30 00 90 5D |  if_ne	jmp	#LR__4062
27d48                 | ' 			do {
27d48                 | LR__4061
27d48     0F 13 02 F6 | 	mov	arg01, local01
27d4c     FC 14 06 F6 | 	mov	arg02, #252
27d50     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27d54     00 FA 0D F2 | 	cmp	result1, #0 wz
27d58     01 00 00 5F 
27d5c     00 1E 06 51 |  if_ne	add	local01, ##512
27d60     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4061
27d64     00 12 06 F6 | 	mov	arg01, #0
27d68     FD 14 06 F6 | 	mov	arg02, #253
27d6c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27d70     00 FA 0D F2 | 	cmp	result1, #0 wz
27d74     01 20 06 A6 |  if_e	mov	local02, #1
27d78                 | LR__4062
27d78                 | LR__4063
27d78     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27d7c                 | ' 				count = 1;
27d7c                 | ' 		}
27d7c                 | ' 	}
27d7c                 | ' 	deselect();
27d7c                 | ' 
27d7c                 | ' 	return count ? RES_ERROR : RES_OK;
27d7c     00 20 0E F2 | 	cmp	local02, #0 wz
27d80     01 24 06 56 |  if_ne	mov	local04, #1
27d84     00 24 06 A6 |  if_e	mov	local04, #0
27d88     12 FB 01 F6 | 	mov	result1, local04
27d8c                 | LR__4064
27d8c     A7 F0 03 F6 | 	mov	ptra, fp
27d90     B2 00 A0 FD | 	call	#popregs_
27d94                 | _fatfs_cc_disk_write_ret
27d94     2D 00 64 FD | 	ret
27d98                 | 
27d98                 | _fatfs_cc_disk_ioctl
27d98     01 4A 05 F6 | 	mov	COUNT_, #1
27d9c     A8 00 A0 FD | 	call	#pushregs_
27da0     30 F0 07 F1 | 	add	ptra, #48
27da4     04 4E 05 F1 | 	add	fp, #4
27da8     A7 12 42 FC | 	wrbyte	arg01, fp
27dac     04 4E 05 F1 | 	add	fp, #4
27db0     A7 14 42 FC | 	wrbyte	arg02, fp
27db4     04 4E 05 F1 | 	add	fp, #4
27db8     A7 16 62 FC | 	wrlong	arg03, fp
27dbc     08 4E 85 F1 | 	sub	fp, #8
27dc0     A7 12 CA FA | 	rdbyte	arg01, fp wz
27dc4     04 4E 85 F1 | 	sub	fp, #4
27dc8     01 FA 05 56 |  if_ne	mov	result1, #1
27dcc                 | ' 
27dcc                 | ' 	return Stat;
27dcc     01 00 00 AF 
27dd0     20 E4 05 A1 |  if_e	add	objptr, ##544
27dd4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27dd8     01 00 00 AF 
27ddc     20 E4 85 A1 |  if_e	sub	objptr, ##544
27de0     FD FA E1 F8 | 	getbyte	result1, result1, #0
27de4     01 FA CD F7 | 	test	result1, #1 wz
27de8     03 FA 05 56 |  if_ne	mov	result1, #3
27dec     E4 01 90 5D |  if_ne	jmp	#LR__4078
27df0     10 4E 05 F1 | 	add	fp, #16
27df4     A7 02 68 FC | 	wrlong	#1, fp
27df8                 | ' 
27df8                 | ' 	res = RES_ERROR;
27df8                 | ' 	switch (ctrl) {
27df8     08 4E 85 F1 | 	sub	fp, #8
27dfc     A7 1E C2 FA | 	rdbyte	local01, fp
27e00     08 4E 85 F1 | 	sub	fp, #8
27e04     04 1E 26 F3 | 	fle	local01, #4
27e08     30 1E 62 FD | 	jmprel	local01
27e0c                 | LR__4070
27e0c     10 00 90 FD | 	jmp	#LR__4071
27e10     24 00 90 FD | 	jmp	#LR__4072
27e14     A0 01 90 FD | 	jmp	#LR__4076
27e18     80 01 90 FD | 	jmp	#LR__4075
27e1c     98 01 90 FD | 	jmp	#LR__4076
27e20                 | LR__4071
27e20     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27e24     00 FA 0D F2 | 	cmp	result1, #0 wz
27e28     10 4E 05 51 |  if_ne	add	fp, #16
27e2c     A7 00 68 5C |  if_ne	wrlong	#0, fp
27e30     10 4E 85 51 |  if_ne	sub	fp, #16
27e34                 | ' 			break;
27e34     8C 01 90 FD | 	jmp	#LR__4077
27e38                 | LR__4072
27e38     09 12 06 F6 | 	mov	arg01, #9
27e3c     00 14 06 F6 | 	mov	arg02, #0
27e40     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27e44     FD 1E 02 F6 | 	mov	local01, result1
27e48     07 1E 4E F7 | 	zerox	local01, #7 wz
27e4c     74 01 90 5D |  if_ne	jmp	#LR__4077
27e50     18 4E 05 F1 | 	add	fp, #24
27e54     A7 12 02 F6 | 	mov	arg01, fp
27e58     18 4E 85 F1 | 	sub	fp, #24
27e5c     10 14 06 F6 | 	mov	arg02, #16
27e60     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27e64     00 FA 0D F2 | 	cmp	result1, #0 wz
27e68     58 01 90 AD |  if_e	jmp	#LR__4077
27e6c     18 4E 05 F1 | 	add	fp, #24
27e70     A7 1E C2 FA | 	rdbyte	local01, fp
27e74     18 4E 85 F1 | 	sub	fp, #24
27e78     06 1E 46 F0 | 	shr	local01, #6
27e7c     01 1E 0E F2 | 	cmp	local01, #1 wz
27e80     5C 00 90 5D |  if_ne	jmp	#LR__4073
27e84     21 4E 05 F1 | 	add	fp, #33
27e88     A7 1E C2 FA | 	rdbyte	local01, fp
27e8c     01 4E 85 F1 | 	sub	fp, #1
27e90     A7 FA C1 FA | 	rdbyte	result1, fp
27e94     FD FA 31 F9 | 	getword	result1, result1, #0
27e98     08 FA 65 F0 | 	shl	result1, #8
27e9c     FD 1E 02 F1 | 	add	local01, result1
27ea0     01 4E 85 F1 | 	sub	fp, #1
27ea4     A7 FA C1 FA | 	rdbyte	result1, fp
27ea8     3F FA 05 F5 | 	and	result1, #63
27eac     10 FA 65 F0 | 	shl	result1, #16
27eb0     FD 1E 02 F1 | 	add	local01, result1
27eb4     01 1E 06 F1 | 	add	local01, #1
27eb8     09 4E 05 F1 | 	add	fp, #9
27ebc     A7 1E 62 FC | 	wrlong	local01, fp
27ec0     1C 4E 85 F1 | 	sub	fp, #28
27ec4     A7 1E 02 FB | 	rdlong	local01, fp
27ec8     1C 4E 05 F1 | 	add	fp, #28
27ecc     A7 FA 01 FB | 	rdlong	result1, fp
27ed0     28 4E 85 F1 | 	sub	fp, #40
27ed4     0A FA 65 F0 | 	shl	result1, #10
27ed8     0F FB 61 FC | 	wrlong	result1, local01
27edc     AC 00 90 FD | 	jmp	#LR__4074
27ee0                 | LR__4073
27ee0     1D 4E 05 F1 | 	add	fp, #29
27ee4     A7 1E C2 FA | 	rdbyte	local01, fp
27ee8     0F 1F 42 F8 | 	getnib	local01, local01, #0
27eec     05 4E 05 F1 | 	add	fp, #5
27ef0     A7 FA C1 FA | 	rdbyte	result1, fp
27ef4     80 FA 05 F5 | 	and	result1, #128
27ef8     07 FA C5 F0 | 	sar	result1, #7
27efc     FD 1E 02 F1 | 	add	local01, result1
27f00     01 4E 85 F1 | 	sub	fp, #1
27f04     A7 FA C1 FA | 	rdbyte	result1, fp
27f08     03 FA 05 F5 | 	and	result1, #3
27f0c     01 FA 65 F0 | 	shl	result1, #1
27f10     FD 1E 02 F1 | 	add	local01, result1
27f14     02 1E 06 F1 | 	add	local01, #2
27f18     0D 4E 85 F1 | 	sub	fp, #13
27f1c     A7 1E 42 FC | 	wrbyte	local01, fp
27f20     0C 4E 05 F1 | 	add	fp, #12
27f24     A7 1E C2 FA | 	rdbyte	local01, fp
27f28     06 1E 46 F0 | 	shr	local01, #6
27f2c     01 4E 85 F1 | 	sub	fp, #1
27f30     A7 FA C1 FA | 	rdbyte	result1, fp
27f34     FD FA 31 F9 | 	getword	result1, result1, #0
27f38     02 FA 65 F0 | 	shl	result1, #2
27f3c     FD 1E 02 F1 | 	add	local01, result1
27f40     01 4E 85 F1 | 	sub	fp, #1
27f44     A7 FA C1 FA | 	rdbyte	result1, fp
27f48     03 FA 05 F5 | 	and	result1, #3
27f4c     FD FA 31 F9 | 	getword	result1, result1, #0
27f50     0A FA 65 F0 | 	shl	result1, #10
27f54     FD 1E 02 F1 | 	add	local01, result1
27f58     01 1E 06 F1 | 	add	local01, #1
27f5c     0A 4E 05 F1 | 	add	fp, #10
27f60     A7 1E 62 FC | 	wrlong	local01, fp
27f64     1C 4E 85 F1 | 	sub	fp, #28
27f68     A7 1E 02 FB | 	rdlong	local01, fp
27f6c     1C 4E 05 F1 | 	add	fp, #28
27f70     A7 FA 01 FB | 	rdlong	result1, fp
27f74     14 4E 85 F1 | 	sub	fp, #20
27f78     A7 16 C2 FA | 	rdbyte	arg03, fp
27f7c     14 4E 85 F1 | 	sub	fp, #20
27f80     09 16 86 F1 | 	sub	arg03, #9
27f84     0B FB 61 F0 | 	shl	result1, arg03
27f88     0F FB 61 FC | 	wrlong	result1, local01
27f8c                 | LR__4074
27f8c     10 4E 05 F1 | 	add	fp, #16
27f90     A7 00 68 FC | 	wrlong	#0, fp
27f94     10 4E 85 F1 | 	sub	fp, #16
27f98                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27f98                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27f98                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27f98                 | ' 				}
27f98                 | ' 				res = RES_OK;
27f98                 | ' 			}
27f98                 | ' 			break;
27f98     28 00 90 FD | 	jmp	#LR__4077
27f9c                 | LR__4075
27f9c     0C 4E 05 F1 | 	add	fp, #12
27fa0     A7 1E 02 FB | 	rdlong	local01, fp
27fa4     0F 01 69 FC | 	wrlong	#128, local01
27fa8     04 4E 05 F1 | 	add	fp, #4
27fac     A7 00 68 FC | 	wrlong	#0, fp
27fb0     10 4E 85 F1 | 	sub	fp, #16
27fb4                 | ' 			*(DWORD*)buff = 128;
27fb4                 | ' 			res = RES_OK;
27fb4                 | ' 			break;
27fb4     0C 00 90 FD | 	jmp	#LR__4077
27fb8                 | LR__4076
27fb8     10 4E 05 F1 | 	add	fp, #16
27fbc     A7 08 68 FC | 	wrlong	#4, fp
27fc0     10 4E 85 F1 | 	sub	fp, #16
27fc4                 | LR__4077
27fc4     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27fc8                 | ' 			res = RES_PARERR;
27fc8                 | ' 	}
27fc8                 | ' 
27fc8                 | ' 	deselect();
27fc8                 | ' 
27fc8                 | ' 	return res;
27fc8     10 4E 05 F1 | 	add	fp, #16
27fcc     A7 FA 01 FB | 	rdlong	result1, fp
27fd0     10 4E 85 F1 | 	sub	fp, #16
27fd4                 | LR__4078
27fd4     A7 F0 03 F6 | 	mov	ptra, fp
27fd8     B2 00 A0 FD | 	call	#popregs_
27fdc                 | _fatfs_cc_disk_ioctl_ret
27fdc     2D 00 64 FD | 	ret
27fe0                 | 
27fe0                 | _fatfs_cc_disk_setpins
27fe0     00 12 0E F2 | 	cmp	arg01, #0 wz
27fe4     01 FA 65 56 |  if_ne	neg	result1, #1
27fe8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27fec     01 00 00 FF 
27ff0     10 E4 05 F1 | 	add	objptr, ##528
27ff4     F2 14 62 FC | 	wrlong	arg02, objptr
27ff8     04 E4 05 F1 | 	add	objptr, #4
27ffc     F2 16 62 FC | 	wrlong	arg03, objptr
28000     04 E4 05 F1 | 	add	objptr, #4
28004     F2 18 62 FC | 	wrlong	arg04, objptr
28008     04 E4 05 F1 | 	add	objptr, #4
2800c     F2 1A 62 FC | 	wrlong	arg05, objptr
28010     01 00 00 FF 
28014     1C E4 85 F1 | 	sub	objptr, ##540
28018     00 FA 05 F6 | 	mov	result1, #0
2801c                 | _fatfs_cc_disk_setpins_ret
2801c     2D 00 64 FD | 	ret
28020                 | 
28020                 | _fatfs_cc_tchar2uni
28020     09 01 02 FB | 	rdlong	_var01, arg01
28024     00 03 02 F6 | 	mov	_var02, _var01
28028     01 00 06 F1 | 	add	_var01, #1
2802c     00 05 02 F6 | 	mov	_var03, _var01
28030     01 07 C2 FA | 	rdbyte	_var04, _var02
28034     80 06 CE F7 | 	test	_var04, #128 wz
28038     E8 00 90 AD |  if_e	jmp	#LR__4087
2803c     03 09 02 F6 | 	mov	_var05, _var04
28040     E0 08 06 F5 | 	and	_var05, #224
28044     C0 08 0E F2 | 	cmp	_var05, #192 wz
28048     1F 06 06 A5 |  if_e	and	_var04, #31
2804c     01 0A 06 A6 |  if_e	mov	_var06, #1
28050     34 00 90 AD |  if_e	jmp	#LR__4081
28054     03 09 02 F6 | 	mov	_var05, _var04
28058     F0 08 06 F5 | 	and	_var05, #240
2805c     E0 08 0E F2 | 	cmp	_var05, #224 wz
28060     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
28064     02 0A 06 A6 |  if_e	mov	_var06, #2
28068     1C 00 90 AD |  if_e	jmp	#LR__4080
2806c     03 09 02 F6 | 	mov	_var05, _var04
28070     F8 08 06 F5 | 	and	_var05, #248
28074     F0 08 0E F2 | 	cmp	_var05, #240 wz
28078     07 06 06 A5 |  if_e	and	_var04, #7
2807c     03 0A 06 A6 |  if_e	mov	_var06, #3
28080                 | ' 			return 0xFFFFFFFF;
28080     01 FA 65 56 |  if_ne	neg	result1, #1
28084     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28088                 | LR__4080
28088                 | LR__4081
28088                 | ' 		}
28088                 | ' 		do {
28088                 | LR__4082
28088     02 0D C2 FA | 	rdbyte	_var07, _var03
2808c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28090     C0 08 06 F5 | 	and	_var05, #192
28094     80 08 0E F2 | 	cmp	_var05, #128 wz
28098     01 04 06 F1 | 	add	_var03, #1
2809c     01 FA 65 56 |  if_ne	neg	result1, #1
280a0     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
280a4     06 06 66 F0 | 	shl	_var04, #6
280a8     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
280ac     3F 02 06 F5 | 	and	_var02, #63
280b0     01 07 42 F5 | 	or	_var04, _var02
280b4     F4 0B 6E FB | 	djnz	_var06, #LR__4082
280b8     80 06 16 F2 | 	cmp	_var04, #128 wc
280bc     24 00 90 CD |  if_b	jmp	#LR__4084
280c0     6C 00 00 FF 
280c4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
280c8     0C 00 90 CD |  if_b	jmp	#LR__4083
280cc     70 00 00 FF 
280d0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
280d4     0C 00 90 CD |  if_b	jmp	#LR__4084
280d8                 | LR__4083
280d8     80 08 00 FF 
280dc     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
280e0     08 00 90 CD |  if_b	jmp	#LR__4085
280e4                 | LR__4084
280e4     01 FA 65 F6 | 	neg	result1, #1
280e8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
280ec                 | LR__4085
280ec     80 00 00 FF 
280f0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
280f4     2C 00 90 CD |  if_b	jmp	#LR__4086
280f8     03 03 02 F6 | 	mov	_var02, _var04
280fc     80 00 00 FF 
28100     00 02 86 F1 | 	sub	_var02, ##65536
28104     06 02 66 F0 | 	shl	_var02, #6
28108     80 FF 01 FF 
2810c     00 02 06 F5 | 	and	_var02, ##67043328
28110     6E 00 6C FF 
28114     00 08 06 F6 | 	mov	_var05, ##-671032320
28118     01 09 42 F5 | 	or	_var05, _var02
2811c     09 06 46 F7 | 	zerox	_var04, #9
28120     04 07 42 F5 | 	or	_var04, _var05
28124                 | LR__4086
28124                 | LR__4087
28124     09 05 62 FC | 	wrlong	_var03, arg01
28128                 | ' 	}
28128                 | ' #line 811 "ff.c"
28128                 | ' 	*str = p;
28128                 | ' 	return uc;
28128     03 FB 01 F6 | 	mov	result1, _var04
2812c                 | _fatfs_cc_tchar2uni_ret
2812c     2D 00 64 FD | 	ret
28130                 | 
28130                 | _fatfs_cc_put_utf
28130     80 12 16 F2 | 	cmp	arg01, #128 wc
28134     18 00 90 3D |  if_ae	jmp	#LR__4090
28138     01 16 16 F2 | 	cmp	arg03, #1 wc
2813c     00 FA 05 C6 |  if_b	mov	result1, #0
28140     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28144     0A 13 42 FC | 	wrbyte	arg01, arg02
28148                 | ' 		*buf = (TCHAR)chr;
28148                 | ' 		return 1;
28148     01 FA 05 F6 | 	mov	result1, #1
2814c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28150                 | LR__4090
28150     04 00 00 FF 
28154     00 12 16 F2 | 	cmp	arg01, ##2048 wc
28158     40 00 90 3D |  if_ae	jmp	#LR__4091
2815c     02 16 16 F2 | 	cmp	arg03, #2 wc
28160     00 FA 05 C6 |  if_b	mov	result1, #0
28164     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28168     09 FB 01 F6 | 	mov	result1, arg01
2816c     06 FA 45 F0 | 	shr	result1, #6
28170     1F FA 05 F5 | 	and	result1, #31
28174     C0 16 06 F6 | 	mov	arg03, #192
28178     FD 16 42 F5 | 	or	arg03, result1
2817c     0A 17 42 FC | 	wrbyte	arg03, arg02
28180     01 14 06 F1 | 	add	arg02, #1
28184     3F 12 06 F5 | 	and	arg01, #63
28188     80 FA 05 F6 | 	mov	result1, #128
2818c     09 FB 41 F5 | 	or	result1, arg01
28190     0A FB 41 FC | 	wrbyte	result1, arg02
28194                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28194                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28194                 | ' 		return 2;
28194     02 FA 05 F6 | 	mov	result1, #2
28198     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2819c                 | LR__4091
2819c     80 00 00 FF 
281a0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
281a4     70 00 90 3D |  if_ae	jmp	#LR__4094
281a8     03 16 16 F2 | 	cmp	arg03, #3 wc
281ac     18 00 90 CD |  if_b	jmp	#LR__4092
281b0     6C 00 00 FF 
281b4     00 12 16 F2 | 	cmp	arg01, ##55296 wc
281b8     14 00 90 CD |  if_b	jmp	#LR__4093
281bc     70 00 00 FF 
281c0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
281c4     08 00 90 3D |  if_ae	jmp	#LR__4093
281c8                 | LR__4092
281c8     00 FA 05 F6 | 	mov	result1, #0
281cc     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
281d0                 | LR__4093
281d0     09 FB 59 F8 | 	getnib	result1, arg01, #3
281d4     E0 16 06 F6 | 	mov	arg03, #224
281d8     FD 16 42 F5 | 	or	arg03, result1
281dc     0A 17 42 FC | 	wrbyte	arg03, arg02
281e0     01 14 06 F1 | 	add	arg02, #1
281e4     09 FB 01 F6 | 	mov	result1, arg01
281e8     06 FA 45 F0 | 	shr	result1, #6
281ec     3F FA 05 F5 | 	and	result1, #63
281f0     80 16 06 F6 | 	mov	arg03, #128
281f4     FD 16 42 F5 | 	or	arg03, result1
281f8     0A 17 42 FC | 	wrbyte	arg03, arg02
281fc     01 14 06 F1 | 	add	arg02, #1
28200     3F 12 06 F5 | 	and	arg01, #63
28204     80 FA 05 F6 | 	mov	result1, #128
28208     09 FB 41 F5 | 	or	result1, arg01
2820c     0A FB 41 FC | 	wrbyte	result1, arg02
28210                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
28210                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28210                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28210                 | ' 		return 3;
28210     03 FA 05 F6 | 	mov	result1, #3
28214     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28218                 | LR__4094
28218     04 16 16 F2 | 	cmp	arg03, #4 wc
2821c     00 FA 05 C6 |  if_b	mov	result1, #0
28220     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28224     09 01 02 F6 | 	mov	_var01, arg01
28228     E0 01 06 F4 | 	bitl	_var01, #480
2822c     00 00 6C FF 
28230     00 00 86 F1 | 	sub	_var01, ##-671088640
28234     06 00 46 F0 | 	shr	_var01, #6
28238     09 13 32 F9 | 	getword	arg01, arg01, #0
2823c     6E 00 00 FF 
28240     00 12 86 F1 | 	sub	arg01, ##56320
28244     00 08 00 FF 
28248     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2824c     02 00 00 CF 
28250     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28254     00 FA 05 36 |  if_ae	mov	result1, #0
28258     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2825c     09 01 42 F5 | 	or	_var01, arg01
28260     80 00 00 FF 
28264     00 00 06 F1 | 	add	_var01, ##65536
28268     00 FB 01 F6 | 	mov	result1, _var01
2826c     12 FA 45 F0 | 	shr	result1, #18
28270     07 FA 05 F5 | 	and	result1, #7
28274     F0 16 06 F6 | 	mov	arg03, #240
28278     FD 16 42 F5 | 	or	arg03, result1
2827c     0A 17 42 FC | 	wrbyte	arg03, arg02
28280     01 14 06 F1 | 	add	arg02, #1
28284     00 FB 01 F6 | 	mov	result1, _var01
28288     0C FA 45 F0 | 	shr	result1, #12
2828c     3F FA 05 F5 | 	and	result1, #63
28290     80 16 06 F6 | 	mov	arg03, #128
28294     FD 16 42 F5 | 	or	arg03, result1
28298     0A 17 42 FC | 	wrbyte	arg03, arg02
2829c     01 14 06 F1 | 	add	arg02, #1
282a0     00 FB 01 F6 | 	mov	result1, _var01
282a4     06 FA 45 F0 | 	shr	result1, #6
282a8     3F FA 05 F5 | 	and	result1, #63
282ac     80 16 06 F6 | 	mov	arg03, #128
282b0     FD 16 42 F5 | 	or	arg03, result1
282b4     0A 17 42 FC | 	wrbyte	arg03, arg02
282b8     01 14 06 F1 | 	add	arg02, #1
282bc     3F 00 06 F5 | 	and	_var01, #63
282c0     80 FA 05 F6 | 	mov	result1, #128
282c4     00 FB 41 F5 | 	or	result1, _var01
282c8     0A FB 41 FC | 	wrbyte	result1, arg02
282cc                 | ' 	chr = (hc | chr) + 0x10000;
282cc                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
282cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
282cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
282cc                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
282cc                 | ' 	return 4;
282cc     04 FA 05 F6 | 	mov	result1, #4
282d0                 | _fatfs_cc_put_utf_ret
282d0     2D 00 64 FD | 	ret
282d4                 | 
282d4                 | _fatfs_cc_sync_window
282d4     02 4A 05 F6 | 	mov	COUNT_, #2
282d8     A8 00 A0 FD | 	call	#pushregs_
282dc     09 1F 02 F6 | 	mov	local01, arg01
282e0     00 20 06 F6 | 	mov	local02, #0
282e4     03 1E 06 F1 | 	add	local01, #3
282e8     0F FB C9 FA | 	rdbyte	result1, local01 wz
282ec     03 1E 86 F1 | 	sub	local01, #3
282f0     A4 00 90 AD |  if_e	jmp	#LR__4102
282f4     01 1E 06 F1 | 	add	local01, #1
282f8     0F 13 C2 FA | 	rdbyte	arg01, local01
282fc     33 1E 06 F1 | 	add	local01, #51
28300     0F 15 02 F6 | 	mov	arg02, local01
28304     04 1E 86 F1 | 	sub	local01, #4
28308     0F 17 02 FB | 	rdlong	arg03, local01
2830c     30 1E 86 F1 | 	sub	local01, #48
28310     01 18 06 F6 | 	mov	arg04, #1
28314     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
28318     00 FA 0D F2 | 	cmp	result1, #0 wz
2831c     74 00 90 5D |  if_ne	jmp	#LR__4100
28320     03 1E 06 F1 | 	add	local01, #3
28324     0F 01 48 FC | 	wrbyte	#0, local01
28328     2D 1E 06 F1 | 	add	local01, #45
2832c     0F FB 01 FB | 	rdlong	result1, local01
28330     0C 1E 86 F1 | 	sub	local01, #12
28334     0F 19 02 FB | 	rdlong	arg04, local01
28338     0C FB 81 F1 | 	sub	result1, arg04
2833c     08 1E 86 F1 | 	sub	local01, #8
28340     0F 19 02 FB | 	rdlong	arg04, local01
28344     1C 1E 86 F1 | 	sub	local01, #28
28348     0C FB 11 F2 | 	cmp	result1, arg04 wc
2834c     48 00 90 3D |  if_ae	jmp	#LR__4101
28350     02 1E 06 F1 | 	add	local01, #2
28354     0F 19 C2 FA | 	rdbyte	arg04, local01
28358     02 1E 86 F1 | 	sub	local01, #2
2835c     02 18 0E F2 | 	cmp	arg04, #2 wz
28360     34 00 90 5D |  if_ne	jmp	#LR__4101
28364     01 1E 06 F1 | 	add	local01, #1
28368     0F 13 C2 FA | 	rdbyte	arg01, local01
2836c     33 1E 06 F1 | 	add	local01, #51
28370     0F 15 02 F6 | 	mov	arg02, local01
28374     04 1E 86 F1 | 	sub	local01, #4
28378     0F 17 02 FB | 	rdlong	arg03, local01
2837c     14 1E 86 F1 | 	sub	local01, #20
28380     0F 1F 02 FB | 	rdlong	local01, local01
28384     0F 17 02 F1 | 	add	arg03, local01
28388     01 18 06 F6 | 	mov	arg04, #1
2838c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28390     04 00 90 FD | 	jmp	#LR__4101
28394                 | LR__4100
28394     01 20 06 F6 | 	mov	local02, #1
28398                 | LR__4101
28398                 | LR__4102
28398                 | ' 			res = FR_DISK_ERR;
28398                 | ' 		}
28398                 | ' 	}
28398                 | ' 	return res;
28398     10 FB 01 F6 | 	mov	result1, local02
2839c     A7 F0 03 F6 | 	mov	ptra, fp
283a0     B2 00 A0 FD | 	call	#popregs_
283a4                 | _fatfs_cc_sync_window_ret
283a4     2D 00 64 FD | 	ret
283a8                 | 
283a8                 | _fatfs_cc_move_window
283a8     03 4A 05 F6 | 	mov	COUNT_, #3
283ac     A8 00 A0 FD | 	call	#pushregs_
283b0     09 1F 02 F6 | 	mov	local01, arg01
283b4     0A 21 02 F6 | 	mov	local02, arg02
283b8     00 22 06 F6 | 	mov	local03, #0
283bc     30 1E 06 F1 | 	add	local01, #48
283c0     0F 19 02 FB | 	rdlong	arg04, local01
283c4     30 1E 86 F1 | 	sub	local01, #48
283c8     0C 21 0A F2 | 	cmp	local02, arg04 wz
283cc     40 00 90 AD |  if_e	jmp	#LR__4111
283d0     0F 13 02 F6 | 	mov	arg01, local01
283d4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
283d8     FD 22 0A F6 | 	mov	local03, result1 wz
283dc     30 00 90 5D |  if_ne	jmp	#LR__4110
283e0     01 1E 06 F1 | 	add	local01, #1
283e4     0F 13 C2 FA | 	rdbyte	arg01, local01
283e8     33 1E 06 F1 | 	add	local01, #51
283ec     0F 15 02 F6 | 	mov	arg02, local01
283f0     10 17 02 F6 | 	mov	arg03, local02
283f4     01 18 06 F6 | 	mov	arg04, #1
283f8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
283fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28400     01 20 66 56 |  if_ne	neg	local02, #1
28404     01 22 06 56 |  if_ne	mov	local03, #1
28408     04 1E 86 F1 | 	sub	local01, #4
2840c     0F 21 62 FC | 	wrlong	local02, local01
28410                 | LR__4110
28410                 | LR__4111
28410                 | ' 				sect = (LBA_t)0 - 1;
28410                 | ' 				res = FR_DISK_ERR;
28410                 | ' 			}
28410                 | ' 			fs->winsect = sect;
28410                 | ' 		}
28410                 | ' 	}
28410                 | ' 	return res;
28410     11 FB 01 F6 | 	mov	result1, local03
28414     A7 F0 03 F6 | 	mov	ptra, fp
28418     B2 00 A0 FD | 	call	#popregs_
2841c                 | _fatfs_cc_move_window_ret
2841c     2D 00 64 FD | 	ret
28420                 | 
28420                 | _fatfs_cc_sync_fs
28420     02 4A 05 F6 | 	mov	COUNT_, #2
28424     A8 00 A0 FD | 	call	#pushregs_
28428     09 1F 02 F6 | 	mov	local01, arg01
2842c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
28430     FD 20 0A F6 | 	mov	local02, result1 wz
28434     D8 00 90 5D |  if_ne	jmp	#LR__4121
28438     0F 19 C2 FA | 	rdbyte	arg04, local01
2843c     03 18 0E F2 | 	cmp	arg04, #3 wz
28440     04 1E 06 A1 |  if_e	add	local01, #4
28444     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28448     04 1E 86 A1 |  if_e	sub	local01, #4
2844c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
28450     A0 00 90 5D |  if_ne	jmp	#LR__4120
28454     34 1E 06 F1 | 	add	local01, #52
28458     0F 13 02 F6 | 	mov	arg01, local01
2845c     00 14 06 F6 | 	mov	arg02, #0
28460     09 16 C6 F9 | 	decod	arg03, #9
28464     98 00 A0 FD | 	call	#\builtin_bytefill_
28468     0F 13 02 F6 | 	mov	arg01, local01
2846c     FE 13 06 F1 | 	add	arg01, #510
28470     55 00 80 FF 
28474     09 AB 58 FC | 	wrword	##43605, arg01
28478     A9 B0 A0 FF 
2847c     0F A5 68 FC | 	wrlong	##1096897106, local01
28480     0F 13 02 F6 | 	mov	arg01, local01
28484     E4 13 06 F1 | 	add	arg01, #484
28488     B9 A0 B0 FF 
2848c     09 E5 68 FC | 	wrlong	##1631679090, arg01
28490     0F 13 02 F6 | 	mov	arg01, local01
28494     E8 13 06 F1 | 	add	arg01, #488
28498     20 1E 86 F1 | 	sub	local01, #32
2849c     0F 15 02 FB | 	rdlong	arg02, local01
284a0     09 15 62 FC | 	wrlong	arg02, arg01
284a4     20 1E 06 F1 | 	add	local01, #32
284a8     0F 13 02 F6 | 	mov	arg01, local01
284ac     EC 13 06 F1 | 	add	arg01, #492
284b0     24 1E 86 F1 | 	sub	local01, #36
284b4     0F 15 02 FB | 	rdlong	arg02, local01
284b8     09 15 62 FC | 	wrlong	arg02, arg01
284bc     10 1E 06 F1 | 	add	local01, #16
284c0     0F 17 02 FB | 	rdlong	arg03, local01
284c4     01 16 06 F1 | 	add	arg03, #1
284c8     10 1E 06 F1 | 	add	local01, #16
284cc     0F 17 62 FC | 	wrlong	arg03, local01
284d0     2F 1E 86 F1 | 	sub	local01, #47
284d4     0F 13 C2 FA | 	rdbyte	arg01, local01
284d8     33 1E 06 F1 | 	add	local01, #51
284dc     0F 15 02 F6 | 	mov	arg02, local01
284e0     01 18 06 F6 | 	mov	arg04, #1
284e4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
284e8     30 1E 86 F1 | 	sub	local01, #48
284ec     0F 01 48 FC | 	wrbyte	#0, local01
284f0     04 1E 86 F1 | 	sub	local01, #4
284f4                 | LR__4120
284f4     01 1E 06 F1 | 	add	local01, #1
284f8     0F 13 C2 FA | 	rdbyte	arg01, local01
284fc     00 14 06 F6 | 	mov	arg02, #0
28500     00 16 06 F6 | 	mov	arg03, #0
28504     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28508     00 FA 0D F2 | 	cmp	result1, #0 wz
2850c     01 20 06 56 |  if_ne	mov	local02, #1
28510                 | LR__4121
28510                 | ' 	}
28510                 | ' 
28510                 | ' 	return res;
28510     10 FB 01 F6 | 	mov	result1, local02
28514     A7 F0 03 F6 | 	mov	ptra, fp
28518     B2 00 A0 FD | 	call	#popregs_
2851c                 | _fatfs_cc_sync_fs_ret
2851c     2D 00 64 FD | 	ret
28520                 | 
28520                 | _fatfs_cc_clst2sect
28520     02 14 86 F1 | 	sub	arg02, #2
28524     18 12 06 F1 | 	add	arg01, #24
28528     09 01 02 FB | 	rdlong	_var01, arg01
2852c     18 12 86 F1 | 	sub	arg01, #24
28530     02 00 86 F1 | 	sub	_var01, #2
28534     00 15 12 F2 | 	cmp	arg02, _var01 wc
28538     00 FA 05 36 |  if_ae	mov	result1, #0
2853c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
28540     0A 12 06 F1 | 	add	arg01, #10
28544     09 01 E2 FA | 	rdword	_var01, arg01
28548     0A 01 02 FD | 	qmul	_var01, arg02
2854c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2854c     22 12 06 F1 | 	add	arg01, #34
28550     09 FB 01 FB | 	rdlong	result1, arg01
28554     18 00 62 FD | 	getqx	_var01
28558     00 FB 01 F1 | 	add	result1, _var01
2855c                 | _fatfs_cc_clst2sect_ret
2855c     2D 00 64 FD | 	ret
28560                 | 
28560                 | _fatfs_cc_get_fat
28560     07 4A 05 F6 | 	mov	COUNT_, #7
28564     A8 00 A0 FD | 	call	#pushregs_
28568     0A 1F 02 F6 | 	mov	local01, arg02
2856c     09 21 02 FB | 	rdlong	local02, arg01
28570     02 1E 16 F2 | 	cmp	local01, #2 wc
28574     14 00 90 CD |  if_b	jmp	#LR__4130
28578     18 20 06 F1 | 	add	local02, #24
2857c     10 23 02 FB | 	rdlong	local03, local02
28580     18 20 86 F1 | 	sub	local02, #24
28584     11 1F 12 F2 | 	cmp	local01, local03 wc
28588     08 00 90 CD |  if_b	jmp	#LR__4131
2858c                 | LR__4130
2858c     01 24 06 F6 | 	mov	local04, #1
28590     60 01 90 FD | 	jmp	#LR__4138
28594                 | LR__4131
28594     01 24 66 F6 | 	neg	local04, #1
28598                 | ' 		val = 0xFFFFFFFF;
28598                 | ' 
28598                 | ' 		switch (fs->fs_type) {
28598     10 27 C2 FA | 	rdbyte	local05, local02
2859c     01 26 86 F1 | 	sub	local05, #1
285a0     03 26 26 F3 | 	fle	local05, #3
285a4     30 26 62 FD | 	jmprel	local05
285a8                 | LR__4132
285a8     0C 00 90 FD | 	jmp	#LR__4133
285ac     B8 00 90 FD | 	jmp	#LR__4134
285b0     F8 00 90 FD | 	jmp	#LR__4135
285b4     38 01 90 FD | 	jmp	#LR__4136
285b8                 | LR__4133
285b8     0F 27 02 F6 | 	mov	local05, local01
285bc     0F 13 02 F6 | 	mov	arg01, local01
285c0     01 12 46 F0 | 	shr	arg01, #1
285c4     09 27 02 F1 | 	add	local05, arg01
285c8     10 13 02 F6 | 	mov	arg01, local02
285cc     13 29 02 F6 | 	mov	local06, local05
285d0     09 28 46 F0 | 	shr	local06, #9
285d4     24 20 06 F1 | 	add	local02, #36
285d8     10 15 02 FB | 	rdlong	arg02, local02
285dc     24 20 86 F1 | 	sub	local02, #36
285e0     14 15 02 F1 | 	add	arg02, local06
285e4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
285e8     00 FA 0D F2 | 	cmp	result1, #0 wz
285ec     04 01 90 5D |  if_ne	jmp	#LR__4137
285f0     13 29 02 F6 | 	mov	local06, local05
285f4     FF 29 06 F5 | 	and	local06, #511
285f8     34 20 06 F1 | 	add	local02, #52
285fc     10 29 02 F1 | 	add	local06, local02
28600     14 2B C2 FA | 	rdbyte	local07, local06
28604     34 20 86 F1 | 	sub	local02, #52
28608     10 13 02 F6 | 	mov	arg01, local02
2860c     01 26 06 F1 | 	add	local05, #1
28610     13 29 02 F6 | 	mov	local06, local05
28614     09 28 46 F0 | 	shr	local06, #9
28618     24 20 06 F1 | 	add	local02, #36
2861c     10 15 02 FB | 	rdlong	arg02, local02
28620     24 20 86 F1 | 	sub	local02, #36
28624     14 15 02 F1 | 	add	arg02, local06
28628     7C FD BF FD | 	call	#_fatfs_cc_move_window
2862c     00 FA 0D F2 | 	cmp	result1, #0 wz
28630     C0 00 90 5D |  if_ne	jmp	#LR__4137
28634     FF 27 06 F5 | 	and	local05, #511
28638     34 20 06 F1 | 	add	local02, #52
2863c     10 27 02 F1 | 	add	local05, local02
28640     13 29 C2 FA | 	rdbyte	local06, local05
28644     08 28 66 F0 | 	shl	local06, #8
28648     14 2B 42 F5 | 	or	local07, local06
2864c     01 1E CE F7 | 	test	local01, #1 wz
28650     04 2A 46 50 |  if_ne	shr	local07, #4
28654     15 23 02 56 |  if_ne	mov	local03, local07
28658     0B 2A 46 A7 |  if_e	zerox	local07, #11
2865c     15 23 02 A6 |  if_e	mov	local03, local07
28660     11 25 02 F6 | 	mov	local04, local03
28664                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
28664                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
28664                 | ' 			break;
28664     8C 00 90 FD | 	jmp	#LR__4137
28668                 | LR__4134
28668     10 13 02 F6 | 	mov	arg01, local02
2866c     0F 29 02 F6 | 	mov	local06, local01
28670     08 28 46 F0 | 	shr	local06, #8
28674     24 20 06 F1 | 	add	local02, #36
28678     10 15 02 FB | 	rdlong	arg02, local02
2867c     24 20 86 F1 | 	sub	local02, #36
28680     14 15 02 F1 | 	add	arg02, local06
28684     20 FD BF FD | 	call	#_fatfs_cc_move_window
28688     00 FA 0D F2 | 	cmp	result1, #0 wz
2868c     64 00 90 5D |  if_ne	jmp	#LR__4137
28690     34 20 06 F1 | 	add	local02, #52
28694     01 1E 66 F0 | 	shl	local01, #1
28698     FF 1F 06 F5 | 	and	local01, #511
2869c     0F 21 02 F1 | 	add	local02, local01
286a0                 | ' {
286a0                 | ' 
286a0                 | ' 	return *((WORD*)ptr);
286a0     10 FB E1 FA | 	rdword	result1, local02
286a4     FD 24 32 F9 | 	getword	local04, result1, #0
286a8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
286a8                 | ' 			break;
286a8     48 00 90 FD | 	jmp	#LR__4137
286ac                 | LR__4135
286ac     10 13 02 F6 | 	mov	arg01, local02
286b0     0F 29 02 F6 | 	mov	local06, local01
286b4     07 28 46 F0 | 	shr	local06, #7
286b8     24 20 06 F1 | 	add	local02, #36
286bc     10 15 02 FB | 	rdlong	arg02, local02
286c0     24 20 86 F1 | 	sub	local02, #36
286c4     14 15 02 F1 | 	add	arg02, local06
286c8     DC FC BF FD | 	call	#_fatfs_cc_move_window
286cc     00 FA 0D F2 | 	cmp	result1, #0 wz
286d0     20 00 90 5D |  if_ne	jmp	#LR__4137
286d4     34 20 06 F1 | 	add	local02, #52
286d8     02 1E 66 F0 | 	shl	local01, #2
286dc     FF 1F 06 F5 | 	and	local01, #511
286e0     0F 21 02 F1 | 	add	local02, local01
286e4                 | ' {
286e4                 | ' 
286e4                 | ' 	return *((DWORD*)ptr);
286e4     10 25 02 FB | 	rdlong	local04, local02
286e8     7C 24 06 F4 | 	bitl	local04, #124
286ec                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
286ec                 | ' 			break;
286ec     04 00 90 FD | 	jmp	#LR__4137
286f0                 | LR__4136
286f0     01 24 06 F6 | 	mov	local04, #1
286f4                 | LR__4137
286f4                 | LR__4138
286f4                 | ' 			val = 1;
286f4                 | ' 		}
286f4                 | ' 	}
286f4                 | ' 
286f4                 | ' 	return val;
286f4     12 FB 01 F6 | 	mov	result1, local04
286f8     A7 F0 03 F6 | 	mov	ptra, fp
286fc     B2 00 A0 FD | 	call	#popregs_
28700                 | _fatfs_cc_get_fat_ret
28700     2D 00 64 FD | 	ret
28704                 | 
28704                 | _fatfs_cc_put_fat
28704     08 4A 05 F6 | 	mov	COUNT_, #8
28708     A8 00 A0 FD | 	call	#pushregs_
2870c     09 1F 02 F6 | 	mov	local01, arg01
28710     0A 21 02 F6 | 	mov	local02, arg02
28714     0B 23 02 F6 | 	mov	local03, arg03
28718     02 24 06 F6 | 	mov	local04, #2
2871c     02 20 16 F2 | 	cmp	local02, #2 wc
28720     E0 01 90 CD |  if_b	jmp	#LR__4147
28724     18 1E 06 F1 | 	add	local01, #24
28728     0F 27 02 FB | 	rdlong	local05, local01
2872c     18 1E 86 F1 | 	sub	local01, #24
28730     13 21 12 F2 | 	cmp	local02, local05 wc
28734     CC 01 90 3D |  if_ae	jmp	#LR__4147
28738                 | ' 		switch (fs->fs_type) {
28738     0F 29 C2 FA | 	rdbyte	local06, local01
2873c     01 28 86 F1 | 	sub	local06, #1
28740     03 28 26 F3 | 	fle	local06, #3
28744     30 28 62 FD | 	jmprel	local06
28748                 | LR__4140
28748     0C 00 90 FD | 	jmp	#LR__4141
2874c     F8 00 90 FD | 	jmp	#LR__4144
28750     40 01 90 FD | 	jmp	#LR__4145
28754     AC 01 90 FD | 	jmp	#LR__4146
28758                 | LR__4141
28758     10 2B 02 F6 | 	mov	local07, local02
2875c     10 27 02 F6 | 	mov	local05, local02
28760     01 26 46 F0 | 	shr	local05, #1
28764     13 2B 02 F1 | 	add	local07, local05
28768     0F 13 02 F6 | 	mov	arg01, local01
2876c     15 29 02 F6 | 	mov	local06, local07
28770     09 28 46 F0 | 	shr	local06, #9
28774     24 1E 06 F1 | 	add	local01, #36
28778     0F 15 02 FB | 	rdlong	arg02, local01
2877c     24 1E 86 F1 | 	sub	local01, #36
28780     14 15 02 F1 | 	add	arg02, local06
28784     20 FC BF FD | 	call	#_fatfs_cc_move_window
28788     FD 24 0A F6 | 	mov	local04, result1 wz
2878c     74 01 90 5D |  if_ne	jmp	#LR__4146
28790     34 1E 06 F1 | 	add	local01, #52
28794     0F 2D 02 F6 | 	mov	local08, local01
28798     15 27 02 F6 | 	mov	local05, local07
2879c     FF 27 06 F5 | 	and	local05, #511
287a0     13 2D 02 F1 | 	add	local08, local05
287a4     01 20 CE F7 | 	test	local02, #1 wz
287a8     34 1E 86 F1 | 	sub	local01, #52
287ac     01 2A 06 F1 | 	add	local07, #1
287b0     18 00 90 AD |  if_e	jmp	#LR__4142
287b4     16 27 C2 FA | 	rdbyte	local05, local08
287b8     13 27 42 F8 | 	getnib	local05, local05, #0
287bc     11 29 E2 F8 | 	getbyte	local06, local03, #0
287c0     04 28 66 F0 | 	shl	local06, #4
287c4     14 27 42 F5 | 	or	local05, local06
287c8     04 00 90 FD | 	jmp	#LR__4143
287cc                 | LR__4142
287cc     11 27 02 F6 | 	mov	local05, local03
287d0                 | LR__4143
287d0     16 27 42 FC | 	wrbyte	local05, local08
287d4     03 1E 06 F1 | 	add	local01, #3
287d8     0F 03 48 FC | 	wrbyte	#1, local01
287dc     03 1E 86 F1 | 	sub	local01, #3
287e0     0F 13 02 F6 | 	mov	arg01, local01
287e4     15 2D 02 F6 | 	mov	local08, local07
287e8     09 2C 46 F0 | 	shr	local08, #9
287ec     24 1E 06 F1 | 	add	local01, #36
287f0     0F 15 02 FB | 	rdlong	arg02, local01
287f4     24 1E 86 F1 | 	sub	local01, #36
287f8     16 15 02 F1 | 	add	arg02, local08
287fc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
28800     FD 24 0A F6 | 	mov	local04, result1 wz
28804     FC 00 90 5D |  if_ne	jmp	#LR__4146
28808     34 1E 06 F1 | 	add	local01, #52
2880c     0F 2D 02 F6 | 	mov	local08, local01
28810     FF 2B 06 F5 | 	and	local07, #511
28814     15 2D 02 F1 | 	add	local08, local07
28818     01 20 CE F7 | 	test	local02, #1 wz
2881c     04 22 46 50 |  if_ne	shr	local03, #4
28820     11 27 02 56 |  if_ne	mov	local05, local03
28824     16 27 C2 AA |  if_e	rdbyte	local05, local08
28828     F0 26 06 A5 |  if_e	and	local05, #240
2882c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
28830     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28834     11 27 42 A5 |  if_e	or	local05, local03
28838     16 27 42 FC | 	wrbyte	local05, local08
2883c     31 1E 86 F1 | 	sub	local01, #49
28840     0F 03 48 FC | 	wrbyte	#1, local01
28844                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28844                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28844                 | ' 			fs->wflag = 1;
28844                 | ' 			break;
28844     BC 00 90 FD | 	jmp	#LR__4146
28848                 | LR__4144
28848     0F 13 02 F6 | 	mov	arg01, local01
2884c     10 2D 02 F6 | 	mov	local08, local02
28850     08 2C 46 F0 | 	shr	local08, #8
28854     24 1E 06 F1 | 	add	local01, #36
28858     0F 15 02 FB | 	rdlong	arg02, local01
2885c     24 1E 86 F1 | 	sub	local01, #36
28860     16 15 02 F1 | 	add	arg02, local08
28864     40 FB BF FD | 	call	#_fatfs_cc_move_window
28868     FD 24 0A F6 | 	mov	local04, result1 wz
2886c     94 00 90 5D |  if_ne	jmp	#LR__4146
28870     34 1E 06 F1 | 	add	local01, #52
28874     0F 13 02 F6 | 	mov	arg01, local01
28878     01 20 66 F0 | 	shl	local02, #1
2887c     FF 21 06 F5 | 	and	local02, #511
28880     10 13 02 F1 | 	add	arg01, local02
28884     09 23 52 FC | 	wrword	local03, arg01
28888     31 1E 86 F1 | 	sub	local01, #49
2888c     0F 03 48 FC | 	wrbyte	#1, local01
28890                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28890                 | ' 			fs->wflag = 1;
28890                 | ' 			break;
28890     70 00 90 FD | 	jmp	#LR__4146
28894                 | LR__4145
28894     0F 13 02 F6 | 	mov	arg01, local01
28898     10 2D 02 F6 | 	mov	local08, local02
2889c     07 2C 46 F0 | 	shr	local08, #7
288a0     24 1E 06 F1 | 	add	local01, #36
288a4     0F 15 02 FB | 	rdlong	arg02, local01
288a8     24 1E 86 F1 | 	sub	local01, #36
288ac     16 15 02 F1 | 	add	arg02, local08
288b0     F4 FA BF FD | 	call	#_fatfs_cc_move_window
288b4     FD 24 0A F6 | 	mov	local04, result1 wz
288b8     48 00 90 5D |  if_ne	jmp	#LR__4146
288bc     7C 22 06 F4 | 	bitl	local03, #124
288c0     34 1E 06 F1 | 	add	local01, #52
288c4     10 2D 02 F6 | 	mov	local08, local02
288c8     02 2C 66 F0 | 	shl	local08, #2
288cc     FF 2D 06 F5 | 	and	local08, #511
288d0     0F 13 02 F6 | 	mov	arg01, local01
288d4     16 13 02 F1 | 	add	arg01, local08
288d8                 | ' {
288d8                 | ' 
288d8                 | ' 	return *((DWORD*)ptr);
288d8     09 2D 02 FB | 	rdlong	local08, arg01
288dc     00 00 78 FF 
288e0     00 2C 06 F5 | 	and	local08, ##-268435456
288e4     16 23 42 F5 | 	or	local03, local08
288e8     0F 13 02 F6 | 	mov	arg01, local01
288ec     02 20 66 F0 | 	shl	local02, #2
288f0     FF 21 06 F5 | 	and	local02, #511
288f4     10 13 02 F1 | 	add	arg01, local02
288f8     09 23 62 FC | 	wrlong	local03, arg01
288fc     31 1E 86 F1 | 	sub	local01, #49
28900     0F 03 48 FC | 	wrbyte	#1, local01
28904                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28904                 | ' 			}
28904                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28904                 | ' 			fs->wflag = 1;
28904                 | ' 			break;
28904                 | LR__4146
28904                 | LR__4147
28904                 | ' 		}
28904                 | ' 	}
28904                 | ' 	return res;
28904     12 FB 01 F6 | 	mov	result1, local04
28908     A7 F0 03 F6 | 	mov	ptra, fp
2890c     B2 00 A0 FD | 	call	#popregs_
28910                 | _fatfs_cc_put_fat_ret
28910     2D 00 64 FD | 	ret
28914                 | 
28914                 | _fatfs_cc_remove_chain
28914     05 4A 05 F6 | 	mov	COUNT_, #5
28918     A8 00 A0 FD | 	call	#pushregs_
2891c     09 1F 02 F6 | 	mov	local01, arg01
28920     0A 21 02 F6 | 	mov	local02, arg02
28924     0B 23 02 F6 | 	mov	local03, arg03
28928     0F 25 02 FB | 	rdlong	local04, local01
2892c     02 20 16 F2 | 	cmp	local02, #2 wc
28930     14 00 90 CD |  if_b	jmp	#LR__4150
28934     18 24 06 F1 | 	add	local04, #24
28938     12 FB 01 FB | 	rdlong	result1, local04
2893c     18 24 86 F1 | 	sub	local04, #24
28940     FD 20 12 F2 | 	cmp	local02, result1 wc
28944     08 00 90 CD |  if_b	jmp	#LR__4151
28948                 | LR__4150
28948     02 FA 05 F6 | 	mov	result1, #2
2894c     CC 00 90 FD | 	jmp	#LR__4156
28950                 | LR__4151
28950     00 22 0E F2 | 	cmp	local03, #0 wz
28954     18 00 90 AD |  if_e	jmp	#LR__4152
28958     11 15 02 F6 | 	mov	arg02, local03
2895c     12 13 02 F6 | 	mov	arg01, local04
28960     01 16 66 F6 | 	neg	arg03, #1
28964     9C FD BF FD | 	call	#_fatfs_cc_put_fat
28968     00 FA 0D F2 | 	cmp	result1, #0 wz
2896c     AC 00 90 5D |  if_ne	jmp	#LR__4156
28970                 | LR__4152
28970                 | ' 	}
28970                 | ' 
28970                 | ' 
28970                 | ' 	do {
28970                 | LR__4153
28970     10 15 02 F6 | 	mov	arg02, local02
28974     0F 13 02 F6 | 	mov	arg01, local01
28978     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2897c     FD 26 0A F6 | 	mov	local05, result1 wz
28980     94 00 90 AD |  if_e	jmp	#LR__4155
28984     01 26 0E F2 | 	cmp	local05, #1 wz
28988     02 FA 05 A6 |  if_e	mov	result1, #2
2898c     8C 00 90 AD |  if_e	jmp	#LR__4156
28990     FF FF 7F FF 
28994     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28998     01 FA 05 A6 |  if_e	mov	result1, #1
2899c     7C 00 90 AD |  if_e	jmp	#LR__4156
289a0     10 15 02 F6 | 	mov	arg02, local02
289a4     12 13 02 F6 | 	mov	arg01, local04
289a8     00 16 06 F6 | 	mov	arg03, #0
289ac     54 FD BF FD | 	call	#_fatfs_cc_put_fat
289b0     FD 22 0A F6 | 	mov	local03, result1 wz
289b4     11 FB 01 56 |  if_ne	mov	result1, local03
289b8     60 00 90 5D |  if_ne	jmp	#LR__4156
289bc     18 24 06 F1 | 	add	local04, #24
289c0     12 23 02 FB | 	rdlong	local03, local04
289c4     02 22 86 F1 | 	sub	local03, #2
289c8     04 24 86 F1 | 	sub	local04, #4
289cc     12 21 02 FB | 	rdlong	local02, local04
289d0     14 24 86 F1 | 	sub	local04, #20
289d4     11 21 12 F2 | 	cmp	local02, local03 wc
289d8     24 00 90 3D |  if_ae	jmp	#LR__4154
289dc     14 24 06 F1 | 	add	local04, #20
289e0     12 23 02 FB | 	rdlong	local03, local04
289e4     01 22 06 F1 | 	add	local03, #1
289e8     12 23 62 FC | 	wrlong	local03, local04
289ec     10 24 86 F1 | 	sub	local04, #16
289f0     12 23 C2 FA | 	rdbyte	local03, local04
289f4     01 22 46 F5 | 	or	local03, #1
289f8     12 23 42 FC | 	wrbyte	local03, local04
289fc     04 24 86 F1 | 	sub	local04, #4
28a00                 | LR__4154
28a00     13 21 02 F6 | 	mov	local02, local05
28a04     18 24 06 F1 | 	add	local04, #24
28a08     12 27 02 FB | 	rdlong	local05, local04
28a0c     18 24 86 F1 | 	sub	local04, #24
28a10     13 21 12 F2 | 	cmp	local02, local05 wc
28a14     58 FF 9F CD |  if_b	jmp	#LR__4153
28a18                 | LR__4155
28a18                 | ' #line 1500 "ff.c"
28a18                 | ' 	return FR_OK;
28a18     00 FA 05 F6 | 	mov	result1, #0
28a1c                 | LR__4156
28a1c     A7 F0 03 F6 | 	mov	ptra, fp
28a20     B2 00 A0 FD | 	call	#popregs_
28a24                 | _fatfs_cc_remove_chain_ret
28a24     2D 00 64 FD | 	ret
28a28                 | 
28a28                 | _fatfs_cc_create_chain
28a28     09 4A 05 F6 | 	mov	COUNT_, #9
28a2c     A8 00 A0 FD | 	call	#pushregs_
28a30     09 1F 02 F6 | 	mov	local01, arg01
28a34     0A 21 0A F6 | 	mov	local02, arg02 wz
28a38     0F 23 02 FB | 	rdlong	local03, local01
28a3c     28 00 90 5D |  if_ne	jmp	#LR__4160
28a40     10 22 06 F1 | 	add	local03, #16
28a44     11 25 0A FB | 	rdlong	local04, local03 wz
28a48     10 22 86 F1 | 	sub	local03, #16
28a4c     18 22 06 51 |  if_ne	add	local03, #24
28a50     11 27 02 5B |  if_ne	rdlong	local05, local03
28a54     18 22 86 51 |  if_ne	sub	local03, #24
28a58     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28a5c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4161
28a60     01 24 06 F6 | 	mov	local04, #1
28a64     48 00 90 FD | 	jmp	#LR__4161
28a68                 | LR__4160
28a68     10 15 02 F6 | 	mov	arg02, local02
28a6c     0F 13 02 F6 | 	mov	arg01, local01
28a70     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28a74     FD 24 02 F6 | 	mov	local04, result1
28a78     02 24 16 F2 | 	cmp	local04, #2 wc
28a7c     01 FA 05 C6 |  if_b	mov	result1, #1
28a80     BC 01 90 CD |  if_b	jmp	#LR__4171
28a84     FF FF 7F FF 
28a88     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28a8c     12 FB 01 A6 |  if_e	mov	result1, local04
28a90     AC 01 90 AD |  if_e	jmp	#LR__4171
28a94     18 22 06 F1 | 	add	local03, #24
28a98     11 27 02 FB | 	rdlong	local05, local03
28a9c     18 22 86 F1 | 	sub	local03, #24
28aa0     13 25 12 F2 | 	cmp	local04, local05 wc
28aa4     12 FB 01 C6 |  if_b	mov	result1, local04
28aa8     94 01 90 CD |  if_b	jmp	#LR__4171
28aac     10 25 02 F6 | 	mov	local04, local02
28ab0                 | LR__4161
28ab0     14 22 06 F1 | 	add	local03, #20
28ab4     11 27 0A FB | 	rdlong	local05, local03 wz
28ab8     14 22 86 F1 | 	sub	local03, #20
28abc     00 FA 05 A6 |  if_e	mov	result1, #0
28ac0     7C 01 90 AD |  if_e	jmp	#LR__4171
28ac4     00 28 06 F6 | 	mov	local06, #0
28ac8     10 25 0A F2 | 	cmp	local04, local02 wz
28acc     74 00 90 5D |  if_ne	jmp	#LR__4164
28ad0     12 29 02 F6 | 	mov	local06, local04
28ad4     01 28 06 F1 | 	add	local06, #1
28ad8     18 22 06 F1 | 	add	local03, #24
28adc     11 27 02 FB | 	rdlong	local05, local03
28ae0     18 22 86 F1 | 	sub	local03, #24
28ae4     13 29 12 F2 | 	cmp	local06, local05 wc
28ae8     02 28 06 36 |  if_ae	mov	local06, #2
28aec     14 15 02 F6 | 	mov	arg02, local06
28af0     0F 13 02 F6 | 	mov	arg01, local01
28af4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28af8     FD 26 02 F6 | 	mov	local05, result1
28afc     01 26 0E F2 | 	cmp	local05, #1 wz
28b00     FF FF 7F 5F 
28b04     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28b08     13 FB 01 A6 |  if_e	mov	result1, local05
28b0c     30 01 90 AD |  if_e	jmp	#LR__4171
28b10     00 26 0E F2 | 	cmp	local05, #0 wz
28b14     2C 00 90 AD |  if_e	jmp	#LR__4163
28b18     10 22 06 F1 | 	add	local03, #16
28b1c     11 2B 02 FB | 	rdlong	local07, local03
28b20     10 22 86 F1 | 	sub	local03, #16
28b24     02 2A 16 F2 | 	cmp	local07, #2 wc
28b28     14 00 90 CD |  if_b	jmp	#LR__4162
28b2c     18 22 06 F1 | 	add	local03, #24
28b30     11 27 02 FB | 	rdlong	local05, local03
28b34     18 22 86 F1 | 	sub	local03, #24
28b38     13 2B 12 F2 | 	cmp	local07, local05 wc
28b3c     15 25 02 C6 |  if_b	mov	local04, local07
28b40                 | LR__4162
28b40     00 28 06 F6 | 	mov	local06, #0
28b44                 | LR__4163
28b44                 | LR__4164
28b44     00 28 0E F2 | 	cmp	local06, #0 wz
28b48     60 00 90 5D |  if_ne	jmp	#LR__4167
28b4c     12 29 02 F6 | 	mov	local06, local04
28b50                 | ' 			ncl = scl;
28b50                 | ' 			for (;;) {
28b50                 | LR__4165
28b50     01 28 06 F1 | 	add	local06, #1
28b54     18 22 06 F1 | 	add	local03, #24
28b58     11 27 02 FB | 	rdlong	local05, local03
28b5c     18 22 86 F1 | 	sub	local03, #24
28b60     13 29 12 F2 | 	cmp	local06, local05 wc
28b64     02 28 06 36 |  if_ae	mov	local06, #2
28b68     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28b6c     00 FA 05 16 |  if_a	mov	result1, #0
28b70     CC 00 90 1D |  if_a	jmp	#LR__4171
28b74     14 15 02 F6 | 	mov	arg02, local06
28b78     0F 13 02 F6 | 	mov	arg01, local01
28b7c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28b80     FD 2A 0A F6 | 	mov	local07, result1 wz
28b84     24 00 90 AD |  if_e	jmp	#LR__4166
28b88     01 2A 0E F2 | 	cmp	local07, #1 wz
28b8c     FF FF 7F 5F 
28b90     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28b94     15 FB 01 A6 |  if_e	mov	result1, local07
28b98     A4 00 90 AD |  if_e	jmp	#LR__4171
28b9c     12 29 0A F2 | 	cmp	local06, local04 wz
28ba0     00 FA 05 A6 |  if_e	mov	result1, #0
28ba4     98 00 90 AD |  if_e	jmp	#LR__4171
28ba8     A4 FF 9F FD | 	jmp	#LR__4165
28bac                 | LR__4166
28bac                 | LR__4167
28bac     11 13 02 F6 | 	mov	arg01, local03
28bb0     14 15 02 F6 | 	mov	arg02, local06
28bb4     01 16 66 F6 | 	neg	arg03, #1
28bb8     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28bbc     FD 2C 0A F6 | 	mov	local08, result1 wz
28bc0     1C 00 90 5D |  if_ne	jmp	#LR__4168
28bc4     00 20 0E F2 | 	cmp	local02, #0 wz
28bc8     14 00 90 AD |  if_e	jmp	#LR__4168
28bcc     11 13 02 F6 | 	mov	arg01, local03
28bd0     10 15 02 F6 | 	mov	arg02, local02
28bd4     14 17 02 F6 | 	mov	arg03, local06
28bd8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28bdc     FD 2C 02 F6 | 	mov	local08, result1
28be0                 | LR__4168
28be0     00 2C 0E F2 | 	cmp	local08, #0 wz
28be4     4C 00 90 5D |  if_ne	jmp	#LR__4169
28be8     10 22 06 F1 | 	add	local03, #16
28bec     11 29 62 FC | 	wrlong	local06, local03
28bf0     08 22 06 F1 | 	add	local03, #8
28bf4     11 27 02 FB | 	rdlong	local05, local03
28bf8     02 26 86 F1 | 	sub	local05, #2
28bfc     04 22 86 F1 | 	sub	local03, #4
28c00     11 2F 02 FB | 	rdlong	local09, local03
28c04     14 22 86 F1 | 	sub	local03, #20
28c08     13 2F 1A F2 | 	cmp	local09, local05 wcz
28c0c     14 22 06 E1 |  if_be	add	local03, #20
28c10     11 2F 02 EB |  if_be	rdlong	local09, local03
28c14     01 2E 86 E1 |  if_be	sub	local09, #1
28c18     11 2F 62 EC |  if_be	wrlong	local09, local03
28c1c     14 22 86 E1 |  if_be	sub	local03, #20
28c20     04 22 06 F1 | 	add	local03, #4
28c24     11 27 C2 FA | 	rdbyte	local05, local03
28c28     01 26 46 F5 | 	or	local05, #1
28c2c     11 27 42 FC | 	wrbyte	local05, local03
28c30     08 00 90 FD | 	jmp	#LR__4170
28c34                 | LR__4169
28c34     01 2C 0E F2 | 	cmp	local08, #1 wz
28c38     01 28 C6 F6 | 	negz	local06, #1
28c3c                 | LR__4170
28c3c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28c3c                 | ' 	}
28c3c                 | ' 
28c3c                 | ' 	return ncl;
28c3c     14 FB 01 F6 | 	mov	result1, local06
28c40                 | LR__4171
28c40     A7 F0 03 F6 | 	mov	ptra, fp
28c44     B2 00 A0 FD | 	call	#popregs_
28c48                 | _fatfs_cc_create_chain_ret
28c48     2D 00 64 FD | 	ret
28c4c                 | 
28c4c                 | _fatfs_cc_dir_clear
28c4c     06 4A 05 F6 | 	mov	COUNT_, #6
28c50     A8 00 A0 FD | 	call	#pushregs_
28c54     09 1F 02 F6 | 	mov	local01, arg01
28c58     0A 21 02 F6 | 	mov	local02, arg02
28c5c     0F 13 02 F6 | 	mov	arg01, local01
28c60     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28c64     00 FA 0D F2 | 	cmp	result1, #0 wz
28c68     01 FA 05 56 |  if_ne	mov	result1, #1
28c6c     90 00 90 5D |  if_ne	jmp	#LR__4182
28c70     0F 13 02 F6 | 	mov	arg01, local01
28c74     10 15 02 F6 | 	mov	arg02, local02
28c78     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28c7c     FD 22 02 F6 | 	mov	local03, result1
28c80     30 1E 06 F1 | 	add	local01, #48
28c84     0F 23 62 FC | 	wrlong	local03, local01
28c88     04 1E 06 F1 | 	add	local01, #4
28c8c     0F 13 02 F6 | 	mov	arg01, local01
28c90     00 14 06 F6 | 	mov	arg02, #0
28c94     09 16 C6 F9 | 	decod	arg03, #9
28c98     98 00 A0 FD | 	call	#\builtin_bytefill_
28c9c     0F 25 02 F6 | 	mov	local04, local01
28ca0                 | ' #line 1667 "ff.c"
28ca0                 | ' 	{
28ca0                 | ' 		ibuf = fs->win; szb = 1;
28ca0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28ca0     00 26 06 F6 | 	mov	local05, #0
28ca4     34 1E 86 F1 | 	sub	local01, #52
28ca8                 | LR__4180
28ca8     0A 1E 06 F1 | 	add	local01, #10
28cac     0F 29 E2 FA | 	rdword	local06, local01
28cb0     0A 1E 86 F1 | 	sub	local01, #10
28cb4     14 27 12 F2 | 	cmp	local05, local06 wc
28cb8     2C 00 90 3D |  if_ae	jmp	#LR__4181
28cbc     01 1E 06 F1 | 	add	local01, #1
28cc0     0F 13 C2 FA | 	rdbyte	arg01, local01
28cc4     01 1E 86 F1 | 	sub	local01, #1
28cc8     12 15 02 F6 | 	mov	arg02, local04
28ccc     11 17 02 F6 | 	mov	arg03, local03
28cd0     13 17 02 F1 | 	add	arg03, local05
28cd4     01 18 06 F6 | 	mov	arg04, #1
28cd8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
28ce0     01 26 06 A1 |  if_e	add	local05, #1
28ce4     C0 FF 9F AD |  if_e	jmp	#LR__4180
28ce8                 | LR__4181
28ce8                 | ' 	}
28ce8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28ce8     0A 1E 06 F1 | 	add	local01, #10
28cec     0F 25 E2 FA | 	rdword	local04, local01
28cf0     12 27 0A F2 | 	cmp	local05, local04 wz
28cf4     00 28 06 A6 |  if_e	mov	local06, #0
28cf8     01 28 06 56 |  if_ne	mov	local06, #1
28cfc     14 FB 01 F6 | 	mov	result1, local06
28d00                 | LR__4182
28d00     A7 F0 03 F6 | 	mov	ptra, fp
28d04     B2 00 A0 FD | 	call	#popregs_
28d08                 | _fatfs_cc_dir_clear_ret
28d08     2D 00 64 FD | 	ret
28d0c                 | 
28d0c                 | _fatfs_cc_dir_sdi
28d0c     06 4A 05 F6 | 	mov	COUNT_, #6
28d10     A8 00 A0 FD | 	call	#pushregs_
28d14     09 1F 02 F6 | 	mov	local01, arg01
28d18     0A 21 02 F6 | 	mov	local02, arg02
28d1c     0F 23 02 FB | 	rdlong	local03, local01
28d20     00 10 00 FF 
28d24     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28d28     1F 20 CE C7 |  if_b	test	local02, #31 wz
28d2c                 | ' 		return FR_INT_ERR;
28d2c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28d30     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4196
28d34     10 1E 06 F1 | 	add	local01, #16
28d38     0F 21 62 FC | 	wrlong	local02, local01
28d3c     08 1E 86 F1 | 	sub	local01, #8
28d40     0F 25 0A FB | 	rdlong	local04, local01 wz
28d44     08 1E 86 F1 | 	sub	local01, #8
28d48     11 27 C2 AA |  if_e	rdbyte	local05, local03
28d4c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28d50     28 22 06 21 |  if_nc_and_z	add	local03, #40
28d54     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28d58     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28d5c     00 24 0E F2 | 	cmp	local04, #0 wz
28d60     3C 00 90 5D |  if_ne	jmp	#LR__4190
28d64     10 27 02 F6 | 	mov	local05, local02
28d68     05 26 46 F0 | 	shr	local05, #5
28d6c     08 22 06 F1 | 	add	local03, #8
28d70     11 15 E2 FA | 	rdword	arg02, local03
28d74     08 22 86 F1 | 	sub	local03, #8
28d78     0A 27 12 F2 | 	cmp	local05, arg02 wc
28d7c     02 FA 05 36 |  if_ae	mov	result1, #2
28d80     E4 00 90 3D |  if_ae	jmp	#LR__4196
28d84     28 22 06 F1 | 	add	local03, #40
28d88     11 27 02 FB | 	rdlong	local05, local03
28d8c     28 22 86 F1 | 	sub	local03, #40
28d90     18 1E 06 F1 | 	add	local01, #24
28d94     0F 27 62 FC | 	wrlong	local05, local01
28d98     18 1E 86 F1 | 	sub	local01, #24
28d9c     7C 00 90 FD | 	jmp	#LR__4195
28da0                 | LR__4190
28da0     0A 22 06 F1 | 	add	local03, #10
28da4     11 29 E2 FA | 	rdword	local06, local03
28da8     0A 22 86 F1 | 	sub	local03, #10
28dac     09 28 66 F0 | 	shl	local06, #9
28db0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28db0                 | ' 		while (ofs >= csz) {
28db0                 | LR__4191
28db0     14 21 12 F2 | 	cmp	local02, local06 wc
28db4     4C 00 90 CD |  if_b	jmp	#LR__4194
28db8     0F 13 02 F6 | 	mov	arg01, local01
28dbc     12 15 02 F6 | 	mov	arg02, local04
28dc0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28dc4     FD 24 02 F6 | 	mov	local04, result1
28dc8     FF FF 7F FF 
28dcc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28dd0     01 FA 05 A6 |  if_e	mov	result1, #1
28dd4     90 00 90 AD |  if_e	jmp	#LR__4196
28dd8     02 24 16 F2 | 	cmp	local04, #2 wc
28ddc     14 00 90 CD |  if_b	jmp	#LR__4192
28de0     18 22 06 F1 | 	add	local03, #24
28de4     11 27 02 FB | 	rdlong	local05, local03
28de8     18 22 86 F1 | 	sub	local03, #24
28dec     13 25 12 F2 | 	cmp	local04, local05 wc
28df0     08 00 90 CD |  if_b	jmp	#LR__4193
28df4                 | LR__4192
28df4     02 FA 05 F6 | 	mov	result1, #2
28df8     6C 00 90 FD | 	jmp	#LR__4196
28dfc                 | LR__4193
28dfc     14 21 82 F1 | 	sub	local02, local06
28e00     AC FF 9F FD | 	jmp	#LR__4191
28e04                 | LR__4194
28e04     11 13 02 F6 | 	mov	arg01, local03
28e08     12 15 02 F6 | 	mov	arg02, local04
28e0c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28e10     18 1E 06 F1 | 	add	local01, #24
28e14     0F FB 61 FC | 	wrlong	result1, local01
28e18     18 1E 86 F1 | 	sub	local01, #24
28e1c                 | LR__4195
28e1c     14 1E 06 F1 | 	add	local01, #20
28e20     0F 25 62 FC | 	wrlong	local04, local01
28e24     04 1E 06 F1 | 	add	local01, #4
28e28     0F 27 0A FB | 	rdlong	local05, local01 wz
28e2c     18 1E 86 F1 | 	sub	local01, #24
28e30     02 FA 05 A6 |  if_e	mov	result1, #2
28e34     30 00 90 AD |  if_e	jmp	#LR__4196
28e38     10 29 02 F6 | 	mov	local06, local02
28e3c     09 28 46 F0 | 	shr	local06, #9
28e40     18 1E 06 F1 | 	add	local01, #24
28e44     0F 27 02 FB | 	rdlong	local05, local01
28e48     14 27 02 F1 | 	add	local05, local06
28e4c     0F 27 62 FC | 	wrlong	local05, local01
28e50     34 22 06 F1 | 	add	local03, #52
28e54     FF 21 06 F5 | 	and	local02, #511
28e58     10 23 02 F1 | 	add	local03, local02
28e5c     04 1E 06 F1 | 	add	local01, #4
28e60     0F 23 62 FC | 	wrlong	local03, local01
28e64                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28e64                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28e64                 | ' 
28e64                 | ' 	return FR_OK;
28e64     00 FA 05 F6 | 	mov	result1, #0
28e68                 | LR__4196
28e68     A7 F0 03 F6 | 	mov	ptra, fp
28e6c     B2 00 A0 FD | 	call	#popregs_
28e70                 | _fatfs_cc_dir_sdi_ret
28e70     2D 00 64 FD | 	ret
28e74                 | 
28e74                 | _fatfs_cc_dir_next
28e74     05 4A 05 F6 | 	mov	COUNT_, #5
28e78     A8 00 A0 FD | 	call	#pushregs_
28e7c     09 1F 02 F6 | 	mov	local01, arg01
28e80     0A 21 02 F6 | 	mov	local02, arg02
28e84     0F 23 02 FB | 	rdlong	local03, local01
28e88     10 1E 06 F1 | 	add	local01, #16
28e8c     0F 25 02 FB | 	rdlong	local04, local01
28e90     10 1E 86 F1 | 	sub	local01, #16
28e94     20 24 06 F1 | 	add	local04, #32
28e98     00 10 00 FF 
28e9c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28ea0     18 1E 06 31 |  if_ae	add	local01, #24
28ea4     0F 01 68 3C |  if_ae	wrlong	#0, local01
28ea8     18 1E 86 31 |  if_ae	sub	local01, #24
28eac     18 1E 06 F1 | 	add	local01, #24
28eb0     0F 15 0A FB | 	rdlong	arg02, local01 wz
28eb4     18 1E 86 F1 | 	sub	local01, #24
28eb8     04 FA 05 A6 |  if_e	mov	result1, #4
28ebc     64 01 90 AD |  if_e	jmp	#LR__4205
28ec0     FF 25 CE F7 | 	test	local04, #511 wz
28ec4     3C 01 90 5D |  if_ne	jmp	#LR__4204
28ec8     18 1E 06 F1 | 	add	local01, #24
28ecc     0F 15 02 FB | 	rdlong	arg02, local01
28ed0     01 14 06 F1 | 	add	arg02, #1
28ed4     0F 15 62 FC | 	wrlong	arg02, local01
28ed8     04 1E 86 F1 | 	sub	local01, #4
28edc     0F 15 0A FB | 	rdlong	arg02, local01 wz
28ee0     14 1E 86 F1 | 	sub	local01, #20
28ee4     2C 00 90 5D |  if_ne	jmp	#LR__4200
28ee8     12 15 02 F6 | 	mov	arg02, local04
28eec     05 14 46 F0 | 	shr	arg02, #5
28ef0     08 22 06 F1 | 	add	local03, #8
28ef4     11 21 E2 FA | 	rdword	local02, local03
28ef8     08 22 86 F1 | 	sub	local03, #8
28efc     10 15 12 F2 | 	cmp	arg02, local02 wc
28f00     18 1E 06 31 |  if_ae	add	local01, #24
28f04     0F 01 68 3C |  if_ae	wrlong	#0, local01
28f08                 | ' 				dp->sect = 0; return FR_NO_FILE;
28f08     04 FA 05 36 |  if_ae	mov	result1, #4
28f0c     14 01 90 3D |  if_ae	jmp	#LR__4205
28f10     F0 00 90 FD | 	jmp	#LR__4203
28f14                 | LR__4200
28f14     12 13 02 F6 | 	mov	arg01, local04
28f18     09 12 46 F0 | 	shr	arg01, #9
28f1c     0A 22 06 F1 | 	add	local03, #10
28f20     11 15 E2 FA | 	rdword	arg02, local03
28f24     0A 22 86 F1 | 	sub	local03, #10
28f28     01 14 86 F1 | 	sub	arg02, #1
28f2c     0A 13 CA F7 | 	test	arg01, arg02 wz
28f30     D0 00 90 5D |  if_ne	jmp	#LR__4202
28f34     0F 13 02 F6 | 	mov	arg01, local01
28f38     14 1E 06 F1 | 	add	local01, #20
28f3c     0F 15 02 FB | 	rdlong	arg02, local01
28f40     14 1E 86 F1 | 	sub	local01, #20
28f44     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28f48     FD 26 02 F6 | 	mov	local05, result1
28f4c     02 26 16 F2 | 	cmp	local05, #2 wc
28f50     02 FA 05 C6 |  if_b	mov	result1, #2
28f54     CC 00 90 CD |  if_b	jmp	#LR__4205
28f58     FF FF 7F FF 
28f5c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28f60     01 FA 05 A6 |  if_e	mov	result1, #1
28f64     BC 00 90 AD |  if_e	jmp	#LR__4205
28f68     18 22 06 F1 | 	add	local03, #24
28f6c     11 15 02 FB | 	rdlong	arg02, local03
28f70     18 22 86 F1 | 	sub	local03, #24
28f74     0A 27 12 F2 | 	cmp	local05, arg02 wc
28f78     68 00 90 CD |  if_b	jmp	#LR__4201
28f7c     00 20 0E F2 | 	cmp	local02, #0 wz
28f80     18 1E 06 A1 |  if_e	add	local01, #24
28f84     0F 01 68 AC |  if_e	wrlong	#0, local01
28f88                 | ' 						dp->sect = 0; return FR_NO_FILE;
28f88     04 FA 05 A6 |  if_e	mov	result1, #4
28f8c     94 00 90 AD |  if_e	jmp	#LR__4205
28f90     0F 13 02 F6 | 	mov	arg01, local01
28f94     14 1E 06 F1 | 	add	local01, #20
28f98     0F 15 02 FB | 	rdlong	arg02, local01
28f9c     14 1E 86 F1 | 	sub	local01, #20
28fa0     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28fa4     FD 26 0A F6 | 	mov	local05, result1 wz
28fa8     07 FA 05 A6 |  if_e	mov	result1, #7
28fac     74 00 90 AD |  if_e	jmp	#LR__4205
28fb0     01 26 0E F2 | 	cmp	local05, #1 wz
28fb4     02 FA 05 A6 |  if_e	mov	result1, #2
28fb8     68 00 90 AD |  if_e	jmp	#LR__4205
28fbc     FF FF 7F FF 
28fc0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28fc4     01 FA 05 A6 |  if_e	mov	result1, #1
28fc8     58 00 90 AD |  if_e	jmp	#LR__4205
28fcc     13 15 02 F6 | 	mov	arg02, local05
28fd0     11 13 02 F6 | 	mov	arg01, local03
28fd4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
28fdc     01 FA 05 56 |  if_ne	mov	result1, #1
28fe0     40 00 90 5D |  if_ne	jmp	#LR__4205
28fe4                 | LR__4201
28fe4     14 1E 06 F1 | 	add	local01, #20
28fe8     0F 27 62 FC | 	wrlong	local05, local01
28fec     11 13 02 F6 | 	mov	arg01, local03
28ff0     13 15 02 F6 | 	mov	arg02, local05
28ff4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28ff8     04 1E 06 F1 | 	add	local01, #4
28ffc     0F FB 61 FC | 	wrlong	result1, local01
29000     18 1E 86 F1 | 	sub	local01, #24
29004                 | LR__4202
29004                 | LR__4203
29004                 | LR__4204
29004     10 1E 06 F1 | 	add	local01, #16
29008     0F 25 62 FC | 	wrlong	local04, local01
2900c     34 22 06 F1 | 	add	local03, #52
29010     FF 25 06 F5 | 	and	local04, #511
29014     12 23 02 F1 | 	add	local03, local04
29018     0C 1E 06 F1 | 	add	local01, #12
2901c     0F 23 62 FC | 	wrlong	local03, local01
29020                 | ' #line 1771 "ff.c"
29020                 | ' 				}
29020                 | ' 				dp->clust = clst;
29020                 | ' 				dp->sect = clst2sect(fs, clst);
29020                 | ' 			}
29020                 | ' 		}
29020                 | ' 	}
29020                 | ' 	dp->dptr = ofs;
29020                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
29020                 | ' 
29020                 | ' 	return FR_OK;
29020     00 FA 05 F6 | 	mov	result1, #0
29024                 | LR__4205
29024     A7 F0 03 F6 | 	mov	ptra, fp
29028     B2 00 A0 FD | 	call	#popregs_
2902c                 | _fatfs_cc_dir_next_ret
2902c     2D 00 64 FD | 	ret
29030                 | 
29030                 | _fatfs_cc_dir_alloc
29030     08 4A 05 F6 | 	mov	COUNT_, #8
29034     A8 00 A0 FD | 	call	#pushregs_
29038     09 1F 02 F6 | 	mov	local01, arg01
2903c     0A 21 02 F6 | 	mov	local02, arg02
29040     0F 23 02 FB | 	rdlong	local03, local01
29044     0F 13 02 F6 | 	mov	arg01, local01
29048     00 14 06 F6 | 	mov	arg02, #0
2904c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
29050     FD 24 0A F6 | 	mov	local04, result1 wz
29054     70 00 90 5D |  if_ne	jmp	#LR__4214
29058     00 26 06 F6 | 	mov	local05, #0
2905c                 | ' 		n = 0;
2905c                 | ' 		do {
2905c                 | LR__4210
2905c     18 1E 06 F1 | 	add	local01, #24
29060     0F 15 02 FB | 	rdlong	arg02, local01
29064     18 1E 86 F1 | 	sub	local01, #24
29068     11 13 02 F6 | 	mov	arg01, local03
2906c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
29070     FD 24 0A F6 | 	mov	local04, result1 wz
29074     50 00 90 5D |  if_ne	jmp	#LR__4213
29078     1C 1E 06 F1 | 	add	local01, #28
2907c     0F 29 02 FB | 	rdlong	local06, local01
29080     1C 1E 86 F1 | 	sub	local01, #28
29084     14 29 C2 FA | 	rdbyte	local06, local06
29088     E5 28 0E F2 | 	cmp	local06, #229 wz
2908c     1C 1E 06 51 |  if_ne	add	local01, #28
29090     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29094     1C 1E 86 51 |  if_ne	sub	local01, #28
29098     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
2909c     10 00 90 5D |  if_ne	jmp	#LR__4211
290a0     01 26 06 F1 | 	add	local05, #1
290a4     10 27 0A F2 | 	cmp	local05, local02 wz
290a8     1C 00 90 AD |  if_e	jmp	#LR__4213
290ac     04 00 90 FD | 	jmp	#LR__4212
290b0                 | LR__4211
290b0     00 26 06 F6 | 	mov	local05, #0
290b4                 | LR__4212
290b4     0F 13 02 F6 | 	mov	arg01, local01
290b8     01 14 06 F6 | 	mov	arg02, #1
290bc     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
290c0     FD 24 0A F6 | 	mov	local04, result1 wz
290c4     94 FF 9F AD |  if_e	jmp	#LR__4210
290c8                 | LR__4213
290c8                 | LR__4214
290c8     04 24 0E F2 | 	cmp	local04, #4 wz
290cc     07 24 06 A6 |  if_e	mov	local04, #7
290d0                 | ' 	return res;
290d0     12 FB 01 F6 | 	mov	result1, local04
290d4     A7 F0 03 F6 | 	mov	ptra, fp
290d8     B2 00 A0 FD | 	call	#popregs_
290dc                 | _fatfs_cc_dir_alloc_ret
290dc     2D 00 64 FD | 	ret
290e0                 | 
290e0                 | _fatfs_cc_ld_clust
290e0     09 01 02 F6 | 	mov	_var01, arg01
290e4     0A 13 02 F6 | 	mov	arg01, arg02
290e8     1A 12 06 F1 | 	add	arg01, #26
290ec                 | ' {
290ec                 | ' 
290ec                 | ' 	return *((WORD*)ptr);
290ec     09 FB E1 FA | 	rdword	result1, arg01
290f0     FD 12 32 F9 | 	getword	arg01, result1, #0
290f4     00 01 C2 FA | 	rdbyte	_var01, _var01
290f8     03 00 0E F2 | 	cmp	_var01, #3 wz
290fc     14 14 06 A1 |  if_e	add	arg02, #20
29100                 | ' {
29100                 | ' 
29100                 | ' 	return *((WORD*)ptr);
29100     0A FB E1 AA |  if_e	rdword	result1, arg02
29104     10 FA 65 A0 |  if_e	shl	result1, #16
29108     FD 12 42 A5 |  if_e	or	arg01, result1
2910c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2910c                 | ' 	}
2910c                 | ' 
2910c                 | ' 	return cl;
2910c     09 FB 01 F6 | 	mov	result1, arg01
29110                 | _fatfs_cc_ld_clust_ret
29110     2D 00 64 FD | 	ret
29114                 | 
29114                 | _fatfs_cc_st_clust
29114     09 01 02 F6 | 	mov	_var01, arg01
29118     0A 13 02 F6 | 	mov	arg01, arg02
2911c     1A 12 06 F1 | 	add	arg01, #26
29120     09 17 52 FC | 	wrword	arg03, arg01
29124     00 01 C2 FA | 	rdbyte	_var01, _var01
29128     03 00 0E F2 | 	cmp	_var01, #3 wz
2912c     14 14 06 A1 |  if_e	add	arg02, #20
29130     10 16 46 A0 |  if_e	shr	arg03, #16
29134     0A 17 52 AC |  if_e	wrword	arg03, arg02
29138                 | _fatfs_cc_st_clust_ret
29138     2D 00 64 FD | 	ret
2913c                 | 
2913c                 | _fatfs_cc_cmp_lfn
2913c     07 4A 05 F6 | 	mov	COUNT_, #7
29140     A8 00 A0 FD | 	call	#pushregs_
29144     09 1F 02 F6 | 	mov	local01, arg01
29148     0A 13 02 F6 | 	mov	arg01, arg02
2914c     1A 12 06 F1 | 	add	arg01, #26
29150                 | ' {
29150                 | ' 
29150                 | ' 	return *((WORD*)ptr);
29150     09 FB E9 FA | 	rdword	result1, arg01 wz
29154     00 FA 05 56 |  if_ne	mov	result1, #0
29158     E0 00 90 5D |  if_ne	jmp	#LR__4226
2915c     0A 21 C2 FA | 	rdbyte	local02, arg02
29160     3F 20 06 F5 | 	and	local02, #63
29164     01 20 86 F1 | 	sub	local02, #1
29168     0D 20 06 FD | 	qmul	local02, #13
2916c                 | ' 
2916c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2916c                 | ' 
2916c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2916c     01 22 06 F6 | 	mov	local03, #1
29170     00 24 06 F6 | 	mov	local04, #0
29174     18 26 62 FD | 	getqx	local05
29178                 | LR__4220
29178     0D 24 16 F2 | 	cmp	local04, #13 wc
2917c     9C 00 90 3D |  if_ae	jmp	#LR__4225
29180     0A 13 02 F6 | 	mov	arg01, arg02
29184     12 21 02 F6 | 	mov	local02, local04
29188     01 00 00 FF 
2918c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29190     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29194     10 21 C2 FA | 	rdbyte	local02, local02
29198     01 20 06 FA | 	mul	local02, #1
2919c     10 13 02 F1 | 	add	arg01, local02
291a0     01 00 00 FF 
291a4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
291a8                 | ' {
291a8                 | ' 
291a8                 | ' 	return *((WORD*)ptr);
291a8     09 FB E1 FA | 	rdword	result1, arg01
291ac     FD 28 02 F6 | 	mov	local06, result1
291b0     11 21 02 F6 | 	mov	local02, local03
291b4     0F 20 4E F7 | 	zerox	local02, #15 wz
291b8     44 00 90 AD |  if_e	jmp	#LR__4223
291bc     00 27 16 F2 | 	cmp	local05, #256 wc
291c0     2C 00 90 3D |  if_ae	jmp	#LR__4221
291c4     14 13 32 F9 | 	getword	arg01, local06, #0
291c8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
291cc     FD 20 02 F6 | 	mov	local02, result1
291d0     13 23 02 F6 | 	mov	local03, local05
291d4     01 22 66 F0 | 	shl	local03, #1
291d8     0F 23 02 F1 | 	add	local03, local01
291dc     11 13 E2 FA | 	rdword	arg01, local03
291e0     01 26 06 F1 | 	add	local05, #1
291e4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
291e8     FD 20 0A F2 | 	cmp	local02, result1 wz
291ec     08 00 90 AD |  if_e	jmp	#LR__4222
291f0                 | LR__4221
291f0                 | ' 				return 0;
291f0     00 FA 05 F6 | 	mov	result1, #0
291f4     44 00 90 FD | 	jmp	#LR__4226
291f8                 | LR__4222
291f8     14 23 02 F6 | 	mov	local03, local06
291fc     14 00 90 FD | 	jmp	#LR__4224
29200                 | LR__4223
29200     14 29 32 F9 | 	getword	local06, local06, #0
29204     7F 00 00 FF 
29208     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2920c     00 FA 05 56 |  if_ne	mov	result1, #0
29210     28 00 90 5D |  if_ne	jmp	#LR__4226
29214                 | LR__4224
29214     01 24 06 F1 | 	add	local04, #1
29218     5C FF 9F FD | 	jmp	#LR__4220
2921c                 | LR__4225
2921c     0A 21 C2 FA | 	rdbyte	local02, arg02
29220     40 20 CE F7 | 	test	local02, #64 wz
29224     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
29228     01 26 66 50 |  if_ne	shl	local05, #1
2922c     0F 27 02 51 |  if_ne	add	local05, local01
29230     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29234     00 FA 05 56 |  if_ne	mov	result1, #0
29238                 | ' 
29238                 | ' 	return 1;
29238     01 FA 05 A6 |  if_e	mov	result1, #1
2923c                 | LR__4226
2923c     A7 F0 03 F6 | 	mov	ptra, fp
29240     B2 00 A0 FD | 	call	#popregs_
29244                 | _fatfs_cc_cmp_lfn_ret
29244     2D 00 64 FD | 	ret
29248                 | 
29248                 | _fatfs_cc_pick_lfn
29248     09 01 02 F6 | 	mov	_var01, arg01
2924c     0A 13 02 F6 | 	mov	arg01, arg02
29250     1A 12 06 F1 | 	add	arg01, #26
29254                 | ' {
29254                 | ' 
29254                 | ' 	return *((WORD*)ptr);
29254     09 FB E9 FA | 	rdword	result1, arg01 wz
29258     00 FA 05 56 |  if_ne	mov	result1, #0
2925c     D4 00 90 5D |  if_ne	jmp	#LR__4235
29260     0A 03 C2 FA | 	rdbyte	_var02, arg02
29264     40 02 26 F5 | 	andn	_var02, #64
29268     01 02 86 F1 | 	sub	_var02, #1
2926c     0D 02 06 FD | 	qmul	_var02, #13
29270                 | ' 
29270                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
29270                 | ' 
29270                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29270     01 04 06 F6 | 	mov	_var03, #1
29274     00 06 06 F6 | 	mov	_var04, #0
29278     18 08 62 FD | 	getqx	_var05
2927c                 | LR__4230
2927c     0D 06 16 F2 | 	cmp	_var04, #13 wc
29280     80 00 90 3D |  if_ae	jmp	#LR__4233
29284     0A 13 02 F6 | 	mov	arg01, arg02
29288     03 03 02 F6 | 	mov	_var02, _var04
2928c     01 00 00 FF 
29290     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29294     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29298     01 03 C2 FA | 	rdbyte	_var02, _var02
2929c     01 02 06 FA | 	mul	_var02, #1
292a0     01 13 02 F1 | 	add	arg01, _var02
292a4     01 00 00 FF 
292a8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
292ac                 | ' {
292ac                 | ' 
292ac                 | ' 	return *((WORD*)ptr);
292ac     09 FB E1 FA | 	rdword	result1, arg01
292b0     FD 0A 02 F6 | 	mov	_var06, result1
292b4     02 03 02 F6 | 	mov	_var02, _var03
292b8     0F 02 4E F7 | 	zerox	_var02, #15 wz
292bc     28 00 90 AD |  if_e	jmp	#LR__4231
292c0     00 09 16 F2 | 	cmp	_var05, #256 wc
292c4     00 FA 05 36 |  if_ae	mov	result1, #0
292c8     68 00 90 3D |  if_ae	jmp	#LR__4235
292cc     04 03 02 F6 | 	mov	_var02, _var05
292d0     01 02 66 F0 | 	shl	_var02, #1
292d4     00 03 02 F1 | 	add	_var02, _var01
292d8     05 05 02 F6 | 	mov	_var03, _var06
292dc     01 05 52 FC | 	wrword	_var03, _var02
292e0     01 08 06 F1 | 	add	_var05, #1
292e4     14 00 90 FD | 	jmp	#LR__4232
292e8                 | LR__4231
292e8     05 0B 32 F9 | 	getword	_var06, _var06, #0
292ec     7F 00 00 FF 
292f0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
292f4     00 FA 05 56 |  if_ne	mov	result1, #0
292f8     38 00 90 5D |  if_ne	jmp	#LR__4235
292fc                 | LR__4232
292fc     01 06 06 F1 | 	add	_var04, #1
29300     78 FF 9F FD | 	jmp	#LR__4230
29304                 | LR__4233
29304     0A 03 C2 FA | 	rdbyte	_var02, arg02
29308     40 02 CE F7 | 	test	_var02, #64 wz
2930c     02 0D 02 56 |  if_ne	mov	_var07, _var03
29310     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29314     18 00 90 AD |  if_e	jmp	#LR__4234
29318     00 09 16 F2 | 	cmp	_var05, #256 wc
2931c     00 FA 05 36 |  if_ae	mov	result1, #0
29320     10 00 90 3D |  if_ae	jmp	#LR__4235
29324     01 08 66 F0 | 	shl	_var05, #1
29328     00 09 02 F1 | 	add	_var05, _var01
2932c     04 01 58 FC | 	wrword	#0, _var05
29330                 | LR__4234
29330                 | ' 		lfnbuf[i] = 0;
29330                 | ' 	}
29330                 | ' 
29330                 | ' 	return 1;
29330     01 FA 05 F6 | 	mov	result1, #1
29334                 | LR__4235
29334                 | _fatfs_cc_pick_lfn_ret
29334     2D 00 64 FD | 	ret
29338                 | 
29338                 | _fatfs_cc_put_lfn
29338     0D 14 06 F1 | 	add	arg02, #13
2933c     0A 19 42 FC | 	wrbyte	arg04, arg02
29340     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29344     01 18 86 F1 | 	sub	arg04, #1
29348     0D 18 06 FD | 	qmul	arg04, #13
2934c     09 01 02 F6 | 	mov	_var01, arg01
29350     02 14 86 F1 | 	sub	arg02, #2
29354     0A 1F 48 FC | 	wrbyte	#15, arg02
29358     01 14 06 F1 | 	add	arg02, #1
2935c     0A 01 48 FC | 	wrbyte	#0, arg02
29360     0C 14 86 F1 | 	sub	arg02, #12
29364     0A 13 02 F6 | 	mov	arg01, arg02
29368     1A 12 06 F1 | 	add	arg01, #26
2936c     09 01 58 FC | 	wrword	#0, arg01
29370     00 02 06 F6 | 	mov	_var02, #0
29374     00 04 06 F6 | 	mov	_var03, #0
29378                 | ' 	BYTE* dir,
29378                 | ' 	BYTE ord,
29378                 | ' 	BYTE sum
29378                 | ' )
29378                 | ' {
29378                 | ' 	UINT i, s;
29378                 | ' 	WCHAR wc;
29378                 | ' 
29378                 | ' 
29378                 | ' 	dir[ 13 ] = sum;
29378                 | ' 	dir[ 11 ] =  0x0F ;
29378                 | ' 	dir[ 12 ] = 0;
29378                 | ' 	st_word(dir +  26 , 0);
29378                 | ' 
29378                 | ' 	i = (ord - 1) * 13;
29378                 | ' 	s = wc = 0;
29378                 | ' 	do {
29378     01 00 00 FF 
2937c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29380     18 06 62 FD | 	getqx	_var04
29384     97 2A 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
29388                 | LR__4240
29388     01 19 32 F9 | 	getword	arg04, _var02, #0
2938c     7F 00 00 FF 
29390     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29394     03 13 02 56 |  if_ne	mov	arg01, _var04
29398     01 06 06 51 |  if_ne	add	_var04, #1
2939c     01 12 66 50 |  if_ne	shl	arg01, #1
293a0     00 13 02 51 |  if_ne	add	arg01, _var01
293a4     09 03 E2 5A |  if_ne	rdword	_var02, arg01
293a8     0A 13 02 F6 | 	mov	arg01, arg02
293ac     02 19 02 F6 | 	mov	arg04, _var03
293b0     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
293b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
293b8     01 18 06 FA | 	mul	arg04, #1
293bc     0C 13 02 F1 | 	add	arg01, arg04
293c0     09 03 52 FC | 	wrword	_var02, arg01
293c4     01 19 02 F6 | 	mov	arg04, _var02
293c8     0F 18 4E F7 | 	zerox	arg04, #15 wz
293cc     0F 02 CE A9 |  if_e	bmask	_var02, #15
293d0     01 04 06 F1 | 	add	_var03, #1
293d4     0D 04 16 F2 | 	cmp	_var03, #13 wc
293d8     AC FF 9F CD |  if_b	jmp	#LR__4240
293dc                 | LR__4241
293dc     01 00 00 FF 
293e0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
293e4     01 03 32 F9 | 	getword	_var02, _var02, #0
293e8     7F 00 00 FF 
293ec     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
293f0     01 06 66 50 |  if_ne	shl	_var04, #1
293f4     00 07 02 51 |  if_ne	add	_var04, _var01
293f8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
293fc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
29400     40 16 46 A5 |  if_e	or	arg03, #64
29404     0A 17 42 FC | 	wrbyte	arg03, arg02
29408                 | _fatfs_cc_put_lfn_ret
29408     2D 00 64 FD | 	ret
2940c                 | 
2940c                 | _fatfs_cc_gen_numname
2940c     08 4A 05 F6 | 	mov	COUNT_, #8
29410     A8 00 A0 FD | 	call	#pushregs_
29414     2C F0 07 F1 | 	add	ptra, #44
29418     09 1F 02 F6 | 	mov	local01, arg01
2941c     0A 21 02 F6 | 	mov	local02, arg02
29420     0B 23 02 F6 | 	mov	local03, arg03
29424     0C 25 02 F6 | 	mov	local04, arg04
29428     0F 13 02 F6 | 	mov	arg01, local01
2942c     10 15 02 F6 | 	mov	arg02, local02
29430     0B 16 06 F6 | 	mov	arg03, #11
29434     84 75 BF FD | 	call	#__system____builtin_memmove
29438     06 24 16 F2 | 	cmp	local04, #6 wc
2943c     48 00 90 CD |  if_b	jmp	#LR__4255
29440     12 27 02 F6 | 	mov	local05, local04
29444     97 1E 48 FB | 	callpa	#(@LR__4253-@LR__4250)>>2,fcache_load_ptr_
29448                 | ' 		sreg = seq;
29448                 | ' 		while (*lfn) {
29448                 | LR__4250
29448     11 29 EA FA | 	rdword	local06, local03 wz
2944c     34 00 90 AD |  if_e	jmp	#LR__4254
29450     11 2B E2 FA | 	rdword	local07, local03
29454                 | ' 			wc = *lfn++;
29454                 | ' 			for (i = 0; i < 16; i++) {
29454     02 22 06 F1 | 	add	local03, #2
29458     10 12 DC FC | 	rep	@LR__4252, #16
2945c                 | LR__4251
2945c     01 26 66 F0 | 	shl	local05, #1
29460     15 29 32 F9 | 	getword	local06, local07, #0
29464     01 28 06 F5 | 	and	local06, #1
29468     14 27 02 F1 | 	add	local05, local06
2946c     15 2B 32 F9 | 	getword	local07, local07, #0
29470     01 2A 46 F0 | 	shr	local07, #1
29474     10 26 2E F4 | 	testbn	local05, #16 wz
29478     88 00 00 5F 
2947c     21 26 66 55 |  if_ne	xor	local05, ##69665
29480                 | LR__4252
29480     C4 FF 9F FD | 	jmp	#LR__4250
29484                 | LR__4253
29484                 | LR__4254
29484     13 25 02 F6 | 	mov	local04, local05
29488                 | LR__4255
29488     07 2A 06 F6 | 	mov	local07, #7
2948c                 | ' 			}
2948c                 | ' 		}
2948c                 | ' 		seq = (UINT)sreg;
2948c                 | ' 	}
2948c                 | ' 
2948c                 | ' 
2948c                 | ' 	i = 7;
2948c                 | ' 	do {
2948c     10 4E 05 F1 | 	add	fp, #16
29490     97 1A 48 FB | 	callpa	#(@LR__4257-@LR__4256)>>2,fcache_load_ptr_
29494                 | LR__4256
29494     12 27 42 F8 | 	getnib	local05, local04, #0
29498     30 26 06 F1 | 	add	local05, #48
2949c     04 24 46 F0 | 	shr	local04, #4
294a0     13 29 E2 F8 | 	getbyte	local06, local05, #0
294a4     3A 28 16 F2 | 	cmp	local06, #58 wc
294a8     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
294ac     07 26 06 31 |  if_ae	add	local05, #7
294b0     15 29 02 F6 | 	mov	local06, local07
294b4     01 2A 8E F1 | 	sub	local07, #1 wz
294b8     A7 28 02 F1 | 	add	local06, fp
294bc     14 27 42 FC | 	wrbyte	local05, local06
294c0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
294c4     CC FF 9F 5D |  if_ne	jmp	#LR__4256
294c8                 | LR__4257
294c8     15 29 02 F6 | 	mov	local06, local07
294cc     A7 28 02 F1 | 	add	local06, fp
294d0     14 FD 48 FC | 	wrbyte	#126, local06
294d4                 | ' 	ns[i] = '~';
294d4                 | ' 
294d4                 | ' 
294d4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
294d4     00 26 06 F6 | 	mov	local05, #0
294d8     10 4E 85 F1 | 	sub	fp, #16
294dc     97 2A 48 FB | 	callpa	#(@LR__4260-@LR__4258)>>2,fcache_load_ptr_
294e0                 | LR__4258
294e0     15 27 12 F2 | 	cmp	local05, local07 wc
294e4     4C 00 90 3D |  if_ae	jmp	#LR__4261
294e8     13 29 02 F6 | 	mov	local06, local05
294ec     0F 29 02 F1 | 	add	local06, local01
294f0     14 29 C2 FA | 	rdbyte	local06, local06
294f4     20 28 0E F2 | 	cmp	local06, #32 wz
294f8     38 00 90 AD |  if_e	jmp	#LR__4261
294fc     13 13 02 F6 | 	mov	arg01, local05
29500     0F 13 02 F1 | 	add	arg01, local01
29504     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29508     00 FA 05 56 |  if_ne	mov	result1, #0
2950c                 | ' 
2950c                 | ' 	return 0;
2950c     00 FA 05 A6 |  if_e	mov	result1, #0
29510     00 FA 0D F2 | 	cmp	result1, #0 wz
29514     14 00 90 AD |  if_e	jmp	#LR__4259
29518     15 29 02 F6 | 	mov	local06, local07
2951c     01 28 86 F1 | 	sub	local06, #1
29520     14 27 0A F2 | 	cmp	local05, local06 wz
29524     0C 00 90 AD |  if_e	jmp	#LR__4261
29528     01 26 06 F1 | 	add	local05, #1
2952c                 | LR__4259
2952c     01 26 06 F1 | 	add	local05, #1
29530     AC FF 9F FD | 	jmp	#LR__4258
29534                 | LR__4260
29534                 | LR__4261
29534     97 20 48 FB | 	callpa	#(@LR__4265-@LR__4262)>>2,fcache_load_ptr_
29538                 | ' 			j++;
29538                 | ' 		}
29538                 | ' 	}
29538                 | ' 	do {
29538                 | LR__4262
29538     13 29 02 F6 | 	mov	local06, local05
2953c     0F 29 02 F1 | 	add	local06, local01
29540     08 2A 16 F2 | 	cmp	local07, #8 wc
29544     01 26 06 F1 | 	add	local05, #1
29548     1C 00 90 3D |  if_ae	jmp	#LR__4263
2954c     15 25 02 F6 | 	mov	local04, local07
29550     10 4E 05 F1 | 	add	fp, #16
29554     A7 24 02 F1 | 	add	local04, fp
29558     12 2D C2 FA | 	rdbyte	local08, local04
2955c     01 2A 06 F1 | 	add	local07, #1
29560     10 4E 85 F1 | 	sub	fp, #16
29564     04 00 90 FD | 	jmp	#LR__4264
29568                 | LR__4263
29568     20 2C 06 F6 | 	mov	local08, #32
2956c                 | LR__4264
2956c     14 2D 42 FC | 	wrbyte	local08, local06
29570     08 26 16 F2 | 	cmp	local05, #8 wc
29574     C0 FF 9F CD |  if_b	jmp	#LR__4262
29578                 | LR__4265
29578     A7 F0 03 F6 | 	mov	ptra, fp
2957c     B2 00 A0 FD | 	call	#popregs_
29580                 | _fatfs_cc_gen_numname_ret
29580     2D 00 64 FD | 	ret
29584                 | 
29584                 | _fatfs_cc_sum_sfn
29584     00 00 06 F6 | 	mov	_var01, #0
29588                 | ' )
29588                 | ' {
29588                 | ' 	BYTE sum = 0;
29588                 | ' 	UINT n = 11;
29588                 | ' 
29588                 | ' 	do {
29588     97 12 48 FB | 	callpa	#(@LR__4272-@LR__4270)>>2,fcache_load_ptr_
2958c                 | LR__4270
2958c     0B 10 DC FC | 	rep	@LR__4273, #11
29590                 | LR__4271
29590     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29594     01 FA 45 F0 | 	shr	result1, #1
29598     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2959c     07 00 66 F0 | 	shl	_var01, #7
295a0     00 FB 01 F1 | 	add	result1, _var01
295a4     09 01 C2 FA | 	rdbyte	_var01, arg01
295a8     FD 00 02 F1 | 	add	_var01, result1
295ac     01 12 06 F1 | 	add	arg01, #1
295b0                 | LR__4272
295b0                 | LR__4273
295b0                 | ' 	return sum;
295b0     00 FB 01 F6 | 	mov	result1, _var01
295b4                 | _fatfs_cc_sum_sfn_ret
295b4     2D 00 64 FD | 	ret
295b8                 | 
295b8                 | _fatfs_cc_dir_read
295b8     0C 4A 05 F6 | 	mov	COUNT_, #12
295bc     A8 00 A0 FD | 	call	#pushregs_
295c0     09 1F 02 F6 | 	mov	local01, arg01
295c4     0A 21 02 F6 | 	mov	local02, arg02
295c8     04 22 06 F6 | 	mov	local03, #4
295cc     0F 25 02 FB | 	rdlong	local04, local01
295d0     FF 26 06 F6 | 	mov	local05, #255
295d4     FF 28 06 F6 | 	mov	local06, #255
295d8                 | ' )
295d8                 | ' {
295d8                 | ' 	FRESULT res = FR_NO_FILE;
295d8                 | ' 	FATFS *fs = dp->obj.fs;
295d8                 | ' 	BYTE attr, b;
295d8                 | ' 
295d8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
295d8                 | ' 
295d8                 | ' 
295d8                 | ' 	while (dp->sect) {
295d8                 | LR__4280
295d8     18 1E 06 F1 | 	add	local01, #24
295dc     0F FB 09 FB | 	rdlong	result1, local01 wz
295e0     18 1E 86 F1 | 	sub	local01, #24
295e4     AC 01 90 AD |  if_e	jmp	#LR__4290
295e8     18 1E 06 F1 | 	add	local01, #24
295ec     0F 15 02 FB | 	rdlong	arg02, local01
295f0     18 1E 86 F1 | 	sub	local01, #24
295f4     12 13 02 F6 | 	mov	arg01, local04
295f8     AC ED BF FD | 	call	#_fatfs_cc_move_window
295fc     FD 22 0A F6 | 	mov	local03, result1 wz
29600     90 01 90 5D |  if_ne	jmp	#LR__4290
29604     1C 1E 06 F1 | 	add	local01, #28
29608     0F FB 01 FB | 	rdlong	result1, local01
2960c     1C 1E 86 F1 | 	sub	local01, #28
29610     FD 2A C2 FA | 	rdbyte	local07, result1
29614     15 FB 01 F6 | 	mov	result1, local07
29618     07 FA 4D F7 | 	zerox	result1, #7 wz
2961c     04 22 06 A6 |  if_e	mov	local03, #4
29620                 | ' 			res = FR_NO_FILE; break;
29620     70 01 90 AD |  if_e	jmp	#LR__4290
29624     1C 1E 06 F1 | 	add	local01, #28
29628     0F 2D 02 FB | 	rdlong	local08, local01
2962c     0B 2C 06 F1 | 	add	local08, #11
29630     16 2F C2 FA | 	rdbyte	local09, local08
29634     3F 2E 06 F5 | 	and	local09, #63
29638     16 1E 86 F1 | 	sub	local01, #22
2963c     0F 2F 42 FC | 	wrbyte	local09, local01
29640     06 1E 86 F1 | 	sub	local01, #6
29644     15 FB E1 F8 | 	getbyte	result1, local07, #0
29648     E5 FA 0D F2 | 	cmp	result1, #229 wz
2964c     15 2D 02 56 |  if_ne	mov	local08, local07
29650     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
29654     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
29658     1C 00 90 AD |  if_e	jmp	#LR__4281
2965c     00 30 06 F6 | 	mov	local10, #0
29660     17 2D E2 F8 | 	getbyte	local08, local09, #0
29664     20 2C 26 F5 | 	andn	local08, #32
29668     08 2C 0E F2 | 	cmp	local08, #8 wz
2966c     01 30 06 A6 |  if_e	mov	local10, #1
29670     10 31 0A F2 | 	cmp	local10, local02 wz
29674     08 00 90 AD |  if_e	jmp	#LR__4282
29678                 | LR__4281
29678     FF 26 06 F6 | 	mov	local05, #255
2967c     00 01 90 FD | 	jmp	#LR__4289
29680                 | LR__4282
29680     17 2F E2 F8 | 	getbyte	local09, local09, #0
29684     0F 2E 0E F2 | 	cmp	local09, #15 wz
29688     B4 00 90 5D |  if_ne	jmp	#LR__4286
2968c     15 33 E2 F8 | 	getbyte	local11, local07, #0
29690     40 32 CE F7 | 	test	local11, #64 wz
29694     30 00 90 AD |  if_e	jmp	#LR__4283
29698     1C 1E 06 F1 | 	add	local01, #28
2969c     0F 33 02 FB | 	rdlong	local11, local01
296a0     0D 32 06 F1 | 	add	local11, #13
296a4     19 29 C2 FA | 	rdbyte	local06, local11
296a8     15 2B E2 F8 | 	getbyte	local07, local07, #0
296ac     BF 2A 06 F5 | 	and	local07, #191
296b0     15 27 02 F6 | 	mov	local05, local07
296b4     0C 1E 86 F1 | 	sub	local01, #12
296b8     0F 33 02 FB | 	rdlong	local11, local01
296bc     1C 1E 06 F1 | 	add	local01, #28
296c0     0F 33 62 FC | 	wrlong	local11, local01
296c4     2C 1E 86 F1 | 	sub	local01, #44
296c8                 | LR__4283
296c8     15 2D E2 F8 | 	getbyte	local08, local07, #0
296cc     13 31 E2 F8 | 	getbyte	local10, local05, #0
296d0     18 2D 0A F2 | 	cmp	local08, local10 wz
296d4     5C 00 90 5D |  if_ne	jmp	#LR__4284
296d8     14 31 E2 F8 | 	getbyte	local10, local06, #0
296dc     1C 1E 06 F1 | 	add	local01, #28
296e0     0F 2F 02 FB | 	rdlong	local09, local01
296e4     1C 1E 86 F1 | 	sub	local01, #28
296e8     0D 2E 06 F1 | 	add	local09, #13
296ec     17 2D C2 FA | 	rdbyte	local08, local09
296f0     16 2F E2 F8 | 	getbyte	local09, local08, #0
296f4     17 31 0A F2 | 	cmp	local10, local09 wz
296f8     38 00 90 5D |  if_ne	jmp	#LR__4284
296fc     0C 24 06 F1 | 	add	local04, #12
29700     12 13 02 FB | 	rdlong	arg01, local04
29704     0C 24 86 F1 | 	sub	local04, #12
29708     1C 1E 06 F1 | 	add	local01, #28
2970c     0F 35 02 FB | 	rdlong	local12, local01
29710     1C 1E 86 F1 | 	sub	local01, #28
29714     1A 15 02 F6 | 	mov	arg02, local12
29718     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2971c     00 FA 4D F2 | 	cmps	result1, #0 wz
29720     13 35 02 56 |  if_ne	mov	local12, local05
29724     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
29728     01 34 86 51 |  if_ne	sub	local12, #1
2972c     1A 33 02 56 |  if_ne	mov	local11, local12
29730     04 00 90 5D |  if_ne	jmp	#LR__4285
29734                 | LR__4284
29734     FF 32 06 F6 | 	mov	local11, #255
29738                 | LR__4285
29738     19 27 02 F6 | 	mov	local05, local11
2973c     40 00 90 FD | 	jmp	#LR__4288
29740                 | LR__4286
29740     13 33 02 F6 | 	mov	local11, local05
29744     07 32 4E F7 | 	zerox	local11, #7 wz
29748     20 00 90 5D |  if_ne	jmp	#LR__4287
2974c     14 29 E2 F8 | 	getbyte	local06, local06, #0
29750     1C 1E 06 F1 | 	add	local01, #28
29754     0F 13 02 FB | 	rdlong	arg01, local01
29758     1C 1E 86 F1 | 	sub	local01, #28
2975c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
29760     FD FA E1 F8 | 	getbyte	result1, result1, #0
29764     FD 28 0A F2 | 	cmp	local06, result1 wz
29768     28 00 90 AD |  if_e	jmp	#LR__4290
2976c                 | LR__4287
2976c     2C 1E 06 F1 | 	add	local01, #44
29770     FF FF FF FF 
29774     0F FF 6B FC | 	wrlong	##-1, local01
29778     2C 1E 86 F1 | 	sub	local01, #44
2977c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2977c                 | ' 					}
2977c                 | ' 					break;
2977c     14 00 90 FD | 	jmp	#LR__4290
29780                 | LR__4288
29780                 | LR__4289
29780     0F 13 02 F6 | 	mov	arg01, local01
29784     00 14 06 F6 | 	mov	arg02, #0
29788     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2978c     FD 22 0A F6 | 	mov	local03, result1 wz
29790     44 FE 9F AD |  if_e	jmp	#LR__4280
29794                 | LR__4290
29794     00 22 0E F2 | 	cmp	local03, #0 wz
29798     18 1E 06 51 |  if_ne	add	local01, #24
2979c     0F 01 68 5C |  if_ne	wrlong	#0, local01
297a0                 | ' 	return res;
297a0     11 FB 01 F6 | 	mov	result1, local03
297a4     A7 F0 03 F6 | 	mov	ptra, fp
297a8     B2 00 A0 FD | 	call	#popregs_
297ac                 | _fatfs_cc_dir_read_ret
297ac     2D 00 64 FD | 	ret
297b0                 | 
297b0                 | _fatfs_cc_dir_find
297b0     0B 4A 05 F6 | 	mov	COUNT_, #11
297b4     A8 00 A0 FD | 	call	#pushregs_
297b8     09 1F 02 F6 | 	mov	local01, arg01
297bc     0F 21 02 FB | 	rdlong	local02, local01
297c0     0F 13 02 F6 | 	mov	arg01, local01
297c4     00 14 06 F6 | 	mov	arg02, #0
297c8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
297cc     00 FA 0D F2 | 	cmp	result1, #0 wz
297d0     18 02 90 5D |  if_ne	jmp	#LR__4312
297d4     FF 22 06 F6 | 	mov	local03, #255
297d8     FF 24 06 F6 | 	mov	local04, #255
297dc     2C 1E 06 F1 | 	add	local01, #44
297e0     FF FF FF FF 
297e4     0F FF 6B FC | 	wrlong	##-1, local01
297e8     2C 1E 86 F1 | 	sub	local01, #44
297ec                 | ' #line 2404 "ff.c"
297ec                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
297ec                 | ' 
297ec                 | ' 	do {
297ec                 | LR__4300
297ec     18 1E 06 F1 | 	add	local01, #24
297f0     0F 15 02 FB | 	rdlong	arg02, local01
297f4     18 1E 86 F1 | 	sub	local01, #24
297f8     10 13 02 F6 | 	mov	arg01, local02
297fc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
29800     FD 26 0A F6 | 	mov	local05, result1 wz
29804     E0 01 90 5D |  if_ne	jmp	#LR__4311
29808     1C 1E 06 F1 | 	add	local01, #28
2980c     0F 17 02 FB | 	rdlong	arg03, local01
29810     1C 1E 86 F1 | 	sub	local01, #28
29814     0B 29 C2 FA | 	rdbyte	local06, arg03
29818     14 17 02 F6 | 	mov	arg03, local06
2981c     07 16 4E F7 | 	zerox	arg03, #7 wz
29820     04 26 06 A6 |  if_e	mov	local05, #4
29824     C0 01 90 AD |  if_e	jmp	#LR__4311
29828     1C 1E 06 F1 | 	add	local01, #28
2982c     0F 2B 02 FB | 	rdlong	local07, local01
29830     15 17 02 F6 | 	mov	arg03, local07
29834     0B 16 06 F1 | 	add	arg03, #11
29838     0B 2D C2 FA | 	rdbyte	local08, arg03
2983c     3F 2C 06 F5 | 	and	local08, #63
29840     16 1E 86 F1 | 	sub	local01, #22
29844     0F 2D 42 FC | 	wrbyte	local08, local01
29848     06 1E 86 F1 | 	sub	local01, #6
2984c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
29850     E5 16 0E F2 | 	cmp	arg03, #229 wz
29854     18 00 90 AD |  if_e	jmp	#LR__4301
29858     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2985c     08 16 CE F7 | 	test	arg03, #8 wz
29860     16 2B 02 56 |  if_ne	mov	local07, local08
29864     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
29868     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2986c     18 00 90 AD |  if_e	jmp	#LR__4302
29870                 | LR__4301
29870     FF 24 06 F6 | 	mov	local04, #255
29874     2C 1E 06 F1 | 	add	local01, #44
29878     FF FF FF FF 
2987c     0F FF 6B FC | 	wrlong	##-1, local01
29880     2C 1E 86 F1 | 	sub	local01, #44
29884     4C 01 90 FD | 	jmp	#LR__4310
29888                 | LR__4302
29888     16 2D E2 F8 | 	getbyte	local08, local08, #0
2988c     0F 2C 0E F2 | 	cmp	local08, #15 wz
29890     C8 00 90 5D |  if_ne	jmp	#LR__4306
29894     2B 1E 06 F1 | 	add	local01, #43
29898     0F 2D C2 FA | 	rdbyte	local08, local01
2989c     2B 1E 86 F1 | 	sub	local01, #43
298a0     40 2C CE F7 | 	test	local08, #64 wz
298a4     2C 01 90 5D |  if_ne	jmp	#LR__4309
298a8     14 2F E2 F8 | 	getbyte	local09, local06, #0
298ac     40 2E CE F7 | 	test	local09, #64 wz
298b0     30 00 90 AD |  if_e	jmp	#LR__4303
298b4     1C 1E 06 F1 | 	add	local01, #28
298b8     0F 2F 02 FB | 	rdlong	local09, local01
298bc     0D 2E 06 F1 | 	add	local09, #13
298c0     17 23 C2 FA | 	rdbyte	local03, local09
298c4     14 29 E2 F8 | 	getbyte	local06, local06, #0
298c8     BF 28 06 F5 | 	and	local06, #191
298cc     14 25 02 F6 | 	mov	local04, local06
298d0     0C 1E 86 F1 | 	sub	local01, #12
298d4     0F 2F 02 FB | 	rdlong	local09, local01
298d8     1C 1E 06 F1 | 	add	local01, #28
298dc     0F 2F 62 FC | 	wrlong	local09, local01
298e0     2C 1E 86 F1 | 	sub	local01, #44
298e4                 | LR__4303
298e4     14 31 E2 F8 | 	getbyte	local10, local06, #0
298e8     12 2B E2 F8 | 	getbyte	local07, local04, #0
298ec     15 31 0A F2 | 	cmp	local10, local07 wz
298f0     5C 00 90 5D |  if_ne	jmp	#LR__4304
298f4     11 2D E2 F8 | 	getbyte	local08, local03, #0
298f8     1C 1E 06 F1 | 	add	local01, #28
298fc     0F 2B 02 FB | 	rdlong	local07, local01
29900     1C 1E 86 F1 | 	sub	local01, #28
29904     0D 2A 06 F1 | 	add	local07, #13
29908     15 29 C2 FA | 	rdbyte	local06, local07
2990c     14 2B E2 F8 | 	getbyte	local07, local06, #0
29910     15 2D 0A F2 | 	cmp	local08, local07 wz
29914     38 00 90 5D |  if_ne	jmp	#LR__4304
29918     0C 20 06 F1 | 	add	local02, #12
2991c     10 13 02 FB | 	rdlong	arg01, local02
29920     0C 20 86 F1 | 	sub	local02, #12
29924     1C 1E 06 F1 | 	add	local01, #28
29928     0F 33 02 FB | 	rdlong	local11, local01
2992c     1C 1E 86 F1 | 	sub	local01, #28
29930     19 15 02 F6 | 	mov	arg02, local11
29934     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
29938     00 FA 4D F2 | 	cmps	result1, #0 wz
2993c     12 33 02 56 |  if_ne	mov	local11, local04
29940     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29944     01 32 86 51 |  if_ne	sub	local11, #1
29948     19 2F 02 56 |  if_ne	mov	local09, local11
2994c     04 00 90 5D |  if_ne	jmp	#LR__4305
29950                 | LR__4304
29950     FF 2E 06 F6 | 	mov	local09, #255
29954                 | LR__4305
29954     17 25 02 F6 | 	mov	local04, local09
29958     78 00 90 FD | 	jmp	#LR__4309
2995c                 | LR__4306
2995c     12 2F 02 F6 | 	mov	local09, local04
29960     07 2E 4E F7 | 	zerox	local09, #7 wz
29964     20 00 90 5D |  if_ne	jmp	#LR__4307
29968     11 31 E2 F8 | 	getbyte	local10, local03, #0
2996c     1C 1E 06 F1 | 	add	local01, #28
29970     0F 13 02 FB | 	rdlong	arg01, local01
29974     1C 1E 86 F1 | 	sub	local01, #28
29978     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2997c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29980     FD 30 0A F2 | 	cmp	local10, result1 wz
29984     60 00 90 AD |  if_e	jmp	#LR__4311
29988                 | LR__4307
29988     2B 1E 06 F1 | 	add	local01, #43
2998c     0F 2F C2 FA | 	rdbyte	local09, local01
29990     2B 1E 86 F1 | 	sub	local01, #43
29994     01 2E CE F7 | 	test	local09, #1 wz
29998     24 00 90 5D |  if_ne	jmp	#LR__4308
2999c     1C 1E 06 F1 | 	add	local01, #28
299a0     0F 13 02 FB | 	rdlong	arg01, local01
299a4     04 1E 06 F1 | 	add	local01, #4
299a8     0F 15 02 F6 | 	mov	arg02, local01
299ac     20 1E 86 F1 | 	sub	local01, #32
299b0     0B 16 06 F6 | 	mov	arg03, #11
299b4     88 DA BF FD | 	call	#_fatfs_cc_memcmp
299b8     00 FA 0D F2 | 	cmp	result1, #0 wz
299bc     28 00 90 AD |  if_e	jmp	#LR__4311
299c0                 | LR__4308
299c0     FF 24 06 F6 | 	mov	local04, #255
299c4     2C 1E 06 F1 | 	add	local01, #44
299c8     FF FF FF FF 
299cc     0F FF 6B FC | 	wrlong	##-1, local01
299d0     2C 1E 86 F1 | 	sub	local01, #44
299d4                 | LR__4309
299d4                 | LR__4310
299d4     0F 13 02 F6 | 	mov	arg01, local01
299d8     00 14 06 F6 | 	mov	arg02, #0
299dc     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
299e0     FD 26 0A F6 | 	mov	local05, result1 wz
299e4     04 FE 9F AD |  if_e	jmp	#LR__4300
299e8                 | LR__4311
299e8                 | ' 
299e8                 | ' 	return res;
299e8     13 FB 01 F6 | 	mov	result1, local05
299ec                 | LR__4312
299ec     A7 F0 03 F6 | 	mov	ptra, fp
299f0     B2 00 A0 FD | 	call	#popregs_
299f4                 | _fatfs_cc_dir_find_ret
299f4     2D 00 64 FD | 	ret
299f8                 | 
299f8                 | _fatfs_cc_dir_register
299f8     0A 4A 05 F6 | 	mov	COUNT_, #10
299fc     A8 00 A0 FD | 	call	#pushregs_
29a00     2C F0 07 F1 | 	add	ptra, #44
29a04     04 4E 05 F1 | 	add	fp, #4
29a08     A7 12 62 FC | 	wrlong	arg01, fp
29a0c     09 1F 02 FB | 	rdlong	local01, arg01
29a10     08 4E 05 F1 | 	add	fp, #8
29a14     A7 1E 62 FC | 	wrlong	local01, fp
29a18     08 4E 85 F1 | 	sub	fp, #8
29a1c     A7 20 02 FB | 	rdlong	local02, fp
29a20     04 4E 85 F1 | 	sub	fp, #4
29a24     2B 20 06 F1 | 	add	local02, #43
29a28     10 21 C2 FA | 	rdbyte	local02, local02
29a2c     A0 20 CE F7 | 	test	local02, #160 wz
29a30     06 FA 05 56 |  if_ne	mov	result1, #6
29a34     F8 03 90 5D |  if_ne	jmp	#LR__4335
29a38                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29a38     14 4E 05 F1 | 	add	fp, #20
29a3c     A7 00 68 FC | 	wrlong	#0, fp
29a40     14 4E 85 F1 | 	sub	fp, #20
29a44     97 28 48 FB | 	callpa	#(@LR__4321-@LR__4320)>>2,fcache_load_ptr_
29a48                 | LR__4320
29a48     0C 4E 05 F1 | 	add	fp, #12
29a4c     A7 20 02 FB | 	rdlong	local02, fp
29a50     0C 20 06 F1 | 	add	local02, #12
29a54     10 23 02 FB | 	rdlong	local03, local02
29a58     08 4E 05 F1 | 	add	fp, #8
29a5c     A7 24 02 FB | 	rdlong	local04, fp
29a60     14 4E 85 F1 | 	sub	fp, #20
29a64     01 24 66 F0 | 	shl	local04, #1
29a68     11 25 02 F1 | 	add	local04, local03
29a6c     12 21 EA FA | 	rdword	local02, local04 wz
29a70     24 00 90 AD |  if_e	jmp	#LR__4322
29a74     14 4E 05 F1 | 	add	fp, #20
29a78     A7 26 02 FB | 	rdlong	local05, fp
29a7c     13 29 02 F6 | 	mov	local06, local05
29a80     13 2B 02 F6 | 	mov	local07, local05
29a84     15 2D 02 F6 | 	mov	local08, local07
29a88     01 2C 06 F1 | 	add	local08, #1
29a8c     A7 2C 62 FC | 	wrlong	local08, fp
29a90     14 4E 85 F1 | 	sub	fp, #20
29a94     B0 FF 9F FD | 	jmp	#LR__4320
29a98                 | LR__4321
29a98                 | LR__4322
29a98     1C 4E 05 F1 | 	add	fp, #28
29a9c     A7 12 02 F6 | 	mov	arg01, fp
29aa0     18 4E 85 F1 | 	sub	fp, #24
29aa4     A7 14 02 FB | 	rdlong	arg02, fp
29aa8     04 4E 85 F1 | 	sub	fp, #4
29aac     20 14 06 F1 | 	add	arg02, #32
29ab0     0C 16 06 F6 | 	mov	arg03, #12
29ab4     04 6F BF FD | 	call	#__system____builtin_memmove
29ab8     27 4E 05 F1 | 	add	fp, #39
29abc     A7 2E C2 FA | 	rdbyte	local09, fp
29ac0     27 4E 85 F1 | 	sub	fp, #39
29ac4     01 2E CE F7 | 	test	local09, #1 wz
29ac8     F4 00 90 AD |  if_e	jmp	#LR__4325
29acc     04 4E 05 F1 | 	add	fp, #4
29ad0     A7 30 02 FB | 	rdlong	local10, fp
29ad4     2B 30 06 F1 | 	add	local10, #43
29ad8     18 81 48 FC | 	wrbyte	#64, local10
29adc                 | ' 		dp->fn[ 11 ] =  0x40 ;
29adc                 | ' 		for (n = 1; n < 100; n++) {
29adc     0C 4E 05 F1 | 	add	fp, #12
29ae0     A7 02 68 FC | 	wrlong	#1, fp
29ae4     10 4E 85 F1 | 	sub	fp, #16
29ae8                 | LR__4323
29ae8     10 4E 05 F1 | 	add	fp, #16
29aec     A7 20 02 FB | 	rdlong	local02, fp
29af0     10 4E 85 F1 | 	sub	fp, #16
29af4     64 20 16 F2 | 	cmp	local02, #100 wc
29af8     70 00 90 3D |  if_ae	jmp	#LR__4324
29afc     04 4E 05 F1 | 	add	fp, #4
29b00     A7 12 02 FB | 	rdlong	arg01, fp
29b04     20 12 06 F1 | 	add	arg01, #32
29b08     18 4E 05 F1 | 	add	fp, #24
29b0c     A7 14 02 F6 | 	mov	arg02, fp
29b10     10 4E 85 F1 | 	sub	fp, #16
29b14     A7 30 02 FB | 	rdlong	local10, fp
29b18     0C 30 06 F1 | 	add	local10, #12
29b1c     18 17 02 FB | 	rdlong	arg03, local10
29b20     04 4E 05 F1 | 	add	fp, #4
29b24     A7 18 02 FB | 	rdlong	arg04, fp
29b28     10 4E 85 F1 | 	sub	fp, #16
29b2c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29b30     04 4E 05 F1 | 	add	fp, #4
29b34     A7 12 02 FB | 	rdlong	arg01, fp
29b38     04 4E 85 F1 | 	sub	fp, #4
29b3c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29b40     08 4E 05 F1 | 	add	fp, #8
29b44     A7 FA 61 FC | 	wrlong	result1, fp
29b48     00 FA 4D F2 | 	cmps	result1, #0 wz
29b4c     08 4E 85 F1 | 	sub	fp, #8
29b50     18 00 90 5D |  if_ne	jmp	#LR__4324
29b54     10 4E 05 F1 | 	add	fp, #16
29b58     A7 30 02 FB | 	rdlong	local10, fp
29b5c     01 30 06 F1 | 	add	local10, #1
29b60     A7 30 62 FC | 	wrlong	local10, fp
29b64     10 4E 85 F1 | 	sub	fp, #16
29b68     7C FF 9F FD | 	jmp	#LR__4323
29b6c                 | LR__4324
29b6c     10 4E 05 F1 | 	add	fp, #16
29b70     A7 30 02 FB | 	rdlong	local10, fp
29b74     10 4E 85 F1 | 	sub	fp, #16
29b78     64 30 0E F2 | 	cmp	local10, #100 wz
29b7c     07 FA 05 A6 |  if_e	mov	result1, #7
29b80     AC 02 90 AD |  if_e	jmp	#LR__4335
29b84     08 4E 05 F1 | 	add	fp, #8
29b88     A7 30 02 FB | 	rdlong	local10, fp
29b8c     08 4E 85 F1 | 	sub	fp, #8
29b90     04 30 0E F2 | 	cmp	local10, #4 wz
29b94     08 4E 05 51 |  if_ne	add	fp, #8
29b98     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29b9c     08 4E 85 51 |  if_ne	sub	fp, #8
29ba0     8C 02 90 5D |  if_ne	jmp	#LR__4335
29ba4     04 4E 05 F1 | 	add	fp, #4
29ba8     A7 30 02 FB | 	rdlong	local10, fp
29bac     23 4E 05 F1 | 	add	fp, #35
29bb0     A7 1E C2 FA | 	rdbyte	local01, fp
29bb4     27 4E 85 F1 | 	sub	fp, #39
29bb8     2B 30 06 F1 | 	add	local10, #43
29bbc     18 1F 42 FC | 	wrbyte	local01, local10
29bc0                 | LR__4325
29bc0     27 4E 05 F1 | 	add	fp, #39
29bc4     A7 20 C2 FA | 	rdbyte	local02, fp
29bc8     27 4E 85 F1 | 	sub	fp, #39
29bcc     02 20 CE F7 | 	test	local02, #2 wz
29bd0     20 00 90 AD |  if_e	jmp	#LR__4326
29bd4     14 4E 05 F1 | 	add	fp, #20
29bd8     A7 30 02 FB | 	rdlong	local10, fp
29bdc     0C 30 06 F1 | 	add	local10, #12
29be0     0D 30 16 FD | 	qdiv	local10, #13
29be4     14 4E 85 F1 | 	sub	fp, #20
29be8     18 30 62 FD | 	getqx	local10
29bec     01 30 06 F1 | 	add	local10, #1
29bf0     04 00 90 FD | 	jmp	#LR__4327
29bf4                 | LR__4326
29bf4     01 30 06 F6 | 	mov	local10, #1
29bf8                 | LR__4327
29bf8     18 4E 05 F1 | 	add	fp, #24
29bfc     A7 30 62 FC | 	wrlong	local10, fp
29c00     14 4E 85 F1 | 	sub	fp, #20
29c04     A7 12 02 FB | 	rdlong	arg01, fp
29c08     18 15 02 F6 | 	mov	arg02, local10
29c0c     04 4E 85 F1 | 	sub	fp, #4
29c10     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29c14     08 4E 05 F1 | 	add	fp, #8
29c18     A7 FA 61 FC | 	wrlong	result1, fp
29c1c     08 4E 85 F1 | 	sub	fp, #8
29c20     00 FA 0D F2 | 	cmp	result1, #0 wz
29c24     38 01 90 5D |  if_ne	jmp	#LR__4332
29c28     18 4E 05 F1 | 	add	fp, #24
29c2c     A7 30 02 FB | 	rdlong	local10, fp
29c30     01 30 8E F1 | 	sub	local10, #1 wz
29c34     A7 30 62 FC | 	wrlong	local10, fp
29c38     18 4E 85 F1 | 	sub	fp, #24
29c3c     20 01 90 AD |  if_e	jmp	#LR__4332
29c40     04 4E 05 F1 | 	add	fp, #4
29c44     A7 30 02 FB | 	rdlong	local10, fp
29c48     18 13 02 F6 | 	mov	arg01, local10
29c4c     14 4E 05 F1 | 	add	fp, #20
29c50     A7 18 02 FB | 	rdlong	arg04, fp
29c54     18 4E 85 F1 | 	sub	fp, #24
29c58     05 18 66 F0 | 	shl	arg04, #5
29c5c     10 30 06 F1 | 	add	local10, #16
29c60     18 15 02 FB | 	rdlong	arg02, local10
29c64     0C 15 82 F1 | 	sub	arg02, arg04
29c68     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29c6c     08 4E 05 F1 | 	add	fp, #8
29c70     A7 FA 61 FC | 	wrlong	result1, fp
29c74     08 4E 85 F1 | 	sub	fp, #8
29c78     00 FA 0D F2 | 	cmp	result1, #0 wz
29c7c     E0 00 90 5D |  if_ne	jmp	#LR__4331
29c80     04 4E 05 F1 | 	add	fp, #4
29c84     A7 12 02 FB | 	rdlong	arg01, fp
29c88     04 4E 85 F1 | 	sub	fp, #4
29c8c     20 12 06 F1 | 	add	arg01, #32
29c90     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29c94     FD 30 02 F6 | 	mov	local10, result1
29c98     28 4E 05 F1 | 	add	fp, #40
29c9c     A7 30 42 FC | 	wrbyte	local10, fp
29ca0     28 4E 85 F1 | 	sub	fp, #40
29ca4                 | ' 			sum = sum_sfn(dp->fn);
29ca4                 | ' 			do {
29ca4                 | LR__4328
29ca4     0C 4E 05 F1 | 	add	fp, #12
29ca8     A7 12 02 FB | 	rdlong	arg01, fp
29cac     08 4E 85 F1 | 	sub	fp, #8
29cb0     A7 1E 02 FB | 	rdlong	local01, fp
29cb4     04 4E 85 F1 | 	sub	fp, #4
29cb8     18 1E 06 F1 | 	add	local01, #24
29cbc     0F 15 02 FB | 	rdlong	arg02, local01
29cc0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29cc4     08 4E 05 F1 | 	add	fp, #8
29cc8     A7 FA 61 FC | 	wrlong	result1, fp
29ccc     00 FA 4D F2 | 	cmps	result1, #0 wz
29cd0     08 4E 85 F1 | 	sub	fp, #8
29cd4     88 00 90 5D |  if_ne	jmp	#LR__4330
29cd8     0C 4E 05 F1 | 	add	fp, #12
29cdc     A7 20 02 FB | 	rdlong	local02, fp
29ce0     0C 20 06 F1 | 	add	local02, #12
29ce4     10 13 02 FB | 	rdlong	arg01, local02
29ce8     08 4E 85 F1 | 	sub	fp, #8
29cec     A7 1E 02 FB | 	rdlong	local01, fp
29cf0     1C 1E 06 F1 | 	add	local01, #28
29cf4     0F 15 02 FB | 	rdlong	arg02, local01
29cf8     14 4E 05 F1 | 	add	fp, #20
29cfc     A7 16 02 FB | 	rdlong	arg03, fp
29d00     10 4E 05 F1 | 	add	fp, #16
29d04     A7 18 C2 FA | 	rdbyte	arg04, fp
29d08     28 4E 85 F1 | 	sub	fp, #40
29d0c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29d10     0C 4E 05 F1 | 	add	fp, #12
29d14     A7 30 02 FB | 	rdlong	local10, fp
29d18     03 30 06 F1 | 	add	local10, #3
29d1c     18 03 48 FC | 	wrbyte	#1, local10
29d20     08 4E 85 F1 | 	sub	fp, #8
29d24     A7 12 02 FB | 	rdlong	arg01, fp
29d28     04 4E 85 F1 | 	sub	fp, #4
29d2c     00 14 06 F6 | 	mov	arg02, #0
29d30     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29d34     08 4E 05 F1 | 	add	fp, #8
29d38     A7 FA 61 FC | 	wrlong	result1, fp
29d3c     00 FA 4D F2 | 	cmps	result1, #0 wz
29d40     08 4E 85 F1 | 	sub	fp, #8
29d44     18 00 90 5D |  if_ne	jmp	#LR__4329
29d48     18 4E 05 F1 | 	add	fp, #24
29d4c     A7 30 02 FB | 	rdlong	local10, fp
29d50     01 30 8E F1 | 	sub	local10, #1 wz
29d54     A7 30 62 FC | 	wrlong	local10, fp
29d58     18 4E 85 F1 | 	sub	fp, #24
29d5c     44 FF 9F 5D |  if_ne	jmp	#LR__4328
29d60                 | LR__4329
29d60                 | LR__4330
29d60                 | LR__4331
29d60                 | LR__4332
29d60     08 4E 05 F1 | 	add	fp, #8
29d64     A7 30 0A FB | 	rdlong	local10, fp wz
29d68     08 4E 85 F1 | 	sub	fp, #8
29d6c     B4 00 90 5D |  if_ne	jmp	#LR__4334
29d70     0C 4E 05 F1 | 	add	fp, #12
29d74     A7 12 02 FB | 	rdlong	arg01, fp
29d78     08 4E 85 F1 | 	sub	fp, #8
29d7c     A7 1E 02 FB | 	rdlong	local01, fp
29d80     04 4E 85 F1 | 	sub	fp, #4
29d84     18 1E 06 F1 | 	add	local01, #24
29d88     0F 15 02 FB | 	rdlong	arg02, local01
29d8c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29d90     08 4E 05 F1 | 	add	fp, #8
29d94     A7 FA 61 FC | 	wrlong	result1, fp
29d98     08 4E 85 F1 | 	sub	fp, #8
29d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
29da0     80 00 90 5D |  if_ne	jmp	#LR__4333
29da4     04 4E 05 F1 | 	add	fp, #4
29da8     A7 20 02 FB | 	rdlong	local02, fp
29dac     04 4E 85 F1 | 	sub	fp, #4
29db0     1C 20 06 F1 | 	add	local02, #28
29db4     10 13 02 FB | 	rdlong	arg01, local02
29db8     00 14 06 F6 | 	mov	arg02, #0
29dbc     20 16 06 F6 | 	mov	arg03, #32
29dc0     98 00 A0 FD | 	call	#\builtin_bytefill_
29dc4     04 4E 05 F1 | 	add	fp, #4
29dc8     A7 14 02 FB | 	rdlong	arg02, fp
29dcc     0A 1F 02 F6 | 	mov	local01, arg02
29dd0     1C 1E 06 F1 | 	add	local01, #28
29dd4     0F 13 02 FB | 	rdlong	arg01, local01
29dd8     04 4E 85 F1 | 	sub	fp, #4
29ddc     20 14 06 F1 | 	add	arg02, #32
29de0     0B 16 06 F6 | 	mov	arg03, #11
29de4     D4 6B BF FD | 	call	#__system____builtin_memmove
29de8     04 4E 05 F1 | 	add	fp, #4
29dec     A7 2E 02 FB | 	rdlong	local09, fp
29df0     17 31 02 F6 | 	mov	local10, local09
29df4     1C 30 06 F1 | 	add	local10, #28
29df8     18 1F 02 FB | 	rdlong	local01, local10
29dfc     2B 2E 06 F1 | 	add	local09, #43
29e00     17 31 C2 FA | 	rdbyte	local10, local09
29e04     18 30 06 F5 | 	and	local10, #24
29e08     0C 1E 06 F1 | 	add	local01, #12
29e0c     0F 31 42 FC | 	wrbyte	local10, local01
29e10     08 4E 05 F1 | 	add	fp, #8
29e14     A7 30 02 FB | 	rdlong	local10, fp
29e18     0C 4E 85 F1 | 	sub	fp, #12
29e1c     03 30 06 F1 | 	add	local10, #3
29e20     18 03 48 FC | 	wrbyte	#1, local10
29e24                 | LR__4333
29e24                 | LR__4334
29e24                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29e24                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29e24                 | ' 
29e24                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29e24                 | ' 
29e24                 | ' 			fs->wflag = 1;
29e24                 | ' 		}
29e24                 | ' 	}
29e24                 | ' 
29e24                 | ' 	return res;
29e24     08 4E 05 F1 | 	add	fp, #8
29e28     A7 FA 01 FB | 	rdlong	result1, fp
29e2c     08 4E 85 F1 | 	sub	fp, #8
29e30                 | LR__4335
29e30     A7 F0 03 F6 | 	mov	ptra, fp
29e34     B2 00 A0 FD | 	call	#popregs_
29e38                 | _fatfs_cc_dir_register_ret
29e38     2D 00 64 FD | 	ret
29e3c                 | 
29e3c                 | _fatfs_cc_dir_remove
29e3c     05 4A 05 F6 | 	mov	COUNT_, #5
29e40     A8 00 A0 FD | 	call	#pushregs_
29e44     09 1F 02 F6 | 	mov	local01, arg01
29e48     0F 21 02 FB | 	rdlong	local02, local01
29e4c     10 1E 06 F1 | 	add	local01, #16
29e50     0F 23 02 FB | 	rdlong	local03, local01
29e54     1C 1E 06 F1 | 	add	local01, #28
29e58     0F 15 02 FB | 	rdlong	arg02, local01
29e5c     2C 1E 86 F1 | 	sub	local01, #44
29e60     FF FF 7F FF 
29e64     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29e68     00 24 06 A6 |  if_e	mov	local04, #0
29e6c     18 00 90 AD |  if_e	jmp	#LR__4340
29e70     0F 13 02 F6 | 	mov	arg01, local01
29e74     2C 1E 06 F1 | 	add	local01, #44
29e78     0F 15 02 FB | 	rdlong	arg02, local01
29e7c     2C 1E 86 F1 | 	sub	local01, #44
29e80     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29e84     FD 24 02 F6 | 	mov	local04, result1
29e88                 | LR__4340
29e88     12 27 0A F6 | 	mov	local05, local04 wz
29e8c     64 00 90 5D |  if_ne	jmp	#LR__4343
29e90                 | ' 		do {
29e90                 | LR__4341
29e90     18 1E 06 F1 | 	add	local01, #24
29e94     0F 15 02 FB | 	rdlong	arg02, local01
29e98     18 1E 86 F1 | 	sub	local01, #24
29e9c     10 13 02 F6 | 	mov	arg01, local02
29ea0     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29ea4     FD 26 0A F6 | 	mov	local05, result1 wz
29ea8     40 00 90 5D |  if_ne	jmp	#LR__4342
29eac     1C 1E 06 F1 | 	add	local01, #28
29eb0     0F 25 02 FB | 	rdlong	local04, local01
29eb4     12 CB 49 FC | 	wrbyte	#229, local04
29eb8     03 20 06 F1 | 	add	local02, #3
29ebc     10 03 48 FC | 	wrbyte	#1, local02
29ec0     03 20 86 F1 | 	sub	local02, #3
29ec4     0C 1E 86 F1 | 	sub	local01, #12
29ec8     0F 25 02 FB | 	rdlong	local04, local01
29ecc     10 1E 86 F1 | 	sub	local01, #16
29ed0     11 25 12 F2 | 	cmp	local04, local03 wc
29ed4     14 00 90 3D |  if_ae	jmp	#LR__4342
29ed8     0F 13 02 F6 | 	mov	arg01, local01
29edc     00 14 06 F6 | 	mov	arg02, #0
29ee0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29ee4     FD 26 0A F6 | 	mov	local05, result1 wz
29ee8     A4 FF 9F AD |  if_e	jmp	#LR__4341
29eec                 | LR__4342
29eec     04 26 0E F2 | 	cmp	local05, #4 wz
29ef0     02 26 06 A6 |  if_e	mov	local05, #2
29ef4                 | LR__4343
29ef4                 | ' 	}
29ef4                 | ' #line 2590 "ff.c"
29ef4                 | ' 	return res;
29ef4     13 FB 01 F6 | 	mov	result1, local05
29ef8     A7 F0 03 F6 | 	mov	ptra, fp
29efc     B2 00 A0 FD | 	call	#popregs_
29f00                 | _fatfs_cc_dir_remove_ret
29f00     2D 00 64 FD | 	ret
29f04                 | 
29f04                 | _fatfs_cc_get_fileinfo
29f04     0F 4A 05 F6 | 	mov	COUNT_, #15
29f08     A8 00 A0 FD | 	call	#pushregs_
29f0c     09 1F 02 F6 | 	mov	local01, arg01
29f10     0A 21 02 F6 | 	mov	local02, arg02
29f14     0F 23 02 FB | 	rdlong	local03, local01
29f18     1C 20 06 F1 | 	add	local02, #28
29f1c     10 01 48 FC | 	wrbyte	#0, local02
29f20     1C 20 86 F1 | 	sub	local02, #28
29f24     18 1E 06 F1 | 	add	local01, #24
29f28     0F 25 0A FB | 	rdlong	local04, local01 wz
29f2c     18 1E 86 F1 | 	sub	local01, #24
29f30     90 03 90 AD |  if_e	jmp	#LR__4364
29f34     2C 1E 06 F1 | 	add	local01, #44
29f38     0F 25 02 FB | 	rdlong	local04, local01
29f3c     2C 1E 86 F1 | 	sub	local01, #44
29f40     FF FF 7F FF 
29f44     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29f48     D8 00 90 AD |  if_e	jmp	#LR__4353
29f4c     00 26 06 F6 | 	mov	local05, #0
29f50     00 28 06 F6 | 	mov	local06, #0
29f54     00 2A 06 F6 | 	mov	local07, #0
29f58                 | ' 			si = di = 0;
29f58                 | ' 			hs = 0;
29f58                 | ' 			while (fs->lfnbuf[si] != 0) {
29f58                 | LR__4350
29f58     0C 22 06 F1 | 	add	local03, #12
29f5c     11 25 02 FB | 	rdlong	local04, local03
29f60     0C 22 86 F1 | 	sub	local03, #12
29f64     14 2D 02 F6 | 	mov	local08, local06
29f68     01 2C 66 F0 | 	shl	local08, #1
29f6c     12 2D 02 F1 | 	add	local08, local04
29f70     16 25 EA FA | 	rdword	local04, local08 wz
29f74     90 00 90 AD |  if_e	jmp	#LR__4352
29f78     0C 22 06 F1 | 	add	local03, #12
29f7c     11 2F 02 FB | 	rdlong	local09, local03
29f80     0C 22 86 F1 | 	sub	local03, #12
29f84     14 31 02 F6 | 	mov	local10, local06
29f88     01 30 66 F0 | 	shl	local10, #1
29f8c     17 31 02 F1 | 	add	local10, local09
29f90     18 33 E2 FA | 	rdword	local11, local10
29f94     15 25 02 F6 | 	mov	local04, local07
29f98     0F 24 4E F7 | 	zerox	local04, #15 wz
29f9c     01 28 06 F1 | 	add	local06, #1
29fa0     24 00 90 5D |  if_ne	jmp	#LR__4351
29fa4     19 35 32 F9 | 	getword	local12, local11, #0
29fa8     6C 00 00 FF 
29fac     00 34 16 F2 | 	cmp	local12, ##55296 wc
29fb0     14 00 90 CD |  if_b	jmp	#LR__4351
29fb4     19 37 32 F9 | 	getword	local13, local11, #0
29fb8     70 00 00 FF 
29fbc     00 36 16 F2 | 	cmp	local13, ##57344 wc
29fc0     19 2B 02 C6 |  if_b	mov	local07, local11
29fc4                 | ' 					hs = wc; continue;
29fc4     90 FF 9F CD |  if_b	jmp	#LR__4350
29fc8                 | LR__4351
29fc8     15 13 32 F9 | 	getword	arg01, local07, #0
29fcc     10 12 66 F0 | 	shl	arg01, #16
29fd0     19 33 32 F9 | 	getword	local11, local11, #0
29fd4     19 13 42 F5 | 	or	arg01, local11
29fd8     13 15 02 F6 | 	mov	arg02, local05
29fdc     1C 20 06 F1 | 	add	local02, #28
29fe0     10 15 02 F1 | 	add	arg02, local02
29fe4     FF 16 06 F6 | 	mov	arg03, #255
29fe8     13 17 82 F1 | 	sub	arg03, local05
29fec     1C 20 86 F1 | 	sub	local02, #28
29ff0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29ff4     FD 38 0A F6 | 	mov	local14, result1 wz
29ff8     00 26 06 A6 |  if_e	mov	local05, #0
29ffc     1C 27 02 51 |  if_ne	add	local05, local14
2a000     00 2A 06 56 |  if_ne	mov	local07, #0
2a004     50 FF 9F 5D |  if_ne	jmp	#LR__4350
2a008                 | LR__4352
2a008     15 25 02 F6 | 	mov	local04, local07
2a00c     0F 24 4E F7 | 	zerox	local04, #15 wz
2a010     00 26 06 56 |  if_ne	mov	local05, #0
2a014     1C 20 06 F1 | 	add	local02, #28
2a018     10 27 02 F1 | 	add	local05, local02
2a01c     13 01 48 FC | 	wrbyte	#0, local05
2a020     1C 20 86 F1 | 	sub	local02, #28
2a024                 | LR__4353
2a024     00 26 06 F6 | 	mov	local05, #0
2a028     00 28 06 F6 | 	mov	local06, #0
2a02c                 | ' 			fno->fname[di] = 0;
2a02c                 | ' 		}
2a02c                 | ' 	}
2a02c                 | ' 
2a02c                 | ' 	si = di = 0;
2a02c                 | ' 	while (si < 11) {
2a02c                 | LR__4354
2a02c     0B 28 16 F2 | 	cmp	local06, #11 wc
2a030     20 01 90 3D |  if_ae	jmp	#LR__4357
2a034     1C 1E 06 F1 | 	add	local01, #28
2a038     0F 2F 02 FB | 	rdlong	local09, local01
2a03c     1C 1E 86 F1 | 	sub	local01, #28
2a040     14 31 02 F6 | 	mov	local10, local06
2a044     17 31 02 F1 | 	add	local10, local09
2a048     18 33 C2 FA | 	rdbyte	local11, local10
2a04c     19 25 32 F9 | 	getword	local04, local11, #0
2a050     20 24 0E F2 | 	cmp	local04, #32 wz
2a054     01 28 06 F1 | 	add	local06, #1
2a058     D0 FF 9F AD |  if_e	jmp	#LR__4354
2a05c     19 25 32 F9 | 	getword	local04, local11, #0
2a060     05 24 0E F2 | 	cmp	local04, #5 wz
2a064     E5 32 06 A6 |  if_e	mov	local11, #229
2a068     09 28 0E F2 | 	cmp	local06, #9 wz
2a06c     20 00 90 5D |  if_ne	jmp	#LR__4355
2a070     0C 26 16 F2 | 	cmp	local05, #12 wc
2a074     18 00 90 3D |  if_ae	jmp	#LR__4355
2a078     13 37 02 F6 | 	mov	local13, local05
2a07c     0C 20 06 F1 | 	add	local02, #12
2a080     10 37 02 F1 | 	add	local13, local02
2a084     1B 5D 48 FC | 	wrbyte	#46, local13
2a088     01 26 06 F1 | 	add	local05, #1
2a08c     0C 20 86 F1 | 	sub	local02, #12
2a090                 | LR__4355
2a090     19 13 32 F9 | 	getword	arg01, local11, #0
2a094     07 12 4E F7 | 	zerox	arg01, #7 wz
2a098     00 FA 05 56 |  if_ne	mov	result1, #0
2a09c                 | ' 
2a09c                 | ' 	return 0;
2a09c     00 FA 05 A6 |  if_e	mov	result1, #0
2a0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0a4     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2a0a8     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2a0ac     50 00 90 AD |  if_e	jmp	#LR__4356
2a0b0     1C 1E 06 F1 | 	add	local01, #28
2a0b4     0F 31 02 FB | 	rdlong	local10, local01
2a0b8     1C 1E 86 F1 | 	sub	local01, #28
2a0bc     14 2D 02 F6 | 	mov	local08, local06
2a0c0     18 2D 02 F1 | 	add	local08, local10
2a0c4     16 13 CA FA | 	rdbyte	arg01, local08 wz
2a0c8     00 FA 05 56 |  if_ne	mov	result1, #0
2a0cc                 | ' 
2a0cc                 | ' 	return 0;
2a0cc     00 FA 05 A6 |  if_e	mov	result1, #0
2a0d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0d4     28 00 90 AD |  if_e	jmp	#LR__4356
2a0d8     19 33 32 F9 | 	getword	local11, local11, #0
2a0dc     08 32 66 F0 | 	shl	local11, #8
2a0e0     1C 1E 06 F1 | 	add	local01, #28
2a0e4     0F 39 02 FB | 	rdlong	local14, local01
2a0e8     1C 1E 86 F1 | 	sub	local01, #28
2a0ec     14 2F 02 F6 | 	mov	local09, local06
2a0f0     1C 2F 02 F1 | 	add	local09, local14
2a0f4     17 35 C2 FA | 	rdbyte	local12, local09
2a0f8     1A 33 42 F5 | 	or	local11, local12
2a0fc     01 28 06 F1 | 	add	local06, #1
2a100                 | LR__4356
2a100     19 13 02 F6 | 	mov	arg01, local11
2a104     01 00 00 FF 
2a108     52 15 06 F6 | 	mov	arg02, ##850
2a10c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2a110     FD 32 02 F6 | 	mov	local11, result1
2a114     19 25 02 F6 | 	mov	local04, local11
2a118     0F 24 4E F7 | 	zerox	local04, #15 wz
2a11c     00 26 06 A6 |  if_e	mov	local05, #0
2a120     30 00 90 AD |  if_e	jmp	#LR__4357
2a124     19 13 32 F9 | 	getword	arg01, local11, #0
2a128     13 15 02 F6 | 	mov	arg02, local05
2a12c     0C 20 06 F1 | 	add	local02, #12
2a130     10 15 02 F1 | 	add	arg02, local02
2a134     0C 16 06 F6 | 	mov	arg03, #12
2a138     13 17 82 F1 | 	sub	arg03, local05
2a13c     0C 20 86 F1 | 	sub	local02, #12
2a140     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a144     FD 38 0A F6 | 	mov	local14, result1 wz
2a148     00 26 06 A6 |  if_e	mov	local05, #0
2a14c     1C 27 02 51 |  if_ne	add	local05, local14
2a150     D8 FE 9F 5D |  if_ne	jmp	#LR__4354
2a154                 | LR__4357
2a154     13 25 02 F6 | 	mov	local04, local05
2a158     0C 20 06 F1 | 	add	local02, #12
2a15c     10 25 02 F1 | 	add	local04, local02
2a160     12 01 48 FC | 	wrbyte	#0, local04
2a164     10 20 06 F1 | 	add	local02, #16
2a168     10 25 CA FA | 	rdbyte	local04, local02 wz
2a16c     1C 20 86 F1 | 	sub	local02, #28
2a170     F8 00 90 5D |  if_ne	jmp	#LR__4363
2a174     00 26 0E F2 | 	cmp	local05, #0 wz
2a178     1C 00 90 5D |  if_ne	jmp	#LR__4358
2a17c     13 37 02 F6 | 	mov	local13, local05
2a180     1C 20 06 F1 | 	add	local02, #28
2a184     10 37 02 F1 | 	add	local13, local02
2a188     1B 7F 48 FC | 	wrbyte	#63, local13
2a18c     01 26 06 F1 | 	add	local05, #1
2a190     1C 20 86 F1 | 	sub	local02, #28
2a194     A4 00 90 FD | 	jmp	#LR__4362
2a198                 | LR__4358
2a198                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a198     00 26 06 F6 | 	mov	local05, #0
2a19c     00 28 06 F6 | 	mov	local06, #0
2a1a0     08 3A 06 F6 | 	mov	local15, #8
2a1a4                 | LR__4359
2a1a4     14 25 02 F6 | 	mov	local04, local06
2a1a8     0C 20 06 F1 | 	add	local02, #12
2a1ac     10 25 02 F1 | 	add	local04, local02
2a1b0     12 37 CA FA | 	rdbyte	local13, local04 wz
2a1b4     0C 20 86 F1 | 	sub	local02, #12
2a1b8     80 00 90 AD |  if_e	jmp	#LR__4361
2a1bc     14 2D 02 F6 | 	mov	local08, local06
2a1c0     0C 20 06 F1 | 	add	local02, #12
2a1c4     10 2D 02 F1 | 	add	local08, local02
2a1c8     16 33 C2 FA | 	rdbyte	local11, local08
2a1cc     19 39 32 F9 | 	getword	local14, local11, #0
2a1d0     2E 38 0E F2 | 	cmp	local14, #46 wz
2a1d4     0C 20 86 F1 | 	sub	local02, #12
2a1d8     10 3A 06 A6 |  if_e	mov	local15, #16
2a1dc     19 39 32 F9 | 	getword	local14, local11, #0
2a1e0     41 38 16 F2 | 	cmp	local14, #65 wc
2a1e4     30 00 90 CD |  if_b	jmp	#LR__4360
2a1e8     19 2D 32 F9 | 	getword	local08, local11, #0
2a1ec     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a1f0     24 00 90 3D |  if_ae	jmp	#LR__4360
2a1f4     1C 1E 06 F1 | 	add	local01, #28
2a1f8     0F 2F 02 FB | 	rdlong	local09, local01
2a1fc     1C 1E 86 F1 | 	sub	local01, #28
2a200     0C 2E 06 F1 | 	add	local09, #12
2a204     17 31 C2 FA | 	rdbyte	local10, local09
2a208     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a20c     1C 31 CA F7 | 	test	local10, local14 wz
2a210     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a214     20 32 06 51 |  if_ne	add	local11, #32
2a218                 | LR__4360
2a218     13 39 02 F6 | 	mov	local14, local05
2a21c     1C 20 06 F1 | 	add	local02, #28
2a220     10 39 02 F1 | 	add	local14, local02
2a224     19 33 32 F9 | 	getword	local11, local11, #0
2a228     1C 33 42 FC | 	wrbyte	local11, local14
2a22c     01 28 06 F1 | 	add	local06, #1
2a230     01 26 06 F1 | 	add	local05, #1
2a234     1C 20 86 F1 | 	sub	local02, #28
2a238     68 FF 9F FD | 	jmp	#LR__4359
2a23c                 | LR__4361
2a23c                 | LR__4362
2a23c     1C 20 06 F1 | 	add	local02, #28
2a240     10 27 02 F1 | 	add	local05, local02
2a244     13 01 48 FC | 	wrbyte	#0, local05
2a248     1C 1E 06 F1 | 	add	local01, #28
2a24c     0F 25 02 FB | 	rdlong	local04, local01
2a250     1C 1E 86 F1 | 	sub	local01, #28
2a254     0C 24 06 F1 | 	add	local04, #12
2a258     12 37 CA FA | 	rdbyte	local13, local04 wz
2a25c     1C 20 86 F1 | 	sub	local02, #28
2a260     0C 20 06 A1 |  if_e	add	local02, #12
2a264     10 01 48 AC |  if_e	wrbyte	#0, local02
2a268     0C 20 86 A1 |  if_e	sub	local02, #12
2a26c                 | LR__4363
2a26c     1C 1E 06 F1 | 	add	local01, #28
2a270     0F 35 02 FB | 	rdlong	local12, local01
2a274     0B 34 06 F1 | 	add	local12, #11
2a278     1A 25 C2 FA | 	rdbyte	local04, local12
2a27c     3F 24 06 F5 | 	and	local04, #63
2a280     08 20 06 F1 | 	add	local02, #8
2a284     10 25 42 FC | 	wrbyte	local04, local02
2a288     08 20 86 F1 | 	sub	local02, #8
2a28c     0F 13 02 FB | 	rdlong	arg01, local01
2a290     1C 12 06 F1 | 	add	arg01, #28
2a294                 | ' {
2a294                 | ' 
2a294                 | ' 	return *((DWORD*)ptr);
2a294     09 FB 01 FB | 	rdlong	result1, arg01
2a298     10 FB 61 FC | 	wrlong	result1, local02
2a29c     0F 13 02 FB | 	rdlong	arg01, local01
2a2a0     16 12 06 F1 | 	add	arg01, #22
2a2a4                 | ' {
2a2a4                 | ' 
2a2a4                 | ' 	return *((WORD*)ptr);
2a2a4     09 FB E1 FA | 	rdword	result1, arg01
2a2a8     06 20 06 F1 | 	add	local02, #6
2a2ac     10 FB 51 FC | 	wrword	result1, local02
2a2b0     0F 13 02 FB | 	rdlong	arg01, local01
2a2b4     18 12 06 F1 | 	add	arg01, #24
2a2b8                 | ' {
2a2b8                 | ' 
2a2b8                 | ' 	return *((WORD*)ptr);
2a2b8     09 FB E1 FA | 	rdword	result1, arg01
2a2bc     02 20 86 F1 | 	sub	local02, #2
2a2c0     10 FB 51 FC | 	wrword	result1, local02
2a2c4                 | LR__4364
2a2c4     A7 F0 03 F6 | 	mov	ptra, fp
2a2c8     B2 00 A0 FD | 	call	#popregs_
2a2cc                 | _fatfs_cc_get_fileinfo_ret
2a2cc     2D 00 64 FD | 	ret
2a2d0                 | 
2a2d0                 | _fatfs_cc_create_name
2a2d0     0D 4A 05 F6 | 	mov	COUNT_, #13
2a2d4     A8 00 A0 FD | 	call	#pushregs_
2a2d8     34 F0 07 F1 | 	add	ptra, #52
2a2dc     04 4E 05 F1 | 	add	fp, #4
2a2e0     A7 12 62 FC | 	wrlong	arg01, fp
2a2e4     04 4E 05 F1 | 	add	fp, #4
2a2e8     A7 14 62 FC | 	wrlong	arg02, fp
2a2ec     0A FB 01 FB | 	rdlong	result1, arg02
2a2f0     28 4E 05 F1 | 	add	fp, #40
2a2f4     A7 FA 61 FC | 	wrlong	result1, fp
2a2f8     2C 4E 85 F1 | 	sub	fp, #44
2a2fc     A7 FA 01 FB | 	rdlong	result1, fp
2a300     FD 1E 02 FB | 	rdlong	local01, result1
2a304     0C 1E 06 F1 | 	add	local01, #12
2a308     0F 21 02 FB | 	rdlong	local02, local01
2a30c     14 4E 05 F1 | 	add	fp, #20
2a310     A7 20 62 FC | 	wrlong	local02, fp
2a314     14 4E 05 F1 | 	add	fp, #20
2a318     A7 00 68 FC | 	wrlong	#0, fp
2a31c     2C 4E 85 F1 | 	sub	fp, #44
2a320                 | ' 
2a320                 | ' 
2a320                 | ' 
2a320                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a320                 | ' 	for (;;) {
2a320                 | LR__4370
2a320     30 4E 05 F1 | 	add	fp, #48
2a324     A7 12 02 F6 | 	mov	arg01, fp
2a328     30 4E 85 F1 | 	sub	fp, #48
2a32c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a330     1C 4E 05 F1 | 	add	fp, #28
2a334     A7 FA 61 FC | 	wrlong	result1, fp
2a338     1C 4E 85 F1 | 	sub	fp, #28
2a33c     FF FF 7F FF 
2a340     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a344     06 FA 05 A6 |  if_e	mov	result1, #6
2a348     74 08 90 AD |  if_e	jmp	#LR__4410
2a34c     1C 4E 05 F1 | 	add	fp, #28
2a350     A7 1E 02 FB | 	rdlong	local01, fp
2a354     1C 4E 85 F1 | 	sub	fp, #28
2a358     80 00 00 FF 
2a35c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a360     3C 00 90 CD |  if_b	jmp	#LR__4371
2a364     18 4E 05 F1 | 	add	fp, #24
2a368     A7 22 02 FB | 	rdlong	local03, fp
2a36c     14 4E 05 F1 | 	add	fp, #20
2a370     A7 1E 02 FB | 	rdlong	local01, fp
2a374     0F 25 02 F6 | 	mov	local04, local01
2a378     01 24 06 F1 | 	add	local04, #1
2a37c     A7 24 62 FC | 	wrlong	local04, fp
2a380     01 1E 66 F0 | 	shl	local01, #1
2a384     11 1F 02 F1 | 	add	local01, local03
2a388     10 4E 85 F1 | 	sub	fp, #16
2a38c     A7 26 02 FB | 	rdlong	local05, fp
2a390     1C 4E 85 F1 | 	sub	fp, #28
2a394     13 29 02 F6 | 	mov	local06, local05
2a398     10 28 46 F0 | 	shr	local06, #16
2a39c     0F 29 52 FC | 	wrword	local06, local01
2a3a0                 | LR__4371
2a3a0     1C 4E 05 F1 | 	add	fp, #28
2a3a4     A7 1E 02 FB | 	rdlong	local01, fp
2a3a8     08 4E 85 F1 | 	sub	fp, #8
2a3ac     A7 1E 52 FC | 	wrword	local01, fp
2a3b0     A7 1E E2 FA | 	rdword	local01, fp
2a3b4     14 4E 85 F1 | 	sub	fp, #20
2a3b8     20 1E 16 F2 | 	cmp	local01, #32 wc
2a3bc     B0 00 90 CD |  if_b	jmp	#LR__4373
2a3c0     14 4E 05 F1 | 	add	fp, #20
2a3c4     A7 1E E2 FA | 	rdword	local01, fp
2a3c8     14 4E 85 F1 | 	sub	fp, #20
2a3cc     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a3d0     14 4E 05 51 |  if_ne	add	fp, #20
2a3d4     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a3d8     14 4E 85 51 |  if_ne	sub	fp, #20
2a3dc     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a3e0     8C 00 90 AD |  if_e	jmp	#LR__4373
2a3e4     14 4E 05 F1 | 	add	fp, #20
2a3e8     A7 12 E2 FA | 	rdword	arg01, fp
2a3ec     14 4E 85 F1 | 	sub	fp, #20
2a3f0     80 12 16 F2 | 	cmp	arg01, #128 wc
2a3f4     24 00 90 3D |  if_ae	jmp	#LR__4372
2a3f8     81 01 00 FF 
2a3fc     34 13 06 F6 | 	mov	arg01, ##@LR__5032
2a400     14 4E 05 F1 | 	add	fp, #20
2a404     A7 14 E2 FA | 	rdword	arg02, fp
2a408     14 4E 85 F1 | 	sub	fp, #20
2a40c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a410     00 FA 0D F2 | 	cmp	result1, #0 wz
2a414     06 FA 05 56 |  if_ne	mov	result1, #6
2a418     A4 07 90 5D |  if_ne	jmp	#LR__4410
2a41c                 | LR__4372
2a41c     2C 4E 05 F1 | 	add	fp, #44
2a420     A7 28 02 FB | 	rdlong	local06, fp
2a424     2C 4E 85 F1 | 	sub	fp, #44
2a428     FF 28 16 F2 | 	cmp	local06, #255 wc
2a42c     06 FA 05 36 |  if_ae	mov	result1, #6
2a430     8C 07 90 3D |  if_ae	jmp	#LR__4410
2a434     18 4E 05 F1 | 	add	fp, #24
2a438     A7 22 02 FB | 	rdlong	local03, fp
2a43c     14 4E 05 F1 | 	add	fp, #20
2a440     A7 20 02 FB | 	rdlong	local02, fp
2a444     10 25 02 F6 | 	mov	local04, local02
2a448     01 24 06 F1 | 	add	local04, #1
2a44c     A7 24 62 FC | 	wrlong	local04, fp
2a450     10 1F 02 F6 | 	mov	local01, local02
2a454     01 1E 66 F0 | 	shl	local01, #1
2a458     11 1F 02 F1 | 	add	local01, local03
2a45c     18 4E 85 F1 | 	sub	fp, #24
2a460     A7 28 E2 FA | 	rdword	local06, fp
2a464     14 4E 85 F1 | 	sub	fp, #20
2a468     0F 29 52 FC | 	wrword	local06, local01
2a46c     B0 FE 9F FD | 	jmp	#LR__4370
2a470                 | LR__4373
2a470     14 4E 05 F1 | 	add	fp, #20
2a474     A7 2A E2 FA | 	rdword	local07, fp
2a478     14 4E 85 F1 | 	sub	fp, #20
2a47c     20 2A 16 F2 | 	cmp	local07, #32 wc
2a480     10 4E 05 C1 |  if_b	add	fp, #16
2a484     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a488     10 4E 85 C1 |  if_b	sub	fp, #16
2a48c     74 00 90 CD |  if_b	jmp	#LR__4378
2a490     97 24 48 FB | 	callpa	#(@LR__4376-@LR__4374)>>2,fcache_load_ptr_
2a494                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a494                 | LR__4374
2a494     30 4E 05 F1 | 	add	fp, #48
2a498     A7 24 02 FB | 	rdlong	local04, fp
2a49c     30 4E 85 F1 | 	sub	fp, #48
2a4a0     12 2B C2 FA | 	rdbyte	local07, local04
2a4a4     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a4a8     18 00 90 AD |  if_e	jmp	#LR__4375
2a4ac     30 4E 05 F1 | 	add	fp, #48
2a4b0     A7 24 02 FB | 	rdlong	local04, fp
2a4b4     30 4E 85 F1 | 	sub	fp, #48
2a4b8     12 21 C2 FA | 	rdbyte	local02, local04
2a4bc     5C 20 0E F2 | 	cmp	local02, #92 wz
2a4c0     18 00 90 5D |  if_ne	jmp	#LR__4377
2a4c4                 | LR__4375
2a4c4     30 4E 05 F1 | 	add	fp, #48
2a4c8     A7 1E 02 FB | 	rdlong	local01, fp
2a4cc     01 1E 06 F1 | 	add	local01, #1
2a4d0     A7 1E 62 FC | 	wrlong	local01, fp
2a4d4     30 4E 85 F1 | 	sub	fp, #48
2a4d8     B8 FF 9F FD | 	jmp	#LR__4374
2a4dc                 | LR__4376
2a4dc                 | LR__4377
2a4dc     10 4E 05 F1 | 	add	fp, #16
2a4e0     A7 00 48 FC | 	wrbyte	#0, fp
2a4e4     20 4E 05 F1 | 	add	fp, #32
2a4e8     A7 28 02 FB | 	rdlong	local06, fp
2a4ec     30 4E 85 F1 | 	sub	fp, #48
2a4f0     14 2B C2 FA | 	rdbyte	local07, local06
2a4f4     20 2A 16 F2 | 	cmp	local07, #32 wc
2a4f8     10 4E 05 C1 |  if_b	add	fp, #16
2a4fc     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a500     10 4E 85 C1 |  if_b	sub	fp, #16
2a504                 | LR__4378
2a504     08 4E 05 F1 | 	add	fp, #8
2a508     A7 2A 02 FB | 	rdlong	local07, fp
2a50c     28 4E 05 F1 | 	add	fp, #40
2a510     A7 1E 02 FB | 	rdlong	local01, fp
2a514     30 4E 85 F1 | 	sub	fp, #48
2a518     15 1F 62 FC | 	wrlong	local01, local07
2a51c     97 38 48 FB | 	callpa	#(@LR__4380-@LR__4379)>>2,fcache_load_ptr_
2a520                 | ' 	}
2a520                 | ' 	*path = p;
2a520                 | ' #line 2862 "ff.c"
2a520                 | ' 	while (di) {
2a520                 | LR__4379
2a520     2C 4E 05 F1 | 	add	fp, #44
2a524     A7 2A 0A FB | 	rdlong	local07, fp wz
2a528     2C 4E 85 F1 | 	sub	fp, #44
2a52c     60 00 90 AD |  if_e	jmp	#LR__4381
2a530     18 4E 05 F1 | 	add	fp, #24
2a534     A7 28 02 FB | 	rdlong	local06, fp
2a538     14 4E 05 F1 | 	add	fp, #20
2a53c     A7 24 02 FB | 	rdlong	local04, fp
2a540     01 24 86 F1 | 	sub	local04, #1
2a544     01 24 66 F0 | 	shl	local04, #1
2a548     14 25 02 F1 | 	add	local04, local06
2a54c     12 29 E2 FA | 	rdword	local06, local04
2a550     18 4E 85 F1 | 	sub	fp, #24
2a554     A7 28 52 FC | 	wrword	local06, fp
2a558     A7 2A E2 FA | 	rdword	local07, fp
2a55c     14 4E 85 F1 | 	sub	fp, #20
2a560     20 2A 0E F2 | 	cmp	local07, #32 wz
2a564     14 4E 05 51 |  if_ne	add	fp, #20
2a568     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a56c     14 4E 85 51 |  if_ne	sub	fp, #20
2a570     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a574     18 00 90 5D |  if_ne	jmp	#LR__4381
2a578     2C 4E 05 F1 | 	add	fp, #44
2a57c     A7 1E 02 FB | 	rdlong	local01, fp
2a580     01 1E 86 F1 | 	sub	local01, #1
2a584     A7 1E 62 FC | 	wrlong	local01, fp
2a588     2C 4E 85 F1 | 	sub	fp, #44
2a58c     90 FF 9F FD | 	jmp	#LR__4379
2a590                 | LR__4380
2a590                 | LR__4381
2a590     18 4E 05 F1 | 	add	fp, #24
2a594     A7 2C 02 FB | 	rdlong	local08, fp
2a598     14 4E 05 F1 | 	add	fp, #20
2a59c     A7 24 02 FB | 	rdlong	local04, fp
2a5a0     01 24 66 F0 | 	shl	local04, #1
2a5a4     16 25 02 F1 | 	add	local04, local08
2a5a8     12 01 58 FC | 	wrword	#0, local04
2a5ac     A7 2A 0A FB | 	rdlong	local07, fp wz
2a5b0     2C 4E 85 F1 | 	sub	fp, #44
2a5b4     06 FA 05 A6 |  if_e	mov	result1, #6
2a5b8     04 06 90 AD |  if_e	jmp	#LR__4410
2a5bc                 | ' 
2a5bc                 | ' 
2a5bc                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a5bc     28 4E 05 F1 | 	add	fp, #40
2a5c0     A7 00 68 FC | 	wrlong	#0, fp
2a5c4     28 4E 85 F1 | 	sub	fp, #40
2a5c8     97 22 48 FB | 	callpa	#(@LR__4383-@LR__4382)>>2,fcache_load_ptr_
2a5cc                 | LR__4382
2a5cc     18 4E 05 F1 | 	add	fp, #24
2a5d0     A7 2E 02 FB | 	rdlong	local09, fp
2a5d4     10 4E 05 F1 | 	add	fp, #16
2a5d8     A7 30 02 FB | 	rdlong	local10, fp
2a5dc     28 4E 85 F1 | 	sub	fp, #40
2a5e0     01 30 66 F0 | 	shl	local10, #1
2a5e4     17 31 02 F1 | 	add	local10, local09
2a5e8     18 33 E2 FA | 	rdword	local11, local10
2a5ec     20 32 0E F2 | 	cmp	local11, #32 wz
2a5f0     1C 00 90 5D |  if_ne	jmp	#LR__4384
2a5f4     28 4E 05 F1 | 	add	fp, #40
2a5f8     A7 34 02 FB | 	rdlong	local12, fp
2a5fc     1A 27 02 F6 | 	mov	local05, local12
2a600     01 26 06 F1 | 	add	local05, #1
2a604     A7 26 62 FC | 	wrlong	local05, fp
2a608     28 4E 85 F1 | 	sub	fp, #40
2a60c     BC FF 9F FD | 	jmp	#LR__4382
2a610                 | LR__4383
2a610                 | LR__4384
2a610     28 4E 05 F1 | 	add	fp, #40
2a614     A7 2A 02 FB | 	rdlong	local07, fp
2a618     28 4E 85 F1 | 	sub	fp, #40
2a61c     01 2A 16 F2 | 	cmp	local07, #1 wc
2a620     28 00 90 3D |  if_ae	jmp	#LR__4385
2a624     18 4E 05 F1 | 	add	fp, #24
2a628     A7 22 02 FB | 	rdlong	local03, fp
2a62c     10 4E 05 F1 | 	add	fp, #16
2a630     A7 2E 02 FB | 	rdlong	local09, fp
2a634     28 4E 85 F1 | 	sub	fp, #40
2a638     01 2E 66 F0 | 	shl	local09, #1
2a63c     11 2F 02 F1 | 	add	local09, local03
2a640     17 1F E2 FA | 	rdword	local01, local09
2a644     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a648     14 00 90 5D |  if_ne	jmp	#LR__4386
2a64c                 | LR__4385
2a64c     10 4E 05 F1 | 	add	fp, #16
2a650     A7 2A C2 FA | 	rdbyte	local07, fp
2a654     03 2A 46 F5 | 	or	local07, #3
2a658     A7 2A 42 FC | 	wrbyte	local07, fp
2a65c     10 4E 85 F1 | 	sub	fp, #16
2a660                 | LR__4386
2a660     97 2C 48 FB | 	callpa	#(@LR__4388-@LR__4387)>>2,fcache_load_ptr_
2a664                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a664                 | LR__4387
2a664     2C 4E 05 F1 | 	add	fp, #44
2a668     A7 2A 02 FB | 	rdlong	local07, fp
2a66c     2C 4E 85 F1 | 	sub	fp, #44
2a670     01 2A 16 F2 | 	cmp	local07, #1 wc
2a674     44 00 90 CD |  if_b	jmp	#LR__4389
2a678     18 4E 05 F1 | 	add	fp, #24
2a67c     A7 28 02 FB | 	rdlong	local06, fp
2a680     14 4E 05 F1 | 	add	fp, #20
2a684     A7 22 02 FB | 	rdlong	local03, fp
2a688     2C 4E 85 F1 | 	sub	fp, #44
2a68c     01 22 86 F1 | 	sub	local03, #1
2a690     01 22 66 F0 | 	shl	local03, #1
2a694     14 23 02 F1 | 	add	local03, local06
2a698     11 1F E2 FA | 	rdword	local01, local03
2a69c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a6a0     18 00 90 AD |  if_e	jmp	#LR__4389
2a6a4     2C 4E 05 F1 | 	add	fp, #44
2a6a8     A7 1E 02 FB | 	rdlong	local01, fp
2a6ac     01 1E 86 F1 | 	sub	local01, #1
2a6b0     A7 1E 62 FC | 	wrlong	local01, fp
2a6b4     2C 4E 85 F1 | 	sub	fp, #44
2a6b8     A8 FF 9F FD | 	jmp	#LR__4387
2a6bc                 | LR__4388
2a6bc                 | LR__4389
2a6bc     04 4E 05 F1 | 	add	fp, #4
2a6c0     A7 12 02 FB | 	rdlong	arg01, fp
2a6c4     04 4E 85 F1 | 	sub	fp, #4
2a6c8     20 12 06 F1 | 	add	arg01, #32
2a6cc     20 14 06 F6 | 	mov	arg02, #32
2a6d0     0B 16 06 F6 | 	mov	arg03, #11
2a6d4     09 37 02 F6 | 	mov	local13, arg01
2a6d8     98 00 A0 FD | 	call	#\builtin_bytefill_
2a6dc     1B FB 01 F6 | 	mov	result1, local13
2a6e0     0C 4E 05 F1 | 	add	fp, #12
2a6e4     A7 00 48 FC | 	wrbyte	#0, fp
2a6e8     A7 2A C2 FA | 	rdbyte	local07, fp
2a6ec     14 4E 05 F1 | 	add	fp, #20
2a6f0     A7 2A 62 FC | 	wrlong	local07, fp
2a6f4     04 4E 05 F1 | 	add	fp, #4
2a6f8     A7 10 68 FC | 	wrlong	#8, fp
2a6fc     24 4E 85 F1 | 	sub	fp, #36
2a700                 | ' 
2a700                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a700                 | ' 	i = b = 0; ni = 8;
2a700                 | ' 	for (;;) {
2a700                 | LR__4390
2a700     18 4E 05 F1 | 	add	fp, #24
2a704     A7 22 02 FB | 	rdlong	local03, fp
2a708     10 4E 05 F1 | 	add	fp, #16
2a70c     A7 2E 02 FB | 	rdlong	local09, fp
2a710     17 25 02 F6 | 	mov	local04, local09
2a714     01 24 06 F1 | 	add	local04, #1
2a718     A7 24 62 FC | 	wrlong	local04, fp
2a71c     01 2E 66 F0 | 	shl	local09, #1
2a720     11 2F 02 F1 | 	add	local09, local03
2a724     17 29 E2 FA | 	rdword	local06, local09
2a728     14 4E 85 F1 | 	sub	fp, #20
2a72c     A7 28 52 FC | 	wrword	local06, fp
2a730     A7 2A EA FA | 	rdword	local07, fp wz
2a734     14 4E 85 F1 | 	sub	fp, #20
2a738     74 03 90 AD |  if_e	jmp	#LR__4406
2a73c     14 4E 05 F1 | 	add	fp, #20
2a740     A7 2A E2 FA | 	rdword	local07, fp
2a744     14 4E 85 F1 | 	sub	fp, #20
2a748     20 2A 0E F2 | 	cmp	local07, #32 wz
2a74c     30 00 90 AD |  if_e	jmp	#LR__4391
2a750     14 4E 05 F1 | 	add	fp, #20
2a754     A7 1E E2 FA | 	rdword	local01, fp
2a758     14 4E 85 F1 | 	sub	fp, #20
2a75c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a760     34 00 90 5D |  if_ne	jmp	#LR__4392
2a764     28 4E 05 F1 | 	add	fp, #40
2a768     A7 24 02 FB | 	rdlong	local04, fp
2a76c     04 4E 05 F1 | 	add	fp, #4
2a770     A7 30 02 FB | 	rdlong	local10, fp
2a774     2C 4E 85 F1 | 	sub	fp, #44
2a778     18 25 0A F2 | 	cmp	local04, local10 wz
2a77c     18 00 90 AD |  if_e	jmp	#LR__4392
2a780                 | LR__4391
2a780     10 4E 05 F1 | 	add	fp, #16
2a784     A7 2A C2 FA | 	rdbyte	local07, fp
2a788     03 2A 46 F5 | 	or	local07, #3
2a78c     A7 2A 42 FC | 	wrbyte	local07, fp
2a790     10 4E 85 F1 | 	sub	fp, #16
2a794                 | ' 			cf |=  0x01  |  0x02 ;
2a794                 | ' 			continue;
2a794     68 FF 9F FD | 	jmp	#LR__4390
2a798                 | LR__4392
2a798     20 4E 05 F1 | 	add	fp, #32
2a79c     A7 2A 02 FB | 	rdlong	local07, fp
2a7a0     04 4E 05 F1 | 	add	fp, #4
2a7a4     A7 1E 02 FB | 	rdlong	local01, fp
2a7a8     24 4E 85 F1 | 	sub	fp, #36
2a7ac     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a7b0     1C 00 90 3D |  if_ae	jmp	#LR__4393
2a7b4     28 4E 05 F1 | 	add	fp, #40
2a7b8     A7 2C 02 FB | 	rdlong	local08, fp
2a7bc     04 4E 05 F1 | 	add	fp, #4
2a7c0     A7 30 02 FB | 	rdlong	local10, fp
2a7c4     2C 4E 85 F1 | 	sub	fp, #44
2a7c8     18 2D 0A F2 | 	cmp	local08, local10 wz
2a7cc     B0 00 90 5D |  if_ne	jmp	#LR__4395
2a7d0                 | LR__4393
2a7d0     24 4E 05 F1 | 	add	fp, #36
2a7d4     A7 2A 02 FB | 	rdlong	local07, fp
2a7d8     24 4E 85 F1 | 	sub	fp, #36
2a7dc     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a7e0     18 00 90 5D |  if_ne	jmp	#LR__4394
2a7e4     10 4E 05 F1 | 	add	fp, #16
2a7e8     A7 2A C2 FA | 	rdbyte	local07, fp
2a7ec     03 2A 46 F5 | 	or	local07, #3
2a7f0     A7 2A 42 FC | 	wrbyte	local07, fp
2a7f4     10 4E 85 F1 | 	sub	fp, #16
2a7f8                 | ' 				cf |=  0x01  |  0x02 ;
2a7f8                 | ' 				break;
2a7f8     B4 02 90 FD | 	jmp	#LR__4406
2a7fc                 | LR__4394
2a7fc     28 4E 05 F1 | 	add	fp, #40
2a800     A7 2A 02 FB | 	rdlong	local07, fp
2a804     04 4E 05 F1 | 	add	fp, #4
2a808     A7 1E 02 FB | 	rdlong	local01, fp
2a80c     2C 4E 85 F1 | 	sub	fp, #44
2a810     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a814     10 4E 05 51 |  if_ne	add	fp, #16
2a818     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a81c     03 2A 46 55 |  if_ne	or	local07, #3
2a820     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a824     10 4E 85 51 |  if_ne	sub	fp, #16
2a828     28 4E 05 F1 | 	add	fp, #40
2a82c     A7 2A 02 FB | 	rdlong	local07, fp
2a830     04 4E 05 F1 | 	add	fp, #4
2a834     A7 20 02 FB | 	rdlong	local02, fp
2a838     2C 4E 85 F1 | 	sub	fp, #44
2a83c     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a840     6C 02 90 1D |  if_a	jmp	#LR__4406
2a844     2C 4E 05 F1 | 	add	fp, #44
2a848     A7 2A 02 FB | 	rdlong	local07, fp
2a84c     04 4E 85 F1 | 	sub	fp, #4
2a850     A7 2A 62 FC | 	wrlong	local07, fp
2a854     08 4E 85 F1 | 	sub	fp, #8
2a858     A7 10 68 FC | 	wrlong	#8, fp
2a85c     04 4E 05 F1 | 	add	fp, #4
2a860     A7 16 68 FC | 	wrlong	#11, fp
2a864     18 4E 85 F1 | 	sub	fp, #24
2a868     A7 32 C2 FA | 	rdbyte	local11, fp
2a86c     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a870     02 2A 66 F0 | 	shl	local07, #2
2a874     A7 2A 42 FC | 	wrbyte	local07, fp
2a878     0C 4E 85 F1 | 	sub	fp, #12
2a87c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a87c                 | ' 			continue;
2a87c     80 FE 9F FD | 	jmp	#LR__4390
2a880                 | LR__4395
2a880     14 4E 05 F1 | 	add	fp, #20
2a884     A7 2A E2 FA | 	rdword	local07, fp
2a888     14 4E 85 F1 | 	sub	fp, #20
2a88c     80 2A 16 F2 | 	cmp	local07, #128 wc
2a890     6C 00 90 CD |  if_b	jmp	#LR__4397
2a894     10 4E 05 F1 | 	add	fp, #16
2a898     A7 2A C2 FA | 	rdbyte	local07, fp
2a89c     02 2A 46 F5 | 	or	local07, #2
2a8a0     A7 2A 42 FC | 	wrbyte	local07, fp
2a8a4     04 4E 05 F1 | 	add	fp, #4
2a8a8     A7 12 E2 FA | 	rdword	arg01, fp
2a8ac     14 4E 85 F1 | 	sub	fp, #20
2a8b0     01 00 00 FF 
2a8b4     52 15 06 F6 | 	mov	arg02, ##850
2a8b8     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a8bc     14 4E 05 F1 | 	add	fp, #20
2a8c0     A7 FA 51 FC | 	wrword	result1, fp
2a8c4     A7 2A E2 FA | 	rdword	local07, fp
2a8c8     14 4E 85 F1 | 	sub	fp, #20
2a8cc     80 2A CE F7 | 	test	local07, #128 wz
2a8d0     2C 00 90 AD |  if_e	jmp	#LR__4396
2a8d4     14 4E 05 F1 | 	add	fp, #20
2a8d8     A7 20 E2 FA | 	rdword	local02, fp
2a8dc     7F 20 06 F5 | 	and	local02, #127
2a8e0     01 00 00 FF 
2a8e4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a8e8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a8ec     10 2B C2 FA | 	rdbyte	local07, local02
2a8f0     A7 2A 52 FC | 	wrword	local07, fp
2a8f4     14 4E 85 F1 | 	sub	fp, #20
2a8f8     01 00 00 FF 
2a8fc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a900                 | LR__4396
2a900                 | LR__4397
2a900     14 4E 05 F1 | 	add	fp, #20
2a904     A7 2A E2 FA | 	rdword	local07, fp
2a908     14 4E 85 F1 | 	sub	fp, #20
2a90c     00 2B 16 F2 | 	cmp	local07, #256 wc
2a910     88 00 90 CD |  if_b	jmp	#LR__4399
2a914     24 4E 05 F1 | 	add	fp, #36
2a918     A7 2A 02 FB | 	rdlong	local07, fp
2a91c     01 2A 86 F1 | 	sub	local07, #1
2a920     04 4E 85 F1 | 	sub	fp, #4
2a924     A7 20 02 FB | 	rdlong	local02, fp
2a928     20 4E 85 F1 | 	sub	fp, #32
2a92c     15 21 12 F2 | 	cmp	local02, local07 wc
2a930     2C 00 90 CD |  if_b	jmp	#LR__4398
2a934     10 4E 05 F1 | 	add	fp, #16
2a938     A7 32 C2 FA | 	rdbyte	local11, fp
2a93c     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a940     03 2A 46 F5 | 	or	local07, #3
2a944     A7 2A 42 FC | 	wrbyte	local07, fp
2a948     14 4E 05 F1 | 	add	fp, #20
2a94c     A7 2A 02 FB | 	rdlong	local07, fp
2a950     04 4E 85 F1 | 	sub	fp, #4
2a954     A7 2A 62 FC | 	wrlong	local07, fp
2a958     20 4E 85 F1 | 	sub	fp, #32
2a95c                 | ' 				cf |=  0x01  |  0x02 ;
2a95c                 | ' 				i = ni; continue;
2a95c     A0 FD 9F FD | 	jmp	#LR__4390
2a960                 | LR__4398
2a960     04 4E 05 F1 | 	add	fp, #4
2a964     A7 2E 02 FB | 	rdlong	local09, fp
2a968     1C 4E 05 F1 | 	add	fp, #28
2a96c     A7 30 02 FB | 	rdlong	local10, fp
2a970     18 25 02 F6 | 	mov	local04, local10
2a974     01 24 06 F1 | 	add	local04, #1
2a978     A7 24 62 FC | 	wrlong	local04, fp
2a97c     20 2E 06 F1 | 	add	local09, #32
2a980     17 31 02 F1 | 	add	local10, local09
2a984     0C 4E 85 F1 | 	sub	fp, #12
2a988     A7 22 E2 FA | 	rdword	local03, fp
2a98c     14 4E 85 F1 | 	sub	fp, #20
2a990     08 22 46 F0 | 	shr	local03, #8
2a994     18 23 42 FC | 	wrbyte	local03, local10
2a998     D4 00 90 FD | 	jmp	#LR__4405
2a99c                 | LR__4399
2a99c     14 4E 05 F1 | 	add	fp, #20
2a9a0     A7 2A EA FA | 	rdword	local07, fp wz
2a9a4     14 4E 85 F1 | 	sub	fp, #20
2a9a8     20 00 90 AD |  if_e	jmp	#LR__4400
2a9ac     81 01 00 FF 
2a9b0     3D 13 06 F6 | 	mov	arg01, ##@LR__5033
2a9b4     14 4E 05 F1 | 	add	fp, #20
2a9b8     A7 14 E2 FA | 	rdword	arg02, fp
2a9bc     14 4E 85 F1 | 	sub	fp, #20
2a9c0     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9c8     20 00 90 AD |  if_e	jmp	#LR__4401
2a9cc                 | LR__4400
2a9cc     14 4E 05 F1 | 	add	fp, #20
2a9d0     A7 BE 58 FC | 	wrword	#95, fp
2a9d4     04 4E 85 F1 | 	sub	fp, #4
2a9d8     A7 2A C2 FA | 	rdbyte	local07, fp
2a9dc     03 2A 46 F5 | 	or	local07, #3
2a9e0     A7 2A 42 FC | 	wrbyte	local07, fp
2a9e4     10 4E 85 F1 | 	sub	fp, #16
2a9e8     84 00 90 FD | 	jmp	#LR__4404
2a9ec                 | LR__4401
2a9ec     14 4E 05 F1 | 	add	fp, #20
2a9f0     A7 2A E2 FA | 	rdword	local07, fp
2a9f4     14 4E 85 F1 | 	sub	fp, #20
2a9f8     41 2A 16 F2 | 	cmp	local07, #65 wc
2a9fc     24 00 90 CD |  if_b	jmp	#LR__4402
2aa00     14 4E 05 F1 | 	add	fp, #20
2aa04     A7 1E E2 FA | 	rdword	local01, fp
2aa08     14 4E 85 F1 | 	sub	fp, #20
2aa0c     5B 1E 16 F2 | 	cmp	local01, #91 wc
2aa10     0C 4E 05 C1 |  if_b	add	fp, #12
2aa14     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2aa18     02 2A 46 C5 |  if_b	or	local07, #2
2aa1c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2aa20     0C 4E 85 C1 |  if_b	sub	fp, #12
2aa24                 | LR__4402
2aa24     14 4E 05 F1 | 	add	fp, #20
2aa28     A7 2A E2 FA | 	rdword	local07, fp
2aa2c     14 4E 85 F1 | 	sub	fp, #20
2aa30     61 2A 16 F2 | 	cmp	local07, #97 wc
2aa34     38 00 90 CD |  if_b	jmp	#LR__4403
2aa38     14 4E 05 F1 | 	add	fp, #20
2aa3c     A7 1E E2 FA | 	rdword	local01, fp
2aa40     14 4E 85 F1 | 	sub	fp, #20
2aa44     7B 1E 16 F2 | 	cmp	local01, #123 wc
2aa48     24 00 90 3D |  if_ae	jmp	#LR__4403
2aa4c     0C 4E 05 F1 | 	add	fp, #12
2aa50     A7 2A C2 FA | 	rdbyte	local07, fp
2aa54     01 2A 46 F5 | 	or	local07, #1
2aa58     A7 2A 42 FC | 	wrbyte	local07, fp
2aa5c     08 4E 05 F1 | 	add	fp, #8
2aa60     A7 2A E2 FA | 	rdword	local07, fp
2aa64     20 2A 86 F1 | 	sub	local07, #32
2aa68     A7 2A 52 FC | 	wrword	local07, fp
2aa6c     14 4E 85 F1 | 	sub	fp, #20
2aa70                 | LR__4403
2aa70                 | LR__4404
2aa70                 | LR__4405
2aa70     04 4E 05 F1 | 	add	fp, #4
2aa74     A7 32 02 FB | 	rdlong	local11, fp
2aa78     19 2F 02 F6 | 	mov	local09, local11
2aa7c     1C 4E 05 F1 | 	add	fp, #28
2aa80     A7 20 02 FB | 	rdlong	local02, fp
2aa84     10 25 02 F6 | 	mov	local04, local02
2aa88     01 24 06 F1 | 	add	local04, #1
2aa8c     A7 24 62 FC | 	wrlong	local04, fp
2aa90     10 31 02 F6 | 	mov	local10, local02
2aa94     20 2E 06 F1 | 	add	local09, #32
2aa98     17 31 02 F1 | 	add	local10, local09
2aa9c     0C 4E 85 F1 | 	sub	fp, #12
2aaa0     A7 22 E2 FA | 	rdword	local03, fp
2aaa4     14 4E 85 F1 | 	sub	fp, #20
2aaa8     18 23 42 FC | 	wrbyte	local03, local10
2aaac     50 FC 9F FD | 	jmp	#LR__4390
2aab0                 | LR__4406
2aab0     04 4E 05 F1 | 	add	fp, #4
2aab4     A7 32 02 FB | 	rdlong	local11, fp
2aab8     04 4E 85 F1 | 	sub	fp, #4
2aabc     20 32 06 F1 | 	add	local11, #32
2aac0     19 2B C2 FA | 	rdbyte	local07, local11
2aac4     E5 2A 0E F2 | 	cmp	local07, #229 wz
2aac8     04 4E 05 A1 |  if_e	add	fp, #4
2aacc     A7 2A 02 AB |  if_e	rdlong	local07, fp
2aad0     04 4E 85 A1 |  if_e	sub	fp, #4
2aad4     20 2A 06 A1 |  if_e	add	local07, #32
2aad8     15 0B 48 AC |  if_e	wrbyte	#5, local07
2aadc     24 4E 05 F1 | 	add	fp, #36
2aae0     A7 2A 02 FB | 	rdlong	local07, fp
2aae4     24 4E 85 F1 | 	sub	fp, #36
2aae8     08 2A 0E F2 | 	cmp	local07, #8 wz
2aaec     0C 4E 05 A1 |  if_e	add	fp, #12
2aaf0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2aaf4     02 2A 66 A0 |  if_e	shl	local07, #2
2aaf8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2aafc     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab00     0C 4E 05 F1 | 	add	fp, #12
2ab04     A7 2A C2 FA | 	rdbyte	local07, fp
2ab08     0C 4E 85 F1 | 	sub	fp, #12
2ab0c     0C 2A 06 F5 | 	and	local07, #12
2ab10     0C 2A 0E F2 | 	cmp	local07, #12 wz
2ab14     18 00 90 AD |  if_e	jmp	#LR__4407
2ab18     0C 4E 05 F1 | 	add	fp, #12
2ab1c     A7 1E C2 FA | 	rdbyte	local01, fp
2ab20     0C 4E 85 F1 | 	sub	fp, #12
2ab24     03 1E 06 F5 | 	and	local01, #3
2ab28     03 1E 0E F2 | 	cmp	local01, #3 wz
2ab2c     14 00 90 5D |  if_ne	jmp	#LR__4408
2ab30                 | LR__4407
2ab30     10 4E 05 F1 | 	add	fp, #16
2ab34     A7 2A C2 FA | 	rdbyte	local07, fp
2ab38     02 2A 46 F5 | 	or	local07, #2
2ab3c     A7 2A 42 FC | 	wrbyte	local07, fp
2ab40     10 4E 85 F1 | 	sub	fp, #16
2ab44                 | LR__4408
2ab44     10 4E 05 F1 | 	add	fp, #16
2ab48     A7 2A C2 FA | 	rdbyte	local07, fp
2ab4c     10 4E 85 F1 | 	sub	fp, #16
2ab50     02 2A CE F7 | 	test	local07, #2 wz
2ab54     48 00 90 5D |  if_ne	jmp	#LR__4409
2ab58     0C 4E 05 F1 | 	add	fp, #12
2ab5c     A7 2A C2 FA | 	rdbyte	local07, fp
2ab60     0C 4E 85 F1 | 	sub	fp, #12
2ab64     01 2A CE F7 | 	test	local07, #1 wz
2ab68     10 4E 05 51 |  if_ne	add	fp, #16
2ab6c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ab70     10 2A 46 55 |  if_ne	or	local07, #16
2ab74     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ab78     10 4E 85 51 |  if_ne	sub	fp, #16
2ab7c     0C 4E 05 F1 | 	add	fp, #12
2ab80     A7 2A C2 FA | 	rdbyte	local07, fp
2ab84     0C 4E 85 F1 | 	sub	fp, #12
2ab88     04 2A CE F7 | 	test	local07, #4 wz
2ab8c     10 4E 05 51 |  if_ne	add	fp, #16
2ab90     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ab94     08 2A 46 55 |  if_ne	or	local07, #8
2ab98     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ab9c     10 4E 85 51 |  if_ne	sub	fp, #16
2aba0                 | LR__4409
2aba0     04 4E 05 F1 | 	add	fp, #4
2aba4     A7 2A 02 FB | 	rdlong	local07, fp
2aba8     0C 4E 05 F1 | 	add	fp, #12
2abac     A7 1E C2 FA | 	rdbyte	local01, fp
2abb0     10 4E 85 F1 | 	sub	fp, #16
2abb4     2B 2A 06 F1 | 	add	local07, #43
2abb8     15 1F 42 FC | 	wrbyte	local01, local07
2abbc                 | ' 	}
2abbc                 | ' 
2abbc                 | ' 	dp->fn[ 11 ] = cf;
2abbc                 | ' 
2abbc                 | ' 	return FR_OK;
2abbc     00 FA 05 F6 | 	mov	result1, #0
2abc0                 | LR__4410
2abc0     A7 F0 03 F6 | 	mov	ptra, fp
2abc4     B2 00 A0 FD | 	call	#popregs_
2abc8                 | _fatfs_cc_create_name_ret
2abc8     2D 00 64 FD | 	ret
2abcc                 | 
2abcc                 | _fatfs_cc_follow_path
2abcc     02 4A 05 F6 | 	mov	COUNT_, #2
2abd0     A8 00 A0 FD | 	call	#pushregs_
2abd4     18 F0 07 F1 | 	add	ptra, #24
2abd8     04 4E 05 F1 | 	add	fp, #4
2abdc     A7 12 62 FC | 	wrlong	arg01, fp
2abe0     04 4E 05 F1 | 	add	fp, #4
2abe4     A7 14 62 FC | 	wrlong	arg02, fp
2abe8     04 4E 85 F1 | 	sub	fp, #4
2abec     A7 FA 01 FB | 	rdlong	result1, fp
2abf0     FD 1E 02 FB | 	rdlong	local01, result1
2abf4     10 4E 05 F1 | 	add	fp, #16
2abf8     A7 1E 62 FC | 	wrlong	local01, fp
2abfc     14 4E 85 F1 | 	sub	fp, #20
2ac00     97 24 48 FB | 	callpa	#(@LR__4422-@LR__4420)>>2,fcache_load_ptr_
2ac04                 | ' )
2ac04                 | ' {
2ac04                 | ' 	FRESULT res;
2ac04                 | ' 	BYTE ns;
2ac04                 | ' 	FATFS *fs = dp->obj.fs;
2ac04                 | ' #line 3034 "ff.c"
2ac04                 | ' 	{
2ac04                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ac04                 | LR__4420
2ac04     08 4E 05 F1 | 	add	fp, #8
2ac08     A7 1E 02 FB | 	rdlong	local01, fp
2ac0c     08 4E 85 F1 | 	sub	fp, #8
2ac10     0F 1F C2 FA | 	rdbyte	local01, local01
2ac14     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ac18     18 00 90 AD |  if_e	jmp	#LR__4421
2ac1c     08 4E 05 F1 | 	add	fp, #8
2ac20     A7 1E 02 FB | 	rdlong	local01, fp
2ac24     08 4E 85 F1 | 	sub	fp, #8
2ac28     0F 1F C2 FA | 	rdbyte	local01, local01
2ac2c     5C 1E 0E F2 | 	cmp	local01, #92 wz
2ac30     18 00 90 5D |  if_ne	jmp	#LR__4423
2ac34                 | LR__4421
2ac34     08 4E 05 F1 | 	add	fp, #8
2ac38     A7 1E 02 FB | 	rdlong	local01, fp
2ac3c     01 1E 06 F1 | 	add	local01, #1
2ac40     A7 1E 62 FC | 	wrlong	local01, fp
2ac44     08 4E 85 F1 | 	sub	fp, #8
2ac48     B8 FF 9F FD | 	jmp	#LR__4420
2ac4c                 | LR__4422
2ac4c                 | LR__4423
2ac4c     04 4E 05 F1 | 	add	fp, #4
2ac50     A7 1E 02 FB | 	rdlong	local01, fp
2ac54     08 1E 06 F1 | 	add	local01, #8
2ac58     0F 01 68 FC | 	wrlong	#0, local01
2ac5c     04 4E 05 F1 | 	add	fp, #4
2ac60     A7 1E 02 FB | 	rdlong	local01, fp
2ac64     08 4E 85 F1 | 	sub	fp, #8
2ac68     0F 1F C2 FA | 	rdbyte	local01, local01
2ac6c     20 1E 16 F2 | 	cmp	local01, #32 wc
2ac70     30 00 90 3D |  if_ae	jmp	#LR__4424
2ac74     04 4E 05 F1 | 	add	fp, #4
2ac78     A7 1E 02 FB | 	rdlong	local01, fp
2ac7c     2B 1E 06 F1 | 	add	local01, #43
2ac80     0F 01 49 FC | 	wrbyte	#128, local01
2ac84     A7 12 02 FB | 	rdlong	arg01, fp
2ac88     04 4E 85 F1 | 	sub	fp, #4
2ac8c     00 14 06 F6 | 	mov	arg02, #0
2ac90     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ac94     0C 4E 05 F1 | 	add	fp, #12
2ac98     A7 FA 61 FC | 	wrlong	result1, fp
2ac9c     0C 4E 85 F1 | 	sub	fp, #12
2aca0     1C 01 90 FD | 	jmp	#LR__4428
2aca4                 | LR__4424
2aca4                 | ' 		for (;;) {
2aca4                 | LR__4425
2aca4     04 4E 05 F1 | 	add	fp, #4
2aca8     A7 12 02 FB | 	rdlong	arg01, fp
2acac     04 4E 05 F1 | 	add	fp, #4
2acb0     A7 14 02 F6 | 	mov	arg02, fp
2acb4     08 4E 85 F1 | 	sub	fp, #8
2acb8     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2acbc     0C 4E 05 F1 | 	add	fp, #12
2acc0     A7 FA 61 FC | 	wrlong	result1, fp
2acc4     00 FA 4D F2 | 	cmps	result1, #0 wz
2acc8     0C 4E 85 F1 | 	sub	fp, #12
2accc     F0 00 90 5D |  if_ne	jmp	#LR__4427
2acd0     04 4E 05 F1 | 	add	fp, #4
2acd4     A7 12 02 FB | 	rdlong	arg01, fp
2acd8     04 4E 85 F1 | 	sub	fp, #4
2acdc     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ace0     0C 4E 05 F1 | 	add	fp, #12
2ace4     A7 FA 61 FC | 	wrlong	result1, fp
2ace8     08 4E 85 F1 | 	sub	fp, #8
2acec     A7 1E 02 FB | 	rdlong	local01, fp
2acf0     2B 1E 06 F1 | 	add	local01, #43
2acf4     0F 1F C2 FA | 	rdbyte	local01, local01
2acf8     0C 4E 05 F1 | 	add	fp, #12
2acfc     A7 1E 42 FC | 	wrbyte	local01, fp
2ad00     04 4E 85 F1 | 	sub	fp, #4
2ad04     A7 1E 0A FB | 	rdlong	local01, fp wz
2ad08     0C 4E 85 F1 | 	sub	fp, #12
2ad0c     34 00 90 AD |  if_e	jmp	#LR__4426
2ad10     0C 4E 05 F1 | 	add	fp, #12
2ad14     A7 1E 02 FB | 	rdlong	local01, fp
2ad18     0C 4E 85 F1 | 	sub	fp, #12
2ad1c     04 1E 0E F2 | 	cmp	local01, #4 wz
2ad20     9C 00 90 5D |  if_ne	jmp	#LR__4427
2ad24     10 4E 05 F1 | 	add	fp, #16
2ad28     A7 1E C2 FA | 	rdbyte	local01, fp
2ad2c     10 4E 85 F1 | 	sub	fp, #16
2ad30     04 1E CE F7 | 	test	local01, #4 wz
2ad34     0C 4E 05 A1 |  if_e	add	fp, #12
2ad38     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ad3c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ad40                 | ' 					}
2ad40                 | ' 				}
2ad40                 | ' 				break;
2ad40     7C 00 90 FD | 	jmp	#LR__4427
2ad44                 | LR__4426
2ad44     10 4E 05 F1 | 	add	fp, #16
2ad48     A7 1E C2 FA | 	rdbyte	local01, fp
2ad4c     10 4E 85 F1 | 	sub	fp, #16
2ad50     04 1E CE F7 | 	test	local01, #4 wz
2ad54     68 00 90 5D |  if_ne	jmp	#LR__4427
2ad58     04 4E 05 F1 | 	add	fp, #4
2ad5c     A7 1E 02 FB | 	rdlong	local01, fp
2ad60     04 4E 85 F1 | 	sub	fp, #4
2ad64     06 1E 06 F1 | 	add	local01, #6
2ad68     0F 1F C2 FA | 	rdbyte	local01, local01
2ad6c     10 1E CE F7 | 	test	local01, #16 wz
2ad70     0C 4E 05 A1 |  if_e	add	fp, #12
2ad74     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ad78     0C 4E 85 A1 |  if_e	sub	fp, #12
2ad7c                 | ' 				res = FR_NO_PATH; break;
2ad7c     40 00 90 AD |  if_e	jmp	#LR__4427
2ad80     04 4E 05 F1 | 	add	fp, #4
2ad84     A7 20 02 FB | 	rdlong	local02, fp
2ad88     10 1F 02 F6 | 	mov	local01, local02
2ad8c     10 4E 05 F1 | 	add	fp, #16
2ad90     A7 14 02 FB | 	rdlong	arg02, fp
2ad94     0A 13 02 F6 | 	mov	arg01, arg02
2ad98     34 14 06 F1 | 	add	arg02, #52
2ad9c     14 4E 85 F1 | 	sub	fp, #20
2ada0     10 20 06 F1 | 	add	local02, #16
2ada4     10 21 02 FB | 	rdlong	local02, local02
2ada8     FF 21 06 F5 | 	and	local02, #511
2adac     10 15 02 F1 | 	add	arg02, local02
2adb0     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2adb4     08 1E 06 F1 | 	add	local01, #8
2adb8     0F FB 61 FC | 	wrlong	result1, local01
2adbc     E4 FE 9F FD | 	jmp	#LR__4425
2adc0                 | LR__4427
2adc0                 | LR__4428
2adc0                 | ' 			}
2adc0                 | ' #line 3090 "ff.c"
2adc0                 | ' 			{
2adc0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2adc0                 | ' 			}
2adc0                 | ' 		}
2adc0                 | ' 	}
2adc0                 | ' 
2adc0                 | ' 	return res;
2adc0     0C 4E 05 F1 | 	add	fp, #12
2adc4     A7 FA 01 FB | 	rdlong	result1, fp
2adc8     0C 4E 85 F1 | 	sub	fp, #12
2adcc     A7 F0 03 F6 | 	mov	ptra, fp
2add0     B2 00 A0 FD | 	call	#popregs_
2add4                 | _fatfs_cc_follow_path_ret
2add4     2D 00 64 FD | 	ret
2add8                 | 
2add8                 | _fatfs_cc_get_ldnumber
2add8     01 00 66 F6 | 	neg	_var01, #1
2addc     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ade0     01 05 02 F6 | 	mov	_var03, _var02
2ade4     01 FA 65 A6 |  if_e	neg	result1, #1
2ade8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2adec     97 10 48 FB | 	callpa	#(@LR__4431-@LR__4430)>>2,fcache_load_ptr_
2adf0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2adf0                 | LR__4430
2adf0     02 07 C2 FA | 	rdbyte	_var04, _var03
2adf4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2adf8     20 FA 15 F2 | 	cmp	result1, #32 wc
2adfc     01 04 06 F1 | 	add	_var03, #1
2ae00     03 09 02 36 |  if_ae	mov	_var05, _var04
2ae04     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ae08     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ae0c     E0 FF 9F 1D |  if_a	jmp	#LR__4430
2ae10                 | LR__4431
2ae10     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ae14     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ae18     40 00 90 5D |  if_ne	jmp	#LR__4433
2ae1c     01 0A 06 F6 | 	mov	_var06, #1
2ae20     01 09 C2 FA | 	rdbyte	_var05, _var02
2ae24     30 08 16 F2 | 	cmp	_var05, #48 wc
2ae28     1C 00 90 CD |  if_b	jmp	#LR__4432
2ae2c     01 09 C2 FA | 	rdbyte	_var05, _var02
2ae30     3A 08 16 F2 | 	cmp	_var05, #58 wc
2ae34     01 0D 02 C6 |  if_b	mov	_var07, _var02
2ae38     02 0C 06 C1 |  if_b	add	_var07, #2
2ae3c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ae40     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ae44     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ae48                 | LR__4432
2ae48     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ae4c     05 01 02 C6 |  if_b	mov	_var01, _var06
2ae50     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ae54                 | ' 			vol = i;
2ae54                 | ' 			*path = tt;
2ae54                 | ' 		}
2ae54                 | ' 		return vol;
2ae54     00 FB 01 F6 | 	mov	result1, _var01
2ae58     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ae5c                 | LR__4433
2ae5c                 | ' 	}
2ae5c                 | ' #line 3170 "ff.c"
2ae5c                 | ' 	vol = 0;
2ae5c                 | ' 
2ae5c                 | ' 	return vol;
2ae5c     00 FA 05 F6 | 	mov	result1, #0
2ae60                 | _fatfs_cc_get_ldnumber_ret
2ae60     2D 00 64 FD | 	ret
2ae64                 | 
2ae64                 | _fatfs_cc_check_fs
2ae64     04 4A 05 F6 | 	mov	COUNT_, #4
2ae68     A8 00 A0 FD | 	call	#pushregs_
2ae6c     09 1F 02 F6 | 	mov	local01, arg01
2ae70     03 1E 06 F1 | 	add	local01, #3
2ae74     0F 01 48 FC | 	wrbyte	#0, local01
2ae78     2D 1E 06 F1 | 	add	local01, #45
2ae7c     FF FF FF FF 
2ae80     0F FF 6B FC | 	wrlong	##-1, local01
2ae84     30 1E 86 F1 | 	sub	local01, #48
2ae88     0F 13 02 F6 | 	mov	arg01, local01
2ae8c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ae90     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae94     04 FA 05 56 |  if_ne	mov	result1, #4
2ae98     94 01 90 5D |  if_ne	jmp	#LR__4444
2ae9c     34 1E 06 F1 | 	add	local01, #52
2aea0     0F 13 02 F6 | 	mov	arg01, local01
2aea4     FE 13 06 F1 | 	add	arg01, #510
2aea8                 | ' {
2aea8                 | ' 
2aea8                 | ' 	return *((WORD*)ptr);
2aea8     09 21 E2 FA | 	rdword	local02, arg01
2aeac     0F 23 C2 FA | 	rdbyte	local03, local01
2aeb0     34 1E 86 F1 | 	sub	local01, #52
2aeb4     11 25 E2 F8 | 	getbyte	local04, local03, #0
2aeb8     EB 24 0E F2 | 	cmp	local04, #235 wz
2aebc     11 17 02 56 |  if_ne	mov	arg03, local03
2aec0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2aec4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2aec8     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2aecc     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2aed0     44 01 90 5D |  if_ne	jmp	#LR__4443
2aed4     10 25 32 F9 | 	getword	local04, local02, #0
2aed8     55 00 00 FF 
2aedc     55 24 0E F2 | 	cmp	local04, ##43605 wz
2aee0     2C 00 90 5D |  if_ne	jmp	#LR__4440
2aee4     34 1E 06 F1 | 	add	local01, #52
2aee8     0F 13 02 F6 | 	mov	arg01, local01
2aeec     34 1E 86 F1 | 	sub	local01, #52
2aef0     52 12 06 F1 | 	add	arg01, #82
2aef4     81 01 00 FF 
2aef8     44 15 06 F6 | 	mov	arg02, ##@LR__5034
2aefc     08 16 06 F6 | 	mov	arg03, #8
2af00     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2af04     00 FA 0D F2 | 	cmp	result1, #0 wz
2af08                 | ' 			return 0;
2af08     00 FA 05 A6 |  if_e	mov	result1, #0
2af0c     20 01 90 AD |  if_e	jmp	#LR__4444
2af10                 | LR__4440
2af10     34 1E 06 F1 | 	add	local01, #52
2af14     0F 13 02 F6 | 	mov	arg01, local01
2af18     0B 12 06 F1 | 	add	arg01, #11
2af1c                 | ' {
2af1c                 | ' 
2af1c                 | ' 	return *((WORD*)ptr);
2af1c     09 FB E1 FA | 	rdword	result1, arg01
2af20     0D 1E 06 F1 | 	add	local01, #13
2af24     0F 23 C2 FA | 	rdbyte	local03, local01
2af28     41 1E 86 F1 | 	sub	local01, #65
2af2c     FD 24 32 F9 | 	getword	local04, result1, #0
2af30     FD 14 32 F9 | 	getword	arg02, result1, #0
2af34     01 14 86 F1 | 	sub	arg02, #1
2af38     0A 25 CA F7 | 	test	local04, arg02 wz
2af3c     D8 00 90 5D |  if_ne	jmp	#LR__4442
2af40     FD 14 32 F9 | 	getword	arg02, result1, #0
2af44     01 00 00 FF 
2af48     00 14 16 F2 | 	cmp	arg02, ##512 wc
2af4c     C8 00 90 CD |  if_b	jmp	#LR__4442
2af50     FD 14 32 F9 | 	getword	arg02, result1, #0
2af54     01 00 00 FF 
2af58     01 14 16 F2 | 	cmp	arg02, ##513 wc
2af5c     B8 00 90 3D |  if_ae	jmp	#LR__4442
2af60     11 13 02 F6 | 	mov	arg01, local03
2af64     07 12 4E F7 | 	zerox	arg01, #7 wz
2af68     AC 00 90 AD |  if_e	jmp	#LR__4442
2af6c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2af70     11 23 E2 F8 | 	getbyte	local03, local03, #0
2af74     01 22 86 F1 | 	sub	local03, #1
2af78     11 13 CA F7 | 	test	arg01, local03 wz
2af7c     98 00 90 5D |  if_ne	jmp	#LR__4442
2af80     34 1E 06 F1 | 	add	local01, #52
2af84     0F 13 02 F6 | 	mov	arg01, local01
2af88     34 1E 86 F1 | 	sub	local01, #52
2af8c     0E 12 06 F1 | 	add	arg01, #14
2af90                 | ' {
2af90                 | ' 
2af90                 | ' 	return *((WORD*)ptr);
2af90     09 FB E9 FA | 	rdword	result1, arg01 wz
2af94     80 00 90 AD |  if_e	jmp	#LR__4442
2af98     44 1E 06 F1 | 	add	local01, #68
2af9c     0F 13 C2 FA | 	rdbyte	arg01, local01
2afa0     44 1E 86 F1 | 	sub	local01, #68
2afa4     01 12 86 F1 | 	sub	arg01, #1
2afa8     02 12 16 F2 | 	cmp	arg01, #2 wc
2afac     68 00 90 3D |  if_ae	jmp	#LR__4442
2afb0     34 1E 06 F1 | 	add	local01, #52
2afb4     0F 13 02 F6 | 	mov	arg01, local01
2afb8     34 1E 86 F1 | 	sub	local01, #52
2afbc     11 12 06 F1 | 	add	arg01, #17
2afc0                 | ' {
2afc0                 | ' 
2afc0                 | ' 	return *((WORD*)ptr);
2afc0     09 FB E9 FA | 	rdword	result1, arg01 wz
2afc4     50 00 90 AD |  if_e	jmp	#LR__4442
2afc8     34 1E 06 F1 | 	add	local01, #52
2afcc     0F 13 02 F6 | 	mov	arg01, local01
2afd0     34 1E 86 F1 | 	sub	local01, #52
2afd4     13 12 06 F1 | 	add	arg01, #19
2afd8                 | ' {
2afd8                 | ' 
2afd8                 | ' 	return *((WORD*)ptr);
2afd8     09 FB E1 FA | 	rdword	result1, arg01
2afdc     FD 22 32 F9 | 	getword	local03, result1, #0
2afe0     80 22 16 F2 | 	cmp	local03, #128 wc
2afe4     20 00 90 3D |  if_ae	jmp	#LR__4441
2afe8     34 1E 06 F1 | 	add	local01, #52
2afec     0F 13 02 F6 | 	mov	arg01, local01
2aff0     34 1E 86 F1 | 	sub	local01, #52
2aff4     20 12 06 F1 | 	add	arg01, #32
2aff8                 | ' {
2aff8                 | ' 
2aff8                 | ' 	return *((DWORD*)ptr);
2aff8     09 FB 01 FB | 	rdlong	result1, arg01
2affc     80 00 00 FF 
2b000     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2b004     10 00 90 CD |  if_b	jmp	#LR__4442
2b008                 | LR__4441
2b008     4A 1E 06 F1 | 	add	local01, #74
2b00c                 | ' {
2b00c                 | ' 
2b00c                 | ' 	return *((WORD*)ptr);
2b00c     0F FB E9 FA | 	rdword	result1, local01 wz
2b010                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2b010                 | ' 			&& ld_word(fs->win +  14 ) != 0
2b010                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2b010                 | ' 			&& ld_word(fs->win +  17 ) != 0
2b010                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2b010                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2b010                 | ' 				return 0;
2b010     00 FA 05 56 |  if_ne	mov	result1, #0
2b014     18 00 90 5D |  if_ne	jmp	#LR__4444
2b018                 | LR__4442
2b018                 | LR__4443
2b018                 | ' 		}
2b018                 | ' 	}
2b018                 | ' 	return sign == 0xAA55 ? 2 : 3;
2b018     10 23 32 F9 | 	getword	local03, local02, #0
2b01c     55 00 00 FF 
2b020     55 22 0E F2 | 	cmp	local03, ##43605 wz
2b024     02 24 06 A6 |  if_e	mov	local04, #2
2b028     03 24 06 56 |  if_ne	mov	local04, #3
2b02c     12 FB 01 F6 | 	mov	result1, local04
2b030                 | LR__4444
2b030     A7 F0 03 F6 | 	mov	ptra, fp
2b034     B2 00 A0 FD | 	call	#popregs_
2b038                 | _fatfs_cc_check_fs_ret
2b038     2D 00 64 FD | 	ret
2b03c                 | 
2b03c                 | _fatfs_cc_find_volume
2b03c     05 4A 05 F6 | 	mov	COUNT_, #5
2b040     A8 00 A0 FD | 	call	#pushregs_
2b044     24 F0 07 F1 | 	add	ptra, #36
2b048     09 1F 02 F6 | 	mov	local01, arg01
2b04c     0A 21 02 F6 | 	mov	local02, arg02
2b050     0F 13 02 F6 | 	mov	arg01, local01
2b054     00 14 06 F6 | 	mov	arg02, #0
2b058     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2b05c     02 FA 0D F2 | 	cmp	result1, #2 wz
2b060     0C 00 90 AD |  if_e	jmp	#LR__4450
2b064     03 FA 15 F2 | 	cmp	result1, #3 wc
2b068     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2b06c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4458
2b070                 | LR__4450
2b070                 | ' 	for (i = 0; i < 4; i++) {
2b070     00 22 06 F6 | 	mov	local03, #0
2b074     97 26 48 FB | 	callpa	#(@LR__4452-@LR__4451)>>2,fcache_load_ptr_
2b078                 | LR__4451
2b078     04 22 16 F2 | 	cmp	local03, #4 wc
2b07c     44 00 90 3D |  if_ae	jmp	#LR__4453
2b080     11 25 02 F6 | 	mov	local04, local03
2b084     02 24 66 F0 | 	shl	local04, #2
2b088     14 4E 05 F1 | 	add	fp, #20
2b08c     A7 24 02 F1 | 	add	local04, fp
2b090     34 1E 06 F1 | 	add	local01, #52
2b094     0F 13 02 F6 | 	mov	arg01, local01
2b098     34 1E 86 F1 | 	sub	local01, #52
2b09c     BE 13 06 F1 | 	add	arg01, #446
2b0a0     11 15 02 F6 | 	mov	arg02, local03
2b0a4     04 14 66 F0 | 	shl	arg02, #4
2b0a8     0A 13 02 F1 | 	add	arg01, arg02
2b0ac     08 12 06 F1 | 	add	arg01, #8
2b0b0                 | ' {
2b0b0                 | ' 
2b0b0                 | ' 	return *((DWORD*)ptr);
2b0b0     09 FB 01 FB | 	rdlong	result1, arg01
2b0b4     14 4E 85 F1 | 	sub	fp, #20
2b0b8     12 FB 61 FC | 	wrlong	result1, local04
2b0bc     01 22 06 F1 | 	add	local03, #1
2b0c0     B4 FF 9F FD | 	jmp	#LR__4451
2b0c4                 | LR__4452
2b0c4                 | LR__4453
2b0c4     00 20 0E F2 | 	cmp	local02, #0 wz
2b0c8     10 25 02 56 |  if_ne	mov	local04, local02
2b0cc     01 24 86 51 |  if_ne	sub	local04, #1
2b0d0     00 24 06 A6 |  if_e	mov	local04, #0
2b0d4     12 23 02 F6 | 	mov	local03, local04
2b0d8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2b0d8                 | ' 	}
2b0d8                 | ' 	i = part ? part - 1 : 0;
2b0d8                 | ' 	do {
2b0d8                 | LR__4454
2b0d8     11 25 02 F6 | 	mov	local04, local03
2b0dc     02 24 66 F0 | 	shl	local04, #2
2b0e0     14 4E 05 F1 | 	add	fp, #20
2b0e4     A7 24 02 F1 | 	add	local04, fp
2b0e8     12 25 0A FB | 	rdlong	local04, local04 wz
2b0ec     14 4E 85 F1 | 	sub	fp, #20
2b0f0     28 00 90 AD |  if_e	jmp	#LR__4455
2b0f4     11 25 02 F6 | 	mov	local04, local03
2b0f8     02 24 66 F0 | 	shl	local04, #2
2b0fc     14 4E 05 F1 | 	add	fp, #20
2b100     A7 24 02 F1 | 	add	local04, fp
2b104     12 15 02 FB | 	rdlong	arg02, local04
2b108     0F 13 02 F6 | 	mov	arg01, local01
2b10c     14 4E 85 F1 | 	sub	fp, #20
2b110     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b114     FD 24 02 F6 | 	mov	local04, result1
2b118     04 00 90 FD | 	jmp	#LR__4456
2b11c                 | LR__4455
2b11c     03 24 06 F6 | 	mov	local04, #3
2b120                 | LR__4456
2b120     12 27 02 F6 | 	mov	local05, local04
2b124     00 20 0E F2 | 	cmp	local02, #0 wz
2b128     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b12c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4457
2b130     01 22 06 A1 |  if_e	add	local03, #1
2b134     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b138     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4454
2b13c                 | LR__4457
2b13c                 | ' 	return fmt;
2b13c     13 FB 01 F6 | 	mov	result1, local05
2b140                 | LR__4458
2b140     A7 F0 03 F6 | 	mov	ptra, fp
2b144     B2 00 A0 FD | 	call	#popregs_
2b148                 | _fatfs_cc_find_volume_ret
2b148     2D 00 64 FD | 	ret
2b14c                 | 
2b14c                 | _fatfs_cc_mount_volume
2b14c     0B 4A 05 F6 | 	mov	COUNT_, #11
2b150     A8 00 A0 FD | 	call	#pushregs_
2b154     0A 1F 02 F6 | 	mov	local01, arg02
2b158     0B 21 02 F6 | 	mov	local02, arg03
2b15c     0F 01 68 FC | 	wrlong	#0, local01
2b160     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b164     FD 22 02 F6 | 	mov	local03, result1
2b168     00 22 56 F2 | 	cmps	local03, #0 wc
2b16c     0B FA 05 C6 |  if_b	mov	result1, #11
2b170     3C 05 90 CD |  if_b	jmp	#LR__4470
2b174     11 17 02 F6 | 	mov	arg03, local03
2b178     02 16 66 F0 | 	shl	arg03, #2
2b17c     F2 16 02 F1 | 	add	arg03, objptr
2b180     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b184     0C FA 05 A6 |  if_e	mov	result1, #12
2b188     24 05 90 AD |  if_e	jmp	#LR__4470
2b18c     0F 25 62 FC | 	wrlong	local04, local01
2b190     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b194     FE 20 06 F5 | 	and	local02, #254
2b198     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b19c     4C 00 90 AD |  if_e	jmp	#LR__4461
2b1a0     01 24 06 F1 | 	add	local04, #1
2b1a4     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b1a8     01 24 86 F1 | 	sub	local04, #1
2b1ac     01 FA 05 56 |  if_ne	mov	result1, #1
2b1b0                 | ' 
2b1b0                 | ' 	return Stat;
2b1b0     01 00 00 AF 
2b1b4     20 E4 05 A1 |  if_e	add	objptr, ##544
2b1b8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b1bc     01 00 00 AF 
2b1c0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b1c4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b1c8     01 16 CE F7 | 	test	arg03, #1 wz
2b1cc     1C 00 90 5D |  if_ne	jmp	#LR__4460
2b1d0     00 20 0E F2 | 	cmp	local02, #0 wz
2b1d4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b1d8     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b1dc                 | ' 				return FR_WRITE_PROTECTED;
2b1dc     0A FA 05 56 |  if_ne	mov	result1, #10
2b1e0     CC 04 90 5D |  if_ne	jmp	#LR__4470
2b1e4                 | ' 			}
2b1e4                 | ' 			return FR_OK;
2b1e4     00 FA 05 F6 | 	mov	result1, #0
2b1e8     C4 04 90 FD | 	jmp	#LR__4470
2b1ec                 | LR__4460
2b1ec                 | LR__4461
2b1ec     12 01 48 FC | 	wrbyte	#0, local04
2b1f0     01 24 06 F1 | 	add	local04, #1
2b1f4     12 23 42 FC | 	wrbyte	local03, local04
2b1f8     12 13 C2 FA | 	rdbyte	arg01, local04
2b1fc     01 24 86 F1 | 	sub	local04, #1
2b200     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b204     FD 16 02 F6 | 	mov	arg03, result1
2b208     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b20c     01 26 CE F7 | 	test	local05, #1 wz
2b210                 | ' 		return FR_NOT_READY;
2b210     03 FA 05 56 |  if_ne	mov	result1, #3
2b214     98 04 90 5D |  if_ne	jmp	#LR__4470
2b218     00 20 0E F2 | 	cmp	local02, #0 wz
2b21c     0B 27 02 56 |  if_ne	mov	local05, arg03
2b220     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b224     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b228                 | ' 		return FR_WRITE_PROTECTED;
2b228     0A FA 05 56 |  if_ne	mov	result1, #10
2b22c     80 04 90 5D |  if_ne	jmp	#LR__4470
2b230     12 13 02 F6 | 	mov	arg01, local04
2b234     00 14 06 F6 | 	mov	arg02, #0
2b238     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b23c     FD 12 02 F6 | 	mov	arg01, result1
2b240     04 12 0E F2 | 	cmp	arg01, #4 wz
2b244     01 FA 05 A6 |  if_e	mov	result1, #1
2b248     64 04 90 AD |  if_e	jmp	#LR__4470
2b24c     02 12 16 F2 | 	cmp	arg01, #2 wc
2b250     0D FA 05 36 |  if_ae	mov	result1, #13
2b254     58 04 90 3D |  if_ae	jmp	#LR__4470
2b258     30 24 06 F1 | 	add	local04, #48
2b25c     12 29 02 FB | 	rdlong	local06, local04
2b260     04 24 06 F1 | 	add	local04, #4
2b264     12 13 02 F6 | 	mov	arg01, local04
2b268     34 24 86 F1 | 	sub	local04, #52
2b26c     0B 12 06 F1 | 	add	arg01, #11
2b270                 | ' {
2b270                 | ' 
2b270                 | ' 	return *((WORD*)ptr);
2b270     09 FB E1 FA | 	rdword	result1, arg01
2b274     01 00 00 FF 
2b278     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b27c     0D FA 05 56 |  if_ne	mov	result1, #13
2b280     2C 04 90 5D |  if_ne	jmp	#LR__4470
2b284     34 24 06 F1 | 	add	local04, #52
2b288     12 13 02 F6 | 	mov	arg01, local04
2b28c     34 24 86 F1 | 	sub	local04, #52
2b290     16 12 06 F1 | 	add	arg01, #22
2b294                 | ' {
2b294                 | ' 
2b294                 | ' 	return *((WORD*)ptr);
2b294     09 FB E1 FA | 	rdword	result1, arg01
2b298     FD 2A 0A F6 | 	mov	local07, result1 wz
2b29c     18 00 90 5D |  if_ne	jmp	#LR__4462
2b2a0     34 24 06 F1 | 	add	local04, #52
2b2a4     12 13 02 F6 | 	mov	arg01, local04
2b2a8     34 24 86 F1 | 	sub	local04, #52
2b2ac     24 12 06 F1 | 	add	arg01, #36
2b2b0                 | ' {
2b2b0                 | ' 
2b2b0                 | ' 	return *((DWORD*)ptr);
2b2b0     09 FB 01 FB | 	rdlong	result1, arg01
2b2b4     FD 2A 02 F6 | 	mov	local07, result1
2b2b8                 | LR__4462
2b2b8     1C 24 06 F1 | 	add	local04, #28
2b2bc     12 2B 62 FC | 	wrlong	local07, local04
2b2c0     28 24 06 F1 | 	add	local04, #40
2b2c4     12 27 C2 FA | 	rdbyte	local05, local04
2b2c8     42 24 86 F1 | 	sub	local04, #66
2b2cc     12 27 42 FC | 	wrbyte	local05, local04
2b2d0     12 27 C2 FA | 	rdbyte	local05, local04
2b2d4     02 24 86 F1 | 	sub	local04, #2
2b2d8     01 26 0E F2 | 	cmp	local05, #1 wz
2b2dc     02 24 06 51 |  if_ne	add	local04, #2
2b2e0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b2e4     02 24 86 51 |  if_ne	sub	local04, #2
2b2e8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b2ec     0D FA 05 56 |  if_ne	mov	result1, #13
2b2f0     BC 03 90 5D |  if_ne	jmp	#LR__4470
2b2f4     02 24 06 F1 | 	add	local04, #2
2b2f8     12 27 C2 FA | 	rdbyte	local05, local04
2b2fc     13 2B 02 FD | 	qmul	local07, local05
2b300     3F 24 06 F1 | 	add	local04, #63
2b304     12 27 C2 FA | 	rdbyte	local05, local04
2b308     37 24 86 F1 | 	sub	local04, #55
2b30c     12 27 52 FC | 	wrword	local05, local04
2b310     12 27 EA FA | 	rdword	local05, local04 wz
2b314     0A 24 86 F1 | 	sub	local04, #10
2b318     18 2A 62 FD | 	getqx	local07
2b31c     20 00 90 AD |  if_e	jmp	#LR__4463
2b320     0A 24 06 F1 | 	add	local04, #10
2b324     12 27 E2 FA | 	rdword	local05, local04
2b328     13 23 32 F9 | 	getword	local03, local05, #0
2b32c     0A 24 86 F1 | 	sub	local04, #10
2b330     13 27 32 F9 | 	getword	local05, local05, #0
2b334     01 26 86 F1 | 	sub	local05, #1
2b338     13 23 CA F7 | 	test	local03, local05 wz
2b33c     08 00 90 AD |  if_e	jmp	#LR__4464
2b340                 | LR__4463
2b340     0D FA 05 F6 | 	mov	result1, #13
2b344     68 03 90 FD | 	jmp	#LR__4470
2b348                 | LR__4464
2b348     34 24 06 F1 | 	add	local04, #52
2b34c     12 13 02 F6 | 	mov	arg01, local04
2b350     11 12 06 F1 | 	add	arg01, #17
2b354                 | ' {
2b354                 | ' 
2b354                 | ' 	return *((WORD*)ptr);
2b354     09 FB E1 FA | 	rdword	result1, arg01
2b358     2C 24 86 F1 | 	sub	local04, #44
2b35c     12 FB 51 FC | 	wrword	result1, local04
2b360     12 27 E2 FA | 	rdword	local05, local04
2b364     08 24 86 F1 | 	sub	local04, #8
2b368     13 13 52 F6 | 	abs	arg01, local05 wc
2b36c     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b370     09 13 8A F6 | 	negc	arg01, arg01 wz
2b374     0D FA 05 56 |  if_ne	mov	result1, #13
2b378     34 03 90 5D |  if_ne	jmp	#LR__4470
2b37c     34 24 06 F1 | 	add	local04, #52
2b380     12 13 02 F6 | 	mov	arg01, local04
2b384     34 24 86 F1 | 	sub	local04, #52
2b388     13 12 06 F1 | 	add	arg01, #19
2b38c                 | ' {
2b38c                 | ' 
2b38c                 | ' 	return *((WORD*)ptr);
2b38c     09 FB E1 FA | 	rdword	result1, arg01
2b390     FD 2C 0A F6 | 	mov	local08, result1 wz
2b394     34 24 06 A1 |  if_e	add	local04, #52
2b398     12 13 02 A6 |  if_e	mov	arg01, local04
2b39c     34 24 86 A1 |  if_e	sub	local04, #52
2b3a0     20 12 06 A1 |  if_e	add	arg01, #32
2b3a4                 | ' {
2b3a4                 | ' 
2b3a4                 | ' 	return *((DWORD*)ptr);
2b3a4     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b3a8     34 24 06 F1 | 	add	local04, #52
2b3ac     12 13 02 F6 | 	mov	arg01, local04
2b3b0     34 24 86 F1 | 	sub	local04, #52
2b3b4     0E 12 06 F1 | 	add	arg01, #14
2b3b8                 | ' {
2b3b8                 | ' 
2b3b8                 | ' 	return *((WORD*)ptr);
2b3b8     09 FB E1 FA | 	rdword	result1, arg01
2b3bc     FD 12 02 F6 | 	mov	arg01, result1
2b3c0     09 27 02 F6 | 	mov	local05, arg01
2b3c4     0F 26 4E F7 | 	zerox	local05, #15 wz
2b3c8     0D FA 05 A6 |  if_e	mov	result1, #13
2b3cc     E0 02 90 AD |  if_e	jmp	#LR__4470
2b3d0     09 2F 32 F9 | 	getword	local09, arg01, #0
2b3d4     15 2F 02 F1 | 	add	local09, local07
2b3d8     08 24 06 F1 | 	add	local04, #8
2b3dc     12 27 E2 FA | 	rdword	local05, local04
2b3e0     08 24 86 F1 | 	sub	local04, #8
2b3e4     13 27 52 F6 | 	abs	local05, local05 wc
2b3e8     04 26 46 F0 | 	shr	local05, #4
2b3ec     13 2F 82 F3 | 	sumc	local09, local05
2b3f0     17 2D 12 F2 | 	cmp	local08, local09 wc
2b3f4     0D FA 05 C6 |  if_b	mov	result1, #13
2b3f8     B4 02 90 CD |  if_b	jmp	#LR__4470
2b3fc     17 2D 82 F1 | 	sub	local08, local09
2b400     0A 24 06 F1 | 	add	local04, #10
2b404     12 27 E2 FA | 	rdword	local05, local04
2b408     13 2D 12 FD | 	qdiv	local08, local05
2b40c     0A 24 86 F1 | 	sub	local04, #10
2b410     18 26 62 FD | 	getqx	local05
2b414     00 26 0E F2 | 	cmp	local05, #0 wz
2b418     0D FA 05 A6 |  if_e	mov	result1, #13
2b41c     90 02 90 AD |  if_e	jmp	#LR__4470
2b420     00 30 06 F6 | 	mov	local10, #0
2b424     FF FF 07 FF 
2b428     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b42c     03 30 06 C6 |  if_b	mov	local10, #3
2b430     7F 00 00 FF 
2b434     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b438     02 30 06 C6 |  if_b	mov	local10, #2
2b43c     07 00 00 FF 
2b440     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b444     01 30 06 C6 |  if_b	mov	local10, #1
2b448     00 30 0E F2 | 	cmp	local10, #0 wz
2b44c     0D FA 05 A6 |  if_e	mov	result1, #13
2b450     5C 02 90 AD |  if_e	jmp	#LR__4470
2b454     02 26 06 F1 | 	add	local05, #2
2b458     18 24 06 F1 | 	add	local04, #24
2b45c     12 27 62 FC | 	wrlong	local05, local04
2b460     08 24 06 F1 | 	add	local04, #8
2b464     12 29 62 FC | 	wrlong	local06, local04
2b468     14 27 02 F6 | 	mov	local05, local06
2b46c     09 13 32 F9 | 	getword	arg01, arg01, #0
2b470     09 27 02 F1 | 	add	local05, arg01
2b474     04 24 06 F1 | 	add	local04, #4
2b478     12 27 62 FC | 	wrlong	local05, local04
2b47c     14 27 02 F6 | 	mov	local05, local06
2b480     17 27 02 F1 | 	add	local05, local09
2b484     08 24 06 F1 | 	add	local04, #8
2b488     12 27 62 FC | 	wrlong	local05, local04
2b48c     2C 24 86 F1 | 	sub	local04, #44
2b490     03 30 0E F2 | 	cmp	local10, #3 wz
2b494     5C 00 90 5D |  if_ne	jmp	#LR__4465
2b498     34 24 06 F1 | 	add	local04, #52
2b49c     12 13 02 F6 | 	mov	arg01, local04
2b4a0     34 24 86 F1 | 	sub	local04, #52
2b4a4     2A 12 06 F1 | 	add	arg01, #42
2b4a8                 | ' {
2b4a8                 | ' 
2b4a8                 | ' 	return *((WORD*)ptr);
2b4a8     09 FB E9 FA | 	rdword	result1, arg01 wz
2b4ac     0D FA 05 56 |  if_ne	mov	result1, #13
2b4b0     FC 01 90 5D |  if_ne	jmp	#LR__4470
2b4b4     08 24 06 F1 | 	add	local04, #8
2b4b8     12 27 EA FA | 	rdword	local05, local04 wz
2b4bc     08 24 86 F1 | 	sub	local04, #8
2b4c0     0D FA 05 56 |  if_ne	mov	result1, #13
2b4c4     E8 01 90 5D |  if_ne	jmp	#LR__4470
2b4c8     34 24 06 F1 | 	add	local04, #52
2b4cc     12 13 02 F6 | 	mov	arg01, local04
2b4d0     2C 12 06 F1 | 	add	arg01, #44
2b4d4                 | ' {
2b4d4                 | ' 
2b4d4                 | ' 	return *((DWORD*)ptr);
2b4d4     09 FB 01 FB | 	rdlong	result1, arg01
2b4d8     0C 24 86 F1 | 	sub	local04, #12
2b4dc     12 FB 61 FC | 	wrlong	result1, local04
2b4e0     10 24 86 F1 | 	sub	local04, #16
2b4e4     12 33 02 FB | 	rdlong	local11, local04
2b4e8     18 24 86 F1 | 	sub	local04, #24
2b4ec     02 32 66 F0 | 	shl	local11, #2
2b4f0     6C 00 90 FD | 	jmp	#LR__4467
2b4f4                 | LR__4465
2b4f4     08 24 06 F1 | 	add	local04, #8
2b4f8     12 27 EA FA | 	rdword	local05, local04 wz
2b4fc     08 24 86 F1 | 	sub	local04, #8
2b500     0D FA 05 A6 |  if_e	mov	result1, #13
2b504     A8 01 90 AD |  if_e	jmp	#LR__4470
2b508     24 24 06 F1 | 	add	local04, #36
2b50c     12 27 02 FB | 	rdlong	local05, local04
2b510     15 27 02 F1 | 	add	local05, local07
2b514     04 24 06 F1 | 	add	local04, #4
2b518     12 27 62 FC | 	wrlong	local05, local04
2b51c     28 24 86 F1 | 	sub	local04, #40
2b520     02 30 0E F2 | 	cmp	local10, #2 wz
2b524     18 24 06 A1 |  if_e	add	local04, #24
2b528     12 27 02 AB |  if_e	rdlong	local05, local04
2b52c     18 24 86 A1 |  if_e	sub	local04, #24
2b530     01 26 66 A0 |  if_e	shl	local05, #1
2b534     24 00 90 AD |  if_e	jmp	#LR__4466
2b538     18 24 06 F1 | 	add	local04, #24
2b53c     12 33 02 FB | 	rdlong	local11, local04
2b540     19 27 02 F6 | 	mov	local05, local11
2b544     01 26 66 F0 | 	shl	local05, #1
2b548     19 27 02 F1 | 	add	local05, local11
2b54c     01 26 46 F0 | 	shr	local05, #1
2b550     18 24 86 F1 | 	sub	local04, #24
2b554     01 32 06 F5 | 	and	local11, #1
2b558     19 27 02 F1 | 	add	local05, local11
2b55c                 | LR__4466
2b55c     13 33 02 F6 | 	mov	local11, local05
2b560                 | LR__4467
2b560     FF 33 06 F1 | 	add	local11, #511
2b564     09 32 46 F0 | 	shr	local11, #9
2b568     1C 24 06 F1 | 	add	local04, #28
2b56c     12 17 02 FB | 	rdlong	arg03, local04
2b570     1C 24 86 F1 | 	sub	local04, #28
2b574     19 17 12 F2 | 	cmp	arg03, local11 wc
2b578     0D FA 05 C6 |  if_b	mov	result1, #13
2b57c     30 01 90 CD |  if_b	jmp	#LR__4470
2b580     14 24 06 F1 | 	add	local04, #20
2b584     FF FF FF FF 
2b588     12 FF 6B FC | 	wrlong	##-1, local04
2b58c     04 24 86 F1 | 	sub	local04, #4
2b590     FF FF FF FF 
2b594     12 FF 6B FC | 	wrlong	##-1, local04
2b598     0C 24 86 F1 | 	sub	local04, #12
2b59c     12 01 49 FC | 	wrbyte	#128, local04
2b5a0     04 24 86 F1 | 	sub	local04, #4
2b5a4     03 30 0E F2 | 	cmp	local10, #3 wz
2b5a8     D0 00 90 5D |  if_ne	jmp	#LR__4469
2b5ac     34 24 06 F1 | 	add	local04, #52
2b5b0     12 13 02 F6 | 	mov	arg01, local04
2b5b4     34 24 86 F1 | 	sub	local04, #52
2b5b8     30 12 06 F1 | 	add	arg01, #48
2b5bc                 | ' {
2b5bc                 | ' 
2b5bc                 | ' 	return *((WORD*)ptr);
2b5bc     09 FB E1 FA | 	rdword	result1, arg01
2b5c0     FD 26 32 F9 | 	getword	local05, result1, #0
2b5c4     01 26 0E F2 | 	cmp	local05, #1 wz
2b5c8     B0 00 90 5D |  if_ne	jmp	#LR__4469
2b5cc     01 28 06 F1 | 	add	local06, #1
2b5d0     12 13 02 F6 | 	mov	arg01, local04
2b5d4     14 15 02 F6 | 	mov	arg02, local06
2b5d8     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b5dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5e0     98 00 90 5D |  if_ne	jmp	#LR__4469
2b5e4     04 24 06 F1 | 	add	local04, #4
2b5e8     12 01 48 FC | 	wrbyte	#0, local04
2b5ec     30 24 06 F1 | 	add	local04, #48
2b5f0     12 13 02 F6 | 	mov	arg01, local04
2b5f4     34 24 86 F1 | 	sub	local04, #52
2b5f8     FE 13 06 F1 | 	add	arg01, #510
2b5fc                 | ' {
2b5fc                 | ' 
2b5fc                 | ' 	return *((WORD*)ptr);
2b5fc     09 FB E1 FA | 	rdword	result1, arg01
2b600     FD 26 32 F9 | 	getword	local05, result1, #0
2b604     55 00 00 FF 
2b608     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b60c     34 24 06 A1 |  if_e	add	local04, #52
2b610     12 13 02 A6 |  if_e	mov	arg01, local04
2b614     34 24 86 A1 |  if_e	sub	local04, #52
2b618                 | ' {
2b618                 | ' 
2b618                 | ' 	return *((DWORD*)ptr);
2b618     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b61c     A9 B0 20 AF 
2b620     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b624     54 00 90 5D |  if_ne	jmp	#LR__4468
2b628     34 24 06 F1 | 	add	local04, #52
2b62c     12 13 02 F6 | 	mov	arg01, local04
2b630     34 24 86 F1 | 	sub	local04, #52
2b634     E4 13 06 F1 | 	add	arg01, #484
2b638                 | ' {
2b638                 | ' 
2b638                 | ' 	return *((DWORD*)ptr);
2b638     09 FB 01 FB | 	rdlong	result1, arg01
2b63c     B9 A0 30 FF 
2b640     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b644     34 00 90 5D |  if_ne	jmp	#LR__4468
2b648     34 24 06 F1 | 	add	local04, #52
2b64c     12 13 02 F6 | 	mov	arg01, local04
2b650     E8 13 06 F1 | 	add	arg01, #488
2b654                 | ' {
2b654                 | ' 
2b654                 | ' 	return *((DWORD*)ptr);
2b654     09 FB 01 FB | 	rdlong	result1, arg01
2b658     20 24 86 F1 | 	sub	local04, #32
2b65c     12 FB 61 FC | 	wrlong	result1, local04
2b660     20 24 06 F1 | 	add	local04, #32
2b664     12 13 02 F6 | 	mov	arg01, local04
2b668     EC 13 06 F1 | 	add	arg01, #492
2b66c                 | ' {
2b66c                 | ' 
2b66c                 | ' 	return *((DWORD*)ptr);
2b66c     09 FB 01 FB | 	rdlong	result1, arg01
2b670     24 24 86 F1 | 	sub	local04, #36
2b674     12 FB 61 FC | 	wrlong	result1, local04
2b678     10 24 86 F1 | 	sub	local04, #16
2b67c                 | LR__4468
2b67c                 | LR__4469
2b67c     12 31 42 FC | 	wrbyte	local10, local04
2b680     04 E4 05 F1 | 	add	objptr, #4
2b684     F2 26 E2 FA | 	rdword	local05, objptr
2b688     01 26 06 F1 | 	add	local05, #1
2b68c     F2 26 52 FC | 	wrword	local05, objptr
2b690     F2 32 E2 FA | 	rdword	local11, objptr
2b694     06 24 06 F1 | 	add	local04, #6
2b698     12 33 52 FC | 	wrword	local11, local04
2b69c     04 E4 05 F1 | 	add	objptr, #4
2b6a0     06 24 06 F1 | 	add	local04, #6
2b6a4     12 E5 61 FC | 	wrlong	objptr, local04
2b6a8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b6a8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b6a8                 | ' 			{
2b6a8                 | ' 
2b6a8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b6a8                 | ' 
2b6a8                 | ' 
2b6a8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b6a8                 | ' 
2b6a8                 | ' 			}
2b6a8                 | ' 		}
2b6a8                 | ' 
2b6a8                 | ' 
2b6a8                 | ' 	}
2b6a8                 | ' 
2b6a8                 | ' 	fs->fs_type = (BYTE)fmt;
2b6a8                 | ' 	fs->id = ++Fsid;
2b6a8                 | ' 
2b6a8                 | ' 	fs->lfnbuf = LfnBuf;
2b6a8                 | ' #line 3567 "ff.c"
2b6a8                 | ' 	return FR_OK;
2b6a8     00 FA 05 F6 | 	mov	result1, #0
2b6ac     08 E4 85 F1 | 	sub	objptr, #8
2b6b0                 | LR__4470
2b6b0     A7 F0 03 F6 | 	mov	ptra, fp
2b6b4     B2 00 A0 FD | 	call	#popregs_
2b6b8                 | _fatfs_cc_mount_volume_ret
2b6b8     2D 00 64 FD | 	ret
2b6bc                 | 
2b6bc                 | _fatfs_cc_validate
2b6bc     09 01 0A F6 | 	mov	_var01, arg01 wz
2b6c0     09 02 06 F6 | 	mov	_var02, #9
2b6c4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b6c8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b6cc     50 00 90 AD |  if_e	jmp	#LR__4480
2b6d0     04 00 06 F1 | 	add	_var01, #4
2b6d4     00 07 E2 FA | 	rdword	_var04, _var01
2b6d8     04 00 86 F1 | 	sub	_var01, #4
2b6dc     00 13 02 FB | 	rdlong	arg01, _var01
2b6e0     06 12 06 F1 | 	add	arg01, #6
2b6e4     09 FB E1 FA | 	rdword	result1, arg01
2b6e8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b6ec     30 00 90 5D |  if_ne	jmp	#LR__4480
2b6f0     00 07 02 FB | 	rdlong	_var04, _var01
2b6f4     01 06 06 F1 | 	add	_var04, #1
2b6f8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b6fc     01 FA 05 56 |  if_ne	mov	result1, #1
2b700                 | ' 
2b700                 | ' 	return Stat;
2b700     01 00 00 AF 
2b704     20 E4 05 A1 |  if_e	add	objptr, ##544
2b708     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b70c     01 00 00 AF 
2b710     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b714     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b718     01 04 CE F7 | 	test	_var03, #1 wz
2b71c     00 02 06 A6 |  if_e	mov	_var02, #0
2b720                 | LR__4480
2b720     00 02 0E F2 | 	cmp	_var02, #0 wz
2b724     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b728     00 04 06 56 |  if_ne	mov	_var03, #0
2b72c     0A 05 62 FC | 	wrlong	_var03, arg02
2b730                 | ' 			res = FR_OK;
2b730                 | ' 		}
2b730                 | ' 
2b730                 | ' 	}
2b730                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b730                 | ' 	return res;
2b730     01 FB 01 F6 | 	mov	result1, _var02
2b734                 | _fatfs_cc_validate_ret
2b734     2D 00 64 FD | 	ret
2b738                 | 
2b738                 | _fatfs_cc_f_mount
2b738     01 4A 05 F6 | 	mov	COUNT_, #1
2b73c     A8 00 A0 FD | 	call	#pushregs_
2b740     20 F0 07 F1 | 	add	ptra, #32
2b744     04 4E 05 F1 | 	add	fp, #4
2b748     A7 12 62 FC | 	wrlong	arg01, fp
2b74c     04 4E 05 F1 | 	add	fp, #4
2b750     A7 14 62 FC | 	wrlong	arg02, fp
2b754     04 4E 05 F1 | 	add	fp, #4
2b758     A7 16 42 FC | 	wrbyte	arg03, fp
2b75c     04 4E 85 F1 | 	sub	fp, #4
2b760     A7 16 02 FB | 	rdlong	arg03, fp
2b764     14 4E 05 F1 | 	add	fp, #20
2b768     A7 16 62 FC | 	wrlong	arg03, fp
2b76c     A7 12 02 F6 | 	mov	arg01, fp
2b770     1C 4E 85 F1 | 	sub	fp, #28
2b774     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b778     14 4E 05 F1 | 	add	fp, #20
2b77c     A7 FA 61 FC | 	wrlong	result1, fp
2b780     14 4E 85 F1 | 	sub	fp, #20
2b784     00 FA 55 F2 | 	cmps	result1, #0 wc
2b788     0B FA 05 C6 |  if_b	mov	result1, #11
2b78c     C0 00 90 CD |  if_b	jmp	#LR__4491
2b790     14 4E 05 F1 | 	add	fp, #20
2b794     A7 16 02 FB | 	rdlong	arg03, fp
2b798     02 16 66 F0 | 	shl	arg03, #2
2b79c     F2 16 02 F1 | 	add	arg03, objptr
2b7a0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b7a4     04 4E 85 F1 | 	sub	fp, #4
2b7a8     A7 16 62 FC | 	wrlong	arg03, fp
2b7ac     10 4E 85 F1 | 	sub	fp, #16
2b7b0     28 00 90 AD |  if_e	jmp	#LR__4490
2b7b4     10 4E 05 F1 | 	add	fp, #16
2b7b8     A7 16 02 FB | 	rdlong	arg03, fp
2b7bc     10 4E 85 F1 | 	sub	fp, #16
2b7c0     01 16 06 F1 | 	add	arg03, #1
2b7c4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b7c8     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b7cc     10 4E 05 F1 | 	add	fp, #16
2b7d0     A7 16 02 FB | 	rdlong	arg03, fp
2b7d4     10 4E 85 F1 | 	sub	fp, #16
2b7d8     0B 01 48 FC | 	wrbyte	#0, arg03
2b7dc                 | LR__4490
2b7dc     04 4E 05 F1 | 	add	fp, #4
2b7e0     A7 1E 0A FB | 	rdlong	local01, fp wz
2b7e4     04 4E 85 F1 | 	sub	fp, #4
2b7e8     04 4E 05 51 |  if_ne	add	fp, #4
2b7ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b7f0     04 4E 85 51 |  if_ne	sub	fp, #4
2b7f4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b7f8     14 4E 05 F1 | 	add	fp, #20
2b7fc     A7 1E 02 FB | 	rdlong	local01, fp
2b800     02 1E 66 F0 | 	shl	local01, #2
2b804     F2 1E 02 F1 | 	add	local01, objptr
2b808     10 4E 85 F1 | 	sub	fp, #16
2b80c     A7 16 02 FB | 	rdlong	arg03, fp
2b810     0F 17 62 FC | 	wrlong	arg03, local01
2b814     08 4E 05 F1 | 	add	fp, #8
2b818     A7 1E CA FA | 	rdbyte	local01, fp wz
2b81c     0C 4E 85 F1 | 	sub	fp, #12
2b820     00 FA 05 A6 |  if_e	mov	result1, #0
2b824     28 00 90 AD |  if_e	jmp	#LR__4491
2b828     08 4E 05 F1 | 	add	fp, #8
2b82c     A7 12 02 F6 | 	mov	arg01, fp
2b830     04 4E 85 F1 | 	sub	fp, #4
2b834     A7 14 02 F6 | 	mov	arg02, fp
2b838     04 4E 85 F1 | 	sub	fp, #4
2b83c     00 16 06 F6 | 	mov	arg03, #0
2b840     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b844     18 4E 05 F1 | 	add	fp, #24
2b848     A7 FA 61 FC | 	wrlong	result1, fp
2b84c                 | ' 
2b84c                 | ' 	res = mount_volume(&path, &fs, 0);
2b84c                 | ' 	return res ;
2b84c     18 4E 85 F1 | 	sub	fp, #24
2b850                 | LR__4491
2b850     A7 F0 03 F6 | 	mov	ptra, fp
2b854     B2 00 A0 FD | 	call	#popregs_
2b858                 | _fatfs_cc_f_mount_ret
2b858     2D 00 64 FD | 	ret
2b85c                 | 
2b85c                 | _fatfs_cc_f_open
2b85c     02 4A 05 F6 | 	mov	COUNT_, #2
2b860     A8 00 A0 FD | 	call	#pushregs_
2b864     60 F0 07 F1 | 	add	ptra, #96
2b868     04 4E 05 F1 | 	add	fp, #4
2b86c     A7 12 62 FC | 	wrlong	arg01, fp
2b870     04 4E 05 F1 | 	add	fp, #4
2b874     A7 14 62 FC | 	wrlong	arg02, fp
2b878     04 4E 05 F1 | 	add	fp, #4
2b87c     A7 16 42 FC | 	wrbyte	arg03, fp
2b880     08 4E 85 F1 | 	sub	fp, #8
2b884     A7 18 0A FB | 	rdlong	arg04, fp wz
2b888     04 4E 85 F1 | 	sub	fp, #4
2b88c     09 FA 05 A6 |  if_e	mov	result1, #9
2b890     98 06 90 AD |  if_e	jmp	#LR__4517
2b894     0C 4E 05 F1 | 	add	fp, #12
2b898     A7 18 C2 FA | 	rdbyte	arg04, fp
2b89c     3F 18 06 F5 | 	and	arg04, #63
2b8a0     A7 18 42 FC | 	wrbyte	arg04, fp
2b8a4     04 4E 85 F1 | 	sub	fp, #4
2b8a8     A7 12 02 F6 | 	mov	arg01, fp
2b8ac     3C 4E 05 F1 | 	add	fp, #60
2b8b0     A7 14 02 F6 | 	mov	arg02, fp
2b8b4     38 4E 85 F1 | 	sub	fp, #56
2b8b8     A7 16 C2 FA | 	rdbyte	arg03, fp
2b8bc     0C 4E 85 F1 | 	sub	fp, #12
2b8c0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b8c4     10 4E 05 F1 | 	add	fp, #16
2b8c8     A7 FA 61 FC | 	wrlong	result1, fp
2b8cc     10 4E 85 F1 | 	sub	fp, #16
2b8d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8d4     2C 06 90 5D |  if_ne	jmp	#LR__4516
2b8d8     44 4E 05 F1 | 	add	fp, #68
2b8dc     A7 18 02 FB | 	rdlong	arg04, fp
2b8e0     30 4E 85 F1 | 	sub	fp, #48
2b8e4     A7 18 62 FC | 	wrlong	arg04, fp
2b8e8     A7 12 02 F6 | 	mov	arg01, fp
2b8ec     0C 4E 85 F1 | 	sub	fp, #12
2b8f0     A7 1E 02 FB | 	rdlong	local01, fp
2b8f4     08 4E 85 F1 | 	sub	fp, #8
2b8f8     0F 15 02 F6 | 	mov	arg02, local01
2b8fc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b900     10 4E 05 F1 | 	add	fp, #16
2b904     A7 FA 61 FC | 	wrlong	result1, fp
2b908     10 4E 85 F1 | 	sub	fp, #16
2b90c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b910     1C 00 90 5D |  if_ne	jmp	#LR__4500
2b914     3F 4E 05 F1 | 	add	fp, #63
2b918     A7 18 C2 FA | 	rdbyte	arg04, fp
2b91c     3F 4E 85 F1 | 	sub	fp, #63
2b920     80 18 CE F7 | 	test	arg04, #128 wz
2b924     10 4E 05 51 |  if_ne	add	fp, #16
2b928     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b92c     10 4E 85 51 |  if_ne	sub	fp, #16
2b930                 | LR__4500
2b930     0C 4E 05 F1 | 	add	fp, #12
2b934     A7 18 C2 FA | 	rdbyte	arg04, fp
2b938     0C 4E 85 F1 | 	sub	fp, #12
2b93c     1C 18 CE F7 | 	test	arg04, #28 wz
2b940     F0 01 90 AD |  if_e	jmp	#LR__4505
2b944     10 4E 05 F1 | 	add	fp, #16
2b948     A7 1E 0A FB | 	rdlong	local01, fp wz
2b94c     10 4E 85 F1 | 	sub	fp, #16
2b950     48 00 90 AD |  if_e	jmp	#LR__4502
2b954     10 4E 05 F1 | 	add	fp, #16
2b958     A7 18 02 FB | 	rdlong	arg04, fp
2b95c     10 4E 85 F1 | 	sub	fp, #16
2b960     04 18 0E F2 | 	cmp	arg04, #4 wz
2b964     1C 00 90 5D |  if_ne	jmp	#LR__4501
2b968     14 4E 05 F1 | 	add	fp, #20
2b96c     A7 12 02 F6 | 	mov	arg01, fp
2b970     14 4E 85 F1 | 	sub	fp, #20
2b974     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b978     10 4E 05 F1 | 	add	fp, #16
2b97c     A7 FA 61 FC | 	wrlong	result1, fp
2b980     10 4E 85 F1 | 	sub	fp, #16
2b984                 | LR__4501
2b984     0C 4E 05 F1 | 	add	fp, #12
2b988     A7 1E C2 FA | 	rdbyte	local01, fp
2b98c     08 1E 46 F5 | 	or	local01, #8
2b990     A7 1E 42 FC | 	wrbyte	local01, fp
2b994     0C 4E 85 F1 | 	sub	fp, #12
2b998     3C 00 90 FD | 	jmp	#LR__4504
2b99c                 | LR__4502
2b99c     1A 4E 05 F1 | 	add	fp, #26
2b9a0     A7 1E C2 FA | 	rdbyte	local01, fp
2b9a4     1A 4E 85 F1 | 	sub	fp, #26
2b9a8     11 1E CE F7 | 	test	local01, #17 wz
2b9ac     10 4E 05 51 |  if_ne	add	fp, #16
2b9b0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b9b4     10 4E 85 51 |  if_ne	sub	fp, #16
2b9b8     1C 00 90 5D |  if_ne	jmp	#LR__4503
2b9bc     0C 4E 05 F1 | 	add	fp, #12
2b9c0     A7 1E C2 FA | 	rdbyte	local01, fp
2b9c4     0C 4E 85 F1 | 	sub	fp, #12
2b9c8     04 1E CE F7 | 	test	local01, #4 wz
2b9cc     10 4E 05 51 |  if_ne	add	fp, #16
2b9d0     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b9d4     10 4E 85 51 |  if_ne	sub	fp, #16
2b9d8                 | LR__4503
2b9d8                 | LR__4504
2b9d8     10 4E 05 F1 | 	add	fp, #16
2b9dc     A7 1E 0A FB | 	rdlong	local01, fp wz
2b9e0     10 4E 85 F1 | 	sub	fp, #16
2b9e4     A8 01 90 5D |  if_ne	jmp	#LR__4508
2b9e8     0C 4E 05 F1 | 	add	fp, #12
2b9ec     A7 1E C2 FA | 	rdbyte	local01, fp
2b9f0     0C 4E 85 F1 | 	sub	fp, #12
2b9f4     08 1E CE F7 | 	test	local01, #8 wz
2b9f8     94 01 90 AD |  if_e	jmp	#LR__4508
2b9fc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2ba00     54 4E 05 F1 | 	add	fp, #84
2ba04     A7 FA 61 FC | 	wrlong	result1, fp
2ba08     24 4E 85 F1 | 	sub	fp, #36
2ba0c     A7 12 02 FB | 	rdlong	arg01, fp
2ba10     0E 12 06 F1 | 	add	arg01, #14
2ba14     09 FB 61 FC | 	wrlong	result1, arg01
2ba18     A7 12 02 FB | 	rdlong	arg01, fp
2ba1c     16 12 06 F1 | 	add	arg01, #22
2ba20     24 4E 05 F1 | 	add	fp, #36
2ba24     A7 14 02 FB | 	rdlong	arg02, fp
2ba28     09 15 62 FC | 	wrlong	arg02, arg01
2ba2c     10 4E 85 F1 | 	sub	fp, #16
2ba30     A7 12 02 FB | 	rdlong	arg01, fp
2ba34     14 4E 85 F1 | 	sub	fp, #20
2ba38     A7 14 02 FB | 	rdlong	arg02, fp
2ba3c     30 4E 85 F1 | 	sub	fp, #48
2ba40     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2ba44     48 4E 05 F1 | 	add	fp, #72
2ba48     A7 FA 61 FC | 	wrlong	result1, fp
2ba4c     18 4E 85 F1 | 	sub	fp, #24
2ba50     A7 1E 02 FB | 	rdlong	local01, fp
2ba54     0B 1E 06 F1 | 	add	local01, #11
2ba58     0F 41 48 FC | 	wrbyte	#32, local01
2ba5c     14 4E 05 F1 | 	add	fp, #20
2ba60     A7 12 02 FB | 	rdlong	arg01, fp
2ba64     14 4E 85 F1 | 	sub	fp, #20
2ba68     A7 14 02 FB | 	rdlong	arg02, fp
2ba6c     30 4E 85 F1 | 	sub	fp, #48
2ba70     00 16 06 F6 | 	mov	arg03, #0
2ba74     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2ba78     30 4E 05 F1 | 	add	fp, #48
2ba7c     A7 12 02 FB | 	rdlong	arg01, fp
2ba80     1C 12 06 F1 | 	add	arg01, #28
2ba84     09 01 68 FC | 	wrlong	#0, arg01
2ba88     14 4E 05 F1 | 	add	fp, #20
2ba8c     A7 1E 02 FB | 	rdlong	local01, fp
2ba90     03 1E 06 F1 | 	add	local01, #3
2ba94     0F 03 48 FC | 	wrbyte	#1, local01
2ba98     04 4E 05 F1 | 	add	fp, #4
2ba9c     A7 1E 0A FB | 	rdlong	local01, fp wz
2baa0     48 4E 85 F1 | 	sub	fp, #72
2baa4     E8 00 90 AD |  if_e	jmp	#LR__4508
2baa8     44 4E 05 F1 | 	add	fp, #68
2baac     A7 1E 02 FB | 	rdlong	local01, fp
2bab0     30 1E 06 F1 | 	add	local01, #48
2bab4     0F 1F 02 FB | 	rdlong	local01, local01
2bab8     14 4E 05 F1 | 	add	fp, #20
2babc     A7 1E 62 FC | 	wrlong	local01, fp
2bac0     44 4E 85 F1 | 	sub	fp, #68
2bac4     A7 12 02 F6 | 	mov	arg01, fp
2bac8     34 4E 05 F1 | 	add	fp, #52
2bacc     A7 14 02 FB | 	rdlong	arg02, fp
2bad0     48 4E 85 F1 | 	sub	fp, #72
2bad4     00 16 06 F6 | 	mov	arg03, #0
2bad8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2badc     10 4E 05 F1 | 	add	fp, #16
2bae0     A7 FA 61 FC | 	wrlong	result1, fp
2bae4     10 4E 85 F1 | 	sub	fp, #16
2bae8     00 FA 0D F2 | 	cmp	result1, #0 wz
2baec     A0 00 90 5D |  if_ne	jmp	#LR__4508
2baf0     44 4E 05 F1 | 	add	fp, #68
2baf4     A7 12 02 FB | 	rdlong	arg01, fp
2baf8     14 4E 05 F1 | 	add	fp, #20
2bafc     A7 14 02 FB | 	rdlong	arg02, fp
2bb00     58 4E 85 F1 | 	sub	fp, #88
2bb04     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2bb08     10 4E 05 F1 | 	add	fp, #16
2bb0c     A7 FA 61 FC | 	wrlong	result1, fp
2bb10     34 4E 05 F1 | 	add	fp, #52
2bb14     A7 18 02 FB | 	rdlong	arg04, fp
2bb18     04 4E 05 F1 | 	add	fp, #4
2bb1c     A7 1E 02 FB | 	rdlong	local01, fp
2bb20     48 4E 85 F1 | 	sub	fp, #72
2bb24     01 1E 86 F1 | 	sub	local01, #1
2bb28     10 18 06 F1 | 	add	arg04, #16
2bb2c     0C 1F 62 FC | 	wrlong	local01, arg04
2bb30     5C 00 90 FD | 	jmp	#LR__4508
2bb34                 | LR__4505
2bb34     10 4E 05 F1 | 	add	fp, #16
2bb38     A7 18 0A FB | 	rdlong	arg04, fp wz
2bb3c     10 4E 85 F1 | 	sub	fp, #16
2bb40     4C 00 90 5D |  if_ne	jmp	#LR__4507
2bb44     1A 4E 05 F1 | 	add	fp, #26
2bb48     A7 18 C2 FA | 	rdbyte	arg04, fp
2bb4c     1A 4E 85 F1 | 	sub	fp, #26
2bb50     10 18 CE F7 | 	test	arg04, #16 wz
2bb54     10 4E 05 51 |  if_ne	add	fp, #16
2bb58     A7 08 68 5C |  if_ne	wrlong	#4, fp
2bb5c     10 4E 85 51 |  if_ne	sub	fp, #16
2bb60     2C 00 90 5D |  if_ne	jmp	#LR__4506
2bb64     0C 4E 05 F1 | 	add	fp, #12
2bb68     A7 18 C2 FA | 	rdbyte	arg04, fp
2bb6c     0C 4E 85 F1 | 	sub	fp, #12
2bb70     02 18 CE F7 | 	test	arg04, #2 wz
2bb74     1A 4E 05 51 |  if_ne	add	fp, #26
2bb78     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2bb7c     1A 4E 85 51 |  if_ne	sub	fp, #26
2bb80     01 1E CE 57 |  if_ne	test	local01, #1 wz
2bb84     10 4E 05 51 |  if_ne	add	fp, #16
2bb88     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bb8c     10 4E 85 51 |  if_ne	sub	fp, #16
2bb90                 | LR__4506
2bb90                 | LR__4507
2bb90                 | LR__4508
2bb90     10 4E 05 F1 | 	add	fp, #16
2bb94     A7 1E 0A FB | 	rdlong	local01, fp wz
2bb98     10 4E 85 F1 | 	sub	fp, #16
2bb9c     60 00 90 5D |  if_ne	jmp	#LR__4509
2bba0     0C 4E 05 F1 | 	add	fp, #12
2bba4     A7 20 C2 FA | 	rdbyte	local02, fp
2bba8     0C 4E 85 F1 | 	sub	fp, #12
2bbac     08 20 CE F7 | 	test	local02, #8 wz
2bbb0     0C 4E 05 51 |  if_ne	add	fp, #12
2bbb4     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2bbb8     40 20 46 55 |  if_ne	or	local02, #64
2bbbc     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2bbc0     0C 4E 85 51 |  if_ne	sub	fp, #12
2bbc4     04 4E 05 F1 | 	add	fp, #4
2bbc8     A7 20 02 FB | 	rdlong	local02, fp
2bbcc     40 4E 05 F1 | 	add	fp, #64
2bbd0     A7 1E 02 FB | 	rdlong	local01, fp
2bbd4     30 1E 06 F1 | 	add	local01, #48
2bbd8     0F 1F 02 FB | 	rdlong	local01, local01
2bbdc     20 20 06 F1 | 	add	local02, #32
2bbe0     10 1F 62 FC | 	wrlong	local01, local02
2bbe4     40 4E 85 F1 | 	sub	fp, #64
2bbe8     A7 20 02 FB | 	rdlong	local02, fp
2bbec     2C 4E 05 F1 | 	add	fp, #44
2bbf0     A7 1E 02 FB | 	rdlong	local01, fp
2bbf4     30 4E 85 F1 | 	sub	fp, #48
2bbf8     24 20 06 F1 | 	add	local02, #36
2bbfc     10 1F 62 FC | 	wrlong	local01, local02
2bc00                 | LR__4509
2bc00     10 4E 05 F1 | 	add	fp, #16
2bc04     A7 20 0A FB | 	rdlong	local02, fp wz
2bc08     10 4E 85 F1 | 	sub	fp, #16
2bc0c     F4 02 90 5D |  if_ne	jmp	#LR__4515
2bc10     04 4E 05 F1 | 	add	fp, #4
2bc14     A7 20 02 FB | 	rdlong	local02, fp
2bc18     40 4E 05 F1 | 	add	fp, #64
2bc1c     A7 12 02 FB | 	rdlong	arg01, fp
2bc20     14 4E 85 F1 | 	sub	fp, #20
2bc24     A7 14 02 FB | 	rdlong	arg02, fp
2bc28     30 4E 85 F1 | 	sub	fp, #48
2bc2c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bc30     08 20 06 F1 | 	add	local02, #8
2bc34     10 FB 61 FC | 	wrlong	result1, local02
2bc38     04 4E 05 F1 | 	add	fp, #4
2bc3c     A7 20 02 FB | 	rdlong	local02, fp
2bc40     2C 4E 05 F1 | 	add	fp, #44
2bc44     A7 12 02 FB | 	rdlong	arg01, fp
2bc48     1C 12 06 F1 | 	add	arg01, #28
2bc4c                 | ' {
2bc4c                 | ' 
2bc4c                 | ' 	return *((DWORD*)ptr);
2bc4c     09 FB 01 FB | 	rdlong	result1, arg01
2bc50     0C 20 06 F1 | 	add	local02, #12
2bc54     10 FB 61 FC | 	wrlong	result1, local02
2bc58     2C 4E 85 F1 | 	sub	fp, #44
2bc5c     A7 20 02 FB | 	rdlong	local02, fp
2bc60     40 4E 05 F1 | 	add	fp, #64
2bc64     A7 1E 02 FB | 	rdlong	local01, fp
2bc68     10 1F 62 FC | 	wrlong	local01, local02
2bc6c     40 4E 85 F1 | 	sub	fp, #64
2bc70     A7 20 02 FB | 	rdlong	local02, fp
2bc74     40 4E 05 F1 | 	add	fp, #64
2bc78     A7 1E 02 FB | 	rdlong	local01, fp
2bc7c     06 1E 06 F1 | 	add	local01, #6
2bc80     0F 1F E2 FA | 	rdword	local01, local01
2bc84     04 20 06 F1 | 	add	local02, #4
2bc88     10 1F 52 FC | 	wrword	local01, local02
2bc8c     40 4E 85 F1 | 	sub	fp, #64
2bc90     A7 20 02 FB | 	rdlong	local02, fp
2bc94     08 4E 05 F1 | 	add	fp, #8
2bc98     A7 1E C2 FA | 	rdbyte	local01, fp
2bc9c     10 20 06 F1 | 	add	local02, #16
2bca0     10 1F 42 FC | 	wrbyte	local01, local02
2bca4     08 4E 85 F1 | 	sub	fp, #8
2bca8     A7 20 02 FB | 	rdlong	local02, fp
2bcac     11 20 06 F1 | 	add	local02, #17
2bcb0     10 01 48 FC | 	wrbyte	#0, local02
2bcb4     A7 20 02 FB | 	rdlong	local02, fp
2bcb8     1C 20 06 F1 | 	add	local02, #28
2bcbc     10 01 68 FC | 	wrlong	#0, local02
2bcc0     A7 20 02 FB | 	rdlong	local02, fp
2bcc4     14 20 06 F1 | 	add	local02, #20
2bcc8     10 01 68 FC | 	wrlong	#0, local02
2bccc     A7 12 02 FB | 	rdlong	arg01, fp
2bcd0     04 4E 85 F1 | 	sub	fp, #4
2bcd4     28 12 06 F1 | 	add	arg01, #40
2bcd8     00 14 06 F6 | 	mov	arg02, #0
2bcdc     09 16 C6 F9 | 	decod	arg03, #9
2bce0     98 00 A0 FD | 	call	#\builtin_bytefill_
2bce4     0C 4E 05 F1 | 	add	fp, #12
2bce8     A7 20 C2 FA | 	rdbyte	local02, fp
2bcec     0C 4E 85 F1 | 	sub	fp, #12
2bcf0     20 20 CE F7 | 	test	local02, #32 wz
2bcf4     0C 02 90 AD |  if_e	jmp	#LR__4514
2bcf8     04 4E 05 F1 | 	add	fp, #4
2bcfc     A7 1E 02 FB | 	rdlong	local01, fp
2bd00     04 4E 85 F1 | 	sub	fp, #4
2bd04     0C 1E 06 F1 | 	add	local01, #12
2bd08     0F 21 02 FB | 	rdlong	local02, local01
2bd0c     01 20 16 F2 | 	cmp	local02, #1 wc
2bd10     F0 01 90 CD |  if_b	jmp	#LR__4514
2bd14     04 4E 05 F1 | 	add	fp, #4
2bd18     A7 1E 02 FB | 	rdlong	local01, fp
2bd1c     0F 21 02 F6 | 	mov	local02, local01
2bd20     0C 1E 06 F1 | 	add	local01, #12
2bd24     0F 1F 02 FB | 	rdlong	local01, local01
2bd28     14 20 06 F1 | 	add	local02, #20
2bd2c     10 1F 62 FC | 	wrlong	local01, local02
2bd30     40 4E 05 F1 | 	add	fp, #64
2bd34     A7 20 02 FB | 	rdlong	local02, fp
2bd38     0A 20 06 F1 | 	add	local02, #10
2bd3c     10 21 E2 FA | 	rdword	local02, local02
2bd40     09 20 66 F0 | 	shl	local02, #9
2bd44     08 4E 05 F1 | 	add	fp, #8
2bd48     A7 20 62 FC | 	wrlong	local02, fp
2bd4c     48 4E 85 F1 | 	sub	fp, #72
2bd50     A7 20 02 FB | 	rdlong	local02, fp
2bd54     08 20 06 F1 | 	add	local02, #8
2bd58     10 1F 02 FB | 	rdlong	local01, local02
2bd5c     4C 4E 05 F1 | 	add	fp, #76
2bd60     A7 1E 62 FC | 	wrlong	local01, fp
2bd64                 | ' 				fp->fptr = fp->obj.objsize;
2bd64                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bd64                 | ' 				clst = fp->obj.sclust;
2bd64                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bd64     4C 4E 85 F1 | 	sub	fp, #76
2bd68     A7 20 02 FB | 	rdlong	local02, fp
2bd6c     0C 20 06 F1 | 	add	local02, #12
2bd70     10 1F 02 FB | 	rdlong	local01, local02
2bd74     58 4E 05 F1 | 	add	fp, #88
2bd78     A7 1E 62 FC | 	wrlong	local01, fp
2bd7c     5C 4E 85 F1 | 	sub	fp, #92
2bd80                 | LR__4510
2bd80     10 4E 05 F1 | 	add	fp, #16
2bd84     A7 20 0A FB | 	rdlong	local02, fp wz
2bd88     10 4E 85 F1 | 	sub	fp, #16
2bd8c     94 00 90 5D |  if_ne	jmp	#LR__4511
2bd90     5C 4E 05 F1 | 	add	fp, #92
2bd94     A7 20 02 FB | 	rdlong	local02, fp
2bd98     10 4E 85 F1 | 	sub	fp, #16
2bd9c     A7 1E 02 FB | 	rdlong	local01, fp
2bda0     4C 4E 85 F1 | 	sub	fp, #76
2bda4     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bda8     78 00 90 ED |  if_be	jmp	#LR__4511
2bdac     04 4E 05 F1 | 	add	fp, #4
2bdb0     A7 12 02 FB | 	rdlong	arg01, fp
2bdb4     4C 4E 05 F1 | 	add	fp, #76
2bdb8     A7 14 02 FB | 	rdlong	arg02, fp
2bdbc     50 4E 85 F1 | 	sub	fp, #80
2bdc0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bdc4     50 4E 05 F1 | 	add	fp, #80
2bdc8     A7 FA 61 FC | 	wrlong	result1, fp
2bdcc     50 4E 85 F1 | 	sub	fp, #80
2bdd0     02 FA 15 F2 | 	cmp	result1, #2 wc
2bdd4     10 4E 05 C1 |  if_b	add	fp, #16
2bdd8     A7 04 68 CC |  if_b	wrlong	#2, fp
2bddc     10 4E 85 C1 |  if_b	sub	fp, #16
2bde0     50 4E 05 F1 | 	add	fp, #80
2bde4     A7 20 02 FB | 	rdlong	local02, fp
2bde8     50 4E 85 F1 | 	sub	fp, #80
2bdec     FF FF 7F FF 
2bdf0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bdf4     10 4E 05 A1 |  if_e	add	fp, #16
2bdf8     A7 02 68 AC |  if_e	wrlong	#1, fp
2bdfc     10 4E 85 A1 |  if_e	sub	fp, #16
2be00     5C 4E 05 F1 | 	add	fp, #92
2be04     A7 20 02 FB | 	rdlong	local02, fp
2be08     10 4E 85 F1 | 	sub	fp, #16
2be0c     A7 1E 02 FB | 	rdlong	local01, fp
2be10     0F 21 82 F1 | 	sub	local02, local01
2be14     10 4E 05 F1 | 	add	fp, #16
2be18     A7 20 62 FC | 	wrlong	local02, fp
2be1c     5C 4E 85 F1 | 	sub	fp, #92
2be20     5C FF 9F FD | 	jmp	#LR__4510
2be24                 | LR__4511
2be24     04 4E 05 F1 | 	add	fp, #4
2be28     A7 20 02 FB | 	rdlong	local02, fp
2be2c     4C 4E 05 F1 | 	add	fp, #76
2be30     A7 1E 02 FB | 	rdlong	local01, fp
2be34     18 20 06 F1 | 	add	local02, #24
2be38     10 1F 62 FC | 	wrlong	local01, local02
2be3c     40 4E 85 F1 | 	sub	fp, #64
2be40     A7 20 0A FB | 	rdlong	local02, fp wz
2be44     10 4E 85 F1 | 	sub	fp, #16
2be48     B8 00 90 5D |  if_ne	jmp	#LR__4513
2be4c     5C 4E 05 F1 | 	add	fp, #92
2be50     A7 1E 02 FB | 	rdlong	local01, fp
2be54     5C 4E 85 F1 | 	sub	fp, #92
2be58     FF 1F CE F7 | 	test	local01, #511 wz
2be5c     A4 00 90 AD |  if_e	jmp	#LR__4513
2be60     44 4E 05 F1 | 	add	fp, #68
2be64     A7 12 02 FB | 	rdlong	arg01, fp
2be68     0C 4E 05 F1 | 	add	fp, #12
2be6c     A7 14 02 FB | 	rdlong	arg02, fp
2be70     50 4E 85 F1 | 	sub	fp, #80
2be74     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2be78     58 4E 05 F1 | 	add	fp, #88
2be7c     A7 FA 61 FC | 	wrlong	result1, fp
2be80     00 FA 4D F2 | 	cmps	result1, #0 wz
2be84     58 4E 85 F1 | 	sub	fp, #88
2be88     10 4E 05 A1 |  if_e	add	fp, #16
2be8c     A7 04 68 AC |  if_e	wrlong	#2, fp
2be90     10 4E 85 A1 |  if_e	sub	fp, #16
2be94     6C 00 90 AD |  if_e	jmp	#LR__4512
2be98     04 4E 05 F1 | 	add	fp, #4
2be9c     A7 20 02 FB | 	rdlong	local02, fp
2bea0     54 4E 05 F1 | 	add	fp, #84
2bea4     A7 1E 02 FB | 	rdlong	local01, fp
2bea8     04 4E 05 F1 | 	add	fp, #4
2beac     A7 18 02 FB | 	rdlong	arg04, fp
2beb0     09 18 46 F0 | 	shr	arg04, #9
2beb4     0C 1F 02 F1 | 	add	local01, arg04
2beb8     1C 20 06 F1 | 	add	local02, #28
2bebc     10 1F 62 FC | 	wrlong	local01, local02
2bec0     18 4E 85 F1 | 	sub	fp, #24
2bec4     A7 20 02 FB | 	rdlong	local02, fp
2bec8     01 20 06 F1 | 	add	local02, #1
2becc     10 13 C2 FA | 	rdbyte	arg01, local02
2bed0     40 4E 85 F1 | 	sub	fp, #64
2bed4     A7 20 02 FB | 	rdlong	local02, fp
2bed8     10 15 02 F6 | 	mov	arg02, local02
2bedc     28 14 06 F1 | 	add	arg02, #40
2bee0     04 4E 85 F1 | 	sub	fp, #4
2bee4     1C 20 06 F1 | 	add	local02, #28
2bee8     10 17 02 FB | 	rdlong	arg03, local02
2beec     01 18 06 F6 | 	mov	arg04, #1
2bef0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bef4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bef8     10 4E 05 51 |  if_ne	add	fp, #16
2befc     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bf00     10 4E 85 51 |  if_ne	sub	fp, #16
2bf04                 | LR__4512
2bf04                 | LR__4513
2bf04                 | LR__4514
2bf04                 | LR__4515
2bf04                 | LR__4516
2bf04     10 4E 05 F1 | 	add	fp, #16
2bf08     A7 20 0A FB | 	rdlong	local02, fp wz
2bf0c     10 4E 85 F1 | 	sub	fp, #16
2bf10     04 4E 05 51 |  if_ne	add	fp, #4
2bf14     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bf18     04 4E 85 51 |  if_ne	sub	fp, #4
2bf1c     10 01 68 5C |  if_ne	wrlong	#0, local02
2bf20                 | ' 
2bf20                 | ' 	return res ;
2bf20     10 4E 05 F1 | 	add	fp, #16
2bf24     A7 FA 01 FB | 	rdlong	result1, fp
2bf28     10 4E 85 F1 | 	sub	fp, #16
2bf2c                 | LR__4517
2bf2c     A7 F0 03 F6 | 	mov	ptra, fp
2bf30     B2 00 A0 FD | 	call	#popregs_
2bf34                 | _fatfs_cc_f_open_ret
2bf34     2D 00 64 FD | 	ret
2bf38                 | 
2bf38                 | _fatfs_cc_f_read
2bf38     0E 4A 05 F6 | 	mov	COUNT_, #14
2bf3c     A8 00 A0 FD | 	call	#pushregs_
2bf40     38 F0 07 F1 | 	add	ptra, #56
2bf44     04 4E 05 F1 | 	add	fp, #4
2bf48     A7 12 62 FC | 	wrlong	arg01, fp
2bf4c     04 4E 05 F1 | 	add	fp, #4
2bf50     A7 14 62 FC | 	wrlong	arg02, fp
2bf54     04 4E 05 F1 | 	add	fp, #4
2bf58     A7 16 62 FC | 	wrlong	arg03, fp
2bf5c     04 4E 05 F1 | 	add	fp, #4
2bf60     A7 18 62 FC | 	wrlong	arg04, fp
2bf64     08 4E 85 F1 | 	sub	fp, #8
2bf68     A7 FA 01 FB | 	rdlong	result1, fp
2bf6c     2C 4E 05 F1 | 	add	fp, #44
2bf70     A7 FA 61 FC | 	wrlong	result1, fp
2bf74     24 4E 85 F1 | 	sub	fp, #36
2bf78     A7 FA 01 FB | 	rdlong	result1, fp
2bf7c     FD 00 68 FC | 	wrlong	#0, result1
2bf80     0C 4E 85 F1 | 	sub	fp, #12
2bf84     A7 12 02 FB | 	rdlong	arg01, fp
2bf88     14 4E 05 F1 | 	add	fp, #20
2bf8c     A7 14 02 F6 | 	mov	arg02, fp
2bf90     18 4E 85 F1 | 	sub	fp, #24
2bf94     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bf98     14 4E 05 F1 | 	add	fp, #20
2bf9c     A7 FA 61 FC | 	wrlong	result1, fp
2bfa0     00 FA 4D F2 | 	cmps	result1, #0 wz
2bfa4     14 4E 85 F1 | 	sub	fp, #20
2bfa8     20 00 90 5D |  if_ne	jmp	#LR__4520
2bfac     04 4E 05 F1 | 	add	fp, #4
2bfb0     A7 14 02 FB | 	rdlong	arg02, fp
2bfb4     11 14 06 F1 | 	add	arg02, #17
2bfb8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bfbc     10 4E 05 F1 | 	add	fp, #16
2bfc0     A7 14 62 FC | 	wrlong	arg02, fp
2bfc4     14 4E 85 F1 | 	sub	fp, #20
2bfc8     10 00 90 AD |  if_e	jmp	#LR__4521
2bfcc                 | LR__4520
2bfcc     14 4E 05 F1 | 	add	fp, #20
2bfd0     A7 FA 01 FB | 	rdlong	result1, fp
2bfd4     14 4E 85 F1 | 	sub	fp, #20
2bfd8     EC 05 90 FD | 	jmp	#LR__4540
2bfdc                 | LR__4521
2bfdc     04 4E 05 F1 | 	add	fp, #4
2bfe0     A7 18 02 FB | 	rdlong	arg04, fp
2bfe4     04 4E 85 F1 | 	sub	fp, #4
2bfe8     10 18 06 F1 | 	add	arg04, #16
2bfec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bff0     01 18 CE F7 | 	test	arg04, #1 wz
2bff4     07 FA 05 A6 |  if_e	mov	result1, #7
2bff8     CC 05 90 AD |  if_e	jmp	#LR__4540
2bffc     04 4E 05 F1 | 	add	fp, #4
2c000     A7 1E 02 FB | 	rdlong	local01, fp
2c004     0F 21 02 F6 | 	mov	local02, local01
2c008     0C 20 06 F1 | 	add	local02, #12
2c00c     10 23 02 FB | 	rdlong	local03, local02
2c010     14 1E 06 F1 | 	add	local01, #20
2c014     0F 1F 02 FB | 	rdlong	local01, local01
2c018     0F 23 82 F1 | 	sub	local03, local01
2c01c     20 4E 05 F1 | 	add	fp, #32
2c020     A7 22 62 FC | 	wrlong	local03, fp
2c024     18 4E 85 F1 | 	sub	fp, #24
2c028     A7 24 02 FB | 	rdlong	local04, fp
2c02c     0C 4E 85 F1 | 	sub	fp, #12
2c030     11 25 1A F2 | 	cmp	local04, local03 wcz
2c034     24 4E 05 11 |  if_a	add	fp, #36
2c038     A7 24 02 1B |  if_a	rdlong	local04, fp
2c03c     18 4E 85 11 |  if_a	sub	fp, #24
2c040     A7 24 62 1C |  if_a	wrlong	local04, fp
2c044     0C 4E 85 11 |  if_a	sub	fp, #12
2c048                 | ' 
2c048                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2c048                 | LR__4522
2c048     0C 4E 05 F1 | 	add	fp, #12
2c04c     A7 20 02 FB | 	rdlong	local02, fp
2c050     0C 4E 85 F1 | 	sub	fp, #12
2c054     10 25 02 F6 | 	mov	local04, local02
2c058     01 24 16 F2 | 	cmp	local04, #1 wc
2c05c     64 05 90 CD |  if_b	jmp	#LR__4539
2c060     04 4E 05 F1 | 	add	fp, #4
2c064     A7 22 02 FB | 	rdlong	local03, fp
2c068     04 4E 85 F1 | 	sub	fp, #4
2c06c     14 22 06 F1 | 	add	local03, #20
2c070     11 23 02 FB | 	rdlong	local03, local03
2c074     FF 23 CE F7 | 	test	local03, #511 wz
2c078     3C 04 90 5D |  if_ne	jmp	#LR__4537
2c07c     04 4E 05 F1 | 	add	fp, #4
2c080     A7 1E 02 FB | 	rdlong	local01, fp
2c084     14 1E 06 F1 | 	add	local01, #20
2c088     0F 23 02 FB | 	rdlong	local03, local01
2c08c     09 22 46 F0 | 	shr	local03, #9
2c090     14 4E 05 F1 | 	add	fp, #20
2c094     A7 26 02 FB | 	rdlong	local05, fp
2c098     13 29 02 F6 | 	mov	local06, local05
2c09c     0A 28 06 F1 | 	add	local06, #10
2c0a0     14 2B E2 FA | 	rdword	local07, local06
2c0a4     0A 28 86 F1 | 	sub	local06, #10
2c0a8     15 2D 32 F9 | 	getword	local08, local07, #0
2c0ac     01 2C 86 F1 | 	sub	local08, #1
2c0b0     16 23 0A F5 | 	and	local03, local08 wz
2c0b4     18 4E 05 F1 | 	add	fp, #24
2c0b8     A7 22 62 FC | 	wrlong	local03, fp
2c0bc     30 4E 85 F1 | 	sub	fp, #48
2c0c0     E0 00 90 5D |  if_ne	jmp	#LR__4527
2c0c4     04 4E 05 F1 | 	add	fp, #4
2c0c8     A7 22 02 FB | 	rdlong	local03, fp
2c0cc     04 4E 85 F1 | 	sub	fp, #4
2c0d0     14 22 06 F1 | 	add	local03, #20
2c0d4     11 23 0A FB | 	rdlong	local03, local03 wz
2c0d8     20 00 90 5D |  if_ne	jmp	#LR__4523
2c0dc     04 4E 05 F1 | 	add	fp, #4
2c0e0     A7 22 02 FB | 	rdlong	local03, fp
2c0e4     08 22 06 F1 | 	add	local03, #8
2c0e8     11 23 02 FB | 	rdlong	local03, local03
2c0ec     18 4E 05 F1 | 	add	fp, #24
2c0f0     A7 22 62 FC | 	wrlong	local03, fp
2c0f4     1C 4E 85 F1 | 	sub	fp, #28
2c0f8     28 00 90 FD | 	jmp	#LR__4524
2c0fc                 | LR__4523
2c0fc     04 4E 05 F1 | 	add	fp, #4
2c100     A7 2C 02 FB | 	rdlong	local08, fp
2c104     16 13 02 F6 | 	mov	arg01, local08
2c108     04 4E 85 F1 | 	sub	fp, #4
2c10c     18 2C 06 F1 | 	add	local08, #24
2c110     16 15 02 FB | 	rdlong	arg02, local08
2c114     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c118     1C 4E 05 F1 | 	add	fp, #28
2c11c     A7 FA 61 FC | 	wrlong	result1, fp
2c120     1C 4E 85 F1 | 	sub	fp, #28
2c124                 | LR__4524
2c124     1C 4E 05 F1 | 	add	fp, #28
2c128     A7 22 02 FB | 	rdlong	local03, fp
2c12c     1C 4E 85 F1 | 	sub	fp, #28
2c130     02 22 16 F2 | 	cmp	local03, #2 wc
2c134     1C 00 90 3D |  if_ae	jmp	#LR__4525
2c138     04 4E 05 F1 | 	add	fp, #4
2c13c     A7 22 02 FB | 	rdlong	local03, fp
2c140     04 4E 85 F1 | 	sub	fp, #4
2c144     11 22 06 F1 | 	add	local03, #17
2c148     11 05 48 FC | 	wrbyte	#2, local03
2c14c     02 FA 05 F6 | 	mov	result1, #2
2c150     74 04 90 FD | 	jmp	#LR__4540
2c154                 | LR__4525
2c154     1C 4E 05 F1 | 	add	fp, #28
2c158     A7 22 02 FB | 	rdlong	local03, fp
2c15c     1C 4E 85 F1 | 	sub	fp, #28
2c160     FF FF 7F FF 
2c164     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c168     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c16c     04 4E 05 F1 | 	add	fp, #4
2c170     A7 22 02 FB | 	rdlong	local03, fp
2c174     04 4E 85 F1 | 	sub	fp, #4
2c178     11 22 06 F1 | 	add	local03, #17
2c17c     11 03 48 FC | 	wrbyte	#1, local03
2c180     01 FA 05 F6 | 	mov	result1, #1
2c184     40 04 90 FD | 	jmp	#LR__4540
2c188                 | LR__4526
2c188     04 4E 05 F1 | 	add	fp, #4
2c18c     A7 22 02 FB | 	rdlong	local03, fp
2c190     18 4E 05 F1 | 	add	fp, #24
2c194     A7 2C 02 FB | 	rdlong	local08, fp
2c198     1C 4E 85 F1 | 	sub	fp, #28
2c19c     18 22 06 F1 | 	add	local03, #24
2c1a0     11 2D 62 FC | 	wrlong	local08, local03
2c1a4                 | LR__4527
2c1a4     18 4E 05 F1 | 	add	fp, #24
2c1a8     A7 12 02 FB | 	rdlong	arg01, fp
2c1ac     14 4E 85 F1 | 	sub	fp, #20
2c1b0     A7 22 02 FB | 	rdlong	local03, fp
2c1b4     04 4E 85 F1 | 	sub	fp, #4
2c1b8     18 22 06 F1 | 	add	local03, #24
2c1bc     11 15 02 FB | 	rdlong	arg02, local03
2c1c0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c1c4     20 4E 05 F1 | 	add	fp, #32
2c1c8     A7 FA 61 FC | 	wrlong	result1, fp
2c1cc     20 4E 85 F1 | 	sub	fp, #32
2c1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1d4     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c1d8     04 4E 05 F1 | 	add	fp, #4
2c1dc     A7 22 02 FB | 	rdlong	local03, fp
2c1e0     04 4E 85 F1 | 	sub	fp, #4
2c1e4     11 22 06 F1 | 	add	local03, #17
2c1e8     11 05 48 FC | 	wrbyte	#2, local03
2c1ec     02 FA 05 F6 | 	mov	result1, #2
2c1f0     D4 03 90 FD | 	jmp	#LR__4540
2c1f4                 | LR__4528
2c1f4     20 4E 05 F1 | 	add	fp, #32
2c1f8     A7 22 02 FB | 	rdlong	local03, fp
2c1fc     10 4E 05 F1 | 	add	fp, #16
2c200     A7 2C 02 FB | 	rdlong	local08, fp
2c204     16 23 02 F1 | 	add	local03, local08
2c208     10 4E 85 F1 | 	sub	fp, #16
2c20c     A7 22 62 FC | 	wrlong	local03, fp
2c210     14 4E 85 F1 | 	sub	fp, #20
2c214     A7 22 02 FB | 	rdlong	local03, fp
2c218     09 22 46 F0 | 	shr	local03, #9
2c21c     20 4E 05 F1 | 	add	fp, #32
2c220     A7 22 62 FC | 	wrlong	local03, fp
2c224     2C 4E 85 F1 | 	sub	fp, #44
2c228     01 22 16 F2 | 	cmp	local03, #1 wc
2c22c     5C 01 90 CD |  if_b	jmp	#LR__4532
2c230     30 4E 05 F1 | 	add	fp, #48
2c234     A7 22 02 FB | 	rdlong	local03, fp
2c238     04 4E 85 F1 | 	sub	fp, #4
2c23c     A7 2C 02 FB | 	rdlong	local08, fp
2c240     16 23 02 F1 | 	add	local03, local08
2c244     14 4E 85 F1 | 	sub	fp, #20
2c248     A7 2C 02 FB | 	rdlong	local08, fp
2c24c     18 4E 85 F1 | 	sub	fp, #24
2c250     0A 2C 06 F1 | 	add	local08, #10
2c254     16 2D E2 FA | 	rdword	local08, local08
2c258     16 23 1A F2 | 	cmp	local03, local08 wcz
2c25c     28 00 90 ED |  if_be	jmp	#LR__4529
2c260     18 4E 05 F1 | 	add	fp, #24
2c264     A7 1E 02 FB | 	rdlong	local01, fp
2c268     0A 1E 06 F1 | 	add	local01, #10
2c26c     0F 23 E2 FA | 	rdword	local03, local01
2c270     18 4E 05 F1 | 	add	fp, #24
2c274     A7 2C 02 FB | 	rdlong	local08, fp
2c278     16 23 82 F1 | 	sub	local03, local08
2c27c     04 4E 85 F1 | 	sub	fp, #4
2c280     A7 22 62 FC | 	wrlong	local03, fp
2c284     2C 4E 85 F1 | 	sub	fp, #44
2c288                 | LR__4529
2c288     18 4E 05 F1 | 	add	fp, #24
2c28c     A7 1E 02 FB | 	rdlong	local01, fp
2c290     01 1E 06 F1 | 	add	local01, #1
2c294     0F 13 C2 FA | 	rdbyte	arg01, local01
2c298     1C 4E 05 F1 | 	add	fp, #28
2c29c     A7 14 02 FB | 	rdlong	arg02, fp
2c2a0     14 4E 85 F1 | 	sub	fp, #20
2c2a4     A7 16 02 FB | 	rdlong	arg03, fp
2c2a8     0C 4E 05 F1 | 	add	fp, #12
2c2ac     A7 18 02 FB | 	rdlong	arg04, fp
2c2b0     2C 4E 85 F1 | 	sub	fp, #44
2c2b4     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c2b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2bc     1C 00 90 AD |  if_e	jmp	#LR__4530
2c2c0     04 4E 05 F1 | 	add	fp, #4
2c2c4     A7 22 02 FB | 	rdlong	local03, fp
2c2c8     04 4E 85 F1 | 	sub	fp, #4
2c2cc     11 22 06 F1 | 	add	local03, #17
2c2d0     11 03 48 FC | 	wrbyte	#1, local03
2c2d4     01 FA 05 F6 | 	mov	result1, #1
2c2d8     EC 02 90 FD | 	jmp	#LR__4540
2c2dc                 | LR__4530
2c2dc     04 4E 05 F1 | 	add	fp, #4
2c2e0     A7 1E 02 FB | 	rdlong	local01, fp
2c2e4     04 4E 85 F1 | 	sub	fp, #4
2c2e8     10 1E 06 F1 | 	add	local01, #16
2c2ec     0F 23 C2 FA | 	rdbyte	local03, local01
2c2f0     80 22 CE F7 | 	test	local03, #128 wz
2c2f4     78 00 90 AD |  if_e	jmp	#LR__4531
2c2f8     04 4E 05 F1 | 	add	fp, #4
2c2fc     A7 2C 02 FB | 	rdlong	local08, fp
2c300     1C 2C 06 F1 | 	add	local08, #28
2c304     16 2D 02 FB | 	rdlong	local08, local08
2c308     1C 4E 05 F1 | 	add	fp, #28
2c30c     A7 2E 02 FB | 	rdlong	local09, fp
2c310     17 2D 82 F1 | 	sub	local08, local09
2c314     0C 4E 05 F1 | 	add	fp, #12
2c318     A7 30 02 FB | 	rdlong	local10, fp
2c31c     2C 4E 85 F1 | 	sub	fp, #44
2c320     18 33 02 F6 | 	mov	local11, local10
2c324     19 2D 12 F2 | 	cmp	local08, local11 wc
2c328     44 00 90 3D |  if_ae	jmp	#LR__4531
2c32c     34 4E 05 F1 | 	add	fp, #52
2c330     A7 12 02 FB | 	rdlong	arg01, fp
2c334     30 4E 85 F1 | 	sub	fp, #48
2c338     A7 14 02 FB | 	rdlong	arg02, fp
2c33c     0A 33 02 F6 | 	mov	local11, arg02
2c340     1C 32 06 F1 | 	add	local11, #28
2c344     19 2F 02 FB | 	rdlong	local09, local11
2c348     1C 4E 05 F1 | 	add	fp, #28
2c34c     A7 26 02 FB | 	rdlong	local05, fp
2c350     13 2F 82 F1 | 	sub	local09, local05
2c354     09 2E 66 F0 | 	shl	local09, #9
2c358     17 33 02 F6 | 	mov	local11, local09
2c35c     17 13 02 F1 | 	add	arg01, local09
2c360     20 4E 85 F1 | 	sub	fp, #32
2c364     28 14 06 F1 | 	add	arg02, #40
2c368     09 16 C6 F9 | 	decod	arg03, #9
2c36c     4C 46 BF FD | 	call	#__system____builtin_memmove
2c370                 | LR__4531
2c370     2C 4E 05 F1 | 	add	fp, #44
2c374     A7 22 02 FB | 	rdlong	local03, fp
2c378     09 22 66 F0 | 	shl	local03, #9
2c37c     04 4E 85 F1 | 	sub	fp, #4
2c380     A7 22 62 FC | 	wrlong	local03, fp
2c384     28 4E 85 F1 | 	sub	fp, #40
2c388                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c388                 | ' 				}
2c388                 | ' 
2c388                 | ' 
2c388                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c388                 | ' 				continue;
2c388     B4 01 90 FD | 	jmp	#LR__4538
2c38c                 | LR__4532
2c38c     04 4E 05 F1 | 	add	fp, #4
2c390     A7 22 02 FB | 	rdlong	local03, fp
2c394     1C 22 06 F1 | 	add	local03, #28
2c398     11 23 02 FB | 	rdlong	local03, local03
2c39c     1C 4E 05 F1 | 	add	fp, #28
2c3a0     A7 1E 02 FB | 	rdlong	local01, fp
2c3a4     20 4E 85 F1 | 	sub	fp, #32
2c3a8     0F 23 0A F2 | 	cmp	local03, local01 wz
2c3ac     EC 00 90 AD |  if_e	jmp	#LR__4536
2c3b0     04 4E 05 F1 | 	add	fp, #4
2c3b4     A7 1E 02 FB | 	rdlong	local01, fp
2c3b8     04 4E 85 F1 | 	sub	fp, #4
2c3bc     10 1E 06 F1 | 	add	local01, #16
2c3c0     0F 23 C2 FA | 	rdbyte	local03, local01
2c3c4     80 22 CE F7 | 	test	local03, #128 wz
2c3c8     7C 00 90 AD |  if_e	jmp	#LR__4534
2c3cc     18 4E 05 F1 | 	add	fp, #24
2c3d0     A7 1E 02 FB | 	rdlong	local01, fp
2c3d4     01 1E 06 F1 | 	add	local01, #1
2c3d8     0F 13 C2 FA | 	rdbyte	arg01, local01
2c3dc     14 4E 85 F1 | 	sub	fp, #20
2c3e0     A7 22 02 FB | 	rdlong	local03, fp
2c3e4     11 15 02 F6 | 	mov	arg02, local03
2c3e8     28 14 06 F1 | 	add	arg02, #40
2c3ec     04 4E 85 F1 | 	sub	fp, #4
2c3f0     1C 22 06 F1 | 	add	local03, #28
2c3f4     11 17 02 FB | 	rdlong	arg03, local03
2c3f8     01 18 06 F6 | 	mov	arg04, #1
2c3fc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c400     00 FA 0D F2 | 	cmp	result1, #0 wz
2c404     1C 00 90 AD |  if_e	jmp	#LR__4533
2c408     04 4E 05 F1 | 	add	fp, #4
2c40c     A7 22 02 FB | 	rdlong	local03, fp
2c410     04 4E 85 F1 | 	sub	fp, #4
2c414     11 22 06 F1 | 	add	local03, #17
2c418     11 03 48 FC | 	wrbyte	#1, local03
2c41c     01 FA 05 F6 | 	mov	result1, #1
2c420     A4 01 90 FD | 	jmp	#LR__4540
2c424                 | LR__4533
2c424     04 4E 05 F1 | 	add	fp, #4
2c428     A7 32 02 FB | 	rdlong	local11, fp
2c42c     19 23 02 F6 | 	mov	local03, local11
2c430     04 4E 85 F1 | 	sub	fp, #4
2c434     10 32 06 F1 | 	add	local11, #16
2c438     19 33 C2 FA | 	rdbyte	local11, local11
2c43c     7F 32 06 F5 | 	and	local11, #127
2c440     10 22 06 F1 | 	add	local03, #16
2c444     11 33 42 FC | 	wrbyte	local11, local03
2c448                 | LR__4534
2c448     18 4E 05 F1 | 	add	fp, #24
2c44c     A7 1E 02 FB | 	rdlong	local01, fp
2c450     01 1E 06 F1 | 	add	local01, #1
2c454     0F 13 C2 FA | 	rdbyte	arg01, local01
2c458     14 4E 85 F1 | 	sub	fp, #20
2c45c     A7 14 02 FB | 	rdlong	arg02, fp
2c460     28 14 06 F1 | 	add	arg02, #40
2c464     1C 4E 05 F1 | 	add	fp, #28
2c468     A7 16 02 FB | 	rdlong	arg03, fp
2c46c     20 4E 85 F1 | 	sub	fp, #32
2c470     01 18 06 F6 | 	mov	arg04, #1
2c474     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c478     00 FA 0D F2 | 	cmp	result1, #0 wz
2c47c     1C 00 90 AD |  if_e	jmp	#LR__4535
2c480     04 4E 05 F1 | 	add	fp, #4
2c484     A7 22 02 FB | 	rdlong	local03, fp
2c488     04 4E 85 F1 | 	sub	fp, #4
2c48c     11 22 06 F1 | 	add	local03, #17
2c490     11 03 48 FC | 	wrbyte	#1, local03
2c494     01 FA 05 F6 | 	mov	result1, #1
2c498     2C 01 90 FD | 	jmp	#LR__4540
2c49c                 | LR__4535
2c49c                 | LR__4536
2c49c     04 4E 05 F1 | 	add	fp, #4
2c4a0     A7 22 02 FB | 	rdlong	local03, fp
2c4a4     1C 4E 05 F1 | 	add	fp, #28
2c4a8     A7 32 02 FB | 	rdlong	local11, fp
2c4ac     20 4E 85 F1 | 	sub	fp, #32
2c4b0     1C 22 06 F1 | 	add	local03, #28
2c4b4     11 33 62 FC | 	wrlong	local11, local03
2c4b8                 | LR__4537
2c4b8     04 4E 05 F1 | 	add	fp, #4
2c4bc     A7 1E 02 FB | 	rdlong	local01, fp
2c4c0     14 1E 06 F1 | 	add	local01, #20
2c4c4     0F 33 02 FB | 	rdlong	local11, local01
2c4c8     FF 33 06 F5 | 	and	local11, #511
2c4cc     09 22 C6 F9 | 	decod	local03, #9
2c4d0     19 23 82 F1 | 	sub	local03, local11
2c4d4     24 4E 05 F1 | 	add	fp, #36
2c4d8     A7 22 62 FC | 	wrlong	local03, fp
2c4dc     1C 4E 85 F1 | 	sub	fp, #28
2c4e0     A7 32 02 FB | 	rdlong	local11, fp
2c4e4     0C 4E 85 F1 | 	sub	fp, #12
2c4e8     19 23 1A F2 | 	cmp	local03, local11 wcz
2c4ec     0C 4E 05 11 |  if_a	add	fp, #12
2c4f0     A7 22 02 1B |  if_a	rdlong	local03, fp
2c4f4     1C 4E 05 11 |  if_a	add	fp, #28
2c4f8     A7 22 62 1C |  if_a	wrlong	local03, fp
2c4fc     28 4E 85 11 |  if_a	sub	fp, #40
2c500     34 4E 05 F1 | 	add	fp, #52
2c504     A7 12 02 FB | 	rdlong	arg01, fp
2c508     30 4E 85 F1 | 	sub	fp, #48
2c50c     A7 28 02 FB | 	rdlong	local06, fp
2c510     14 15 02 F6 | 	mov	arg02, local06
2c514     28 14 06 F1 | 	add	arg02, #40
2c518     14 28 06 F1 | 	add	local06, #20
2c51c     14 33 02 FB | 	rdlong	local11, local06
2c520     19 2F 02 F6 | 	mov	local09, local11
2c524     17 31 02 F6 | 	mov	local10, local09
2c528     FF 31 06 F5 | 	and	local10, #511
2c52c     18 15 02 F1 | 	add	arg02, local10
2c530     24 4E 05 F1 | 	add	fp, #36
2c534     A7 16 02 FB | 	rdlong	arg03, fp
2c538     28 4E 85 F1 | 	sub	fp, #40
2c53c     7C 44 BF FD | 	call	#__system____builtin_memmove
2c540                 | LR__4538
2c540     0C 4E 05 F1 | 	add	fp, #12
2c544     A7 22 02 FB | 	rdlong	local03, fp
2c548     1C 4E 05 F1 | 	add	fp, #28
2c54c     A7 2C 02 FB | 	rdlong	local08, fp
2c550     16 23 82 F1 | 	sub	local03, local08
2c554     1C 4E 85 F1 | 	sub	fp, #28
2c558     A7 22 62 FC | 	wrlong	local03, fp
2c55c     04 4E 05 F1 | 	add	fp, #4
2c560     A7 1E 02 FB | 	rdlong	local01, fp
2c564     0F 2B 02 FB | 	rdlong	local07, local01
2c568     18 4E 05 F1 | 	add	fp, #24
2c56c     A7 2C 02 FB | 	rdlong	local08, fp
2c570     16 2B 02 F1 | 	add	local07, local08
2c574     0F 2B 62 FC | 	wrlong	local07, local01
2c578     0C 4E 05 F1 | 	add	fp, #12
2c57c     A7 22 02 FB | 	rdlong	local03, fp
2c580     0C 4E 85 F1 | 	sub	fp, #12
2c584     A7 34 02 FB | 	rdlong	local12, fp
2c588     1A 23 02 F1 | 	add	local03, local12
2c58c     0C 4E 05 F1 | 	add	fp, #12
2c590     A7 22 62 FC | 	wrlong	local03, fp
2c594     30 4E 85 F1 | 	sub	fp, #48
2c598     A7 36 02 FB | 	rdlong	local13, fp
2c59c     1B 23 02 F6 | 	mov	local03, local13
2c5a0     14 36 06 F1 | 	add	local13, #20
2c5a4     1B 39 02 FB | 	rdlong	local14, local13
2c5a8     24 4E 05 F1 | 	add	fp, #36
2c5ac     A7 28 02 FB | 	rdlong	local06, fp
2c5b0     28 4E 85 F1 | 	sub	fp, #40
2c5b4     14 39 02 F1 | 	add	local14, local06
2c5b8     14 22 06 F1 | 	add	local03, #20
2c5bc     11 39 62 FC | 	wrlong	local14, local03
2c5c0     84 FA 9F FD | 	jmp	#LR__4522
2c5c4                 | LR__4539
2c5c4                 | ' 
2c5c4                 | ' 
2c5c4                 | ' 
2c5c4                 | ' 
2c5c4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c5c4                 | ' 
2c5c4                 | ' 	}
2c5c4                 | ' 
2c5c4                 | ' 	return FR_OK ;
2c5c4     00 FA 05 F6 | 	mov	result1, #0
2c5c8                 | LR__4540
2c5c8     A7 F0 03 F6 | 	mov	ptra, fp
2c5cc     B2 00 A0 FD | 	call	#popregs_
2c5d0                 | _fatfs_cc_f_read_ret
2c5d0     2D 00 64 FD | 	ret
2c5d4                 | 
2c5d4                 | _fatfs_cc_f_write
2c5d4     15 4A 05 F6 | 	mov	COUNT_, #21
2c5d8     A8 00 A0 FD | 	call	#pushregs_
2c5dc     34 F0 07 F1 | 	add	ptra, #52
2c5e0     04 4E 05 F1 | 	add	fp, #4
2c5e4     A7 12 62 FC | 	wrlong	arg01, fp
2c5e8     04 4E 05 F1 | 	add	fp, #4
2c5ec     A7 14 62 FC | 	wrlong	arg02, fp
2c5f0     04 4E 05 F1 | 	add	fp, #4
2c5f4     A7 16 62 FC | 	wrlong	arg03, fp
2c5f8     04 4E 05 F1 | 	add	fp, #4
2c5fc     A7 18 62 FC | 	wrlong	arg04, fp
2c600     08 4E 85 F1 | 	sub	fp, #8
2c604     A7 FA 01 FB | 	rdlong	result1, fp
2c608     28 4E 05 F1 | 	add	fp, #40
2c60c     A7 FA 61 FC | 	wrlong	result1, fp
2c610     20 4E 85 F1 | 	sub	fp, #32
2c614     A7 FA 01 FB | 	rdlong	result1, fp
2c618     FD 00 68 FC | 	wrlong	#0, result1
2c61c     0C 4E 85 F1 | 	sub	fp, #12
2c620     A7 12 02 FB | 	rdlong	arg01, fp
2c624     14 4E 05 F1 | 	add	fp, #20
2c628     A7 14 02 F6 | 	mov	arg02, fp
2c62c     18 4E 85 F1 | 	sub	fp, #24
2c630     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c634     14 4E 05 F1 | 	add	fp, #20
2c638     A7 FA 61 FC | 	wrlong	result1, fp
2c63c     00 FA 4D F2 | 	cmps	result1, #0 wz
2c640     14 4E 85 F1 | 	sub	fp, #20
2c644     20 00 90 5D |  if_ne	jmp	#LR__4550
2c648     04 4E 05 F1 | 	add	fp, #4
2c64c     A7 14 02 FB | 	rdlong	arg02, fp
2c650     11 14 06 F1 | 	add	arg02, #17
2c654     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c658     10 4E 05 F1 | 	add	fp, #16
2c65c     A7 14 62 FC | 	wrlong	arg02, fp
2c660     14 4E 85 F1 | 	sub	fp, #20
2c664     10 00 90 AD |  if_e	jmp	#LR__4551
2c668                 | LR__4550
2c668     14 4E 05 F1 | 	add	fp, #20
2c66c     A7 FA 01 FB | 	rdlong	result1, fp
2c670     14 4E 85 F1 | 	sub	fp, #20
2c674     44 07 90 FD | 	jmp	#LR__4573
2c678                 | LR__4551
2c678     04 4E 05 F1 | 	add	fp, #4
2c67c     A7 14 02 FB | 	rdlong	arg02, fp
2c680     04 4E 85 F1 | 	sub	fp, #4
2c684     10 14 06 F1 | 	add	arg02, #16
2c688     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c68c     02 14 CE F7 | 	test	arg02, #2 wz
2c690     07 FA 05 A6 |  if_e	mov	result1, #7
2c694     24 07 90 AD |  if_e	jmp	#LR__4573
2c698     04 4E 05 F1 | 	add	fp, #4
2c69c     A7 14 02 FB | 	rdlong	arg02, fp
2c6a0     0A 13 02 F6 | 	mov	arg01, arg02
2c6a4     14 12 06 F1 | 	add	arg01, #20
2c6a8     09 13 02 FB | 	rdlong	arg01, arg01
2c6ac     08 4E 05 F1 | 	add	fp, #8
2c6b0     A7 FA 01 FB | 	rdlong	result1, fp
2c6b4     FD 12 02 F1 | 	add	arg01, result1
2c6b8     0C 4E 85 F1 | 	sub	fp, #12
2c6bc     14 14 06 F1 | 	add	arg02, #20
2c6c0     0A FB 01 FB | 	rdlong	result1, arg02
2c6c4     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c6c8     24 00 90 3D |  if_ae	jmp	#LR__4552
2c6cc     04 4E 05 F1 | 	add	fp, #4
2c6d0     A7 14 02 FB | 	rdlong	arg02, fp
2c6d4     01 FA 65 F6 | 	neg	result1, #1
2c6d8     14 14 06 F1 | 	add	arg02, #20
2c6dc     0A 15 02 FB | 	rdlong	arg02, arg02
2c6e0     0A FB 81 F1 | 	sub	result1, arg02
2c6e4     08 4E 05 F1 | 	add	fp, #8
2c6e8     A7 FA 61 FC | 	wrlong	result1, fp
2c6ec     0C 4E 85 F1 | 	sub	fp, #12
2c6f0                 | LR__4552
2c6f0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c6f0                 | ' 	}
2c6f0                 | ' 
2c6f0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c6f0                 | LR__4553
2c6f0     0C 4E 05 F1 | 	add	fp, #12
2c6f4     A7 FA 01 FB | 	rdlong	result1, fp
2c6f8     0C 4E 85 F1 | 	sub	fp, #12
2c6fc     01 FA 15 F2 | 	cmp	result1, #1 wc
2c700     90 06 90 CD |  if_b	jmp	#LR__4572
2c704     04 4E 05 F1 | 	add	fp, #4
2c708     A7 FA 01 FB | 	rdlong	result1, fp
2c70c     04 4E 85 F1 | 	sub	fp, #4
2c710     14 FA 05 F1 | 	add	result1, #20
2c714     FD FA 01 FB | 	rdlong	result1, result1
2c718     FF FB CD F7 | 	test	result1, #511 wz
2c71c     D8 04 90 5D |  if_ne	jmp	#LR__4568
2c720     04 4E 05 F1 | 	add	fp, #4
2c724     A7 FA 01 FB | 	rdlong	result1, fp
2c728     14 FA 05 F1 | 	add	result1, #20
2c72c     FD FA 01 FB | 	rdlong	result1, result1
2c730     09 FA 45 F0 | 	shr	result1, #9
2c734     14 4E 05 F1 | 	add	fp, #20
2c738     A7 14 02 FB | 	rdlong	arg02, fp
2c73c     0A 14 06 F1 | 	add	arg02, #10
2c740     0A 19 E2 FA | 	rdword	arg04, arg02
2c744     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c748     01 14 86 F1 | 	sub	arg02, #1
2c74c     0A FB 09 F5 | 	and	result1, arg02 wz
2c750     14 4E 05 F1 | 	add	fp, #20
2c754     A7 FA 61 FC | 	wrlong	result1, fp
2c758     2C 4E 85 F1 | 	sub	fp, #44
2c75c     44 01 90 5D |  if_ne	jmp	#LR__4559
2c760     04 4E 05 F1 | 	add	fp, #4
2c764     A7 FA 01 FB | 	rdlong	result1, fp
2c768     04 4E 85 F1 | 	sub	fp, #4
2c76c     14 FA 05 F1 | 	add	result1, #20
2c770     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c774     44 00 90 5D |  if_ne	jmp	#LR__4554
2c778     04 4E 05 F1 | 	add	fp, #4
2c77c     A7 14 02 FB | 	rdlong	arg02, fp
2c780     08 14 06 F1 | 	add	arg02, #8
2c784     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c788     18 4E 05 F1 | 	add	fp, #24
2c78c     A7 14 62 FC | 	wrlong	arg02, fp
2c790     1C 4E 85 F1 | 	sub	fp, #28
2c794     4C 00 90 5D |  if_ne	jmp	#LR__4555
2c798     04 4E 05 F1 | 	add	fp, #4
2c79c     A7 12 02 FB | 	rdlong	arg01, fp
2c7a0     04 4E 85 F1 | 	sub	fp, #4
2c7a4     00 14 06 F6 | 	mov	arg02, #0
2c7a8     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c7ac     1C 4E 05 F1 | 	add	fp, #28
2c7b0     A7 FA 61 FC | 	wrlong	result1, fp
2c7b4     1C 4E 85 F1 | 	sub	fp, #28
2c7b8     28 00 90 FD | 	jmp	#LR__4555
2c7bc                 | LR__4554
2c7bc     04 4E 05 F1 | 	add	fp, #4
2c7c0     A7 18 02 FB | 	rdlong	arg04, fp
2c7c4     0C 13 02 F6 | 	mov	arg01, arg04
2c7c8     04 4E 85 F1 | 	sub	fp, #4
2c7cc     18 18 06 F1 | 	add	arg04, #24
2c7d0     0C 15 02 FB | 	rdlong	arg02, arg04
2c7d4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c7d8     1C 4E 05 F1 | 	add	fp, #28
2c7dc     A7 FA 61 FC | 	wrlong	result1, fp
2c7e0     1C 4E 85 F1 | 	sub	fp, #28
2c7e4                 | LR__4555
2c7e4     1C 4E 05 F1 | 	add	fp, #28
2c7e8     A7 FA 09 FB | 	rdlong	result1, fp wz
2c7ec     1C 4E 85 F1 | 	sub	fp, #28
2c7f0     A0 05 90 AD |  if_e	jmp	#LR__4572
2c7f4     1C 4E 05 F1 | 	add	fp, #28
2c7f8     A7 FA 01 FB | 	rdlong	result1, fp
2c7fc     1C 4E 85 F1 | 	sub	fp, #28
2c800     01 FA 0D F2 | 	cmp	result1, #1 wz
2c804     1C 00 90 5D |  if_ne	jmp	#LR__4556
2c808     04 4E 05 F1 | 	add	fp, #4
2c80c     A7 FA 01 FB | 	rdlong	result1, fp
2c810     04 4E 85 F1 | 	sub	fp, #4
2c814     11 FA 05 F1 | 	add	result1, #17
2c818     FD 04 48 FC | 	wrbyte	#2, result1
2c81c     02 FA 05 F6 | 	mov	result1, #2
2c820     98 05 90 FD | 	jmp	#LR__4573
2c824                 | LR__4556
2c824     1C 4E 05 F1 | 	add	fp, #28
2c828     A7 FA 01 FB | 	rdlong	result1, fp
2c82c     1C 4E 85 F1 | 	sub	fp, #28
2c830     FF FF 7F FF 
2c834     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c838     1C 00 90 5D |  if_ne	jmp	#LR__4557
2c83c     04 4E 05 F1 | 	add	fp, #4
2c840     A7 FA 01 FB | 	rdlong	result1, fp
2c844     04 4E 85 F1 | 	sub	fp, #4
2c848     11 FA 05 F1 | 	add	result1, #17
2c84c     FD 02 48 FC | 	wrbyte	#1, result1
2c850     01 FA 05 F6 | 	mov	result1, #1
2c854     64 05 90 FD | 	jmp	#LR__4573
2c858                 | LR__4557
2c858     04 4E 05 F1 | 	add	fp, #4
2c85c     A7 FA 01 FB | 	rdlong	result1, fp
2c860     18 4E 05 F1 | 	add	fp, #24
2c864     A7 18 02 FB | 	rdlong	arg04, fp
2c868     18 FA 05 F1 | 	add	result1, #24
2c86c     FD 18 62 FC | 	wrlong	arg04, result1
2c870     18 4E 85 F1 | 	sub	fp, #24
2c874     A7 FA 01 FB | 	rdlong	result1, fp
2c878     04 4E 85 F1 | 	sub	fp, #4
2c87c     08 FA 05 F1 | 	add	result1, #8
2c880     FD FA 09 FB | 	rdlong	result1, result1 wz
2c884     1C 00 90 5D |  if_ne	jmp	#LR__4558
2c888     04 4E 05 F1 | 	add	fp, #4
2c88c     A7 18 02 FB | 	rdlong	arg04, fp
2c890     18 4E 05 F1 | 	add	fp, #24
2c894     A7 FA 01 FB | 	rdlong	result1, fp
2c898     1C 4E 85 F1 | 	sub	fp, #28
2c89c     08 18 06 F1 | 	add	arg04, #8
2c8a0     0C FB 61 FC | 	wrlong	result1, arg04
2c8a4                 | LR__4558
2c8a4                 | LR__4559
2c8a4     04 4E 05 F1 | 	add	fp, #4
2c8a8     A7 18 02 FB | 	rdlong	arg04, fp
2c8ac     04 4E 85 F1 | 	sub	fp, #4
2c8b0     10 18 06 F1 | 	add	arg04, #16
2c8b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c8b8     80 18 CE F7 | 	test	arg04, #128 wz
2c8bc     7C 00 90 AD |  if_e	jmp	#LR__4561
2c8c0     18 4E 05 F1 | 	add	fp, #24
2c8c4     A7 18 02 FB | 	rdlong	arg04, fp
2c8c8     01 18 06 F1 | 	add	arg04, #1
2c8cc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c8d0     14 4E 85 F1 | 	sub	fp, #20
2c8d4     A7 18 02 FB | 	rdlong	arg04, fp
2c8d8     0C 15 02 F6 | 	mov	arg02, arg04
2c8dc     28 14 06 F1 | 	add	arg02, #40
2c8e0     04 4E 85 F1 | 	sub	fp, #4
2c8e4     1C 18 06 F1 | 	add	arg04, #28
2c8e8     0C 17 02 FB | 	rdlong	arg03, arg04
2c8ec     01 18 06 F6 | 	mov	arg04, #1
2c8f0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c8f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8f8     1C 00 90 AD |  if_e	jmp	#LR__4560
2c8fc     04 4E 05 F1 | 	add	fp, #4
2c900     A7 FA 01 FB | 	rdlong	result1, fp
2c904     04 4E 85 F1 | 	sub	fp, #4
2c908     11 FA 05 F1 | 	add	result1, #17
2c90c     FD 02 48 FC | 	wrbyte	#1, result1
2c910     01 FA 05 F6 | 	mov	result1, #1
2c914     A4 04 90 FD | 	jmp	#LR__4573
2c918                 | LR__4560
2c918     04 4E 05 F1 | 	add	fp, #4
2c91c     A7 18 02 FB | 	rdlong	arg04, fp
2c920     0C FB 01 F6 | 	mov	result1, arg04
2c924     04 4E 85 F1 | 	sub	fp, #4
2c928     10 18 06 F1 | 	add	arg04, #16
2c92c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c930     7F 18 06 F5 | 	and	arg04, #127
2c934     10 FA 05 F1 | 	add	result1, #16
2c938     FD 18 42 FC | 	wrbyte	arg04, result1
2c93c                 | LR__4561
2c93c     18 4E 05 F1 | 	add	fp, #24
2c940     A7 12 02 FB | 	rdlong	arg01, fp
2c944     14 4E 85 F1 | 	sub	fp, #20
2c948     A7 14 02 FB | 	rdlong	arg02, fp
2c94c     04 4E 85 F1 | 	sub	fp, #4
2c950     18 14 06 F1 | 	add	arg02, #24
2c954     0A 15 02 FB | 	rdlong	arg02, arg02
2c958     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c95c     20 4E 05 F1 | 	add	fp, #32
2c960     A7 FA 61 FC | 	wrlong	result1, fp
2c964     20 4E 85 F1 | 	sub	fp, #32
2c968     00 FA 0D F2 | 	cmp	result1, #0 wz
2c96c     1C 00 90 5D |  if_ne	jmp	#LR__4562
2c970     04 4E 05 F1 | 	add	fp, #4
2c974     A7 FA 01 FB | 	rdlong	result1, fp
2c978     04 4E 85 F1 | 	sub	fp, #4
2c97c     11 FA 05 F1 | 	add	result1, #17
2c980     FD 04 48 FC | 	wrbyte	#2, result1
2c984     02 FA 05 F6 | 	mov	result1, #2
2c988     30 04 90 FD | 	jmp	#LR__4573
2c98c                 | LR__4562
2c98c     20 4E 05 F1 | 	add	fp, #32
2c990     A7 FA 01 FB | 	rdlong	result1, fp
2c994     0C 4E 05 F1 | 	add	fp, #12
2c998     A7 1E 02 FB | 	rdlong	local01, fp
2c99c     0F FB 01 F1 | 	add	result1, local01
2c9a0     0C 4E 85 F1 | 	sub	fp, #12
2c9a4     A7 FA 61 FC | 	wrlong	result1, fp
2c9a8     14 4E 85 F1 | 	sub	fp, #20
2c9ac     A7 FA 01 FB | 	rdlong	result1, fp
2c9b0     09 FA 45 F0 | 	shr	result1, #9
2c9b4     1C 4E 05 F1 | 	add	fp, #28
2c9b8     A7 FA 61 FC | 	wrlong	result1, fp
2c9bc     28 4E 85 F1 | 	sub	fp, #40
2c9c0     01 FA 15 F2 | 	cmp	result1, #1 wc
2c9c4     60 01 90 CD |  if_b	jmp	#LR__4566
2c9c8     2C 4E 05 F1 | 	add	fp, #44
2c9cc     A7 FA 01 FB | 	rdlong	result1, fp
2c9d0     04 4E 85 F1 | 	sub	fp, #4
2c9d4     A7 18 02 FB | 	rdlong	arg04, fp
2c9d8     0C FB 01 F1 | 	add	result1, arg04
2c9dc     10 4E 85 F1 | 	sub	fp, #16
2c9e0     A7 18 02 FB | 	rdlong	arg04, fp
2c9e4     18 4E 85 F1 | 	sub	fp, #24
2c9e8     0A 18 06 F1 | 	add	arg04, #10
2c9ec     0C 19 E2 FA | 	rdword	arg04, arg04
2c9f0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c9f4     28 00 90 ED |  if_be	jmp	#LR__4563
2c9f8     18 4E 05 F1 | 	add	fp, #24
2c9fc     A7 FA 01 FB | 	rdlong	result1, fp
2ca00     0A FA 05 F1 | 	add	result1, #10
2ca04     FD FA E1 FA | 	rdword	result1, result1
2ca08     14 4E 05 F1 | 	add	fp, #20
2ca0c     A7 18 02 FB | 	rdlong	arg04, fp
2ca10     0C FB 81 F1 | 	sub	result1, arg04
2ca14     04 4E 85 F1 | 	sub	fp, #4
2ca18     A7 FA 61 FC | 	wrlong	result1, fp
2ca1c     28 4E 85 F1 | 	sub	fp, #40
2ca20                 | LR__4563
2ca20     18 4E 05 F1 | 	add	fp, #24
2ca24     A7 18 02 FB | 	rdlong	arg04, fp
2ca28     01 18 06 F1 | 	add	arg04, #1
2ca2c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ca30     18 4E 05 F1 | 	add	fp, #24
2ca34     A7 14 02 FB | 	rdlong	arg02, fp
2ca38     10 4E 85 F1 | 	sub	fp, #16
2ca3c     A7 16 02 FB | 	rdlong	arg03, fp
2ca40     08 4E 05 F1 | 	add	fp, #8
2ca44     A7 18 02 FB | 	rdlong	arg04, fp
2ca48     28 4E 85 F1 | 	sub	fp, #40
2ca4c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2ca50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca54     1C 00 90 AD |  if_e	jmp	#LR__4564
2ca58     04 4E 05 F1 | 	add	fp, #4
2ca5c     A7 1E 02 FB | 	rdlong	local01, fp
2ca60     04 4E 85 F1 | 	sub	fp, #4
2ca64     11 1E 06 F1 | 	add	local01, #17
2ca68     0F 03 48 FC | 	wrbyte	#1, local01
2ca6c     01 FA 05 F6 | 	mov	result1, #1
2ca70     48 03 90 FD | 	jmp	#LR__4573
2ca74                 | LR__4564
2ca74     04 4E 05 F1 | 	add	fp, #4
2ca78     A7 FA 01 FB | 	rdlong	result1, fp
2ca7c     1C FA 05 F1 | 	add	result1, #28
2ca80     FD FA 01 FB | 	rdlong	result1, result1
2ca84     1C 4E 05 F1 | 	add	fp, #28
2ca88     A7 20 02 FB | 	rdlong	local02, fp
2ca8c     10 FB 81 F1 | 	sub	result1, local02
2ca90     08 4E 05 F1 | 	add	fp, #8
2ca94     A7 18 02 FB | 	rdlong	arg04, fp
2ca98     28 4E 85 F1 | 	sub	fp, #40
2ca9c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2caa0     68 00 90 3D |  if_ae	jmp	#LR__4565
2caa4     04 4E 05 F1 | 	add	fp, #4
2caa8     A7 12 02 FB | 	rdlong	arg01, fp
2caac     28 12 06 F1 | 	add	arg01, #40
2cab0     2C 4E 05 F1 | 	add	fp, #44
2cab4     A7 14 02 FB | 	rdlong	arg02, fp
2cab8     2C 4E 85 F1 | 	sub	fp, #44
2cabc     A7 FA 01 FB | 	rdlong	result1, fp
2cac0     1C FA 05 F1 | 	add	result1, #28
2cac4     FD 22 02 FB | 	rdlong	local03, result1
2cac8     1C 4E 05 F1 | 	add	fp, #28
2cacc     A7 18 02 FB | 	rdlong	arg04, fp
2cad0     20 4E 85 F1 | 	sub	fp, #32
2cad4     0C 23 82 F1 | 	sub	local03, arg04
2cad8     09 22 66 F0 | 	shl	local03, #9
2cadc     11 15 02 F1 | 	add	arg02, local03
2cae0     09 16 C6 F9 | 	decod	arg03, #9
2cae4     D4 3E BF FD | 	call	#__system____builtin_memmove
2cae8     04 4E 05 F1 | 	add	fp, #4
2caec     A7 18 02 FB | 	rdlong	arg04, fp
2caf0     0C FB 01 F6 | 	mov	result1, arg04
2caf4     04 4E 85 F1 | 	sub	fp, #4
2caf8     10 18 06 F1 | 	add	arg04, #16
2cafc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb00     7F 18 06 F5 | 	and	arg04, #127
2cb04     10 FA 05 F1 | 	add	result1, #16
2cb08     FD 18 42 FC | 	wrbyte	arg04, result1
2cb0c                 | LR__4565
2cb0c     28 4E 05 F1 | 	add	fp, #40
2cb10     A7 FA 01 FB | 	rdlong	result1, fp
2cb14     09 FA 65 F0 | 	shl	result1, #9
2cb18     04 4E 85 F1 | 	sub	fp, #4
2cb1c     A7 FA 61 FC | 	wrlong	result1, fp
2cb20     24 4E 85 F1 | 	sub	fp, #36
2cb24                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2cb24                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2cb24                 | ' 				}
2cb24                 | ' 
2cb24                 | ' 
2cb24                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2cb24                 | ' 				continue;
2cb24     74 01 90 FD | 	jmp	#LR__4569
2cb28                 | LR__4566
2cb28     04 4E 05 F1 | 	add	fp, #4
2cb2c     A7 20 02 FB | 	rdlong	local02, fp
2cb30     1C 20 06 F1 | 	add	local02, #28
2cb34     10 FB 01 FB | 	rdlong	result1, local02
2cb38     1C 4E 05 F1 | 	add	fp, #28
2cb3c     A7 20 02 FB | 	rdlong	local02, fp
2cb40     20 4E 85 F1 | 	sub	fp, #32
2cb44     10 FB 09 F2 | 	cmp	result1, local02 wz
2cb48     90 00 90 AD |  if_e	jmp	#LR__4567
2cb4c     04 4E 05 F1 | 	add	fp, #4
2cb50     A7 FA 01 FB | 	rdlong	result1, fp
2cb54     FD 22 02 F6 | 	mov	local03, result1
2cb58     04 4E 85 F1 | 	sub	fp, #4
2cb5c     14 22 06 F1 | 	add	local03, #20
2cb60     11 23 02 FB | 	rdlong	local03, local03
2cb64     0C FA 05 F1 | 	add	result1, #12
2cb68     FD 24 02 FB | 	rdlong	local04, result1
2cb6c     12 27 02 F6 | 	mov	local05, local04
2cb70     13 23 12 F2 | 	cmp	local03, local05 wc
2cb74     64 00 90 3D |  if_ae	jmp	#LR__4567
2cb78     18 4E 05 F1 | 	add	fp, #24
2cb7c     A7 18 02 FB | 	rdlong	arg04, fp
2cb80     01 18 06 F1 | 	add	arg04, #1
2cb84     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cb88     14 4E 85 F1 | 	sub	fp, #20
2cb8c     A7 28 02 FB | 	rdlong	local06, fp
2cb90     28 28 06 F1 | 	add	local06, #40
2cb94     14 2B 02 F6 | 	mov	local07, local06
2cb98     1C 4E 05 F1 | 	add	fp, #28
2cb9c     A7 2C 02 FB | 	rdlong	local08, fp
2cba0     20 4E 85 F1 | 	sub	fp, #32
2cba4     01 2E 06 F6 | 	mov	local09, #1
2cba8     15 15 02 F6 | 	mov	arg02, local07
2cbac     16 17 02 F6 | 	mov	arg03, local08
2cbb0     01 18 06 F6 | 	mov	arg04, #1
2cbb4     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2cbb8     FD 30 0A F6 | 	mov	local10, result1 wz
2cbbc     1C 00 90 AD |  if_e	jmp	#LR__4567
2cbc0     04 4E 05 F1 | 	add	fp, #4
2cbc4     A7 30 02 FB | 	rdlong	local10, fp
2cbc8     04 4E 85 F1 | 	sub	fp, #4
2cbcc     11 30 06 F1 | 	add	local10, #17
2cbd0     18 03 48 FC | 	wrbyte	#1, local10
2cbd4                 | ' 				fp->fptr < fp->obj.objsize &&
2cbd4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2cbd4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2cbd4     01 FA 05 F6 | 	mov	result1, #1
2cbd8     E0 01 90 FD | 	jmp	#LR__4573
2cbdc                 | LR__4567
2cbdc     04 4E 05 F1 | 	add	fp, #4
2cbe0     A7 18 02 FB | 	rdlong	arg04, fp
2cbe4     1C 4E 05 F1 | 	add	fp, #28
2cbe8     A7 FA 01 FB | 	rdlong	result1, fp
2cbec     20 4E 85 F1 | 	sub	fp, #32
2cbf0     1C 18 06 F1 | 	add	arg04, #28
2cbf4     0C FB 61 FC | 	wrlong	result1, arg04
2cbf8                 | LR__4568
2cbf8     04 4E 05 F1 | 	add	fp, #4
2cbfc     A7 FA 01 FB | 	rdlong	result1, fp
2cc00     14 FA 05 F1 | 	add	result1, #20
2cc04     FD FA 01 FB | 	rdlong	result1, result1
2cc08     FF FB 05 F5 | 	and	result1, #511
2cc0c     09 32 C6 F9 | 	decod	local11, #9
2cc10     FD 32 82 F1 | 	sub	local11, result1
2cc14     20 4E 05 F1 | 	add	fp, #32
2cc18     A7 32 62 FC | 	wrlong	local11, fp
2cc1c     18 4E 85 F1 | 	sub	fp, #24
2cc20     A7 FA 01 FB | 	rdlong	result1, fp
2cc24     0C 4E 85 F1 | 	sub	fp, #12
2cc28     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cc2c     0C 4E 05 11 |  if_a	add	fp, #12
2cc30     A7 32 02 1B |  if_a	rdlong	local11, fp
2cc34     18 4E 05 11 |  if_a	add	fp, #24
2cc38     A7 32 62 1C |  if_a	wrlong	local11, fp
2cc3c     24 4E 85 11 |  if_a	sub	fp, #36
2cc40     04 4E 05 F1 | 	add	fp, #4
2cc44     A7 32 02 FB | 	rdlong	local11, fp
2cc48     19 13 02 F6 | 	mov	arg01, local11
2cc4c     28 12 06 F1 | 	add	arg01, #40
2cc50     14 32 06 F1 | 	add	local11, #20
2cc54     19 33 02 FB | 	rdlong	local11, local11
2cc58     FF 33 06 F5 | 	and	local11, #511
2cc5c     19 13 02 F1 | 	add	arg01, local11
2cc60     2C 4E 05 F1 | 	add	fp, #44
2cc64     A7 14 02 FB | 	rdlong	arg02, fp
2cc68     0C 4E 85 F1 | 	sub	fp, #12
2cc6c     A7 16 02 FB | 	rdlong	arg03, fp
2cc70     24 4E 85 F1 | 	sub	fp, #36
2cc74     44 3D BF FD | 	call	#__system____builtin_memmove
2cc78     04 4E 05 F1 | 	add	fp, #4
2cc7c     A7 FA 01 FB | 	rdlong	result1, fp
2cc80     FD 32 02 F6 | 	mov	local11, result1
2cc84     04 4E 85 F1 | 	sub	fp, #4
2cc88     10 FA 05 F1 | 	add	result1, #16
2cc8c     FD FA C1 FA | 	rdbyte	result1, result1
2cc90     80 FA 45 F5 | 	or	result1, #128
2cc94     10 32 06 F1 | 	add	local11, #16
2cc98     19 FB 41 FC | 	wrbyte	result1, local11
2cc9c                 | LR__4569
2cc9c     0C 4E 05 F1 | 	add	fp, #12
2cca0     A7 32 02 FB | 	rdlong	local11, fp
2cca4     18 4E 05 F1 | 	add	fp, #24
2cca8     A7 FA 01 FB | 	rdlong	result1, fp
2ccac     FD 32 82 F1 | 	sub	local11, result1
2ccb0     18 4E 85 F1 | 	sub	fp, #24
2ccb4     A7 32 62 FC | 	wrlong	local11, fp
2ccb8     04 4E 05 F1 | 	add	fp, #4
2ccbc     A7 34 02 FB | 	rdlong	local12, fp
2ccc0     1A 33 02 FB | 	rdlong	local11, local12
2ccc4     14 4E 05 F1 | 	add	fp, #20
2ccc8     A7 36 02 FB | 	rdlong	local13, fp
2cccc     1B 33 02 F1 | 	add	local11, local13
2ccd0     1A 33 62 FC | 	wrlong	local11, local12
2ccd4     0C 4E 05 F1 | 	add	fp, #12
2ccd8     A7 32 02 FB | 	rdlong	local11, fp
2ccdc     0C 4E 85 F1 | 	sub	fp, #12
2cce0     A7 38 02 FB | 	rdlong	local14, fp
2cce4     1C 33 02 F1 | 	add	local11, local14
2cce8     0C 4E 05 F1 | 	add	fp, #12
2ccec     A7 32 62 FC | 	wrlong	local11, fp
2ccf0     2C 4E 85 F1 | 	sub	fp, #44
2ccf4     A7 3A 02 FB | 	rdlong	local15, fp
2ccf8     1D 33 02 F6 | 	mov	local11, local15
2ccfc     14 3A 06 F1 | 	add	local15, #20
2cd00     1D 3B 02 FB | 	rdlong	local15, local15
2cd04     20 4E 05 F1 | 	add	fp, #32
2cd08     A7 3C 02 FB | 	rdlong	local16, fp
2cd0c     1E 3B 02 F1 | 	add	local15, local16
2cd10     14 32 06 F1 | 	add	local11, #20
2cd14     19 3B 62 FC | 	wrlong	local15, local11
2cd18     20 4E 85 F1 | 	sub	fp, #32
2cd1c     A7 3E 02 FB | 	rdlong	local17, fp
2cd20     1F 33 02 F6 | 	mov	local11, local17
2cd24     1F 41 02 F6 | 	mov	local18, local17
2cd28     04 4E 85 F1 | 	sub	fp, #4
2cd2c     14 3E 06 F1 | 	add	local17, #20
2cd30     1F 43 02 FB | 	rdlong	local19, local17
2cd34     0C 40 06 F1 | 	add	local18, #12
2cd38     20 45 02 FB | 	rdlong	local20, local18
2cd3c     22 43 1A F2 | 	cmp	local19, local20 wcz
2cd40     24 00 90 ED |  if_be	jmp	#LR__4570
2cd44     04 4E 05 F1 | 	add	fp, #4
2cd48     A7 26 02 FB | 	rdlong	local05, fp
2cd4c     04 4E 85 F1 | 	sub	fp, #4
2cd50     13 23 02 F6 | 	mov	local03, local05
2cd54     14 22 06 F1 | 	add	local03, #20
2cd58     11 25 02 FB | 	rdlong	local04, local03
2cd5c     14 22 86 F1 | 	sub	local03, #20
2cd60     12 47 02 F6 | 	mov	local21, local04
2cd64     20 00 90 FD | 	jmp	#LR__4571
2cd68                 | LR__4570
2cd68     04 4E 05 F1 | 	add	fp, #4
2cd6c     A7 2A 02 FB | 	rdlong	local07, fp
2cd70     04 4E 85 F1 | 	sub	fp, #4
2cd74     15 31 02 F6 | 	mov	local10, local07
2cd78     0C 30 06 F1 | 	add	local10, #12
2cd7c     18 2D 02 FB | 	rdlong	local08, local10
2cd80     0C 30 86 F1 | 	sub	local10, #12
2cd84     16 47 02 F6 | 	mov	local21, local08
2cd88                 | LR__4571
2cd88     0C 32 06 F1 | 	add	local11, #12
2cd8c     19 47 62 FC | 	wrlong	local21, local11
2cd90     5C F9 9F FD | 	jmp	#LR__4553
2cd94                 | LR__4572
2cd94     04 4E 05 F1 | 	add	fp, #4
2cd98     A7 34 02 FB | 	rdlong	local12, fp
2cd9c     1A 1F 02 F6 | 	mov	local01, local12
2cda0     04 4E 85 F1 | 	sub	fp, #4
2cda4     10 34 06 F1 | 	add	local12, #16
2cda8     1A 33 C2 FA | 	rdbyte	local11, local12
2cdac     40 32 46 F5 | 	or	local11, #64
2cdb0     10 1E 06 F1 | 	add	local01, #16
2cdb4     0F 33 42 FC | 	wrbyte	local11, local01
2cdb8                 | ' 
2cdb8                 | ' 
2cdb8                 | ' 
2cdb8                 | ' 
2cdb8                 | ' 
2cdb8                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cdb8                 | ' 		fp->flag |=  0x80 ;
2cdb8                 | ' 
2cdb8                 | ' 	}
2cdb8                 | ' 
2cdb8                 | ' 	fp->flag |=  0x40 ;
2cdb8                 | ' 
2cdb8                 | ' 	return FR_OK ;
2cdb8     00 FA 05 F6 | 	mov	result1, #0
2cdbc                 | LR__4573
2cdbc     A7 F0 03 F6 | 	mov	ptra, fp
2cdc0     B2 00 A0 FD | 	call	#popregs_
2cdc4                 | _fatfs_cc_f_write_ret
2cdc4     2D 00 64 FD | 	ret
2cdc8                 | 
2cdc8                 | _fatfs_cc_f_sync
2cdc8     00 4A 05 F6 | 	mov	COUNT_, #0
2cdcc     A8 00 A0 FD | 	call	#pushregs_
2cdd0     18 F0 07 F1 | 	add	ptra, #24
2cdd4     04 4E 05 F1 | 	add	fp, #4
2cdd8     A7 12 62 FC | 	wrlong	arg01, fp
2cddc     08 4E 05 F1 | 	add	fp, #8
2cde0     A7 14 02 F6 | 	mov	arg02, fp
2cde4     0C 4E 85 F1 | 	sub	fp, #12
2cde8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cdec     08 4E 05 F1 | 	add	fp, #8
2cdf0     A7 FA 61 FC | 	wrlong	result1, fp
2cdf4     08 4E 85 F1 | 	sub	fp, #8
2cdf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdfc     C0 01 90 5D |  if_ne	jmp	#LR__4583
2ce00     04 4E 05 F1 | 	add	fp, #4
2ce04     A7 18 02 FB | 	rdlong	arg04, fp
2ce08     04 4E 85 F1 | 	sub	fp, #4
2ce0c     10 18 06 F1 | 	add	arg04, #16
2ce10     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce14     40 18 CE F7 | 	test	arg04, #64 wz
2ce18     A4 01 90 AD |  if_e	jmp	#LR__4582
2ce1c     04 4E 05 F1 | 	add	fp, #4
2ce20     A7 18 02 FB | 	rdlong	arg04, fp
2ce24     04 4E 85 F1 | 	sub	fp, #4
2ce28     10 18 06 F1 | 	add	arg04, #16
2ce2c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce30     80 18 CE F7 | 	test	arg04, #128 wz
2ce34     64 00 90 AD |  if_e	jmp	#LR__4580
2ce38     0C 4E 05 F1 | 	add	fp, #12
2ce3c     A7 18 02 FB | 	rdlong	arg04, fp
2ce40     01 18 06 F1 | 	add	arg04, #1
2ce44     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ce48     08 4E 85 F1 | 	sub	fp, #8
2ce4c     A7 18 02 FB | 	rdlong	arg04, fp
2ce50     0C 15 02 F6 | 	mov	arg02, arg04
2ce54     28 14 06 F1 | 	add	arg02, #40
2ce58     04 4E 85 F1 | 	sub	fp, #4
2ce5c     1C 18 06 F1 | 	add	arg04, #28
2ce60     0C 17 02 FB | 	rdlong	arg03, arg04
2ce64     01 18 06 F6 | 	mov	arg04, #1
2ce68     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ce6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce70     01 FA 05 56 |  if_ne	mov	result1, #1
2ce74     54 01 90 5D |  if_ne	jmp	#LR__4584
2ce78     04 4E 05 F1 | 	add	fp, #4
2ce7c     A7 18 02 FB | 	rdlong	arg04, fp
2ce80     0C 17 02 F6 | 	mov	arg03, arg04
2ce84     04 4E 85 F1 | 	sub	fp, #4
2ce88     10 18 06 F1 | 	add	arg04, #16
2ce8c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce90     7F 18 06 F5 | 	and	arg04, #127
2ce94     10 16 06 F1 | 	add	arg03, #16
2ce98     0B 19 42 FC | 	wrbyte	arg04, arg03
2ce9c                 | LR__4580
2ce9c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cea0     10 4E 05 F1 | 	add	fp, #16
2cea4     A7 FA 61 FC | 	wrlong	result1, fp
2cea8     04 4E 85 F1 | 	sub	fp, #4
2ceac     A7 12 02 FB | 	rdlong	arg01, fp
2ceb0     08 4E 85 F1 | 	sub	fp, #8
2ceb4     A7 18 02 FB | 	rdlong	arg04, fp
2ceb8     04 4E 85 F1 | 	sub	fp, #4
2cebc     20 18 06 F1 | 	add	arg04, #32
2cec0     0C 15 02 FB | 	rdlong	arg02, arg04
2cec4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cec8     08 4E 05 F1 | 	add	fp, #8
2cecc     A7 FA 61 FC | 	wrlong	result1, fp
2ced0     08 4E 85 F1 | 	sub	fp, #8
2ced4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ced8     E4 00 90 5D |  if_ne	jmp	#LR__4581
2cedc     04 4E 05 F1 | 	add	fp, #4
2cee0     A7 18 02 FB | 	rdlong	arg04, fp
2cee4     24 18 06 F1 | 	add	arg04, #36
2cee8     0C 19 02 FB | 	rdlong	arg04, arg04
2ceec     10 4E 05 F1 | 	add	fp, #16
2cef0     A7 18 62 FC | 	wrlong	arg04, fp
2cef4     0C 17 02 F6 | 	mov	arg03, arg04
2cef8     0B 16 06 F1 | 	add	arg03, #11
2cefc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cf00     20 16 46 F5 | 	or	arg03, #32
2cf04     0B 18 06 F1 | 	add	arg04, #11
2cf08     0C 17 42 FC | 	wrbyte	arg03, arg04
2cf0c     10 4E 85 F1 | 	sub	fp, #16
2cf10     A7 18 02 FB | 	rdlong	arg04, fp
2cf14     0C 13 02 FB | 	rdlong	arg01, arg04
2cf18     10 4E 05 F1 | 	add	fp, #16
2cf1c     A7 14 02 FB | 	rdlong	arg02, fp
2cf20     14 4E 85 F1 | 	sub	fp, #20
2cf24     08 18 06 F1 | 	add	arg04, #8
2cf28     0C 17 02 FB | 	rdlong	arg03, arg04
2cf2c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cf30     14 4E 05 F1 | 	add	fp, #20
2cf34     A7 12 02 FB | 	rdlong	arg01, fp
2cf38     1C 12 06 F1 | 	add	arg01, #28
2cf3c     10 4E 85 F1 | 	sub	fp, #16
2cf40     A7 18 02 FB | 	rdlong	arg04, fp
2cf44     0C 18 06 F1 | 	add	arg04, #12
2cf48     0C 15 02 FB | 	rdlong	arg02, arg04
2cf4c     09 15 62 FC | 	wrlong	arg02, arg01
2cf50     10 4E 05 F1 | 	add	fp, #16
2cf54     A7 12 02 FB | 	rdlong	arg01, fp
2cf58     16 12 06 F1 | 	add	arg01, #22
2cf5c     04 4E 85 F1 | 	sub	fp, #4
2cf60     A7 14 02 FB | 	rdlong	arg02, fp
2cf64     09 15 62 FC | 	wrlong	arg02, arg01
2cf68     04 4E 05 F1 | 	add	fp, #4
2cf6c     A7 12 02 FB | 	rdlong	arg01, fp
2cf70     12 12 06 F1 | 	add	arg01, #18
2cf74     09 01 58 FC | 	wrword	#0, arg01
2cf78     08 4E 85 F1 | 	sub	fp, #8
2cf7c     A7 18 02 FB | 	rdlong	arg04, fp
2cf80     03 18 06 F1 | 	add	arg04, #3
2cf84     0C 03 48 FC | 	wrbyte	#1, arg04
2cf88     A7 12 02 FB | 	rdlong	arg01, fp
2cf8c     0C 4E 85 F1 | 	sub	fp, #12
2cf90     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cf94     08 4E 05 F1 | 	add	fp, #8
2cf98     A7 FA 61 FC | 	wrlong	result1, fp
2cf9c     04 4E 85 F1 | 	sub	fp, #4
2cfa0     A7 18 02 FB | 	rdlong	arg04, fp
2cfa4     0C 17 02 F6 | 	mov	arg03, arg04
2cfa8     04 4E 85 F1 | 	sub	fp, #4
2cfac     10 18 06 F1 | 	add	arg04, #16
2cfb0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cfb4     BF 18 06 F5 | 	and	arg04, #191
2cfb8     10 16 06 F1 | 	add	arg03, #16
2cfbc     0B 19 42 FC | 	wrbyte	arg04, arg03
2cfc0                 | LR__4581
2cfc0                 | LR__4582
2cfc0                 | LR__4583
2cfc0                 | ' 					dir = fp->dir_ptr;
2cfc0                 | ' 					dir[ 11 ] |=  0x20 ;
2cfc0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cfc0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cfc0                 | ' 					st_dword(dir +  22 , tm);
2cfc0                 | ' 					st_word(dir +  18 , 0);
2cfc0                 | ' 					fs->wflag = 1;
2cfc0                 | ' 					res = sync_fs(fs);
2cfc0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cfc0                 | ' 				}
2cfc0                 | ' 			}
2cfc0                 | ' 		}
2cfc0                 | ' 	}
2cfc0                 | ' 
2cfc0                 | ' 	return res ;
2cfc0     08 4E 05 F1 | 	add	fp, #8
2cfc4     A7 FA 01 FB | 	rdlong	result1, fp
2cfc8     08 4E 85 F1 | 	sub	fp, #8
2cfcc                 | LR__4584
2cfcc     A7 F0 03 F6 | 	mov	ptra, fp
2cfd0     B2 00 A0 FD | 	call	#popregs_
2cfd4                 | _fatfs_cc_f_sync_ret
2cfd4     2D 00 64 FD | 	ret
2cfd8                 | 
2cfd8                 | _fatfs_cc_f_close
2cfd8     01 4A 05 F6 | 	mov	COUNT_, #1
2cfdc     A8 00 A0 FD | 	call	#pushregs_
2cfe0     10 F0 07 F1 | 	add	ptra, #16
2cfe4     04 4E 05 F1 | 	add	fp, #4
2cfe8     A7 12 62 FC | 	wrlong	arg01, fp
2cfec     04 4E 85 F1 | 	sub	fp, #4
2cff0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cff4     08 4E 05 F1 | 	add	fp, #8
2cff8     A7 FA 61 FC | 	wrlong	result1, fp
2cffc     08 4E 85 F1 | 	sub	fp, #8
2d000     00 FA 0D F2 | 	cmp	result1, #0 wz
2d004     38 00 90 5D |  if_ne	jmp	#LR__4590
2d008     04 4E 05 F1 | 	add	fp, #4
2d00c     A7 12 02 FB | 	rdlong	arg01, fp
2d010     08 4E 05 F1 | 	add	fp, #8
2d014     A7 14 02 F6 | 	mov	arg02, fp
2d018     0C 4E 85 F1 | 	sub	fp, #12
2d01c     9C E6 BF FD | 	call	#_fatfs_cc_validate
2d020     08 4E 05 F1 | 	add	fp, #8
2d024     A7 FA 61 FC | 	wrlong	result1, fp
2d028     08 4E 85 F1 | 	sub	fp, #8
2d02c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d030     04 4E 05 A1 |  if_e	add	fp, #4
2d034     A7 1E 02 AB |  if_e	rdlong	local01, fp
2d038     04 4E 85 A1 |  if_e	sub	fp, #4
2d03c     0F 01 68 AC |  if_e	wrlong	#0, local01
2d040                 | LR__4590
2d040                 | ' 
2d040                 | ' 
2d040                 | ' 
2d040                 | ' 
2d040                 | ' 			fp->obj.fs = 0;
2d040                 | ' #line 4192 "ff.c"
2d040                 | ' 		}
2d040                 | ' 	}
2d040                 | ' 	return res;
2d040     08 4E 05 F1 | 	add	fp, #8
2d044     A7 FA 01 FB | 	rdlong	result1, fp
2d048     08 4E 85 F1 | 	sub	fp, #8
2d04c     A7 F0 03 F6 | 	mov	ptra, fp
2d050     B2 00 A0 FD | 	call	#popregs_
2d054                 | _fatfs_cc_f_close_ret
2d054     2D 00 64 FD | 	ret
2d058                 | 
2d058                 | _fatfs_cc_f_lseek
2d058     00 4A 05 F6 | 	mov	COUNT_, #0
2d05c     A8 00 A0 FD | 	call	#pushregs_
2d060     24 F0 07 F1 | 	add	ptra, #36
2d064     04 4E 05 F1 | 	add	fp, #4
2d068     A7 12 62 FC | 	wrlong	arg01, fp
2d06c     04 4E 05 F1 | 	add	fp, #4
2d070     A7 14 62 FC | 	wrlong	arg02, fp
2d074     04 4E 85 F1 | 	sub	fp, #4
2d078     A7 12 02 FB | 	rdlong	arg01, fp
2d07c     0C 4E 05 F1 | 	add	fp, #12
2d080     A7 14 02 F6 | 	mov	arg02, fp
2d084     10 4E 85 F1 | 	sub	fp, #16
2d088     30 E6 BF FD | 	call	#_fatfs_cc_validate
2d08c     0C 4E 05 F1 | 	add	fp, #12
2d090     A7 FA 61 FC | 	wrlong	result1, fp
2d094     0C 4E 85 F1 | 	sub	fp, #12
2d098     00 FA 0D F2 | 	cmp	result1, #0 wz
2d09c     1C 00 90 5D |  if_ne	jmp	#LR__4600
2d0a0     04 4E 05 F1 | 	add	fp, #4
2d0a4     A7 18 02 FB | 	rdlong	arg04, fp
2d0a8     11 18 06 F1 | 	add	arg04, #17
2d0ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d0b0     08 4E 05 F1 | 	add	fp, #8
2d0b4     A7 18 62 FC | 	wrlong	arg04, fp
2d0b8     0C 4E 85 F1 | 	sub	fp, #12
2d0bc                 | LR__4600
2d0bc     0C 4E 05 F1 | 	add	fp, #12
2d0c0     A7 18 0A FB | 	rdlong	arg04, fp wz
2d0c4     0C 4E 85 F1 | 	sub	fp, #12
2d0c8     0C 4E 05 51 |  if_ne	add	fp, #12
2d0cc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d0d0     0C 4E 85 51 |  if_ne	sub	fp, #12
2d0d4     40 06 90 5D |  if_ne	jmp	#LR__4623
2d0d8     04 4E 05 F1 | 	add	fp, #4
2d0dc     A7 18 02 FB | 	rdlong	arg04, fp
2d0e0     04 4E 05 F1 | 	add	fp, #4
2d0e4     A7 16 02 FB | 	rdlong	arg03, fp
2d0e8     08 4E 85 F1 | 	sub	fp, #8
2d0ec     0C 18 06 F1 | 	add	arg04, #12
2d0f0     0C 19 02 FB | 	rdlong	arg04, arg04
2d0f4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d0f8     3C 00 90 ED |  if_be	jmp	#LR__4601
2d0fc     04 4E 05 F1 | 	add	fp, #4
2d100     A7 16 02 FB | 	rdlong	arg03, fp
2d104     04 4E 85 F1 | 	sub	fp, #4
2d108     10 16 06 F1 | 	add	arg03, #16
2d10c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d110     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d114     02 16 CE F7 | 	test	arg03, #2 wz
2d118     1C 00 90 5D |  if_ne	jmp	#LR__4601
2d11c     04 4E 05 F1 | 	add	fp, #4
2d120     A7 16 02 FB | 	rdlong	arg03, fp
2d124     0C 16 06 F1 | 	add	arg03, #12
2d128     0B 17 02 FB | 	rdlong	arg03, arg03
2d12c     04 4E 05 F1 | 	add	fp, #4
2d130     A7 16 62 FC | 	wrlong	arg03, fp
2d134     08 4E 85 F1 | 	sub	fp, #8
2d138                 | LR__4601
2d138     04 4E 05 F1 | 	add	fp, #4
2d13c     A7 16 02 FB | 	rdlong	arg03, fp
2d140     14 16 06 F1 | 	add	arg03, #20
2d144     0B 17 02 FB | 	rdlong	arg03, arg03
2d148     1C 4E 05 F1 | 	add	fp, #28
2d14c     A7 16 62 FC | 	wrlong	arg03, fp
2d150     1C 4E 85 F1 | 	sub	fp, #28
2d154     A7 16 02 FB | 	rdlong	arg03, fp
2d158     18 4E 05 F1 | 	add	fp, #24
2d15c     A7 00 68 FC | 	wrlong	#0, fp
2d160     14 16 06 F1 | 	add	arg03, #20
2d164     0B 01 68 FC | 	wrlong	#0, arg03
2d168     14 4E 85 F1 | 	sub	fp, #20
2d16c     A7 16 02 FB | 	rdlong	arg03, fp
2d170     08 4E 85 F1 | 	sub	fp, #8
2d174     01 16 16 F2 | 	cmp	arg03, #1 wc
2d178     E4 03 90 CD |  if_b	jmp	#LR__4617
2d17c     10 4E 05 F1 | 	add	fp, #16
2d180     A7 16 02 FB | 	rdlong	arg03, fp
2d184     0A 16 06 F1 | 	add	arg03, #10
2d188     0B 19 E2 FA | 	rdword	arg04, arg03
2d18c     09 18 66 F0 | 	shl	arg04, #9
2d190     08 4E 05 F1 | 	add	fp, #8
2d194     A7 18 62 FC | 	wrlong	arg04, fp
2d198     08 4E 05 F1 | 	add	fp, #8
2d19c     A7 18 02 FB | 	rdlong	arg04, fp
2d1a0     20 4E 85 F1 | 	sub	fp, #32
2d1a4     01 18 16 F2 | 	cmp	arg04, #1 wc
2d1a8     AC 00 90 CD |  if_b	jmp	#LR__4602
2d1ac     08 4E 05 F1 | 	add	fp, #8
2d1b0     A7 18 02 FB | 	rdlong	arg04, fp
2d1b4     01 18 86 F1 | 	sub	arg04, #1
2d1b8     10 4E 05 F1 | 	add	fp, #16
2d1bc     A7 16 02 FB | 	rdlong	arg03, fp
2d1c0     0B 19 12 FD | 	qdiv	arg04, arg03
2d1c4     08 4E 05 F1 | 	add	fp, #8
2d1c8     A7 FA 01 FB | 	rdlong	result1, fp
2d1cc     01 FA 85 F1 | 	sub	result1, #1
2d1d0     18 18 62 FD | 	getqx	arg04
2d1d4     0B FB 11 FD | 	qdiv	result1, arg03
2d1d8     20 4E 85 F1 | 	sub	fp, #32
2d1dc     18 16 62 FD | 	getqx	arg03
2d1e0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d1e4     70 00 90 CD |  if_b	jmp	#LR__4602
2d1e8     04 4E 05 F1 | 	add	fp, #4
2d1ec     A7 16 02 FB | 	rdlong	arg03, fp
2d1f0     1C 4E 05 F1 | 	add	fp, #28
2d1f4     A7 FA 01 FB | 	rdlong	result1, fp
2d1f8     01 FA 85 F1 | 	sub	result1, #1
2d1fc     08 4E 85 F1 | 	sub	fp, #8
2d200     A7 18 02 FB | 	rdlong	arg04, fp
2d204     01 18 86 F1 | 	sub	arg04, #1
2d208     0C FB 21 F5 | 	andn	result1, arg04
2d20c     14 16 06 F1 | 	add	arg03, #20
2d210     0B FB 61 FC | 	wrlong	result1, arg03
2d214     10 4E 85 F1 | 	sub	fp, #16
2d218     A7 16 02 FB | 	rdlong	arg03, fp
2d21c     04 4E 85 F1 | 	sub	fp, #4
2d220     A7 18 02 FB | 	rdlong	arg04, fp
2d224     14 18 06 F1 | 	add	arg04, #20
2d228     0C 19 02 FB | 	rdlong	arg04, arg04
2d22c     0C 17 82 F1 | 	sub	arg03, arg04
2d230     04 4E 05 F1 | 	add	fp, #4
2d234     A7 16 62 FC | 	wrlong	arg03, fp
2d238     04 4E 85 F1 | 	sub	fp, #4
2d23c     A7 16 02 FB | 	rdlong	arg03, fp
2d240     18 16 06 F1 | 	add	arg03, #24
2d244     0B 17 02 FB | 	rdlong	arg03, arg03
2d248     10 4E 05 F1 | 	add	fp, #16
2d24c     A7 16 62 FC | 	wrlong	arg03, fp
2d250     14 4E 85 F1 | 	sub	fp, #20
2d254     D0 00 90 FD | 	jmp	#LR__4606
2d258                 | LR__4602
2d258     04 4E 05 F1 | 	add	fp, #4
2d25c     A7 16 02 FB | 	rdlong	arg03, fp
2d260     08 16 06 F1 | 	add	arg03, #8
2d264     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d268     10 4E 05 F1 | 	add	fp, #16
2d26c     A7 16 62 FC | 	wrlong	arg03, fp
2d270     14 4E 85 F1 | 	sub	fp, #20
2d274     94 00 90 5D |  if_ne	jmp	#LR__4605
2d278     04 4E 05 F1 | 	add	fp, #4
2d27c     A7 12 02 FB | 	rdlong	arg01, fp
2d280     04 4E 85 F1 | 	sub	fp, #4
2d284     00 14 06 F6 | 	mov	arg02, #0
2d288     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d28c     14 4E 05 F1 | 	add	fp, #20
2d290     A7 FA 61 FC | 	wrlong	result1, fp
2d294     14 4E 85 F1 | 	sub	fp, #20
2d298     01 FA 0D F2 | 	cmp	result1, #1 wz
2d29c     1C 00 90 5D |  if_ne	jmp	#LR__4603
2d2a0     04 4E 05 F1 | 	add	fp, #4
2d2a4     A7 16 02 FB | 	rdlong	arg03, fp
2d2a8     04 4E 85 F1 | 	sub	fp, #4
2d2ac     11 16 06 F1 | 	add	arg03, #17
2d2b0     0B 05 48 FC | 	wrbyte	#2, arg03
2d2b4     02 FA 05 F6 | 	mov	result1, #2
2d2b8     5C 04 90 FD | 	jmp	#LR__4623
2d2bc                 | LR__4603
2d2bc     14 4E 05 F1 | 	add	fp, #20
2d2c0     A7 FA 01 FB | 	rdlong	result1, fp
2d2c4     14 4E 85 F1 | 	sub	fp, #20
2d2c8     FF FF 7F FF 
2d2cc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d2d0     1C 00 90 5D |  if_ne	jmp	#LR__4604
2d2d4     04 4E 05 F1 | 	add	fp, #4
2d2d8     A7 16 02 FB | 	rdlong	arg03, fp
2d2dc     04 4E 85 F1 | 	sub	fp, #4
2d2e0     11 16 06 F1 | 	add	arg03, #17
2d2e4     0B 03 48 FC | 	wrbyte	#1, arg03
2d2e8     01 FA 05 F6 | 	mov	result1, #1
2d2ec     28 04 90 FD | 	jmp	#LR__4623
2d2f0                 | LR__4604
2d2f0     04 4E 05 F1 | 	add	fp, #4
2d2f4     A7 16 02 FB | 	rdlong	arg03, fp
2d2f8     10 4E 05 F1 | 	add	fp, #16
2d2fc     A7 18 02 FB | 	rdlong	arg04, fp
2d300     14 4E 85 F1 | 	sub	fp, #20
2d304     08 16 06 F1 | 	add	arg03, #8
2d308     0B 19 62 FC | 	wrlong	arg04, arg03
2d30c                 | LR__4605
2d30c     04 4E 05 F1 | 	add	fp, #4
2d310     A7 16 02 FB | 	rdlong	arg03, fp
2d314     10 4E 05 F1 | 	add	fp, #16
2d318     A7 18 02 FB | 	rdlong	arg04, fp
2d31c     14 4E 85 F1 | 	sub	fp, #20
2d320     18 16 06 F1 | 	add	arg03, #24
2d324     0B 19 62 FC | 	wrlong	arg04, arg03
2d328                 | LR__4606
2d328     14 4E 05 F1 | 	add	fp, #20
2d32c     A7 16 0A FB | 	rdlong	arg03, fp wz
2d330     14 4E 85 F1 | 	sub	fp, #20
2d334     28 02 90 AD |  if_e	jmp	#LR__4616
2d338                 | ' 				while (ofs > bcs) {
2d338                 | LR__4607
2d338     08 4E 05 F1 | 	add	fp, #8
2d33c     A7 18 02 FB | 	rdlong	arg04, fp
2d340     10 4E 05 F1 | 	add	fp, #16
2d344     A7 16 02 FB | 	rdlong	arg03, fp
2d348     18 4E 85 F1 | 	sub	fp, #24
2d34c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d350     68 01 90 ED |  if_be	jmp	#LR__4613
2d354     08 4E 05 F1 | 	add	fp, #8
2d358     A7 18 02 FB | 	rdlong	arg04, fp
2d35c     10 4E 05 F1 | 	add	fp, #16
2d360     A7 16 02 FB | 	rdlong	arg03, fp
2d364     0B 19 82 F1 | 	sub	arg04, arg03
2d368     10 4E 85 F1 | 	sub	fp, #16
2d36c     A7 18 62 FC | 	wrlong	arg04, fp
2d370     04 4E 85 F1 | 	sub	fp, #4
2d374     A7 18 02 FB | 	rdlong	arg04, fp
2d378     0C FB 01 F6 | 	mov	result1, arg04
2d37c     14 18 06 F1 | 	add	arg04, #20
2d380     0C 19 02 FB | 	rdlong	arg04, arg04
2d384     14 4E 05 F1 | 	add	fp, #20
2d388     A7 16 02 FB | 	rdlong	arg03, fp
2d38c     0B 19 02 F1 | 	add	arg04, arg03
2d390     14 FA 05 F1 | 	add	result1, #20
2d394     FD 18 62 FC | 	wrlong	arg04, result1
2d398     14 4E 85 F1 | 	sub	fp, #20
2d39c     A7 16 02 FB | 	rdlong	arg03, fp
2d3a0     04 4E 85 F1 | 	sub	fp, #4
2d3a4     10 16 06 F1 | 	add	arg03, #16
2d3a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d3ac     02 16 CE F7 | 	test	arg03, #2 wz
2d3b0     3C 00 90 AD |  if_e	jmp	#LR__4608
2d3b4     04 4E 05 F1 | 	add	fp, #4
2d3b8     A7 12 02 FB | 	rdlong	arg01, fp
2d3bc     10 4E 05 F1 | 	add	fp, #16
2d3c0     A7 14 02 FB | 	rdlong	arg02, fp
2d3c4     14 4E 85 F1 | 	sub	fp, #20
2d3c8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d3cc     14 4E 05 F1 | 	add	fp, #20
2d3d0     A7 FA 61 FC | 	wrlong	result1, fp
2d3d4     00 FA 4D F2 | 	cmps	result1, #0 wz
2d3d8     14 4E 85 F1 | 	sub	fp, #20
2d3dc     08 4E 05 A1 |  if_e	add	fp, #8
2d3e0     A7 00 68 AC |  if_e	wrlong	#0, fp
2d3e4     08 4E 85 A1 |  if_e	sub	fp, #8
2d3e8                 | ' 							ofs = 0; break;
2d3e8     D0 00 90 AD |  if_e	jmp	#LR__4613
2d3ec     24 00 90 FD | 	jmp	#LR__4609
2d3f0                 | LR__4608
2d3f0     04 4E 05 F1 | 	add	fp, #4
2d3f4     A7 12 02 FB | 	rdlong	arg01, fp
2d3f8     10 4E 05 F1 | 	add	fp, #16
2d3fc     A7 14 02 FB | 	rdlong	arg02, fp
2d400     14 4E 85 F1 | 	sub	fp, #20
2d404     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d408     14 4E 05 F1 | 	add	fp, #20
2d40c     A7 FA 61 FC | 	wrlong	result1, fp
2d410     14 4E 85 F1 | 	sub	fp, #20
2d414                 | LR__4609
2d414     14 4E 05 F1 | 	add	fp, #20
2d418     A7 16 02 FB | 	rdlong	arg03, fp
2d41c     14 4E 85 F1 | 	sub	fp, #20
2d420     FF FF 7F FF 
2d424     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d428     1C 00 90 5D |  if_ne	jmp	#LR__4610
2d42c     04 4E 05 F1 | 	add	fp, #4
2d430     A7 16 02 FB | 	rdlong	arg03, fp
2d434     04 4E 85 F1 | 	sub	fp, #4
2d438     11 16 06 F1 | 	add	arg03, #17
2d43c     0B 03 48 FC | 	wrbyte	#1, arg03
2d440     01 FA 05 F6 | 	mov	result1, #1
2d444     D0 02 90 FD | 	jmp	#LR__4623
2d448                 | LR__4610
2d448     14 4E 05 F1 | 	add	fp, #20
2d44c     A7 16 02 FB | 	rdlong	arg03, fp
2d450     14 4E 85 F1 | 	sub	fp, #20
2d454     02 16 16 F2 | 	cmp	arg03, #2 wc
2d458     24 00 90 CD |  if_b	jmp	#LR__4611
2d45c     10 4E 05 F1 | 	add	fp, #16
2d460     A7 18 02 FB | 	rdlong	arg04, fp
2d464     04 4E 05 F1 | 	add	fp, #4
2d468     A7 16 02 FB | 	rdlong	arg03, fp
2d46c     14 4E 85 F1 | 	sub	fp, #20
2d470     18 18 06 F1 | 	add	arg04, #24
2d474     0C 19 02 FB | 	rdlong	arg04, arg04
2d478     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d47c     1C 00 90 CD |  if_b	jmp	#LR__4612
2d480                 | LR__4611
2d480     04 4E 05 F1 | 	add	fp, #4
2d484     A7 16 02 FB | 	rdlong	arg03, fp
2d488     04 4E 85 F1 | 	sub	fp, #4
2d48c     11 16 06 F1 | 	add	arg03, #17
2d490     0B 05 48 FC | 	wrbyte	#2, arg03
2d494     02 FA 05 F6 | 	mov	result1, #2
2d498     7C 02 90 FD | 	jmp	#LR__4623
2d49c                 | LR__4612
2d49c     04 4E 05 F1 | 	add	fp, #4
2d4a0     A7 18 02 FB | 	rdlong	arg04, fp
2d4a4     10 4E 05 F1 | 	add	fp, #16
2d4a8     A7 16 02 FB | 	rdlong	arg03, fp
2d4ac     14 4E 85 F1 | 	sub	fp, #20
2d4b0     18 18 06 F1 | 	add	arg04, #24
2d4b4     0C 17 62 FC | 	wrlong	arg03, arg04
2d4b8     7C FE 9F FD | 	jmp	#LR__4607
2d4bc                 | LR__4613
2d4bc     04 4E 05 F1 | 	add	fp, #4
2d4c0     A7 16 02 FB | 	rdlong	arg03, fp
2d4c4     0B 13 02 F6 | 	mov	arg01, arg03
2d4c8     14 16 06 F1 | 	add	arg03, #20
2d4cc     0B 15 02 FB | 	rdlong	arg02, arg03
2d4d0     04 4E 05 F1 | 	add	fp, #4
2d4d4     A7 16 02 FB | 	rdlong	arg03, fp
2d4d8     0B 15 02 F1 | 	add	arg02, arg03
2d4dc     14 12 06 F1 | 	add	arg01, #20
2d4e0     09 15 62 FC | 	wrlong	arg02, arg01
2d4e4     A7 16 02 FB | 	rdlong	arg03, fp
2d4e8     08 4E 85 F1 | 	sub	fp, #8
2d4ec     FF 17 CE F7 | 	test	arg03, #511 wz
2d4f0     6C 00 90 AD |  if_e	jmp	#LR__4615
2d4f4     10 4E 05 F1 | 	add	fp, #16
2d4f8     A7 12 02 FB | 	rdlong	arg01, fp
2d4fc     04 4E 05 F1 | 	add	fp, #4
2d500     A7 14 02 FB | 	rdlong	arg02, fp
2d504     14 4E 85 F1 | 	sub	fp, #20
2d508     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d50c     1C 4E 05 F1 | 	add	fp, #28
2d510     A7 FA 61 FC | 	wrlong	result1, fp
2d514     1C 4E 85 F1 | 	sub	fp, #28
2d518     00 FA 0D F2 | 	cmp	result1, #0 wz
2d51c     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d520     04 4E 05 F1 | 	add	fp, #4
2d524     A7 16 02 FB | 	rdlong	arg03, fp
2d528     04 4E 85 F1 | 	sub	fp, #4
2d52c     11 16 06 F1 | 	add	arg03, #17
2d530     0B 05 48 FC | 	wrbyte	#2, arg03
2d534     02 FA 05 F6 | 	mov	result1, #2
2d538     DC 01 90 FD | 	jmp	#LR__4623
2d53c                 | LR__4614
2d53c     1C 4E 05 F1 | 	add	fp, #28
2d540     A7 18 02 FB | 	rdlong	arg04, fp
2d544     14 4E 85 F1 | 	sub	fp, #20
2d548     A7 16 02 FB | 	rdlong	arg03, fp
2d54c     09 16 46 F0 | 	shr	arg03, #9
2d550     0B 19 02 F1 | 	add	arg04, arg03
2d554     14 4E 05 F1 | 	add	fp, #20
2d558     A7 18 62 FC | 	wrlong	arg04, fp
2d55c     1C 4E 85 F1 | 	sub	fp, #28
2d560                 | LR__4615
2d560                 | LR__4616
2d560                 | LR__4617
2d560     04 4E 05 F1 | 	add	fp, #4
2d564     A7 18 02 FB | 	rdlong	arg04, fp
2d568     0C 17 02 F6 | 	mov	arg03, arg04
2d56c     04 4E 85 F1 | 	sub	fp, #4
2d570     14 16 06 F1 | 	add	arg03, #20
2d574     0B 17 02 FB | 	rdlong	arg03, arg03
2d578     0C 18 06 F1 | 	add	arg04, #12
2d57c     0C 19 02 FB | 	rdlong	arg04, arg04
2d580     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d584     3C 00 90 ED |  if_be	jmp	#LR__4618
2d588     04 4E 05 F1 | 	add	fp, #4
2d58c     A7 18 02 FB | 	rdlong	arg04, fp
2d590     0C 17 02 F6 | 	mov	arg03, arg04
2d594     14 18 06 F1 | 	add	arg04, #20
2d598     0C 19 02 FB | 	rdlong	arg04, arg04
2d59c     0C 16 06 F1 | 	add	arg03, #12
2d5a0     0B 19 62 FC | 	wrlong	arg04, arg03
2d5a4     A7 18 02 FB | 	rdlong	arg04, fp
2d5a8     0C 17 02 F6 | 	mov	arg03, arg04
2d5ac     04 4E 85 F1 | 	sub	fp, #4
2d5b0     10 18 06 F1 | 	add	arg04, #16
2d5b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d5b8     40 18 46 F5 | 	or	arg04, #64
2d5bc     10 16 06 F1 | 	add	arg03, #16
2d5c0     0B 19 42 FC | 	wrbyte	arg04, arg03
2d5c4                 | LR__4618
2d5c4     04 4E 05 F1 | 	add	fp, #4
2d5c8     A7 16 02 FB | 	rdlong	arg03, fp
2d5cc     04 4E 85 F1 | 	sub	fp, #4
2d5d0     14 16 06 F1 | 	add	arg03, #20
2d5d4     0B 17 02 FB | 	rdlong	arg03, arg03
2d5d8     FF 17 CE F7 | 	test	arg03, #511 wz
2d5dc     2C 01 90 AD |  if_e	jmp	#LR__4622
2d5e0     04 4E 05 F1 | 	add	fp, #4
2d5e4     A7 18 02 FB | 	rdlong	arg04, fp
2d5e8     18 4E 05 F1 | 	add	fp, #24
2d5ec     A7 16 02 FB | 	rdlong	arg03, fp
2d5f0     1C 4E 85 F1 | 	sub	fp, #28
2d5f4     1C 18 06 F1 | 	add	arg04, #28
2d5f8     0C 19 02 FB | 	rdlong	arg04, arg04
2d5fc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d600     08 01 90 AD |  if_e	jmp	#LR__4622
2d604     04 4E 05 F1 | 	add	fp, #4
2d608     A7 16 02 FB | 	rdlong	arg03, fp
2d60c     04 4E 85 F1 | 	sub	fp, #4
2d610     10 16 06 F1 | 	add	arg03, #16
2d614     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d618     80 16 CE F7 | 	test	arg03, #128 wz
2d61c     7C 00 90 AD |  if_e	jmp	#LR__4620
2d620     10 4E 05 F1 | 	add	fp, #16
2d624     A7 16 02 FB | 	rdlong	arg03, fp
2d628     01 16 06 F1 | 	add	arg03, #1
2d62c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d630     0C 4E 85 F1 | 	sub	fp, #12
2d634     A7 16 02 FB | 	rdlong	arg03, fp
2d638     0B 15 02 F6 | 	mov	arg02, arg03
2d63c     28 14 06 F1 | 	add	arg02, #40
2d640     04 4E 85 F1 | 	sub	fp, #4
2d644     1C 16 06 F1 | 	add	arg03, #28
2d648     0B 17 02 FB | 	rdlong	arg03, arg03
2d64c     01 18 06 F6 | 	mov	arg04, #1
2d650     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d654     00 FA 0D F2 | 	cmp	result1, #0 wz
2d658     1C 00 90 AD |  if_e	jmp	#LR__4619
2d65c     04 4E 05 F1 | 	add	fp, #4
2d660     A7 16 02 FB | 	rdlong	arg03, fp
2d664     04 4E 85 F1 | 	sub	fp, #4
2d668     11 16 06 F1 | 	add	arg03, #17
2d66c     0B 03 48 FC | 	wrbyte	#1, arg03
2d670     01 FA 05 F6 | 	mov	result1, #1
2d674     A0 00 90 FD | 	jmp	#LR__4623
2d678                 | LR__4619
2d678     04 4E 05 F1 | 	add	fp, #4
2d67c     A7 18 02 FB | 	rdlong	arg04, fp
2d680     0C 17 02 F6 | 	mov	arg03, arg04
2d684     04 4E 85 F1 | 	sub	fp, #4
2d688     10 18 06 F1 | 	add	arg04, #16
2d68c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d690     7F 18 06 F5 | 	and	arg04, #127
2d694     10 16 06 F1 | 	add	arg03, #16
2d698     0B 19 42 FC | 	wrbyte	arg04, arg03
2d69c                 | LR__4620
2d69c     10 4E 05 F1 | 	add	fp, #16
2d6a0     A7 16 02 FB | 	rdlong	arg03, fp
2d6a4     01 16 06 F1 | 	add	arg03, #1
2d6a8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d6ac     0C 4E 85 F1 | 	sub	fp, #12
2d6b0     A7 14 02 FB | 	rdlong	arg02, fp
2d6b4     28 14 06 F1 | 	add	arg02, #40
2d6b8     18 4E 05 F1 | 	add	fp, #24
2d6bc     A7 16 02 FB | 	rdlong	arg03, fp
2d6c0     1C 4E 85 F1 | 	sub	fp, #28
2d6c4     01 18 06 F6 | 	mov	arg04, #1
2d6c8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6d0     1C 00 90 AD |  if_e	jmp	#LR__4621
2d6d4     04 4E 05 F1 | 	add	fp, #4
2d6d8     A7 16 02 FB | 	rdlong	arg03, fp
2d6dc     04 4E 85 F1 | 	sub	fp, #4
2d6e0     11 16 06 F1 | 	add	arg03, #17
2d6e4     0B 03 48 FC | 	wrbyte	#1, arg03
2d6e8     01 FA 05 F6 | 	mov	result1, #1
2d6ec     28 00 90 FD | 	jmp	#LR__4623
2d6f0                 | LR__4621
2d6f0     04 4E 05 F1 | 	add	fp, #4
2d6f4     A7 18 02 FB | 	rdlong	arg04, fp
2d6f8     18 4E 05 F1 | 	add	fp, #24
2d6fc     A7 16 02 FB | 	rdlong	arg03, fp
2d700     1C 4E 85 F1 | 	sub	fp, #28
2d704     1C 18 06 F1 | 	add	arg04, #28
2d708     0C 17 62 FC | 	wrlong	arg03, arg04
2d70c                 | LR__4622
2d70c                 | ' 
2d70c                 | ' 			fp->sect = nsect;
2d70c                 | ' 		}
2d70c                 | ' 	}
2d70c                 | ' 
2d70c                 | ' 	return res ;
2d70c     0C 4E 05 F1 | 	add	fp, #12
2d710     A7 FA 01 FB | 	rdlong	result1, fp
2d714     0C 4E 85 F1 | 	sub	fp, #12
2d718                 | LR__4623
2d718     A7 F0 03 F6 | 	mov	ptra, fp
2d71c     B2 00 A0 FD | 	call	#popregs_
2d720                 | _fatfs_cc_f_lseek_ret
2d720     2D 00 64 FD | 	ret
2d724                 | 
2d724                 | _fatfs_cc_f_opendir
2d724     01 4A 05 F6 | 	mov	COUNT_, #1
2d728     A8 00 A0 FD | 	call	#pushregs_
2d72c     14 F0 07 F1 | 	add	ptra, #20
2d730     04 4E 05 F1 | 	add	fp, #4
2d734     A7 12 62 FC | 	wrlong	arg01, fp
2d738     04 4E 05 F1 | 	add	fp, #4
2d73c     A7 14 62 FC | 	wrlong	arg02, fp
2d740     04 4E 85 F1 | 	sub	fp, #4
2d744     A7 16 0A FB | 	rdlong	arg03, fp wz
2d748     04 4E 85 F1 | 	sub	fp, #4
2d74c     09 FA 05 A6 |  if_e	mov	result1, #9
2d750     78 01 90 AD |  if_e	jmp	#LR__4636
2d754     08 4E 05 F1 | 	add	fp, #8
2d758     A7 12 02 F6 | 	mov	arg01, fp
2d75c     08 4E 05 F1 | 	add	fp, #8
2d760     A7 14 02 F6 | 	mov	arg02, fp
2d764     10 4E 85 F1 | 	sub	fp, #16
2d768     00 16 06 F6 | 	mov	arg03, #0
2d76c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d770     0C 4E 05 F1 | 	add	fp, #12
2d774     A7 FA 61 FC | 	wrlong	result1, fp
2d778     0C 4E 85 F1 | 	sub	fp, #12
2d77c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d780     20 01 90 5D |  if_ne	jmp	#LR__4635
2d784     04 4E 05 F1 | 	add	fp, #4
2d788     A7 16 02 FB | 	rdlong	arg03, fp
2d78c     0C 4E 05 F1 | 	add	fp, #12
2d790     A7 FA 01 FB | 	rdlong	result1, fp
2d794     0B FB 61 FC | 	wrlong	result1, arg03
2d798     0C 4E 85 F1 | 	sub	fp, #12
2d79c     A7 12 02 FB | 	rdlong	arg01, fp
2d7a0     04 4E 05 F1 | 	add	fp, #4
2d7a4     A7 14 02 FB | 	rdlong	arg02, fp
2d7a8     08 4E 85 F1 | 	sub	fp, #8
2d7ac     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d7b0     0C 4E 05 F1 | 	add	fp, #12
2d7b4     A7 FA 61 FC | 	wrlong	result1, fp
2d7b8     0C 4E 85 F1 | 	sub	fp, #12
2d7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7c0     C4 00 90 5D |  if_ne	jmp	#LR__4634
2d7c4     04 4E 05 F1 | 	add	fp, #4
2d7c8     A7 16 02 FB | 	rdlong	arg03, fp
2d7cc     04 4E 85 F1 | 	sub	fp, #4
2d7d0     2B 16 06 F1 | 	add	arg03, #43
2d7d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d7d8     80 16 CE F7 | 	test	arg03, #128 wz
2d7dc     58 00 90 5D |  if_ne	jmp	#LR__4632
2d7e0     04 4E 05 F1 | 	add	fp, #4
2d7e4     A7 16 02 FB | 	rdlong	arg03, fp
2d7e8     04 4E 85 F1 | 	sub	fp, #4
2d7ec     06 16 06 F1 | 	add	arg03, #6
2d7f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d7f4     10 16 CE F7 | 	test	arg03, #16 wz
2d7f8     30 00 90 AD |  if_e	jmp	#LR__4630
2d7fc     04 4E 05 F1 | 	add	fp, #4
2d800     A7 16 02 FB | 	rdlong	arg03, fp
2d804     0B 1F 02 F6 | 	mov	local01, arg03
2d808     0C 4E 05 F1 | 	add	fp, #12
2d80c     A7 12 02 FB | 	rdlong	arg01, fp
2d810     10 4E 85 F1 | 	sub	fp, #16
2d814     1C 16 06 F1 | 	add	arg03, #28
2d818     0B 15 02 FB | 	rdlong	arg02, arg03
2d81c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d820     08 1E 06 F1 | 	add	local01, #8
2d824     0F FB 61 FC | 	wrlong	result1, local01
2d828     0C 00 90 FD | 	jmp	#LR__4631
2d82c                 | LR__4630
2d82c     0C 4E 05 F1 | 	add	fp, #12
2d830     A7 0A 68 FC | 	wrlong	#5, fp
2d834     0C 4E 85 F1 | 	sub	fp, #12
2d838                 | LR__4631
2d838                 | LR__4632
2d838     0C 4E 05 F1 | 	add	fp, #12
2d83c     A7 1E 0A FB | 	rdlong	local01, fp wz
2d840     0C 4E 85 F1 | 	sub	fp, #12
2d844     40 00 90 5D |  if_ne	jmp	#LR__4633
2d848     04 4E 05 F1 | 	add	fp, #4
2d84c     A7 1E 02 FB | 	rdlong	local01, fp
2d850     0C 4E 05 F1 | 	add	fp, #12
2d854     A7 16 02 FB | 	rdlong	arg03, fp
2d858     06 16 06 F1 | 	add	arg03, #6
2d85c     0B 17 E2 FA | 	rdword	arg03, arg03
2d860     04 1E 06 F1 | 	add	local01, #4
2d864     0F 17 52 FC | 	wrword	arg03, local01
2d868     0C 4E 85 F1 | 	sub	fp, #12
2d86c     A7 12 02 FB | 	rdlong	arg01, fp
2d870     04 4E 85 F1 | 	sub	fp, #4
2d874     00 14 06 F6 | 	mov	arg02, #0
2d878     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d87c     0C 4E 05 F1 | 	add	fp, #12
2d880     A7 FA 61 FC | 	wrlong	result1, fp
2d884     0C 4E 85 F1 | 	sub	fp, #12
2d888                 | LR__4633
2d888                 | LR__4634
2d888     0C 4E 05 F1 | 	add	fp, #12
2d88c     A7 1E 02 FB | 	rdlong	local01, fp
2d890     0C 4E 85 F1 | 	sub	fp, #12
2d894     04 1E 0E F2 | 	cmp	local01, #4 wz
2d898     0C 4E 05 A1 |  if_e	add	fp, #12
2d89c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d8a0     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8a4                 | LR__4635
2d8a4     0C 4E 05 F1 | 	add	fp, #12
2d8a8     A7 1E 0A FB | 	rdlong	local01, fp wz
2d8ac     0C 4E 85 F1 | 	sub	fp, #12
2d8b0     04 4E 05 51 |  if_ne	add	fp, #4
2d8b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d8b8     04 4E 85 51 |  if_ne	sub	fp, #4
2d8bc     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d8c0                 | ' 
2d8c0                 | ' 	return res ;
2d8c0     0C 4E 05 F1 | 	add	fp, #12
2d8c4     A7 FA 01 FB | 	rdlong	result1, fp
2d8c8     0C 4E 85 F1 | 	sub	fp, #12
2d8cc                 | LR__4636
2d8cc     A7 F0 03 F6 | 	mov	ptra, fp
2d8d0     B2 00 A0 FD | 	call	#popregs_
2d8d4                 | _fatfs_cc_f_opendir_ret
2d8d4     2D 00 64 FD | 	ret
2d8d8                 | 
2d8d8                 | _fatfs_cc_f_closedir
2d8d8     00 4A 05 F6 | 	mov	COUNT_, #0
2d8dc     A8 00 A0 FD | 	call	#pushregs_
2d8e0     10 F0 07 F1 | 	add	ptra, #16
2d8e4     04 4E 05 F1 | 	add	fp, #4
2d8e8     A7 12 62 FC | 	wrlong	arg01, fp
2d8ec     08 4E 05 F1 | 	add	fp, #8
2d8f0     A7 14 02 F6 | 	mov	arg02, fp
2d8f4     0C 4E 85 F1 | 	sub	fp, #12
2d8f8     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d8fc     08 4E 05 F1 | 	add	fp, #8
2d900     A7 FA 61 FC | 	wrlong	result1, fp
2d904     08 4E 85 F1 | 	sub	fp, #8
2d908     00 FA 0D F2 | 	cmp	result1, #0 wz
2d90c     04 4E 05 A1 |  if_e	add	fp, #4
2d910     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d914     04 4E 85 A1 |  if_e	sub	fp, #4
2d918     FD 00 68 AC |  if_e	wrlong	#0, result1
2d91c                 | ' 
2d91c                 | ' 
2d91c                 | ' 
2d91c                 | ' 
2d91c                 | ' 		dp->obj.fs = 0;
2d91c                 | ' #line 4633 "ff.c"
2d91c                 | ' 	}
2d91c                 | ' 	return res;
2d91c     08 4E 05 F1 | 	add	fp, #8
2d920     A7 FA 01 FB | 	rdlong	result1, fp
2d924     08 4E 85 F1 | 	sub	fp, #8
2d928     A7 F0 03 F6 | 	mov	ptra, fp
2d92c     B2 00 A0 FD | 	call	#popregs_
2d930                 | _fatfs_cc_f_closedir_ret
2d930     2D 00 64 FD | 	ret
2d934                 | 
2d934                 | _fatfs_cc_f_readdir
2d934     00 4A 05 F6 | 	mov	COUNT_, #0
2d938     A8 00 A0 FD | 	call	#pushregs_
2d93c     14 F0 07 F1 | 	add	ptra, #20
2d940     04 4E 05 F1 | 	add	fp, #4
2d944     A7 12 62 FC | 	wrlong	arg01, fp
2d948     04 4E 05 F1 | 	add	fp, #4
2d94c     A7 14 62 FC | 	wrlong	arg02, fp
2d950     04 4E 85 F1 | 	sub	fp, #4
2d954     A7 12 02 FB | 	rdlong	arg01, fp
2d958     0C 4E 05 F1 | 	add	fp, #12
2d95c     A7 14 02 F6 | 	mov	arg02, fp
2d960     10 4E 85 F1 | 	sub	fp, #16
2d964     54 DD BF FD | 	call	#_fatfs_cc_validate
2d968     0C 4E 05 F1 | 	add	fp, #12
2d96c     A7 FA 61 FC | 	wrlong	result1, fp
2d970     0C 4E 85 F1 | 	sub	fp, #12
2d974     00 FA 0D F2 | 	cmp	result1, #0 wz
2d978     BC 00 90 5D |  if_ne	jmp	#LR__4643
2d97c     08 4E 05 F1 | 	add	fp, #8
2d980     A7 FA 09 FB | 	rdlong	result1, fp wz
2d984     08 4E 85 F1 | 	sub	fp, #8
2d988     24 00 90 5D |  if_ne	jmp	#LR__4640
2d98c     04 4E 05 F1 | 	add	fp, #4
2d990     A7 12 02 FB | 	rdlong	arg01, fp
2d994     04 4E 85 F1 | 	sub	fp, #4
2d998     00 14 06 F6 | 	mov	arg02, #0
2d99c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d9a0     0C 4E 05 F1 | 	add	fp, #12
2d9a4     A7 FA 61 FC | 	wrlong	result1, fp
2d9a8     0C 4E 85 F1 | 	sub	fp, #12
2d9ac     88 00 90 FD | 	jmp	#LR__4642
2d9b0                 | LR__4640
2d9b0     04 4E 05 F1 | 	add	fp, #4
2d9b4     A7 12 02 FB | 	rdlong	arg01, fp
2d9b8     04 4E 85 F1 | 	sub	fp, #4
2d9bc     00 14 06 F6 | 	mov	arg02, #0
2d9c0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d9c4     0C 4E 05 F1 | 	add	fp, #12
2d9c8     A7 FA 61 FC | 	wrlong	result1, fp
2d9cc     0C 4E 85 F1 | 	sub	fp, #12
2d9d0     04 FA 0D F2 | 	cmp	result1, #4 wz
2d9d4     0C 4E 05 A1 |  if_e	add	fp, #12
2d9d8     A7 00 68 AC |  if_e	wrlong	#0, fp
2d9dc     0C 4E 85 A1 |  if_e	sub	fp, #12
2d9e0     0C 4E 05 F1 | 	add	fp, #12
2d9e4     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9e8     0C 4E 85 F1 | 	sub	fp, #12
2d9ec     48 00 90 5D |  if_ne	jmp	#LR__4641
2d9f0     04 4E 05 F1 | 	add	fp, #4
2d9f4     A7 12 02 FB | 	rdlong	arg01, fp
2d9f8     04 4E 05 F1 | 	add	fp, #4
2d9fc     A7 14 02 FB | 	rdlong	arg02, fp
2da00     08 4E 85 F1 | 	sub	fp, #8
2da04     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2da08     04 4E 05 F1 | 	add	fp, #4
2da0c     A7 12 02 FB | 	rdlong	arg01, fp
2da10     04 4E 85 F1 | 	sub	fp, #4
2da14     00 14 06 F6 | 	mov	arg02, #0
2da18     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2da1c     0C 4E 05 F1 | 	add	fp, #12
2da20     A7 FA 61 FC | 	wrlong	result1, fp
2da24     0C 4E 85 F1 | 	sub	fp, #12
2da28     04 FA 0D F2 | 	cmp	result1, #4 wz
2da2c     0C 4E 05 A1 |  if_e	add	fp, #12
2da30     A7 00 68 AC |  if_e	wrlong	#0, fp
2da34     0C 4E 85 A1 |  if_e	sub	fp, #12
2da38                 | LR__4641
2da38                 | LR__4642
2da38                 | LR__4643
2da38                 | ' 			}
2da38                 | ' 			;
2da38                 | ' 		}
2da38                 | ' 	}
2da38                 | ' 	return res ;
2da38     0C 4E 05 F1 | 	add	fp, #12
2da3c     A7 FA 01 FB | 	rdlong	result1, fp
2da40     0C 4E 85 F1 | 	sub	fp, #12
2da44     A7 F0 03 F6 | 	mov	ptra, fp
2da48     B2 00 A0 FD | 	call	#popregs_
2da4c                 | _fatfs_cc_f_readdir_ret
2da4c     2D 00 64 FD | 	ret
2da50                 | 
2da50                 | _fatfs_cc_f_stat
2da50     00 4A 05 F6 | 	mov	COUNT_, #0
2da54     A8 00 A0 FD | 	call	#pushregs_
2da58     40 F0 07 F1 | 	add	ptra, #64
2da5c     04 4E 05 F1 | 	add	fp, #4
2da60     A7 12 62 FC | 	wrlong	arg01, fp
2da64     04 4E 05 F1 | 	add	fp, #4
2da68     A7 14 62 FC | 	wrlong	arg02, fp
2da6c     04 4E 85 F1 | 	sub	fp, #4
2da70     A7 12 02 F6 | 	mov	arg01, fp
2da74     0C 4E 05 F1 | 	add	fp, #12
2da78     A7 14 02 F6 | 	mov	arg02, fp
2da7c     10 4E 85 F1 | 	sub	fp, #16
2da80     00 16 06 F6 | 	mov	arg03, #0
2da84     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2da88     0C 4E 05 F1 | 	add	fp, #12
2da8c     A7 FA 61 FC | 	wrlong	result1, fp
2da90     0C 4E 85 F1 | 	sub	fp, #12
2da94     00 FA 0D F2 | 	cmp	result1, #0 wz
2da98     74 00 90 5D |  if_ne	jmp	#LR__4653
2da9c     10 4E 05 F1 | 	add	fp, #16
2daa0     A7 12 02 F6 | 	mov	arg01, fp
2daa4     0C 4E 85 F1 | 	sub	fp, #12
2daa8     A7 14 02 FB | 	rdlong	arg02, fp
2daac     04 4E 85 F1 | 	sub	fp, #4
2dab0     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2dab4     0C 4E 05 F1 | 	add	fp, #12
2dab8     A7 FA 61 FC | 	wrlong	result1, fp
2dabc     0C 4E 85 F1 | 	sub	fp, #12
2dac0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dac4     48 00 90 5D |  if_ne	jmp	#LR__4652
2dac8     3B 4E 05 F1 | 	add	fp, #59
2dacc     A7 FA C1 FA | 	rdbyte	result1, fp
2dad0     3B 4E 85 F1 | 	sub	fp, #59
2dad4     80 FA CD F7 | 	test	result1, #128 wz
2dad8     0C 4E 05 51 |  if_ne	add	fp, #12
2dadc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dae0     0C 4E 85 51 |  if_ne	sub	fp, #12
2dae4     28 00 90 5D |  if_ne	jmp	#LR__4651
2dae8     08 4E 05 F1 | 	add	fp, #8
2daec     A7 FA 09 FB | 	rdlong	result1, fp wz
2daf0     08 4E 85 F1 | 	sub	fp, #8
2daf4     18 00 90 AD |  if_e	jmp	#LR__4650
2daf8     10 4E 05 F1 | 	add	fp, #16
2dafc     A7 12 02 F6 | 	mov	arg01, fp
2db00     08 4E 85 F1 | 	sub	fp, #8
2db04     A7 14 02 FB | 	rdlong	arg02, fp
2db08     08 4E 85 F1 | 	sub	fp, #8
2db0c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2db10                 | LR__4650
2db10                 | LR__4651
2db10                 | LR__4652
2db10                 | LR__4653
2db10                 | ' 			}
2db10                 | ' 		}
2db10                 | ' 		;
2db10                 | ' 	}
2db10                 | ' 
2db10                 | ' 	return res ;
2db10     0C 4E 05 F1 | 	add	fp, #12
2db14     A7 FA 01 FB | 	rdlong	result1, fp
2db18     0C 4E 85 F1 | 	sub	fp, #12
2db1c     A7 F0 03 F6 | 	mov	ptra, fp
2db20     B2 00 A0 FD | 	call	#popregs_
2db24                 | _fatfs_cc_f_stat_ret
2db24     2D 00 64 FD | 	ret
2db28                 | 
2db28                 | _fatfs_cc_f_unlink
2db28     00 4A 05 F6 | 	mov	COUNT_, #0
2db2c     A8 00 A0 FD | 	call	#pushregs_
2db30     74 F0 07 F1 | 	add	ptra, #116
2db34     04 4E 05 F1 | 	add	fp, #4
2db38     A7 12 62 FC | 	wrlong	arg01, fp
2db3c     68 4E 05 F1 | 	add	fp, #104
2db40     A7 00 68 FC | 	wrlong	#0, fp
2db44     68 4E 85 F1 | 	sub	fp, #104
2db48     A7 12 02 F6 | 	mov	arg01, fp
2db4c     6C 4E 05 F1 | 	add	fp, #108
2db50     A7 14 02 F6 | 	mov	arg02, fp
2db54     70 4E 85 F1 | 	sub	fp, #112
2db58     02 16 06 F6 | 	mov	arg03, #2
2db5c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2db60     08 4E 05 F1 | 	add	fp, #8
2db64     A7 FA 61 FC | 	wrlong	result1, fp
2db68     08 4E 85 F1 | 	sub	fp, #8
2db6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db70     E4 01 90 5D |  if_ne	jmp	#LR__4668
2db74     70 4E 05 F1 | 	add	fp, #112
2db78     A7 16 02 FB | 	rdlong	arg03, fp
2db7c     64 4E 85 F1 | 	sub	fp, #100
2db80     A7 16 62 FC | 	wrlong	arg03, fp
2db84     A7 12 02 F6 | 	mov	arg01, fp
2db88     08 4E 85 F1 | 	sub	fp, #8
2db8c     A7 14 02 FB | 	rdlong	arg02, fp
2db90     04 4E 85 F1 | 	sub	fp, #4
2db94     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2db98     08 4E 05 F1 | 	add	fp, #8
2db9c     A7 FA 61 FC | 	wrlong	result1, fp
2dba0     00 FA 4D F2 | 	cmps	result1, #0 wz
2dba4     08 4E 85 F1 | 	sub	fp, #8
2dba8     AC 01 90 5D |  if_ne	jmp	#LR__4667
2dbac     37 4E 05 F1 | 	add	fp, #55
2dbb0     A7 FA C1 FA | 	rdbyte	result1, fp
2dbb4     37 4E 85 F1 | 	sub	fp, #55
2dbb8     80 FA CD F7 | 	test	result1, #128 wz
2dbbc     08 4E 05 51 |  if_ne	add	fp, #8
2dbc0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dbc4     08 4E 85 51 |  if_ne	sub	fp, #8
2dbc8     1C 00 90 5D |  if_ne	jmp	#LR__4660
2dbcc     12 4E 05 F1 | 	add	fp, #18
2dbd0     A7 FA C1 FA | 	rdbyte	result1, fp
2dbd4     12 4E 85 F1 | 	sub	fp, #18
2dbd8     01 FA CD F7 | 	test	result1, #1 wz
2dbdc     08 4E 05 51 |  if_ne	add	fp, #8
2dbe0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2dbe4     08 4E 85 51 |  if_ne	sub	fp, #8
2dbe8                 | LR__4660
2dbe8     08 4E 05 F1 | 	add	fp, #8
2dbec     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbf0     08 4E 85 F1 | 	sub	fp, #8
2dbf4     C8 00 90 5D |  if_ne	jmp	#LR__4663
2dbf8     70 4E 05 F1 | 	add	fp, #112
2dbfc     A7 12 02 FB | 	rdlong	arg01, fp
2dc00     48 4E 85 F1 | 	sub	fp, #72
2dc04     A7 14 02 FB | 	rdlong	arg02, fp
2dc08     28 4E 85 F1 | 	sub	fp, #40
2dc0c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2dc10     6C 4E 05 F1 | 	add	fp, #108
2dc14     A7 FA 61 FC | 	wrlong	result1, fp
2dc18     5A 4E 85 F1 | 	sub	fp, #90
2dc1c     A7 FA C1 FA | 	rdbyte	result1, fp
2dc20     12 4E 85 F1 | 	sub	fp, #18
2dc24     10 FA CD F7 | 	test	result1, #16 wz
2dc28     94 00 90 AD |  if_e	jmp	#LR__4662
2dc2c     70 4E 05 F1 | 	add	fp, #112
2dc30     A7 FA 01 FB | 	rdlong	result1, fp
2dc34     34 4E 85 F1 | 	sub	fp, #52
2dc38     A7 FA 61 FC | 	wrlong	result1, fp
2dc3c     30 4E 05 F1 | 	add	fp, #48
2dc40     A7 16 02 FB | 	rdlong	arg03, fp
2dc44     28 4E 85 F1 | 	sub	fp, #40
2dc48     A7 16 62 FC | 	wrlong	arg03, fp
2dc4c     08 4E 85 F1 | 	sub	fp, #8
2dc50     A7 12 02 F6 | 	mov	arg01, fp
2dc54     3C 4E 85 F1 | 	sub	fp, #60
2dc58     00 14 06 F6 | 	mov	arg02, #0
2dc5c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2dc60     08 4E 05 F1 | 	add	fp, #8
2dc64     A7 FA 61 FC | 	wrlong	result1, fp
2dc68     08 4E 85 F1 | 	sub	fp, #8
2dc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc70     4C 00 90 5D |  if_ne	jmp	#LR__4661
2dc74     3C 4E 05 F1 | 	add	fp, #60
2dc78     A7 12 02 F6 | 	mov	arg01, fp
2dc7c     3C 4E 85 F1 | 	sub	fp, #60
2dc80     00 14 06 F6 | 	mov	arg02, #0
2dc84     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2dc88     08 4E 05 F1 | 	add	fp, #8
2dc8c     A7 FA 61 FC | 	wrlong	result1, fp
2dc90     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc94     08 4E 85 F1 | 	sub	fp, #8
2dc98     08 4E 05 A1 |  if_e	add	fp, #8
2dc9c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dca0     08 4E 85 A1 |  if_e	sub	fp, #8
2dca4     08 4E 05 F1 | 	add	fp, #8
2dca8     A7 FA 01 FB | 	rdlong	result1, fp
2dcac     08 4E 85 F1 | 	sub	fp, #8
2dcb0     04 FA 0D F2 | 	cmp	result1, #4 wz
2dcb4     08 4E 05 A1 |  if_e	add	fp, #8
2dcb8     A7 00 68 AC |  if_e	wrlong	#0, fp
2dcbc     08 4E 85 A1 |  if_e	sub	fp, #8
2dcc0                 | LR__4661
2dcc0                 | LR__4662
2dcc0                 | LR__4663
2dcc0     08 4E 05 F1 | 	add	fp, #8
2dcc4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dcc8     08 4E 85 F1 | 	sub	fp, #8
2dccc     88 00 90 5D |  if_ne	jmp	#LR__4666
2dcd0     0C 4E 05 F1 | 	add	fp, #12
2dcd4     A7 12 02 F6 | 	mov	arg01, fp
2dcd8     0C 4E 85 F1 | 	sub	fp, #12
2dcdc     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dce0     08 4E 05 F1 | 	add	fp, #8
2dce4     A7 FA 61 FC | 	wrlong	result1, fp
2dce8     08 4E 85 F1 | 	sub	fp, #8
2dcec     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcf0     38 00 90 5D |  if_ne	jmp	#LR__4664
2dcf4     6C 4E 05 F1 | 	add	fp, #108
2dcf8     A7 FA 09 FB | 	rdlong	result1, fp wz
2dcfc     6C 4E 85 F1 | 	sub	fp, #108
2dd00     28 00 90 AD |  if_e	jmp	#LR__4664
2dd04     0C 4E 05 F1 | 	add	fp, #12
2dd08     A7 12 02 F6 | 	mov	arg01, fp
2dd0c     60 4E 05 F1 | 	add	fp, #96
2dd10     A7 14 02 FB | 	rdlong	arg02, fp
2dd14     6C 4E 85 F1 | 	sub	fp, #108
2dd18     00 16 06 F6 | 	mov	arg03, #0
2dd1c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dd20     08 4E 05 F1 | 	add	fp, #8
2dd24     A7 FA 61 FC | 	wrlong	result1, fp
2dd28     08 4E 85 F1 | 	sub	fp, #8
2dd2c                 | LR__4664
2dd2c     08 4E 05 F1 | 	add	fp, #8
2dd30     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd34     08 4E 85 F1 | 	sub	fp, #8
2dd38     1C 00 90 5D |  if_ne	jmp	#LR__4665
2dd3c     70 4E 05 F1 | 	add	fp, #112
2dd40     A7 12 02 FB | 	rdlong	arg01, fp
2dd44     70 4E 85 F1 | 	sub	fp, #112
2dd48     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dd4c     08 4E 05 F1 | 	add	fp, #8
2dd50     A7 FA 61 FC | 	wrlong	result1, fp
2dd54     08 4E 85 F1 | 	sub	fp, #8
2dd58                 | LR__4665
2dd58                 | LR__4666
2dd58                 | LR__4667
2dd58                 | LR__4668
2dd58                 | ' 			}
2dd58                 | ' 		}
2dd58                 | ' 		;
2dd58                 | ' 	}
2dd58                 | ' 
2dd58                 | ' 	return res ;
2dd58     08 4E 05 F1 | 	add	fp, #8
2dd5c     A7 FA 01 FB | 	rdlong	result1, fp
2dd60     08 4E 85 F1 | 	sub	fp, #8
2dd64     A7 F0 03 F6 | 	mov	ptra, fp
2dd68     B2 00 A0 FD | 	call	#popregs_
2dd6c                 | _fatfs_cc_f_unlink_ret
2dd6c     2D 00 64 FD | 	ret
2dd70                 | 
2dd70                 | _fatfs_cc_f_mkdir
2dd70     00 4A 05 F6 | 	mov	COUNT_, #0
2dd74     A8 00 A0 FD | 	call	#pushregs_
2dd78     5C F0 07 F1 | 	add	ptra, #92
2dd7c     04 4E 05 F1 | 	add	fp, #4
2dd80     A7 12 62 FC | 	wrlong	arg01, fp
2dd84     A7 12 02 F6 | 	mov	arg01, fp
2dd88     48 4E 05 F1 | 	add	fp, #72
2dd8c     A7 14 02 F6 | 	mov	arg02, fp
2dd90     4C 4E 85 F1 | 	sub	fp, #76
2dd94     02 16 06 F6 | 	mov	arg03, #2
2dd98     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dd9c     08 4E 05 F1 | 	add	fp, #8
2dda0     A7 FA 61 FC | 	wrlong	result1, fp
2dda4     08 4E 85 F1 | 	sub	fp, #8
2dda8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddac     C4 02 90 5D |  if_ne	jmp	#LR__4675
2ddb0     4C 4E 05 F1 | 	add	fp, #76
2ddb4     A7 16 02 FB | 	rdlong	arg03, fp
2ddb8     40 4E 85 F1 | 	sub	fp, #64
2ddbc     A7 16 62 FC | 	wrlong	arg03, fp
2ddc0     A7 12 02 F6 | 	mov	arg01, fp
2ddc4     08 4E 85 F1 | 	sub	fp, #8
2ddc8     A7 14 02 FB | 	rdlong	arg02, fp
2ddcc     04 4E 85 F1 | 	sub	fp, #4
2ddd0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2ddd4     08 4E 05 F1 | 	add	fp, #8
2ddd8     A7 FA 61 FC | 	wrlong	result1, fp
2dddc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dde0     08 4E 85 F1 | 	sub	fp, #8
2dde4     08 4E 05 A1 |  if_e	add	fp, #8
2dde8     A7 10 68 AC |  if_e	wrlong	#8, fp
2ddec     08 4E 85 A1 |  if_e	sub	fp, #8
2ddf0     08 4E 05 F1 | 	add	fp, #8
2ddf4     A7 FA 01 FB | 	rdlong	result1, fp
2ddf8     08 4E 85 F1 | 	sub	fp, #8
2ddfc     04 FA 0D F2 | 	cmp	result1, #4 wz
2de00     70 02 90 5D |  if_ne	jmp	#LR__4674
2de04     4C 4E 05 F1 | 	add	fp, #76
2de08     A7 16 02 FB | 	rdlong	arg03, fp
2de0c     10 4E 85 F1 | 	sub	fp, #16
2de10     A7 16 62 FC | 	wrlong	arg03, fp
2de14     A7 12 02 F6 | 	mov	arg01, fp
2de18     3C 4E 85 F1 | 	sub	fp, #60
2de1c     00 14 06 F6 | 	mov	arg02, #0
2de20     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2de24     50 4E 05 F1 | 	add	fp, #80
2de28     A7 FA 61 FC | 	wrlong	result1, fp
2de2c     48 4E 85 F1 | 	sub	fp, #72
2de30     A7 00 68 FC | 	wrlong	#0, fp
2de34     48 4E 05 F1 | 	add	fp, #72
2de38     A7 FA 09 FB | 	rdlong	result1, fp wz
2de3c     50 4E 85 F1 | 	sub	fp, #80
2de40     08 4E 05 A1 |  if_e	add	fp, #8
2de44     A7 0E 68 AC |  if_e	wrlong	#7, fp
2de48     08 4E 85 A1 |  if_e	sub	fp, #8
2de4c     50 4E 05 F1 | 	add	fp, #80
2de50     A7 FA 01 FB | 	rdlong	result1, fp
2de54     50 4E 85 F1 | 	sub	fp, #80
2de58     01 FA 0D F2 | 	cmp	result1, #1 wz
2de5c     08 4E 05 A1 |  if_e	add	fp, #8
2de60     A7 04 68 AC |  if_e	wrlong	#2, fp
2de64     08 4E 85 A1 |  if_e	sub	fp, #8
2de68     50 4E 05 F1 | 	add	fp, #80
2de6c     A7 16 02 FB | 	rdlong	arg03, fp
2de70     50 4E 85 F1 | 	sub	fp, #80
2de74     FF FF 7F FF 
2de78     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2de7c     08 4E 05 A1 |  if_e	add	fp, #8
2de80     A7 02 68 AC |  if_e	wrlong	#1, fp
2de84     08 4E 85 A1 |  if_e	sub	fp, #8
2de88     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2de8c     58 4E 05 F1 | 	add	fp, #88
2de90     A7 FA 61 FC | 	wrlong	result1, fp
2de94     50 4E 85 F1 | 	sub	fp, #80
2de98     A7 FA 09 FB | 	rdlong	result1, fp wz
2de9c     08 4E 85 F1 | 	sub	fp, #8
2dea0     1C 01 90 5D |  if_ne	jmp	#LR__4671
2dea4     4C 4E 05 F1 | 	add	fp, #76
2dea8     A7 12 02 FB | 	rdlong	arg01, fp
2deac     04 4E 05 F1 | 	add	fp, #4
2deb0     A7 14 02 FB | 	rdlong	arg02, fp
2deb4     50 4E 85 F1 | 	sub	fp, #80
2deb8     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2debc     08 4E 05 F1 | 	add	fp, #8
2dec0     A7 FA 61 FC | 	wrlong	result1, fp
2dec4     00 FA 4D F2 | 	cmps	result1, #0 wz
2dec8     08 4E 85 F1 | 	sub	fp, #8
2decc     F0 00 90 5D |  if_ne	jmp	#LR__4670
2ded0     4C 4E 05 F1 | 	add	fp, #76
2ded4     A7 12 02 FB | 	rdlong	arg01, fp
2ded8     4C 4E 85 F1 | 	sub	fp, #76
2dedc     34 12 06 F1 | 	add	arg01, #52
2dee0     20 14 06 F6 | 	mov	arg02, #32
2dee4     0B 16 06 F6 | 	mov	arg03, #11
2dee8     98 00 A0 FD | 	call	#\builtin_bytefill_
2deec     4C 4E 05 F1 | 	add	fp, #76
2def0     A7 FA 01 FB | 	rdlong	result1, fp
2def4     34 FA 05 F1 | 	add	result1, #52
2def8     FD 5C 48 FC | 	wrbyte	#46, result1
2defc     A7 16 02 FB | 	rdlong	arg03, fp
2df00     3F 16 06 F1 | 	add	arg03, #63
2df04     0B 21 48 FC | 	wrbyte	#16, arg03
2df08     A7 12 02 FB | 	rdlong	arg01, fp
2df0c     4A 12 06 F1 | 	add	arg01, #74
2df10     0C 4E 05 F1 | 	add	fp, #12
2df14     A7 14 02 FB | 	rdlong	arg02, fp
2df18     09 15 62 FC | 	wrlong	arg02, arg01
2df1c     0C 4E 85 F1 | 	sub	fp, #12
2df20     A7 14 02 FB | 	rdlong	arg02, fp
2df24     0A 13 02 F6 | 	mov	arg01, arg02
2df28     34 14 06 F1 | 	add	arg02, #52
2df2c     04 4E 05 F1 | 	add	fp, #4
2df30     A7 16 02 FB | 	rdlong	arg03, fp
2df34     50 4E 85 F1 | 	sub	fp, #80
2df38     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2df3c     4C 4E 05 F1 | 	add	fp, #76
2df40     A7 14 02 FB | 	rdlong	arg02, fp
2df44     0A 13 02 F6 | 	mov	arg01, arg02
2df48     54 12 06 F1 | 	add	arg01, #84
2df4c     4C 4E 85 F1 | 	sub	fp, #76
2df50     34 14 06 F1 | 	add	arg02, #52
2df54     20 16 06 F6 | 	mov	arg03, #32
2df58     60 2A BF FD | 	call	#__system____builtin_memmove
2df5c     4C 4E 05 F1 | 	add	fp, #76
2df60     A7 16 02 FB | 	rdlong	arg03, fp
2df64     55 16 06 F1 | 	add	arg03, #85
2df68     0B 5D 48 FC | 	wrbyte	#46, arg03
2df6c     38 4E 85 F1 | 	sub	fp, #56
2df70     A7 16 02 FB | 	rdlong	arg03, fp
2df74     40 4E 05 F1 | 	add	fp, #64
2df78     A7 16 62 FC | 	wrlong	arg03, fp
2df7c     08 4E 85 F1 | 	sub	fp, #8
2df80     A7 14 02 FB | 	rdlong	arg02, fp
2df84     0A 13 02 F6 | 	mov	arg01, arg02
2df88     54 14 06 F1 | 	add	arg02, #84
2df8c     4C 4E 85 F1 | 	sub	fp, #76
2df90     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2df94     4C 4E 05 F1 | 	add	fp, #76
2df98     A7 16 02 FB | 	rdlong	arg03, fp
2df9c     03 16 06 F1 | 	add	arg03, #3
2dfa0     0B 03 48 FC | 	wrbyte	#1, arg03
2dfa4     40 4E 85 F1 | 	sub	fp, #64
2dfa8     A7 12 02 F6 | 	mov	arg01, fp
2dfac     0C 4E 85 F1 | 	sub	fp, #12
2dfb0     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dfb4     08 4E 05 F1 | 	add	fp, #8
2dfb8     A7 FA 61 FC | 	wrlong	result1, fp
2dfbc     08 4E 85 F1 | 	sub	fp, #8
2dfc0                 | LR__4670
2dfc0                 | LR__4671
2dfc0     08 4E 05 F1 | 	add	fp, #8
2dfc4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dfc8     08 4E 85 F1 | 	sub	fp, #8
2dfcc     88 00 90 5D |  if_ne	jmp	#LR__4672
2dfd0     28 4E 05 F1 | 	add	fp, #40
2dfd4     A7 12 02 FB | 	rdlong	arg01, fp
2dfd8     16 12 06 F1 | 	add	arg01, #22
2dfdc     30 4E 05 F1 | 	add	fp, #48
2dfe0     A7 14 02 FB | 	rdlong	arg02, fp
2dfe4     09 15 62 FC | 	wrlong	arg02, arg01
2dfe8     0C 4E 85 F1 | 	sub	fp, #12
2dfec     A7 12 02 FB | 	rdlong	arg01, fp
2dff0     24 4E 85 F1 | 	sub	fp, #36
2dff4     A7 14 02 FB | 	rdlong	arg02, fp
2dff8     28 4E 05 F1 | 	add	fp, #40
2dffc     A7 16 02 FB | 	rdlong	arg03, fp
2e000     50 4E 85 F1 | 	sub	fp, #80
2e004     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2e008     28 4E 05 F1 | 	add	fp, #40
2e00c     A7 FA 01 FB | 	rdlong	result1, fp
2e010     0B FA 05 F1 | 	add	result1, #11
2e014     FD 20 48 FC | 	wrbyte	#16, result1
2e018     24 4E 05 F1 | 	add	fp, #36
2e01c     A7 FA 01 FB | 	rdlong	result1, fp
2e020     03 FA 05 F1 | 	add	result1, #3
2e024     FD 02 48 FC | 	wrbyte	#1, result1
2e028     44 4E 85 F1 | 	sub	fp, #68
2e02c     A7 FA 09 FB | 	rdlong	result1, fp wz
2e030     08 4E 85 F1 | 	sub	fp, #8
2e034     3C 00 90 5D |  if_ne	jmp	#LR__4673
2e038     4C 4E 05 F1 | 	add	fp, #76
2e03c     A7 12 02 FB | 	rdlong	arg01, fp
2e040     4C 4E 85 F1 | 	sub	fp, #76
2e044     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2e048     08 4E 05 F1 | 	add	fp, #8
2e04c     A7 FA 61 FC | 	wrlong	result1, fp
2e050     08 4E 85 F1 | 	sub	fp, #8
2e054     1C 00 90 FD | 	jmp	#LR__4673
2e058                 | LR__4672
2e058     3C 4E 05 F1 | 	add	fp, #60
2e05c     A7 12 02 F6 | 	mov	arg01, fp
2e060     14 4E 05 F1 | 	add	fp, #20
2e064     A7 14 02 FB | 	rdlong	arg02, fp
2e068     50 4E 85 F1 | 	sub	fp, #80
2e06c     00 16 06 F6 | 	mov	arg03, #0
2e070     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2e074                 | LR__4673
2e074                 | LR__4674
2e074                 | LR__4675
2e074                 | ' 				remove_chain(&sobj, dcl, 0);
2e074                 | ' 			}
2e074                 | ' 		}
2e074                 | ' 		;
2e074                 | ' 	}
2e074                 | ' 
2e074                 | ' 	return res ;
2e074     08 4E 05 F1 | 	add	fp, #8
2e078     A7 FA 01 FB | 	rdlong	result1, fp
2e07c     08 4E 85 F1 | 	sub	fp, #8
2e080     A7 F0 03 F6 | 	mov	ptra, fp
2e084     B2 00 A0 FD | 	call	#popregs_
2e088                 | _fatfs_cc_f_mkdir_ret
2e088     2D 00 64 FD | 	ret
2e08c                 | 
2e08c                 | _fatfs_cc_f_rename
2e08c     01 4A 05 F6 | 	mov	COUNT_, #1
2e090     A8 00 A0 FD | 	call	#pushregs_
2e094     9C F0 07 F1 | 	add	ptra, #156
2e098     04 4E 05 F1 | 	add	fp, #4
2e09c     A7 12 62 FC | 	wrlong	arg01, fp
2e0a0     04 4E 05 F1 | 	add	fp, #4
2e0a4     A7 14 62 FC | 	wrlong	arg02, fp
2e0a8     A7 12 02 F6 | 	mov	arg01, fp
2e0ac     08 4E 85 F1 | 	sub	fp, #8
2e0b0     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2e0b4     04 4E 05 F1 | 	add	fp, #4
2e0b8     A7 12 02 F6 | 	mov	arg01, fp
2e0bc     6C 4E 05 F1 | 	add	fp, #108
2e0c0     A7 14 02 F6 | 	mov	arg02, fp
2e0c4     70 4E 85 F1 | 	sub	fp, #112
2e0c8     02 16 06 F6 | 	mov	arg03, #2
2e0cc     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2e0d0     0C 4E 05 F1 | 	add	fp, #12
2e0d4     A7 FA 61 FC | 	wrlong	result1, fp
2e0d8     0C 4E 85 F1 | 	sub	fp, #12
2e0dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0e0     44 03 90 5D |  if_ne	jmp	#LR__4693
2e0e4     70 4E 05 F1 | 	add	fp, #112
2e0e8     A7 16 02 FB | 	rdlong	arg03, fp
2e0ec     60 4E 85 F1 | 	sub	fp, #96
2e0f0     A7 16 62 FC | 	wrlong	arg03, fp
2e0f4     A7 12 02 F6 | 	mov	arg01, fp
2e0f8     0C 4E 85 F1 | 	sub	fp, #12
2e0fc     A7 14 02 FB | 	rdlong	arg02, fp
2e100     04 4E 85 F1 | 	sub	fp, #4
2e104     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2e108     0C 4E 05 F1 | 	add	fp, #12
2e10c     A7 FA 61 FC | 	wrlong	result1, fp
2e110     00 FA 4D F2 | 	cmps	result1, #0 wz
2e114     0C 4E 85 F1 | 	sub	fp, #12
2e118     1C 00 90 5D |  if_ne	jmp	#LR__4680
2e11c     3B 4E 05 F1 | 	add	fp, #59
2e120     A7 FA C1 FA | 	rdbyte	result1, fp
2e124     3B 4E 85 F1 | 	sub	fp, #59
2e128     A0 FA CD F7 | 	test	result1, #160 wz
2e12c     0C 4E 05 51 |  if_ne	add	fp, #12
2e130     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e134     0C 4E 85 51 |  if_ne	sub	fp, #12
2e138                 | LR__4680
2e138     0C 4E 05 F1 | 	add	fp, #12
2e13c     A7 1E 0A FB | 	rdlong	local01, fp wz
2e140     0C 4E 85 F1 | 	sub	fp, #12
2e144     E0 02 90 5D |  if_ne	jmp	#LR__4692
2e148     74 4E 05 F1 | 	add	fp, #116
2e14c     A7 12 02 F6 | 	mov	arg01, fp
2e150     48 4E 85 F1 | 	sub	fp, #72
2e154     A7 14 02 FB | 	rdlong	arg02, fp
2e158     2C 4E 85 F1 | 	sub	fp, #44
2e15c     20 16 06 F6 | 	mov	arg03, #32
2e160     58 28 BF FD | 	call	#__system____builtin_memmove
2e164     40 4E 05 F1 | 	add	fp, #64
2e168     A7 12 02 F6 | 	mov	arg01, fp
2e16c     30 4E 85 F1 | 	sub	fp, #48
2e170     A7 14 02 F6 | 	mov	arg02, fp
2e174     10 4E 85 F1 | 	sub	fp, #16
2e178     30 16 06 F6 | 	mov	arg03, #48
2e17c     3C 28 BF FD | 	call	#__system____builtin_memmove
2e180     40 4E 05 F1 | 	add	fp, #64
2e184     A7 12 02 F6 | 	mov	arg01, fp
2e188     38 4E 85 F1 | 	sub	fp, #56
2e18c     A7 14 02 FB | 	rdlong	arg02, fp
2e190     08 4E 85 F1 | 	sub	fp, #8
2e194     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e198     0C 4E 05 F1 | 	add	fp, #12
2e19c     A7 FA 61 FC | 	wrlong	result1, fp
2e1a0     0C 4E 85 F1 | 	sub	fp, #12
2e1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1a8     4C 00 90 5D |  if_ne	jmp	#LR__4683
2e1ac     48 4E 05 F1 | 	add	fp, #72
2e1b0     A7 FA 01 FB | 	rdlong	result1, fp
2e1b4     30 4E 85 F1 | 	sub	fp, #48
2e1b8     A7 16 02 FB | 	rdlong	arg03, fp
2e1bc     18 4E 85 F1 | 	sub	fp, #24
2e1c0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e1c4     20 00 90 5D |  if_ne	jmp	#LR__4681
2e1c8     50 4E 05 F1 | 	add	fp, #80
2e1cc     A7 FA 01 FB | 	rdlong	result1, fp
2e1d0     30 4E 85 F1 | 	sub	fp, #48
2e1d4     A7 16 02 FB | 	rdlong	arg03, fp
2e1d8     20 4E 85 F1 | 	sub	fp, #32
2e1dc     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e1e0     04 1E 06 A6 |  if_e	mov	local01, #4
2e1e4     04 00 90 AD |  if_e	jmp	#LR__4682
2e1e8                 | LR__4681
2e1e8     08 1E 06 F6 | 	mov	local01, #8
2e1ec                 | LR__4682
2e1ec     0C 4E 05 F1 | 	add	fp, #12
2e1f0     A7 1E 62 FC | 	wrlong	local01, fp
2e1f4     0C 4E 85 F1 | 	sub	fp, #12
2e1f8                 | LR__4683
2e1f8     0C 4E 05 F1 | 	add	fp, #12
2e1fc     A7 1E 02 FB | 	rdlong	local01, fp
2e200     0C 4E 85 F1 | 	sub	fp, #12
2e204     04 1E 0E F2 | 	cmp	local01, #4 wz
2e208     CC 01 90 5D |  if_ne	jmp	#LR__4689
2e20c     40 4E 05 F1 | 	add	fp, #64
2e210     A7 12 02 F6 | 	mov	arg01, fp
2e214     40 4E 85 F1 | 	sub	fp, #64
2e218     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e21c     0C 4E 05 F1 | 	add	fp, #12
2e220     A7 FA 61 FC | 	wrlong	result1, fp
2e224     0C 4E 85 F1 | 	sub	fp, #12
2e228     00 FA 0D F2 | 	cmp	result1, #0 wz
2e22c     A8 01 90 5D |  if_ne	jmp	#LR__4688
2e230     5C 4E 05 F1 | 	add	fp, #92
2e234     A7 12 02 FB | 	rdlong	arg01, fp
2e238     38 4E 05 F1 | 	add	fp, #56
2e23c     A7 12 62 FC | 	wrlong	arg01, fp
2e240     0D 12 06 F1 | 	add	arg01, #13
2e244     20 4E 85 F1 | 	sub	fp, #32
2e248     A7 14 02 F6 | 	mov	arg02, fp
2e24c     74 4E 85 F1 | 	sub	fp, #116
2e250     0D 14 06 F1 | 	add	arg02, #13
2e254     13 16 06 F6 | 	mov	arg03, #19
2e258     60 27 BF FD | 	call	#__system____builtin_memmove
2e25c     94 4E 05 F1 | 	add	fp, #148
2e260     A7 1E 02 FB | 	rdlong	local01, fp
2e264     15 4E 85 F1 | 	sub	fp, #21
2e268     A7 FA C1 FA | 	rdbyte	result1, fp
2e26c     0B 1E 06 F1 | 	add	local01, #11
2e270     0F FB 41 FC | 	wrbyte	result1, local01
2e274     15 4E 05 F1 | 	add	fp, #21
2e278     A7 1E 02 FB | 	rdlong	local01, fp
2e27c     94 4E 85 F1 | 	sub	fp, #148
2e280     0B 1E 06 F1 | 	add	local01, #11
2e284     0F 1F C2 FA | 	rdbyte	local01, local01
2e288     10 1E CE F7 | 	test	local01, #16 wz
2e28c     24 00 90 5D |  if_ne	jmp	#LR__4684
2e290     94 4E 05 F1 | 	add	fp, #148
2e294     A7 FA 01 FB | 	rdlong	result1, fp
2e298     FD 1E 02 F6 | 	mov	local01, result1
2e29c     94 4E 85 F1 | 	sub	fp, #148
2e2a0     0B FA 05 F1 | 	add	result1, #11
2e2a4     FD FA C1 FA | 	rdbyte	result1, result1
2e2a8     20 FA 45 F5 | 	or	result1, #32
2e2ac     0B 1E 06 F1 | 	add	local01, #11
2e2b0     0F FB 41 FC | 	wrbyte	result1, local01
2e2b4                 | LR__4684
2e2b4     70 4E 05 F1 | 	add	fp, #112
2e2b8     A7 1E 02 FB | 	rdlong	local01, fp
2e2bc     03 1E 06 F1 | 	add	local01, #3
2e2c0     0F 03 48 FC | 	wrbyte	#1, local01
2e2c4     24 4E 05 F1 | 	add	fp, #36
2e2c8     A7 1E 02 FB | 	rdlong	local01, fp
2e2cc     94 4E 85 F1 | 	sub	fp, #148
2e2d0     0B 1E 06 F1 | 	add	local01, #11
2e2d4     0F 1F C2 FA | 	rdbyte	local01, local01
2e2d8     10 1E CE F7 | 	test	local01, #16 wz
2e2dc     F8 00 90 AD |  if_e	jmp	#LR__4687
2e2e0     18 4E 05 F1 | 	add	fp, #24
2e2e4     A7 16 02 FB | 	rdlong	arg03, fp
2e2e8     30 4E 05 F1 | 	add	fp, #48
2e2ec     A7 1E 02 FB | 	rdlong	local01, fp
2e2f0     48 4E 85 F1 | 	sub	fp, #72
2e2f4     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e2f8     DC 00 90 AD |  if_e	jmp	#LR__4687
2e2fc     70 4E 05 F1 | 	add	fp, #112
2e300     A7 12 02 FB | 	rdlong	arg01, fp
2e304     09 1F 02 F6 | 	mov	local01, arg01
2e308     24 4E 05 F1 | 	add	fp, #36
2e30c     A7 14 02 FB | 	rdlong	arg02, fp
2e310     94 4E 85 F1 | 	sub	fp, #148
2e314     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e318     FD 14 02 F6 | 	mov	arg02, result1
2e31c     0F 13 02 F6 | 	mov	arg01, local01
2e320     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e324     98 4E 05 F1 | 	add	fp, #152
2e328     A7 FA 61 FC | 	wrlong	result1, fp
2e32c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e330     98 4E 85 F1 | 	sub	fp, #152
2e334     0C 4E 05 A1 |  if_e	add	fp, #12
2e338     A7 04 68 AC |  if_e	wrlong	#2, fp
2e33c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e340     94 00 90 AD |  if_e	jmp	#LR__4686
2e344     70 4E 05 F1 | 	add	fp, #112
2e348     A7 12 02 FB | 	rdlong	arg01, fp
2e34c     28 4E 05 F1 | 	add	fp, #40
2e350     A7 14 02 FB | 	rdlong	arg02, fp
2e354     98 4E 85 F1 | 	sub	fp, #152
2e358     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e35c     0C 4E 05 F1 | 	add	fp, #12
2e360     A7 FA 61 FC | 	wrlong	result1, fp
2e364     64 4E 05 F1 | 	add	fp, #100
2e368     A7 1E 02 FB | 	rdlong	local01, fp
2e36c     54 1E 06 F1 | 	add	local01, #84
2e370     24 4E 05 F1 | 	add	fp, #36
2e374     A7 1E 62 FC | 	wrlong	local01, fp
2e378     88 4E 85 F1 | 	sub	fp, #136
2e37c     A7 1E 0A FB | 	rdlong	local01, fp wz
2e380     0C 4E 85 F1 | 	sub	fp, #12
2e384     50 00 90 5D |  if_ne	jmp	#LR__4685
2e388     94 4E 05 F1 | 	add	fp, #148
2e38c     A7 1E 02 FB | 	rdlong	local01, fp
2e390     94 4E 85 F1 | 	sub	fp, #148
2e394     01 1E 06 F1 | 	add	local01, #1
2e398     0F 1F C2 FA | 	rdbyte	local01, local01
2e39c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e3a0     34 00 90 5D |  if_ne	jmp	#LR__4685
2e3a4     70 4E 05 F1 | 	add	fp, #112
2e3a8     A7 12 02 FB | 	rdlong	arg01, fp
2e3ac     24 4E 05 F1 | 	add	fp, #36
2e3b0     A7 14 02 FB | 	rdlong	arg02, fp
2e3b4     4C 4E 85 F1 | 	sub	fp, #76
2e3b8     A7 16 02 FB | 	rdlong	arg03, fp
2e3bc     48 4E 85 F1 | 	sub	fp, #72
2e3c0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e3c4     70 4E 05 F1 | 	add	fp, #112
2e3c8     A7 1E 02 FB | 	rdlong	local01, fp
2e3cc     70 4E 85 F1 | 	sub	fp, #112
2e3d0     03 1E 06 F1 | 	add	local01, #3
2e3d4     0F 03 48 FC | 	wrbyte	#1, local01
2e3d8                 | LR__4685
2e3d8                 | LR__4686
2e3d8                 | LR__4687
2e3d8                 | LR__4688
2e3d8                 | LR__4689
2e3d8     0C 4E 05 F1 | 	add	fp, #12
2e3dc     A7 1E 0A FB | 	rdlong	local01, fp wz
2e3e0     0C 4E 85 F1 | 	sub	fp, #12
2e3e4     40 00 90 5D |  if_ne	jmp	#LR__4691
2e3e8     10 4E 05 F1 | 	add	fp, #16
2e3ec     A7 12 02 F6 | 	mov	arg01, fp
2e3f0     10 4E 85 F1 | 	sub	fp, #16
2e3f4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e3f8     0C 4E 05 F1 | 	add	fp, #12
2e3fc     A7 FA 61 FC | 	wrlong	result1, fp
2e400     0C 4E 85 F1 | 	sub	fp, #12
2e404     00 FA 0D F2 | 	cmp	result1, #0 wz
2e408     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e40c     70 4E 05 F1 | 	add	fp, #112
2e410     A7 12 02 FB | 	rdlong	arg01, fp
2e414     70 4E 85 F1 | 	sub	fp, #112
2e418     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e41c     0C 4E 05 F1 | 	add	fp, #12
2e420     A7 FA 61 FC | 	wrlong	result1, fp
2e424     0C 4E 85 F1 | 	sub	fp, #12
2e428                 | LR__4690
2e428                 | LR__4691
2e428                 | LR__4692
2e428                 | LR__4693
2e428                 | ' 					res = sync_fs(fs);
2e428                 | ' 				}
2e428                 | ' 			}
2e428                 | ' 
2e428                 | ' 		}
2e428                 | ' 		;
2e428                 | ' 	}
2e428                 | ' 
2e428                 | ' 	return res ;
2e428     0C 4E 05 F1 | 	add	fp, #12
2e42c     A7 FA 01 FB | 	rdlong	result1, fp
2e430     0C 4E 85 F1 | 	sub	fp, #12
2e434     A7 F0 03 F6 | 	mov	ptra, fp
2e438     B2 00 A0 FD | 	call	#popregs_
2e43c                 | _fatfs_cc_f_rename_ret
2e43c     2D 00 64 FD | 	ret
2e440                 | 
2e440                 | _fatfs_cc_time
2e440     00 4A 05 F6 | 	mov	COUNT_, #0
2e444     A8 00 A0 FD | 	call	#pushregs_
2e448     14 F0 07 F1 | 	add	ptra, #20
2e44c     04 4E 05 F1 | 	add	fp, #4
2e450     A7 12 62 FC | 	wrlong	arg01, fp
2e454     04 4E 05 F1 | 	add	fp, #4
2e458     A7 12 02 F6 | 	mov	arg01, fp
2e45c     08 4E 85 F1 | 	sub	fp, #8
2e460     00 14 06 F6 | 	mov	arg02, #0
2e464     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e468     08 4E 05 F1 | 	add	fp, #8
2e46c     A7 FA 01 FB | 	rdlong	result1, fp
2e470     08 4E 05 F1 | 	add	fp, #8
2e474     A7 FA 61 FC | 	wrlong	result1, fp
2e478     0C 4E 85 F1 | 	sub	fp, #12
2e47c     A7 FA 09 FB | 	rdlong	result1, fp wz
2e480     04 4E 85 F1 | 	sub	fp, #4
2e484     18 00 90 AD |  if_e	jmp	#LR__4700
2e488     04 4E 05 F1 | 	add	fp, #4
2e48c     A7 FA 01 FB | 	rdlong	result1, fp
2e490     0C 4E 05 F1 | 	add	fp, #12
2e494     A7 14 02 FB | 	rdlong	arg02, fp
2e498     10 4E 85 F1 | 	sub	fp, #16
2e49c     FD 14 62 FC | 	wrlong	arg02, result1
2e4a0                 | LR__4700
2e4a0                 | '         *tp = now;
2e4a0                 | '     return now;
2e4a0     10 4E 05 F1 | 	add	fp, #16
2e4a4     A7 FA 01 FB | 	rdlong	result1, fp
2e4a8     10 4E 85 F1 | 	sub	fp, #16
2e4ac     A7 F0 03 F6 | 	mov	ptra, fp
2e4b0     B2 00 A0 FD | 	call	#popregs_
2e4b4                 | _fatfs_cc_time_ret
2e4b4     2D 00 64 FD | 	ret
2e4b8                 | 
2e4b8                 | _fatfs_cc_mktime
2e4b8     06 4A 05 F6 | 	mov	COUNT_, #6
2e4bc     A8 00 A0 FD | 	call	#pushregs_
2e4c0     09 1F 02 F6 | 	mov	local01, arg01
2e4c4     14 1E 06 F1 | 	add	local01, #20
2e4c8     0F 13 02 FB | 	rdlong	arg01, local01
2e4cc     14 1E 86 F1 | 	sub	local01, #20
2e4d0     46 12 56 F2 | 	cmps	arg01, #70 wc
2e4d4                 | '                 return (time_t) -1;
2e4d4     01 FA 65 C6 |  if_b	neg	result1, #1
2e4d8     7C 01 90 CD |  if_b	jmp	#LR__4714
2e4dc     03 00 00 FF 
2e4e0     6C 21 06 F6 | 	mov	local02, ##1900
2e4e4     14 1E 06 F1 | 	add	local01, #20
2e4e8     0F FB 01 FB | 	rdlong	result1, local01
2e4ec     FD 20 02 F1 | 	add	local02, result1
2e4f0     08 1E 86 F1 | 	sub	local01, #8
2e4f4     0F 23 02 FB | 	rdlong	local03, local01
2e4f8     01 22 86 F1 | 	sub	local03, #1
2e4fc     04 1E 06 F1 | 	add	local01, #4
2e500     0F 13 02 FB | 	rdlong	arg01, local01
2e504     10 1E 86 F1 | 	sub	local01, #16
2e508     02 12 66 F0 | 	shl	arg01, #2
2e50c     02 00 00 FF 
2e510     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e514     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e518     09 FB 01 FB | 	rdlong	result1, arg01
2e51c     FD 22 02 F1 | 	add	local03, result1
2e520     10 13 02 F6 | 	mov	arg01, local02
2e524     02 00 00 FF 
2e528     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e52c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e530     00 FA 0D F2 | 	cmp	result1, #0 wz
2e534     1C 00 90 AD |  if_e	jmp	#LR__4710
2e538     00 24 06 F6 | 	mov	local04, #0
2e53c     10 1E 06 F1 | 	add	local01, #16
2e540     0F FB 01 FB | 	rdlong	result1, local01
2e544     10 1E 86 F1 | 	sub	local01, #16
2e548     02 FA 55 F2 | 	cmps	result1, #2 wc
2e54c     01 24 06 36 |  if_ae	mov	local04, #1
2e550     04 00 90 FD | 	jmp	#LR__4711
2e554                 | LR__4710
2e554     00 24 06 F6 | 	mov	local04, #0
2e558                 | LR__4711
2e558     04 1E 06 F1 | 	add	local01, #4
2e55c     0F FB 01 FB | 	rdlong	result1, local01
2e560     04 1E 86 F1 | 	sub	local01, #4
2e564     0F 27 02 FB | 	rdlong	local05, local01
2e568     08 1E 06 F1 | 	add	local01, #8
2e56c     0F 13 02 FB | 	rdlong	arg01, local01
2e570     07 00 00 FF 
2e574     10 12 06 FD | 	qmul	arg01, ##3600
2e578     12 23 02 F1 | 	add	local03, local04
2e57c     FD 24 02 F6 | 	mov	local04, result1
2e580     04 24 66 F0 | 	shl	local04, #4
2e584     FD 24 82 F1 | 	sub	local04, result1
2e588     02 24 66 F0 | 	shl	local04, #2
2e58c     12 27 02 F1 | 	add	local05, local04
2e590     08 1E 86 F1 | 	sub	local01, #8
2e594     18 24 62 FD | 	getqx	local04
2e598     A8 00 00 FF 
2e59c     80 23 06 FD | 	qmul	local03, ##86400
2e5a0     12 27 02 F1 | 	add	local05, local04
2e5a4     10 23 02 F6 | 	mov	local03, local02
2e5a8     03 00 00 FF 
2e5ac     B2 23 86 F1 | 	sub	local03, ##1970
2e5b0     18 24 62 FD | 	getqx	local04
2e5b4     99 F0 00 FF 
2e5b8     80 23 06 FD | 	qmul	local03, ##31536000
2e5bc     12 27 02 F1 | 	add	local05, local04
2e5c0     10 23 02 F6 | 	mov	local03, local02
2e5c4     03 00 00 FF 
2e5c8     B1 23 86 F1 | 	sub	local03, ##1969
2e5cc     11 29 52 F6 | 	abs	local06, local03 wc
2e5d0     02 28 46 F0 | 	shr	local06, #2
2e5d4     14 29 82 F6 | 	negc	local06, local06
2e5d8     03 00 00 FF 
2e5dc     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e5e0     18 24 62 FD | 	getqx	local04
2e5e4     12 27 02 F1 | 	add	local05, local04
2e5e8     18 00 90 CD |  if_b	jmp	#LR__4712
2e5ec     03 00 00 FF 
2e5f0     D0 21 86 F1 | 	sub	local02, ##2000
2e5f4     10 25 52 F6 | 	abs	local04, local02 wc
2e5f8     64 24 16 FD | 	qdiv	local04, #100
2e5fc     18 24 62 FD | 	getqx	local04
2e600     12 29 A2 F3 | 	sumnc	local06, local04
2e604                 | LR__4712
2e604     A8 00 00 FF 
2e608     80 29 06 FD | 	qmul	local06, ##86400
2e60c     18 28 62 FD | 	getqx	local06
2e610     14 27 02 F1 | 	add	local05, local06
2e614     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e618     02 00 00 FF 
2e61c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e620     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e624     14 27 02 F1 | 	add	local05, local06
2e628     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e62c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e630     02 00 00 FF 
2e634     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e638     01 22 0E F2 | 	cmp	local03, #1 wz
2e63c     14 00 90 5D |  if_ne	jmp	#LR__4713
2e640     0F 13 02 F6 | 	mov	arg01, local01
2e644     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e648     00 FA 0D F2 | 	cmp	result1, #0 wz
2e64c     07 00 00 5F 
2e650     10 26 86 51 |  if_ne	sub	local05, ##3600
2e654                 | LR__4713
2e654                 | '                 s -=  (3600L) ;
2e654                 | ' 
2e654                 | '         return s;
2e654     13 FB 01 F6 | 	mov	result1, local05
2e658                 | LR__4714
2e658     A7 F0 03 F6 | 	mov	ptra, fp
2e65c     B2 00 A0 FD | 	call	#popregs_
2e660                 | _fatfs_cc_mktime_ret
2e660     2D 00 64 FD | 	ret
2e664                 | 
2e664                 | _fatfs_cc__gmtime_r
2e664     03 4A 05 F6 | 	mov	COUNT_, #3
2e668     A8 00 A0 FD | 	call	#pushregs_
2e66c     09 1F 02 FB | 	rdlong	local01, arg01
2e670     A8 00 00 FF 
2e674     80 1F 16 FD | 	qdiv	local01, ##86400
2e678     18 FA 61 FD | 	getqx	result1
2e67c     04 FA 05 F1 | 	add	result1, #4
2e680     07 FA 15 FD | 	qdiv	result1, #7
2e684     18 14 06 F1 | 	add	arg02, #24
2e688     D1 7F 27 FF 
2e68c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e690     D1 7F 27 3F 
2e694     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e698     03 00 00 3F 
2e69c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e6a0     03 00 00 CF 
2e6a4     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e6a8                 | ' 	  year = 1970;
2e6a8                 | ' 	}
2e6a8                 | ' 
2e6a8                 | ' 	for(;;) {
2e6a8     19 FA 61 FD | 	getqy	result1
2e6ac     0A FB 61 FC | 	wrlong	result1, arg02
2e6b0     18 14 86 F1 | 	sub	arg02, #24
2e6b4                 | LR__4720
2e6b4     10 13 02 F6 | 	mov	arg01, local02
2e6b8     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e6bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6c0     42 F1 00 5F 
2e6c4     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e6c8     99 F0 00 AF 
2e6cc     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e6d0     11 1F 12 F2 | 	cmp	local01, local03 wc
2e6d4                 | ' 	    break;
2e6d4     01 20 06 31 |  if_ae	add	local02, #1
2e6d8     11 1F 82 31 |  if_ae	sub	local01, local03
2e6dc     D4 FF 9F 3D |  if_ae	jmp	#LR__4720
2e6e0     A8 00 00 FF 
2e6e4     80 1F 16 FD | 	qdiv	local01, ##86400
2e6e8     10 23 02 F6 | 	mov	local03, local02
2e6ec     03 00 00 FF 
2e6f0     6C 23 86 F1 | 	sub	local03, ##1900
2e6f4     14 14 06 F1 | 	add	arg02, #20
2e6f8     0A 23 62 FC | 	wrlong	local03, arg02
2e6fc     08 14 06 F1 | 	add	arg02, #8
2e700     10 13 02 F6 | 	mov	arg01, local02
2e704     18 20 62 FD | 	getqx	local02
2e708     0A 21 62 FC | 	wrlong	local02, arg02
2e70c     1C 14 86 F1 | 	sub	arg02, #28
2e710     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e714     00 FA 0D F2 | 	cmp	result1, #0 wz
2e718     1D 22 06 56 |  if_ne	mov	local03, #29
2e71c     1C 22 06 A6 |  if_e	mov	local03, #28
2e720     02 00 00 FF 
2e724     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e728     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e72c     02 00 00 FF 
2e730     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e734                 | ' 
2e734                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e734                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e734     00 12 06 F6 | 	mov	arg01, #0
2e738     97 2A 48 FB | 	callpa	#(@LR__4722-@LR__4721)>>2,fcache_load_ptr_
2e73c                 | LR__4721
2e73c     09 23 02 F6 | 	mov	local03, arg01
2e740     02 22 66 F0 | 	shl	local03, #2
2e744     02 00 00 FF 
2e748     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e74c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e750     11 23 02 FB | 	rdlong	local03, local03
2e754     11 21 52 F2 | 	cmps	local02, local03 wc
2e758     02 00 00 FF 
2e75c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e760     2C 00 90 CD |  if_b	jmp	#LR__4723
2e764     09 23 02 F6 | 	mov	local03, arg01
2e768     02 22 66 F0 | 	shl	local03, #2
2e76c     02 00 00 FF 
2e770     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e774     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e778     11 23 02 FB | 	rdlong	local03, local03
2e77c     11 21 82 F1 | 	sub	local02, local03
2e780     01 12 06 F1 | 	add	arg01, #1
2e784     02 00 00 FF 
2e788     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e78c     AC FF 9F FD | 	jmp	#LR__4721
2e790                 | LR__4722
2e790                 | LR__4723
2e790     A8 00 00 FF 
2e794     80 1F 16 FD | 	qdiv	local01, ##86400
2e798     10 14 06 F1 | 	add	arg02, #16
2e79c     0A 13 62 FC | 	wrlong	arg01, arg02
2e7a0     01 20 06 F1 | 	add	local02, #1
2e7a4     04 14 86 F1 | 	sub	arg02, #4
2e7a8     0A 21 62 FC | 	wrlong	local02, arg02
2e7ac     19 1E 62 FD | 	getqy	local01
2e7b0     07 00 00 FF 
2e7b4     10 1E 16 FD | 	qdiv	local01, ##3600
2e7b8     18 22 62 FD | 	getqx	local03
2e7bc     07 00 00 FF 
2e7c0     10 1E 16 FD | 	qdiv	local01, ##3600
2e7c4     04 14 86 F1 | 	sub	arg02, #4
2e7c8     0A 23 62 FC | 	wrlong	local03, arg02
2e7cc     19 1E 62 FD | 	getqy	local01
2e7d0     3C 1E 16 FD | 	qdiv	local01, #60
2e7d4     18 22 62 FD | 	getqx	local03
2e7d8     3C 1E 16 FD | 	qdiv	local01, #60
2e7dc     04 14 86 F1 | 	sub	arg02, #4
2e7e0     0A 23 62 FC | 	wrlong	local03, arg02
2e7e4     04 14 86 F1 | 	sub	arg02, #4
2e7e8                 | '         stm->tm_isdst = 0;
2e7e8                 | ' 
2e7e8                 | ' ;
2e7e8                 | '         return stm;
2e7e8     0A FB 01 F6 | 	mov	result1, arg02
2e7ec     19 22 62 FD | 	getqy	local03
2e7f0     0A 23 62 FC | 	wrlong	local03, arg02
2e7f4     20 14 06 F1 | 	add	arg02, #32
2e7f8     0A 01 68 FC | 	wrlong	#0, arg02
2e7fc     A7 F0 03 F6 | 	mov	ptra, fp
2e800     B2 00 A0 FD | 	call	#popregs_
2e804                 | _fatfs_cc__gmtime_r_ret
2e804     2D 00 64 FD | 	ret
2e808                 | 
2e808                 | _fatfs_cc__tzset
2e808     81 01 00 FF 
2e80c     4D 13 06 F6 | 	mov	arg01, ##@LR__5035
2e810     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e814     FD 12 02 F6 | 	mov	arg01, result1
2e818     02 00 00 FF 
2e81c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e820     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e824     02 00 00 FF 
2e828     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e82c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e830     02 00 00 FF 
2e834     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e838     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e83c     02 00 00 FF 
2e840     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e844                 | _fatfs_cc__tzset_ret
2e844     2D 00 64 FD | 	ret
2e848                 | 
2e848                 | _fatfs_cc_getenv
2e848     06 4A 05 F6 | 	mov	COUNT_, #6
2e84c     A8 00 A0 FD | 	call	#pushregs_
2e850     09 1F 02 F6 | 	mov	local01, arg01
2e854     09 21 02 F6 | 	mov	local02, arg01
2e858     97 06 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
2e85c                 | LR__4730
2e85c     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e860     01 20 06 51 |  if_ne	add	local02, #1
2e864     F4 FF 9F 5D |  if_ne	jmp	#LR__4730
2e868                 | LR__4731
2e868     09 21 82 F1 | 	sub	local02, arg01
2e86c     10 FB 01 F6 | 	mov	result1, local02
2e870     02 00 00 FF 
2e874     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e878     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e87c     02 00 00 FF 
2e880     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e884                 | '             return 0;
2e884     00 FA 05 A6 |  if_e	mov	result1, #0
2e888     5C 00 90 AD |  if_e	jmp	#LR__4734
2e88c                 | ' 
2e88c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e88c     02 00 00 FF 
2e890     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e894     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e898     02 00 00 FF 
2e89c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e8a0                 | LR__4732
2e8a0     11 25 0A FB | 	rdlong	local04, local03 wz
2e8a4     3C 00 90 AD |  if_e	jmp	#LR__4733
2e8a8     12 13 02 F6 | 	mov	arg01, local04
2e8ac     0F 15 02 F6 | 	mov	arg02, local01
2e8b0     10 17 02 F6 | 	mov	arg03, local02
2e8b4     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e8b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e8bc     10 27 02 A6 |  if_e	mov	local05, local02
2e8c0     12 27 02 A1 |  if_e	add	local05, local04
2e8c4     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e8c8     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e8cc                 | ' 			return name+len+1;
2e8cc     10 25 02 A1 |  if_e	add	local04, local02
2e8d0     01 24 06 A1 |  if_e	add	local04, #1
2e8d4     12 FB 01 A6 |  if_e	mov	result1, local04
2e8d8     0C 00 90 AD |  if_e	jmp	#LR__4734
2e8dc     04 22 06 F1 | 	add	local03, #4
2e8e0     BC FF 9F FD | 	jmp	#LR__4732
2e8e4                 | LR__4733
2e8e4                 | ' 	}
2e8e4                 | ' 	return 0;
2e8e4     00 FA 05 F6 | 	mov	result1, #0
2e8e8                 | LR__4734
2e8e8     A7 F0 03 F6 | 	mov	ptra, fp
2e8ec     B2 00 A0 FD | 	call	#popregs_
2e8f0                 | _fatfs_cc_getenv_ret
2e8f0     2D 00 64 FD | 	ret
2e8f4                 | 
2e8f4                 | _fatfs_cc__get_fattime
2e8f4     00 4A 05 F6 | 	mov	COUNT_, #0
2e8f8     A8 00 A0 FD | 	call	#pushregs_
2e8fc     34 F0 07 F1 | 	add	ptra, #52
2e900     00 12 06 F6 | 	mov	arg01, #0
2e904     38 FB BF FD | 	call	#_fatfs_cc_time
2e908     04 4E 05 F1 | 	add	fp, #4
2e90c     A7 FA 61 FC | 	wrlong	result1, fp
2e910     A7 12 02 F6 | 	mov	arg01, fp
2e914     0C 4E 05 F1 | 	add	fp, #12
2e918     A7 14 02 F6 | 	mov	arg02, fp
2e91c     10 4E 85 F1 | 	sub	fp, #16
2e920     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e924     24 4E 05 F1 | 	add	fp, #36
2e928     A7 14 02 FB | 	rdlong	arg02, fp
2e92c     50 14 86 F1 | 	sub	arg02, #80
2e930     09 14 66 F0 | 	shl	arg02, #9
2e934     04 4E 85 F1 | 	sub	fp, #4
2e938     A7 FA 01 FB | 	rdlong	result1, fp
2e93c     01 FA 05 F1 | 	add	result1, #1
2e940     05 FA 65 F0 | 	shl	result1, #5
2e944     FD 14 42 F5 | 	or	arg02, result1
2e948     04 4E 85 F1 | 	sub	fp, #4
2e94c     A7 FA 01 FB | 	rdlong	result1, fp
2e950     FD 14 42 F5 | 	or	arg02, result1
2e954     14 4E 85 F1 | 	sub	fp, #20
2e958     A7 14 62 FC | 	wrlong	arg02, fp
2e95c     10 4E 05 F1 | 	add	fp, #16
2e960     A7 14 02 FB | 	rdlong	arg02, fp
2e964     0B 14 66 F0 | 	shl	arg02, #11
2e968     04 4E 85 F1 | 	sub	fp, #4
2e96c     A7 FA 01 FB | 	rdlong	result1, fp
2e970     05 FA 65 F0 | 	shl	result1, #5
2e974     FD 14 42 F5 | 	or	arg02, result1
2e978     04 4E 85 F1 | 	sub	fp, #4
2e97c     A7 FA 01 FB | 	rdlong	result1, fp
2e980     FD 14 42 F5 | 	or	arg02, result1
2e984     04 4E 85 F1 | 	sub	fp, #4
2e988     A7 14 62 FC | 	wrlong	arg02, fp
2e98c                 | ' 
2e98c                 | '     now = time(0);
2e98c                 | '     _gmtime_r (&now, &date);
2e98c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e98c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e98c                 | '     return (ffdate << 16) | fftime;
2e98c     04 4E 85 F1 | 	sub	fp, #4
2e990     A7 FA 01 FB | 	rdlong	result1, fp
2e994     10 FA 65 F0 | 	shl	result1, #16
2e998     08 4E 85 F1 | 	sub	fp, #8
2e99c     0A FB 41 F5 | 	or	result1, arg02
2e9a0     A7 F0 03 F6 | 	mov	ptra, fp
2e9a4     B2 00 A0 FD | 	call	#popregs_
2e9a8                 | _fatfs_cc__get_fattime_ret
2e9a8     2D 00 64 FD | 	ret
2e9ac                 | 
2e9ac                 | _fatfs_cc_unixtime_0960
2e9ac     00 4A 05 F6 | 	mov	COUNT_, #0
2e9b0     A8 00 A0 FD | 	call	#pushregs_
2e9b4     34 F0 07 F1 | 	add	ptra, #52
2e9b8     04 4E 05 F1 | 	add	fp, #4
2e9bc     A7 12 62 FC | 	wrlong	arg01, fp
2e9c0     04 4E 05 F1 | 	add	fp, #4
2e9c4     A7 14 62 FC | 	wrlong	arg02, fp
2e9c8     04 4E 85 F1 | 	sub	fp, #4
2e9cc     A7 14 02 FB | 	rdlong	arg02, fp
2e9d0     09 14 46 F0 | 	shr	arg02, #9
2e9d4     7F 14 06 F5 | 	and	arg02, #127
2e9d8     50 FA 05 F6 | 	mov	result1, #80
2e9dc     0A FB 01 F1 | 	add	result1, arg02
2e9e0     20 4E 05 F1 | 	add	fp, #32
2e9e4     A7 FA 61 FC | 	wrlong	result1, fp
2e9e8     20 4E 85 F1 | 	sub	fp, #32
2e9ec     A7 FA 01 FB | 	rdlong	result1, fp
2e9f0     05 FA 45 F0 | 	shr	result1, #5
2e9f4     FD FA 41 F8 | 	getnib	result1, result1, #0
2e9f8     01 FA 85 F1 | 	sub	result1, #1
2e9fc     1C 4E 05 F1 | 	add	fp, #28
2ea00     A7 FA 61 FC | 	wrlong	result1, fp
2ea04     1C 4E 85 F1 | 	sub	fp, #28
2ea08     A7 FA 01 FB | 	rdlong	result1, fp
2ea0c     1F FA 05 F5 | 	and	result1, #31
2ea10     18 4E 05 F1 | 	add	fp, #24
2ea14     A7 FA 61 FC | 	wrlong	result1, fp
2ea18     14 4E 85 F1 | 	sub	fp, #20
2ea1c     A7 FA 01 FB | 	rdlong	result1, fp
2ea20     0B FA 45 F0 | 	shr	result1, #11
2ea24     1F FA 05 F5 | 	and	result1, #31
2ea28     10 4E 05 F1 | 	add	fp, #16
2ea2c     A7 FA 61 FC | 	wrlong	result1, fp
2ea30     10 4E 85 F1 | 	sub	fp, #16
2ea34     A7 FA 01 FB | 	rdlong	result1, fp
2ea38     05 FA 45 F0 | 	shr	result1, #5
2ea3c     3F FA 05 F5 | 	and	result1, #63
2ea40     0C 4E 05 F1 | 	add	fp, #12
2ea44     A7 FA 61 FC | 	wrlong	result1, fp
2ea48     0C 4E 85 F1 | 	sub	fp, #12
2ea4c     A7 14 02 FB | 	rdlong	arg02, fp
2ea50     1F 14 06 F5 | 	and	arg02, #31
2ea54     01 14 66 F0 | 	shl	arg02, #1
2ea58     08 4E 05 F1 | 	add	fp, #8
2ea5c     A7 14 62 FC | 	wrlong	arg02, fp
2ea60     A7 12 02 F6 | 	mov	arg01, fp
2ea64     10 4E 85 F1 | 	sub	fp, #16
2ea68     4C FA BF FD | 	call	#_fatfs_cc_mktime
2ea6c     0C 4E 05 F1 | 	add	fp, #12
2ea70     A7 FA 61 FC | 	wrlong	result1, fp
2ea74                 | ' 
2ea74                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2ea74                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2ea74                 | '     date.tm_mday = (dosdate & 0x1f);
2ea74                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2ea74                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2ea74                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2ea74                 | ' 
2ea74                 | '     t = mktime(&date);
2ea74                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ea74                 | '     return t;
2ea74     0C 4E 85 F1 | 	sub	fp, #12
2ea78     A7 F0 03 F6 | 	mov	ptra, fp
2ea7c     B2 00 A0 FD | 	call	#popregs_
2ea80                 | _fatfs_cc_unixtime_0960_ret
2ea80     2D 00 64 FD | 	ret
2ea84                 | 
2ea84                 | _fatfs_cc__set_dos_error_0962
2ea84     09 01 02 F6 | 	mov	_var01, arg01
2ea88                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ea88                 | '     switch (derr) {
2ea88     14 00 26 F3 | 	fle	_var01, #20
2ea8c     30 00 62 FD | 	jmprel	_var01
2ea90                 | LR__4740
2ea90     50 00 90 FD | 	jmp	#LR__4741
2ea94     84 00 90 FD | 	jmp	#LR__4755
2ea98     80 00 90 FD | 	jmp	#LR__4756
2ea9c     7C 00 90 FD | 	jmp	#LR__4757
2eaa0     48 00 90 FD | 	jmp	#LR__4742
2eaa4     44 00 90 FD | 	jmp	#LR__4743
2eaa8     40 00 90 FD | 	jmp	#LR__4744
2eaac     44 00 90 FD | 	jmp	#LR__4745
2eab0     48 00 90 FD | 	jmp	#LR__4747
2eab4     54 00 90 FD | 	jmp	#LR__4750
2eab8     38 00 90 FD | 	jmp	#LR__4746
2eabc     4C 00 90 FD | 	jmp	#LR__4751
2eac0     48 00 90 FD | 	jmp	#LR__4752
2eac4     44 00 90 FD | 	jmp	#LR__4753
2eac8     50 00 90 FD | 	jmp	#LR__4758
2eacc     4C 00 90 FD | 	jmp	#LR__4758
2ead0     48 00 90 FD | 	jmp	#LR__4758
2ead4     2C 00 90 FD | 	jmp	#LR__4748
2ead8     38 00 90 FD | 	jmp	#LR__4754
2eadc     2C 00 90 FD | 	jmp	#LR__4749
2eae0     38 00 90 FD | 	jmp	#LR__4758
2eae4                 | LR__4741
2eae4     00 02 06 F6 | 	mov	_var02, #0
2eae8                 | '         r = 0;
2eae8                 | '         break;
2eae8     34 00 90 FD | 	jmp	#LR__4759
2eaec                 | LR__4742
2eaec                 | LR__4743
2eaec                 | LR__4744
2eaec     04 02 06 F6 | 	mov	_var02, #4
2eaf0                 | '         r =  4 ;
2eaf0                 | '         break;
2eaf0     2C 00 90 FD | 	jmp	#LR__4759
2eaf4                 | LR__4745
2eaf4                 | LR__4746
2eaf4     06 02 06 F6 | 	mov	_var02, #6
2eaf8                 | '         r =  6 ;
2eaf8                 | '         break;
2eaf8     24 00 90 FD | 	jmp	#LR__4759
2eafc                 | LR__4747
2eafc     09 02 06 F6 | 	mov	_var02, #9
2eb00                 | '         r =  9 ;
2eb00                 | '         break;
2eb00     1C 00 90 FD | 	jmp	#LR__4759
2eb04                 | LR__4748
2eb04     07 02 06 F6 | 	mov	_var02, #7
2eb08                 | '         r =  7 ;
2eb08                 | '         break;
2eb08     14 00 90 FD | 	jmp	#LR__4759
2eb0c                 | LR__4749
2eb0c                 | LR__4750
2eb0c                 | LR__4751
2eb0c                 | LR__4752
2eb0c                 | LR__4753
2eb0c     0A 02 06 F6 | 	mov	_var02, #10
2eb10                 | '         r =  10 ;
2eb10                 | '         break;
2eb10     0C 00 90 FD | 	jmp	#LR__4759
2eb14                 | LR__4754
2eb14     0B 02 06 F6 | 	mov	_var02, #11
2eb18                 | '         r =  11 ;
2eb18                 | '         break;
2eb18     04 00 90 FD | 	jmp	#LR__4759
2eb1c                 | LR__4755
2eb1c                 | LR__4756
2eb1c                 | LR__4757
2eb1c                 | LR__4758
2eb1c     0C 02 06 F6 | 	mov	_var02, #12
2eb20                 | '         r =  12 ;
2eb20                 | '         break;
2eb20                 | LR__4759
2eb20                 | '     }
2eb20                 | '     return _seterror(r);
2eb20     00 02 4E F2 | 	cmps	_var02, #0 wz
2eb24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2eb28     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2eb2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2eb30     01 FA 65 56 |  if_ne	neg	result1, #1
2eb34     00 FA 05 A6 |  if_e	mov	result1, #0
2eb38                 | _fatfs_cc__set_dos_error_0962_ret
2eb38     2D 00 64 FD | 	ret
2eb3c                 | 
2eb3c                 | _fatfs_cc_v_creat
2eb3c     04 4A 05 F6 | 	mov	COUNT_, #4
2eb40     A8 00 A0 FD | 	call	#pushregs_
2eb44     09 1F 02 F6 | 	mov	local01, arg01
2eb48     0A 21 02 F6 | 	mov	local02, arg02
2eb4c     03 00 00 FF 
2eb50     3C 12 06 F6 | 	mov	arg01, ##1596
2eb54                 | '     return _gc_alloc(size);
2eb54     10 14 06 F6 | 	mov	arg02, #16
2eb58     28 5E BF FD | 	call	#__system___gc_doalloc
2eb5c     FD 22 0A F6 | 	mov	local03, result1 wz
2eb60                 | '       return _seterror( 7 );
2eb60     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eb64     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eb68     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eb6c     01 FA 65 A6 |  if_e	neg	result1, #1
2eb70     58 00 90 AD |  if_e	jmp	#LR__4761
2eb74     11 13 02 F6 | 	mov	arg01, local03
2eb78     00 14 06 F6 | 	mov	arg02, #0
2eb7c     03 00 00 FF 
2eb80     3C 16 06 F6 | 	mov	arg03, ##1596
2eb84     98 00 A0 FD | 	call	#\builtin_bytefill_
2eb88     02 00 00 FF 
2eb8c     14 22 06 F1 | 	add	local03, ##1044
2eb90     11 13 02 F6 | 	mov	arg01, local03
2eb94     02 00 00 FF 
2eb98     14 22 86 F1 | 	sub	local03, ##1044
2eb9c     10 15 02 F6 | 	mov	arg02, local02
2eba0     07 16 06 F6 | 	mov	arg03, #7
2eba4     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2eba8     FD 24 0A F6 | 	mov	local04, result1 wz
2ebac     14 00 90 AD |  if_e	jmp	#LR__4760
2ebb0     11 13 02 F6 | 	mov	arg01, local03
2ebb4                 | '     return _gc_free(ptr);
2ebb4     D8 5E BF FD | 	call	#__system___gc_free
2ebb8                 | '     free(f);
2ebb8                 | '     return _set_dos_error(r);
2ebb8     12 13 02 F6 | 	mov	arg01, local04
2ebbc     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ebc0     08 00 90 FD | 	jmp	#LR__4761
2ebc4                 | LR__4760
2ebc4     0F 23 62 FC | 	wrlong	local03, local01
2ebc8                 | '   }
2ebc8                 | '   fil->vfsdata = f;
2ebc8                 | '   return 0;
2ebc8     00 FA 05 F6 | 	mov	result1, #0
2ebcc                 | LR__4761
2ebcc     A7 F0 03 F6 | 	mov	ptra, fp
2ebd0     B2 00 A0 FD | 	call	#popregs_
2ebd4                 | _fatfs_cc_v_creat_ret
2ebd4     2D 00 64 FD | 	ret
2ebd8                 | 
2ebd8                 | _fatfs_cc_v_close
2ebd8     02 4A 05 F6 | 	mov	COUNT_, #2
2ebdc     A8 00 A0 FD | 	call	#pushregs_
2ebe0     09 1F 02 FB | 	rdlong	local01, arg01
2ebe4     02 00 00 FF 
2ebe8     14 1E 06 F1 | 	add	local01, ##1044
2ebec     0F 13 02 F6 | 	mov	arg01, local01
2ebf0     02 00 00 FF 
2ebf4     14 1E 86 F1 | 	sub	local01, ##1044
2ebf8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ebfc     FD 20 02 F6 | 	mov	local02, result1
2ec00     0F 13 02 F6 | 	mov	arg01, local01
2ec04                 | '     return _gc_free(ptr);
2ec04     88 5E BF FD | 	call	#__system___gc_free
2ec08                 | '     FAT_FIL *f = fil->vfsdata;
2ec08                 | '     r=f_close(&f->fil);
2ec08                 | '     free(f);
2ec08                 | '     return _set_dos_error(r);
2ec08     10 13 02 F6 | 	mov	arg01, local02
2ec0c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec10     A7 F0 03 F6 | 	mov	ptra, fp
2ec14     B2 00 A0 FD | 	call	#popregs_
2ec18                 | _fatfs_cc_v_close_ret
2ec18     2D 00 64 FD | 	ret
2ec1c                 | 
2ec1c                 | _fatfs_cc_v_opendir
2ec1c     04 4A 05 F6 | 	mov	COUNT_, #4
2ec20     A8 00 A0 FD | 	call	#pushregs_
2ec24     09 1F 02 F6 | 	mov	local01, arg01
2ec28     0A 21 02 F6 | 	mov	local02, arg02
2ec2c     30 12 06 F6 | 	mov	arg01, #48
2ec30                 | '     return _gc_alloc(size);
2ec30     10 14 06 F6 | 	mov	arg02, #16
2ec34     4C 5D BF FD | 	call	#__system___gc_doalloc
2ec38     FD 22 0A F6 | 	mov	local03, result1 wz
2ec3c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ec3c                 | '       return _seterror( 7 );
2ec3c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ec40     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ec44     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ec48     01 FA 65 A6 |  if_e	neg	result1, #1
2ec4c     34 00 90 AD |  if_e	jmp	#LR__4771
2ec50     10 15 02 F6 | 	mov	arg02, local02
2ec54     11 13 02 F6 | 	mov	arg01, local03
2ec58     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ec5c     FD 24 0A F6 | 	mov	local04, result1 wz
2ec60     14 00 90 AD |  if_e	jmp	#LR__4770
2ec64     11 13 02 F6 | 	mov	arg01, local03
2ec68                 | '     return _gc_free(ptr);
2ec68     24 5E BF FD | 	call	#__system___gc_free
2ec6c                 | '         free(f);
2ec6c                 | '         return _set_dos_error(r);
2ec6c     12 13 02 F6 | 	mov	arg01, local04
2ec70     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec74     0C 00 90 FD | 	jmp	#LR__4771
2ec78                 | LR__4770
2ec78     04 1E 06 F1 | 	add	local01, #4
2ec7c     0F 23 62 FC | 	wrlong	local03, local01
2ec80                 | '     }
2ec80                 | '     dir->vfsdata = f;
2ec80                 | '     return 0;
2ec80     00 FA 05 F6 | 	mov	result1, #0
2ec84                 | LR__4771
2ec84     A7 F0 03 F6 | 	mov	ptra, fp
2ec88     B2 00 A0 FD | 	call	#popregs_
2ec8c                 | _fatfs_cc_v_opendir_ret
2ec8c     2D 00 64 FD | 	ret
2ec90                 | 
2ec90                 | _fatfs_cc_v_closedir
2ec90     02 4A 05 F6 | 	mov	COUNT_, #2
2ec94     A8 00 A0 FD | 	call	#pushregs_
2ec98     04 12 06 F1 | 	add	arg01, #4
2ec9c     09 1F 02 FB | 	rdlong	local01, arg01
2eca0     0F 13 02 F6 | 	mov	arg01, local01
2eca4     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2eca8     FD 20 02 F6 | 	mov	local02, result1
2ecac     0F 13 02 F6 | 	mov	arg01, local01
2ecb0                 | '     return _gc_free(ptr);
2ecb0     DC 5D BF FD | 	call	#__system___gc_free
2ecb4     00 20 0E F2 | 	cmp	local02, #0 wz
2ecb8     10 13 02 56 |  if_ne	mov	arg01, local02
2ecbc     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ecc0                 | '     return r;
2ecc0     10 FB 01 F6 | 	mov	result1, local02
2ecc4     A7 F0 03 F6 | 	mov	ptra, fp
2ecc8     B2 00 A0 FD | 	call	#popregs_
2eccc                 | _fatfs_cc_v_closedir_ret
2eccc     2D 00 64 FD | 	ret
2ecd0                 | 
2ecd0                 | _fatfs_cc_v_readdir
2ecd0     01 4A 05 F6 | 	mov	COUNT_, #1
2ecd4     A8 00 A0 FD | 	call	#pushregs_
2ecd8     2C F1 07 F1 | 	add	ptra, #300
2ecdc     04 4E 05 F1 | 	add	fp, #4
2ece0     A7 12 62 FC | 	wrlong	arg01, fp
2ece4     04 4E 05 F1 | 	add	fp, #4
2ece8     A7 14 62 FC | 	wrlong	arg02, fp
2ecec     04 4E 85 F1 | 	sub	fp, #4
2ecf0     A7 16 02 FB | 	rdlong	arg03, fp
2ecf4     04 16 06 F1 | 	add	arg03, #4
2ecf8     0B 13 02 FB | 	rdlong	arg01, arg03
2ecfc     08 4E 05 F1 | 	add	fp, #8
2ed00     A7 14 02 F6 | 	mov	arg02, fp
2ed04     0C 4E 85 F1 | 	sub	fp, #12
2ed08     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ed0c     28 4F 05 F1 | 	add	fp, #296
2ed10     A7 FA 61 FC | 	wrlong	result1, fp
2ed14     28 4F 85 F1 | 	sub	fp, #296
2ed18     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed1c     14 00 90 AD |  if_e	jmp	#LR__4780
2ed20                 | '         return _set_dos_error(r);
2ed20     28 4F 05 F1 | 	add	fp, #296
2ed24     A7 12 02 FB | 	rdlong	arg01, fp
2ed28     28 4F 85 F1 | 	sub	fp, #296
2ed2c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed30     C4 00 90 FD | 	jmp	#LR__4783
2ed34                 | LR__4780
2ed34     28 4E 05 F1 | 	add	fp, #40
2ed38     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ed3c     28 4E 85 F1 | 	sub	fp, #40
2ed40                 | '         return -1;
2ed40     01 FA 65 A6 |  if_e	neg	result1, #1
2ed44     B0 00 90 AD |  if_e	jmp	#LR__4783
2ed48     08 4E 05 F1 | 	add	fp, #8
2ed4c     A7 12 02 FB | 	rdlong	arg01, fp
2ed50     20 4E 05 F1 | 	add	fp, #32
2ed54     A7 14 02 F6 | 	mov	arg02, fp
2ed58     28 4E 85 F1 | 	sub	fp, #40
2ed5c     3F 16 06 F6 | 	mov	arg03, #63
2ed60     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ed64     08 4E 05 F1 | 	add	fp, #8
2ed68     A7 16 02 FB | 	rdlong	arg03, fp
2ed6c     3F 16 06 F1 | 	add	arg03, #63
2ed70     0B 01 48 FC | 	wrbyte	#0, arg03
2ed74     0C 4E 05 F1 | 	add	fp, #12
2ed78     A7 16 C2 FA | 	rdbyte	arg03, fp
2ed7c     14 4E 85 F1 | 	sub	fp, #20
2ed80     10 16 CE F7 | 	test	arg03, #16 wz
2ed84     18 00 90 AD |  if_e	jmp	#LR__4781
2ed88     08 4E 05 F1 | 	add	fp, #8
2ed8c     A7 16 02 FB | 	rdlong	arg03, fp
2ed90     08 4E 85 F1 | 	sub	fp, #8
2ed94     50 16 06 F1 | 	add	arg03, #80
2ed98     0B 03 48 FC | 	wrbyte	#1, arg03
2ed9c     14 00 90 FD | 	jmp	#LR__4782
2eda0                 | LR__4781
2eda0     08 4E 05 F1 | 	add	fp, #8
2eda4     A7 16 02 FB | 	rdlong	arg03, fp
2eda8     08 4E 85 F1 | 	sub	fp, #8
2edac     50 16 06 F1 | 	add	arg03, #80
2edb0     0B 01 48 FC | 	wrbyte	#0, arg03
2edb4                 | LR__4782
2edb4     08 4E 05 F1 | 	add	fp, #8
2edb8     A7 16 02 FB | 	rdlong	arg03, fp
2edbc     04 4E 05 F1 | 	add	fp, #4
2edc0     A7 14 02 FB | 	rdlong	arg02, fp
2edc4     48 16 06 F1 | 	add	arg03, #72
2edc8     0B 15 62 FC | 	wrlong	arg02, arg03
2edcc     04 4E 85 F1 | 	sub	fp, #4
2edd0     A7 1E 02 FB | 	rdlong	local01, fp
2edd4     08 4E 05 F1 | 	add	fp, #8
2edd8     A7 12 E2 FA | 	rdword	arg01, fp
2eddc     02 4E 05 F1 | 	add	fp, #2
2ede0     A7 14 E2 FA | 	rdword	arg02, fp
2ede4     12 4E 85 F1 | 	sub	fp, #18
2ede8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2edec     4C 1E 06 F1 | 	add	local01, #76
2edf0     0F FB 61 FC | 	wrlong	result1, local01
2edf4                 | '         ent->d_type =  (0) ;
2edf4                 | '     }
2edf4                 | '     ent->d_size = finfo.fsize;
2edf4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2edf4                 | '     return 0;
2edf4     00 FA 05 F6 | 	mov	result1, #0
2edf8                 | LR__4783
2edf8     A7 F0 03 F6 | 	mov	ptra, fp
2edfc     B2 00 A0 FD | 	call	#popregs_
2ee00                 | _fatfs_cc_v_readdir_ret
2ee00     2D 00 64 FD | 	ret
2ee04                 | 
2ee04                 | _fatfs_cc_v_stat
2ee04     03 4A 05 F6 | 	mov	COUNT_, #3
2ee08     A8 00 A0 FD | 	call	#pushregs_
2ee0c     30 F1 07 F1 | 	add	ptra, #304
2ee10     04 4E 05 F1 | 	add	fp, #4
2ee14     A7 12 62 FC | 	wrlong	arg01, fp
2ee18     04 4E 05 F1 | 	add	fp, #4
2ee1c     A7 14 62 FC | 	wrlong	arg02, fp
2ee20     08 4E 85 F1 | 	sub	fp, #8
2ee24     0A 13 02 F6 | 	mov	arg01, arg02
2ee28     00 14 06 F6 | 	mov	arg02, #0
2ee2c     30 16 06 F6 | 	mov	arg03, #48
2ee30     98 00 A0 FD | 	call	#\builtin_bytefill_
2ee34     04 4E 05 F1 | 	add	fp, #4
2ee38     A7 FA 01 FB | 	rdlong	result1, fp
2ee3c     04 4E 85 F1 | 	sub	fp, #4
2ee40     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ee44     2C 00 90 AD |  if_e	jmp	#LR__4790
2ee48     04 4E 05 F1 | 	add	fp, #4
2ee4c     A7 FA 01 FB | 	rdlong	result1, fp
2ee50     04 4E 85 F1 | 	sub	fp, #4
2ee54     FD FA C1 FA | 	rdbyte	result1, result1
2ee58     2E FA 0D F2 | 	cmp	result1, #46 wz
2ee5c     04 4E 05 A1 |  if_e	add	fp, #4
2ee60     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ee64     04 4E 85 A1 |  if_e	sub	fp, #4
2ee68     01 1E 06 A1 |  if_e	add	local01, #1
2ee6c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ee70     18 00 90 5D |  if_ne	jmp	#LR__4791
2ee74                 | LR__4790
2ee74     18 4E 05 F1 | 	add	fp, #24
2ee78     A7 20 48 FC | 	wrbyte	#16, fp
2ee7c     0C 4E 85 F1 | 	sub	fp, #12
2ee80     A7 00 68 FC | 	wrlong	#0, fp
2ee84     0C 4E 85 F1 | 	sub	fp, #12
2ee88     24 00 90 FD | 	jmp	#LR__4792
2ee8c                 | LR__4791
2ee8c     04 4E 05 F1 | 	add	fp, #4
2ee90     A7 12 02 FB | 	rdlong	arg01, fp
2ee94     0C 4E 05 F1 | 	add	fp, #12
2ee98     A7 14 02 F6 | 	mov	arg02, fp
2ee9c     10 4E 85 F1 | 	sub	fp, #16
2eea0     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2eea4     0C 4E 05 F1 | 	add	fp, #12
2eea8     A7 FA 61 FC | 	wrlong	result1, fp
2eeac     0C 4E 85 F1 | 	sub	fp, #12
2eeb0                 | LR__4792
2eeb0     0C 4E 05 F1 | 	add	fp, #12
2eeb4     A7 20 0A FB | 	rdlong	local02, fp wz
2eeb8     0C 4E 85 F1 | 	sub	fp, #12
2eebc     14 00 90 AD |  if_e	jmp	#LR__4793
2eec0                 | '         return _set_dos_error(r);
2eec0     0C 4E 05 F1 | 	add	fp, #12
2eec4     A7 12 02 FB | 	rdlong	arg01, fp
2eec8     0C 4E 85 F1 | 	sub	fp, #12
2eecc     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eed0     14 01 90 FD | 	jmp	#LR__4794
2eed4                 | LR__4793
2eed4     2C 4F 05 F1 | 	add	fp, #300
2eed8     A7 48 6A FC | 	wrlong	#292, fp
2eedc     14 4F 85 F1 | 	sub	fp, #276
2eee0     A7 22 C2 FA | 	rdbyte	local03, fp
2eee4     18 4E 85 F1 | 	sub	fp, #24
2eee8     01 22 CE F7 | 	test	local03, #1 wz
2eeec     2C 4F 05 A1 |  if_e	add	fp, #300
2eef0     A7 22 02 AB |  if_e	rdlong	local03, fp
2eef4     92 22 46 A5 |  if_e	or	local03, #146
2eef8     A7 22 62 AC |  if_e	wrlong	local03, fp
2eefc     2C 4F 85 A1 |  if_e	sub	fp, #300
2ef00     18 4E 05 F1 | 	add	fp, #24
2ef04     A7 22 C2 FA | 	rdbyte	local03, fp
2ef08     18 4E 85 F1 | 	sub	fp, #24
2ef0c     10 22 CE F7 | 	test	local03, #16 wz
2ef10     2C 4F 05 51 |  if_ne	add	fp, #300
2ef14     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ef18     08 00 00 5F 
2ef1c     49 22 46 55 |  if_ne	or	local03, ##4169
2ef20     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ef24     2C 4F 85 51 |  if_ne	sub	fp, #300
2ef28     08 4E 05 F1 | 	add	fp, #8
2ef2c     A7 22 02 FB | 	rdlong	local03, fp
2ef30     24 4F 05 F1 | 	add	fp, #292
2ef34     A7 20 02 FB | 	rdlong	local02, fp
2ef38     08 22 06 F1 | 	add	local03, #8
2ef3c     11 21 62 FC | 	wrlong	local02, local03
2ef40     24 4F 85 F1 | 	sub	fp, #292
2ef44     A7 22 02 FB | 	rdlong	local03, fp
2ef48     0C 22 06 F1 | 	add	local03, #12
2ef4c     11 03 68 FC | 	wrlong	#1, local03
2ef50     A7 22 02 FB | 	rdlong	local03, fp
2ef54     08 4E 05 F1 | 	add	fp, #8
2ef58     A7 20 02 FB | 	rdlong	local02, fp
2ef5c     18 22 06 F1 | 	add	local03, #24
2ef60     11 21 62 FC | 	wrlong	local02, local03
2ef64     08 4E 85 F1 | 	sub	fp, #8
2ef68     A7 22 02 FB | 	rdlong	local03, fp
2ef6c     1C 22 06 F1 | 	add	local03, #28
2ef70     01 00 80 FF 
2ef74     11 01 68 FC | 	wrlong	##512, local03
2ef78     A7 20 02 FB | 	rdlong	local02, fp
2ef7c     10 23 02 F6 | 	mov	local03, local02
2ef80     18 20 06 F1 | 	add	local02, #24
2ef84     10 21 02 FB | 	rdlong	local02, local02
2ef88     FF 21 06 F1 | 	add	local02, #511
2ef8c     10 21 52 F6 | 	abs	local02, local02 wc
2ef90     09 20 46 F0 | 	shr	local02, #9
2ef94     10 21 82 F6 | 	negc	local02, local02
2ef98     20 22 06 F1 | 	add	local03, #32
2ef9c     11 21 62 FC | 	wrlong	local02, local03
2efa0     A7 20 02 FB | 	rdlong	local02, fp
2efa4     10 23 02 F6 | 	mov	local03, local02
2efa8     10 1F 02 F6 | 	mov	local01, local02
2efac     0C 4E 05 F1 | 	add	fp, #12
2efb0     A7 12 E2 FA | 	rdword	arg01, fp
2efb4     02 4E 05 F1 | 	add	fp, #2
2efb8     A7 14 E2 FA | 	rdword	arg02, fp
2efbc     16 4E 85 F1 | 	sub	fp, #22
2efc0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2efc4     2C 1E 06 F1 | 	add	local01, #44
2efc8     0F FB 61 FC | 	wrlong	result1, local01
2efcc     28 20 06 F1 | 	add	local02, #40
2efd0     10 FB 61 FC | 	wrlong	result1, local02
2efd4     24 22 06 F1 | 	add	local03, #36
2efd8     11 FB 61 FC | 	wrlong	result1, local03
2efdc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2efdc                 | '     }
2efdc                 | '     buf->st_mode = mode;
2efdc                 | '     buf->st_nlink = 1;
2efdc                 | '     buf->st_size = finfo.fsize;
2efdc                 | '     buf->st_blksize = 512;
2efdc                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2efdc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2efdc                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2efdc                 | '     return r;
2efdc     0C 4E 05 F1 | 	add	fp, #12
2efe0     A7 FA 01 FB | 	rdlong	result1, fp
2efe4     0C 4E 85 F1 | 	sub	fp, #12
2efe8                 | LR__4794
2efe8     A7 F0 03 F6 | 	mov	ptra, fp
2efec     B2 00 A0 FD | 	call	#popregs_
2eff0                 | _fatfs_cc_v_stat_ret
2eff0     2D 00 64 FD | 	ret
2eff4                 | 
2eff4                 | _fatfs_cc_v_read
2eff4     00 4A 05 F6 | 	mov	COUNT_, #0
2eff8     A8 00 A0 FD | 	call	#pushregs_
2effc     1C F0 07 F1 | 	add	ptra, #28
2f000     04 4E 05 F1 | 	add	fp, #4
2f004     A7 12 62 FC | 	wrlong	arg01, fp
2f008     04 4E 05 F1 | 	add	fp, #4
2f00c     A7 14 62 FC | 	wrlong	arg02, fp
2f010     04 4E 05 F1 | 	add	fp, #4
2f014     A7 16 62 FC | 	wrlong	arg03, fp
2f018     08 4E 85 F1 | 	sub	fp, #8
2f01c     A7 12 02 FB | 	rdlong	arg01, fp
2f020     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f024     0C 4E 05 F1 | 	add	fp, #12
2f028     A7 12 62 FC | 	wrlong	arg01, fp
2f02c     10 4E 85 F1 | 	sub	fp, #16
2f030                 | '         return _seterror( 5 );
2f030     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f034     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f038     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f03c     01 FA 65 A6 |  if_e	neg	result1, #1
2f040     B8 00 90 AD |  if_e	jmp	#LR__4802
2f044     10 4E 05 F1 | 	add	fp, #16
2f048     A7 12 02 FB | 	rdlong	arg01, fp
2f04c     02 00 00 FF 
2f050     14 12 06 F1 | 	add	arg01, ##1044
2f054     08 4E 85 F1 | 	sub	fp, #8
2f058     A7 14 02 FB | 	rdlong	arg02, fp
2f05c     04 4E 05 F1 | 	add	fp, #4
2f060     A7 16 02 FB | 	rdlong	arg03, fp
2f064     0C 4E 05 F1 | 	add	fp, #12
2f068     A7 18 02 F6 | 	mov	arg04, fp
2f06c     18 4E 85 F1 | 	sub	fp, #24
2f070     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2f074     14 4E 05 F1 | 	add	fp, #20
2f078     A7 FA 61 FC | 	wrlong	result1, fp
2f07c     14 4E 85 F1 | 	sub	fp, #20
2f080     00 FA 0D F2 | 	cmp	result1, #0 wz
2f084     34 00 90 AD |  if_e	jmp	#LR__4800
2f088     04 4E 05 F1 | 	add	fp, #4
2f08c     A7 18 02 FB | 	rdlong	arg04, fp
2f090     0C 17 02 F6 | 	mov	arg03, arg04
2f094     08 18 06 F1 | 	add	arg04, #8
2f098     0C 19 02 FB | 	rdlong	arg04, arg04
2f09c     20 18 46 F5 | 	or	arg04, #32
2f0a0     08 16 06 F1 | 	add	arg03, #8
2f0a4     0B 19 62 FC | 	wrlong	arg04, arg03
2f0a8                 | '         fil->state |=  (0x20) ;
2f0a8                 | '         return _set_dos_error(r);
2f0a8     10 4E 05 F1 | 	add	fp, #16
2f0ac     A7 12 02 FB | 	rdlong	arg01, fp
2f0b0     14 4E 85 F1 | 	sub	fp, #20
2f0b4     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f0b8     40 00 90 FD | 	jmp	#LR__4802
2f0bc                 | LR__4800
2f0bc     18 4E 05 F1 | 	add	fp, #24
2f0c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2f0c4     18 4E 85 F1 | 	sub	fp, #24
2f0c8     24 00 90 5D |  if_ne	jmp	#LR__4801
2f0cc     04 4E 05 F1 | 	add	fp, #4
2f0d0     A7 FA 01 FB | 	rdlong	result1, fp
2f0d4     FD 18 02 F6 | 	mov	arg04, result1
2f0d8     04 4E 85 F1 | 	sub	fp, #4
2f0dc     08 FA 05 F1 | 	add	result1, #8
2f0e0     FD FA 01 FB | 	rdlong	result1, result1
2f0e4     10 FA 45 F5 | 	or	result1, #16
2f0e8     08 18 06 F1 | 	add	arg04, #8
2f0ec     0C FB 61 FC | 	wrlong	result1, arg04
2f0f0                 | LR__4801
2f0f0                 | '         fil->state |=  (0x10) ;
2f0f0                 | '     }
2f0f0                 | '     return x;
2f0f0     18 4E 05 F1 | 	add	fp, #24
2f0f4     A7 FA 01 FB | 	rdlong	result1, fp
2f0f8     18 4E 85 F1 | 	sub	fp, #24
2f0fc                 | LR__4802
2f0fc     A7 F0 03 F6 | 	mov	ptra, fp
2f100     B2 00 A0 FD | 	call	#popregs_
2f104                 | _fatfs_cc_v_read_ret
2f104     2D 00 64 FD | 	ret
2f108                 | 
2f108                 | _fatfs_cc_v_write
2f108     00 4A 05 F6 | 	mov	COUNT_, #0
2f10c     A8 00 A0 FD | 	call	#pushregs_
2f110     1C F0 07 F1 | 	add	ptra, #28
2f114     04 4E 05 F1 | 	add	fp, #4
2f118     A7 12 62 FC | 	wrlong	arg01, fp
2f11c     04 4E 05 F1 | 	add	fp, #4
2f120     A7 14 62 FC | 	wrlong	arg02, fp
2f124     04 4E 05 F1 | 	add	fp, #4
2f128     A7 16 62 FC | 	wrlong	arg03, fp
2f12c     08 4E 85 F1 | 	sub	fp, #8
2f130     A7 12 02 FB | 	rdlong	arg01, fp
2f134     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f138     0C 4E 05 F1 | 	add	fp, #12
2f13c     A7 12 62 FC | 	wrlong	arg01, fp
2f140     10 4E 85 F1 | 	sub	fp, #16
2f144                 | '         return _seterror( 5 );
2f144     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f148     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f14c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f150     01 FA 65 A6 |  if_e	neg	result1, #1
2f154     84 00 90 AD |  if_e	jmp	#LR__4811
2f158     10 4E 05 F1 | 	add	fp, #16
2f15c     A7 12 02 FB | 	rdlong	arg01, fp
2f160     02 00 00 FF 
2f164     14 12 06 F1 | 	add	arg01, ##1044
2f168     08 4E 85 F1 | 	sub	fp, #8
2f16c     A7 14 02 FB | 	rdlong	arg02, fp
2f170     04 4E 05 F1 | 	add	fp, #4
2f174     A7 16 02 FB | 	rdlong	arg03, fp
2f178     0C 4E 05 F1 | 	add	fp, #12
2f17c     A7 18 02 F6 | 	mov	arg04, fp
2f180     18 4E 85 F1 | 	sub	fp, #24
2f184     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f188     14 4E 05 F1 | 	add	fp, #20
2f18c     A7 FA 61 FC | 	wrlong	result1, fp
2f190     14 4E 85 F1 | 	sub	fp, #20
2f194     00 FA 0D F2 | 	cmp	result1, #0 wz
2f198     34 00 90 AD |  if_e	jmp	#LR__4810
2f19c     04 4E 05 F1 | 	add	fp, #4
2f1a0     A7 18 02 FB | 	rdlong	arg04, fp
2f1a4     0C 17 02 F6 | 	mov	arg03, arg04
2f1a8     08 18 06 F1 | 	add	arg04, #8
2f1ac     0C 19 02 FB | 	rdlong	arg04, arg04
2f1b0     20 18 46 F5 | 	or	arg04, #32
2f1b4     08 16 06 F1 | 	add	arg03, #8
2f1b8     0B 19 62 FC | 	wrlong	arg04, arg03
2f1bc                 | '         fil->state |=  (0x20) ;
2f1bc                 | '         return _set_dos_error(r);
2f1bc     10 4E 05 F1 | 	add	fp, #16
2f1c0     A7 12 02 FB | 	rdlong	arg01, fp
2f1c4     14 4E 85 F1 | 	sub	fp, #20
2f1c8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f1cc     0C 00 90 FD | 	jmp	#LR__4811
2f1d0                 | LR__4810
2f1d0                 | '     }
2f1d0                 | '     return x;
2f1d0     18 4E 05 F1 | 	add	fp, #24
2f1d4     A7 FA 01 FB | 	rdlong	result1, fp
2f1d8     18 4E 85 F1 | 	sub	fp, #24
2f1dc                 | LR__4811
2f1dc     A7 F0 03 F6 | 	mov	ptra, fp
2f1e0     B2 00 A0 FD | 	call	#popregs_
2f1e4                 | _fatfs_cc_v_write_ret
2f1e4     2D 00 64 FD | 	ret
2f1e8                 | 
2f1e8                 | _fatfs_cc_v_lseek
2f1e8     04 4A 05 F6 | 	mov	COUNT_, #4
2f1ec     A8 00 A0 FD | 	call	#pushregs_
2f1f0     0A 1F 02 F6 | 	mov	local01, arg02
2f1f4     0B 21 02 F6 | 	mov	local02, arg03
2f1f8     09 23 02 FB | 	rdlong	local03, arg01
2f1fc     02 00 00 FF 
2f200     14 22 0E F1 | 	add	local03, ##1044 wz
2f204                 | '         return _seterror( 5 );
2f204     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f208     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f20c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f210     01 FA 65 A6 |  if_e	neg	result1, #1
2f214     4C 00 90 AD |  if_e	jmp	#LR__4822
2f218     00 20 0E F2 | 	cmp	local02, #0 wz
2f21c     24 00 90 AD |  if_e	jmp	#LR__4820
2f220     01 20 0E F2 | 	cmp	local02, #1 wz
2f224     14 22 06 A1 |  if_e	add	local03, #20
2f228     11 25 02 AB |  if_e	rdlong	local04, local03
2f22c     14 22 86 A1 |  if_e	sub	local03, #20
2f230     12 1F 02 A1 |  if_e	add	local01, local04
2f234     0C 22 06 51 |  if_ne	add	local03, #12
2f238     11 25 02 5B |  if_ne	rdlong	local04, local03
2f23c     0C 22 86 51 |  if_ne	sub	local03, #12
2f240     12 1F 02 51 |  if_ne	add	local01, local04
2f244                 | LR__4820
2f244     0F 15 02 F6 | 	mov	arg02, local01
2f248     11 13 02 F6 | 	mov	arg01, local03
2f24c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f250     FD 12 0A F6 | 	mov	arg01, result1 wz
2f254     08 00 90 AD |  if_e	jmp	#LR__4821
2f258                 | '         return _set_dos_error(result);
2f258     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f25c     04 00 90 FD | 	jmp	#LR__4822
2f260                 | LR__4821
2f260                 | '     }
2f260                 | '     return offset;
2f260     0F FB 01 F6 | 	mov	result1, local01
2f264                 | LR__4822
2f264     A7 F0 03 F6 | 	mov	ptra, fp
2f268     B2 00 A0 FD | 	call	#popregs_
2f26c                 | _fatfs_cc_v_lseek_ret
2f26c     2D 00 64 FD | 	ret
2f270                 | 
2f270                 | _fatfs_cc_v_ioctl
2f270                 | ' {
2f270                 | '     return _seterror( 10 );
2f270     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f274     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f278     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f27c     01 FA 65 F6 | 	neg	result1, #1
2f280                 | _fatfs_cc_v_ioctl_ret
2f280     2D 00 64 FD | 	ret
2f284                 | 
2f284                 | _fatfs_cc_v_mkdir
2f284     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f288     FD 12 02 F6 | 	mov	arg01, result1
2f28c                 | ' 
2f28c                 | '     r = f_mkdir(name);
2f28c                 | '     return _set_dos_error(r);
2f28c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f290                 | _fatfs_cc_v_mkdir_ret
2f290     2D 00 64 FD | 	ret
2f294                 | 
2f294                 | _fatfs_cc_v_remove
2f294     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f298     FD 12 02 F6 | 	mov	arg01, result1
2f29c                 | ' 
2f29c                 | '     r = f_unlink(name);
2f29c                 | '     return _set_dos_error(r);
2f29c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2a0                 | _fatfs_cc_v_remove_ret
2f2a0     2D 00 64 FD | 	ret
2f2a4                 | 
2f2a4                 | _fatfs_cc_v_rmdir
2f2a4     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f2a8     FD 12 02 F6 | 	mov	arg01, result1
2f2ac                 | ' 
2f2ac                 | '     r = f_unlink(name);
2f2ac                 | '     return _set_dos_error(r);
2f2ac     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2b0                 | _fatfs_cc_v_rmdir_ret
2f2b0     2D 00 64 FD | 	ret
2f2b4                 | 
2f2b4                 | _fatfs_cc_v_rename
2f2b4     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f2b8     FD 12 02 F6 | 	mov	arg01, result1
2f2bc                 | '     return _set_dos_error(r);
2f2bc     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2c0                 | _fatfs_cc_v_rename_ret
2f2c0     2D 00 64 FD | 	ret
2f2c4                 | 
2f2c4                 | _fatfs_cc_v_open
2f2c4     07 4A 05 F6 | 	mov	COUNT_, #7
2f2c8     A8 00 A0 FD | 	call	#pushregs_
2f2cc     09 1F 02 F6 | 	mov	local01, arg01
2f2d0     0A 21 02 F6 | 	mov	local02, arg02
2f2d4     0B 23 02 F6 | 	mov	local03, arg03
2f2d8     03 00 00 FF 
2f2dc     3C 12 06 F6 | 	mov	arg01, ##1596
2f2e0                 | '     return _gc_alloc(size);
2f2e0     10 14 06 F6 | 	mov	arg02, #16
2f2e4     9C 56 BF FD | 	call	#__system___gc_doalloc
2f2e8     FD 24 0A F6 | 	mov	local04, result1 wz
2f2ec                 | '       return _seterror( 7 );
2f2ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f2f0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f2f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f2f8     01 FA 65 A6 |  if_e	neg	result1, #1
2f2fc     98 00 90 AD |  if_e	jmp	#LR__4836
2f300     12 13 02 F6 | 	mov	arg01, local04
2f304     00 14 06 F6 | 	mov	arg02, #0
2f308     03 00 00 FF 
2f30c     3C 16 06 F6 | 	mov	arg03, ##1596
2f310     98 00 A0 FD | 	call	#\builtin_bytefill_
2f314                 | '   switch (flags & 3) {
2f314     11 27 02 F6 | 	mov	local05, local03
2f318     03 26 0E F5 | 	and	local05, #3 wz
2f31c     0C 00 90 AD |  if_e	jmp	#LR__4830
2f320     01 26 0E F2 | 	cmp	local05, #1 wz
2f324     0C 00 90 AD |  if_e	jmp	#LR__4831
2f328     10 00 90 FD | 	jmp	#LR__4832
2f32c                 | LR__4830
2f32c     01 28 06 F6 | 	mov	local06, #1
2f330                 | '       fs_flags =  0x01 ;
2f330                 | '       break;
2f330     0C 00 90 FD | 	jmp	#LR__4833
2f334                 | LR__4831
2f334     02 28 06 F6 | 	mov	local06, #2
2f338                 | '       fs_flags =  0x02 ;
2f338                 | '       break;
2f338     04 00 90 FD | 	jmp	#LR__4833
2f33c                 | LR__4832
2f33c     03 28 06 F6 | 	mov	local06, #3
2f340                 | '       fs_flags =  0x01  |  0x02 ;
2f340                 | '       break;
2f340                 | LR__4833
2f340     08 22 CE F7 | 	test	local03, #8 wz
2f344     18 28 46 55 |  if_ne	or	local06, #24
2f348     08 00 90 5D |  if_ne	jmp	#LR__4834
2f34c     20 22 CE F7 | 	test	local03, #32 wz
2f350     30 28 46 55 |  if_ne	or	local06, #48
2f354                 | LR__4834
2f354     02 00 00 FF 
2f358     14 24 06 F1 | 	add	local04, ##1044
2f35c     12 13 02 F6 | 	mov	arg01, local04
2f360     02 00 00 FF 
2f364     14 24 86 F1 | 	sub	local04, ##1044
2f368     10 15 02 F6 | 	mov	arg02, local02
2f36c     14 17 02 F6 | 	mov	arg03, local06
2f370     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f374     FD 2A 0A F6 | 	mov	local07, result1 wz
2f378     14 00 90 AD |  if_e	jmp	#LR__4835
2f37c     12 13 02 F6 | 	mov	arg01, local04
2f380                 | '     return _gc_free(ptr);
2f380     0C 57 BF FD | 	call	#__system___gc_free
2f384                 | '     free(f);
2f384                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f384                 | '     return _set_dos_error(r);
2f384     15 13 02 F6 | 	mov	arg01, local07
2f388     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f38c     08 00 90 FD | 	jmp	#LR__4836
2f390                 | LR__4835
2f390     0F 25 62 FC | 	wrlong	local04, local01
2f394                 | '   }
2f394                 | '   fil->vfsdata = f;
2f394                 | '   return 0;
2f394     00 FA 05 F6 | 	mov	result1, #0
2f398                 | LR__4836
2f398     A7 F0 03 F6 | 	mov	ptra, fp
2f39c     B2 00 A0 FD | 	call	#popregs_
2f3a0                 | _fatfs_cc_v_open_ret
2f3a0     2D 00 64 FD | 	ret
2f3a4                 | 
2f3a4                 | _fatfs_cc_v_flush
2f3a4     09 13 02 FB | 	rdlong	arg01, arg01
2f3a8     02 00 00 FF 
2f3ac     14 12 0E F1 | 	add	arg01, ##1044 wz
2f3b0                 | '         return _seterror( 5 );
2f3b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f3b4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f3b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f3bc     01 FA 65 A6 |  if_e	neg	result1, #1
2f3c0     0C 00 90 AD |  if_e	jmp	#LR__4840
2f3c4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f3c8     FD 12 02 F6 | 	mov	arg01, result1
2f3cc                 | '     }
2f3cc                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f3cc                 | '     result = f_sync(f);
2f3cc                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f3cc                 | '     return _set_dos_error(result);
2f3cc     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f3d0                 | LR__4840
2f3d0                 | _fatfs_cc_v_flush_ret
2f3d0     2D 00 64 FD | 	ret
2f3d4                 | 
2f3d4                 | _fatfs_cc_v_init
2f3d4                 | ' {
2f3d4                 | '     return 0;
2f3d4     00 FA 05 F6 | 	mov	result1, #0
2f3d8                 | _fatfs_cc_v_init_ret
2f3d8     2D 00 64 FD | 	ret
2f3dc                 | 
2f3dc                 | _fatfs_cc_v_deinit
2f3dc     81 01 00 FF 
2f3e0     50 15 06 F6 | 	mov	arg02, ##@LR__5036
2f3e4     00 12 06 F6 | 	mov	arg01, #0
2f3e8     00 16 06 F6 | 	mov	arg03, #0
2f3ec     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f3f0     01 00 00 FF 
2f3f4     08 E4 05 F1 | 	add	objptr, ##520
2f3f8     F2 12 02 FB | 	rdlong	arg01, objptr
2f3fc     04 E4 05 F1 | 	add	objptr, #4
2f400     F2 14 02 FB | 	rdlong	arg02, objptr
2f404     01 00 00 FF 
2f408     0C E4 85 F1 | 	sub	objptr, ##524
2f40c     14 3E BF FD | 	call	#__system___freepins
2f410                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f410                 | '     _freepins(f_pinmask);
2f410                 | '     return 0;
2f410     00 FA 05 F6 | 	mov	result1, #0
2f414                 | _fatfs_cc_v_deinit_ret
2f414     2D 00 64 FD | 	ret
2f418                 | 
2f418                 | _fatfs_cc_get_vfs
2f418     01 4A 05 F6 | 	mov	COUNT_, #1
2f41c     A8 00 A0 FD | 	call	#pushregs_
2f420     09 1F 02 F6 | 	mov	local01, arg01
2f424     50 12 06 F6 | 	mov	arg01, #80
2f428     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f42c     FD 12 02 F6 | 	mov	arg01, result1
2f430     F2 FA 01 F6 | 	mov	result1, objptr
2f434     00 E8 04 FF 
2f438     00 FA 45 F5 | 	or	result1, ##164626432
2f43c     09 FB 61 FC | 	wrlong	result1, arg01
2f440     F2 FA 01 F6 | 	mov	result1, objptr
2f444     00 F0 04 FF 
2f448     00 FA 45 F5 | 	or	result1, ##165675008
2f44c     04 12 06 F1 | 	add	arg01, #4
2f450     09 FB 61 FC | 	wrlong	result1, arg01
2f454     F2 FA 01 F6 | 	mov	result1, objptr
2f458     00 F8 04 FF 
2f45c     00 FA 45 F5 | 	or	result1, ##166723584
2f460     04 12 06 F1 | 	add	arg01, #4
2f464     09 FB 61 FC | 	wrlong	result1, arg01
2f468     F2 FA 01 F6 | 	mov	result1, objptr
2f46c     00 00 05 FF 
2f470     00 FA 45 F5 | 	or	result1, ##167772160
2f474     04 12 06 F1 | 	add	arg01, #4
2f478     09 FB 61 FC | 	wrlong	result1, arg01
2f47c     F2 FA 01 F6 | 	mov	result1, objptr
2f480     00 08 05 FF 
2f484     00 FA 45 F5 | 	or	result1, ##168820736
2f488     04 12 06 F1 | 	add	arg01, #4
2f48c     09 FB 61 FC | 	wrlong	result1, arg01
2f490     04 12 06 F1 | 	add	arg01, #4
2f494     09 01 68 FC | 	wrlong	#0, arg01
2f498     04 12 06 F1 | 	add	arg01, #4
2f49c     09 1F 62 FC | 	wrlong	local01, arg01
2f4a0     04 12 06 F1 | 	add	arg01, #4
2f4a4     09 01 68 FC | 	wrlong	#0, arg01
2f4a8     F2 FA 01 F6 | 	mov	result1, objptr
2f4ac     00 10 05 FF 
2f4b0     00 FA 45 F5 | 	or	result1, ##169869312
2f4b4     04 12 06 F1 | 	add	arg01, #4
2f4b8     09 FB 61 FC | 	wrlong	result1, arg01
2f4bc     F2 FA 01 F6 | 	mov	result1, objptr
2f4c0     00 18 05 FF 
2f4c4     00 FA 45 F5 | 	or	result1, ##170917888
2f4c8     04 12 06 F1 | 	add	arg01, #4
2f4cc     09 FB 61 FC | 	wrlong	result1, arg01
2f4d0     F2 FA 01 F6 | 	mov	result1, objptr
2f4d4     00 20 05 FF 
2f4d8     00 FA 45 F5 | 	or	result1, ##171966464
2f4dc     04 12 06 F1 | 	add	arg01, #4
2f4e0     09 FB 61 FC | 	wrlong	result1, arg01
2f4e4     F2 FA 01 F6 | 	mov	result1, objptr
2f4e8     00 28 05 FF 
2f4ec     00 FA 45 F5 | 	or	result1, ##173015040
2f4f0     04 12 06 F1 | 	add	arg01, #4
2f4f4     09 FB 61 FC | 	wrlong	result1, arg01
2f4f8     F2 FA 01 F6 | 	mov	result1, objptr
2f4fc     00 30 05 FF 
2f500     00 FA 45 F5 | 	or	result1, ##174063616
2f504     04 12 06 F1 | 	add	arg01, #4
2f508     09 FB 61 FC | 	wrlong	result1, arg01
2f50c     F2 FA 01 F6 | 	mov	result1, objptr
2f510     00 38 05 FF 
2f514     00 FA 45 F5 | 	or	result1, ##175112192
2f518     04 12 06 F1 | 	add	arg01, #4
2f51c     09 FB 61 FC | 	wrlong	result1, arg01
2f520     F2 FA 01 F6 | 	mov	result1, objptr
2f524     00 40 05 FF 
2f528     00 FA 45 F5 | 	or	result1, ##176160768
2f52c     04 12 06 F1 | 	add	arg01, #4
2f530     09 FB 61 FC | 	wrlong	result1, arg01
2f534     F2 FA 01 F6 | 	mov	result1, objptr
2f538     00 48 05 FF 
2f53c     00 FA 45 F5 | 	or	result1, ##177209344
2f540     04 12 06 F1 | 	add	arg01, #4
2f544     09 FB 61 FC | 	wrlong	result1, arg01
2f548     F2 FA 01 F6 | 	mov	result1, objptr
2f54c     00 50 05 FF 
2f550     00 FA 45 F5 | 	or	result1, ##178257920
2f554     04 12 06 F1 | 	add	arg01, #4
2f558     09 FB 61 FC | 	wrlong	result1, arg01
2f55c     F2 FA 01 F6 | 	mov	result1, objptr
2f560     00 58 05 FF 
2f564     00 FA 45 F5 | 	or	result1, ##179306496
2f568     04 12 06 F1 | 	add	arg01, #4
2f56c     09 FB 61 FC | 	wrlong	result1, arg01
2f570     F2 FA 01 F6 | 	mov	result1, objptr
2f574     00 60 05 FF 
2f578     00 FA 45 F5 | 	or	result1, ##180355072
2f57c     04 12 06 F1 | 	add	arg01, #4
2f580     09 FB 61 FC | 	wrlong	result1, arg01
2f584     F2 FA 01 F6 | 	mov	result1, objptr
2f588     00 68 05 FF 
2f58c     00 FA 45 F5 | 	or	result1, ##181403648
2f590     04 12 06 F1 | 	add	arg01, #4
2f594     09 FB 61 FC | 	wrlong	result1, arg01
2f598     4C 12 86 F1 | 	sub	arg01, #76
2f59c                 | ' 
2f59c                 | '     v->close = &v_close;
2f59c                 | '     v->read = &v_read;
2f59c                 | '     v->write = &v_write;
2f59c                 | '     v->lseek = &v_lseek;
2f59c                 | '     v->ioctl = &v_ioctl;
2f59c                 | '     v->flush = 0;
2f59c                 | '     v->vfs_data = ptr;
2f59c                 | '     v->reserved = 0;
2f59c                 | ' 
2f59c                 | '     v->open = &v_open;
2f59c                 | '     v->creat = &v_creat;
2f59c                 | '     v->opendir = &v_opendir;
2f59c                 | '     v->closedir = &v_closedir;
2f59c                 | '     v->readdir = &v_readdir;
2f59c                 | '     v->stat = &v_stat;
2f59c                 | ' 
2f59c                 | '     v->mkdir = &v_mkdir;
2f59c                 | '     v->rmdir = &v_rmdir;
2f59c                 | ' 
2f59c                 | '     v->remove = &v_remove;
2f59c                 | '     v->rename = &v_rename;
2f59c                 | ' 
2f59c                 | '     v->init = &v_init;
2f59c                 | '     v->deinit = &v_deinit;
2f59c                 | ' 
2f59c                 | '     return v;
2f59c     09 FB 01 F6 | 	mov	result1, arg01
2f5a0     A7 F0 03 F6 | 	mov	ptra, fp
2f5a4     B2 00 A0 FD | 	call	#popregs_
2f5a8                 | _fatfs_cc_get_vfs_ret
2f5a8     2D 00 64 FD | 	ret
2f5ac                 | 
2f5ac                 | _fatfs_cc_xmit_mmc_1109
2f5ac     01 00 00 FF 
2f5b0     10 E4 05 F1 | 	add	objptr, ##528
2f5b4     F2 00 02 FB | 	rdlong	_var01, objptr
2f5b8     08 E4 05 F1 | 	add	objptr, #8
2f5bc     F2 02 02 FB | 	rdlong	_var02, objptr
2f5c0     01 00 00 FF 
2f5c4     18 E4 85 F1 | 	sub	objptr, ##536
2f5c8     40 02 62 FD | 	dirl	_var02
2f5cc     28 02 64 FD | 	setq	#1
2f5d0     09 05 02 FB | 	rdlong	_var03, arg01
2f5d4     69 04 62 FD | 	rev	_var03
2f5d8     1B 04 FE F9 | 	movbyts	_var03, #27
2f5dc     01 05 22 FC | 	wypin	_var03, _var02
2f5e0     0A 05 02 F6 | 	mov	_var03, arg02
2f5e4     02 14 4E F0 | 	shr	arg02, #2 wz
2f5e8     03 04 66 F0 | 	shl	_var03, #3
2f5ec     00 05 22 FC | 	wypin	_var03, _var01
2f5f0     41 02 62 FD | 	dirh	_var02
2f5f4     08 12 06 F1 | 	add	arg01, #8
2f5f8     69 06 62 FD | 	rev	_var04
2f5fc     1B 06 FE F9 | 	movbyts	_var04, #27
2f600                 | LR__4850
2f600     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f604     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f608     04 12 06 51 |  if_ne	add	arg01, #4
2f60c     69 06 62 5D |  if_ne	rev	_var04
2f610     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f614                 | LR__4851
2f614     40 02 72 5D |  if_ne	testp	_var02 wc
2f618     F8 FF 9F 1D |  if_a	jmp	#LR__4851
2f61c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4850
2f620                 | LR__4852
2f620     40 00 72 FD | 	testp	_var01 wc
2f624     F8 FF 9F 3D |  if_ae	jmp	#LR__4852
2f628     40 02 62 FD | 	dirl	_var02
2f62c     FF FF FF FF 
2f630     01 FF 2B FC | 	wypin	##-1, _var02
2f634     41 02 62 FD | 	dirh	_var02
2f638                 | _fatfs_cc_xmit_mmc_1109_ret
2f638     2D 00 64 FD | 	ret
2f63c                 | 
2f63c                 | _fatfs_cc_rcvr_mmc_1116
2f63c     01 00 00 FF 
2f640     10 E4 05 F1 | 	add	objptr, ##528
2f644     F2 00 02 FB | 	rdlong	_var01, objptr
2f648     0C E4 05 F1 | 	add	objptr, #12
2f64c     F2 02 02 FB | 	rdlong	_var02, objptr
2f650     01 00 00 FF 
2f654     1C E4 85 F1 | 	sub	objptr, ##540
2f658     01 03 08 FC | 	akpin	_var02
2f65c     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f660     02 04 4E F0 | 	shr	_var03, #2 wz
2f664     30 00 90 AD |  if_e	jmp	#LR__4862
2f668     02 07 02 F6 | 	mov	_var04, _var03
2f66c     05 06 66 F0 | 	shl	_var04, #5
2f670     00 07 22 FC | 	wypin	_var04, _var01
2f674     01 7F 18 FC | 	wxpin	#63, _var02
2f678                 | LR__4860
2f678                 | LR__4861
2f678     40 02 72 FD | 	testp	_var02 wc
2f67c     F8 FF 9F 3D |  if_ae	jmp	#LR__4861
2f680     01 07 8A FA | 	rdpin	_var04, _var02
2f684     69 06 62 FD | 	rev	_var04
2f688     1B 06 FE F9 | 	movbyts	_var04, #27
2f68c     09 07 62 FC | 	wrlong	_var04, arg01
2f690     04 12 06 F1 | 	add	arg01, #4
2f694     F8 05 6E FB | 	djnz	_var03, #LR__4860
2f698                 | LR__4862
2f698     03 14 0E F5 | 	and	arg02, #3 wz
2f69c     24 00 90 AD |  if_e	jmp	#LR__4865
2f6a0     01 4F 18 FC | 	wxpin	#39, _var02
2f6a4                 | LR__4863
2f6a4     00 11 28 FC | 	wypin	#8, _var01
2f6a8                 | LR__4864
2f6a8     40 02 72 FD | 	testp	_var02 wc
2f6ac     F8 FF 9F 3D |  if_ae	jmp	#LR__4864
2f6b0     01 07 8A FA | 	rdpin	_var04, _var02
2f6b4     69 06 62 FD | 	rev	_var04
2f6b8     09 07 42 FC | 	wrbyte	_var04, arg01
2f6bc     01 12 06 F1 | 	add	arg01, #1
2f6c0     F8 15 6E FB | 	djnz	arg02, #LR__4863
2f6c4                 | LR__4865
2f6c4                 | _fatfs_cc_rcvr_mmc_1116_ret
2f6c4     2D 00 64 FD | 	ret
2f6c8                 | 
2f6c8                 | _fatfs_cc_wait_ready_1120
2f6c8     01 4A 05 F6 | 	mov	COUNT_, #1
2f6cc     A8 00 A0 FD | 	call	#pushregs_
2f6d0     10 F0 07 F1 | 	add	ptra, #16
2f6d4     1A FA 61 FD | 	getct	result1
2f6d8     08 4E 05 F1 | 	add	fp, #8
2f6dc     A7 FA 61 FC | 	wrlong	result1, fp
2f6e0     14 1E 06 FB | 	rdlong	local01, #20
2f6e4     01 1E 46 F0 | 	shr	local01, #1
2f6e8     04 4E 05 F1 | 	add	fp, #4
2f6ec     A7 1E 62 FC | 	wrlong	local01, fp
2f6f0     0C 4E 85 F1 | 	sub	fp, #12
2f6f4                 | ' {
2f6f4                 | ' 	BYTE d;
2f6f4                 | ' 	UINT tmr, tmout;
2f6f4                 | ' 
2f6f4                 | ' 	tmr = _cnt();
2f6f4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f6f4                 | ' 	for(;;) {
2f6f4                 | LR__4870
2f6f4     04 4E 05 F1 | 	add	fp, #4
2f6f8     A7 12 02 F6 | 	mov	arg01, fp
2f6fc     04 4E 85 F1 | 	sub	fp, #4
2f700     01 14 06 F6 | 	mov	arg02, #1
2f704     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f708     04 4E 05 F1 | 	add	fp, #4
2f70c     A7 1E C2 FA | 	rdbyte	local01, fp
2f710     04 4E 85 F1 | 	sub	fp, #4
2f714     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f718     01 FA 05 A6 |  if_e	mov	result1, #1
2f71c     28 00 90 AD |  if_e	jmp	#LR__4871
2f720     1A FA 61 FD | 	getct	result1
2f724     08 4E 05 F1 | 	add	fp, #8
2f728     A7 1E 02 FB | 	rdlong	local01, fp
2f72c     0F FB 81 F1 | 	sub	result1, local01
2f730     04 4E 05 F1 | 	add	fp, #4
2f734     A7 1E 02 FB | 	rdlong	local01, fp
2f738     0C 4E 85 F1 | 	sub	fp, #12
2f73c     0F FB 11 F2 | 	cmp	result1, local01 wc
2f740     00 FA 05 36 |  if_ae	mov	result1, #0
2f744     AC FF 9F CD |  if_b	jmp	#LR__4870
2f748                 | LR__4871
2f748     A7 F0 03 F6 | 	mov	ptra, fp
2f74c     B2 00 A0 FD | 	call	#popregs_
2f750                 | _fatfs_cc_wait_ready_1120_ret
2f750     2D 00 64 FD | 	ret
2f754                 | 
2f754                 | _fatfs_cc_deselect_1126
2f754     00 4A 05 F6 | 	mov	COUNT_, #0
2f758     A8 00 A0 FD | 	call	#pushregs_
2f75c     14 F0 07 F1 | 	add	ptra, #20
2f760     01 00 00 FF 
2f764     14 E4 05 F1 | 	add	objptr, ##532
2f768     F2 14 02 FB | 	rdlong	arg02, objptr
2f76c     04 4E 05 F1 | 	add	fp, #4
2f770     A7 14 62 FC | 	wrlong	arg02, fp
2f774     04 E4 85 F1 | 	sub	objptr, #4
2f778     F2 14 02 FB | 	rdlong	arg02, objptr
2f77c     04 4E 05 F1 | 	add	fp, #4
2f780     A7 14 62 FC | 	wrlong	arg02, fp
2f784     08 E4 05 F1 | 	add	objptr, #8
2f788     F2 14 02 FB | 	rdlong	arg02, objptr
2f78c     04 4E 05 F1 | 	add	fp, #4
2f790     A7 14 62 FC | 	wrlong	arg02, fp
2f794     04 E4 05 F1 | 	add	objptr, #4
2f798     F2 14 02 FB | 	rdlong	arg02, objptr
2f79c     01 00 00 FF 
2f7a0     1C E4 85 F1 | 	sub	objptr, ##540
2f7a4     04 4E 05 F1 | 	add	fp, #4
2f7a8     A7 14 62 FC | 	wrlong	arg02, fp
2f7ac     0C 4E 85 F1 | 	sub	fp, #12
2f7b0     A7 12 02 FB | 	rdlong	arg01, fp
2f7b4     04 4E 85 F1 | 	sub	fp, #4
2f7b8     59 12 62 FD | 	drvh	arg01
2f7bc     1F 20 64 FD | 	waitx	#16
2f7c0     A7 12 02 F6 | 	mov	arg01, fp
2f7c4     01 14 06 F6 | 	mov	arg02, #1
2f7c8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7cc     A7 F0 03 F6 | 	mov	ptra, fp
2f7d0     B2 00 A0 FD | 	call	#popregs_
2f7d4                 | _fatfs_cc_deselect_1126_ret
2f7d4     2D 00 64 FD | 	ret
2f7d8                 | 
2f7d8                 | _fatfs_cc_select_1130
2f7d8     00 4A 05 F6 | 	mov	COUNT_, #0
2f7dc     A8 00 A0 FD | 	call	#pushregs_
2f7e0     10 F0 07 F1 | 	add	ptra, #16
2f7e4     01 00 00 FF 
2f7e8     14 E4 05 F1 | 	add	objptr, ##532
2f7ec     F2 14 02 FB | 	rdlong	arg02, objptr
2f7f0     08 4E 05 F1 | 	add	fp, #8
2f7f4     A7 14 62 FC | 	wrlong	arg02, fp
2f7f8     08 E4 05 F1 | 	add	objptr, #8
2f7fc     F2 12 02 FB | 	rdlong	arg01, objptr
2f800     01 00 00 FF 
2f804     1C E4 85 F1 | 	sub	objptr, ##540
2f808     04 4E 05 F1 | 	add	fp, #4
2f80c     A7 12 62 FC | 	wrlong	arg01, fp
2f810     50 12 62 FD | 	fltl	arg01
2f814     04 4E 85 F1 | 	sub	fp, #4
2f818     A7 12 02 FB | 	rdlong	arg01, fp
2f81c     58 12 62 FD | 	drvl	arg01
2f820     1F 20 64 FD | 	waitx	#16
2f824     04 4E 05 F1 | 	add	fp, #4
2f828     A7 12 02 FB | 	rdlong	arg01, fp
2f82c     41 12 62 FD | 	dirh	arg01
2f830     08 4E 85 F1 | 	sub	fp, #8
2f834     A7 12 02 F6 | 	mov	arg01, fp
2f838     04 4E 85 F1 | 	sub	fp, #4
2f83c     01 14 06 F6 | 	mov	arg02, #1
2f840     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f844     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f848     00 FA 0D F2 | 	cmp	result1, #0 wz
2f84c     01 FA 05 56 |  if_ne	mov	result1, #1
2f850     08 00 90 5D |  if_ne	jmp	#LR__4880
2f854     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f858                 | ' 
2f858                 | ' 	deselect();
2f858                 | ' 	return 0;
2f858     00 FA 05 F6 | 	mov	result1, #0
2f85c                 | LR__4880
2f85c     A7 F0 03 F6 | 	mov	ptra, fp
2f860     B2 00 A0 FD | 	call	#popregs_
2f864                 | _fatfs_cc_select_1130_ret
2f864     2D 00 64 FD | 	ret
2f868                 | 
2f868                 | _fatfs_cc_rcvr_datablock_1134
2f868     01 4A 05 F6 | 	mov	COUNT_, #1
2f86c     A8 00 A0 FD | 	call	#pushregs_
2f870     18 F0 07 F1 | 	add	ptra, #24
2f874     04 4E 05 F1 | 	add	fp, #4
2f878     A7 12 62 FC | 	wrlong	arg01, fp
2f87c     04 4E 05 F1 | 	add	fp, #4
2f880     A7 14 62 FC | 	wrlong	arg02, fp
2f884     1A FA 61 FD | 	getct	result1
2f888     08 4E 05 F1 | 	add	fp, #8
2f88c     A7 FA 61 FC | 	wrlong	result1, fp
2f890     14 1E 06 FB | 	rdlong	local01, #20
2f894     03 1E 46 F0 | 	shr	local01, #3
2f898     04 4E 05 F1 | 	add	fp, #4
2f89c     A7 1E 62 FC | 	wrlong	local01, fp
2f8a0     14 4E 85 F1 | 	sub	fp, #20
2f8a4                 | ' 	BYTE *buff,
2f8a4                 | ' 	UINT btr
2f8a4                 | ' )
2f8a4                 | ' {
2f8a4                 | ' 	BYTE d[2];
2f8a4                 | ' 	UINT tmr, tmout;
2f8a4                 | ' 
2f8a4                 | ' 	tmr = _cnt();
2f8a4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f8a4                 | ' 	for(;;) {
2f8a4                 | LR__4890
2f8a4     0C 4E 05 F1 | 	add	fp, #12
2f8a8     A7 12 02 F6 | 	mov	arg01, fp
2f8ac     0C 4E 85 F1 | 	sub	fp, #12
2f8b0     01 14 06 F6 | 	mov	arg02, #1
2f8b4     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8b8     0C 4E 05 F1 | 	add	fp, #12
2f8bc     A7 1E C2 FA | 	rdbyte	local01, fp
2f8c0     0C 4E 85 F1 | 	sub	fp, #12
2f8c4     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f8c8     28 00 90 5D |  if_ne	jmp	#LR__4891
2f8cc     1A FA 61 FD | 	getct	result1
2f8d0     FD 1E 02 F6 | 	mov	local01, result1
2f8d4     10 4E 05 F1 | 	add	fp, #16
2f8d8     A7 14 02 FB | 	rdlong	arg02, fp
2f8dc     0A 1F 82 F1 | 	sub	local01, arg02
2f8e0     04 4E 05 F1 | 	add	fp, #4
2f8e4     A7 14 02 FB | 	rdlong	arg02, fp
2f8e8     14 4E 85 F1 | 	sub	fp, #20
2f8ec     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f8f0     B0 FF 9F CD |  if_b	jmp	#LR__4890
2f8f4                 | LR__4891
2f8f4     0C 4E 05 F1 | 	add	fp, #12
2f8f8     A7 1E C2 FA | 	rdbyte	local01, fp
2f8fc     0C 4E 85 F1 | 	sub	fp, #12
2f900     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f904     00 FA 05 56 |  if_ne	mov	result1, #0
2f908     30 00 90 5D |  if_ne	jmp	#LR__4892
2f90c     04 4E 05 F1 | 	add	fp, #4
2f910     A7 12 02 FB | 	rdlong	arg01, fp
2f914     04 4E 05 F1 | 	add	fp, #4
2f918     A7 14 02 FB | 	rdlong	arg02, fp
2f91c     08 4E 85 F1 | 	sub	fp, #8
2f920     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f924     0C 4E 05 F1 | 	add	fp, #12
2f928     A7 12 02 F6 | 	mov	arg01, fp
2f92c     0C 4E 85 F1 | 	sub	fp, #12
2f930     02 14 06 F6 | 	mov	arg02, #2
2f934     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f938                 | ' 
2f938                 | ' 	rcvr_mmc(buff, btr);
2f938                 | ' 	rcvr_mmc(d, 2);
2f938                 | ' 
2f938                 | ' 	return 1;
2f938     01 FA 05 F6 | 	mov	result1, #1
2f93c                 | LR__4892
2f93c     A7 F0 03 F6 | 	mov	ptra, fp
2f940     B2 00 A0 FD | 	call	#popregs_
2f944                 | _fatfs_cc_rcvr_datablock_1134_ret
2f944     2D 00 64 FD | 	ret
2f948                 | 
2f948                 | _fatfs_cc_xmit_datablock_1136
2f948     00 4A 05 F6 | 	mov	COUNT_, #0
2f94c     A8 00 A0 FD | 	call	#pushregs_
2f950     10 F0 07 F1 | 	add	ptra, #16
2f954     04 4E 05 F1 | 	add	fp, #4
2f958     A7 12 62 FC | 	wrlong	arg01, fp
2f95c     04 4E 05 F1 | 	add	fp, #4
2f960     A7 14 42 FC | 	wrbyte	arg02, fp
2f964     08 4E 85 F1 | 	sub	fp, #8
2f968     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f96c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f970     00 FA 05 A6 |  if_e	mov	result1, #0
2f974     90 00 90 AD |  if_e	jmp	#LR__4901
2f978     08 4E 05 F1 | 	add	fp, #8
2f97c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f980     04 4E 05 F1 | 	add	fp, #4
2f984     A7 14 42 FC | 	wrbyte	arg02, fp
2f988     A7 12 02 F6 | 	mov	arg01, fp
2f98c     0C 4E 85 F1 | 	sub	fp, #12
2f990     01 14 06 F6 | 	mov	arg02, #1
2f994     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f998     08 4E 05 F1 | 	add	fp, #8
2f99c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9a0     08 4E 85 F1 | 	sub	fp, #8
2f9a4     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f9a8     58 00 90 AD |  if_e	jmp	#LR__4900
2f9ac     04 4E 05 F1 | 	add	fp, #4
2f9b0     A7 12 02 FB | 	rdlong	arg01, fp
2f9b4     04 4E 85 F1 | 	sub	fp, #4
2f9b8     09 14 C6 F9 | 	decod	arg02, #9
2f9bc     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f9c0     0C 4E 05 F1 | 	add	fp, #12
2f9c4     A7 12 02 F6 | 	mov	arg01, fp
2f9c8     0C 4E 85 F1 | 	sub	fp, #12
2f9cc     02 14 06 F6 | 	mov	arg02, #2
2f9d0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f9d4     0C 4E 05 F1 | 	add	fp, #12
2f9d8     A7 12 02 F6 | 	mov	arg01, fp
2f9dc     0C 4E 85 F1 | 	sub	fp, #12
2f9e0     01 14 06 F6 | 	mov	arg02, #1
2f9e4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f9e8     0C 4E 05 F1 | 	add	fp, #12
2f9ec     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9f0     0C 4E 85 F1 | 	sub	fp, #12
2f9f4     1F 14 06 F5 | 	and	arg02, #31
2f9f8     05 14 0E F2 | 	cmp	arg02, #5 wz
2f9fc                 | ' 			return 0;
2f9fc     00 FA 05 56 |  if_ne	mov	result1, #0
2fa00     04 00 90 5D |  if_ne	jmp	#LR__4901
2fa04                 | LR__4900
2fa04                 | ' 	}
2fa04                 | ' 
2fa04                 | ' 	return 1;
2fa04     01 FA 05 F6 | 	mov	result1, #1
2fa08                 | LR__4901
2fa08     A7 F0 03 F6 | 	mov	ptra, fp
2fa0c     B2 00 A0 FD | 	call	#popregs_
2fa10                 | _fatfs_cc_xmit_datablock_1136_ret
2fa10     2D 00 64 FD | 	ret
2fa14                 | 
2fa14                 | _fatfs_cc_send_cmd_1140
2fa14     01 4A 05 F6 | 	mov	COUNT_, #1
2fa18     A8 00 A0 FD | 	call	#pushregs_
2fa1c     1C F0 07 F1 | 	add	ptra, #28
2fa20                 | _fatfs_cc_send_cmd_1140_enter
2fa20     04 4E 05 F1 | 	add	fp, #4
2fa24     A7 12 42 FC | 	wrbyte	arg01, fp
2fa28     04 4E 05 F1 | 	add	fp, #4
2fa2c     A7 14 62 FC | 	wrlong	arg02, fp
2fa30     04 4E 85 F1 | 	sub	fp, #4
2fa34     A7 FA C1 FA | 	rdbyte	result1, fp
2fa38     04 4E 85 F1 | 	sub	fp, #4
2fa3c     80 FA CD F7 | 	test	result1, #128 wz
2fa40     44 00 90 AD |  if_e	jmp	#LR__4910
2fa44     04 4E 05 F1 | 	add	fp, #4
2fa48     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa4c     7F 14 06 F5 | 	and	arg02, #127
2fa50     A7 14 42 FC | 	wrbyte	arg02, fp
2fa54     04 4E 85 F1 | 	sub	fp, #4
2fa58     37 12 06 F6 | 	mov	arg01, #55
2fa5c     00 14 06 F6 | 	mov	arg02, #0
2fa60     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2fa64     0C 4E 05 F1 | 	add	fp, #12
2fa68     A7 FA 41 FC | 	wrbyte	result1, fp
2fa6c     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa70     0C 4E 85 F1 | 	sub	fp, #12
2fa74     02 14 16 F2 | 	cmp	arg02, #2 wc
2fa78     0C 4E 05 31 |  if_ae	add	fp, #12
2fa7c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2fa80     0C 4E 85 31 |  if_ae	sub	fp, #12
2fa84     6C 01 90 3D |  if_ae	jmp	#LR__4914
2fa88                 | LR__4910
2fa88     04 4E 05 F1 | 	add	fp, #4
2fa8c     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa90     04 4E 85 F1 | 	sub	fp, #4
2fa94     0C 14 0E F2 | 	cmp	arg02, #12 wz
2fa98     14 00 90 AD |  if_e	jmp	#LR__4911
2fa9c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2faa0     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2faa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2faa8     FF FA 05 A6 |  if_e	mov	result1, #255
2faac     44 01 90 AD |  if_e	jmp	#LR__4914
2fab0                 | LR__4911
2fab0     04 4E 05 F1 | 	add	fp, #4
2fab4     A7 14 C2 FA | 	rdbyte	arg02, fp
2fab8     40 FA 05 F6 | 	mov	result1, #64
2fabc     0A FB 41 F5 | 	or	result1, arg02
2fac0     10 4E 05 F1 | 	add	fp, #16
2fac4     A7 FA 41 FC | 	wrbyte	result1, fp
2fac8     0C 4E 85 F1 | 	sub	fp, #12
2facc     A7 FA 01 FB | 	rdlong	result1, fp
2fad0     18 FA 45 F0 | 	shr	result1, #24
2fad4     0D 4E 05 F1 | 	add	fp, #13
2fad8     A7 FA 41 FC | 	wrbyte	result1, fp
2fadc     0D 4E 85 F1 | 	sub	fp, #13
2fae0     A7 FA 01 FB | 	rdlong	result1, fp
2fae4     10 FA 45 F0 | 	shr	result1, #16
2fae8     0E 4E 05 F1 | 	add	fp, #14
2faec     A7 FA 41 FC | 	wrbyte	result1, fp
2faf0     0E 4E 85 F1 | 	sub	fp, #14
2faf4     A7 FA 01 FB | 	rdlong	result1, fp
2faf8     08 FA 45 F0 | 	shr	result1, #8
2fafc     0F 4E 05 F1 | 	add	fp, #15
2fb00     A7 FA 41 FC | 	wrbyte	result1, fp
2fb04     0F 4E 85 F1 | 	sub	fp, #15
2fb08     A7 FA 01 FB | 	rdlong	result1, fp
2fb0c     10 4E 05 F1 | 	add	fp, #16
2fb10     A7 FA 41 FC | 	wrbyte	result1, fp
2fb14     0C 4E 85 F1 | 	sub	fp, #12
2fb18     A7 02 48 FC | 	wrbyte	#1, fp
2fb1c     08 4E 85 F1 | 	sub	fp, #8
2fb20     A7 FA C9 FA | 	rdbyte	result1, fp wz
2fb24     04 4E 85 F1 | 	sub	fp, #4
2fb28     0C 4E 05 A1 |  if_e	add	fp, #12
2fb2c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fb30     0C 4E 85 A1 |  if_e	sub	fp, #12
2fb34     04 4E 05 F1 | 	add	fp, #4
2fb38     A7 FA C1 FA | 	rdbyte	result1, fp
2fb3c     04 4E 85 F1 | 	sub	fp, #4
2fb40     08 FA 0D F2 | 	cmp	result1, #8 wz
2fb44     0C 4E 05 A1 |  if_e	add	fp, #12
2fb48     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fb4c     0C 4E 85 A1 |  if_e	sub	fp, #12
2fb50     0C 4E 05 F1 | 	add	fp, #12
2fb54     A7 14 C2 FA | 	rdbyte	arg02, fp
2fb58     0D 4E 05 F1 | 	add	fp, #13
2fb5c     A7 14 42 FC | 	wrbyte	arg02, fp
2fb60     05 4E 85 F1 | 	sub	fp, #5
2fb64     A7 12 02 F6 | 	mov	arg01, fp
2fb68     14 4E 85 F1 | 	sub	fp, #20
2fb6c     06 14 06 F6 | 	mov	arg02, #6
2fb70     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fb74     04 4E 05 F1 | 	add	fp, #4
2fb78     A7 1E C2 FA | 	rdbyte	local01, fp
2fb7c     04 4E 85 F1 | 	sub	fp, #4
2fb80     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fb84     10 4E 05 A1 |  if_e	add	fp, #16
2fb88     A7 12 02 A6 |  if_e	mov	arg01, fp
2fb8c     10 4E 85 A1 |  if_e	sub	fp, #16
2fb90     01 14 06 A6 |  if_e	mov	arg02, #1
2fb94     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fb98     0C 4E 05 F1 | 	add	fp, #12
2fb9c     A7 14 48 FC | 	wrbyte	#10, fp
2fba0     0C 4E 85 F1 | 	sub	fp, #12
2fba4                 | ' 	n = 10;
2fba4                 | ' 	do
2fba4                 | LR__4912
2fba4     10 4E 05 F1 | 	add	fp, #16
2fba8     A7 12 02 F6 | 	mov	arg01, fp
2fbac     10 4E 85 F1 | 	sub	fp, #16
2fbb0     01 14 06 F6 | 	mov	arg02, #1
2fbb4     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fbb8     10 4E 05 F1 | 	add	fp, #16
2fbbc     A7 1E C2 FA | 	rdbyte	local01, fp
2fbc0     10 4E 85 F1 | 	sub	fp, #16
2fbc4     80 1E CE F7 | 	test	local01, #128 wz
2fbc8     1C 00 90 AD |  if_e	jmp	#LR__4913
2fbcc     0C 4E 05 F1 | 	add	fp, #12
2fbd0     A7 1E C2 FA | 	rdbyte	local01, fp
2fbd4     01 1E 86 F1 | 	sub	local01, #1
2fbd8     A7 1E 42 FC | 	wrbyte	local01, fp
2fbdc     A7 1E CA FA | 	rdbyte	local01, fp wz
2fbe0     0C 4E 85 F1 | 	sub	fp, #12
2fbe4     BC FF 9F 5D |  if_ne	jmp	#LR__4912
2fbe8                 | LR__4913
2fbe8                 | ' 
2fbe8                 | ' 	return d;
2fbe8     10 4E 05 F1 | 	add	fp, #16
2fbec     A7 FA C1 FA | 	rdbyte	result1, fp
2fbf0     10 4E 85 F1 | 	sub	fp, #16
2fbf4                 | LR__4914
2fbf4     A7 F0 03 F6 | 	mov	ptra, fp
2fbf8     B2 00 A0 FD | 	call	#popregs_
2fbfc                 | _fatfs_cc_send_cmd_1140_ret
2fbfc     2D 00 64 FD | 	ret
2fc00                 | 
2fc00                 | _fatfs_cc_disk_deinitialize
2fc00     03 4A 05 F6 | 	mov	COUNT_, #3
2fc04     A8 00 A0 FD | 	call	#pushregs_
2fc08     00 12 4E F2 | 	cmps	arg01, #0 wz
2fc0c     01 00 00 FF 
2fc10     14 E4 05 F1 | 	add	objptr, ##532
2fc14     F2 12 02 FB | 	rdlong	arg01, objptr
2fc18     04 E4 85 F1 | 	sub	objptr, #4
2fc1c     F2 1E 02 FB | 	rdlong	local01, objptr
2fc20     08 E4 05 F1 | 	add	objptr, #8
2fc24     F2 20 02 FB | 	rdlong	local02, objptr
2fc28     04 E4 05 F1 | 	add	objptr, #4
2fc2c     F2 22 02 FB | 	rdlong	local03, objptr
2fc30     01 00 00 FF 
2fc34     1C E4 85 F1 | 	sub	objptr, ##540
2fc38                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fc38                 | '         return RES_NOTRDY;
2fc38     03 FA 05 56 |  if_ne	mov	result1, #3
2fc3c     2C 00 90 5D |  if_ne	jmp	#LR__4920
2fc40     50 12 62 FD | 	fltl	arg01
2fc44     09 01 08 FC | 	wrpin	#0, arg01
2fc48     50 1E 62 FD | 	fltl	local01
2fc4c     0F 01 08 FC | 	wrpin	#0, local01
2fc50     50 20 62 FD | 	fltl	local02
2fc54     10 01 08 FC | 	wrpin	#0, local02
2fc58     50 22 62 FD | 	fltl	local03
2fc5c     11 01 08 FC | 	wrpin	#0, local03
2fc60     0A 12 06 F6 | 	mov	arg01, #10
2fc64     28 11 BF FD | 	call	#__system___waitms
2fc68                 | '     }
2fc68                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fc68                 | '     _pinclear(PIN_SS);
2fc68                 | '     _pinclear(PIN_CLK);
2fc68                 | '     _pinclear(PIN_DI);
2fc68                 | '     _pinclear(PIN_DO);
2fc68                 | ' 
2fc68                 | '     _waitms(10);
2fc68                 | ' 
2fc68                 | '     return 0;
2fc68     00 FA 05 F6 | 	mov	result1, #0
2fc6c                 | LR__4920
2fc6c     A7 F0 03 F6 | 	mov	ptra, fp
2fc70     B2 00 A0 FD | 	call	#popregs_
2fc74                 | _fatfs_cc_disk_deinitialize_ret
2fc74     2D 00 64 FD | 	ret
2fc78                 | 
2fc78                 | _fatfs_cc_gettimeofday
2fc78     04 4A 05 F6 | 	mov	COUNT_, #4
2fc7c     A8 00 A0 FD | 	call	#pushregs_
2fc80     09 1F 02 F6 | 	mov	local01, arg01
2fc84     E4 0C BF FD | 	call	#__system___getus
2fc88     FD 12 02 F6 | 	mov	arg01, result1
2fc8c     02 00 00 FF 
2fc90     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fc94     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fc98     09 FB 01 F6 | 	mov	result1, arg01
2fc9c     10 FB 81 F1 | 	sub	result1, local02
2fca0     A1 07 00 FF 
2fca4     40 FA 15 FD | 	qdiv	result1, ##1000000
2fca8     02 00 00 FF 
2fcac     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fcb0     18 20 62 FD | 	getqx	local02
2fcb4     A1 07 00 FF 
2fcb8     40 FA 15 FD | 	qdiv	result1, ##1000000
2fcbc     00 20 0E F2 | 	cmp	local02, #0 wz
2fcc0     19 22 62 FD | 	getqy	local03
2fcc4     28 00 90 AD |  if_e	jmp	#LR__4930
2fcc8     02 00 00 FF 
2fccc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fcd0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fcd4     10 25 02 F1 | 	add	local04, local02
2fcd8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fcdc     11 13 82 F1 | 	sub	arg01, local03
2fce0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fce4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fce8     02 00 00 FF 
2fcec     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fcf0                 | LR__4930
2fcf0     02 00 00 FF 
2fcf4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fcf8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fcfc     02 00 00 FF 
2fd00     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fd04     0F 25 62 FC | 	wrlong	local04, local01
2fd08     04 1E 06 F1 | 	add	local01, #4
2fd0c     0F 23 62 FC | 	wrlong	local03, local01
2fd10                 | '         lastsec += secs;
2fd10                 | '         lastus = now - leftover;
2fd10                 | '     }
2fd10                 | '     tv->tv_sec = lastsec;
2fd10                 | '     tv->tv_usec = leftover;
2fd10                 | '     return 0;
2fd10     00 FA 05 F6 | 	mov	result1, #0
2fd14     A7 F0 03 F6 | 	mov	ptra, fp
2fd18     B2 00 A0 FD | 	call	#popregs_
2fd1c                 | _fatfs_cc_gettimeofday_ret
2fd1c     2D 00 64 FD | 	ret
2fd20                 | 
2fd20                 | _fatfs_cc__is_leap_year
2fd20     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd24     03 FA 05 F5 | 	and	result1, #3
2fd28     FD FA 89 F6 | 	negc	result1, result1 wz
2fd2c     38 00 90 5D |  if_ne	jmp	#LR__4941
2fd30     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd34     64 FA 15 FD | 	qdiv	result1, #100
2fd38     19 FA 61 FD | 	getqy	result1
2fd3c     FD FA 89 F6 | 	negc	result1, result1 wz
2fd40     1C 00 90 5D |  if_ne	jmp	#LR__4940
2fd44     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd48     90 FB 15 FD | 	qdiv	result1, #400
2fd4c                 | '       return (0 == y % 400);
2fd4c     00 FA 05 F6 | 	mov	result1, #0
2fd50     19 00 62 FD | 	getqy	_var01
2fd54     00 01 8A F6 | 	negc	_var01, _var01 wz
2fd58     01 FA 05 A6 |  if_e	mov	result1, #1
2fd5c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fd60                 | LR__4940
2fd60                 | '     return 1;
2fd60     01 FA 05 F6 | 	mov	result1, #1
2fd64     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fd68                 | LR__4941
2fd68                 | '   }
2fd68                 | '   return 0;
2fd68     00 FA 05 F6 | 	mov	result1, #0
2fd6c                 | _fatfs_cc__is_leap_year_ret
2fd6c     2D 00 64 FD | 	ret
2fd70                 | 
2fd70                 | _fatfs_cc___tzoffset
2fd70     09 01 0A F6 | 	mov	_var01, arg01 wz
2fd74     FF FF FF FF 
2fd78     0A FF 6B FC | 	wrlong	##-1, arg02
2fd7c     01 02 06 F6 | 	mov	_var02, #1
2fd80     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fd84                 | '                 return 0;
2fd84     00 FA 05 A6 |  if_e	mov	result1, #0
2fd88     94 02 90 AD |  if_e	jmp	#LR__4967
2fd8c     0A 01 68 FC | 	wrlong	#0, arg02
2fd90     02 00 00 FF 
2fd94     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd98     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fd9c                 | ' 
2fd9c                 | '        *hasdst = 0;
2fd9c                 | ' 
2fd9c                 | ' 	n = stdname;
2fd9c                 | '         while (*s && isalpha(*s)) {
2fd9c     02 00 00 FF 
2fda0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fda4     97 28 48 FB | 	callpa	#(@LR__4951-@LR__4950)>>2,fcache_load_ptr_
2fda8                 | LR__4950
2fda8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fdac     48 00 90 AD |  if_e	jmp	#LR__4952
2fdb0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fdb4                 | ' {
2fdb4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fdb4     80 12 36 F3 | 	fle	arg01, #128 wc
2fdb8                 | '     return __ctype[c];
2fdb8     02 00 00 FF 
2fdbc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fdc0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fdc4     09 FB C1 FA | 	rdbyte	result1, arg01
2fdc8     02 00 00 FF 
2fdcc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fdd0     0C FA CD F7 | 	test	result1, #12 wz
2fdd4     20 00 90 AD |  if_e	jmp	#LR__4952
2fdd8     00 09 02 F6 | 	mov	_var05, _var01
2fddc     00 0B 02 F6 | 	mov	_var06, _var01
2fde0     01 0A 06 F1 | 	add	_var06, #1
2fde4     04 0D C2 FA | 	rdbyte	_var07, _var05
2fde8     05 01 02 F6 | 	mov	_var01, _var06
2fdec     03 0D 42 FC | 	wrbyte	_var07, _var04
2fdf0     01 06 06 F1 | 	add	_var04, #1
2fdf4     B0 FF 9F FD | 	jmp	#LR__4950
2fdf8                 | LR__4951
2fdf8                 | LR__4952
2fdf8     03 01 48 FC | 	wrbyte	#0, _var04
2fdfc     00 0E 06 F6 | 	mov	_var08, #0
2fe00     00 05 C2 FA | 	rdbyte	_var03, _var01
2fe04     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fe08     01 02 66 A6 |  if_e	neg	_var02, #1
2fe0c     01 00 06 A1 |  if_e	add	_var01, #1
2fe10     97 28 48 FB | 	callpa	#(@LR__4954-@LR__4953)>>2,fcache_load_ptr_
2fe14                 | '                 sgn = -1;
2fe14                 | '                 s++;
2fe14                 | '         }
2fe14                 | '         while (isdigit(*s)) {
2fe14                 | LR__4953
2fe14     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe18                 | ' {
2fe18                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fe18     80 12 36 F3 | 	fle	arg01, #128 wc
2fe1c                 | '     return __ctype[c];
2fe1c     02 00 00 FF 
2fe20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe28     09 FB C1 FA | 	rdbyte	result1, arg01
2fe2c     02 00 00 FF 
2fe30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe34     02 FA CD F7 | 	test	result1, #2 wz
2fe38     28 00 90 AD |  if_e	jmp	#LR__4955
2fe3c     07 05 02 F6 | 	mov	_var03, _var08
2fe40     02 04 66 F0 | 	shl	_var03, #2
2fe44     07 05 02 F1 | 	add	_var03, _var08
2fe48     01 04 66 F0 | 	shl	_var03, #1
2fe4c     00 09 C2 FA | 	rdbyte	_var05, _var01
2fe50     30 08 86 F1 | 	sub	_var05, #48
2fe54     04 05 02 F1 | 	add	_var03, _var05
2fe58     02 0F 02 F6 | 	mov	_var08, _var03
2fe5c     01 00 06 F1 | 	add	_var01, #1
2fe60     B0 FF 9F FD | 	jmp	#LR__4953
2fe64                 | LR__4954
2fe64                 | LR__4955
2fe64     07 00 00 FF 
2fe68     10 0E 06 FD | 	qmul	_var08, ##3600
2fe6c     00 05 C2 FA | 	rdbyte	_var03, _var01
2fe70     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fe74     18 10 62 FD | 	getqx	_var09
2fe78     70 00 90 5D |  if_ne	jmp	#LR__4959
2fe7c     00 0E 06 F6 | 	mov	_var08, #0
2fe80     01 00 06 F1 | 	add	_var01, #1
2fe84     97 28 48 FB | 	callpa	#(@LR__4957-@LR__4956)>>2,fcache_load_ptr_
2fe88                 | '                 x = 0;
2fe88                 | '                 s++;
2fe88                 | '                 while (isdigit(*s)) {
2fe88                 | LR__4956
2fe88     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe8c                 | ' {
2fe8c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fe8c     80 12 36 F3 | 	fle	arg01, #128 wc
2fe90                 | '     return __ctype[c];
2fe90     02 00 00 FF 
2fe94     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe98     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe9c     09 FB C1 FA | 	rdbyte	result1, arg01
2fea0     02 00 00 FF 
2fea4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fea8     02 FA CD F7 | 	test	result1, #2 wz
2feac     28 00 90 AD |  if_e	jmp	#LR__4958
2feb0     07 05 02 F6 | 	mov	_var03, _var08
2feb4     02 04 66 F0 | 	shl	_var03, #2
2feb8     07 05 02 F1 | 	add	_var03, _var08
2febc     01 04 66 F0 | 	shl	_var03, #1
2fec0     00 09 C2 FA | 	rdbyte	_var05, _var01
2fec4     30 08 86 F1 | 	sub	_var05, #48
2fec8     04 05 02 F1 | 	add	_var03, _var05
2fecc     02 0F 02 F6 | 	mov	_var08, _var03
2fed0     01 00 06 F1 | 	add	_var01, #1
2fed4     B0 FF 9F FD | 	jmp	#LR__4956
2fed8                 | LR__4957
2fed8                 | LR__4958
2fed8     07 0D 02 F6 | 	mov	_var07, _var08
2fedc     04 0C 66 F0 | 	shl	_var07, #4
2fee0     07 0D 82 F1 | 	sub	_var07, _var08
2fee4     02 0C 66 F0 | 	shl	_var07, #2
2fee8     06 11 02 F1 | 	add	_var09, _var07
2feec                 | LR__4959
2feec     02 00 00 FF 
2fef0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fef4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fef8     00 13 C2 FA | 	rdbyte	arg01, _var01
2fefc                 | ' {
2fefc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fefc     80 12 36 F3 | 	fle	arg01, #128 wc
2ff00                 | '     return __ctype[c];
2ff00     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2ff04     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff08     09 FB C1 FA | 	rdbyte	result1, arg01
2ff0c     02 00 00 FF 
2ff10     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ff14     0C FA CD F7 | 	test	result1, #12 wz
2ff18     50 00 90 AD |  if_e	jmp	#LR__4962
2ff1c     0A 03 68 FC | 	wrlong	#1, arg02
2ff20                 | '                 *hasdst = 1;
2ff20                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2ff20                 | LR__4960
2ff20     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2ff24     44 00 90 AD |  if_e	jmp	#LR__4961
2ff28     00 13 C2 FA | 	rdbyte	arg01, _var01
2ff2c                 | ' {
2ff2c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ff2c     80 12 36 F3 | 	fle	arg01, #128 wc
2ff30                 | '     return __ctype[c];
2ff30     02 00 00 FF 
2ff34     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ff38     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff3c     09 FB C1 FA | 	rdbyte	result1, arg01
2ff40     02 00 00 FF 
2ff44     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ff48     0C FA CD F7 | 	test	result1, #12 wz
2ff4c     1C 00 90 AD |  if_e	jmp	#LR__4961
2ff50     00 0B 02 F6 | 	mov	_var06, _var01
2ff54     01 0A 06 F1 | 	add	_var06, #1
2ff58     00 0D C2 FA | 	rdbyte	_var07, _var01
2ff5c     05 01 02 F6 | 	mov	_var01, _var06
2ff60     03 0D 42 FC | 	wrbyte	_var07, _var04
2ff64     01 06 06 F1 | 	add	_var04, #1
2ff68     B4 FF 9F FD | 	jmp	#LR__4960
2ff6c                 | LR__4961
2ff6c                 | LR__4962
2ff6c     03 01 48 FC | 	wrbyte	#0, _var04
2ff70     02 00 00 FF 
2ff74     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ff78     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ff7c     02 00 00 FF 
2ff80     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ff84     20 00 90 AD |  if_e	jmp	#LR__4963
2ff88     02 00 00 FF 
2ff8c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ff90     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ff94     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ff98     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ff9c     02 00 00 FF 
2ffa0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ffa4     1C 00 90 FD | 	jmp	#LR__4964
2ffa8                 | LR__4963
2ffa8     02 00 00 FF 
2ffac     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2ffb0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ffb4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2ffb8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ffbc     02 00 00 FF 
2ffc0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ffc4                 | LR__4964
2ffc4     02 00 00 FF 
2ffc8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ffcc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ffd0     02 00 00 FF 
2ffd4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2ffd8     20 00 90 AD |  if_e	jmp	#LR__4965
2ffdc     02 00 00 FF 
2ffe0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ffe4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ffe8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2ffec     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fff0     02 00 00 FF 
2fff4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fff8     1C 00 90 FD | 	jmp	#LR__4966
2fffc                 | LR__4965
2fffc     02 00 00 FF 
30000     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30004     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30008     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3000c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30010     02 00 00 FF 
30014     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30018                 | LR__4966
30018     08 03 02 FD | 	qmul	_var02, _var09
3001c                 | ' 		_tzname[1] = stdname;
3001c                 | ' 
3001c                 | '         return sgn * off;
3001c     18 FA 61 FD | 	getqx	result1
30020                 | LR__4967
30020                 | _fatfs_cc___tzoffset_ret
30020     2D 00 64 FD | 	ret
30024                 | 
30024                 | _fatfs_cc___indst
30024     10 12 06 F1 | 	add	arg01, #16
30028     09 01 02 FB | 	rdlong	_var01, arg01
3002c     10 12 86 F1 | 	sub	arg01, #16
30030     02 00 0E F2 | 	cmp	_var01, #2 wz
30034     30 00 90 5D |  if_ne	jmp	#LR__4970
30038     07 00 06 F6 | 	mov	_var01, #7
3003c     18 12 06 F1 | 	add	arg01, #24
30040     09 03 02 FB | 	rdlong	_var02, arg01
30044     01 01 02 F1 | 	add	_var01, _var02
30048     0C 12 86 F1 | 	sub	arg01, #12
3004c     09 05 02 FB | 	rdlong	_var03, arg01
30050     02 01 82 F1 | 	sub	_var01, _var03
30054     00 00 56 F2 | 	cmps	_var01, #0 wc
30058                 | '                         return 1;
30058     01 FA 05 C6 |  if_b	mov	result1, #1
3005c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30060                 | '                 return 0;
30060     00 FA 05 F6 | 	mov	result1, #0
30064     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30068                 | LR__4970
30068     10 12 06 F1 | 	add	arg01, #16
3006c     09 01 02 FB | 	rdlong	_var01, arg01
30070     10 12 86 F1 | 	sub	arg01, #16
30074     0A 00 0E F2 | 	cmp	_var01, #10 wz
30078     28 00 90 5D |  if_ne	jmp	#LR__4971
3007c     18 12 06 F1 | 	add	arg01, #24
30080     09 01 02 FB | 	rdlong	_var01, arg01
30084     0C 12 86 F1 | 	sub	arg01, #12
30088     09 07 02 FB | 	rdlong	_var04, arg01
3008c     03 01 82 F1 | 	sub	_var01, _var04
30090     00 00 56 F2 | 	cmps	_var01, #0 wc
30094                 | '                         return 0;
30094     00 FA 05 C6 |  if_b	mov	result1, #0
30098     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3009c                 | '                 return 1;
3009c     01 FA 05 F6 | 	mov	result1, #1
300a0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
300a4                 | LR__4971
300a4                 | '         }
300a4                 | ' 
300a4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
300a4     00 00 06 F6 | 	mov	_var01, #0
300a8     10 12 06 F1 | 	add	arg01, #16
300ac     09 03 02 FB | 	rdlong	_var02, arg01
300b0     10 12 86 F1 | 	sub	arg01, #16
300b4     03 02 56 F2 | 	cmps	_var02, #3 wc
300b8     10 00 90 CD |  if_b	jmp	#LR__4972
300bc     10 12 06 F1 | 	add	arg01, #16
300c0     09 05 02 FB | 	rdlong	_var03, arg01
300c4     0A 04 56 F2 | 	cmps	_var03, #10 wc
300c8     01 00 06 C6 |  if_b	mov	_var01, #1
300cc                 | LR__4972
300cc     00 FB 01 F6 | 	mov	result1, _var01
300d0                 | _fatfs_cc___indst_ret
300d0     2D 00 64 FD | 	ret
300d4                 | 
300d4                 | ' 	
300d4                 | ' 	FUNCTION pfunc(c as integer) as integer
300d4                 | ___strs_cl_pfunc
300d4                 | ' 		if (i < 16) then
300d4     04 E4 05 F1 | 	add	objptr, #4
300d8     F2 FA 01 FB | 	rdlong	result1, objptr
300dc     04 E4 85 F1 | 	sub	objptr, #4
300e0     10 FA 55 F2 | 	cmps	result1, #16 wc
300e4     2C 00 90 3D |  if_ae	jmp	#LR__4980
300e8     F2 FA 01 FB | 	rdlong	result1, objptr
300ec     04 E4 05 F1 | 	add	objptr, #4
300f0     F2 00 02 FB | 	rdlong	_var01, objptr
300f4     FD 00 02 F1 | 	add	_var01, result1
300f8     00 13 42 FC | 	wrbyte	arg01, _var01
300fc     F2 FA 01 FB | 	rdlong	result1, objptr
30100     01 FA 05 F1 | 	add	result1, #1
30104     F2 FA 61 FC | 	wrlong	result1, objptr
30108     04 E4 85 F1 | 	sub	objptr, #4
3010c                 | ' 			p(i) = c
3010c                 | ' 			i = i+1
3010c                 | ' 			return 1
3010c     01 FA 05 F6 | 	mov	result1, #1
30110     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30114                 | LR__4980
30114                 | ' 			return -1
30114     01 FA 65 F6 | 	neg	result1, #1
30118                 | ___strs_cl_pfunc_ret
30118     2D 00 64 FD | 	ret
3011c                 | 
3011c                 | __struct__s_vfs_file_t_putchar
3011c     04 4A 05 F6 | 	mov	COUNT_, #4
30120     A8 00 A0 FD | 	call	#pushregs_
30124     1C E4 05 F1 | 	add	objptr, #28
30128     F2 1E 0A FB | 	rdlong	local01, objptr wz
3012c     1C E4 85 F1 | 	sub	objptr, #28
30130     00 FA 05 A6 |  if_e	mov	result1, #0
30134     48 00 90 AD |  if_e	jmp	#LR__4990
30138     1C E4 05 F1 | 	add	objptr, #28
3013c     F2 20 02 FB | 	rdlong	local02, objptr
30140     10 23 02 F6 | 	mov	local03, local02
30144     1C E4 85 F1 | 	sub	objptr, #28
30148     13 22 46 F7 | 	zerox	local03, #19
3014c     14 20 46 F0 | 	shr	local02, #20
30150     02 20 66 F0 | 	shl	local02, #2
30154     ED 20 02 F1 | 	add	local02, __methods__
30158     10 21 02 FB | 	rdlong	local02, local02
3015c     F2 14 02 F6 | 	mov	arg02, objptr
30160     F2 24 02 F6 | 	mov	local04, objptr
30164     11 E5 01 F6 | 	mov	objptr, local03
30168     2D 20 62 FD | 	call	local02
3016c     12 E5 01 F6 | 	mov	objptr, local04
30170                 | '     return (i < 0) ? 0 : 1;
30170     00 FA 55 F2 | 	cmps	result1, #0 wc
30174     00 1E 06 C6 |  if_b	mov	local01, #0
30178     01 1E 06 36 |  if_ae	mov	local01, #1
3017c     0F FB 01 F6 | 	mov	result1, local01
30180                 | LR__4990
30180     A7 F0 03 F6 | 	mov	ptra, fp
30184     B2 00 A0 FD | 	call	#popregs_
30188                 | __struct__s_vfs_file_t_putchar_ret
30188     2D 00 64 FD | 	ret
3018c                 | 
3018c                 | __struct__s_vfs_file_t_getchar
3018c     03 4A 05 F6 | 	mov	COUNT_, #3
30190     A8 00 A0 FD | 	call	#pushregs_
30194     20 E4 05 F1 | 	add	objptr, #32
30198     F2 12 0A FB | 	rdlong	arg01, objptr wz
3019c     20 E4 85 F1 | 	sub	objptr, #32
301a0     01 FA 65 A6 |  if_e	neg	result1, #1
301a4     38 00 90 AD |  if_e	jmp	#LR__5000
301a8                 | '     return getcf(__this);
301a8     20 E4 05 F1 | 	add	objptr, #32
301ac     F2 1E 02 FB | 	rdlong	local01, objptr
301b0     0F 21 02 F6 | 	mov	local02, local01
301b4     20 E4 85 F1 | 	sub	objptr, #32
301b8     13 20 46 F7 | 	zerox	local02, #19
301bc     14 1E 46 F0 | 	shr	local01, #20
301c0     02 1E 66 F0 | 	shl	local01, #2
301c4     ED 1E 02 F1 | 	add	local01, __methods__
301c8     0F 1F 02 FB | 	rdlong	local01, local01
301cc     F2 12 02 F6 | 	mov	arg01, objptr
301d0     F2 22 02 F6 | 	mov	local03, objptr
301d4     10 E5 01 F6 | 	mov	objptr, local02
301d8     2D 1E 62 FD | 	call	local01
301dc     11 E5 01 F6 | 	mov	objptr, local03
301e0                 | LR__5000
301e0     A7 F0 03 F6 | 	mov	ptra, fp
301e4     B2 00 A0 FD | 	call	#popregs_
301e8                 | __struct__s_vfs_file_t_getchar_ret
301e8     2D 00 64 FD | 	ret
301ec                 | 
301ec                 | __struct___bas_wrap_sender_tx
301ec     03 4A 05 F6 | 	mov	COUNT_, #3
301f0     A8 00 A0 FD | 	call	#pushregs_
301f4     F2 1E 02 FB | 	rdlong	local01, objptr
301f8     0F 21 02 F6 | 	mov	local02, local01
301fc     13 1E 46 F7 | 	zerox	local01, #19
30200     14 20 46 F0 | 	shr	local02, #20
30204     02 20 66 F0 | 	shl	local02, #2
30208     ED 20 02 F1 | 	add	local02, __methods__
3020c     10 21 02 FB | 	rdlong	local02, local02
30210     F2 22 02 F6 | 	mov	local03, objptr
30214     0F E5 01 F6 | 	mov	objptr, local01
30218     2D 20 62 FD | 	call	local02
3021c     11 E5 01 F6 | 	mov	objptr, local03
30220     01 FA 05 F6 | 	mov	result1, #1
30224     A7 F0 03 F6 | 	mov	ptra, fp
30228     B2 00 A0 FD | 	call	#popregs_
3022c                 | __struct___bas_wrap_sender_tx_ret
3022c     2D 00 64 FD | 	ret
30230                 | 
30230                 | __struct___bas_wrap_sender_rx
30230     03 4A 05 F6 | 	mov	COUNT_, #3
30234     A8 00 A0 FD | 	call	#pushregs_
30238     04 E4 05 F1 | 	add	objptr, #4
3023c     F2 1E 02 FB | 	rdlong	local01, objptr
30240     0F 21 02 F6 | 	mov	local02, local01
30244     04 E4 85 F1 | 	sub	objptr, #4
30248     13 20 46 F7 | 	zerox	local02, #19
3024c     14 1E 46 F0 | 	shr	local01, #20
30250     02 1E 66 F0 | 	shl	local01, #2
30254     ED 1E 02 F1 | 	add	local01, __methods__
30258     0F 1F 02 FB | 	rdlong	local01, local01
3025c     F2 22 02 F6 | 	mov	local03, objptr
30260     10 E5 01 F6 | 	mov	objptr, local02
30264     2D 1E 62 FD | 	call	local01
30268     11 E5 01 F6 | 	mov	objptr, local03
3026c     A7 F0 03 F6 | 	mov	ptra, fp
30270     B2 00 A0 FD | 	call	#popregs_
30274                 | __struct___bas_wrap_sender_rx_ret
30274     2D 00 64 FD | 	ret
30278                 | 
30278                 | __struct___bas_wrap_sender_close
30278     03 4A 05 F6 | 	mov	COUNT_, #3
3027c     A8 00 A0 FD | 	call	#pushregs_
30280     08 E4 05 F1 | 	add	objptr, #8
30284     F2 1E 02 FB | 	rdlong	local01, objptr
30288     0F 21 02 F6 | 	mov	local02, local01
3028c     08 E4 85 F1 | 	sub	objptr, #8
30290     13 20 46 F7 | 	zerox	local02, #19
30294     14 1E 46 F0 | 	shr	local01, #20
30298     02 1E 66 F0 | 	shl	local01, #2
3029c     ED 1E 02 F1 | 	add	local01, __methods__
302a0     0F 1F 02 FB | 	rdlong	local01, local01
302a4     F2 22 02 F6 | 	mov	local03, objptr
302a8     10 E5 01 F6 | 	mov	objptr, local02
302ac     2D 1E 62 FD | 	call	local01
302b0     11 E5 01 F6 | 	mov	objptr, local03
302b4     A7 F0 03 F6 | 	mov	ptra, fp
302b8     B2 00 A0 FD | 	call	#popregs_
302bc                 | __struct___bas_wrap_sender_close_ret
302bc     2D 00 64 FD | 	ret
302c0                 | 
302c0                 | LR__5010
302c0     2F          | 	byte	"/"
302c1     00          | 	byte	0
302c2                 | LR__5011
302c2     69 6E 66    | 	byte	"inf"
302c5     00          | 	byte	0
302c6                 | LR__5012
302c6     6E 61 6E    | 	byte	"nan"
302c9     00          | 	byte	0
302ca                 | LR__5013
302ca                 | 	byte	
302ca     00          | 	byte	0
302cb                 | LR__5014
302cb                 | 	byte	
302cb     00          | 	byte	0
302cc                 | LR__5015
302cc                 | 	byte	
302cc     00          | 	byte	0
302cd                 | LR__5016
302cd                 | 	byte	
302cd     00          | 	byte	0
302ce                 | LR__5017
302ce                 | 	byte	
302ce     00          | 	byte	0
302cf                 | LR__5018
302cf                 | 	byte	
302cf     00          | 	byte	0
302d0                 | LR__5019
302d0                 | 	byte	
302d0     00          | 	byte	0
302d1                 | LR__5020
302d1                 | 	byte	
302d1     00          | 	byte	0
302d2                 | LR__5021
302d2     00          | 	byte	0
302d3     00          | 	byte	0
302d4                 | LR__5022
302d4     00          | 	byte	0
302d5     00          | 	byte	0
302d6                 | LR__5023
302d6     00          | 	byte	0
302d7     00          | 	byte	0
302d8                 | LR__5024
302d8     20 21 21 21 
302dc     20 63 6F 72 
302e0     72 75 70 74 
302e4     65 64 20 68 
302e8     65 61 70 3F 
302ec     3F 3F 20 21 
302f0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
302f3     00          | 	byte	0
302f4                 | LR__5025
302f4     20 21 21 21 
302f8     20 6F 75 74 
302fc     20 6F 66 20 
30300     68 65 61 70 
30304     20 6D 65 6D 
30308     6F 72 79 20 
3030c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
30310     00          | 	byte	0
30311                 | LR__5026
30311     20 21 21 21 
30315     20 63 6F 72 
30319     72 75 70 74 
3031d     65 64 20 68 
30321     65 61 70 20 
30325     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
30329     00          | 	byte	0
3032a                 | LR__5027
3032a     00          | 	byte	0
3032b     00          | 	byte	0
3032c                 | LR__5028
3032c     2E          | 	byte	"."
3032d     00          | 	byte	0
3032e                 | LR__5029
3032e     00          | 	byte	0
3032f     00          | 	byte	0
30330                 | LR__5030
30330     00          | 	byte	0
30331     00          | 	byte	0
30332                 | LR__5031
30332     00          | 	byte	0
30333     00          | 	byte	0
30334                 | LR__5032
30334     2A 3A 3C 3E 
30338     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
3033c     00          | 	byte	0
3033d                 | LR__5033
3033d     2B 2C 3B 3D 
30341     5B 5D       | 	byte	"+,;=[]"
30343     00          | 	byte	0
30344                 | LR__5034
30344     46 41 54 33 
30348     32 20 20 20 | 	byte	"FAT32   "
3034c     00          | 	byte	0
3034d                 | LR__5035
3034d     54 5A       | 	byte	"TZ"
3034f     00          | 	byte	0
30350                 | LR__5036
30350     00          | 	byte	0
30351     00          | 	byte	0
30352                 | LR__5037
30352                 | 	byte	
30352     00          | 	byte	0
30353                 | LR__5038
30353                 | 	byte	
30353     00          | 	byte	0
30354                 | LR__5039
30354                 | 	byte	
30354     00          | 	byte	0
30355                 | LR__5040
30355                 | 	byte	
30355     00          | 	byte	0
30356                 | LR__5041
30356     22          | 	byte	34
30357     00          | 	byte	0
30358                 | LR__5042
30358     22          | 	byte	34
30359     00          | 	byte	0
3035a                 | LR__5043
3035a     3A          | 	byte	":"
3035b     00          | 	byte	0
3035c                 | LR__5044
3035c                 | 	byte	
3035c     00          | 	byte	0
3035d                 | LR__5045
3035d                 | 	byte	
3035d     00          | 	byte	0
3035e                 | LR__5046
3035e                 | 	byte	
3035e     00          | 	byte	0
3035f                 | LR__5047
3035f                 | 	byte	
3035f     00          | 	byte	0
30360                 | LR__5048
30360                 | 	byte	
30360     00          | 	byte	0
30361                 | LR__5049
30361                 | 	byte	
30361     00          | 	byte	0
30362                 | LR__5050
30362                 | 	byte	
30362     00          | 	byte	0
30363                 | LR__5051
30363     30          | 	byte	"0"
30364     00          | 	byte	0
30365                 | LR__5052
30365     22          | 	byte	34
30366     00          | 	byte	0
30367                 | LR__5053
30367     22          | 	byte	34
30368     00          | 	byte	0
30369                 | LR__5054
30369     22          | 	byte	34
3036a     00          | 	byte	0
3036b                 | LR__5055
3036b     22          | 	byte	34
3036c     00          | 	byte	0
3036d                 | LR__5056
3036d     22          | 	byte	34
3036e     00          | 	byte	0
3036f                 | LR__5057
3036f     3E          | 	byte	">"
30370     00          | 	byte	0
30371                 | LR__5058
30371     3C          | 	byte	"<"
30372     00          | 	byte	0
30373                 | LR__5059
30373     2B          | 	byte	"+"
30374     00          | 	byte	0
30375                 | LR__5060
30375     2D          | 	byte	"-"
30376     00          | 	byte	0
30377                 | LR__5061
30377     2A          | 	byte	"*"
30378     00          | 	byte	0
30379                 | LR__5062
30379     2F          | 	byte	"/"
3037a     00          | 	byte	0
3037b                 | LR__5063
3037b     5E          | 	byte	"^"
3037c     00          | 	byte	0
3037d                 | LR__5064
3037d     3D          | 	byte	"="
3037e     00          | 	byte	0
3037f                 | LR__5065
3037f     2B          | 	byte	"+"
30380     00          | 	byte	0
30381                 | LR__5066
30381     2B          | 	byte	"+"
30382     00          | 	byte	0
30383                 | LR__5067
30383     2D          | 	byte	"-"
30384     00          | 	byte	0
30385                 | LR__5068
30385     2D          | 	byte	"-"
30386     00          | 	byte	0
30387                 | LR__5069
30387     3C          | 	byte	"<"
30388     00          | 	byte	0
30389                 | LR__5070
30389     3E          | 	byte	">"
3038a     00          | 	byte	0
3038b                 | LR__5071
3038b     22          | 	byte	34
3038c     00          | 	byte	0
3038d                 | LR__5072
3038d     22          | 	byte	34
3038e     00          | 	byte	0
3038f                 | LR__5073
3038f     65 6C 73 65 | 	byte	"else"
30393     00          | 	byte	0
30394                 | LR__5074
30394     74 68 65 6E | 	byte	"then"
30398     00          | 	byte	0
30399                 | LR__5075
30399     2E          | 	byte	"."
3039a     00          | 	byte	0
3039b                 | LR__5076
3039b     3F          | 	byte	"?"
3039c     00          | 	byte	0
3039d                 | LR__5077
3039d     3F          | 	byte	"?"
3039e     00          | 	byte	0
3039f                 | LR__5078
3039f     6D 6F 75 73 
303a3     65          | 	byte	"mouse"
303a4     00          | 	byte	0
303a5                 | LR__5079
303a5     63 75 72 73 
303a9     6F 72       | 	byte	"cursor"
303ab     00          | 	byte	0
303ac                 | LR__5080
303ac     63 6C 69 63 
303b0     6B          | 	byte	"click"
303b1     00          | 	byte	0
303b2                 | LR__5081
303b2     6F 6E       | 	byte	"on"
303b4     00          | 	byte	0
303b5                 | LR__5082
303b5     31          | 	byte	"1"
303b6     00          | 	byte	0
303b7                 | LR__5083
303b7     6F 66 66    | 	byte	"off"
303ba     00          | 	byte	0
303bb                 | LR__5084
303bb     30          | 	byte	"0"
303bc     00          | 	byte	0
303bd                 | LR__5085
303bd     6D 6F 64 65 | 	byte	"mode"
303c1     00          | 	byte	0
303c2                 | LR__5086
303c2     6D 2E       | 	byte	"m."
303c4     00          | 	byte	0
303c5                 | LR__5087
303c5     61 74 61 72 
303c9     69          | 	byte	"atari"
303ca     00          | 	byte	0
303cb                 | LR__5088
303cb     30          | 	byte	"0"
303cc     00          | 	byte	0
303cd                 | LR__5089
303cd     70 63 5F 61 
303d1     6D 62 65 72 | 	byte	"pc_amber"
303d5     00          | 	byte	0
303d6                 | LR__5090
303d6     31          | 	byte	"1"
303d7     00          | 	byte	0
303d8                 | LR__5091
303d8     70 63 5F 67 
303dc     72 65 65 6E | 	byte	"pc_green"
303e0     00          | 	byte	0
303e1                 | LR__5092
303e1     32          | 	byte	"2"
303e2     00          | 	byte	0
303e3                 | LR__5093
303e3     70 63 5F 77 
303e7     68 69 74 65 | 	byte	"pc_white"
303eb     00          | 	byte	0
303ec                 | LR__5094
303ec     33          | 	byte	"3"
303ed     00          | 	byte	0
303ee                 | LR__5095
303ee     73 74       | 	byte	"st"
303f0     00          | 	byte	0
303f1                 | LR__5096
303f1     34          | 	byte	"4"
303f2     00          | 	byte	0
303f3                 | LR__5097
303f3                 | 	byte	
303f3     00          | 	byte	0
303f4                 | LR__5098
303f4     6C 6F 61 64 | 	byte	"load"
303f8     00          | 	byte	0
303f9                 | LR__5099
303f9     73 61 76 65 | 	byte	"save"
303fd     00          | 	byte	0
303fe                 | LR__5100
303fe     62 72 75 6E | 	byte	"brun"
30402     00          | 	byte	0
30403                 | LR__5101
30403     72 75 6E    | 	byte	"run"
30406     00          | 	byte	0
30407                 | LR__5102
30407     6C 6F 2E    | 	byte	"lo."
3040a     00          | 	byte	0
3040b                 | LR__5103
3040b     73 2E       | 	byte	"s."
3040d     00          | 	byte	0
3040e                 | LR__5104
3040e     62 72 2E    | 	byte	"br."
30411     00          | 	byte	0
30412                 | LR__5105
30412     65 6E 74 65 
30416     72          | 	byte	"enter"
30417     00          | 	byte	0
30418                 | LR__5106
30418     65 2E       | 	byte	"e."
3041a     00          | 	byte	0
3041b                 | LR__5107
3041b                 | 	byte	
3041b     00          | 	byte	0
3041c                 | LR__5108
3041c                 | 	byte	
3041c     00          | 	byte	0
3041d                 | LR__5109
3041d                 | 	byte	
3041d     00          | 	byte	0
3041e                 | LR__5110
3041e                 | 	byte	
3041e     00          | 	byte	0
3041f                 | LR__5111
3041f                 | 	byte	
3041f     00          | 	byte	0
30420                 | LR__5112
30420     52 65 61 64 
30424     79          | 	byte	"Ready"
30425     00          | 	byte	0
30426                 | LR__5113
30426     2B          | 	byte	"+"
30427     00          | 	byte	0
30428                 | LR__5114
30428     2D          | 	byte	"-"
30429     00          | 	byte	0
3042a                 | LR__5115
3042a     6F 72       | 	byte	"or"
3042c     00          | 	byte	0
3042d                 | LR__5116
3042d     78 6F 72    | 	byte	"xor"
30430     00          | 	byte	0
30431                 | LR__5117
30431     2A          | 	byte	"*"
30432     00          | 	byte	0
30433                 | LR__5118
30433     2F          | 	byte	"/"
30434     00          | 	byte	0
30435                 | LR__5119
30435     61 6E 64    | 	byte	"and"
30438     00          | 	byte	0
30439                 | LR__5120
30439     64 69 76    | 	byte	"div"
3043c     00          | 	byte	0
3043d                 | LR__5121
3043d     6D 6F 64    | 	byte	"mod"
30440     00          | 	byte	0
30441                 | LR__5122
30441     73 68 6C    | 	byte	"shl"
30444     00          | 	byte	0
30445                 | LR__5123
30445     73 68 72    | 	byte	"shr"
30448     00          | 	byte	0
30449                 | LR__5124
30449     5E          | 	byte	"^"
3044a     00          | 	byte	0
3044b                 | LR__5125
3044b     6E 6F 74    | 	byte	"not"
3044e     00          | 	byte	0
3044f                 | LR__5126
3044f     40          | 	byte	"@"
30450     00          | 	byte	0
30451                 | LR__5127
30451     3D          | 	byte	"="
30452     00          | 	byte	0
30453                 | LR__5128
30453     3E 3D       | 	byte	">="
30455     00          | 	byte	0
30456                 | LR__5129
30456     3C 3D       | 	byte	"<="
30458     00          | 	byte	0
30459                 | LR__5130
30459     3C          | 	byte	"<"
3045a     00          | 	byte	0
3045b                 | LR__5131
3045b     3E          | 	byte	">"
3045c     00          | 	byte	0
3045d                 | LR__5132
3045d     3C 3E       | 	byte	"<>"
3045f     00          | 	byte	0
30460                 | LR__5133
30460     2B 2B       | 	byte	"++"
30462     00          | 	byte	0
30463                 | LR__5134
30463     2D 2D       | 	byte	"--"
30465     00          | 	byte	0
30466                 | LR__5135
30466     23          | 	byte	"#"
30467     00          | 	byte	0
30468                 | LR__5136
30468     30          | 	byte	"0"
30469     00          | 	byte	0
3046a                 | LR__5137
3046a     39          | 	byte	"9"
3046b     00          | 	byte	0
3046c                 | LR__5138
3046c     23 72 65 61 
30470     64          | 	byte	"#read"
30471     00          | 	byte	0
30472                 | LR__5139
30472     23 77 72 69 
30476     74 65       | 	byte	"#write"
30478     00          | 	byte	0
30479                 | LR__5140
30479     23 61 70 70 
3047d     65 6E 64    | 	byte	"#append"
30480     00          | 	byte	0
30481                 | LR__5141
30481     23          | 	byte	"#"
30482     00          | 	byte	0
30483                 | LR__5142
30483     23          | 	byte	"#"
30484     00          | 	byte	0
30485                 | LR__5143
30485     2D          | 	byte	"-"
30486     00          | 	byte	0
30487                 | LR__5144
30487     30          | 	byte	"0"
30488     00          | 	byte	0
30489                 | LR__5145
30489     63          | 	byte	"c"
3048a     00          | 	byte	0
3048b                 | LR__5146
3048b     63 23       | 	byte	"c#"
3048d     00          | 	byte	0
3048e                 | LR__5147
3048e     64          | 	byte	"d"
3048f     00          | 	byte	0
30490                 | LR__5148
30490     64 23       | 	byte	"d#"
30492     00          | 	byte	0
30493                 | LR__5149
30493     65          | 	byte	"e"
30494     00          | 	byte	0
30495                 | LR__5150
30495     66          | 	byte	"f"
30496     00          | 	byte	0
30497                 | LR__5151
30497     66 23       | 	byte	"f#"
30499     00          | 	byte	0
3049a                 | LR__5152
3049a     67          | 	byte	"g"
3049b     00          | 	byte	0
3049c                 | LR__5153
3049c     67 23       | 	byte	"g#"
3049e     00          | 	byte	0
3049f                 | LR__5154
3049f     61          | 	byte	"a"
304a0     00          | 	byte	0
304a1                 | LR__5155
304a1     61 23       | 	byte	"a#"
304a3     00          | 	byte	0
304a4                 | LR__5156
304a4     68          | 	byte	"h"
304a5     00          | 	byte	0
304a6                 | LR__5157
304a6     62          | 	byte	"b"
304a7     00          | 	byte	0
304a8                 | LR__5158
304a8     2B          | 	byte	"+"
304a9     00          | 	byte	0
304aa                 | LR__5159
304aa     2D          | 	byte	"-"
304ab     00          | 	byte	0
304ac                 | LR__5160
304ac     3D          | 	byte	"="
304ad     00          | 	byte	0
304ae                 | LR__5161
304ae     2C          | 	byte	","
304af     00          | 	byte	0
304b0                 | LR__5162
304b0     2A          | 	byte	"*"
304b1     00          | 	byte	0
304b2                 | LR__5163
304b2     2F          | 	byte	"/"
304b3     00          | 	byte	0
304b4                 | LR__5164
304b4     3B          | 	byte	";"
304b5     00          | 	byte	0
304b6                 | LR__5165
304b6     22          | 	byte	34
304b7     00          | 	byte	0
304b8                 | LR__5166
304b8     5E          | 	byte	"^"
304b9     00          | 	byte	0
304ba                 | LR__5167
304ba     29          | 	byte	")"
304bb     00          | 	byte	0
304bc                 | LR__5168
304bc     28          | 	byte	"("
304bd     00          | 	byte	0
304be                 | LR__5169
304be     3A          | 	byte	":"
304bf     00          | 	byte	0
304c0                 | LR__5170
304c0     20          | 	byte	" "
304c1     00          | 	byte	0
304c2                 | LR__5171
304c2     3E          | 	byte	">"
304c3     00          | 	byte	0
304c4                 | LR__5172
304c4     3C          | 	byte	"<"
304c5     00          | 	byte	0
304c6                 | LR__5173
304c6     3D          | 	byte	"="
304c7     00          | 	byte	0
304c8                 | LR__5174
304c8     62 65 65 70 | 	byte	"beep"
304cc     00          | 	byte	0
304cd                 | LR__5175
304cd     62 2E       | 	byte	"b."
304cf     00          | 	byte	0
304d0                 | LR__5176
304d0     62 6F 78    | 	byte	"box"
304d3     00          | 	byte	0
304d4                 | LR__5177
304d4     62 72 75 6E | 	byte	"brun"
304d8     00          | 	byte	0
304d9                 | LR__5178
304d9     62 72 2E    | 	byte	"br."
304dc     00          | 	byte	0
304dd                 | LR__5179
304dd     63 68 61 6E 
304e1     67 65 66 72 
304e5     65 71       | 	byte	"changefreq"
304e7     00          | 	byte	0
304e8                 | LR__5180
304e8     63 66 2E    | 	byte	"cf."
304eb     00          | 	byte	0
304ec                 | LR__5181
304ec     63 68 61 6E 
304f0     67 65 70 61 
304f4     6E          | 	byte	"changepan"
304f5     00          | 	byte	0
304f6                 | LR__5182
304f6     63 70 2E    | 	byte	"cp."
304f9     00          | 	byte	0
304fa                 | LR__5183
304fa     63 68 61 6E 
304fe     67 65 76 6F 
30502     6C          | 	byte	"changevol"
30503     00          | 	byte	0
30504                 | LR__5184
30504     63 76 2E    | 	byte	"cv."
30507     00          | 	byte	0
30508                 | LR__5185
30508     63 68 61 6E 
3050c     67 65 77 61 
30510     76 65       | 	byte	"changewave"
30512     00          | 	byte	0
30513                 | LR__5186
30513     63 77 2E    | 	byte	"cw."
30516     00          | 	byte	0
30517                 | LR__5187
30517     63 69 72 63 
3051b     6C 65       | 	byte	"circle"
3051d     00          | 	byte	0
3051e                 | LR__5188
3051e     63 69 2E    | 	byte	"ci."
30521     00          | 	byte	0
30522                 | LR__5189
30522     63 6C 69 63 
30526     6B          | 	byte	"click"
30527     00          | 	byte	0
30528                 | LR__5190
30528     63 6C 6F 73 
3052c     65          | 	byte	"close"
3052d     00          | 	byte	0
3052e                 | LR__5191
3052e     63 6C 73    | 	byte	"cls"
30531     00          | 	byte	0
30532                 | LR__5192
30532     63 6F 6C 6F 
30536     72          | 	byte	"color"
30537     00          | 	byte	0
30538                 | LR__5193
30538     63 2E       | 	byte	"c."
3053a     00          | 	byte	0
3053b                 | LR__5194
3053b     63 73 61 76 
3053f     65          | 	byte	"csave"
30540     00          | 	byte	0
30541                 | LR__5195
30541     63 73 2E    | 	byte	"cs."
30544     00          | 	byte	0
30545                 | LR__5196
30545     63 75 72 73 
30549     6F 72       | 	byte	"cursor"
3054b     00          | 	byte	0
3054c                 | LR__5197
3054c     64 65 66 73 
30550     6E 64       | 	byte	"defsnd"
30552     00          | 	byte	0
30553                 | LR__5198
30553     64 65 66 65 
30557     6E 76       | 	byte	"defenv"
30559     00          | 	byte	0
3055a                 | LR__5199
3055a     64 65 66 73 
3055e     70 72 69 74 
30562     65          | 	byte	"defsprite"
30563     00          | 	byte	0
30564                 | LR__5200
30564     64 73 2E    | 	byte	"ds."
30567     00          | 	byte	0
30568                 | LR__5201
30568     64 65 67    | 	byte	"deg"
3056b     00          | 	byte	0
3056c                 | LR__5202
3056c     64 69 6D    | 	byte	"dim"
3056f     00          | 	byte	0
30570                 | LR__5203
30570     64 69 72    | 	byte	"dir"
30573     00          | 	byte	0
30574                 | LR__5204
30574     64 70 6F 6B 
30578     65          | 	byte	"dpoke"
30579     00          | 	byte	0
3057a                 | LR__5205
3057a     64 72 61 77 | 	byte	"draw"
3057e     00          | 	byte	0
3057f                 | LR__5206
3057f     64 72 2E    | 	byte	"dr."
30582     00          | 	byte	0
30583                 | LR__5207
30583     65 6C 73 65 | 	byte	"else"
30587     00          | 	byte	0
30588                 | LR__5208
30588     65 6E 64    | 	byte	"end"
3058b     00          | 	byte	0
3058c                 | LR__5209
3058c     65 6E 74 65 
30590     72          | 	byte	"enter"
30591     00          | 	byte	0
30592                 | LR__5210
30592     65 2E       | 	byte	"e."
30594     00          | 	byte	0
30595                 | LR__5211
30595     66 63 69 72 
30599     63 6C 65    | 	byte	"fcircle"
3059c     00          | 	byte	0
3059d                 | LR__5212
3059d     66 63 2E    | 	byte	"fc."
305a0     00          | 	byte	0
305a1                 | LR__5213
305a1     66 69 6C 6C | 	byte	"fill"
305a5     00          | 	byte	0
305a6                 | LR__5214
305a6     66 69 2E    | 	byte	"fi."
305a9     00          | 	byte	0
305aa                 | LR__5215
305aa     66 6F 6E 74 | 	byte	"font"
305ae     00          | 	byte	0
305af                 | LR__5216
305af     66 6F 72    | 	byte	"for"
305b2     00          | 	byte	0
305b3                 | LR__5217
305b3     66 2E       | 	byte	"f."
305b5     00          | 	byte	0
305b6                 | LR__5218
305b6     66 72 61 6D 
305ba     65          | 	byte	"frame"
305bb     00          | 	byte	0
305bc                 | LR__5219
305bc     66 72 2E    | 	byte	"fr."
305bf     00          | 	byte	0
305c0                 | LR__5220
305c0     67 65 74    | 	byte	"get"
305c3     00          | 	byte	0
305c4                 | LR__5221
305c4     67 6F 73 75 
305c8     62          | 	byte	"gosub"
305c9     00          | 	byte	0
305ca                 | LR__5222
305ca     67 6F 74 6F | 	byte	"goto"
305ce     00          | 	byte	0
305cf                 | LR__5223
305cf     67 2E       | 	byte	"g."
305d1     00          | 	byte	0
305d2                 | LR__5224
305d2     69 66       | 	byte	"if"
305d4     00          | 	byte	0
305d5                 | LR__5225
305d5     69 6E 6B    | 	byte	"ink"
305d8     00          | 	byte	0
305d9                 | LR__5226
305d9     69 2E       | 	byte	"i."
305db     00          | 	byte	0
305dc                 | LR__5227
305dc     6C 69 73 74 | 	byte	"list"
305e0     00          | 	byte	0
305e1                 | LR__5228
305e1     6C 2E       | 	byte	"l."
305e3     00          | 	byte	0
305e4                 | LR__5229
305e4     6C 6F 61 64 | 	byte	"load"
305e8     00          | 	byte	0
305e9                 | LR__5230
305e9     6C 6F 2E    | 	byte	"lo."
305ec     00          | 	byte	0
305ed                 | LR__5231
305ed     6C 70 6F 6B 
305f1     65          | 	byte	"lpoke"
305f2     00          | 	byte	0
305f3                 | LR__5232
305f3     6D 6F 64 65 | 	byte	"mode"
305f7     00          | 	byte	0
305f8                 | LR__5233
305f8     6D 2E       | 	byte	"m."
305fa     00          | 	byte	0
305fb                 | LR__5234
305fb     6D 6F 75 73 
305ff     65          | 	byte	"mouse"
30600     00          | 	byte	0
30601                 | LR__5235
30601     6E 65 77    | 	byte	"new"
30604     00          | 	byte	0
30605                 | LR__5236
30605     6E 65 78 74 | 	byte	"next"
30609     00          | 	byte	0
3060a                 | LR__5237
3060a     6E 2E       | 	byte	"n."
3060c     00          | 	byte	0
3060d                 | LR__5238
3060d     6F 70 65 6E | 	byte	"open"
30611     00          | 	byte	0
30612                 | LR__5239
30612     70 61 70 65 
30616     72          | 	byte	"paper"
30617     00          | 	byte	0
30618                 | LR__5240
30618     70 61 2E    | 	byte	"pa."
3061b     00          | 	byte	0
3061c                 | LR__5241
3061c     70 69 6E 66 
30620     6C 6F 61 74 | 	byte	"pinfloat"
30624     00          | 	byte	0
30625                 | LR__5242
30625     70 69 6E 68 
30629     69          | 	byte	"pinhi"
3062a     00          | 	byte	0
3062b                 | LR__5243
3062b     70 69 6E 6C 
3062f     6F          | 	byte	"pinlo"
30630     00          | 	byte	0
30631                 | LR__5244
30631     70 69 6E 73 
30635     74 61 72 74 | 	byte	"pinstart"
30639     00          | 	byte	0
3063a                 | LR__5245
3063a     70 69 6E 74 
3063e     6F 67 67 6C 
30642     65          | 	byte	"pintoggle"
30643     00          | 	byte	0
30644                 | LR__5246
30644     70 69 6E 77 
30648     72 69 74 65 | 	byte	"pinwrite"
3064c     00          | 	byte	0
3064d                 | LR__5247
3064d     70 6C 61 79 | 	byte	"play"
30651     00          | 	byte	0
30652                 | LR__5248
30652     70 2E       | 	byte	"p."
30654     00          | 	byte	0
30655                 | LR__5249
30655     70 6C 6F 74 | 	byte	"plot"
30659     00          | 	byte	0
3065a                 | LR__5250
3065a     70 6C 2E    | 	byte	"pl."
3065d     00          | 	byte	0
3065e                 | LR__5251
3065e     70 6F 6B 65 | 	byte	"poke"
30662     00          | 	byte	0
30663                 | LR__5252
30663     70 6F 70    | 	byte	"pop"
30666     00          | 	byte	0
30667                 | LR__5253
30667     70 6F 73 69 
3066b     74 69 6F 6E | 	byte	"position"
3066f     00          | 	byte	0
30670                 | LR__5254
30670     70 6F 73 2E | 	byte	"pos."
30674     00          | 	byte	0
30675                 | LR__5255
30675     70 72 69 6E 
30679     74          | 	byte	"print"
3067a     00          | 	byte	0
3067b                 | LR__5256
3067b     3F          | 	byte	"?"
3067c     00          | 	byte	0
3067d                 | LR__5257
3067d     70 75 74    | 	byte	"put"
30680     00          | 	byte	0
30681                 | LR__5258
30681     72 61 64    | 	byte	"rad"
30684     00          | 	byte	0
30685                 | LR__5259
30685     72 65 6C 65 
30689     61 73 65    | 	byte	"release"
3068c     00          | 	byte	0
3068d                 | LR__5260
3068d     72 65 6D    | 	byte	"rem"
30690     00          | 	byte	0
30691                 | LR__5261
30691     27          | 	byte	"'"
30692     00          | 	byte	0
30693                 | LR__5262
30693     72 65 74 75 
30697     72 6E       | 	byte	"return"
30699     00          | 	byte	0
3069a                 | LR__5263
3069a     72 75 6E    | 	byte	"run"
3069d     00          | 	byte	0
3069e                 | LR__5264
3069e     73 61 76 65 | 	byte	"save"
306a2     00          | 	byte	0
306a3                 | LR__5265
306a3     73 2E       | 	byte	"s."
306a5     00          | 	byte	0
306a6                 | LR__5266
306a6     73 65 74 64 
306aa     65 6C 61 79 | 	byte	"setdelay"
306ae     00          | 	byte	0
306af                 | LR__5267
306af     73 64 2E    | 	byte	"sd."
306b2     00          | 	byte	0
306b3                 | LR__5268
306b3     73 65 74 65 
306b7     6E 76       | 	byte	"setenv"
306b9     00          | 	byte	0
306ba                 | LR__5269
306ba     73 65 2E    | 	byte	"se."
306bd     00          | 	byte	0
306be                 | LR__5270
306be     73 65 74 6C 
306c2     65 6E       | 	byte	"setlen"
306c4     00          | 	byte	0
306c5                 | LR__5271
306c5     73 6C 2E    | 	byte	"sl."
306c8     00          | 	byte	0
306c9                 | LR__5272
306c9     73 65 74 70 
306cd     61 6E       | 	byte	"setpan"
306cf     00          | 	byte	0
306d0                 | LR__5273
306d0     73 70       | 	byte	"sp"
306d2     00          | 	byte	0
306d3                 | LR__5274
306d3     73 65 74 73 
306d7     75 73 74 61 
306db     69 6E       | 	byte	"setsustain"
306dd     00          | 	byte	0
306de                 | LR__5275
306de     73 73 2E    | 	byte	"ss."
306e1     00          | 	byte	0
306e2                 | LR__5276
306e2     73 65 74 76 
306e6     6F 6C       | 	byte	"setvol"
306e8     00          | 	byte	0
306e9                 | LR__5277
306e9     73 76 2E    | 	byte	"sv."
306ec     00          | 	byte	0
306ed                 | LR__5278
306ed     73 65 74 77 
306f1     61 76 65    | 	byte	"setwave"
306f4     00          | 	byte	0
306f5                 | LR__5279
306f5     73 77 2E    | 	byte	"sw."
306f8     00          | 	byte	0
306f9                 | LR__5280
306f9     73 65 74 77 
306fd     61 76       | 	byte	"setwav"
306ff     00          | 	byte	0
30700                 | LR__5281
30700     73 68 75 74 
30704     75 70       | 	byte	"shutup"
30706     00          | 	byte	0
30707                 | LR__5282
30707     73 68 2E    | 	byte	"sh."
3070a     00          | 	byte	0
3070b                 | LR__5283
3070b     73 6F 75 6E 
3070f     64          | 	byte	"sound"
30710     00          | 	byte	0
30711                 | LR__5284
30711     73 6F 2E    | 	byte	"so."
30714     00          | 	byte	0
30715                 | LR__5285
30715     73 70 72 69 
30719     74 65       | 	byte	"sprite"
3071b     00          | 	byte	0
3071c                 | LR__5286
3071c     73 70 72 2E | 	byte	"spr."
30720     00          | 	byte	0
30721                 | LR__5287
30721     74 68 65 6E | 	byte	"then"
30725     00          | 	byte	0
30726                 | LR__5288
30726     77 61 69 74 
3072a     6D 73       | 	byte	"waitms"
3072c     00          | 	byte	0
3072d                 | LR__5289
3072d     77 61 69 74 
30731     63 6C 6F 63 
30735     6B          | 	byte	"waitclock"
30736     00          | 	byte	0
30737                 | LR__5290
30737     77 63 2E    | 	byte	"wc."
3073a     00          | 	byte	0
3073b                 | LR__5291
3073b     77 61 69 74 
3073f     76 62 6C    | 	byte	"waitvbl"
30742     00          | 	byte	0
30743                 | LR__5292
30743     77 76 2E    | 	byte	"wv."
30746     00          | 	byte	0
30747                 | LR__5293
30747     77 78 70 69 
3074b     6E          | 	byte	"wxpin"
3074c     00          | 	byte	0
3074d                 | LR__5294
3074d     77 79 70 69 
30751     6E          | 	byte	"wypin"
30752     00          | 	byte	0
30753                 | LR__5295
30753     61 62 73    | 	byte	"abs"
30756     00          | 	byte	0
30757                 | LR__5296
30757     61 63 6F 73 | 	byte	"acos"
3075b     00          | 	byte	0
3075c                 | LR__5297
3075c     61 64 72    | 	byte	"adr"
3075f     00          | 	byte	0
30760                 | LR__5298
30760     61 64 64 72 | 	byte	"addr"
30764     00          | 	byte	0
30765                 | LR__5299
30765     61 73 63    | 	byte	"asc"
30768     00          | 	byte	0
30769                 | LR__5300
30769     61 73 69 6E | 	byte	"asin"
3076d     00          | 	byte	0
3076e                 | LR__5301
3076e     61 74 6E    | 	byte	"atn"
30771     00          | 	byte	0
30772                 | LR__5302
30772     62 69 6E 24 | 	byte	"bin$"
30776     00          | 	byte	0
30777                 | LR__5303
30777     63 68 72 24 | 	byte	"chr$"
3077b     00          | 	byte	0
3077c                 | LR__5304
3077c     63 6F 73    | 	byte	"cos"
3077f     00          | 	byte	0
30780                 | LR__5305
30780     64 70 65 65 
30784     6B          | 	byte	"dpeek"
30785     00          | 	byte	0
30786                 | LR__5306
30786     66 72 65    | 	byte	"fre"
30789     00          | 	byte	0
3078a                 | LR__5307
3078a     67 65 74 70 
3078e     69 78 65 6C | 	byte	"getpixel"
30792     00          | 	byte	0
30793                 | LR__5308
30793     67 65 2E    | 	byte	"ge."
30796     00          | 	byte	0
30797                 | LR__5309
30797     67 65 74 65 
3079b     6E 76 73 75 
3079f     73 74 61 69 
307a3     6E          | 	byte	"getenvsustain"
307a4     00          | 	byte	0
307a5                 | LR__5310
307a5     67 65 74 6E 
307a9     6F 74 65 76 
307ad     61 6C 75 65 | 	byte	"getnotevalue"
307b1     00          | 	byte	0
307b2                 | LR__5311
307b2     67 65 74 74 
307b6     69 6D 65    | 	byte	"gettime"
307b9     00          | 	byte	0
307ba                 | LR__5312
307ba     68 65 78 24 | 	byte	"hex$"
307be     00          | 	byte	0
307bf                 | LR__5313
307bf     69 6E 6B 65 
307c3     79 24       | 	byte	"inkey$"
307c5     00          | 	byte	0
307c6                 | LR__5314
307c6     69 6E 74    | 	byte	"int"
307c9     00          | 	byte	0
307ca                 | LR__5315
307ca     6C 65 66 74 
307ce     24          | 	byte	"left$"
307cf     00          | 	byte	0
307d0                 | LR__5316
307d0     6C 65 6E    | 	byte	"len"
307d3     00          | 	byte	0
307d4                 | LR__5317
307d4     6C 6F 67    | 	byte	"log"
307d7     00          | 	byte	0
307d8                 | LR__5318
307d8     6C 70 65 65 
307dc     6B          | 	byte	"lpeek"
307dd     00          | 	byte	0
307de                 | LR__5319
307de     6D 69 64 24 | 	byte	"mid$"
307e2     00          | 	byte	0
307e3                 | LR__5320
307e3     6D 6F 75 73 
307e7     65 6B       | 	byte	"mousek"
307e9     00          | 	byte	0
307ea                 | LR__5321
307ea     6D 6F 75 73 
307ee     65 77       | 	byte	"mousew"
307f0     00          | 	byte	0
307f1                 | LR__5322
307f1     6D 6F 75 73 
307f5     65 78       | 	byte	"mousex"
307f7     00          | 	byte	0
307f8                 | LR__5323
307f8     6D 6F 75 73 
307fc     65 79       | 	byte	"mousey"
307fe     00          | 	byte	0
307ff                 | LR__5324
307ff     70 65 65 6B | 	byte	"peek"
30803     00          | 	byte	0
30804                 | LR__5325
30804     70 69 6E 72 
30808     65 61 64    | 	byte	"pinread"
3080b     00          | 	byte	0
3080c                 | LR__5326
3080c     72 64 70 69 
30810     6E          | 	byte	"rdpin"
30811     00          | 	byte	0
30812                 | LR__5327
30812     72 69 67 68 
30816     74 24       | 	byte	"right$"
30818     00          | 	byte	0
30819                 | LR__5328
30819     72 71 70 69 
3081d     6E          | 	byte	"rqpin"
3081e     00          | 	byte	0
3081f                 | LR__5329
3081f     72 6F 75 6E 
30823     64          | 	byte	"round"
30824     00          | 	byte	0
30825                 | LR__5330
30825     72 6E 64    | 	byte	"rnd"
30828     00          | 	byte	0
30829                 | LR__5331
30829     73 69 6E    | 	byte	"sin"
3082c     00          | 	byte	0
3082d                 | LR__5332
3082d     73 71 72    | 	byte	"sqr"
30830     00          | 	byte	0
30831                 | LR__5333
30831     73 74 69 63 
30835     6B          | 	byte	"stick"
30836     00          | 	byte	0
30837                 | LR__5334
30837     73 74 72 69 
3083b     67          | 	byte	"strig"
3083c     00          | 	byte	0
3083d                 | LR__5335
3083d     73 74 72 24 | 	byte	"str$"
30841     00          | 	byte	0
30842                 | LR__5336
30842     74 61 6E    | 	byte	"tan"
30845     00          | 	byte	0
30846                 | LR__5337
30846     76 61 6C    | 	byte	"val"
30849     00          | 	byte	0
3084a                 | LR__5338
3084a     76 61 72 70 
3084e     74 72       | 	byte	"varptr"
30850     00          | 	byte	0
30851                 | LR__5339
30851     61          | 	byte	"a"
30852     00          | 	byte	0
30853                 | LR__5340
30853     7A          | 	byte	"z"
30854     00          | 	byte	0
30855                 | LR__5341
30855     5F          | 	byte	"_"
30856     00          | 	byte	0
30857                 | LR__5342
30857     61          | 	byte	"a"
30858     00          | 	byte	0
30859                 | LR__5343
30859     7A          | 	byte	"z"
3085a     00          | 	byte	0
3085b                 | LR__5344
3085b     30          | 	byte	"0"
3085c     00          | 	byte	0
3085d                 | LR__5345
3085d     39          | 	byte	"9"
3085e     00          | 	byte	0
3085f                 | LR__5346
3085f     5F          | 	byte	"_"
30860     00          | 	byte	0
30861                 | LR__5347
30861     2E          | 	byte	"."
30862     00          | 	byte	0
30863                 | LR__5348
30863     61          | 	byte	"a"
30864     00          | 	byte	0
30865                 | LR__5349
30865     7A          | 	byte	"z"
30866     00          | 	byte	0
30867                 | LR__5350
30867     30          | 	byte	"0"
30868     00          | 	byte	0
30869                 | LR__5351
30869     39          | 	byte	"9"
3086a     00          | 	byte	0
3086b                 | LR__5352
3086b     5F          | 	byte	"_"
3086c     00          | 	byte	0
3086d                 | LR__5353
3086d     24          | 	byte	"$"
3086e     00          | 	byte	0
3086f                 | LR__5354
3086f     25          | 	byte	"%"
30870     00          | 	byte	0
30871                 | LR__5355
30871     21          | 	byte	"!"
30872     00          | 	byte	0
30873                 | LR__5356
30873     30          | 	byte	"0"
30874     00          | 	byte	0
30875                 | LR__5357
30875     39          | 	byte	"9"
30876     00          | 	byte	0
30877                 | LR__5358
30877     2E          | 	byte	"."
30878     00          | 	byte	0
30879                 | LR__5359
30879     24          | 	byte	"$"
3087a     00          | 	byte	0
3087b                 | LR__5360
3087b     25          | 	byte	"%"
3087c     00          | 	byte	0
3087d                 | LR__5361
3087d     2D          | 	byte	"-"
3087e     00          | 	byte	0
3087f                 | LR__5362
3087f     2E          | 	byte	"."
30880     00          | 	byte	0
30881                 | LR__5363
30881     24          | 	byte	"$"
30882     00          | 	byte	0
30883                 | LR__5364
30883     25          | 	byte	"%"
30884     00          | 	byte	0
30885                 | LR__5365
30885     30          | 	byte	"0"
30886     00          | 	byte	0
30887                 | LR__5366
30887     39          | 	byte	"9"
30888     00          | 	byte	0
30889                 | LR__5367
30889     5F          | 	byte	"_"
3088a     00          | 	byte	0
3088b                 | LR__5368
3088b     2E          | 	byte	"."
3088c     00          | 	byte	0
3088d                 | LR__5369
3088d     45          | 	byte	"E"
3088e     00          | 	byte	0
3088f                 | LR__5370
3088f     65          | 	byte	"e"
30890     00          | 	byte	0
30891                 | LR__5371
30891     2D          | 	byte	"-"
30892     00          | 	byte	0
30893                 | LR__5372
30893     61          | 	byte	"a"
30894     00          | 	byte	0
30895                 | LR__5373
30895     66          | 	byte	"f"
30896     00          | 	byte	0
30897                 | LR__5374
30897     30          | 	byte	"0"
30898     00          | 	byte	0
30899                 | LR__5375
30899     31          | 	byte	"1"
3089a     00          | 	byte	0
3089b                 | LR__5376
3089b     5F          | 	byte	"_"
3089c     00          | 	byte	0
3089d                 | LR__5377
3089d     2D          | 	byte	"-"
3089e     00          | 	byte	0
3089f                 | LR__5378
3089f     65          | 	byte	"e"
308a0     00          | 	byte	0
308a1                 | LR__5379
308a1     2E          | 	byte	"."
308a2     00          | 	byte	0
308a3                 | LR__5380
308a3     45          | 	byte	"E"
308a4     00          | 	byte	0
308a5                 | LR__5381
308a5     65          | 	byte	"e"
308a6     00          | 	byte	0
308a7                 | LR__5382
308a7     30          | 	byte	"0"
308a8     00          | 	byte	0
308a9                 | LR__5383
308a9     39          | 	byte	"9"
308aa     00          | 	byte	0
308ab                 | LR__5384
308ab     24          | 	byte	"$"
308ac     00          | 	byte	0
308ad                 | LR__5385
308ad     25          | 	byte	"%"
308ae     00          | 	byte	0
308af                 | LR__5386
308af     2D          | 	byte	"-"
308b0     00          | 	byte	0
308b1                 | LR__5387
308b1     24          | 	byte	"$"
308b2     00          | 	byte	0
308b3                 | LR__5388
308b3     25          | 	byte	"%"
308b4     00          | 	byte	0
308b5                 | LR__5389
308b5     30          | 	byte	"0"
308b6     00          | 	byte	0
308b7                 | LR__5390
308b7     39          | 	byte	"9"
308b8     00          | 	byte	0
308b9                 | LR__5391
308b9     5F          | 	byte	"_"
308ba     00          | 	byte	0
308bb                 | LR__5392
308bb     30          | 	byte	"0"
308bc     00          | 	byte	0
308bd                 | LR__5393
308bd     39          | 	byte	"9"
308be     00          | 	byte	0
308bf                 | LR__5394
308bf     61          | 	byte	"a"
308c0     00          | 	byte	0
308c1                 | LR__5395
308c1     66          | 	byte	"f"
308c2     00          | 	byte	0
308c3                 | LR__5396
308c3     5F          | 	byte	"_"
308c4     00          | 	byte	0
308c5                 | LR__5397
308c5     30          | 	byte	"0"
308c6     00          | 	byte	0
308c7                 | LR__5398
308c7     31          | 	byte	"1"
308c8     00          | 	byte	0
308c9                 | LR__5399
308c9     5F          | 	byte	"_"
308ca     00          | 	byte	0
308cb                 | LR__5400
308cb     30          | 	byte	"0"
308cc     00          | 	byte	0
308cd                 | LR__5401
308cd     39          | 	byte	"9"
308ce     00          | 	byte	0
308cf                 | LR__5402
308cf     5F          | 	byte	"_"
308d0     00          | 	byte	0
308d1                 | LR__5403
308d1     22          | 	byte	34
308d2     00          | 	byte	0
308d3                 | LR__5404
308d3     22          | 	byte	34
308d4     00          | 	byte	0
308d5                 | LR__5405
308d5     44 69 6D 3A 
308d9     20 61 74 20 
308dd     6C 69 6E 65 
308e1     20          | 	byte	"Dim: at line "
308e2     00          | 	byte	0
308e3                 | LR__5406
308e3     3A 20 77 61 
308e7     72 6E 69 6E 
308eb     67 3A 20 74 
308ef     68 65 20 76 
308f3     61 72 69 61 
308f7     62 6C 65 20 
308fb     65 78 69 73 
308ff     74 65 64 2E | 	byte	": warning: the variable existed."
30903     00          | 	byte	0
30904                 | LR__5407
30904     28          | 	byte	"("
30905     00          | 	byte	0
30906                 | LR__5408
30906     61 73       | 	byte	"as"
30908     00          | 	byte	0
30909                 | LR__5409
30909     61 73       | 	byte	"as"
3090b     00          | 	byte	0
3090c                 | LR__5410
3090c     2C          | 	byte	","
3090d     00          | 	byte	0
3090e                 | LR__5411
3090e     29          | 	byte	")"
3090f     00          | 	byte	0
30910                 | LR__5412
30910     29          | 	byte	")"
30911     00          | 	byte	0
30912                 | LR__5413
30912     61 73       | 	byte	"as"
30914     00          | 	byte	0
30915                 | LR__5414
30915     62 79 74 65 | 	byte	"byte"
30919     00          | 	byte	0
3091a                 | LR__5415
3091a     75 62 79 74 
3091e     65          | 	byte	"ubyte"
3091f     00          | 	byte	0
30920                 | LR__5416
30920     73 68 6F 72 
30924     74          | 	byte	"short"
30925     00          | 	byte	0
30926                 | LR__5417
30926     75 73 68 6F 
3092a     72 74       | 	byte	"ushort"
3092c     00          | 	byte	0
3092d                 | LR__5418
3092d     6C 6F 6E 67 | 	byte	"long"
30931     00          | 	byte	0
30932                 | LR__5419
30932     69 6E 74 65 
30936     67 65 72    | 	byte	"integer"
30939     00          | 	byte	0
3093a                 | LR__5420
3093a     75 6C 6F 6E 
3093e     67          | 	byte	"ulong"
3093f     00          | 	byte	0
30940                 | LR__5421
30940     69 6E 74 36 
30944     34          | 	byte	"int64"
30945     00          | 	byte	0
30946                 | LR__5422
30946     75 69 6E 74 
3094a     36 34       | 	byte	"uint64"
3094c     00          | 	byte	0
3094d                 | LR__5423
3094d     73 69 6E 67 
30951     6C 65       | 	byte	"single"
30953     00          | 	byte	0
30954                 | LR__5424
30954     64 6F 75 62 
30958     6C 65       | 	byte	"double"
3095a     00          | 	byte	0
3095b                 | LR__5425
3095b     73 74 72 69 
3095f     6E 67       | 	byte	"string"
30961     00          | 	byte	0
30962                 | LR__5426
30962     74 6F       | 	byte	"to"
30964     00          | 	byte	0
30965                 | LR__5427
30965     73 74 65 70 | 	byte	"step"
30969     00          | 	byte	0
3096a                 | LR__5428
3096a     73 2E       | 	byte	"s."
3096c     00          | 	byte	0
3096d                 | LR__5429
3096d     24          | 	byte	"$"
3096e     00          | 	byte	0
3096f                 | LR__5430
3096f     26 68       | 	byte	"&h"
30971     00          | 	byte	0
30972                 | LR__5431
30972     25          | 	byte	"%"
30973     00          | 	byte	0
30974                 | LR__5432
30974     26 62       | 	byte	"&b"
30976     00          | 	byte	0
30977                 | LR__5433
30977                 | 	byte	
30977     00          | 	byte	0
30978                 | LR__5434
30978     2F          | 	byte	"/"
30979     00          | 	byte	0
3097a                 | LR__5435
3097a                 | 	byte	
3097a     00          | 	byte	0
3097b                 | LR__5436
3097b     53 61 76 65 
3097f     64 20 61 73 
30983     20          | 	byte	"Saved as "
30984     00          | 	byte	0
30985                 | LR__5437
30985     2F          | 	byte	"/"
30986     00          | 	byte	0
30987                 | LR__5438
30987                 | 	byte	
30987     00          | 	byte	0
30988                 | LR__5439
30988     2F          | 	byte	"/"
30989     00          | 	byte	0
3098a                 | LR__5440
3098a     2F          | 	byte	"/"
3098b     00          | 	byte	0
3098c                 | LR__5441
3098c     2E 62 61 73 | 	byte	".bas"
30990     00          | 	byte	0
30991                 | LR__5442
30991     53 79 73 74 
30995     65 6D 20 65 
30999     72 72 6F 72 
3099d     20          | 	byte	"System error "
3099e     00          | 	byte	0
3099f                 | LR__5443
3099f     3A 20       | 	byte	": "
309a1     00          | 	byte	0
309a2                 | LR__5444
309a2     2E 62 61 73 | 	byte	".bas"
309a6     00          | 	byte	0
309a7                 | LR__5445
309a7     2F          | 	byte	"/"
309a8     00          | 	byte	0
309a9                 | LR__5446
309a9                 | 	byte	
309a9     00          | 	byte	0
309aa                 | LR__5447
309aa     4C 6F 61 64 
309ae     65 64 20    | 	byte	"Loaded "
309b1     00          | 	byte	0
309b2                 | LR__5448
309b2     2F          | 	byte	"/"
309b3     00          | 	byte	0
309b4                 | LR__5449
309b4     53 74 6F 70 
309b8     70 65 64 20 
309bc     61 74 20 6C 
309c0     69 6E 65 20 | 	byte	"Stopped at line "
309c4     00          | 	byte	0
309c5                 | LR__5450
309c5                 | 	byte	
309c5     00          | 	byte	0
309c6                 | LR__5451
309c6                 | 	byte	
309c6     00          | 	byte	0
309c7                 | LR__5452
309c7     2F 73 64 2F 
309cb     6D 65 64 69 
309cf     61 2F 68 2F | 	byte	"/sd/media/h/"
309d3     00          | 	byte	0
309d4                 | LR__5453
309d4     53 79 73 74 
309d8     65 6D 20 65 
309dc     72 72 6F 72 
309e0     20          | 	byte	"System error "
309e1     00          | 	byte	0
309e2                 | LR__5454
309e2     3A 20       | 	byte	": "
309e4     00          | 	byte	0
309e5                 | LR__5455
309e5                 | 	byte	
309e5     00          | 	byte	0
309e6                 | LR__5456
309e6                 | 	byte	
309e6     00          | 	byte	0
309e7                 | LR__5457
309e7     2F 73 64 2F 
309eb     6D 65 64 69 
309ef     61 2F 73 2F | 	byte	"/sd/media/s/"
309f3     00          | 	byte	0
309f4                 | LR__5458
309f4     53 79 73 74 
309f8     65 6D 20 65 
309fc     72 72 6F 72 
30a00     20          | 	byte	"System error "
30a01     00          | 	byte	0
30a02                 | LR__5459
30a02     3A 20       | 	byte	": "
30a04     00          | 	byte	0
30a05                 | LR__5460
30a05                 | 	byte	
30a05     00          | 	byte	0
30a06                 | LR__5461
30a06     6E 6F 6E 61 
30a0a     6D 65 2E 62 
30a0e     61 73       | 	byte	"noname.bas"
30a10     00          | 	byte	0
30a11                 | LR__5462
30a11     66 69 6C 65 
30a15     6E 61 6D 65 
30a19     20 65 78 70 
30a1d     65 63 74 65 
30a21     64          | 	byte	"filename expected"
30a22     00          | 	byte	0
30a23                 | LR__5463
30a23     72 65 61 64 | 	byte	"read"
30a27     00          | 	byte	0
30a28                 | LR__5464
30a28     77 72 69 74 
30a2c     65          | 	byte	"write"
30a2d     00          | 	byte	0
30a2e                 | LR__5465
30a2e     61 70 70 65 
30a32     6E 64       | 	byte	"append"
30a34     00          | 	byte	0
30a35                 | LR__5466
30a35     63 68 61 6E 
30a39     6E 65 6C 23 
30a3d     20 65 78 70 
30a41     65 63 74 65 
30a45     64          | 	byte	"channel# expected"
30a46     00          | 	byte	0
30a47                 | LR__5467
30a47     4F 70 65 6E 
30a4b     3A 20 69 6E 
30a4f     76 61 6C 69 
30a53     64 20 6D 6F 
30a57     64 65       | 	byte	"Open: invalid mode"
30a59     00          | 	byte	0
30a5a                 | LR__5468
30a5a     63 68 61 6E 
30a5e     6E 65 6C 23 
30a62     20 65 78 70 
30a66     65 63 74 65 
30a6a     64          | 	byte	"channel# expected"
30a6b     00          | 	byte	0
30a6c                 | LR__5469
30a6c     45 72 72 6F 
30a70     72 20       | 	byte	"Error "
30a72     00          | 	byte	0
30a73                 | LR__5470
30a73     3A 20       | 	byte	": "
30a75     00          | 	byte	0
30a76                 | LR__5471
30a76                 | 	byte	
30a76     00          | 	byte	0
30a77                 | LR__5472
30a77                 | 	byte	
30a77     00          | 	byte	0
30a78                 | LR__5473
30a78     72 6E 64 3A 
30a7c     20          | 	byte	"rnd: "
30a7d     00          | 	byte	0
30a7e                 | LR__5474
30a7e     72 6E 64 3A 
30a82     20          | 	byte	"rnd: "
30a83     00          | 	byte	0
30a84                 | LR__5475
30a84     67 65 74 65 
30a88     6E 76 73 75 
30a8c     73 74 61 69 
30a90     6E 3A 20    | 	byte	"getenvsustain: "
30a93     00          | 	byte	0
30a94                 | LR__5476
30a94     73 69 6E 3A 
30a98     20          | 	byte	"sin: "
30a99     00          | 	byte	0
30a9a                 | LR__5477
30a9a     6D 69 64 24 
30a9e     3A 20       | 	byte	"mid$: "
30aa0     00          | 	byte	0
30aa1                 | LR__5478
30aa1     6D 69 64 24 
30aa5     3A 20       | 	byte	"mid$: "
30aa7     00          | 	byte	0
30aa8                 | LR__5479
30aa8     72 69 67 68 
30aac     74 24 3A 20 | 	byte	"right$: "
30ab0     00          | 	byte	0
30ab1                 | LR__5480
30ab1     72 69 67 68 
30ab5     74 24 3A 20 | 	byte	"right$: "
30ab9     00          | 	byte	0
30aba                 | LR__5481
30aba     6C 65 66 74 
30abe     24 3A 20    | 	byte	"left$: "
30ac1     00          | 	byte	0
30ac2                 | LR__5482
30ac2     6C 65 66 74 
30ac6     24 3A 20    | 	byte	"left$: "
30ac9     00          | 	byte	0
30aca                 | LR__5483
30aca     61 73 63 3A 
30ace     20          | 	byte	"asc: "
30acf     00          | 	byte	0
30ad0                 | LR__5484
30ad0     61 73 63 3A 
30ad4     20          | 	byte	"asc: "
30ad5     00          | 	byte	0
30ad6                 | LR__5485
30ad6     6C 65 6E 3A 
30ada     20          | 	byte	"len: "
30adb     00          | 	byte	0
30adc                 | LR__5486
30adc     6C 65 6E 3A 
30ae0     20          | 	byte	"len: "
30ae1     00          | 	byte	0
30ae2                 | LR__5487
30ae2     63 68 72 24 
30ae6     3A 20       | 	byte	"chr$: "
30ae8     00          | 	byte	0
30ae9                 | LR__5488
30ae9     76 61 6C 3A 
30aed     20          | 	byte	"val: "
30aee     00          | 	byte	0
30aef                 | LR__5489
30aef     76 61 6C 3A 
30af3     20          | 	byte	"val: "
30af4     00          | 	byte	0
30af5                 | LR__5490
30af5     24          | 	byte	"$"
30af6     00          | 	byte	0
30af7                 | LR__5491
30af7     26 68       | 	byte	"&h"
30af9     00          | 	byte	0
30afa                 | LR__5492
30afa     25          | 	byte	"%"
30afb     00          | 	byte	0
30afc                 | LR__5493
30afc     26 62       | 	byte	"&b"
30afe     00          | 	byte	0
30aff                 | LR__5494
30aff     68 65 78 24 
30b03     3A 20       | 	byte	"hex$: "
30b05     00          | 	byte	0
30b06                 | LR__5495
30b06     62 69 6E 24 
30b0a     3A 20       | 	byte	"bin$: "
30b0c     00          | 	byte	0
30b0d                 | LR__5496
30b0d     63 6F 73 3A 
30b11     20          | 	byte	"cos: "
30b12     00          | 	byte	0
30b13                 | LR__5497
30b13     74 61 6E 3A 
30b17     20          | 	byte	"tan: "
30b18     00          | 	byte	0
30b19                 | LR__5498
30b19     61 73 69 6E 
30b1d     3A 20       | 	byte	"asin: "
30b1f     00          | 	byte	0
30b20                 | LR__5499
30b20     61 63 6F 73 
30b24     3A 20       | 	byte	"acos: "
30b26     00          | 	byte	0
30b27                 | LR__5500
30b27     61 74 6E 3A 
30b2b     20          | 	byte	"atn: "
30b2c     00          | 	byte	0
30b2d                 | LR__5501
30b2d     73 71 72 3A 
30b31     20          | 	byte	"sqr: "
30b32     00          | 	byte	0
30b33                 | LR__5502
30b33     73 74 69 63 
30b37     6B 3A 20    | 	byte	"stick: "
30b3a     00          | 	byte	0
30b3b                 | LR__5503
30b3b     73 74 72 69 
30b3f     67 3A 20    | 	byte	"strig: "
30b42     00          | 	byte	0
30b43                 | LR__5504
30b43     67 65 74 70 
30b47     69 78 65 6C 
30b4b     3A 20       | 	byte	"getpixel: "
30b4d     00          | 	byte	0
30b4e                 | LR__5505
30b4e     6C 6F 67 3A 
30b52     20          | 	byte	"log: "
30b53     00          | 	byte	0
30b54                 | LR__5506
30b54     50 72 69 6E 
30b58     74 20 74 6F 
30b5c     20 63 68 61 
30b60     6E 6E 65 6C 
30b64     20          | 	byte	"Print to channel "
30b65     00          | 	byte	0
30b66                 | LR__5507
30b66     20 42 41 53 
30b6a     49 43 20 62 
30b6e     79 74 65 73 
30b72     20 66 72 65 
30b76     65          | 	byte	" BASIC bytes free"
30b77     00          | 	byte	0
30b78                 | LR__5508
30b78                 | 	byte	
30b78     00          | 	byte	0
30b79                 | LR__5509
30b79     2F 73 64 2F 
30b7d     62 61 73    | 	byte	"/sd/bas"
30b80     00          | 	byte	0
30b81                 | LR__5510
30b81     57 6F 72 6B 
30b85     69 6E 67 20 
30b89     64 69 72 65 
30b8d     63 74 6F 72 
30b91     79 3A 20    | 	byte	"Working directory: "
30b94     00          | 	byte	0
30b95                 | LR__5511
30b95                 | 	byte	
30b95     00          | 	byte	0
30b96                 | LR__5512
30b96     2A          | 	byte	"*"
30b97     00          | 	byte	0
30b98                 | LR__5513
30b98                 | 	byte	
30b98     00          | 	byte	0
30b99                 | LR__5514
30b99     5B 64 69 72 
30b9d     5D 20       | 	byte	"[dir] "
30b9f     00          | 	byte	0
30ba0                 | LR__5515
30ba0     4D 6F 72 65 
30ba4     20 74 68 61 
30ba8     6E 20 31 32 
30bac     38 20 65 6E 
30bb0     74 72 69 65 
30bb4     73 20 66 6F 
30bb8     75 6E 64 3A 
30bbc     20 63 6C 65 
30bc0     61 6E 20 79 
30bc4     6F 75 72 20 
30bc8     64 69 72 65 
30bcc     63 74 6F 72 
30bd0     79          | 	byte	"More than 128 entries found: clean your directory"
30bd1     00          | 	byte	0
30bd2                 | LR__5516
30bd2     2A          | 	byte	"*"
30bd3     00          | 	byte	0
30bd4                 | LR__5517
30bd4                 | 	byte	
30bd4     00          | 	byte	0
30bd5                 | LR__5518
30bd5     4D 6F 72 65 
30bd9     20 74 68 61 
30bdd     6E 20 31 32 
30be1     38 20 65 6E 
30be5     74 72 69 65 
30be9     73 20 66 6F 
30bed     75 6E 64 3A 
30bf1     20 63 6C 65 
30bf5     61 6E 20 79 
30bf9     6F 75 72 20 
30bfd     64 69 72 65 
30c01     63 74 6F 72 
30c05     79          | 	byte	"More than 128 entries found: clean your directory"
30c06     00          | 	byte	0
30c07                 | LR__5519
30c07     2F          | 	byte	"/"
30c08     00          | 	byte	0
30c09                 | LR__5520
30c09     2F 73 64 2F 
30c0d     62 69 6E 2F | 	byte	"/sd/bin/"
30c11     00          | 	byte	0
30c12                 | LR__5521
30c12     53 79 73 74 
30c16     65 6D 20 65 
30c1a     72 72 6F 72 
30c1e     20          | 	byte	"System error "
30c1f     00          | 	byte	0
30c20                 | LR__5522
30c20     3A 20       | 	byte	": "
30c22     00          | 	byte	0
30c23                 | LR__5523
30c23                 | 	byte	
30c23     00          | 	byte	0
30c24                 | LR__5524
30c24     45 78 70 65 
30c28     63 74 65 64 
30c2c     20 6E 75 6D 
30c30     62 65 72 2C 
30c34     20 67 6F 74 
30c38     20 73 6F 6D 
30c3c     65 74 68 69 
30c40     6E 67 20 65 
30c44     6C 73 65 2E | 	byte	"Expected number, got something else."
30c48     00          | 	byte	0
30c49                 | LR__5525
30c49     43 61 6E 6E 
30c4d     6F 74 20 61 
30c51     64 64 20 61 
30c55     20 6E 75 6D 
30c59     62 65 72 20 
30c5d     74 6F 20 61 
30c61     20 73 74 72 
30c65     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30c69     00          | 	byte	0
30c6a                 | LR__5526
30c6a     43 61 6E 6E 
30c6e     6F 74 20 73 
30c72     75 62 73 74 
30c76     72 61 63 74 
30c7a     20 73 74 72 
30c7e     69 6E 67 73 
30c82     2E          | 	byte	"Cannot substract strings."
30c83     00          | 	byte	0
30c84                 | LR__5527
30c84     55 6E 6B 6E 
30c88     6F 77 6E 20 
30c8c     65 72 72 6F 
30c90     72 20 77 68 
30c94     69 6C 65 20 
30c98     61 64 64 69 
30c9c     6E 67 2E    | 	byte	"Unknown error while adding."
30c9f     00          | 	byte	0
30ca0                 | LR__5528
30ca0     55 6E 6B 6E 
30ca4     6F 77 6E 20 
30ca8     65 72 72 6F 
30cac     72 20 77 68 
30cb0     69 6C 65 20 
30cb4     73 75 62 73 
30cb8     74 72 61 63 
30cbc     74 69 6E 67 
30cc0     2E          | 	byte	"Unknown error while substracting."
30cc1     00          | 	byte	0
30cc2                 | LR__5529
30cc2     43 61 6E 6E 
30cc6     6F 74 20 64 
30cca     6F 20 6C 6F 
30cce     67 69 63 20 
30cd2     6F 70 65 72 
30cd6     61 74 69 6F 
30cda     6E 20 6F 6E 
30cde     20 73 74 72 
30ce2     69 6E 67 20 
30ce6     6F 72 20 66 
30cea     6C 6F 61 74 
30cee     2E          | 	byte	"Cannot do logic operation on string or float."
30cef     00          | 	byte	0
30cf0                 | LR__5530
30cf0     55 6E 6B 6E 
30cf4     6F 77 6E 20 
30cf8     65 72 72 6F 
30cfc     72 20 77 68 
30d00     69 6C 65 20 
30d04     64 6F 69 6E 
30d08     67 20 6C 6F 
30d0c     67 69 63 20 
30d10     6F 70 65 72 
30d14     61 74 69 6F 
30d18     6E 2E       | 	byte	"Unknown error while doing logic operation."
30d1a     00          | 	byte	0
30d1b                 | LR__5531
30d1b     43 61 6E 6E 
30d1f     6F 74 20 6D 
30d23     75 6C 74 69 
30d27     70 6C 79 20 
30d2b     73 74 72 69 
30d2f     6E 67 73 2E | 	byte	"Cannot multiply strings."
30d33     00          | 	byte	0
30d34                 | LR__5532
30d34     55 6E 6B 6E 
30d38     6F 77 6E 20 
30d3c     65 72 72 6F 
30d40     72 20 77 68 
30d44     69 6C 65 20 
30d48     6D 75 6C 74 
30d4c     69 70 6C 79 
30d50     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30d54     00          | 	byte	0
30d55                 | LR__5533
30d55     43 61 6E 6E 
30d59     6F 74 20 64 
30d5d     69 76 69 64 
30d61     65 20 73 74 
30d65     72 69 6E 67 
30d69     73 2E       | 	byte	"Cannot divide strings."
30d6b     00          | 	byte	0
30d6c                 | LR__5534
30d6c     55 6E 6B 6E 
30d70     6F 77 6E 20 
30d74     65 72 72 6F 
30d78     72 20 77 68 
30d7c     69 6C 65 20 
30d80     64 69 76 69 
30d84     64 69 6E 67 
30d88     2E          | 	byte	"Unknown error while dividing."
30d89     00          | 	byte	0
30d8a                 | LR__5535
30d8a     43 61 6E 6E 
30d8e     6F 74 20 63 
30d92     6F 6D 70 75 
30d96     74 65 20 61 
30d9a     20 70 6F 77 
30d9e     65 72 20 6F 
30da2     66 20 61 20 
30da6     73 74 72 69 
30daa     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30dad     00          | 	byte	0
30dae                 | LR__5536
30dae     55 6E 6B 6E 
30db2     6F 77 6E 20 
30db6     65 72 72 6F 
30dba     72 20 77 68 
30dbe     69 6C 65 20 
30dc2     63 6F 6D 70 
30dc6     75 74 69 6E 
30dca     67 20 61 20 
30dce     70 6F 77 65 
30dd2     72 2E       | 	byte	"Unknown error while computing a power."
30dd4     00          | 	byte	0
30dd5                 | LR__5537
30dd5     52 69 67 68 
30dd9     74 20 70 61 
30ddd     72 65 6E 74 
30de1     68 65 73 69 
30de5     73 20 65 78 
30de9     70 65 63 74 
30ded     65 64 2E    | 	byte	"Right parenthesis expected."
30df0     00          | 	byte	0
30df1                 | LR__5538
30df1     45 78 70 65 
30df5     63 74 65 64 
30df9     20 73 74 72 
30dfd     69 6E 67 2E | 	byte	"Expected string."
30e01     00          | 	byte	0
30e02                 | LR__5539
30e02     45 78 70 65 
30e06     63 74 65 64 
30e0a     20 66 6C 6F 
30e0e     61 74 2E    | 	byte	"Expected float."
30e11     00          | 	byte	0
30e12                 | LR__5540
30e12     45 78 70 65 
30e16     63 74 65 64 
30e1a     20 75 6E 73 
30e1e     69 67 6E 65 
30e22     64 20 69 6E 
30e26     74 65 67 65 
30e2a     72 2E       | 	byte	"Expected unsigned integer."
30e2c     00          | 	byte	0
30e2d                 | LR__5541
30e2d     45 78 70 65 
30e31     63 74 65 64 
30e35     20 69 6E 74 
30e39     65 67 65 72 
30e3d     2E          | 	byte	"Expected integer."
30e3e     00          | 	byte	0
30e3f                 | LR__5542
30e3f     4E 6F 20 6D 
30e43     6F 72 65 20 
30e47     76 61 72 69 
30e4b     61 62 6C 65 
30e4f     20 73 6C 6F 
30e53     74 73 2E    | 	byte	"No more variable slots."
30e56     00          | 	byte	0
30e57                 | LR__5543
30e57     56 61 72 69 
30e5b     61 62 6C 65 
30e5f     20 6E 6F 74 
30e63     20 66 6F 75 
30e67     6E 64 2E    | 	byte	"Variable not found."
30e6a     00          | 	byte	0
30e6b                 | LR__5544
30e6b     43 6F 6D 6D 
30e6f     61 20 65 78 
30e73     70 65 63 74 
30e77     65 64 2E    | 	byte	"Comma expected."
30e7a     00          | 	byte	0
30e7b                 | LR__5545
30e7b     43 6F 6D 6D 
30e7f     61 20 6F 72 
30e83     20 73 65 6D 
30e87     69 63 6F 6C 
30e8b     6F 6E 20 65 
30e8f     78 70 65 63 
30e93     74 65 64 2E | 	byte	"Comma or semicolon expected."
30e97     00          | 	byte	0
30e98                 | LR__5546
30e98     55 6E 6B 6E 
30e9c     6F 77 6E 20 
30ea0     63 6F 6D 6D 
30ea4     61 6E 64 2E | 	byte	"Unknown command."
30ea8     00          | 	byte	0
30ea9                 | LR__5547
30ea9     53 74 61 63 
30ead     6B 20 75 6E 
30eb1     64 65 72 66 
30eb5     6C 6F 77 2E | 	byte	"Stack underflow."
30eb9     00          | 	byte	0
30eba                 | LR__5548
30eba     43 61 6E 6E 
30ebe     6F 74 20 65 
30ec2     78 65 63 75 
30ec6     74 65 20 67 
30eca     6F 74 6F 20 
30ece     69 6E 20 74 
30ed2     68 65 20 69 
30ed6     6D 6D 65 64 
30eda     69 61 74 65 
30ede     20 6D 6F 64 
30ee2     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
30ee4     00          | 	byte	0
30ee5                 | LR__5549
30ee5     43 61 6E 6E 
30ee9     6F 74 20 6C 
30eed     6F 61 64 20 
30ef1     66 72 6F 6D 
30ef5     20 74 68 69 
30ef9     73 20 66 69 
30efd     6C 65 2E    | 	byte	"Cannot load from this file."
30f00     00          | 	byte	0
30f01                 | LR__5550
30f01     54 68 65 20 
30f05     70 72 6F 67 
30f09     72 61 6D 20 
30f0d     69 73 20 65 
30f11     6D 70 74 79 
30f15     2E          | 	byte	"The program is empty."
30f16     00          | 	byte	0
30f17                 | LR__5551
30f17     49 66 20 61 
30f1b     66 74 65 72 
30f1f     20 69 66 2E | 	byte	"If after if."
30f23     00          | 	byte	0
30f24                 | LR__5552
30f24     45 6D 70 74 
30f28     79 20 65 78 
30f2c     70 72 65 73 
30f30     73 69 6F 6E 
30f34     2E          | 	byte	"Empty expression."
30f35     00          | 	byte	0
30f36                 | LR__5553
30f36     53 74 72 69 
30f3a     6E 67 20 65 
30f3e     78 70 65 63 
30f42     74 65 64 2E | 	byte	"String expected."
30f46     00          | 	byte	0
30f47                 | LR__5554
30f47     49 6E 74 65 
30f4b     72 70 72 65 
30f4f     74 65 72 20 
30f53     69 6E 74 65 
30f57     72 6E 61 6C 
30f5b     20 65 72 72 
30f5f     6F 72 2E    | 	byte	"Interpreter internal error."
30f62     00          | 	byte	0
30f63                 | LR__5555
30f63     45 78 70 65 
30f67     63 74 65 64 
30f6b     20 61 73 73 
30f6f     69 67 6E 2E | 	byte	"Expected assign."
30f73     00          | 	byte	0
30f74                 | LR__5556
30f74     45 78 70 65 
30f78     63 74 65 64 
30f7c     20 27 74 6F 
30f80     27 2E       | 	byte	"Expected 'to'."
30f82     00          | 	byte	0
30f83                 | LR__5557
30f83     45 78 70 65 
30f87     63 74 65 64 
30f8b     20 69 6E 74 
30f8f     65 67 65 72 
30f93     20 76 61 72 
30f97     69 61 62 6C 
30f9b     65 2E       | 	byte	"Expected integer variable."
30f9d     00          | 	byte	0
30f9e                 | LR__5558
30f9e     55 6E 69 6E 
30fa2     69 74 69 61 
30fa6     6C 69 7A 65 
30faa     64 20 76 61 
30fae     72 69 61 62 
30fb2     6C 65 20 69 
30fb6     6E 20 27 6E 
30fba     65 78 74 27 
30fbe     2C 20 75 73 
30fc2     65 20 27 66 
30fc6     6F 72 27 20 
30fca     62 65 66 6F 
30fce     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30fd1     00          | 	byte	0
30fd2                 | LR__5559
30fd2     4E 6F 20 6D 
30fd6     6F 72 65 20 
30fda     73 6C 6F 74 
30fde     73 20 66 6F 
30fe2     72 20 27 66 
30fe6     6F 72 27 2E | 	byte	"No more slots for 'for'."
30fea     00          | 	byte	0
30feb                 | LR__5560
30feb     27 4E 65 78 
30fef     74 27 20 64 
30ff3     6F 65 73 6E 
30ff7     27 74 20 6D 
30ffb     61 74 63 68 
30fff     20 27 66 6F 
31003     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
31006     00          | 	byte	0
31007                 | LR__5561
31007     27 47 6F 74 
3100b     6F 27 20 74 
3100f     61 72 67 65 
31013     74 20 6C 69 
31017     6E 65 20 6E 
3101b     6F 74 20 66 
3101f     6F 75 6E 64 
31023     2E          | 	byte	"'Goto' target line not found."
31024     00          | 	byte	0
31025                 | LR__5562
31025     42 61 64 20 
31029     6E 75 6D 62 
3102d     65 72 20 6F 
31031     66 20 70 61 
31035     72 61 6D 65 
31039     74 65 72 73 | 	byte	"Bad number of parameters"
3103d     00          | 	byte	0
3103e                 | LR__5563
3103e     46 75 6E 63 
31042     74 69 6F 6E 
31046     20 75 6E 64 
3104a     65 66 69 6E 
3104e     65 64 20 66 
31052     6F 72 20 73 
31056     74 72 69 6E 
3105a     67 73       | 	byte	"Function undefined for strings"
3105c     00          | 	byte	0
3105d                 | LR__5564
3105d     42 61 64 20 
31061     70 61 72 61 
31065     6D 65 74 65 
31069     72 2E       | 	byte	"Bad parameter."
3106b     00          | 	byte	0
3106c                 | LR__5565
3106c     43 61 6E 6E 
31070     6F 74 20 64 
31074     65 63 6C 61 
31078     72 65 20 61 
3107c     6E 20 61 72 
31080     72 61 79 3A 
31084     20 74 68 65 
31088     20 76 61 72 
3108c     69 61 62 6C 
31090     65 20 65 78 
31094     69 73 74 73 
31098     2E          | 	byte	"Cannot declare an array: the variable exists."
31099     00          | 	byte	0
3109a                 | LR__5566
3109a     45 78 70 65 
3109e     63 74 65 64 
310a2     20 27 28 27 
310a6     2E          | 	byte	"Expected '('."
310a7     00          | 	byte	0
310a8                 | LR__5567
310a8     45 78 70 65 
310ac     63 74 65 64 
310b0     20 27 29 27 
310b4     20 6F 72 20 
310b8     27 2C 27 2E | 	byte	"Expected ')' or ','."
310bc     00          | 	byte	0
310bd                 | LR__5568
310bd     4E 6F 20 6D 
310c1     6F 72 65 20 
310c5     74 68 61 6E 
310c9     20 33 20 64 
310cd     69 6D 65 6E 
310d1     73 69 6F 6E 
310d5     73 20 73 75 
310d9     70 70 6F 72 
310dd     74 65 64    | 	byte	"No more than 3 dimensions supported"
310e0     00          | 	byte	0
310e1                 | LR__5569
310e1     56 61 72 69 
310e5     61 62 6C 65 
310e9     20 6E 61 6D 
310ed     65 20 65 78 
310f1     70 65 63 74 
310f5     65 64       | 	byte	"Variable name expected"
310f7     00          | 	byte	0
310f8                 | LR__5570
310f8     54 79 70 65 
310fc     20 6E 61 6D 
31100     65 20 65 78 
31104     70 65 63 74 
31108     65 64       | 	byte	"Type name expected"
3110a     00          | 	byte	0
3110b                 | LR__5571
3110b     54 79 70 65 
3110f     20 6E 6F 74 
31113     20 73 75 70 
31117     70 6F 72 74 
3111b     65 64 20 79 
3111f     65 74       | 	byte	"Type not supported yet"
31121     00          | 	byte	0
31122                 | LR__5572
31122     41 72 72 61 
31126     79 20 69 6E 
3112a     64 65 78 20 
3112e     6F 75 74 20 
31132     6F 66 20 72 
31136     61 6E 67 65 | 	byte	"Array index out of range"
3113a     00          | 	byte	0
3113b                 | LR__5573
3113b     42 61 64 20 
3113f     74 79 70 65 
31143     20 77 68 69 
31147     6C 65 20 61 
3114b     73 73 69 67 
3114f     6E 69 6E 67 
31153     20 74 6F 20 
31157     61 72 72 61 
3115b     79          | 	byte	"Bad type while assigning to array"
3115c     00          | 	byte	0
3115d                 | LR__5574
3115d     45 72 72 6F 
31161     72 20       | 	byte	"Error "
31163     00          | 	byte	0
31164                 | LR__5575
31164     3A 20       | 	byte	": "
31166     00          | 	byte	0
31167                 | LR__5576
31167     2F 73 64    | 	byte	"/sd"
3116a     00          | 	byte	0
3116b                 | LR__5577
3116b     2F 73 64 2F 
3116f     62 61 73    | 	byte	"/sd/bas"
31172     00          | 	byte	0
31173                 | LR__5578
31173     2F 73 64 2F 
31177     62 61 73    | 	byte	"/sd/bas"
3117a     00          | 	byte	0
3117b                 | LR__5579
3117b     20 42 41 53 
3117f     49 43 20 62 
31183     79 74 65 73 
31187     20 66 72 65 
3118b     65          | 	byte	" BASIC bytes free"
3118c     00          | 	byte	0
3118d                 | LR__5580
3118d     52 65 61 64 
31191     79          | 	byte	"Ready"
31192     00          | 	byte	0
31193                 | LR__5581
31193     6E 6F 6E 61 
31197     6D 65 2E 62 
3119b     61 73       | 	byte	"noname.bas"
3119d     00          | 	byte	0
3119e                 | LR__5582
3119e                 | 	byte	
3119e     00          | 	byte	0
3119f     00          | 	alignl
311a0                 | _dat_
311a0     00 00 00 00 
311a4     00 00 00 00 
311a8     00 00 00 00 
311ac     00 00 00 00 | 	byte	$00[16]
311b0     61 41 17 0E 
311b4     62 42 00 00 
311b8     63 43 19 10 
311bc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
311c0     65 45 18 0F 
311c4     66 46 00 00 
311c8     67 47 00 00 
311cc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
311d0     69 49 00 00 
311d4     6A 4A 00 00 
311d8     6B 4B 00 00 
311dc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
311e0     6D 4D 00 00 
311e4     6E 4E 1A 11 
311e8     6F 4F 1E 15 
311ec     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
311f0     71 51 00 00 
311f4     72 52 00 00 
311f8     73 53 1B 12 
311fc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
31200     75 55 00 00 
31204     76 56 00 00 
31208     77 57 00 00 
3120c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31210     79 59 00 00 
31214     7A 5A 1D 14 
31218     31 21 04 00 
3121c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
31220     33 23 06 00 
31224     34 24 07 00 
31228     35 25 08 00 
3122c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
31230     37 26 0A 00 
31234     38 2A 0B 00 
31238     39 28 0C 00 
3123c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
31240     8D 8D 00 00 
31244     9B 9B 00 00 
31248     88 88 00 00 
3124c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
31250     20 20 00 00 
31254     2D 5F 00 00 
31258     3D 2B 00 00 
3125c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
31260     5D 7D 00 00 
31264     5C 7C 00 00 
31268     23 7E 00 00 
3126c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
31270     27 22 00 00 
31274     60 7E 03 00 
31278     2C 3C 00 00 
3127c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31280     2F 3F 00 00 
31284     B9 B9 00 00 
31288     BA 00 00 00 
3128c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
31290     BC 00 00 00 
31294     BD 00 00 00 
31298     BE 00 00 00 
3129c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
312a0     C0 00 00 00 
312a4     C1 00 00 00 
312a8     C2 00 00 00 
312ac     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
312b0     C4 00 00 00 
312b4     C5 00 00 00 
312b8     C6 00 00 00 
312bc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
312c0     C8 00 00 00 
312c4     C9 00 00 00 
312c8     CA 00 00 00 
312cc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
312d0     7F 7F 00 00 
312d4     CC 00 00 00 
312d8     CD 00 00 00 
312dc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
312e0     CF 00 00 00 
312e4     D0 00 00 00 
312e8     D1 00 00 00 
312ec     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
312f0     2F 2F 00 00 
312f4     2A 2A 00 00 
312f8     2D 2D 00 00 
312fc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
31300     8D 8D 00 00 
31304     31 31 00 00 
31308     32 32 00 00 
3130c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31310     34 34 00 00 
31314     35 35 00 00 
31318     36 36 00 00 
3131c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
31320     38 38 00 00 
31324     39 39 00 00 
31328     30 30 00 00 
3132c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
31330     5C 7C 00 00 
31334     00 00 00 00 
31338     00 00 00 00 
3133c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
31340     00 00 00 00 
      ...             
31398     00 00 00 00 
3139c     00 00 00 00 | 	byte	$00[96]
313a0     2B 00 A6 F2 
313a4     24 A7 09 80 
313a8     5B 88 4D 89 
313ac     80 88 A5 88 | atari_spl file "atari.spl"
313b0     6D 88 B8 88 
313b4     80 88 CB 88 
313b8     92 88 A5 88 
313bc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
313c0     A5 88 CA 88 
313c4     A6 88 DD 88 
313c8     B8 88 AB 89 
313cc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
313d0     C8 AD C6 F1 
313d4     91 06 B6 FF 
313d8     13 00 4A 00 
313dc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
313e0     5D 00 5E 00 
313e4     5D 00 5E 00 
313e8     5E 00 5D 00 
313ec     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
313f0     38 00 83 00 
313f4     25 00 83 00 
313f8     C3 FE D1 04 
313fc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
31400     48 88 38 85 
31404     41 8A CB 88 
31408     28 89 B8 88 
3140c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
31410     15 89 03 89 
31414     02 89 15 89 
31418     16 89 15 89 
3141c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
31420     15 89 3A 89 
31424     72 89 E3 89 
31428     52 83 AD 97 
3142c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
31430     0C 02 B6 FF 
31434     E1 00 A8 00 
31438     F3 00 A8 00 
3143c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
31440     CE 00 CD 00 
31444     CD 00 BA 00 
31448     E1 00 BB 00 
3144c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
31450     DF 00 C9 FF 
31454     E6 01 B6 06 
31458     EE DD 8D 98 
3145c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
31460     97 89 73 89 
31464     3B 89 60 89 
31468     60 89 60 89 
3146c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
31470     73 89 72 89 
31474     85 89 73 89 
31478     AA 89 60 89 
3147c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
31480     E8 8A 18 86 
31484     92 88 A5 C2 
31488     E0 00 C3 05 
3148c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
31490     F2 00 64 01 
31494     06 01 3E 01 
31498     2B 01 2B 01 
3149c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
314a0     2B 01 2A 01 
314a4     2B 01 2B 01 
314a8     2B 01 18 01 
314ac     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
314b0     39 07 61 F3 
314b4     C0 AF 37 85 
314b8     0F 88 8B 8A 
314bc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
314c0     AB 89 D0 89 
314c4     AB 89 D0 89 
314c8     D0 89 CF 89 
314cc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
314d0     D0 89 F5 89 
314d4     BD 89 08 8A 
314d8     CF 89 E8 8A 
314dc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
314e0     53 B3 0D F8 
314e4     F4 07 38 00 
314e8     63 01 63 01 
314ec     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
314f0     88 01 88 01 
314f4     76 01 88 01 
314f8     88 01 89 01 
314fc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
31500     75 01 AE 01 
31504     76 01 88 01 
31508     4A 00 46 06 
3150c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
31510     08 8A 9A 86 
31514     33 8B 08 8A 
31518     2D 8A F5 89 
3151c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
31520     2D 8A 2D 8A 
31524     2E 8A 1B 8A 
31528     40 8A 2D 8A 
3152c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
31530     2E 8A 79 8A 
31534     66 8A C8 8B 
31538     72 82 2B 97 
3153c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
31540     1D 02 05 01 
31544     F8 01 C0 01 
31548     0B 02 C0 01 
3154c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
31550     F9 01 D3 01 
31554     F8 01 D3 01 
31558     F8 01 D2 01 
3155c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
31560     E6 01 2B 01 
31564     8E 02 5F 07 
31568     F7 E2 ED 9C 
3156c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
31570     E8 8A 78 8A 
31574     78 8A 65 8A 
31578     8B 8A 78 8A 
3157c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
31580     8B 8A 9D 8A 
31584     9D 8A 8B 8A 
31588     C2 8A 78 8A 
3158c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
31590     70 8C 18 86 
31594     8B 8A 23 C9 
31598     CB 03 C4 05 
3159c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
315a0     0B 02 7B 02 
315a4     1E 02 55 02 
315a8     30 02 43 02 
315ac     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
315b0     43 02 44 02 
315b4     43 02 30 02 
315b8     68 02 31 02 
315bc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
315c0     07 08 3F F7 
315c4     73 B2 13 85 
315c8     15 89 ED 8B 
315cc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
315d0     B0 8A FB 8A 
315d4     D5 8A FA 8A 
315d8     E8 8A FB 8A 
315dc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
315e0     E8 8A 21 8B 
315e4     E7 8A 33 8B 
315e8     E8 8A 26 8C 
315ec     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
315f0     8D B0 27 F6 
315f4     9C 08 AD 01 
315f8     7B 02 8D 02 
315fc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
31600     A1 02 A0 02 
31604     A1 02 A0 02 
31608     A0 02 A0 02 
3160c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
31610     7B 02 D8 02 
31614     7B 02 C6 02 
31618     3E 01 C3 05 
3161c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
31620     00 8C 2A 86 
31624     E0 8C FA 8A 
31628     6A 8B FB 8A 
3162c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
31630     45 8B 45 8B 
31634     45 8B 6B 8B 
31638     46 8B 59 8B 
3163c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
31640     6B 8B 6B 8B 
31644     6B 8B 6B 8B 
31648     7D 8B 7D 8B 
3164c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
31650     90 8B 91 8B 
31654     90 8B 90 8B 
31658     A3 8B A3 8B 
3165c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
31660     B5 8B B6 8B 
31664     B5 8B B5 8B 
31668     B6 8B C8 8B 
3166c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
31670     C8 8B DA 8B 
31674     DB 8B DB 8B 
31678     DB 8B DC 8B 
3167c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
31680     EE 8B EE 8B 
31684     00 8C 01 8C 
31688     00 8C 01 8C 
3168c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
31690     12 8C 13 8C 
31694     13 8C 26 8C 
31698     26 8C 26 8C 
3169c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
316a0     38 8C 38 8C 
316a4     38 8C 38 8C 
316a8     4B 8C 4B 8C 
316ac     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
316b0     5E 8C 5E 8C 
316b4     5E 8C 5E 8C 
316b8     70 8C 70 8C 
316bc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
316c0     70 8C 83 8C 
316c4     83 8C 83 8C 
316c8     83 8C 96 8C 
316cc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
316d0     95 8C A9 8C 
316d4     A9 8C A8 8C 
316d8     A8 8C A8 8C 
316dc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
316e0     BB 8C BB 8C 
316e4     BB 8C CE 8C 
316e8     CE 8C CE 8C 
316ec     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
316f0     E0 8C E1 8C 
316f4     E1 8C E0 8C 
316f8     F4 8C F2 8C 
316fc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
31700     05 8D 05 8D 
31704     06 8D 06 8D 
31708     19 8D 19 8D 
3170c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
31710     18 8D 2B 8D 
31714     2B 8D 2B 8D 
31718     2A 8D 3E 8D 
3171c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
31720     3E 8D 51 8D 
31724     50 8D 50 8D 
31728     50 8D 51 8D 
3172c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
31730     63 8D 64 8D 
31734     76 8D 75 8D 
31738     75 8D 76 8D 
3173c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
31740     88 8D 88 8D 
31744     89 8D 9B 8D 
31748     9A 8D 9B 8D 
3174c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
31750     AD 8D AE 8D 
31754     AD 8D AE 8D 
31758     C1 8D C1 8D 
3175c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
31760     D3 8D D3 8D 
31764     D3 8D D3 8D 
31768     D3 8D E6 8D 
3176c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
31770     E6 8D E6 8D 
31774     F9 8D F9 8D 
31778     F9 8D F8 8D 
3177c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
31780     0B 8E 0B 8E 
31784     1D 8E 1D 8E 
31788     1E 8E 1E 8E 
3178c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
31790     31 8E 31 8E 
31794     31 8E 42 8E 
31798     43 8E 43 8E 
3179c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
317a0     56 8E 56 8E 
317a4     55 8E 56 8E 
317a8     68 8E 69 8E 
317ac     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
317b0     69 8E 7B 8E 
317b4     7C 8E 7B 8E 
317b8     7B 8E 8D 8E 
317bc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
317c0     8D 8E A1 8E 
317c4     A0 8E A1 8E 
317c8     A1 8E A0 8E 
317cc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
317d0     B3 8E B3 8E 
317d4     C6 8E C5 8E 
317d8     C6 8E C6 8E 
317dc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
317e0     D8 8E D9 8E 
317e4     D8 8E EC 8E 
317e8     EB 8E EC 8E 
317ec     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
317f0     FE 8E FE 8E 
317f4     FE 8E FE 8E 
317f8     10 8F 10 8F 
317fc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
31800     11 8F 23 8F 
31804     24 8F 23 8F 
31808     24 8F 37 8F 
3180c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
31810     36 8F 36 8F 
31814     48 8F 49 8F 
31818     49 8F 49 8F 
3181c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
31820     5B 8F 5C 8F 
31824     5B 8F 6E 8F 
31828     6E 8F 6E 8F 
3182c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
31830     81 8F 81 8F 
31834     81 8F 81 8F 
31838     93 8F 93 8F 
3183c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
31840     93 8F A6 8F 
31844     A6 8F A6 8F 
31848     A6 8F B9 8F 
3184c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
31850     B9 8F B9 8F 
31854     CC 8F CB 8F 
31858     CB 8F CC 8F 
3185c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
31860     DF 8F DE 8F 
31864     DE 8F F1 8F 
31868     F1 8F F1 8F 
3186c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
31870     03 90 04 90 
31874     04 90 04 90 
31878     16 90 17 90 
3187c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31880     29 90 28 90 
31884     29 90 28 90 
31888     29 90 3C 90 
3188c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
31890     3C 90 4F 90 
31894     4E 90 4E 90 
31898     4E 90 4E 90 
3189c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
318a0     61 90 61 90 
318a4     73 90 74 90 
318a8     74 90 74 90 
318ac     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
318b0     87 90 86 90 
318b4     87 90 86 90 
318b8     99 90 99 90 
318bc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
318c0     AB 90 AB 90 
318c4     AC 90 AB 90 
318c8     AB 90 BF 90 
318cc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
318d0     BE 90 D1 90 
318d4     D0 90 D1 90 
318d8     D1 90 D1 90 
318dc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
318e0     E3 90 E4 90 
318e4     F6 90 F6 90 
318e8     F6 90 F6 90 
318ec     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
318f0     09 91 0A 91 
318f4     0A 91 1C 91 
318f8     1C 91 1C 91 
318fc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
31900     2F 91 2E 91 
31904     2F 91 2F 91 
31908     2E 91 41 91 
3190c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
31910     41 91 53 91 
31914     54 91 54 91 
31918     53 91 54 91 
3191c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
31920     67 91 67 91 
31924     79 91 7A 91 
31928     79 91 78 91 
3192c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
31930     8C 91 8B 91 
31934     8C 91 8C 91 
31938     9E 91 9E 91 
3193c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
31940     B1 91 B1 91 
31944     B2 91 B1 91 
31948     B1 91 C4 91 
3194c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
31950     C4 91 D6 91 
31954     D7 91 D7 91 
31958     D7 91 D6 91 
3195c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
31960     EA 91 EA 91 
31964     EA 91 FC 91 
31968     FC 91 FB 91 
3196c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
31970     0E 92 0F 92 
31974     0F 92 0E 92 
31978     21 92 21 92 
3197c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31980     21 92 34 92 
31984     33 92 34 92 
31988     34 92 47 92 
3198c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
31990     46 92 47 92 
31994     59 92 59 92 
31998     59 92 59 92 
3199c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
319a0     6C 92 6C 92 
319a4     6B 92 7E 92 
319a8     7E 92 7E 92 
319ac     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
319b0     92 92 91 92 
319b4     91 92 90 92 
319b8     91 92 A4 92 
319bc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
319c0     A3 92 B6 92 
319c4     B6 92 B7 92 
319c8     B7 92 B6 92 
319cc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
319d0     CA 92 C9 92 
319d4     CA 92 DC 92 
319d8     DC 92 DC 92 
319dc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
319e0     EF 92 EF 92 
319e4     EF 92 EF 92 
319e8     01 93 01 93 
319ec     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
319f0     15 93 14 93 
319f4     14 93 14 93 
319f8     14 93 27 93 
319fc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31a00     27 93 39 93 
31a04     3A 93 39 93 
31a08     39 93 39 93 
31a0c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31a10     4B 93 4C 93 
31a14     5F 93 5F 93 
31a18     5F 93 5E 93 
31a1c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31a20     5F 93 84 93 
31a24     4C 93 96 93 
31a28     5F 93 AE 94 
31a2c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31a30     7B C1 00 00 
31a34     00 00 00 00 
31a38     00 00 00 00 
31a3c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a40     00 00 00 00 | 	byte	$00, $00, $00, $00
31a44     00 00 00 00 | zero long 0
31a48     7A D7 00 80 
31a4c     87 8A 48 8F 
31a50     EC 8C 76 8D 
31a54     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31a58     3C 8D 82 8D 
31a5c     42 8D 88 8D 
31a60     8C 8D 8E 8D 
31a64     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31a68     97 8D DE 8D 
31a6c     E1 8D F1 8E 
31a70     D8 8C A3 83 
31a74     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31a78     65 71 C9 65 
31a7c     FC 64 C4 65 
31a80     C1 65 BF 65 
31a84     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31a88     B6 65 B4 65 
31a8c     B2 65 AE 65 
31a90     AC 65 ED 65 
31a94     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31a98     5E 65 25 66 
31a9c     FA 62 23 6B 
31aa0     B5 6C 61 0A 
31aa4     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31aa8     5D 90 BE 8D 
31aac     47 8E C3 8D 
31ab0     09 8E C9 8D 
31ab4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31ab8     15 8E 19 8E 
31abc     1B 8E 62 8E 
31ac0     64 8E 68 8E 
31ac4     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31ac8     B5 8E 4C 90 
31acc     FA 84 3C 9D 
31ad0     98 13 79 6D 
31ad4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31ad8     D9 66 50 66 
31adc     D4 66 4B 66 
31ae0     8C 66 46 66 
31ae4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31ae8     81 66 3A 66 
31aec     7C 66 36 66 
31af0     76 66 30 66 
31af4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31af8     6B 66 88 72 
31afc     BF 37 E7 B7 
31b00     75 83 8B 8E 
31b04     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31b08     94 8E 96 8E 
31b0c     DD 8E 9C 8E 
31b10     E2 8E A2 8E 
31b14     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31b18     EE 8E AE 8E 
31b1c     38 8F B5 8E 
31b20     3F 8F FD 8E 
31b24     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31b28     A5 87 1E E3 
31b2c     6D 5D FA 71 
31b30     41 64 25 67 
31b34     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31b38     D9 66 1A 67 
31b3c     18 67 15 67 
31b40     12 67 0F 67 
31b44     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31b48     07 67 C0 66 
31b4c     01 67 BC 66 
31b50     B8 66 DE 64 
31b54     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31b58     43 E5 1F 8B 
31b5c     14 8A F1 90 
31b60     1C 8F 63 8F 
31b64     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31b68     29 8F 6E 8F 
31b6c     72 8F 75 8F 
31b70     34 8F BE 8F 
31b74     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31b78     84 8F 87 8F 
31b7c     CC 8F 56 90 
31b80     67 91 49 80 
31b84     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31b88     46 77 A6 66 
31b8c     E8 66 B0 67 
31b90     AD 67 ED 67 
31b94     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31b98     A2 67 E3 67 
31b9c     9D 67 9A 67 
31ba0     98 67 94 67 
31ba4     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31ba8     49 67 CD 67 
31bac     28 65 5F 6E 
31bb0     82 67 3A 01 
31bb4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31bb8     C2 91 A9 8F 
31bbc     EF 8F AE 8F 
31bc0     F4 8F B5 8F 
31bc4     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31bc8     01 90 03 90 
31bcc     07 90 09 90 
31bd0     0C 90 53 90 
31bd4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31bd8     18 90 44 93 
31bdc     85 84 D6 9D 
31be0     87 1F 2F 75 
31be4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31be8     C4 68 F6 67 
31bec     BE 68 F1 67 
31bf0     76 68 2E 68 
31bf4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31bf8     27 68 24 68 
31bfc     64 68 1E 68 
31c00     5F 68 19 68 
31c04     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31c08     DC 68 56 72 
31c0c     7E 36 C2 B8 
31c10     D7 84 73 90 
31c14     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31c18     7B 90 7F 90 
31c1c     82 90 84 90 
31c20     CB 90 8B 90 
31c24     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31c28     D7 90 96 90 
31c2c     20 91 59 90 
31c30     25 91 A2 90 
31c34     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31c38     D0 89 40 EE 
31c3c     12 64 C4 71 
31c40     29 66 0C 69 
31c44     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31c48     C0 68 02 69 
31c4c     FE 68 FB 68 
31c50     F9 68 F6 68 
31c54     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31c58     EE 68 A8 68 
31c5c     2C 69 5F 68 
31c60     E2 68 81 66 
31c64     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31c68     1E EB A6 8A 
31c6c     73 8B 5E 93 
31c70     7B 90 48 91 
31c74     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31c78     0D 91 11 91 
31c7c     14 91 16 91 
31c80     5C 91 1C 91 
31c84     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31c88     68 91 AF 91 
31c8c     2A 91 B5 91 
31c90     75 91 1A 94 
31c94     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31c98     70 0E CB 6C 
31c9c     5D 6E C4 67 
31ca0     99 69 54 69 
31ca4     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31ca8     D2 69 49 69 
31cac     89 69 86 69 
31cb0     40 69 C4 69 
31cb4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31cb8     35 69 76 69 
31cbc     58 67 EB 6D 
31cc0     E9 6D 89 0F 
31cc4     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31cc8     33 94 94 91 
31ccc     D9 91 56 91 
31cd0     E0 91 9F 91 
31cd4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31cd8     EC 91 EE 91 
31cdc     F1 91 F4 91 
31ce0     F7 91 3D 92 
31ce4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31ce8     46 92 21 94 
31cec     11 89 A4 9D 
31cf0     FD 0E 8F 6C 
31cf4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31cf8     28 6A E1 69 
31cfc     65 6A 1F 6A 
31d00     5F 6A 1A 6A 
31d04     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31d08     54 6A 0F 6A 
31d0c     4F 6A 09 6A 
31d10     06 6A 03 6A 
31d14     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31d18     23 68 69 77 
31d1c     3A 4D 38 CA 
31d20     38 86 4E 91 
31d24     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31d28     64 92 24 92 
31d2c     6A 92 2A 92 
31d30     70 92 30 92 
31d34     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31d38     7B 92 7E 92 
31d3c     C5 92 84 92 
31d40     CB 92 8A 92 
31d44     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31d48     4D 8D F9 E2 
31d4c     97 59 FE 74 
31d50     DB 68 6D 6A 
31d54     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31d58     A8 6A A5 6A 
31d5c     A3 6A 9F 6A 
31d60     9D 6A 9B 6A 
31d64     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31d68     D6 6A 8F 6A 
31d6c     CF 6A 46 6A 
31d70     CA 6A E1 67 
31d74     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31d78     D3 F7 15 92 
31d7c     90 8C BF 94 
31d80     A6 92 EB 92 
31d84     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31d88     B1 92 F7 92 
31d8c     FA 92 FD 92 
31d90     00 93 02 93 
31d94     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31d98     4F 93 52 93 
31d9c     54 93 22 94 
31da0     5A 93 8F 88 
31da4     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31da8     1C 77 07 6C 
31dac     E8 69 7A 6B 
31db0     34 6B 75 6B 
31db4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31db8     29 6B 26 6B 
31dbc     24 6B 21 6B 
31dc0     1D 6B 5E 6B 
31dc4     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31dc8     12 6B 52 6B 
31dcc     34 69 34 6E 
31dd0     BA 73 A4 24 
31dd4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31dd8     7A 94 B3 93 
31ddc     72 93 31 93 
31de0     78 93 7A 93 
31de4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31de8     83 93 86 93 
31dec     89 93 D0 93 
31df0     D2 93 D5 93 
31df4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31df8     DD 93 40 96 
31dfc     30 8B 99 9C 
31e00     52 10 94 71 
31e04     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31e08     46 6C 79 6B 
31e0c     40 6C B7 6B 
31e10     F7 6B B1 6B 
31e14     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31e18     EC 6B A5 6B 
31e1c     A2 6B 9F 6B 
31e20     9D 6B 9A 6B 
31e24     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31e28     C8 6A E4 76 
31e2c     20 4B F9 CE 
31e30     2E 8A 1A 92 
31e34     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31e38     FB 93 BA 93 
31e3c     01 94 03 94 
31e40     4A 94 09 94 
31e44     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31e48     55 94 14 94 
31e4c     9E 94 1A 94 
31e50     61 94 20 94 
31e54     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31e58     3E 87 E5 CD 
31e5c     5F 50 6C 78 
31e60     B5 6A 04 6C 
31e64     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31e68     83 6C 7F 6C 
31e6c     7C 6C 36 6C 
31e70     76 6C 74 6C 
31e74     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31e78     6B 6C 25 6C 
31e7c     66 6C 1F 6C 
31e80     1D 6C 41 6A 
31e84     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31e88     BA FA FC 94 
31e8c     5B 8D 97 96 
31e90     3B 94 C5 94 
31e94     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31e98     89 94 8C 94 
31e9c     8F 94 92 94 
31ea0     94 94 DB 94 
31ea4     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31ea8     E4 94 E7 94 
31eac     2D 95 74 95 
31eb0     C8 96 15 89 
31eb4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31eb8     CB 75 31 6F 
31ebc     7E 6B 10 6D 
31ec0     C9 6C 0A 6D 
31ec4     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31ec8     BD 6C FF 6C 
31ecc     FB 6C F9 6C 
31ed0     B2 6C F3 6C 
31ed4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31ed8     A7 6C E8 6C 
31edc     0D 6B 85 6F 
31ee0     C7 74 10 28 
31ee4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31ee8     96 96 47 95 
31eec     06 95 0A 95 
31ef0     0C 95 0F 95 
31ef4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31ef8     17 95 5E 95 
31efc     61 95 63 95 
31f00     22 95 AC 95 
31f04     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31f08     72 95 17 98 
31f0c     59 8E 01 96 
31f10     CF FC 5A 68 
31f14     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31f18     96 6D 50 6D 
31f1c     D5 6D 4A 6D 
31f20     8C 6D 89 6D 
31f24     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31f28     80 6D 3A 6D 
31f2c     7A 6D 77 6D 
31f30     75 6D 71 6D 
31f34     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31f38     18 6C BC 78 
31f3c     9A 4F 7E CF 
31f40     1F 89 F1 93 
31f44     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31f48     D2 95 4E 95 
31f4c     D7 95 53 95 
31f50     DD 95 E0 95 
31f54     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31f58     A5 95 EB 95 
31f5c     EE 95 F0 95 
31f60     37 96 B3 95 
31f64     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31f68     1A 98 D5 8D 
31f6c     C5 9F CD 0F 
31f70     0F 71 F3 73 
31f74     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31f78     D9 6D 5E 6E 
31f7c     D3 6D 58 6E 
31f80     12 6E 0F 6E 
31f84     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31f88     49 6E BF 6D 
31f8c     87 6E 76 6D 
31f90     81 6E 11 6B 
31f94     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31f98     3F 09 44 95 
31f9c     E5 8D 3F 99 
31fa0     D4 95 A2 96 
31fa4     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31fa8     23 96 69 96 
31fac     6B 96 6E 96 
31fb0     71 96 74 96 
31fb4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31fb8     BF 96 3C 96 
31fbc     C6 96 C8 96 
31fc0     A3 98 51 8D 
31fc4     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31fc8     CF 75 29 73 
31fcc     90 6C EC 6E 
31fd0     62 6E E7 6E 
31fd4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31fd8     9A 6E 98 6E 
31fdc     95 6E 91 6E 
31fe0     8E 6E CF 6E 
31fe4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31fe8     40 6E C3 6E 
31fec     E8 6C 45 6F 
31ff0     A5 7B C9 35 
31ff4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31ff8     2D 98 23 97 
31ffc     E1 96 A0 96 
32000     A4 96 EA 96 
32004     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
32008     AF 96 F4 96 
3200c     F8 96 3E 97 
32010     FD 96 43 97 
32014     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
32018     08 97 6B 99 
3201c     D6 92 88 91 
32020     D8 EE 84 66 
32024     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
32028     2E 6F E7 6E 
3202c     6C 6F 24 6F 
32030     21 6F 1F 6F 
32034     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
32038     17 6F 13 6F 
3203c     54 6F 0E 6F 
32040     0B 6F 4B 6F 
32044     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32048     27 6D 1C 7B 
3204c     19 59 9F DB 
32050     66 8E BC 94 
32054     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
32058     67 97 26 97 
3205c     6D 97 2B 97 
32060     72 97 32 97 
32064     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
32068     C1 97 7F 97 
3206c     C6 97 85 97 
32070     CB 97 CE 97 
32074     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
32078     EC 8A C4 C6 
3207c     68 4C F4 7D 
32080     63 6E E8 6E 
32084     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32088     ED 6F A7 6F 
3208c     E7 6F A0 6F 
32090     E1 6F 9B 6F 
32094     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
32098     D5 6F 8F 6F 
3209c     CE 6F 45 6F 
320a0     86 6F 68 6D 
320a4     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
320a8     C0 13 AD A2 
320ac     A7 8E 79 99 
320b0     E6 97 E8 97 
320b4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
320b8     F1 97 F3 97 
320bc     F6 97 F9 97 
320c0     FB 97 FE 97 
320c4     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
320c8     4A 98 0A 98 
320cc     93 98 0F 98 
320d0     7F 9B BF 8C 
320d4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
320d8     91 7B 62 73 
320dc     1A 6E B9 70 
320e0     EB 6F B3 70 
320e4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
320e8     25 70 20 70 
320ec     1E 70 1B 70 
320f0     18 70 15 70 
320f4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
320f8     0D 70 09 70 
320fc     07 70 03 70 
32100     01 70 FD 6F 
32104     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
32108     F6 6F F2 6F 
3210c     EF 6F EC 6F 
32110     2C 70 E6 6F 
32114     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32118     DD 6F 97 6F 
3211c     D7 6F 84 6E 
32120     8F 6F 3F 7D 
32124     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
32126     00 00 00 00 | zero1 long 0
3212a     FF FF FF FF 
3212e     FF FF       | atarist_spl file "atarist.spl" '512
32130     00 00 00 00 
32134     00 00 00 00 
32138     00 00       | 	byte	$00[10]
3213a     17 7F F2 7F 
3213e     B2 7F 72 7F 
32142     33 7F F4 7E 
32146     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3214a     36 7E F5 7D 
3214e     E9 51 F2 0D 
32152     8E 00 F3 FD 
32156     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3215a     57 FD 58 FD 
3215e     5B FD 5C FD 
32162     5C FD 60 7D 
32166     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3216a     D6 7C 98 7C 
3216e     59 7C 1A 7C 
32172     DC 7B 9E 7B 
32176     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3217a     F3 05 00 FD 
3217e     41 FB EA FA 
32182     D9 FA DB FA 
32186     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3218a     E4 FA 9B 36 
3218e     F8 7A C0 7A 
32192     84 7A 45 7A 
32196     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3219a     8E 79 51 79 
3219e     15 79 D7 78 
321a2     3C 1F EB FF 
321a6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
321aa     6D F8 65 F8 
321ae     68 F8 6D F8 
321b2     70 F8 74 F8 
321b6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
321ba     AB 60 79 60 
321be     4B 60 1A 60 
321c2     E9 5F B9 5F 
321c6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
321ca     FB 59 B2 0B 
321ce     92 FA 3A F7 
321d2     96 F6 79 F6 
321d6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
321da     82 F6 86 F6 
321de     8C F6 DB 5D 
321e2     F1 5E C1 5E 
321e6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
321ea     34 5E 04 5E 
321ee     D6 5D A6 5D 
321f2     78 5D D4 3E 
321f6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
321fa     27 F5 BA F4 
321fe     AB F4 AD F4 
32202     B2 F4 B8 F4 
32206     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3220a     26 5D 2B 5D 
3220e     FC 5C CD 5C 
32212     9F 5C 70 5C 
32216     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3221a     E5 5B B8 5B 
3221e     DB 24 A7 FC 
32222     D1 F4 4D F3 
32226     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3222a     04 F3 0B F3 
3222e     11 F3 16 F3 
32232     DE 18 98 5B 
32236     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3223a     4E 4A 29 48 
3223e     A0 47 6A 47 
32242     43 47 20 47 
32246     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3224a     E2 F6 98 F2 
3224e     C5 F1 A3 F1 
32252     A3 F1 A8 F1 
32256     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3225a     BF F1 00 3D 
3225e     EF 46 CD 46 
32262     AA 46 86 46 
32266     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3226a     1C 46 F9 45 
3226e     D7 45 EE 43 
32272     DE 02 E8 F3 
32276     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3227a     61 F0 65 F0 
3227e     6D F0 74 F0 
32282     7C F0 84 F0 
32286     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3228a     8E 45 6D 45 
3228e     49 45 27 45 
32292     05 45 E1 44 
32296     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3229a     F1 2F A9 FB 
3229e     8B F1 9B EF 
322a2     40 EF 36 EF 
322a6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
322aa     4D EF 56 EF 
322ae     5E EF 7B 44 
322b2     8C 44 69 44 
322b6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
322ba     03 44 E1 43 
322be     C0 43 F5 37 
322c2     69 33 0F 11 
322c6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
322ca     66 EE 37 EE 
322ce     38 EE 40 EE 
322d2     48 EE 51 EE 
322d6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
322da     7D 32 6A 32 
322de     51 32 37 32 
322e2     1F 32 05 32 
322e6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
322ea     B9 31 A1 31 
322ee     F1 04 F4 F1 
322f2     50 EE A0 ED 
322f6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
322fa     93 ED 9A ED 
322fe     A4 ED AD ED 
32302     F4 27 C1 31 
32306     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3230a     78 31 5F 31 
3230e     46 31 2E 31 
32312     15 31 FC 30 
32316     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3231a     C4 EF 4A ED 
3231e     DC EC CB EC 
32322     D2 EC DA EC 
32326     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3232a     F9 EC 64 2F 
3232e     0A 31 F1 30 
32332     D9 30 C0 30 
32336     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3233a     78 30 5F 30 
3233e     46 30 38 23 
32342     A6 F6 19 EE 
32346     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3234a     20 EC 28 EC 
3234e     32 EC 3C EC 
32352     47 EC 51 EC 
32356     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3235a     A3 22 93 22 
3235e     7F 22 6E 22 
32362     5D 22 4C 22 
32366     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3236a     77 09 76 F1 
3236e     CC EC F0 EB 
32372     CD EB CE EB 
32376     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3237a     ED EB F5 EB 
3237e     3E F6 6B 22 
32382     5F 22 4E 22 
32386     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3238a     1B 22 0B 22 
3238e     FA 21 E9 21 
32392     D8 21 4D FF 
32396     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3239a     92 EB 7B EB 
3239e     82 EB 8C EB 
323a2     97 EB A1 EB 
323a6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
323aa     15 22 04 22 
323ae     F3 21 E3 21 
323b2     D2 21 C0 21 
323b6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
323ba     8E 21 7D 21 
323be     9A F8 A4 ED 
323c2     8E EB 2F EB 
323c6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
323ca     37 EB 42 EB 
323ce     4C EB 57 EB 
323d2     B2 17 22 19 
323d6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
323da     FD 18 EF 18 
323de     E3 18 D6 18 
323e2     CA 18 BD 18 
323e6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
323ea     60 EC 35 EB 
323ee     01 EB 01 EB 
323f2     0C EB 16 EB 
323f6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
323fa     34 EB D0 18 
323fe     00 19 F4 18 
32402     E8 18 DA 18 
32406     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3240a     B6 18 A9 18 
3240e     9D 18 91 05 
32412     F0 EF CA EB 
32416     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3241a     E8 EA F2 EA 
3241e     FE EA 07 EB 
32422     12 EB C2 EF 
32426     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3242a     D9 18 CD 18 
3242e     C0 18 B3 18 
32432     A7 18 9B 18 
32436     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3243a     B8 FC 30 EE 
3243e     61 EB DC EA 
32442     CD EA D2 EA 
32446     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3244a     F3 EA FE EA 
3244e     D2 09 D1 18 
32452     C3 18 17 18 
32456     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3245a     66 11 52 11 
3245e     49 11 41 11 
32462     38 11 E0 F4 
32466     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3246a     C9 EA C5 EA 
3246e     CF EA DB EA 
32472     E6 EA EF EA 
32476     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3247a     89 11 80 11 
3247e     78 11 6E 11 
32482     67 11 5D 11 
32486     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3248a     43 11 32 0D 
3248e     9C F1 07 EC 
32492     F8 EA CD EA 
32496     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3249a     E4 EA ED EA 
3249e     F8 EA 02 EB 
324a2     55 11 91 11 
324a6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
324aa     75 11 6E 11 
324ae     64 11 5E 11 
324b2     54 11 4A 11 
324b6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
324ba     A8 EB F1 EA 
324be     D9 EA DC EA 
324c2     E8 EA F1 EA 
324c6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
324ca     A6 EB 9E 11 
324ce     A0 11 96 11 
324d2     8D 11 85 11 
324d6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
324da     6A 11 CA 0D 
324de     36 0B 57 F8 
324e2     6C ED 57 EB 
324e6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
324ea     F4 EA FF EA 
324ee     09 EB 15 EB 
324f2     1E EB 1A FD 
324f6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
324fa     ED 0A E8 0A 
324fe     E2 0A DC 0A 
32502     D6 0A D1 0A 
32506     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3250a     F8 F3 BC EC 
3250e     57 EB 1E EB 
32512     18 EB 24 EB 
32516     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3251a     42 EB 4D EB 
3251e     08 09 20 0B 
32522     1A 0B 14 0B 
32526     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3252a     04 0B FE 0A 
3252e     F9 0A F2 0A 
32532     84 08 3A F1 
32536     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3253a     42 EB 42 EB 
3253e     4E EB 57 EB 
32542     62 EB 6B EB 
32546     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3254a     48 0B 43 0B 
3254e     3C 0B 36 0B 
32552     31 0B 2C 0B 
32556     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3255a     1B 0B 5C 00 
3255e     6A EF 1B EC 
32562     81 EB 6A EB 
32566     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3256a     85 EB 8E EB 
3256e     99 EB A3 EB 
32572     DD 05 E5 05 
32576     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3257a     DB 05 D8 05 
3257e     D5 05 D1 05 
32582     D0 05 CB 05 
32586     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3258a     0C EC BB EB 
3258e     B3 EB BB EB 
32592     C5 EB D0 EB 
32596     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3259a     E4 F7 2C 06 
3259e     28 06 24 06 
325a2     22 06 1F 06 
325a6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
325aa     16 06 14 06 
325ae     0F 06 D0 F3 
325b2     65 ED 2D EC 
325b6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
325ba     01 EC 0A EC 
325be     14 EC 1E EC 
325c2     29 EC FB 03 
325c6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
325ca     63 06 60 06 
325ce     5E 06 59 06 
325d2     58 06 54 06 
325d6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
325da     69 F1 21 ED 
325de     55 EC 33 EC 
325e2     36 EC 40 EC 
325e6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
325ea     5C EC 68 EC 
325ee     92 02 D9 02 
325f2     D7 02 D7 02 
325f6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
325fa     D1 02 D1 02 
325fe     CE 02 CD 02 
32602     5D FC 80 EF 
32606     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3260a     83 EC 8A EC 
3260e     93 EC 9C EC 
32612     A5 EC B1 EC 
32616     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3261a     2B 03 2A 03 
3261e     29 03 26 03 
32622     25 03 24 03 
32626     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3262a     1F 03 70 F7 
3262e     D0 EE 27 ED 
32632     DB EC D4 EC 
32636     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3263a     F0 EC FA EC 
3263e     02 ED F9 F4 
32642     7B 03 7C 03 
32646     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3264a     75 03 73 03 
3264e     72 03 70 03 
32652     6D 03 6C 03 
32656     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3265a     54 ED 22 ED 
3265e     22 ED 2C ED 
32662     35 ED 3F ED 
32666     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3266a     14 01 C3 03 
3266e     C1 03 C0 03 
32672     5F 01 A5 00 
32676     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3267a     7B 00 7C 00 
3267e     20 00 85 F1 
32682     2A EE 89 ED 
32686     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3268a     80 ED 87 ED 
3268e     90 ED 9A ED 
32692     A3 ED 73 00 
32696     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3269a     D0 00 D0 00 
3269e     D0 00 D0 00 
326a2     D0 00 CF 00 
326a6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
326aa     80 F0 3D EE 
326ae     D5 ED C7 ED 
326b2     CD ED D6 ED 
326b6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
326ba     F2 ED FA ED 
326be     1D 01 29 01 
326c2     27 01 27 01 
326c6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
326ca     25 01 26 01 
326ce     26 01 23 01 
326d2     D0 F7 EC EF 
326d6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
326da     1C EE 24 EE 
326de     2D EE 37 EE 
326e2     40 EE 47 EE 
326e6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
326ea     7D 01 7B 01 
326ee     7A 01 7A 01 
326f2     79 01 78 01 
326f6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
326fa     84 FE DE F3 
326fe     6C EF 93 EE 
32702     72 EE 72 EE 
32706     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3270a     8B EE 95 EE 
3270e     9E EE 15 FC 
32712     67 FE 67 FE 
32716     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3271a     6B FE 6B FE 
3271e     6D FE 6D FE 
32722     6D FE 6F FE 
32726     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3272a     DF EE CC EE 
3272e     CF EE D9 EE 
32732     E1 EE EA EE 
32736     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3273a     5A FE C4 FE 
3273e     C3 FE C5 FE 
32742     C6 FE C6 FE 
32746     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3274a     C8 FE C7 FE 
3274e     DA FB 85 F1 
32752     8D EF 31 EF 
32756     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3275a     34 EF 3E EF 
3275e     46 EF 4F EF 
32762     57 EF 0D FF 
32766     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3276a     1F FF 1F FF 
3276e     21 FF 21 FF 
32772     21 FF 21 FF 
32776     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3277a     15 F1 BE EF 
3277e     84 EF 7E EF 
32782     88 EF 8F EF 
32786     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3278a     A9 EF 06 F2 
3278e     A6 FC AB FC 
32792     AD FC AE FC 
32796     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3279a     B2 FC B4 FC 
3279e     B6 FC B7 FC 
327a2     8B F4 BD F0 
327a6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
327aa     E4 EF EE EF 
327ae     F6 EF FD EF 
327b2     04 F0 0E F0 
327b6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
327ba     0B FD 0D FD 
327be     0F FD 11 FD 
327c2     11 FD 13 FD 
327c6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
327ca     17 FD 64 F3 
327ce     CD F0 52 F0 
327d2     41 F0 45 F0 
327d6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
327da     5B F0 64 F0 
327de     6D F0 FB FC 
327e2     65 FD 68 FD 
327e6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
327ea     6C FD 6D FD 
327ee     6F FD 70 FD 
327f2     72 FD B3 FB 
327f6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
327fa     A4 F0 99 F0 
327fe     A0 F0 A8 F0 
32802     AE F0 B9 F0 
32806     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3280a     CB FB DD FB 
3280e     DE FB E0 FB 
32812     E3 FB E3 FB 
32816     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3281a     E9 FB EC FB 
3281e     62 F7 27 F2 
32822     2A F1 FF F0 
32826     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3282a     0C F1 13 F1 
3282e     1B F1 23 F1 
32832     33 F2 3C FC 
32836     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3283a     42 FC 45 FC 
3283e     47 FC 48 FC 
32842     4A FC 4C FC 
32846     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3284a     20 F2 77 F1 
3284e     5C F1 5F F1 
32852     64 F1 6C F1 
32856     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3285a     83 F1 DC F8 
3285e     9A FC 9A FC 
32862     9B FC 9E FC 
32866     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3286a     A3 FC A4 FC 
3286e     A6 FC A9 FC 
32872     90 F4 33 F2 
32876     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3287a     BA F1 BF F1 
3287e     C7 F1 CE F1 
32882     D6 F1 DC F1 
32886     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3288a     F3 FC F5 FC 
3288e     FE FB 79 FB 
32892     62 FB 5F FB 
32896     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3289a     6F FA AF F3 
3289e     53 F2 12 F2 
328a2     0F F2 15 F2 
328a6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
328aa     2A F2 32 F2 
328ae     38 F2 9A FB 
328b2     AF FB B1 FB 
328b6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
328ba     B7 FB B8 FB 
328be     BA FB BC FB 
328c2     C1 FB 3B F8 
328c6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
328ca     6E F2 6C F2 
328ce     74 F2 7A F2 
328d2     81 F2 87 F2 
328d6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
328da     06 FC 09 FC 
328de     0C FC 0E FC 
328e2     0F FC 12 FC 
328e6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
328ea     17 FC 1A FC 
328ee     B2 F6 7B F3 
328f2     DD F2 C5 F2 
328f6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
328fa     D4 F2 DB F2 
328fe     E0 F2 E8 F2 
32902     28 F8 60 FC 
32906     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3290a     64 FC 66 FC 
3290e     68 FC 6A FC 
32912     6D FC 52 FC 
32916     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3291a     78 F3 24 F3 
3291e     1A F3 1E F3 
32922     24 F3 2A F3 
32926     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3292a     3D F3 80 FA 
3292e     0C FB 0F FB 
32932     10 FB 14 FB 
32936     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3293a     1B FB 1D FB 
3293e     1F FB 92 FA 
32942     DE F4 AE F3 
32946     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3294a     79 F3 7E F3 
3294e     84 F3 8C F3 
32952     92 F3 97 F3 
32956     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3295a     67 FB 69 FB 
3295e     6B FB 6F FB 
32962     71 FB 72 FB 
32966     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3296a     E3 F8 BA F4 
3296e     EE F3 CC F3 
32972     CA F3 CF F3 
32976     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3297a     E2 F3 E8 F3 
3297e     ED F3 B7 FB 
32982     BC FB BE FB 
32986     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3298a     C4 FB C6 FB 
3298e     C8 FB C9 FB 
32992     CC FB 8F F7 
32996     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3299a     1E F4 1E F4 
3299e     24 F4 2A F4 
329a2     30 F4 38 F4 
329a6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
329aa     AD FA B1 FA 
329ae     B4 FA B6 FA 
329b2     BA FA BB FA 
329b6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
329ba     C2 FA C6 FA 
329be     55 F6 C6 F4 
329c2     7D F4 72 F4 
329c6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
329ca     83 F4 89 F4 
329ce     8F F4 94 F4 
329d2     66 FA 03 FB 
329d6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
329da     0A FB 0E FB 
329de     10 FB 11 FB 
329e2     16 FB 18 FB 
329e6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
329ea     F9 F4 CA F4 
329ee     C5 F4 CB F4 
329f2     D1 F4 D7 F4 
329f6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
329fa     E8 F4 3F FB 
329fe     56 FB 58 FB 
32a02     5A FB 5E FB 
32a06     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32a0a     64 FB 64 FB 
32a0e     69 FB 99 F9 
32a12     E9 F5 33 F5 
32a16     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32a1a     1D F5 22 F5 
32a1e     27 F5 2E F5 
32a22     32 F5 37 F5 
32a26     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32a2a     BC FA BC FA 
32a2e     C1 FA C2 FA 
32a32     C4 FA C8 FA 
32a36     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32a3a     F9 F7 DB F5 
32a3e     78 F5 69 F5 
32a42     6A F5 70 F5 
32a46     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32a4a     7F F5 85 F5 
32a4e     6E F7 06 FB 
32a52     0A FB 0B FB 
32a56     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
32a5a     14 FB 15 FB 
32a5e     18 FB 1B FB 
32a62     1D FB 70 F7 
32a66     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
32a6a     B6 F5 BB F5 
32a6e     C0 F5 C6 F5 
32a72     CA F5 CF F5 
32a76     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
32a7a     54 FB 56 FB 
32a7e     5A FB 5B FB 
32a82     5E FB 5F FB 
32a86     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32a8a     67 FB 52 FB 
32a8e     29 F7 33 F6 
32a92     06 F6 02 F6 
32a96     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32a9a     10 F6 16 F6 
32a9e     1A F6 1F F6 
32aa2     81 FB 9F FB 
32aa6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32aaa     51 FB F2 FA 
32aae     E3 FA E3 FA 
32ab2     E5 FA E9 FA 
32ab6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32aba     64 F6 4D F6 
32abe     4D F6 53 F6 
32ac2     57 F6 5C F6 
32ac6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32aca     6A F6 19 FB 
32ace     1E FB 22 FB 
32ad2     23 FB 24 FB 
32ad6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32ada     2C FB 2E FB 
32ade     32 FB F0 F8 
32ae2     01 F7 A5 F6 
32ae6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32aea     9F F6 A3 F6 
32aee     A6 F6 AC F6 
32af2     B0 F6 EB F7 
32af6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32afa     68 FB 6C FB 
32afe     6E FB 71 FB 
32b02     72 FB 74 FB 
32b06     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32b0a     71 F8 21 F7 
32b0e     E5 F6 DD F6 
32b12     E1 F6 E6 F6 
32b16     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32b1a     F5 F6 F7 F6 
32b1e     F7 FA AB FB 
32b22     AD FB AF FB 
32b26     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32b2a     B6 FB B9 FB 
32b2e     BB FB BC FB 
32b32     21 FB 07 F8 
32b36     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32b3a     22 F7 26 F7 
32b3e     2B F7 2E F7 
32b42     34 F7 38 F7 
32b46     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32b4a     13 FB 16 FB 
32b4e     17 FB 1B FB 
32b52     1E FB 20 FB 
32b56     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32b5a     26 FB 77 FA 
32b5e     F3 F7 7C F7 
32b62     67 F7 6A F7 
32b66     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32b6a     74 F7 7A F7 
32b6e     7E F7 82 F7 
32b72     53 FB 5A FB 
32b76     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32b7a     5F FB 63 FB 
32b7e     65 FB 67 FB 
32b82     69 FB 6A FB 
32b86     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32b8a     B5 F7 A9 F7 
32b8e     AD F7 B0 F7 
32b92     B5 F7 B8 F7 
32b96     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32b9a     6E F8 99 FB 
32b9e     9C FB 9D FB 
32ba2     9F FB A4 FB 
32ba6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32baa     A9 FB AB FB 
32bae     AD FB 46 F9 
32bb2     26 F8 F0 F7 
32bb6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32bba     F4 F7 F8 F7 
32bbe     FB F7 FF F7 
32bc2     03 F8 65 FA 
32bc6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32bca     2B FB 2F FB 
32bce     30 FB 32 FB 
32bd2     34 FB 38 FB 
32bd6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32bda     E9 F8 4A F8 
32bde     2E F8 2C F8 
32be2     2F F8 36 F8 
32be6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32bea     41 F8 44 F8 
32bee     4A FB 67 FB 
32bf2     68 FB 6B FB 
32bf6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32bfa     73 FB 74 FB 
32bfe     78 FB 7A FB 
32c02     14 FB E7 F8 
32c06     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32c0a     6D F8 70 F8 
32c0e     73 F8 78 F8 
32c12     7C F8 80 F8 
32c16     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32c1a     A6 FB A7 FB 
32c1e     A9 FB AC FB 
32c22     AF FB B1 FB 
32c26     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32c2a     B7 FB 73 FA 
32c2e     F8 F8 B4 F8 
32c32     A9 F8 AB F8 
32c36     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32c3a     B4 F8 B8 F8 
32c3e     BB F8 FA F8 
32c42     64 FB 65 FB 
32c46     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32c4a     6D FB 6F FB 
32c4e     70 FB 74 FB 
32c52     77 FB 77 FB 
32c56     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32c5a     E9 F8 E4 F8 
32c5e     E8 F8 EB F8 
32c62     EE F8 F2 F8 
32c66     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32c6a     B5 FA 9F FB 
32c6e     A1 FB A4 FB 
32c72     A5 FB A9 FB 
32c76     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32c7a     AE FB B1 FB 
32c7e     B2 FB C7 F9 
32c82     39 F9 22 F9 
32c86     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32c8a     26 F9 2A F9 
32c8e     2E F9 32 F9 
32c92     33 F9 BA FB 
32c96     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32c9a     DE FB E1 FB 
32c9e     E2 FB E4 FB 
32ca2     E5 FB E7 FB 
32ca6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32caa     C5 F9 67 F9 
32cae     57 F9 56 F9 
32cb2     5B F9 5F F9 
32cb6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32cba     68 F9 6C F9 
32cbe     0B FC 11 FC 
32cc2     14 FC 15 FC 
32cc6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32cca     B5 FB B5 FB 
32cce     B6 FB B8 FB 
32cd2     E9 FA C8 F9 
32cd6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32cda     90 F9 94 F9 
32cde     95 F9 99 F9 
32ce2     9D F9 9F F9 
32ce6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32cea     DE FB DF FB 
32cee     E2 FB E4 FB 
32cf2     E6 FB E8 FB 
32cf6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32cfa     EF FB AC FA 
32cfe     E9 F9 C7 F9 
32d02     C3 F9 C8 F9 
32d06     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32d0a     D0 F9 D4 F9 
32d0e     D6 F9 0E FB 
32d12     11 FC 13 FC 
32d16     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32d1a     19 FC 1B FC 
32d1e     1D FC 1E FC 
32d22     21 FC 22 FC 
32d26     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32d2a     F7 F9 F7 F9 
32d2e     FB F9 FE F9 
32d32     00 FA 03 FA 
32d36     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32d3a     1B FC 45 FC 
32d3e     46 FC 48 FC 
32d42     4A FC 4B FC 
32d46     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32d4a     52 FC 54 FC 
32d4e     F3 FB 82 FA 
32d52     35 FA 28 FA 
32d56     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32d5a     31 FA 32 FA 
32d5e     37 FA 37 FA 
32d62     3C FA 00 FC 
32d66     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32d6a     09 FC 0B FC 
32d6e     0F FC 12 FC 
32d72     12 FC 15 FC 
32d76     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32d7a     8D FA 60 FA 
32d7e     5B FA 5C FA 
32d82     60 FA 61 FA 
32d86     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32d8a     6C FA 6D FA 
32d8e     37 FC 3A FC 
32d92     3B FC 3D FC 
32d96     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32d9a     43 FC 44 FC 
32d9e     45 FC 47 FC 
32da2     51 FB AB FA 
32da6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32daa     8E FA 91 FA 
32dae     93 FA 95 FA 
32db2     98 FA 9B FA 
32db6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32dba     68 FC 6A FC 
32dbe     6C FC 6E FC 
32dc2     70 FC 72 FC 
32dc6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32dca     76 FC 3B FB 
32dce     D0 FA BB FA 
32dd2     B9 FA BD FA 
32dd6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32dda     C4 FA C6 FA 
32dde     CA FA 13 FC 
32de2     3A FC 3A FC 
32de6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32dea     41 FC 43 FC 
32dee     44 FC 47 FC 
32df2     48 FC 3C FC 
32df6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32dfa     E6 FA E8 FA 
32dfe     EB FA EE FA 
32e02     F0 FA F2 FA 
32e06     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32e0a     61 FC 66 FC 
32e0e     68 FC 6B FC 
32e12     6C FC 6E FC 
32e16     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32e1a     73 FC 75 FC 
32e1e     13 FC 3F FB 
32e22     17 FB 12 FB 
32e26     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32e2a     1A FB 1D FB 
32e2e     1F FB 20 FB 
32e32     23 FB 92 FC 
32e36     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32e3a     96 FC 97 FC 
32e3e     9A FC 9C FC 
32e42     9E FC 9F FC 
32e46     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32e4a     5A FB 41 FB 
32e4e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32e52     00 00 00 00 | zero2 long 0
32e56     01 00 00 00 
32e5a     00 00 00 00 
32e5e     00 00 00 00 
32e62     00 00 00 00 | mouse  file "mouse2.def"
32e66     00 00 00 00 
32e6a     00 00 00 00 
32e6e     00 00 00 00 
32e72     00 00 00 00 | 	byte	$00[16]
32e76     01 01 00 00 
32e7a     00 00 00 00 
32e7e     00 00 00 00 
32e82     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e86     00 00 00 00 
32e8a     00 00 00 00 
32e8e     00 00 00 00 
32e92     00 00 00 00 | 	byte	$00[16]
32e96     01 0D 01 00 
32e9a     00 00 00 00 
32e9e     00 00 00 00 
32ea2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ea6     00 00 00 00 
32eaa     00 00 00 00 
32eae     00 00 00 00 
32eb2     00 00 00 00 | 	byte	$00[16]
32eb6     01 0D 0D 01 
32eba     00 00 00 00 
32ebe     00 00 00 00 
32ec2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ec6     00 00 00 00 
32eca     00 00 00 00 
32ece     00 00 00 00 
32ed2     00 00 00 00 | 	byte	$00[16]
32ed6     01 0D 0D 0D 
32eda     01 00 00 00 
32ede     00 00 00 00 
32ee2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ee6     00 00 00 00 
32eea     00 00 00 00 
32eee     00 00 00 00 
32ef2     00 00 00 00 | 	byte	$00[16]
32ef6     01 0D 0D 0D 
32efa     0D 01 00 00 
32efe     00 00 00 00 
32f02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f06     00 00 00 00 
32f0a     00 00 00 00 
32f0e     00 00 00 00 
32f12     00 00 00 00 | 	byte	$00[16]
32f16     01 0D 0D 0D 
32f1a     0D 0D 01 00 
32f1e     00 00 00 00 
32f22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f26     00 00 00 00 
32f2a     00 00 00 00 
32f2e     00 00 00 00 
32f32     00 00 00 00 | 	byte	$00[16]
32f36     01 0D 0D 0D 
32f3a     0D 0D 0D 01 
32f3e     00 00 00 00 
32f42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32f46     00 00 00 00 
32f4a     00 00 00 00 
32f4e     00 00 00 00 
32f52     00 00 00 00 | 	byte	$00[16]
32f56     01 0D 0D 0D 
32f5a     0D 0D 0D 0C 
32f5e     01 00 00 00 
32f62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32f66     00 00 00 00 
32f6a     00 00 00 00 
32f6e     00 00 00 00 
32f72     00 00 00 00 | 	byte	$00[16]
32f76     01 0D 0D 0D 
32f7a     0D 0D 0D 0D 
32f7e     0C 01 00 00 
32f82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32f86     00 00 00 00 
32f8a     00 00 00 00 
32f8e     00 00 00 00 
32f92     00 00 00 00 | 	byte	$00[16]
32f96     01 0D 0D 0D 
32f9a     0D 0D 0D 0D 
32f9e     0D 0C 01 00 
32fa2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32fa6     00 00 00 00 
32faa     00 00 00 00 
32fae     00 00 00 00 
32fb2     00 00 00 00 | 	byte	$00[16]
32fb6     01 0D 0D 0D 
32fba     0D 0D 0D 0D 
32fbe     0D 0D 0B 01 
32fc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32fc6     00 00 00 00 
32fca     00 00 00 00 
32fce     00 00 00 00 
32fd2     00 00 00 00 | 	byte	$00[16]
32fd6     01 0D 0D 0D 
32fda     0C 0D 0D 03 
32fde     01 01 01 01 
32fe2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32fe6     00 00 00 00 
32fea     00 00 00 00 
32fee     00 00 00 00 
32ff2     00 00 00 00 | 	byte	$00[16]
32ff6     01 0D 0D 0C 
32ffa     01 09 0D 03 
32ffe     00 00 00 00 
33002     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
33006     00 00 00 00 
3300a     00 00 00 00 
3300e     00 00 00 00 
33012     00 00 00 00 | 	byte	$00[16]
33016     01 0D 0C 01 
3301a     00 01 0D 0B 
3301e     01 00 00 00 
33022     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
33026     00 00 00 00 
3302a     00 00 00 00 
3302e     00 00 00 00 
33032     00 00 00 00 | 	byte	$00[16]
33036     01 0C 01 00 
3303a     00 01 0A 0D 
3303e     01 00 00 00 
33042     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
33046     00 00 00 00 
3304a     00 00 00 00 
3304e     00 00 00 00 
33052     00 00 00 00 | 	byte	$00[16]
33056     01 01 00 00 
3305a     00 00 01 0D 
3305e     0B 01 00 00 
33062     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
33066     00 00 00 00 
3306a     00 00 00 00 
3306e     00 00 00 00 
33072     00 00 00 00 
33076     00 00 00 00 
3307a     00 00       | 	byte	$00[22]
3307c     01 0B 0D 01 
33080     00 00 00 00 
33084     00 00 00 00 
33088     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3308c     00 00 00 00 
33090     00 00 00 00 
33094     00 00 00 00 
33098     00 00 00 00 
3309c     00          | 	byte	$00[17]
3309d     01 01 00 00 
330a1     00 00 00 00 
330a5     00 00 00 00 
330a9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
330ad     00 00 00 00 
      ...             
33251     00 00 00 00 
33255     00          | 	byte	$00[425]
33256     73 32 00 04 
3325a     00 00 10 00 
3325e     00 00 00 00 
33262     00 00 00 00 | atari2 file "atari2.s2"
33266     43 87 43 87 
3326a     43 87 44 87 
3326e     43 87 44 87 
33272     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33276     43 87 43 87 
3327a     43 87 44 87 
3327e     43 87 43 87 
33282     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33286     44 87 43 87 
3328a     44 87 43 87 
3328e     43 87 43 87 
33292     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33296     43 87 43 87 
3329a     44 87 43 87 
3329e     44 87 44 87 
332a2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
332a6     43 87 43 87 
332aa     44 87 43 87 
332ae     43 87 42 87 
332b2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
332b6     43 87 43 87 
332ba     43 87 43 87 
332be     44 87 43 87 
332c2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
332c6     44 87 44 87 
332ca     43 87 44 87 
332ce     43 87 44 87 
332d2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
332d6     44 87 43 87 
332da     44 87 44 87 
332de     43 87 43 87 
332e2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
332e6     43 87 44 87 
332ea     44 87 43 87 
332ee     43 87 44 87 
332f2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
332f6     43 87 43 87 
332fa     43 87 43 87 
332fe     43 87 43 87 
33302     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33306     42 87 43 87 
3330a     44 87 42 87 
3330e     43 87 43 87 
33312     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33316     43 87 44 87 
3331a     44 87 43 87 
3331e     43 87 43 87 
33322     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33326     43 87 5C 87 
3332a     EE 86 AC 87 
3332e     4C 7C A3 78 
33332     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33336     BC 78 BB 78 
3333a     BD 78 BC 78 
3333e     BB 78 BD 78 
33342     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33346     BB 78 BB 78 
3334a     BC 78 BC 78 
3334e     BC 78 BB 78 
33352     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33356     BC 78 BC 78 
3335a     BC 78 BC 78 
3335e     BC 78 BC 78 
33362     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33366     BB 78 BC 78 
3336a     A0 78 4C 7C 
3336e     11 7A 29 89 
33372     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
33376     44 87 43 87 
3337a     44 87 43 87 
3337e     43 87 42 87 
33382     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33386     43 87 43 87 
3338a     44 87 ED 85 
3338e     71 85 52 79 
33392     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33396     BC 78 BC 78 
3339a     BC 78 BC 78 
3339e     BC 78 BC 78 
333a2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
333a6     BC 78 BC 78 
333aa     BC 78 A0 78 
333ae     CF 7A B9 81 
333b2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
333b6     44 87 43 87 
333ba     43 87 44 87 
333be     43 87 44 87 
333c2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
333c6     43 87 43 87 
333ca     43 87 43 87 
333ce     44 87 43 87 
333d2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
333d6     43 87 43 87 
333da     44 87 43 87 
333de     44 87 43 87 
333e2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
333e6     44 87 43 87 
333ea     43 87 43 87 
333ee     5A 87 39 81 
333f2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
333f6     A5 78 BC 78 
333fa     BB 78 BC 78 
333fe     BB 78 BC 78 
33402     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33406     BC 78 BC 78 
3340a     BC 78 BC 78 
3340e     BC 78 8F 79 
33412     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33416     09 85 47 87 
3341a     43 87 43 87 
3341e     42 87 42 87 
33422     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33426     43 87 43 87 
3342a     43 87 43 87 
3342e     43 87 44 87 
33432     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33436     43 87 43 87 
3343a     44 87 43 87 
3343e     42 87 43 87 
33442     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33446     44 87 43 87 
3344a     43 87 43 87 
3344e     44 87 44 87 
33452     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33456     94 78 55 7A 
3345a     B9 78 BC 78 
3345e     BC 78 BC 78 
33462     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33466     BC 78 BB 78 
3346a     BC 78 BC 78 
3346e     BC 78 BC 78 
33472     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33476     BB 78 BC 78 
3347a     BC 78 BC 78 
3347e     BB 78 BC 78 
33482     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33486     BC 78 BC 78 
3348a     BD 78 BC 78 
3348e     BC 78 BB 78 
33492     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33496     94 78 B3 84 
3349a     36 84 4A 87 
3349e     43 87 43 87 
334a2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
334a6     43 87 44 87 
334aa     43 87 43 87 
334ae     43 87 43 87 
334b2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
334b6     43 87 44 87 
334ba     43 87 44 87 
334be     43 87 43 87 
334c2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
334c6     43 87 43 87 
334ca     43 87 45 87 
334ce     43 87 43 87 
334d2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
334d6     43 87 44 87 
334da     44 87 44 87 
334de     43 87 43 87 
334e2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
334e6     43 87 42 87 
334ea     43 87 43 87 
334ee     44 87 43 87 
334f2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
334f6     54 87 3C 82 
334fa     36 83 52 79 
334fe     C6 78 BC 78 
33502     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33506     BB 78 BB 78 
3350a     BC 78 BC 78 
3350e     BC 78 BC 78 
33512     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33516     BD 78 ED 78 
3351a     1B 79 F4 83 
3351e     4D 83 4E 87 
33522     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33526     44 87 43 87 
3352a     42 87 44 87 
3352e     43 87 42 87 
33532     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33536     43 87 54 87 
3353a     26 82 B3 84 
3353e     D6 77 BB 78 
33542     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33546     BC 78 BB 78 
3354a     BB 78 BB 78 
3354e     BB 78 BB 78 
33552     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
33556     BC 78 BC 78 
3355a     26 79 18 75 
3355e     36 83 1F 84 
33562     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
33566     43 87 43 87 
3356a     43 87 43 87 
3356e     43 87 44 87 
33572     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33576     43 87 44 87 
3357a     44 87 43 87 
3357e     43 87 43 87 
33582     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
33586     43 87 43 87 
3358a     43 87 43 87 
3358e     44 87 44 87 
33592     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
33596     44 87 43 87 
3359a     43 87 43 87 
3359e     43 87 44 87 
335a2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
335a6     44 87 44 87 
335aa     44 87 43 87 
335ae     44 87 43 87 
335b2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
335b6     43 87 43 87 
335ba     43 87 44 87 
335be     44 87 43 87 
335c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
335c6     43 87 43 87 
335ca     43 87 43 87 
335ce     43 87 44 87 
335d2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
335d6     43 87 44 87 
335da     43 87 44 87 
335de     19 87 7D 86 
335e2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
335e6     B1 78 BC 78 
335ea     BC 78 BC 78 
335ee     BC 78 BC 78 
335f2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
335f6     BC 78 BC 78 
335fa     BD 78 BC 78 
335fe     B7 78 3B 7B 
33602     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33606     96 86 44 87 
3360a     43 87 43 87 
3360e     43 87 43 87 
33612     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33616     44 87 44 87 
3361a     43 87 44 87 
3361e     43 87 44 87 
33622     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33626     43 87 44 87 
3362a     43 87 44 87 
3362e     43 87 44 87 
33632     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33636     43 87 44 87 
3363a     43 87 43 87 
3363e     44 87 43 87 
33642     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33646     44 87 44 87 
3364a     43 87 43 87 
3364e     43 87 44 87 
33652     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33656     43 87 43 87 
3365a     43 87 43 87 
3365e     44 87 44 87 
33662     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33666     36 83 CF 7A 
3366a     AB 78 BB 78 
3366e     BC 78 BC 78 
33672     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33676     BB 78 BC 78 
3367a     BC 78 BC 78 
3367e     BC 78 BC 78 
33682     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33686     BC 78 BC 78 
3368a     BC 78 BB 78 
3368e     BC 78 BC 78 
33692     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33696     BB 78 BC 78 
3369a     BB 78 BC 78 
3369e     BC 78 BD 78 
336a2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
336a6     BC 78 BC 78 
336aa     BC 78 BC 78 
336ae     BC 78 BD 78 
336b2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
336b6     BC 78 BB 78 
336ba     BC 78 BB 78 
336be     BB 78 BC 78 
336c2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
336c6     BC 78 BC 78 
336ca     BC 78 BC 78 
336ce     BC 78 BB 78 
336d2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
336d6     BC 78 BC 78 
336da     BC 78 BD 78 
336de     BB 78 BC 78 
336e2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
336e6     BC 78 BC 78 
336ea     BC 78 BB 78 
336ee     BC 78 BB 78 
336f2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
336f6     BB 78 BC 78 
336fa     BC 78 BC 78 
336fe     BC 78 BB 78 
33702     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33706     BC 78 BC 78 
3370a     BC 78 BB 78 
3370e     BC 78 BB 78 
33712     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33716     BC 78 BC 78 
3371a     BC 78 BC 78 
3371e     BB 78 BC 78 
33722     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33726     BC 78 9F 78 
3372a     52 79 B3 84 
3372e     2F 86 60 87 
33732     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33736     44 87 43 87 
3373a     43 87 43 87 
3373e     43 87 43 87 
33742     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33746     43 87 43 87 
3374a     43 87 44 87 
3374e     43 87 43 87 
33752     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33756     43 87 43 87 
3375a     43 87 43 87 
3375e     43 87 44 87 
33762     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33766     44 87 44 87 
3376a     5E 87 BC 80 
3376e     FB 80 94 78 
33772     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33776     BD 78 BC 78 
3377a     BB 78 BC 78 
3377e     BB 78 BB 78 
33782     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33786     BC 78 BB 78 
3378a     BB 78 6B 79 
3378e     D6 77 AC 87 
33792     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33796     43 87 44 87 
3379a     43 87 43 87 
3379e     44 87 43 87 
337a2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
337a6     43 87 44 87 
337aa     43 87 5C 87 
337ae     E7 80 00 80 
337b2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
337b6     BC 78 BD 78 
337ba     BC 78 BC 78 
337be     BC 78 BB 78 
337c2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
337c6     BC 78 BC 78 
337ca     BB 78 BC 78 
337ce     BB 78 BC 78 
337d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
337d6     BB 78 BC 78 
337da     BC 78 BC 78 
337de     BC 78 BC 78 
337e2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
337e6     BC 78 BC 78 
337ea     BC 78 BC 78 
337ee     A0 78 8D 7B 
337f2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
337f6     60 87 43 87 
337fa     44 87 44 87 
337fe     43 87 43 87 
33802     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33806     44 87 43 87 
3380a     43 87 43 87 
3380e     44 87 73 86 
33812     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33816     51 7B B6 78 
3381a     BC 78 BD 78 
3381e     BC 78 BC 78 
33822     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33826     BB 78 BC 78 
3382a     BD 78 BB 78 
3382e     BC 78 BB 78 
33832     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33836     BC 78 BC 78 
3383a     BC 78 BC 78 
3383e     BB 78 BC 78 
33842     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33846     BC 78 BB 78 
3384a     BB 78 BC 78 
3384e     BC 78 BB 78 
33852     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33856     22 8C AF 84 
3385a     48 87 43 87 
3385e     44 87 43 87 
33862     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33866     43 87 42 87 
3386a     43 87 43 87 
3386e     44 87 43 87 
33872     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33876     43 87 43 87 
3387a     44 87 44 87 
3387e     43 87 43 87 
33882     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33886     43 87 43 87 
3388a     43 87 43 87 
3388e     44 87 43 87 
33892     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33896     9F 8B D6 77 
3389a     16 7C B3 78 
3389e     BC 78 BB 78 
338a2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
338a6     BB 78 BC 78 
338aa     BB 78 BC 78 
338ae     BC 78 BC 78 
338b2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
338b6     BC 78 BB 78 
338ba     BB 78 BC 78 
338be     BB 78 BC 78 
338c2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
338c6     BB 78 BB 78 
338ca     BC 78 BC 78 
338ce     BC 78 BB 78 
338d2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
338d6     BC 78 BC 78 
338da     BC 78 BD 78 
338de     BB 78 BC 78 
338e2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
338e6     BC 78 BC 78 
338ea     BC 78 BB 78 
338ee     BC 78 BC 78 
338f2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
338f6     A8 78 54 7E 
338fa     F4 83 17 82 
338fe     50 87 43 87 
33902     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33906     44 87 43 87 
3390a     44 87 43 87 
3390e     43 87 44 87 
33912     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33916     43 87 28 87 
3391a     20 85 CF 7A 
3391e     70 7D AD 78 
33922     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33926     BB 78 BC 78 
3392a     BC 78 BC 78 
3392e     BB 78 BB 78 
33932     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33936     BB 78 B2 78 
3393a     9A 7C CF 7A 
3393e     4A 87 0D 87 
33942     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33946     43 87 44 87 
3394a     43 87 44 87 
3394e     43 87 43 87 
33952     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33956     44 87 43 87 
3395a     28 87 51 85 
3395e     11 7A 1E 7D 
33962     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33966     BC 78 BB 78 
3396a     BC 78 BC 78 
3396e     BC 78 BC 78 
33972     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33976     BB 78 BC 78 
3397a     BB 78 BC 78 
3397e     BC 78 BC 78 
33982     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33986     BB 78 BC 78 
3398a     BC 78 BC 78 
3398e     BD 78 BB 78 
33992     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33996     BC 78 BB 78 
3399a     BC 78 BC 78 
3399e     BC 78 BB 78 
339a2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339a6     BC 78 BC 78 
339aa     BC 78 BC 78 
339ae     BB 78 BC 78 
339b2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
339b6     BC 78 BD 78 
339ba     BC 78 BC 78 
339be     BC 78 BB 78 
339c2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339c6     BC 78 BB 78 
339ca     BB 78 BC 78 
339ce     BC 78 BB 78 
339d2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339d6     BB 78 BB 78 
339da     BB 78 BC 78 
339de     B6 78 48 7D 
339e2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
339e6     56 87 43 87 
339ea     42 87 44 87 
339ee     44 87 43 87 
339f2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
339f6     43 87 44 87 
339fa     43 87 44 87 
339fe     4C 87 7E 83 
33a02     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33a06     F7 78 BC 78 
33a0a     BC 78 BB 78 
33a0e     BB 78 BC 78 
33a12     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a16     BC 78 BB 78 
33a1a     BC 78 BC 78 
33a1e     BB 78 BC 78 
33a22     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33a26     BB 78 BC 78 
33a2a     BC 78 BC 78 
33a2e     BC 78 BB 78 
33a32     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a36     BC 78 BC 78 
33a3a     BC 78 BC 78 
33a3e     BC 78 BB 78 
33a42     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a46     BC 78 BB 78 
33a4a     BB 78 BC 78 
33a4e     BC 78 BB 78 
33a52     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a56     BC 78 BC 78 
33a5a     BB 78 BC 78 
33a5e     BC 78 BC 78 
33a62     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33a66     73 32 00 04 
33a6a     00 00 10 00 
33a6e     00 00 00 00 
33a72     00 00 00 00 | atari12 file "atari12.s2"
33a76     00 6D 00 6D 
33a7a     00 6D 00 6D 
33a7e     00 6D 00 6D 
33a82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a86     00 6D 00 6D 
33a8a     00 6D 00 6D 
33a8e     00 6D 00 6D 
33a92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a96     00 6D 00 6D 
33a9a     00 6D 00 6D 
33a9e     00 6D 00 6D 
33aa2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33aa6     00 6D 00 6D 
33aaa     00 6D 00 6D 
33aae     00 6D 00 6D 
33ab2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ab6     00 6D 00 6D 
33aba     00 6D 00 6D 
33abe     00 6D 00 6D 
33ac2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33ac6     00 6C 00 6C 
33aca     00 6C 00 6C 
33ace     00 6C 00 6C 
33ad2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ad6     00 6C 00 6C 
33ada     00 6C 00 6C 
33ade     00 6C 00 6C 
33ae2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ae6     00 6C 00 6C 
33aea     00 6C 00 6C 
33aee     00 6C 00 6C 
33af2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33af6     00 6C 00 6C 
33afa     00 6C 00 6C 
33afe     00 6C 00 6C 
33b02     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b06     00 6C 00 6C 
33b0a     00 6C 00 6C 
33b0e     00 6C 00 6C 
33b12     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b16     00 6C 00 6C 
33b1a     00 6C 00 6C 
33b1e     00 6C 00 6C 
33b22     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b26     00 6C 00 6C 
33b2a     00 6C 00 6C 
33b2e     00 6C 00 6C 
33b32     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b36     00 6C 00 6C 
33b3a     00 6C 00 6C 
33b3e     00 6C 00 6C 
33b42     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b46     00 6C 00 6C 
33b4a     00 6C 00 6C 
33b4e     00 6C 00 6C 
33b52     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b56     00 6C 00 6C 
33b5a     00 6C 00 6C 
33b5e     00 6C 00 6C 
33b62     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b66     00 6C 00 6C 
33b6a     00 6C 00 6C 
33b6e     00 6C 00 6C 
33b72     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b76     00 6C 00 6B 
33b7a     00 6B 00 6B 
33b7e     00 6B 00 6B 
33b82     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b86     00 6B 00 6B 
33b8a     00 6B 00 6B 
33b8e     00 6B 00 6B 
33b92     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b96     00 6B 00 6B 
33b9a     00 6B 00 6B 
33b9e     00 6B 00 6B 
33ba2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33ba6     00 6B 00 6B 
33baa     00 6B 00 6B 
33bae     00 6B 00 6B 
33bb2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bb6     00 6B 00 6B 
33bba     00 6B 00 6B 
33bbe     00 6B 00 6B 
33bc2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bc6     00 6B 00 6B 
33bca     00 6B 00 6B 
33bce     00 6B 00 6B 
33bd2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bd6     00 6B 00 6B 
33bda     00 6B 00 6B 
33bde     00 6B 00 6B 
33be2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33be6     00 6B 00 6B 
33bea     00 6B 00 6B 
33bee     00 6B 00 6B 
33bf2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bf6     00 6B 00 6B 
33bfa     00 6B 00 6B 
33bfe     00 6B 00 6B 
33c02     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c06     00 6B 00 6B 
33c0a     00 6B 00 6B 
33c0e     00 6A 00 9D 
33c12     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33c16     00 9E 00 9E 
33c1a     00 9E 00 9E 
33c1e     00 9E 00 9E 
33c22     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c26     00 9E 00 9E 
33c2a     00 9E 00 9E 
33c2e     00 9E 00 9E 
33c32     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c36     00 9E 00 9E 
33c3a     00 9E 00 9E 
33c3e     00 9E 00 9E 
33c42     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c46     00 9E 00 9E 
33c4a     00 9E 00 9E 
33c4e     00 9E 00 9E 
33c52     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c56     00 9E 00 9E 
33c5a     00 9E 00 9E 
33c5e     00 9E 00 9E 
33c62     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c66     00 9E 00 9E 
33c6a     00 9E 00 9E 
33c6e     00 9E 00 9E 
33c72     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c76     00 9E 00 9E 
33c7a     00 9E 00 9E 
33c7e     00 9E 00 9E 
33c82     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c86     00 9E 00 9E 
33c8a     00 9E 00 9E 
33c8e     00 9E 00 9E 
33c92     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c96     00 9E 00 9E 
33c9a     00 9E 00 9E 
33c9e     00 9E 00 9E 
33ca2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33ca6     00 9F 00 9F 
33caa     00 9F 00 9F 
33cae     00 9F 00 9F 
33cb2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cb6     00 9F 00 9F 
33cba     00 9F 00 9F 
33cbe     00 9F 00 9F 
33cc2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cc6     00 9F 00 9F 
33cca     00 9F 00 9F 
33cce     00 9F 00 9F 
33cd2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cd6     00 9F 00 9F 
33cda     00 9F 00 9F 
33cde     00 9F 00 9F 
33ce2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33ce6     00 9F 00 9F 
33cea     00 9F 00 9F 
33cee     00 9F 00 9F 
33cf2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cf6     00 9F 00 9F 
33cfa     00 9F 00 9F 
33cfe     00 9F 00 9F 
33d02     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d06     00 9F 00 9F 
33d0a     00 9F 00 9F 
33d0e     00 9F 00 9F 
33d12     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d16     00 9F 00 9F 
33d1a     00 9F 00 9F 
33d1e     00 9F 00 9F 
33d22     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d26     00 9F 00 9F 
33d2a     00 9F 00 9F 
33d2e     00 9F 00 9F 
33d32     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d36     00 9F 00 9F 
33d3a     00 9F 00 9F 
33d3e     00 9F 00 9F 
33d42     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d46     00 9F 00 9F 
33d4a     00 9F 00 9F 
33d4e     00 9F 00 9F 
33d52     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d56     00 9F 00 9F 
33d5a     00 9F 00 9F 
33d5e     00 9F 00 9F 
33d62     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d66     00 9F 00 9F 
33d6a     00 9F 00 A0 
33d6e     00 A0 00 A0 
33d72     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d76     00 A0 00 A0 
33d7a     00 A0 00 A0 
33d7e     00 A0 00 A0 
33d82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d86     00 A0 00 A0 
33d8a     00 A0 00 A0 
33d8e     00 A0 00 A0 
33d92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d96     00 A0 00 A0 
33d9a     00 A0 00 A0 
33d9e     00 A0 00 A0 
33da2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33da6     00 A0 00 A0 
33daa     00 A0 00 A0 
33dae     00 A0 00 A0 
33db2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33db6     00 A0 00 A0 
33dba     00 A0 00 A0 
33dbe     00 A0 00 A0 
33dc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dc6     00 A0 00 A0 
33dca     00 A0 00 A0 
33dce     00 A0 00 A0 
33dd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dd6     00 A0 00 A0 
33dda     00 A0 00 A0 
33dde     00 A0 00 A0 
33de2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33de6     00 A0 00 A0 
33dea     00 A0 00 A0 
33dee     00 A0 00 A0 
33df2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33df6     00 A0 00 A0 
33dfa     00 A0 00 A0 
33dfe     00 A0 00 A0 
33e02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e06     00 A0 00 A0 
33e0a     00 A0 00 A0 
33e0e     00 A0 00 A0 
33e12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e16     00 A0 00 A0 
33e1a     00 A0 00 A0 
33e1e     00 A0 00 A0 
33e22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 
33e2e     00 A0 00 A0 
33e32     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33e36     00 6D 00 6D 
33e3a     00 6D 00 6D 
33e3e     00 6D 00 6D 
33e42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e46     00 6D 00 6D 
33e4a     00 6D 00 6D 
33e4e     00 6D 00 6D 
33e52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e56     00 6D 00 6D 
33e5a     00 6D 00 6D 
33e5e     00 6D 00 6D 
33e62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e66     00 6D 00 6D 
33e6a     00 6D 00 6D 
33e6e     00 6D 00 6D 
33e72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e76     00 6D 00 6D 
33e7a     00 6D 00 6D 
33e7e     00 6D 00 6D 
33e82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e86     00 6D 00 6D 
33e8a     00 6D 00 6D 
33e8e     00 6D 00 6D 
33e92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e96     00 6D 00 6D 
33e9a     00 6D 00 6D 
33e9e     00 6D 00 6D 
33ea2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ea6     00 6D 00 6D 
33eaa     00 6D 00 6D 
33eae     00 6D 00 6D 
33eb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33eb6     00 6D 00 6D 
33eba     00 A0 00 A0 
33ebe     00 A0 00 A0 
33ec2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ec6     00 A0 00 A0 
33eca     00 A0 00 A0 
33ece     00 A0 00 A0 
33ed2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ed6     00 A0 00 A0 
33eda     00 A0 00 A0 
33ede     00 A0 00 A0 
33ee2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ee6     00 A0 00 A0 
33eea     00 A0 00 A0 
33eee     00 A0 00 A0 
33ef2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ef6     00 A0 00 A0 
33efa     00 A0 00 A0 
33efe     00 A0 00 A0 
33f02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f06     00 A0 00 A0 
33f0a     00 A0 00 A0 
33f0e     00 A0 00 A0 
33f12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f16     00 A0 00 A0 
33f1a     00 A0 00 A0 
33f1e     00 A0 00 A0 
33f22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f26     00 A0 00 A0 
33f2a     00 A0 00 A0 
33f2e     00 A0 00 A0 
33f32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f36     00 A0 00 A0 
33f3a     00 A0 00 A0 
33f3e     00 A0 00 A0 
33f42     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33f46     00 6D 00 6D 
33f4a     00 6D 00 6D 
33f4e     00 6D 00 6D 
33f52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f56     00 6D 00 6D 
33f5a     00 6D 00 6D 
33f5e     00 6D 00 6D 
33f62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f66     00 6D 00 6D 
33f6a     00 6D 00 6D 
33f6e     00 6D 00 6D 
33f72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f76     00 6D 00 6D 
33f7a     00 6D 00 6D 
33f7e     00 6D 00 6D 
33f82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f86     00 6D 00 6D 
33f8a     00 6D 00 6D 
33f8e     00 6D 00 6D 
33f92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f96     00 6D 00 6D 
33f9a     00 6D 00 6D 
33f9e     00 6D 00 6D 
33fa2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fa6     00 6D 00 6D 
33faa     00 6D 00 6D 
33fae     00 6D 00 6D 
33fb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fb6     00 6D 00 6D 
33fba     00 6D 00 6D 
33fbe     00 6D 00 6D 
33fc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fc6     00 6D 00 6D 
33fca     00 6C 00 A0 
33fce     00 9F 00 A0 
33fd2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33fd6     00 A0 00 A0 
33fda     00 A0 00 A0 
33fde     00 A0 00 A0 
33fe2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fe6     00 A0 00 A0 
33fea     00 A0 00 A0 
33fee     00 A0 00 A0 
33ff2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ff6     00 A0 00 A0 
33ffa     00 A0 00 A0 
33ffe     00 A0 00 A0 
34002     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34006     00 A0 00 A0 
3400a     00 A0 00 A0 
3400e     00 A0 00 A0 
34012     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34016     00 A0 00 A0 
3401a     00 A0 00 A0 
3401e     00 A0 00 A0 
34022     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34026     00 A0 00 A0 
3402a     00 A0 00 A0 
3402e     00 A0 00 A0 
34032     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34036     00 A0 00 A0 
3403a     00 A0 00 A0 
3403e     00 A0 00 A0 
34042     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34046     00 A0 00 A0 
3404a     00 A0 00 A0 
3404e     00 A0 00 A0 
34052     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34056     00 A0 00 A0 
3405a     00 A0 00 A0 
3405e     00 A0 00 A0 
34062     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34066     00 A0 00 A0 
3406a     00 A0 00 A0 
3406e     00 A0 00 A0 
34072     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34076     00 A0 00 A0 
3407a     00 A0 00 A0 
3407e     00 A0 00 A0 
34082     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
34086     00 A1 00 A1 
3408a     00 A1 00 A1 
3408e     00 A1 00 A1 
34092     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34096     00 A1 00 A1 
3409a     00 A1 00 A1 
3409e     00 A1 00 A1 
340a2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340a6     00 A1 00 A1 
340aa     00 A1 00 A1 
340ae     00 A1 00 A1 
340b2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340b6     00 A1 00 A1 
340ba     00 A1 00 A1 
340be     00 A1 00 A1 
340c2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340c6     00 A1 00 A1 
340ca     00 A1 00 A1 
340ce     00 A1 00 A1 
340d2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340d6     00 A1 00 A1 
340da     00 A1 00 A1 
340de     00 6E 00 6E 
340e2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
340e6     00 6E 00 6E 
340ea     00 6E 00 6E 
340ee     00 6E 00 6E 
340f2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
340f6     00 6E 00 6E 
340fa     00 6E 00 6E 
340fe     00 6E 00 6E 
34102     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34106     00 6E 00 6E 
3410a     00 6E 00 6E 
3410e     00 6E 00 6E 
34112     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34116     00 6E 00 6D 
3411a     00 6D 00 6D 
3411e     00 6D 00 6D 
34122     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34126     00 6D 00 6D 
3412a     00 6D 00 6D 
3412e     00 6D 00 6D 
34132     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34136     00 6D 00 6D 
3413a     00 6D 00 6D 
3413e     00 6D 00 6D 
34142     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34146     00 6D 00 6D 
3414a     00 6D 00 6D 
3414e     00 6D 00 6D 
34152     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34156     00 6D 00 6D 
3415a     00 6D 00 6D 
3415e     00 6D 00 6D 
34162     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34166     00 6D 00 6D 
3416a     00 6D 00 6D 
3416e     00 6D 00 6D 
34172     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34176     00 6D 00 6D 
3417a     00 6D 00 6D 
3417e     00 6D 00 6D 
34182     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34186     00 6D 00 6D 
3418a     00 6D 00 6D 
3418e     00 6D 00 6D 
34192     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34196     00 6D 00 6D 
3419a     00 6D 00 6D 
3419e     00 6D 00 6D 
341a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341a6     00 6D 00 6D 
341aa     00 6D 00 6D 
341ae     00 6D 00 6D 
341b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341b6     00 6D 00 6D 
341ba     00 6D 00 6D 
341be     00 6D 00 6D 
341c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341c6     00 6D 00 6D 
341ca     00 6C 00 6C 
341ce     00 6C 00 6C 
341d2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
341d6     00 6C 00 6C 
341da     00 6C 00 6C 
341de     00 6C 00 6C 
341e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
341e6     00 6C 00 6C 
341ea     00 6C 00 6C 
341ee     00 9D 00 9F 
341f2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
341f6     00 9F 00 9F 
341fa     00 9F 00 9F 
341fe     00 A0 00 A0 
34202     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34206     00 A0 00 A0 
3420a     00 A0 00 A0 
3420e     00 A0 00 A0 
34212     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34216     00 A0 00 A0 
3421a     00 A0 00 A0 
3421e     00 A0 00 A0 
34222     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34226     00 A0 00 A0 
3422a     00 A0 00 A0 
3422e     00 A0 00 A0 
34232     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34236     00 A0 00 A0 
3423a     00 A0 00 A0 
3423e     00 A0 00 A0 
34242     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34246     00 A0 00 A0 
3424a     00 A0 00 A0 
3424e     00 A0 00 A0 
34252     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34256     00 A0 00 A0 
3425a     00 A0 00 A0 
3425e     00 A0 00 A0 
34262     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34266     00 A0 00 A0 
3426a     00 A0 00 A0 
3426e     00 A0 00 A0 
34272     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34276                 | 
34276     00 00       |              	org
34278 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3427c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34280 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34284 003             | 
34284 003 00 30 04 F6 |                 mov     psramaddr,#0
34288 004             | 
34288 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3428c 005 20 00 00 FF 
34290 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34294 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34298 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3429c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
342a0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
342a4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
342a8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
342ac 00d             | 
342ac 00d 20 00 00 FF 
342b0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
342b4 00f E0 03 00 FF 
342b8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
342bc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
342c0 012             | 
342c0 012             |                 
342c0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
342c4 013             |     
342c4 013 01 2C 60 FD |                 cogid 	t11				' get id
342c8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
342cc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
342d0 016             | 
342d0 016 00 00 00 00 | t11 		long 	0
342d4 017 00 FF 07 00 | mailbox 	long 	$7FF00
342d8 018 00 00 00 00 | psramaddr 	long 	0
342dc 019 00 00 00 00 | pslockval	long 	0
342e0 01a 00 00 00 00 | cmd             long    0
342e4 01b 00 00 00 00 | buf1            long    0
342e8 01c 00 40 00 00 | buf2            long    16384
342ec 01d F0 42 03 00 | 	long	@@@_dat_ + 12624
342f0 01e 50 32 20 52 
342f4 01f 65 74 72 6F 
342f8 020 6D 61 63 68 
342fc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
34300 022 42 41 53 49 
34304 023 43 20 76 65 
34308 024 72 73 69 6F 
3430c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34310 026 33 30 00 00 | 	byte	$33, $30, $00, $00
34314 027             | 	alignl
34314 027             | _hg010b_spin2_dat_
34314 027             | 
34314 027 00 00 00 00 
34318 028 00 00 00 00 
3431c 029 00 00 00 00 
34320 02a 00 00 00 00 
34324 02b 00 00 00    | vga_font       file "vgafont.def"
34327 02b 7E 81 A5 81 
3432b 02c 81 BD 99 81 
3432f 02d 81 7E 00 00 
34333 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34337 02f 7E FF DB FF 
3433b 030 FF C3 E7 FF 
3433f 031 FF 7E 00 00 
34343 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34347 033 00 36 7F 7F 
3434b 034 7F 7F 3E 1C 
3434f 035 08 00 00 00 
34353 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34357 037 00 08 1C 3E 
3435b 038 7F 3E 1C 08 
3435f 039 00 00 00 00 
34363 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34367 03b 18 3C 3C E7 
3436b 03c E7 E7 18 18 
3436f 03d 3C 00 00 00 
34373 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34377 03f 18 3C 7E FF 
3437b 040 FF 7E 18 18 
3437f 041 3C 00 00 00 
34383 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34387 043 00 00 00 18 
3438b 044 3C 3C 18 00 
3438f 045 00 00 00 00 
34393 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34397 047 FF FF FF E7 
3439b 048 C3 C3 E7 FF 
3439f 049 FF FF FF FF 
343a3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
343a7 04b 00 00 3C 66 
343ab 04c 42 42 66 3C 
343af 04d 00 00 00 00 
343b3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
343b7 04f FF FF C3 99 
343bb 050 BD BD 99 C3 
343bf 051 FF FF FF FF 
343c3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
343c7 053 78 70 58 4C 
343cb 054 1E 33 33 33 
343cf 055 33 1E 00 00 
343d3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
343d7 057 3C 66 66 66 
343db 058 66 3C 18 7E 
343df 059 18 18 00 00 
343e3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
343e7 05b FC CC FC 0C 
343eb 05c 0C 0C 0C 0E 
343ef 05d 0F 07 00 00 
343f3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
343f7 05f FE C6 FE C6 
343fb 060 C6 C6 C6 E6 
343ff 061 E7 67 03 00 
34403 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34407 063 18 18 DB 3C 
3440b 064 E7 3C DB 18 
3440f 065 18 00 00 00 
34413 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34417 067 03 07 0F 1F 
3441b 068 7F 1F 0F 07 
3441f 069 03 01 00 00 
34423 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34427 06b 60 70 78 7C 
3442b 06c 7F 7C 78 70 
3442f 06d 60 40 00 00 
34433 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34437 06f 18 3C 7E 18 
3443b 070 18 18 7E 3C 
3443f 071 18 00 00 00 
34443 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34447 073 66 66 66 66 
3444b 074 66 66 66    | 	byte	$66[7]
3444e 075 00 66 66 00 
34452 076 00 00 00 00 
34456 077 00 FE DB DB 
3445a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3445e 079 D8 D8 D8 00 
34462 07a 00 00 00 3E 
34466 07b 63 06 1C 36 
3446a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3446e 07d 30 63 3E 00 
34472 07e 00 00 00 00 
34476 07f 00 00 00 00 
3447a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3447e 081 7F 7F 7F 00 
34482 082 00 00 00 00 
34486 083 00 18 3C 7E 
3448a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3448e 085 3C 18 7E 00 
34492 086 00 00 00 00 
34496 087 00 18 3C 7E 
3449a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3449e 089 18 18 18 00 
344a2 08a 00 00 00 00 
344a6 08b 00 18 18 18 
344aa 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
344ae 08d 7E 3C 18 00 
344b2 08e 00 00 00 00 
344b6 08f 00 00 00 18 
344ba 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
344be 091 00 00 00 00 
344c2 092 00 00 00 00 
344c6 093 00 00 00    | 	byte	$00[11]
344c9 094 0C 06 7F 06 
344cd 095 0C 00 00 00 
344d1 096 00 00 00 00 
344d5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
344d9 098 00 03 03 03 
344dd 099 7F 00 00 00 
344e1 09a 00 00 00 00 
344e5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
344e9 09c 14 36 7F 36 
344ed 09d 14 00 00 00 
344f1 09e 00 00 00 00 
344f5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
344f9 0a0 1C 1C 3E 3E 
344fd 0a1 7F 7F 00 00 
34501 0a2 00 00 00 00 
34505 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34509 0a4 7F 3E 3E 1C 
3450d 0a5 1C 08 00 00 
34511 0a6 00 00 00 00 
34515 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34519 0a8 00 00 00 00 
3451d 0a9 00 00 00 00 
34521 0aa 00 00 00 00 
34525 0ab 00 00       | 	byte	$00[14]
34527 0ab 18 3C 3C 3C 
3452b 0ac 18 18 18 00 
3452f 0ad 18 18 00 00 
34533 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34537 0af 66 24 00 00 
3453b 0b0 00 00 00 00 
3453f 0b1 00 00 00 00 
34543 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34547 0b3 00 36 36 7F 
3454b 0b4 36 36 36 7F 
3454f 0b5 36 36 00 00 
34553 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34557 0b7 3E 63 43 03 
3455b 0b8 3E 60 60 61 
3455f 0b9 63 3E 18 18 
34563 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34567 0bb 00 00 43 63 
3456b 0bc 30 18 0C 06 
3456f 0bd 63 61 00 00 
34573 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
34577 0bf 1C 36 36 1C 
3457b 0c0 6E 3B 33 33 
3457f 0c1 33 6E 00 00 
34583 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34587 0c3 0C 0C 0C 06 
3458b 0c4 00 00 00 00 
3458f 0c5 00 00 00 00 
34593 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34597 0c7 30 18 0C 0C 
3459b 0c8 0C 0C 0C 0C 
3459f 0c9 18 30 00 00 
345a3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
345a7 0cb 0C 18 30 30 
345ab 0cc 30 30 30 30 
345af 0cd 18 0C 00 00 
345b3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
345b7 0cf 00 00 00 66 
345bb 0d0 3C FF 3C 66 
345bf 0d1 00 00 00 00 
345c3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
345c7 0d3 00 00 00 18 
345cb 0d4 18 7E 18 18 
345cf 0d5 00 00 00 00 
345d3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
345d7 0d7 00 00 00 00 
345db 0d8 00 00 00 00 | 	byte	$00[8]
345df 0d9 18 18 18 0C 
345e3 0da 00 00 00 00 
345e7 0db 00 00 00 00 
345eb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
345ef 0dd 00 00 00 00 
345f3 0de 00 00 00 00 
345f7 0df 00 00 00 00 
345fb 0e0 00 00 00 00 | 	byte	$00[16]
345ff 0e1 18 18 00 00 
34603 0e2 00 00 00 00 
34607 0e3 00 00 40 60 
3460b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3460f 0e5 03 01 00 00 
34613 0e6 00 00 00 00 
34617 0e7 1C 36 63 63 
3461b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3461f 0e9 36 1C 00 00 
34623 0ea 00 00 00 00 
34627 0eb 18 1C 1E 18 
3462b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3462f 0ed 18 7E 00 00 
34633 0ee 00 00 00 00 
34637 0ef 3E 63 60 30 
3463b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3463f 0f1 63 7F 00 00 
34643 0f2 00 00 00 00 
34647 0f3 3E 63 60 60 
3464b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3464f 0f5 63 3E 00 00 
34653 0f6 00 00 00 00 
34657 0f7 30 38 3C 36 
3465b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3465f 0f9 30 78 00 00 
34663 0fa 00 00 00 00 
34667 0fb 7F 03 03 03 
3466b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3466f 0fd 63 3E 00 00 
34673 0fe 00 00 00 00 
34677 0ff 1C 06 03 03 
3467b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3467f 101 63 3E 00 00 
34683 102 00 00 00 00 
34687 103 7F 63 60 60 
3468b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3468f 105 0C 0C 00 00 
34693 106 00 00 00 00 
34697 107 3E 63 63 63 
3469b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3469f 109 63 3E 00 00 
346a3 10a 00 00 00 00 
346a7 10b 3E 63 63 63 
346ab 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
346af 10d 30 1E 00 00 
346b3 10e 00 00 00 00 
346b7 10f 00 00 00 18 
346bb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
346bf 111 18 18 00 00 
346c3 112 00 00 00 00 
346c7 113 00 00 00 18 
346cb 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
346cf 115 18 18 0C 00 
346d3 116 00 00 00 00 
346d7 117 00 60 30 18 
346db 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
346df 119 30 60 00 00 
346e3 11a 00 00 00 00 
346e7 11b 00 00 00 7E 
346eb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
346ef 11d 00 00 00 00 
346f3 11e 00 00 00 00 
346f7 11f 00          | 	byte	$00[9]
346f8 120 06 0C 18 30 
346fc 121 60 30 18 0C 
34700 122 06 00 00 00 
34704 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34708 124 63 63 30 18 
3470c 125 18 18 00 18 
34710 126 18 00 00 00 
34714 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34718 128 3E 63 63 7B 
3471c 129 7B 7B 3B 03 
34720 12a 3E 00 00 00 
34724 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34728 12c 1C 36 63 63 
3472c 12d 7F 63 63 63 
34730 12e 63 00 00 00 
34734 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34738 130 66 66 66 3E 
3473c 131 66 66 66 66 
34740 132 3F 00 00 00 
34744 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34748 134 66 43 03 03 
3474c 135 03 03 43 66 
34750 136 3C 00 00 00 
34754 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34758 138 36 66 66 66 
3475c 139 66 66 66 36 
34760 13a 1F 00 00 00 
34764 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34768 13c 66 46 16 1E 
3476c 13d 16 06 46 66 
34770 13e 7F 00 00 00 
34774 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34778 140 66 46 16 1E 
3477c 141 16 06 06 06 
34780 142 0F 00 00 00 
34784 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34788 144 66 43 03 03 
3478c 145 7B 63 63 66 
34790 146 5C 00 00 00 
34794 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34798 148 63 63 63 7F 
3479c 149 63 63 63 63 
347a0 14a 63 00 00 00 
347a4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
347a8 14c 18 18 18 18 
347ac 14d 18 18 18 18 | 	byte	$18[8]
347b0 14e 3C 00 00 00 
347b4 14f 00 00 00 78 
347b8 150 30 30 30 30 
347bc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
347c0 152 1E 00 00 00 
347c4 153 00 00 00 67 
347c8 154 66 66 36 1E 
347cc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
347d0 156 67 00 00 00 
347d4 157 00 00 00 0F 
347d8 158 06 06 06 06 
347dc 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
347e0 15a 7F 00 00 00 
347e4 15b 00 00 00 63 
347e8 15c 77 7F 7F 6B 
347ec 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
347f0 15e 63 00 00 00 
347f4 15f 00 00 00 63 
347f8 160 67 6F 7F 7B 
347fc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
34800 162 63 00 00 00 
34804 163 00 00 00 3E 
34808 164 63 63 63 63 
3480c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34810 166 3E 00 00 00 
34814 167 00 00 00 3F 
34818 168 66 66 66 3E 
3481c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
34820 16a 0F 00 00 00 
34824 16b 00 00 00 3E 
34828 16c 63 63 63 63 
3482c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
34830 16e 3E 30 70 00 
34834 16f 00 00 00 3F 
34838 170 66 66 66 3E 
3483c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
34840 172 67 00 00 00 
34844 173 00 00 00 3E 
34848 174 63 63 06 1C 
3484c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34850 176 3E 00 00 00 
34854 177 00 00 00 7E 
34858 178 7E 5A 18 18 
3485c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34860 17a 3C 00 00 00 
34864 17b 00 00 00 63 
34868 17c 63 63 63 63 
3486c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34870 17e 3E 00 00 00 
34874 17f 00 00 00 63 
34878 180 63 63 63 63 
3487c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34880 182 08 00 00 00 
34884 183 00 00 00 63 
34888 184 63 63 63 6B 
3488c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34890 186 36 00 00 00 
34894 187 00 00 00 63 
34898 188 63 36 3E 1C 
3489c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
348a0 18a 63 00 00 00 
348a4 18b 00 00 00 66 
348a8 18c 66 66 66 3C 
348ac 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
348b0 18e 3C 00 00 00 
348b4 18f 00 00 00 7F 
348b8 190 63 61 30 18 
348bc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
348c0 192 7F 00 00 00 
348c4 193 00 00 00 3C 
348c8 194 0C 0C 0C 0C 
348cc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
348d0 196 3C 00 00 00 
348d4 197 00 00 00 00 
348d8 198 01 03 07 0E 
348dc 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
348e0 19a 40 00 00 00 
348e4 19b 00 00 00 3C 
348e8 19c 30 30 30 30 
348ec 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
348f0 19e 3C 00 00 00 
348f4 19f 1C 36 00 00 
348f8 1a0 00 00 00 00 
348fc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34900 1a2 00 00 00 00 
34904 1a3 00 00 00 00 
34908 1a4 00 00 00 00 
3490c 1a5 00 00 00 00 
34910 1a6 00          | 	byte	$00[17]
34911 1a6 FF 00 00 0C 
34915 1a7 18 00 00 00 
34919 1a8 00 00 00 00 
3491d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34921 1aa 00 00 00 00 
34925 1ab 00 00 00 00 
34929 1ac 00          | 	byte	$00[9]
3492a 1ac 1E 30 3E 33 
3492e 1ad 33 33 6E 00 
34932 1ae 00 00 00 00 
34936 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3493a 1b0 1E 36 66 66 
3493e 1b1 66 66 3E 00 
34942 1b2 00 00 00 00 
34946 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3494a 1b4 3E 63 03 03 
3494e 1b5 03 63 3E 00 
34952 1b6 00 00 00 00 
34956 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3495a 1b8 3C 36 33 33 
3495e 1b9 33 33 6E 00 
34962 1ba 00 00 00 00 
34966 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3496a 1bc 3E 63 7F 03 
3496e 1bd 03 63 3E 00 
34972 1be 00 00 00 00 
34976 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3497a 1c0 0C 1E 0C 0C 
3497e 1c1 0C 0C 1E 00 
34982 1c2 00 00 00 00 
34986 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3498a 1c4 6E 33 33 33 
3498e 1c5 33 33 3E 30 
34992 1c6 33 1E 00 00 
34996 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3499a 1c8 36 6E 66 66 
3499e 1c9 66 66 67 00 
349a2 1ca 00 00 00 00 
349a6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
349aa 1cc 1C 18 18 18 
349ae 1cd 18 18 3C 00 
349b2 1ce 00 00 00 00 
349b6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
349ba 1d0 70 60 60 60 
349be 1d1 60 60 60 66 
349c2 1d2 66 3C 00 00 
349c6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
349ca 1d4 66 36 1E 1E 
349ce 1d5 36 66 67 00 
349d2 1d6 00 00 00 00 
349d6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
349da 1d8 18 18 18 18 
349de 1d9 18 18       | 	byte	$18[6]
349e0 1da 3C 00 00 00 
349e4 1db 00 00 00 00 
349e8 1dc 00 00 37 7F 
349ec 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
349f0 1de 63 00 00 00 
349f4 1df 00 00 00 00 
349f8 1e0 00 00 3B 66 
349fc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34a00 1e2 66 00 00 00 
34a04 1e3 00 00 00 00 
34a08 1e4 00 00 3E 63 
34a0c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34a10 1e6 3E 00 00 00 
34a14 1e7 00 00 00 00 
34a18 1e8 00 00 3B 66 
34a1c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34a20 1ea 3E 06 06 0F 
34a24 1eb 00 00 00 00 
34a28 1ec 00 00 6E 33 
34a2c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34a30 1ee 3E 30 30 78 
34a34 1ef 00 00 00 00 
34a38 1f0 00 00 3B 6E 
34a3c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34a40 1f2 0F 00 00 00 
34a44 1f3 00 00 00 00 
34a48 1f4 00 00 3E 63 
34a4c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34a50 1f6 3E 00 00 00 
34a54 1f7 00 00 00 08 
34a58 1f8 0C 0C 3F 0C 
34a5c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34a60 1fa 38 00 00 00 
34a64 1fb 00 00 00 00 
34a68 1fc 00 00 33 33 
34a6c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34a70 1fe 6E 00 00 00 
34a74 1ff 00 00 00 00 
34a78 200 00 00 63 63 
34a7c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34a80 202 1C 00 00 00 
34a84 203 00 00 00 00 
34a88 204 00 00 63 63 
34a8c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34a90 206 36 00 00 00 
34a94 207 00 00 00 00 
34a98 208 00 00 63 36 
34a9c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34aa0 20a 63 00 00 00 
34aa4 20b 00 00 00 00 
34aa8 20c 00 00 63 63 
34aac 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
34ab0 20e 7E 60 30 1F 
34ab4 20f 00 00 00 00 
34ab8 210 00 00 7F 33 
34abc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
34ac0 212 7F 00 00 00 
34ac4 213 00 00 00 70 
34ac8 214 18 18 18 0E 
34acc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
34ad0 216 70 00 00 00 
34ad4 217 00 00 00 18 
34ad8 218 18 18 18 18 
34adc 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34ae0 21a 18 00 00 00 
34ae4 21b 00 00 00 0E 
34ae8 21c 18 18 18 70 
34aec 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34af0 21e 0E 00 00 00 
34af4 21f 6E 3B 00 00 
34af8 220 00 00 00 00 
34afc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b00 222 00 00 00 00 
34b04 223 00 00 00 00 
34b08 224 00 00       | 	byte	$00[10]
34b0a 224 08 1C 36 63 
34b0e 225 63 63 7F 00 
34b12 226 00 00 00 00 
34b16 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34b1a 228 03 03 03 03 
34b1e 229 43 66 3C 18 
34b22 22a 30 1E 00 00 
34b26 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34b2a 22c 33 33 33 33 
34b2e 22d 33 33       | 	byte	$33[6]
34b30 22e 6E 00 00 00 
34b34 22f 00 00 60 30 
34b38 230 18 00 3E 63 
34b3c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34b40 232 3E 00 00 00 
34b44 233 00 00 08 1C 
34b48 234 36 00 1E 30 
34b4c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34b50 236 6E 00 00 00 
34b54 237 00 00 00 00 
34b58 238 33 00 1E 30 
34b5c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34b60 23a 6E 00 00 00 
34b64 23b 00 00 1C 36 
34b68 23c 1C 00 33 33 
34b6c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34b70 23e 6E 00 00 00 
34b74 23f 00 00 60 30 
34b78 240 18 00 3E 63 
34b7c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34b80 242 3E 00 00 00 
34b84 243 00 00 00 00 
34b88 244 00 00 3E 63 
34b8c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34b90 246 3E 18 30 1E 
34b94 247 00 00 00 1C 
34b98 248 58 78 38 18 
34b9c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34ba0 24a 3C 00 00 00 
34ba4 24b 00 00 00 00 
34ba8 24c 63 00 3E 63 
34bac 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34bb0 24e 3E 00 00 00 
34bb4 24f 66 33 00 3E 
34bb8 250 63 63 63 63 
34bbc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34bc0 252 3E 00 00 00 
34bc4 253 00 00 CC 66 
34bc8 254 33 00 3E 63 
34bcc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34bd0 256 3E 00 00 00 
34bd4 257 00 00 18 3C 
34bd8 258 66 00 1C 18 
34bdc 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34be0 25a 3C 00 00 00 
34be4 25b 30 18 00 7F 
34be8 25c 63 61 30 18 
34bec 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34bf0 25e 7F 00 00 00 
34bf4 25f 00 63 00 08 
34bf8 260 1C 36 63 63 
34bfc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34c00 262 63 00 00 00 
34c04 263 30 18 00 3C 
34c08 264 66 43 03 03 
34c0c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34c10 266 3C 00 00 00 
34c14 267 30 18 00 7F 
34c18 268 66 46 16 1E 
34c1c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34c20 26a 7F 00 00 00 
34c24 26b 0C 06 00 0F 
34c28 26c 06 06 06 06 
34c2c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34c30 26e 7F 00 00 00 
34c34 26f 30 18 00 1C 
34c38 270 18 18 18 18 
34c3c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34c40 272 3C 00 00 00 
34c44 273 00 00 08 1C 
34c48 274 36 00 3E 63 
34c4c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34c50 276 3E 00 00 00 
34c54 277 00 00 00 00 
34c58 278 63 00 3E 63 
34c5c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34c60 27a 3E 00 00 00 
34c64 27b 00 00 00 6F 
34c68 27c 46 26 06 06 
34c6c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34c70 27e 7F 00 00 00 
34c74 27f 00 00 00 6E 
34c78 280 4C 2C 0C 0C 
34c7c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34c80 282 1E 00 00 00 
34c84 283 30 18 00 3E 
34c88 284 63 63 06 1C 
34c8c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34c90 286 3E 00 00 00 
34c94 287 00 00 60 30 
34c98 288 18 00 3E 63 
34c9c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34ca0 28a 3E 00 00 00 
34ca4 28b 00 63 00 3E 
34ca8 28c 63 63 63 63 
34cac 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34cb0 28e 3E 00 00 00 
34cb4 28f 00 63 00 63 
34cb8 290 63 63 63 63 
34cbc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34cc0 292 3E 00 00 00 
34cc4 293 6C 38 00 7E 
34cc8 294 7E 5A 18 18 
34ccc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34cd0 296 3C 00 00 00 
34cd4 297 00 00 60 48 
34cd8 298 2C 0C 3F 0C 
34cdc 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34ce0 29a 38 00 00 00 
34ce4 29b 00 00 00 0F 
34ce8 29c 26 36 1E 0E 
34cec 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34cf0 29e 7F 00 00 00 
34cf4 29f 00 00 00 00 
34cf8 2a0 00 63 36 1C 
34cfc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34d00 2a2 00 00 00 00 
34d04 2a3 00 00       | 	byte	$00[6]
34d06 2a3 36 1C 08 00 
34d0a 2a4 3E 63 03 03 
34d0e 2a5 03 63 3E 00 
34d12 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34d16 2a7 30 18 0C 00 
34d1a 2a8 1E 30 3E 33 
34d1e 2a9 33 33 6E 00 
34d22 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34d26 2ab 60 30 18 00 
34d2a 2ac 1C 18 18 18 
34d2e 2ad 18 18 3C 00 
34d32 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34d36 2af 60 30 18 00 
34d3a 2b0 3E 63 63 63 
34d3e 2b1 63 63 3E 00 
34d42 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34d46 2b3 30 18 0C 00 
34d4a 2b4 33 33 33 33 
34d4e 2b5 33 33 6E 00 
34d52 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34d56 2b7 00 08 1C 36 
34d5a 2b8 63 63 7F 63 
34d5e 2b9 63 63 63 18 
34d62 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34d66 2bb 00 00 00 00 
34d6a 2bc 1E 30 3E 33 
34d6e 2bd 33 33 6E 18 
34d72 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34d76 2bf 00 7F 63 61 
34d7a 2c0 30 18 0C 06 
34d7e 2c1 43 63 7F 00 
34d82 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34d86 2c3 36 1C 08 00 
34d8a 2c4 7F 33 18 0C 
34d8e 2c5 06 63 7F 00 
34d92 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34d96 2c7 00 7F 66 46 
34d9a 2c8 16 1E 16 06 
34d9e 2c9 46 66 7F 18 
34da2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34da6 2cb 00 00 00 00 
34daa 2cc 3E 63 7F 03 
34dae 2cd 03 63 3E 18 
34db2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34db6 2cf 00 3C 66 03 
34dba 2d0 1F 03 0F 03 
34dbe 2d1 03 66 3C 00 
34dc2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34dc6 2d3 60 30 18 00 
34dca 2d4 7F 33 18 0C 
34dce 2d5 06 63 7F 00 
34dd2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34dd6 2d7 00 3C 66 43 
34dda 2d8 03 03 03 03 
34dde 2d9 43 66 3C 00 
34de2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34de6 2db 00 00 00 00 
34dea 2dc 3E 63 06 1C 
34dee 2dd 30 63 3E 18 
34df2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34df6 2df 00 00 00 00 
34dfa 2e0 00 00       | 	byte	$00[6]
34dfc 2e1 6C 36 1B 36 
34e00 2e2 6C 00 00 00 
34e04 2e3 00 00 00 00 
34e08 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e0c 2e5 1B 36 6C 36 
34e10 2e6 1B 00 00 00 
34e14 2e7 88 22 88 22 
34e18 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34e1c 2e9 88 22 88 22 
34e20 2ea 88 22 88 22 
34e24 2eb AA 55 AA 55 
34e28 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34e2c 2ed AA 55 AA 55 
34e30 2ee AA 55 AA 55 
34e34 2ef BB EE BB EE 
34e38 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34e3c 2f1 BB EE BB EE 
34e40 2f2 BB EE BB EE 
34e44 2f3 18 18 18 18 
34e48 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34e4c 2f5 18 18 18 18 
34e50 2f6 18 18 18 18 
34e54 2f7 18 18 18 18 
34e58 2f8 18 18 18    | 	byte	$18[15]
34e5b 2f8 1F 18 18 18 
34e5f 2f9 18 18 18 18 
34e63 2fa 18 30 18 00 
34e67 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34e6b 2fc 63 7F 63 63 
34e6f 2fd 63 63 00 00 
34e73 2fe 00 1C 36 00 
34e77 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34e7b 300 63 7F 63 63 
34e7f 301 63 63 00 00 
34e83 302 00 36 1C 00 
34e87 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34e8b 304 1E 16 06 46 
34e8f 305 66 7F 00 00 
34e93 306 00 00 00 00 
34e97 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34e9b 308 1C 30 60 63 
34e9f 309 63 3E 18 30 
34ea3 30a 1E 6C 6C 6C 
34ea7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34eab 30c 6F 6C 6C 6C 
34eaf 30d 6C 6C 6C 6C 
34eb3 30e 6C 6C 6C 6C 
34eb7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ebb 310 6C 6C 6C 6C 
34ebf 311 6C 6C 6C 6C 
34ec3 312 6C          | 	byte	$6c[9]
34ec4 313 00 00 00 00 
34ec8 314 00          | 	byte	$00[5]
34ec9 314 7F 60 6F 6C 
34ecd 315 6C 6C 6C 6C 
34ed1 316 6C 6C 6C 6C 
34ed5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34ed9 318 6F 60 7F 00 
34edd 319 00 00 00 00 
34ee1 31a 00 00 00 18 
34ee5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34ee9 31c 61 30 18 0C 
34eed 31d 06 43 63 7F 
34ef1 31e 00 00 00 00 
34ef5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34ef9 320 00 7F 33 18 
34efd 321 0C 06 63 7F 
34f01 322 00 00 00 00 
34f05 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34f09 324 00 00 1F 18 
34f0d 325 18 18 18 18 
34f11 326 18 18 18 18 
34f15 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34f19 328 18 18 F8 00 
34f1d 329 00 00 00 00 
34f21 32a 00 00 00 18 
34f25 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34f29 32c 18 18 FF 00 
34f2d 32d 00 00 00 00 
34f31 32e 00 00 00 00 
34f35 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f39 330 00 00 FF 18 
34f3d 331 18 18 18 18 
34f41 332 18 18 18 18 
34f45 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34f49 334 18 18 F8 18 
34f4d 335 18 18 18 18 
34f51 336 18 18 18 00 
34f55 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34f59 338 00 00 FF 00 
34f5d 339 00 00 00 00 
34f61 33a 00 00 00 18 
34f65 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34f69 33c 18 18 FF 18 
34f6d 33d 18 18 18 18 
34f71 33e 18 18 18 63 
34f75 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34f79 340 36 63 63 7F 
34f7d 341 63 63 63 63 
34f81 342 00 00 00 00 
34f85 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34f89 344 00 1E 30 3E 
34f8d 345 33 33 33 6E 
34f91 346 00 00 00 6C 
34f95 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34f99 348 EC 0C FC 00 
34f9d 349 00 00 00 00 
34fa1 34a 00 00 00 00 
34fa5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34fa9 34c FC 0C EC 6C 
34fad 34d 6C 6C 6C 6C 
34fb1 34e 6C 6C 6C 6C 
34fb5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34fb9 350 EF 00 FF 00 
34fbd 351 00 00 00 00 
34fc1 352 00 00 00 00 
34fc5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34fc9 354 FF 00 EF 6C 
34fcd 355 6C 6C 6C 6C 
34fd1 356 6C 6C 6C 6C 
34fd5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34fd9 358 EC 0C EC 6C 
34fdd 359 6C 6C 6C 6C 
34fe1 35a 6C 6C 6C 00 
34fe5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34fe9 35c FF 00 FF 00 
34fed 35d 00 00 00 00 
34ff1 35e 00 00 00 6C 
34ff5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34ff9 360 EF 00 EF 6C 
34ffd 361 6C 6C 6C 6C 
35001 362 6C 6C 6C 00 
35005 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35009 364 63 3E 63 63 
3500d 365 63 63 3E 63 
35011 366 00 00 00 00 
35015 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
35019 368 30 3C 36 33 
3501d 369 33 33 33 6E 
35021 36a 00 00 00 00 
35025 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
35029 36c 66 66 6F 66 
3502d 36d 66 66 36 1F 
35031 36e 00 00 00 36 
35035 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
35039 370 66 66 66 66 
3503d 371 66 66       | 	byte	$66[6]
3503f 371 36 1F 00 00 
35043 372 00 00 63 00 
35047 373 7F 66 46 16 
3504b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3504f 375 66 7F 00 00 
35053 376 00 6C 38 00 
35057 377 38 30 30 3C 
3505b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3505f 379 33 6E 00 00 
35063 37a 00 36 1C 00 
35067 37b 63 67 6F 7F 
3506b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3506f 37d 63 63 00 00 
35073 37e 00 30 18 00 
35077 37f 3C 18 18 18 
3507b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3507f 381 18 3C 00 00 
35083 382 00 3C 66 00 
35087 383 3C 18 18 18 
3508b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3508f 385 18 3C 00 00 
35093 386 00 00 00 36 
35097 387 1C 08 00 3E 
3509b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3509f 389 63 3E 00 00 
350a3 38a 00 18 18 18 
350a7 38b 18 18 18 18 
350ab 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
350af 38d 00 00 00 00 
350b3 38e 00 00 00 00 
350b7 38f 00 00 00 00 | 	byte	$00[12]
350bb 390 F8 18 18 18 
350bf 391 18 18 18 18 
350c3 392 18 FF FF FF 
350c7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
350cb 394 FF FF FF FF 
350cf 395 FF FF FF FF 
350d3 396 FF          | 	byte	$ff[9]
350d4 397 00 00 00 00 
350d8 398 00 00 00    | 	byte	$00[7]
350db 398 FF FF FF FF 
350df 399 FF FF FF FF 
350e3 39a FF          | 	byte	$ff[9]
350e4 39b 00 00 00 7E 
350e8 39c 7E 5A 18 18 
350ec 39d 18 18 18 18 
350f0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
350f4 39f 1C 36 1C 63 
350f8 3a0 63 63 63 63 
350fc 3a1 63 63 63 63 
35100 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35104 3a3 FF FF FF FF 
35108 3a4 FF FF FF    | 	byte	$ff[7]
3510b 3a4 00 00 00 00 
3510f 3a5 00 00 00 00 
35113 3a6 00          | 	byte	$00[9]
35114 3a7 30 18 00 3E 
35118 3a8 63 63 63 63 
3511c 3a9 63 63 63 63 
35120 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35124 3ab 00 00 00 1E 
35128 3ac 33 33 33 1B 
3512c 3ad 33 63 63 63 
35130 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35134 3af 1C 36 00 3E 
35138 3b0 63 63 63 63 
3513c 3b1 63 63 63 63 
35140 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35144 3b3 30 18 00 63 
35148 3b4 67 6F 7F 7B 
3514c 3b5 73 63 63 63 
35150 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
35154 3b7 00 00 60 30 
35158 3b8 18 00 3B 66 
3515c 3b9 66 66 66 66 
35160 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35164 3bb 00 00 36 1C 
35168 3bc 08 00 3B 66 
3516c 3bd 66 66 66 66 
35170 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35174 3bf 36 1C 00 3E 
35178 3c0 63 63 06 1C 
3517c 3c1 30 60 63 63 
35180 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
35184 3c3 00 00 36 1C 
35188 3c4 08 00 3E 63 
3518c 3c5 06 1C 30 63 
35190 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
35194 3c7 30 18 00 3F 
35198 3c8 66 66 66 3E 
3519c 3c9 36 66 66 66 
351a0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
351a4 3cb 30 18 00 63 
351a8 3cc 63 63 63 63 
351ac 3cd 63 63 63 63 
351b0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
351b4 3cf 00 00 60 30 
351b8 3d0 18 00 3B 6E 
351bc 3d1 66 06 06 06 
351c0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
351c4 3d3 66 33 00 63 
351c8 3d4 63 63 63 63 
351cc 3d5 63 63 63 63 
351d0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
351d4 3d7 00 00 60 30 
351d8 3d8 18 00 63 63 
351dc 3d9 63 63 63 63 
351e0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
351e4 3db 30 18 00 66 
351e8 3dc 66 66 66 3C 
351ec 3dd 18 18 18 18 
351f0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
351f4 3df 00 00 00 08 
351f8 3e0 0C 0C 3F 0C 
351fc 3e1 0C 0C 0C 6C 
35200 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35204 3e3 30 18 00 00 
35208 3e4 00 00 00 00 
3520c 3e5 00 00 00 00 
35210 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35214 3e7 00 00 00 00 
35218 3e8 00 00 00 00 | 	byte	$00[8]
3521c 3e9 7F 00 00 00 
35220 3ea 00 00 00 00 
35224 3eb 66 33 00 00 
35228 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3522c 3ed 00 00 00 00 
35230 3ee 00 00 00 00 
35234 3ef 00 00 00 00 
35238 3f0 00 00 00 00 
3523c 3f1 00 00 00 00 
35240 3f2 00          | 	byte	$00[21]
35241 3f2 0C 06 3C 36 
35245 3f3 1C 00 00 00 
35249 3f4 00 00 00 00 
3524d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35251 3f6 00 00 00 63 
35255 3f7 3E 00 00 00 
35259 3f8 00 00 00 00 
3525d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35261 3fa 00 00 00 00 
35265 3fb 3E 63 06 1C 
35269 3fc 36 63 63 36 
3526d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35271 3fe 00 00 00 00 
35275 3ff 00 00 00 00 | 	byte	$00[8]
35279 400 18 00 7E 00 
3527d 401 18 00 00 00 
35281 402 00 00 00 00 
35285 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35289 404 00 00 00 00 
3528d 405 00 00 00 00 | 	byte	$00[8]
35291 406 18 30 1E 00 
35295 407 00 00 1C 36 
35299 408 36 1C 00 00 
3529d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
352a1 40a 00 00 00 00 
352a5 40b 63 00 00 00 
352a9 40c 00 00 00 00 
352ad 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352b1 40e 00 00 00 18 
352b5 40f 18 00 00 00 
352b9 410 00 00 00 00 
352bd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352c1 412 00 00 00 00 
352c5 413 00          | 	byte	$00[5]
352c6 413 CC 66 33 00 
352ca 414 33 33 33 33 
352ce 415 33 33 6E 00 
352d2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
352d6 417 00 3F 66 66 
352da 418 66 3E 36 66 
352de 419 66 66 6F 00 
352e2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
352e6 41b 36 1C 08 00 
352ea 41c 3B 6E 66 06 
352ee 41d 06 06 0F 00 
352f2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
352f6 41f 00 00 00 7E 
352fa 420 7E 7E 7E 7E 
352fe 421 7E 7E 00 00 
35302 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35306 423 00 00 00 00 
3530a 424 00 00 00 00 
3530e 425 00 00 00 00 
35312 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35314 427             | 'vga_font       file "vgafont.def"
35314 427 00 00 00 00 
      ...             
35344 433 00 00 00 00 
35348 434 00 00 00    | st_font        file "st4font.def"
3534b 434 FF FF 00 00 
3534f 435 00 00 00 00 
35353 436 00 18 18 18 
35357 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3535b 438 18 18 18 18 
3535f 439 18 18 18 18 
35363 43a 18          | 	byte	$18[9]
35364 43b 00 00 00 00 
35368 43c 00 00 00    | 	byte	$00[7]
3536b 43c FF FF 18 18 
3536f 43d 18 18 18 18 
35373 43e 18 18 18 18 
35377 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3537b 440 FF FF 00 00 
3537f 441 00 00 00 00 
35383 442 00 18 18 18 
35387 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3538b 444 1F 1F 18 18 
3538f 445 18 18 18 18 
35393 446 18 18 18 18 
35397 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3539b 448 F8 F8 18 18 
3539f 449 18 18 18 18 
353a3 44a 18 00 00 00 
353a7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353ab 44c 1F 1F 18 18 
353af 44d 18 18 18 18 
353b3 44e 18 00 00 00 
353b7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353bb 450 F8 F8 18 18 
353bf 451 18 18 18 18 
353c3 452 18 18 18 18 
353c7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
353cb 454 1F 1F 00 00 
353cf 455 00 00 00 00 
353d3 456 00 18 18 18 
353d7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
353db 458 F8 F8 00 00 
353df 459 00 00 00 00 
353e3 45a 00 18 18 18 
353e7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
353eb 45c FF FF 18 18 
353ef 45d 18 18 18 18 
353f3 45e 18 00 00 18 
353f7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
353fb 460 66 7E 7E 66 
353ff 461 66 66 66 30 
35403 462 18 00 00 7E 
35407 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3540b 464 3E 06 06 06 
3540f 465 06 7E 7E 18 
35413 466 0C 30 18 3C 
35417 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3541b 468 06 06 06 66 
3541f 469 66 7E 3C 00 
35423 46a 00 30 18 66 
35427 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3542b 46c 7E 7E 76 76 
3542f 46d 66 66 66 00 
35433 46e 00 30 18 7C 
35437 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3543b 470 1C 38 70 60 
3543f 471 60 7E 3E 00 
35443 472 00 30 18 7E 
35447 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3544b 474 18 0C 0C 06 
3544f 475 06 7E 7E 00 
35453 476 00 18 18 00 
35457 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3545b 478 18 18 0C 0C 
3545f 479 06 7E 7E 00 
35463 47a 00 30 18 3C 
35467 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3546b 47c 66 66 66 66 
3546f 47d 66          | 	byte	$66[5]
35470 47e 7E 3C 00 00 
35474 47f 00 00 06 06 
35478 480 06 06 16 1E 
3547c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35480 482 7E 7E 00 00 
35484 483 00 00 00 00 
35488 484 00 3C 7C 60 
3548c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35490 486 7E 7C 30 18 
35494 487 00 00 00 00 
35498 488 00 3C 7E 66 
3549c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
354a0 48a 7E 7C 18 0C 
354a4 48b 00 00 30 18 
354a8 48c 00 3C 3E 06 
354ac 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
354b0 48e 7E 7C 00 00 
354b4 48f 00 00 30 18 
354b8 490 00 3E 7E 66 
354bc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
354c0 492 66 66 00 00 
354c4 493 00 00 30 18 
354c8 494 00 7C 7E 06 
354cc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
354d0 496 7E 3E 00 00 
354d4 497 00 00 30 18 
354d8 498 00 7E 7E 30 
354dc 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
354e0 49a 7E 7E 00 00 
354e4 49b 00 00 18 18 
354e8 49c 00 7E 7E 30 
354ec 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
354f0 49e 7E 7E 00 00 
354f4 49f 00 00 30 18 
354f8 4a0 00 3C 7E 66 
354fc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
35500 4a2 7E 3C 00 00 
35504 4a3 00 00 1C 1C 
35508 4a4 18 18 38 3C 
3550c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35510 4a6 3C 3C 00 00 
35514 4a7 00 00 00 00 
35518 4a8 00 00 00 00 
3551c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35520 4aa 00 00 00 00 
35524 4ab 00 00       | 	byte	$00[6]
35526 4ab 18 18 18 18 
3552a 4ac 18 18 18 18 | 	byte	$18[8]
3552e 4ad 00 00 18 18 
35532 4ae 00 00 00 00 
35536 4af 66 66 66 66 
3553a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3553e 4b1 00 00 00 00 
35542 4b2 00 00 00 00 
35546 4b3 00          | 	byte	$00[9]
35547 4b3 66 66 FF FF 
3554b 4b4 66 66 FF FF 
3554f 4b5 66 66 00 00 
35553 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35557 4b7 7C 7E 06 06 
3555b 4b8 3E 7C 60 60 
3555f 4b9 7E 3E 18 18 
35563 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35567 4bb 66 30 30 18 
3556b 4bc 18 0C 0C 66 
3556f 4bd 66 00 00 00 
35573 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
35577 4bf 66 66 3C 1C 
3557b 4c0 1C FC FE 66 
3557f 4c1 66 FE FC 00 
35583 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35587 4c3 18 18 18 18 
3558b 4c4 00 00 00 00 
3558f 4c5 00 00 00 00 
35593 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35597 4c7 18 1C 0C 0C 
3559b 4c8 0C 0C 0C 0C 
3559f 4c9 1C 18 30 00 
355a3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
355a7 4cb 18 38 30 30 
355ab 4cc 30 30 30 30 
355af 4cd 38 18 0C 00 
355b3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
355b7 4cf 66 66 3C 3C 
355bb 4d0 FF FF 3C 3C 
355bf 4d1 66 66 00 00 
355c3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
355c7 4d3 00 18 18 18 
355cb 4d4 7E 7E 18 18 
355cf 4d5 18 00 00 00 
355d3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
355d7 4d7 00 00 00 00 
355db 4d8 00 00       | 	byte	$00[6]
355dd 4d9 18 18 18 18 
355e1 4da 18          | 	byte	$18[5]
355e2 4da 0C 04 00 00 
355e6 4db 00 00 00 00 
355ea 4dc 7E 7E 00 00 
355ee 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
355f2 4de 00 00 00 00 
355f6 4df 00 00 00 00 
355fa 4e0 00 00 00 00 
355fe 4e1 00          | 	byte	$00[13]
355ff 4e1 18 18 18 00 
35603 4e2 00 00 00 60 
35607 4e3 60 60 30 30 
3560b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3560f 4e5 06 06 06 00 
35613 4e6 00 00 00 3C 
35617 4e7 7E 66 66 66 
3561b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3561f 4e9 66 7E 3C 00 
35623 4ea 00 00 00 18 
35627 4eb 18 1C 1C 18 
3562b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3562f 4ed 18 7E 7E 00 
35633 4ee 00 00 00 3C 
35637 4ef 7E 66 66 30 
3563b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3563f 4f1 0C 7E 7E 00 
35643 4f2 00 00 00 7E 
35647 4f3 7E 30 30 18 
3564b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3564f 4f5 66 7E 3C 00 
35653 4f6 00 00 00 30 
35657 4f7 30 38 38 3C 
3565b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3565f 4f9 7E 30 30 00 
35663 4fa 00 00 00 7E 
35667 4fb 7E 06 06 3E 
3566b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3566f 4fd 66 7E 3C 00 
35673 4fe 00 00 00 38 
35677 4ff 3C 0E 06 06 
3567b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3567f 501 66 7E 3C 00 
35683 502 00 00 00 7E 
35687 503 7E 60 60 30 
3568b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3568f 505 0C 0C 0C 00 
35693 506 00 00 00 3C 
35697 507 7E 66 66 3C 
3569b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3569f 509 66 7E 3C 00 
356a3 50a 00 00 00 3C 
356a7 50b 7E 66 66 7E 
356ab 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
356af 50d 70 3C 1C 00 
356b3 50e 00 00 00 00 
356b7 50f 00 00 18 18 
356bb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
356bf 511 18 18 18 00 
356c3 512 00 00 00 00 
356c7 513 00 00 18 18 
356cb 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
356cf 515 18 18 18 0C 
356d3 516 04 00 00 00 
356d7 517 70 38 1C 0E 
356db 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
356df 519 70 00 00 00 
356e3 51a 00 00 00 00 
356e7 51b 00 00 7E 7E 
356eb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
356ef 51d 00 00 00 00 
356f3 51e 00 00 00 00 | 	byte	$00[8]
356f7 51f 0E 1C 38 70 
356fb 520 E0 70 38 1C 
356ff 521 0E 00 00 00 
35703 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35707 523 7E 66 66 30 
3570b 524 30 18 18 18 
3570f 525 00 18 18 00 
35713 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35717 527 7E 66 66 66 
3571b 528 66 36 06 66 
3571f 529 66 7E 3C 00 
35723 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35727 52b 3C 7E 66 66 
3572b 52c 66 7E 7E 66 
3572f 52d 66 66 66 00 
35733 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35737 52f 7E 66 66 7E 
3573b 530 3E 66 66 66 
3573f 531 66 7E 3E 00 
35743 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35747 533 7E 66 66 06 
3574b 534 06 06 06 66 
3574f 535 66 7E 3C 00 
35753 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35757 537 7E 66 66 66 
3575b 538 66 66 66 66 
3575f 539 66 7E 3E 00 
35763 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35767 53b 7E 06 06 3E 
3576b 53c 3E 06 06 06 
3576f 53d 06 7E 7E 00 
35773 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
35777 53f 7E 06 06 3E 
3577b 540 3E 06 06 06 
3577f 541 06 06 06 00 
35783 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35787 543 7E 06 06 76 
3578b 544 76 66 66 66 
3578f 545 66 7E 3C 00 
35793 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35797 547 66 66 66 7E 
3579b 548 7E 66 66 66 
3579f 549 66 66 66 00 
357a3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
357a7 54b 7E 18 18 18 
357ab 54c 18 18 18 18 
357af 54d 18 7E 7E 00 
357b3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
357b7 54f 60 60 60 60 
357bb 550 60 60 60    | 	byte	$60[7]
357be 551 66 66 7E 3C 
357c2 552 00 00 00 00 
357c6 553 66 66 36 36 
357ca 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
357ce 555 66 66 C6 C6 
357d2 556 00 00 00 00 
357d6 557 06 06 06 06 
357da 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
357de 559 06 06 7E 7E 
357e2 55a 00 00 00 00 
357e6 55b C6 C6 EE EE 
357ea 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
357ee 55d C6 C6 C6 C6 
357f2 55e 00 00 00 00 
357f6 55f 66 66 66 6E 
357fa 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
357fe 561 76 66 66 66 
35802 562 00 00 00 00 
35806 563 3C 7E 66 66 
3580a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3580e 565 66 66 7E 3C 
35812 566 00 00 00 00 
35816 567 3E 7E 66 66 
3581a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3581e 569 06 06 06 06 
35822 56a 00 00 00 00 
35826 56b 3C 7E 66 66 
3582a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3582e 56d 66 56 3E 6C 
35832 56e 00 00 00 00 
35836 56f 3E 7E 66 66 
3583a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3583e 571 66 66 C6 C6 
35842 572 00 00 00 00 
35846 573 7C 7E 06 06 
3584a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3584e 575 60 60 7E 3E 
35852 576 00 00 00 00 
35856 577 7E 7E 18 18 
3585a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3585e 579 18 18 18 18 
35862 57a 00 00 00 00 
35866 57b 66 66 66 66 
3586a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3586e 57d 66 66 7E 3C 
35872 57e 00 00 00 00 
35876 57f 66 66 66 66 
3587a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3587e 581 3C 3C 18 18 
35882 582 00 00 00 00 
35886 583 C6 C6 C6 C6 
3588a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3588e 585 FE EE C6 82 
35892 586 00 00 00 00 
35896 587 66 66 66 3C 
3589a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3589e 589 3C 66 66 66 
358a2 58a 00 00 00 00 
358a6 58b 66 66 66 66 
358aa 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
358ae 58d 18 18 18 18 
358b2 58e 00 00 00 00 
358b6 58f 7E 7E 30 30 
358ba 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
358be 591 06 06 7E 7E 
358c2 592 00 00 00 00 
358c6 593 3C 3C 0C 0C 
358ca 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
358ce 595 0C 0C 3C 3C 
358d2 596 00 00 00 00 
358d6 597 06 06 0C 0C 
358da 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
358de 599 60 60 C0 C0 
358e2 59a 00 00 00 00 
358e6 59b 3C 3C 30 30 
358ea 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
358ee 59d 30 30 3C 3C 
358f2 59e 00 00 00 00 
358f6 59f 18 18 3C 3C 
358fa 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
358fe 5a1 00 00 00 00 
35902 5a2 00 00 00 00 
35906 5a3 00 00 00 00 
3590a 5a4 00 00 00 00 
3590e 5a5 00 00       | 	byte	$00[18]
35910 5a6 FE FE 00 00 
35914 5a7 00 00 0C 0C 
35918 5a8 18 18 00 00 
3591c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
35920 5aa 00 00 00 00 
35924 5ab 00 00 00 00 
35928 5ac 00          | 	byte	$00[9]
35929 5ac 3C 7C 60 7C 
3592d 5ad 7E 66 66 7E 
35931 5ae 7C 00 00 00 
35935 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35939 5b0 3E 7E 66 66 
3593d 5b1 66 66 66 7E 
35941 5b2 3E 00 00 00 
35945 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35949 5b4 3C 3E 06 06 
3594d 5b5 06 06 06 7E 
35951 5b6 7C 00 00 00 
35955 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35959 5b8 7C 7E 66 66 
3595d 5b9 66 66 66 7E 
35961 5ba 7C 00 00 00 
35965 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35969 5bc 3C 7E 66 66 
3596d 5bd 7E 06 06 7E 
35971 5be 7C 00 00 00 
35975 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35979 5c0 18 7E 7E 18 
3597d 5c1 18 18 18 18 
35981 5c2 18 00 00 00 
35985 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35989 5c4 7C 7E 66 66 
3598d 5c5 66 66 7E 7C 
35991 5c6 60 7E 3E 00 
35995 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35999 5c8 3E 7E 66 66 
3599d 5c9 66 66 66 66 
359a1 5ca 66 00 00 00 
359a5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
359a9 5cc 1C 1C 18 18 
359ad 5cd 18 18 18 3C 
359b1 5ce 3C 00 00 00 
359b5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
359b9 5d0 30 30 30 30 
359bd 5d1 30 30 30 30 
359c1 5d2 30          | 	byte	$30[9]
359c2 5d2 3E 1E 00 00 
359c6 5d3 06 06 06 36 
359ca 5d4 36 1E 1E 1E 
359ce 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
359d2 5d6 00 00 00 00 
359d6 5d7 1C 1C 18 18 
359da 5d8 18 18 18 18 
359de 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
359e2 5da 00 00 00 00 
359e6 5db 00 00 00    | 	byte	$00[7]
359e9 5dc 6C FE FE D6 
359ed 5dd D6 C6 C6 C6 
359f1 5de C6 00 00 00 
359f5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
359f9 5e0 3E 7E 66 66 
359fd 5e1 66 66 66 66 
35a01 5e2 66 00 00 00 
35a05 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35a09 5e4 3C 7E 66 66 
35a0d 5e5 66 66 66 7E 
35a11 5e6 3C 00 00 00 
35a15 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35a19 5e8 3E 7E 66 66 
35a1d 5e9 66 66 66 7E 
35a21 5ea 3E 06 06 00 
35a25 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35a29 5ec 7C 7E 66 66 
35a2d 5ed 66 66 66 7E 
35a31 5ee 7C 60 60 00 
35a35 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35a39 5f0 3E 7E 66 06 
35a3d 5f1 06 06 06 06 
35a41 5f2 06 00 00 00 
35a45 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35a49 5f4 7C 7E 06 0E 
35a4d 5f5 3C 70 60 7E 
35a51 5f6 3E 00 00 00 
35a55 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35a59 5f8 7E 7E 18 18 
35a5d 5f9 18 18 18 78 
35a61 5fa 70 00 00 00 
35a65 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35a69 5fc 66 66 66 66 
35a6d 5fd 66 66 66    | 	byte	$66[7]
35a70 5fe 7E 7C 00 00 
35a74 5ff 00 00 00 00 
35a78 600 00 66 66 66 
35a7c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35a80 602 18 18 00 00 
35a84 603 00 00 00 00 
35a88 604 00 C6 C6 D6 
35a8c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35a90 606 C6 82 00 00 
35a94 607 00 00 00 00 
35a98 608 00 66 66 3C 
35a9c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35aa0 60a 66 66 00 00 
35aa4 60b 00 00 00 00 
35aa8 60c 00 66 66 66 
35aac 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
35ab0 60e 7C 60 7E 3E 
35ab4 60f 00 00 00 00 
35ab8 610 00 7E 7E 30 
35abc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35ac0 612 7E 7E 00 00 
35ac4 613 00 00 30 18 
35ac8 614 18 18 18 0C 
35acc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
35ad0 616 18 30 00 00 
35ad4 617 00 00 18 18 
35ad8 618 18 18 18 18 
35adc 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35ae0 61a 18 18 00 00 
35ae4 61b 00 00 0C 18 
35ae8 61c 18 18 18 30 
35aec 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35af0 61e 18 0C 00 00 
35af4 61f 00 00 6C 7E 
35af8 620 36 00 00 00 
35afc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35b00 622 00 00 00 00 
35b04 623 00 00 00 00 
35b08 624 00          | 	byte	$00[9]
35b09 624 18 18 18 18 
35b0d 625 18 18 00 00 
35b11 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35b14 627             | 'amiga_font     file "amigafont.def"
35b14 627 00 6C FE FE 
35b18 628 7C 38 10 00 
35b1c 629 18 18 18 F8 
35b20 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35b24 62b C0 C0 C0 C0 
35b28 62c C0 C0 C0 C0 | 	byte	$c0[8]
35b2c 62d 18 18 18 1F 
35b30 62e 1F 00 00 00 
35b34 62f 18 18 18 1F 
35b38 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35b3c 631 00 00 00 1F 
35b40 632 1F 18 18 18 
35b44 633 C0 E0 70 38 
35b48 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35b4c 635 03 07 0E 1C 
35b50 636 38 70 E0 C0 
35b54 637 80 C0 E0 F0 
35b58 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35b5c 639 00 00 00 00 
35b60 63a F0 F0 F0 F0 
35b64 63b 01 03 07 0F 
35b68 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35b6c 63d F0 F0 F0 F0 
35b70 63e 00 00 00 00 
35b74 63f 0F 0F 0F 0F 
35b78 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35b7c 641 FF FF 00 00 
35b80 642 00 00 00 00 
35b84 643 00 00 00 00 
35b88 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35b8c 645 00 00 00 00 
35b90 646 0F 0F 0F 0F 
35b94 647 00 38 38 EE 
35b98 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35b9c 649 00 00 00 F8 
35ba0 64a F8 18 18 18 
35ba4 64b 00 00 00 FF 
35ba8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35bac 64d 18 18 18 FF 
35bb0 64e FF 18 18 18 
35bb4 64f 00 00 3C 7E 
35bb8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35bbc 651 00 00 00 00 
35bc0 652 FF FF FF FF 
35bc4 653 03 03 03 03 
35bc8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35bcc 655 00 00 00 FF 
35bd0 656 FF 18 18 18 
35bd4 657 18 18 18 FF 
35bd8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35bdc 659 0F 0F 0F 0F 
35be0 65a 0F 0F 0F 0F | 	byte	$0f[8]
35be4 65b 18 18 18 F8 
35be8 65c F8 00 00 00 
35bec 65d 1E 06 1E 06 
35bf0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35bf4 65f 00 18 3C 7E 
35bf8 660 18 18 18 00 
35bfc 661 00 18 18 18 
35c00 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35c04 663 00 18 0C 7E 
35c08 664 0C 18 00 00 
35c0c 665 00 18 30 7E 
35c10 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35c14 667 00 00 00 00 
35c18 668 00 00 00 00 
35c1c 669 00          | 	byte	$00[9]
35c1d 669 18 18 18 18 
35c21 66a 00 18 00 00 
35c25 66b 66 66 66 00 
35c29 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35c2d 66d 66 FF 66 66 
35c31 66e FF 66 00 18 
35c35 66f 7C 06 3C 60 
35c39 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35c3d 671 66 36 18 0C 
35c41 672 66 62 00 38 
35c45 673 6C 38 1C F6 
35c49 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35c4d 675 18 18 18 00 
35c51 676 00 00 00 00 
35c55 677 70 38 18 18 
35c59 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35c5d 679 0E 1C 18 18 
35c61 67a 1C 0E 00 00 
35c65 67b 66 3C FF 3C 
35c69 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35c6d 67d 18 18 7E 18 
35c71 67e 18 00 00 00 
35c75 67f 00 00 00 00 
35c79 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35c7d 681 00 00 7E 00 
35c81 682 00 00 00 00 
35c85 683 00 00 00 00 
35c89 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35c8d 685 60 30 18 0C 
35c91 686 06 02 00 00 
35c95 687 3C 66 76 6E 
35c99 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35c9d 689 18 1C 18 18 
35ca1 68a 18 7E 00 00 
35ca5 68b 3C 66 30 18 
35ca9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35cad 68d 7E 30 18 30 
35cb1 68e 66 3C 00 00 
35cb5 68f 30 38 3C 36 
35cb9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35cbd 691 7E 06 3E 60 
35cc1 692 66 3C 00 00 
35cc5 693 3C 06 3E 66 
35cc9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35ccd 695 7E 60 30 18 
35cd1 696 0C 0C 00 00 
35cd5 697 3C 66 3C 66 
35cd9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35cdd 699 3C 66 7C 60 
35ce1 69a 30 1C 00 00 
35ce5 69b 00 18 18 00 
35ce9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35ced 69d 00 18 18 00 
35cf1 69e 18 18 0C 60 
35cf5 69f 30 18 0C 18 
35cf9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35cfd 6a1 00 7E 00 00 
35d01 6a2 7E 00 00 06 
35d05 6a3 0C 18 30 18 
35d09 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35d0d 6a5 3C 66 30 18 
35d11 6a6 00 18 00 00 
35d15 6a7 3C 66 76 76 
35d19 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35d1d 6a9 18 3C 66 66 
35d21 6aa 7E 66 00 00 
35d25 6ab 3E 66 3E 66 
35d29 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35d2d 6ad 3C 66 06 06 
35d31 6ae 66 3C 00 00 
35d35 6af 1E 36 66 66 
35d39 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35d3d 6b1 7E 06 3E 06 
35d41 6b2 06 7E 00 00 
35d45 6b3 7E 06 3E 06 
35d49 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35d4d 6b5 7C 06 06 76 
35d51 6b6 66 7C 00 00 
35d55 6b7 66 66 7E 66 
35d59 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35d5d 6b9 7E 18 18 18 
35d61 6ba 18 7E 00 00 
35d65 6bb 60 60 60 60 
35d69 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35d6d 6bd 66 36 1E 1E 
35d71 6be 36 66 00 00 
35d75 6bf 06 06 06 06 
35d79 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35d7d 6c1 C6 EE FE D6 
35d81 6c2 C6 C6 00 00 
35d85 6c3 66 6E 7E 7E 
35d89 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35d8d 6c5 3C 66 66 66 
35d91 6c6 66 3C 00 00 
35d95 6c7 3E 66 66 3E 
35d99 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35d9d 6c9 3C 66 66 66 
35da1 6ca 36 6C 00 00 
35da5 6cb 3E 66 66 3E 
35da9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35dad 6cd 3C 06 3C 60 
35db1 6ce 60 3C 00 00 
35db5 6cf 7E 18 18 18 
35db9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35dbd 6d1 66 66 66 66 
35dc1 6d2 66          | 	byte	$66[5]
35dc2 6d2 7E 00 00 66 
35dc6 6d3 66 66 66 3C 
35dca 6d4 18 00 00 C6 
35dce 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35dd2 6d6 C6 00 00 66 
35dd6 6d7 66 3C 3C 66 
35dda 6d8 66 00 00 66 
35dde 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35de2 6da 18 00 00 7E 
35de6 6db 30 18 0C 06 
35dea 6dc 7E 00 00 78 
35dee 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35df2 6de 78 00 00 02 
35df6 6df 06 0C 18 30 
35dfa 6e0 60 00 00 1E 
35dfe 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35e02 6e2 1E 00 00 10 
35e06 6e3 38 6C C6 00 
35e0a 6e4 00 00 00 00 
35e0e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e12 6e6 FF 00 00 18 
35e16 6e7 3C 7E 7E 3C 
35e1a 6e8 18 00 00 00 
35e1e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35e22 6ea 7C 00 00 06 
35e26 6eb 06 3E 66 66 
35e2a 6ec 3E 00 00 00 
35e2e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35e32 6ee 3C 00 00 60 
35e36 6ef 60 7C 66 66 
35e3a 6f0 7C 00 00 00 
35e3e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35e42 6f2 3C 00 00 70 
35e46 6f3 18 7C 18 18 
35e4a 6f4 18 00 00 00 
35e4e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35e52 6f6 60 3E 00 06 
35e56 6f7 06 3E 66 66 
35e5a 6f8 66 00 00 18 
35e5e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35e62 6fa 3C 00 00 60 
35e66 6fb 00 60 60 60 
35e6a 6fc 60 3C 00 06 
35e6e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35e72 6fe 66 00 00 1C 
35e76 6ff 18 18 18 18 
35e7a 700 3C 00 00 00 
35e7e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35e82 702 C6 00 00 00 
35e86 703 3E 66 66 66 
35e8a 704 66 00 00 00 
35e8e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35e92 706 3C 00 00 00 
35e96 707 3E 66 66 3E 
35e9a 708 06 06 00 00 
35e9e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35ea2 70a 60 60 00 00 
35ea6 70b 3E 66 06 06 
35eaa 70c 06 00 00 00 
35eae 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35eb2 70e 3E 00 00 18 
35eb6 70f 7E 18 18 18 
35eba 710 70 00 00 00 
35ebe 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35ec2 712 7C 00 00 00 
35ec6 713 66 66 66 3C 
35eca 714 18 00 00 00 
35ece 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35ed2 716 6C 00 00 00 
35ed6 717 66 3C 18 3C 
35eda 718 66 00 00 00 
35ede 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35ee2 71a 30 1E 00 00 
35ee6 71b 7E 30 18 0C 
35eea 71c 7E 00 00 18 
35eee 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35ef2 71e 3C 00 18 18 
35ef6 71f 18 18 18 18 
35efa 720 18 18 00 7E 
35efe 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35f02 722 60 00 10 18 
35f06 723 1C 1E 1C 18 
35f0a 724 10 00 08 18 
35f0e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35f12 726 08 00       | 	byte	$08, $00
35f14 727 00 00 00 00 
35f18 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35f19 728 80 00 00 00 
35f1d 729 00 80 00 00 
35f21 72a 80 80 00 00 
35f25 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35f29 72c 80 00 80 00 
35f2d 72d 00 40 80 00 
35f31 72e AA AA AA 00 
35f35 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35f39 730 FF 00 00 00 
35f3d 731 00 FF 00 00 
35f41 732 FF FF 00 00 
35f45 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35f49 734 FF 00 FF 00 
35f4d 735 00 FF FF 00 
35f51 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35f54 737 00 00 00 00 
35f58 738 00          | ataripalette   file "ataripalettep2.def"
35f59 738 11 11 11 00 
35f5d 739 22 22 22 00 
35f61 73a 33 33 33 00 
35f65 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35f69 73c 55 55 55 00 
35f6d 73d 66 66 66 00 
35f71 73e 77 77 77 00 
35f75 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35f79 740 99 99 99 00 
35f7d 741 AA AA AA 00 
35f81 742 BB BB BB 00 
35f85 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35f89 744 DD DD DD 00 
35f8d 745 EE EE EE 00 
35f91 746 FF FF FF 00 
35f95 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35f99 748 00 14 40 00 
35f9d 749 00 1E 60 00 
35fa1 74a 00 28 80 00 
35fa5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35fa9 74c 00 3C BF 00 
35fad 74d 00 46 DF 00 
35fb1 74e 00 50 FF 00 
35fb5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35fb9 750 39 77 FF 00 
35fbd 751 55 8A FF 00 
35fc1 752 71 9E FF 00 
35fc5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35fc9 754 AA C5 FF 00 
35fcd 755 C6 D8 FF 00 
35fd1 756 E3 EC FF 00 
35fd5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35fd9 758 00 00 40 00 
35fdd 759 00 00 60 00 
35fe1 75a 00 00 80 00 
35fe5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35fe9 75c 00 00 BF 00 
35fed 75d 00 00 DF 00 
35ff1 75e 00 00 FF 00 
35ff5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35ff9 760 39 39 FF 00 
35ffd 761 55 55 FF 00 
36001 762 71 71 FF 00 
36005 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
36009 764 AA AA FF 00 
3600d 765 C6 C6 FF 00 
36011 766 E3 E3 FF 00 
36015 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
36019 768 20 00 40 00 
3601d 769 30 00 60 00 
36021 76a 40 00 80 00 
36025 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
36029 76c 60 00 BF 00 
3602d 76d 70 00 DF 00 
36031 76e 80 00 FF 00 
36035 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
36039 770 9C 39 FF 00 
3603d 771 AA 55 FF 00 
36041 772 B8 71 FF 00 
36045 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36049 774 D5 AA FF 00 
3604d 775 E3 C6 FF 00 
36051 776 F1 E3 FF 00 
36055 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
36059 778 40 00 40 00 
3605d 779 60 00 60 00 
36061 77a 80 00 80 00 
36065 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
36069 77c BF 00 BF 00 
3606d 77d DF 00 DF 00 
36071 77e FF 00 FF 00 
36075 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
36079 780 FF 39 FF 00 
3607d 781 FF 55 FF 00 
36081 782 FF 71 FF 00 
36085 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36089 784 FF AA FF 00 
3608d 785 FF C6 FF 00 
36091 786 FF E3 FF 00 
36095 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36099 788 40 00 20 00 
3609d 789 60 00 30 00 
360a1 78a 80 00 40 00 
360a5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
360a9 78c BF 00 60 00 
360ad 78d DF 00 70 00 
360b1 78e FF 00 80 00 
360b5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
360b9 790 FF 39 9C 00 
360bd 791 FF 55 AA 00 
360c1 792 FF 71 B8 00 
360c5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
360c9 794 FF AA D5 00 
360cd 795 FF C6 E3 00 
360d1 796 FF E3 F1 00 
360d5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
360d9 798 40 00 00 00 
360dd 799 60 00 00 00 
360e1 79a 80 00 00 00 
360e5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
360e9 79c BF 00 00 00 
360ed 79d DF 00 00 00 
360f1 79e FF 00 00 00 
360f5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
360f9 7a0 FF 39 39 00 
360fd 7a1 FF 55 55 00 
36101 7a2 FF 71 71 00 
36105 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
36109 7a4 FF AA AA 00 
3610d 7a5 FF C6 C6 00 
36111 7a6 FF E3 E3 00 
36115 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36119 7a8 40 10 00 00 
3611d 7a9 60 18 00 00 
36121 7aa 80 20 00 00 
36125 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
36129 7ac BF 30 00 00 
3612d 7ad DF 38 00 00 
36131 7ae FF 40 00 00 
36135 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
36139 7b0 FF 6A 39 00 
3613d 7b1 FF 80 55 00 
36141 7b2 FF 95 71 00 
36145 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36149 7b4 FF BF AA 00 
3614d 7b5 FF D5 C6 00 
36151 7b6 FF EA E3 00 
36155 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
36159 7b8 40 20 00 00 
3615d 7b9 60 30 00 00 
36161 7ba 80 40 00 00 
36165 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
36169 7bc BF 60 00 00 
3616d 7bd DF 70 00 00 
36171 7be FF 80 00 00 
36175 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
36179 7c0 FF 9C 39 00 
3617d 7c1 FF AA 55 00 
36181 7c2 FF B8 71 00 
36185 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
36189 7c4 FF D5 AA 00 
3618d 7c5 FF E3 C6 00 
36191 7c6 FF F1 E3 00 
36195 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
36199 7c8 40 30 00 00 
3619d 7c9 60 48 00 00 
361a1 7ca 80 60 00 00 
361a5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
361a9 7cc BF 90 00 00 
361ad 7cd DF A8 00 00 
361b1 7ce FF C0 00 00 
361b5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
361b9 7d0 FF CE 39 00 
361bd 7d1 FF D5 55 00 
361c1 7d2 FF DC 71 00 
361c5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
361c9 7d4 FF EA AA 00 
361cd 7d5 FF F1 C6 00 
361d1 7d6 FF F8 E3 00 
361d5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
361d9 7d8 30 40 00 00 
361dd 7d9 48 60 00 00 
361e1 7da 60 80 00 00 
361e5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
361e9 7dc 90 BF 00 00 
361ed 7dd A8 DF 00 00 
361f1 7de C0 FF 00 00 
361f5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
361f9 7e0 CE FF 39 00 
361fd 7e1 D5 FF 55 00 
36201 7e2 DC FF 71 00 
36205 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36209 7e4 EA FF AA 00 
3620d 7e5 F1 FF C6 00 
36211 7e6 F8 FF E3 00 
36215 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36219 7e8 00 40 00 00 
3621d 7e9 00 60 00 00 
36221 7ea 00 80 00 00 
36225 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36229 7ec 00 BF 00 00 
3622d 7ed 00 DF 00 00 
36231 7ee 00 FF 00 00 
36235 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36239 7f0 39 FF 39 00 
3623d 7f1 55 FF 55 00 
36241 7f2 71 FF 71 00 
36245 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36249 7f4 AA FF AA 00 
3624d 7f5 C6 FF C6 00 
36251 7f6 E3 FF E3 00 
36255 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36259 7f8 00 40 14 00 
3625d 7f9 00 60 1E 00 
36261 7fa 00 80 28 00 
36265 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36269 7fc 00 BF 3C 00 
3626d 7fd 00 DF 46 00 
36271 7fe 00 FF 50 00 
36275 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36279 800 39 FF 77 00 
3627d 801 55 FF 8A 00 
36281 802 71 FF 9E 00 
36285 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36289 804 AA FF C5 00 
3628d 805 C6 FF D8 00 
36291 806 E3 FF EC 00 
36295 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36299 808 00 40 28 00 
3629d 809 00 60 3C 00 
362a1 80a 00 80 50 00 
362a5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
362a9 80c 00 BF 78 00 
362ad 80d 00 DF 8C 00 
362b1 80e 00 FF A0 00 
362b5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
362b9 810 39 FF B5 00 
362bd 811 55 FF C0 00 
362c1 812 71 FF CA 00 
362c5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
362c9 814 AA FF DF 00 
362cd 815 C6 FF EA 00 
362d1 816 E3 FF F4 00 
362d5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
362d9 818 00 40 40 00 
362dd 819 00 60 60 00 
362e1 81a 00 80 80 00 
362e5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
362e9 81c 00 BF BF 00 
362ed 81d 00 DF DF 00 
362f1 81e 00 FF FF 00 
362f5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
362f9 820 39 FF FF 00 
362fd 821 55 FF FF 00 
36301 822 71 FF FF 00 
36305 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36309 824 AA FF FF 00 
3630d 825 C6 FF FF 00 
36311 826 E3 FF FF 00 
36315 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36319 828 00 28 40 00 
3631d 829 00 3C 60 00 
36321 82a 00 50 80 00 
36325 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36329 82c 00 78 BF 00 
3632d 82d 00 8C DF 00 
36331 82e 00 A0 FF 00 
36335 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36339 830 39 B5 FF 00 
3633d 831 55 C0 FF 00 
36341 832 71 CA FF 00 
36345 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36349 834 AA DF FF 00 
3634d 835 C6 EA FF 00 
36351 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36354 837             | 
36354 837             | '**********************************************************************************
36354 837             | '
36354 837             | '        Timings and colors definitions
36354 837             | '
36354 837             | '**********************************************************************************
36354 837             | 
36354 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36354 837 08 00 00 00 
36358 838 3C 00 00 00 
3635c 839 08 00 00 00 
36360 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36364 83b 07 00 00 00 
36368 83c 04 00 00 00 
3636c 83d 01 00 00 00 
36370 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36374 83f 58 02 00 00 
36378 840 20 9E 4B 14 
3637c 841 FB A8 9E 01 
36380 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36384 843 00 00 00 00 
36388 844 C0 00 00 00 
3638c 845 00 00 00 00 
36390 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36394 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36394 847 00 75 C7 97 
36398 848 27 47 F6 0A 
3639c 849 05 79 CB 9B 
363a0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
363a4 84b             | 
363a4 84b             | ''--------  Initialization  ----------------------------------------------------------------
363a4 84b             | 
363a4 84b 28 0C 64 FD | hdmi            setq    #6
363a8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
363ac 84d 28 10 64 FD |                 setq    #8
363b0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
363b4 84f             | 
363b4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
363b8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
363bc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
363c0 852 D6 C6 01 F1 |                 add     t1,hbase
363c4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
363c8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
363cc 855 7B 0B 80 5F 
363d0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
363d4 857 66 66 86 FF 
363d8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
363dc 859             | '
363dc 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
363e0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
363e4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
363e8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
363ec 85d             | 
363ec 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
363f0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
363f4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
363f8 860             | 
363f8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
363f8 860             | 
363f8 860 28 06 64 FD | p101            setq 	#3
363fc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
36400 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36404 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36408 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3640c 865 00 A0 05 F6 |                 mov     dlinum, #0
36410 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36414 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36418 868             | 
36418 868             | 
36418 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3641c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
36420 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36424 86b             |                 
36424 86b             | 
36424 86b             | 
36424 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36424 86b             |   
36424 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36428 86c 29 FE 65 3D |          if_nc  setq2   #255
3642c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
36430 86e             | 
36430 86e             | '' -----   up porch (before the picture)
36430 86e             | 
36430 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36434 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36438 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3643c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
36440 872             |  
36440 872             |    
36440 872             |  
36440 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36444 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36448 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3644c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36450 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36454 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36458 878             | 
36458 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3645c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
36460 87a 48 00 B0 FD | 		call    #dli
36464 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36468 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3646c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
36470 87e             |                 	
36470 87e             |                 
36470 87e             | 
36470 87e             |  
36470 87e             | '' ------- the main screen drawing starts here
36470 87e             | 
36470 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
36474 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36478 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3647c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36480 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36484 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36488 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3648c 885             |               
3648c 885             | 
3648c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36490 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36494 887             | 
36494 887             | ' ---------------- All visible lines displayed now, start vblank  
36494 887             | 
36494 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36498 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3649c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
364a0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
364a4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
364a8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
364ac 88d             | 
364ac 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
364ac 88d             | 
364ac 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
364ac 88d             | 
364ac 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
364b0 88e             | 
364b0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
364b4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
364b8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
364bc 891             | 
364bc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
364c0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
364c4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
364c8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
364cc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
364d0 896             | 
364d0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
364d4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
364d8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
364dc 899 70 00 90 AD |     if_z        jmp     #preload
364e0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
364e4 89b 94 00 90 AD |     if_z        jmp     #preload2
364e8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
364ec 89d 0C 00 90 AD |     if_z        jmp     #p390
364f0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
364f4 89f 28 00 90 AD |     if_z        jmp     #p391  
364f8 8a0             | 
364f8 8a0 2D 00 64 FD | p308            ret
364fc 8a1             |    
364fc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
36500 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36504 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36508 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3650c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36510 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36514 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36518 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3651c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
36520 8aa             |  
36520 8aa             | '' --------  Reload palette. To do 
36520 8aa             | 
36520 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36524 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36528 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3652c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
36530 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36534 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36538 8b0 70 FF 9F FD |         	jmp     #dli                
3653c 8b1             |       
3653c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3653c 8b1             | 
3653c 8b1             | 
3653c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3653c 8b1             | 
3653c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
36540 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36544 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36548 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3654c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
36550 8b6             |         
36550 8b6             | '' -------------- Preload a line from PSRAM        
36550 8b6             |         
36550 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36554 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36558 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3655c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
36560 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36564 8bb             | 
36564 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36568 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3656c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
36570 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
36574 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36578 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3657c 8c1             |  
3657c 8c1             |  
3657c 8c1             | preload2      '  incmod  dlinum,#3
3657c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36580 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36584 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36588 8c4 28 02 64 FD |                 setq	#1
3658c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36590 8c6             |                 
36590 8c6             | 
36590 8c6             | '' -------------- Draw sprites
36590 8c6             | 
36590 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36594 8c7 10 5C 0E F5 | 		and t8,#16 wz
36598 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3659c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
365a0 8ca             | 		
365a0 8ca             | 
365a0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
365a4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
365a8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
365ac 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
365b0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
365b4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
365b8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
365bc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
365c0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
365c4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
365c8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
365cc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
365d0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
365d4 8d7             | 
365d4 8d7             | 
365d4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
365d8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
365dc 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
365e0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
365e4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
365e8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
365ec 8dd 00 5E 06 F6 |                 mov 	t9,#0
365f0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
365f4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
365f8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
365fc 8e1             |      
365fc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
36600 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36604 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36608 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3660c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36610 8e6             |                 
36610 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36614 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36618 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3661c 8e9             |   		
3661c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
36620 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36624 8eb             | 
36624 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36628 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3662c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
36630 8ee             |  
36630 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36634 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36638 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3663c 8f1             | 	
3663c 8f1             | 	
3663c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
36640 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36644 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36648 8f4             | 
36648 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3664c 8f5             | 
3664c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
36650 8f6 01 58 86 F1 | 	 	sub     t6,#1
36654 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36658 8f8             | 
36658 8f8 28 58 62 FD |                 setq   	t6
3665c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
36660 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36664 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36668 8fc 24 00 90 AD |         if_z    jmp #p898
3666c 8fd             |          
3666c 8fd             |         
3666c 8fd 70 5F 06 F6 |                 mov  t9,#368
36670 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
36674 8ff             | 
36674 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36678 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3667c 901 FF FF 7F FF 
36680 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36684 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36688 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3668c 905 2D 01 00 F5 |                 and 0-0, t7
36690 906             |                
36690 906             | 
36690 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36694 907 E5 E0 7A FA |                 wmlong 368,t3				
36698 908             |                 
36698 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3669c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
366a0 90a 2D 00 64 FD |                 ret
366a4 90b             | 	
366a4 90b             | 	
366a4 90b             |                
366a4 90b             |  
366a4 90b             | '' -------------- Graphics line ------------------------------------------------------------
366a4 90b             |  
366a4 90b             | 
366a4 90b             | '' consts and vars
366a4 90b             | 
366a4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
366a8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
366ac 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
366b0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
366b4 90f             | 
366b4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
366b8 910             | 
366b8 910             | '------ these longs will be set by setmode function
366b8 910             | 
366b8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
366bc 911 00 00 00 00 | m_sn            long    0        'sync
366c0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
366c4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
366c8 914             | 'm_border        long    0        'left/right borders
366c8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
366cc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
366d0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
366d4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
366d8 918 00 00 00 00 | i_totalvis      long    0
366dc 919             | 
366dc 919             | '-------------------------------------
366dc 919             |  
366dc 919 00 00 00 00 | linenum         long    0
366e0 91a 00 00 00 00 | frames          long    0
366e4 91b 00 00 00 00 | dlinum long 0
366e8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
366ec 91d             | 
366ec 91d 00 00 00 00 | vblankptr       long    0
366f0 91e 00 00 00 00 | modeptr         long    0
366f4 91f 00 00 00 00 | paletteptr      long    0
366f8 920 00 00 00 00 | dlptr           long    0
366fc 921 01 00 00 00 | hbase           long    1
36700 922 00 00 00 00 | mailbox         long    0
36704 923 00 00 00 00 | spriteptr          long 0
36708 924             | 
36708 924 00 00 00 00 | cmd             long    0
3670c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36710 926 00 04 00 00 | buf2            long    1024
36714 927 01 00 00 00 | dlptr2          long    1
36718 928 01 00 00 00 | dl              long    1
3671c 929             | 
3671c 929 00 00 00 00 | buf1c long 0
36720 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36724 92b 01 00 00 00 | framebuf2       long    1
36728 92c 01 00 00 00 | hsync0          long    1
3672c 92d 01 00 00 00 | hsync1          long    1
36730 92e             | 
36730 92e 01 00 00 00 | t1              long    1
36734 92f 00 00 00 00 | t2 long 0
36738 930 00 00 00 00 | t3 long 0
3673c 931 00 00 00 00 | t4 long 0
36740 932             | 
36740 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36744 933 00 00 00 00 | rcnt2           long    0
36748 934 00 00 00 00 | rcnt2a          long    0
3674c 935 00 00 00 00 | roffset         long    0
36750 936 00 00 00 00 | rdl             long    0  'dl repeat line
36754 937 00 00 00 00 | dlc             long    0  'dl command
36758 938             | 
36758 938 FF FF FF FF | affffffff       long    $ffffffff
3675c 939 00 00 00 00 | sprite1pointer long 0
36760 93a 00 00 00 00 | sprite1xy      long 0
36764 93b 00 00 00 00 | sprite1wh      long 0
36768 93c 00 00 00 00 | sprite2pointer long 0
3676c 93d 00 00 00 00 | sprite2xy      long 0
36770 93e 00 00 00 00 | sprite2wh      long 0
36774 93f 00 00 00 00 | sprite3pointer long 0
36778 940 00 00 00 00 | sprite3xy      long 0
3677c 941 00 00 00 00 | sprite3wh      long 0
36780 942 00 00 00 00 | sprite4pointer long 0
36784 943 00 00 00 00 | sprite4xy      long 0
36788 944 00 00 00 00 | sprite4wh      long 0
3678c 945 00 00 00 00 | sprite5pointer long 0
36790 946 00 00 00 00 | sprite5xy      long 0
36794 947 00 00 00 00 | sprite5wh      long 0
36798 948 00 00 00 00 | sprite6pointer long 0
3679c 949 00 00 00 00 | sprite6xy      long 0
367a0 94a 00 00 00 00 | sprite6wh      long 0
367a4 94b 00 00 00 00 | sprite7pointer long 0
367a8 94c 00 00 00 00 | sprite7xy      long 0
367ac 94d 00 00 00 00 | sprite7wh      long 0
367b0 94e 00 00 00 00 | sprite8pointer long 0
367b4 94f 00 00 00 00 | sprite8xy      long 0
367b8 950 00 00 00 00 | sprite8wh      long 0
367bc 951 00 00 00 00 | sprite9pointer long 0
367c0 952 00 00 00 00 | sprite9xy      long 0
367c4 953 00 00 00 00 | sprite9wh      long 0
367c8 954 00 00 00 00 | sprite10pointer long 0
367cc 955 00 00 00 00 | sprite10xy      long 0
367d0 956 00 00 00 00 | sprite10wh      long 0
367d4 957 00 00 00 00 | sprite11pointer long 0
367d8 958 00 00 00 00 | sprite11xy      long 0
367dc 959 00 00 00 00 | sprite11wh      long 0
367e0 95a 00 00 00 00 | sprite12pointer long 0
367e4 95b 00 00 00 00 | sprite12xy      long 0
367e8 95c 00 00 00 00 | sprite12wh      long 0
367ec 95d 00 00 00 00 | sprite13pointer long 0
367f0 95e 00 00 00 00 | sprite13xy      long 0
367f4 95f 00 00 00 00 | sprite13wh      long 0
367f8 960 00 00 00 00 | sprite14pointer long 0
367fc 961 00 00 00 00 | sprite14xy      long 0
36800 962 00 00 00 00 | sprite14wh      long 0
36804 963 00 00 00 00 | sprite15pointer long 0
36808 964 00 00 00 00 | sprite15xy      long 0
3680c 965 00 00 00 00 | sprite15wh      long 0
36810 966 00 00 00 00 | sprite16pointer long 0
36814 967 00 00 00 00 | sprite16xy      long 0
36818 968 00 00 00 00 | sprite16wh      long 0
3681c 969 00 00 00 00 | sprite17pointer long 0
36820 96a 00 00 00 00 | sprite17xy      long 0
36824 96b 00 00 00 00 | sprite17wh      long 0
36828 96c 00 00 00 00 | sprite18pointer long 0
3682c 96d 00 00 00 00 | sprite18xy      long 0
36830 96e 00 00 00 00 | sprite18wh      long 0
36834 96f 00 00 00 00 | spritenum long 0
36838 970             | 
36838 970 00 00 00 00 | spriteline long 0
3683c 971 84 03 00 00 | sprite_x long 900
36840 972 00 00 00 00 | sprite_y long 0
36844 973 10 00 00 00 | sprite_w long 16
36848 974 40 00 00 00 | sprite_h long 64
3684c 975 00 00 00 00 | l2 long 0
36850 976 00 00 00 00 | t5 long 0
36854 977 00 00 00 00 | t6 long 0
36858 978 00 00 00 00 | t7 long 0
3685c 979 00 00 00 00 | t8 long 0
36860 97a 00 00 00 00 | t9 long 0
36864 97b 00 00 00 00 | preloadaddr long 0
36868 97c 00 00 00 00 | preloadlineaddr long 0
3686c 97d 00 04 00 00 | a1024 long 1024
36870 97e             | 
36870 97e E0 03 00 00 | aa long 992
36874 97f FF 03 00 00 | a1023 long 1023
36878 980 00 10 00 00 | a4096 long 4096
3687c 981             |  fit 368
3687c 981             | _psram_spin2_dat_
3687c 981 00 00 00 00 
      ...             
36974 9bf 00 00 00 00 
36978 9c0 00 00 00 00 |     listdata long 0[8*8]
3697c 9c1             |             orgh
3697c                 | 
3697c                 | ' driver state
3697c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36980     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36984                 | 
36984                 | ' delay profile
36984     07 00 00 00 
36988     00 CF 7B 05 
3698c     80 D1 F0 08 
36990     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36994     80 C4 60 0F 
36998     80 39 7A 12 
3699c     40 2D D9 13 
369a0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
369a4                 | 
369a4                 | ' data to be passed to driver when starting it
369a4                 | startupData
369a4     00 00 00 00 |     long    0           ' current frequency
369a8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
369ac     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
369b0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
369b4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
369b8     C4 69 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
369bc     44 6A 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
369c0     64 6A 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
369c4                 | 
369c4                 | ' data for memory
369c4                 | deviceData
369c4                 |     ' 16 bank parameters follow (16MB per bank)
369c4     00 00 00 00 
      ...             
369fc     00 00 00 00 
36a00     00 00 00 00 |     long    0[16]                               ' banks 0-15
36a04                 |     ' 16 banks of pin parameters follow
36a04     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36a08     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36a0c     FF FF FF FF 
      ...             
36a3c     FF FF FF FF 
36a40     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36a44                 | 
36a44                 | ' data for COG polling
36a44                 | qosData 
36a44     00 00 FF FF 
36a48     00 00 FF FF 
36a4c     00 00 FF FF 
36a50     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36a54     00 00 FF FF 
36a58     00 00 FF FF 
36a5c     00 00 FF FF 
36a60     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36a64                 |     
36a64                 | ' mailbox storage
36a64                 | 
36a64                 | mailboxes
36a64     00 00 00 00 
      ...             
36abc     00 00 00 00 
36ac0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36ac4                 | 	alignl
36ac4                 | _psram16drv_spin2_dat_
36ac4                 |                             orgh
36ac4     00 00 00 00 
      ...             
36adc     00 00 00 00 
36ae0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36ae4                 | 
36ae4                 | driver_start
36ae4                 |                             org
36ae4 000             | '..................................................................................................
36ae4 000             | ' Memory layout for COG RAM once operational:
36ae4 000             | '
36ae4 000             | '  COG RAM address      Usage
36ae4 000             | '  ---------------      ----
36ae4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36ae4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36ae4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36ae4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36ae4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36ae4 000             | '  ~$198-$1F3           State and register variables
36ae4 000             | '
36ae4 000             | ' Also during driver COG startup:
36ae4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36ae4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36ae4 000             | '..................................................................................................
36ae4 000             |                             
36ae4 000             | ' Mailbox storage after vector initialization
36ae4 000             | 
36ae4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36ae8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36aec 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36af0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36af4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36af8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36afc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36b00 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36b04 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36b08 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36b0c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36b10 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36b14 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36b18 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36b1c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36b20 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36b24 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36b28 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36b2c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36b30 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36b34 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36b38 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36b3c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36b40 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36b44 018             | 
36b44 018             | ' Mailbox parameter addresses per COG once patched
36b44 018             |                             
36b44 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36b48 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36b4c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36b50 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36b54 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36b58 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36b5c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36b60 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36b64 020             | 
36b64 020             | '..................................................................................................
36b64 020             | ' Per COG request and state setup and service branching
36b64 020             |         
36b64 020             | cog0                 
36b64 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36b68 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36b6c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36b70 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36b74 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b78 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b7c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36b80 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36b84 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36b88 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b8c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b90 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36b94 02c             | cog1                        
36b94 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36b98 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36b9c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36ba0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36ba4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ba8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bac 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36bb0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36bb4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36bb8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bbc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bc0 037 33 CA 63 FD |                             execf   request-0               'jump to service
36bc4 038             | cog2                         
36bc4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36bc8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36bcc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36bd0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36bd4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bd8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bdc 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36be0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36be4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36be8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bec 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bf0 043 33 CA 63 FD |                             execf   request-0               'jump to service
36bf4 044             | cog3                        
36bf4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36bf8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36bfc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36c00 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36c04 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c08 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c0c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36c10 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36c14 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36c18 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c1c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c20 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36c24 050             | cog4                        
36c24 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36c28 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36c2c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36c30 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36c34 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c38 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c3c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36c40 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36c44 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36c48 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c4c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c50 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36c54 05c             | cog5                        
36c54 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36c58 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36c5c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36c60 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36c64 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c68 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c6c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36c70 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36c74 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36c78 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c7c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c80 067 33 CA 63 FD |                             execf   request-0               'jump to service
36c84 068             | cog6                        
36c84 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36c88 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36c8c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36c90 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36c94 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c98 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c9c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36ca0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36ca4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36ca8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36cac 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36cb0 073 33 CA 63 FD |                             execf   request-0               'jump to service
36cb4 074             | cog7                        
36cb4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36cb8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36cbc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36cc0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36cc4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36cc8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ccc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36cd0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36cd4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36cd8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36cdc 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ce0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36ce4 080             |                             fit     128
36ce4 080             | 
36ce4 080             |                             fit     128
36ce4 080             | pad                         long    0[128-$]                'align init code to $80
36ce4 080             | 
36ce4 080             | '..................................................................................................
36ce4 080             | 
36ce4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36ce4 080             | 
36ce4 080             | init                        
36ce4 080             |                             ' get driver scratch long address in hub
36ce4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36ce8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36cec 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36cf0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36cf4 084             |                     
36cf4 084             |                             ' read in the additional LUT RAM code
36cf4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36cf8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36cfc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36d00 087             | 
36d00 087             |                             ' read the startup parameters
36d00 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36d04 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36d08 089             | 
36d08 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36d08 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36d0c 08a             | 
36d0c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36d10 08b 01 00 00 5F 
36d14 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36d18 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36d1c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36d20 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36d24 090             | 
36d24 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36d24 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36d28 091 01 00 00 FF 
36d2c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36d30 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36d34 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36d38 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36d3c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36d40 097 08 DE 47 F5 |                             or      a, #8
36d44 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36d48 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36d4c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36d50 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36d54 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36d58 09d 01 DE 07 F1 |                             add     a, #1
36d5c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36d60 09f             |  
36d60 09f             |                             ' setup device control pin states
36d60 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36d64 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36d68 0a1 01 00 00 FF 
36d6c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36d70 0a3             | 
36d70 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36d74 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36d78 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36d7c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36d80 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36d84 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36d88 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36d8c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36d90 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36d94 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36d98 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36d9c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36da0 0af             | pinloop
36da0 0af             |                             ' generate minimum CE high time before access
36da0 0af A1 07 00 FF 
36da4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36da8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36dac 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36db0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36db4 0b4 1F DE 63 FD |                             waitx   a                       'delay
36db8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36dbc 0b6             | 
36dbc 0b6             |                             ' setup the COG mailboxes and addresses 
36dbc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36dc0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36dc4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36dc8 0b9             | 
36dc8 0b9 28 2E 64 FD |                             setq    #24-1
36dcc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36dd0 0bb             | 
36dd0 0bb             |                             ' setup the polling loop for active COGs 
36dd0 0bb 01 C2 63 FD |                             cogid   id
36dd4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36dd8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36ddc 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36de0 0bf 0A F0 07 F6 |                             mov     ptra, #10
36de4 0c0 E1 F1 03 FA |                             mul     ptra, id
36de8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36dec 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36df0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36df4 0c4 03 C2 07 FA |                             mul     id, #3
36df8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36dfc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36e00 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36e04 0c8 D8 01 B0 FD |                             call    #reloadcogs
36e08 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36e0c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36e10 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36e10 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36e14 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36e18 0cd 08 04 DC FC |                             rep     #2, #8
36e1c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36e20 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36e24 0d0             | 
36e24 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36e24 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36e24 0d0 01 C2 63 FD |                             cogid   id
36e28 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36e2c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36e30 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36e34 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36e38 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36e3c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36e40 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36e44 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36e48 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36e4c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36e50 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36e54 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36e58 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36e5c 0de A5 E5 03 F1 |                             add     d, const512
36e60 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36e64 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36e68 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36e6c 0e2             |                             
36e6c 0e2             |                             ' setup register values for control vector loop setup after we return
36e6c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36e70 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36e74 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36e78 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36e7c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36e80 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36e84 0e8 D0 C3 8F F9 |                             altd    id, #id0
36e88 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36e8c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36e90 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36e94 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36e98 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36e9c 0ee             |  
36e9c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36ea0 0ef 07 CA 07 F5 |                             and     request, #7
36ea4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36ea8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36eac 0f2             |                             fit     $100                    'ensure all init code fits this space
36eac 0f2             | 
36eac 0f2             |                             fit     $100                    'ensure all init code fits this space
36eac 0f2             | 
36eac 0f2 00 00 00 00 
      ...             
36edc 0fe 00 00 00 00 
36ee0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36ee4 100             | 
36ee4 100             | '..................................................................................................
36ee4 100             | ' Error result handling and COG notification of request completion
36ee4 100             | 
36ee4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36ee8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36eec 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36ef0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36ef4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36ef8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36efc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36f00 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36f04 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36f08 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36f0c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36f10 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36f14 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36f18 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36f1c 10e             | ' Poller re-starts here after a COG is serviced
36f1c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36f20 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36f24 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36f28 111             | ' Main dynamic polling loop repeats until a request arrives
36f28 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36f2c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36f30 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36f34 114             | 
36f34 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36f38 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36f3c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36f40 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36f44 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36f48 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36f4c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36f50 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36f54 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36f58 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36f5c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36f60 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36f64 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36f68 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36f6c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36f70 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36f74 124             | 
36f74 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36f78 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36f7c 126             |  
36f7c 126             | '..................................................................................................
36f7c 126             | ' List handler                               
36f7c 126             | 
36f7c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36f80 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36f84 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36f88 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36f8c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36f90 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36f94 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36f98 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36f9c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36fa0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36fa4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36fa8 131 33 00 60 FD |                             execf   0-0                     'process the request 
36fac 132             | 
36fac 132             | '..................................................................................................
36fac 132             | ' Restoring per COG state and resuming where we left off
36fac 132             | 
36fac 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36fb0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36fb4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36fb8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36fbc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36fc0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36fc4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36fc8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36fcc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36fd0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36fd4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36fd8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36fdc 13e             |                    
36fdc 13e             | '..................................................................................................
36fdc 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36fdc 13e             | 
36fdc 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36fe0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36fe4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36fe8 141 D0 DF B7 F9 |                             setd    a, #id0
36fec 142 D8 DF BF F9 |                             sets    a, #addr1
36ff0 143 FE FF FF FF 
36ff4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36ff8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36ffc 146 3F DE A7 F9 |                             alti    a, #%111_111 
37000 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37004 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
37008 149 01 E2 63 FD |                             cogid   c
3700c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
37010 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37014 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
37018 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3701c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
37020 14f 00 E0 03 F6 |                             mov     b, 0-0
37024 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
37028 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3702c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
37030 153 0C 00 90 AD |             if_z            jmp     #excluded               
37034 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
37038 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3703c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
37040 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37044 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37048 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3704c 15a             | 
3704c 15a             | 'determine priority cogs and build instructions for the polling sequence
3704c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
37050 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
37054 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
37058 15d             | 
37058 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3705c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
37060 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
37064 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
37068 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3706c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
37070 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
37074 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
37078 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3707c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37080 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
37084 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37088 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3708c 16a             | endprioloop
3708c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37090 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
37094 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37098 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3709c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
370a0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
370a4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
370a8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
370ac 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
370b0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
370b4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
370b8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
370bc 176             | 
370bc 176             | ' populate the round robin COG polling instructions
370bc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
370c0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
370c4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
370c8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
370cc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
370d0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
370d4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
370d8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
370dc 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
370e0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
370e4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
370e8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
370ec 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
370f0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
370f4 184             | '..................................................................................................
370f4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
370f4 184             | 
370f4 184             | set_latency                                                 '            (a) set latency
370f4 184             | get_latency                                                 '            (b) get latency
370f4 184             | set_burst                                                   '            (c) set burst size of bank
370f4 184             | get_burst                                                   '            (d) get burst size of bank
370f4 184             |                                                             '            (e) dump state
370f4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
370f8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
370fc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
37100 187             |                                                             ' | | | | e  account for following AUGS
37100 187 04 00 00 FF 
37104 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
37108 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3710c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
37110 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37114 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37118 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3711c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
37120 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37124 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
37128 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3712c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
37130 193             | 
37130 193             | '..................................................................................................
37130 193             | ' Misc EXECF code
37130 193             | 
37130 193 33 72 63 FD | start_read_exec             execf   newburstr
37134 194 33 7C 63 FD | start_write_exec            execf   resumewrites
37138 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3713c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
37140 197             | 
37140 197             | '..................................................................................................
37140 197             | ' Variables
37140 197             | 
37140 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37144 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37148 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3714c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
37150 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
37154 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
37158 19d             | 
37158 19d 00 00 00 80 | xfreq1          long    $80000000
3715c 19e 00 00 00 40 | xfreq2          long    $40000000
37160 19f 03 00 00 00 | delay           long    3
37164 1a0             | 
37164 1a0             | lutcodeaddr                 
37164 1a0             | startupparams
37164 1a0             | excludedcogs                                    'careful: shared register use!
37164 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
37168 1a1 00 00 00 00 | flags           long    0
3716c 1a2             | mask                                            'careful: shared register use!
3716c 1a2 00 00 00 00 | resetmaskA      long    0
37170 1a3             | limit                                           'careful: shared register use!
37170 1a3 00 00 00 00 | resetmaskB      long    0
37174 1a4 00 00 00 00 | datapins        long    0
37178 1a5             | const512                                        'careful: shared register use!
37178 1a5 00 00 00 00 | devicelist      long    0
3717c 1a6 00 00 00 00 | coglist         long    0
37180 1a7 00 00 00 00 | mbox            long    0 
37184 1a8             | 
37184 1a8             | clkpin                                          'shared with code patched during init
37184 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
37188 1a9             | cspin                                           'shared with code patched during init
37188 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3718c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
37190 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
37194 1ac 01 00 00 00 | clkdelay        long    1
37198 1ad 00 00 00 00 | regdatabus      long    0
3719c 1ae             | 
3719c 1ae 10 00 00 00 | deviceaddr      long    $10
371a0 1af             | rrcounter
371a0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
371a4 1b0             | 
371a4 1b0             | ' jump addresses for the per COG handlers
371a4 1b0 20 00 00 00 | cog0_handler    long    cog0
371a8 1b1 2C 00 00 00 | cog1_handler    long    cog1
371ac 1b2 38 00 00 00 | cog2_handler    long    cog2
371b0 1b3 44 00 00 00 | cog3_handler    long    cog3
371b4 1b4 50 00 00 00 | cog4_handler    long    cog4
371b8 1b5 5C 00 00 00 | cog5_handler    long    cog5
371bc 1b6 68 00 00 00 | cog6_handler    long    cog6
371c0 1b7 74 00 00 00 | cog7_handler    long    cog7
371c4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
371c8 1b9             | 
371c8 1b9             | ' EXECF sequences
371c8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
371cc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
371d0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
371d4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
371d8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
371dc 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
371e0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
371e4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
371e4 1c0             | 
371e4 1c0             | 
371e4 1c0             | ' SKIPF sequences
371e4 1c0             | skiptable
371e4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
371e8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
371ec 1c2 00 00 00 00 |                 long    0                      ' read modify write long
371f0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
371f4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
371f8 1c5 00 00 00 00 | pattern2        long    0
371fc 1c6 00 00 00 00 | pattern3        long    0
37200 1c7 77 02 00 00 | singlelong      long    %1001110111  
37204 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37208 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3720c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37210 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37214 1cc             | 
37214 1cc             | ' LUT RAM address values
37214 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37218 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3721c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37220 1cf F6 02 00 00 | noread          long    noread_lut
37224 1d0             | 
37224 1d0 00 00 00 00 | id0             long    0
37228 1d1 01 00 00 00 | id1             long    1
3722c 1d2 02 00 00 00 | id2             long    2
37230 1d3 03 00 00 00 | id3             long    3
37234 1d4 04 00 00 00 | id4             long    4
37238 1d5 05 00 00 00 | id5             long    5
3723c 1d6 06 00 00 00 | id6             long    6
37240 1d7 07 00 00 00 | id7             long    7
37244 1d8             | 
37244 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37244 1d8             | 'and COG updates and need to follow immediately after id0-id7
37244 1d8 00 00 00 00 | addr1           long    0
37248 1d9 00 00 00 00 | hubdata         long    0
3724c 1da 00 00 00 00 | count           long    0
37250 1db 00 00 00 00 | addr2           long    0
37254 1dc 00 00 00 00 | total           long    0
37258 1dd 00 00 00 00 | offset1         long    0
3725c 1de 00 00 00 00 | offset2         long    0
37260 1df 00 00 00 00 | link            long    0
37264 1e0             | 
37264 1e0             | burstwrite                                      'note shared register use during init
37264 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37268 1e1 00 00 00 00 | id              long    0
3726c 1e2             | 
3726c 1e2 00 00 00 00 | header          long    0
37270 1e3 00 00 00 00 | trailer         long    0
37274 1e4 00 00 00 00 | cmdaddr         long    0
37278 1e5 00 00 00 00 | request         long    0
3727c 1e6 00 00 00 00 | rrlimit         long    0
37280 1e7 00 00 00 00 | pinconfig       long    0
37284 1e8 00 00 00 00 | clks            long    0
37288 1e9 00 00 00 00 | resume          long    0
3728c 1ea 00 00 00 00 | orighubsize     long    0
37290 1eb 00 00 00 00 | wrclks          long    0
37294 1ec             | 
37294 1ec 00 00 00 00 | pattern         long    0
37298 1ed 00 00 00 00 | hubscratch      long    0
3729c 1ee 00 10 00 00 | val4k           long    4096
372a0 1ef             | 
372a0 1ef             | ' temporary general purpose regs
372a0 1ef 00 00 00 00 | a               long    0
372a4 1f0 00 00 00 00 | b               long    0
372a8 1f1 00 00 00 00 | c               long    0
372ac 1f2 00 00 00 00 | d               long    0
372b0 1f3             |                 fit     502
372b0 1f3             | 
372b0 1f3             |                 fit     502
372b0 1f3             | 
372b0 1f3             | '..................................................................................................
372b0 1f3             | 
372b0 1f3             |             orgh
372b0                 | 
372b0                 | lut_code
372b0                 | 'HW init code up to 80 longs
372b0                 | 
372b0                 | '..................................................................................................
372b0                 | ' Memory layout for LUT RAM once operational:
372b0                 | '
372b0                 | '  LUT RAM address      Usage
372b0                 | '  ---------------      ----
372b0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
372b0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
372b0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
372b0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
372b0                 | '
372b0                 | ' Also during driver COG startup:
372b0                 | ' $230-$24F is used for HW init setup
372b0                 | ' $250-$26F is used as temporary vector storage 
372b0                 | '..................................................................................................
372b0                 | 
372b0                 |                 org $230    
372b0 230             | 
372b0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
372b0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
372b4 231 24 16 60 FD |                             pollxfi
372b8 232 FF AA 2A FF 
372bc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
372c0 234 28 00 B0 FD |                             call    #sendqspi
372c4 235 07 F8 07 FF 
372c8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
372cc 237 28 00 B0 FD |                             call    #sendspi
372d0 238 F8 07 78 FF 
372d4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
372d8 23a 1C 00 B0 FD |                             call    #sendspi
372dc 23b 7F 78 78 FF 
372e0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
372e4 23d 10 00 B0 FD |                             call    #sendspi 
372e8 23e 2D 00 64 FD |                             ret
372ec 23f             | 
372ec 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
372f0 240 32 0C 64 FD |                             skipf   #%110
372f4 241 9C EF 03 F6 |                             mov     pb, xsendimm
372f8 242             | 
372f8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
372fc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
37300 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37304 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37308 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3730c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37310 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37314 249 50 48 63 FD |                             fltl    datapins                'float data bus
37318 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3731c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37320 24c             | 
37320 24c 00 00 00 00 
37324 24d 00 00 00 00 
37328 24e 00 00 00 00 
3732c 24f 00 00 00 00 |                 long    0[$270-32-$]
37330 250             |                 fit     $270-32  ' keep room for 32 vector longs
37330 250             |     
37330 250             |                 fit     $270-32  ' keep room for 32 vector longs
37330 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37330 250             | rw_vect ' PSRAM jump vectors
37330 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37334 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37338 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3733c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37340 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37344 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37348 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3734c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37350 258             | ro_vect ' R/O PSRAM jump vectors
37350 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37354 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37358 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3735c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37360 25c 00 01 00 00 |                 long    unsupported
37364 25d 00 01 00 00 |                 long    unsupported
37368 25e 00 01 00 00 |                 long    unsupported
3736c 25f 00 01 00 00 |                 long    unsupported
37370 260             | ctrl_vect ' Control jump vectors
37370 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37374 261 00 01 00 00 |                 long    unsupported
37378 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3737c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37380 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37384 265 00 01 00 00 |                 long    unsupported
37388 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3738c 267 3E 01 00 00 |                 long    reconfig 
37390 268             | no_vect ' Invalid bank jump vectors
37390 268 01 01 00 00 |                 long    invalidbank
37394 269 01 01 00 00 |                 long    invalidbank
37398 26a 01 01 00 00 |                 long    invalidbank
3739c 26b 01 01 00 00 |                 long    invalidbank
373a0 26c 01 01 00 00 |                 long    invalidbank
373a4 26d 01 01 00 00 |                 long    invalidbank
373a8 26e 01 01 00 00 |                 long    invalidbank
373ac 26f 01 01 00 00 |                 long    invalidbank
373b0 270             |                 fit     $270
373b0 270             | 
373b0 270             |                 fit     $270
373b0 270             | '..................................................................................................
373b0 270             | ' PSRAM READS
373b0 270             |                                                             ' a b c d e f
373b0 270             |                                                             ' B W L B R L  (a) byte read
373b0 270             |                                                             ' Y O O U E O  (b) word read
373b0 270             |                                                             ' T R N R S C  (c) long read
373b0 270             |                                                             ' E D G S U K  (d) new burst read
373b0 270             |                                                             '       T M E  (e) resumed sub-burst
373b0 270             |                                                             '         E D  (f) locked sub-burst
373b0 270             | 
373b0 270             | 
373b0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
373b4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
373b8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
373bc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
373c0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
373c4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
373c8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
373cc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
373d0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
373d4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
373d8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
373dc 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
373e0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
373e4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
373e8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
373ec 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
373f0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
373f4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
373f8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
373fc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
37400 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37404 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37408 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3740c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37410 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37414 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37418 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3741c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
37420 28c             | 
37420 28c             |                             ' fall through to read bursts
37420 28c             |                         
37420 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
37420 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37424 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37428 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3742c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37430 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37434 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37438 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3743c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
37440 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37444 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37448 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3744c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
37450 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37454 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37458 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3745c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
37460 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37464 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37468 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3746c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
37470 2a0 E8 D1 03 F1 |                             add     clks, clks
37474 2a1             | readcommon
37474 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37478 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3747c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37480 2a4             | 
37480 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37484 2a5 69 C8 63 FD |                             rev     cmdaddr
37488 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3748c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37490 2a8             | 
37490 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37494 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37498 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37498 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3749c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
374a0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
374a4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
374a8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
374a8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
374ac 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
374b0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
374b4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
374b8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
374bc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
374c0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
374c0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
374c4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
374c8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
374cc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
374d0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
374d4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
374d8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
374dc 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
374e0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
374e4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
374e8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
374ec 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
374f0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
374f4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
374f8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
374f8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
374fc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
37500 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37504 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37508 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3750c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37510 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37514 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37518 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3751c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
37520 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37524 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37528 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3752c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
37530 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37534 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37538 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3753c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
37540 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37544 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37548 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3754c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
37550 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37554 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37558 2da 10 03 90 FD |                             jmp     #writecommon
3755c 2db             | 
3755c 2db             | '..................................................................................................
3755c 2db             | ' Burst continuation testing
3755c 2db             | 
3755c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
37560 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37564 2dd             | continue_read_lut          
37564 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37568 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3756c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
37570 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
37574 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37578 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3757c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37580 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37584 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37588 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3758c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37590 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37594 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37598 2ea             | 
37598 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3759c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
375a0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
375a4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
375a8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
375ac 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
375b0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
375b4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
375b8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
375bc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
375c0 2f4 2A 1C 66 0D |             _ret_           push    #poller
375c4 2f5             | 
375c4 2f5             | 
375c4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
375c8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
375c8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
375cc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
375d0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
375d4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
375d8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
375dc 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
375e0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
375e4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
375e8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
375ec 2ff             | '..................................................................................................
375ec 2ff             | ' Completion of requests
375ec 2ff             | 
375ec 2ff             | complete_rw_lut             
375ec 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
375f0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
375f4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
375f8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
375fc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
37600 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37604 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37608 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3760c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37610 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37614 309 32 62 64 AD |             if_z            skipf   #%110001
37618 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3761c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
37620 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37624 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37628 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3762c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
37630 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37634 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37638 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3763c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
37640 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37644 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37648 316             |                                                             ' skipcase (a) gfx copy to/from hub
37648 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37648 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37648 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3764c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
37650 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37654 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37658 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3765c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
37660 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37664 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37668 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3766c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
37670 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
37674 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37678 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3767c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37680 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37684 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37688 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3768c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37690 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37694 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37698 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3769c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
376a0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
376a4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
376a8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
376ac 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
376b0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
376b4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
376b8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
376bc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
376c0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
376c4 335 DF B7 03 A6 |             if_z            mov     addr2, link
376c8 336 34 FF 9F AD |             if_z            jmp     #checknext
376cc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
376d0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
376d4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
376d8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
376dc 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
376e0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
376e4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
376e8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
376ec 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
376f0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
376f4 341             | 
376f4 341             | '..................................................................................................
376f4 341             | ' PSRAM WRITES
376f4 341             |                                                             '  a b c d e f g h
376f4 341             | 
376f4 341             |                                                             '  B W L F B R L L (a) byte write(s)
376f4 341             |                                                             '  Y O O I U E O O (b) word write(s)
376f4 341             |                                                             '  T R N L R S C C (c) long write(s)
376f4 341             |                                                             '  E D G L S U K K (d) resumed fill
376f4 341             |                                                             '          T M E E (e) new burst write
376f4 341             |                                                             '            E D D (f) resumed burst
376f4 341             |                                                             '              F B (g) locked fill
376f4 341             |                                                             '              I U (h) locked burst write
376f4 341             |                                                             '              L R 
376f4 341             |                                                             '              L S 
376f4 341             |                                                             '                T 
376f4 341             | 
376f4 341             | w_single                   
376f4 341             | w_fill_cont           
376f4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
376f8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
376fc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
37700 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37704 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37708 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3770c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37710 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37714 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37718 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3771c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
37720 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37724 34d             |                ' disable call to r_resume_burst for single longs when z=0
37724 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37728 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3772c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
37730 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37734 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37738 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3773c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
37740 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37744 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37748 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3774c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
37750 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37754 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37758 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3775c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
37760 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37764 35d             |         
37764 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37764 35d             |             '
37764 35d             |             '  At least one of these 3 optional components will be sent
37764 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37764 35d             |             '     body - N x full longs of data
37764 35d             |             '     trailer - last partial long of data
37764 35d             |             '
37764 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37764 35d             |             '
37764 35d             |             'Case    Type                           Sends
37764 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37764 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37764 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37764 35d             |             ' 4)     Multiple long fill             body only
37764 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37764 35d             | 
37764 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37764 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37768 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3776c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37770 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37774 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37778 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3777c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37780 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37784 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37788 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3778c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37790 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37794 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37798 36a             |                             
37798 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3779c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
377a0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
377a4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
377a8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
377ac 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
377b0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
377b4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
377b8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
377bc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
377c0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
377c4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
377c8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
377cc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
377d0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
377d4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
377d8 37a             | 
377d8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
377dc 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
377e0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
377e4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
377e8 37e             |                  
377e8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
377ec 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
377f0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
377f4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
377f8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
377fc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
37800 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37804 385             | 
37804 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37808 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3780c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37810 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37814 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37818 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3781c 38b             | 
3781c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3781c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
37820 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37824 38d 2A B0 63 FD |                             push    addr1                   'save address
37828 38e             | 
37828 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37828 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3782c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
37830 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37834 391             |             
37834 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37838 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3783c 393 2B B0 63 FD |                             pop     addr1                   'restore address
37840 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37844 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37848 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3784c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37850 398             | 
37850 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37854 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37858 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3785c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37860 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37864 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37868 39e             | 
37868 39e             |                             'trailer is done
37868 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3786c 39f             | 
3786c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37870 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37874 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37878 3a2             | 
37878 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3787c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37880 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37884 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37888 3a6             |                             
37888 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3788c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37890 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37894 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37898 3aa             |                                                          
37898 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3789c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
378a0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
378a4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
378a8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
378ac 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
378b0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
378b4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
378b8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
378bc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
378c0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
378c4 3b5             |  
378c4 3b5 59 52 63 FD |                             drvh    cspin
378c8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
378cc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
378d0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
378d4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
378d8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
378dc 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
378e0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
378e4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
378e8 3be EA E5 03 F6 |                             mov     d, orighubsize
378ec 3bf EF E5 63 F0 |                             shl     d, a
378f0 3c0 F2 E3 83 F1 |                             sub     c, d
378f4 3c1 DD E3 03 F1 |                             add     c, offset1
378f8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
378fc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
37900 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37904 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37908 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3790c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37910 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37914 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37918 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3791c 3cb BB D3 03 F6 |                             mov     resume, restorefill
37920 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37924 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37928 3ce 6C FC BF CD |             if_c            call    #yield
3792c 3cf 2D 00 64 FD |                             ret
37930 3d0             |                            
37930 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
37930 3d0             |                       '     rczl    pa                      'rotate left into address offset
37930 3d0             |                       '     rczl    c wcz                   'restore count and flags
37930 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37934 3d1 02 EC 67 F0 |                             shl     pa, #2
37938 3d2 28 06 64 AD |             if_z            setq    #3
3793c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
37940 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37944 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37948 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3794c 3d7             | 
3794c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37950 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37954 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37958 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3795c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37960 3dc             |                 fit 1024-32
37960 3dc             |         
37960 3dc             | 
37960 3dc             | '..................................................................................................
37960 3dc             | 
37960 3dc             |                 fit 1024-32
37960 3dc 00 00 00 00 
37964 3dd 00 00 00 00 
37968 3de 00 00 00 00 
3796c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37970 3e0             |                 org 1024-32
37970 000             | 
37970 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37970 000 00 00 00 00 |                 long $0000
37974 001 11 11 00 00 |                 long $1111
37978 002 22 22 00 00 |                 long $2222
3797c 003 33 33 00 00 |                 long $3333
37980 004 44 44 00 00 |                 long $4444
37984 005 55 55 00 00 |                 long $5555
37988 006 66 66 00 00 |                 long $6666
3798c 007 77 77 00 00 |                 long $7777
37990 008 88 88 00 00 |                 long $8888
37994 009 99 99 00 00 |                 long $9999
37998 00a AA AA 00 00 |                 long $aaaa
3799c 00b BB BB 00 00 |                 long $bbbb
379a0 00c CC CC 00 00 |                 long $cccc
379a4 00d DD DD 00 00 |                 long $dddd
379a8 00e EE EE 00 00 |                 long $eeee
379ac 00f FF FF 00 00 |                 long $ffff
379b0 010             | 
379b0 010             | 'masks
379b0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
379b4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
379b8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
379bc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
379c0 014             | 
379c0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
379c4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
379c8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
379cc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
379d0 018             | 
379d0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
379d4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
379d8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
379dc 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
379e0 01c             | 
379e0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
379e4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
379e8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
379ec 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
379f0 020             |         fit 1024
379f0 020             | 
379f0 020             |         fit 1024
379f0 020             | 
379f0 020             | '--------------------------------------------------------------------------------------------------
379f0 020             |         orgh
379f0                 | 
379f0                 | gfxexpansion
379f0                 |                             'simple line drawing graphics expansion of memory driver
379f0                 |                             'jmp     #donerepeats                'just return for now
379f0                 | 
379f0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
379f4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
379f8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
379fc     DD E1 03 F6 |                             mov     b, offset1              'get error term
37a00     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37a04     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37a08     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37a0c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37a10     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37a14     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37a18     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37a1c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37a20     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37a24     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37a28     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37a2c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37a30     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37a34     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37a38     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37a3c     DC E5 33 F9 |                             getword d, total, #0            'get line width
37a40     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37a44     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37a48     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37a4c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37a50     C3 03 80 FD |                             jmp     #readmask               'continue filling
37a54                 | 	alignl
37a54                 | _usbnew_spin2_dat_
37a54                 |                 org     $000
37a54 000             | 
37a54 000             | usb_host_start
37a54 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37a58 001             | 
37a58 001 03 00 00 FF 
37a5c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37a60 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37a64 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37a68 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37a6c 006 29 70 63 FD |                 setq2   htmp
37a70 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37a74 008             | 
37a74 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37a78 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
37a7c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37a80 00b             | 
37a80 00b             | '------------------------------------------------------------------------------
37a80 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37a80 00b             | ' special because the receiving function must not respond with either STALL or
37a80 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37a80 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37a80 00b             | ' corrupt packet, it must ignore the transaction
37a80 00b             | '------------------------------------------------------------------------------
37a80 00b             | ' On entry:
37a80 00b             | '   PTRA - start address of the SETUP data struct.
37a80 00b             | ' On exit:
37a80 00b             | '   retval - PID_ACK on success, otherwise error code.
37a80 00b             | '------------------------------------------------------------------------------
37a80 00b             | txn_setup
37a80 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37a84 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37a88 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37a8c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37a90 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37a94 010             | .setup
37a94 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37a98 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37a9c 012 2D 00 64 AD |         if_z    ret
37aa0 013 7C 0B B0 FD |                 call    #retry_wait
37aa4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37aa8 015 2D 00 64 AD |         if_z    ret
37aac 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
37ab0 017 E0 FF 9F FD |                 jmp     #.setup
37ab4 018             | 
37ab4 018             | '------------------------------------------------------------------------------
37ab4 018             | ' IN/INTERRUPT transaction.
37ab4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37ab4 018             | '------------------------------------------------------------------------------
37ab4 018             | ' On entry:
37ab4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37ab4 018             | '     CRC(b19..23).
37ab4 018             | ' On exit:
37ab4 018             | '------------------------------------------------------------------------------
37ab4 018             | txn_in
37ab4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37ab8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37abc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
37ac0 01b             | 
37ac0 01b             |                 ' Fall through to urx_packet
37ac0 01b             | 
37ac0 01b             | '------------------------------------------------------------------------------
37ac0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
37ac0 01b             | ' received are handshakes and IN DATAx.
37ac0 01b             | '------------------------------------------------------------------------------
37ac0 01b             | ' On entry:
37ac0 01b             | ' On exit:
37ac0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
37ac0 01b             | '     returned.
37ac0 01b             | '------------------------------------------------------------------------------
37ac0 01b             | urx_packet
37ac0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37ac4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37ac8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37acc 01e 1A 92 63 FD |                 getct   hct2
37ad0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37ad4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37ad8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37adc 022             | .wait_sop
37adc 022 22 A7 8A FA |                 rdpin   urx, dm
37ae0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37ae4 024 08 00 90 CD |         if_c    jmp     #.get_pid
37ae8 025 FC 25 CC FB |                 jnct2   #.wait_sop
37aec 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37af0 027             | .get_pid
37af0 027 28 02 B0 FD |                 call    #urx_next
37af4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37af8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37afc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37b00 02b             | .chk_pid
37b00 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37b04 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37b08 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37b0c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37b10 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37b14 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37b18 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37b1c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37b20 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37b24 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37b28 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37b2c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37b30 037             | .ack_resend
37b30 037 22 A7 82 FA |                 rqpin   urx, dm
37b34 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37b38 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37b3c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37b40 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37b44 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37b48 03d             | .chk_eop
37b48 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37b4c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37b50 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37b54 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37b58 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37b5c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37b60 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37b64 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37b68 045 2D 00 64 FD |                 ret
37b6c 046             | .idle
37b6c 046 22 A7 82 FA |                 rqpin   urx, dm
37b70 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37b74 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37b78 049 2D 00 64 FD |                 ret
37b7c 04a             | 
37b7c 04a             | '------------------------------------------------------------------------------
37b7c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37b7c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37b7c 04a             | ' if one is required.
37b7c 04a             | '------------------------------------------------------------------------------
37b7c 04a             | ' On entry:
37b7c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37b7c 04a             | ' On exit:
37b7c 04a             | '------------------------------------------------------------------------------
37b7c 04a             | utx_token
37b7c 04a 22 A7 82 FA |                 rqpin   urx, dm
37b80 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37b84 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37b88 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37b8c 04e 34 0D B0 CD |         if_c    call    #utx_pre
37b90 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37b94 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37b98 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37b9c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37ba0 053             | .next_byte
37ba0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37ba4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37ba8 055             | .wait
37ba8 055 40 46 72 FD |                 testp   dp                      wc
37bac 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37bb0 057 23 03 08 FC |                 akpin   dp
37bb4 058 22 A5 22 FC |                 wypin   utx, dm
37bb8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37bbc 05a             | 
37bbc 05a             | '------------------------------------------------------------------------------
37bbc 05a             | ' SETUP/OUT/INTERRUPT transaction.
37bbc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37bbc 05a             | '------------------------------------------------------------------------------
37bbc 05a             | ' On entry:
37bbc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37bbc 05a             | '     CRC(b19..23).
37bbc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37bbc 05a             | '   pkt_data - count of DATAx payload bytes to send.
37bbc 05a             | ' On exit:
37bbc 05a             | '------------------------------------------------------------------------------
37bbc 05a             | txn_out
37bbc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37bc0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37bc4 05c 00 00 C0 FF 
37bc8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37bcc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37bd0 05f             | 
37bd0 05f             |                 ' Fall through to utx_data
37bd0 05f             | 
37bd0 05f             | '------------------------------------------------------------------------------
37bd0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37bd0 05f             | ' calculated while the data byte is being shifted out. Since data stage
37bd0 05f             | ' success/fail is not determined until the status stage of the transaction,
37bd0 05f             | ' this routine is only concerned about the current DATAx packet.
37bd0 05f             | '------------------------------------------------------------------------------
37bd0 05f             | ' On entry:
37bd0 05f             | '   PTRA - hub start address of the data to read.
37bd0 05f             | '   pkt_cnt - data payload size.
37bd0 05f             | ' On exit:
37bd0 05f             | '------------------------------------------------------------------------------
37bd0 05f             | utx_data
37bd0 05f 22 A7 82 FA |                 rqpin   urx, dm
37bd4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37bd8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37bdc 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37be0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37be4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37be8 065 D8 0C B0 CD |         if_c    call    #utx_pre
37bec 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37bf0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37bf4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37bf8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37bfc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37c00 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37c04 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37c08 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37c0c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37c10 06f             | .read_byte
37c10 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37c14 070 F0 00 B0 FD |                 call    #utx_byte
37c18 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37c1c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37c20 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37c24 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37c28 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37c2c 076             | .send_crc
37c2c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37c30 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37c34 078 D0 00 B0 FD |                 call    #utx_byte
37c38 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37c3c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37c40 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37c44 07c             | 
37c44 07c             | '------------------------------------------------------------------------------
37c44 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37c44 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37c44 07c             | ' expects that the packet includes at least the CRC word.
37c44 07c             | '
37c44 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37c44 07c             | ' was requested, which makes it difficult to determine where the data stops
37c44 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37c44 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37c44 07c             | ' USB-16 expected residual value of 0xB001.
37c44 07c             | '
37c44 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37c44 07c             | ' so the caller can verify IN success before writing the data to its final
37c44 07c             | ' destination.
37c44 07c             | '------------------------------------------------------------------------------
37c44 07c             | ' On entry:
37c44 07c             | '   pkt_data - max byte count expected to be in the packet.
37c44 07c             | '   newb_flg - signals new byte ready when toggled.
37c44 07c             | ' On exit:
37c44 07c             | '   pkt_cnt - actual number of bytes read.
37c44 07c             | '------------------------------------------------------------------------------
37c44 07c             | urx_data
37c44 07c F7 75 03 F6 |                 mov     htmp2, pb
37c48 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37c4c 07e 00 00 C0 FF 
37c50 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37c54 080 BA EF 03 F6 |                 mov     pb, htmp2
37c58 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37c5c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37c60 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37c64 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37c68 085             | .wait_byte
37c68 085             | ' In-line rx for max speed
37c68 085 22 A7 82 FA |                 rqpin   urx, dm
37c6c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37c70 087 53 A5 02 F5 |                 and     utx, urx
37c74 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37c78 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37c7c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37c80 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37c84 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37c88 08d DC FF 9F FD |                 jmp     #.wait_byte
37c8c 08e             | .get_byte
37c8c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37c90 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37c94 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37c98 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37c9c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37ca0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37ca4 094             | .end_crc
37ca4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37ca8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37cac 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37cb0 097 2D 00 64 1D |         if_a    ret
37cb4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37cb4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37cb4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37cb4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37cb4 098 22 A7 82 FA |                 rqpin   urx, dm
37cb8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37cbc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37cc0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37cc0 09b             | .chk_crc
37cc0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37cc4 09c 58 00 00 FF 
37cc8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37ccc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37cd0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37cd4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37cd8 0a1 34 09 B0 FD |                 call    #poll_waitx
37cdc 0a2             | 
37cdc 0a2             |                 ' Fall through to utx_handshake
37cdc 0a2             | 
37cdc 0a2             | '------------------------------------------------------------------------------
37cdc 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37cdc 0a2             | ' the appropriate IP delay has been inserted.
37cdc 0a2             | '------------------------------------------------------------------------------
37cdc 0a2             | ' On entry:
37cdc 0a2             | '   retval - handshake PID to send.
37cdc 0a2             | ' On exit:
37cdc 0a2             | '   retval unchanged.
37cdc 0a2             | '------------------------------------------------------------------------------
37cdc 0a2             | utx_handshake
37cdc 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ce0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37ce4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ce8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37cec 0a6 5F A5 02 F6 |                 mov     utx, retval
37cf0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37cf4 0a8             | .idle
37cf4 0a8 22 A7 82 FA |                 rqpin   urx, dm
37cf8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37cfc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37d00 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37d04 0ac 08 09 90 FD |                 jmp     #poll_waitx
37d08 0ad             | 
37d08 0ad             | '------------------------------------------------------------------------------
37d08 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37d08 0ad             | '------------------------------------------------------------------------------
37d08 0ad             | ' On entry:
37d08 0ad             | '   utx - byte to transmit.
37d08 0ad             | ' On exit:
37d08 0ad             | '------------------------------------------------------------------------------
37d08 0ad             | utx_byte
37d08 0ad 40 46 72 FD |                 testp   dp                      wc
37d0c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37d10 0af 23 03 08 FC |                 akpin   dp
37d14 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37d18 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37d1c 0b2             | 
37d1c 0b2             | '------------------------------------------------------------------------------
37d1c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37d1c 0b2             | '------------------------------------------------------------------------------
37d1c 0b2             | ' On entry:
37d1c 0b2             | ' On exit:
37d1c 0b2             | '   retval - the byte read.
37d1c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37d1c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37d1c 0b2             | '     received.
37d1c 0b2             | '------------------------------------------------------------------------------
37d1c 0b2             | urx_next
37d1c 0b2 22 A7 8A FA |                 rdpin   urx, dm
37d20 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37d24 0b4 53 A5 02 F5 |                 and     utx, urx
37d28 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37d2c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37d30 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37d34 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37d38 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37d3c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37d40 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37d44 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37d48 0bd 2D 00 64 FD |                 ret
37d4c 0be             | 
37d4c 0be             | '------------------------------------------------------------------------------
37d4c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37d4c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37d4c 0be             | ' length, and the PID is not included in the CRC calculation:
37d4c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37d4c 0be             | '  CRC5  ENDP ADDRESS PID
37d4c 0be             | ' %00000_1111_1111111_xxxxxxxx
37d4c 0be             | '------------------------------------------------------------------------------
37d4c 0be             | ' On entry:
37d4c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37d4c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37d4c 0be             | ' On exit:
37d4c 0be             | '   ep_addr_pid - CRC value appended to the packet.
37d4c 0be             | '------------------------------------------------------------------------------
37d4c 0be             | calc_crc5
37d4c 0be FF 03 00 FF 
37d50 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37d54 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37d58 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37d5c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37d60 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37d64 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37d68 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37d6c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37d70 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37d74 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37d78 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37d7c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37d80 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37d84 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37d88 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37d8c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37d90 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37d94 0d0             | 
37d94 0d0             | '------------------------------------------------------------------------------
37d94 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37d94 0d0             | '------------------------------------------------------------------------------
37d94 0d0             | isr1_fsframe
37d94 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37d98 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d9c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37da0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37da4 0d4             | .wait
37da4 0d4 40 46 72 FD |                 testp   dp                      wc
37da8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37dac 0d6 23 03 08 FC |                 akpin   dp
37db0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37db4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37db8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37dbc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37dc0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37dc4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37dc8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37dcc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37dd0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37dd4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37dd8 0e1 2C FF BF FD |                 call    #utx_byte
37ddc 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37de0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37de4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37de8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37dec 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37df0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37df4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37df8 0e9 5B A5 42 F5 |                 or      utx, icrc
37dfc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37e00 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37e04 0ec 20 00 90 FD |                 jmp     #isr1_wait
37e08 0ed             | isr1_lsframe
37e08 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37e0c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37e10 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37e14 0f0             | .wait
37e14 0f0 40 46 72 FD |                 testp   dp                      wc
37e18 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37e1c 0f2 23 03 08 FC |                 akpin   dp
37e20 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37e24 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37e28 0f5             | isr1_wait
37e28 0f5 22 A5 82 FA |                 rqpin   utx, dm
37e2c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37e30 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37e34 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37e38 0f9 03 00 00 FF 
37e3c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37e40 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37e44 0fc F5 FF 3B FB |                 reti1
37e48 0fd             | 
37e48 0fd             | '------------------------------------------------------------------------------
37e48 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37e48 0fd             | ' transaction will complete before the next frame is triggered.
37e48 0fd             | '------------------------------------------------------------------------------
37e48 0fd             | ' On entry:
37e48 0fd             | ' On exit:
37e48 0fd             | '------------------------------------------------------------------------------
37e48 0fd             | wait_txn_ok
37e48 0fd 1A 74 63 FD |                 getct   htmp2
37e4c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37e50 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37e54 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37e58 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37e5c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37e60 103 2D 00 64 FD |                 ret
37e64 104             | 
37e64 104             | '------------------------------------------------------------------------------
37e64 104             | ' A device connection was detected, or a bus reset was requested by the USB
37e64 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37e64 104             | ' and perform a reset sequence prior to device enumeration.
37e64 104             | '------------------------------------------------------------------------------
37e64 104             | dev_reset
37e64 104 22 A7 82 FA |                 rqpin   urx, dm
37e68 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37e6c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37e70 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37e74 108             | reset
37e74 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37e78 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37e7c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37e80 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37e84 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37e88 10d 1A 92 62 FD |                 getct   iframe_ct_base
37e8c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37e90 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37e94 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37e98 111 24 70 07 F1 |                 add     htmp, #36
37e9c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37ea0 113             | .framewait
37ea0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37ea4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37ea8 115 2D 00 64 FD |                 ret
37eac 116             | 
37eac 116             | '------------------------------------------------------------------------------
37eac 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37eac 116             | '------------------------------------------------------------------------------
37eac 116             | ' On entry:
37eac 116             | '   PTRA - source address.
37eac 116             | '   PB - destination address.
37eac 116             | '   hr0 - length of copy, in bytes.
37eac 116             | ' On exit:
37eac 116             | '------------------------------------------------------------------------------
37eac 116             | hmemcpy
37eac 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37eb0 117 F7 71 43 FC |                 wrbyte  htmp, pb
37eb4 118 01 EE 07 F1 |                 add     pb, #1
37eb8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37ebc 11a             | 
37ebc 11a             | '------------------------------------------------------------------------------
37ebc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37ebc 11a             | ' loop until the errant device is disconnected.
37ebc 11a             | '------------------------------------------------------------------------------
37ebc 11a             | ' On entry:
37ebc 11a             | ' On exit:
37ebc 11a             | '------------------------------------------------------------------------------
37ebc 11a             | host_error
37ebc 11a             |           if ERROR_LED >= 0
37ebc 11a             |           end
37ebc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37ec0 11b             | 
37ec0 11b             | '------------------------------------------------------------------------------
37ec0 11b             | ' Get HID descriptor buffer for current port
37ec0 11b             | '------------------------------------------------------------------------------
37ec0 11b             | ' On entry:
37ec0 11b             | ' On exit:
37ec0 11b             | '   PB - HID descriptor buffer pointer
37ec0 11b             | '------------------------------------------------------------------------------
37ec0 11b             | get_hid_descr_buffer
37ec0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37ec4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37ec8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37ecc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37ed0 11f             | 
37ed0 11f             | 
37ed0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37ed4 120             | 
37ed4 120             | ' USB commands and error codes
37ed4 120 00 00 00 00 | cmd_data        long    0
37ed8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37edc 122             | 
37edc 122             | ' Parameters block assigned at cog startup
37edc 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37ee0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37ee4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37ee8 125             | if ACTIVITY_LED >= 0
37ee8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37ee8 125             | end
37ee8 125             | if ERROR_LED >= 0
37ee8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37ee8 125             | end
37ee8 125 00 00 00 00 | hid_descr_p     long    0
37eec 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37eec 126             | 'hkbd_report_p   long    0
37eec 126 00 00 00 00 | hub_descr_p     long    0
37ef0 127 00 00 00 00 | urx_buff_p      long    0
37ef4 128 00 00 00 00 | dev_desc_buff_p long    0
37ef8 129 00 00 00 00 | con_desc_buff_p long    0
37efc 12a 00 00 00 00 | cache_start_p   long    0
37f00 12b 00 00 00 00 | cache_end_p     long    0
37f04 12c             | if EMUPAD_MAX_PLAYER > 0
37f04 12c             | emupad_out_ptr  long    0
37f04 12c             | end
37f04 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37f08 12d             | 
37f08 12d             | hdev_init_start
37f08 12d             | hdev_port       res     1
37f08 12d             | hdev_port       res     1
37f08 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37f08 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37f08 12d             | kbm_next_datax  res     1
37f08 12d             | kbm_next_datax  res     1
37f08 12d             | hub_intf_num    res     1
37f08 12d             | hub_intf_num    res     1
37f08 12d             | hub_next_datax  res     1
37f08 12d             | hub_next_datax  res     1
37f08 12d             | hub_status_chg  res     1
37f08 12d             | hub_status_chg  res     1
37f08 12d             | hub_port_status res     1
37f08 12d             | hub_port_status res     1
37f08 12d             | if HAVE_MOUSE
37f08 12d             | ms_intf_num     res     1
37f08 12d             | ms_intf_num     res     1
37f08 12d             | ms_in_max_pkt   res     1
37f08 12d             | ms_in_max_pkt   res     1
37f08 12d             | end
37f08 12d             | kb_intf_num     res     1
37f08 12d             | kb_intf_num     res     1
37f08 12d             | kb_interval     res     1
37f08 12d             | kb_interval     res     1
37f08 12d             | kb_in_max_pkt   res     1
37f08 12d             | kb_in_max_pkt   res     1
37f08 12d             | kb_max_index    res     1
37f08 12d             | kb_max_index    res     1
37f08 12d             | kb_led_states   res     1
37f08 12d             | kb_led_states   res     1
37f08 12d             | gp_intf_num     res     1
37f08 12d             | gp_intf_num     res     1
37f08 12d             | gp_interval     res     1
37f08 12d             | gp_interval     res     1
37f08 12d             | gp_max_index    res     1
37f08 12d             | gp_max_index    res     1
37f08 12d             | gp_descr_len    res     1+MAX_DEVICES
37f08 12d             | gp_descr_len    res     1+MAX_DEVICES
37f08 12d             | hdev_init_end
37f08 12d             | 
37f08 12d             | ' Initialized at cog startup:
37f08 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37f08 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37f08 12d             | iframe_ct_new   res     1
37f08 12d             | iframe_ct_new   res     1
37f08 12d             | iframe_ct_base  res     1
37f08 12d             | iframe_ct_base  res     1
37f08 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37f08 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37f08 12d             | 
37f08 12d             | ' This register block is reset to zero when a USB device connects
37f08 12d             | hreg_init_start
37f08 12d             | hstatus         res     1         ' Host status flags
37f08 12d             | hstatus         res     1         ' Host status flags
37f08 12d             | hctwait         res     1         ' Poll-based wait clocks
37f08 12d             | hctwait         res     1         ' Poll-based wait clocks
37f08 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37f08 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37f08 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37f08 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37f08 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37f08 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37f08 12d             | xfer_retry      res     1         ' Control transfer retry count
37f08 12d             | xfer_retry      res     1         ' Control transfer retry count
37f08 12d             | retry           res     1         ' Transaction retry count
37f08 12d             | retry           res     1         ' Transaction retry count
37f08 12d             | utx             res     1         ' Byte to transmit on USB
37f08 12d             | utx             res     1         ' Byte to transmit on USB
37f08 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37f08 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37f08 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37f08 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37f08 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37f08 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37f08 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37f08 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37f08 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37f08 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37f08 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37f08 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37f08 12d             | frame           res     1         ' USB 1ms frame counter value
37f08 12d             | frame           res     1         ' USB 1ms frame counter value
37f08 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37f08 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37f08 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37f08 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37f08 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37f08 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37f08 12d             | crc             res     1         ' Used for CRC16 calculation
37f08 12d             | crc             res     1         ' Used for CRC16 calculation
37f08 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37f08 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37f08 12d             | retval          res     1         ' Global success/fail return parameter
37f08 12d             | retval          res     1         ' Global success/fail return parameter
37f08 12d             | context_retval  res     1         ' Operation contextual return parameter
37f08 12d             | context_retval  res     1         ' Operation contextual return parameter
37f08 12d             | ' Device stuff
37f08 12d             | hdev_id         res     1+MAX_DEVICES
37f08 12d             | hdev_id         res     1+MAX_DEVICES
37f08 12d             | hdev_bcd        res     1
37f08 12d             | hdev_bcd        res     1
37f08 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37f08 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37f08 12d             | ' Keyboard/mouse stuff
37f08 12d             | hctrl_ep_addr   res     1
37f08 12d             | hctrl_ep_addr   res     1
37f08 12d             | hctrl_max_pkt   res     1
37f08 12d             | hctrl_max_pkt   res     1
37f08 12d             | hconfig_base    res     1
37f08 12d             | hconfig_base    res     1
37f08 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37f08 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37f08 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37f08 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37f08 12d             | hdev_class      res     1
37f08 12d             | hdev_class      res     1
37f08 12d             | hdev_subclass   res     1
37f08 12d             | hdev_subclass   res     1
37f08 12d             | hdev_protocol   res     1
37f08 12d             | hdev_protocol   res     1
37f08 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37f08 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37f08 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37f08 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37f08 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37f08 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37f08 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37f08 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37f08 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37f08 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37f08 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37f08 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37f08 12d             | if HAVE_MOUSE
37f08 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37f08 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37f08 12d             | end
37f08 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37f08 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37f08 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37f08 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37f08 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37f08 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37f08 12d             | hdev_out_addr   res     1
37f08 12d             | hdev_out_addr   res     1
37f08 12d             | 
37f08 12d             | if EMUPAD_MAX_PLAYER > 0
37f08 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37f08 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37f08 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37f08 12d             | end
37f08 12d             | 
37f08 12d             | hreg_init_end
37f08 12d             | 
37f08 12d             | hidr_start
37f08 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37f08 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37f08 12d             | hidr_flags      res     1
37f08 12d             | hidr_flags      res     1
37f08 12d             | hidr_axis       res     3
37f08 12d             | hidr_axis       res     3
37f08 12d             | hidr_buttons    res     1
37f08 12d             | hidr_buttons    res     1
37f08 12d             | hidr_hats       res     1
37f08 12d             | hidr_hats       res     1
37f08 12d             | '' Above are actually useful values, 6 longs
37f08 12d             | hidr_id         res     1
37f08 12d             | hidr_id         res     1
37f08 12d             | hidr_state      res     1
37f08 12d             | hidr_state      res     1
37f08 12d             | hidr_size       res     1
37f08 12d             | hidr_size       res     1
37f08 12d             | hidr_count      res     1
37f08 12d             | hidr_count      res     1
37f08 12d             | hidr_offset     res     1
37f08 12d             | hidr_offset     res     1
37f08 12d             | hidr_usage_idx  res     1
37f08 12d             | hidr_usage_idx  res     1
37f08 12d             | hidr_lminmax    res     1
37f08 12d             | hidr_lminmax    res     1
37f08 12d             | hidr_pminmax    res     1
37f08 12d             | hidr_pminmax    res     1
37f08 12d             | hidr_type       res     1
37f08 12d             | hidr_type       res     1
37f08 12d             | hidr_end
37f08 12d             | 
37f08 12d             | ' Variables dependent on the system freqency
37f08 12d             | _var_64_lower_  res     1
37f08 12d             | _var_64_lower_  res     1
37f08 12d             | _var_64_upper_  res     1
37f08 12d             | _var_64_upper_  res     1
37f08 12d             | _12Mbps_        res     1
37f08 12d             | _12Mbps_        res     1
37f08 12d             | _1_5Mbps_       res     1
37f08 12d             | _1_5Mbps_       res     1
37f08 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37f08 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37f08 12d             | _1us_           res     1         ' 1us
37f08 12d             | _1us_           res     1         ' 1us
37f08 12d             | _10us_          res     1         ' 10us
37f08 12d             | _10us_          res     1         ' 10us
37f08 12d             | _33us_          res     1         ' 33us
37f08 12d             | _33us_          res     1         ' 33us
37f08 12d             | _txn_err_       res     1         ' 250us
37f08 12d             | _txn_err_       res     1         ' 250us
37f08 12d             | _500us_         res     1         ' 500us
37f08 12d             | _500us_         res     1         ' 500us
37f08 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37f08 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37f08 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37f08 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37f08 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37f08 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37f08 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37f08 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37f08 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37f08 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37f08 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37f08 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37f08 12d             | _preamble_wait_ res     1
37f08 12d             | _preamble_wait_ res     1
37f08 12d             | _1ms_           res     1         ' 1ms
37f08 12d             | _1ms_           res     1         ' 1ms
37f08 12d             | _2ms_           res     1         ' 2ms
37f08 12d             | _2ms_           res     1         ' 2ms
37f08 12d             | _suspend_wait_  res     1         ' 3ms
37f08 12d             | _suspend_wait_  res     1         ' 3ms
37f08 12d             | _4ms_           res     1         ' 4ms
37f08 12d             | _4ms_           res     1         ' 4ms
37f08 12d             | _xfer_wait_     res     1         ' 5ms
37f08 12d             | _xfer_wait_     res     1         ' 5ms
37f08 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37f08 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37f08 12d             | _reset_hold_    res     1         ' 15ms
37f08 12d             | _reset_hold_    res     1         ' 15ms
37f08 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37f08 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37f08 12d             | _21ms_          res     1         ' 21ms
37f08 12d             | _21ms_          res     1         ' 21ms
37f08 12d             | _100ms_         res     1         ' 100ms
37f08 12d             | _100ms_         res     1         ' 100ms
37f08 12d             | _500ms_         res     1         ' 500ms
37f08 12d             | _500ms_         res     1         ' 500ms
37f08 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37f08 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37f08 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37f08 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37f08 12d             | '------------------------------------------------------------------------------
37f08 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37f08 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37f08 12d             | _usb_d_ls_nco_  res     1
37f08 12d             | _usb_d_ls_nco_  res     1
37f08 12d             | _usb_h_fs_nco_  res     1
37f08 12d             | _usb_h_fs_nco_  res     1
37f08 12d             | _usb_d_fs_nco_  res     1
37f08 12d             | _usb_d_fs_nco_  res     1
37f08 12d             | '------------------------------------------------------------------------------
37f08 12d             | ' Scratch registers
37f08 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37f08 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37f08 12d             | htmp1           res     1
37f08 12d             | htmp1           res     1
37f08 12d             | htmp2           res     1
37f08 12d             | htmp2           res     1
37f08 12d             | htmp3           res     1
37f08 12d             | htmp3           res     1
37f08 12d             | hrep            res     1         ' Repeat count
37f08 12d             | hrep            res     1         ' Repeat count
37f08 12d             | hsave0          res     1         ' Subroutine parameter saves
37f08 12d             | hsave0          res     1         ' Subroutine parameter saves
37f08 12d             | hsave1          res     1
37f08 12d             | hsave1          res     1
37f08 12d             | hsave2          res     1
37f08 12d             | hsave2          res     1
37f08 12d             | isrtmp1         res     1
37f08 12d             | isrtmp1         res     1
37f08 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37f08 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37f08 12d             | hr0             res     1         ' Multi-purpose registers
37f08 12d             | hr0             res     1         ' Multi-purpose registers
37f08 12d             | hr1             res     1
37f08 12d             | hr1             res     1
37f08 12d             | hr2             res     1
37f08 12d             | hr2             res     1
37f08 12d             | hr3             res     1
37f08 12d             | hr3             res     1
37f08 12d             | hpar1           res     1         ' Routine entry/exit parameters
37f08 12d             | hpar1           res     1         ' Routine entry/exit parameters
37f08 12d             | hpar2           res     1
37f08 12d             | hpar2           res     1
37f08 12d             | hpar3           res     1
37f08 12d             | hpar3           res     1
37f08 12d             | hct2            res     1         ' Function response bus turn-around timer
37f08 12d             | hct2            res     1         ' Function response bus turn-around timer
37f08 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37f08 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37f08 12d             | mod_cnt         res     1         ' Used in idle loops
37f08 12d             | mod_cnt         res     1         ' Used in idle loops
37f08 12d             |                 fit     $1F0
37f08 12d             |                 org     $200
37f08 200             | hlut_start
37f08 200             | 
37f08 200             | '------------------------------------------------------------------------------
37f08 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37f08 200             | ' settings to startup defaults.
37f08 200             | '------------------------------------------------------------------------------
37f08 200             | ' On entry:
37f08 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37f08 200             | '------------------------------------------------------------------------------
37f08 200             | set_speed_full
37f08 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37f0c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37f10 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37f14 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37f18 204             | '                ret                             wcz     ' Restore caller flags on exit
37f18 204             | 
37f18 204             | '------------------------------------------------------------------------------
37f18 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37f18 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37f18 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37f18 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37f18 204             | ' putting the smart pins into reset.
37f18 204             | '------------------------------------------------------------------------------
37f18 204             | ' On entry:
37f18 204             | ' On exit: CZ flags restored to caller states
37f18 204             | '------------------------------------------------------------------------------
37f18 204             | set_speed_low
37f18 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37f1c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37f20 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37f24 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37f28 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37f2c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37f30 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37f34 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37f38 20c             | 
37f38 20c             | '------------------------------------------------------------------------------
37f38 20c             | ' Perform configuration stuff required when a device intitially connects.
37f38 20c             | '------------------------------------------------------------------------------
37f38 20c             | ' On entry:
37f38 20c             | ' On exit:
37f38 20c             | '------------------------------------------------------------------------------
37f38 20c             | on_connect
37f38 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37f3c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37f40 20e             | .retry
37f40 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37f44 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37f48 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37f4c 211 00 08 00 FF 
37f50 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37f54 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37f58 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f5c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37f60 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37f64 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37f68 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f6c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37f70 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37f74 21b 4C 03 B0 FD |                 call    #poll_waitx
37f78 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37f7c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37f80 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37f84 21f B8 FF 9F FD |                 jmp     #.retry
37f88 220             | .get_dev_desc
37f88 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37f8c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37f90 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37f94 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37f98 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37f9c 225 88 FB BF FD |                 call    #reset
37fa0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37fa4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37fa8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37fac 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37fb0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fb4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37fb8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37fbc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37fc0 22e 04 00 00 FF 
37fc4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37fc8 230 34 FA BF FD |                 call    #calc_crc5
37fcc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37fd0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37fd4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37fd8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37fdc 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37fe0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37fe4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fe8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37fec 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37ff0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37ff4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37ff8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37ffc 23d C4 02 B0 FD |                 call    #poll_waitx
38000 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38004 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38008 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3800c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38010 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38014 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38018 244 2D 00 64 5D |         if_nz   ret
3801c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38020 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38024 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38028 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3802c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38030 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38034 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
38038 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3803c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
38040 24e 2C FB 9F CD |         if_b    jmp     #host_error
38044 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38048 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3804c 251 2D EC 63 FD |                 call    pa
38050 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
38054 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
38058 254 2C EC 63 FD |                 jmp     pa
3805c 255             | 
3805c 255             | '------------------------------------------------------------------------------
3805c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3805c 255             | ' Status reporting is always in the function-to-host direction.
3805c 255             | '------------------------------------------------------------------------------
3805c 255             | ' On entry:
3805c 255             | '   PTRA - start address of the SETUP data in hub.
3805c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3805c 255             | '     stage.
3805c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3805c 255             | ' On exit:
3805c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3805c 255             | '     contains the count of data stage bytes actually received, which must
3805c 255             | '     always be <= the count requested.
3805c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3805c 255             | '     more specific USB operation error code.
3805c 255             | '------------------------------------------------------------------------------
3805c 255             | control_read
3805c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38060 256 F8 8F 03 F6 |                 mov     hpar2, ptra
38064 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
38068 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3806c 259             | .xfer_start
3806c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38070 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38074 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38078 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3807c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38080 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38084 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38088 260 61 00 00 FF 
3808c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38090 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38094 263             | .data
38094 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38098 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3809c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
380a0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
380a4 267             | .nak_retry
380a4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
380a8 268             | .in_retry
380a8 268 BC F6 BF FD |                 call    #txn_in
380ac 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
380b0 26a 28 00 90 AD |         if_z    jmp     #.commit
380b4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
380b8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
380bc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
380c0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
380c4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
380c8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
380cc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
380d0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
380d4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
380d8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
380dc 275             | .commit
380dc 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
380e0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
380e4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
380e8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
380ec 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
380f0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
380f4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
380f8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
380fc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
38100 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38104 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
38108 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3810c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
38110 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38114 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38118 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3811c 285             | .pre_status
3811c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
38120 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38124 287 00 B0 06 F6 |                 mov     pkt_data, #0
38128 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3812c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38130 28a 61 00 00 FF 
38134 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
38138 28c             | .out_retry
38138 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3813c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38140 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38144 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38148 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3814c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38150 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38154 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38158 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3815c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
38160 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
38164 297             | ' I've encountered transfer STALL, even though the data looks correct, and
38164 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
38164 297             | ' ControlRead() transfer gets things unstuck most of the time...
38164 297             | .xfer_retry
38164 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
38168 298 58 01 B0 FD |                 call    #poll_waitx
3816c 299 8C F9 BF FD |                 call    #wait_txn_ok
38170 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
38174 29b C7 F1 03 F6 |                 mov     ptra, hpar2
38178 29c C8 EF 03 F6 |                 mov     pb, hpar3
3817c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
38180 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
38184 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
38188 2a0             | 
38188 2a0             | '------------------------------------------------------------------------------
38188 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
38188 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
38188 2a0             | ' the SETUP data struct is filled with the required values.
38188 2a0             | '------------------------------------------------------------------------------
38188 2a0             | ' On entry:
38188 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
38188 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
38188 2a0             | '     stage.
38188 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
38188 2a0             | ' On exit:
38188 2a0             | '   retval - used to convey the success/failure of each stage.
38188 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38188 2a0             | '     more specific USB operation error code.
38188 2a0             | '------------------------------------------------------------------------------
38188 2a0             | control_write
38188 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3818c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38190 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38194 2a3             | 
38194 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38198 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3819c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
381a0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
381a4 2a7             | .xfer_start
381a4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
381a8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
381ac 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
381b0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
381b4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
381b8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
381bc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
381c0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
381c4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
381c8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
381cc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
381d0 2b2             | .data
381d0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
381d4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
381d8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
381dc 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
381e0 2b6             | .out_retry
381e0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
381e4 2b7 88 F6 BF FD |                 call    #txn_out
381e8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
381ec 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
381f0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
381f4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
381f8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
381fc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
38200 2be             | .commit
38200 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38204 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38208 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3820c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38210 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38214 2c3             | pre_status_in
38214 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38218 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3821c 2c5             | .status_retry
3821c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38220 2c6 44 F5 BF FD |                 call    #txn_in
38224 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38228 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3822c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38230 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38234 2cb 2D 00 64 AD |         if_z    ret
38238 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3823c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38240 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38244 2cf             | '               ret                                     ' Caller must handle transfer retirement
38244 2cf             | 
38244 2cf             | '------------------------------------------------------------------------------
38244 2cf             | ' Execute an IN interrupt transaction.
38244 2cf             | '------------------------------------------------------------------------------
38244 2cf             | ' On entry:
38244 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38244 2cf             | '   hpar2 - Address of the IN data buffer
38244 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38244 2cf             | ' On exit:
38244 2cf             | '   retval - the result of the operation.
38244 2cf             | '   hpar3 - the count of IN data bytes actually received.
38244 2cf             | '------------------------------------------------------------------------------
38244 2cf             | do_int_in
38244 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38248 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3824c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38250 2d2             | 
38250 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38254 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38258 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3825c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38260 2d6             | .retry
38260 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38264 2d7 00 F5 BF FD |                 call    #txn_in
38268 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3826c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38270 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38274 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38278 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3827c 2dd 54 00 B0 FD |                 call    #retry_wait
38280 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38284 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38288 2e0 D4 FF 9F FD |                 jmp     #.retry
3828c 2e1             | .commit
3828c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38290 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38294 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38298 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3829c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
382a0 2e6             | .post_ret
382a0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
382a4 2e7             | 
382a4 2e7             | 
382a4 2e7             | '------------------------------------------------------------------------------
382a4 2e7             | ' Resets the downstream hub port to FS
382a4 2e7             | '------------------------------------------------------------------------------
382a4 2e7             | dwnstream_reset
382a4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
382a8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
382ac 2e9             | 
382ac 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
382b0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
382b4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
382b8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
382bc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
382c0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
382c4 2ef             | 
382c4 2ef             | '------------------------------------------------------------------------------
382c4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
382c4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
382c4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
382c4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
382c4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
382c4 2ef             | '------------------------------------------------------------------------------
382c4 2ef             | ' On entry:
382c4 2ef             | '   hctwait - wait interval in sysclocks.
382c4 2ef             | ' On exit:
382c4 2ef             | '------------------------------------------------------------------------------
382c4 2ef             | poll_waitx
382c4 2ef 1A 92 63 FD |                 getct   hct2
382c8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
382cc 2f1             | .wait
382cc 2f1 FF 25 CC FB |                 jnct2   #.wait
382d0 2f2 2D 00 64 FD |                 ret
382d4 2f3             | 
382d4 2f3             | '------------------------------------------------------------------------------
382d4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
382d4 2f3             | '------------------------------------------------------------------------------
382d4 2f3             | ' On entry:
382d4 2f3             | '   retval - transaction response PID or error code.
382d4 2f3             | ' On exit:
382d4 2f3             | '------------------------------------------------------------------------------
382d4 2f3             | retry_wait
382d4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
382d8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
382dc 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
382e0 2f6 14 00 90 AD |         if_z    jmp     #.nak
382e4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
382e8 2f8 D8 FF BF FD |                 call    #poll_waitx
382ec 2f9             | .dec
382ec 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
382f0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
382f4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
382f8 2fc             | .nak
382f8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
382fc 2fd C4 FF BF FD |                 call    #poll_waitx
38300 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38304 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38308 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3830c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38310 302 2D 00 64 FD |                 ret
38314 303             | 
38314 303             | host_reset
38314 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38318 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3831c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3831c 305 BD 01 05 FF 
38320 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38324 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38328 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3832c 309             | ' Check to see if the system clock has been changed.
3832c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38330 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38334 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38338 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3833c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38340 30e 40 46 62 FD |                 dirl    dp
38344 30f             | 
38344 30f 28 02 64 FD |                 setq    #1
38348 310 80 00 80 FF 
3834c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38350 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38354 313             | .enable
38354 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38358 314 41 46 62 FD |                 dirh    dp
3835c 315 1F 36 63 FD |                 waitx   _1us_
38360 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38364 317             | 
38364 317             |                 ' Handle Port protection enable and startup delay
38364 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38368 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3836c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38370 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38374 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38378 31c             | 
38378 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3837c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38380 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38384 31f 00 00 04 F6 |                 mov     0-0, #0
38388 320             | .regloop
38388 320             | 
38388 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38388 320             | 
38388 320             | discon_entry
38388 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3838c 321             | 
3838c 321             |               
3838c 321             |         if HAVE_HIDPAD
3838c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38390 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38394 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38398 324 F7 01 68 FC |                 wrlong  #0,pb
3839c 325             |         end
3839c 325             |         if EMUPAD_MAX_PLAYER > 0
3839c 325             |         end
3839c 325             | 
3839c 325             |                 ' Fall through to disconnected loop
3839c 325             | 
3839c 325             | '-----------------------------------------------------------------------------------------------------------------
3839c 325             | ' Device connect handling (Section 7.1.7.3).
3839c 325             | '-----------------------------------------------------------------------------------------------------------------
3839c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3839c 325             | ' device to connect (Section 7.1.7.3).
3839c 325             | '-----------------------------------------------------------------------------------------------------------------
3839c 325             | disconnected
3839c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
383a0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
383a4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
383a8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
383ac 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
383b0 32a             |         if ACTIVITY_LED >= 0
383b0 32a             |         end
383b0 32a 22 A7 82 FA |                 rqpin   urx, dm
383b4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
383b8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
383bc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
383c0 32e             | .se1_test
383c0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
383c4 32f FC FE BF FD |                 call    #poll_waitx
383c8 330 22 A7 82 FA |                 rqpin   urx, dm
383cc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
383d0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
383d4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
383d8 334             | .se1            'SE1 is a fatal error condition
383d8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
383dc 335 E4 FE BF FD |                 call    #poll_waitx
383e0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
383e4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
383e8 338             | .connect_test                                           ' Test lines until stable J/K state seen
383e8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
383ec 339 22 A7 82 FA |                 rqpin   urx, dm
383f0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
383f4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
383f8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
383fc 33d             | connected
383fc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
38400 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38404 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38408 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3840c 341             | .set_pulse
3840c 341 1A 64 63 FD |                 getct   _pulse_time_
38410 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38414 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38414 343             | ' of 1ms and make a correction, if necessary.
38414 343             | '                mov     htmp, _1ms_
38414 343             | '                subs    htmp, iframe_delta
38414 343             | '                adds    _frame1ms_clks_, htmp
38414 343             | '                debug(udec(_frame1ms_clks_))
38414 343             | 
38414 343             |                 ' Fall through to idle/processing loop
38414 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38418 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3841c 345             | 
3841c 345             | hidle
3841c 345 22 A7 82 FA |                 rqpin   urx, dm
38420 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38424 347 98 00 90 CD |         if_c    jmp     #.se0_test
38428 348 24 06 70 FD |                 pollct3                         wc
3842c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
38430 34a 1A 94 63 FD |                 getct   hct3
38434 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38438 34c             | 
38438 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3843c 34d 00 70 E3 F8 |                 getbyte htmp
38440 34e             | 
38440 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38444 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38448 350 40 00 90 AD |         if_z    jmp     #.poll
3844c 351             | 
3844c 351             |         if _HAVE_GAMEPAD
3844c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
38450 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38454 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38458 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3845c 355 2C 00 90 AD |         if_z    jmp     #.poll
38460 356             |         end
38460 356             | 
38460 356             |         if HAVE_MOUSE
38460 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38464 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38468 358 20 00 90 AD |         if_z    jmp     #.poll
3846c 359             |         end
3846c 359             | 
3846c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
38470 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
38474 35b 14 00 90 AD |         if_z    jmp     #.poll
38478 35c             | 
38478 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3847c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38480 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38484 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38488 360             |         if HAVE_MOUSE
38488 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3848c 361             |         else
3848c 361             |         end
3848c 361             | 
3848c 361             | .poll
3848c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38490 362 2D EC 63 FD |                 call    pa
38494 363             | .skip_poll
38494 363             | 
38494 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38498 364             | 
38498 364             | .nopoll
38498 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3849c 365 44 00 90 AD |         if_z    jmp     #hsuspend
384a0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
384a4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
384a8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
384ac 369 1A 84 63 FD |                 getct   hr0
384b0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
384b4 36b             |         if ACTIVITY_LED >= 0
384b4 36b             |         end
384b4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
384b8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
384bc 36d 5C FF 9F FD |                 jmp     #hidle
384c0 36e             | ' Check for extended SE0 state on the bus
384c0 36e             | .se0_test
384c0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
384c4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
384c8 370 22 A7 82 FA |                 rqpin   urx, dm
384cc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
384d0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
384d4 373 24 F6 BF FD |                 call    #wait_txn_ok
384d8 374 00 00 80 FF 
384dc 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
384e0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
384e0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
384e4 377             | 
384e4 377             | hsuspend
384e4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
384e8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
384ec 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
384f0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
384f4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
384f8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
384fc 37d             | 
384fc 37d             |                 ' Fall through to resume wait loop
384fc 37d             | 
384fc 37d             | hwait_resume
384fc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
38500 37e 02 86 47 F0 |                 shr     hr1, #2
38504 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38508 380             |         if ACTIVITY_LED >= 0
38508 380             |         end
38508 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3850c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38510 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38514 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38518 384 18 00 90 AD |         if_z    jmp     #.resume
3851c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
38520 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38524 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38528 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3852c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
38530 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38534 38b             | .resume
38534 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38538 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3853c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
38540 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38544 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38548 390 1F 70 63 FD |                 waitx   htmp
3854c 391 22 07 28 FC |                 wypin   #OUT_J, dm
38550 392 01 70 47 F0 |                 shr     htmp, #1
38554 393 1F 70 63 FD |                 waitx   htmp
38558 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3855c 395 1A 92 62 FD |                 getct   iframe_ct_base
38560 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38564 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38568 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3856c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
38570 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
38574 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38578 39c             | 
38578 39c             | '------------------------------------------------------------------------------
38578 39c             | ' Send preamble to enable low-speed HUB ports
38578 39c             | '------------------------------------------------------------------------------
38578 39c             | ' On entry:
38578 39c             | ' On exit:
38578 39c             | '   USB baud rate set to low-speed
38578 39c             | '------------------------------------------------------------------------------
38578 39c             | utx_pre
38578 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3857c 39d 40 46 62 FD |                 dirl    dp
38580 39e 28 02 64 FD |                 setq    #1
38584 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38588 3a0 58 44 62 FD |                 drvl    dm
3858c 3a1 59 46 62 FD |                 drvh    dp
38590 3a2             | 
38590 3a2 1E 00 00 FF 
38594 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38598 3a4             | 
38598 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3859c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
385a0 3a6 28 02 64 3D |         if_nc   setq    #1
385a4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
385a8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
385ac 3a9             | .l1
385ac 3a9             | 
385ac 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
385b0 3aa 40 46 62 FD |                 dirl    dp
385b4 3ab 28 02 64 FD |                 setq    #1
385b8 3ac 80 00 80 FF 
385bc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
385c0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
385c4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
385c8 3b0 41 46 62 FD |                 dirh    dp
385cc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
385d0 3b2             | 
385d0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
385d4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
385d8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
385dc 3b5             | 
385dc 3b5             | hlut_end
385dc 3b5             |                 fit     $400
385dc 3b5             |                 orgh
385dc                 | if OVERLAP_MEMORY
385dc                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
385dc                 | end
385dc                 | '------------------------------------------------------------------------------
385dc                 | ' Routines called from cog space.
385dc                 | '------------------------------------------------------------------------------
385dc                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
385dc                 | '------------------------------------------------------------------------------
385dc                 | 
385dc                 | '------------------------------------------------------------------------------
385dc                 | ' USB host cog initialization.
385dc                 | '------------------------------------------------------------------------------
385dc                 | usb_host_init
385dc                 |                 ' Initialize buffer pointers
385dc                 |         if OVERLAP_MEMORY
385dc                 |         else
385dc     40 15 B0 FE |                 loc     pb, #hid_descr
385e0                 |         end
385e0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
385e4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
385e4                 |                 {
385e4                 |                 }
385e4                 |         
385e4                 |                 {
385e4                 |                 }
385e4                 |                 'loc     pb,#hkbd_report
385e4                 |                 'mov     hkbd_report_p,pb
385e4                 | 
385e4     08 1D B0 FE |                 loc     pb, #hub_descr
385e8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
385ec     1D 1D B0 FE |                 loc     pb, #urx_buff
385f0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
385f4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
385f8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
385fc     9F 1D B0 FE |                 loc     pb, #con_desc_buff
38600     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38604     18 15 B0 FE |                 loc     pb, #usb_cache_start
38608     F7 55 02 F6 |                 mov     cache_start_p, pb
3860c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38610     F7 57 02 F6 |                 mov     cache_end_p, pb
38614                 | 
38614                 |         if ERROR_LED >= 0
38614                 |         end
38614                 | 
38614                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38614                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38614                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38614                 | ' Configure and enable the Serial Host USB port.
38614     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38618                 | 
38618                 | '------------------------------------------------------------------------------
38618                 | ' Timing calculations happen before any interrupt(s) are enabled.
38618                 | '------------------------------------------------------------------------------
38618                 | ' On entry:
38618                 | '   htmp - current CLKFREQ value.
38618                 | '------------------------------------------------------------------------------
38618                 | hinit_usb_timings
38618                 | '                getct   htmp2
38618     B8 59 02 F6 |                 mov     save_sysclk, htmp
3861c     8D 5B 80 FF 
38620     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38624     18 30 63 FD |                 getqx   _12Mbps_
38628     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3862c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
38630     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38634     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38638     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3863c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
38640     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38644     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38648     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3864c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
38650     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38654     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38658     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3865c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
38660     80 00 00 FF 
38664     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38668     18 2C 63 FD |                 getqx   _var_64_lower_
3866c     19 2E 63 FD |                 getqy   _var_64_upper_
38670     28 2C 63 FD |                 setq    _var_64_lower_
38674     65 CD 1D FF 
38678     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3867c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38680     01 00 00 FF 
38684     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38688     18 2C 63 FD |                 getqx   _var_64_lower_
3868c     19 2E 63 FD |                 getqy   _var_64_upper_
38690     28 2C 63 FD |                 setq    _var_64_lower_
38694     A1 07 00 FF 
38698     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3869c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
386a0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
386a4     09 36 57 F0 |                 shr     _1us_, #9               wc
386a8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
386ac     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
386b0     18 38 63 FD |                 getqx   _10us_
386b4     09 38 57 F0 |                 shr     _10us_, #9              wc
386b8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
386bc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
386c0     18 3A 63 FD |                 getqx   _33us_
386c4     09 3A 57 F0 |                 shr     _33us_, #9              wc
386c8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
386cc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
386d0     18 3C 63 FD |                 getqx   _txn_err_
386d4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
386d8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
386dc     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
386e0     18 3E 63 FD |                 getqx   _500us_
386e4     09 3E 57 F0 |                 shr     _500us_, #9             wc
386e8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
386ec     01 00 00 FF 
386f0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
386f4     18 40 63 FD |                 getqx   _txn_ok_ls_
386f8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
386fc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
38700     01 00 00 FF 
38704     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38708     18 42 63 FD |                 getqx   _txn_ok_fs_
3870c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38710     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38714     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38718     05 00 00 FF 
3871c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
38720     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38724     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38728     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3872c     1C 00 00 FF 
38730     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38734     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38738     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3873c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
38740     00 00 00 FF 
38744     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38748     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3874c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
38750     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38754     04 00 00 FF 
38758     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3875c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
38760     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38764     8D 5B 00 FF 
38768     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3876c     18 4C 63 FD |                 getqx   _preamble_wait_
38770     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
38774     01 00 00 FF 
38778     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3877c     18 2C 63 FD |                 getqx   _var_64_lower_
38780     19 2E 63 FD |                 getqy   _var_64_upper_
38784     28 2C 63 FD |                 setq    _var_64_lower_
38788     01 00 00 FF 
3878c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38790     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38794     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38798     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3879c     FF FF 7F FF 
387a0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
387a4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
387a8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
387ac     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
387b0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
387b4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
387b8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
387bc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
387c0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
387c4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
387c8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
387cc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
387d0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
387d4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
387d8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
387dc     A7 59 03 F6 |                 mov     _8ms_, _1ms_
387e0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
387e4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
387e8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
387ec     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
387f0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
387f4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
387f8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
387fc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
38800     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38804     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38808     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3880c                 | '        _ret_   mov     _1sec_, save_sysclk
3880c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3880c                 | '                ret
3880c                 | {
3880c                 | }
3880c                 | 
3880c                 | '------------------------------------------------------------------------------
3880c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3880c                 | ' one. If it is, start the task progression that will configure the device for
3880c                 | ' use.
3880c                 | '------------------------------------------------------------------------------
3880c                 | ' On entry:
3880c                 | '   hconfig_base - start address of the cached config descriptor chain.
3880c                 | ' On exit:
3880c                 | '------------------------------------------------------------------------------
3880c                 | hparse_con_desc
3880c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38810     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38814     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38818     4E 70 FF F9 |                 movbyts htmp,#%%1032
3881c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
38820                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
38820                 | 
38820     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38824     6E ED 03 F1 |                 add     pa, hconfig_base
38828     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3882c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3882c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3882c                 | ' that defines a keyboard and/or mouse.
3882c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
38830                 | .next_intf
38830     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38834     BC 01 90 3D |         if_ae   jmp     #hset_config
38838     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3883c     75 F3 03 F1 |                 add     ptrb, hnext_desc
38840     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38844     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38848     0C 00 90 AD |         if_z    jmp     #.intf
3884c     80 71 C7 FA |                 rdbyte  htmp, ptrb
38850     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38854     D8 FF 9F FD |                 jmp     #.next_intf
38858                 | .intf
38858     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3885c     00 90 07 F6 |                 mov     hpar3, #0
38860     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38864     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38868     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3886c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38870                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38870                 | 
38870                 | .endp
38870     80 71 C7 FA |                 rdbyte  htmp, ptrb
38874     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38878     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3887c     78 00 90 3D |         if_ae   jmp     #.get_device
38880     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38884     75 F3 03 F1 |                 add     ptrb, hnext_desc
38888     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3888c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38890     64 00 90 AD |         if_z    jmp     #.get_device
38894     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38898     04 00 90 AD |         if_z    jmp     #.get_ep
3889c     D0 FF 9F FD |                 jmp     #.endp
388a0                 | .get_ep
388a0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
388a4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
388a8     0F 86 67 F0 |                 shl     hr1, #8 + 7
388ac     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
388b0     3F 00 00 FF 
388b4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
388b8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
388bc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
388c0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
388c4     00 90 0F F2 |                 cmp     hpar3, #0               wz
388c8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
388cc     A0 FF 9F FD |                 jmp     #.endp
388d0                 | .in_ep
388d0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
388d4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
388d8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
388d8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
388dc     C2 89 DB F8 |                 setbyte hr2, hr0, #3
388e0     8C FF 9F FD |                 jmp     #.endp
388e4                 | .out_ep
388e4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
388e8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
388ec                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
388ec     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
388f0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
388f4     78 FF 9F FD |                 jmp     #.endp
388f8                 | 
388f8                 | .get_device
388f8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
388fc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
38900     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38904     68 00 90 AD |         if_z    jmp     #.gamepad
38908     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3890c     AC 00 90 AD |         if_z    jmp     #.hub
38910     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38914     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38918     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3891c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38920     4C 00 90 AD |         if_z    jmp     #.gamepad
38924     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38928     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3892c                 | .keyboard
3892c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
38930                 |         if HAVE_MOUSE
38930     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38934                 |         else
38934                 |         end
38934     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38938     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3893c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38940     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38944     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38948     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3894c                 |                 'debug(udec(kb_intf_num))
3894c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3894c     E0 FE 9F FD |                 jmp     #.next_intf
38950                 | if HAVE_MOUSE
38950                 | .mouse
38950     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38954     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38958     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3895c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38960     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38964                 |                 'getbyte ms_interval, hr2, #3
38964     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38968     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3896c                 |                 'debug(udec(kb_intf_num))
3896c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3896c     C0 FE 9F FD |                 jmp     #.next_intf
38970                 | end
38970                 | .gamepad
38970     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38974     C7 71 63 F5 |                 xor     htmp, hpar2
38978     3F 00 00 FF 
3897c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38980     AC FE 9F AD |         if_z    jmp     #.next_intf
38984                 |         if HAVE_MOUSE
38984     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38988     C7 71 63 F5 |                 xor     htmp, hpar2
3898c     3F 00 00 FF 
38990     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38994     98 FE 9F AD |         if_z    jmp     #.next_intf
38998                 |         end
38998     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3899c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
389a0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
389a4                 | 
389a4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
389a8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
389ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389b0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
389b4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
389b8                 |                 'debug(udec(gp_intf_num))
389b8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
389b8     74 FE 9F FD |                 jmp     #.next_intf
389bc                 | .hub
389bc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
389c0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
389c4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
389c8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
389cc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
389d0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
389d4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
389d8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
389dc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
389e0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
389e4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389e8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
389ec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
389f0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
389f0     3C FE 9F FD |                 jmp     #.next_intf
389f4                 | 
389f4                 | '------------------------------------------------------------------------------
389f4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
389f4                 | ' it according to its function, or functions. In the case of this boot protocol
389f4                 | ' keyboard/mouse class driver:
389f4                 | ' - SetConfiguration(config_num)
389f4                 | ' - SetProtocol(boot)
389f4                 | ' - SetIdle(indefinite)
389f4                 | ' - Enter the device interrupt IN polling task stage.
389f4                 | '------------------------------------------------------------------------------
389f4                 | ' On entry:
389f4                 | ' On exit:
389f4                 | '------------------------------------------------------------------------------
389f4                 | hset_config
389f4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
389f4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
389f4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
389f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389fc     00 00 0C F2 |                 cmp     0-0, #0                 wz
38a00     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38a04                 |         if HAVE_MOUSE
38a04     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38a08                 |         end
38a08     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38a0c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38a10                 | .set_config
38a10     6C 0E D0 FE |                 loc     ptra, #set_config
38a14     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38a18     6E ED 03 F1 |                 add     pa, hconfig_base
38a1c     F6 8D C3 FA |                 rdbyte  hpar1, pa
38a20     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38a24     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38a28     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38a2c     A0 02 A0 FD |                 call    #control_write
38a30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a34     2D 00 64 5D |         if_nz   ret
38a38                 | .kbd_config
38a38     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38a3c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38a40                 | 
38a40     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38a44     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38a48     3F 00 00 FF 
38a4c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a50     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38a54                 | 
38a54     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38a58     34 0E D0 FE |                 loc     ptra, #set_protocol
38a5c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38a60     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38a64     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38a68     A0 02 A0 FD |                 call    #control_write
38a6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a70     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38a74     E4 02 90 5D |         if_nz   jmp     #.notify_client
38a78     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38a7c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38a80     30 03 B0 FD |                 call    #hset_idle
38a84                 |                 'cmp     retval, #PID_ACK        wz
38a84                 |         'if_nz   mov     hkbd_ep_addr, #0
38a84                 |         'if_nz   jmp     #.notify_client
38a84     A8 99 02 F6 |                 mov     hctwait, _2ms_
38a88     EF 02 A0 FD |                 call    #poll_waitx
38a8c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38a90     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38a94     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38a98     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38a9c     2C 03 B0 FD |                 call    #hset_kbdled_report
38aa0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38aa4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38aa8     B0 02 90 5D |         if_nz   jmp     #.notify_client
38aac     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38ab0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38ab4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38ab8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38abc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
38ac0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38ac4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38ac8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38acc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
38ad0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38ad4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38ad8                 |         if !!HAVE_MOUSE
38ad8                 |         end
38ad8                 | 
38ad8                 | .mouse_config
38ad8                 | if HAVE_MOUSE
38ad8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38adc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38ae0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38ae4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38ae8     3F 00 00 FF 
38aec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38af0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38af4                 | 
38af4                 |                 debug("mouse passed addr check")
38af4                 | 
38af4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38af8     00 00 80 FF 
38afc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38b00     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38b04     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b08     55 02 A0 FD |                 call    #control_read
38b0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b10     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38b14     44 02 90 5D |         if_nz   jmp     #.notify_client
38b18     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38b1c     56 01 00 F6 |                 mov     0-0, total_data
38b20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b24                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38b24                 | 
38b24     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38b28     64 0D D0 FE |                 loc     ptra, #set_protocol
38b2c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38b30     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38b34     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38b38     A0 02 A0 FD |                 call    #control_write
38b3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b40     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38b44     14 02 90 5D |         if_nz   jmp     #.notify_client
38b48                 |                 debug("mouse passed SetProtocol")
38b48     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38b4c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38b50     60 02 B0 FD |                 call    #hset_idle
38b54                 |                 'cmp     retval, #PID_ACK        wz
38b54                 |         'if_nz   mov     hmouse_ep_addr, #0
38b54                 |         'if_nz   jmp     #.notify_client
38b54                 |                 debug("mouse passed SetIdle")
38b54     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38b58     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b5c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b60     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38b64     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38b68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38b6c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38b70     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38b74     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38b78     3F 00 00 FF 
38b7c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38b80     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38b84     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38b88     D0 01 90 FD |                 jmp     #.notify_client
38b8c                 | end
38b8c                 | .gamepad_config
38b8c                 | if _HAVE_GAMEPAD
38b8c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38b90     00 00 0C F2 |                 cmp     0-0, #0                 wz
38b94     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38b98     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38b9c     00 70 03 F6 |                 mov     htmp, 0-0
38ba0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38ba4     3F 00 00 FF 
38ba8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38bac     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38bb0                 | 
38bb0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38bb4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38bb8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38bbc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38bc0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38bc4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38bc8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38bcc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38bd0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38bd4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38bd8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38bdc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38be0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38be4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38be8                 | 
38be8                 |                 if EMUPAD_MAX_PLAYER > 0
38be8                 |                 
38be8                 | .rule_loop           
38be8                 |                 end
38be8                 | 
38be8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38bec     5C 00 90 AD |         if_e    jmp     #.xinput
38bf0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38bf4     00 70 03 F6 |                 mov     htmp,0-0
38bf8     01 A6 02 FF 
38bfc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38c00     7C 00 90 AD |         if_e    jmp     #.ps3
38c04                 | 
38c04     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38c08     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38c0c     00 00 80 5F 
38c10     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38c14     03 00 80 AF 
38c18     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38c1c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38c20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38c24     55 02 A0 FD |                 call    #control_read
38c28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c2c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38c30     00 00 04 56 |         if_nz   mov     0-0, #0
38c34     24 01 90 5D |         if_nz   jmp     #.notify_client
38c38     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38c3c     56 01 00 F6 |                 mov     0-0, total_data
38c40     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38c44                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38c44                 | 
38c44     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38c48     10 01 90 FD |                 jmp     #.notify_client
38c4c                 | .xinput
38c4c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38c50     2D EF 03 F6 |                 mov     pb,hdev_port
38c54     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38c58     03 EE 27 F3 |                 fle     pb,#3
38c5c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38c60     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38c64                 | 
38c64     03 B0 06 F6 |                 mov     pkt_data, #3
38c68     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38c6c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38c70     5A 00 A0 FD |                 call    #txn_out
38c74     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38c78                 | 
38c78     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38c7c     DC 00 90 FD |                 jmp     #.notify_client
38c80                 | .ps3
38c80     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38c84     2D EF 03 F6 |                 mov     pb,hdev_port
38c88     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38c8c     04 EE 27 F3 |                 fle     pb,#4
38c90     F7 EF C3 F9 |                 decod   pb
38c94     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38c98                 | 
38c98     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38c9c     00 0C D0 FE |                 loc     ptra, #set_report
38ca0     01 00 80 FF 
38ca4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38ca8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38cac     03 61 5C FC |                 wrword  #48, ptra[wLength]
38cb0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38cb4     A0 02 A0 FD |                 call    #control_write
38cb8                 | 
38cb8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38cbc     E0 0B D0 FE |                 loc     ptra, #set_report
38cc0     01 00 80 FF 
38cc4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38cc8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38ccc     03 09 5C FC |                 wrword  #4, ptra[wLength]
38cd0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38cd4     A0 02 A0 FD |                 call    #control_write
38cd8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38cdc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38ce0     00 00 04 56 |         if_nz   mov     0-0, #0
38ce4     74 00 90 5D |         if_nz   jmp     #.notify_client
38ce8                 | 
38ce8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38cec     6C 00 90 FD |                 jmp     #.notify_client
38cf0                 | end
38cf0                 | 
38cf0                 | .hub_config
38cf0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38cf4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38cf8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38cfc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38d00     3F 00 00 FF 
38d04     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38d08     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38d0c                 | 
38d0c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38d10     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38d14     26 EF 03 F6 |                 mov     pb, hub_descr_p
38d18     55 02 A0 FD |                 call    #control_read
38d1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d20     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38d24     34 00 90 5D |         if_nz   jmp     #.notify_client
38d28                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38d28                 | 
38d28     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38d2c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38d30     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38d34                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38d34                 | .pwr_loop
38d34     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38d38     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38d3c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38d40     A0 02 A0 FD |                 call    #control_write
38d44     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38d48                 | 
38d48     B1 99 02 F6 |                 mov     hctwait, _500ms_
38d4c     B0 99 02 F1 |                 add     hctwait, _100ms_
38d50     EF 02 A0 FD |                 call    #poll_waitx
38d54                 | 
38d54     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38d58     00 00 90 FD |                 jmp     #.notify_client
38d5c                 | 
38d5c                 | .notify_client
38d5c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38d60     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38d64                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38d64                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38d64     2D 00 64 FD |                 ret
38d68                 | 
38d68                 | '------------------------------------------------------------------------------
38d68                 | ' Initialize the keyboard/mouse data area to start-up values.
38d68                 | '------------------------------------------------------------------------------
38d68                 | ' On entry:
38d68                 | ' On exit:
38d68                 | '------------------------------------------------------------------------------
38d68                 | init_kbdm_data
38d68     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38d6c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38d70                 | 
38d70     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38d74     2B ED 03 F6 |                 mov     pa, cache_end_p
38d78                 | .loop
38d78     61 01 4C FC |                 wrbyte  #0, ptra++
38d7c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38d80     F4 FF 9F CD |         if_b    jmp     #.loop
38d84                 |         
38d84                 |         if EMUPAD_MAX_PLAYER > 0
38d84                 |         end
38d84                 | 
38d84                 | 
38d84     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38d88                 | .regloop
38d88     00 EC 8F F9 |                 altd    pa
38d8c     00 00 04 F6 |                 mov     0-0, #0
38d90     01 EC 07 F1 |                 add     pa, #1
38d94     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38d98     EC FF 9F 5D |         if_nz   jmp     #.regloop
38d9c                 | 
38d9c     E1 E1 61 FF 
38da0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38da4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38da8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38dac     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38db0                 | 
38db0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38db4                 | 
38db4                 | '------------------------------------------------------------------------------
38db4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38db4                 | ' function.
38db4                 | '------------------------------------------------------------------------------
38db4                 | ' On entry:
38db4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38db4                 | '   hpar2 - index number of the target interface.
38db4                 | ' On exit:
38db4                 | '------------------------------------------------------------------------------
38db4                 | hset_idle
38db4     A8 99 02 F6 |                 mov     hctwait, _2ms_
38db8     EF 02 A0 FD |                 call    #poll_waitx
38dbc     D8 0A D0 FE |                 loc     ptra, #set_idle
38dc0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38dc4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38dc8     A0 02 80 FD |                 jmp     #control_write
38dcc                 | 
38dcc                 | '------------------------------------------------------------------------------
38dcc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38dcc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38dcc                 | '------------------------------------------------------------------------------
38dcc                 | ' On entry:
38dcc                 | '   ep_addr_pid - device address and enpoint for the request.
38dcc                 | ' On exit:
38dcc                 | '   retval - transaction result.
38dcc                 | '------------------------------------------------------------------------------
38dcc                 | hset_kbdled_report
38dcc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38dd0     CC 0A D0 FE |                 loc     ptra, #set_report
38dd4     01 00 80 FF 
38dd8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38ddc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38de0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38de4     27 EF 03 F6 |                 mov     pb, urx_buff_p
38de8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38dec     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38df0                 | 
38df0                 | '------------------------------------------------------------------------------
38df0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38df0                 | '------------------------------------------------------------------------------
38df0                 | ' On entry:
38df0                 | ' On exit:
38df0                 | '------------------------------------------------------------------------------
38df0                 | hget_kbd_in_report
38df0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38df4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38df8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38dfc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38e00     CF 02 A0 FD |                 call    #do_int_in
38e04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e08     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e0c                 | 
38e0c     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e10     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e14                 | 
38e14     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38e18     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38e1c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38e20     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38e24                 | 
38e24     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38e28     18 00 B0 FD |                 call    #hkbd_compare
38e2c                 |         if EMUPAD_MAX_PLAYER > 0
38e2c                 |         end
38e2c                 | 
38e2c                 | .led_check
38e2c     3B 71 03 F6 |                 mov     htmp, kb_led_states
38e30     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38e34     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38e38     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38e3c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38e40     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38e44                 | 
38e44                 | '------------------------------------------------------------------------------
38e44                 | ' Compare current and previous keyboard data buffers for keypress changes.
38e44                 | '------------------------------------------------------------------------------
38e44                 | hkbd_compare
38e44     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38e48     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38e4c     61 73 07 FB |                 rdlong  htmp1, ptra++
38e50     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38e54     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38e58     61 73 07 FB |                 rdlong  htmp1, ptra++
38e5c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38e60     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38e64     2D 00 64 AD |         if_z    ret
38e68                 | 
38e68     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38e6c                 | 
38e6c                 |                 ' Handle modifiers
38e6c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38e70     00 87 C7 FA |                 rdbyte  hr1, ptra
38e74     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38e78     63 86 63 FD |                 mergew  hr1
38e7c     08 EC 07 F6 |                 mov     pa,#8
38e80                 | .modloop
38e80     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38e84     E8 8C 07 F6 |                 mov     hpar1,#$E8
38e88     F6 8D 83 F1 |                 sub     hpar1,pa
38e8c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38e90     FB ED 6F FB |                 djnz    pa,#.modloop
38e94                 | 
38e94     6F E0 75 FD | .release        modc    _set    wc
38e98                 |                 'alts    hdev_port, #hid_report_p
38e98                 |                 'mov     ptra, hid_report_p
38e98     02 F0 07 F1 |                 add     ptra, #2
38e9c     06 EC 07 F6 |                 mov     pa, #6
38ea0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38ea4     20 00 90 AD |         if_z    jmp     #.rl3
38ea8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38eac     02 F2 07 F1 |                 add     ptrb, #2
38eb0     06 EE 07 F6 |                 mov     pb, #6
38eb4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38eb8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38ebc     08 00 90 AD |         if_z    jmp     #.rl3
38ec0     FC EF 6F FB |                 djnz    pb, #.rl2
38ec4     68 00 B0 FD |                 call    #hkbd_translate
38ec8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38ecc                 | 
38ecc     00 90 07 F6 |                 mov     hpar3, #0
38ed0     1F 90 27 F4 |                 bith    hpar3, #31
38ed4                 | 
38ed4     6F 00 74 FD | .press          modc    _clr    wc
38ed8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38edc     02 F0 07 F1 |                 add     ptra, #2
38ee0     06 EC 07 F6 |                 mov     pa, #6
38ee4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38ee8     20 00 90 AD |         if_z    jmp     #.pl3
38eec     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38ef0     02 F2 07 F1 |                 add     ptrb, #2
38ef4     06 EE 07 F6 |                 mov     pb, #6
38ef8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38efc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38f00     08 00 90 AD |         if_z    jmp     #.pl3
38f04     FC EF 6F FB |                 djnz    pb, #.pl2
38f08     24 00 B0 FD |                 call    #hkbd_translate
38f0c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38f10                 | 
38f10     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38f14     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38f18     28 02 64 FD |                 setq #1
38f1c     61 73 07 FB |                 rdlong  htmp1, ptra++
38f20     28 02 64 FD |                 setq #1
38f24     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38f28     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38f2c                 | 
38f2c     2D 00 64 FD |                 ret
38f30                 | 
38f30                 | '------------------------------------------------------------------------------
38f30                 | ' Translate keyboard scancode to ASCII
38f30                 | '------------------------------------------------------------------------------
38f30                 | ' On entry:
38f30                 | '   hpar1 - scancode
38f30                 | '   hpar2 - key modifiers state
38f30                 | '       c - pressed (0) or released (1) flag
38f30                 | ' On exit:
38f30                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38f30                 | '               30..17 = unused
38f30                 | '                   18 = scroll-lock state 
38f30                 | '                   17 = caps-lock state
38f30                 | '                   16 = num-lock state 
38f30                 | '                15..8 = key modifiers state
38f30                 | '                 7..0 = scancode
38f30                 | '------------------------------------------------------------------------------
38f30                 | hkbd_translate
38f30     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38f34     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38f38     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38f3c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38f40     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38f44     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38f48                 | 
38f48                 |         if EMUPAD_MAX_PLAYER > 0
38f48                 | 
38f48                 |         if EMUPAD_BT0_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT1_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT2_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT3_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT4_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT5_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT6_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT7_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT8_BIT >= 0
38f48                 |         end
38f48                 |         if EMUPAD_BT9_BIT >= 0
38f48                 |         end
38f48                 | 
38f48                 |         end
38f48     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38f4c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38f50     1F 8C 47 F4 |                 bitc    hpar1, #31
38f54                 |         if KEYQUEUE_SIZE > 0
38f54     C4 09 B0 FE |                 loc pb,#keyq_head
38f58     F7 71 E3 FA |                 rdword htmp,pb
38f5c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38f60     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38f64     B8 75 03 F6 |                 mov htmp2,htmp
38f68     04 74 07 FA |                 mul htmp2,#4
38f6c     F7 75 03 F1 |                 add htmp2,pb
38f70     02 74 07 F1 |                 add htmp2,#2
38f74     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38f78     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38f7c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38f80     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38f84                 |         end
38f84     2D 00 7C FD |                 ret wcz
38f88                 | 
38f88                 | if HAVE_MOUSE
38f88                 | '------------------------------------------------------------------------------
38f88                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38f88                 | '------------------------------------------------------------------------------
38f88                 | ' On entry:
38f88                 | ' On exit:
38f88                 | '------------------------------------------------------------------------------
38f88                 | hget_mouse_in_report
38f88     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38f8c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38f90     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38f94     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38f98     CF 02 A0 FD |                 call    #do_int_in
38f9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38fa0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38fa4                 | 
38fa4     00 90 0F F2 |                 cmp     hpar3, #0               wz
38fa8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38fac                 | 
38fac     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38fb0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38fb4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38fb8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38fbc                 | 
38fbc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38fc0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38fc4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38fc8     01 90 87 31 |         if_ae   sub     hpar3, #1
38fcc                 | 
38fcc     40 09 90 FE |                 loc     pa, #mouse_limits
38fd0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38fd4                 | 
38fd4                 |                 ' load xacc,yacc,zacc
38fd4     28 04 64 FD |                 setq    #3-1
38fd8     80 87 07 FB |                 rdlong  hr1,ptrb
38fdc                 |                 ' load limits and outptr
38fdc     28 04 64 FD |                 setq    #3-1
38fe0     F6 73 03 FB |                 rdlong  htmp1,pa
38fe4                 | 
38fe4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38fe8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38fec     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38ff0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38ff4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38ff8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38ffc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
39000     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39004                 |               
39004                 | 
39004     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
39008     07 70 67 F7 |                 signx   htmp, #7
3900c     B8 87 03 F1 |                 add     hr1,htmp
39010     00 72 0F F2 |                 cmp     htmp1,#0 wz
39014     B9 87 63 53 |         if_ne   fles    hr1,htmp1
39018     00 86 47 53 |         if_ne   fges    hr1,#0
3901c                 | 
3901c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
39020     07 70 67 F7 |                 signx   htmp, #7
39024     B8 89 03 F1 |                 add     hr2,htmp
39028     00 74 0F F2 |                 cmp     htmp2,#0 wz
3902c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
39030     00 88 47 53 |         if_ne   fges    hr2,#0
39034                 |                 
39034                 | 
39034     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
39038     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3903c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
39040     B8 8B 03 A1 |         if_z    add     hr3,htmp
39044                 | 
39044     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39048     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3904c                 | 
3904c                 |                 ' write back accumulators
3904c     28 04 64 FD |                 setq    #3-1
39050     80 87 67 FC |                 wrlong  hr1,ptrb
39054                 |                 ' if outptr set, write X/Y words
39054     00 76 0F F2 |                 cmp htmp3,#0                    wz
39058     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3905c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
39060     2D 00 64 FD |                 ret
39064                 | end
39064                 | 
39064                 | '------------------------------------------------------------------------------
39064                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39064                 | '------------------------------------------------------------------------------
39064                 | ' On entry:
39064                 | ' On exit:
39064                 | '------------------------------------------------------------------------------
39064                 | if _HAVE_GAMEPAD
39064                 | hget_gp_in_report
39064     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39068     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3906c                 | 
3906c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39070     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
39074     00 90 E3 F8 |                 getbyte hpar3
39078     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3907c     CF 02 A0 FD |                 call    #do_int_in
39080     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39084     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39088                 | 
39088     00 90 0F F2 |                 cmp     hpar3, #0               wz
3908c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39090                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39090                 | 
39090     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
39094     00 70 E3 F8 |                 getbyte htmp                            ' |
39098     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3909c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
390a0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
390a4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
390a8     B8 01 C0 F8 |                 setbyte htmp                            ' |
390ac                 | 
390ac                 | ' Note: the following code compares the current and previous reports
390ac                 | ' and process the data if there are changes to ease the debug output.
390ac                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
390ac                 | ' gpPreReport buffer.
390ac                 | 
390ac                 |                 ' ----- start of block to remove
390ac                 |                 {
390ac                 |                 }
390ac                 |                 ' ----- end of block to remove
390ac     F4 04 90 FE |                 loc pa,#hpad_translate
390b0     2A EC 63 FD |                 push pa
390b4                 | 
390b4                 |                 ' FALL THROUGH !!!!
390b4                 | 
390b4                 | '------------------------------------------------------------------------------
390b4                 | ' Decode controller report
390b4                 | '------------------------------------------------------------------------------
390b4                 | hid_decode
390b4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
390b4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
390b8     00 04 00 FF 
390bc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
390c0                 | 
390c0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
390c4                 | 
390c4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
390c8     00 2A E3 F8 |                 getbyte hidr_type
390cc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
390d0     34 02 90 AD |         if_z    jmp     #hpad_xinput
390d4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
390d8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
390dc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
390e0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
390e4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
390e8                 |                 
390e8                 | 
390e8                 | '------------------------------------------------------------------------------
390e8                 | ' Handle HID controller (or mouse now
390e8                 | ' On entry:
390e8                 | '   ptrb - controller report
390e8                 | '------------------------------------------------------------------------------
390e8                 | hpad_hid
390e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
390ec     F7 F1 03 F6 |                 mov     ptra, pb
390f0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
390f4     00 EC 03 F6 |                 mov     pa, 0-0
390f8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
390f8     19 2A 3B FF 
390fc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
39100                 | 
39100                 | .next
39100     00 EC 5F F2 |                 cmps    pa, #0      wcz
39104     2D 00 7C ED |         if_be   ret     wcz
39108                 | 
39108     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3910c     01 EC 87 F1 |                 sub     pa, #1
39110     00 8E 07 F6 |                 mov     hpar2, #0
39114                 | 
39114     C6 71 03 F6 |                 mov     htmp, hpar1
39118     03 70 07 F5 |                 and     htmp, #$03
3911c     01 70 0F F2 |                 cmp     htmp, #1    wz
39120     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39124     07 8E 67 A7 |         if_z    signx   hpar2,#7
39128     01 EC 87 A1 |         if_z    sub     pa, #1
3912c     02 70 0F F2 |                 cmp     htmp, #2    wz
39130     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39134     0F 8E 67 A7 |         if_z    signx   hpar2,#15
39138     02 EC 87 A1 |         if_z    sub     pa, #2
3913c     03 70 0F F2 |                 cmp     htmp, #3    wz
39140     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39144     04 EC 87 A1 |         if_z    sub     pa, #4
39148                 | 
39148     FC 8C 07 F5 |                 and     hpar1, #$FC
3914c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3914c                 | 
3914c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
39150     0C 01 90 AD |         if_z    jmp     #.report_id
39154     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
39158     24 01 90 AD |         if_z    jmp     #.usage_page
3915c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
39160     2C 01 90 AD |         if_z    jmp     #.usage
39164     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
39168     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3916c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
39170     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
39174     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
39178     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3917c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
39180     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
39184     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
39188     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3918c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
39190     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
39194     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
39198     64 FF 9F 5D |         if_nz   jmp     #.next
3919c                 | 
3919c     D8 1D A7 FB |                 tjf     hidr_state,#.next
391a0                 | 
391a0     03 8E 07 F5 |                 and     hpar2, #$03
391a4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
391a8     18 00 90 5D |         if_nz   jmp     #.skip
391ac                 | 
391ac     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
391b0     20 00 90 AD |         if_z    jmp     #.axes
391b4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
391b8     5C 00 90 AD |         if_z    jmp     #.hats
391bc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
391c0     70 00 90 AD |         if_z    jmp     #.buttons
391c4                 | .skip
391c4     8F 71 03 F6 |                 mov     htmp, hidr_size
391c8     90 71 03 FA |                 mul     htmp, hidr_count
391cc     B8 23 03 F1 |                 add     hidr_offset, htmp
391d0     2C FF 9F FD |                 jmp     #.next
391d4                 | .axes
391d4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
391d4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
391d8     90 87 03 F6 |                 mov     hr1, hidr_count
391dc                 | .l1
391dc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
391e0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
391e4     04 03 B0 FD |                 call    #hpad_getbits
391e8     64 03 B0 FD |                 call    #hpad_normalize
391ec     06 84 1F F2 |                 cmp     hr0, #6         wcz
391f0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
391f4     00 88 43 C8 |         if_b    getnib  hr2
391f8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
391fc     5F 01 20 C9 |         if_b    setword retval
39200     01 84 07 C1 |         if_b    add     hr0, #1
39204     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39208     F4 87 6F FB |                 djnz    hr1, #.l1
3920c                 | 
3920c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39210     01 1C 07 F6 |                 mov     hidr_state, #1
39214     E8 FE 9F FD |                 jmp     #.next
39218                 | .hats
39218                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39218     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3921c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39220     C8 02 B0 FD |                 call    #hpad_getbits
39224     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39228     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3922c     01 1C 07 F6 |                 mov     hidr_state, #1
39230     90 FF 9F FD |                 jmp     #.skip
39234                 | .buttons
39234                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39234     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39238     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3923c     90 8F 03 FA |                 mul     hpar2, hidr_count
39240     A8 02 B0 FD |                 call    #hpad_getbits
39244     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39248     B8 BF 62 F0 |                 shl     retval, htmp
3924c     5F 17 43 F5 |                 or      hidr_buttons, retval
39250     90 71 03 F1 |                 add     htmp, hidr_count
39254     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39258     01 1C 07 F6 |                 mov     hidr_state, #1
3925c     64 FF 9F FD |                 jmp     #.skip
39260                 | .report_id
39260     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39264     2D 00 7C 5D |         if_nz   ret     wcz
39268     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3926c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39270     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39274     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39278     01 F2 87 51 |         if_nz   sub     ptrb,#1
3927c     80 FE 9F FD |                 jmp     #.next
39280                 | .usage_page
39280     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39284     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39288     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3928c     70 FE 9F FD |                 jmp     #.next
39290                 | .usage
39290     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39294     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39298     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3929c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
392a0     5C FE 9F AD |         if_z    jmp     #.next
392a4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
392a8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
392ac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
392b0     4C FE 9F AD |         if_z    jmp     #.next
392b4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
392b8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
392bc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
392c0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
392c4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
392c8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
392cc     10 00 90 AD |         if_z    jmp     #.usage_axis
392d0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
392d4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
392d8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
392dc     20 FE 9F FD |                 jmp     #.next
392e0                 | .usage_axis
392e0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
392e4     18 FE 9F CD |         if_b    jmp     #.next
392e8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
392ec     C7 01 00 F8 |                 setnib  hpar2
392f0                 | 
392f0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
392f4     C7 8F C3 F9 |                 decod   hpar2
392f8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
392fc                 | 
392fc     01 24 07 F1 |                 add     hidr_usage_idx, #1
39300     02 1C 07 F6 |                 mov     hidr_state, #2
39304     F8 FD 9F FD |                 jmp     #.next
39308                 | 
39308                 | '------------------------------------------------------------------------------
39308                 | ' Handle XInput controller
39308                 | ' On entry:
39308                 | '   ptrb - controller report
39308                 | '------------------------------------------------------------------------------
39308                 | '   Default implementation translates the report to a pseudo-defacto hid
39308                 | '   standard and jumps to hpad_translate for actions.
39308                 | '   Implementors may take specific actions for this kind of controller.
39308                 | '------------------------------------------------------------------------------
39308                 | hpad_xinput
39308     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3930c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39310     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39314     14 70 0F F2 |                 cmp     htmp, #$14      wz
39318     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3931c                 | 
3931c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3931c                 | 
3931c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39320     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39324                 | 
39324     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39328     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3932c     5F BF 22 F6 |                 not     retval
39330     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39334     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39338     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3933c     5F BF 22 F6 |                 not     retval
39340     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39344                 | 
39344     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39348     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3934c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39350     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39354     F8 01 B0 FD |                 call    #hpad_normalize
39358     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3935c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39360     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39364     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39368     E4 01 B0 FD |                 call    #hpad_normalize
3936c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39370                 | 
39370     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39374     81 BF E6 FA |                 rdword  retval, ptrb[1]
39378     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3937c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39380     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39384     01 16 47 F4 |                 bitc    hidr_buttons, #1
39388     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3938c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39390     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39394     03 16 47 F4 |                 bitc    hidr_buttons, #3
39398     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3939c     04 16 47 F4 |                 bitc    hidr_buttons, #4
393a0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
393a4     05 16 47 F4 |                 bitc    hidr_buttons, #5
393a8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
393ac     08 16 47 F4 |                 bitc    hidr_buttons, #8
393b0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
393b4     09 16 47 F4 |                 bitc    hidr_buttons, #9
393b8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
393bc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
393c0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
393c4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
393c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
393cc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
393d0                 | 
393d0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
393d4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
393d8     7A BB 7A FF 
393dc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
393e0     F9 FF 7F FF 
393e4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
393e8     B9 71 5F F9 |                 altgn   htmp, #htmp1
393ec     00 70 43 F8 |                 getnib  htmp
393f0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
393f4                 | 
393f4     AC 01 90 FD |                 jmp     #hpad_translate
393f8                 | 
393f8                 | '------------------------------------------------------------------------------
393f8                 | ' Handle PS3 controller
393f8                 | ' On entry:
393f8                 | '   ptrb - controller report
393f8                 | '------------------------------------------------------------------------------
393f8                 | '   Default implementation translates the report to a pseudo-defacto hid
393f8                 | '   standard and jumps to hpad_translate for actions.
393f8                 | '   Implementors may take specific actions for this kind of controller.
393f8                 | '------------------------------------------------------------------------------
393f8                 | hpad_ps3
393f8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
393fc     01 70 0F F2 |                 cmp     htmp, #$01      wz
39400     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39404                 | 
39404                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39404                 | 
39404     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39408     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3940c     40 01 B0 FD |                 call    #hpad_normalize
39410     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39414     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39418     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3941c     30 01 B0 FD |                 call    #hpad_normalize
39420     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39424     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39428     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3942c     20 01 B0 FD |                 call    #hpad_normalize
39430     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39434     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39438     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3943c     10 01 B0 FD |                 call    #hpad_normalize
39440     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39444     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39448     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3944c                 | 
3944c     08 8C 07 F6 |                 mov     hpar1, #8
39450     13 8E 07 F6 |                 mov     hpar2, #19
39454     94 00 B0 FD |                 call    #hpad_getbits
39458                 | 
39458     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3945c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39460     00 16 47 F4 |                 bitc    hidr_buttons, #0
39464     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39468     01 16 47 F4 |                 bitc    hidr_buttons, #1
3946c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39470     02 16 47 F4 |                 bitc    hidr_buttons, #2
39474     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39478     03 16 47 F4 |                 bitc    hidr_buttons, #3
3947c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39480     04 16 47 F4 |                 bitc    hidr_buttons, #4
39484     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39488     05 16 47 F4 |                 bitc    hidr_buttons, #5
3948c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39490     06 16 47 F4 |                 bitc    hidr_buttons, #6
39494     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39498     07 16 47 F4 |                 bitc    hidr_buttons, #7
3949c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
394a0     08 16 47 F4 |                 bitc    hidr_buttons, #8
394a4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
394a8     09 16 47 F4 |                 bitc    hidr_buttons, #9
394ac     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
394b0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
394b4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
394b8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
394bc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
394c0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
394c4                 | 
394c4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
394c8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
394cc     09 FA 79 FF 
394d0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
394d4     FF FA 7F FF 
394d8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
394dc     B9 71 5F F9 |                 altgn   htmp, #htmp1
394e0     00 70 43 F8 |                 getnib  htmp
394e4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
394e8                 | 
394e8     B8 00 90 FD |                 jmp     #hpad_translate
394ec                 | 
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' Read bits from report data buffer
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' On entry:
394ec                 | '   PTRB - report buffer
394ec                 | '   hpar1 - start bit
394ec                 | '   hpar2 - number of bits
394ec                 | ' On exit:
394ec                 | '   retval - bits
394ec                 | '------------------------------------------------------------------------------
394ec                 | hpad_getbits
394ec     C6 71 03 F6 |                 mov     htmp, hpar1
394f0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
394f4     F9 71 03 F1 |                 add     htmp, ptrb
394f8     B8 BF 02 FB |                 rdlong  retval, htmp
394fc                 | 
394fc     C6 73 03 F6 |                 mov     htmp1, hpar1
39500     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39504     B9 BF 42 F0 |                 shr     retval, htmp1
39508                 | 
39508     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3950c     10 00 90 1D |         if_a    jmp     #.l1
39510                 | 
39510     C7 8F C3 F9 |                 decod   hpar2
39514     01 8E 87 F1 |                 sub     hpar2, #1
39518     C7 BF 02 F5 |                 and     retval, hpar2
3951c     2D 00 64 FD |                 ret
39520                 | .l1
39520     FF 7F 00 FF 
39524     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39528     03 70 07 F1 |                 add     htmp, #3
3952c     B8 75 03 FB |                 rdlong  htmp2, htmp
39530     18 8E 87 F1 |                 sub     hpar2, #24
39534     C7 8F C3 F9 |                 decod   hpar2
39538     01 8E 87 F1 |                 sub     hpar2, #1
3953c     B9 75 43 F0 |                 shr     htmp2, htmp1
39540     C7 75 03 F5 |                 and     htmp2, hpar2
39544     18 74 67 F0 |                 shl     htmp2, #24
39548     BA BF 42 F5 |                 or      retval, htmp2
3954c     2D 00 64 FD |                 ret
39550                 | 
39550                 | '------------------------------------------------------------------------------
39550                 | ' Normalize value to signed word (-32768 / 32767)
39550                 | '------------------------------------------------------------------------------
39550                 | ' On entry:
39550                 | '   retval - value to normalize
39550                 | '   hidr_lminmax - min (word 1) max (word 0) value range
39550                 | '   - or -
39550                 | '   hidr_pminmax - min (word 1) max (word 0) value range
39550                 | '   hidr_size - value bits length
39550                 | ' On exit:
39550                 | '   retval - normalized value
39550                 | '------------------------------------------------------------------------------
39550                 | hpad_normalize
39550     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39554     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39558     2D 00 64 AD |         if_z    ret
3955c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
39560     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39564     0F 72 77 F7 |                 signx   htmp1, #15      wc
39568     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3956c     00 BE 66 C7 |         if_c    signx   retval, #0-0
39570     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
39574     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39578     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3957c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39580     B8 71 53 F6 |                 abs     htmp            wc
39584     1F BE 0E F4 |                 testb   retval, #31     wz
39588     5F BF 42 F6 |                 abs     retval
3958c     B8 BF 12 FD |                 qdiv    retval, htmp
39590     18 BE 62 FD |                 getqx   retval
39594     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39598     C0 FF 7F FF 
3959c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
395a0     2D 00 64 FD |                 ret
395a4                 | 
395a4                 | '------------------------------------------------------------------------------
395a4                 | ' Perform controller actions
395a4                 | ' On entry:
395a4                 | '    hidr_id        report id
395a4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
395a4                 | '                      X = hidr_axis+0, #0
395a4                 | '                      Y = hidr_axis+0, #1
395a4                 | '                      Z = hidr_axis+1, #0
395a4                 | '                     RX = hidr_axis+1, #1
395a4                 | '                     RY = hidr_axis+2, #0
395a4                 | '                     RZ = hidr_axis+2, #1
395a4                 | '    hidr_buttons   buttons state (bits 0 to 31)
395a4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
395a4                 | '
395a4                 | '                     -------3 -------2 -------1 -------0 byte
395a4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
395a4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
395a4                 | '                                zyx||| |||||||| ++++++++ n. buttons
395a4                 | '                                |||||| ||||++++--------- n. axes
395a4                 | '                                |||||| ++++------------- n. hats
395a4                 | '                                ++++++------------------ valid axes
395a4                 | '------------------------------------------------------------------------------
395a4                 | hpad_translate
395a4                 | 
395a4                 | 
395a4                 |         if HAVE_HIDPAD
395a4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
395a8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
395ac     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
395b0     01 70 E7 F2 |                 cmpsub  htmp,#1
395b4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
395b8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
395bc     2D 00 7C 3D |         if_ae   ret     wcz
395c0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
395c4     B8 F3 03 F1 |                 add     ptrb,htmp
395c8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
395cc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
395d0     28 0C 64 FD |                 setq    #7-1
395d4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
395d8                 |         end
395d8                 | 
395d8                 | 
395d8                 |         if EMUPAD_MAX_PLAYER > 0
395d8                 | .emupad_no_hat
395d8                 |         if EMUPAD_BT0_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT1_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT2_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT3_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT4_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT5_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT6_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT7_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT8_BIT >= 0
395d8                 |         end
395d8                 |         if EMUPAD_BT9_BIT >= 0
395d8                 |         end
395d8                 | .emupad_slot_over
395d8                 |         end
395d8                 | 
395d8                 |         if 0
395d8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
395d8                 | 
395d8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
395d8                 | 
395d8                 |         end
395d8     2D 00 64 FD |                 ret
395dc                 | end
395dc                 | 
395dc                 | if EMUPAD_MAX_PLAYER > 0
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' Clear EmuPad state
395dc                 | '------------------------------------------------------------------------------
395dc                 | emupad_reset
395dc                 | 
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' Get EmuPad Player number for current device (into retval)
395dc                 | ' Z flag is also set if current device is valid
395dc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
395dc                 | '------------------------------------------------------------------------------
395dc                 | emupad_getnum
395dc                 | .loop
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
395dc                 | '------------------------------------------------------------------------------
395dc                 | emupad_discon
395dc                 | .loop         
395dc                 |         
395dc                 |         ' FALL THROUGH!!!
395dc                 | 
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' Update EmuPad reports (all of them...)
395dc                 | '------------------------------------------------------------------------------
395dc                 | emupad_write_reports
395dc                 | .devloop
395dc                 | 
395dc                 | end
395dc                 | 
395dc                 | 
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
395dc                 | '------------------------------------------------------------------------------
395dc                 | ' On entry:
395dc                 | ' On exit:
395dc                 | '------------------------------------------------------------------------------
395dc                 | hget_hub_status
395dc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
395e0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
395e4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
395e8     01 90 2F F9 |                 setword hpar3, #1, #1
395ec     CF 02 A0 FD |                 call    #do_int_in
395f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
395f4     0C 00 90 AD |         if_z    jmp     #.data
395f8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
395fc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
39600     2D 00 64 FD |                 ret
39604                 | .data
39604     00 90 0F F2 |                 cmp     hpar3, #0               wz
39608     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3960c                 | 
3960c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39610     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39614     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39618     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3961c                 |                 debug(ubin_long(hub_status_chg))
3961c                 | 
3961c     01 5A 06 F6 |                 mov     hdev_port, #1
39620                 | .loop
39620     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39624     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39628     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3962c     F0 FF 9F 3D |         if_nc   jmp     #.loop
39630     2D 00 64 FD |                 ret
39634                 | 
39634                 | hub_port_handler
39634     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39638     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3963c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39640     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39644     55 02 A0 FD |                 call    #control_read
39648     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3964c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3964c                 | 
3964c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
39650     50 01 90 5D |         if_x0   jmp     #.other
39654     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39658     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3965c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39660     A0 02 A0 FD |                 call    #control_write
39664     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39668     7C 01 90 5D |         if_x0   jmp     #.disconnect
3966c     B0 99 02 F6 |                 mov     hctwait, _100ms_
39670     EF 02 A0 FD |                 call    #poll_waitx
39674                 | 
39674     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39678     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3967c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39680     A0 02 A0 FD |                 call    #control_write
39684                 | 
39684     02 76 07 F6 |                 mov     htmp3, #2
39688                 | .wait_reset
39688     AC 99 02 F6 |                 mov     hctwait, _8ms_
3968c     EF 02 A0 FD |                 call    #poll_waitx
39690     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39694     27 EF 03 F6 |                 mov     pb, urx_buff_p
39698     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3969c     55 02 A0 FD |                 call    #control_read
396a0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
396a4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
396a8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
396ac                 | 
396ac     10 02 D0 FE |                 loc     ptra, #clr_port_feat
396b0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
396b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396b8     A0 02 A0 FD |                 call    #control_write
396bc                 | 
396bc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
396c0                 | .wait_recover
396c0     A7 99 02 F6 |                 mov     hctwait, _1ms_
396c4     EF 02 A0 FD |                 call    #poll_waitx
396c8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
396cc                 | 
396cc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
396d0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
396d4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
396d8                 | 
396d8     00 08 00 FF 
396dc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
396e0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
396e4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
396e8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
396ec     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
396f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396f4     48 01 90 5D |         if_nz   jmp     #.done
396f8                 | .get_dev_desc
396f8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
396fc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39700     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39704     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39708     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3970c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39710     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39714     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39718     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3971c     AC 99 02 F6 |                 mov     hctwait, _8ms_
39720     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39724     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39728     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3972c     BE 00 A0 FD |                 call    #calc_crc5
39730     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39734     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39738     F7 AD C2 FA |                 rdbyte  total_data, pb
3973c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39740     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39744     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39748     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3974c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39750     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39754                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39754     9F 99 02 F6 |                 mov     hctwait, _500us_
39758     EF 02 A0 FD |                 call    #poll_waitx
3975c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
39760     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39764     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39768     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3976c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39770     CC 00 90 5D |         if_nz   jmp     #.done
39774     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39778     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3977c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39780     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39784     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39788     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3978c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39790     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39794     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39798     A4 00 90 CD |         if_b    jmp     #.done
3979c     6C F0 BF FD |                 call    #hparse_con_desc
397a0     9C 00 90 FD |                 jmp     #.done
397a4                 | 
397a4                 | .other
397a4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
397a8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
397ac     28 00 90 AD |         if_x1   jmp     #.reset_feature
397b0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
397b4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
397b8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
397bc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
397c0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
397c4     10 00 90 AD |         if_x1   jmp     #.reset_feature
397c8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
397cc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
397d0     04 00 90 AD |         if_x1   jmp     #.reset_feature
397d4     68 00 90 FD |                 jmp     #.done
397d8                 | .reset_feature
397d8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
397dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
397e0     A0 02 A0 FD |                 call    #control_write
397e4     58 00 90 FD |                 jmp     #.done
397e8                 | .disconnect
397e8                 | 
397e8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
397ec     00 70 E3 F8 |                 getbyte htmp
397f0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
397f4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
397f8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
397fc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
39800     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39804     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39808                 |         if EMUPAD_MAX_PLAYER > 0
39808                 |         end
39808                 |         if HAVE_MOUSE
39808     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3980c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39810     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39814                 |         end
39814                 |         if HAVE_HIDPAD
39814     14 0A F0 FE |                 loc ptrb,#hidpad_report
39818     2D 71 03 F6 |                 mov htmp,hdev_port
3981c     01 70 E7 F2 |                 cmpsub htmp,#1
39820     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39824     B8 F3 03 F1 |                 add ptrb,htmp
39828     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3982c     80 01 6C FC |                 wrlong #0,ptrb
39830                 |         end
39830                 | 
39830     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39834     00 00 C4 F8 |                 setbyte #0
39838     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3983c     00 00 04 F6 |                 mov     0-0, #0
39840                 | 
39840                 | .done
39840     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39844     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39848     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3984c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39850     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39854     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39858                 | 
39858     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3985c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39860     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39864     55 02 A0 FD |                 call    #control_read
39868     00 69 06 FB |                 rdlong  hub_port_status, ptra
3986c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3986c     2D 00 64 FD |                 ret
39870                 | 
39870                 | '------------------------------------------------------------------------------
39870                 | ' Partially populated SETUP packets
39870                 | '------------------------------------------------------------------------------
39870     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39871     06          |                 byte    REQ_GET_DESC
39872     00 01       |                 word    TYPE_DEVICE << 8
39874     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39876     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39878     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39879     06          |                 byte    REQ_GET_DESC
3987a     00 02       |                 word    TYPE_CONFIG << 8
3987c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3987e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39880     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39881     09          |                 byte    REQ_SET_CONFIG
39882     00 00       |                 word    0       ' Configuration value
39884     00 00       |                 word    0       ' Zero
39886     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39888     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39889     05          |                 byte    REQ_SET_ADDR
3988a     00 00       |                 word    0       ' Zero
3988c     00 00       |                 word    0       ' Zero
3988e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39890                 | '------------------------------------------------------------------------------
39890                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39890                 | ' wValue field dictates which protocol should be used.
39890                 | '
39890                 | ' When initialized, all devices default to report protocol. However the host
39890                 | ' should not make any assumptions about the device state and should set the
39890                 | ' desired protocol whenever initializing a device.
39890                 | '------------------------------------------------------------------------------
39890     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39891     0B          |                 byte    HID_SET_PROTO
39892     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39894                 |                                                 ' (HID 1.11 Section 7.2.6).
39894     00 00       |                 word    0               ' Interface index number.
39896     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39898                 | '------------------------------------------------------------------------------
39898     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39899     0A          |                 byte    HID_SET_IDLE
3989a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3989c                 |                                         ' reporting until a change is detected in the report data
3989c                 | 
3989c                 |                                         ' (HID 1.11 Section 7.2.4).
3989c     00 00       |                 word    0       ' Interface index number.
3989e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
398a0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
398a1     09          |                 byte    HID_SET_REPORT
398a2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
398a4                 |                                         ' (HID 1.11 Section 7.2.2).
398a4     00 00       |                 word    0       ' Interface index number.
398a6     00 00       |                 word    0       ' Size of the report, in bytes.
398a8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
398a9     06          |                 byte    REQ_GET_DESC
398aa     00 22       |                 word    TYPE_REPORT << 8
398ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
398ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398b0                 | '------------------------------------------------------------------------------
398b0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
398b1     06          |                 byte    REQ_GET_DESC
398b2     00 29       |                 word    TYPE_HUB << 8
398b4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
398b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398b8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
398b9     03          |                 byte    REQ_SET_FEATURE
398ba     00 00       |                 word    0       ' port power
398bc     01 00       |                 word    1       ' Port index number (1+)
398be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398c0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
398c1     01          |                 byte    REQ_CLEAR_FEATURE
398c2     00 00       |                 word    0       ' port power
398c4     01 00       |                 word    1       ' Port index number (1+)
398c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398c8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
398c9     00          |                 byte    REQ_GET_STATUS
398ca     00 00       |                 word    0
398cc     01 00       |                 word    1       ' Port index number (1+)
398ce     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
398d0                 | '------------------------------------------------------------------------------
398d0                 | if _HAVE_GAMEPAD
398d0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
398d4                 | ps3_command_buff
398d4     00 00 00 00 
398d8     00          |                 byte    $00, $00, $00, $00, $00
398d9     00 00 00 00 
398dd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
398de     FF 27 10 00 
398e2     32          |                 byte    $FF, $27, $10, $00, $32
398e3     FF 27 10 00 
398e7     32          |                 byte    $FF, $27, $10, $00, $32
398e8     FF 27 10 00 
398ec     32          |                 byte    $FF, $27, $10, $00, $32
398ed     FF 27 10 00 
398f1     32          |                 byte    $FF, $27, $10, $00, $32
398f2     00 00 00 00 
398f6     00          |                 byte    $00, $00, $00, $00, $00
398f7     00 00 00 00 
398fb     00          |                 byte    $00, $00, $00, $00, $00
398fc     00 00 00 00 
39900     00          |                 byte    $00, $00, $00, $00, $00
39901     00 00 00    |                 byte    $00, $00, $00
39904                 | '------------------------------------------------------------------------------
39904     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39907                 |                                         ' 0x01 All blinking
39907                 |                                         ' 0x02 1 flashes, then on
39907                 |                                         ' 0x03 2 flashes, then on
39907                 |                                         ' 0x04 3 flashes, then on
39907                 |                                         ' 0x05 4 flashes, then on
39907                 |                                         ' 0x06 1 on
39907                 |                                         ' 0x07 2 on
39907                 |                                         ' 0x08 3 on
39907                 |                                         ' 0x09 4 on
39907                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39907                 |                                         ' 0x0B Blinking*
39907                 |                                         ' 0x0C Slow blinking*
39907                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39907     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3990a     00          |                 byte    $00             ' Left rumble
3990b     00          |                 byte    $00             ' Right rumble
3990c     00 00 00    |                 byte    $00, $00, $00
3990f     00          | end
39910                 | alignl
39910                 | 
39910                 | if HAVE_MOUSE
39910     00 00 00 00 
39914     00 00 00 00 | mouse_limits long 0[2]
39918     00 00 00 00 | mouse_outptr long 0
3991c                 | end
3991c                 | 
3991c                 | if KEYQUEUE_SIZE > 0
3991c     00          | keyq_head byte 0
3991d     00          | keyq_tail byte 0
3991e     00 00 00 00 
      ...             
39b1a     00 00 00 00 
39b1e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39b20                 | alignl
39b20                 | end
39b20                 | 
39b20                 | if EMUPAD_MAX_PLAYER > 0
39b20                 | emupad_rule_buffer
39b20                 | if EMUPAD_BUILTIN_RULES
39b20                 | file "padmap_builtin.dat"
39b20                 | end
39b20                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39b20                 | '' Default rule directly follows!
39b20                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39b20                 | end
39b20                 | 
39b20                 | '------------------------------------------------------------------------------
39b20                 | ' The USB data cache area gets zero-filled at every device disconnect
39b20                 | '------------------------------------------------------------------------------
39b20                 | usb_cache_start
39b20                 | 
39b20                 | ' HID descriptor and report buffers
39b20                 | if !!OVERLAP_MEMORY
39b20     00 00 00 00 
      ...             
3a218     00 00 00 00 
3a21c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a220                 | end
3a220     00 00 00 00 
3a224     00 00 00 00 | hkbd_report     byte    0[8]
3a228     00 00 00 00 | hkbd_led_rep    byte    0
3a22c                 | alignl
3a22c                 | 
3a22c                 | if HAVE_HIDPAD
3a22c     00 00 00 00 
      ...             
3a2e8     00 00 00 00 
3a2ec     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a2f0                 | end
3a2f0                 | 
3a2f0                 | ' HUB descriptor
3a2f0     00          | hub_descr       byte    0   ' bDescLength
3a2f1     00          |                 byte    0   ' bDescriptorType
3a2f2     00          |                 byte    0   ' bNbrPorts
3a2f3     00 00       |                 word    0   ' wHubCharacteristics
3a2f5     00          |                 byte    0   ' bPwrOn2PwrGood
3a2f6     00          |                 byte    0   ' bHubContrCurrent
3a2f7     00          |                 byte    0   ' DeviceRemoveable
3a2f8     00          |                 byte    0   ' PortPwrCtrlMask
3a2f9                 | 
3a2f9                 | usb_cache_end
3a2f9                 | 
3a2f9                 | if HAVE_MOUSE
3a2f9     00 00 00 00 | mouse_xacc      long 0
3a2fd     00 00 00 00 | mouse_yacc      long 0
3a301     00 00 00 00 | mouse_zacc      long 0
3a305     00          | mouse_bstate    byte 0
3a306     00          | mouse_lpending  byte 0
3a307     00          | mouse_rpending  byte 0
3a308     00          | mouse_mpending  byte 0
3a309     00          | mouse_lock      byte 0
3a30a     00 00 00    |                 byte 0[3] ' padding
3a30d                 | end
3a30d                 | 
3a30d     00 00 00 00 
      ...             
3a385     00 00 00 00 
3a389     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a38d     00 00 00 00 
3a391     00 00 00 00 
3a395     00 00 00 00 
3a399     00 00 00 00 
3a39d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a39f     00 00 00 00 
      ...             
3a497     00 00 00 00 
3a49b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a49f                 | 
3a49f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a4a0                 | 	alignl
3a4a0                 | _audio096_spin2_dat_
3a4a0                 | 
3a4a0                 | audio       org     0
3a4a0                 | 
3a4a0     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a4a4     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a4a8     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a4ac                 |  
3a4ac     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a4b0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a4b4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a4b8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a4bc                 | 
3a4bc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a4c0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a4c4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a4c8     0F 24 06 FC |             wrpin   dac2,#right
3a4cc     0F 00 1E FC |             wxpin   #256,#right    
3a4d0     41 9C 64 FD |             dirh    #left addpins 1
3a4d4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a4d8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a4dc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a4e0                 |             
3a4e0                 | '---------------------------------------------------------------------------------        
3a4e0                 | '----------------- The main loop -------------------------------------------------
3a4e0                 | '---------------------------------------------------------------------------------
3a4e0                 | 
3a4e0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a4e4     10 00 90 CD |       if_c  jmp     #loop1
3a4e8                 |   
3a4e8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a4ec     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a4f0     D5 00 80 F1 |             sub     0-0,a40000000
3a4f4     FD 01 6E FB |             djnz    cn,#p402
3a4f8                 |     
3a4f8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a4fc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a500     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a504     01 00 06 C6 |     if_c    mov     cn,#1
3a508     DA 02 3A F3 |             fle     ct,time3 wcz
3a50c     02 00 06 C6 |     if_c    mov     cn,#2     
3a510     DB 02 3A F3 |             fle     ct,time4 wcz
3a514     03 00 06 C6 |     if_c    mov     cn,#3
3a518     DC 02 3A F3 |             fle     ct,time5 wcz
3a51c     04 00 06 C6 |     if_c    mov     cn,#4
3a520     DD 02 3A F3 |             fle     ct,time6 wcz
3a524     05 00 06 C6 |     if_c    mov     cn,#5
3a528     DE 02 3A F3 |             fle     ct,time7 wcz
3a52c     06 00 06 C6 |     if_c    mov     cn,#6
3a530     DF 02 3A F3 |             fle     ct,time8 wcz
3a534     07 00 06 C6 |     if_c    mov     cn,#7
3a538                 | 
3a538                 | 
3a538                 | '----------------------------------------------------------------------------------
3a538                 | '------------- Compute channel samples --------------------------------------------
3a538                 | '----------------------------------------------------------------------------------
3a538                 | 
3a538                 | 
3a538     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a53c     06 C0 65 F0 |             shl     channeladd,#6
3a540     E0 F0 03 F1 |             add     ptra,channeladd
3a544                 | 
3a544     28 16 64 FD |             setq    #11                        	' read parameters
3a548     00 D7 05 FB |             rdlong  pointer0,ptra
3a54c                 |     	    
3a54c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a550     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a554     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a558     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a55c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a560     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a564     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a568     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a56c                 |             
3a56c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a570     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a574     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a578                 | 
3a578     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a57c     EC 08 3A F9 |             getword oldrs,sample0,#1
3a580     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a584     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a588     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a58c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a590                 | 
3a590     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a594     00 04 02 F6 |             mov     dt0,0-0    
3a598     D7 04 82 F1 |             sub     dt0,time0
3a59c                 |             
3a59c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a5a0     FB 00 00 F1 |             add     0-0,afreq0  	
3a5a4                 |             
3a5a4                 | '---- envelopes
3a5a4                 |             
3a5a4     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a5a8     20 00 00 AF 
3a5ac     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a5b0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a5b4                 | 
3a5b4     FB 48 02 F6 |             mov     envs1,afreq0
3a5b8     F5 48 02 FA |             mul     envs1,envspd0
3a5bc     24 E7 01 F1 |             add     envph0,envs1 
3a5c0                 | 
3a5c0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a5c4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a5c8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a5cc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a5d0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a5d4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a5d8     00 46 06 36 |     if_ge   mov     envlo,#0
3a5dc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a5e0     16 E6 65 30 |     if_ge   shl     envph0,#22
3a5e4                 | 
3a5e4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a5e8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a5ec     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a5f0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a5f4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a5f8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a5fc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a600     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a604     23 49 02 FA |             mul     envs1,envlo
3a608     25 49 02 F1 |             add     envs1,envs2
3a60c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a610                 |             
3a610     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a614     1B C6 61 AD |     if_z    getrnd  spl
3a618     58 00 90 AD |     if_z    jmp     #p406
3a61c                 |  
3a61c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a620     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a624     08 D6 45 F0 |             shr     pointer0,#8
3a628                 |          
3a628     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a62c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a630     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a634     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a638                 |         
3a638     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a63c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a640     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a644                 |             
3a644     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a648     ED C4 01 F1 |             add     qq,sstart0            
3a64c                 | 
3a64c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a650     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a654     1C 01 B0 1D |     if_gt   call    #cache_read
3a658                 |          
3a658     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a65c     08 C6 65 50 |     if_nz   shl     spl,#8
3a660     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a664     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a668     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a66c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a670     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a674                 | 
3a674                 | 
3a674     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a678     00 C6 01 F6 |             mov     spl,0-0
3a67c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a680     00 C6 01 F6 |             mov     spl,0-0
3a684                 | 
3a684     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a688     00 0A 02 F6 |             mov     ls0,0-0
3a68c     20 00 00 FF 
3a690     00 C4 05 F6 |             mov     qq,##16384
3a694     FE C4 81 F1 |             sub     qq,apan0
3a698     E2 C6 31 FA |             scas    spl,qq
3a69c     00 0C 02 F6 |             mov     rs0, 0-0
3a6a0                 | 
3a6a0     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a6a4     06 11 02 F1 |             add     rs,rs0
3a6a8     03 0F 82 F1 |             sub     ls,oldls
3a6ac     05 0F 02 F1 |             add     ls,ls0
3a6b0                 |    
3a6b0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a6b4     05 D9 21 F9 |             setword sample0,ls0,#0
3a6b8                 |             
3a6b8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a6bc     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a6c0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a6c4                 |   '  if_z    mov     sample0,#0
3a6c4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a6c8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a6cc     04 00 00 AF 
3a6d0     00 B0 05 A1 |     if_z    add     time1,##2048
3a6d4     D8 B2 01 A6 |     if_z    mov     time2,time1
3a6d8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a6dc                 | 
3a6dc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a6e0     00 D7 65 FC |             wrlong  pointer0,ptra
3a6e4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a6e8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a6ec                 |                       
3a6ec     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a6f0     FF C3 25 A7 |     if_z    decmod  front, #511          
3a6f4                 |          
3a6f4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a6f8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a6fc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a700     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a704                 | 	    
3a704                 | 		    
3a704     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a708     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a70c     04 15 02 F6 |             mov     newsample, oldrs       
3a710                 | 
3a710     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a714     02 AF 01 F1 |             add     time0,dt0    
3a718                 |                                      
3a718     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a71c     D8 FD 9F AD |     if_z    jmp     #loop1
3a720     02 C5 01 F6 |             mov     qq,dt0
3a724                 | 
3a724                 |     
3a724                 |             
3a724     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a728     40 00 90 3D |     if_nc   jmp     #p399
3a72c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a730     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a734     F4 FF 9F AD |     if_e    jmp     #p398   
3a738                 | 		
3a738     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a73c     20 00 90 AD |     if_z    jmp     #p302	   
3a740                 |   
3a740     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a744     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a748     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a74c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a750     60 1E 66 FC |             wrlong  scptr2,#$60
3a754     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a758     01 00 00 CF 
3a75c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a760                 | 			    
3a760     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a764     00 00 00 FF 
3a768     FF C3 05 F7 |             incmod  front, ##511
3a76c     ED C5 6D FB | p399        djnz    qq,#p301
3a770                 |             
3a770     6C FD 9F FD |             jmp     #loop            'loop
3a774                 | 
3a774                 | '----------------------------------------------------------------------------------
3a774                 | '------------- This is the end of the main loop -----------------------------------
3a774                 | '----------------------------------------------------------------------------------
3a774                 | 
3a774                 | '----------------------------------------------------------------------------------
3a774                 | '------------- PSRAM cache ----------- --------------------------------------------
3a774                 | '----------------------------------------------------------------------------------
3a774                 | 
3a774                 | ' There are 8 cache pointers for 8 channels
3a774                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a774                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a774                 | 
3a774                 | 
3a774     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a778                 |             
3a778     E2 40 02 F6 | 	    mov     addrhi,qq		
3a77c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a780     14 01 96 F9 | 	    alts    cn,#cache1            
3a784     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a788     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a78c                 | 	
3a78c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a790     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a794     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a798     08 38 66 F0 | 	    shl     cmd,#8
3a79c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a7a0     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a7a4     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a7a8     13 3B 02 F1 |             add     hubaddr,hubptr 
3a7ac     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a7b0     28 04 64 FD |             setq    #2                          ' write 3 longs
3a7b4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a7b8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a7bc     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a7c0                 |             
3a7c0                 | 	
3a7c0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a7c4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a7c8     13 C5 01 F1 | 	    add     qq,hubptr
3a7cc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a7d0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a7d4                 |           
3a7d4                 | 
3a7d4                 | '--------------------------------------------------------------------------
3a7d4                 | '------ Interrupt service -------------------------------------------------
3a7d4                 | '------ Output the sample, get the next one if exists ---------------------
3a7d4                 | '--------------------------------------------------------------------------
3a7d4                 | 
3a7d4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a7d8     0F D0 25 FC |             wypin   rsample,#right       '4
3a7dc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a7e0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a7e4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a7e8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a7ec     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a7f0                 |     
3a7f0     F5 FF 3B FB |             reti1                        '17/19 
3a7f4                 |           
3a7f4                 | '---------------------------------------------------------------------------
3a7f4                 | '-------- End of interrupt -------------------------------------------------
3a7f4                 | '---------------------------------------------------------------------------    
3a7f4                 | 
3a7f4                 | 
3a7f4                 | '---------------------------------------------------------------------------
3a7f4                 | '------- Variables ---------------------------------------------------------
3a7f4                 | '---------------------------------------------------------------------------
3a7f4                 | 
3a7f4                 | ' constants
3a7f4                 | 
3a7f4     00 00 00 40 | a40000000   long $40000000
3a7f8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a7fc                 | 
3a7fc                 | ' Time variables
3a7fc                 | 
3a7fc     00 00 00 00 | time0       long 0    ' Global sample computing time
3a800     01 00 00 00 | time1       long 1    ' Local channels time
3a804     02 00 00 00 | time2       long 2
3a808     03 00 00 00 | time3       long 3
3a80c     04 00 00 00 | time4       long 4
3a810     05 00 00 00 | time5       long 5
3a814     06 00 00 00 | time6       long 6
3a818     07 00 00 00 | time7       long 7
3a81c     08 00 00 00 | time8       long 8
3a820                 | 
3a820     00 00 00 00 | channeladd long 0
3a824                 | 
3a824     00 00 00 00 | front       long 0
3a828                 | 
3a828                 | ' temporary variables 
3a828     00 00 00 00 | qq          long 0
3a82c     00 00 00 00 | spl         long 0
3a830     00 00 00 00 | zero        long 0
3a834     00 00 00 00 | mailbox     long 0
3a838     00 00 00 00 | mailbox2 long 0
3a83c                 | 
3a83c                 | ' Interrupt ISR variables
3a83c                 | 
3a83c     00 00 00 00 | lsample     long 0
3a840     00 00 00 00 | rsample     long 0
3a844     00 00 00 00 | lsnext      long 0
3a848     00 00 00 00 | rsnext      long 0 
3a84c                 | 
3a84c                 | ' channel parameter block
3a84c                 | 
3a84c     00 00 00 00 | pointer0    long 0     
3a850     00 00 00 00 | sample0     long 0
3a854     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a858     00 00 00 00 | lstart0     long 0
3a85c     00 00 00 00 | lend0       long 0
3a860     00 00 00 00 | volpan0     long 0
3a864     00 00 00 00 | freqskip0   long 0
3a868     00 00 00 00 | command0    long 0
3a86c     00 00 00 00 | envph0	    long 0
3a870     00 00 00 00 | envptr0	    long 0
3a874     00 00 00 00 | envspd0	    long 0
3a878     00 00 00 00 | envlen0	    long 0
3a87c     00 00 00 00 | res5	    long 0
3a880     00 00 00 00 | res6	    long 0
3a884     00 00 00 00 | res7	    long 0
3a888     00 00 00 00 | res8	    long 0
3a88c                 | 
3a88c     00 00 00 00 | afreq0      long 0
3a890     00 00 00 00 | askip0      long 0
3a894     00 00 00 00 | avol0       long 0
3a898     00 00 00 00 | apan0       long 0
3a89c                 | 
3a89c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a8a0     00 00 00 00 | cn          long 0
3a8a4     00 00 00 00 | ct          long 0
3a8a8     00 00 00 00 | dt0         long 0
3a8ac                 | 
3a8ac                 | ' Samples
3a8ac     00 00 00 00 | oldls       long 0
3a8b0     00 00 00 00 | oldrs       long 0
3a8b4                 | 
3a8b4     00 00 00 00 | ls0         long 0
3a8b8     00 00 00 00 | rs0         long 0
3a8bc                 | 
3a8bc     00 00 00 00 | ls          long 0    
3a8c0     00 00 00 00 | rs          long 0
3a8c4                 | 
3a8c4     00 00 00 00 | oldsample   long 0
3a8c8     00 00 00 00 | newsample   long 0
3a8cc                 | 
3a8cc     00 00 00 00 | nrsample    long 0
3a8d0     00 00 00 00 | nlsample    long 0
3a8d4                 | 
3a8d4     00 00 00 00 | scbase long 0
3a8d8     00 00 00 00 | scptr long 0
3a8dc     00 00 00 00 | scptr2 long 0
3a8e0     00 00 00 00 | scope long 0
3a8e4                 | 
3a8e4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a8e8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a8ec                 | 
3a8ec     00 18 07 00 | hubptr      long $71800
3a8f0     00 00 00 00 | cache1      long 0
3a8f4     00 00 00 00 | cache2      long 0
3a8f8     00 00 00 00 | cache3      long 0
3a8fc     00 00 00 00 | cache4      long 0
3a900     00 00 00 00 | cache5      long 0
3a904     00 00 00 00 | cache6      long 0
3a908     00 00 00 00 | cache7      long 0
3a90c     00 00 00 00 | cache8      long 0
3a910                 | 
3a910                 | 
3a910     00 00 00 00 | cmd         long 0
3a914     00 00 00 00 | hubaddr     long 0
3a918     00 01 00 00 | count       long 256
3a91c     00 00 00 00 | addrlo long 0
3a920     00 00 00 00 | addrhi long 0
3a924     00 00 00 00 | pointer00 long 0
3a928     00 00 00 00 | envhi long 0
3a92c     00 00 00 00 | envlo long 0
3a930     00 00 00 00 | envs1 long 0
3a934     00 00 00 00 | envs2 long 0
3a938     00 00 00 00 | noise0 long 0
3a93c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a940     00 00 00 00 
3a944     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a948                 | 	alignl
3a948                 | __system__dat_
3a948     00 00 00 00 
3a94c     00 00 00 00 | 	byte	$00[8]
3a950     03 00 00 00 
3a954     00 00 00 00 
3a958     00 00 00 00 
3a95c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a960     00 00 00 00 
      ...             
3abec     00 00 00 00 
3abf0     00 00 00 00 | 	byte	$00[660]
3abf4     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3abf8     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3abfc     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3ac00     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3ac04     00 00 00 00 
3ac08     00 00 00 00 
3ac0c     00 00 00 00 
3ac10     00 00 00 00 
3ac14     00 00 00 00 
3ac18     00 00 00 00 
3ac1c     00 00 00 00 | 	byte	$00[28]
3ac20     88 AC 03 00 | 	long	@@@__system__dat_ + 832
3ac24     8B AC 03 00 | 	long	@@@__system__dat_ + 835
3ac28     AC AC 03 00 | 	long	@@@__system__dat_ + 868
3ac2c     C5 AC 03 00 | 	long	@@@__system__dat_ + 893
3ac30     E0 AC 03 00 | 	long	@@@__system__dat_ + 920
3ac34     FA AC 03 00 | 	long	@@@__system__dat_ + 946
3ac38     0A AD 03 00 | 	long	@@@__system__dat_ + 962
3ac3c     1C AD 03 00 | 	long	@@@__system__dat_ + 980
3ac40     2E AD 03 00 | 	long	@@@__system__dat_ + 998
3ac44     40 AD 03 00 | 	long	@@@__system__dat_ + 1016
3ac48     4C AD 03 00 | 	long	@@@__system__dat_ + 1028
3ac4c     5D AD 03 00 | 	long	@@@__system__dat_ + 1045
3ac50     71 AD 03 00 | 	long	@@@__system__dat_ + 1065
3ac54     7B AD 03 00 | 	long	@@@__system__dat_ + 1075
3ac58     8B AD 03 00 | 	long	@@@__system__dat_ + 1091
3ac5c     9A AD 03 00 | 	long	@@@__system__dat_ + 1106
3ac60     B0 AD 03 00 | 	long	@@@__system__dat_ + 1128
3ac64     C9 AD 03 00 | 	long	@@@__system__dat_ + 1153
3ac68     DD AD 03 00 | 	long	@@@__system__dat_ + 1173
3ac6c     EB AD 03 00 | 	long	@@@__system__dat_ + 1187
3ac70     FF AD 03 00 | 	long	@@@__system__dat_ + 1207
3ac74     0B AE 03 00 | 	long	@@@__system__dat_ + 1219
3ac78     1D AE 03 00 | 	long	@@@__system__dat_ + 1237
3ac7c     35 AE 03 00 | 	long	@@@__system__dat_ + 1261
3ac80     47 AE 03 00 | 	long	@@@__system__dat_ + 1279
3ac84     5A AE 03 00 | 	long	@@@__system__dat_ + 1298
3ac88     4F 4B 00 4E 
3ac8c     75 6D 65 72 
3ac90     69 63 61 6C 
3ac94     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ac98     75 6D 65 6E 
3ac9c     74 20 6F 75 
3aca0     74 20 6F 66 
3aca4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aca8     61 69 6E 00 
3acac     52 65 73 75 
3acb0     6C 74 20 6E 
3acb4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3acb8     65 70 72 65 
3acbc     73 65 6E 74 
3acc0     61 62 6C 65 
3acc4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3acc8     65 67 61 6C 
3accc     20 6D 75 6C 
3acd0     74 69 62 79 
3acd4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3acd8     65 71 75 65 
3acdc     6E 63 65 00 
3ace0     4E 6F 20 73 
3ace4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ace8     66 69 6C 65 
3acec     20 6F 72 20 
3acf0     64 69 72 65 
3acf4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3acf8     79 00 42 61 
3acfc     64 20 66 69 
3ad00     6C 65 20 6E 
3ad04     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ad08     72 00 50 65 
3ad0c     72 6D 69 73 
3ad10     73 69 6F 6E 
3ad14     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ad18     69 65 64 00 
3ad1c     4E 6F 74 20 
3ad20     65 6E 6F 75 
3ad24     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ad28     65 6D 6F 72 
3ad2c     79 00 54 65 
3ad30     6D 70 6F 72 
3ad34     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ad38     66 61 69 6C 
3ad3c     75 72 65 00 
3ad40     46 69 6C 65 
3ad44     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ad48     73 74 73 00 
3ad4c     49 6E 76 61 
3ad50     6C 69 64 20 
3ad54     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ad58     6D 65 6E 74 
3ad5c     00 54 6F 6F 
3ad60     20 6D 61 6E 
3ad64     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ad68     65 6E 20 66 
3ad6c     69 6C 65 73 
3ad70     00 49 2F 4F 
3ad74     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ad78     6F 72 00 4E 
3ad7c     6F 74 20 61 
3ad80     20 64 69 72 
3ad84     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ad88     72 79 00 49 
3ad8c     73 20 61 20 
3ad90     64 69 72 65 
3ad94     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ad98     79 00 52 65 
3ad9c     61 64 20 6F 
3ada0     6E 6C 79 20 
3ada4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ada8     20 73 79 73 
3adac     74 65 6D 00 
3adb0     46 75 6E 63 
3adb4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3adb8     20 6E 6F 74 
3adbc     20 69 6D 70 
3adc0     6C 65 6D 65 
3adc4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3adc8     00 44 69 72 
3adcc     65 63 74 6F 
3add0     72 79 20 6E 
3add4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3add8     6D 70 74 79 
3addc     00 4E 61 6D 
3ade0     65 20 74 6F 
3ade4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ade8     6E 67 00 44 
3adec     65 76 69 63 
3adf0     65 20 6E 6F 
3adf4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3adf8     65 6B 61 62 
3adfc     6C 65 00 42 
3ae00     61 64 20 61 
3ae04     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ae08     73 73 00 42 
3ae0c     72 6F 6B 65 
3ae10     6E 20 63 6F 
3ae14     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ae18     74 69 6F 6E 
3ae1c     00 44 65 76 
3ae20     69 63 65 20 
3ae24     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ae28     65 73 6F 75 
3ae2c     72 63 65 20 
3ae30     62 75 73 79 
3ae34     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ae38     73 73 20 64 
3ae3c     65 76 69 63 
3ae40     65 20 6C 69 
3ae44     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ae48     6F 20 73 70 
3ae4c     61 63 65 20 
3ae50     6F 6E 20 64 
3ae54     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ae58     65 00 55 6E 
3ae5c     6B 6E 6F 77 
3ae60     6E 20 65 72 
3ae64     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ae68     00 00 00 00 
3ae6c     00 00 00 00 | 	byte	$00[8]
3ae70     05 00 00 00 
3ae74     00 00 00 00 
3ae78     00 00 00 00 
3ae7c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae80     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae84     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ae88     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ae8c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae90     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ae94     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ae98     00 00 00 00 
3ae9c     00 00 00 00 | 	byte	$00[8]
3aea0     01 00 00 00 
3aea4     06 00 00 00 
3aea8     00 00 00 00 
3aeac     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aeb0     00 00 00 00 
3aeb4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3aeb8     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3aebc     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3aec0     00 00 00 00 | 	byte	$00, $00, $00, $00
3aec4     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3aec8     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3aecc     00 00 00 00 
3aed0     00 00 00 00 | 	byte	$00[8]
3aed4     01 00 00 00 
3aed8     06 00 00 00 
3aedc     00 00 00 00 
3aee0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aee4     00 00 00 00 
3aee8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3aeec     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3aef0     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3aef4     00 00 00 00 | 	byte	$00, $00, $00, $00
3aef8     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3aefc     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3af00     00 00 00 00 
      ...             
3b070     00 00 00 00 
3b074     00 00 00 00 | 	byte	$00[376]
3b078     7C B0 03 00 | 	long	@@@__system__dat_ + 1844
3b07c     00 00 00 00 
3b080     00 00 00 00 
3b084     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b088                 | 	alignl
3b088                 | _fatfs_cc_dat_
3b088     C7 00 FC 00 
3b08c     E9 00 E2 00 
3b090     E4 00 E0 00 
3b094     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3b098     EA 00 EB 00 
3b09c     E8 00 EF 00 
3b0a0     EE 00 EC 00 
3b0a4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3b0a8     C9 00 E6 00 
3b0ac     C6 00 F4 00 
3b0b0     F6 00 F2 00 
3b0b4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3b0b8     FF 00 D6 00 
3b0bc     DC 00 F8 00 
3b0c0     A3 00 D8 00 
3b0c4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3b0c8     E1 00 ED 00 
3b0cc     F3 00 FA 00 
3b0d0     F1 00 D1 00 
3b0d4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b0d8     BF 00 AE 00 
3b0dc     AC 00 BD 00 
3b0e0     BC 00 A1 00 
3b0e4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b0e8     91 25 92 25 
3b0ec     93 25 02 25 
3b0f0     24 25 C1 00 
3b0f4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b0f8     A9 00 63 25 
3b0fc     51 25 57 25 
3b100     5D 25 A2 00 
3b104     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b108     14 25 34 25 
3b10c     2C 25 1C 25 
3b110     00 25 3C 25 
3b114     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b118     5A 25 54 25 
3b11c     69 25 66 25 
3b120     60 25 50 25 
3b124     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b128     F0 00 D0 00 
3b12c     CA 00 CB 00 
3b130     C8 00 31 01 
3b134     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b138     CF 00 18 25 
3b13c     0C 25 88 25 
3b140     84 25 A6 00 
3b144     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b148     D3 00 DF 00 
3b14c     D4 00 D2 00 
3b150     F5 00 D5 00 
3b154     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b158     DE 00 DA 00 
3b15c     DB 00 D9 00 
3b160     FD 00 DD 00 
3b164     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b168     AD 00 B1 00 
3b16c     17 20 BE 00 
3b170     B6 00 A7 00 
3b174     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b178     B0 00 A8 00 
3b17c     B7 00 B9 00 
3b180     B3 00 B2 00 
3b184     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b188     61 00 1A 03 
3b18c     E0 00 17 03 
3b190     F8 00 07 03 
3b194     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b198     78 01 00 01 
3b19c     30 01 32 01 
3b1a0     06 01 39 01 
3b1a4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b1a8     2E 01 79 01 
3b1ac     06 01 80 01 
3b1b0     4D 00 43 02 
3b1b4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b1b8     82 01 84 01 
3b1bc     84 01 86 01 
3b1c0     87 01 87 01 
3b1c4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b1c8     8B 01 8B 01 
3b1cc     8D 01 8E 01 
3b1d0     8F 01 90 01 
3b1d4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b1d8     93 01 94 01 
3b1dc     F6 01 96 01 
3b1e0     97 01 98 01 
3b1e4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b1e8     9B 01 9C 01 
3b1ec     9D 01 20 02 
3b1f0     9F 01 A0 01 
3b1f4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b1f8     A2 01 A4 01 
3b1fc     A4 01 A6 01 
3b200     A7 01 A7 01 
3b204     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b208     AB 01 AC 01 
3b20c     AC 01 AE 01 
3b210     AF 01 AF 01 
3b214     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b218     B3 01 B3 01 
3b21c     B5 01 B5 01 
3b220     B7 01 B8 01 
3b224     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b228     BB 01 BC 01 
3b22c     BC 01 BE 01 
3b230     F7 01 C0 01 
3b234     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b238     C3 01 C4 01 
3b23c     C5 01 C4 01 
3b240     C7 01 C8 01 
3b244     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b248     CB 01 CA 01 
3b24c     CD 01 10 01 
3b250     DD 01 01 00 
3b254     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b258     12 01 F3 01 
3b25c     03 00 F1 01 
3b260     F4 01 F4 01 
3b264     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b268     22 02 12 01 
3b26c     3A 02 09 00 
3b270     65 2C 3B 02 
3b274     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b278     66 2C 3F 02 
3b27c     40 02 41 02 
3b280     41 02 46 02 
3b284     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b288     40 00 81 01 
3b28c     86 01 55 02 
3b290     89 01 8A 01 
3b294     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b298     5A 02 90 01 
3b29c     5C 02 5D 02 
3b2a0     5E 02 5F 02 
3b2a4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b2a8     62 02 94 01 
3b2ac     64 02 65 02 
3b2b0     66 02 67 02 
3b2b4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b2b8     6A 02 62 2C 
3b2bc     6C 02 6D 02 
3b2c0     6E 02 9C 01 
3b2c4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b2c8     9D 01 73 02 
3b2cc     74 02 9F 01 
3b2d0     76 02 77 02 
3b2d4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b2d8     7A 02 7B 02 
3b2dc     7C 02 64 2C 
3b2e0     7E 02 7F 02 
3b2e4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b2e8     82 02 A9 01 
3b2ec     84 02 85 02 
3b2f0     86 02 87 02 
3b2f4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b2f8     B1 01 B2 01 
3b2fc     45 02 8D 02 
3b300     8E 02 8F 02 
3b304     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b308     B7 01 7B 03 
3b30c     03 00 FD 03 
3b310     FE 03 FF 03 
3b314     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b318     86 03 88 03 
3b31c     89 03 8A 03 
3b320     B1 03 11 03 
3b324     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b328     A3 03 A3 03 
3b32c     C4 03 08 03 
3b330     CC 03 03 00 
3b334     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b338     8F 03 D8 03 
3b33c     18 01 F2 03 
3b340     0A 00 F9 03 
3b344     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b348     F5 03 F6 03 
3b34c     F7 03 F7 03 
3b350     F9 03 FA 03 
3b354     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b358     20 03 50 04 
3b35c     10 07 60 04 
3b360     22 01 8A 04 
3b364     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b368     0E 01 CF 04 
3b36c     01 00 C0 04 
3b370     D0 04 44 01 
3b374     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b378     00 00 7D 1D 
3b37c     01 00 63 2C 
3b380     00 1E 96 01 
3b384     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b388     00 1F 08 06 
3b38c     10 1F 06 06 
3b390     20 1F 08 06 
3b394     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b398     40 1F 06 06 
3b39c     51 1F 07 00 
3b3a0     59 1F 52 1F 
3b3a4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b3a8     5D 1F 56 1F 
3b3ac     5F 1F 60 1F 
3b3b0     08 06 70 1F 
3b3b4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b3b8     BB 1F C8 1F 
3b3bc     C9 1F CA 1F 
3b3c0     CB 1F DA 1F 
3b3c4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b3c8     F9 1F EA 1F 
3b3cc     EB 1F FA 1F 
3b3d0     FB 1F 80 1F 
3b3d4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b3d8     08 06 A0 1F 
3b3dc     08 06 B0 1F 
3b3e0     04 00 B8 1F 
3b3e4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b3e8     BC 1F CC 1F 
3b3ec     01 00 C3 1F 
3b3f0     D0 1F 02 06 
3b3f4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b3f8     E5 1F 01 00 
3b3fc     EC 1F F3 1F 
3b400     01 00 FC 1F 
3b404     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b408     32 21 70 21 
3b40c     10 02 84 21 
3b410     01 00 83 21 
3b414     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b418     30 2C 2F 04 
3b41c     60 2C 02 01 
3b420     67 2C 06 01 
3b424     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b428     80 2C 64 01 
3b42c     00 2D 26 08 
3b430     41 FF 1A 03 
3b434     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b438     05 07 09 0E 
3b43c     10 12 14 16 
3b440     18 1C 1E 43 
3b444     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b448     41 41 43 45 
3b44c     45 45 49 49 
3b450     49 41 41 45 
3b454     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b458     4F 55 55 59 
3b45c     4F 55 4F 9C 
3b460     4F 9E 9F 41 
3b464     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b468     A5 A6 A7 A8 
3b46c     A9 AA AB AC 
3b470     AD AE AF B0 
3b474     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b478     41 41 41 B8 
3b47c     B9 BA BB BC 
3b480     BD BE BF C0 
3b484     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b488     C5 41 41 C8 
3b48c     C9 CA CB CC 
3b490     CD CE CF D1 
3b494     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b498     49 49 49 49 
3b49c     D9 DA DB DC 
3b4a0     DD 49 DF 4F 
3b4a4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b4a8     4F E6 E8 E8 
3b4ac     55 55 55 59 
3b4b0     59 EE EF F0 
3b4b4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b4b8     F5 F6 F7 F8 
3b4bc     F9 FA FB FC 
3b4c0     FD FE FF 00 
3b4c4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b4c8     00 00 00 00 | 	byte	$00, $00, $00, $00
3b4cc     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b4d0     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b4d4     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b4d8     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b4dc     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b4e0     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b4e4     00 00 00 00 
3b4e8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b4ec     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b4f0     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b4f4     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b4f8     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b4fc     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b500     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b504     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b508     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b50c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b510     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b514     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b518     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b51c     FF FF FF FF 
3b520     1F 00 00 00 
3b524     1C 00 00 00 
3b528     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b52c     1E 00 00 00 
3b530     1F 00 00 00 
3b534     1E 00 00 00 
3b538     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b53c     1F 00 00 00 
3b540     1E 00 00 00 
3b544     1F 00 00 00 
3b548     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b54c     1F 00 00 00 
3b550     00 00 00 00 
3b554     1F 00 00 00 
3b558     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b55c     5A 00 00 00 
3b560     78 00 00 00 
3b564     97 00 00 00 
3b568     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b56c     D4 00 00 00 
3b570     F3 00 00 00 
3b574     11 01 00 00 
3b578     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b57c     4E 01 00 00 
3b580     6D 01 00 00 
3b584     FF FF FF FF 
3b588     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b58c     00 00 00 00 
      ...             
3b5a4     00 00 00 00 
3b5a8     00 00 00 00 | 	byte	$00[32]
3b5ac     CA B5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b5b0     CE B5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b5b4     00 00 00 00 
3b5b8     00 00 00 00 
3b5bc     00 00 00 00 
3b5c0     00 00 00 00 
3b5c4     00 00       | 	byte	$00[18]
3b5c6     3F 3F 3F 00 
3b5ca     55 43 54 00 
3b5ce     55 43 54 00 
3b5d2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b5d6     00 00 00 00 
3b5da     00 00 00    | 	byte	$00[7]
3b5dd     CA 9A 3B 00 
3b5e1     00 00 00 01 
3b5e5     01 01 01 01 
3b5e9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b5ed     91 11 11 11 
3b5f1     11 01 01 01 
3b5f5     01 01 01 01 
3b5f9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b5fd     01 01 01 01 
3b601     01 01 01    | 	byte	$01[7]
3b604     90 20 20 20 
3b608     20 20 20 20 
3b60c     20 20 20 20 
3b610     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b614     42 42 42 42 
3b618     42 42 42 42 
3b61c     42 42       | 	byte	$42[10]
3b61e     20 20 20 20 
3b622     20 20 20    | 	byte	$20[7]
3b625     44 44 44 44 
3b629     44 44       | 	byte	$44[6]
3b62b     04 04 04 04 
3b62f     04 04 04 04 
3b633     04 04 04 04 
3b637     04 04 04 04 
3b63b     04 04 04 04 | 	byte	$04[20]
3b63f     20 20 20 20 
3b643     20 20       | 	byte	$20[6]
3b645     48 48 48 48 
3b649     48 48       | 	byte	$48[6]
3b64b     08 08 08 08 
3b64f     08 08 08 08 
3b653     08 08 08 08 
3b657     08 08 08 08 
3b65b     08 08 08 08 | 	byte	$08[20]
3b65f     20 20 20 20 
3b663     01 00 00 00 
3b667     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b668                 | __methodtable__
3b668     C8 B4 01 00 | 	long	@_do_no_command
3b66c     70 26 01 00 | 	long	@_do_plus
3b670     5C 2B 01 00 | 	long	@_do_minus
3b674     24 30 01 00 | 	long	@_do_or
3b678     3C 31 01 00 | 	long	@_do_mul
3b67c     C8 36 01 00 | 	long	@_do_fdiv
3b680     0C 2F 01 00 | 	long	@_do_and
3b684     A8 34 01 00 | 	long	@_do_div
3b688     90 38 01 00 | 	long	@_do_mod
3b68c     B0 3A 01 00 | 	long	@_do_shl
3b690     C8 3B 01 00 | 	long	@_do_shr
3b694     E0 3C 01 00 | 	long	@_do_power
3b698     F0 19 01 00 | 	long	@_do_getvar
3b69c     5C BC 00 00 | 	long	@_do_push
3b6a0     F0 13 01 00 | 	long	@_do_assign
3b6a4     8C 82 01 00 | 	long	@_do_cls
3b6a8     84 FD 00 00 | 	long	@_do_new
3b6ac     04 83 01 00 | 	long	@_do_plot
3b6b0     D4 83 01 00 | 	long	@_do_draw
3b6b4     48 8D 01 00 | 	long	@_do_print
3b6b8     40 86 01 00 | 	long	@_do_circle
3b6bc     C8 84 01 00 | 	long	@_do_fcircle
3b6c0     B8 87 01 00 | 	long	@_do_box
3b6c4     60 8B 01 00 | 	long	@_do_frame
3b6c8     CC 82 01 00 | 	long	@_do_color
3b6cc     78 96 00 00 | 	long	@_do_for
3b6d0     CC 99 00 00 | 	long	@_do_next
3b6d4     E8 FA 00 00 | 	long	@_do_list
3b6d8     C4 CE 00 00 | 	long	@_do_run
3b6dc     AC 12 01 00 | 	long	@_do_error
3b6e0     A4 FF 00 00 | 	long	@_do_fast_goto
3b6e4     0C 0F 01 00 | 	long	@_do_find_goto
3b6e8     1C 11 01 00 | 	long	@_do_slow_goto
3b6ec     E4 B0 01 00 | 	long	@_do_nothing
3b6f0     A0 C2 00 00 | 	long	@_test_csave
3b6f4     04 C6 00 00 | 	long	@_do_save
3b6f8     0C CA 00 00 | 	long	@_do_load
3b6fc     7C 9C 01 00 | 	long	@_do_pinwrite
3b700     18 A7 01 00 | 	long	@_do_waitms
3b704     54 A8 01 00 | 	long	@_do_waitvbl
3b708     7C AE 01 00 | 	long	@_do_if
3b70c     60 AF 01 00 | 	long	@_do_else
3b710     A8 3E 01 00 | 	long	@_do_eq
3b714     20 4D 01 00 | 	long	@_do_ge
3b718     F8 51 01 00 | 	long	@_do_le
3b71c     80 43 01 00 | 	long	@_do_gt
3b720     58 48 01 00 | 	long	@_do_lt
3b724     D0 56 01 00 | 	long	@_do_ne
3b728     08 5D 01 00 | 	long	@_do_rnd
3b72c     E8 B0 01 00 | 	long	@_do_brun
3b730     B4 B3 01 00 | 	long	@_do_beep
3b734     84 A8 01 00 | 	long	@_do_dir
3b738     98 92 01 00 | 	long	@_do_paper
3b73c     20 93 01 00 | 	long	@_do_ink
3b740     BC 93 01 00 | 	long	@_do_font
3b744     38 94 01 00 | 	long	@_do_mode
3b748     20 B3 01 00 | 	long	@_do_mouse
3b74c     24 82 01 00 | 	long	@_do_gettime
3b750     54 B3 01 00 | 	long	@_do_cursor
3b754     88 B3 01 00 | 	long	@_do_click
3b758     B0 7F 01 00 | 	long	@_do_mousex
3b75c     F4 7F 01 00 | 	long	@_do_mousey
3b760     7C 80 01 00 | 	long	@_do_mousek
3b764     38 80 01 00 | 	long	@_do_mousew
3b768     DC 5F 01 00 | 	long	@_do_sin
3b76c     80 75 01 00 | 	long	@_do_stick
3b770     04 77 01 00 | 	long	@_do_strig
3b774     C4 7E 01 00 | 	long	@_do_sprite
3b778     50 7B 01 00 | 	long	@_do_defsprite
3b77c     88 78 01 00 | 	long	@_do_getpixel
3b780     60 A8 01 00 | 	long	@_do_waitclock
3b784     D4 B4 01 00 | 	long	@_do_negative
3b788     C0 80 01 00 | 	long	@_do_rdpin
3b78c     2C 81 01 00 | 	long	@_do_rqpin
3b790     A0 81 01 00 | 	long	@_do_pinread
3b794     14 9F 01 00 | 	long	@_do_wrpin
3b798     94 9F 01 00 | 	long	@_do_wxpin
3b79c     14 A0 01 00 | 	long	@_do_wypin
3b7a0     04 9D 01 00 | 	long	@_do_pinfloat
3b7a4     44 9D 01 00 | 	long	@_do_pinlo
3b7a8     84 9D 01 00 | 	long	@_do_pinhi
3b7ac     04 9E 01 00 | 	long	@_do_pinstart
3b7b0     C4 9D 01 00 | 	long	@_do_pintoggle
3b7b4     94 A0 01 00 | 	long	@_do_position
3b7b8     38 6F 01 00 | 	long	@_do_cos
3b7bc     58 70 01 00 | 	long	@_do_tan
3b7c0     7C 73 01 00 | 	long	@_do_atn
3b7c4     64 71 01 00 | 	long	@_do_asin
3b7c8     70 72 01 00 | 	long	@_do_acos
3b7cc     90 74 01 00 | 	long	@_do_sqr
3b7d0     A0 89 01 00 | 	long	@_do_fill
3b7d4     FC F1 00 00 | 	long	@_do_defsnd
3b7d8     14 D2 00 00 | 	long	@_do_defenv
3b7dc     84 AF 01 00 | 	long	@_do_rad
3b7e0     AC AF 01 00 | 	long	@_do_deg
3b7e4     28 B0 01 00 | 	long	@_do_int
3b7e8     A8 DE 00 00 | 	long	@_do_play
3b7ec     DC 99 01 00 | 	long	@_do_setdelay
3b7f0     34 99 01 00 | 	long	@_do_setenv
3b7f4     84 9A 01 00 | 	long	@_do_setlen
3b7f8     D4 9B 01 00 | 	long	@_do_setpan
3b7fc     2C 9B 01 00 | 	long	@_do_setvol
3b800     E4 97 01 00 | 	long	@_do_setwave
3b804     8C 98 01 00 | 	long	@_do_setsustain
3b808     64 F1 00 00 | 	long	@_do_release
3b80c     D0 5E 01 00 | 	long	@_do_getenvsustain
3b810     1C A1 01 00 | 	long	@_do_poke
3b814     F4 A1 01 00 | 	long	@_do_dpoke
3b818     CC A2 01 00 | 	long	@_do_lpoke
3b81c     A4 A3 01 00 | 	long	@_do_peek
3b820     54 A4 01 00 | 	long	@_do_dpeek
3b824     00 A5 01 00 | 	long	@_do_lpeek
3b828     10 A6 01 00 | 	long	@_do_adr
3b82c     AC A5 01 00 | 	long	@_do_fre
3b830     14 A6 01 00 | 	long	@_do_getnotevalue
3b834     A8 1F 01 00 | 	long	@_do_getaddr
3b838     98 23 01 00 | 	long	@_do_inkey
3b83c     84 B5 01 00 | 	long	@_do_abs
3b840     78 6C 01 00 | 	long	@_do_hex
3b844     D8 6D 01 00 | 	long	@_do_bin
3b848     74 69 01 00 | 	long	@_do_val
3b84c     78 68 01 00 | 	long	@_do_chr
3b850     B4 65 01 00 | 	long	@_do_asc
3b854     30 64 01 00 | 	long	@_do_left
3b858     AC 62 01 00 | 	long	@_do_right
3b85c     E8 60 01 00 | 	long	@_do_mid
3b860     0C 67 01 00 | 	long	@_do_len
3b864     60 95 00 00 | 	long	@_do_gosub
3b868     E8 98 00 00 | 	long	@_do_return
3b86c     90 CE 00 00 | 	long	@_do_end
3b870     94 99 00 00 | 	long	@_do_pop
3b874     D8 79 01 00 | 	long	@_do_log
3b878     E0 EA 00 00 | 	long	@_do_changevol
3b87c     28 EF 00 00 | 	long	@_do_changewav
3b880     C0 EB 00 00 | 	long	@_do_changepan
3b884     D0 EC 00 00 | 	long	@_do_changefreq
3b888     54 F0 00 00 | 	long	@_do_shutup
3b88c     D4 AF 01 00 | 	long	@_do_round
3b890     00 CA 00 00 | 	long	@_do_enter
3b894     94 00 01 00 | 	long	@_do_open
3b898     AC 03 01 00 | 	long	@_do_close
3b89c     28 04 01 00 | 	long	@_do_get
3b8a0     CC 09 01 00 | 	long	@_do_put
3b8a4     94 F2 01 00 | 	long	@_hg010b_spin2_putchar
3b8a8     EC 01 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b8ac     30 02 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b8b0     78 02 03 00 | 	long	@__struct___bas_wrap_sender_close
3b8b4     1C 01 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3b8b8     8C 01 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b8bc     D4 00 03 00 | 	long	@___strs_cl_pfunc
3b8c0     68 5E 02 00 | 	long	@__system____root_opendir
3b8c4     04 5F 02 00 | 	long	@__system____root_closedir
3b8c8     80 5E 02 00 | 	long	@__system____root_readdir
3b8cc     0C 5F 02 00 | 	long	@__system____root_stat
3b8d0     58 57 02 00 | 	long	@__system____default_putc
3b8d4     DC 56 02 00 | 	long	@__system____default_getc
3b8d8     00 58 02 00 | 	long	@__system____default_flush
3b8dc     D8 EB 02 00 | 	long	@_fatfs_cc_v_close
3b8e0     F4 EF 02 00 | 	long	@_fatfs_cc_v_read
3b8e4     08 F1 02 00 | 	long	@_fatfs_cc_v_write
3b8e8     E8 F1 02 00 | 	long	@_fatfs_cc_v_lseek
3b8ec     70 F2 02 00 | 	long	@_fatfs_cc_v_ioctl
3b8f0     C4 F2 02 00 | 	long	@_fatfs_cc_v_open
3b8f4     3C EB 02 00 | 	long	@_fatfs_cc_v_creat
3b8f8     1C EC 02 00 | 	long	@_fatfs_cc_v_opendir
3b8fc     90 EC 02 00 | 	long	@_fatfs_cc_v_closedir
3b900     D0 EC 02 00 | 	long	@_fatfs_cc_v_readdir
3b904     04 EE 02 00 | 	long	@_fatfs_cc_v_stat
3b908     84 F2 02 00 | 	long	@_fatfs_cc_v_mkdir
3b90c     A4 F2 02 00 | 	long	@_fatfs_cc_v_rmdir
3b910     94 F2 02 00 | 	long	@_fatfs_cc_v_remove
3b914     B4 F2 02 00 | 	long	@_fatfs_cc_v_rename
3b918     D4 F3 02 00 | 	long	@_fatfs_cc_v_init
3b91c     DC F3 02 00 | 	long	@_fatfs_cc_v_deinit
3b920     94 0B 02 00 | 	long	@__system___tx
3b924     D4 0B 02 00 | 	long	@__system___rx
3b928     78 6A 02 00 | 	long	@__system___rxtxioctl_0696
3b92c     D0 6A 02 00 | 	long	@__system____dummy_flush_0697
3b930     A4 F3 02 00 | 	long	@_fatfs_cc_v_flush
3b934                 | __heap_base
3b934     00 00 00 00 
      ...             
6a734     00 00 00 00 
6a738     00 00 00 00 | 	long	0[48002]
6a73c                 | objmem
6a73c     00 00 00 00 
      ...             
74b54     00 00 00 00 
74b58     00 00 00 00 | 	long	0[10504]
74b5c                 | stackspace
74b5c     00 00 00 00 | 	long	0[1]
74b60 100             | 	org	COG_BSS_START
74b60 100             | _var01
74b60 100             | 	res	1
74b60 101             | _var02
74b60 101             | 	res	1
74b60 102             | _var03
74b60 102             | 	res	1
74b60 103             | _var04
74b60 103             | 	res	1
74b60 104             | _var05
74b60 104             | 	res	1
74b60 105             | _var06
74b60 105             | 	res	1
74b60 106             | _var07
74b60 106             | 	res	1
74b60 107             | _var08
74b60 107             | 	res	1
74b60 108             | _var09
74b60 108             | 	res	1
74b60 109             | arg01
74b60 109             | 	res	1
74b60 10a             | arg02
74b60 10a             | 	res	1
74b60 10b             | arg03
74b60 10b             | 	res	1
74b60 10c             | arg04
74b60 10c             | 	res	1
74b60 10d             | arg05
74b60 10d             | 	res	1
74b60 10e             | arg06
74b60 10e             | 	res	1
74b60 10f             | local01
74b60 10f             | 	res	1
74b60 110             | local02
74b60 110             | 	res	1
74b60 111             | local03
74b60 111             | 	res	1
74b60 112             | local04
74b60 112             | 	res	1
74b60 113             | local05
74b60 113             | 	res	1
74b60 114             | local06
74b60 114             | 	res	1
74b60 115             | local07
74b60 115             | 	res	1
74b60 116             | local08
74b60 116             | 	res	1
74b60 117             | local09
74b60 117             | 	res	1
74b60 118             | local10
74b60 118             | 	res	1
74b60 119             | local11
74b60 119             | 	res	1
74b60 11a             | local12
74b60 11a             | 	res	1
74b60 11b             | local13
74b60 11b             | 	res	1
74b60 11c             | local14
74b60 11c             | 	res	1
74b60 11d             | local15
74b60 11d             | 	res	1
74b60 11e             | local16
74b60 11e             | 	res	1
74b60 11f             | local17
74b60 11f             | 	res	1
74b60 120             | local18
74b60 120             | 	res	1
74b60 121             | local19
74b60 121             | 	res	1
74b60 122             | local20
74b60 122             | 	res	1
74b60 123             | local21
74b60 123             | 	res	1
74b60 124             | local22
74b60 124             | 	res	1
74b60 125             | local23
74b60 125             | 	res	1
74b60 126             | local24
74b60 126             | 	res	1
74b60 127             | local25
74b60 127             | 	res	1
74b60 128             | local26
74b60 128             | 	res	1
74b60 129             | local27
74b60 129             | 	res	1
74b60 12a             | local28
74b60 12a             | 	res	1
74b60 12b             | local29
74b60 12b             | 	res	1
74b60 12c             | local30
74b60 12c             | 	res	1
74b60 12d             | local31
74b60 12d             | 	res	1
74b60 12e             | local32
74b60 12e             | 	res	1
74b60 12f             | local33
74b60 12f             | 	res	1
74b60 130             | local34
74b60 130             | 	res	1
74b60 131             | local35
74b60 131             | 	res	1
74b60 132             | local36
74b60 132             | 	res	1
74b60 133             | local37
74b60 133             | 	res	1
74b60 134             | local38
74b60 134             | 	res	1
74b60 135             | local39
74b60 135             | 	res	1
74b60 136             | local40
74b60 136             | 	res	1
74b60 137             | local41
74b60 137             | 	res	1
74b60 138             | local42
74b60 138             | 	res	1
74b60 139             | local43
74b60 139             | 	res	1
74b60 13a             | local44
74b60 13a             | 	res	1
74b60 13b             | local45
74b60 13b             | 	res	1
74b60 13c             | local46
74b60 13c             | 	res	1
74b60 13d             | local47
74b60 13d             | 	res	1
74b60 13e             | muldiva_
74b60 13e             | 	res	1
74b60 13f             | muldivb_
74b60 13f             | 	res	1
74b60 140             | 	fit	480
74b60 140             | 
